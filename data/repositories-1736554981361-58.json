{
  "metadata": {
    "timestamp": 1736554981361,
    "page": 58,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "goldbergyoni/nodebestpractices",
      "stars": 101426,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".all-contributorsrc",
          "type": "blob",
          "size": 47.7,
          "content": "{\n  \"files\": [\n    \"README.basque.md\",\n    \"README.brazilian-portuguese.md\",\n    \"README.chinese.md\",\n    \"README.french.md\",\n    \"README.indonesian.md\",\n    \"README.japanese.md\",\n    \"README.korean.md\",\n    \"README.md\",\n    \"README.polish.md\",\n    \"README.russian.md\"\n  ],\n  \"imageSize\": 100,\n  \"contributorsPerLine\": 7,\n  \"contributorTemplate\": \"<a href=\\\"<%= contributor.profile %>\\\"><img src=\\\"<%= contributor.avatar_url %>\\\" width=\\\"<%= options.imageSize %>px;\\\" alt=\\\"<%= contributor.name %>\\\"style=\\\"max-width:<%= options.imageSize %>px;min-width:<%= options.imageSize %>px;\\\" /><br /><sub style=\\\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\\\"><b><%= contributor.name %></b></sub></a><br /><%= contributions %>\",\n  \"badgeTemplate\": \"[![All Contributors](https://img.shields.io/badge/all_contributors-<%= contributors.length %>-orange.svg?style=flat-square)](#contributors)\",\n  \"contributors\": [\n    {\n      \"login\": \"kevinrambaud\",\n      \"name\": \"Kevin Rambaud\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/7501477?v=4\",\n      \"profile\": \"https://github.com/kevinrambaud\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"mfine15\",\n      \"name\": \"Michael Fine\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/1286554?v=4\",\n      \"profile\": \"https://github.com/mfine15\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"squgeim\",\n      \"name\": \"Shreya Dahal\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/4996818?v=4\",\n      \"profile\": \"http://squgeim.github.io\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"matheusrocha89\",\n      \"name\": \"Matheus Cruz Rocha\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/3718366?v=4\",\n      \"profile\": \"http://matheusrocha89.com\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"BitYog\",\n      \"name\": \"Yog Mehta\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/28219178?v=4\",\n      \"profile\": \"https://bityog.github.io/Portfolio/\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"kudapara\",\n      \"name\": \"Kudakwashe Paradzayi\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/13519184?v=4\",\n      \"profile\": \"http://kudapara.co.zw\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"t1st3\",\n      \"name\": \"t1st3\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/1469638?v=4\",\n      \"profile\": \"https://www.t1st3.com/\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"mulijordan1976\",\n      \"name\": \"mulijordan1976\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/33382022?v=4\",\n      \"profile\": \"https://github.com/mulijordan1976\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"matchai\",\n      \"name\": \"Matan Kushner\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/4658208?v=4\",\n      \"profile\": \"https://twitter.com/matchai\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"fabiothiroki\",\n      \"name\": \"Fabio Hiroki\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/670057?v=4\",\n      \"profile\": \"https://fabiothiroki.github.io\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"jsumners\",\n      \"name\": \"James Sumners\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/321201?v=4\",\n      \"profile\": \"http://james.sumners.info/\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"dan-gamble\",\n      \"name\": \"Dan Gamble\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/7152041?v=4\",\n      \"profile\": \"https://twitter.com/_DanGamble\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"trainorpj\",\n      \"name\": \"PJ Trainor\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/13276704?v=4\",\n      \"profile\": \"https://github.com/trainorpj\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"reod\",\n      \"name\": \"Remek Ambroziak\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/3164299?v=4\",\n      \"profile\": \"https://github.com/reod\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"yonjah\",\n      \"name\": \"Yoni Jah\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/1829789?v=4\",\n      \"profile\": \"https://ca.non.co.il\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"hazolsky\",\n      \"name\": \"Misha Khokhlov\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/1270790?v=4\",\n      \"profile\": \"https://github.com/hazolsky\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"EvgenyOrekhov\",\n      \"name\": \"Evgeny Orekhov\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/8045060?v=4\",\n      \"profile\": \"https://plus.google.com/+ЕвгенийОрехов/\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"gediminasml\",\n      \"name\": \"-\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/19854105?v=4\",\n      \"profile\": \"https://github.com/gediminasml\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"hisaac\",\n      \"name\": \"Isaac Halvorson\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/923876?v=4\",\n      \"profile\": \"http://hisaac.net\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"vkaracic\",\n      \"name\": \"Vedran Karačić\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/2808092?v=4\",\n      \"profile\": \"http://www.vedrankaracic.com\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"lallenlowe\",\n      \"name\": \"lallenlowe\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/10761165?v=4\",\n      \"profile\": \"https://github.com/lallenlowe\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"nwwells\",\n      \"name\": \"Nathan Wells\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/1039473?v=4\",\n      \"profile\": \"https://github.com/nwwells\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"paulovitin\",\n      \"name\": \"Paulo Reis\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/125503?v=4\",\n      \"profile\": \"https://github.com/paulovitin\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"syzer\",\n      \"name\": \"syzer\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/1989646?v=4\",\n      \"profile\": \"https://snap.simpego.ch\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"davesnx\",\n      \"name\": \"David Sancho\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/3763599?v=4\",\n      \"profile\": \"http://sancho.dev\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"pupix\",\n      \"name\": \"Robert Manolea\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/4929965?v=4\",\n      \"profile\": \"https://apiforge.it\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"spaxe\",\n      \"name\": \"Xavier Ho\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/708395?v=4\",\n      \"profile\": \"https://jumptoglide.com\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"ocularrhythm\",\n      \"name\": \"Aaron\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/2738518?v=4\",\n      \"profile\": \"http://www.ocular-rhythm.io\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"septa97\",\n      \"name\": \"Jan Charles Maghirang Adona\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/13742634?v=4\",\n      \"profile\": \"https://septa97.me\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"AllenFang\",\n      \"name\": \"Allen\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/5351390?v=4\",\n      \"profile\": \"https://www.cakeresume.com/allenfang\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"leonardovillela\",\n      \"name\": \"Leonardo Villela\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/8650543?v=4\",\n      \"profile\": \"https://github.com/leonardovillela\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"MichalZalecki\",\n      \"name\": \"Michał Załęcki\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/3136577?v=4\",\n      \"profile\": \"https://michalzalecki.com\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"chrisnicola\",\n      \"name\": \"Chris Nicola\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/156449?v=4\",\n      \"profile\": \"http://www.wealthbar.com\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"aecorredor\",\n      \"name\": \"Alejandro Corredor\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/9114987?v=4\",\n      \"profile\": \"https://twitter.com/aecorredor\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"cwar\",\n      \"name\": \"cwar\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/272843?v=4\",\n      \"profile\": \"https://github.com/cwar\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"keyfoxth\",\n      \"name\": \"Yuwei\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/10647132?v=4\",\n      \"profile\": \"https://github.com/keyfoxth\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"utkarshbhatt12\",\n      \"name\": \"Utkarsh Bhatt\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/10895594?v=4\",\n      \"profile\": \"https://bigcodenerd.org\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"duartemendes\",\n      \"name\": \"Duarte Mendes\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/12852058?v=4\",\n      \"profile\": \"https://github.com/duartemendes\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"serv\",\n      \"name\": \"Jason Kim\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/103456?v=4\",\n      \"profile\": \"http://jasonkim.ca\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"Max101\",\n      \"name\": \"Mitja O.\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/2124249?v=4\",\n      \"profile\": \"https://github.com/Max101\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"SandroMiguel\",\n      \"name\": \"Sandro Miguel Marques\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/6423157?v=4\",\n      \"profile\": \"http://sandromiguel.com\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"GabeKuslansky\",\n      \"name\": \"Gabe\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/9855482?v=4\",\n      \"profile\": \"https://github.com/GabeKuslansky\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"ripper234\",\n      \"name\": \"Ron Gross\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/172282?v=4\",\n      \"profile\": \"http://ripper234.com/\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"vkarpov15\",\n      \"name\": \"Valeri Karpov\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/1620265?v=4\",\n      \"profile\": \"http://www.thecodebarbarian.com\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"imsergiobernal\",\n      \"name\": \"Sergio Bernal\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/20087388?v=4\",\n      \"profile\": \"https://sergiobernal.com\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"ntelkedzhiev\",\n      \"name\": \"Nikola Telkedzhiev\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/7332371?v=4\",\n      \"profile\": \"https://github.com/ntelkedzhiev\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"vitordagamagodoy\",\n      \"name\": \"Vitor Godoy\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/26370059?v=4\",\n      \"profile\": \"https://github.com/vitordagamagodoy\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"manishsaraan\",\n      \"name\": \"Manish Saraan\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/19797340?v=4\",\n      \"profile\": \"https://www.manishsaraan.com/\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"uronly14me\",\n      \"name\": \"Sangbeom Han\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/5186814?v=4\",\n      \"profile\": \"https://github.com/uronly14me\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"blackmatch\",\n      \"name\": \"blackmatch\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/12443954?v=4\",\n      \"profile\": \"https://blackmatch.github.io\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"ISNIT0\",\n      \"name\": \"Joe Reeve\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/5173131?v=4\",\n      \"profile\": \"https://simmsreeve.com\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"BusbyActual\",\n      \"name\": \"Ryan Busby\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/14985016?v=4\",\n      \"profile\": \"https://github.com/BusbyActual\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"ImanMh\",\n      \"name\": \"Iman Mohamadi\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/4482199?v=4\",\n      \"profile\": \"http://jsdecorator.com\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"HeeL\",\n      \"name\": \"Sergii Paryzhskyi\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/287769?v=4\",\n      \"profile\": \"https://github.com/HeeL\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"kapilepatel\",\n      \"name\": \"Kapil Patel\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/25738473?v=4\",\n      \"profile\": \"https://github.com/kapilepatel\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"justjavac\",\n      \"name\": \"迷渡\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/359395?v=4\",\n      \"profile\": \"https://twitter.com/justjavac\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"hozefaj\",\n      \"name\": \"Hozefa\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/2084833?v=4\",\n      \"profile\": \"https://github.com/hozefaj\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"el-ethan\",\n      \"name\": \"Ethan\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/10249884?v=4\",\n      \"profile\": \"https://github.com/el-ethan\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"milkdeliver\",\n      \"name\": \"Sam\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/3108407?v=4\",\n      \"profile\": \"https://github.com/milkdeliver\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"ArlindXh\",\n      \"name\": \"Arlind\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/19508764?v=4\",\n      \"profile\": \"https://github.com/ArlindXh\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"ttous\",\n      \"name\": \"Teddy Toussaint\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/19815440?v=4\",\n      \"profile\": \"https://github.com/ttous\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"LewisArdern\",\n      \"name\": \"Lewis\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/2419690?v=4\",\n      \"profile\": \"http://ardern.io\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"GabrielLidenor\",\n      \"name\": \"Gabriel Lidenor \",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/765963?v=4\",\n      \"profile\": \"https://gabriellidenor.com/\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"animir\",\n      \"name\": \"Roman\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/4623196?v=4\",\n      \"profile\": \"https://github.com/animir\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"Francozeira\",\n      \"name\": \"Francozeira\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/47419763?v=4\",\n      \"profile\": \"https://github.com/Francozeira\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"Invvard\",\n      \"name\": \"Invvard\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/7305493?v=4\",\n      \"profile\": \"https://twitter.com/invvard\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"romulogarofalo\",\n      \"name\": \"Rômulo Garofalo\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/18492592?v=4\",\n      \"profile\": \"https://romulogarofalo.github.io/\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"thoqbk\",\n      \"name\": \"Tho Q Luong\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/1491103?v=4\",\n      \"profile\": \"http://thoqbk.github.io/\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"Qeneke\",\n      \"name\": \"Burak Shen\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/20271568?v=4\",\n      \"profile\": \"https://github.com/Qeneke\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"MartinMuzatko\",\n      \"name\": \"Martin Muzatko\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/2950505?v=4\",\n      \"profile\": \"http://www.happy-css.com\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"autoboxer\",\n      \"name\": \"Jared Collier\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/2757601?v=4\",\n      \"profile\": \"https://github.com/autoboxer\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"bikingbadger\",\n      \"name\": \"Hilton Meyer\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/4545860?v=4\",\n      \"profile\": \"http://hiltonmeyer.com\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"ChangJoo-Park\",\n      \"name\": \"ChangJoo Park(박창주)\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/1451365?v=4\",\n      \"profile\": \"http://kr.vuejs.org\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"MasahiroSakaguchi\",\n      \"name\": \"Masahiro Sakaguchi\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/16427431?v=4\",\n      \"profile\": \"https://github.com/MasahiroSakaguchi\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"TheHollidayInn\",\n      \"name\": \"Keith Holliday\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/1253400?v=4\",\n      \"profile\": \"https://github.com/TheHollidayInn\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"coreyc\",\n      \"name\": \"coreyc\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/1485356?v=4\",\n      \"profile\": \"https://www.coreycleary.me\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"Berkmann18\",\n      \"name\": \"Maximilian Berkmann\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/8260834?v=4\",\n      \"profile\": \"http://maxcubing.wordpress.com\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"DouglasMV\",\n      \"name\": \"Douglas Mariano Valero\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/32845487?v=4\",\n      \"profile\": \"https://github.com/DouglasMV\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"marcelosdm\",\n      \"name\": \"Marcelo Melo\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/18266600?v=4\",\n      \"profile\": \"https://github.com/marcelosdm\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"mperk\",\n      \"name\": \"Mehmet Perk\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/3465794?v=4\",\n      \"profile\": \"https://twitter.com/mperk_\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"ryanouyang\",\n      \"name\": \"ryan ouyang\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/360426?v=4\",\n      \"profile\": \"https://github.com/ryanouyang\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"shabeer-mdy\",\n      \"name\": \"Shabeer\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/26842535?v=4\",\n      \"profile\": \"https://github.com/shabeer-mdy\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"halfzebra\",\n      \"name\": \"Eduard Kyvenko\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/3983879?v=4\",\n      \"profile\": \"https://github.com/halfzebra\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"deyvisonrocha\",\n      \"name\": \"Deyvison Rocha\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/686067?v=4\",\n      \"profile\": \"http://deyvisonrocha.com\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"georgem3\",\n      \"name\": \"George Mamer\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/20108934?v=4\",\n      \"profile\": \"http://twitter.com/georgemamer\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"leimonio\",\n      \"name\": \"Konstantinos Leimonis\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/1969742?v=4\",\n      \"profile\": \"https://github.com/leimonio\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"Zybax\",\n      \"name\": \"Oliver Lluberes\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/22094453?v=4\",\n      \"profile\": \"https://github.com/Zybax\",\n      \"contributions\": [\n        \"translation\"\n      ]\n    },\n    {\n      \"login\": \"tiendq\",\n      \"name\": \"Tien Do\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/815910?v=4\",\n      \"profile\": \"https://stackoverflow.com/story/tiendq\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"singh1114\",\n      \"name\": \"Ranvir Singh\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/11356398?v=4\",\n      \"profile\": \"http://singh1114.github.io/\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"collierrgbsitisfise\",\n      \"name\": \"Vadim Nicolaev\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/13496126?v=4\",\n      \"profile\": \"https://github.com/collierrgbsitisfise\",\n      \"contributions\": [\n        \"content\",\n        \"translation\"\n      ]\n    },\n    {\n      \"login\": \"germangamboa95\",\n      \"name\": \"German Gamboa Gonzalez\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/28633849?v=4\",\n      \"profile\": \"https://github.com/germangamboa95\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"AbdelrahmanHafez\",\n      \"name\": \"Hafez\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/19984935?v=4\",\n      \"profile\": \"https://github.com/AbdelrahmanHafez\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"chandiran-dmc\",\n      \"name\": \"Chandiran\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/42678579?v=4\",\n      \"profile\": \"http://linkedin.com/in/chandiran-dmc\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"VinayaSathyanarayana\",\n      \"name\": \"VinayaSathyanarayana\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/16976677?v=4\",\n      \"profile\": \"https://github.com/VinayaSathyanarayana\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"kiwikern\",\n      \"name\": \"Kim Kern\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/2671139?v=4\",\n      \"profile\": \"https://www.kimkern.de\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"kennethfreitas\",\n      \"name\": \"Kenneth Freitas\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/55669043?v=4\",\n      \"profile\": \"https://kennethfreitas.github.io/\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"songe\",\n      \"name\": \"songe\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/1531561?v=4\",\n      \"profile\": \"https://github.com/songe\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"Ksedline\",\n      \"name\": \"Kirill Shekhovtsov\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/30693707?v=4\",\n      \"profile\": \"http://ksed.dev\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"SerzN1\",\n      \"name\": \"Serge\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/2534649?v=4\",\n      \"profile\": \"https://github.com/SerzN1\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"keyrwinz\",\n      \"name\": \"keyrwinz\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/21241761?v=4\",\n      \"profile\": \"https://github.com/keyrwinz\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"nDmitry\",\n      \"name\": \"Dmitry Nikitenko\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/2134568?v=4\",\n      \"profile\": \"https://github.com/nDmitry\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"bushuai\",\n      \"name\": \"bushuai\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/1875256?v=4\",\n      \"profile\": \"https://bushuai.cc\",\n      \"contributions\": [\n        \"review\",\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"benjamingr\",\n      \"name\": \"Benjamin Gruenbaum\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/1315533?v=4\",\n      \"profile\": \"https://stackoverflow.com/users/1348195/benjamin-gruenbaum\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"byeze\",\n      \"name\": \"Ezequiel\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/7424138?v=4\",\n      \"profile\": \"https://github.com/byeze\",\n      \"contributions\": [\n        \"translation\"\n      ]\n    },\n    {\n      \"login\": \"juaoose\",\n      \"name\": \"Juan José Rodríguez\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/994594?v=4\",\n      \"profile\": \"https://github.com/juaoose\",\n      \"contributions\": [\n        \"translation\"\n      ]\n    },\n    {\n      \"login\": \"OrBin\",\n      \"name\": \"Or Bin\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/6897234?v=4\",\n      \"profile\": \"https://github.com/OrBin\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"andreoav\",\n      \"name\": \"Andreo Vieira\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/508827?v=4\",\n      \"profile\": \"https://twitter.com/andreoav07\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"mikicho\",\n      \"name\": \"Michael Solomon\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/11459632?v=4\",\n      \"profile\": \"https://github.com/mikicho\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"jimmycallin\",\n      \"name\": \"Jimmy Callin\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/2225828?v=4\",\n      \"profile\": \"https://github.com/jimmycallin\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"w01fS\",\n      \"name\": \"Siddharth\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/26025955?v=4\",\n      \"profile\": \"https://www.linkedin.com/in/siddharthofficial/\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"ryan3E0\",\n      \"name\": \"Ryan Smith\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/1578766?v=4\",\n      \"profile\": \"https://ryansmith.tech/\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"bttger\",\n      \"name\": \"Tom Boettger\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/49961674?v=4\",\n      \"profile\": \"https://de.linkedin.com/in/tom-boettger\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"jormaechea\",\n      \"name\": \"Joaquín Ormaechea\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/5612500?v=4\",\n      \"profile\": \"https://github.com/jormaechea\",\n      \"contributions\": [\n        \"translation\"\n      ]\n    },\n    {\n      \"login\": \"dfrzuz\",\n      \"name\": \"dfrzuz\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/71859096?v=4\",\n      \"profile\": \"https://github.com/dfrzuz\",\n      \"contributions\": [\n        \"translation\"\n      ]\n    },\n    {\n      \"login\": \"victor-homyakov\",\n      \"name\": \"Victor Homyakov\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/121449?v=4\",\n      \"profile\": \"https://github.com/victor-homyakov\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"josh-hemphill\",\n      \"name\": \"Josh\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/46608115?v=4\",\n      \"profile\": \"http://joshuahemphill.com\",\n      \"contributions\": [\n        \"content\",\n        \"security\"\n      ]\n    },\n    {\n      \"login\": \"alec-francis\",\n      \"name\": \"Alec Francis\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/32949882?v=4\",\n      \"profile\": \"https://github.com/alec-francis\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"arjun6610\",\n      \"name\": \"arjun6610\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/61268891?v=4\",\n      \"profile\": \"https://github.com/arjun6610\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"jan-osch\",\n      \"name\": \"Jan Osch\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/11651780?v=4\",\n      \"profile\": \"https://github.com/jan-osch\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"thiagotrs\",\n      \"name\": \"Thiago Rotondo Sampaio\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/32005779?v=4\",\n      \"profile\": \"https://github.com/thiagotrs\",\n      \"contributions\": [\n        \"translation\"\n      ]\n    },\n    {\n      \"login\": \"Alexsey\",\n      \"name\": \"Alexsey\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/6392013?v=4\",\n      \"profile\": \"https://github.com/Alexsey\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"13luismb\",\n      \"name\": \"Luis A. Acurero\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/32210483?v=4\",\n      \"profile\": \"https://github.com/13luismb\",\n      \"contributions\": [\n        \"translation\"\n      ]\n    },\n    {\n      \"login\": \"lromano97\",\n      \"name\": \"Lucas Romano\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/22394847?v=4\",\n      \"profile\": \"https://lromano97.github.io/\",\n      \"contributions\": [\n        \"translation\"\n      ]\n    },\n    {\n      \"login\": \"denisecase\",\n      \"name\": \"Denise Case\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/13016516?v=4\",\n      \"profile\": \"https://github.com/denisecase\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"elektronik2k5\",\n      \"name\": \"Nick Ribal\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/1078554?v=4\",\n      \"profile\": \"http://stackoverflow.com/story/elektronik\",\n      \"contributions\": [\n        \"content\",\n        \"review\"\n      ]\n    },\n    {\n      \"login\": \"0xflotus\",\n      \"name\": \"0xflotus\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/26602940?v=4\",\n      \"profile\": \"https://github.com/0xflotus\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"dijonkitchen\",\n      \"name\": \"Jonathan Chen\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/11434205?v=4\",\n      \"profile\": \"https://www.dijonkitchen.org/\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"dilansri\",\n      \"name\": \"Dilan Srilal\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/5089728?v=4\",\n      \"profile\": \"https://github.com/dilansri\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"vladthelittleone\",\n      \"name\": \"vladthelittleone\",\n      \"avatar_url\": \"https://avatars3.githubusercontent.com/u/4215285?v=4\",\n      \"profile\": \"https://vectree.ru\",\n      \"contributions\": [\n        \"translation\"\n      ]\n    },\n    {\n      \"login\": \"nosvalds\",\n      \"name\": \"Nik Osvalds\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/60047271?v=4\",\n      \"profile\": \"https://www.nikolaso.com\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"kdaniel21\",\n      \"name\": \"Daniel Kiss\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/39854385?v=4\",\n      \"profile\": \"https://github.com/kdaniel21\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"forresst\",\n      \"name\": \"Forresst\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/163352?v=4\",\n      \"profile\": \"https://twitter.com/forresst17\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"svenheden\",\n      \"name\": \"Jonathan Svenheden\",\n      \"avatar_url\": \"https://avatars1.githubusercontent.com/u/76098?v=4\",\n      \"profile\": \"https://github.com/svenheden\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"AustrisC\",\n      \"name\": \"AustrisC\",\n      \"avatar_url\": \"https://avatars2.githubusercontent.com/u/12381652?v=4\",\n      \"profile\": \"https://github.com/AustrisC\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"cisco0808\",\n      \"name\": \"kyeongtae kim\",\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/60251188?v=4\",\n      \"profile\": \"https://github.com/cisco0808\",\n      \"contributions\": [\n        \"translation\"\n      ]\n    },\n    {\n      \"login\": \"6gx7iycn53ioq2e8apk1j1ypwov4giui\",\n      \"name\": \"007\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/65741741?v=4\",\n      \"profile\": \"https://keybase.io/651z9pz968v2accj\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"anediaz\",\n      \"name\": \"Ane Diaz de Tuesta\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/17216937?v=4\",\n      \"profile\": \"http://www.anediaz.com\",\n      \"contributions\": [\n        \"translation\",\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"YukiOta\",\n      \"name\": \"YukiOta\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/23182489?v=4\",\n      \"profile\": \"http://yukioh.net\",\n      \"contributions\": [\n        \"translation\"\n      ]\n    },\n    {\n      \"login\": \"Fdawgs\",\n      \"name\": \"Frazer Smith\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/43814140?v=4\",\n      \"profile\": \"https://www.yeovilhospital.co.uk/\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"rluvaton\",\n      \"name\": \"Raz Luvaton\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/16746759?v=4\",\n      \"profile\": \"https://github.com/rluvaton\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"YA21\",\n      \"name\": \"Yuta Azumi\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/37298463?v=4\",\n      \"profile\": \"https://github.com/YA21\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"andrewjbarbour\",\n      \"name\": \"andrewjbarbour\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/77080074?v=4\",\n      \"profile\": \"https://github.com/andrewjbarbour\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"MasujimaRyohei\",\n      \"name\": \"mr\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/17163541?v=4\",\n      \"profile\": \"https://MasujimaRyohei.jp\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"kubanac95\",\n      \"name\": \"Aleksandar\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/16191931?v=4\",\n      \"profile\": \"https://github.com/kubanac95\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"SuspiciousLookingOwl\",\n      \"name\": \"Owl\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/32597776?v=4\",\n      \"profile\": \"http://vincentjonathan.com\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"yedidyas\",\n      \"name\": \"Yedidya Schwartz\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/36074789?v=4\",\n      \"profile\": \"https://github.com/yedidyas\",\n      \"contributions\": [\n        \"content\",\n        \"example\"\n      ]\n    },\n    {\n      \"login\": \"ariel-diaz\",\n      \"name\": \"ari\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/20423540?v=4\",\n      \"profile\": \"https://github.com/ariel-diaz\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"Vispercept\",\n      \"name\": \"Thomas König\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/7080389?v=4\",\n      \"profile\": \"http://www.koenigthomas.de/\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"coocos\",\n      \"name\": \"Kalle Lämsä\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1397804?v=4\",\n      \"profile\": \"https://github.com/coocos\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"ZhyMC\",\n      \"name\": \"Wyatt\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/10328430?v=4\",\n      \"profile\": \"http://math.cat\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"tkhadir\",\n      \"name\": \"KHADIR Tayeb\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/45130488?v=4\",\n      \"profile\": \"http://libkhadir.fr\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"shankarregmi\",\n      \"name\": \"Shankar Regmi\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/7703345?v=4\",\n      \"profile\": \"https://github.com/shankarregmi\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"codebyshubham\",\n      \"name\": \"Shubham\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/10389723?v=4\",\n      \"profile\": \"https://github.com/codebyshubham\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"lucalves\",\n      \"name\": \"Lucas Alves\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/17712401?v=4\",\n      \"profile\": \"http://lucalves.me/\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"benjaminudoh10\",\n      \"name\": \"Benjamin\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/9018331?v=4\",\n      \"profile\": \"https://github.com/benjaminudoh10\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"yjoer\",\n      \"name\": \"Yeoh Joer\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/47742486?v=4\",\n      \"profile\": \"https://www.yjoer.com\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"Miigon\",\n      \"name\": \"Miigon\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/16161991?v=4\",\n      \"profile\": \"https://blog.miigon.net\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"Egregor2011\",\n      \"name\": \"Rostislav Bogorad\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/3630318?v=4\",\n      \"profile\": \"http://brainstorage.me/Egregor2011\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"Flouse\",\n      \"name\": \"Flouse\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1297478?v=4\",\n      \"profile\": \"https://github.com/Flouse\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"taranttini\",\n      \"name\": \"Tarantini Pereira\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/6922125?v=4\",\n      \"profile\": \"http://taranttini.com\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"kzmat\",\n      \"name\": \"Kazuki Matsuo\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/34614358?v=4\",\n      \"profile\": \"https://github.com/kzmat\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"burkybang\",\n      \"name\": \"Adam Smith\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/927886?v=4\",\n      \"profile\": \"https://github.com/burkybang\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"k906506\",\n      \"name\": \"Dohyeon Ko\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/33795856?v=4\",\n      \"profile\": \"https://codekodo.tistory.com\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"vlad99902\",\n      \"name\": \"Vladislav Legkov\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/67615003?v=4\",\n      \"profile\": \"https://github.com/vlad99902\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"kerolloz\",\n      \"name\": \"Kerollos Magdy\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/36763164?v=4\",\n      \"profile\": \"http://kerolloz.github.io\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"erezLieberman\",\n      \"name\": \"Erez Lieberman\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/3277260?v=4\",\n      \"profile\": \"https://www.linkedin.com/in/erez-lieberman-b90b7219/\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"breno404\",\n      \"name\": \"Breno Macedo\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/48841329?v=4\",\n      \"profile\": \"https://www.linkedin.com/in/breno-macedo-ernani-de-s%C3%A1-110223158/\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"JFernando122\",\n      \"name\": \"Fernando Flores\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/40414805?v=4\",\n      \"profile\": \"https://github.com/JFernando122\",\n      \"contributions\": [\n        \"translation\"\n      ]\n    },\n    {\n      \"login\": \"rafaelconcept\",\n      \"name\": \"Rafael Brito\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/43880669?v=4\",\n      \"profile\": \"https://www.linkedin.com/in/rafaelconcept/\",\n      \"contributions\": [\n        \"translation\"\n      ]\n    },\n    {\n      \"login\": \"emiperalta\",\n      \"name\": \"Emiliano Peralta\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/63617637?v=4\",\n      \"profile\": \"https://emiliano-peralta-portfolio.vercel.app/\",\n      \"contributions\": [\n        \"translation\"\n      ]\n    },\n    {\n      \"login\": \"lannex\",\n      \"name\": \"Shin, SJ\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/7369541?v=4\",\n      \"profile\": \"https://lannex.github.io\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"e-e-e\",\n      \"name\": \"Benjamin Forster\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/12589522?v=4\",\n      \"profile\": \"http://www.benjaminforster.com\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"DanieleFedeli\",\n      \"name\": \"Daniele Fedeli\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/37077048?v=4\",\n      \"profile\": \"https://github.com/DanieleFedeli\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"djob195\",\n      \"name\": \"djob195\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/17146669?v=4\",\n      \"profile\": \"https://github.com/djob195\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"antspk\",\n      \"name\": \"antspk\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/78955792?v=4\",\n      \"profile\": \"https://github.com/antspk\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"jjy821\",\n      \"name\": \"정진영\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/88075341?v=4\",\n      \"profile\": \"https://jjy0821.tistory.com/\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"kkk-cashwalk\",\n      \"name\": \"kkk-cashwalk\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/91455122?v=4\",\n      \"profile\": \"https://github.com/kkk-cashwalk\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"apainintheneck\",\n      \"name\": \"apainintheneck\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/42982186?v=4\",\n      \"profile\": \"https://github.com/apainintheneck\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"koyanyaroo\",\n      \"name\": \"Fajar Budhi Iswanda\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/9715368?v=4\",\n      \"profile\": \"https://github.com/koyanyaroo\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"jutiger\",\n      \"name\": \"이주호\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/97490806?v=4\",\n      \"profile\": \"https://github.com/jutiger\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"MisterSingh\",\n      \"name\": \"Singh\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/44462019?v=4\",\n      \"profile\": \"https://github.com/MisterSingh\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"Alex-Dumitru\",\n      \"name\": \"Alex Dumitru\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/43738450?v=4\",\n      \"profile\": \"https://github.com/Alex-Dumitru\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"lykhatskyi\",\n      \"name\": \"Anton Lykhatskyi\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/18104686?v=4\",\n      \"profile\": \"https://github.com/lykhatskyi\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"EverythingAvailable\",\n      \"name\": \"sangwonlee\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/81002379?v=4\",\n      \"profile\": \"https://github.com/EverythingAvailable\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"euberdeveloper\",\n      \"name\": \"Eugenio Berretta\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/33126163?v=4\",\n      \"profile\": \"https://github.com/euberdeveloper\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"soranakk\",\n      \"name\": \"soranakk\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/3930307?v=4\",\n      \"profile\": \"https://github.com/soranakk\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"backend-joonyoung\",\n      \"name\": \"고준영\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/94430145?v=4\",\n      \"profile\": \"https://github.com/backend-joonyoung\",\n      \"contributions\": [\n        \"content\",\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"GuilhermePortella\",\n      \"name\": \"Guilherme Portella \",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/59876059?v=4\",\n      \"profile\": \"https://github.com/GuilhermePortella\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"Esser50K\",\n      \"name\": \"André Esser\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/18497570?v=4\",\n      \"profile\": \"https://www.youtube.com/channel/UCBxzOQd2v9wWfiMDrf_RQ7A\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"ShiChenCong\",\n      \"name\": \"Scc\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/22486446?v=4\",\n      \"profile\": \"https://github.com/ShiChenCong\",\n      \"contributions\": [\n        \"translation\"\n      ]\n    },\n    {\n      \"login\": \"mauroaccornero\",\n      \"name\": \"Mauro Accornero\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1875822?v=4\",\n      \"profile\": \"https://www.mauroaccornero.it\",\n      \"contributions\": [\n        \"content\"\n      ]\n    },\n    {\n      \"login\": \"no-yan\",\n      \"name\": \"no-yan\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/63000297?v=4\",\n      \"profile\": \"https://github.com/no-yan\",\n      \"contributions\": [\n        \"content\"\n      ]\n    }\n  ],\n  \"projectName\": \"nodebestpractices\",\n  \"projectOwner\": \"goldbergyoni\",\n  \"repoType\": \"github\",\n  \"repoHost\": \"https://github.com\",\n  \"skipCi\": true,\n  \"commitConvention\": \"angular\"\n}\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.21,
          "content": "*.log\r\n.idea\r\n.vscode\r\n.idea/**/*\r\n.vscode/**/*\r\n.nyc_output\r\nmochawesome-report\r\n.DS_Store\r\nnpm-debug.log.*\r\nnode_modules\r\nnode_modules/**/*\r\n.eslintcache\r\ncert\r\nlogs/*\r\ndesktop.ini\r\npackage-lock.json\r\n.history\r\n.env"
        },
        {
          "name": ".operations",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 18.27,
          "content": "## creative commons\r\n\r\n# Attribution-ShareAlike 4.0 International\r\n\r\nCreative Commons Corporation (“Creative Commons”) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an “as-is” basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.\r\n\r\n### Using Creative Commons Public Licenses\r\n\r\nCreative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.\r\n\r\n* __Considerations for licensors:__ Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC-licensed material, or material used under an exception or limitation to copyright. [More considerations for licensors](http://wiki.creativecommons.org/Considerations_for_licensors_and_licensees#Considerations_for_licensors).\r\n\r\n* __Considerations for the public:__ By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor’s permission is not necessary for any reason–for example, because of any applicable exception or limitation to copyright–then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. [More considerations for the public](http://wiki.creativecommons.org/Considerations_for_licensors_and_licensees#Considerations_for_licensees).\r\n\r\n## Creative Commons Attribution-ShareAlike 4.0 International Public License\r\n\r\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-ShareAlike 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\r\n\r\n### Section 1 – Definitions.\r\n\r\na. __Adapted Material__ means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\r\n\r\nb. __Adapter's License__ means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\r\n\r\nc. __BY-SA Compatible License__ means a license listed at [creativecommons.org/compatiblelicenses](http://creativecommons.org/compatiblelicenses), approved by Creative Commons as essentially the equivalent of this Public License.\r\n\r\nd. __Copyright and Similar Rights__ means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\r\n\r\ne. __Effective Technological Measures__ means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\r\n\r\nf. __Exceptions and Limitations__ means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\r\n\r\ng. __License Elements__ means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution and ShareAlike.\r\n\r\nh. __Licensed Material__ means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\r\n\r\ni. __Licensed Rights__ means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\r\n\r\nj. __Licensor__ means the individual(s) or entity(ies) granting rights under this Public License.\r\n\r\nk. __Share__ means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\r\n\r\nl. __Sui Generis Database Rights__ means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\r\n\r\nm. __You__ means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\r\n\r\n### Section 2 – Scope.\r\n\r\na. ___License grant.___\r\n\r\n   1. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\r\n\r\n       A. reproduce and Share the Licensed Material, in whole or in part; and\r\n\r\n       B. produce, reproduce, and Share Adapted Material.\r\n\r\n   2. __Exceptions and Limitations.__ For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\r\n\r\n   3. __Term.__ The term of this Public License is specified in Section 6(a).\r\n\r\n   4. __Media and formats; technical modifications allowed.__ The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material.\r\n\r\n   5. __Downstream recipients.__\r\n\r\n       A. __Offer from the Licensor – Licensed Material.__ Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\r\n\r\n       B. __Additional offer from the Licensor – Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter’s License You apply.\r\n\r\n       C. __No downstream restrictions.__ You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\r\n\r\n   6. __No endorsement.__ Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\r\n\r\nb. ___Other rights.___\r\n\r\n   1. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\r\n\r\n   2. Patent and trademark rights are not licensed under this Public License.\r\n\r\n   3. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\r\n\r\n### Section 3 – License Conditions.\r\n\r\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\r\n\r\na. ___Attribution.___\r\n\r\n   1. If You Share the Licensed Material (including in modified form), You must:\r\n\r\n       A. retain the following if it is supplied by the Licensor with the Licensed Material:\r\n\r\n         i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\r\n\r\n         ii. a copyright notice;\r\n\r\n         iii. a notice that refers to this Public License;\r\n\r\n         iv. a notice that refers to the disclaimer of warranties;\r\n\r\n         v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable;\r\n\r\n       B. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and\r\n\r\n       C. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\r\n\r\n   2. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\r\n\r\n   3. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\r\n\r\nb. ___ShareAlike.___\r\n\r\nIn addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply.\r\n\r\n1. The Adapter’s License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-SA Compatible License.\r\n\r\n2. You must include the text of, or the URI or hyperlink to, the Adapter's License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material.\r\n\r\n3. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter's License You apply.\r\n\r\n### Section 4 – Sui Generis Database Rights.\r\n\r\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\r\n\r\na. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\r\n\r\nb. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and\r\n\r\nc. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\r\n\r\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\r\n\r\n### Section 5 – Disclaimer of Warranties and Limitation of Liability.\r\n\r\na. __Unless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You.__\r\n\r\nb. __To the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You.__\r\n\r\nc. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\r\n\r\n### Section 6 – Term and Termination.\r\n\r\na. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\r\n\r\nb. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\r\n\r\n   1. automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\r\n\r\n   2. upon express reinstatement by the Licensor.\r\n\r\n   For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\r\n\r\nc. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\r\n\r\nd. Sections 1, 5, 6, 7, and 8 survive termination of this Public License.\r\n\r\n### Section 7 – Other Terms and Conditions.\r\n\r\na. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\r\n\r\nb. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.t stated herein are separate from and independent of the terms and conditions of this Public License.\r\n\r\n### Section 8 – Interpretation.\r\n\r\na. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\r\n\r\nb. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\r\n\r\nc. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\r\n\r\nd. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\r\n\r\n> Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the “Licensor.” Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at [creativecommons.org/policies](http://creativecommons.org/policies), Creative Commons does not authorize the use of the trademark “Creative Commons” or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\r\n>\r\n> Creative Commons may be contacted at creativecommons.org\r\n"
        },
        {
          "name": "README.basque.md",
          "type": "blob",
          "size": 179.7,
          "content": "[✔]: assets/images/checkbox-small-blue.png\n\n# Node.js-ren praktika onak\n\n<h1 align=\"center\">\n  <img src=\"assets/images/banner-2.jpg\" alt=\"Node.js-ren praktika onak\"/>\n</h1>\n\n<br/>\n\n<div align=\"center\">\n  <img src=\"https://img.shields.io/badge/⚙%20Item%20count%20-%20102%20Best%20Practices-blue.svg\" alt=\"102 items\"/> <img src=\"https://img.shields.io/badge/%F0%9F%93%85%20Last%20update%20-%20December%2012%202020-green.svg\" alt=\"Azken eguneratzea: 2020ko azaroa\"/> <img src=\"https://img.shields.io/badge/ %E2%9C%94%20Updated%20For%20Version%20-%20Node%2014.0.0-brightgreen.svg\" alt=\"Node 14.0.0rako eguneratua\"/>\n</div>\n\n<br/>\n\n[![nodepractices](./assets/images/twitter-s.png)](https://twitter.com/nodepractices/) **Hemen ere bagaude!** [**@nodepractices**](https://twitter.com/nodepractices/)\n\n<br/>\n\nIrakurri beste hizkuntza batzuetan: [![EN](./assets/flags/EN.png)**EN**](./README.md), [![CN](./assets/flags/CN.png)**CN**](./README.chinese.md), [![BR](./assets/flags/BR.png)**BR**](./README.brazilian-portuguese.md), [![RU](./assets/flags/RU.png)**RU**](./README.russian.md), [![PL](./assets/flags/PL.png)**PL**](./README.polish.md),[![JA](./assets/flags/JA.png)**JA**](./README.japanese.md) [(![ES](./assets/flags/ES.png)**ES**, ![FR](./assets/flags/FR.png)**FR**, ![HE](./assets/flags/HE.png)**HE**, ![KR](./assets/flags/KR.png)**KR** eta ![TR](./assets/flags/TR.png)**TR** aribidean!)](#itzulpenak)\n\n<br/>\n\n###### Gure [Zuzendaritza Batzordeak ](#zuzendaritza-batzordea) eta [laguntzaileek](#Languntzaileak) eraiki eta mantentzen dute webgune hau\n\n# Azken praktika onak eta albisteak\n\n- **![EU](./assets/flags/EU.png) Euskarazko itzulpena!:** wow gure euskal irakurleek ere gida hau bere ama-hizkuntzan irakur dezakete! [Ane Diaz de Tuesta](https://github.com/anediaz) eta Joxefe Diaz de Tuestaren eskutik\n\n- **🇯🇵 Japonierazko itzulpena:** hemendik aurrera japonieraz erabili daiteke gure gida, [YukiOta](https://github.com/YukiOta) eta [Yuta Azumi](https://github.com/YA21) gure laguntzaile ikaragarriei esker\n\n- **🎊 60.000 izar!**: Gure biltegiak 60.100 garatzaileren aitortza eta konfiantza jaso ditu. Hitzik gabe gaude\n\n<br/><br/>\n\n# Ongi etorri! Hasi aurretik jakin beharreko 3 gauza\n\n**1. Hemen dozenaka artikulu dauzkazu, onenetarikoak Node.jsri buruz egindakoetan:** alegia, bilduma honek Node.jsren praktika onak jasotzen ditu, edukien arabera sailkatuta\n\n**2. Dagoen bildumarik handiena da, eta astetik astera handiagoa da:** une honetan 80tik gora praktika, estilo eskuliburu eta arkitektura aholku dauzkagu bilduta. Gustura asko jasoko genituzke zure ekarpenak bilduma hau eguneratuta edukitzeko, bai kode akatsak konponduz, bai itzulpenak eginez, bai ideia berriak proposatuz egin ditzakezunak: izan zaitez Node.jsren praktika onen liburuko partaide. Ikusi gure [idazketa jarraibideak](./.operations/writing-guidelines.basque.md)\n\n**3. Jarraibide gehienek informazio gehigarria dute.** Jarraibideko puntu bakoitzaren ondoan **🔗Informazio gehiago** esteka aurkituko duzu, jarraibidea osatzen duena kode adibideekin, blogetako aipu hautatuekin eta informazio osagarri gehiagorekin\n\n<br/><br/>\n\n## Edukien aurkibidea\n\n1. [Proiektuaren egitura (5)](#1-proiektuaren-egitura)\n2. [Erroreen kudeaketa (12) ](#2-erroreen-kudeaketa)\n3. [Kode estiloa (12) ](#3-kode-estiloa)\n4. [Probak eta kalitate orokorra (13) ](#4-probak-eta-kalitate-orokorra)\n5. [Ekoizpena (19) ](#5-ekoizpena)\n6. [Segurtasuna (25)](#6-segurtasuna)\n7. [Errendimendua (2) (Aribidean ✍️)](#7-zirriborroa-errendimendua)\n8. [Docker, praktika onak (15)](#8-docker-praktika-onak)\n\n<br/><br/>\n\n# `1. Proiektuaren egitura`\n\n## ![✔] 1.1 Antolatu zure proiektua atal eta osagai txikiagotan\n\n**TL;PL:** aplikazio handien oztoporik handiena kode base erraldoi bat mantendu beharra da, ehundaka lotura eta menpekotasun dituena. Horrelako lan monolitikoek programatzaileen lana motelarazten dute, funtzionalitate berriak gehitzen saiatzen dira eta. Hori gerta ez dadin, zatitu zure kodea osagai txikiagotan, bakoitza bere datuekin karpeta banatan, eta bermatu osagai bakoitza laburra eta sinplea izatea. Bisitatu hemen behean dagoen “Informazio gehiago” esteka, proiektu egoki baten egitura zuzenaren adibideak ikusteko\n\n**Bestela:** funtzionalitate berriak programatzean, garatzaileek zailtasun handiak izaten dituzte aldaketa horien eragina atzemateko, eta beldur izaten dira funtzionalitateon menpeko osagaiak hautsiko ote dituzten. Ondorioz, inplementazioak motelagoak eta arriskutsuagoak izaten dira. Oro har, zailagoa izaten da aplikazio baten kodea luzatzea negozio unitateak banatuta ez daudenean\n\n🔗 [**Informazio gehiago: antolatu zure proiektua osagai txikiagotan**](./sections/projectstructre/breakintcomponents.basque.md)\n\n<br/><br/>\n\n## ![✔] 1.2 Antolatu zure aplikazioa geruzatan eta mantendu webaren geruza bere esparruaren barruan\n\n**TL;PL:** osagai bakoitzak «geruzak» izan beharko lituzke: hau da, berariaz weberako egindako objektu bat; beste bat, logikarako; eta beste bat, datuen sarbidearen koderako. Horrek, zati bakoitzaren funtzioak ondo bereizteko aukera eskaintzeaz gainera, sistema errazago simulatu eta testatzea ahalbidetzen du. Modelo hau oso ohikoa bada ere, APIen garatzaileek joera izaten dute geruzak nahasteko, webeko objektu espezifikoa (Express req, res) logika operatiboaren eta datuen geruzetara pasatuz, eta, ondorioz bai aplikazioa bai sarbidea Expressen menpeko bihurtzen dira\n\n**Bestela:** aplikazio batean webeko objektuak beste geruzekin nahastuta badaude, ezingo da bertara sartu testak, CRON atazak eta Express middleware-ak baino erabiliz\n\n🔗 [**Informazio gehiago: antolatu zure aplikazioa geruzatan**](./sections/projectstructre/createlayers.basque.md)\n\n<br/><br/>\n\n## ![✔] 1.3 Kokatu baliabide komunak npm paketetan\n\n**TL;PL:** datu base askok osatzen duten aplikazio handi bat prestatzen dugunean, geruza guztietan lan egiten duten zeharkako tresna bakoitzak –erregistragailuak, zifragailuak eta beste– bere kodearen barruan egon behar du, npm pakete pribatu moduan, tresna horiek hainbat proiektutan partekatu ahal izatea ahalbidetzen duena\n\n**Bestela:** zuk zeuk asmatu beharko duzu zeure inplementazioa eta menpekotasun gurpila\n\n🔗 [**Informazio gehiago: antolatu funtzioen arabera**](./sections/projectstructre/wraputilities.basque.md)\n\n<br/><br/>\n\n## ![✔] 1.4 Banandu Express 'aplikazioa' eta 'zerbitzaria'\n\n**TL;PL:** ekidin [Express](https://expressjs.com/) aplikazioa artxibo handi batean oso-osorik definitzeko ohitura desegokia. Banandu Express aplikazioaren definizioa bi artxibotan gutxienez: batetik, APIaren definizioa (app.js); eta, bestetik, sarearen ezaugarriak (WWW). Are gehiago, egitura egokiagoa izan dadin, jarri APIaren definizioa osagaiekin batera\n\n**Bestela:** probak egiteko, HTTP deien bidez baino ezingo da zure APIra sartu. Sarbide hori motelagoa da eta asko zailtzen du estaldura txostenak egitea. Gainera, ziur aski, ez da bat ere atsegina izango ehundaka lerro dituen kodea mantentzea\n\n🔗 [**Informazio gehiago: banandu Express 'aplikazioa' eta 'zerbitzaria'**](./sections/projectstructre/separateexpress.basque.md)\n\n<br/><br/>\n\n## ![✔] 1.5 Erabili ingurunea errespetatzen duen konfigurazio seguru eta hierarkiko bat\n\n**TL;PL:** akatsik gabeko konfigurazio perfektu batek bermatu behar du (a) giltzak fitxategietatik eta inguruneko aldagaietatik irakurri ahal izatea, (b) sekretuak iturri kodetik kanpo gordeta egotea, eta, (c), bilaketak errazte aldera, konfigurazioa hierarkikoa izatea. Hori dena lortzeko badira paketeak, hala nola, [rc](https://www.npmjs.com/package/rc), [nconf](https://www.npmjs.com/package/nconf), [config](https://www.npmjs.com/package/config) eta [convict](https://www.npmjs.com/package/convict)\n\n**Bestela:** konfiguazioa egitean baldintza horietarikoren bat betetzen ez baduzu, lana moteldu egingo da, bai garapen taldearena, bai devops taldearena\n\n🔗 [**Informazio gehiago: konfigurazio praktika onak**](./sections/projectstructre/configguide.basque.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#edukien-aurkibidea\">⬆ Itzuli hasierara</a></p>\n\n# `2. Erroreen kudeaketa`\n\n## ![✔] 2.1 Erabili Async-Await edo errore asinkronoak kudeatzeko promesak\n\n**TL;PL:** errore asinkronoak callback erabiliz kudeatzen badituzu, infernurako biderik azkarrena hartuko duzu edo galbiderako piramidean sartuko zara. Zure kodeari opari on bat egin nahi badiozu, erabili agintzen liburutegi ezagun bat edo async-await, try-catch erakoa adibidez kode sintaxis askoz trinkoago eta ohikoago bat eskaintzen duena\n\n**Bestela:** Node.jsren callback teknika (“err, response” prozedura) erabiltzen baduzu, kode ez jasangarriak sortuko dituzu, batera suertatuko baitira kode arrunta duten erroreen kudeaketa, habiaratze sarriegiak eta kodetze eredu ez erosoak\n\n🔗 [**Informazio gehiago: ekidin callback prozedurak**](./sections/errorhandling/asyncerrorhandling.basque.md)\n\n<br/><br/>\n\n## ![✔] 2.2 Erabili soilik “Errorea” objektu kapsulatua\n\n**TL;PL:** maiz, erroreak kate gisa edo modu pertsonalizatuan agertzen dira, erroreak kudeatzeko logika zaildu eta moduluen arteko elkarreragingarritasuna oztopatzen duena. Agintza bat baztertu zein salbuespen bat ezarri edo errore ohar bat argitaratzen duzunean, soilik “Errorea” objektu kapsulatua –edo “Errore txertatua“ objektua zabaltzen duen objektua– erabiliz lortuko duzu bermatzea bateratasuna handitu eta informazioa ez galtzea\n\n**Bestela:** osagairen bati deitzean erroreak zein motatakoak diren jakin gabe, askoz zailagoa da eurak kontrolatzea. Are okerrago, erroreak deskribatzeko modu pertsonalizatuak erabiltzeak errore kritikoen informazioa galtzea ekar dezake, pilaren aztarna, besteak beste\n\n🔗 [**Informazio gehiago: erabili soilik “Errorea” objektu kapsulatua**](./sections/errorhandling/useonlythebuiltinerror.basque.md)\n\n<br/><br/>\n\n## ![✔] 2.3 Bereizi eragiketa erroreak eta programatze erroreak\n\n**TL; PL:** eragiketa erroreek (adibidez, APIak balio gabeko sarrera jasotzea) agerian jartzen dituzten arazoak ezagunak izaten dira, eta, haien eragina guztiz ulertu eta kontuz kudeatzeko modukoak izaten dira. Bestetik, programatze erroreak (adibidez, zehaztu gabeko aldagaia irakurtzen saiatzea) aplikazioa berrabiarazteko agindua ematen duten kode hutsegite ezezagunak izaten dira\n\n**Bestela:** beti berrabiaraz dezakezu aplikazioa errore bat agertzen denean. Baina zergatik utzi 5.000 erabiltzaile offline iragarri daitekeen errore funtzional txiki batengatik? Kontrakoa ere ez da egokia: arazo ezezagun bat gertatzen denean -programatze errore bat, esaterako- aplikazioa martxan mantentzeak ezusteko jokaerak eragin ditzake. Biak bereizteak aukera ematen du kontuz jokatzeko eta ikuspegi orekatu bat aplikatzeko testuinguruan oinarrituz\n\n🔗 [**Informazio gehiago: eragiketa erroreak vs programatze erroreak**](./sections/errorhandling/operationalvsprogrammererror.basque.md)\n\n<br/><br/>\n\n## ![✔] 2.4 Kudeatu erroreak gune bakar batean, Express middleware erabili partez\n\n**TL;PL:** erroreak kudeatzeko logika -hala nola, haien erregistroa eramatea eta administratzaileari mezuak bidaltzea- objektu dedikatu zentralizatu batean kapsulatu behar da, erroreren bat gertatzen denean helmuga guztiek (adibidez, Express middlewarea, cron atazak, atalkako egiaztatzeak) hara deitu dezaten\n\n**Bestela:** erroreak toki bakarrean ez kudeatzeak kodea bikoiztea eragiten du eta, ziur aski, erroreak gaizki kudeatzea ere bai\n\n🔗 [**Informazio gehiago: kudeatu erroreak gune bakar batean**](./sections/errorhandling/centralizedhandling.basque.md)\n\n<br/><br/>\n\n## ![✔] 2.5 Dokumentatu aplikazioaren erroreak Swagger edo GraphQL-ren laguntzarekin\n\n**TL;PL:** jakinaren gainean jarri aplikazioaren deitzaileak erroreak berriro gerta daitezkeela, errore horiek behar bezala konpondu ahal izateko hutsik egin gabe. RESTful aplikazioetan Swagger bezalako dokumentazio esparruak erabiltzen dira. GraphQL erabiltzen baduzu, zeure eskema eta azalpenak erabil ditzakezu\n\n**Bestela:** aplikazio baten bezeroak erabaki dezake aplikazioa itxi eta berrabiaraztea, ulertzen ez duen errore baten abisua jaso duelako soil-soilik. Oharra: zu zeu izan zaitezke zure aplikaziotik deitzen duena (oso ohikoa mikrozerbitzu inguruneetan)\n\n🔗 [**Informazio gehiago: dokumentatu aplikazioaren erroreak Swagger edo GraphQLren laguntzarekin**](./sections/errorhandling/documentingusingswagger.basque.md)\n\n<br/><br/>\n\n## ![✔] 2.6 Irten prozesutik elegantziarekin kanpoko norbait iristen denean hirira\n\n**TL;PL:** errore ezezagun bat gertatzen denean (programazio errore bat, ikusi 2.3 praktika ona), zalantza izaten da era egokian lanean ote dabilen aplikazioa. Kasu horietan, oso ohikoa izaten da prozesuak kudeatzeko tresna bat erabiltzea [Forever](https://www.npmjs.com/package/forever), [PM2](http://pm2.keymetrics.io/) edo antzekoren bat– prozesua berriro hasteko\n\n**Bestela:** ezagutzen ez duzun zerbait gertatzen denean, izan daiteke objekturen batzuk egoera txarrean daudelako (esaterako, globalki erabiltzen den gertaera igorle bat, barneko erroreren batengatik ondo ez dabilena) eta gerta daiteke aurrerantzean abisuek huts egitea edo modu ero samarrean funtzionatzea\n\n🔗 [**Informazio gehiago: gelditu prozesua**](./sections/errorhandling/shuttingtheprocess.basque.md)\n\n<br/><br/>\n\n## ![✔] 2.7 Erabili erregistratze tresna helduak erroreen ikusgaitasuna handitzeko\n\n**TL;PL:** erregistratze tresna helduen sortak erabiltzen badituzu –[Pino](https://github.com/pinojs/pino) edo [Log4js](https://www.npmjs.com/package/log4js), adibidez–, erroreak lehenago atzeman eta ulertuko dituzu. Beraz, utzi alde batera console.log\n\n**Bestela:** console.log-ak arakatu behar badituzu edo testua desordenatua duen artxibo batean erroreak eskuz, kontsulta tresnarik gabe edo erregistratze bisore ganorazkorik gabe bilatu behar badituzu, ordu asko emango dituzu lanean gaueko ordu txikiak arte\n\n🔗 [**Informazio gehiago: erabili erregistratze tresna helduak**](./sections/errorhandling/usematurelogger.basque.md)\n\n<br/><br/>\n\n## ![✔] 2.8 Testeatu erroreen fluxua zure test framework gustukoena erabiliz\n\n**TL;PL:** kalitate profesionaleko kontrol tresna automatizatu bat izan zein programatzaileentzako eskuzko test soil bat izan, bermatu zure kodeak ez duela egoera positiboetan bakarrik lan egiten, baizik eta errore zuzenak ere kudeatu eta birbidaltzen dituela. Mocha eta Chai bezalako unitate test frameworkek erraz egin dezakete lan hori (ikusi “Gist leiho”ko kode adibideak)\n\n**Bestela:** automatikoki zein eskuz probarik egin gabe ezin duzu konfiantzarik izan zure kodeak benetako erroreak atzemango dituen. Errore adierazgarririk gabe ez dago erroreak kudeatzerik\n\n🔗 [**Informazio gehiago: testeatu erroreen fluxua**](./sections/errorhandling/testingerrorflows.basque.md)\n\n<br/><br/>\n\n## ![✔] 2.9 Aurkitu erroreak eta jardunik gabeko uneak APM produktuak erabiliz\n\n**TL;PL:** monitorizazio eta errendimendu produktuek (APM, ingelesezko siglen arabera) modu proaktiboan ebaluatzen dute zure kode basea edo aplikazioa automatikoki aurkitu ahal izan ditzaten erroreak, blokeoak eta atzeman ezin dituzun eraginkortasun txikiko atalak\n\n**Bestela:** denbora asko pasa zenezake zure aplikazioaren errendimendua eta jardunik gabeko uneak neurtzen, eta, hala ere, ez zenuke aurkituko zeintzuk diren zure kodearen zatirik motelenak egoera errealetan eta ez zenuke inoiz jakingo nola eragiten dioten erabiltzailearen lanari\n\n🔗 [**Informazio gehiago: APM produktuen erabilera**](./sections/errorhandling/apmproducts.basque.md)\n\n<br/><br/>\n\n## ![✔] 2.10 Atzeman kudeatu gabeko agintzen arbuioak\n\n**TL;PL:** agintza baten barruan dauden salbuespenak xurgatuak eta baztertuak izango dira programatzaileak modu esplizituan kudeatzen ez baditu, haren kodea `process.uncaughtException`-ari atxikia egonda ere. Ekidin hori `process.unhandledRejection` erabiliz\n\n**Bestela:** zure erroreak xurgatuak izango dira eta ez da haien arrastorik geratuko. Ez duzu zertaz kezkatu\n\n🔗 [**Informazio gehiago: atzeman kudeatu gabeko aginduen arbuioak**](./sections/errorhandling/catchunhandledpromiserejection.basque.md)\n\n<br/><br/>\n\n## ![✔] 2.11 Huts egin azkar, balidatu argudioak liburutegi dedikatu baten laguntzarekin\n\n**TL;PL:** Express erabiltzen duzunean, zure praktika onetako bat izan beharko litzateke aplikazioaren sarbidea kontrolatzea, ustegabeko erroreak ekiditeko, aurrerago erroreak atzematea askoz zailagoa izaten da eta. Balidazio kodea gogaikarria izan ohi da, [ajv](https://www.npmjs.com/package/ajv) eta [Joi](https://www.npmjs.com/package/joi) bezalako laguntza liburutegi moderno bat erabili ezean\n\n**Bestela:** pentsatu zure funtzioa agintza numeriko baten zain dagoela, adibidez «deskontua», eskatzaileak bidaltzea ahaztu duena; geroago, haren kodeak baieztatzen du « deskontua! = 0 (baimendutako deskontua zero baino handiagoa da)», eta horrek ahalmena ematen dio erabiltzaileari deskontua izateko. Ene, nolako errore arriskutsua! Konturatzen zara?\n\n🔗 [**Informazio gehiago: huts eragin azkar**](./sections/errorhandling/failfast.basque.md)\n\n<br/><br/><br/>\n\n## ![✔] 2.12 Agintzen zain egon beti itzuli aurretik, pilak arrastorik uztea saihesteko\n\n**TL; PL:** beti egin `return await` promesa bat itzultzean, pila osoaren jarraipena egin ahal izateko. Funtzio batek promesa bat itzultzen badu, funtzio hori `async`, hau da, asinkronotzat jo behar da, eta esplizituki `await`, itxaron agintza, itzuli aurretik\n\n**Bestela:** itxaron gabe agintza itzultzen duen funtzioa ez da pilaren arrastoan agertuko. Galdutako fotograma horiek akatsa eragingo duen fluxua ulertzea zailduko lukete, batez ere portaera anormalaren zergatia falta den funtzioaren barruan baldin badago\n\n🔗 [**Informazio gehiago: agintzak itzultzea**](./sections/errorhandling/returningpromises.basque.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#edukien-aurkibidea\">⬆ Itzuli hasierara</a></p>\n\n# `3. Kode estiloa`\n\n## ![✔] 3.1 Erabili ESLint\n\n**TL;PL:** [ESLint](https://eslint.org) da gerta daitezkeen kode erroreak egiaztatzeko eta kodearen estiloa zuzentzeko estandarra. Ez da soilik erabiltzen tarteen arazoak identifikatzeko, baizik eta kodearen antipatroi kritikoak atzemateko ere, hala nola garatzaileen errore ez-sailkatuak. ESLint kode estiloak automatikoki zuzentzeko gai bada ere, badira beste tresna batzuk eraginkorragoak direnak zuzenketak egiten –esaterako, [prettier](https://www.npmjs.com/package/prettier) eta [beautify](https://www.npmjs.com/package/js-beautify)– eta, gainera, ESLintekin batera egiten dute lan\n\n**Bestela:** garatzaileek arreta jarriko dute hain gogaikarriak diren arazo batzuk konpontzen –kodearen tarteak eta lerroaren luzera–, eta denbora gehiegi gal dezakete proiektuaren kode estiloa aztertzen\n\n🔗 [**Informazio gehiago: erabili ESLint eta Prettier**](./sections/codestylepractices/eslint_prettier.basque.md)\n\n<br/><br/>\n\n## ![✔] 3.2 Node.jsrentzako plugin espezifikoak\n\n**TL;PL:** ESLintek Vanilla JavaScript babesteko dituen arau estandarretatik aparte, komeni da Node.jsren osagai espeziko batzuk erabiltzea, hala nola [eslint-plugin-node](https://www.npmjs.com/package/eslint-plugin-node), [eslint-plugin-mocha](https://www.npmjs.com/package/eslint-plugin-mocha) eta [eslint-plugin-node-security](https://www.npmjs.com/package/eslint-plugin-security)\n\n**Bestela:** Node.jsren arau akastun batzuek radarraren kontrolari ihes egin ahal diote. Esaterako, garatzaileek sarbide moduan aldagai jakin baten beharra izan dezakete (require(variableCommeChemin)), edozein JS script erabiltzeko aukera ematen diena erasotzaileei. Node.jsren linterrek patroi horiek atzeman ditzakete eta garaiz jo alarma\n\n<br/><br/>\n\n## ![✔] 3.3 Jarri kode multzo baten giltzak lerro bakarrean\n\n**TL;PL:** kode bloke baten hasierako parentesiak irekiera instrukzioaren lerroan egon behar du\n\n### Kode adibidea\n\n```javascript\n// Egin\nfunction edozeinFuntzio() {\n  // kode blokea\n}\n\n// Baztertu\nfunction edozeinFuntzio()\n{\n  // kode blokea\n}\n```\n\n**Bestela:** praktika on hau ez erabiltzeak ustekabeko emaitzak eragin ditzake, behean dagoen StackOverflow-en eztabaida harian ikus daitekeen bezala:\n\n🔗 [**Informazio gehiago:** “Zergatik aldatzen dira emaitzak giltzen kokapenaren arabera?” (StackOverflow)](https://stackoverflow.com/questions/3641519/why-does-a-results-vary-based-on-curly-brace-placement)\n\n<br/><br/>\n\n## ![✔] 3.4 Bereizi instrukzioak modu egokian\n\nEz dio axola instrukzioak bereizteko puntu eta koma erabiltzen duzun edo ez, ohiko lerro jauzi okerrak edo koma txertatze automatikoak ezagutzeak lagundu egingo dizu ohiko errore sintaktikoak ez egiten\n\n**TL;PL:** erabili ESLint bereizketetan izaten diren erroreez jabetzeko. [Prettier](https://prettier.io/) edo [Standardjs](https://standardjs.com/) erabiliz automatikoki konpon ditzakezu arazo horiek\n\n**Bestela:** aurreko atalean esan bezala, JavaScripteko interpreteak automatikoki “puntu eta koma” gehitzen du instrukzio baten amaieran “puntu eta koma”rik ez badago edo instrukzioa behar den tokian ez dela amaitu eta horrek okerreko emaitzak eragin ditzakeela pentsatzen badu. Ustekabeko errore gehienak ekiditeko, esleipenak erabil ditzakezu eta, horrela, berehala deitutako funtzio adierazpenak erabiltzea saihestuko duzu\n\n### Kode Adibidea\n\n```javascript\n// Egin\nfunction eginZerbait() {\n    // ...\n}\n\neginZerbait()\n\n// Egin\n\nconst items = [1, 2, 3]\nitems.forEach(console.log)\n\n// Baztertu — salbuespen bat jaurtitzen du\nconst m = new Map()\nconst a = [1,2,3]\n[...m.values()].forEach(console.log)\n> [...m.values()].forEach(console.log)\n>  ^^^\n> SyntaxError: Unexpected token ...\n\n// egin zerbait — salbuespen bat jaurtitzen du\nconst count = 2 // 2() burutzen saiatzen da, baina 2() ez da funtzio bat\n(function egin zerbait() {\n  // egin zerbait paregabea\n}())\n// jarri puntu eta koma berehala deitutako funtzioa baino lehen, const definizioaren ostean, funtzio anonimoak bueltatutako balioa aldagarri batean gorde edo baztertu IIFE guztiak\n```\n\n🔗 [**Informazio gehiago:** \"Semi ESLint araua\"](https://eslint.org/docs/rules/semi)\n🔗 [**Informazio gehiago:** \"Ez dago ustekabeko ESLint arau lerroaniztunik\"](https://eslint.org/docs/rules/no-unexpected-multiline)\n\n<br/><br/>\n\n## ![✔] 3.5 Izendatu funtzio guztiak\n\n**TL;PL:** izendatu funtzio guztiak, itxierak eta deiak. Saihestu funtzio anonimoak. Hau bereziki erabilgarria da node aplikazio bat profilatzerakoan. Funtzio guztiak izendatzeak memoria argazkia egiaztatzean aukera emango dizu zer bilatzen ari zaren ulertzen\n\n**Bestela:** zaila izan liteke ekoizpen arazoak araztea memoria erregistroak erabiliz (memoria argazkia), funtzio anonimoetako memoria kontsumoa handia denean\n\n<br/><br/>\n\n## ![✔] 3.6 Erabili izen deskriptiboak aldagaiak, konstanteak, funtzioak eta klaseak izendatzeko\n\n**TL;PL:** Erabili **_lowerCamelCase_** konstanteak, aldagaiak eta funtzioak izendatzean eta **_UpperCamelCase_** (maiuskulazko lehen letra ere) klaseak izendatzean. Horrek lagunduko dizu aldagai/funtzio arruntak eta instantziazioa behar duten klaseak erraz bereizten. Erabili izen deskriptiboak, baina saiatu laburrak izan daitezen\n\n**Bestela:** Javascript munduko hizkuntza bakarra da eraikitzailea (\"Klasea\") zuzenean deitzea ahalbidetzen duena aurretik eskatu/instantziatu gabe. Horrenbestez, klaseak eta funtzio eraikitzaileak bereizten dira UpperCamelCase-tik hasita\n\n### 3.6 Kode eredua\n\n```javascript\n// funtzioa izendatzeko UpperCamelCase erabiltzen dugu\nclass KlaseBatenAdibidea {}\n\n// konstanteak izendatzeko const hitz gakoa eta lowerCamelCase erabiltzen ditugu\nconst config = {\n  key: \"balioa\",\n};\n\n// aldagaiak eta funtzioak izendatzeko lowerCamelCase erabiltzen dugu\nlet aldagaiBatenAdibidea = \"balioa\";\nfunction eginZerbait() {}\n```\n\n<br/><br/>\n\n## ![✔] 3.7 Aukeratu const, let ordez. Ez erabili var\n\n**TL;PL:** `const` erabiltzeak esan nahi du behin aldagai bat esleituta ezin dela berriro esleitu. Beraz, erabilera desberdinetarako aldagai bakarra erabiltzeko joera baztertzen lagunduko dizu `const` erabiltzeak, bai eta kodea garbitzen ere. Aldagai bat behin baino gehiagotan esleitu behar baduzu –for begizta batean, adibidez– erabili `let`, garbiagoa da eta. Leten beste alderdi garrantzitsu bat da definitu duzun blokearen eremuan bakarrik eskura dezakezula deklaratutako aldagia. `var` funtzioen eremukoa da, ez blokearena, eta [ez da ES6n erabili behar](https://hackernoon.com/why-you-shouldnt-use-var-anymore-f109a58b9b70), `const` eta `let` erabiltzeko aukera duzu eta\n\n**Bestela:** arazketa askoz ere astunagoa da, maiz aldatzen den aldagai baten jarraipena egitean\n\n🔗 [**Informazio gehiago: JavaScript ES6 +: var, let, edo const?** ](https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75)\n\n<br/><br/>\n\n## ![✔] 3.8 Erabili moduluak lehenengo, barne funtzioen partez\n\n**TL;PL:** moduluak fitxategi bakoitzaren hasieran erabili behar dira, edozein funtzioren aurretik eta kanpo. Praktika on eta sinple honek lagunduko dizu fitxategiaren menpekotasunak erraz eta azkar atzematen haren eskuineko goi aldean, baita arazo posible batzuk ekiditen ere\n\n**Bestela:** Node.jsk aldi berean exekutatzen ditu require-ak. Funtzio batek dei egiten badie, egoera kritikoago batean dauden beste eskaera batzuk blokea daitezke. Gainera, deitutako moduluetako batek edo haren menpeko ataza batek errore bat izanez gero, komeni da lehenbailehen haren berri jakitea, eta agian ezingo da hori egin, modulu horri funtzio batek deitzen badio\n\n<br/><br/>\n\n## ![✔] 3.9 Inportatu moduluak karpetaka eta ez artxiboak zuzenean\n\n**TL;PL:** modulua/liburutegia karpeta batean garatzean, sartu index.js fitxategia, moduluaren barruko osagarriak agerian jarri eta erabiltzaile guztiek bertara joko dute eta. Hori eginez gero, moduluaren 'interfaze' gisa lan egiten du, eta geroago egin beharreko aldaketak errazten ditu kontratua hautsi gabe\n\n**Bestela:** fitxategien barne egitura edo sinadura aldatzeak erabiltzaileen interfazea apur dezake\n\n### 3.9 Kodea adibidea\n\n```javascript\n// Egin\nmodule.exports.SMSProvider = require(\"./SMSProvider\");\nmodule.exports.SMSNumberResolver = require(\"./SMSNumberResolver\");\n\n// Baztertu\nmodule.exports.SMSProvider = require(\"./SMSProvider/SMSProvider.js\");\nmodule.exports.SMSNumberResolver = require(\"./SMSNumberResolver/SMSNumberResolver.js\");\n```\n\n<br/><br/>\n\n## ![✔] 3.10 Erabili `===` eragilea\n\n**TL;PL:** hobetsi berdintasunaren eragile zorrotza `===` berdintasun abstraktuaren eragile ahulagoa baino `==`. `==` eragileak bi aldagai alderatuko ditu, behin aldagai arrunt bihurtu ondoren. `===` eragileak ez du aldagai motaren bihurketarik egiten, eta bi aldagaiek mota berekoak izan behar dute berdinak izateko\n\n**Bestela:** `==` eragileak, berdinak ez diren aldagaiak alderatuz gero, berdinak direlako mezua helaraz dezake\n\n### 3.10 Kode adibidea\n\n```javascript\n\"\" == \"0\"; // false\n0 == \"\"; // true\n0 == \"0\"; // true\n\nfalse == \"false\"; // false\nfalse == \"0\"; // true\n\nfalse == undefined; // false\nfalse == null; // false\nnull == undefined; // true\n\n\" \\t\\r\\n \" == 0; // true\n```\n\nAurreko azalpen guztiak faltsuak izango lirateke `===` eragilea erabili izan balitz\n\n<br/><br/>\n\n## ![✔] 3.11 Erabili Async Await, ekidin callbackak\n\n**TL;PL:** Node 8 LTS erabat bateragarria da orain Async-awaitekin, eta, horrela kode asinkronikoa kudeatzeko aukera ematen du, callbackik eta agintzarik erabili gabe. Async-awaitek ez du blokeorik eragiten, eta kode asinkronikoak sinkroniko bihurtzen ditu. Zure kodeari egin ahal diozun oparirik onena async-await erabiltzea da, eskaintzen duen kode sintaxia askoz ere trinkoagoa eta ezagunagoa da eta\n\n**Bestela:** gaizki pasatu eta infernura joateko biderik azkarrena hartu nahi baduzu, erabili callbackak errore asinkronoak kudeatzeko, seguruenik, infernura joateko biderik azkarrena aukeratuko duzu. Estilo honek gune guztietako erroreak egiaztatzera behartzen du, eta, gainera, kode habiaratze beti deserosoaren kudeaketa eta kode fluxua ulertzea zailtzen du\n\n🔗[**Informazio gehiago:** async-await 1.0ren gida](https://github.com/yortus/asyncawait)\n\n<br/><br/>\n\n## ![✔] 3.12 Erabili gezi funtzioak (=>)\n\n**TL;PL:** agintzak eta callbackak onartzen dituzten API zaharrekin async-await erabiltzea eta funtzio parametroak ekiditea gomendarria bada ere, gezi funtzioek kodearen egitura trinkotu egiten dute eta erro funtzioaren testuinguru lexikoa bermatu (hau da, `this`)\n\n**Bestela:** (ES5 funtzioetan) kode luzeek erroreak izateko joera handiagoa dute, eta, gainera, irakurtzeko astunak dira\n\n🔗 [**Informazio gehiago: gezi funtzioak erabiltzeko garaia da**](https://medium.com/javascript-scene/familiarity-bias-is-holding-you-back-its-time-to-embrace-arrow-functions-3d37e1a9bb75)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#edukien-aurkibidea\">⬆ Itzuli hasierara</a></p>\n\n# `4. Probak eta kalitate orokorra`\n\n## ![✔] 4.1 Idatzi APIaren probak (osagaia), gutxienez\n\n**TL;PL:** proiektu gehienei ez zaie proba automatikorik egiten denbora gutxian egiten direlako edo, maiz, 'proba proiektua' kontroletik kanpo geratu eta bertan behera uzten delako. Hori dela eta, lehentasuna eman API probei eta hasi beraiek egiten; izan ere, hori da idazteko erarik errazena eta, gainera, proba unitarioek baino estaldura handiagoa eskaintzen dute; are gehiago, API probak sor ditzakezu, [Postman](https://www.getpostman.com/) bezalako tresnak erabiliz. Ondoren, baliabide eta denbora gehiago edukiz gero, jarraitu proba aurreratuak egiten, hala nola proba unitarioak, datu baseen probak, errendimendu probak, etab.\n\n**Bestela:** luzaroan aritu zintezke proba unitarioak idazten, azkenean soilik %20ko estaldura lortu duzula jakiteko\n\n<br/><br/>\n\n## ![✔] 4.2 Erabili 3 zati proba izen bakoitzean\n\n**TL;PL:** proba adierazgarria izan behar da eskakizunen mailan, barne kodearekin lan egiten ohituta ez dauden QAko ingeniariek eta garatzaileek berez eta erraz uler dezaten. Probaren izenean adierazi zer ari den probatzen (probapean dagoen unitatea), zer egoeratan eta zer emaitza espero den\n\n**Bestela:** inplementazio batek huts egin du, “Gehitu produktua“ izeneko proba batek huts egin du. Esaten dizu horrek zehazki zer dabilen gaizki?\n\n🔗 [**Informazio gehiago: erabili 3 zati proba izen bakoitzean**](./sections/testingandquality/3-parts-in-name.basque.md)\n\n<br/><br/>\n\n## ![✔] 4.3 Egitura probak AAA ereduaren arabera\n\n**TL;PL:** egituratu zure probak ondo bereizitako 3 ataletan: antolatu, aritu eta baieztatu (AAA). Lehenengo atalean probaren konfigurazioa egin behar da; ondoren proba egikaritu behar da; eta, azkenik, baieztapen fasea dator. Egitura horri jarraitzeak bermatzen du irakurleak garuneko PUZik ez gastatzea proba plana ulertzen\n\n**Bestela:** kode nagusia ulertzen egunero orduak eta orduak pasatzeaz gainera, orain zure garuna trebatzen pasatzen duzu bestela eguneko zatirik lasaiena izan behar zuena (probak)\n\n🔗 [**Informazio gehiago: egitura probak AAA ereduaren arabera**](./sections/testingandquality/aaa.basque.md)\n\n<br/><br/>\n\n## ![✔] 4.4 Antzeman kodeko arazoak linter bat erabiliz\n\n**TL;PL:** erabili kode linterra oinarrizko kalitatea egiaztatzeko eta antiereduak garaiz atzemateko. Exekutatu edozein proba baino lehen eta gehitu aurre-commit-a git kako moduan, edozein arazo berrikusteko eta zuzentzeko behar den denbora minimizatu ahal izateko. Era berean, egiaztatu [3. atala](#3-kode-estiloa), kodearen estilo praktikei dagokienez\n\n**Bestela:** kode antiereduren bat zuzendu gabe utz dezakezu, zure ekoizpen ingurunean ahula izan litekeena\n\n<br/><br/>\n\n## ![✔] 4.5 Saihestu datu globalak, gehitu datu pertsonalizatuak proba bakoitzean\n\n**TL;PL:** probak akopla daitezen ekiditeko eta proben fluxuari buruz erraz arrazoitzeko, proba bakoitzak bere datu baseko lerroen multzoan lan egin beharko luke. Proba batek datu baseko datu batzuk ba ote diren jakin nahi duenean edo haien beharra duen bakoitzean, berariaz erantsi behar dira datu horiek eta eragotzi beste erregistroren bat mutatzea\n\n**Bestela:** probek huts egin dutela eta, inplementazioa bertan behera utzi beharra izan duzula pentsatu. Egoera horretan, lan taldeak denbora asko pasatuko du porrotaren zergatiak aztertzen, azkenean, ondorio tamalgarri honetara iristeko: sistema ondo dabil; probek, ordea, elkarri eragiten diote eta egitura hausten dute\n\n🔗 [**Informazio gehiago: saihestu datu globalak**](./sections/testingandquality/avoid-global-test-fixture.basque.md)\n\n<br/><br/>\n\n## ![✔] 4.6 Etengabe ikuskatu menpekotasun ahulak\n\n**TL;PL:** Express bezalako menpekotasun ospetsuenek ere ahultasun ezagunak dituzte, erraz gaindi daitezkeenak tresna komunitarioak eta komertzialak erabiliz, esaterako 🔗 [npm auditoria](https://docs.npmjs.com/cli/audit) eta 🔗 [snyk.io](https://snyk.io), zure CItik dei ditzakezunak konpilazio bakoitzean\n\n**Bestela:** zure kodeak ahultasunik ez izatea lortzeko tresna dedikaturik erabili gabe, etengabe begiratu beharko duzu mehatxu berriei buruz onlinen zer argitaratzen den eta haren jarraipena egin\n\n<br/><br/>\n\n## ![✔] 4.7 Etiketatu zure probak\n\n**TL;PL:** egin beharreko probak desberdinak dira eszenatokiaren arabera; ke lasterrak, input-output gabekoak, garatzaileek artxibo bat gorde edo commit egiten dutenean erabiltzen diren testak, hasieratik amaierarainoko test erabatekoak presio eskaera berri bat bidaltzen denean egikaritzen direnak, etab. Hori lor daiteke #cold #api #sanity bezalako gako hitzak erabiliz probak etiketatzean, aukera izan dezazun zure proba tresnak erabiltzeko eta behar duzun azpimultzoari deitzeko. Adibidez, honela deitu ahal izango zenioke zentzutasun proba multzoari [Mocha](https://mochajs.org/) erabiliz: mocha --grep 'sanity'\n\n**Bestela:** garatzaile batek aldaketa txiki bat egiten duen bakoitzean oso motela izan daiteke proba guztiak exekutatzea, datu baseak kontsultatzen dituzten probak barne. Horrelako kasuetan, garatzaileei etsigarria gertatuko zaie probak egitea\n\n<br/><br/>\n\n## ![✔] 4.8 Egiaztatu zure proben estaldura, proba eredu okerrak identifikatzen laguntzen du eta\n\n**TL;PL:** [Istanbul](https://github.com/istanbuljs/istanbuljs)/[NYC](https://github.com/istanbuljs/nyc) bezalako estaldura tresnak oso aproposak dira 3 arrazoirengatik: dohainik dira, hau da, ez da lanik egin behar txostenak lortzeko; proben estaldura gutxitu den identifikatzen laguntzen dute; eta, azkenik, baina ez garrantzi txikiagokoa, proben desdoikuntzak agerian jartzen dituzte. Koloretako kode estalduraren txostenak aztertzean, baliteke harrapaketa kapsula moduan sekula testatzen ez diren kode arloak ikustea, adibidez. Horrek esan nahi du probek bide arrakastatsuak besterik ez dituztela atzematen eta ez aplikazioak nola jokatzen duen erroreak gertatzen direnean. Konfiguratu zure probak estaldura maila batetik behera jaisten denean erroreak eragiteko\n\n**Bestela:** ez da inolako neurgailu automatizaturik egongo zure kodearen zati handi bat proben estalduratik kanpo dagoela esango dizuna\n\n<br/><br/>\n\n## ![✔] 4.9 Ikuskatu pakete zaharkituak\n\n**TL;PL:** erabili zure tresnarik gogokoena (adibidez, 'npm outdated' edo [npm-check-updates](https://www.npmjs.com/package/npm-check-updates) zaharkituta dauden paketeak atzemateko, ezarri kontrol hau zure IEren bideetan eta, are gehiago, eragin konpilazio batek huts egitea ingurune kritikoetan. Adibidez, agertoki kritikoa izan daiteke instalatutako pakete batek 5 adabaki baieztatuak dituenean (adibidez, bertsio lokala 1.3.1 da eta biltegi bertsioa 1.3.8) edo haren egileak zaharkitu etiketa jarri dionean. Kasu horretan, ezabatu konpilazioa eta ekidin bertsio hori erabiltzea\n\n**Bestela:** modu esplizituan arriskutsutzat etiketatuta dauden paketeak egikarituko ditu zure produkzioak\n\n<br/><br/>\n\n## ![✔] 4.10 Erabili production bezalako inguruneak e2e probetarako\n\n**TL;PL:** zuzeneko datuak erabiltzen dituen hasieratik amaierarainoko proba (e2e) lehen IEren prozesuko katebegirik ahulena izaten zen, datu baseak bezalako zerbitzu astun askoren menpean dago eta. Erabili zure ekoizpen errealetik ahalik eta hurbilen dagoen ingurunea\n\n**Bestela:** docker-compose erabili ezean, taldeek ingurune bakoitzeko proben datu baseak mantendu behar izaten dituzte, garatzaileen makinak barne. Mantendu beti datu base horiek sinkronizatuta, proben emaitzak alda ez daitezen ingurune batetik bestera\n\n<br/><br/>\n\n## ![✔] 4.11 Eguneratu probak aldizka analisi estatikoko tresnak erabiliz\n\n**TL;PL:** analisi estatikoko tresnak erabiltzeak lagundu egiten dizu kodearen kalitatea hobetzeko modu objektiboak lortzen eta zure kodea jasangarri izaten. Analisirako tresna estatikoak gehitu ahal dizkiozu zure IE konpilazioari, huts egingo duen susmoa duzuenean. Estaldurari dagokionean, bere aldeko puntu nagusiak dira kalitatea ikuskatzeko gaitasuna dutela fitxategi anitzen testuinguruan (adibidez, bikoizketak atzematea), azterketa aurreratuak egitea (adibidez, kodearen konplexutasuna hautematea), eta kode arazoen historiaren eta aurrerapenaren jarraipena egitea. Horretarako, bi tresna hauek erabil ditzakezu: [Sonarqube](https://www.sonarqube.org/) (2.600+ [izar](https://github.com/SonarSource/sonarqube)) eta [Code Climate](https://codeclimate.com/) (1.500+ [izar](https://github.com/codeclimate/codeclimate))\n\n**Bestela:** kodearen kalitatea txarra denean, erroreek eta errendimenduak beti emango dituzte arazoak, azken belaunaldiko ezaugarriak dituen liburutegi berri distiratsu batek ere konpontzerik izango ez dituenak\n\n🔗 [**Informazio gehiago: berregituratu!**](./sections/testingandquality/refactoring.basque.md)\n\n<br/><br/>\n\n## ![✔] 4.12 Aukeratu arretaz zure IE plataforma (Jenkins vs CircleCI vs Travis vs gainerako mundua)\n\n**TL;PL:** zure integrazio jarraituaren plataformak (CICD) kalitateko tresna guztiak (adib. testak, lintak) ostatatu behar ditu, eta, beraz, indartsua izan beharko du bere pluginen ekosistemak. Aspaldian [Jenkins](https://jenkins.io/) proiektu askoren balio lehenetsia izan ohi zen, komunitaterik handiena eta oso plataforma indartsua baititu, ordainetan konfigurazio konplexu samarra eta ikaste kurba pikoa baditu ere. Gaur egun, askoz errazagoa da IE irtenbide bat sortzea [CircleCI](https://circleci.com) eta haren antzeko SaaS tresnak erabiliz. Tresna horiek IE hodi malgu bat sortzea ahalbidetzen dute azpiegitura osoa kudeatzeko zama hartu beharra izan gabe. Azken batean, sendotasuna eta abiaduraren arteko oreka lortzea da kontua. Egin zure aukera arretaz\n\n**Bestela:** hornitzaile espezializatu bat aukeratzeak blokeatu zaitzake, pertsonalizazio aurreratu bat behar duzunean. Bestalde, Jenkins erabiltzeak denbora asko eska dezake azpiegitura konfiguratzean\n\n🔗 [**Informazio gehiago: aukeratu IE plataforma**](./sections/testingandquality/citools.basque.md)\n\n<br/><br/>\n\n## ![✔] 4.13 Probatu zure middlewareak eurak bakarrik\n\n**TL;PL:** middlewareak eskaera askori erantzuten dion logika sendo bat duenean, merezi du middlewarea probatzea bera bakarrik, web esparru osoa aktibatu gabe. Hori erraz lor daiteke {req, res, next} objektuak atzemanez eta behatuz\n\n**Bestela:** middleware Expressean === errorea izanez gero, errorea gertatuko zaizu eskaera guztietan edo gehienetan\n\n🔗 [**Informazio gehiago: probatu zure middlewareak eurak bakarrik**](./sections/testingandquality/test-middlewares.basque.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#edukien-aurkibidea\">⬆ Itzuli hasierara</a></p>\n\n# `5. Ekoizpena`\n\n## ![✔] 5.1. Monitorizazioa\n\n**TL;PL:** bezeroek baino lehenago arazoak aurkitzeko joku bat da monitorizazioa. Jakina, garrantzi handia eman behar zaio. Merkatua eskaintzez gainezka dago, eta, beraz, komeni zaizu zehazten hastea zeintzuk diren hartu behar dituzun oinarrizko neurriak (hemen dituzu nire iradokizunak); ondoren, pentsatu zer neurri osagarri ezarri behar dituzun; eta, azkenik, aukeratu hipotesi guztiak kontuan hartzen dituen soluzioa. Egin klik soluzioen ikuspegi orokorra izateko\n\n**Bestela:** hutsegitea === bezero zapuztuak\n\n🔗 [**Informazio gehiago: monitorizazioa!**](./sections/production/monitoring.basque.md)\n\n<br/><br/>\n\n## ![✔] 5.2. Gardentasuna handitu erregistratze plataforma adimendunak erabiliz\n\n**TL;PL:** erregistroak arazketa adierazpen hutsalen biltegia izan daitezke edo zure aplikazioaren historia kontatzen duen aginte mahai praktikoa. Planifikatu zure erregistratze plataforma lehenengo egunetik: hau da, nola bildu, gorde eta aztertuko dituzun erregistroak, nahi duzun informazioa benetan eskura daitekeela bermatzeko (adibidez, zein den errore tasa, zerbitzu eta zerbitzarien bidez transakzio oso bat egin ondoren, eta abar)\n\n**Bestela:** kutxa beltz batekin amaituko duzu, eta zaila izango zaizu han jasotako ezarpenen zergatia aurkitzea. Azkenean, erregistro adierazpen guztiak idazten hasiko zara informazio osagarria gehitzeko\n\n🔗 [**Informazio gehiago: gardentasuna handitu erregistratze plataforma adimendunak erabiliz**](./sections/production/smartlogging.basque.md)\n\n<br/><br/>\n\n## ![✔] 5.3. Delegatu ahal den guztia alderantzizko proxy batean (adibidez, gzip, SSL)\n\n**TL;PL:** Node izugarri txarra da PUZen zeregin intentsiboak egiten, esate baterako, gzipping, SSL termination. Haien partez benetako middleware zerbitzuak erabili behar dituzu –hala nola nginx eta Haproxy–\nedo hornitzaileen lainoko zerbitzuak\n\n**Bestela:** zure hari bakarra lanpetuta egongo da azpiegitura lanak egiten, zure aplikazioaren guneari kasu egin beharrean, eta, ondorioz, haren errendimenduak behera egingo du\n\n🔗 [**Informazio gehiago: delegatu ahal den guztia alderantzizko proxy batean (adibidez, gzip, SSL)**](./sections/production/delegatetoproxy.basque.md)\n\n<br/><br/>\n\n## ![✔] 5.4. Blokeatu menpekotasunak\n\n**TL;PL:** zure kodeak berdin-berdina izan behar du ingurune guztietan, baina harrigarria bada ere npm lehenetsita dago menpekotasunei ingurune batetik bestera pasatzen uzteko. Instalatzen dituzunean paketeak hainbat ingurunetan, paketeen azken bertsioa eskuratzen saiatzen da. Hori saihesteko, erabili npm edo .npmrc konfigurazio artxiboak, ingurune bakoitzean dagokion paketearen zein bertsio zehatz (eta ez derrigorrez berriena) komeni zaizun adieraziko dizu eta. Bestela, kontrola fintze aldera, erabili `npm shrinkwrap`. \\*Eguneratzea: NPM5 bertsiotik aurrera, menpekotasunak defektuz blokeatzeko konfiguratuta dator. Yarn pakete kudeatzaile berria ere lehenetsita dago horrela lan egiteko\n\n**Bestela:** QAk kodea xeheki probatuko du eta onartuko duen bertsioak desberdin jokatuko du produkzioan. Are okerrago, produkzio talde bereko zerbitzarien kodeak desberdinak izan litezke\n\n🔗 [**Informazio gehiago: blokeatu menpekotasunak**](./sections/production/lockdependencies.basque.md)\n\n<br/><br/>\n\n## ![✔] 5.5. Babestu prozesuaren erabilgarritasuna tresna egokiak erabiliz\n\n**TL;PL:** prozesuak huts eginez gero, aurrera egin eta berrabiarazi beharra dago. Egoera arruntetan, nahikoak izan daitezke PM2 bezalako prozesuak kudeatzeko tresnak, baina gaur egungo mundu ”docker”-izatuan, taldeak kudeatzeko tresnak ere kontuan hartu behar dira\n\n**Bestela:** estrategia argirik gabe dozenaka eskaera exekutatzeak DevOpsa nahaste-borrastera eraman dezake, hartarako aldi berean tresna gehiegi (talde kudeaketa, dockerra, PM2) erabiliz gero\n\n🔗 [**Informazio gehiago: babestu prozesuaren erabilgarritasuna tresna egokiak erabiliz**](./sections/production/guardprocess.basque.md)\n\n<br/><br/>\n\n## ![✔] 5.6. Erabili PUZeko nukleo guztiak\n\n**TL;PL:** Noderen oinarrizko bertsioa PUZeko nukleo bakar batean exekutatzen da, eta beste nukleo guztiak geldi geratzen dira. Beharrezkoa da Noderen prozesua erreplikatzea PUZ guztiak erabiliz: aplikazio txiki eta ertainekin, Node Cluster edo PM2 erabil dezakezu; aplikazio handi samarrekin, berriz, saiatu erabiltzen Docker tankerako talderen bat (adibidez, K8S, ECS) edo Linux hasieratze sisteman oinarritutako garatze idazkerak (adibidez, systemd)\n\n**Bestela:** seguruenik, zure aplikazioak erabilgarri dituen baliabideen %25a besterik ez du erabiltzen (!), edo gutxiago, agian. Kontuan izan ohiko zerbitzariek gutxienez lau nukleo dituztela PUZen, eta Node.jsren garatzaile soilak bat bakarra erabiltzen duela (AWS beanstalk bezalako PaaS zerbitzuekin lan egiten duenean ere)\n\n🔗 [**Informazio gehiago: erabili PUZeko nukleo guztiak**](./sections/production/utilizecpu.basque.md)\n\n<br/><br/>\n\n## ![✔] 5.7. Sortu ‘mantentze lanen amaiera puntua‘\n\n**TL;PL:** API seguru batean, jarri agerian sistemarekin lotutako informazio multzo bat, hala nola, memoriaren erabilera eta REPL, etab. Nahiz eta gomendagarria den proba estandarretan eta tresna arruntetan oinarritzea, zenbait informazio eta eragiketa baliotsu errazago egiten dira kodea erabiliz\n\n**Bestela:** konturatuko zara “diagnostiko-inplementazio“ asko egiten ari zarela, eta kodea produkziora bidaltzen duzula soilik informazioa lortzeko diagnostikoa egite aldera\n\n🔗 [**Informazio gehiago: sortu ‘mantentze lanen amaiera puntua‘**](./sections/production/createmaintenanceendpoint.basque.md)\n\n<br/><br/>\n\n## ![✔] 5.8. Aurkitu erroreak eta geldialdiak APM produktuak erabiliz\n\n**TL;PL:** aplikazioen jarraipen eta errendimendu produktuek (APM deritzona) modu proaktiboan neurtzen dituzte kode basea eta APIa, modu automatikoan ohiko jarraipenetik haratago joateko eta erabiltzaileen esperientzia arrunta zerbitzu eta maila guztietan neurtzeko. Adibidez, APM produktu batzuek agerian jarri dezakete azken erabiltzaileen aldean motelegi kargatzen dela transakzio bat, sakoneko arrazoia iradokitzen duten bitartean\n\n**Bestela:** APIaren errendimendua eta geldialdiak neurtzeko ahalegin handia egin zenezake, eta, ziurrenik, ez zinateke jabetuko zein diren zure kodearen atalik motelenak mundu errealeko eszenatokian eta nola eragiten dioten zure erabiltzaile esperientziari\n\n🔗 [**Informazio gehiago: aurkitu erroreak eta geldialdiak APM produktuak erabiliz**](./sections/production/apmproducts.basque.md)\n\n<br/><br/>\n\n## ![✔] 5.9. Prestatu zure kodea ekoizpenerako\n\n**TL;PL:** programatu helburua kontuan izanik; planifikatu produkzioa lehenengo egunetik hasita. Horrek lausoa eta zehazgabea ematen duenez, produkzioaren mantentzeari estu-estu lotuta dauden garatze aholku batzuk bildu ditut (egin klik hemen behean dagoen Gist estekan)\n\n**Bestela:** IT / DevOps arloko munduko txapeldun batek ere ez du salbatuko gaizki idatzita dagoen sistema\n\n🔗 [**Informazio gehiago: prestatu zure kodea ekoizpenerako**](./sections/production/productioncode.basque.md)\n\n<br/><br/>\n\n## ![✔] 5.10. Neurtu eta babestu memoriaren erabilera\n\n**TL;PL:** Node.jsk harreman gatazkatsuak ditu memoriarekin: v8 motorrak muga leunak dauzka memoria erabiltzean (1,4 GB) eta ezaguna da zein bidetatik galtzen duen Noderen kodeak memoria. Beraz, ezinbestekoa da Noderen prozesu memoriari erreparatzea. Aplikazio txikietan memoria aldizka neur dezakezu geruza komandoak erabiliz; baina aplikazio ertainetan eta handietan aztertu beharko zenuke ez ote zaizun komeni zure memoria erlojua kontrol sistema sendo baten erara erabiltzea\n\n**Bestela:** zure memoria prozesuak 100 bat megabyte gal dezake egunean, [Walmart](https://www.joyent.com/blog/walmart-node-js-memory-leak)-i gertatu zitzaion bezala\n\n🔗 [**Informazio gehiago: neurtu eta babestu memoriaren erabilera**](./sections/production/measurememory.basque.md)\n\n<br/><br/>\n\n## ![✔] 5.11. Atera zure frontend modulu aktiboak Nodetik\n\n**TL;PL:** prestatu frontend edukia middleware dedikatu bat erabiliz (adibidez, nginx, S3, CDN), zeren Noderen errendimenduak behera egiten baitu artxibo estatiko askorekin lan egiten duenean, bera azpiprozesu bakarrekoa da eta\n\n**Bestela:** Node eduki dinamikoa eskaintzeko sortu zen arren, haren hari bakarra lanpetuta egongo da html / images / angular / react erako ehunka fitxategi bidaltzen, bera egiteko sortua izan zen zereginei esleitu barik bere baliabide guztiak\n\n🔗 [**Informazio gehiago: atera zure frontend/interfazeko modulu aktiboak Nodetik**](./sections/production/frontendout.basque.md)\n\n<br/><br/>\n\n## ![✔] 5.12. Izan aberrigabea, hil zerbitzariak ia egunero\n\n**TL;PL:** gorde edozein datu mota (adibidez, erabiltzaile saioak, cacheak, kargatutako fitxategiak) kanpoko datu biltegietan; eta aztertu ez ote zenituzkeen zure zerbitzari guztiak aldian behin “hil” beharko edo “zerbitzaririk gabe”ko plataformaren bat erabili (adibidez, AWS Lambda), berariaz aberrigabe (stateless) jokaera duena\n\n**Bestela:** zerbitzari jakin batek huts eginez gero, makina akastun bat hil beharrean, aplikazioen geldialdia eragingo du. Gainera, gero eta zailagoa izango da mailaketaren elastikotasuna, zerbitzari jakin baten menpeko izanda\n\n🔗 [**Informazio gehiago: izan aberrigabea, hil zerbitzariak ia egunero**](./sections/production/bestateless.basque.md)\n\n<br/><br/>\n\n## ![✔] 5.13. Erabili menpekotasunak automatikoki atzematen dituzten tresnak\n\n**TL;PL:** menpekotasun ezagunenek ere –Express, adibidez– badituzte (noizean behin) ahulezia ezagunak, sistema arriskuan jar ditzaketenak. Horrek konponbide erraza du, ordea, tresna komunitario eta komertzialak erabiliz gero, ahuleziak etengabe kontrolatu eta haien berri ematen dute eta (bertan edo GitHub-en)\n\n**Bestela:** zure kodea ahulezia eta zaurgarritasunetatik garbi mantentzeko tresna dedikaturik gabe, jarraipen estua egin beharko diezu mehatxu berriei buruz linean egiten diren argitalpenei, bide batez esanda, aspergarri samarra izaten dena\n\n🔗 [**Informazio gehiago: erabili menpekotasunak automatikoki atzematen dituzten tresnak**](./sections/production/detectvulnerabilities.basque.md)\n\n<br/><br/>\n\n## ![✔] 5.14. Esleitu transakzio identifikazio bana adierazpen erregistro bakoitzari\n\n**TL;PL:** esleitu identifikatzaile bera –transakzio-: {balioren bat}– erregistro sarrera bakoitzari eskaera bakar baten barruan. Ondoren, erregistroetako erroreak ikuskatzean, erraz konturatuko zara zer gertatu zen aurretik eta ondoren. Zoritxarrez, hori ez da erraz lortzen Noden, haren izaera asinkronoa da eta. Ikusi kodearen adibideak beheko estekan\n\n**Bestela:** produkzioko erroreen erregistroa testuingururik gabe ikustean – aurretik gertatu zena, alegia –, askoz zailagoa eta motelagoa da arazoa aztertzea\n\n🔗 [**Informazio gehiago: esleitu transakzio identifikazio bana adierazpen erregistro bakoitzari**](./sections/production/assigntransactionid.basque.md)\n\n<br/><br/>\n\n## ![✔] 5.15. Ezarri NODE_ENV = produkzioa\n\n**TL;PL:** ezarri NODE_ENV ingurune aldagaia ‘produkzioa‘ edo ‘garapena‘ ataletan produkzioaren optimizazioak aktibatu beharra dagoen adierazteko; npm pakete askok uneko ingurunea zehazten dute eta haren kodea optimizatzen dute ekoizpenerako\n\n**Bestela:** ezaugarri soil hori gabe errendimendua asko jaits liteke. Adibidez, Express erabiltzean zerbitzarira bideratzeko `NODE_ENV` gabe, errendimendua heren bat moteltzen da\n\n🔗 [**Informazio gehiago: Ezarri NODE_ENV = produkzioa**](./sections/production/setnodeenv.basque.md)\n\n<br/><br/>\n\n## ![✔] 5.16. Diseinatu inplementazio automatizatuak, atomikoak eta geldialdi gabekoak\n\n**TL;PL:** ikerketek frogatu dute inplementazio ugari egiten dituzten taldeek ekoizpen arazo kritikoak izateko probabilitatea txikiagotzen dutela. Eskuz egin beharreko urrats arriskutsurik eta zerbitzuen geldialdirik ez duten inplementazio azkar eta automatizatuek nabarmen hobetzen dute inplementazio prozesua. Baliteke hori bera lortzea Docker eta IE tresnak, biak batera, erabiliz, inplementazio sinplifikatuari dagokionez industriaren estandarra bihurtu dira eta\n\n**Bestela:** inplementazio luzeak -> produkzioaren geldialdia eta gizakiak eragindako erroreak -> inplementazioan konfiantzarik ez duen taldea -> inplementazio eta funtzio gutxiago egitea\n\n<br/><br/>\n\n## ![✔] 5.17. Erabili Node.jsren LTS bertsio berria\n\n**TL;PL:** ziurtatu Node.jsren LTS bertsioa erabiltzen ari zarela errore kritikoen zuzenketak, segurtasun eguneratzeak eta errendimenduaren hobekuntzak jasotzeko\n\n**Bestela:** aurkitu berri diren erroreak edo ahuleziak erabil litezke produkzioan exekutatzen den aplikazio bat ustiatzeko eta baliteke zure aplikazioa ez izatea bateragarria hainbat modulurekin eta zailagoa gertatzea hura mantentzea\n\n🔗 [**Informazio gehiago: Erabili NTS.jsren LTS bertsioa**](./sections/production/LTSrelease.basque.md)\n\n<br/><br/>\n\n## ![✔] 5.18. Ez bideratu erregistrorik aplikazioaren barruan\n\n**TL;PL:** garatzaileek ez dituzte erregistroen helmugak aplikazio kodearen barruan kodetu behar, aplikazioa exekutatzen den inguruneak berak definitu beharko ditu eta. Garatzaileek `stdout`-ean idatzi behar dituzte erregistroak erregistratze tresna bat erabiliz, eta gero exekuzio inguruneak (edukiontzia, zerbitzaria eta abar) bideratuko du `stdout` korrontea helmuga egokira (hau da, Splunk, Graylog, ElasticSearch eta abar)\n\n**Bestela:** aplikazioen kudeaketaren erregistroak bideratzea === zaila da eskalatzen, erregistroen galera dakar, eskasa izaten da kezken bereizketa\n\n🔗 [**Informazio gehiago: erregistroen bideraketa**](./sections/production/logrouting.basque.md)\n\n<br/><br/>\n\n## ![✔] 5.19. Instalatu zure paketeak `npm ci` erabiliz\n\n**TL;PL:** ziurtatu ekoizpen kodeak erabiltzen duela probak egiteko erabili dituzun paketeen bertsio berdina. Exekutatu `npm ci` zure package.json eta package-lock.json paketen menpekotasunen instalazio garbia egiteko\n\n**Bestela:** QAk kodea sakonki probatuko du eta produkzioan modu desberdinean jokatuko duen bertsioa onartuko du. Are okerrago, produkzio talde bateko hainbat zerbitzarik kode desberdinak exekuta ditzake\n\n🔗 [**Informazio gehiago: erabili npm ci**](./sections/production/installpackageswithnpmci.basque.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#edukien-aurkibidea\">⬆ Itzuli hasierara</a></p>\n\n# `6. Segurtasuna`\n\n<div align=\"center\">\n<img src=\"https://img.shields.io/badge/OWASP%20Threats-Top%2010-green.svg\" alt=\"54 items\"/>\n</div>\n\n## ![✔] 6.1. Erabili linter segurtasun arauak\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20XSS%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL:** erabili segurtasunarekin lotutako linter pluginak, [eslint-plugin-security](https://github.com/nodesecurity/eslint-plugin-security) bezalako segurtasun ahuleziak eta arazoak lehenbailehen atzemateko, ahal bada kodetzen ari diren bitartean. Horrek segurtasun ahuleziak atzematen lagun dezake, hala nola eval erabiltzea, bigarren mailako prozesu bat deitzea edo modulu bat inportatzea kate literal batekin (adibidez, erabiltzailearen sarrera). Egin klik 'Informazio gehiago' atalean segurtasun liner batek atzematen dituen kode adibideak ikusteko\n\n**Bestela:** garapenean zehar segurtasun ahulezia zuzena izan zitekeena produkzioaren arazo nagusia bihurtzen da. Gainera, baliteke proiektuak kodeen segurtasun praktika koherenterik ez jarraitzea, ahuleziak sartzea edo urruneko biltegietan sartutako sekretu konfidentzialak sortzea\n\n🔗 [**Informazio gehiago: lint arauak**](./sections/security/lintrules.basque.md)\n\n<br/><br/>\n\n## ![✔] 6.2. Mugatu aldi baterako eskaerak middlewareak erabiliz\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL:** DOS erasoak oso ezagunak dira, eta nahiko erraz eragin daitezke. Ezarri abiadura muga kanpoko zerbitzu bat erabiliz, hala nola hodeiko karga orekatzaileak, hodeiko suebakiak, nginx, [abiadura-mugatzaile-malgua](https://www.npmjs.com/package/rate-limiter-flexible) (rate-limiter-flexible) edo (aplikazio txikiagoak eta ez hain kritikoetarako) abiadura mugatzeko middleware bat (adibidez, [express-rate-limit](https://www.npmjs.com/package/express-rate-limit), express abiadura mugatzailea)\n\n**Bestela:** aplikazio batek erasoak jasan ahal ditu, haren erabiltzaileei ukatzen bazaie jaso beharko luketen zerbitzua, aplikazioa egoera txarrean dagoelako edo eskuragarri ez dagoelako\n\n🔗 [**Informazio gehiago: ezarri abiadura muga**](./sections/security/limitrequests.basque.md)\n\n<br/><br/>\n\n## ![✔] 6.3 Kendu sekretuak konfigurazio fitxategietatik edo erabili paketeak enkriptatzeko\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A3:Sensitive%20Data%20Exposure%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL:** ez gorde inoiz testu arrunteko sekreturik konfigurazio fitxategietan edo iturburu kodean. Horren ordez, erabili sekretuak kudeatzeko sistemak, hala nola Vault produktuak, Kubernetes / Docker Secrets edo ingurune aldagaiak. Azken baliabide gisa, iturburuko kontrolean gordetako sekretuak enkriptatu eta kudeatu egin behar dira (gako birakariak, iraungitzeak, ikuskaritza, etab.). Erabili aurre-commit/push kakoak, ustekabean sekreturik gordetzea saihesteko\n\n**Bestela:** iturburu kodearen kontrola publiko egin daiteke akats baten ondorioz, biltegi pribatuetan ere, eta orduan sekretu guztiak agerian geratzen dira. Kanpoko norbaitek iturburuko kontrolaren sarbidea ezagutzeak nahi gabe eragingo du erlazionatutako sistemetarako sarbideak ere ezagutzea (datu baseak, APIak, zerbitzuak, etab.)\n\n🔗 [**Informazio gehiago: kudeaketa sekretua**](./sections/security/secretmanagement.basque.md)\n\n<br/><br/>\n\n## ![✔] 6.4. Saihestu kontsultak injektatzeko ahultasunak ORM / ODM liburutegiekin\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL:** SQL / NoSQL injekzioa eta beste eraso maltzur batzuk ekiditeko, erabili beti ORM / ODM edo datuetatik ihes egiten duen datu baseen liburutegia, edo kontsulta parametro izendatuak edo indexatuak onartzen dituena eta espero diren erabiltzaileen sarrera balioztatzen duena. Inoiz ez erabili JavaScript txantiloien kateak edo katearen kateatzea balioak kontsultetan txertatzeko, horrek zure aplikazioa ahultasunen espektro zabalera irekitzen baitu. Node.js entzute handiko datuen liburutegi guztiek injekzio erasoen aurkako babesa dute (adibidez, [Sequelize](https://github.com/sequelize/sequelize), [Knex](https://github.com/tgriesser/knex), [mongoose](https://github.com/Automattic/mongoose))\n\n**Bestela:** balidatu gabeko edo baimendu gabeko erabiltzaileen sarrerak operadorearen injekzioa ekar dezake NoSQLrako MongoDB-rekin lan egitean, eta saneamendu sistema edo ORM egokia ez erabiltzeak SQL injekzio erasoak ahalbidetuko ditu, ahultasun erraldoia sortuz\n\n🔗 [**Informazio gehiago: kontsulten injekzioaren prebentzioa ORM / ODM liburutegiak erabiliz**](./sections/security/ormodmusage.basque.md)\n\n<br/><br/>\n\n## ![✔] 6.5. Segurtasuneko praktika onen bilduma\n\n**TL;PL:** Node.jsrekin zuzenean loturarik ez duen segurtasuneko aholku bilduma bat da: Noderen inplementazioa ez da hain desberdina beste edozein hizkuntzaren inplementazioaren aldean. Egin klik “Informazio gehiago” botoian sakontzeko\n\n🔗 [**Informazio gehiago: ohiko segurtasun praktika onak**](./sections/security/commonsecuritybestpractices.basque.md)\n\n<br/><br/>\n\n## ![✔] 6.6. Doitu HTTP erantzunen izenburuak segurtasun hobea lortzeko\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL:** zure aplikazioak izenburu seguruak erabili beharko lituzke erasotzaileek gune arteko scriptak (XSS), clickjacking-a eta beste eraso maltzur arruntak egitea saihesteko. Horiek erraz konfigura daitezke [helmet](https://www.npmjs.com/package/helmet) bezalako moduluak erabiliz\n\n**Bestela:** erasotzaileek zure aplikazioaren erabiltzaileen aurkako eraso zuzenak egin ditzakete, segurtasun ahultasun handiak sortuz\n\n🔗 [**Informazio gehiago: erabili izenburu seguruak zure aplikazioan**](./sections/security/secureheaders.basque.md)\n\n<br/><br/>\n\n## ![✔] 6.7. Etengabe eta automatikoki ikuskatu ba ote dagoen erasotzen errazak diren menpekotasunak\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Known%20Vulnerabilities%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL:** npm ekosistemarekin ohikoa da proiektu batek menpekotasun ugari izatea. Menpekotasunak beti kontrolatuta egon behar dira ahultasun berriak aurkitzen diren heinean. Erabili [npm audit](https://docs.npmjs.com/cli/audit) edo [snyk](https://snyk.io/) bezalako tresnak, erasotzen errazak diren menpekotasunen jarraipena egiteko, kontrolatzeko eta adabakiak jartzeko. Tresna horiek zure IE konfigurazioarekin integratu, erasotzen errazak diren menpekotasunenak atzemateko ekoizpenera iritsi aurretik\n\n**Bestela:** erasotzaile batek zure web esparrua detektatu eta ageriko ahultasun guztiei eraso ahal die\n\n🔗 [**Informazio gehiago: menpekotasunen segurtasuna**](./sections/security/dependencysecurity.basque.md)\n\n<br/><br/>\n\n## ![✔] 6.8. Babestu erabiltzaileen pasahitzak / sekretuak BCrypt edo Script erabiliz\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL:** pasahitzak eta sekretuak (adibidez API giltzak) gorde behar dira hash + gatz funtzio seguru bat erabiliz, esaterako, `bcrypt`edo `scrypt`; eta kasurik okerrenean, `pbkdf2`\n\n**Bestela:** funtzio segururik erabili gabe gordetzen diren pasahitzak eta sekretuak bortxaz erasotuak izan daitezke edo hiztegi erasoak jasan ditzakete. Azkenean agerian gera daitezke, bai eta agian zabaldu ere\n\n🔗 [**Informazio gehiago: erabiltzaileen pasahitzak**](./sections/security/userpasswords.basque.md)\n\n<br/><br/>\n\n## ![✔] 6.9. Ekidin HTML, JS eta CSS irteerak\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL:** arakatzailera bidaltzen diren datu ez fidagarriak bistaratu beharrean exekutatu egin daitezke, normalean cross-site-scripting (XSS) erasoa deritzona. Arindu hori datuak inoiz exekutatu behar ez diren eduki huts gisa (hau da, kodetu, ihes)esplizituki markatzen dituzten liburutegi espezializatuak erabiliz\n\n**Bestela:** erasotzaile batek JavaScript kodeketa kaltegarria gorde dezake zure DBn, gero bezero gizajoei dagoen moduan bidaliko zaiena\n\n🔗 [**Informazio gehiago: ihes irteera**](./sections/security/escape-output.basque.md)\n\n<br/><br/>\n\n## ![✔] 6.10. Balidatu sarrerako JSON eskemak\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7: XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A8:Insecured%20Deserialization%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL:** balidatu sarrerako eskaeren gorputzeko zama erabilgarria eta ziurtatu zure itxaropenak betetzen dituela; eta, haiek bete ezean, huts eragin. Ibilbide bakoitzaren balioztatze kodetze neketsua saihesteko JSONen oinarritutako balioztatze eskema arinak erabil ditzakezu, hala nola [jsonschema](https://www.npmjs.com/package/jsonschema) edo [joi](https://www.npmjs.com/package/joi)\n\n**Bestela:** zure eskuzabaltasunak eta ikuspegi permisiboak asko handitzen dute erasoaren tamainua, eta erasotzailea sarrera asko probatzera bultzatzen du, aplikazioa kraskatzeko konbinazio bat aurkitu arte\n\n🔗 [**Informazio gehiago: balidatu sarrerako JSON eskemak**](./sections/security/validation.basque.md)\n\n<br/><br/>\n\n## ![✔] 6.11. Onartu JWTen zerrenda beltzak\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL:** JSON web fitxak erabiltzean (adibidez, [Passport.js](https://github.com/jaredhanson/passport))-rekin), lehenespenez ez dago igorritako fitxen sarbidea ezeztatzeko mekanismorik. Erabiltzaileen jarduera maltzurren bat aurkitu ondoren, ez dago modurik sistemara sartzea eragozteko, baliozko fitxaren bat duten bitartean. Konpondu hori eskaera bakoitzean balioztatuko diren fitxa ezfidagarrien zerrenda beltza erabiliz\n\n**Bestela:** edozeinek erabil litzake iraungitako edo gaizki kokatutako fitxak, maltzurki aplikazio batera sartzeko eta fitxaren jabea ordezkatzeko\n\n🔗 [**Informazio gehiago: JSON web fitxen zerrenda beltzak**](./sections/security/expirejwt.basque.md)\n\n<br/><br/>\n\n## ![✔] 6.12. Aurrea hartu baimenaren aurkako eraso basatiei\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL:** oso teknika sinple eta eraginkorra da baimen saiakerak mugatzea bi metrika erabiliz:\n\n1. Lehenengoa, erabiltzaile beraren ID / izen eta IP helbide bakarrak jarraian huts egin duen saiakera kopurua\n2. Bigarrena, IP helbide batek denbora tarte luze batean huts egin duen saiakera kopurua. Adibidez, blokeatu IP helbide bat, egun batean 100 saiakera huts egiten baditu\n\n**Bestela:** erasotzaile batek pasahitz automatizatuen saiakera mugagabeak egin ditzake aplikazio bateko kontu pribilegiatuetara sartzeko\n\n🔗 [**Informazio gehiago: mugatu saioa hasteko abiadura**](./sections/security/login-rate-limit.basque.md)\n\n<br/><br/>\n\n## ![✔] 6.13. Exekutatu Node.js erabiltzaile ez-erro gisa\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A5:Broken%20Access%20Access%20Control-green.svg\" alt=\"\"/></a>\n\n**TL;PL:** eszenatoki arrunt batean Node.js baimen mugagabeak dituen erro erabiltzaile gisa exekutatzen da. Hori da, adibidez, Docker edukiontzietako portaera lehenetsia. Gomendagarria da erro ez den erabiltzaile bat sortzea eta Docker irudian sartzea (behean azaltzen dira adibideak) edo prozesua erabiltzaile horren izenean abiaraztea \"-u username\" marka duen edukiontzia deituz\n\n**Bestela:** zerbitzarian script bat exekutatzea lortzen duten erasotzaileek botere mugagabea lortzen dute makina lokalaren gainean (adibidez, iptable aldatu eta trafikoa beren zerbitzarira bideratzea)\n\n🔗 [**Informazio gehiago: exekutatu Node.js erabiltzaile ez-erro gisa**](./sections/security/non-root-user.basque.md)\n\n<br/><br/>\n\n## ![✔] 6.14. Mugatu kargaren tamaina alderantzizko proxy edo middlewareak erabiliz\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A8:Insecured%20Deserialization%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL:** zenbat eta gorputzaren karga handiagoa izan, orduan eta zailagoa da zure hari bakarra lan egitea hura prozesatzean. Hori da erasotzaileek zerbitzariak belauniko jartzeko aukera ona eskaera kopuru izugarririk egin gabe (DOS / DDOS erasoak). Murriztu arriskua ertzean jasotako eskaeren gorputzaren tamaina mugatuz (adibidez, suebakia, ELB) edo [express body parser](https://github.com/expressjs/body-parser) konfiguratuz tamaina txikiko kargak bakarrik onartzeko\n\n**Bestela:** zure aplikazioak eskaera handiei aurre egin beharko die, eta ezingo du prozesatu egin behar duen beste lan garrantzitsua, ondorioz errendimendua gutxituz eta DOS erasoekiko ahulduz\n\n🔗 [**Informazio gehiago: mugatu kargaren tamaina**](./sections/security/requestpayloadsizelimit.basque.md)\n\n<br/><br/>\n\n## ![✔] 6.15. Saihestu JavaScripten eval adierazpenak\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL:** `eval` arriskutsua da, exekutatzeko garaian JavaScript kode pertsonalizatua exekutatzea baimentzen baitu. Hori ez da errendimendu arazo bat bakarrik, baizik eta segurtasun arazo garrantzitsua, erabiltzaileen sarreratik JavaScript kode gaiztoa lor daiteke eta. Halaber, `new Function constructor` ere saihestu beharra dago; eta, azkenik, `setTimeout` eta `setInterval`, ez dira inoiz pasatu behar, ezta JavaScript kode dinamikoa ere\n\n**Bestela:** Javascript kode gaiztoak bidea aurkitzen du `eval` testura edo JavaScript hizkuntzak denbora errealean ebaluatzeko dituen funtzioetara sartzeko, eta sarbide osoa lortuko du JavaScripten orrialdeko baimenetara. Ahultasun hori XSS eraso gisa agertzen da askotan\n\n🔗 [**Informazio gehiago: saihestu JavaScript eval adierazpenak**](./sections/security/avoideval.basque.md)\n\n<br/><br/>\n\n## ![✔] 6.16. Saihestu RegEx gaiztoak zure exekuzio hari bakarra gainkargatzea\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL:** adierazpen erregularrak, oso erabilgarriak izan arren, benetako mehatxua dira JavaScript aplikazioentzat, oro har, eta Node.js plataformarentzat, bereziki. Erabiltzaile baten sarrera prozesatzeko testuarekin bat etor dadin, gerta liteke PUZeko ziklo kopuru handia behar izatea. RegExen prozesamenduaren eraginkortasuna hain txikia izan daiteke, ezen 10 hitz balioztatzen dituen eskaera bakar batek blokea baitezake gertaeren begizta osoa 6 segundoz, eta PUZa su hartzeko moduan jarri 🔥. Hori dela eta, erasotzen errazak diren ohiko adierazpen ahulen txantiloiak atzemateko erabili hirugarrenen balidazio paketeak -esaterako, [validator.js](https://github.com/chriso/validator.js)-, zuk zeure Regex ereduak idatzi edo [safe-regex](https://github.com/substack/safe-regex) erabili gabe\n\n**Bestela:** gaizki idatzitako ohiko adierazpenek Regular Expression DoSen erasoak jasan ditzakete, gertaeren begizta erabat blokeatuko dutenak. Adibidez, 2017ko azaroan, RegExen erabilera gaiztoak agerian jarri zuen `moment` pakete ezagunaren ahultasuna\n\n🔗 [**Informazio gehiago: saihestu RegEx gaiztoa erabiltzea**](./sections/security/regex.basque.md)\n\n<br/><br/>\n\n## ![✔] 6.17. Saihestu moduluak kargatzea aldagai bat erabiliz\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL:** bide bat erabiltzailea sartu ondoren sortua ote den kezka baduzu eta horregatik parametro gisa ezarri baduzu, saihestu bide hori erabiltzea beste fitxategi bat deitzeko / inportatzeko. Arau hori, oro har, edozein fitxategitara sartzeko erabil daiteke (hau da, `fs.readFile()`) edo erabiltzailea sartu ondoren sortutako aldagai dinamikoak dituen beste baliabide konfidentzialetara sartzeko. [Eslint-plugin-security](https://www.npmjs.com/package/eslint-plugin-security) linterrek eredu horiek atzeman eta nahikoa goiz ohartaraz dezake\n\n**Bestela:** erabiltzaile gaiztoen sarrerak manipulatutako fitxategiak deitzeko erabiltzen den parametro batera jo dezake, adibidez, aurretik fitxategi sisteman kargatutako fitxategietara edo lehendik sisteman bazeuden fitxategietara sartzeko\n\n🔗 [**Informazio gehiago: moduluaren karga segurua**](./sections/security/safemoduleloading.basque.md)\n\n<br/><br/>\n\n## ![✔] 6.18. Exekutatu kode ez segurua sandbox batean\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL:** exekuzio garaian ematen den kanpoko kodea exekutatu behar duzunean (adibidez, plugina), erabili kode nagusia isolatu eta pluginetik babesten duen 'sandbox' tankerako edozein exekuzio ingurune mota. Hori lor daiteke prozesu dedikatu baten bidez (adibidez, `cluster.fork()`), zerbitzaririk gabeko ingurune bat erabiliz edo sandbox bat balitz bezala jokatzen duten npm pakete dedikatuak erabiliz\n\n**Bestela:** plugin batek bide ugari erabil ditzake erasotzeko, hala nola begizta infinituak erabiliz, memoria gainkargatuz eta prozesu ingurune eraso errazen aldagaiak eskuratuz\n\n🔗 [**Informazio gehiago: exekutatu kode ez segurua sandbox batean**](./sections/security/sandbox.basque.md)\n\n<br/><br/>\n\n## ![✔] 6.19. Kontu handia izan bigarren mailako prozesuekin lan egitean\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL:** ahal dela, saihestu bigarren mailako prozesuak, eta, hala behar izanez gero, balioztatu eta garbitu sarrera, shell injekzioko erasoak arintzeko. Hobetsi `child_process.execFile` fitxategia, definizioz komando bakarra exekutatuko duena atributu multzo batekin eta shell parametroen hedapena onartuko ez duena\n\n**Bestela:** bigarren mailako prozesuak ganorarik gabe erabiltzeak urruneko komandoen exekuzioa edo shell injekzioko erasoak eragin ditzake, desinfektatu gabeko sistema komando batera erabiltzaile gaiztoren bat sartu dela eta\n\n🔗 [**Informazio gehiago: kontuz ibili bigarren mailako prozesuekin lan egitean**](./sections/security/childprocesses.basque.md)\n\n<br/><br/>\n\n## ![✔] 6.20. Ezkutatu bezeroari erroreen xehetasunak\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL:** errore integratuen kudeatzaile lasterrek lehenespenez ezkutatzen dituzte erroreen xehetasunak. Haatik, aukera handia dago inplementa dezan errore pertsonalizatuak dituzten objektuak kudeatzeko berak daukan logika (batzuen ustez praktika ona dena). Hala eginez gero, ziurtatu bezeroari errorearen objektu osoa ez itzultzea, horrek aplikazioen datu sentikorrak izan litzake eta\n\n**Bestela:** aplikazioaren xehetasun sentikorrak —hala nola, zerbitzariko fitxategien bideak, erabiltzen ari diren hirugarrenen moduluak eta erasotzaile batek balia ditzakeen aplikazioaren barneko beste lan fluxuak— atera daitezke pila aztarna batean aurkitutako informazioetatik\n\n🔗 [**Informazio gehiago: ezkutatu bezeroari erroreen xehetasunak**](./sections/security/hideerrors.basque.md)\n\n<br/><br/>\n\n## ![✔] 6.21. Konfiguratu 2FA npm edo Yarn-entzat\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL:** garapen katearen edozein urrats MFArekin (faktore anitzeko autentifikazioarekin) babestu behar da. Iza ere, npm / Yarn aukera paregabea da garatzaile batzuen pasahitza eskuratu nahi duten erasotzaileentzat. Garatzaileen egiaztagiriak erabiliz, erasotzaileek kode gaiztoa txerta dezakete proiektu eta zerbitzuetan instalatuta dauden liburutegietan, eta, agian, sarean bertan ere, jendaurrean argitarauta badago. npm-n autentifikazioa 2 faktore bidez egin beharra ezartzeak ia zero aukera uzten die erasotzaileei zure pakete kodea aldatzeko\n\n**Bestela:** [ba al duzu pasahitza bahitu zuten eslint garatzailearen berri?](https://medium.com/@oprearocks/eslint-backdoor-what-it-is-and-how-to-fix-the-issue-221f58f1a8c8)\n\n<br/><br/>\n\n## ![✔] 6.22. Aldatu saioko middlewarearen ezarpenak\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL:** web esparru eta teknologia bakoitzak bere ahulguneak ditu: erasotzaileei esatea zein web esparru erabiltzen dugun laguntza handia da haientzat. Saioaren middlewareen ezarpen lehenetsiak erabiltzeak eragin dezake zure moduluko eta esparruko berariazko bahiketa erasoak izatea zure aplikazioak, `X-Powered-By` izenburukoaren antzekoak. Saiatu ezkutatzen zure pila teknologkoa identifikatzen eta agerian uzten duen edozein gauza (adibidez, Node.js, express)\n\n**Bestela:** cookieak segurtasunik gabeko konexioen bidez bidal litezke, eta erasotzaile batek saioaren identifikazioa erabil lezake web aplikazioaren barruko esparrua eta moduluen berariazko ahultasunak ere identifikatzeko\n\n🔗 [**Informazio gehiago: cookieak eta saioaren segurtasuna**](./sections/security/sessions.basque.md)\n\n<br/><br/>\n\n## ![✔] 6.23. Saihestu DOS erasoak prozesuak noiz huts egin behar duen berariaz ezarriz\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL:** Node prozesuak huts egingo du akatsak kudeatzen ez direnean. Praktika onetako askok irtetea gomendatzen dute, akats bat atzeman eta kudeatuta badago ere. Expressek, adibidez, huts egiten du errore asinkronoren bat izanez gero –blokeatze klausula batekin ibilbideak biltzen ez badituzu behintzat. Horrek oso eraso bide aproposa irekitzen die erasotzaileei, zer informaziok eragiten duen prozesuaren blokeoa jakinda, behin eta berriz eskaera bera bidaltzen baitute prozesua blokeatzea lortu arte. Horretarako ez dago berehalako erremediorik, baina teknika batzuek mina arindu dezakete: abisatu zorroztasun kritikoarekin, kontrolatu gabeko errore baten ondorioz prozesuak huts egiten duen bakoitzean, balioztatu sarrera eta saihestu prozesua blokeatuta gelditzea erabiltzailearen sarrera baliogabea delako, bildu ibilbide guztiak cacth batekin eta kontuan hartu prozesuak ez duela huts egin behar eskaera batean errore bat sortzen denean (oro har, gertatzen denaren kontra)\n\n**Bestela:** hau uste oneko suposizio soil bat besterik ez da. Node.js aplikazio asko edukiz gero, JSON gorputz huts bat POST eskaera guztietara pasatzen saiatzen bagara, zenbait aplikazio blokeatu egingo dira. Une horretan, eskaera bera berbidal dezakegu, aplikazioak erraz ezabatzeko\n\n<br/><br/>\n\n## ![✔] 6.24. Saihestu birbideratze ez seguruak\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL:** erabiltzaileen sarrerak balioztatzen ez dituzten birbideratzeek ahalbidetzen dute erasotzaileek phishing iruzurrak abiatzea, erabiltzaileen egiaztagiriak lapurtzea eta beste ekintza kaltegarri batzuk burutzea\n\n**Bestela:** erasotzailea ohartzen bada erabiltzaileek emandako kanpo sarrerarik ez dela balioztatzen, ahultasun hori balia dezake foroetan, sare sozialetan eta beste toki publiko batzuetan hartarako bereziki sortutako estekak argitaratzean, erabiltzaileek bertan klik egin dezaten\n\n🔗 [**Informazio gehiago: saihestu birbideratze ez seguruak**](./sections/security/saferedirects.basque.md)\n\n<br/><br/>\n\n## ![✔] 6.25. Saihestu sekretuak npm erregistroan argitaratzea\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL:** neurriak hartu behar dira npm erregistro publikoetan sekretuak nahi gabe argitaratzeko arriskua ekiditeko. Erabil daiteke `.npmignore` fitxategi bat karpeta edo fitxategi espezikoak zerrenda beltz batean jartzeko eta `files` matrizea `package.json` artxiboarekin erabil daiteke zerrenda zuri moduan lan egin dezan\n\n**Bestela:** arriskua dago norbaitek zure proiektuaren API giltzak, pasahitzak edo beste sekretu batzuk aurkitu eta erasoak egiten saiatzeko, eta horrek galera ekonomikoak, nortasun arazoak eta bestelako arriskuak sor ditzake\n\n🔗 [**Informazio gehiago: saihestu sekretuak argitaratzea**](./sections/security/avoid_publishing_secrets.basque.md)\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#edukien-aurkibidea\">⬆ Itzuli hasierara</a></p>\n\n# `7. Zirriborroa: errendimendua`\n\n## Gure laguntzaileak lanean ari dira atal honetan. [Parte hartu nahi zenuke?](https://github.com/goldbergyoni/nodebestpractices/issues/256)\n\n<br/><br/>\n\n## ![✔] 7.1. Ez blokeatu gertaeren begizta\n\n**TL;PL:** saihestu PUZen zeregin intentsiboak, gertaeren begizta blokeatuko baitute. Izan ere, gertaera horietako gehienak azpiprozesu bakarrekoak dira, eta deskargatuak izango baitira azpiprozesu dedikatu batean, prozesu batean edo teknologia desberdinetan, dauden testuinguruaren arabera\n\n**Bestela:** gertaeren begizta blokeatuta dagoenez, Node.jsk ezin izango du beste eskaera bat kudeatu eta, ondorioz, atzerapena eragin diezaieke erabiltzaileei. **3000 erabiltzaile erantzunaren zain daude, edukia zerbitzatzeko prest dago, baina eskaera bakar batek emaitzak berriro bidaltzea galarazten dio zerbitzariari**\n\n🔗 [**Informazio gehiago: ez blokeatu gertaeraren begizta**](./sections/performance/block-loop.basque.md)\n\n<br /><br /><br />\n\n## ![✔] 7.2. Hobetsi jatorrizko JS metodoak Lodash bezalako erabiltzaileen baliabideak baino\n\n**TL;PL:** askotan zorrotzagoa da `lodash` eta `underscore` bezalako baliabide liburutegiak erabiltzea jatorrizko metodoak baino, beharrezkoak ez diren menpekotasunak eragin eta abiadura moteltzen baitu. Gogoan izan, V8 motor berria ES estandar berriekin batera, bertako metodoak hobetu egin zirela, eta gaur egun baliabide liburutegiak % 50 inguru eraginkorragoak direla liburutegi publikoak baino\n\n**Bestela:** errendimendu txikiagoko proiektuak mantendu beharko zenituzke, non **dagoeneko** eskura zenuena erabili beharko baitzenuke edo, fitxategi batzu gehiagoren truke, beste zenbait lerro landu\n\n🔗 [**Informazio gehiago: erabiltzaileen jatorrizko baliabideak**](./sections/performance/nativeoverutil.basque.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#edukien-aurkibidea\">⬆ Itzuli hasierara</a></p>\n\n# `8. Docker, praktika onak`\n\n🏅 Mila esker [Bret Fisher](https://github.com/BretFisher)-i, ondorengo praktika hauetako asko ikasi baikenituen berarengandik\n\n<br/><br/>\n\n## ![✔] 8.1 Erabili etapa anitzeko konpilazioak Docker irudi sinpleagoak eta seguruagoak lortzeko\n\n**TL;PL:** erabili etapa anitzeko konpilazioak beharrezko produkzio objektuak soilik kopiatzeko. Konpilazio menpekotasun eta fitxategi asko ez dira beharrezkoak zure aplikazioa exekutatzeko. Etapa anitzeko konpilazioak erabiliz gero, baliabide horiek konpilazioan zehar erabil daitezke, denboraren exekuzio inguruneak beharrezko baliabideak besterik ez duen bitartean. Etapa anitzeko konpilazioak oso modu erraza dira gehiegizko pisua kendu eta segurtasun mehatxuak saihesteko\n\n**Bestela:** irudi handiagoek denbora gehiago beharko dute konpilatzeko eta zabaltzeko. Eraikitzeko soilik diren tresnek ahultasunak eduki ditzakete eta eraikitze faserako soilik gordetako sekretuak filtratu daitezke\n\n### Etapa anitzeko eraikuntzetarako Dockerfile fitxategiaren adibidea\n\n```dockerfile\nFROM node:14.4.0 AS build\n\nCOPY . .\nRUN npm ci && npm run build\n\n\nFROM node:slim-14.4.0\n\nUSER node\nEXPOSE 8080\n\nCOPY --from=build /home/node/app/dist /home/node/app/package.json /home/node/app/package-lock.json ./\nRUN npm ci --production\n\nCMD [ \"node\", \"dist/app.js\" ]\n```\n\n🔗 [**Informazio gehiago: erabili etapa anitzeko konpilazioak**](./sections/docker/multi_stage_builds.basque.md)\n\n<br /><br /><br />\n\n## ![✔] 8.2. Abiarazi edukiontzia node komandoa erabiliz, saihestu npm\n\n**TL;PL:** erabili `CMD ['node','server.js']` aplikazioa abiarazteko, saihestu OS seinaleak kodera pasatzen ez dituzten npm scriptak erabiltzea. Horrek arazoak izatea ekiditen du bigarren mailako prozesuetan, seinaleak kudeatzean, itxiera seguruetan eta prozesu zonbietan\n\n**Bestela:** seinalerik pasatzen ez denean, zure kodeak ez du inoiz izango itzalaldien berri, eta, hori gabe, ez da behar bezala itxiko, unean uneko eskaerak eta / edo datuak galduz\n\n[**Informazio gehiago: abiarazi edukiontzia 'node' komandoa erabiliz, saihestu npm abiatzea**](./sections/docker/bootstrap-using-node.basque.md)\n\n<br /><br /><br />\n\n## ![✔] 8.3. Utzi Dockeren egikaritze denborari erreplikatu eta jardueraren iraupena kudeatzen\n\n**TL;PL:** Dockerren exekuzio denboraren orkestratzailea erabiltzen duzunean (adibidez, Kubernetes), deitu Node.js prozesua zuzenean, prozesua errepikatzen duten bitarteko prozesuen kudeatzailerik edo koderik pertsonalizatu gabe (adibidez, PM2, Cluster modulua). Exekuzio denboraren plataformak datu kopuru eta ikusgarritasun handiena dauzka kokapenari buruzko erabakiak hartzeko: badaki zenbat prozesu behar diren, nola antolatu prozesuok eta zer egin huts eginez gero\n\n**Bestela:** edukiontziak huts egiten jarraituko du baliabide faltagatik, eta prozesuen kudeatzaileak behin eta berriro berrabiaraziko du, gelditu gabe. Kubernetes horretaz jabetuko balitz, beste toki zabal batera lekualda lezake\n\n🔗 [**Informazio gehiago: utzi Dockeren exekuzio denborari erreplikatu eta jardueraren iraupena kudeatzen**](./sections/docker/restart-and-replicate-processes.basque.md)\n\n<br/><br /><br />\n\n## ![✔] 8.4. Erabili .dockerignore sekretuak filtratzea ekiditeko\n\n**TL;DR**: erabili `.dockerignore` fitxategia, fitxategi sekretu arruntak eta garapeneko objektuak iragazten ditu eta. Horrela, sekretuak irudira ez sartzea lor dezakezu. Eta onura gehigarri bat izango duzu: eraikitzeko denbora nabarmen murriztuko da. Gainera, ziurtatu fitxategi guztiak ez direla behin eta berriro kopiatzen eta berariaz aukeratu zer kopiatu behar den Dockerren\n\n**Bestela**: irudira sarbidea duen edonorekin partekatuko dira `.env`, `.aws` eta `.npmrc` bezalako fitxategi sekretu pertsonal arruntak (adibidez, Docker biltegia)\n\n🔗 [**Informazio gehiago: erabili .dockerignore**](./sections/docker/docker-ignore.basque.md)\n\n<br /><br /><br />\n\n## ![✔] 8.5. Garbitu menpekotasunak ekoizpenaren aurretik\n\n**TL;PL:** nahiz eta dev-menpekotasunak (dev-dependencies) batzuetan eraikuntza eta probako bizitza zikloan zehar beharrezkoak izan, azkenean ekoizpenera bidaltzen den irudiak ahalik eta txikiena izan behar du eta ez du garapeneko menpekotasunik eduki behar. Hori eginez gero, beharrezko kodea soilik bidaliko dela eta balizko erasoen kopurua (hau da, erasoaren azalera) minimizatuko dela bermatzen da, eta, hori lor daiteke menpekotasun guztiak lehenik instalatuz eta azkenean `npm ci --production` exekutatuz, beti ere etapa anitzeko eraikuntza erabiltzen denean (ikusi buleta dedikatua)\n\n**Bestela:** npm segurtasun arau hauste ezagun asko garapen paketeen barruan aurkitu izan dira (adibidez, [eslint-scope](https://eslint.org/blog/2018/07/postmortem-for-malicious-package-publishes))\n\n🔗 Informazio gehiago: [ezabatu garapen menpekotasunak](./sections/docker/install-for-production.basque.md)\n\n<br /><br /><br />\n\n## ![✔] 8.6. Itzali arazorik gabe eta dotore\n\n**TL;PL:** kudeatu prozesuaren SIGTERM gertaera eta garbitu lehendik dauden konexio eta baliabide guztiak. Hori etengabeko eskaerei erantzutean egin behar da. Dockerized exekutatzen den bitartean edukiontziak ixtea ez da arraroa, baizik eta ohiko lanaren zati gisa maiz gertatzen den zerbait. Hori lortzeko ondo pentsatutako kodea prestatu beharra dago hainbat elementu koordinatuz: karga orekatzailea, mantentze konexioak, HTTP zerbitzaria eta beste baliabide batzuk\n\n**Bestela:** berehala hiltzeak etsita dauden milaka erabiltzaileri ez erantzutea ekarriko du\n\n🔗 [**Informazio gehiago: itzalaldi dotorea**](./sections/docker/graceful-shutdown.basque.md)\n\n<br /><br /><br />\n\n## ![✔] 8.7. Ezarri memoria mugak Docker eta v8 erabiliz\n\n**TL;PL:** konfiguratu beti memoria muga bai Docker bai JavaScript exekuzio adierazgailak erabiliz. Dockerren muga beharrezkoa da edukiontzien kokapena erabakitzeko; --v8ren bandera max-old-space beharrezkoa da GC garaiz abiarazteko eta memoria erabiltzea saihesteko. Praktikan, ezarri v8rren espazio memoria zaharra edukiontziaren muga baino apur bat txikiagoa izan dadin\n\n**Bestela:** Dockerren definizioa beharrezkoa da eskalatutako erabakiak burutzeko eta beste herritarrak gosez hiltzea ekiditeko. V8rren mugak zehaztu gabe ere, edukiontziaren baliabideak erabiliko ditu. Argibide espliziturik gabe, baliabideen %50-60a erabiltzean huts egiten du\n\n🔗 [**Informazio gehiago: ezarri memoria mugak Docker erabiliz soilik**](./sections/docker/memory-limit.basque.md)\n\n<br /><br /><br />\n\n## ![✔] 8.8. Baliatu cachea konpilazio denbora murrizteko\n\n**TL;PL:** Dockerren irudi osoa cache-tik berreraikitzea ia berehalakoa izan daiteke, zuzen eginez gero. Eguneratu ez diren argibideek Dockerfile fitxategiaren goialdean egon behar dute, eta etengabe aldatzen ari direnek (aplikazioaren kodea, esate baterako) beheko aldean egon behar dute\n\n**Bestela:** Docker eraikitzeak oso luze jo dezake eta baliabide asko kontsumituko ditu, nahiz eta aldaketa txikiak egin\n\n🔗 [**Informazio gehiago: baliatu cachea konpilazio denborak murrizteko**](./sections/docker/use-cache-for-shorter-build-time.basque.md)\n\n<br /><br /><br />\n\n## ![✔] 8.9. Erabili irudiaren erreferentzia esplizitua, saihestu \"azken\" (`latest`) etiketa\n\n**TL;PL:** zehaztu irudi laburpen esplizitu bat edo etiketa baten bertsioa, inoiz ez aipatu `latest`. Garatzaileek sarritan uste izaten dute, `latest` adieraziz gero, biltegiko azken irudia eskuratuko dutela, baina ez da horrela. Laburpena erabiltzeak zerbitzuaren instantzia guztiek kode bera exekutatuko dutela bermatzen du\n\nGainera, irudi etiketa bat aipatzen bada, oinarrizko irudia aldatu egin daiteke, ez baitago irudi etiketekin fidatzerik instalazio determinista bat egiteko orduan. Horren ordez, instalazioa determinista izanez gero, SHA256 laburpena erabil daiteke irudi zehatza erreferentziatzeko\n\n**Bestela:** oinarrizko irudi baten bertsio berri bat erabiliz gero, aldaketa handiak gerta litezke produkzioan, horrek aplikazioaren nahigabeko portaera sortuz\n\n🔗 [**Informazio gehiago: ulertu irudi etiketak eta erabili \"azken\" (`latest`) etiketa kontu handiz**](./sections/docker/image-tags.basque.md)\n\n<br /><br /><br />\n\n## ![✔] 8.10. Hobetsi Docker oinarrizko irudi txikiagoak\n\n**TL;PL:** irudi handiek ahultasun gehiago izateko arriskua handitu eta baliabideen kontsumoa areagotzen dute. Docker irudi arinagoak erabiltzeak, Slim eta Alpine Linux aldaerak adibidez, arazo hori arindu egiten du\n\n**Bestela:** batetik, denbora gehiago beharko da irudiak eraiki, txertatu eta ateratzeko; bestetik, erabiltzaile maltzurrek eraso bektore ezezagunak erabil ditzakete; eta, azkenik, baliabide gehiago beharko dira\n\n🔗 [**Informazio gehiago: hobetsi irudi txikiagoak**](./sections/docker/smaller_base_images.basque.md)\n\n<br /><br /><br />\n\n## ![✔] 8.11. Garbitu eraikitze faseko sekretuak, saihestu sekretuak argudioetan\n\n**TL;PL:** saihestu Dockerren konpilazio inguruneko sekretuak agerian geratzea. Docker irudi bat IE bezalako ingurune anitzetan eta ekoizpena bezain garbituta ez dauden erregistroetan partekatzen da normalean. Adibide tipikoa npm giltza (tokena) da, normalean dockerfile fitxategi batera pasatzen dena argumentu gisa. Giltza hori irudiaren barruan geratzen da denbora luzez beharrezkoa izateari utzi ondoren ere, eta erasotzaileari npm erregistro pribatura sartzeko aukera ematen dio. Hori ekidin daiteke sekretua `.npmrc` bezalako fitxategi batean kopiatuz, eta, ondoren, sekretu hori kenduz etapa anitzeko eraikuntza bat erabiliz (kontuz, eraikitze historia ere ezabatu beharko litzateke) edo bat ere aztarnarik uzten dituen Docker build-kit funtzio sekretua erabiliz\n\n**Bestela:** IE eta docker erregistroan sartzeko aukera duten guztiek erakundearen sekretu preziatuak ere eskuratzeko aukera izango dute onura gehigarri gisa\n\n🔗 [**Informazio gehiago: garbitu eraikitze faseko sekretuak**](./sections/docker/avoid-build-time-secrets.basque.md)\n\n<br /><br /><br />\n\n## ![✔] 8.12. Eskaneatu ahultasun geruza anitzeko irudiak\n\n**TL;PL:** kode menpekotasunen ahultasunak egiaztatzeaz gain, eskaneatu ekoizpenera bidalitako azken irudia ere. Dockerren irudien eskanerrek kodeen menpekotasunak egiaztatzen dituzte, baina baita sistema eragilearen binarioak ere. E2E segurtasun eskaneatze horrek eremu handiago bat hartzen du eta egiaztatzen du inongo erabiltzaile maltzurrak ez duela maltzurkeriatik egin eraikitze aldian zerbait injektatuz. Ondorioz, hau exekutatzea gomendatzen da hedapenaren aurreko azken urrats gisa. Mordoska bat eskaner doako eta komertzial dago CI / CD pluginak ere eskaintzen dituztenak\n\n**Bestela:** baliteke zure kodeak ahultasunik ez izatea. Hala ere, baliteke oraindik ere hackeatua izatea, aplikazioek normalean erabiltzen dituzten sistema eragilearen mailako binarioen bertsioak ahultasunak dituelako (adibidez, OpenSSL, TarBall)\n\n🔗 [**Informazio gehiago: Docker praktika arruntak**](./sections/docker/scan-images.basque.md)\n\n<br /><br /><br />\n\n## ![✔] 8.13 Garbitu NODE_MODULE cachea\n\n**TL;PL:** menpekotasunak edukiontzi batean instalatu ondoren, kendu bertako cachea. Ez du inolako zentzurik etorkizuneko instalazio azkarragoetarako menpekotasunak bikoizteak, ez baita beste instalaziorik egingo: Dockeren irudiak aldaezinak dira. Kode lerro bakarra erabiliz dozenaka MB aurrezten dira (normalean, irudiaren tamainaren % 10-50)\n\n**Bestela:** ekoizpenera bidaliko den irudiak % 30 gehiago pisatuko du, inoiz erabiliko ez diren fitxategiak direla eta\n\n🔗 [**Informazio gehiago: garbitu NODE_MODULE cachea**](./sections/docker/clean-cache.basque.md)\n\n<br /><br /><br />\n\n## ![✔] 8.14. Dockeren praktika generikoak\n\n**TL;PL:** hemen duzu Node.jsrekin zuzenean loturarik ez duen Docker aholkuen bilduma. Ez dago alderik Noderen eta beste edozein lengoaiaren inplementazioen artean. Egin klik “Informazio gehiago” botoian\n\n🔗 [**Informazio gehiago: Dockeren praktika generikoak**](./sections/docker/generic-tips.basque.md)\n\n<br/><br /><br />\n\n## ![✔] 8.15. Garbitu zure Dockerfile fitxategia Linterra erabiliz\n\n**TL;PL:** Linterra erabiliz zure Dockerfile fitxategia garbitzea urrats garrantzitsua da haren barruan praktika onak errespetatzen ez dituzten arazoak identifikatzeko. Docker garbitzaile (linter) espezializatu bat erabiliz errendimendu eta segurtasun hobekuntzak erraz atzematen dira, alferrikako ordu ugari aurreztea edo produkzio kodean segurtasun arazoak murriztea lortuz\n\n**Bestela:** okerrez, Dockerfile fitxategiaren sortzaileak nagusi (root) bat utzi zuen produkzio erabiltzaile moduan, eta jatorri ezezaguneko biltegi irudi bat ere erabili zuen. Hori liner soil batekin ekidin liteke.\n\n🔗 [**Informazio gehiago: garbitu zure Dockerfile fitxategia**](./sections/docker/lint-dockerfile.basque.md)\n\n<br/><br /><br />\n\n<p align=\"right\"><a href=\"#edukien-aurkibidea\">⬆ Itzuli hasierara</a></p>\n\n# Mugarriak\n\nGida hau mantentzeko eta eguneratuta egoteko, jarraibideak eta praktika onak eguneratzen eta hobetzen ari gara etengabe komunitatearen laguntzarekin. Proiektu honetan lagundu nahi baduzu, jarraitu gure [mugarriak](https://github.com/goldbergyoni/nodebestpractices/milestones) jarrai sartu lantaldeetan\n\n<br/>\n\n## Itzulpenak\n\nKomunitatearen ekarpena dira hemengo itzulpen guztiak eman. Oso pozik hartuko genituzke zure itzulpenak, bai dagoeneko eginda dauden testuenak zein egiten ari garen eta egingo ditugunenak\n\n### Amaitutako itzulpenak\n\n- ![BR](./assets/flags/BR.png) [Brasilgo portugalera](./README.brazilian-portuguese.md) - [Marcelo Melo](https://github.com/marcelosdm)-ren eskutik\n- ![CN](./assets/flags/CN.png) [Txinera](./README.chinese.md) - [Matt Jin](https://github.com/mattjin)-ren eskutik\n- ![RU](./assets/flags/RU.png) [Errusiera](./README.russian.md) - [Alex Ivanov](https://github.com/contributorpw)-ren eskutik\n- ![PL](./assets/flags/PL.png) [Poloniera](./README.polish.md) - [Michal Biesiada](https://github.com/mbiesiad)-ren eskutik\n- ![EU](./assets/flags/EU.png) [Euskara](README.basque.md) - [Ane Diaz de Tuesta](https://github.com/anediaz) & Joxefe Diaz de Tuestaren eskutik\n\n### Aribidean dauden itzulpenak\n\n- ![FR](./assets/flags/FR.png) [Frantsesa](https://github.com/gaspaonrocks/nodebestpractices/blob/french-translation/README.french.md) ([Eztabaidan](https://github.com/goldbergyoni/nodebestpractices/issues/129))\n- ![HE](./assets/flags/HE.png) Hebrearra ([Eztabaidan](https://github.com/goldbergyoni/nodebestpractices/issues/156))\n- ![KR](./assets/flags/KR.png) [Koreera](README.korean.md) - [Sangbeom Han](https://github.com/uronly14me)-ren eskutik ([Eztabaidan](https://github.com/goldbergyoni/nodebestpractices/issues/94))\n- ![ES](./assets/flags/ES.png) [Gaztelera](https://github.com/goldbergyoni/nodebestpractices/blob/spanish-translation/README.spanish.md) ([Eztabaidan](https://github.com/goldbergyoni/nodebestpractices/issues/95))\n- ![TR](./assets/flags/TR.png) Turkiera ([Eztabaidan](https://github.com/goldbergyoni/nodebestpractices/issues/139))\n\n<br/><br/>\n\n## Zuzendaritza Batzordea\n\nEzagutu Zuzendaritza Batzordeko kideak, proiektuaren orientazioa eta etorkizunerako jarraibideak emateko elkarlanean dirautenak. Gainera, batzordeko kide bakoitza gure [Github projects](https://github.com/goldbergyoni/nodebestpractices/projects)-pean dagoen proiektu baten buru da\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/yoni.png\"/>\n\n[Yoni Goldberg](https://github.com/goldbergyoni)\n<a href=\"https://twitter.com/goldbergyoni\"><img src=\"assets/images/twitter-s.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://goldbergyoni.com\"><img src=\"assets/images/www.png\" width=\"16\" height=\"16\"></img></a>\n\nEEBB-etan, Europan eta Israelen, bezeroekin tamaina handiko Node.js aplikazioen sorkuntzan lan egiten duen Node.jsren inguruko aholkulari independentea. Gida honetako praktika on asko lehenengo aldiz [goldbergyoni.com](https://goldbergyoni.com)-en argitaratuak izan ziren. Jar zaitez Yoni-rekin kontatuan [@goldbergyoni](https://github.com/goldbergyoni)-en edo [me@goldbergyoni.com](mailto:me@goldbergyoni.com) helbidearen bidez\n\n<br/>\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/bruno.png\"/>\n\n[Bruno Scheufler](https://github.com/BrunoScheufler)\n<a href=\"https://brunoscheufler.com/\"><img src=\"assets/images/www.png\" width=\"16\" height=\"16\"></img></a>\n\n💻 full-stack web ingeniaria, Node.js eta GraphQL zalea\n\n<br/>\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/kyle.png\"/>\n\n[Kyle Martin](https://github.com/js-kyle)\n<a href=\"https://twitter.com/kylemartin_93\"><img src=\"assets/images/twitter-s.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://www.linkedin.com/in/kylemartinnz\"><img src=\"assets/images/linkedin.png\" width=\"16\" height=\"16\"></img></a>\n\nFull Stack Garatzailea eta Zelanda Berrian lan egiten duen Site Reliability Ingeniaria, web aplikazioen segurtasutasunean eta egituraketan, eta tamaina handiko Node.js aplikazioen sorkuntzan interesa du\n\n<br/>\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/kevyn.png\"/>\n\n[Kevyn Bruyere](https://github.com/kevynb)\n<a href=\"https://www.linkedin.com/in/kevynbruyere/\"><img src=\"assets/images/linkedin.png\" width=\"16\" height=\"16\"></img></a>\n\nFull-stack garatzaile independentea, Ops eta automatizazioan zaletua dena\n\n<br/>\n\n### Steering Committee Emeriti\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/sagir.png\"/>\n\n[Sagir Khan](https://github.com/sagirk)\n<a href=\"https://twitter.com/sagir_k\"><img src=\"assets/images/twitter-s.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://linkedin.com/in/sagirk\"><img src=\"assets/images/linkedin.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://sagirk.com\"><img src=\"assets/images/www.png\" width=\"16\" height=\"16\"></img></a>\n\nJavascripten eta bere ekosisteman (React, Node.js, TypeScript, GraphQL, MongoDB, eta sistemako JS/JSON edozein geruzatan eragin dezakeen edozer) aditua, munduko marka ezagunenetarako produktuak sortzen ditu web plataforma erabiliaz. Node.js Fundazioko Banakako Kidea\n\n<br/>\n\n## Languntzaileak\n\nMila esker gure laguntzaile guztiei! 🙏\n\nGure kolaboratzaileak proiektuan maiz parte hartzen duten kideak dira, praktika onak proposatuz, gaien zerrenda ordenatuz, parte hartze eskaerak (pull request) aztertuz... Milaka pertsona Node.js aplikazioak hobeto sortzen laguntzen interesa baduzu, irakur ezazu gure [kolaboratzaile gida](./.operations/CONTRIBUTING.md) 🎉\n\n| <a href=\"https://github.com/idori\" target=\"_blank\"><img src=\"assets/images/members/ido.png\" width=\"75\" height=\"75\"/></a> | <a href=\"https://github.com/TheHollidayInn\" target=\"_blank\"><img src=\"assets/images/members/keith.png\" width=\"75\" height=\"75\"/></a> |\n| :---------------------------------------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------------------------------------------------: |\n|                                 [Ido Richter (Fundatzailea)](https://github.com/idori)                                  |                                        [Keith Holliday](https://github.com/TheHollidayInn)                                         |\n\n### Emeriti Kolaboratzailea\n\n| <a href=\"https://github.com/refack\" target=\"_blank\"><img src=\"assets/images/members/refael.png\" width=\"50\" height=\"50\"/></a> |\n| :-------------------------------------------------------------------------------------------------------------------------: |\n|                                        [Refael Ackermann](https://github.com/refack)                                        |\n\n<br/>\n\n## Parte hartu\n\nOpen sourcen parte hartu nahi baduzu, hemen duzu aukera! Gehiago jakiteko, irakurri [parte hartu dokumentua](.operations/CONTRIBUTING.md)\n\n## Parte hartzaileak ✨\n\nEskerrik asko proiektu honetan parte hartu duten pertsona zoragarriei!\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kevinrambaud\"><img src=\"https://avatars1.githubusercontent.com/u/7501477?v=4\" width=\"100px;\" alt=\"Kevin Rambaud\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kevin Rambaud</b></sub></a><br /><a href=\"#content-kevinrambaud\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mfine15\"><img src=\"https://avatars1.githubusercontent.com/u/1286554?v=4\" width=\"100px;\" alt=\"Michael Fine\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Michael Fine</b></sub></a><br /><a href=\"#content-mfine15\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://squgeim.github.io\"><img src=\"https://avatars0.githubusercontent.com/u/4996818?v=4\" width=\"100px;\" alt=\"Shreya Dahal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shreya Dahal</b></sub></a><br /><a href=\"#content-squgeim\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://matheusrocha89.com\"><img src=\"https://avatars1.githubusercontent.com/u/3718366?v=4\" width=\"100px;\" alt=\"Matheus Cruz Rocha\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Matheus Cruz Rocha</b></sub></a><br /><a href=\"#content-matheusrocha89\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://bityog.github.io/Portfolio/\"><img src=\"https://avatars2.githubusercontent.com/u/28219178?v=4\" width=\"100px;\" alt=\"Yog Mehta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yog Mehta</b></sub></a><br /><a href=\"#content-BitYog\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://kudapara.co.zw\"><img src=\"https://avatars3.githubusercontent.com/u/13519184?v=4\" width=\"100px;\" alt=\"Kudakwashe Paradzayi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kudakwashe Paradzayi</b></sub></a><br /><a href=\"#content-kudapara\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.t1st3.com/\"><img src=\"https://avatars1.githubusercontent.com/u/1469638?v=4\" width=\"100px;\" alt=\"t1st3\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>t1st3</b></sub></a><br /><a href=\"#content-t1st3\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mulijordan1976\"><img src=\"https://avatars0.githubusercontent.com/u/33382022?v=4\" width=\"100px;\" alt=\"mulijordan1976\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>mulijordan1976</b></sub></a><br /><a href=\"#content-mulijordan1976\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/matchai\"><img src=\"https://avatars0.githubusercontent.com/u/4658208?v=4\" width=\"100px;\" alt=\"Matan Kushner\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Matan Kushner</b></sub></a><br /><a href=\"#content-matchai\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://fabiothiroki.github.io\"><img src=\"https://avatars2.githubusercontent.com/u/670057?v=4\" width=\"100px;\" alt=\"Fabio Hiroki\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Fabio Hiroki</b></sub></a><br /><a href=\"#content-fabiothiroki\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://james.sumners.info/\"><img src=\"https://avatars1.githubusercontent.com/u/321201?v=4\" width=\"100px;\" alt=\"James Sumners\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>James Sumners</b></sub></a><br /><a href=\"#content-jsumners\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/_DanGamble\"><img src=\"https://avatars2.githubusercontent.com/u/7152041?v=4\" width=\"100px;\" alt=\"Dan Gamble\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dan Gamble</b></sub></a><br /><a href=\"#content-dan-gamble\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/trainorpj\"><img src=\"https://avatars3.githubusercontent.com/u/13276704?v=4\" width=\"100px;\" alt=\"PJ Trainor\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>PJ Trainor</b></sub></a><br /><a href=\"#content-trainorpj\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/reod\"><img src=\"https://avatars0.githubusercontent.com/u/3164299?v=4\" width=\"100px;\" alt=\"Remek Ambroziak\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Remek Ambroziak</b></sub></a><br /><a href=\"#content-reod\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://ca.non.co.il\"><img src=\"https://avatars0.githubusercontent.com/u/1829789?v=4\" width=\"100px;\" alt=\"Yoni Jah\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yoni Jah</b></sub></a><br /><a href=\"#content-yonjah\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/hazolsky\"><img src=\"https://avatars1.githubusercontent.com/u/1270790?v=4\" width=\"100px;\" alt=\"Misha Khokhlov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Misha Khokhlov</b></sub></a><br /><a href=\"#content-hazolsky\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://plus.google.com/+ЕвгенийОрехов/\"><img src=\"https://avatars3.githubusercontent.com/u/8045060?v=4\" width=\"100px;\" alt=\"Evgeny Orekhov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Evgeny Orekhov</b></sub></a><br /><a href=\"#content-EvgenyOrekhov\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/gediminasml\"><img src=\"https://avatars3.githubusercontent.com/u/19854105?v=4\" width=\"100px;\" alt=\"-\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>-</b></sub></a><br /><a href=\"#content-gediminasml\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://hisaac.net\"><img src=\"https://avatars3.githubusercontent.com/u/923876?v=4\" width=\"100px;\" alt=\"Isaac Halvorson\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Isaac Halvorson</b></sub></a><br /><a href=\"#content-hisaac\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.vedrankaracic.com\"><img src=\"https://avatars3.githubusercontent.com/u/2808092?v=4\" width=\"100px;\" alt=\"Vedran Karačić\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vedran Karačić</b></sub></a><br /><a href=\"#content-vkaracic\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/lallenlowe\"><img src=\"https://avatars3.githubusercontent.com/u/10761165?v=4\" width=\"100px;\" alt=\"lallenlowe\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>lallenlowe</b></sub></a><br /><a href=\"#content-lallenlowe\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/nwwells\"><img src=\"https://avatars2.githubusercontent.com/u/1039473?v=4\" width=\"100px;\" alt=\"Nathan Wells\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nathan Wells</b></sub></a><br /><a href=\"#content-nwwells\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/paulovitin\"><img src=\"https://avatars0.githubusercontent.com/u/125503?v=4\" width=\"100px;\" alt=\"Paulo Reis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Paulo Reis</b></sub></a><br /><a href=\"#content-paulovitin\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://snap.simpego.ch\"><img src=\"https://avatars2.githubusercontent.com/u/1989646?v=4\" width=\"100px;\" alt=\"syzer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>syzer</b></sub></a><br /><a href=\"#content-syzer\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://sancho.dev\"><img src=\"https://avatars0.githubusercontent.com/u/3763599?v=4\" width=\"100px;\" alt=\"David Sancho\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>David Sancho</b></sub></a><br /><a href=\"#content-davesnx\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://apiforge.it\"><img src=\"https://avatars0.githubusercontent.com/u/4929965?v=4\" width=\"100px;\" alt=\"Robert Manolea\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Robert Manolea</b></sub></a><br /><a href=\"#content-pupix\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://jumptoglide.com\"><img src=\"https://avatars2.githubusercontent.com/u/708395?v=4\" width=\"100px;\" alt=\"Xavier Ho\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Xavier Ho</b></sub></a><br /><a href=\"#content-spaxe\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.ocular-rhythm.io\"><img src=\"https://avatars0.githubusercontent.com/u/2738518?v=4\" width=\"100px;\" alt=\"Aaron\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Aaron</b></sub></a><br /><a href=\"#content-ocularrhythm\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://septa97.me\"><img src=\"https://avatars2.githubusercontent.com/u/13742634?v=4\" width=\"100px;\" alt=\"Jan Charles Maghirang Adona\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jan Charles Maghirang Adona</b></sub></a><br /><a href=\"#content-septa97\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.cakeresume.com/allenfang\"><img src=\"https://avatars2.githubusercontent.com/u/5351390?v=4\" width=\"100px;\" alt=\"Allen\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Allen</b></sub></a><br /><a href=\"#content-AllenFang\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/leonardovillela\"><img src=\"https://avatars3.githubusercontent.com/u/8650543?v=4\" width=\"100px;\" alt=\"Leonardo Villela\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Leonardo Villela</b></sub></a><br /><a href=\"#content-leonardovillela\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://michalzalecki.com\"><img src=\"https://avatars1.githubusercontent.com/u/3136577?v=4\" width=\"100px;\" alt=\"Michał Załęcki\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Michał Załęcki</b></sub></a><br /><a href=\"#content-MichalZalecki\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.wealthbar.com\"><img src=\"https://avatars1.githubusercontent.com/u/156449?v=4\" width=\"100px;\" alt=\"Chris Nicola\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Chris Nicola</b></sub></a><br /><a href=\"#content-chrisnicola\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/aecorredor\"><img src=\"https://avatars3.githubusercontent.com/u/9114987?v=4\" width=\"100px;\" alt=\"Alejandro Corredor\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alejandro Corredor</b></sub></a><br /><a href=\"#content-aecorredor\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/cwar\"><img src=\"https://avatars3.githubusercontent.com/u/272843?v=4\" width=\"100px;\" alt=\"cwar\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>cwar</b></sub></a><br /><a href=\"#content-cwar\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/keyfoxth\"><img src=\"https://avatars3.githubusercontent.com/u/10647132?v=4\" width=\"100px;\" alt=\"Yuwei\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yuwei</b></sub></a><br /><a href=\"#content-keyfoxth\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://bigcodenerd.org\"><img src=\"https://avatars3.githubusercontent.com/u/10895594?v=4\" width=\"100px;\" alt=\"Utkarsh Bhatt\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Utkarsh Bhatt</b></sub></a><br /><a href=\"#content-utkarshbhatt12\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/duartemendes\"><img src=\"https://avatars2.githubusercontent.com/u/12852058?v=4\" width=\"100px;\" alt=\"Duarte Mendes\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Duarte Mendes</b></sub></a><br /><a href=\"#content-duartemendes\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://jasonkim.ca\"><img src=\"https://avatars2.githubusercontent.com/u/103456?v=4\" width=\"100px;\" alt=\"Jason Kim\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jason Kim</b></sub></a><br /><a href=\"#content-serv\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Max101\"><img src=\"https://avatars2.githubusercontent.com/u/2124249?v=4\" width=\"100px;\" alt=\"Mitja O.\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Mitja O.</b></sub></a><br /><a href=\"#content-Max101\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://sandromiguel.com\"><img src=\"https://avatars0.githubusercontent.com/u/6423157?v=4\" width=\"100px;\" alt=\"Sandro Miguel Marques\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sandro Miguel Marques</b></sub></a><br /><a href=\"#content-SandroMiguel\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/GabeKuslansky\"><img src=\"https://avatars3.githubusercontent.com/u/9855482?v=4\" width=\"100px;\" alt=\"Gabe\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Gabe</b></sub></a><br /><a href=\"#content-GabeKuslansky\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://ripper234.com/\"><img src=\"https://avatars1.githubusercontent.com/u/172282?v=4\" width=\"100px;\" alt=\"Ron Gross\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ron Gross</b></sub></a><br /><a href=\"#content-ripper234\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.thecodebarbarian.com\"><img src=\"https://avatars2.githubusercontent.com/u/1620265?v=4\" width=\"100px;\" alt=\"Valeri Karpov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Valeri Karpov</b></sub></a><br /><a href=\"#content-vkarpov15\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://sergiobernal.com\"><img src=\"https://avatars3.githubusercontent.com/u/20087388?v=4\" width=\"100px;\" alt=\"Sergio Bernal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sergio Bernal</b></sub></a><br /><a href=\"#content-imsergiobernal\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ntelkedzhiev\"><img src=\"https://avatars2.githubusercontent.com/u/7332371?v=4\" width=\"100px;\" alt=\"Nikola Telkedzhiev\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nikola Telkedzhiev</b></sub></a><br /><a href=\"#content-ntelkedzhiev\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/vitordagamagodoy\"><img src=\"https://avatars0.githubusercontent.com/u/26370059?v=4\" width=\"100px;\" alt=\"Vitor Godoy\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vitor Godoy</b></sub></a><br /><a href=\"#content-vitordagamagodoy\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.manishsaraan.com/\"><img src=\"https://avatars2.githubusercontent.com/u/19797340?v=4\" width=\"100px;\" alt=\"Manish Saraan\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Manish Saraan</b></sub></a><br /><a href=\"#content-manishsaraan\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/uronly14me\"><img src=\"https://avatars2.githubusercontent.com/u/5186814?v=4\" width=\"100px;\" alt=\"Sangbeom Han\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sangbeom Han</b></sub></a><br /><a href=\"#content-uronly14me\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://blackmatch.github.io\"><img src=\"https://avatars3.githubusercontent.com/u/12443954?v=4\" width=\"100px;\" alt=\"blackmatch\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>blackmatch</b></sub></a><br /><a href=\"#content-blackmatch\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://simmsreeve.com\"><img src=\"https://avatars3.githubusercontent.com/u/5173131?v=4\" width=\"100px;\" alt=\"Joe Reeve\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Joe Reeve</b></sub></a><br /><a href=\"#content-ISNIT0\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/BusbyActual\"><img src=\"https://avatars2.githubusercontent.com/u/14985016?v=4\" width=\"100px;\" alt=\"Ryan Busby\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ryan Busby</b></sub></a><br /><a href=\"#content-BusbyActual\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://jsdecorator.com\"><img src=\"https://avatars3.githubusercontent.com/u/4482199?v=4\" width=\"100px;\" alt=\"Iman Mohamadi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Iman Mohamadi</b></sub></a><br /><a href=\"#content-ImanMh\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/HeeL\"><img src=\"https://avatars1.githubusercontent.com/u/287769?v=4\" width=\"100px;\" alt=\"Sergii Paryzhskyi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sergii Paryzhskyi</b></sub></a><br /><a href=\"#content-HeeL\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kapilepatel\"><img src=\"https://avatars3.githubusercontent.com/u/25738473?v=4\" width=\"100px;\" alt=\"Kapil Patel\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kapil Patel</b></sub></a><br /><a href=\"#content-kapilepatel\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/justjavac\"><img src=\"https://avatars1.githubusercontent.com/u/359395?v=4\" width=\"100px;\" alt=\"迷渡\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>迷渡</b></sub></a><br /><a href=\"#content-justjavac\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/hozefaj\"><img src=\"https://avatars1.githubusercontent.com/u/2084833?v=4\" width=\"100px;\" alt=\"Hozefa\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Hozefa</b></sub></a><br /><a href=\"#content-hozefaj\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/el-ethan\"><img src=\"https://avatars3.githubusercontent.com/u/10249884?v=4\" width=\"100px;\" alt=\"Ethan\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ethan</b></sub></a><br /><a href=\"#content-el-ethan\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/milkdeliver\"><img src=\"https://avatars2.githubusercontent.com/u/3108407?v=4\" width=\"100px;\" alt=\"Sam\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sam</b></sub></a><br /><a href=\"#content-milkdeliver\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ArlindXh\"><img src=\"https://avatars0.githubusercontent.com/u/19508764?v=4\" width=\"100px;\" alt=\"Arlind\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Arlind</b></sub></a><br /><a href=\"#content-ArlindXh\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ttous\"><img src=\"https://avatars0.githubusercontent.com/u/19815440?v=4\" width=\"100px;\" alt=\"Teddy Toussaint\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Teddy Toussaint</b></sub></a><br /><a href=\"#content-ttous\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://ardern.io\"><img src=\"https://avatars2.githubusercontent.com/u/2419690?v=4\" width=\"100px;\" alt=\"Lewis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Lewis</b></sub></a><br /><a href=\"#content-LewisArdern\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://gabriellidenor.com/\"><img src=\"https://avatars2.githubusercontent.com/u/765963?v=4\" width=\"100px;\" alt=\"Gabriel Lidenor \"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Gabriel Lidenor </b></sub></a><br /><a href=\"#content-GabrielLidenor\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/animir\"><img src=\"https://avatars3.githubusercontent.com/u/4623196?v=4\" width=\"100px;\" alt=\"Roman\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Roman</b></sub></a><br /><a href=\"#content-animir\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Francozeira\"><img src=\"https://avatars1.githubusercontent.com/u/47419763?v=4\" width=\"100px;\" alt=\"Francozeira\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Francozeira</b></sub></a><br /><a href=\"#content-Francozeira\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/invvard\"><img src=\"https://avatars0.githubusercontent.com/u/7305493?v=4\" width=\"100px;\" alt=\"Invvard\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Invvard</b></sub></a><br /><a href=\"#content-Invvard\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://romulogarofalo.github.io/\"><img src=\"https://avatars1.githubusercontent.com/u/18492592?v=4\" width=\"100px;\" alt=\"Rômulo Garofalo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Rômulo Garofalo</b></sub></a><br /><a href=\"#content-romulogarofalo\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://thoqbk.github.io/\"><img src=\"https://avatars0.githubusercontent.com/u/1491103?v=4\" width=\"100px;\" alt=\"Tho Q Luong\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tho Q Luong</b></sub></a><br /><a href=\"#content-thoqbk\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Qeneke\"><img src=\"https://avatars2.githubusercontent.com/u/20271568?v=4\" width=\"100px;\" alt=\"Burak Shen\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Burak Shen</b></sub></a><br /><a href=\"#content-Qeneke\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.happy-css.com\"><img src=\"https://avatars0.githubusercontent.com/u/2950505?v=4\" width=\"100px;\" alt=\"Martin Muzatko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Martin Muzatko</b></sub></a><br /><a href=\"#content-MartinMuzatko\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/autoboxer\"><img src=\"https://avatars3.githubusercontent.com/u/2757601?v=4\" width=\"100px;\" alt=\"Jared Collier\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jared Collier</b></sub></a><br /><a href=\"#content-autoboxer\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://hiltonmeyer.com\"><img src=\"https://avatars3.githubusercontent.com/u/4545860?v=4\" width=\"100px;\" alt=\"Hilton Meyer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Hilton Meyer</b></sub></a><br /><a href=\"#content-bikingbadger\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://kr.vuejs.org\"><img src=\"https://avatars0.githubusercontent.com/u/1451365?v=4\" width=\"100px;\" alt=\"ChangJoo Park(박창주)\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>ChangJoo Park(박창주)</b></sub></a><br /><a href=\"#content-ChangJoo-Park\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/MasahiroSakaguchi\"><img src=\"https://avatars0.githubusercontent.com/u/16427431?v=4\" width=\"100px;\" alt=\"Masahiro Sakaguchi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Masahiro Sakaguchi</b></sub></a><br /><a href=\"#content-MasahiroSakaguchi\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/TheHollidayInn\"><img src=\"https://avatars1.githubusercontent.com/u/1253400?v=4\" width=\"100px;\" alt=\"Keith Holliday\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Keith Holliday</b></sub></a><br /><a href=\"#content-TheHollidayInn\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.coreycleary.me\"><img src=\"https://avatars3.githubusercontent.com/u/1485356?v=4\" width=\"100px;\" alt=\"coreyc\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>coreyc</b></sub></a><br /><a href=\"#content-coreyc\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://maxcubing.wordpress.com\"><img src=\"https://avatars0.githubusercontent.com/u/8260834?v=4\" width=\"100px;\" alt=\"Maximilian Berkmann\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Maximilian Berkmann</b></sub></a><br /><a href=\"#content-Berkmann18\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/DouglasMV\"><img src=\"https://avatars3.githubusercontent.com/u/32845487?v=4\" width=\"100px;\" alt=\"Douglas Mariano Valero\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Douglas Mariano Valero</b></sub></a><br /><a href=\"#content-DouglasMV\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/marcelosdm\"><img src=\"https://avatars0.githubusercontent.com/u/18266600?v=4\" width=\"100px;\" alt=\"Marcelo Melo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Marcelo Melo</b></sub></a><br /><a href=\"#content-marcelosdm\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/mperk_\"><img src=\"https://avatars0.githubusercontent.com/u/3465794?v=4\" width=\"100px;\" alt=\"Mehmet Perk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Mehmet Perk</b></sub></a><br /><a href=\"#content-mperk\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ryanouyang\"><img src=\"https://avatars2.githubusercontent.com/u/360426?v=4\" width=\"100px;\" alt=\"ryan ouyang\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>ryan ouyang</b></sub></a><br /><a href=\"#content-ryanouyang\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/shabeer-mdy\"><img src=\"https://avatars0.githubusercontent.com/u/26842535?v=4\" width=\"100px;\" alt=\"Shabeer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shabeer</b></sub></a><br /><a href=\"#content-shabeer-mdy\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/halfzebra\"><img src=\"https://avatars1.githubusercontent.com/u/3983879?v=4\" width=\"100px;\" alt=\"Eduard Kyvenko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Eduard Kyvenko</b></sub></a><br /><a href=\"#content-halfzebra\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://deyvisonrocha.com\"><img src=\"https://avatars2.githubusercontent.com/u/686067?v=4\" width=\"100px;\" alt=\"Deyvison Rocha\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Deyvison Rocha</b></sub></a><br /><a href=\"#content-deyvisonrocha\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://twitter.com/georgemamer\"><img src=\"https://avatars1.githubusercontent.com/u/20108934?v=4\" width=\"100px;\" alt=\"George Mamer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>George Mamer</b></sub></a><br /><a href=\"#content-georgem3\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/leimonio\"><img src=\"https://avatars0.githubusercontent.com/u/1969742?v=4\" width=\"100px;\" alt=\"Konstantinos Leimonis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Konstantinos Leimonis</b></sub></a><br /><a href=\"#content-leimonio\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Zybax\"><img src=\"https://avatars3.githubusercontent.com/u/22094453?v=4\" width=\"100px;\" alt=\"Oliver Lluberes\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Oliver Lluberes</b></sub></a><br /><a href=\"#translation-Zybax\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://stackoverflow.com/story/tiendq\"><img src=\"https://avatars2.githubusercontent.com/u/815910?v=4\" width=\"100px;\" alt=\"Tien Do\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tien Do</b></sub></a><br /><a href=\"#content-tiendq\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://singh1114.github.io/\"><img src=\"https://avatars0.githubusercontent.com/u/11356398?v=4\" width=\"100px;\" alt=\"Ranvir Singh\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ranvir Singh</b></sub></a><br /><a href=\"#content-singh1114\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/collierrgbsitisfise\"><img src=\"https://avatars3.githubusercontent.com/u/13496126?v=4\" width=\"100px;\" alt=\"Vadim Nicolaev\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vadim Nicolaev</b></sub></a><br /><a href=\"#content-collierrgbsitisfise\" title=\"Content\">🖋</a> <a href=\"#translation-collierrgbsitisfise\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/germangamboa95\"><img src=\"https://avatars3.githubusercontent.com/u/28633849?v=4\" width=\"100px;\" alt=\"German Gamboa Gonzalez\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>German Gamboa Gonzalez</b></sub></a><br /><a href=\"#content-germangamboa95\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/AbdelrahmanHafez\"><img src=\"https://avatars3.githubusercontent.com/u/19984935?v=4\" width=\"100px;\" alt=\"Hafez\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Hafez</b></sub></a><br /><a href=\"#content-AbdelrahmanHafez\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://linkedin.com/in/chandiran-dmc\"><img src=\"https://avatars3.githubusercontent.com/u/42678579?v=4\" width=\"100px;\" alt=\"Chandiran\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Chandiran</b></sub></a><br /><a href=\"#content-chandiran-dmc\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/VinayaSathyanarayana\"><img src=\"https://avatars2.githubusercontent.com/u/16976677?v=4\" width=\"100px;\" alt=\"VinayaSathyanarayana\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>VinayaSathyanarayana</b></sub></a><br /><a href=\"#content-VinayaSathyanarayana\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.kimkern.de\"><img src=\"https://avatars1.githubusercontent.com/u/2671139?v=4\" width=\"100px;\" alt=\"Kim Kern\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kim Kern</b></sub></a><br /><a href=\"#content-kiwikern\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://kennethfreitas.github.io/\"><img src=\"https://avatars2.githubusercontent.com/u/55669043?v=4\" width=\"100px;\" alt=\"Kenneth Freitas\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kenneth Freitas</b></sub></a><br /><a href=\"#content-kennethfreitas\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/songe\"><img src=\"https://avatars2.githubusercontent.com/u/1531561?v=4\" width=\"100px;\" alt=\"songe\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>songe</b></sub></a><br /><a href=\"#content-songe\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://ksed.dev\"><img src=\"https://avatars1.githubusercontent.com/u/30693707?v=4\" width=\"100px;\" alt=\"Kirill Shekhovtsov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kirill Shekhovtsov</b></sub></a><br /><a href=\"#content-Ksedline\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/SerzN1\"><img src=\"https://avatars0.githubusercontent.com/u/2534649?v=4\" width=\"100px;\" alt=\"Serge\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Serge</b></sub></a><br /><a href=\"#content-SerzN1\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/keyrwinz\"><img src=\"https://avatars3.githubusercontent.com/u/21241761?v=4\" width=\"100px;\" alt=\"keyrwinz\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>keyrwinz</b></sub></a><br /><a href=\"#content-keyrwinz\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/nDmitry\"><img src=\"https://avatars0.githubusercontent.com/u/2134568?v=4\" width=\"100px;\" alt=\"Dmitry Nikitenko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dmitry Nikitenko</b></sub></a><br /><a href=\"#content-nDmitry\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://bushuai.cc\"><img src=\"https://avatars0.githubusercontent.com/u/1875256?v=4\" width=\"100px;\" alt=\"bushuai\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>bushuai</b></sub></a><br /><a href=\"https://github.com/goldbergyoni/nodebestpractices/pulls?q=is%3Apr+reviewed-by%3Abushuai\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#content-bushuai\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://stackoverflow.com/users/1348195/benjamin-gruenbaum\"><img src=\"https://avatars2.githubusercontent.com/u/1315533?v=4\" width=\"100px;\" alt=\"Benjamin Gruenbaum\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Benjamin Gruenbaum</b></sub></a><br /><a href=\"#content-benjamingr\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/byeze\"><img src=\"https://avatars1.githubusercontent.com/u/7424138?v=4\" width=\"100px;\" alt=\"Ezequiel\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ezequiel</b></sub></a><br /><a href=\"#translation-byeze\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/juaoose\"><img src=\"https://avatars3.githubusercontent.com/u/994594?v=4\" width=\"100px;\" alt=\"Juan José Rodríguez\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Juan José Rodríguez</b></sub></a><br /><a href=\"#translation-juaoose\" title=\"Translation\">🌍</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/OrBin\"><img src=\"https://avatars1.githubusercontent.com/u/6897234?v=4\" width=\"100px;\" alt=\"Or Bin\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Or Bin</b></sub></a><br /><a href=\"#content-OrBin\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/andreoav07\"><img src=\"https://avatars2.githubusercontent.com/u/508827?v=4\" width=\"100px;\" alt=\"Andreo Vieira\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Andreo Vieira</b></sub></a><br /><a href=\"#content-andreoav\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mikicho\"><img src=\"https://avatars1.githubusercontent.com/u/11459632?v=4\" width=\"100px;\" alt=\"Michael Solomon\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Michael Solomon</b></sub></a><br /><a href=\"#content-mikicho\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jimmycallin\"><img src=\"https://avatars0.githubusercontent.com/u/2225828?v=4\" width=\"100px;\" alt=\"Jimmy Callin\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jimmy Callin</b></sub></a><br /><a href=\"#content-jimmycallin\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/siddharthofficial/\"><img src=\"https://avatars2.githubusercontent.com/u/26025955?v=4\" width=\"100px;\" alt=\"Siddharth\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Siddharth</b></sub></a><br /><a href=\"#content-w01fS\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://ryansmith.tech/\"><img src=\"https://avatars0.githubusercontent.com/u/1578766?v=4\" width=\"100px;\" alt=\"Ryan Smith\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ryan Smith</b></sub></a><br /><a href=\"#content-ryan3E0\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://de.linkedin.com/in/tom-boettger\"><img src=\"https://avatars2.githubusercontent.com/u/49961674?v=4\" width=\"100px;\" alt=\"Tom Boettger\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tom Boettger</b></sub></a><br /><a href=\"#content-bttger\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jormaechea\"><img src=\"https://avatars3.githubusercontent.com/u/5612500?v=4\" width=\"100px;\" alt=\"Joaquín Ormaechea\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Joaquín Ormaechea</b></sub></a><br /><a href=\"#translation-jormaechea\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/dfrzuz\"><img src=\"https://avatars3.githubusercontent.com/u/71859096?v=4\" width=\"100px;\" alt=\"dfrzuz\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>dfrzuz</b></sub></a><br /><a href=\"#translation-dfrzuz\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/victor-homyakov\"><img src=\"https://avatars1.githubusercontent.com/u/121449?v=4\" width=\"100px;\" alt=\"Victor Homyakov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Victor Homyakov</b></sub></a><br /><a href=\"#content-victor-homyakov\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://joshuahemphill.com\"><img src=\"https://avatars3.githubusercontent.com/u/46608115?v=4\" width=\"100px;\" alt=\"Josh\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Josh</b></sub></a><br /><a href=\"#content-josh-hemphill\" title=\"Content\">🖋</a> <a href=\"#security-josh-hemphill\" title=\"Security\">🛡️</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/alec-francis\"><img src=\"https://avatars2.githubusercontent.com/u/32949882?v=4\" width=\"100px;\" alt=\"Alec Francis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alec Francis</b></sub></a><br /><a href=\"#content-alec-francis\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/arjun6610\"><img src=\"https://avatars1.githubusercontent.com/u/61268891?v=4\" width=\"100px;\" alt=\"arjun6610\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>arjun6610</b></sub></a><br /><a href=\"#content-arjun6610\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jan-osch\"><img src=\"https://avatars2.githubusercontent.com/u/11651780?v=4\" width=\"100px;\" alt=\"Jan Osch\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jan Osch</b></sub></a><br /><a href=\"#content-jan-osch\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/thiagotrs\"><img src=\"https://avatars2.githubusercontent.com/u/32005779?v=4\" width=\"100px;\" alt=\"Thiago Rotondo Sampaio\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Thiago Rotondo Sampaio</b></sub></a><br /><a href=\"#translation-thiagotrs\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Alexsey\"><img src=\"https://avatars0.githubusercontent.com/u/6392013?v=4\" width=\"100px;\" alt=\"Alexsey\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alexsey</b></sub></a><br /><a href=\"#content-Alexsey\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/13luismb\"><img src=\"https://avatars1.githubusercontent.com/u/32210483?v=4\" width=\"100px;\" alt=\"Luis A. Acurero\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Luis A. Acurero</b></sub></a><br /><a href=\"#translation-13luismb\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://lromano97.github.io/\"><img src=\"https://avatars1.githubusercontent.com/u/22394847?v=4\" width=\"100px;\" alt=\"Lucas Romano\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Lucas Romano</b></sub></a><br /><a href=\"#translation-lromano97\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/denisecase\"><img src=\"https://avatars0.githubusercontent.com/u/13016516?v=4\" width=\"100px;\" alt=\"Denise Case\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Denise Case</b></sub></a><br /><a href=\"#content-denisecase\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://stackoverflow.com/story/elektronik\"><img src=\"https://avatars3.githubusercontent.com/u/1078554?v=4\" width=\"100px;\" alt=\"Nick Ribal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nick Ribal</b></sub></a><br /><a href=\"#content-elektronik2k5\" title=\"Content\">🖋</a> <a href=\"https://github.com/goldbergyoni/nodebestpractices/pulls?q=is%3Apr+reviewed-by%3Aelektronik2k5\" title=\"Reviewed Pull Requests\">👀</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/0xflotus\"><img src=\"https://avatars3.githubusercontent.com/u/26602940?v=4\" width=\"100px;\" alt=\"0xflotus\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>0xflotus</b></sub></a><br /><a href=\"#content-0xflotus\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.dijonkitchen.org/\"><img src=\"https://avatars3.githubusercontent.com/u/11434205?v=4\" width=\"100px;\" alt=\"Jonathan Chen\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jonathan Chen</b></sub></a><br /><a href=\"#content-dijonkitchen\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/dilansri\"><img src=\"https://avatars2.githubusercontent.com/u/5089728?v=4\" width=\"100px;\" alt=\"Dilan Srilal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dilan Srilal</b></sub></a><br /><a href=\"#content-dilansri\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://vectree.ru\"><img src=\"https://avatars3.githubusercontent.com/u/4215285?v=4\" width=\"100px;\" alt=\"vladthelittleone\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>vladthelittleone</b></sub></a><br /><a href=\"#translation-vladthelittleone\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.nikolaso.com\"><img src=\"https://avatars0.githubusercontent.com/u/60047271?v=4\" width=\"100px;\" alt=\"Nik Osvalds\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nik Osvalds</b></sub></a><br /><a href=\"#content-nosvalds\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kdaniel21\"><img src=\"https://avatars0.githubusercontent.com/u/39854385?v=4\" width=\"100px;\" alt=\"Daniel Kiss\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Daniel Kiss</b></sub></a><br /><a href=\"https://github.com/goldbergyoni/nodebestpractices/commits?author=kdaniel21\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/forresst17\"><img src=\"https://avatars2.githubusercontent.com/u/163352?v=4\" width=\"100px;\" alt=\"Forresst\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Forresst</b></sub></a><br /><a href=\"#content-forresst\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/svenheden\"><img src=\"https://avatars1.githubusercontent.com/u/76098?v=4\" width=\"100px;\" alt=\"Jonathan Svenheden\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jonathan Svenheden</b></sub></a><br /><a href=\"#content-svenheden\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/AustrisC\"><img src=\"https://avatars2.githubusercontent.com/u/12381652?v=4\" width=\"100px;\" alt=\"AustrisC\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>AustrisC</b></sub></a><br /><a href=\"#content-AustrisC\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/cisco0808\"><img src=\"https://avatars0.githubusercontent.com/u/60251188?v=4\" width=\"100px;\" alt=\"kyeongtae kim\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>kyeongtae kim</b></sub></a><br /><a href=\"#translation-cisco0808\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://keybase.io/651z9pz968v2accj\"><img src=\"https://avatars.githubusercontent.com/u/65741741?v=4\" width=\"100px;\" alt=\"007\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>007</b></sub></a><br /><a href=\"#content-6gx7iycn53ioq2e8apk1j1ypwov4giui\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.anediaz.com\"><img src=\"https://avatars.githubusercontent.com/u/17216937?v=4\" width=\"100px;\" alt=\"Ane Diaz de Tuesta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ane Diaz de Tuesta</b></sub></a><br /><a href=\"#translation-anediaz\" title=\"Translation\">🌍</a> <a href=\"#content-anediaz\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://yukioh.net\"><img src=\"https://avatars.githubusercontent.com/u/23182489?v=4\" width=\"100px;\" alt=\"YukiOta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>YukiOta</b></sub></a><br /><a href=\"#translation-YukiOta\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.yeovilhospital.co.uk/\"><img src=\"https://avatars.githubusercontent.com/u/43814140?v=4\" width=\"100px;\" alt=\"Frazer Smith\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Frazer Smith</b></sub></a><br /><a href=\"#content-Fdawgs\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/rluvaton\"><img src=\"https://avatars.githubusercontent.com/u/16746759?v=4\" width=\"100px;\" alt=\"Raz Luvaton\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Raz Luvaton</b></sub></a><br /><a href=\"#content-rluvaton\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/YA21\"><img src=\"https://avatars.githubusercontent.com/u/37298463?v=4\" width=\"100px;\" alt=\"Yuta Azumi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yuta Azumi</b></sub></a><br /><a href=\"#content-YA21\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/andrewjbarbour\"><img src=\"https://avatars.githubusercontent.com/u/77080074?v=4\" width=\"100px;\" alt=\"andrewjbarbour\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>andrewjbarbour</b></sub></a><br /><a href=\"#content-andrewjbarbour\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://MasujimaRyohei.jp\"><img src=\"https://avatars.githubusercontent.com/u/17163541?v=4\" width=\"100px;\" alt=\"mr\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>mr</b></sub></a><br /><a href=\"#content-MasujimaRyohei\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kubanac95\"><img src=\"https://avatars.githubusercontent.com/u/16191931?v=4\" width=\"100px;\" alt=\"Aleksandar\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Aleksandar</b></sub></a><br /><a href=\"#content-kubanac95\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://vincentjonathan.com\"><img src=\"https://avatars.githubusercontent.com/u/32597776?v=4\" width=\"100px;\" alt=\"Owl\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Owl</b></sub></a><br /><a href=\"#content-SuspiciousLookingOwl\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/yedidyas\"><img src=\"https://avatars.githubusercontent.com/u/36074789?v=4\" width=\"100px;\" alt=\"Yedidya Schwartz\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yedidya Schwartz</b></sub></a><br /><a href=\"#content-yedidyas\" title=\"Content\">🖋</a> <a href=\"#example-yedidyas\" title=\"Examples\">💡</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ariel-diaz\"><img src=\"https://avatars.githubusercontent.com/u/20423540?v=4\" width=\"100px;\" alt=\"ari\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>ari</b></sub></a><br /><a href=\"#content-ariel-diaz\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.koenigthomas.de/\"><img src=\"https://avatars.githubusercontent.com/u/7080389?v=4\" width=\"100px;\" alt=\"Thomas König\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Thomas König</b></sub></a><br /><a href=\"#content-Vispercept\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/coocos\"><img src=\"https://avatars.githubusercontent.com/u/1397804?v=4\" width=\"100px;\" alt=\"Kalle Lämsä\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kalle Lämsä</b></sub></a><br /><a href=\"#content-coocos\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://math.cat\"><img src=\"https://avatars.githubusercontent.com/u/10328430?v=4\" width=\"100px;\" alt=\"Wyatt\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Wyatt</b></sub></a><br /><a href=\"#content-ZhyMC\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://libkhadir.fr\"><img src=\"https://avatars.githubusercontent.com/u/45130488?v=4\" width=\"100px;\" alt=\"KHADIR Tayeb\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>KHADIR Tayeb</b></sub></a><br /><a href=\"#content-tkhadir\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/shankarregmi\"><img src=\"https://avatars.githubusercontent.com/u/7703345?v=4\" width=\"100px;\" alt=\"Shankar Regmi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shankar Regmi</b></sub></a><br /><a href=\"#content-shankarregmi\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/codebyshubham\"><img src=\"https://avatars.githubusercontent.com/u/10389723?v=4\" width=\"100px;\" alt=\"Shubham\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shubham</b></sub></a><br /><a href=\"#content-codebyshubham\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://lucalves.me/\"><img src=\"https://avatars.githubusercontent.com/u/17712401?v=4\" width=\"100px;\" alt=\"Lucas Alves\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Lucas Alves</b></sub></a><br /><a href=\"#content-lucalves\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/benjaminudoh10\"><img src=\"https://avatars.githubusercontent.com/u/9018331?v=4\" width=\"100px;\" alt=\"Benjamin\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Benjamin</b></sub></a><br /><a href=\"#content-benjaminudoh10\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.yjoer.com\"><img src=\"https://avatars.githubusercontent.com/u/47742486?v=4\" width=\"100px;\" alt=\"Yeoh Joer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yeoh Joer</b></sub></a><br /><a href=\"#content-yjoer\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://blog.miigon.net\"><img src=\"https://avatars.githubusercontent.com/u/16161991?v=4\" width=\"100px;\" alt=\"Miigon\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Miigon</b></sub></a><br /><a href=\"#content-Miigon\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://brainstorage.me/Egregor2011\"><img src=\"https://avatars.githubusercontent.com/u/3630318?v=4\" width=\"100px;\" alt=\"Rostislav Bogorad\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Rostislav Bogorad</b></sub></a><br /><a href=\"#content-Egregor2011\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Flouse\"><img src=\"https://avatars.githubusercontent.com/u/1297478?v=4\" width=\"100px;\" alt=\"Flouse\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Flouse</b></sub></a><br /><a href=\"#content-Flouse\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://taranttini.com\"><img src=\"https://avatars.githubusercontent.com/u/6922125?v=4\" width=\"100px;\" alt=\"Tarantini Pereira\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tarantini Pereira</b></sub></a><br /><a href=\"#content-taranttini\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kzmat\"><img src=\"https://avatars.githubusercontent.com/u/34614358?v=4\" width=\"100px;\" alt=\"Kazuki Matsuo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kazuki Matsuo</b></sub></a><br /><a href=\"#content-kzmat\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/burkybang\"><img src=\"https://avatars.githubusercontent.com/u/927886?v=4\" width=\"100px;\" alt=\"Adam Smith\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Adam Smith</b></sub></a><br /><a href=\"#content-burkybang\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://codekodo.tistory.com\"><img src=\"https://avatars.githubusercontent.com/u/33795856?v=4\" width=\"100px;\" alt=\"Dohyeon Ko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dohyeon Ko</b></sub></a><br /><a href=\"#content-k906506\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/vlad99902\"><img src=\"https://avatars.githubusercontent.com/u/67615003?v=4\" width=\"100px;\" alt=\"Vladislav Legkov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vladislav Legkov</b></sub></a><br /><a href=\"#content-vlad99902\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://kerolloz.github.io\"><img src=\"https://avatars.githubusercontent.com/u/36763164?v=4\" width=\"100px;\" alt=\"Kerollos Magdy\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kerollos Magdy</b></sub></a><br /><a href=\"#content-kerolloz\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/erez-lieberman-b90b7219/\"><img src=\"https://avatars.githubusercontent.com/u/3277260?v=4\" width=\"100px;\" alt=\"Erez Lieberman\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Erez Lieberman</b></sub></a><br /><a href=\"#content-erezLieberman\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/breno-macedo-ernani-de-s%C3%A1-110223158/\"><img src=\"https://avatars.githubusercontent.com/u/48841329?v=4\" width=\"100px;\" alt=\"Breno Macedo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Breno Macedo</b></sub></a><br /><a href=\"#content-breno404\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/JFernando122\"><img src=\"https://avatars.githubusercontent.com/u/40414805?v=4\" width=\"100px;\" alt=\"Fernando Flores\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Fernando Flores</b></sub></a><br /><a href=\"#translation-JFernando122\" title=\"Translation\">🌍</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/rafaelconcept/\"><img src=\"https://avatars.githubusercontent.com/u/43880669?v=4\" width=\"100px;\" alt=\"Rafael Brito\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Rafael Brito</b></sub></a><br /><a href=\"#translation-rafaelconcept\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://emiliano-peralta-portfolio.vercel.app/\"><img src=\"https://avatars.githubusercontent.com/u/63617637?v=4\" width=\"100px;\" alt=\"Emiliano Peralta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Emiliano Peralta</b></sub></a><br /><a href=\"#translation-emiperalta\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://lannex.github.io\"><img src=\"https://avatars.githubusercontent.com/u/7369541?v=4\" width=\"100px;\" alt=\"Shin, SJ\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shin, SJ</b></sub></a><br /><a href=\"#content-lannex\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.benjaminforster.com\"><img src=\"https://avatars.githubusercontent.com/u/12589522?v=4\" width=\"100px;\" alt=\"Benjamin Forster\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Benjamin Forster</b></sub></a><br /><a href=\"#content-e-e-e\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/DanieleFedeli\"><img src=\"https://avatars.githubusercontent.com/u/37077048?v=4\" width=\"100px;\" alt=\"Daniele Fedeli\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Daniele Fedeli</b></sub></a><br /><a href=\"#content-DanieleFedeli\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/djob195\"><img src=\"https://avatars.githubusercontent.com/u/17146669?v=4\" width=\"100px;\" alt=\"djob195\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>djob195</b></sub></a><br /><a href=\"#content-djob195\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/antspk\"><img src=\"https://avatars.githubusercontent.com/u/78955792?v=4\" width=\"100px;\" alt=\"antspk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>antspk</b></sub></a><br /><a href=\"#content-antspk\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://jjy0821.tistory.com/\"><img src=\"https://avatars.githubusercontent.com/u/88075341?v=4\" width=\"100px;\" alt=\"정진영\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>정진영</b></sub></a><br /><a href=\"#content-jjy821\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kkk-cashwalk\"><img src=\"https://avatars.githubusercontent.com/u/91455122?v=4\" width=\"100px;\" alt=\"kkk-cashwalk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>kkk-cashwalk</b></sub></a><br /><a href=\"#content-kkk-cashwalk\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/apainintheneck\"><img src=\"https://avatars.githubusercontent.com/u/42982186?v=4\" width=\"100px;\" alt=\"apainintheneck\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>apainintheneck</b></sub></a><br /><a href=\"#content-apainintheneck\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/koyanyaroo\"><img src=\"https://avatars.githubusercontent.com/u/9715368?v=4\" width=\"100px;\" alt=\"Fajar Budhi Iswanda\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Fajar Budhi Iswanda</b></sub></a><br /><a href=\"#content-koyanyaroo\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jutiger\"><img src=\"https://avatars.githubusercontent.com/u/97490806?v=4\" width=\"100px;\" alt=\"이주호\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>이주호</b></sub></a><br /><a href=\"#content-jutiger\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/MisterSingh\"><img src=\"https://avatars.githubusercontent.com/u/44462019?v=4\" width=\"100px;\" alt=\"Singh\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Singh</b></sub></a><br /><a href=\"#content-MisterSingh\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Alex-Dumitru\"><img src=\"https://avatars.githubusercontent.com/u/43738450?v=4\" width=\"100px;\" alt=\"Alex Dumitru\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alex Dumitru</b></sub></a><br /><a href=\"#content-Alex-Dumitru\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/lykhatskyi\"><img src=\"https://avatars.githubusercontent.com/u/18104686?v=4\" width=\"100px;\" alt=\"Anton Lykhatskyi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Anton Lykhatskyi</b></sub></a><br /><a href=\"#content-lykhatskyi\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/EverythingAvailable\"><img src=\"https://avatars.githubusercontent.com/u/81002379?v=4\" width=\"100px;\" alt=\"sangwonlee\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>sangwonlee</b></sub></a><br /><a href=\"#content-EverythingAvailable\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/euberdeveloper\"><img src=\"https://avatars.githubusercontent.com/u/33126163?v=4\" width=\"100px;\" alt=\"Eugenio Berretta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Eugenio Berretta</b></sub></a><br /><a href=\"#content-euberdeveloper\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/soranakk\"><img src=\"https://avatars.githubusercontent.com/u/3930307?v=4\" width=\"100px;\" alt=\"soranakk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>soranakk</b></sub></a><br /><a href=\"#content-soranakk\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/backend-joonyoung\"><img src=\"https://avatars.githubusercontent.com/u/94430145?v=4\" width=\"100px;\" alt=\"고준영\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>고준영</b></sub></a><br /><a href=\"#content-backend-joonyoung\" title=\"Content\">🖋</a> <a href=\"https://github.com/goldbergyoni/nodebestpractices/commits?author=backend-joonyoung\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/GuilhermePortella\"><img src=\"https://avatars.githubusercontent.com/u/59876059?v=4\" width=\"100px;\" alt=\"Guilherme Portella \"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Guilherme Portella </b></sub></a><br /><a href=\"#content-GuilhermePortella\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.youtube.com/channel/UCBxzOQd2v9wWfiMDrf_RQ7A\"><img src=\"https://avatars.githubusercontent.com/u/18497570?v=4\" width=\"100px;\" alt=\"André Esser\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>André Esser</b></sub></a><br /><a href=\"#content-Esser50K\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ShiChenCong\"><img src=\"https://avatars.githubusercontent.com/u/22486446?v=4\" width=\"100px;\" alt=\"Scc\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Scc</b></sub></a><br /><a href=\"#translation-ShiChenCong\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.mauroaccornero.it\"><img src=\"https://avatars.githubusercontent.com/u/1875822?v=4\" width=\"100px;\" alt=\"Mauro Accornero\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Mauro Accornero</b></sub></a><br /><a href=\"#content-mauroaccornero\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/no-yan\"><img src=\"https://avatars.githubusercontent.com/u/63000297?v=4\" width=\"100px;\" alt=\"no-yan\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>no-yan</b></sub></a><br /><a href=\"#content-no-yan\" title=\"Content\">🖋</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n"
        },
        {
          "name": "README.brazilian-portuguese.md",
          "type": "blob",
          "size": 89.35,
          "content": "[✔]: assets/images/checkbox-small-blue.png\n\n# Melhores Práticas em Node.js\n\n<h1 align=\"center\">\n  <img src=\"assets/images/banner-2.jpg\" alt=\"Node.js Best Practices\"/>\n</h1>\n\n<br/>\n\n<div align=\"center\">\n  <img src=\"https://img.shields.io/badge/⚙%20Contagem%20de%20Items%20-%2083%20Boas%20Práticas-blue.svg\" alt=\"83 items\"/> <img src=\"https://img.shields.io/badge/%F0%9F%93%85%20Última%20Atualização%20-%20Jun%205%202019-green.svg\" alt=\"Última Atualização: June 5, 2019\"/> <img src=\"https://img.shields.io/badge/%E2%9C%94%20Atualizado%20Para%20Versão%20-%20Node%2012.4.0%20LTS-brightgreen.svg\" alt=\"Atualizado para Node 12.4.0 LTS\"/>\n</div>\n\n<br/>\n\n[![nodepractices](./assets/images/twitter-s.png)](https://twitter.com/nodepractices/) **Siga-nos no Twitter!** [**@nodepractices**](https://twitter.com/nodepractices/)\n\n<br/>\n\nLeia em diferentes idiomas: [![CN](./assets/flags/CN.png)**CN**](./README.chinese.md), [![BR](./assets/flags/BR.png)**BR**](./README.brazilian-portuguese.md), [![RU](./assets/flags/RU.png)**RU**](./README.russian.md), [![PL](./assets/flags/PL.png)**PL**](./README.polish.md), [![JA](./assets/flags/JA.png)**JA**](./README.japanese.md), [![EU](./assets/flags/EU.png)**EU**](./README.basque.md) [(![ES](./assets/flags/ES.png)**ES**, ![FR](./assets/flags/FR.png)**FR**, ![HE](./assets/flags/HE.png)**HE**, ![KR](./assets/flags/KR.png)**KR** and ![TR](./assets/flags/TR.png)**TR** em progresso! )](#translations)\n\n<br/>\n\n###### Construído e mantido pelo nosso [Comitê Diretivo](#comitê-diretivo) e [Colaboradores](#colaboradores)\n\n# Novas Práticas e Notícias\n\n- **Nova Boa Prática:** 4.4: [Evite dados fixos e sementes para teste, adicione os dados no teste](#4-práticas-de-testes-e-qualidade-geral)\n\n- **Nova Boa Prática:** 6.25: [Evite publicar segredos no registro do npm](./sections/security/avoid_publishing_secrets.brazilian-portuguese.md)\n\n- **Nova tradução:** ![BR](./assets/flags/BR.png) [Português Brasileiro](./README.brazilian-portuguese.md) disponível agora, cortesia de [Marcelo Melo](https://github.com/marcelosdm)! ❤️\n\n- **🎊 60,000 estrelas!**: Nosso repo recebeu estrela e a confiança de 60.100 desenvolvedores. Estamos sem palavras\n\n<br/><br/>\n\n# Bem-vindo! 3 Coisas Que Você Precisa Saber\n\n**1. Quando você lê aqui, na verdade você lê alguns dos melhores artigos de Node.js -** este é um resumo e curadoria dos mais bem ranqueados conteúdos sobre as melhores práticas do Node.js.\n\n**2. Esta é a maior coletânea, e está crescendo mais a cada semana -** atualmente, são apresentadas mais de 80 melhores práticas, guias de estilo e dicas de arquitetura. Novas issues e PR são criadas diariamente para manter este livro vivo atualizado. Gostaríamos muito de ver você contribuindo aqui, seja corrigindo algum erro de código ou sugerindo novas e brilhantes ideias. Veja nossas [conquistas aqui](https://github.com/goldbergyoni/nodebestpractices/milestones?direction=asc&sort=due_date&state=open).\n\n**3. A maioria dos tópicos possuem informações adicionais -** perto dos tópicos das melhores práticas, você encontrará o link **🔗Leia Mais** que irá apresentar exemplos de códigos, citações de blogs selecionados e mais informações.\n\n<br/><br/>\n\n## Índice\n\n1. [Práticas de Estrutura de Projeto (5)](#1-práticas-de-estrutura-de-projeto)\n2. [Práticas de Tratamento de Erros (12) ](#2-práticas-de-tratamento-de-erros)\n3. [Práticas de Estilo de Código (13) ](#3-práticas-de-estilo-de-código)\n4. [Práticas de Testes e Qualidade Geral (13) ](#4-práticas-de-testes-e-qualidade-geral)\n5. [Práticas de Produção (19) ](#5-boas-práticas-de-produção)\n6. [Práticas de Segurança (25)](#6-boas-práticas-em-segurança)\n7. [Práticas de Performance (1) (Em Progresso ✍️)](#7-boas-práticas-em-performance)\n\n<br/><br/>\n\n# `1. Práticas de Estrutura de Projeto`\n\n## ![✔] 1.1 Estruture sua solução por componentes\n\n**TL;DR:** A pior armadilha das grandes aplicações é manter uma enorme base de código com centenas de dependências - tal qual as monolíticas, que diminuem a velocidade dos desenvolvedores conforme eles tentam incorporar novos recursos. Em vez disso, particione seu código em componentes, cada um com sua própria pasta ou uma base de código dedicada, e garanta que cada unidade seja mantida pequena e simples. Veja o link ‘Leia Mais’ abaixo, para ver exemplos de estrutura correta de projeto.\n\n**Caso contrário:** Quando desenvolvendo novos recursos, desenvolvedores têm dificuldade para perceber o impacto de suas modificações e temem estragar outros componentes dependentes - deploys se tornam mais lentos e arriscados. Também é considerado mais difícil de escalar quando nenhuma unidade de negócio está separada.\n\n🔗 [**Leia mais: estruture por componentes**](./sections/projectstructre/breakintcomponents.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 1.2 Coloque seus Componentes em Camadas, mantenha o Express dentro de seus limites\n\n**TL;DR:** Cada componente deve conter 'layers' (camadas) - um objeto dedicado para web, lógica e código de acesso a dados. Isso não apenas faz uma separação clara dos interesses, como também facilita significativamente os mocks e testes de sistema. Embora este seja um padrão muito comum, desenvolvedores de API tendem a misturar camadas, passando os objetos da camada Web (req e res do Express) para a lógica de negócios e camadas de dados - isto torna sua aplicação dependente, e acessível apenas pelo Express.\n\n**Caso contrário:** Uma aplicação que misture objetos WEB com outras camadas não podem ser acessadas por códigos de teste, CRON jobs e outras chamadas não oriundas do Express.\n\n🔗 [**Leia Mais: seu app em camadas**](./sections/projectstructre/createlayers.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 1.3 Envolva os utilitários comuns como pacotes npm\n\n**TL;DR:** Em uma grande aplicação, que constitui uma grande base de código, utilidades de características transversais tais como logger, encriptação e afins, devem ser envolvidos pelo seu próprio código e exposto como pacotes npm privados. Isso permite compartilhá-los entre várias bases de código e projetos.\n\n**Caso contrário:** Você deverá criar seu próprio ciclo de implantação e dependência.\n\n🔗 [**Leia Mais: estrutura por característica**](./sections/projectstructre/wraputilities.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 1.4 Separe 'app' e 'server' no Express\n\n**TL;DR:** Evite o péssimo hábito de definir todo a aplicação [Express](https://expressjs.com/) em um único arquivo enorme - separe a definição de seu 'Express' no mínimo em dois arquivos: a declaração da API (app.js) e as configurações de rede (WWW). Para uma estrutura ainda melhor, declare sua API dentro dos componentes.\n\n**Caso contrário:** Sua API será acessível apenas para testes via chamadas HTTP (mais lentos e muito mais difíceis de gerar relatórios de cobertura). Provavelmente não será um grande prazer manter centenas de linhas de código em um único arquivo.\n\n🔗 [**Leia Mais: separe 'app' e 'server' no Express**](./sections/projectstructre/separateexpress.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 1.5 Use configuração consciente, segura e hierárquica do ambiente\n\n**TL;DR:** Uma definição de configuração perfeita e impecável deve garantir que (a) as chaves possam ser lidas a partir do arquivo E TAMBÉM da variável de ambiente (b) os segredos sejam mantidos fora do código consolidado (c) a configuração é hierárquica para facilitar a localização. Existem alguns pacotes que podem auxiliar na checagem destes tópicos, como [rc](https://www.npmjs.com/package/rc), [nconf](https://www.npmjs.com/package/nconf), [config](https://www.npmjs.com/package/config) e [convict](https://www.npmjs.com/package/convict)\n\n**Caso contrário:** Deixar de satisfazer qualquer um dos requisitos de configuração simplesmente atrapalhará a equipe de desenvolvimento ou devops. Provavelmente ambas.\n\n🔗 [**Leia Mais: melhores práticas de configuração**](./sections/projectstructre/configguide.brazilian-portuguese.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#índice\">⬆ Voltar ao topo</a></p>\n\n# `2. Práticas de Tratamento de Erros`\n\n## ![✔] 2.1 Utilize Async-Await ou promises para tratamento de erros assíncronos\n\n**TL;DR:** Tratar erros assíncronos no estilo callback provavelmente é o caminho mais rápido para o inferno (também conhecido como a pyramid of doom - ou pirâmide da desgraça em bom português). O melhor presente que você pode dar ao seu código é utilizar uma biblioteca respeitável de promise ou async-await, que proporciona uma sintaxe de código muito mais compacta e familiar, como o try-catch.\n\n**Caso contrário:** O estilo de callback do Node.js, function(err, response), é um caminho promissor para um código insustentável devido à combinação de manipulação de erro com código casual, aninhamento excessivo e padrões de codificação inadequados.\n\n🔗 [**Leia Mais: evitando callbacks**](./sections/errorhandling/asyncerrorhandling.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 2.2 Utilize apenas objetos de erro interno\n\n**TL;DR:** Muitos geram erros como uma string ou como algum tipo personalizado - isso complica a lógica de tratamento de erros e a interoperabilidade entre módulos. Se você rejeita uma promise, lance uma mensagem de erro ou uma exceção - utilizando somente o objeto de erro interno aumentará a uniformidade e evitará a perda de informações.\n\n**Caso contrário:** Ao invocar algum componente, sendo incerto qual tipo de erro irá retornar - isso faz com que o tratamento de erros seja muito mais difícil. Até pior, usar tipos personalizados para descrever erros pode levar à perda de informações de erros críticos, como o stack trace!\n\n🔗 [**Leia Mais: usando o objeto interno de erro**](./sections/errorhandling/useonlythebuiltinerror.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 2.3 Diferencie erros operacionais vs erros de programação\n\n**TL;DR:** Erros operacionais (ex: API recebeu um input inválido) referem-se a casos onde o impacto do erro é totalmente compreendido e pode ser tratado com cuidado. Por outro lado, erro de programação (ex: tentar ler uma variável não definida) refere-se a falhas de código desconhecidas que ditam para reiniciar a aplicação.\n\n**Caso contrário:** Você pode sempre reiniciar o aplicativo quando um erro aparecer, mas por que derrubar aproximadamente 5000 usuários que estavam online por causa de um pequeno erro operacional previsto? O contrário também não é ideal - manter a aplicação rodando quando um problema desconhecido (erro de programação) ocorreu, pode levar para um comportamento não esperado. Diferenciá-los, permite agir com tato e aplicar uma abordagem equilibrada baseada no dado contexto.\n\n🔗 [**Leia Mais: erros operacionais vs erros de programação**](./sections/errorhandling/operationalvsprogrammererror.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 2.4 Trate erros de forma centralizada, não dentro de um middleware do Express\n\n**TL;DR:** A lógica de tratamento de erros, bem como email para administrador e registros (logs), deve ser encapsulada em um objeto dedicado e centralizado que todos os endpoints (por exemplo, middleware do Express, cron jobs, testes unitários) chamem quando um erro é recebido.\n\n**Caso contrário:** Não tratar os erros em um mesmo lugar irá levar à duplicidade de código, e provavelmente, a erros tratados incorretamente.\n\n🔗 [**Leia Mais: tratando erros de forma centralizada**](./sections/errorhandling/centralizedhandling.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 2.5 Documente erros de API usando o Swagger ou GraphQL\n\n**TL;DR:** Permita que os clientes de sua API saibam quais erros podem ser retornados para que eles possam lidar com esses detalhes, sem causar falhas. Para RESTful APIs geralmente, isto é feito com frameworks de documentação REST API, como o Swagger. Se você está usando GraphQL, você também pode utilizar seu esquema e comentários.\n\n**Caso contrário:** Um cliente de uma API pode decidir travar e reiniciar, apenas pelo motivo de ter recebido de volta um erro que não conseguiu entender. Nota: o visitante de sua API pode ser você (muito comum em um ambiente de microsserviço).\n\n🔗 [**Leia Mais: documentando erros de API no Swagger ou GraphQL**](./sections/errorhandling/documentingusingswagger.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 2.6 Finalize o processo quando um estranho chegar\n\n**TL;DR:** Quando ocorre um erro desconhecido (um erro de programação, veja a melhor prática #3) - há incerteza sobre a integridade da aplicação. Uma prática comum sugere reiniciar cuidadosamente o processo utilizando uma ferramenta de “reinicialização” como [Forever](https://www.npmjs.com/package/forever) e [PM2](http://pm2.keymetrics.io/).\n\n**Caso contrário:** Quando uma exceção desconhecida é lançada, algum objeto pode estar com defeito (por exemplo, um emissor de evento que é usado globalmente e não dispara mais eventos devido a alguma falha interna) e todas as requisições futuras podem falhar ou se comportar loucamente.\n\n🔗 [**Leia Mais: finalizando o processo**](./sections/errorhandling/shuttingtheprocess.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 2.7 Use um agente de log maduro para aumentar a visibilidade de erros\n\n**TL;DR:** Um conjunto de ferramentas de registro maduras como [Pino](https://www.npmjs.com/package/pino), [Winston](https://www.npmjs.com/package/winston), [Bunyan](https://www.npmjs.com/package/bunyan) ou [Log4js](https://www.npmjs.com/package/log4js), irão acelerar a descoberta e entendimento de erros. Portanto, esqueça o console.log.\n\n**Caso contrário:** Ficar procurando através de console.logs ou manualmente em arquivos de texto confusos sem utilizar ferramentas de consulta ou um visualizador de log decente, pode mantê-lo ocupado até tarde.\n\n🔗 [**Leia Mais: usando um logger maduro**](./sections/errorhandling/usematurelogger.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 2.8 Fluxos de testes de erros usando seu framework favorito\n\n**TL;DR:** Se o analista de QA ou o desenvolvedor de testes - Certifique-se de que seu código não atenda apenas o cenário positivo, mas também trate e retorne os erros corretos. Frameworks de teste como Mocha e Chai podem lidar com isso facilmente (veja exemplos de códigos no “Gist popup”)\n\n**Caso contrário:** Sem testes, seja automático ou manual, não podemos confiar em nosso código para retornar os erros certos. Sem erros significantes, não há tratamento de erros.\n\n🔗 [**Leia Mais: fluxos de testes de erros**](./sections/errorhandling/testingerrorflows.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 2.9 Descubra erros e downtime usando APM\n\n**TL;DR:** Produtos de monitoramento e desempenho (também conhecido como APM), avaliam sua base de código ou API de forma proativa, para que possam destacar automaticamente erros, falhas e lentidões não percebidos.\n\n**Caso contrário:** Você pode gastar muito esforço medindo o desempenho e os tempos de inatividade (downtime) da API. Provavelmente, você nunca saberá quais são suas partes de código mais lentas no cenário real e como elas afetam o UX.\n\n🔗 [**Leia Mais: usando APM**](./sections/errorhandling/apmproducts.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 2.10 Capture rejeições de promises não tratadas\n\n**TL;DR:** Qualquer exceção lançada dentro de uma promise será descartada, a menos que o desenvolvedor não se esqueça de tratá-la explicitamente. Mesmo que seu código esteja inscrito no process.uncaughtException! Supere isso, registrando no evento process.unhandledRejection.\n\n**Caso contrário:** Seus erros serão engolidos e não vão deixar rastros. Nada para se preocupar.\n\n🔗 [**Leia Mais: capturando rejeições de promises não tratadas**](./sections/errorhandling/catchunhandledpromiserejection.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 2.11 Falhe rápido, valide argumentos usando uma biblioteca dedicada\n\n**TL;DR:** Isto deveria fazer parte das melhores práticas de Express - Confirme a entrada da API para evitar erros desagradáveis ​​que são muito mais difíceis de acompanhar mais tarde. A validação de código geralmente é entediante ao menos que você esteja utilizando uma biblioteca de ajuda bem legal, como a Joi.\n\n**Caso contrário:** Considere isto: sua função espera receber um “Desconto” como argumento numérico que foi esquecido de passar. Mais adiante, seu código verifica se Desconto!=0 (valor do desconto permitido é maior que zero). Depois, irá permitir que o usuário desfrute de um desconto. Meu Deus, que baita bug. Entendeu?\n\n🔗 [**Leia Mais: falhando rápido**](./sections/errorhandling/failfast.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 2.12 Sempre use 'await' antes de retornar as 'promises' para evitar um rastreamento parcial da pilha de erro\n\n**TL;DR:** Sempre use `return await` quando retornar uma 'promise' para beneficiar o rastreamento completo da pilha de erro. Se um função retorna uma 'promise', essa função deve ser declarada como função `async` e  explicitamente `await` na `promise` antes de devolvê-la\n\n**Caso contrário:** Uma função que retorna uma `promise` sem o `await` não aparecerá na pilha de erro.\nA ausência dessas informações provavelmente complicariam a compreensão do fluxo que leva ao erro,\nespecialmente se a causa do comportamento anormal estiver dentro da função ausente\n\n🔗 [**Leia Mais: retornando promises**](./sections/errorhandling/returningpromises.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#índice\">⬆ Voltar ao topo</a></p>\n\n# `3. Práticas de Estilo de Código`\n\n## ![✔] 3.1 Use ESLint\n\n**TL;DR:** O [ESLint](https://eslint.org) é de fato o padrão para verificar possíveis erros e consertar o estilo de código, não apenas para identificar problemas básicos de espaçamento, mas também para detectar antipadrões de código, como desenvolvedores lançando erros sem classificação. Embora o ESLint possa corrigir automaticamente estilos de código, outra ferramentas como o [prettier](https://www.npmjs.com/package/prettier) e o [beautify](https://www.npmjs.com/package/js-beautify) são mais poderosos no quesito correção de formatação e trabalham em conjunto com o ESLint.\n\n**Caso contrário:** Desenvolvedores irão focar nas preocupações tediosas de espaçamento e largura de linha e o tempo poderá ser desperdiçado pensando sobre o estilo de código do projeto.\n\n🔗 [**Leia Mais: Usando ESLint e Prettier**](./sections/codestylepractices/eslint_prettier.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 3.2 Plugins Específicos do Node.js\n\n**TL;DR:** Além das regras padrões do ESLint que cobrem somente o Vanilla JS, adicione plug-ins específicos do Node, como o [eslint-plugin-node](https://www.npmjs.com/package/eslint-plugin-node), o [eslint-plugin-mocha](https://www.npmjs.com/package/eslint-plugin-mocha) e o [eslint-plugin-node-security](https://www.npmjs.com/package/eslint-plugin-security)\n\n**Caso contrário:** Muitos padrões de código do Node.js com falha podem escapar do radar. Por exemplo, desenvolvedores podem chamar arquivos fazendo o require(variavelComoCaminho) com uma determinada variável como caminho, o que permite que invasores executem qualquer script JS. Os linters do Node.js podem detectar tais padrões e reclamar cedo.\n\n<br/><br/>\n\n## ![✔] 3.3 Comece um Bloco de Código com Chaves na Mesma Linha\n\n**TL;DR:** As chaves que abrem um bloco de código devem estar na mesma linha da instrução de abertura\n\n### Exemplo de Código\n\n```javascript\n// Do\nfunction someFunction() {\n  // code block\n}\n\n// Avoid\nfunction someFunction()\n{\n  // code block\n}\n```\n\n**Caso contrário:** Evitar esta recomendação pode levar a resultados inesperados, como visto nesta thread do StackOverflow:\n\n🔗 [**Leia Mais:** \"Por que os resultados variam com base no posicionamento da chave?\" (Stackoverflow)](https://stackoverflow.com/questions/3641519/why-does-a-results-vary-based-on-curly-brace-placement)\n\n<br/><br/>\n\n## ![✔] 3.4 Separe suas declarações corretamente\n\nNão importa se você usa ponto-e-vírgula ou não para separar suas declarações, conhecer as armadilhas comuns de quebras de linha impróprias ou inserção automática de ponto e vírgula, irá ajudá-lo a eliminar erros regulares de sintaxe.\n\n**TL;DR:** Use o ESLint para obter conhecimento sobre as preocupações de separação. [Prettier](https://prettier.io/) ou [Standardjs](https://standardjs.com/) podem resolver automaticamente esses problemas.\n\n**Caso contrário:** Como visto na seção anterior, o interpretador do JavaScript adiciona automaticamente um ponto-e-vírgula ao final de uma instrução, se não houver uma, ou considera uma instrução como não terminada onde deveria, o que pode levar a alguns resultados indesejáveis. Você pode usar atribuições e evitar o uso de expressões de função chamadas imediatas para evitar a maioria dos erros inesperados.\n\n### Exemplo de código\n\n```javascript\n// Faça\nfunction doThing() {\n    // ...\n}\n\ndoThing()\n\n// Faça\n\nconst items = [1, 2, 3]\nitems.forEach(console.log)\n\n// Evitar - lança exceção\nconst m = new Map()\nconst a = [1,2,3]\n[...m.values()].forEach(console.log)\n> [...m.values()].forEach(console.log)\n>  ^^^\n> SyntaxError: Unexpected token ...\n\n// Evitar - lança exceção\nconst count = 2 // tenta executar 2(), mas 2 não é uma função\n(function doSomething() {\n  // Faça algo incrível\n}())\n// Coloque um ponto-e-vírgula antes da função invocada imediatamente, após a definição const, salve o valor de retorno da função anônima para uma variável ou evite IIFEs no conjunto\n```\n\n🔗 [**Leia mais:** \"Regra Semi ESLint\"](https://eslint.org/docs/rules/semi)\n🔗 [**Leia mais:** \"Nenhuma regra ESLint de múltiplas linhas inesperada\"](https://eslint.org/docs/rules/no-unexpected-multiline)\n\n<br/><br/>\n\n## ![✔] 3.5 Nomeie Suas Funções\n\n**TL;DR:** Nomeie todas as funções, incluindo closures e callbacks. Evite funções anônimas. Isso é especialmente útil em uma aplicação node. Nomear todas a funções permitirá que você entenda facilmente o que está olhando quando verificar um snapshot da memória.\n\n**Caso contrário:** A depuração de problemas de produção usando um dump principal (snapshot da memória) pode se tornar um desafio quando você percebe um consumo significativo de memória de funções anônimas.\n\n<br/><br/>\n\n## ![✔] 3.6 Convenções de nomenclatura para variáveis, constantes, funções e classes\n\n**TL;DR:** Utilize **_lowerCamelCase_** quando nomeando constantes, variáveis e funções, e **_UpperCamelCase_** (primeira letra maiúscula também) quando nomeando classes. Isso irá lhe ajudar a distinguir facilmente entre variáveis/funções, e classes que necessitam de instanciação. Use nomes descritivos, mas tente mantê-los curtos.\n\n**Caso contrário:** O JavaScript é a única linguagem no mundo que permite invocar um construtor (“Class”) diretamente sem instanciá-lo primeiro. Consequentemente, Classes e construtores de funções são diferenciados começando com UpperCamelCase\n\n### 3.6 Exemplo de Código\n\n```javascript\n// para classes nós usamos UpperCamelCase\nclass SomeClassExample {}\n\n// para nomes de constantes nós usamos a palavra const e lowerCamelCase\nconst config = {\n  key: \"value\",\n};\n\n// para nomes de variáveis e funções nós usamos lowerCamelCase\nlet someVariableExample = \"value\";\nfunction doSomething() {}\n```\n\n<br/><br/>\n\n## ![✔] 3.7 Prefira const do que let. Esqueça do var\n\n**TL;DR:** Usar `const` significa que uma vez que a variável foi atribuída, ela não pode ser reatribuída. Preferir const irá te ajudar a não cair na tentação de utilizar a mesma variável para diferentes usos, e irá deixar seu código mais limpo. Se uma variável precisa ser reatribuída, em um for loop, por exemplo, use `let` para declarar. Outro aspecto importante do `let` é que esta variável só estará disponível no escopo de código em que ela foi definida. `var` tem escopo de função, não de bloco, e [não deveria ser utilizada em ES6](https://hackernoon.com/why-you-shouldnt-use-var-anymore-f109a58b9b70)\n, agora que você tem const e let ao seu dispor.\n\n**Caso contrário:** A depuração se torna muito mais complicada ao seguir uma variável que frequentemente muda\n\n🔗 [**Leia Mais: JavaScript ES6+: var, let ou const?** ](https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75)\n\n<br/><br/>\n\n## ![✔] 3.8 Requires vem primeiro e não dentro de funções\n\n**TL;DR:** Faça o require de módulos no início de cada arquivo, antes e fora de qualquer função. Esta simples prática irá te ajudar não apenas a reconhecer as dependências de um determinado arquivo com facilidade e rapidez, como também evitará alguns possíveis problemas.\n\n**Caso contrário:** Os requires rodam de forma síncrona pelo Node.js. Se eles forem chamados de dentro de uma função, isso pode impedir que outras solicitações sejam tratadas em um momento mais crítico. Além disso, se um módulo necessário ou qualquer uma de suas dependências lançar um erro e travar o servidor, é melhor descobrir isso o mais rápido possível, o que pode não ser o caso se este módulo tiver sido declarado dentro de uma função.\n\n<br/><br/>\n\n## ![✔] 3.9 Faça Require nas pastas, não diretamente nos arquivos\n\n**TL;DR:** Ao desenvolver um módulo/biblioteca em uma pasta, coloque um arquivo index.js que exponha os componentes internos do módulo para que cada consumidor passe por ele. Isso serve como uma 'interface' para seu módulo e facilita futuras mudanças sem causar perdas.\n\n**Caso contrário:** Alterar a estrutura interna dos arquivos ou a assinatura pode quebrar a interface com clientes.\n\n### 3.9 Exemplo de Código\n\n```javascript\n// Do\nmodule.exports.SMSProvider = require(\"./SMSProvider\");\nmodule.exports.SMSNumberResolver = require(\"./SMSNumberResolver\");\n\n// Avoid\nmodule.exports.SMSProvider = require(\"./SMSProvider/SMSProvider.js\");\nmodule.exports.SMSNumberResolver = require(\"./SMSNumberResolver/SMSNumberResolver.js\");\n```\n\n<br/><br/>\n\n## ![✔] 3.10 Use 0 operador `===`\n\n**TL;DR:** Dê preferência em usar o operador de comparação estrita `===` ao invés do operador de comparação abstrata `==`, que é mais fraco. `==` irá comparar duas variáveis depois de convertê-las para o mesmo tipo. Não há conversão de tipo no `===` e ambas as variáveis devem ser do mesmo tipo para serem iguais.\n\n**Caso contrário:** Variáveis diferentes podem retornar verdadeiro quando comparadas usando o operador `==`.\n\n### 3.10 Exemplo de Código\n\n```javascript\n\"\" == \"0\"; // false\n0 == \"\"; // true\n0 == \"0\"; // true\n\nfalse == \"false\"; // false\nfalse == \"0\"; // true\n\nfalse == undefined; // false\nfalse == null; // false\nnull == undefined; // true\n\n\" \\t\\r\\n \" == 0; // true\n```\n\nTodas as declarações acima false se feitas com `===`.\n\n<br/><br/>\n\n## ![✔] 3.11 Use Async Await, evite callbacks\n\n**TL;DR:** Agora o Node 8 LTS possui suporte completo para Async-await. Esta é uma nova maneira de lidar com códigos assíncronos que substitui callbacks e promises. Async-await é não-bloqueante, e isso faz com que os códigos assíncronos pareçam síncronos. O melhor presente que você pode dar ao seu código é usar async-await, que fornece uma sintaxe de código muito mais compacta e familiar como o try-catch.\n\n**Caso contrário:** Lidar com erros assíncronos no estilo de callback é provavelmente o caminho mais rápido para o inferno - esse estilo força verificar todos os erros, lidar com desajeitados aninhamentos de código e torna difícil raciocinar sobre o fluxo de código.\n\n🔗[**Leia mais:** Guia do async await 1.0](https://github.com/yortus/asyncawait)\n\n<br/><br/>\n\n## ![✔] 3.12 Use Fat (=>) Arrow Functions\n\n**TL;DR:** Embora seja recomendado usar async-await e evitar parâmetros de função ao lidar com APIs antigas, que aceitam promises ou callbacks - arrow functions tornam a estrutura do código mais compacta e mantém o contexto léxico da função raiz (por exemplo, 'this').\n\n**Caso contrário:** Códigos mais longos (em funções ES5) são mais propensos a erros e são mais difíceis de ler.\n\n🔗 [**Leia mais: Arrow Functions - é hora de abraçar a causa**](https://medium.com/javascript-scene/familiarity-bias-is-holding-you-back-its-time-to-embrace-arrow-functions-3d37e1a9bb75)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#índice\">⬆ Voltar ao topo</a></p>\n\n# `4. Práticas de Testes e Qualidade Geral`\n\n## ![✔] 4.1 No mínimo, escreva testes de API (componente)\n\n**TL;DR:** A maioria dos projetos simplesmente não possuem testes automatizados devido a falta de tempo ou geralmente o 'testing project' fica fora de controle e acaba sendo abandonado. Por esse motivo, priorize e comece com o teste de API, que é o mais fácil de escrever e proporciona mais cobertura do que os testes unitários (você pode inclusive criar testes de API sem código usando ferramentas como [Postman](https://www.getpostman.com/)). Depois, se você tiver mais recursos e tempo, continue com testes avançados, como testes unitários, testes de banco de dados, testes de desempenho, etc.\n\n**Caso contrário:** Voce pode passar longos dias escrevendo testes unitários para perceber que possui apenas 20% de cobertura de sistema.\n\n<br/><br/>\n\n## ![✔] 4.2 Inclua 3 partes em cada nome de teste\n\n**TL;DR:** Faça o teste falar no nível de requisitos, de modo que seja autoexplicativo para engenheiros de garantia de qualidade e desenvolvedores que não estão familiarizados com o código. Indicar no nome do teste o que está sendo testado (unidade em teste), em que circunstâncias e qual é o resultado esperado.\n\n**Caso contrário:** Uma implantação falhou, um teste chamado \"Adicionar produto\" falhou. Isso lhe diz exatamente o que está errado?\n\n🔗 [**Leia Mais: Inclua 3 partes em cada nome de teste**](./sections/testingandquality/3-parts-in-name.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 4.3 Estutura de testes padrão AAA\n\n**TL;DR:** Estruture seus testes com 3 seções bem separadas: Arrange, Act & Assert (AAA). A primeira parte inclui a configuração do teste, depois a execução do teste unitário, e finalmente, a fase de asserção. Seguir esta estrutura garante que o leitor não gaste nenhuma CPU cerebral para entender o plano de teste\n\n**Caso contrário:** Você não somente passará várias horas do dia para entender o código principal, mas agora também gastará várias horas no que deveria ter sido uma simples parte do dia (testando) esticando seu cérebro.\n\n🔗 [**Leia Mais: Estutura de testes padrão AAA**](./sections/testingandquality/aaa.md)\n\n<br/><br/>\n\n## ![✔] 4.4 Detecte problemas de código com um linter\n\n**TL;DR:** Use um code linter para checar a qualidade básica e detectar antipadrões antecipadamente. Rode-o antes de qualquer teste e adicione-o como um pre-commit git-hook para minimizar o tempo necessário para revisar e corrigir qualquer problema. Veja também [Seção 3](https://github.com/goldbergyoni/nodebestpractices#3-code-style-practices) no Prática de Estilo de Código.\n\n**Caso contrário:** Você pode deixar passar algum antipadrão e possível código vulnerável para seu ambiente de produção.\n\n<br/><br/>\n\n## ![✔] 4.5 Evite dados fixos e sementes para teste, adicione os dados no teste\n\n**TL;DR:** Para evitar o acoplamento de testes e facilitar o entendimento do fluxo do teste, cada teste deve adicionar e atuar em seu próprio conjunto de linhas de banco de dados. Sempre que um teste precisar extrair ou assumir a existência de alguns dados do banco de dados - ele deve incluir explicitamente esses dados e evitar a mutação de outros registros\n\n**Caso contrário:** Considere um cenário em que a implementação é abortada devido a falhas nos testes. Agora, a equipe gastará um tempo precioso de investigação que termina em uma triste conclusão: o sistema funciona bem, mas os testes interferem uns nos outros e quebram a compilação\n\n🔗 [**Leia Mais: Evite dados fixos para teste**](./sections/testingandquality/avoid-global-test-fixture.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 4.6 Inspencione constantemente por dependências vulneráveis\n\n**TL;DR:** Até mesmo as dependências mais confiáveis, como o Express, têm vulnerabilidades conhecidas. Isso pode ser facilmente contornado usando ferramentas comunitárias e comerciais como 🔗 [nsp](https://github.com/nodesecurity/nsp) que pode ser invocado a partir do seu CI em cada build.\n\n**Caso contrário:** Manter seu código livre de vulnerabilidades sem ferramentas dedicadas exigirá o acompanhamento constante de publicações online sobre novas ameaças. Saia do tédio.\n\n<br/><br/>\n\n## ![✔] 4.7 Marque seus testes\n\n**TL;DR:** Diferentes testes devem rodar em diferentes cenários: testes de rápidos, sem IO, devem ser executados quando um desenvolvedor salva ou faz commit em um arquivo, testes completos de ponta a ponta geralmente são executados quando uma nova solicitação de request é enviada, etc. Isso pode ser conseguido através da marcação de testes com palavras-chave como #cold #api #sanity. Assim você pode invocar o subconjunto desejado. Por exemplo, é desta forma que você invocaria apenas o grupo de sanity test usando o [Mocha](https://mochajs.org/): mocha --grep 'sanity'\n\n**Caso contrário:** Rodar todos os testes, incluindo aqueles que executam dezenas de consultas de banco de dados, sempre que o desenvolvedor fizer uma pequena alteração pode ser extremamente lento e impedir que desenvolvedores executem testes.\n\n<br/><br/>\n\n## ![✔] 4.8 Verifique a cobertura de seu teste, isso te ajuda a identificar padrões incorretos de teste\n\n**TL;DR:** Ferramentas de cobertura de código como [Istanbul](https://github.com/istanbuljs/istanbuljs)/[NYC](https://github.com/istanbuljs/nyc), são ótimas por 3 motivos: elas são gratuitas (nenhum esforço é necessário para beneficiar esses relatórios), elas ajuda a identificar diminuição na cobertura de testes, e por último mas não menos importante, ela destacam a incompatibilidade de testes: olhando relatórios coloridos de cobertura de código, você pode notar, por exemplo, áreas de código que nunca são testadas como cláusulas catch (o que significa que os testes só invocam os caminhos felizes e não como o aplicativo se comporta em erros). Configure-o para falhas se a cobertura estiver abaixo de um certo limite.\n\n**Caso contrário:** Não haverá nenhuma métrica automática informando quando uma grande parte de seu código não é coberta pelo teste.\n\n<br/><br/>\n\n## ![✔] 4.9 Inspecione pacotes desatualizados\n\n**TL;DR:** Use sua ferramenta preferida (por exemplo, 'npm outdated' ou [npm-check-updates](https://www.npmjs.com/package/npm-check-updates) para detectar pacotes instalados que estão desatualizados, injetar essa verificação em seu pipeline de CI e até mesmo fazer uma falha grave em um cenário grave. Por exemplo, um cenário grave pode ser quando um pacote instalado esteja há 5 commits atrás (por exemplo, a versão local é 1.3.1 e a versão no repositório é 1.3.8) ou está marcada como descontinuada pelo autor - mate o build e impeça a implantação desta versão.\n\n**Caso contrário:** Sua produção executará pacotes que foram explicitamente marcados pelo autor como arriscados.\n\n<br/><br/>\n\n## ![✔] 4.10 Use docker-compose para testes e2e\n\n**TL;DR:** Teste de ponta a ponta (end to end, ou e2e), que inclui dados ativos, costumava ser o elo mais fraco do processo de CI, já que depende de vários serviços pesados como o banco de dados. O docker-compose deixa isso mamão com açúcar, criando um ambiente de produção usando um arquivo de texto simples e comandos fáceis. Isto permite criar todos os serviços dependentes, banco de dados e rede isolada para teste e2e. Por último mas não menos importante, ele pode manter um ambiente sem estado que é invocado antes de cada suíte de testes e é encerrado logo após.\n\n**Caso contrário:** Sem o docker-compose, as equipes devem manter um banco de dados de teste para cada ambiente de teste, incluindo as máquinas dos desenvolvedores, e manter todos esses bancos de dados sincronizados para que os resultados dos testes não variem entre os ambientes.\n\n<br/><br/>\n\n## ![✔] 4.11 Refatore regularmente usando ferramentas de análise estática\n\n**TL;DR:** O uso de ferramentas de análise estática ajuda fornecendo maneiras objetivas de melhorar a qualidade do código e manter seu código sustentável. Você pode adicionar ferramentas de análise estática para seu build de Integração Contínua (CI) falhar quando encontre code smells. Seus principais pontos de vantagem sobre o linting são a abilidade de inspecionar a qualidade no contexto de múltiplos arquivos (por exemplo, detectar duplicidades), realizar análises avançadas (por exemplo, complexidade de código), e acompanhar histórico e progresso de problemas de código. Dois dexemplos de ferramentas que podem ser utilizadas são [Sonarqube](https://www.sonarqube.org/) (mais de 2.600 [stars](https://github.com/SonarSource/sonarqube)) e [Code Climate](https://codeclimate.com/) (mais de 1.500 [stars](https://github.com/codeclimate/codeclimate)).\n\n**Caso contrário:** Com qualidade de código ruim, bugs e desempenho sempre serão um problema que nenhuma nova biblioteca maravilhosa ou recursos de última geração podem corrigir.\n\n🔗 [**Leia Mais: Refatoração!**](./sections/testingandquality/refactoring.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 4.12 Escolha cuidadosamente sua plataforma de Integração Contínua - CI (Jenkins vs CircleCI vs Travis vs Resto do mundo)\n\n**TL;DR:** Sua plataforma de integração contínua (CICD) irá hospedar todas as ferramentas de qualidade (por exemplo, teste, lint), então ela deve vir com um ecosistema de plugins arrebatador. O [Jenkins](https://jenkins.io/) costumava ser o padrão de muitos projetos, pois tem a maior comunidade, juntamente com uma poderosa plataforma, ao preço de configuração complexa que exige uma curva de aprendizado íngreme. Atualmente, ficou bem mais fácil para configurar uma solução de CI usando ferramentas SaaS como [CircleCI](https://circleci.com) e outras. Essas ferramentas permitem a criação de um pipeline de CI flexível sem o peso de gerenciar toda a infraestrutura. Eventualmente, é um perde e ganha entre robustez e velocidade - escolha seu lado com cuidado!\n\n**Caso contrário:** Escolher algum fornecedor de nicho pode fazer com que você fique engessado quando precisar de alguma personalização avançada. Por outro lado, escolher o Jenkins pode ser uma perda de tempo precioso na configuração da infraestrutura.\n\n🔗 [**Leia Mais: Escolhendo a plataforma de CI**](./sections/testingandquality/citools.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 4.13 Teste seus 'middlewares' isoladamente\n\n**TL;DR:** quando um 'middleware' contém alguma lógica imensa que abrange muitas solicitações, vale a pena testá-lo isoladamente, sem ativar todo o framework. Isso pode ser facilmente alcançado por 'stubbing' e espionando os objetos {req, res, next}\n\n**Caso contrário:** Um bug no 'middleware Express' === um bug em todas ou na maioria das solicitações\n\n🔗 [**Read More: Test middlewares in isolation**](./sections/testingandquality/test-middlewares.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#índice\">⬆ Voltar ao topo</a></p>\n\n# `5. Boas Práticas de Produção`\n\n## ![✔] 5.1. Monitoramento\n\n**TL;DR:** O monitoramento é um jogo de descobrir problemas antes que os clientes os encontrem - obviamente deve ser atribuída muita importância para isto. O mercado está sobrecarregado de ofertas, portanto, considere começar com a definição das métricas básicas que você deve seguir (sugestões minhas dentro), depois passe por recursos extras e escolha a solução que marca todas as caixas. Acesse o ‘Gist’ abaixo para uma visão geral das soluções.\n\n**Caso contrário:** Falha === clientes desapontados. Simples\n\n🔗 [**Leia Mais: Monitoramento!**](./sections/production/monitoring.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 5.2. Aumente a transparência usando smart logging\n\n**TL;DR:** Logs podem ser um armazém inútil de instruções de debug ou o ativador de um belo dashboard que conta a história do seu app. Planeje sua plataforma de logs desde o primeiro dia: como os logs são coletados, armazenados e analisados para ter certeza de que as informações desejadas possam realmente ser extraídas, por exemplo, a avaliação de erro, após uma transação inteira através de serviços e servidores, etc.\n\n**Caso contrário:** Você acaba com uma caixa preta que é difícil de raciocinar, então você começa a reescrever todas as declarações de log para adicionar informações adicionais.\n\n🔗 [**Leia Mais: Aumente a transparência usando smart logging**](./sections/production/smartlogging.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 5.3. Delegue tudo o que for possível (por exemplo, gzip, SSL) a um proxy reverso\n\n**TL;DR:** O Node é terrivelmente ruim em fazer tarefas intensas de CPU como gzipping, SSL termination, etc. Você deve usar serviços de middleware “reais” como nginx, HAproxy ou serviços de nuvem.\n\n**Caso contrário:** Seu único e pobre thread permanecerá ocupado fazendo tarefas de infra-estrutura em vez de lidar com o núcleo da sua aplicação e o desempenho certamente será degradado.\n\n🔗 [**Leia Mais: Delegue tudo o que for possível (por exemplo, gzip, SSL) a um proxy reverso**](./sections/production/delegatetoproxy.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 5.4. Bloqueio de dependências\n\n**TL;DR:** Seu código deve ser idêntico em todos os ambientes, mas, surpreendentemente, o npm permite que as dependências derivem entre os ambientes por padrão - quando você instala pacotes em vários ambientes, ele tenta buscar a versão mais recente dos pacotes. Supere isso usando arquivos de configuração do npm, .npmrc, que dirão a cada ambiente para salvar a versão exata (não a última) de cada pacote. Outra alternativa, para um controle melhor, use o “shirinkwrap” do npm. \\*Atualização: a partir do NPM5, as dependências são bloqueadas por padrão. O novo gerenciador de pacotes no pedaço, Yarn, também faz isso por padrão.\n\n**Caso contrário:** O QA testará completamente o código e aprovará uma versão que se comportará de maneira diferente na produção. Pior ainda, servidores diferentes no mesmo cluster de produção podem executar código diferente.\n\n🔗 [**Leia Mais: Bloqueio de dependências**](./sections/production/lockdependencies.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 5.5. Poupe tempo de atividade do processo usando a ferramenta certa\n\n**TL;DR:** O processo deve continuar e ser reiniciado após falhas. Para cenários simples, as ferramentas de \"reinicialização\", como PM2, podem ser suficientes. Entretanto, no mundo atual \"dockerizado\", as ferramentas de gerenciamento de cluster também devem ser consideradas\n\n**Caso contrário:** Rodar dezenas de instâncias sem uma estratégia clara e muitas ferramentas juntas (gerenciamento de cluster, docker, PM2) pode levar o DevOps ao caos.\n\n🔗 [**Leia Mais: Poupe tempo de atividade do processo usando a ferramenta certa**](./sections/production/guardprocess.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 5.6. Utilize todos os núcleos do processador\n\n**TL;DR:** Em sua forma básica, uma aplicação Node roda em um único núcleo do processador enquanto todos os demais ficam inativos. É seu dever replicar o processamento do Node e utilizar todos os processadores. Para aplicações pequenas/médias você pode usar o Node Cluster ou PM2. Para uma aplicação maior, considere replicar o processo usando algum cluster do Docker (por exemplo, o K8S ou o ECS) ou scripts de deploy que são baseados no sistema de inicialização do Linux (por exemplo, systemd)\n\n**Caso contrário:** Sua aplicação vai utilizar apenas 25% dos recursos disponíveis(!) ou talvez até menos. Note que um servidor típico possui 4 núcleos de processamento ou mais, o deploy ingênuo do Node.js utiliza apenas 1 (mesmo usando serviços de PaaS como AWS Beanstalk!)\n\n🔗 [**Leia Mais: Utilize todos os núcleos do processador**](./sections/production/utilizecpu.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 5.7. Crie um ‘endpoint de manutenção’\n\n**TL;DR:** Exponha um conjunto de informações relacionadas ao sistema, como uso de memória e REPL, etc, em uma API segura. Embora seja altamente recomendado confiar em ferramentas padrões e de battle-tests, algumas informações e operações valiosas são mais fáceis de serem feitas usando código.\n\n**Caso contrário:** Você perceberá que está realizando muitos “deploys de diagnóstico” - enviando código para produção apenas para extrair algumas informações para fins de diagnóstico.\n\n🔗 [**Leia Mais: Crie um ‘endpoint de manutenção’**](./sections/production/createmaintenanceendpoint.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 5.8. Descubra erros e tempo de inatividade usando produtos APM\n\n**TL;DR:** Produtos de monitoramento e desempenho (também conhecidos como APM) medem a base de código e a API de forma proativa para que possam ir “automagicamente” além do monitoramento tradicional e medir a experiência geral do usuário entre os serviços e camadas. Por exemplo, alguns APMs podem destacar uma transação que é carregada muito lentamente no lado do usuário final, sugerindo a causa raiz.\n\n**Caso contrário:** Você pode gastar muito esforço medindo o desempenho e os tempos de inatividade da API, provavelmente você nunca saberá quais são suas partes de código mais lentas no cenário do mundo real e como elas afetam o UX.\n\n🔗 [**Leia Mais: Descubra erros e tempo de inatividade usando produtos APM**](./sections/production/apmproducts.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 5.9. Deixe seu código pronto para produção\n\n**TL;DR:** Programe com o fim em mente, planeje para produção desde o primeiro dia. Isso pode parecer vago, então eu compilei algumas dicas de desenvolvimento que estão relacionadas à manutenção de produção (clique no Gist abaixo).\n\n**Caso contrário:** Uma pessoa fera em TI/DevOps não salvará um sistema mal escrito.\n\n🔗 [**Leia Mais: Deixe seu código pronto para produção**](./sections/production/productioncode.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 5.10. Meça e proteja o uso de memória\n\n**TL;DR:** O Node.js tem uma relação controversa com o uso de memória: o motor v8 possui limites no uso de memória (1.4GB) e existem caminhos conhecidos para vazamentos de memória no código do Node - portanto, observar a memória do processo do Node é uma obrigação. Em aplicações pequenas, você pode medir a memória periodicamente usando comandos shell, mas em aplicação média-grande considere utilizar um sistema de monitoramento de memória robusto.\n\n**Caso contrário:** A memória de seus processos pode vazar cem megabytes por dia, assim como aconteceu no [Walmart](https://www.joyent.com/blog/walmart-node-js-memory-leak).\n\n🔗 [**Leia Mais: Meça e proteja o uso de memória**](./sections/production/measurememory.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 5.11. Deixe seus recursos de frontend fora do Node\n\n**TL;DR:** Sirva conteúdo de frontend usando um middleware dedicado (nginx, S3, CDN) pois o desempenho do Node fica realmente prejudicado quando se lida com muitos arquivos estáticos devido ao seu modelo single threaded (segmento único).\n\n**Caso contrário:** Seu único thread do Node ficará ocupado fazendo streaming the centenas de arquivos de html/imagens/angular/react ao invés de alocar todo seu recurso para a tarefa que ele foi designado - servir conteúdo dinâmico.\n\n🔗 [**Leia Mais: Deixe seus recursos de frontend fora do Node**](./sections/production/frontendout.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 5.12. Seja stateless, mate seus Servidores quase todos os dias\n\n**TL;DR:** Armazene qualquer tipo de dados (por exemplo, sessões de usuário, cache, arquivos de upload) em armazenamentos externos. Considere ‘matar’ seus servidores periódicamente ou utilize plataformas ‘serverless’ (por exemplo, AWS Lambda) que forçam explicitamente um comportamento stateless.\n\n**Caso contrário:** Falha em um determinado servidor resultará em tempo de inatividade da aplicação, em vez de apenas matar uma máquina defeituosa. Além do mais, dimensionar a elasticidade será mais desafiador devido à dependência de um servidor específico.\n\n🔗 [**Leia Mais: Seja stateless, mate seus Servidores quase todos os dias**](./sections/production/bestateless.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 5.13. Utilize ferramentas que detectam vulnerabilidades automaticamente\n\n**TL;DR:** Mesmo as dependências mais confiáveis, como o Express, têm vulnerabilidades conhecidas (de tempos em tempos) que podem colocar um sistema em risco. Isso pode ser contornado usando ferramentas comunitárias e comerciais que constantemente verificam vulnerabilidades e avisam (localmente ou no Github). Algumas podem até corrigí-las imediatamente.\n\n**Caso contrário:** Manter seu código limpo com vulnerabilidades sem ferramentas dedicadas exigirá o acompanhamento constante de publicações online sobre novas ameaças. Bem entendiante.\n\n🔗 [**Leia Mais: Utilize ferramentas que detectam vulnerabilidades automaticamente**](./sections/production/detectvulnerabilities.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 5.14. Atribua‘TransactionId’ para cada declaração de log\n\n**TL;DR:** Atribua o mesmo identificador, transaction-id: {some value}, para cada entrada de log dentro de um mesmo request. Depois, ao inspecionar erros em logs, conclua facilmente o que aconteceu antes e depois. Infelizmente, isso não é fácil de se conseguir no Node, devido à sua natureza assíncrona. Veja exemplos de código.\n\n**Caso contrário:** Observar um log de erros de produção sem o contexto - o que aconteceu antes - torna muito mais difícil e mais lento raciocinar sobre o problema.\n\n🔗 [**Leia Mais: Atribua ‘TransactionId’ para cada declaração de log**](./sections/production/assigntransactionid.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 5.15. Defina NODE_ENV=production\n\n**TL;DR:** Defina a variável de ambiente NODE_ENV para ‘production’ ou ‘development’ para sinalizar se as otimizações de produção devem ser ativadas - muitos pacotes npm determinam o ambiente atual e otimizam seu código para produção.\n\n**Caso contrário:** Omitir esta simples propriedade pode degradar muito o desempenho. Por exemplo, ao utilizar o Express para renderização do lado do servidor, omitir o NODE_ENV o torna mais lento!\n\n🔗 [**Leia Mais: Defina NODE_ENV=production**](./sections/production/setnodeenv.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 5.16. Projete deploys automáticos, atômicos e com tempo de inatividade zero\n\n**TL;DR:** Pesquisas mostram que times que executam muitos deploys, reduzem a probabilidade de problemas graves em produção. Deploys rápidos e automatizados que não necessitam de processos manuais arriscados e significativo tempo de inatividade, melhoram o processo de deploy. Provavelmente, você irá alcançar isso usando Docker, combinado com ferramentas de CI, pois elas se tornaram o padrão do setor para deploy simplificado.\n\n**Caso contrário:** Deploys demorados -> tempo de inatividade de produção e erro relacionado a humanos -> equipe não-confiante com os deploys -> menos implantações e recursos.\n\n<br/><br/>\n\n## ![✔] 5.17. Use uma versão LTS do Node.js\n\n**TL;DR:** Certifique de que você está usando uma versão LTS do Node.js para receber correção de bugs críticos, atualizações de segurança e melhorias de performance.\n\n**Caso contrário:** Bugs recentemente descobertos e vulnerabilidades podem ser usados para explorar uma aplicação em produção, e sua aplicação pode se tornar incompatível com vários módulos e mais difícil de manter.\n\n🔗 [**Leia Mais: Use uma versão LTS do Node.js**](./sections/production/LTSrelease.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 5.18. Não direcione logs dentro do aplicativo\n\n**TL;DR:** O destino dos logs não devem ser codificados na unha por desenvolvedores, dentro do código da aplicação. Ao invés disso, deve ser definido pelo ambiente de execução no qual a aplicação é executada. Desenvolvedores devem escrever logs para stdout usando um utilitário logger e depois deixar o ambiente de execução (container, servidor, etc) canalizar o fluxo do stdout para o destino apropriado (por exemplo: Splunk, Graylog, ElasticSearch, etc).\n\n**Caso contrário:** Aplicações manipulando o roteamento de log === difícil de dimensionar, perda de logs, separação ruim de preocupações.\n\n🔗 [**Leia Mais: Roteamento de Logs**](./sections/production/logrouting.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 5.19. Instale seus pacotes com `npm ci`\n\n**TL;DR:** Você precisa ter certeza de que o código de produção usa a versão exata dos pacotes que você realizou os testes. Execute `npm ci` para fazer estritamente uma instalação limpa de suas dependências correspondentes do package.json e do package-lock.json. O uso desse comando é recomendado em ambientes automatizados, como pipelines de integração contínua.\n\n**Caso contrário:** o QA testará completamente o código e aprovará uma versão que se comportará de maneira diferente em produção. Pior ainda, diferentes servidores no mesmo cluster de produção podem executar códigos diferentes.\n\n🔗 [**Read More: Use npm ci**](./sections/production/installpackageswithnpmci.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#índice\">⬆ Voltar ao topo</a></p>\n\n# `6. Boas Práticas em Segurança`\n\n<div align=\"center\">\n<img src=\"https://img.shields.io/badge/OWASP%20Threats-Top%2010-green.svg\" alt=\"54 items\"/>\n</div>\n\n## ![✔] 6.1. Adote as regras de segurança do linter\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20XSS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Faça uso de plugins de linter relacionados à segurança, como por exemplo o [eslint-plugin-security](https://github.com/nodesecurity/eslint-plugin-security) para capturar vulnerabilidades de segurança e erros o mais cedo possível, na melhor das hipóteses, enquanto estão sendo codificados. Isso pode ajudar a detectar pontos fracos de segurança, como usar o eval, invocar um processo filho ou importar um módulo com string literal (por exemplo, input do usuário). Clique em ‘Leia Mais’ abaixo para ver exemplos de códigos que serão capturados por um linter de segurança.\n\n**Caso contrário:** O que poderia ser um ponto fraco de segurança durante o desenvolvimento, pode se tornar um grande problema no ambiente de produção. Além disso, o projeto pode não seguir práticas de segurança de código consistentes, levando a vulnerabilidades sendo introduzidas ou segredos confidenciais comprometidos em repositórios remotos.\n\n🔗 [**Leia Mais: Regras de Lint**](sections/security/lintrules.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 6.2. Limite requests simultâneos usando um middleware\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Ataques DOS são muito populares e relativamente fáceis de conduzir. Implemente uma limitação de taxa, usando um serviço externo como balanceadores de carga de nuvem, firewalls de nuvem, nginx, o pacote [rate-limiter-flexible](https://www.npmjs.com/package/rate-limiter-flexible), ou (para aplicações menores e menos críticas) um middleware limitador de taxa (por exemplo, [express-rate-limit](https://www.npmjs.com/package/express-rate-limit))\n\n**Caso contrário:** Uma aplicação pode estar sujeita a um ataque resultando em uma queda do serviço, onde usuários reais recebem um serviço degradado ou indisponível.\n\n🔗 [**Leia Mais: Implementando limitador de taxa**](sections/security/limitrequests.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 6.3 Extraia segredos dos config files ou use pacotes para criptografá-los\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A3:Sensitive%20Data%20Exposure%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Nunca armazene segredos em textos simples em arquivos de configuração ou códigos fonte. Em vez disso, use sistemas de gerenciamento secreto como produtos Vault, Kubernetes/Docker Secrets, ou use variáveis de ambiente. Como resultado final, os segredos armazenados no código fonte devem ser criptografados e gerenciados(rolling keys, expiring, auditing, etc). Faça uso de hooks de pre-commit/push para evitar que faça o commit de secredos acidentalmente.\n\n**Caso contrário:** O controle de origem, mesmo para repositórios privados, pode ser tornado público por engano, quando todos os segredos são expostos. O acesso ao controle de origem para uma parte externa fornecerá inadvertidamente acesso a sistemas relacionados (bancos de dados, APIs, serviços, etc.).\n\n🔗 [**Leia Mais: Gerenciamento de segredos**](sections/security/secretmanagement.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 6.4. Impeça vulnerabilidades de query injection com bibliotecas ORM/ODM\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Para evitar SQL/NoSQL injection e outros ataques maliciosos, sempre faça uso de um ORM/ODM ou de uma biblioteca de banco de dados que proteja os dados ou suporte consultas parametrizadas nomeadas ou indexadas, e que cuide da validação de entrada do usuário para os tipos esperados. Nunca use apenas template strings do JavaScript ou concatenação de string para injetar valores em queries, pois isto abre sua aplicação para muitas vulnerabilidades. Todas as bibliotecas respeitáveis de acesso a dados do Node.js (por exemplo, [Sequelize](https://github.com/sequelize/sequelize), [Knex](https://github.com/tgriesser/knex), [mongoose](https://github.com/Automattic/mongoose)) possuem proteção contra ataques de injeção.\n\n**Caso contrário:** A entrada de usuários não validados pode levar à injeção do operador ao trabalhar com MongoDB para NoSQL e não usar um sistema próprio ou ORM irão permitir facilmente um ataque de SQL injection, criando uma grande vulnerabilidade.\n\n🔗 [**Leia Mais: Prevenção de query injection usando bibliotecas de ORM/ODM**](./sections/security/ormodmusage.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 6.5. Coleção genérica de boas práticas de segurança\n\n**TL;DR:** Esta é uma coleção de conselhos de segurança que não estão relacionadas diretamente com Node.js - a implementação do Node não é muito diferente comparado a outras linguagens. Clique em “leia mais” para dar uma olhada.\n\n🔗 [**Leia Mais: Boas práticas comuns de segurança**](./sections/security/commonsecuritybestpractices.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 6.6. Ajuste os headers de resposta HTTP para uma segurança aprimorada\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Sua aplicação deve estar utilizando headers seguros para evitar que invasores façam ataques comuns, como scripts entre sites (XSS), clickjacking, dentre outros ataques maliciosos. Eles podem ser configurados facilmente usando módulos como o [helmet](https://www.npmjs.com/package/helmet).\n\n**Caso contrário:** Invasores podem realizar ataques diretos aos usuários de sua aplicação, levando a grandes vulnerabilidades de segurança.\n\n🔗 [**Leia Mais: Usando headers seguros em sua aplicação**](./sections/security/secureheaders.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 6.7. Inspecione constante e automaticamente por dependências vulneráveis\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Known%20Vulnerabilities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Com o ecosistema do npm, é comum um projeto ter várias dependências. Dependências sempre devem ser checadas em caso de novas vulnerabilidades serem encontradas. Utilize ferramentas como [npm audit](https://docs.npmjs.com/cli/audit) ou [snyk](https://snyk.io/) para rastrear, monitorar e corrigir dependências vulneráveis. Integre estas ferramentas com a configuração de seu CI, para que você possa capturar uma dependência vulnerável antes que ela afete o ambiente de produção.\n\n**Caso contrário:** Um invasor pode detectar seu framework web e atacar todas suas vulnerabilidades.\n\n🔗 [**Leia Mais: Segurança de dependências**](./sections/security/dependencysecurity.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 6.8. Evite usar a biblioteca de criptografia do Node.js para manipular senhas, use Bcrypt\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Senhas ou segredos (chaves de API), devem ser armazenadas usando um hash seguro + salt function como bcrypt, que deve ser a escolha preferencial em relação à sua implementação de JavaScript, devido a razões de desempenho e segurança.\n\n**Caso contrário:** Senhas ou segredos que são persistidos sem o uso de uma função segura, são vulneráveis a força bruta e ataques de dicionário que levarão eventualmente à sua divulgação.\n\n🔗 [**Leia Mais: Use o Bcrypt**](./sections/security/bcryptpasswords.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 6.9. Fuja de saídas HTML, JS e CSS\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Dados não confiáveis que são enviados para o browser podem ser executados em invés de serem exibidos. Isso está sendo comumente referido como um ataque de script entre sites (XSS). Evite isto, usando bibliotecas dedicadas que marcam explicitamente os dados como conteúdo puro que nunca deve ser executado (por exemplo: encoding, escaping).\n\n**Caso contrário:** Um invasor pode armazenar um código JavaScript malicioso em seu banco de dados, que será enviado para os clientes.\n\n🔗 [**Leia Mais: Evite saídas**](./sections/security/escape-output.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 6.10. Valide os esquemas de entrada JSON\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7: XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A8:Insecured%20Deserialization%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Valide as requisições do body e garanta que elas atendem as expectativas e falhem rápido se não atender. Para evitar o tédio de códigos de validação para cada rota, você pode usar leves esquemas de validação baseados em JSON, como [jsonschema](https://www.npmjs.com/package/jsonschema) ou [joi](https://www.npmjs.com/package/joi)\n\n**Caso contrário:** Sua generosidade e abordagem permissiva aumentam muito a superfície de ataque e incentivam o invasor a experimentar muitas entradas até encontrar alguma combinação para travar a aplicação.\n\n🔗 [**Leia Mais: Valide os esquemas de entrada JSON**](./sections/security/validation.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 6.11. Ajude a inserir JWTs em listas negras\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Ao usar JSON Web Tokens (por exemplo, com [Passport.js](https://github.com/jaredhanson/passport)), por padrão não existem mecanismos para revogar o acesso de tokens problemáticos. Uma vez descoberta alguma atividade maliciosa do usuário, não há como impedi-lo de acessar o sistema, desde que ele tenha um token válido. Abrande isso implementando uma lista negra de tokens não confiáveis que são validados em cada solicitação.\n\n**Caso contrário:** Tokens expirados ou extraviados, podem ser usados maliciosamente por terceiros para acessar uma aplicação e para representar o proprietário do token.\n\n🔗 [**Leia Mais: Blacklist de JSON Web Tokens**](./sections/security/expirejwt.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 6.12. Evite ataques de força bruta contra autorização\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Uma técnica simples e poderosa é limitar as tentativas de autorização usando duas métricas:\n\n1. A primeiro é o número de tentativas consecutivas com falha do mesmo ID/nome e endereço IP exclusivos do usuário.\n2. A segundo é o número de tentativas malsucedidas de um endereço IP durante um longo período de tempo. Por exemplo, bloqueie um endereço IP se ele fizer 100 tentativas com falha em um dia.\n\n**Caso contrário:** Um invasor pode emitir tentativas ilimitadas de senha automatizada para obter acesso a contas com privilégios em uma aplicação.\n\n🔗 [**Leia Mais: Limitando a taxa de login**](./sections/security/login-rate-limit.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 6.13. Rode o Node.js como um usuário que não seja root\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A5:Broken%20Access%20Access%20Control-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Existe um cenário comum em que o Node.js é executado como um usuário root com permissões ilimitadas. Por exemplo, esse é o comportamento padrão em contêineres do Docker. É recomendável criar um usuário não raiz e associá-lo à imagem do Docker (exemplos abaixo) ou executar o processo em nome desse usuário chamando o container com o sinalizador \"-u username\".\n\n**Caso contrário:** Um invasor que consiga executar um script no servidor obtém poder ilimitado sobre a máquina local (por exemplo, alterar o iptable e redirecionar o tráfego para seu servidor).\n\n🔗 [**Leia Mais: Rode o Node.js com um usuário não raiz**](./sections/security/non-root-user.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 6.14. Limite o tamanho do payload usando um proxy reverso ou um middleware\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A8:Insecured%20Deserialization%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Quanto maior o payload do body, mais difícil será o processamento de um único segmento. Esta é uma oportunidade para os invasores colocarem seus servidores de joelhos sem uma enorme quantidade de solicitações (ataques DOS / DDOS). Reduza isso limitando o tamanho do corpo das solicitações recebidas (por exemplo, firewall, ELB) ou configurando o [express body parser](https://github.com/expressjs/body-parser) para aceitar somente cargas de tamanho pequeno.\n\n**Caso contrário:** Sua aplicação terá que lidar com solicitações grandes, incapazes de processar o outro trabalho importante que ele precisa realizar, o que leva a implicações de desempenho e vulnerabilidade em relação a ataques DOS.\n\n🔗 [**Leia Mais: Limite o tamanho dos payloads**](./sections/security/requestpayloadsizelimit.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 6.15. Evite instruções eval do JavaScript\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** `eval` é do mal, pois permite a execução de um código JavaScript personalizado durante o tempo de execução. Isso não é apenas uma preocupação de desempenho, mas também uma importante preocupação de segurança devido ao código JavaScript malicioso que pode ser originado da entrada do usuário. Outra feature da linguagem que deve ser evitada é o construtor `new Function` constructor. `setTimeout` e `setInterval` também não devem ser receber código JavaScript dinâmico.\n\n**Caso contrário:** o código JavaScript malicioso encontra um caminho para um texto passado para o eval ou outras funções de avaliação em tempo real da linguagem JavaScript, e terá acesso total às permissões do JavaScript na página. Essa vulnerabilidade geralmente se manifesta como um ataque XSS.\n\n🔗 [**Leia Mais: Evite instruções eval do JavaScript**](./sections/security/avoideval.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 6.16. Evite que RegEx maliciosos sobrecarreguem sua execução de thread único\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Regular Expressions, embora sejam úteis, representam uma ameaça real para aplicativos JavaScript em geral, e a plataforma Node.js em particular .Uma entrada do usuário para correspondência de texto pode exigir uma quantidade maior de ciclos de CPU para processar. O processamento RegEx pode ser ineficiente até um ponto em que uma única solicitação que valida 10 palavras pode bloquear todo o loop de eventos por 6 segundos e botar 🔥 na CPU. Por essa razão, prefira pacotes de validação de terceiros como [validator.js](https://github.com/chriso/validator.js) ao invés de escrever seus próprios pardrões de Regex, ou faça uso do [safe-regex](https://github.com/substack/safe-regex) para detectar padrões vulneráveis de regex.\n\n**Caso contrário:** Expressões regulares mal escritas podem ser suscetíveis a ataques de Regular Expresssion DoS, que irão bloquear completamente o loop de eventos. Por exemplo, o popular pacote `moment` foi encontrado com vulnerabilidades de uso de RegEx maliciosos em novembro de 2017.\n\n🔗 [**Leia Mais: Evite RegEx maliciosos**](./sections/security/regex.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 6.17. Evite o carregamento de módulos usando uma variável\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Evite fazer require ou importar outro arquivo com um caminho que tenha sido fornecido como parâmetro devido à preocupação de que ele possa ter se originado da entrada do usuário. Esta regra pode ser estendida para acessar arquivos em geral (ou seja, `fs.readFile()`) ou outro acesso a recursos confidenciais com variáveis dinâmicas provenientes da entrada do usuário. O linter [Eslint-plugin-security](https://www.npmjs.com/package/eslint-plugin-security) pode pegar esses padrões e avisar o quanto antes.\n\n**Caso contrário:** A entrada de usuário mal-intencionada pode encontrar o caminho para um parâmetro usado para require de arquivos adulterados, por exemplo, um arquivo carregado anteriormente no sistema de arquivos ou para acessar arquivos de sistema já existentes.\n\n🔗 [**Leia Mais: Carregamento seguro de módulos**](./sections/security/safemoduleloading.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 6.18. Rode códigos não seguros em uma sandbox\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Quando a tarefa for executar código externo que é fornecido em tempo de execução (por exemplo, plug-in), use qualquer tipo de ambiente de execução 'sandbox' que isole e proteja o código principal em relação ao plug-in. Isso pode ser feito usando um processo dedicado (por exemplo, cluster.fork ()), ambiente serverless ou pacotes npm dedicados que atuam como uma sandbox.\n\n**Caso contrário:** Um plugin pode atacar através de uma infinita variedade de opções, como loops infinitos, sobrecarga de memória e acesso a variáveis sensíveis do ambiente de processo.\n\n🔗 [**Leia Mais: Rode códigos não seguros em uma sandbox**](./sections/security/sandbox.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 6.19. Tome cuidado extra ao trabalhar com processos filhos\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Evite usar processos filhos quando possível e valide e limpe a entrada para mitigar os ataques de shell injection se ainda precisar. Prefira usar `child_process.execFile` que, por definição, só executará um único comando com um conjunto de atributos e não permitirá a expansão de parâmetros do shell.\n\n**Caso contrário:** O uso ingênuo de processos filhos pode resultar na execução de comandos remotos ou em ataques de shell injection, devido à entrada do usuário mal-intencionado passada para um comando do sistema não-autorizado.\n\n🔗 [**Leia Mais: Tenha cautela ao trabalhar com processos filhos**](./sections/security/childprocesses.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 6.20. Oculte detalhes de erros dos usuários\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Um manipulador de erros integrado do express oculta os detalhes de erros por padrão. Entretanto, são grandes as chances de você implementar sua própria lógica para manipular erros com objetos de erro customizados (considerado por muitos, a melhor prática). Se você faz isso, tenha certeza de que não está retornando o objeto Error inteiro para o cliente, pois ele pode conter detalhes confidenciais da aplicação.\n\n**Caso contrário:** Detalhes confidenciais da aplicação como caminhos e arquivos do servidor, módulos de terceiros em uso e outros workflows internos da aplicação poderiam ser explorados e expostos por um invasor.\n\n🔗 [**Leia Mais: Oculte detalhes de erros dos usuários**](./sections/security/hideerrors.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 6.21. Configure 2FA para o npm ou Yarn\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Qualquer passo na cadeia de desenvolvimento deve ser protegido com o MFA (multi-factor authentication, ou autenticação em várias etapas), e o npm / Yarn é uma boa oportunidade para os invasores poderem colocar as mãos na senha de algum desenvolvedor. Usando as credenciais de desenvolvedor, os invasores podem injetar código malicioso em bibliotecas que são amplamente instaladas em projetos e serviços. Talvez, até mesmo por toda a rede de internet, se publicado abertamente. Ativando a 2-factor-authentication (autenticação em duas etapas) no npm, reduz a quase zero as chances de invasores alterarem seu código.\n\n**Caso contrário:** [Você já ouviu falar sobre o desenvolvedor do eslint cuja senha foi hackeada?](https://medium.com/@oprearocks/eslint-backdoor-what-it-is-and-how-to-fix-the-issue-221f58f1a8c8)\n\n<br/><br/>\n\n## ![✔] 6.22. Modifique as configurações do middleware de sessão\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Cada framework e tecnologia web tem seus pontos fracos conhecidos - dizer aos invasores qual framework utilizamos é uma grande ajuda para eles. Usar as configurações padrões para middlewares de sessão pode expor sua aplicação - e ataques específicos ao framework, semelhantes ao heade `X-Powered-By` header. Tente ocultar qualquer coisa que possa identificar ou revelar sua stack (por exemplo, Node.js, express).\n\n**Caso contrário:** Cookies podem ser enviados através de conexões não seguras, e um hacker pode usar a sessão do usuário para identificar o framework utilizado na aplicação, bem como vulnerabilidades específicas do módulo.\n\n🔗 [**Leia Mais: Segurança de cookies e sessões**](./sections/security/sessions.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 6.23. Evite ataques do DOS definindo explicitamente quando um processo deve falhar\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** O processo do Node irá falhar quando os erros não forem tratados. Muitas boas práticas recomendam sair, mesmo que um erro tenha sido detectado e resolvido. O Express, por exemplo, irá falhar em qualquer erro assíncrono - a menos que você envolva rotas com uma cláusula catch. Isso abre um ponto de ataque muito fácil para os hackers que reconhecem qual entrada faz o processo falhar e enviam repetidamente o mesmo request. Não existe solução instantânea para isso, mas algumas técnicas podem aliviar a dor: Alertar com severidade crítica sempre que um processo falha devido a um erro não tratado, validar a entrada e evitar travar o processo devido à entrada inválida do usuário, envolver todas as rotas com uma cláusula catch e considerar não travar quando um erro é originado em uma solicitação o que acontece globalmente).\n\n**Caso contrário:** Este é apenas um palpite: dado muitos aplicações Node.js, se tentarmos passar um JSON vazio para todas as solicitações POST, um punhado de aplicações falhará. Nesse ponto, podemos apenas repetir o envio da mesma solicitação para derrubar as aplicações com facilidade.\n\n<br/><br/>\n\n## ![✔] 6.24. Impeça redirecionamentos não seguros\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Redirecionamentos que não validam a entrada do usuário podem permitir que invasores iniciem tentativas de phishing, roubem credenciais de usuários e executem outras ações mal-intencionadas.\n\n**Caso contrário:** Se um invasor descobrir que você não está validando informações externas fornecidas pelo usuário, ele poderá explorar essa vulnerabilidade postando links especialmente em fóruns, mídias sociais e outros locais públicos para que os usuários cliquem.\n\n🔗 [**Leia Mais: Impeça redirecionamentos não seguros**](./sections/security/saferedirects.brazilian-portuguese.md)\n\n<br/><br/>\n\n## ![✔] 6.25. Evite publicar segredos no registro do npm\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20Ameaças%20OWASP%20-%20A6:Configuração%20Incorreta%20de%20Segurança%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Precauções devem ser tomadas para evitar o risco de publicação acidental de segredos nos registros públicos do npm. Um arquivo `.npmignore` pode ser usado para colocar arquivos ou pastas específicos em uma blacklist, ou a lista `files` no `package.json` pode atuar como uma whitelist.\n\n**Caso contrário:** As chaves, as senhas ou outros segredos da API do seu projeto estão sujeitos a abusos por qualquer pessoa que os encontre, o que pode resultar em perda financeira, falsificação de identidade e outros riscos.\n\n🔗 [**Leia Mais: Evite publicar segredos**](./sections/security/avoid_publishing_secrets.brazilian-portuguese.md)\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#índice\">⬆ Voltar ao topo</a></p>\n\n# `7. Boas Práticas em Performance`\n\n## Nossos colaboradores estão trabalhando nesta seção. [Gostaria de participar?](https://github.com/goldbergyoni/nodebestpractices/issues/256)\n\n## ![✔] 7.1. Prefira métodos JS nativos ao invés de utilitários de usuário, como o Lodash\n\n**TL;DR:** Muitas vezes é mais complicado usar bibliotecas de utilitários como o `lodash` e `underscore` sobre os métodos nativos, pois leva a dependências desnecessárias e desempenho mais lento.\nTenha em mente que, com a introdução do novo motor V8 juntamente com os novos padrões ES, os métodos nativos foram aprimorados de tal forma que agora ele tem cerca de 50% a mais de desempenho que as bibliotecas de utilitários.\n\n**Caso contrário:** Você terá que manter projetos de menor desempenho onde você poderia simplesmente ter usado o que **já estava** disponível ou lidar com mais algumas linhas em troca de mais alguns arquivos.\n\n🔗 [**Leia Mais: Prefira métodos nativos ao invés de utilitários do usuário como Lodash**](./sections/performance/nativeoverutil.brazilian-portuguese.md)\n\n<br/><br/><br/>\n\n# Feitos\n\nPara manter este guia e deixá-lo atualizado, estamos constantemente atualizando e aprimorando as diretrizes e as práticas recomendadas com a ajuda da comunidade. Você pode acompanhar nossos [feitos](https://github.com/goldbergyoni/nodebestpractices/milestones) e se juntar aos grupos de trabalho, caso queira contribuir com este projeto.\n\n<br/>\n\n## Traduções\n\nTodas as traduções são contribuições da comunidade. Nós ficaremos felizes em obter ajuda com traduções concluídas, em andamento, ou mesmo com novas traduções!\n\n### Traduções concluídas\n\n- ![BR](./assets/flags/BR.png) [Português Brasileiro](./README.brazilian-portuguese.md) - Cortesia de [Marcelo Melo](https://github.com/marcelosdm)\n- ![CN](./assets/flags/CN.png) [Chinês](README.chinese.md) - Cortesia de [Matt Jin](https://github.com/mattjin)\n- ![EU](./assets/flags/EU.png) [Vasco](README.basque.md) - Cortesia de [Ane Diaz de Tuesta](https://github.com/anediaz) & Joxefe Diaz de Tuesta\n\n### Traduções em andamento\n\n- ![FR](./assets/flags/FR.png) [Francês](https://github.com/gaspaonrocks/nodebestpractices/blob/french-translation/README.french.md) ([Discussão](https://github.com/goldbergyoni/nodebestpractices/issues/129))\n- ![HE](./assets/flags/HE.png) Hebraico ([Discussão](https://github.com/goldbergyoni/nodebestpractices/issues/156))\n- ![KR](./assets/flags/KR.png) [Coreano](https://github.com/goldbergyoni/nodebestpractices/blob/korean-translation/README.md) ([Discussão](https://github.com/goldbergyoni/nodebestpractices/issues/94))\n- ![RU](./assets/flags/RU.png) [Russo](https://github.com/goldbergyoni/nodebestpractices/blob/russian-translation/README.russian.md) ([Discussão](https://github.com/goldbergyoni/nodebestpractices/issues/454))\n- ![ES](./assets/flags/ES.png) [Espanhol](https://github.com/goldbergyoni/nodebestpractices/blob/spanish-translation/README.spanish.md) ([Discussão](https://github.com/goldbergyoni/nodebestpractices/issues/95))\n- ![TR](./assets/flags/TR.png) Turco ([Discussão](https://github.com/goldbergyoni/nodebestpractices/issues/139))\n\n<br/><br/>\n\n## Comitê Diretivo\n\nConheça os membros do comitê diretivo - as pessoas que trabalham juntas para fornecer orientação e direção futura para o projeto. Além disso, cada membro do comitê lidera um projeto rastreado em nossos [projetos do Github](https://github.com/goldbergyoni/nodebestpractices/projects).\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/yoni.png\"/>\n\n[Yoni Goldberg](https://github.com/goldbergyoni)\n<a href=\"https://twitter.com/goldbergyoni\"><img src=\"assets/images/twitter-s.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://goldbergyoni.com\"><img src=\"assets/images/www.png\" width=\"16\" height=\"16\"></img></a>\n\nConsultor de Node.js independente, que trabalha com clientes nos EUA, Europa e Israel, na criação de aplicações Node dimensionáveis em grande escala. Muitas das melhores práticas acima foram publicadas primeiro em um post em seu blog em [goldbergyoni.com](https://goldbergyoni.com). Encontre-o como @goldbergyoni ou me@goldbergyoni.com\n\n<br/>\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/bruno.png\"/>\n\n[Bruno Scheufler](https://github.com/BrunoScheufler)\n<a href=\"https://brunoscheufler.com/\"><img src=\"assets/images/www.png\" width=\"16\" height=\"16\"></img></a>\n\n💻 full-stack web engineer e entusiasta de Node.js & GraphQL\n\n<br/>\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/kyle.png\"/>\n\n[Kyle Martin](https://github.com/js-kyle)\n<a href=\"https://twitter.com/kylemartin_93\"><img src=\"assets/images/twitter-s.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://www.linkedin.com/in/kylemartinnz\"><img src=\"assets/images/linkedin.png\" width=\"16\" height=\"16\"></img></a>\n\nFull Stack Developer e Engenheiro de Confiabilidade de Sites com sede na Nova Zelândia, interessados ​​em segurança de aplicativos da Web, e arquitetando e construindo aplicativos Node.js para executar em escala global.\n\n<br/>\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/sagir.png\"/>\n\n[Sagir Khan](https://github.com/sagirk)\n<a href=\"https://twitter.com/sagir_k\"><img src=\"assets/images/twitter-s.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://sagirk.com\"><img src=\"assets/images/www.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://linkedin.com/in/sagirk\"><img src=\"assets/images/linkedin.png\" width=\"16\" height=\"16\"></img></a>\n\nEspecialista profundo em JavaScript e seu ecossistema - React, Node.js, MongoDB, praticamente qualquer coisa que envolva o uso de JavaScript/JSON em qualquer camada do sistema - criando produtos usando a plataforma da web para as marcas mais reconhecidas do mundo. Membro individual da \"Node.js Foundation\", colaborando em \"Community Committee's Website Redesign Initiative\".\n\n<br/>\n\n## Colaboradores\n\nObrigado a todos nossos colaboradores! 🙏\n\nNossos colaboradores são membros que estão contribuindo com o repositório em base regular, sugerindo novas práticas recomendadas, triando problemas, analisando solicitações de pull e muito mais. Se você estiver interessado em nos ajudar a orientar milhares de pessoas a criar melhores aplicações Node.js, leia nossas [diretrizes de colaborador](./.operations/CONTRIBUTING.md) 🎉\n\n| <a href=\"https://github.com/idori\" target=\"_blank\"><img src=\"assets/images/members/ido.png\" width=\"75\" height=\"75\"/></a> | <a href=\"https://github.com/TheHollidayInn\" target=\"_blank\"><img src=\"assets/images/members/keith.png\" width=\"75\" height=\"75\"/></a> |\n| :---------------------------------------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------------------------------------------------: |\n|                                    [Ido Richter (Founder)](https://github.com/idori)                                    |                                        [Keith Holliday](https://github.com/TheHollidayInn)                                         |\n\n### Colaboradores anteriores\n\n| <a href=\"https://github.com/refack\" target=\"_blank\"><img src=\"assets/images/members/refael.png\" width=\"50\" height=\"50\"/></a> |\n| :-------------------------------------------------------------------------------------------------------------------------: |\n|                                        [Refael Ackermann](https://github.com/refack)                                        |\n\n<br/>\n\n## Thank You Notes\n\nWe appreciate any contribution, from a single word fix to a new best practice. View our contributors and [contributing documentation here!](./README.md#contributors-)\n\n<br/><br/><br/>\n"
        },
        {
          "name": "README.chinese.md",
          "type": "blob",
          "size": 64.41,
          "content": "[✔]: assets/images/checkbox-small-blue.png\n\n# Node.js 最佳实践\n\n<h1 align=\"center\">\n  <img src=\"assets/images/banner-2.jpg\" alt=\"Node.js Best Practices\" />\n</h1>\n\n<br/>\n\n<div align=\"center\">\n  <img src=\"https://img.shields.io/badge/⚙%20Item%20count%20-%2082%20Best%20Practices-blue.svg\" alt=\"82 items\"/> <img src=\"https://img.shields.io/badge/%F0%9F%93%85%20Last%20update%20-%20Jun%205%202019-green.svg\" alt=\"Last update: June 5, 2019\"/> <img src=\"https://img.shields.io/badge/ %E2%9C%94%20Updated%20For%20Version%20-%20Node%2012.4.0%20LTS-brightgreen.svg\" alt=\"Updated for Node 12.4.0 LTS\"/>\n</div>\n\n<br/>\n\n [![nodepractices](./assets/images/twitter-s.png)](https://twitter.com/nodepractices/) **Follow us on Twitter!** [**@nodepractices**](https://twitter.com/nodepractices/)\n <br/>\n\n# 欢迎! 首先您应该知道的三件事情\n\n**1. 当您读到这里，实际上您读了很多关于Node.js的优秀文章 -** 这是对Node.js最佳实践中排名最高的内容的总结和分享\n\n**2. 这里是最大的汇集，且每周都在增长 -** 当前，超过50个最佳实现，样式指南，架构建议已经呈现。每天都有新的issue和PR被创建，以使这本在线书籍不断更新。我们很乐于见到您能在这里做出贡献，不管是修复一些代码的错误，或是提出绝妙的新想法。请查看我们的[milestones](https://github.com/goldbergyoni/nodebestpractices/milestones?direction=asc&sort=due_date&state=open)\n\n**3. 大部分的条目包含额外的信息 -** 大部分的最佳实践条目的旁边，您将发现 **🔗Read More** 链接，它将呈现给您示例代码，博客引用和更多信息\n\n<br/><br/><br/>\n\n## [目录](#table-of-contents)\n\n1. [项目结构实践 (5) ](#1-project-structure-practices)\n2. [异常处理实践 (11) ](#2-error-handling-practices)\n3. [编码规范实践 (12) ](#3-code-style-practices)\n4. [测试和总体质量实践 (8) ](#4-testing-and-overall-quality-practices)\n5. [进入生产实践 (16) ](#5-going-to-production-practices)\n6. :star: 新: [安全实践(23)](#6-security-best-practices)\n7. Performance Practices ([coming soon](https://github.com/goldbergyoni/nodebestpractices/milestones?direction=asc&sort=due_date&state=open))\n\n<br/><br/><br/>\n<h1 id=\"1-project-structure-practices\"><code>1. 项目结构实践</code></h1>\n\n## ![✔] 1.1 组件式构建你的解决方案\n\n **TL;DR:** 大型项目的最坏的隐患就是维护一个庞大的，含有几百个依赖的代码库 - 当开发人员准备整合新的需求的时候，这样一个庞然大物势必减缓了开发效率。反之，把您的代码拆分成组件，每一个组件有它自己的文件夹和代码库，并且确保每一个组件小而简单。查看正确的项目结构的例子请访问下面的 ‘更多’ 链接。\n\n**否则:** 当编写新需求的开发人员逐步意识到他所做改变的影响，并担心会破坏其他的依赖模块 - 部署会变得更慢，风险更大。当所有业务逻辑没有被分开，这也会被认为很难扩展\n\n🔗 [**更多: 组件结构**](./sections/projectstructre/breakintcomponents.chinese.md)\n\n<br/><br/>\n\n## ![✔] 1.2 分层设计组件，保持Express在特定的区域\n\n**TL;DR:** 每一个组件都应该包含'层级' - 一个专注的用于接入网络，逻辑，数据的概念。这样不仅获得一个清晰的分离考量，而且使仿真和测试系统变得异常容易。尽管这是一个普通的模式，但接口开发者易于混淆层级关系，比如把网络层的对象（Express req, res）传给业务逻辑和数据层 - 这会令您的应用彼此依赖，并且只能通过Express使用。\n\n**否则:** 对于混淆了网络层和其它层的应用，将不易于测试，执行CRON的任务，其它非-Express的调用者无法使用\n\n🔗 [**更多: 应用分层**](./sections/projectstructre/createlayers.chinese.md)\n\n<br/><br/>\n\n## ![✔] 1.3 封装公共模块成为NPM的包\n\n**TL;DR:** 由大量代码构成的一个大型应用中，贯彻全局的，比如日志，加密和其它类似的公共组件，应该进行封装，并暴露成一个私有的NPM包。这将使其在更多的代码库和项目中被使用变成了可能。\n\n**否则:** 您将不得不重造部署和依赖的轮子\n\n🔗 [**更多: 通过需求构建**](./sections/projectstructre/wraputilities.chinese.md)\n\n<br/><br/>\n\n## ![✔] 1.4 分离 Express 'app' and 'server'\n\n**TL;DR:** 避免定义整个[Express](https://expressjs.com/)应用在一个单独的大文件里， 这是一个不好的习惯 - 分离您的 'Express' 定义至少在两个文件中： API声明(app.js) 和 网络相关(WWW)。对于更好的结构，是把你的API声明放在组件中。\n\n**否则:** 您的API将只能通过HTTP的调用进行测试（慢，并且很难产生测试覆盖报告）。维护一个有着上百行代码的文件也不是一个令人开心的事情。\n\n🔗 [**更多: 分离 Express 'app' and 'server'**](./sections/projectstructre/separateexpress.chinese.md)\n\n<br/><br/>\n\n## ![✔] 1.5 使用易于设置环境变量，安全和分级的配置\n\n**TL;DR:** 一个完美无瑕的配置安装应该确保 (a) 元素可以从文件中，也可以从环境变量中读取 (b) 密码排除在提交的代码之外 (c) 为了易于检索，配置是分级的。仅有几个包可以满足这样的条件，比如[rc](https://www.npmjs.com/package/rc), [nconf](https://www.npmjs.com/package/nconf), [config](https://www.npmjs.com/package/config) 和 [convict](https://www.npmjs.com/package/convict)。\n\n**否则:** 不能满足任意的配置要求将会使开发，运维团队，或者两者，易于陷入泥潭。\n\n🔗 [**更多: 配置最佳实践**](./sections/projectstructre/configguide.chinese.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ 返回顶部</a></p>\n\n<h1 id=\"2-error-handling-practices\"><code>2. 错误处理最佳实践</code></h1>\n\n## ![✔] 2.1  使用 Async-Await 和 promises 用于异步错误处理\n\n**TL;DR:** 使用回调的方式处理异步错误可能是导致灾难的最快的方式(a.k.a the pyramid of doom)。对您的代码来说，最好的礼物就是使用规范的promise库或async-await来替代，这会使其像try-catch一样更加简洁，具有熟悉的代码结构。\n\n**否则:** Node.js回调特性, function(err, response), 是导致不可维护代码的一个必然的方式。究其原因，是由于混合了随意的错误处理代码，臃肿的内嵌，蹩脚的代码模式。\n\n🔗 [**更多: 避免回调**](./sections/errorhandling/asyncerrorhandling.chinese.md)\n\n<br/><br/>\n\n## ![✔] 2.2 仅使用内建的错误对象\n\n**TL;DR:** 很多人抛出异常使用字符串类型或一些自定义类型 - 这会导致错误处理逻辑和模块间的调用复杂化。是否您reject一个promise，抛出异常或发出(emit)错误 - 使用内建的错误对象将会增加设计一致性，并防止信息的丢失。\n\n**否则:** 调用某些模块，将不确定哪种错误类型会返回 - 这将会使恰当的错误处理更加困难。更坏的情况是，使用特定的类型描述错误，会导致重要的错误信息缺失，比如stack trace！\n\n🔗 [**更多: 使用内建错误对象**](./sections/errorhandling/useonlythebuiltinerror.chinese.md)\n\n<br/><br/>\n\n## ![✔] 2.3 区分运行错误和程序设计错误\n\n**TL;DR:** 运行错误（例如, API接受到一个无效的输入）指的是一些已知场景下的错误，这类错误的影响已经完全被理解，并能被考虑周全的处理掉。同时，程序设计错误（例如，尝试读取未定义的变量）指的是未知的编码问题，影响到应用得当的重启。\n\n**否则:** 当一个错误产生的时候，您总是得重启应用，但为什么要让 ~5000 个在线用户不能访问，仅仅是因为一个细微的，可以预测的，运行时错误？相反的方案，也不完美 – 当未知的问题（程序问题）产生的时候，使应用依旧可以访问，可能导致不可预测行为。区分两者会使处理更有技巧，并在给定的上下文下给出一个平衡的对策。\n\n🔗 [**更多: 运行错误和程序设计错误**](./sections/errorhandling/operationalvsprogrammererror.chinese.md)\n\n<br/><br/>\n\n## ![✔] 2.4 集中处理错误，不要在Express中间件中处理错误\n\n**TL;DR:** 错误处理逻辑，比如给管理员发送邮件，日志应该封装在一个特定的，集中的对象当中，这样当错误产生的时候，所有的终端（例如 Express中间件，cron任务，单元测试）都可以调用。\n\n**否则:** 错误处理的逻辑不放在一起将会导致代码重复和非常可能不恰当的错误处理。\n\n🔗 [**更多: 集中处理错误**](./sections/errorhandling/centralizedhandling.chinese.md)\n\n<br/><br/>\n\n## ![✔] 2.5 对API错误使用Swagger文档化\n\n**TL;DR:** 让你的API调用者知道哪种错误会返回，这样他们就能完全的处理这些错误，而不至于系统崩溃。Swagger，REST API的文档框架，通常处理这类问题。\n\n**否则:** 任何API的客户端可能决定崩溃并重启，仅仅因为它收到一个不能处理的错误。注意：API的调用者可能是你（在微服务环境中非常典型）。\n\n🔗 [**更多: 使用Swagger记录错误**](./sections/errorhandling/documentingusingswagger.chinese.md)\n\n<br/><br/>\n\n## ![✔] 2.6 当一个特殊的情况产生，停掉服务是得体的\n\n**TL;DR:** 当一个不确定错误产生（一个开发错误，最佳实践条款#3) - 这就意味着对应用运转健全的不确定。一个普通的实践将是建议仔细地重启进程，并使用一些‘启动器’工具，比如Forever和PM2。\n\n**否则:** 当一个未知的异常被抛出，意味着某些对象包含错误的状态（例如某个全局事件发生器由于某些内在的错误，不在产生事件），未来的请求可能失败或者行为异常。\n\n🔗 [**更多: 停掉服务**](./sections/errorhandling/shuttingtheprocess.chinese.md)\n\n<br/><br/>\n\n## ![✔] 2.7 使用一个成熟的日志工具提高错误的可见性\n\n**TL;DR:** 一系列成熟的日志工具，比如Winston，Bunyan和Log4J，会加速错误的发现和理解。忘记console.log吧。\n\n**否则:** 浏览console的log，和不通过查询工具或者一个好的日志查看器，手动浏览繁琐的文本文件，会使你忙于工作到很晚。\n\n🔗 [**更多: 使用好用的日志工具**](./sections/errorhandling/usematurelogger.chinese.md)\n\n<br/><br/>\n\n## ![✔] 2.8 使用你最喜欢的测试框架测试错误流\n\n**TL;DR:** 无论专业的自动化测试或者简单的手动开发测试 - 确保您的代码不仅满足正常的场景，而且处理并且返回正确的错误。测试框架，比如Mocha & Chai可以非常容易的处理这些问题（在\"Gist popup\"中查看代码实例） 。\n\n**否则:** 没有测试，不管自动还是手动，您不可能依赖代码去返回正确的错误。而没有可以理解的错误，那将毫无错误处理可言。\n\n🔗 [**更多: 测试错误流向**](./sections/errorhandling/testingerrorflows.chinese.md)\n\n<br/><br/>\n\n## ![✔] 2.9 使用APM产品发现错误和宕机时间\n\n**TL;DR:** 监控和性能产品 (别名 APM) 先前一步的检测您的代码库和API，这样他们能自动的，像使用魔法一样的强调错误，宕机和您忽略的性能慢的部分。\n\n**否则:** 您花了很多的力气在测量API的性能和错误，但可能您从来没有意识到真实场景下您最慢的代码块和他们对UX的影响。\n\n🔗 [**更多: 使用APM产品**](./sections/errorhandling/apmproducts.chinese.md)\n\n<br/><br/>\n\n## ![✔] 2.10 捕获未处理的promise rejections\n\n**TL;DR:** 任何在promise中被抛出的异常将被收回和遗弃，除非开发者没有忘记去明确的处理。即使您的代码调用的是process.uncaughtException！解决这个问题可以注册到事件process.unhandledRejection。\n\n**否则:** 您的错误将被回收，无踪迹可循。没有什么可以需要考虑。\n\n🔗 [**更多: 捕获未处理的promise rejection**](./sections/errorhandling/catchunhandledpromiserejection.chinese.md)\n\n<br/><br/>\n\n## ![✔] 2.11 快速查错，验证参数使用一个专门的库\n\n**TL;DR:** 这应该是您的Express最佳实践中的一部分 – assert API输入避免难以理解的漏洞，这类漏洞以后会非常难以追踪。而验证代码通常是一件乏味的事情，除非使用一些非常炫酷的帮助库比如Joi。\n\n**否则:** 考虑这种情况 – 您的功能期望一个数字参数 “Discount” ，然而调用者忘记传值，之后在您的代码中检查是否 Discount!=0 （允许的折扣值大于零），这样它将允许用户使用一个折扣。OMG，多么不爽的一个漏洞。你能明白吗？\n\n🔗 [**更多: 快速查错**](./sections/errorhandling/failfast.chinese.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ 返回顶部</a></p>\n\n<h1 id=\"3-code-style-practices\"><code>3. 编码风格实践</code></h1>\n\n## ![✔] 3.1 使用ESLint\n\n**TL;DR:** [ESLint](https://eslint.org)是检查可能的代码错误和修复代码样式的事实上的标准，不仅可以识别实际的间距问题, 而且还可以检测严重的反模式代码, 如开发人员在不分类的情况下抛出错误。尽管ESlint可以自动修复代码样式，但其他的工具比如[prettier](https://www.npmjs.com/package/prettier)和[beautify](https://www.npmjs.com/package/js-beautify)在格式化修复上功能强大，可以和Eslint结合起来使用。\n\n**否则:** 开发人员将必须关注单调乏味的间距和线宽问题, 并且时间可能会浪费在过多考虑项目的代码样式。\n\n<br/><br/>\n\n## ![✔] 3.2 Node.js特定的插件\n\n**TL;DR:** 除了仅仅涉及 vanilla JS 的 ESLint 标准规则，添加 Node 相关的插件，比如[eslint-plugin-node](https://www.npmjs.com/package/eslint-plugin-node), [eslint-plugin-mocha](https://www.npmjs.com/package/eslint-plugin-mocha) and [eslint-plugin-node-security](https://www.npmjs.com/package/eslint-plugin-security)\n\n**否则:** 许多错误的Node.js代码模式可能在检测下逃生。例如，开发人员可能需要某些文件，把一个变量作为路径名 (variableAsPath) ，这会导致攻击者可以执行任何JS脚本。Node.JS linters可以检测这类模式，并及早预警。\n\n<br/><br/>\n\n## ![✔] 3.3 在同一行开始一个代码块的大括号\n\n**TL;DR:** 代码块的第一个大括号应该和声明的起始保持在同一行中。\n\n### 代码示例\n\n```javascript\n  // 建议\n  function someFunction() {\n    // 代码块\n  }\n\n  // 避免\n  function someFunction()\n  {\n    // 代码块\n  }\n```\n\n**否则:** 不遵守这项最佳实践可能导致意外的结果，在Stackoverflow的帖子中可以查看到，如下：\n\n🔗 [**更多:** \"Why does a results vary based on curly brace placement?\" (Stackoverflow)](https://stackoverflow.com/questions/3641519/why-does-a-results-vary-based-on-curly-brace-placement)\n\n<br/><br/>\n\n## ![✔] 3.4 不要忘记分号\n\n**TL;DR:** 即使没有获得一致的认同，但在每一个表达式后面放置分号还是值得推荐的。这将使您的代码, 对于其他阅读代码的开发者来说，可读性，明确性更强。\n\n**否则:** 在前面的章节里面已经提到，如果表达式的末尾没有添加分号，JavaScript的解释器会在自动添加一个，这可能会导致一些意想不到的结果。\n\n<br/><br/>\n\n## ![✔] 3.5 命名您的方法\n\n**TL;DR:** 命名所有的方法，包含闭包和回调, 避免匿名方法。当剖析一个node应用的时候，这是特别有用的。命名所有的方法将会使您非常容易的理解内存快照中您正在查看的内容。\n\n**否则:** 使用一个核心dump（内存快照）调试线上问题，会是一项非常挑战的事项，因为你注意到的严重内存泄漏问题极有可能产生于匿名的方法。\n\n<br/><br/>\n\n## ![✔] 3.6 变量、常量、函数和类的命名约定\n\n**TL;DR:** 当命名变量和方法的时候，使用 ***lowerCamelCase*** ，当命名类的时候，使用 ***UpperCamelCase*** （首字母大写），对于常量，则 ***UPPERCASE*** 。这将帮助您轻松地区分普通变量/函数和需要实例化的类。使用描述性名称，但使它们尽量简短。\n\n**否则:** JavaScript是世界上唯一一门不需要实例化，就可以直接调用构造函数（\"Class\"）的编码语言。因此，类和函数的构造函数由采用UpperCamelCase开始区分。\n\n### 3.6 代码示例\n\n```javascript\n  // 使用UpperCamelCase命名类名\n  class SomeClassExample () {\n\n    // 常量使用const关键字，并使用lowerCamelCase命名\n    const config = {\n      key: 'value'\n    };\n\n    // 变量和方法使用lowerCamelCase命名\n    let someVariableExample = 'value';\n    function doSomething() {\n\n    }\n\n  }\n```\n\n<br/><br/>\n\n## ![✔] 3.7 使用const优于let，废弃var\n\n**TL;DR:** 使用`const`意味着一旦一个变量被分配，它不能被重新分配。使用const将帮助您免于使用相同的变量用于不同的用途，并使你的代码更清晰。如果一个变量需要被重新分配，以在一个循环为例，使用`let`声明它。let的另一个重要方面是，使用let声明的变量只在定义它的块作用域中可用。 `var`是函数作用域，不是块级作用域，既然您有const和let让您随意使用，那么[不应该在ES6中使用var](https://hackernoon.com/why-you-shouldnt-use-var-anymore-f109a58b9b70)。\n\n**否则:** 当经常更改变量时，调试变得更麻烦了。\n\n🔗 [**更多: JavaScript ES6+: var, let, or const?** ](https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75)\n\n<br/><br/>\n\n## ![✔] 3.8 先require, 而不是在方法内部\n\n**TL;DR:** 在每个文件的起始位置，在任何函数的前面和外部require模块。这种简单的最佳实践，不仅能帮助您轻松快速地在文件顶部辨别出依赖关系，而且避免了一些潜在的问题。\n\n**否则:** 在Node.js中，require 是同步运行的。如果从函数中调用它们，它可能会阻塞其他请求，在更关键的时间得到处理。另外，如果所require的模块或它自己的任何依赖项抛出错误并使服务器崩溃，最好尽快查明它，如果该模块在函数中require的，则可能不是这样的情况。\n\n<br/><br/>\n\n## ![✔] 3.9 require 文件夹，而不是文件\n\n**TL;DR:** 当在一个文件夹中开发库/模块，放置一个文件index.js暴露模块的\n内部，这样每个消费者都会通过它。这将作为您模块的一个接口，并使未来的变化简单而不违反规则。\n\n**否则:** 更改文件内部结构或签名可能会破坏与客户端的接口。\n\n### 3.9 代码示例\n\n```javascript\n  // 建议\n  module.exports.SMSProvider = require('./SMSProvider');\n  module.exports.SMSNumberResolver = require('./SMSNumberResolver');\n\n  // 避免\n  module.exports.SMSProvider = require('./SMSProvider/SMSProvider.js');\n  module.exports.SMSNumberResolver = require('./SMSNumberResolver/SMSNumberResolver.js');\n```\n\n<br/><br/>\n\n## ![✔] 3.10 使用 `===` 操作符\n\n**TL;DR:** 对比弱等于 `==`，优先使用严格的全等于 `===` 。`==`将在它们转换为普通类型后比较两个变量。在 `===` 中没有类型转换，并且两个变量必须是相同的类型。\n\n**否则:** 与 `==` 操作符比较，不相等的变量可能会返回true。\n\n### 3.10 代码示例\n\n```javascript\n'' == '0'           // false\n0 == ''             // true\n0 == '0'            // true\n\nfalse == 'false'    // false\nfalse == '0'        // true\n\nfalse == undefined  // false\nfalse == null       // false\nnull == undefined   // true\n\n' \\t\\r\\n ' == 0     // true\n```\n\n如果使用`===`， 上面所有语句都将返回 false。\n\n<br/><br/>\n\n## ![✔] 3.11 使用 Async Await, 避免回调\n\n**TL;DR:** Node 8 LTS现已全面支持异步等待。这是一种新的方式处理异步请求，取代回调和promise。Async-await是非阻塞的，它使异步代码看起来像是同步的。您可以给你的代码的最好的礼物是用async-await提供了一个更紧凑的，熟悉的，类似try catch的代码语法。\n\n**否则:** 使用回调的方式处理异步错误可能是陷入困境最快的方式 - 这种方式必须面对不停地检测错误，处理别扭的代码内嵌，难以推理编码流。\n\n🔗[**更多:** async await 1.0 引导](https://github.com/yortus/asyncawait)\n\n<br/><br/>\n\n## ![✔] 3.12 使用 (=>) 箭头函数\n\n**TL;DR:** 尽管使用 async-await 和避免方法作为参数是被推荐的, 但当处理那些接受promise和回调的老的API的时候 - 箭头函数使代码结构更加紧凑，并保持了根方法上的语义上下文 (例如 'this')。\n\n**否则:** 更长的代码（在ES5方法中）更易于产生缺陷，并读起来很是笨重。\n\n🔗 [**更多: 这是拥抱箭头函数的时刻**](https://medium.com/javascript-scene/familiarity-bias-is-holding-you-back-its-time-to-embrace-arrow-functions-3d37e1a9bb75)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ 返回顶部</a></p>\n\n<h1 id=\"4-testing-and-overall-quality-practices\"><code>4. 测试和总体的质量实践</code></h1>\n\n## ![✔] 4.1 至少，编写API（组件）测试\n\n**TL;DR:** 大多数项目只是因为时间表太短而没有进行任何自动化测试，或者测试项目失控而正被遗弃。因此，优先从API测试开始，这是最简单的编写和提供比单元测试更多覆盖率的事情（你甚至可能不需要编码而进行API测试，像[Postman](https://www.getpostman.com/)。之后，如果您有更多的资源和时间，继续使用高级测试类型，如单元测试、DB测试、性能测试等。\n\n**否则:** 您可能需要花很长时间编写单元测试，才发现只有20%的系统覆盖率。\n\n<br/><br/>\n\n## ![✔] 4.2 使用一个linter检测代码问题\n\n**TL;DR:** 使用代码linter检查基本质量并及早检测反模式。在任何测试之前运行它, 并将其添加为预提交的git钩子, 以最小化审查和更正任何问题所需的时间。也可在[Section 3](https://github.com/goldbergyoni/nodebestpractices#3-code-style-practices)中查阅编码样式实践\n\n**否则:** 您可能让一些反模式和易受攻击的代码传递到您的生产环境中。\n\n<br/><br/>\n\n## ![✔] 4.3 仔细挑选您的持续集成（CI）平台\n\n**TL;DR:** 您的持续集成平台（cicd）将集成各种质量工具（如测试、lint），所以它应该是一个充满活力的生态系统，包含各种插件。[jenkins](https://jenkins.io/)曾经是许多项目的默认选项，因为它有最大的社区，同时也是一个非常强大的平台，这样的代价是要求一个陡峭的学习曲线。如今，使用SaaS工具，比如[CircleCI](https://circleci.com)及其他，安装一套CI解决方案，相对是一件容易的事情。这些工具允许构建灵活的CI管道，而无需管理整个基础设施。最终，这是一个鲁棒性和速度之间的权衡 - 仔细选择您支持的方案。\n\n**否则:** 一旦您需要一些高级定制，选择一些细分市场供应商可能会让您停滞不前。另一方面，伴随着jenkins，可能会在基础设施设置上浪费宝贵的时间。\n\n🔗 [**更多: 挑选 CI 平台**](./sections/testingandquality/citools.chinese.md)\n\n<br/><br/>\n\n## ![✔] 4.4 经常检查易受攻击的依赖\n\n**TL;DR:** 即使是那些最有名的依赖模块，比如Express，也有已知的漏洞。使用社区和商业工具，比如 🔗 [npm audit](https://docs.npmjs.com/cli/audit) ，集成在您的CI平台上，在每一次构建的时候都会被调用，这样可以很容易地解决漏洞问题。\n\n**否则:** 在没有专用工具的情况下，使代码清除漏洞，需要不断地跟踪有关新威胁的在线出版物，相当繁琐。\n\n<br/><br/>\n\n## ![✔] 4.5 测试标签化\n\n**TL;DR:**  不同的测试必须运行在不同的情景：quick smoke，IO-less，当开发者保存或提交一个文件，测试应该启动；完整的端到端的测试通常运行在一个新的pull request被提交之后，等等。这可以通过对测试用例设置标签，比如关键字像#cold #api #sanity，来完成。这样您可以对您的测试集进行grep，调用需要的子集。例如，这就是您通过[Mocha](https://mochajs.org/)仅仅调用sanity测试集所需要做的：mocha --grep 'sanity'。\n\n**否则:** 运行所有的测试，包括执行数据库查询的几十个测试，任何时候开发者进行小的改动都可能很慢，这使得开发者不愿意运行测试。\n\n<br/><br/>\n\n## ![✔] 4.6 检查测试覆盖率，它有助于识别错误的测试模式\n\n**TL;DR:** 代码覆盖工具比如 [Istanbul](https://github.com/istanbuljs/istanbuljs)/[NYC](https://github.com/istanbuljs/nyc)，很好用有3个原因：它是免费的（获得这份报告不需要任何开销），它有助于确定测试覆盖率降低的部分，以及最后但非最不重要的是它指出了测试中的不匹配：通过查看颜色标记的代码覆盖报告您可以注意到，例如，从来不会被测到的代码片段像catch语句（即测试只是调用正确的路径，而不调用应用程序发生错误时的行为）。如果覆盖率低于某个阈值，则将其设置为失败的构建。\n\n**否则:** 当你的大部分代码没有被测试覆盖时，就不会有任何自动化的度量指标告诉你了。\n\n<br/><br/>\n\n## ![✔] 4.7 检查过期的依赖包\n\n**TL;DR:** 使用您的首选工具 (例如 “npm outdated” or [npm-check-updates](https://www.npmjs.com/package/npm-check-updates) 来检测已安装的过期依赖包, 将此检查注入您的 CI 管道, 甚至在严重的情况下使构建失败。例如, 当一个已安装的依赖包滞后5个补丁时 (例如:本地版本是1.3.1 的, 存储库版本是1.3.8 的), 或者它被其作者标记为已弃用, 可能会出现严重的情况 - 停掉这次构建并防止部署此版本。\n\n**否则:** 您的生产环境将运行已被其作者明确标记为有风险的依赖包\n\n<br/><br/>\n\n## ![✔] 4.8 对于e2e testing，使用docker-compose\n\n**TL;DR:** 端对端(e2e)测试包含现场数据，由于它依赖于很多重型服务如数据库，习惯被认为是CI过程中最薄弱的环节。Docker-compose通过制定类似生产的环境，并使用一个简单的文本文件和简单的命令，轻松化解了这个问题。它为了e2e测试，允许制作所有相关服务，数据库和隔离网络。最后但并非最不重要的一点是，它可以保持一个无状态环境，该环境在每个测试套件之前被调用，然后立即消失。\n\n**否则:** 没有docker-compose，团队必须维护一个测试数据库在每一个测试环境上，包含开发机器，保持所有数据同步，这样测试结果不会因环境不同而不同。\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ 返回顶部</a></p>\n\n<h1 id=\"5-going-to-production-practices\"><code>5. 上线实践</code></h1>\n\n## ![✔] 5.1. 监控\n\n**TL;DR:** 监控是一种在顾客之前发现问题的游戏 – 显然这应该被赋予前所未有的重要性。考虑从定义你必须遵循的基本度量标准开始（我的建议在里面），到检查附加的花哨特性并选择解决所有问题的解决方案。市场已经淹没其中。点击下面的 ‘The Gist’ ，了解解决方案的概述。\n\n**否则:** 错误 === 失望的客户. 非常简单.\n\n🔗 [**更多: 监控!**](./sections/production/monitoring.chinese.md)\n\n<br/><br/>\n\n## ![✔] 5.2. 使用智能日志增加透明度\n\n**TL;DR:** 日志可以是调试语句的一个不能说话的仓库，或者表述应用运行过程的一个漂亮仪表板的驱动。从第1天计划您的日志平台：如何收集、存储和分析日志，以确保所需信息（例如，错误率、通过服务和服务器等完成整个事务）都能被提取出来。\n\n**否则:** 您最终像是面对一个黑盒，不知道发生了什么事情，然后你开始重新写日志语句添加额外的信息。\n\n🔗 [**更多: 使用智能日志增加透明度**](./sections/production/smartlogging.chinese.md)\n\n<br/><br/>\n\n## ![✔] 5.3. 委托可能的一切（例如：gzip，SSL）给反向代理\n\n**TL;DR:** Node处理CPU密集型任务，如gzipping，SSL termination等，表现糟糕。相反，使用一个 ‘真正’ 的中间件服务像Nginx，HAProxy或者云供应商的服务。\n\n**否则:** 可怜的单线程Node将不幸地忙于处理网络任务，而不是处理应用程序核心，性能会相应降低。\n\n🔗 [**更多: 委托可能的一切（例如：gzip，SSL）给反向代理**](./sections/production/delegatetoproxy.chinese.md)\n\n<br/><br/>\n\n## ![✔] 5.4. 锁住依赖\n\n**TL;DR:** 您的代码必须在所有的环境中是相同的，但是令人惊讶的是，NPM默认情况下会让依赖在不同环境下发生偏移 – 当在不同的环境中安装包的时候，它试图拿包的最新版本。克服这种问题可以利用NPM配置文件， .npmrc，告诉每个环境保存准确的（不是最新的）包的版本。另外，对于更精细的控制，使用NPM “shrinkwrap”。*更新：作为NPM5，依赖默认锁定。新的包管理工具，Yarn，也默认锁定。\n\n**否则:** QA测试通过的代码和批准的版本，在生产中表现不一致。更糟糕的是，同一生产集群中的不同服务器可能运行不同的代码。\n\n🔗 [**更多: 锁住依赖**](./sections/production/lockdependencies.chinese.md)\n\n<br/><br/>\n\n## ![✔] 5.5. 使用正确的工具保护进程正常运行\n\n**TL;DR:** 进程必须继续运行，并在失败时重新启动。对于简单的情况下，“重启”工具如PM2可能足够，但在今天的“Dockerized”世界 – 集群管理工具也值得考虑\n\n**否则:** 运行几十个实例没有明确的战略和太多的工具（集群管理，docker，PM2）可能导致一个DevOps混乱\n\n🔗 [**更多: 使用正确的工具保护进程正常运行**](./sections/production/guardprocess.chinese.md)\n\n<br/><br/>\n\n## ![✔] 5.6. 利用CPU多核\n\n**TL;DR:** 在基本形式上，node应用程序运行在单个CPU核心上，而其他都处于空闲状态。复制node进程和利用多核，这是您的职责 – 对于中小应用，您可以使用Node Cluster和PM2. 对于一个大的应用，可以考虑使用一些Docker cluster（例如k8s，ECS）复制进程或基于Linux init system（例如systemd）的部署脚本\n\n**否则:** 您的应用可能只是使用了其可用资源中的25% (!)，甚至更少。注意，一台典型的服务器有4个或更多的CPU，默认的Node.js部署仅仅用了一个CPU（甚至使用PaaS服务，比如AWS beanstalk，也一样）。\n\n🔗 [**更多: 利用所有的CPU**](./sections/production/utilizecpu.chinese.md)\n\n<br/><br/>\n\n## ![✔] 5.7. 创建一个“维护端点”\n\n**TL;DR:** 在一个安全的API中暴露一组系统相关的信息，比如内存使用情况和REPL等等。尽管这里强烈建议依赖标准和作战测试工具，但一些有价值的信息和操作更容易使用代码完成。\n\n**否则:** 您会发现，您正在执行许多“诊断部署” – 将代码发送到生产中，仅仅只为了诊断目的提取一些信息。\n\n🔗 [**更多: 创建一个 '维护端点'**](./sections/production/createmaintenanceendpoint.chinese.md)\n\n<br/><br/>\n\n## ![✔] 5.8. 使用APM产品发现错误和宕机时间\n\n**TL;DR:** 监控和性能的产品（即APM）先前一步地评估代码库和API，自动的超过传统的监测，并测量在服务和层级上的整体用户体验。例如，一些APM产品可以突显导致最终用户负载过慢的事务，同时指出根本原因。\n\n**否则:** 你可能会花大力气测量API性能和停机时间，也许你永远不会知道，真实场景下哪个是你最慢的代码部分，这些怎么影响用户体验。\n\n🔗 [**更多: 使用APM产品发现错误和宕机时间**](./sections/production/apmproducts.chinese.md)\n\n<br/><br/>\n\n## ![✔] 5.9. 使您的代码保持生产环境就绪\n\n**TL;DR:** 在意识中抱着最终上线的想法进行编码，从第1天开始计划上线。这听起来有点模糊，所以我编写了一些与生产维护密切相关的开发技巧（点击下面的要点）\n\n**否则:** 一个世界冠军级别的IT/运维人员也不能拯救一个编码低劣的系统。\n\n🔗 [**更多: 使您的代码保持生产环境就绪**](./sections/production/productioncode.chinese.md)\n\n<br/><br/>\n\n## ![✔] 5.10. 测量和保护内存使用\n\n**TL;DR:** Node.js和内存有引起争论的联系：V8引擎对内存的使用有稍微的限制（1.4GB），在node的代码里面有内存泄漏的很多途径 – 因此监视node的进程内存是必须的。在小应用程序中，你可以使用shell命令周期性地测量内存，但在中等规模的应用程序中，考虑把内存监控建成一个健壮的监控系统。\n\n**否则:** 您的内存可能一天泄漏一百兆，就像曾发生在沃尔玛的一样。\n\n🔗 [**更多: 测量和保护内存使用**](./sections/production/measurememory.chinese.md)\n\n<br/><br/>\n\n## ![✔] 5.11. Node外管理您的前端资源\n\n**TL;DR:** 使用专门的中间件（nginx，S3，CDN）服务前端内容，这是因为在处理大量静态文件的时候，由于node的单线程模型，它的性能很受影响。\n\n**否则:** 您的单个node线程将忙于传输成百上千的html/图片/angular/react文件，而不是分配其所有的资源为了其擅长的任务 – 服务动态内容\n\n🔗 [**更多: Node外管理您的前端资源**](./sections/production/frontendout.chinese.md)\n\n<br/><br/>\n\n## ![✔] 5.12. 保持无状态，几乎每天都要停下服务器\n\n**TL;DR:** 在外部数据存储上，存储任意类型数据（例如用户会话，缓存，上传文件）。考虑间隔地停掉您的服务器或者使用 ‘serverless’ 平台（例如 AWS Lambda），这是一个明确的强化无状态的行为。\n\n**否则:** 某个服务器上的故障将导致应用程序宕机，而不仅仅是停用故障机器。此外，由于依赖特定服务器，伸缩弹性会变得更具挑战性。\n\n🔗 [**更多: 保持无状态，几乎每天都要停下服务器**](./sections/production/bestateless.chinese.md)\n\n<br/><br/>\n\n## ![✔] 5.13. 使用自动检测漏洞的工具\n\n**TL;DR:** 即使是最有信誉的依赖项，比如Express，会有使系统处于危险境地的已知漏洞（随着时间推移）。通过使用社区的或者商业工具，不时的检查漏洞和警告（本地或者Github上），这类问题很容易被抑制，有些问题甚至可以立即修补。\n\n**否则:** 否则: 在没有专用工具的情况下，使代码清除漏洞，需要不断地跟踪有关新威胁的在线出版物。相当繁琐。\n\n🔗 [**更多: 使用自动检测漏洞的工具**](./sections/production/detectvulnerabilities.chinese.md)\n\n<br/><br/>\n\n## ![✔] 5.14. 在每一个log语句中指明 ‘TransactionId’\n\n**TL;DR:** 在每一个请求的每一条log入口，指明同一个标识符，transaction-id: {某些值}。然后在检查日志中的错误时，很容易总结出前后发生的事情。不幸的是，由于Node异步的天性自然，这是不容易办到的，看下代码里面的例子\n\n**否则:** 在没有上下文的情况下查看生产错误日志，这会使问题变得更加困难和缓慢去解决。\n\n🔗 [**更多: 在每一个log语句中指明 ‘TransactionId’**](./sections/production/assigntransactionid.chinese.md)\n\n<br/><br/>\n\n## ![✔] 5.15. 设置NODE_ENV=production\n\n**TL;DR:** 设置环境变量NODE_ENV为‘production’ 或者 ‘development’，这是一个是否激活上线优化的标志 - 很多NPM的包通过它来判断当前的环境，据此优化生产环境代码。\n\n**否则:** 遗漏这个简单的属性可能大幅减弱性能。例如，在使用Express作为服务端渲染页面的时候，如果未设置NODE_ENV，性能将会减慢大概三分之一！\n\n🔗 [**更多: 设置NODE_ENV=production**](./sections/production/setnodeenv.chinese.md)\n\n<br/><br/>\n\n## ![✔] 5.16. 设计自动化、原子化和零停机时间部署\n\n**TL;DR:** 研究表明，执行许多部署的团队降低了严重上线问题的可能性。不需要危险的手动步骤和服务停机时间的快速和自动化部署大大改善了部署过程。你应该达到使用Docker结合CI工具，使他们成为简化部署的行业标准。\n\n**否则:** 长时间部署 -> 线上宕机 & 和人相关的错误 -> 团队部署时不自信 -> 更少的部署和需求\n\n<br/><br/>\n\n## ![✔] 5.17. 使用 Node.js 的 LTS 版本\n\n**TL;DR:** 确保您是使用LTS版本的Node.js来获取关键的错误修复、安全更新和性能改进。\n\n**否则:** 新发现的错误或漏洞可能会被用于生产环境中运行的应用程序，您的应用程序可能会变得难以维护且不受各种模块支持.\n\n🔗 [**更多: 使用node.js的LTS版本**](./sections/production/LTSrelease.chinese.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ 返回顶部</a></p>\n\n<h1 id=\"6-security-best-practices\"><code>6. 安全最佳实践</code></h1>\n\n<div align=\"center\">\n<img src=\"https://img.shields.io/badge/OWASP%20Threats-Top%2010-green.svg\" alt=\"53 items\"/>\n</div>\n\n## ![✔] 6.1. 拥护linter安全准则\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20XSS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 使用安全相关的linter插件，比如[eslint-plugin-security](https://github.com/nodesecurity/eslint-plugin-security)，尽早捕获安全隐患或者问题，最好在编码阶段。这能帮助察觉安全的问题，比如使用eval，调用子进程，或者根据字面含义（比如，用户输入）引入模块等等。点击下面‘更多’获得一个安全linter可以检测到的代码示例。\n\n**Otherwise:** 在开发过程中, 可能一个直白的安全隐患, 成为生产环境中一个严重问题。此外, 项目可能没有遵循一致的安全规范, 而导致引入漏洞, 或敏感信息被提交到远程仓库中。\n\n🔗 [**更多: Lint 规范**](./sections/security/lintrules.md)\n\n<br/><br/>\n\n## ![✔] 6.2. 使用中间件限制并发请求\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** DOS攻击非常流行而且相对容易处理。使用外部服务，比如cloud负载均衡, cloud防火墙, nginx, 或者（对于小的，不是那么重要的app）一个速率限制中间件(比如[express-rate-limit](https://www.npmjs.com/package/express-rate-limit))，来实现速率限制。\n\n**否则:** 应用程序可能受到攻击, 导致拒绝服务, 在这种情况下, 真实用户会遭受服务降级或不可用。\n\n🔗 [**更多: 实施速率限制**](./sections/security/limitrequests.md)\n\n<br/><br/>\n\n## ![✔] 6.3 把机密信息从配置文件中抽离出来，或者使用包对其加密\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A3:Sensitive%20Data%20Exposure%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 不要在配置文件或源代码中存储纯文本机密信息。相反, 使用诸如Vault产品、Kubernetes/Docker Secrets或使用环境变量之类的安全管理系统。最后一个结果是, 存储在源代码管理中的机密信息必须进行加密和管理 (滚动密钥(rolling keys)、过期时间、审核等)。使用pre-commit/push钩子防止意外提交机密信息。\n\n**否则:** 源代码管理, 即使对于私有仓库, 也可能会被错误地公开, 此时所有的秘密信息都会被公开。外部组织的源代码管理的访问权限将无意中提供对相关系统 (数据库、api、服务等) 的访问。\n\n🔗 [**更多: 安全管理**](./sections/security/secretmanagement.md)\n\n<br/><br/>\n\n## ![✔] 6.4. 使用 ORM/ODM 库防止查询注入漏洞\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 要防止 SQL/NoSQL 注入和其他恶意攻击, 请始终使用 ORM/ODM 或database库来转义数据或支持命名的或索引的参数化查询, 并注意验证用户输入的预期类型。不要只使用JavaScript模板字符串或字符串串联将值插入到查询语句中, 因为这会将应用程序置于广泛的漏洞中。所有知名的Node.js数据访问库(例如[Sequelize](https://github.com/sequelize/sequelize), [Knex](https://github.com/tgriesser/knex), [mongoose](https://github.com/Automattic/mongoose))包含对注入漏洞的内置包含措施。\n\n**否则:** 未经验证或未脱敏处理的用户输入，可能会导致操作员在使用MongoDB进行NoSQL操作时进行注入, 而不使用适当的过滤系统或ORM很容易导致SQL注入攻击, 从而造成巨大的漏洞。\n\n🔗 [**更多: 使用 ORM/ODM 库防止查询注入**](./sections/security/ormodmusage.md)\n\n<br/><br/>\n\n## ![✔] 6.5. 通用安全最佳实践集合\n\n**TL;DR:** 这些是与Node.js不直接相关的安全建议的集合-Node的实现与任何其他语言没有太大的不同。单击 \"阅读更多\" 浏览。\n\n🔗 [**更多: 通用安全最佳实践**](./sections/security/commonsecuritybestpractices.md)\n\n<br/><br/>\n\n## ![✔] 6.6. 调整 HTTP 响应头以加强安全性\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 应用程序应该使用安全的header来防止攻击者使用常见的攻击方式，诸如跨站点脚本(XSS)、点击劫持和其他恶意攻击。可以使用模块，比如 [helmet](https://www.npmjs.com/package/helmet)轻松进行配置。\n\n**否则:** 攻击者可以对应用程序的用户进行直接攻击, 导致巨大的安全漏洞\n\n🔗 [**更多: 在应用程序中使用安全的header**](./sections/security/secureheaders.md)\n\n<br/><br/>\n\n## ![✔] 6.7. 经常自动检查易受攻击的依赖库\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Known%20Vulnerabilities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 在npm的生态系统中, 一个项目有许多依赖是很常见的。在找到新的漏洞时, 应始终将依赖项保留在检查中。使用工具，类似于[npm audit](https://docs.npmjs.com/cli/audit) 或者 [snyk](https://snyk.io/)跟踪、监视和修补易受攻击的依赖项。将这些工具与 CI 设置集成, 以便在将其上线之前捕捉到易受攻击的依赖库。\n\n**否则:** 攻击者可以检测到您的web框架并攻击其所有已知的漏洞。\n\n🔗 [**更多: 安全依赖**](./sections/security/dependencysecurity.md)\n\n<br/><br/>\n\n## ![✔] 6.8. 避免使用Node.js的crypto库处理密码，使用Bcrypt\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 密码或机密信息(API密钥)应该使用安全的哈希+salt函数(如 \"bcrypt\")来存储, 因为性能和安全原因, 这应该是其JavaScript实现的首选。\n\n**否则:** 在不使用安全功能的情况下，保存的密码或秘密信息容易受到暴力破解和字典攻击, 最终会导致他们的泄露。\n\n🔗 [**更多: 使用Bcrypt**](./sections/security/bcryptpasswords.chinese.md)\n\n<br/><br/>\n\n## ![✔] 6.9. 转义 HTML、JS 和 CSS 输出\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 发送给浏览器的不受信任数据可能会被执行, 而不是显示, 这通常被称为跨站点脚本(XSS)攻击。使用专用库将数据显式标记为不应执行的纯文本内容(例如:编码、转义)，可以减轻这种问题。\n\n**否则:** 攻击者可能会将恶意的JavaScript代码存储在您的DB中, 然后将其发送给可怜的客户端。\n\n🔗 [**更多: 转义输出**](./sections/security/escape-output.md)\n\n<br/><br/>\n\n## ![✔] 6.10. 验证传入的JSON schemas\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7: XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A8:Insecured%20Deserialization%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 验证传入请求的body payload，并确保其符合预期要求, 如果没有, 则快速报错。为了避免每个路由中繁琐的验证编码, 您可以使用基于JSON的轻量级验证架构，比如[jsonschema](https://www.npmjs.com/package/jsonschema) or [joi](https://www.npmjs.com/package/joi)\n\n**否则:** 您疏忽和宽松的方法大大增加了攻击面, 并鼓励攻击者尝试许多输入, 直到他们找到一些组合, 使应用程序崩溃。\n\n🔗 [**更多: 验证传入的JSON schemas**](./sections/security/validation.md)\n\n<br/><br/>\n\n## ![✔] 6.11. 支持黑名单的JWT\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 当使用JSON Web Tokens(例如, 通过[Passport.js](https://github.com/jaredhanson/passport)), 默认情况下, 没有任何机制可以从发出的令牌中撤消访问权限。一旦发现了一些恶意用户活动, 只要它们持有有效的标记, 就无法阻止他们访问系统。通过实现一个不受信任令牌的黑名单，并在每个请求上验证，来减轻此问题。\n\n**否则:** 过期或错误的令牌可能被第三方恶意使用，以访问应用程序，并模拟令牌的所有者。\n\n🔗 [**更多: 为JSON Web Token添加黑名单**](./sections/security/expirejwt.md)\n\n<br/><br/>\n\n## ![✔] 6.12. 限制每个用户允许的登录请求\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 一类保护暴力破解的中间件，比如[express-brute](https://www.npmjs.com/package/express-brute)，应该被用在express的应用中，来防止暴力/字典攻击；这类攻击主要应用于一些敏感路由，比如/admin 或者 /login，基于某些请求属性, 如用户名, 或其他标识符, 如正文参数等。\n\n**否则:** 攻击者可以发出无限制的密码匹配尝试, 以获取对应用程序中特权帐户的访问权限。\n\n🔗 [**更多: 限制登录频率**](./sections/security/login-rate-limit.md)\n\n<br/><br/>\n\n## ![✔] 6.13. 使用非root用户运行Node.js\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A5:Broken%20Access%20Access%20Control-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Node.js作为一个具有无限权限的root用户运行，这是一种普遍的情景。例如，在Docker容器中，这是默认行为。建议创建一个非root用户，并保存到Docker镜像中（下面给出了示例），或者通过调用带有\"-u username\" 的容器来代表此用户运行该进程。\n\n**否则:** 在服务器上运行脚本的攻击者在本地计算机上获得无限制的权利 (例如，改变iptable，引流到他的服务器上)\n\n🔗 [**更多: 使用非root用户运行Node.js**](./sections/security/non-root-user.md)\n\n<br/><br/>\n\n## ![✔] 6.14. 使用反向代理或中间件限制负载大小\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A8:Insecured%20Deserialization%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 请求body有效载荷越大, Node.js的单线程就越难处理它。这是攻击者在没有大量请求(DOS/DDOS 攻击)的情况下，就可以让服务器跪下的机会。在边缘上（例如，防火墙，ELB）限制传入请求的body大小，或者通过配置[express body parser](https://github.com/expressjs/body-parser)仅接收小的载荷，可以减轻这种问题。\n\n**否则:** 您的应用程序将不得不处理大的请求, 无法处理它必须完成的其他重要工作, 从而导致对DOS攻击的性能影响和脆弱性。\n\n🔗 [**更多: 限制负载大小**](./sections/security/requestpayloadsizelimit.md)\n\n<br/><br/>\n\n## ![✔] 6.15. 避免JavaScript的eval声明\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** `eval` 是邪恶的, 因为它允许在运行时执行自定义的JavaScript代码。这不仅是一个性能方面的问题, 而且也是一个重要的安全问题, 因为恶意的JavaScript代码可能来源于用户输入。应该避免的另一种语言功能是 `new Function` 构造函数。`setTimeout` 和 `setInterval` 也不应该传入动态JavaScript代码。\n\n**否则:** 恶意JavaScript代码查找传入 `eval` 或其他实时判断的JavaScript函数的文本的方法, 并将获得在该页面上javascript权限的完全访问权。此漏洞通常表现为XSS攻击。\n\n🔗 [**更多: 避免JavaScript的eval声明**](./sections/security/avoideval.chinese.md)\n\n<br/><br/>\n\n## ![✔] 6.16. 防止恶意RegEx让Node.js的单线程过载执行\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 正则表达式，在方便的同时，对JavaScript应用构成了真正的威胁，特别是Node.js平台。匹配文本的用户输入需要大量的CPU周期来处理。在某种程度上，正则处理是效率低下的，比如验证10个单词的单个请求可能阻止整个event loop长达6秒，并让CPU引火烧身。由于这个原因，偏向第三方的验证包，比如[validator.js](https://github.com/chriso/validator.js)，而不是采用正则，或者使用[safe-regex](https://github.com/substack/safe-regex)来检测有问题的正则表达式。\n\n**否则:** 写得不好的正则表达式可能容易受到正则表达式DoS攻击的影响, 这将完全阻止event loop。例如，流行的`moment`包在2017年的11月，被发现使用了错误的RegEx用法而易受攻击。\n\n🔗 [**更多: 防止恶意正则**](./sections/security/regex.md)\n\n<br/><br/>\n\n## ![✔] 6.17. 使用变量避免模块加载\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 避免通过作为参数的路径requiring/importing另一个文件, 原因是它可能源自用户输入。此规则可扩展为访问一般文件(即:`fs.readFile()`)或使用来自用户输入的动态变量访问其他敏感资源。[Eslint-plugin-security](https://www.npmjs.com/package/eslint-plugin-security) linter可以捕捉这样的模式, 并尽早提前警告。\n\n**否则:** 恶意用户输入可以找到用于获得篡改文件的参数, 例如, 文件系统上以前上载的文件, 或访问已有的系统文件。\n\n🔗 [**更多: 安全地加载模块**](./sections/security/safemoduleloading.chinese.md)\n\n<br/><br/>\n\n## ![✔] 6.18. 在沙箱中运行不安全代码\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 当任务执行在运行时给出的外部代码时(例如, 插件), 使用任何类型的`沙盒`执行环境保护主代码，并隔离开主代码和插件。这可以通过一个专用的过程来实现 (例如:cluster.fork()), 无服务器环境或充当沙盒的专用npm包。\n\n**否则:** 插件可以通过无限循环、内存超载和对敏感进程环境变量的访问等多种选项进行攻击\n\n🔗 [**更多: 在沙箱中运行不安全代码**](./sections/security/sandbox.chinese.md)\n\n<br/><br/>\n\n## ![✔] 6.19. 使用子进程时要格外小心\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 尽可能地避免使用子进程，如果您仍然必须这样做，验证和清理输入以减轻shell注入攻击。更喜欢使用 \"child_process\"。execFile 的定义将只执行具有一组属性的单个命令, 并且不允许 shell 参数扩展。倾向于使用`child_process.execFile`，从定义上来说，它将仅仅执行具有一组属性的单个命令，并且不允许shell参数扩展。\n\n**否则:** 由于将恶意用户输入传递给未脱敏处理的系统命令, 直接地使用子进程可能导致远程命令执行或shell注入攻击。\n\n🔗 [**更多: 处理子进程时要格外小心**](./sections/security/childprocesses.chinese.md)\n\n<br/><br/>\n\n## ![✔] 6.20. 隐藏客户端的错误详细信息\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 默认情况下, 集成的express错误处理程序隐藏错误详细信息。但是, 极有可能, 您实现自己的错误处理逻辑与自定义错误对象(被许多人认为是最佳做法)。如果这样做, 请确保不将整个Error对象返回到客户端, 这可能包含一些敏感的应用程序详细信息。\n\n**否则:** 敏感应用程序详细信息(如服务器文件路径、使用中的第三方模块和可能被攻击者利用的应用程序的其他内部工作流)可能会从stack trace发现的信息中泄露。\n\n🔗 [**更多: 隐藏客户端的错误详细信息**](./sections/security/hideerrors.md)\n\n<br/><br/>\n\n## ![✔] 6.21. 对npm或Yarn，配置2FA\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 开发链中的任何步骤都应使用MFA(多重身份验证)进行保护, npm/Yarn对于那些能够掌握某些开发人员密码的攻击者来说是一个很好的机会。使用开发人员凭据, 攻击者可以向跨项目和服务广泛安装的库中注入恶意代码。甚至可能在网络上公开发布。在npm中启用2因素身份验证（2-factor-authentication）, 攻击者几乎没有机会改变您的软件包代码。\n\n**否则:** [Have you heard about the eslint developer who's password was hijacked?](https://medium.com/@oprearocks/eslint-backdoor-what-it-is-and-how-to-fix-the-issue-221f58f1a8c8)\n\n<br/><br/>\n\n## ![✔] 6.22. 修改session中间件设置\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 每个web框架和技术都有其已知的弱点-告诉攻击者我们使用的web框架对他们来说是很大的帮助。使用session中间件的默认设置, 可以以类似于`X-Powered-By`header的方式向模块和框架特定的劫持攻击公开您的应用。尝试隐藏识别和揭露技术栈的任何内容(例如:Nonde.js, express)。\n\n**否则:** 可以通过不安全的连接发送cookie, 攻击者可能会使用会话标识来标识web应用程序的基础框架以及特定于模块的漏洞。\n\n🔗 [**更多: cookie和session安全**](./sections/security/sessions.md)\n\n<br/><br/>\n\n## ![✔] 6.23. 通过显式设置进程应崩溃的情况，以避免DOS攻击\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 当错误未被处理时, Node进程将崩溃。即使错误被捕获并得到处理，许多最佳实践甚至建议退出。例如, Express会在任何异步错误上崩溃 - 除非使用catch子句包装路由。这将打开一个非常惬意的攻击点, 攻击者识别哪些输入会导致进程崩溃并重复发送相同的请求。没有即时补救办法, 但一些技术可以减轻苦楚: 每当进程因未处理的错误而崩溃，都会发出警报，验证输入并避免由于用户输入无效而导致进程崩溃，并使用catch将所有路由处理包装起来，并在请求中出现错误时, 考虑不要崩溃(与全局发生的情况相反)。\n\n**否则:** 这只是一个起到教育意义的假设: 给定许多Node.js应用程序, 如果我们尝试传递一个空的JSON正文到所有POST请求 - 少数应用程序将崩溃。在这一点上, 我们可以只是重复发送相同的请求, 就可以轻松地搞垮应用程序。\n\n<br/><br/><br/>\n\n## ![✔] 6.24. 避免不安全的重定向\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 不验证用户输入的重定向可使攻击者启动网络钓鱼诈骗，窃取用户凭据，以及执行其他恶意操作。\n\n**否则:** 当攻击者发现你没有校验用户提供的外部输入时，他们会在论坛、社交媒体以和其他公共场合发布他们精心制作的链接来诱使用户点击，以此达到漏洞利用的目的。\n\n🔗 [**阅读更多: 避免不安全的重定向**](./sections/security/saferedirects.chinese.md)\n\n<br/><br/><br/>\n\n## ![✔] 6.25. 避免将机密信息发布到NPM仓库\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 您应该采取预防措施来避免偶然地将机密信息发布到npm仓库的风险。 一个 `.npmignore` 文件可以被用作忽略掉特定的文件或目录, 或者一个在 `package.json` 中的 `files` 数组可以起到一个白名单的作用.\n\n**否则:** 您项目的API密钥、密码或者其它机密信息很容易被任何碰到的人滥用，这可能会导致经济损失、身份冒充以及其它风险。\n\n🔗 [**阅读更多: 避免发布机密信息**](./sections/security/avoid_publishing_secrets.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ Return to top</a></p>\n\n# `7. 草稿: 有关性能的最佳实践`\n\n## 我们的贡献者们正在努力完善这个章节。 [你想要加入吗?](https://github.com/goldbergyoni/nodebestpractices/issues/256)\n\n<br/><br/>\n\n## ![✔] 7.1. 不要阻塞事件循环\n\n**TL;DR:** 避免执行CPU密集型的任务，并将这些任务转移到基于上下文的专用线程中，因为它们会阻塞大多数单线程事件循环。\n\n**否则:** 由于事件循环被阻塞了，Node.js 将无法处理其它请求，从而导致同时请求的用户的延迟。 **3000 位用户正在等待响应，内容本身已经准备好了提供服务， 但是一个单独的请求阻止了服务器将结果分发回去。**\n\n🔗 [**阅读更多: 不要阻塞事件循环**](./sections/performance/block-loop.md)\n\n<br /><br /><br />\n\n## ![✔] 7.2. 优先使用原生的JS方法，而不是像 Lodash 这样的用户空间级别的实用工具\n\n**TL;DR:** 使用像 `lodash` 和 `underscore` 这样的实用库替代原生的JS方法，通常来说这么做更不好，因为它导致了一些不必要的依赖项以及更差的性能表现。\n请记住，随着新的V8引擎以及新的ES标准的引入，原生方法得到了改进，它们现在会比这些实用工具库高出大概 50% 的性能。\n\n**否则:** 你将不得不维护一些性能更低的项目，在这些项目中，你本可以很简单的使用那些已经可以用的东西，或者用几行代码来取代掉几个文件。\n\n🔗 [**阅读更多: 原生方法胜过实用工具**](./sections/performance/nativeoverutil.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ Return to top</a></p>\n\n<br/><br/><br/>\n\n# Milestones\n\nTo maintain this guide and keep it up to date, we are constantly updating and improving the guidelines and best practices with the help of the community. You can follow our [milestones](https://github.com/goldbergyoni/nodebestpractices/milestones) and join the working groups if you want to contribute to this project.\n\n<br/><br/>\n\n# Contributors\n\n## `Yoni Goldberg`\n\nIndependent Node.js consultant who works with customers at USA, Europe and Israel on building large-scale scalable Node applications. Many of the best practices above were first published on his blog post at [http://www.goldbergyoni.com](http://www.goldbergyoni.com). Reach Yoni at @goldbergyoni or me@goldbergyoni.com\n\n## `Ido Richter`\n\n👨‍💻 Software engineer, 🌐 web developer, 🤖 emojis enthusiast.\n\n## `Refael Ackermann` [@refack](https://github.com/refack) &lt;refack@gmail.com&gt; (he/him)\n\nNode.js Core Collaborator, been noding since 0.4, and have noded in multiple production sites. Founded `node4good` home of [`lodash-contrib`](https://github.com/node4good/lodash-contrib), [`formage`](https://github.com/node4good/formage), and [`asynctrace`](https://github.com/node4good/asynctrace).\n`refack` on freenode, Twitter, GitHub, GMail, and many other platforms. DMs are open, happy to help.\n\n## `Bruno Scheufler`\n\n💻 full-stack web developer and Node.js enthusiast.\n\n## `Kyle Martin` [@js-kyle](https://github.com/js-kyle)\n\nFull Stack Developer based in New Zealand, interested in architecting and building Node.js applications to perform at global scale. Keen contributor to open source software, including Node.js Core.\n\n<br/><br/>\n\n## Thank You Notes\n\nWe appreciate any contribution, from a single word fix to a new best practice. View our contributors and [contributing documentation here!](./README.md#contributors-)\n\n<br/><br/><br/>\n"
        },
        {
          "name": "README.french.md",
          "type": "blob",
          "size": 189.14,
          "content": "[✔]: assets/images/checkbox-small-blue.png\n\n# Bonnes pratiques Node.js\n\n<h1 align=\"center\">\n  <img src=\"assets/images/banner-2.jpg\" alt=\"Bonnes pratiques Node.js\"/>\n</h1>\n\n<br/>\n\n<div align=\"center\">\n  <img src=\"https://img.shields.io/badge/⚙%20Item%20count%20-%20102%20Best%20Practices-blue.svg\" alt=\"102 items\"/> <img id=\"last-update-badge\" src=\"https://img.shields.io/badge/%F0%9F%93%85%20Last%20update%20-%20July%2014%2C%202021-green.svg\" alt=\"Dernière mise à jour : 14 Juillet 2021\" /> <img src=\"https://img.shields.io/badge/ %E2%9C%94%20Updated%20For%20Version%20-%20Node%2014.0.0-brightgreen.svg\" alt=\"Mis à jour pour Node 14.0.0\"/>\n</div>\n\n<br/>\n\n[![nodepractices](./assets/images/twitter-s.png)](https://twitter.com/nodepractices/) **Suivez nous sur Twitter !** [**@nodepractices**](https://twitter.com/nodepractices/)\n\n<br/>\n\nLire dans une autre langue : [![CN](./assets/flags/CN.png)**CN**](./README.chinese.md), [![FR](./assets/flags/FR.png)**FR**](./README.french.md), [![BR](./assets/flags/BR.png)**BR**](./README.brazilian-portuguese.md), [![RU](./assets/flags/RU.png)**RU**](./README.russian.md), [![PL](./assets/flags/PL.png)**PL**](./README.polish.md), [![JA](./assets/flags/JA.png)**JA**](./README.japanese.md), [![EU](./assets/flags/EU.png)**EU**](./README.basque.md) [(![ES](./assets/flags/ES.png)**ES**, ![HE](./assets/flags/HE.png)**HE**, ![KR](./assets/flags/KR.png)**KR** et ![TR](./assets/flags/TR.png)**TR** en cours ! )](#traductions)\n\n<br/>\n\n###### Construit et entretenu par notre [comité de pilotage](#comité-de-pilotage) et nos [collaborateurs](#collaborateurs)\n\n# Dernières bonnes pratiques et nouveautés\n\n- **![FR](./assets/flags/FR.png) Traduction française!1! :** La dernière traduction qui rejoint notre guide international est le français. Bienvenue\n\n- **🇯🇵 traduction japonaise :** Notre guide est désormais également traduit en japonais ! Avec l'aimable autorisation des extraordinaires [YukiOta](https://github.com/YukiOta) et [Yuta Azumi](https://github.com/YA21).\n\n- **🎊 60,000 stars !** : Notre dépôt a reçu la reconnaissance et la confiance de 60 100 développeurs. Nous sommes sans voix.\n\n<br/><br/>\n\n# Bienvenue ! 3 Choses à savoir avant tout\n\n**1. Vous êtes en train de lire un regroupement des meilleurs articles sur Node.js. -** ce référentiel est un résumé et il conserve le contenu le mieux classé sur les bonnes pratiques Node.js, ainsi que du contenu écrit ici par des collaborateurs\n\n**2. Il s'agit du plus grand assemblage d'articles et il s'agrandit chaque semaine -** actuellement, plus de 80 bonnes pratiques, guides de style et astuces d'architecture sont présentées. Nous serions ravis de vous voir contribuer ici, qu'il s'agisse de corriger des erreurs de code, d'aider aux traductions ou de suggérer de nouvelles idées brillantes. Consultez nos [recommandations d'écriture](./.operations/writing-guidelines.french.md)\n\n**3. Les bonnes pratiques contiennent des informations supplémentaires -** la plupart des points ont un lien **🔗Plus d'infos** qui développe la bonne pratique avec des exemples de code, des citations venant de pages sélectionnées et plus encore.\n\n<br/><br/>\n\n## Table des matières\n\n1. [Structure de projet (5)](#1-structure-de-projet)\n2. [Gestion des erreurs (12) ](#2-gestion-des-erreurs)\n3. [Style du code (12) ](#3-style-du-code)\n4. [Tests et pratiques générales de qualité (13) ](#4-tests-et-pratiques-générales-de-qualité)\n5. [Pratiques de mise en production (19) ](#5-pratiques-de-mise-en-production)\n6. [Sécurité (25)](#6-bonnes-pratiques-de-sécurité)\n7. [Performance (2) (Travail en cours ✍️)](#7-brouillon-bonnes-pratiques-de-performance)\n8. [Pratiques de Docker (15)](#8-bonnes-pratiques-de-docker)\n\n<br/><br/>\n\n# `1. Structure de projet`\n\n## ![✔] 1.1 Organisez votre projet en composants\n\n**TL;PL :** Le pire obstacle des énormes applications est la maintenance d'une base de code immense contenant des centaines de dépendances - un tel monolithe ralentit les développeurs tentant d'ajouter de nouvelles fonctionnalités. Pour éviter cela, répartissez votre code en composants, chacun dans son dossier avec son code dédié, et assurez vous que chaque unité soit courte et simple. Visitez le lien « Plus d'infos » plus bas pour voir des exemples de structure de projet correcte.\n\n**Autrement :** Lorsque les développeurs qui codent de nouvelles fonctionnalités ont du mal à réaliser l'impact de leur changement et craignent de casser d'autres composants dépendants - les déploiements deviennent plus lents et plus risqués. Il est aussi considéré plus difficile d'élargir un modèle d'application quand les unités opérationnelles ne sont pas séparées.\n\n🔗 [**Plus d'infos : organisez en composants**](./sections/projectstructre/breakintcomponents.french.md)\n\n<br/><br/>\n\n## ![✔] 1.2 Organisez vos composants en strates, gardez la couche web à l'intérieur de son périmètre\n\n**TL;PL :** Chaque composant devrait contenir des « strates » - un objet dédié pour le web, un pour la logique et un pour le code d'accès aux données. Cela permet non seulement de séparer clairement les responsabilités mais permet aussi de simuler et de tester le système de manière plus simple. Bien qu'il s'agisse d'un modèle très courant, les développeurs d'API ont tendance à mélanger les strates en passant l'objet dédié au web (Par exemple Express req, res) à la logique opérationnelle et aux strates de données - cela rend l'application dépendante et accessible seulement par les frameworks web spécifiques.\n\n**Autrement :** Les tests, les jobs CRON, les déclencheurs des files d'attente de messages et etc ne peuvent pas accéder à une application qui mélange les objets web avec les autres strates.\n\n🔗 [**Plus d'infos : organisez en strates votre app**](./sections/projectstructre/createlayers.french.md)\n\n<br/><br/>\n\n## ![✔] 1.3 Externalisez les utilitaires communs en paquets NPM\n\n**TL;PL :** Dans une grande appli rassemblant de nombreuses lignes de codes, les utilitaires opérant sur toutes les strates comme un logger, l'encryption et autres, devraient être inclus dans le code et exposés en tant que paquets NPM privés. Cela permet leur partage au sein de plusieurs projets.\n\n**Autrement :** Vous devrez inventer votre propre roue de déploiement et de dépendance\n\n🔗 [**Plus d'infos : organisez par fonction**](./sections/projectstructre/wraputilities.french.md)\n\n<br/><br/>\n\n## ![✔] 1.4 Séparez Express 'app' et 'server'\n\n**TL;PL :** Evitez la sale habitude de définir l'appli [Express](https://expressjs.com/) toute entière dans un seul fichier immense - séparez la définition de votre 'Express' en au moins deux fichiers : la déclaration de l'API (app.js) et les responsabilités de gestion de réseau (WWW). Pour une structure encore plus poussée, localisez la déclaration de l'API dans les composants.\n\n**Autrement :** Votre API sera seulement accessible aux tests par le biais d'appels HTTP (plus lent et plus difficile de générer des rapports de couverture). Cela ne sera pas un réel plaisir de maintenir des centaines de lignes de code dans un fichier unique.\n\n🔗 [**Plus d'infos : séparez Express 'app' et 'server'**](./sections/projectstructre/separateexpress.french.md)\n\n<br/><br/>\n\n## ![✔] 1.5 Utilisez une configuration respectueuse de l'environnement, sécurisée et hiérarchique\n\n**TL;PL :** La mise en place d'une configuration parfaite et sans faille doit garantir que (a) les clés peuvent être lues depuis un fichier ET à partir de la variable d'environnement (b) les secrets sont conservés hors du code source (c) la configuration est hiérarchique pour une recherche plus simple. Certains paquets peuvent gérer la plupart de ces points comme [rc](https://www.npmjs.com/package/rc), [nconf](https://www.npmjs.com/package/nconf), [config](https://www.npmjs.com/package/config) et [convict](https://www.npmjs.com/package/convict).\n\n**Autrement :** Ne pas se soucier de ces exigences de configuration ne fera que ralentir l'équipe de développement ou l'équipe de DevOps. Probablement les deux.\n\n🔗 [**Plus d'infos : bonnes pratiques de configuration**](./sections/projectstructre/configguide.french.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-des-matières\">⬆ Retourner en haut de la page</a></p>\n\n# `2. Gestion des erreurs`\n\n## ![✔] 2.1 Utilisez Async-Await ou les promesses pour le traitement des erreurs asynchrones\n\n**TL;PL :** Gérer les erreurs asynchrone avec le style fonction de rappel est probablement le chemin le plus rapide vers l'enfer (ou la [pyramide condamnée](https://fr.wikipedia.org/wiki/Pyramide_condamn%C3%A9e)). Le meilleur cadeau que vous puissiez faire à votre code est d'utiliser une bibliothèque de promesses réputée ou async-await à la place, ceci permet une syntaxe de code beaucoup plus compacte et familière comme try-catch.\n\n**Autrement :** Le style fonction de rappel de Node.js, function(err, response), constituent une autre manière d’obtenir une solution non maintenable mêlant gestion de l’erreur avec du code ordinaire, des imbrications excessives et une conception bancale.\n\n🔗 [**Plus d'infos : évitez les fonctions de rappel**](./sections/errorhandling/asyncerrorhandling.french.md)\n\n<br/><br/>\n\n## ![✔] 2.2 Utilisez uniquement l'objet intégré Error\n\n**TL;PL :** Beaucoup lèvent des erreurs sous forme de chaîne ou de type personnalisé - cela complique la logique de gestion des erreurs et l'interopérabilité entre les modules. Que vous rejetiez une promesse, leviez une exception ou émettiez une erreur - l'utilisation uniquement de l'objet intégré Error (ou un objet qui étend l'objet Error) augmentera l'uniformité et empêchera la perte d'informations. Il existe une règle ESLint `no-throw-literal` qui vérifie strictement cela (bien qu'elle ait quelques [limitations](https://eslint.org/docs/rules/no-throw-literal) qui peuvent être résolues en utilisant TypeScript et en définissant la règle `@typescript-eslint/no-throw-literal`).\n\n**Autrement :** Lorsque vous appelez un composant, le type d'erreurs en retour étant incertain - cela rend la gestion des erreurs beaucoup plus difficile. Pire encore, l'utilisation de types personnalisés pour décrire des erreurs peut entraîner la perte d'informations d'erreurs critiques comme la trace de la pile !\n\n🔗 [**Plus d'infos : utilisez uniquement l'objet intégré Error**](./sections/errorhandling/useonlythebuiltinerror.french.md)\n\n<br/><br/>\n\n## ![✔] 2.3 Distinguez les erreurs opérationnelles des erreurs de programmation\n\n**TL;PL :** Les erreurs opérationnelles (par exemple, l'API a reçu une entrée non valide) se rapportent à des cas connus où l'impact de l'erreur est entièrement compris et peut être géré de manière réfléchie. D'autre part, une erreur de programmation (par exemple, essayer de lire une variable non définie) fait référence à des échecs de code inconnus qui dictent de redémarrer l'application en douceur.\n\n**Autrement :** Vous pouvez toujours redémarrer l'application lorsqu'une erreur apparaît, mais pourquoi lâcher environ 5000 utilisateurs en ligne en raison d'une erreur opérationnelle mineure prévue ? L'inverse n'est pas non plus idéal - laisser l'application en place lorsqu'un problème inconnu (erreur de programmation) s'est produit peut conduire à un comportement imprévu. Différencier les deux permet d'agir avec tact et d'appliquer une approche équilibrée en fonction du contexte donné.\n\n🔗 [**Plus d'infos : erreur opérationnelle vs erreur de programmation**](./sections/errorhandling/operationalvsprogrammererror.french.md)\n\n<br/><br/>\n\n## ![✔] 2.4 Gérez les erreurs de manière centralisée, pas dans un middleware\n\n**TL;PL :** Les logiques de gestion des erreurs telles que le mail à l'administrateur et la journalisation doivent être encapsulées dans un objet dédié et centralisé, pour que tous les points de terminaison (par exemple, middleware Express, tâches cron, tests unitaires) l'appellent lorsqu'une erreur survient.\n\n**Autrement :** Ne pas traiter les erreurs dans un seul endroit entraînera une duplication de code et probablement des erreurs mal gérées\n\n🔗 [**Plus d'infos : gestion des erreurs dans un lieu centralisé**](./sections/errorhandling/centralizedhandling.french.md)\n\n<br/><br/>\n\n## ![✔] 2.5 Documentez les erreurs de l'API à l'aide de Swagger ou GraphQL\n\n**TL;PL :** Faites savoir à vos appelants de l'API quelles erreurs peuvent survenir en retour afin de pouvoir les traiter de manière réfléchie sans planter. Pour les API RESTful, cela se fait généralement avec des frameworks de documentation comme Swagger. Si vous utilisez GraphQL, vous pouvez également utiliser votre schéma et vos commentaires.\n\n**Autrement :** Un client d'une API peut décider de planter et de redémarrer uniquement parce qu'il a reçu une erreur qu'il ne comprend pas. Remarque: l'appelant de votre API peut être vous (très typique dans un environnement de microservice)\n\n🔗 [**Plus d'infos : documentez les erreurs de l'API à l'aide de Swagger ou GraphQL**](./sections/errorhandling/documentingusingswagger.french.md)\n\n<br/><br/>\n\n## ![✔] 2.6 Quittez le processus avec élégance lorsqu'un étranger arrive en ville\n\n**TL;PL :** Lorsqu'une erreur inconnue se produit (une erreur de programmation, voir la bonne pratique 2.3) - il existe une incertitude sur la bonne santé de l'application. Une pratique courante suggère de redémarrer le processus avec précaution à l'aide d'un outil de gestion des processus comme [Forever](https://www.npmjs.com/package/forever) ou [PM2](http://pm2.keymetrics.io/).\n\n**Autrement :** Lorsqu'une exception inconnue se produit, certains objets peuvent être dans un état défectueux (par exemple, un émetteur d'événements qui est utilisé globalement et qui ne déclenche plus d'événements en raison d'une défaillance interne) et toutes les demandes futures peuvent échouer ou se comporter de manière folle.\n\n🔗 [**Plus d'infos : arrêtez le processus**](./sections/errorhandling/shuttingtheprocess.french.md)\n\n<br/><br/>\n\n## ![✔] 2.7 Utilisez un outil de journalisation mature pour augmenter la visibilité des erreurs\n\n**TL;PL :** Un ensemble d'outils de journalisation matures comme [Pino](https://github.com/pinojs/pino) ou [Log4js](http://stritti.github.io/log4js/), accélérera la découverte et la compréhension des erreurs. Alors oubliez console.log.\n\n**Autrement :** En parcourant les console.logs ou manuellement par le biais d'un fichier texte désordonné sans outils d'interrogation ou d'une visionneuse de journaux décente, vous pourriez être occupé au travail jusqu'à tard dans la nuit.\n\n🔗 [**Plus d'infos : utilisation d'un outil de journalisation mature**](./sections/errorhandling/usematurelogger.french.md)\n\n<br/><br/>\n\n## ![✔] 2.8 Testez les flux d'erreurs en utilisant votre framework de test préféré\n\n**TL;PL :** Qu'il s'agisse d'un outil automatisée d'assurance qualité professionnelle ou de tests manuels simples pour les développeurs - Assurez-vous que votre code non seulement satisfait les scénarios positifs, mais gère et renvoie également les bonnes erreurs. Les frameworks de test comme Mocha & Chai peuvent gérer cela facilement (voir les exemples de code dans « Plus d'infos »)\n\n**Autrement :** Sans test, que ce soit automatiquement ou manuellement, vous ne pouvez pas compter sur votre code pour renvoyer les bonnes erreurs. Sans erreurs significatives - il n'y a pas de gestion des erreurs.\n\n🔗 [**Plus d'infos : test des flux d'erreurs**](./sections/errorhandling/testingerrorflows.french.md)\n\n<br/><br/>\n\n## ![✔] 2.9 Découvrez les erreurs et les indisponibilités à l'aide des produits de gestion de la performance applicative\n\n**TL;PL :** Les produits de surveillance et de performance (alias GPA, APM en anglais : application performance management) évaluent de manière proactive votre base de code ou votre API afin qu'ils puissent mettre en évidence automatiquement les erreurs, les plantages et les parties lentes qui vous ont échappé.\n\n**Autrement :** Vous pourriez consacrer beaucoup d'efforts à mesurer les performances et les indisponibilités de l'API, vous ne saurez probablement jamais quelles sont vos parties de code les plus lentes dans le scénario du monde réel et comment celles-ci affectent l'expérience utilisateur.\n\n🔗 [**Plus d'infos : utilisation des produits GPA**](./sections/errorhandling/apmproducts.french.md)\n\n<br/><br/>\n\n## ![✔] 2.10 Capturez les rejets de promesses non gérés\n\n**TL;PL :** Toute exception levée dans une promesse sera absorbée et écartée à moins qu'un développeur n'ait pas oublié de le traiter explicitement. Même si votre code est abonné à `process.uncaughtException` ! Surmontez cela en vous inscrivant à l'événement `process.unhandledRejection`.\n\n**Autrement :** Vos erreurs seront absorbées et ne laisseront aucune trace. Il n'y a pas de quoi s'inquiéter.\n\n🔗 [**Plus d'infos : capturez les rejets de promesses non gérés**](./sections/errorhandling/catchunhandledpromiserejection.french.md)\n\n<br/><br/>\n\n## ![✔] 2.11 Échouez rapidement, valider les arguments à l'aide d'une bibliothèque dédiée\n\n**TL;PL :** Contrôlez les arguments de l'API pour éviter les bugs désagréables qui sont beaucoup plus difficiles à suivre plus tard. Le code de validation est généralement fastidieux, sauf si vous utilisez une bibliothèque d'aide très cool comme [ajv](https://www.npmjs.com/package/ajv) et [Joi](https://www.npmjs.com/package/joi).\n\n**Autrement :** Considérez ceci - votre fonction attend un argument numérique « Discount » que l'appelant oublie de passer, plus loin dans le code, il vérifie si Discount!= 0 (le montant de la remise autorisée est supérieur à zéro), ensuite le code permet à l'utilisateur de profiter d'un remise. OMG, quel méchant bug. Le vois-tu ?\n\n🔗 [**Plus d'infos : échec rapide**](./sections/errorhandling/failfast.french.md)\n\n<br/><br/>\n\n## ![✔] 2.12 Attendez toujours les promesses avant de retourner afin d'éviter des traces de pile partielles\n\n**TL;PL :** Faites toujours `return await` lorsque vous retournez une promesse afin de bénéficier d'une trace de pile complète. Si une\nfonction retourne une promesse, cette fonction doit être déclarée comme fonction `async` et explicitement\nattendre (`await`) la promesse avant de la retourner.\n\n**Autrement :** La fonction qui retourne une promesse sans attendre n'apparaîtra pas dans la trace de la pile.\nDe telles trames manquantes compliqueraient probablement la compréhension du flux qui conduit à l'erreur,\nsurtout si la cause du comportement anormal se situe à l'intérieur de la fonction manquante\n\n🔗 [**Plus d'infos : le retour des promesses**](./sections/errorhandling/returningpromises.french.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-des-matières\">⬆ Retourner en haut de la page</a></p>\n\n# `3. Style du code`\n\n## ![✔] 3.1 Utilisez ESLint\n\n**TL;PL :** [ESLint](https://eslint.org) est la norme de facto pour vérifier d'éventuelles erreurs de code et pour corriger le style du code, ce n'est pas uniquement pour identifier les problèmes d'espacement mais aussi pour détecter les antipatterns préoccupants du code comme par exemple les développeurs levant des erreurs sans classification. Bien qu'ESLint puisse corriger automatiquement les styles du code, d'autres outils comme [prettier](https://www.npmjs.com/package/prettier) et [beautify](https://www.npmjs.com/package/js-beautify) sont plus puissants dans le formatage de la correction et fonctionnent en collaboration avec ESLint.\n\n**Autrement :** Les développeurs se concentreront sur les problèmes fastidieux d'espacement et de largeur de ligne, ce qui pourrait faire perdre du temps à trop réfléchir sur le style de code du projet.\n\n🔗 [**Plus d'infos : Utilisez ESLint et Prettier**](./sections/codestylepractices/eslint_prettier.french.md)\n\n<br/><br/>\n\n## ![✔] 3.2 Plugins spécifiques à Node.js\n\n**TL;PL :** En plus des règles standard ESLint couvrant JavaScript vanilla, ajoutez des plugins spécifiques à Node.js comme [eslint-plugin-node](https://www.npmjs.com/package/eslint-plugin-node), [eslint-plugin-mocha](https://www.npmjs.com/package/eslint-plugin-mocha) et [eslint-plugin-node-security](https://www.npmjs.com/package/eslint-plugin-security).\n\n**Autrement :** De nombreux modèles de code Node.js défectueux peuvent s'échapper des radars. Par exemple, les développeurs pourrait exiger des fichiers avec une variable donnée comme un chemin d'accès (`require(variableCommeChemin)`) qui permet aux attaquants d'exécuter n'importe quel script JS. Les linters de Node.js peuvent détecter de tels modèles et se plaindre en amont.\n\n<br/><br/>\n\n## ![✔] 3.3 Commencez les accolades d'un bloc de code sur la même ligne\n\n**TL;PL :** Les accolades ouvrantes d'un bloc de code doivent être sur la même ligne que l'instruction d'ouverture.\n\n### Code Example\n\n```javascript\n// À faire\nfunction someFunction() {\n  // bloc de code\n}\n\n// À éviter\nfunction someFunction\n{\n  // bloc de code\n}\n```\n\n**Autrement :** Le non-respect de cette bonne pratique peut conduire à des résultats inattendus, comme le montre la discussion de StackOverflow ci-dessous :\n\n🔗 [**Plus d'infos :** « Pourquoi les résultats varient-ils en fonction du placement des accolades ? » (StackOverflow)](https://stackoverflow.com/questions/3641519/why-does-a-results-vary-based-on-curly-brace-placement)\n\n<br/><br/>\n\n## ![✔] 3.4 Séparez correctement vos instructions\n\nPeu importe si vous utilisez les points-virgules ou non pour séparer vos instructions, le fait de connaître les pièges courants des sauts de ligne incorrects ou de l'insertion automatique de points-virgules, vous aidera à éliminer les erreurs syntaxiques habituelles.\n\n**TL;PL :** Utilisez ESLint pour vous sensibiliser aux problèmes de séparation. [Prettier](https://prettier.io/) ou [Standardjs](https://standardjs.com/) peuvent résoudre automatiquement ces problèmes.\n\n**Autrement :** Comme vu dans la section précédente, l'interpréteur JavaScript ajoute automatiquement un point-virgule à la fin d'une instruction s'il n'y en a pas, ou considère une instruction comme non terminée là où elle devrait, ce qui pourrait conduire à des résultats indésirables. Vous pouvez utiliser des affectations et éviter d'utiliser des expressions de fonction invoquées immédiatement pour éviter la plupart des erreurs inattendues.\n\n### Exemple de code\n\n```javascript\n// À faire\nfunction doThing() {\n    // ...\n}\n\ndoThing()\n\n// À faire\n\nconst items = [1, 2, 3]\nitems.forEach(console.log)\n\n// À éviter — lève une exception\nconst m = new Map()\nconst a = [1,2,3]\n[...m.values()].forEach(console.log)\n> [...m.values()].forEach(console.log)\n>  ^^^\n> SyntaxError: Unexpected token ...\n\n// À éviter — lève une exception\nconst count = 2 // il essaie d'exécuter 2(), mais 2 n'est pas une fonction\n(function doSomething() {\n  // faire quelque chose d'incroyable\n}())\n// placez un point-virgule avant la fonction immédiatement invoquée, après la définition de const, enregistrez la valeur de retour de la fonction anonyme dans une variable ou évitez tous les IIFE\n```\n\n🔗 [**Plus d'infos :** « Règle de ESLint : points-virgules »](https://eslint.org/docs/rules/semi)\n🔗 [**Plus d'infos :** « Règle de ESLint : pas de multiligne inattendue »](https://eslint.org/docs/rules/no-unexpected-multiline)\n\n<br/><br/>\n\n## ![✔] 3.5 Nommez vos fonctions\n\n**TL;PL :** Nommez toutes les fonctions, y compris les fermetures _(closures, NdT)_ et les fonctions de rappel. Évitez les fonctions anonymes. Cela est particulièrement utile lors du profilage d'une application de Node. Nommer toutes les fonctions vous permettra de comprendre facilement ce que vous regardez lors de la vérification d'un instantané de mémoire _(snapshot memory, NdT)_.\n\n**Autrement :** Le débogage des problèmes de production à l'aide d'un vidage de mémoire (instantané de mémoire) peut devenir difficile lorsque vous remarquez une consommation de mémoire importante de la part de fonctions anonymes.\n\n<br/><br/>\n\n## ![✔] 3.6 Utilisez des conventions de nommage pour les variables, les constantes, les fonctions et les classes\n\n**TL;PL :** Utilisez **_LowerCamelCase_** lorsque vous nommez des constantes, des variables et des fonctions et **_UpperCamelCase_** (première lettre en majuscule également) lorsque vous nommez des classes. Cela vous aidera à distinguer facilement les simples variables/fonctions et les classes qui nécessitent une instanciation. Utilisez des noms évocateurs, mais efforcez-vous de les garder concis.\n\n**Autrement :** JavaScript est le seul langage au monde qui permet d'invoquer directement un constructeur (« Class ») sans l'instancier au préalable. Par conséquent, les classes et les fonctions-constructeurs sont différenciés en commençant par UpperCamelCase.\n\n### 3.6 Exemple de code\n\n```javascript\n// pour le nom d'une classe, nous utilisons UpperCamelCase\nclass SomeClassExample {}\n\n// pour les noms de constantes, nous utilisons le mot-clé const et lowerCamelCase\nconst config = {\n  key: \"value\",\n};\n\n// pour les noms de variables et de fonctions, nous utilisons lowerCamelCase\nlet someVariableExample = \"value\";\nfunction doSomething() {}\n```\n\n<br/><br/>\n\n## ![✔] 3.7 Préférez const à let. Laissez tomber le var\n\n**TL;PL :** L'utilisation de `const` signifie qu'une fois qu'une variable est affectée, elle ne peut pas être réaffectée. Préférer `const` vous aidera à ne pas être tenté d'utiliser la même variable pour différentes utilisations et rendra votre code plus clair. Si une variable doit être réaffectée, par exempledans une boucle for, utilisez `let` pour la déclarer. Un autre aspect important de `let` est qu'une variable déclarée l'utilisant n'est disponible que dans la portée du bloc dans laquelle elle a été définie. `var` est une portée de fonction, pas une portée de bloc, et [ne devrait pas être utilisé en ES6](https://hackernoon.com/why-you-shouldnt-use-var-anymore-f109a58b9b70) maintenant que vous avez `const` et `let` à votre disposition.\n\n**Autrement :** Le débogage devient beaucoup plus lourd lorsque vous suivez une variable qui change fréquemment.\n\n🔗 [**Plus d'infos : JavaScript ES6+ : var, let, ou const ?** ](https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75)\n\n<br/><br/>\n\n## ![✔] 3.8 Utilisez en premier require pour les modules, pas dans des fonctions internes\n\n**TL;PL :** Utilisez au début de chaque fichier `require` pour les modules, avant et en dehors de toute fonction. Cette bonne pratique simple vous aidera non seulement à identifier facilement et rapidement les dépendances en haut d'un fichier, mais évite également quelques problèmes potentiels.\n\n**Autrement :** Les `require` sont exécutées de manière synchrone par Node.js. S'ils sont appelés depuis une fonction, cela peut empêcher le traitement d'autres demandes à un moment plus critique. De plus, si un module requis ou l'une de ses dépendances lance une erreur et plante le serveur, il est préférable de le découvrir le plus tôt possible, ce qui pourrait ne pas être le cas si ce module est requis depuis une fonction.\n\n<br/><br/>\n\n## ![✔] 3.9 Exiger les modules par leurs dossiers, contrairement à l'appel direct aux fichiers\n\n**TL;PL :** Lorsque vous développez un module/bibliothèque dans un dossier, placez un fichier index.js qui expose les composants internes du module afin que chaque utilisateur puisse y accéder. Cela sert d '« interface » à votre module et facilite les modifications futures sans rompre le contrat.\n\n**Autrement :** La modification de la structure interne des fichiers ou de la signature peut rompre l'interface avec les clients.\n\n### 3.9 Exemple de code\n\n```javascript\n// À faire\nmodule.exports.SMSProvider = require(\"./SMSProvider\");\nmodule.exports.SMSNumberResolver = require(\"./SMSNumberResolver\");\n\n// À éviter\nmodule.exports.SMSProvider = require(\"./SMSProvider/SMSProvider.js\");\nmodule.exports.SMSNumberResolver = require(\"./SMSNumberResolver/SMSNumberResolver.js\");\n```\n\n<br/><br/>\n\n## ![✔] 3.10 Utilisez l'opérateur `===`\n\n**TL;PL :** Préférez l'opérateur d'égalité stricte `===` à l'opérateur d'égalité abstraite plus faible `==`. `==` comparera deux variables après les avoir converties en un type commun. Il n'y a pas de conversion de type dans `===`, et les deux variables doivent être du même type pour être égales.\n\n**Autrement :** Les variables inégales peuvent renvoyer true avec l'opérateur `==`.\n\n### 3.10 Exemple de code\n\n```javascript\n\"\" == \"0\"; // false\n0 == \"\"; // true\n0 == \"0\"; // true\n\nfalse == \"false\"; // false\nfalse == \"0\"; // true\n\nfalse == undefined; // false\nfalse == null; // false\nnull == undefined; // true\n\n\" \\t\\r\\n \" == 0; // true\n```\n\nToutes les déclarations ci-dessus renverront false si elles sont utilisées avec `===`\n\n<br/><br/>\n\n## ![✔] 3.11 Utilisez Async Await, évitez les fonctions de rappel\n\n**TL;PL :** Node 8 LTS prend désormais entièrement en charge Async-wait. Il s'agit d'une nouvelle façon de gérer le code asynchrone qui remplace les fonctions de rappel et les promesses. L'attente asynchrone n'est pas bloquante et rend le code asynchrone synchrone. Le meilleur cadeau que vous puissiez faire à votre code est d'utiliser async-wait qui fournit une syntaxe de code beaucoup plus compacte et familière comme try-catch.\n\n**Autrement :** La gestion des erreurs asynchrones dans le style des fonctions de rappel est probablement le chemin le plus rapide vers l'enfer - ce style oblige de vérifier les erreurs partout, à gérer les imbrications de code gênantes et rend difficile la compréhension du flux du code.\n\n🔗[**Plus d'infos :** guide pour async-await 1.0](https://github.com/yortus/asyncawait)\n\n<br/><br/>\n\n## ![✔] 3.12 Utiliser les expressions de fonction fléchée (=>)\n\n**TL;PL :** Bien qu'il soit recommandé d'utiliser async-wait et d'éviter les paramètres de fonction lorsque vous traitez avec des API plus anciennes qui acceptent des promesses ou des rappels - les fonctions fléchées rendent la structure de code plus compacte et gardent le contexte lexical de la fonction racine (c'est-à-dire `this`).\n\n**Autrement :** Un code plus long (dans les fonctions ES5) est plus sujet aux bogues et lourd à lire.\n\n🔗 [**Plus d'infos : il est temps d'adopter les fonctions fléchées**](https://medium.com/javascript-scene/familiarity-bias-is-holding-you-back-its-time-to-embrace-arrow-functions-3d37e1a9bb75)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-des-matières\">⬆ Retourner en haut de la page</a></p>\n\n# `4. Tests et pratiques générales de qualité`\n\n## ![✔] 4.1 Au minimum, écrivez des tests API (pour chaque composant)\n\n**TL;PL :** La plupart des projets n'ont tout simplement pas de test automatisé en raison de délais courts ou souvent le « projet de test » est devenu incontrôlable et a été abandonné. Pour cette raison, priorisez et commencez par les tests d'API, qui est le moyen le plus simple d'écrire et qui offre plus de couverture que les tests unitaires (vous pouvez même créer des tests d'API sans code à l'aide d'outils comme [Postman](https://www.getpostman.com/)). Par la suite, si vous avez plus de ressources et de temps, continuez avec des types de tests avancés tels que les tests unitaires, les tests DB (base de données), les tests de performances, etc.\n\n**Autrement :** Vous pouvez passer de longues journées à écrire des tests unitaires pour découvrir que vous n'avez qu'une couverture système de 20%\n\n<br/><br/>\n\n## ![✔] 4.2 Incluez 3 parties dans chaque nom de test\n\n**TL;PL :** Donnez un nom de test éloquent selon son niveau d'exigences pour qu'il soit compréhensible par les ingénieurs et développeurs de l'assurance qualité qui ne sont pas familiers avec les codes internes. Indiquez dans le nom du test ce qui est testé (élément du test), dans quelles circonstances et quel est le résultat attendu.\n\n**Autrement :** Un déploiement vient d'échouer, un test nommé « Ajoute un produit » a échoué. Cela vous indique-t-il exactement ce qui ne fonctionne pas correctement ?\n\n🔗[**Plus d'infos : incluez 3 parties dans chaque nom de test**](./sections/testingandquality/3-parts-in-name.french.md)\n\n<br/><br/>\n\n## ![✔] 4.3 Structurez vos tests avec le format AAA\n\n**TL;PL :** Structurez vos tests avec 3 sections bien séparées : Arrange, Act & Assert (AAA). La première partie comprend la configuration du test, puis l'exécution de l'unité testée et enfin la phase d'assertion (vérification). Le respect de cette structure garantit que le lecteur n'utilise pas de le CPU de son cerveau pour comprendre le plan de test.\n\n**Autrement :** Non seulement vous passez de longues heures par jour à comprendre le code principal, mais maintenant, ce qui aurait dû être la partie la plus simple de la journée (les tests) accroche votre cerveau\n\n🔗[**Plus d'infos : structurez vos tests avec le format AAA**](./sections/testingandquality/aaa.french.md)\n\n<br/><br/>\n\n## ![✔] 4.4 Détectez les problèmes de code avec un linter\n\n**TL;PL :** Utilisez un linter de code pour vérifier la qualité et détecter les antipatterns au plus tôt. Exécutez-le avant les tests et ajoutez-le en tant que git-hook de pré-commit pour diminuer le temps nécessaire pour examiner et corriger tout problème. Vérifiez également la [section 3](#3-style-du-code) sur les pratiques de style de code.\n\n**Autrement :** Vous pouvez laisser passer un code antipatterns et éventuellement vulnérable sur votre environnement de production.\n\n<br/><br/>\n\n## ![✔] 4.5 Évitez les tests globaux, ajoutez des données pour chaque test\n\n**TL;PL :** Pour éviter le chevauchement de test et expliquer facilement le déroulement du test, chaque test doit ajouter et agir sur son propre ensemble d'enregistrement de la base de données. Chaque fois qu'un test a besoin de récupérer ou de présumer l'existence de certaines données de la BD - il doit explicitement ajouter ces données et éviter de modifier tout autre enregistrement.\n\n\\***\\*Autrement :** Considérez un scénario où le déploiement est interrompu à cause de l'échec des tests, l'équipe va maintenant passer un temps d'investigation précieux qui se terminera par une triste conclusion : le système fonctionne bien, les tests interfèrent cependant les uns avec les autres et interrompent la construction.\n\n🔗[**Plus d'infos : évitez les tests globaux, ajoutez des données pour chaque test**](./sections/testingandquality/avoid-global-test-fixture.french.md)\n\n<br/><br/>\n\n## ![✔] 4.6 Inspectez en permanence les dépendances vulnérables\n\n**TL;PL :** Même les dépendances les plus réputées telles qu'Express ont des vulnérabilités connues. Cela peut être facilement apprivoisé à l'aide d'outils communautaires et commerciaux tels que 🔗 [npm audit](https://docs.npmjs.com/cli/audit) et 🔗 [snyk.io](https://snyk.io) qui peuvent être appelé depuis votre CI pour chaque construction.\n\n**Autrement :** Garder votre code propre contre les vulnérabilités sans outils dédiés nécessitera de suivre en permanence les publications en ligne sur les nouvelles menaces. C'est assez fastidieux.\n\n<br/><br/>\n\n## ![✔] 4.7 Étiquetez vos tests\n\n**TL;PL :** Différents tests doivent s'exécuter selon différents scénarios : test d'intégrité, sans IO, les tests doivent s'exécuter lorsqu'un développeur enregistre ou commit un fichier, les tests complets de bout en bout s'exécutent généralement lorsqu'une nouvelle « pull request » est soumise, etc. Cela peut être réalisé en étiquetant les tests avec des mots clés comme #IO #api #integrite afin que vous puissiez utiliser votre harnais de test et invoquer le sous-ensemble souhaité. Par exemple, voici comment vous invoqueriez uniquement le groupe de test d'intégrité avec [Mocha](https://mochajs.org/) : mocha --grep 'sanity'\n\n**Autrement :** Exécutez tous les tests, y compris les tests qui effectuent des dizaines de requêtes sur la base de données, chaque fois qu'un développeur apporte un petit changement, cela peut être extrêmement lent et souvent les développeurs s'abstiennent de faire des tests.\n\n<br/><br/>\n\n## ![✔] 4.8 Vérifiez votre couverture de test, cela aide à identifier les mauvaises conception de test\n\n**TL;PL :** Les outils de couverture de code comme [Istanbul](https://github.com/istanbuljs/istanbuljs)/[NYC](https://github.com/istanbuljs/nyc) sont parfaits pour 3 raisons : ils sont gratuits (aucun effort n'est nécessaire pour bénéficier de ces rapports), ils aident à identifier une diminution de la couverture des tests, et enfin et surtout, ils mettent en évidence les incompatibilités de test : en regardant les rapports de couverture de code en couleur, vous remarquerez peut-être, par exemple, des zones de code qui ne sont jamais testées comme les clauses catch (ce qui signifie que les tests invoquent uniquement les chemins positifs et non le comportement de l'application en cas d'erreur). Configurez-les pour faire échouer les constructions si la couverture tombe sous un certain seuil.\n\n**Autrement :** Il n'y aura aucune mesure automatisée vous indiquant quand une grande partie de votre code n'est pas couverte par les tests\n\n<br/><br/>\n\n## ![✔] 4.9 Inspectez les paquets obsolètes\n\n**TL;PL :** Utilisez votre outil préféré (par exemple, `npm outdated` ou [npm-check-updates](https://www.npmjs.com/package/npm-check-updates)) pour détecter les paquets installés qui sont obsolètes, injectez cette vérification dans votre CI et même faites échouer une construction dans un scénario critique. Par exemple, un scénario critique peut se produire lorsqu'un paquet installé a 5 patchs de retard (par exemple, la version locale est 1.3.1 et la version du référentiel est 1.3.8) ou quand il est marqué comme obsolète par son auteur - stoppez la construction et empêchez le déploiement de cette version.\n\n**Autrement :** Votre production exécutera des paquets qui ont été explicitement étiquetés par leur auteur comme risqués.\n\n<br/><br/>\n\n## ![✔] 4.10 Utilisez pour les tests e2e un environnement proche de la production\n\n**TL;PL :** Les tests de bout en bout (e2e) qui comprennent l'utilisation de données en direct sont les maillons les plus faibles du processus du CI car ils dépendent de plusieurs services complexes comme la base de données. Utilisez un environnement de test continue aussi proche que possible de votre production actuelle. (Un oubli pour continue ici. A en juger par la clause **Autrement**, cela devrait mentionner docker-compose)\n\n**Autrement :** Sans docker-compose, les équipes doivent maintenir une base de données de test pour chaque environnement de test, y compris les machines des développeurs, garder toutes ces bases de données synchronisées afin que les résultats des tests ne varient pas d'un environnement à l'autre.\n\n<br/><br/>\n\n## ![✔] 4.11 Refactorisez régulièrement à l'aide d'outils d'analyse statique\n\n**TL;PL :** L'utilisation d'outils d'analyse statique vous aide en donnant des moyens concrets d'améliorer la qualité du code et permet de maintenir votre code. Vous pouvez ajouter des outils d'analyse statique à votre CI pour échouer lorsqu'il trouve du code incorrect. Ses principaux arguments de vente par rapport au contrôle ordinaire de code sont la capacité d'inspecter la qualité dans le contexte de plusieurs fichiers (par exemple, détecter les doublons), d'effectuer une analyse avancée (par exemple la complexité du code) et de suivre l'historique et la progression des problèmes de code. Deux exemples d'outils que vous pouvez utiliser sont [Sonarqube](https://www.sonarqube.org/) (+ de 2 600 [étoiles](https://github.com/SonarSource/sonarqube)) et [Code Climate](https://codeclimate.com/) (+ de 1 500 [étoiles](https://github.com/codeclimate/codeclimate)).\n\n**Autrement :** Avec une mauvaise qualité de code, les bogues et les performances seront toujours un problème qu'aucune nouvelle bibliothèque brillante ou fonctionnalité de pointe ne peut résoudre.\n\n🔗[**Plus d'infos: refactorisation !**](./sections/testingandquality/refactoring.french.md)\n\n<br/><br/>\n\n## ![✔] 4.12 Choisissez soigneusement votre plateforme CI (Jenkins vs CircleCI vs Travis vs Rest of the world)\n\n**TL;PL :** Votre plateforme d'intégration continue (CICD) hébergera tous les outils de qualité (par exemple test, lint), elle devrait donc être accompagnée d'un écosystème dynamique de plugins. [Jenkins](https://jenkins.io/) était utilisé par défaut pour de nombreux projets car il a la plus grande communauté avec une plateforme très puissante au prix d'une configuration complexe qui nécessite une courbe d'apprentissage abrupte. De nos jours, il est devenu beaucoup plus facile de mettre en place une solution CI en utilisant des outils SaaS comme [CircleCI](https://circleci.com) et d'autres. Ces outils permettent de créer un pipeline de CI flexible sans avoir à gérer l'ensemble de l'infrastructure. Finalement, c'est un compromis entre robustesse et rapidité - choisissez votre camp avec soin.\n\n**Autrement :** Le choix d'un fournisseur de niche peut vous bloquer une fois que vous aurez besoin d'une personnalisation avancée. En revanche, faire appel à Jenkins pourrait vous faire perdre un temps précieux à la mise en place de l'infrastructure.\n\n🔗[**Plus d'infos : choisissez soigneusement votre plateforme CI**](./sections/testingandquality/citools.french.md)\n\n## ![✔] 4.13 Testez vos middlewares de manière isolée\n\n**TL;PL :** Lorsqu'un middleware contient une logique immense qui couvre de nombreuses requêtes, cela vaut la peine de le tester de manière isolée sans réveiller l'ensemble du framework du web. Cela peut être facilement réalisé en espionnant les objets {req, res, next}.\n\n**Autrement :** Un bogue dans le middleware Express === un bogue dans toutes ou la plupart des requêtes\n\n🔗 [**Plus d'infos : testez vos middlewares de manière isolée**](./sections/testingandquality/test-middlewares.french.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-des-matières\">⬆ Retourner en haut de la page</a></p>\n\n# `5. Pratiques de mise en production`\n\n## ![✔] 5.1. Surveillance\n\n**TL;PL :** La surveillance est un jeu qui consiste à découvrir les problèmes avant que les clients ne les trouvent - il est évident qu'il faut accorder une importance sans précédent à cette question. Le marché est submergé d'offres, pensez donc à commencer par définir les mesures de base que vous devez suivre (mes suggestions à l'intérieur), puis passez en revue les fonctionnalités supplémentaires et choisissez la solution qui coche toutes les cases. Cliquez sur « l'essentiel » ci-dessous pour un aperçu des solutions.\n\n**Autrement :** Échec === clients déçus. C'est simple.\n\n🔗 [**Plus d'infos : surveillance !**](./sections/production/monitoring.french.md)\n\n<br/><br/>\n\n## ![✔] 5.2. Augmentez la clarté à l'aide de la journalisation intelligente\n\n**TL;PL :** Les journaux peuvent être un stupide inventaire de relevés de débogage ou le facilitateur d'un magnifique tableau de bord qui raconte l'histoire de votre application. Prévoyez votre plateforme de journalisation dès le premier jour : comment les logs sont collectés, stockés et analysés pour s'assurer que les informations souhaitées (par exemple le taux d'erreur, le suivi d'une transaction complète via des services et des serveurs, etc.) peuvent réellement être exploitées.\n\n**Autrement :** Vous vous retrouvez avec une boîte noire qui est difficile à analyser, puis vous commencez à réécrire toutes les instructions de journalisation pour ajouter des informations supplémentaires.\n\n🔗 [**Plus d'infos : augmentez la clarté à l'aide de la journalisation intelligente**](./sections/production/smartlogging.french.md)\n\n<br/><br/>\n\n## ![✔] 5.3. Déléguez tout ce qui est possible (par exemple gzip, SSL) à un proxy inverse\n\n**TL;PL :** Node est terriblement mauvais pour faire des tâches gourmandes en CPU comme la compression avec gzip, terminaison SSL, etc. Vous devriez utiliser à la place des services de middleware « réels » comme nginx, HAproxy ou des services de fournisseurs du cloud.\n\n**Autrement :** Votre pauvre processus restera occupé à faire des tâches d'infrastructure au lieu de s'occuper du cœur de votre application et les performances se dégraderont en conséquence.\n\n🔗 [**Plus d'infos : déléguez tout ce qui est possible (par exemple gzip, SSL) à un proxy inverse**](./sections/production/delegatetoproxy.french.md)\n\n<br/><br/>\n\n## ![✔] 5.4. Verrouillez les dépendances\n\n**TL;PL :** Votre code doit être identique dans tous les environnements, mais étonnamment npm laisse les dépendances fluctuer entre les environnements par défaut - lorsque vous installez des paquets dans différents environnements, il essaie de récupérer la dernière version du patch des paquets. Surmontez cela en utilisant les fichiers de configuration de npm, .npmrc, qui indiquent à chaque environnement de sauvegarder la version exacte (et non la dernière) de chaque paquet. Alternativement, pour un contrôle plus fin, utilisez `npm shrinkwrap`. \\*Mise à jour : à partir de NPM5, les dépendances sont verrouillées par défaut. Le nouveau gestionnaire de paquets en place, Yarn, nous a aussi fourni une couverture par défaut.\n\n**Autrement :** Le service qualité testera le code de manière approfondie et approuvera une version qui se comportera différemment en production. Pire encore, différents serveurs dans le même cluster de production peuvent exécuter un code différent.\n\n🔗 [**Plus d'infos : verrouillez les dépendances**](./sections/production/lockdependencies.french.md)\n\n<br/><br/>\n\n## ![✔] 5.5. Protégez la disponibilité du processus avec des bons outils\n\n**TL;PL :** Le processus doit continuer et être redémarré en cas d'échec. Pour des scénarios simples, des outils de gestion de processus comme PM2 peuvent suffire, mais dans le monde « dockérizé » d'aujourd'hui, les outils de gestion de cluster doivent également être pris en compte.\n\n**Autrement :** L'exécution simultanée de dizaines d'instances sans stratégie claire et trop d'outils (gestion de cluster, docker, PM2) pourrait conduire au chaos du DevOps.\n\n🔗 [**Plus d'infos : protégez la disponibilité du processus avec des bons outils**](./sections/production/guardprocess.french.md)\n\n<br/><br/>\n\n## ![✔] 5.6. Utilisez tous les cœurs du CPU\n\n**TL;PL :** Dans sa forme de base, une application Node fonctionne sur un seul cœur de CPU alors que tous les autres sont laissés au repos. Il est de votre devoir de répliquer le processus Node et d'utiliser tous les CPU - Pour les petites et moyennes applications, vous pouvez utiliser Node Cluster ou PM2. Pour une application plus grande, pensez à répliquer le processus à l'aide d'un cluster Docker (par exemple K8S, ECS) ou des scripts de déploiement basés sur le système d'initialisation Linux (par exemple systemd).\n\n**Autrement :** Votre application n'utilisera probablement que 25% de ses ressources disponibles (!) ou même moins. Notez qu'un serveur typique possède 4 cœurs CPU ou plus, le déploiement naïf de Node.js n'en utilise qu'un (même en utilisant des services PaaS comme AWS beanstalk !)\n\n🔗 [**Plus d'infos : utilisez tous les cœurs du CPU**](./sections/production/utilizecpu.french.md)\n\n<br/><br/>\n\n## ![✔] 5.7. Créez un « point de terminaison de maintenance »\n\n**TL;PL :** Exposez dans une API sécurisée un ensemble d'informations liées au système, comme l'utilisation de la mémoire et le REPL, etc. Bien qu'il soit fortement recommandé de s'appuyer sur des outils standard et éprouvés au combat, certaines informations et opérations précieuses sont plus faciles à utiliser à l'aide de code.\n\n**Autrement :** Vous constaterez que vous effectuez de nombreuses « livraisons de diagnostics » - la livraison de code vers la production uniquement pour extraire des informations à des fins de diagnostic.\n\n🔗 [**Plus d'infos : créez un « point de terminaison de maintenance »**](./sections/production/createmaintenanceendpoint.french.md)\n\n<br/><br/>\n\n## ![✔] 5.8. Découvrez les erreurs et les indisponibilités à l'aide des produits APM\n\n**TL;PL :** Les produits de surveillance et de performance des applications (a.k.a APM) mesurent de manière proactive la base de code et l'API afin qu'ils puissent aller automatiquement au-delà de la surveillance traditionnelle et mesurer l'expérience utilisateur globale à travers les services et les tiers. Par exemple, certains produits APM peuvent mettre en évidence une transaction qui se charge trop lentement du côté des utilisateurs finaux tout en suggérant la cause principale.\n\n**Autrement :** Vous pourriez consacrer beaucoup d'efforts à mesurer les performances et l'indisponibilité de l'API, vous ne saurez probablement jamais quelles sont vos parties de code les plus lentes dans le scénario du monde réel et comment celles-ci affectent l'expérience utilisateur.\n\n🔗 [**Plus d'infos : découvrez les erreurs et les indisponibilités à l'aide des produits APM**](./sections/production/apmproducts.french.md)\n\n<br/><br/>\n\n## ![✔] 5.9. Préparez votre code pour la production\n\n**TL;PL :** Codez en pensant à la solution définitive, planifiez la production dès le premier jour. Cela semble un peu vague, j'ai donc compilé quelques conseils de développement qui sont étroitement liés à la maintenance de la production (cliquez sur l'essentiel ci-dessous)\n\n**Autrement :** Même le champion du monde Architecte/DevOps ne sauvera pas un système mal écrit.\n\n🔗 [**Plus d'infos : préparez votre code pour la production**](./sections/production/productioncode.french.md)\n\n<br/><br/>\n\n## ![✔] 5.10. Mesurez et protégez l'utilisation de la mémoire\n\n**TL;PL :** Node.js a des relations controversées avec la mémoire : le moteur v8 a de faibles limites sur l'utilisation de la mémoire (1.4GB) et il y a des moyens connus pour faire fuir la mémoire dans le code de Node - donc surveiller la mémoire du processus de Node est une chose indispensable. Dans les petites applications, vous pouvez mesurer la mémoire périodiquement en utilisant des commandes shell mais dans les applications de taille moyenne, vous pouvez envisager de faire de votre surveillance mémoire via un système de surveillance robuste.\n\n**Autrement :** La mémoire de votre processus peut fuir une centaine de mégaoctets par jour, comme cela s'est produit chez [Walmart](https://www.joyent.com/blog/walmart-node-js-memory-leak)\n\n🔗 [**Plus d'infos : mesurez et protégez l'utilisation de la mémoire**](./sections/production/measurememory.french.md)\n\n<br/><br/>\n\n## ![✔] 5.11. Retirez vos ressources frontend de Node\n\n**TL;PL :** Servez le contenu du frontend en utilisant un middleware dédié (nginx, S3, CDN) parce que les performances de Node sont vraiment diminuées lors du traitement de nombreux fichiers statiques en raison de son modèle mono-processus.\n\n**Autrement :** Votre unique processus de Node sera occupé à diffuser des centaines de fichiers html/images/angular/react au lieu d'allouer toutes ses ressources à la tâche pour laquelle il est conçu - fournir du contenu dynamique\n\n🔗 [**Plus d'infos : retirez vos ressources frontend de Node**](./sections/production/frontendout.french.md)\n\n<br/><br/>\n\n## ![✔] 5.12. Soyez sans état, tuez vos serveurs presque tous les jours\n\n**TL;PL :** Stockez tout type de données (par exemple, sessions utilisateur, cache, fichiers téléchargés) dans des stockages de données externes. Envisagez de « tuer » vos serveurs périodiquement ou d'utiliser une plateforme « sans serveur » (par exemple AWS Lambda) qui impose explicitement un comportement sans état.\n\n**Autrement :** La défaillance d'un serveur particulier entraînera l'arrêt des applications au lieu de simplement tuer une machine défectueuse. De plus, l'élasticité de l'extensibilité sera plus difficile à obtenir en raison de la dépendance à un serveur spécifique.\n\n🔗 [**Plus d'infos : soyez sans état, tuez vos serveurs presque tous les jours**](./sections/production/bestateless.french.md)\n\n<br/><br/>\n\n## ![✔] 5.13. Utilisez des outils qui détectent automatiquement les vulnérabilités\n\n**TL;PL :** Même les dépendances les plus réputées comme Express ont des vulnérabilités connues (de temps en temps) qui peuvent mettre un système en danger. Cela peut être facilement maîtrisé en utilisant des outils communautaires et commerciaux qui vérifient constamment les vulnérabilités et avertissent (localement ou sur GitHub), certains peuvent même les corriger immédiatement.\n\n**Autrement :** Si vous ne disposez pas d'outils dédiés pour protéger votre code contre les vulnérabilités, vous devrez suivre en permanence les publications en ligne sur les nouvelles menaces. C'est assez fastidieux.\n\n🔗 [**Plus d'infos : Utilisez des outils qui détectent automatiquement les vulnérabilités**](./sections/production/detectvulnerabilities.french.md)\n\n<br/><br/>\n\n## ![✔] 5.14. Attribuez un id de transaction à chaque relevé du journal\n\nÉgalement connu sous le nom de corrélation id / transit id / tracing id / request id / request context / etc.\n\n**TL;PL :** Attribuez le même identifiant, transaction-id : {une valeur}, à chaque entrée du journal à l'intérieur d'une même requête. Ensuite, lors de l'inspection des erreurs dans les journaux, il est facile de conclure ce qui s'est passé avant et après. Malheureusement, cela n'est pas facile à réaliser dans Node en raison de sa nature asynchrone, consultez les exemples de code. Jusqu'à la version 14 de Node, cela n'était pas facile à réaliser en raison de la nature asynchrone de Node, mais depuis l'arrivée de AsyncLocalStorage, cela est devenu possible et plus facile que jamais. Consultez les exemples de code fournis.\n\n**Autrement :** L'examen d'un journal d'erreurs de production sans le contexte (ce qui s'est passé auparavant) rend le travail de réflexion beaucoup plus difficile et lent.\n\n🔗 [**Plus d'infos : attribuez un ‘TransactionId’ à chaque relevé du journal**](./sections/production/assigntransactionid.french.md)\n\n<br/><br/>\n\n## ![✔] 5.15. Définissez `NODE_ENV=production`\n\n**TL;PL :** Définissez la variable d'environnement `NODE_ENV` avec « production » ou « development » pour indiquer si les optimisations de production doivent être activées - de nombreux paquets npm déterminent l'environnement en cours et optimisent leur code pour la production.\n\n**Autrement :** L'omission de cette simple propriété pourrait fortement dégrader les performances. Par exemple, lors de l'utilisation d'Express pour le rendu côté serveur, l'omission de `NODE_ENV` le rend trois fois plus lent !\n\n🔗 [**Plus d'infos : définissez NODE_ENV=production**](./sections/production/setnodeenv.french.md)\n\n<br/><br/>\n\n## ![✔] 5.16. Concevez des déploiements automatisés, atomiques et sans interruption de service\n\n**TL;PL :** Les études montrent que les équipes qui effectuent de nombreux déploiements réduisent la probabilité de graves problèmes en production. Les déploiements rapides et automatisés qui ne nécessitent pas d'étapes manuelles risquées ni d'interruptions de service améliorent considérablement le processus de déploiement. Vous devriez probablement y parvenir en utilisant Docker combiné à des outils de CI, car ils sont devenus la norme du secteur pour un déploiement optimisé.\n\n**Autrement :** Déploiements longs -> arrêt de la production et erreur humaine -> équipe peu confiante dans la réalisation du déploiement -> moins de déploiements et de fonctionnalités.\n\n<br/><br/>\n\n## ![✔] 5.17. Utilisez une version LTS de Node.js\n\n**TL;PL :** Assurez-vous d'utiliser une version LTS de Node.js pour recevoir les corrections de bogues critiques, les mises à jour de sécurité et les améliorations de performance\n\n**Autrement :** Les bogues ou vulnérabilités récemment découverts pourraient être utilisés pour exploiter une application en production, et votre application pourrait devenir non supportée par divers modules et plus difficile à maintenir\n\n🔗 [**Plus d'infos : Utilisez une version LTS de Node.js**](./sections/production/LTSrelease.french.md)\n\n<br/><br/>\n\n## ![✔] 5.18. Ne redirigez pas les journaux vers l'application\n\n**TL;PL :** Les destinations des journaux ne devraient pas être codées en dur par les développeurs dans le code de l'application, mais devraient plutôt être définies par l'environnement d'exécution dans lequel l'application s'exécute. Les développeurs doivent écrire des journaux dans `stdout` en utilisant un utilitaire de journalisation et laisser l'environnement d'exécution (conteneur, serveur, etc.) diriger le flux `stdout` vers la destination appropriée (c'est-à-dire Splunk, Graylog, ElasticSearch, etc.).\n\n**Autrement :** Acheminement des journaux de gestion des applications === difficile à dimensionner, perte de journaux, mauvaise séparation des informations.\n\n🔗 [**Plus d'infos : redirection du journal**](./sections/production/logrouting.french.md)\n\n<br/><br/>\n\n## ![✔] 5.19. Installez vos paquets avec `npm ci`\n\n**TL;PL :** Vous devez vous assurer que le code de production utilise la version exacte des paquets avec lesquels vous l'avez testé. Exécutez `npm ci` pour faire une installation propre de vos dépendances correspondant aux fichiers package.json et package-lock.json.\n\n**Autrement :\\*\\*\\*\\*** Le service qualité testera le code de manière approfondie et approuvera une version qui se comportera différemment en production. Pire encore, différents serveurs dans le même cluster de production peuvent exécuter un code différent.\n\n🔗 [**Plus d'infos : utilisez npm ci**](./sections/production/installpackageswithnpmci.french.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-des-matières\">⬆ Retourner en haut de la page</a></p>\n\n# `6. Bonnes pratiques de sécurité`\n\n<div align=\"center\">\n<img src=\"https://img.shields.io/badge/OWASP%20Threats-Top%2010-green.svg\" alt=\"54 items\"/>\n</div>\n\n## ![✔] 6.1. Adoptez les règles de sécurité du linter\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20XSS%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL :** Utilisez des plugins de sécurité de linter tels que [eslint-plugin-security](https://github.com/nodesecurity/eslint-plugin-security) pour détecter les vulnérabilités et les problèmes de sécurité le plus tôt possible, de préférence lors de leur codage. Cela peut aider à détecter des vulnérabilités de sécurité comme l'utilisation de eval, l'invocation d'un processus enfant ou l'importation d'un module avec une chaîne littérale (par exemple, une entrée utilisateur). Cliquez sur « Plus d'infos » ci-dessous pour voir des exemples de codes qui seront pris en compte par un linter de sécurité.\n\n**Autrement :** Ce qui aurait pu être une simple défaillance de sécurité pendant le développement devient un problème majeur en production. En outre, le projet peut ne pas suivre des pratiques de sécurité de code conformes, ce qui peut entraîner l'introduction de vulnérabilités ou la divulgation de secrets sensibles dans des dépôts distants.\n\n🔗 [**Plus d'infos : régles du linter**](./sections/security/lintrules.french.md)\n\n<br/><br/>\n\n## ![✔] 6.2. Limitez les requêtes simultanées en utilisant un middleware\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL :** Les attaques DOS sont très populaires et relativement faciles à mener. Mettre en œuvre la limitation de débit en utilisant un service externe tel que les équilibreurs de charge, les pare-feux, nginx, un paquet [rate-limiter-flexible](https://www.npmjs.com/package/rate-limiter-flexible), ou (pour les applications plus petites et moins critiques) un middleware de limitation de débit (par exemple, [express-rate-limit](https://www.npmjs.com/package/express-rate-limit)).\n\n**Autrement :** Une application pourrait faire l'objet d'une attaque entraînant un déni de service, de ce fait, les utilisateurs réels obtiennent un service dégradé ou indisponible.\n\n🔗 [**Plus d'infos : mettez en œuvre la limitation de débit**](./sections/security/limitrequests.french.md)\n\n<br/><br/>\n\n## ![✔] 6.3 Retirez les secrets des fichiers de configuration ou utiliser des paquets pour les crypter\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A3:Sensitive%20Data%20Exposure%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL :** Ne stockez jamais les secrets en clair dans les fichiers de configuration ou le code source. Utilisez plutôt des systèmes de gestion des secrets comme les produits Vault, Kubernetes/Docker Secrets ou des variables d'environnement. En dernier recours, les secrets stockés dans le contenu des sources doivent être cryptés et gérés (clés de roulement, expiration, audit, etc.). Utilisez des hooks de pre-commit/push pour éviter de commeittez des secrets accidentellement.\n\n**Autrement :** Le contenu des sources, même pour les dépôts privés, peut être rendu public par erreur, et tous les secrets sont alors dévoilés. L'accès au contenu des sources pour une partie externe donnera par inadvertance accès à des systèmes connexes (bases de données, apis, services, etc.).\n\n🔗 [**Plus d'infos : gestion des secrets**](./sections/security/secretmanagement.french.md)\n\n<br/><br/>\n\n## ![✔] 6.4. Évitez les vulnérabilités d'injection de query avec les bibliothèques ORM/ODM\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL :** Pour éviter l'injection SQL/NoSQL et d'autres attaques malveillantes, utilisez toujours un ORM/ODM ou une bibliothèque de base de données qui échappe les données ou prend en charge les queries paramétrées nommées ou indexées et se charge de valider les entrées de l'utilisateur pour les types attendus. N'utilisez jamais simplement des chaînes de template JavaScript ou une concaténation de chaînes pour injecter des valeurs dans les queries, car cela ouvre votre application à un large éventail de vulnérabilités. Toutes les bibliothèques d'accès aux données Node.js réputées (par exemple [Sequelize](https://github.com/sequelize/sequelize), [Knex](https://github.com/tgriesser/knex), [mongoose](https://github.com/Automattic/mongoose)) disposent d'une protection intégrée contre les attaques par injection.\n\n**Autrement :** Une entrée utilisateur non validée ou non assainie pourrait conduire à l'injection de l'opérateur lorsqu'on travaille avec MongoDB pour NoSQL, et le fait de ne pas utiliser un système d'assainissement approprié ou un ORM permettra facilement des attaques par injection SQL, créant une énorme vulnérabilité.\n\n🔗 [**Plus d'infos : Prévention de l'injection de queries à l'aide des bibliothèques ORM/ODM**](./sections/security/ormodmusage.french.md)\n\n<br/><br/>\n\n## ![✔] 6.5. Collection des meilleures pratiques génériques en matière de sécurité\n\n**TL;PL :** Il s'agit d'une collection de conseils de sécurité qui n'est pas directement liée à Node.js, l'implémentation de Node n'est pas très différente de toute autre langage. Cliquez pour en savoir plus.\n\n🔗 [**Plus d'infos : les meilleures pratiques communes en matière de sécurité**](./sections/security/commonsecuritybestpractices.french.md)\n\n<br/><br/>\n\n## ![✔] 6.6. Adaptez les entêtes de réponse HTTP pour une sécurité accrue\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL :** Votre application doit utiliser des entêtes sécurisés pour empêcher les attaquants d'utiliser des attaques courantes comme le cross-site scripting (XSS), le clickjacking et d'autres attaques malveillantes. Celles-ci peuvent être facilement configurées à l'aide de modules tels que [helmet](https://www.npmjs.com/package/helmet).\n\n**Autrement :** Les attaquants pourraient lancer des attaques directes sur les utilisateurs de votre application, ce qui entraînerait d'énormes vulnérabilités de sécurité.\n\n🔗 [**Plus d'infos : utilisation d'entêtes sécurisés dans votre application**](./sections/security/secureheaders.french.md)\n\n<br/><br/>\n\n## ![✔] 6.7. Inspectez constamment et automatiquement les dépendances vulnérables\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Known%20Vulnerabilities%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL :** Avec l'écosystème npm, il est courant d'avoir de nombreuses dépendances pour un projet. Les dépendances doivent toujours être contrôlées lorsque de nouvelles vulnérabilités sont détectées. Utilisez des outils comme [npm audit](https://docs.npmjs.com/cli/audit) ou [snyk](https://snyk.io/) pour suivre, surveiller et corriger les dépendances vulnérables. Intégrez ces outils à votre configuration CI afin de détecter une dépendance vulnérable avant qu'elle ne passe en production.\n\n**Autrement :** Un attaquant pourrait détecter votre framework Web et attaquer toutes ses vulnérabilités connues.\n\n🔗 [**Plus d'infos : sécurité des dépendances**](./sections/security/dependencysecurity.french.md)\n\n<br/><br/>\n\n## ![✔] 6.8. Protégez les mots de passe/secrets des utilisateurs à l'aide de bcrypt ou scrypt\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL :** Les mots de passe ou les secrets (par exemple les clés API) doivent être stockés en utilisant une fonction de hachage sécurisée + un salt comme `bcrypt`,`scrypt`, ou dans le pire des cas `pbkdf2`.\n\n**Autrement :** Les mots de passe et les secrets qui sont stockés sans utiliser de fonction sécurisée sont vulnérables au brute-force et aux attaques de dictionnaire qui mèneront à leur divulgation.\n\n🔗 [**Plus d'infos : mots de passe utilisateur**](./sections/security/userpasswords.french.md)\n\n<br/><br/>\n\n## ![✔] 6.9. Échappez les sorties HTML, JS et CSS\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL :** Les données non approuvées qui sont envoyées au navigateur peuvent être exécutées au lieu d'être simplement affichées, ce qui est communément appelé une attaque de script intersite (XSS). Atténuez cela en utilisant des bibliothèques dédiées qui marquent explicitement les données comme du contenu pur qui ne devrait jamais être exécuté (par exemple encodage, échappement).\n\n**Autrement :** Un attaquant pourrait stocker du code JavaScript malveillant dans votre base de données qui sera ensuite envoyé tel quel aux pauvres clients.\n\n🔗 [**Plus d'infos : échappez la sortie**](./sections/security/escape-output.french.md)\n\n<br/><br/>\n\n## ![✔] 6.10. Validez les schémas JSON entrants\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7: XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A8:Insecured%20Deserialization%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL :** Validez la charge utile du corps des requêtes entrantes et assurez-vous qu'elle répond aux exigences, sinon échouez rapidement. Pour éviter un codage de validation fastidieux pour chaque route, vous pouvez utiliser des schémas de validation légers basés sur JSON tels que [jsonschema](https://www.npmjs.com/package/jsonschema) ou [joi](https://www.npmjs.com/package/joi).\n\n**Autrement :** Votre générosité et votre approche permissive augmentent considérablement la surface d'attaque et encouragent l'attaquant à essayer de nombreuses entrées jusqu'à ce qu'il trouve une combinaison pour planter l'application.\n\n🔗 [**Plus d'infos : validez les schémas JSON entrants**](./sections/security/validation.french.md)\n\n<br/><br/>\n\n## ![✔] 6.11. Prenez en charge le blocage des JWT\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL :** Lorsque vous utilisez des jetons Web JSON (par exemple, avec [Passport.js](https://github.com/jaredhanson/passport)), il n'existe par défaut aucun mécanisme permettant de révoquer l'accès aux jetons émis. Lorsque vous découvrez une activité malveillante de la part d'un utilisateur, il n'y a aucun moyen de l'empêcher d'accéder au système tant qu'il détient un jeton valide. Pour atténuer ce problème, il est possible de mettre en place une liste de blocage des jetons non fiables qui sont validés à chaque requête.\n\n**Autrement :** Les jetons expirés ou égarés pourraient être utilisés de manière malveillante par un tiers pour accéder à une application et se faire passer pour le propriétaire du jeton.\n\n🔗 [**Plus d'infos : bloquez les jetons Web JSON**](./sections/security/expirejwt.french.md)\n\n<br/><br/>\n\n## ![✔] 6.12. Empêchez les attaques brute-force perpétrées contre les autorisations\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL :** Une technique simple et puissante consiste à limiter les tentatives d'autorisation en utilisant deux mesures :\n\n1. Le premier est le nombre de tentatives infructueuses consécutives par le même ID/nom unique d'utilisateur et la même adresse IP.\n2. Le deuxième est le nombre de tentatives infructueuses à partir d'une adresse IP sur une longue période de temps. Par exemple, bloquez une adresse IP si elle fait 100 tentatives infructueuses en une journée.\n\n**Autrement :** Un attaquant peut lancer des tentatives de mot de passe automatisées illimitées pour accéder à des comptes privilégiés sur une application.\n\n🔗 [**Plus d'infos : restrictions du nombre de connexions**](./sections/security/login-rate-limit.french.md)\n\n<br/><br/>\n\n## ![✔] 6.13. Exécutez Node.js en tant qu'utilisateur non root\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A5:Broken%20Access%20Access%20Control-green.svg\" alt=\"\"/></a>\n\n**TL;PL :** Il existe un scénario répandu dans lequel Node.js s'exécute en tant qu'utilisateur root avec des autorisations illimitées. Par exemple, c'est le comportement par défaut dans les conteneurs Docker. Il est recommandé de créer un utilisateur non root et de l'intégrer dans l'image du Docker (exemples donnés ci-dessous) ou d'exécuter le processus sous le nom de cet utilisateur en invoquant le conteneur avec l'indicateur « -u nom_utilisateur ».\n\n**Autrement :** Un attaquant qui réussit à exécuter un script sur le serveur obtient un pouvoir illimité sur la machine locale (par exemple, modifier iptable et réacheminer le trafic vers son serveur).\n\n🔗 [**Plus d'infos : exécutez Node.js en tant qu'utilisateur non root**](./sections/security/non-root-user.french.md)\n\n<br/><br/>\n\n## ![✔] 6.14. Limitez la capacité des données utiles en utilisant un proxy inverse ou un middleware\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A8:Insecured%20Deserialization%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL :** Plus les données utiles du corps sont grandes, plus votre processus unique travaille intensément pour les traiter. C'est l'occasion pour les attaquants de mettre les serveurs à genoux sans qu'il y ait beaucoup de requêtes (attaques DOS/DDOS). Atténuez cela en limitant la taille du corps des requêtes entrantes en périphérie (par exemple, pare-feu, ELB) ou en configurant [express body parser](https://github.com/expressjs/body-parser) pour accepter uniquement les données utiles de petite taille.\n\n**Autrement :** Votre application devra traiter des requêtes importantes, incapable de traiter les autres travaux importants qu'elle doit accomplir, ce qui aura des conséquences sur les performances et la vulnérabilité aux attaques DOS.\nVotre application devra faire face à de grosses requêtes, incapable de traiter les autres travaux importants qu'elle doit accomplir, entraînant des implications en termes de performances et une vulnérabilité face aux attaques DOS.\n🔗 [**Plus d'infos : limitez la capacité des données utiles**](./sections/security/requestpayloadsizelimit.french.md)\n\n<br/><br/>\n\n## ![✔] 6.15. Évitez les instruction eval de JavaScript\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL :** `eval` est diabolique car il permet d'exécuter du code JavaScript personnalisé pendant l'exécution. Il ne s'agit pas seulement d'un problème de performances, mais également d'un problème de sécurité important en raison du code JavaScript malveillant qui peut provenir de la saisie de l'utilisateur. Une autre fonctionnalité du langage à éviter est le constructeur `new Function`. Il ne faut pas non plus passer de code JavaScript dynamique à `setTimeout` et `setInterval`.\n\n**Autrement :** Un code JavaScript malveillant trouve un moyen d'accéder au texte passé dans `eval` ou d'autres fonctions d'évaluation en temps réel du langage JavaScript, et obtiendra un accès complet aux autorisations JavaScript sur la page. Cette vulnérabilité se manifeste souvent par une attaque XSS.\n\n🔗 [**Plus d'infos : évitez les instruction eval de JavaScript**](./sections/security/avoideval.french.md)\n\n<br/><br/>\n\n## ![✔] 6.16. Empêchez une mauvaise RegEx de surcharger l'exécution de votre unique processus\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL :** Les expressions régulières, bien qu'elles soient pratiques, constituent une réelle menace pour les applications JavaScript en général et la plateforme Node.js en particulier. La saisie d'un texte par l'utilisateur peut nécessiter un nombre exceptionnel de cycles du CPU pour être traitée. Le traitement RegEx pourrait être inefficace, à tel point qu'une seule requête qui valide 10 mots peut bloquer toute la boucle d'événement pendant 6 secondes et mettre l'unité centrale en 🔥. Pour cette raison, préférez les paquets de validation tiers comme [validator.js](https://github.com/chriso/validator.js) au lieu d'écrire vos propres modèles de regex, ou utilisez [safe-regex](https://github.com/substack/safe-regex) pour détecter les modèles de regex vulnérables.\n\n**Autrement :** Des RegEx mal écrites pourraient être susceptibles de faire l'objet d'attaques DoS par expression régulière qui bloqueraient complètement la boucle de l'événement. Par exemple, le populaire paquet \"moment\" a été déclaré vulnérable par une utilisation malveillante de RegEx en novembre 2017.\n\n🔗 [**Plus d'infos : empêcher une RegEx malveillante**](./sections/security/regex.french.md)\n\n<br/><br/>\n\n## ![✔] 6.17. Évitez le chargement de modules à l'aide d'une variable\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL :** Évitez de demander/importer un autre fichier dont le chemin d'accès a été donné en paramètre, car on peut craindre qu'il provienne d'une saisie de l'utilisateur. Cette règle peut être étendue pour l'accès aux fichiers en général (c'est-à-dire `fs.readFile()`) ou à d'autres ressources sensibles avec des variables dynamiques provenant d'une entrée utilisateur. Le linter [Eslint-plugin-security](https://www.npmjs.com/package/eslint-plugin-security) peut détecter de tels modèles et avertir suffisamment tôt.\n\n**Autrement :** Une entrée utilisateur malveillante pourrait trouver son chemin vers un paramètre qui est utilisé pour exiger des fichiers falsifiés, par exemple, un fichier précédemment téléchargé sur le système de fichiers, ou accéder à des fichiers système déjà existants.\n\n🔗 [**Plus d'infos : chargement sécurisé des modules**](./sections/security/safemoduleloading.french.md)\n\n<br/><br/>\n\n## ![✔] 6.18. Exécutez un code dangereux dans un bac à sable\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL :** Lorsqu'il s'agit d'exécuter du code externe donné en cours d'exécution (par exemple un plugin), utilisez un environnement d'exécution de type « bac à sable » (« sandbox ») qui isole et protège le code principal contre le plugin. Ceci peut être réalisé en utilisant un processus dédié (par exemple `cluster.fork()`), un environnement sans serveur ou des paquets npm dédiés qui agissent comme un bac à sable.\n\n**Autrement :** Un plugin peut attaquer à travers une variété infinie d'options comme les boucles infinies, la surcharge de la mémoire et l'accès aux variables sensibles de l'environnement du processus.\n\n🔗 [**Plus d'infos : exécutez un code dangereux dans un bac à sable**](./sections/security/sandbox.french.md)\n\n<br/><br/>\n\n## ![✔] 6.19. Soyez particulièrement vigilants lorsque vous travaillez avec des processus fils\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL :** Évitez d'utiliser des processus fils lorsque c'est possible et validez et assainissez les entrées pour atténuer les attaques par injection dans l'interface sytème si vous devez encore le faire. Préférez l'utilisation de `child_process.execFile` qui, par définition, n'exécutera qu'une seule commande avec un ensemble d'attributs et ne permettra pas l'expansion des paramètres de l'interface système.\n\n**Autrement :** L'utilisation naïve de processus fils pourrait entraîner l'exécution de commandes à distance ou des attaques par injection dans l'interface système en raison d'une entrée utilisateur malveillante transmise à une commande système non assainie.\n\n🔗 [**Plus d'infos : soyez prudents lorsque vous travaillez avec des processus fils**](./sections/security/childprocesses.french.md)\n\n<br/><br/>\n\n## ![✔] 6.20. Masquez les détails des erreurs aux clients\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL :** Un gestionnaire d'erreur express intégré masque les détails de l'erreur par défaut. Cependant, il y a de grandes chances que vous implémentiez votre propre logique de traitement des erreurs avec des objets d'erreur personnalisés (considérés par beaucoup comme une meilleure pratique). Si vous le faites, veillez à ne pas renvoyer l'objet Error complet au client, qui pourrait contenir certains détails sensibles de l'application.\n\n**Autrement :** Des détails sensibles de l'application pourraient être divulgués à partir d'informations trouvées dans une trace de pile, tels que les chemins d'accès aux fichiers du serveur, les modules tiers utilisés et d'autres flux de travail internes de l'application qui pourraient être exploités par un attaquant.\n\n🔗 [**Plus d'infos : masquez les détails des erreurs au client**](./sections/security/hideerrors.french.md)\n\n<br/><br/>\n\n## ![✔] 6.21. Configurez 2FA pour npm ou Yarn\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL :** Toute étape de la chaîne de développement doit être protégée par une authentification multi-facteurs (MFA). npm/Yarn sont une belle opportunité pour les attaquants qui peuvent mettre la main sur le mot de passe d'un développeur. En utilisant les identifiants des développeurs, les attaquants peuvent injecter du code malveillant dans des bibliothèques qui sont largement installées dans les projets et les services. Peut-être même sur le web s'ils sont publiés publiquement. L'activation de l'authentification à deux facteurs dans npm ne laisse pratiquement aucune chance aux attaquants de modifier le code de votre paquet.\n\n**Autrement :** [Avez-vous entendu parler du développeur d'eslint dont le mot de passe a été piraté ?](https://medium.com/@oprearocks/eslint-backdoor-what-it-is-and-how-to-fix-the-issue-221f58f1a8c8)\n\n<br/><br/>\n\n## ![✔] 6.22. Modifiez les paramètres du middleware de session\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL :** Chaque framework et technologie web a ses faiblesses connues - dire à un attaquant quel framework web nous utilisons est d'une grande aide pour lui. L'utilisation des paramètres par défaut des middlewares de session peut exposer votre application à des attaques de détournement sur un module ou un framework spécifique, de la même manière que l'entête « X-Powered-By ». Essayez de cacher tout ce qui identifie et révèle votre pile technique (par exemple, Node.js, express).\n\n**Autrement :** Les cookies peuvent être envoyés via des connexions non sécurisées, et un attaquant peut utiliser l'identification de session pour identifier le framework sous-jacent de l'application web, ainsi que les vulnérabilités spécifiques aux modules.\n\n🔗 [**Plus d'infos : cookie et sécurité des sessions**](./sections/security/sessions.french.md)\n\n<br/><br/>\n\n## ![✔] 6.23. Évitez les attaques DOS en définissant explicitement le moment où un processus doit s'interrompre\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL :** Le processus de Node plante lorsque les erreurs ne sont pas gérées. De nombreuses bonnes pratiques recommandent même de quitter Node même si une erreur a été détectée et traitée. Express, par exemple, plante sur toutes les erreurs asynchrones - à moins que vous n'ayez inclus une clause catch dans les routes. Cela ouvre un point d'attaque très intéressant pour les attaquants qui reconnaissent quelle entrée fait planter le processus et envoient la même requête de manière répétée. Il n'y a pas de remède immédiat à ce problème, mais quelques techniques peuvent atténuer la menace : alertez avec une gravité critique chaque fois qu'un processus se bloque à cause d'une erreur non gérée, valider l'entrée et éviter de planter le processus à cause d'une entrée utilisateur non valide, englober toutes les routes d'une clause catch et envisager de ne pas planter lorsqu'une erreur a été commise dans une requête (par opposition à ce qui se passe globalement).\n\n**Autrement :** Ce n'est qu'une intuition : étant donné le grand nombre d'applications Node.js, si nous essayons de faire passer un corps JSON vide à toutes les requêtes POST - une poignée d'applications plantera. À ce stade, il suffit de répéter l'envoi de la même requête pour faire tomber les applications avec facilité.\n\n<br/><br/>\n\n## ![✔] 6.24. Empêchez les redirections dangereuses\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL :** Les redirections qui ne valident pas les entrées de l'utilisateur peuvent permettre aux attaquants de lancer des attaques de phishing, de voler les identifiants de l'utilisateur et d'effectuer d'autres actions malveillantes.\n\n**Autrement :** Si un attaquant découvre que vous ne validez pas les données externes fournies par l'utilisateur, il peut exploiter cette vulnérabilité en publiant des liens spécialement conçus sur des forums, des médias sociaux et d'autres lieux publics pour inciter les utilisateurs à cliquer.\n\n🔗 [**Plus d'infos : empêchez les redirections dangereuses**](./sections/security/saferedirects.french.md)\n\n<br/><br/>\n\n## ![✔] 6.25. Évitez de publier des secrets dans le registre npm\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;PL :** Des précautions doivent être prises pour éviter le risque de publier accidentellement des secrets dans les registres publics de npm. Un fichier `.npmignore` peut être utilisé pour ignorer des fichiers ou des dossiers spécifiques, ou le tableau `files` dans `package.json` peut agir comme une liste d'autorisation.\n\n**Autrement :** Les clés API, mots de passe ou autres secrets de votre projet sont susceptibles d'être utilisés abusivement par toute personne qui les découvre, ce qui peut entraîner des pertes financières, une usurpation d'identité et d'autres risques.\n\n🔗 [**Plus d'infos : évitez de publier des secrets**](./sections/security/avoid_publishing_secrets.french.md)\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-des-matières\">⬆ Retourner en haut de la page</a></p>\n\n# `7. Brouillon : Bonnes pratiques de performance`\n\n## Nos contributeurs travaillent sur cette section. [Voulez-vous nous rejoindre ?](https://github.com/goldbergyoni/nodebestpractices/issues/256)\n\n<br/><br/>\n\n## ![✔] 7.1. Ne bloquez pas la boucle d'événement\n\n**TL;PL :** Évitez les tâches gourmandes en CPU car elles bloqueront la boucle d'événement principalement mono-thread, il faut les décharger vers un thread dédié, un processus ou même une technologie différente en fonction du contexte.\n\n**Autrement :** Comme la boucle d'événements est bloquée, Node.js sera incapable de traiter d'autres requêtes, ce qui entraînera des retards pour les utilisateurs concurrents. **3000 utilisateurs attendent une réponse, le contenu est prêt à être servi, mais une seule requêtes bloque le serveur pour qu'il ne puisse pas renvoyer les résultats**.\n\n🔗 [**Plus d'infos : ne bloquez pas la boucle d'événement**](./sections/performance/block-loop.french.md)\n\n<br /><br /><br />\n\n## ![✔] 7.2. Préférez les méthodes JS natives aux utilitaires comme Lodash\n\n**TL;PL :** Il est souvent plus pénalisant d'utiliser des bibliothèques utilitaires telles que `lodash` et `underscore` plutôt que des méthodes natives car cela conduit à des dépendances inutiles et à des performances plus lentes.\nGardez à l'esprit qu'avec l'introduction du nouveau moteur V8 en parallèle des nouvelles normes ES, les méthodes natives ont été améliorées de telle manière qu'elles sont maintenant environ 50% plus performantes que les bibliothèques utilitaires.\n\n**Autrement :** Vous devez maintenir des projets moins performants où vous auriez pu simplement utiliser ce qui était **déjà** disponible ou traiter quelques lignes supplémentaires en échange de quelques fichiers supplémentaires.\n\n🔗 [**Plus d'infos : natif supérieur aux utilitaires**](./sections/performance/nativeoverutil.french.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-des-matières\">⬆ Retourner en haut de la page</a></p>\n\n# `8. Bonnes pratiques de Docker`\n\n🏅 Un grand merci à [Bret Fisher](https://github.com/BretFisher) de qui nous avons appris plusieurs des pratiques suivantes\n\n<br/><br/>\n\n## ![✔] 8.1 Utilisez multi-stage builds pour des images Docker plus légères et plus sûres\n\n**TL;PL :** Utilisez multi-stage builds pour copier uniquement les artefacts de production nécessaires. Un grand nombre de dépendances et de fichiers au moment de la construction ne sont pas nécessaires pour exécuter votre application. Avec multi-stage builds, ces ressources peuvent être utilisées pendant la construction tandis que l'environnement d'exécution ne contient que ce qui est nécessaire. multi-stage builds est un moyen facile de se débarrasser du surpoids et des menaces de sécurité.\n\n**Autrement :** Les images plus grandes prendront plus de temps à construire et à livrer. Les outils uniquement de construction peuvent contenir des vulnérabilités. Et des secrets destinés uniquement à la phase de construction peuvent être divulgués.\n\n### Exemple de Dockerfile pour le multi-stage builds\n\n```dockerfile\nFROM node:14.4.0 AS build\n\nCOPY . .\nRUN npm ci && npm run build\n\n\nFROM node:slim-14.4.0\n\nUSER node\nEXPOSE 8080\n\nCOPY --from=build /home/node/app/dist /home/node/app/package.json /home/node/app/package-lock.json ./\nRUN npm ci --production\n\nCMD [ \"node\", \"dist/app.js\" ]\n```\n\n🔗 [**Plus d'infos : utilisez multi-stage builds**](./sections/docker/multi_stage_builds.french.md)\n\n<br /><br /><br />\n\n## ![✔] 8.2. Démarrez à l'aide de la commande `node`, évitez `npm start`\n\n**TL;PL :** Utilisez `CMD ['node','server.js']` pour démarrer votre application, évitez d'utiliser des scripts npm qui ne transmettent pas les signaux du système d'exploitation au code. Cela empêche les problèmes de processus fils, de gestion du signal, d'arrêt progressif et de processus zombies.\n\n**Autrement :** Si aucun signal n'est transmis, votre code ne sera jamais notifié des interruptions. Sans cela, il perdra sa chance de se fermer correctement, ce qui pourrait entraîner la perte de requêtes et/ou de données en cours.\n\n[**Plus d'infos : Démarrez un conteneur à l'aide de la commande node, évitez npm start**](./sections/docker/bootstrap-using-node.french.md)\n\n<br /><br /><br />\n\n## ![✔] 8.3. Laissez le système d'exécution Docker s'occuper de la réplication et de la disponibilité\n\n**TL;PL :** Lorsque vous utilisez un orchestrateur d'exécution Docker (par exemple, Kubernetes), appelez le processus Node.js directement sans gestionnaires de processus intermédiaires ou code personnalisé qui réplique le processus (par exemple, PM2, module Cluster). La plateforme d'exécution possède la plus grande quantité de données et la meilleure visibilité pour prendre des décisions de placement - Elle sait mieux que quiconque combien de processus sont nécessaires, comment les répartir et quoi faire en cas de plantage.\n\n**Autrement :** Le conteneur continue de se planter par manque de ressources et sera redémarré indéfiniment par le responsable du processus. Si Kubernetes est au courant de cela, il pourrait le déplacer vers une autre instance plus importante.\n\n🔗 [**Plus d'infos : laissez l'orchestrateur Docker redémarrer et répliquer les processus**](./sections/docker/restart-and-replicate-processes.french.md)\n\n<br/><br /><br />\n\n## ![✔] 8.4. Utilisez .dockerignore pour éviter les divulgations de secrets\n\n**TL;PL :** Ajoutez un fichier `.dockerignore` qui filtre les fichiers secrets courants et les artefacts de développement. Ainsi, vous pouvez éviter que des secrets ne s'infiltrent dans l'image. En prime, le temps de construction sera considérablement réduit. De plus, assurez-vous de ne pas copier tous les fichiers récursivement, choisissez plutôt explicitement ce qui doit être copié dans Docker.\n\n**Autrement :** Les fichiers secrets personnels habituels comme `.env`, `.aws` et `.npmrc` seront partagés avec toute personne ayant accès à l'image (par exemple le dépôt Docker).\n\n🔗 [**Plus d'infos : utilisez .dockerignore**](./sections/docker/docker-ignore.french.md)\n\n<br /><br /><br />\n\n## ![✔] 8.5. Nettoyez les dépendances avant la production\n\n**TL;PL :** Bien que des dépendances de développement soient parfois nécessaires pendant le cycle de vie de la construction et des tests, l'image qui est envoyée à la production doit être minimale et exempte de toute dépendance de développement. Cela garantit que seul le code nécessaire est livré et que la quantité d'attaques potentielles (c'est-à-dire la surface d'attaque) soit réduite au minimum. Lorsque l'on utilise un multi-stage build (voir le point consacré à ce sujet), cela peut être réalisé en installant d'abord toutes les dépendances et en exécutant enfin `npm ci --production`.\n\n**Autrement :** De nombreuses failles célèbres de sécurité de npm ont été trouvées dans des packages de développement (par exemple [eslint-scope](https://eslint.org/blog/2018/07/postmortem-for-malicious-package-publishes))\n\n🔗 Plus d'infos : [supprimez les dépendances de développement](./sections/docker/install-for-production.french.md)\n\n<br /><br /><br />\n\n## ![✔] 8.6. Arrêtez intelligemment et progressivement\n\n**TL;PL :** Gérez l'événement SIGTERM du processus et nettoyez toutes les connexions et ressources existantes. Cela doit être fait tout en répondant aux requêtes en cours. Dans des environnements d'exécution Dockerisés, l'arrêt des conteneurs n'est pas un événement rare, mais plutôt une occurrence fréquente qui se produit dans le cadre du travail routinier. Pour y parvenir, il faut un code réfléchi pour orchestrer plusieurs pièces mobiles : l'équilibreur de charge, les connexions persistantes, le serveur HTTP et d'autres ressources.\n\n**Autrement :** S'éteindre immédiatement signifie ne pas répondre aux milliers d'utilisateurs qui seront déçus.\n\n🔗 [**Plus d'infos : arrêt progressif**](./sections/docker/graceful-shutdown.french.md)\n\n<br /><br /><br />\n\n## ![✔] 8.7. Définissez des limites de mémoire en utilisant à la fois Docker et v8\n\n**TL;PL :** Configurez toujours une limite de mémoire en utilisant à la fois Docker et les indicateurs d'exécution JavaScript. La limite de Docker est nécessaire pour prendre une décision judicieuse de placement des conteneurs, l'indicateur max-old-space de --v8 est nécessaire pour lancer le GC à temps et éviter la sous-utilisation de la mémoire. Concrètement, il faut que cet indicateur de v8 soit juste un peu plus petit que la limite du conteneur.\n\n**Autrement :** La définition de docker est nécessaire pour prendre une décision judicieuse pour la mise à l'échelle et éviter de priver d'autres consommateurs de mémoire. Sans définir également les limites de v8, il sous-utilisera les ressources du conteneur - Sans instructions explicites, il se plantera lorsqu'il utilisera ~50-60% des ressources de ses hôtes.\n\n🔗 [**Plus d'infos : définissez des limites de mémoire en utilisant uniquement Docker**](./sections/docker/memory-limit.french.md)\n\n<br /><br /><br />\n\n## ![✔] 8.8. Organisez une mise en cache efficace\n\n**TL;PL :** La reconstruction d'une image entière de docker à partir du cache peut être presque instantanée si elle est faite correctement. Les instructions qui changent peu devraient se trouver en haut de votre Dockerfile et celles qui changent constamment (comme le code de l'application) devraient se trouver en bas.\n\n**Autrement :** La construction de docker sera très longue et consommera beaucoup de ressources, même en cas de changements minimes.\n\n🔗 [**Plus d'infos : exploiter la mise en cache pour réduire les temps de construction**](./sections/docker/use-cache-for-shorter-build-time.french.md)\n\n<br /><br /><br />\n\n## ![✔] 8.9. Utilisez une référence explicite de l'image, évitez le tag `latest`\n\n**TL;PL :** Précisez un condensé (_digest_) d'image explicite ou une étiquette versionnée, ne faites jamais référence à `latest`. Les développeurs sont souvent amenés à croire que la spécification du tag `latest` leur fournira l'image la plus récente dans le dépôt, mais ce n'est pas le cas. L'utilisation d'un digest garantit que chaque instance du service exécute exactement le même code.\n\nEn outre, la référence à un tag d'une image signifie que l'image de base est sujette à des modifications, car on ne peut pas se fier aux tags image pour une installation déterminée. En revanche, si une installation déterminée est prévue, un digest SHA256 peut être utilisé pour faire référence à une image exacte.\n\n**Autrement :** Une nouvelle version d'une image de base pourrait être déployée en production avec des modifications importantes, provoquant un comportement non souhaité de l'application.\n\n🔗 [**Plus d'infos : Comprendre les tags d'image et utiliser le tag \"latest\" avec précaution**](./sections/docker/image-tags.french.md)\n\n<br /><br /><br />\n\n## ![✔] 8.10. Privilégiez les plus petites images de base Docker\n\n**TL;PL :** Les images de grande taille entraînent une plus grande exposition aux vulnérabilités et une consommation accrue des ressources. L'utilisation d'images Docker plus fines, telles que les variantes Slim et Alpine de Linux, atténue ce problème.\n\n**Autrement :** Construire, pousser et tirer des images prendra plus de temps, des vecteurs d'attaque inconnus peuvent être utilisés par des acteurs malveillants et plus de ressources sont consommées.\n\n🔗 [**Plus d'infos : privilégiez les plus petites images**](./sections/docker/smaller_base_images.french.md)\n\n<br /><br /><br />\n\n## ![✔] 8.11. Nettoyez les secrets de construction, évitez les secrets dans les arguments\n\n**TL;PL :** Évitez que des secrets ne s'échappent de l'environnement de construction du Docker. Une image Docker est généralement partagée dans plusieurs environnements comme les CI et un registre qui ne sont pas aussi aseptisés que la production. Un exemple typique est un jeton npm qui est généralement transmis à un fichier Docker en tant qu'argument. Ce jeton reste dans l'image longtemps après qu'on en ait eu besoin et permet à l'attaquant d'accéder indéfiniment à un registre npm privé. Cela peut être évité en copiant un fichier secret comme `.npmrc` et en le supprimant en utilisant une construction en plusieurs étapes (attention, l'historique de la construction doit également être supprimé) ou en utilisant la fonctionnalité secrète Docker build-kit qui ne laisse aucune trace.\n\n**Autrement :** Toute personne ayant accès au CI et au registre des dockers aura également accès, en prime, à certains secrets précieux de l'organisation\n\n🔗 [**Plus d'infos : nettoyez les secrets de construction**](./sections/docker/avoid-build-time-secrets.french.md)\n\n<br /><br /><br />\n\n## ![✔] 8.12. Analysez les images pour détecter les multiples catégories de vulnérabilités\n\n**TL;PL :** En plus de vérifier les vulnérabilités des dépendances du code, il analyse également l'image finale qui est envoyée à la production. Les scanners d'images Docker vérifient les dépendances du code mais aussi les binaires du système d'exploitation. Ce scan de sécurité E2E couvre plus de terrain et vérifie qu'aucun mauvais gars n'a injecté de mauvaises choses pendant la construction. Par conséquent, il est recommandé de l'exécuter comme dernière étape avant le déploiement. Il existe une poignée de scanners gratuits et commerciaux qui fournissent également des plugins CI/CD.\n\n**Autrement :** Votre code pourrait être entièrement exempt de vulnérabilités. Cependant, il peut être piraté en raison de la vulnérabilité des versions binaires au niveau OS (par exemple, OpenSSL, TarBall) qui sont couramment utilisées par les applications.\n\n🔗 [**Plus d'infos : scannez l'ensemble de l'image avant la production**](./sections/docker/scan-images.french.md)\n\n<br /><br /><br />\n\n## ![✔] 8.13 Nettoyez le cache NODE_MODULE\n\n**TL;PL :** Après avoir installé les dépendances dans un conteneur, il faut supprimer le cache local. Il n'est pas logique de dupliquer les dépendances pour des installations futures plus rapides puisqu'il n'y aura pas d'autres installations - Une image du Docker est immuable. Une image du Docker est immuable. En utilisant une seule ligne de code, des dizaines de Mo (généralement 10 à 50 % de la taille de l'image) sont supprimées.\n\n**Autrement :** L'image qui sera envoyée à la production pèsera 30 % de plus à cause de fichiers qui ne seront jamais utilisés.\n\n🔗 [**Plus d'infos : nettoyez le cache NODE_MODULE**](./sections/docker/clean-cache.french.md)\n\n<br /><br /><br />\n\n## ![✔] 8.14. Les pratiques de Docker en général\n\n**TL;PL :** Il s'agit d'un recueil de conseils de Docker qui n'est pas directement lié à Node.js - la mise en œuvre de Node n'est pas très différente de celle de tout autre langage. Cliquez pour en savoir plus.\n\n🔗 [**Plus d'infos : les pratiques de Docker en général**](./sections/docker/generic-tips.french.md)\n\n<br/><br /><br />\n\n## ![✔] 8.15. Lintez votre Dockerfile\n\n**TL;PL :** Linter votre Dockerfile est une étape importante pour identifier les problèmes de votre Dockerfile qui diffèrent des meilleures pratiques. En vérifiant les failles potentielles à l'aide d'un linter Docker spécialisé, les améliorations de performance et de sécurité peuvent être facilement identifiées, ce qui permet d'économiser d'innombrables heures de perte de temps ou des problèmes de sécurité dans le code de production.\n\n**Autrement :** Par erreur, le créateur du Dockerfile a laissé Root comme utilisateur de production, et a également utilisé une image provenant d'un dépôt de source inconnue. Cela pourrait être évité avec un simple linter.\n\n🔗 [**Plus d'infos : lintez your Dockerfile**](./sections/docker/lint-dockerfile.french.md)\n\n<br/><br /><br />\n\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ Return to top</a></p>\n\n# Jalons\n\nPour maintenir ce guide et le tenir à jour, nous actualisons et améliorons constamment les lignes directrices et les meilleures pratiques avec l'aide de la communauté. Vous pouvez suivre nos [jalons](https://github.com/goldbergyoni/nodebestpractices/milestones) et rejoindre les groupes de travail si vous souhaitez contribuer à ce projet\n\n<br/>\n\n## Traductions\n\nToutes les traductions sont fournies par la communauté. Nous serons heureux de recevoir toute aide concernant les traductions terminées, en cours ou nouvelles !\n\n### Traductions terminées\n\n- ![BR](./assets/flags/BR.png) [Portugais brésilien](./README.brazilian-portuguese.md) - Avec l'aimable autorisation de [Marcelo Melo](https://github.com/marcelosdm)\n- ![CN](./assets/flags/CN.png) [Chinois](./README.chinese.md) - Avec l'aimable autorisation de [Matt Jin](https://github.com/mattjin)\n- ![RU](./assets/flags/RU.png) [Russe](./README.russian.md) - Avec l'aimable autorisation de [Alex Ivanov](https://github.com/contributorpw)\n- ![PL](./assets/flags/PL.png) [Polonais](./README.polish.md) - Avec l'aimable autorisation de [Michal Biesiada](https://github.com/mbiesiad)\n- ![JA](./assets/flags/JA.png) [Japonais](./README.japanese.md) - Avec l'aimable autorisation de [Yuki Ota](https://github.com/YukiOta), [Yuta Azumi](https://github.com/YA21)\n- ![EU](./assets/flags/EU.png) [Basque](README.basque.md) - Avec l'aimable autorisation de [Ane Diaz de Tuesta](https://github.com/anediaz) & Joxefe Diaz de Tuesta\n\n### Traductions en cours\n\n- ![FR](./assets/flags/FR.png) [Français](./README.french.md) ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/129))\n- ![HE](./assets/flags/HE.png) Hébreu ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/156))\n- ![KR](./assets/flags/KR.png) [Coréen](README.korean.md) - Avec l'aimable autorisation de [Sangbeom Han](https://github.com/uronly14me) ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/94))\n- ![ES](./assets/flags/ES.png) [Espagnol](https://github.com/goldbergyoni/nodebestpractices/blob/spanish-translation/README.spanish.md) ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/95))\n- ![TR](./assets/flags/TR.png) Turque ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/139))\n\n<br/><br/>\n\n## Comité de pilotage\n\nRencontrez les membres du comité de pilotage - les personnes qui travaillent ensemble pour fournir des conseils et des orientations futures au projet. En outre, chaque membre du comité dirige un projet suivi dans le cadre de nos [projets GitHub](https://github.com/goldbergyoni/nodebestpractices/projects).\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/yoni.png\"/>\n\n[Yoni Goldberg](https://github.com/goldbergyoni)\n<a href=\"https://twitter.com/goldbergyoni\"><img src=\"assets/images/twitter-s.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://goldbergyoni.com\"><img src=\"assets/images/www.png\" width=\"16\" height=\"16\"></img></a>\n\nConsultant indépendant Node.js qui travaille avec des clients aux États-Unis, en Europe et en Israël sur la construction d'applications Node.js à grande échelle. Nombre des meilleures pratiques ci-dessus ont été publiées pour la première fois sur [goldbergyoni.com](https://goldbergyoni.com). Contactez Yoni via [@goldbergyoni](https://github.com/goldbergyoni) ou [me@goldbergyoni.com](mailto:me@goldbergyoni.com)\n\n<br/>\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/bruno.png\"/>\n\n[Bruno Scheufler](https://github.com/BrunoScheufler)\n<a href=\"https://brunoscheufler.com/\"><img src=\"assets/images/www.png\" width=\"16\" height=\"16\"></img></a>\n\n💻 ingénieur web full-stack, passionné de Node.js & GraphQL\n\n<br/>\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/kyle.png\"/>\n\n[Kyle Martin](https://github.com/js-kyle)\n<a href=\"https://twitter.com/kylemartin_93\"><img src=\"assets/images/twitter-s.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://www.linkedin.com/in/kylemartinnz\"><img src=\"assets/images/linkedin.png\" width=\"16\" height=\"16\"></img></a>\n\nDéveloppeur Full Stack et ingénieur de fiabilité de site basé en Nouvelle-Zélande, intéressé par la sécurité des applications web, et l'architecture et la construction d'applications Node.js pour fonctionner à l'échelle mondiale.\n\n<br/>\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/kevyn.png\"/>\n\n[Kevyn Bruyere](https://github.com/kevynb)\n<a href=\"https://www.linkedin.com/in/kevynbruyere/\"><img src=\"assets/images/linkedin.png\" width=\"16\" height=\"16\"></img></a>\n\nDéveloppeur indépendant full-stack ayant un penchant pour les Ops et l'automatisation.\n\n<br/>\n\n### Comité de pilotage émérite\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/sagir.png\"/>\n\n[Sagir Khan](https://github.com/sagirk)\n<a href=\"https://twitter.com/sagir_k\"><img src=\"assets/images/twitter-s.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://linkedin.com/in/sagirk\"><img src=\"assets/images/linkedin.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://sagirk.com\"><img src=\"assets/images/www.png\" width=\"16\" height=\"16\"></img></a>\n\nSpécialiste de JavaScript et de son écosystème - React, Node.js, TypeScript, GraphQL, MongoDB, à peu près tout ce qui implique JS/JSON dans n'importe quelle couche du système - construisant des produits en utilisant la plateforme web pour les marques les plus reconnues au monde. Membre individuel de la Fondation Node.js.\n\n<br/>\n\n## Collaborateurs\n\nMerci à tous nos collaborateurs ! 🙏\n\nNos collaborateurs sont des membres qui contribuent régulièrement au dépôt, en suggérant de nouvelles bonnes pratiques, en triant les issues, en examinant les pull request et bien d'autres choses encore. Si vous souhaitez nous aider à guider des milliers de personnes à créer de meilleures applications Node.js, veuillez lire nos [directives pour les contributeurs](./.operations/CONTRIBUTING.md) 🎉\n\n| <a href=\"https://github.com/idori\" target=\"_blank\"><img src=\"assets/images/members/ido.png\" width=\"75\" height=\"75\"/></a> | <a href=\"https://github.com/TheHollidayInn\" target=\"_blank\"><img src=\"assets/images/members/keith.png\" width=\"75\" height=\"75\"/></a> | <a href=\"https://github.com/rluvaton\" target=\"_blank\"><img src=\"assets/images/members/raz-luvaton.jpg\" width=\"75\" height=\"75\" alt=\"Raz Luvaton\" loading=\"lazy\"/></a> | <a href=\"https://github.com/josh-hemphill\" target=\"_blank\"><img src=\"assets/images/members/josh-hemphill.png\" width=\"75\" height=\"75\" alt=\"Josh Hemphill\" loading=\"lazy\"/></a> |\n| :--: | :--: | :--: | :--: |\n| [Ido Richter (Founder)](https://github.com/idori) | [Keith Holliday](https://github.com/TheHollidayInn) | [Raz Luvaton](https://github.com/rluvaton) | [Josh Hemphill](https://github.com/josh-hemphill) |\n\n### Collaborateur émérite\n\n| <a href=\"https://github.com/refack\" target=\"_blank\"><img src=\"assets/images/members/refael.png\" width=\"50\" height=\"50\"/></a> |\n| :-------------------------------------------------------------------------------------------------------------------------: |\n|                                        [Refael Ackermann](https://github.com/refack)                                        |\n\n<br/>\n\n## Contribution\n\nSi vous avez toujours voulu contribuer à l'open source, voici votre chance ! Consultez les [documents de contributions](.operations/CONTRIBUTING.md) pour plus d'information.\n\n## Contributeurs ✨\n\nMerci à ces merveilleuses personnes qui ont contribué à ce dépôt !\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kevinrambaud\"><img src=\"https://avatars1.githubusercontent.com/u/7501477?v=4\" width=\"100px;\" alt=\"Kevin Rambaud\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kevin Rambaud</b></sub></a><br /><a href=\"#content-kevinrambaud\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mfine15\"><img src=\"https://avatars1.githubusercontent.com/u/1286554?v=4\" width=\"100px;\" alt=\"Michael Fine\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Michael Fine</b></sub></a><br /><a href=\"#content-mfine15\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://squgeim.github.io\"><img src=\"https://avatars0.githubusercontent.com/u/4996818?v=4\" width=\"100px;\" alt=\"Shreya Dahal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shreya Dahal</b></sub></a><br /><a href=\"#content-squgeim\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://matheusrocha89.com\"><img src=\"https://avatars1.githubusercontent.com/u/3718366?v=4\" width=\"100px;\" alt=\"Matheus Cruz Rocha\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Matheus Cruz Rocha</b></sub></a><br /><a href=\"#content-matheusrocha89\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://bityog.github.io/Portfolio/\"><img src=\"https://avatars2.githubusercontent.com/u/28219178?v=4\" width=\"100px;\" alt=\"Yog Mehta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yog Mehta</b></sub></a><br /><a href=\"#content-BitYog\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://kudapara.co.zw\"><img src=\"https://avatars3.githubusercontent.com/u/13519184?v=4\" width=\"100px;\" alt=\"Kudakwashe Paradzayi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kudakwashe Paradzayi</b></sub></a><br /><a href=\"#content-kudapara\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.t1st3.com/\"><img src=\"https://avatars1.githubusercontent.com/u/1469638?v=4\" width=\"100px;\" alt=\"t1st3\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>t1st3</b></sub></a><br /><a href=\"#content-t1st3\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mulijordan1976\"><img src=\"https://avatars0.githubusercontent.com/u/33382022?v=4\" width=\"100px;\" alt=\"mulijordan1976\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>mulijordan1976</b></sub></a><br /><a href=\"#content-mulijordan1976\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/matchai\"><img src=\"https://avatars0.githubusercontent.com/u/4658208?v=4\" width=\"100px;\" alt=\"Matan Kushner\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Matan Kushner</b></sub></a><br /><a href=\"#content-matchai\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://fabiothiroki.github.io\"><img src=\"https://avatars2.githubusercontent.com/u/670057?v=4\" width=\"100px;\" alt=\"Fabio Hiroki\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Fabio Hiroki</b></sub></a><br /><a href=\"#content-fabiothiroki\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://james.sumners.info/\"><img src=\"https://avatars1.githubusercontent.com/u/321201?v=4\" width=\"100px;\" alt=\"James Sumners\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>James Sumners</b></sub></a><br /><a href=\"#content-jsumners\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/_DanGamble\"><img src=\"https://avatars2.githubusercontent.com/u/7152041?v=4\" width=\"100px;\" alt=\"Dan Gamble\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dan Gamble</b></sub></a><br /><a href=\"#content-dan-gamble\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/trainorpj\"><img src=\"https://avatars3.githubusercontent.com/u/13276704?v=4\" width=\"100px;\" alt=\"PJ Trainor\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>PJ Trainor</b></sub></a><br /><a href=\"#content-trainorpj\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/reod\"><img src=\"https://avatars0.githubusercontent.com/u/3164299?v=4\" width=\"100px;\" alt=\"Remek Ambroziak\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Remek Ambroziak</b></sub></a><br /><a href=\"#content-reod\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://ca.non.co.il\"><img src=\"https://avatars0.githubusercontent.com/u/1829789?v=4\" width=\"100px;\" alt=\"Yoni Jah\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yoni Jah</b></sub></a><br /><a href=\"#content-yonjah\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/hazolsky\"><img src=\"https://avatars1.githubusercontent.com/u/1270790?v=4\" width=\"100px;\" alt=\"Misha Khokhlov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Misha Khokhlov</b></sub></a><br /><a href=\"#content-hazolsky\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://plus.google.com/+ЕвгенийОрехов/\"><img src=\"https://avatars3.githubusercontent.com/u/8045060?v=4\" width=\"100px;\" alt=\"Evgeny Orekhov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Evgeny Orekhov</b></sub></a><br /><a href=\"#content-EvgenyOrekhov\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/gediminasml\"><img src=\"https://avatars3.githubusercontent.com/u/19854105?v=4\" width=\"100px;\" alt=\"-\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>-</b></sub></a><br /><a href=\"#content-gediminasml\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://hisaac.net\"><img src=\"https://avatars3.githubusercontent.com/u/923876?v=4\" width=\"100px;\" alt=\"Isaac Halvorson\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Isaac Halvorson</b></sub></a><br /><a href=\"#content-hisaac\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.vedrankaracic.com\"><img src=\"https://avatars3.githubusercontent.com/u/2808092?v=4\" width=\"100px;\" alt=\"Vedran Karačić\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vedran Karačić</b></sub></a><br /><a href=\"#content-vkaracic\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/lallenlowe\"><img src=\"https://avatars3.githubusercontent.com/u/10761165?v=4\" width=\"100px;\" alt=\"lallenlowe\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>lallenlowe</b></sub></a><br /><a href=\"#content-lallenlowe\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/nwwells\"><img src=\"https://avatars2.githubusercontent.com/u/1039473?v=4\" width=\"100px;\" alt=\"Nathan Wells\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nathan Wells</b></sub></a><br /><a href=\"#content-nwwells\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/paulovitin\"><img src=\"https://avatars0.githubusercontent.com/u/125503?v=4\" width=\"100px;\" alt=\"Paulo Reis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Paulo Reis</b></sub></a><br /><a href=\"#content-paulovitin\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://snap.simpego.ch\"><img src=\"https://avatars2.githubusercontent.com/u/1989646?v=4\" width=\"100px;\" alt=\"syzer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>syzer</b></sub></a><br /><a href=\"#content-syzer\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://sancho.dev\"><img src=\"https://avatars0.githubusercontent.com/u/3763599?v=4\" width=\"100px;\" alt=\"David Sancho\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>David Sancho</b></sub></a><br /><a href=\"#content-davesnx\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://apiforge.it\"><img src=\"https://avatars0.githubusercontent.com/u/4929965?v=4\" width=\"100px;\" alt=\"Robert Manolea\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Robert Manolea</b></sub></a><br /><a href=\"#content-pupix\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://jumptoglide.com\"><img src=\"https://avatars2.githubusercontent.com/u/708395?v=4\" width=\"100px;\" alt=\"Xavier Ho\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Xavier Ho</b></sub></a><br /><a href=\"#content-spaxe\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.ocular-rhythm.io\"><img src=\"https://avatars0.githubusercontent.com/u/2738518?v=4\" width=\"100px;\" alt=\"Aaron\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Aaron</b></sub></a><br /><a href=\"#content-ocularrhythm\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://septa97.me\"><img src=\"https://avatars2.githubusercontent.com/u/13742634?v=4\" width=\"100px;\" alt=\"Jan Charles Maghirang Adona\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jan Charles Maghirang Adona</b></sub></a><br /><a href=\"#content-septa97\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.cakeresume.com/allenfang\"><img src=\"https://avatars2.githubusercontent.com/u/5351390?v=4\" width=\"100px;\" alt=\"Allen\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Allen</b></sub></a><br /><a href=\"#content-AllenFang\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/leonardovillela\"><img src=\"https://avatars3.githubusercontent.com/u/8650543?v=4\" width=\"100px;\" alt=\"Leonardo Villela\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Leonardo Villela</b></sub></a><br /><a href=\"#content-leonardovillela\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://michalzalecki.com\"><img src=\"https://avatars1.githubusercontent.com/u/3136577?v=4\" width=\"100px;\" alt=\"Michał Załęcki\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Michał Załęcki</b></sub></a><br /><a href=\"#content-MichalZalecki\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.wealthbar.com\"><img src=\"https://avatars1.githubusercontent.com/u/156449?v=4\" width=\"100px;\" alt=\"Chris Nicola\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Chris Nicola</b></sub></a><br /><a href=\"#content-chrisnicola\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/aecorredor\"><img src=\"https://avatars3.githubusercontent.com/u/9114987?v=4\" width=\"100px;\" alt=\"Alejandro Corredor\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alejandro Corredor</b></sub></a><br /><a href=\"#content-aecorredor\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/cwar\"><img src=\"https://avatars3.githubusercontent.com/u/272843?v=4\" width=\"100px;\" alt=\"cwar\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>cwar</b></sub></a><br /><a href=\"#content-cwar\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/keyfoxth\"><img src=\"https://avatars3.githubusercontent.com/u/10647132?v=4\" width=\"100px;\" alt=\"Yuwei\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yuwei</b></sub></a><br /><a href=\"#content-keyfoxth\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://bigcodenerd.org\"><img src=\"https://avatars3.githubusercontent.com/u/10895594?v=4\" width=\"100px;\" alt=\"Utkarsh Bhatt\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Utkarsh Bhatt</b></sub></a><br /><a href=\"#content-utkarshbhatt12\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/duartemendes\"><img src=\"https://avatars2.githubusercontent.com/u/12852058?v=4\" width=\"100px;\" alt=\"Duarte Mendes\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Duarte Mendes</b></sub></a><br /><a href=\"#content-duartemendes\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://jasonkim.ca\"><img src=\"https://avatars2.githubusercontent.com/u/103456?v=4\" width=\"100px;\" alt=\"Jason Kim\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jason Kim</b></sub></a><br /><a href=\"#content-serv\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Max101\"><img src=\"https://avatars2.githubusercontent.com/u/2124249?v=4\" width=\"100px;\" alt=\"Mitja O.\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Mitja O.</b></sub></a><br /><a href=\"#content-Max101\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://sandromiguel.com\"><img src=\"https://avatars0.githubusercontent.com/u/6423157?v=4\" width=\"100px;\" alt=\"Sandro Miguel Marques\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sandro Miguel Marques</b></sub></a><br /><a href=\"#content-SandroMiguel\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/GabeKuslansky\"><img src=\"https://avatars3.githubusercontent.com/u/9855482?v=4\" width=\"100px;\" alt=\"Gabe\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Gabe</b></sub></a><br /><a href=\"#content-GabeKuslansky\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://ripper234.com/\"><img src=\"https://avatars1.githubusercontent.com/u/172282?v=4\" width=\"100px;\" alt=\"Ron Gross\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ron Gross</b></sub></a><br /><a href=\"#content-ripper234\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.thecodebarbarian.com\"><img src=\"https://avatars2.githubusercontent.com/u/1620265?v=4\" width=\"100px;\" alt=\"Valeri Karpov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Valeri Karpov</b></sub></a><br /><a href=\"#content-vkarpov15\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://sergiobernal.com\"><img src=\"https://avatars3.githubusercontent.com/u/20087388?v=4\" width=\"100px;\" alt=\"Sergio Bernal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sergio Bernal</b></sub></a><br /><a href=\"#content-imsergiobernal\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ntelkedzhiev\"><img src=\"https://avatars2.githubusercontent.com/u/7332371?v=4\" width=\"100px;\" alt=\"Nikola Telkedzhiev\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nikola Telkedzhiev</b></sub></a><br /><a href=\"#content-ntelkedzhiev\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/vitordagamagodoy\"><img src=\"https://avatars0.githubusercontent.com/u/26370059?v=4\" width=\"100px;\" alt=\"Vitor Godoy\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vitor Godoy</b></sub></a><br /><a href=\"#content-vitordagamagodoy\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.manishsaraan.com/\"><img src=\"https://avatars2.githubusercontent.com/u/19797340?v=4\" width=\"100px;\" alt=\"Manish Saraan\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Manish Saraan</b></sub></a><br /><a href=\"#content-manishsaraan\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/uronly14me\"><img src=\"https://avatars2.githubusercontent.com/u/5186814?v=4\" width=\"100px;\" alt=\"Sangbeom Han\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sangbeom Han</b></sub></a><br /><a href=\"#content-uronly14me\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://blackmatch.github.io\"><img src=\"https://avatars3.githubusercontent.com/u/12443954?v=4\" width=\"100px;\" alt=\"blackmatch\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>blackmatch</b></sub></a><br /><a href=\"#content-blackmatch\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://simmsreeve.com\"><img src=\"https://avatars3.githubusercontent.com/u/5173131?v=4\" width=\"100px;\" alt=\"Joe Reeve\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Joe Reeve</b></sub></a><br /><a href=\"#content-ISNIT0\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/BusbyActual\"><img src=\"https://avatars2.githubusercontent.com/u/14985016?v=4\" width=\"100px;\" alt=\"Ryan Busby\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ryan Busby</b></sub></a><br /><a href=\"#content-BusbyActual\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://jsdecorator.com\"><img src=\"https://avatars3.githubusercontent.com/u/4482199?v=4\" width=\"100px;\" alt=\"Iman Mohamadi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Iman Mohamadi</b></sub></a><br /><a href=\"#content-ImanMh\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/HeeL\"><img src=\"https://avatars1.githubusercontent.com/u/287769?v=4\" width=\"100px;\" alt=\"Sergii Paryzhskyi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sergii Paryzhskyi</b></sub></a><br /><a href=\"#content-HeeL\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kapilepatel\"><img src=\"https://avatars3.githubusercontent.com/u/25738473?v=4\" width=\"100px;\" alt=\"Kapil Patel\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kapil Patel</b></sub></a><br /><a href=\"#content-kapilepatel\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/justjavac\"><img src=\"https://avatars1.githubusercontent.com/u/359395?v=4\" width=\"100px;\" alt=\"迷渡\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>迷渡</b></sub></a><br /><a href=\"#content-justjavac\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/hozefaj\"><img src=\"https://avatars1.githubusercontent.com/u/2084833?v=4\" width=\"100px;\" alt=\"Hozefa\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Hozefa</b></sub></a><br /><a href=\"#content-hozefaj\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/el-ethan\"><img src=\"https://avatars3.githubusercontent.com/u/10249884?v=4\" width=\"100px;\" alt=\"Ethan\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ethan</b></sub></a><br /><a href=\"#content-el-ethan\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/milkdeliver\"><img src=\"https://avatars2.githubusercontent.com/u/3108407?v=4\" width=\"100px;\" alt=\"Sam\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sam</b></sub></a><br /><a href=\"#content-milkdeliver\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ArlindXh\"><img src=\"https://avatars0.githubusercontent.com/u/19508764?v=4\" width=\"100px;\" alt=\"Arlind\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Arlind</b></sub></a><br /><a href=\"#content-ArlindXh\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ttous\"><img src=\"https://avatars0.githubusercontent.com/u/19815440?v=4\" width=\"100px;\" alt=\"Teddy Toussaint\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Teddy Toussaint</b></sub></a><br /><a href=\"#content-ttous\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://ardern.io\"><img src=\"https://avatars2.githubusercontent.com/u/2419690?v=4\" width=\"100px;\" alt=\"Lewis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Lewis</b></sub></a><br /><a href=\"#content-LewisArdern\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://gabriellidenor.com/\"><img src=\"https://avatars2.githubusercontent.com/u/765963?v=4\" width=\"100px;\" alt=\"Gabriel Lidenor \"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Gabriel Lidenor </b></sub></a><br /><a href=\"#content-GabrielLidenor\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/animir\"><img src=\"https://avatars3.githubusercontent.com/u/4623196?v=4\" width=\"100px;\" alt=\"Roman\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Roman</b></sub></a><br /><a href=\"#content-animir\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Francozeira\"><img src=\"https://avatars1.githubusercontent.com/u/47419763?v=4\" width=\"100px;\" alt=\"Francozeira\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Francozeira</b></sub></a><br /><a href=\"#content-Francozeira\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/invvard\"><img src=\"https://avatars0.githubusercontent.com/u/7305493?v=4\" width=\"100px;\" alt=\"Invvard\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Invvard</b></sub></a><br /><a href=\"#content-Invvard\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://romulogarofalo.github.io/\"><img src=\"https://avatars1.githubusercontent.com/u/18492592?v=4\" width=\"100px;\" alt=\"Rômulo Garofalo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Rômulo Garofalo</b></sub></a><br /><a href=\"#content-romulogarofalo\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://thoqbk.github.io/\"><img src=\"https://avatars0.githubusercontent.com/u/1491103?v=4\" width=\"100px;\" alt=\"Tho Q Luong\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tho Q Luong</b></sub></a><br /><a href=\"#content-thoqbk\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Qeneke\"><img src=\"https://avatars2.githubusercontent.com/u/20271568?v=4\" width=\"100px;\" alt=\"Burak Shen\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Burak Shen</b></sub></a><br /><a href=\"#content-Qeneke\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.happy-css.com\"><img src=\"https://avatars0.githubusercontent.com/u/2950505?v=4\" width=\"100px;\" alt=\"Martin Muzatko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Martin Muzatko</b></sub></a><br /><a href=\"#content-MartinMuzatko\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/autoboxer\"><img src=\"https://avatars3.githubusercontent.com/u/2757601?v=4\" width=\"100px;\" alt=\"Jared Collier\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jared Collier</b></sub></a><br /><a href=\"#content-autoboxer\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://hiltonmeyer.com\"><img src=\"https://avatars3.githubusercontent.com/u/4545860?v=4\" width=\"100px;\" alt=\"Hilton Meyer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Hilton Meyer</b></sub></a><br /><a href=\"#content-bikingbadger\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://kr.vuejs.org\"><img src=\"https://avatars0.githubusercontent.com/u/1451365?v=4\" width=\"100px;\" alt=\"ChangJoo Park(박창주)\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>ChangJoo Park(박창주)</b></sub></a><br /><a href=\"#content-ChangJoo-Park\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/MasahiroSakaguchi\"><img src=\"https://avatars0.githubusercontent.com/u/16427431?v=4\" width=\"100px;\" alt=\"Masahiro Sakaguchi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Masahiro Sakaguchi</b></sub></a><br /><a href=\"#content-MasahiroSakaguchi\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/TheHollidayInn\"><img src=\"https://avatars1.githubusercontent.com/u/1253400?v=4\" width=\"100px;\" alt=\"Keith Holliday\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Keith Holliday</b></sub></a><br /><a href=\"#content-TheHollidayInn\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.coreycleary.me\"><img src=\"https://avatars3.githubusercontent.com/u/1485356?v=4\" width=\"100px;\" alt=\"coreyc\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>coreyc</b></sub></a><br /><a href=\"#content-coreyc\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://maxcubing.wordpress.com\"><img src=\"https://avatars0.githubusercontent.com/u/8260834?v=4\" width=\"100px;\" alt=\"Maximilian Berkmann\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Maximilian Berkmann</b></sub></a><br /><a href=\"#content-Berkmann18\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/DouglasMV\"><img src=\"https://avatars3.githubusercontent.com/u/32845487?v=4\" width=\"100px;\" alt=\"Douglas Mariano Valero\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Douglas Mariano Valero</b></sub></a><br /><a href=\"#content-DouglasMV\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/marcelosdm\"><img src=\"https://avatars0.githubusercontent.com/u/18266600?v=4\" width=\"100px;\" alt=\"Marcelo Melo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Marcelo Melo</b></sub></a><br /><a href=\"#content-marcelosdm\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/mperk_\"><img src=\"https://avatars0.githubusercontent.com/u/3465794?v=4\" width=\"100px;\" alt=\"Mehmet Perk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Mehmet Perk</b></sub></a><br /><a href=\"#content-mperk\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ryanouyang\"><img src=\"https://avatars2.githubusercontent.com/u/360426?v=4\" width=\"100px;\" alt=\"ryan ouyang\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>ryan ouyang</b></sub></a><br /><a href=\"#content-ryanouyang\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/shabeer-mdy\"><img src=\"https://avatars0.githubusercontent.com/u/26842535?v=4\" width=\"100px;\" alt=\"Shabeer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shabeer</b></sub></a><br /><a href=\"#content-shabeer-mdy\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/halfzebra\"><img src=\"https://avatars1.githubusercontent.com/u/3983879?v=4\" width=\"100px;\" alt=\"Eduard Kyvenko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Eduard Kyvenko</b></sub></a><br /><a href=\"#content-halfzebra\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://deyvisonrocha.com\"><img src=\"https://avatars2.githubusercontent.com/u/686067?v=4\" width=\"100px;\" alt=\"Deyvison Rocha\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Deyvison Rocha</b></sub></a><br /><a href=\"#content-deyvisonrocha\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://twitter.com/georgemamer\"><img src=\"https://avatars1.githubusercontent.com/u/20108934?v=4\" width=\"100px;\" alt=\"George Mamer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>George Mamer</b></sub></a><br /><a href=\"#content-georgem3\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/leimonio\"><img src=\"https://avatars0.githubusercontent.com/u/1969742?v=4\" width=\"100px;\" alt=\"Konstantinos Leimonis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Konstantinos Leimonis</b></sub></a><br /><a href=\"#content-leimonio\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Zybax\"><img src=\"https://avatars3.githubusercontent.com/u/22094453?v=4\" width=\"100px;\" alt=\"Oliver Lluberes\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Oliver Lluberes</b></sub></a><br /><a href=\"#translation-Zybax\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://stackoverflow.com/story/tiendq\"><img src=\"https://avatars2.githubusercontent.com/u/815910?v=4\" width=\"100px;\" alt=\"Tien Do\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tien Do</b></sub></a><br /><a href=\"#content-tiendq\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://singh1114.github.io/\"><img src=\"https://avatars0.githubusercontent.com/u/11356398?v=4\" width=\"100px;\" alt=\"Ranvir Singh\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ranvir Singh</b></sub></a><br /><a href=\"#content-singh1114\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/collierrgbsitisfise\"><img src=\"https://avatars3.githubusercontent.com/u/13496126?v=4\" width=\"100px;\" alt=\"Vadim Nicolaev\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vadim Nicolaev</b></sub></a><br /><a href=\"#content-collierrgbsitisfise\" title=\"Content\">🖋</a> <a href=\"#translation-collierrgbsitisfise\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/germangamboa95\"><img src=\"https://avatars3.githubusercontent.com/u/28633849?v=4\" width=\"100px;\" alt=\"German Gamboa Gonzalez\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>German Gamboa Gonzalez</b></sub></a><br /><a href=\"#content-germangamboa95\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/AbdelrahmanHafez\"><img src=\"https://avatars3.githubusercontent.com/u/19984935?v=4\" width=\"100px;\" alt=\"Hafez\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Hafez</b></sub></a><br /><a href=\"#content-AbdelrahmanHafez\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://linkedin.com/in/chandiran-dmc\"><img src=\"https://avatars3.githubusercontent.com/u/42678579?v=4\" width=\"100px;\" alt=\"Chandiran\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Chandiran</b></sub></a><br /><a href=\"#content-chandiran-dmc\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/VinayaSathyanarayana\"><img src=\"https://avatars2.githubusercontent.com/u/16976677?v=4\" width=\"100px;\" alt=\"VinayaSathyanarayana\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>VinayaSathyanarayana</b></sub></a><br /><a href=\"#content-VinayaSathyanarayana\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.kimkern.de\"><img src=\"https://avatars1.githubusercontent.com/u/2671139?v=4\" width=\"100px;\" alt=\"Kim Kern\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kim Kern</b></sub></a><br /><a href=\"#content-kiwikern\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://kennethfreitas.github.io/\"><img src=\"https://avatars2.githubusercontent.com/u/55669043?v=4\" width=\"100px;\" alt=\"Kenneth Freitas\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kenneth Freitas</b></sub></a><br /><a href=\"#content-kennethfreitas\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/songe\"><img src=\"https://avatars2.githubusercontent.com/u/1531561?v=4\" width=\"100px;\" alt=\"songe\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>songe</b></sub></a><br /><a href=\"#content-songe\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://ksed.dev\"><img src=\"https://avatars1.githubusercontent.com/u/30693707?v=4\" width=\"100px;\" alt=\"Kirill Shekhovtsov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kirill Shekhovtsov</b></sub></a><br /><a href=\"#content-Ksedline\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/SerzN1\"><img src=\"https://avatars0.githubusercontent.com/u/2534649?v=4\" width=\"100px;\" alt=\"Serge\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Serge</b></sub></a><br /><a href=\"#content-SerzN1\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/keyrwinz\"><img src=\"https://avatars3.githubusercontent.com/u/21241761?v=4\" width=\"100px;\" alt=\"keyrwinz\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>keyrwinz</b></sub></a><br /><a href=\"#content-keyrwinz\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/nDmitry\"><img src=\"https://avatars0.githubusercontent.com/u/2134568?v=4\" width=\"100px;\" alt=\"Dmitry Nikitenko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dmitry Nikitenko</b></sub></a><br /><a href=\"#content-nDmitry\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://bushuai.cc\"><img src=\"https://avatars0.githubusercontent.com/u/1875256?v=4\" width=\"100px;\" alt=\"bushuai\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>bushuai</b></sub></a><br /><a href=\"https://github.com/goldbergyoni/nodebestpractices/pulls?q=is%3Apr+reviewed-by%3Abushuai\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#content-bushuai\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://stackoverflow.com/users/1348195/benjamin-gruenbaum\"><img src=\"https://avatars2.githubusercontent.com/u/1315533?v=4\" width=\"100px;\" alt=\"Benjamin Gruenbaum\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Benjamin Gruenbaum</b></sub></a><br /><a href=\"#content-benjamingr\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/byeze\"><img src=\"https://avatars1.githubusercontent.com/u/7424138?v=4\" width=\"100px;\" alt=\"Ezequiel\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ezequiel</b></sub></a><br /><a href=\"#translation-byeze\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/juaoose\"><img src=\"https://avatars3.githubusercontent.com/u/994594?v=4\" width=\"100px;\" alt=\"Juan José Rodríguez\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Juan José Rodríguez</b></sub></a><br /><a href=\"#translation-juaoose\" title=\"Translation\">🌍</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/OrBin\"><img src=\"https://avatars1.githubusercontent.com/u/6897234?v=4\" width=\"100px;\" alt=\"Or Bin\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Or Bin</b></sub></a><br /><a href=\"#content-OrBin\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/andreoav07\"><img src=\"https://avatars2.githubusercontent.com/u/508827?v=4\" width=\"100px;\" alt=\"Andreo Vieira\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Andreo Vieira</b></sub></a><br /><a href=\"#content-andreoav\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mikicho\"><img src=\"https://avatars1.githubusercontent.com/u/11459632?v=4\" width=\"100px;\" alt=\"Michael Solomon\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Michael Solomon</b></sub></a><br /><a href=\"#content-mikicho\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jimmycallin\"><img src=\"https://avatars0.githubusercontent.com/u/2225828?v=4\" width=\"100px;\" alt=\"Jimmy Callin\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jimmy Callin</b></sub></a><br /><a href=\"#content-jimmycallin\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/siddharthofficial/\"><img src=\"https://avatars2.githubusercontent.com/u/26025955?v=4\" width=\"100px;\" alt=\"Siddharth\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Siddharth</b></sub></a><br /><a href=\"#content-w01fS\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://ryansmith.tech/\"><img src=\"https://avatars0.githubusercontent.com/u/1578766?v=4\" width=\"100px;\" alt=\"Ryan Smith\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ryan Smith</b></sub></a><br /><a href=\"#content-ryan3E0\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://de.linkedin.com/in/tom-boettger\"><img src=\"https://avatars2.githubusercontent.com/u/49961674?v=4\" width=\"100px;\" alt=\"Tom Boettger\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tom Boettger</b></sub></a><br /><a href=\"#content-bttger\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jormaechea\"><img src=\"https://avatars3.githubusercontent.com/u/5612500?v=4\" width=\"100px;\" alt=\"Joaquín Ormaechea\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Joaquín Ormaechea</b></sub></a><br /><a href=\"#translation-jormaechea\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/dfrzuz\"><img src=\"https://avatars3.githubusercontent.com/u/71859096?v=4\" width=\"100px;\" alt=\"dfrzuz\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>dfrzuz</b></sub></a><br /><a href=\"#translation-dfrzuz\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/victor-homyakov\"><img src=\"https://avatars1.githubusercontent.com/u/121449?v=4\" width=\"100px;\" alt=\"Victor Homyakov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Victor Homyakov</b></sub></a><br /><a href=\"#content-victor-homyakov\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://joshuahemphill.com\"><img src=\"https://avatars3.githubusercontent.com/u/46608115?v=4\" width=\"100px;\" alt=\"Josh\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Josh</b></sub></a><br /><a href=\"#content-josh-hemphill\" title=\"Content\">🖋</a> <a href=\"#security-josh-hemphill\" title=\"Security\">🛡️</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/alec-francis\"><img src=\"https://avatars2.githubusercontent.com/u/32949882?v=4\" width=\"100px;\" alt=\"Alec Francis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alec Francis</b></sub></a><br /><a href=\"#content-alec-francis\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/arjun6610\"><img src=\"https://avatars1.githubusercontent.com/u/61268891?v=4\" width=\"100px;\" alt=\"arjun6610\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>arjun6610</b></sub></a><br /><a href=\"#content-arjun6610\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jan-osch\"><img src=\"https://avatars2.githubusercontent.com/u/11651780?v=4\" width=\"100px;\" alt=\"Jan Osch\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jan Osch</b></sub></a><br /><a href=\"#content-jan-osch\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/thiagotrs\"><img src=\"https://avatars2.githubusercontent.com/u/32005779?v=4\" width=\"100px;\" alt=\"Thiago Rotondo Sampaio\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Thiago Rotondo Sampaio</b></sub></a><br /><a href=\"#translation-thiagotrs\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Alexsey\"><img src=\"https://avatars0.githubusercontent.com/u/6392013?v=4\" width=\"100px;\" alt=\"Alexsey\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alexsey</b></sub></a><br /><a href=\"#content-Alexsey\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/13luismb\"><img src=\"https://avatars1.githubusercontent.com/u/32210483?v=4\" width=\"100px;\" alt=\"Luis A. Acurero\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Luis A. Acurero</b></sub></a><br /><a href=\"#translation-13luismb\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://lromano97.github.io/\"><img src=\"https://avatars1.githubusercontent.com/u/22394847?v=4\" width=\"100px;\" alt=\"Lucas Romano\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Lucas Romano</b></sub></a><br /><a href=\"#translation-lromano97\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/denisecase\"><img src=\"https://avatars0.githubusercontent.com/u/13016516?v=4\" width=\"100px;\" alt=\"Denise Case\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Denise Case</b></sub></a><br /><a href=\"#content-denisecase\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://stackoverflow.com/story/elektronik\"><img src=\"https://avatars3.githubusercontent.com/u/1078554?v=4\" width=\"100px;\" alt=\"Nick Ribal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nick Ribal</b></sub></a><br /><a href=\"#content-elektronik2k5\" title=\"Content\">🖋</a> <a href=\"https://github.com/goldbergyoni/nodebestpractices/pulls?q=is%3Apr+reviewed-by%3Aelektronik2k5\" title=\"Reviewed Pull Requests\">👀</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/0xflotus\"><img src=\"https://avatars3.githubusercontent.com/u/26602940?v=4\" width=\"100px;\" alt=\"0xflotus\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>0xflotus</b></sub></a><br /><a href=\"#content-0xflotus\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.dijonkitchen.org/\"><img src=\"https://avatars3.githubusercontent.com/u/11434205?v=4\" width=\"100px;\" alt=\"Jonathan Chen\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jonathan Chen</b></sub></a><br /><a href=\"#content-dijonkitchen\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/dilansri\"><img src=\"https://avatars2.githubusercontent.com/u/5089728?v=4\" width=\"100px;\" alt=\"Dilan Srilal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dilan Srilal</b></sub></a><br /><a href=\"#content-dilansri\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://vectree.ru\"><img src=\"https://avatars3.githubusercontent.com/u/4215285?v=4\" width=\"100px;\" alt=\"vladthelittleone\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>vladthelittleone</b></sub></a><br /><a href=\"#translation-vladthelittleone\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.nikolaso.com\"><img src=\"https://avatars0.githubusercontent.com/u/60047271?v=4\" width=\"100px;\" alt=\"Nik Osvalds\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nik Osvalds</b></sub></a><br /><a href=\"#content-nosvalds\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kdaniel21\"><img src=\"https://avatars0.githubusercontent.com/u/39854385?v=4\" width=\"100px;\" alt=\"Daniel Kiss\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Daniel Kiss</b></sub></a><br /><a href=\"https://github.com/goldbergyoni/nodebestpractices/commits?author=kdaniel21\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/forresst17\"><img src=\"https://avatars2.githubusercontent.com/u/163352?v=4\" width=\"100px;\" alt=\"Forresst\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Forresst</b></sub></a><br /><a href=\"#content-forresst\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/svenheden\"><img src=\"https://avatars1.githubusercontent.com/u/76098?v=4\" width=\"100px;\" alt=\"Jonathan Svenheden\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jonathan Svenheden</b></sub></a><br /><a href=\"#content-svenheden\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/AustrisC\"><img src=\"https://avatars2.githubusercontent.com/u/12381652?v=4\" width=\"100px;\" alt=\"AustrisC\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>AustrisC</b></sub></a><br /><a href=\"#content-AustrisC\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/cisco0808\"><img src=\"https://avatars0.githubusercontent.com/u/60251188?v=4\" width=\"100px;\" alt=\"kyeongtae kim\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>kyeongtae kim</b></sub></a><br /><a href=\"#translation-cisco0808\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://keybase.io/651z9pz968v2accj\"><img src=\"https://avatars.githubusercontent.com/u/65741741?v=4\" width=\"100px;\" alt=\"007\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>007</b></sub></a><br /><a href=\"#content-6gx7iycn53ioq2e8apk1j1ypwov4giui\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.anediaz.com\"><img src=\"https://avatars.githubusercontent.com/u/17216937?v=4\" width=\"100px;\" alt=\"Ane Diaz de Tuesta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ane Diaz de Tuesta</b></sub></a><br /><a href=\"#translation-anediaz\" title=\"Translation\">🌍</a> <a href=\"#content-anediaz\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://yukioh.net\"><img src=\"https://avatars.githubusercontent.com/u/23182489?v=4\" width=\"100px;\" alt=\"YukiOta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>YukiOta</b></sub></a><br /><a href=\"#translation-YukiOta\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.yeovilhospital.co.uk/\"><img src=\"https://avatars.githubusercontent.com/u/43814140?v=4\" width=\"100px;\" alt=\"Frazer Smith\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Frazer Smith</b></sub></a><br /><a href=\"#content-Fdawgs\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/rluvaton\"><img src=\"https://avatars.githubusercontent.com/u/16746759?v=4\" width=\"100px;\" alt=\"Raz Luvaton\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Raz Luvaton</b></sub></a><br /><a href=\"#content-rluvaton\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/YA21\"><img src=\"https://avatars.githubusercontent.com/u/37298463?v=4\" width=\"100px;\" alt=\"Yuta Azumi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yuta Azumi</b></sub></a><br /><a href=\"#content-YA21\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/andrewjbarbour\"><img src=\"https://avatars.githubusercontent.com/u/77080074?v=4\" width=\"100px;\" alt=\"andrewjbarbour\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>andrewjbarbour</b></sub></a><br /><a href=\"#content-andrewjbarbour\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://MasujimaRyohei.jp\"><img src=\"https://avatars.githubusercontent.com/u/17163541?v=4\" width=\"100px;\" alt=\"mr\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>mr</b></sub></a><br /><a href=\"#content-MasujimaRyohei\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kubanac95\"><img src=\"https://avatars.githubusercontent.com/u/16191931?v=4\" width=\"100px;\" alt=\"Aleksandar\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Aleksandar</b></sub></a><br /><a href=\"#content-kubanac95\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://vincentjonathan.com\"><img src=\"https://avatars.githubusercontent.com/u/32597776?v=4\" width=\"100px;\" alt=\"Owl\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Owl</b></sub></a><br /><a href=\"#content-SuspiciousLookingOwl\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/yedidyas\"><img src=\"https://avatars.githubusercontent.com/u/36074789?v=4\" width=\"100px;\" alt=\"Yedidya Schwartz\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yedidya Schwartz</b></sub></a><br /><a href=\"#content-yedidyas\" title=\"Content\">🖋</a> <a href=\"#example-yedidyas\" title=\"Examples\">💡</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ariel-diaz\"><img src=\"https://avatars.githubusercontent.com/u/20423540?v=4\" width=\"100px;\" alt=\"ari\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>ari</b></sub></a><br /><a href=\"#content-ariel-diaz\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.koenigthomas.de/\"><img src=\"https://avatars.githubusercontent.com/u/7080389?v=4\" width=\"100px;\" alt=\"Thomas König\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Thomas König</b></sub></a><br /><a href=\"#content-Vispercept\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/coocos\"><img src=\"https://avatars.githubusercontent.com/u/1397804?v=4\" width=\"100px;\" alt=\"Kalle Lämsä\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kalle Lämsä</b></sub></a><br /><a href=\"#content-coocos\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://math.cat\"><img src=\"https://avatars.githubusercontent.com/u/10328430?v=4\" width=\"100px;\" alt=\"Wyatt\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Wyatt</b></sub></a><br /><a href=\"#content-ZhyMC\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://libkhadir.fr\"><img src=\"https://avatars.githubusercontent.com/u/45130488?v=4\" width=\"100px;\" alt=\"KHADIR Tayeb\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>KHADIR Tayeb</b></sub></a><br /><a href=\"#content-tkhadir\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/shankarregmi\"><img src=\"https://avatars.githubusercontent.com/u/7703345?v=4\" width=\"100px;\" alt=\"Shankar Regmi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shankar Regmi</b></sub></a><br /><a href=\"#content-shankarregmi\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/codebyshubham\"><img src=\"https://avatars.githubusercontent.com/u/10389723?v=4\" width=\"100px;\" alt=\"Shubham\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shubham</b></sub></a><br /><a href=\"#content-codebyshubham\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://lucalves.me/\"><img src=\"https://avatars.githubusercontent.com/u/17712401?v=4\" width=\"100px;\" alt=\"Lucas Alves\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Lucas Alves</b></sub></a><br /><a href=\"#content-lucalves\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/benjaminudoh10\"><img src=\"https://avatars.githubusercontent.com/u/9018331?v=4\" width=\"100px;\" alt=\"Benjamin\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Benjamin</b></sub></a><br /><a href=\"#content-benjaminudoh10\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.yjoer.com\"><img src=\"https://avatars.githubusercontent.com/u/47742486?v=4\" width=\"100px;\" alt=\"Yeoh Joer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yeoh Joer</b></sub></a><br /><a href=\"#content-yjoer\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://blog.miigon.net\"><img src=\"https://avatars.githubusercontent.com/u/16161991?v=4\" width=\"100px;\" alt=\"Miigon\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Miigon</b></sub></a><br /><a href=\"#content-Miigon\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://brainstorage.me/Egregor2011\"><img src=\"https://avatars.githubusercontent.com/u/3630318?v=4\" width=\"100px;\" alt=\"Rostislav Bogorad\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Rostislav Bogorad</b></sub></a><br /><a href=\"#content-Egregor2011\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Flouse\"><img src=\"https://avatars.githubusercontent.com/u/1297478?v=4\" width=\"100px;\" alt=\"Flouse\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Flouse</b></sub></a><br /><a href=\"#content-Flouse\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://taranttini.com\"><img src=\"https://avatars.githubusercontent.com/u/6922125?v=4\" width=\"100px;\" alt=\"Tarantini Pereira\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tarantini Pereira</b></sub></a><br /><a href=\"#content-taranttini\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kzmat\"><img src=\"https://avatars.githubusercontent.com/u/34614358?v=4\" width=\"100px;\" alt=\"Kazuki Matsuo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kazuki Matsuo</b></sub></a><br /><a href=\"#content-kzmat\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/burkybang\"><img src=\"https://avatars.githubusercontent.com/u/927886?v=4\" width=\"100px;\" alt=\"Adam Smith\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Adam Smith</b></sub></a><br /><a href=\"#content-burkybang\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://codekodo.tistory.com\"><img src=\"https://avatars.githubusercontent.com/u/33795856?v=4\" width=\"100px;\" alt=\"Dohyeon Ko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dohyeon Ko</b></sub></a><br /><a href=\"#content-k906506\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/vlad99902\"><img src=\"https://avatars.githubusercontent.com/u/67615003?v=4\" width=\"100px;\" alt=\"Vladislav Legkov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vladislav Legkov</b></sub></a><br /><a href=\"#content-vlad99902\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://kerolloz.github.io\"><img src=\"https://avatars.githubusercontent.com/u/36763164?v=4\" width=\"100px;\" alt=\"Kerollos Magdy\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kerollos Magdy</b></sub></a><br /><a href=\"#content-kerolloz\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/erez-lieberman-b90b7219/\"><img src=\"https://avatars.githubusercontent.com/u/3277260?v=4\" width=\"100px;\" alt=\"Erez Lieberman\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Erez Lieberman</b></sub></a><br /><a href=\"#content-erezLieberman\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/breno-macedo-ernani-de-s%C3%A1-110223158/\"><img src=\"https://avatars.githubusercontent.com/u/48841329?v=4\" width=\"100px;\" alt=\"Breno Macedo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Breno Macedo</b></sub></a><br /><a href=\"#content-breno404\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/JFernando122\"><img src=\"https://avatars.githubusercontent.com/u/40414805?v=4\" width=\"100px;\" alt=\"Fernando Flores\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Fernando Flores</b></sub></a><br /><a href=\"#translation-JFernando122\" title=\"Translation\">🌍</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/rafaelconcept/\"><img src=\"https://avatars.githubusercontent.com/u/43880669?v=4\" width=\"100px;\" alt=\"Rafael Brito\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Rafael Brito</b></sub></a><br /><a href=\"#translation-rafaelconcept\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://emiliano-peralta-portfolio.vercel.app/\"><img src=\"https://avatars.githubusercontent.com/u/63617637?v=4\" width=\"100px;\" alt=\"Emiliano Peralta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Emiliano Peralta</b></sub></a><br /><a href=\"#translation-emiperalta\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://lannex.github.io\"><img src=\"https://avatars.githubusercontent.com/u/7369541?v=4\" width=\"100px;\" alt=\"Shin, SJ\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shin, SJ</b></sub></a><br /><a href=\"#content-lannex\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.benjaminforster.com\"><img src=\"https://avatars.githubusercontent.com/u/12589522?v=4\" width=\"100px;\" alt=\"Benjamin Forster\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Benjamin Forster</b></sub></a><br /><a href=\"#content-e-e-e\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/DanieleFedeli\"><img src=\"https://avatars.githubusercontent.com/u/37077048?v=4\" width=\"100px;\" alt=\"Daniele Fedeli\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Daniele Fedeli</b></sub></a><br /><a href=\"#content-DanieleFedeli\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/djob195\"><img src=\"https://avatars.githubusercontent.com/u/17146669?v=4\" width=\"100px;\" alt=\"djob195\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>djob195</b></sub></a><br /><a href=\"#content-djob195\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/antspk\"><img src=\"https://avatars.githubusercontent.com/u/78955792?v=4\" width=\"100px;\" alt=\"antspk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>antspk</b></sub></a><br /><a href=\"#content-antspk\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://jjy0821.tistory.com/\"><img src=\"https://avatars.githubusercontent.com/u/88075341?v=4\" width=\"100px;\" alt=\"정진영\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>정진영</b></sub></a><br /><a href=\"#content-jjy821\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kkk-cashwalk\"><img src=\"https://avatars.githubusercontent.com/u/91455122?v=4\" width=\"100px;\" alt=\"kkk-cashwalk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>kkk-cashwalk</b></sub></a><br /><a href=\"#content-kkk-cashwalk\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/apainintheneck\"><img src=\"https://avatars.githubusercontent.com/u/42982186?v=4\" width=\"100px;\" alt=\"apainintheneck\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>apainintheneck</b></sub></a><br /><a href=\"#content-apainintheneck\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/koyanyaroo\"><img src=\"https://avatars.githubusercontent.com/u/9715368?v=4\" width=\"100px;\" alt=\"Fajar Budhi Iswanda\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Fajar Budhi Iswanda</b></sub></a><br /><a href=\"#content-koyanyaroo\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jutiger\"><img src=\"https://avatars.githubusercontent.com/u/97490806?v=4\" width=\"100px;\" alt=\"이주호\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>이주호</b></sub></a><br /><a href=\"#content-jutiger\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/MisterSingh\"><img src=\"https://avatars.githubusercontent.com/u/44462019?v=4\" width=\"100px;\" alt=\"Singh\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Singh</b></sub></a><br /><a href=\"#content-MisterSingh\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Alex-Dumitru\"><img src=\"https://avatars.githubusercontent.com/u/43738450?v=4\" width=\"100px;\" alt=\"Alex Dumitru\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alex Dumitru</b></sub></a><br /><a href=\"#content-Alex-Dumitru\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/lykhatskyi\"><img src=\"https://avatars.githubusercontent.com/u/18104686?v=4\" width=\"100px;\" alt=\"Anton Lykhatskyi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Anton Lykhatskyi</b></sub></a><br /><a href=\"#content-lykhatskyi\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/EverythingAvailable\"><img src=\"https://avatars.githubusercontent.com/u/81002379?v=4\" width=\"100px;\" alt=\"sangwonlee\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>sangwonlee</b></sub></a><br /><a href=\"#content-EverythingAvailable\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/euberdeveloper\"><img src=\"https://avatars.githubusercontent.com/u/33126163?v=4\" width=\"100px;\" alt=\"Eugenio Berretta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Eugenio Berretta</b></sub></a><br /><a href=\"#content-euberdeveloper\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/soranakk\"><img src=\"https://avatars.githubusercontent.com/u/3930307?v=4\" width=\"100px;\" alt=\"soranakk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>soranakk</b></sub></a><br /><a href=\"#content-soranakk\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/backend-joonyoung\"><img src=\"https://avatars.githubusercontent.com/u/94430145?v=4\" width=\"100px;\" alt=\"고준영\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>고준영</b></sub></a><br /><a href=\"#content-backend-joonyoung\" title=\"Content\">🖋</a> <a href=\"https://github.com/goldbergyoni/nodebestpractices/commits?author=backend-joonyoung\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/GuilhermePortella\"><img src=\"https://avatars.githubusercontent.com/u/59876059?v=4\" width=\"100px;\" alt=\"Guilherme Portella \"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Guilherme Portella </b></sub></a><br /><a href=\"#content-GuilhermePortella\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.youtube.com/channel/UCBxzOQd2v9wWfiMDrf_RQ7A\"><img src=\"https://avatars.githubusercontent.com/u/18497570?v=4\" width=\"100px;\" alt=\"André Esser\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>André Esser</b></sub></a><br /><a href=\"#content-Esser50K\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ShiChenCong\"><img src=\"https://avatars.githubusercontent.com/u/22486446?v=4\" width=\"100px;\" alt=\"Scc\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Scc</b></sub></a><br /><a href=\"#translation-ShiChenCong\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.mauroaccornero.it\"><img src=\"https://avatars.githubusercontent.com/u/1875822?v=4\" width=\"100px;\" alt=\"Mauro Accornero\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Mauro Accornero</b></sub></a><br /><a href=\"#content-mauroaccornero\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/no-yan\"><img src=\"https://avatars.githubusercontent.com/u/63000297?v=4\" width=\"100px;\" alt=\"no-yan\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>no-yan</b></sub></a><br /><a href=\"#content-no-yan\" title=\"Content\">🖋</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n"
        },
        {
          "name": "README.hebrew.md",
          "type": "blob",
          "size": 217.28,
          "content": "[✔]: assets/images/checkbox-small-blue.png\r\n\r\n# שיטות עבודה מומלצות ב Node.js\r\n\r\n<h1 align=\"center\">\r\n  <img src=\"assets/images/banner-2.jpg\" alt=\"Node.js Best Practices\"/>\r\n</h1>\r\n\r\n<br/>\r\n\r\n<div align=\"center\">\r\n  <img src=\"https://img.shields.io/badge/⚙%20Item%20count%20-%20102%20Best%20Practices-blue.svg\" alt=\"102 items\"/> <img id=\"last-update-badge\" src=\"https://img.shields.io/badge/%F0%9F%93%85%20Last%20update%20-%20August%2016%2C%202023-green.svg\" alt=\"Last update: August 16, 2023\" /> <img src=\"https://img.shields.io/badge/ %E2%9C%94%20Updated%20For%20Version%20-%20Node%2014.0.0-brightgreen.svg\" alt=\"Updated for Node 14.0.0\"/>\r\n</div>\r\n\r\n<br/>\r\n\r\n[<img src=\"assets/images/twitter.svg\" width=\"16\" height=\"16\" alt=\"\" />](https://twitter.com/nodepractices/) **עיקבו אחרינו בטוויטר!** [**@nodepractices**](https://twitter.com/nodepractices/)\r\n<br/>\r\n**:writing_hand:\tתורגם על ידי [הוד בואר](https://github.com/hodbauer)**\r\n<br/>\r\n\r\nלקריאה בשפות נוספות: [![CN](./assets/flags/CN.png)**סינית**](./README.chinese.md), [![FR](./assets/flags/FR.png)**צרפתית**](./README.french.md), [![BR](./assets/flags/BR.png)**פורטוגזית**](./README.brazilian-portuguese.md), [![RU](./assets/flags/RU.png)**רוסית**](./README.russian.md), [![PL](./assets/flags/PL.png)**פולנית**](./README.polish.md), [![JA](./assets/flags/JA.png)**יפנית**](./README.japanese.md), [![EU](./assets/flags/EU.png)**באסקית**](./README.basque.md) [(![ES](./assets/flags/ES.png)**ספרדית**, ![HE](./assets/flags/HE.png)**עברית**, ![KR](./assets/flags/KR.png)**קוריאנית** ו ![TR](./assets/flags/TR.png)**טורקית** בתהליך! )](#translations)\r\n\r\n<br/>\r\n\r\n# Latest Best Practices and News\r\n\r\n- **🛰 2023 edition is released soon**: We're now writing the next edition, stay tuned?\r\n\r\n- **✨ 89,000 stars**: Blushing, surprised and proud!\r\n\r\n- **🔖 New menu and tags**: Our menu is collapsible now and includes `#tags`. New visitors can read `#strategic` items first. Returning visitors can focus on `#new` content. Seniors can filter for `#advanced` items. Courtesy of the one and only [Rubek Joshi](https://github.com/rubek-joshi)\r\n\r\n- **![FR](./assets/flags/FR.png) French translation!1! :** The latest translation that joins our international guide is French. Bienvenue\r\n\r\n<br/><br/>\r\n\r\n# ברוכים הבאים! שלושה דברים שכדאי לדעת לפני שגוללים מטה\r\n\r\n**1. הנכם קוראים עשרות מאמרים של שיטות העבודה המומלצות ב Node.js -** המאגר הזה הוא סיכום לא יסולא בפז של שיטות העבודה המומלצות ב Node.js , כמו כן הוא נעשה על בשיתוף פעולה.\r\n\r\n**2. זהו האוסף הגדול ביותר, והוא ממשיך לגדול כל שבוע -** נכון לרגע זה, יש למעלה מ 100 שיטות עבודה מומלצות, המלצות ארכיטקטורה והמלצות סגנון כתיבה. נושאים חדשים ובקשות חדשות (PR's) מתווספים כל יום במטרה לשמור את התוכן מעודכן. אנחנו נשמח לראותכם תורמים לפה, בין אם לתקן שגיאות קוד, עזרה בתרגום, או להציע רעיונות מבריקים חדשים. ראו את [המדריך לכתיבת הנחיות](./.operations/writing-guidelines.md).\r\n\r\n**3. שיטות העבודה כוללות מידע נוסף -**  רוב הנקודות כוללות קישור **🔗לקריאה נוספת** שמרחיב על ידי דוגמאות קוד, ציטוטים מבלוגים נבחרים ומידע נוסף.\r\n\r\n<br/><br/>\r\n\r\n# מאת יוני גולדברג\r\n\r\n### לימדו איתי: כיועץ, אני נפגש עם קבוצות מכל העולם במגוון פעולות כמו סדנאות ומעבר על קוד. 🎉 לאחרונה פרסמתי את [הקורס המתקדם לכתיבת בדיקות](https://testjavascript.com/)\r\n\r\n<br/><br/>\r\n## תוכן העניינים\r\n\r\n<details>\r\n  <summary>\r\n    <a href=\"#1-project-architecture-practices\">1. מבנה הפרוייקט (6)</a>\r\n  </summary>\r\n\r\n&emsp;&emsp;[1.1 בנו את הפרוייקט לפי רכיבים עסקיים `#strategic` `#updated`](#-11-structure-your-solution-by-business-components)</br>\r\n&emsp;&emsp;[1.2 חלוקת הרכיבים ל3 שכבות, שמירה על שכבת הווב בגבולותיה `#strategic` `#updated`](#-12-layer-your-components-with-3-tiers-keep-the-web-layer-within-its-boundaries)</br>\r\n&emsp;&emsp;[1.3 עטפו כלים משותפים בחבילות, שקלו את הפצתם](#-13-wrap-common-utilities-as-packages-consider-publishing)</br>\r\n&emsp;&emsp;[1.4 השתמשו בקונפיגורציה עם משתני סביבה באופן מודע, מאובטח והיררכי `#updated`](#-14-use-environment-aware-secure-and-hierarchical-config)</br>\r\n&emsp;&emsp;[1.5 שקלו את כל ההשלכות בעת בחירת מסגרת `#new`](#-15-consider-all-the-consequences-when-choosing-the-main-framework)</br>\r\n&emsp;&emsp;[1.6 השתמשו ב-TypeScript במידתיות ובצורה מושכלת `#new`](#-16-use-typescript-sparingly-and-thoughtfully)</br>\r\n\r\n</details>\r\n\r\n<details>\r\n  <summary>\r\n    <a href=\"#2-error-handling-practices\">2. ניהול שגיאות (12)</a>\r\n  </summary>\r\n\r\n&emsp;&emsp;[2.1 השתמשו ב Async-Await או הבטחות לניהול שגיאות אסינכרוניות](#-21-use-async-await-or-promises-for-async-error-handling)</br>\r\n&emsp;&emsp;[2.2 הרחיבו את מבנה אוביקט השגיאה המובנה Error `#strategic` `#updated`](#-22-extend-the-built-in-error-object)</br>\r\n&emsp;&emsp;[2.3 הבחינו בין שגיאות קטסטרופליות לבין שגיאות תפעוליות `#strategic` `#updated`](#-23-distinguish-catastrophic-errors-from-operational-errors)</br>\r\n&emsp;&emsp;[2.4 נהלו את השגיאות במרוכז ולא באמצעות כלי ביניים `#strategic`](#-24-handle-errors-centrally-not-within-a-middleware)</br>\r\n&emsp;&emsp;[2.5 תעדו את שגיאות ה-API באמצעות OpenAPI או GraphQL](#-25-document-api-errors-using-openapi-or-graphql)</br>\r\n&emsp;&emsp;[2.6 הורידו את התהליך בצורה מסודרת כאשר זר בא לבקר `#strategic`](#-26-exit-the-process-gracefully-when-a-stranger-comes-to-town)</br>\r\n&emsp;&emsp;[2.7 השתמשו ב-Logger מוכר ואמין כדי להגדיל את הקְרִיאוּת של השגיאות `#updated`](#-27-use-a-mature-logger-to-increase-errors-visibility)</br>\r\n&emsp;&emsp;[2.8 בידקו את תגובת המערכת לשגיאות על ידי שימוש בכלי הבדיקות האהוב עליכם `#updated`](#-28-test-error-flows-using-your-favorite-test-framework)</br>\r\n&emsp;&emsp;[2.9 גלו שגיאות וזמני השבתה על ידי שימוש בכלי APM](#-29-discover-errors-and-downtime-using-apm-products)</br>\r\n&emsp;&emsp;[2.10 תפסו מקרים לא מטופלים של דחיות של הבטחות `#updated`](#-210-catch-unhandled-promise-rejections)</br>\r\n&emsp;&emsp;[2.11 היכשלו מהר, ודאו את משתני הקלט באמצעות ספריה יעודית](#-211-fail-fast-validate-arguments-using-a-dedicated-library)</br>\r\n&emsp;&emsp;[2.12 תמיד המתינו לתשובה מההבטחות לפני שאתם מעבירים את התשובה הלאה כדי להימנע ממעקב חלקי `#new`](#-212-always-await-promises-before-returning-to-avoid-a-partial-stacktrace)</br>\r\n\r\n</details>\r\n\r\n<details>\r\n  <summary>\r\n    <a href=\"#3-code-patterns-and-style-practices\">3. תבניות קוד וסגנון עיצוב (13)</a>\r\n  </summary>\r\n\r\n&emsp;&emsp;[3.1 השתמשו ב-ESLint `#strategic`](#-31-use-eslint)</br>\r\n&emsp;&emsp;[3.2 השתמשו בתוספים של Node.js שמרחיבים את ESLint `#updated`](#-32-use-nodejs-eslint-extension-plugins)</br>\r\n&emsp;&emsp;[3.3 התחילו בלוק של קוד עם סוגריים מסולסלים באותה השורה](#-33-start-a-codeblocks-curly-braces-on-the-same-line)</br>\r\n&emsp;&emsp;[3.4 הפרידו בין ההצהרות השונות בצורה תקנית](#-34-separate-your-statements-properly)</br>\r\n&emsp;&emsp;[3.5 תנו לפונקציה שם](#-35-name-your-functions)</br>\r\n&emsp;&emsp;[3.6 השתמשו במוסכמות קבועות במתן שמות למשתנים, לקבועים, לפונקציות ולמחלקות](#-36-use-naming-conventions-for-variables-constants-functions-and-classes)</br>\r\n&emsp;&emsp;[3.7 העדיפו const על פני let. ניטשו את var](#-37-prefer-const-over-let-ditch-the-var)</br>\r\n&emsp;&emsp;[3.8 טענו מודולים בתחילה, ולא בקריאה לפונקציות](#-38-require-modules-first-not-inside-functions)</br>\r\n&emsp;&emsp;[3.9 הגדירו כניסה מסודרת לספריה שלכם `#updated`](#-39-set-an-explicit-entry-point-to-a-modulefolder)</br>\r\n&emsp;&emsp;[3.10 השתמשו באופרטור `===`](#-310-use-the--operator)</br>\r\n&emsp;&emsp;[3.11 השתמשו ב-Async Await, המנעו מ-callbacks `#strategic`](#-311-use-async-await-avoid-callbacks)</br>\r\n&emsp;&emsp;[3.12 השתמשו בפונקציות חץ (=>)](#-312-use-arrow-function-expressions-)</br>\r\n&emsp;&emsp;[3.13 הימנעו מהשפעות צדדיות מחוץ לפונקציות `#new`](#-313-avoid-effects-outside-of-functions)</br>\r\n\r\n</details>\r\n\r\n<details>\r\n  <summary>\r\n    <a href=\"#4-testing-and-overall-quality-practices\">4. בדיקות ובקרת איכות (13)</a>\r\n  </summary>\r\n\r\n&emsp;&emsp;[4.1 לפחות, כיתבו בדיקות API לרכיבים השונים `#strategic`](#-41-at-the-very-least-write-api-component-testing)</br>\r\n&emsp;&emsp;[4.2 סווגו 3 חלקים במתן שם לכל בדיקה `#new`](#-42-include-3-parts-in-each-test-name)</br>\r\n&emsp;&emsp;[4.3 חלקו את הבדיקות לפי תבנית ה-AAA `#strategic`](#-43-structure-tests-by-the-aaa-pattern)</br>\r\n&emsp;&emsp;[4.4 וודאו כי גרסת ה-Node אחידה `#new`](#-44-ensure-node-version-is-unified)</br>\r\n&emsp;&emsp;[4.5 הימנעו מאתחול מידע גרעיני משותף, הגדירו לפי צורך של בדיקה `#strategic`](#-45-avoid-global-test-fixtures-and-seeds-add-data-per-test)</br>\r\n&emsp;&emsp;[4.6 תייגו את הבדיקות `#advanced`](#-46-tag-your-tests)</br>\r\n&emsp;&emsp;[4.7 בידקו את רמת כיסוי הבדיקות שלכם, זה יעזור לזהות דפוסי בדיקות שגויים](#-47-check-your-test-coverage-it-helps-to-identify-wrong-test-patterns)</br>\r\n&emsp;&emsp;[4.8 Use production-like environment for e2e testing](#-48-use-production-like-environment-for-e2e-testing)</br>\r\n&emsp;&emsp;[4.9 שכתבו את הקוד באופן קבוע בעזרת כלי ניתוח סטטי](#-49-refactor-regularly-using-static-analysis-tools)</br>\r\n&emsp;&emsp;[4.10 הדמיית תשובות של שרתי HTTP חיצוניים `#new` `#advanced`](#-410-mock-responses-of-external-http-services)</br>\r\n&emsp;&emsp;[4.11 בדקו את פונקציות הביניים בנפרד](#-411-test-your-middlewares-in-isolation)</br>\r\n&emsp;&emsp;[4.12 קבעו את הפורט בייצור, הגדירו אקראי לבדיקות `#new`](#-412-specify-a-port-in-production-randomize-in-testing)</br>\r\n&emsp;&emsp;[4.13 בידקו את חמשת התוצאות האפשריות `#strategic` `#new`](#-413-test-the-five-possible-outcomes)</br>\r\n\r\n</details>\r\n\r\n<details>\r\n  <summary>\r\n    <a href=\"#5-going-to-production-practices\">5. עלייה לאוויר (19)</a>\r\n  </summary>\r\n\r\n&emsp;&emsp;[5.1. ניטור `#strategic`](#-51-monitoring)</br>\r\n&emsp;&emsp;[5.2. הגדילו את יכולת הצפייה בעזרת לוגים איכותיים `#strategic`](#-52-increase-the-observability-using-smart-logging)</br>\r\n&emsp;&emsp;[5.3. האצילו כל מה שאפשר (לדוגמה gzip, SSL) לשירות נפרד `#strategic`](#-53-delegate-anything-possible-eg-gzip-ssl-to-a-reverse-proxy)</br>\r\n&emsp;&emsp;[5.4. קיבוע תלויות](#-54-lock-dependencies)</br>\r\n&emsp;&emsp;[5.5. הבטיחו את זמינות המערכת בעזרת הכלי המתאים](#-55-guard-process-uptime-using-the-right-tool)</br>\r\n&emsp;&emsp;[5.6. השתמשו בכל מעבדי ה-CPU](#-56-utilize-all-cpu-cores)</br>\r\n&emsp;&emsp;[5.7. תיצרו ‘maintenance endpoint’](#-57-create-a-maintenance-endpoint)</br>\r\n&emsp;&emsp;[5.8. גלו את הלא ידוע בעזרת מוצרי APM `#advanced` `#updated`](#-58-discover-the-unknowns-using-apm-products)</br>\r\n&emsp;&emsp;[5.9. כתבו את הקוד מותאם להתקנה](#-59-make-your-code-production-ready)</br>\r\n&emsp;&emsp;[5.10. מדדו ושימרו את ניצול הזיכרון `#advanced`](#-510-measure-and-guard-the-memory-usage)</br>\r\n&emsp;&emsp;[5.11. Get your frontend assets out of Node](#-511-get-your-frontend-assets-out-of-node)</br>\r\n&emsp;&emsp;[5.12. Strive to be stateless `#strategic`](#-512-strive-to-be-stateless)</br>\r\n&emsp;&emsp;[5.13. Use tools that automatically detect vulnerabilities](#-513-use-tools-that-automatically-detect-vulnerabilities)</br>\r\n&emsp;&emsp;[5.14. Assign a transaction id to each log statement `#advanced`](#-514-assign-a-transaction-id-to-each-log-statement)</br>\r\n&emsp;&emsp;[5.15. Set NODE_ENV=production](#-515-set-node_envproduction)</br>\r\n&emsp;&emsp;[5.16. Design automated, atomic and zero-downtime deployments `#advanced`](#-516-design-automated-atomic-and-zero-downtime-deployments)</br>\r\n&emsp;&emsp;[5.17. Use an LTS release of Node.js](#-517-use-an-lts-release-of-nodejs)</br>\r\n&emsp;&emsp;[5.18. Log to stdout, avoid specifying log destination within the app](#-518-log-to-stdout-avoid-specifying-log-destination-within-the-app)</br>\r\n&emsp;&emsp;[5.19. Install your packages with npm ci `#new`](#-519-install-your-packages-with-npm-ci)</br>\r\n\r\n</details>\r\n\r\n<details>\r\n  <summary>\r\n    <a href=\"#6-security-best-practices\">6. אבטחה (27)</a>\r\n  </summary>\r\n\r\n&emsp;&emsp;[6.1. Embrace linter security rules](#-61-embrace-linter-security-rules)</br>\r\n&emsp;&emsp;[6.2. Limit concurrent requests using a middleware](#-62-limit-concurrent-requests-using-a-middleware)</br>\r\n&emsp;&emsp;[6.3 Extract secrets from config files or use packages to encrypt them `#strategic`](#-63-extract-secrets-from-config-files-or-use-packages-to-encrypt-them)</br>\r\n&emsp;&emsp;[6.4. Prevent query injection vulnerabilities with ORM/ODM libraries `#strategic`](#-64-prevent-query-injection-vulnerabilities-with-ormodm-libraries)</br>\r\n&emsp;&emsp;[6.5. Collection of generic security best practices](#-65-collection-of-generic-security-best-practices)</br>\r\n&emsp;&emsp;[6.6. Adjust the HTTP response headers for enhanced security](#-66-adjust-the-http-response-headers-for-enhanced-security)</br>\r\n&emsp;&emsp;[6.7. Constantly and automatically inspect for vulnerable dependencies `#strategic`](#-67-constantly-and-automatically-inspect-for-vulnerable-dependencies)</br>\r\n&emsp;&emsp;[6.8. Protect Users' Passwords/Secrets using bcrypt or scrypt `#strategic`](#-68-protect-users-passwordssecrets-using-bcrypt-or-scrypt)</br>\r\n&emsp;&emsp;[6.9. Escape HTML, JS and CSS output](#-69-escape-html-js-and-css-output)</br>\r\n&emsp;&emsp;[6.10. Validate incoming JSON schemas `#strategic`](#-610-validate-incoming-json-schemas)</br>\r\n&emsp;&emsp;[6.11. Support blocklisting JWTs](#-611-support-blocklisting-jwts)</br>\r\n&emsp;&emsp;[6.12. Prevent brute-force attacks against authorization `#advanced`](#-612-prevent-brute-force-attacks-against-authorization)</br>\r\n&emsp;&emsp;[6.13. Run Node.js as non-root user](#-613-run-nodejs-as-non-root-user)</br>\r\n&emsp;&emsp;[6.14. Limit payload size using a reverse-proxy or a middleware](#-614-limit-payload-size-using-a-reverse-proxy-or-a-middleware)</br>\r\n&emsp;&emsp;[6.15. Avoid JavaScript eval statements](#-615-avoid-javascript-eval-statements)</br>\r\n&emsp;&emsp;[6.16. Prevent evil RegEx from overloading your single thread execution](#-616-prevent-evil-regex-from-overloading-your-single-thread-execution)</br>\r\n&emsp;&emsp;[6.17. Avoid module loading using a variable](#-617-avoid-module-loading-using-a-variable)</br>\r\n&emsp;&emsp;[6.18. Run unsafe code in a sandbox](#-618-run-unsafe-code-in-a-sandbox)</br>\r\n&emsp;&emsp;[6.19. Take extra care when working with child processes `#advanced`](#-619-take-extra-care-when-working-with-child-processes)</br>\r\n&emsp;&emsp;[6.20. Hide error details from clients](#-620-hide-error-details-from-clients)</br>\r\n&emsp;&emsp;[6.21. Configure 2FA for npm or Yarn `#strategic`](#-621-configure-2fa-for-npm-or-yarn)</br>\r\n&emsp;&emsp;[6.22. Modify session middleware settings](#-622-modify-session-middleware-settings)</br>\r\n&emsp;&emsp;[6.23. Avoid DOS attacks by explicitly setting when a process should crash `#advanced`](#-623-avoid-dos-attacks-by-explicitly-setting-when-a-process-should-crash)</br>\r\n&emsp;&emsp;[6.24. Prevent unsafe redirects](#-624-prevent-unsafe-redirects)</br>\r\n&emsp;&emsp;[6.25. Avoid publishing secrets to the npm registry](#-625-avoid-publishing-secrets-to-the-npm-registry)</br>\r\n&emsp;&emsp;[6.26. 6.26 Inspect for outdated packages](#-626-inspect-for-outdated-packages)</br>\r\n&emsp;&emsp;[6.27. Import built-in modules using the 'node:' protocol `#new`](#-627-import-built-in-modules-using-the-node-protocol)</br>\r\n\r\n</details>\r\n\r\n<details>\r\n  <summary>\r\n    <a href=\"#7-draft-performance-best-practices\">7. ביצועים (2) (בתהליך ✍️)</a>\r\n  </summary>\r\n\r\n&emsp;&emsp;[7.1. Don't block the event loop](#-71-dont-block-the-event-loop)</br>\r\n&emsp;&emsp;[7.2. Prefer native JS methods over user-land utils like Lodash](#-72-prefer-native-js-methods-over-user-land-utils-like-lodash)</br>\r\n\r\n</details>\r\n\r\n<details>\r\n  <summary>\r\n    <a href=\"#8-docker-best-practices\">8. דוקר (15)</a>\r\n  </summary>\r\n\r\n&emsp;&emsp;[8.1 Use multi-stage builds for leaner and more secure Docker images `#strategic`](#-81-use-multi-stage-builds-for-leaner-and-more-secure-docker-images)</br>\r\n&emsp;&emsp;[8.2. Bootstrap using node command, avoid npm start](#-82-bootstrap-using-node-command-avoid-npm-start)</br>\r\n&emsp;&emsp;[8.3. Let the Docker runtime handle replication and uptime `#strategic`](#-83-let-the-docker-runtime-handle-replication-and-uptime)</br>\r\n&emsp;&emsp;[8.4. Use .dockerignore to prevent leaking secrets](#-84-use-dockerignore-to-prevent-leaking-secrets)</br>\r\n&emsp;&emsp;[8.5. Clean-up dependencies before production](#-85-clean-up-dependencies-before-production)</br>\r\n&emsp;&emsp;[8.6. Shutdown smartly and gracefully `#advanced`](#-86-shutdown-smartly-and-gracefully)</br>\r\n&emsp;&emsp;[8.7. Set memory limits using both Docker and v8 `#advanced` `#strategic`](#-87-set-memory-limits-using-both-docker-and-v8)</br>\r\n&emsp;&emsp;[8.8. Plan for efficient caching](#-88-plan-for-efficient-caching)</br>\r\n&emsp;&emsp;[8.9. Use explicit image reference, avoid latest tag](#-89-use-explicit-image-reference-avoid-latest-tag)</br>\r\n&emsp;&emsp;[8.10. Prefer smaller Docker base images](#-810-prefer-smaller-docker-base-images)</br>\r\n&emsp;&emsp;[8.11. Clean-out build-time secrets, avoid secrets in args `#strategic #new`](#-811-clean-out-build-time-secrets-avoid-secrets-in-args)</br>\r\n&emsp;&emsp;[8.12. Scan images for multi layers of vulnerabilities `#advanced`](#-812-scan-images-for-multi-layers-of-vulnerabilities)</br>\r\n&emsp;&emsp;[8.13 Clean NODE_MODULE cache](#-813-clean-node_module-cache)</br>\r\n&emsp;&emsp;[8.14. Generic Docker practices](#-814-generic-docker-practices)</br>\r\n&emsp;&emsp;[8.15. Lint your Dockerfile `#new`](#-815-lint-your-dockerfile)</br>\r\n\r\n</details>\r\n\r\n<br/><br/>\r\n\r\n# `1. מבנה הפרוייקט`\r\n\r\n## ![✔] 1.1 בנו את הפרוייקט לפי רכיבים עסקיים\r\n\r\n**אמ;לק:** בסיס המערכת צריך לכלול תיקיות או מאגרים שמייצג בצורה הגיונית את המידול העסקי. כל רכיב מייצג תחום מוצר (כלומר הקשר מוגבל), למשל 'משתמשים', 'הזמנות', וכולי... כל רכיב מכיל את ה API, לוגיקה ומסד הנתונים שלו. מה המטרה של זה? כאשר יש סביבה עצמאית כל שינוי משפיע אך ורק על החלק הרלוונטי - העומס הנפשי, סיבוכיות הפיתוח והחשש מפריסה חדשה של הרכיב הרבה יותר קטן. כתוצאה מכך, מתכנתים יכולים לפתח הרבה יותר מהר. זה לא דורש בהכרח הפרדה פיזית ויכול להיות מושג גם בMonorepo או multi-repo.\r\n\r\n```bash\r\nmy-system\r\n├─ apps (components)\r\n│  ├─ orders\r\n│  ├─ users\r\n│  ├─ payments\r\n├─ libraries (generic cross-component functionality)\r\n│  ├─ logger\r\n│  ├─ authenticator\r\n```\r\n\r\n**אחרת:** כאשר מוצרים של מודולים או נושאים שונים מעורבבים יחד, ישנו סיכוי גבוה שתיווצר מערכת ספגטי בעלת צימוד גבוה. לדוגמה, בארכיטקטורה שבה 'מודול א`' קורא לשירות מ'מודול ב;', אין הפרדה ברורהבין המודולים השונים - כל שינוי בקוד עלול להשפיע על משהו אחר. עם הגישה הזאת , מתכנתים שצריכים להוסיף מוצר חדש למערכת יאבקו בה בהבנה על מה השינוי שלהם יכול להשפיע. כתוצאה מכך, הם חששו לשבור מודולים אחרים, וכל פריסה נהייתה איטית יותר ומסוכנת יותר.\r\n\r\n🔗 [**לקריאה נוספת: בנייה לפי רכיבים**](./sections/projectstructre/breakintcomponents.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 1.2 חלוקת הרכיבים ל3 שכבות, שמירה על שכבת הווב בגבולותיה\r\n\r\n**אמ;לק:** כל רכיב צריך לכלול 'שכבות' - תיקייה יעודית עם אחריות משותפת: 'entry-point' איפה שחלקי השליטה נמצאים, 'domain' איפה שהלוגיקה נמצאת ו 'data-access'. העיקרון המנחה של הארכיטקטורות המובילות בשוק הוא להפריד את האחריות הטכנית (למשל: HTTP, DB ועוד) מהלוגיקה היעודית של המוצר כך שהמתכנתים יוכלו לקודד יותר תכולות בלי לדאוג לגבי ניהול תשתיות. השמה של כל שכבה בתיקייה יעודית, שידועה גם כ-[מודל 3 השכבות](https://he.wikipedia.org/wiki/%D7%90%D7%A8%D7%9B%D7%99%D7%98%D7%A7%D7%98%D7%95%D7%A8%D7%94_%D7%A8%D7%91-%D7%A9%D7%9B%D7%91%D7%AA%D7%99%D7%AA#%D7%90%D7%A8%D7%9B%D7%99%D7%98%D7%A7%D7%98%D7%95%D7%A8%D7%AA_%D7%A9%D7%9C%D7%95%D7%A9_%D7%A9%D7%9B%D7%91%D7%95%D7%AA) ([באנגלית](https://en.wikipedia.org/wiki/Multitier_architecture#Three-tier_architecture)) זאת הדרך _הפשוטה_ להשיג את המטרה.\r\n\r\n```bash\r\nmy-system\r\n├─ apps (components)\r\n│  ├─ component-a\r\n   │  ├─ entry-points\r\n   │  │  ├─ api # controller comes here\r\n   │  │  ├─ message-queue # message consumer comes here\r\n   │  ├─ domain # features and flows: DTO, services, logic\r\n   │  ├─ data-access # DB calls w/o ORM\r\n```\r\n\r\n**אחרת:** לעתים דחופות נתקלים בכך שהמתכנתים מעבירים אובייקטי תקשורת כדוגמת request/reqponse לפונקציות בשכבות של הלוגיקה או ניהול המידע - דבר זה פוגע בעיקרון ההפרדה וגורם לכך שבעתיד יהיה קשה יותר להנגיש את הלוגיקה לסוגי קלינטים אחרים כדוגמת: בדיקות יחידה, משימות מתוזמנות וmessage queues.\r\n\r\n🔗 [**לקריאה נוספת: חלק את המוצר לשכבות**](./sections/projectstructre/createlayers.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 1.3 עטפו כלים משותפים בחבילות, שקלו את הפצתם\r\n\r\n**אמ;לק:** מקמו את כל הכלים שאפשר לשתף אותם בתיקייה ייעודית, למשל 'libraries' וכל כלי בתיקייה פנימית נפרדת, למשל '/libraries/logger'. הפכו את הכלי לחבילה בלתי תלויה עם קובץ ה package.json שלו וזאת כדי להגדיל את הכימוס (encapsulation), ואפשרו הפצה עתידית למאגר. כאשר הפרוייקט שלכם בנוי בתצורת monorepo, כלים אלו יכולים להיות מוגדרים על ידי שימוש ב 'npm linking' לכתובת הפיזית שלהם על ידי שימוש ב ts-paths או על ידי הפצה והתקנה על ידימנהל חבילות כדוגמת 'npm registry'.\r\n\r\n```bash\r\nmy-system\r\n├─ apps (components)\r\n  │  ├─ component-a\r\n├─ libraries (generic cross-component functionality)\r\n│  ├─ logger\r\n│  │  ├─ package.json\r\n│  │  ├─ src\r\n│  │  │ ├─ index.js\r\n\r\n```\r\n\r\n**אחרת:** צרכנים של כלי יהיו צמודים לפונקציונליות הפנימית שלו. על ידי הגדרה של package.json בשורש הכלי מישהו יכול להגדיר קובץ package.json.main או package.json.exports כדי להצהיר במפורש אילו קבצים ופונקציולניות היא חלק מהחלקים הנגישים של הכלי.\r\n\r\n🔗 [**לקריאה נוספת: בנייה לפי תכונה**](./sections/projectstructre/wraputilities.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 1.4 השתמשו בקונפיגורציה עם משתני סביבה באופן מודע, מאובטח והיררכי\r\n\r\n**אמ;לק:** הגדרת סביבה מושלמת צריכה להבטיח כי (א) שמות משתנים יכולים להיקרא מקבצים כמו גם ממשתני סביבה (ב) סודות נשמרים מחוץ לקוד ששייך למאגר (ג) הקונפיגורציה היא היררכית לצורך חיפוש קל יותר (ד) תמיכה בסוגים שונים של משתנים (ה) וידוא מוקדם של משתנים לא תקינים (ו) הגדרת ברירת מחדל לכל שדה. ישנן מספר ספריות שעונות על רוב הדרישות הללו כמו [convict](https://www.npmjs.com/package/convict), [env-var](env-var), [zod](https://github.com/colinhacks/zod), ועוד...\r\n\r\n**אחרת:** נניח וישנו משתנה סביבה הכרחי שלא הוגדר, המערכת תתחיל לרוץ בהצלחה, תענה לבקשות, חלק מהמידע יעודכן במסד הנתונים, ולפתע יהיה חסר לה שדה הכרחי להמשך התהליך ושבלעדיו היא לא יכולה לסיים את הפעולה, מה שייצור מערכת במצב \"מלוכלך\".\r\n\r\n🔗 [**לקריאה נוספת: שיטות עבודה של קונפיגורציה**](./sections/projectstructre/configguide.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 1.5 שקלו את כל ההשלכות בעת בחירת <abbr title=\"framework\">מסגרת</abbr>\r\n\r\n**אמ;לק:** כאשר בונים אפליקציות ו API-ים, שימוש בפריימוורק הוא חובה. קל להתעלם מהאפשרויות השונות שקיימות ומשיקולים חשובים ובסופו של דבר להשתמש באפשרות שפחות תואמת לדרישות של המוצר. נכון ל2023/2024 אנו מאמינים כי ארבעת הפריימוורקים הללו הם הכדאיים ביותר להשוואה: [Nest.js](https://nestjs.com/), [Fastify](https://www.fastify.io/), [express](https://expressjs.com/), ו [Koa](https://koajs.com/). לחצו על לקריאה נוספת בהמשך כדי לקרוא פרטים נוספים בעד ונגד כל אחת מהאפשרויות.  באופן פשטני, אנו מאמינים כי Node.js זאת ההתאמה הכי טובה לצוותים שרוצים לעבוד בשיטת OOP או לבנות מוצרים שמיועדים לגדול בצורה ניכרת ואי אפשר לחלק אותם לרכיבים קטנים _ועצמאיים_. ההמלצה שלנו היא Fastify עבור מערכות בגודל סבירents (כמו Microservices) שמושתתים על עקרונות פשוטים של Node.js.\r\n\r\n**אחרת:** בשל הכמות העצומה של השיקולים, קל לקבל החלטה על בסיס מידע חלקי ולהשוות תפוחים לתפוזים. למשל, ישנה הנחה רווחת שFastify הוא web-server מינימלי שראוי להשוות לexpress בלבד. בפועל, זהו פריימוורק עשיר עם הרבה הרחבות רשמיות שמכסות הרבה צרכים.\r\n\r\n🔗 [**לקריאה נוספת: בחירת הפריימוורק הנכון**](./sections/projectstructre/choose-framework.md)\r\n\r\n## ![✔] 1.6 השתמשו ב-TypeScript במידתיות ובצורה מושכלת\r\n\r\n**אמ;לק:** קידוד ללא מקדמי בטיחות של סיווג משתנים הוא כבר לא אפשרות בת קיימא, TypeScript מהווה את האפשרות הפופולרית ביותר למשימה זו. משתמשים בה להגדרת סוגי משתנים וערכי החזרה של פונקציות. עם זאת, זוהי חרב פיפיות שיכולה בקלות ליצור מורכבות בשל בסביבות 50 מילות מפתח נוספות שיש לה ותכונות מתוחכמות שצריך לדעת להשתמש בהן. שימוש בה צריך להיעשות במידה, בעדיפות להגדרות פשוטות של משתנים, ושימוש ביכולות מתקדמות רק כאשר צורך הכרחי מופיע.\r\n\r\n**אחרת:** [מחקרים](https://earlbarr.com/publications/typestudy.pdf) מראים כי שימוש ב-TypeScript יכול לעזור בזיהוי כ20% מהבאגים בשלבים מוקדמים יותר. ללא TypeScript חווית הפיתוח ב IDE נהיית בלתי נסבלת. מהצד השני, 80% מהבאגים היא לא עוזרת לזהות. כתוצאה מכך, שימוש בTypeScript מוסיף ערך מוגבל. רק הוספה של בדיקות איכותיות יכולה לעזור לזהות את מגוון הבאגים הרחב, כולל כאלו שנגרמים מאפיון לא תקין של סוג המשתנה. שימוש לא טוב גם עלול להרוג את המטרה, תכונות מורכבות של קוד מעלות אתמורכבות הקוד מה שבאופן ישיר מעלה את מספר הבאגים וזמן התיקון של כל באג.\r\n\r\n🔗 [**לקריאה נוספת: שיקולים לשימוש ב-TypeScript**](./sections/projectstructre/typescript-considerations.md)\r\n\r\n<br/><br/><br/>\r\n\r\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ חזרה למעלה</a></p>\r\n\r\n# `2. ניהול שגיאות`\r\n\r\n## ![✔] 2.1 השתמשו ב Async-Await או <abbr title=\"promises\">הבטחות</abbr> לניהול שגיאות אסינכרוניות\r\n\r\n**אמ;לק:** ניהול שגיאות אסינכרוניות על ידי שימוש ב-callbacks זו הדרך המהירה לגהינום (הידועה בשם [פירמידת דום](https://en.wikipedia.org/wiki/Pyramid_of_doom_(programming))). המתנה הטובה ביותר שאפשר לתת לקוד הוא שימוש ב-promises בסגנון async-await דבר שמאפשר קוד הרבה יותר נקי ומסודר וסינטקס דומה ל try-catch.\r\n\r\n**אחרת:** סגנון הכתיבה `function(err, response)` הכולל שימוש ב-callbacks של Node.js, סולל דרך בטוחה לקוד שאי אפשר לתחזק בשל הערבוב בין ניהול שגיאות לניהול התהליך התקני של המערכת, עם קינון מוגזם וסגנון קוד מוזר.\r\n\r\n🔗 [**לקריאה נוספת: הימנעות מ-callbacks**](./sections/errorhandling/asyncerrorhandling.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 2.2 הרחיבו את מבנה אוביקט השגיאה המובנה `Error`\r\n\r\n**אמ;לק:** ישנן ספריות שזורקות שגיאה כמחרוזת או כאובייקט פרי מחשבת כותבי הקוד של הספריה - דבר שיוצר מורכבות בניהול השגיאות וביצירת מכנה משותף בין מודולים שונים. במקום זאת, השקיעו ביצירת אובייקט או מחלקת (class) שגיאה שיורשת מאובייקט השגיאה המובנה של השפה והשתמשו בזה בכל פעם שצריך לדחות את המצב, לזרוק שגיאה או להפיץ שגיאה. השגיאה האפליקטיבית צריכה להוסיף שדות נוספים כדוגמת שם השגיאה ורמת החומרה שלה. על ידי כך, לכל השגיאות ישנו מבנה אחיד והן מאפשרות תמיכה טובה יותר בניהול שגיאות. ישנו כלל של `no-throw-literal` ESLint שבודק בצורה מיטבית את השימוש הזה (על אף שיש לזה קצת [מגבלות](https://eslint.org/docs/rules/no-throw-literal) שיכולות להסתדר על ידי שימוש ב-TypeScript והגדרת החוק `@typescript-eslint/no-throw-literal`)\r\n\r\n**אחרת:** כאשר מפעילים רכיב כלשהו, אם ישנה אי וודאות איזה סוג של שגיאה יגיע - זה גורם לכך שניהול השגיאות יהיה הרבה יותר מורכב. גרוע מכך, שימוש באובייקטים מומצאים לתיאור שגיאות עלול להוביל לאיבוד של שגיאות קריטיות בעלות מידע חשוב כמו מעקב אחר מקור השגיאה!\r\n\r\n🔗 [**לקריאה נוספת: שימוש באובייקט השגיאה המובנה**](./sections/errorhandling/useonlythebuiltinerror.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 2.3 הבחינו בין שגיאות קטסטרופליות לבין שגיאות תפעוליות\r\n\r\n**אמ;לק:** שגיאות תפעוליות (למשל קלט לא תקין בפנייה ל-API) מתייחסות למקרים ידועים בהם ההשפעה של השגיאה מובנת לחלוטין ויכולה להיות מנוהלת בצורה מחושבת. מצד שני, שגיאות קטסטרופליות (ידועות גם כשגיאות תכנות) מתייחסות לשגיאות לא צפויות במערכת שדורשות אתחול בטוח שלה.\r\n\r\n**אחרת:** אתם עלולים לאתחל את המערכת בעקבות כל שגיאה. אבל למה לגרום לכ-5000 משתמשים לחוות התנתקות בגלל שגיאה תפעולית צפויה ושולית? ההיפך הוא גם לא אידיאלי - להשאיר את המערכת עובדת כאשר קטסטרופה לא צפויה קרתה בה והיא עלולה לגרור התנהגות בלתי צפויה. הבדלה בין שני המקרים מאפשרת התמודדות מושכלת ומאוזנת בהתאם להקשר.\r\n\r\n🔗 [**לקריאה נוספת: שגיאות תפעוליות מול שגיאות תכנות**](./sections/errorhandling/operationalvsprogrammererror.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 2.4 נהלו את השגיאות במרוכז ולא באמצעות <abbr title=\"muddlewares\">כלי ביניים</abbr>\r\n\r\n**אמ;לק:** מימוש הניהול של השגיאות כמו למשל תעוד השגיאה, החלטה אם לקרוס ואילו מדדים לנטר צריך להיות מרוכז במקום אחד שכל הכניסות למערכת (למשל APIs, cron jobs, scheduled jobs) משתמשות בו כאשר חלה בהן שגיאה.\r\n\r\n**אחרת:** אם לא מנהלים את השגיאות במקום אחד אז במהרה יהיה שכפול קוד וכנראה ניהול לא תקין של חלק מהשגיאות.\r\n\r\n🔗 [**לקריאה נוספת: ניהול השגיאות במקום מרוכז**](./sections/errorhandling/centralizedhandling.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 2.5 תעדו את שגיאות ה-API באמצעות OpenAPI או GraphQL\r\n\r\n**אמ;לק:** אפשרו למשתמשי ה-API שלכם לדעת אילו שגיאות עלולות להגיע כתשובה, כך שהם יוכלו להתמודד איתן בצורה מושכלת במקום לקרוס. ל-API מבוסס REST זה נעשה בדרך כלל באמצעות כלי תעוד כמו OpenAPI. אם אתם משתמשים ב-GraphQL, אתם יכולים להשתמש בסכמה ובהערות בשביל להשיג את המטרה.\r\n\r\n**אחרת:** מי שמשתמש ב-API שלנו עלול להחליט לגרום למערכת שלו לקרוס ולאתחל את עצמה רק בגלל שהוא קיבל שגיאה שהוא לא הצליח להבין. שימו לב: המשתמש של ה-API שלכם יכול להיות אתם (מה שקורה הרבה כשמשתמשים במיקרוסרוויסים).\r\n\r\n🔗 [**לקריאה נוספת: תיעוד שגיאות ה-API באמצעות OpenAPI או GraphQL**](./sections/errorhandling/documentingusingswagger.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 2.6 הורידו את התהליך בצורה מסודרת כאשר זר בא לבקר\r\n\r\n**אמ;לק:** כאשר שגיאה לא ידועה חלה (שגיאה קטסטרופלית, ראו תובנה 2.3) - ישנה חוסר ודאות לגבי הבריאות והיציבות של המערכת. במקרה כזה, אין דרך לברוח מלגרום לשגיאה להיות ברת צפייה, סגירת חיבוריות לרכיבים נוספים והורדה של התהליך. כל סביבת ריצה מהימנה כדוגמת שירותי Docker או שירותי ענן שמספקים פתרונות ללא שרת (serverless) יוודאו שהתהליך יעלה מחדש עבורכם.\r\n\r\n**אחרת:** כאשר שגיאה לא צפויה קורית, רכיב כלשהו עלול להיות במצב לא תקין (למשל event emitter גלובאלי שמפסיק להפיץ אירועים בשל כשלון פנימי) והחל מעכשיו שאר הבקשות שמשתמשות ברכיב זה עלולות להיכשל או להתנהג באופן ממש לא צפוי.\r\n\r\n🔗 [**לקריאה נוספת: הורדת התהליך**](./sections/errorhandling/shuttingtheprocess.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 2.7 השתמשו ב-Logger מוכר ואמין כדי להגדיל את הקְרִיאוּת של השגיאות\r\n\r\n**אמ;לק:** כלי לוגים איכותי כדוגמת [Pino](https://github.com/pinojs/pino) או [Winston](https://github.com/winstonjs/winston) מגדיל את הקריאות וההבנה של הלוגים על ידי שימוש ברמת חומרה, עימוד, עיצוב, צבעים ועוד. ל-`console.log` אין את היכולות הללו וראוי להימנע משימוש בו. העיפרון החד ביותר בתחום מאפשר הוספה של שדות שימושיים נוספים ללא תקורה גבוהה של ביצועים. מפתחים צריכים לכתוב את הלוגים ל-`stdout` ולתת לתשתית להעביר את המידע לכלי המתאים עבור כל מקרה.\r\n\r\n**אחרת:** רפרוף על שורות console.log או בצורה ידנית על קבצי טקסט עמוסים לעייפה ללא כלי חיפוש ותצוגה מותאמים עלולים להשאיר אתכם לעבוד עד השעות הקטנות של הלילה.\r\n\r\n🔗 [**לקריאה נוספת: שימוש ב-Logger אמין**](./sections/errorhandling/usematurelogger.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 2.8 בידקו את תגובת המערכת לשגיאות על ידי שימוש בכלי הבדיקות האהוב עליכם\r\n\r\n**אמ;לק:** בין אם יש לכם כלי QA אוטומטי ומקצועי ובין אם אחד המפתחים מבצע את הבדיקות - ודאו כי לא רק המסלול הבטוח של הקוד מכוסה, אלא גם ניהול השגיאות ושחוזרות השגיאות שאמורות לחזור במקרה של תקלה. נוסף על כך, בידקו מקרים מורכבים יותר של שגיאות, כמו למשל שגיאות בלתי צפויות, כדי לוודא שהרכיב שמטפל בשגיאות מבצע זאת כראוי (ראו דוגמאות קוד בקישור \"לקריאה נוספת\")\r\n\r\n**אחרת:** ללא בדיקות כלל, לא ידניות ולא אוטומטיות, לא תוכלו לסמוך על הקוד שלכם שיחזיר את השגיאה הנכונה. ללא שגיאות משמעותיות לא תוכלו לטפל בשגיאות.\r\n\r\n🔗 [**לקריאה נוספת: בדיקת התנהגות בעת שגיאה**](./sections/errorhandling/testingerrorflows.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 2.9 גלו שגיאות וזמני השבתה על ידי שימוש בכלי APM\r\n\r\n**אמ;לק:** כלי ניטור ובדיקת ביצועים (מוכרים כ-APM) מודדים באופן יזום את הקוד או ה-API כך שבאופן קסום הם מציגים שגיאות, התרסקויות וחלקים שעובדים לאט מהצפוי ואתם לא שמים לב אליהם.\r\n\r\n**אחרת:** אתם עלולים להתאמץ רבות במדידה של בעיות ביצועים וזמני השבתה של המערכת, כנראה שלעולם לא תהיו מודעים לאיזה חלקים במערכת הם האיטיים ביותר ואיך זה משפיע על חווית המשתמש.\r\n\r\n🔗 [**לקריאה נוספת: שימוש ב-APM**](./sections/errorhandling/apmproducts.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 2.10 תפסו מקרים לא מטופלים של <abbr title=\"promises rejections\">דחיות של הבטחות</abbr>\r\n\r\n**אמ;לק:** כל שגיאה או דחייה שחוזרת מהבטחה תיבלע, אלא אם כן בשלב הפיתוח יטפלו בה כמו שצריך. אפילו אם יש בקוד האזנה ל `process.uncaughtException`! כדי להתגבר על זה צריך להאזין גם ל `process.unhandledRejection`.\r\n\r\n**אחרת:** השגיאות במערכת יבלעו ויעלמו ללא עקבות. לא משהו שצריך לדאוג ממנו...\r\n\r\n🔗 [**לקריאה נוספת: תפיסה של דחיות של הבטחות**](./sections/errorhandling/catchunhandledpromiserejection.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 2.11 היכשלו מהר, ודאו את משתני הקלט באמצעות ספריה יעודית\r\n\r\n**אמ;לק:** הגדירו תבנית קלט קשיחה ל-API כדי להימנע מבאגים מלוכלכים שקשה הרבה יותר לעקוב אחריהם. כתיבת קוד האימות הוא תהליך מייגע, אלא אם כן תשתמשו באחת הספריות המוכרות כיום כמו [ajv](https://www.npmjs.com/package/ajv), [zod](https://github.com/colinhacks/zod), או [typebox](https://github.com/sinclairzx81/typebox).\r\n\r\n**אחרת:** חשבו על זה - הפונקציה שלכם מצפה לקבל כקלט משתנה `discount` מספרי שמי שקרה לפונקציה שכח להעביר. בהמשך, הקוד בודק אם `discount != 0` (כמות ההנחה שאפשר לקבל גדולה מאפס), ואם כן אז המשתמש יהנה מההנחה. וואו, זה באג מלוכלך, ראיתם???\r\n\r\n🔗 [**לקריאה נוספת: כשלון מהיר**](./sections/errorhandling/failfast.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 2.12 תמיד המתינו לתשובה מההבטחות לפני שאתם מעבירים את התשובה הלאה כדי להימנע ממעקב חלקי\r\n\r\n**אמ;לק:** תמיד כתבו `return await` כאשר מחזירים תוצאה של הבטחה וזאת כדי להשיג ערך מלא של מעקב אחר מקור השגיאה (stacktrace). אם פונקציה מחזירה הבטחה היא חייבת להיות מוגדרת כפונקציה אסינכרונית ובמפורש לחכות להבטחה שהיא מחזירה.\r\n\r\n```js\r\nasync function promisifyFunction() {\r\n  // some logic\r\n  return await new Promise(...);\r\n}\r\n```\r\n\r\n**אחרת:** הפונקציה שמחזירה הבטחה ללא המתנה לא תופיע בנתיב המעקב אחרי השגיאה (stacktrace). חוסרים כאלו עלולים לסבך את ההבנה של זרימת המערכת שגרמה לשגיאה, במיוחד אם הגורם להתנהגות הלא צפויה קרה בפונקציה החסרה.\r\n\r\n🔗 [**לקריאה נוספת: החזרת הבטחות**](./sections/errorhandling/returningpromises.md)\r\n\r\n<br/><br/><br/>\r\n\r\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ חזרה למעלה</a></p>\r\n\r\n# `3. תבניות קוד וסגנון עיצוב`\r\n\r\n## ![✔] 3.1 השתמשו ב-ESLint\r\n\r\n**אמ;לק:** [ESLint](https://eslint.org) הוא הסטנדרט דה-פקטו למציאת שגיאות בקוד ותיקון של סגנונות קוד, לא רק זיהוי של רווח סורר שעלול ליצור תקלה אלא גם זיהוי של קוד שלא עומד בסטנדרטים (anti-pattern) כמו זריקת שגיאות ללא סיווג. אמנם ESLint יכול לתקן באופן אוטומטי סגנונות קוד, אך כלים אחרים כדוגמת [prettier](https://www.npmjs.com/package/prettier) טובים יותר בעיצוב וסגנון הקוד ועובדים בשילוב עם ESLint.\r\n\r\n**אחרת:** מפתחים ישתעממו תוך כדי השקעת זמנם במציאת רווחים סוררים וידאגו לאורך השורה והזמן היקר שלהם יבוזבז על איך לשמור על סגנון הקוד של הפרוייקט.\r\n\r\n🔗 [**לקריאה נוספת: שימוש ב-ESLint ו-Prettier**](./sections/codestylepractices/eslint_prettier.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 3.2 השתמשו בתוספים של Node.js שמרחיבים את ESLint\r\n\r\n**אמ;לק:** על גבי הסטנדרט של חוקי ESLint שמכסים את שפת JavaScript, הוסיפו את התוספים היעודיים של  Node.js כמו [eslint-plugin-node](https://www.npmjs.com/package/eslint-plugin-node), [eslint-plugin-mocha](https://www.npmjs.com/package/eslint-plugin-mocha), [eslint-plugin-node-security](https://www.npmjs.com/package/eslint-plugin-security), [eslint-plugin-require](https://www.npmjs.com/package/eslint-plugin-require), [eslint-plugin-jest](https://www.npmjs.com/package/eslint-plugin-jest) ועוד תוספים שמממשים חוקים נוספים ומועילים.\r\n\r\n**אחרת:** הרבה תבניות קוד לא תקינות שבשימוש ב-Node.js נעלמות מתחת לרדאד. לדוגמה, מפתחים יכתבו `require(variableAsPath)` עם משתנה שמאפשר גישה לתיקיה בקוד, דבר שמאפשר לתוקפים להריץ כל קוד JS. אם תשתמשו בחוקי Node.js תוכלו לזהות את הטעות הזאת ולקבל עליה התראה מבעוד מועד.\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 3.3 התחילו בלוק של קוד עם סוגריים מסולסלים באותה השורה\r\n\r\n**אמ;לק:** מומלץ שהסוגריים המסולסלים הפותחים של בלוק של קוד יהיו באותה השורה יחד עם הקוד.\r\n\r\n### דוגמה\r\n\r\n```javascript\r\n// Do\r\nfunction someFunction() {\r\n  // code block\r\n}\r\n\r\n// Avoid\r\nfunction someFunction()\r\n{\r\n  // code block\r\n}\r\n```\r\n\r\n**אחרת:** התעלמות משיטת עבודה זו עלולה להוביל לתוצאות לא צפויות, כמו שניתן לראות בשרשור בקישור מ StackOverflow:\r\n\r\n🔗 [**לקריאה נוספת:** \"למה התוצאות משתנות בהתאם למיקום הסוגר המסולסל?\" (StackOverflow)](https://stackoverflow.com/questions/3641519/why-does-a-results-vary-based-on-curly-brace-placement)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 3.4 הפרידו בין ההצהרות השונות בצורה תקנית\r\n\r\nבין אם אתם משתמשים בנקודה-פסיק (;) בשביל להפריד בין ההצהרות על המשתנים ובין אם לא, עצם הידיעה על ההשלכות של ירידת שורה במקום הלא מתאים או של הוספה אוטומטית של נקודה-פסיק, יעזרו לכם לזהות שגיאות סינטקס רגילות.\r\n\r\n**אמ;לק:** שימוש ב-ESLint כדי להעלות את המודעות לגבי הסיכון הכרוך בזה. כלים כמו [Prettier](https://prettier.io/) או [Standardjs](https://standardjs.com/) יכולים באופן אוטומטי לפתור את הבעיות הללו.\r\n\r\n**אחרת:** כמו שראינו בסעיף הקודם, \"המתורגמן\" (interpreter) של JavaScript מוסיף אוטומטית נקודה-פסיק בסוף כל הצהרה במידה ואין, או שהוא מחליט כי ההצהרה מסתיימת במקום אחר מהמתוכנן על ידינו, דבר שעלול להוביל לתוצאות בלתי צפויות. אפשר להשתמש בהשמות ולהימנע מ [IIFE](https://developer.mozilla.org/en-US/docs/Glossary/IIFE) כדי להימנע מרוב ההתנהגויות הבלתי צפויות.\r\n\r\n### דוגמה\r\n\r\n```javascript\r\n// Do\r\nfunction doThing() {\r\n    // ...\r\n}\r\n\r\ndoThing()\r\n\r\n// Do\r\n\r\nconst items = [1, 2, 3]\r\nitems.forEach(console.log)\r\n\r\n// Avoid — throws exception\r\nconst m = new Map()\r\nconst a = [1,2,3]\r\n[...m.values()].forEach(console.log)\r\n> [...m.values()].forEach(console.log)\r\n>  ^^^\r\n> SyntaxError: Unexpected token ...\r\n\r\n// Avoid — throws exception\r\nconst count = 2 // it tries to run 2(), but 2 is not a function\r\n(function doSomething() {\r\n  // do something amazing\r\n}())\r\n// put a semicolon before the immediate invoked function, after the const definition, save the return value of the anonymous function to a variable or avoid IIFEs altogether\r\n```\r\n\r\n🔗 [**לקריאה נוספת:** \"Semi ESLint rule\"](https://eslint.org/docs/rules/semi)\r\n<br>\r\n🔗 [**לקריאה נוספת:** \"No unexpected multiline ESLint rule\"](https://eslint.org/docs/rules/no-unexpected-multiline)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 3.5 תנו לפונקציה שם\r\n\r\n**אמ;לק:** תנו שמות לכל הפונקציות, כולל closures ו-callbacks. הימנעו מפונקציות אנונימיות. זה מאוד שימושי כשבודקים אפליקציות Node.js. מתן שמות לכל הפונקציות יאפשר לכם להבין בקלות על מה אתם מסתכלים כשאתם צופים בתמונת מצב של הזיכרון של האפליקציה.\r\n\r\n**אחרת:** לדבג את גרסת היצור (production) על בסיס תמונת מצב של הזיכרון (core dump) עלול להיות מאתגר כשהבעיות של הזיכרון קורות בכל מיני פונקציות אנונימיות.\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 3.6 השתמשו במוסכמות קבועות במתן שמות למשתנים, לקבועים, לפונקציות ולמחלקות\r\n\r\n**אמ;לק:** השתמשו ב-**_lowerCamelCase_** כאשר אתם נותנים שמות לקבועים, משתנים ופונקציות, **_UpperCamelCase_** (גם האות הראשונה גדולה) כאשר אתם נותנים שמות למחלקות ו-**_UPPER_SNAKE_CASE_**  כאשר אתם נותנים שמות למשתנים גלובליים או סטטיים. סדר זה יאפשר לכם להבחין בקלות בין משתנים רגילים ופונקציות לבין מחלקות שדורשות אתחול ולבין משתנים גלובליים. השתמשו בשמות שמתארים היטב את משמעות המשתנה, אך שיהיה קצר.\r\n\r\n**אחרת:** JavaScript היא השפה היחידה בעולם שתאפשר לכם לקרוא ל-constructor (\"Class\") ישירות ללא אתחול. לכן, חשוב מאוד להבדיל בין שמות מחלקות ושמות פונקציות על ידי שימוש ב-UpperCamelCase.\r\n\r\n### דוגמאות\r\n\r\n```javascript\r\n// for global variables names we use the const/let keyword and UPPER_SNAKE_CASE\r\nlet MUTABLE_GLOBAL = \"mutable value\";\r\nconst GLOBAL_CONSTANT = \"immutable value\";\r\nconst CONFIG = {\r\n  key: \"value\",\r\n};\r\n\r\n// examples of UPPER_SNAKE_CASE convention in nodejs/javascript ecosystem\r\n// in javascript Math.PI module\r\nconst PI = 3.141592653589793;\r\n\r\n// https://github.com/nodejs/node/blob/b9f36062d7b5c5039498e98d2f2c180dca2a7065/lib/internal/http2/core.js#L303\r\n// in nodejs http2 module\r\nconst HTTP_STATUS_OK = 200;\r\nconst HTTP_STATUS_CREATED = 201;\r\n\r\n// for class name we use UpperCamelCase\r\nclass SomeClassExample {\r\n  // for static class properties we use UPPER_SNAKE_CASE\r\n  static STATIC_PROPERTY = \"value\";\r\n}\r\n\r\n// for functions names we use lowerCamelCase\r\nfunction doSomething() {\r\n  // for scoped variable names we use the const/let keyword and lowerCamelCase\r\n  const someConstExample = \"immutable value\";\r\n  let someMutableExample = \"mutable value\";\r\n}\r\n```\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 3.7 העדיפו const על פני let. ניטשו את var\r\n\r\n**אמ;לק:** שימוש ב-`const` משמעותו היא שלאחר שהמשתנה מאותחל לראשונה הוא לא יכול להיות מאותחל שוב. העדפת שימוש ב-`const` תעזור לכם לא להתפתות ולהשתמש שוב באותו משתנה לצרכים שונים ותהפוך את הקוד שלכם לקריא יותר. אם משתנה צריך להיות מאותחל מחדש, למשל בתוך לולאת for, אז השתמשו ב-`let` לצורך כך. נקודה נוספת שחשוב לציין היא ששימוש ב-`let` אפשרית רק בתוך אותו הבלוק שהיא הוגדרה בו. `var` נצמד לscope של הפונקציה שהוא מוגדר בו ולא לבלוק ספציפי ולכן [צריך לא להשתמש בו ב-ES6](https://hackernoon.com/why-you-shouldnt-use-var-anymore-f109a58b9b70) כשאפשר להשתמש ב-`const` וב-`let`.\r\n\r\n**אחרת:** דיבוג הופך להיות מאוד מסורבל כאשר משתנה משתנה לעיתים דחופות.\r\n\r\n🔗 [**לקריאה נוספת: JavaScript ES6+: var, let, or const?** ](https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 3.8 טענו מודולים בתחילה, ולא בקריאה לפונקציות\r\n\r\n**אמ;לק:** טענו את המודולים (require...) בתחילת כל קובץ, לפני כל הפונקציות. שיטת עבודה פשוטה זו לא רק שתעזור לכם בקלות ובמהירות לזהות את התלויות של קובץ מסוים, אלא גם תמנע מספר בעיות אפשריות.\r\n\r\n**אחרת:** טעינת מודולים היא תהליך סינכרוני ב-Node.js. אם הטעינה תתבצע מתוך פונקציה היא עלולה לחסום טיפול בבקשות אחרות בזמן קריטי. בנוסף לכך, אם מודול חיוני או מישהו שהוא תלוי בו יזרקו שגיאה ויפילו את השרת, מומלץ שזה יוודע כמה שיותר מוקדם, מה שלא בטוח יקרה במקרה שהמודול נטען מתוך פונקציה.\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 3.9 הגדירו כניסה מסודרת לספריה שלכם\r\n\r\n**אמ;לק:** בעת פיתוח מודול או ספריה, הגדירו קובץ בסיס שמייצא את הקוד המיועד לשימוש חיצוני. מנעו מהמשתמשים של הקוד שלכם את הצורך לייבא קבצים שיושבים עמוק אצלכם ואת הצורך שלהם להבין את מבנה הקבצים שלכם. כאשר עובדים בשיטת commonjs (require), זה יכול להיעשות על ידי שימוש בקובץ index.js שיושב בתיקיה הראשית או בהגדרת השדה main בקובץ package.json. כאשר עובדים בשיטת ESM (import), אם קובץ package.json קיים בתיקיה הראשית, אז השדה \"exports\" מאפשר את הגדרת הקובץ הראשי. אך אם אין קובץ package.json, אז שימוש בקובץ index.js בתיקיה הראשית ייצא את כל הפונקציונליות שמיועדת לשימוש חיצוני.\r\n\r\n**אחרת:** קיומו של קובץ ראשי רשמי משמש כממשק חיצוני שמסתיר את החלקים הפנימיים של הספריה, מקשר את המשתמש ישירות לקוד הזמין ומאפשר שינויים עתידיים ללא צורך לשבוראת החוזה.\r\n\r\n### דוגמה\r\n\r\n```javascript\r\n// Avoid: client has deep familiarity with the internals\r\n\r\n// Client code\r\nconst SMSWithMedia = require(\"./SMSProvider/providers/media/media-provider.js\");\r\n\r\n// Better: explicitly export the public functions\r\n\r\n//index.js, module code\r\nmodule.exports.SMSWithMedia = require(\"./SMSProvider/providers/media/media-provider.js\");\r\n\r\n// Client code\r\nconst { SMSWithMedia } = require(\"./SMSProvider\");\r\n```\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 3.10 השתמשו באופרטור `===`\r\n\r\n**אמ;לק:** העדיפו את ההשוואה הקפדנית באמצעות האופרטור `===` על פני ההשוואה החלשה יותר באמצעות האופרטור `==`. `==` משווה שני משתנים אחרי המרה של שניהם לסוג משתנה אחד. אין המרת סוגי משתנים באופרטור `===`, ושני המשתנים חייבים להיות מאותו סוג כדי שיוכלו להיות שווים.\r\n\r\n**אחרת:** משתנים בעלי ערכים שונים עלולים להחזיר `true` כאשר משווים ביניהם בעזרת האופרטור `==`.\r\n\r\n### דוגמאות\r\n\r\n```javascript\r\n\"\" == \"0\"; // false\r\n0 == \"\"; // true\r\n0 == \"0\"; // true\r\n\r\nfalse == \"false\"; // false\r\nfalse == \"0\"; // true\r\n\r\nfalse == undefined; // false\r\nfalse == null; // false\r\nnull == undefined; // true\r\n\r\n\" \\t\\r\\n \" == 0; // true\r\n```\r\n\r\nכל ההשוואות לעיל יחזירו `false` בעת השוואה עם `===`.\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 3.11 השתמשו ב-Async Await, המנעו מ-callbacks\r\n\r\n**אמ;לק:** async-await זו הדרך הפשוטה ביותר לכתוב קוד אסינכרוני שירגיש כמו קוד סינכרוני. הקוד שיכתב בשיטת async-await הוא גם הרבה יותר פשוט ותומך במנגנון ה-try-catch. שיטה זו מחליפה את הצורך ב-callbacks ו-promises ברוב המקרים. שימוש בשיטה זו בקוד היא כנראה אחת המתנות הטובות יותר שאפשר לתת למי שיקרא את הקוד.\r\n\r\n**אחרת:** טיפול בשגיאות אסינכרוניות בשיטת callback היא כנראה הדרך המהירה לגהנום - מכיוון ששיטה זו מחייבת בדיקת שגיאות בכל שלב, יוצרת קינון מוזר בקוד ומקשה על הבנת תהליך הזרימה של הקוד.\r\n\r\n🔗[**לקריאה נוספת:** מדריך ל-async-await](https://github.com/yortus/asyncawait)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 3.12 השתמשו בפונקציות חץ (=>)\r\n\r\n**אמ;לק:** אמנם מומלץ להשתמש ב async-await ולהימנע מהגדרת פרמטרים בפונקציות כאשר מתעסקים עם API ישן שתומך ב-callbacks או הבטחות - פונקציות חץ מאפשרות לארגן את הקוד קומפקטי יותר וכמובן ששומרות על הקונטקסט של פונקצית המעטפת (`this`).\r\n\r\n**אחרת:** קוד ארוך יותר (על בסיס פונקציות של ES5) חשוף ליותר באגים וקשה יותר לקריאה.\r\n\r\n🔗 [**לקריאה נוספת: הגיע הזמן לאמץ את פונקציות החץ**](https://medium.com/javascript-scene/familiarity-bias-is-holding-you-back-its-time-to-embrace-arrow-functions-3d37e1a9bb75)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 3.13 הימנעו מהשפעות צדדיות מחוץ לפונקציות\r\n\r\n**אמ;לק:** הימנעו מכתיבת קוד עם השפעות צדדיות כמו פעולת רשת או פניה למסד נתונים מחוץ לפונקציה. אם כן תכתבו קוד כזה הוא ירוץ מיד כאשר קובץ אחר פונה לקובץ הזה. הקוד 'הצף' הזה עלול לרוץ כאשר התשתית אותה הוא מבקש עוד לא זמינה עבורו. זה גם פוגע בביצועים אפילו אם אין צורך בפונקציה שעבורה מתבצעת הפעולה בזמן הריצה. דבר אחרון, כתיבת כיסוי לפעולה זו בשביל בדיקות הרבה יותר מורכבת כשהיא לא נעשית בפונקציה. במקום זאת, שימו את הקוד הזה בפונקציה שצריכה להיקרא במפורש. אם הקוד הזה צריך להיקרא ישר בעת עליית המערכת, שיקלו שימוש ב-factory או בתבנית אחרת שמתאימה לדרישה כזאת.\r\n\r\n**אחרת:** תשתיות סטנדרטיות בעולם הווב מגדירות ניהול שגיאות, משתני סביבה וניטור תקלות. אם הפעולה תתבצע לפני שהתשתית מאותחלת אז לא יהיה ניטור של המקרה או שהפעולה תיכשל בשל חוסר בהגדרות שטרם נטענו.\r\n\r\n<br/><br/><br/>\r\n\r\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ חזרה למעלה</a></p>\r\n\r\n# `4. בדיקות ובקרת איכות`\r\n\r\n> יש לנו מדריכים יעודיים לכתיבת בדיקות. רשימת שיטות העבודה המומלצות פה היא סיכום כללי של המדריכים הללו.\r\n>\r\n> א. [שיטות עבודה מומלצות בכתיבת בדיקות ל-JavaScript](https://github.com/goldbergyoni/javascript-testing-best-practices)<br/>\r\n> ב. [בדיקות ב-Node.js - מעבר ליסודות](https://github.com/testjavascript/nodejs-integration-tests-best-practices)\r\n\r\n\r\n## ![✔] 4.1  לפחות, כיתבו בדיקות API לרכיבים השונים\r\n\r\n**אמ;לק:** ברוב הפרויקטים אין בדיקות אוטומטיות כלל בשל לוח זמנים קצר, או שהתחילו לנסות להוסיף בדיקות בפרויקט נוסף אך זה יצא משליטה וננטש עם הזמן. לכן, לתעדף ולהתחיל בדיקות API שזאת הדרך הקלה לכתוב בדיקות ולספק כיסוי (בדיקות) של הקוד מאשר בבדיקות יחידה של פונקציות בודדות (אפשר להשתמש בשביל זה גם בכלים חיצוניים ללא כתיבת קוד, למשל שימוש ב-[Postman](https://www.getpostman.com/)). לאחר מכן, אם יש לכם יותר משאבים וזמן תמשיכו עם בדיקות מתקדמות יותר כגון בדיקות יחידה, בדיקות מול מסדי הנתונים בדיקות ביצועים ועוד.\r\n\r\n**אחרת:** אתם עלולים לבזבז ימים שלמים על כתיבת בדיקות יחידה בלבד ולגלות בסופו של דבר שכיסיתם רק 20% מהמערכת.\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 4.2 סווגו 3 חלקים במתן שם לכל בדיקה\r\n\r\n**אמ;לק:** גירמו לבדיקה לתאר את שלב הדרישות כך שהיא תסביר את עצמה גם לQA או לאחרים (כולל אתכם בעתיד הלא רחוק) שלא בקיאים בחלקים הפנימיים של הקוד. ציינו בבדיקה (1) איזה חלק נבדק, (2) באילו תנאים (3) ומה התוצאה שמצפים שתחול.\r\n\r\n**אחרת:** ההתקנה בדיוק נכשלה, בדיקה בשם “Add product” נכשלה. האם זה מתאר מה בדיוק לא תיפקד?\r\n\r\n🔗 [**לקריאה נוספת: סווגו 3 חלקים במתן שם לכל בדיקה**](./sections/testingandquality/3-parts-in-name.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 4.3 חלקו את הבדיקות לפי תבנית ה-AAA\r\n\r\n**אמ;לק:** חלקו את הבדיקות לשלושה חלקים נפרדים: Arrange (ארגן), Act (פעל) & Assert (ודא) (AAA). החלק הראשון כולל את ההכנה של הסביבה לבדיקה, החלק השני את ההרצה במצב בדיקות, ולבסוף החלק שמוודא שהתקבלה התוצאה הרצויה. שימוש במבנה זה בעקביות מבטיח שהקורא לא יבזבז זמן מחשבה של הבנת הבדיקה.\r\n\r\n**אחרת:** לא מספיק שיתבזבז זמן נרחב מהיום על הבנת הקוד, עכשיו גם החלק הקל ביום (הבנת הבדיקות) ישרוף את המוח.\r\n\r\n🔗 [**לקריאה נוספת: חלקו את הבדיקות לפי תבנית ה-AAA**](./sections/testingandquality/aaa.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 4.4 וודאו כי גרסת ה-Node אחידה\r\n\r\n**אמ;לק:** השתמשו בכלים המעודדים או אוכפים שימוש באותה גרסת Node.js בסביבות השונות ועל ידי שאר המפתחים. כלים כמו [nvm](https://github.com/nvm-sh/nvm), ו-[Volta](https://volta.sh/) מאפשרים להגדיר במפורש את הגרסה הנדרשת בפרויקט בקובץ כך שכל חברי הצוות יכולים על ידי הרצת פקודה אחת ליישר קו עם גרסת הפרויקט. ישנה אפשרות שגרסה זו גם תשתקף לתהליך ה-CI וסביבת היצור/לקוחות (לדוגמה על ידי העתקת מספר הגרסה המבוקש ל-`.Dockerfile` ולקבצי ההגדרות של תהליך ה-CI).\r\n\r\n**אחרת:** מפתחת עלולה להיתקל או לפספס שגיאה מכיוון שהיא משתמשת בגרסת Node.js שונה משאר הצוות. או גרוע מכך, סביבת היצור רצה באמצעות גרסה שונה מזו שהורצו עליה הבדיקות.\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 4.5 הימנעו מאתחול מידע גרעיני משותף, הגדירו לפי צורך של בדיקה\r\n\r\n**אמ;לק:** כדי להימנע מצמידות ותלות בין בדיקות שונות וכדי שיהיה ברור יותר איך להסביר מה קורה בשלבים השונים של הבדיקה, ראוי שכל בדיקה תוסיף ותנהל את המידע העוטף שלה (למשל שורות בטבלה). במקרה ובדיקה צריכה לצרוך מידע מטבלה או להניח שהוא קיים שם - היא צריכה קודם לכן להוסיף את המידע במפורש ולהימנע משינוי מידע של בדיקה אחרת.\r\n\r\n**אחרת:** תארו לכם מקרה בו הפצת גרסה נכשלה בשל שגיאה בבדיקות, הצוות משנס מותניים לחקור את הסיבה ומגיע אם התובנה העצובה שהמערכת עובדת תקין אבל הבדיקות דורסות מידע אחת לשניה ולכן נכשלו ועצרו את תהליך ההפצה.\r\n\r\n🔗 [**לקריאה נוספת: הימנעו מאתחול מידע גרעיני משותף**](./sections/testingandquality/avoid-global-test-fixture.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 4.6 תייגו את הבדיקות\r\n\r\n**אמ;לק:** בדיקות שונות צריכות לרוץ בתרחישים שונים: בדיקות שפיות (quick smoke/sanity), IO-less, בדיקות בעת שמירת קובץ או commit, בדיקות מלאות מקצה לקצה (e2e) כאשר נפתח PR וכולי... התרחישים השונים יכולים להיות מוגדרים בעזרת תיוג בדיקות שונות עם מילות מפתח כמו #cold #api #sanity דבר המאפשר להגדיר קבוצת בדיקות בהתאם לצורך ולהריץ רק אותה. למשל, זאת השיטה להריץ רק את קבוצת בדיקות השפיות באמצעות [Mocha](https://mochajs.org/): `mocha --grep 'sanity'`.\r\n\r\n**אחרת:** הרצה של כל הבדיקות כולל כאלו שמבצעות עשרות פניות למסד נתונים  בכל פעם שמפתח עושה שינוי קטן יאט את קצב הפיתוח בצורה ניכרת ותמנע מצוות הפיתוח להריץ בדיקות.\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 4.7 בידקו את רמת כיסוי הבדיקות שלכם, זה יעזור לזהות דפוסי בדיקות שגויים\r\n\r\n**אמ;לק:** כלים לבדיקת כיסוי הקוד על ידי בדיקות כמו [Istanbul](https://github.com/istanbuljs/istanbuljs)/[NYC](https://github.com/istanbuljs/nyc) מצוינים בשל שלוש סיבות: הם בחינם (אין עלות לדו\"חות שהם מספקים), הם עוזרים לזהות ירידה באחוזי הכיסוי, ואחרון חביב הם מדגישים מקרים של אי התאמה בבדיקות: על ידי צפייה בצבעים שהדוחות הללו מספקים אפשר לזהות למשל שיש קטעי קוד שלא נבדקים לעולם כמו הסתעפויות של `catch` (מה שאומר שיש בדיקות רק למסלול המצליח ולא למקרים של השגיאות). רצוי להגדיר את זה כך שזה יפיל את תהליכי יצירת הגרסאות במידה והכיסוי לא עובר סף מסוים.\r\n\r\n**אחרת:** לא יהיה שום אמצעי מדידה שידווח שקטעים נרחבים מהקוד לא נבדקים כלל.\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 4.8 Use production-like environment for e2e testing\r\n\r\n**אמ;לק:** End to end (e2e) testing which includes live data used to be the weakest link of the CI process as it depends on multiple heavy services like DB. Use an environment which is as close to your real production environment as possible like a-continue (Missed -continue here, needs content. Judging by the **Otherwise** clause, this should mention docker-compose)\r\n\r\n**אחרת:** Without docker-compose, teams must maintain a testing DB for each testing environment including developers' machines, keep all those DBs in sync so test results won't vary across environments\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 4.9 שכתבו את הקוד באופן קבוע בעזרת כלי ניתוח סטטי\r\n\r\n**אמ;לק:**  שימוש בכלי ניתוח סטטי (static analysis tools) עוזר בכך שהוא נותן דרכים מתאימות לשפר את איכות הקוד ולשמור על הקוד מתוחזק. אפשר להוסיף כלים כאלו לשלבי הבנייה ב-CI כך שיפילו את התהליך במידה והם מזהים ניחוחות בקוד. אחד היתרונות העיקריים שלהם על פני כלים פשוטים יותר הוא היכולת לזהות פגמים באיכות הקוד על פני מספר קבצים (כמו כפל קוד), מורכבות גבוהה של קוד ומעקב אחרי ההיסטוריה וההתקדמות של הקוד. שני כלים מומלצים לשימוש הם [Sonarqube](https://www.sonarqube.org/) (7,900+ [stars](https://github.com/SonarSource/sonarqube)) ו [Code Climate](https://codeclimate.com/) (2,400+ [stars](https://github.com/codeclimate/codeclimate)).\r\n\r\n**אחרת:** אם הקוד באיכות נמוכה, תקלות ובעיות ביצועים תמיד יהוו אתגר שאף ספריה חדשה ונוצצת או פתרון טכנולוגי חדיש יוכלו לפתור.\r\n\r\n🔗 [**לקריאה נוספת: שכתוב!**](./sections/testingandquality/refactoring.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 4.10 הדמיית תשובות של שרתי HTTP חיצוניים\r\n\r\n**אמ;לק:** השתמשו בכלי הדמיה של המידע שמגיע מהרשת עבור תשובות שמגיעות משירותים חיצוניים (כמו בקשות REST ו GraphQL). זה הכרחי לא רק כדי לבודד את הרכיב שנבדק אלא בעיקר כדי לבדוק מצבים לא צפויים. כלים כמו [nock](https://github.com/nock/nock) או [Mock-Server](https://www.mock-server.com/) מאפשרים להגדיר תשובה מסוימת לבקשה לשירות חיצוני בשורת קוד בודדה. חשוב לא לשכוח לדמות גם שגיאות, עיכובים, timeouts, וכל אירוע אחר שכנראה יקרה בסביבת הייצור.\r\n\r\n**אחרת:** לאפשר לרכיב לגשת למידע אמיתי משירותים חיצוניים בדרך כלל יסתיים בבדיקות פשוטות שמכסות בעיקר את המקרים שהכל טוב. בנוסף לכך הבדיקות לפעמים יכשלו ויהיו איטיות יותר.\r\n\r\n🔗 [**לקריאה נוספת: הדמיית שירותים חיצוניים**](./sections/testingandquality/mock-external-services.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 4.11 בידקו את <abbr title=\"middlewares\">פונקציות הביניים</abbr> בנפרד\r\n\r\n**אמ;לק:** כאשר פונקציית ביניים (middleware) אוחזת נתח משמעותי של לוגיקה שמשתרעת על פני מספר עצום של בקשות, כדאי לבדוק אותה בצורה מבודדת ללא צורך לטעון את כל תשתית הפריימוורק. אפשר להשיג את הפעולה הזאת בקלות על ידי עטיפה או הדמיה של `{req, res, next}`.\r\n\r\n**אחרת:** באג בפונקציות ביניים ב-`express` === באג ברוב הקריטי של הבקשות.\r\n\r\n🔗 [**לקריאה נוספת: לבדוק פונקציות ביניים בנפרד**](./sections/testingandquality/test-middlewares.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 4.12 קבעו את הפורט בייצור, הגדירו אקראי לבדיקות\r\n\r\n**אמ;לק:** כאשר מבצעים בדיקות מול API, זה רצוי ואף נהוג לאתחל את השרת בתוך הבדיקות. תנו לשרת לבחור פורט באופן אקראי כאשר מריצים בדיקות כדי למנוע התנגשויות. אם אתם משתמשים בשרת HTTP של Node.js (בשימוש על ידי רוב ספריות התשתית), כדי להשיג את היכולת הזאת אין צורך לעשות כלום מלבד להעביר port=0 - זה כבר יגרום להקצאה דינאמית של פורט.\r\n\r\n**אחרת:** הגדרה של פורט ספציפי ימנע את האפשרות להריץ שני טסטים במקביל. רוב הכלים שמריצים כיום טסטים - מריצים במקביל כברירת מחדל.\r\n\r\n🔗 [**לקריאה נוספת: הגדירו פורט אקראי לבדיקות**](./sections/testingandquality/randomize-port.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 4.13 בידקו את חמשת התוצאות האפשריות\r\n\r\n**אמ;לק:** בעת בדיקת מקרה, ודאו שאתם מכסים את חמשת הקטגוריות האפשריות. בכל פעם שפעולה חלה (למשל קריאת API), מתחילה תגובה, **תוצאה** משמעותית נוצרת ומתבצעת קריאה לבדיקה. ישנן חמש סוגי תוצאות לכל מקרה: תגובה, שינוי נראה לעין (כמו עדכון במסד הנתונים), שליחת קריאה ל-\r\nAPI, הודעה חדשה נרשמת לתור, וקריאה לכלי צפיה במידע (כמו לוגר ואנליטיקות). [רשימת בדיקות בסיסיות](https://testjavascript.com/wp-content/uploads/2021/10/the-backend-checklist.pdf). כל סוג של תוצאה מגיע אם אתגרים יחודיים ושיטות להמתיק את האתגרים הללו - כתבנו מדריך יעודי על נושא זה [בדיקות ב-Node.js - מעבר ליסודות](https://github.com/testjavascript/nodejs-integration-tests-best-practices)\r\n\r\n**אחרת:** תארו לעצמכם מקרה של בדיקת הוספה של מוצר חדש למערכת. נפוץ לראות בדיקות שמכסות אך ורק את המקרים של תשובה תקינה. מה יקרה אם המוצר לא יתווסף על אף התשובה החיובית? מה צריך להיעשות במידה ובעת הוספת מוצר יש גם קריאה לשירות חיצוני או הוספת הודעה לתור - האם הבדיקה לא צריכה להתייחס גם לזה? קל להתעלם ממגוון מקרים, ובנקודה זאת [רשימת הבדיקות](https://testjavascript.com/wp-content/uploads/2021/10/the-backend-checklist.pdf) עוזרת.\r\n\r\n🔗 [**לקריאה נוספת: בדיקת חמשת התוצאות**](./sections/testingandquality/test-five-outcomes.md)\r\n\r\n<br/><br/><br/>\r\n\r\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ חזרה למעלה</a></p>\r\n\r\n# `5. עלייה לאוויר`\r\n\r\n## ![✔] 5.1. ניטור\r\n\r\n**אמ;לק:** ניטור הוא משחק של מציאת בעיות לפני שהמשתמשים מוצאים אותן - מובן מאליו שזה צריך להיות בראש סדר העדיפויות. השוק מוצף בהצעות להגדרות מה הם המדדים הבסיסיים שחייבים לעקוב אחריהם (ההמלצות שלנו בהמשך), לאחר מכן לעבור על כל היכולות המעניינות שכל מוצר מציע ולבחור את הפתרון המיטבי עבור הדרישות שלכם. בכל מקרה, ארבעת השכבות הניתנות לצפייה חייבות להימדד: (1) Uptime - מציינת האם המערכת זמינה, (2) Metrics - מציינת מהי ההתנהגות המצטברת של המערכת (האם 99% מהבקשות נענות), (3) Logging - בודקת אם בקשה מסויימת מסתיימת בהצלחה, (4) Distributed tracing - בודקת האם המערכת יציבה בין הרכיבים המבוזרים שלה.\r\n\r\n**אחרת:** כשלון === לקוחות מאוכזבים. פשוט מאוד.\r\n\r\n🔗 [**לקריאה נוספת: ניטור!**](./sections/production/monitoring.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 5.2. הגדילו את יכולת הצפייה בעזרת לוגים איכותיים\r\n\r\n**אמ;לק:** לוגים יכולים להיות פח הזבל של שלל מצבים שהמפתחים רצו לדבג או לחלופין מסך מהמם שמתאר את המצב של המוצר. תכננו את הלוגים שלכם מהיום הראשון: איך הם נאספים, איפה הם נשמרים ואיך הם מנותחים כדי להבטיח שהמידע ההכרחי (אחוז שגיאות, מעקב אחר פעולה בין מספר שירותים וכו') באמת נגיש ובר שימוש.\r\n\r\n**אחרת:** יש לכם קופסה שחורה שקשה להבין למה היא מגיעה למצב הנוכחי, ורק עכשיו אתם מתחילים לשכתב את כל הלוגים שלכם כדי שיהיה מידע רלוונטי.\r\n\r\n🔗 [**לקריאה נוספת: הגדלת השקיפות על ידי לוגים איכותיים**](./sections/production/smartlogging.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 5.3. האצילו כל מה שאפשר (לדוגמה gzip, SSL) לשירות נפרד\r\n\r\n**אמ;לק:** Node.js גרוע בלבצע פעולות שדורשות עוצמת חישוב גבוהה מה-CPU, כמו למשל דחיסה, סיום תהליך SSL, וכו'... כדאי שתשתמשו בתשתיות כמו nginx, HAproxy או שירותי ענן אחרים לשם כך.\r\n\r\n**אחרת:** הת'רד הבודד והמסכן שלכם יישאר עסוק במשימות תשתיתיות במקום להתעסק בלב המערכת שלכם והביצועים יישחקו בהתאם.\r\n\r\n🔗 [**לקריאה נוספת: האצלת כל מה שאפשר (לדוגמה gzip, SSL) לשירות נפרד**](./sections/production/delegatetoproxy.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 5.4. קיבוע תלויות\r\n\r\n**אמ;לק:** הקוד שלכם צריך להיות זהה בכל הסביבות, אך ללא קובץ יעודי npm יאפשר שימוש בתלויות שונות בכל סביבה. ודאו כי יש לכם `package-lock.json` כך שכל הסביבות יהיו זהות.\r\n\r\n**אחרת:** אנשי הבדיקות יאשרו גרסה שתתנהג אחרת בסביבת ייצור. גרוע מכך, שרתים שונים באותה סביבה יריצו קוד שונה.\r\n\r\n🔗 [**לקריאה נוספת: קיבוע תלויות**](./sections/production/lockdependencies.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 5.5. הבטיחו את זמינות המערכת בעזרת הכלי המתאים\r\n\r\n**אמ;לק:** המערכת צריכה להמשיך לעבוד ולהתאתחל במידה וקרתה שגיאה קריטית. סביבות ריצה חדשות כמו למשל כאלו המבוססות דוקר (כמו קוברנטיס), או Serverless מטפלות בזה בצורה אוטומטית. כאשר המוצר מותקן על שרת אמיתי פיזי, יש צורך לנהל את משאבי המערכת בעזרת כלי כמו [systemd](https://systemd.io/). אך יש להימנע מלעשות זאת כאשר משתמשים בתשתיות שכבר מבצעות את הניטור מכיוון שזה יגרום לבליעת שגיאות. כאשר לתשתית אין מודעות לשגיאות, אין לה יכולת של ביצוע שלבי פיחות משאבים כמו העברת האינסטנס של המערכת למקום אחר ברשת.\r\n\r\n**אחרת:** הרצה של עשרות אינסטנסים ללא סיבה ברורה ויותר מידי כלי תשתית יחד (cluster management, docker, PM2) עלול לגרום לכאוס עבור ה-DevOps.\r\n\r\n🔗 [**לקריאה נוספת: הבטיחו את זמינות המערכת בעזרת הכלי המתאים**](./sections/production/guardprocess.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 5.6. השתמשו בכל מעבדי ה-CPU\r\n\r\n**אמ;לק:** בתצורה הבסיסית שלה, מערכת מבוססת Node.js תרוץ על מעבד CPU אחד ושאר המעבדים ינוחו. מחובתכם לשכפל את התהליך ולנהל את המערכת ככה שתרוץ על כל המעבדים. רוב תשתיות הריצה החדשות (כמו קוברנטיס) מאפשרות לשכפל את התהליכים למספר מעבדים, אך הן לא מבטיחות להשתמש בכל המעבדים - זאת האחריות שלכם! אם המוצר מותקן על שרת פיזי, אז כחלק מאחריותכם אתם צריכים גם להשתמש בפתרונות שיבצעו את השכפול של התהליך (כמו systemd).\r\n\r\n**אחרת:** המוצר שלכם ינצל לכל היותר 25% מהמשאבים הזמינים(!). זכרו שלשרת רגיל יש 4 מעבדי CPU או יותר, והתקנה סטנדרטית של תהליך Node.js משתמשת רק במעבד אחד (גם שירותים בשיטת PaaS כמו AWS beanstalk!).\r\n\r\n🔗 [**לקריאה נוספת: השתמשו בכל מעבדי ה-CPU**](./sections/production/utilizecpu.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 5.7. תיצרו ‘maintenance endpoint’\r\n\r\n**אמ;לק:** חישפו מידע רלוונטי על המערכת, למשל מצב הזיכרון ו -[REPL](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop), באמצעות API מאובטח. על אף שמומלץ להישען על כלים יעודיים לשם כך, את חלק מהמידע והפעולות יותר פשוט לבדוק באמצעות כתיבת קוד.\r\n\r\n**אחרת:** תגלו שאתם מבצעים הרבה “diagnostic deploys” – העלאת קוד לסביבת הייצור רק כדי להשיג עוד קצת מידע אבחנתי על המערכת.\r\n\r\n🔗 [**לקריאה נוספת: יצירת ‘maintenance endpoint’**](./sections/production/createmaintenanceendpoint.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 5.8. גלו את הלא ידוע בעזרת מוצרי APM\r\n\r\n**אמ;לק:** שיקלו הוספת שכבה נוספת של בטיחות למוצר שלכם - [APM](https://en.wikipedia.org/wiki/Application_performance_management) (Application monitoring and performance products). אמנם רוב הסממנים והגורמים יכולים להימצא על ידי טכניקות ניטור סטנדרטיות, אך במערכות מבוזרות יש עוד רבדים סמויים מן העין. ניטור מערכות ובדיקת ביצועים (או בקיצור APM) יכולים באופן קסום להוסיף שכבה נוספת של חוויית פיתוח מעבר למה שמספקים הכלים הסטנדרטיים. לדוגמה, ישנם כלי APM שיכולים להדגיש טרנזקציה שטוענת לאט מידי את **צד הלקוח** ולהציע מה הסיבה לכך. כלים אלו גם מספקים יותר הקשר לצוות הפיתוח שמנסים לחקור שגיאה וזאת על ידי הצגה של העומסים שהיו בשרת בזמן שחלה השגיאה.\r\n\r\n**אחרת:** אתם משקיעים זמן ניכר במדידת ביצועי API ואי זמינות של המערכת, כנראה שלעולם לא תהיו מודעים לאילו חלקים בקוד הם האיטיים ביותר בזמן אמת ואיך זה משפיע על חווית המשתמש.\r\n\r\n🔗 [**לקריאה נוספת: גילוי שגיאות וזמני השבתה בעזרת מוצרי APM**](./sections/production/apmproducts.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 5.9. כתבו את הקוד מותאם להתקנה\r\n\r\n**אמ;לק:** קודדו כאשר התוצאה הסופית במחשבותיכם, התכוננו להתקנה בסביבת יצור כבר מהיום הראשון. זה אמנם נשמע קצת מעורפל ולכן בקישור ישנן מספר המלצות הקשורות לתמיכה במוצר שכבר הותקן.\r\n\r\n**אחרת:** אלופי העולם של IT/DevOps לא ינסו להציל מערכת שכתובה גרוע.\r\n\r\n🔗 [**לקריאה נוספת: כתבו את הקוד מותאם להתקנה**](./sections/production/productioncode.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 5.10. מדדו ושימרו את ניצול הזיכרון\r\n\r\n**אמ;לק:** ל-Node.js ישנה מערכת יחסים מורכבת עם ניהול הזיכרון: למנוע ה-v8 ישנם גבולות עדינים של צריכת זיכרון (1.4GB) וישנן דרכים ידועות איך לגרום לזליגת זיכרון בקוד של Node.js - ולכן מעקב אחר צריכת הזיכרון של תהליך Node.js הוא חובה. במוצרים קטנים, אפשר לאמוד את צריכת הזיכרון כל כמה זמן בעזרת פקודות shell, אבל במוצרים בינוניים-גדולים צריך לתעדף שימוש בכלים חזקים לניטור מצב הזיכרון.\r\n\r\n**אחרת:** זולגים לכם מאות MB כל יום מהתהליך כמו שקרה ב[וולמארט](https://www.joyent.com/blog/walmart-node-js-memory-leak)\r\n\r\n🔗 [**לקריאה נוספת: מדידה ושמירה על ניצול הזיכרון**](./sections/production/measurememory.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 5.11. Get your frontend assets out of Node\r\n\r\n**אמ;לק:** Serve frontend content using a specialized infrastructure (nginx, S3, CDN) because Node performance gets hurt when dealing with many static files due to its single-threaded model. One exception to this guideline is when doing server-side rendering\r\n\r\n**אחרת:** Your single Node thread will be busy streaming hundreds of html/images/angular/react files instead of allocating all its resources for the task it was born for – serving dynamic content\r\n\r\n🔗 [**Read More: Get your frontend assets out of Node**](./sections/production/frontendout.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 5.12. Strive to be stateless\r\n\r\n**אמ;לק:** Store any type of _data_ (e.g. user sessions, cache, uploaded files) within external data stores. When the app holds data in-process this adds additional layer of maintenance complexity like routing users to the same instance and higher cost of restarting a process. To enforce and encourage a stateless approach, most modern runtime platforms allows 'reapp-ing' instances periodically\r\n\r\n**אחרת:** Failure at a given server will result in application downtime instead of just killing a faulty machine. Moreover, scaling-out elasticity will get more challenging due to the reliance on a specific server\r\n\r\n🔗 [**Read More: Be stateless, kill your Servers almost every day**](./sections/production/bestateless.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 5.13. Use tools that automatically detect vulnerabilities\r\n\r\n**אמ;לק:** Even the most reputable dependencies such as Express have known vulnerabilities (from time to time) that can put a system at risk. This can be easily be tamed using community and commercial tools that constantly check for vulnerabilities and warn (locally or at GitHub), some can even patch them immediately\r\n\r\n**אחרת:** Keeping your code clean from vulnerabilities without dedicated tools will require you to constantly follow online publications about new threats. Quite tedious\r\n\r\n🔗 [**Read More: Use tools that automatically detect vulnerabilities**](./sections/production/detectvulnerabilities.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 5.14. Assign a transaction id to each log statement\r\n\r\n**אמ;לק:** Assign the same identifier, transaction-id: uuid(), to each log entry within a single request (also known as correlation-id/tracing-id/request-context). Then when inspecting errors in logs, easily conclude what happened before and after. Node has a built-in mechanism, [AsyncLocalStorage](https://nodejs.org/api/async_context.html), for keeping the same context across asynchronous calls. see code examples inside\r\n\r\n**אחרת:** Looking at a production error log without the context – what happened before – makes it much harder and slower to reason about the issue\r\n\r\n🔗 [**Read More: Assign ‘TransactionId’ to each log statement**](./sections/production/assigntransactionid.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 5.15. Set `NODE_ENV=production`\r\n\r\n**אמ;לק:** Set the environment variable `NODE_ENV` to ‘production’ or ‘development’ to flag whether production optimizations should get activated – some npm packages determine the current environment and optimize their code for production\r\n\r\n**אחרת:** Omitting this simple property might greatly degrade performance when dealing with some specific libraries like Express server-side rendering\r\n\r\n🔗 [**Read More: Set NODE_ENV=production**](./sections/production/setnodeenv.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 5.16. Design automated, atomic and zero-downtime deployments\r\n\r\n**אמ;לק:** Research shows that teams who perform many deployments lower the probability of severe production issues. Fast and automated deployments that don’t require risky manual steps and service downtime significantly improve the deployment process. You should probably achieve this using Docker combined with CI tools as they became the industry standard for streamlined deployment\r\n\r\n**אחרת:** Long deployments -> production downtime & human-related error -> team unconfident in making deployment -> fewer deployments and features\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 5.17. Use an LTS release of Node.js\r\n\r\n**אמ;לק:** Ensure you are using an LTS version of Node.js to receive critical bug fixes, security updates and performance improvements\r\n\r\n**אחרת:** Newly discovered bugs or vulnerabilities could be used to exploit an application running in production, and your application may become unsupported by various modules and harder to maintain\r\n\r\n🔗 [**Read More: Use an LTS release of Node.js**](./sections/production/LTSrelease.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 5.18. Log to stdout, avoid specifying log destination within the app\r\n\r\n**אמ;לק:** Log destinations should not be hard-coded by developers within the application code, but instead should be defined by the execution environment the application runs in. Developers should write logs to `stdout` using a logger utility and then let the execution environment (container, server, etc.) pipe the `stdout` stream to the appropriate destination (i.e. Splunk, Graylog, ElasticSearch, etc.).\r\n\r\n**אחרת:** If developers set the log routing, less flexibility is left for the ops professional who wishes to customize it. Beyond this, if the app tries to log directly to a remote location (e.g., Elastic Search), in case of panic or crash - further logs that might explain the problem won't arrive\r\n\r\n🔗 [**Read More: Log Routing**](./sections/production/logrouting.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 5.19. Install your packages with `npm ci`\r\n\r\n**אמ;לק:** Run `npm ci` to strictly do a clean install of your dependencies matching package.json and package-lock.json. Obviously production code must use the exact version of the packages that were used for testing. While package-lock.json file sets strict version for dependencies, in case of mismatch with the file package.json, the command 'npm install' will treat package.json as the source of truth. On the other hands, the command 'npm ci' will exit with error in case of mismatch between these files\r\n\r\n**אחרת:** QA will thoroughly test the code and approve a version that will behave differently in production. Even worse, different servers in the same production cluster might run different code.\r\n\r\n🔗 [**Read More: Use npm ci**](./sections/production/installpackageswithnpmci.md)\r\n\r\n<br/><br/><br/>\r\n\r\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ חזרה למעלה</a></p>\r\n\r\n# `6. אבטחה`\r\n\r\n<div align=\"center\">\r\n<img src=\"https://img.shields.io/badge/OWASP%20Threats-Top%2010-green.svg\" alt=\"54 items\"/>\r\n</div>\r\n\r\n## ![✔] 6.1. Embrace linter security rules\r\n\r\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20XSS%20-green.svg\" alt=\"\"/></a>\r\n\r\n**אמ;לק:** Make use of security-related linter plugins such as [eslint-plugin-security](https://github.com/nodesecurity/eslint-plugin-security) to catch security vulnerabilities and issues as early as possible, preferably while they're being coded. This can help catching security weaknesses like using eval, invoking a child process or importing a module with a string literal (e.g. user input). Click 'Read more' below to see code examples that will get caught by a security linter\r\n\r\n**אחרת:** What could have been a straightforward security weakness during development becomes a major issue in production. Also, the project may not follow consistent code security practices, leading to vulnerabilities being introduced, or sensitive secrets committed into remote repositories\r\n\r\n🔗 [**Read More: Lint rules**](./sections/security/lintrules.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 6.2. Limit concurrent requests using a middleware\r\n\r\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\r\n\r\n**אמ;לק:** DOS attacks are very popular and relatively easy to conduct. Implement rate limiting using an external service such as cloud load balancers, cloud firewalls, nginx, [rate-limiter-flexible](https://www.npmjs.com/package/rate-limiter-flexible) package, or (for smaller and less critical apps) a rate-limiting middleware (e.g. [express-rate-limit](https://www.npmjs.com/package/express-rate-limit))\r\n\r\n**אחרת:** An application could be subject to an attack resulting in a denial of service where real users receive a degraded or unavailable service.\r\n\r\n🔗 [**Read More: Implement rate limiting**](./sections/security/limitrequests.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 6.3 Extract secrets from config files or use packages to encrypt them\r\n\r\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A3:Sensitive%20Data%20Exposure%20-green.svg\" alt=\"\"/></a>\r\n\r\n**אמ;לק:** Never store plain-text secrets in configuration files or source code. Instead, make use of secret-management systems like Vault products, Kubernetes/Docker Secrets, or using environment variables. As a last resort, secrets stored in source control must be encrypted and managed (rolling keys, expiring, auditing, etc). Make use of pre-commit/push hooks to prevent committing secrets accidentally\r\n\r\n**אחרת:** Source control, even for private repositories, can mistakenly be made public, at which point all secrets are exposed. Access to source control for an external party will inadvertently provide access to related systems (databases, apis, services, etc).\r\n\r\n🔗 [**Read More: Secret management**](./sections/security/secretmanagement.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 6.4. Prevent query injection vulnerabilities with ORM/ODM libraries\r\n\r\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a>\r\n\r\n**אמ;לק:** To prevent SQL/NoSQL injection and other malicious attacks, always make use of an ORM/ODM or a database library that escapes data or supports named or indexed parameterized queries, and takes care of validating user input for expected types. Never just use JavaScript template strings or string concatenation to inject values into queries as this opens your application to a wide spectrum of vulnerabilities. All the reputable Node.js data access libraries (e.g. [Sequelize](https://github.com/sequelize/sequelize), [Knex](https://github.com/tgriesser/knex), [mongoose](https://github.com/Automattic/mongoose)) have built-in protection against injection attacks.\r\n\r\n**אחרת:** Unvalidated or unsanitized user input could lead to operator injection when working with MongoDB for NoSQL, and not using a proper sanitization system or ORM will easily allow SQL injection attacks, creating a giant vulnerability.\r\n\r\n🔗 [**Read More: Query injection prevention using ORM/ODM libraries**](./sections/security/ormodmusage.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 6.5. Collection of generic security best practices\r\n\r\n**אמ;לק:** This is a collection of security advice that is not related directly to Node.js - the Node implementation is not much different than any other language. Click read more to skim through.\r\n\r\n🔗 [**Read More: Common security best practices**](./sections/security/commonsecuritybestpractices.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 6.6. Adjust the HTTP response headers for enhanced security\r\n\r\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\r\n\r\n**אמ;לק:** Your application should be using secure headers to prevent attackers from using common attacks like cross-site scripting (XSS), clickjacking and other malicious attacks. These can be configured easily using modules like [helmet](https://www.npmjs.com/package/helmet).\r\n\r\n**אחרת:** Attackers could perform direct attacks on your application's users, leading to huge security vulnerabilities\r\n\r\n🔗 [**Read More: Using secure headers in your application**](./sections/security/secureheaders.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 6.7. Constantly and automatically inspect for vulnerable dependencies\r\n\r\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Known%20Vulnerabilities%20-green.svg\" alt=\"\"/></a>\r\n\r\n**אמ;לק:** With the npm ecosystem it is common to have many dependencies for a project. Dependencies should always be kept in check as new vulnerabilities are found. Use tools like [npm audit](https://docs.npmjs.com/cli/audit) or [snyk](https://snyk.io/) to track, monitor and patch vulnerable dependencies. Integrate these tools with your CI setup so you catch a vulnerable dependency before it makes it to production.\r\n\r\n**אחרת:** An attacker could detect your web framework and attack all its known vulnerabilities.\r\n\r\n🔗 [**Read More: Dependency security**](./sections/security/dependencysecurity.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 6.8. Protect Users' Passwords/Secrets using bcrypt or scrypt\r\n\r\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\r\n\r\n**אמ;לק:** Passwords or secrets (e.g. API keys) should be stored using a secure hash + salt function like `bcrypt`,`scrypt`, or worst case `pbkdf2`.\r\n\r\n**אחרת:** Passwords and secrets that are stored without using a secure function are vulnerable to brute forcing and dictionary attacks that will lead to their disclosure eventually.\r\n\r\n🔗 [**Read More: User Passwords**](./sections/security/userpasswords.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 6.9. Escape HTML, JS and CSS output\r\n\r\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a>\r\n\r\n**אמ;לק:** Untrusted data that is sent down to the browser might get executed instead of just being displayed, this is commonly referred as a cross-site-scripting (XSS) attack. Mitigate this by using dedicated libraries that explicitly mark the data as pure content that should never get executed (i.e. encoding, escaping)\r\n\r\n**אחרת:** An attacker might store malicious JavaScript code in your DB which will then be sent as-is to the poor clients\r\n\r\n🔗 [**Read More: Escape output**](./sections/security/escape-output.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 6.10. Validate incoming JSON schemas\r\n\r\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7: XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A8:Insecured%20Deserialization%20-green.svg\" alt=\"\"/></a>\r\n\r\n**אמ;לק:** Validate the incoming requests' body payload and ensure it meets expectations, fail fast if it doesn't. To avoid tedious validation coding within each route you may use lightweight JSON-based validation schemas such as [jsonschema](https://www.npmjs.com/package/jsonschema) or [joi](https://www.npmjs.com/package/joi)\r\n\r\n**אחרת:** Your generosity and permissive approach greatly increases the attack surface and encourages the attacker to try out many inputs until they find some combination to crash the application\r\n\r\n🔗 [**Read More: Validate incoming JSON schemas**](./sections/security/validation.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 6.11. Support blocklisting JWTs\r\n\r\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\r\n\r\n**אמ;לק:** When using JSON Web Tokens (for example, with [Passport.js](https://github.com/jaredhanson/passport)), by default there's no mechanism to revoke access from issued tokens. Once you discover some malicious user activity, there's no way to stop them from accessing the system as long as they hold a valid token. Mitigate this by implementing a blocklist of untrusted tokens that are validated on each request.\r\n\r\n**אחרת:** Expired, or misplaced tokens could be used maliciously by a third party to access an application and impersonate the owner of the token.\r\n\r\n🔗 [**Read More: Blocklist JSON Web Tokens**](./sections/security/expirejwt.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 6.12. Prevent brute-force attacks against authorization\r\n\r\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\r\n\r\n**אמ;לק:** A simple and powerful technique is to limit authorization attempts using two metrics:\r\n\r\n1. The first is number of consecutive failed attempts by the same user unique ID/name and IP address.\r\n2. The second is number of failed attempts from an IP address over some long period of time. For example, block an IP address if it makes 100 failed attempts in one day.\r\n\r\n**אחרת:** An attacker can issue unlimited automated password attempts to gain access to privileged accounts on an application\r\n\r\n🔗 [**Read More: Login rate limiting**](./sections/security/login-rate-limit.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 6.13. Run Node.js as non-root user\r\n\r\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A5:Broken%20Access%20Access%20Control-green.svg\" alt=\"\"/></a>\r\n\r\n**אמ;לק:** There is a common scenario where Node.js runs as a root user with unlimited permissions. For example, this is the default behaviour in Docker containers. It's recommended to create a non-root user and either bake it into the Docker image (examples given below) or run the process on this user's behalf by invoking the container with the flag \"-u username\"\r\n\r\n**אחרת:** An attacker who manages to run a script on the server gets unlimited power over the local machine (e.g. change iptable and re-route traffic to their server)\r\n\r\n🔗 [**Read More: Run Node.js as non-root user**](./sections/security/non-root-user.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 6.14. Limit payload size using a reverse-proxy or a middleware\r\n\r\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A8:Insecured%20Deserialization%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\r\n\r\n**אמ;לק:** The bigger the body payload is, the harder your single thread works in processing it. This is an opportunity for attackers to bring servers to their knees without tremendous amount of requests (DOS/DDOS attacks). Mitigate this limiting the body size of incoming requests on the edge (e.g. firewall, ELB) or by configuring [express body parser](https://github.com/expressjs/body-parser) to accept only small-size payloads\r\n\r\n**אחרת:** Your application will have to deal with large requests, unable to process the other important work it has to accomplish, leading to performance implications and vulnerability towards DOS attacks\r\n\r\n🔗 [**Read More: Limit payload size**](./sections/security/requestpayloadsizelimit.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 6.15. Avoid JavaScript eval statements\r\n\r\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\r\n\r\n**אמ;לק:** `eval` is evil as it allows executing custom JavaScript code during run time. This is not just a performance concern but also an important security concern due to malicious JavaScript code that may be sourced from user input. Another language feature that should be avoided is `new Function` constructor. `setTimeout` and `setInterval` should never be passed dynamic JavaScript code either.\r\n\r\n**אחרת:** Malicious JavaScript code finds a way into text passed into `eval` or other real-time evaluating JavaScript language functions, and will gain complete access to JavaScript permissions on the page. This vulnerability is often manifested as an XSS attack.\r\n\r\n🔗 [**Read More: Avoid JavaScript eval statements**](./sections/security/avoideval.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 6.16. Prevent evil RegEx from overloading your single thread execution\r\n\r\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\r\n\r\n**אמ;לק:** Regular Expressions, while being handy, pose a real threat to JavaScript applications at large, and the Node.js platform in particular. A user input for text to match might require an outstanding amount of CPU cycles to process. RegEx processing might be inefficient to an extent that a single request that validates 10 words can block the entire event loop for 6 seconds and set the CPU on 🔥. For that reason, prefer third-party validation packages like [validator.js](https://github.com/chriso/validator.js) instead of writing your own Regex patterns, or make use of [safe-regex](https://github.com/substack/safe-regex) to detect vulnerable regex patterns\r\n\r\n**אחרת:** Poorly written regexes could be susceptible to Regular Expression DoS attacks that will block the event loop completely. For example, the popular `moment` package was found vulnerable with malicious RegEx usage in November of 2017\r\n\r\n🔗 [**Read More: Prevent malicious RegEx**](./sections/security/regex.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 6.17. Avoid module loading using a variable\r\n\r\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\r\n\r\n**אמ;לק:** Avoid requiring/importing another file with a path that was given as parameter due to the concern that it could have originated from user input. This rule can be extended for accessing files in general (i.e. `fs.readFile()`) or other sensitive resource access with dynamic variables originating from user input. [Eslint-plugin-security](https://www.npmjs.com/package/eslint-plugin-security) linter can catch such patterns and warn early enough\r\n\r\n**אחרת:** Malicious user input could find its way to a parameter that is used to require tampered files, for example, a previously uploaded file on the file system, or access already existing system files.\r\n\r\n🔗 [**Read More: Safe module loading**](./sections/security/safemoduleloading.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 6.18. Run unsafe code in a sandbox\r\n\r\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\r\n\r\n**אמ;לק:** When tasked to run external code that is given at run-time (e.g. plugin), use any sort of 'sandbox' execution environment that isolates and guards the main code against the plugin. This can be achieved using a dedicated process (e.g. `cluster.fork()`), serverless environment or dedicated npm packages that act as a sandbox\r\n\r\n**אחרת:** A plugin can attack through an endless variety of options like infinite loops, memory overloading, and access to sensitive process environment variables\r\n\r\n🔗 [**Read More: Run unsafe code in a sandbox**](./sections/security/sandbox.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 6.19. Take extra care when working with child processes\r\n\r\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\r\n\r\n**אמ;לק:** Avoid using child processes when possible and validate and sanitize input to mitigate shell injection attacks if you still have to. Prefer using `child_process.execFile` which by definition will only execute a single command with a set of attributes and will not allow shell parameter expansion.\r\n\r\n**אחרת:** Naive use of child processes could result in remote command execution or shell injection attacks due to malicious user input passed to an unsanitized system command.\r\n\r\n🔗 [**Read More: Be cautious when working with child processes**](./sections/security/childprocesses.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 6.20. Hide error details from clients\r\n\r\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\r\n\r\n**אמ;לק:** An integrated express error handler hides the error details by default. However, great are the chances that you implement your own error handling logic with custom Error objects (considered by many as a best practice). If you do so, ensure not to return the entire Error object to the client, which might contain some sensitive application details\r\n\r\n**אחרת:** Sensitive application details such as server file paths, third party modules in use, and other internal workflows of the application which could be exploited by an attacker, could be leaked from information found in a stack trace\r\n\r\n🔗 [**Read More: Hide error details from client**](./sections/security/hideerrors.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 6.21. Configure 2FA for npm or Yarn\r\n\r\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\r\n\r\n**אמ;לק:** Any step in the development chain should be protected with MFA (multi-factor authentication), npm/Yarn are a sweet opportunity for attackers who can get their hands on some developer's password. Using developer credentials, attackers can inject malicious code into libraries that are widely installed across projects and services. Maybe even across the web if published in public. Enabling 2-factor-authentication in npm leaves almost zero chances for attackers to alter your package code.\r\n\r\n**אחרת:** [Have you heard about the eslint developer whose password was hijacked?](https://medium.com/@oprearocks/eslint-backdoor-what-it-is-and-how-to-fix-the-issue-221f58f1a8c8)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 6.22. Modify session middleware settings\r\n\r\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\r\n\r\n**אמ;לק:** Each web framework and technology has its known weaknesses - telling an attacker which web framework we use is a great help for them. Using the default settings for session middlewares can expose your app to module- and framework-specific hijacking attacks in a similar way to the `X-Powered-By` header. Try hiding anything that identifies and reveals your tech stack (E.g. Node.js, express)\r\n\r\n**אחרת:** Cookies could be sent over insecure connections, and an attacker might use session identification to identify the underlying framework of the web application, as well as module-specific vulnerabilities\r\n\r\n🔗 [**Read More: Cookie and session security**](./sections/security/sessions.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 6.23. Avoid DOS attacks by explicitly setting when a process should crash\r\n\r\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\r\n\r\n**אמ;לק:** The Node process will crash when errors are not handled. Many best practices even recommend to exit even though an error was caught and got handled. Express, for example, will crash on any asynchronous error - unless you wrap routes with a catch clause. This opens a very sweet attack spot for attackers who recognize what input makes the process crash and repeatedly send the same request. There's no instant remedy for this but a few techniques can mitigate the pain: Alert with critical severity anytime a process crashes due to an unhandled error, validate the input and avoid crashing the process due to invalid user input, wrap all routes with a catch and consider not to crash when an error originated within a request (as opposed to what happens globally)\r\n\r\n**אחרת:** This is just an educated guess: given many Node.js applications, if we try passing an empty JSON body to all POST requests - a handful of applications will crash. At that point, we can just repeat sending the same request to take down the applications with ease\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 6.24. Prevent unsafe redirects\r\n\r\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a>\r\n\r\n**אמ;לק:** Redirects that do not validate user input can enable attackers to launch phishing scams, steal user credentials, and perform other malicious actions.\r\n\r\n**אחרת:** If an attacker discovers that you are not validating external, user-supplied input, they may exploit this vulnerability by posting specially-crafted links on forums, social media, and other public places to get users to click it.\r\n\r\n🔗 [**Read More: Prevent unsafe redirects**](./sections/security/saferedirects.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 6.25. Avoid publishing secrets to the npm registry\r\n\r\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\r\n\r\n**אמ;לק:** Precautions should be taken to avoid the risk of accidentally publishing secrets to public npm registries. An `.npmignore` file can be used to ignore specific files or folders, or the `files` array in `package.json` can act as an allow list.\r\n\r\n**אחרת:** Your project's API keys, passwords or other secrets are open to be abused by anyone who comes across them, which may result in financial loss, impersonation, and other risks.\r\n\r\n🔗 [**Read More: Avoid publishing secrets**](./sections/security/avoid_publishing_secrets.md)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 6.26 Inspect for outdated packages\r\n\r\n**אמ;לק:** Use your preferred tool (e.g. `npm outdated` or [npm-check-updates](https://www.npmjs.com/package/npm-check-updates)) to detect installed outdated packages, inject this check into your CI pipeline and even make a build fail in a severe scenario. For example, a severe scenario might be when an installed package is 5 patch commits behind (e.g. local version is 1.3.1 and repository version is 1.3.8) or it is tagged as deprecated by its author - kill the build and prevent deploying this version\r\n\r\n**אחרת:** Your production will run packages that have been explicitly tagged by their author as risky\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 6.27. Import built-in modules using the 'node:' protocol\r\n\r\n<a href=\"https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20A06:2021 – Vulnerable and Outdated Components-green.svg\" alt=\"\"/></a>\r\n\r\n**אמ;לק:** Import or require built-in Node.js modules using the 'node protocol' syntax:\r\n\r\n```javascript\r\nimport { functionName } from \"node:module\"; // note that 'node:' prefix\r\n```\r\n\r\nFor example:\r\n\r\n```javascript\r\nimport { createServer } from \"node:http\";\r\n```\r\n\r\nThis style ensures that there is no ambiguity with global npm packages and makes it clear for the reader that the code refers to a well-trusted official module. This style can be enforced with the eslint rule ['prefer-node-protocol'](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-node-protocol.md)\r\n\r\n**אחרת:** Using the import syntax without 'node:' prefix opens the door for [typosquatting attacks](https://en.wikipedia.org/wiki/Typosquatting) where one could mistakenly mistype a module name (e.g., 'event' instead of 'events) and get a malicious package that was built only to trick users into installing them\r\n\r\n<br/><br/><br/>\r\n\r\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ חזרה למעלה</a></p>\r\n\r\n# `7. טיוטה: ביצועים`\r\n\r\n## Our contributors are working on this section. [Would you like to join?](https://github.com/goldbergyoni/nodebestpractices/issues/256)\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 7.1. Don't block the event loop\r\n\r\n**אמ;לק:** Avoid CPU intensive tasks as they will block the mostly single-threaded Event Loop and offload those to a dedicated thread, process or even a different technology based on the context.\r\n\r\n**אחרת:** As the Event Loop is blocked, Node.js will be unable to handle other request thus causing delays for concurrent users. **3000 users are waiting for a response, the content is ready to be served, but one single request blocks the server from dispatching the results back**\r\n\r\n🔗 [**Read More: Do not block the event loop**](./sections/performance/block-loop.md)\r\n\r\n<br /><br /><br />\r\n\r\n## ![✔] 7.2. Prefer native JS methods over user-land utils like Lodash\r\n\r\n**אמ;לק:** It's often more penalising to use utility libraries like `lodash` and `underscore` over native methods as it leads to unneeded dependencies and slower performance.\r\nBear in mind that with the introduction of the new V8 engine alongside the new ES standards, native methods were improved in such a way that it's now about 50% more performant than utility libraries.\r\n\r\n**אחרת:** You'll have to maintain less performant projects where you could have simply used what was **already** available or dealt with a few more lines in exchange of a few more files.\r\n\r\n🔗 [**Read More: Native over user land utils**](./sections/performance/nativeoverutil.md)\r\n\r\n<br/><br/><br/>\r\n\r\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ חזרה למעלה</a></p>\r\n\r\n# `8. דוקר`\r\n\r\n🏅 Many thanks to [Bret Fisher](https://github.com/BretFisher) from whom we learned many of the following practices\r\n\r\n<br/><br/>\r\n\r\n## ![✔] 8.1 Use multi-stage builds for leaner and more secure Docker images\r\n\r\n**אמ;לק:** Use multi-stage build to copy only necessary production artifacts. A lot of build-time dependencies and files are not needed for running your application. With multi-stage builds these resources can be used during build while the runtime environment contains only what's necessary. Multi-stage builds are an easy way to get rid of overweight and security threats.\r\n\r\n**אחרת:** Larger images will take longer to build and ship, build-only tools might contain vulnerabilities and secrets only meant for the build phase might be leaked.\r\n\r\n### Example Dockerfile for multi-stage builds\r\n\r\n```dockerfile\r\nFROM node:14.4.0 AS build\r\n\r\nCOPY . .\r\nRUN npm ci && npm run build\r\n\r\n\r\nFROM node:slim-14.4.0\r\n\r\nUSER node\r\nEXPOSE 8080\r\n\r\nCOPY --from=build /home/node/app/dist /home/node/app/package.json /home/node/app/package-lock.json ./\r\nRUN npm ci --production\r\n\r\nCMD [ \"node\", \"dist/app.js\" ]\r\n```\r\n\r\n🔗 [**Read More: Use multi-stage builds**](./sections/docker/multi_stage_builds.md)\r\n\r\n<br /><br /><br />\r\n\r\n## ![✔] 8.2. Bootstrap using `node` command, avoid `npm start`\r\n\r\n**אמ;לק:** Use `CMD ['node','server.js']` to start your app, avoid using npm scripts which don't pass OS signals to the code. This prevents problems with child-processes, signal handling, graceful shutdown and having zombie processes\r\n\r\nUpdate: [Starting from npm 7, npm claim](https://docs.npmjs.com/cli/v7/using-npm/changelog#706-2020-10-27) to pass signals. We follow and will update accordingly\r\n\r\n**אחרת:** When no signals are passed, your code will never be notified about shutdowns. Without this, it will lose its chance to close properly possibly losing current requests and/or data\r\n\r\n[**Read More: Bootstrap container using node command, avoid npm start**](./sections/docker/bootstrap-using-node.md)\r\n\r\n<br /><br /><br />\r\n\r\n## ![✔] 8.3. Let the Docker runtime handle replication and uptime\r\n\r\n**אמ;לק:** When using a Docker run time orchestrator (e.g., Kubernetes), invoke the Node.js process directly without intermediate process managers or custom code that replicate the process (e.g. PM2, Cluster module). The runtime platform has the highest amount of data and visibility for making placement decision - It knows best how many processes are needed, how to spread them and what to do in case of crashes\r\n\r\n**אחרת:** Container keeps crashing due to lack of resources will get restarted indefinitely by the process manager. Should Kubernetes be aware of that, it could relocate it to a different roomy instance\r\n\r\n🔗 [**Read More: Let the Docker orchestrator restart and replicate processes**](./sections/docker/restart-and-replicate-processes.md)\r\n\r\n<br/><br /><br />\r\n\r\n## ![✔] 8.4. Use .dockerignore to prevent leaking secrets\r\n\r\n**TL;DR**: Include a `.dockerignore` file that filters out common secret files and development artifacts. By doing so, you might prevent secrets from leaking into the image. As a bonus the build time will significantly decrease. Also, ensure not to copy all files recursively rather explicitly choose what should be copied to Docker\r\n\r\n**Otherwise**: Common personal secret files like `.env`, `.aws` and `.npmrc` will be shared with anybody with access to the image (e.g. Docker repository)\r\n\r\n🔗 [**Read More: Use .dockerignore**](./sections/docker/docker-ignore.md)\r\n\r\n<br /><br /><br />\r\n\r\n## ![✔] 8.5. Clean-up dependencies before production\r\n\r\n**אמ;לק:** Although Dev-Dependencies are sometimes needed during the build and test life-cycle, eventually the image that is shipped to production should be minimal and clean from development dependencies. Doing so guarantees that only necessary code is shipped and the amount of potential attacks (i.e. attack surface) is minimized. When using multi-stage build (see dedicated bullet) this can be achieved by installing all dependencies first and finally running `npm ci --production`\r\n\r\n**אחרת:** Many of the infamous npm security breaches were found within development packages (e.g. [eslint-scope](https://eslint.org/blog/2018/07/postmortem-for-malicious-package-publishes))\r\n\r\n🔗 Read More: [Remove development dependencies](./sections/docker/install-for-production.md)\r\n\r\n<br /><br /><br />\r\n\r\n## ![✔] 8.6. Shutdown smartly and gracefully\r\n\r\n**אמ;לק:** Handle the process SIGTERM event and clean-up all existing connection and resources. This should be done while responding to ongoing requests. In Dockerized runtimes, shutting down containers is not a rare event, rather a frequent occurrence that happen as part of routine work. Achieving this demands some thoughtful code to orchestrate several moving parts: The load balancer, keep-alive connections, the HTTP server and other resources\r\n\r\n**אחרת:** Dying immediately means not responding to thousands of disappointed users\r\n\r\n🔗 [**Read More: Graceful shutdown**](./sections/docker/graceful-shutdown.md)\r\n\r\n<br /><br /><br />\r\n\r\n## ![✔] 8.7. Set memory limits using both Docker and v8\r\n\r\n**אמ;לק:** Always configure a memory limit using both Docker and the JavaScript runtime flags. The Docker limit is needed to make thoughtful container placement decision, the --v8's flag max-old-space is needed to kick off the GC on time and prevent under utilization of memory. Practically, set the v8's old space memory to be a just bit less than the container limit\r\n\r\n**אחרת:** The docker definition is needed to perform thoughtful scaling decision and prevent starving other citizens. Without also defining the v8's limits, it will under utilize the container resources - Without explicit instructions it crashes when utilizing ~50-60% of its host resources\r\n\r\n🔗 [**Read More: Set memory limits using Docker only**](./sections/docker/memory-limit.md)\r\n\r\n<br /><br /><br />\r\n\r\n## ![✔] 8.8. Plan for efficient caching\r\n\r\n**אמ;לק:** Rebuilding a whole docker image from cache can be nearly instantaneous if done correctly. The less updated instructions should be at the top of your Dockerfile and the ones constantly changing (like app code) should be at the bottom.\r\n\r\n**אחרת:** Docker build will be very long and consume lot of resources even when making tiny changes\r\n\r\n🔗 [**Read More: Leverage caching to reduce build times**](./sections/docker/use-cache-for-shorter-build-time.md)\r\n\r\n<br /><br /><br />\r\n\r\n## ![✔] 8.9. Use explicit image reference, avoid `latest` tag\r\n\r\n**אמ;לק:** Specify an explicit image digest or versioned label, never refer to `latest`. Developers are often led to believe that specifying the `latest` tag will provide them with the most recent image in the repository however this is not the case. Using a digest guarantees that every instance of the service is running exactly the same code.\r\n\r\nIn addition, referring to an image tag means that the base image is subject to change, as image tags cannot be relied upon for a deterministic install. Instead, if a deterministic install is expected, a SHA256 digest can be used to reference an exact image.\r\n\r\n**אחרת:** A new version of a base image could be deployed into production with breaking changes, causing unintended application behaviour.\r\n\r\n🔗 [**Read More: Understand image tags and use the \"latest\" tag with caution**](./sections/docker/image-tags.md)\r\n\r\n<br /><br /><br />\r\n\r\n## ![✔] 8.10. Prefer smaller Docker base images\r\n\r\n**אמ;לק:** Large images lead to higher exposure to vulnerabilities and increased resource consumption. Using leaner Docker images, such as Slim and Alpine Linux variants, mitigates this issue.\r\n\r\n**אחרת:** Building, pushing, and pulling images will take longer, unknown attack vectors can be used by malicious actors and more resources are consumed.\r\n\r\n🔗 [**Read More: Prefer smaller images**](./sections/docker/smaller_base_images.md)\r\n\r\n<br /><br /><br />\r\n\r\n## ![✔] 8.11. Clean-out build-time secrets, avoid secrets in args\r\n\r\n**אמ;לק:** Avoid secrets leaking from the Docker build environment. A Docker image is typically shared in multiple environment like CI and a registry that are not as sanitized as production. A typical example is an npm token which is usually passed to a dockerfile as argument. This token stays within the image long after it is needed and allows the attacker indefinite access to a private npm registry. This can be avoided by coping a secret file like `.npmrc` and then removing it using multi-stage build (beware, build history should be deleted as well) or by using Docker build-kit secret feature which leaves zero traces\r\n\r\n**אחרת:** Everyone with access to the CI and docker registry will also get access to some precious organization secrets as a bonus\r\n\r\n🔗 [**Read More: Clean-out build-time secrets**](./sections/docker/avoid-build-time-secrets.md)\r\n\r\n<br /><br /><br />\r\n\r\n## ![✔] 8.12. Scan images for multi layers of vulnerabilities\r\n\r\n**אמ;לק:** Besides checking code dependencies vulnerabilities also scan the final image that is shipped to production. Docker image scanners check the code dependencies but also the OS binaries. This E2E security scan covers more ground and verifies that no bad guy injected bad things during the build. Consequently, it is recommended running this as the last step before deployment. There are a handful of free and commercial scanners that also provide CI/CD plugins\r\n\r\n**אחרת:** Your code might be entirely free from vulnerabilities. However it might still get hacked due to vulnerable version of OS-level binaries (e.g. OpenSSL, TarBall) that are commonly being used by applications\r\n\r\n🔗 [**Read More: Scan the entire image before production**](./sections/docker/scan-images.md)\r\n\r\n<br /><br /><br />\r\n\r\n## ![✔] 8.13 Clean NODE_MODULE cache\r\n\r\n**אמ;לק:** After installing dependencies in a container remove the local cache. It doesn't make any sense to duplicate the dependencies for faster future installs since there won't be any further installs - A Docker image is immutable. Using a single line of code tens of MB (typically 10-50% of the image size) are shaved off\r\n\r\n**אחרת:** The image that will get shipped to production will weigh 30% more due to files that will never get used\r\n\r\n🔗 [**Read More: Clean NODE_MODULE cache**](./sections/docker/clean-cache.md)\r\n\r\n<br /><br /><br />\r\n\r\n## ![✔] 8.14. Generic Docker practices\r\n\r\n**אמ;לק:** This is a collection of Docker advice that is not related directly to Node.js - the Node implementation is not much different than any other language. Click read more to skim through.\r\n\r\n🔗 [**Read More: Generic Docker practices**](./sections/docker/generic-tips.md)\r\n\r\n<br/><br /><br />\r\n\r\n## ![✔] 8.15. Lint your Dockerfile\r\n\r\n**אמ;לק:** Linting your Dockerfile is an important step to identify issues in your Dockerfile which differ from best practices. By checking for potential flaws using a specialised Docker linter, performance and security improvements can be easily identified, saving countless hours of wasted time or security issues in production code.\r\n\r\n**אחרת:** Mistakenly the Dockerfile creator left Root as the production user, and also used an image from unknown source repository. This could be avoided with with just a simple linter.\r\n\r\n🔗 [**Read More: Lint your Dockerfile**](./sections/docker/lint-dockerfile.md)\r\n\r\n<br/><br /><br />\r\n\r\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ חזרה למעלה</a></p>\r\n\r\n# Milestones\r\n\r\nTo maintain this guide and keep it up to date, we are constantly updating and improving the guidelines and best practices with the help of the community. You can follow our [milestones](https://github.com/goldbergyoni/nodebestpractices/milestones) and join the working groups if you want to contribute to this project\r\n\r\n<br/>\r\n\r\n## Translations\r\n\r\nAll translations are contributed by the community. We will be happy to get any help with either completed, ongoing or new translations!\r\n\r\n### Completed translations\r\n\r\n- ![BR](./assets/flags/BR.png) [Brazilian Portuguese](./README.brazilian-portuguese.md) - Courtesy of [Marcelo Melo](https://github.com/marcelosdm)\r\n- ![CN](./assets/flags/CN.png) [Chinese](./README.chinese.md) - Courtesy of [Matt Jin](https://github.com/mattjin)\r\n- ![RU](./assets/flags/RU.png) [Russian](./README.russian.md) - Courtesy of [Alex Ivanov](https://github.com/contributorpw)\r\n- ![PL](./assets/flags/PL.png) [Polish](./README.polish.md) - Courtesy of [Michal Biesiada](https://github.com/mbiesiad)\r\n- ![JA](./assets/flags/JA.png) [Japanese](./README.japanese.md) - Courtesy of [Yuki Ota](https://github.com/YukiOta), [Yuta Azumi](https://github.com/YA21)\r\n- ![EU](./assets/flags/EU.png) [Basque](README.basque.md) - Courtesy of [Ane Diaz de Tuesta](https://github.com/anediaz) & Joxefe Diaz de Tuesta\r\n\r\n### Translations in progress\r\n\r\n- ![FR](./assets/flags/FR.png) [French](./README.french.md) ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/129))\r\n- ![HE](./assets/flags/HE.png) Hebrew ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/156))\r\n- ![KR](./assets/flags/KR.png) [Korean](README.korean.md) - Courtesy of [Sangbeom Han](https://github.com/uronly14me) ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/94))\r\n- ![ES](./assets/flags/ES.png) [Spanish](https://github.com/goldbergyoni/nodebestpractices/blob/spanish-translation/README.spanish.md) ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/95))\r\n- ![TR](./assets/flags/TR.png) Turkish ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/139))\r\n\r\n<br/><br/>\r\n\r\n## Steering Committee\r\n\r\nMeet the steering committee members - the people who work together to provide guidance and future direction to the project. In addition, each member of the committee leads a project tracked under our [GitHub projects](https://github.com/goldbergyoni/nodebestpractices/projects).\r\n\r\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/yoni.png\"/>\r\n\r\n[Yoni Goldberg](https://github.com/goldbergyoni)\r\n<a href=\"https://twitter.com/goldbergyoni\"><img src=\"assets/images/twitter.svg\" width=\"16\" height=\"16\"></img></a>\r\n<a href=\"https://goldbergyoni.com\"><img src=\"assets/images/web.svg\" width=\"16\" height=\"16\"></img></a>\r\n\r\nIndependent Node.js consultant who works with customers in the USA, Europe, and Israel on building large-scale Node.js applications. Many of the best practices above were first published at [goldbergyoni.com](https://goldbergyoni.com). Reach Yoni at [@goldbergyoni](https://github.com/goldbergyoni) or [me@goldbergyoni.com](mailto:me@goldbergyoni.com)\r\n\r\n<br/>\r\n\r\n<a id=\"josh-hemphill\" href=\"https://github.com/josh-hemphill\" target=\"_blank\"><img src=\"assets/images/members/josh-hemphill.png\" align=\"left\" width=\"100\" height=\"100\" alt=\"Josh Hemphill\" loading=\"lazy\"/></a>\r\n\r\n[Josh Hemphill](https://github.com/josh-hemphill)\r\n<a href=\"https://twitter.com/spooklogical\"><img src=\"assets/images/twitter.svg\" width=\"16\" height=\"16\"></img></a>\r\n<a href=\"https://www.linkedin.com/in/joshuahemphill/\"><img src=\"assets/images/linkedin.svg\" width=\"16\" height=\"16\"></img></a>\r\n<a href=\"https://joshuahemphill.com\"><img src=\"assets/images/web.svg\" width=\"16\" height=\"16\"></img></a>\r\n\r\nFull Stack Software Engineer / Developer specializing in Security, DevOps/DevSecOps, and ERP Integrations.\r\n\r\n<br/>\r\n\r\n<a id=\"raz-luvaton\" href=\"https://github.com/rluvaton\" target=\"_blank\"><img src=\"assets/images/members/raz-luvaton.jpg\" align=\"left\" width=\"100\" height=\"100\" alt=\"Raz Luvaton\" loading=\"lazy\"/></a>\r\n\r\n[Raz Luvaton](https://github.com/rluvaton)\r\n<a href=\"https://twitter.com/rluvaton\"><img src=\"assets/images/twitter.svg\" width=\"16\" height=\"16\"></img></a>\r\n<a href=\"https://www.linkedin.com/in/rluvaton/\"><img src=\"assets/images/linkedin.svg\" width=\"16\" height=\"16\"></img></a>\r\n\r\nFull Stack Developer who knows how to exit from Vim and loves Architecture, Virtualization and Security.\r\n\r\n<br/>\r\n\r\n## Contributing\r\n\r\nIf you've ever wanted to contribute to open source, now is your chance! See the [contributing docs](.operations/CONTRIBUTING.md) for more information.\r\n\r\n## Contributors ✨\r\n\r\nThanks goes to these wonderful people who have contributed to this repository!\r\n\r\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\r\n<!-- prettier-ignore-start -->\r\n<!-- markdownlint-disable -->\r\n<table>\r\n  <tbody>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kevinrambaud\"><img src=\"https://avatars1.githubusercontent.com/u/7501477?v=4\" width=\"100px;\" alt=\"Kevin Rambaud\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kevin Rambaud</b></sub></a><br /><a href=\"#content-kevinrambaud\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mfine15\"><img src=\"https://avatars1.githubusercontent.com/u/1286554?v=4\" width=\"100px;\" alt=\"Michael Fine\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Michael Fine</b></sub></a><br /><a href=\"#content-mfine15\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://squgeim.github.io\"><img src=\"https://avatars0.githubusercontent.com/u/4996818?v=4\" width=\"100px;\" alt=\"Shreya Dahal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shreya Dahal</b></sub></a><br /><a href=\"#content-squgeim\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://matheusrocha89.com\"><img src=\"https://avatars1.githubusercontent.com/u/3718366?v=4\" width=\"100px;\" alt=\"Matheus Cruz Rocha\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Matheus Cruz Rocha</b></sub></a><br /><a href=\"#content-matheusrocha89\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://bityog.github.io/Portfolio/\"><img src=\"https://avatars2.githubusercontent.com/u/28219178?v=4\" width=\"100px;\" alt=\"Yog Mehta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yog Mehta</b></sub></a><br /><a href=\"#content-BitYog\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://kudapara.co.zw\"><img src=\"https://avatars3.githubusercontent.com/u/13519184?v=4\" width=\"100px;\" alt=\"Kudakwashe Paradzayi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kudakwashe Paradzayi</b></sub></a><br /><a href=\"#content-kudapara\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.t1st3.com/\"><img src=\"https://avatars1.githubusercontent.com/u/1469638?v=4\" width=\"100px;\" alt=\"t1st3\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>t1st3</b></sub></a><br /><a href=\"#content-t1st3\" title=\"Content\">🖋</a></td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mulijordan1976\"><img src=\"https://avatars0.githubusercontent.com/u/33382022?v=4\" width=\"100px;\" alt=\"mulijordan1976\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>mulijordan1976</b></sub></a><br /><a href=\"#content-mulijordan1976\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/matchai\"><img src=\"https://avatars0.githubusercontent.com/u/4658208?v=4\" width=\"100px;\" alt=\"Matan Kushner\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Matan Kushner</b></sub></a><br /><a href=\"#content-matchai\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://fabiothiroki.github.io\"><img src=\"https://avatars2.githubusercontent.com/u/670057?v=4\" width=\"100px;\" alt=\"Fabio Hiroki\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Fabio Hiroki</b></sub></a><br /><a href=\"#content-fabiothiroki\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://james.sumners.info/\"><img src=\"https://avatars1.githubusercontent.com/u/321201?v=4\" width=\"100px;\" alt=\"James Sumners\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>James Sumners</b></sub></a><br /><a href=\"#content-jsumners\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/_DanGamble\"><img src=\"https://avatars2.githubusercontent.com/u/7152041?v=4\" width=\"100px;\" alt=\"Dan Gamble\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dan Gamble</b></sub></a><br /><a href=\"#content-dan-gamble\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/trainorpj\"><img src=\"https://avatars3.githubusercontent.com/u/13276704?v=4\" width=\"100px;\" alt=\"PJ Trainor\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>PJ Trainor</b></sub></a><br /><a href=\"#content-trainorpj\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/reod\"><img src=\"https://avatars0.githubusercontent.com/u/3164299?v=4\" width=\"100px;\" alt=\"Remek Ambroziak\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Remek Ambroziak</b></sub></a><br /><a href=\"#content-reod\" title=\"Content\">🖋</a></td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://ca.non.co.il\"><img src=\"https://avatars0.githubusercontent.com/u/1829789?v=4\" width=\"100px;\" alt=\"Yoni Jah\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yoni Jah</b></sub></a><br /><a href=\"#content-yonjah\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/hazolsky\"><img src=\"https://avatars1.githubusercontent.com/u/1270790?v=4\" width=\"100px;\" alt=\"Misha Khokhlov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Misha Khokhlov</b></sub></a><br /><a href=\"#content-hazolsky\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://plus.google.com/+ЕвгенийОрехов/\"><img src=\"https://avatars3.githubusercontent.com/u/8045060?v=4\" width=\"100px;\" alt=\"Evgeny Orekhov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Evgeny Orekhov</b></sub></a><br /><a href=\"#content-EvgenyOrekhov\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/gediminasml\"><img src=\"https://avatars3.githubusercontent.com/u/19854105?v=4\" width=\"100px;\" alt=\"-\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>-</b></sub></a><br /><a href=\"#content-gediminasml\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://hisaac.net\"><img src=\"https://avatars3.githubusercontent.com/u/923876?v=4\" width=\"100px;\" alt=\"Isaac Halvorson\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Isaac Halvorson</b></sub></a><br /><a href=\"#content-hisaac\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.vedrankaracic.com\"><img src=\"https://avatars3.githubusercontent.com/u/2808092?v=4\" width=\"100px;\" alt=\"Vedran Karačić\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vedran Karačić</b></sub></a><br /><a href=\"#content-vkaracic\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/lallenlowe\"><img src=\"https://avatars3.githubusercontent.com/u/10761165?v=4\" width=\"100px;\" alt=\"lallenlowe\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>lallenlowe</b></sub></a><br /><a href=\"#content-lallenlowe\" title=\"Content\">🖋</a></td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/nwwells\"><img src=\"https://avatars2.githubusercontent.com/u/1039473?v=4\" width=\"100px;\" alt=\"Nathan Wells\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nathan Wells</b></sub></a><br /><a href=\"#content-nwwells\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/paulovitin\"><img src=\"https://avatars0.githubusercontent.com/u/125503?v=4\" width=\"100px;\" alt=\"Paulo Reis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Paulo Reis</b></sub></a><br /><a href=\"#content-paulovitin\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://snap.simpego.ch\"><img src=\"https://avatars2.githubusercontent.com/u/1989646?v=4\" width=\"100px;\" alt=\"syzer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>syzer</b></sub></a><br /><a href=\"#content-syzer\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://sancho.dev\"><img src=\"https://avatars0.githubusercontent.com/u/3763599?v=4\" width=\"100px;\" alt=\"David Sancho\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>David Sancho</b></sub></a><br /><a href=\"#content-davesnx\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://apiforge.it\"><img src=\"https://avatars0.githubusercontent.com/u/4929965?v=4\" width=\"100px;\" alt=\"Robert Manolea\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Robert Manolea</b></sub></a><br /><a href=\"#content-pupix\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://jumptoglide.com\"><img src=\"https://avatars2.githubusercontent.com/u/708395?v=4\" width=\"100px;\" alt=\"Xavier Ho\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Xavier Ho</b></sub></a><br /><a href=\"#content-spaxe\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.ocular-rhythm.io\"><img src=\"https://avatars0.githubusercontent.com/u/2738518?v=4\" width=\"100px;\" alt=\"Aaron\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Aaron</b></sub></a><br /><a href=\"#content-ocularrhythm\" title=\"Content\">🖋</a></td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://septa97.me\"><img src=\"https://avatars2.githubusercontent.com/u/13742634?v=4\" width=\"100px;\" alt=\"Jan Charles Maghirang Adona\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jan Charles Maghirang Adona</b></sub></a><br /><a href=\"#content-septa97\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.cakeresume.com/allenfang\"><img src=\"https://avatars2.githubusercontent.com/u/5351390?v=4\" width=\"100px;\" alt=\"Allen\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Allen</b></sub></a><br /><a href=\"#content-AllenFang\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/leonardovillela\"><img src=\"https://avatars3.githubusercontent.com/u/8650543?v=4\" width=\"100px;\" alt=\"Leonardo Villela\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Leonardo Villela</b></sub></a><br /><a href=\"#content-leonardovillela\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://michalzalecki.com\"><img src=\"https://avatars1.githubusercontent.com/u/3136577?v=4\" width=\"100px;\" alt=\"Michał Załęcki\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Michał Załęcki</b></sub></a><br /><a href=\"#content-MichalZalecki\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.wealthbar.com\"><img src=\"https://avatars1.githubusercontent.com/u/156449?v=4\" width=\"100px;\" alt=\"Chris Nicola\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Chris Nicola</b></sub></a><br /><a href=\"#content-chrisnicola\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/aecorredor\"><img src=\"https://avatars3.githubusercontent.com/u/9114987?v=4\" width=\"100px;\" alt=\"Alejandro Corredor\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alejandro Corredor</b></sub></a><br /><a href=\"#content-aecorredor\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/cwar\"><img src=\"https://avatars3.githubusercontent.com/u/272843?v=4\" width=\"100px;\" alt=\"cwar\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>cwar</b></sub></a><br /><a href=\"#content-cwar\" title=\"Content\">🖋</a></td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/keyfoxth\"><img src=\"https://avatars3.githubusercontent.com/u/10647132?v=4\" width=\"100px;\" alt=\"Yuwei\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yuwei</b></sub></a><br /><a href=\"#content-keyfoxth\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://bigcodenerd.org\"><img src=\"https://avatars3.githubusercontent.com/u/10895594?v=4\" width=\"100px;\" alt=\"Utkarsh Bhatt\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Utkarsh Bhatt</b></sub></a><br /><a href=\"#content-utkarshbhatt12\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/duartemendes\"><img src=\"https://avatars2.githubusercontent.com/u/12852058?v=4\" width=\"100px;\" alt=\"Duarte Mendes\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Duarte Mendes</b></sub></a><br /><a href=\"#content-duartemendes\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://jasonkim.ca\"><img src=\"https://avatars2.githubusercontent.com/u/103456?v=4\" width=\"100px;\" alt=\"Jason Kim\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jason Kim</b></sub></a><br /><a href=\"#content-serv\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Max101\"><img src=\"https://avatars2.githubusercontent.com/u/2124249?v=4\" width=\"100px;\" alt=\"Mitja O.\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Mitja O.</b></sub></a><br /><a href=\"#content-Max101\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://sandromiguel.com\"><img src=\"https://avatars0.githubusercontent.com/u/6423157?v=4\" width=\"100px;\" alt=\"Sandro Miguel Marques\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sandro Miguel Marques</b></sub></a><br /><a href=\"#content-SandroMiguel\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/GabeKuslansky\"><img src=\"https://avatars3.githubusercontent.com/u/9855482?v=4\" width=\"100px;\" alt=\"Gabe\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Gabe</b></sub></a><br /><a href=\"#content-GabeKuslansky\" title=\"Content\">🖋</a></td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://ripper234.com/\"><img src=\"https://avatars1.githubusercontent.com/u/172282?v=4\" width=\"100px;\" alt=\"Ron Gross\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ron Gross</b></sub></a><br /><a href=\"#content-ripper234\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.thecodebarbarian.com\"><img src=\"https://avatars2.githubusercontent.com/u/1620265?v=4\" width=\"100px;\" alt=\"Valeri Karpov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Valeri Karpov</b></sub></a><br /><a href=\"#content-vkarpov15\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://sergiobernal.com\"><img src=\"https://avatars3.githubusercontent.com/u/20087388?v=4\" width=\"100px;\" alt=\"Sergio Bernal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sergio Bernal</b></sub></a><br /><a href=\"#content-imsergiobernal\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ntelkedzhiev\"><img src=\"https://avatars2.githubusercontent.com/u/7332371?v=4\" width=\"100px;\" alt=\"Nikola Telkedzhiev\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nikola Telkedzhiev</b></sub></a><br /><a href=\"#content-ntelkedzhiev\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/vitordagamagodoy\"><img src=\"https://avatars0.githubusercontent.com/u/26370059?v=4\" width=\"100px;\" alt=\"Vitor Godoy\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vitor Godoy</b></sub></a><br /><a href=\"#content-vitordagamagodoy\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.manishsaraan.com/\"><img src=\"https://avatars2.githubusercontent.com/u/19797340?v=4\" width=\"100px;\" alt=\"Manish Saraan\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Manish Saraan</b></sub></a><br /><a href=\"#content-manishsaraan\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/uronly14me\"><img src=\"https://avatars2.githubusercontent.com/u/5186814?v=4\" width=\"100px;\" alt=\"Sangbeom Han\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sangbeom Han</b></sub></a><br /><a href=\"#content-uronly14me\" title=\"Content\">🖋</a></td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://blackmatch.github.io\"><img src=\"https://avatars3.githubusercontent.com/u/12443954?v=4\" width=\"100px;\" alt=\"blackmatch\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>blackmatch</b></sub></a><br /><a href=\"#content-blackmatch\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://simmsreeve.com\"><img src=\"https://avatars3.githubusercontent.com/u/5173131?v=4\" width=\"100px;\" alt=\"Joe Reeve\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Joe Reeve</b></sub></a><br /><a href=\"#content-ISNIT0\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/BusbyActual\"><img src=\"https://avatars2.githubusercontent.com/u/14985016?v=4\" width=\"100px;\" alt=\"Ryan Busby\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ryan Busby</b></sub></a><br /><a href=\"#content-BusbyActual\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://jsdecorator.com\"><img src=\"https://avatars3.githubusercontent.com/u/4482199?v=4\" width=\"100px;\" alt=\"Iman Mohamadi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Iman Mohamadi</b></sub></a><br /><a href=\"#content-ImanMh\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/HeeL\"><img src=\"https://avatars1.githubusercontent.com/u/287769?v=4\" width=\"100px;\" alt=\"Sergii Paryzhskyi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sergii Paryzhskyi</b></sub></a><br /><a href=\"#content-HeeL\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kapilepatel\"><img src=\"https://avatars3.githubusercontent.com/u/25738473?v=4\" width=\"100px;\" alt=\"Kapil Patel\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kapil Patel</b></sub></a><br /><a href=\"#content-kapilepatel\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/justjavac\"><img src=\"https://avatars1.githubusercontent.com/u/359395?v=4\" width=\"100px;\" alt=\"迷渡\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>迷渡</b></sub></a><br /><a href=\"#content-justjavac\" title=\"Content\">🖋</a></td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/hozefaj\"><img src=\"https://avatars1.githubusercontent.com/u/2084833?v=4\" width=\"100px;\" alt=\"Hozefa\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Hozefa</b></sub></a><br /><a href=\"#content-hozefaj\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/el-ethan\"><img src=\"https://avatars3.githubusercontent.com/u/10249884?v=4\" width=\"100px;\" alt=\"Ethan\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ethan</b></sub></a><br /><a href=\"#content-el-ethan\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/milkdeliver\"><img src=\"https://avatars2.githubusercontent.com/u/3108407?v=4\" width=\"100px;\" alt=\"Sam\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sam</b></sub></a><br /><a href=\"#content-milkdeliver\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ArlindXh\"><img src=\"https://avatars0.githubusercontent.com/u/19508764?v=4\" width=\"100px;\" alt=\"Arlind\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Arlind</b></sub></a><br /><a href=\"#content-ArlindXh\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ttous\"><img src=\"https://avatars0.githubusercontent.com/u/19815440?v=4\" width=\"100px;\" alt=\"Teddy Toussaint\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Teddy Toussaint</b></sub></a><br /><a href=\"#content-ttous\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://ardern.io\"><img src=\"https://avatars2.githubusercontent.com/u/2419690?v=4\" width=\"100px;\" alt=\"Lewis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Lewis</b></sub></a><br /><a href=\"#content-LewisArdern\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://gabriellidenor.com/\"><img src=\"https://avatars2.githubusercontent.com/u/765963?v=4\" width=\"100px;\" alt=\"Gabriel Lidenor \"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Gabriel Lidenor </b></sub></a><br /><a href=\"#content-GabrielLidenor\" title=\"Content\">🖋</a></td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/animir\"><img src=\"https://avatars3.githubusercontent.com/u/4623196?v=4\" width=\"100px;\" alt=\"Roman\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Roman</b></sub></a><br /><a href=\"#content-animir\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Francozeira\"><img src=\"https://avatars1.githubusercontent.com/u/47419763?v=4\" width=\"100px;\" alt=\"Francozeira\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Francozeira</b></sub></a><br /><a href=\"#content-Francozeira\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/invvard\"><img src=\"https://avatars0.githubusercontent.com/u/7305493?v=4\" width=\"100px;\" alt=\"Invvard\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Invvard</b></sub></a><br /><a href=\"#content-Invvard\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://romulogarofalo.github.io/\"><img src=\"https://avatars1.githubusercontent.com/u/18492592?v=4\" width=\"100px;\" alt=\"Rômulo Garofalo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Rômulo Garofalo</b></sub></a><br /><a href=\"#content-romulogarofalo\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://thoqbk.github.io/\"><img src=\"https://avatars0.githubusercontent.com/u/1491103?v=4\" width=\"100px;\" alt=\"Tho Q Luong\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tho Q Luong</b></sub></a><br /><a href=\"#content-thoqbk\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Qeneke\"><img src=\"https://avatars2.githubusercontent.com/u/20271568?v=4\" width=\"100px;\" alt=\"Burak Shen\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Burak Shen</b></sub></a><br /><a href=\"#content-Qeneke\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.happy-css.com\"><img src=\"https://avatars0.githubusercontent.com/u/2950505?v=4\" width=\"100px;\" alt=\"Martin Muzatko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Martin Muzatko</b></sub></a><br /><a href=\"#content-MartinMuzatko\" title=\"Content\">🖋</a></td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/autoboxer\"><img src=\"https://avatars3.githubusercontent.com/u/2757601?v=4\" width=\"100px;\" alt=\"Jared Collier\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jared Collier</b></sub></a><br /><a href=\"#content-autoboxer\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://hiltonmeyer.com\"><img src=\"https://avatars3.githubusercontent.com/u/4545860?v=4\" width=\"100px;\" alt=\"Hilton Meyer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Hilton Meyer</b></sub></a><br /><a href=\"#content-bikingbadger\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://kr.vuejs.org\"><img src=\"https://avatars0.githubusercontent.com/u/1451365?v=4\" width=\"100px;\" alt=\"ChangJoo Park(박창주)\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>ChangJoo Park(박창주)</b></sub></a><br /><a href=\"#content-ChangJoo-Park\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/MasahiroSakaguchi\"><img src=\"https://avatars0.githubusercontent.com/u/16427431?v=4\" width=\"100px;\" alt=\"Masahiro Sakaguchi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Masahiro Sakaguchi</b></sub></a><br /><a href=\"#content-MasahiroSakaguchi\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/TheHollidayInn\"><img src=\"https://avatars1.githubusercontent.com/u/1253400?v=4\" width=\"100px;\" alt=\"Keith Holliday\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Keith Holliday</b></sub></a><br /><a href=\"#content-TheHollidayInn\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.coreycleary.me\"><img src=\"https://avatars3.githubusercontent.com/u/1485356?v=4\" width=\"100px;\" alt=\"coreyc\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>coreyc</b></sub></a><br /><a href=\"#content-coreyc\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://maxcubing.wordpress.com\"><img src=\"https://avatars0.githubusercontent.com/u/8260834?v=4\" width=\"100px;\" alt=\"Maximilian Berkmann\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Maximilian Berkmann</b></sub></a><br /><a href=\"#content-Berkmann18\" title=\"Content\">🖋</a></td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/DouglasMV\"><img src=\"https://avatars3.githubusercontent.com/u/32845487?v=4\" width=\"100px;\" alt=\"Douglas Mariano Valero\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Douglas Mariano Valero</b></sub></a><br /><a href=\"#content-DouglasMV\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/marcelosdm\"><img src=\"https://avatars0.githubusercontent.com/u/18266600?v=4\" width=\"100px;\" alt=\"Marcelo Melo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Marcelo Melo</b></sub></a><br /><a href=\"#content-marcelosdm\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/mperk_\"><img src=\"https://avatars0.githubusercontent.com/u/3465794?v=4\" width=\"100px;\" alt=\"Mehmet Perk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Mehmet Perk</b></sub></a><br /><a href=\"#content-mperk\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ryanouyang\"><img src=\"https://avatars2.githubusercontent.com/u/360426?v=4\" width=\"100px;\" alt=\"ryan ouyang\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>ryan ouyang</b></sub></a><br /><a href=\"#content-ryanouyang\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/shabeer-mdy\"><img src=\"https://avatars0.githubusercontent.com/u/26842535?v=4\" width=\"100px;\" alt=\"Shabeer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shabeer</b></sub></a><br /><a href=\"#content-shabeer-mdy\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/halfzebra\"><img src=\"https://avatars1.githubusercontent.com/u/3983879?v=4\" width=\"100px;\" alt=\"Eduard Kyvenko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Eduard Kyvenko</b></sub></a><br /><a href=\"#content-halfzebra\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://deyvisonrocha.com\"><img src=\"https://avatars2.githubusercontent.com/u/686067?v=4\" width=\"100px;\" alt=\"Deyvison Rocha\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Deyvison Rocha</b></sub></a><br /><a href=\"#content-deyvisonrocha\" title=\"Content\">🖋</a></td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://twitter.com/georgemamer\"><img src=\"https://avatars1.githubusercontent.com/u/20108934?v=4\" width=\"100px;\" alt=\"George Mamer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>George Mamer</b></sub></a><br /><a href=\"#content-georgem3\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/leimonio\"><img src=\"https://avatars0.githubusercontent.com/u/1969742?v=4\" width=\"100px;\" alt=\"Konstantinos Leimonis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Konstantinos Leimonis</b></sub></a><br /><a href=\"#content-leimonio\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Zybax\"><img src=\"https://avatars3.githubusercontent.com/u/22094453?v=4\" width=\"100px;\" alt=\"Oliver Lluberes\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Oliver Lluberes</b></sub></a><br /><a href=\"#translation-Zybax\" title=\"Translation\">🌍</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://stackoverflow.com/story/tiendq\"><img src=\"https://avatars2.githubusercontent.com/u/815910?v=4\" width=\"100px;\" alt=\"Tien Do\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tien Do</b></sub></a><br /><a href=\"#content-tiendq\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://singh1114.github.io/\"><img src=\"https://avatars0.githubusercontent.com/u/11356398?v=4\" width=\"100px;\" alt=\"Ranvir Singh\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ranvir Singh</b></sub></a><br /><a href=\"#content-singh1114\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/collierrgbsitisfise\"><img src=\"https://avatars3.githubusercontent.com/u/13496126?v=4\" width=\"100px;\" alt=\"Vadim Nicolaev\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vadim Nicolaev</b></sub></a><br /><a href=\"#content-collierrgbsitisfise\" title=\"Content\">🖋</a> <a href=\"#translation-collierrgbsitisfise\" title=\"Translation\">🌍</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/germangamboa95\"><img src=\"https://avatars3.githubusercontent.com/u/28633849?v=4\" width=\"100px;\" alt=\"German Gamboa Gonzalez\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>German Gamboa Gonzalez</b></sub></a><br /><a href=\"#content-germangamboa95\" title=\"Content\">🖋</a></td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/AbdelrahmanHafez\"><img src=\"https://avatars3.githubusercontent.com/u/19984935?v=4\" width=\"100px;\" alt=\"Hafez\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Hafez</b></sub></a><br /><a href=\"#content-AbdelrahmanHafez\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://linkedin.com/in/chandiran-dmc\"><img src=\"https://avatars3.githubusercontent.com/u/42678579?v=4\" width=\"100px;\" alt=\"Chandiran\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Chandiran</b></sub></a><br /><a href=\"#content-chandiran-dmc\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/VinayaSathyanarayana\"><img src=\"https://avatars2.githubusercontent.com/u/16976677?v=4\" width=\"100px;\" alt=\"VinayaSathyanarayana\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>VinayaSathyanarayana</b></sub></a><br /><a href=\"#content-VinayaSathyanarayana\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.kimkern.de\"><img src=\"https://avatars1.githubusercontent.com/u/2671139?v=4\" width=\"100px;\" alt=\"Kim Kern\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kim Kern</b></sub></a><br /><a href=\"#content-kiwikern\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://kennethfreitas.github.io/\"><img src=\"https://avatars2.githubusercontent.com/u/55669043?v=4\" width=\"100px;\" alt=\"Kenneth Freitas\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kenneth Freitas</b></sub></a><br /><a href=\"#content-kennethfreitas\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/songe\"><img src=\"https://avatars2.githubusercontent.com/u/1531561?v=4\" width=\"100px;\" alt=\"songe\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>songe</b></sub></a><br /><a href=\"#content-songe\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://ksed.dev\"><img src=\"https://avatars1.githubusercontent.com/u/30693707?v=4\" width=\"100px;\" alt=\"Kirill Shekhovtsov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kirill Shekhovtsov</b></sub></a><br /><a href=\"#content-Ksedline\" title=\"Content\">🖋</a></td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/SerzN1\"><img src=\"https://avatars0.githubusercontent.com/u/2534649?v=4\" width=\"100px;\" alt=\"Serge\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Serge</b></sub></a><br /><a href=\"#content-SerzN1\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/keyrwinz\"><img src=\"https://avatars3.githubusercontent.com/u/21241761?v=4\" width=\"100px;\" alt=\"keyrwinz\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>keyrwinz</b></sub></a><br /><a href=\"#content-keyrwinz\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/nDmitry\"><img src=\"https://avatars0.githubusercontent.com/u/2134568?v=4\" width=\"100px;\" alt=\"Dmitry Nikitenko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dmitry Nikitenko</b></sub></a><br /><a href=\"#content-nDmitry\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://bushuai.cc\"><img src=\"https://avatars0.githubusercontent.com/u/1875256?v=4\" width=\"100px;\" alt=\"bushuai\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>bushuai</b></sub></a><br /><a href=\"https://github.com/goldbergyoni/nodebestpractices/pulls?q=is%3Apr+reviewed-by%3Abushuai\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#content-bushuai\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://stackoverflow.com/users/1348195/benjamin-gruenbaum\"><img src=\"https://avatars2.githubusercontent.com/u/1315533?v=4\" width=\"100px;\" alt=\"Benjamin Gruenbaum\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Benjamin Gruenbaum</b></sub></a><br /><a href=\"#content-benjamingr\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/byeze\"><img src=\"https://avatars1.githubusercontent.com/u/7424138?v=4\" width=\"100px;\" alt=\"Ezequiel\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ezequiel</b></sub></a><br /><a href=\"#translation-byeze\" title=\"Translation\">🌍</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/juaoose\"><img src=\"https://avatars3.githubusercontent.com/u/994594?v=4\" width=\"100px;\" alt=\"Juan José Rodríguez\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Juan José Rodríguez</b></sub></a><br /><a href=\"#translation-juaoose\" title=\"Translation\">🌍</a></td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/OrBin\"><img src=\"https://avatars1.githubusercontent.com/u/6897234?v=4\" width=\"100px;\" alt=\"Or Bin\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Or Bin</b></sub></a><br /><a href=\"#content-OrBin\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/andreoav07\"><img src=\"https://avatars2.githubusercontent.com/u/508827?v=4\" width=\"100px;\" alt=\"Andreo Vieira\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Andreo Vieira</b></sub></a><br /><a href=\"#content-andreoav\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mikicho\"><img src=\"https://avatars1.githubusercontent.com/u/11459632?v=4\" width=\"100px;\" alt=\"Michael Solomon\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Michael Solomon</b></sub></a><br /><a href=\"#content-mikicho\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jimmycallin\"><img src=\"https://avatars0.githubusercontent.com/u/2225828?v=4\" width=\"100px;\" alt=\"Jimmy Callin\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jimmy Callin</b></sub></a><br /><a href=\"#content-jimmycallin\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/siddharthofficial/\"><img src=\"https://avatars2.githubusercontent.com/u/26025955?v=4\" width=\"100px;\" alt=\"Siddharth\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Siddharth</b></sub></a><br /><a href=\"#content-w01fS\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://ryansmith.tech/\"><img src=\"https://avatars0.githubusercontent.com/u/1578766?v=4\" width=\"100px;\" alt=\"Ryan Smith\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ryan Smith</b></sub></a><br /><a href=\"#content-ryan3E0\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://de.linkedin.com/in/tom-boettger\"><img src=\"https://avatars2.githubusercontent.com/u/49961674?v=4\" width=\"100px;\" alt=\"Tom Boettger\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tom Boettger</b></sub></a><br /><a href=\"#content-bttger\" title=\"Content\">🖋</a></td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jormaechea\"><img src=\"https://avatars3.githubusercontent.com/u/5612500?v=4\" width=\"100px;\" alt=\"Joaquín Ormaechea\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Joaquín Ormaechea</b></sub></a><br /><a href=\"#translation-jormaechea\" title=\"Translation\">🌍</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/dfrzuz\"><img src=\"https://avatars3.githubusercontent.com/u/71859096?v=4\" width=\"100px;\" alt=\"dfrzuz\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>dfrzuz</b></sub></a><br /><a href=\"#translation-dfrzuz\" title=\"Translation\">🌍</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/victor-homyakov\"><img src=\"https://avatars1.githubusercontent.com/u/121449?v=4\" width=\"100px;\" alt=\"Victor Homyakov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Victor Homyakov</b></sub></a><br /><a href=\"#content-victor-homyakov\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://joshuahemphill.com\"><img src=\"https://avatars3.githubusercontent.com/u/46608115?v=4\" width=\"100px;\" alt=\"Josh\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Josh</b></sub></a><br /><a href=\"#content-josh-hemphill\" title=\"Content\">🖋</a> <a href=\"#security-josh-hemphill\" title=\"Security\">🛡️</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/alec-francis\"><img src=\"https://avatars2.githubusercontent.com/u/32949882?v=4\" width=\"100px;\" alt=\"Alec Francis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alec Francis</b></sub></a><br /><a href=\"#content-alec-francis\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/arjun6610\"><img src=\"https://avatars1.githubusercontent.com/u/61268891?v=4\" width=\"100px;\" alt=\"arjun6610\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>arjun6610</b></sub></a><br /><a href=\"#content-arjun6610\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jan-osch\"><img src=\"https://avatars2.githubusercontent.com/u/11651780?v=4\" width=\"100px;\" alt=\"Jan Osch\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jan Osch</b></sub></a><br /><a href=\"#content-jan-osch\" title=\"Content\">🖋</a></td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/thiagotrs\"><img src=\"https://avatars2.githubusercontent.com/u/32005779?v=4\" width=\"100px;\" alt=\"Thiago Rotondo Sampaio\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Thiago Rotondo Sampaio</b></sub></a><br /><a href=\"#translation-thiagotrs\" title=\"Translation\">🌍</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Alexsey\"><img src=\"https://avatars0.githubusercontent.com/u/6392013?v=4\" width=\"100px;\" alt=\"Alexsey\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alexsey</b></sub></a><br /><a href=\"#content-Alexsey\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/13luismb\"><img src=\"https://avatars1.githubusercontent.com/u/32210483?v=4\" width=\"100px;\" alt=\"Luis A. Acurero\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Luis A. Acurero</b></sub></a><br /><a href=\"#translation-13luismb\" title=\"Translation\">🌍</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://lromano97.github.io/\"><img src=\"https://avatars1.githubusercontent.com/u/22394847?v=4\" width=\"100px;\" alt=\"Lucas Romano\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Lucas Romano</b></sub></a><br /><a href=\"#translation-lromano97\" title=\"Translation\">🌍</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/denisecase\"><img src=\"https://avatars0.githubusercontent.com/u/13016516?v=4\" width=\"100px;\" alt=\"Denise Case\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Denise Case</b></sub></a><br /><a href=\"#content-denisecase\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://stackoverflow.com/story/elektronik\"><img src=\"https://avatars3.githubusercontent.com/u/1078554?v=4\" width=\"100px;\" alt=\"Nick Ribal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nick Ribal</b></sub></a><br /><a href=\"#content-elektronik2k5\" title=\"Content\">🖋</a> <a href=\"https://github.com/goldbergyoni/nodebestpractices/pulls?q=is%3Apr+reviewed-by%3Aelektronik2k5\" title=\"Reviewed Pull Requests\">👀</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/0xflotus\"><img src=\"https://avatars3.githubusercontent.com/u/26602940?v=4\" width=\"100px;\" alt=\"0xflotus\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>0xflotus</b></sub></a><br /><a href=\"#content-0xflotus\" title=\"Content\">🖋</a></td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.dijonkitchen.org/\"><img src=\"https://avatars3.githubusercontent.com/u/11434205?v=4\" width=\"100px;\" alt=\"Jonathan Chen\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jonathan Chen</b></sub></a><br /><a href=\"#content-dijonkitchen\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/dilansri\"><img src=\"https://avatars2.githubusercontent.com/u/5089728?v=4\" width=\"100px;\" alt=\"Dilan Srilal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dilan Srilal</b></sub></a><br /><a href=\"#content-dilansri\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://vectree.ru\"><img src=\"https://avatars3.githubusercontent.com/u/4215285?v=4\" width=\"100px;\" alt=\"vladthelittleone\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>vladthelittleone</b></sub></a><br /><a href=\"#translation-vladthelittleone\" title=\"Translation\">🌍</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.nikolaso.com\"><img src=\"https://avatars0.githubusercontent.com/u/60047271?v=4\" width=\"100px;\" alt=\"Nik Osvalds\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nik Osvalds</b></sub></a><br /><a href=\"#content-nosvalds\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kdaniel21\"><img src=\"https://avatars0.githubusercontent.com/u/39854385?v=4\" width=\"100px;\" alt=\"Daniel Kiss\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Daniel Kiss</b></sub></a><br /><a href=\"https://github.com/goldbergyoni/nodebestpractices/commits?author=kdaniel21\" title=\"Documentation\">📖</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/forresst17\"><img src=\"https://avatars2.githubusercontent.com/u/163352?v=4\" width=\"100px;\" alt=\"Forresst\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Forresst</b></sub></a><br /><a href=\"#content-forresst\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/svenheden\"><img src=\"https://avatars1.githubusercontent.com/u/76098?v=4\" width=\"100px;\" alt=\"Jonathan Svenheden\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jonathan Svenheden</b></sub></a><br /><a href=\"#content-svenheden\" title=\"Content\">🖋</a></td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/AustrisC\"><img src=\"https://avatars2.githubusercontent.com/u/12381652?v=4\" width=\"100px;\" alt=\"AustrisC\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>AustrisC</b></sub></a><br /><a href=\"#content-AustrisC\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/cisco0808\"><img src=\"https://avatars0.githubusercontent.com/u/60251188?v=4\" width=\"100px;\" alt=\"kyeongtae kim\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>kyeongtae kim</b></sub></a><br /><a href=\"#translation-cisco0808\" title=\"Translation\">🌍</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://keybase.io/651z9pz968v2accj\"><img src=\"https://avatars.githubusercontent.com/u/65741741?v=4\" width=\"100px;\" alt=\"007\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>007</b></sub></a><br /><a href=\"#content-6gx7iycn53ioq2e8apk1j1ypwov4giui\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.anediaz.com\"><img src=\"https://avatars.githubusercontent.com/u/17216937?v=4\" width=\"100px;\" alt=\"Ane Diaz de Tuesta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ane Diaz de Tuesta</b></sub></a><br /><a href=\"#translation-anediaz\" title=\"Translation\">🌍</a> <a href=\"#content-anediaz\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://yukioh.net\"><img src=\"https://avatars.githubusercontent.com/u/23182489?v=4\" width=\"100px;\" alt=\"YukiOta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>YukiOta</b></sub></a><br /><a href=\"#translation-YukiOta\" title=\"Translation\">🌍</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.yeovilhospital.co.uk/\"><img src=\"https://avatars.githubusercontent.com/u/43814140?v=4\" width=\"100px;\" alt=\"Frazer Smith\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Frazer Smith</b></sub></a><br /><a href=\"#content-Fdawgs\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/rluvaton\"><img src=\"https://avatars.githubusercontent.com/u/16746759?v=4\" width=\"100px;\" alt=\"Raz Luvaton\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Raz Luvaton</b></sub></a><br /><a href=\"#content-rluvaton\" title=\"Content\">🖋</a></td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/YA21\"><img src=\"https://avatars.githubusercontent.com/u/37298463?v=4\" width=\"100px;\" alt=\"Yuta Azumi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yuta Azumi</b></sub></a><br /><a href=\"#content-YA21\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/andrewjbarbour\"><img src=\"https://avatars.githubusercontent.com/u/77080074?v=4\" width=\"100px;\" alt=\"andrewjbarbour\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>andrewjbarbour</b></sub></a><br /><a href=\"#content-andrewjbarbour\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://MasujimaRyohei.jp\"><img src=\"https://avatars.githubusercontent.com/u/17163541?v=4\" width=\"100px;\" alt=\"mr\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>mr</b></sub></a><br /><a href=\"#content-MasujimaRyohei\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kubanac95\"><img src=\"https://avatars.githubusercontent.com/u/16191931?v=4\" width=\"100px;\" alt=\"Aleksandar\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Aleksandar</b></sub></a><br /><a href=\"#content-kubanac95\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://vincentjonathan.com\"><img src=\"https://avatars.githubusercontent.com/u/32597776?v=4\" width=\"100px;\" alt=\"Owl\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Owl</b></sub></a><br /><a href=\"#content-SuspiciousLookingOwl\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/yedidyas\"><img src=\"https://avatars.githubusercontent.com/u/36074789?v=4\" width=\"100px;\" alt=\"Yedidya Schwartz\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yedidya Schwartz</b></sub></a><br /><a href=\"#content-yedidyas\" title=\"Content\">🖋</a> <a href=\"#example-yedidyas\" title=\"Examples\">💡</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ariel-diaz\"><img src=\"https://avatars.githubusercontent.com/u/20423540?v=4\" width=\"100px;\" alt=\"ari\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>ari</b></sub></a><br /><a href=\"#content-ariel-diaz\" title=\"Content\">🖋</a></td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.koenigthomas.de/\"><img src=\"https://avatars.githubusercontent.com/u/7080389?v=4\" width=\"100px;\" alt=\"Thomas König\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Thomas König</b></sub></a><br /><a href=\"#content-Vispercept\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/coocos\"><img src=\"https://avatars.githubusercontent.com/u/1397804?v=4\" width=\"100px;\" alt=\"Kalle Lämsä\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kalle Lämsä</b></sub></a><br /><a href=\"#content-coocos\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://math.cat\"><img src=\"https://avatars.githubusercontent.com/u/10328430?v=4\" width=\"100px;\" alt=\"Wyatt\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Wyatt</b></sub></a><br /><a href=\"#content-ZhyMC\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://libkhadir.fr\"><img src=\"https://avatars.githubusercontent.com/u/45130488?v=4\" width=\"100px;\" alt=\"KHADIR Tayeb\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>KHADIR Tayeb</b></sub></a><br /><a href=\"#content-tkhadir\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/shankarregmi\"><img src=\"https://avatars.githubusercontent.com/u/7703345?v=4\" width=\"100px;\" alt=\"Shankar Regmi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shankar Regmi</b></sub></a><br /><a href=\"#content-shankarregmi\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/codebyshubham\"><img src=\"https://avatars.githubusercontent.com/u/10389723?v=4\" width=\"100px;\" alt=\"Shubham\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shubham</b></sub></a><br /><a href=\"#content-codebyshubham\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://lucalves.me/\"><img src=\"https://avatars.githubusercontent.com/u/17712401?v=4\" width=\"100px;\" alt=\"Lucas Alves\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Lucas Alves</b></sub></a><br /><a href=\"#content-lucalves\" title=\"Content\">🖋</a></td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/benjaminudoh10\"><img src=\"https://avatars.githubusercontent.com/u/9018331?v=4\" width=\"100px;\" alt=\"Benjamin\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Benjamin</b></sub></a><br /><a href=\"#content-benjaminudoh10\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.yjoer.com\"><img src=\"https://avatars.githubusercontent.com/u/47742486?v=4\" width=\"100px;\" alt=\"Yeoh Joer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yeoh Joer</b></sub></a><br /><a href=\"#content-yjoer\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://blog.miigon.net\"><img src=\"https://avatars.githubusercontent.com/u/16161991?v=4\" width=\"100px;\" alt=\"Miigon\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Miigon</b></sub></a><br /><a href=\"#content-Miigon\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://brainstorage.me/Egregor2011\"><img src=\"https://avatars.githubusercontent.com/u/3630318?v=4\" width=\"100px;\" alt=\"Rostislav Bogorad\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Rostislav Bogorad</b></sub></a><br /><a href=\"#content-Egregor2011\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Flouse\"><img src=\"https://avatars.githubusercontent.com/u/1297478?v=4\" width=\"100px;\" alt=\"Flouse\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Flouse</b></sub></a><br /><a href=\"#content-Flouse\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://taranttini.com\"><img src=\"https://avatars.githubusercontent.com/u/6922125?v=4\" width=\"100px;\" alt=\"Tarantini Pereira\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tarantini Pereira</b></sub></a><br /><a href=\"#content-taranttini\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kzmat\"><img src=\"https://avatars.githubusercontent.com/u/34614358?v=4\" width=\"100px;\" alt=\"Kazuki Matsuo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kazuki Matsuo</b></sub></a><br /><a href=\"#content-kzmat\" title=\"Content\">🖋</a></td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/burkybang\"><img src=\"https://avatars.githubusercontent.com/u/927886?v=4\" width=\"100px;\" alt=\"Adam Smith\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Adam Smith</b></sub></a><br /><a href=\"#content-burkybang\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://codekodo.tistory.com\"><img src=\"https://avatars.githubusercontent.com/u/33795856?v=4\" width=\"100px;\" alt=\"Dohyeon Ko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dohyeon Ko</b></sub></a><br /><a href=\"#content-k906506\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/vlad99902\"><img src=\"https://avatars.githubusercontent.com/u/67615003?v=4\" width=\"100px;\" alt=\"Vladislav Legkov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vladislav Legkov</b></sub></a><br /><a href=\"#content-vlad99902\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://kerolloz.github.io\"><img src=\"https://avatars.githubusercontent.com/u/36763164?v=4\" width=\"100px;\" alt=\"Kerollos Magdy\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kerollos Magdy</b></sub></a><br /><a href=\"#content-kerolloz\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/erez-lieberman-b90b7219/\"><img src=\"https://avatars.githubusercontent.com/u/3277260?v=4\" width=\"100px;\" alt=\"Erez Lieberman\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Erez Lieberman</b></sub></a><br /><a href=\"#content-erezLieberman\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/breno-macedo-ernani-de-s%C3%A1-110223158/\"><img src=\"https://avatars.githubusercontent.com/u/48841329?v=4\" width=\"100px;\" alt=\"Breno Macedo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Breno Macedo</b></sub></a><br /><a href=\"#content-breno404\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/JFernando122\"><img src=\"https://avatars.githubusercontent.com/u/40414805?v=4\" width=\"100px;\" alt=\"Fernando Flores\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Fernando Flores</b></sub></a><br /><a href=\"#translation-JFernando122\" title=\"Translation\">🌍</a></td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/rafaelconcept/\"><img src=\"https://avatars.githubusercontent.com/u/43880669?v=4\" width=\"100px;\" alt=\"Rafael Brito\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Rafael Brito</b></sub></a><br /><a href=\"#translation-rafaelconcept\" title=\"Translation\">🌍</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://emiliano-peralta-portfolio.vercel.app/\"><img src=\"https://avatars.githubusercontent.com/u/63617637?v=4\" width=\"100px;\" alt=\"Emiliano Peralta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Emiliano Peralta</b></sub></a><br /><a href=\"#translation-emiperalta\" title=\"Translation\">🌍</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://lannex.github.io\"><img src=\"https://avatars.githubusercontent.com/u/7369541?v=4\" width=\"100px;\" alt=\"Shin, SJ\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shin, SJ</b></sub></a><br /><a href=\"#content-lannex\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.benjaminforster.com\"><img src=\"https://avatars.githubusercontent.com/u/12589522?v=4\" width=\"100px;\" alt=\"Benjamin Forster\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Benjamin Forster</b></sub></a><br /><a href=\"#content-e-e-e\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/DanieleFedeli\"><img src=\"https://avatars.githubusercontent.com/u/37077048?v=4\" width=\"100px;\" alt=\"Daniele Fedeli\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Daniele Fedeli</b></sub></a><br /><a href=\"#content-DanieleFedeli\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/djob195\"><img src=\"https://avatars.githubusercontent.com/u/17146669?v=4\" width=\"100px;\" alt=\"djob195\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>djob195</b></sub></a><br /><a href=\"#content-djob195\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/antspk\"><img src=\"https://avatars.githubusercontent.com/u/78955792?v=4\" width=\"100px;\" alt=\"antspk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>antspk</b></sub></a><br /><a href=\"#content-antspk\" title=\"Content\">🖋</a></td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://jjy0821.tistory.com/\"><img src=\"https://avatars.githubusercontent.com/u/88075341?v=4\" width=\"100px;\" alt=\"정진영\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>정진영</b></sub></a><br /><a href=\"#content-jjy821\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kkk-cashwalk\"><img src=\"https://avatars.githubusercontent.com/u/91455122?v=4\" width=\"100px;\" alt=\"kkk-cashwalk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>kkk-cashwalk</b></sub></a><br /><a href=\"#content-kkk-cashwalk\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/apainintheneck\"><img src=\"https://avatars.githubusercontent.com/u/42982186?v=4\" width=\"100px;\" alt=\"apainintheneck\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>apainintheneck</b></sub></a><br /><a href=\"#content-apainintheneck\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/koyanyaroo\"><img src=\"https://avatars.githubusercontent.com/u/9715368?v=4\" width=\"100px;\" alt=\"Fajar Budhi Iswanda\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Fajar Budhi Iswanda</b></sub></a><br /><a href=\"#content-koyanyaroo\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jutiger\"><img src=\"https://avatars.githubusercontent.com/u/97490806?v=4\" width=\"100px;\" alt=\"이주호\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>이주호</b></sub></a><br /><a href=\"#content-jutiger\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/MisterSingh\"><img src=\"https://avatars.githubusercontent.com/u/44462019?v=4\" width=\"100px;\" alt=\"Singh\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Singh</b></sub></a><br /><a href=\"#content-MisterSingh\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Alex-Dumitru\"><img src=\"https://avatars.githubusercontent.com/u/43738450?v=4\" width=\"100px;\" alt=\"Alex Dumitru\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alex Dumitru</b></sub></a><br /><a href=\"#content-Alex-Dumitru\" title=\"Content\">🖋</a></td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/lykhatskyi\"><img src=\"https://avatars.githubusercontent.com/u/18104686?v=4\" width=\"100px;\" alt=\"Anton Lykhatskyi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Anton Lykhatskyi</b></sub></a><br /><a href=\"#content-lykhatskyi\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/EverythingAvailable\"><img src=\"https://avatars.githubusercontent.com/u/81002379?v=4\" width=\"100px;\" alt=\"sangwonlee\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>sangwonlee</b></sub></a><br /><a href=\"#content-EverythingAvailable\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/euberdeveloper\"><img src=\"https://avatars.githubusercontent.com/u/33126163?v=4\" width=\"100px;\" alt=\"Eugenio Berretta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Eugenio Berretta</b></sub></a><br /><a href=\"#content-euberdeveloper\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/soranakk\"><img src=\"https://avatars.githubusercontent.com/u/3930307?v=4\" width=\"100px;\" alt=\"soranakk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>soranakk</b></sub></a><br /><a href=\"#content-soranakk\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/backend-joonyoung\"><img src=\"https://avatars.githubusercontent.com/u/94430145?v=4\" width=\"100px;\" alt=\"고준영\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>고준영</b></sub></a><br /><a href=\"#content-backend-joonyoung\" title=\"Content\">🖋</a> <a href=\"https://github.com/goldbergyoni/nodebestpractices/commits?author=backend-joonyoung\" title=\"Code\">💻</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/GuilhermePortella\"><img src=\"https://avatars.githubusercontent.com/u/59876059?v=4\" width=\"100px;\" alt=\"Guilherme Portella \"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Guilherme Portella </b></sub></a><br /><a href=\"#content-GuilhermePortella\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.youtube.com/channel/UCBxzOQd2v9wWfiMDrf_RQ7A\"><img src=\"https://avatars.githubusercontent.com/u/18497570?v=4\" width=\"100px;\" alt=\"André Esser\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>André Esser</b></sub></a><br /><a href=\"#content-Esser50K\" title=\"Content\">🖋</a></td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ShiChenCong\"><img src=\"https://avatars.githubusercontent.com/u/22486446?v=4\" width=\"100px;\" alt=\"Scc\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Scc</b></sub></a><br /><a href=\"#translation-ShiChenCong\" title=\"Translation\">🌍</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.mauroaccornero.it\"><img src=\"https://avatars.githubusercontent.com/u/1875822?v=4\" width=\"100px;\" alt=\"Mauro Accornero\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Mauro Accornero</b></sub></a><br /><a href=\"#content-mauroaccornero\" title=\"Content\">🖋</a></td>\r\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/no-yan\"><img src=\"https://avatars.githubusercontent.com/u/63000297?v=4\" width=\"100px;\" alt=\"no-yan\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>no-yan</b></sub></a><br /><a href=\"#content-no-yan\" title=\"Content\">🖋</a></td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n<!-- markdownlint-restore -->\r\n<!-- prettier-ignore-end -->\r\n\r\n<!-- ALL-CONTRIBUTORS-LIST:END -->\r\n\r\n### Steering Committee Emeriti\r\n\r\n[Bruno Scheufler](https://github.com/BrunoScheufler)\r\n<a href=\"https://brunoscheufler.com/\"><img src=\"assets/images/web.svg\" width=\"16\" height=\"16\"></img></a>\r\n\r\n💻 full-stack web engineer, Node.js & GraphQL enthusiast\r\n\r\n<br/>\r\n\r\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/kyle.png\"/>\r\n\r\n[Kyle Martin](https://github.com/js-kyle)\r\n<a href=\"https://twitter.com/kylemartin_93\"><img src=\"assets/images/twitter.svg\" width=\"16\" height=\"16\"></img></a>\r\n<a href=\"https://www.linkedin.com/in/kylemartinnz\"><img src=\"assets/images/linkedin.svg\" width=\"16\" height=\"16\"></img></a>\r\n\r\nFull Stack Developer & Site Reliability Engineer based in New Zealand, interested in web application security, and architecting and building Node.js applications to perform at global scale.\r\n\r\n<br/>\r\n\r\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/kevyn.png\"/>\r\n\r\n[Kevyn Bruyere](https://github.com/kevynb)\r\n<a href=\"https://www.linkedin.com/in/kevynbruyere/\"><img src=\"assets/images/linkedin.svg\" width=\"16\" height=\"16\"></img></a>\r\n\r\nIndependent full-stack developer with a taste for Ops and automation.\r\n\r\n<br/>\r\n\r\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/sagir.png\"/>\r\n\r\n[Sagir Khan](https://github.com/sagirk)\r\n<a href=\"https://twitter.com/sagir_k\"><img src=\"assets/images/twitter.svg\" width=\"16\" height=\"16\"></img></a>\r\n<a href=\"https://linkedin.com/in/sagirk\"><img src=\"assets/images/linkedin.svg\" width=\"16\" height=\"16\"></img></a>\r\n<a href=\"https://sagirk.com\"><img src=\"assets/images/web.svg\" width=\"16\" height=\"16\"></img></a>\r\n\r\nDeep specialist in JavaScript and its ecosystem — React, Node.js, TypeScript, GraphQL, MongoDB, pretty much anything that involves JS/JSON in any layer of the system — building products using the web platform for the world’s most recognized brands. Individual Member of the Node.js Foundation.\r\n"
        },
        {
          "name": "README.indonesian.md",
          "type": "blob",
          "size": 177.17,
          "content": "[✔]: assets/images/checkbox-small-blue.png\n\n# Praktik Terbaik Node.js\n\n<h1 align=\"center\">\n  <img src=\"assets/images/banner-2.jpg\" alt=\"Praktik Terbaik Node.js\"/>\n</h1>\n\n<br/>\n\n<div align=\"center\">\n  <img src=\"https://img.shields.io/badge/⚙%20Item%20count%20-%20102%20Best%20Practices-blue.svg\" alt=\"102 item\"/> <img src=\"https://img.shields.io/badge/%F0%9F%93%85%20Last%20update%20-%20December%2012%202020-green.svg\" alt=\"Pembaruan terakhir: November, 2020\"/> <img src=\"https://img.shields.io/badge/ %E2%9C%94%20Updated%20For%20Version%20-%20Node%2014.0.0-brightgreen.svg\" alt=\"Diperbarui untuk Node 14.0.0\"/>\n</div>\n\n<br/>\n\n[![nodepractices](./assets/images/twitter-s.png)](https://twitter.com/nodepractices/) **Ikuti kami di Twitter!** [**@nodepractices**](https://twitter.com/nodepractices/)\n\n<br/>\n\nBaca dalam bahasa yang berbeda: [![CN](./assets/flags/CN.png)**CN**](./README.chinese.md), [![BR](./assets/flags/BR.png)**BR**](./README.brazilian-portuguese.md), [![RU](./assets/flags/RU.png)**RU**](./README.russian.md), [![PL](./assets/flags/PL.png)**PL**](./README.polish.md), [![EU](./assets/flags/EU.png)**EU**](./README.basque.md) [(![ES](./assets/flags/ES.png)**ES**, ![FR](./assets/flags/FR.png)**FR**, ![HE](./assets/flags/HE.png)**HE**, ![KR](./assets/flags/KR.png)**KR** dan ![TR](./assets/flags/TR.png)**TR** dalam proses!)](#translations)\n\n<br/>\n\n###### Dibuat dan dijaga oleh [Komite Pengarah](#komite-pengarah) dan [kolaborator](#Kolaborator)\n\n# Praktik Terbaik Terbaru dan Berita\n\n- **✅ Praktik terbaik baru:** Poin 2.12 oleh [Alexsey](https://github.com/Alexsey) menunjukkan bagaimana melakukan return tanpa await ke fungsi asinkron dapat mengarah ke _stacktraces_ parsial. Ini dapat menjadi masalah besar saat melakukan pemecahan masalah exception di produksi yang kekurangan beberapa bingkai eksekusi\n\n- **✅ Praktik terbaik baru:** Poin 6.8 oleh Josh Hemphill menyarankan \"Protect Users' Passwords/Secrets using BCrypt or Script\". Ini mengandung penjelasan secara mendalam tentang kapan dan kenapa setiap opsi sesuai untuk proyek tertentu. Jangan lewatkan panduan singkat ini dengan gambaran singkat tentang berbagai opsi hashing\n\n- **:whale: Praktik terbaik Node.js + Docker**: Kami baru saja merilis seksi Docker dengan Node.js yang mengandung 15 poin tentang teknik pengkodean yang lebih baik dengan Docker\n\n<br/><br/>\n\n# Selamat Datang! 3 Hal Yang Harus Anda Ketahui\n\n**1. Anda sedang membaca berbagai artikel Node.js terbaik -** repositori ini adalah ringkasan dan kurasi dari konten peringkat teratas dalam praktik terbaik Node.js, serta konten yang ditulis oleh kolaborator\n\n**2. Ini adalah kompilasi terbesar, dan berkembang tiap minggu -** saat ini, lebih dari 80 praktik terbaik, panduan gaya, dan tips arsitektural tersajikan. Issue baru dan pull request dibuat setiap hari agar kontennya tetap diperbarui. Kami senang melihat Anda berkontribusi di sini, maupun itu memperbaiki kesalahan kode, membantu dalam terjemahan, atau menyarankan ide cemerlang yang baru. Lihat [pedoman menulis](./.operations/writing-guidelines.md) kami\n\n**3. Praktik terbaik mempunyai informasi tambahan -** kebanyakan poin mempunyai tautan **🔗Baca selengkapnya** yang memperluas praktiknya dengan contoh kode, kutipan dari blog terpilih, dan informasi lebih lanjut\n\n<br/><br/>\n\n## Daftar Isi\n\n1. [Praktik Struktur Proyek (5)](#1-praktik-struktur-proyek)\n2. [Praktik Penanganan Kesalahan (11) ](#2-praktik-penanganan-kesalahan)\n3. [Praktik Gaya Kode (12) ](#3-praktik-gaya-kode)\n4. [Praktik Pengujian dan Kualitas Secara Keseluruhan (13) ](#4-praktik-pengujian-dan-kualitas-secara-keseluruhan)\n5. [Praktik Dalam Produksi(19) ](#5-praktik-dalam-produksi)\n6. [Praktik Keamanan (25)](#6-praktik-terbaik-keamanan)\n7. [Praktik Performa (2) (Pekerjaan Dalam Proses ✍️)](#7-draf-praktik-terbaik-performa)\n8. [Praktik Docker (15)](#8-praktik-terbaik-docker)\n\n<br/><br/>\n\n# `1. Praktik Struktur Proyek`\n\n## ![✔] 1.1 Susun solusi Anda berdasarkan komponen\n\n**TL;DR:** Masalah terburuk pada aplikasi besar adalah mengurus basis kode yang sangat besar dengan ratusan dependensi - monolit seperti itu memperlambat pengembang saat mereka mencoba untuk menambahkan fitur baru. Sebaiknya, partisi kode Anda menjadi beberapa komponen, setiap komponen mendapatkan foldernya sendiri atau basis kode tersendiri, dan pastikan setiap unit untuk tetap kecil dan sederhana. Kunjungi 'Baca selengkapnya' di bawah ini untuk melihat contoh struktur proyek yang benar\n\n**Jika tidak:** Saat pengembang yang menambahkan fitur baru kesusahan untuk melihat dampak dari perubahan mereka dan takut akan merusak komponen lain yang bergantung - _deployment_ menjadi lebih lambat dan berisiko. Kode juga dianggap lebih sulit untuk dikembangkan ketika semua unit bisnis tidak dipisahkan\n\n🔗 [**Baca selengkapnya: structure by components**](./sections/projectstructre/breakintcomponents.md)\n\n<br/><br/>\n\n## ![✔] 1.2 Lapisi komponen Anda, pastikan lapisan web tetap dalam batasannya\n\n**TL;DR:** Setiap komponen harus mengandung 'lapisan' - objek khusus untuk web, logika, dan kode akses data. Hal ini tidak hanya menggambarkan _separation of concerns_ dengan jelas namun juga memudahkan _mocking_ dan pengujian sistem. Meskipun ini adalah pola yang sangan umum, pengembang API cenderung mencampur lapisan dengan meneruskan objek lapisan web (misalnya Express req, res) ke logika bisnis dan lapisan data - ini membuat aplikasi Anda bergantung dan hanya bisa diakses oleh framework web tertentu\n\n**Jika tidak:** Aplikasi yang menggabungkan objek web dengan lapisan lain tidak dapat diakses oleh kode pengujian, pekerjaan CRON, triggers dari message queues, dll.\n\n🔗 [**Baca selengkapnya: layer your app**](./sections/projectstructre/createlayers.md)\n\n<br/><br/>\n\n## ![✔] 1.3 Bungkus utilitas umum sebagai paket npm\n\n**TL;DR:** Pada aplikasi besar yang memiliki basis kode yang besar, utilitas _cross-cutting-concern_ seperti logger, enkripsi dan yang serupa, harus dibungkus oleh kode Anda dan terekspos sebagai paket npm tersendiri. Ini memungkinkan untuk membagikan utilitas tersebut di antara beberapa basis kode dan proyek\n\n**Jika tidak:** Anda harus membuat cara _deployment_ dan _dependency_ Anda sendiri\n\n🔗 [**Baca selengkapnya: Structure by feature**](./sections/projectstructre/wraputilities.md)\n\n<br/><br/>\n\n## ![✔] 1.4 Pisahkan 'app' dan 'server' Express\n\n**TL;DR:** Hindari kebiasaan buruk dalam mendefinisikan seluruh aplikasi [Express](https://expressjs.com/) dalam satu file besar - pisahkan definisi 'Express' Anda menjadi setidaknya dua file: deklarasi untuk API (app.js) dan untuk jaringan (WWW). Untuk struktur yang lebih baik lagi, letak deklarasi API Anda di dalam komponen\n\n**Jika tidak:** API Anda hanya dapat diakses untuk pengujian melalui panggilan HTTP (lebih lambat and lebih susah untuk membuat laporan cakupan pengujian). Mengurus ratusan baris kode dalam satu file mungkin bukanlah hal yang menyenangkan\n\n🔗 [**Baca selengkapnya: separate Express 'app' and 'server'**](./sections/projectstructre/separateexpress.md)\n\n<br/><br/>\n\n## ![✔] 1.5 Gunakan konfigurasi yang sadar atas lingkungan, aman dan hierarkis\n\n**TL;DR:** Pengaturan konfigurasi yang sempurna harus memastikan (a) kunci dapat dibaca dari file DAN dari variabel lingkungan (b) rahasia disimpan di luar kode (c) konfigurasi bersifat hierarkis agar mudah ditemukan. Ada beberapa paket yang dapat mempermudah pengaturan tersebut seperti [rc](https://www.npmjs.com/package/rc), [nconf](https://www.npmjs.com/package/nconf), [config](https://www.npmjs.com/package/config), dan [convict](https://www.npmjs.com/package/convict).\n\n**Jika tidak:** Gagal untuk memenuhi salah satu persyaratan konfigurasi hanya akan menghambat tim pengembang atau DevOps. Mungkin keduanya\n\n🔗 [**Baca selengkapnya: configuration best practices**](./sections/projectstructre/configguide.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#daftar-isi\">⬆ Kembali ke atas</a></p>\n\n# `2. Praktik Penanganan Kesalahan`\n\n## ![✔] 2.1 Gunakan Async-Await atau promise untuk penanganan kesalahan asinkron\n\n**TL;DR:** Menangani kesalahan asinkron dalam panggilan balik mungkin adalah cara terburuk (a.k.a the pyramid of doom). Hal terbaik yang dapat Anda berikan ke kode Anda adalah dengan menggunakan pustaka promise dengan reputasi yang baik atau gunakan async-await yang membuat sintaks kode menjadi lebih ringkas dan familier seperti try-catch\n\n**Jika tidak:** Gaya panggilan balik Node.js, function(err, response), adalah cara yang menjanjikan untuk kode yang tidak dapat dipelihara karena campuran dari penanganan kesalahan dengan kode kasual, bersarang yang berlebihan, dan pola pengkodean yang canggung\n\n🔗 [**Baca selengkapnya: avoiding callbacks**](./sections/errorhandling/asyncerrorhandling.md)\n\n<br/><br/>\n\n## ![✔] 2.2 Gunakan hanya objek Error bawaan\n\n**TL;DR:** Banyak pengembang melempar error sebagai string atau tipe khusus – ini mempersulit logika penanganan kesalahan dan interoperabilitas antar modul. Maupun Anda menolak sebuah _promise_, melontarkan sebuah pengecualian atau mengeluarkan error – dengan hanya menggunakan objek Error bawaan (atau objek yang memperluas objek Error bawaan) dapat meningkatkan keseragaman dan mencegah hilangnya informasi\n\n**Jika tidak:** Saat menjalankan beberapa komponen, karena tidak yakin jenis kesalahan yang akan di lempar – ini membuat penanganan kesalahan yang benar jauh lebih sulit. Lebih buruk lagi, menggunakan tipe khusus untuk mendeskripsikan kesalahan dapat menyebabkan hilangnya informasi kesalahan kritis seperti _stack trace_!\n\n🔗 [**Baca selengkapnya: using the built-in error object**](./sections/errorhandling/useonlythebuiltinerror.md)\n\n<br/><br/>\n\n## ![✔] 2.3 Membedakan kesalahan operasional dan kesalahan pengembang\n\n**TL;DR:** Kesalahan operasional (contohnya API menerima masukan yang tidak valid) merupakan kasus kesalahan yang diketahui di mana dampak dari kesalahannya dapat dipahami sepenuhnya dan dapat ditangani dengan cermat. Di sisi lain, kesalahan pengembang (contohnya mencoba membaca variabel yang tidak ditentukan) merupakan kegagalan kode yang tidak diketahui yang menentukan untuk memulai ulang aplikasi dengan baik\n\n**Jika tidak:** Anda selalu dapat memulai ulang aplikasi Anda ketika kesalahan muncul, namun kenapa mengecewakan ~5000 pengguna hanya karena kesalahan operasional yang kecil dan dapat diprediksi? hal sebaliknya juga tidak ideal – membiarkan aplikasi tetap berjalan ketika terdapat kesalahan yang tidak diketahui (kesalahan oleh pengembang) dapat menyebabkan perilaku yang tidak terduga. Membedakan kedua kesalahan tersebut memungkinkan untuk melakukan tindakan yang benar dan menerapkan cara penyelesaian masalah yang sesuai dengan konteks yang diberikan\n\n🔗 [**Baca selengkapnya: operational vs programmer error**](./sections/errorhandling/operationalvsprogrammererror.md)\n\n<br/><br/>\n\n## ![✔] 2.4 Tangani kesalahan secara terpusat, bukan dalam middleware\n\n**TL;DR:** Logika penanganan kesalahan seperti pengiriman pesan ke admin dan pencatatan harus dikemas dalam objek khusus dan terpusat yang dipanggil oleh semua endpoint (contohnya middleware Express, pekerjaan cron, pengujian unit) ketika ada kesalahan\n\n**Jika tidak:** Tidak menangani kesalahan dalam satu tempat akan menyebabkan duplikasi kode dan mungkin kesalahan yang tidak ditangani dengan tepat\n\n🔗 [**Baca selengkapnya: handling errors in a centralized place**](./sections/errorhandling/centralizedhandling.md)\n\n<br/><br/>\n\n## ![✔] 2.5 Mendokumentasikan kesalahan API menggunakan Swagger atau GraphQL\n\n**TL;DR:** Beri tahu pemanggil API Anda kesalahan apa yang mungkin dapat diterima sehingga mereka dapat menanganinya dengan baik tanpa merusak aplikasinya. Untuk API RESTful, hal ini biasanya dilakukan dengan framework dokumentasi seperti Swagger. Jika Anda menggunakan GraphQL, Anda juga dapat memanfaatkan skema dan komentar.\n\n**Jika tidak:** Klien API mungkin memutuskan untuk memberhentikan aplikasi dan memulai ulang hanya karena menerima kesalahan yang tidak dapat dipahami. Catatan: pemanggil API mungkin adalah Anda (sangat umum dalam lingkungan _microservice_)\n\n🔗 [**Baca selengkapnya: documenting API errors in Swagger or GraphQL**](./sections/errorhandling/documentingusingswagger.md)\n\n<br/><br/>\n\n## ![✔] 2.6 Hentikan proses dengan benar ketika orang asing datang ke kota\n\n**TL;DR:** Ketika terjadi kesalahan yang tidak diketahui (kesalahan pengembang, lihat praktik terbaik 2.3) - ada ketidakpastian tentang kesehatan aplikasi. Praktik umum menyarankan untuk memulai kembali proses dengan hati-hati menggunakan alat manajemen proses seperti [Forever](https://www.npmjs.com/package/forever) atau [PM2](http://pm2.keymetrics.io/)\n\n**Jika tidak:** Ketika pengecualian yang tidak dikenal terjadi, beberapa objek mungkin dalam keadaan rusak (contohnya event emitter yang digunakan secara global dan tidak dapat mengaktifkan event lagi karena kesalahan internal) dan semua panggilan yang akan datang mungkin akan gagal atau tidak berperilaku dengan normal\n\n🔗 [**Baca selengkapnya: shutting the process**](./sections/errorhandling/shuttingtheprocess.md)\n\n<br/><br/>\n\n## ![✔] 2.7 Gunakan alat pencatat yang baik untuk meningkatkan visibilitas kesehatan\n\n**TL;DR:** Satu set alat pencatat yang baik seperti [Pino](https://github.com/pinojs/pino) atau [Log4js](https://www.npmjs.com/package/log4js), akan mempercepat penemuan dan pemahaman suatu kesalahan. Jadi tinggalkan console.log\n\n**Jika tidak:** Melihat beberapa console.log atau secara manual melalui file teks yang berantakan tanpa alat kueri atau penampil catatan yang baik dapat membuat Anda sibuk di tempat kerja hingga larut\n\n🔗 [**Baca selengkapnya: using a mature logger**](./sections/errorhandling/usematurelogger.md)\n\n<br/><br/>\n\n## ![✔] 2.8 Uji aliran kesalahan menggunakan framework pengujian favorit Anda\n\n**TL;DR:** Maupun itu QA otomatis profesional ataupun pengujian manual oleh pengembang – Pastikan bahwa kode Anda tidak hanya memenuhi skenario positif namun juga menangani dan mengembalikan jenis kesalahan yang tepat. Framework testing seperti Mocha & Chai dapat menangani ini dengan mudah (lihat contoh kode dalam \"Gist popup\")\n\n**Jika tidak:** Tanpa testing, maupun secara otomatis ataupun manual, Anda tidak dapat mengandalkan kode Anda untuk mengembalikan jenis kesalahan yang tepat. Tanpa jenis kesalahan yang berarti – tidak ada penanganan kesalahan\n\n🔗 [**Baca selengkapnya: testing error flows**](./sections/errorhandling/testingerrorflows.md)\n\n<br/><br/>\n\n## ![✔] 2.9 Temukan kesalahan dan waktu henti menggunakan produk APM\n\n**TL;DR:** Produk pemantauan dan kinerja (a.k.a APM) secara proaktif mengukur basis kode atau API sehingga mereka dapat secara otomatis menyorot kesalahan, kerusakan, dan bagian lambat yang Anda lewatkan\n\n**Jika tidak:** Anda mungkin menghabiskan banyak usaha untuk mengukur kinerja dan waktu henti API, mungkin Anda tidak akan menyadari bagian kode mana yang paling lambat dalam skenario dunia nyata dan bagaimana hal ini dapat memengaruhi pengalaman pengguna\n\n🔗 [**Baca selengkapnya: using APM products**](./sections/errorhandling/apmproducts.md)\n\n<br/><br/>\n\n## ![✔] 2.10 Tangkap penolakan _promise_ yang tidak tertangani\n\n**TL;DR:** Semua pengecualian yang dilemparkan ke dalam _promise_ akan ditelan dan dibuang kecuali pengembang tidak lupa untuk menanganinya secara eksplisit. Meskipun kode Anda berlangganan ke `process.uncaughtException`! Atasi ini dengan mendaftarkan ke event `process.unhandledRejection`\n\n**Jika tidak:** Kesalahan dari kode Anda akan ditelan dan hilang tanpa jejak. Tidak ada yang perlu dikhawatirkan\n\n🔗 [**Baca selengkapnya: catching unhandled promise rejection**](./sections/errorhandling/catchunhandledpromiserejection.md)\n\n<br/><br/>\n\n## ![✔] 2.11 Gagal lebih dini, validasi argumen menggunakan pustaka khusus\n\n**TL;DR:** Tegaskan masukan API untuk menghindari bug yang lebih sulit dilacak nantinya. Kode untuk validasi biasanya berantakan kecuali Anda menggunakan pustaka pembantu yang keren seperti [ajv](https://www.npmjs.com/package/ajv) dan [Joi](https://www.npmjs.com/package/joi)\n\n**Jika tidak:** Anggap seperti ini – jika fungsi Anda mengharapkan argumen numerik “Diskon” yang lupa diletak oleh pemanggil, kemudian, kode Anda memeriksa jika Diskon!=0 (jumlah diskon yang diizinkan lebih besar dari nol), maka itu akan memungkinkan pengguna untuk menikmati diskon. OMG, bug yang sangat buruk. Bisakah Anda melihatnya?\n\n🔗 [**Baca selengkapnya: failing fast**](./sections/errorhandling/failfast.md)\n\n<br/><br/>\n\n## ![✔] 2.12 Selalu _await promise_ sebelum mengembalikan nilai untuk menghindari _stacktrace_ yang tidak lengkap\n\n**TL;DR:** Selalu lakukan `return await` ketika mengembalikan sebuah _promise_ untuk memanfaatkan _stacktrace_ kesalahan yang lengkap. Jika sebuah fungsi mengembalikan _promise_, fungsi tersebut harus dideklarasikan sebagai fungsi `async` dan `await` fungsi tersebut secara eksplisit sebelum mengembalikannya\n\n**Jika tidak:** Fungsi yang mengembalikan _promise_ tanpa `await` tidak akan muncul di _stacktrace_.\nKerangka yang hilang seperti itu mungkin akan mempersulit pemahaman tentang aliran yang mengarah ke kesalahan,\nterutama jika penyebab perilaku yang tidak normal ada di dalam fungsi yang hilang itu\n\n🔗 [**Baca selengkapnya: returning promises**](./sections/errorhandling/returningpromises.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#daftar-isi\">⬆ Kembali ke atas</a></p>\n\n# `3. Praktik Gaya Kode`\n\n## ![✔] 3.1 Gunakan ESLint\n\n**TL;DR:** [ESLint](https://eslint.org) adalah standar de-facto untuk memeriksa kemungkinan kesalahan kode dan memperbaiki gaya kode, bukan hanya untuk mengidentifikasi masalah spasi tetapi juga untuk mendeteksi kode anti-pola yang serius seperti pengembang melemparkan kesalahan tanpa klasifikasi. Meskipun ESLint dapat memperbaiki gaya kode secara otomatis, alat lain seperti [prettier](https://www.npmjs.com/package/prettier) dan [beautify](https://www.npmjs.com/package/js-beautify) lebih baik dalam memformat perbaikan kodenya dan dapat bekerja sama dengan ESLint\n\n**Jika tidak:** Pengembang akan fokus pada masalah spasi dan lebar garis dan waktu mungkin akan terbuang hanya untuk memikirkan gaya kode pada proyek\n\n🔗 [**Baca selengkapnya: Using ESLint and Prettier**](./sections/codestylepractices/eslint_prettier.md)\n\n<br/><br/>\n\n## ![✔] 3.2 Plugin khusus Node.js\n\n**TL;DR:** Selain aturan standar ESLint yang mencakup vanilla JavaScript, tambahkan plugin khusus Node.js seperti [eslint-plugin-node](https://www.npmjs.com/package/eslint-plugin-node), [eslint-plugin-mocha](https://www.npmjs.com/package/eslint-plugin-mocha) dan [eslint-plugin-node-security](https://www.npmjs.com/package/eslint-plugin-security)\n\n**Jika tidak:** Banyak pola kode Node.js yang salah dapat lolos dari radar. Contohnya, pengembang mungkin melakukan require(variableAsPath) pada file dengan variabel sebagai path yang memungkinkan penyerang untuk mengeksekusi skrip JS apa pun. Linters Node.js dapat mendeteksi pola tersebut dan memberikan peringatan lebih awal\n\n<br/><br/>\n\n## ![✔] 3.3 Mulai kurung kurawal pada blok kode pada baris yang sama\n\n**TL;DR:** Tanda kurung kurawal pembuka blok kode harus di baris yang sama dengan statement pembuka\n\n### Contoh Kode\n\n```javascript\n// Lakukan\nfunction someFunction() {\n  // blok kode\n}\n\n// Hindari\nfunction someFunction() {\n  // blok kode\n}\n```\n\n**Jika tidak:** Tidak mengikuti praktik terbaik ini dapat menyebabkan hasil yang tidak terduga, seperti yang terlihat pada thread StackOverflow di bawah ini:\n\n🔗 [**Baca selengkapnya:** \"Why do results vary based on curly brace placement?\" (StackOverflow)](https://stackoverflow.com/questions/3641519/why-does-a-results-vary-based-on-curly-brace-placement)\n\n<br/><br/>\n\n## ![✔] 3.4 Pisahkan statement Anda dengan benar\n\nTidak peduli jika Anda menggunakan titik koma atau tidak untuk memisahkan statement Anda, mengetahui akibat umum dari pemutusan baris yang tidak tepat atau penyisipan titik koma otomatis, akan membantu Anda mengurangi kesalahan sintaks biasa.\n\n**TL;DR:** Gunakan ESLint untuk mendapatkan perhatian tentang masalah pemisahan. [Prettier](https://prettier.io/) atau [Standardjs](https://standardjs.com/) dapat menyelesaikan masalah ini secara otomatis.\n\n**Jika tidak:** Seperti yang terlihat di bagian sebelumnya, penerjemah JavaScript secara otomatis menambah titik koma pada akhir statement jika tidak ada, atau anggap sebuah statement tidak diakhiri di tempat yang seharusnya, yang dapat mengarah pada hasil yang tidak diinginkan. Anda dapat menggunakan penetapan dan hindari penggunaan ekspresi fungsi yang langsung dipanggil untuk mencegah sebagian besar masalah yang tidak terduga.\n\n### Contoh kode\n\n```javascript\n// Lakukan\nfunction doThing() {\n    // ...\n}\n\ndoThing()\n\n// Lakukan\n\nconst items = [1, 2, 3]\nitems.forEach(console.log)\n\n// Hindari — melempar pengecualian\nconst m = new Map()\nconst a = [1,2,3]\n[...m.values()].forEach(console.log)\n> [...m.values()].forEach(console.log)\n>  ^^^\n> SyntaxError: Unexpected token ...\n\n// Hindari — melempar pengecualian\nconst count = 2 // mencoba menjalankan 2(), tapi 2 bukanlah sebuah fungsi\n(function doSomething() {\n  // lakukan sesuatu\n}())\n// letakkan titik koma sebelum fungsi yang langsung dipanggil, setelah pendefinisian const, simpan nilai kembali dari fungsi anonim ke sebuah variabel atau hindari IIFE (ekspresi fungsi yang langsung dipanggil) sepenuhnya\n```\n\n🔗 [**Baca selengkapnya:** \"Semi ESLint rule\"](https://eslint.org/docs/rules/semi)\n🔗 [**Baca selengkapnya:** \"No unexpected multiline ESLint rule\"](https://eslint.org/docs/rules/no-unexpected-multiline)\n\n<br/><br/>\n\n## ![✔] 3.5 Namakan fungsi Anda\n\n**TL;DR:** Namakan semua fungsi, termasuk closure dan panggilan balik. Hindari fungsi anonim. Ini sangat berguna saat mengukur sebuah aplikasi node. Menamakan semua fungsi memungkinkan Anda untuk memahami dengan mudah apa yang Anda lihat saat memeriksa snapshot memori\n\n**Jika tidak:** Men-debug masalah produksi menggunakan core dump (snapshot memori) dapat menjadi tantangan karena Anda melihat konsumsi memori yang signifikan dari fungsi anonim\n\n<br/><br/>\n\n## ![✔] 3.6 Gunakan konvensi penamaan untuk variabel, konstanta, fungsi dan kelas\n\n**TL;DR:** Gunakan **_lowerCamelCase_** saat memberi nama konstanta, variabel dan fungsi dan **_UpperCamelCase_** (huruf besar pada huruf pertama) saat memberi nama kelas. Ini akan membantu Anda dengan mudah untuk membedakan variabel/fungsi biasa, dan kelas yang membutuhkan instansiasi. Gunakan nama yang deskriptif, tetapi usahakan untuk tetap pendek\n\n**Jiak tidak:** Javascript adalah satu-satunya bahasa di dunia yang memungkinkan pemanggilan konstruktor kelas (\"Class\") secara langsung tanpa membuat instansinya terlebih dahulu. Akibatnya, kelas dan fungsi-konstruktor dibedakan dimulai dengan UpperCamelCase\n\n### 3.6 Contoh Kode\n\n```javascript\n// untuk nama kelas kita gunakan UpperCamelCase\nclass SomeClassExample {}\n\n// untuk nama const kita gunakan kata kunci const dan lowerCamelCase\nconst config = {\n  key: \"value\",\n};\n\n// untuk nama variabel dan fungsi kita gunakan lowerCamelCase\nlet someVariableExample = \"value\";\nfunction doSomething() {}\n```\n\n<br/><br/>\n\n## ![✔] 3.7 Utamakan penggunaan const daripada let. Singkirkan var\n\n**TL;DR:** Menggunakan `const` berarti bahwa setelah nilai variabel itu ditetapkan, nilainya tidak dapat ditetapkan kembali. Menggunakan `const` akan membantu Anda untuk tidak tergoda untuk menggunakan variabel yang sama untuk penggunaan yang berbeda, dan membuat kode Anda lebih jelas. Jika sebuah variabel perlu ditetapkan kembali nilainya, di dalam perulangan for, misalnya, deklarasikan menggunakan `let`. Aspek penting lainnya dari `let` adalah variabel yang dideklarasikan menggunakan `let` hanya tersedia di dalam cakupan blok di mana variabel itu didefinisikan. `var` memiliki cakupan dalam fungsi, bukan dalam blok, dan [tidak boleh digunakan di ES6](https://hackernoon.com/why-you-shouldnt-use-var-anymore-f109a58b9b70) setelah Anda mempunyai `const` dan `let`\n\n**Jika tidak:** Men-debug menjadi lebih rumit saat mengikuti variabel yang sering berubah\n\n🔗 [**Baca selengkapnya: JavaScript ES6+: var, let, or const?** ](https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75)\n\n<br/><br/>\n\n## ![✔] 3.8 _Require_ modul terlebih dahulu, bukan di dalam fungsi\n\n**TL;DR:** _Require_ modul di awal setiap file, sebelum dan di luar semua fungsi. Praktik terbaik sederhana ini tidak hanya membantu Anda dengan mudah dan cepat untuk mengetahui dependensi file di awal sebuah file tetapi juga menghindari beberapa potensi masalah\n\n**Jika tidak:** _Require_ dijalankan secara sinkron oleh Node.js. Jika mereka dipanggil dalam sebuah fungsi, ini mungkin dapat memblokir permintaan lain untuk ditangani pada waktu yang lebih kritis. Selain itu, jika modul yang diperlukan atau salah satu dependensinya menimbulkan kesalahan dan merusak server, akan lebih baik untuk mengetahuinya sesegera mungkin, yang mungkin tidak akan terjadi jika modul itu dipanggil dalam sebuah fungsi\n\n<br/><br/>\n\n## ![✔] 3.9 _Require_ modul berdasarkan folder, bukan file secara langsung\n\n**TL;DR:** Saat mengembangkan sebuah modul/pustaka dalam sebuah folder, letak file index.js yang mengekspos modul internal sehingga setiap konsumen akan melewatinya. Ini berfungsi sebagai 'antarmuka' ke modul Anda dan memudahkan perubahan di masa mendatang tanpa merusak kontrak\n\n**Jika tidak:** Mengubah struktur internal sebuah file atau tanda tangannya dapat merusak antarmuka dengan klien\n\n### 3.9 Contoh kode\n\n```javascript\n// Lakukan\nmodule.exports.SMSProvider = require(\"./SMSProvider\");\nmodule.exports.SMSNumberResolver = require(\"./SMSNumberResolver\");\n\n// Hindari\nmodule.exports.SMSProvider = require(\"./SMSProvider/SMSProvider.js\");\nmodule.exports.SMSNumberResolver = require(\"./SMSNumberResolver/SMSNumberResolver.js\");\n```\n\n<br/><br/>\n\n## ![✔] 3.10 Gunakan operator `===`\n\n**TL;DR:** Utamakan operator persamaan ketat `===` daripada operator persamaan abstrak `==` yang lebih lemah. `==` akan membandingkan dua variabel setelah mengubahnya ke tipe umum. Tidak ada konversi tipe di `===`, dan kedua variabel harus sejenis agar sama\n\n**Jika tidak:** Variabel yang tidak sama dapat mengembalikan _true_ ketika dibandingkan dengan operator `==`\n\n### 3.10 Contoh kode\n\n```javascript\n\"\" == \"0\"; // false\n0 == \"\"; // true\n0 == \"0\"; // true\n\nfalse == \"false\"; // false\nfalse == \"0\"; // true\n\nfalse == undefined; // false\nfalse == null; // false\nnull == undefined; // true\n\n\" \\t\\r\\n \" == 0; // true\n```\n\nSemua pernyataan di atas akan mengembalikan nilai _false_ jika menggunakan `===`\n\n<br/><br/>\n\n## ![✔] 3.11 Gunakan Async Await, hindari panggilan balik\n\n**TL;DR:** Node 8 LTS sekarang memiliki dukungan penuh untuk Async-await. Ini adalah cara baru untuk menangani kode asinkron yang menggantikan panggilan balik dan _promise_. Async-await bersifat tidak memblokir, dan ini membuat kode asinkron terlihat seperti sinkron. Hadiah terbaik yang dapat Anda berikan untuk kode Anda adalah menggunakan async-await yang menyediakan sintaks yang lebih ringkas dan akrab seperti try-catch\n\n**Jika tidak:** Menangani kesalahan asinkron dalam gaya panggilan balik mungkin adalah cara terburuk - gaya ini memeriksa kesalahan secara menyeluruh, menangani tumpukan kode yang canggung, dan menyulitkan untuk menjelaskan aliran kode\n\n🔗[**Baca selengkapnya:** Guide to async-await 1.0](https://github.com/yortus/asyncawait)\n\n<br/><br/>\n\n## ![✔] 3.12 Gunakan ekspresi fungsi panah (=>)\n\n**TL;DR:** Meskipun disarankan untuk menggunakan async-await dan menghindari parameter fungsi saat berurusan dengan API lama yang menerima promise atau panggilan balik - fungsi panah membuat struktur kode lebih ringkas dan menjaga konteks leksikal dari akar fungsi (contohnya `this`)\n\n**Jika tidak:** Kode yang lebih panjang (dalam fungsi ES5) lebih rentan terhadap masalah dan rumit untuk dibaca\n\n🔗 [**Baca selengkapnya: It’s Time to Embrace Arrow Functions**](https://medium.com/javascript-scene/familiarity-bias-is-holding-you-back-its-time-to-embrace-arrow-functions-3d37e1a9bb75)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#daftar-isi\">⬆ Kembali ke atas</a></p>\n\n# `4. Praktik Pengujian dan Kualitas Secara Keseluruhan`\n\n## ![✔] 4.1 Paling tidak, buat pengujian API (komponen)\n\n**TL;DR:** Sebagian besar proyek tidak memiliki pengujian otomatis karena jadwal yang singkat atau 'proyek pengujian' sering tidak terkendali dan ditinggalkan. Oleh karena itu, prioritaskan dan mulailah dengan pengujian API yang merupakan cara termudah untuk menulis dan memberikan cakupan yang lebih dari pengujian unit (Anda bahkan dapat membuat pengujian API tanpa kode menggunakan alat seperti [Postman](https://www.getpostman.com/). Setelah itu, jika Anda mempunyai waktu dan sumber daya yang lebih, lanjutkan dengan pengujian yang lebih tinggi seperti pengujian unit, pengujian DB, pengujian performa, dll.\n\n**Jika tidak:** Anda mungkin menghabiskan waktu yang lama untuk menulis pengujian unit untuk mengetahui bahwa Anda hanya mencakup 20% dari sistem\n\n<br/><br/>\n\n## ![✔] 4.2 Sertakan 3 bagian di setiap nama pengujian\n\n**TL;DR:** Buatlah pengujian yang setara dengan tingkat persyaratan sehingga cukup jelas untuk _Engineer_ QA dan pengembang yang tidak terbiasa dengan kode internal. Sebutkan dalam nama pengujian apa yang akan diuji (unit dalam pengujian), dalam keadaan apa, dan apa hasil yang diharapkan\n\n**Jika tidak:** Deployment baru saja gagal, sebuah pengujian bernama “Tambah produk” gagal. Apakah ini memberi tahu Anda dengan tepat apa yang tidak berfungsi?\n\n🔗 [**Baca selengkapnya: Include 3 parts in each test name**](./sections/testingandquality/3-parts-in-name.md)\n\n<br/><br/>\n\n## ![✔] 4.3 Strukturkan pengujian Anda dengan pola AAA\n\n**TL;DR:** Strukturkan pengujian dengan 3 bagian yang terpisah dengan baik: _Arrange, Act & Assert_ (AAA). Bagian pertama mencakup penyiapan untuk pengujian, kemudian eksekusi unit yang akan diuji, dan yang terakhir fase _assertion_. Mengikuti struktur ini menjamin bahwa pembaca tidak menghabiskan tenaga otak untuk memahami rencana pengujian\n\n**Jika tidak:** Tidak hanya Anda menghabiskan waktu yang lama untuk memahami kode utama, tetapi sekarang hal paling mudah dari hari Anda (melakukan pengujian) dapat meregangkan otak Anda\n\n🔗 [**Baca selengkapnya: Structure tests by the AAA pattern**](./sections/testingandquality/aaa.md)\n\n<br/><br/>\n\n## ![✔] 4.4 Deteksi masalah kode dengan _linter_\n\n**TL;DR:** Gunakan _linter_ kode untuk memeriksa kualitas dasar dan mendeteksi anti-pola sejak dini. Jalankan _linter_ sebelum pengujian dan tambahkan _linter_ sebagai pra-commit git-hook untuk meminimalkan waktu yang dibutuhkan untuk meninjau dan memperbaiki masalah apa pun. Periksa juga [Bagian 3](#3-praktik-gaya-kode) tentang Praktik Gaya Kode\n\n**Jika Tidak:** Anda dapat membiarkan beberapa kode dengan anti-pola dan mungkin kode yang tidak aman masuk ke lingkungan produksi Anda.\n\n<br/><br/>\n\n## ![✔] 4.5 Hindari perlengkapan dan benih global pada pengujian, tambah data pada setiap pengujian\n\n**TL;DR:** Untuk mencegah pengujian yang tersambung dan memudahkan untuk memahami alur pengujian, setiap pengujian harus menambah dan bertindak pada kumpulan data di DB-nya sendiri. Setiap kali pengujian perlu menarik atau mengasumsikan keberadaan suatu data pada DB - pengujian tersebut harus menambah data tersebut secara eksplisit dan hindari memutasi kumpulan data lainnya\n\n**Jika tidak:** Anggap sebuah skenario di mana _deployment_ gagal karena pengujian yang gagal, tim sekarang akan menghabiskan waktu yang berharga untuk melakukan investigasi yang berakhir dengan kesimpulan yang menyedihkan: sistem berfungsi dengan baik, namun pengujian saling mengganggu dan merusak _build_-nya\n\n🔗 [**Baca selengkapnya: Avoid global test fixtures**](./sections/testingandquality/avoid-global-test-fixture.md)\n\n<br/><br/>\n\n## ![✔] 4.6 Periksa terus menerus dependensi yang rentan\n\n**TL;DR:** Bahkan dependensi yang paling terkemuka seperti Express memiliki kerentanan yang diketahui. Hal ini dapat dimitigasi dengan mudah menggunakan alat dari komunitas atau komersial seperti 🔗 [npm audit](https://docs.npmjs.com/cli/audit) dan 🔗 [snyk.io](https://snyk.io) yang dapat dipanggil dari CI Anda pada setiap _build_\n\n**Jika tidak:** Menjaga kode Anda bersih dari kerentanan tanpa alat khusus mengharuskan Anda untuk mengikuti publikasi online tentang ancaman baru. Cukup membosankan\n\n<br/><br/>\n\n## ![✔] 4.7 Tandai pengujian Anda\n\n**TL;DR:** Pengujian yang berbeda harus dijalankan pada skenario yang berbeda: _quick smoke_, _IO-less_, pengujian harus dijalankan ketika pengembang menyimpan atau melakukan _commit_ pada file, pengujian _end-to-end_ biasanya dijalankan saat _pull request_ baru dikirimkan, dst. Hal ini dapat dicapai dengan menandai pengujian dengan kata kunci seperti _#cold #api #sanity_ sehingga Anda dapat melakukan `grep` pada pengujian Anda dan menjalankan subset yang diinginkan. Contohnya, ini adalah cara untuk memanggil pengujian pada kelompok _sanity_ dengan [Mocha](https://mochajs.org/): mocha --grep 'sanity'\n\n**Jika tidak:** Menjalankan semua pengujian, termasuk pengujian yang menjalankan banyak kueri DB, setiap kali pengembang membuat perubahan kecil bisa sangat lambat dan menjauhkan pengembang dari menjalankan pengujian\n\n<br/><br/>\n\n## ![✔] 4.8 Periksa cakupan pengujian Anda, ini membantu untuk mengidentifikasikan pola pengujian yang salah\n\n**TL;DR:** Alat cakupan kode seperti [Istanbul](https://github.com/istanbuljs/istanbuljs)/[NYC](https://github.com/istanbuljs/nyc) sangat bagus karena 3 alasan: gratis (sangat mudah untuk memanfaatkan laporan ini), alat ini membantu mengidentifikasikan pengurangan cakupan pengujian, dan yang terakhir, alat ini menyoroti ketidakcocokan pengujian: dengan melihat kode warna pada laporan cakupan Anda dapat melihat, misalnya, area kode yang tidak pernah diuji seperti klausa _catch_ (artinya pengujian hanya mengambil jalur yang benar dan bukan bagaimana aplikasi akan berperilaku jika ada kesalahan). Setel agar _build_-nya gagal jika cakupannya berada di bawah batas tertentu\n\n**Jika tidak:** Tidak akan ada metrik otomatis yang memberi tahu Anda saat sebagian besar kode Anda tidak tercakup dalam pengujian\n\n<br/><br/>\n\n## ![✔] 4.9 Periksa paket yang kedaluwarsa\n\n**TL;DR:** Gunakan alat pilihan Anda (misalnya 'npm outdated' atau [npm-check-updates](https://www.npmjs.com/package/npm-check-updates) untuk mendeteksi paket yang kedaluwarsa, masukkan pemeriksaan ini ke _pipeline CI_ dan bahkan gagalkan _build_-nya dalam skenario yang buruk. Contohnya, skenario yang buruk mungkin terjadi ketika paket yang digunakan tertinggal 5 _patch commit_ (misalnya versi lokal adalah 1.3.1 dan versi repositori adalah 1.3.8) atau paketnya ditandai _deprecated_ oleh pembuatnya - matikan _build_-nya dan cegah _deployment_ pada versi ini\n\n**Jika tidak:** Produksi Anda akan menggunakan paket yang ditandai berisiko oleh pembuatnya secara eksplisit\n\n<br/><br/>\n\n## ![✔] 4.10 Gunakan lingkungan yang mirip dengan produksi untuk pengujian e2e\n\n**TL;DR:** Pengujian _End to end_ (e2e) yang mencakup data asli dulunya merupakan titik terlemah pada proses CI karena pengujian itu bergantung pada beberapa layanan berat seperti DB. Gunakan lingkungan yang semirip mungkin dengan lingkungan pada produksi Anda seperti a-seterusnya (-seterusnya hilang, konten dibutuhkan. Dilihat dari klausa **Jika tidak**, hal ini seharusnya menyebutkan tentang docker-compose)\n\n**Jika tidak:** Tanpa docker-compose, tim harus mengurus DB pengujian untuk setiap lingkungan pengujian termasuk mesin yang dimiliki oleh pengembang, pastikan semua DB tersebut tetap sinkron sehingga hasil pengujian tidak akan berbeda di lingkungan yang berbeda\n\n<br/><br/>\n\n## ![✔] 4.11 Sering lakukan refactor menggunakan alat analisis statis\n\n**TL;DR:** Menggunakan alat analisis statis membantu dengan memberikan cara yang obyektif untuk meningkatkan kualitas kode dan tetap menjaga kode Anda. Anda dapat menambahkan alat analisis statis ke _build_ CI untuk menggagalkan _build_-nya jika alat itu menemukan kode yang jelek. Nilai jual utamanya dibandingkan dengan _linting_ biasa adalah kemampuan untuk memeriksa kualitas dalam konteks beberapa file (contohnya mendeteksi duplikasi), melakukan analisis lanjutan (contohnya kompleksitas kode), dan mengikuti riwayat dan perkembangan masalah kode. Dua contoh alat yang dapat Anda gunakan adalah [Sonarqube](https://www.sonarqube.org/) (2,600+ [bintang](https://github.com/SonarSource/sonarqube)) dan [Code Climate](https://codeclimate.com/) (1,500+ [bintang](https://github.com/codeclimate/codeclimate)).\n\n**Jika tidak:** Dengan kualitas kode yang buruk, _bug_ dan performa selalu akan selalu menjadi masalah yang tidak dapat diperbaiki oleh pustaka baru atau fitur-fitur canggih\n\n🔗 [**Baca selengkapnya: Refactoring!**](./sections/testingandquality/refactoring.md)\n\n<br/><br/>\n\n## ![✔] 4.12 Pilih platform CI Anda dengan hati-hati (Jenkins vs CircleCI vs Travis vs yang lainnya)\n\n**TL;DR:** Platform _continuous integration_ (CICD) Anda akan mempunyai semua alat berkualitas (seperti test, lint) sehingga seharusnya dilengkapi dengan ekosistem plugin yang dinamis. [Jenkins](https://jenkins.io/) dulunya merupakan aplikasi default untuk banyak proyek karena mempunyai komunitas terbesar bersama dengan platform yang sangat kuat dengan kekurangan persiapan yang rumit yang menuntut kurva pembelajaran yang tajam. Saat ini, persiapan solusi CI jauh lebih mudah menggunakan alat SaaS seperti [CircleCI](https://circleci.com) dan lainnya. Alat ini memungkinkan pembuatan pipeline CI yang fleksibel tanpa beban untuk mengelola seluruh infrastruktur. Pada akhirnya, ini merupakan keseimbangan antara kecepatan dan kekuatan - pilih dengan hati-hati\n\n**Jika tidak:** Memilih vendor khusus mungkin akan membatasi Anda ketika Anda membutuhkan penyesuaian tingkat lanjut. Di sisi lain, menggunakan Jenkins dapat menghabiskan waktu berharga dalam penyiapan infrastruktur\n\n🔗 [**Baca selengkapnya: Choosing CI platform**](./sections/testingandquality/citools.md)\n\n## ![✔] 4.13 Uji middleware Anda secara terpisah\n\n**TL;DR:** Ketika middleware mempunyai beberapa logika besar yang mencakup banyak permintaan, ada baiknya untuk mengujinya secara terpisah tanpa membangun seluruh framework web. Hal ini dapat dicapai dengan mudah dengan melakukan _stubbing_ dan _spying_ pada objek {req, res, next}\n\n**Otherwise:** Sebuah _bug_ di middleware Express === sebuah bug di semua atau banyak _request_\n\n🔗 [**Baca selengkapnya: Test middlewares in isolation**](./sections/testingandquality/test-middlewares.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#daftar-isi\">⬆ Kembali ke atas</a></p>\n\n# `5. Praktik Dalam Produksi`\n\n## ![✔] 5.1. Pemantauan\n\n**TL;DR:** Pemantauan adalah permainan mencari suatu masalah sebelum pelanggan menemukannya terlebih dahulu – yang jelas masalah itu merupakan masalah yang belum pernah terjadi sebelumnya. Pasar kewalahan dengan penawaran sehingga mempertimbangkan untuk memulai dengan menentukan metrik dasar yang harus Anda ikuti (saran saya di dalam), kemudian pertimbangkan fitur-fitur mewah tambahan dan pilih solusi yang mencentang semua kotak. Klik ‘Intinya’ di bawah untuk ringkasan dari berbagai solusi\n\n**Jika tidak:** Kegagalan === pelanggan kecewa. Sederhana\n\n🔗 [**Baca selengkapnya: Monitoring!**](./sections/production/monitoring.md)\n\n<br/><br/>\n\n## ![✔] 5.2. Tingkatkan transparansi dengan menggunakan logging yang cerdas\n\n**TL;DR:** _Log_ dapat menjadi gudang statement debug yang bodoh atau papan cantik yang menceritakan kisah aplikasi Anda. Rencanakan platform logging Anda dari hari pertama: bagaimana log dikumpulkan, disimpan dan dianalisis untuk memastikan bahwa informasi yang diinginkan (misalnya tingkat kesalahan, mengikuti seluruh transaksi melalui layanan dan server, dst.) benar-benar dapat diekstrak\n\n**Jika tidak:** Anda berakhir dengan kotak hitam yang sulit dimengerti, kemudian Anda mulai menulis ulang semua statement log untuk menambahkan informasi tambahan\n\n🔗 [**Baca selengkapnya: Increase transparency using smart logging**](./sections/production/smartlogging.md)\n\n<br/><br/>\n\n## ![✔] 5.3. Delegasikan apa pun yang mungkin (misalnya gzip, SSL) ke sebuah _reverse proxy_\n\n**TL;DR:** Node sangat buruk dalam melakukan pekerjaan yang intensif CPU seperti melakukan gzip, penghentian SSL, dll. Anda harus menggunakan layanan middleware yang ‘asli’ seperti nginx, HAproxy atau layanan vendor cloud\n\n**Jika tidak:** Thread utama Anda akan tetap sibuk melakukan tugas infrastruktur alih-alih menangani inti aplikasi Anda dan performa akan menurun karenanya\n\n🔗 [**Baca selengkapnya: Delegate anything possible (e.g. gzip, SSL) to a reverse proxy**](./sections/production/delegatetoproxy.md)\n\n<br/><br/>\n\n## ![✔] 5.4. Kunci dependensi\n\n**TL;DR:** Kode Anda harus identik di semua lingkungan, namun npm dapat membiarkan dependensi berubah di lingkungan yang berbeda – saat Anda menginstal paket di lingkungan lain npm mencoba menginstal versi terbaru dari paket tersebut. Atasi ini dengan menggunakan file konfigurasi , .npmrc, yang memberi tahu setiap lingkungan untuk menyimpan versi yang tepat (bukan yang terbaru) dari setiap paket. Alternatifnya, untuk kontrol yang lebih baik, gunakan `npm shrinkwrap`. \\*Pembaruan: pada NPM5, dependensi dikunci secara default. Manajer paket yang baru, Yarn, juga melakukan hal ini\n\n**Jika tidak:** QA akan menguji kode secara menyeluruh dan menyetujui versi yang kemudian akan berperilaku berbeda dalam produksi. Lebih buruk lagi, server yang berbeda dalam kelompok produksi mungkin menjalankan kode yang berbeda\n\n🔗 [**Baca selengkapnya: Lock dependencies**](./sections/production/lockdependencies.md)\n\n<br/><br/>\n\n## ![✔] 5.5. Jaga uptime proses menggunakan alat yang tepat\n\n**TL;DR:** Proses harus tetap berjalan dan dimulai ulang jika terjadi kegagalan. Untuk skenario simpel, alat manajemen proses seperti PM2 mungkin sudah cukup namun di era ‘dockerized’, alat management cluster juga harus dipertimbangkan\n\n**Jika tidak:** Menjalankan banyak instansi tanpa strategi yang jelas dan terlalu banyak alat (manajemen cluster, docker, PM2) dapat menyebabkan kekacauan DevOps\n\n🔗 [**Baca selengkapnya: Guard process uptime using the right tool**](./sections/production/guardprocess.md)\n\n<br/><br/>\n\n## ![✔] 5.6. Manfaatkan semua core CPU\n\n**TL;DR:** Pada dasarnya, aplikasi Node berjalan pada satu core CPU sementara core lainnya tidak digunakan. Ini merupakan tugas Anda untuk mereplika proses Node dan menggunakan semua CPU – Untuk aplikasi kecil-menengah Anda dapat menggunakan Node Cluster atau PM2. Untuk aplikasi yang lebih besar pertimbangkan untuk mereplika proses menggunakan beberapa Docker cluster (misalnya K8S, ECS) atau skrip _deployment_ yang didasarkan pada sistem Linux init (misalnya systemd)\n\n**Jika tidak:** Aplikasi Anda kemungkinan hanya menggunakan 25% dari sumber daya yang tersedia(!) atau bahkan kurang. Ingat bahwa server tipikal memiliki 4 core CPU atau lebih, _deployment_ Node.js yang naif hanya menggunakan 1 (bahkan jika menggunakan layanan PaaS seperti AWS beanstalk!)\n\n🔗 [**Baca selengkapnya: Utilize all CPU cores**](./sections/production/utilizecpu.md)\n\n<br/><br/>\n\n## ![✔] 5.7. Buat ‘endpoint pemeliharaan’\n\n**TL;DR:** Sediakan sekumpulan informasi terkait sistem, seperti penggunaan memori dan REPL, dll. dalam API yang aman. Meskipun sangat disarankan untuk mengandalkan alat standar dan battle-test, beberapa informasi penting dan operasi lebih mudah dilakukan melalui kode\n\n**Jika tidak:** Anda akan melakukan banyak “deploy diagnostik” – mendeploy kode ke produksi hanya untuk mengekstrak beberapa informasi untuk keperluan diagnostik\n\n🔗 [**Baca selengkapnya: Create a ‘maintenance endpoint’**](./sections/production/createmaintenanceendpoint.md)\n\n<br/><br/>\n\n## ![✔] 5.8. Temukan kesalahan dan downtime menggunakan produk APM\n\n**TL;DR:** _Application monitoring and performance products_ (a.k.a APM) secara proaktif mengukur basis kode dan API sehingga mereka dapat secara otomatis melampaui pemantauan tradisional dan mengukur pengalaman pengguna secara keseluruhan di semua layanan dan tingkatan. Misalnya, beberapa produk APM dapat menyoroti transaksi yang terlalu lambat di sisi pengguna sambil menyarankan penyebab utamanya\n\n**Jika tidak:** Anda mungkin menghabiskan banyak tenaga untuk mengukur kinerja dan downtime API, mungkin Anda tidak akan pernah tau bagian kode mana yang paling lambat dalam skenario dunia nyata dan bagaimana hal ini dapat memengaruhi pengalaman pengguna\n\n🔗 [**Baca selengkapnya: Discover errors and downtime using APM products**](./sections/production/apmproducts.md)\n\n<br/><br/>\n\n## ![✔] 5.9. Buat kode Anda siap produksi\n\n**TL;DR:** Buat kode dengan tujuan akhir ada dalam pikiran Anda, rencanakan untuk produksi dari hari pertama. Ini terdengar kurang jelas jadi saya telah mengumpulkan beberapa tips pengembangan yang berkaitan erat dengan perawatan produksi (klik intinya di bawah)\n\n**Jika tidak:** Seorang juara dunia IT/DevOps tidak akan memperbaiki sistem yang ditulis dengan buruk\n\n🔗 [**Baca selengkapnya: Make your code production-ready**](./sections/production/productioncode.md)\n\n<br/><br/>\n\n## ![✔] 5.10. Ukur dan jaga penggunaan memori\n\n**TL;DR:** Node.js memiliki hubungan yang kontroversial dengan memori: mesin v8 memiliki batas memori yang rendah (1.4GB) dan terdapat cara yang diketahui untuk terjadinya kebocoran memori dalam kode Node – sehingga mengamati memori proses Node adalah suatu keharusan. Pada aplikasi kecil, Anda dapat mengukur memori Anda secara berkala menggunakan perintah _shell_ namun di aplikasi menengah-besar pertimbangkan untuk membuat sistem pemantauan yang kuat untuk mengamati memori\n\n**Jika tidak:** Memori proses Anda mungkin bocor ratusan megabyte sehari seperti yang terjadi pada [Walmart](https://www.joyent.com/blog/walmart-node-js-memory-leak)\n\n🔗 [**Baca selengkapnya: Measure and guard the memory usage**](./sections/production/measurememory.md)\n\n<br/><br/>\n\n## ![✔] 5.11. Keluarkan aset _frontend_ Anda dari Node\n\n**TL;DR:** Sajikan konten _frontend_ menggunakan middleware khusus (nginx, S3, CDN) karena performa Node dapat berkurang ketika menangani banyak file statis karena model thread tunggalnya\n\n**Jika tidak:** Thread tunggal Node Anda akan sibuk mengirimkan ratusan file html/gambar/angular/react alih-alih mengalokasikan semua sumber dayanya untuk tugas yang seharusnya – menyajikan konten dinamis\n\n🔗 [**Baca selengkapnya: Get your frontend assets out of Node**](./sections/production/frontendout.md)\n\n<br/><br/>\n\n## ![✔] 5.12. Buat aplikasi yang stateless, matikan server Anda hampir setiap hari\n\n**TL;DR:** Simpan semua jenis data (misalnya sesi pengguna, cache, file yang diunggah) ke tempat penyimpanan eksternal. Pertimbangkan untuk ‘mematikan’ server Anda secara berkala atau gunakan platform ‘serverless’ (misalnya AWS Lambda) yang secara eksplisit mengharuskan sifat stateless\n\n**Jika tidak:** Kegagalan di server tertentu akan mengakibatkan downtime aplikasi, bukannya hanya mematikan mesin yang rusak. Selain itu, elastisitas penskalaan akan menjadi lebih sulit karena ketergantungan pada server tertentu\n\n🔗 [**Baca selengkapnya: Be stateless, kill your Servers almost every day**](./sections/production/bestateless.md)\n\n<br/><br/>\n\n## ![✔] 5.13. Gunakan alat yang pendeteksi kerentanan secara otomatis\n\n**TL;DR:** Bahkan dependensi yang paling terkemuka seperti Express memiliki kerentanan yang diketahui (dari waktu ke waktu) yang dapat membahayakan sistem. Hal ini dapat dimitigasi dengan mudah menggunakan alat dari komunitas atau komersial yang terus-menerus memeriksa kerentanan dan memberi peringatan (secara lokal atau di GitHub), beberapa bahkan dapat langsung memperbaikinya\n\n**Jika tidak:** Menjaga kode Anda bersih dari kerentanan tanpa alat khusus mengharuskan Anda untuk mengikuti publikasi online tentang ancaman baru. Cukup membosankan\n\n🔗 [**Baca selengkapnya: Use tools that automatically detect vulnerabilities**](./sections/production/detectvulnerabilities.md)\n\n<br/><br/>\n\n## ![✔] 5.14. Tetapkan id transaksi di seetiap statement catatan\n\n**TL;DR:** Tetapkan pengenal yang sama, transaksi-id: {sebuah nilai}, ke setiap entri catatan dalam satu permintaan. Kemudian saat memeriksa kesalahan di dalam catatan, simpulkan dengan mudah apa yang terjadi sebelum dan sesudahnya. Sayangnya, hal ini tidak mudah untuk dicapai di Node karena sifat asinkron-nya, lihat contoh kode di dalam\n\n**Jika tidak:** Melihat catatan kesalahan produksi tanpa konteks – apa yang terjadi sebelumnya – membuat Anda lebih sulit untuk memahami penyebab kesalahannya\n\n🔗 [**Baca selengkapnya: Assign ‘TransactionId’ to each log statement**](./sections/production/assigntransactionid.md)\n\n<br/><br/>\n\n## ![✔] 5.16. Atur NODE_ENV=production\n\n**TL;DR:** Atur variabel lingkungan NODE_ENV ke ‘production’ or ‘development’ untuk menandai apakah pengoptimalan produksi harus diaktifkan – banyak paket npm melihat lingkungan yang digunakan dan mengoptimalkan kodenya untuk produksi\n\n**Jika tidak:** Mengabaikan properti sederhana ini dapat menurunkan performa. Contohnya, pada saat menggunakan Express untuk rendering sisi server menghilangkan `NODE_ENV` membuat proses render lebih lambat hingga 3 kali lipat!\n\n🔗 [**Baca selengkapnya: Set NODE_ENV=production**](./sections/production/setnodeenv.md)\n\n<br/><br/>\n\n## ![✔] 5.16. Rancang deployment otomatis, atomic dan tanpa downtime\n\n**TL;DR:** Penelitian menunjukkan bahwa tim yang melakukan banyak deployment menurunkan kemungkinan masalah produksi yang buruk. Deployment yang otomatis dan cepat tidak memerlukan langkah manual yang berisiko dan waktu downtime layanan meningkatkan proses deployment. Anda mungkin harus melakukan ini menggunakan Docker yang dikombinasikan dengan alat CI karena mereka menjadi standar industri untuk deployment yang efisien\n\n**Jika tidak:** Deployment yang lama -> downtime produksi & kesalahan oleh manusia -> tim ragu dalam melakukan deployment -> lebih sedikit deployment dan fitur\n\n<br/><br/>\n\n## ![✔] 5.17. Gunakan versi LTS pada Node.js\n\n**TL;DR:** Pastikan Anda menggunakan versi LTS pada Node.js untuk menerima perbaikan bug yang kritis, pembaruan keamanan dan peningkatan performa\n\n**Otherwise:** Bug atau kerentanan yang baru ditemukan dapat digunakan untuk mengeksploitasi aplikasi yang sedang berjalan dalam produksi, dan aplikasi Anda mungkin menjadi tidak didukung oleh berbagai modul dan lebih sulit untuk di dipelihara\n\n🔗 [**Baca selengkapnya: Use an LTS release of Node.js**](./sections/production/LTSrelease.md)\n\n<br/><br/>\n\n## ![✔] 5.18. Jangan rutekan catatan di dalam aplikasi\n\n**TL;DR:** Tempat catatan tidak boleh dibuat oleh pengembang dalam kode aplikasi, tetapi harus ditentukan oleh lingkungan eksekusi dimana aplikasi itu dijalankan. Pengembang harus menuliskan catatan ke `stdout` menggunakan utilitas logger dan membiarkan lingkungan eksekusi (container, server, dll.) menyalurkan `stdout` ke tujuan yang sesuai (misalnya Splunk, Graylog, ElasticSearch, dll.).\n\n**Jika tidak:** Aplikasi menangani rute catatan === sulit untuk dikembangkan, kehilangan catatan, dan _separation of concerns_ yang buruk\n\n🔗 [**Baca selengkapnya: Log Routing**](./sections/production/logrouting.md)\n\n<br/><br/>\n\n## ![✔] 5.19. Install paket menggunakan `npm ci`\n\n**TL;DR:** Anda harus memastikan bahwa kode produksi menggunakan versi paket yang sama dengan yang Anda gunakan pada saat pengujian. Jalankan `npm ci` untuk melakukan instalasi bersih dari dependensi di dalam package.json dan package-lock.json. Penggunaan perintah ini sangat direkomendasikan dalam lingkungan otomatis seperti pipeline continuous integration.\n\n**Jika tidak:** QA akan menguji kode secara menyeluruh dan menyetujui versi yang kemudian akan berperilaku berbeda dalam produksi. Lebih buruk lagi, server yang berbeda dalam kelompok produksi mungkin menjalankan kode yang berbeda.\n\n🔗 [**Baca selengkapnya: Use npm ci**](./sections/production/installpackageswithnpmci.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#daftar-isi\">⬆ Kembali ke atas</a></p>\n\n# `6. Praktik Terbaik Keamanan`\n\n<div align=\"center\">\n<img src=\"https://img.shields.io/badge/OWASP%20Threats-Top%2010-green.svg\" alt=\"54 items\"/>\n</div>\n\n## ![✔] 6.1. Terapkan aturan keamanan linter\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20XSS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Manfaatkan plugin linter yang berhubungan dengan keamanan seperti [eslint-plugin-security](https://github.com/nodesecurity/eslint-plugin-security) untuk menangkap kerentanan dan masalah keamanan sedini mungkin, lebih baik lagi jika dalam proses pembuatan kode. Hal ini dapat membantu menangkap keamanan yang lemah seperti penggunaan eval, menjalankan child process atau memanggil modul menggunakan literal string (misalnya masukan pengguna). Klik 'Baca selengkapnya' di bawah ini untuk melihat contoh kode yang akan dideteksi oleh linter keamanan\n\n**Jika tidak:** Kelemahan keamanan yang jelas selama masa pengembangan malah menjadi masalah besar dalam produksi. Selain itu, proyek mungkin tidak mengikuti praktik kode keamanan yang konsisten, yang mengarah ke kerentanan baru, atau rahasia sensitif yang ter-_commit_ ke dalam repositori remote\n\n🔗 [**Baca selengkapnya: Lint rules**](./sections/security/lintrules.md)\n\n<br/><br/>\n\n## ![✔] 6.2. Batasi request serentak dengan menggunakan middleware\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Serangan DOS sangat populer dan relatif mudah untuk dilakukan. Terapkan pembatasan rate menggunakan layanan eksternal seperti _cloud load balancers_, _cloud firewalls_, nginx, paket [rate-limiter-flexible](https://www.npmjs.com/package/rate-limiter-flexible), atau (untuk aplikasi yang lebih kecil dan kurang penting) sebuah middleware _rate-limiting_ (misalnya [express-rate-limit](https://www.npmjs.com/package/express-rate-limit))\n\n**Jika tidak:** Aplikasi dapat terkena serangan _denial of service_ sementara pengguna asli menggunakan layanan yang terdegradasi atau tidak tersedia.\n\n🔗 [**Baca selengkapnya: Implement rate limiting**](./sections/security/limitrequests.md)\n\n<br/><br/>\n\n## ![✔] 6.3 Keluarkan rahasia dari file konfigurasi atau gunakan paket untuk mengenkripsinya\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A3:Sensitive%20Data%20Exposure%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Jangan pernah menyimpan rahasia dalam bentuk teks biasa dalam file konfigurasi atau kode sumber. Sebagai gantinya, gunakan sistem manajemen rahasia seperti produk _Vault_, _Kubernetes/Docker Secrets_, atau gunakan variabel lingkungan. Sebagai cara terakhir, rahasia yang disimpan di kontrol kode harus terenkripsi dan teratur (kunci bergulir, kedaluwarsa, audit, dll.). Manfaatkan hook pra-_commit_/_push_ untuk mencegah agar rahasia tidak ter-_commit_ secara tidak sengaja\n\n**Jika tidak:** Kontrol sumber, bahkan untuk repositori pribadi, dapat di buat publik secara tidak sengaja, di mana semua rahasia dapat terungkap. Akses kontrol sumber dari pihak eksternal dapat memberikan akses ke sistem terkait (database, api, layanan, dll.) secara tidak sengaja.\n\n🔗 [**Baca selengkapnya: Secret management**](./sections/security/secretmanagement.md)\n\n<br/><br/>\n\n## ![✔] 6.4. Cegah injeksi kueri dengan menggunakan pustaka ORM/ODM\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Untuk mencegah injeksi SQL/NoSQL dan serangan buruk lainnya, selalu gunakan ORM/ODM atau pustaka database yang melakukan _escape_ pada data atau mendukung kueri berparameter yang bernama atau diindeks, dan tangani validasi masukan pengguna agar sesuai dengan tipe yang diharapkan. Jangan pernah hanya menggunakan template string JavaScript atau penggabungan string untuk memasukkan nilai ke dalam kueri karena ini membuka aplikasi Anda ke spektrum kerentanan yang luas. Semua pustaka akses data pada Node.js (misalnya [Sequelize](https://github.com/sequelize/sequelize), [Knex](https://github.com/tgriesser/knex), [mongoose](https://github.com/Automattic/mongoose)) memiliki perlindungan bawaan untuk menghindari serangan injeksi.\n\n**Jika tidak:** Masukan pengguna yang tidak divalidasi atau tidak disanitasi dapat menyebabkan injeksi operator saat menggunakan MongoDB untuk NoSQL, dan dengan tidak menggunakan sistem sanitasi atau ORM dapat memungkinkan serangan injeksi SQL, membuat suatu kerentanan yang besar.\n\n🔗 [**Baca selengkapnya: Query injection prevention using ORM/ODM libraries**](./sections/security/ormodmusage.md)\n\n<br/><br/>\n\n## ![✔] 6.5. Kumpulan praktik terbaik keamanan umum\n\n**TL;DR:** Ini adalah kumpulan saran keamanan yang tidak berhubungan langsung dengan Node.js - implementasi pada Node tidak jauh berbeda dengan implementasi pada bahasa lain. Klik 'Baca selengkapnya' untuk membaca sekilas.\n\n🔗 [**Baca selengkapnya: Common security best practices**](./sections/security/commonsecuritybestpractices.md)\n\n<br/><br/>\n\n## ![✔] 6.6. Sesuaikan header response HTTP untuk meningkatkan keamanan\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Aplikasi Anda harus menggunakan _header_ yang aman untuk mencegah penyerang dari serangan umum seperti _cross-site scripting_ (XSS), _clickjacking_ dan serangan berbahaya lainnya. Hal ini dapat dikonfigurasikan dengan mudah menggunakan modul seperti [helmet](https://www.npmjs.com/package/helmet).\n\n**Jika tidak:** Penyerang dapat melakukan serangan langsung pada pengguna aplikasi, yang menyebabkan kerentanan keamanan yang sangat besar\n\n🔗 [**Baca selengkapnya: Using secure headers in your application**](./sections/security/secureheaders.md)\n\n<br/><br/>\n\n## ![✔] 6.7. Selalu periksa dependensi dari kerentanan secara otomatis\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Known%20Vulnerabilities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Dengan ekosistem npm, sangat umum pada suatu proyek untuk memiliki banyak dependensi. Dependensi harus selalu diperiksa ketika kerentanan baru ditemukan. Gunakan alat seperti [npm audit](https://docs.npmjs.com/cli/audit) atau [snyk](https://snyk.io/) untuk melacak, memantau dan memperbaiki dependensi yang rentan. Integrasikan alat-alat ini dengan setup CI Anda sehingga Anda dapat menemukan dependensi yang rentan sebelum masuk ke produksi.\n\n**Jika tidak:** Penyerang dapat mendeteksi framework web Anda dan menyerang semua kerentanan yang diketahui.\n\n🔗 [**Baca selengkapnya: Dependency security**](./sections/security/dependencysecurity.md)\n\n<br/><br/>\n\n## ![✔] 6.8. Lindungi kata sandi/rahasia pengguna menggunakan bcrypt atau scrypt\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Kata sandi atau rahasia (seperti API keys) harus disimpan menggunakan fungsi hash + salt yang aman seperti `bcrypt`,`scrypt`, atau setidaknya `pbkdf2`.\n\n**Jika tidak:** Kata sandi dan rahasia yang disimpan tanpa fungsi yang aman akan rentan terhadap _brute force_ dan penyerangan kamus yang pada akhirnya akan mengarah pada data rahasia yang terekspos.\n\n🔗 [**Baca selengkapnya: User Passwords**](./sections/security/userpasswords.md)\n\n<br/><br/>\n\n## ![✔] 6.9. Escape keluaran HTML, JS dan CSS\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Data yang tidak terpercaya yang dikirim ke browser mungkin akan tereksekusi alih-alih hanya ditampilkan, hal ini biasanya disebut dengan serangan _cross-site-scripting_ (XSS). Hindari hal ini dengan menggunakan pustaka khusus yang secara eksplisit menandai data sebagai konten yang tidak boleh dieksekusi (misalnya encoding, escaping)\n\n**Jika tidak:** Penyerang mungkin menyimpan kode JavaScript yang berbahaya di DB Anda yang kemudian akan dikirim apa adanya ke pengguna\n\n🔗 [**Baca selengkapnya: Escape output**](./sections/security/escape-output.md)\n\n<br/><br/>\n\n## ![✔] 6.10. Validasi skema JSON yang diterima\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7: XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A8:Insecured%20Deserialization%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Validasi muatan _body_ pada request dan pastikan agar muatan memenuhi ekspektasi, gagalkan dengan cepat jika muatan tidak memenuhi ekspektasi. Untuk menghindari kode validasi yang berantakan dalam setiap rute Anda dapat menggunakan validasi skema berbasis JSON yang ringan seperti [jsonschema](https://www.npmjs.com/package/jsonschema) atau [joi](https://www.npmjs.com/package/joi)\n\n**Jika tidak:** Kemurahan hati dan cara permisif Anda dapat meningkatkan kemungkinan penyerangan dan mendorong penyerang untuk mencoba banyak masukan sampai mereka menemukan beberapa kombinasi untuk merusak aplikasi\n\n🔗 [**Baca selengkapnya: Validate incoming JSON schemas**](./sections/security/validation.md)\n\n<br/><br/>\n\n## ![✔] 6.11. Dukung daftar hitam JWT\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Ketika menggunakan _JSON Web Tokens_ (misalnya, dengan [Passport.js](https://github.com/jaredhanson/passport)), secara default tidak ada cara untuk mencabut akses dari token yang dibuat. Setelah Anda menemukan beberapa aktifitas pengguna yang berbahaya, tidak ada cara untuk mengentikan mereka dari mengakses sistem selama mereka mempunyai token yang valid. Hindari ini dengan menerapkan daftar hitam untuk token yang tidak tepercaya yang divalidasi pada setiap request.\n\n**Jika tidak:** Token yang kedaluwarsa atau salah ditempatkan dapat digunakan secara jahat oleh pihak ketiga untuk mengakses aplikasi dan menyamar sebagai pemilik token.\n\n🔗 [**Baca selengkapnya: Blacklist JSON Web Tokens**](./sections/security/expirejwt.md)\n\n<br/><br/>\n\n## ![✔] 6.12. Cegah serangan _brute-force_ terhadap otorisasi\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Teknik sederhana dan kuat adalah membatasi upaya otorisasi menggunakan dua metrik:\n\n1. Pertama adalah upaya gagal berturut-turut oleh ID / nama unik dan alamat IP yang sama.\n2. Kedua adalah jumlah upaya gagal dari sebuah alamat IP selama jangka waktu yang lama. Misalnya, blokir alamat IP jika IP tersebut melakukan 100 upaya gagal dalam satu hari.\n\n**Jika tidak:** Penyerang dapat melakukan percobaan kata sandi otomatis tanpa batas untuk mendapatkan akses ke akun yang memiliki hak istimewa pada suatu aplikasi\n\n🔗 [**Baca selengkapnya: Login rate limiting**](./sections/security/login-rate-limit.md)\n\n<br/><br/>\n\n## ![✔] 6.13. Jalankan Node.js sebagai pengguna yang bukan root\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A5:Broken%20Access%20Access%20Control-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Ada skenario umum di mana Node.js dijalankan sebagai pengguna root dengan izin tanpa batas. Misalnya, ini adalah perilaku default di kontainer Docker. Direkomendasikan untuk membuat pengguna yang bukan root dan _bake_ pengguna itu ke dalam _Docker image_ (contoh ada di bawah) atau jalankan proses atas nama pengguna ini dengan menjalankan kontainer dengan _flag_ \"-u username\"\n\n**Jika tidak:** Penyerang yang berhasil menjalankan skrip di server mendapatkan kekuatan tak terbatas atas mesin lokal (misalnya mengganti iptable dan merutekan ulang traffic ke servernya)\n\n🔗 [**Baca selengkapnya: Run Node.js as non-root user**](./sections/security/non-root-user.md)\n\n<br/><br/>\n\n## ![✔] 6.14. Batasi ukuran payload menggunakan reverse-proxy atau middleware\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A8:Insecured%20Deserialization%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Semakin besar ukuran payload-nya, semakin sulit thread tunggal Anda untuk memprosesnya. Ini adalah kesempatan bagi penyerang untuk membuat server bertekuk lutut tanpa banyak mengirimkan request (penyerangan DOS/DDOS). Hindari ini dengan membatasi ukuran body dari request yang masuk di ujung (misalnya firewall, ELB) atau mengonfigurasi [express body parser](https://github.com/expressjs/body-parser) agar hanya menerima payload dengan ukuran kecil\n\n**Jika tidak:** Aplikasi Anda harus menangani request yang besar, tidak dapat memproses pekerjaan penting lainnya yang harus diselesaikan, yang mengarah ke implikasi performa dan kerentanan terhadap serangan DOS\n\n🔗 [**Baca selengkapnya: Limit payload size**](./sections/security/requestpayloadsizelimit.md)\n\n<br/><br/>\n\n## ![✔] 6.15. Hindari statement eval pada JavaScript\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** `eval` sangat buruk karena memungkinkan untuk mengeksekusi kode JavaScript dalam _run time_. Ini bukan hanya menjadi perhatian dalam performa tetapi juga perhatian dalam masalah keamanan penting karena kode JavaScript dapat bersumber dari masukan pengguna. Fitur bahasa lain yang harus dihindari adalah konstruktor `new Function`. `setTimeout` dan `setInterval` juga tidak boleh diberikan kode JavaScript yang dinamis.\n\n**Jika tidak:** Kode JavaScript yang berbahaya menemukan jalan ke dalam teks yang diteruskan ke `eval` atau fungsi evaluasi _real-time_ bahasa Javascript lainnya, dan akan mendapatkan akses penuh ke izin JavaScript di halaman tersebut. Kerentanan ini sering kali diwujudkan sebagai serangan XSS.\n\n🔗 [**Baca selengkapnya: Avoid JavaScript eval statements**](./sections/security/avoideval.md)\n\n<br/><br/>\n\n## ![✔] 6.16. Cegah RegEx yang buruk agar tidak membebani eksekusi thread tunggal Anda\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** _Regular Expressions_, meskipun berguna, dapat menimbulkan ancaman pada aplikasi JavaScript secara luas, dan platform Node.js pada khususnya. Masukan teks pengguna mungkin memerlukan jumlah siklus CPU yang luar biasa untuk diproses. Pemrosesan RegEx mungkin tidak efisien sampai-sampai satu request yang memvalidasi 10 kata dapat memblokir seluruh event loop selama 6 detik dan membuat CPU-nya 🔥. Oleh karena itu, gunakan paket validasi pihak ketiga seperti [validator.js](https://github.com/chriso/validator.js) daripada menuliskan pola Regex Anda sendiri, atau gunakan [safe-regex](https://github.com/substack/safe-regex) untuk mendeteksi pola regex yang rentan\n\n**Jika tidak:** Regex yang ditulis dengan buruk dapat rentan terhadap serangan DoS Regular Expression yang akan memblokir event loop sepenuhnya. MIsalnya, paket `moment` yang populer ditemukan rentan terhadap penggunaan Regex pada November 2017\n\n🔗 [**Baca selengkapnya: Prevent malicious RegEx**](./sections/security/regex.md)\n\n<br/><br/>\n\n## ![✔] 6.17. Hindari pemuatan modul menggunakan variabel\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Hindari pemuatan file lain dengan jalur yang diberikan sebagai parameter karena dikhawatirkan dapat berasal dari masukan pengguna. Aturan ini dapat diperluas untuk mengakses file secara umum (yaitu `fs.readFile()`) atau pengaksesan sumber sensitif lainnya dengan variabel dinamis yang berasal dari masukan pengguna. Linter [Eslint-plugin-security](https://www.npmjs.com/package/eslint-plugin-security) dapat menangkap pola seperti itu dan memberi peringatan cukup dini\n\n**Jika tidak:** Masukan pengguna yang berbahaya dapat menemukan jalannya ke parameter yang digunakan untuk memuat file, misalnya, file yang sebelumnya diunggah ke sistem file, atau pengaksesan file sistem yang sudah ada.\n\n🔗 [**Baca selengkapnya: Safe module loading**](./sections/security/safemoduleloading.md)\n\n<br/><br/>\n\n## ![✔] 6.18. Jalankan kode yang tidak aman di sandbox\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Saat ditugaskan untuk menjalankan kode eksternal yang diberikan pada run-time (misalnya plugin), gunakan segala jenis lingkungan eksekusi 'sandbox' yang mengisolasi dan melindungi kode utama dari plugin tersebut. Hal ini dapat dicapai dengan menggunakan proses khusus (misalnya `cluster.fork()`), lingkungan _serverless_ atau paket npm khusus yang bertindak sebagai sandbox\n\n**JIka tidak:** Sebuah plugin dapat menyerang dengan berbagai pilihan seperti perulangan tak terbatas, memberi muatan lebih pada memori, dan mengakses variabel lingkungan sensitif pada proses\n\n🔗 [**Baca selengkapnya: Run unsafe code in a sandbox**](./sections/security/sandbox.md)\n\n<br/><br/>\n\n## ![✔] 6.19. Berhati-hati saat menggunakan _child processes_\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Hindari penggunaan _child processes_ jika memungkinkan dan validasi serta sanitasi masukan untuk menghindari serangan injeksi shell jika Anda masih perlu menggunakannya. Utamakan penggunaan `child_process.execFile` yang menurut definisi hanya akan menjalankan satu perintah dengan sekumpulan atribut dan tidak akan mengizinkan perluasan parameter shell.\n\n**Jika tidak:** Penggunaan child process yang naif dapat mengakibatkan eksekusi perintah secara remote atau serangan injeksi shell karena masukan pengguna yang berbahaya diteruskan ke perintah sistem yang tidak disanitasi.\n\n🔗 [**Baca selengkapnya: Be cautious when working with child processes**](./sections/security/childprocesses.md)\n\n<br/><br/>\n\n## ![✔] 6.20. Sembunyikan detail kesalahan dari klien\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Penangan kesalahan express menyembunyikan detail kesalahan secara default. Namun, besar kemungkinan Anda menerapkan logika penanganan kesalahan Anda sendiri dengan objek Error kustom (dianggap sebagai praktik terbaik oleh banyak orang). Jika iya, pastikan Anda tidak mengembalikan seluruh objek error ke klien, yang mungkin mengandung beberapa informasi aplikasi yang sensitif\n\n**Jika tidak:** Informasi sensitif aplikasi seperti path file server, modul pihak ketiga yang digunakan, dan alur kerja internal aplikasi lainnya yang dapat dieksploitasi oleh penyerang, dapat dibocorkan dari informasi yang ditemukan di dalam stack trace\n\n🔗 [**Baca selengkapnya: Hide error details from client**](./sections/security/hideerrors.md)\n\n<br/><br/>\n\n## ![✔] 6.21. Konfigurasi 2FA untuk npm atau Yarn\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Setiap langkah dalam rantai pengembangan harus dilindungi dengan MFA (_multi-factor authentication_), npm/Yarn menjadi peluang yang bagus bagi penyerang yang ingin mendapatkan kata sandi pengembang. Dengan menggunakan kredensial pengembang, penyerang dapat memasukkan kode berbahaya ke dalam pustaka yang diinstal secara luas di seluruh proyek dan layanan. Bahkan mungkin di seluruh web jika dipublikasikan. Mengaktifkan _2-factor-authentication_ dalam npm akan meninggalkan hampir nol peluang bagi penyerang untuk mengubah kode paket Anda.\n\n**Jika tidak:** [Pernahkah Anda mendengar tentang pengembang eslint yang kata sandinya dibajak?](https://medium.com/@oprearocks/eslint-backdoor-what-it-is-and-how-to-fix-the-issue-221f58f1a8c8)\n\n<br/><br/>\n\n## ![✔] 6.22. Ubah pengaturan middleware sesi\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Setiap framework dan teknologi web mempunyai kelemahannya masing-masing - memberi tahu penyerang framework web apa yang digunakan sangat membantu mereka. Menggunakan setelan default untuk middleware sesi dapat membuat aplikasi Anda terkena pembajakan spesifik untuk module dan framework dengan cara yang mirip dengan header `X-Powered-By`. Coba sembunyikan apa pun yang mengidentifikasikan dan mengungkapkan teknologi yang Anda gunakan (misalnya Node.js, express)\n\n**Jika tidak:** Cookie dapat dikirim melalui koneksi yang tidak aman, dan penyerang dapat menggunakan identifikasi sesi untuk mengidentifikasi framework dari aplikasi web, serta kerentanan masing-masing modul\n\n🔗 [**Baca selengkapnya: Cookie and session security**](./sections/security/sessions.md)\n\n<br/><br/>\n\n## ![✔] 6.23. Hindari serangan DOS dengan mengatur kapan proses harus berhenti secara eksplisit\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Proses Node akan berhenti ketika ada kesalahan yang tidak ditangani. Banyak praktik terbaik bahkan merekomendasikan untuk menghentikan aplikasi meskipun ada kesalahan yang tertangkap dan ditangani. Express, misalnya, akan berhenti jika ada kesalahan asinkron apa pun - kecuali Anda membungkus rute dengan klausa catch. Ini memberikan kesempatan serangan yang sangat bagus bagi penyerang yang mengetahui masukan apa yang memberhentikan proses dan mengirim request yang sama berulang kali. Tidak ada solusi instan untuk ini tapi ada beberapa teknik yang dapat mengurangi hal ini: Beri peringatan kritis setiap kali proses berhenti karena ada kesalahan yang ditangani, validasi masukan dan hindari memberhentikan proses karena masukan pengguna tidak valid, bungkus semua rute dengan catch dan pertimbangkan untuk tidak memberhentikan aplikasi ketika kesalahan berasal dari dalam request (alih-alih apa yang terjadi secara global)\n\n**Jika tidak:** Ini hanya tebakan: mengingat banyak aplikasi Node.js, jika kita memberikan JSON kosong ke semua request POST - banyak aplikasi akan berhenti. Pada saat itu, kita dapat mengirim permintaan yang sama berulang kali untuk memberhentikan aplikasi itu dengan mudah\n\n<br/><br/>\n\n## ![✔] 6.24. Hindari pengalihan yang tidak aman\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Pengalihan yang tidak memvalidasi masukan pengguna dapat memungkinkan penyerang untuk meluncurkan penipuan phising, mencuri kredensial pengguna, dan melakukan tindakan berbahaya lainnya.\n\n**Jika tidak:** Jika penyerang menemukan bahwa Anda tidak memvalidasi masukan eksternal yang diberikan oleh pengguna, mereka dapat mengeksploitasi kerentanan ini dengan memposting tautan yang dibuat khusus di forum, media sosial, dan tempat publik lainnya agar pengguna mengkliknya.\n\n🔗 [**Baca selengkapnya: Prevent unsafe redirects**](./sections/security/saferedirects.md)\n\n<br/><br/>\n\n## ![✔] 6.25. Hindari menerbitkan rahasia ke registri npm\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Tindakan pencegahan harus diambil untuk menghindari risiko penerbitan rahasia ke registri publik npm secara tidak sengaja. File `.npmignore` dapat digunakan untuk memasukkan file atau folder ke dalam blacklist, atau array `files` dalam `package.json` dapat digunakan sebagai whitelist.\n\n**Jika tidak:** Kunci API, kata sandi atau rahasia lain proyek Anda dapat disalahgunakan oleh siapapun yang menemukannya, yang dapat mengakibatkan kerugian finansial, peniruan identitas, dan risiko lainnya.\n\n🔗 [**Baca selengkapnya: Avoid publishing secrets**](./sections/security/avoid_publishing_secrets.md)\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#daftar-isi\">⬆ Kembali ke atas</a></p>\n\n# `7. Draf: Praktik Terbaik Performa`\n\n## Kontributor kami sedang mengerjakan bagian ini. [Ingin bergabung?](https://github.com/goldbergyoni/nodebestpractices/issues/256)\n\n<br/><br/>\n\n## ![✔] 7.1. Jangan memblokir _event loop_\n\n**TL;DR:** Hindari pekerjaan yang intensif CPU karena mereka akan memblokir _Event Loop_ dalam satu _thread_ dan pindahkan pekerjaan ini ke _thread_ khusus, proses atau bahkan teknologi yang berbeda berdasarkan konteksnya.\n\n**Jika tidak:** Ketika _Event Loop_ diblokir, Node.js tidak akan dapat menangani permintaan lain sehingga menyebabkan penundaan bagi pengguna lain. **3000 pengguna sedang menunggu tanggapan, konten siap diberikan, tapi satu permintaan mencegah server-nya untuk mengirimkan hasilnya**\n\n🔗 [**Baca selengkapnya: Do not block the event loop**](./sections/performance/block-loop.md)\n\n<br /><br /><br />\n\n## ![✔] 7.2. Utamakan penggunaan metode JS asli daripada utilitas berlebihan seperti Lodash\n\n**TL;DR:** Sering kali lebih merugikan jika menggunakan pustaka seperti `lodash` dan `underscore` daripada metode asli karena mengarah kepada dependensi yang tidak diperlukan dan memperlambat performa.\nIngatlah bahwa dengan diperkenalkannya mesin V8 baru bersama dengan standar ES baru, metode asli telah ditingkatkan sehingga sekarang sekitar 50% lebih baik daripada pustaka utilitas.\n\n**Jika tidak:** Anda harus mengurus proyek dengan kinerja yang lebih rendah di mana Anda dapat menggunakan apa yang **sudah** ada atau berurusan dengan lebih sedikit baris namun lebih banyak file sebagai gantinya.\n\n🔗 [**Baca selengkapnya: Native over user land utils**](./sections/performance/nativeoverutil.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#daftar-isi\">⬆ Kembali ke atas</a></p>\n\n# `8. Praktik Terbaik Docker`\n\n🏅 Terima kasih banyak kepada [Bret Fisher](https://github.com/BretFisher) yang mengajari kami banyak dari praktik berikut\n\n<br/><br/>\n\n## ![✔] 8.1 Gunakan build multi tahap untuk gambar Docker yang lebih kecil dan aman\n\n**TL;DR:** Gunakan build multi tahap hanya untuk menyalin artefak produksi yang diperlukan. Banyak file dan dependensi build-time yang tidak diperlukan untuk menjalankan aplikasi Anda. Dengan build multi tahap resource ini dapat digunakan selama build sementara lingkungan runtime hanya berisikan dengan resource yang diperlukan. Build multi tahap adalah cara mudah untuk menyingkirkan kelebihan berat dan ancaman keamanan.\n\n**Jika tidak:** Gambar yang lebih besar akan memakan waktu yang lebih lama untuk di-build dan dikirim, alat khusus build mungkin mengandung kerentanan dan rahasia yang hanya dimaksudkan untuk fase build mungkin dapat bocor.\n\n### Contoh dockerfle untuk build multi tahap\n\n```dockerfile\nFROM node:14.4.0 AS build\n\nCOPY . .\nRUN npm ci && npm run build\n\n\nFROM node:slim-14.4.0\n\nUSER node\nEXPOSE 8080\n\nCOPY --from=build /home/node/app/dist /home/node/app/package.json /home/node/app/package-lock.json ./\nRUN npm ci --production\n\nCMD [ \"node\", \"dist/app.js\" ]\n```\n\n🔗 [**Baca selengkapnya: Use multi-stage builds**](./sections/docker/multi_stage_builds.md)\n\n<br /><br /><br />\n\n## ![✔] 8.2. Lakukan bootstrap menggunakan perintah 'node', hindari npm start\n\n**TL;DR:** Gunakan `CMD ['node','server.js']` untuk memulai aplikasi Anda, hindari menggunakan skrip npm yang tidak meneruskan sinyal OS ke kode. Ini mencegah masalah dengan proses anak, penanganan sinyal, pemberhentian yang baik dan proses zombie.\n\n**Jika tidak:** Ketika tidak ada sinyal yang dilewatkan, kode Anda tidak akan pernah diberi tahu tentang penghentian. Tanpa itu, kode Anda akan kehilangan kesempatan untuk berhenti dengan benar dan kehilangan permintaan dan/atau data dapat terjadi.\n\n[**Baca selengkapnya: Bootstrap container using node command, avoid npm start**](./sections/docker/bootstrap-using-node.md)\n\n<br /><br /><br />\n\n## ![✔] 8.3. Biarkan runtime Docker menangani replikasi dan uptime\n\n**TL;DR:** Ketika menggunakan orkestrator run time Docker (misalnya Kubernetes), aktifkan proses Node.js seecara langsung tanpa manajer proses perantara atau kode khusus yang mereplikasi proses (misalnya PM2, modul Cluster). Platform runtime mempunyai jumlah data dan visibilitas tertinggi untuk membuat keputusan penempatan - Platform ini mengetahui dengan baik berapa banyak proses yang diperlukan, cara menyebarkannya dan apa yang harus dilakukan jika terjadi kerusakan\n\n**Jika tidak:** Kontainer tetap rusak karena kekurangan sumber daya akan dimulai ulang tanpa batas oleh manajer proses. Jika Kubernetes menyadari hal ini, Kubernetes dapat memindahkannya ke banyak instance yang berbeda\n\n🔗 [**Baca selengkapnya: Let the Docker orchestrator restart and replicate processes**](./sections/docker/restart-and-replicate-processes.md)\n\n<br/><br /><br />\n\n## ![✔] 8.4. Gunakan .dockerignore untuk mencegah pembocoran rahasia\n\n**TL;DR**: Sertakan file `.dockerignore` yang memfilter file rahasia umum dan artefak pengembangan. Dengan melakukan itu, Anda dapat mencegah kebocoran rahasia ke dalam gambar. Sebagai bonus waktu build akan berkurang secara signifikan. Pastikan juga untuk tidak menyalin semua file secara rekursif melainkan pilih file yang harus disalin ke Docker secara eksplisit\n\n**Jika tidak**: File rahasia pribadi umum seperti `.env`, `.aws` dan `.npmrc` akan dibagikan dengan siapapun yang memiliki akses ke image (misalnya repositori Docker)\n\n🔗 [**Baca selengkapnya: Use .dockerignore**](./sections/docker/docker-ignore.md)\n\n<br /><br /><br />\n\n## ![✔] 8.5. Bersihkan dependensi sebelum produksi\n\n**TL;DR:** Meskipun dependensi pengembangan terkadang diperlukan selama siklus hidup build pengujian, pada akhirnya gambar yang dikirim ke produksi harus minimal dan bersih dari dependensi pengembangan. Hal tersebut dapat menjamin hanya kode yang diperlukan yang dikirim dan jumlah potensi serangan (misalnya attack surface) diminimalkan. Ketika menggunakan build multi tahap (lihat poin khusus) hal ini dapat dicapai dengan menginstal semua dependensi terlebih dahulu dan kemudian menjalankan `npm ci --production`\n\n**Jika tidak:** Banyak penerobosan keamanan npm yang buruk ditemukan dalam paket pengembangan (misalnya [eslint-scope](https://eslint.org/blog/2018/07/postmortem-for-malicious-package-publishes))\n\n🔗 [\\*\\*Baca selengkapnya: Remove development dependencies](./sections/docker/install-for-production.md)\n\n<br /><br /><br />\n\n## ![✔] 8.6. Matikan aplikasi dengan baik dan cerdas\n\n**TL;DR:** Tangani proses event SIGTERM dan bersihkan semua koneksi dan sumber daya yang ada. Hal ini harus dilakukan sambil menanggapi permintaan yang sedang berlangsung. Dalam runtime Docker, mematikan kontainer bukanlah peristiwa yang jarang terjadi, melainkan sesuatu yang sering terjadi sebagai bagian dari pekerjaan rutin. Untuk mencapai hal ini, diperlukan beberapa kode yang baik untuk mengatur beberapa bagian yang bergerak: load balancer, koneksi keep-alive, server HTTP dan sumber daya lainnya\n\n**Jika tidak:** Mematikan aplikasi secara langsung berarti tidak menanggapi ribuan pengguna yang kecewa\n\n🔗 [**Baca selengkapnya: Graceful shutdown**](./sections/docker/graceful-shutdown.md)\n\n<br /><br /><br />\n\n## ![✔] 8.7. Tetapkan batas memori menggunakan Docker dan v8\n\n**TL;DR:** Selalu konfigurasikan batas memori menggunakan Docker dan runtime flag JavaScript. Batas pada Docker diperlukan untuk membuat keputusan penempatan kontainer yang baik, flag `max-old-space` pada --v8 diperlukan untuk memulai GC tepat waktu untuk mencegah penggunaan memori yang kurang. Secara praktis, tetapkan batas memori `max-old-space` pada v8 sedikit lebih rendah dari pada batas memori kontainer\n\n**Jika tidak:** Definisi Docker diperlukan untuk melakukan keputusan penskalaan yang baik dan mencegah kelaparan warga lain. Tanpa menentukan batas pada v8 juga, sumber daya kontainer juga akan kurang digunakan oleh Node - Tanpa instruksi eksplisit Node akan berhenti saat menggunakan ~50-60% dari sumber daya hostnya\n\n🔗 [**Baca selengkapnya: Set memory limits using Docker only**](./sections/docker/memory-limit.md)\n\n<br /><br /><br />\n\n## ![✔] 8.8. Rencanakan caching yang efisien\n\n**TL;DR:** Membangun ulang seluruh image docker dari cache dapat dilakukan hampir seketika jika dilakukan dengan benar. Instruksi yang jarang diperbarui harus berada di atas Dockerfile Anda dan yang terus berubah (seperti kode app) harus berada di bawah.\n\n**Jika tidak:** Build Docker akan sangat lama dan memakan banyak sumber daya bahkan saat melakukan perubahan kecil\n\n🔗 [**Baca selengkapnya: Leverage caching to reduce build times**](./sections/docker/use-cache-for-shorter-build-time.md)\n\n<br /><br /><br />\n\n## ![✔] 8.9. Gunakan referensi gambar eksplisit, hindari tag `latest`\n\n**TL;DR:** Tentukan `digest` eksplisit gambar atau label berversi, jangan pernah merujuk ke `latest`. Pengembang sering kali percaya bahwa menetapkan tag `latest` akan memberi mereka gambar terbaru di repositori namun hal ini tidak benar. Menggunakan `digest` menjamin bahwa setiap instansi layanan menjalankan kode yang sama persis.\n\nSelain itu, merujuk ke sebuah tag gambar berarti gambar dasar dapat berubah, karena tag image tidak dapat diandalkan untuk penginstalan deterministik. Jika penginstalan deterministik diharapkan, digest SHA256 dapat digunakan untuk mereferensikan ke gambar yang tepat.\n\n**Jika tidak:** Versi baru gambar dasar dapat dideploy ke produksi dengan perubahan yang dapat merusak, menyebabkan perilaku aplikasi yang tidak diinginkan.\n\n🔗 [**Baca selengkapnya: Understand image tags and use the \"latest\" tag with caution**](./sections/docker/image-tags.md)\n\n<br /><br /><br />\n\n## ![✔] 8.10. Utamakan gambar dasar Docker yang lebih kecil\n\n**TL;DR:** Gambar yang besar mempunyai tingkat kerentanan yang lebih tinggi dan meningkatkan konsumsi sumber daya. Menggunakan gambar docker yang lebih ramping, seperti varian Linux Slim dan Alpine, dapat mengurangi masalah ini.\n\n**Jika tidak:** Membangun, mendorong, dan menarik gambar akan membutuhkan waktu yang lebih lama, vektor serangan yang tidak diketahui dapat digunakan oleh aktor jahat dan lebih banyak sumber daya yang dikonsumsi.\n\n🔗 [**Baca selengkapnya: Prefer smaller images**](./sections/docker/smaller_base_images.md)\n\n<br /><br /><br />\n\n## ![✔] 8.11. Bersihkan rahasia pada build-time, hindari rahasia di args\n\n**TL;DR:** Hindari rahasia yang bocor dari lingkungan build Docker. Gambar Docker biasanya terbagi di beberapa lingkungan seperti CI dan registri yang tidak disterilkan seperti lingkungan produksi. Contoh tipikalnya adalah token npm yang biasanya diteruskan ke dockerfile sebagai argumen. Token ini tetap berada di dalam gambar lama setelah diperlukan dan memungkinkan penyerang mengakses tanpa batas ke registri npm pribadi. Hal ini dapat dihindari dengan mengatasi file rahasia seperti `.npmrc` dan kemudian menghapusnya menggunakan build mutli tahap (hati-hati, rahasia build juga harus dihapus) atau dengan menggunakan fitur rahasia build-kit Docker yang tidak meninggalkan jejak\n\n**Jika tidak:** Setiap orang yang mempunyai akses ke CI dan registri Docker juga akan mendapatkan akses ke rahasia organisasi yang berharga sebagai bonus\n\n🔗 [**Baca selengkapnya: Clean-out build-time secrets**](./sections/docker/avoid-build-time-secrets.md)\n\n<br /><br /><br />\n\n## ![✔] 8.12. Pindai gambar untuk menemukan lapisan kerentanan\n\n**TL;DR:** Selain memeriksa kerentanan kode dependensi pastikan juga untuk memindai gambar akhir yang dikirim ke produksi. Pemindai gambar Docker memeriksa kode dependensi tapi juga binari OS. Pemindaian keamanan E2E ini mencakup lebih banyak hal dan memverifikasi bahwa tidak ada orang jahat yang menginjeksi hal-hal buruk selama build. Oleh karena itu, disarankan untuk menjalankan hal ini sebagai langkah terakhir sebelum proses deployment. Ada beberapa pemindai gratis dan komersial yang juga menyediakan plugin CI/CD\n\n**Jika tidak:** Kode Anda mungkin sepenuhnya bebas dari kerentanan. Namun itu mungkin masih dapat diretas karena versi binari OS-level yang rentan (misalnya OpenSSL, TarBall) yang biasanya digunakan oleh aplikasi\n\n🔗 [**Baca selengkapnya: Generic Docker practices**](./sections/docker/scan-images.md)\n\n<br /><br /><br />\n\n## ![✔] 8.13 Bersihkan cache NODE_MODULE\n\n**TL;DR:** Setelah menginstal dependensi dalam kontainer, hapus cache lokal. Tidak masuk akal untuk menduplikasi dependensi untuk penginstalan lebih cepat di masa mendatang karena tidak akan ada penginstalan lagi seterusnya - Image Docker tidak dapat diubah. Dengan menggunakan satu baris kode, puluhan MB (biasanya 10-50% dari ukuran gambar) dihilangkan\n\n**Jika tidak:** Gambar yang akan dikirim ke produksi akan menjadi 30% lebih besar karena file yang tidak akan pernah digunakan\n\n🔗 [**Baca selengkapnya: Clean NODE_MODULE cache**](./sections/docker/clean-cache.md)\n\n<br /><br /><br />\n\n## ![✔] 8.14. Praktik Docker umum\n\n**TL;DR:** Ini adalah kumpulan saran Docker yang tidak terkait langsung dengan Node.js - implementasi pada Node tidak jauh berbeda dengan bahasa lain. Klik baca selengkapnya untuk membaca sekilas.\n\n🔗 [**Baca selengkapnya: Generic Docker practices**](./sections/docker/generic-tips.md)\n\n<br/><br /><br />\n\n## ![✔] 8.15. Lint Dockerfile Anda\n\n**TL;DR:** Melakukan lint pada Dockerfile Anda adalah langkah yang penting untuk mengidentifikasi masalah di Dockerfile Anda yang tidak ada di praktik terbaik. Dengan memeriksa potensi kekurangan menggunakan linter Docker khusus, peningkatan performa dan keamanan dapat dengan mudah diidentifikasi, menghemat waktu yang terbuang atau mengurangi masalah keamanan dalam kode produksi.\n\n**Jika tidak:** Secara tidak sengaja pembuat Dockerfile meninggalkan Root sebagai pengguna produksi, dan juga menggunakan gambar dari repositori yang tidak dikenal. Hal ini dapat dihindari hanya dengan linter sederhana.\n\n🔗 [**Baca selengkapnya: Lint your Dockerfile**](./sections/docker/lint-dockerfile.md)\n\n<br/><br /><br />\n\n<p align=\"right\"><a href=\"#daftar-isi\">⬆ Kembali ke atas</a></p>\n\n# Tonggak Sejarah\n\nUntuk menjaga panduan ini agar tetap mutakir, kami terus memperbarui dan meningkatkan pedoman dan praktik terbaik ini dengan bantuan komunitas. Anda dapat mengikuti [milestones](https://github.com/goldbergyoni/nodebestpractices/milestones) dan bergabung dalam kelompok kerja jika Anda ingin berkontribusi pada proyek ini\n\n<br/>\n\n## Terjemahan\n\nSemua terjemahan merupakan kontribusi dari komunitas. Kami akan dengan senang hati mendapatkan bantuan baik untuk terjemahan yang telah selesai, sedang berlangsung atau yang baru!\n\n### Terjemahan selesai\n\n- ![BR](./assets/flags/BR.png) [Portugis Brazil](./README.brazilian-portuguese.md) - Terima kasih kepada [Marcelo Melo](https://github.com/marcelosdm)\n- ![CN](./assets/flags/CN.png) [Cina](./README.chinese.md) - Terima kasih kepada [Matt Jin](https://github.com/mattjin)\n- ![RU](./assets/flags/RU.png) [Rusia](./README.russian.md) - Terima kasih kepada [Alex Ivanov](https://github.com/contributorpw)\n- ![PL](./assets/flags/PL.png) [Polandia](./README.polish.md) - Terima kasih kepada [Michal Biesiada](https://github.com/mbiesiad)\n- ![EU](./assets/flags/EU.png) [Basque](README.basque.md) - Terima kasih kepada [Ane Diaz de Tuesta](https://github.com/anediaz) & Joxefe Diaz de Tuesta\n\n### Terjemahan dalam proses\n\n- ![FR](./assets/flags/FR.png) [Prancis](https://github.com/gaspaonrocks/nodebestpractices/blob/french-translation/README.french.md) ([Diskusi](https://github.com/goldbergyoni/nodebestpractices/issues/129))\n- ![HE](./assets/flags/HE.png) Ibrani ([Diskusi](https://github.com/goldbergyoni/nodebestpractices/issues/156))\n- ![KR](./assets/flags/KR.png) [Korea](README.korean.md) - Terima kasih kepada [Sangbeom Han](https://github.com/uronly14me) ([Diskusi](https://github.com/goldbergyoni/nodebestpractices/issues/94))\n- ![ES](./assets/flags/ES.png) [Spanyol](https://github.com/goldbergyoni/nodebestpractices/blob/spanish-translation/README.spanish.md) ([Diskusi](https://github.com/goldbergyoni/nodebestpractices/issues/95))\n- ![TR](./assets/flags/TR.png) Turki ([Diskusi](https://github.com/goldbergyoni/nodebestpractices/issues/139))\n\n<br/><br/>\n\n## Komite Pengarah\n\nMemperkenalkan anggota komite pengarah - orang-orang yang bekerja sama untuk memberikan panduan dan arahan masa depan proyek. Selain itu, setiap anggota komite memimpin proyek yang dilacak dalam [Github projects](https://github.com/goldbergyoni/nodebestpractices/projects) kami.\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/yoni.png\"/>\n\n[Yoni Goldberg](https://github.com/goldbergyoni)\n<a href=\"https://twitter.com/goldbergyoni\"><img src=\"assets/images/twitter-s.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://goldbergyoni.com\"><img src=\"assets/images/www.png\" width=\"16\" height=\"16\"></img></a>\n\nKonsultan Node.js independen yang bekerja dengan pelanggan di AS, Eropa, dan Israel dalam membangun aplikasi Node.js berskala besar. Banyak praktik terbaik di atas pertama kali dipublikasikan di [goldbergyoni.com](https://goldbergyoni.com). Hubungi Yoni di [@goldbergyoni](https://github.com/goldbergyoni) atau [me@goldbergyoni.com](mailto:me@goldbergyoni.com)\n\n<br/>\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/bruno.png\"/>\n\n[Bruno Scheufler](https://github.com/BrunoScheufler)\n<a href=\"https://brunoscheufler.com/\"><img src=\"assets/images/www.png\" width=\"16\" height=\"16\"></img></a>\n\n💻 Engineer web full-stack, penggemar Node.js & GraphQL\n\n<br/>\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/kyle.png\"/>\n\n[Kyle Martin](https://github.com/js-kyle)\n<a href=\"https://twitter.com/kylemartin_93\"><img src=\"assets/images/twitter-s.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://www.linkedin.com/in/kylemartinnz\"><img src=\"assets/images/linkedin.png\" width=\"16\" height=\"16\"></img></a>\n\nPengembang Full Stack & Site Reliability Engineer yang berbasis di Selandia Baru, tertarik pada keamanan aplikasi web, dan merancang serta membangun aplikasi Node.js untuk bekerja dalam skala global.\n\n<br/>\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/kevyn.png\"/>\n\n[Kevyn Bruyere](https://github.com/kevynb)\n<a href=\"https://www.linkedin.com/in/kevynbruyere/\"><img src=\"assets/images/linkedin.png\" width=\"16\" height=\"16\"></img></a>\n\nPengembang full-stack independen dengan selera untuk Ops dan otomatisasi.\n\n<br/>\n\n### Mantan Komite Pengarah\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/sagir.png\"/>\n\n[Sagir Khan](https://github.com/sagirk)\n<a href=\"https://twitter.com/sagir_k\"><img src=\"assets/images/twitter-s.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://linkedin.com/in/sagirk\"><img src=\"assets/images/linkedin.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://sagirk.com\"><img src=\"assets/images/www.png\" width=\"16\" height=\"16\"></img></a>\n\nSpesialis mendalam dalam JavaScript dan ekosistemnya — React, Node.js, TypeScript, GraphQL, MongoDB, hampir semua hal yang berhubungan dengan JS/JSON di setiap lapisan sistem — membuat produk menggunakan platform web untuk merek paling terkenal di dunia. Anggota perorangan dari Node.js Foundation.\n\n<br/>\n\n## Kolaborator\n\nTerima kasih untuk semua kolaborator kami! 🙏\n\nKolaborator kami adalah anggota yang sering berkontribusi ke repositori ini, melalui menyarankan praktik terbaik baru, menyortir masalah, meninjau pull request dan banyak lagi. Jika Anda tertarik untuk membantu kami memandu ribuan orang untuk membuat aplikasi Node.js yang lebih baik, silakan baca [contributor guidelines](./.operations/CONTRIBUTING.md) 🎉\n\n| <a href=\"https://github.com/idori\" target=\"_blank\"><img src=\"assets/images/members/ido.png\" width=\"75\" height=\"75\"/></a> | <a href=\"https://github.com/TheHollidayInn\" target=\"_blank\"><img src=\"assets/images/members/keith.png\" width=\"75\" height=\"75\"/></a> |\n| :---------------------------------------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------------------------------------------------: |\n|                                    [Ido Richter (Founder)](https://github.com/idori)                                    |                                        [Keith Holliday](https://github.com/TheHollidayInn)                                         |\n\n### Mantan Kolaborator\n\n| <a href=\"https://github.com/refack\" target=\"_blank\"><img src=\"assets/images/members/refael.png\" width=\"50\" height=\"50\"/></a> |\n| :-------------------------------------------------------------------------------------------------------------------------: |\n|                                        [Refael Ackermann](https://github.com/refack)                                        |\n\n<br/>\n\n## Kontribusi\n\nJika Anda pernah ingin berkontribusi pada open source, sekarang kesempatan Anda! Lihat [contributing docs](.operations/CONTRIBUTING.md) untuk informasi lebih lanjut.\n\n## Kontributor ✨\n\nTerima kasih kepada orang-orang hebat ini yang telah berkontribusi pada repositori ini!\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kevinrambaud\"><img src=\"https://avatars1.githubusercontent.com/u/7501477?v=4\" width=\"100px;\" alt=\"Kevin Rambaud\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kevin Rambaud</b></sub></a><br /><a href=\"#content-kevinrambaud\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mfine15\"><img src=\"https://avatars1.githubusercontent.com/u/1286554?v=4\" width=\"100px;\" alt=\"Michael Fine\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Michael Fine</b></sub></a><br /><a href=\"#content-mfine15\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://squgeim.github.io\"><img src=\"https://avatars0.githubusercontent.com/u/4996818?v=4\" width=\"100px;\" alt=\"Shreya Dahal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shreya Dahal</b></sub></a><br /><a href=\"#content-squgeim\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://matheusrocha89.com\"><img src=\"https://avatars1.githubusercontent.com/u/3718366?v=4\" width=\"100px;\" alt=\"Matheus Cruz Rocha\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Matheus Cruz Rocha</b></sub></a><br /><a href=\"#content-matheusrocha89\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://bityog.github.io/Portfolio/\"><img src=\"https://avatars2.githubusercontent.com/u/28219178?v=4\" width=\"100px;\" alt=\"Yog Mehta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yog Mehta</b></sub></a><br /><a href=\"#content-BitYog\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://kudapara.co.zw\"><img src=\"https://avatars3.githubusercontent.com/u/13519184?v=4\" width=\"100px;\" alt=\"Kudakwashe Paradzayi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kudakwashe Paradzayi</b></sub></a><br /><a href=\"#content-kudapara\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.t1st3.com/\"><img src=\"https://avatars1.githubusercontent.com/u/1469638?v=4\" width=\"100px;\" alt=\"t1st3\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>t1st3</b></sub></a><br /><a href=\"#content-t1st3\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mulijordan1976\"><img src=\"https://avatars0.githubusercontent.com/u/33382022?v=4\" width=\"100px;\" alt=\"mulijordan1976\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>mulijordan1976</b></sub></a><br /><a href=\"#content-mulijordan1976\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/matchai\"><img src=\"https://avatars0.githubusercontent.com/u/4658208?v=4\" width=\"100px;\" alt=\"Matan Kushner\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Matan Kushner</b></sub></a><br /><a href=\"#content-matchai\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://fabiothiroki.github.io\"><img src=\"https://avatars2.githubusercontent.com/u/670057?v=4\" width=\"100px;\" alt=\"Fabio Hiroki\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Fabio Hiroki</b></sub></a><br /><a href=\"#content-fabiothiroki\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://james.sumners.info/\"><img src=\"https://avatars1.githubusercontent.com/u/321201?v=4\" width=\"100px;\" alt=\"James Sumners\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>James Sumners</b></sub></a><br /><a href=\"#content-jsumners\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/_DanGamble\"><img src=\"https://avatars2.githubusercontent.com/u/7152041?v=4\" width=\"100px;\" alt=\"Dan Gamble\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dan Gamble</b></sub></a><br /><a href=\"#content-dan-gamble\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/trainorpj\"><img src=\"https://avatars3.githubusercontent.com/u/13276704?v=4\" width=\"100px;\" alt=\"PJ Trainor\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>PJ Trainor</b></sub></a><br /><a href=\"#content-trainorpj\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/reod\"><img src=\"https://avatars0.githubusercontent.com/u/3164299?v=4\" width=\"100px;\" alt=\"Remek Ambroziak\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Remek Ambroziak</b></sub></a><br /><a href=\"#content-reod\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://ca.non.co.il\"><img src=\"https://avatars0.githubusercontent.com/u/1829789?v=4\" width=\"100px;\" alt=\"Yoni Jah\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yoni Jah</b></sub></a><br /><a href=\"#content-yonjah\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/hazolsky\"><img src=\"https://avatars1.githubusercontent.com/u/1270790?v=4\" width=\"100px;\" alt=\"Misha Khokhlov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Misha Khokhlov</b></sub></a><br /><a href=\"#content-hazolsky\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://plus.google.com/+ЕвгенийОрехов/\"><img src=\"https://avatars3.githubusercontent.com/u/8045060?v=4\" width=\"100px;\" alt=\"Evgeny Orekhov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Evgeny Orekhov</b></sub></a><br /><a href=\"#content-EvgenyOrekhov\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/gediminasml\"><img src=\"https://avatars3.githubusercontent.com/u/19854105?v=4\" width=\"100px;\" alt=\"-\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>-</b></sub></a><br /><a href=\"#content-gediminasml\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://hisaac.net\"><img src=\"https://avatars3.githubusercontent.com/u/923876?v=4\" width=\"100px;\" alt=\"Isaac Halvorson\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Isaac Halvorson</b></sub></a><br /><a href=\"#content-hisaac\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.vedrankaracic.com\"><img src=\"https://avatars3.githubusercontent.com/u/2808092?v=4\" width=\"100px;\" alt=\"Vedran Karačić\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vedran Karačić</b></sub></a><br /><a href=\"#content-vkaracic\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/lallenlowe\"><img src=\"https://avatars3.githubusercontent.com/u/10761165?v=4\" width=\"100px;\" alt=\"lallenlowe\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>lallenlowe</b></sub></a><br /><a href=\"#content-lallenlowe\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/nwwells\"><img src=\"https://avatars2.githubusercontent.com/u/1039473?v=4\" width=\"100px;\" alt=\"Nathan Wells\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nathan Wells</b></sub></a><br /><a href=\"#content-nwwells\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/paulovitin\"><img src=\"https://avatars0.githubusercontent.com/u/125503?v=4\" width=\"100px;\" alt=\"Paulo Reis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Paulo Reis</b></sub></a><br /><a href=\"#content-paulovitin\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://snap.simpego.ch\"><img src=\"https://avatars2.githubusercontent.com/u/1989646?v=4\" width=\"100px;\" alt=\"syzer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>syzer</b></sub></a><br /><a href=\"#content-syzer\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://sancho.dev\"><img src=\"https://avatars0.githubusercontent.com/u/3763599?v=4\" width=\"100px;\" alt=\"David Sancho\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>David Sancho</b></sub></a><br /><a href=\"#content-davesnx\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://apiforge.it\"><img src=\"https://avatars0.githubusercontent.com/u/4929965?v=4\" width=\"100px;\" alt=\"Robert Manolea\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Robert Manolea</b></sub></a><br /><a href=\"#content-pupix\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://jumptoglide.com\"><img src=\"https://avatars2.githubusercontent.com/u/708395?v=4\" width=\"100px;\" alt=\"Xavier Ho\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Xavier Ho</b></sub></a><br /><a href=\"#content-spaxe\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.ocular-rhythm.io\"><img src=\"https://avatars0.githubusercontent.com/u/2738518?v=4\" width=\"100px;\" alt=\"Aaron\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Aaron</b></sub></a><br /><a href=\"#content-ocularrhythm\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://septa97.me\"><img src=\"https://avatars2.githubusercontent.com/u/13742634?v=4\" width=\"100px;\" alt=\"Jan Charles Maghirang Adona\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jan Charles Maghirang Adona</b></sub></a><br /><a href=\"#content-septa97\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.cakeresume.com/allenfang\"><img src=\"https://avatars2.githubusercontent.com/u/5351390?v=4\" width=\"100px;\" alt=\"Allen\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Allen</b></sub></a><br /><a href=\"#content-AllenFang\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/leonardovillela\"><img src=\"https://avatars3.githubusercontent.com/u/8650543?v=4\" width=\"100px;\" alt=\"Leonardo Villela\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Leonardo Villela</b></sub></a><br /><a href=\"#content-leonardovillela\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://michalzalecki.com\"><img src=\"https://avatars1.githubusercontent.com/u/3136577?v=4\" width=\"100px;\" alt=\"Michał Załęcki\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Michał Załęcki</b></sub></a><br /><a href=\"#content-MichalZalecki\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.wealthbar.com\"><img src=\"https://avatars1.githubusercontent.com/u/156449?v=4\" width=\"100px;\" alt=\"Chris Nicola\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Chris Nicola</b></sub></a><br /><a href=\"#content-chrisnicola\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/aecorredor\"><img src=\"https://avatars3.githubusercontent.com/u/9114987?v=4\" width=\"100px;\" alt=\"Alejandro Corredor\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alejandro Corredor</b></sub></a><br /><a href=\"#content-aecorredor\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/cwar\"><img src=\"https://avatars3.githubusercontent.com/u/272843?v=4\" width=\"100px;\" alt=\"cwar\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>cwar</b></sub></a><br /><a href=\"#content-cwar\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/keyfoxth\"><img src=\"https://avatars3.githubusercontent.com/u/10647132?v=4\" width=\"100px;\" alt=\"Yuwei\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yuwei</b></sub></a><br /><a href=\"#content-keyfoxth\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://bigcodenerd.org\"><img src=\"https://avatars3.githubusercontent.com/u/10895594?v=4\" width=\"100px;\" alt=\"Utkarsh Bhatt\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Utkarsh Bhatt</b></sub></a><br /><a href=\"#content-utkarshbhatt12\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/duartemendes\"><img src=\"https://avatars2.githubusercontent.com/u/12852058?v=4\" width=\"100px;\" alt=\"Duarte Mendes\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Duarte Mendes</b></sub></a><br /><a href=\"#content-duartemendes\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://jasonkim.ca\"><img src=\"https://avatars2.githubusercontent.com/u/103456?v=4\" width=\"100px;\" alt=\"Jason Kim\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jason Kim</b></sub></a><br /><a href=\"#content-serv\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Max101\"><img src=\"https://avatars2.githubusercontent.com/u/2124249?v=4\" width=\"100px;\" alt=\"Mitja O.\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Mitja O.</b></sub></a><br /><a href=\"#content-Max101\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://sandromiguel.com\"><img src=\"https://avatars0.githubusercontent.com/u/6423157?v=4\" width=\"100px;\" alt=\"Sandro Miguel Marques\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sandro Miguel Marques</b></sub></a><br /><a href=\"#content-SandroMiguel\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/GabeKuslansky\"><img src=\"https://avatars3.githubusercontent.com/u/9855482?v=4\" width=\"100px;\" alt=\"Gabe\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Gabe</b></sub></a><br /><a href=\"#content-GabeKuslansky\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://ripper234.com/\"><img src=\"https://avatars1.githubusercontent.com/u/172282?v=4\" width=\"100px;\" alt=\"Ron Gross\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ron Gross</b></sub></a><br /><a href=\"#content-ripper234\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.thecodebarbarian.com\"><img src=\"https://avatars2.githubusercontent.com/u/1620265?v=4\" width=\"100px;\" alt=\"Valeri Karpov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Valeri Karpov</b></sub></a><br /><a href=\"#content-vkarpov15\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://sergiobernal.com\"><img src=\"https://avatars3.githubusercontent.com/u/20087388?v=4\" width=\"100px;\" alt=\"Sergio Bernal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sergio Bernal</b></sub></a><br /><a href=\"#content-imsergiobernal\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ntelkedzhiev\"><img src=\"https://avatars2.githubusercontent.com/u/7332371?v=4\" width=\"100px;\" alt=\"Nikola Telkedzhiev\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nikola Telkedzhiev</b></sub></a><br /><a href=\"#content-ntelkedzhiev\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/vitordagamagodoy\"><img src=\"https://avatars0.githubusercontent.com/u/26370059?v=4\" width=\"100px;\" alt=\"Vitor Godoy\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vitor Godoy</b></sub></a><br /><a href=\"#content-vitordagamagodoy\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.manishsaraan.com/\"><img src=\"https://avatars2.githubusercontent.com/u/19797340?v=4\" width=\"100px;\" alt=\"Manish Saraan\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Manish Saraan</b></sub></a><br /><a href=\"#content-manishsaraan\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/uronly14me\"><img src=\"https://avatars2.githubusercontent.com/u/5186814?v=4\" width=\"100px;\" alt=\"Sangbeom Han\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sangbeom Han</b></sub></a><br /><a href=\"#content-uronly14me\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://blackmatch.github.io\"><img src=\"https://avatars3.githubusercontent.com/u/12443954?v=4\" width=\"100px;\" alt=\"blackmatch\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>blackmatch</b></sub></a><br /><a href=\"#content-blackmatch\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://simmsreeve.com\"><img src=\"https://avatars3.githubusercontent.com/u/5173131?v=4\" width=\"100px;\" alt=\"Joe Reeve\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Joe Reeve</b></sub></a><br /><a href=\"#content-ISNIT0\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/BusbyActual\"><img src=\"https://avatars2.githubusercontent.com/u/14985016?v=4\" width=\"100px;\" alt=\"Ryan Busby\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ryan Busby</b></sub></a><br /><a href=\"#content-BusbyActual\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://jsdecorator.com\"><img src=\"https://avatars3.githubusercontent.com/u/4482199?v=4\" width=\"100px;\" alt=\"Iman Mohamadi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Iman Mohamadi</b></sub></a><br /><a href=\"#content-ImanMh\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/HeeL\"><img src=\"https://avatars1.githubusercontent.com/u/287769?v=4\" width=\"100px;\" alt=\"Sergii Paryzhskyi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sergii Paryzhskyi</b></sub></a><br /><a href=\"#content-HeeL\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kapilepatel\"><img src=\"https://avatars3.githubusercontent.com/u/25738473?v=4\" width=\"100px;\" alt=\"Kapil Patel\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kapil Patel</b></sub></a><br /><a href=\"#content-kapilepatel\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/justjavac\"><img src=\"https://avatars1.githubusercontent.com/u/359395?v=4\" width=\"100px;\" alt=\"迷渡\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>迷渡</b></sub></a><br /><a href=\"#content-justjavac\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/hozefaj\"><img src=\"https://avatars1.githubusercontent.com/u/2084833?v=4\" width=\"100px;\" alt=\"Hozefa\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Hozefa</b></sub></a><br /><a href=\"#content-hozefaj\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/el-ethan\"><img src=\"https://avatars3.githubusercontent.com/u/10249884?v=4\" width=\"100px;\" alt=\"Ethan\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ethan</b></sub></a><br /><a href=\"#content-el-ethan\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/milkdeliver\"><img src=\"https://avatars2.githubusercontent.com/u/3108407?v=4\" width=\"100px;\" alt=\"Sam\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sam</b></sub></a><br /><a href=\"#content-milkdeliver\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ArlindXh\"><img src=\"https://avatars0.githubusercontent.com/u/19508764?v=4\" width=\"100px;\" alt=\"Arlind\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Arlind</b></sub></a><br /><a href=\"#content-ArlindXh\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ttous\"><img src=\"https://avatars0.githubusercontent.com/u/19815440?v=4\" width=\"100px;\" alt=\"Teddy Toussaint\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Teddy Toussaint</b></sub></a><br /><a href=\"#content-ttous\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://ardern.io\"><img src=\"https://avatars2.githubusercontent.com/u/2419690?v=4\" width=\"100px;\" alt=\"Lewis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Lewis</b></sub></a><br /><a href=\"#content-LewisArdern\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://gabriellidenor.com/\"><img src=\"https://avatars2.githubusercontent.com/u/765963?v=4\" width=\"100px;\" alt=\"Gabriel Lidenor \"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Gabriel Lidenor </b></sub></a><br /><a href=\"#content-GabrielLidenor\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/animir\"><img src=\"https://avatars3.githubusercontent.com/u/4623196?v=4\" width=\"100px;\" alt=\"Roman\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Roman</b></sub></a><br /><a href=\"#content-animir\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Francozeira\"><img src=\"https://avatars1.githubusercontent.com/u/47419763?v=4\" width=\"100px;\" alt=\"Francozeira\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Francozeira</b></sub></a><br /><a href=\"#content-Francozeira\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/invvard\"><img src=\"https://avatars0.githubusercontent.com/u/7305493?v=4\" width=\"100px;\" alt=\"Invvard\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Invvard</b></sub></a><br /><a href=\"#content-Invvard\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://romulogarofalo.github.io/\"><img src=\"https://avatars1.githubusercontent.com/u/18492592?v=4\" width=\"100px;\" alt=\"Rômulo Garofalo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Rômulo Garofalo</b></sub></a><br /><a href=\"#content-romulogarofalo\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://thoqbk.github.io/\"><img src=\"https://avatars0.githubusercontent.com/u/1491103?v=4\" width=\"100px;\" alt=\"Tho Q Luong\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tho Q Luong</b></sub></a><br /><a href=\"#content-thoqbk\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Qeneke\"><img src=\"https://avatars2.githubusercontent.com/u/20271568?v=4\" width=\"100px;\" alt=\"Burak Shen\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Burak Shen</b></sub></a><br /><a href=\"#content-Qeneke\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.happy-css.com\"><img src=\"https://avatars0.githubusercontent.com/u/2950505?v=4\" width=\"100px;\" alt=\"Martin Muzatko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Martin Muzatko</b></sub></a><br /><a href=\"#content-MartinMuzatko\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/autoboxer\"><img src=\"https://avatars3.githubusercontent.com/u/2757601?v=4\" width=\"100px;\" alt=\"Jared Collier\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jared Collier</b></sub></a><br /><a href=\"#content-autoboxer\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://hiltonmeyer.com\"><img src=\"https://avatars3.githubusercontent.com/u/4545860?v=4\" width=\"100px;\" alt=\"Hilton Meyer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Hilton Meyer</b></sub></a><br /><a href=\"#content-bikingbadger\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://kr.vuejs.org\"><img src=\"https://avatars0.githubusercontent.com/u/1451365?v=4\" width=\"100px;\" alt=\"ChangJoo Park(박창주)\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>ChangJoo Park(박창주)</b></sub></a><br /><a href=\"#content-ChangJoo-Park\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/MasahiroSakaguchi\"><img src=\"https://avatars0.githubusercontent.com/u/16427431?v=4\" width=\"100px;\" alt=\"Masahiro Sakaguchi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Masahiro Sakaguchi</b></sub></a><br /><a href=\"#content-MasahiroSakaguchi\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/TheHollidayInn\"><img src=\"https://avatars1.githubusercontent.com/u/1253400?v=4\" width=\"100px;\" alt=\"Keith Holliday\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Keith Holliday</b></sub></a><br /><a href=\"#content-TheHollidayInn\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.coreycleary.me\"><img src=\"https://avatars3.githubusercontent.com/u/1485356?v=4\" width=\"100px;\" alt=\"coreyc\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>coreyc</b></sub></a><br /><a href=\"#content-coreyc\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://maxcubing.wordpress.com\"><img src=\"https://avatars0.githubusercontent.com/u/8260834?v=4\" width=\"100px;\" alt=\"Maximilian Berkmann\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Maximilian Berkmann</b></sub></a><br /><a href=\"#content-Berkmann18\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/DouglasMV\"><img src=\"https://avatars3.githubusercontent.com/u/32845487?v=4\" width=\"100px;\" alt=\"Douglas Mariano Valero\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Douglas Mariano Valero</b></sub></a><br /><a href=\"#content-DouglasMV\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/marcelosdm\"><img src=\"https://avatars0.githubusercontent.com/u/18266600?v=4\" width=\"100px;\" alt=\"Marcelo Melo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Marcelo Melo</b></sub></a><br /><a href=\"#content-marcelosdm\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/mperk_\"><img src=\"https://avatars0.githubusercontent.com/u/3465794?v=4\" width=\"100px;\" alt=\"Mehmet Perk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Mehmet Perk</b></sub></a><br /><a href=\"#content-mperk\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ryanouyang\"><img src=\"https://avatars2.githubusercontent.com/u/360426?v=4\" width=\"100px;\" alt=\"ryan ouyang\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>ryan ouyang</b></sub></a><br /><a href=\"#content-ryanouyang\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/shabeer-mdy\"><img src=\"https://avatars0.githubusercontent.com/u/26842535?v=4\" width=\"100px;\" alt=\"Shabeer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shabeer</b></sub></a><br /><a href=\"#content-shabeer-mdy\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/halfzebra\"><img src=\"https://avatars1.githubusercontent.com/u/3983879?v=4\" width=\"100px;\" alt=\"Eduard Kyvenko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Eduard Kyvenko</b></sub></a><br /><a href=\"#content-halfzebra\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://deyvisonrocha.com\"><img src=\"https://avatars2.githubusercontent.com/u/686067?v=4\" width=\"100px;\" alt=\"Deyvison Rocha\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Deyvison Rocha</b></sub></a><br /><a href=\"#content-deyvisonrocha\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://twitter.com/georgemamer\"><img src=\"https://avatars1.githubusercontent.com/u/20108934?v=4\" width=\"100px;\" alt=\"George Mamer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>George Mamer</b></sub></a><br /><a href=\"#content-georgem3\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/leimonio\"><img src=\"https://avatars0.githubusercontent.com/u/1969742?v=4\" width=\"100px;\" alt=\"Konstantinos Leimonis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Konstantinos Leimonis</b></sub></a><br /><a href=\"#content-leimonio\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Zybax\"><img src=\"https://avatars3.githubusercontent.com/u/22094453?v=4\" width=\"100px;\" alt=\"Oliver Lluberes\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Oliver Lluberes</b></sub></a><br /><a href=\"#translation-Zybax\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://stackoverflow.com/story/tiendq\"><img src=\"https://avatars2.githubusercontent.com/u/815910?v=4\" width=\"100px;\" alt=\"Tien Do\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tien Do</b></sub></a><br /><a href=\"#content-tiendq\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://singh1114.github.io/\"><img src=\"https://avatars0.githubusercontent.com/u/11356398?v=4\" width=\"100px;\" alt=\"Ranvir Singh\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ranvir Singh</b></sub></a><br /><a href=\"#content-singh1114\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/collierrgbsitisfise\"><img src=\"https://avatars3.githubusercontent.com/u/13496126?v=4\" width=\"100px;\" alt=\"Vadim Nicolaev\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vadim Nicolaev</b></sub></a><br /><a href=\"#content-collierrgbsitisfise\" title=\"Content\">🖋</a> <a href=\"#translation-collierrgbsitisfise\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/germangamboa95\"><img src=\"https://avatars3.githubusercontent.com/u/28633849?v=4\" width=\"100px;\" alt=\"German Gamboa Gonzalez\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>German Gamboa Gonzalez</b></sub></a><br /><a href=\"#content-germangamboa95\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/AbdelrahmanHafez\"><img src=\"https://avatars3.githubusercontent.com/u/19984935?v=4\" width=\"100px;\" alt=\"Hafez\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Hafez</b></sub></a><br /><a href=\"#content-AbdelrahmanHafez\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://linkedin.com/in/chandiran-dmc\"><img src=\"https://avatars3.githubusercontent.com/u/42678579?v=4\" width=\"100px;\" alt=\"Chandiran\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Chandiran</b></sub></a><br /><a href=\"#content-chandiran-dmc\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/VinayaSathyanarayana\"><img src=\"https://avatars2.githubusercontent.com/u/16976677?v=4\" width=\"100px;\" alt=\"VinayaSathyanarayana\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>VinayaSathyanarayana</b></sub></a><br /><a href=\"#content-VinayaSathyanarayana\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.kimkern.de\"><img src=\"https://avatars1.githubusercontent.com/u/2671139?v=4\" width=\"100px;\" alt=\"Kim Kern\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kim Kern</b></sub></a><br /><a href=\"#content-kiwikern\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://kennethfreitas.github.io/\"><img src=\"https://avatars2.githubusercontent.com/u/55669043?v=4\" width=\"100px;\" alt=\"Kenneth Freitas\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kenneth Freitas</b></sub></a><br /><a href=\"#content-kennethfreitas\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/songe\"><img src=\"https://avatars2.githubusercontent.com/u/1531561?v=4\" width=\"100px;\" alt=\"songe\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>songe</b></sub></a><br /><a href=\"#content-songe\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://ksed.dev\"><img src=\"https://avatars1.githubusercontent.com/u/30693707?v=4\" width=\"100px;\" alt=\"Kirill Shekhovtsov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kirill Shekhovtsov</b></sub></a><br /><a href=\"#content-Ksedline\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/SerzN1\"><img src=\"https://avatars0.githubusercontent.com/u/2534649?v=4\" width=\"100px;\" alt=\"Serge\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Serge</b></sub></a><br /><a href=\"#content-SerzN1\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/keyrwinz\"><img src=\"https://avatars3.githubusercontent.com/u/21241761?v=4\" width=\"100px;\" alt=\"keyrwinz\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>keyrwinz</b></sub></a><br /><a href=\"#content-keyrwinz\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/nDmitry\"><img src=\"https://avatars0.githubusercontent.com/u/2134568?v=4\" width=\"100px;\" alt=\"Dmitry Nikitenko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dmitry Nikitenko</b></sub></a><br /><a href=\"#content-nDmitry\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://bushuai.cc\"><img src=\"https://avatars0.githubusercontent.com/u/1875256?v=4\" width=\"100px;\" alt=\"bushuai\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>bushuai</b></sub></a><br /><a href=\"https://github.com/goldbergyoni/nodebestpractices/pulls?q=is%3Apr+reviewed-by%3Abushuai\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#content-bushuai\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://stackoverflow.com/users/1348195/benjamin-gruenbaum\"><img src=\"https://avatars2.githubusercontent.com/u/1315533?v=4\" width=\"100px;\" alt=\"Benjamin Gruenbaum\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Benjamin Gruenbaum</b></sub></a><br /><a href=\"#content-benjamingr\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/byeze\"><img src=\"https://avatars1.githubusercontent.com/u/7424138?v=4\" width=\"100px;\" alt=\"Ezequiel\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ezequiel</b></sub></a><br /><a href=\"#translation-byeze\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/juaoose\"><img src=\"https://avatars3.githubusercontent.com/u/994594?v=4\" width=\"100px;\" alt=\"Juan José Rodríguez\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Juan José Rodríguez</b></sub></a><br /><a href=\"#translation-juaoose\" title=\"Translation\">🌍</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/OrBin\"><img src=\"https://avatars1.githubusercontent.com/u/6897234?v=4\" width=\"100px;\" alt=\"Or Bin\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Or Bin</b></sub></a><br /><a href=\"#content-OrBin\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/andreoav07\"><img src=\"https://avatars2.githubusercontent.com/u/508827?v=4\" width=\"100px;\" alt=\"Andreo Vieira\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Andreo Vieira</b></sub></a><br /><a href=\"#content-andreoav\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mikicho\"><img src=\"https://avatars1.githubusercontent.com/u/11459632?v=4\" width=\"100px;\" alt=\"Michael Solomon\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Michael Solomon</b></sub></a><br /><a href=\"#content-mikicho\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jimmycallin\"><img src=\"https://avatars0.githubusercontent.com/u/2225828?v=4\" width=\"100px;\" alt=\"Jimmy Callin\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jimmy Callin</b></sub></a><br /><a href=\"#content-jimmycallin\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/siddharthofficial/\"><img src=\"https://avatars2.githubusercontent.com/u/26025955?v=4\" width=\"100px;\" alt=\"Siddharth\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Siddharth</b></sub></a><br /><a href=\"#content-w01fS\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://ryansmith.tech/\"><img src=\"https://avatars0.githubusercontent.com/u/1578766?v=4\" width=\"100px;\" alt=\"Ryan Smith\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ryan Smith</b></sub></a><br /><a href=\"#content-ryan3E0\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://de.linkedin.com/in/tom-boettger\"><img src=\"https://avatars2.githubusercontent.com/u/49961674?v=4\" width=\"100px;\" alt=\"Tom Boettger\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tom Boettger</b></sub></a><br /><a href=\"#content-bttger\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jormaechea\"><img src=\"https://avatars3.githubusercontent.com/u/5612500?v=4\" width=\"100px;\" alt=\"Joaquín Ormaechea\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Joaquín Ormaechea</b></sub></a><br /><a href=\"#translation-jormaechea\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/dfrzuz\"><img src=\"https://avatars3.githubusercontent.com/u/71859096?v=4\" width=\"100px;\" alt=\"dfrzuz\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>dfrzuz</b></sub></a><br /><a href=\"#translation-dfrzuz\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/victor-homyakov\"><img src=\"https://avatars1.githubusercontent.com/u/121449?v=4\" width=\"100px;\" alt=\"Victor Homyakov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Victor Homyakov</b></sub></a><br /><a href=\"#content-victor-homyakov\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://joshuahemphill.com\"><img src=\"https://avatars3.githubusercontent.com/u/46608115?v=4\" width=\"100px;\" alt=\"Josh\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Josh</b></sub></a><br /><a href=\"#content-josh-hemphill\" title=\"Content\">🖋</a> <a href=\"#security-josh-hemphill\" title=\"Security\">🛡️</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/alec-francis\"><img src=\"https://avatars2.githubusercontent.com/u/32949882?v=4\" width=\"100px;\" alt=\"Alec Francis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alec Francis</b></sub></a><br /><a href=\"#content-alec-francis\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/arjun6610\"><img src=\"https://avatars1.githubusercontent.com/u/61268891?v=4\" width=\"100px;\" alt=\"arjun6610\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>arjun6610</b></sub></a><br /><a href=\"#content-arjun6610\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jan-osch\"><img src=\"https://avatars2.githubusercontent.com/u/11651780?v=4\" width=\"100px;\" alt=\"Jan Osch\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jan Osch</b></sub></a><br /><a href=\"#content-jan-osch\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/thiagotrs\"><img src=\"https://avatars2.githubusercontent.com/u/32005779?v=4\" width=\"100px;\" alt=\"Thiago Rotondo Sampaio\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Thiago Rotondo Sampaio</b></sub></a><br /><a href=\"#translation-thiagotrs\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Alexsey\"><img src=\"https://avatars0.githubusercontent.com/u/6392013?v=4\" width=\"100px;\" alt=\"Alexsey\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alexsey</b></sub></a><br /><a href=\"#content-Alexsey\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/13luismb\"><img src=\"https://avatars1.githubusercontent.com/u/32210483?v=4\" width=\"100px;\" alt=\"Luis A. Acurero\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Luis A. Acurero</b></sub></a><br /><a href=\"#translation-13luismb\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://lromano97.github.io/\"><img src=\"https://avatars1.githubusercontent.com/u/22394847?v=4\" width=\"100px;\" alt=\"Lucas Romano\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Lucas Romano</b></sub></a><br /><a href=\"#translation-lromano97\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/denisecase\"><img src=\"https://avatars0.githubusercontent.com/u/13016516?v=4\" width=\"100px;\" alt=\"Denise Case\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Denise Case</b></sub></a><br /><a href=\"#content-denisecase\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://stackoverflow.com/story/elektronik\"><img src=\"https://avatars3.githubusercontent.com/u/1078554?v=4\" width=\"100px;\" alt=\"Nick Ribal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nick Ribal</b></sub></a><br /><a href=\"#content-elektronik2k5\" title=\"Content\">🖋</a> <a href=\"https://github.com/goldbergyoni/nodebestpractices/pulls?q=is%3Apr+reviewed-by%3Aelektronik2k5\" title=\"Reviewed Pull Requests\">👀</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/0xflotus\"><img src=\"https://avatars3.githubusercontent.com/u/26602940?v=4\" width=\"100px;\" alt=\"0xflotus\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>0xflotus</b></sub></a><br /><a href=\"#content-0xflotus\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.dijonkitchen.org/\"><img src=\"https://avatars3.githubusercontent.com/u/11434205?v=4\" width=\"100px;\" alt=\"Jonathan Chen\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jonathan Chen</b></sub></a><br /><a href=\"#content-dijonkitchen\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/dilansri\"><img src=\"https://avatars2.githubusercontent.com/u/5089728?v=4\" width=\"100px;\" alt=\"Dilan Srilal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dilan Srilal</b></sub></a><br /><a href=\"#content-dilansri\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://vectree.ru\"><img src=\"https://avatars3.githubusercontent.com/u/4215285?v=4\" width=\"100px;\" alt=\"vladthelittleone\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>vladthelittleone</b></sub></a><br /><a href=\"#translation-vladthelittleone\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.nikolaso.com\"><img src=\"https://avatars0.githubusercontent.com/u/60047271?v=4\" width=\"100px;\" alt=\"Nik Osvalds\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nik Osvalds</b></sub></a><br /><a href=\"#content-nosvalds\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kdaniel21\"><img src=\"https://avatars0.githubusercontent.com/u/39854385?v=4\" width=\"100px;\" alt=\"Daniel Kiss\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Daniel Kiss</b></sub></a><br /><a href=\"https://github.com/goldbergyoni/nodebestpractices/commits?author=kdaniel21\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/forresst17\"><img src=\"https://avatars2.githubusercontent.com/u/163352?v=4\" width=\"100px;\" alt=\"Forresst\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Forresst</b></sub></a><br /><a href=\"#content-forresst\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/svenheden\"><img src=\"https://avatars1.githubusercontent.com/u/76098?v=4\" width=\"100px;\" alt=\"Jonathan Svenheden\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jonathan Svenheden</b></sub></a><br /><a href=\"#content-svenheden\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/AustrisC\"><img src=\"https://avatars2.githubusercontent.com/u/12381652?v=4\" width=\"100px;\" alt=\"AustrisC\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>AustrisC</b></sub></a><br /><a href=\"#content-AustrisC\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/cisco0808\"><img src=\"https://avatars0.githubusercontent.com/u/60251188?v=4\" width=\"100px;\" alt=\"kyeongtae kim\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>kyeongtae kim</b></sub></a><br /><a href=\"#translation-cisco0808\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://keybase.io/651z9pz968v2accj\"><img src=\"https://avatars.githubusercontent.com/u/65741741?v=4\" width=\"100px;\" alt=\"007\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>007</b></sub></a><br /><a href=\"#content-6gx7iycn53ioq2e8apk1j1ypwov4giui\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.anediaz.com\"><img src=\"https://avatars.githubusercontent.com/u/17216937?v=4\" width=\"100px;\" alt=\"Ane Diaz de Tuesta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ane Diaz de Tuesta</b></sub></a><br /><a href=\"#translation-anediaz\" title=\"Translation\">🌍</a> <a href=\"#content-anediaz\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://yukioh.net\"><img src=\"https://avatars.githubusercontent.com/u/23182489?v=4\" width=\"100px;\" alt=\"YukiOta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>YukiOta</b></sub></a><br /><a href=\"#translation-YukiOta\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.yeovilhospital.co.uk/\"><img src=\"https://avatars.githubusercontent.com/u/43814140?v=4\" width=\"100px;\" alt=\"Frazer Smith\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Frazer Smith</b></sub></a><br /><a href=\"#content-Fdawgs\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/rluvaton\"><img src=\"https://avatars.githubusercontent.com/u/16746759?v=4\" width=\"100px;\" alt=\"Raz Luvaton\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Raz Luvaton</b></sub></a><br /><a href=\"#content-rluvaton\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/YA21\"><img src=\"https://avatars.githubusercontent.com/u/37298463?v=4\" width=\"100px;\" alt=\"Yuta Azumi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yuta Azumi</b></sub></a><br /><a href=\"#content-YA21\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/andrewjbarbour\"><img src=\"https://avatars.githubusercontent.com/u/77080074?v=4\" width=\"100px;\" alt=\"andrewjbarbour\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>andrewjbarbour</b></sub></a><br /><a href=\"#content-andrewjbarbour\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://MasujimaRyohei.jp\"><img src=\"https://avatars.githubusercontent.com/u/17163541?v=4\" width=\"100px;\" alt=\"mr\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>mr</b></sub></a><br /><a href=\"#content-MasujimaRyohei\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kubanac95\"><img src=\"https://avatars.githubusercontent.com/u/16191931?v=4\" width=\"100px;\" alt=\"Aleksandar\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Aleksandar</b></sub></a><br /><a href=\"#content-kubanac95\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://vincentjonathan.com\"><img src=\"https://avatars.githubusercontent.com/u/32597776?v=4\" width=\"100px;\" alt=\"Owl\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Owl</b></sub></a><br /><a href=\"#content-SuspiciousLookingOwl\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/yedidyas\"><img src=\"https://avatars.githubusercontent.com/u/36074789?v=4\" width=\"100px;\" alt=\"Yedidya Schwartz\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yedidya Schwartz</b></sub></a><br /><a href=\"#content-yedidyas\" title=\"Content\">🖋</a> <a href=\"#example-yedidyas\" title=\"Examples\">💡</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ariel-diaz\"><img src=\"https://avatars.githubusercontent.com/u/20423540?v=4\" width=\"100px;\" alt=\"ari\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>ari</b></sub></a><br /><a href=\"#content-ariel-diaz\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.koenigthomas.de/\"><img src=\"https://avatars.githubusercontent.com/u/7080389?v=4\" width=\"100px;\" alt=\"Thomas König\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Thomas König</b></sub></a><br /><a href=\"#content-Vispercept\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/coocos\"><img src=\"https://avatars.githubusercontent.com/u/1397804?v=4\" width=\"100px;\" alt=\"Kalle Lämsä\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kalle Lämsä</b></sub></a><br /><a href=\"#content-coocos\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://math.cat\"><img src=\"https://avatars.githubusercontent.com/u/10328430?v=4\" width=\"100px;\" alt=\"Wyatt\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Wyatt</b></sub></a><br /><a href=\"#content-ZhyMC\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://libkhadir.fr\"><img src=\"https://avatars.githubusercontent.com/u/45130488?v=4\" width=\"100px;\" alt=\"KHADIR Tayeb\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>KHADIR Tayeb</b></sub></a><br /><a href=\"#content-tkhadir\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/shankarregmi\"><img src=\"https://avatars.githubusercontent.com/u/7703345?v=4\" width=\"100px;\" alt=\"Shankar Regmi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shankar Regmi</b></sub></a><br /><a href=\"#content-shankarregmi\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/codebyshubham\"><img src=\"https://avatars.githubusercontent.com/u/10389723?v=4\" width=\"100px;\" alt=\"Shubham\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shubham</b></sub></a><br /><a href=\"#content-codebyshubham\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://lucalves.me/\"><img src=\"https://avatars.githubusercontent.com/u/17712401?v=4\" width=\"100px;\" alt=\"Lucas Alves\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Lucas Alves</b></sub></a><br /><a href=\"#content-lucalves\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/benjaminudoh10\"><img src=\"https://avatars.githubusercontent.com/u/9018331?v=4\" width=\"100px;\" alt=\"Benjamin\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Benjamin</b></sub></a><br /><a href=\"#content-benjaminudoh10\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.yjoer.com\"><img src=\"https://avatars.githubusercontent.com/u/47742486?v=4\" width=\"100px;\" alt=\"Yeoh Joer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yeoh Joer</b></sub></a><br /><a href=\"#content-yjoer\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://blog.miigon.net\"><img src=\"https://avatars.githubusercontent.com/u/16161991?v=4\" width=\"100px;\" alt=\"Miigon\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Miigon</b></sub></a><br /><a href=\"#content-Miigon\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://brainstorage.me/Egregor2011\"><img src=\"https://avatars.githubusercontent.com/u/3630318?v=4\" width=\"100px;\" alt=\"Rostislav Bogorad\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Rostislav Bogorad</b></sub></a><br /><a href=\"#content-Egregor2011\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Flouse\"><img src=\"https://avatars.githubusercontent.com/u/1297478?v=4\" width=\"100px;\" alt=\"Flouse\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Flouse</b></sub></a><br /><a href=\"#content-Flouse\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://taranttini.com\"><img src=\"https://avatars.githubusercontent.com/u/6922125?v=4\" width=\"100px;\" alt=\"Tarantini Pereira\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tarantini Pereira</b></sub></a><br /><a href=\"#content-taranttini\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kzmat\"><img src=\"https://avatars.githubusercontent.com/u/34614358?v=4\" width=\"100px;\" alt=\"Kazuki Matsuo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kazuki Matsuo</b></sub></a><br /><a href=\"#content-kzmat\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/burkybang\"><img src=\"https://avatars.githubusercontent.com/u/927886?v=4\" width=\"100px;\" alt=\"Adam Smith\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Adam Smith</b></sub></a><br /><a href=\"#content-burkybang\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://codekodo.tistory.com\"><img src=\"https://avatars.githubusercontent.com/u/33795856?v=4\" width=\"100px;\" alt=\"Dohyeon Ko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dohyeon Ko</b></sub></a><br /><a href=\"#content-k906506\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/vlad99902\"><img src=\"https://avatars.githubusercontent.com/u/67615003?v=4\" width=\"100px;\" alt=\"Vladislav Legkov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vladislav Legkov</b></sub></a><br /><a href=\"#content-vlad99902\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://kerolloz.github.io\"><img src=\"https://avatars.githubusercontent.com/u/36763164?v=4\" width=\"100px;\" alt=\"Kerollos Magdy\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kerollos Magdy</b></sub></a><br /><a href=\"#content-kerolloz\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/erez-lieberman-b90b7219/\"><img src=\"https://avatars.githubusercontent.com/u/3277260?v=4\" width=\"100px;\" alt=\"Erez Lieberman\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Erez Lieberman</b></sub></a><br /><a href=\"#content-erezLieberman\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/breno-macedo-ernani-de-s%C3%A1-110223158/\"><img src=\"https://avatars.githubusercontent.com/u/48841329?v=4\" width=\"100px;\" alt=\"Breno Macedo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Breno Macedo</b></sub></a><br /><a href=\"#content-breno404\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/JFernando122\"><img src=\"https://avatars.githubusercontent.com/u/40414805?v=4\" width=\"100px;\" alt=\"Fernando Flores\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Fernando Flores</b></sub></a><br /><a href=\"#translation-JFernando122\" title=\"Translation\">🌍</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/rafaelconcept/\"><img src=\"https://avatars.githubusercontent.com/u/43880669?v=4\" width=\"100px;\" alt=\"Rafael Brito\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Rafael Brito</b></sub></a><br /><a href=\"#translation-rafaelconcept\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://emiliano-peralta-portfolio.vercel.app/\"><img src=\"https://avatars.githubusercontent.com/u/63617637?v=4\" width=\"100px;\" alt=\"Emiliano Peralta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Emiliano Peralta</b></sub></a><br /><a href=\"#translation-emiperalta\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://lannex.github.io\"><img src=\"https://avatars.githubusercontent.com/u/7369541?v=4\" width=\"100px;\" alt=\"Shin, SJ\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shin, SJ</b></sub></a><br /><a href=\"#content-lannex\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.benjaminforster.com\"><img src=\"https://avatars.githubusercontent.com/u/12589522?v=4\" width=\"100px;\" alt=\"Benjamin Forster\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Benjamin Forster</b></sub></a><br /><a href=\"#content-e-e-e\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/DanieleFedeli\"><img src=\"https://avatars.githubusercontent.com/u/37077048?v=4\" width=\"100px;\" alt=\"Daniele Fedeli\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Daniele Fedeli</b></sub></a><br /><a href=\"#content-DanieleFedeli\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/djob195\"><img src=\"https://avatars.githubusercontent.com/u/17146669?v=4\" width=\"100px;\" alt=\"djob195\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>djob195</b></sub></a><br /><a href=\"#content-djob195\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/antspk\"><img src=\"https://avatars.githubusercontent.com/u/78955792?v=4\" width=\"100px;\" alt=\"antspk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>antspk</b></sub></a><br /><a href=\"#content-antspk\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://jjy0821.tistory.com/\"><img src=\"https://avatars.githubusercontent.com/u/88075341?v=4\" width=\"100px;\" alt=\"정진영\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>정진영</b></sub></a><br /><a href=\"#content-jjy821\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kkk-cashwalk\"><img src=\"https://avatars.githubusercontent.com/u/91455122?v=4\" width=\"100px;\" alt=\"kkk-cashwalk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>kkk-cashwalk</b></sub></a><br /><a href=\"#content-kkk-cashwalk\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/apainintheneck\"><img src=\"https://avatars.githubusercontent.com/u/42982186?v=4\" width=\"100px;\" alt=\"apainintheneck\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>apainintheneck</b></sub></a><br /><a href=\"#content-apainintheneck\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/koyanyaroo\"><img src=\"https://avatars.githubusercontent.com/u/9715368?v=4\" width=\"100px;\" alt=\"Fajar Budhi Iswanda\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Fajar Budhi Iswanda</b></sub></a><br /><a href=\"#content-koyanyaroo\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jutiger\"><img src=\"https://avatars.githubusercontent.com/u/97490806?v=4\" width=\"100px;\" alt=\"이주호\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>이주호</b></sub></a><br /><a href=\"#content-jutiger\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/MisterSingh\"><img src=\"https://avatars.githubusercontent.com/u/44462019?v=4\" width=\"100px;\" alt=\"Singh\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Singh</b></sub></a><br /><a href=\"#content-MisterSingh\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Alex-Dumitru\"><img src=\"https://avatars.githubusercontent.com/u/43738450?v=4\" width=\"100px;\" alt=\"Alex Dumitru\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alex Dumitru</b></sub></a><br /><a href=\"#content-Alex-Dumitru\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/lykhatskyi\"><img src=\"https://avatars.githubusercontent.com/u/18104686?v=4\" width=\"100px;\" alt=\"Anton Lykhatskyi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Anton Lykhatskyi</b></sub></a><br /><a href=\"#content-lykhatskyi\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/EverythingAvailable\"><img src=\"https://avatars.githubusercontent.com/u/81002379?v=4\" width=\"100px;\" alt=\"sangwonlee\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>sangwonlee</b></sub></a><br /><a href=\"#content-EverythingAvailable\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/euberdeveloper\"><img src=\"https://avatars.githubusercontent.com/u/33126163?v=4\" width=\"100px;\" alt=\"Eugenio Berretta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Eugenio Berretta</b></sub></a><br /><a href=\"#content-euberdeveloper\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/soranakk\"><img src=\"https://avatars.githubusercontent.com/u/3930307?v=4\" width=\"100px;\" alt=\"soranakk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>soranakk</b></sub></a><br /><a href=\"#content-soranakk\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/backend-joonyoung\"><img src=\"https://avatars.githubusercontent.com/u/94430145?v=4\" width=\"100px;\" alt=\"고준영\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>고준영</b></sub></a><br /><a href=\"#content-backend-joonyoung\" title=\"Content\">🖋</a> <a href=\"https://github.com/goldbergyoni/nodebestpractices/commits?author=backend-joonyoung\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/GuilhermePortella\"><img src=\"https://avatars.githubusercontent.com/u/59876059?v=4\" width=\"100px;\" alt=\"Guilherme Portella \"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Guilherme Portella </b></sub></a><br /><a href=\"#content-GuilhermePortella\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.youtube.com/channel/UCBxzOQd2v9wWfiMDrf_RQ7A\"><img src=\"https://avatars.githubusercontent.com/u/18497570?v=4\" width=\"100px;\" alt=\"André Esser\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>André Esser</b></sub></a><br /><a href=\"#content-Esser50K\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ShiChenCong\"><img src=\"https://avatars.githubusercontent.com/u/22486446?v=4\" width=\"100px;\" alt=\"Scc\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Scc</b></sub></a><br /><a href=\"#translation-ShiChenCong\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.mauroaccornero.it\"><img src=\"https://avatars.githubusercontent.com/u/1875822?v=4\" width=\"100px;\" alt=\"Mauro Accornero\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Mauro Accornero</b></sub></a><br /><a href=\"#content-mauroaccornero\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/no-yan\"><img src=\"https://avatars.githubusercontent.com/u/63000297?v=4\" width=\"100px;\" alt=\"no-yan\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>no-yan</b></sub></a><br /><a href=\"#content-no-yan\" title=\"Content\">🖋</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n"
        },
        {
          "name": "README.japanese.md",
          "type": "blob",
          "size": 202.56,
          "content": "[✔]: assets/images/checkbox-small-blue.png\n\n# Node.js ベストプラクティス\n\n<h1 align=\"center\">\n  <img src=\"assets/images/banner-2.jpg\" alt=\"Node.js Best Practices\"/>\n</h1>\n\n<br/>\n\n<div align=\"center\">\n  <img src=\"https://img.shields.io/badge/⚙%20Item%20count%20-%20101%20Best%20Practices-blue.svg\" alt=\"101 items\"/> <img src=\"https://img.shields.io/badge/%F0%9F%93%85%20Last%20update%20-%20March%2012%202020-green.svg\" alt=\"Last update: March, 2020\"/> <img src=\"https://img.shields.io/badge/ %E2%9C%94%20Updated%20For%20Version%20-%20Node%2012.12.0-brightgreen.svg\" alt=\"Updated for Node 13.1.0\"/>\n</div>\n\n<br/>\n\n[![nodepractices](./assets/images/twitter-s.png)](https://twitter.com/nodepractices/) **私たちの Twitter をフォローしましょう！** [**@nodepractices**](https://twitter.com/nodepractices/)\n\n<br/>\n\n他の言語で読む: [![CN](./assets/flags/CN.png)**CN**](./README.chinese.md), [![BR](./assets/flags/BR.png)**BR**](./README.brazilian-portuguese.md), [![RU](./assets/flags/RU.png)**RU**](./README.russian.md), [![PL](./assets/flags/PL.png)**PL**](./README.polish.md), [![JA](./assets/flags/JA.png)**JA**](./README.japanese.md), [![EU](./assets/flags/EU.png)**EU**](./README.basque.md) [(![ES](./assets/flags/ES.png)**ES**, ![FR](./assets/flags/FR.png)**FR**, ![HE](./assets/flags/HE.png)**HE**, ![KR](./assets/flags/KR.png)**KR** and ![TR](./assets/flags/TR.png)**TR** in progress!)](#translations)\n\n<br/>\n\n###### [ステアリングコミッティー](#ステアリングコミッティー)と[コラボレーター](#コラボレーター)によって運営されています\n\n# 最新のベストプラクティス・お知らせ\n\n- **:tada: Node.js ベストプラクティスは 50k スターに到達しました**: このプロジェクトをこのようなものにしてくれた全てのコントリビューターに感謝申し上げます！ 私たちは、増え続ける Node.js のベストプラクティスリストをさらに拡大していくために、これから先たくさんの計画を画策しています。\n\n- **🎧 ポッドキャスト**: 私たちのチームの Yoni Goldberg が、前回の JS Party Podcast（とってもクールなポッドキャストです！）のエピソードに出演して、Node.js ベストプラクティスについて話をしました。[🎧 ここから聞きましょう。](https://changelog.com/jsparty/139)\n\n- **:whale: Node.js + Docker ベストプラクティス**: Docker を用いたより良いコーディングテクニック 15 項目を含んだ、Docker と Node.js のセクションを新たに公開しました。\n\n- **🎤 OdessaJS でのトーク**: 今週、[OdessaJS conference](https://odessajs.org/) という素晴らしい舞台で、Node.js のテストについて話をします。\n\n<br/><br/>\n\n# ようこそ！ まず始めに知っておくべき 3 つのこと\n\n**1. 実際、あなたは何十もの Node.js の最高の記事を読んでいます -** このリポジトリは、Node.js のベストプラクティスに関するトップランクのコンテンツや、コラボレーターによって書かれたコンテンツをまとめたものです。\n\n**2. 最大の集大成であり、毎週のように増え続けています -** 現在、80 以上のベストプラクティスやスタイルガイド、アーキテクチャのヒントが記載されています。この「生きた本」がアップデートされた状態を保つために、新しいイシューやプルリクエストは毎日のように作成されています。私たちは、コードの修正や翻訳作業、素晴らしい新たなアイデアの提案に至るまで、あなたの貢献を心待ちにしています。詳しくは[ライティングガイドライン](./.operations/writing-guidelines.japanese.md)をご覧ください。\n\n**3. ほとんどのベストプラクティスには追加情報があります -** ほとんどの項目に **🔗 さらに読む** というリンクがあります。このリンクは、コード例や厳選されたブログからの引用、その他多くの情報など、プラクティスを発展させる内容を含んでいます。\n\n<br/><br/>\n\n## Table of Contents\n\n1. [プロジェクト構成のプラクティス (5)](#1-プロジェクト構成のプラクティス)\n2. [エラーハンドリングのプラクティス (11) ](#2-エラーハンドリングのプラクティス)\n3. [コードスタイルのプラクティス (12) ](#3-コードスタイルのプラクティス)\n4. [テストと総合的な品質のプラクティス (13) ](#4-テストと総合的な品質のプラクティス)\n5. [本番環境移行のプラクティス (19) ](#5-本番環境移行のプラクティス)\n6. [セキュリティのプラクティス (25)](#6-セキュリティのプラクティス)\n7. [パフォーマンスのプラクティス (2) (進行中️ ✍️)](#7-draft-パフォーマンスのプラクティス)\n8. [Docker のプラクティス (15)](#8-docker-のプラクティス)\n\n<br/><br/>\n\n# `1. プロジェクト構成のプラクティス`\n\n## ![✔] 1.1 コンポーネントによりソリューションを構築する\n\n**TL;DR:** 大規模アプリケーションの最悪の落とし穴は、何百もの依存関係を持つ巨大なコードベースを維持することです。- そのようなモノリスは、新しい機能を取り入れようとする開発者の速度を低下させます。その代わりに、コードをコンポーネントに分割し、それぞれが独自のフォルダや専用のコードベースを取得し、各ユニットが小さくシンプルに保たれていることを確認してください。正しいプロジェクト構造の例を見るには、以下の「さらに読む」を参照してください。\n\n**さもないと:** 新しい機能をコーディングする開発者が、自分の変更の影響を理解するのに苦労したり、他の依存するコンポーネントを壊すことを恐れたりすると、デプロイが遅くなり、リスクが高くなります。また、すべてのビジネスユニットが分離されていない場合、スケールアウトするのは難しいと考えられています。\n\n🔗 [**さらに読む: コンポーネントで構成する**](./sections/projectstructre/breakintcomponents.japanese.md)\n\n<br/><br/>\n\n## ![✔] 1.2 コンポーネントを階層化し、その境界内にウェブレイヤーを維持する\n\n**TL;DR:** 各コンポーネントは、ウェブ、ロジック、データアクセスコードのための専用オブジェクトである「レイヤー」を含むべきです。これにより、懸念点がきれいに分離されるだけでなく、システムのモックやテストが大幅に楽になります。これは非常に一般的なパターンですが、API 開発者は Web レイヤーオブジェクト (例: Express req, res) をビジネスロジックとデータレイヤーに渡すことでレイヤーを混ぜる傾向があります - これにより、アプリケーションが特定の Web フレームワークに依存してしまい、特定の Web フレームワークからしかアクセスできなくなってしまいます。\n\n**さもないと:** Web オブジェクトと他のレイヤーが混在するアプリには、テストコードや CRON ジョブ、メッセージキューからのトリガーなどからアクセスすることはできません。\n\n🔗 [**さらに読む: アプリケーションを階層化する**](./sections/projectstructre/createlayers.japanese.md)\n\n<br/><br/>\n\n## ![✔] 1.3 一般的なユーティリティを npm パッケージとしてラップする\n\n**TL;DR:** 大規模なコードベースで構成される大規模なアプリでは、logger や暗号化などの横断的に関心のあるユーティリティは、独自のコードでラップし、プライベートな npm パッケージとして公開する必要があります。これにより、複数のコードベースやプロジェクト間で共有することができます。\n\n**さもないと:** デプロイと依存関係の車輪の作成をしなければいけなくなります\n\n🔗 [**さらに読む: 機能で構成する**](./sections/projectstructre/wraputilities.japanese.md)\n\n<br/><br/>\n\n## ![✔] 1.4 Express の「アプリ」と「サーバー」を分離する\n\n**TL;DR:** [Express](https://expressjs.com/) のアプリ全体を単一の巨大なファイルで定義するという厄介な習慣を回避します。- 「Express」の定義を、API 宣言( app.js )とネットワーク関連( WWW )の少なくとも 2 つのファイルに分離してください。より良い構造にするためには、API 宣言をコンポーネント内に配置してください。\n\n**さもないと:** API は HTTP 呼び出しのみでテストにアクセスできるようになります（カバレッジレポートを生成するのがより遅く、はるかに困難になります）。何百行ものコードを一つのファイルで管理するのは、おそらく大きな喜びではないでしょう。\n\n🔗 [**さらに読む: Express の「アプリ」と「サーバー」を分離する**](./sections/projectstructre/separateexpress.japanese.md)\n\n<br/><br/>\n\n## ![✔] 1.5 環境を意識したセキュアで階層的な設定を使用する\n\n**TL;DR:** 完璧で欠陥のない設定を行うには、次のようなことが必要です。(a) キーはファイルまたは環境変数から読み込むことができる (b) 秘密情報はコミットされたコードの外側に保持されている (c) 設定が階層化されており、見つけやすくなっている [rc](https://www.npmjs.com/package/rc) や [nconf](https://www.npmjs.com/package/nconf)、 [config](https://www.npmjs.com/package/config)、[convict](https://www.npmjs.com/package/convict) など、これらのボックスのほとんどを満たすのに役立つパッケージがいくつかあります。\n\n**さもないと:** 設定要件のどれかを満たさないと、開発チームや DevOps チーム、おそらく両方ともの頭を悩ませてしまいます。\n\n🔗 [**さらに読む: 構成のベストプラクティス**](./sections/projectstructre/configguide.japanese.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ トップに戻る</a></p>\n\n# `2. エラーハンドリングのプラクティス`\n\n## ![✔] 2.1 非同期エラーハンドリングに Async-Await または promises を使う\n\n**TL;DR:** コールバックスタイルで非同期エラーを処理することは、おそらく地獄への最短経路でしょう（Pyramid of doom として知られています）。あなたができるコードへの最高の贈り物は、信頼できる promise ライブラリや async-await を使うことです。これらは、try-catch のような、よりコンパクトで親しみやすいコードシンタックスを可能にします。\n\n**さもなければ:** Node.js のコールバックスタイル、つまり function(err, response) を利用することは、正常な処理を行うコードとエラーハンドリングの混同、過剰なネスト構造、そして厄介なコーディングパターンが原因となって、メンテナンス性の低いコードにつながります。\n\n🔗 [**さらに読む: コールバック関数の利用を避ける**](./sections/errorhandling/asyncerrorhandling.japanese.md)\n\n<br/><br/>\n\n## ![✔] 2.2 組み込みのエラーオブジェクトのみを使用する\n\n**TL;DR:** 多くがエラーとして文字列やカスタム型を投げます - これはエラー処理ロジックとモジュール間の相互運用性を複雑にします。promise を reject したのか、例外を投げたのか、エラーを排出したのかに関わらず、組み込みのエラーオブジェクト（またはそれを拡張したオブジェクト）だけ使うことは一貫性を向上させ、情報の欠落を防ぎます。\n\n**さもないと:** ある要素を呼び出したとき、どの型のエラーが返ってくるか不確かである - といった状況は、適切なエラー処理をより難しいものにします。さらに悪いことに、エラーを表現するためにカスタム型を使うことは、スタックトレースのような重大なエラー情報を失うことに繋がるかもしれません。\n\n🔗 [**さらに読む: 組み込みのエラーオブジェクトのみを使用する**](./sections/errorhandling/useonlythebuiltinerror.japanese.md)\n\n<br/><br/>\n\n## ![✔] 2.3 操作上のエラーとプログラマーのエラーを区別する\n\n**TL;DR:** 操作上のエラー（例: API が無効な入力を受け取る）は、エラーの影響が十分に理解され、そして丁寧に処理される既知のエラーのことを指します。一方で、プログラマーのエラー（例: 未定義の変数を参照しようとする）は、アプリケーションをすぐさま再起動させる、未知のコードエラーのことを指します。\n\n**さもないと:** エラーが発生したときに毎回アプリケーションを再起動しているかもしれませんが、さほど重要でない、予測可能な、操作上のエラーを原因としてなぜ ~5000 人規模のオンラインユーザーをダウンさせるのでしょうか？ その逆もまた理想的ではありません ー 未知のエラー（プログラマーのエラー）が発生したときにアプリケーションをそのまま起動し続けることは、予想外の振る舞いに繋がるかもしれません。この２つを区別することで、機転の利いた振る舞いをさせ、与えられたコンテキストに基づいた適切なアプローチを適用させることができます。\n\n🔗 [**さらに読む: 操作上のエラーとプログラマーのエラーを区別する**](./sections/errorhandling/operationalvsprogrammererror.japanese.md)\n\n<br/><br/>\n\n## ![✔] 2.4 エラー処理を一元化し、ミドウェア内で処理をしない\n\n**TL;DR:** 管理者へのメールやロギングのようなエラー処理ロジックは、エラーが発生したときに全てのエンドポイント（Express ミドルウェア、cron ジョブ、ユニットテストなど）が呼び出す、エラー処理専用の一元化されたオブジェクトにカプセル化されているべきです。\n\n**さもないと:** エラーを一箇所で処理しないと、コードの重複や、不適切に処理されたエラーの発生に繋がる可能性があります。\n\n🔗 [**さらに読む: エラー処理を一元化し、ミドウェア内で処理をしない**](./sections/errorhandling/centralizedhandling.japanese.md)\n\n<br/><br/>\n\n## ![✔] 2.5 Swagger または GraphQL を利用して API のエラーをドキュメント化する\n\n**TL;DR:** API の呼び出し元に、どのようなエラーが返ってくるかを示しておくことで、クラッシュすることなく丁寧にエラー処理を行うことができます。RESTful API の場合、通常 Swagger のようなドキュメントフレームワークを使用します。GraphQL を使用している場合は、スキーマやコメントも利用できます。\n\n**さもないと:** API クライアントがクラッシュして再起動するのは、不明なエラーを受け取ったからかもしれません。注意: API の呼び出し元はあなた自身かもしれません（マイクロサービス構成では非常によくあることです）\n\n🔗 [**さらに読む: Swagger または GraphQL を利用して API のエラーをドキュメント化する**](./sections/errorhandling/documentingusingswagger.japanese.md)\n\n<br/><br/>\n\n## ![✔] 2.6 見ず知らずの事象が起きたら潔くプロセスを終了する\n\n**TL;DR:** 未知のエラーが発生した場合（プログラマーのエラー、ベストプラクティス 2.3 参照）、アプリケーションの健全性に不確実さがあります。一般的に、[Forever](https://www.npmjs.com/package/forever) や [PM2](http://pm2.keymetrics.io/) のようなプロセス管理ツールを利用してプロセスを慎重に再起動することが推奨されています。\n\n**さもないと:** 不明な例外が発生した場合、一部のオブジェクトが不完全な状態（例えば、グローバルに使用されているイベントエミッタが内部的なエラーによりイベントを発火しなくなっている、など）になっている可能性があり、後に来るリクエストが失敗したり、予期せぬ挙動をしたりするかもしれません。\n\n🔗 [**さらに読む: 見ず知らずの事象が起きたら潔くプロセスを終了する**](./sections/errorhandling/shuttingtheprocess.japanese.md)\n\n<br/><br/>\n\n## ![✔] 2.7 エラーの可視性を高めるために成熟したロガーを使用する\n\n**TL;DR:** [Pino](https://github.com/pinojs/pino) や [Log4js](https://www.npmjs.com/package/log4js) のような成熟したロギングツールは、エラーの発見と理解を加速します。ですから、console.log のことは忘れましょう。\n\n**さもないと:** console.log によるログに目を通したり、クエリツールやまともなログビューア無しで扱いにくいテキストファイルを手動で確認したりすると、遅くまで仕事をする羽目になるかもしれません。\n\n🔗 [**さらに読む: エラーの可視性を高めるために成熟したロガーを使用する**](./sections/errorhandling/usematurelogger.japanese.md)\n\n<br/><br/>\n\n## ![✔] 2.8 お気に入りのテストフレームワークを使用してエラーフローをテストする\n\n**TL;DR:** プロ仕様の自動化された QA であろうと単純な手動の開発者によるテストであろうと、コードが正常系のシナリオを満たすだけでなく、正しくエラーを処理して返すことを保証してください。Mocha や Chai のようなテストフレームワークは、これを簡単に処理することができます（「さらに読む」の例を参照）\n\n**さもないと:** 自動であっても手動であっても、テストがなければ、コードが正しいエラーを返すと信用することはできません。意味のあるエラーがなければ、エラー処理はできません。\n\n🔗 [**さらに読む: お気に入りのテストフレームワークを使用してエラーフローをテストする**](./sections/errorhandling/testingerrorflows.japanese.md)\n\n<br/><br/>\n\n## ![✔] 2.9 APM 製品を利用してエラーとダウンタイムを発見する\n\n**TL;DR:** モニタリング・パフォーマンス計測を行う製品（APM として知られています）は、コードベースや API をプロアクティブに計測し、見落としていたエラーやクラッシュ、処理の遅い部分を自動的にハイライトすることができます。\n\n**さもないと:** API のパフォーマンスとダウンタイムの計測に多大な労力を費やしているかもしれませんが、現実のシナリオにおいてどの部分のコードが最も遅いのか、そしてそれらがどのように UX に影響を及ぼしているのか、あなたが気づくことは恐らくないでしょう。\n\n🔗 [**さらに読む: APM 製品を利用してエラーとダウンタイムを発見する**](./sections/errorhandling/apmproducts.japanese.md)\n\n<br/><br/>\n\n## ![✔] 2.10 未処理の reject された promise を捕捉する\n\n**TL;DR:** promise の中で投げられた全ての例外は、開発者が明示的に処理を行うことを忘れていない限り、飲み込まれて破棄されます。たとえコードが `process.uncaughtException` をサブスクライブしていたとしてもです！`process.unhandledRejection` イベントに登録することで、この問題を乗り越えることができます。\n\n**さもないと:** あなたのエラーは飲み込まれて、何のトレースも残しません。心配することは、何も残りません。\n\n🔗 [**さらに読む: 未処理の reject された promise を捕捉する**](./sections/errorhandling/catchunhandledpromiserejection.japanese.md)\n\n<br/><br/>\n\n## ![✔] 2.11 専用のライブラリを利用して引数の検証を高速に行う\n\n**TL;DR:** API の入力をアサートすることで、後から追跡するのが非常に難しい厄介なバグを避けることができます。[ajv](https://www.npmjs.com/package/ajv) や [Joi](https://www.npmjs.com/package/joi) のような非常にクールなヘルパーライブラリを利用しない限り、バリデーションコードを書くことは一般的に退屈な作業です。\n\n**さもないと:** 考えてみて下さい ー 関数は数値の引数「Discount」を受け取ることを期待していますが、呼び出し元が値を渡すのを忘れてしまいました。その後、コードが Discount!=0 (許容されたディスカウントの量が 0 よりも大きいことを想定) であるということをチェックし、そのチェックをクリアした場合にユーザーがディスカウントを受けられるようにしました。オーマイガー、なんて厄介なバグなんでしょう。わかりますか？（訳注：「さらに読む」に具体的なコード例が載っています）\n\n🔗 [**さらに読む: 専用のライブラリを利用して引数の検証を高速に行う**](./sections/errorhandling/failfast.japanese.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ トップに戻る</a></p>\n\n# `3. コードスタイルのプラクティス`\n\n## ![✔] 3.1 ESLint を使う\n\n**TL;DR:** [ESLint](https://eslint.org) は、コードエラーの可能性をチェックし、コードスタイルを修正するためのデファクトスタンダードで、細かい間隔の問題を特定するだけでなく、開発者が分類せずにエラーを投げるような深刻なコードアンチパターンを検出することもできます。ESLint はコードスタイルを自動的に修正することができますが、[prettier](https://www.npmjs.com/package/prettier) や [beautify](https://www.npmjs.com/package/js-beautify) のような他のツールは、フィックスの書式設定をより強力にし、ESLint と連携して動作します。\n\n**さもないと:** 開発者は退屈な間隔や線幅の問題に集中し、プロジェクトのコードスタイルを考えすぎて時間を無駄にしてしまうかもしれません。\n\n🔗 [**さらに読む: ESLint と Prettier を使う**](./sections/codestylepractices/eslint_prettier.japanese.md)\n\n<br/><br/>\n\n## ![✔] 3.2 Node.js に特化したプラグイン\n\n**TL;DR:** vanilla JavaScript をカバーする ESLint の標準ルールに加えて、[eslint-plugin-node](https://www.npmjs.com/package/eslint-plugin-node) や [eslint-plugin-mocha](https://www.npmjs.com/package/eslint-plugin-mocha)、[eslint-plugin-node-security](https://www.npmjs.com/package/eslint-plugin-security) のような Node.js に特化したプラグインを追加します。\n\n**さもないと:** 多くの欠陥のある Node.js のコードパターンは、レーダーを逃れてしまうかもしれません。例えば、開発者は攻撃者が任意の JS スクリプトを実行できるように、パスとして与えられた変数を持つファイルを require(variableAsPath) しているかもしれません。Node.js の linters は、そのようなパターンを早期に検出して知らせてくれます。\n<br/><br/>\n\n## ![✔] 3.3 コードブロックの中括弧を同一行上でスタートさせる\n\n**TL;DR:** コードブロックの冒頭の中括弧は、冒頭の文と同じ行でなければなりません。\n\n### コード例\n\n```javascript\n// Do\nfunction someFunction() {\n  // code block\n}\n\n// Avoid\nfunction someFunction()\n{\n  // code block\n}\n```\n\n**さもないと:** このベストプラクティスから逸脱すると、以下の StackOverflow スレッドにあるように、予期せぬ結果を招く可能性があります。:\n\n🔗 [**さらに読む:** \"なぜ中括弧の配置によって結果が変わるのか?\" (StackOverflow)](https://stackoverflow.com/questions/3641519/why-does-a-results-vary-based-on-curly-brace-placement)\n\n<br/><br/>\n\n## ![✔] 3.4 ステートメントを適切に区切る\n\nステートメントを区切るためにセミコロンを使うか使わないかに関わらず、不適切な改行や自動セミコロン挿入のよくある落とし穴を知っておくことで、通常の構文エラーをなくすことができます。\n\n**TL;DR:** ESLint を使用して、分離の懸念について認識する。 [Prettier](https://prettier.io/) や [Standardjs](https://standardjs.com/) は、これらの問題を自動的に解決することができます。\n\n**さもないと:** 前のセクションで見たように、JavaScript のインタプリタは、セミコロンがない場合は自動的に文の最後にセミコロンを追加したり、ステートメントが本来あるべき場所で終わっていないとみなしたりすることで、望まない結果になってしまう可能性があります。代入を使用し、即時に呼び出された関数式の使用を避けることで、予期せぬエラーのほとんどを防ぐことができます。\n\n### 3.4 コード例\n\n```javascript\n// する\nfunction doThing() {\n    // ...\n}\n\ndoThing()\n\n// する\n\nconst items = [1, 2, 3]\nitems.forEach(console.log)\n\n// 避ける — 例外を投げる\nconst m = new Map()\nconst a = [1,2,3]\n[...m.values()].forEach(console.log)\n> [...m.values()].forEach(console.log)\n>  ^^^\n> SyntaxError: Unexpected token ...\n\n// 避ける — 例外を投げる\nconst count = 2 // 2() を実行しようとしますが、2 は関数ではありません\n(function doSomething() {\n  // 凄いことをする\n}())\n// 直ちに呼び出された関数の前、const 定義の後にセミコロンを置く、匿名関数の戻り値を変数に保存する、あるいは IIFE を完全に回避する\n```\n\n🔗 [**さらに読む:** \"準 ESLint ルール\"](https://eslint.org/docs/rules/semi)\n🔗 [**さらに読む:** \"予期せぬ複数行を許さない ESLint のルール\"](https://eslint.org/docs/rules/no-unexpected-multiline)\n\n<br/><br/>\n\n## ![✔] 3.5 関数に名前を付ける\n\n**TL;DR:** クロージャやコールバックを含むすべての関数に名前を付けます。匿名関数は避けてください。これは特に node アプリをプロファイリングするときに便利です。すべての関数に名前を付けることで、メモリスナップショットをチェックする際に何を見ているのかを簡単に理解することができます。\n\n**さもないと:** コアダンプ(メモリスナップショット)を使用した本番環境の問題のデバッグは、匿名関数からのメモリ消費が大きいことに気づくと、困難になるかもしれません。\n\n<br/><br/>\n\n## ![✔] 3.6 変数、定数、関数、クラスの命名規則を使用する\n\n**TL;DR:** 定数、変数、関数の命名をするときは **_lowerCamelCase_** を使用し、クラスの命名をするときは**_UpperCamelCase_** (頭文字も大文字) を使用してください。これは、プレーンな変数/関数とインスタンス化を必要とするクラスを簡単に区別するのに役立ちます。記述的な名前を使用しますが、短くしてください。\n\n**さもないと:** JavaScript は、最初にインスタンスを作成せずにコンストラクタ（「クラス」）を直接呼び出すことができる世界で唯一の言語です。その結果、クラスと関数構造体は UpperCamelCase から始まることで区別されます。\n\n### 3.6 コード例\n\n```javascript\n// クラスには、UpperCamelCase を使用します\nclass SomeClassExample {}\n\n// const 名には const キーワードと lowerCamelCase を使用します\nconst config = {\n  key: \"value\",\n};\n\n// 変数や関数名には lowerCamelCase を使用します\nlet someVariableExample = \"value\";\nfunction doSomething() {}\n```\n\n<br/><br/>\n\n## ![✔] 3.7 let よりも const を優先してください。var はいりません\n\n**TL;DR:** `const` を使うということは、一度代入された変数は再代入できないということを意味します。`const` を優先することで、同じ変数を異なる用途に使いたくなることを防ぎ、コードをより明確にすることができます。変数を再割り当てする必要がある場合、例えば for ループの中などでは、`let` を使って宣言します。もう一つの重要な点は、`let` を使って宣言された変数は、それが定義されたブロックスコープ内でのみ利用可能であるということです。`var` はブロックスコープではなく関数スコープであり、[ES6 では使うべきではない](https://hackernoon.com/why-you-shouldnt-use-var-anymore-f109a58b9b70) ので、`const` と `let` がある以上必要ありません。\n\n**さもないと:** 頻繁に変化する変数に従うと、デバッグが非常に面倒になります。\n\n🔗 [**さらに読む: JavaScript ES6+: var、let、それとも const ?** ](https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75)\n\n<br/><br/>\n\n## ![✔] 3.8 関数の内部ではなく、まずモジュールを require する\n\n**TL;DR:** 各ファイルの先頭かつ、全ての関数の前かつ外でモジュールを require します。このシンプルなベストプラクティスは、ファイルの依存関係を簡単かつ迅速にトップに表示するのに役立つだけでなく、いくつかの潜在的な問題を回避することができます。\n\n**さもないと:** Require は Node.js によって同期的に実行されます。関数内から呼び出された場合、他のリクエストがより重要なタイミングで処理されるのをブロックすることがあります。また、require されたモジュールやそれ自身の依存関係がエラーを出してサーバをクラッシュさせてしまった場合は、できるだけ早く見つけた方が良いでしょう。関数の中からモジュールが require されている場合は早く見つけることができないかもしれません。\n\n<br/><br/>\n\n## ![✔] 3.9 ファイルに直接アクセスするのではなく、フォルダごとにモジュールを require します\n\n**TL;DR:** モジュール/ライブラリをフォルダ内で開発する場合は、モジュールの内部を公開する index.js ファイルを配置し、すべての使用者がそれを通過するようにします。これはモジュールへの「インタフェース」として機能し、約束事を破ることなく将来の変更を容易にします。\n\n**さもないと:** ファイルの内部構造や署名を変更すると、クライアントとのインタフェースが壊れてしまう可能性があります。\n\n### 3.9 コード例\n\n```javascript\n// する\nmodule.exports.SMSProvider = require(\"./SMSProvider\");\nmodule.exports.SMSNumberResolver = require(\"./SMSNumberResolver\");\n\n// 避ける\nmodule.exports.SMSProvider = require(\"./SMSProvider/SMSProvider.js\");\nmodule.exports.SMSNumberResolver = require(\"./SMSNumberResolver/SMSNumberResolver.js\");\n```\n\n<br/><br/>\n\n## ![✔] 3.10 `===` 演算子を使用する\n\n**TL;DR:** 弱い抽象的な等号演算子 `==` よりも厳密な等号演算子 `===` を優先してください。`==` は 2 つの変数を共通の型に変換した後に比較します。`===` には型変換はなく、両方の変数が同じ型で等しくなければいけません。\n\n**さもないと:** `==` 演算子で比較すると、同じでない値でも真を返すかもしれません。\n\n### 3.10 Code example\n\n```javascript\n\"\" == \"0\"; // false\n0 == \"\"; // true\n0 == \"0\"; // true\n\nfalse == \"false\"; // false\nfalse == \"0\"; // true\n\nfalse == undefined; // false\nfalse == null; // false\nnull == undefined; // true\n\n\" \\t\\r\\n \" == 0; // true\n```\n\n`===` を使用した場合、上のすべてのステートメントは false を返します。\n\n<br/><br/>\n\n## ![✔] 3.11 コールバックを避け、Async Await を使用する\n\n**TL;DR:** Node 8 LTS は Async-await を完全にサポートするようになりました。これは、コールバックやプロミスに取って代わる非同期コードの新しい扱い方です。Async-await はノンブロッキングであり、非同期コードを同期的に見せてくれます。コードに与えることができる最高の贈り物は、try-catch のようなよりコンパクトで親しみやすいコード構文を提供する async-await を使うことです。\n\n**Otherwise:** コールバックスタイルで非同期エラーを処理するのは、おそらく地獄への最速の方法です。- このスタイルでは、エラーのチェックをすべて強制し、厄介なコードの入れ子を処理し、コードの流れについての推論を困難にします。\n\n🔗[**さらに読む:** async await 1.0 のガイド](https://github.com/yortus/asyncawait)\n\n<br/><br/>\n\n## ![✔] 3.12 arrow 関数式 (=>) を使う\n\n**TL;DR:** プロミスやコールバックを受け入れる古い API を扱う場合は、async-await を使用して関数パラメータを避けることをお勧めしますが、arrow 関数はコード構造をよりコンパクトにし、ルート関数の語彙的なコンテキストを保持します。(すなわち `this` )\n\n**さもないと:** コードが長いと（ ES5 の関数では）バグが発生しやすく、読むのが面倒になります。\n\n🔗 [**さらに読む: arrow 関数を採用する時が来た**](https://medium.com/javascript-scene/familiarity-bias-is-holding-you-back-its-time-to-embrace-arrow-functions-3d37e1a9bb75)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ トップに戻る</a></p>\n\n# `4. テストと総合的な品質のプラクティス`\n\n## ![✔] 4.1 最低でも、API（コンポーネント）のテストを書く\n\n**TL;DR:** 多くのプロジェクトでは、短いタイムスケジュールが原因で自動化テストを行っていないか、または「テストプロジェクト」がコントロール不能となり廃れてしまうことがしばしばあります。そのため、優先度を決めて、書くのが最も容易であり、ユニットテストより多くのカバレッジを提供してくれる API テストから始めましょう（[Postman](https://www.getpostman.com/) のようなツールを利用して、コード無しで API テストを手作りすることもできます）。その後、リソースや時間に余裕が出てきたら、ユニットテストや DB テスト、パフォーマンステストといった発展的なタイプのテストを実施してください。\n\n**さもないと:** ユニットテストを書くことに長時間費やしても、システムカバレッジが 20％ しかないことに気づくかもしれません。\n\n<br/><br/>\n\n## ![✔] 4.2 各テスト名に 3 つの要素を含む\n\n**TL;DR:** テストを要件レベルを表現することで、コード内部をよく知らない QA エンジニアや開発者に対しても説明的であるようにしてください。テスト名には、何がテストされていて（テスト対象のユニット）、どのような状況で、どのような結果が期待されているのかを記述してください。\n\n**さもないと:** \"Add product\" という名付けられたテストが通らず、デプロイが失敗しました。これは、実際に何がうまく動作しなかったのかを示しているでしょうか？\n\n🔗 [**さらに読む: 各テスト名に 3 つの要素を含む**](./sections/testingandquality/3-parts-in-name.japanese.md)\n\n<br/><br/>\n\n## ![✔] 4.3 AAA パターンを用いてテストを構成する\n\n**TL;DR:** 上手に分けられた 3 つのセクションを利用してテストを構成してください: Arrange、Act、そして Assert (AAA) です。まず最初の部分でテストのセットアップを行い、次にテスト対象のユニットの実行、そして最後にアサーションフェーズに入ります。この構造に従うことで、コードを読む人がテストプランを理解するために頭脳の CPU を費やさないことが保証されます。\n\n**さもないと:** メインコードを理解するのに長時間費やすだけでなく、今までシンプルな部分であったはずのもの（テスト）が、脳のリソースを奪います。\n\n🔗 [**さらに読む: AAA パターンを用いてテストを構成する**](./sections/testingandquality/aaa.japanese.md)\n\n<br/><br/>\n\n## ![✔] 4.4 Linter を用いてコードの問題を検出する\n\n**TL;DR:** Linter を使用して、コードの基本的な質をチェックし、アンチパターンを早期に検出してください。テスト前に Linter を実行し、コミット前の Git-hook として追加しておけば、レビューや問題を修正するのに必要な時間を最小限に抑えることができます。[セクション 3](#3-コードスタイルのプラクティス) の「コードスタイルのプラクティス」も参考にしてください。\n\n**さもないと:** アンチパターンや脆弱性を含む可能性のあるコードを本番環境に渡してしまうかもしれません。\n\n<br/><br/>\n\n## ![✔] 4.5 グローバルなテストフィクスチャとシードを避け、テストごとにデータを追加する\n\n**TL;DR:** テスト同士が結合してしまうことを防ぎ、テストフローの理解を容易にするために、各テストは独自の DB データ行のセットを用意し、それらを利用して実行されるべきです。テストがいくつかの DB データをプルしたり、その存在を仮定する必要がある場合には、明示的にデータを追加し、他のレコードに変更を加えないようにしなければなりません。\n\n**さもないと:** テストが失敗したことによってデプロイが中止されるというシナリオを考えてみましょう。チームは貴重な時間を調査に費やし、結果として悲しい結論にたどり着きます: システムは機能していますが、テスト同士が干渉しあって、ビルドを壊しているのです。\n\n🔗 [**さらに読む: グローバルなテストフィクスチャとシードを避け、テストごとにデータを追加する**](./sections/testingandquality/avoid-global-test-fixture.japanese.md)\n\n<br/><br/>\n\n## ![✔] 4.6 脆弱性のある依存関係がないか常に検査する\n\n**TL;DR:** Express のような最も評判の良い依存関係にも、既知の脆弱性があります。これは、ビルド毎に CI において実行できる 🔗 [npm audit](https://docs.npmjs.com/cli/audit) や 🔗 [snyk.io](https://snyk.io) といったコミュニティや商用のツールを利用することで、簡単に検査することができます。\n\n**さもないと:** 専用のツールを使用せずに、コードを安全に保つには、新しい脅威についての情報を、常に追う必要があります。これは非常に面倒です。\n\n<br/><br/>\n\n## ![✔] 4.7 テストにタグをつける\n\n**TL;DR:** 異なるテストは、異なるシナリオ下において実行しなければなりません: I/O の無いクイックスモークテストは、開発者がファイルを保存したりコミットした際に実施し、完全なエンドツーエンドテストは新しいプルリクエストが出されたときに実施する、などです。これは、テストの手綱を掴んで望み通りのテストセットを実行できるように、 #cold #api #sanity といったようにキーワードでテストをタグ付けすることで実現できます。例えば、[Mocha](https://mochajs.org/) を利用して sanity テストグループを実施する方法は次の通りです: mocha --grep 'sanity'\n\n**さもないと:** 小さな変更をするたびに多くの DB クエリを実施するテストを含む全てのテストを実行することは、非常に遅く、そして開発者がテストを実行しなくなります。\n\n<br/><br/>\n\n## ![✔] 4.8 間違ったテストパターンを特定するためにテストカバレッジをチェックする\n\n**TL;DR:** [Istanbul](https://github.com/istanbuljs/istanbuljs)/[NYC](https://github.com/istanbuljs/nyc) のようなコードカバレッジツールは 3 つの理由から素晴らしいといえます: 無料で提供されている（このレポートの恩恵を受けるために努力は必要ありません）、テストカバレッジの低下を特定するのに役立つ、そして最後に、テストのミスマッチを強調してくれることです。色付けされたコードカバレッジレポートを見ることで、例えば、キャッチ句のようなテストが全く実施されていない領域（つまり、テストがハッピーパスのみテストしていて、エラー時にどのように振る舞うかをテストしていない、ということです）に気づくかもしれません。カバレッジが特定に閾値を下回ったらビルドが失敗するように設定しましょう。\n\n**さもないと:** コードの大部分がテストでカバーされていないことを教えてくれる、自動化されたメトリックが存在しないことになります。\n\n<br/><br/>\n\n## ![✔] 4.9 パッケージが古くなっていないか点検する\n\n**TL;DR:** お気に入りのツール（例えば、「npm outdated」や「[npm-check-updates](https://www.npmjs.com/package/npm-check-updates)」など）を使って、インストールされたパッケージが古くなっていることを検出し、このチェックを CI パイプラインの中に組み込み、深刻な場合にはビルドを失敗させてください。深刻な場合とは例えば、インストールされているパッケージが 5 回のパッチコミット分遅れている場合（例えば、ローカルバージョンが 1.3.1 でリポジトリバージョンが 1.3.8 である、など）や、作者によって非推奨とタグ付けされている場合などがあります。ビルドをキルして、このバージョンのデプロイを禁止してください。\n\n**さもないと:** 作者によって明示的に危険であるとタグ付けされたパッケージを、本番環境で実行することになります。\n\n<br/><br/>\n\n## ![✔] 4.10 エンドツーエンドテストのために本番に近い環境を使用する\n\n**TL;DR:** ライブデータを含むエンドツーエンド（e2e）テストは、DB のような複数の重たいサービスに依存するため、CI プロセスにおける最も弱い接続部となっていました。できる限り本番環境に近い環境を使用してください（注意: コンテンツが不足しています。「さもないと」から判断するに、docker-compose について言及されているはずです）\n\n**さもないと:** docker-compose を使用しない場合、チームは開発者のマシンを含む各テスト環境のためのテスト DB を管理し、環境によって結果に差異が出ないようにそれらすべての DB が同期された状態を保たなくてはなりません。\n\n<br/><br/>\n\n## ![✔] 4.11 静的解析ツールを使用して定期的にリファクタリングする\n\n**TL;DR:** 静的解析ツールを利用することは、客観的な視点をもたらし、コードの品質向上や保守性の維持に役立ちます。静的解析ツールを CI に追加することで、コードの臭いを発見した際にビルドを失敗させることができます。シンプルな linting に勝るポイントとしては、複数ファイルを含むコンテキストで品質を検査できること（例：重複の検出）、高度な分析を実施できること（例：コードの複雑さ）、そしてコードの問題の履歴や進行状況を追跡できることです。使用できるツールの例としては、[Sonarqube](https://www.sonarqube.org/) (2,600+ [stars](https://github.com/SonarSource/sonarqube)) と [Code Climate](https://codeclimate.com/) (1,500+ [stars](https://github.com/codeclimate/codeclimate)) の 2 つがあります。\n\n**さもないと:** コードの品質が低いと、ピカピカの新しいライブラリや最新の機能では修正できない類のバグやパフォーマンスが常に問題となります。\n\n🔗 [**さらに読む: リファクタリング！**](./sections/testingandquality/refactoring.japanese.md)\n\n<br/><br/>\n\n## ![✔] 4.12 CI プラットフォームを慎重に選択する（Jenkins vs CircleCI vs Travis vs その他すべて）\n\n**TL;DR:** 継続的インテグレーションプラットフォーム (CI/CD) は全ての品質に関わるツール（テストや lint など）をホストするので、プラグインのエコシステムが充実しているはずです。[Jenkins](https://jenkins.io/) は最大のコミュニティを持ち、非常に強力なプラットフォームであるため、多くのプロジェクトでデフォルトとして使われていましたが、複雑なセットアップと多大な学習コストが難点でした。最近では、[CircleCI](https://circleci.com) のような SaaS ツールを使用することで、CI ソリューションをセットアップすることが非常に簡単になってきました。こういったツールは、インフラ全体の管理にコストをかけることなく柔軟な CI パイプラインを構築することを可能にします。最終的には、堅牢性とスピードの間のトレードオフとなります ー 慎重にどちらを取るか選んでください。\n\n**さもないと:** ニッチなベンダーを選択すると、高度なカスタマイズが必要になった際に困るかもしれません。一方で、Jenkins を選択するとインフラのセットアップに貴重な時間を費やすことになる可能性があります。\n\n🔗 [**さらに読む: CI プラットフォームを選択する**](./sections/testingandquality/citools.japanese.md)\n\n## ![✔] 4.13 ミドルウェアを分離してテストする\n\n**TL;DR:** ミドルウェアが多くのリクエストにまたがる巨大なロジックを保持している場合は、ウェブフレームワーク全体を起動することなく、分離してテストする価値があります。これは、{req, res, next} オブジェクトをスタブ化してスパイすることで容易に達成することができます。\n\n**さもないと:** Express ミドルウェアにおけるバグ === ほぼ全てのリクエストにおけるバグ\n\n🔗 [**さらに読む: ミドルウェアを分離してテストする**](./sections/testingandquality/test-middlewares.japanese.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ トップに戻る</a></p>\n\n# `5. 本番環境移行のプラクティス`\n\n## ![✔] 5.1. モニタリング\n\n**TL;DR:** モニタリングとは、顧客よりも先に問題を発見するゲームです。– 明らかに、これは類を見ないほど重要なこととして割り当てられるべきです。市場には多くのオファーが溢れていますので、まずはあなたが守らなければならない基本的な指標を定義することから始めてみてください（私の提案はこの中にあります）。その後、追加の手の込んだ機能を確認し、すべてのボックスにチェックを入れるソリューションを選択します。ソリューションの概要については、以下の「要点」をクリックしてください。\n\n**さもないと:** 失敗 === 失望したお客さん。シンプルです。\n\n🔗 [**さらに読む: モニタリング!**](./sections/production/monitoring.japanese.md)\n\n<br/><br/>\n\n## ![✔] 5.2. スマートロギングで透明性を高める\n\n**TL;DR:** ログは、デバッグ ステートメント用のゴミ倉庫にも、アプリのストーリーを伝える美しいダッシュボードのイネーブラーにもなり得ます。1 日目からロギングプラットフォームを計画しましょう：ログをどのように収集、保存、分析するかで、必要な情報（エラー率、サービスやサーバーを介したトランザクション全体の追跡など）を実際に抽出できるようにします。\n\n**さもないと:** 推論するのが難しいブラックボックスになってしまい、追加情報を追加するためにすべてのロギングステートメントを書き直します。\n\n🔗 [**さらに読む: スマートロギングで透明性を高める**](./sections/production/smartlogging.japanese.md)\n\n<br/><br/>\n\n## ![✔] 5.3. 可能な限りのこと全て（ gzip、SSL など）をリバースプロキシに委譲する\n\n**TL;DR:** Node は gzip や SSL の終了などの CPU 負荷の高いタスクを行うのが非常に苦手です。代わりに nginx, HAproxy, クラウドベンダーのサービスのような「本物の」ミドルウェアサービスを使うべきです。\n\n**さもないと:** 貧弱なシングルスレッドは、アプリケーションコアを処理する代わりにインフラタスクを行うことに忙しくなり、パフォーマンスはそれに応じて低下します。\n\n🔗 [**さらに読む: 可能な限りのこと全て（ gzip、SSL など）をリバースプロキシに委譲する**](./sections/production/delegatetoproxy.japanese.md)\n\n<br/><br/>\n\n## ![✔] 5.4. 依存関係をロックする\n\n**TL;DR:** コードはすべての環境で同一でなければなりませんが、驚くべきことに npm はデフォルトで環境間で依存関係をドリフトさせることができます。– 様々な環境でパッケージをインストールすると、パッケージの最新のパッチバージョンを取得しようとします。これを克服するには、各パッケージの正確な (最新版ではない) バージョンを保存するように各環境に指示する npm 設定ファイル .npmrc を使用します。あるいは、より細かい制御を行うには `npm shrinkwrap` を使用してください。\\*更新: NPM5 では、依存関係はデフォルトでロックされています。新しいパッケージマネージャー、Yarn もデフォルトでカバーしてくれました。\n\n**さもないと:** QA はコードを徹底的にテストし、本番環境では異なる挙動をするバージョンを承認します。さらに悪いことに、同じクラスタ内の異なるサーバが異なるコードを実行する可能性があります。\n\n🔗 [**さらに読む: 依存関係をロックする**](./sections/production/lockdependencies.japanese.md)\n\n<br/><br/>\n\n## ![✔] 5.5. 適切なツールを使用してプロセスの稼働時間を守る\n\n**TL;DR:** プロセスが進み、失敗した時点で再起動しなければなりません。単純なシナリオでは、PM2 のようなプロセス管理ツールで十分かもしれませんが、今日の「 docker 化」された世界では、クラスタ管理ツールも考慮する必要があります。\n\n**さもないと:** 明確な戦略を持たずに何十ものインスタンスを実行し、あまりにも多くのツール（クラスタ管理、docker、PM2）を一緒に使いすぎると、DevOps のカオスにつながる可能性があります。\n\n🔗 [**さらに読む: 適切なツールを使用してプロセスの稼働時間を守る**](./sections/production/guardprocess.japanese.md)\n\n<br/><br/>\n\n## ![✔] 5.6. すべての CPU コアを利用する\n\n**TL;DR:** 基本的な形として、Node アプリは他のすべてがアイドル状態のままで、単一の CPU コア上で動作します。 Node プロセスを複製し、すべての CPU を利用するのはあなたの義務です。 – 中小規模のアプリでは、Node クラスタや PM2 を使用することができます。大規模なアプリケーションでは、Docker クラスタ( K8S や ECS など)や Linux の init システム( systemd など)をベースにしたデプロイスクリプトを使用してプロセスを複製することを検討してください。\n\n**さもないと:** あなたのアプリは、利用可能なリソースの 25％、もしくはそれ以下しか使用していない可能性が高いです(!)。一般的なサーバは 4 つ以上の CPU コアを持っていますが、 Node.js のナイーブなデプロイでは 1 つしか利用していないことに注意してください（ AWS beanstalk のような PaaS サービスを利用している場合でも!）。\n\n🔗 [**さらに読む: すべての CPU コアを利用する**](./sections/production/utilizecpu.japanese.md)\n\n<br/><br/>\n\n## ![✔] 5.7. 「メンテナンスエンドポイント」を作成する\n\n**TL;DR:** メモリ使用量や REPL などのシステム関連情報をセキュアな API で公開します。標準ツールや歴戦のツールに頼ることを強くお勧めしますが、貴重な情報や操作はコードを使った方が簡単にできるものもあります。\n\n**さもないと:** 多くの「診断デプロイ」を実行していることがわかります。– 診断目的のための情報を抽出するためだけにコードを本番環境に出荷するなど\n\n🔗 [**さらに読む: 「メンテナンスエンドポイント」を作成する**](./sections/production/createmaintenanceendpoint.japanese.md)\n\n<br/><br/>\n\n## ![✔] 5.8. APM 製品を使用してエラーやダウンタイムを発見する\n\n**TL;DR:** アプリケーションモニタリングおよびパフォーマンス製品（ APM）は、コードベースと API を積極的に測定することで、従来のモニタリングを超えて、サービスや階層間のユーザーエクスペリエンス全体を自動的に測定することができます。例えば、一部の APM 製品では、エンドユーザー側でロードが遅すぎるトランザクションを強調表示しながら、根本的な原因を示唆することができます。\n\n**さもないと:** API のパフォーマンスやダウンタイムの測定に多大な労力を費やすことになるかもしれません。実世界のシナリオで最も遅いコード部分はどれか、それが UX にどのように影響するのか、おそらくあなたは意識することはないでしょう。\n\n🔗 [**さらに読む: APM 製品を使用してエラーやダウンタイムを発見する**](./sections/production/apmproducts.japanese.md)\n\n<br/><br/>\n\n## ![✔] 5.9. コードを本番に即したものにする\n\n**TL;DR:** ゴールを意識してコードを作成し、1 日目から制作計画を立てます。ちょっと漠然としているように聞こえるので、生産保守と密接に関係する開発のヒントをいくつかまとめてみました(下の Gist をクリックしてください)。\n\n**さもないと:** 世界チャンピオンの IT/DevOps の男でも、下手に書かれたシステムを救うことはできません。\n\n🔗 [**さらに読む: コードを本番に即したものにする**](./sections/production/productioncode.japanese.md)\n\n<br/><br/>\n\n## ![✔] 5.10. メモリ使用量を測定してガードする\n\n**TL;DR:** Node.js はメモリとの関係で物議を醸しています: v8 エンジンはメモリ使用量にソフトな制限(1.4 GB )があり、Node のコードにはメモリリークの経路が知られています。– そのため、Node のプロセスメモリを監視することは必須です。小さなアプリでは、シェルコマンドを使って定期的にメモリを測定することができますが、中規模以上のアプリでは、メモリ監視を堅牢な監視システムに組み込むことを検討してください。\n\n**さもないと:** あなたのプロセスメモリは、[Walmart](https://www.joyent.com/blog/walmart-node-js-memory-leak) で起こったように、1 日に 10MB もリークするかもしれません。\n\n🔗 [**さらに読む: メモリ使用量を測定してガードする**](./sections/production/measurememory.japanese.md)\n\n<br/><br/>\n\n## ![✔] 5.11. フロントエンドの資産を Node から取り出す\n\n**TL;DR:** 専用のミドルウェア (nginx, S3, CDN) を使用してフロントエンドのコンテンツを提供します。なぜなら、シングルスレッドモデルのため、多くの静的ファイルを扱う場合、Node のパフォーマンスは非常に痛手を受けるからです。\n\n**さもないと:** あなたの Node のシングルスレッドは、何百もの html/images/angular/react ファイルのストリーミングに忙殺され、本来の目的のために生まれたタスクにすべてのリソースを確保することができません。– 動的コンテンツの提供\n\n🔗 [**さらに読む: フロントエンドの資産を Node から取り出す**](./sections/production/frontendout.japanese.md)\n\n<br/><br/>\n\n## ![✔] 5.12. ステートレスのままで、ほぼ毎日サーバーを停止させる\n\n**TL;DR:** 任意のタイプのデータ（ユーザーセッション、キャッシュ、アップロードされたファイルなど）を外部データストア内に保存します。定期的にサーバを「停止する」ことを検討するか、ステートレスな動作を明示的に行う「サーバレス」プラットフォーム（AWS Lambda など）を使用することを検討してください。\n\n**Otherwise:** 特定のサーバーで障害が発生すると、障害のあるマシンを停止する代わりに、アプリケーションのダウンタイムが発生します。さらに、特定のサーバーに依存しているため、スケーリングアウトの弾力性はより困難になります。\n\n🔗 [**さらに読む: ステートレスのままで、ほぼ毎日サーバーを停止させる**](./sections/production/bestateless.japanese.md)\n\n<br/><br/>\n\n## ![✔] 5.13. 脆弱性を自動的に検出するツールを使用する\n\n**TL;DR:** Express のような最も評判の良い依存関係にも、(時折)システムを危険にさらす既知の脆弱性があります。脆弱性を常にチェックして警告するコミュニティや商用ツール（ローカルまたは GitHub）を使えば簡単に手なずけることができ、いくつかはすぐにパッチを当てることもできます。\n\n**さもないと:** 専用のツールを使用せずに脆弱性からコードをクリーンに保つには、新しい脅威についてのオンライン出版物を常にフォローする必要があります。とても面倒です。\n\n🔗 [**さらに読む: 脆弱性を自動的に検出するツールを使用する**](./sections/production/detectvulnerabilities.japanese.md)\n\n<br/><br/>\n\n## ![✔] 5.14. 各ログステートメントにトランザクション ID を割り当てる\n\n**TL;DR:** transaction-id: {任意の値} で、単一のリクエスト内の各ログエントリに同じ識別子を割り当てます。そうすることで、ログのエラーを検査する際に、前後に何が起こったかを簡単に結論付けることができます。残念ながら、非同期の性質上、これを Node で実現するのは容易ではありません。内部のコード例を参照してください。\n\n**さもないと:** – 前に何が起こったのか – というコンテキストなしでプロダクションのエラーログを見ると、問題の原因を究明するのが非常に難しくなり、時間がかかります。\n\n🔗 [**さらに読む: 各ログ文に 'TransactionId' を割り当てる**](./sections/production/assigntransactionid.japanese.md)\n\n<br/><br/>\n\n## ![✔] 5.15. NODE_ENV=production を設定する\n\n**TL;DR:** 環境変数 NODE_ENV を「production」または「development」に設定して、本番環境での最適化を有効にするかどうかのフラグを立てます。– 多くの npm パッケージが現在の環境を判断し、本番用にコードを最適化します。\n\n**さもないと:** この単純なプロパティを省略すると、パフォーマンスが大きく低下する可能性があります。例えば、サーバサイドのレンダリングに Express を使用する場合、`NODE_ENV` を省略すると 3 倍も遅くなります。\n\n🔗 [**さらに読む: NODE_ENV=production を設定する**](./sections/production/setnodeenv.japanese.md)\n\n<br/><br/>\n\n## ![✔] 5.16. 自動化された、アトミックでゼロダウンタイムのデプロイを設計する\n\n**TL;DR:** 調査によると、多くのデプロイを行うチームほど、深刻なプロダクションの問題が発生する確率が低くなることがわかっています。リスクの高い手動ステップやサービスのダウンタイムを必要としない高速で自動化されたデプロイは、デプロイプロセスを大幅に改善します。Docker と CI ツールを組み合わせることが、合理化されたデプロイのための業界標準となったため、これを使って達成する必要があるでしょう。\n\n**さもないと:** 長時間のデプロイ -> プロダクションのダウンタイムと人為的なミス -> デプロイに自信のないチーム -> デプロイ数と機能の減少\n\n<br/><br/>\n\n## ![✔] 5.17. Node.js の LTS リリースを使用する\n\n**TL;DR:** 重要なバグフィックス、セキュリティアップデート、パフォーマンスの改善を受けるために、Node.js の LTS バージョンを使用していることを確認してください。\n\n**さもないと:** 新たに発見されたバグや脆弱性は、本番環境で運用中のアプリケーションを悪用するために使用される可能性があり、アプリケーションは様々なモジュールでサポートされておらず、保守が困難になる可能性があります。\n\n🔗 [**さらに読む: Node.js の LTS リリースを使用する**](./sections/production/LTSrelease.japanese.md)\n\n<br/><br/>\n\n## ![✔] 5.18. アプリ内でログをルーティングしない\n\n**TL;DR:** ログの送信先は、アプリケーションコード内で開発者によってハードコーディングされるべきではなく、代わりに、アプリケーションが実行される実行環境によって定義されるべきです。開発者はロガーユーティリティを使って `stdout` にログを書き、実行環境 (コンテナやサーバなど) に `stdout` のストリームを適切な宛先 (Splunk, Graylog, ElasticSearch など) にパイプさせるべきです。\n\n**さもないと:** アプリケーションがログのルーティングをハンドリングする === スケールアップが難しい、ログの損失、懸念事項の分離が悪い\n\n🔗 [**さらに読む: ログルーティング**](./sections/production/logrouting.japanese.md)\n\n<br/><br/>\n\n## ![✔] 5.19. パッケージを `npm ci` でインストールする\n\n**TL;DR:** 本番環境のコードが、テストしたパッケージの正確なバージョンを使用していることを確認する必要があります。 `npm ci` を実行して、package.json と package-lock.json に一致する依存関係のクリーンインストールを厳密に行います。このコマンドは、継続的インテグレーションパイプラインのような自動化された環境で使用することをお勧めします。\n\n**さもないと:** QA はコードを徹底的にテストし、本番環境では異なる動作をするバージョンを承認します。さらに悪いことに、同じプロダクションクラスタ内の異なるサーバが異なるコードを実行する可能性があります。\n\n🔗 [**さらに読む: npm ci を使う**](./sections/production/installpackageswithnpmci.japanese.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ トップに戻る</a></p>\n\n# `6. セキュリティのプラクティス`\n\n<div align=\"center\">\n<img src=\"https://img.shields.io/badge/OWASP%20Threats-Top%2010-green.svg\" alt=\"54 items\"/>\n</div>\n\n## ![✔] 6.1. linter のセキュリティルールを受け入れる\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20XSS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** [eslint-plugin-security](https://github.com/nodesecurity/eslint-plugin-security) のようなセキュリティ関連の linter プラグインを利用して、セキュリティの脆弱性や問題をできる限り早く、できればコーディング段階で捕まえてください。これにより、eval の使用や子プロセスの呼び出し、（ユーザー入力などの）文字列リテラルを持つモジュールのインポートなど、セキュリティ上の弱点をキャッチするのに役立ちます。下記の「さらに読む」をクリックして、セキュリティ linter によって捕捉されるコード例を参照してください。\n\n**さもなければ:** 開発時には単純なセキュリティ上の弱点だったかもしれないものが、本番環境では大きな問題となります。同様に、プロジェクトが一貫したコードセキュリティプラクティスに従わない場合もあり、脆弱性が入り込んだり、リモートリポジトリに機密情報がコミットされたりする可能性があります。\n\n🔗 [**さらに読む: Lint ルール**](./sections/security/lintrules.japanese.md)\n\n<br/><br/>\n\n## ![✔] 6.2. ミドルウェアを使用して同時リクエストを制限する\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** DOS 攻撃はとても非常に有名で、比較的簡単に実行することができます。クラウドのロードバランサーやファイアウォール、nginx、[rate-limiter-flexible](https://www.npmjs.com/package/rate-limiter-flexible) パッケージなどの外部サービス、または（小規模で重要度の低いアプリケーションの場合は）レートリミットミドルウェア（[express-rate-limit](https://www.npmjs.com/package/express-rate-limit) など）などを使用して、レートリミットを実装してください。\n\n**さもないと:** アプリケーションは攻撃を受ける可能性があり、結果としてユーザーに不十分なサービスを提供したり、サービス停止をしなければならない状況に陥ります。\n\n🔗 [**さらに読む: レートリミットの実装**](./sections/security/limitrequests.japanese.md)\n\n<br/><br/>\n\n## ![✔] 6.3 設定ファイルからシークレットを抽出する、もしくはパッケージを利用して暗号化する\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A3:Sensitive%20Data%20Exposure%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 設定ファイルやソースコードに平文でシークレットを格納してはいけません。代わりに、Vault 製品や Kubernetes/Docker シークレット、環境変数のようなシークレット管理システムを利用してください。仕方なく、ソースコントロールにシークレットを格納する場合は、暗号化して管理（キーのローリング、有効期限の設定、監査など）をする必要があります。誤ってシークレットをコミットしないように、pre-commit/push hooks を利用してください。\n\n**さもないと:** ソースコントロールは、たとえプライベートリポジトリであっても誤ってパブリックになる可能性があり、その時点で全てのシークレットが公開されてしまいます。外部サービスに与えられたソースコントロールへのアクセス権限は、関連するシステム（データベース、API、その他サービスなど）へのアクセス権限をうっかり与えてしまうことがあります。\n\n🔗 [**さらに読む: シークレット管理**](./sections/security/secretmanagement.japanese.md)\n\n<br/><br/>\n\n## ![✔] 6.4. O/R マッパ/ODM ライブラリを使用してクエリインジェクション脆弱性を防ぐ\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** SQL/NoSQL インジェクションやその他の悪意ある攻撃を防ぐために、データをエスケープしたり、名前付きやインデックス付きのパラメータ化されたクエリをサポートしていたり、ユーザー入力が期待する型となっているか検証してくれる O/R マッパ/ODM やデータベースライブラリを活用してください。JavaScript のテンプレート文字列や文字列の結合を使用して値をクエリに挿入してはいけません。これはアプリケーションに広範囲の脆弱性を与えます。全ての評判の良い Node.js データアクセスライブラリ（[Sequelize](https://github.com/sequelize/sequelize), [Knex](https://github.com/tgriesser/knex), [mongoose](https://github.com/Automattic/mongoose) など）はインジェクション攻撃に対してあらかじめ対策されています。\n\n**さもないと:** 未検証またはサニタイズされていないユーザー入力は、MongoDB のような NoSQL データベースで作業している際にオペレーターインジェクションを招きますし、適切なサニタイズシステムまたは O/R マッパ を利用しないことは容易に SQL インジェクション攻撃を招き、多大な脆弱性を生みます。\n\n🔗 [**さらに読む: ORM/ODM ライブラリを使用してクエリインジェクション脆弱性を防ぐ**](./sections/security/ormodmusage.japanese.md)\n\n<br/><br/>\n\n## ![✔] 6.5. 一般的なセキュリティベストプラクティス集\n\n**TL;DR:** Node.js とは直接関係のないセキュリティに関するアドバイス集です ー Node における実装は他の言語とあまり違いはありません。さらに読むをクリックして、読み進めてください。\n\n🔗 [**さらに読む: 一般的なセキュリティベストプラクティス**](./sections/security/commonsecuritybestpractices.japanese.md)\n\n<br/><br/>\n\n## ![✔] 6.6. セキュリティ強化するために HTTP レスポンスヘッダを調整する\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** クロスサイトスクリプティング（XSS）やクリックジャッキング、その他の悪意のある攻撃などの一般的な攻撃を攻撃者が行うことを防ぐために、アプリケーションは安全なヘッダを使用するべきです。これらは [helmet](https://www.npmjs.com/package/helmet) のようなモジュールを使って簡単に設定することができます。\n\n**さもないと:** 攻撃者がアプリケーションユーザーに対して直接攻撃を行い、甚大なセキュリティ脆弱性につながる可能性があります。\n\n🔗 [**さらに読む: アプリケーションでセキュアなヘッダーを利用する**](./sections/security/secureheaders.japanese.md)\n\n<br/><br/>\n\n## ![✔] 6.7. 定期的に、そして自動的に脆弱性のある依存関係を検査する\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Known%20Vulnerabilities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** npm のエコシステムでは、プロジェクトにおいて多くの依存関係があることが一般的です。新たな脆弱性が発見された場合には、依存関係を常にチェックしておくべきです。[npm audit](https://docs.npmjs.com/cli/audit) や [snyk](https://snyk.io/) のようなツールを利用して、脆弱性のある依存関係を追跡、監視し、パッチを適用しましょう。これらのツールを CI セットアップと統合することで、本番環境にデプロイされる前に脆弱性のある依存関係を発見することができるでしょう。\n\n**さもないと:** 攻撃者がウェブフレームワークを特定して、全ての既知の脆弱性を突いてくる可能性があります。\n\n🔗 [**さらに読む: 依存性のセキュリティ**](./sections/security/dependencysecurity.japanese.md)\n\n<br/><br/>\n\n## ![✔] 6.8. パスワードの処理に Node.js の crypto ライブラリではなく Bcrypt を利用する\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** パスワードやシークレット（API キー）は、JavaScript の実装においてパフォーマンス面・セキュリティ面で優れた選択肢である `bcrypt` のようなセキュアなハッシュ＋ソルト関数を利用して保存するべきです。\n\n**さもないと:** セキュアな関数を使わずに永続化されたパスワードやシークレット情報は、ブルートフォース攻撃や辞書攻撃に弱く、結果として情報漏えいに繋がります。\n\n🔗 [**さらに読む: Bcrypt を使用する**](./sections/security/bcryptpasswords.japanese.md)\n\n<br/><br/>\n\n## ![✔] 6.9. HTML や JS、CSS の出力をエスケープする\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** ブラウザに送信された信頼されていないデータは、ただ表示される代わりに実行される可能性があり、これは一般的にクロスサイトスクリプティング（XSS）攻撃と呼ばれています。これを軽減するには、データを、実行されるべきではない純粋なコンテンツとして明示的にマークする専用のライブラリを使用します（エンコーディング、エスケープなど）。\n\n**さもないと:** 攻撃者は悪意のある JavaScript のコードを DB に保存し、それをそのまま脆弱なクライアントに送信する可能性があります。\n\n🔗 [**さらに読む: 出力をエスケープする**](./sections/security/escape-output.japanese.md)\n\n<br/><br/>\n\n## ![✔] 6.10. 受信した JSON スキーマを検証する\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7: XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A8:Insecured%20Deserialization%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 受信したリクエストの body ペイロードを検証し、期待する条件を満たすことを確認し、期待通りでない場合はすぐに失敗するようにしてください。各ルート内での面倒な検証コードの実装を避けるために、[jsonschema](https://www.npmjs.com/package/jsonschema) や [joi](https://www.npmjs.com/package/joi) のような、軽量の JSON ベースの検証ライブラリを利用するかもしれません。\n\n**さもないと:** あなたの寛大で寛容なアプローチは攻撃対象を大幅に拡大させ、攻撃者がアプリケーションをクラッシュさせるための組み合わせを見つけるまで、多くの入力を試してみるように促すことに繋がります。\n\n🔗 [**さらに読む: 受信した JSON スキーマを検証する**](./sections/security/validation.japanese.md)\n\n<br/><br/>\n\n## ![✔] 6.11. JWT のブラックリスト化をサポートする\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** JSON Web Token を（例えば [Passport.js](https://github.com/jaredhanson/passport) などを用いて）利用する場合、デフォルトでは、発行されたトークンからのアクセスを無効にする仕組みはありません。悪意のあるユーザーのアクティビティを発見したとしても、そのユーザーが有効なトークンを持っている限り、システムへのアクセスを止めることはできません。各リクエストで検証される、信頼されていないトークンのブラックリストを実装することで、この問題を緩和することができます。\n\n**さもないと:** 期限切れや、誤って配置されたトークンは、アプリケーションにアクセスしたり、トークンの所有者になりすますために、サードパーティによって悪意を持って利用される可能性があります。\n\n🔗 [**さらに読む: JSON Web Token のブラックリスト**](./sections/security/expirejwt.japanese.md)\n\n<br/><br/>\n\n## ![✔] 6.12. 認証に対するブルートフォース攻撃を阻止する\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** シンプルで強力なテクニックは、次の 2 つのメトリクスを用いて認証の試行回数を制限することです:\n\n1. 同じユーザー固有の ID/名前、そして IP アドレスからの連続失敗回数\n2. ある IP アドレスからの長い期間の失敗回数。例えば、1 日で 100 回失敗した IP アドレスをブロックする\n\n**さもないと:** 攻撃者が、アプリケーションの特権アカウントへのアクセス権を得るために、無制限の自動化されたパスワード試行を行うことができます。\n\n🔗 [**さらに読む: ログインレートリミット**](./sections/security/login-rate-limit.japanese.md)\n\n<br/><br/>\n\n## ![✔] 6.13. 非 root ユーザとして Node.js を実行する\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A5:Broken%20Access%20Access%20Control-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Node.js が無制限の権限を持った root ユーザとして実行されるという一般的なシナリオがあります。例えば、Docker コンテナにおけるデフォルトの挙動です。root ではないユーザを作成して Docker イメージに組み込む（例は以下にあります）か、\"-u username\" フラグを利用してコンテナを起動することで、非 root ユーザでプロセスを実行することが推奨されます。\n\n**さもないと:** サーバ上でスクリプトを実行することに成功した攻撃者が、ローカルマシンにおける無制限の権限を獲得してしまいます（例：iptable を変更して、攻撃者のサーバに再ルーティングする）。\n\n🔗 [**さらに読む: 非 root ユーザとして Node.js を実行する**](./sections/security/non-root-user.japanese.md)\n\n<br/><br/>\n\n## ![✔] 6.14. リバースプロキシまたはミドルウェアを使用してペイロードのサイズを制限する\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A8:Insecured%20Deserialization%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Body ペイロードが大きければ大きいほど、シングルスレッドでの処理が重くなります。これは、攻撃者にとっては、膨大なリクエストを送信（DoS/DDoS 攻撃）せずともサーバーをダウンさせることができる機会となります。エッジ（例：firewall、ELB）で受信するリクエストのボデサイズを制限する、もしくは [express body parser](https://github.com/expressjs/body-parser) を用いて小さいサイズのペイロードのみを受け付けることで、緩和してください。\n\n**さもないと:** アプリケーションは大きなリクエストを処理しなければなくなり、他の重要な仕事を完遂させることができず、パフォーマンスへの影響や DDoS 攻撃に対する脆弱性につながります。\n\n🔗 [**さらに読む: ペイロードサイズを制限する**](./sections/security/requestpayloadsizelimit.japanese.md)\n\n<br/><br/>\n\n## ![✔] 6.15. JavaScript の eval 構文を避ける\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** `eval` は、ランタイムにおいてカスタム JavaScript コードの実行を許可しているため、有害です。これは単にパフォーマンス的な懸念だけではなく、ユーザーの入力を元にした悪意のある JavaScript コードのために、重大なセキュリティ的な懸念でもあります。その他の避けるべき言語仕様は、`new Function` コンストラクタです。`setTimeout` と `setInterval` も動的な JavaScript コードに渡されるべきではありません。\n\n**さもないと:** 悪意のある JavaScript コードが `eval` やその他のリアルタイムに評価する JavaScript の関数に渡されるテキストへたどり着き、そのページにおける JavaScript の完全な権限を獲得してしまいます。この脆弱性はしばしば XSS 攻撃として顕在化します。\n\n🔗 [**さらに読む: JavaScript の eval 構文を避ける**](./sections/security/avoideval.japanese.md)\n\n<br/><br/>\n\n## ![✔] 6.16. 悪意のある RegEx がシングルスレッド実行をオーバーロードすることを防止する\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 正規表現（RegEx）は便利ですが、JavaScript アプリケーション全体、特に Node.js プラットフォームに対して真の脅威となります。テキストのユーザー入力をマッチさせることは、処理に大量の CPU サイクルを必要とするかもしれません。RegEx の処理は、10 Word を検証する単一のリクエストが 6 秒間イベントループ全体をブロックし、CPU に 🔥 を点けるほどには非効率であるかもしれません。そのため、独自の RegExp パターンを記述する代わりに [validator.js](https://github.com/chriso/validator.js) のようなサードパーティ検証パッケージを利用するか、脆弱な正規表現パターンを検出するために [safe-regex](https://github.com/substack/safe-regex) を利用するようにしましょう。\n\n**さもないと:** 下手な正規表現の記述は、イベントループを完全にブロックしてしまう正規表現 DoS 攻撃の影響を受ける可能性があります。例えば、人気のある `moment` パッケージでは、2017 年 11 月に悪意のある RegEx の使用による脆弱性が発見されています。\n\n🔗 [**さらに読む: 悪質な RegEx を防止する**](./sections/security/regex.japanese.md)\n\n<br/><br/>\n\n## ![✔] 6.17. 変数を利用してモジュールを読み込むことを避ける\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** ユーザー入力が起因となって問題が生じる恐れがあるため、パラメータとして与えられたパスを用いて他のファイルを require/import しないようにしてください。この原則は、ユーザー入力に基づいた動的な変数を用いた、一般的なファイルアクセス（`fs.readFile()` など）やその他のセンシティブなリソースアクセスにも拡張することができます。[Eslint-plugin-security](https://www.npmjs.com/package/eslint-plugin-security) linter はそのようなパターンを検知して、早期に警告を出すことができます。\n\n**さもないと:** 悪意のあるユーザー入力は、既存のシステムファイルに、前にファイルシステムにアップロードされたファイルのような改変されたファイルを要求したり、既存のシステムファイルにアクセスするために利用されるパラメータを操作する可能性があります。\n\n🔗 [**さらに読む: 安全なモジュール読み込み**](./sections/security/safemoduleloading.japanese.md)\n\n<br/><br/>\n\n## ![✔] 6.18. サンドボックス内で安全でないコードを実行する\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** ランタイムにおいて与えられた外部のコード（プラグインなど）を実行するようなタスクを行うとき、独立していて、メインコードをプラグインから保護する任意の「サンドボックス」実行環境を使用してください。これは、専用のプロセス（`cluster.fork()` など）やサーバーレス環境、またはサンドボックスとして動作する専用の npm パッケージを使用することで実現できます。\n\n**さもないと:** プラグインは、無限ループやメモリーオーバーロード、センシティブなプロセスの環境変数へのアクセスなど、あらゆる手段を通じて攻撃可能となります。\n\n🔗 [**さらに読む: サンドボックス内で安全でないコードを実行する**](./sections/security/sandbox.japanese.md)\n\n<br/><br/>\n\n## ![✔] 6.19. 子プロセスで処理を行う場合は特別な注意を払う\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 可能なら子プロセスの仕様を避け、それでも使用する必要がある場合には、入力を検証しサニタイズすることで、シェルインジェクション攻撃を軽減してください。属性の集合を持つ単一コマンドのみを実行し、シェルパラメータ拡張を許可しない `child_process.execFile` の使用を優先してください。\n\n**さもないと:** 子プロセスを愚直に利用することは、サニタイズされていないシステムコマンドに渡される悪意のあるユーザー入力が原因となって、結果としてリモートからのコマンド実行、またはシェルインジェクション攻撃を受けることにつながります。\n\n🔗 [**さらに読む: 子プロセスで処理を行う場合は注意する**](./sections/security/childprocesses.japanese.md)\n\n<br/><br/>\n\n## ![✔] 6.20. エラーの詳細をクライアントから隠す\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 統合されている express のエラーハンドラはデフォルトでエラーの詳細を隠します。しかし、（多くの人がベストプラクティスだと考えている）カスタムエラーオブジェクトを使用して独自のエラー処理ロジックを実装する可能性は大いにあります。その場合、クライアントに、機密なアプリケーション詳細を含む恐れのあるエラーオブジェクト全体を返さないようにしてください。\n\n**さもないと:** 攻撃者によって悪用される可能性のある、サーバファイルのパス、使用中のサードパーティモジュール、アプリケーションのその他内部ワークフローなど、機密性の高いアプリケーションの詳細情報が、スタックトレース内に残された情報から漏洩する可能性があります。\n\n🔗 [**さらに読む: エラーの詳細をクライアントから隠す**](./sections/security/hideerrors.japanese.md)\n\n<br/><br/>\n\n## ![✔] 6.21. npm や Yarn に 2 要素認証（2FA）を設定する\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 開発におけるどのステップも、MFA（多要素認証）で保護されるべきです。npm/Yarn は開発者のパスワードに触れることができる攻撃者にとって絶好の機会となります。開発者の認証情報を利用して、プロジェクトやサービスにおいて広くインストールされている攻撃者は悪意のあるコードを注入することができます。もしパブリックに公開されている場合は、ウェブ全体にまで及ぶかもしれません。npm において 2 要素認証を設定することで、攻撃者がパッケージコードを改ざんする可能性はほぼゼロになります。\n\n**さもないと:** [Have you heard about the eslint developer whose password was hijacked?（パスワードがハイジャックされた eslint 開発者の話を聞いたことがありますか？）](https://medium.com/@oprearocks/eslint-backdoor-what-it-is-and-how-to-fix-the-issue-221f58f1a8c8)\n\n<br/><br/>\n\n## ![✔] 6.22. セッションミドルウェアの設定を変更する\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** それぞれの Web フレームワークや技術には、既知の弱点があります - 攻撃者に対してどの Web フレームワークを利用しているかを伝えることは、攻撃者にとって大きな助けになることです。セッションミドルウェアのデフォルトの設定を利用することは、`X-Powered-By` ヘッダー同様に、アプリケーションをモジュールやフレームワーク固有のハイジャック攻撃にさらす可能性があります。技術スタック（例：Node.js、express など）を識別したり、明らかにするものは極力隠すようにしてください。\n\n**さもないと:** Cookie は安全でないコネクションを通じて送信される恐れがあり、攻撃者はセッション識別子を利用して背後にある Web アプリケーションフレームワークや、モジュール固有の脆弱性を特定する可能性があります。\n\n🔗 [**さらに読む: クッキー（Cookie）とセッションの安全性**](./sections/security/sessions.japanese.md)\n\n<br/><br/>\n\n## ![✔] 6.23. 明示的にプロセスがいつクラッシュすべきか設定することで、DoS 攻撃を回避する\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** エラーが処理されなかった場合、Node プロセスはクラッシュします。多くのベストプラクティスは、たとえエラーがキャッチされ処理されたとしても、exit することを推奨しています。例えば、Express は、非同期エラーが発生すると、ルートをキャッチ節でラップしない限りクラッシュします。これは、どんな入力がプロセスをクラッシュさせるのかを認識し、繰り返し同様のリクエストを送信する攻撃者にとって絶好の攻撃スポットを提供します。この問題に対する即席の対策はありませんが、いくつかのテクニックはペインを軽減することができます: 処理されていないエラーによってプロセスがクラッシュした場合は常に重大な警告を出す、入力を検証して無効なユーザー入力によるプロセスのクラッシュを回避する、すべてのルートをキャッチで囲み、（グローバルに発生した場合とは対象的に）リクエスト内でエラーが発生した際にクラッシュしないように考慮する、などです。\n\n**さもないと:** これはあくまで経験に基づいた推測ですが、多くの Node.js アプリケーションを見たときに、すべての POST リクエストにおいて空の JSON ボディを渡そうとすると、一部のアプリケーションはクラッシュしてしまいます。その時点で、同じリクエストを繰り返し送信することによって簡単にアプリケーションを停止させることができます。\n\n<br/><br/>\n\n## ![✔] 6.24. 安全でないリダイレクトを防ぐ\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** ユーザー入力を検証しないリダイレクトは、攻撃者がフィッシング詐欺をしたり、ユーザーの認証情報を盗んだり、その他の悪質なアクションを実行することを可能にします。\n\n**さもないと:** もし攻撃者が、外部のユーザーから与えられた入力を検証していないことを発見した場合、特別に作成されたリンクをフォーラムやソーシャルメディア、その他のパブリックな場所に投稿してユーザーにクリックさせることで、この脆弱性を悪用する恐れがあります。\n\n🔗 [**さらに読む: 安全でないリダイレクトを防ぐ**](./sections/security/saferedirects.japanese.md)\n\n<br/><br/>\n\n## ![✔] 6.25. npm レジストリへのシークレットの公開を避ける\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** 誤ってシークレットをパブリック npm レジストリに公開してしまうリスクを回避するように、注意を払ってください。`.npmignore` ファイルを利用して、特定のファイルやフォルダをブラックリスト化したり、`package.json` 内の `files` 配列をホワイトリストとして利用することができます。\n\n**さもないと:** プロジェクトの API キーやパスワード、その他のシークレットが公開され、その情報を目にしたすべての人に悪用されることで、結果として金銭的な損失、なりすまし、その他リスクに繋がってしまいます。\n\n🔗 [**さらに読む: シークレットの公開を避ける**](./sections/security/avoid_publishing_secrets.japanese.md)\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ トップに戻る</a></p>\n\n# `7. Draft: パフォーマンスのプラクティス`\n\n## Our contributors are working on this section. [Would you like to join?](https://github.com/goldbergyoni/nodebestpractices/issues/256)\n\n<br/><br/>\n\n## ![✔] 7.1. イベントループをブロックしない\n\n**TL;DR:** CPU 集約的なタスクは、主にシングルスレッドのイベントループをブロックし、専用のスレッド、プロセス、またはコンテキストに基づいて別の技術にそれらをオフロードするため、避けてください。\n\n**さもないと:** イベントループがブロックされると、Node.js は他のリクエストを処理することができなくなり、同時接続ユーザーの遅延を引き起こします。**3000 人のユーザーがレスポンスを待っていて、コンテンツを提供する準備ができていたとしても、1 つのリクエストがサーバからの結果のディスパッチをブロックしていしまいます**\n\n🔗 [**さらに読む: イベントループをブロックしない**](./sections/performance/block-loop.japanese.md)\n\n<br /><br /><br />\n\n## ![✔] 7.2. Lodash のようなユーザーランドのユーティリティよりも、ネイティブの JS メソッドを選ぶ\n\n**TL;DR:** ネイティブメソッドよりも `lodash` や `underscore` のようなユーティリティライブラリを使う方が、不要な依存関係やパフォーマンスの低下につながるため、よりペナルティが大きいことがよくあります。\n新しい ES 標準と一緒に新しい V8 エンジンが導入されたことで、ネイティブメソッドが改善され、ユーティリティライブラリよりも約 50％ のパフォーマンスが向上したことを覚えておいてください。\n\n**さもないと:** **すでに**利用可能なものを単純に使用できたり、いくつかのファイルと引き換えに、数行で処理することができるような、パフォーマンスの低いプロジェクトを維持しなければならないでしょう。\n\n🔗 [**さらに読む: ユーザーランドなユーティリティよりもネイティブを使用する**](./sections/performance/nativeoverutil.japanese.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ トップに戻る</a></p>\n\n# `8. Docker のプラクティス`\n\n🏅 [Bret Fisher](https://github.com/BretFisher)氏からは、次のような実践を多く学ぶことができました。感謝します。\n\n<br/><br/>\n\n## ![✔] 8.1 マルチステージビルドを使用して、より無駄のない、より安全な Docker イメージを構築する\n\n**TL;DR:** マルチステージビルドを使用して、必要な本番環境のアーティファクトだけをコピーします。多くのビルド時の依存関係やファイルは、アプリケーションの実行には必要ありません。マルチステージビルドでは、これらのリソースをビルド中に使用することができ、ランタイム環境には必要なものだけが含まれています。マルチステージビルドは、過剰な負荷とセキュリティの脅威を取り除く簡単な方法です。\n\n**さもないと:** イメージが大きくなるとビルドとリリースに時間がかかり、ビルド専用ツールには脆弱性が含まれている可能性があり、ビルド段階でのみ使用されるシークレット情報が漏洩する可能性があります。\n\n### マルチステージビルド用の Dockerfile の例\n\n```dockerfile\nFROM node:14.4.0 AS build\n\nCOPY . .\nRUN npm ci && npm run build\n\n\nFROM node:slim-14.4.0\n\nUSER node\nEXPOSE 8080\n\nCOPY --from=build /home/node/app/dist /home/node/app/package.json /home/node/app/package-lock.json ./\nRUN npm ci --production\n\nCMD [ \"node\", \"dist/app.js\" ]\n```\n\n🔗 [**さらに読む: マルチステージビルドを使用する**](./sections/docker/multi_stage_builds.japanese.md)\n\n<br /><br /><br />\n\n## ![✔] 8.2. 'node' コマンドを使用して、npm start 避けた Bootstrap\n\n**TL;DR:** アプリの起動には `CMD ['node','server.js']` を使用し、OS のシグナルをコードに渡さない npm スクリプトの使用は避けてください。これにより、子プロセス、シグナル処理、グレースフルシャットダウン、ゾンビプロセスの問題を防ぐことができます。\n\n**さもないと:** シグナルが渡されない場合、あなたのコードはシャットダウンについて通知されることはありません。これがなければ、適切に閉じる機会を失い、現在のリクエストやデータを失う可能性があります。\n\n[**さらに読む: node コマンドを使用して 、npm の起動を避けた Bootstrap コンテナ**](./sections/docker/bootstrap-using-node.japanese.md)\n\n<br /><br /><br />\n\n## ![✔] 8.3. レプリケーションとアップタイムの扱いを Docker ランタイムに任せる\n\n**TL;DR:** Docker ランタイムオーケストレーター（Kubernetes など）を使用する場合は、中間プロセスマネージャやプロセスを複製するカスタムコード（PM2、Cluster モジュールなど）を使用せずに、Node.js プロセスを直接呼び出します。ランタイムプラットフォームは、配置の決定を行うためのデータ量と可視性が最も高く、必要とされるプロセスの数、それらをどのように分散させ、クラッシュが発生した場合にどうすればよいかを最もよく知っています。\n\n**さもないと:** リソース不足でクラッシュし続けるコンテナは、プロセスマネージャによって無期限に再起動されてしまいます。Kubernetes がそれを認識していれば、別の余裕のあるインスタンスに移すことができます。\n\n🔗 [**さらに読む: プロセスを再起動と複製を Docker オーケストレーターに任せる**](./sections/docker/restart-and-replicate-processes.japanese.md)\n\n<br/><br /><br />\n\n## ![✔] 8.4. .dockerignore を使用してシークレット情報の漏洩を防ぐ\n\n**TL;DR**: 一般的な秘密ファイルや開発成果物をフィルタリングする `.dockerignore` ファイルを含めてください。そうすることで、秘密がイメージに漏れるのを防ぐことができるかもしれません。ボーナスとして、ビルド時間が大幅に短縮されます。また、すべてのファイルを再帰的にコピーするのではなく、何を Docker にコピーするかを明示的に選択するようにしてください。\n\n**さもないと**: `.env`, `.aws`, `.npmrc` のような共通の個人秘密ファイルは、イメージにアクセスできる人全員に共有されます (例: Docker リポジトリ)。\n\n🔗 [**さらに読む: .dockerignore を使用する**](./sections/docker/docker-ignore.japanese.md)\n\n<br /><br /><br />\n\n## ![✔] 8.5. 本番前に依存関係をクリーンアップする\n\n**TL;DR:** ビルドやテストのライフサイクルの中で Dev-Dependencies が必要になることもありますが、最終的には本番に出荷されるイメージは、開発の依存関係を最小限に抑え、クリーンなものにしなければなりません。このようにすることで、必要なコードのみが出荷され、潜在的な攻撃の量 (すなわち攻撃の表面) が最小限に抑えられることが保証されます。マルチステージビルドを使用する場合 (専用の箇条書きを参照)、最初にすべての依存関係をインストールし、最後に `npm ci --production` を実行することでこれを実現できます。\n\n**さもないと:** 悪名高い npm のセキュリティ侵害の多くは開発パッケージ内で発見されました (例: [eslint-scope](https://eslint.org/blog/2018/07/postmortem-for-malicious-package-publishes)\n\n🔗 さらに読む: [開発依存性の除去](./sections/docker/install-for-production.japanese.md)\n\n<br /><br /><br />\n\n## ![✔] 8.6. シャットダウンをスマートに、そしてグレースフルに\n\n**TL;DR:** プロセス SIGTERM イベントを処理し、既存のすべての接続とリソースをクリーンアップします。これは進行中のリクエストに応答している間に行う必要があります。Docker 化されたランタイムでは、コンテナのシャットダウンは珍しいイベントではなく、むしろルーチン作業の一部として頻繁に発生します。これを実現するためには、いくつかの可動部分をオーケストレーションするための思慮深いコードが必要です: ロードバランサ、キープアライブ接続、HTTP サーバ、その他のリソースです。\n\n**さもないと:** 即座に kill してしまうことは、何千人もの失望したユーザーに対応しないことを意味します。\n\n🔗 [**さらに読む: グレースフルシャットダウン**](./sections/docker/graceful-shutdown.japanese.md)\n\n<br /><br /><br />\n\n## ![✔] 8.7. Docker と v8 の両方を使ってメモリ制限を設定する\n\n**TL;DR:** Docker と JavaScript のランタイムフラグの両方を使用して、常にメモリ制限を設定してください。Docker の制限は、コンテナ配置の思慮深い判断をするために必要であり、--v8 のフラグ max-old-space は、GC を時間通りにキックオフし、メモリ使用率の低下を防ぐために必要です。実質的には、v8 の古いスペースメモリをコンテナの制限値より少しだけ小さく設定します。\n\n**さもないと:** docker の定義は、思慮深いスケーリングの決定を行い、他の市民を飢えさせないようにするために必要です。v8 の制限を定義しないと、コンテナリソースを十分に利用できません。 - 明示的な指示がないと、ホストリソースの ~50-60％ を利用するときにクラッシュします。\n\n🔗 [**さらに読む: Docker のみを使用してメモリ制限を設定する**](./sections/docker/memory-limit.japanese.md)\n\n<br /><br /><br />\n\n## ![✔] 8.8. 効率的なキャッシュを計画する\n\n**TL;DR:** 正しく行えば、ほぼ瞬時にキャッシュから Docker イメージ全体をリビルドすることができます。あまり更新されない処理は Dockerfile の上の方に記述し、更新が多い処理（アプリケーションのコードなど）は下の方に記述するべきです。\n\n**さもないと:** Docker のビルドが非常に長くなり、小さな変更をした場合でも多くのリソースを消費することになります。\n\n🔗 [**さらに読む: キャッシュを活用してビルド時間を短縮する**](./sections/docker/use-cache-for-shorter-build-time.japanese.md)\n\n<br /><br /><br />\n\n## ![✔] 8.9. `latest` タグは避け、明示的なイメージのリファレンスを使用する\n\n**TL;DR:** 明示的なイメージダイジェスト、またはバージョンラベルを指定し、`latest` を参照しないようにしてください。開発者はしばしば、`latest` タグを指定することでリポジトリ内の最新のイメージが提供されると思い込みがちですが、そうではありません。ダイジェスト（digest）を利用することで、サービスのすべてのインスタンスが全く同じコードを実行していることが保証されます。\n\nさらに、イメージタグを参照することは、決定論的インストールにおいてイメージタグを頼りにすることができないために、ベースイメージが変更される可能性があることを意味します。代わりに、決定論的なインストールが想定される場合には、SHA256 ダイジェストを使用して正確なイメージを参照することができます。\n\n**さもないと:** 破壊的変更を含むベースイメージの新しいバージョンが本番環境にデプロイされ、意図しないアプリケーションの挙動を引き起こす可能性があります。\n\n🔗 [**さらに読む: イメージタグを理解して「latest」タグを注意して使う**](./sections/docker/image-tags.japanese.md)\n\n<br /><br /><br />\n\n## ![✔] 8.10. 小さな Docker ベースイメージを優先する\n\n**TL;DR:** 大きなイメージは、脆弱性にさらされる可能性を高め、リソースの消費量を増加させます。Slim や Alpine Linux のような、スリムな Docker イメージを使うことで、この問題を軽減することができます。\n\n**さもないと:** イメージのビルド、プッシュ、プルに時間を要し、未知の攻撃の因子が悪意のあるアクターによって使用され、より多くのリソースが消費されます。\n\n🔗 [**さらに読む: 小さなイメージを優先する**](./sections/docker/smaller_base_images.japanese.md)\n\n<br /><br /><br />\n\n## ![✔] 8.11. ビルド時のシークレットをクリーンアウトし、引数にシークレットを含めることを避ける\n\n**TL;DR:** Docker のビルド環境からシークレットが漏洩することを避けてください。Docker イメージは一般的に、 CI や本番環境ほどサニタイズされていないレジストリといった複数の環境で共有されます。典型例としては、通常 dockerfile に引数として渡される npm トークンがあります。このトークンは必要となったタイミング以降も残り続け、攻撃者がプライベート npm レジストリにアクセスすることを無期限に許可することになります。これは、シークレットを `.npmrc` のようなファイルにコピーしてマルチステージビルドを用いてそれを削除する（ビルド履歴も削除するべきであることに注意してください）か、トレースを残さない Docker build-kit のシークレット機能を利用することで回避することができます。\n\n**さもないと:** CI と docker レジストリへのアクセス権限を持っている人は誰でも、おまけとして貴重な組織の情報にアクセスできてしまいます。\n\n🔗 [**さらに読む: ビルド時のシークレットをクリーンアウトする**](./sections/docker/avoid-build-time-secrets.japanese.md)\n\n<br /><br /><br />\n\n## ![✔] 8.12. イメージをスキャンして多層な脆弱性をチェックする\n\n**TL;DR:** コード依存関係の脆弱性をチェックすることに加えて、プロダクションで利用される最終的なイメージもスキャンするようにしてください。Docker イメージスキャナはコード依存関係だけでなく、OS のバイナリもチェックします。この E2E セキュリティスキャンはより多くの領域をカバーし、ビルド中に悪者が悪い因子を注入していないことを確認します。そのため、デプロイ前の最後のステップとしてこれを実行することをおすすめします。CI/CD プラグインも提供している、無料または商用のスキャナがいくつか存在します。\n\n**さもないと:** コードは脆弱性から完全に脆弱性から解放されているかもしれませんが、アプリケーションで一般的に使用されている OS レベルのバイナリ（例：OpenSSL、TarBall）の脆弱性が原因となって、ハッキングされる可能性が依然としてあります。\n\n🔗 [**さらに読む: プロダクションの前にイメージ全体をスキャンする**](./sections/docker/scan-images.japanese.md)\n\n<br /><br /><br />\n\n## ![✔] 8.13 NODE_MODULE キャッシュをクリーンアップする\n\n**TL;DR:** コンテナに依存関係をインストールした後は、ローカルのキャッシュを削除してください。今後のインストールを高速化することを目的として依存関係を複製しても、意味はありません - Docker イメージは不変です。一行のコードで、数十 MB（通常は画像サイズの 10~50％）を削ることができます。\n\n**さもないと:** 使用されないファイルが原因で、サイズが 3 割増のイメージがプロダクションにデプロイされることになります。\n\n🔗 [**さらに読む: NODE_MODULE キャッシュをクリーンアップする**](./sections/docker/clean-cache.japanese.md)\n\n<br /><br /><br />\n\n## ![✔] 8.14. 一般的な Docker のプラクティス\n\n**TL;DR:** Node.js とは直接関係の無い、Docker に関するアドバイス集です - Node における実装は他の言語とあまり変わりません。「さらに読む」から読み進めてください。\n\n🔗 [**さらに読む: 一般的な Docker のプラクティス**](./sections/docker/generic-tips.japanese.md)\n\n<br/><br /><br />\n\n## ![✔] 8.15. Dockerfile を lint する\n\n**TL;DR:** Dockerfile を linting することは、ベストプラクティスとは異なってしまっている Dockerfile の問題点を特定するための重要なステップです。Docker 専用の linter を使って潜在的な欠落をチェックすることで、パフォーマンスとセキュリティの改善可能箇所を容易に特定することができ、無駄な時間を削り、またプロダクションコードにおけるセキュリティの問題から解放してくれます。\n\n**さもないと:** Dockerfile の作者が誤って root を本番ユーザーにしてしまい、不明なソースリポジトリからの Docker イメージを使用してしまう、といったことが起こり得ます。これは、シンプルな litner を利用することで回避することができます。\n\n🔗 [**さらに読む: Dockerfile を lint する**](./sections/docker/lint-dockerfile.japanese.md)\n\n<br/><br /><br />\n\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ Return to top</a></p>\n\n# マイルストーン\n\nこのガイドを維持し最新に保つために、私たちはコミュニティの助けを借りながらガイドラインとベストプラクティスを常に更新、改良しています。このプロジェクトに貢献したい場合は、私たちの[マイルストーン](https://github.com/goldbergyoni/nodebestpractices/milestones)をチェックしたり、ワーキンググループに参加することができます。\n\n<br/>\n\n## 翻訳\n\nすべての翻訳はコミュニティによって支えられています。完成済みの翻訳、進行中の翻訳、または新たな翻訳のいずれにおいても、サポートを受けられたら幸いです！\n\n### 翻訳（完了済み）\n\n- ![BR](./assets/flags/BR.png) [Brazilian Portuguese](./README.brazilian-portuguese.md) - Courtesy of [Marcelo Melo](https://github.com/marcelosdm)\n- ![CN](./assets/flags/CN.png) [Chinese](./README.chinese.md) - Courtesy of [Matt Jin](https://github.com/mattjin)\n- ![RU](./assets/flags/RU.png) [Russian](./README.russian.md) - Courtesy of [Alex Ivanov](https://github.com/contributorpw)\n- ![PL](./assets/flags/PL.png) [Polish](./README.polish.md) - Courtesy of [Michal Biesiada](https://github.com/mbiesiad)\n- ![JA](./assets/flags/JA.png) [Japanese](./README.japanese.md) - Courtesy of [Yuki Ota](https://github.com/YukiOta), [Yuta Azumi](https://github.com/YA21)\n- ![EU](./assets/flags/EU.png) [Basque](README.basque.md) - Courtesy of [Ane Diaz de Tuesta](https://github.com/anediaz) & Joxefe Diaz de Tuesta\n\n### 翻訳（進行中）\n\n- ![FR](./assets/flags/FR.png) [French](https://github.com/gaspaonrocks/nodebestpractices/blob/french-translation/README.french.md) ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/129))\n- ![HE](./assets/flags/HE.png) Hebrew ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/156))\n- ![KR](./assets/flags/KR.png) [Korean](README.korean.md) - Courtesy of [Sangbeom Han](https://github.com/uronly14me) ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/94))\n- ![ES](./assets/flags/ES.png) [Spanish](https://github.com/goldbergyoni/nodebestpractices/blob/spanish-translation/README.spanish.md) ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/95))\n- ![TR](./assets/flags/TR.png) Turkish ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/139))\n\n<br/><br/>\n\n## ステアリングコミッティー\n\nステアリングコミッティーのメンバーをご紹介します。このプロジェクトのガイダンスと将来の方向性を提供するために協力してくださっている方々です。さらに、コミッティーの各メンバーは、[GitHub プロジェクト](https://github.com/goldbergyoni/nodebestpractices/projects)で管理されているプロジェクトをリードしています。\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/yoni.png\"/>\n\n[Yoni Goldberg](https://github.com/goldbergyoni)\n<a href=\"https://twitter.com/goldbergyoni\"><img src=\"assets/images/twitter-s.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://goldbergyoni.com\"><img src=\"assets/images/www.png\" width=\"16\" height=\"16\"></img></a>\n\nアメリカ、ヨーロッパ、イスラエルにおいて、大規模な Node.js アプリケーション開発をサポートするコンサルタント。上記の多くのベストプラクティスは当初 [goldbergyoni.com](https://goldbergyoni.com) で公開されました。Yoni への連絡は [@goldbergyoni](https://github.com/goldbergyoni) または [me@goldbergyoni.com](mailto:me@goldbergyoni.com) までお願いします。\n\n<br/>\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/bruno.png\"/>\n\n[Bruno Scheufler](https://github.com/BrunoScheufler)\n<a href=\"https://brunoscheufler.com/\"><img src=\"assets/images/www.png\" width=\"16\" height=\"16\"></img></a>\n\n💻 フルスタック web エンジニア、Node.js & GraphQL の熱狂的なファン\n\n<br/>\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/kyle.png\"/>\n\n[Kyle Martin](https://github.com/js-kyle)\n<a href=\"https://twitter.com/kylemartin_93\"><img src=\"assets/images/twitter-s.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://www.linkedin.com/in/kylemartinnz\"><img src=\"assets/images/linkedin.png\" width=\"16\" height=\"16\"></img></a>\n\nニュージーランドを拠点とするフルスタックデベロッパー & サイトリライアビリティエンジニア。Web アプリケーションセキュリティや、グローバルスケールで稼働する Node.js アプリケーションの構築に関心があります。\n\n<br/>\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/kevyn.png\"/>\n\n[Kevyn Bruyere](https://github.com/kevynb)\n<a href=\"https://www.linkedin.com/in/kevynbruyere/\"><img src=\"assets/images/linkedin.png\" width=\"16\" height=\"16\"></img></a>\n\nOps や自動化に関心のあるフルスタックデベロッパー。\n\n<br/>\n\n### ステアリングコミッティー・エメリティ\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/sagir.png\"/>\n\n[Sagir Khan](https://github.com/sagirk)\n<a href=\"https://twitter.com/sagir_k\"><img src=\"assets/images/twitter-s.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://linkedin.com/in/sagirk\"><img src=\"assets/images/linkedin.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://sagirk.com\"><img src=\"assets/images/www.png\" width=\"16\" height=\"16\"></img></a>\n\nJavaScript とそのエコシステム（React、Node.js、TypeScript、GraphQL、MongoDB など、システムのあらゆるレイヤーで JS/JSON が関係するものであるなら何でも）の専門家。世界で最も認知されているブランドのために Web プラットフォームを利用してプロダクトを構築しています。Node.js ファウンデーションの個人メンバー。\n\n<br/>\n\n## コラボレーター\n\nすべてのコラボレーターの方々に感謝いたします！ 🙏\n\n私たちのコラボレーターは、新たなベストプラクティスの提案やイシューの優先順位付け、プルリクエストのレビューなどその他多くのことを通じて、定期的にこのリポジトリに貢献してくださっているメンバーの方々です。多くの人々がより良い Node.js アプリケーションを構築できるように導く私たちをサポートすることにもし興味があるのであれば、[貢献ガイドライン](./.operations/CONTRIBUTING.md)をお読み下さい 🎉\n\n| <a href=\"https://github.com/idori\" target=\"_blank\"><img src=\"assets/images/members/ido.png\" width=\"75\" height=\"75\"/></a> | <a href=\"https://github.com/TheHollidayInn\" target=\"_blank\"><img src=\"assets/images/members/keith.png\" width=\"75\" height=\"75\"/></a> |\n| :---------------------------------------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------------------------------------------------: |\n|                                    [Ido Richter (Founder)](https://github.com/idori)                                    |                                        [Keith Holliday](https://github.com/TheHollidayInn)                                         |\n\n### コラボレーター・エメリティ\n\n| <a href=\"https://github.com/refack\" target=\"_blank\"><img src=\"assets/images/members/refael.png\" width=\"50\" height=\"50\"/></a> |\n| :-------------------------------------------------------------------------------------------------------------------------: |\n|                                        [Refael Ackermann](https://github.com/refack)                                        |\n\n<br/>\n\n## 貢献\n\nもしオープンソースに貢献したいと思ったことがあるのなら、いまがチャンスです！ 詳細は[貢献ドキュメント](.operations/CONTRIBUTING.md)を参照してください。\n\n## 貢献メンバー ✨\n\nこのリポジトリに貢献してくれた素晴らしい方々に感謝いたします。\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kevinrambaud\"><img src=\"https://avatars1.githubusercontent.com/u/7501477?v=4\" width=\"100px;\" alt=\"Kevin Rambaud\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kevin Rambaud</b></sub></a><br /><a href=\"#content-kevinrambaud\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mfine15\"><img src=\"https://avatars1.githubusercontent.com/u/1286554?v=4\" width=\"100px;\" alt=\"Michael Fine\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Michael Fine</b></sub></a><br /><a href=\"#content-mfine15\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://squgeim.github.io\"><img src=\"https://avatars0.githubusercontent.com/u/4996818?v=4\" width=\"100px;\" alt=\"Shreya Dahal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shreya Dahal</b></sub></a><br /><a href=\"#content-squgeim\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://matheusrocha89.com\"><img src=\"https://avatars1.githubusercontent.com/u/3718366?v=4\" width=\"100px;\" alt=\"Matheus Cruz Rocha\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Matheus Cruz Rocha</b></sub></a><br /><a href=\"#content-matheusrocha89\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://bityog.github.io/Portfolio/\"><img src=\"https://avatars2.githubusercontent.com/u/28219178?v=4\" width=\"100px;\" alt=\"Yog Mehta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yog Mehta</b></sub></a><br /><a href=\"#content-BitYog\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://kudapara.co.zw\"><img src=\"https://avatars3.githubusercontent.com/u/13519184?v=4\" width=\"100px;\" alt=\"Kudakwashe Paradzayi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kudakwashe Paradzayi</b></sub></a><br /><a href=\"#content-kudapara\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.t1st3.com/\"><img src=\"https://avatars1.githubusercontent.com/u/1469638?v=4\" width=\"100px;\" alt=\"t1st3\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>t1st3</b></sub></a><br /><a href=\"#content-t1st3\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mulijordan1976\"><img src=\"https://avatars0.githubusercontent.com/u/33382022?v=4\" width=\"100px;\" alt=\"mulijordan1976\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>mulijordan1976</b></sub></a><br /><a href=\"#content-mulijordan1976\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/matchai\"><img src=\"https://avatars0.githubusercontent.com/u/4658208?v=4\" width=\"100px;\" alt=\"Matan Kushner\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Matan Kushner</b></sub></a><br /><a href=\"#content-matchai\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://fabiothiroki.github.io\"><img src=\"https://avatars2.githubusercontent.com/u/670057?v=4\" width=\"100px;\" alt=\"Fabio Hiroki\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Fabio Hiroki</b></sub></a><br /><a href=\"#content-fabiothiroki\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://james.sumners.info/\"><img src=\"https://avatars1.githubusercontent.com/u/321201?v=4\" width=\"100px;\" alt=\"James Sumners\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>James Sumners</b></sub></a><br /><a href=\"#content-jsumners\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/_DanGamble\"><img src=\"https://avatars2.githubusercontent.com/u/7152041?v=4\" width=\"100px;\" alt=\"Dan Gamble\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dan Gamble</b></sub></a><br /><a href=\"#content-dan-gamble\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/trainorpj\"><img src=\"https://avatars3.githubusercontent.com/u/13276704?v=4\" width=\"100px;\" alt=\"PJ Trainor\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>PJ Trainor</b></sub></a><br /><a href=\"#content-trainorpj\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/reod\"><img src=\"https://avatars0.githubusercontent.com/u/3164299?v=4\" width=\"100px;\" alt=\"Remek Ambroziak\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Remek Ambroziak</b></sub></a><br /><a href=\"#content-reod\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://ca.non.co.il\"><img src=\"https://avatars0.githubusercontent.com/u/1829789?v=4\" width=\"100px;\" alt=\"Yoni Jah\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yoni Jah</b></sub></a><br /><a href=\"#content-yonjah\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/hazolsky\"><img src=\"https://avatars1.githubusercontent.com/u/1270790?v=4\" width=\"100px;\" alt=\"Misha Khokhlov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Misha Khokhlov</b></sub></a><br /><a href=\"#content-hazolsky\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://plus.google.com/+ЕвгенийОрехов/\"><img src=\"https://avatars3.githubusercontent.com/u/8045060?v=4\" width=\"100px;\" alt=\"Evgeny Orekhov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Evgeny Orekhov</b></sub></a><br /><a href=\"#content-EvgenyOrekhov\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/gediminasml\"><img src=\"https://avatars3.githubusercontent.com/u/19854105?v=4\" width=\"100px;\" alt=\"-\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>-</b></sub></a><br /><a href=\"#content-gediminasml\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://hisaac.net\"><img src=\"https://avatars3.githubusercontent.com/u/923876?v=4\" width=\"100px;\" alt=\"Isaac Halvorson\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Isaac Halvorson</b></sub></a><br /><a href=\"#content-hisaac\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.vedrankaracic.com\"><img src=\"https://avatars3.githubusercontent.com/u/2808092?v=4\" width=\"100px;\" alt=\"Vedran Karačić\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vedran Karačić</b></sub></a><br /><a href=\"#content-vkaracic\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/lallenlowe\"><img src=\"https://avatars3.githubusercontent.com/u/10761165?v=4\" width=\"100px;\" alt=\"lallenlowe\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>lallenlowe</b></sub></a><br /><a href=\"#content-lallenlowe\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/nwwells\"><img src=\"https://avatars2.githubusercontent.com/u/1039473?v=4\" width=\"100px;\" alt=\"Nathan Wells\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nathan Wells</b></sub></a><br /><a href=\"#content-nwwells\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/paulovitin\"><img src=\"https://avatars0.githubusercontent.com/u/125503?v=4\" width=\"100px;\" alt=\"Paulo Reis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Paulo Reis</b></sub></a><br /><a href=\"#content-paulovitin\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://snap.simpego.ch\"><img src=\"https://avatars2.githubusercontent.com/u/1989646?v=4\" width=\"100px;\" alt=\"syzer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>syzer</b></sub></a><br /><a href=\"#content-syzer\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://sancho.dev\"><img src=\"https://avatars0.githubusercontent.com/u/3763599?v=4\" width=\"100px;\" alt=\"David Sancho\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>David Sancho</b></sub></a><br /><a href=\"#content-davesnx\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://apiforge.it\"><img src=\"https://avatars0.githubusercontent.com/u/4929965?v=4\" width=\"100px;\" alt=\"Robert Manolea\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Robert Manolea</b></sub></a><br /><a href=\"#content-pupix\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://jumptoglide.com\"><img src=\"https://avatars2.githubusercontent.com/u/708395?v=4\" width=\"100px;\" alt=\"Xavier Ho\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Xavier Ho</b></sub></a><br /><a href=\"#content-spaxe\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.ocular-rhythm.io\"><img src=\"https://avatars0.githubusercontent.com/u/2738518?v=4\" width=\"100px;\" alt=\"Aaron\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Aaron</b></sub></a><br /><a href=\"#content-ocularrhythm\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://septa97.me\"><img src=\"https://avatars2.githubusercontent.com/u/13742634?v=4\" width=\"100px;\" alt=\"Jan Charles Maghirang Adona\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jan Charles Maghirang Adona</b></sub></a><br /><a href=\"#content-septa97\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.cakeresume.com/allenfang\"><img src=\"https://avatars2.githubusercontent.com/u/5351390?v=4\" width=\"100px;\" alt=\"Allen\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Allen</b></sub></a><br /><a href=\"#content-AllenFang\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/leonardovillela\"><img src=\"https://avatars3.githubusercontent.com/u/8650543?v=4\" width=\"100px;\" alt=\"Leonardo Villela\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Leonardo Villela</b></sub></a><br /><a href=\"#content-leonardovillela\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://michalzalecki.com\"><img src=\"https://avatars1.githubusercontent.com/u/3136577?v=4\" width=\"100px;\" alt=\"Michał Załęcki\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Michał Załęcki</b></sub></a><br /><a href=\"#content-MichalZalecki\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.wealthbar.com\"><img src=\"https://avatars1.githubusercontent.com/u/156449?v=4\" width=\"100px;\" alt=\"Chris Nicola\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Chris Nicola</b></sub></a><br /><a href=\"#content-chrisnicola\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/aecorredor\"><img src=\"https://avatars3.githubusercontent.com/u/9114987?v=4\" width=\"100px;\" alt=\"Alejandro Corredor\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alejandro Corredor</b></sub></a><br /><a href=\"#content-aecorredor\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/cwar\"><img src=\"https://avatars3.githubusercontent.com/u/272843?v=4\" width=\"100px;\" alt=\"cwar\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>cwar</b></sub></a><br /><a href=\"#content-cwar\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/keyfoxth\"><img src=\"https://avatars3.githubusercontent.com/u/10647132?v=4\" width=\"100px;\" alt=\"Yuwei\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yuwei</b></sub></a><br /><a href=\"#content-keyfoxth\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://bigcodenerd.org\"><img src=\"https://avatars3.githubusercontent.com/u/10895594?v=4\" width=\"100px;\" alt=\"Utkarsh Bhatt\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Utkarsh Bhatt</b></sub></a><br /><a href=\"#content-utkarshbhatt12\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/duartemendes\"><img src=\"https://avatars2.githubusercontent.com/u/12852058?v=4\" width=\"100px;\" alt=\"Duarte Mendes\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Duarte Mendes</b></sub></a><br /><a href=\"#content-duartemendes\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://jasonkim.ca\"><img src=\"https://avatars2.githubusercontent.com/u/103456?v=4\" width=\"100px;\" alt=\"Jason Kim\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jason Kim</b></sub></a><br /><a href=\"#content-serv\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Max101\"><img src=\"https://avatars2.githubusercontent.com/u/2124249?v=4\" width=\"100px;\" alt=\"Mitja O.\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Mitja O.</b></sub></a><br /><a href=\"#content-Max101\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://sandromiguel.com\"><img src=\"https://avatars0.githubusercontent.com/u/6423157?v=4\" width=\"100px;\" alt=\"Sandro Miguel Marques\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sandro Miguel Marques</b></sub></a><br /><a href=\"#content-SandroMiguel\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/GabeKuslansky\"><img src=\"https://avatars3.githubusercontent.com/u/9855482?v=4\" width=\"100px;\" alt=\"Gabe\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Gabe</b></sub></a><br /><a href=\"#content-GabeKuslansky\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://ripper234.com/\"><img src=\"https://avatars1.githubusercontent.com/u/172282?v=4\" width=\"100px;\" alt=\"Ron Gross\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ron Gross</b></sub></a><br /><a href=\"#content-ripper234\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.thecodebarbarian.com\"><img src=\"https://avatars2.githubusercontent.com/u/1620265?v=4\" width=\"100px;\" alt=\"Valeri Karpov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Valeri Karpov</b></sub></a><br /><a href=\"#content-vkarpov15\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://sergiobernal.com\"><img src=\"https://avatars3.githubusercontent.com/u/20087388?v=4\" width=\"100px;\" alt=\"Sergio Bernal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sergio Bernal</b></sub></a><br /><a href=\"#content-imsergiobernal\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ntelkedzhiev\"><img src=\"https://avatars2.githubusercontent.com/u/7332371?v=4\" width=\"100px;\" alt=\"Nikola Telkedzhiev\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nikola Telkedzhiev</b></sub></a><br /><a href=\"#content-ntelkedzhiev\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/vitordagamagodoy\"><img src=\"https://avatars0.githubusercontent.com/u/26370059?v=4\" width=\"100px;\" alt=\"Vitor Godoy\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vitor Godoy</b></sub></a><br /><a href=\"#content-vitordagamagodoy\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.manishsaraan.com/\"><img src=\"https://avatars2.githubusercontent.com/u/19797340?v=4\" width=\"100px;\" alt=\"Manish Saraan\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Manish Saraan</b></sub></a><br /><a href=\"#content-manishsaraan\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/uronly14me\"><img src=\"https://avatars2.githubusercontent.com/u/5186814?v=4\" width=\"100px;\" alt=\"Sangbeom Han\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sangbeom Han</b></sub></a><br /><a href=\"#content-uronly14me\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://blackmatch.github.io\"><img src=\"https://avatars3.githubusercontent.com/u/12443954?v=4\" width=\"100px;\" alt=\"blackmatch\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>blackmatch</b></sub></a><br /><a href=\"#content-blackmatch\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://simmsreeve.com\"><img src=\"https://avatars3.githubusercontent.com/u/5173131?v=4\" width=\"100px;\" alt=\"Joe Reeve\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Joe Reeve</b></sub></a><br /><a href=\"#content-ISNIT0\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/BusbyActual\"><img src=\"https://avatars2.githubusercontent.com/u/14985016?v=4\" width=\"100px;\" alt=\"Ryan Busby\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ryan Busby</b></sub></a><br /><a href=\"#content-BusbyActual\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://jsdecorator.com\"><img src=\"https://avatars3.githubusercontent.com/u/4482199?v=4\" width=\"100px;\" alt=\"Iman Mohamadi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Iman Mohamadi</b></sub></a><br /><a href=\"#content-ImanMh\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/HeeL\"><img src=\"https://avatars1.githubusercontent.com/u/287769?v=4\" width=\"100px;\" alt=\"Sergii Paryzhskyi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sergii Paryzhskyi</b></sub></a><br /><a href=\"#content-HeeL\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kapilepatel\"><img src=\"https://avatars3.githubusercontent.com/u/25738473?v=4\" width=\"100px;\" alt=\"Kapil Patel\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kapil Patel</b></sub></a><br /><a href=\"#content-kapilepatel\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/justjavac\"><img src=\"https://avatars1.githubusercontent.com/u/359395?v=4\" width=\"100px;\" alt=\"迷渡\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>迷渡</b></sub></a><br /><a href=\"#content-justjavac\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/hozefaj\"><img src=\"https://avatars1.githubusercontent.com/u/2084833?v=4\" width=\"100px;\" alt=\"Hozefa\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Hozefa</b></sub></a><br /><a href=\"#content-hozefaj\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/el-ethan\"><img src=\"https://avatars3.githubusercontent.com/u/10249884?v=4\" width=\"100px;\" alt=\"Ethan\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ethan</b></sub></a><br /><a href=\"#content-el-ethan\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/milkdeliver\"><img src=\"https://avatars2.githubusercontent.com/u/3108407?v=4\" width=\"100px;\" alt=\"Sam\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sam</b></sub></a><br /><a href=\"#content-milkdeliver\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ArlindXh\"><img src=\"https://avatars0.githubusercontent.com/u/19508764?v=4\" width=\"100px;\" alt=\"Arlind\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Arlind</b></sub></a><br /><a href=\"#content-ArlindXh\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ttous\"><img src=\"https://avatars0.githubusercontent.com/u/19815440?v=4\" width=\"100px;\" alt=\"Teddy Toussaint\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Teddy Toussaint</b></sub></a><br /><a href=\"#content-ttous\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://ardern.io\"><img src=\"https://avatars2.githubusercontent.com/u/2419690?v=4\" width=\"100px;\" alt=\"Lewis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Lewis</b></sub></a><br /><a href=\"#content-LewisArdern\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://gabriellidenor.com/\"><img src=\"https://avatars2.githubusercontent.com/u/765963?v=4\" width=\"100px;\" alt=\"Gabriel Lidenor \"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Gabriel Lidenor </b></sub></a><br /><a href=\"#content-GabrielLidenor\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/animir\"><img src=\"https://avatars3.githubusercontent.com/u/4623196?v=4\" width=\"100px;\" alt=\"Roman\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Roman</b></sub></a><br /><a href=\"#content-animir\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Francozeira\"><img src=\"https://avatars1.githubusercontent.com/u/47419763?v=4\" width=\"100px;\" alt=\"Francozeira\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Francozeira</b></sub></a><br /><a href=\"#content-Francozeira\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/invvard\"><img src=\"https://avatars0.githubusercontent.com/u/7305493?v=4\" width=\"100px;\" alt=\"Invvard\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Invvard</b></sub></a><br /><a href=\"#content-Invvard\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://romulogarofalo.github.io/\"><img src=\"https://avatars1.githubusercontent.com/u/18492592?v=4\" width=\"100px;\" alt=\"Rômulo Garofalo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Rômulo Garofalo</b></sub></a><br /><a href=\"#content-romulogarofalo\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://thoqbk.github.io/\"><img src=\"https://avatars0.githubusercontent.com/u/1491103?v=4\" width=\"100px;\" alt=\"Tho Q Luong\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tho Q Luong</b></sub></a><br /><a href=\"#content-thoqbk\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Qeneke\"><img src=\"https://avatars2.githubusercontent.com/u/20271568?v=4\" width=\"100px;\" alt=\"Burak Shen\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Burak Shen</b></sub></a><br /><a href=\"#content-Qeneke\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.happy-css.com\"><img src=\"https://avatars0.githubusercontent.com/u/2950505?v=4\" width=\"100px;\" alt=\"Martin Muzatko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Martin Muzatko</b></sub></a><br /><a href=\"#content-MartinMuzatko\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/autoboxer\"><img src=\"https://avatars3.githubusercontent.com/u/2757601?v=4\" width=\"100px;\" alt=\"Jared Collier\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jared Collier</b></sub></a><br /><a href=\"#content-autoboxer\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://hiltonmeyer.com\"><img src=\"https://avatars3.githubusercontent.com/u/4545860?v=4\" width=\"100px;\" alt=\"Hilton Meyer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Hilton Meyer</b></sub></a><br /><a href=\"#content-bikingbadger\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://kr.vuejs.org\"><img src=\"https://avatars0.githubusercontent.com/u/1451365?v=4\" width=\"100px;\" alt=\"ChangJoo Park(박창주)\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>ChangJoo Park(박창주)</b></sub></a><br /><a href=\"#content-ChangJoo-Park\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/MasahiroSakaguchi\"><img src=\"https://avatars0.githubusercontent.com/u/16427431?v=4\" width=\"100px;\" alt=\"Masahiro Sakaguchi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Masahiro Sakaguchi</b></sub></a><br /><a href=\"#content-MasahiroSakaguchi\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/TheHollidayInn\"><img src=\"https://avatars1.githubusercontent.com/u/1253400?v=4\" width=\"100px;\" alt=\"Keith Holliday\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Keith Holliday</b></sub></a><br /><a href=\"#content-TheHollidayInn\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.coreycleary.me\"><img src=\"https://avatars3.githubusercontent.com/u/1485356?v=4\" width=\"100px;\" alt=\"coreyc\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>coreyc</b></sub></a><br /><a href=\"#content-coreyc\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://maxcubing.wordpress.com\"><img src=\"https://avatars0.githubusercontent.com/u/8260834?v=4\" width=\"100px;\" alt=\"Maximilian Berkmann\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Maximilian Berkmann</b></sub></a><br /><a href=\"#content-Berkmann18\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/DouglasMV\"><img src=\"https://avatars3.githubusercontent.com/u/32845487?v=4\" width=\"100px;\" alt=\"Douglas Mariano Valero\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Douglas Mariano Valero</b></sub></a><br /><a href=\"#content-DouglasMV\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/marcelosdm\"><img src=\"https://avatars0.githubusercontent.com/u/18266600?v=4\" width=\"100px;\" alt=\"Marcelo Melo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Marcelo Melo</b></sub></a><br /><a href=\"#content-marcelosdm\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/mperk_\"><img src=\"https://avatars0.githubusercontent.com/u/3465794?v=4\" width=\"100px;\" alt=\"Mehmet Perk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Mehmet Perk</b></sub></a><br /><a href=\"#content-mperk\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ryanouyang\"><img src=\"https://avatars2.githubusercontent.com/u/360426?v=4\" width=\"100px;\" alt=\"ryan ouyang\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>ryan ouyang</b></sub></a><br /><a href=\"#content-ryanouyang\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/shabeer-mdy\"><img src=\"https://avatars0.githubusercontent.com/u/26842535?v=4\" width=\"100px;\" alt=\"Shabeer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shabeer</b></sub></a><br /><a href=\"#content-shabeer-mdy\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/halfzebra\"><img src=\"https://avatars1.githubusercontent.com/u/3983879?v=4\" width=\"100px;\" alt=\"Eduard Kyvenko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Eduard Kyvenko</b></sub></a><br /><a href=\"#content-halfzebra\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://deyvisonrocha.com\"><img src=\"https://avatars2.githubusercontent.com/u/686067?v=4\" width=\"100px;\" alt=\"Deyvison Rocha\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Deyvison Rocha</b></sub></a><br /><a href=\"#content-deyvisonrocha\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://twitter.com/georgemamer\"><img src=\"https://avatars1.githubusercontent.com/u/20108934?v=4\" width=\"100px;\" alt=\"George Mamer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>George Mamer</b></sub></a><br /><a href=\"#content-georgem3\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/leimonio\"><img src=\"https://avatars0.githubusercontent.com/u/1969742?v=4\" width=\"100px;\" alt=\"Konstantinos Leimonis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Konstantinos Leimonis</b></sub></a><br /><a href=\"#content-leimonio\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Zybax\"><img src=\"https://avatars3.githubusercontent.com/u/22094453?v=4\" width=\"100px;\" alt=\"Oliver Lluberes\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Oliver Lluberes</b></sub></a><br /><a href=\"#translation-Zybax\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://stackoverflow.com/story/tiendq\"><img src=\"https://avatars2.githubusercontent.com/u/815910?v=4\" width=\"100px;\" alt=\"Tien Do\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tien Do</b></sub></a><br /><a href=\"#content-tiendq\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://singh1114.github.io/\"><img src=\"https://avatars0.githubusercontent.com/u/11356398?v=4\" width=\"100px;\" alt=\"Ranvir Singh\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ranvir Singh</b></sub></a><br /><a href=\"#content-singh1114\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/collierrgbsitisfise\"><img src=\"https://avatars3.githubusercontent.com/u/13496126?v=4\" width=\"100px;\" alt=\"Vadim Nicolaev\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vadim Nicolaev</b></sub></a><br /><a href=\"#content-collierrgbsitisfise\" title=\"Content\">🖋</a> <a href=\"#translation-collierrgbsitisfise\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/germangamboa95\"><img src=\"https://avatars3.githubusercontent.com/u/28633849?v=4\" width=\"100px;\" alt=\"German Gamboa Gonzalez\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>German Gamboa Gonzalez</b></sub></a><br /><a href=\"#content-germangamboa95\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/AbdelrahmanHafez\"><img src=\"https://avatars3.githubusercontent.com/u/19984935?v=4\" width=\"100px;\" alt=\"Hafez\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Hafez</b></sub></a><br /><a href=\"#content-AbdelrahmanHafez\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://linkedin.com/in/chandiran-dmc\"><img src=\"https://avatars3.githubusercontent.com/u/42678579?v=4\" width=\"100px;\" alt=\"Chandiran\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Chandiran</b></sub></a><br /><a href=\"#content-chandiran-dmc\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/VinayaSathyanarayana\"><img src=\"https://avatars2.githubusercontent.com/u/16976677?v=4\" width=\"100px;\" alt=\"VinayaSathyanarayana\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>VinayaSathyanarayana</b></sub></a><br /><a href=\"#content-VinayaSathyanarayana\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.kimkern.de\"><img src=\"https://avatars1.githubusercontent.com/u/2671139?v=4\" width=\"100px;\" alt=\"Kim Kern\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kim Kern</b></sub></a><br /><a href=\"#content-kiwikern\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://kennethfreitas.github.io/\"><img src=\"https://avatars2.githubusercontent.com/u/55669043?v=4\" width=\"100px;\" alt=\"Kenneth Freitas\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kenneth Freitas</b></sub></a><br /><a href=\"#content-kennethfreitas\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/songe\"><img src=\"https://avatars2.githubusercontent.com/u/1531561?v=4\" width=\"100px;\" alt=\"songe\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>songe</b></sub></a><br /><a href=\"#content-songe\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://ksed.dev\"><img src=\"https://avatars1.githubusercontent.com/u/30693707?v=4\" width=\"100px;\" alt=\"Kirill Shekhovtsov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kirill Shekhovtsov</b></sub></a><br /><a href=\"#content-Ksedline\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/SerzN1\"><img src=\"https://avatars0.githubusercontent.com/u/2534649?v=4\" width=\"100px;\" alt=\"Serge\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Serge</b></sub></a><br /><a href=\"#content-SerzN1\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/keyrwinz\"><img src=\"https://avatars3.githubusercontent.com/u/21241761?v=4\" width=\"100px;\" alt=\"keyrwinz\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>keyrwinz</b></sub></a><br /><a href=\"#content-keyrwinz\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/nDmitry\"><img src=\"https://avatars0.githubusercontent.com/u/2134568?v=4\" width=\"100px;\" alt=\"Dmitry Nikitenko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dmitry Nikitenko</b></sub></a><br /><a href=\"#content-nDmitry\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://bushuai.cc\"><img src=\"https://avatars0.githubusercontent.com/u/1875256?v=4\" width=\"100px;\" alt=\"bushuai\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>bushuai</b></sub></a><br /><a href=\"https://github.com/goldbergyoni/nodebestpractices/pulls?q=is%3Apr+reviewed-by%3Abushuai\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#content-bushuai\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://stackoverflow.com/users/1348195/benjamin-gruenbaum\"><img src=\"https://avatars2.githubusercontent.com/u/1315533?v=4\" width=\"100px;\" alt=\"Benjamin Gruenbaum\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Benjamin Gruenbaum</b></sub></a><br /><a href=\"#content-benjamingr\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/byeze\"><img src=\"https://avatars1.githubusercontent.com/u/7424138?v=4\" width=\"100px;\" alt=\"Ezequiel\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ezequiel</b></sub></a><br /><a href=\"#translation-byeze\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/juaoose\"><img src=\"https://avatars3.githubusercontent.com/u/994594?v=4\" width=\"100px;\" alt=\"Juan José Rodríguez\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Juan José Rodríguez</b></sub></a><br /><a href=\"#translation-juaoose\" title=\"Translation\">🌍</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/OrBin\"><img src=\"https://avatars1.githubusercontent.com/u/6897234?v=4\" width=\"100px;\" alt=\"Or Bin\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Or Bin</b></sub></a><br /><a href=\"#content-OrBin\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/andreoav07\"><img src=\"https://avatars2.githubusercontent.com/u/508827?v=4\" width=\"100px;\" alt=\"Andreo Vieira\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Andreo Vieira</b></sub></a><br /><a href=\"#content-andreoav\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mikicho\"><img src=\"https://avatars1.githubusercontent.com/u/11459632?v=4\" width=\"100px;\" alt=\"Michael Solomon\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Michael Solomon</b></sub></a><br /><a href=\"#content-mikicho\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jimmycallin\"><img src=\"https://avatars0.githubusercontent.com/u/2225828?v=4\" width=\"100px;\" alt=\"Jimmy Callin\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jimmy Callin</b></sub></a><br /><a href=\"#content-jimmycallin\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/siddharthofficial/\"><img src=\"https://avatars2.githubusercontent.com/u/26025955?v=4\" width=\"100px;\" alt=\"Siddharth\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Siddharth</b></sub></a><br /><a href=\"#content-w01fS\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://ryansmith.tech/\"><img src=\"https://avatars0.githubusercontent.com/u/1578766?v=4\" width=\"100px;\" alt=\"Ryan Smith\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ryan Smith</b></sub></a><br /><a href=\"#content-ryan3E0\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://de.linkedin.com/in/tom-boettger\"><img src=\"https://avatars2.githubusercontent.com/u/49961674?v=4\" width=\"100px;\" alt=\"Tom Boettger\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tom Boettger</b></sub></a><br /><a href=\"#content-bttger\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jormaechea\"><img src=\"https://avatars3.githubusercontent.com/u/5612500?v=4\" width=\"100px;\" alt=\"Joaquín Ormaechea\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Joaquín Ormaechea</b></sub></a><br /><a href=\"#translation-jormaechea\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/dfrzuz\"><img src=\"https://avatars3.githubusercontent.com/u/71859096?v=4\" width=\"100px;\" alt=\"dfrzuz\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>dfrzuz</b></sub></a><br /><a href=\"#translation-dfrzuz\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/victor-homyakov\"><img src=\"https://avatars1.githubusercontent.com/u/121449?v=4\" width=\"100px;\" alt=\"Victor Homyakov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Victor Homyakov</b></sub></a><br /><a href=\"#content-victor-homyakov\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://joshuahemphill.com\"><img src=\"https://avatars3.githubusercontent.com/u/46608115?v=4\" width=\"100px;\" alt=\"Josh\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Josh</b></sub></a><br /><a href=\"#content-josh-hemphill\" title=\"Content\">🖋</a> <a href=\"#security-josh-hemphill\" title=\"Security\">🛡️</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/alec-francis\"><img src=\"https://avatars2.githubusercontent.com/u/32949882?v=4\" width=\"100px;\" alt=\"Alec Francis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alec Francis</b></sub></a><br /><a href=\"#content-alec-francis\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/arjun6610\"><img src=\"https://avatars1.githubusercontent.com/u/61268891?v=4\" width=\"100px;\" alt=\"arjun6610\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>arjun6610</b></sub></a><br /><a href=\"#content-arjun6610\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jan-osch\"><img src=\"https://avatars2.githubusercontent.com/u/11651780?v=4\" width=\"100px;\" alt=\"Jan Osch\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jan Osch</b></sub></a><br /><a href=\"#content-jan-osch\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/thiagotrs\"><img src=\"https://avatars2.githubusercontent.com/u/32005779?v=4\" width=\"100px;\" alt=\"Thiago Rotondo Sampaio\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Thiago Rotondo Sampaio</b></sub></a><br /><a href=\"#translation-thiagotrs\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Alexsey\"><img src=\"https://avatars0.githubusercontent.com/u/6392013?v=4\" width=\"100px;\" alt=\"Alexsey\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alexsey</b></sub></a><br /><a href=\"#content-Alexsey\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/13luismb\"><img src=\"https://avatars1.githubusercontent.com/u/32210483?v=4\" width=\"100px;\" alt=\"Luis A. Acurero\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Luis A. Acurero</b></sub></a><br /><a href=\"#translation-13luismb\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://lromano97.github.io/\"><img src=\"https://avatars1.githubusercontent.com/u/22394847?v=4\" width=\"100px;\" alt=\"Lucas Romano\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Lucas Romano</b></sub></a><br /><a href=\"#translation-lromano97\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/denisecase\"><img src=\"https://avatars0.githubusercontent.com/u/13016516?v=4\" width=\"100px;\" alt=\"Denise Case\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Denise Case</b></sub></a><br /><a href=\"#content-denisecase\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://stackoverflow.com/story/elektronik\"><img src=\"https://avatars3.githubusercontent.com/u/1078554?v=4\" width=\"100px;\" alt=\"Nick Ribal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nick Ribal</b></sub></a><br /><a href=\"#content-elektronik2k5\" title=\"Content\">🖋</a> <a href=\"https://github.com/goldbergyoni/nodebestpractices/pulls?q=is%3Apr+reviewed-by%3Aelektronik2k5\" title=\"Reviewed Pull Requests\">👀</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/0xflotus\"><img src=\"https://avatars3.githubusercontent.com/u/26602940?v=4\" width=\"100px;\" alt=\"0xflotus\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>0xflotus</b></sub></a><br /><a href=\"#content-0xflotus\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.dijonkitchen.org/\"><img src=\"https://avatars3.githubusercontent.com/u/11434205?v=4\" width=\"100px;\" alt=\"Jonathan Chen\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jonathan Chen</b></sub></a><br /><a href=\"#content-dijonkitchen\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/dilansri\"><img src=\"https://avatars2.githubusercontent.com/u/5089728?v=4\" width=\"100px;\" alt=\"Dilan Srilal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dilan Srilal</b></sub></a><br /><a href=\"#content-dilansri\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://vectree.ru\"><img src=\"https://avatars3.githubusercontent.com/u/4215285?v=4\" width=\"100px;\" alt=\"vladthelittleone\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>vladthelittleone</b></sub></a><br /><a href=\"#translation-vladthelittleone\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.nikolaso.com\"><img src=\"https://avatars0.githubusercontent.com/u/60047271?v=4\" width=\"100px;\" alt=\"Nik Osvalds\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nik Osvalds</b></sub></a><br /><a href=\"#content-nosvalds\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kdaniel21\"><img src=\"https://avatars0.githubusercontent.com/u/39854385?v=4\" width=\"100px;\" alt=\"Daniel Kiss\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Daniel Kiss</b></sub></a><br /><a href=\"https://github.com/goldbergyoni/nodebestpractices/commits?author=kdaniel21\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/forresst17\"><img src=\"https://avatars2.githubusercontent.com/u/163352?v=4\" width=\"100px;\" alt=\"Forresst\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Forresst</b></sub></a><br /><a href=\"#content-forresst\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/svenheden\"><img src=\"https://avatars1.githubusercontent.com/u/76098?v=4\" width=\"100px;\" alt=\"Jonathan Svenheden\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jonathan Svenheden</b></sub></a><br /><a href=\"#content-svenheden\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/AustrisC\"><img src=\"https://avatars2.githubusercontent.com/u/12381652?v=4\" width=\"100px;\" alt=\"AustrisC\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>AustrisC</b></sub></a><br /><a href=\"#content-AustrisC\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/cisco0808\"><img src=\"https://avatars0.githubusercontent.com/u/60251188?v=4\" width=\"100px;\" alt=\"kyeongtae kim\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>kyeongtae kim</b></sub></a><br /><a href=\"#translation-cisco0808\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://keybase.io/651z9pz968v2accj\"><img src=\"https://avatars.githubusercontent.com/u/65741741?v=4\" width=\"100px;\" alt=\"007\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>007</b></sub></a><br /><a href=\"#content-6gx7iycn53ioq2e8apk1j1ypwov4giui\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.anediaz.com\"><img src=\"https://avatars.githubusercontent.com/u/17216937?v=4\" width=\"100px;\" alt=\"Ane Diaz de Tuesta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ane Diaz de Tuesta</b></sub></a><br /><a href=\"#translation-anediaz\" title=\"Translation\">🌍</a> <a href=\"#content-anediaz\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://yukioh.net\"><img src=\"https://avatars.githubusercontent.com/u/23182489?v=4\" width=\"100px;\" alt=\"YukiOta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>YukiOta</b></sub></a><br /><a href=\"#translation-YukiOta\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.yeovilhospital.co.uk/\"><img src=\"https://avatars.githubusercontent.com/u/43814140?v=4\" width=\"100px;\" alt=\"Frazer Smith\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Frazer Smith</b></sub></a><br /><a href=\"#content-Fdawgs\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/rluvaton\"><img src=\"https://avatars.githubusercontent.com/u/16746759?v=4\" width=\"100px;\" alt=\"Raz Luvaton\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Raz Luvaton</b></sub></a><br /><a href=\"#content-rluvaton\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/YA21\"><img src=\"https://avatars.githubusercontent.com/u/37298463?v=4\" width=\"100px;\" alt=\"Yuta Azumi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yuta Azumi</b></sub></a><br /><a href=\"#content-YA21\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/andrewjbarbour\"><img src=\"https://avatars.githubusercontent.com/u/77080074?v=4\" width=\"100px;\" alt=\"andrewjbarbour\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>andrewjbarbour</b></sub></a><br /><a href=\"#content-andrewjbarbour\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://MasujimaRyohei.jp\"><img src=\"https://avatars.githubusercontent.com/u/17163541?v=4\" width=\"100px;\" alt=\"mr\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>mr</b></sub></a><br /><a href=\"#content-MasujimaRyohei\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kubanac95\"><img src=\"https://avatars.githubusercontent.com/u/16191931?v=4\" width=\"100px;\" alt=\"Aleksandar\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Aleksandar</b></sub></a><br /><a href=\"#content-kubanac95\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://vincentjonathan.com\"><img src=\"https://avatars.githubusercontent.com/u/32597776?v=4\" width=\"100px;\" alt=\"Owl\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Owl</b></sub></a><br /><a href=\"#content-SuspiciousLookingOwl\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/yedidyas\"><img src=\"https://avatars.githubusercontent.com/u/36074789?v=4\" width=\"100px;\" alt=\"Yedidya Schwartz\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yedidya Schwartz</b></sub></a><br /><a href=\"#content-yedidyas\" title=\"Content\">🖋</a> <a href=\"#example-yedidyas\" title=\"Examples\">💡</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ariel-diaz\"><img src=\"https://avatars.githubusercontent.com/u/20423540?v=4\" width=\"100px;\" alt=\"ari\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>ari</b></sub></a><br /><a href=\"#content-ariel-diaz\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.koenigthomas.de/\"><img src=\"https://avatars.githubusercontent.com/u/7080389?v=4\" width=\"100px;\" alt=\"Thomas König\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Thomas König</b></sub></a><br /><a href=\"#content-Vispercept\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/coocos\"><img src=\"https://avatars.githubusercontent.com/u/1397804?v=4\" width=\"100px;\" alt=\"Kalle Lämsä\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kalle Lämsä</b></sub></a><br /><a href=\"#content-coocos\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://math.cat\"><img src=\"https://avatars.githubusercontent.com/u/10328430?v=4\" width=\"100px;\" alt=\"Wyatt\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Wyatt</b></sub></a><br /><a href=\"#content-ZhyMC\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://libkhadir.fr\"><img src=\"https://avatars.githubusercontent.com/u/45130488?v=4\" width=\"100px;\" alt=\"KHADIR Tayeb\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>KHADIR Tayeb</b></sub></a><br /><a href=\"#content-tkhadir\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/shankarregmi\"><img src=\"https://avatars.githubusercontent.com/u/7703345?v=4\" width=\"100px;\" alt=\"Shankar Regmi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shankar Regmi</b></sub></a><br /><a href=\"#content-shankarregmi\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/codebyshubham\"><img src=\"https://avatars.githubusercontent.com/u/10389723?v=4\" width=\"100px;\" alt=\"Shubham\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shubham</b></sub></a><br /><a href=\"#content-codebyshubham\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://lucalves.me/\"><img src=\"https://avatars.githubusercontent.com/u/17712401?v=4\" width=\"100px;\" alt=\"Lucas Alves\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Lucas Alves</b></sub></a><br /><a href=\"#content-lucalves\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/benjaminudoh10\"><img src=\"https://avatars.githubusercontent.com/u/9018331?v=4\" width=\"100px;\" alt=\"Benjamin\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Benjamin</b></sub></a><br /><a href=\"#content-benjaminudoh10\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.yjoer.com\"><img src=\"https://avatars.githubusercontent.com/u/47742486?v=4\" width=\"100px;\" alt=\"Yeoh Joer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yeoh Joer</b></sub></a><br /><a href=\"#content-yjoer\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://blog.miigon.net\"><img src=\"https://avatars.githubusercontent.com/u/16161991?v=4\" width=\"100px;\" alt=\"Miigon\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Miigon</b></sub></a><br /><a href=\"#content-Miigon\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://brainstorage.me/Egregor2011\"><img src=\"https://avatars.githubusercontent.com/u/3630318?v=4\" width=\"100px;\" alt=\"Rostislav Bogorad\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Rostislav Bogorad</b></sub></a><br /><a href=\"#content-Egregor2011\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Flouse\"><img src=\"https://avatars.githubusercontent.com/u/1297478?v=4\" width=\"100px;\" alt=\"Flouse\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Flouse</b></sub></a><br /><a href=\"#content-Flouse\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://taranttini.com\"><img src=\"https://avatars.githubusercontent.com/u/6922125?v=4\" width=\"100px;\" alt=\"Tarantini Pereira\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tarantini Pereira</b></sub></a><br /><a href=\"#content-taranttini\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kzmat\"><img src=\"https://avatars.githubusercontent.com/u/34614358?v=4\" width=\"100px;\" alt=\"Kazuki Matsuo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kazuki Matsuo</b></sub></a><br /><a href=\"#content-kzmat\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/burkybang\"><img src=\"https://avatars.githubusercontent.com/u/927886?v=4\" width=\"100px;\" alt=\"Adam Smith\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Adam Smith</b></sub></a><br /><a href=\"#content-burkybang\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://codekodo.tistory.com\"><img src=\"https://avatars.githubusercontent.com/u/33795856?v=4\" width=\"100px;\" alt=\"Dohyeon Ko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dohyeon Ko</b></sub></a><br /><a href=\"#content-k906506\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/vlad99902\"><img src=\"https://avatars.githubusercontent.com/u/67615003?v=4\" width=\"100px;\" alt=\"Vladislav Legkov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vladislav Legkov</b></sub></a><br /><a href=\"#content-vlad99902\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://kerolloz.github.io\"><img src=\"https://avatars.githubusercontent.com/u/36763164?v=4\" width=\"100px;\" alt=\"Kerollos Magdy\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kerollos Magdy</b></sub></a><br /><a href=\"#content-kerolloz\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/erez-lieberman-b90b7219/\"><img src=\"https://avatars.githubusercontent.com/u/3277260?v=4\" width=\"100px;\" alt=\"Erez Lieberman\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Erez Lieberman</b></sub></a><br /><a href=\"#content-erezLieberman\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/breno-macedo-ernani-de-s%C3%A1-110223158/\"><img src=\"https://avatars.githubusercontent.com/u/48841329?v=4\" width=\"100px;\" alt=\"Breno Macedo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Breno Macedo</b></sub></a><br /><a href=\"#content-breno404\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/JFernando122\"><img src=\"https://avatars.githubusercontent.com/u/40414805?v=4\" width=\"100px;\" alt=\"Fernando Flores\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Fernando Flores</b></sub></a><br /><a href=\"#translation-JFernando122\" title=\"Translation\">🌍</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/rafaelconcept/\"><img src=\"https://avatars.githubusercontent.com/u/43880669?v=4\" width=\"100px;\" alt=\"Rafael Brito\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Rafael Brito</b></sub></a><br /><a href=\"#translation-rafaelconcept\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://emiliano-peralta-portfolio.vercel.app/\"><img src=\"https://avatars.githubusercontent.com/u/63617637?v=4\" width=\"100px;\" alt=\"Emiliano Peralta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Emiliano Peralta</b></sub></a><br /><a href=\"#translation-emiperalta\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://lannex.github.io\"><img src=\"https://avatars.githubusercontent.com/u/7369541?v=4\" width=\"100px;\" alt=\"Shin, SJ\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shin, SJ</b></sub></a><br /><a href=\"#content-lannex\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.benjaminforster.com\"><img src=\"https://avatars.githubusercontent.com/u/12589522?v=4\" width=\"100px;\" alt=\"Benjamin Forster\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Benjamin Forster</b></sub></a><br /><a href=\"#content-e-e-e\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/DanieleFedeli\"><img src=\"https://avatars.githubusercontent.com/u/37077048?v=4\" width=\"100px;\" alt=\"Daniele Fedeli\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Daniele Fedeli</b></sub></a><br /><a href=\"#content-DanieleFedeli\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/djob195\"><img src=\"https://avatars.githubusercontent.com/u/17146669?v=4\" width=\"100px;\" alt=\"djob195\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>djob195</b></sub></a><br /><a href=\"#content-djob195\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/antspk\"><img src=\"https://avatars.githubusercontent.com/u/78955792?v=4\" width=\"100px;\" alt=\"antspk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>antspk</b></sub></a><br /><a href=\"#content-antspk\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://jjy0821.tistory.com/\"><img src=\"https://avatars.githubusercontent.com/u/88075341?v=4\" width=\"100px;\" alt=\"정진영\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>정진영</b></sub></a><br /><a href=\"#content-jjy821\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kkk-cashwalk\"><img src=\"https://avatars.githubusercontent.com/u/91455122?v=4\" width=\"100px;\" alt=\"kkk-cashwalk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>kkk-cashwalk</b></sub></a><br /><a href=\"#content-kkk-cashwalk\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/apainintheneck\"><img src=\"https://avatars.githubusercontent.com/u/42982186?v=4\" width=\"100px;\" alt=\"apainintheneck\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>apainintheneck</b></sub></a><br /><a href=\"#content-apainintheneck\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/koyanyaroo\"><img src=\"https://avatars.githubusercontent.com/u/9715368?v=4\" width=\"100px;\" alt=\"Fajar Budhi Iswanda\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Fajar Budhi Iswanda</b></sub></a><br /><a href=\"#content-koyanyaroo\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jutiger\"><img src=\"https://avatars.githubusercontent.com/u/97490806?v=4\" width=\"100px;\" alt=\"이주호\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>이주호</b></sub></a><br /><a href=\"#content-jutiger\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/MisterSingh\"><img src=\"https://avatars.githubusercontent.com/u/44462019?v=4\" width=\"100px;\" alt=\"Singh\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Singh</b></sub></a><br /><a href=\"#content-MisterSingh\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Alex-Dumitru\"><img src=\"https://avatars.githubusercontent.com/u/43738450?v=4\" width=\"100px;\" alt=\"Alex Dumitru\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alex Dumitru</b></sub></a><br /><a href=\"#content-Alex-Dumitru\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/lykhatskyi\"><img src=\"https://avatars.githubusercontent.com/u/18104686?v=4\" width=\"100px;\" alt=\"Anton Lykhatskyi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Anton Lykhatskyi</b></sub></a><br /><a href=\"#content-lykhatskyi\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/EverythingAvailable\"><img src=\"https://avatars.githubusercontent.com/u/81002379?v=4\" width=\"100px;\" alt=\"sangwonlee\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>sangwonlee</b></sub></a><br /><a href=\"#content-EverythingAvailable\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/euberdeveloper\"><img src=\"https://avatars.githubusercontent.com/u/33126163?v=4\" width=\"100px;\" alt=\"Eugenio Berretta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Eugenio Berretta</b></sub></a><br /><a href=\"#content-euberdeveloper\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/soranakk\"><img src=\"https://avatars.githubusercontent.com/u/3930307?v=4\" width=\"100px;\" alt=\"soranakk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>soranakk</b></sub></a><br /><a href=\"#content-soranakk\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/backend-joonyoung\"><img src=\"https://avatars.githubusercontent.com/u/94430145?v=4\" width=\"100px;\" alt=\"고준영\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>고준영</b></sub></a><br /><a href=\"#content-backend-joonyoung\" title=\"Content\">🖋</a> <a href=\"https://github.com/goldbergyoni/nodebestpractices/commits?author=backend-joonyoung\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/GuilhermePortella\"><img src=\"https://avatars.githubusercontent.com/u/59876059?v=4\" width=\"100px;\" alt=\"Guilherme Portella \"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Guilherme Portella </b></sub></a><br /><a href=\"#content-GuilhermePortella\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.youtube.com/channel/UCBxzOQd2v9wWfiMDrf_RQ7A\"><img src=\"https://avatars.githubusercontent.com/u/18497570?v=4\" width=\"100px;\" alt=\"André Esser\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>André Esser</b></sub></a><br /><a href=\"#content-Esser50K\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ShiChenCong\"><img src=\"https://avatars.githubusercontent.com/u/22486446?v=4\" width=\"100px;\" alt=\"Scc\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Scc</b></sub></a><br /><a href=\"#translation-ShiChenCong\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.mauroaccornero.it\"><img src=\"https://avatars.githubusercontent.com/u/1875822?v=4\" width=\"100px;\" alt=\"Mauro Accornero\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Mauro Accornero</b></sub></a><br /><a href=\"#content-mauroaccornero\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/no-yan\"><img src=\"https://avatars.githubusercontent.com/u/63000297?v=4\" width=\"100px;\" alt=\"no-yan\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>no-yan</b></sub></a><br /><a href=\"#content-no-yan\" title=\"Content\">🖋</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n"
        },
        {
          "name": "README.korean.md",
          "type": "blob",
          "size": 169.93,
          "content": "[✔]: assets/images/checkbox-small-blue.png\n\n# Node.js 모범 사례\n\n<h1 align=\"center\">\n  <img src=\"assets/images/banner-2.jpg\" alt=\"Node.js Best Practices\"/>\n</h1>\n\n<br/>\n\n<div align=\"center\">\n  <img src=\"https://img.shields.io/badge/⚙%20Item%20count%20-%2086%20Best%20Practices-blue.svg\" alt=\"86 items\"/> <img src=\"https://img.shields.io/badge/%F0%9F%93%85%20Last%20update%20-%20March%2012%202020-green.svg\" alt=\"Last update: March, 2020\"/> <img src=\"https://img.shields.io/badge/ %E2%9C%94%20Updated%20For%20Version%20-%20Node%2012.12.0-brightgreen.svg\" alt=\"Updated for Node 13.1.0\"/>\n</div>\n\n<br/>\n\n[![nodepractices](./assets/images/twitter-s.png)](https://twitter.com/nodepractices/) **트위터에서 팔로우 하세요!** [**@nodepractices**](https://twitter.com/nodepractices/)\n\n<br/>\n\n[:green_book: 포괄적인 Node.js 테스트 & 품질 모범사례 강의](https://testjavascript.com/)\n\n<br/>\n\n다른 언어로 읽기: [![CN](./assets/flags/CN.png)**CN**](./README.chinese.md), [![BR](./assets/flags/BR.png)**BR**](./README.brazilian-portuguese.md), [![RU](./assets/flags/RU.png)**RU**](./README.russian.md), [![EU](./assets/flags/EU.png)**EU**](./README.basque.md) [(![ES](./assets/flags/ES.png)**ES**, ![FR](./assets/flags/FR.png)**FR**, ![HE](./assets/flags/HE.png)**HE**, ![KR](./assets/flags/KR.png)**KR** and ![TR](./assets/flags/TR.png)**TR** 은 작업중입니다!)](#translations)\n\n<br/>\n\n###### [운영 위원회](#운영-위원회)와 [협력자분들](#공동-저자)에 의해 구축되고 유지되고 있습니다\n\n# 최근 모범사례와 뉴스\n\n- **![FR](./assets/flags/FR.png) 프랑스어 번역!1! :** 우리의 국제 가이드에 합류한 최신 번역은 프랑스어입니다. Bienvenue(어서오세요.)\n\n- **🇯🇵 Japanese translation:** 우리 가이드는 이제 일본어로도 번역됩니다! 뛰어난 [YukiOta](https://github.com/YukiOta)와 [Yuta Azumi](https://github.com/YA21)의 제공입니다.\n\n- **🎊 60,000 stars!**: 우리 리포지토리는 60,100명의 개발자에게 별을 받고 신뢰를 얻었습니다. 말문이 막힐 정도입니다.\n\n<br/><br/>\n\n# 어서오세요! 먼저 이 3가지를 알아두세요\n\n**1. 이 문서를 읽는 것은 베스트 Node.js 문서 수십개를 읽는 것과 같습니다. -** 이 문서는 Node.js 의 가장 일반적인 Best Practice 모범사례들을 모은 요약집 및 큐레이션입니다.\n\n**2. 가장 큰 모음집이며, 매주 성장하고 있습니다. -** 현재 80개 이상의 모범사례들과 스타일 가이드 및 아키텍처 관련 팁들을 제공하고 있습니다. 이 문서를 계속 갱신하는 새로운 이슈들과 PR들이 매일 나오고 있습니다. 이 문서의 잘못된 코드를 고치거나 새로운 아이디어들을 제안하는 것은 매우 환영합니다. [글쓰기 지침은 여기](./.operations/writing-guidelines.md)서 확인하세요\n\n**3. 항목 대부분은 추가적인 정보가 있습니다 -** 항목 옆쪽에 존재하는 **🔗자세히 보기** 링크에서 코드 예제, 참조 블로그 또는 기타 정보들을 확인 할 수 있습니다.\n\n<br/><br/>\n\n## 목차\n\n1. [프로젝트 구조 설계 (5)](#1-프로젝트-구조-설계)\n2. [에러 처리 방법 (11)](#2-에러-처리-방법)\n3. [코드 스타일 (12) ](#3-코드-스타일)\n4. [테스트 및 전체 품질 관리 (13) ](#4-테스트-및-전체-품질-관리)\n5. [운영 환경으로 전환하기 (19) ](#5-운영-환경으로-전환하기)\n6. [보안 (25)](#6-보안)\n7. [성능 (2) (현재진행형 ✍️)](#7-초안-성능)\n\n<br/><br/>\n\n# `1. 프로젝트 구조 설계`\n\n## ![✔] 1.1 컴포넌트 기반으로 설계하라\n\n**핵심요약:** 큰 프로젝트에서 빠지기 쉬운 최악의 함정은 수백개의 의존성을 가진 커다란 소스코드를 유지보수하는 것이다. 그렇게 단일로 통째로 짜여진 monolith 코드는 개발자가 새로운 기능을 추가하는 속도가 느려지게 한다. 그 대신에 코드를 컴포넌트로 나누고, 각각의 컴포넌트가 자신의 폴더 혹은 할당된 코드베이스를 안에서 작고 간단한 단위로 유지되도록 해라. 아래의 '자세히 보기'를 눌러 올바른 프로젝트 구조의 예시를 확인해라.\n\n**그렇게 하지 않을 경우:** 새로운 기능을 작성하는 개발자가 변경사항이 어떤 영향을 미치는지 알기가 힘들면 의존하고 있는 다른 컴포넌트를 망칠까 두려워 하게 되고, 이는 배포를 더 느리고 더 불안전하게 만든다. 비지니스 단위가 나눠져 있지 않으면 확장(scale-out)하기도 쉽지 않게 된다.\n\n🔗 [**자세히 보기: 컴포넌트로 구조화하기**](./sections/projectstructre/breakintcomponents.korean.md)\n\n<br/><br/>\n\n## ![✔] 1.2 컴포넌트를 계층화(layer)하고, Express를 그 경계 안에 둬라\n\n**핵심요약:** 각각의 컴포넌트는 웹, 로직, 데이터 접근 코드을 위한 객체인 '계층'을 포함해야 한다. 이것은 우려할 만한 요소들을 깨끗하게 분리할 뿐만 아니라 모의 객체(mock)를 만들어 테스트하기 굉장히 쉽게 만든다. 이것이 굉장히 일반적인 패턴임에도, API 개발자들은 웹 계층의 객체 (Express req, res)를 비지니스 로직과 데이터 계층으로 보내서 계층을 뒤섞어버리는 경향이 있다. 그렇게 하는것은 당신의 어플리케이션에 의존성을 만들고 Express에서만 접근 가능하도록 만든다.\n\n**그렇게 하지 않을 경우:** 웹 객체와 다른 계층을 뒤섞은 앱은 테스트 코드, CRON 작업이나 Express가 아닌 다른 곳에서의 접근을 불가능하게 한다.\n\n🔗 [**자세히 보기: 앱을 계층화하기**](./sections/projectstructre/createlayers.korean.md)\n\n<br/><br/>\n\n## ![✔] 1.3 공유 유틸리티들은 NPM 패키지로 감싸라 (wrap)\n\n**핵심요약:** 커다란 코드 기반으로 구성되어있는 커다란 앱에서는 로깅, 암호화 같은 횡단 관심사(cross-cutting-concern)가 있는 유틸의 경우 당신이 쓴 코드로 감싸진 private NPM package의 형태로 노출이 되어야 한다. 이것은 여러 코드 기반과 프로젝트들에게 그것들을 공유할 수 있도록 해준다.\n\n**그렇게 하지 않을 경우:** 당신 자신만의 배포 및 종속 바퀴(dependency wheel)를 새로이 발명해야 할 것이다.\n\n🔗 [**자세히 보기: 기능으로 구조화 하기**](./sections/projectstructre/wraputilities.korean.md)\n\n<br/><br/>\n\n## ![✔] 1.4 Express의 app과 server를 분리하라\n\n**핵심요약:** [Express](https://expressjs.com/) 앱을 통째로 하나의 큰 파일에 정의하는 나쁜 습관은 피해라 - 'Express' 정의를 최소한 둘로는 나누자: API 선언(app.js)과 네트워크 부분(WWW)으로. 더 좋은 구조는 API 선언을 컴포넌트 안에 놓는 것이다.\n\n**그렇게 하지 않을 경우:** HTTP 요청으로만 API 테스트가 가능하게 된다 (커버리지 보고서를 생성하기가 더 느려지고 훨씬 힘들어진다). 수백줄의 코드를 하나의 파일에서 관리하는 것이 크게 즐겁지는 않을 것이다.\n\n🔗 [**자세히 보기: Express를 'app'과 'server'로 분리하기**](./sections/projectstructre/separateexpress.korean.md)\n\n<br/><br/>\n\n## ![✔] 1.5 환경을 인식하는, 보안적인, 계층적인 설정을 사용하라\n\n**핵심요약:** 완벽하고 결점이 없는 구성 설정은 (a) 파일과 환경변수 모두에서 키 값을 읽을 수 있어야하고 (b) 보안 값들은 커밋된 코드 밖에서 관리되어야하며 (c) 설정은 좀 더 쉽게 찾을 수 있도록 계층적으로 관리해야 한다. [rc](https://www.npmjs.com/package/rc), [nconf](https://www.npmjs.com/package/nconf), [config](https://www.npmjs.com/package/config), [convict](https://www.npmjs.com/package/convict)와 같이 이러한 요구사항을 동작하게 해주는 몇가지 패키지가 존재한다.\n\n**그렇게 하지 않을 경우:** 위의 구성 요구사항 중 하나라도 만족시키지 못한다면 개발팀이나 데브옵스팀을 늪으로 몰아갈 수 있다. 십중팔구 둘 다.\n\n🔗 [**자세히 보기: 구성 모범 사례**](./sections/projectstructre/configguide.korean.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#목차\">⬆ 목차로 돌아가기</a></p>\n\n# `2. 에러 처리 방법`\n\n## ![✔] 2.1 비동기 에러 처리시에는 async-await 혹은 promise를 사용하라\n\n**핵심요약:** 비동기 에러를 콜백 스타일로 처리하는 것은 지옥으로 가는 급행열차나 마찬가지 (혹은 파멸의 피라미드). 당신이 코드에 줄 수 있는 가장 큰 선물은 평판이 좋은 promise 라이브러리를 사용하거나 훨신 작고 친숙한 코드 문법인 try-catch를 사용하게 해주는 async-await를 사용하는 것이다.\n\n**그렇게 하지 않을 경우:** Node.js의 function(err, response) 콜백 스타일은 에러 처리와 일반 코드의 혼합, 코드의 과도한 중첩, 어색한 코딩 패턴 때문에 유지보수가 불가능한 코드로 가는 확실한 길이다.\n\n🔗 [**자세히 보기: 콜백 피하기**](./sections/errorhandling/asyncerrorhandling.korean.md)\n\n<br/><br/>\n\n## ![✔] 2.2 내장된 Error 객체만 사용하라\n\n**핵심요약:** 많은 사람들이 문자열이나 사용자가 임의로 정의한 타입으로 에러를 던지곤 하는데(throw), 이것은 에러처리 로직과 모듈 사이의 상호운영성을 복잡하게 한다. 당신이 promise를 거부(reject)하든, 예외를 던지든, 에러를 내던간에, 내장된 Error 객체만 이용하는 것이 균일성을 향상하고 정보의 손실을 방지해준다.\n\n**그렇게 하지 않을 경우:** 일부 컴포넌트를 호출할때 어떤 에러의 타입이 반환될지 불확실해져서 적절한 에러처리가 매우 어려워진다. 게다가 임의적인 타입으로 에러를 나타내는 것은 스택 정보(stack trace)와 같은 중요한 에러 관련 정보 손실을 일으킬 수 있다!\n\n🔗 [**자세히 보기: 내장된 Error 객체 사용하기**](./sections/errorhandling/useonlythebuiltinerror.korean.md)\n\n<br/><br/>\n\n## ![✔] 2.3 동작상의 에러와 프로그래머 에러를 구분하라\n\n**핵심요약:** API에서 잘못된 입력을 받는 것과 같은 동작상의 에러는 에러의 영향을 완전히 이해할수 있고 신중하게 처리 할수있는 알려진 경우를 의미한다. 반면에, 정의되지 않은 변수를 읽는 것과 같은 프로그래머 에러는 어플리케이션을 안정적으로 다시 시작하게 만드는 알수 없는 코드 에러를 의미한다.\n\n**그렇게 하지 않을 경우:** 에러가 날 때마다 어플리케이션을 다시 시작할수도 있지만, 왜 사소하고 예측가능한 동작상의 오류때문에 5000명의 온라인 사용자를 다운시키는 것인가? 그 반대도 이상적이지 않다. 알수없는 이슈 (프로그래머 에러)가 났는데 어플리케이션을 그대로 두는 것은 예측이 불가능한 반응을 일으킬 수 있다. 두 가지를 구별하면 요령있는 처신과 주어진 상황에 따른 균형잡힌 접근이 가능하다.\n\n🔗 [**자세히 보기: 동작상의 에러와 프로그래머 에러**](./sections/errorhandling/operationalvsprogrammererror.korean.md)\n\n<br/><br/>\n\n## ![✔] 2.4 에러를 Express 미들웨어에서 처리하지 말고 한군데에서 집중적으로 처리해라\n\n**핵심요약:** 관리자에게 메일을 보내거나 로깅을 하는 것과 같은 에러 처리는 에러가 발생할 때 모든 엔드포인트 (예를 들어 Express 미들웨어, cron 작업, 단위 테스트 등)가 호출하는 에러전용 중앙집중 객체로 캡슐화 되어야한다.\n\n**그렇게 하지 않을 경우:** 한 곳에서 에러를 처리하지 않는 것은 코드 중복과 부적절한 에러처리로 이어진다.\n\n🔗 [**자세히 보기: 중앙집중적으로 에러 처리하기**](./sections/errorhandling/centralizedhandling.korean.md)\n\n<br/><br/>\n\n## ![✔] 2.5 Swagger를 이용해 API 에러를 문서화하라\n\n**핵심요약:** API를 호출자들에게 어떤 에러가 돌아올 수 있는지 미리 알려주어서 에러를 충돌없이 신중하게 처리 할 수 있게 해주어라. RESTful API같은 경우엔 Swagger 같은 API 문서화 프레임워크를 통해 이루어진다. GraphQL의 경우엔 개요(schema)와 주석을 활용할 수 있다.\n\n**그렇게 하지 않을 경우:** API 클라이언트는 알수 없는 에러로 인한 충돌 후에 재시작을 결정할수도 있을 것이다. 참고로 당신의 API를 호출한 사람이 당신 자신 일수도 있다 (마이크로서비스 환경에서는 아주 일반적이다).\n\n🔗 [**자세히 보기: Swagger에서 에러 문서화하기**](./sections/errorhandling/documentingusingswagger.korean.md)\n\n<br/><br/>\n\n## ![✔] 2.6 낯선이가 들어오면 프로세스를 적절하게 중단하라\n\n**핵심요약:** 알수 없는 에러(프로그래머 에러, 모범사례 2.3번 참조)가 발생하면 어플리케이션의 건강상태가 불확실해진다. 일반적인 방법은 [Forever](https://www.npmjs.com/package/forever)나 [PM2](http://pm2.keymetrics.io/) 같은 '재시작' 도구로 프로세스를 다시 시작하는 것이다.\n\n**그렇게 하지 않을 경우:** 익숙치 않은 예외가 발생하면 일부 객체가 오류 상태 (예를 들어 전역적으로 사용되지만 내부 오류로 인해 이벤트를 더이상 내보내지 않는 event emitter)라서 향후의 모든 요청을 실패시키거나 미친것처럼 작동할 수 있다.\n\n🔗 [**자세히 보기: 프로세스 중단하기**](./sections/errorhandling/shuttingtheprocess.korean.md)\n\n<br/><br/>\n\n## ![✔] 2.7 에러 확인을 용이하게 해주는 안정된 로거를 사용하라\n\n**핵심요약:** Winston, Bunyan 혹은 Log4J와 같이 자리를 잡은 로깅 도구들은 에러를 발견하고 이해하는 속도를 높여준다. 그러니 console.log은 쓰지 마라\n\n**그렇게 하지 않을 경우:** 로그 검색 도구나 제대로 된 로그 뷰어 없이 console.log을 훑어보거나 복잡하게 꼬인 텍스트 파일을 일일이 읽어 보는 것은 야근을 부를 수 있다.\n\n🔗 [**자세히 보기: 발전된 로거를 사용하기**](./sections/errorhandling/usematurelogger.korean.md)\n\n<br/><br/>\n\n## ![✔] 2.8 당신이 선호하는 테스트 프레임워크로 에러 흐름을 테스트하라\n\n**핵심요약:** 전문적인 자동화 QA든 일반적인 수동 개발자 테스트든 당신의 코드가 긍정적인 상황에서 잘 동작할 뿐만 아니라 올바른 에러를 처리하고 반환하는지도 확실히 하라. Mocha & Chai와 같은 테스트 프레임워크를 쓰면 쉽게 처리할 수 있다 (\"Gist popup\"안의 코드 예제를 확인하라).\n\n**그렇게 하지 않을 경우:** 자동이든 수동이든 테스트가 없다면 당신은 당신의 코드가 올바른 에러를 반환하는지 믿지 못할 것이다. 의미 있는 에러가 없다면 에러 처리도 없는 것이다.\n\n🔗 [**자세히 보기: 에러 흐름 테스트하기**](./sections/errorhandling/testingerrorflows.korean.md)\n\n<br/><br/>\n\n## ![✔] 2.9 APM 제품을 사용하여 에러와 다운타임을 확인하라\n\n**핵심요약:** 모니터링 및 성능 제품(APM)은 미리 알아서 코드베이스와 API를 측정하고 자동적으로 당신이 놓친 에러, 충돌, 느린 부분을 강조 표시해준다.\n\n**그렇게 하지 않을 경우:** API의 성능과 다운타임을 측정하기위해 많은 노력을 들여야 할지도 모른다. 아마 당신은 실제 상황에서 어떤 코드 부분이 가장 느린지, 그것이 UX에 어떻게 영향을 미칠지 절대 알수없을 것이다.\n\n🔗 [**자세히 보기: APM 제품 사용하기**](./sections/errorhandling/apmproducts.korean.md)\n\n<br/><br/>\n\n## ![✔] 2.10 처리되지 않은 promise 거부(unhandled promise rejection)를 잡아라\n\n**핵심요약:** promise 안에서 발생한 예외는 개발자가 명시적으로 처리하지 않는 한 삼켜져 버려지게 된다. 당신의 코드가 `process.uncaughtException` 이벤트를 구독하고 있다고해도 마찬가지다! `process.unhandledRejection` 이벤트를 등록해서 이것을 극복해라.\n\n**그렇게 하지 않을 경우:** 당신의 에러는 삼켜지고 어떤 흔적도 남기지 않을 것이다. 걱정할 것이 없긴 하다.\n\n🔗 [**자세히 보기: 처리되지 않은 promise 거부 잡기**](./sections/errorhandling/catchunhandledpromiserejection.korean.md)\n\n<br/><br/>\n\n## ![✔] 2.11 전용 라이브러리를 이용해 인자값이 유효한지 검사하여 빠르게 실패하라(fail fast)\n\n**핵심요약:** 나중에 처리하기가 더 힘들어지는 지저분한 버그를 피하기 위해 Assert API 입력은 당신의 Express 모범사례가 되어야 한다. 당신이 Joi와 같은 유용한 헬퍼 라이브러리를 사용하지 않는 이상 유효성 검사 코드는 일반적으로 손이 많이 간다.\n\n**그렇게 하지 않을 경우:** 이런 상황을 생각해보자. 당신의 함수가 \"Discount\"라는 숫자를 받아야하는데 요청하는 사람이 넘겨주는 것을 깜빡했다. 그 후에 당신의 코드는 Discount!=0인지 아닌지 체크한다(사실 허용된 Discount의 값은 0보다 커야 한다). 그러면 사용자가 할인을 받게될 것이다. 보이는가? 엄청나게 지저분한 버그이다.\n\n🔗 [**자세히 보기: 빠르게 실패하기**](./sections/errorhandling/failfast.korean.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#목차\">⬆ 목차로 돌아가기</a></p>\n\n# `3. 코드 스타일`\n\n## ![✔] 3.1 ESLint를 사용하라\n\n**핵심요약:** [ESLint](https://eslint.org)는 발생 가능한 코드 에러를 체크하고 껄끄러운 간격(spacing)문제를 식별하는 것부터 프로그래머가 분별없이 에러를 던지는 것과 같은 코드의 심각한 안티 패턴을 감지하여 코드 스타일을 바꾸는 것에 대한 사실상의 표준이다. ESLint도 자동으로 코드스타일을 고칠 수 있지만 [prettier](https://www.npmjs.com/package/prettier)와 [beautify](https://www.npmjs.com/package/js-beautify)같은 수정 부분의 포맷을 맞춰주는 강력한 툴이 있고 ESLint와 함께 작동된다.\n\n**그렇게 하지 않을 경우:** 프로그래머가 쓸데없이 간격과 각 줄의 길이(line-width) 문제에 집중하고 프로젝트의 코드스타일에 대해 과도하게 생각하느라 시간을 낭비하게 된다.\n\n<br/><br/>\n\n## ![✔] 3.2 Node.js에 특화된 플러그인들\n\n**핵심요약:** vanlla JS만 지원하는 ESLinst의 표준 규칙 위에 [eslint-plugin-node](https://www.npmjs.com/package/eslint-plugin-node), [eslint-plugin-mocha](https://www.npmjs.com/package/eslint-plugin-mocha), [eslint-plugin-node-security](https://www.npmjs.com/package/eslint-plugin-security)와 같은 Node에 특화된 플러그인을 같이 사용하라.\n\n**그렇게 하지 않을 경우:** 많은 결함이 있는 Node.js 코드 패턴들이 안중에서 벗어날 수 있다. 예를 들어 프로그래머는 변수로된 파일경로를 이용해 require(파일경로변수)로 파일을 가져올수 있다. 이것은 공격자들이 어떤 JS script도 실행시킬 수 있게 한다. Node.js linter는 그러한 패턴을 감지하고 미리 알려준다.\n\n<br/><br/>\n\n## ![✔] 3.3 코드 블록의 중괄호를 같은 줄에서 시작하라\n\n**핵심요약:** 블록에서 중괄호를 여는 부분은 코드를 여는 문장과 같은 줄에 있어야 한다.\n\n### 코드 예제\n\n```javascript\n// 좋은 예\nfunction someFunction() {\n  // 코드 블록\n}\n\n// 나쁜 예\nfunction someFunction()\n{\n  // 코드 블록\n}\n```\n\n**그렇게 하지 않을 경우:** 이 모범사례를 적용하지 않는 것은 아래의 StackOverflow 스레드에서 보는 바와 같이 예기치못한 결과로 이어질 수 있다.\n\n🔗 [**자세히 보기:** \"왜 결과가 중괄호의 위치에 따라 달라지는 거죠?\" (Stackoverflow)](https://stackoverflow.com/questions/3641519/why-does-a-results-vary-based-on-curly-brace-placement)\n\n<br/><br/>\n\n## ![✔] 3.4 문장을 제대로 분리해라\n\n당신이 문장 끝에 세미콜론을 붙이든 아니든, 제대로 문장을 끝내지 않거나 자동 세미콜론 삽입과 관련된 흔한 실수들을 알아두면 잦은 구문 오류 (syntax error)를 제거하는데 도움이 된다.\n\n**핵심요약:** ESLint를 써서 제대로 문장을 끝내고 있는지 경각심을 불러일으켜라. [Prettier](https://prettier.io/) or [Standardjs](https://standardjs.com/)는 자동으로 이 문제를 해결해준다.\n\n**그렇게 하지 않을 경우:** 이전 섹션에서 본것처럼 자바스크립트의 인터프리터는 세미콜론이 없으면 자동으로 문장의 끝에 세미콜론을 붙이거나, 문장이 끝났어야 함에도 끝났다고 인지하지 못하여 의도되지 않은 결과를 야기할 수 있다. 대부분의 의도하지 않은 에러들은 assignment를 사용하고 imediate invoked function expression을 사용하는 것을 피함으로써 예방할 수 있다.\n\n### 3.4 코드 예제\n\n```javascript\n// 좋은 예\nfunction doThing() {\n    // ...\n}\n\ndoThing()\n\n// 좋은 예\n\nconst items = [1, 2, 3]\nitems.forEach(console.log)\n\n// 나쁜 예 — 예외 발생\nconst m = new Map()\nconst a = [1,2,3]\n[...m.values()].forEach(console.log)\n> [...m.values()].forEach(console.log)\n>  ^^^\n> SyntaxError: Unexpected token ...\n\n// 나쁜 예 — 예외 발생\nconst count = 2 // 2()를 호출하려 하지만, 2는 함수가 아니다\n(function doSomething() {\n  // 이쁜짓\n}())\n// immediate invoked function 전에 세미콜론을 놓던나, const 정의 후에 놓거나, 익명함수의 반환값을 변수에 저장하던가, 아니면 아예 IIFE를 쓰지 마라\n```\n\n🔗 [**Read more:** \"Semi ESLint rule\"](https://eslint.org/docs/rules/semi)\n🔗 [**Read more:** \"No unexpected multiline ESLint rule\"](https://eslint.org/docs/rules/no-unexpected-multiline)\n\n<br/><br/>\n\n## ![✔] 3.5 함수에 이름을 붙여라\n\n**핵심요약:** 클로저와 콜백을 포함한 모든 함수에 이름을 붙여라. 익명함수를 피해라. 이것은 노드 앱을 프로파일링 할때 특히 유용하다. 모든 함수를 명명하는 것은 당신이 메모리 스냅샷을 확인할때 당신이 보고있는 것이 무엇인지 쉽게 이해 할수있도록 해준다.\n\n**그렇게 하지 않을 경우:** 당신이 익명함수에서 메모리 소비가 많다는 것을 확인 했을 때 코어 덤프(메모리 스냅샷)을 이용해 프로덕션 문제를 디버깅하는 것이 어려울 수도 있습니다.\n\n<br/><br/>\n\n## ![✔] 3.6 변수, 상수, 함수, 클래스의 명명 규칙(naming convention)\n\n**핵심요약:** 상수와 변수 함수를 명명할때는 **_lowerCamelCase_** 를 사용하고 클래스를 명명 할때는 **_UpperCamelCase_**(첫 글자 대문자)를 사용하라. 이것은 일반 변수/함수와 인스턴스로 만들어야 하는 클래스를 구분하는데 도움을 것이다. 설명이 포함된 이름을 사용하되 이름을 짧게 유지하도록 해라.\n\n**그렇게 하지 않을 경우:** 자바스크립트는 먼저 인스턴스로 만들지 않고 직접 생성자(\"Class\")를 호출할 수 있는 세계 유일의 언어이다. 그러므로 클래스와 함수생성자는 UpperCamelCase를 통해 구분된다.\n\n### 코드예제\n\n```javascript\n// 클래스명은 UpperCamelCase 사용\nclass SomeClassExample {}\n\n// 상수명은 const 키워드와 lowerCamelCase 사용\nconst config = {\n  key: \"value\",\n};\n\n// 변수와 함수 이름은 lowerCamelCase 사용\nlet someVariableExample = \"value\";\nfunction doSomething() {}\n```\n\n<br/><br/>\n\n## ![✔] 3.7 let보다는 const를 사용하라. var는 개나 줘라\n\n**핵심요약:** `const`를 사용한다는 것은 변수에 한번 값이 할당되면 다시 할당할 수 없다는 것을 의미한다. `const`를 선호하는 것은 같은 변수를 다른 용도로 사용하는 것을 방지하고 당신의 코드를 더 깔끔하게 만드는데 도움을 준다. for 루프처럼 변수가 재할당 되어야 할 필요가 있으면 `let`을 사용하여 선언하라. `let`의 또 다른 중요한 부분은 선언된 변수를 사용하는 것이 변수가 정의된 블록범위(block scope) 안에서만 가능하다는 것이다. `var`는 블록범위가 아니라 함수범위(function scope)이며 이제 대신할 수 있는 const와 let이 있으므로 [ES6에서는 사용하면 안된다](https://hackernoon.com/why-you-shouldnt-use-var-anymore-f109a58b9b70).\n\n**그렇게 하지 않을 경우:** 자주 변경되는 변수를 따라가려면 디버깅이 훨씬 더 번거로워 진다.\n\n🔗 [**자세히 보기: JavaScript ES6+: var 혹은 let 혹은 const?**](https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75)\n\n<br/><br/>\n\n## ![✔] 3.8 require는 맨 처음에 오게하고 함수 안에서의 사용은 피하라\n\n**핵심요약:** 모듈을 각 파일의 시작이나 모든 함수의 앞부분 혹은 밖에서 require하라. 이 간단한 모범사례는 파일의 의존성을 맨 위에서 쉽고 빠르게 구분 할수 있게 해줄 뿐만 아니라 여러 잠재적인 문제를 피하게 해준다.\n\n**그렇게 하지 않을 경우:** require는 Node.js에서 동기로 실행된다. 함수 안에서 호출되면 다른 요청들을 더 중요한 시간에 처리되지 못하도록 막을 수 있다. 또한 require된 모듈이나 그것의 의존 모듈이 에러를 뱉거나 서버를 다운시키면, 함수 안에서 그 모듈이 require된 것이 아닌지 가능한 아주 빠르게 찾아야 할 것이다.\n\n<br/><br/>\n\n## ![✔] 3.9 파일 대신 폴더를 require 해라\n\n**핵심요약:** 폴더 안에서 모듈/라이브러리를 개발할 때, 모든 소비자가 내부를 노출하는 index.js 파일을 거치도록 해라. 이것은 모듈의 '인터페이스'역할을 하며 계약을 위반하지 않으면서 미래의 변경사항에 대해 유연하게 대처하도록 해준다.\n\n**그렇게 하지 않을 경우:** 파일 내부의 구조 혹은 서명을 변경하면 클라이언트와의 인터페이스가 손상될 수 있다.\n\n### 3.9 코드 예제\n\n```javascript\n// 좋은 예\nmodule.exports.SMSProvider = require(\"./SMSProvider\");\nmodule.exports.SMSNumberResolver = require(\"./SMSNumberResolver\");\n\n// 나쁜 예\nmodule.exports.SMSProvider = require(\"./SMSProvider/SMSProvider.js\");\nmodule.exports.SMSNumberResolver = require(\"./SMSNumberResolver/SMSNumberResolver.js\");\n```\n\n<br/><br/>\n\n## ![✔] 3.10 `===` 연산자를 사용하라\n\n**핵심요약:** 약하고 추상적인 같음연산자 `==` 보다 엄격한 항등연산자 `===`를 선호한다. `==`는 두 변수를 공용 타입으로 변환한 후에 비교한다. `===`에는 타입 변환이 없고 두 변수가 같으려면 타입도 같아야 한다.\n\n**그렇게 하지 않을 경우:** `==`으로 비교하는 경우 같지 않은 변수가 true로 반환 될 수있다.\n\n### 3.10 코드 예제\n\n```javascript\n\"\" == \"0\"; // false\n0 == \"\"; // true\n0 == \"0\"; // true\n\nfalse == \"false\"; // false\nfalse == \"0\"; // true\n\nfalse == undefined; // false\nfalse == null; // false\nnull == undefined; // true\n\n\" \\t\\r\\n \" == 0; // true\n```\n\n위의 모든 문장은 `===`를 사용했다면 false를 반환 했을것이다.\n\n<br/><br/>\n\n## ![✔] 3.11 async-await을 사용하고 콜백을 피하라\n\n**핵심요약:** Node 8의 LTS 버전은 현재 async-await을 완전히 지원한다. 이것은 콜백과 promise를 대체하여 비동기 코드를 다루는 새로운 방법이다. async-await은 비차단적(non-blocking)이고 비동기 코드를 동기 코드처럼 보이게 만든다. 당신의 코드에게 줄수 있는 최고의 선물은 try-catch와 같은 더 작고 친숙한 코드 구문을 제공하는 async-await을 사용하는 것이다.\n\n**그렇게 하지 않을 경우:** 콜백 스타일로 비동기 에러를 처리하는 것은 아마도 지옥으로 가는 가장 빠른 방법일것이다. 이런 스타일은 에러를 전부 확인하게 하고 어색한 코드 중첩을 다루게하며 코드 흐름을 추론하기 어렵게 만든다.\n\n🔗[**자세히 보기: async-await 1.0 가이드**](https://github.com/yortus/asyncawait)\n\n<br/><br/>\n\n## ![✔] 3.12 두꺼운(=>) 화살표 함수를 사용하라\n\n**핵심요약:** async-await을 사용하고 함수 인자를 사용하는 것을 피하는 것이 권장되지만 promise와 콜백을 받는 예전 API를 다룰 때는 화살표 함수가 코드 구조를 더 작게해주고 루트 함수의 어휘적 맥락(lexical context)을 유지시켜 준다. (`this`라던가)\n\n**그렇게 하지 않을 경우:** (ES5의 함수 내의) 긴 코드는 버그에 취약하고 읽기도 번거롭다.\n\n🔗 [**Read mode: 화살표 함수를 받아들일 시간이다**](https://medium.com/javascript-scene/familiarity-bias-is-holding-you-back-its-time-to-embrace-arrow-functions-3d37e1a9bb75)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#목차\">⬆ 목차로 돌아가기</a></p>\n\n# `4. 테스트 및 전체 품질 관리`\n\n## ![✔] 4.1 다른건 못해도 최소한 API (컴포넌트) 테스트는 써라\n\n**핵심요약:** 대부분의 프로젝트는 짧은 일정으로 인해 자동화 된 테스트가 없거나 후일 통제를 벗어난 이른바 \"시험용 프로젝트\" 라는 이유로 버려진다. 그러므로, 쓰기에도 제일 쉽고 유닛 테스트보다 더 넓게 커버할 수 있는 API 테스트를 우선으로 시작해라. ([포스트맨](https://www.getpostman.com/) 같은 도구를 이용하지 않고도 API 테스트를 쓸 수 있다.) 나중에 시간과 자원이 더 나면 그때 유닛테스트, DB 테스트, 성능 테스트 등의 좀 더 발전된 테스트 종류를 계속 더해라.\n\n**그렇게 하지 않을 경우:** 유닛 테스트 쓰는데 시간을 몇 날 며칠을 쓰고선 시스템 커버리지가 20% 밖에 안된다는걸 깨닫게 될 수 있다.\n\n<br/><br/>\n\n## ![✔] 4.2 테스트 이름에 이 3가지를 포함해라\n\n**핵심요약:** 코드 내부에 익숙하지 않은 QA 엔지니어들과 개발자들에게 따로 설명이 필요 없도록 requirement 계층에서 이미 자명하도록 해라. 무엇을 (unit under test), 어떤 환경에서, 어떤 결과를 예상하고 테스트 하는 것인지 테스트 이름에 명시해라.\n\n**그렇게 하지 않을 경우:** 배포에 실패하였습니다, “프로덕트 추가” 라는 테스트가 실패했습니다. 이런 메시지를 보고 정확히 뭐가 잘못되었는지 알 수 있는가?\n\n🔗 [**자세히 보기: Include 3 parts in each test name**](./sections/testingandquality/3-parts-in-name.md)\n\n<br/><br/>\n\n## ![✔] 4.3 AAA 패턴을 따라 테스트를 구축해라\n\n**핵심요약:** 테스트를 다음 세가지 부분으로 명확히 나누어라: 준비 (arrange), 실행 (act), 표명 (assert). 제일 먼저 테스트를 준비하고, 그 다음 테스트 단위(unit under test)를 실행하고, 마지막은 확인 단계다. 이 구조를 따르는 것은 읽는이가 힘들여 머리를 쓰지 않고도 테스트 설계를 이해할 수 있도록 보장한다.\n\n**그렇게 하지 않을 경우:** 매일 하루종일 주요 코드를 읽는데 시간을 오래 쓰는 것도 모자라 간단해야하는 테스트 부분에도 열심히 머리를 써야 할 것이다.\n\n🔗 [**Read More: Structure tests by the AAA pattern**](./sections/testingandquality/aaa.md)\n\n<br/><br/>\n\n## ![✔] 4.4 린터를 사용해서 코드의 문제점을 찾아내라\n\n**핵심요약:** 코드 린터를 사용해서 기본적인 품질을 확인하고 안티패턴을 초기에 찾아내라. 테스트 하기도 전에 먼저 돌리고, pre-commit git-hook으로 추가해서 문제를 검토하고 정정하는 시간을 최소화해라. [3문단](#3-코드-스타일)의 코드 스타일 관례들도 확인해라.\n\n**그렇게 하지 않을 경우:** 안티패턴과 취약한 코드가 상용환경에 넘어갈 수도 있다.\n\n<br/><br/>\n\n## ![✔] 4.5 고정적인 공용 테스트 데이터나 seeds는 피하고, 테스트별로 데이타를 붙여라\n\n**핵심요약:** 테스트간의 간섭과 결합도(coupling)를 최소화하고 테스트 흐름을 추론하기 쉽도록 테스트들은 각자 자신만의 DB 행 (row) 집합을 만들어 써야 한다. 테스트가 DB 데이터를 가져오거나 데이터가 존재한다고 간주해야 할 때마다 다른 레코드를 변형시키지 않도록 그 데이터를 직접 추가하여야 한다.\n\n**그렇게 하지 않을 경우:** 실패하는 테스트때문에 전개(deployment)가 중단되었다고 가정해 보자. 이제 팀원들은 소중한 시간을 조사하는데 소모한 뒤 슬픈 결론을 내릴 것이다: 시스템은 잘 작동하지만, 테스트간의 상호 간섭으로 빌드 실패.\n\n🔗 [**자세히 보기: Avoid global test fixtures**](./sections/testingandquality/avoid-global-test-fixture.md)\n\n<br/><br/>\n\n## ![✔] 4.6 끊임없이 취약한 dependency를 점검해라\n\n**핵심요약:** Express같은 네임드 dependency도 알려진 취약점이 있다. 이건CI에서 매 빌드마다 호출할 수 있는 🔗 [npm audit](https://docs.npmjs.com/cli/audit)나 🔗 [snyk.io](https://snyk.io)같은 커뮤니티 혹은 상업용 도구를 사용하면 쉽게 해결할 수 있다.\n\n**그렇게 하지 않을 경우:** 전용 도구없이 코드를 취약점 없이 깨끗하게 유지하려면 온라인 출판물들을 항상 유심히 찾아읽어야 한다. 한마디로 노가다.\n\n<br/><br/>\n\n## ![✔] 4.7 테스트를 태그하라 (#테스트)\n\n**핵심요약:** 다른 종류의 테스트는 서로 다른 시나리오를 바탕으로 실행해야한다: 빌드 성공유무 테스트(quick smoke)나 IO 입출력이 없는 테스트는 개발자가 파일을 저장하거나 commit 할 때마다 실행하고, 더 포괄적인 단대단 (end-to-end) 테스트는 보통 풀리퀘스트를 제출 할 때마다 실행한다. 이건 테스트를 #cold #api #sanity 와 같은 키워드로 태그해서 원하는 테스트들만 부분적으로 grep 으로 test harness를 검색해서 실행하면 된다. 예를 들면, [모카](https://mochajs.org/)에서 sanity 테스트 그룹만 실행하고 싶다면 이렇게 하면 된다: mocha --grep 'sanity'\n\n**그렇게 하지 않을 경우:** 개발자가 조금씩 코드를 바꿀때마다 DB 쿼리를 한다스씩 보내는 테스트까지 포함해서 전부 실행하면 개발 속도도 느려지고 개발자들도 점점 테스트를 실행하는걸 꺼리게 된다\n\n<br/><br/>\n\n## ![✔] 4.8 테스트 범위를 확인하여 안좋은 테스트 패턴을 잡아내라\n\n**핵심요약:** [이스탄불](https://github.com/istanbuljs/istanbuljs)/[NYC](https://github.com/istanbuljs/nyc)같은 코드 커버리지 도구가 좋은 이유는 세가지가 있다: 무료이고 (거져먹는거다), 테스트 범위가 줄어드는것을 잡아내주고, 마지막으로 테스트 부조화를 하이라이트한다: 색으로 나타낸 코드 커버리지 리포트를 보다보면 catch 절 같이 테스트 하지 않는 부분들을 알아채기 시작할것이다. (테스트는 보통 경로만 테스트하기에 앱이 에러가 날 경우에는 어떻게 반응하는지는...) 커버리지가 일정 기준 이하로 떨어지면 빌드가 자동으로 실패하게 해라.\n\n**그렇게 하지 않을 경우:** 코드의 상당한 범위가 테스트로 커버되지 않더라도 자동으로 측정되지 않으니 알 길이 없다.\n\n<br/><br/>\n\n## ![✔] 4.9 오래되어 뒤떨어진 패키지는 없는지 검사해라\n\n**핵심요약:** 설치된 패키지중 outdated 된 패키지는 없는지 선호하는 도구 (예: 'npm outdated'나 [npm-check-updates](https://www.npmjs.com/package/npm-check-updates))를 써서 확인하고, 심할 경우 빌드가 실패하도록 CI 경로에 이 체크를 주입해라. 이를테면 설치된 패키지가 패치 commit 5개 이상 뒤쳐졌거나 (예: 로컬은 1.3.1버젼인데 repository 버젼은 1.3.8이라던가) 제작자가 deprecated 되었다고 태그하면 빌드를 죽이고 이 버젼을 배포하지 못하게 막아라.\n\n**그렇게 하지 않을 경우:** 제작자가 직접 불안정하다고 태그한 패키지가 프로덕션에서 놀아날 수 있다\n\n<br/><br/>\n\n## ![✔] 4.10 프로덕션과 비슷한 환경에서 e2e 테스트를 실행해라\n\n**핵심요약:** 실제 데이터를 쓰는 end to end 테스트는 DB같은 여러 묵직한 서비스에 의존하기에 CI 프로세스의 취약점이었다. 가능한 한 프로덕션과는 최대한 동떨어진 환경을 써라.\n\n**그렇게 하지 않을 경우:** docker-compose 없이는 팀들이 테스트 환경별로 (각 개발자의 컴퓨터 포함) 테스트 DB를 유지하고, 환경에 따라 테스트 결과가 다르게 나오지 않도록 이 모든 DB들을 동기화해야한다.\n\n<br/><br/>\n\n## ![✔] 4.11 정적분석도구를 이용해서 refactor를 정기적으로 해라\n\n**핵심요약:** 정적분석도구(static analysis tool)는 코드의 품질을 객관적으로 개선하고 코드 유지를 쉽게 해준다. 코드스멜을 감지하면 CI 빌드가 실패하도록 정적분석도구를 넣어주면 된다. 이게 단순한 린보팅다 나은 주된 이유로는 여러 파일에 걸친 맥락에서 품질을 점검할 수 있다는 점 (예: 중복된 코드 감지), 더 발달된 분석을 할 수 있다는 점 (예: 코드 복잡도), 코드 문제의 전적과 진전을 따라 볼 수 있다는 점이 있다. 쓸만한 도구의 예를 두가지를 들자면 [Sonarqube](https://www.sonarqube.org/) (2,600+ [stars](https://github.com/SonarSource/sonarqube)) 와 [Code Climate](https://codeclimate.com/) (1,500+ [stars](https://github.com/codeclimate/codeclimate))가 있다.\n\n**그렇게 하지 않을 경우:** 아무리 반짝이는 새로나온 라이브러리나 최첨단 기능을 써봤자 코드 품질이 불량하면 버그와 성능은 못고친다\n\n🔗 [**자세히 보기: Refactoring!**](./sections/testingandquality/refactoring.md)\n\n<br/><br/>\n\n## ![✔] 4.12 CI 플랫폼은 신중하게 선택해라 (Jenkins vs CircleCI vs Travis vs 나머지)\n\n**핵심요약:** 지속적 통합 플랫폼(CICD)은 품질 관리 도구(예: 테스트, 린트)들을 돌릴 수 있게 플러그인 생태계가 활발해야 한다. 예전에는 대부분의 프로젝트들이 배우기는 어려워도 커뮤니티도 제일 크고 강력한 플랫폼을 가진 [Jenkins](https://jenkins.io/)를 기본으로 썼다. 요즘엔 [CircleCI](https://circleci.com)등의 SaaS 해결책을 쓰는게 훨씬 더 쉬워졌다. 이런 도구들은 인프라 전체를 관리하는 부담 없이도 유연한 CI 경로를 만들 수 있게 해준다. 결국에는 안전성과 빠름의 상호 절충이다 - 조심해서 선택해라.\n\n**그렇게 하지 않을 경우:** 잘 알려지지 않은 중소 솔루션 업체를 쓰다간 흔치 않은 고급 설정을 커스터마이징 해야할 때 막혀버릴 수도 있다. 하지만 반대로, Jenkins를 택하면 인프라를 수축하는데 소중한 시간을 다 빼앗길 수도 있다.\n\n🔗 [**자세히 보기: Choosing CI platform**](./sections/testingandquality/citools.korean.md)\n\n## ![✔] 4.13 미들웨어들은 격리시켜 테스트해라\n\n**핵심요약:** 여러 요청에 걸친 막대한 로직을 미들웨어가 수용하는 경우, 웹 프레임워크 전체를 깨우지 않고 격리 상태로 테스트 할만한 가치가 있다. {req, res, next} 객체들을 스텁(stub)하여 염탐(spy)하면 쉽게 달성할 수 있다.\n\n**그렇게 하지 않을 경우:** Express 미들웨어의 버그 === 거의 모든 요청의 버그\n\n🔗 [**자세히 보기: Test middlewares in isolation**](./sections/testingandquality/test-middlewares.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#목차\">⬆ 목차로 돌아가기</a></p>\n\n# `5. 운영환경으로 전환하기`\n\n## ![✔] 5.1. 모니터링\n\n**핵심요약:** 모니터링은 고객이 문제를 발견하기 전에 먼저 발견하는 게임이다. 모니터링에는 분명히 전례가없는 중요성을 부여해야한다. 솔루션에 너무 많은 기능들이 들어가 있을 가능성이 있으므로 확인해야만하는 기본 항목을 내부적으로 정의하고 나서 추가적인 기능들을 살펴보고 필요한 기능들이 모두 들어있는 솔루션을 선택하라. 아래의 'gist'를 클릭하면 솔루션 개요를 볼 수 있다\n\n**그렇게 하지 않을 경우:** 오류 === 고객의 실망. 간단하다\n\n🔗 [**자세히 보기: 모니터링!**](./sections/production/monitoring.md)\n\n<br/><br/>\n\n## ![✔] 5.2. 스마트 로깅으로 투명성을 높여라\n\n**핵심요약:** 로그는 디버그 텍스트가 모여있는 의미없는 창고일 수도 있고, 앱의 상태를 대시보드로 볼 수 있도록 만들어 줄 수 있는 유용한 데이터일 수도 있다. 원하는 정보 (예: 오류율, 트랜잭션이 서비스와 서버를 거치는 경로를 따라가기, 기타등등)를 쉽게 추출 할 수 있도록 로그를 어떻게 수집, 저장 및 분석하는지 첫날부터 미리 계획해라.\n\n**그렇게 하지 않을 경우:** 이해하기 힘든 블랙박스가 되어버려서 필요한 정보를 추가하기 위해 모든 로그를 다시 작성하게 될것이다\n\n🔗 [**자세히 보기: Increase transparency using smart logging**](./sections/production/smartlogging.md)\n\n<br/><br/>\n\n## ![✔] 5.3. 가능한 모든 것들(예: gzip, SSL)을 reverse proxy에 위임하라\n\n**핵심요약:** Node는 gzip이나 SSL Termination과 같이 CPU 집약적인 작업에 약하다. 이런게 필요할 경우 '실제' 미들웨어 서비스인 nginx, HAproxy 혹은 클라우드 서비스를 사용해야한다\n\n**그렇게 하지 않을 경우:** 불쌍한 싱글 스레드가 어플리케이션의 코어를 처리하는 대신 인프라 작업을 수행하느라 바빠져서 성능이 저하될 것이다\n\n🔗 [**자세히 보기: 가능한 모든 것들(예: gzip, SSL)을 reverse proxy에 위임하라**](./sections/production/delegatetoproxy.md)\n\n<br/><br/>\n\n## ![✔] 5.4. 의존성을 잠궈라(Lock dependencies)\n\n**핵심요약:** 코드는 모든 환경에서 동일해야하지만 놀랍게도 npm을 사용하면 기본적으로 환경간에 종속성이 달라질 수 있는데, 다양한 환경에서 패키지를 설치하면 패키지의 최신 패치 버전을 가져오기 때문이다. npm config 파일인 .npmrc를 사용하여이 문제를 극복해라. 각 환경에 각 패키지의 최신 버전이 아닌 정확한 버전을 저장하도록 알려준다. 또는 세밀하게 제어하려면 `npm shrinkwrap`을 사용하라. \\* 업데이트 : NPM5부터는 종속성이 기본적으로 잠겨 있다. 새로운 패키지 관리자인 Yarn도 기본적으로 잠겨 있다.\n\n**그렇게 하지 않을 경우:** QA팀은 코드를 철저히 테스트 했음에도 테스트 환경과는 다르게 작동하는 버전을 승인할 것이다. 심지어 같은 프로덕션 클러스터의 여러 서버가 서로 다른 코드를 실행할 수도 있다.\n\n🔗 [**자세히 보기: Lock dependencies**](./sections/production/lockdependencies.md)\n\n<br/><br/>\n\n## ![✔] 5.5. 올바른 도구를 이용해 프로세스 가동시간을 사수해라\n\n**핵심요약:** 프로세스는 계속 진행되어야 하며 실패시 다시 시작해야한다. 간단한 시나리오의 경우 PM2와 같은 프로세스 관리 도구로도 충분하지만 오늘날 '도커화 된' 세계에서는 클러스터 관리 도구도 고려해야한다\n\n**그렇게 하지 않을 경우:** 명확한 전략없이 수십 개의 인스턴스와 너무 많은 도구 (클러스터 관리, 도커, PM2)를 실행하면 데브옵스가 혼란을 겪을 수 있다\n\n🔗 [**자세히 보기: Guard process uptime using the right tool**](./sections/production/guardprocess.md)\n\n<br/><br/>\n\n## ![✔] 5.6. 모든 CPU를 활용하라\n\n**핵심요약:** 기본적으로 Node 어플리케이션은 하나의 CPU 코어에서 실행되고 다른 CPU는 동작하지 않는다. 노드 프로세스를 복제하여 모든 CPU를 활용하는 것은 당신의 몫이다. 중소형 어플리케이션의 경우 노드 클러스터 또는 PM2를 사용하면 된다. 더 큰 앱의 경우 Docker 클러스터(예: K8S, ECS) 또는 Linux 초기화 시스템(예: systemd)을 기반으로하는 배포 스크립트를 사용하여 프로세스를 복제하는 것이 좋다\n\n**그렇게 하지 않을 경우:** 앱이 사용 가능한 리소스 중 25%(!)에도 못 미치게 활용할 것이다. 일반적인 서버는 CPU 코어가 4개 이상임에도 Node를 기본형으로 배포하면 그 중 단 1 개만 사용하게 될것이다 (AWS beanstalk과 같은 PaaS 서비스 사용해도 마찬가지)\n\n🔗 [**자세히 보기: 모든 CPU를 활용하라**](./sections/production/utilizecpu.md)\n\n<br/><br/>\n\n## ![✔] 5.7. ‘유지 관리용 엔드 포인트’를 따로 만들어라\n\n**핵심요약:** 보안적으로 안전한 API에서 메모리 사용 및 REPL 등과 같은 시스템 관련 정보를 노출하라. 표준 및 실전 테스트(battle-tests) 도구를 사용하는 것이 좋기는 하지만 몇몇 유용한 정보와 작업은 코드를 통해 쉽게 수행 할 수 있다\n\n**그렇게 하지 않을 경우:** 단지 서버 진단을 목적으로 일부 정보를 추출하기 위하여 상용서버에 코드를 배포하는 \"진단용 배포\"를 자주 수행하고 있게 될 것이다\n\n🔗 [**자세히 보기: Create a ‘maintenance endpoint’**](./sections/production/createmaintenanceendpoint.md)\n\n<br/><br/>\n\n## ![✔] 5.8. APM을 사용하여 오류 및 가동 중지 시간을 발견하라\n\n**핵심요약:** 어플리케이션 성능 관리 제품(Application Performance Management, APM)은 코드베이스 및 API를 사전에 측정하여 기존 모니터링 시스템을 뛰어 넘어 서비스 및 계층 전반에서 사용자 경험을 측정한다. 예를 들어 일부 APM 제품은 최종 사용자 측면에서 느리게 로드되는 트랜잭션을 강조 표시 하면서 근본 원인을 제시할 수 있다\n\n**그렇게 하지 않을 경우:** API 성능 및 가동 중지 시간을 측정하는 데 많은 노력을 기울임에도 실전에서 가장 느린 코드 부분이 어느것인지, 그리고 이것이 UX에 미치는 영향을 알지 못할 것이다\n\n🔗 [**자세히 보기: Discover errors and downtime using APM products**](./sections/production/apmproducts.md)\n\n<br/><br/>\n\n## ![✔] 5.9. 당신의 코드는 언제든 상용에 배포될수 있다\n\n**핵심요약:** 첫날부터 끝을 염두에두고 코드를 작성하라. 다소 모호하게 들릴것 같아서 상용 유지 보수와 밀접하게 관련된 몇 가지 개발 팁을 편찬해 두었다 (아래의 gist를 클릭하라)\n\n**그렇게 하지 않을 경우:** 세계 최고의 IT/DevOps 전문가도 형편없이 쓰여진 코드로 이루어진 시스템은 구하지 못한다\n\n🔗 [**자세히 보기: Make your code production-ready**](./sections/production/productioncode.md)\n\n<br/><br/>\n\n## ![✔] 5.10. 메모리 사용량을 측정하고 보호해라\n\n**핵심요약:** Node.js는 메모리와 관련하여 논란의 여지가 있다: v8 엔진은 메모리 사용량 (1.4GB)에 대한 제한이 있으며 노드의 코드에서 메모리 누수가 발생하는 알려진 방법이 존재하므로 노드의 프로세스 메모리를 관찰하는 것이 필수적이다. 작은 응용 프로그램에서는 Shell 명령을 사용하여 주기적으로 메모리를 측정 할 수 있지만 중대형 어플리케이션에서는 강력한 모니터링 시스템을 통해 메모리를 감시하는 것을 고려하라\n\n**그렇게 하지 않을 경우:** [월마트](https://www.joyent.com/blog/walmart-node-js-memory-leak)에서 일어났던 것처럼 메모리가 하루에 수백 메가바이트씩 누수 될 수 있다\n\n🔗 [**자세히 보기: 메모리 사용량 측정 및 보호**](./sections/production/measurememory.md)\n\n<br/><br/>\n\n## ![✔] 5.11. Node.js에서 프론트 엔드 자산을 빼라\n\n**핵심요약:** Node는 단일 스레드 모델을 쓰기 때문에 정적 파일을 많이 처리하게 되면 성능이 많이 저하되기 때문에 전용 미들웨어(nginx, S3, CDN 등)를 사용하여 프론트 엔드 컨텐츠를 제공하는게 좋다\n\n**그렇게 하지 않을 경우:** 단일 노드 스레드는 수백 개의 html/이미지/angular/react 파일을 스트리밍 하느라 바빠서 정작 천직인 동적 컨텐츠를 전달하는 작업에는 신경쓸 겨를이 없을것이다.\n\n🔗 [**자세히 보기: Get your frontend assets out of Node**](./sections/production/frontendout.md)\n\n<br/><br/>\n\n## ![✔] 5.12. 무상태(stateless)로 운영하고, 거의 매일 서버를 재부팅하라\n\n**핵심요약:** 어떤 유형의 데이터(예: 유저 세션, 캐시, 업로드된 파일)든 외부 데이터 저장소에 저장하라. 서버를 주기적으로 재부팅/교체하는 것을 고려하거나 명시적으로 무상태로 운영하게 만드는 Serverless 플랫폼(예: AWS Lambda)을 사용하는 것을 고려하라\n\n**그렇게 하지 않을 경우:** 해당서버에 오류가 발생하면 해당 서버만 제거하면 되는 것이 아니라 어플리케이션의 다운타임이 발생하게된다. 게다가 특정 서버에 의존하기 때문에 수평적 확장이 힘들어질 것이다\n\n🔗 [**자세히 보기: Be stateless, kill your Servers almost every day**](./sections/production/bestateless.md)\n\n<br/><br/>\n\n## ![✔] 5.13. 취약점을 자동으로 탐지하는 도구를 사용해라\n\n**핵심요약:** Express와 같은 가장 신뢰할만한 모듈조차도 시스템을 위험에 빠뜨릴 수있는 알려진 취약점이 존재한다. 이는 취약성을 지속적으로 (로컬 또는 GitHub에서) 확인하고 경고하는 커뮤니티 및 상용 도구를 사용하면 쉽게 길들일 수 있으며 일부는 즉시 패치 할 수도 있다\n\n**그렇게 하지 않을 경우:** 전용 도구없이 취약점으로부터 코드를 깨끗하게 유지하려면 새로운 취약점에 대한 데이터를 지속적으로 확인해야 할것이다\n\n🔗 [**자세히 보기: Use tools that automatically detect vulnerabilities**](./sections/production/detectvulnerabilities.md)\n\n<br/><br/>\n\n## ![✔] 5.14. 로깅을 할때 트랜잭션 ID를 할당하라\n\n**핵심요약:** 하나의 요청 내에서 각 로그에 동일한 식별자(transaction-id: {some value})를 할당하라. 그렇게하면 로그를 분석할때 에러 전과 후에 어떤 일이 생겼는지 쉽게 알수있다. 비동기적인 특성때문에 Node.js에서 구현하기 쉽지는 않다. 아래의 예제를 확인하라\n\n**그렇게 하지 않을 경우:** 이전에 어떤일이 일어났는지에 대한 컨텍스트 없이 에러 로그를 확인하는 것은 문제를 해결하는 것을 더 어렵고 느리게 만든다\n\n🔗 [**자세히 보기: Assign ‘TransactionId’ to each log statement**](./sections/production/assigntransactionid.md)\n\n<br/><br/>\n\n## ![✔] 5.15. `NODE_ENV=production`로 설정하라\n\n**핵심요약:** 상용 최적화가 활성화 되어야하는지 아닌지를 표시하기 위해 `NODE_ENV`를 'production' 혹은 'development'로 설정하라. 많은 npm 패키지가 현재 환경을 확인하고 최적화한다\n\n**그렇게 하지 않을 경우:** 이 단순한 속성을 빠뜨리면 성능이 크게 저하된다. 예를 들어 Express에서 서버 사이드 렌더링(Server Side Rendering, SSP)을 사용할때 `NODE_ENV`를 빠뜨리면 3배 느려진다\n\n🔗 [**자세히 보기: Set NODE_ENV=production**](./sections/production/setnodeenv.md)\n\n<br/><br/>\n\n## ![✔] 5.16. 원자성의 자동화된 무중단 배포를 설계하라\n\n**핵심요약:** 연구 결과에 따르면 자주 배포를 하는 팀이 상용버전에서 심각한 에러가 발생할 가능성을 낮춘다고 한다. 위험이 따르는 수동적인 과정과 서비스 다운타임이 필요하지 않은 빠르고 자동화된 배포는 배포 프로세스를 크게 향상시킨다. 간소화된 배포의 표준이 된 Docker와 CI 도구를 결합하여 이를 달성할 수 있다.\n\n**그렇게 하지 않을 경우:** 오래걸리는 배포 작업 -> 상용버전 중지시간 및 사람에 의한 에러 -> 배포를 하는 것에 자신감이 없어진 팀 -> 더 적은 배포와 기능들\n\n<br/><br/>\n\n## ![✔] 5.17. Node.js의 LTS 릴리즈 버전을 사용해라\n\n**핵심요약:** LTS 버전의 Node.js를 사용하여 중요한 버그 수정, 보안 업데이트 및 성능 향상을 받아라\n\n**그렇게 하지 않을 경우:** 새로 발견된 버그나 취약점이 상용에서 운영중인 어플리케이션을 악용하는데 사용될 수 있으며, 다양한 모듈들에서 지원을 하지 않게 되고 유지보수하는 것이 힘들어 지게될것이다\n\n🔗 [**자세히 보기: Use an LTS release of Node.js**](./sections/production/LTSrelease.md)\n\n<br/><br/>\n\n## ![✔] 5.18. 앱 내에서 로그를 라우팅하지 말라\n\n**핵심요약:** 로그의 목적지는 개발자가 어플리케이션 코드에 하드코딩해서는 안되고, 대신 프로그램이 실행되는 실행환경에서 정의되어야 한다. 개발자는 로거 유틸리티를 이용하여 로그를 `stdout`에 작성하고 상용환경(컨테이너, 서버 등)이 해당 `stdout`스트림을 적절한 목적지(즉 Splunk, Graylog, ElasticSearch 등)로 수송해야한다\n\n**그렇게 하지 않을 경우:** 어플리케이션 로그 라우팅 처리 === 확장성 저하, 로그 유실, 관심사의 분리 실패(Separation of Concerns, SoC)\n\n🔗 [**자세히 보기: Log Routing**](./sections/production/logrouting.md)\n\n<br/><br/>\n\n## ![✔] 5.19. `npm ci`로 패키지를 설치해라\n\n**핵심요약** 상용환경에서 쓰는 코드가 테스트할떄 쓴 패키지 버젼과 동일하다는 것을 반드시 보장해야 한다. `npm ci`를 써서 의존하는 패키지를 모두 package.json과 package-lock.json만들 따른 클린설치를 해라.\n\n**그렇게 하지 않을 경우:** QA팀이 코드를 승인하기 전에 철저히 테스트해도 상용환경에서는 다르게 작동할것이다. 게다가 같은 프로덕션 클러스터의 다른 서버들이 서로 다른 코드를 실행할 수도 있다.\n\n🔗 [**자세히 보기: npm ci 쓰기**](./sections/production/installpackageswithnpmci.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#목차\">⬆ 목차로 돌아가기</a></p>\n\n# `6. 보안`\n\n<div align=\"center\">\n<img src=\"https://img.shields.io/badge/OWASP%20Threats-Top%2010-green.svg\" alt=\"54 items\"/>\n</div>\n\n## ![✔] 6.1. linter 보안 규칙 수용\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20XSS%20-green.svg\" alt=\"\"/></a>\n\n**핵심요약:** [eslint-plugin-security](https://github.com/nodesecurity/eslint-plugin-security)와 같은 보안 관련 linter 플러그인을 사용하여 보안 취약점과 문제점을 가능한 한 빨리 잡아라. 이것은 eval 사용, 자식 프로세스 호출, string literal(예: 사용자 입력)을 쓰는 모듈 불러오기 같은 보안 취약점을 잡는데 도움이 될 수 있다. 보안 linter가 잡는 코드를 보려면, 아래의 '자세히 보기'을 클릭해라.\n\n**그렇게 하지 않을 경우:** 개발과정에서는 이해하기 쉬운 보안 약점이었음에도 상용환경에서는 주요쟁점이 된다. 또, 프로젝트가 일관된 보안 프렉티스를 따르지 않아, 취약점이 노출되거나 민감한 정보가 원격 저장소에 유출될 수 있다.\n\n🔗 [**자세히 보기: Lint rules**](./sections/security/lintrules.md)\n\n<br/><br/>\n\n## ![✔] 6.2. 미들웨어로 병행연산 (concurrent) 요청들을 제한해라\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**핵심요약:** DOS 서비스 거부 공격은 흔하며 하기에도 비교적 쉽다. 클라우드 로드밸런서, 클라우드 방화벽, nginx, [rate-limiter-flexible](https://www.npmjs.com/package/rate-limiter-flexible) 패키지나, (소규모의 덜 중요한 앱의 경우) 비율제한 미들웨어(예: [express-rate-limit](https://www.npmjs.com/package/express-rate-limit))를 써서 비율제한을 시행해라.\n\n**그렇게 하지 않을 경우:** 애플리케이션이 서비스 거부 공격을 받으면 실제 이용자들이 받는 서비스가 저하되거나 먹통이 된다.\n\n🔗 [**자세히 보기: Implement rate limiting**](./sections/security/limitrequests.md)\n\n<br/><br/>\n\n## ![✔] 6.3 기밀은 설정 파일에서 빼거나 패키지를 이용해서 암호화해라\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A3:Sensitive%20Data%20Exposure%20-green.svg\" alt=\"\"/></a>\n\n**핵심요약:** 기밀사항은 절대 평문 형태로 설정 파일이나 소스코드에 저장하지 말아라. 그 대신 Vault나 Kubernetes/Docker Secrets나 환경변수 같은 기밀사항 관리 시스템을 써라. 부득이하게 소스 콘트롤에 기밀사항을 저장해야 하는 경우, 반드시 암호화해서 관리해라 (rolling keys, 만료, 감사 등). pre-commit/push hook을 사용해서 실수로 기밀사항을 버젼 콘트롤에 커밋하는 것을 막아라.\n\n**그렇게 하지 않을 경우:** 비공개 저장소라 하여도 소스 제어가 실수로 공개되면 모든 기밀사항이 그대로 드러난다. 외부관계자가 소스제어에 접근이 가능해지면 의도치 않아도 관련 시스템(데이터베이스, API, 서비스 등)에도 접근을 허락하는것과 마찬가지다.\n\n🔗 [**자세히 보기: Secret management**](./sections/security/secretmanagement.md)\n\n<br/><br/>\n\n## ![✔] 6.4. ORM/ODM 라이브러리를 사용해 쿼리 주입 공격을 막아라\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a>\n\n**핵심요약:** SQL/NoSQL 주입과 같은 악의적인 공격을 막기 위해서는 ORM/ODM을 쓰거나, 데이터를 항상 이스케이프 처리 해 주거나 named or indexed parameterized queries를 지지하고, expected data type의 사용자 입력을 확인해주는 데이터베이스 라이브러리를 항상 활용해라. 자바스크립트 템플릿 문자열(template strings)이나 문자열 병합(string concatenation)으로 값을 주입하면 앱을 광범위한 취약점에 노출시키므로 절대 그대로 써서는 안된다. 평판이 좋은 Node.js 데이터 접근 라이브러리들(예: [Sequelize](https://github.com/sequelize/sequelize), [Knex](https://github.com/tgriesser/knex), [mongoose](https://github.com/Automattic/mongoose))은 모두 주입 공격을 막아주는 보호대책이 내장되어있다.\n\n**그렇게 하지 않을 경우:** 확인되지 않거나 (unvalidated) 살균되지 않은 (unsanitized) 사용자 입력은 MangoDB for NoSQL를 쓸 때 operator injection를 초래할 수 있고, 제대로 된 위생처리 시스템이나 ORM을 쓰지 않는것은 SQL 주입 공격을 쉽게 만들어 엄청난 취약점을 만들어낼 수 있다.\n\n🔗 [**자세히 보기: Query injection prevention using ORM/ODM libraries**](./sections/security/ormodmusage.md)\n\n<br/><br/>\n\n## ![✔] 6.5. 일반적인 보안 모범사례 모음\n\n**핵심요약:** 이것은 Node.js와는 직접적으로 관련되지 않은 보안과 관련된 조언 모음집이지만, Node의 시행도 다른 언어들과 그닥 다르지 않다. 자세히 보기를 클릭해서 읽어봐라.\n\n🔗 [**자세히 보기: Common security best practices**](./sections/security/commonsecuritybestpractices.md)\n\n<br/><br/>\n\n## ![✔] 6.6. HTTP 응답 헤더를 조정해서 보안을 강화해라\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**핵심요약:** 보안 헤더를 사용해서 교차사이트 스트립팅 (XSS), 클릭재킹과 같이 자주 있는 악의적인 공격들을 막아라. [helmet](https://www.npmjs.com/package/helmet)과 같은 모듈을 사용하면 쉽게 설정할 수 있다.\n\n**그렇게 하지 않을 경우:** 공격자들이 애플리케이션 사용자들을 직접적으로 공격할 수 있게되면 엄청난 보안 취약점을 초래할 수 있다\n\n🔗 [**자세히 보기: Using secure headers in your application**](./sections/security/secureheaders.md)\n\n<br/><br/>\n\n## ![✔] 6.7. 끊임없이 자동적으로 취약한 의존성은 없는지 검사해라\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Known%20Vulnerabilities%20-green.svg\" alt=\"\"/></a>\n\n**핵심요약:** npm 생태계의 프로젝트들은 의존성이 여럿 있는것이 보통이다. 의존성들은 새로운 취약점들이 발견 될 때마다 고쳐야 한다. [npm audit](https://docs.npmjs.com/cli/audit)이나 [snyk](https://snyk.io/) 같은 도구들을 이용해 취약한 의존성을 감시하고 패치해라. 이런 도구들을 CI 체재와 통합시켜 취약한 의존성이 상용버젼까지 새어 나가기 전에 잡아라\n\n**그렇게 하지 않을 경우:** 공격자가 당신의 웹 프레임워크를 감지하면 알려진 모든 취약점을 공격할 수 있다.\n\n🔗 [**자세히 보기: Dependency security**](./sections/security/dependencysecurity.md)\n\n<br/><br/>\n\n## ![✔] 6.8. 암호를 처리할 때는 Node.js의 암호 라이브러리 대신 Bcrypt를 써라\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**핵심요약:** 암호나 기밀사항(API keys)들은 `bcrypt` 같은 보안 해시+솔트 함수를 쓰는것이 자바스크립트 implementation을 쓰는 것보다 보안이나 성능면에서 더 낫다.\n\n**그렇게 하지 않을 경우:** 보안함수(secure function)를 쓰지 않고 저장된 암호나 기밀사항들은 억지기법이나 사전공격에 취약해져 결국엔 다 뚫리게 된다.\n\n🔗 [**자세히 보기: Use Bcrypt**](./sections/security/userpasswords.md)\n\n<br/><br/>\n\n## ![✔] 6.9. HTML, JS and CSS 출력은 이스케이프 해라\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a>\n\n**핵심요약:** 신뢰할 수 없는 데이터가 브라우져에 보내져 보여지기만 하는게 아니라 실행이되는것을 교차 사이트 스크립팅 (XSS) 이라고 한다. 데이터를 명백하게 절대 실행되어서는 안되는 콘텐트라고 (즉 엔코딩이라던가 이스케이프한다던가) 표시하는 것 전용 라이브러리를 써서 이것을 완화시켜라\n\n**그렇게 하지 않을 경우:** 공격자가 악의적인 자바스크립트 코드를 당신 DB에 저장하면 불쌍한 클라이언트에게 그대로 보내질 수 있다\n\n🔗 [**자세히 보기: Escape output**](./sections/security/escape-output.md)\n\n<br/><br/>\n\n## ![✔] 6.10. 들어오는 JSON 스키마를 검사해라\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7: XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A8:Insecured%20Deserialization%20-green.svg\" alt=\"\"/></a>\n\n**핵심요약:** 들어오는 요청들의 body payload를 검사하여 기대에 부응하지는지 확인하고, 하지 않을경우 실패시켜버려라. [jsonschema](https://www.npmjs.com/package/jsonschema)나 [joi](https://www.npmjs.com/package/joi) 같은 JSON-기반의 경량의 validation schema를 쓰면 성가시게 매 경로마다 검사를 코딩해야 하는 일을 피할 수 있다.\n\n**그렇게 하지 않을 경우:** 입력에 대해 너그럽고 관대하면 공격 받을 수 있는 면적이 넓어지고, 공격자에게 애플리케이션을 끌어내리는 조합을 찾을때까지 다양한 입력값을 시도해보도록 장려하는 꼴이 된다.\n\n🔗 [**자세히 보기: Validate incoming JSON schemas**](./sections/security/validation.md)\n\n<br/><br/>\n\n## ![✔] 6.11. JWT 블랙리스트를 지원해라\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**핵심요약:** JSON Web Token(이를테면 [Passport.js](https://github.com/jaredhanson/passport)같은)을 쓰는 경우, 기본적으로 발행된 토큰의 권한을 취소하는 메커니즘은 없다. 사용자가 악의적인 행동을 한다 해도 유효한 토큰이 있는한 막을 길이 없다. 신뢰할 수 없는 토큰 블랙리스트를 만들어 매 요청마다 검사해서 완화시켜라.\n\n**그렇게 하지 않을 경우:** 제삼자가 만료되었거나 부적절한 토큰을 악의적으로 사용하여 애플리케이션에 접근하거나 토큰 소유자인 척 가장할 수 있다.\n\n🔗 [**자세히 보기: Blacklist JSON Web Tokens**](./sections/security/expirejwt.md)\n\n<br/><br/>\n\n## ![✔] 6.12. 권한부여 억지기법 공격을 예방해라\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**핵심요약:** 간단하지만 강력한 테크닉은 다음 두가지를 측량하여 권한부여 (authorization) 시도를 제한하는 것이다:\n\n1. 첫째는 같은 사용자의 고유 아이디/이름과 IP주소로부터의 연이은 실패 시도 갯수\n2. 두번째는 오랜 시간 동안 같은 IP 주소에서부터의 실패 시도 갯수. 예를 들면, 같은 IP 주소로부터 하루 사이 실패 시도가 100개라면 차단해버려라.\n\n**그렇게 하지 않을 경우:** 공격자가 무제한으로 암호를 시도해서 특권있는 계좌에 접근할 수 있다\n\n🔗 [**자세히 보기: Login rate limiting**](./sections/security/login-rate-limit.md)\n\n<br/><br/>\n\n## ![✔] 6.13. Node.js를 루트가 아닌 사용자로써 실행하라\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A5:Broken%20Access%20Access%20Control-green.svg\" alt=\"\"/></a>\n\n**핵심요약:** Node.js가 승인에 제한이 없는 루트 사용자로써 실행하는 일이 비일비재하다. 예를 들면, 도커 컨테이너 안에서는 이것이 기본적인 설정이다. 루트가 아닌 사용자를 만들어 도커 이미지에 구워넣거나 (아래예시) 프로세스를 \"-u username\" 플래그를 써서 이 사용자를 대신해서 실행하는것을 추천한다.\n\n**그렇게 하지 않을 경우:** 공격자가 서버에 스크립트를 실행하는데 성공하면 로컬 머신을 마음대로 할 권리를 무제한으로 갖게 된다 (예: iptable을 바꾼다던가 트래픽 경로를 자기 서버로 변경 한다던가)\n\n🔗 [**자세히 보기: Run Node.js as non-root user**](./sections/security/non-root-user.md)\n\n<br/><br/>\n\n## ![✔] 6.14. 리버스 프록시나 미들웨어를 사용해서 페이로드 크기를 제한해라\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A8:Insecured%20Deserialization%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**핵심요약:** 페이로드 사이즈가 클수록, 단일 스레드가 이것을 처리하는데 더 열심히 일해야 한다. 이것은 공격자들이 엄청난 양의 요청(DOS/DDOS 공격)을 쓰지 않고도 서버를 끌어내릴 수 있는 기회를 제공한다. 가장자리(예: 방화벽, ELB)에서 들어오는 요청들의 바디 크기를 제한하거나, 소규모의 페이로드만 받아들이도록 [express body parser](https://github.com/expressjs/body-parser)를 설정해라\n\n**그렇게 하지 않을 경우:** 애플리케이션이 커다란 요청을 처리해야하면 다른 중요한 일을 완수할 수 없게 되어 성능이 영향을 받고 DOS 공격에 취약하게 된다\n\n🔗 [**자세히 보기: Limit payload size**](./sections/security/requestpayloadsizelimit.md)\n\n<br/><br/>\n\n## ![✔] 6.15. 자바스크립트 eval statement를 피하라\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**핵심요약:** `eval`은 임의적인 자바스크립트 코드를 런타임시 실행하는것을 허용하기에 사악하다. 이는 성능면에서 문제가 될 뿐 아니라 사용자 입력을 근원으로 한 악의적인 자바스크립트 코드 때문에 보안면에서도 문제가 된다. 피해야 할 또다른 언어 특색으로는 `new Function` constructor 생성자가 있다. `setTimeout`와 `setInterval` 또한 절대로 동적이 자바스크립트 코드를 주어서는 안된다.\n\n**그렇게 하지 않을 경우:** 악의적인 자바스크립트 코드가 `eval`같이 실시간으로 평가하는 자바스크립트 언어 함수에 넘어가면 페이지 안의 자바스크립트 승인을 완전히 장악하게 된다. 이 취약점은 XSS 공격 형태로 자주 나타난다.\n\n🔗 [**자세히 보기: Avoid JavaScript eval statements**](./sections/security/avoideval.md)\n\n<br/><br/>\n\n## ![✔] 6.16. 악성 정규표현(RegEx)이 단일 스레드 실행을 과부하시키는것을 막아라\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**핵심요약:** 정규표현은 유용하긴 하지만 자바스크립트 애플리케이션, 특히나 Node.js 플랫폼의 경우 전체적으로 위협을 가한다. 사용자 입력 텍스트를 비교하여 처리하는데는 엄청난 양의 CPU 사이클이 요구된다. 단어 10개를 검사하는 단 하나의 요청이 이벤트 루프 전체를 6초동안 정체시키고 CPU를 🔥지를 만큼 RegEx 처리는 비효율적이다. 이 때문에,직접 정규표현 패턴을 작성하기 보다는 [validator.js](https://github.com/chriso/validator.js) 같은 써드파티 검사 패키지를 쓰거나, [safe-regex](https://github.com/substack/safe-regex)를 써서 취약한 정규표한 패턴을 감지해라\n\n**그렇게 하지 않을 경우:** 저조하게 쓰여진 정규표현들은 이벤트 루프를 완전히 정체시킬 수 있는 정규표현 DOS 공격에 취약해진다. 예를들면, 자주 쓰이는 `moment` 패키지 또한 2017년 11월에 악성 정규표현 사용에 취약하다는 것이 발견되었다\n\n🔗 [**자세히 보기: Prevent malicious RegEx**](./sections/security/regex.md)\n\n<br/><br/>\n\n## ![✔] 6.17. 변수를 사용해 모듈을 로딩하는것을 피해라\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**핵심요약:** 매개변수가 사용자 입력이 원천지일 염려가 있으므로 다른 파일을 파라메터 형태의 경로로 require/import 하는것은 피해라. 이건 일반적으로 사용자 입력을 원천지로 한 다른 동적 변수로 파일이나 (즉 `fs.readFile()`) 다른 민감한 리소스에 접근할 때도 해당한다. [Eslint-plugin-security](https://www.npmjs.com/package/eslint-plugin-security) 린터를 쓰면 이런 패턴들을 초반에 잡아내어 경고해준다\n\n**그렇게 하지 않을 경우:** 악의적인 사용자 입력이 이전에 파일시스템에 업로드되었거나 이미 시스템에 존재하는 흑화된 파일을 require 하는데 쓰이는 매개변수로 들어가게 될 수 있다.\n\n🔗 [**자세히 보기: Safe module loading**](./sections/security/safemoduleloading.md)\n\n<br/><br/>\n\n## ![✔] 6.18. 위험한 코드는 샌드박스 안에서 실행해라\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**핵심요약:** 런타임에 주어진 외부 코드(예: 플러그인)를 실행해야 하는 경우, 메인 코드를 플러그인으로부터 격리시켜 보호하는 샌드박스 실행 환경을 무엇이든 써라. 전용 프로세스나 (예: `cluster.fork()`), 서버리스 환경이나 샌드박스 역할을 하는 전용 npm 패키지를 사용하면 달성할 수 있다.\n\n**그렇게 하지 않을 경우:** 플러그인이 무한 루프나, 메모리 과부화나, 민감한 프로세스 환경 변수로의 접근과 같이 무한히 가지각색으로 공격할 수 있다\n\n🔗 [**자세히 보기: Run unsafe code in a sandbox**](./sections/security/sandbox.md)\n\n<br/><br/>\n\n## ![✔] 6.19. 자식 프로세스를 다룰 땐 특히 조심해라\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**핵심요약:** 자식 프로세스를 쓰는것은 가능한 한 피하고, 부득이하게 써야 한다면 입력은 검사하고 무결처리해서 shell 주입 공격을 완화시켜라. 정의상 속성 집합이 있는 단일 명령어만 수행하고 shell 매개변수 확장을 허가하지 않는 `child_process.execFile` 쓰는것을 선호해라.\n\n**그렇게 하지 않을 경우:** 순진무구하게 자식 프로세스를 썼다가는 악의적인 사용자 입력이 무결처리 되지 않은 시스템 명령어로 인한 원격 커맨드 실행이나 쉘 주입 공격을 초래할 수 있다.\n\n🔗 [**자세히 보기: Be cautious when working with child processes**](./sections/security/childprocesses.md)\n\n<br/><br/>\n\n## ![✔] 6.20. 에러 세부사항은 클라이언트로부터 숨겨라\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**핵심요약:** 통합된 express 에러 핸들러는 기본적으로 에러 세부사항을 감춘다. 허나, 당신이 커스텀 에러 처리 로직을 만들어 쓰고 있을 가능성이 높다 (많은이들이 이게 모범사례라고 여긴다). 그럴 경우 민감한 애플리케이션 세부사항을 포함할 수 있는 에러 객체를 절대로 통째로 클라이언트에 보내주지 않도록 해라\n\n**그렇게 하지 않을 경우:** 서버 파일 경로나, 사용중인 제삼자 모듈, 그리고 그 외 애플리케이션 내부 작업 순서 같이 공격자가 악용할 수 있는 민감한 애플리케이션 세부사항이 스택트레이스에 보여지는 정보로 새어나갈 수 있다\n\n🔗 [**자세히 보기: Hide error details from client**](./sections/security/hideerrors.md)\n\n<br/><br/>\n\n## ![✔] 6.21. npm이나 yarn 이중인증(2FA)을 설정해라\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**핵심요약:** 개발 과정의 모든 단계는 다중인증(MFA: multi-factor authentication)을 사용해서 보호해야한다. npm이나 Yarn은 공격자들이 개발자 암호를 수집할 수 있는 절호의 기회다. 공격자들은 개발자의 크리덴셜을 사용하면 악의적인 코드를 다양한 프로젝트와 서비스에 널리 설치된 라이브러리에 주입할 수 있다. 공개 출판 되었다면 웹상에서도 가능하다. npm 이중인증을 활성화 해 두면 공격자들이 패키지 코드를 변경할 확률이 0에 가까워진다.\n\n**그렇게 하지 않을 경우:** [암호를 하이재킹 당한 eslint 개발자에 대해 들어봤는가?](https://medium.com/@oprearocks/eslint-backdoor-what-it-is-and-how-to-fix-the-issue-221f58f1a8c8)\n\n<br/><br/>\n\n## ![✔] 6.22. 세션 미들웨어 설정을 수정해라\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**핵심요약:** 웹 프레임워크나 장비는 각각 고유의 약점이 있다-공격자에게 어떤 웹 프레임워크를 쓰는지 알려주는 것은 그들을 돕는 꼴이 된다. 세션 미들웨어 기본설정을 쓰는 것은 `X-Powered-By` 헤더같이 모듈이나 프레임워크 관련 하이재킹 공격에 앱이 취약해지게 만든다. 테크 스택의 신분(예: Node.js, express)을 드러내는 것은 일단 감추고 봐라\n\n**그렇게 하지 않을 경우:** 쿠키가 insecure 연결로 송신되면 공격자가 세션 ID를 보고 웹 어플리케이션 프레임워크를 식별하고, 모듈관련 취약점도 찾아낼 수 있다\n\n🔗 [**자세히 보기: Cookie and session security**](./sections/security/sessions.md)\n\n<br/><br/>\n\n## ![✔] 6.23. 프로세스가 언제 충돌해야 하는지 명백히 해서 DOS 공격을 피해라\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**핵심요약:** Node 프로세스는 에러가 처리되지 않으면 충돌한다. 많은 모범사례들이 에러를 받아 처리했음에도 exit 하는것을 권장한다. Express로 예를 들자면, 비동기 에러가 발생한 경우, route를 catch clause로 감싸지 않는 한 항상 충돌로 이어진다. 이건 어떤 입력이 프로세스를 충돌시키는지 아는 공격자들이 같은 요청을 계속 보내는 공격을 할 수 있게 만들어 버린다. 이것을 바로 고칠 수 있는 방안은 없지만, 통증을 완화시킬 수 있는 방법이 몇 개 존재한다: 프로세스가 처리되지 않은 에러로 인해 충돌할 때마다 치명적인 심각성으로 경보를 발하고, 입력을 검사하며 무효한 사용자 입력으로 인한 충돌을 피하고, 모든 route들을 catch로 감싸고, 에러의 원인지가 요청이면 충돌하지 않는것을 고려해라 (에러가 global하게 나는것과 반대로)\n\n**그렇게 하지 않을 경우:** 경험에서 우러난 추측이긴 하지만: Node.js 애플리케이션이 여럿 있을때, 모든 POST 요청에 빈 JSON body를 붙여 보내면 그중 애플리케이션이 몇 개 충돌한다. 그 시점으로부터는 계속 같은 요청을 보내면 나머지 애플리케이션들을 쉽게 흐너뜨릴 수 있다.\n\n<br/><br/>\n\n## ![✔] 6.24. 위험한 리디렉트는 막아라\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a>\n\n**핵심요약:** 사용자 입력을 검사하지 않는 리디렉트는 공격자가 피싱 사기나 사용자 자격 절도와 같이 악의적인 공격을 할 수 있게 한다.\n\n**그렇게 하지 않을 경우:** 공격자가 당신이 외부 유저로부터 조달된 입력을 검사하지 않는다는 것을 발견 할 경우, 특수 조작된 포럼 링크를 포럼이나 소셜 미디어, 그 외 공공 장소에 게재해서 유저들이 클릭하도록 해서 이 취약점을 악용할 수 있다.\n\n🔗 [**자세히 보기: Prevent unsafe redirects**](./sections/security/saferedirects.md)\n\n<br/><br/>\n\n## ![✔] 6.25. 기밀사항을 npm registry에 출판하는것을 막아라\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**핵심요약:** 공공 npm 레지스트리에 기밀사항을 실수로 발행하는 것을 미리 예방해라. `.npmignore` 파일을 사용해서 특정 파일이나 폴더를 블랙리스트하거나, `package.json` 안의 `files` 배열이 화이트리스트 역할을 할 수 있다.\n\n**그렇게 하지 않을 경우:** 프로젝트의 API key나, 암호나, 그 외 기밀사항들이 이것들을 우연히 발견한 이들 누구나에 의해 남용되면 재정적 손실이나 사칭과 같은 위험을 초래할 수 있다.\n\n🔗 [**자세히 보기: Avoid publishing secrets**](./sections/security/avoid_publishing_secrets.md)\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#목차\">⬆ Return to top</a></p>\n\n# `7. 초안: 성능`\n\n## 협력자들이 현재 작업중입니다. [함께 하시겠습니까?](https://github.com/goldbergyoni/nodebestpractices/issues/256)\n\n<br/><br/>\n\n## ![✔] 7.1. 이벤트 루프를 막지 말아라\n\n**핵심요약:** CPU 집약적인 과제들은 거의 단일 스레드로 된 이벤드 루프를 블로킹하고 전용 스레드나 프로세스, 혹은 컨텍스트에 따라 그 외 다른 기술에 떠넘기므로 피하라.\n\n**그렇게 하지 않을 경우:** 이벤트 루프가 블로킹되면 Node.js는 다른 요청을 처리할 수 없게 되어 동시성 (concurrent) 사용자들을 지체하게 한다. **사용자 3000명이 응답을 기다리고 있고, 콘텐츠도 제공될 준비가 되어있는데, 단 하나의 요청이 서버가 결과물을 발송하지 못하도록 블로킹 할 수 있다**\n\n🔗 [**자세히 보기: Do not block the event loop**](./sections/performance/block-loop.md)\n\n<br /><br /><br />\n\n## ![✔] 7.2. Lodash같은 user-land 유틸 대신 네이티브 자바스크립트 메소드를 택해라\n\n**핵심요약:** 네이티브 메소드 대신 `lodash` 나 `underscore` 같은 유틸 라이브러리를 쓰는 것은 불필요한 의존성이나 성능 저하를 야기할 수 있기에 보통 페날티가 붙는다.\n새로운 V8 엔진과 함께 새로운 ES 기준이 도입되고부터 네이티브 메소드가 유틸리티 라이브러리보다 50% 더 능률적이라는 것을 명심해라.\n\n**그렇게 하지 않을 경우:** 기본적으로 **이미** 내장된 코드를 쓰거나 코드를 몇줄 더 써서 파일을 몇개 더 써야 하는 것을 막을 수 있었음에도 불구하고 더 비능률적인 프로젝트를 유지해야 할 것이다.\n\n🔗 [**자세히 보기: Native over user land utils**](./sections/performance/nativeoverutil.md)\n\n<br/><br/><br/>\n\n# 마일스톤\n\n이 가이드를 관리하고 최신 버전을 유지하기 위해, 우리는 지속해서 가이드라인과 모범 사례들을 커뮤니티의 도움으로 업데이트하고 개선해 나가고 있습니다. [마일스톤](https://github.com/goldbergyoni/nodebestpractices/milestones)을 확인하시고 이 프로젝트에 기여하고 싶다면 작업중인 그룹에 참여하세요!\n\n<br/>\n\n## 번역\n\n모든 번역은 커뮤니티에 의해 기여되고 있습니다. 이미 완성된 번역이나, 진행중, 새로운 번역에 대한 도움은 언제나 환영합니다!\n\n### 번역 작업 완료\n\n- ![BR](./assets/flags/BR.png) [브라질식 포르투갈어](./README.brazilian-portuguese.md) - [마르셀로 멜로](https://github.com/marcelosdm) 제공\n- ![CN](./assets/flags/CN.png) [중국어](./README.chinese.md) - [맷 진](https://github.com/mattjin) 제공\n- ![RU](./assets/flags/RU.png) [러시아어](./README.russian.md) - [알렉스 이바노브](https://github.com/contributorpw) 제공\n\n### 번역 작업중\n\n- ![FR](./assets/flags/FR.png) [프랑스어](https://github.com/gaspaonrocks/nodebestpractices/blob/french-translation/README.french.md) ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/129))\n- ![HE](./assets/flags/HE.png) 히브리어 ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/156))\n- ![KR](./assets/flags/KR.png) [한국어](README.korean.md) - [한상범](https://github.com/uronly14me) ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/94)) 제공\n- ![ES](./assets/flags/ES.png) [스페인어](https://github.com/goldbergyoni/nodebestpractices/blob/spanish-translation/README.spanish.md) ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/95))\n- ![TR](./assets/flags/TR.png) 터키어 ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/139))\n\n<br/><br/>\n\n## 운영 위원회\n\n프로젝트를 지도하고 앞으로 나아갈 방향을 제시하는데 함께 일하는 운영 위원회 일원들을 소개합니다. 추가로, 위원회원들은 각자 [Github 프로젝트](https://github.com/goldbergyoni/nodebestpractices/projects) 아래에 인행되는 프로젝트들을 인솔합니다.\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/yoni.png\"/>\n\n[요니 골드버그](https://github.com/goldbergyoni)\n<a href=\"https://twitter.com/goldbergyoni\"><img src=\"assets/images/twitter-s.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://goldbergyoni.com\"><img src=\"assets/images/www.png\" width=\"16\" height=\"16\"></img></a>\n\n미국, 유럽과 이스라엘의 고객들과 대규모 Node.js 애플리케이션 건축하는데 일하는 독립적인 Node.js 컨설턴트입니다. 모범사례 중 다수는 [goldbergyoni.com](https://goldbergyoni.com)에 처음 게재되었던 것들입니다. [@goldbergyoni](https://github.com/goldbergyoni)나 [me@goldbergyoni.com](mailto:me@goldbergyoni.com)로 요니에게 연락하세요.\n\n<br/>\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/bruno.png\"/>\n\n[브루노 슈플러](https://github.com/BrunoScheufler)\n<a href=\"https://brunoscheufler.com/\"><img src=\"assets/images/www.png\" width=\"16\" height=\"16\"></img></a>\n\n💻 풀스택 웹 엔지니어, Node.js & GraphQL 광팬\n\n<br/>\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/kyle.png\"/>\n\n[카일 마틴](https://github.com/js-kyle)\n<a href=\"https://twitter.com/kylemartin_93\"><img src=\"assets/images/twitter-s.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://www.linkedin.com/in/kylemartinnz\"><img src=\"assets/images/linkedin.png\" width=\"16\" height=\"16\"></img></a>\n\n뉴질랜드에 거주하는 풀스택 개발자 & 사이트 신뢰성 엔지니어이며, 웹 애플리케이션 보안과 글로벌한 규모에서 수행하는 Node.js 애플리케이션을 설계하고 건축하는데 관심이 있습니다.\n\n<br/>\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/sagir.png\"/>\n\n[사기르 칸](https://github.com/sagirk)\n<a href=\"https://twitter.com/sagir_k\"><img src=\"assets/images/twitter-s.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://sagirk.com\"><img src=\"assets/images/www.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://linkedin.com/in/sagirk\"><img src=\"assets/images/linkedin.png\" width=\"16\" height=\"16\"></img></a>\n\n웹 플랫폼을 사용해 세계적으로 유명한 브랜드들을 위한 상품을 만드는 자바스크립트 및 생태계 (React, Node.js, MongoDB 외 시스템 어느 계층에서건 자바스크립트/JSON 사용과 관련된 것은 어떤것이든) 전문가 입니다. Node.js 단체의 개인 일원이며, 공동체 위원회의 웹사이트 재설계 계획에 협력하고 있습니다.\n\n<br/>\n\n## 공동 저자\n\n모든 공동 저자 분들께 감사드립니다! 🙏\n\n공동 저자들은 새로운 모범사례를 제안하거나, 사안을 분류하거나, 풀리퀘스트를 검토하는 등 리포지토리에 정기적으로 기여하는 일원들입니다. 수천명의 사람들이 더 나은 Node.js 애플리케이션을 만들 수 있도록 안내하며 돕는데 관심이 있으시다면 [기여자 지침서](./.operations/CONTRIBUTING.md)를 읽어주세요 🎉\n\n| <a href=\"https://github.com/idori\" target=\"_blank\"><img src=\"assets/images/members/ido.png\" width=\"75\" height=\"75\"/></a> | <a href=\"https://github.com/TheHollidayInn\" target=\"_blank\"><img src=\"assets/images/members/keith.png\" width=\"75\" height=\"75\"/></a> | <a href=\"https://github.com/kevynb\" target=\"_blank\"><img src=\"assets/images/members/kevyn.png\" width=\"59\" height=\"59\"/></a> |\n| :---------------------------------------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------: |\n|                                     [이도 릭터 (창립주)](https://github.com/idori)                                      |                                         [키스 홀리데이](https://github.com/TheHollidayInn)                                         |                                         [케빈 브뤼예르](https://github.com/kevynb)                                         |\n\n### 전 공동 저자\n\n| <a href=\"https://github.com/refack\" target=\"_blank\"><img src=\"assets/images/members/refael.png\" width=\"50\" height=\"50\"/></a> |\n| :-------------------------------------------------------------------------------------------------------------------------: |\n|                                        [Refael Ackermann](https://github.com/refack)                                        |\n\n<br/>\n\n## 기여하기\n\n오픈소스에 참여하고 싶으시다면 지금이 바로 기회! [기여자 지침서](.operations/CONTRIBUTING.md)에서 더 자세한 내용을 확인하세요.\n\n## 기여자 ✨\n\n이 리포지터리에 기여해 주신 여기 이 모든 분께 감사드립니다!\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kevinrambaud\"><img src=\"https://avatars1.githubusercontent.com/u/7501477?v=4\" width=\"100px;\" alt=\"Kevin Rambaud\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kevin Rambaud</b></sub></a><br /><a href=\"#content-kevinrambaud\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mfine15\"><img src=\"https://avatars1.githubusercontent.com/u/1286554?v=4\" width=\"100px;\" alt=\"Michael Fine\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Michael Fine</b></sub></a><br /><a href=\"#content-mfine15\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://squgeim.github.io\"><img src=\"https://avatars0.githubusercontent.com/u/4996818?v=4\" width=\"100px;\" alt=\"Shreya Dahal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shreya Dahal</b></sub></a><br /><a href=\"#content-squgeim\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://matheusrocha89.com\"><img src=\"https://avatars1.githubusercontent.com/u/3718366?v=4\" width=\"100px;\" alt=\"Matheus Cruz Rocha\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Matheus Cruz Rocha</b></sub></a><br /><a href=\"#content-matheusrocha89\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://bityog.github.io/Portfolio/\"><img src=\"https://avatars2.githubusercontent.com/u/28219178?v=4\" width=\"100px;\" alt=\"Yog Mehta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yog Mehta</b></sub></a><br /><a href=\"#content-BitYog\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://kudapara.co.zw\"><img src=\"https://avatars3.githubusercontent.com/u/13519184?v=4\" width=\"100px;\" alt=\"Kudakwashe Paradzayi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kudakwashe Paradzayi</b></sub></a><br /><a href=\"#content-kudapara\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.t1st3.com/\"><img src=\"https://avatars1.githubusercontent.com/u/1469638?v=4\" width=\"100px;\" alt=\"t1st3\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>t1st3</b></sub></a><br /><a href=\"#content-t1st3\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mulijordan1976\"><img src=\"https://avatars0.githubusercontent.com/u/33382022?v=4\" width=\"100px;\" alt=\"mulijordan1976\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>mulijordan1976</b></sub></a><br /><a href=\"#content-mulijordan1976\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/matchai\"><img src=\"https://avatars0.githubusercontent.com/u/4658208?v=4\" width=\"100px;\" alt=\"Matan Kushner\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Matan Kushner</b></sub></a><br /><a href=\"#content-matchai\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://fabiothiroki.github.io\"><img src=\"https://avatars2.githubusercontent.com/u/670057?v=4\" width=\"100px;\" alt=\"Fabio Hiroki\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Fabio Hiroki</b></sub></a><br /><a href=\"#content-fabiothiroki\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://james.sumners.info/\"><img src=\"https://avatars1.githubusercontent.com/u/321201?v=4\" width=\"100px;\" alt=\"James Sumners\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>James Sumners</b></sub></a><br /><a href=\"#content-jsumners\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/_DanGamble\"><img src=\"https://avatars2.githubusercontent.com/u/7152041?v=4\" width=\"100px;\" alt=\"Dan Gamble\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dan Gamble</b></sub></a><br /><a href=\"#content-dan-gamble\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/trainorpj\"><img src=\"https://avatars3.githubusercontent.com/u/13276704?v=4\" width=\"100px;\" alt=\"PJ Trainor\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>PJ Trainor</b></sub></a><br /><a href=\"#content-trainorpj\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/reod\"><img src=\"https://avatars0.githubusercontent.com/u/3164299?v=4\" width=\"100px;\" alt=\"Remek Ambroziak\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Remek Ambroziak</b></sub></a><br /><a href=\"#content-reod\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://ca.non.co.il\"><img src=\"https://avatars0.githubusercontent.com/u/1829789?v=4\" width=\"100px;\" alt=\"Yoni Jah\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yoni Jah</b></sub></a><br /><a href=\"#content-yonjah\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/hazolsky\"><img src=\"https://avatars1.githubusercontent.com/u/1270790?v=4\" width=\"100px;\" alt=\"Misha Khokhlov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Misha Khokhlov</b></sub></a><br /><a href=\"#content-hazolsky\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://plus.google.com/+ЕвгенийОрехов/\"><img src=\"https://avatars3.githubusercontent.com/u/8045060?v=4\" width=\"100px;\" alt=\"Evgeny Orekhov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Evgeny Orekhov</b></sub></a><br /><a href=\"#content-EvgenyOrekhov\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/gediminasml\"><img src=\"https://avatars3.githubusercontent.com/u/19854105?v=4\" width=\"100px;\" alt=\"-\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>-</b></sub></a><br /><a href=\"#content-gediminasml\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://hisaac.net\"><img src=\"https://avatars3.githubusercontent.com/u/923876?v=4\" width=\"100px;\" alt=\"Isaac Halvorson\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Isaac Halvorson</b></sub></a><br /><a href=\"#content-hisaac\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.vedrankaracic.com\"><img src=\"https://avatars3.githubusercontent.com/u/2808092?v=4\" width=\"100px;\" alt=\"Vedran Karačić\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vedran Karačić</b></sub></a><br /><a href=\"#content-vkaracic\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/lallenlowe\"><img src=\"https://avatars3.githubusercontent.com/u/10761165?v=4\" width=\"100px;\" alt=\"lallenlowe\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>lallenlowe</b></sub></a><br /><a href=\"#content-lallenlowe\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/nwwells\"><img src=\"https://avatars2.githubusercontent.com/u/1039473?v=4\" width=\"100px;\" alt=\"Nathan Wells\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nathan Wells</b></sub></a><br /><a href=\"#content-nwwells\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/paulovitin\"><img src=\"https://avatars0.githubusercontent.com/u/125503?v=4\" width=\"100px;\" alt=\"Paulo Reis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Paulo Reis</b></sub></a><br /><a href=\"#content-paulovitin\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://snap.simpego.ch\"><img src=\"https://avatars2.githubusercontent.com/u/1989646?v=4\" width=\"100px;\" alt=\"syzer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>syzer</b></sub></a><br /><a href=\"#content-syzer\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://sancho.dev\"><img src=\"https://avatars0.githubusercontent.com/u/3763599?v=4\" width=\"100px;\" alt=\"David Sancho\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>David Sancho</b></sub></a><br /><a href=\"#content-davesnx\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://apiforge.it\"><img src=\"https://avatars0.githubusercontent.com/u/4929965?v=4\" width=\"100px;\" alt=\"Robert Manolea\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Robert Manolea</b></sub></a><br /><a href=\"#content-pupix\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://jumptoglide.com\"><img src=\"https://avatars2.githubusercontent.com/u/708395?v=4\" width=\"100px;\" alt=\"Xavier Ho\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Xavier Ho</b></sub></a><br /><a href=\"#content-spaxe\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.ocular-rhythm.io\"><img src=\"https://avatars0.githubusercontent.com/u/2738518?v=4\" width=\"100px;\" alt=\"Aaron\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Aaron</b></sub></a><br /><a href=\"#content-ocularrhythm\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://septa97.me\"><img src=\"https://avatars2.githubusercontent.com/u/13742634?v=4\" width=\"100px;\" alt=\"Jan Charles Maghirang Adona\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jan Charles Maghirang Adona</b></sub></a><br /><a href=\"#content-septa97\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.cakeresume.com/allenfang\"><img src=\"https://avatars2.githubusercontent.com/u/5351390?v=4\" width=\"100px;\" alt=\"Allen\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Allen</b></sub></a><br /><a href=\"#content-AllenFang\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/leonardovillela\"><img src=\"https://avatars3.githubusercontent.com/u/8650543?v=4\" width=\"100px;\" alt=\"Leonardo Villela\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Leonardo Villela</b></sub></a><br /><a href=\"#content-leonardovillela\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://michalzalecki.com\"><img src=\"https://avatars1.githubusercontent.com/u/3136577?v=4\" width=\"100px;\" alt=\"Michał Załęcki\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Michał Załęcki</b></sub></a><br /><a href=\"#content-MichalZalecki\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.wealthbar.com\"><img src=\"https://avatars1.githubusercontent.com/u/156449?v=4\" width=\"100px;\" alt=\"Chris Nicola\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Chris Nicola</b></sub></a><br /><a href=\"#content-chrisnicola\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/aecorredor\"><img src=\"https://avatars3.githubusercontent.com/u/9114987?v=4\" width=\"100px;\" alt=\"Alejandro Corredor\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alejandro Corredor</b></sub></a><br /><a href=\"#content-aecorredor\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/cwar\"><img src=\"https://avatars3.githubusercontent.com/u/272843?v=4\" width=\"100px;\" alt=\"cwar\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>cwar</b></sub></a><br /><a href=\"#content-cwar\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/keyfoxth\"><img src=\"https://avatars3.githubusercontent.com/u/10647132?v=4\" width=\"100px;\" alt=\"Yuwei\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yuwei</b></sub></a><br /><a href=\"#content-keyfoxth\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://bigcodenerd.org\"><img src=\"https://avatars3.githubusercontent.com/u/10895594?v=4\" width=\"100px;\" alt=\"Utkarsh Bhatt\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Utkarsh Bhatt</b></sub></a><br /><a href=\"#content-utkarshbhatt12\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/duartemendes\"><img src=\"https://avatars2.githubusercontent.com/u/12852058?v=4\" width=\"100px;\" alt=\"Duarte Mendes\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Duarte Mendes</b></sub></a><br /><a href=\"#content-duartemendes\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://jasonkim.ca\"><img src=\"https://avatars2.githubusercontent.com/u/103456?v=4\" width=\"100px;\" alt=\"Jason Kim\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jason Kim</b></sub></a><br /><a href=\"#content-serv\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Max101\"><img src=\"https://avatars2.githubusercontent.com/u/2124249?v=4\" width=\"100px;\" alt=\"Mitja O.\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Mitja O.</b></sub></a><br /><a href=\"#content-Max101\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://sandromiguel.com\"><img src=\"https://avatars0.githubusercontent.com/u/6423157?v=4\" width=\"100px;\" alt=\"Sandro Miguel Marques\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sandro Miguel Marques</b></sub></a><br /><a href=\"#content-SandroMiguel\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/GabeKuslansky\"><img src=\"https://avatars3.githubusercontent.com/u/9855482?v=4\" width=\"100px;\" alt=\"Gabe\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Gabe</b></sub></a><br /><a href=\"#content-GabeKuslansky\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://ripper234.com/\"><img src=\"https://avatars1.githubusercontent.com/u/172282?v=4\" width=\"100px;\" alt=\"Ron Gross\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ron Gross</b></sub></a><br /><a href=\"#content-ripper234\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.thecodebarbarian.com\"><img src=\"https://avatars2.githubusercontent.com/u/1620265?v=4\" width=\"100px;\" alt=\"Valeri Karpov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Valeri Karpov</b></sub></a><br /><a href=\"#content-vkarpov15\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://sergiobernal.com\"><img src=\"https://avatars3.githubusercontent.com/u/20087388?v=4\" width=\"100px;\" alt=\"Sergio Bernal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sergio Bernal</b></sub></a><br /><a href=\"#content-imsergiobernal\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ntelkedzhiev\"><img src=\"https://avatars2.githubusercontent.com/u/7332371?v=4\" width=\"100px;\" alt=\"Nikola Telkedzhiev\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nikola Telkedzhiev</b></sub></a><br /><a href=\"#content-ntelkedzhiev\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/vitordagamagodoy\"><img src=\"https://avatars0.githubusercontent.com/u/26370059?v=4\" width=\"100px;\" alt=\"Vitor Godoy\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vitor Godoy</b></sub></a><br /><a href=\"#content-vitordagamagodoy\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.manishsaraan.com/\"><img src=\"https://avatars2.githubusercontent.com/u/19797340?v=4\" width=\"100px;\" alt=\"Manish Saraan\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Manish Saraan</b></sub></a><br /><a href=\"#content-manishsaraan\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/uronly14me\"><img src=\"https://avatars2.githubusercontent.com/u/5186814?v=4\" width=\"100px;\" alt=\"Sangbeom Han\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sangbeom Han</b></sub></a><br /><a href=\"#content-uronly14me\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://blackmatch.github.io\"><img src=\"https://avatars3.githubusercontent.com/u/12443954?v=4\" width=\"100px;\" alt=\"blackmatch\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>blackmatch</b></sub></a><br /><a href=\"#content-blackmatch\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://simmsreeve.com\"><img src=\"https://avatars3.githubusercontent.com/u/5173131?v=4\" width=\"100px;\" alt=\"Joe Reeve\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Joe Reeve</b></sub></a><br /><a href=\"#content-ISNIT0\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/BusbyActual\"><img src=\"https://avatars2.githubusercontent.com/u/14985016?v=4\" width=\"100px;\" alt=\"Ryan Busby\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ryan Busby</b></sub></a><br /><a href=\"#content-BusbyActual\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://jsdecorator.com\"><img src=\"https://avatars3.githubusercontent.com/u/4482199?v=4\" width=\"100px;\" alt=\"Iman Mohamadi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Iman Mohamadi</b></sub></a><br /><a href=\"#content-ImanMh\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/HeeL\"><img src=\"https://avatars1.githubusercontent.com/u/287769?v=4\" width=\"100px;\" alt=\"Sergii Paryzhskyi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sergii Paryzhskyi</b></sub></a><br /><a href=\"#content-HeeL\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kapilepatel\"><img src=\"https://avatars3.githubusercontent.com/u/25738473?v=4\" width=\"100px;\" alt=\"Kapil Patel\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kapil Patel</b></sub></a><br /><a href=\"#content-kapilepatel\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/justjavac\"><img src=\"https://avatars1.githubusercontent.com/u/359395?v=4\" width=\"100px;\" alt=\"迷渡\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>迷渡</b></sub></a><br /><a href=\"#content-justjavac\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/hozefaj\"><img src=\"https://avatars1.githubusercontent.com/u/2084833?v=4\" width=\"100px;\" alt=\"Hozefa\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Hozefa</b></sub></a><br /><a href=\"#content-hozefaj\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/el-ethan\"><img src=\"https://avatars3.githubusercontent.com/u/10249884?v=4\" width=\"100px;\" alt=\"Ethan\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ethan</b></sub></a><br /><a href=\"#content-el-ethan\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/milkdeliver\"><img src=\"https://avatars2.githubusercontent.com/u/3108407?v=4\" width=\"100px;\" alt=\"Sam\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sam</b></sub></a><br /><a href=\"#content-milkdeliver\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ArlindXh\"><img src=\"https://avatars0.githubusercontent.com/u/19508764?v=4\" width=\"100px;\" alt=\"Arlind\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Arlind</b></sub></a><br /><a href=\"#content-ArlindXh\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ttous\"><img src=\"https://avatars0.githubusercontent.com/u/19815440?v=4\" width=\"100px;\" alt=\"Teddy Toussaint\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Teddy Toussaint</b></sub></a><br /><a href=\"#content-ttous\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://ardern.io\"><img src=\"https://avatars2.githubusercontent.com/u/2419690?v=4\" width=\"100px;\" alt=\"Lewis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Lewis</b></sub></a><br /><a href=\"#content-LewisArdern\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://gabriellidenor.com/\"><img src=\"https://avatars2.githubusercontent.com/u/765963?v=4\" width=\"100px;\" alt=\"Gabriel Lidenor \"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Gabriel Lidenor </b></sub></a><br /><a href=\"#content-GabrielLidenor\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/animir\"><img src=\"https://avatars3.githubusercontent.com/u/4623196?v=4\" width=\"100px;\" alt=\"Roman\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Roman</b></sub></a><br /><a href=\"#content-animir\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Francozeira\"><img src=\"https://avatars1.githubusercontent.com/u/47419763?v=4\" width=\"100px;\" alt=\"Francozeira\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Francozeira</b></sub></a><br /><a href=\"#content-Francozeira\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/invvard\"><img src=\"https://avatars0.githubusercontent.com/u/7305493?v=4\" width=\"100px;\" alt=\"Invvard\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Invvard</b></sub></a><br /><a href=\"#content-Invvard\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://romulogarofalo.github.io/\"><img src=\"https://avatars1.githubusercontent.com/u/18492592?v=4\" width=\"100px;\" alt=\"Rômulo Garofalo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Rômulo Garofalo</b></sub></a><br /><a href=\"#content-romulogarofalo\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://thoqbk.github.io/\"><img src=\"https://avatars0.githubusercontent.com/u/1491103?v=4\" width=\"100px;\" alt=\"Tho Q Luong\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tho Q Luong</b></sub></a><br /><a href=\"#content-thoqbk\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Qeneke\"><img src=\"https://avatars2.githubusercontent.com/u/20271568?v=4\" width=\"100px;\" alt=\"Burak Shen\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Burak Shen</b></sub></a><br /><a href=\"#content-Qeneke\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.happy-css.com\"><img src=\"https://avatars0.githubusercontent.com/u/2950505?v=4\" width=\"100px;\" alt=\"Martin Muzatko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Martin Muzatko</b></sub></a><br /><a href=\"#content-MartinMuzatko\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/autoboxer\"><img src=\"https://avatars3.githubusercontent.com/u/2757601?v=4\" width=\"100px;\" alt=\"Jared Collier\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jared Collier</b></sub></a><br /><a href=\"#content-autoboxer\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://hiltonmeyer.com\"><img src=\"https://avatars3.githubusercontent.com/u/4545860?v=4\" width=\"100px;\" alt=\"Hilton Meyer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Hilton Meyer</b></sub></a><br /><a href=\"#content-bikingbadger\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://kr.vuejs.org\"><img src=\"https://avatars0.githubusercontent.com/u/1451365?v=4\" width=\"100px;\" alt=\"ChangJoo Park(박창주)\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>ChangJoo Park(박창주)</b></sub></a><br /><a href=\"#content-ChangJoo-Park\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/MasahiroSakaguchi\"><img src=\"https://avatars0.githubusercontent.com/u/16427431?v=4\" width=\"100px;\" alt=\"Masahiro Sakaguchi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Masahiro Sakaguchi</b></sub></a><br /><a href=\"#content-MasahiroSakaguchi\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/TheHollidayInn\"><img src=\"https://avatars1.githubusercontent.com/u/1253400?v=4\" width=\"100px;\" alt=\"Keith Holliday\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Keith Holliday</b></sub></a><br /><a href=\"#content-TheHollidayInn\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.coreycleary.me\"><img src=\"https://avatars3.githubusercontent.com/u/1485356?v=4\" width=\"100px;\" alt=\"coreyc\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>coreyc</b></sub></a><br /><a href=\"#content-coreyc\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://maxcubing.wordpress.com\"><img src=\"https://avatars0.githubusercontent.com/u/8260834?v=4\" width=\"100px;\" alt=\"Maximilian Berkmann\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Maximilian Berkmann</b></sub></a><br /><a href=\"#content-Berkmann18\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/DouglasMV\"><img src=\"https://avatars3.githubusercontent.com/u/32845487?v=4\" width=\"100px;\" alt=\"Douglas Mariano Valero\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Douglas Mariano Valero</b></sub></a><br /><a href=\"#content-DouglasMV\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/marcelosdm\"><img src=\"https://avatars0.githubusercontent.com/u/18266600?v=4\" width=\"100px;\" alt=\"Marcelo Melo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Marcelo Melo</b></sub></a><br /><a href=\"#content-marcelosdm\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/mperk_\"><img src=\"https://avatars0.githubusercontent.com/u/3465794?v=4\" width=\"100px;\" alt=\"Mehmet Perk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Mehmet Perk</b></sub></a><br /><a href=\"#content-mperk\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ryanouyang\"><img src=\"https://avatars2.githubusercontent.com/u/360426?v=4\" width=\"100px;\" alt=\"ryan ouyang\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>ryan ouyang</b></sub></a><br /><a href=\"#content-ryanouyang\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/shabeer-mdy\"><img src=\"https://avatars0.githubusercontent.com/u/26842535?v=4\" width=\"100px;\" alt=\"Shabeer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shabeer</b></sub></a><br /><a href=\"#content-shabeer-mdy\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/halfzebra\"><img src=\"https://avatars1.githubusercontent.com/u/3983879?v=4\" width=\"100px;\" alt=\"Eduard Kyvenko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Eduard Kyvenko</b></sub></a><br /><a href=\"#content-halfzebra\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://deyvisonrocha.com\"><img src=\"https://avatars2.githubusercontent.com/u/686067?v=4\" width=\"100px;\" alt=\"Deyvison Rocha\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Deyvison Rocha</b></sub></a><br /><a href=\"#content-deyvisonrocha\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://twitter.com/georgemamer\"><img src=\"https://avatars1.githubusercontent.com/u/20108934?v=4\" width=\"100px;\" alt=\"George Mamer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>George Mamer</b></sub></a><br /><a href=\"#content-georgem3\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/leimonio\"><img src=\"https://avatars0.githubusercontent.com/u/1969742?v=4\" width=\"100px;\" alt=\"Konstantinos Leimonis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Konstantinos Leimonis</b></sub></a><br /><a href=\"#content-leimonio\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Zybax\"><img src=\"https://avatars3.githubusercontent.com/u/22094453?v=4\" width=\"100px;\" alt=\"Oliver Lluberes\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Oliver Lluberes</b></sub></a><br /><a href=\"#translation-Zybax\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://stackoverflow.com/story/tiendq\"><img src=\"https://avatars2.githubusercontent.com/u/815910?v=4\" width=\"100px;\" alt=\"Tien Do\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tien Do</b></sub></a><br /><a href=\"#content-tiendq\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://singh1114.github.io/\"><img src=\"https://avatars0.githubusercontent.com/u/11356398?v=4\" width=\"100px;\" alt=\"Ranvir Singh\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ranvir Singh</b></sub></a><br /><a href=\"#content-singh1114\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/collierrgbsitisfise\"><img src=\"https://avatars3.githubusercontent.com/u/13496126?v=4\" width=\"100px;\" alt=\"Vadim Nicolaev\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vadim Nicolaev</b></sub></a><br /><a href=\"#content-collierrgbsitisfise\" title=\"Content\">🖋</a> <a href=\"#translation-collierrgbsitisfise\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/germangamboa95\"><img src=\"https://avatars3.githubusercontent.com/u/28633849?v=4\" width=\"100px;\" alt=\"German Gamboa Gonzalez\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>German Gamboa Gonzalez</b></sub></a><br /><a href=\"#content-germangamboa95\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/AbdelrahmanHafez\"><img src=\"https://avatars3.githubusercontent.com/u/19984935?v=4\" width=\"100px;\" alt=\"Hafez\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Hafez</b></sub></a><br /><a href=\"#content-AbdelrahmanHafez\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://linkedin.com/in/chandiran-dmc\"><img src=\"https://avatars3.githubusercontent.com/u/42678579?v=4\" width=\"100px;\" alt=\"Chandiran\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Chandiran</b></sub></a><br /><a href=\"#content-chandiran-dmc\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/VinayaSathyanarayana\"><img src=\"https://avatars2.githubusercontent.com/u/16976677?v=4\" width=\"100px;\" alt=\"VinayaSathyanarayana\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>VinayaSathyanarayana</b></sub></a><br /><a href=\"#content-VinayaSathyanarayana\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.kimkern.de\"><img src=\"https://avatars1.githubusercontent.com/u/2671139?v=4\" width=\"100px;\" alt=\"Kim Kern\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kim Kern</b></sub></a><br /><a href=\"#content-kiwikern\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://kennethfreitas.github.io/\"><img src=\"https://avatars2.githubusercontent.com/u/55669043?v=4\" width=\"100px;\" alt=\"Kenneth Freitas\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kenneth Freitas</b></sub></a><br /><a href=\"#content-kennethfreitas\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/songe\"><img src=\"https://avatars2.githubusercontent.com/u/1531561?v=4\" width=\"100px;\" alt=\"songe\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>songe</b></sub></a><br /><a href=\"#content-songe\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://ksed.dev\"><img src=\"https://avatars1.githubusercontent.com/u/30693707?v=4\" width=\"100px;\" alt=\"Kirill Shekhovtsov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kirill Shekhovtsov</b></sub></a><br /><a href=\"#content-Ksedline\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/SerzN1\"><img src=\"https://avatars0.githubusercontent.com/u/2534649?v=4\" width=\"100px;\" alt=\"Serge\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Serge</b></sub></a><br /><a href=\"#content-SerzN1\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/keyrwinz\"><img src=\"https://avatars3.githubusercontent.com/u/21241761?v=4\" width=\"100px;\" alt=\"keyrwinz\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>keyrwinz</b></sub></a><br /><a href=\"#content-keyrwinz\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/nDmitry\"><img src=\"https://avatars0.githubusercontent.com/u/2134568?v=4\" width=\"100px;\" alt=\"Dmitry Nikitenko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dmitry Nikitenko</b></sub></a><br /><a href=\"#content-nDmitry\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://bushuai.cc\"><img src=\"https://avatars0.githubusercontent.com/u/1875256?v=4\" width=\"100px;\" alt=\"bushuai\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>bushuai</b></sub></a><br /><a href=\"https://github.com/goldbergyoni/nodebestpractices/pulls?q=is%3Apr+reviewed-by%3Abushuai\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#content-bushuai\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://stackoverflow.com/users/1348195/benjamin-gruenbaum\"><img src=\"https://avatars2.githubusercontent.com/u/1315533?v=4\" width=\"100px;\" alt=\"Benjamin Gruenbaum\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Benjamin Gruenbaum</b></sub></a><br /><a href=\"#content-benjamingr\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/byeze\"><img src=\"https://avatars1.githubusercontent.com/u/7424138?v=4\" width=\"100px;\" alt=\"Ezequiel\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ezequiel</b></sub></a><br /><a href=\"#translation-byeze\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/juaoose\"><img src=\"https://avatars3.githubusercontent.com/u/994594?v=4\" width=\"100px;\" alt=\"Juan José Rodríguez\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Juan José Rodríguez</b></sub></a><br /><a href=\"#translation-juaoose\" title=\"Translation\">🌍</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/OrBin\"><img src=\"https://avatars1.githubusercontent.com/u/6897234?v=4\" width=\"100px;\" alt=\"Or Bin\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Or Bin</b></sub></a><br /><a href=\"#content-OrBin\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/andreoav07\"><img src=\"https://avatars2.githubusercontent.com/u/508827?v=4\" width=\"100px;\" alt=\"Andreo Vieira\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Andreo Vieira</b></sub></a><br /><a href=\"#content-andreoav\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mikicho\"><img src=\"https://avatars1.githubusercontent.com/u/11459632?v=4\" width=\"100px;\" alt=\"Michael Solomon\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Michael Solomon</b></sub></a><br /><a href=\"#content-mikicho\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jimmycallin\"><img src=\"https://avatars0.githubusercontent.com/u/2225828?v=4\" width=\"100px;\" alt=\"Jimmy Callin\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jimmy Callin</b></sub></a><br /><a href=\"#content-jimmycallin\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/siddharthofficial/\"><img src=\"https://avatars2.githubusercontent.com/u/26025955?v=4\" width=\"100px;\" alt=\"Siddharth\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Siddharth</b></sub></a><br /><a href=\"#content-w01fS\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://ryansmith.tech/\"><img src=\"https://avatars0.githubusercontent.com/u/1578766?v=4\" width=\"100px;\" alt=\"Ryan Smith\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ryan Smith</b></sub></a><br /><a href=\"#content-ryan3E0\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://de.linkedin.com/in/tom-boettger\"><img src=\"https://avatars2.githubusercontent.com/u/49961674?v=4\" width=\"100px;\" alt=\"Tom Boettger\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tom Boettger</b></sub></a><br /><a href=\"#content-bttger\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jormaechea\"><img src=\"https://avatars3.githubusercontent.com/u/5612500?v=4\" width=\"100px;\" alt=\"Joaquín Ormaechea\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Joaquín Ormaechea</b></sub></a><br /><a href=\"#translation-jormaechea\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/dfrzuz\"><img src=\"https://avatars3.githubusercontent.com/u/71859096?v=4\" width=\"100px;\" alt=\"dfrzuz\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>dfrzuz</b></sub></a><br /><a href=\"#translation-dfrzuz\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/victor-homyakov\"><img src=\"https://avatars1.githubusercontent.com/u/121449?v=4\" width=\"100px;\" alt=\"Victor Homyakov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Victor Homyakov</b></sub></a><br /><a href=\"#content-victor-homyakov\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://joshuahemphill.com\"><img src=\"https://avatars3.githubusercontent.com/u/46608115?v=4\" width=\"100px;\" alt=\"Josh\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Josh</b></sub></a><br /><a href=\"#content-josh-hemphill\" title=\"Content\">🖋</a> <a href=\"#security-josh-hemphill\" title=\"Security\">🛡️</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/alec-francis\"><img src=\"https://avatars2.githubusercontent.com/u/32949882?v=4\" width=\"100px;\" alt=\"Alec Francis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alec Francis</b></sub></a><br /><a href=\"#content-alec-francis\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/arjun6610\"><img src=\"https://avatars1.githubusercontent.com/u/61268891?v=4\" width=\"100px;\" alt=\"arjun6610\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>arjun6610</b></sub></a><br /><a href=\"#content-arjun6610\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jan-osch\"><img src=\"https://avatars2.githubusercontent.com/u/11651780?v=4\" width=\"100px;\" alt=\"Jan Osch\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jan Osch</b></sub></a><br /><a href=\"#content-jan-osch\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/thiagotrs\"><img src=\"https://avatars2.githubusercontent.com/u/32005779?v=4\" width=\"100px;\" alt=\"Thiago Rotondo Sampaio\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Thiago Rotondo Sampaio</b></sub></a><br /><a href=\"#translation-thiagotrs\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Alexsey\"><img src=\"https://avatars0.githubusercontent.com/u/6392013?v=4\" width=\"100px;\" alt=\"Alexsey\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alexsey</b></sub></a><br /><a href=\"#content-Alexsey\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/13luismb\"><img src=\"https://avatars1.githubusercontent.com/u/32210483?v=4\" width=\"100px;\" alt=\"Luis A. Acurero\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Luis A. Acurero</b></sub></a><br /><a href=\"#translation-13luismb\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://lromano97.github.io/\"><img src=\"https://avatars1.githubusercontent.com/u/22394847?v=4\" width=\"100px;\" alt=\"Lucas Romano\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Lucas Romano</b></sub></a><br /><a href=\"#translation-lromano97\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/denisecase\"><img src=\"https://avatars0.githubusercontent.com/u/13016516?v=4\" width=\"100px;\" alt=\"Denise Case\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Denise Case</b></sub></a><br /><a href=\"#content-denisecase\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://stackoverflow.com/story/elektronik\"><img src=\"https://avatars3.githubusercontent.com/u/1078554?v=4\" width=\"100px;\" alt=\"Nick Ribal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nick Ribal</b></sub></a><br /><a href=\"#content-elektronik2k5\" title=\"Content\">🖋</a> <a href=\"https://github.com/goldbergyoni/nodebestpractices/pulls?q=is%3Apr+reviewed-by%3Aelektronik2k5\" title=\"Reviewed Pull Requests\">👀</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/0xflotus\"><img src=\"https://avatars3.githubusercontent.com/u/26602940?v=4\" width=\"100px;\" alt=\"0xflotus\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>0xflotus</b></sub></a><br /><a href=\"#content-0xflotus\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.dijonkitchen.org/\"><img src=\"https://avatars3.githubusercontent.com/u/11434205?v=4\" width=\"100px;\" alt=\"Jonathan Chen\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jonathan Chen</b></sub></a><br /><a href=\"#content-dijonkitchen\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/dilansri\"><img src=\"https://avatars2.githubusercontent.com/u/5089728?v=4\" width=\"100px;\" alt=\"Dilan Srilal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dilan Srilal</b></sub></a><br /><a href=\"#content-dilansri\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://vectree.ru\"><img src=\"https://avatars3.githubusercontent.com/u/4215285?v=4\" width=\"100px;\" alt=\"vladthelittleone\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>vladthelittleone</b></sub></a><br /><a href=\"#translation-vladthelittleone\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.nikolaso.com\"><img src=\"https://avatars0.githubusercontent.com/u/60047271?v=4\" width=\"100px;\" alt=\"Nik Osvalds\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nik Osvalds</b></sub></a><br /><a href=\"#content-nosvalds\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kdaniel21\"><img src=\"https://avatars0.githubusercontent.com/u/39854385?v=4\" width=\"100px;\" alt=\"Daniel Kiss\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Daniel Kiss</b></sub></a><br /><a href=\"https://github.com/goldbergyoni/nodebestpractices/commits?author=kdaniel21\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/forresst17\"><img src=\"https://avatars2.githubusercontent.com/u/163352?v=4\" width=\"100px;\" alt=\"Forresst\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Forresst</b></sub></a><br /><a href=\"#content-forresst\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/svenheden\"><img src=\"https://avatars1.githubusercontent.com/u/76098?v=4\" width=\"100px;\" alt=\"Jonathan Svenheden\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jonathan Svenheden</b></sub></a><br /><a href=\"#content-svenheden\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/AustrisC\"><img src=\"https://avatars2.githubusercontent.com/u/12381652?v=4\" width=\"100px;\" alt=\"AustrisC\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>AustrisC</b></sub></a><br /><a href=\"#content-AustrisC\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/cisco0808\"><img src=\"https://avatars0.githubusercontent.com/u/60251188?v=4\" width=\"100px;\" alt=\"kyeongtae kim\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>kyeongtae kim</b></sub></a><br /><a href=\"#translation-cisco0808\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://keybase.io/651z9pz968v2accj\"><img src=\"https://avatars.githubusercontent.com/u/65741741?v=4\" width=\"100px;\" alt=\"007\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>007</b></sub></a><br /><a href=\"#content-6gx7iycn53ioq2e8apk1j1ypwov4giui\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.anediaz.com\"><img src=\"https://avatars.githubusercontent.com/u/17216937?v=4\" width=\"100px;\" alt=\"Ane Diaz de Tuesta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ane Diaz de Tuesta</b></sub></a><br /><a href=\"#translation-anediaz\" title=\"Translation\">🌍</a> <a href=\"#content-anediaz\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://yukioh.net\"><img src=\"https://avatars.githubusercontent.com/u/23182489?v=4\" width=\"100px;\" alt=\"YukiOta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>YukiOta</b></sub></a><br /><a href=\"#translation-YukiOta\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.yeovilhospital.co.uk/\"><img src=\"https://avatars.githubusercontent.com/u/43814140?v=4\" width=\"100px;\" alt=\"Frazer Smith\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Frazer Smith</b></sub></a><br /><a href=\"#content-Fdawgs\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/rluvaton\"><img src=\"https://avatars.githubusercontent.com/u/16746759?v=4\" width=\"100px;\" alt=\"Raz Luvaton\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Raz Luvaton</b></sub></a><br /><a href=\"#content-rluvaton\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/YA21\"><img src=\"https://avatars.githubusercontent.com/u/37298463?v=4\" width=\"100px;\" alt=\"Yuta Azumi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yuta Azumi</b></sub></a><br /><a href=\"#content-YA21\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/andrewjbarbour\"><img src=\"https://avatars.githubusercontent.com/u/77080074?v=4\" width=\"100px;\" alt=\"andrewjbarbour\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>andrewjbarbour</b></sub></a><br /><a href=\"#content-andrewjbarbour\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://MasujimaRyohei.jp\"><img src=\"https://avatars.githubusercontent.com/u/17163541?v=4\" width=\"100px;\" alt=\"mr\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>mr</b></sub></a><br /><a href=\"#content-MasujimaRyohei\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kubanac95\"><img src=\"https://avatars.githubusercontent.com/u/16191931?v=4\" width=\"100px;\" alt=\"Aleksandar\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Aleksandar</b></sub></a><br /><a href=\"#content-kubanac95\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://vincentjonathan.com\"><img src=\"https://avatars.githubusercontent.com/u/32597776?v=4\" width=\"100px;\" alt=\"Owl\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Owl</b></sub></a><br /><a href=\"#content-SuspiciousLookingOwl\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/yedidyas\"><img src=\"https://avatars.githubusercontent.com/u/36074789?v=4\" width=\"100px;\" alt=\"Yedidya Schwartz\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yedidya Schwartz</b></sub></a><br /><a href=\"#content-yedidyas\" title=\"Content\">🖋</a> <a href=\"#example-yedidyas\" title=\"Examples\">💡</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ariel-diaz\"><img src=\"https://avatars.githubusercontent.com/u/20423540?v=4\" width=\"100px;\" alt=\"ari\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>ari</b></sub></a><br /><a href=\"#content-ariel-diaz\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.koenigthomas.de/\"><img src=\"https://avatars.githubusercontent.com/u/7080389?v=4\" width=\"100px;\" alt=\"Thomas König\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Thomas König</b></sub></a><br /><a href=\"#content-Vispercept\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/coocos\"><img src=\"https://avatars.githubusercontent.com/u/1397804?v=4\" width=\"100px;\" alt=\"Kalle Lämsä\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kalle Lämsä</b></sub></a><br /><a href=\"#content-coocos\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://math.cat\"><img src=\"https://avatars.githubusercontent.com/u/10328430?v=4\" width=\"100px;\" alt=\"Wyatt\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Wyatt</b></sub></a><br /><a href=\"#content-ZhyMC\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://libkhadir.fr\"><img src=\"https://avatars.githubusercontent.com/u/45130488?v=4\" width=\"100px;\" alt=\"KHADIR Tayeb\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>KHADIR Tayeb</b></sub></a><br /><a href=\"#content-tkhadir\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/shankarregmi\"><img src=\"https://avatars.githubusercontent.com/u/7703345?v=4\" width=\"100px;\" alt=\"Shankar Regmi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shankar Regmi</b></sub></a><br /><a href=\"#content-shankarregmi\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/codebyshubham\"><img src=\"https://avatars.githubusercontent.com/u/10389723?v=4\" width=\"100px;\" alt=\"Shubham\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shubham</b></sub></a><br /><a href=\"#content-codebyshubham\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://lucalves.me/\"><img src=\"https://avatars.githubusercontent.com/u/17712401?v=4\" width=\"100px;\" alt=\"Lucas Alves\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Lucas Alves</b></sub></a><br /><a href=\"#content-lucalves\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/benjaminudoh10\"><img src=\"https://avatars.githubusercontent.com/u/9018331?v=4\" width=\"100px;\" alt=\"Benjamin\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Benjamin</b></sub></a><br /><a href=\"#content-benjaminudoh10\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.yjoer.com\"><img src=\"https://avatars.githubusercontent.com/u/47742486?v=4\" width=\"100px;\" alt=\"Yeoh Joer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yeoh Joer</b></sub></a><br /><a href=\"#content-yjoer\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://blog.miigon.net\"><img src=\"https://avatars.githubusercontent.com/u/16161991?v=4\" width=\"100px;\" alt=\"Miigon\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Miigon</b></sub></a><br /><a href=\"#content-Miigon\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://brainstorage.me/Egregor2011\"><img src=\"https://avatars.githubusercontent.com/u/3630318?v=4\" width=\"100px;\" alt=\"Rostislav Bogorad\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Rostislav Bogorad</b></sub></a><br /><a href=\"#content-Egregor2011\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Flouse\"><img src=\"https://avatars.githubusercontent.com/u/1297478?v=4\" width=\"100px;\" alt=\"Flouse\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Flouse</b></sub></a><br /><a href=\"#content-Flouse\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://taranttini.com\"><img src=\"https://avatars.githubusercontent.com/u/6922125?v=4\" width=\"100px;\" alt=\"Tarantini Pereira\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tarantini Pereira</b></sub></a><br /><a href=\"#content-taranttini\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kzmat\"><img src=\"https://avatars.githubusercontent.com/u/34614358?v=4\" width=\"100px;\" alt=\"Kazuki Matsuo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kazuki Matsuo</b></sub></a><br /><a href=\"#content-kzmat\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/burkybang\"><img src=\"https://avatars.githubusercontent.com/u/927886?v=4\" width=\"100px;\" alt=\"Adam Smith\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Adam Smith</b></sub></a><br /><a href=\"#content-burkybang\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://codekodo.tistory.com\"><img src=\"https://avatars.githubusercontent.com/u/33795856?v=4\" width=\"100px;\" alt=\"Dohyeon Ko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dohyeon Ko</b></sub></a><br /><a href=\"#content-k906506\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/vlad99902\"><img src=\"https://avatars.githubusercontent.com/u/67615003?v=4\" width=\"100px;\" alt=\"Vladislav Legkov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vladislav Legkov</b></sub></a><br /><a href=\"#content-vlad99902\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://kerolloz.github.io\"><img src=\"https://avatars.githubusercontent.com/u/36763164?v=4\" width=\"100px;\" alt=\"Kerollos Magdy\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kerollos Magdy</b></sub></a><br /><a href=\"#content-kerolloz\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/erez-lieberman-b90b7219/\"><img src=\"https://avatars.githubusercontent.com/u/3277260?v=4\" width=\"100px;\" alt=\"Erez Lieberman\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Erez Lieberman</b></sub></a><br /><a href=\"#content-erezLieberman\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/breno-macedo-ernani-de-s%C3%A1-110223158/\"><img src=\"https://avatars.githubusercontent.com/u/48841329?v=4\" width=\"100px;\" alt=\"Breno Macedo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Breno Macedo</b></sub></a><br /><a href=\"#content-breno404\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/JFernando122\"><img src=\"https://avatars.githubusercontent.com/u/40414805?v=4\" width=\"100px;\" alt=\"Fernando Flores\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Fernando Flores</b></sub></a><br /><a href=\"#translation-JFernando122\" title=\"Translation\">🌍</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/rafaelconcept/\"><img src=\"https://avatars.githubusercontent.com/u/43880669?v=4\" width=\"100px;\" alt=\"Rafael Brito\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Rafael Brito</b></sub></a><br /><a href=\"#translation-rafaelconcept\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://emiliano-peralta-portfolio.vercel.app/\"><img src=\"https://avatars.githubusercontent.com/u/63617637?v=4\" width=\"100px;\" alt=\"Emiliano Peralta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Emiliano Peralta</b></sub></a><br /><a href=\"#translation-emiperalta\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://lannex.github.io\"><img src=\"https://avatars.githubusercontent.com/u/7369541?v=4\" width=\"100px;\" alt=\"Shin, SJ\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shin, SJ</b></sub></a><br /><a href=\"#content-lannex\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.benjaminforster.com\"><img src=\"https://avatars.githubusercontent.com/u/12589522?v=4\" width=\"100px;\" alt=\"Benjamin Forster\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Benjamin Forster</b></sub></a><br /><a href=\"#content-e-e-e\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/DanieleFedeli\"><img src=\"https://avatars.githubusercontent.com/u/37077048?v=4\" width=\"100px;\" alt=\"Daniele Fedeli\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Daniele Fedeli</b></sub></a><br /><a href=\"#content-DanieleFedeli\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/djob195\"><img src=\"https://avatars.githubusercontent.com/u/17146669?v=4\" width=\"100px;\" alt=\"djob195\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>djob195</b></sub></a><br /><a href=\"#content-djob195\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/antspk\"><img src=\"https://avatars.githubusercontent.com/u/78955792?v=4\" width=\"100px;\" alt=\"antspk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>antspk</b></sub></a><br /><a href=\"#content-antspk\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://jjy0821.tistory.com/\"><img src=\"https://avatars.githubusercontent.com/u/88075341?v=4\" width=\"100px;\" alt=\"정진영\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>정진영</b></sub></a><br /><a href=\"#content-jjy821\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kkk-cashwalk\"><img src=\"https://avatars.githubusercontent.com/u/91455122?v=4\" width=\"100px;\" alt=\"kkk-cashwalk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>kkk-cashwalk</b></sub></a><br /><a href=\"#content-kkk-cashwalk\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/apainintheneck\"><img src=\"https://avatars.githubusercontent.com/u/42982186?v=4\" width=\"100px;\" alt=\"apainintheneck\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>apainintheneck</b></sub></a><br /><a href=\"#content-apainintheneck\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/koyanyaroo\"><img src=\"https://avatars.githubusercontent.com/u/9715368?v=4\" width=\"100px;\" alt=\"Fajar Budhi Iswanda\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Fajar Budhi Iswanda</b></sub></a><br /><a href=\"#content-koyanyaroo\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jutiger\"><img src=\"https://avatars.githubusercontent.com/u/97490806?v=4\" width=\"100px;\" alt=\"이주호\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>이주호</b></sub></a><br /><a href=\"#content-jutiger\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/MisterSingh\"><img src=\"https://avatars.githubusercontent.com/u/44462019?v=4\" width=\"100px;\" alt=\"Singh\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Singh</b></sub></a><br /><a href=\"#content-MisterSingh\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Alex-Dumitru\"><img src=\"https://avatars.githubusercontent.com/u/43738450?v=4\" width=\"100px;\" alt=\"Alex Dumitru\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alex Dumitru</b></sub></a><br /><a href=\"#content-Alex-Dumitru\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/lykhatskyi\"><img src=\"https://avatars.githubusercontent.com/u/18104686?v=4\" width=\"100px;\" alt=\"Anton Lykhatskyi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Anton Lykhatskyi</b></sub></a><br /><a href=\"#content-lykhatskyi\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/EverythingAvailable\"><img src=\"https://avatars.githubusercontent.com/u/81002379?v=4\" width=\"100px;\" alt=\"sangwonlee\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>sangwonlee</b></sub></a><br /><a href=\"#content-EverythingAvailable\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/euberdeveloper\"><img src=\"https://avatars.githubusercontent.com/u/33126163?v=4\" width=\"100px;\" alt=\"Eugenio Berretta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Eugenio Berretta</b></sub></a><br /><a href=\"#content-euberdeveloper\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/soranakk\"><img src=\"https://avatars.githubusercontent.com/u/3930307?v=4\" width=\"100px;\" alt=\"soranakk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>soranakk</b></sub></a><br /><a href=\"#content-soranakk\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/backend-joonyoung\"><img src=\"https://avatars.githubusercontent.com/u/94430145?v=4\" width=\"100px;\" alt=\"고준영\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>고준영</b></sub></a><br /><a href=\"#content-backend-joonyoung\" title=\"Content\">🖋</a> <a href=\"https://github.com/goldbergyoni/nodebestpractices/commits?author=backend-joonyoung\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/GuilhermePortella\"><img src=\"https://avatars.githubusercontent.com/u/59876059?v=4\" width=\"100px;\" alt=\"Guilherme Portella \"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Guilherme Portella </b></sub></a><br /><a href=\"#content-GuilhermePortella\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.youtube.com/channel/UCBxzOQd2v9wWfiMDrf_RQ7A\"><img src=\"https://avatars.githubusercontent.com/u/18497570?v=4\" width=\"100px;\" alt=\"André Esser\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>André Esser</b></sub></a><br /><a href=\"#content-Esser50K\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ShiChenCong\"><img src=\"https://avatars.githubusercontent.com/u/22486446?v=4\" width=\"100px;\" alt=\"Scc\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Scc</b></sub></a><br /><a href=\"#translation-ShiChenCong\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.mauroaccornero.it\"><img src=\"https://avatars.githubusercontent.com/u/1875822?v=4\" width=\"100px;\" alt=\"Mauro Accornero\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Mauro Accornero</b></sub></a><br /><a href=\"#content-mauroaccornero\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/no-yan\"><img src=\"https://avatars.githubusercontent.com/u/63000297?v=4\" width=\"100px;\" alt=\"no-yan\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>no-yan</b></sub></a><br /><a href=\"#content-no-yan\" title=\"Content\">🖋</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 196.35,
          "content": "[✔]: assets/images/checkbox-small-blue.png\n\n# Node.js Best Practices\n\n<h1 align=\"center\">\n  <img src=\"assets/images/banner-2.jpg\" alt=\"Node.js Best Practices\"/>\n</h1>\n\n<br/>\n\n<div align=\"center\">\n  <img src=\"https://img.shields.io/badge/⚙%20Item%20count%20-%20102%20Best%20Practices-blue.svg\" alt=\"102 items\"/> <img id=\"last-update-badge\" src=\"https://img.shields.io/badge/%F0%9F%93%85%20Last%20update%20-%20January%2024%2C%202023-green.svg\" alt=\"Last update: January 3rd, 2024\" /> <img src=\"https://img.shields.io/badge/ %E2%9C%94%20Updated%20For%20Version%20-%20Node%2022.0.0-brightgreen.svg\" alt=\"Updated for Node 22.0.0\"/>\n</div>\n\n<br/>\n\n[<img src=\"assets/images/twitter.svg\" width=\"16\" height=\"16\" alt=\"\" />](https://twitter.com/nodepractices/) **Follow us on Twitter!** [**@nodepractices**](https://twitter.com/nodepractices/)\n\n<br/>\n\nRead in a different language: [![CN](./assets/flags/CN.png)**CN**](./README.chinese.md), [![FR](./assets/flags/FR.png)**FR**](./README.french.md), [![BR](./assets/flags/BR.png)**BR**](./README.brazilian-portuguese.md), [![RU](./assets/flags/RU.png)**RU**](./README.russian.md), [![PL](./assets/flags/PL.png)**PL**](./README.polish.md), [![JA](./assets/flags/JA.png)**JA**](./README.japanese.md), [![EU](./assets/flags/EU.png)**EU**](./README.basque.md) [(![ES](./assets/flags/ES.png)**ES**, ![HE](./assets/flags/HE.png)**HE**, ![KR](./assets/flags/KR.png)**KR** and ![TR](./assets/flags/TR.png)**TR** in progress! )](#translations)\n\n<br/>\n\n# 🎊 2024 edition is here!\n\n- **🛰 Modernized to 2024**: Tons of text edits, new recommended libraries, and some new best practices\n\n- **✨ Easily focus on new content**: Already visited before? Search for `#new` or `#updated` tags for new content only\n\n- **🔖 Curious to see examples? We have a starter**: Visit [Practica.js](https://github.com/practicajs/practica), our application example and boilerplate (beta) to see some practices in action\n\n<br/><br/>\n\n# Welcome! 3 Things You Ought To Know First\n\n**1. You are reading dozens of the best Node.js articles -** this repository is a summary and curation of the top-ranked content on Node.js best practices, as well as content written here by collaborators\n\n**2. It is the largest compilation, and it is growing every week -** currently, more than 80 best practices, style guides, and architectural tips are presented. New issues and pull requests are created every day to keep this live book updated. We'd love to see you contributing here, whether that is fixing code mistakes, helping with translations, or suggesting brilliant new ideas. See our [writing guidelines here](./.operations/writing-guidelines.md)\n\n**3. Best practices have additional info -** most bullets include a **🔗Read More** link that expands on the practice with code examples, quotes from selected blogs, and more information\n\n<br/><br/>\n\n# By Yoni Goldberg\n\n### Learn with me: As a consultant, I engage with worldwide teams on various activities like workshops and code reviews. 🎉AND... Hold on, I've just launched my [beyond-the-basics testing course, which is on a 🎁 limited-time sale](https://testjavascript.com/) until August 7th\n\n<br/><br/>\n\n## Table of Contents\n\n<details>\n  <summary>\n    <a href=\"#1-project-architecture-practices\">1. Project Architecture Practices (6)</a>\n  </summary>\n\n&emsp;&emsp;[1.1 Structure your solution by components `#strategic` `#updated`](#-11-structure-your-solution-by-business-components)</br>\n&emsp;&emsp;[1.2 Layer your components, keep the web layer within its boundaries `#strategic` `#updated`](#-12-layer-your-components-with-3-tiers-keep-the-web-layer-within-its-boundaries)</br>\n&emsp;&emsp;[1.3 Wrap common utilities as packages, consider publishing](#-13-wrap-common-utilities-as-packages-consider-publishing)</br>\n&emsp;&emsp;[1.4 Use environment aware, secure and hierarchical config `#updated`](#-14-use-environment-aware-secure-and-hierarchical-config)</br>\n&emsp;&emsp;[1.5 Consider all the consequences when choosing the main framework `#new`](#-15-consider-all-the-consequences-when-choosing-the-main-framework)</br>\n&emsp;&emsp;[1.6 Use TypeScript sparingly and thoughtfully `#new`](#-16-use-typescript-sparingly-and-thoughtfully)</br>\n\n</details>\n\n<details>\n  <summary>\n    <a href=\"#2-error-handling-practices\">2. Error Handling Practices (12)</a>\n  </summary>\n\n&emsp;&emsp;[2.1 Use Async-Await or promises for async error handling](#-21-use-async-await-or-promises-for-async-error-handling)</br>\n&emsp;&emsp;[2.2 Extend the built-in Error object `#strategic` `#updated`](#-22-extend-the-built-in-error-object)</br>\n&emsp;&emsp;[2.3 Distinguish operational vs programmer errors `#strategic` `#updated`](#-23-distinguish-catastrophic-errors-from-operational-errors)</br>\n&emsp;&emsp;[2.4 Handle errors centrally, not within a middleware `#strategic`](#-24-handle-errors-centrally-not-within-a-middleware)</br>\n&emsp;&emsp;[2.5 Document API errors using OpenAPI or GraphQL](#-25-document-api-errors-using-openapi-or-graphql)</br>\n&emsp;&emsp;[2.6 Exit the process gracefully when a stranger comes to town `#strategic`](#-26-exit-the-process-gracefully-when-a-stranger-comes-to-town)</br>\n&emsp;&emsp;[2.7 Use a mature logger to increase errors visibility `#updated`](#-27-use-a-mature-logger-to-increase-errors-visibility)</br>\n&emsp;&emsp;[2.8 Test error flows using your favorite test framework `#updated`](#-28-test-error-flows-using-your-favorite-test-framework)</br>\n&emsp;&emsp;[2.9 Discover errors and downtime using APM products](#-29-discover-errors-and-downtime-using-apm-products)</br>\n&emsp;&emsp;[2.10 Catch unhandled promise rejections `#updated`](#-210-catch-unhandled-promise-rejections)</br>\n&emsp;&emsp;[2.11 Fail fast, validate arguments using a dedicated library](#-211-fail-fast-validate-arguments-using-a-dedicated-library)</br>\n&emsp;&emsp;[2.12 Always await promises before returning to avoid a partial stacktrace `#new`](#-212-always-await-promises-before-returning-to-avoid-a-partial-stacktrace)</br>\n&emsp;&emsp;[2.13 Subscribe to event emitters 'error' event `#new`](#-213-subscribe-to-event-emitters-and-streams-error-event)</br>\n\n</details>\n\n<details>\n  <summary>\n    <a href=\"#3-code-patterns-and-style-practices\">3. Code Style Practices (12)</a>\n  </summary>\n\n&emsp;&emsp;[3.1 Use ESLint `#strategic`](#-31-use-eslint)</br>\n&emsp;&emsp;[3.2 Use Node.js eslint extension plugins `#updated`](#-32-use-nodejs-eslint-extension-plugins)</br>\n&emsp;&emsp;[3.3 Start a Codeblock's Curly Braces on the Same Line](#-33-start-a-codeblocks-curly-braces-on-the-same-line)</br>\n&emsp;&emsp;[3.4 Separate your statements properly](#-34-separate-your-statements-properly)</br>\n&emsp;&emsp;[3.5 Name your functions](#-35-name-your-functions)</br>\n&emsp;&emsp;[3.6 Use naming conventions for variables, constants, functions and classes](#-36-use-naming-conventions-for-variables-constants-functions-and-classes)</br>\n&emsp;&emsp;[3.7 Prefer const over let. Ditch the var](#-37-prefer-const-over-let-ditch-the-var)</br>\n&emsp;&emsp;[3.8 Require modules first, not inside functions](#-38-require-modules-first-not-inside-functions)</br>\n&emsp;&emsp;[3.9 Set an explicit entry point to a module/folder `#updated`](#-39-set-an-explicit-entry-point-to-a-modulefolder)</br>\n&emsp;&emsp;[3.10 Use the === operator](#-310-use-the--operator)</br>\n&emsp;&emsp;[3.11 Use Async Await, avoid callbacks `#strategic`](#-311-use-async-await-avoid-callbacks)</br>\n&emsp;&emsp;[3.12 Use arrow function expressions (=>)](#-312-use-arrow-function-expressions-)</br>\n&emsp;&emsp;[3.13 Avoid effects outside of functions `#new`](#-313-avoid-effects-outside-of-functions)</br>\n\n</details>\n\n<details>\n  <summary>\n    <a href=\"#4-testing-and-overall-quality-practices\">4. Testing And Overall Quality Practices (13)</a>\n  </summary>\n\n&emsp;&emsp;[4.1 At the very least, write API (component) testing `#strategic`](#-41-at-the-very-least-write-api-component-testing)</br>\n&emsp;&emsp;[4.2 Include 3 parts in each test name `#new`](#-42-include-3-parts-in-each-test-name)</br>\n&emsp;&emsp;[4.3 Structure tests by the AAA pattern `#strategic`](#-43-structure-tests-by-the-aaa-pattern)</br>\n&emsp;&emsp;[4.4 Ensure Node version is unified `#new`](#-44-ensure-node-version-is-unified)</br>\n&emsp;&emsp;[4.5 Avoid global test fixtures and seeds, add data per-test `#strategic`](#-45-avoid-global-test-fixtures-and-seeds-add-data-per-test)</br>\n&emsp;&emsp;[4.6 Tag your tests `#advanced`](#-46-tag-your-tests)</br>\n&emsp;&emsp;[4.7 Check your test coverage, it helps to identify wrong test patterns](#-47-check-your-test-coverage-it-helps-to-identify-wrong-test-patterns)</br>\n&emsp;&emsp;[4.8 Use production-like environment for e2e testing](#-48-use-production-like-environment-for-e2e-testing)</br>\n&emsp;&emsp;[4.9 Refactor regularly using static analysis tools](#-49-refactor-regularly-using-static-analysis-tools)</br>\n&emsp;&emsp;[4.10 Mock responses of external HTTP services #advanced `#new` `#advanced`](#-410-mock-responses-of-external-http-services)</br>\n&emsp;&emsp;[4.11 Test your middlewares in isolation](#-411-test-your-middlewares-in-isolation)</br>\n&emsp;&emsp;[4.12 Specify a port in production, randomize in testing `#new`](#-412-specify-a-port-in-production-randomize-in-testing)</br>\n&emsp;&emsp;[4.13 Test the five possible outcomes #strategic `#new`](#-413-test-the-five-possible-outcomes)</br>\n\n</details>\n\n<details>\n  <summary>\n    <a href=\"#5-going-to-production-practices\">5. Going To Production Practices (19)</a>\n  </summary>\n\n&emsp;&emsp;[5.1. Monitoring `#strategic`](#-51-monitoring)</br>\n&emsp;&emsp;[5.2. Increase the observability using smart logging `#strategic`](#-52-increase-the-observability-using-smart-logging)</br>\n&emsp;&emsp;[5.3. Delegate anything possible (e.g. gzip, SSL) to a reverse proxy `#strategic`](#-53-delegate-anything-possible-eg-gzip-ssl-to-a-reverse-proxy)</br>\n&emsp;&emsp;[5.4. Lock dependencies](#-54-lock-dependencies)</br>\n&emsp;&emsp;[5.5. Guard process uptime using the right tool](#-55-guard-process-uptime-using-the-right-tool)</br>\n&emsp;&emsp;[5.6. Utilize all CPU cores](#-56-utilize-all-cpu-cores)</br>\n&emsp;&emsp;[5.7. Create a ‘maintenance endpoint’](#-57-create-a-maintenance-endpoint)</br>\n&emsp;&emsp;[5.8. Discover the unknowns using APM products `#advanced` `#updated`](#-58-discover-the-unknowns-using-apm-products)</br>\n&emsp;&emsp;[5.9. Make your code production-ready](#-59-make-your-code-production-ready)</br>\n&emsp;&emsp;[5.10. Measure and guard the memory usage `#advanced`](#-510-measure-and-guard-the-memory-usage)</br>\n&emsp;&emsp;[5.11. Get your frontend assets out of Node](#-511-get-your-frontend-assets-out-of-node)</br>\n&emsp;&emsp;[5.12. Strive to be stateless `#strategic`](#-512-strive-to-be-stateless)</br>\n&emsp;&emsp;[5.13. Use tools that automatically detect vulnerabilities](#-513-use-tools-that-automatically-detect-vulnerabilities)</br>\n&emsp;&emsp;[5.14. Assign a transaction id to each log statement `#advanced`](#-514-assign-a-transaction-id-to-each-log-statement)</br>\n&emsp;&emsp;[5.15. Set NODE_ENV=production](#-515-set-node_envproduction)</br>\n&emsp;&emsp;[5.16. Design automated, atomic and zero-downtime deployments `#advanced`](#-516-design-automated-atomic-and-zero-downtime-deployments)</br>\n&emsp;&emsp;[5.17. Use an LTS release of Node.js](#-517-use-an-lts-release-of-nodejs)</br>\n&emsp;&emsp;[5.18. Log to stdout, avoid specifying log destination within the app `#updated`](#-518-log-to-stdout-avoid-specifying-log-destination-within-the-app)</br>\n&emsp;&emsp;[5.19. Install your packages with npm ci `#new`](#-519-install-your-packages-with-npm-ci)</br>\n\n</details>\n\n<details>\n  <summary>\n    <a href=\"#6-security-best-practices\">6. Security Practices (25)</a>\n  </summary>\n\n&emsp;&emsp;[6.1. Embrace linter security rules](#-61-embrace-linter-security-rules)</br>\n&emsp;&emsp;[6.2. Limit concurrent requests using a middleware](#-62-limit-concurrent-requests-using-a-middleware)</br>\n&emsp;&emsp;[6.3 Extract secrets from config files or use packages to encrypt them `#strategic`](#-63-extract-secrets-from-config-files-or-use-packages-to-encrypt-them)</br>\n&emsp;&emsp;[6.4. Prevent query injection vulnerabilities with ORM/ODM libraries `#strategic`](#-64-prevent-query-injection-vulnerabilities-with-ormodm-libraries)</br>\n&emsp;&emsp;[6.5. Collection of generic security best practices](#-65-collection-of-generic-security-best-practices)</br>\n&emsp;&emsp;[6.6. Adjust the HTTP response headers for enhanced security](#-66-adjust-the-http-response-headers-for-enhanced-security)</br>\n&emsp;&emsp;[6.7. Constantly and automatically inspect for vulnerable dependencies `#strategic`](#-67-constantly-and-automatically-inspect-for-vulnerable-dependencies)</br>\n&emsp;&emsp;[6.8. Protect Users' Passwords/Secrets using bcrypt or scrypt `#strategic`](#-68-protect-users-passwordssecrets-using-bcrypt-or-scrypt)</br>\n&emsp;&emsp;[6.9. Escape HTML, JS and CSS output](#-69-escape-html-js-and-css-output)</br>\n&emsp;&emsp;[6.10. Validate incoming JSON schemas `#strategic`](#-610-validate-incoming-json-schemas)</br>\n&emsp;&emsp;[6.11. Support blocklisting JWTs](#-611-support-blocklisting-jwts)</br>\n&emsp;&emsp;[6.12. Prevent brute-force attacks against authorization `#advanced`](#-612-prevent-brute-force-attacks-against-authorization)</br>\n&emsp;&emsp;[6.13. Run Node.js as non-root user](#-613-run-nodejs-as-non-root-user)</br>\n&emsp;&emsp;[6.14. Limit payload size using a reverse-proxy or a middleware](#-614-limit-payload-size-using-a-reverse-proxy-or-a-middleware)</br>\n&emsp;&emsp;[6.15. Avoid JavaScript eval statements](#-615-avoid-javascript-eval-statements)</br>\n&emsp;&emsp;[6.16. Prevent evil RegEx from overloading your single thread execution](#-616-prevent-evil-regex-from-overloading-your-single-thread-execution)</br>\n&emsp;&emsp;[6.17. Avoid module loading using a variable](#-617-avoid-module-loading-using-a-variable)</br>\n&emsp;&emsp;[6.18. Run unsafe code in a sandbox](#-618-run-unsafe-code-in-a-sandbox)</br>\n&emsp;&emsp;[6.19. Take extra care when working with child processes `#advanced`](#-619-take-extra-care-when-working-with-child-processes)</br>\n&emsp;&emsp;[6.20. Hide error details from clients](#-620-hide-error-details-from-clients)</br>\n&emsp;&emsp;[6.21. Configure 2FA for npm or Yarn `#strategic`](#-621-configure-2fa-for-npm-or-yarn)</br>\n&emsp;&emsp;[6.22. Modify session middleware settings](#-622-modify-session-middleware-settings)</br>\n&emsp;&emsp;[6.23. Avoid DOS attacks by explicitly setting when a process should crash `#advanced`](#-623-avoid-dos-attacks-by-explicitly-setting-when-a-process-should-crash)</br>\n&emsp;&emsp;[6.24. Prevent unsafe redirects](#-624-prevent-unsafe-redirects)</br>\n&emsp;&emsp;[6.25. Avoid publishing secrets to the npm registry](#-625-avoid-publishing-secrets-to-the-npm-registry)</br>\n&emsp;&emsp;[6.26. 6.26 Inspect for outdated packages](#-626-inspect-for-outdated-packages)</br>\n&emsp;&emsp;[6.27. Import built-in modules using the 'node:' protocol `#new`](#-627-import-built-in-modules-using-the-node-protocol)</br>\n\n</details>\n\n<details>\n  <summary>\n    <a href=\"#7-draft-performance-best-practices\">7. Performance Practices (2) (Work In Progress️ ✍️)</a>\n  </summary>\n\n&emsp;&emsp;[7.1. Don't block the event loop](#-71-dont-block-the-event-loop)</br>\n&emsp;&emsp;[7.2. Prefer native JS methods over user-land utils like Lodash](#-72-prefer-native-js-methods-over-user-land-utils-like-lodash)</br>\n\n</details>\n\n<details>\n  <summary>\n    <a href=\"#8-docker-best-practices\">8. Docker Practices (15)</a>\n  </summary>\n\n&emsp;&emsp;[8.1 Use multi-stage builds for leaner and more secure Docker images `#strategic`](#-81-use-multi-stage-builds-for-leaner-and-more-secure-docker-images)</br>\n&emsp;&emsp;[8.2. Bootstrap using node command, avoid npm start](#-82-bootstrap-using-node-command-avoid-npm-start)</br>\n&emsp;&emsp;[8.3. Let the Docker runtime handle replication and uptime `#strategic`](#-83-let-the-docker-runtime-handle-replication-and-uptime)</br>\n&emsp;&emsp;[8.4. Use .dockerignore to prevent leaking secrets](#-84-use-dockerignore-to-prevent-leaking-secrets)</br>\n&emsp;&emsp;[8.5. Clean-up dependencies before production](#-85-clean-up-dependencies-before-production)</br>\n&emsp;&emsp;[8.6. Shutdown smartly and gracefully `#advanced`](#-86-shutdown-smartly-and-gracefully)</br>\n&emsp;&emsp;[8.7. Set memory limits using both Docker and v8 `#advanced` `#strategic`](#-87-set-memory-limits-using-both-docker-and-v8)</br>\n&emsp;&emsp;[8.8. Plan for efficient caching](#-88-plan-for-efficient-caching)</br>\n&emsp;&emsp;[8.9. Use explicit image reference, avoid latest tag](#-89-use-explicit-image-reference-avoid-latest-tag)</br>\n&emsp;&emsp;[8.10. Prefer smaller Docker base images](#-810-prefer-smaller-docker-base-images)</br>\n&emsp;&emsp;[8.11. Clean-out build-time secrets, avoid secrets in args `#strategic #new`](#-811-clean-out-build-time-secrets-avoid-secrets-in-args)</br>\n&emsp;&emsp;[8.12. Scan images for multi layers of vulnerabilities `#advanced`](#-812-scan-images-for-multi-layers-of-vulnerabilities)</br>\n&emsp;&emsp;[8.13 Clean NODE_MODULE cache](#-813-clean-node_module-cache)</br>\n&emsp;&emsp;[8.14. Generic Docker practices](#-814-generic-docker-practices)</br>\n&emsp;&emsp;[8.15. Lint your Dockerfile `#new`](#-815-lint-your-dockerfile)</br>\n\n</details>\n\n<br/><br/>\n\n# `1. Project Architecture Practices`\n\n## ![✔] 1.1 Structure your solution by business components\n\n### `📝 #updated`\n\n**TL;DR:** The root of a system should contain folders or repositories that represent reasonably sized business modules. Each component represents a product domain (i.e., bounded context), like 'user-component', 'order-component', etc. Each component has its own API, logic, and logical database. What is the significant merit? With an autonomous component, every change is performed over a granular and smaller scope - the mental overload, development friction, and deployment fear are much smaller and better. As a result, developers can move much faster. This does not necessarily demand physical separation and can be achieved using a Monorepo or with a multi-repo\n\n```bash\nmy-system\n├─ apps (components)\n│  ├─ orders\n│  ├─ users\n│  ├─ payments\n├─ libraries (generic cross-component functionality)\n│  ├─ logger\n│  ├─ authenticator\n```\n\n**Otherwise:** when artifacts from various modules/topics are mixed together, there are great chances of a tightly-coupled 'spaghetti' system. For example, in an architecture where 'module-a controller' might call 'module-b service', there are no clear modularity borders - every code change might affect anything else. With this approach, developers who code new features struggle to realize the scope and impact of their change. Consequently, they fear breaking other modules, and each deployment becomes slower and riskier\n\n🔗 [**Read More: structure by components**](./sections/projectstructre/breakintcomponents.md)\n\n<br/><br/>\n\n## ![✔] 1.2 Layer your components with 3-tiers, keep the web layer within its boundaries\n\n### `📝 #updated`\n\n**TL;DR:** Each component should contain 'layers' - a dedicated folder for common concerns: 'entry-point' where controller lives, 'domain' where the logic lives, and 'data-access'. The primary principle of the most popular architectures is to separate the technical concerns (e.g., HTTP, DB, etc) from the pure logic of the app so a developer can code more features without worrying about infrastructural concerns. Putting each concern in a dedicated folder, also known as the [3-Tier pattern](https://en.wikipedia.org/wiki/Multitier_architecture), is the _simplest_ way to meet this goal\n\n```bash\nmy-system\n├─ apps (components)\n│  ├─ component-a\n   │  ├─ entry-points\n   │  │  ├─ api # controller comes here\n   │  │  ├─ message-queue # message consumer comes here\n   │  ├─ domain # features and flows: DTO, services, logic\n   │  ├─ data-access # DB calls w/o ORM\n```\n\n**Otherwise:** It's often seen that developer pass web objects like request/response to functions in the domain/logic layer - this violates the separation principle and makes it harder to access later the logic code by other clients like testing code, scheduled jobs, message queues, etc\n\n🔗 [**Read More: layer your app**](./sections/projectstructre/createlayers.md)\n\n<br/><br/>\n\n## ![✔] 1.3 Wrap common utilities as packages, consider publishing\n\n**TL;DR:** Place all reusable modules in a dedicated folder, e.g., \"libraries\", and underneath each module in its own folder, e.g., \"/libraries/logger\". Make the module an independent package with its own package.json file to increase the module encapsulation, and allows future publishing to a repository. In a Monorepo setup, modules can be consumed by 'npm linking' to their physical paths, using ts-paths or by publishing and installing from a package manager repository like the npm registry\n\n```bash\nmy-system\n├─ apps (components)\n  │  ├─ component-a\n├─ libraries (generic cross-component functionality)\n│  ├─ logger\n│  │  ├─ package.json\n│  │  ├─ src\n│  │  │ ├─ index.js\n\n```\n\n**Otherwise:** Clients of a module might import and get coupled to internal functionality of a module. With a package.json at the root, one can set a package.json.main or package.json.exports to explicitly tell which files and functions are part of the public interface\n\n🔗 [**Read More: Structure by feature**](./sections/projectstructre/wraputilities.md)\n\n<br/><br/>\n\n## ![✔] 1.4 Use environment aware, secure and hierarchical config\n\n### `📝 #updated`\n\n**TL;DR:** A flawless configuration setup should ensure (a) keys can be read from file AND from environment variable (b) secrets are kept outside committed code (c) config is hierarchical for easier findability (d) typing support (e) validation for failing fast (f) Specify default for each key. There are a few packages that can help tick most of those boxes like [convict](https://www.npmjs.com/package/convict), [env-var](https://github.com/evanshortiss/env-var), [zod](https://github.com/colinhacks/zod), and others\n\n**Otherwise:** Consider a mandatory environment variable that wasn't provided. The app starts successfully and serve requests, some information is already persisted to DB. Then, it's realized that without this mandatory key the request can't complete, leaving the app in a dirty state\n\n🔗 [**Read More: configuration best practices**](./sections/projectstructre/configguide.md)\n\n<br/><br/>\n\n## ![✔] 1.5 Consider all the consequences when choosing the main framework\n\n### `🌟 #new`\n\n**TL;DR:** When building apps and APIs, using a framework is mandatory. It's easy to overlook alternative frameworks or important considerations and then finally land on a sub optimal option. As of 2023/2024, we believe that these four frameworks are worth considering: [Nest.js](https://nestjs.com/), [Fastify](https://www.fastify.io/), [express](https://expressjs.com/), and [Koa](https://koajs.com/). Click read more below for a detailed pros/cons of each framework. Simplistically, we believe that Nest.js is the best match for teams who wish to go OOP and/or build large-scale apps that can't get partitioned into smaller _autonomous_ components. Fastify is our recommendation for apps with reasonably-sized components (e.g., Microservices) that are built around simple Node.js mechanics. Read our [full considerations guide here](./sections/projectstructre/choose-framework.md)\n\n**Otherwise:** Due to the overwhelming amount of considerations, it's easy to make decisions based on partial information and compare apples with oranges. For example, it's believed that Fastify is a minimal web-server that should get compared with express only. In reality, it's a rich framework with many official plugins that cover many concerns\n\n🔗 [**Read More: Choosing the right framework**](./sections/projectstructre/choose-framework.md)\n\n## ![✔] 1.6 Use TypeScript sparingly and thoughtfully\n\n### `🌟 #new`\n\n**TL;DR:** Coding without type safety is no longer an option, TypeScript is the most popular option for this mission. Use it to define variables and functions return types. With that, it is also a double edge sword that can greatly _encourage_ complexity with its additional ~ 50 keywords and sophisticated features. Consider using it sparingly, mostly with simple types, and utilize advanced features only when a real need arises\n\n**Otherwise:** [Researches](https://earlbarr.com/publications/typestudy.pdf) show that using TypeScript can help in detecting ~20% bugs earlier. Without it, also the developer experience in the IDE is intolerable. On the flip side, 80% of other bugs were not discovered using types. Consequently, typed syntax is valuable but limited. Only efficient tests can discover the whole spectrum of bugs, including type-related bugs. It might also defeat its purpose: sophisticated code features are likely to increase the code complexity, which by itself increases both the amount of bugs and the average bug fix time\n\n🔗 [**Read More: TypeScript considerations**](./sections/projectstructre/typescript-considerations.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ Return to top</a></p>\n\n# `2. Error Handling Practices`\n\n## ![✔] 2.1 Use Async-Await or promises for async error handling\n\n**TL;DR:** Handling async errors in callback style is probably the fastest way to hell (a.k.a the pyramid of doom). The best gift you can give to your code is using Promises with async-await which enables a much more compact and familiar code syntax like try-catch\n\n**Otherwise:** Node.js callback style, function(err, response), is a promising way to un-maintainable code due to the mix of error handling with casual code, excessive nesting, and awkward coding patterns\n\n🔗 [**Read More: avoiding callbacks**](./sections/errorhandling/asyncerrorhandling.md)\n\n<br/><br/>\n\n## ![✔] 2.2 Extend the built-in Error object\n\n### `📝 #updated`\n\n**TL;DR:** Some libraries throw errors as a string or as some custom type – this complicates the error handling logic and the interoperability between modules. Instead, create app error object/class that extends the built-in Error object and use it whenever rejecting, throwing or emitting an error. The app error should add useful imperative properties like the error name/code and isCatastrophic. By doing so, all errors have a unified structure and support better error handling. There is `no-throw-literal` ESLint rule that strictly checks that (although it has some [limitations](https://eslint.org/docs/rules/no-throw-literal) which can be solved when using TypeScript and setting the `@typescript-eslint/no-throw-literal` rule)\n\n**Otherwise:** When invoking some component, being uncertain which type of errors come in return – it makes proper error handling much harder. Even worse, using custom types to describe errors might lead to loss of critical error information like the stack trace!\n\n🔗 [**Read More: using the built-in error object**](./sections/errorhandling/useonlythebuiltinerror.md)\n\n<br/><br/>\n\n## ![✔] 2.3 Distinguish catastrophic errors from operational errors\n\n### `📝 #updated`\n\n**TL;DR:** Operational errors (e.g. API received an invalid input) refer to known cases where the error impact is fully understood and can be handled thoughtfully. On the other hand, catastrophic error (also known as programmer errors) refers to unusual code failures that dictate to gracefully restart the application\n\n**Otherwise:** You may always restart the application when an error appears, but why let ~5000 online users down because of a minor, predicted, operational error? The opposite is also not ideal – keeping the application up when an unknown catastrophic issue (programmer error) occurred might lead to an unpredicted behavior. Differentiating the two allows acting tactfully and applying a balanced approach based on the given context\n\n🔗 [**Read More: operational vs programmer error**](./sections/errorhandling/operationalvsprogrammererror.md)\n\n<br/><br/>\n\n## ![✔] 2.4 Handle errors centrally, not within a middleware\n\n**TL;DR:** Error handling logic such as logging, deciding whether to crash and monitoring metrics should be encapsulated in a dedicated and centralized object that all entry-points (e.g. APIs, cron jobs, scheduled jobs) call when an error comes in\n\n**Otherwise:** Not handling errors within a single place will lead to code duplication and probably to improperly handled errors\n\n🔗 [**Read More: handling errors in a centralized place**](./sections/errorhandling/centralizedhandling.md)\n\n<br/><br/>\n\n## ![✔] 2.5 Document API errors using OpenAPI or GraphQL\n\n**TL;DR:** Let your API callers know which errors might come in return so they can handle these thoughtfully without crashing. For RESTful APIs, this is usually done with documentation frameworks like OpenAPI. If you're using GraphQL, you can utilize your schema and comments as well\n\n**Otherwise:** An API client might decide to crash and restart only because it received back an error it couldn’t understand. Note: the caller of your API might be you (very typical in a microservice environment)\n\n🔗 [**Read More: documenting API errors in Swagger or GraphQL**](./sections/errorhandling/documentingusingswagger.md)\n\n<br/><br/>\n\n## ![✔] 2.6 Exit the process gracefully when a stranger comes to town\n\n**TL;DR:** When an unknown error occurs (catastrophic error, see best practice 2.3) - there is uncertainty about the application healthiness. In this case, there is no escape from making the error observable, shutting off connections and exiting the process. Any reputable runtime framework like Dockerized services or cloud serverless solutions will take care to restart\n\n**Otherwise:** When an unfamiliar exception occurs, some object might be in a faulty state (e.g. an event emitter which is used globally and not firing events anymore due to some internal failure) and all future requests might fail or behave crazily\n\n🔗 [**Read More: shutting the process**](./sections/errorhandling/shuttingtheprocess.md)\n\n<br/><br/>\n\n## ![✔] 2.7 Use a mature logger to increase errors visibility\n\n### `📝 #updated`\n\n**TL;DR:** A robust logging tools like [Pino](https://github.com/pinojs/pino) or [Winston](https://github.com/winstonjs/winston) increases the errors visibility using features like log-levels, pretty print coloring and more. Console.log lacks these imperative features and should be avoided. The best in class logger allows attaching custom useful properties to log entries with minimized serialization performance penalty. Developers should write logs to `stdout` and let the infrastructure pipe the stream to the appropriate log aggregator\n\n**Otherwise:** Skimming through console.logs or manually through messy text file without querying tools or a decent log viewer might keep you busy at work until late\n\n🔗 [**Read More: using a mature logger**](./sections/errorhandling/usematurelogger.md)\n\n<br/><br/>\n\n## ![✔] 2.8 Test error flows using your favorite test framework\n\n### `📝 #updated`\n\n**TL;DR:** Whether professional automated QA or plain manual developer testing – Ensure that your code not only satisfies positive scenarios but also handles and returns the right errors. On top of this, simulate deeper error flows like uncaught exceptions and ensure that the error handler treat these properly (see code examples within the \"read more\" section)\n\n**Otherwise:** Without testing, whether automatically or manually, you can’t rely on your code to return the right errors. Without meaningful errors – there’s no error handling\n\n🔗 [**Read More: testing error flows**](./sections/errorhandling/testingerrorflows.md)\n\n<br/><br/>\n\n## ![✔] 2.9 Discover errors and downtime using APM products\n\n**TL;DR:** Monitoring and performance products (a.k.a APM) proactively gauge your codebase or API so they can automagically highlight errors, crashes, and slow parts that you were missing\n\n**Otherwise:** You might spend great effort on measuring API performance and downtimes, probably you’ll never be aware which are your slowest code parts under real-world scenario and how these affect the UX\n\n🔗 [**Read More: using APM products**](./sections/errorhandling/apmproducts.md)\n\n<br/><br/>\n\n## ![✔] 2.10 Catch unhandled promise rejections\n\n### `📝 #updated`\n\n**TL;DR:** Any exception thrown within a promise will get swallowed and discarded unless a developer didn’t forget to explicitly handle it. Even if your code is subscribed to `process.uncaughtException`! Overcome this by registering to the event `process.unhandledRejection`\n\n**Otherwise:** Your errors will get swallowed and leave no trace. Nothing to worry about\n\n🔗 [**Read More: catching unhandled promise rejection**](./sections/errorhandling/catchunhandledpromiserejection.md)\n\n<br/><br/>\n\n## ![✔] 2.11 Fail fast, validate arguments using a dedicated library\n\n**TL;DR:** Assert API input to avoid nasty bugs that are much harder to track later. The validation code is usually tedious unless you are using a modern validation library like [ajv](https://www.npmjs.com/package/ajv), [zod](https://github.com/colinhacks/zod), or [typebox](https://github.com/sinclairzx81/typebox)\n\n**Otherwise:** Consider this – your function expects a numeric argument “Discount” which the caller forgets to pass, later on, your code checks if Discount!=0 (amount of allowed discount is greater than zero), then it will allow the user to enjoy a discount. OMG, what a nasty bug. Can you see it?\n\n🔗 [**Read More: failing fast**](./sections/errorhandling/failfast.md)\n\n<br/><br/>\n\n## ![✔] 2.12 Always await promises before returning to avoid a partial stacktrace\n\n### `🌟 #new`\n\n**TL;DR:** Always do `return await` when returning a promise to benefit full error stacktrace. If a\nfunction returns a promise, that function must be declared as `async` function and explicitly\n`await` the promise before returning it\n\n**Otherwise:** The function that returns a promise without awaiting won't appear in the stacktrace.\nSuch missing frames would probably complicate the understanding of the flow that leads to the error,\nespecially if the cause of the abnormal behavior is inside of the missing function\n\n🔗 [**Read More: returning promises**](./sections/errorhandling/returningpromises.md)\n\n<br/><br/>\n\n## ![✔] 2.13 Subscribe to event emitters and streams 'error' event\n\n### `🌟 #new`\n\n**TL;DR:** Unlike typical functions, a try-catch clause won't get errors that originate from Event Emitters and anything inherited from it (e.g., streams). Instead of try-catch, subscribe to an event emitter's 'error' event so your code can handle the error in context. When dealing with [EventTargets](https://nodejs.org/api/events.html#eventtarget-and-event-api) (the web standard version of Event Emitters) there are no 'error' event and all errors end in the process.on('error) global event - in this case, at least ensure that the process crash or not based on the desired context. Also, mind that error originating from _asynchronous_ event handlers are not get caught unless the event emitter is initialized with {captureRejections: true}\n\n**Otherwise:** Event emitters are commonly used for global and key application functionality such as DB or message queue connection. When this kind of crucial objects throw an error, at best the process will crash due to unhandled exception. Even worst, it will stay alive as a zombie while a key functionality is turned off\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ Return to top</a></p>\n\n# `3. Code Patterns And Style Practices`\n\n## ![✔] 3.1 Use ESLint\n\n**TL;DR:** [ESLint](https://eslint.org) is the de-facto standard for checking possible code errors and fixing code style, not only to identify nitty-gritty spacing issues but also to detect serious code anti-patterns like developers throwing errors without classification. Though ESLint can automatically fix code styles, other tools like [prettier](https://www.npmjs.com/package/prettier) are more powerful in formatting the fix and work in conjunction with ESLint\n\n**Otherwise:** Developers will focus on tedious spacing and line-width concerns and time might be wasted overthinking the project's code style\n\n🔗 [**Read More: Using ESLint and Prettier**](./sections/codestylepractices/eslint_prettier.md)\n\n<br/><br/>\n\n## ![✔] 3.2 Use Node.js eslint extension plugins\n\n### `📝 #updated`\n\n**TL;DR:** On top of ESLint standard rules that cover vanilla JavaScript, add Node.js specific plugins like [eslint-plugin-node](https://www.npmjs.com/package/eslint-plugin-node), [eslint-plugin-mocha](https://www.npmjs.com/package/eslint-plugin-mocha) and [eslint-plugin-node-security](https://www.npmjs.com/package/eslint-plugin-security), [eslint-plugin-require](https://www.npmjs.com/package/eslint-plugin-require), [/eslint-plugin-jest](https://www.npmjs.com/package/eslint-plugin-jest) and other useful rules\n\n**Otherwise:** Many faulty Node.js code patterns might escape under the radar. For example, developers might require(variableAsPath) files with a variable given as a path which allows attackers to execute any JS script. Node.js linters can detect such patterns and complain early\n\n<br/><br/>\n\n## ![✔] 3.3 Start a Codeblock's Curly Braces on the Same Line\n\n**TL;DR:** The opening curly braces of a code block should be on the same line as the opening statement\n\n### Code Example\n\n```javascript\n// Do\nfunction someFunction() {\n  // code block\n}\n\n// Avoid\nfunction someFunction()\n{\n  // code block\n}\n```\n\n**Otherwise:** Deferring from this best practice might lead to unexpected results, as seen in the StackOverflow thread below:\n\n🔗 [**Read more:** \"Why do results vary based on curly brace placement?\" (StackOverflow)](https://stackoverflow.com/questions/3641519/why-does-a-results-vary-based-on-curly-brace-placement)\n\n<br/><br/>\n\n## ![✔] 3.4 Separate your statements properly\n\nNo matter if you use semicolons or not to separate your statements, knowing the common pitfalls of improper linebreaks or automatic semicolon insertion, will help you to eliminate regular syntax errors.\n\n**TL;DR:** Use ESLint to gain awareness about separation concerns. [Prettier](https://prettier.io/) or [Standardjs](https://standardjs.com/) can automatically resolve these issues.\n\n**Otherwise:** As seen in the previous section, JavaScript's interpreter automatically adds a semicolon at the end of a statement if there isn't one, or considers a statement as not ended where it should, which might lead to some undesired results. You can use assignments and avoid using immediately invoked function expressions to prevent most of the unexpected errors.\n\n### Code example\n\n```javascript\n// Do\nfunction doThing() {\n    // ...\n}\n\ndoThing()\n\n// Do\n\nconst items = [1, 2, 3]\nitems.forEach(console.log)\n\n// Avoid — throws exception\nconst m = new Map()\nconst a = [1,2,3]\n[...m.values()].forEach(console.log)\n> [...m.values()].forEach(console.log)\n>  ^^^\n> SyntaxError: Unexpected token ...\n\n// Avoid — throws exception\nconst count = 2 // it tries to run 2(), but 2 is not a function\n(function doSomething() {\n  // do something amazing\n}())\n// put a semicolon before the immediate invoked function, after the const definition, save the return value of the anonymous function to a variable or avoid IIFEs altogether\n```\n\n🔗 [**Read more:** \"Semi ESLint rule\"](https://eslint.org/docs/rules/semi)\n🔗 [**Read more:** \"No unexpected multiline ESLint rule\"](https://eslint.org/docs/rules/no-unexpected-multiline)\n\n<br/><br/>\n\n## ![✔] 3.5 Name your functions\n\n**TL;DR:** Name all functions, including closures and callbacks. Avoid anonymous functions. This is especially useful when profiling a node app. Naming all functions will allow you to easily understand what you're looking at when checking a memory snapshot\n\n**Otherwise:** Debugging production issues using a core dump (memory snapshot) might become challenging as you notice significant memory consumption from anonymous functions\n\n<br/><br/>\n\n## ![✔] 3.6 Use naming conventions for variables, constants, functions and classes\n\n**TL;DR:** Use **_lowerCamelCase_** when naming constants, variables and functions, **_UpperCamelCase_** (capital first letter as well) when naming classes and **_UPPER_SNAKE_CASE_** when naming global or static variables. This will help you to easily distinguish between plain variables, functions, classes that require instantiation and variables declared at global module scope. Use descriptive names, but try to keep them short\n\n**Otherwise:** JavaScript is the only language in the world that allows invoking a constructor (\"Class\") directly without instantiating it first. Consequently, Classes and function-constructors are differentiated by starting with UpperCamelCase\n\n### 3.6 Code Example\n\n```javascript\n// for global variables names we use the const/let keyword and UPPER_SNAKE_CASE\nlet MUTABLE_GLOBAL = \"mutable value\";\nconst GLOBAL_CONSTANT = \"immutable value\";\nconst CONFIG = {\n  key: \"value\",\n};\n\n// examples of UPPER_SNAKE_CASE convention in nodejs/javascript ecosystem\n// in javascript Math.PI module\nconst PI = 3.141592653589793;\n\n// https://github.com/nodejs/node/blob/b9f36062d7b5c5039498e98d2f2c180dca2a7065/lib/internal/http2/core.js#L303\n// in nodejs http2 module\nconst HTTP_STATUS_OK = 200;\nconst HTTP_STATUS_CREATED = 201;\n\n// for class name we use UpperCamelCase\nclass SomeClassExample {\n  // for static class properties we use UPPER_SNAKE_CASE\n  static STATIC_PROPERTY = \"value\";\n}\n\n// for functions names we use lowerCamelCase\nfunction doSomething() {\n  // for scoped variable names we use the const/let keyword and lowerCamelCase\n  const someConstExample = \"immutable value\";\n  let someMutableExample = \"mutable value\";\n}\n```\n\n<br/><br/>\n\n## ![✔] 3.7 Prefer const over let. Ditch the var\n\n**TL;DR:** Using `const` means that once a variable is assigned, it cannot be reassigned. Preferring `const` will help you to not be tempted to use the same variable for different uses, and make your code clearer. If a variable needs to be reassigned, in a for loop, for example, use `let` to declare it. Another important aspect of `let` is that a variable declared using it is only available in the block scope in which it was defined. `var` is function scoped, not block-scoped, and [shouldn't be used in ES6](https://hackernoon.com/why-you-shouldnt-use-var-anymore-f109a58b9b70) now that you have `const` and `let` at your disposal\n\n**Otherwise:** Debugging becomes way more cumbersome when following a variable that frequently changes\n\n🔗 [**Read more: JavaScript ES6+: var, let, or const?** ](https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75)\n\n<br/><br/>\n\n## ![✔] 3.8 Require modules first, not inside functions\n\n**TL;DR:** Require modules at the beginning of each file, before and outside of any functions. This simple best practice will not only help you easily and quickly tell the dependencies of a file right at the top but also avoids a couple of potential problems\n\n**Otherwise:** Requires are run synchronously by Node.js. If they are called from within a function, it may block other requests from being handled at a more critical time. Also, if a required module or any of its dependencies throw an error and crash the server, it is best to find out about it as soon as possible, which might not be the case if that module is required from within a function\n\n<br/><br/>\n\n## ![✔] 3.9 Set an explicit entry point to a module/folder\n\n### `📝 #updated`\n\n**TL;DR:** When developing a module/library, set an explicit root file that exports the public and interesting code. Discourage the client code from importing deep files and becoming familiar with the internal structure. With commonjs (require), this can be done with an index.js file at the folder's root or the package.json.main field. With ESM (import), if a package.json exists on the root, the field \"exports\" allow specifying the module's root file. If no package.json exists, you may put an index.js file on the root which re-exports all the public functionality\n\n**Otherwise:** Having an explicit root file acts like a public 'interface' that encapsulates the internal, directs the caller to the public code and facilitates future changes without breaking the contract\n\n### 3.9 Code example - avoid coupling the client to the module structure\n\n```javascript\n// Avoid: client has deep familiarity with the internals\n\n// Client code\nconst SMSWithMedia = require(\"./SMSProvider/providers/media/media-provider.js\");\n\n// Better: explicitly export the public functions\n\n//index.js, module code\nmodule.exports.SMSWithMedia = require(\"./SMSProvider/providers/media/media-provider.js\");\n\n// Client code\nconst { SMSWithMedia } = require(\"./SMSProvider\");\n```\n\n<br/><br/>\n\n## ![✔] 3.10 Use the `===` operator\n\n**TL;DR:** Prefer the strict equality operator `===` over the weaker abstract equality operator `==`. `==` will compare two variables after converting them to a common type. There is no type conversion in `===`, and both variables must be of the same type to be equal\n\n**Otherwise:** Unequal variables might return true when compared with the `==` operator\n\n### 3.10 Code example\n\n```javascript\n\"\" == \"0\"; // false\n0 == \"\"; // true\n0 == \"0\"; // true\n\nfalse == \"false\"; // false\nfalse == \"0\"; // true\n\nfalse == undefined; // false\nfalse == null; // false\nnull == undefined; // true\n\n\" \\t\\r\\n \" == 0; // true\n```\n\nAll statements above will return false if used with `===`\n\n<br/><br/>\n\n## ![✔] 3.11 Use Async Await, avoid callbacks\n\n**TL;DR:** Async-await is the simplest way to express an asynchronous flow as it makes asynchronous code look synchronous. Async-await will also result in much more compact code and support for try-catch. This technique now supersedes callbacks and promises in _most_ cases. Using it in your code is probably the best gift one can give to the code reader\n\n**Otherwise:** Handling async errors in callback style are probably the fastest way to hell - this style forces to check errors all over, deal with awkward code nesting, and makes it difficult to reason about the code flow\n\n🔗[**Read more:** Guide to async-await 1.0](https://github.com/yortus/asyncawait)\n\n<br/><br/>\n\n## ![✔] 3.12 Use arrow function expressions (=>)\n\n**TL;DR:** Though it's recommended to use async-await and avoid function parameters when dealing with older APIs that accept promises or callbacks - arrow functions make the code structure more compact and keep the lexical context of the root function (i.e. `this`)\n\n**Otherwise:** Longer code (in ES5 functions) is more prone to bugs and cumbersome to read\n\n🔗 [**Read more: It’s Time to Embrace Arrow Functions**](https://medium.com/javascript-scene/familiarity-bias-is-holding-you-back-its-time-to-embrace-arrow-functions-3d37e1a9bb75)\n\n<br/><br/>\n\n## ![✔] 3.13 Avoid effects outside of functions\n\n### `🌟 #new`\n\n**TL;DR:** Avoid putting code with effects like network or DB calls outside of functions. Such a code will be executed immediately when another file requires the file. This 'floating' code might get executed when the underlying system is not ready yet. It also comes with a performance penalty even when this module's functions will finally not be used in runtime. Last, mocking these DB/network calls for testing is harder outside of functions. Instead, put this code inside functions that should get called explicitly. If some DB/network code must get executed right when the module loads, consider using the factory or revealing module patterns\n\n**Otherwise:** A typical web framework sets error handler, environment variables and monitoring. When DB/network calls are made before the web framework is initialized, they won't be monitored or fail due to a lack of configuration data\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ Return to top</a></p>\n\n# `4. Testing And Overall Quality Practices`\n\n\\_We have dedicated guides for testing, see below. The best practices list here is a brief summary of these guides\n\na. [JavaScript testing best practices](https://github.com/goldbergyoni/javascript-testing-best-practices)\nb. [Node.js testing - beyond the basics](https://github.com/testjavascript/nodejs-integration-tests-best-practices)\n\\_\n\n## ![✔] 4.1 At the very least, write API (component) testing\n\n**TL;DR:** Most projects just don't have any automated testing due to short timetables or often the 'testing project' ran out of control and was abandoned. For that reason, prioritize and start with API testing which is the easiest way to write and provides more coverage than unit testing (you may even craft API tests without code using tools like [Postman](https://www.getpostman.com/)). Afterwards, should you have more resources and time, continue with advanced test types like unit testing, DB testing, performance testing, etc\n\n**Otherwise:** You may spend long days on writing unit tests to find out that you got only 20% system coverage\n\n<br/><br/>\n\n## ![✔] 4.2 Include 3 parts in each test name\n\n### `🌟 #new`\n\n**TL;DR:** Make the test speak at the requirements level so it's self-explanatory also to QA engineers and developers who are not familiar with the code internals. State in the test name what is being tested (unit under test), under what circumstances, and what is the expected result\n\n**Otherwise:** A deployment just failed, a test named “Add product” failed. Does this tell you what exactly is malfunctioning?\n\n🔗 [**Read More: Include 3 parts in each test name**](./sections/testingandquality/3-parts-in-name.md)\n\n<br/><br/>\n\n## ![✔] 4.3 Structure tests by the AAA pattern\n\n### `🌟 #new`\n\n**TL;DR:** Structure your tests with 3 well-separated sections: Arrange, Act & Assert (AAA). The first part includes the test setup, then the execution of the unit under test, and finally the assertion phase. Following this structure guarantees that the reader spends no brain CPU on understanding the test plan\n\n**Otherwise:** Not only you spend long daily hours on understanding the main code, but now also what should have been the simple part of the day (testing) stretches your brain\n\n🔗 [**Read More: Structure tests by the AAA pattern**](./sections/testingandquality/aaa.md)\n\n<br/><br/>\n\n## ![✔] 4.4 Ensure Node version is unified\n\n### `🌟 #new`\n\n**TL;DR:** Use tools that encourage or enforce the same Node.js version across different environments and developers. Tools like [nvm](https://github.com/nvm-sh/nvm), and [Volta](https://volta.sh/) allow specifying the project's version in a file so each team member can run a single command to conform with the project's version. Optionally, this definition can be replicated to CI and the production runtime (e.g., copy the specified value to .Dockerfile build and to the CI declaration file)\n\n**Otherwise:** A developer might face or miss an error because she uses a different Node.js version than her teammates. Even worse - the production runtime might be different than the environment where tests were executed\n\n<br/><br/>\n\n## ![✔] 4.5 Avoid global test fixtures and seeds, add data per-test\n\n**TL;DR:** To prevent test coupling and easily reason about the test flow, each test should add and act on its own set of DB rows. Whenever a test needs to pull or assume the existence of some DB data - it must explicitly add that data and avoid mutating any other records\n\n**Otherwise:** Consider a scenario where deployment is aborted due to failing tests, team is now going to spend precious investigation time that ends in a sad conclusion: the system works well, the tests however interfere with each other and break the build\n\n🔗 [**Read More: Avoid global test fixtures**](./sections/testingandquality/avoid-global-test-fixture.md)\n\n<br/><br/>\n\n## ![✔] 4.6 Tag your tests\n\n**TL;DR:** Different tests must run on different scenarios: quick smoke, IO-less, tests should run when a developer saves or commits a file, full end-to-end tests usually run when a new pull request is submitted, etc. This can be achieved by tagging tests with keywords like #cold #api #sanity so you can grep with your testing harness and invoke the desired subset. For example, this is how you would invoke only the sanity test group with [Mocha](https://mochajs.org/): mocha --grep 'sanity'\n\n**Otherwise:** Running all the tests, including tests that perform dozens of DB queries, any time a developer makes a small change can be extremely slow and keeps developers away from running tests\n\n<br/><br/>\n\n## ![✔] 4.7 Check your test coverage, it helps to identify wrong test patterns\n\n**TL;DR:** Code coverage tools like [Istanbul](https://github.com/istanbuljs/istanbuljs)/[NYC](https://github.com/istanbuljs/nyc) are great for 3 reasons: it comes for free (no effort is required to benefit this reports), it helps to identify a decrease in testing coverage, and last but not least it highlights testing mismatches: by looking at colored code coverage reports you may notice, for example, code areas that are never tested like catch clauses (meaning that tests only invoke the happy paths and not how the app behaves on errors). Set it to fail builds if the coverage falls under a certain threshold\n\n**Otherwise:** There won't be any automated metric telling you when a large portion of your code is not covered by testing\n\n<br/><br/>\n\n## ![✔] 4.8 Use production-like environment for e2e testing\n\n**TL;DR:** End to end (e2e) testing which includes live data used to be the weakest link of the CI process as it depends on multiple heavy services like DB. Use an environment which is as close to your real production environment as possible like a-continue (Missed -continue here, needs content. Judging by the **Otherwise** clause, this should mention docker-compose)\n\n**Otherwise:** Without docker-compose, teams must maintain a testing DB for each testing environment including developers' machines, keep all those DBs in sync so test results won't vary across environments\n\n<br/><br/>\n\n## ![✔] 4.9 Refactor regularly using static analysis tools\n\n**TL;DR:** Using static analysis tools helps by giving objective ways to improve code quality and keeps your code maintainable. You can add static analysis tools to your CI build to fail when it finds code smells. Its main selling points over plain linting are the ability to inspect quality in the context of multiple files (e.g. detect duplications), perform advanced analysis (e.g. code complexity), and follow the history and progress of code issues. Two examples of tools you can use are [Sonarqube](https://www.sonarqube.org/) (2,600+ [stars](https://github.com/SonarSource/sonarqube)) and [Code Climate](https://codeclimate.com/) (1,500+ [stars](https://github.com/codeclimate/codeclimate)).\n\n**Otherwise:** With poor code quality, bugs and performance will always be an issue that no shiny new library or state of the art features can fix\n\n🔗 [**Read More: Refactoring!**](./sections/testingandquality/refactoring.md)\n\n<br/><br/>\n\n## ![✔] 4.10 Mock responses of external HTTP services\n\n### `🌟 #new`\n\n**TL;DR:** Use network mocking tools to simulate responses of external collaborators' services that are approached over the network (e.g., REST, Graph). This is imperative not only to isolate the component under test but mostly to simulate non-happy path flows. Tools like [nock](https://github.com/nock/nock) (in-process) or [Mock-Server](https://www.mock-server.com/) allow defining a specific response of external service in a single line of code. Remember to simulate also errors, delays, timeouts, and any other event that is likely to happen in production\n\n**Otherwise:** Allowing your component to reach real external services instances will likely result in naive tests that mostly cover happy paths. The tests might also be flaky and slow\n\n🔗 [**Read More: Mock external services**](./sections/testingandquality/mock-external-services.md)\n\n## ![✔] 4.11 Test your middlewares in isolation\n\n**TL;DR:** When a middleware holds some immense logic that spans many requests, it is worth testing it in isolation without waking up the entire web framework. This can be easily achieved by stubbing and spying on the {req, res, next} objects\n\n**Otherwise:** A bug in Express middleware === a bug in all or most requests\n\n🔗 [**Read More: Test middlewares in isolation**](./sections/testingandquality/test-middlewares.md)\n\n## ![✔] 4.12 Specify a port in production, randomize in testing\n\n### `🌟 #new`\n\n**TL;DR:** When testing against the API, it's common and desirable to initialize the web server inside the tests. Let the server randomize the web server port in testing to prevent collisions. If you're using Node.js http server (used by most frameworks), doing so demands nothing but passing a port number zero - this will randomize an available port\n\n**Otherwise:** Specifying a fixed port will prevent two testing processes from running at the same time. Most of the modern test runners run with multiple processes by default\n\n🔗 [**Read More: Randomize a port for testing**](./sections/testingandquality/randomize-port.md)\n\n## ![✔] 4.13 Test the five possible outcomes\n\n### `🌟 #new`\n\n**TL;DR:** When testing a flow, ensure to cover five potential categories. Any time some action is triggered (e.g., API call), a reaction occurs, a meaningful **outcome** is produced and calls for testing. There are five possible outcome types for every flow: a response, a visible state change (e.g., DB), an outgoing API call, a new message in a queue, and an observability call (e.g., logging, metric). See a [checklist here](https://testjavascript.com/wp-content/uploads/2021/10/the-backend-checklist.pdf). Each type of outcome comes with unique challenges and techniques to mitigate those challenges - we have a dedicated guide about this topic: [Node.js testing - beyond the basics](https://github.com/testjavascript/nodejs-integration-tests-best-practices)\n\n**Otherwise:** Consider a case when testing the addition of a new product to the system. It's common to see tests that assert on a valid response only. What if the product was failed to persist regardless of the positive response? what if when adding a new product demands calling some external service, or putting a message in the queue - shouldn't the test assert these outcomes as well? It's easy to overlook various paths, this is where a [checklist comes handy](https://testjavascript.com/wp-content/uploads/2021/10/the-backend-checklist.pdf)\n\n🔗 [**Read More: Test five outcomes**](./sections/testingandquality/test-five-outcomes.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ Return to top</a></p>\n\n# `5. Going To Production Practices`\n\n## ![✔] 5.1. Monitoring\n\n**TL;DR:** Monitoring is a game of finding out issues before customers do – obviously this should be assigned unprecedented importance. The market is overwhelmed with offers thus consider starting with defining the basic metrics you must follow (my suggestions inside), then go over additional fancy features and choose the solution that ticks all boxes. In any case, the 4 layers of observability must be covered: uptime, metrics with focus on user-facing symptoms and Node.js technical metrics like event loop lag, distributed flows measurement with Open Telemetry and logging. Click ‘Read More’ below for an overview of the solutions\n\n**Otherwise:** Failure === disappointed customers. Simple\n\n🔗 [**Read More: Monitoring!**](./sections/production/monitoring.md)\n\n<br/><br/>\n\n## ![✔] 5.2. Increase the observability using smart logging\n\n**TL;DR:** Logs can be a dumb warehouse of debug statements or the enabler of a beautiful dashboard that tells the story of your app. Plan your logging platform from day 1: how logs are collected, stored and analyzed to ensure that the desired information (e.g. error rate, following an entire transaction through services and servers, etc) can really be extracted\n\n**Otherwise:** You end up with a black box that is hard to reason about, then you start re-writing all logging statements to add additional information\n\n🔗 [**Read More: Increase transparency using smart logging**](./sections/production/smartlogging.md)\n\n<br/><br/>\n\n## ![✔] 5.3. Delegate anything possible (e.g. gzip, SSL) to a reverse proxy\n\n**TL;DR:** Node is quite bad at doing CPU intensive tasks like gzipping, SSL termination, etc. You should use specialized infrastructure like nginx, HAproxy or cloud vendor services instead\n\n**Otherwise:** Your poor single thread will stay busy doing infrastructural tasks instead of dealing with your application core and performance will degrade accordingly\n\n🔗 [**Read More: Delegate anything possible (e.g. gzip, SSL) to a reverse proxy**](./sections/production/delegatetoproxy.md)\n\n<br/><br/>\n\n## ![✔] 5.4. Lock dependencies\n\n**TL;DR:** Your code must be identical across all environments, but without a special lockfile npm lets dependencies drift across environments. Ensure to commit your package-lock.json so all the environments will be identical\n\n**Otherwise:** QA will thoroughly test the code and approve a version that will behave differently in production. Even worse, different servers in the same production cluster might run different code\n\n🔗 [**Read More: Lock dependencies**](./sections/production/lockdependencies.md)\n\n<br/><br/>\n\n## ![✔] 5.5. Guard process uptime using the right tool\n\n**TL;DR:** The process must go on and get restarted upon failures. Modern runtime platforms like Docker-ized platforms (e.g. Kubernetes), and Serverless take care for this automatically. When the app is hosted on a bare metal server, one must take care for a process management tools like [systemd](https://systemd.io/). Avoid including a custom process management tool in a modern platform that monitors an app instance (e.g., Kubernetes) - doing so will hide failures from the infrastructure. When the underlying infrastructure is not aware of errors, it can't perform useful mitigation steps like re-placing the instance in a different location\n\n**Otherwise:** Running dozens of instances without a clear strategy and too many tools together (cluster management, docker, PM2) might lead to DevOps chaos\n\n🔗 [**Read More: Guard process uptime using the right tool**](./sections/production/guardprocess.md)\n\n<br/><br/>\n\n## ![✔] 5.6. Utilize all CPU cores\n\n**TL;DR:** At its basic form, a Node app runs on a single CPU core while all others are left idling. It’s your duty to replicate the Node process and utilize all CPUs. Most of the modern run-times platform (e.g., Kubernetes) allow replicating instances of the app but they won't verify that all cores are utilized - this is your duty. If the app is hosted on a bare server, it's also your duty to use some process replication solution (e.g. systemd)\n\n**Otherwise:** Your app will likely utilize only 25% of its available resources(!) or even less. Note that a typical server has 4 CPU cores or more, naive deployment of Node.js utilizes only 1 (even using PaaS services like AWS beanstalk!)\n\n🔗 [**Read More: Utilize all CPU cores**](./sections/production/utilizecpu.md)\n\n<br/><br/>\n\n## ![✔] 5.7. Create a ‘maintenance endpoint’\n\n**TL;DR:** Expose a set of system-related information, like memory usage and REPL, etc in a secured API. Although it’s highly recommended to rely on standard and battle-tested tools, some valuable information and operations are easier done using code\n\n**Otherwise:** You’ll find that you’re performing many “diagnostic deploys” – shipping code to production only to extract some information for diagnostic purposes\n\n🔗 [**Read More: Create a ‘maintenance endpoint’**](./sections/production/createmaintenanceendpoint.md)\n\n<br/><br/>\n\n## ![✔] 5.8. Discover the unknowns using APM products\n\n### `📝 #updated`\n\n**TL;DR:** Consider adding another safety layer to the production stack - APM. While the majority of symptoms and causes can be detected using traditional monitoring techniques, in a distributed system there is more than meets the eye. Application monitoring and performance products (a.k.a. APM) can auto-magically go beyond traditional monitoring and provide additional layer of discovery and developer-experience. For example, some APM products can highlight a transaction that loads too slow on the **end-user's side** while suggesting the root cause. APMs also provide more context for developers who try to troubleshoot a log error by showing what was the server busy with when the error occurred. To name a few example\n\n**Otherwise:** You might spend great effort on measuring API performance and downtimes, probably you’ll never be aware which is your slowest code parts under real-world scenario and how these affect the UX\n\n🔗 [**Read More: Discover errors and downtime using APM products**](./sections/production/apmproducts.md)\n\n<br/><br/>\n\n## ![✔] 5.9. Make your code production-ready\n\n**TL;DR:** Code with the end in mind, plan for production from day 1. This sounds a bit vague so I’ve compiled a few development tips that are closely related to production maintenance (click 'Read More')\n\n**Otherwise:** A world champion IT/DevOps guy won’t save a system that is badly written\n\n🔗 [**Read More: Make your code production-ready**](./sections/production/productioncode.md)\n\n<br/><br/>\n\n## ![✔] 5.10. Measure and guard the memory usage\n\n**TL;DR:** Node.js has controversial relationships with memory: the v8 engine has soft limits on memory usage (1.4GB) and there are known paths to leak memory in Node’s code – thus watching Node’s process memory is a must. In small apps, you may gauge memory periodically using shell commands but in medium-large apps consider baking your memory watch into a robust monitoring system\n\n**Otherwise:** Your process memory might leak a hundred megabytes a day like how it happened at [Walmart](https://www.joyent.com/blog/walmart-node-js-memory-leak)\n\n🔗 [**Read More: Measure and guard the memory usage**](./sections/production/measurememory.md)\n\n<br/><br/>\n\n## ![✔] 5.11. Get your frontend assets out of Node\n\n**TL;DR:** Serve frontend content using a specialized infrastructure (nginx, S3, CDN) because Node performance gets hurt when dealing with many static files due to its single-threaded model. One exception to this guideline is when doing server-side rendering\n\n**Otherwise:** Your single Node thread will be busy streaming hundreds of html/images/angular/react files instead of allocating all its resources for the task it was born for – serving dynamic content\n\n🔗 [**Read More: Get your frontend assets out of Node**](./sections/production/frontendout.md)\n\n<br/><br/>\n\n## ![✔] 5.12. Strive to be stateless\n\n**TL;DR:** Store any type of _data_ (e.g. user sessions, cache, uploaded files) within external data stores. When the app holds data in-process this adds additional layer of maintenance complexity like routing users to the same instance and higher cost of restarting a process. To enforce and encourage a stateless approach, most modern runtime platforms allows 'reapp-ing' instances periodically\n\n**Otherwise:** Failure at a given server will result in application downtime instead of just killing a faulty machine. Moreover, scaling-out elasticity will get more challenging due to the reliance on a specific server\n\n🔗 [**Read More: Be stateless, kill your Servers almost every day**](./sections/production/bestateless.md)\n\n<br/><br/>\n\n## ![✔] 5.13. Use tools that automatically detect vulnerabilities\n\n**TL;DR:** Even the most reputable dependencies such as Express have known vulnerabilities (from time to time) that can put a system at risk. This can be easily tamed using community and commercial tools that constantly check for vulnerabilities and warn (locally or at GitHub), some can even patch them immediately\n\n**Otherwise:** Keeping your code clean from vulnerabilities without dedicated tools will require you to constantly follow online publications about new threats. Quite tedious\n\n🔗 [**Read More: Use tools that automatically detect vulnerabilities**](./sections/production/detectvulnerabilities.md)\n\n<br/><br/>\n\n## ![✔] 5.14. Assign a transaction id to each log statement\n\n**TL;DR:** Assign the same identifier, transaction-id: uuid(), to each log entry within a single request (also known as correlation-id/tracing-id/request-context). Then when inspecting errors in logs, easily conclude what happened before and after. Node has a built-in mechanism, [AsyncLocalStorage](https://nodejs.org/api/async_context.html), for keeping the same context across asynchronous calls. see code examples inside\n\n**Otherwise:** Looking at a production error log without the context – what happened before – makes it much harder and slower to reason about the issue\n\n🔗 [**Read More: Assign ‘TransactionId’ to each log statement**](./sections/production/assigntransactionid.md)\n\n<br/><br/>\n\n## ![✔] 5.15. Set `NODE_ENV=production`\n\n**TL;DR:** Set the environment variable `NODE_ENV` to ‘production’ or ‘development’ to flag whether production optimizations should get activated – some npm packages determine the current environment and optimize their code for production\n\n**Otherwise:** Omitting this simple property might greatly degrade performance when dealing with some specific libraries like Express server-side rendering\n\n🔗 [**Read More: Set NODE_ENV=production**](./sections/production/setnodeenv.md)\n\n<br/><br/>\n\n## ![✔] 5.16. Design automated, atomic and zero-downtime deployments\n\n**TL;DR:** Research shows that teams who perform many deployments lower the probability of severe production issues. Fast and automated deployments that don’t require risky manual steps and service downtime significantly improve the deployment process. You should probably achieve this using Docker combined with CI tools as they became the industry standard for streamlined deployment\n\n**Otherwise:** Long deployments -> production downtime & human-related error -> team unconfident in making deployment -> fewer deployments and features\n\n<br/><br/>\n\n## ![✔] 5.17. Use an LTS release of Node.js\n\n**TL;DR:** Ensure you are using an LTS version of Node.js to receive critical bug fixes, security updates and performance improvements\n\n**Otherwise:** Newly discovered bugs or vulnerabilities could be used to exploit an application running in production, and your application may become unsupported by various modules and harder to maintain\n\n🔗 [**Read More: Use an LTS release of Node.js**](./sections/production/LTSrelease.md)\n\n<br/><br/>\n\n## ![✔] 5.18. Log to stdout, avoid specifying log destination within the app\n\n### `📝 #updated`\n\n**TL;DR:** Log destinations should not be hard-coded by developers within the application code, but instead should be defined by the execution environment the application runs in. Developers should write logs to `stdout` using a logger utility and then let the execution environment (container, server, etc.) pipe the `stdout` stream to the appropriate destination (i.e. Splunk, Graylog, ElasticSearch, etc.).\n\n**Otherwise:** If developers set the log routing, less flexibility is left for the ops professional who wishes to customize it. Beyond this, if the app tries to log directly to a remote location (e.g., Elastic Search), in case of panic or crash - further logs that might explain the problem won't arrive\n\n🔗 [**Read More: Log Routing**](./sections/production/logrouting.md)\n\n<br/><br/>\n\n## ![✔] 5.19. Install your packages with `npm ci`\n\n**TL;DR:** Run `npm ci` to strictly do a clean install of your dependencies matching package.json and package-lock.json. Obviously production code must use the exact version of the packages that were used for testing. While package-lock.json file sets strict version for dependencies, in case of mismatch with the file package.json, the command 'npm install' will treat package.json as the source of truth. On the other hand, the command 'npm ci' will exit with error in case of mismatch between these files\n\n**Otherwise:** QA will thoroughly test the code and approve a version that will behave differently in production. Even worse, different servers in the same production cluster might run different code.\n\n🔗 [**Read More: Use npm ci**](./sections/production/installpackageswithnpmci.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ Return to top</a></p>\n\n# `6. Security Best Practices`\n\n<div align=\"center\">\n<img src=\"https://img.shields.io/badge/OWASP%20Threats-Top%2010-green.svg\" alt=\"54 items\"/>\n</div>\n\n## ![✔] 6.1. Embrace linter security rules\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20XSS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Make use of security-related linter plugins such as [eslint-plugin-security](https://github.com/nodesecurity/eslint-plugin-security) to catch security vulnerabilities and issues as early as possible, preferably while they're being coded. This can help catching security weaknesses like using eval, invoking a child process or importing a module with a string literal (e.g. user input). Click 'Read more' below to see code examples that will get caught by a security linter\n\n**Otherwise:** What could have been a straightforward security weakness during development becomes a major issue in production. Also, the project may not follow consistent code security practices, leading to vulnerabilities being introduced, or sensitive secrets committed into remote repositories\n\n🔗 [**Read More: Lint rules**](./sections/security/lintrules.md)\n\n<br/><br/>\n\n## ![✔] 6.2. Limit concurrent requests using a middleware\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** DOS attacks are very popular and relatively easy to conduct. Implement rate limiting using an external service such as cloud load balancers, cloud firewalls, nginx, [rate-limiter-flexible](https://www.npmjs.com/package/rate-limiter-flexible) package, or (for smaller and less critical apps) a rate-limiting middleware (e.g. [express-rate-limit](https://www.npmjs.com/package/express-rate-limit))\n\n**Otherwise:** An application could be subject to an attack resulting in a denial of service where real users receive a degraded or unavailable service.\n\n🔗 [**Read More: Implement rate limiting**](./sections/security/limitrequests.md)\n\n<br/><br/>\n\n## ![✔] 6.3 Extract secrets from config files or use packages to encrypt them\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A3:Sensitive%20Data%20Exposure%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Never store plain-text secrets in configuration files or source code. Instead, make use of secret-management systems like Vault products, Kubernetes/Docker Secrets, or using environment variables. As a last resort, secrets stored in source control must be encrypted and managed (rolling keys, expiring, auditing, etc). Make use of pre-commit/push hooks to prevent committing secrets accidentally\n\n**Otherwise:** Source control, even for private repositories, can mistakenly be made public, at which point all secrets are exposed. Access to source control for an external party will inadvertently provide access to related systems (databases, apis, services, etc).\n\n🔗 [**Read More: Secret management**](./sections/security/secretmanagement.md)\n\n<br/><br/>\n\n## ![✔] 6.4. Prevent query injection vulnerabilities with ORM/ODM libraries\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** To prevent SQL/NoSQL injection and other malicious attacks, always make use of an ORM/ODM or a database library that escapes data or supports named or indexed parameterized queries, and takes care of validating user input for expected types. Never just use JavaScript template strings or string concatenation to inject values into queries as this opens your application to a wide spectrum of vulnerabilities. All the reputable Node.js data access libraries (e.g. [Sequelize](https://github.com/sequelize/sequelize), [Knex](https://github.com/tgriesser/knex), [mongoose](https://github.com/Automattic/mongoose)) have built-in protection against injection attacks.\n\n**Otherwise:** Unvalidated or unsanitized user input could lead to operator injection when working with MongoDB for NoSQL, and not using a proper sanitization system or ORM will easily allow SQL injection attacks, creating a giant vulnerability.\n\n🔗 [**Read More: Query injection prevention using ORM/ODM libraries**](./sections/security/ormodmusage.md)\n\n<br/><br/>\n\n## ![✔] 6.5. Collection of generic security best practices\n\n**TL;DR:** This is a collection of security advice that is not related directly to Node.js - the Node implementation is not much different than any other language. Click read more to skim through.\n\n🔗 [**Read More: Common security best practices**](./sections/security/commonsecuritybestpractices.md)\n\n<br/><br/>\n\n## ![✔] 6.6. Adjust the HTTP response headers for enhanced security\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Your application should be using secure headers to prevent attackers from using common attacks like cross-site scripting (XSS), clickjacking and other malicious attacks. These can be configured easily using modules like [helmet](https://www.npmjs.com/package/helmet).\n\n**Otherwise:** Attackers could perform direct attacks on your application's users, leading to huge security vulnerabilities\n\n🔗 [**Read More: Using secure headers in your application**](./sections/security/secureheaders.md)\n\n<br/><br/>\n\n## ![✔] 6.7. Constantly and automatically inspect for vulnerable dependencies\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Known%20Vulnerabilities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** With the npm ecosystem it is common to have many dependencies for a project. Dependencies should always be kept in check as new vulnerabilities are found. Use tools like [npm audit](https://docs.npmjs.com/cli/audit) or [snyk](https://snyk.io/) to track, monitor and patch vulnerable dependencies. Integrate these tools with your CI setup so you catch a vulnerable dependency before it makes it to production.\n\n**Otherwise:** An attacker could detect your web framework and attack all its known vulnerabilities.\n\n🔗 [**Read More: Dependency security**](./sections/security/dependencysecurity.md)\n\n<br/><br/>\n\n## ![✔] 6.8. Protect Users' Passwords/Secrets using bcrypt or scrypt\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Passwords or secrets (e.g. API keys) should be stored using a secure hash + salt function like `bcrypt`,`scrypt`, or worst case `pbkdf2`.\n\n**Otherwise:** Passwords and secrets that are stored without using a secure function are vulnerable to brute forcing and dictionary attacks that will lead to their disclosure eventually.\n\n🔗 [**Read More: User Passwords**](./sections/security/userpasswords.md)\n\n<br/><br/>\n\n## ![✔] 6.9. Escape HTML, JS and CSS output\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Untrusted data that is sent down to the browser might get executed instead of just being displayed, this is commonly referred as a cross-site-scripting (XSS) attack. Mitigate this by using dedicated libraries that explicitly mark the data as pure content that should never get executed (i.e. encoding, escaping)\n\n**Otherwise:** An attacker might store malicious JavaScript code in your DB which will then be sent as-is to the poor clients\n\n🔗 [**Read More: Escape output**](./sections/security/escape-output.md)\n\n<br/><br/>\n\n## ![✔] 6.10. Validate incoming JSON schemas\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7: XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A8:Insecured%20Deserialization%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Validate the incoming requests' body payload and ensure it meets expectations, fail fast if it doesn't. To avoid tedious validation coding within each route you may use lightweight JSON-based validation schemas such as [jsonschema](https://www.npmjs.com/package/jsonschema) or [joi](https://www.npmjs.com/package/joi)\n\n**Otherwise:** Your generosity and permissive approach greatly increases the attack surface and encourages the attacker to try out many inputs until they find some combination to crash the application\n\n🔗 [**Read More: Validate incoming JSON schemas**](./sections/security/validation.md)\n\n<br/><br/>\n\n## ![✔] 6.11. Support blocklisting JWTs\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** When using JSON Web Tokens (for example, with [Passport.js](https://github.com/jaredhanson/passport)), by default there's no mechanism to revoke access from issued tokens. Once you discover some malicious user activity, there's no way to stop them from accessing the system as long as they hold a valid token. Mitigate this by implementing a blocklist of untrusted tokens that are validated on each request.\n\n**Otherwise:** Expired, or misplaced tokens could be used maliciously by a third party to access an application and impersonate the owner of the token.\n\n🔗 [**Read More: Blocklist JSON Web Tokens**](./sections/security/expirejwt.md)\n\n<br/><br/>\n\n## ![✔] 6.12. Prevent brute-force attacks against authorization\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** A simple and powerful technique is to limit authorization attempts using two metrics:\n\n1. The first is number of consecutive failed attempts by the same user unique ID/name and IP address.\n2. The second is number of failed attempts from an IP address over some long period of time. For example, block an IP address if it makes 100 failed attempts in one day.\n\n**Otherwise:** An attacker can issue unlimited automated password attempts to gain access to privileged accounts on an application\n\n🔗 [**Read More: Login rate limiting**](./sections/security/login-rate-limit.md)\n\n<br/><br/>\n\n## ![✔] 6.13. Run Node.js as non-root user\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A5:Broken%20Access%20Access%20Control-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** There is a common scenario where Node.js runs as a root user with unlimited permissions. For example, this is the default behaviour in Docker containers. It's recommended to create a non-root user and either bake it into the Docker image (examples given below) or run the process on this user's behalf by invoking the container with the flag \"-u username\"\n\n**Otherwise:** An attacker who manages to run a script on the server gets unlimited power over the local machine (e.g. change iptable and re-route traffic to their server)\n\n🔗 [**Read More: Run Node.js as non-root user**](./sections/security/non-root-user.md)\n\n<br/><br/>\n\n## ![✔] 6.14. Limit payload size using a reverse-proxy or a middleware\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A8:Insecured%20Deserialization%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** The bigger the body payload is, the harder your single thread works in processing it. This is an opportunity for attackers to bring servers to their knees without tremendous amount of requests (DOS/DDOS attacks). Mitigate this limiting the body size of incoming requests on the edge (e.g. firewall, ELB) or by configuring [express body parser](https://github.com/expressjs/body-parser) to accept only small-size payloads\n\n**Otherwise:** Your application will have to deal with large requests, unable to process the other important work it has to accomplish, leading to performance implications and vulnerability towards DOS attacks\n\n🔗 [**Read More: Limit payload size**](./sections/security/requestpayloadsizelimit.md)\n\n<br/><br/>\n\n## ![✔] 6.15. Avoid JavaScript eval statements\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** `eval` is evil as it allows executing custom JavaScript code during run time. This is not just a performance concern but also an important security concern due to malicious JavaScript code that may be sourced from user input. Another language feature that should be avoided is `new Function` constructor. `setTimeout` and `setInterval` should never be passed dynamic JavaScript code either.\n\n**Otherwise:** Malicious JavaScript code finds a way into text passed into `eval` or other real-time evaluating JavaScript language functions, and will gain complete access to JavaScript permissions on the page. This vulnerability is often manifested as an XSS attack.\n\n🔗 [**Read More: Avoid JavaScript eval statements**](./sections/security/avoideval.md)\n\n<br/><br/>\n\n## ![✔] 6.16. Prevent evil RegEx from overloading your single thread execution\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Regular Expressions, while being handy, pose a real threat to JavaScript applications at large, and the Node.js platform in particular. A user input for text to match might require an outstanding amount of CPU cycles to process. RegEx processing might be inefficient to an extent that a single request that validates 10 words can block the entire event loop for 6 seconds and set the CPU on 🔥. For that reason, prefer third-party validation packages like [validator.js](https://github.com/chriso/validator.js) instead of writing your own Regex patterns, or make use of [safe-regex](https://github.com/substack/safe-regex) to detect vulnerable regex patterns\n\n**Otherwise:** Poorly written regexes could be susceptible to Regular Expression DoS attacks that will block the event loop completely. For example, the popular `moment` package was found vulnerable with malicious RegEx usage in November of 2017\n\n🔗 [**Read More: Prevent malicious RegEx**](./sections/security/regex.md)\n\n<br/><br/>\n\n## ![✔] 6.17. Avoid module loading using a variable\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Avoid requiring/importing another file with a path that was given as parameter due to the concern that it could have originated from user input. This rule can be extended for accessing files in general (i.e. `fs.readFile()`) or other sensitive resource access with dynamic variables originating from user input. [Eslint-plugin-security](https://www.npmjs.com/package/eslint-plugin-security) linter can catch such patterns and warn early enough\n\n**Otherwise:** Malicious user input could find its way to a parameter that is used to require tampered files, for example, a previously uploaded file on the file system, or access already existing system files.\n\n🔗 [**Read More: Safe module loading**](./sections/security/safemoduleloading.md)\n\n<br/><br/>\n\n## ![✔] 6.18. Run unsafe code in a sandbox\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** When tasked to run external code that is given at run-time (e.g. plugin), use any sort of 'sandbox' execution environment that isolates and guards the main code against the plugin. This can be achieved using a dedicated process (e.g. `cluster.fork()`), serverless environment or dedicated npm packages that act as a sandbox\n\n**Otherwise:** A plugin can attack through an endless variety of options like infinite loops, memory overloading, and access to sensitive process environment variables\n\n🔗 [**Read More: Run unsafe code in a sandbox**](./sections/security/sandbox.md)\n\n<br/><br/>\n\n## ![✔] 6.19. Take extra care when working with child processes\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Avoid using child processes when possible and validate and sanitize input to mitigate shell injection attacks if you still have to. Prefer using `child_process.execFile` which by definition will only execute a single command with a set of attributes and will not allow shell parameter expansion.\n\n**Otherwise:** Naive use of child processes could result in remote command execution or shell injection attacks due to malicious user input passed to an unsanitized system command.\n\n🔗 [**Read More: Be cautious when working with child processes**](./sections/security/childprocesses.md)\n\n<br/><br/>\n\n## ![✔] 6.20. Hide error details from clients\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** An integrated express error handler hides the error details by default. However, great are the chances that you implement your own error handling logic with custom Error objects (considered by many as a best practice). If you do so, ensure not to return the entire Error object to the client, which might contain some sensitive application details\n\n**Otherwise:** Sensitive application details such as server file paths, third party modules in use, and other internal workflows of the application which could be exploited by an attacker, could be leaked from information found in a stack trace\n\n🔗 [**Read More: Hide error details from client**](./sections/security/hideerrors.md)\n\n<br/><br/>\n\n## ![✔] 6.21. Configure 2FA for npm or Yarn\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Any step in the development chain should be protected with MFA (multi-factor authentication), npm/Yarn are a sweet opportunity for attackers who can get their hands on some developer's password. Using developer credentials, attackers can inject malicious code into libraries that are widely installed across projects and services. Maybe even across the web if published in public. Enabling 2-factor-authentication in npm leaves almost zero chances for attackers to alter your package code.\n\n**Otherwise:** [Have you heard about the eslint developer whose password was hijacked?](https://medium.com/@oprearocks/eslint-backdoor-what-it-is-and-how-to-fix-the-issue-221f58f1a8c8)\n\n<br/><br/>\n\n## ![✔] 6.22. Modify session middleware settings\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Each web framework and technology has its known weaknesses - telling an attacker which web framework we use is a great help for them. Using the default settings for session middlewares can expose your app to module- and framework-specific hijacking attacks in a similar way to the `X-Powered-By` header. Try hiding anything that identifies and reveals your tech stack (E.g. Node.js, express)\n\n**Otherwise:** Cookies could be sent over insecure connections, and an attacker might use session identification to identify the underlying framework of the web application, as well as module-specific vulnerabilities\n\n🔗 [**Read More: Cookie and session security**](./sections/security/sessions.md)\n\n<br/><br/>\n\n## ![✔] 6.23. Avoid DOS attacks by explicitly setting when a process should crash\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** The Node process will crash when errors are not handled. Many best practices even recommend to exit even though an error was caught and got handled. Express, for example, will crash on any asynchronous error - unless you wrap routes with a catch clause. This opens a very sweet attack spot for attackers who recognize what input makes the process crash and repeatedly send the same request. There's no instant remedy for this but a few techniques can mitigate the pain: Alert with critical severity anytime a process crashes due to an unhandled error, validate the input and avoid crashing the process due to invalid user input, wrap all routes with a catch and consider not to crash when an error originated within a request (as opposed to what happens globally)\n\n**Otherwise:** This is just an educated guess: given many Node.js applications, if we try passing an empty JSON body to all POST requests - a handful of applications will crash. At that point, we can just repeat sending the same request to take down the applications with ease\n\n<br/><br/>\n\n## ![✔] 6.24. Prevent unsafe redirects\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Redirects that do not validate user input can enable attackers to launch phishing scams, steal user credentials, and perform other malicious actions.\n\n**Otherwise:** If an attacker discovers that you are not validating external, user-supplied input, they may exploit this vulnerability by posting specially-crafted links on forums, social media, and other public places to get users to click it.\n\n🔗 [**Read More: Prevent unsafe redirects**](./sections/security/saferedirects.md)\n\n<br/><br/>\n\n## ![✔] 6.25. Avoid publishing secrets to the npm registry\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Precautions should be taken to avoid the risk of accidentally publishing secrets to public npm registries. An `.npmignore` file can be used to ignore specific files or folders, or the `files` array in `package.json` can act as an allow list.\n\n**Otherwise:** Your project's API keys, passwords or other secrets are open to be abused by anyone who comes across them, which may result in financial loss, impersonation, and other risks.\n\n🔗 [**Read More: Avoid publishing secrets**](./sections/security/avoid_publishing_secrets.md)\n\n<br/><br/>\n\n## ![✔] 6.26 Inspect for outdated packages\n\n**TL;DR:** Use your preferred tool (e.g. `npm outdated` or [npm-check-updates](https://www.npmjs.com/package/npm-check-updates)) to detect installed outdated packages, inject this check into your CI pipeline and even make a build fail in a severe scenario. For example, a severe scenario might be when an installed package is 5 patch commits behind (e.g. local version is 1.3.1 and repository version is 1.3.8) or it is tagged as deprecated by its author - kill the build and prevent deploying this version\n\n**Otherwise:** Your production will run packages that have been explicitly tagged by their author as risky\n\n<br/><br/>\n\n## ![✔] 6.27. Import built-in modules using the 'node:' protocol\n\n### `🌟 #new`\n\n<a href=\"https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20A06:2021 – Vulnerable and Outdated Components-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Import or require built-in Node.js modules using the 'node protocol' syntax:\n\n```javascript\nimport { functionName } from \"node:module\"; // note that 'node:' prefix\n```\n\nFor example:\n\n```javascript\nimport { createServer } from \"node:http\";\n```\n\nThis style ensures that there is no ambiguity with global npm packages and makes it clear for the reader that the code refers to a well-trusted official module. This style can be enforced with the eslint rule ['prefer-node-protocol'](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-node-protocol.md)\n\n**Otherwise:** Using the import syntax without 'node:' prefix opens the door for [typosquatting attacks](https://en.wikipedia.org/wiki/Typosquatting) where one could mistakenly mistype a module name (e.g., 'event' instead of 'events) and get a malicious package that was built only to trick users into installing them\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ Return to top</a></p>\n\n# `7. Draft: Performance Best Practices`\n\n## Our contributors are working on this section. [Would you like to join?](https://github.com/goldbergyoni/nodebestpractices/issues/256)\n\n<br/><br/>\n\n## ![✔] 7.1. Don't block the event loop\n\n**TL;DR:** Avoid CPU intensive tasks as they will block the mostly single-threaded Event Loop and offload those to a dedicated thread, process or even a different technology based on the context.\n\n**Otherwise:** As the Event Loop is blocked, Node.js will be unable to handle other request thus causing delays for concurrent users. **3000 users are waiting for a response, the content is ready to be served, but one single request blocks the server from dispatching the results back**\n\n🔗 [**Read More: Do not block the event loop**](./sections/performance/block-loop.md)\n\n<br /><br /><br />\n\n## ![✔] 7.2. Prefer native JS methods over user-land utils like Lodash\n\n**TL;DR:** It's often more penalising to use utility libraries like `lodash` and `underscore` over native methods as it leads to unneeded dependencies and slower performance.\nBear in mind that with the introduction of the new V8 engine alongside the new ES standards, native methods were improved in such a way that it's now about 50% more performant than utility libraries.\n\n**Otherwise:** You'll have to maintain less performant projects where you could have simply used what was **already** available or dealt with a few more lines in exchange of a few more files.\n\n🔗 [**Read More: Native over user land utils**](./sections/performance/nativeoverutil.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ Return to top</a></p>\n\n# `8. Docker Best Practices`\n\n🏅 Many thanks to [Bret Fisher](https://github.com/BretFisher) from whom we learned many of the following practices\n\n<br/><br/>\n\n## ![✔] 8.1 Use multi-stage builds for leaner and more secure Docker images\n\n**TL;DR:** Use multi-stage build to copy only necessary production artifacts. A lot of build-time dependencies and files are not needed for running your application. With multi-stage builds these resources can be used during build while the runtime environment contains only what's necessary. Multi-stage builds are an easy way to get rid of overweight and security threats.\n\n**Otherwise:** Larger images will take longer to build and ship, build-only tools might contain vulnerabilities and secrets only meant for the build phase might be leaked.\n\n### Example Dockerfile for multi-stage builds\n\n```dockerfile\nFROM node:14.4.0 AS build\n\nCOPY . .\nRUN npm ci && npm run build\n\n\nFROM node:slim-14.4.0\n\nUSER node\nEXPOSE 8080\n\nCOPY --from=build /home/node/app/dist /home/node/app/package.json /home/node/app/package-lock.json ./\nRUN npm ci --production\n\nCMD [ \"node\", \"dist/app.js\" ]\n```\n\n🔗 [**Read More: Use multi-stage builds**](./sections/docker/multi_stage_builds.md)\n\n<br /><br /><br />\n\n## ![✔] 8.2. Bootstrap using `node` command, avoid `npm start`\n\n**TL;DR:** Use `CMD ['node','server.js']` to start your app, avoid using npm scripts which don't pass OS signals to the code. This prevents problems with child-processes, signal handling, graceful shutdown and having zombie processes\n\nUpdate: [Starting from npm 7, npm claim](https://docs.npmjs.com/cli/v7/using-npm/changelog#706-2020-10-27) to pass signals. We follow and will update accordingly\n\n**Otherwise:** When no signals are passed, your code will never be notified about shutdowns. Without this, it will lose its chance to close properly possibly losing current requests and/or data\n\n[**Read More: Bootstrap container using node command, avoid npm start**](./sections/docker/bootstrap-using-node.md)\n\n<br /><br /><br />\n\n## ![✔] 8.3. Let the Docker runtime handle replication and uptime\n\n**TL;DR:** When using a Docker run time orchestrator (e.g., Kubernetes), invoke the Node.js process directly without intermediate process managers or custom code that replicate the process (e.g. PM2, Cluster module). The runtime platform has the highest amount of data and visibility for making placement decision - It knows best how many processes are needed, how to spread them and what to do in case of crashes\n\n**Otherwise:** Container keeps crashing due to lack of resources will get restarted indefinitely by the process manager. Should Kubernetes be aware of that, it could relocate it to a different roomy instance\n\n🔗 [**Read More: Let the Docker orchestrator restart and replicate processes**](./sections/docker/restart-and-replicate-processes.md)\n\n<br/><br /><br />\n\n## ![✔] 8.4. Use .dockerignore to prevent leaking secrets\n\n**TL;DR**: Include a `.dockerignore` file that filters out common secret files and development artifacts. By doing so, you might prevent secrets from leaking into the image. As a bonus the build time will significantly decrease. Also, ensure not to copy all files recursively rather explicitly choose what should be copied to Docker\n\n**Otherwise**: Common personal secret files like `.env`, `.aws` and `.npmrc` will be shared with anybody with access to the image (e.g. Docker repository)\n\n🔗 [**Read More: Use .dockerignore**](./sections/docker/docker-ignore.md)\n\n<br /><br /><br />\n\n## ![✔] 8.5. Clean-up dependencies before production\n\n**TL;DR:** Although Dev-Dependencies are sometimes needed during the build and test life-cycle, eventually the image that is shipped to production should be minimal and clean from development dependencies. Doing so guarantees that only necessary code is shipped and the amount of potential attacks (i.e. attack surface) is minimized. When using multi-stage build (see dedicated bullet) this can be achieved by installing all dependencies first and finally running `npm ci --production`\n\n**Otherwise:** Many of the infamous npm security breaches were found within development packages (e.g. [eslint-scope](https://eslint.org/blog/2018/07/postmortem-for-malicious-package-publishes))\n\n🔗 Read More: [Remove development dependencies](./sections/docker/install-for-production.md)\n\n<br /><br /><br />\n\n## ![✔] 8.6. Shutdown smartly and gracefully\n\n**TL;DR:** Handle the process SIGTERM event and clean-up all existing connection and resources. This should be done while responding to ongoing requests. In Dockerized runtimes, shutting down containers is not a rare event, rather a frequent occurrence that happen as part of routine work. Achieving this demands some thoughtful code to orchestrate several moving parts: The load balancer, keep-alive connections, the HTTP server and other resources\n\n**Otherwise:** Dying immediately means not responding to thousands of disappointed users\n\n🔗 [**Read More: Graceful shutdown**](./sections/docker/graceful-shutdown.md)\n\n<br /><br /><br />\n\n## ![✔] 8.7. Set memory limits using both Docker and v8\n\n**TL;DR:** Always configure a memory limit using both Docker and the JavaScript runtime flags. The Docker limit is needed to make thoughtful container placement decision, the --v8's flag max-old-space is needed to kick off the GC on time and prevent under utilization of memory. Practically, set the v8's old space memory to be a just bit less than the container limit\n\n**Otherwise:** The docker definition is needed to perform thoughtful scaling decision and prevent starving other citizens. Without also defining the v8's limits, it will under utilize the container resources - Without explicit instructions it crashes when utilizing ~50-60% of its host resources\n\n🔗 [**Read More: Set memory limits using Docker only**](./sections/docker/memory-limit.md)\n\n<br /><br /><br />\n\n## ![✔] 8.8. Plan for efficient caching\n\n**TL;DR:** Rebuilding a whole docker image from cache can be nearly instantaneous if done correctly. The less updated instructions should be at the top of your Dockerfile and the ones constantly changing (like app code) should be at the bottom.\n\n**Otherwise:** Docker build will be very long and consume lot of resources even when making tiny changes\n\n🔗 [**Read More: Leverage caching to reduce build times**](./sections/docker/use-cache-for-shorter-build-time.md)\n\n<br /><br /><br />\n\n## ![✔] 8.9. Use explicit image reference, avoid `latest` tag\n\n**TL;DR:** Specify an explicit image digest or versioned label, never refer to `latest`. Developers are often led to believe that specifying the `latest` tag will provide them with the most recent image in the repository however this is not the case. Using a digest guarantees that every instance of the service is running exactly the same code.\n\nIn addition, referring to an image tag means that the base image is subject to change, as image tags cannot be relied upon for a deterministic install. Instead, if a deterministic install is expected, a SHA256 digest can be used to reference an exact image.\n\n**Otherwise:** A new version of a base image could be deployed into production with breaking changes, causing unintended application behaviour.\n\n🔗 [**Read More: Understand image tags and use the \"latest\" tag with caution**](./sections/docker/image-tags.md)\n\n<br /><br /><br />\n\n## ![✔] 8.10. Prefer smaller Docker base images\n\n**TL;DR:** Large images lead to higher exposure to vulnerabilities and increased resource consumption. Using leaner Docker images, such as Slim and Alpine Linux variants, mitigates this issue.\n\n**Otherwise:** Building, pushing, and pulling images will take longer, unknown attack vectors can be used by malicious actors and more resources are consumed.\n\n🔗 [**Read More: Prefer smaller images**](./sections/docker/smaller_base_images.md)\n\n<br /><br /><br />\n\n## ![✔] 8.11. Clean-out build-time secrets, avoid secrets in args\n\n### `🌟 #new`\n\n**TL;DR:** Avoid secrets leaking from the Docker build environment. A Docker image is typically shared in multiple environment like CI and a registry that are not as sanitized as production. A typical example is an npm token which is usually passed to a dockerfile as argument. This token stays within the image long after it is needed and allows the attacker indefinite access to a private npm registry. This can be avoided by coping a secret file like `.npmrc` and then removing it using multi-stage build (beware, build history should be deleted as well) or by using Docker build-kit secret feature which leaves zero traces\n\n**Otherwise:** Everyone with access to the CI and docker registry will also get access to some precious organization secrets as a bonus\n\n🔗 [**Read More: Clean-out build-time secrets**](./sections/docker/avoid-build-time-secrets.md)\n\n<br /><br /><br />\n\n## ![✔] 8.12. Scan images for multi layers of vulnerabilities\n\n**TL;DR:** Besides checking code dependencies vulnerabilities also scan the final image that is shipped to production. Docker image scanners check the code dependencies but also the OS binaries. This E2E security scan covers more ground and verifies that no bad guy injected bad things during the build. Consequently, it is recommended running this as the last step before deployment. There are a handful of free and commercial scanners that also provide CI/CD plugins\n\n**Otherwise:** Your code might be entirely free from vulnerabilities. However it might still get hacked due to vulnerable version of OS-level binaries (e.g. OpenSSL, TarBall) that are commonly being used by applications\n\n🔗 [**Read More: Scan the entire image before production**](./sections/docker/scan-images.md)\n\n<br /><br /><br />\n\n## ![✔] 8.13 Clean NODE_MODULE cache\n\n**TL;DR:** After installing dependencies in a container remove the local cache. It doesn't make any sense to duplicate the dependencies for faster future installs since there won't be any further installs - A Docker image is immutable. Using a single line of code tens of MB (typically 10-50% of the image size) are shaved off\n\n**Otherwise:** The image that will get shipped to production will weigh 30% more due to files that will never get used\n\n🔗 [**Read More: Clean NODE_MODULE cache**](./sections/docker/clean-cache.md)\n\n<br /><br /><br />\n\n## ![✔] 8.14. Generic Docker practices\n\n**TL;DR:** This is a collection of Docker advice that is not related directly to Node.js - the Node implementation is not much different than any other language. Click read more to skim through.\n\n🔗 [**Read More: Generic Docker practices**](./sections/docker/generic-tips.md)\n\n<br/><br /><br />\n\n## ![✔] 8.15. Lint your Dockerfile\n\n### `🌟 #new`\n\n**TL;DR:** Linting your Dockerfile is an important step to identify issues in your Dockerfile which differ from best practices. By checking for potential flaws using a specialised Docker linter, performance and security improvements can be easily identified, saving countless hours of wasted time or security issues in production code.\n\n**Otherwise:** Mistakenly the Dockerfile creator left Root as the production user, and also used an image from unknown source repository. This could be avoided with with just a simple linter.\n\n🔗 [**Read More: Lint your Dockerfile**](./sections/docker/lint-dockerfile.md)\n\n<br/><br /><br />\n\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ Return to top</a></p>\n\n# Milestones\n\nTo maintain this guide and keep it up to date, we are constantly updating and improving the guidelines and best practices with the help of the community. You can follow our [milestones](https://github.com/goldbergyoni/nodebestpractices/milestones) and join the working groups if you want to contribute to this project\n\n<br/>\n\n## Translations\n\nAll translations are contributed by the community. We will be happy to get any help with either completed, ongoing or new translations!\n\n### Completed translations\n\n- ![BR](./assets/flags/BR.png) [Brazilian Portuguese](./README.brazilian-portuguese.md) - Courtesy of [Marcelo Melo](https://github.com/marcelosdm)\n- ![CN](./assets/flags/CN.png) [Chinese](./README.chinese.md) - Courtesy of [Matt Jin](https://github.com/mattjin)\n- ![RU](./assets/flags/RU.png) [Russian](./README.russian.md) - Courtesy of [Alex Ivanov](https://github.com/contributorpw)\n- ![PL](./assets/flags/PL.png) [Polish](./README.polish.md) - Courtesy of [Michal Biesiada](https://github.com/mbiesiad)\n- ![JA](./assets/flags/JA.png) [Japanese](./README.japanese.md) - Courtesy of [Yuki Ota](https://github.com/YukiOta), [Yuta Azumi](https://github.com/YA21)\n- ![EU](./assets/flags/EU.png) [Basque](README.basque.md) - Courtesy of [Ane Diaz de Tuesta](https://github.com/anediaz) & Joxefe Diaz de Tuesta\n\n### Translations in progress\n\n- ![FR](./assets/flags/FR.png) [French](./README.french.md) ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/129))\n- ![HE](./assets/flags/HE.png) [Hebrew](./README.hebrew.md) ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/156))\n- ![KR](./assets/flags/KR.png) [Korean](README.korean.md) - Courtesy of [Sangbeom Han](https://github.com/uronly14me) ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/94))\n- ![ES](./assets/flags/ES.png) [Spanish](https://github.com/goldbergyoni/nodebestpractices/blob/spanish-translation/README.spanish.md) ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/95))\n- ![TR](./assets/flags/TR.png) Turkish ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/139))\n\n<br/><br/>\n\n## Steering Committee\n\nMeet the steering committee members - the people who work together to provide guidance and future direction to the project. In addition, each member of the committee leads a project tracked under our [GitHub projects](https://github.com/goldbergyoni/nodebestpractices/projects).\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/yoni.png\"/>\n\n[Yoni Goldberg](https://github.com/goldbergyoni)\n<a href=\"https://twitter.com/goldbergyoni\"><img src=\"assets/images/twitter.svg\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://goldbergyoni.com\"><img src=\"assets/images/web.svg\" width=\"16\" height=\"16\"></img></a>\n\nIndependent Node.js consultant who works with customers in the USA, Europe, and Israel on building large-scale Node.js applications. Many of the best practices above were first published at [goldbergyoni.com](https://goldbergyoni.com). Reach Yoni at [@goldbergyoni](https://github.com/goldbergyoni) or [me@goldbergyoni.com](mailto:me@goldbergyoni.com)\n\n<br/>\n\n<a id=\"josh-hemphill\" href=\"https://github.com/josh-hemphill\" target=\"_blank\"><img src=\"assets/images/members/josh-hemphill.png\" align=\"left\" width=\"100\" height=\"100\" alt=\"Josh Hemphill\" loading=\"lazy\"/></a>\n\n[Josh Hemphill](https://github.com/josh-hemphill)\n<a href=\"https://twitter.com/spooklogical\"><img src=\"assets/images/twitter.svg\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://www.linkedin.com/in/joshuahemphill/\"><img src=\"assets/images/linkedin.svg\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://joshuahemphill.com\"><img src=\"assets/images/web.svg\" width=\"16\" height=\"16\"></img></a>\n\nFull Stack Software Engineer / Developer specializing in Security, DevOps/DevSecOps, and ERP Integrations.\n\n<br/>\n\n<a id=\"raz-luvaton\" href=\"https://github.com/rluvaton\" target=\"_blank\"><img src=\"assets/images/members/raz-luvaton.jpg\" align=\"left\" width=\"100\" height=\"100\" alt=\"Raz Luvaton\" loading=\"lazy\"/></a>\n\n[Raz Luvaton](https://github.com/rluvaton)\n<a href=\"https://twitter.com/rluvaton\"><img src=\"assets/images/twitter.svg\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://www.linkedin.com/in/rluvaton/\"><img src=\"assets/images/linkedin.svg\" width=\"16\" height=\"16\"></img></a>\n\nFull Stack Developer who knows how to exit from Vim and loves Architecture, Virtualization and Security.\n\n<br/>\n\n## Contributing\n\nIf you've ever wanted to contribute to open source, now is your chance! See the [contributing docs](.operations/CONTRIBUTING.md) for more information.\n\n## Contributors ✨\n\nThanks goes to these wonderful people who have contributed to this repository!\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kevinrambaud\"><img src=\"https://avatars1.githubusercontent.com/u/7501477?v=4\" width=\"100px;\" alt=\"Kevin Rambaud\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kevin Rambaud</b></sub></a><br /><a href=\"#content-kevinrambaud\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mfine15\"><img src=\"https://avatars1.githubusercontent.com/u/1286554?v=4\" width=\"100px;\" alt=\"Michael Fine\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Michael Fine</b></sub></a><br /><a href=\"#content-mfine15\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://squgeim.github.io\"><img src=\"https://avatars0.githubusercontent.com/u/4996818?v=4\" width=\"100px;\" alt=\"Shreya Dahal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shreya Dahal</b></sub></a><br /><a href=\"#content-squgeim\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://matheusrocha89.com\"><img src=\"https://avatars1.githubusercontent.com/u/3718366?v=4\" width=\"100px;\" alt=\"Matheus Cruz Rocha\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Matheus Cruz Rocha</b></sub></a><br /><a href=\"#content-matheusrocha89\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://bityog.github.io/Portfolio/\"><img src=\"https://avatars2.githubusercontent.com/u/28219178?v=4\" width=\"100px;\" alt=\"Yog Mehta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yog Mehta</b></sub></a><br /><a href=\"#content-BitYog\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://kudapara.co.zw\"><img src=\"https://avatars3.githubusercontent.com/u/13519184?v=4\" width=\"100px;\" alt=\"Kudakwashe Paradzayi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kudakwashe Paradzayi</b></sub></a><br /><a href=\"#content-kudapara\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.t1st3.com/\"><img src=\"https://avatars1.githubusercontent.com/u/1469638?v=4\" width=\"100px;\" alt=\"t1st3\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>t1st3</b></sub></a><br /><a href=\"#content-t1st3\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mulijordan1976\"><img src=\"https://avatars0.githubusercontent.com/u/33382022?v=4\" width=\"100px;\" alt=\"mulijordan1976\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>mulijordan1976</b></sub></a><br /><a href=\"#content-mulijordan1976\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/matchai\"><img src=\"https://avatars0.githubusercontent.com/u/4658208?v=4\" width=\"100px;\" alt=\"Matan Kushner\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Matan Kushner</b></sub></a><br /><a href=\"#content-matchai\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://fabiothiroki.github.io\"><img src=\"https://avatars2.githubusercontent.com/u/670057?v=4\" width=\"100px;\" alt=\"Fabio Hiroki\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Fabio Hiroki</b></sub></a><br /><a href=\"#content-fabiothiroki\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://james.sumners.info/\"><img src=\"https://avatars1.githubusercontent.com/u/321201?v=4\" width=\"100px;\" alt=\"James Sumners\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>James Sumners</b></sub></a><br /><a href=\"#content-jsumners\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/_DanGamble\"><img src=\"https://avatars2.githubusercontent.com/u/7152041?v=4\" width=\"100px;\" alt=\"Dan Gamble\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dan Gamble</b></sub></a><br /><a href=\"#content-dan-gamble\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/trainorpj\"><img src=\"https://avatars3.githubusercontent.com/u/13276704?v=4\" width=\"100px;\" alt=\"PJ Trainor\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>PJ Trainor</b></sub></a><br /><a href=\"#content-trainorpj\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/reod\"><img src=\"https://avatars0.githubusercontent.com/u/3164299?v=4\" width=\"100px;\" alt=\"Remek Ambroziak\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Remek Ambroziak</b></sub></a><br /><a href=\"#content-reod\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://ca.non.co.il\"><img src=\"https://avatars0.githubusercontent.com/u/1829789?v=4\" width=\"100px;\" alt=\"Yoni Jah\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yoni Jah</b></sub></a><br /><a href=\"#content-yonjah\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/hazolsky\"><img src=\"https://avatars1.githubusercontent.com/u/1270790?v=4\" width=\"100px;\" alt=\"Misha Khokhlov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Misha Khokhlov</b></sub></a><br /><a href=\"#content-hazolsky\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://plus.google.com/+ЕвгенийОрехов/\"><img src=\"https://avatars3.githubusercontent.com/u/8045060?v=4\" width=\"100px;\" alt=\"Evgeny Orekhov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Evgeny Orekhov</b></sub></a><br /><a href=\"#content-EvgenyOrekhov\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/gediminasml\"><img src=\"https://avatars3.githubusercontent.com/u/19854105?v=4\" width=\"100px;\" alt=\"-\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>-</b></sub></a><br /><a href=\"#content-gediminasml\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://hisaac.net\"><img src=\"https://avatars3.githubusercontent.com/u/923876?v=4\" width=\"100px;\" alt=\"Isaac Halvorson\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Isaac Halvorson</b></sub></a><br /><a href=\"#content-hisaac\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.vedrankaracic.com\"><img src=\"https://avatars3.githubusercontent.com/u/2808092?v=4\" width=\"100px;\" alt=\"Vedran Karačić\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vedran Karačić</b></sub></a><br /><a href=\"#content-vkaracic\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/lallenlowe\"><img src=\"https://avatars3.githubusercontent.com/u/10761165?v=4\" width=\"100px;\" alt=\"lallenlowe\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>lallenlowe</b></sub></a><br /><a href=\"#content-lallenlowe\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/nwwells\"><img src=\"https://avatars2.githubusercontent.com/u/1039473?v=4\" width=\"100px;\" alt=\"Nathan Wells\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nathan Wells</b></sub></a><br /><a href=\"#content-nwwells\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/paulovitin\"><img src=\"https://avatars0.githubusercontent.com/u/125503?v=4\" width=\"100px;\" alt=\"Paulo Reis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Paulo Reis</b></sub></a><br /><a href=\"#content-paulovitin\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://snap.simpego.ch\"><img src=\"https://avatars2.githubusercontent.com/u/1989646?v=4\" width=\"100px;\" alt=\"syzer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>syzer</b></sub></a><br /><a href=\"#content-syzer\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://sancho.dev\"><img src=\"https://avatars0.githubusercontent.com/u/3763599?v=4\" width=\"100px;\" alt=\"David Sancho\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>David Sancho</b></sub></a><br /><a href=\"#content-davesnx\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://apiforge.it\"><img src=\"https://avatars0.githubusercontent.com/u/4929965?v=4\" width=\"100px;\" alt=\"Robert Manolea\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Robert Manolea</b></sub></a><br /><a href=\"#content-pupix\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://jumptoglide.com\"><img src=\"https://avatars2.githubusercontent.com/u/708395?v=4\" width=\"100px;\" alt=\"Xavier Ho\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Xavier Ho</b></sub></a><br /><a href=\"#content-spaxe\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.ocular-rhythm.io\"><img src=\"https://avatars0.githubusercontent.com/u/2738518?v=4\" width=\"100px;\" alt=\"Aaron\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Aaron</b></sub></a><br /><a href=\"#content-ocularrhythm\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://septa97.me\"><img src=\"https://avatars2.githubusercontent.com/u/13742634?v=4\" width=\"100px;\" alt=\"Jan Charles Maghirang Adona\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jan Charles Maghirang Adona</b></sub></a><br /><a href=\"#content-septa97\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.cakeresume.com/allenfang\"><img src=\"https://avatars2.githubusercontent.com/u/5351390?v=4\" width=\"100px;\" alt=\"Allen\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Allen</b></sub></a><br /><a href=\"#content-AllenFang\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/leonardovillela\"><img src=\"https://avatars3.githubusercontent.com/u/8650543?v=4\" width=\"100px;\" alt=\"Leonardo Villela\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Leonardo Villela</b></sub></a><br /><a href=\"#content-leonardovillela\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://michalzalecki.com\"><img src=\"https://avatars1.githubusercontent.com/u/3136577?v=4\" width=\"100px;\" alt=\"Michał Załęcki\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Michał Załęcki</b></sub></a><br /><a href=\"#content-MichalZalecki\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.wealthbar.com\"><img src=\"https://avatars1.githubusercontent.com/u/156449?v=4\" width=\"100px;\" alt=\"Chris Nicola\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Chris Nicola</b></sub></a><br /><a href=\"#content-chrisnicola\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/aecorredor\"><img src=\"https://avatars3.githubusercontent.com/u/9114987?v=4\" width=\"100px;\" alt=\"Alejandro Corredor\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alejandro Corredor</b></sub></a><br /><a href=\"#content-aecorredor\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/cwar\"><img src=\"https://avatars3.githubusercontent.com/u/272843?v=4\" width=\"100px;\" alt=\"cwar\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>cwar</b></sub></a><br /><a href=\"#content-cwar\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/keyfoxth\"><img src=\"https://avatars3.githubusercontent.com/u/10647132?v=4\" width=\"100px;\" alt=\"Yuwei\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yuwei</b></sub></a><br /><a href=\"#content-keyfoxth\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://bigcodenerd.org\"><img src=\"https://avatars3.githubusercontent.com/u/10895594?v=4\" width=\"100px;\" alt=\"Utkarsh Bhatt\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Utkarsh Bhatt</b></sub></a><br /><a href=\"#content-utkarshbhatt12\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/duartemendes\"><img src=\"https://avatars2.githubusercontent.com/u/12852058?v=4\" width=\"100px;\" alt=\"Duarte Mendes\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Duarte Mendes</b></sub></a><br /><a href=\"#content-duartemendes\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://jasonkim.ca\"><img src=\"https://avatars2.githubusercontent.com/u/103456?v=4\" width=\"100px;\" alt=\"Jason Kim\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jason Kim</b></sub></a><br /><a href=\"#content-serv\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Max101\"><img src=\"https://avatars2.githubusercontent.com/u/2124249?v=4\" width=\"100px;\" alt=\"Mitja O.\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Mitja O.</b></sub></a><br /><a href=\"#content-Max101\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://sandromiguel.com\"><img src=\"https://avatars0.githubusercontent.com/u/6423157?v=4\" width=\"100px;\" alt=\"Sandro Miguel Marques\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sandro Miguel Marques</b></sub></a><br /><a href=\"#content-SandroMiguel\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/GabeKuslansky\"><img src=\"https://avatars3.githubusercontent.com/u/9855482?v=4\" width=\"100px;\" alt=\"Gabe\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Gabe</b></sub></a><br /><a href=\"#content-GabeKuslansky\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://ripper234.com/\"><img src=\"https://avatars1.githubusercontent.com/u/172282?v=4\" width=\"100px;\" alt=\"Ron Gross\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ron Gross</b></sub></a><br /><a href=\"#content-ripper234\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.thecodebarbarian.com\"><img src=\"https://avatars2.githubusercontent.com/u/1620265?v=4\" width=\"100px;\" alt=\"Valeri Karpov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Valeri Karpov</b></sub></a><br /><a href=\"#content-vkarpov15\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://sergiobernal.com\"><img src=\"https://avatars3.githubusercontent.com/u/20087388?v=4\" width=\"100px;\" alt=\"Sergio Bernal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sergio Bernal</b></sub></a><br /><a href=\"#content-imsergiobernal\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ntelkedzhiev\"><img src=\"https://avatars2.githubusercontent.com/u/7332371?v=4\" width=\"100px;\" alt=\"Nikola Telkedzhiev\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nikola Telkedzhiev</b></sub></a><br /><a href=\"#content-ntelkedzhiev\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/vitordagamagodoy\"><img src=\"https://avatars0.githubusercontent.com/u/26370059?v=4\" width=\"100px;\" alt=\"Vitor Godoy\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vitor Godoy</b></sub></a><br /><a href=\"#content-vitordagamagodoy\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.manishsaraan.com/\"><img src=\"https://avatars2.githubusercontent.com/u/19797340?v=4\" width=\"100px;\" alt=\"Manish Saraan\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Manish Saraan</b></sub></a><br /><a href=\"#content-manishsaraan\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/uronly14me\"><img src=\"https://avatars2.githubusercontent.com/u/5186814?v=4\" width=\"100px;\" alt=\"Sangbeom Han\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sangbeom Han</b></sub></a><br /><a href=\"#content-uronly14me\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://blackmatch.github.io\"><img src=\"https://avatars3.githubusercontent.com/u/12443954?v=4\" width=\"100px;\" alt=\"blackmatch\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>blackmatch</b></sub></a><br /><a href=\"#content-blackmatch\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://simmsreeve.com\"><img src=\"https://avatars3.githubusercontent.com/u/5173131?v=4\" width=\"100px;\" alt=\"Joe Reeve\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Joe Reeve</b></sub></a><br /><a href=\"#content-ISNIT0\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/BusbyActual\"><img src=\"https://avatars2.githubusercontent.com/u/14985016?v=4\" width=\"100px;\" alt=\"Ryan Busby\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ryan Busby</b></sub></a><br /><a href=\"#content-BusbyActual\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://jsdecorator.com\"><img src=\"https://avatars3.githubusercontent.com/u/4482199?v=4\" width=\"100px;\" alt=\"Iman Mohamadi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Iman Mohamadi</b></sub></a><br /><a href=\"#content-ImanMh\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/HeeL\"><img src=\"https://avatars1.githubusercontent.com/u/287769?v=4\" width=\"100px;\" alt=\"Sergii Paryzhskyi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sergii Paryzhskyi</b></sub></a><br /><a href=\"#content-HeeL\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kapilepatel\"><img src=\"https://avatars3.githubusercontent.com/u/25738473?v=4\" width=\"100px;\" alt=\"Kapil Patel\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kapil Patel</b></sub></a><br /><a href=\"#content-kapilepatel\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/justjavac\"><img src=\"https://avatars1.githubusercontent.com/u/359395?v=4\" width=\"100px;\" alt=\"迷渡\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>迷渡</b></sub></a><br /><a href=\"#content-justjavac\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/hozefaj\"><img src=\"https://avatars1.githubusercontent.com/u/2084833?v=4\" width=\"100px;\" alt=\"Hozefa\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Hozefa</b></sub></a><br /><a href=\"#content-hozefaj\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/el-ethan\"><img src=\"https://avatars3.githubusercontent.com/u/10249884?v=4\" width=\"100px;\" alt=\"Ethan\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ethan</b></sub></a><br /><a href=\"#content-el-ethan\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/milkdeliver\"><img src=\"https://avatars2.githubusercontent.com/u/3108407?v=4\" width=\"100px;\" alt=\"Sam\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Sam</b></sub></a><br /><a href=\"#content-milkdeliver\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ArlindXh\"><img src=\"https://avatars0.githubusercontent.com/u/19508764?v=4\" width=\"100px;\" alt=\"Arlind\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Arlind</b></sub></a><br /><a href=\"#content-ArlindXh\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ttous\"><img src=\"https://avatars0.githubusercontent.com/u/19815440?v=4\" width=\"100px;\" alt=\"Teddy Toussaint\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Teddy Toussaint</b></sub></a><br /><a href=\"#content-ttous\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://ardern.io\"><img src=\"https://avatars2.githubusercontent.com/u/2419690?v=4\" width=\"100px;\" alt=\"Lewis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Lewis</b></sub></a><br /><a href=\"#content-LewisArdern\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://gabriellidenor.com/\"><img src=\"https://avatars2.githubusercontent.com/u/765963?v=4\" width=\"100px;\" alt=\"Gabriel Lidenor \"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Gabriel Lidenor </b></sub></a><br /><a href=\"#content-GabrielLidenor\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/animir\"><img src=\"https://avatars3.githubusercontent.com/u/4623196?v=4\" width=\"100px;\" alt=\"Roman\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Roman</b></sub></a><br /><a href=\"#content-animir\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Francozeira\"><img src=\"https://avatars1.githubusercontent.com/u/47419763?v=4\" width=\"100px;\" alt=\"Francozeira\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Francozeira</b></sub></a><br /><a href=\"#content-Francozeira\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/invvard\"><img src=\"https://avatars0.githubusercontent.com/u/7305493?v=4\" width=\"100px;\" alt=\"Invvard\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Invvard</b></sub></a><br /><a href=\"#content-Invvard\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://romulogarofalo.github.io/\"><img src=\"https://avatars1.githubusercontent.com/u/18492592?v=4\" width=\"100px;\" alt=\"Rômulo Garofalo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Rômulo Garofalo</b></sub></a><br /><a href=\"#content-romulogarofalo\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://thoqbk.github.io/\"><img src=\"https://avatars0.githubusercontent.com/u/1491103?v=4\" width=\"100px;\" alt=\"Tho Q Luong\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tho Q Luong</b></sub></a><br /><a href=\"#content-thoqbk\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Qeneke\"><img src=\"https://avatars2.githubusercontent.com/u/20271568?v=4\" width=\"100px;\" alt=\"Burak Shen\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Burak Shen</b></sub></a><br /><a href=\"#content-Qeneke\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.happy-css.com\"><img src=\"https://avatars0.githubusercontent.com/u/2950505?v=4\" width=\"100px;\" alt=\"Martin Muzatko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Martin Muzatko</b></sub></a><br /><a href=\"#content-MartinMuzatko\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/autoboxer\"><img src=\"https://avatars3.githubusercontent.com/u/2757601?v=4\" width=\"100px;\" alt=\"Jared Collier\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jared Collier</b></sub></a><br /><a href=\"#content-autoboxer\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://hiltonmeyer.com\"><img src=\"https://avatars3.githubusercontent.com/u/4545860?v=4\" width=\"100px;\" alt=\"Hilton Meyer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Hilton Meyer</b></sub></a><br /><a href=\"#content-bikingbadger\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://kr.vuejs.org\"><img src=\"https://avatars0.githubusercontent.com/u/1451365?v=4\" width=\"100px;\" alt=\"ChangJoo Park(박창주)\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>ChangJoo Park(박창주)</b></sub></a><br /><a href=\"#content-ChangJoo-Park\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/MasahiroSakaguchi\"><img src=\"https://avatars0.githubusercontent.com/u/16427431?v=4\" width=\"100px;\" alt=\"Masahiro Sakaguchi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Masahiro Sakaguchi</b></sub></a><br /><a href=\"#content-MasahiroSakaguchi\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/TheHollidayInn\"><img src=\"https://avatars1.githubusercontent.com/u/1253400?v=4\" width=\"100px;\" alt=\"Keith Holliday\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Keith Holliday</b></sub></a><br /><a href=\"#content-TheHollidayInn\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.coreycleary.me\"><img src=\"https://avatars3.githubusercontent.com/u/1485356?v=4\" width=\"100px;\" alt=\"coreyc\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>coreyc</b></sub></a><br /><a href=\"#content-coreyc\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://maxcubing.wordpress.com\"><img src=\"https://avatars0.githubusercontent.com/u/8260834?v=4\" width=\"100px;\" alt=\"Maximilian Berkmann\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Maximilian Berkmann</b></sub></a><br /><a href=\"#content-Berkmann18\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/DouglasMV\"><img src=\"https://avatars3.githubusercontent.com/u/32845487?v=4\" width=\"100px;\" alt=\"Douglas Mariano Valero\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Douglas Mariano Valero</b></sub></a><br /><a href=\"#content-DouglasMV\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/marcelosdm\"><img src=\"https://avatars0.githubusercontent.com/u/18266600?v=4\" width=\"100px;\" alt=\"Marcelo Melo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Marcelo Melo</b></sub></a><br /><a href=\"#content-marcelosdm\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/mperk_\"><img src=\"https://avatars0.githubusercontent.com/u/3465794?v=4\" width=\"100px;\" alt=\"Mehmet Perk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Mehmet Perk</b></sub></a><br /><a href=\"#content-mperk\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ryanouyang\"><img src=\"https://avatars2.githubusercontent.com/u/360426?v=4\" width=\"100px;\" alt=\"ryan ouyang\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>ryan ouyang</b></sub></a><br /><a href=\"#content-ryanouyang\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/shabeer-mdy\"><img src=\"https://avatars0.githubusercontent.com/u/26842535?v=4\" width=\"100px;\" alt=\"Shabeer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shabeer</b></sub></a><br /><a href=\"#content-shabeer-mdy\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/halfzebra\"><img src=\"https://avatars1.githubusercontent.com/u/3983879?v=4\" width=\"100px;\" alt=\"Eduard Kyvenko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Eduard Kyvenko</b></sub></a><br /><a href=\"#content-halfzebra\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://deyvisonrocha.com\"><img src=\"https://avatars2.githubusercontent.com/u/686067?v=4\" width=\"100px;\" alt=\"Deyvison Rocha\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Deyvison Rocha</b></sub></a><br /><a href=\"#content-deyvisonrocha\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://twitter.com/georgemamer\"><img src=\"https://avatars1.githubusercontent.com/u/20108934?v=4\" width=\"100px;\" alt=\"George Mamer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>George Mamer</b></sub></a><br /><a href=\"#content-georgem3\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/leimonio\"><img src=\"https://avatars0.githubusercontent.com/u/1969742?v=4\" width=\"100px;\" alt=\"Konstantinos Leimonis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Konstantinos Leimonis</b></sub></a><br /><a href=\"#content-leimonio\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Zybax\"><img src=\"https://avatars3.githubusercontent.com/u/22094453?v=4\" width=\"100px;\" alt=\"Oliver Lluberes\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Oliver Lluberes</b></sub></a><br /><a href=\"#translation-Zybax\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://stackoverflow.com/story/tiendq\"><img src=\"https://avatars2.githubusercontent.com/u/815910?v=4\" width=\"100px;\" alt=\"Tien Do\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tien Do</b></sub></a><br /><a href=\"#content-tiendq\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://singh1114.github.io/\"><img src=\"https://avatars0.githubusercontent.com/u/11356398?v=4\" width=\"100px;\" alt=\"Ranvir Singh\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ranvir Singh</b></sub></a><br /><a href=\"#content-singh1114\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/collierrgbsitisfise\"><img src=\"https://avatars3.githubusercontent.com/u/13496126?v=4\" width=\"100px;\" alt=\"Vadim Nicolaev\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vadim Nicolaev</b></sub></a><br /><a href=\"#content-collierrgbsitisfise\" title=\"Content\">🖋</a> <a href=\"#translation-collierrgbsitisfise\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/germangamboa95\"><img src=\"https://avatars3.githubusercontent.com/u/28633849?v=4\" width=\"100px;\" alt=\"German Gamboa Gonzalez\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>German Gamboa Gonzalez</b></sub></a><br /><a href=\"#content-germangamboa95\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/AbdelrahmanHafez\"><img src=\"https://avatars3.githubusercontent.com/u/19984935?v=4\" width=\"100px;\" alt=\"Hafez\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Hafez</b></sub></a><br /><a href=\"#content-AbdelrahmanHafez\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://linkedin.com/in/chandiran-dmc\"><img src=\"https://avatars3.githubusercontent.com/u/42678579?v=4\" width=\"100px;\" alt=\"Chandiran\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Chandiran</b></sub></a><br /><a href=\"#content-chandiran-dmc\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/VinayaSathyanarayana\"><img src=\"https://avatars2.githubusercontent.com/u/16976677?v=4\" width=\"100px;\" alt=\"VinayaSathyanarayana\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>VinayaSathyanarayana</b></sub></a><br /><a href=\"#content-VinayaSathyanarayana\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.kimkern.de\"><img src=\"https://avatars1.githubusercontent.com/u/2671139?v=4\" width=\"100px;\" alt=\"Kim Kern\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kim Kern</b></sub></a><br /><a href=\"#content-kiwikern\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://kennethfreitas.github.io/\"><img src=\"https://avatars2.githubusercontent.com/u/55669043?v=4\" width=\"100px;\" alt=\"Kenneth Freitas\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kenneth Freitas</b></sub></a><br /><a href=\"#content-kennethfreitas\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/songe\"><img src=\"https://avatars2.githubusercontent.com/u/1531561?v=4\" width=\"100px;\" alt=\"songe\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>songe</b></sub></a><br /><a href=\"#content-songe\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://ksed.dev\"><img src=\"https://avatars1.githubusercontent.com/u/30693707?v=4\" width=\"100px;\" alt=\"Kirill Shekhovtsov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kirill Shekhovtsov</b></sub></a><br /><a href=\"#content-Ksedline\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/SerzN1\"><img src=\"https://avatars0.githubusercontent.com/u/2534649?v=4\" width=\"100px;\" alt=\"Serge\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Serge</b></sub></a><br /><a href=\"#content-SerzN1\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/keyrwinz\"><img src=\"https://avatars3.githubusercontent.com/u/21241761?v=4\" width=\"100px;\" alt=\"keyrwinz\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>keyrwinz</b></sub></a><br /><a href=\"#content-keyrwinz\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/nDmitry\"><img src=\"https://avatars0.githubusercontent.com/u/2134568?v=4\" width=\"100px;\" alt=\"Dmitry Nikitenko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dmitry Nikitenko</b></sub></a><br /><a href=\"#content-nDmitry\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://bushuai.cc\"><img src=\"https://avatars0.githubusercontent.com/u/1875256?v=4\" width=\"100px;\" alt=\"bushuai\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>bushuai</b></sub></a><br /><a href=\"https://github.com/goldbergyoni/nodebestpractices/pulls?q=is%3Apr+reviewed-by%3Abushuai\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#content-bushuai\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://stackoverflow.com/users/1348195/benjamin-gruenbaum\"><img src=\"https://avatars2.githubusercontent.com/u/1315533?v=4\" width=\"100px;\" alt=\"Benjamin Gruenbaum\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Benjamin Gruenbaum</b></sub></a><br /><a href=\"#content-benjamingr\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/byeze\"><img src=\"https://avatars1.githubusercontent.com/u/7424138?v=4\" width=\"100px;\" alt=\"Ezequiel\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ezequiel</b></sub></a><br /><a href=\"#translation-byeze\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/juaoose\"><img src=\"https://avatars3.githubusercontent.com/u/994594?v=4\" width=\"100px;\" alt=\"Juan José Rodríguez\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Juan José Rodríguez</b></sub></a><br /><a href=\"#translation-juaoose\" title=\"Translation\">🌍</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/OrBin\"><img src=\"https://avatars1.githubusercontent.com/u/6897234?v=4\" width=\"100px;\" alt=\"Or Bin\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Or Bin</b></sub></a><br /><a href=\"#content-OrBin\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/andreoav07\"><img src=\"https://avatars2.githubusercontent.com/u/508827?v=4\" width=\"100px;\" alt=\"Andreo Vieira\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Andreo Vieira</b></sub></a><br /><a href=\"#content-andreoav\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mikicho\"><img src=\"https://avatars1.githubusercontent.com/u/11459632?v=4\" width=\"100px;\" alt=\"Michael Solomon\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Michael Solomon</b></sub></a><br /><a href=\"#content-mikicho\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jimmycallin\"><img src=\"https://avatars0.githubusercontent.com/u/2225828?v=4\" width=\"100px;\" alt=\"Jimmy Callin\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jimmy Callin</b></sub></a><br /><a href=\"#content-jimmycallin\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/siddharthofficial/\"><img src=\"https://avatars2.githubusercontent.com/u/26025955?v=4\" width=\"100px;\" alt=\"Siddharth\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Siddharth</b></sub></a><br /><a href=\"#content-w01fS\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://ryansmith.tech/\"><img src=\"https://avatars0.githubusercontent.com/u/1578766?v=4\" width=\"100px;\" alt=\"Ryan Smith\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ryan Smith</b></sub></a><br /><a href=\"#content-ryan3E0\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://de.linkedin.com/in/tom-boettger\"><img src=\"https://avatars2.githubusercontent.com/u/49961674?v=4\" width=\"100px;\" alt=\"Tom Boettger\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tom Boettger</b></sub></a><br /><a href=\"#content-bttger\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jormaechea\"><img src=\"https://avatars3.githubusercontent.com/u/5612500?v=4\" width=\"100px;\" alt=\"Joaquín Ormaechea\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Joaquín Ormaechea</b></sub></a><br /><a href=\"#translation-jormaechea\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/dfrzuz\"><img src=\"https://avatars3.githubusercontent.com/u/71859096?v=4\" width=\"100px;\" alt=\"dfrzuz\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>dfrzuz</b></sub></a><br /><a href=\"#translation-dfrzuz\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/victor-homyakov\"><img src=\"https://avatars1.githubusercontent.com/u/121449?v=4\" width=\"100px;\" alt=\"Victor Homyakov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Victor Homyakov</b></sub></a><br /><a href=\"#content-victor-homyakov\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://joshuahemphill.com\"><img src=\"https://avatars3.githubusercontent.com/u/46608115?v=4\" width=\"100px;\" alt=\"Josh\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Josh</b></sub></a><br /><a href=\"#content-josh-hemphill\" title=\"Content\">🖋</a> <a href=\"#security-josh-hemphill\" title=\"Security\">🛡️</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/alec-francis\"><img src=\"https://avatars2.githubusercontent.com/u/32949882?v=4\" width=\"100px;\" alt=\"Alec Francis\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alec Francis</b></sub></a><br /><a href=\"#content-alec-francis\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/arjun6610\"><img src=\"https://avatars1.githubusercontent.com/u/61268891?v=4\" width=\"100px;\" alt=\"arjun6610\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>arjun6610</b></sub></a><br /><a href=\"#content-arjun6610\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jan-osch\"><img src=\"https://avatars2.githubusercontent.com/u/11651780?v=4\" width=\"100px;\" alt=\"Jan Osch\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jan Osch</b></sub></a><br /><a href=\"#content-jan-osch\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/thiagotrs\"><img src=\"https://avatars2.githubusercontent.com/u/32005779?v=4\" width=\"100px;\" alt=\"Thiago Rotondo Sampaio\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Thiago Rotondo Sampaio</b></sub></a><br /><a href=\"#translation-thiagotrs\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Alexsey\"><img src=\"https://avatars0.githubusercontent.com/u/6392013?v=4\" width=\"100px;\" alt=\"Alexsey\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alexsey</b></sub></a><br /><a href=\"#content-Alexsey\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/13luismb\"><img src=\"https://avatars1.githubusercontent.com/u/32210483?v=4\" width=\"100px;\" alt=\"Luis A. Acurero\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Luis A. Acurero</b></sub></a><br /><a href=\"#translation-13luismb\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://lromano97.github.io/\"><img src=\"https://avatars1.githubusercontent.com/u/22394847?v=4\" width=\"100px;\" alt=\"Lucas Romano\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Lucas Romano</b></sub></a><br /><a href=\"#translation-lromano97\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/denisecase\"><img src=\"https://avatars0.githubusercontent.com/u/13016516?v=4\" width=\"100px;\" alt=\"Denise Case\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Denise Case</b></sub></a><br /><a href=\"#content-denisecase\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://stackoverflow.com/story/elektronik\"><img src=\"https://avatars3.githubusercontent.com/u/1078554?v=4\" width=\"100px;\" alt=\"Nick Ribal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nick Ribal</b></sub></a><br /><a href=\"#content-elektronik2k5\" title=\"Content\">🖋</a> <a href=\"https://github.com/goldbergyoni/nodebestpractices/pulls?q=is%3Apr+reviewed-by%3Aelektronik2k5\" title=\"Reviewed Pull Requests\">👀</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/0xflotus\"><img src=\"https://avatars3.githubusercontent.com/u/26602940?v=4\" width=\"100px;\" alt=\"0xflotus\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>0xflotus</b></sub></a><br /><a href=\"#content-0xflotus\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.dijonkitchen.org/\"><img src=\"https://avatars3.githubusercontent.com/u/11434205?v=4\" width=\"100px;\" alt=\"Jonathan Chen\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jonathan Chen</b></sub></a><br /><a href=\"#content-dijonkitchen\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/dilansri\"><img src=\"https://avatars2.githubusercontent.com/u/5089728?v=4\" width=\"100px;\" alt=\"Dilan Srilal\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dilan Srilal</b></sub></a><br /><a href=\"#content-dilansri\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://vectree.ru\"><img src=\"https://avatars3.githubusercontent.com/u/4215285?v=4\" width=\"100px;\" alt=\"vladthelittleone\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>vladthelittleone</b></sub></a><br /><a href=\"#translation-vladthelittleone\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.nikolaso.com\"><img src=\"https://avatars0.githubusercontent.com/u/60047271?v=4\" width=\"100px;\" alt=\"Nik Osvalds\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Nik Osvalds</b></sub></a><br /><a href=\"#content-nosvalds\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kdaniel21\"><img src=\"https://avatars0.githubusercontent.com/u/39854385?v=4\" width=\"100px;\" alt=\"Daniel Kiss\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Daniel Kiss</b></sub></a><br /><a href=\"https://github.com/goldbergyoni/nodebestpractices/commits?author=kdaniel21\" title=\"Documentation\">📖</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://twitter.com/forresst17\"><img src=\"https://avatars2.githubusercontent.com/u/163352?v=4\" width=\"100px;\" alt=\"Forresst\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Forresst</b></sub></a><br /><a href=\"#content-forresst\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/svenheden\"><img src=\"https://avatars1.githubusercontent.com/u/76098?v=4\" width=\"100px;\" alt=\"Jonathan Svenheden\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Jonathan Svenheden</b></sub></a><br /><a href=\"#content-svenheden\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/AustrisC\"><img src=\"https://avatars2.githubusercontent.com/u/12381652?v=4\" width=\"100px;\" alt=\"AustrisC\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>AustrisC</b></sub></a><br /><a href=\"#content-AustrisC\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/cisco0808\"><img src=\"https://avatars0.githubusercontent.com/u/60251188?v=4\" width=\"100px;\" alt=\"kyeongtae kim\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>kyeongtae kim</b></sub></a><br /><a href=\"#translation-cisco0808\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://keybase.io/651z9pz968v2accj\"><img src=\"https://avatars.githubusercontent.com/u/65741741?v=4\" width=\"100px;\" alt=\"007\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>007</b></sub></a><br /><a href=\"#content-6gx7iycn53ioq2e8apk1j1ypwov4giui\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.anediaz.com\"><img src=\"https://avatars.githubusercontent.com/u/17216937?v=4\" width=\"100px;\" alt=\"Ane Diaz de Tuesta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Ane Diaz de Tuesta</b></sub></a><br /><a href=\"#translation-anediaz\" title=\"Translation\">🌍</a> <a href=\"#content-anediaz\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://yukioh.net\"><img src=\"https://avatars.githubusercontent.com/u/23182489?v=4\" width=\"100px;\" alt=\"YukiOta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>YukiOta</b></sub></a><br /><a href=\"#translation-YukiOta\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.yeovilhospital.co.uk/\"><img src=\"https://avatars.githubusercontent.com/u/43814140?v=4\" width=\"100px;\" alt=\"Frazer Smith\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Frazer Smith</b></sub></a><br /><a href=\"#content-Fdawgs\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/rluvaton\"><img src=\"https://avatars.githubusercontent.com/u/16746759?v=4\" width=\"100px;\" alt=\"Raz Luvaton\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Raz Luvaton</b></sub></a><br /><a href=\"#content-rluvaton\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/YA21\"><img src=\"https://avatars.githubusercontent.com/u/37298463?v=4\" width=\"100px;\" alt=\"Yuta Azumi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yuta Azumi</b></sub></a><br /><a href=\"#content-YA21\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/andrewjbarbour\"><img src=\"https://avatars.githubusercontent.com/u/77080074?v=4\" width=\"100px;\" alt=\"andrewjbarbour\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>andrewjbarbour</b></sub></a><br /><a href=\"#content-andrewjbarbour\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://MasujimaRyohei.jp\"><img src=\"https://avatars.githubusercontent.com/u/17163541?v=4\" width=\"100px;\" alt=\"mr\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>mr</b></sub></a><br /><a href=\"#content-MasujimaRyohei\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kubanac95\"><img src=\"https://avatars.githubusercontent.com/u/16191931?v=4\" width=\"100px;\" alt=\"Aleksandar\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Aleksandar</b></sub></a><br /><a href=\"#content-kubanac95\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://vincentjonathan.com\"><img src=\"https://avatars.githubusercontent.com/u/32597776?v=4\" width=\"100px;\" alt=\"Owl\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Owl</b></sub></a><br /><a href=\"#content-SuspiciousLookingOwl\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/yedidyas\"><img src=\"https://avatars.githubusercontent.com/u/36074789?v=4\" width=\"100px;\" alt=\"Yedidya Schwartz\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yedidya Schwartz</b></sub></a><br /><a href=\"#content-yedidyas\" title=\"Content\">🖋</a> <a href=\"#example-yedidyas\" title=\"Examples\">💡</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ariel-diaz\"><img src=\"https://avatars.githubusercontent.com/u/20423540?v=4\" width=\"100px;\" alt=\"ari\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>ari</b></sub></a><br /><a href=\"#content-ariel-diaz\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.koenigthomas.de/\"><img src=\"https://avatars.githubusercontent.com/u/7080389?v=4\" width=\"100px;\" alt=\"Thomas König\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Thomas König</b></sub></a><br /><a href=\"#content-Vispercept\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/coocos\"><img src=\"https://avatars.githubusercontent.com/u/1397804?v=4\" width=\"100px;\" alt=\"Kalle Lämsä\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kalle Lämsä</b></sub></a><br /><a href=\"#content-coocos\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://math.cat\"><img src=\"https://avatars.githubusercontent.com/u/10328430?v=4\" width=\"100px;\" alt=\"Wyatt\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Wyatt</b></sub></a><br /><a href=\"#content-ZhyMC\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://libkhadir.fr\"><img src=\"https://avatars.githubusercontent.com/u/45130488?v=4\" width=\"100px;\" alt=\"KHADIR Tayeb\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>KHADIR Tayeb</b></sub></a><br /><a href=\"#content-tkhadir\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/shankarregmi\"><img src=\"https://avatars.githubusercontent.com/u/7703345?v=4\" width=\"100px;\" alt=\"Shankar Regmi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shankar Regmi</b></sub></a><br /><a href=\"#content-shankarregmi\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/codebyshubham\"><img src=\"https://avatars.githubusercontent.com/u/10389723?v=4\" width=\"100px;\" alt=\"Shubham\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shubham</b></sub></a><br /><a href=\"#content-codebyshubham\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://lucalves.me/\"><img src=\"https://avatars.githubusercontent.com/u/17712401?v=4\" width=\"100px;\" alt=\"Lucas Alves\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Lucas Alves</b></sub></a><br /><a href=\"#content-lucalves\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/benjaminudoh10\"><img src=\"https://avatars.githubusercontent.com/u/9018331?v=4\" width=\"100px;\" alt=\"Benjamin\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Benjamin</b></sub></a><br /><a href=\"#content-benjaminudoh10\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.yjoer.com\"><img src=\"https://avatars.githubusercontent.com/u/47742486?v=4\" width=\"100px;\" alt=\"Yeoh Joer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Yeoh Joer</b></sub></a><br /><a href=\"#content-yjoer\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://blog.miigon.net\"><img src=\"https://avatars.githubusercontent.com/u/16161991?v=4\" width=\"100px;\" alt=\"Miigon\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Miigon</b></sub></a><br /><a href=\"#content-Miigon\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://brainstorage.me/Egregor2011\"><img src=\"https://avatars.githubusercontent.com/u/3630318?v=4\" width=\"100px;\" alt=\"Rostislav Bogorad\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Rostislav Bogorad</b></sub></a><br /><a href=\"#content-Egregor2011\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Flouse\"><img src=\"https://avatars.githubusercontent.com/u/1297478?v=4\" width=\"100px;\" alt=\"Flouse\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Flouse</b></sub></a><br /><a href=\"#content-Flouse\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://taranttini.com\"><img src=\"https://avatars.githubusercontent.com/u/6922125?v=4\" width=\"100px;\" alt=\"Tarantini Pereira\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Tarantini Pereira</b></sub></a><br /><a href=\"#content-taranttini\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kzmat\"><img src=\"https://avatars.githubusercontent.com/u/34614358?v=4\" width=\"100px;\" alt=\"Kazuki Matsuo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kazuki Matsuo</b></sub></a><br /><a href=\"#content-kzmat\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/burkybang\"><img src=\"https://avatars.githubusercontent.com/u/927886?v=4\" width=\"100px;\" alt=\"Adam Smith\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Adam Smith</b></sub></a><br /><a href=\"#content-burkybang\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://codekodo.tistory.com\"><img src=\"https://avatars.githubusercontent.com/u/33795856?v=4\" width=\"100px;\" alt=\"Dohyeon Ko\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Dohyeon Ko</b></sub></a><br /><a href=\"#content-k906506\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/vlad99902\"><img src=\"https://avatars.githubusercontent.com/u/67615003?v=4\" width=\"100px;\" alt=\"Vladislav Legkov\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Vladislav Legkov</b></sub></a><br /><a href=\"#content-vlad99902\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://kerolloz.github.io\"><img src=\"https://avatars.githubusercontent.com/u/36763164?v=4\" width=\"100px;\" alt=\"Kerollos Magdy\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Kerollos Magdy</b></sub></a><br /><a href=\"#content-kerolloz\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/erez-lieberman-b90b7219/\"><img src=\"https://avatars.githubusercontent.com/u/3277260?v=4\" width=\"100px;\" alt=\"Erez Lieberman\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Erez Lieberman</b></sub></a><br /><a href=\"#content-erezLieberman\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/breno-macedo-ernani-de-s%C3%A1-110223158/\"><img src=\"https://avatars.githubusercontent.com/u/48841329?v=4\" width=\"100px;\" alt=\"Breno Macedo\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Breno Macedo</b></sub></a><br /><a href=\"#content-breno404\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/JFernando122\"><img src=\"https://avatars.githubusercontent.com/u/40414805?v=4\" width=\"100px;\" alt=\"Fernando Flores\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Fernando Flores</b></sub></a><br /><a href=\"#translation-JFernando122\" title=\"Translation\">🌍</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/rafaelconcept/\"><img src=\"https://avatars.githubusercontent.com/u/43880669?v=4\" width=\"100px;\" alt=\"Rafael Brito\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Rafael Brito</b></sub></a><br /><a href=\"#translation-rafaelconcept\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://emiliano-peralta-portfolio.vercel.app/\"><img src=\"https://avatars.githubusercontent.com/u/63617637?v=4\" width=\"100px;\" alt=\"Emiliano Peralta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Emiliano Peralta</b></sub></a><br /><a href=\"#translation-emiperalta\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://lannex.github.io\"><img src=\"https://avatars.githubusercontent.com/u/7369541?v=4\" width=\"100px;\" alt=\"Shin, SJ\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Shin, SJ</b></sub></a><br /><a href=\"#content-lannex\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.benjaminforster.com\"><img src=\"https://avatars.githubusercontent.com/u/12589522?v=4\" width=\"100px;\" alt=\"Benjamin Forster\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Benjamin Forster</b></sub></a><br /><a href=\"#content-e-e-e\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/DanieleFedeli\"><img src=\"https://avatars.githubusercontent.com/u/37077048?v=4\" width=\"100px;\" alt=\"Daniele Fedeli\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Daniele Fedeli</b></sub></a><br /><a href=\"#content-DanieleFedeli\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/djob195\"><img src=\"https://avatars.githubusercontent.com/u/17146669?v=4\" width=\"100px;\" alt=\"djob195\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>djob195</b></sub></a><br /><a href=\"#content-djob195\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/antspk\"><img src=\"https://avatars.githubusercontent.com/u/78955792?v=4\" width=\"100px;\" alt=\"antspk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>antspk</b></sub></a><br /><a href=\"#content-antspk\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://jjy0821.tistory.com/\"><img src=\"https://avatars.githubusercontent.com/u/88075341?v=4\" width=\"100px;\" alt=\"정진영\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>정진영</b></sub></a><br /><a href=\"#content-jjy821\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kkk-cashwalk\"><img src=\"https://avatars.githubusercontent.com/u/91455122?v=4\" width=\"100px;\" alt=\"kkk-cashwalk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>kkk-cashwalk</b></sub></a><br /><a href=\"#content-kkk-cashwalk\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/apainintheneck\"><img src=\"https://avatars.githubusercontent.com/u/42982186?v=4\" width=\"100px;\" alt=\"apainintheneck\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>apainintheneck</b></sub></a><br /><a href=\"#content-apainintheneck\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/koyanyaroo\"><img src=\"https://avatars.githubusercontent.com/u/9715368?v=4\" width=\"100px;\" alt=\"Fajar Budhi Iswanda\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Fajar Budhi Iswanda</b></sub></a><br /><a href=\"#content-koyanyaroo\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jutiger\"><img src=\"https://avatars.githubusercontent.com/u/97490806?v=4\" width=\"100px;\" alt=\"이주호\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>이주호</b></sub></a><br /><a href=\"#content-jutiger\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/MisterSingh\"><img src=\"https://avatars.githubusercontent.com/u/44462019?v=4\" width=\"100px;\" alt=\"Singh\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Singh</b></sub></a><br /><a href=\"#content-MisterSingh\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Alex-Dumitru\"><img src=\"https://avatars.githubusercontent.com/u/43738450?v=4\" width=\"100px;\" alt=\"Alex Dumitru\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Alex Dumitru</b></sub></a><br /><a href=\"#content-Alex-Dumitru\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/lykhatskyi\"><img src=\"https://avatars.githubusercontent.com/u/18104686?v=4\" width=\"100px;\" alt=\"Anton Lykhatskyi\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Anton Lykhatskyi</b></sub></a><br /><a href=\"#content-lykhatskyi\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/EverythingAvailable\"><img src=\"https://avatars.githubusercontent.com/u/81002379?v=4\" width=\"100px;\" alt=\"sangwonlee\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>sangwonlee</b></sub></a><br /><a href=\"#content-EverythingAvailable\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/euberdeveloper\"><img src=\"https://avatars.githubusercontent.com/u/33126163?v=4\" width=\"100px;\" alt=\"Eugenio Berretta\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Eugenio Berretta</b></sub></a><br /><a href=\"#content-euberdeveloper\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/soranakk\"><img src=\"https://avatars.githubusercontent.com/u/3930307?v=4\" width=\"100px;\" alt=\"soranakk\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>soranakk</b></sub></a><br /><a href=\"#content-soranakk\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/backend-joonyoung\"><img src=\"https://avatars.githubusercontent.com/u/94430145?v=4\" width=\"100px;\" alt=\"고준영\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>고준영</b></sub></a><br /><a href=\"#content-backend-joonyoung\" title=\"Content\">🖋</a> <a href=\"https://github.com/goldbergyoni/nodebestpractices/commits?author=backend-joonyoung\" title=\"Code\">💻</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/GuilhermePortella\"><img src=\"https://avatars.githubusercontent.com/u/59876059?v=4\" width=\"100px;\" alt=\"Guilherme Portella \"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Guilherme Portella </b></sub></a><br /><a href=\"#content-GuilhermePortella\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.youtube.com/channel/UCBxzOQd2v9wWfiMDrf_RQ7A\"><img src=\"https://avatars.githubusercontent.com/u/18497570?v=4\" width=\"100px;\" alt=\"André Esser\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>André Esser</b></sub></a><br /><a href=\"#content-Esser50K\" title=\"Content\">🖋</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/ShiChenCong\"><img src=\"https://avatars.githubusercontent.com/u/22486446?v=4\" width=\"100px;\" alt=\"Scc\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Scc</b></sub></a><br /><a href=\"#translation-ShiChenCong\" title=\"Translation\">🌍</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.mauroaccornero.it\"><img src=\"https://avatars.githubusercontent.com/u/1875822?v=4\" width=\"100px;\" alt=\"Mauro Accornero\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>Mauro Accornero</b></sub></a><br /><a href=\"#content-mauroaccornero\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/no-yan\"><img src=\"https://avatars.githubusercontent.com/u/63000297?v=4\" width=\"100px;\" alt=\"no-yan\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>no-yan</b></sub></a><br /><a href=\"#content-no-yan\" title=\"Content\">🖋</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/hodbauer\"><img src=\"https://avatars.githubusercontent.com/u/17808632?v=4\" width=\"100px;\" alt=\"hodbauer\"style=\"max-width:100px;min-width:100px;\" /><br /><sub style=\"white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\"><b>hodbauer</b></sub></a><br /><a href=\"translation-hodbauer\" title=\"Translation\">🌍</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\n### Steering Committee Emeriti\n\n[Bruno Scheufler](https://github.com/BrunoScheufler)\n<a href=\"https://brunoscheufler.com/\"><img src=\"assets/images/web.svg\" width=\"16\" height=\"16\"></img></a>\n\n💻 full-stack web engineer, Node.js & GraphQL enthusiast\n\n<br/>\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/kyle.png\"/>\n\n[Kyle Martin](https://github.com/js-kyle)\n<a href=\"https://twitter.com/kylemartin_93\"><img src=\"assets/images/twitter.svg\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://www.linkedin.com/in/kylemartinnz\"><img src=\"assets/images/linkedin.svg\" width=\"16\" height=\"16\"></img></a>\n\nFull Stack Developer & Site Reliability Engineer based in New Zealand, interested in web application security, and architecting and building Node.js applications to perform at global scale.\n\n<br/>\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/kevyn.png\"/>\n\n[Kevyn Bruyere](https://github.com/kevynb)\n<a href=\"https://www.linkedin.com/in/kevynbruyere/\"><img src=\"assets/images/linkedin.svg\" width=\"16\" height=\"16\"></img></a>\n\nIndependent full-stack developer with a taste for Ops and automation.\n\n<br/>\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/sagir.png\"/>\n\n[Sagir Khan](https://github.com/sagirk)\n<a href=\"https://twitter.com/sagir_k\"><img src=\"assets/images/twitter.svg\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://linkedin.com/in/sagirk\"><img src=\"assets/images/linkedin.svg\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://sagirk.com\"><img src=\"assets/images/web.svg\" width=\"16\" height=\"16\"></img></a>\n\nDeep specialist in JavaScript and its ecosystem — React, Node.js, TypeScript, GraphQL, MongoDB, pretty much anything that involves JS/JSON in any layer of the system — building products using the web platform for the world’s most recognized brands. Individual Member of the Node.js Foundation.\n"
        },
        {
          "name": "README.polish.md",
          "type": "blob",
          "size": 88.06,
          "content": "[✔]: assets/images/checkbox-small-blue.png\n\n# Node.js - Najlepsze praktyki\n\n<h1 align=\"center\">\n  <img src=\"assets/images/banner-2.jpg\" alt=\"Node.js Best Practices\"/>\n</h1>\n\n<br/>\n\n<div align=\"center\">\n  <img src=\"https://img.shields.io/badge/⚙%20Item%20count%20-%2085%20Best%20Practices-blue.svg\" alt=\"85 items\"/> <img src=\"https://img.shields.io/badge/%F0%9F%93%85%20Last%20update%20-%20November%2012%202019-green.svg\" alt=\"Last update: Oct 12, 2019\"/> <img src=\"https://img.shields.io/badge/ %E2%9C%94%20Updated%20For%20Version%20-%20Node%2012.12.0-brightgreen.svg\" alt=\"Updated for Node 12.12.0\"/>\n</div>\n\n<br/>\n\n[![nodepractices](./assets/images/twitter-s.png)](https://twitter.com/nodepractices/) **Follow us on Twitter!** [**@nodepractices**](https://twitter.com/nodepractices/)\n\n<br/>\n\nPrzeczytaj także w innych językach: [![CN](./assets/flags/CN.png)**CN**](./README.chinese.md), [![BR](./assets/flags/BR.png)**BR**](./README.brazilian-portuguese.md), [![RU](./assets/flags/RU.png)**RU**](./README.russian.md), [![EU](./assets/flags/EU.png)**EU**](./README.basque.md) [(![ES](./assets/flags/ES.png)**ES**, ![FR](./assets/flags/FR.png)**FR**, ![HE](./assets/flags/HE.png)**HE**, ![KR](./assets/flags/KR.png)**KR**, ![TR](./assets/flags/TR.png)**TR** w trakcie! )](#tłumaczenia)\n\n<br/>\n\n###### Zbudowane i utrzymywane przez nasz [Steering Committee](#steering-committee) oraz [Collaborators](#współpracownicy)\n\n# Najnowsze najlepsze praktyki i aktualności\n\n- **✅ Nowa najlepsza praktyka:** 7.1: [Nie blokuj pętli zdarzeń](#7-wersja-robocza-najlepsze-praktyki-dotyczące-wydajności) od Keith Holliday\n\n- **🇷🇺 Rosyjskie tłumaczenie:** Niesamowity Alex Ivanov właśnie opublikował [rosyjskie tłumaczenie](./README.russian.md)\n\n- **Szukamy autorów TypeScript:** chcesz pomóc w tworzeniu przykładów TypeScript? Weź udział, otwierając issue\n\n<br/><br/>\n\n# Witamy! 3 rzeczy, które musisz wiedzieć na początku\n\n**1. W rzeczywistości czytasz dziesiątki najlepszych artykułów na temat Node.js -** to repozytorium jest podsumowaniem i zbiorem najlepszych pozycji na temat najlepszych praktyk Node.js, a także treści napisanych tutaj przez współpracowników\n\n**2. Jest to największa kompilacja, która rośnie z każdym tygodniem -** obecnie prezentowanych jest ponad 80 najlepszych praktyk, przewodników po stylach i wskazówek architektonicznych. Nowe wydania i pull requesty są tworzone codziennie, aby aktualizować tę książkę na żywo. Chcielibyśmy zobaczyć Twój wkład w to, czy naprawiasz błędy w kodzie, pomagasz w tłumaczeniach, czy sugerujesz nowe genialne pomysły. Zobacz nasze [wskazówki dotyczące pisania tutaj](https://github.com/mbiesiad/nodebestpractices/blob/master/.operations/writing-guidelines.polish.md)\n\n**3. Większość najlepszych praktyk ma dodatkowe informacje -** większość pocisków zawiera link **🔗Przeczytaj więcej**, który rozszerza praktykę o przykłady kodu, cytaty z wybranych blogów i więcej informacji\n<br/><br/>\n\n## Spis treści\n\n1. [Praktyki dotyczące struktury projektu (5)](#1-praktyki-dotyczące-struktury-projektu)\n2. [Procedury obsługi błędów (11) ](#2-procedury-obsługi-błędów)\n3. [Praktyki stylu kodu (12) ](#3-praktyki-stylu-kodu)\n4. [Testy i ogólne praktyki jakości (12) ](#4-testy-i-ogólne-praktyki-jakości)\n5. [Przejście do praktyk produkcyjnych (18) ](#5-przejście-do-praktyk-produkcyjnych)\n6. [Praktyki bezpieczeństwa (25)](#6-najlepsze-praktyki-bezpieczeństwa)\n7. [Praktyki wydajnościowe (2) (Work In Progress️ ✍️)](#7-wersja-robocza-najlepsze-praktyki-dotyczące-wydajności)\n\n<br/><br/>\n\n# `1. Praktyki dotyczące struktury projektu`\n\n## ![✔] 1.1 Skonstruuj swoje rozwiązanie według komponentów\n\n**TL;DR:** Najgorszym problemem związanym z dużymi aplikacjami jest utrzymanie ogromnej bazy kodu z setkami zależności - taki monolit spowalnia programistów, którzy próbują wprowadzić nowe funkcje. Zamiast tego podziel kod na części, każdy otrzyma własny folder lub dedykowaną bazę kodów i zapewni, że każda jednostka będzie niewielka i prosta. Odwiedź „Czytaj więcej” poniżej, aby zobaczyć przykłady prawidłowej struktury projektu\n\n**W przeciwnym razie:** Gdy programiści, którzy kodują nowe funkcje, walczą o uświadomienie sobie wpływu ich zmian i boją się zniszczyć inne zależne komponenty - wdrożenia stają się wolniejsze i bardziej ryzykowne. Trudniej jest także skalować, gdy wszystkie jednostki biznesowe nie są rozdzielone\n\n🔗 [**Czytaj więcej: struktura według komponentów**](./sections/projectstructre/breakintcomponents.polish.md)\n\n<br/><br/>\n\n## ![✔] 1.2 Nakładaj warstwy na komponenty, zachowując Express w granicach\n\n**TL;DR:** Każdy komponent powinien zawierać „warstwy” - dedykowany obiekt dla sieci, logiki i kodu dostępu do danych. Nie tylko pozwala to na wyraźne oddzielenie problemów, ale także znacznie ułatwia mockowanie i testowanie systemu. Chociaż jest to bardzo powszechny wzorzec, programiści API mają tendencję do mieszania warstw, przekazując obiekty warstwy internetowej (wymagania Express, res) do logiki biznesowej i warstw danych - dzięki temu aplikacja jest zależna i dostępna tylko przez Express\n\n**W przeciwnym razie:** Nie można uzyskać dostępu do aplikacji, która miesza obiekty internetowe z innymi warstwami, testując kod, zadania CRON i inne obiekty wywołujące inne niż Express\n\n🔗 [**Czytaj więcej: warstwa twojej aplikacji**](./sections/projectstructre/createlayers.polish.md)\n\n<br/><br/>\n\n## ![✔] 1.3 Opakuj typowe narzędzia jako pakiety npm\n\n**TL;DR:** W dużej aplikacji, która stanowi dużą bazę kodu, kluczowe narzędzia, takie jak rejestrator, szyfrowanie i podobne, powinny być owinięte własnym kodem i udostępnione jako prywatne pakiety npm. Pozwala to na dzielenie się nimi między wieloma bazami kodów i projektami\n\n**W przeciwnym razie:** Będziesz musiał wymyślić własne koło wdrażania i zależności\n\n🔗 [**Czytaj więcej: Struktura według funkcji**](./sections/projectstructre/wraputilities.polish.md)\n\n<br/><br/>\n\n## ![✔] 1.4 Oddzielna „aplikacja” i „serwer” Express\n\n**TL;DR:** Unikaj nieprzyjemnego nawyku definiowania całości aplikacji [Express](https://expressjs.com/) w jednym dużym pliku - rozdziel definicję „Express” na co najmniej dwa pliki: deklarację API (app.js) i problemy z siecią (WWW). Aby uzyskać jeszcze lepszą strukturę, znajdź deklarację API w komponentach\n\n**W przeciwnym razie:** Twój interfejs API będzie dostępny do testowania tylko za pośrednictwem połączeń HTTP (wolniejsze i znacznie trudniejsze do generowania raportów zasięgu). Utrzymanie setek linii kodu w jednym pliku prawdopodobnie nie będzie wielką przyjemnością\n\n🔗 [**Czytaj więcej: oddzielna aplikacja „Express” i „serwer”**](./sections/projectstructre/separateexpress.polish.md)\n\n<br/><br/>\n\n## ![✔] 1.5 Używaj konfiguracji przyjaznej środowisku, bezpiecznej i hierarchicznej\n\n**TL;DR:** Idealne i bezbłędne ustawienie konfiguracji powinno zapewnić, że (a) klucze można odczytać z pliku ORAZ ze zmiennych środowiskowych (b) dane wrażliwe są przechowywane poza zatwierdzonym kodem (c) konfiguracja jest hierarchiczna dla łatwiejszego wyszukiwania. Istnieje kilka pakietów, które mogą pomóc zaznaczyć większość z tych pól, takich jak [rc](https://www.npmjs.com/package/rc), [nconf](https://www.npmjs.com/package/nconf), [config](https://www.npmjs.com/package/config) i [convict](https://www.npmjs.com/package/convict)\n\n**W przeciwnym razie:** Niespełnienie któregokolwiek z wymagań konfiguracji po prostu ugrzęźnie w zespole programistów lub DevOps. Prawdopodobnie jedno i drugie\n\n🔗 [**Czytaj więcej: najlepsze praktyki dotyczące konfiguracji**](./sections/projectstructre/configguide.polish.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#spis-treści\">⬆ Wróć na górę</a></p>\n\n# `2. Procedury obsługi błędów`\n\n## ![✔] 2.1 Użyj Async-Await lub promises do obsługi błędów asynchronicznych\n\n**TL;DR:** Obsługa błędów asynchronicznych w stylu wywołania zwrotnego jest prawdopodobnie najszybszą drogą do piekła (znane też jako Piramida zagłady). Najlepszy prezent, jaki możesz dać kodowi, to skorzystanie z renomowanej biblioteki promise lub async-await zamiast tego, co umożliwia znacznie bardziej zwartą i znaną składnię kodu, taką jak try-catch\n\n**W przeciwnym razie:** styl wywołania zwrotnego Node.js, funkcja (błąd, odpowiedź) jest obiecującym sposobem na niemożliwy do utrzymania kod ze względu na połączenie obsługi błędów z przypadkowym kodem, nadmiernym zagnieżdżaniem i niewygodnymi wzorcami kodowania\n\n🔗 [**Czytaj więcej: avoiding callbacks**](./sections/errorhandling/asyncerrorhandling.polish.md)\n\n<br/><br/>\n\n## ![✔] 2.2 Używaj tylko wbudowanego obiektu Error\n\n**TL;DR:** Wiele z nich wyrzuca błędy jako ciąg znaków lub jako niestandardowy typ - komplikuje to logikę obsługi błędów i interoperacyjność między modułami. Niezależnie od tego, czy odrzucisz promise, rzucisz wyjątek, czy wyślesz błąd - użycie tylko wbudowanego obiektu Error (lub obiektu, który rozszerza wbudowany obiekt Error) zwiększy jednolitość i zapobiegnie utracie informacji\n\n**W przeciwnym razie:** Podczas wywoływania jakiegoś komponentu brak pewności, jaki rodzaj błędów w zamian wraca - znacznie utrudnia prawidłowe zarządzanie błędami. Co gorsza, używanie niestandardowych typów do opisywania błędów może prowadzić do utraty krytycznych informacji o błędach, takich jak stack trace!\n\n🔗 [**Czytaj więcej: using the built-in error object**](./sections/errorhandling/useonlythebuiltinerror.polish.md)\n\n<br/><br/>\n\n## ![✔] 2.3 Rozróżnij błędy operacyjne i programistyczne\n\n**TL;DR:** Błędy operacyjne (np. API otrzymało niepoprawne dane wejściowe) odnoszą się do znanych przypadków, w których wpływ błędu jest w pełni zrozumiały i można go starannie rozpatrzyć. Z drugiej strony błąd programisty (np. próba odczytania niezdefiniowanej zmiennej) odnosi się do nieznanych błędów kodu, które zmuszają do płynnego restartu aplikacji\n\n**W przeciwnym razie:** Zawsze możesz ponownie uruchomić aplikację, gdy pojawi się błąd, ale dlaczego zawieść ~5000 użytkowników online z powodu drobnego, przewidywanego błędu operacyjnego? Drugie rozwiązanie nie jest też idealne - utrzymanie aplikacji w stanie, gdy wystąpi nieznany problem (błąd programisty), może prowadzić do nieprzewidzianego zachowania. Rozróżnienie tych dwóch pozwala działać taktownie i stosować zrównoważone podejście oparte na danym kontekście\n\n🔗 [**Czytaj więcej: operational vs programmer error**](./sections/errorhandling/operationalvsprogrammererror.polish.md)\n\n<br/><br/>\n\n## ![✔] 2.4 Obsługuj błędy centralnie, a nie w oprogramowaniu pośrednim Express\n\n**TL;DR:** Obsługa błędów związanych z logiką, taką jak poczta do administratora i rejestrowanie, powinna być zamknięta w dedykowanym i scentralizowanym obiekcie, do którego wywoływane są wszystkie punkty końcowe (np. Express middleware, zadania cron, testy jednostkowe), gdy pojawia się błąd\n\n**W przeciwnym razie:** Brak obsługi błędów w jednym miejscu prowadzi do duplikacji kodu i prawdopodobnie do nieprawidłowej obsługi błędów\n\n🔗 [**Czytaj więcej: handling errors in a centralized place**](./sections/errorhandling/centralizedhandling.polish.md)\n\n<br/><br/>\n\n## ![✔] 2.5 Dokumentuj błędy interfejsu API za pomocą Swagger lub GraphQL\n\n**TL;DR:** Poinformuj osoby odwołujące się do interfejsu API, które błędy mogą w zamian otrzymać, aby mogły je starannie obsługiwać bez awarii. W przypadku interfejsów API RESTful odbywa się to zwykle w ramach frameworków takich jak Swagger. Jeśli korzystasz z GraphQL, możesz również wykorzystać swój schemat i komentarze.\n\n**W przeciwnym razie:** Klient API może zdecydować o awarii i ponownym uruchomieniu tylko dlatego, że otrzymał błąd, którego nie mógł zrozumieć. Uwaga: osobą wywołującą interfejs API możesz być Ty (bardzo typowe w środowisku mikrousług)\n\n🔗 [**Czytaj więcej: documenting API errors in Swagger or GraphQL**](./sections/errorhandling/documentingusingswagger.polish.md)\n\n<br/><br/>\n\n## ![✔] 2.6 Opuść ten proces z wdziękiem, gdy do miasta przyjedzie nieznajomy\n\n**TL;DR:** Gdy wystąpi nieznany błąd (błąd programisty, patrz najlepsza praktyka 2.3) - nie ma pewności co do kondycji aplikacji. Powszechna praktyka sugeruje ostrożne ponowne uruchomienie procesu za pomocą narzędzia do zarządzania procesami, takiego jak [Forever](https://www.npmjs.com/package/forever) lub [PM2](http://pm2.keymetrics.io/)\n\n**W przeciwnym razie:** Gdy wystąpi nieznany wyjątek, niektóre obiekty mogą znajdować się w stanie wadliwym (np. Emiter zdarzeń, który jest używany globalnie i nie uruchamia już zdarzeń z powodu pewnych wewnętrznych awarii), a wszystkie przyszłe żądania mogą zawieść lub zachowywać się szaleńczo\n\n🔗 [**Czytaj więcej: shutting the process**](./sections/errorhandling/shuttingtheprocess.polish.md)\n\n<br/><br/>\n\n## ![✔] 2.7 Użyj dojrzałego programu rejestrującego, aby zwiększyć widoczność błędów\n\n**TL;DR:** Zestaw dojrzałych narzędzi do rejestrowania, takich jak [Winston](https://www.npmjs.com/package/winston), [Bunyan](https://github.com/trentm/node-bunyan), [Log4js](http://stritti.github.io/log4js/) lub [Pino](https://github.com/pinojs/pino), przyspieszy wykrywanie błędów i zrozumienie. Więc zapomnij o console.log\n\n**W przeciwnym razie:** Przeglądanie w pliku console.logs lub ręcznie przez niechlujny plik tekstowy bez korzystania z narzędzi zapytań lub porządnej przeglądarki dziennika może być zajęciem w pracy do późna\n\n🔗 [**Czytaj więcej: using a mature logger**](./sections/errorhandling/usematurelogger.polish.md)\n\n<br/><br/>\n\n## ![✔] 2.8 Przepływy błędów testowych przy użyciu ulubionego środowiska testowego\n\n**TL;DR:** Niezależnie od tego, czy jest to profesjonalna automatyczna kontrola jakości, czy zwykłe ręczne testowanie programisty - upewnij się, że Twój kod nie tylko spełnia pozytywne scenariusze, ale także obsługuje i zwraca odpowiednie błędy. Ramy testowe, takie jak Mocha i Chai, mogą sobie z tym poradzić (zobacz przykłady kodu w \"Gist popup\")\n\n**W przeciwnym razie:** Bez testowania, automatycznie lub ręcznie, nie można polegać na kodzie, który zwraca prawidłowe błędy. Bez znaczących błędów - nie ma obsługi błędów\n\n🔗 [**Czytaj więcej: testing error flows**](./sections/errorhandling/testingerrorflows.polish.md)\n\n<br/><br/>\n\n## ![✔] 2.9 Odkryj błędy i przestoje przy użyciu produktów APM\n\n**TL;DR:** Produkty do monitorowania i wydajności (np. APM) proaktywnie oceniają twoją bazę kodu lub interfejs API, aby mogły automatycznie zaznaczać błędy, awarie i spowalniające brakujące części\n\n**W przeciwnym razie:** Możesz poświęcić wiele wysiłku na pomiar wydajności interfejsu API i przestojów, prawdopodobnie nigdy nie będziesz wiedział, jakie są twoje najwolniejsze części kodu w rzeczywistym scenariuszu i jak wpływają one na UX\n\n🔗 [**Czytaj więcej: using APM products**](./sections/errorhandling/apmproducts.polish.md)\n\n<br/><br/>\n\n## ![✔] 2.10 Złap nieobsługiwane odrzucenia promise\n\n**TL;DR:** Każdy wyjątek zgłoszony w ramach promise zostanie połknięty i odrzucony, chyba że programista nie zapomni o jawnej obsłudze. Nawet jeśli Twój kod jest subskrybowany w `process.uncaughtException`! Sforsuj to, rejestrując się na wydarzeniu `process.unhandledRejection`\n\n**W przeciwnym razie:** Twoje błędy zostaną połknięte i nie pozostawiają śladu. Nie ma się o co martwić\n\n🔗 [**Czytaj więcej: catching unhandled promise rejection**](./sections/errorhandling/catchunhandledpromiserejection.polish.md)\n\n<br/><br/>\n\n## ![✔] 2.11 Szybko się nie powiedzie, sprawdź poprawność argumentów za pomocą dedykowanej biblioteki\n\n**TL;DR:** Powinno to być częścią najlepszych praktyk Express - Assert API, aby uniknąć nieprzyjemnych błędów, które później będą znacznie trudniejsze do wyśledzenia. Kod weryfikacyjny jest zwykle uciążliwy, chyba że używasz bardzo fajnej biblioteki pomocniczej, takiej jak Joi\n\n**W przeciwnym razie:** Rozważ to - twoja funkcja oczekuje argumentu liczbowego „Discount”, który wywołujący zapomina przekazać, a następnie kod sprawdza, czy Discount!=0 (kwota dozwolonego discounta jest większa od zera), a następnie pozwoli użytkownikowi cieszyć się discountem. OMG, co za paskudny błąd. Widzisz to?\n\n🔗 [**Czytaj więcej: failing fast**](./sections/errorhandling/failfast.polish.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#spis-treści\">⬆ Wróć na górę</a></p>\n\n# `3. Praktyki stylu kodu`\n\n## ![✔] 3.1 Użyj ESLint\n\n**TL;DR:** [ESLint](https://eslint.org) jest de facto standardem sprawdzania możliwych błędów kodu i ustalania stylu kodu, nie tylko w celu zidentyfikowania drobiazgowych problemów z odstępami, ale także w celu wykrycia poważnych anty-wzorców kodu, takich jak programiści zgłaszający błędy bez klasyfikacji. Chociaż ESLint może automatycznie naprawiać style kodu, inne narzędzia, takie jak [prettier](https://www.npmjs.com/package/prettier) i [beautify](https://www.npmjs.com/package/js-beautify) mają większą moc formatowania poprawki i współpracują z ESLint\n\n**W przeciwnym razie:** Programiści skoncentrują się na żmudnych odstępach i problemach z szerokością linii, a czas może zostać zmarnowany na przemyślenie stylu kodu projektu\n\n🔗 [**Czytaj więcej: Using ESLint and Prettier**](./sections/codestylepractices/eslint_prettier.polish.md)\n\n<br/><br/>\n\n## ![✔] 3.2 Specyficzne wtyczki Node.js\n\n**TL;DR:** Oprócz standardowych reguł ESLint obejmujących vanilla JavaScript, dodaj wtyczki Node.js, takie jak [eslint-plugin-node](https://www.npmjs.com/package/eslint-plugin-node), [eslint-plugin- mocha](https://www.npmjs.com/package/eslint-plugin-mocha) i [eslint-plugin-node-security](https://www.npmjs.com/package/eslint-plugin-security)\n\n**W przeciwnym razie:** Wiele wadliwych wzorców kodu Node.js może uciekać pod radarem. Na przykład programiści mogą wymagać plików (zmiennaAsPath) ze zmienną podaną jako ścieżka, która umożliwia atakującym wykonanie dowolnego skryptu JS. Linters Node.js mogą wcześnie wykrywać takie wzorce i narzekać\n\n<br/><br/>\n\n## ![✔] 3.3 Uruchom nawiasy klamrowe Codeblock na tej samej linii\n\n**TL;DR:** Nawiasy klamrowe otwierające bloki kodu powinny znajdować się w tym samym wierszu, co instrukcja otwierająca\n\n### Przykład kodu\n\n```javascript\n// Do\nfunction someFunction() {\n  // code block\n}\n\n// Avoid\nfunction someFunction()\n{\n  // code block\n}\n```\n\n**W przeciwnym razie:** Odstąpienie od tej najlepszej praktyki może prowadzić do nieoczekiwanych rezultatów, jak widać w poniższym wątku StackOverflow:\n\n🔗 [**Czytaj więcej:** \"Why do results vary based on curly brace placement?\" (StackOverflow)](https://stackoverflow.com/questions/3641519/why-does-a-results-vary-based-on-curly-brace-placement)\n\n<br/><br/>\n\n## ![✔] 3.4 Oddziel swoje deklaracje poprawnie\n\nBez względu na to, czy używasz średników, czy też nie rozdzielasz swoich instrukcji, znajomość typowych pułapek niewłaściwych podziałów linii lub automatycznego wstawiania średników pomoże Ci wyeliminować regularne błędy składniowe.\n\n**TL;DR:** Użyj ESLint, aby zyskać świadomość problemów związanych z separacją. [Prettier](https://prettier.io/) lub [Standardjs](https://standardjs.com/) może automatycznie rozwiązać te issues.\n\n**W przeciwnym razie:** Jak widać w poprzedniej sekcji, interpreter JavaScript automatycznie dodaje średnik na końcu instrukcji, jeśli nie istnieje, lub uważa instrukcję za niezakończoną tam, gdzie powinna, co może prowadzić do niepożądanych wyników. Możesz używać przypisań i unikać używania natychmiastowych wywoływanych wyrażeń funkcyjnych, aby zapobiec większości nieoczekiwanych błędów.\n\n### Przykład Kodu\n\n```javascript\n// Do\nfunction doThing() {\n    // ...\n}\n\ndoThing()\n\n// Do\n\nconst items = [1, 2, 3]\nitems.forEach(console.log)\n\n// Avoid — throws exception\nconst m = new Map()\nconst a = [1,2,3]\n[...m.values()].forEach(console.log)\n> [...m.values()].forEach(console.log)\n>  ^^^\n> SyntaxError: Unexpected token ...\n\n// Avoid — throws exception\nconst count = 2 // it tries to run 2(), but 2 is not a function\n(function doSomething() {\n  // do something amazing\n}())\n// put a semicolon before the immediate invoked function, after the const definition, save the return value of the anonymous function to a variable or avoid IIFEs alltogether\n```\n\n🔗 [**Czytaj więcej:** \"Semi ESLint rule\"](https://eslint.org/docs/rules/semi)\n🔗 [**Czytaj więcej:** \"No unexpected multiline ESLint rule\"](https://eslint.org/docs/rules/no-unexpected-multiline)\n\n<br/><br/>\n\n## ![✔] 3.5 Nazwij swoje funkcje\n\n**TL;DR:** Nazwij wszystkie funkcje, w tym zamknięcia i połączenia zwrotne. Unikaj anonimowych funkcji. Jest to szczególnie przydatne podczas profilowania aplikacji Node. Nazewnictwo wszystkich funkcji pozwoli ci łatwo zrozumieć, na co patrzysz podczas sprawdzania migawki pamięci\n\n**W przeciwnym razie:** Debugowanie problemów produkcyjnych przy użyciu zrzutu pamięci (migawki pamięci) może stać się trudnym zadaniem, ponieważ zauważysz znaczne zużycie pamięci przez funkcje anonimowe\n\n<br/><br/>\n\n## ![✔] 3.6 Użyj konwencji nazewnictwa dla zmiennych, stałych, funkcji i klas\n\n**TL;DR:** Użyj **_lowerCamelCase_** podczas nazywania stałych, zmiennych i funkcji oraz **_UpperCamelCase_** (również pierwsza litera) podczas nazywania klas. Pomoże Ci to łatwo odróżnić zwykłe zmienne / funkcje od klas wymagających tworzenia instancji. Używaj opisowych nazw, ale staraj się, aby były krótkie\n\n**W przeciwnym razie:** JavaScript jest jedynym językiem na świecie, który umożliwia bezpośrednie wywoływanie konstruktora („klasy”) bez uprzedniego jego tworzenia. W konsekwencji klasy i konstruktory funkcji są zróżnicowane, zaczynając od UpperCamelCase\n\n### 3.6 Przykład kodu\n\n```javascript\n// for class name we use UpperCamelCase\nclass SomeClassExample {}\n\n// for const names we use the const keyword and lowerCamelCase\nconst config = {\n  key: \"value\",\n};\n\n// for variables and functions names we use lowerCamelCase\nlet someVariableExample = \"value\";\nfunction doSomething() {}\n```\n\n<br/><br/>\n\n## ![✔] 3.7 Wolę const nad let. Porzuć var\n\n**TL;DR:** Używanie `const` oznacza, że po przypisaniu zmiennej nie można jej ponownie przypisać. Preferowanie `const` pomoże ci nie ulec pokusie użycia tej samej zmiennej do różnych zastosowań i sprawi, że twój kod będzie wyraźniejszy. Jeśli zmienna wymaga ponownego przypisania, na przykład w pętli for, użyj `let`, aby ją zadeklarować. Innym ważnym aspektem „let” jest to, że zmienna zadeklarowana przy użyciu tej zmiennej jest dostępna tylko w zakresie bloku, w którym została zdefiniowana. `var` ma zasięg działania, a nie blok, i [nie powinien być używany w ES6](https://hackernoon.com/why-you-shouldnt-use-var-anymore-f109a58b9b70) teraz masz `const` i `let` do Twojej dyspozycji\n\n**W przeciwnym razie:** Debugowanie staje się znacznie bardziej kłopotliwe, gdy podąża się za często zmieniającą się zmienną\n\n🔗 [**Czytaj więcej: JavaScript ES6+: var, let, or const?** ](https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75)\n\n<br/><br/>\n\n## ![✔] 3.8 Wymagaj najpierw modułów, a nie funkcji wewnętrznych\n\n**TL;DR:** Wymagaj modułów na początku każdego pliku, przed dowolnymi funkcjami i poza nimi. Ta prosta najlepsza praktyka nie tylko pomoże ci łatwo i szybko określić zależności pliku na samej górze, ale także pozwoli uniknąć kilku potencjalnych problemów\n\n**W przeciwnym razie:** Wymagania są uruchamiane synchronicznie przez Node.js. Jeśli są wywoływane z funkcji, może blokować obsługę innych żądań w bardziej krytycznym momencie. Ponadto, jeśli wymagany moduł lub dowolna z jego zależności zgłasza błąd i powoduje awarię serwera, najlepiej dowiedzieć się o nim jak najszybciej, co może nie mieć miejsca, jeśli moduł ten jest wymagany z funkcji\n\n<br/><br/>\n\n## ![✔] 3.9 Wymagaj modułów według folderów, a nie bezpośrednio plików\n\n**TL;DR:** Podczas opracowywania modułu / biblioteki w folderze umieść plik index.js, który ujawnia elementy wewnętrzne modułu, aby każdy konsument mógł przez niego przejść. Służy to jako „interfejs” do modułu i ułatwia przyszłe zmiany bez zerwania umowy\n\n**W przeciwnym razie:** Zmiana wewnętrznej struktury plików lub podpisu może uszkodzić interfejs z klientami\n\n### 3.9 Przykład kodu\n\n```javascript\n// Do\nmodule.exports.SMSProvider = require(\"./SMSProvider\");\nmodule.exports.SMSNumberResolver = require(\"./SMSNumberResolver\");\n\n// Avoid\nmodule.exports.SMSProvider = require(\"./SMSProvider/SMSProvider.js\");\nmodule.exports.SMSNumberResolver = require(\"./SMSNumberResolver/SMSNumberResolver.js\");\n```\n\n<br/><br/>\n\n## ![✔] 3.10 Używaj operatora `===`\n\n**TL;DR:** Preferuj operator ścisłej równości `===` zamiast słabszego abstrakcyjnego operatora równości `==`. `==` porówna dwie zmienne po przekształceniu ich we wspólny typ. W `===` nie ma konwersji typu i obie zmienne muszą być tego samego typu, aby były równe\n\n**W przeciwnym razie:** Nierówne zmienne mogą zwracać wartość true w porównaniu z operatorem `==`\n\n### 3.10 Przykład kodu\n\n```javascript\n\"\" == \"0\"; // false\n0 == \"\"; // true\n0 == \"0\"; // true\n\nfalse == \"false\"; // false\nfalse == \"0\"; // true\n\nfalse == undefined; // false\nfalse == null; // false\nnull == undefined; // true\n\n\" \\t\\r\\n \" == 0; // true\n```\n\nWszystkie powyższe instrukcje zwrócą wartość false, jeśli zostaną użyte z `===`\n\n<br/><br/>\n\n## ![✔] 3.11 Użyj Async Await, unikaj połączeń zwrotnych\n\n**TL;DR:** Node 8 LTS teraz ma pełne wsparcie dla Async-await. Jest to nowy sposób radzenia sobie z kodem asynchronicznym, który zastępuje wywołania zwrotne i obiecuje. Oczekiwanie na asynchronizację nie jest blokowane i sprawia, że kod asynchroniczny wygląda na synchroniczny. Najlepszym prezentem, jaki możesz dać kodowi, jest użycie funkcji async-await, która zapewnia znacznie bardziej zwartą i znaną składnię kodu, taką jak try-catch\n\n**W przeciwnym razie:** Obsługa błędów asynchronicznych w stylu wywołania zwrotnego jest prawdopodobnie najszybszą drogą do piekła - ten styl zmusza do sprawdzania błędów, radzenia sobie z dziwnym zagnieżdżaniem kodu i utrudnia uzasadnienie przepływu kodu\n\n🔗[**Czytaj więcej:** Guide to async await 1.0](https://github.com/yortus/asyncawait)\n\n<br/><br/>\n\n## ![✔] 3.12 Użyj wyrażeń arrow function (=>)\n\n**TL;DR:** Chociaż zaleca się stosowanie asynchronicznego oczekiwania i unikania parametrów funkcji w przypadku starszych interfejsów API, które akceptują promise lub wywołania zwrotne - funkcje strzałek sprawiają, że struktura kodu jest bardziej zwarta i zachowuje kontekst leksykalny funkcji root (np. `this`)\n\n**W przeciwnym razie:** Dłuższy kod (w funkcjach ES5) jest bardziej podatny na błędy i trudny do odczytania\n\n🔗 [**Czytaj więcej: It’s Time to Embrace Arrow Functions**](https://medium.com/javascript-scene/familiarity-bias-is-holding-you-back-its-time-to-embrace-arrow-functions-3d37e1a9bb75)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#spis-treści\">⬆ Wróć na górę</a></p>\n\n# `4. Testy i ogólne praktyki jakości`\n\n## ![✔] 4.1 Przynajmniej napisz testowanie API (komponentu)\n\n**TL;DR:** Większość projektów po prostu nie ma żadnych automatycznych testów z powodu krótkich harmonogramów lub często „projekt testowy” wymykał się spod kontroli i został porzucony. Z tego powodu ustal priorytetyzację i zacznij od testowania interfejsu API, który jest najłatwiejszym sposobem pisania i zapewnia większy zasięg niż testowanie jednostkowe (możesz nawet tworzyć testy API bez kodu za pomocą narzędzi takich jak [Postman](https://www.getpostman.com/). Następnie, jeśli masz więcej zasobów i czasu, kontynuuj zaawansowane typy testów, takie jak testy jednostkowe, testy DB, testy wydajności itp.\n\n**W przeciwnym razie:** Możesz spędzać długie dni na pisaniu testów jednostkowych, aby dowiedzieć się, że masz tylko 20% zasięgu systemu\n\n<br/><br/>\n\n## ![✔] 4.2 Dołącz 3 części do każdej nazwy testu\n\n**TL;DR:** Spraw, aby test mówił na poziomie wymagań, aby był zrozumiały również dla inżynierów i programistów kontroli jakości, którzy nie znają wewnętrznych elementów kodu. Podaj w nazwie testu, co jest testowane (testowana jednostka), w jakich okolicznościach i jaki jest oczekiwany wynik\n\n**W przeciwnym razie:** Wdrożenie właśnie nie powiodło się, test o nazwie „Dodaj produkt” nie powiódł się. Czy to mówi ci, co dokładnie działa nieprawidłowo?\n\n🔗 [**Czytaj więcej: Include 3 parts in each test name**](./sections/testingandquality/3-parts-in-name.polish.md)\n\n<br/><br/>\n\n## ![✔] 4.3 Testy struktury według wzorca AAA\n\n**TL;DR:** Ustrukturyzuj swoje testy za pomocą 3 dobrze oddzielonych sekcji: Arrange, Act & Assert (AAA). Pierwsza część obejmuje konfigurację testu, następnie wykonanie testowanego urządzenia i wreszcie fazę asercji. Przestrzeganie tej struktury gwarantuje, że czytelnik nie poświęci mózgu procesora na zrozumienie planu testu\n\n**W przeciwnym razie:** Nie tylko spędzasz długie codzienne godziny na zrozumieniu głównego kodu, ale także to, co powinno być prostą częścią dnia (testowanie) rozciąga Twój mózg\n\n🔗 [**Czytaj więcej: Structure tests by the AAA pattern**](./sections/testingandquality/aaa.polish.md)\n\n<br/><br/>\n\n## ![✔] 4.4 Wykryj problemy z kodem za pomocą lintera\n\n**TL;DR:** Użyj lintera kodu, aby sprawdzić podstawową jakość i wcześnie wykryć anty-wzorce. Uruchom go przed jakimkolwiek testem i dodaj jako git-hook przed zatwierdzeniem, aby zminimalizować czas potrzebny na sprawdzenie i naprawienie dowolnego problemu. Sprawdź także [Część 3](#3-praktyki-stylu-kodu) w części Praktyki stylu kodu\n\n**W przeciwnym razie:** Możesz przekazać kod anty-wzorcowy i potencjalnie podatny na atak do środowiska produkcyjnego.\n\n<br/><br/>\n\n## ![✔] 4.5 Unikaj globalnych urządzeń testowych i seeds, dodawaj dane na test\n\n**TL;DR:** Aby zapobiec sprzężeniu testów i łatwo uzasadnić przebieg testu, każdy test powinien dodawać i działać na swoim własnym zestawie wierszy DB. Ilekroć test wymaga wyciągnięcia lub założenia istnienia niektórych danych DB - musi jawnie dodać te dane i unikać mutowania jakichkolwiek innych rekordów\n\n**W przeciwnym razie:** Rozważmy scenariusz, w którym wdrożenie zostało przerwane z powodu nieudanych testów, zespół zamierza teraz poświęcić cenny czas na dochodzenie, które kończy się smutnym wnioskiem: system działa dobrze, testy jednak przeszkadzają sobie nawzajem i przerywają kompilację\n\n🔗 [**Czytaj więcej: Avoid global test fixtures**](./sections/testingandquality/avoid-global-test-fixture.polish.md)\n\n<br/><br/>\n\n## ![✔] 4.6 Nieustannie sprawdzaj wrażliwe zależności\n\n**TL;DR:** Nawet najbardziej renomowane zależności, takie jak Express, mają znane luki w zabezpieczeniach. Można to łatwo oswoić za pomocą narzędzi społecznościowych i komercyjnych, takich jak 🔗 [npm audit](https://docs.npmjs.com/cli/audit) i 🔗 [snyk.io](https://snyk.io), które mogą być wywoływane z twojego CI na każdej kompilacji\n\n**W przeciwnym razie:** Utrzymywanie kodu w czystości przed lukami bez dedykowanych narzędzi będzie wymagało ciągłego śledzenia publikacji online na temat nowych zagrożeń. Dość nudne\n\n<br/><br/>\n\n## ![✔] 4.7 Oznacz swoje testy\n\n**TL;DR:** Różne testy muszą być uruchamiane w różnych scenariuszach: quick smoke, IO-less, testy powinny być uruchamiane, gdy programista zapisuje lub zatwierdza plik, pełne kompleksowe testy zwykle uruchamiane są po przesłaniu nowego pull requesta itp. Można to osiągnąć poprzez oznaczenie testów słowami kluczowymi takimi jak #cold #api #sanity, aby można było grepować za pomocą uprzęży testującej i wywołać pożądany podzbiór. Na przykład w ten sposób można wywoływać tylko grupę testową rozsądku [Mocha](https://mochajs.org/): mocha --grep 'sanity'\n\n**W przeciwnym razie:** Uruchamianie wszystkich testów, w tym testów, które wykonują dziesiątki zapytań DB, za każdym razem, gdy programista wprowadzi małą zmianę, może to być bardzo powolne i powstrzymuje programistów przed uruchomieniem testów\n\n<br/><br/>\n\n## ![✔] 4.8 Sprawdź zasięg testu, pomaga zidentyfikować nieprawidłowe wzorce testowe\n\n**TL;DR:** Narzędzia pokrycia kodu, takie jak [Istanbul](https://github.com/istanbuljs/istanbuljs) / [NYC](https://github.com/istanbuljs/nyc) są świetne z 3 powodów: przychodzi za darmo (bez wysiłku jest niezbędny do skorzystania z tych raportów), pomaga zidentyfikować zmniejszenie zasięgu testowania, a na koniec podkreśla niedopasowania testowania: patrząc na kolorowe raporty pokrycia kodu można zauważyć, na przykład, obszary kodu, które nigdy nie są testowane jak klauzule catch (co oznacza, że testy wywołują tylko szczęśliwe ścieżki, a nie zachowanie aplikacji w przypadku błędów). Ustaw na niepowodzenia kompilacji, jeśli zasięg spadnie poniżej określonego progu\n\n**W przeciwnym razie:** Nie będzie żadnych zautomatyzowanych danych informujących, kiedy duża część kodu nie jest objęta testowaniem\n\n<br/><br/>\n\n## ![✔] 4.9 Sprawdź nieaktualne pakiety\n\n**TL;DR:** Użyj preferowanego narzędzia (np. „npm outdated” lub [npm-check-updates](https://www.npmjs.com/package/npm-check-updates), aby wykryć zainstalowane pakiety, które są nieaktualne, wstrzyknij to w pipeline CI, a nawet zbuduj w trudnym scenariuszu. Na przykład poważnym scenariuszem może być sytuacja, gdy zainstalowany pakiet ma 5 łatek zatwierdzeń (np. Wersja lokalna to 1.3.1, a wersja repozytorium to 1.3.8) lub jest oznaczony jako przestarzałe przez jego autora - zabije kompilację i uniemożliwi wdrożenie tej wersji\n\n**W przeciwnym razie:** Produkcja będzie uruchamiać pakiety, które zostały wyraźnie oznaczone przez autora jako ryzykowne\n\n<br/><br/>\n\n## ![✔] 4.10 Do testowania e2e używaj env zbliżonego do produkcji\n\n**TL;DR:** Testy end-to-end (e2e), które obejmują dane na żywo, były najsłabszym ogniwem procesu CI, ponieważ zależy to od wielu ciężkich usług, takich jak DB. Skorzystaj ze środowiska, które jest jak najbardziej zbliżone do Twojej rzeczywistej produkcji, jak a-continue\n\n**W przeciwnym razie:** Bez zespołów tworzących dokery muszą utrzymywać testową bazę danych dla każdego środowiska testowego, w tym na komputerach programistów, synchronizuj wszystkie te bazy danych, aby wyniki testów nie różniły się w zależności od środowiska\n\n<br/><br/>\n\n## ![✔] 4.11 Refaktoryzuj regularnie za pomocą narzędzi do analizy statycznej\n\n**TL;DR:** Korzystanie z narzędzi analizy statycznej pomaga, zapewniając obiektywne sposoby poprawy jakości kodu i utrzymując kod w łatwości konserwacji. Możesz dodać narzędzia analizy statycznej do kompilacji CI, aby zawieść, gdy wykryje code smells. Jego głównymi zaletami w stosunku do zwykłego szarpania jest możliwość kontroli jakości w kontekście wielu plików (np. wykrywanie duplikacji), przeprowadzania zaawansowanej analizy (np. złożoności kodu) oraz śledzenia historii i postępu problemów z kodem. Dwa przykłady narzędzi, których możesz użyć, to [Sonarqube](https://www.sonarqube.org/) (2600+ [gwiazdek](https://github.com/SonarSource/sonarqube)) i [Code Climate](https://codeclimate.com/) (1500+ [gwiazdek](https://github.com/codeclimate/codeclimate)).\n\n**W przeciwnym razie:** Przy złej jakości kodu błędy i wydajność zawsze będą stanowić problem, którego nie będzie w stanie naprawić żadna nowa błyszcząca biblioteka ani najnowocześniejsze funkcje\n\n🔗 [**Czytaj więcej: Refactoring!**](./sections/testingandquality/refactoring.polish.md)\n\n<br/><br/>\n\n## ![✔] 4.12 Ostrożnie wybierz swoją platformę CI (Jenkins vs CircleCI vs Travis vs Reszta świata)\n\n**TL;DR:** Twoja platforma ciągłej integracji (CICD) będzie hostować wszystkie narzędzia wysokiej jakości (np. test, lint), więc powinna mieć żywy ekosystem wtyczek. [Jenkins](https://jenkins.io/) był domyślny dla wielu projektów, ponieważ ma największą społeczność wraz z bardzo potężną platformą w cenie złożonej konfiguracji, która wymaga stromej krzywej uczenia się. Obecnie znacznie łatwiej jest skonfigurować rozwiązanie CI za pomocą narzędzi SaaS, takich jak [CircleCI](https://circleci.com) i innych. Narzędzia te umożliwiają stworzenie elastycznego potoku CI bez konieczności zarządzania całą infrastrukturą. Ostatecznie jest to kompromis między wytrzymałością a szybkością - wybierz stronę ostrożnie\n\n**W przeciwnym razie:** Wybranie jakiegoś niszowego dostawcy może spowodować zablokowanie użytkownika, gdy będzie potrzebne zaawansowane dostosowanie. Z drugiej strony pójście z Jenkinsem może skrócić cenny czas na konfigurację infrastruktury\n\n🔗 [**Czytaj więcej: Choosing CI platform**](./sections/testingandquality/citools.polish.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#spis-treści\">⬆ Powrót do góry</a></p>\n\n# `5. Przejście do praktyk produkcyjnych`\n\n## ![✔] 5.1. Monitoring\n\n**TL;DR:** Monitorowanie to gra polegająca na wykrywaniu problemów, zanim zrobią to klienci - oczywiście należy nadać niespotykane znaczenie. Rynek jest przytłoczony ofertami, dlatego rozważ rozpoczęcie od zdefiniowania podstawowych wskaźników, których należy przestrzegać (moje sugestie w środku), a następnie przejrzyj dodatkowe wymyślne funkcje i wybierz rozwiązanie, które zaznacza wszystkie pola. Kliknij „The Gist” poniżej, aby wyświetlić przegląd rozwiązań\n\n**W przeciwnym razie:** Awaria === rozczarowani klienci. Proste\n\n🔗 [**Czytaj więcej: Monitoring!**](./sections/production/monitoring.polish.md)\n\n<br/><br/>\n\n## ![✔] 5.2. Zwiększ przejrzystość za pomocą inteligentnego rejestrowania\n\n**TL;DR:** Dzienniki mogą być głupim magazynem instrukcji debugowania lub aktywować piękny pulpit nawigacyjny, który opowiada historię Twojej aplikacji. Zaplanuj swoją platformę rejestrowania od pierwszego dnia: w jaki sposób dzienniki są gromadzone, przechowywane i analizowane, aby zapewnić, że pożądane informacje (np. poziom błędu, po całej transakcji za pośrednictwem usług i serwerów itp.) mogą być naprawdę wydobyte\n\n**W przeciwnym razie:** W rezultacie pojawia się czarna skrzynka, o której trudno uzasadnić, a następnie zaczynasz ponownie pisać wszystkie instrukcje rejestrowania, aby dodać dodatkowe informacje\n\n🔗 [**Czytaj więcej: Increase transparency using smart logging**](./sections/production/smartlogging.polish.md)\n\n<br/><br/>\n\n## ![✔] 5.3. Deleguj wszystko, co możliwe (np. Gzip, SSL) na zwrotny serwer proxy\n\n**TL;DR:** Node jest strasznie kiepski w wykonywaniu zadań intensywnie wykorzystujących procesor, takich jak gzipping, zakończenie SSL itp. Zamiast tego należy używać „rzeczywistych” usług oprogramowania pośredniego, takich jak nginx, HAproxy lub usług dostawcy w chmurze\n\n**W przeciwnym razie:** Twój słaby pojedynczy wątek pozostanie zajęty wykonywaniem zadań infrastrukturalnych zamiast zajmowania się rdzeniem aplikacji, a wydajność odpowiednio się obniży\n\n🔗 [**Czytaj więcej: Delegate anything possible (e.g. gzip, SSL) to a reverse proxy**](./sections/production/delegatetoproxy.polish.md)\n\n<br/><br/>\n\n## ![✔] 5.4. Zablokuj zależności\n\n**TL;DR:** Twój kod musi być identyczny we wszystkich środowiskach, ale zadziwiająco npm pozwala domyślnie dryfować zależnościom między środowiskami - podczas instalowania pakietów w różnych środowiskach próbuje pobrać najnowszą wersję łatek. Aby temu zaradzić, użyj plików konfiguracyjnych npm, .npmrc, które każą każdemu środowisku zapisać dokładną (nie najnowszą) wersję każdego pakietu. Alternatywnie, dla dokładniejszej kontroli grained, użyj „npm shrinkwrap”. \\ \\* Aktualizacja: od NPM5 zależności są domyślnie zablokowane. Nowy menedżer pakietów w mieście, Yarn, również domyślnie nas objął\n\n**W przeciwnym razie:** Dział kontroli jakości dokładnie przetestuje kod i zatwierdzi wersję, która będzie zachowywać się inaczej w środowisku produkcyjnym. Co gorsza, różne serwery w tym samym klastrze produkcyjnym mogą uruchamiać inny kod\n\n🔗 [**Czytaj więcej: Lock dependencies**](./sections/production/lockdependencies.polish.md)\n\n<br/><br/>\n\n## ![✔] 5.5. Zabezpiecz czas pracy bez przestojów za pomocą odpowiedniego narzędzia\n\n**TL;DR:** Proces musi trwać i uruchamiać się ponownie w przypadku awarii. W przypadku prostych scenariuszy narzędzia do zarządzania procesami, takie jak PM2, mogą być wystarczające, ale w dzisiejszym świecie „zadokowanym” należy również wziąć pod uwagę narzędzia do zarządzania klastrami\n\n**W przeciwnym razie:** Uruchomienie dziesiątek instancji bez jasnej strategii i zbyt wielu narzędzi razem (zarządzanie klastrami, okno dokowane, PM2) może doprowadzić do chaosu DevOps\n\n🔗 [**Czytaj więcej: Guard process uptime using the right tool**](./sections/production/guardprocess.polish.md)\n\n<br/><br/>\n\n## ![✔] 5.6. Wykorzystaj wszystkie rdzenie procesora\n\n**TL;DR:** W swojej podstawowej formie aplikacja Node działa na jednym rdzeniu procesora, podczas gdy wszystkie pozostałe pozostają bezczynne. Twoim obowiązkiem jest replikacja procesu Node i wykorzystanie wszystkich procesorów - w przypadku małych i średnich aplikacji możesz użyć Node Cluster lub PM2. W przypadku większej aplikacji rozważ replikację procesu przy użyciu klastra Docker (np. K8S, ECS) lub skryptów wdrażania opartych na systemie inicjującym Linux (np. systemd)\n\n**W przeciwnym razie:** Twoja aplikacja prawdopodobnie wykorzysta tylko 25% dostępnych zasobów (!) lub nawet mniej. Zauważ, że typowy serwer ma 4 rdzenie procesora lub więcej, naiwne wdrożenie Node.js wykorzystuje tylko 1 (nawet przy użyciu usług PaaS, takich jak AWS beanstalk!)\n\n🔗 [**Czytaj więcej: Utilize all CPU cores**](./sections/production/utilizecpu.polish.md)\n\n<br/><br/>\n\n## ![✔] 5.7. Utwórz „punkt końcowy konserwacji”\n\n**TL;DR:** Ujawnij zestaw informacji związanych z systemem, takich jak użycie pamięci i REPL itp. W zabezpieczonym interfejsie API. Chociaż wysoce zalecane jest poleganie na standardowych i narzędziach do testów bitewnych, niektóre cenne informacje i operacje można łatwiej wykonać za pomocą kodu\n\n**W przeciwnym razie:** Przekonasz się, że wykonujesz wiele „wdrożeń diagnostycznych” - wysyłasz kod do produkcji tylko po to, aby wyodrębnić niektóre informacje do celów diagnostycznych\n\n🔗 [**Czytaj więcej: Create a ‘maintenance endpoint’**](./sections/production/createmaintenanceendpoint.polish.md)\n\n<br/><br/>\n\n## ![✔] 5.8. Odkryj błędy i przestoje przy użyciu produktów APM\n\n**TL;DR:** Produkty do monitorowania aplikacji i wydajności (np. APM) proaktywnie oceniają bazę kodu i interfejs API, dzięki czemu mogą automatycznie wykraczać poza tradycyjny monitoring i mierzyć ogólne wrażenia użytkownika na różnych usługach i poziomach. Na przykład niektóre produkty APM mogą wyróżniać transakcję, która ładuje się zbyt wolno po stronie użytkowników końcowych, sugerując jednocześnie główną przyczynę\n\n**W przeciwnym razie:** Możesz poświęcić wiele wysiłku na pomiar wydajności interfejsu API i przestojów, prawdopodobnie nigdy nie będziesz wiedział, jakie są twoje najwolniejsze części kodu w rzeczywistym scenariuszu i jak wpływają one na UX\n\n🔗 [**Czytaj więcej: Discover errors and downtime using APM products**](./sections/production/apmproducts.polish.md)\n\n<br/><br/>\n\n## ![✔] 5.9. Przygotuj kod do produkcji\n\n**TL;DR:** Kod z myślą o końcu, plan produkcji od pierwszego dnia. Brzmi to nieco niejasno, dlatego opracowałem kilka wskazówek programistycznych, które są ściśle związane z utrzymaniem produkcji (kliknij przycisk Gist poniżej)\n\n**W przeciwnym razie:** Mistrz świata IT / DevOps nie uratuje źle napisanego systemu\n\n🔗 [**Czytaj więcej: Make your code production-ready**](./sections/production/productioncode.polish.md)\n\n<br/><br/>\n\n## ![✔] 5.10. Zmierz i zabezpiecz zużycie pamięci\n\n**TL;DR:** Node.js ma kontrowersyjne relacje z pamięcią: silnik v8 ma miękkie limity wykorzystania pamięci (1,4 GB) i istnieją znane ścieżki wycieku pamięci w kodzie Node - dlatego oglądanie pamięci procesu Node jest koniecznością. W małych aplikacjach możesz okresowo mierzyć pamięć za pomocą poleceń powłoki, ale w średnio-dużych aplikacjach rozważ umieszczenie zegarka pamięci w solidnym systemie monitorowania\n\n**W przeciwnym razie:** Pamięć procesowa może przeciekać sto megabajtów dziennie, jak to się stało w [Walmart](https://www.joyent.com/blog/walmart-node-js-memory-leak)\n\n🔗 [**Czytaj więcej: Measure and guard the memory usage**](./sections/production/measurememory.polish.md)\n\n<br/><br/>\n\n## ![✔] 5.11. Wydobądź swoje zasoby frontendowe Node\n\n**TL;DR:** Podawaj zawartość interfejsu użytkownika za pomocą dedykowanego oprogramowania pośredniego (nginx, S3, CDN), ponieważ wydajność węzła naprawdę spada podczas pracy z wieloma plikami statycznymi ze względu na model jednowątkowy\n\n**W przeciwnym razie:** Twój pojedynczy wątek Node'a będzie zajęty przesyłaniem strumieniowym setek plików HTML / images / Angular / React zamiast przydzielania wszystkich swoich zasobów do zadania, dla którego się urodził - udostępniania treści dynamicznych\n\n🔗 [**Czytaj więcej: Get your frontend assets out of Node**](./sections/production/frontendout.polish.md)\n\n<br/><br/>\n\n## ![✔] 5.12. Bądź bezstanowy, zabijaj serwery prawie codziennie\n\n**TL;DR:** Przechowuj wszelkiego rodzaju dane (np. sesje użytkownika, pamięć podręczną, przesłane pliki) w zewnętrznych magazynach danych. Rozważ „zabijanie” swoich serwerów okresowo lub skorzystaj z platformy „bezserwerowej” (np. AWS Lambda), która wyraźnie wymusza zachowanie bezstanowe\n\n**W przeciwnym razie:** Awaria na danym serwerze spowoduje przestoje aplikacji, a nie tylko zabicie wadliwego komputera. Co więcej, elastyczność skalowania stanie się trudniejsza ze względu na zależność od konkretnego serwera\n\n🔗 [**Czytaj więcej: Be stateless, kill your Servers almost every day**](./sections/production/bestateless.polish.md)\n\n<br/><br/>\n\n## ![✔] 5.13. Użyj narzędzi, które automatycznie wykrywają luki w zabezpieczeniach\n\n**TL;DR:** Nawet najbardziej renomowane zależności, takie jak Express, mają znane luki (od czasu do czasu), które mogą stanowić zagrożenie dla systemu. Można to łatwo oswoić za pomocą narzędzi społecznościowych i komercyjnych, które stale sprawdzają luki w zabezpieczeniach i ostrzegają (lokalnie lub w GitHub), niektóre mogą nawet natychmiast je załatać\n\n**W przeciwnym razie:** Utrzymanie kodu w czystości przed lukami bez dedykowanych narzędzi będzie wymagało ciągłego śledzenia publikacji online na temat nowych zagrożeń. Dość nudne\n\n🔗 [**Czytaj więcej: Use tools that automatically detect vulnerabilities**](./sections/production/detectvulnerabilities.polish.md)\n\n<br/><br/>\n\n## ![✔] 5.14. Przypisz identyfikator transakcji do każdej instrukcji dziennika\n\n**TL;DR:** Przypisz ten sam identyfikator, identyfikator transakcji: {pewna wartość} do każdego wpisu dziennika w ramach jednego żądania. Następnie podczas sprawdzania błędów w logach łatwo wyciągnij wnioski przed i po. Niestety, nie jest to łatwe do osiągnięcia w Node ze względu na jego asynchroniczny charakter, patrz przykłady kodu wewnątrz\n\n**W przeciwnym razie:** Patrzenie na dziennik błędów produkcyjnych bez kontekstu - co zdarzyło się wcześniej - sprawia, że znacznie trudniej i wolniej jest myśleć o problemie\n\n🔗 [**Czytaj więcej: Assign ‘TransactionId’ to each log statement**](./sections/production/assigntransactionid.polish.md)\n\n<br/><br/>\n\n## ![✔] 5.15. Ustaw NODE_ENV = produkcja\n\n**TL;DR:** Ustaw zmienną środowiskową NODE_ENV na 'production' lub 'development', aby oznaczyć, czy optymalizacje produkcji powinny zostać aktywowane - wiele pakietów npm określa bieżące środowisko i optymalizuje kod do produkcji\n\n**W przeciwnym razie:** Pominięcie tej prostej właściwości może znacznie obniżyć wydajność. Na przykład, używając Express do renderowania po stronie serwera, pominięcie `NODE_ENV` powoduje spowolnienie trzykrotnie!\n\n🔗 [**Czytaj więcej: Set NODE_ENV=production**](./sections/production/setnodeenv.polish.md)\n\n<br/><br/>\n\n## ![✔] 5.16. Projektowanie wdrożeń zautomatyzowanych, atomowych i bez przestojów\n\n**TL;DR:** Badania pokazują, że zespoły wykonujące wiele wdrożeń zmniejszają prawdopodobieństwo poważnych problemów produkcyjnych. Szybkie i zautomatyzowane wdrożenia, które nie wymagają ryzykownych ręcznych kroków i przestojów usług, znacznie usprawniają proces wdrażania. Prawdopodobnie powinieneś to osiągnąć za pomocą Dockera w połączeniu z narzędziami CI, ponieważ stały się one standardem branżowym dla usprawnionego wdrażania\n\n**W przeciwnym razie:** Długie wdrożenia -> przestoje produkcyjne i błąd związany z człowiekiem -> zespół nie jest pewny co do wdrożenia -> mniej wdrożeń i funkcji\n\n<br/><br/>\n\n## ![✔] 5.17. Użyj wersji LTS środowiska Node.js\n\n**TL;DR:** Upewnij się, że używasz wersji LTS Node.js , aby otrzymywać krytyczne poprawki błędów, aktualizacje zabezpieczeń i ulepszenia wydajności\n\n**W przeciwnym razie:** Nowo odkryte błędy lub luki można wykorzystać do wykorzystania aplikacji działającej w środowisku produkcyjnym, a aplikacja może nie być obsługiwana przez różne moduły i trudniejsza do utrzymania\n\n🔗 [**Czytaj więcej: Use an LTS release of Node.js**](./sections/production/LTSrelease.polish.md)\n\n<br/><br/>\n\n## ![✔] 5.18. Nie kieruj dzienników w aplikacji\n\n**TL;DR:** Miejsca docelowe dziennika nie powinny być zakodowane na stałe przez programistów w kodzie aplikacji, ale powinny być zdefiniowane przez środowisko wykonawcze, w którym działa aplikacja. Programiści powinni zapisywać dzienniki na `stdout` za pomocą narzędzia rejestrującego, a następnie pozwolić środowisku wykonawczemu (kontener, serwer itp.) potokuj strumień `stdout` do odpowiedniego miejsca docelowego (tj. Splunk, Graylog, ElasticSearch itp.).\n\n**W przeciwnym razie:** Trasowanie dzienników obsługi aplikacji === trudne do skalowania, utrata dzienników, słaba separacja problemów\n\n🔗 [**Czytaj więcej: Log Routing**](./sections/production/logrouting.polish.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#spis-treści\">⬆ Powrót do góry</a></p>\n\n# `6. Najlepsze praktyki bezpieczeństwa`\n\n<div align=\"center\">\n<img src=\"https://img.shields.io/badge/OWASP%20Threats-Top%2010-green.svg\" alt=\"54 items\"/>\n</div>\n\n## ![✔] 6.1. Ustanowienie zasad bezpieczeństwa linter\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20XSS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Skorzystaj z wtyczek liniowych związanych z bezpieczeństwem, takich jak [eslint-plugin-security](https://github.com/nodesecurity/eslint-plugin-security), aby wychwycić luki w zabezpieczeniach i problemy jak najwcześniej, najlepiej gdy są one kodowane. Może to pomóc w wykrywaniu słabych punktów bezpieczeństwa, takich jak używanie eval, wywoływanie procesu potomnego lub importowanie modułu z literałem łańcucha (np. dane wejściowe użytkownika). Kliknij „Czytaj więcej” poniżej, aby zobaczyć przykłady kodu, które zostaną złapane przez linijkę bezpieczeństwa\n\n**W przeciwnym razie:** To, co mogło być bezpośrednią słabością bezpieczeństwa podczas programowania, staje się poważnym problemem w produkcji. Ponadto projekt może nie być zgodny ze spójnymi praktykami bezpieczeństwa kodu, co prowadzi do wprowadzenia luk w zabezpieczeniach lub poufnych danych wrażliwych wrzuconych w zdalnych repozytoriach\n\n🔗 [**Czytaj więcej: Lint rules**](./sections/security/lintrules.polish.md)\n\n<br/><br/>\n\n## ![✔] 6.2. Ogranicz równoczesne żądania przy użyciu oprogramowania pośredniego\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Ataki DOS są bardzo popularne i stosunkowo łatwe do przeprowadzenia. Wdrażanie ograniczenia prędkości za pomocą usługi zewnętrznej, takiej jak usługi równoważenia obciążenia w chmurze, zapory w chmurze, nginx, pakiet [rate-limiting middleware](https://www.npmjs.com/package/rate-limiter-fiętki) lub (dla mniejszych i mniej krytycznych aplikacji) ograniczające szybkość oprogramowanie pośrednie (np. [express-rate-limit](https://www.npmjs.com/package/express-rate-limit))\n\n**W przeciwnym razie:** Aplikacja może zostać zaatakowana, co spowoduje odmowę usługi, w wyniku której prawdziwi użytkownicy otrzymają usługę o obniżonej jakości lub niedostępną.\n\n🔗 [**Czytaj więcej: Implement rate limiting**](./sections/security/limitrequests.polish.md)\n\n<br/><br/>\n\n## ![✔] 6.3 Wyodrębnij dane wrażliwe z plików konfiguracyjnych lub użyj pakietów, aby je zaszyfrować\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A3:Sensitive%20Data%20Exposure%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Nigdy nie przechowuj danych wrażliwych jako zwykły tekst w plikach konfiguracyjnych lub kodzie źródłowym. Zamiast tego skorzystaj z systemów zarządzania danymi wrażliwymi, takich jak produkty Vault, Kubernetes / Docker Secrets lub wykorzystując zmienne środowiskowe. W ostateczności dane wrażliwe przechowywane w kontroli źródła muszą być szyfrowane i zarządzane (klucze, wygasanie, kontrola itp.). Skorzystaj z hooks poprzedzających zatwierdzenie / push, aby zapobiec przypadkowemu commitowaniu danych wrażliwych\n\n**W przeciwnym razie:** Kontrola źródła, nawet w przypadku prywatnych repozytoriów, może zostać omyłkowo upubliczniona, w którym to momencie ujawniane są wszystkie dane wrażliwe. Dostęp do kontroli źródła dla strony zewnętrznej nieumyślnie zapewni dostęp do powiązanych systemów (baz danych, API, usług itp.).\n\n🔗 [**Czytaj więcej: Secret management**](./sections/security/secretmanagement.polish.md)\n\n<br/><br/>\n\n## ![✔] 6.4. Zapobiegaj podatności na wstrzykiwanie zapytań w bibliotekach ORM / ODM\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Aby zapobiec wstrzykiwaniu SQL / NoSQL i innym złośliwym atakom, zawsze używaj ORM / ODM lub biblioteki bazy danych, która ucieka przed danymi lub obsługuje nazwane lub indeksowane zapytania sparametryzowane, i dba o sprawdzenie poprawności danych wejściowych użytkownika dla oczekiwanych typów. Nigdy nie używaj ciągów szablonów JavaScript ani konkatenacji ciągów, aby wstrzykiwać wartości do zapytań, ponieważ otwiera to aplikację na szeroki zakres luk. Wszystkie renomowane biblioteki dostępu do danych Node.js (np. [Sequelize](https://github.com/sequelize/sequelize), [Knex](https://github.com/tgriesser/knex), [mongoose](https://github.com/Automattic/mongoose)) mają wbudowaną ochronę przed atakami iniekcyjnymi.\n\n**W przeciwnym razie:** Nieprawidłowe lub niezaangażowane dane wejściowe użytkownika mogą prowadzić do wstrzyknięcia przez operatora podczas pracy z MongoDB dla NoSQL, a niestosowanie odpowiedniego systemu odkażania lub ORM z łatwością pozwoli na ataki z zastrzykiem SQL, tworząc ogromną lukę.\n\n🔗 [**Czytaj więcej: Query injection prevention using ORM/ODM libraries**](./sections/security/ormodmusage.polish.md)\n\n<br/><br/>\n\n## ![✔] 6.5. Zbiór ogólnych dobrych praktyk w zakresie bezpieczeństwa\n\n**TL;DR:** Jest to zbiór porad bezpieczeństwa, które nie są bezpośrednio związane z Node.js - implementacja Node nie różni się niczym od żadnego innego języka. Kliknij Czytaj więcej, aby przejrzeć.\n\n🔗 [**Czytaj więcej: Common security best practices**](./sections/security/commonsecuritybestpractices.polish.md)\n\n<br/><br/>\n\n## ![✔] 6.6. Dostosuj nagłówki odpowiedzi HTTP, aby zwiększyć bezpieczeństwo\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Twoja aplikacja powinna korzystać z bezpiecznych nagłówków, aby uniemożliwić atakującym typowe ataki, takie jak skrypty cross-site scripting (XSS), kliknięcia i inne złośliwe ataki. Można je łatwo skonfigurować za pomocą modułów takich jak [helmet](https://www.npmjs.com/package/helmet).\n\n**W przeciwnym razie:** Atakujący mogą wykonywać bezpośrednie ataki na użytkowników aplikacji, co prowadzi do ogromnych luk w zabezpieczeniach\n\n🔗 [**Czytaj więcej: Using secure headers in your application**](./sections/security/secureheaders.polish.md)\n\n<br/><br/>\n\n## ![✔] 6.7. Stale i automatycznie sprawdzaj wrażliwe zależności\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Known%20Vulnerabilities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** W ekosystemie npm często występuje wiele zależności dla projektu. Zależności powinny być zawsze kontrolowane w miarę wykrycia nowych luk. Użyj narzędzi takich jak [npm audit](https://docs.npmjs.com/cli/audit) lub [snyk](https://snyk.io/) do śledzenia, monitorowania i łatania podatnych na zagrożenia zależności. Zintegruj te narzędzia z konfiguracją CI, aby złapać wrażliwą zależność, zanim przejdzie ona do produkcji.\n\n**W przeciwnym razie:** Osoba atakująca może wykryć strukturę sieci i zaatakować wszystkie znane luki w zabezpieczeniach.\n\n🔗 [**Czytaj więcej: Dependency security**](./sections/security/dependencysecurity.polish.md)\n\n<br/><br/>\n\n## ![✔] 6.8. Unikaj używania biblioteki kryptograficznej Node.js do obsługi haseł, użyj Bcrypt\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Hasła lub dane wrażliwe (klucze API) powinny być przechowywane przy użyciu bezpiecznej funkcji hash + salt, takiej jak `bcrypt`, co powinno być preferowanym wyborem w stosunku do implementacji JavaScript ze względu na wydajność i bezpieczeństwo.\n\n**W przeciwnym razie:** Hasła lub dane wrażliwe, które są utrwalane bez korzystania z bezpiecznej funkcji, są podatne na brute force i ataki słownikowe, które ostatecznie doprowadzą do ich ujawnienia.\n\n🔗 [**Czytaj więcej: Use Bcrypt**](./sections/security/bcryptpasswords.polish.md)\n\n<br/><br/>\n\n## ![✔] 6.9. Unikaj danych wyjściowych HTML, JS i CSS\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Niezaufane dane wysyłane do przeglądarki mogą zostać wykonane zamiast po prostu wyświetlane, jest to powszechnie nazywane atakiem typu cross-site-scripting (XSS). Ogranicz to, używając dedykowanych bibliotek, które jawnie oznaczają dane jako czystą treść, która nigdy nie powinna zostać wykonana (tj. kodowanie, ucieczka)\n\n**W przeciwnym razie:** Osoba atakująca może przechowywać złośliwy kod JavaScript w bazie danych, który zostanie następnie wysłany „tak jak jest” do biednych klientów\n\n🔗 [**Czytaj więcej: Escape output**](./sections/security/escape-output.polish.md)\n\n<br/><br/>\n\n## ![✔] 6.10. Sprawdź poprawność przychodzących schematów JSON\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7: XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A8:Insecured%20Deserialization%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Zweryfikuj ładowność treści przychodzących żądań i upewnij się, że spełnia oczekiwania, jeśli nie, szybko zawiedzie. Aby uniknąć żmudnego kodowania sprawdzania poprawności na każdej trasie, możesz użyć lekkich schematów sprawdzania poprawności opartych na JSON, takich jak [jsonschema](https://www.npmjs.com/package/jsonschema) lub [joi](https://www.npmjs.com/package/joi)\n\n**W przeciwnym razie:** Twoja hojność i liberalne podejście znacznie zwiększa powierzchnię ataku i zachęca atakującego do wypróbowania wielu danych wejściowych, dopóki nie znajdzie kombinacji umożliwiającej zawieszenie aplikacji\n\n🔗 [**Czytaj więcej: Validate incoming JSON schemas**](./sections/security/validation.polish.md)\n\n<br/><br/>\n\n## ![✔] 6.11. Obsługa czarnych list JWT\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Podczas korzystania z tokenów WWW JSON (na przykład z [Passport.js](https://github.com/jaredhanson/passport)) domyślnie nie ma mechanizmu, aby odwołać dostęp z wydanych tokenów. Gdy odkryjesz jakąś szkodliwą aktywność użytkownika, nie ma sposobu, aby powstrzymać ich przed dostępem do systemu, o ile posiadają prawidłowy token. Ogranicz to, wdrażając czarną listę niezaufanych tokenów, które są sprawdzane przy każdym żądaniu.\n\n**W przeciwnym razie:** Wygasłe lub niewłaściwie umieszczone tokeny mogą być złośliwie wykorzystywane przez osoby trzecie do uzyskiwania dostępu do aplikacji i podszywania się pod właściciela tokena.\n\n🔗 [**Czytaj więcej: Blacklist JSON Web Tokens**](./sections/security/expirejwt.polish.md)\n\n<br/><br/>\n\n## ![✔] 6.12. Zapobiegaj brute force na autoryzację\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Prostą i skuteczną techniką jest ograniczenie prób autoryzacji przy użyciu dwóch wskaźników:\n\n1. Pierwszy to liczba kolejnych nieudanych prób tego samego unikalnego identyfikatora / nazwy użytkownika i adresu IP.\n2. Druga to liczba nieudanych prób z adresu IP w dłuższym okresie czasu. Na przykład zablokuj adres IP, jeśli wykona 100 nieudanych prób w ciągu jednego dnia.\n\n**W przeciwnym razie:** Osoba atakująca może podejmować nieograniczoną liczbę zautomatyzowanych prób uzyskania hasła w celu uzyskania dostępu do uprzywilejowanych kont w aplikacji\n\n🔗 [**Czytaj więcej: Login rate limiting**](./sections/security/login-rate-limit.polish.md)\n\n<br/><br/>\n\n## ![✔] 6.13. Uruchom Node.js jako użytkownik inny niż root\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A5:Broken%20Access%20Access%20Control-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Istnieje częsty scenariusz, w którym Node.js działa jako użytkownik root z nieograniczonymi uprawnieniami. Na przykład jest to domyślne zachowanie w kontenerach Docker. Zalecane jest utworzenie użytkownika innego niż root i upieczenie go w obrazie Docker (przykłady podane poniżej) lub uruchomienie procesu w imieniu tego użytkownika przez wywołanie kontenera z flagą \"-u username\"\n\n**W przeciwnym razie:** Atakujący, któremu uda się uruchomić skrypt na serwerze, uzyskuje nieograniczoną władzę nad maszyną lokalną (np. zmienia iptable i przekierowuje ruch do swojego serwera)\n\n🔗 [**Czytaj więcej: Run Node.js as non-root user**](./sections/security/non-root-user.polish.md)\n\n<br/><br/>\n\n## ![✔] 6.14. Ogranicz rozmiar ładunku przy użyciu odwrotnego proxy lub oprogramowania pośredniego\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A8:Insecured%20Deserialization%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Im większy jest ładunek ciała, tym trudniej jest przetwarzać pojedynczy wątek. Jest to okazja dla atakujących, aby postawić serwery na kolanach bez ogromnej liczby żądań (ataki DOS / DDOS). Ogranicz to, ograniczając rozmiar ciała przychodzących żądań na krawędzi (np. zapora ogniowa, ELB) lub konfigurując [ekspresowy parser treści](https://github.com/expressjs/body-parser), aby akceptował tylko małe ładunki\n\n**W przeciwnym razie:** Twoja aplikacja będzie musiała poradzić sobie z dużymi żądaniami, niezdolna do przetworzenia innej ważnej pracy, którą musi wykonać, co będzie miało wpływ na wydajność i podatność na ataki DOS\n\n🔗 [**Czytaj więcej: Limit payload size**](./sections/security/requestpayloadsizelimit.polish.md)\n\n<br/><br/>\n\n## ![✔] 6.15. Unikaj instrukcji eval JavaScript\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** `eval` jest złe, ponieważ pozwala na wykonanie niestandardowego kodu JavaScript w czasie wykonywania. Jest to nie tylko kwestia wydajności, ale także ważna kwestia bezpieczeństwa ze względu na złośliwy kod JavaScript, który może pochodzić z danych wejściowych użytkownika. Inną cechą językową, której należy unikać, jest konstruktor `new Function`. `setTimeout` i`setInterval` nigdy nie powinny być przekazywane dynamicznemu kodowi JavaScript.\n\n**W przeciwnym razie:** Złośliwy kod JavaScript znajduje drogę do tekstu przekazywanego do `eval` lub innych funkcji języka JavaScript oceniających w czasie rzeczywistym, i uzyskuje pełny dostęp do uprawnień JavaScript na stronie. Luka ta często objawia się jako atak XSS.\n\n🔗 [**Czytaj więcej: Avoid JavaScript eval statements**](./sections/security/avoideval.polish.md)\n\n<br/><br/>\n\n## ![✔] 6.16. Zapobiegaj złemu Regex'owi przed przeciążeniem wykonania pojedynczego wątku\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Wyrażenia regularne, chociaż są przydatne, stanowią prawdziwe zagrożenie dla aplikacji JavaScript w ogóle, w szczególności dla platformy Node.js. Wprowadzanie przez użytkownika tekstu w celu dopasowania może wymagać przetworzenia dużej liczby cykli procesora. Przetwarzanie Regex może być nieefektywne w takim stopniu, że pojedyncze żądanie, które potwierdza 10 słów, może zablokować całą pętlę zdarzeń na 6 sekund i ustawić procesor na on. Z tego powodu preferuj pakiety walidacyjne innych firm, takie jak [validator.js](https://github.com/chriso/validator.js) zamiast pisać własne wzorce Regex, lub skorzystaj z [safe-regex](https://github.com/substack/safe-regex) do wykrywania wrażliwych wzorców wyrażeń regularnych\n\n**W przeciwnym razie:** Źle napisane wyrażenia regularne mogą być podatne na ataki DoS wyrażeń regularnych, które całkowicie zablokują pętlę zdarzeń. Na przykład popularny pakiet `moment` został uznany za podatny na złośliwe użycie Regex w listopadzie 2017r.\n\n🔗 [**Czytaj więcej: Prevent malicious RegEx**](./sections/security/regex.polish.md)\n\n<br/><br/>\n\n## ![✔] 6.17. Unikaj ładowania modułu za pomocą zmiennej\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Unikaj wymagania / importowania innego pliku ze ścieżką podaną jako parametr ze względu na obawy, że mógł on pochodzić z danych wejściowych użytkownika. Regułę tę można rozszerzyć w celu uzyskania ogólnego dostępu do plików (tj. `Fs.readFile ()`) lub innego poufnego dostępu do zasobów za pomocą zmiennych dynamicznych pochodzących z danych wprowadzanych przez użytkownika. [Eslint-plugin-security](https://www.npmjs.com/package/eslint-plugin-security) linter potrafi złapać takie wzorce i odpowiednio wcześnie ostrzec\n\n**W przeciwnym razie:** Złośliwe dane wejściowe użytkownika mogą znaleźć drogę do parametru wymaganego do zmodyfikowania plików, na przykład wcześniej przesłanego pliku do systemu plików lub uzyskania dostępu do już istniejących plików systemowych.\n\n🔗 [**Czytaj więcej: Safe module loading**](./sections/security/safemoduleloading.polish.md)\n\n<br/><br/>\n\n## ![✔] 6.18. Uruchom niebezpieczny kod w piaskownicy\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** W przypadku zadania uruchomienia kodu zewnętrznego, który jest podawany w czasie wykonywania (np. wtyczki), użyj dowolnego środowiska wykonawczego „piaskownicy”, które izoluje i chroni główny kod przed wtyczką. Można to osiągnąć za pomocą dedykowanego procesu (np. `Cluster.fork ()`), środowiska bezserwerowego lub dedykowanych pakietów npm, które działają jak piaskownica\n\n**W przeciwnym razie:** Wtyczka może atakować poprzez nieskończoną różnorodność opcji, takich jak nieskończone pętle, przeciążenie pamięci i dostęp do wrażliwych zmiennych środowiskowych procesu\n\n🔗 [**Czytaj więcej: Run unsafe code in a sandbox**](./sections/security/sandbox.polish.md)\n\n<br/><br/>\n\n## ![✔] 6.19. Zachowaj szczególną ostrożność podczas pracy z procesami potomnymi\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Jeśli to możliwe, unikaj korzystania z procesów potomnych, a jeśli to konieczne, sprawdzaj poprawność i odkażaj dane wejściowe, aby złagodzić ataki polegające na wstrzykiwaniu powłoki. Wolę używać `child_process.execFile`, który z definicji wykona tylko jedno polecenie z zestawem atrybutów i nie pozwoli na rozszerzenie parametrów powłoki.\n\n**W przeciwnym razie:** Naiwne użycie procesów potomnych może spowodować zdalne wykonanie poleceń lub ataki polegające na wstrzyknięciu powłoki z powodu wprowadzenia złośliwego użytkownika do niezarządzanego polecenia systemowego.\n\n🔗 [**Czytaj więcej: Be cautious when working with child processes**](./sections/security/childprocesses.polish.md)\n\n<br/><br/>\n\n## ![✔] 6.20. Ukryj szczegóły błędów przed klientami\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Zintegrowana ekspresowa obsługa błędów domyślnie ukrywa szczegóły błędu. Jednak duże są szanse na wdrożenie własnej logiki obsługi błędów za pomocą niestandardowych obiektów Error (uważanych przez wielu za najlepszą praktykę). Jeśli to zrobisz, pamiętaj, aby nie zwracać całego obiektu Error do klienta, który może zawierać pewne wrażliwe szczegóły aplikacji\n\n**W przeciwnym razie:** Wrażliwe szczegóły aplikacji, takie jak ścieżki plików serwera, używane moduły stron trzecich i inne wewnętrzne przepływy pracy aplikacji, które mogą zostać wykorzystane przez atakującego, mogą zostać wyciekły z informacji znalezionych w stack trace\n\n🔗 [**Czytaj więcej: Hide error details from client**](./sections/security/hideerrors.polish.md)\n\n<br/><br/>\n\n## ![✔] 6.21. Skonfiguruj 2FA dla npm lub Yarn\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Każdy krok w łańcuchu programowania powinien być chroniony za pomocą MFA (uwierzytelnianie wieloskładnikowe), npm / Yarn to słodka okazja dla atakujących, którzy mogą zdobyć hasło jakiegoś programisty. Korzystając z poświadczeń programistów, osoby atakujące mogą wstrzykiwać złośliwy kod do bibliotek szeroko instalowanych w projektach i usługach. Może nawet w Internecie, jeśli zostanie opublikowany publicznie. Włączenie uwierzytelniania 2-czynnikowego w npm pozostawia niemal zerowe szanse atakującym na zmianę kodu pakietu.\n\n**W przeciwnym razie:** [Czy słyszałeś o programiście eslint, którego hasło zostało przejęte?](https://medium.com/@oprearocks/eslint-backdoor-what-it-is-and-how-to-fix-the-issue-221f58f1a8c8)\n\n<br/><br/>\n\n## ![✔] 6.22. Zmodyfikuj ustawienia oprogramowania pośredniego sesji\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Każda platforma sieciowa i technologia ma swoje znane słabości - informowanie atakującego, której struktury sieciowej używamy, jest dla nich bardzo pomocne. Korzystanie z domyślnych ustawień dla pośrednich sesji może narazić twoją aplikację na ataki przejmujące specyficzne dla modułu i frameworka w podobny sposób jak nagłówek `X-Powered-By`. Spróbuj ukryć wszystko, co identyfikuje i ujawnia Twój stos technologii (np. Node.js, Express)\n\n**W przeciwnym razie:** Pliki cookie mogą być przesyłane za pośrednictwem niezabezpieczonych połączeń, a osoba atakująca może użyć identyfikacji sesji w celu zidentyfikowania podstawowej struktury aplikacji internetowej, a także podatności na uszkodzenia specyficzne dla modułu\n\n🔗 [**Czytaj więcej: Cookie and session security**](./sections/security/sessions.polish.md)\n\n<br/><br/>\n\n## ![✔] 6.23. Unikaj ataków DOS, jawnie określając, kiedy proces powinien ulec awarii\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Proces Node'a ulega awarii, gdy błędy nie są obsługiwane. Wiele najlepszych praktyk zaleca nawet wyjście, nawet jeśli błąd został wykryty i naprawiony. Na przykład program Express zawiesza się przy każdym błędzie asynchronicznym - chyba że zawiniesz trasy klauzulą catch. Otwiera to bardzo słodkie miejsce ataku dla atakujących, którzy rozpoznają, co powoduje, że proces ulega awarii i wielokrotnie wysyłają to samo żądanie. Nie ma na to natychmiastowego rozwiązania, ale kilka technik może złagodzić ból: za każdym razem, gdy proces ulega awarii z powodu nieobsługiwanego błędu, ostrzegaj z krytyczną dotkliwością, sprawdzaj dane wejściowe i unikaj awarii procesu z powodu nieprawidłowego wprowadzania danych przez użytkownika, owiń wszystkie trasy chwytaniem i rozważ, aby nie upaść, gdy błąd wystąpił w żądaniu (w przeciwieństwie do tego, co dzieje się globalnie)\n\n**W przeciwnym razie:** To tylko wyuczone przypuszczenie: biorąc pod uwagę wiele aplikacji Node.js, jeśli spróbujemy przekazać puste ciało JSON do wszystkich żądań POST - garść aplikacji ulegnie awarii. W tym momencie możemy po prostu powtórzyć wysyłanie tego samego żądania, aby z łatwością usunąć aplikacje\n\n<br/><br/>\n\n## ![✔] 6.24. Zapobiegaj niebezpiecznym przekierowaniom\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Przekierowania, które nie sprawdzają poprawności danych wejściowych użytkownika, mogą umożliwić atakującym uruchamianie oszustw związanych z wyłudzaniem informacji, kradzieży poświadczeń użytkownika i wykonywania innych złośliwych działań.\n\n**W przeciwnym razie:** Jeśli osoba atakująca odkryje, że nie weryfikujesz danych zewnętrznych dostarczonych przez użytkownika, może wykorzystać tę lukę, publikując specjalnie spreparowane łącza na forach, w mediach społecznościowych i innych miejscach publicznych, aby użytkownicy mogli ją kliknąć.\n\n🔗 [**Czytaj więcej: Prevent unsafe redirects**](./sections/security/saferedirects.polish.md)\n\n<br/><br/>\n\n## ![✔] 6.25. Unikaj publikowania danych wrażliwych w rejestrze npm\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Należy podjąć środki ostrożności, aby uniknąć ryzyka przypadkowego opublikowania danych wrażliwych w publicznych rejestrach npm. Plik `.npmignore` może być użyty do umieszczenia na czarnej liście określonych plików lub folderów, lub tablica`files` w `package.json` może działać jako biała lista.\n\n**W przeciwnym razie:** Klucze API, hasła i inne dane wrażliwe twojego projektu są otwarte na wykorzystywanie przez każdego, kto je napotka, co może spowodować straty finansowe, podszywanie się pod inne osoby i inne ryzyko.\n\n🔗 [**Czytaj więcej: Avoid publishing secrets**](./sections/security/avoid_publishing_secrets.polish.md)\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#spis-treści\">⬆ Powrót na górę</a></p>\n\n# `7. Wersja robocza: Najlepsze praktyki dotyczące wydajności`\n\n## Nasi współpracownicy pracują nad tą sekcją. [Chciałbyś dołączyć?](https://github.com/goldbergyoni/nodebestpractices/issues/256)\n\n<br/><br/>\n\n## ![✔] 7.1. Nie blokuj pętli zdarzeń\n\n**TL;DR:** Unikaj zadań intensywnie wykorzystujących procesor, ponieważ będą blokować głównie jednowątkową pętlę zdarzeń i odciążą ją do dedykowanego wątku, procesu lub nawet innej technologii zależnej od kontekstu.\n\n**W przeciwnym razie:** Ponieważ pętla zdarzeń jest zablokowana, Node.js nie będzie w stanie obsłużyć innych żądań, co spowoduje opóźnienia dla równoczesnych użytkowników. **3000 użytkowników czeka na odpowiedź, treść jest gotowa do wyświetlenia, ale jedno pojedyncze żądanie blokuje serwerowi odesłanie wyników z powrotem**\n\n🔗 [**Czytaj więcej: Do not block the event loop**](./sections/performance/block-loop.polish.md)\n\n<br /><br /><br />\n\n## ![✔] 7.2. Preferuj natywne metody JS, niż narzędzia ponad powierzchnią użytkownika, takie jak Lodash\n\n**TL;DR:** Korzystanie z bibliotek narzędziowych takich jak `lodash` i `underscore` w porównaniu z metodami natywnymi jest często bardziej karalne, ponieważ prowadzi do niepotrzebnych zależności i spowalnia działanie.\nNależy pamiętać, że wraz z wprowadzeniem nowego silnika V8 wraz z nowymi standardami ES, natywne metody zostały ulepszone w taki sposób, że są teraz o około 50% wydajniejsze niż biblioteki narzędziowe.\n\n**W przeciwnym razie:** Będziesz musiał utrzymywać mniej wydajne projekty, w których mógłbyś po prostu użyć tego, co było **już** dostępne lub zająć się kilkoma kolejnymi liniami w zamian za kilka dodatkowych plików.\n\n🔗 [**Czytaj więcej: Native over user land utils**](./sections/performance/nativeoverutil.polish.md)\n\n<br/><br/><br/>\n\n# Milestones\n\nAby utrzymać ten przewodnik i aktualizować go, stale aktualizujemy i ulepszamy wytyczne i najlepsze praktyki z pomocą społeczności. Możesz śledzić nasze [kamienie milowe](https://github.com/goldbergyoni/nodebestpractices/milestones) i dołączyć do grup roboczych, jeśli chcesz przyczynić się do tego projektu\n\n<br/>\n\n## Tłumaczenia\n\nWszystkie tłumaczenia pochodzą od społeczności. Z przyjemnością uzyskamy wszelką pomoc dotyczącą ukończonych, bieżących lub nowych tłumaczeń!\n\n### Ukończone tłumaczenia\n\n- ![BR](./assets/flags/BR.png) [Brazilian Portuguese](./README.brazilian-portuguese.md) - Dzięki uprzejmości [Marcelo Melo](https://github.com/marcelosdm)\n- ![CN](./assets/flags/CN.png) [Chinese](./README.chinese.md) - Dzięki uprzejmości [Matt Jin](https://github.com/mattjin)\n- ![RU](./assets/flags/RU.png) [Russian](./README.russian.md) - Dzięki uprzejmości [Alex Ivanov](https://github.com/contributorpw)\n- ![PL](./assets/flags/PL.png) [Polish](./README.polish.md) - Dzięki uprzejmości [Michal Biesiada](https://github.com/mbiesiad)\n- ![EU](./assets/flags/EU.png) [Basque](README.basque.md) - Dzięki uprzejmości [Ane Diaz de Tuesta](https://github.com/anediaz) & Joxefe Diaz de Tuesta\n\n### Tłumaczenia w trakcie\n\n- ![FR](./assets/flags/FR.png) [French](https://github.com/gaspaonrocks/nodebestpractices/blob/french-translation/README.french.md) ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/129))\n- ![HE](./assets/flags/HE.png) Hebrew ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/156))\n- ![KR](./assets/flags/KR.png) [Korean](README.korean.md) - Courtesy of [Sangbeom Han](https://github.com/uronly14me) ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/94))\n- ![ES](./assets/flags/ES.png) [Spanish](https://github.com/goldbergyoni/nodebestpractices/blob/spanish-translation/README.spanish.md) ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/95))\n- ![TR](./assets/flags/TR.png) Turkish ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/139))\n\n<br/><br/>\n\n## Steering Committee\n\nSpotkaj się z członkami komitetu sterującego - ludźmi, którzy pracują razem, aby zapewnić wytyczne i przyszłe kierunki projektu. Ponadto każdy członek komitetu prowadzi projekt śledzony w ramach naszych [projektów GitHub](https://github.com/goldbergyoni/nodebestpractices/projects).\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/yoni.png\"/>\n\n[Yoni Goldberg](https://github.com/goldbergyoni)\n<a href=\"https://twitter.com/goldbergyoni\"><img src=\"assets/images/twitter-s.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://goldbergyoni.com\"><img src=\"assets/images/www.png\" width=\"16\" height=\"16\"></img></a>\n\nNiezależny konsultant Node.js, który współpracuje z klientami w USA, Europie i Izraelu przy tworzeniu dużych aplikacji Node.js. Wiele z powyższych dobrych praktyk opublikowano po raz pierwszy na stronie [goldbergyoni.com](https://goldbergyoni.com). Dosięgnij Yoni'ego na [@goldbergyoni](https://github.com/goldbergyoni) lub [me@goldbergyoni.com](mailto:me@goldbergyoni.com)\n\n<br/>\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/bruno.png\"/>\n\n[Bruno Scheufler](https://github.com/BrunoScheufler)\n<a href=\"https://brunoscheufler.com/\"><img src=\"assets/images/www.png\" width=\"16\" height=\"16\"></img></a>\n\n💻 full-stack web engineer, entuzjasta Node.js & GraphQL\n\n<br/>\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/kyle.png\"/>\n\n[Kyle Martin](https://github.com/js-kyle)\n<a href=\"https://twitter.com/kylemartin_93\"><img src=\"assets/images/twitter-s.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://www.linkedin.com/in/kylemartinnz\"><img src=\"assets/images/linkedin.png\" width=\"16\" height=\"16\"></img></a>\n\nFull Stack Developer & Site Reliability Engineer z siedzibą w Nowej Zelandii, zainteresowany bezpieczeństwem aplikacji internetowych oraz architekturą i budowaniem aplikacji Node.js dla działania w skali globalnej.\n\n<br/>\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/sagir.png\"/>\n\n[Sagir Khan](https://github.com/sagirk)\n<a href=\"https://twitter.com/sagir_k\"><img src=\"assets/images/twitter-s.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://sagirk.com\"><img src=\"assets/images/www.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://linkedin.com/in/sagirk\"><img src=\"assets/images/linkedin.png\" width=\"16\" height=\"16\"></img></a>\n\nDoświadczony specjalista w JavaScript i jego ekosystemie - React, Node.js, MongoDB, prawie wszystko co wymaga użycia JavaScript / JSON w dowolnej warstwie systemu - tworzenie produktów przy użyciu platformy internetowej dla najbardziej rozpoznawalnych marek na świecie. Członek Fundacji Node.js, współpracujący przy inicjatywie redesign witryny internetowej komitetu społeczności.\n\n<br/>\n\n## Współpracownicy\n\nDziękujemy wszystkim wpółpracownikom! 🙏\n\nNasi współpracownicy są członkami, którzy regularnie współuczestniczą w repozytorium, sugerując nowe najlepsze praktyki, analizując problemy, sprawdzając pull requesty i wiele więcej. Jeśli chcesz pomóc nam poprowadzić tysiące ludzi do tworzenia lepszych aplikacji Node.js, przeczytaj nasze [wytyczne dla współpracowników](./.operations/CONTRIBUTING.md) 🎉\n\n| <a href=\"https://github.com/idori\" target=\"_blank\"><img src=\"assets/images/members/ido.png\" width=\"75\" height=\"75\"/></a> | <a href=\"https://github.com/TheHollidayInn\" target=\"_blank\"><img src=\"assets/images/members/keith.png\" width=\"75\" height=\"75\"/></a> |\n| :---------------------------------------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------------------------------------------------: |\n|                                    [Ido Richter (Founder)](https://github.com/idori)                                    |                                        [Keith Holliday](https://github.com/TheHollidayInn)                                         |\n\n### Wcześniejsza współpraca\n\n| <a href=\"https://github.com/refack\" target=\"_blank\"><img src=\"assets/images/members/refael.png\" width=\"50\" height=\"50\"/></a> |\n| :-------------------------------------------------------------------------------------------------------------------------: |\n|                                        [Refael Ackermann](https://github.com/refack)                                        |\n\n<br/>\n\n## Dziękujemy za uwagi\n\nDoceniamy każdy wkład, od poprawki pojedynczego słowa, po nową najlepszą praktykę. Zobacz naszych autorów i [dokumentację CONTRIBUTORS tutaj!](./README.md#contributors-)\n<br/><br/><br/>\n"
        },
        {
          "name": "README.russian.md",
          "type": "blob",
          "size": 135.57,
          "content": "[✔]: assets/images/checkbox-small-blue.png\n\n# Node.js Лучшие практики\n\n<h1 align=\"center\">\n  <img src=\"assets/images/banner-2.jpg\" alt=\"Node.js Лучшие практики\"/>\n</h1>\n\n<br/>\n\n<div align=\"center\">\n  <img src=\"https://img.shields.io/badge/⚙%20Item%20count%20-%2085%20Best%20Practices-blue.svg\" alt=\"85 items\"/> <img src=\"https://img.shields.io/badge/%F0%9F%93%85%20Last%20update%20-%20November%2012%202019-green.svg\" alt=\"Last update: Oct 12, 2019\"/> <img src=\"https://img.shields.io/badge/ %E2%9C%94%20Updated%20For%20Version%20-%20Node%2012.12.0-brightgreen.svg\" alt=\"Updated for Node 12.12.0\"/>\n</div>\n\n<br/>\n\n[![nodepractices](./assets/images/twitter-s.png)](https://twitter.com/nodepractices/) **Следите за нами в Twitter!** [**@nodepractices**](https://twitter.com/nodepractices/)\n\n<br/>\n\nЧитайте на других языках: [![CN](./assets/flags/CN.png)**CN**](./README.chinese.md), [![BR](./assets/flags/BR.png)**BR**](./README.brazilian-portuguese.md), [![RU](./assets/flags/RU.png)**RU**](./README.russian.md), [![EU](./assets/flags/EU.png)**EU**](./README.basque.md) [(![ES](./assets/flags/ES.png)**ES**, ![FR](./assets/flags/FR.png)**FR**, ![HE](./assets/flags/HE.png)**HE**, ![KR](./assets/flags/KR.png)**KR** and ![TR](./assets/flags/TR.png)**TR** in progress! )](#translations)\n\n<br/>\n\n###### Создано и поддерживается нашим [руководящим комитетом](#steering-committee) and [соавторами](#collaborators)\n\n# Последние лучшие практики и новости\n\n- **✅ Новая лучшая практика:** 7.1: [Не блокируйте цикл событий](#-71-не-блокируйте-цикл-событий) by Keith Holliday\n\n- **🇷🇺 Перевод на русский:** Alex Ivanov недавно опубликовал [Russian translation](./README.russian.md)\n\n- **Мы ищем авторов текстов:** хотите помочь с примерами TypeScript? Пожалуйста, обратитесь, открыв вопрос.\n\n<br/><br/>\n\n# Добро пожаловать! 3 вещи, которые вы должны знать в первую очередь\n\n**1. На самом деле вы читаете десятки лучших статей Node.js -** этот репозиторий представляет собой краткий обзор и список наиболее популярных материалов по рекомендациям Node.js, а также материалов, написанных здесь соавторами.\n\n**2. Это самая большая подборка, и она растет каждую неделю -** в настоящее время представлено более 80 передовых практик, руководств по стилю и архитектурных советов. Новые выпуски и запросы на добавление, чтобы обновлять эту живую книгу, создаются каждый день. Мы бы хотели, чтобы вы внесли свой вклад здесь, будь то исправление ошибок в коде, помощь с переводами или предложение блестящих новых идей. Смотрите наши [правила написания здесь](./.operations/writing-guidelines.md).\n\n**3. У большинства лучших практик есть дополнительная информация -** большинство маркеров включают в себя ссылку **🔗 Подробнее**, которая расширяет практику с примерами кода, цитатами из выбранных блогов и дополнительной информацией.\n\n<br/><br/>\n\n## Оглавление\n\n1. [Практики структуры проекта (5)](#1-Практики-структуры-проекта)\n2. [Практики обработки ошибок (11)](#2-Практики-обработки-ошибок)\n3. [Практики стиля кода (12)](#3-Практики-стиля-кода)\n4. [Тестирование и общие методы контроля качества (12)](#4-Тестирование-и-общие-методы-контроля-качества)\n5. [Переход к производственным практикам (18)](#5-Переход-к-производственным-практикам)\n6. [Практики безопасности (25)](#6-Практики-безопасности)\n7. [Практики эффективности (2) (Работа в процессе️ ✍️)](#7-черновик-практики-эффективности)\n\n<br/><br/>\n\n# `1. Практики структуры проекта`\n\n## ![✔] 1.1 Структурируйте свое решение по компонентам\n\n**TL;DR:** Наихудшая ловушка для больших приложений -- поддержка огромной базы кода с сотнями зависимостей -- такой монолит замедляет разработчиков, поскольку они пытаются внедрить новые функции. Вместо этого разделите ваш код на компоненты, каждый получает свою собственную папку или выделенную кодовую базу, и убедитесь, что каждый модуль остается маленьким и простым. Посетите \"Подробнее\" ниже, чтобы увидеть примеры правильной структуры проекта.\n\n**Иначе:** Когда разработчики, которые пишут новые функции, изо всех сил пытаются понять влияние своих изменений и боятся сломать другие зависимые компоненты, развертывания становятся медленнее и рискованнее. Также считается сложнее масштабировать, когда все бизнес-единицы не разделены.\n\n🔗 [**Подробнее: Структурируйте свое решение по компонентам**](./sections/projectstructre/breakintcomponents.russian.md)\n\n<br/><br/>\n\n## ![✔] 1.2 Выделяйте ваши компоненты в отдельный слой, держите Express в его границах\n\n**TL;DR:** Каждый компонент должен содержать \"слои\" -- выделенный объект для сети, логики и кода доступа к данным. Это не только четко разделяет задачи, но и значительно облегчает проверку и тестирование системы. Хотя это очень распространенный шаблон, разработчики API, как правило, смешивают слои, передавая объекты веб-слоя (Express req, res) в бизнес-логику и уровни данных - это делает ваше приложение зависимым и доступным только для Express.\n\n**Иначе:** Приложение, которое смешивает веб-объекты с другими слоями, не может быть доступно для тестирования кода, заданий CRON и других вызовов в обход Express.\n\n🔗 [**Подробнее: Выделяйте ваши компоненты в отдельный слой, держите Express в его границах**](./sections/projectstructre/createlayers.russian.md)\n\n<br/><br/>\n\n## ![✔] 1.3 Оборачивайте общие утилиты в пакеты npm\n\n**TL;DR:** В большом приложении, которое составляет большую кодовую базу, универсальные утилиты, такие как регистратор, модуль шифрования и т.п., должны быть обернуты вашим собственным кодом и представлены как частные пакеты npm. Это позволяет делиться ими между несколькими кодовыми базами и проектами.\n\n**Иначе:** Вам придется изобрести собственный велосипед для развертывания и поддержания зависимостей.\n\n🔗 [**Подробнее: Оборачивайте общие утилиты в пакеты npm**](./sections/projectstructre/wraputilities.russian.md)\n\n<br/><br/>\n\n## ![✔] 1.4 Разделяйте Express \"приложение\" и \"сервер\"\n\n**TL;DR:** Избегайте неприятной привычки определять все приложение [Express](https://expressjs.com/) в одном огромном файле -- разделите определение \"Экспресс\" как минимум на два файла: декларация API (app.js) и сетевые задачи (www). Для еще лучшей структуры локализуйте объявление API в компонентах.\n\n**Иначе:** Ваш API будет доступен для тестирования только через HTTP-вызовы (медленнее и намного сложнее создавать отчеты о покрытии). Скорее всего, вы не будете испытывать огромное удовольствие, если будете хранить сотни строк кода в одном файле.\n\n🔗 [**Подробнее: Разделяйте Express \"приложение\" и \"сервер\"**](./sections/projectstructre/separateexpress.russian.md)\n\n<br/><br/>\n\n## ![✔] 1.5 Используйте безопасную и иерархическую конфигурацию с учетом среды\n\n**TL;DR:** Идеальная и безупречная конфигурация должна обеспечивать (а) считывание ключей из файла И из переменной среды, (б) хранение секретов вне основной кодовой базы, (в) иерархическую структуру для облегчения поиска. Есть несколько пакетов, которые могут помочь поставить галочку в большинстве таких полей, как [rc](https://www.npmjs.com/package/rc), [nconf](https://www.npmjs.com/package/nconf), [config](https://www.npmjs.com/package/config), and [convict](https://www.npmjs.com/package/convict)\n\n**Иначе:** Невыполнение каких-либо требований к конфигурации приведет к срывам в работе разработчиков или devops-команды. А вероятно, и тех и других.\n\n🔗 [**Подробнее: Используйте конфигурацию с учетом среды, безопасную и иерархическую конфигурацию**](./sections/projectstructre/configguide.russian.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#оглавление\">⬆ К началу</a></p>\n\n# `2. Практики обработки ошибок`\n\n## ![✔] 2.1 Используйте Async-Await или обещания для обработки асинхронных ошибок\n\n**TL;DR:** Обработка асинхронных ошибок в стиле обратного вызова, вероятно, является самым быстрым путем в ад (еще говорят \"Callback Hell\" или \"The Pyramid of Doom\"). Лучший подарок, который вы можете сделать своему коду, -- это использовать надежную библиотеку обещаний или async-await, что позволяет использовать более компактный и знакомый синтаксис кода, такой как try-catch.\n\n**Иначе:** Callback-стиль Node.js, function(err, response), является многообещающим способом создания непригодного для использования кода из-за сочетания таких проблем, как обработка ошибок со случайным кодом, чрезмерные вложения и неудобные шаблоны проектирования.\n\n🔗 [**Подробнее: Используйте Async-Await или обещания для асинхронной обработки ошибок**](./sections/errorhandling/asyncerrorhandling.russian.md)\n\n<br/><br/>\n\n## ![✔] 2.2 Используйте только встроенный объект Error\n\n**TL;DR:** Многие выдают ошибки в виде строки или некоторого пользовательского типа -- это усложняет логику обработки ошибок и взаимодействие между модулями. Отклоните ли вы обещание, сгенерируете исключение или сгенерируете ошибку -- использование лишь встроенного объекта `Error` увеличит единообразие и предотвратит потерю информации.\n\n**Иначе:** При вызове какого-либо компонента нельзя быть уверенным, какой тип ошибок приходит в ответ -- это значительно затрудняет правильную обработку ошибок. Хуже того, использование пользовательских типов для описания ошибок может привести к потере информации о критических ошибках, таких как трассировка стека!\n\n🔗 [**Подробнее: Используйте только встроенный объект Error**](./sections/errorhandling/useonlythebuiltinerror.russian.md)\n\n<br/><br/>\n\n## ![✔] 2.3 Различайте операционные ошибки и ошибки программиста\n\n**TL;DR:** Операционные ошибки (например, API получил неверный ввод) относятся к таким случаям, когда влияние ошибки полностью осознается и может быть обработано вдумчиво. Ошибка программиста (например, попытка прочитать undefined-переменную) относится к неизвестным ошибкам, которые требуют безопасного перезапуска приложения.\n\n**Иначе:** Вы всегда можете перезапустить приложение, когда появляется ошибка, но зачем подводить ~5000 онлайн-пользователей из-за незначительной и прогнозируемой операционной ошибки? Обратное также не является идеальным -- отсутствие перезапуска приложения в случае, если возникла неизвестная проблема (ошибка программиста), может привести к непредсказуемому поведению. Понимание типа ошибки позволит действовать тактично и применять сбалансированный подход, основанный на предоставленном контексте.\n\n🔗 [**Подробнее: Различайте операционные ошибки и ошибки программиста**](./sections/errorhandling/operationalvsprogrammererror.russian.md)\n\n<br/><br/>\n\n## ![✔] 2.4 Обрабатывате ошибки централизованно, а не в промежуточных обработчиках Express\n\n**TL;DR:** Логика обработки ошибок, например, как уведомление по почте администратора или ведение журнала, должна быть инкапсулирована в выделенный и централизованный объект, который вызывается всеми точками входа (обработчиками Express, cron-задачами, юнит-тестами) при возникновении ошибки.\n\n**Иначе:** Отсутствие обработки ошибок в едином месте приведет к дублированию кода и, возможно, к неверной обработке ошибок.\n\n🔗 [**Подробнее: Обрабатывайте ошибки централизованно. Не в промежуточных слоях**](./sections/errorhandling/centralizedhandling.russian.md)\n\n<br/><br/>\n\n## ![✔] 2.5 Документирование ошибок API при использовании Swagger или GraphQL\n\n**TL;DR:** Пусть ваши вызовы API знают, какие ошибки могут прийти взамен, чтобы они могли обрабатывать их вдумчиво без сбоев. Для API RESTful это обычно делается с помощью каркасов документации, таких как Swagger. Если вы используете GraphQL, вы также можете использовать свою схему и комментарии.\n\n**Иначе:** Клиент API может принять решение о сбое и перезапуске только потому, что он получил ошибку, которую он не может понять. Примечание: вызывающим абонентом вашего API можете быть и вы сами (очень типично для микросервисной среды)\n\n🔗 [**Подробнее: Документироваие ошибок API при использовании Swagger или GraphQL**](./sections/errorhandling/documentingusingswagger.russian.md)\n\n<br/><br/>\n\n## ![✔] 2.6 Изящно выходите из процесса, когда в город приезжает незнакомец\n\n**TL;DR:** При возникновении неизвестной ошибки (ошибка разработчика, см. рекомендацию 2.3) - существует неопределенность в отношении работоспособности приложения. Обычная практика предполагает осторожный перезапуск процесса с использованием инструмента управления процессами, такого как [Forever](https://www.npmjs.com/package/forever) или [PM2](http://pm2.keymetrics.io/).\n\n**Иначе:** Когда происходит незнакомое исключение, некоторый объект может быть в неисправном состоянии (например, источник событий, который используется глобально и больше не генерирует события из-за некоторого внутреннего сбоя), и все будущие запросы могут давать сбой или вести себя безумно.\n\n🔗 [**Подробнее: Изящно выходите из процесса, когда неизвестное случается**](./sections/errorhandling/shuttingtheprocess.russian.md)\n\n<br/><br/>\n\n## ![✔] 2.7 Используйте надежный регистратор для улучшения видимости ошибок\n\n**TL;DR:** Набор развитых инструментов ведения журналов, таких как [Winston](https://www.npmjs.com/package/winston), [Bunyan](https://github.com/trentm/node-bunyan), [Log4js](http://stritti.github.io/log4js/) или [Pino](https://github.com/pinojs/pino) ускорит обнаружение и понимание ошибок. Так что забудьте о console.log.\n\n**Иначе:** Сканирование через console.logs или вручную через грязный текстовый файл без запросов инструментов или приличного просмотра журнала может занять вас на работе до поздна.\n\n🔗 [**Подробнее: Используйте проверенный логгер, чтобы увеличить видимость ошибок**](./sections/errorhandling/usematurelogger.russian.md)\n\n<br/><br/>\n\n## ![✔] 2.8 Тестируйте потоки ошибок, используя ваш любимый тестовый фреймворк\n\n**TL;DR:** Будь то профессиональный автоматический контроль качества или простое ручное тестирование разработчиком -- убедитесь, что ваш код не только удовлетворяет положительным сценариям, но также обрабатывает и возвращает правильные ошибки. Среды тестирования, такие как Mocha & Chai, могут легко справиться с этим (см. Примеры кода в \"Gist popup\").\n\n**Иначе:** Без тестирования, будь то автоматически или вручную, вы не сможете полагаться на свой код для возврата правильных ошибок. Без значения ошибок -- нет обработки ошибок.\n\n🔗 [**Подробнее: Тестируйте потоки ошибок с использованием вашей любимой тестовой среды**](./sections/errorhandling/testingerrorflows.russian.md)\n\n<br/><br/>\n\n## ![✔] 2.9 Находите ошибки и простои с использованием продуктов APM\n\n**TL;DR:** Продукты для мониторинга и производительности (a.k.a APM) проактивно измеряют вашу кодовую базу или API, чтобы они могли автоматически подсвечивать ошибки, сбои и медленные части, которые вы пропустили.\n\n**Иначе:** Вы можете потратить огромные усилия на измерение производительности и времени простоя API, возможно, вы никогда самостоятельно не узнаете, какие части кода в реально сценарии самые медленные, и как они влияют на UX.\n\n🔗 [**Подробнее: Обнаружение ошибок и простоев с использованием продуктов APM**](./sections/errorhandling/apmproducts.russian.md)\n\n<br/><br/>\n\n## ![✔] 2.10 Ловите необработанные отказы от обещаний\n\n**TL;DR:** Любое исключение, выданное в обещании, будет проглочено и отброшено, если разработчик не забудет явно обработать. Даже если ваш код подписан на `process.uncaughtException`! Преодолейте это, зарегистрировавшись на событие `process.unhandledRejection`.\n\n**Иначе:** Ваши ошибки будут проглочены и не оставят следов. Не о чем беспокоиться!\n\n🔗 [**Подробнее: Перехватывайте необработанные отказы от обещаний**](./sections/errorhandling/catchunhandledpromiserejection.russian.md)\n\n<br/><br/>\n\n## ![✔] 2.11. Быстро проваливайтесь, проверяя аргументы, используя выделенную библиотеку\n\n**TL;DR:** Это должно быть частью вашей лучшей практики Express - вводите данные API, чтобы избежать неприятных ошибок, которые потом будет намного сложнее отследить. Код проверки обычно утомителен, если вы не используете очень классную вспомогательную библиотеку, такую ​​как Joi.\n\n**Иначе:** Учтите это -- ваша функция ожидает числовой аргумент \"Скидка\", который вызывающая сторона забывает передать, позже ваш код проверяет, если Скидка !=0 (сумма разрешенной скидки больше нуля), тогда она позволит пользователю пользоваться скидкой. О, Боже, какая неприятная ошибка! Видишь?\n\n🔗 [**Подробнее: Быстро проваливайтесь, проверяя аргументы, используя выделенную библиотеку**](./sections/errorhandling/failfast.russian.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#table-of-contents\">⬆ Return to top</a></p>\n\n## ![✔] 2.12 Для полноты стектрейсов всегда делайте await промисам прежде чем вернуть их из функции\n\n**TL;DR:** Дабы не иметь пропусков вызовов в стектрейсах, при возвращении промисов всегда\nвыполняйте `return await`. Если функция возвращает промис то эта функция обязана быть объявлена\nкак `async` и явно разрешить промис через `await` прежде чем\nвернуть его\n\n**Иначе:** Функция возвращающая неразрешенный промис будет отсутствовать в стектрейсе. Такие\nпропуски, вероятнее всего, усложнят процесс понимания пути возникновения ошибки, особенно если\nпричина ненормального поведения как раз в отсутствующей функции и находится\n\n🔗 [**Подробнее: возвращение промисов**](./sections/errorhandling/returningpromises.russian.md)\n\n<p align=\"right\"><a href=\"#оглавление\">⬆ К началу</a></p>\n\n# `3. Практики стиля кода`\n\n## ![✔] 3.1 Используйте ESLint\n\n**TL;DR:** [ESLint](https://eslint.org) является стандартом де-факто для проверки возможных ошибок кода и исправления стиля кода не только для выявления проблем с пробелами, но и для выявления серьезных анти-паттернов, которые выдают разработчики ошибки без классификации. Хотя ESLint может автоматически исправлять стили кода, другие инструменты, такие как [prettier](https://www.npmjs.com/package/prettier) и [beautify](https://www.npmjs.com/package/js-beautify) более эффективны при форматировании исправлений и работают совместно с ESLint.\n\n**Иначе:** Разработчики сосредоточатся на утомительных проблемах с интервалами и шириной линии, и время может быть потрачено впустую на продумывание стиля кода проекта.\n\n🔗 [**Подробнее: Использование ESLint и Prettier**](./sections/codestylepractices/eslint_prettier.russian.md)\n\n<br/><br/>\n\n## ![✔] 3.2 Специальные плагины Node.js\n\n**TL;DR:** Помимо стандартных правил ESLint, которые охватывают ванильный JavaScript, добавьте специальные плагины Node.js, например [eslint-plugin-node](https://www.npmjs.com/package/eslint-plugin-node), [eslint-plugin-mocha](https://www.npmjs.com/package/eslint-plugin-mocha) и [eslint-plugin-node-security](https://www.npmjs.com/package/eslint-plugin-security).\n\n**Иначе:** Многие неисправные шаблоны кода Node.js могут скрыться за радаром. Например, разработчикам могут потребоваться файлы (variableAsPath) с переменной, указанной в качестве пути, которая позволяет злоумышленникам выполнить любой сценарий JS. Линтеры Node.js могут обнаружить такие паттерны и заранее сообщить о проблеме.\n\n<br/><br/>\n\n## ! [✔] 3.3 Начинайте кодовый блок фигурными скобками на той же линии\n\n**TL;DR:** Открывающие фигурные скобки блока кода должны находиться на той же строке, что и оператор открытия.\n\n### Пример кода\n\n```javascript\n// Делайте так\nfunction someFunction() {\n  // code block\n}\n\n// Избегайте\nfunction someFunction()\n{\n  // code block\n}\n```\n\n**Иначе:** Отклонение от этой передовой практики может привести к неожиданным результатам, как видно из топика StackOverflow ниже:\n\n🔗 [**Подробнее:** \"Why do results vary based on curly brace placement?\" (StackOverflow)](https://stackoverflow.com/questions/3641519/why-does-a-results-vary-based-on-curly-brace-placement)\n\n<br/><br/>\n\n## ! [✔] 3.4 Разделяйте свои выражения правильно\n\nНезависимо от того, используете ли вы точки с запятой или нет для разделения своих операторов, знание общих ошибок неправильных разрывов строк или автоматической вставки точек с запятой поможет вам устранить обычные синтаксические ошибки.\n\n**TL;DR:** Используйте ESLint для получения информации о проблемах разделения. [Prettier](https://prettier.io/) или [Standardjs](https://standardjs.com/) могут автоматически решить эти проблемы.\n\n**Иначе:** Как видно из предыдущего раздела, интерпретатор JavaScript автоматически добавляет точку с запятой в конце оператора, если его нет, или считает, что оператор не завершен, где он должен, что может привести к нежелательным результатам. , Вы можете использовать присваивания и избегать немедленного вызова выражений функций для предотвращения большинства непредвиденных ошибок.\n\n### 3.4 Пример кода\n\n```javascript\n// Делайте так\nfunction doThing() {\n    // ...\n}\n\ndoThing()\n\n// Делайте так\n\nconst items = [1, 2, 3]\nitems.forEach(console.log)\n\n// Избегайте — будет выброшена ошибка\nconst m = new Map()\nconst a = [1,2,3]\n[...m.values()].forEach(console.log)\n> [...m.values()].forEach(console.log)\n>  ^^^\n> SyntaxError: Unexpected token ...\n\n// Избегайте — будет выброшена ошибка\nconst count = 2 // it tries to run 2(), but 2 is not a function\n(function doSomething() {\n  // do something amazing\n}())\n// ставим точку с запятой перед непосредственно вызванной функцией, после определения const сохраняем возвращаемое значение анонимной функции в переменной или вообще избегаем последовательного написания IIFE\n```\n\n🔗 [**Подробнее:** \"Semi ESLint rule\"](https://eslint.org/docs/rules/semi)\n🔗 [**Подробнее:** \"No unexpected multiline ESLint rule\"](https://eslint.org/docs/rules/no-unexpected-multiline)\n\n<br/><br/>\n\n## ![✔] 3.5 Назовите свои функции\n\n**TL;DR:** Назовите все функции, включая замыкания и обратные вызовы. Избегайте анонимных функций. Это особенно полезно при профилировании приложения узла. Обозначение всех функций позволит вам легко понять, на что вы смотрите при проверке снимка памяти.\n\n**Иначе:** Отладка производственных проблем с использованием дампа ядра (снимка памяти) может стать сложной, так как вы замечаете значительное потребление памяти анонимными функциями.\n\n<br/><br/>\n\n## ![✔] 3.6 Используйте соглашения об именах переменных, констант, функций и классов\n\n**TL;DR:** Используйте **_lowerCamelCase_** при именовании констант, переменных и функций и **_UpperCamelCase_** (также с большой буквы) при именовании классов. Это поможет вам легко различать простые переменные/функции и классы, которые требуют реализации. Используйте описательные имена, но старайтесь, чтобы они были короткими.\n\n**Иначе:** Javascript -- это единственный язык в мире, который позволяет напрямую вызывать конструктор (\"Class\") без его инициализации. Следовательно, классы и конструкторы функций должщны различаться, начинаясь с UpperCamelCase.\n\n### 3.6 Пример кода\n\n```javascript\n// для класса мы используем UpperCamelCase\nclass SomeClassExample {}\n\n// для константы мы используем служебное слово const и lowerCamelCase\nconst config = {\n  key: \"value\",\n};\n\n// для переменных и функций мы используем lowerCamelCase\nlet someVariableExample = \"value\";\nfunction doSomething() {}\n```\n\n<br/><br/>\n\n## ![✔] 3.7 Предпочитайте const, а не let. Забудьте var\n\n**TL;DR:** Использование `const` означает, что как только переменная назначена, она не может быть переназначена. Предпочтение `const` поможет вам не поддаваться искушению использовать одну и ту же переменную для разных целей и сделает ваш код более понятным. Если переменная должна быть переназначена, например, в цикле for используйте `let`, чтобы объявить ее. Другим важным аспектом `let` является то, что переменная, объявленная с ее использованием, доступна только в той области блока, в которой она была определена. `var` является областью функции, а не областью блока и [не должен использоваться в ES6](https://hackernoon.com/why-you-shouldnt-use-var-anymore-f109a58b9b70) теперь, когда у вас есть `const` и `let` в вашем распоряжении.\n\n**Иначе:** Отладка становится намного более громоздкой, когда необходимо следовать за переменной, которая часто изменяется.\n\n🔗 [**Подробнее: JavaScript ES6+: var, let, or const?** ](https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75)\n\n<br/><br/>\n\n## ![✔] 3.8 Подключайте модули вначале, а не внутри функций\n\n**TL;DR:** Подключайте модули в начале каждого файла, до и вне каких-либо функций. Эта простая рекомендация не только поможет вам легко и быстро определить зависимости файла прямо вверху, но и позволит избежать пары потенциальных проблем.\n\n**Иначе:** Подключения выполняются синхронно с Node.js. Если они вызываются из функции, она может заблокировать обработку других запросов в более критическое время. Кроме того, если требуемый модуль или какая-либо из его собственных зависимостей выдает ошибку и приводит к сбою сервера, лучше узнать об этом как можно скорее, что может быть не так, если этот модуль требуется изнутри функции.\n\n<br/><br/>\n\n## ![✔] 3.9 Подключайте модули по папкам, а не по файлам напрямую\n\n**TL;DR:** При разработке модуля/библиотеки в папке поместите файл index.js, который раскрывает внутреннюю часть модуля, чтобы каждый потребитель проходил через него. Это служит \"интерфейсом\" для вашего модуля и облегчает будущие изменения, не нарушая контракт.\n\n**Иначе:** Изменение внутренней структуры файлов или подписи может нарушить интерфейс с клиентами.\n\n### 3.9 Пример кода\n\n```javascript\n// Делайте так\nmodule.exports.SMSProvider = require(\"./SMSProvider\");\nmodule.exports.SMSNumberResolver = require(\"./SMSNumberResolver\");\n\n// Избегайте\nmodule.exports.SMSProvider = require(\"./SMSProvider/SMSProvider.js\");\nmodule.exports.SMSNumberResolver = require(\"./SMSNumberResolver/SMSNumberResolver.js\");\n```\n\n<br/><br/>\n\n## ![✔] 3.10 Используйте оператор `===`\n\n**TL;DR:** Предпочитайте оператор строгого равенства `===` более слабому абстрактному оператору равенства `==`. `==` сравнивает две переменные после преобразования их в общий тип. В `===` нет преобразования типов, и обе переменные должны иметь одинаковый тип, чтобы быть равными.\n\n**Иначе:** Неравные переменные могут возвращать true при сравнении с оператором `==`.\n\n### 3.10 Пример кода\n\n```javascript\n\"\" == \"0\"; // false\n0 == \"\"; // true\n0 == \"0\"; // true\n\nfalse == \"false\"; // false\nfalse == \"0\"; // true\n\nfalse == undefined; // false\nfalse == null; // false\nnull == undefined; // true\n\n\" \\t\\r\\n \" == 0; // true\n```\n\nВсе приведенные выше операторы вернут false, если используются с `===`.\n\n<br/><br/>\n\n## ![✔] 3.11 Используйте Async Await, избегайте колбэков\n\n**TL;DR:** Node 8 LTS теперь имеет полную поддержку Async-await. Это новый способ работы с асинхронным кодом, который заменяет обратные вызовы и обещания. Async-await не блокирует и делает асинхронный код синхронным. Лучший подарок, который вы можете дать своему коду, -- это использовать async-await, который обеспечивает гораздо более компактный и знакомый синтаксис кода, такой как try-catch.\n\n**Иначе:** Обработка асинхронных ошибок в стиле обратного вызова, вероятно, самый быстрый путь в ад -- этот стиль вынуждает проверять ошибки повсюду, справляться с неудобным вложением кода и затрудняет рассуждение о потоке кода.\n\n🔗 [**Подробнее:** Guide to async await 1.0](https://github.com/yortus/asyncawait)\n\n<br/><br/>\n\n## ![✔] 3.12 Используйте стрелочные функции (=>)\n\n**TL;DR:** Хотя рекомендуется использовать async-await и избегать параметров функций при работе со старыми API, которые принимают обещания или обратные вызовы -- стрелочные функции делают структуру кода более компактной и поддерживают лексический контекст корневой функции (т.к. `this`)\n\n**Иначе:** Более длинный код (в функциях ES5) более подвержен ошибкам и неудобен для чтения.\n\n🔗 [**Подробнее: It’s Time to Embrace Arrow Functions**](https://medium.com/javascript-scene/familiarity-bias-is-holding-you-back-its-time-to-embrace-arrow-functions-3d37e1a9bb75)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#оглавление\">⬆ К началу</a></p>\n\n# `4. Тестирование и общие методы контроля качества`\n\n## ![✔] 4.1 Как минимум, напишите тестирование API (компонента)\n\n**TL;DR:** Большинство проектов просто не имеют автоматического тестирования из-за коротких сроков, или, как часто бывает, выхода из-под контроля и забрасывания \"проекта тестирования\". По этой причине расставьте приоритеты и начните с тестирования API, который является самым простым способом написания, и обеспечивает больший охват, чем модульное тестирование. Вы даже можете создавать тесты API без кода, используя такие инструменты, как [Postman](https://www.getpostman.com/). После этого, если у вас будет больше ресурсов и времени, перейдите к расширенным типам тестов, таким как модульное тестирование, тестирование БД, тестирование производительности и т.д.\n\n**Иначе:** Вы можете потратить долгие дни на написание модульных тестов, чтобы узнать, что вы получили только 20% покрытия системы.\n\n<br/><br/>\n\n## ![✔] 4.2 Включите 3 части в каждое название теста\n\n**TL;DR:** Заставьте тест говорить на уровне требований, чтобы он был понятен инженерам и разработчикам QA, которые не знакомы с внутренними компонентами кода. Укажите в названии теста, что тестируется (тестируемая единица), при каких обстоятельствах и каков ожидаемый результат.\n\n**Иначе:** Развертывание только что прошло, тест под названием \"Добавить продукт\" не прошел. Это говорит вам, что именно работает со сбоями?\n\n🔗 [**Подробнее: Включите 3 части в каждое название теста**](./sections/testingandquality/3-parts-in-name.russian.md)\n\n<br/><br/>\n\n## ![✔] 4.3 Структурные тесты AAA-подходом\n\n**TL;DR:** Структурируйте свои тесты с тремя хорошо разделенными секциями: Arrange, Act & Assert AAA). Первая часть включает в себя настройку теста, затем выполнение тестируемого модуля и, наконец, этап подтверждения. Следование этой структуре гарантирует, что читатель не тратит мозговые ЦП на понимание плана тестирования.\n\n**Иначе:** Не только вы тратите долгие ежедневные часы на понимание основного кода, теперь и то, что должно было быть простой частью дня (тестирование), напрягает ваш мозг.\n\n🔗 [**Read More: Structure tests by the AAA pattern**](./sections/testingandquality/aaa.russian.md)\n\n<br/><br/>\n\n## ![✔] 4.4. Обнаружение проблем с кодом с помощью линтера\n\n**TL;DR:** Используйте линтер кода для проверки базового качества и раннего обнаружения анти-паттернов. Запустите его перед любым тестом и добавьте его в качестве git-ловушки перед фиксацией, чтобы минимизировать время, необходимое для проверки и исправления любой проблемы. Также проверьте [Раздел 3](#3-Практики-стиля-кода) в разделе Практика стиля кода.\n\n**Иначе:** Вы можете не заметить передачу некоторого анти-паттерна и возможного уязвимого кода в вашу производственную среду.\n\n<br/><br/>\n\n## ![✔] 4.5 Избегайте глобальных тестовых приспособлений и параметров, добавляйте данные для каждого теста\n\n**TL;DR:** Чтобы предотвратить связывание тестов и легко рассуждать о последовательности тестов, каждый тест должен добавлять и воздействовать на свой собственный набор строк БД. Всякий раз, когда тест должен получить или предположить существование некоторых данных БД, он должен явно добавить эти данные и избегать изменения любых других записей.\n\n**Иначе:** Рассмотрим сценарий, в котором развертывание прерывается из-за неудачных тестов, теперь команда собирается потратить драгоценное время на исследование, которое заканчивается печальным выводом: система работает хорошо, однако тесты мешают друг другу и нарушают сборку.\n\n🔗 [**Подробнее: Избегайте глобальных тестовых приспособлений и параметров, добавляйте данные для каждого теста**](./sections/testingandquality/avoid-global-test-fixture.russian.md)\n\n<br/><br/>\n\n## ![✔] 4.6 Постоянно проверяйте уязвимые зависимости\n\n**TL;DR:** Даже самые уважаемые зависимости, такие как Express, имеют известные уязвимости. Это можно легко приручить, используя открытые и коммерческие инструменты, такие как 🔗 [npm audit](https://docs.npmjs.com/cli/audit) и 🔗[snyk.io](https://snyk.io), которые могут быть вызванны из вашего CI при каждой сборке.\n\n**Иначе:** Для обеспечения чистоты вашего кода от уязвимостей без использования специальных инструментов потребуется постоянно следить за публикациями в Интернете о новых угрозах. Довольно утомительно.\n\n<br/><br/>\n\n## ![✔] 4.7 Помечайте свои тесты\n\n**TL;DR:** Различные тесты должны выполняться в разных сценариях: быстрое раскуривание, без ввода-вывода, тесты должны выполняться, когда разработчик сохраняет или фиксирует файл, полные сквозные тесты обычно выполняются, когда отправлен новый запрос в репозиторий и т.д. Этого можно достичь, помечая тесты ключевыми словами, такими как #cold, #api, #sanity, чтобы вы могли использовать свой тестовый набор и вызывать нужное подмножество. Например, вот как вы бы вызывали только группу тестов на работоспособность с [Mocha](https://mochajs.org/): mocha --grep 'sanity'.\n\n**Иначе:** Запуск всех тестов, включая тесты, которые выполняют десятки запросов к БД, каждый раз, когда разработчик вносит небольшие изменения, может быть очень медленным и держит разработчиков подальше от запуска тестов.\n\n<br/><br/>\n\n## ![✔] 4.8 Проверьте ваше покрытие тестов, он помогает определить неправильные тестовые шаблоны\n\n**TL;DR:** Инструменты покрытия кода тестами, такие как [Istanbul](https://github.com/istanbuljs/istanbuljs)/[NYC](https://github.com/istanbuljs/nyc) хороши по 3 причинам: они предоставляются бесплатно (никаких усилий не требуется, чтобы воспользоваться этими отчетами) это помогает выявить уменьшение охвата тестирования и, наконец, что не менее важно, подчеркивает несоответствия тестирования: просматривая цветные отчеты о покрытии кода, вы можете заметить, например, области кода, которые никогда не тестируются, как предложения catch (то есть тесты вызывают только счастливые пути, а не то, как приложение ведет себя на ошибках). Установите его на сбой сборки, если охват падает ниже определенного порога.\n\n**Иначе:** Там не будет никакой автоматической метрики, сообщающей вам, когда большая часть вашего кода не покрыта тестированием.\n\n<br/><br/>\n\n## ![✔] 4.9 Проверяйте устаревшие пакеты\n\n**TL;DR:** Используйте предпочитаемый вами инструмент (например, 'npm outdated' или [npm-check-updates](https://www.npmjs.com/package/npm-check-updates)) для обнаружения установленных пакетов, которые устарели, внедрите эту проверку в конвейер CI и приводите к сбою сборки в серьезном сценарии. Например, серьезный сценарий может быть, когда установленный пакет имеет 5 исправлений патча позади (например, локальная версия 1.3.1 и версия репозитория 1.3.8) или помечен автором как устаревший -- убейте сборку и предотвратите развертывание этой версии.\n\n**Иначе:** Ваше производство будет запускать пакеты, которые были явно помечены их автором как рискованные.\n\n<br/><br/>\n\n## ![✔] 4.10 Используйте docker-compose для тестирования e2e\n\n**TL;DR:** Сквозное (e2e) тестирование, включает в себя живые данные, которые раньше были самым слабым звеном процесса CI, поскольку оно зависит от множества тяжелых сервисов, таких как DB. Docker-compose превращает эту проблему в простоту, создавая производственную среду, используя простой текстовый файл и простые команды. Это позволяет создавать все зависимые сервисы, БД и изолированную сеть для тестирования e2e. Наконец, что не менее важно, он может поддерживать среду без состояния, которая вызывается перед каждым набором тестов и умирает сразу после.\n\n**Иначе:** Без docker-compose команды должны поддерживать базу данных тестирования для каждой среды тестирования, включая машины разработчиков, синхронизировать все эти базы данных, чтобы результаты тестирования не менялись в зависимости от среды.\n\n<br/><br/>\n\n## ![✔] 4.11 Производите рефакторинг регулярно с использованием инструментов статического анализа\n\n**TL;DR:** Использование инструментов статического анализа помогает, предоставляя объективные способы улучшить качество кода и поддерживая его в обслуживании. Вы можете добавить инструменты статического анализа в свою сборку CI, чтобы она вызывала сбой при обнаружении запахов кода. Его основные преимущества при использовании простого линтинга -- это возможность проверять качество в контексте нескольких файлов (например, обнаруживать дубликаты), выполнять расширенный анализ (например, сложность кода) и следить за историей и развитием проблем с кодом. Два примера инструментов, которые вы можете использовать: [Sonarqube](https://www.sonarqube.org/) (2600+ [stars](https://github.com/SonarSource/sonarqube)) и [Code Climate](https://codeclimate.com/) (1500+ [stars](https://github.com/codeclimate/codeclimate)).\n\n**Иначе:** При плохом качестве кода ошибки и производительность всегда будут проблемой, которую не может исправить ни одна блестящая новая библиотека или современные функции.\n\n🔗 [**Подробнее: Рефакторинг**](./sections/testingandquality/refactoring.russian.md)\n\n<br/><br/>\n\n## ![✔] 4.12 Тщательно выбирайте свою CI-платформу (Jenkins или CircleCI или Travis или остальной мир)\n\n**TL;DR:** Ваша платформа непрерывной интеграции (CICD) будет содержать все инструменты качества (такие как тестирование и линтинг), поэтому она должна поставляться с динамичной экосистемой плагинов. [Jenkins](https://jenkins.io/) раньше использовался по умолчанию для многих проектов, поскольку у него самое большое сообщество и очень мощная платформа по цене сложной установки, которая требует крутой кривой обучения. В настоящее время стало намного проще настроить CI-решение с использованием инструментов SaaS, таких как [CircleCI](https://circleci.com) и других. Эти инструменты позволяют создать гибкий конвейер CI без необходимости управлять всей инфраструктурой. В конце концов, это компромисс между надежностью и скоростью -- тщательно выбирайте свою сторону.\n\n**Иначе:** Выбор какого-либо нишевого поставщика может заблокировать вас, когда вам понадобится дополнительная настройка. С другой стороны, работа с Jenkins может потратить драгоценное время на настройку инфраструктуры.\n\n🔗 [**Подробнее: Тщательно выбирайте платформу CI**](./sections/testingandquality/citools.russian.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#оглавление\">⬆ К началу</a></p>\n\n# `5. Переход к производственным практикам`\n\n## ![✔] 5.1. Мониторинг\n\n**TL;DR:** Мониторинг -- это игра для выявления проблем до того, как их решат клиенты, очевидно, этому следует придать беспрецедентную важность. Рынок перегружен предложениями, поэтому подумайте о том, чтобы начать с определения основных метрик, которым вы должны следовать (мои предложения в подробностях), затем перейти к дополнительным необычным функциям и выбрать решение, которое помечает все поля. Нажмите \"Подробнее\" ниже для обзора решений.\n\n**Иначе:** Отказ === разочарованные клиенты. Просто.\n\n🔗 [**Подробнее: Мониторинг!**](./sections/production/monitoring.russian.md)\n\n<br/><br/>\n\n## ![✔] 5.2. Увеличьте прозрачность, используя умную регистрацию\n\n**TL;DR:** Журналы могут быть тупым хранилищем операторов отладки или активатором красивой панели инструментов, которая рассказывает историю вашего приложения. Планируйте свою платформу ведения журналов с первого дня: как журналы собираются, хранятся и анализируются, чтобы обеспечить возможность извлечения желаемой информации (например, частоты ошибок, всей транзакции через службы и серверы и т.д.).\n\n**Иначе:** Вы в конечном итоге получаете черный ящик, о котором трудно подумать, затем вы начинаете переписывать все операторы регистрации, чтобы добавить дополнительную информацию.\n\n🔗 [**Подробнее: Сделайте ваше приложение прозрачным, используя умные логи**](./sections/production/smartlogging.russian.md)\n\n<br/><br/>\n\n## ![✔] 5.3. Делегируйте все возможное (например, gzip, SSL) обратному прокси\n\n**TL;DR:** Node ужасно плохо справляется с задачами, интенсивно использующими процессор, такими как архивирование, SSL и т.д. Вместо этого вы должны использовать \"настоящие\" сервисы промежуточного ПО, такие как nginx, HAproxy или сервисы облачного вендора.\n\n**Иначе:** Ваш бедный одиночный поток будет занят выполнением инфраструктурных задач вместо того, чтобы работать с ядром приложения, и производительность будет соответственно снижаться.\n\n🔗 [**Подробнее: Делегируйте все возможное (например, gzip, SSL) обратному прокси**](./sections/production/delegatetoproxy.russian.md)\n\n<br/><br/>\n\n## ![✔] 5.4. Блокируйте зависимости\n\n**TL;DR:** Ваш код должен быть одинаковым во всех средах, но удивительно, что npm по умолчанию позволяет смещать зависимости между средами -- при установке пакетов в различных средах он пытается получить последнюю версию пакета исправлений. Преодолеть это можно с помощью файлов конфигурации npm, .npmrc, которые сообщают каждой среде сохранять точную (не последнюю) версию каждого пакета. В качестве альтернативы, для более тонкого контроля используйте `npm shrinkwrap`. \\* Обновление: начиная с NPM5, зависимости по умолчанию заблокированы. Новый менеджер пакетов Yarn также предоставил нам покрытие по умолчанию.\n\n**Иначе:** QA тщательно протестирует код и утвердит версию, которая будет вести себя по-другому в производстве. Хуже того, на разных серверах в одном и том же производственном кластере может выполняться другой код.\n\n🔗 [**Подробнее: Блокируйте зависимости**](./sections/production/lockdependencies.russian.md)\n\n<br/><br/>\n\n## ![✔] 5.5. Защитите время безотказной работы, используя правильный инструмент\n\n**TL;DR:** Процесс должен продолжаться и перезапускаться при сбоях. Для простых сценариев может быть достаточно инструментов управления процессами, таких как PM2, но в современном \"докеризованном\" мире следует также рассмотреть инструменты управления кластерами.\n\n**Иначе:** Запуск десятков экземпляров без четкой стратегии и слишком большого количества инструментов (управление кластером, docker, PM2) может привести к хаосу DevOps.\n\n🔗 [**Подробнее: Защищайте и перезапускайте свой процесс в случае неудачи (используя правильный инструмент)**](./sections/production/guardprocess.russian.md)\n\n<br/><br/>\n\n## ![✔] 5.6. Используйте все ядра процессора\n\n**TL;DR:** В своей базовой форме приложение Node работает на одном ядре ЦП, в то время как все остальные не работают. Ваша обязанность -- копировать процесс Node и использовать все процессоры. Для небольших и средних приложений вы можете использовать Node Cluster или PM2. Для более крупного приложения рассмотрите возможность репликации процесса с использованием некоторого кластера Docker (например, K8S, ECS) или сценариев развертывания, основанных на системе инициализации Linux (например, systemd).\n\n**Иначе:** Ваше приложение, скорее всего, будет использовать только 25% доступных ресурсов (!) Или даже меньше. Обратите внимание, что типичный сервер имеет 4 или более ядер ЦП, для простого развертывания Node.js используется только 1 (даже при использовании сервисов PaaS, таких как AWS beanstalk!)\n\n🔗 [**Подробнее: Используйте все ядра процессора**](./sections/production/utilizecpu.russian.md)\n\n<br/><br/>\n\n## ![✔] 5.7. Создавайте \"конечную точку обслуживания\"\n\n**TL;DR:** Предоставьте набор информации, связанный с системой, например, использование памяти и REPL, и т.д. в защищенном API. Хотя настоятельно рекомендуется полагаться на стандартные инструменты и инструменты для боевых испытаний, некоторые ценные сведения и операции легче выполнять с помощью кода.\n\n**Иначе:** Вы обнаружите, что выполняете много \"диагностических развертываний\" -- отправка кода в производство только для извлечения некоторой информации в диагностических целях.\n\n🔗 [**Подробнее: Создавайте конечную точку обслуживания**](./sections/production/createmaintenanceendpoint.russian.md)\n\n<br/><br/>\n\n## ![✔] 5.8. Обнаружение ошибок и простоев с использованием продуктов APM\n\n**TL;DR:** Продукты для мониторинга приложений и производительности (a.k.a APM) проактивно измеряют кодовую базу и API, поэтому они могут автоматически выходить за рамки традиционного мониторинга и измерять общее взаимодействие пользователей между службами и уровнями. Например, некоторые продукты APM могут выделять транзакцию, которая загружается слишком медленно на стороне конечного пользователя, предлагая при этом основную причину.\n\n**Иначе:** Вы можете потратить огромные усилия на измерение производительности и времени простоя API, возможно, вы никогда не узнаете, какие ваши самые медленные части кода в реальном сценарии и как они влияют на UX.\n\n🔗 [**Подробнее: Уверенный пользовательский опыт с продуктами APM**](./sections/production/apmproducts.russian.md)\n\n<br/><br/>\n\n## ![✔] 5.9. Делайте ваш код готовым к работе\n\n**TL;DR:** Код с конечной целью, план производства с первого дня. Это звучит немного расплывчато, поэтому я собрал несколько советов по разработке, которые тесно связаны с техническим обслуживанием производства (см. ниже)\n\n**Иначе:** Чемпион мира по IT/DevOps не спасет плохо написанную систему.\n\n🔗 [**Подробнее: Делайте ваш код готовым к работе**](./sections/production/productioncode.russian.md)\n\n<br/><br/>\n\n## ![✔] 5.10. Измеряйте и защищайте использование памяти\n\n**TL;DR:** Node.js имеет противоречивые отношения с памятью: движок v8 имеет мягкие ограничения на использование памяти (1,4 ГБ), и существуют известные пути утечки памяти в коде Node -- таким образом, наблюдение за процессной памятью Node является обязательным. В небольших приложениях вы можете периодически измерять память с помощью команд оболочки, но в средних и больших приложениях стоит подумать о том, чтобы превратить ваши часы памяти в надежную систему мониторинга.\n\n**Иначе:** Ваша память процесса может пропускать сотни мегабайт в день, как это было в [Walmart](https://www.joyent.com/blog/walmart-node-js-memory-leak).\n\n🔗 [**Подробнее: Измеряйте и защищайте использование памяти**](./sections/production/measurememory.russian.md)\n\n<br/><br/>\n\n## ![✔] 5.11. Получайте ваши внешние ресурсы вне Node\n\n**TL;DR:** Обслуживание внешнего интерфейса с помощью специального промежуточного программного обеспечения (nginx, S3, CDN), потому что производительность Node действительно ухудшается при работе со многими статическими файлами из-за его однопоточной модели.\n\n**Иначе:** Ваш единственный поток Node будет занят потоковой передачей сотен файлов html/images/angular/react вместо того, чтобы выделять все свои ресурсы на задачи, для которой он был создан -- обслуживание динамического контента.\n\n🔗 [**Подробнее: Получайте ваши внешние ресурсы вне Node**](./sections/production/frontendout.russian.md)\n\n<br/><br/>\n\n## ![✔] 5.12. Не прописывайтесь на постоянку, убивайте свои серверы почти каждый день\n\n**TL;DR:** Храните любые типы данных (например, пользовательские сеансы, кэш, загруженные файлы) во внешних хранилищах данных. Попробуйте периодически \"убивать\" свои серверы или использовать \"безсерверную\" платформу (например, AWS Lambda), которая явно обеспечивает поведение без сохранения состояния.\n\n**Иначе:** Сбой на данном сервере приведет к простою приложения, а не просто к гибели неисправного компьютера. Более того, гибкость масштабирования станет более сложной из-за зависимости от конкретного сервера.\n\n🔗 [**Подробнее: Не прописывайтесь на постоянку, убивайте свои серверы почти каждый день**](./sections/production/bestateless.md)\n\n<br/><br/>\n\n## ![✔] 5.13. Используйте инструменты, которые автоматически обнаруживают уязвимости\n\n**TL;DR:** Даже самые уважаемые зависимости, такие как Express, имеют известные уязвимости (время от времени), которые могут подвергать систему риску. Это можно легко укротить, используя общественные и коммерческие инструменты, которые постоянно проверяют уязвимости и предупреждают (локально или на GitHub), некоторые могут даже сразу же их исправлять.\n\n**Иначе:** Для обеспечения чистоты кода от уязвимостей без использования специальных инструментов вам потребуется постоянно следить за публикациями в Интернете о новых угрозах. Довольно утомительно.\n\n🔗 [**Подробнее: Используйте инструменты, которые автоматически обнаруживают уязвимые зависимости**](./sections/production/detectvulnerabilities.russian.md)\n\n<br/><br/>\n\n## ![✔] 5.14. Назначьте идентификатор транзакции для каждого события журнала\n\n**TL;DR:** Назначьте один и тот же идентификатор, идентификатор транзакции: {некоторое значение}, каждой записи журнала в рамках одного запроса. Затем при проверке ошибок в журналах легко сделать вывод о том, что происходило до и после. К сожалению, этого нелегко добиться в Node из-за его асинхронной природы, см. Пример кодов внутри.\n\n**Иначе:** Глядя на журнал ошибок производства без контекста -- что произошло раньше -- становится намного сложнее и медленнее рассуждать о проблеме.\n\n🔗 [**Read More: Назначьте \"TransactionId\" для каждого вхождения журнала логирования**](./sections/production/assigntransactionid.russian.md)\n\n<br/><br/>\n\n## ![✔] 5.15. Устанавливайте NODE_ENV=production\n\n**TL;DR:** Установите для переменной среды NODE_ENV значение \"production\" или \"development\", чтобы указать, должны ли активироваться производственные оптимизации -- многие пакеты npm определяют текущую среду и оптимизируют свой код для того или иного выпуска.\n\n**Иначе:** Пропуск этого простого свойства может значительно снизить производительность. Например, при использовании Express для рендеринга на стороне сервера пропуск `NODE_ENV` замедляет его в три раза!\n\n🔗 [**Подробнее: Устанавливайте NODE_ENV=production**](./sections/production/setnodeenv.russian.md)\n\n<br/><br/>\n\n## ![✔] 5.16. Проектируйте автоматизированные, атомарные и без простоев на развертывание\n\n**TL;DR:** Исследования показывают, что команды, которые выполняют много развертываний, снижают вероятность серьезных производственных проблем. Быстрое и автоматическое развертывание, не требующее рискованных ручных операций и простоев служб, значительно улучшает процесс развертывания. Вероятно, вам следует добиться этого, используя Docker в сочетании с инструментами CI, поскольку они стали отраслевым стандартом для упрощенного развертывания.\n\n**Иначе:** Длительные развертывания -> простои производства и ошибки, связанные с персоналом -> команда неуверенная в развертывании -> меньше развертываний и функций.\n\n<br/><br/>\n\n## ![✔] 5.17. Используйте LTS-релиз Node.js\n\n**TL;DR:** Убедитесь, что вы используете LTS-версию Node.js для получения критических исправлений ошибок, обновлений безопасности и улучшений производительности.\n\n**Иначе:** Недавно обнаруженные ошибки или уязвимости могут быть использованы для эксплуатации приложения, работающего в производственной среде, и ваше приложение может стать неподдерживаемым различными модулями и усложнить поддержку.\n\n🔗 [**Подробнее: Используйте LTS-релиз Node.js в производстве**](./sections/production/LTSrelease.russian.md)\n\n<br/><br/>\n\n## ![✔] 5.18. Не маршрутизируйте журналы в приложении\n\n**TL;DR:** Места назначения журналов не должны жестко кодироваться разработчиками в коде приложения, но вместо этого должны определяться средой исполнения, в которой выполняется приложение. Разработчики должны записывать журналы в `stdout` с помощью утилиты logger и затем позвольте среде выполнения (контейнер, сервер и т.д.) направить поток `stdout` в соответствующее место назначения (т.е. Splunk, Graylog, ElasticSearch и т.д.).\n\n**Иначе:** Маршрутизация журналов обработки приложения === трудности масштабирования, потеря журналов, плохое разделение задач\n\n🔗 [**Подробнее: Код вашего приложения не должен обрабатывать журналы маршрутизации**](./sections/production/logrouting.russian.md)\n\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#оглавление\">⬆ К началу</a></p>\n\n# `6. Практики безопасности`\n\n<div align=\"center\">\n<img src=\"https://img.shields.io/badge/OWASP%20Threats-Top%2010-green.svg\" alt=\"54 items\"/>\n</div>\n\n## ![✔] 6.1. Пользуйтесь правилами безопасности линтера\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20XSS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Используйте связанные с безопасностью плагины для линтера, такие как [eslint-plugin-security](https://github.com/nodesecurity/eslint-plugin-security), чтобы обнаруживать уязвимости и проблемы безопасности на ранней стадии, насколько возможно, желательно, пока они кодируются. Это может помочь выявить слабые места безопасности, такие как использование eval, вызов дочернего процесса или импорт модуля со строковым литералом (например, пользовательский ввод). Нажмите \"Подробнее\" ниже, чтобы увидеть примеры кода, которые попадут под стражу безопасности.\n\n**Иначе:** То, что могло быть простым недостатком безопасности во время разработки, становится основной проблемой в производстве. Кроме того, проект может не следовать согласованным методам обеспечения безопасности кода, что приводит к появлению уязвимостей или секретных секретов, передаваемых в удаленные репозитории.\n\n🔗 [**Подробнее: Пользуйтесь правилами безопасности линтера**](./sections/security/lintrules.russian.md)\n\n<br/><br/>\n\n## ![✔] 6.2. Ограничивайте одновременные запросы с использованием промежуточного программного обеспечения\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** DOS-атаки очень популярны и относительно просты в проведении. Внедрите ограничение скорости с помощью внешней службы, такой как облачные балансировщики нагрузки, облачные брандмауэры, nginx, пакет [rate-limiter-flexible](https://www.npmjs.com/package/rate-limiter-flexible) или (для небольших и менее критичных приложений) промежуточное программное обеспечение, ограничивающее скорость (например, [express-rate-limit](https://www.npmjs.com/package/express-rate-limit))\n\n**Иначе:** Приложение может подвергнуться атаке, приводящей к отказу в обслуживании, когда реальные пользователи получают ухудшенный или недоступный сервис.\n\n🔗 [**Подробнее: Ограничивайте одновременные запросы с использованием балансировщика или промежуточного программного обеспечения**](./sections/security/limitrequests.russian.md)\n\n<br/><br/>\n\n## ![✔] 6.3 Извлекайте секреты из конфигурационных файлов или используйте пакеты для их шифрования\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A3:Sensitive%20Data%20Exposure%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Никогда не храните секреты в виде простого текста в файлах конфигурации или исходном коде. Вместо этого используйте системы секретного управления, такие как продукты Vault, секреты Kubernetes/Docker или переменные среды. В крайнем случае, секреты, хранящиеся в системе контроля версий, должны быть зашифрованы и обработаны (переходящие ключи, срок действия, аудит и т.д.). Используйте фиксаторы pre-commit/push, чтобы предотвратить случайную передачу секретов.\n\n**Иначе:** Контроль источников, даже для частных репозиториев, может быть ошибочно обнародован, после чего все секреты будут раскрыты. Доступ к управлению исходным кодом для внешней стороны непреднамеренно предоставит доступ к связанным системам (базам данных, API, службам и т.д.).\n\n🔗 [**Подробнее: Извлекайте секреты из конфигурационных файлов или используйте пакет npm, который их шифрует**](./sections/security/secretmanagement.russian.md)\n\n<br/><br/>\n\n## ![✔] 6.4. Предотвращайте уязвимости при внедрении запросов с помощью библиотек ORM/ODM\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Чтобы предотвратить инъекцию SQL/NoSQL и другие злонамеренные атаки, всегда используйте ORM/ODM или библиотеку базы данных, которая экранирует данные или поддерживает именованные или индексированные параметризованные запросы, а также проверяет пользовательский ввод на ожидаемые типы. Никогда не используйте строки шаблонов JavaScript или конкатенацию строк для ввода значений в запросы, поскольку это открывает для вашего приложения широкий спектр уязвимостей. Все авторитетные библиотеки доступа к данным Node.js (например, [Sequelize](https://github.com/sequelize/sequelize), [Knex](https://github.com/tgriesser/knex), [mongoose](https://github.com/Automattic/mongoose)) имеют встроенную защиту от инъекционных атак.\n\n**Иначе:** Непроверенный или недеанонимизированный пользовательский ввод может привести к внедрению оператора при работе с MongoDB для NoSQL, а отсутствие надлежащей системы очистки или ORM легко разрешит атаки с использованием SQL-инъекции, создав гигантскую уязвимость.\n\n🔗 [**Подробнее: Предотвращайте уязвимости при внедрении базы данных с помощью библиотек ORM/ODM или других пакетов DAL**](./sections/security/ormodmusage.russian.md)\n\n<br/><br/>\n\n## ! [✔] 6.5. Сборник общих рекомендаций по безопасности\n\n**TL;DR:** Это набор рекомендаций по безопасности, которые не связаны напрямую с Node.js -- реализация Node мало чем отличается от любого другого языка. Нажмите \"Подробнее\", чтобы просмотреть.\n\n🔗 [**Подробнее: Общие рекомендации по безопасности Node.js**](./sections/security/commonsecuritybestpractices.russian.md)\n\n<br/><br/>\n\n## ![✔] 6.6. Настраивайте заголовки ответа HTTP для повышения безопасности\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Ваше приложение должно использовать безопасные заголовки, чтобы предотвратить использование злоумышленниками распространенных атак, таких как межсайтовый скриптинг (XSS), клик-джеккинг и другие вредоносные атаки. Их можно легко настроить с помощью таких модулей, как [helmet](https://www.npmjs.com/package/helmet).\n\n**Иначе:** Злоумышленники могут выполнять прямые атаки на пользователей вашего приложения, что приводит к огромным уязвимостям безопасности.\n\n🔗 [**Подробнее: Используйте связанные с безопасностью заголовки для защиты вашего приложения от распространенных атак**](./sections/security/secureheaders.russian.md)\n\n<br/><br/>\n\n## ![✔] 6.7. Постоянно и автоматически проверяйте наличие уязвимых зависимостей\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Known%20Vulnerabilities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** В экосистеме npm для проекта характерно наличие множества зависимостей. Зависимости всегда следует контролировать при обнаружении новых уязвимостей. Используйте инструменты, такие как [npm audit](https://docs.npmjs.com/cli/audit) или [snyk](https://snyk.io/), чтобы отслеживать, мониторить и исправлять уязвимые зависимости. Интегрируйте эти инструменты с настройкой CI, чтобы вы могли поймать уязвимую зависимость, прежде чем она попадет в производство.\n\n**Иначе:** Злоумышленник может обнаружить ваш веб-фреймворк и атаковать все его известные уязвимости.\n\n🔗 [**Подробнее: Постоянно и автоматически проверяйте наличие уязвимых зависимостей**](./sections/security/dependencysecurity.russian.md)\n\n<br/><br/>\n\n## ![✔] 6.8. Избегайте использования криптографической библиотеки Node.js для обработки паролей, используйте Bcrypt\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Пароли или секреты (ключи API) должны храниться с использованием безопасной функции hash+ alt, такой как `bcrypt`, которая должна быть предпочтительным выбором по сравнению с реализацией JavaScript из-за соображений производительности и безопасности.\n\n**Иначе:** Пароли или секреты, которые сохраняются без использования защищенной функции, уязвимы для взлома и атак по словарю, которые в конечном итоге приведут к их раскрытию.\n\n🔗 [**Подробнее: Не используйте криптографическую библиотеку Node.js для паролей, используйте Bcrypt**](./sections/security/bcryptpasswords.russian.md)\n\n<br/><br/>\n\n## ! [✔] 6.9. Экранируйте вывод HTML, JS и CSS\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Ненадежные данные, которые отправляются в браузер, могут выполняться вместо того, чтобы просто отображаться, это обычно называется атакой между сайтами (XSS). Смягчите это, используя выделенные библиотеки, которые явно помечают данные как чистый контент, который никогда не должен выполняться (т.е. кодирование, экранирование).\n\n**Иначе:** Злоумышленник может сохранить вредоносный код JavaScript в вашей БД, который затем будет отправлен бедным клиентам как есть.\n\n🔗 [**Подробнее: Экранируйте вывод**](./sections/security/escape-output.russian.md)\n\n<br/><br/>\n\n## ![✔] 6.10. Проверяйте входящие схемы JSON\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7: XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A8:Insecured%20Deserialization%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Проверьте полезную нагрузку тела входящих запросов и убедитесь, что она соответствует ожиданиям, сразу же отказывайте, если это будет не так. Чтобы избежать утомительного кодирования проверки в каждом маршруте, вы можете использовать упрощенные схемы проверки на основе JSON, такие как [jsonschema](https://www.npmjs.com/package/jsonschema) или [joi](https://www.npmjs.com/package/joi).\n\n**Иначе:** Ваша щедрость и разрешительный подход значительно увеличивают поверхность атаки и побуждают злоумышленника опробовать множество входных данных, пока они не найдут какую-то комбинацию для сбоя приложения.\n\n🔗 [**Подробнее: Проверяйте входящие JSON схемы**](./sections/security/validation.russian.md)\n\n<br/><br/>\n\n## ![✔] 6.11. Поддерживайте черный список JWT\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** При использовании веб-токенов JSON (например, с [Passport.js](https://github.com/jaredhanson/passport)) по умолчанию отсутствует механизм для отзыва доступа из выданных токенов. Как только вы обнаружите какое-либо злонамеренное действие пользователя, у вас не будет возможности помешать им получить доступ к системе, если у них есть действующий токен. Смягчите это, внедрив черный список ненадежных токенов, которые проверяются при каждом запросе.\n\n**Иначе:** Устаревшие или неуместные токены могут быть использованы злонамеренно для доступа к приложению третьей стороной, которая может выдавать себя за владельца токена.\n\n🔗 [**Подробнее: Реализовывайте поддержку внесения JWT в черный список**](./sections/security/expirejwt.russian.md)\n\n<br/><br/>\n\n## ![✔] 6.12. Предотвращайте атаки методом грубой силы против авторизации\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A9:Broken%20Authentication%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Простой и мощный метод заключается в ограничении попыток авторизации с использованием двух метрик:\n\n1. Во-первых, это число последовательных неудачных попыток одного и того же пользователя с уникальным идентификатором и IP-адресом.\n2. Во-вторых, количество неудачных попыток с IP-адреса в течение длительного периода времени. Например, заблокируйте IP-адрес, если он делает 100 неудачных попыток за один день.\n\n**Иначе:** Злоумышленник может выполнить неограниченное количество автоматических попыток ввода пароля для получения доступа к привилегированным учетным записям в приложении.\n\n🔗 [**Подробнее: Предотвращайте атаки методом грубой силы против авторизации**](./sections/security/login-rate-limit.russian.md)\n\n<br/><br/>\n\n## ![✔] 6.13. Запускайте Node.js как пользователь без полномочий root\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A5:Broken%20Access%20Access%20Control-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Существует распространенный сценарий, когда Node.js запускается от имени пользователя root с неограниченными разрешениями. Например, это поведение по умолчанию в контейнерах Docker. Рекомендуется создать пользователя без полномочий root и либо \"запечь\" его в образе Docker (примеры приведены ниже), либо запустить процесс от имени этого пользователя, вызвав контейнер с флагом \"-u username\".\n\n**Иначе:** Злоумышленник, которому удается запустить скрипт на сервере, получает неограниченную власть над локальной машиной (например, он может изменить iptable и перенаправить трафик на свой сервер).\n\n🔗 [**Подробнее: Запускайте Node.js как пользователь без полномочий root**](./sections/security/non-root-user.russian.md)\n\n<br/><br/>\n\n## ![✔] 6.14. Ограничьте размер полезной нагрузки, используя обратный прокси или промежуточное ПО\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A8:Insecured%20Deserialization%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Чем больше полезная нагрузка на тело, тем сложнее ваш отдельный поток обрабатывает ее. Это возможность для злоумышленников поставить серверы на колени без огромного количества запросов (атаки DOS/DDOS). Уменьшите это, ограничивая размер тела входящих запросов на границе (например, брандмауэр, ELB) или настраивая [express body parser](https://github.com/expressjs/body-parser), чтобы принимать только полезные данные небольшого размера.\n\n**Иначе:** Вашему приложению придется иметь дело с большими запросами, неспособными обработать другую важную работу, которую он должен выполнить, что приводит к снижению производительности и уязвимости к атакам DOS.\n\n🔗 [**Подробнее: Ограничивайте размер полезной нагрузки с помощью обратного прокси или промежуточного ПО**](./sections/security/requestpayloadsizelimit.russian.md)\n\n<br/><br/>\n\n## ![✔] 6.15. Избегайте JavaScript eval утверждений\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** `eval` -- это зло, поскольку оно позволяет выполнять пользовательский код JavaScript во время выполнения. Это не только проблема производительности, но и важная проблема безопасности из-за вредоносного кода JavaScript, который может быть получен из пользовательского ввода. Другой языковой особенностью, которую следует избегать, является конструктор `new Function`. `setTimeout` и`setInterval` также никогда не должны передавать динамический код JavaScript.\n\n**Иначе:** Вредоносный код JavaScript находит путь в текст, передаваемый в `eval` или другие функции оценки языка JavaScript в режиме реального времени, и получает полный доступ к разрешениям JavaScript на странице. Эта уязвимость часто проявляется как атака XSS.\n\n🔗 [**Подробнее: Избегайте JavaScript eval утверждений**](./sections/security/avoideval.russian.md)\n\n<br/><br/>\n\n## ![✔] 6.16. Предотвращайте ваше однопоточное выполнение от перегрузки злонамеренным RegEx\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Регулярные выражения, будучи удобными, представляют реальную угрозу для приложений JavaScript в целом и платформы Node.js в частности. Пользовательский ввод для сопоставления текста может потребовать значительного количества циклов ЦП для обработки. Обработка RegEx может быть неэффективной до такой степени, что один запрос, который проверяет 10 слов, может заблокировать весь цикл событий на 6 секунд и установить ЦП на 🔥. По этой причине предпочитайте сторонние пакеты проверки, такие как [validator.js](https://github.com/chriso/validator.js) вместо написания собственных шаблонов Regex, или используйте [safe-regex](https://github.com/substack/safe-regex) для обнаружения уязвимых шаблонов регулярных выражений.\n\n**Иначе:** Плохо написанные регулярные выражения могут быть подвержены DoS-атакам регулярного выражения, которые полностью блокируют цикл обработки событий. Например, популярный пакет `момент` был посчитан уязвимым для вредоносного использования RegEx в ноябре 2017 года.\n\n🔗 [**Подробнее: Предотвращайте ваше однопоточное выполнение от перегрузки злонамеренным RegEx**](./sections/security/regex.russian.md)\n\n<br/><br/>\n\n## ![✔] 6.17. Избегайте загрузки модулей с использованием переменных\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Избегайте подключения/импорта другого файла с путем, который был задан в качестве параметра из-за опасений, что он мог возникнуть из пользовательского ввода. Это правило может быть расширено для общего доступа к файлам (то есть `fs.readFile ()`) или для доступа к другим чувствительным ресурсам с помощью динамических переменных, происходящих из пользовательского ввода. [Eslint-plugin-security](https://www.npmjs.com/package/eslint-plugin-security) линтер может ловить такие шаблоны и предупреждать их достаточно рано.\n\n**Иначе:** Вредоносный пользовательский ввод может найти путь к параметру, который используется для запроса измененных файлов, например, ранее загруженного файла в файловой системе, или для доступа к уже существующим системным файлам.\n\n🔗 [**Подробнее: Избегайте загрузки модулей с использованием переменных**](./sections/security/safemoduleloading.russian.md)\n\n<br/><br/>\n\n## ![✔] 6.18. Запускайте небезопасный код в песочнице\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** При выполнении задачи запуска внешнего кода, который дается во время выполнения (например, плагин), используйте любую среду исполнения \"песочницы\", которая изолирует и защищает основной код от плагина. Это может быть достигнуто с помощью выделенного процесса (например, `cluster.fork()`), безсерверной среды или выделенных пакетов npm, которые действуют как песочница.\n\n**Иначе:** Плагин может атаковать с помощью бесконечного множества вариантов, таких как бесконечные циклы, перегрузка памяти и доступ к чувствительным переменным среды процесса.\n\n🔗 [**Подробнее: Запускайте небезопасный код в песочнице**](./sections/security/sandbox.russian.md)\n\n<br/><br/>\n\n## ![✔] 6.19. Будьте особенно осторожны при работе с дочерними процессами\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A7:XSS%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A4:External%20Entities%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Избегайте использования дочерних процессов, когда это возможно, а также проверяйте и санируйте входные данные, чтобы смягчить атаки с использованием инъекций оболочки, если это необходимо. Предпочитайте использовать `child_process.execFile`, который по определению будет выполнять только одну команду с набором атрибутов и не позволит расширять параметры оболочки.\n\n**Иначе:** Наивное использование дочерних процессов может привести к удаленному выполнению команды или атакам внедрения оболочки из-за того, что злонамеренный пользовательский ввод передан неантизированной системной команде.\n\n🔗 [**Подробнее: Будьте осторожны при работе с дочерними процессами**](./sections/security/childprocesses.russian.md)\n\n<br/><br/>\n\n## ![✔] 6.20. Скрывайте детали ошибок от клиентов\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Встроенный экспресс-обработчик ошибок по умолчанию скрывает детали ошибок. Однако велики шансы на то, что вы реализуете свою собственную логику обработки ошибок с помощью пользовательских объектов ошибок (которые многие считают наилучшей практикой). Если вы это сделаете, убедитесь, что не вернули весь объект Error клиенту, который может содержать некоторые важные сведения о приложении.\n\n**Иначе:** Чувствительная информация о приложении, такая как пути к файлам сервера, используемые сторонние модули и другие внутренние рабочие процессы приложения, которые могут быть использованы злоумышленником, может быть утечка из информации, найденной в трассировке стека.\n\n🔗 [**Подробнее: Скрывайте детали ошибок от клиентов**](./sections/security/hideerrors.russian.md)\n\n<br/><br/>\n\n## ![✔] 6.21. Конфигурируйте 2FA для npm или Yarn\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Любой шаг в цепочке разработки должен быть защищен с помощью MFA (многофакторная аутентификация), npm/Yarn -- прекрасная возможность для злоумышленников, которые могут заполучить пароль разработчика. Используя учетные данные разработчика, злоумышленники могут внедрить вредоносный код в библиотеки, которые широко установлены в проектах и ​​службах. Может быть, даже через Интернет, если опубликованы в открытом доступе. Включение 2-факторной аутентификации в npm оставляет почти нулевые шансы для злоумышленников изменить код вашего пакета.\n\n**Иначе:** [Have you heard about the eslint developer who's password was hijacked?](https://medium.com/@oprearocks/eslint-backdoor-what-it-is-and-how-to-fix-the-issue-221f58f1a8c8)\n\n<br/><br/>\n\n## ![✔] 6.22. Модифицируйте настройки промежуточного программного обеспечения сеанса\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** У каждого веб-фреймворка и технологии есть свои известные недостатки -- сообщить злоумышленнику, какой веб-фреймворк мы используем -- это большая помощь для него. Использование настроек по умолчанию для промежуточного программного обеспечения сеансов может подвергнуть ваше приложение атакам, направленным на модули и фреймворки, аналогично заголовку `X-Powered-By`. Попробуйте скрыть все, что идентифицирует и раскрывает ваш технический стек (например, Node.js, express).\n\n**Иначе:** Файлы cookie могут быть отправлены по незащищенным соединениям, и злоумышленник может использовать идентификатор сеанса для определения базовой структуры веб-приложения, а также уязвимостей, специфичных для модуля.\n\n🔗 [**Подробнее: Изменяйте настройки промежуточного программного обеспечения сеанса по умолчанию**](./sections/security/sessions.russian.md)\n\n<br/><br/>\n\n## ![✔] 6.23. Избегайте DOS-атак, явно указав, когда должен произойти сбой процесса\n\n<a href=\"https://www.owasp.org/index.php/Denial_of_Service\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20DDOS%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Процесс Node завершится сбоем, если ошибки не будут обработаны. Многие лучшие практики даже рекомендуют завершить работу, даже если ошибка была обнаружена и обработана. Например, Express будет аварийно завершать работу при любой асинхронной ошибке -- если только вы не заключите маршруты в условие catch. Это открывает очень приятное место для атак злоумышленников, которые распознают, какой ввод вызывает сбой процесса, и повторно отправляют один и тот же запрос. Мгновенного решения этой проблемы не существует, но несколько методов могут смягчить боль: оповещение с критической серьезностью каждый раз, когда происходит сбой процесса из-за необработанной ошибки, проверяет ввод и избегает сбоя процесса из-за неправильного ввода пользователя, оборачивает все маршруты с помощью catch и не рушится при возникновении ошибки в запросе (в отличие от того, что происходит глобально).\n\n**Иначе:** Это просто обоснованное предположение: дано множество приложений Node.js, если мы попытаемся передать пустое тело JSON всем запросам POST -- несколько приложений потерпит крах. В этот момент мы можем просто повторить отправку одного и того же запроса, чтобы легко положить эти приложения.\n\n<br/><br/>\n\n## ![✔] 6.24. Предотвращайте небезопасные перенаправления\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A1:Injection%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Перенаправления, которые не проверяют пользовательский ввод, могут позволить злоумышленникам запускать фишинговые мошенничества, красть учетные данные пользователя и выполнять другие вредоносные действия.\n\n**Иначе:** Если злоумышленник обнаружит, что вы не проверяете внешний вводимый пользователем ввод, он может воспользоваться этой уязвимостью, разместив специально созданные ссылки на форумах, в социальных сетях и других общедоступных местах, чтобы пользователи могли щелкнуть по нему.\n\n🔗 [**Подробнее: Предотвращайте небезопасные перенаправления**](./sections/security/saferedirects.russian.md)\n\n<br/><br/>\n\n## ![✔] 6.25. Избегайте публикации секретов в реестре npm\n\n<a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\" target=\"_blank\"><img src=\"https://img.shields.io/badge/%E2%9C%94%20OWASP%20Threats%20-%20A6:Security%20Misconfiguration%20-green.svg\" alt=\"\"/></a>\n\n**TL;DR:** Следует принять меры предосторожности, чтобы избежать риска случайной публикации секретов в открытых реестрах npm. Файл `.npmignore` может использоваться для внесения в черный список определенных файлов или папок, или массив`files` в `package.json` может выступать в качестве белого списка.\n\n**Иначе:** Ключи API вашего проекта, пароли или другие секреты открыты для злоупотребления любым, кто сталкивается с ними, что может привести к финансовым потерям, подлогу и другим рискам.\n\n🔗 [**Подробнее: Избегайте публикации секретов в реестре npm**](./sections/security/avoid_publishing_secrets.russian.md)\n<br/><br/><br/>\n\n<p align=\"right\"><a href=\"#оглавление\">⬆ К началу</a></p>\n\n# `7. Черновик: Практики эффективности`\n\n## Наши соавторы работают над этим разделом. [Хотите присоединиться?](Https://github.com/goldbergyoni/nodebestpractices/issues/256)\n\n<br/><br/>\n\n## ![✔] 7.1. Не блокируйте цикл событий\n\n**TL;DR:** Избегайте ресурсоемких задач, поскольку они будут блокировать однопоточный цикл обработки событий, и выгружайте их в выделенный поток, процесс или даже другую технологию в зависимости от контекста.\n\n**Иначе:** Поскольку цикл обработки событий заблокирован, Node.js не сможет обработать другой запрос, что приведет к задержкам для одновременных пользователей. **3000 пользователей ждут ответа, контент готов к отправке, но один-единственный запрос не позволяет серверу отправить результаты обратно**\n\n🔗 [**Read More: Не блокируйте цикл событий**](./sections/performance/block-loop.russian.md)\n\n<br/><br/><br/>\n\n## ![✔] 7.2. Предпочитайте нативные методы JS, а не пользовательские утилиты типа Lodash\n\n**TL;DR:** Часто более утомительно использовать служебные библиотеки, такие как `lodash` и `underscore`, по сравнению с нативными методами, так как это приводит к ненужным зависимостям и снижению производительности.\nИмейте в виду, что с введением нового движка V8 наряду с новыми стандартами ES собственные методы были улучшены таким образом, что теперь он примерно на 50% быстрее, чем служебные библиотеки.\n\n**Иначе:** Вам придется поддерживать менее эффективные проекты, где вы могли бы просто использовать то, что **уже** доступно или иметь дело с еще несколькими строками в обмен на еще несколько файлов.\n\n🔗 [**Подробнее: Предпочитайте нативные методы JS над пользовательскими утилитами, такими как Lodash**](./sections/performance/nativeoverutil.russian.md)\n\n<br/><br/><br/>\n\n# Вехи\n\nЧтобы поддерживать это руководство и обновлять его, мы постоянно обновляем и совершенствуем рекомендации и лучшие практики с помощью сообщества. Вы можете следить за нашими [вехами](https://github.com/goldbergyoni/nodebestpractices/milestones) и присоединиться к рабочим группам, если хотите внести свой вклад в этот проект.\n\n<br/>\n\n## Переводы\n\nВсе переводы предоставлены сообществом. Мы будем рады получить любую помощь с готовыми, текущими или новыми переводами!\n\n### Завершенные переводы\n\n- ![BR](./assets/flags/BR.png) [Brazilian Portuguese](./README.brazilian-portuguese.md) - Любезно предоставлено [Marcelo Melo](https://github.com/marcelosdm)\n- ![CN](./assets/flags/CN.png) [Chinese](./README.chinese.md) - Любезно предоставлено [Matt Jin](https://github.com/mattjin)\n- ![RU](./assets/flags/RU.png) [Russian](./README.russian.md) - Любезно предоставлено [Alex Ivanov](https://github.com/contributorpw)\n- ![EU](./assets/flags/EU.png) [Basque](README.basque.md) - Любезно предоставлено [Ane Diaz de Tuesta](https://github.com/anediaz) & Joxefe Diaz de Tuesta\n\n### Переводы в процессе\n\n- ![FR](./assets/flags/FR.png) [French](https://github.com/gaspaonrocks/nodebestpractices/blob/french-translation/README.french.md) ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/129))\n- ![HE](./assets/flags/HE.png) Hebrew ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/156))\n- ![KR](./assets/flags/KR.png) [Korean](README.korean.md) - Любезно предоставлено [Sangbeom Han](https://github.com/uronly14me) ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/94))\n- ![ES](./assets/flags/ES.png) [Spanish](https://github.com/goldbergyoni/nodebestpractices/blob/spanish-translation/README.spanish.md) ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/95))\n- ![TR](./assets/flags/TR.png) Turkish ([Discussion](https://github.com/goldbergyoni/nodebestpractices/issues/139))\n\n<br/><br/>\n\n## Руководящий комитет\n\nПознакомьтесь с членами руководящего комитета -- людьми, которые работают вместе, чтобы обеспечить управление и дальнейшее руководство проектом. Кроме того, каждый член комитета руководит проектом, отслеживаемым в рамках наших [проектов Github](https://github.com/goldbergyoni/nodebestpractices/projects).\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/yoni.png\"/>\n\n[Yoni Goldberg](https://github.com/goldbergyoni)\n<a href=\"https://twitter.com/goldbergyoni\"><img src=\"assets/images/twitter-s.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://goldbergyoni.com\"><img src=\"assets/images/www.png\" width=\"16\" height=\"16\"></img></a>\n\nНезависимый консультант Node.js, который работает с клиентами в США, Европе и Израиле над созданием масштабируемых приложений Node. Многие из приведенных выше лучших практик были впервые опубликованы на [goldbergyoni.com](https://goldbergyoni.com). Свяжитесь с Yoni как @goldbergyoni или me@goldbergyoni.com\n\n<br/>\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/bruno.png\"/>\n\n[Bruno Scheufler](https://github.com/BrunoScheufler)\n<a href=\"https://brunoscheufler.com/\"><img src=\"assets/images/www.png\" width=\"16\" height=\"16\"></img></a>\n\n💻 веб-инженер полного цикла, энтузиаст Node.js и GraphQL\n\n<br/>\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/kyle.png\"/>\n\n[Kyle Martin](https://github.com/js-kyle)\n<a href=\"https://twitter.com/kylemartin_93\"><img src=\"assets/images/twitter-s.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://www.linkedin.com/in/kylemartinnz\"><img src=\"assets/images/linkedin.png\" width=\"16\" height=\"16\"></img></a>\n\nРазработчик полного цикла и инженер по надежности сайтов из Новой Зеландии, заинтересованный в безопасности веб-приложений, а также в разработке и создании приложений Node.js для работы в глобальном масштабе.\n\n<br/>\n\n<img align=\"left\" width=\"100\" height=\"100\" src=\"assets/images/members/sagir.png\"/>\n\n[Sagir Khan](https://github.com/sagirk)\n<a href=\"https://twitter.com/sagir_k\"><img src=\"assets/images/twitter-s.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://sagirk.com\"><img src=\"assets/images/www.png\" width=\"16\" height=\"16\"></img></a>\n<a href=\"https://linkedin.com/in/sagirk\"><img src=\"assets/images/linkedin.png\" width=\"16\" height=\"16\"></img></a>\n\nВысококвалифицированный специалист по JavaScript и его экосистеме -- React, Node.js, MongoDB, практически все, что связано с использованием JavaScript/JSON на любом уровне системы -- создающий продукт с использованием веб-платформы для самых узнаваемых брендов мира. Индивидуальный член Фонда Node.js, сотрудничающий в рамках Сообщества Committee's Website Redesign Strategic Initiative.\n\n<br/>\n\n## Соавторы\n\nСпасибо всем нашим соавторам! 🙏\n\nНаши соавторы являются участниками, которые регулярно вносят свой вклад в хранилище, предлагая новые лучшие практики, разбирая проблемы, просматривая запросы на изменение и многое другое. Если вы заинтересованы в том, чтобы помочь нам научить тысячи людей создавать более качественные приложения Node.js, ознакомьтесь с нашими [руководством для соавторов](./.operations/CONTRIBUTING.md) 🎉\n\n| <a href=\"https://github.com/idori\" target=\"_blank\"><img src=\"assets/images/members/ido.png\" width=\"75\" height=\"75\"/></a> | <a href=\"https://github.com/TheHollidayInn\" target=\"_blank\"><img src=\"assets/images/members/keith.png\" width=\"75\" height=\"75\"/></a> |\n| :---------------------------------------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------------------------------------------------: |\n|                                    [Ido Richter (Founder)](https://github.com/idori)                                    |                                        [Keith Holliday](https://github.com/TheHollidayInn)                                         |\n\n### Прошлые соавторы\n\n| <a href=\"https://github.com/refack\" target=\"_blank\"><img src=\"assets/images/members/refael.png\" width=\"50\" height=\"50\"/></a> |\n| :-------------------------------------------------------------------------------------------------------------------------: |\n|                                        [Refael Ackermann](https://github.com/refack)                                        |\n\n<br/>\n\n## Благодарности\n\nМы ценим любой вклад, от одного исправленного слова до новой лучшей практики. Список участников и [документация по поддержке тут!](./README.md#contributors-)\n\n<br/><br/><br/>\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.56,
          "content": "{\n  \"name\": \"nodebestpractices\",\n  \"version\": \"1.0.0\",\n  \"description\": \"[✔]: assets/images/checkbox-small-blue.png\",\n  \"main\": \"gen-html.js\",\n  \"scripts\": {\n    \"lint\": \"markdownlint ./README*.md\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/goldbergyoni/nodebestpractices.git\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/goldbergyoni/nodebestpractices/issues\"\n  },\n  \"homepage\": \"https://github.com/goldbergyoni/nodebestpractices#readme\",\n  \"dependencies\": {\n    \"markdownlint-cli\": \"^0.18.0\"\n  }\n}\n"
        },
        {
          "name": "sections",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}