{
  "metadata": {
    "timestamp": 1736709736877,
    "page": 144,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "raysan5/raygui",
      "stars": 3735,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0234375,
          "content": "*.h linguist-language=C\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4736328125,
          "content": "# Object files\n*.o\n*.ko\n*.obj\n*.elf\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Libraries\n*.lib\n*.a\n*.la\n*.lo\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n*.i*86\n*.x86_64\n*.hex\n\n# Debug files\n*.dSYM/\n*.su\n\n# VSCode files\n.vscode/\n\n\n# Ignore files build by Visual Studio\n[Dd]ebug\n[Rr]elease\n*.vs\n*.obj\n*.pdb\n*.aps\n*.user\n# *.vcproj\n# *.vcxproj*\n# *.sln\n*.vspscc\n*_i.c\n*.i\n*.icf\n*_p.c\n*.ncb\n*.suo\n*.tlb\n*.tlh\n*.bak\n*.cache\n*.ilk\n*.log\n\nbuild"
        },
        {
          "name": "HISTORY.md",
          "type": "blob",
          "size": 2.857421875,
          "content": "## raygui history\n\nraygui development started on December 2014 by two internship students (Kevin and Daniel) guided by me, objective was creating a simple and easy-to-use immediate-mode-gui module for raylib, intended for tools development. On June 2015, library was mostly functional (including basic controls) and we started working in the styling posibilities for the library, focusing on an easy way to style controls properties. Consequently, development of [rGuiStyler](https://raylibtech.itch.io/rguistyler) also started at that point... but resources were quite limited and project was stopped for several months, most of the time was invested in [raylib](https://github.com/raysan5/raylib) development.\n\nOn June 2016, project was picked up again and raygui 1.0 was released by the end of that month. During August 2016, raygui was used to develop [rFXGen](https://github.com/raysan5/rfxgen) and also an early protoype of [rGuiLayout](https://raylibtech.itch.io/rguilayout), those tools were a testbed for the library. By the end of 2016, raygui project development was stopped again for several months.\n\nOn June 2017, a complete redesign of the library started, almost from scratch, all functions were reviewed and mostly rewritten and a brand new styling system was developed. The objective was using raygui professionally in several tools. It was the beginning of raygui 2.0.\n\nOn January 2018, two students (Adria and Jordi) started working on raygui and related tools; library evolved considerably in the following months. [rGuiStyler](https://raylibtech.itch.io/rguistyler) was completely redesigned and rewritten from scratch (rGuiStyler v2.0). [rGuiLayout](https://raylibtech.itch.io/rguilayout) turned from a protoype into a professional software and raygui reached version 2.0 with plenty of new controls and features.\n\nOn July 2018, I started working full time on raygui and its tools, improving the library considerably. On October 2018 [Sergio](https://github.com/anidealgift) joined the project and focused efforts on [rGuiLayout](https://raylibtech.itch.io/rguilayout) tool redesign. We reached 2019 with continuous improvement and redesigns of mostly all raygui functions along rGuiLayout 2.0 and rGuiStyler 3.0.\n\nOn March 2019, the first set of new raygui tools was published: [rFXGen 2.0](https://raylibtech.itch.io/rfxgen), [rTexViewer 1.0](https://raylibtech.itch.io/rtexviewer) and [rIconPacker 1.0](https://raylibtech.itch.io/riconpacker).\n\nFrom March 2019 to June 2019 raygui development decelerated, Sergio left the project and efforts were focused on raylib 2.5, during this time one external contributor, [Vlad Adrian](https://github.com/Demizdor), completely redesigned `GuiTextBox()` and related controls and version was bumped to raygui 2.5.\n\nDuring summer 2019 lots of raygui functions were reviewed, breaking compatibility to any previous version and pointing to a **raygui 2.6** update.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.87109375,
          "content": "zlib License\n\t\nCopyright (c) 2014-2025 Ramon Santamaria (@raysan5)\n\nThis software is provided \"as-is\", without any express or implied warranty. In no event \nwill the authors be held liable for any damages arising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose, including commercial \napplications, and to alter it and redistribute it freely, subject to the following restrictions:\n\n  1. The origin of this software must not be misrepresented; you must not claim that you \n  wrote the original software. If you use this software in a product, an acknowledgment \n  in the product documentation would be appreciated but is not required.\n\n  2. Altered source versions must be plainly marked as such, and must not be misrepresented\n  as being the original software.\n\n  3. This notice may not be removed or altered from any source distribution.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.5947265625,
          "content": "<img align=\"left\" src=\"logo/raygui_256x256.png\" width=256>\n\n**raygui is a simple and easy-to-use immediate-mode-gui library.**\n\n`raygui` was originally inspired by [Unity IMGUI](https://docs.unity3d.com/Manual/GUIScriptingGuide.html) (immediate mode GUI API).\n\n`raygui` was designed as an auxiliary module for [raylib](https://github.com/raysan5/raylib) to create simple GUI interfaces using raylib graphic style (simple colors, plain rectangular shapes, wide borders...) but it can be adapted to other engines/frameworks.\n\n`raygui` is intended for **tools development**; it has already been used to develop [multiple published tools](https://raylibtech.itch.io).\n\n<br>\n\n**WARNING: Latest `raygui` from master branch is always aligned with latest `raylib` from master branch. Make sure to use the appropiate versions.**\n\n**WARNING: Latest `raygui 4.0` is an API-BREAKING redesign from previous versions (3.x), now all functions are more consistent and coherent, you can read the details about this breaking change in issue [283](https://github.com/raysan5/raygui/issues/283)**\n\n*NOTE: raygui is a single-file header-only library (despite its internal dependency on raylib), so, functions definition AND implementation reside in the same file `raygui.h`, when including `raygui.h` in a module, `RAYGUI_IMPLEMENTATION` must be previously defined to include the implementation part of `raygui.h` BUT only in one compilation unit, other modules could also include `raygui.h` but `RAYGUI_IMPLEMENTATION` must not be defined again.*\n\n## features\n\n - **Immediate-mode gui, no retained data**\n - **+25** controls provided (basic and advanced)\n - Powerful **styling system** for colors, font and metrics\n - Standalone usage mode supported (for other graphic libs)\n - **Icons support**, embedding a complete 1-bit icons pack\n - Multiple **tools** provided for raygui development\n\n## code sample\n```c\n#include \"raylib.h\"\n\n#define RAYGUI_IMPLEMENTATION\n#include \"raygui.h\"\n\nint main()\n{\n    InitWindow(400, 200, \"raygui - controls test suite\");\n    SetTargetFPS(60);\n\n    bool showMessageBox = false;\n\n    while (!WindowShouldClose())\n    {\n        // Draw\n        //----------------------------------------------------------------------------------\n        BeginDrawing();\n            ClearBackground(GetColor(GuiGetStyle(DEFAULT, BACKGROUND_COLOR)));\n\n            if (GuiButton((Rectangle){ 24, 24, 120, 30 }, \"#191#Show Message\")) showMessageBox = true;\n\n            if (showMessageBox)\n            {\n                int result = GuiMessageBox((Rectangle){ 85, 70, 250, 100 },\n                    \"#191#Message Box\", \"Hi! This is a message!\", \"Nice;Cool\");\n\n                if (result >= 0) showMessageBox = false;\n            }\n\n        EndDrawing();\n    }\n\n    CloseWindow();\n    return 0;\n}\n```\n![screenshot000](https://github.com/raysan5/raygui/assets/5766837/170e2bce-b7ca-49dc-a263-32b673376546)\n\n## raygui controls\n\n### basic controls\n```\nLabel       |  Button      |  LabelButton |  Toggle      |  ToggleGroup  |  ToggleSlider\nCheckBox    |  ComboBox    |  DropdownBox |  TextBox     |  ValueBox     |  Spinner\nSlider      |  SliderBar   |  ProgressBar |  StatusBar   |  DummyRec     |  Grid\n```\n### container/separator controls\n```\nWindowBox   |  GroupBox    |  Line        |  Panel       |  ScrollPanel  | TabBar\n```\n### advanced controls\n```\nListView    |  ColorPicker |  MessageBox  |  TextInputBox\n```\n\n\n## raygui styles\n\n`raygui` comes with a [default](styles/default) style automatically loaded at runtime:\n\n![raygui default style](styles/default/style_default.png)\n\nSome additional styles are also provided for convenience, just check [styles directory](styles) for details:\n\n![raygui additional styles](images/raygui_style_table_multi.png)\n\nCustom styles can also be created very easily using [rGuiStyler](https://raylibtech.itch.io/rguistyler) tool.\n\nStyles can be loaded at runtime using raygui `GuiLoadStyle()` function. Simple and easy-to-use.\n\n## raygui icons\n\n`raygui` supports custom icons, by default, a predefined set of icons is provided inside `raygui` as an array of binary data; it contains **256 possible icons** defined as **16x16 pixels** each; each pixel is codified using **1-bit**. The total size of the array is `2048 bytes`.\n\n<img align=\"right\" src=\"images/raygui_ricons.png\">\n\nTo use any of those icons just prefix the *#iconId#* number to **any text** written within `raygui` controls:\n```c\nif (GuiButton(rec, \"#05#Open Image\")) { /* ACTION */ }\n```\nIt's also possible to use the provided `GuiIconText()` function to prefix it automatically, using a clearer identifier (defined in `raygui.h`).\n```c\nif (GuiButton(rec, GuiIconText(RICON_FILE_OPEN, \"Open Image\"))) { /* ACTION */ }\n```\nProvided set of icons can be reviewed and customized using [rGuiIcons](https://raylibtech.itch.io/rguiicons) tool.\n\n## raygui support tools\n\n - [**rGuiStyler**](https://raylibtech.itch.io/rguistyler) - A simple and easy-to-use raygui styles editor.\n\n   ![rGuiStyler v3.1](images/rguistyler_v300.png)\n\n - [**rGuiIcons**](https://raylibtech.itch.io/rguiicons) - A simple and easy-to-use raygui icons editor.\n\n   ![rGuiIcons v1.0](images/rguiicons_v100.png)\n\n - [**rGuiLayout**](https://raylibtech.itch.io/rguilayout) - A simple and easy-to-use raygui layouts editor.\n\n   ![rGuiLayout v2.2](images/rguilayout_v220.png)\n\n## building\n\n`raygui` is intended to be used as a portable single-file header-only library, to be directly integrated into any C/C++ codebase but some users could require a shared/dynamic version of the library, for example, to create bindings:\n\n - **Windows (MinGW, GCC)**\n```\ncopy src/raygui.h src/raygui.c\ngcc -o src/raygui.dll src/raygui.c -shared -DRAYGUI_IMPLEMENTATION -DBUILD_LIBTYPE_SHARED -static-libgcc -lopengl32 -lgdi32 -lwinmm -Wl,--out-implib,src/librayguidll.a\n```\n\n - **Windows (MSVC)**\n```\ncopy src\\raygui.h src\\raygui.c\ncl /O2 /I../raylib/src/ /D_USRDLL /D_WINDLL /DRAYGUI_IMPLEMENTATION /DBUILD_LIBTYPE_SHARED src/raygui.c /LD /Feraygui.dll /link /LIBPATH ../raylib/build/raylib/Release/raylib.lib /subsystem:windows /machine:x64\n```\n\n - **Linux (GCC)**\n```\nmv src/raygui.h src/raygui.c\ngcc -o raygui.so src/raygui.c -shared -fpic -DRAYGUI_IMPLEMENTATION -lraylib -lGL -lm -lpthread -ldl -lrt -lX11\nmv src/raygui.c src/raygui.h\n```\n\n- **Mac (clang, homebrew installed raylib)**\n```\ncp src/raygui.h src/raygui.c\nbrew install raylib\ngcc -o raygui.dynlib src/raygui.c -shared -fpic -DRAYGUI_IMPLEMENTATION -framework OpenGL -lm -lpthread -ldl $(pkg-config --libs --cflags raylib)\n```\n\n\n## license\n\nraygui is licensed under an unmodified zlib/libpng license, which is an OSI-certified, BSD-like license that allows static linking with closed source software. Check [LICENSE](LICENSE) for further details.\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "icons",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo",
          "type": "tree",
          "content": null
        },
        {
          "name": "projects",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "styles",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}