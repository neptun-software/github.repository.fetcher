{
  "metadata": {
    "timestamp": 1736709936751,
    "page": 469,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "concurrencykit/ck",
      "stars": 2427,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 0.431640625,
          "content": "env:\n  CIRRUS_CLONE_DEPTH: 1\n\ntask:\n  matrix:\n   - name: freebsd13-amd64\n     freebsd_instance:\n       image_family: freebsd-13-3\n   - name: freebsd14-amd64\n     freebsd_instance:\n       image_family: freebsd-14-0\n   - name: linux-arm64\n     arm_container:\n       image: ubuntu:latest\n     setup_script: |\n       apt-get update\n       apt-get install -y gcc make\n  script:\n   - cc --version\n   - ./tools/ci-build.sh --cores=2\n   - make check\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 7.9365234375,
          "content": "*.a\nbuild/ck.build\nbuild/ck.pc\nbuild/ck.spec\nbuild/Makefile\nbuild/regressions.build\ndoc/*.3\ndoc/Makefile\n.DS_Store\n*.dSYM\nGPATH\nGRTAGS\nGTAGS\n*.gz\n*.html\nID\ninclude/ck_md.h\ninclude/freebsd/ck_md.h\n*.log\nLOG\n/Makefile\n*.o\nregressions/ck_array/validate/serial\nregressions/ck_backoff/validate/validate\nregressions/ck_bag/validate/order\nregressions/ck_barrier/benchmark/throughput\nregressions/ck_barrier/validate/barrier_centralized\nregressions/ck_barrier/validate/barrier_combining\nregressions/ck_barrier/validate/barrier_dissemination\nregressions/ck_barrier/validate/barrier_mcs\nregressions/ck_barrier/validate/barrier_tournament\nregressions/ck_bitmap/validate/serial\nregressions/ck_brlock/benchmark/latency\nregressions/ck_brlock/benchmark/throughput\nregressions/ck_brlock/validate/validate\nregressions/ck_bytelock/benchmark/latency\nregressions/ck_bytelock/validate/validate\nregressions/ck_cc/validate/ck_cc\nregressions/ck_cc/validate/ck_cc_nobuiltin\nregressions/ck_cohort/benchmark/ck_cohort.LATENCY\nregressions/ck_cohort/benchmark/ck_cohort.THROUGHPUT\nregressions/ck_cohort/validate/validate\nregressions/ck_ec/benchmark/ck_ec\nregressions/ck_ec/validate/ck_ec_smoke_test\nregressions/ck_ec/validate/prop_test_slow_wakeup\nregressions/ck_ec/validate/prop_test_timeutil_add\nregressions/ck_ec/validate/prop_test_timeutil_add_ns\nregressions/ck_ec/validate/prop_test_timeutil_cmp\nregressions/ck_ec/validate/prop_test_timeutil_scale\nregressions/ck_ec/validate/prop_test_value\nregressions/ck_ec/validate/prop_test_wakeup\nregressions/ck_epoch/validate/ck_epoch_call\nregressions/ck_epoch/validate/ck_epoch_poll\nregressions/ck_epoch/validate/ck_epoch_section\nregressions/ck_epoch/validate/ck_epoch_section_2\nregressions/ck_epoch/validate/ck_epoch_synchronize\nregressions/ck_epoch/validate/ck_stack\nregressions/ck_epoch/validate/ck_stack_read\nregressions/ck_epoch/validate/torture\nregressions/ck_fifo/benchmark/latency\nregressions/ck_fifo/validate/ck_fifo_mpmc\nregressions/ck_fifo/validate/ck_fifo_mpmc_iterator\nregressions/ck_fifo/validate/ck_fifo_spsc\nregressions/ck_fifo/validate/ck_fifo_spsc_iterator\nregressions/ck_hp/benchmark/fifo_latency\nregressions/ck_hp/benchmark/stack_latency\nregressions/ck_hp/validate/ck_hp_fifo\nregressions/ck_hp/validate/ck_hp_fifo_donner\nregressions/ck_hp/validate/ck_hp_stack\nregressions/ck_hp/validate/nbds_haz_test\nregressions/ck_hp/validate/serial\nregressions/ck_hs/benchmark/apply\nregressions/ck_hs/benchmark/parallel_bytestring\nregressions/ck_hs/benchmark/parallel_bytestring.delete\nregressions/ck_hs/benchmark/serial\nregressions/ck_hs/validate/serial\nregressions/ck_ht/benchmark/parallel_bytestring\nregressions/ck_ht/benchmark/parallel_bytestring.delete\nregressions/ck_ht/benchmark/parallel_direct\nregressions/ck_ht/benchmark/serial\nregressions/ck_ht/benchmark/serial.delete\nregressions/ck_ht/validate/serial\nregressions/ck_ht/validate/serial.delete\nregressions/ck_pflock/benchmark/latency\nregressions/ck_pflock/benchmark/throughput\nregressions/ck_pflock/validate/validate\nregressions/ck_pr/benchmark/ck_pr_add_64\nregressions/ck_pr/benchmark/ck_pr_cas_64\nregressions/ck_pr/benchmark/ck_pr_cas_64_2\nregressions/ck_pr/benchmark/ck_pr_faa_64\nregressions/ck_pr/benchmark/ck_pr_fas_64\nregressions/ck_pr/benchmark/ck_pr_neg_64\nregressions/ck_pr/benchmark/fp\nregressions/ck_pr/validate/ck_pr_add\nregressions/ck_pr/validate/ck_pr_add\nregressions/ck_pr/validate/ck_pr_and\nregressions/ck_pr/validate/ck_pr_bin\nregressions/ck_pr/validate/ck_pr_btc\nregressions/ck_pr/validate/ck_pr_btr\nregressions/ck_pr/validate/ck_pr_bts\nregressions/ck_pr/validate/ck_pr_btx\nregressions/ck_pr/validate/ck_pr_cas\nregressions/ck_pr/validate/ck_pr_dec\nregressions/ck_pr/validate/ck_pr_dec_zero\nregressions/ck_pr/validate/ck_pr_faa\nregressions/ck_pr/validate/ck_pr_fas\nregressions/ck_pr/validate/ck_pr_fax\nregressions/ck_pr/validate/ck_pr_fence\nregressions/ck_pr/validate/ck_pr_inc\nregressions/ck_pr/validate/ck_pr_inc_zero\nregressions/ck_pr/validate/ck_pr_load\nregressions/ck_pr/validate/ck_pr_n\nregressions/ck_pr/validate/ck_pr_or\nregressions/ck_pr/validate/ck_pr_store\nregressions/ck_pr/validate/ck_pr_sub\nregressions/ck_pr/validate/ck_pr_unary\nregressions/ck_pr/validate/ck_pr_xor\nregressions/ck_queue/validate/ck_list\nregressions/ck_queue/validate/ck_slist\nregressions/ck_queue/validate/ck_stailq\nregressions/ck_rhs/benchmark/parallel_bytestring\nregressions/ck_rhs/benchmark/serial\nregressions/ck_rhs/validate/serial\nregressions/ck_ring/benchmark/latency\nregressions/ck_ring/validate/ck_ring_mpmc\nregressions/ck_ring/validate/ck_ring_mpmc_template\nregressions/ck_ring/validate/ck_ring_spmc\nregressions/ck_ring/validate/ck_ring_spmc_template\nregressions/ck_ring/validate/ck_ring_spsc\nregressions/ck_ring/validate/ck_ring_spsc_template\nregressions/ck_rwcohort/benchmark/ck_neutral.LATENCY\nregressions/ck_rwcohort/benchmark/ck_neutral.THROUGHPUT\nregressions/ck_rwcohort/benchmark/ck_rp.LATENCY\nregressions/ck_rwcohort/benchmark/ck_rp.THROUGHPUT\nregressions/ck_rwcohort/benchmark/ck_wp.LATENCY\nregressions/ck_rwcohort/benchmark/ck_wp.THROUGHPUT\nregressions/ck_rwcohort/validate/ck_neutral\nregressions/ck_rwcohort/validate/ck_rp\nregressions/ck_rwcohort/validate/ck_wp\nregressions/ck_rwlock/benchmark/latency\nregressions/ck_rwlock/benchmark/throughput\nregressions/ck_rwlock/validate/validate\nregressions/ck_sequence/benchmark/ck_sequence\nregressions/ck_sequence/validate/ck_sequence\nregressions/ck_spinlock/benchmark/ck_anderson.LATENCY\nregressions/ck_spinlock/benchmark/ck_anderson.THROUGHPUT\nregressions/ck_spinlock/benchmark/ck_cas.LATENCY\nregressions/ck_spinlock/benchmark/ck_cas.THROUGHPUT\nregressions/ck_spinlock/benchmark/ck_clh.LATENCY\nregressions/ck_spinlock/benchmark/ck_clh.THROUGHPUT\nregressions/ck_spinlock/benchmark/ck_dec.LATENCY\nregressions/ck_spinlock/benchmark/ck_dec.THROUGHPUT\nregressions/ck_spinlock/benchmark/ck_fas.LATENCY\nregressions/ck_spinlock/benchmark/ck_fas.THROUGHPUT\nregressions/ck_spinlock/benchmark/ck_hclh.LATENCY\nregressions/ck_spinlock/benchmark/ck_hclh.THROUGHPUT\nregressions/ck_spinlock/benchmark/ck_mcs.LATENCY\nregressions/ck_spinlock/benchmark/ck_mcs.THROUGHPUT\nregressions/ck_spinlock/benchmark/ck_spinlock.LATENCY\nregressions/ck_spinlock/benchmark/ck_spinlock.THROUGHPUT\nregressions/ck_spinlock/benchmark/ck_ticket.LATENCY\nregressions/ck_spinlock/benchmark/ck_ticket_pb.LATENCY\nregressions/ck_spinlock/benchmark/ck_ticket_pb.THROUGHPUT\nregressions/ck_spinlock/benchmark/ck_ticket.THROUGHPUT\nregressions/ck_spinlock/benchmark/linux_spinlock.LATENCY\nregressions/ck_spinlock/benchmark/linux_spinlock.THROUGHPUT\nregressions/ck_spinlock/validate/ck_anderson\nregressions/ck_spinlock/validate/ck_cas\nregressions/ck_spinlock/validate/ck_clh\nregressions/ck_spinlock/validate/ck_dec\nregressions/ck_spinlock/validate/ck_fas\nregressions/ck_spinlock/validate/ck_hclh\nregressions/ck_spinlock/validate/ck_mcs\nregressions/ck_spinlock/validate/ck_spinlock\nregressions/ck_spinlock/validate/ck_ticket\nregressions/ck_spinlock/validate/ck_ticket_pb\nregressions/ck_spinlock/validate/linux_spinlock\nregressions/ck_stack/benchmark/latency\nregressions/ck_stack/validate/mpmc_pair\nregressions/ck_stack/validate/mpmc_pop\nregressions/ck_stack/validate/mpmc_push\nregressions/ck_stack/validate/mpmc_trypair\nregressions/ck_stack/validate/mpmc_trypop\nregressions/ck_stack/validate/mpmc_trypush\nregressions/ck_stack/validate/mpnc_push\nregressions/ck_stack/validate/pthreads_pair\nregressions/ck_stack/validate/serial\nregressions/ck_stack/validate/spinlock_eb_pair\nregressions/ck_stack/validate/spinlock_eb_pop\nregressions/ck_stack/validate/spinlock_eb_push\nregressions/ck_stack/validate/spinlock_pair\nregressions/ck_stack/validate/spinlock_pop\nregressions/ck_stack/validate/spinlock_push\nregressions/ck_stack/validate/upmc_pop\nregressions/ck_stack/validate/upmc_push\nregressions/ck_stack/validate/upmc_trypop\nregressions/ck_stack/validate/upmc_trypush\nregressions/ck_swlock/benchmark/latency\nregressions/ck_swlock/benchmark/throughput\nregressions/ck_swlock/validate/validate\nregressions/ck_tflock/benchmark/latency\nregressions/ck_tflock/benchmark/throughput\nregressions/ck_tflock/validate/validate\n*.so\nsrc/Makefile\n.*.sw[op]\n"
        },
        {
          "name": "CNAME",
          "type": "blob",
          "size": 0.017578125,
          "content": "concurrencykit.org"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.2705078125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at sbahra@repnop.org. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 2.5458984375,
          "content": "Copyright 2010-2014 Samy Al Bahra.\nCopyright 2011-2013 AppNexus, Inc.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n\nHazard Pointers (src/ck_hp.c) also includes this license:\n\n(c) Copyright 2008, IBM Corporation.\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nck_pr_rtm leverages work from Andi Kleen:\nCopyright (c) 2012,2013 Intel Corporation\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that: (1) source code distributions\nretain the above copyright notice and this paragraph in its entirety, (2)\ndistributions including binary code include the above copyright notice and\nthis paragraph in its entirety in the documentation or other materials\nprovided with the distribution\n\nTHIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED\nWARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.\n\n"
        },
        {
          "name": "Makefile.in",
          "type": "blob",
          "size": 3.203125,
          "content": ".PHONY: all check clean dist distclean doc install install-headers regressions uninstall\n\nBUILD_DIR=@BUILD_DIR@\nSRC_DIR=@SRC_DIR@\nCFLAGS=@CFLAGS@\nVERSION=@VERSION@\nVERSION_MAJOR=@VERSION_MAJOR@\nPREFIX=@PREFIX@\nLIBRARY=@LIBRARY@\nHEADERS=@HEADERS@\nPKGCONFIG_DATA=@LIBRARY@/pkgconfig\nLDNAME=@LDNAME@\nLDNAME_VERSION=@LDNAME_VERSION@\nLDNAME_MAJOR=@LDNAME_MAJOR@\n\nall: @EXTRA_BUILD@\n\t$(MAKE) -C src all || exit\n\t@echo\n\t@echo\n\t@echo ---[ Concurrency Kit has built successfully. You may now \\\"make install\\\".\n\ndoc:\n\t$(MAKE) -C doc all || exit\n\t@echo ---[ Manual pages are ready for installation.\n\nregressions:\n\t$(MAKE) -C regressions all || exit\n\t@echo ---[ Regressions have built successfully.\n\ncheck: regressions\n\t@echo ---[ Executing unit tests...\n\t$(MAKE) -C regressions check\n\t@echo ---[ Unit tests have completed successfully.\n\ninstall-headers:\n\tmkdir -p $(DESTDIR)/$(HEADERS) || exit\n\tcp -p $(SRC_DIR)/include/*.h $(DESTDIR)/$(HEADERS) || exit\n\tchmod 644 $(DESTDIR)/$(HEADERS)/ck_*.h || exit\n\tmkdir -p $(DESTDIR)/$(HEADERS)/gcc || exit\n\tcp -r $(SRC_DIR)/include/gcc/* $(DESTDIR)/$(HEADERS)/gcc || exit\n\tcp -p include/ck_md.h $(DESTDIR)/$(HEADERS)/ck_md.h || exit\n\tchmod 755 $(DESTDIR)/$(HEADERS)/gcc\n\tchmod 644 $(DESTDIR)/$(HEADERS)/gcc/ck_*.h $(DESTDIR)/$(HEADERS)/gcc/*/ck_*.h || exit\n\tmkdir -p $(DESTDIR)/$(HEADERS)/spinlock || exit\n\tcp -pr $(SRC_DIR)/include/spinlock/* $(DESTDIR)/$(HEADERS)/spinlock || exit\n\tchmod 755 $(DESTDIR)/$(HEADERS)/spinlock\n\tchmod 644 $(DESTDIR)/$(HEADERS)/spinlock/*.h || exit\n\ninstall-so:\n\tmkdir -p $(DESTDIR)/$(LIBRARY)\n\tcp src/libck.so $(DESTDIR)/$(LIBRARY)/$(LDNAME_VERSION)\n\tln -sf $(LDNAME_VERSION) $(DESTDIR)/$(LIBRARY)/$(LDNAME)\n\tln -sf $(LDNAME_VERSION) $(DESTDIR)/$(LIBRARY)/$(LDNAME_MAJOR)\n\tchmod 755 $(DESTDIR)/$(LIBRARY)/$(LDNAME_VERSION)\t\\\n\t\t  $(DESTDIR)/$(LIBRARY)/$(LDNAME)\t\t\\\n\t\t  $(DESTDIR)/$(LIBRARY)/$(LDNAME_MAJOR)\n\ninstall-lib:\n\tmkdir -p $(DESTDIR)/$(LIBRARY)\n\tcp src/libck.a $(DESTDIR)/$(LIBRARY)/libck.a\n\tchmod 644 $(DESTDIR)/$(LIBRARY)/libck.a\n\ninstall: all install-headers @INSTALL_LIBS@\n\t$(MAKE) -C doc install\n\tmkdir -p $(DESTDIR)/$(LIBRARY) || exit\n\tmkdir -p $(DESTDIR)/$(PKGCONFIG_DATA) || exit\n\tchmod 755 $(DESTDIR)/$(PKGCONFIG_DATA)\n\tcp -p build/ck.pc $(DESTDIR)/$(PKGCONFIG_DATA)/ck.pc || exit\n\t@echo\n\t@echo\n\t@echo ---[ Concurrency Kit has installed successfully.\n\nuninstall:\n\t$(MAKE) -C doc uninstall\n\trm -f $(DESTDIR)/$(LIBRARY)/$(LDNAME_VERSION)\t\\\n\t      $(DESTDIR)/$(LIBRARY)/$(LDNAME)\t\t\\\n\t      $(DESTDIR)/$(LIBRARY)/$(LDNAME_MAJOR)\n\trm -f $(DESTDIR)/$(LIBRARY)/libck.so*\n\trm -f $(DESTDIR)/$(LIBRARY)/libck.a\n\trm -f $(DESTDIR)/$(HEADERS)/ck_*.h\n\trm -f $(DESTDIR)/$(HEADERS)/spinlock/*.h\n\trm -f $(DESTDIR)/$(HEADERS)/gcc/ck_*.h\n\trm -f $(DESTDIR)/$(HEADERS)/gcc/*/ck_*.h\n\trm -f $(DESTDIR)/$(PKGCONFIG_DATA)/ck.pc\n\nclean:\n\t$(MAKE) -C doc clean\n\t$(MAKE) -C src clean\n\t$(MAKE) -C regressions clean\n\trm -f $(BUILD_DIR)/*~ $(BUILD_DIR)/*.o $(BUILD_DIR)/*.tar.gz\n\ndist:\n\tgit archive --remote=$(SRC_DIR) --format=tar --prefix=ck-$(VERSION)/ HEAD \\\n\t\t| gzip > $(BUILD_DIR)/ck-$(VERSION).tar.gz\n\ndistclean: clean\n\trm -f $(BUILD_DIR)/include/ck_md.h\n\trm -f $(BUILD_DIR)/build/regressions.build\n\trm -f $(BUILD_DIR)/build/ck.build\n\trm -f $(BUILD_DIR)/build/ck.pc\n\trm -f $(BUILD_DIR)/Makefile\n\trm -f $(BUILD_DIR)/doc/Makefile\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.40234375,
          "content": "# Concurrency Kit\n\nModern concurrency primitives and building blocks for high performance applications.\n\n### Continuous Integration\n\n| GitHub Actions | Cirrus |\n| -------- | ------- |\n| [![Build Status](https://github.com/concurrencykit/ck/workflows/CI/badge.svg)](https://github.com/concurrencykit/ck/actions?query=workflow%3ACI+branch%3Amaster) | [![Build Status](https://api.cirrus-ci.com/github/concurrencykit/ck.svg?branch=master)](https://cirrus-ci.com/github/concurrencykit/ck) |\n\nCompilers tested in the past include gcc, clang, cygwin, icc, mingw32, mingw64\nand suncc across all supported architectures. All new architectures are\nrequired to pass the integration test and under-go extensive code review.\n\nContinuous integration is currently enabled for the following targets:\n * `darwin/clang/arm64`\n * `freebsd/clang/x86-64`\n * `linux/gcc/arm64`\n * `linux/gcc/x86-64`\n * `linux/clang/x86-64`\n\n### Compile and Build\n\n* Step 1.\n   `./configure`\n   For additional options try `./configure --help`\n\n* Step 2.\n   In order to compile regressions (requires POSIX threads) use\n   `make regressions`. In order to compile libck use `make all` or `make`.\n\n* Step 3.\n\tIn order to install use `make install`\n\tTo uninstall use `make uninstall`.\n\nSee http://concurrencykit.org/ for more information.\n\n### Supported Architectures\n\nConcurrency Kit supports any architecture using compiler built-ins as a\nfallback. There is usually a performance degradation associated with this.\n\nConcurrency Kit has specialized assembly for the following architectures:\n * `aarch64`\n * `arm`\n * `ppc`\n * `ppc64`\n * `riscv64`\n * `s390x`\n * `sparcv9+`\n * `x86`\n * `x86_64`\n \n### Features\n\n#### Concurrency Primitives\n\n##### ck_pr\n\nConcurrency primitives including architecture-specific ones. Provides wrappers\naround CAS in case of missing native support. This also provides support for\nRTM (transactional memory), pipeline control, read-for-ownership and more.\n\n##### ck_backoff\n\nA simple and efficient (minimal noise) backoff function.\n\n##### ck_cc\n\nAbstracted compiler builtins when writing efficient concurrent data structures.\n\n#### Safe Memory Reclamation\n\n##### ck_epoch\n\nA scalable safe memory reclamation mechanism with support for idle threads and\nvarious optimizations that make it better than or competitive with many\nstate-of-the-art solutions.\n\n##### ck_hp\n\nImplements support for hazard pointers, a simple and efficient lock-free safe\nmemory reclamation mechanism.\n\n#### Data Structures\n\n##### ck_array\n\nA simple concurrently-readable pointer array structure.\n\n##### ck_bitmap\n\nAn efficient multi-reader and multi-writer concurrent bitmap structure.\n\n##### ck_ring\n\nEfficient concurrent bounded FIFO data structures with various performance\ntrade-off. This includes specialization for single-reader, many-reader,\nsingle-writer and many-writer.\n\n##### ck_fifo\n\nA reference implementation of the first published lock-free FIFO algorithm,\nwith specialization for single-enqueuer-single-dequeuer and\nmany-enqueuer-single-dequeuer and extensions to allow for node re-use.\n\n##### ck_hp_fifo\n\nA reference implementation of the above algorithm, implemented with safe memory\nreclamation using hazard pointers.\n\n##### ck_hp_stack\n\nA reference implementation of a Treiber stack with support for hazard pointers.\n\n##### ck_stack\n\nA reference implementation of an efficient lock-free stack, with specialized\nvariants for a variety of memory management strategies and bounded concurrency.\n\n##### ck_queue\n\nA concurrently readable friendly derivative of the BSD-queue interface. Coupled\nwith a safe memory reclamation mechanism, implement scalable read-side queues\nwith a simple search and replace.\n\n##### ck_hs\n\nAn extremely efficient single-writer-many-reader hash set, that satisfies\nlock-freedom with bounded concurrency without any usage of atomic operations\nand allows for recycling of unused or deleted slots. This data structure is\nrecommended for use as a general hash-set if it is possible to compute values\nfrom keys.\n\n##### ck_ht\n\nA specialization of the `ck_hs` algorithm allowing for disjunct key-value pairs.\n\n##### ck_rhs\n\nA variant of `ck_hs` that utilizes robin-hood hashing to allow for improved\nperformance with higher load factors and high deletion rates.\n\n#### Synchronization Primitives\n\n##### ck_ec\n\nAn extremely efficient event counter implementation, a better alternative to\ncondition variables with specialization for fixed concurrency use-cases.\n\n##### ck_barrier\n\nA plethora of execution barriers including: centralized barriers, combining\nbarriers, dissemination barriers, MCS barriers, tournament barriers.\n\n##### ck_brlock\n\nA simple big-reader lock implementation, write-biased reader-writer lock with\nscalable read-side locking.\n\n##### ck_bytelock\n\nAn implementation of bytelocks, for research purposes, allowing for (in\ntheory), fast read-side acquisition without the use of atomic operations. In\nreality, memory barriers are required on the fast path.\n\n##### ck_cohort\n\nA generic lock cohorting interface, allows you to turn any lock into a\nNUMA-friendly scalable NUMA lock. There is a significant trade-off in fast path\nacquisition cost. Specialization is included for all relevant lock\nimplementations in Concurrency Kit. Learn more by reading \"Lock Cohorting: A\nGeneral Technique for Designing NUMA Locks\".\n\n##### ck_elide\n\nA generic lock elision framework, allows you to turn any lock implementation\ninto an elision-aware implementation. This requires support for restricted\ntransactional memory by the underlying hardware.\n\n##### ck_pflock\n\nPhase-fair reader-writer mutex that provides strong fairness guarantees between\nreaders and writers. Learn more by reading \"Spin-Based Reader-Writer\nSynchronization for Multiprocessor Real-Time Systems\".\n\n##### ck_rwcohort\n\nA generic read-write lock cohorting interface, allows you to turn any\nread-write lock into a NUMA-friendly scalable NUMA lock. There is a significant\ntrade-off in fast path acquisition cost. Specialization is included for all\nrelevant lock implementations in Concurrency Kit. Learn more by reading \"Lock\nCohorting: A General Technique for Designing NUMA Locks\".\n\n##### ck_rwlock\n\nA simple centralized write-biased read-write lock.\n\n##### ck_sequence\n\nA sequence counter lock, popularized by the Linux kernel, allows for very fast\nread and write synchronization for simple data structures where deep copy is\npermitted.\n\n##### ck_swlock\n\nA single-writer specialized read-lock that is copy-safe, useful for data\nstructures that must remain small, be copied and contain in-band mutexes.\n\n##### ck_tflock\n\nTask-fair locks are fair read-write locks, derived from \"Scalable reader-writer\nsynchronization for shared-memory multiprocessors\".\n\n##### ck_spinlock\n\nA basic but very fast spinlock implementation.\n\n##### ck_spinlock_anderson\n\nScalable and fast anderson spinlocks. This is here for reference, one of the\nearliest scalable and fair lock implementations.\n\n##### ck_spinlock_cas\n\nA basic spinlock utilizing compare_and_swap.\n\n##### ck_spinlock_dec\n\nA basic spinlock, a C adaption of the older optimized Linux kernel spinlock for\nx86. Primarily here for reference.\n\n##### ck_spinlock_fas\n\nA basic spinlock utilizing atomic exchange.\n\n##### ck_spinlock_clh\n\nAn efficient implementation of the scalable CLH lock, providing many of the\nsame performance properties of MCS with a better fast-path.\n\n##### ck_spinlock_hclh\n\nA NUMA-friendly CLH lock.\n\n##### ck_spinlock_mcs\n\nAn implementation of the seminal scalable and fair MCS lock.\n\n##### ck_spinlock_ticket\n\nAn implementation of fair centralized locks.\n\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.02734375,
          "content": "theme: jekyll-theme-minimal\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 22.7646484375,
          "content": "#!/bin/sh\n#\n# Copyright © 2009-2013 Samy Al Bahra.\n# Copyright © 2011 Devon H. O'Dell <devon.odell@gmail.com>\n# All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n# 1. Redistributions of source code must retain the above copyright\n#    notice, this list of conditions and the following disclaimer.\n# 2. Redistributions in binary form must reproduce the above copyright\n#    notice, this list of conditions and the following disclaimer in the\n#    documentation and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\n# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n# SUCH DAMAGE.\n#\n\nREQUIRE_HEADER=\"stdbool.h stddef.h stdint.h string.h\"\n\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nWANT_PIC=yes\n\nBUILD_DIR=`pwd`\nMAINTAINER='sbahra@repnop.org'\nVERSION=${VERSION:-'0.7.2'}\nVERSION_MAJOR='0'\nBUILD=\"$PWD/build/ck.build\"\nPREFIX=${PREFIX:-\"/usr/local\"}\nLDNAME=\"libck.so\"\nLDNAME_VERSION=\"libck.so.$VERSION\"\nLDNAME_MAJOR=\"libck.so.$VERSION_MAJOR\"\nEXTRA_BUILD='doc'\n\nOPTION_CHECKING=1\n\nexport CFLAGS\nexport PREFIX\nLC_ALL=C\nexport LC_ALL\n\nif test -n \"${BASH_VERSION+set}\" && (set -o posix) >/dev/null 2>&1; then\n \tset -o posix\nfi\n\ntrap epilog 1 2 3 6\n\nepilog()\n{\n\trm -f .1.c .1\n}\n\nassert()\n{\n\n\tif test \"$#\" -eq 2; then\n\t\tfail=$2\n\t\tprint=true\n\telif test \"$#\" -eq 3; then\n\t\tfail=$3\n\t\tprint=echo\n\telse\n\t\techo \"Usage: assert <test> <fail string> or assert <test> <success string> <fail string>\" 1>&2\n\t\texit $EXIT_FAILURE\n\tfi\n\n\tif test -z \"$1\"; then\n\t\techo \"failed  [$fail]\"\n\t\texit $EXIT_FAILURE\n\telse\n\t\t${print} \"success [$1]\"\n\tfi\n}\n\nget_git_sha()\n{\n    # return a short SHA for the current HEAD\n    GIT_SHA=\"\"\n    GIT_MSG=\"success\"\n    gitcmd=`which git`\n    if test -n \"$gitcmd\"; then\n\tGIT_SHA=`git rev-parse --short HEAD  2>/dev/null`\n\tif ! test -n \"$GIT_SHA\"; then\n\t    GIT_MSG=\"not within a git repo\"\n\tfi\n    else\n\tGIT_MSG=\"git not installed or executable\"\n    fi\n}\n\ngenerate()\n{\n\tsed -e \"s#@PROFILE@#$PROFILE#g\"\t\t\t\t\\\n\t    -e \"s#@VERSION@#$VERSION#g\"\t\t\t\t\\\n\t    -e \"s#@VERSION_MAJOR@#$VERSION_MAJOR#g\"\t\t\\\n\t    -e \"s#@CC@#$CC#g\"\t\t\t\t\t\\\n \t    -e \"s#@CFLAGS@#$CFLAGS#g\"\t\t\t\t\\\n \t    -e \"s#@HEADERS@#$HEADERS#g\"\t\t\t\t\\\n\t    -e \"s#@LIBRARY@#$LIBRARY#g\"\t\t\t\t\\\n\t    -e \"s#@PREFIX@#$PREFIX#g\"\t\t\t\t\\\n\t    -e \"s#@CORES@#$CORES#g\"\t\t\t\t\\\n\t    -e \"s#@ALL_LIBS@#$ALL_LIBS#g\"\t\t\t\\\n\t    -e \"s#@INSTALL_LIBS@#$INSTALL_LIBS#g\"\t\t\\\n\t    -e \"s#@LD@#$LD#g\"\t\t\t\t\t\\\n\t    -e \"s#@LDFLAGS@#$LDFLAGS#g\"\t\t\t\t\\\n\t    -e \"s#@PTHREAD_CFLAGS@#$PTHREAD_CFLAGS#g\"\t\t\\\n\t    -e \"s#@MANDIR@#$MANDIR#g\"\t\t\t\t\\\n\t    -e \"s#@GZIP@#$GZIP#g\"\t\t\t\t\\\n\t    -e \"s#@GZIP_SUFFIX@#$GZIP_SUFFIX#g\"\t\t\t\\\n\t    -e \"s#@POINTER_PACK_ENABLE@#$POINTER_PACK_ENABLE#g\"\t\\\n\t    -e \"s#@DISABLE_DOUBLE@#$DISABLE_DOUBLE#g\"\t\t\\\n\t    -e \"s#@DISABLE_SHARED@#$DISABLE_SHARED#g\"\t\t\\\n\t    -e \"s#@DISABLE_STATIC@#$DISABLE_STATIC#g\"\t\t\\\n\t    -e \"s#@SSE_DISABLE@#$SSE_DISABLE#g\"\t\t\t\\\n\t    -e \"s#@PPC32_LWSYNC_ENABLE@#$PPC32_LWSYNC_ENABLE#g\"\t\\\n\t    -e \"s#@RTM_ENABLE@#$RTM_ENABLE#g\"\t\t\t\\\n\t    -e \"s#@LSE_ENABLE@#$LSE_ENABLE#g\"\t\t\t\\\n\t    -e \"s#@VMA_BITS@#$VMA_BITS_R#g\"\t\t\t\\\n\t    -e \"s#@VMA_BITS_VALUE@#$VMA_BITS_VALUE_R#g\"\t\t\\\n\t    -e \"s#@MM@#$MM#g\"\t\t\t\t\t\\\n\t    -e \"s#@BUILD_DIR@#$BUILD_DIR#g\"\t\t\t\\\n\t    -e \"s#@SRC_DIR@#$SRC_DIR#g\"\t\t\t\t\\\n\t    -e \"s#@LDNAME@#$LDNAME#g\"\t\t\t\t\\\n\t    -e \"s#@LDNAME_MAJOR@#$LDNAME_MAJOR#g\"\t\t\\\n\t    -e \"s#@LDNAME_VERSION@#$LDNAME_VERSION#g\"\t\t\\\n\t    -e \"s#@PC_CFLAGS@#$PC_CFLAGS#g\"\t\t\t\\\n\t    -e \"s#@GIT_SHA@#$GIT_SHA#g\"\t\t\t        \\\n\t    -e \"s#@EXTRA_BUILD@#$EXTRA_BUILD#g\"\t\t\t\\\n\t\t$1 > $2\n}\n\ngenerate_stdout()\n{\n\n\techo\n\techo \"           VERSION = $VERSION\"\n\techo \"           GIT_SHA = $GIT_SHA\"\n\techo \"         BUILD_DIR = $BUILD_DIR\"\n\techo \"           SRC_DIR = $SRC_DIR\"\n\techo \"            SYSTEM = $SYSTEM\"\n\techo \"           PROFILE = $PROFILE\"\n\techo \"                AR = $AR\"\n\techo \"                CC = $CC\"\n\techo \"          COMPILER = $COMPILER\"\n\techo \"            CFLAGS = $CFLAGS\"\n\techo \"    PTHREAD_CFLAGS = $PTHREAD_CFLAGS\"\n\techo \"                LD = $LD\"\n\techo \"            LDNAME = $LDNAME\"\n\techo \"    LDNAME_VERSION = $LDNAME_VERSION\"\n\techo \"      LDNAME_MAJOR = $LDNAME_MAJOR\"\n\techo \"           LDFLAGS = $LDFLAGS\"\n\techo \"        SHARED_LIB = `expr $DISABLE_SHARED = 0`\"\n\techo \"        STATIC_LIB = `expr $DISABLE_STATIC = 0`\"\n\techo \"       EXTRA_BUILD = $EXTRA_BUILD\"\n\techo \"              GZIP = $GZIP\"\n\techo \"             CORES = $CORES\"\n\techo \"      POINTER_PACK = $POINTER_PACK_ENABLE\"\n\techo \"      PPC32_LWSYNC = $PPC32_LWSYNC_ENABLE\"\n\techo \"          VMA_BITS = $VMA_BITS\"\n\techo \"      MEMORY_MODEL = $MM\"\n\techo \"               RTM = $RTM_ENABLE\"\n\techo \"               LSE = $LSE_ENABLE\"\n\techo \"               SSE = $SSE_DISABLE\"\n\techo\n\techo \"Headers will be installed in $HEADERS\"\n\techo \"Libraries will be installed in $LIBRARY\"\n\techo \"Documentation will be installed in $MANDIR\"\n}\n\nfor option; do\n\tcase \"$option\" in\n\t--*=?*)\n\t\toptname=`echo $option|cut -c 3-`\n\t\tvalue=`expr \"$optname\" : '[^=]*=\\(.*\\)'`\n\t\t;;\n\t--*=)\n\t\tvalue=\n\t\t;;\n\t--*)\n\t\tvalue=yes\n\t\t;;\n\tesac\n\n\tcase \"$option\" in\n\t--help)\n\t\techo \"Usage: $0 [OPTIONS]\"\n\t\techo\n\t\techo \"The following options may be used for cross-building.\"\n\t\techo \"  --profile=N              Use custom build profile (use in conjunction with \\$CC)\"\n\t\techo\n\t\techo \"The following options may be used to modify installation behavior.\"\n\t\techo \"  --includedir=N           Headers directory (default is ${PREFIX}/include)\"\n\t\techo \"  --libdir=N               Libraries directory (default is ${PREFIX}/lib)\"\n\t\techo \"  --mandir=N               Manual pages directory (default is ${PREFIX}/man)\"\n\t\techo \"  --prefix=N               Installs library files in N (default is $PREFIX)\"\n\t\techo\n\t\techo \"The following options will affect generated code.\"\n\t\techo \"  --enable-pointer-packing Assumes address encoding is subset of pointer range\"\n\t\techo \"  --memory-model=N         Specify memory model (currently tso, pso or rmo)\"\n\t\techo \"  --vma-bits=N             Specify valid number of VMA bits\"\n\t\techo \"  --platform=N             Force the platform type, instead of relying on autodetection\"\n\t\techo \"  --use-cc-builtins        Use the compiler atomic builtin functions, instead of the CK implementation\"\n\t\techo \"  --disable-double         Don't generate any of the functions using the \\\"double\\\" type\"\n\t\techo \"  --disable-static         Don't compile a static version of the ck lib\"\n\t\techo\n\t\techo \"The following options will affect specific platform-dependent generated code.\"\n\t\techo \"  --disable-sse            Do not use any SSE instructions (x86)\"\n\t\techo \"  --enable-lse             Enable large system extensions (arm64)\"\n\t\techo \"  --enable-ppc32-lwsync    Enable lwsync instruction usage (32-bit Power ISA)\"\n\t\techo \"  --enable-rtm             Enable restricted transactional memory (Power ISA, x86_64)\"\n\t\techo\n\t\techo \"The following options affect regression testing.\"\n\t\techo \"  --cores=N                Specify number of cores available on target machine\"\n\t\techo\n\t\techo \"The following environment variables may be used:\"\n\t\techo \"   AR       AR archiver command\"\n\t\techo \"   CC       C compiler command\"\n\t\techo \"   CFLAGS   C compiler flags\"\n\t\techo \"   LDFLAGS  Linker flags\"\n\t\techo \"   GZIP     GZIP compression tool\"\n\t\techo\n\t\techo \"Report bugs to ${MAINTAINER}.\"\n\t\texit $EXIT_SUCCESS\n\t\t;;\n\t--memory-model=*)\n\t\tcase \"$value\" in\n\t\t\"tso\")\n\t\t\tMM=\"CK_MD_TSO\"\n\t\t\t;;\n\t\t\"rmo\")\n\t\t\tMM=\"CK_MD_RMO\"\n\t\t\t;;\n\t\t\"pso\")\n\t\t\tMM=\"CK_MD_PSO\"\n\t\t\t;;\n\t\t*)\n\t\t\techo \"./configure [--help]\"\n\t\t\texit $EXIT_FAILURE\n\t\t\t;;\n\t\tesac\n\t\t;;\n\t--vma-bits=*)\n\t\tVMA_BITS=$value\n\t\t;;\n\t--enable-pointer-packing)\n\t\tPOINTER_PACK_ENABLE=\"CK_MD_POINTER_PACK_ENABLE\"\n\t\t;;\n\t--enable-ppc32-lwsync)\n\t\tPPC32_LWSYNC_ENABLE=\"CK_MD_PPC32_LWSYNC\"\n\t\t;;\n\t--enable-rtm)\n\t\tRTM_ENABLE_SET=\"CK_MD_RTM_ENABLE\"\n\t\t;;\n\t--enable-lse)\n\t\tLSE_ENABLE_SET=\"CK_MD_LSE_ENABLE\"\n\t\t;;\n\t--disable-sse)\n\t\tSSE_DISABLE=\"CK_MD_SSE_DISABLE\"\n\t\t;;\n\t--cores=*)\n\t\tCORES=$value\n\t\t;;\n\t--profile=*)\n\t\tPROFILE=$value\n\t\t;;\n\t--prefix=*)\n\t\tPREFIX=$value\n\t\t;;\n\t--includedir=*)\n\t\tHEADERS=$value\n\t\t;;\n\t--libdir=*)\n\t\tLIBRARY=$value\n\t\t;;\n\t--mandir=*)\n\t\tMANDIR=$value\n\t\t;;\n\t--with-pic)\n\t\tWANT_PIC=yes\n\t\t;;\n\t--without-pic)\n\t\tWANT_PIC=no\n\t\t;;\n\t--disable-option-checking)\n\t\tOPTION_CHECKING=0\n\t\t;;\n\t--use-cc-builtins)\n\t\tUSE_CC_BUILTINS=1\n\t\t;;\n\t--disable-double)\n\t\tDISABLE_DOUBLE=\"CK_PR_DISABLE_DOUBLE\"\n\t\t;;\n\t--disable-shared)\n\t\tDISABLE_SHARED=1\n\t\t;;\n\t--disable-static)\n\t\tDISABLE_STATIC=1\n\t\t;;\n\t--platform=*)\n\t\tPLATFORM=$value\n\t\t;;\n\t--build=*|--host=*|--target=*|--exec-prefix=*|--bindir=*|--sbindir=*|\\\n\t--sysconfdir=*|--datadir=*|--libexecdir=*|--localstatedir=*|\\\n\t--enable-static|\\\n\t--sharedstatedir=*|--infodir=*|--enable-shared|\\\n\t--cache-file=*|--srcdir=*)\n\t\t# ignore for compat with regular configure\n\t\t;;\n\t--*)\n\t\tif test \"$OPTION_CHECKING\" -eq 1; then\n\t\t\techo \"$0 [--help]\"\n\t\t\techo \"Unknown option $option\"\n\t\t\texit $EXIT_FAILURE\n\t\tfi\n\t\t;;\n\t*=*)\n\t\tvalue=`echo $option|cut -d '=' -f 2-`\n\t\tNAME=`expr \"$option\" : '\\([^=]*\\)='`\n\t\teval \"$NAME='$value'\"\n\t\texport $NAME\n\t\t;;\n\t*)\n\t\techo \"$0 [--help]\"\n\t\techo \"Unknown option $option\"\n\t\texit $EXIT_FAILURE\n\t\t;;\n\tesac\ndone\n\nHEADERS=${HEADERS:-\"${PREFIX}/include\"}\nLIBRARY=${LIBRARY:-\"${PREFIX}/lib\"}\nMANDIR=${MANDIR:-\"${PREFIX}/share/man\"}\nGZIP=${GZIP-\"gzip -c\"}\nPOINTER_PACK_ENABLE=${POINTER_PACK_ENABLE:-\"CK_MD_POINTER_PACK_DISABLE\"}\nDISABLE_DOUBLE=${DISABLE_DOUBLE:-\"CK_PR_ENABLE_DOUBLE\"}\nDISABLE_SHARED=${DISABLE_SHARED:-\"0\"}\nDISABLE_STATIC=${DISABLE_STATIC:-\"0\"}\nPPC32_LWSYNC_ENABLE=${PPC32_LWSYNC_ENABLE:-\"CK_MD_PPC32_LWSYNC_DISABLE\"}\nRTM_ENABLE=${RTM_ENABLE_SET:-\"CK_MD_RTM_DISABLE\"}\nSSE_DISABLE=${SSE_DISABLE:-\"CK_MD_SSE_ENABLE\"}\nLSE_ENABLE=${LSE_ENABLE_SET:-\"CK_MD_LSE_DISABLE\"}\nVMA_BITS=${VMA_BITS:-\"unknown\"}\n\nDCORES=2\nprintf \"Detecting operating system.......\"\nSYSTEM=`uname -s 2> /dev/null`\ncase \"$SYSTEM\" in\n\t\"SunOS\")\n\t\tSYSTEM=solaris\n\t\t;;\n\t\"Linux\"|\"uClinux\")\n\t\tDCORES=`egrep '(^CPU[0-9]+|^processor.*:.*)' /proc/cpuinfo|wc -l`\n\t\tSYSTEM=linux\n\t\t;;\n\t\"FreeBSD\"|\"GNU/kFreeBSD\")\n\t\tDCORES=`sysctl -n hw.ncpu`\n\t\tSYSTEM=freebsd\n\t\t;;\n\t\"NetBSD\")\n\t\tDCORES=`sysctl -n hw.ncpu`\n\t\tSYSTEM=netbsd\n\t\t;;\n\t\"OpenBSD\")\n\t\tDCORES=`sysctl -n hw.ncpu`\n\t\tSYSTEM=openbsd\n\t\t;;\n\t\"DragonFly\")\n\t\tDCORES=`sysctl -n hw.ncpu`\n\t\tSYSTEM=dragonflybsd\n\t\t;;\n\t\"Darwin\")\n\t\tDCORES=`sysctl -n hw.ncpu`\n\t\tSYSTEM=darwin\n\t\t;;\n\tMINGW32*|MSYS_NT*)\n\t\tSYSTEM=mingw32\n\t\tLDFLAGS=\"-mthreads $LDFLAGS\"\n\t\t;;\n\tMINGW64*)\n\t\tSYSTEM=mingw64\n\t\tLDFLAGS=\"-mthreads $LDFLAGS\"\n\t\t;;\n\tCYGWIN_NT*)\n\t\tSYSTEM=cygwin\n\t\tLDFLAGS=\"-mthreads $LDFLAGS\"\n\t\t;;\n\t*)\n\t\tSYSTEM=\n\t\t;;\nesac\n\nassert \"$SYSTEM\" \"$SYSTEM\" \"unsupported\"\n\nCORES=${CORES:-${DCORES}}\nprintf \"Detecting machine architecture...\"\nif test \"x$PLATFORM\" = \"x\"; then\n\tcase $SYSTEM in\n\t\t\"freebsd\")\n\t\t\tPLATFORM=`uname -p 2> /dev/null`\n\t\t\t;;\n\t\t*)\n\t\t\tPLATFORM=`uname -m 2> /dev/null`\n\t\t\t;;\n\tesac\nfi\n\ncase $PLATFORM in\n\t\"macppc\"|\"Power Macintosh\"|\"powerpc\"|\"powerpcspe\")\n\t\tRTM_ENABLE=\"CK_MD_RTM_DISABLE\"\n\t\tLSE_ENABLE=\"CK_MD_LSE_DISABLE\"\n\t\tMM=\"${MM:-\"CK_MD_RMO\"}\"\n\t\tPLATFORM=ppc\n\t\tENVIRONMENT=32\n\t\tLDFLAGS=\"-m32 $LDFLAGS\"\n\t\t;;\n\t\"sun4u\"|\"sun4v\"|\"sparc64\")\n\t\tRTM_ENABLE=\"CK_MD_RTM_DISABLE\"\n\t\tLSE_ENABLE=\"CK_MD_LSE_DISABLE\"\n\t\tMM=\"${MM:-\"CK_MD_TSO\"}\"\n\t\tPLATFORM=sparcv9\n\t\tENVIRONMENT=64\n\t\tLDFLAGS=\"-m64 $LDFLAGS\"\n\t\t;;\n\ti386|i486|i586|i686|i586_i686|pentium*|athlon*|k5|k6|k6_2|k6_3)\n\t\tif test \"${SSE_DISABLE}\" = \"CK_MD_SSE_ENABLE\"; then\n\t\t\tCFLAGS=\"$CFLAGS -msse -msse2\"\n\t\tfi\n\t\tLSE_ENABLE=\"CK_MD_LSE_DISABLE\"\n\t\tMM=\"${MM:-\"CK_MD_TSO\"}\"\n\t\tcase $SYSTEM in\n\t\t\tdarwin)\n\t\t\t\tENVIRONMENT=64\n\t\t\t\tPLATFORM=x86_64\n\t\t\t\t;;\n\t\t\tfreebsd)\n\t\t\t\tPLATFORM=x86\n\t\t\t\tENVIRONMENT=32\n\n\t\t\t\t# FreeBSD doesn't give us a nice way to determine the CPU\n\t\t\t\t# class of the running system, reporting any 32-bit x86\n\t\t\t\t# architecture as i386. 486 is its minimum supported CPU\n\t\t\t\t# class and cmpxchg8b was implemented first in i586.\n\t\t\t\tdmesg | grep -q \"486-class\"\n\t\t\t\tif test \"$?\" -eq 0; then\n\t\t\t\t\tassert \"\" \"\" \"Must have an i586 class or higher CPU\"\n\t\t\t\tfi\n\n\t\t\t\t# FreeBSD still generates code for 486-class CPUs as its\n\t\t\t\t# default 32-bit target, but we need 586 at the least.\n\t\t\t\techo \"$CFLAGS\" | grep -q 'march='\n\t\t\t\tif test \"$?\" -ne 0; then\n\t\t\t\t\t# Needed for cmpxchg8b\n\t\t\t\t\tCFLAGS=\"$CFLAGS -march=i586\"\n\t\t\t\tfi\n\t\t\t\t;;\n\t\t\tlinux)\n\t\t\t\tcase $PLATFORM in\n\t\t\t\t\ti386|i486)\n\t\t\t\t\t\tassert \"\" \"\" \"Must have an i586 class or higher CPU\"\n\t\t\t\t\t\t;;\n\t\t\t\tesac\n\n\t\t\t\tPLATFORM=x86\n\t\t\t\tENVIRONMENT=32\n\t\t\t\t;;\n\n\t\t\t*)\n\t\t\t\tPLATFORM=x86\n\t\t\t\tENVIRONMENT=32\n\t\t\t\tassert \"$PLATFORM $ENVIRONMENT\" \"$PLATFORM $ENVIRONMENT\" \"unsupported\"\n\t\t\t\t;;\n\t\tesac\n\t\t;;\n\t\"amd64\"|\"x86_64\")\n\t\tLSE_ENABLE=\"CK_MD_LSE_DISABLE\"\n\t\tPLATFORM=x86_64\n\t\tENVIRONMENT=64\n\t\tLDFLAGS=\"-m64 $LDFLAGS\"\n\t\tMM=\"${MM:-\"CK_MD_TSO\"}\"\n\t\t;;\n\t\"i86pc\")\n\t\tRTM_ENABLE=\"CK_MD_RTM_DISABLE\"\n\t\tLSE_ENABLE=\"CK_MD_LSE_DISABLE\"\n\t\tMM=\"${MM:-\"CK_MD_TSO\"}\"\n\t\tif test -z \"$ISA\"; then ISA=`isainfo -n 2> /dev/null || echo i386` ; fi\n\t\tcase \"$ISA\" in\n\t\t\t\"amd64\")\n\t\t\t\tRTM_ENABLE=${RTM_ENABLE_SET:-\"CK_MD_RTM_DISABLE\"}\n\t\t\t\tPLATFORM=x86_64\n\t\t\t\tENVIRONMENT=64\n\t\t\t\t;;\n\t\t\t*)\n\t\t\t\tPLATFORM=x86\n\t\t\t\tENVIRONMENT=32\n\t\t\t\tassert \"$PLATFORM $ENVIRONMENT\" \"$PLATFORM $ENVIRONMENT\" \"unsupported\"\n\t\t\t\t;;\n\t\tesac\n\t\t;;\n\t\"ppc64\"|\"ppc64le\"|\"powerpc64\")\n\t\tRTM_ENABLE=\"CK_MD_RTM_DISABLE\"\n\t\tLSE_ENABLE=\"CK_MD_LSE_DISABLE\"\n\t\tMM=\"${MM:-\"CK_MD_RMO\"}\"\n\t\tPLATFORM=ppc64\n\t\tENVIRONMENT=64\n\t\t;;\n\tarm|armv6|armv6l|armv7|armv7l)\n\t\tcase \"$PLATFORM\" in\n\t\t\t\"armv6\"|\"armv6l\")\n\t\t\t\tCFLAGS=\"$CFLAGS -march=armv6k\";\n\t\t\t\t;;\n\t\t\t\"armv7\"|\"armv7l\")\n\t\t\t\tCFLAGS=\"$CFLAGS -march=armv7-a\";\n\t\t\t\t;;\n\t\tesac\n\t\tRTM_ENABLE=\"CK_MD_RTM_DISABLE\"\n\t\tLSE_ENABLE=\"CK_MD_LSE_DISABLE\"\n\t\tMM=\"${MM:-\"CK_MD_RMO\"}\"\n\t\tPLATFORM=arm\n\t\tENVIRONMENT=32\n\t\t;;\n\t\"arm64\"|\"aarch64\")\n\t\tRTM_ENABLE=\"CK_MD_RTM_DISABLE\"\n\t\tMM=\"${MM:-\"CK_MD_RMO\"}\"\n\t\tPLATFORM=aarch64\n\t\tENVIRONMENT=64\n\t\t;;\n\t\"riscv32\"|\"riscv\")\n\t\tRTM_ENABLE=\"CK_MD_RTM_DISABLE\"\n\t\tMM=\"${MM:-\"CK_MD_RMO\"}\"\n\t\tPLATFORM=riscv32\n\t\tENVIRONMENT=32\n\t\t;;\n\t\"riscv64\")\n\t\tRTM_ENABLE=\"CK_MD_RTM_DISABLE\"\n\t\tMM=\"${MM:-\"CK_MD_RMO\"}\"\n\t\tPLATFORM=riscv64\n\t\tENVIRONMENT=64\n\t\t;;\n\t\"s390x\")\n\t\tRTM_ENABLE=\"CK_MD_RTM_DISABLE\"\n\t\tLSE_ENABLE=\"CK_MD_LSE_DISABLE\"\n\t\tMM=\"${MM:-\"CK_MD_RMO\"}\"\n\t\tPLATFORM=s390x\n\t\tENVIRONMENT=64\n\t\t;;\n\t*)\n\t\tRTM_ENABLE=\"CK_MD_RTM_DISABLE\"\n\t\tLSE_ENABLE=\"CK_MD_LSE_DISABLE\"\n\t\tPLATFORM=unknown\n\t\tMM=\"${MM:-\"CK_MD_RMO\"}\"\n\t\tUSE_CC_BUILTINS=1\n\t\t;;\nesac\n\nassert \"$PLATFORM\" \"$PLATFORM\" \"unsupported\"\n\nif test \"$VMA\" = \"unknown\"; then\n\tVMA_BITS_R=\"CK_MD_VMA_BITS_UNKNOWN\"\n\tVMA_BITS_VALUE_R=\"\"\n\tPOINTER_PACK_ENABLE=\"CK_MD_POINTER_PACK_DISABLE\"\nelse\n\tVMA_BITS_R=\"CK_MD_VMA_BITS\"\n\tVMA_BITS_VALUE_R=\"${VMA_BITS}ULL\"\nfi\n\nif test \"$USE_CC_BUILTINS\"; then\n\tCFLAGS=\"$CFLAGS -DCK_USE_CC_BUILTINS=1\"\n\tPC_CFLAGS=\"-DCK_USE_CC_BUILTINS=1\"\nfi\n\n# `which` on Solaris sucks\npathsearch()\n{\n\twhat=$1\n\toldFS=\"$IFS\"\n\tIFS=\":\"\n\tfor d in $PATH ; do\n\t\tif test -x \"$d/$what\" ; then\n\t\t\techo \"$d/$what\";\n\t\t\tIFS=\"$oldFS\"\n\t\t\treturn\n\t\tfi\n\tdone\n\tIFS=\"$oldFS\"\n}\n\nprintf \"Finding dirname command..........\"\nDIRNAME=`pathsearch \"${DIRNAME:-dirname}\"`\nif test -z \"$DIRNAME\" -o ! -x \"$DIRNAME\"; then\n\tDIRNAME=`pathsearch \"${DIRNAME:-dirname}\"`\n\tDIRNAME=\"$DIRNAME\"\nelse\n\techo \"success [$DIRNAME]\"\nfi\n\nif test -z \"$DIRNAME\"; then\n\techo \"not found (out of source build unsupported)\"\nelse\n\tprintf \"Determining source directory......\"\n\n\tSRC_DIR=`$DIRNAME $0`\n\tcd `$DIRNAME $0`\n\tSRC_DIR=`pwd`\n\n\techo \"success [$SRC_DIR]\"\nfi\n\nif test -n \"$GZIP\"; then\n\tprintf \"Finding gzip tool................\"\n\tGZIP=`pathsearch \"${GZIP:-gzip}\"`\n\tif test -z \"$GZIP\" -o ! -x \"$GZIP\"; then\n\t\tGZIP=`pathsearch \"${GZIP:-gzip}\"`\n\t\tGZIP=\"$GZIP\"\n\tfi\n\n\tif test -z \"$GZIP\"; then\n\t\techo \"not found\"\n\telse\n\t\techo \"success [$GZIP]\"\n\t\tGZIP=\"$GZIP -c\"\n\t\tGZIP_SUFFIX=\".gz\"\n\tfi\nfi\n\nif test -z \"$GZIP\"; then\n\tGZIP=cat\n\tGZIP_SUFFIX=\"\"\nfi\n\nif test \"$PROFILE\"; then\n\tprintf \"Using user-specified profile.....\"\n\n\tif test -z \"$CC\"; then\n\t\techo \"failed [specify compiler]\"\n\t\texit $EXIT_FAILURE\n\tfi\n\n\tif test ! -f build/ck.build.$PROFILE; then\n\t\techo \"failed [$PROFILE]\"\n\t\texit $EXIT_FAILURE\n\tfi\n\n\techo \"success [$PROFILE]\"\n\tprintf \"Generating header files..........\"\n\tgenerate include/ck_md.h.in include/ck_md.h\n\tgenerate include/freebsd/ck_md.h.in include/freebsd/ck_md.h\n\techo \"success\"\n\tprintf \"Generating build files...........\"\n\tgenerate src/Makefile.in src/Makefile\n\tgenerate doc/Makefile.in doc/Makefile\n\tgenerate build/ck.build.in build/ck.build\n\tgenerate build/regressions.build.in build/regressions.build\n\tgenerate build/ck.pc.in build/ck.pc\n\tgenerate build/ck.spec.in build/ck.spec\n\tgenerate Makefile.in Makefile\n\techo \"success\"\n\tgenerate_stdout\n\texit $EXIT_SUCCESS\nfi\n\nprintf \"Finding suitable compiler........\"\nif test ! -x \"${CC}\"; then\n\tCC=`pathsearch \"${CC:-cc}\"`\n\tif test -z \"$CC\" -o ! -x \"$CC\"; then\n\t\tCC=`pathsearch \"${CC:-gcc}\"`\n\tfi\nfi\nassert \"$CC\" \"not found\"\n\ncat << EOF > .1.c\n#include <stdio.h>\nint main(void) {\n#if defined(_WIN32)\n#if defined(__MINGW64__)\n\tputs(\"mingw64\");\n\treturn (0);\n#elif defined(__MINGW32__) && (__MINGW32_MAJOR_VERSION >= 3)\n\tputs(\"mingw32\");\n\treturn (0);\n#else\n\treturn (1);\n#endif /* __MINGW32__ && __MINGW32_MAJOR_VERSION >= 3 */\n#elif defined(__clang__) && (__clang_major__ >= 3)\n\tputs(\"clang\");\n\treturn (0);\n#elif defined(__SUNPRO_C) && (__SUNPRO_C >= 0x5110)\n\tputs(\"suncc\");\n\treturn (0);\n#elif defined(__GNUC__) && (__GNUC__ >= 4)\n\tputs(\"gcc\");\n\treturn (0);\n#else\n\treturn (1);\n#endif\n}\nEOF\n\n$CC -o .1 .1.c\nCOMPILER=`./.1 2> /dev/null`\nr=$?\nrm -f .1.c .1\n\nif test \"$r\" -ne 0; then\n\tassert \"\" \"update compiler\"\nelse\n\techo \"success [$CC]\"\nfi\n\nif test \"$COMPILER\" = \"suncc\"; then\n\tLD=/bin/ld\n\tLDFLAGS=\"-G -z text -h libck.so.$VERSION_MAJOR $LDFLAGS\"\n\tCFLAGS=\"-xO5 $CFLAGS\"\n\tPTHREAD_CFLAGS=\"-mt -lpthread\"\nelif test \"$COMPILER\" = \"gcc\" || test \"$COMPILER\" = \"clang\" || test \"$COMPILER\" = \"mingw32\" || test \"$COMPILER\" = \"mingw64\"; then\n\tLD=$CC\n\tSONAME=\"$LDNAME_MAJOR\"\n\tif test \"$SYSTEM\" = \"darwin\"; then\n\t\tCC_WL_OPT=\"-install_name\"\n\t\tLDNAME=\"libck.dylib\"\n\t\tLDNAME_VERSION=\"libck.$VERSION.dylib\"\n\t\tLDNAME_MAJOR=\"libck.$VERSION_MAJOR.dylib\"\n\t\tSONAME=\"$LIBRARY/$LDNAME_MAJOR\"\n\telse\n\t\tCC_WL_OPT=\"-soname\"\n\tfi\n\n\tLDFLAGS=\"-Wl,$CC_WL_OPT,$SONAME $LDFLAGS\"\n\tif test \"$WANT_PIC\" = \"yes\"; then\n\t\tLDFLAGS=\"$LDFLAGS -shared -fPIC\"\n\t\tCFLAGS=\"$CFLAGS -fPIC\"\n\n\t\tif [ \"$DISABLE_SHARED\" -eq 1 ] && [ \"$DISABLE_STATIC\" -eq 1 ]; then\n\t\t\techo \"Error: You have choosen to disable the shared lib, yet you also disabled the static lib.\" 1>&2\n\t\t\texit $EXIT_FAILURE\n\t\telif [ \"$DISABLE_STATIC\" -eq 1 ]; then\n\t\t\tALL_LIBS=\"libck.so\"\n\t\t\tINSTALL_LIBS=\"install-so\"\n\t\telif [ \"$DISABLE_SHARED\" -eq 1 ]; then\n\t\t\tALL_LIBS=\"libck.a\"\n\t\t\tINSTALL_LIBS=\"install-lib\"\n\t\telse\n\t\t\tALL_LIBS=\"libck.so libck.a\"\n\t\t\tINSTALL_LIBS=\"install-so install-lib\"\n\t\tfi\n\telse\n\t\tLDFLAGS=\"$LDFLAGS -fno-PIC\"\n\t\tCFLAGS=\"$CFLAGS -fno-PIC\"\n\t\tif [ \"$DISABLE_STATIC\" -eq 1 ]; then\n\t\t\techo \"Error: You have choosen to disable PIC, yet you also disabled the static lib.\" 1>&2\n\t\t\texit $EXIT_FAILURE\n\t\telse\n\t\t\tALL_LIBS=\"libck.a\"\n\t\t\tINSTALL_LIBS=\"install-lib\"\n\t\tfi\n\tfi\n\n\tCFLAGS=\"-D_BSD_SOURCE -D_DEFAULT_SOURCE -std=gnu99 -pedantic -Wall -W -Wundef -Wendif-labels -Wshadow -Wpointer-arith -Wcast-align -Wcast-qual -Wwrite-strings -Wstrict-prototypes -Wmissing-prototypes -Wnested-externs -Winline -Wdisabled-optimization -fstrict-aliasing -O2 -pipe -Wno-parentheses $CFLAGS\"\n\tPTHREAD_CFLAGS=\"-pthread\"\n\tif test \"$COMPILER\" = \"mingw64\"; then\n\t\tENVIRONMENT=64\n\t\tPLATFORM=x86_64\n\tfi\n\tif test \"$SYSTEM\" = \"netbsd\"; then\n\t\tCFLAGS=\"$CFLAGS -D_NETBSD_SOURCE\"\n\tfi\n\tif test \"$SYSTEM\" != \"dragonflybsd\"; then\n\t\tCFLAGS=\"$CFLAGS -D_XOPEN_SOURCE=600\"\n\tfi\nelse\n\tassert \"\" \"unknown compiler\"\nfi\n\nprintf \"Finding suitable archiver........\"\nif test ! -x \"${AR}\"; then\n\tAR=`pathsearch \"${AR:-ar}\"`\n\tif test -z \"$AR\" -o ! -x \"$AR\"; then\n\t\tAR=`pathsearch \"${AR:-ar}\"`\n\telse\n\t\techo \"success [$AR]\"\n\tfi\nfi\nassert \"$AR\" \"not found\"\n\nprintf \"Detecting VMA bits...............\"\nVMA=\"unknown\"\nif test \"$VMA_BITS\" = \"unknown\"; then\n\tif test \"$PLATFORM\" = \"x86\" || test $PLATFORM = \"x86_64\"; then\n\t\tcase $SYSTEM in\n\t\t\tdarwin)\n\t\t\t\tVMA=`sysctl -n machdep.cpu.address_bits.virtual`\n\t\t\t\t;;\n\t\t\tlinux)\n\t\t\t\tVMA=`awk '/address sizes/ {print $7;exit}' /proc/cpuinfo`\n\t\t\t\t;;\n\t\t\t*)\n\t\t\t\tif test \"$PLATFORM\" = \"x86\"; then\n\t\t\t\t\tVMA=\"32\"\n\t\t\t\telse\n\t\t\t\t\tcat << EOF > .1.c\n\t\t\t\t\t#include <stdio.h>\n\n\t\t\t\t\tint main(int argc, char *argv[])\n\t\t\t\t\t{\n\t\t\t\t\t\tunsigned long ret = 0x80000000;\n\n\t\t\t\t\t\t__asm __volatile(\"cpuid\\n\"\n\t\t\t\t\t\t\t\t : \"+a\" (ret));\n\t\t\t\t\t\tif (ret >= 0x80000008) {\n\t\t\t\t\t\t\t\tret = 0x80000008;\n\t\t\t\t\t\t\t\t__asm __volatile(\"cpuid\\n\"\n\t\t\t\t\t\t\t\t : \"+a\" (ret));\n\t\t\t\t\t\t\t\tprintf(\"%lu\\n\", (ret >> 8) & 0xff);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn (1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn (0);\n\t\t\t\t\t}\nEOF\n\n\t\t\t\t\t$CC -o .1 .1.c 2>/dev/null\n\t\t\t\t\tVMA=`./.1 2>/dev/null`\n\t\t\t\t\tif test $? -ne 0; then\n\t\t\t\t\t\tVMA=\"unknown\"\n\t\t\t\t\tfi\n\t\t\t\t\trm -f .1.c .1\n\t\t\t\tfi\n\t\tesac\n\tfi\n\n\tVMA_BITS=$VMA\nelse\n\tVMA=$VMA_BITS\nfi\n\nif test \"$VMA\" = \"unknown\"; then\n\techo \"unknown\"\n\tVMA_BITS_R=\"CK_MD_VMA_BITS_UNKNOWN\"\n\tVMA_BITS_VALUE_R=\"\"\n\tPOINTER_PACK_ENABLE=\"CK_MD_POINTER_PACK_DISABLE\"\nelse\n\techo \"success [$VMA]\"\n\tVMA_BITS_R=\"CK_MD_VMA_BITS\"\n\tVMA_BITS_VALUE_R=\"${VMA_BITS}ULL\"\nfi\n\nfor i in $REQUIRE_HEADER; do\n\tprintf \"Checking header file usability...\"\n\n\tcat << EOF > .1.c\n#include <$i>\nint main(void){return(0);}\nEOF\n\t$CC -o .1 .1.c 2> /dev/null\n\thf_s=$?\n\n\trm -f .1 .1.c\n\tif test $hf_s -eq 0; then\n\t\techo \"success [$i]\"\n\telse\n\t\techo \"failed  [$i]\"\n\t\texit $EXIT_FAILURE\n\tfi\ndone\n\nprintf \"Detecting git SHA................\"\nget_git_sha\necho \"$GIT_MSG [$GIT_SHA]\"\n\n# Platform will be used as a macro.\nPROFILE=\"${PROFILE:-$PLATFORM}\"\nPLATFORM=\"__${PLATFORM}__\"\n\nprintf \"Generating header files..........\"\nmkdir -p $BUILD_DIR/include\nmkdir -p $BUILD_DIR/include/freebsd\ngenerate include/ck_md.h.in $BUILD_DIR/include/ck_md.h\ngenerate include/freebsd/ck_md.h.in $BUILD_DIR/include/freebsd/ck_md.h\necho \"success\"\n\nprintf \"Generating build files...........\"\n\nmkdir -p $BUILD_DIR/doc\nmkdir -p $BUILD_DIR/build\nmkdir -p $BUILD_DIR/src\n\nif test \"$BUILD_DIR\" '!=' \"$SRC_DIR\"; then\n\tmkdir -p $BUILD_DIR/regressions\n\tcp $SRC_DIR/regressions/Makefile.unsupported $BUILD_DIR/regressions/Makefile &> /dev/null\n\tcp $SRC_DIR/build/ck.build.$PROFILE $BUILD_DIR/build/ck.build.$PROFILE &> /dev/null\nfi\n\ngenerate src/Makefile.in $BUILD_DIR/src/Makefile\ngenerate doc/Makefile.in $BUILD_DIR/doc/Makefile\ngenerate build/ck.build.in $BUILD_DIR/build/ck.build\ngenerate build/regressions.build.in $BUILD_DIR/build/regressions.build\ngenerate build/ck.pc.in $BUILD_DIR/build/ck.pc\ngenerate build/ck.spec.in $BUILD_DIR/build/ck.spec\ngenerate Makefile.in $BUILD_DIR/Makefile\ntouch src/*.c\necho \"success\"\ngenerate_stdout\n\nif test \"$PROFILE\" = \"unknown\"; then\n\techo\n\techo \"WARNING: your target architecture is not a first-class citizen.\"\n\techo\n\techo \"The test suite may not work as intended. Consider reaching out \"\n\techo \"to the mailing list about having the project add first-class \"\n\techo \"support for your architecture.\"\nfi\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "regressions",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}