{
  "metadata": {
    "timestamp": 1736709767616,
    "page": 206,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vanhoefm/krackattacks-scripts",
      "stars": 3368,
      "defaultBranch": "research",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6826171875,
          "content": "*.a\n*.o\n*.d\n*.gcno\n*.gcda\n*.gcov\n*.pyc\n*~\n.config\ntests/hwsim/logs\ntests/remote/logs\nwpaspy/build\nwpa_supplicant/eapol_test\nwpa_supplicant/nfc_pw_token\nwpa_supplicant/preauth_test\nwpa_supplicant/wpa_cli\nwpa_supplicant/wpa_passphrase\nwpa_supplicant/wpa_supplicant\nwpa_supplicant/wpa_priv\nwpa_supplicant/wpa_gui/Makefile\nwpa_supplicant/wpa_gui/wpa_gui\nwpa_supplicant/wpa_gui-qt4/Makefile\nwpa_supplicant/wpa_gui-qt4/wpa_gui\nwpa_supplicant/libwpa_test1\nwpa_supplicant/libwpa_test2\nhostapd/hostapd\nhostapd/hostapd_cli\nhostapd/hlr_auc_gw\nhostapd/nt_password_hash\nmac80211_hwsim/tools/hwsim_test\nwlantest/libwlantest.a\nwlantest/test_vectors\nwlantest/wlantest\nwlantest/wlantest_cli\n**/parallel-vm.log\nvenv/\n"
        },
        {
          "name": "Android.mk",
          "type": "blob",
          "size": 0.4169921875,
          "content": "LOCAL_PATH:= $(call my-dir)\n\nifneq ($(filter VER_0_8_X VER_2_1_DEVEL,$(WPA_SUPPLICANT_VERSION)),)\n# The order of the 2 Android.mks does matter!\n# TODO: Clean up the Android.mks, reset all the temporary variables at the\n# end of each Android.mk, so that one Android.mk doesn't depend on variables\n# set up in the other Android.mk.\ninclude $(LOCAL_PATH)/hostapd/Android.mk \\\n        $(LOCAL_PATH)/wpa_supplicant/Android.mk\nendif\n"
        },
        {
          "name": "CONTRIBUTIONS",
          "type": "blob",
          "size": 7.548828125,
          "content": "Contributions to hostap.git\n---------------------------\n\nThis software is distributed under a permissive open source license to\nallow it to be used in any projects, whether open source or proprietary.\nContributions to the project are welcome and it is important to maintain\nclear record of contributions and terms under which they are licensed.\nTo help with this, following procedure is used to allow acceptance and\nrecording of the terms.\n\nAll contributions are expected to be licensed under the modified BSD\nlicense (see below). Acknowledgment of the terms is tracked through\ninclusion of Signed-off-by tag in the contributions at the end of the\ncommit log message. This tag indicates that the contributor agrees with\nthe Developer Certificate of Origin (DCO) version 1.1 terms (see below;\nalso available from http://developercertificate.org/).\n\n\nThe current requirements for contributions to hostap.git\n--------------------------------------------------------\n\nTo indicate your acceptance of Developer's Certificate of Origin 1.1\nterms, please add the following line to the end of the commit message\nfor each contribution you make to the project:\n\nSigned-off-by: Your Name <your@email.example.org>\n\nusing your real name. Pseudonyms or anonymous contributions cannot\nunfortunately be accepted.\n\n\nThe preferred method of submitting the contribution to the project is by\nemail to the hostap mailing list:\nhostap@lists.infradead.org\nNote that the list may require subscription before accepting message\nwithout moderation. You can subscribe to the list at this address:\nhttp://lists.infradead.org/mailman/listinfo/hostap\n\nThe message should contain an inlined patch against the current\ndevelopment branch (i.e., the master branch of\ngit://w1.fi/hostap.git). Please make sure the software you use for\nsending the patch does not corrupt whitespace. If that cannot be fixed\nfor some reason, it is better to include an attached version of the\npatch file than just send a whitespace damaged version in the message\nbody.\n\nThe patches should be separate logical changes rather than doing\neverything in a single patch. In other words, please keep cleanup, new\nfeatures, and bug fixes all in their own patches. Each patch needs a\ncommit log that describes the changes (what the changes fix, what\nfunctionality is added, why the changes are useful, etc.).\n\nPlease try to follow the coding style used in the project.\n\nIn general, the best way of generating a suitable formatted patch file\nis by committing the changes to a cloned git repository and using git\nformat-patch. The patch can then be sent, e.g., with git send-email.\n\n\nHistory of license and contributions terms\n------------------------------------------\n\nUntil February 11, 2012, in case of most files in hostap.git, \"under the\nopen source license indicated in the file\" means that the contribution\nis licensed both under GPL v2 and modified BSD license (see below) and\nthe choice between these licenses is given to anyone who redistributes\nor uses the software. As such, the contribution has to be licensed under\nboth options to allow this choice.\n\nAs of February 11, 2012, the project has chosen to use only the BSD\nlicense option for future distribution. As such, the GPL v2 license\noption is no longer used and the contributions are not required to be\nlicensed until GPL v2. In case of most files in hostap.git, \"under the\nopen source license indicated in the file\" means that the contribution\nis licensed under the modified BSD license (see below).\n\nUntil February 13, 2014, the project used an extended version of the DCO\nthat included the identical items (a) through (d) from DCO 1.1 and an\nadditional item (e):\n\n(e) The contribution can be licensed under the modified BSD license\n    as shown below even in case of files that are currently licensed\n    under other terms.\n\nThis was used during the period when some of the files included the old\nlicense terms. Acceptance of this extended DCO version was indicated\nwith a Signed-hostap tag in the commit message. This additional item (e)\nwas used to collect explicit approval to license the contribution with\nonly the modified BSD license (see below), i.e., without the GPL v2\noption. This was done to allow simpler licensing terms to be used in the\nfuture. It should be noted that the modified BSD license is compatible\nwith GNU GPL and as such, this possible move to simpler licensing option\ndoes not prevent use of this software in GPL projects.\n\n\n===[ start quote from http://developercertificate.org/ ]=======================\n\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n\n===[ end quote from http://developercertificate.org/ ]=========================\n\n\nThe license terms used for hostap.git files\n-------------------------------------------\n\nModified BSD license (no advertisement clause):\n\nCopyright (c) 2002-2017, Jouni Malinen <j@w1.fi> and contributors\nAll Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\n3. Neither the name(s) of the above-listed copyright holder(s) nor the\n   names of its contributors may be used to endorse or promote products\n   derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 0.9423828125,
          "content": "wpa_supplicant and hostapd\n--------------------------\n\nCopyright (c) 2002-2017, Jouni Malinen <j@w1.fi> and contributors\nAll Rights Reserved.\n\n\nSee the README file for the current license terms.\n\nThis software was previously distributed under BSD/GPL v2 dual license\nterms that allowed either of those license alternatives to be\nselected. As of February 11, 2012, the project has chosen to use only\nthe BSD license option for future distribution. As such, the GPL v2\nlicense option is no longer used. It should be noted that the BSD\nlicense option (the one with advertisement clause removed) is compatible\nwith GPL and as such, does not prevent use of this software in projects\nthat use GPL.\n\nSome of the files may still include pointers to GPL version 2 license\nterms. However, such copyright and license notifications are maintained\nonly for attribution purposes and any distribution of this software\nafter February 11, 2012 is no longer under the GPL v2 option.\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 2.642578125,
          "content": "krackattacks\n------------\n\nCopyright of portions of this project are held by Jouni Malinen and\ncontributors (see below). Copyright of project krackattacks are held by\nMathy Vanhoef <Mathy.Vanhoef@cs.kuleuven> and contributors.\n\nSoftware of project krackattacks is licensed under the 2-clause BSD\nlicense (the license below with the 3rd clause removed).\n\n\nwpa_supplicant and hostapd\n--------------------------\n\nCopyright (c) 2002-2017, Jouni Malinen <j@w1.fi> and contributors\nAll Rights Reserved.\n\nThese programs are licensed under the BSD license (the one with\nadvertisement clause removed).\n\nIf you are submitting changes to the project, please see CONTRIBUTIONS\nfile for more instructions.\n\n\nThis package may include either wpa_supplicant, hostapd, or both. See\nREADME file respective subdirectories (wpa_supplicant/README or\nhostapd/README) for more details.\n\nSource code files were moved around in v0.6.x releases and compared to\nearlier releases, the programs are now built by first going to a\nsubdirectory (wpa_supplicant or hostapd) and creating build\nconfiguration (.config) and running 'make' there (for Linux/BSD/cygwin\nbuilds).\n\n\nLicense\n-------\n\nThis software may be distributed, used, and modified under the terms of\nBSD license:\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\n3. Neither the name(s) of the above-listed copyright holder(s) nor the\n   names of its contributors may be used to endorse or promote products\n   derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README-ap.md",
          "type": "blob",
          "size": 3.02734375,
          "content": "# Extra: Access Point Attack Details\n\n## CVE-2017-13082: Key Reinstall in FT Handshake (802.11r)\n\nAccess Points (APs) might contain a vulnerable implementation of the Fast BSS Transition (FT) handshake. More precisely, a retransmitted or replayed FT Reassociation Request may trick the AP into reinstalling the pairwise key. If the AP does not process retransmitted FT reassociation requests, or if it does not reinstall the pairwise key, it is not vulnerable. If it does reinstall the pairwise key, the effect is similar to the attack against the 4-way handshake, except that the AP instead of the client is now reinstalling a key. More precisely, the AP will subsequently reuse packet numbers when sending frames protected using TKIP, CCMP, or GCMP. This causes nonce reuse, voiding any security these encryption schemes are supposed to provide. Since the packet number is also used as a replay counter for received frames, frames sent *towards* the AP can also be replayed.\n\nIn contrast to the 4-way handshake and group key handshake, this is not an attack against the specification. That is, if the state machine as shown in Figure 13-15 of the 802.11-2016 standard is faithfully implemented, the AP will not reinstall the pairwise keys when receiving a retransmitted FT Reassociation Request. However, we found that many APs do process this frame and reinstall the pairwise key.\n\n## Suggested Solution\n\nIf the implementation is vulnerable, the suggested fix is similar to the one of the 4-way handshake. That is, a boolean can be added such that the first FT Reassociation Requests installs the pairwise keys, but any retransmissions will skip key installation. Note that ideally the AP should still send a new FT Reassociation Response, even though it did not reinstall any keys.\n\n## Impact and Exploitation Details\n\nExploiting this vulnerability does not require a man-in-the-middle position! Instead, an adversary merely needs to capture a Fast BSS Transition handshake and save the FT Reassociation Request. Because this frame does not contain a replay counter, the adversary can replay it at any time (and arbitrarily many times). Each time the vulnerable AP receives the replayed frame, the pairwise key will be reinstalled. This attack is illustrated in Figure 9 of the paper.\n\nAn adversary can trigger FT handshakes at will as follows. First, if no other AP of the network is within range of the client, the adversary clones a real AP of this network next to the client using a wormhole attack (i.e. we forward all frames over the internet). The adversary then sends a BSS Transition Management Request to the client. This request commands to the client to roam to another AP. As a result, the client will perform an FT handshake to roam to the other AP.\n\nThe included network trace [example-ft.pcapng](example-ft.pcapng) is an example of the attack executed against Linux's hostapd. When using the wireshark filter `wlan.sa == 7e:62:5c:7a:cd:47`, notice that packets 779 to 1127 all use the CCMP IV value 1. This was caused by malicious retransmissions of the FT reassociation request.\n"
        },
        {
          "name": "README-client.md",
          "type": "blob",
          "size": 8.26171875,
          "content": "# Extra: Client Attacks Details\n\n## Vulnerability in the 4-way handshake\n\nWPA1/2 clients most likely have a vulnerable implementation of the 4-way handshake. The problem is that, when a client receives a retransmitted message 3 of the 4-way handshake, it will reinstall the already in-use pairwise key. Additionally, when WPA2 is used, the client will also reinstall the already in-use group key (and the IGTK if protected management frames are being used). In case the client does not reinstall any keys, it is not vulnerable to our attack. If it does reinstall one of these keys, the associated packet number (PN) is likely reset. Because of this, the client will subsequently reuse packet numbers when sending frames protect using TKIP, CCMP, or GCMP. This causes nonce reuse (sometimes also called Initialization Vector reuse). Since the packet number is also used as a replay counter for received frames, frames sent *towards* the client can also be replayed.\n\nNote that the AP retransmits message 3 of the 4-way handshake if it did not receive message 4. Hence an attacker can trigger retransmissions of message 3 by blocking the arrival of message 4 (see \"how to exploit\" section below for more details).\n\nFigure 3 [in the paper](https://papers.mathyvanhoef.com/ccs2017.pdf) illustrates the problem graphically. Here, when a client process the first message 3, it goes to the PTK-NEGOTIATING and PTK-DONE state. While doing so, it installs the pairwise key (PTK) and group key (GTK) using the MLME-SETKEYS.request primitive (optionally the IGTK is also installed). Unfortunately, when it receives a retransmitted message 3, it will re-enter the PTK-NEGOTIATING and PTK-DONE state. As a result, the client will reinstall the PTK and GTK.\n\nThe suggested patch is to not reinstall any keys when receiving a retransmitting message 3 (but still reply using a new message 4). This can be accomplished by adding a boolean variable to the state machine. It is initialized to false, and set to true when generating a fresh SNonce and PTK in PTK-START. If the boolean is true when entering PTK-DONE, keys are installed and the boolean is set to false. If the boolean is false when entering PTK-DONE, installation of keys is skipped, but a new message 4 reply is still transmitted.\n\n### Attack and impact details\n\nThe basic idea behind the attack is shown in Figure 4 of the paper, and relies on our channel-based MitM attack. Summarized, the 4-way handshake starts normally, but the adversary does not forward message 4 of the 4-way handshake to the AP (stage 1). After some duration the AP will retransmit message 3, and the adversary forwards it to the client (stage 3). When the client process the retransmitted message 3, it will reinstall the PTK. As a result, the client (victim) will reuse packet numbers (nonces) when sending new data packets (stage 5). For more details see section 3.3 in the paper.\n\n### TPTK Construction\n\nSupplicants that use a TPTK construction generate a Temporal PTK (PTK) on the reception of message 1's, and try to verify the Message Integrity Code (MIC) of message 3 using *both* the TPTK and, if available, the currently installed PTK. If one of these two keys correctly verifies the MIC, the incoming message 3 is accepted. A supplicant using the TPTK construction may be vulnerable to the following attack, even when an attempt was made to patch it:\n\n1. The supplicant receives message 3/4\n2. The supplicant receives a forged message 1/4 (using either a random ANonce or the same ANonce from the previous/current handshake).\n3. The supplicant receives a (possibly encrypted) retransmitted message 3/4\n\nAlthough we believe few supplicants use the TPTK construction, we strongly recommend everyone to double-check their patches with this attack in mind. Our `./krack-test-client.py` script in can be used to test for this attack variant by executing it using the `--tptk` argument:\n\n\t./krack-test-client.py --help   # see step 1 and 5 in particular\n\t./krack-test-client.py --tptk\n\nNote that `wpa_supplicant` 2.6 uses the TPTK construction, and that it can be tricked into installing an all-zero encryption key. As a result, a man-in-the-middle position can be obtained where traffic can be trivially replayed, decrypted, and forged. Therefore, it is essential you update `wpa_supplicant` even when using version 2.6. The capture `example-tptk-attack.pcapng` contains an example of such an attack. Packet 99 is the forged message 1/4, and packet 101 is the retransmitted message 3/4 causing a key reinstallation. The client is 02:00:00:00:01:00.\n\n## Vulnerability in the group-key handshake\n\nWPA1/2 clients most likely also have a vulnerable implementation of the group key handshake. Here, a retransmitted group message 1 will reinstall the already in-use group key. Hence the associated packet number is lowered (or reset). This allows an attacker to replay group-addressed frames (i.e. broadcast and multicast frames) to the client. However, it does not allow the attacker to decrypt or inject broadcast packets.\n\nNote that only the AP sends real group-addressed frames. Client send them as unicast frames to the AP, after which the AP broadcasts them to all connected Clients. Additionally, we remark that group message 1 contains the last used packet number by the AP (the Key RSC field in the EAPOL-Key frame). The client normally installs the group key along with the given packet number. However, a client should never *lower* the last used packet number. This may happen with our attack technique though: the packet number in group message 1 will be *lower* than the last group-addressed frame that the client received. In this case the client should not be lowering the packet number.\n\nThe suggested patch is to track the currently installed group key, and to not reinstall an already in-use key, while still replying with a new group message 2.\n\nAn attacker can trigger transmissions of group message 1 by blocking the arrival of group message 2 using a channel-based MitM position (see below for details).\n\n### Attack and impact details\n\nThe precise instantiation of our attack depends on the behavior of the AP. For simplicity, we assume the client (victim) is connected to an AP that uses Linux's widely used hostapd. Our attack in this case is illustrated in figure 8 of the paper. Notice that we again use a channel-based MitM attack. Summarized, the adversary blocks group message 2 from arriving at the AP (end of stage 1). The AP will then transmit a new group message 1 (stage 2). The adversary then forwards the previously blocked group message 2 to the AP (stage 3). This completes the group key handshake, making hostapd install the new group key (GTK) in stage 3. Now, the adversary can forward the retransmitted group message 1 to the client, making it reinstall the group key (stage 5). As a result, previously transmitted broadcast or multicast data (i.e. those transmitted in stage 4) can now be replayed towards the client (see stage 6).\n\nNote that the group key handshake messages are unicast data frames and are encrypted using the pairwise key (e.g. using TKIP or CCMP). Even though they are encrypted, an attacker can identify these messages based on their length. Additionally, several APs send EAPOL-Key frames (i.e. handshake messages) using a non-zero Quality of Service (QoS) Traffic Identifier (TID). This is important because all clients must maintain a separate replay counter for each QoS TID (see for example 12.5.3.4.4b in the 802.11-2016 standard). Combined, this means that when we capture an encrypted group message 1 which uses a packet number of x, we can forward other encrypted data frames to the client, without affecting the attack. This is because other data frames generally use a different QoS TID. Therefore, the packet number (= replay counter) of the captured group message 2 will still accepted. Put differently, normal data frames use a QoS TID of zero, meaning they do not affect the replay counter associated to the QoS TID of EAPOL-Key frames. As a result, we can forward the group message 1 whenever we want, even after forwarding normal data frames to the client. This gives a high amount of flexibility to the attack, making it easy to execute the attack in practice.\n\nThe main limitation of this attack is that an adversary can only abuse it to replay broadcast or multicast traffic (whereas the other attacks also allow decryption and/or injection of frames).\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.3876953125,
          "content": "This project contains scripts to test if clients or access points (APs) are affected by the KRACK attack against WPA2. For [details behind this attack see our website](https://www.krackattacks.com) and [the research paper](https://papers.mathyvanhoef.com/ccs2017.pdf).\n\nRemember that our scripts are not attack scripts! You will need the appropriate network credentials in order to test if an access point or client is affected by the KRACK attack.\n\n**December 2024**: a bug has been fixed in the 7th test `./krack-test-client.py --gtkinit`. Before this bugfix, it was mentioned that (the output of) this test was unreliable, but now the output should be trustworthy when following the new instructions. That is, when this test now indicates that the device is vulnerable, it indeed is likely vulnerable.\n\n**January 2021**: the scripts have been made compatible with Python3 and has been updated to better support newer Linux distributions. If you want to revert to the old version, execute `git fetch --tags && git checkout v1` after cloning the repository (and switch back to the latest version using `git checkout research`).\n\n\n# Prerequisites\n\nOur scripts were tested on Kali Linux. To install the required dependencies on Kali, execute:\n\n\tsudo apt update\n\tsudo apt install libnl-3-dev libnl-genl-3-dev pkg-config libssl-dev net-tools git sysfsutils python3-venv iw\n\nNow compile our modified hostapd instance and create a python virtual environment. This assure you're using compatible python libraries (those listed in `krackattack/requirements.txt`):\n\n\tgit clone https://github.com/vanhoefm/krackattacks-scripts.git\n\tcd krackattacks-scripts/krackattack\n\t./build.sh\n\t./pysetup.sh\n\nThen **disable hardware encryption** for optimal results:\n\n\tcd krackattack\n\tsudo ./disable-hwcrypto.sh\n\nNote that if needed you can later re-enable hardware encryption using the script `sudo ./reenable-hwcrypto.sh`. It's recommended to reboot after disabling hardware encryption. We tested our scripts with an Intel Dual Band Wireless-AC 7260 and a TP-Link TL-WN722N v1 on Kali Linux.\n\n# Before every usage\n\nEvery time before you use the scripts you must **disable Wi-Fi** in your network manager. Then execute:\n\n\tsudo rfkill unblock wifi\n\tcd krackattack\n\tsudo su\n\tsource venv/bin/activate\n\nAfter doing this you can executing the scripts multiple times as long as you don't close the terminal.\n\n\nIf you want to undo the effects of the `disable-hwcrypto.sh` then delete the file `/etc/modprobe.d/nohwcrypt.conf`.\n\n# Testing Clients\n\nFirst modify `hostapd/hostapd.conf` and **edit the line `interface=` to specify the Wi-Fi interface** that will be used to execute the tests. Note that for all tests, once the script is running, you must let the device being tested connect to the **SSID testnetwork using the password abcdefgh**. You can change settings of the AP by modifying `hostapd/hostapd.conf`. In all tests the **client must use DHCP to get an IP** after connecting to the Wi-Fi network. This is because some tests only start after the client has requested an IP using DHCP!\n\nYou should now run the following tests located in the `krackattacks/` directory:\n\n1. **`./krack-test-client.py --replay-broadcast`**. This tests whether the client accepts replayed broadcast frames. If the client accepts replayed broadcast frames, this must be patched first. If you do not patch the client, our script will not be able to determine if the group key is being reinstalled (because then the script will always say the group key is being reinstalled).\n\n2. **`./krack-test-client.py --group --gtkinit`**. This tests whether the client installs the group key in the group key handshake with the given receive sequence counter (RSC). See section 6.4 of our [follow-up research paper](https://papers.mathyvanhoef.com/ccs2018.pdf) for the details behind this vulnerability.\n\n3. **`./krack-test-client.py --group`**. This tests whether the client reinstalls the group key in the group key handshake. In other words, it **tests if the client is vulnerable to CVE-2017-13080**. The script tests for reinstallations of the group key by sending broadcast ARP requests to the client using an already used (replayed) packet number (here packet number = nonce = IV). Note that if the client always accepts replayed broadcast frames (see `--replay-broadcast`), this test might incorrectly conclude the group key is being reinstalled.\n\n4. **`./krack-test-client.py`**. This tests for key reinstallations in the 4-way handshake by repeatedly sending encrypted message 3's to the client. **In other words, this tests for CVE-2017-13077 (the vulnerability with the highest impact) and for CVE-2017-13078 .** The script monitors traffic sent by the client to see if the pairwise key is being reinstalled. Note that this effectively performs two tests: whether the pairwise key is reinstalled, and whether the group key is reinstalled. Make sure the client requests an IP using DHCP for the group key reinstallation test to start. To assure the client is sending enough unicast frames, you can optionally ping the AP: `ping 192.168.100.254`.\n\n5. **`./krack-test-client.py --tptk`**. Identical to test 4, except that a forged message 1 is injected before sending the encrypted message 3. This variant of the test is important because some clients (e.g. wpa_supplicant v2.6) are only vulnerable to pairwise key reinstallations in the 4-way handshake when a forged message 1 is injected before sending a retransmitted message 3.\n\n6. **`./krack-test-client.py --tptk-rand`**. Same as the above test, except that the forged message 1 contains a random ANonce.\n\n7. **`./krack-test-client.py --gtkinit`**. This tests whether the client installs the group key in the 4-way handshake with the given receive sequence counter (RSC). This is done by retransmitting Msg3/4 of the 4-way handshake, each time with a new group key and a very high replay counter. We know it is vulnerable if the client under test afterwards accepts broadcast frames with a lower replay counter. Unfortunately, some clients do not accept retransmitted Msg3/4 at all, meaning such clients cannot be tested with this command. Clients that do accept a retransmitted Msg3/4, and therefore _can_ be tested with this command, will reply with a Msg4/4 which can be detected based on the following output:\n\t```\n\t[09:24:11] 02:20:2a:22:a8:30: received a new message 4\n\t```\n\tWe also recommend executing this test in environments with little background noise and executing it several times.\n\nSome additional remarks:\n\n* The most important test is `./krack-test-client`, which tests for ordinary key reinstallations in the 4-way handshake.\n\n* Perform these tests in a room with little interference. A high amount of packet loss will make this script less reliable!\n\n* Optionally you can manually inspect network traffic to confirm the output of the script (some Wi-Fi NICs may interfere with our scripts):\n\n\t- Use an extra Wi-Fi NIC in monitor mode to conform that our script (the AP) sends out frames using the proper packet numbers (IVs). In particular, check whether replayed broadcast frames indeed are sent using an already used packet number (IV).\n\n\t- Use an extra Wi-Fi NIC in monitor mode to check pairwise key reinstalls by monitoring the IVs of frames sent by the client.\n\n\t- Capture traffic on the client to see if the replayed broadcast ARP requests are accepted or not.\n\n* If the client can use multiple Wi-Fi radios/NICs, perform the test using several Wi-Fi NICs.\n\n* You can add the `--debug` parameter for more debugging output.\n\n* All unrecognized parameters are passed on to hostapd, so you can include something like `-dd -K` to make hostapd output all debug info.\n\n\n## Correspondence to Wi-Fi Alliance tests\n\nThe [Wi-Fi Alliance created a custom vulnerability detection tool](https://www.wi-fi.org/security-update-october-2017) based on our scripts.\nAt the time of writing, this tool is only accessible to Wi-Fi Alliance members.\nTheir tools supports several different tests, and these tests correspond to the functionality in our script as follows:\n\n- 4.1.1 (Plaintext retransmission of EAPOL Message 3). We currently do not support this test. This test is not necessary anyway. Make sure the device being tested passes test 4.1.3, and then it will also pass this test.\n\n- 4.1.2 (Immediate retransmission of EAPOL M3 in plaintext). We currently do not suppor this test. Again, make sure the device being tested passes test 4.1.3, and then it will also pass this test.\n\n- 4.1.3 (Immediate retransmission of encrypted EAPOL M3 during pairwise rekey handshake). This corresponds to `./krack-test-client.py`, except that encrypted EAPOL M3 are sent periodically instead of immediately.\n\n- 4.1.5 (PTK reinstallation in 4-way handshake when STA uses Temporal PTK construction, same ANonce). Execute this test using `./krack-test-client.py --tptk`.\n\n- 4.1.6 (PTK reinstallation in 4-way handshake when STA uses Temporal PTK construction, random ANonce). Execute this test using `./krack-test-client.py --tptk-rand`.\n\n- 4.2.1 (Group key handshake vulnerability test on STA). Execue this test using `./krack-test-client.py --group`.\n\n- 4.3.1 (Reinstallation of GTK and IGTK on STA supporting WNM sleep mode). We currently do not support this test (and neither does the Wi-Fi Alliance actually!).\n\n\n# Testing Access Points: Detecting a vulnerable FT Handshake (802.11r)\n\n1. Create a wpa_supplicant configuration file that can be used to connect to the network. A basic example is:\n\n\t\tctrl_interface=/var/run/wpa_supplicant\n\t\tnetwork={\n\t\t  ssid=\"testnet\"\n\t\t  key_mgmt=FT-PSK\n\t\t  psk=\"password\"\n\t\t}\n\n\tNote the use of \"FT-PSK\". Save it as network.conf or similar. For more info see [wpa_supplicant.conf](https://w1.fi/cgit/hostap/plain/wpa_supplicant/wpa_supplicant.conf).\n\n2. Try to connect to the network using your platform's wpa_supplicant. This will likely require a command such as:\n\n\t\tsudo wpa_supplicant -D nl80211 -i wlan0 -c network.conf\n\n\tIf this fails, either the AP does not support FT, or you provided the wrong network configuration options in step 1. Note that if the AP does not support FT, it is not affected by this vulnerability.\n\n3. Use this script as a wrapper over the previous wpa_supplicant command:\n\n\t\tsudo su\n\t\tsource venv/bin/activate\n\t\t./krack-ft-test.py wpa_supplicant -D nl80211 -i wlan0 -c network.conf\n\n\tThis will execute the wpa_supplicant command using the provided parameters, and will add a virtual monitor interface that will perform attack tests. It's important to first become root and then load the python virtual environment (see above how to create this virtual environment).\n\n4. Use wpa_cli to roam to a different AP of the same network. For example:\n\n\t\twpa_cli -i wlan0\n\t\t> status\n\t\tbssid=c4:e9:84:db:fb:7b\n\t\tssid=testnet\n\t\t...\n\t\t> scan_results \n\t\tbssid / frequency / signal level / flags / ssid\n\t\tc4:e9:84:db:fb:7b\t2412  -21  [WPA2-PSK+FT/PSK-CCMP][ESS] testnet\n\t\tc4:e9:84:1d:a5:bc\t2412  -31  [WPA2-PSK+FT/PSK-CCMP][ESS] testnet\n\t\t...\n\t\t> roam c4:e9:84:1d:a5:bc\n\t\t...\n   \n\tIn this example we were connected to AP c4:e9:84:db:fb:7b of testnet (see status command). The scan_results command shows this network also has a second AP with MAC c4:e9:84:1d:a5:bc. We then roam to this second AP.\n\n5. Generate traffic between the AP and client. For example:\n\n\t\tarping -I wlan0 192.168.1.10\n\n6. Now look at the output of ./krack-ft-test.py to see if the AP is vulnerable.\n\n\t1. First it should say \"Detected FT reassociation frame\". Then it will start replaying this frame to try the attack.\n\t2. The script shows which IVs (= packet numbers) the AP is using when sending data frames.\n\t3. Message `IV reuse detected (IV=X, seq=Y). AP is vulnerable!` means we confirmed it's vulnerable.\n\n\tBe sure to manually check network traces as well, to confirm this script is replaying the reassociation request properly, and to manually confirm whether there is IV (= packet number) reuse or not.\n\n\tExample output of vulnerable AP:\n\t\n\t\t[15:59:24] Replaying Reassociation Request\n\t\t[15:59:25] AP transmitted data using IV=1 (seq=0)\n\t\t[15:59:25] Replaying Reassociation Request\n\t\t[15:59:26] AP transmitted data using IV=1 (seq=0)\n\t\t[15:59:26] IV reuse detected (IV=1, seq=0). AP is vulnerable!\n\n\tExample output of patched AP (note that IVs are never reused):\n\t\n\t\t[16:00:49] Replaying Reassociation Request\n\t\t[16:00:49] AP transmitted data using IV=1 (seq=0)\n\t\t[16:00:50] AP transmitted data using IV=2 (seq=1)\n\t\t[16:00:50] Replaying Reassociation Request\n\t\t[16:00:51] AP transmitted data using IV=3 (seq=2)\n\t\t[16:00:51] Replaying Reassociation Request\n\t\t[16:00:52] AP transmitted data using IV=4 (seq=3)\n\n\n# Extra: Hardware Decryption\n\nTo confirm that hardware decryption is disable, execute `systool -vm ath9k_htc` or similar after plugging in your Wi-Fi NIC to confirm the nohwcript/swcrypto/hwcrypto parameter has been set. Note that you must replace `ath9k_htc` with the kernel module for your wireless network card.\n\n\n# Extra: 5 GHz not supported\n\nThere's no official support for testing devices in the 5 GHz band.\n\nIf you nevertheless want to use the tool on 5 GHz channels, the network card being used must allow the injection of frames in the 5 GHz channel. Unfortunately, this is not always possible due to regulatory constraints. To see on which channels you can inject frames you can execute `iw list` and look under Frequencies for channels that are not marked as disabled, no IR, or radar detection. Note that these conditions may depend on your network card, the current configured country, and the AP you are connected to. For more information see, for example, the [Arch Linux documentation](https://wiki.archlinux.org/index.php/Network_configuration/Wireless#Respecting_the_regulatory_domain).\n\nNote that the Linux kernel may not allow the injection of frames even though it is allowed to send normal frames. This is because in the function `ieee80211_monitor_start_xmit` the kernel refuses to inject frames when `cfg80211_reg_can_beacon` returns false. As a result, Linux may refuse to inject frames even though this is actually allowed. Making `cfg80211_reg_can_beacon` return true under the correct (or all) conditions prevents this bug. So you'll have to patch the Linux drivers so that `cfg80211_reg_can_beacon` always returns true, for instance, by manually patching the [packport driver](https://backports.wiki.kernel.org/index.php/Main_Page) code.\n\n\n# Extra: Manual Tests\n\nIt's also possible to manually perform (more detailed) tests by cloning the hostap git repository:\n\n\tgit clone git://w1.fi/srv/git/hostap.git\n\t\nAnd following the instructions in [tests/cipher-and-key-mgmt-testing.txt](https://w1.fi/cgit/hostap/tree/tests/cipher-and-key-mgmt-testing.txt).\n\n"
        },
        {
          "name": "attacks.h",
          "type": "blob",
          "size": 0.01953125,
          "content": "src/common/attacks.h"
        },
        {
          "name": "build_release",
          "type": "blob",
          "size": 1.244140625,
          "content": "#!/bin/sh\n\nset -e\n\nif [ -z \"$1\" ]; then\n    echo \"build_release <version>\"\n    exit 1\nfi\n\nTMP=tmp.build_release\nRELDIR=`pwd`/Release\nVER=$1\nNOW=`date +%Y-%m-%d`\n\necho \"Version: $VER - $NOW\"\n\nDATEw=`head -n 3 wpa_supplicant/ChangeLog | tail -n 1 | sed \"s/ .*//\"`\nDATEh=`head -n 3 hostapd/ChangeLog | tail -n 1 | sed \"s/ .*//\"`\n\nif [ \"$DATEw\" != \"$NOW\" -o \"$DATEh\" != \"$NOW\" ]; then\n    echo \"NOTE! Date mismatch in ChangeLog: wpa_supplicant $DATEw hostapd $DATEh != $NOW\"\nfi\n\nif [ -r $TMP ]; then\n    echo \"Temporary directory '$TMP' exists. Remove it before running this.\"\n    exit 1\nfi\n\nmkdir $TMP\nmkdir -p $RELDIR\n\ngit archive --format=tar --prefix=wpa-$VER/ HEAD \\\n\tREADME COPYING CONTRIBUTIONS src wpa_supplicant hostapd hs20 |\n\tgzip > $RELDIR/wpa-$VER.tar.gz\ngit archive --format=tar --prefix=hostapd-$VER/ HEAD \\\n\tREADME COPYING CONTRIBUTIONS src hostapd |\n\tgzip > $RELDIR/hostapd-$VER.tar.gz\ngit archive --format=tar --prefix=wpa_supplicant-$VER/ HEAD \\\n\tREADME COPYING CONTRIBUTIONS src wpa_supplicant hs20/client |\n\ttar --directory=$TMP -xf -\n\ncd $TMP\nmake -C wpa_supplicant-$VER/wpa_supplicant/doc/docbook man\nrm -f wpa_supplicant-$VER/wpa_supplicant/doc/docbook/manpage.{links,refs}\ntar czf $RELDIR/wpa_supplicant-$VER.tar.gz wpa_supplicant-$VER\ncd ..\nrm -r $TMP\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "eap_example",
          "type": "tree",
          "content": null
        },
        {
          "name": "hostapd",
          "type": "tree",
          "content": null
        },
        {
          "name": "hs20",
          "type": "tree",
          "content": null
        },
        {
          "name": "krackattack",
          "type": "tree",
          "content": null
        },
        {
          "name": "mac80211_hwsim",
          "type": "tree",
          "content": null
        },
        {
          "name": "radius_example",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "wlantest",
          "type": "tree",
          "content": null
        },
        {
          "name": "wpa_supplicant",
          "type": "tree",
          "content": null
        },
        {
          "name": "wpadebug",
          "type": "tree",
          "content": null
        },
        {
          "name": "wpaspy",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}