{
  "metadata": {
    "timestamp": 1736709843354,
    "page": 314,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cilium/pwru",
      "stars": 2945,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.029296875,
          "content": "*.gif\nLICENSE\n*.md\n*.png\n.git\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0751953125,
          "content": "bpf/headers/bpf/* linguist-vendored\nbpf/headers/vmlinux*.h linguist-vendored\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.125,
          "content": ".vagrant\npwru\nrelease\ntags\nkprobepwru_*\nkprobepwruwithoutoutputskb_*\nkprobemultipwru_*\nkprobemultipwruwithoutoutputskb_*\n!pwru/\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.0146484375,
          "content": "* @cilium/pwru\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.564453125,
          "content": "FROM --platform=$BUILDPLATFORM docker.io/library/golang:1.23.1 AS build\nARG TARGETPLATFORM\nARG BUILDPLATFORM\nARG TARGETARCH\n\nRUN gcc_pkg=$(if [ \"${TARGETARCH}\" = \"arm64\" ]; then echo \"aarch64\"; else echo \"x86-64\"; fi)  && \\\n    apt update && \\\n    apt install -y make git clang-15 llvm curl gcc flex bison gcc-${gcc_pkg}* libc6-dev-${TARGETARCH}-cross && \\\n    ln -s /usr/bin/clang-15 /usr/bin/clang\n\nWORKDIR /pwru\nCOPY . .\nRUN ARCHS=${TARGETARCH} make local-release\nRUN tar xfv release/pwru-linux-${TARGETARCH}.tar.gz\n\nFROM busybox\nCOPY --from=build /pwru/pwru /usr/local/bin/\n"
        },
        {
          "name": "KNOWN_ISSUES.md",
          "type": "blob",
          "size": 3.78125,
          "content": "# Known Issues\n\nThis document outlines the known issues of pwru and workarounds.\n\n## pwru killed by OOM when SELinux is enabled in some kernel versions\n\nIn some kernel versions, SELinux has a problem that it always generates the audit event (which later will be handled by auditd) per `bpf_probe_read_kernel` call. Since pwru calls it from hundreds or thousands of the BPF hook inside the kernel, a massive number of the audit events will be generated in a short time. As a result, the auditd cannot catch up to the speed and the message will be queued up to the backlog memory inside the kernel. Then, OOM killer works. When you are hitting this issue, you should see the `dmesg` like below.\n\n```\n[  232.680704] audit_log_start: 13274 callbacks suppressed\n[  232.680706] audit: audit_backlog=65 > audit_backlog_limit=64\n[  232.681686] audit: audit_lost=1228717 audit_rate_limit=0 audit_backlog_limit=64\n[  232.682072] audit: backlog limit exceeded\n[  232.682407] audit: audit_backlog=65 > audit_backlog_limit=64\n[  232.682729] audit: audit_lost=1228718 audit_rate_limit=0 audit_backlog_limit=64\n[  232.683095] audit: backlog limit exceeded\n[  232.683442] audit: audit_backlog=65 > audit_backlog_limit=64\n[  232.683769] audit: audit_lost=1228719 audit_rate_limit=0 audit_backlog_limit=64\n[  232.684128] audit: backlog limit exceeded\n[  232.684431] audit: audit_backlog=65 > audit_backlog_limit=64\n[  236.816357] pwru invoked oom-killer: gfp_mask=0x100cca(GFP_HIGHUSER_MOVABLE), order=0, oom_score_adj=0\n[  236.816822] CPU: 0 PID: 2136 Comm: pwru Not tainted 5.11.12-300.fc34.x86_64 #1\n[  236.817258] Hardware name: innotek GmbH VirtualBox/VirtualBox, BIOS VirtualBox 12/01/2006\n[  236.817737] Call Trace:\n[  236.818110]  dump_stack+0x6b/0x83\n[  236.818490]  dump_header+0x4a/0x1f3\n[  236.818859]  oom_kill_process.cold+0xb/0x10\n[  236.819240]  out_of_memory+0x229/0x4c0\n[  236.819638]  __alloc_pages_slowpath.constprop.0+0xbf0/0xcc0\n[  236.820054]  __alloc_pages_nodemask+0x30a/0x340\n[  236.820443]  pagecache_get_page+0x192/0x470\n[  236.820828]  filemap_fault+0x6bd/0xa50\n[  236.821198]  ext4_filemap_fault+0x2d/0x40\n[  236.821574]  __do_fault+0x36/0x100\n[  236.821936]  handle_mm_fault+0x1174/0x1970\n[  236.822309]  do_user_addr_fault+0x19f/0x480\n[  236.822687]  exc_page_fault+0x67/0x150\n[  236.823057]  ? asm_exc_page_fault+0x8/0x30\n[  236.823440]  asm_exc_page_fault+0x1e/0x30\n[  236.823814] RIP: 0033:0x42fbe0\n[  236.824175] Code: Unable to access opcode bytes at RIP 0x42fbb6.\n[  236.824589] RSP: 002b:000000c000041ec8 EFLAGS: 00010202\n[  236.824996] RAX: 000000c000033400 RBX: 0000000000000017 RCX: 000000c000033400\n[  236.825438] RDX: 0000000000000001 RSI: 0000000000000001 RDI: 0000003720f59a77\n[  236.825882] RBP: 000000c000041ee0 R08: 00000000000008b2 R09: 0000000000000000\n[  236.826329] R10: 0000000000000000 R11: 0000000000000246 R12: 000000c000041950\n[  236.826782] R13: 000000c000032000 R14: 000000c0000004e0 R15: 00007ff583df5034\n[  236.827278] Mem-Info:\n[  236.827582] active_anon:224 inactive_anon:30787 isolated_anon:0\n                active_file:351 inactive_file:227 isolated_file:0\n                unevictable:0 dirty:3 writeback:0\n                slab_reclaimable:4134 slab_unreclaimable:76903\n                mapped:529 shmem:440 pagetables:803 bounce:0\n                free:1921 free_pcp:25 free_cma:0\n```\n\nThis issue was introduced in [this commit](https://github.com/torvalds/linux/commit/59438b46471ae6cdfb761afc8c9beaf1e428a331) (v5.6-rc1) and fixed in [this commit](https://github.com/torvalds/linux/commit/ff40e51043af63715ab413995ff46996ecf9583f) (v5.13-rc5) in the upstream kernel. So, any kernel using the revision between those two commits may be affected unless the fix is not backported.\n\nTo work around this issue, you can disable the SELinux or make it permissive mode, but we strongly encourage you to upgrade the kernel instead.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.083984375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} Authors of Cilium\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.5673828125,
          "content": "GO := go\nGO_BUILD = CGO_ENABLED=1 $(GO) build\nGO_GENERATE = $(GO) generate\nGO_TAGS ?=\nTARGET_GOARCH ?= amd64\nGOARCH ?= amd64\nTARGET=pwru\nINSTALL = $(QUIET)install\nBINDIR ?= /usr/local/bin\nVERSION=$(shell git describe --tags --always)\nLIBPCAP_ARCH ?= x86_64-unknown-linux-gnu\n# For compiling libpcap and CGO\nCC ?= gcc\nARCHS ?= amd64 arm64\n\nTEST_TIMEOUT ?= 5s\n.DEFAULT_GOAL := pwru\n\n## Build the GO binary\npwru: libpcap/libpcap.a\n\tTARGET_GOARCH=$(TARGET_GOARCH) $(GO_GENERATE)\n\tCC=$(CC) GOARCH=$(TARGET_GOARCH) $(GO_BUILD) $(if $(GO_TAGS),-tags $(GO_TAGS)) \\\n\t\t-ldflags \"-w -s \\\n\t\t-X 'github.com/cilium/pwru/internal/pwru.Version=${VERSION}'\"\n\n## Build libpcap for static linking\nlibpcap/libpcap.a:\n\tcd libpcap && \\\n\t\tCC=$(LIBPCAP_CC) ./configure --disable-rdma --disable-shared --disable-usb --disable-netmap --disable-bluetooth --disable-dbus --without-libnl --host=$(LIBPCAP_ARCH) && \\\n\t\tmake\n\n## Build the GO binary within a Docker container\nrelease:\n\tdocker run \\\n\t\t--rm \\\n\t\t--workdir /pwru \\\n\t\t--volume `pwd`:/pwru docker.io/library/golang:1.23.1 \\\n\t\tsh -c \"apt update && apt install -y make git clang-15 llvm curl gcc flex bison gcc-aarch64* libc6-dev-arm64-cross && \\\n\t\t\tln -s /usr/bin/clang-15 /usr/bin/clang && \\\n\t\t\tgit config --global --add safe.directory /pwru && \\\n\t\t\tmake local-release\"\n\n## Build a new release\nlocal-release: clean\n\tARCHS='$(ARCHS)' ./local-release.sh\n\n## Install the GO Binary to the location specified by 'BINDIR'\ninstall: $(TARGET)\n\t$(INSTALL) -m 0755 -d $(DESTDIR)$(BINDIR)\n\t$(INSTALL) -m 0755 $(TARGET) $(DESTDIR)$(BINDIR)\n\n## Clean up build artifacts\nclean:\n\trm -f $(TARGET)\n\trm -f kprobepwru_bpf*\n\trm -f kprobemultipwru_bpf*\n\trm -f kprobepwruwithoutoutputskb_bpf*\n\trm -f kprobemultipwruwithoutoutputskb_bpf*\n\tcd libpcap/ && make clean || true\n\n## Run GO tests\ntest:\n\t$(GO) test -timeout=$(TEST_TIMEOUT) -race -cover $$($(GO) list ./...)\n\n# COLORS\nGREEN  := $(shell tput -Txterm setaf 2)\nYELLOW := $(shell tput -Txterm setaf 3)\nWHITE  := $(shell tput -Txterm setaf 7)\nRESET  := $(shell tput -Txterm sgr0)\n\nTARGET_MAX_CHAR_NUM=20\n## Show this help\nhelp:\n\t@echo ''\n\t@echo 'Usage:'\n\t@echo '  ${YELLOW}make${RESET} ${GREEN}<target>${RESET}'\n\t@echo ''\n\t@echo 'Targets:'\n\n\t@awk '/^[a-zA-Z0-9_-]+:/ { \\\n\t\thelpMessage = match(lastLine, /^## (.*)/); \\\n\t\tif (helpMessage) { \\\n\t\t\thelpCommand = substr($$1, 0, index($$1, \":\")-1); \\\n\t\t\thelpMessage = substr(lastLine, RSTART + 3, RLENGTH); \\\n\t\t\tprintf \"  ${YELLOW}%-$(TARGET_MAX_CHAR_NUM)s${RESET} ${GREEN}%s${RESET}\\n\", helpCommand, helpMessage; \\\n\t\t} \\\n\t} \\\n\t{ lastLine = $$0 }' $(MAKEFILE_LIST)\n\n.PHONY: $(TARGET) release local-release install clean test\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.8857421875,
          "content": "# pwru (packet, where are you?)\n\n[![Build and Test](https://github.com/cilium/pwru/actions/workflows/test.yml/badge.svg?branch=main)](https://github.com/cilium/pwru/actions/workflows/test.yml)\n[![GitHub Release](https://img.shields.io/github/release/cilium/pwru.svg?style=flat)](https://github.com/cilium/pwru/releases/latest)\n\n![logo](logo.png \"Detective Gopher is looking for packet traces left by eBPF bee\")\n\n`pwru` is an [eBPF](https://ebpf.io)-based tool for tracing network packets in\nthe Linux kernel with advanced filtering capabilities. It allows fine-grained\nintrospection of kernel state to facilitate debugging network connectivity issues.\n\nThe following example shows where the packets of a `curl` request are dropped\nafter installing an IP tables rule:\n\n![demo](demo.gif)\n\n## Running\n\n### Requirements\n\n`pwru` requires >= 5.3 kernel to run. For `--output-skb` >= 5.9 kernel is required. For `--backend=kprobe-multi` >= 5.18 kernel is required.\n\n`pwru` optionally requires `debugfs`. It has to be mounted in `/sys/kernel/debug`. In case the folder is empty, it can be mounted with:\n\n```\nmount -t debugfs none /sys/kernel/debug\n```\n\nThe following kernel configuration is required.\n\n|           Option         | Backend      |                   Note                               |\n| ------------------------ | -------------|----------------------------------------------------- |\n| CONFIG_DEBUG_INFO_BTF=y  | both         | available since >= 5.3                               |\n| CONFIG_KPROBES=y         | both         |                                                      |\n| CONFIG_PERF_EVENTS=y     | both         |                                                      |\n| CONFIG_BPF=y             | both         |                                                      |\n| CONFIG_BPF_SYSCALL=y     | both         |                                                      |\n| CONFIG_FUNCTION_TRACER=y | kprobe-multi | /sys/kernel/debug/tracing/available_filter_functions |\n| CONFIG_FPROBE=y          | kprobe-multi | available since >= 5.18                              |\n\nYou can use `zgrep $OPTION /proc/config.gz` to validate whether option is enabled.\n\n### Downloading\n\nYou can download the statically linked executable for x86\\_64 and arm64 from the\n[release page](https://github.com/cilium/pwru/releases).\n\n### Usage\n\n```\n$ ./pwru --help\n\nUsage: ./pwru [options] [pcap-filter]\n    Available pcap-filter: see \"man 7 pcap-filter\"\n    Available options:\n      --all-kmods                      attach to all available kernel modules\n      --backend string                 Tracing backend('kprobe', 'kprobe-multi'). Will auto-detect if not specified.\n      --filter-func string             filter kernel functions to be probed by name (exact match, supports RE2 regular expression)\n      --filter-ifname string           filter skb ifname in --filter-netns (if not specified, use current netns)\n      --filter-kprobe-batch uint       batch size for kprobe attaching/detaching (default 10)\n      --filter-mark uint32             filter skb mark\n      --filter-netns string            filter netns (\"/proc/<pid>/ns/net\", \"inode:<inode>\")\n      --filter-non-skb-funcs strings   filter non-skb kernel functions to be probed (--filter-track-skb-by-stackid will be enabled)\n      --filter-trace-tc                trace TC bpf progs\n      --filter-trace-xdp               trace XDP bpf progs\n      --filter-track-skb               trace a packet even if it does not match given filters (e.g., after NAT or tunnel decapsulation)\n      --filter-track-skb-by-stackid    trace a packet even after it is kfreed (e.g., traffic going through bridge)\n  -h, --help                           display this message and exit\n      --kernel-btf string              specify kernel BTF file\n      --kmods strings                  list of kernel modules names to attach to\n      --output-caller                  print caller function name\n      --output-file string             write traces to file\n      --output-json                    output traces in JSON format\n      --output-limit-lines uint        exit the program after the number of events has been received/printed\n      --output-meta                    print skb metadata\n      --output-skb                     print skb\n      --output-skb-shared-info         print skb shared info\n      --output-stack                   print stack\n      --output-tuple                   print L4 tuple\n      --timestamp string               print timestamp per skb (\"current\", \"relative\", \"absolute\", \"none\") (default \"none\")\n      --version                        show pwru version and exit\n```\n\nThe `--filter-func` switch does an exact match on function names i.e.\n`--filter-func=foo` only matches `foo()`; for a wildcarded match, try\n`--filter-func=\".*foo.*\"` instead.\n\n### Running with Docker\n\nDocker images for `pwru` are published at https://hub.docker.com/r/cilium/pwru.\n\nAn example how to run `pwru` with Docker:\n\n```\ndocker run --privileged --rm -t --pid=host -v /sys/kernel/debug/:/sys/kernel/debug/ cilium/pwru pwru --output-tuple 'host 1.1.1.1'\n```\n\n### Running on Kubernetes\n\nThe following example shows how to run `pwru` on a given node:\n```\n#!/usr/bin/env bash\nNODE=kind-control-plane\nPWRU_ARGS=\"--output-tuple 'host 1.1.1.1'\"\n\ntrap \" kubectl delete --wait=false pod pwru \" EXIT\n\nkubectl apply -f - <<EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: pwru\nspec:\n  nodeSelector:\n    kubernetes.io/hostname: ${NODE}\n  containers:\n  - image: docker.io/cilium/pwru:latest\n    name: pwru\n    volumeMounts:\n    - mountPath: /sys/kernel/debug\n      name: sys-kernel-debug\n    securityContext:\n      privileged: true\n    command: [\"/bin/sh\"]\n    args: [\"-c\", \"pwru ${PWRU_ARGS}\"]\n  volumes:\n  - name: sys-kernel-debug\n    hostPath:\n      path: /sys/kernel/debug\n      type: DirectoryOrCreate\n  hostNetwork: true\n  hostPID: true\nEOF\n\nkubectl wait pod pwru --for condition=Ready --timeout=90s\nkubectl logs -f pwru\n```\n\n### Running on Vagrant\n\nSee [docs/vagrant.md](docs/vagrant.md)\n\n## Developing\n\n### Dependencies\n\n* Go >= 1.16\n* LLVM/clang >= 12\n* Bison\n* Lex/Flex >= 2.5.31\n\n### Building\n\n```\nmake\n```\n\nAlternatively, you can build in the Docker container:\n\n```\nmake release\n```\n\n## Contributing\n\n`pwru` is an open source project. The userspace code is licensed under\n[Apache-2.0](LICENSE), while the BPF under [BSD 2-Clause](bpf/LICENSE.BSD-2-Clause)\nand [GPL-2.0](bpf/LICENSE.GPL-2.0). Everybody is welcome to contribute.\nContributors are required to follow the [Contributor Covenant Code of\nConduct](https://www.contributor-covenant.org/version/1/4/code-of-conduct/) and\nmust adhere to the [Developer Certificate of\nOrigin](https://developercertificate.org/) by adding a Signed-off-by line to\ntheir commit messages.\n\n## Community\n\nJoin the `#pwru` [Slack channel](https://slack.cilium.io) to chat with\ndevelopers, maintainers, and other users. This is a good first stop to ask\nquestions and share your experiences.\n\n## Logo Credits\n\nThe detective gopher is based on the Go gopher designed by Renee French.\n"
        },
        {
          "name": "RELEASE.md",
          "type": "blob",
          "size": 0.9541015625,
          "content": "# RELEASE\n\nRelease process and checklist for `pwru`.\n\nThis repository doesn't use release branches. All releases currently stem from\nthe `main` branch.\n\n## Prepare the variables\n\nThese variables will be used in the commands throughout the document to allow\ncopy-pasting.\n\n### Version\n\nIf releasing a new version v0.0.3 with the latest release being v0.0.2, for\nexample, they will look as follows:\n\n    export RELEASE=v0.0.3\n    export LAST_RELEASE=v0.0.2\n\n### Commit SHA to release\n\n    export COMMIT_SHA=<commit-sha-to-release>\n\n## Tag a release\n\n    git tag -a $RELEASE -m \"$RELEASE release\" $COMMIT_SHA && git push origin $RELEASE\n\n## Update the GitHub release notes\n\nWhen a tag is pushed, a GitHub Action job takes care of creating a new GitHub\ndraft release, building artifacts and attaching them to the draft release. Once\nthe draft is ready, use the \"Auto-generate release notes\" button to generate\nthe release notes from PR titles, review them and publish the release.\n"
        },
        {
          "name": "Vagrantfile",
          "type": "blob",
          "size": 0.5146484375,
          "content": "Vagrant.configure(\"2\") do |config|\n    config.vm.box = \"generic/ubuntu2204\"\n    config.vm.synced_folder \".\", \"/pwru\"\n    config.vm.provision \"shell\", inline: <<-SHELL\n      export DEBIAN_FRONTEND=noninteractive\n      apt-get update\n      apt-get install -y clang-12 golang make\n      update-alternatives --install /usr/bin/clang clang /usr/bin/clang-12 100\n      [ -f /usr/lib/llvm-12/bin/llvm-strip ] && [ -f /usr/local/bin/llvm-strip ] || \\\n      ln -s /usr/lib/llvm-12/bin/llvm-strip /usr/local/bin/llvm-strip\n    SHELL\nend\n"
        },
        {
          "name": "actions",
          "type": "tree",
          "content": null
        },
        {
          "name": "bpf",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.go",
          "type": "blob",
          "size": 0.32421875,
          "content": "// SPDX-License-Identifier: Apache-2.0\n// Copyright (C) 2021 Authors of Cilium */\n\n//go:generate sh -c \"echo Generating for $TARGET_GOARCH\"\n//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -target $TARGET_GOARCH -cc clang -no-strip KProbePWRU ./bpf/kprobe_pwru.c -- -I./bpf/headers -Wno-address-of-packed-member\n\npackage main\n"
        },
        {
          "name": "demo.gif",
          "type": "blob",
          "size": 86.140625,
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.9345703125,
          "content": "module github.com/cilium/pwru\n\ngo 1.23.1\n\nrequire (\n\tgithub.com/cheggaaa/pb/v3 v3.1.5\n\tgithub.com/cilium/ebpf v0.17.1\n\tgithub.com/cloudflare/cbpfc v0.0.0-20221017140110-11acb56438a2\n\tgithub.com/jsimonetti/rtnetlink v1.4.2\n\tgithub.com/spf13/pflag v1.0.5\n\tgithub.com/tklauser/ps v0.0.3\n\tgithub.com/vishvananda/netns v0.0.5\n\tgolang.org/x/arch v0.13.0\n\tgolang.org/x/net v0.34.0\n\tgolang.org/x/sync v0.10.0\n\tgolang.org/x/sys v0.29.0\n)\n\nrequire (\n\tgithub.com/VividCortex/ewma v1.2.0 // indirect\n\tgithub.com/fatih/color v1.15.0 // indirect\n\tgithub.com/google/go-cmp v0.6.0 // indirect\n\tgithub.com/josharian/native v1.1.0 // indirect\n\tgithub.com/mattn/go-colorable v0.1.13 // indirect\n\tgithub.com/mattn/go-isatty v0.0.19 // indirect\n\tgithub.com/mattn/go-runewidth v0.0.15 // indirect\n\tgithub.com/mdlayher/netlink v1.7.2 // indirect\n\tgithub.com/mdlayher/socket v0.4.1 // indirect\n\tgithub.com/pkg/errors v0.9.1 // indirect\n\tgithub.com/rivo/uniseg v0.2.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 6.615234375,
          "content": "github.com/VividCortex/ewma v1.2.0 h1:f58SaIzcDXrSy3kWaHNvuJgJ3Nmz59Zji6XoJR/q1ow=\ngithub.com/VividCortex/ewma v1.2.0/go.mod h1:nz4BbCtbLyFDeC9SUHbtcT5644juEuWfUAUnGx7j5l4=\ngithub.com/cheggaaa/pb/v3 v3.1.5 h1:QuuUzeM2WsAqG2gMqtzaWithDJv0i+i6UlnwSCI4QLk=\ngithub.com/cheggaaa/pb/v3 v3.1.5/go.mod h1:CrxkeghYTXi1lQBEI7jSn+3svI3cuc19haAj6jM60XI=\ngithub.com/cilium/ebpf v0.9.0/go.mod h1:+OhNOIXx/Fnu1IE8bJz2dzOA+VSfyTfdNUVdlQnxUFY=\ngithub.com/cilium/ebpf v0.17.1 h1:G8mzU81R2JA1nE5/8SRubzqvBMmAmri2VL8BIZPWvV0=\ngithub.com/cilium/ebpf v0.17.1/go.mod h1:vay2FaYSmIlv3r8dNACd4mW/OCaZLJKJOo+IHBvCIO8=\ngithub.com/cloudflare/cbpfc v0.0.0-20221017140110-11acb56438a2 h1:tR13nc9+yx04rglzDJGQLoz3bTsh0os9tXpis6qwSVk=\ngithub.com/cloudflare/cbpfc v0.0.0-20221017140110-11acb56438a2/go.mod h1:KV9WSdjdUOxRC4RdsvoV1W5JTdMe7IjMgSUwcBrs860=\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/fatih/color v1.15.0 h1:kOqh6YHBtK8aywxGerMG2Eq3H6Qgoqeo13Bk2Mv/nBs=\ngithub.com/fatih/color v1.15.0/go.mod h1:0h5ZqXfHYED7Bhv2ZJamyIOUej9KtShiJESRwBDUSsw=\ngithub.com/frankban/quicktest v1.14.0/go.mod h1:NeW+ay9A/U67EYXNFA1nPE8e/tnQv/09mUdL/ijj8og=\ngithub.com/go-quicktest/qt v1.101.0 h1:O1K29Txy5P2OK0dGo59b7b0LR6wKfIhttaAhHUyn7eI=\ngithub.com/go-quicktest/qt v1.101.0/go.mod h1:14Bz/f7NwaXPtdYEgzsx46kqSxVwTbzVZsDC26tQJow=\ngithub.com/google/go-cmp v0.5.6/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/josharian/native v1.1.0 h1:uuaP0hAbW7Y4l0ZRQ6C9zfb7Mg1mbFKry/xzDAfmtLA=\ngithub.com/josharian/native v1.1.0/go.mod h1:7X/raswPFr05uY3HiLlYeyQntB6OO7E/d2Cu7qoaN2w=\ngithub.com/jsimonetti/rtnetlink v1.4.2 h1:Df9w9TZ3npHTyDn0Ev9e1uzmN2odmXd0QX+J5GTEn90=\ngithub.com/jsimonetti/rtnetlink v1.4.2/go.mod h1:92s6LJdE+1iOrw+F2/RO7LYI2Qd8pPpFNNUYW06gcoM=\ngithub.com/jsimonetti/rtnetlink/v2 v2.0.1 h1:xda7qaHDSVOsADNouv7ukSuicKZO7GgVUCXxpaIEIlM=\ngithub.com/jsimonetti/rtnetlink/v2 v2.0.1/go.mod h1:7MoNYNbb3UaDHtF8udiJo/RH6VsTKP1pqKLUTVCvToE=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pretty v0.3.0/go.mod h1:640gp4NfQd8pI5XOwp5fnNeVWj67G7CFk/SaSQn7NBk=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=\ngithub.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=\ngithub.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=\ngithub.com/mattn/go-isatty v0.0.19 h1:JITubQf0MOLdlGRuRq+jtsDlekdYPia9ZFsB8h/APPA=\ngithub.com/mattn/go-isatty v0.0.19/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mattn/go-runewidth v0.0.15 h1:UNAjwbU9l54TA3KzvqLGxwWjHmMgBUVhBiTjelZgg3U=\ngithub.com/mattn/go-runewidth v0.0.15/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=\ngithub.com/mdlayher/netlink v1.7.2 h1:/UtM3ofJap7Vl4QWCPDGXY8d3GIY2UGSDbK+QWmY8/g=\ngithub.com/mdlayher/netlink v1.7.2/go.mod h1:xraEF7uJbxLhc5fpHL4cPe221LI2bdttWlU+ZGLfQSw=\ngithub.com/mdlayher/socket v0.4.1 h1:eM9y2/jlbs1M615oshPQOHZzj6R6wMT7bX5NPiQvn2U=\ngithub.com/mdlayher/socket v0.4.1/go.mod h1:cAqeGjoufqdxWkD7DkpyS+wcefOtmu5OQ8KuoJGIReA=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/rivo/uniseg v0.2.0 h1:S1pD9weZBuJdFmowNwbpi7BJ8TNftyUImj/0WQi72jY=\ngithub.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/rogpeppe/go-internal v1.6.1/go.mod h1:xXDCJY+GAPziupqXw64V24skbSoqbTEfhy4qGm1nDQc=\ngithub.com/rogpeppe/go-internal v1.11.0 h1:cWPaGQEPrBb5/AsnsZesgZZ9yb1OQ+GOISoDNXVBh4M=\ngithub.com/rogpeppe/go-internal v1.11.0/go.mod h1:ddIwULY96R17DhadqLgMfk9H9tvdUzkipdSkR5nkCZA=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/tklauser/ps v0.0.3 h1:mn9T6eaAb0VoWkjFGMhs1LDLiIxIArvDepEQo0CU+zU=\ngithub.com/tklauser/ps v0.0.3/go.mod h1:Dbtzb3oSPyYLGMPrz2a5mW+CfzEP6aYugfyfvtw5zdU=\ngithub.com/vishvananda/netns v0.0.5 h1:DfiHV+j8bA32MFM7bfEunvT8IAqQ/NzSJHtcmW5zdEY=\ngithub.com/vishvananda/netns v0.0.5/go.mod h1:SpkAiCQRtJ6TvvxPnOSyH3BMl6unz3xZlaprSwhNNJM=\ngolang.org/x/arch v0.13.0 h1:KCkqVVV1kGg0X87TFysjCJ8MxtZEIU4Ja/yXGeoECdA=\ngolang.org/x/arch v0.13.0/go.mod h1:FEVrYAQjsQXMVJ1nsMoVVXPZg6p2JE2mx8psSWTDQys=\ngolang.org/x/net v0.0.0-20210917221730-978cfadd31cf/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.34.0 h1:Mb7Mrk043xzHgnRM88suvJFwzVrRfHEHJEl5/71CKw0=\ngolang.org/x/net v0.34.0/go.mod h1:di0qlW3YNM5oh6GqDGQr92MyTozJPmybPK4Ev/Gm31k=\ngolang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=\ngolang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210906170528-6f6e22806c34/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210921065528-437939a70204/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.29.0 h1:TPYlXGxvx1MGTn2GiZDhnjPA9wZzZeGKHHmKhHYvgaU=\ngolang.org/x/sys v0.29.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/errgo.v2 v2.1.0/go.mod h1:hNsd1EY+bozCKY1Ytp96fpM3vjJbqLJn88ws8XvfDNI=\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "libpcap",
          "type": "tree",
          "content": null
        },
        {
          "name": "local-release.sh",
          "type": "blob",
          "size": 0.640625,
          "content": "#!/bin/sh\n\nset -uex\n\nOS=linux\n\nfor ARCH in ${ARCHS}; do\n    if [ \"$ARCH\" = \"arm64\" ]; then\n        LIBPCAP_ARCH=aarch64-unknown-linux-gnu\n        CC=aarch64-linux-gnu-gcc\n    else\n        LIBPCAP_ARCH=x86_64-unknown-linux-gnu\n        CC=x86_64-linux-gnu-gcc\n    fi\n\n    make clean\n    echo \"Building release binary for ${OS}/${ARCH}...\"\n    make pwru TARGET_GOARCH=${ARCH} LIBPCAP_ARCH=${LIBPCAP_ARCH} CC=${CC} \n\n    test -d release/${OS}/${ARCH} || mkdir -p release/${OS}/${ARCH}\n    tar -czf release/pwru-${OS}-${ARCH}.tar.gz pwru\n    (cd release && sha256sum pwru-${OS}-${ARCH}.tar.gz > pwru-${OS}-${ARCH}.tar.gz.sha256sum)\n    rm -r release/${OS}\ndone\n"
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 44.31640625,
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 9.0810546875,
          "content": "// SPDX-License-Identifier: Apache-2.0\n/* Copyright Martynas Pumputis */\n/* Copyright Authors of Cilium */\n\npackage main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"os/signal\"\n\t\"runtime\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"github.com/cilium/ebpf\"\n\t\"github.com/cilium/ebpf/btf\"\n\t\"github.com/cilium/ebpf/rlimit\"\n\t\"golang.org/x/sys/unix\"\n\n\t\"github.com/cilium/pwru/internal/libpcap\"\n\t\"github.com/cilium/pwru/internal/pwru\"\n)\n\nfunc main() {\n\tflags := pwru.Flags{}\n\tflags.SetFlags()\n\tflags.Parse()\n\n\tif flags.ShowHelp {\n\t\tflags.PrintHelp()\n\t\tos.Exit(0)\n\t}\n\tif flags.ShowVersion {\n\t\tfmt.Printf(\"pwru %s\\n\", pwru.Version)\n\t\tos.Exit(0)\n\t}\n\tif flags.FilterTrackBpfHelpers {\n\t\tif runtime.GOARCH != \"amd64\" {\n\t\t\tlog.Fatalf(\"BPF helpers tracking is only supported on amd64\")\n\t\t}\n\t}\n\n\tif err := unix.Setrlimit(unix.RLIMIT_NOFILE, &unix.Rlimit{\n\t\tCur: 8192,\n\t\tMax: 8192,\n\t}); err != nil {\n\t\tlog.Fatalf(\"failed to set temporary rlimit: %s\", err)\n\t}\n\tif err := rlimit.RemoveMemlock(); err != nil {\n\t\tlog.Fatalf(\"Failed to set temporary rlimit: %s\", err)\n\t}\n\n\tctx, stop := signal.NotifyContext(context.Background(), os.Interrupt, syscall.SIGTERM)\n\tdefer stop()\n\n\tvar btfSpec *btf.Spec\n\tvar err error\n\tif flags.KernelBTF != \"\" {\n\t\tbtfSpec, err = btf.LoadSpec(flags.KernelBTF)\n\t} else {\n\t\tbtfSpec, err = btf.LoadKernelSpec()\n\t}\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to load BTF spec: %s\", err)\n\t}\n\n\tif (flags.OutputSkb || flags.OutputShinfo) && !pwru.HaveSnprintfBtf(btfSpec) {\n\t\tlog.Fatal(\"Unsupported to output skb or shinfo because bpf_snprintf_btf() is unavailable\")\n\t}\n\n\tif flags.AllKMods {\n\t\tfiles, err := os.ReadDir(\"/sys/kernel/btf\")\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Failed to read directory: %s\", err)\n\t\t}\n\n\t\tflags.KMods = nil\n\t\tfor _, file := range files {\n\t\t\tif !file.IsDir() && file.Name() != \"vmlinux\" {\n\t\t\t\tflags.KMods = append(flags.KMods, file.Name())\n\t\t\t}\n\t\t}\n\t}\n\n\tvar useKprobeMulti bool\n\tif flags.Backend != \"\" && (flags.Backend != pwru.BackendKprobe && flags.Backend != pwru.BackendKprobeMulti) {\n\t\tlog.Fatalf(\"Invalid tracing backend %s\", flags.Backend)\n\t}\n\t// Until https://lore.kernel.org/bpf/20221025134148.3300700-1-jolsa@kernel.org/\n\t// has been backported to the stable, kprobe-multi cannot be used when attaching\n\t// to kmods.\n\tif flags.Backend == \"\" {\n\t\tuseKprobeMulti = pwru.HaveBPFLinkKprobeMulti() && pwru.HaveAvailableFilterFunctions()\n\t} else if flags.Backend == pwru.BackendKprobeMulti {\n\t\tuseKprobeMulti = true\n\t}\n\n\tfuncs, err := pwru.GetFuncs(flags.FilterFunc, btfSpec, flags.KMods, useKprobeMulti)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to get skb-accepting functions: %s\", err)\n\t}\n\tif len(funcs) == 0 && !flags.FilterTraceTc && !flags.FilterTraceXdp {\n\t\tlog.Fatalf(\"Cannot find a matching kernel function\")\n\t}\n\t// If --filter-trace-tc/--filter-trace-xdp, it's to retrieve and print bpf\n\t// prog's name.\n\taddr2name, name2addr, err := pwru.ParseKallsyms(funcs, flags.OutputStack ||\n\t\tlen(flags.KMods) != 0 || flags.FilterTraceTc || flags.FilterTraceXdp ||\n\t\tlen(flags.FilterNonSkbFuncs) > 0 || flags.OutputCaller || flags.FilterTrackBpfHelpers)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to get function addrs: %s\", err)\n\t}\n\n\tvar opts ebpf.CollectionOptions\n\topts.Programs.KernelTypes = btfSpec\n\topts.Programs.LogLevel = ebpf.LogLevelInstruction\n\n\tbpfSpec, err := LoadKProbePWRU()\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to load bpf spec: %v\", err)\n\t}\n\n\tif useKprobeMulti {\n\t\tfor i := 1; i <= 5; i++ {\n\t\t\tdelete(bpfSpec.Programs, fmt.Sprintf(\"kprobe_skb_%d\", i))\n\t\t}\n\t} else {\n\t\tfor i := 1; i <= 5; i++ {\n\t\t\tdelete(bpfSpec.Programs, fmt.Sprintf(\"kprobe_multi_skb_%d\", i))\n\t\t}\n\t}\n\n\tfor name, program := range bpfSpec.Programs {\n\t\t// Skip the skb-tracking ones that should not inject pcap-filter.\n\t\tswitch name {\n\t\tcase \"kprobe_skb_lifetime_termination\",\n\t\t\t\"fexit_skb_clone\",\n\t\t\t\"fexit_skb_copy\",\n\t\t\t\"kprobe_veth_convert_skb_to_xdp_buff\",\n\t\t\t\"kretprobe_veth_convert_skb_to_xdp_buff\",\n\t\t\t\"fexit_xdp\":\n\t\t\tcontinue\n\t\t}\n\t\tif name == \"fentry_xdp\" {\n\t\t\tif err := libpcap.InjectL2Filter(program, flags.FilterPcap); err != nil {\n\t\t\t\tlog.Fatalf(\"Failed to inject filter ebpf for %s: %v\", name, err)\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\tif err = libpcap.InjectFilters(program, flags.FilterPcap); err != nil {\n\t\t\tlog.Fatalf(\"Failed to inject filter ebpf for %s: %v\", name, err)\n\t\t}\n\t}\n\n\tskbBtfID, err := pwru.GetStructBtfID(btfSpec, \"sk_buff\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to get BTF ID for sk_buff: %v\", err)\n\t}\n\tshinfoBtfID, err := pwru.GetStructBtfID(btfSpec, \"skb_shared_info\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to get BTF ID for skb_shared_info: %v\", err)\n\t}\n\n\tpwruConfig, err := pwru.GetConfig(&flags)\n\tpwruConfig.SkbBtfID = uint32(skbBtfID)\n\tpwruConfig.ShinfoBtfID = uint32(shinfoBtfID)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to get pwru config: %v\", err)\n\t}\n\tif err := bpfSpec.Variables[\"CFG\"].Set(pwruConfig); err != nil {\n\t\tlog.Fatalf(\"Failed to rewrite config: %v\", err)\n\t}\n\n\thaveFexit := pwru.HaveBPFLinkTracing()\n\tif (flags.FilterTraceTc || flags.FilterTraceXdp) && !haveFexit {\n\t\tlog.Fatalf(\"Current kernel does not support fentry/fexit to run with --filter-trace-tc/--filter-trace-xdp\")\n\t}\n\n\t// As we know, for every fentry tracing program, there is a corresponding\n\t// bpf prog spec with attaching target and attaching function. So, we can\n\t// just copy the spec and keep the fentry_tc/fentry_xdp program spec only in\n\t// the copied spec.\n\tvar bpfSpecFentryTc *ebpf.CollectionSpec\n\tif flags.FilterTraceTc {\n\t\tbpfSpecFentryTc = bpfSpec.Copy()\n\t\tbpfSpecFentryTc.Programs = map[string]*ebpf.ProgramSpec{\n\t\t\t\"fentry_tc\": bpfSpecFentryTc.Programs[\"fentry_tc\"],\n\t\t}\n\t}\n\tvar bpfSpecFentryXdp *ebpf.CollectionSpec\n\tif flags.FilterTraceXdp {\n\t\tbpfSpecFentryXdp = bpfSpec.Copy()\n\t\tbpfSpecFentryXdp.Programs = map[string]*ebpf.ProgramSpec{\n\t\t\t\"fentry_xdp\": bpfSpecFentryXdp.Programs[\"fentry_xdp\"],\n\t\t\t\"fexit_xdp\":  bpfSpecFentryXdp.Programs[\"fexit_xdp\"],\n\t\t}\n\t}\n\n\t// fentry_tc&fentry_xdp are not used in the kprobe/kprobe-multi cases. So,\n\t// they should be deleted from the spec.\n\tdelete(bpfSpec.Programs, \"fentry_tc\")\n\tdelete(bpfSpec.Programs, \"fentry_xdp\")\n\tdelete(bpfSpec.Programs, \"fexit_xdp\")\n\n\t// If not tracking skb, deleting the skb-tracking programs to reduce loading\n\t// time.\n\tif !flags.FilterTrackSkb && !flags.FilterTrackSkbByStackid {\n\t\tdelete(bpfSpec.Programs, \"kprobe_skb_lifetime_termination\")\n\t}\n\n\tif (!flags.FilterTrackSkb && !flags.FilterTrackSkbByStackid) || !haveFexit {\n\t\tdelete(bpfSpec.Programs, \"fexit_skb_clone\")\n\t\tdelete(bpfSpec.Programs, \"fexit_skb_copy\")\n\t}\n\n\tcoll, err := ebpf.NewCollectionWithOptions(bpfSpec, opts)\n\tif err != nil {\n\t\tvar (\n\t\t\tve          *ebpf.VerifierError\n\t\t\tverifierLog string\n\t\t)\n\t\tif errors.As(err, &ve) {\n\t\t\tverifierLog = fmt.Sprintf(\"Verifier error: %+v\\n\", ve)\n\t\t}\n\n\t\tlog.Fatalf(\"Failed to load objects: %s\\n%+v\", verifierLog, err)\n\t}\n\tdefer coll.Close()\n\n\ttraceTc := false\n\tif flags.FilterTraceTc {\n\t\tt := pwru.TraceTC(coll, bpfSpecFentryTc, &opts, flags.OutputSkb, flags.OutputShinfo, name2addr)\n\t\tdefer t.Detach()\n\t\ttraceTc = t.HaveTracing()\n\t}\n\n\ttraceXdp := false\n\tif flags.FilterTraceXdp {\n\t\tt := pwru.TraceXDP(coll, bpfSpecFentryXdp, &opts, flags.OutputSkb, flags.OutputShinfo, name2addr)\n\t\tdefer t.Detach()\n\t\ttraceXdp = t.HaveTracing()\n\t}\n\n\tif !traceTc && !traceXdp && len(funcs) == 0 {\n\t\tlog.Fatalf(\"No kprobe/tc-bpf/xdp to trace!\")\n\t}\n\n\tif flags.FilterTrackSkb || flags.FilterTrackSkbByStackid {\n\t\tt := pwru.TrackSkb(coll, haveFexit, flags.FilterTrackSkb)\n\t\tdefer t.Detach()\n\t}\n\n\tif flags.FilterTrackBpfHelpers {\n\t\tbpfHelpers, err := pwru.GetBpfHelpers(addr2name)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Failed to get bpf helpers: %s\\n\", err)\n\t\t}\n\t\tflags.FilterNonSkbFuncs = append(flags.FilterNonSkbFuncs, bpfHelpers...)\n\t}\n\n\tif nonSkbFuncs := flags.FilterNonSkbFuncs; len(nonSkbFuncs) != 0 {\n\t\tk := pwru.NewNonSkbFuncsKprober(nonSkbFuncs, funcs, coll)\n\t\tdefer k.DetachKprobes()\n\t}\n\n\tif len(funcs) != 0 {\n\t\tk := pwru.NewKprober(ctx, funcs, coll, addr2name, useKprobeMulti, flags.FilterKprobeBatch)\n\t\tdefer k.DetachKprobes()\n\t}\n\n\tlog.Println(\"Listening for events..\")\n\n\tif flags.ReadyFile != \"\" {\n\t\tfile, err := os.Create(flags.ReadyFile)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Failed to create ready file: %s\", err)\n\t\t}\n\t\tfile.Close()\n\t}\n\n\tprintSkbMap := coll.Maps[\"print_skb_map\"]\n\tprintShinfoMap := coll.Maps[\"print_shinfo_map\"]\n\tprintStackMap := coll.Maps[\"print_stack_map\"]\n\toutput, err := pwru.NewOutput(&flags, printSkbMap, printShinfoMap, printStackMap, addr2name, useKprobeMulti, btfSpec)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create outputer: %s\", err)\n\t}\n\tdefer output.Close()\n\n\tif !flags.OutputJson {\n\t\toutput.PrintHeader()\n\t}\n\n\tdefer func() {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tlog.Println(\"Received signal, exiting program..\")\n\t\tdefault:\n\t\t\tlog.Printf(\"Printed %d events, exiting program..\\n\", flags.OutputLimitLines)\n\t\t}\n\t}()\n\n\tvar event pwru.Event\n\tevents := coll.Maps[\"events\"]\n\trunForever := flags.OutputLimitLines == 0\n\tfor i := flags.OutputLimitLines; i > 0 || runForever; i-- {\n\t\tfor {\n\t\t\tif err := events.LookupAndDelete(nil, &event); err == nil {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tselect {\n\t\t\tcase <-ctx.Done():\n\t\t\t\treturn\n\t\t\tcase <-time.After(time.Microsecond):\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\tif flags.OutputJson {\n\t\t\toutput.PrintJson(&event)\n\t\t} else {\n\t\t\toutput.Print(&event)\n\t\t}\n\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn\n\t\tdefault:\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}