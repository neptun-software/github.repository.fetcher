{
  "metadata": {
    "timestamp": 1736709828556,
    "page": 291,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "raspberrypi/pico-examples",
      "stars": 3039,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.056640625,
          "content": ".idea\n.vscode\n_deps\ncmake-*\nbuild\nbuild-*\n.DS_Store\n*.pdf\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 2.6005859375,
          "content": "cmake_minimum_required(VERSION 3.12)\n\n# Pull in SDK (must be before project)\ninclude(pico_sdk_import.cmake)\ninclude(pico_extras_import_optional.cmake)\n\nproject(pico_examples C CXX ASM)\n\nset(CMAKE_C_STANDARD 11)\nset(CMAKE_CXX_STANDARD 17)\n\nif (PICO_SDK_VERSION_STRING VERSION_LESS \"2.1.0\")\n    message(FATAL_ERROR \"Raspberry Pi Pico SDK version 2.1.0 (or later) required. Your version is ${PICO_SDK_VERSION_STRING}\")\nendif()\n\nset(PICO_EXAMPLES_PATH ${PROJECT_SOURCE_DIR})\n\n# If you want debug output from USB (pass -DPICO_STDIO_USB=1) this ensures you don't lose any debug output while USB is set up\nif (NOT DEFINED PICO_STDIO_USB_CONNECT_WAIT_TIMEOUT_MS)\n    set(PICO_STDIO_USB_CONNECT_WAIT_TIMEOUT_MS 3000)\nendif()\n\n# Initialize the SDK\npico_sdk_init()\n\ninclude(example_auto_set_url.cmake)\n\nfunction(add_subdirectory_exclude_platforms NAME)\n    if (ARGN)\n        if (PICO_PLATFORM IN_LIST ARGN)\n            message(\"Skipping ${NAME} example which is unsupported on this platform\")\n            return()\n        endif()\n        foreach(PATTERN IN LISTS ARGN)\n            string(REGEX MATCH \"${PATTERN}\" MATCHED \"${PICO_PLATFORM}\")\n            if (MATCHED)\n                message(\"Skipping ${NAME} example which is unsupported on this platform\")\n                return()\n            endif()\n        endforeach()\n    endif()\n    add_subdirectory(${NAME})\nendfunction()\n\n# Add blink example\nadd_subdirectory_exclude_platforms(blink)\nadd_subdirectory_exclude_platforms(blink_simple)\n\n# Add hello world example\nadd_subdirectory_exclude_platforms(hello_world)\n\nadd_compile_options(-Wall\n        -Wno-format          # int != int32_t as far as the compiler is concerned because gcc has int32_t as long int\n        -Wno-unused-function # we have some for the docs that aren't called\n        )\nif (CMAKE_C_COMPILER_ID STREQUAL \"GNU\")\n    add_compile_options(-Wno-maybe-uninitialized)\nendif()\n\n# Hardware-specific examples in subdirectories:\nadd_subdirectory(adc)\nadd_subdirectory(binary_info)\nadd_subdirectory(bootloaders)\nadd_subdirectory(clocks)\nadd_subdirectory(cmake)\nadd_subdirectory(dcp)\nadd_subdirectory(divider)\nadd_subdirectory(dma)\nadd_subdirectory(flash)\nadd_subdirectory(gpio)\nadd_subdirectory(hstx)\nadd_subdirectory(i2c)\nadd_subdirectory(interp)\nadd_subdirectory(multicore)\nadd_subdirectory(otp)\nadd_subdirectory(picoboard)\nadd_subdirectory(pico_w)\nadd_subdirectory(pio)\nadd_subdirectory(pwm)\nadd_subdirectory(reset)\nadd_subdirectory(rtc)\nadd_subdirectory(spi)\nadd_subdirectory(system)\nadd_subdirectory(timer)\nadd_subdirectory(uart)\nadd_subdirectory(universal)\nadd_subdirectory(usb)\nadd_subdirectory(watchdog)\nadd_subdirectory(sha)\nadd_subdirectory(freertos)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.0361328125,
          "content": "# Contributing to Raspberry Pi Pico C/C++ Examples\n\n## How to Report a Bug\n\nWe use GitHub to host code, track [issues](https://github.com/raspberrypi/pico-examples/issues) and feature requests, and to accept [pull requests](https://github.com/raspberrypi/pico-examples/pulls). If you find think you have found a bug, please report it by [opening a new issue](https://github.com/raspberrypi/pico-examples/issues/new). Please include as much detail as possible, and ideally some code to reproduce the problem.\n\n## How to Contribute Code\n\nIn order to contribute new or updated code, you must first create a GitHub account and fork the original repository to your own account. You can make changes, save them in your repository, then [make a pull request](https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork) against this repository. The pull request will appear [in the repository](https://github.com/raspberrypi/pico-examples/pulls) where it can be assessed by the maintainers, and if appropriate, merged with the official repository.\n\n**NOTE:** Development takes place on the `develop` branch in this repository. Please open your https://github.com/raspberrypi/pico-examples/pulls[pull request] (PR) against the [`develop`](https://github.com/raspberrypi/pico-examples/tree/develop) branch, pull requests against the `master` branch will automatically CI fail checks and will not be accepted. You will be asked to rebase your PR against `develop` and if you do not do so, your PR will be closed.\n\n### Code Style\n\nIf you are contributing new or updated code please match the existing code style, particularly:\n\n* Use 4 spaces for indentation rather than tabs.\n* Braces are required for everything except single line `if` statements.\n* Opening braces should not be placed on a new line.\n\n### Licensing\n\nCode in this repository is lisensed under the [BSD-3 License](LICENSE.TXT). By contributing content to this repository you are agreeing to place your contributions under this licence.\n"
        },
        {
          "name": "LICENSE.TXT",
          "type": "blob",
          "size": 1.4541015625,
          "content": "Copyright 2020 (c) 2020 Raspberry Pi (Trading) Ltd.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the\nfollowing conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following\n   disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following\n   disclaimer in the documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products\n   derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\nINCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\nWHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 31.44921875,
          "content": "# Raspberry Pi RP2350 Pico SDK Examples - Early Access\n\n## RP2350 Instructions\n\nEverything below this section is from the stock pico-examples, so ignore URLs etc., but generally instructions are the same.\n\nThe Pico SDK default continues to be to build for RP2040 (PICO_PLATFORM=rp2040), so to build for RP2350, you need to pass\n`-DPICO_PLATFORM=rp2350` to CMake (or `-DPICO_PLATFORM=rp2350-riscv` for RISC-V).\n\nMost, but not all examples, currently work on RP2350 however you should be able to do a full build with any of the above platforms (PICO_PLATFORM=host however currently fails on some examples)\n\nFor RISC-V compilation, you should take a compiler from here: https://www.embecosm.com/resources/tool-chain-downloads/#riscv-stable\n\n# Original pico-examples docs\n\n## Getting started\n\nSee [Getting Started with the Raspberry Pi Pico](https://rptl.io/pico-get-started) and the README in the [pico-sdk](https://github.com/raspberrypi/pico-sdk) for information\non getting up and running.\n\n### First Examples\n\nApp| Description                                                                | Link to prebuilt UF2\n---|----------------------------------------------------------------------------|---\n[hello_serial](hello_world/serial) | The obligatory Hello World program for Pico (Output over serial version)   |\n[hello_usb](hello_world/usb) | The obligatory Hello World program for Pico (Output over USB version)      | https://rptl.io/pico-hello-usb\n[blink](blink) | Blink a LED on and off. Works on both boards with regular LEDs and boards like Pico W where the led is connected via the Wi-Fi chip | https://rptl.io/pico-blink\n[blink_simple](blink_simple) | Blink a LED on and off. Does not work on boards like Pico W where the led is connected via the Wi-Fi chip. | https://rptl.io/pico-blink\n[picow_blink](pico_w/wifi/blink) | Blinks the on-board LED on boards like Pico W where the led is connected via the Wi-Fi chip. | http://rptl.io/pico-w-blink\n\n### ADC\n\nApp|Description\n---|---\n[hello_adc](adc/hello_adc) | Display the voltage from an ADC input.\n[joystick_display](adc/joystick_display) | Display a Joystick X/Y input based on two ADC inputs.\n[adc_console](adc/adc_console) | An interactive shell for playing with the ADC. Includes example of free-running capture mode.\n[onboard_temperature](adc/onboard_temperature) | Display the value of the onboard temperature sensor.\n[microphone_adc](adc/microphone_adc) | Read analog values from a microphone and plot the measured sound amplitude.\n[dma_capture](adc/dma_capture) | Use the DMA to capture many samples from the ADC.\n[read_vsys](adc/read_vsys) | Demonstrates how to read VSYS to get the voltage of the power supply.\n\n### Binary Info\n\nApp|Description\n---|---\n[blink_any](binary_info/blink_any) | Uses `bi_ptr` variables to create a configurable blink binary - see the separate [README](binary_info/README.md) for more details\n[hello_anything](binary_info/hello_anything) | Uses `bi_ptr` variables to create a configurable hello_world binary - see the separate [README](binary_info/README.md) for more details\n\n### Bootloaders (RP2350 Only)\nApp|Description\n---|---\n[enc_bootloader](bootloaders/encrypted) | A bootloader which decrypts binaries from flash into SRAM. See the separate [README](bootloaders/encrypted/README.md) for more information\n\n### Clocks\n\nApp|Description\n---|---\n[hello_48MHz](clocks/hello_48MHz) | Change the system clock frequency to 48 MHz while running.\n[hello_gpout](clocks/hello_gpout) | Use the general purpose clock outputs (GPOUT) to drive divisions of internal clocks onto GPIO outputs.\n[hello_resus](clocks/hello_resus) | Enable the clock resuscitate feature, \"accidentally\" stop the system clock, and show how we recover.\n[detached_clk_peri](clocks/detached_clk_peri) | Detach peripheral clock and vary system clock.\n\n### CMake\n\nApp|Description\n---|---\n[build_variants](cmake/build_variants) | Builds two version of the same app with different configurations\n\n### DCP\n\nApp|Description\n---|---\n[hello_dcp](dcp/hello_dcp) | Use the double-precision coprocessor directly in assembler.\n\n### DMA\n\nApp|Description\n---|---\n[hello_dma](dma/hello_dma) | Use the DMA to copy data in memory.\n[control_blocks](dma/control_blocks) | Build a control block list, to program a longer sequence of DMA transfers to the UART.\n[channel_irq](dma/channel_irq) | Use an IRQ handler to reconfigure a DMA channel, in order to continuously drive data through a PIO state machine.\n[sniff_crc](dma/sniff_crc) | Use the DMA engine's 'sniff' capability to calculate a CRC32 on a data buffer.\n\n### HSTX\n\nApp|Description\n---|---\n[dvi_out_hstx_encoder](dvi_out_hstx_encoder) `RP2350`| Use the HSTX to output a DVI signal with 3:3:2 RGB\n\n### Flash\n\nApp|Description\n---|---\n[cache_perfctr](flash/cache_perfctr) | Read and clear the cache performance counters. Show how they are affected by different types of flash reads.\n[nuke](flash/nuke) | Obliterate the contents of flash. An example of a NO_FLASH binary (UF2 loaded directly into SRAM and runs in-place there). A useful utility to drag and drop onto your Pico if the need arises.\n[program](flash/program) | Erase a flash sector, program one flash page, and read back the data.\n[xip_stream](flash/xip_stream) | Stream data using the XIP stream hardware, which allows data to be DMA'd in the background whilst executing code from flash.\n[ssi_dma](flash/ssi_dma) | DMA directly from the flash interface (continuous SCK clocking) for maximum bulk read performance.\n[runtime_flash_permissions](flash/runtime_flash_permissions) | Demonstrates adding partitions at runtime to change the flash permissions\n\n### FreeRTOS\n\nThese examples require you to set the `FREERTOS_KERNEL_PATH` to point to the FreeRTOS Kernel. See https://github.com/FreeRTOS/FreeRTOS-Kernel\n\nApp|Description\n---|---\n[hello_freertos](freertos/hello_freertos) | Examples that demonstrate how run FreeRTOS and tasks on 1 or 2 cores.\n\n### GPIO\n\nApp|Description\n---|---\n[hello_7segment](gpio/hello_7segment) | Use the GPIOs to drive a seven segment LED display.\n[hello_gpio_irq](gpio/hello_gpio_irq) | Register an interrupt handler to run when a GPIO is toggled.\n[dht_sensor](gpio/dht_sensor) | Use GPIO to bitbang the serial protocol for a DHT temperature/humidity sensor.\n\nSee also: [blink](blink), blinking an LED attached to a GPIO.\n\n### HW divider\n\nApp|Description\n---|---\n[hello_divider](divider) | Show how to directly access the hardware integer dividers, in case AEABI injection is disabled.\n\n### I2C\n\nApp|Description\n---|---\n[bus_scan](i2c/bus_scan) | Scan the I2C bus for devices and display results.\n[bmp280_i2c](i2c/bmp280_i2c) | Read and convert temperature and pressure data from a BMP280 sensor, attached to an I2C bus.\n[lcd_1602_i2c](i2c/lcd_1602_i2c) | Display some text on a generic 16x2 character LCD display, via I2C.\n[lis3dh_i2c](i2c/lis3dh_i2c) | Read acceleration and temperature value from a LIS3DH sensor via I2C\n[mcp9808_i2c](i2c/mcp9808_i2c) | Read temperature, set limits and raise alerts when limits are surpassed.\n[mma8451_i2c](i2c/mma8451_i2c) | Read acceleration from a MMA8451 accelerometer and set range and precision for the data.\n[mpl3115a2_i2c](i2c/mpl3115a2_i2c) | Interface with an MPL3115A2 altimeter, exploring interrupts and advanced board features, via I2C.\n[mpu6050_i2c](i2c/mpu6050_i2c) | Read acceleration and angular rate values from a MPU6050 accelerometer/gyro, attached to an I2C bus.\n[ssd1306_i2c](i2c/ssd1306_i2c) | Convert and display a bitmap on a 128x32 or 128x64 SSD1306-driven OLED display\n[pa1010d_i2c](i2c/pa1010d_i2c) | Read GPS location data, parse and display data via I2C.\n[pcf8523_i2c](i2c/pcf8523_i2c) | Read time and date values from a real time clock. Set current time and alarms on it.\n[ht16k33_i2c](i2c/ht16k33_i2c) | Drive a 4 digit 14 segment LED with an HT16K33.\n[slave_mem_i2c](i2c/slave_mem_i2c) | i2c slave example where the slave implements a 256 byte memory\n[slave_mem_i2c_burst](i2c/slave_mem_i2c) | i2c slave example where the slave implements a 256 byte memory. This version inefficiently writes each byte in a separate call to demonstrate read and write burst mode.\n\n### Interpolator\n\nApp|Description\n---|---\n[hello_interp](interp/hello_interp) | A bundle of small examples, showing how to access the core-local interpolator hardware, and use most of its features.\n\n### Multicore\n\nApp|Description\n---|---\n[hello_multicore](multicore/hello_multicore) | Launch a function on the second core, printf some messages on each core, and pass data back and forth through the mailbox FIFOs.\n[multicore_fifo_irqs](multicore/multicore_fifo_irqs) | On each core, register and interrupt handler for the mailbox FIFOs. Show how the interrupt fires when that core receives a message.\n[multicore_runner](multicore/multicore_runner) | Set up the second core to accept, and run, any function pointer pushed into its mailbox FIFO. Push in a few pieces of code and get answers back.\n[multicore_doorbell](multicore/multicore_doorbell) | Claims two doorbells for signaling between the cores. Counts how many doorbell IRQs occur on the second core and uses doorbells to coordinate exit.\n\n### OTP\n\nApp|Description\n---|---\n[hello_otp](otp/hello_otp) | Demonstrate reading and writing from the OTP on RP2350, along with some of the features of OTP (error correction and page locking).\n\n### Pico Board\n\nApp|Description\n---|---\n[blinky](picoboard/blinky) | Blink \"hello, world\" in Morse code on Pico's LED\n[button](picoboard/button) | Use Pico's BOOTSEL button as a regular button input, by temporarily suspending flash access.\n\n### Pico Networking\n\nThese networking examples are only available if Wi-Fi is supported by the board.\n\nApp|Description\n---|---\n[picow_access_point](pico_w/wifi/access_point) | Starts a WiFi access point, and fields DHCP requests.\n[picow_blink](pico_w/wifi/blink) | Blinks the on-board LED (which is connected via the WiFi chip).\n[picow_blink_slow_clock](pico_w/wifi/blink) | Blinks the on-board LED (which is connected via the WiFi chip) with a slower system clock to show how to reconfigure communication with the WiFi chip at run time under those circumstances\n[picow_blink_fast_clock](pico_w/wifi/blink) | Blinks the on-board LED (which is connected via the WiFi chip) with a faster system clock to show how to reconfigure communication with the WiFi chip at build time under those circumstances\n[picow_iperf_server](pico_w/wifi/iperf) | Runs an \"iperf\" server for WiFi speed testing.\n[picow_ntp_client](pico_w/wifi/ntp_client) | Connects to an NTP server to fetch and display the current time.\n[picow_tcp_client](pico_w/wifi/tcp_client) | A simple TCP client. You can run [python_test_tcp_server.py](pico_w/wifi/python_test_tcp/python_test_tcp_server.py) for it to connect to.\n[picow_tcp_server](pico_w/wifi/tcp_server) | A simple TCP server. You can use [python_test_tcp_client.py](pico_w//wifi/python_test_tcp/python_test_tcp_client.py) to connect to it.\n[picow_tls_client](pico_w/wifi/tls_client) | Demonstrates how to make a HTTPS request using TLS.\n[picow_tls_verify](pico_w/wifi/tls_client) | Demonstrates how to make a HTTPS request using TLS with certificate verification.\n[picow_wifi_scan](pico_w/wifi/wifi_scan) | Scans for WiFi networks and prints the results.\n[picow_udp_beacon](pico_w/wifi/udp_beacon) | A simple UDP transmitter.\n[picow_httpd](pico_w/wifi/httpd) | Runs a LWIP HTTP server test app\n[picow_http_client](pico_w/wifi/http_client) | Demonstrates how to make http and https requests\n[picow_http_client_verify](pico_w/wifi/http_client) | Demonstrates how to make a https request with server authentication\n\n#### FreeRTOS examples\n\nThese are examples of integrating Wi-Fi networking under FreeRTOS, and require you to set the `FREERTOS_KERNEL_PATH`\nto point to the FreeRTOS Kernel. See https://github.com/FreeRTOS/FreeRTOS-Kernel\n\nApp|Description\n---|---\n[picow_freertos_iperf_server_nosys](pico_w/wifi/freertos/iperf) | Runs an \"iperf\" server for WiFi speed testing under FreeRTOS in NO_SYS=1 mode. The LED is blinked in another task\n[picow_freertos_iperf_server_sys](pico_w/wifi/freertos/iperf) | Runs an \"iperf\" server for WiFi speed testing under FreeRTOS in NO_SYS=0 (i.e. full FreeRTOS integration) mode. The LED is blinked in another task\n[picow_freertos_ping_nosys](pico_w/wifi/freertos/ping) | Runs the lwip-contrib/apps/ping test app under FreeRTOS in NO_SYS=1 mode.\n[picow_freertos_ping_sys](pico_w/wifi/freertos/ping) | Runs the lwip-contrib/apps/ping test app under FreeRTOS in NO_SYS=0 (i.e. full FreeRTOS integration) mode. The test app uses the lwIP _socket_ API in this case.\n[picow_freertos_ntp_client_socket](pico_w/wifi/freertos/ntp_client_socket) | Connects to an NTP server using the LwIP Socket API with FreeRTOS in NO_SYS=0 (i.e. full FreeRTOS integration) mode.\n[pico_freertos_httpd_nosys](pico_w/wifi/freertos/httpd) | Runs a LWIP HTTP server test app under FreeRTOS in NO_SYS=1 mode.\n[pico_freertos_httpd_sys](pico_w/wifi/freertos/httpd) | Runs a LWIP HTTP server test app under FreeRTOS in NO_SYS=0 (i.e. full FreeRTOS integration) mode.\n[picow_freertos_http_client_sys](pico_w/wifi/freertos/http_client) | Demonstrates how to make a https request in NO_SYS=0 (i.e. full FreeRTOS integration)\n\n### Pico Bluetooth\n\nThese Bluetooth examples are only available for boards that support Bluetooth.\nThey are examples from the Blue Kitchen Bluetooth stack, see [here](https://bluekitchen-gmbh.com/btstack/#examples/examples/index.html) for a full description.\n\nBy default, the Bluetooth examples are only built in one \"mode\" only (*background*, *poll*, or *freertos*), with the \ndefault being *background*. This can be changed by passing `-DBTSTACK_EXAMPLE_TYPE=poll` etc. to `CMake`, or all \nexamples can be built (which may be slow) by passing `-DBTSTACK_EXAMPLE_TYPE=all`\nFreertos versions can only be built if `FREERTOS_KERNEL_PATH` is defined.\n\nThe Bluetooth examples that use audio require code in [pico-extras](https://github.com/raspberrypi/pico-extras). Pass `-DPICO_EXTRAS_PATH=${HOME}/pico-extras` on the cmake command line or define `PICO_EXTRAS_PATH=${HOME}/pico-extras` in your environment and re-run cmake to include them in the build.\n\nApp|Description\n---|---\n[picow_bt_example_a2dp_sink_demo](https://github.com/bluekitchen/btstack/tree/master/example/a2dp_sink_demo.c) | A2DP Sink - Receive Audio Stream and Control Playback.\n[picow_bt_example_a2dp_source_demo](https://github.com/bluekitchen/btstack/tree/master/example/a2dp_source_demo.c) | A2DP Source - Stream Audio and Control Volume.\n[picow_bt_example_ancs_client_demo](https://github.com/bluekitchen/btstack/tree/master/example/ancs_client_demo.c) | LE ANCS Client - Apple Notification Service.\n[picow_bt_example_att_delayed_response](https://github.com/bluekitchen/btstack/tree/master/example/att_delayed_response.c) | LE Peripheral - Delayed Response.\n[picow_bt_example_audio_duplex](https://github.com/bluekitchen/btstack/tree/master/example/audio_duplex.c) | Audio Driver - Forward Audio from Source to Sink.\n[picow_bt_example_avrcp_browsing_client](https://github.com/bluekitchen/btstack/tree/master/example/avrcp_browsing_client.c) | AVRCP Browsing - Browse Media Players and Media Information.\n[picow_bt_example_dut_mode_classic](https://github.com/bluekitchen/btstack/tree/master/example/dut_mode_classic.c) | Testing - Enable Device Under Test (DUT.c) Mode for Classic.\n[picow_bt_example_gap_dedicated_bonding](https://github.com/bluekitchen/btstack/tree/master/example/gap_dedicated_bonding.c) | GAP bonding\n[picow_bt_example_gap_inquiry](https://github.com/bluekitchen/btstack/tree/master/example/gap_inquiry.c) | GAP Classic Inquiry.\n[picow_bt_example_gap_le_advertisements](https://github.com/bluekitchen/btstack/tree/master/example/gap_le_advertisements.c) | GAP LE Advertisements Scanner.\n[picow_bt_example_gap_link_keys](https://github.com/bluekitchen/btstack/tree/master/example/gap_link_keys.c) | GAP Link Key Management (Classic.c).\n[picow_bt_example_gatt_battery_query](https://github.com/bluekitchen/btstack/tree/master/example/gatt_battery_query.c) | GATT Battery Service Client.\n[picow_bt_example_gatt_browser](https://github.com/bluekitchen/btstack/tree/master/example/gatt_browser.c) | GATT Client - Discover Primary Services.\n[picow_bt_example_gatt_counter](https://github.com/bluekitchen/btstack/tree/master/example/gatt_counter.c) | GATT Server - Heartbeat Counter over GATT.\n[picow_bt_example_gatt_device_information_query](https://github.com/bluekitchen/btstack/tree/master/example/gatt_device_information_query.c) | GATT Device Information Service Client.\n[picow_bt_example_gatt_heart_rate_client](https://github.com/bluekitchen/btstack/tree/master/example/gatt_heart_rate_client.c) | GATT Heart Rate Sensor Client.\n[picow_bt_example_gatt_streamer_server](https://github.com/bluekitchen/btstack/tree/master/example/gatt_streamer_server.c) | Performance - Stream Data over GATT (Server.c).\n[picow_bt_example_hfp_ag_demo](https://github.com/bluekitchen/btstack/tree/master/example/hfp_ag_demo.c) | HFP AG - Audio Gateway.\n[picow_bt_example_hfp_hf_demo](https://github.com/bluekitchen/btstack/tree/master/example/hfp_hf_demo.c) | HFP HF - Hands-Free.\n[picow_bt_example_hid_host_demo](https://github.com/bluekitchen/btstack/tree/master/example/hid_host_demo.c) | HID Host Classic.\n[picow_bt_example_hid_keyboard_demo](https://github.com/bluekitchen/btstack/tree/master/example/hid_keyboard_demo.c) | HID Keyboard Classic.\n[picow_bt_example_hid_mouse_demo](https://github.com/bluekitchen/btstack/tree/master/example/hid_mouse_demo.c) | HID Mouse Classic.\n[picow_bt_example_hog_boot_host_demo](https://github.com/bluekitchen/btstack/tree/master/example/hog_boot_host_demo.c) | HID Boot Host LE.\n[picow_bt_example_hog_host_demo](https://github.com/bluekitchen/btstack/tree/master/example/hog_host_demo.c) | HID Host LE.\n[picow_bt_example_hog_keyboard_demo](https://github.com/bluekitchen/btstack/tree/master/example/hog_keyboard_demo.c) | HID Keyboard LE.\n[picow_bt_example_hog_mouse_demo](https://github.com/bluekitchen/btstack/tree/master/example/hog_mouse_demo.c) | HID Mouse LE.\n[picow_bt_example_hsp_ag_demo](https://github.com/bluekitchen/btstack/tree/master/example/hsp_ag_demo.c) | HSP AG - Audio Gateway.\n[picow_bt_example_hsp_hs_demo](https://github.com/bluekitchen/btstack/tree/master/example/hsp_hs_demo.c) | HSP HS - Headset.\n[picow_bt_example_le_credit_based_flow_control_mode_client](https://github.com/bluekitchen/btstack/tree/master/example/le_credit_based_flow_control_mode_client.c) | LE Credit-Based Flow-Control Mode Client - Send Data over L2CAP.\n[picow_bt_example_le_credit_based_flow_control_mode_server](https://github.com/bluekitchen/btstack/tree/master/example/le_credit_based_flow_control_mode_server.c) | LE Credit-Based Flow-Control Mode Server - Receive data over L2CAP.\n[picow_bt_example_led_counter](https://github.com/bluekitchen/btstack/tree/master/example/led_counter.c) | Hello World - Blinking a LED without Bluetooth.\n[picow_bt_example_le_mitm](https://github.com/bluekitchen/btstack/tree/master/example/le_mitm.c) | LE Man-in-the-Middle Tool.\n[picow_bt_example_le_streamer_client](https://github.com/bluekitchen/btstack/tree/master/example/le_streamer_client.c) | Performance - Stream Data over GATT (Client.c).\n[picow_bt_example_mod_player](https://github.com/bluekitchen/btstack/tree/master/example/mod_player.c) | Audio Driver - Play 80's MOD Song.\n[picow_bt_example_nordic_spp_le_counter](https://github.com/bluekitchen/btstack/tree/master/example/nordic_spp_le_counter.c) | LE Nordic SPP-like Heartbeat Server.\n[picow_bt_example_nordic_spp_le_streamer](https://github.com/bluekitchen/btstack/tree/master/example/nordic_spp_le_streamer.c) | LE Nordic SPP-like Streamer Server.\n[picow_bt_example_sdp_general_query](https://github.com/bluekitchen/btstack/tree/master/example/sdp_general_query.c) | SDP Client - Query Remote SDP Records.\n[picow_bt_example_sdp_rfcomm_query](https://github.com/bluekitchen/btstack/tree/master/example/sdp_rfcomm_query.c) | SDP Client - Query RFCOMM SDP record.\n[picow_bt_example_sine_player](https://github.com/bluekitchen/btstack/tree/master/example/sine_player.c) | Audio Driver - Play Sine.\n[picow_bt_example_sm_pairing_central](https://github.com/bluekitchen/btstack/tree/master/example/sm_pairing_central.c) | LE Central - Test Pairing Methods.\n[picow_bt_example_sm_pairing_peripheral](https://github.com/bluekitchen/btstack/tree/master/example/sm_pairing_peripheral.c) | LE Peripheral - Test Pairing Methods.\n[picow_bt_example_spp_and_gatt_counter](https://github.com/bluekitchen/btstack/tree/master/example/spp_and_gatt_counter.c) | Dual Mode - SPP and LE Counter.\n[picow_bt_example_spp_and_gatt_streamer](https://github.com/bluekitchen/btstack/tree/master/example/spp_and_gatt_streamer.c) | Dual Mode - SPP and LE streamer.\n[picow_bt_example_spp_counter](https://github.com/bluekitchen/btstack/tree/master/example/spp_counter.c) | SPP Server - Heartbeat Counter over RFCOMM.\n[picow_bt_example_spp_flowcontrol](https://github.com/bluekitchen/btstack/tree/master/example/spp_flowcontrol.c) | SPP Server - RFCOMM Flow Control.\n[picow_bt_example_spp_streamer_client](https://github.com/bluekitchen/btstack/tree/master/example/spp_streamer_client.c) | Performance - Stream Data over SPP (Client.c).\n[picow_bt_example_spp_streamer](https://github.com/bluekitchen/btstack/tree/master/example/spp_streamer.c) | Performance - Stream Data over SPP (Server.c).\n[picow_bt_example_ublox_spp_le_counter](https://github.com/bluekitchen/btstack/blob/master/example/ublox_spp_le_counter.c) | LE u-blox SPP-like Heartbeat Server.\n\nSome Standalone Bluetooth examples (without all the common example build infrastructure) are also available:\n\nApp|Description\n---|---\n[picow_ble_temp_sensor](pico_w/bt/standalone) | Reads from the on board temperature sensor and sends notifications via BLE\n[picow_ble_temp_sensor_with_wifi](pico_w/bt/standalone) | Same as above but also connects to Wi-Fi and starts an \"iperf\" server\n[picow_ble_temp_reader](pico_w/bt/standalone) | Connects to one of the above \"sensors\" and reads the temperature\n\n### PIO\n\nApp|Description\n---|---\n[hello_pio](pio/hello_pio) | Absolutely minimal example showing how to control an LED by pushing values into a PIO FIFO.\n[apa102](pio/apa102) | Rainbow pattern on on a string of APA102 addressable RGB LEDs.\n[clocked_input](pio/clocked_input) | Shift in serial data, sampling with an external clock.\n[differential_manchester](pio/differential_manchester) | Send and receive differential Manchester-encoded serial (BMC).\n[hub75](pio/hub75) | Display an image on a 128x64 HUB75 RGB LED matrix.\n[i2c](pio/i2c) | Scan an I2C bus.\n[ir_nec](pio/ir_nec) | Sending and receiving IR (infra-red) codes using the PIO.\n[logic_analyser](pio/logic_analyser) | Use PIO and DMA to capture a logic trace of some GPIOs, whilst a PWM unit is driving them.\n[manchester_encoding](pio/manchester_encoding) | Send and receive Manchester-encoded serial.\n[onewire](pio/onewire)| A library for interfacing to 1-Wire devices, with an example for the DS18B20 temperature sensor.\n[pio_blink](pio/pio_blink) | Set up some PIO state machines to blink LEDs at different frequencies, according to delay counts pushed into their FIFOs.\n[pwm](pio/pwm) | Pulse width modulation on PIO. Use it to gradually fade the brightness of an LED.\n[spi](pio/spi) | Use PIO to erase, program and read an external SPI flash chip. A second example runs a loopback test with all four CPHA/CPOL combinations.\n[squarewave](pio/squarewave) | Drive a fast square wave onto a GPIO. This example accesses low-level PIO registers directly, instead of using the SDK functions.\n[squarewave_div_sync](pio/squarewave) | Generates a square wave on three GPIOs and synchronises the divider on all the state machines\n[st7789_lcd](pio/st7789_lcd) | Set up PIO for 62.5 Mbps serial output, and use this to display a spinning image on a ST7789 serial LCD.\n[quadrature_encoder](pio/quadrature_encoder) | A quadrature encoder using PIO to maintain counts independent of the CPU. \n[quadrature_encoder_substep](pio/quadrature_encoder_substep) | High resolution speed measurement using a standard quadrature encoder\n[uart_rx](pio/uart_rx) | Implement the receive component of a UART serial port. Attach it to the spare Arm UART to see it receive characters.\n[uart_tx](pio/uart_tx) | Implement the transmit component of a UART serial port, and print hello world.\n[ws2812](pio/ws2812) | Examples of driving WS2812 addressable RGB LEDs.\n[addition](pio/addition) | Add two integers together using PIO. Only around 8 billion times slower than Cortex-M0+.\n\n### PWM\n\nApp|Description\n---|---\n[hello_pwm](pwm/hello_pwm) | Minimal example of driving PWM output on GPIOs.\n[led_fade](pwm/led_fade) | Fade an LED between low and high brightness. An interrupt handler updates the PWM slice's output level each time the counter wraps.\n[measure_duty_cycle](pwm/measure_duty_cycle) | Drives a PWM output at a range of duty cycles, and uses another PWM slice in input mode to measure the duty cycle.\n\n### Reset\n\nApp|Description\n---|---\n[hello_reset](reset/hello_reset) | Perform a hard reset on some peripherals, then bring them back up.\n\n### RTC\n\nApp|Description\n---|---\n[hello_rtc](rtc/hello_rtc) | Set a date/time on the RTC, then repeatedly print the current time, 10 times per second, to show it updating.\n[rtc_alarm](rtc/rtc_alarm) | Set an alarm on the RTC to trigger an interrupt at a date/time 5 seconds into the future.\n[rtc_alarm_repeat](rtc/rtc_alarm_repeat) | Trigger an RTC interrupt once per minute.\n\n### SHA-256\n\nApp|Description\n---|---\n[hello_sha256](sha/sha256) | Demonstrates how to use the pico_sha256 library to calculate a checksum using the hardware in rp2350\n[mbedtls_sha256](sha/mbedtls_sha256) | Demonstrates using the SHA-256 hardware acceleration in mbedtls\n\n### SPI\n\nApp|Description\n---|---\n[bme280_spi](spi/bme280_spi) | Attach a BME280 temperature/humidity/pressure sensor via SPI.\n[mpu9250_spi](spi/mpu9250_spi) | Attach a MPU9250 accelerometer/gyoscope via SPI.\n[spi_dma](spi/spi_dma) | Use DMA to transfer data both to and from the SPI simultaneously. The SPI is configured for loopback.\n[spi_flash](spi/spi_flash) | Erase, program and read a serial flash device attached to one of the SPI controllers.\n[spi_master_slave](spi/spi_master_slave) | Demonstrate SPI communication as master and slave.\n[max7219_8x7seg_spi](spi/max7219_8x7seg_spi) | Attaching a Max7219 driving an 8 digit 7 segment display via SPI\n[max7219_32x8_spi](spi/max7219_32x8_spi) | Attaching a Max7219 driving an 32x8 LED display via SPI\n\n### System\n\nApp|Description\n---|---\n[boot_info](system/boot_info) | Demonstrate how to read and interpret sys info boot info.\n[hello_double_tap](system/hello_double_tap) | An LED blink with the `pico_bootsel_via_double_reset` library linked. This enters the USB bootloader when it detects the system being reset twice in quick succession, which is useful for boards with a reset button but no BOOTSEL button.\n[rand](system/rand) | Demonstrate how to use the pico random number functions.\n[narrow_io_write](system/narrow_io_write) | Demonstrate the effects of 8-bit and 16-bit writes on a 32-bit IO register.\n[unique_board_id](system/unique_board_id) | Read the 64 bit unique ID from external flash, which serves as a unique identifier for the board.\n\n### Timer\n\nApp|Description\n---|---\n[hello_timer](timer/hello_timer) | Set callbacks on the system timer, which repeat at regular intervals. Cancel the timer when we're done.\n[periodic_sampler](timer/periodic_sampler) | Sample GPIOs in a timer callback, and push the samples into a concurrency-safe queue. Pop data from the queue in code running in the foreground.\n[timer_lowlevel](timer/timer_lowlevel) | Example of direct access to the timer hardware. Not generally recommended, as the SDK may use the timer for IO timeouts.\n\n### UART\n\nApp|Description\n---|---\n[hello_uart](uart/hello_uart) | Print some text from one of the UART serial ports, without going through `stdio`.\n[lcd_uart](uart/lcd_uart) | Display text and symbols on a 16x02 RGB LCD display via UART\n[uart_advanced](uart/uart_advanced) | Use some other UART features like RX interrupts, hardware control flow, and data formats other than 8n1.\n\n### Universal\n\nThese are examples of how to build universal binaries which run on RP2040, and RP2350 Arm & RISC-V.\nThese require you to set `PICO_ARM_TOOLCHAIN_PATH` and `PICO_RISCV_TOOLCHAIN_PATH` to appropriate paths, to ensure you have compilers for both architectures.\n\nApp|Description\n---|---\n[blink](universal/CMakeLists.txt#L126) | Same as the [blink](blink) example, but universal.\n[hello_universal](universal/hello_universal) | The obligatory Hello World program for Pico (USB and serial output). On RP2350 it will reboot to the other architecture after every 10 prints.\n[nuke_universal](universal/CMakeLists.txt#L132) | Same as the [nuke](flash/nuke) example, but universal. On RP2350 runs as a packaged SRAM binary, so is written to flash and copied to SRAM by the bootloader\n\n### USB Device\n\n#### TinyUSB Examples \n\nMost of the USB device examples come directly from the TinyUSB device examples directory [here](https://github.com/hathach/tinyusb/tree/master/examples/device).\nThose that are supported on RP2040 devices are automatically included as part of the pico-examples\nbuild as targets named `tinyusb_dev_<example_name>`, e.g. https://github.com/hathach/tinyusb/tree/master/examples/device/hid_composite\nis built as `tinyusb_dev_hid_composite`.\n\nAt the time of writing, these examples are available:\n\n- tinyusb_dev_audio_4_channel_mic\n- tinyusb_dev_audio_test\n- tinyusb_dev_board_test\n- tinyusb_dev_cdc_dual_ports\n- tinyusb_dev_cdc_msc\n- tinyusb_dev_dfu\n- tinyusb_dev_dfu_runtime\n- tinyusb_dev_dynamic_configuration\n- tinyusb_dev_hid_composite\n- tinyusb_dev_hid_generic_inout\n- tinyusb_dev_hid_multiple_interface\n- tinyusb_dev_midi_test\n- tinyusb_dev_msc_dual_lun\n- tinyusb_dev_net_lwip_webserver\n- tinyusb_dev_uac2_headset\n- tinyusb_dev_usbtmc\n- tinyusb_dev_video_capture\n- tinyusb_dev_webusb_serial\n\nWhilst these examples ably demonstrate how to use TinyUSB in device mode, their `CMakeLists.txt` is set up in a way\ntailored to how TinyUSB builds their examples within their source tree.\n\nFor a better example of how to configure `CMakeLists.txt` for using TinyUSB in device mode with the Raspberry Pi SDK\nsee below:\n\n#### SDK build example \nApp|Description\n---|---\n[dev_hid_composite](usb/device/dev_hid_composite) | A copy of the TinyUSB device example with the same name, but with a CMakeLists.txt which demonstrates how to add a dependency on the TinyUSB device libraries with the Raspberry Pi Pico SDK\n\n#### Low Level example\nApp|Description\n---|---\n[dev_lowlevel](usb/device/dev_lowlevel) | A USB Bulk loopback implemented with direct access to the USB hardware (no TinyUSB)\n\n### USB Host\n\nAll the USB host examples come directly from the TinyUSB host examples directory [here](https://github.com/hathach/tinyusb/tree/master/examples/host).\nThose that are supported on RP2040 devices are automatically included as part of the pico-examples\nbuild as targets named `tinyusb_host_<example_name>`, e.g. https://github.com/hathach/tinyusb/tree/master/examples/host/cdc_msc_hid\nis built as `tinyusb_host_cdc_msc_hid`.\n\nAt the time of writing, there is only one host example available:\n\n- tinyusb_host_cdc_msc_hid\n\n### USB Dual Mode\n\nUSB Dual Mode uses PIO as a USB host controller and the RP2040 USB device controller as a device controller. All the USB dual examples come directly from the TinyUSB dual examples directory [here](https://github.com/hathach/tinyusb/tree/master/examples/dual).\nThose that are supported on RP2040 devices are automatically included as part of the pico-examples\nbuild as targets named `tinyusb_dual_<example_name>`, e.g. https://github.com/hathach/tinyusb/tree/master/examples/dual/host_hid_to_device_cdc\nis built as `tinyusb_dual_host_hid_to_device_cdc`.\n\nAt the time of writing, there is only one dual example available:\n\n- tinyusb_dual_host_hid_to_device_cdc\n\n### Watchdog\n\nApp|Description\n---|---\n[hello_watchdog](watchdog/hello_watchdog) | Set the watchdog timer, and let it expire. Detect the reboot, and halt.\n"
        },
        {
          "name": "adc",
          "type": "tree",
          "content": null
        },
        {
          "name": "binary_info",
          "type": "tree",
          "content": null
        },
        {
          "name": "blink",
          "type": "tree",
          "content": null
        },
        {
          "name": "blink_simple",
          "type": "tree",
          "content": null
        },
        {
          "name": "bootloaders",
          "type": "tree",
          "content": null
        },
        {
          "name": "clocks",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "dcp",
          "type": "tree",
          "content": null
        },
        {
          "name": "divider",
          "type": "tree",
          "content": null
        },
        {
          "name": "dma",
          "type": "tree",
          "content": null
        },
        {
          "name": "example_auto_set_url.cmake",
          "type": "blob",
          "size": 0.2900390625,
          "content": "set(PICO_EXAMPLE_URL_BASE \"https://github.com/raspberrypi/pico-examples/tree/HEAD\")\nmacro(example_auto_set_url TARGET)\n    file(RELATIVE_PATH URL_REL_PATH \"${PICO_EXAMPLES_PATH}\" \"${CMAKE_CURRENT_LIST_DIR}\")\n    pico_set_program_url(${TARGET} \"${PICO_EXAMPLE_URL_BASE}/${URL_REL_PATH}\")\nendmacro()"
        },
        {
          "name": "flash",
          "type": "tree",
          "content": null
        },
        {
          "name": "freertos",
          "type": "tree",
          "content": null
        },
        {
          "name": "gpio",
          "type": "tree",
          "content": null
        },
        {
          "name": "hello_world",
          "type": "tree",
          "content": null
        },
        {
          "name": "hstx",
          "type": "tree",
          "content": null
        },
        {
          "name": "i2c",
          "type": "tree",
          "content": null
        },
        {
          "name": "ide",
          "type": "tree",
          "content": null
        },
        {
          "name": "interp",
          "type": "tree",
          "content": null
        },
        {
          "name": "multicore",
          "type": "tree",
          "content": null
        },
        {
          "name": "otp",
          "type": "tree",
          "content": null
        },
        {
          "name": "pico_extras_import_optional.cmake",
          "type": "blob",
          "size": 2.744140625,
          "content": "# This is a copy of <PICO_EXTRAS_PATH>/external/pico_extras_import.cmake\n\n# This can be dropped into an external project to help locate pico-extras\n# It should be include()ed prior to project()\n\nif (DEFINED ENV{PICO_EXTRAS_PATH} AND (NOT PICO_EXTRAS_PATH))\n    set(PICO_EXTRAS_PATH $ENV{PICO_EXTRAS_PATH})\n    message(\"Using PICO_EXTRAS_PATH from environment ('${PICO_EXTRAS_PATH}')\")\nendif ()\n\nif (DEFINED ENV{PICO_EXTRAS_FETCH_FROM_GIT} AND (NOT PICO_EXTRAS_FETCH_FROM_GIT))\n    set(PICO_EXTRAS_FETCH_FROM_GIT $ENV{PICO_EXTRAS_FETCH_FROM_GIT})\n    message(\"Using PICO_EXTRAS_FETCH_FROM_GIT from environment ('${PICO_EXTRAS_FETCH_FROM_GIT}')\")\nendif ()\n\nif (DEFINED ENV{PICO_EXTRAS_FETCH_FROM_GIT_PATH} AND (NOT PICO_EXTRAS_FETCH_FROM_GIT_PATH))\n    set(PICO_EXTRAS_FETCH_FROM_GIT_PATH $ENV{PICO_EXTRAS_FETCH_FROM_GIT_PATH})\n    message(\"Using PICO_EXTRAS_FETCH_FROM_GIT_PATH from environment ('${PICO_EXTRAS_FETCH_FROM_GIT_PATH}')\")\nendif ()\n\nif (NOT PICO_EXTRAS_PATH)\n    if (PICO_EXTRAS_FETCH_FROM_GIT)\n        include(FetchContent)\n        set(FETCHCONTENT_BASE_DIR_SAVE ${FETCHCONTENT_BASE_DIR})\n        if (PICO_EXTRAS_FETCH_FROM_GIT_PATH)\n            get_filename_component(FETCHCONTENT_BASE_DIR \"${PICO_EXTRAS_FETCH_FROM_GIT_PATH}\" REALPATH BASE_DIR \"${CMAKE_SOURCE_DIR}\")\n        endif ()\n        FetchContent_Declare(\n                pico_extras\n                GIT_REPOSITORY https://github.com/raspberrypi/pico-extras\n                GIT_TAG master\n        )\n        if (NOT pico_extras)\n            message(\"Downloading Raspberry Pi Pico Extras\")\n            FetchContent_Populate(pico_extras)\n            set(PICO_EXTRAS_PATH ${pico_extras_SOURCE_DIR})\n        endif ()\n        set(FETCHCONTENT_BASE_DIR ${FETCHCONTENT_BASE_DIR_SAVE})\n    else ()\n        if (PICO_SDK_PATH AND EXISTS \"${PICO_SDK_PATH}/../pico-extras\")\n            set(PICO_EXTRAS_PATH ${PICO_SDK_PATH}/../pico-extras)\n            message(\"Defaulting PICO_EXTRAS_PATH as sibling of PICO_SDK_PATH: ${PICO_EXTRAS_PATH}\")\n        endif()\n    endif ()\nendif ()\n\nif (PICO_EXTRAS_PATH)\n    set(PICO_EXTRAS_PATH \"${PICO_EXTRAS_PATH}\" CACHE PATH \"Path to the PICO EXTRAS\")\n    set(PICO_EXTRAS_FETCH_FROM_GIT \"${PICO_EXTRAS_FETCH_FROM_GIT}\" CACHE BOOL \"Set to ON to fetch copy of PICO EXTRAS from git if not otherwise locatable\")\n    set(PICO_EXTRAS_FETCH_FROM_GIT_PATH \"${PICO_EXTRAS_FETCH_FROM_GIT_PATH}\" CACHE FILEPATH \"location to download EXTRAS\")\n\n    get_filename_component(PICO_EXTRAS_PATH \"${PICO_EXTRAS_PATH}\" REALPATH BASE_DIR \"${CMAKE_BINARY_DIR}\")\n    if (NOT EXISTS ${PICO_EXTRAS_PATH})\n        message(FATAL_ERROR \"Directory '${PICO_EXTRAS_PATH}' not found\")\n    endif ()\n\n    set(PICO_EXTRAS_PATH ${PICO_EXTRAS_PATH} CACHE PATH \"Path to the PICO EXTRAS\" FORCE)\n    add_subdirectory(${PICO_EXTRAS_PATH} pico_extras)\nendif()"
        },
        {
          "name": "pico_sdk_import.cmake",
          "type": "blob",
          "size": 3.0908203125,
          "content": "# This is a copy of <PICO_SDK_PATH>/external/pico_sdk_import.cmake\n\n# This can be dropped into an external project to help locate this SDK\n# It should be include()ed prior to project()\n\nif (DEFINED ENV{PICO_SDK_PATH} AND (NOT PICO_SDK_PATH))\n    set(PICO_SDK_PATH $ENV{PICO_SDK_PATH})\n    message(\"Using PICO_SDK_PATH from environment ('${PICO_SDK_PATH}')\")\nendif ()\n\nif (DEFINED ENV{PICO_SDK_FETCH_FROM_GIT} AND (NOT PICO_SDK_FETCH_FROM_GIT))\n    set(PICO_SDK_FETCH_FROM_GIT $ENV{PICO_SDK_FETCH_FROM_GIT})\n    message(\"Using PICO_SDK_FETCH_FROM_GIT from environment ('${PICO_SDK_FETCH_FROM_GIT}')\")\nendif ()\n\nif (DEFINED ENV{PICO_SDK_FETCH_FROM_GIT_PATH} AND (NOT PICO_SDK_FETCH_FROM_GIT_PATH))\n    set(PICO_SDK_FETCH_FROM_GIT_PATH $ENV{PICO_SDK_FETCH_FROM_GIT_PATH})\n    message(\"Using PICO_SDK_FETCH_FROM_GIT_PATH from environment ('${PICO_SDK_FETCH_FROM_GIT_PATH}')\")\nendif ()\n\nset(PICO_SDK_PATH \"${PICO_SDK_PATH}\" CACHE PATH \"Path to the Raspberry Pi Pico SDK\")\nset(PICO_SDK_FETCH_FROM_GIT \"${PICO_SDK_FETCH_FROM_GIT}\" CACHE BOOL \"Set to ON to fetch copy of SDK from git if not otherwise locatable\")\nset(PICO_SDK_FETCH_FROM_GIT_PATH \"${PICO_SDK_FETCH_FROM_GIT_PATH}\" CACHE FILEPATH \"location to download SDK\")\n\nif (NOT PICO_SDK_PATH)\n    if (PICO_SDK_FETCH_FROM_GIT)\n        include(FetchContent)\n        set(FETCHCONTENT_BASE_DIR_SAVE ${FETCHCONTENT_BASE_DIR})\n        if (PICO_SDK_FETCH_FROM_GIT_PATH)\n            get_filename_component(FETCHCONTENT_BASE_DIR \"${PICO_SDK_FETCH_FROM_GIT_PATH}\" REALPATH BASE_DIR \"${CMAKE_SOURCE_DIR}\")\n        endif ()\n        # GIT_SUBMODULES_RECURSE was added in 3.17\n        if (${CMAKE_VERSION} VERSION_GREATER_EQUAL \"3.17.0\")\n            FetchContent_Declare(\n                    pico_sdk\n                    GIT_REPOSITORY https://github.com/raspberrypi/pico-sdk\n                    GIT_TAG master\n                    GIT_SUBMODULES_RECURSE FALSE\n            )\n        else ()\n            FetchContent_Declare(\n                    pico_sdk\n                    GIT_REPOSITORY https://github.com/raspberrypi/pico-sdk\n                    GIT_TAG master\n            )\n        endif ()\n\n        if (NOT pico_sdk)\n            message(\"Downloading Raspberry Pi Pico SDK\")\n            FetchContent_Populate(pico_sdk)\n            set(PICO_SDK_PATH ${pico_sdk_SOURCE_DIR})\n        endif ()\n        set(FETCHCONTENT_BASE_DIR ${FETCHCONTENT_BASE_DIR_SAVE})\n    else ()\n        message(FATAL_ERROR\n                \"SDK location was not specified. Please set PICO_SDK_PATH or set PICO_SDK_FETCH_FROM_GIT to on to fetch from git.\"\n                )\n    endif ()\nendif ()\n\nget_filename_component(PICO_SDK_PATH \"${PICO_SDK_PATH}\" REALPATH BASE_DIR \"${CMAKE_BINARY_DIR}\")\nif (NOT EXISTS ${PICO_SDK_PATH})\n    message(FATAL_ERROR \"Directory '${PICO_SDK_PATH}' not found\")\nendif ()\n\nset(PICO_SDK_INIT_CMAKE_FILE ${PICO_SDK_PATH}/pico_sdk_init.cmake)\nif (NOT EXISTS ${PICO_SDK_INIT_CMAKE_FILE})\n    message(FATAL_ERROR \"Directory '${PICO_SDK_PATH}' does not appear to contain the Raspberry Pi Pico SDK\")\nendif ()\n\nset(PICO_SDK_PATH ${PICO_SDK_PATH} CACHE PATH \"Path to the Raspberry Pi Pico SDK\" FORCE)\n\ninclude(${PICO_SDK_INIT_CMAKE_FILE})\n"
        },
        {
          "name": "pico_w",
          "type": "tree",
          "content": null
        },
        {
          "name": "picoboard",
          "type": "tree",
          "content": null
        },
        {
          "name": "pio",
          "type": "tree",
          "content": null
        },
        {
          "name": "pwm",
          "type": "tree",
          "content": null
        },
        {
          "name": "reset",
          "type": "tree",
          "content": null
        },
        {
          "name": "rtc",
          "type": "tree",
          "content": null
        },
        {
          "name": "sha",
          "type": "tree",
          "content": null
        },
        {
          "name": "spi",
          "type": "tree",
          "content": null
        },
        {
          "name": "system",
          "type": "tree",
          "content": null
        },
        {
          "name": "timer",
          "type": "tree",
          "content": null
        },
        {
          "name": "uart",
          "type": "tree",
          "content": null
        },
        {
          "name": "universal",
          "type": "tree",
          "content": null
        },
        {
          "name": "usb",
          "type": "tree",
          "content": null
        },
        {
          "name": "watchdog",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}