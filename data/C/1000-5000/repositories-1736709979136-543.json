{
  "metadata": {
    "timestamp": 1736709979136,
    "page": 543,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "veandco/go-sdl2",
      "stars": 2247,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.01171875,
          "content": "*.bmp\n*.png\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0166015625,
          "content": "*.swp\n*~\ngo-sdl2\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1064453125,
          "content": "[submodule \".go-sdl2-examples\"]\n\tpath = .go-sdl2-examples\n\turl = https://github.com/veandco/go-sdl2-examples\n"
        },
        {
          "name": ".go-sdl2-examples",
          "type": "commit",
          "content": null
        },
        {
          "name": "BREAKING.md",
          "type": "blob",
          "size": 6.818359375,
          "content": "## BREAKING CHANGES\n\n### v0.3..master\n\n#### sdl\n\n+ Changed `RWFromMem()` (0ee14f91)\n+ Changed and renamed `RWops.FreeRW()` to `RWops.Free()` (0ee14f91)\n+ Changed and renamed `RWops.RWsize()` to `RWops.Size()` (0ee14f91)\n+ Changed and renamed `RWops.RWseek()` to `RWops.Seek()` (0ee14f91)\n+ Changed and renamed `RWops.RWread()` to `RWops.Read()` and `RWops.Read2()` (0ee14f91)\n+ Changed and renamed `RWops.RWtell()` to `RWops.Tell()` (0ee14f91)\n+ Changed and renamed `RWops.RWwrite()` to `RWops.Write()` and `RWops.Write2()` (0ee14f91)\n+ Changed and renamed `RWops.RWclose()` to `RWops.Close()` (0ee14f91)\n+ Changed and renamed `RWops.RWclose()` to `RWops.Close()` (0ee14f91)\n+ Changed `Window.VulkanCreateSurface` to return `unsafe.Pointer` instead of `uintptr`\n\n#### img\n\n+ Changed `Init()` to return `error` instead of `int`\n\n### v0.2..v0.3\n\n+ Renamed `ButtonId` to `ButtonID` in `MessageBoxButtonData` struct\n+ Renamed `GL_CreateContext()` to `GLCreateContext()`\n+ Renamed `GL_DeleteContext()` to `GLDeleteContext()`\n+ Renamed `GL_ExtensionSupported()` to `GLExtensionSupported()`\n+ Renamed `GL_GetAttribute()` to `GLGetAttribute()`\n+ Renamed `GL_GetDrawableSize()` to `GLGetDrawableSize()`\n+ Renamed `GL_GetProcAddress()` to `GLGetProcAddress()`\n+ Renamed `GL_GetSwapInterval()` to `GLGetSwapInterval()`\n+ Renamed `GL_LoadLibrary()` to `GLLoadLibrary()`\n+ Renamed `GL_MakeCurrent()` to `GLMakeCurrent()`\n+ Renamed `GL_SetAttribute()` to `GLSetAttribute()`\n+ Renamed `GL_SetSwapInterval()` to `GLSetSwapInterval()`\n+ Renamed `GL_SwapWindow()` to `GLSwap()`\n+ Renamed `GL_UnloadLibrary()` to `GLUnloadLibrary()`\n+ Renamed `GameController.GetAttached()` to `GameController.Attached()`\n+ Renamed `GameController.GetAxis()` to `GameController.Axis()`\n+ Renamed `GameController.GetBindForAxis()` to `GameController.BindForAxis()`\n+ Renamed `GameController.GetBindForButton()` to `GameController.BindForButton()`\n+ Renamed `GameController.GetButton()` to `GameController.Button()`\n+ Renamed `GameController.GetJoystick()` to `GameController.Joystick()`\n+ Renamed `Id` to `ID` in `Finger` struct\n+ Renamed `Joystick.GetAttached()` to `Joystick.Attached()`\n+ Renamed `Joystick.GetAxis()` to `Joystick.Axis()`\n+ Renamed `Joystick.GetBall()` to `Joystick.Ball()`\n+ Renamed `Joystick.GetButton()` to `Joystick.Button()`\n+ Renamed `Joystick.GetGUID()` to `Joystick.GUID()`\n+ Renamed `Joystick.GetHat()` to `Joystick.Hat()`\n+ Renamed `LoadBMP_RW()` to `LoadBMPRW()`\n+ Renamed `LoadBMP_RW()` to `LoadBMPRW()`\n+ Renamed `LoadCUR_RW()` to `LoadCURRW()`\n+ Renamed `LoadGIF_RW()` to `LoadGIFRW()`\n+ Renamed `LoadICO_RW()` to `LoadICORW()`\n+ Renamed `LoadJPG_RW()` to `LoadJPGRW()`\n+ Renamed `LoadLBM_RW()` to `LoadLBMRW()`\n+ Renamed `LoadMUSType_RW()` to `LoadMUSTypeRW()`\n+ Renamed `LoadMUS_RW()` to `LoadMUSRW()`\n+ Renamed `LoadPCX_RW()` to `LoadPCXRW()`\n+ Renamed `LoadPNG_RW()` to `LoadPNGRW()`\n+ Renamed `LoadPNM_RW()` to `LoadPNMRW()`\n+ Renamed `LoadTGA_RW()` to `LoadTGARW()`\n+ Renamed `LoadTIF_RW()` to `LoadTIFRW()`\n+ Renamed `LoadTexture_RW` to `LoadTextureRW`\n+ Renamed `LoadTyped_RW` to `LoadTypedRW`\n+ Renamed `LoadWAV_RW()` to `LoadWAVRW()`\n+ Renamed `LoadWAV_RW()` to `LoadWAVRW()`\n+ Renamed `LoadWEBP_RW()` to `LoadWEBPRW()`\n+ Renamed `LoadXCF_RW()` to `LoadXCFRW()`\n+ Renamed `LoadXPM_RW()` to `LoadXPMRW()`\n+ Renamed `LoadXV_RW()` to `LoadXVRW()`\n+ Renamed `Load_RW` to `LoadRW`\n+ Renamed `QuickLoad_RAW()` to `QuickLoadRAW()`\n+ Renamed `QuickLoad_WAV()` to `QuickLoadWAV()`\n+ Renamed `RenderUTF8_Blended()` to `RenderUTF8Blended()`\n+ Renamed `RenderUTF8_Blended_Wrapped()` to `RenderUTF8BlendedWrapped()`\n+ Renamed `RenderUTF8_Shaded()` to `RenderUTF8Shaded()`\n+ Renamed `RenderUTF8_Solid()` to `RenderUTF8Solid()`\n+ Renamed `SW_YUVTexture` to `SWYUVTexture`\n+ Renamed `SaveBMP_RW()` to `SaveBMPRW()`\n+ Renamed `SavePNG_RW()` to `SavePNGRW()`\n+ Renamed `Texture.GL_BindTexture()` to `Texture.GLBind()`\n+ Renamed `Texture.GL_UnbindTexture()` to `Texture.GLUnbind()`\n+ Renamed `TouchId` to `TouchID` in `MultiGestureEvent` struct\n+ Renamed `Unicode` to `unused` in `Keysym` struct (must have been a typo)\n+ `GLCreateContext()`, `GLMakeCurrent()`, `GLGetDrawableSize()`, `GLSwapWindow()` are now methods of `Window`\n+ `GetCurrentDisplayMode()` returns (DisplayMode, error) instead of error\n+ `GetCurrentVideoDriver()` returns (string, error) instead of string\n+ `GetDesktopDisplayMode()` returns (DisplayMode, error) instead of error\n+ `GetDisplayBounds()` returns (Rect, error) instead of error\n+ `GetDisplayMode()` returns (DisplayMode, error) instead of error\n+ `GetDisplayName()` returns (string, error) instead of string\n+ `GetDisplayUsableBounds` returns (Rect, error) instead of error\n+ `GetNumRenderDrivers()` returns (int, error) instead of int\n+ `GetRenderDriverInfo()` returns (int, error) instead of int\n+ `Haptic.GetEffectStatus()` returns (int, error) instead of int\n+ `Haptic.NumAxes()` returns (int, error) instead of int\n+ `Haptic.NumEffects()` returns (int, error) instead of int\n+ `Haptic.NumEffectsPlaying()` returns (int, error) instead of int\n+ `Haptic.Query()` returns (uint32, error) instead of uint\n+ `HapticIndex()` returns (int, error) instead of int\n+ `HapticName()` returns (string, error) instead of string\n+ `HapticOpenFromJoystick()` returns (\\*Haptic, error) instead of \\*Haptic\n+ `LoadBMPRW()` requires (\\*RWops, bool) instead of (\\*RWops, int)\n+ `LoadWAV()` requires string instead of (string ,\\*AudioSpec)\n+ `LoadWAVRW()` requires (\\*RWops, bool) instead of (\\*RWops, bool ,\\*AudioSpec)\n+ `NumHaptics()` returns (int, error) instead of int\n+ `Renderer.Destroy()` returns error\n+ `Renderer.GetViewport()` and `Renderer.GetClipRect()` now returns Rect instead of being passed a \\*Rect\n+ `ShowCursor()` returns (int, error) instead of int\n+ `Surface.SaveBMPRW()` requires (\\*RWops, bool) instead of (\\*RWops, int)\n+ `Surface.SetColorKey()` requires (bool, uint32) instead of (int, uint32)\n+ `Surface.SetRLE()` requires bool instead of int\n+ `Texture.Destroy()` returns error\n+ `Window.Destroy()` returns error\n+ `Window.GetDisplayMode()` returns (DisplayMode, error) instead of error\n+ `Window.GetID()` returns (uint32, error) instead of uint32\n+ Changed Mutex, Sem, Cond to have methods instead of functions\n+ Changed `GameControllerMapping()` into `GameController.Mapping()`\n+ Haptic functions now return bool and/or error instead of int\n+ Merged `KeyUpEvent` and `KeyDownEvent` into `KeyboardEvent`\n+ Moved error to the last return value in `ShowMessageBox()`\n+ Split `JoyDeviceEvent` into `JoyDeviceAddedEvent` and `JoyDeviceRemovedEvent`, since Which field can contain different types of data (int or JoystickID).\n\n- Unexported `Flags`, `Locked` and `LockData` in `Surface` struct\n- Unexported `Padding` in `AudioSpec` struct\n- Unexported `Rloss`, `Gloss`, `Bloss`, `Aloss`, `Rshift`, `Gshift`, `Bshift`, `Ashift`, `RefCount`, `Next` in `PixelFormat` struct\n- Unexported `Version`, `RefCount` in `Palette` struct\n- Unexported `goHintCallback`\n"
        },
        {
          "name": "BSDmakefile",
          "type": "blob",
          "size": 0.8720703125,
          "content": "# Directories\nSRCDIR=\t\t${.CURDIR}\nALLDIRS!=\tfind ${SRCDIR} -type d -not -path \"./.git*\"\n# Packages\nROOTPKG=\t${SRCDIR:S/${GOPATH}\\/src\\///}\nPACKAGES=\tsdl img mix ttf\n# Some cleanups\nCLEANUP=\t*.cache *.core *~ *.orig\n\nGO?=\t\tgo\n\nall: clean packages\n\nclean:\n\t@echo \"Cleaning up...\"\n\t@for dir in ${ALLDIRS}; do \\\n\t\tcd $$dir && rm -f ${CLEANUP} && cd ${SRCDIR}; \\\n\tdone\n\npackages:\n\t@for pkg in ${PACKAGES}; do \\\n\t\techo \"Building package ${ROOTPKG}/$$pkg...\"; \\\n\t\t${GO} build ${ROOTPKG}/$$pkg; \\\n\tdone\n\ntest:\n\t@for pkg in ${PACKAGES}; do \\\n\t\techo \"Testing ${ROOTPKG}/$$pkg...\"; \\\n\t\t${GO} test -v ${ROOTPKG}/$$pkg; \\\n\tdone\n\ncoverage:\n\t@for pkg in ${PACKAGES}; do \\\n\t\techo \"Coverage for ${ROOTPKG}/$$pkg...\"; \\\n\t\t${GO} test -cover ${ROOTPKG}/$$pkg; \\\n\tdone\n\nbench:\n\t@for pkg in ${PACKAGES}; do \\\n\t\techo \"Benchmarking ${ROOTPKG}/$$pkg...\"; \\\n\t\t${GO} test -bench=. -cpu 1,2,3,4 ${ROOTPKG}/$$pkg; \\\n\tdone\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 1.4404296875,
          "content": "# Contributor Code of Conduct\n\nAs contributors and maintainers of this project, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities.\n\nWe are committed to making participation in this project a harassment-free experience for everyone, regardless of the level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, age, or religion.\n\nExamples of unacceptable behavior by participants include the use of sexual language or imagery, derogatory comments or personal attacks, trolling, public or private harassment, insults, or other unprofessional conduct.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct. Project maintainers who do not follow the Code of Conduct may be removed from the project team.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the project maintainers.\n\nThis Code of Conduct is taken from [Vue.js](https://vuejs.org) which is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.0.0, available at [http://contributor-covenant.org/version/1/0/0/](http://contributor-covenant.org/version/1/0/0/)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.505859375,
          "content": "# Contribution Guide\n\n## Checklist\nThese are loose checklist for contributors to follow when submitting patches.\n\n1. Small commits\n\n   You can contribute by a lot of ways from improving README, fixing typos, coding style, specific bugs, performance optimizations. However, it is preferred that you break up your commits to single logical change using `git add -p` so it is easier to review the patch. The larger the change, the more necessary it is for the commit to be broken up to tiny little pieces. If your change is large but consistent throughout (e.g. fixing a specific coding style that happens on almost every file), that can be counted as single logical change.\n\n2. File and directory-based commit message\n\n   We're starting to use commit messages that looks like this: `sdl: fixed some typos in render.go` or `examples/render_goroutine: fixed a dereferenced nil pointer` where it starts with folder hierarchy. It's not something strictly required but we would prefer it to be followed.\n\n3. Compatibility with SDL 2.0.0\n\n   The binding should compile with the oldest version SDL2. If there's a function added to the binding but is not supported by the older SDL2 version, a stub function must be provided. See `sdl/filesystem.go` for an example.\n\n## How to contribute\nYou can start by forking the repository, modify the fork, push the change to your fork, and then send pull requests. [Here](http://blog.campoy.cat/2014/03/github-and-go-forking-pull-requests-and.html) are some instructions on how you can work with your own fork.\n\n"
        },
        {
          "name": "CONTRIBUTORS.md",
          "type": "blob",
          "size": 2.90234375,
          "content": "Contributors\n============\nHere's the list of contributors with their respective Github URLs.\n* [Jacky Boen](https://github.com/jackyb)\n* [HardWareGuy](https://github.com/HardWareGuy)\n* [akovaski](https://github.com/akovaski)\n* [Jeromy Johnson](https://github.com/whyrusleeping)\n* [Cai Lei](https://github.com/ccll)\n* [Arne Döring](https://github.com/krux02)\n* [Marcus von Appen](https://github.com/marcusva)\n* [Tom Murray](https://github.com/TomMurray)\n* [Ian Davis](https://github.com/iand)\n* [hschendel](https://github.com/hschendel)\n* [Ingo Oeser](https://github.com/nightlyone)\n* [nlordell](https://github.com/nlordell)\n* [Ben Davies](https://github.com/JalfResi)\n* [Bastien Dejean](https://github.com/baskerville)\n* [Pirmin Tapken](https://github.com/PirminTapken)\n* [Robert Lillack](https://github.com/roblillack)\n* [Marcell Jusztin](https://github.com/morcmarc)\n* [Stan Schwertly](https://github.com/Stantheman)\n* [Michael Vetter](https://github.com/jubalh)\n* [Tom Fogal](https://github.com/tfogal)\n* [Philipp Meinen](https://github.com/PhiCode)\n* [Thomas McGrew](https://github.com/mcgrew)\n* [Geoff Catlin](https://github.com/gcatlin)\n* [Schobers](https://github.com/Schobers)\n* [Jan Tuitman](https://github.com/jantuitman)\n* [Nick Powell](https://github.com/THUNDERGROOVE)\n* [Steven R. Wiley](https://github.com/srwiley)\n* [Franco Lazzarino](https://github.com/flazz)\n* [Jason Alan Palmer](https://github.com/jalan)\n* [Seuk Won Kang](https://github.com/kasworld)\n* [Brandon Mulcahy](https://github.com/jangler)\n* [Tim Anema](https://github.com/tanema)\n* [Tyler Compton](https://github.com/velovix)\n* [Nicolas Hess](https://github.com/n0dev)\n* [Stephen Noonan](https://github.com/tycho)\n* [Guilherme Freitas Nemeth](https://github.com/glhrmfrts)\n* [Charney Kaye](https://github.com/charneykaye)\n* [Lars Scheme](https://github.com/gonutz)\n* [Emil Laine](https://github.com/emlai)\n* [Sergey Parshukov](https://github.com/jBugman)\n* [Casey DeLorme](https://github.com/cdelorme)\n* [Andreas T. Jonsson](https://github.com/andreas-jonsson)\n* [Milan Nikolic](https://github.com/gen2brain)\n* [Mike Gerow](https://github.com/gerow)\n* [Lilis Iskandar](https://github.com/veeableful)\n* [tfriedel6](https://github.com/tfriedel6)\n* [Eric Bronner](https://github.com/MoonWatcher582)\n* [Julien Castelain](https://github.com/julien)\n* [Robert Wallis](https://github.com/robert-wallis)\n* [Chae-Young Song](https://github.com/chaeyoungsong)\n* [Robert Wallis](https://github.com/robert-wallis)\n* [Lennart Buhl](https://github.com/r41d)\n* [Giovanni Bajo](https://github.com/rasky)\n* [Laurent Vaucher](https://github.com/slowfrog)\n* [Mike](https://github.com/barbeque)\n* [Tomas Virgl](https://github.com/tvi)\n* [Aye Aye Maung](https://github.com/ZeroXLR)\n* [Anton Malashin](https://github.com/malashin)\n* [John Perkins](https://github.com/mpath)\n* [jclc](https://github.com/jclc)\n* [flga](https://github.com/flga)\n\n_if anyone is missing, let me know!.. or you can add yourself in :)_\n"
        },
        {
          "name": "GNUmakefile",
          "type": "blob",
          "size": 0.87890625,
          "content": "# Directories\nSRCDIR=\t\t${CURDIR}\nALLDIRS!=\tfind ${SRCDIR} -type d -not -path \"./.git*\"\n# Packages\nROOTPKG=\t$(subst ${GOPATH}/src/,,${SRCDIR})\nPACKAGES=\tsdl img mix ttf gfx\n# Some cleanups\nCLEANUP=\t*.cache *.core *~ *.orig\n\nGO?=\t\tgo\n\nall: clean packages\n\nclean:\n\t@echo \"Cleaning up...\"\n\t@for dir in ${ALLDIRS}; do \\\n\t\tcd $$dir && rm -f ${CLEANUP} && cd ${SRCDIR}; \\\n\tdone\n\npackages:\n\t@for pkg in ${PACKAGES}; do \\\n\t\techo \"Building package ${ROOTPKG}/$$pkg...\"; \\\n\t\t${GO} build ${ROOTPKG}/$$pkg; \\\n\tdone\n\ntest:\n\t@for pkg in ${PACKAGES}; do \\\n\t\techo \"Testing ${ROOTPKG}/$$pkg...\"; \\\n\t\t${GO} test -v ${ROOTPKG}/$$pkg; \\\n\tdone\n\ncoverage:\n\t@for pkg in ${PACKAGES}; do \\\n\t\techo \"Coverage for ${ROOTPKG}/$$pkg...\"; \\\n\t\t${GO} test -cover ${ROOTPKG}/$$pkg; \\\n\tdone\n\nbench:\n\t@for pkg in ${PACKAGES}; do \\\n\t\techo \"Benchmarking ${ROOTPKG}/$$pkg...\"; \\\n\t\t${GO} test -bench=. -cpu 1,2,3,4 ${ROOTPKG}/$$pkg; \\\n\tdone\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4365234375,
          "content": "Copyright (c) 2013, Go-SDL2 Authors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n\t* Redistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimer.\n\t* Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.\n\t* Neither the name of Go-SDL2 nor the names of its contributors may be\nused to endorse or promote products derived from this software without specific\nprior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MAINTAINING.md",
          "type": "blob",
          "size": 6.845703125,
          "content": "# Maintaining\n\nThis contains personal notes on how I maintain the project on my machine. It is highly subjective and probably more troublesome that standard setup so please adjust this to suit your own preferences!\n\n## Setup\n\n### macOS\n\nOn macOS, I use Homebrew mostly on packages that have deep or many dependencies such as `pkg-config`. I prefer to build SDL2 and its related packages myself as they are mostly independent and install it to my own home directory so I don't clutter system directories unnecessarily.\n\n#### Initial directory setup\n\n1. Create directories for containing CLI tools and library source codes.\n```\nmkdir -p $HOME/Downloads/{CLI,Libraries}\n```\n\n2. Create a directory for containing the `go-sdl2` project. In my case, I create a `Projects` directory at my home directory with another directory called `veandco` inside it as it is the entity associated with the `go-sdl2` project.\n```\nmkdir -p $HOME/Projects/veandco\n```\n\n#### Install Go\n\n1. Go to CLI directory.\n```\ncd $HOME/Downloads/CLI\n```\n\n2. Download compressed version of the Go toolchain at https://golang.org/dl.\n```\ncurl -O https://golang.org/dl/go1.16.darwin-amd64.tar.gz # Intel\n# or\ncurl -O https://golang.org/dl/go1.16.darwin-arm64.tar.gz # M1\n```\n\n3. Extract the compressed Go toolchain file.\n```\nrm -r go # if Go has been installed before\ntar xf go1.16.darwin-amd64.tar.gz # Intel\n# or\ntar xf go1.16.darwin-arm64.tar.gz # M1\n```\n\n4. Set up PATH in ZSH startup file by adding the following content to `$HOME/.zshrc` so the shell can find Go executables.\n```\nexport GOROOT=\"$HOME/Downloads/CLI/go\"\nexport GOPATH=\"$HOME/.go\"\nexport PATH=\"$GOPATH/bin:$GOROOT/bin:$PATH\"\n```\n\n5. Open another Terminal tab or window and test that it works.\n```\ngo version\n```\n\n6. I also needed to allow Go linker tool to be executed by going to `$GOROOT/pkg/tool/darwin_amd64` for Intel or `$GOROOT/pkg/tool/darwin_arm64` for M1 in the **Finder** app and double-click `link` which would be prohibited to run by macOS the first time. After that, I need to go to **System Preferences** -> **Securiy and Privacy** and allow the program to run at the bottom.\n\n#### Install Homebrew\n\nGo to https://brew.sh and run the installation command shown on the website.\n\n#### Install pkg-config\n\n1. Install it via Homebrew.\n```\nbrew install pkgconfig\n```\n\n2. Set up `PKG_CONFIG_PATH` in ZSH startup file at `$HOME/.zshrc` with the following content.\n```\nexport PKG_CONFIG_PATH=\"$HOME/.local/lib/pkgconfig:$PKG_CONFIG_PATH\"\n```\n\n#### Install SDL2\n\n1. Go to the libraries directory \n```\ncd $HOME/Downloads/Libraries\n```\n\n2. Download the source code for SDL2 and optionally its related packages. I also included some dependencies such as mpg123 for MP3 playback support in SDL2_mixer.\n```\ncurl -O https://libsdl.org/releases/SDL2-2.0.14.tar.gz\ncurl -O https://www.libsdl.org/projects/SDL_mixer/release/SDL2_mixer-2.0.4.tar.gz\ncurl -O https://www.libsdl.org/projects/SDL_image/release/SDL2_image-2.0.5.tar.gz\ncurl -O https://www.libsdl.org/projects/SDL_ttf/release/SDL2_ttf-2.0.15.tar.gz\ncurl -O http://www.ferzkopp.net/Software/SDL2_gfx/SDL2_gfx-1.0.4.tar.gz\n\n# for SDL2_mixer\ncurl -O https://www.mpg123.de/download/mpg123-1.26.4.tar.bz2 # MP3 support\n\n# for SDL2_ttf\ncurl -O -L https://download.savannah.gnu.org/releases/freetype/freetype-2.10.4.tar.gz\n```\n\n3. Set up `LDFLAGS` and `C_INCLUDE_PATH` in `$HOME/.zshrc` so `configure` can find libraries and header files.\n```\nexport LDFLAGS=\"-L$HOME/.local/lib $LDFLAGS\"\nexport C_INCLUDE_PATH=\"$HOME/.local/include:$C_INCLUDE_PATH\"\n```\n\n4. Extract and build each package by following the template below. Please build the dependencies such as `mpg123` first!\n```\ntar xf [PACKAGE].[EXTENSION]\nmkdir -p [PACKAGE]/build\ncd [PACKAGE]/build\n../configure --prefix=$HOME/.local\nmake\nmake install\ncd -\n```\n\nFor example, for SDL2-2.0.14.tar.gz it would be like this:\n```\ntar xf SDL2-2.0.14.tar.gz\nmkdir -p SDL2-2.0.14/build\ncd SDL2-2.0.14/build\n../configure --prefix=$HOME/.local\nmake\nmake install\ncd -\n```\n\n5. Check that pkg-config can find them.\n```\npkg-config --cflags --libs sdl2 sdl2_mixer sdl2_image sdl2_ttf sdl2_gfx \n```\n\n#### Set up go-sdl2\n\n1. Go to the project parent directory.\n```\ncd $HOME/Projects/veandco\n```\n\n2. Git clone the project from Github. I usually use the SSH protocol instead of the HTTPS protocol. I also use `--recursive` flag as it will also initialize the submodules such as `.go-sdl2-examples`.\n```\ngit clone --recursive git@github.com:veandco/go-sdl2\n```\n\n3. Change to the project directory.\n```\ncd go-sdl2\n```\n\n3. Test that everything works by running an example.\n```\ncd .go-sdl2-examples/examples/render\ngo run render.go\n```\n\n## Development\n\n### Adding new bindings\n\nWe try to keep `go-sdl2` buildable with the oldest SDL2 version. In case where a new function is introduced in the actual SDL2 library, we create a dummy function in the related `.go` file. For example, let's see the following function:\n\n```c\n// $HOME/.local/include/SDL2/SDL_sensor.h\nextern DECLSPEC void SDLCALL SDL_LockSensors(void);\n```\n\nThe function was introduced in SDL2 2.0.14 so if we try to build `go-sdl2` using older SDL2 such as SDL2 2.0.0, the build would fail. To keep it working, we need to create fail-safe measures in the corresponding `sdl/sensor.go` file.\n\nAlmost every `.go` file has the following at the top the file.\n\n```go\npackage sdl\n\n/*\n#include \"sdl_wrapper.h\"\n\n...\n\n*/\n```\n\nIn the `...` area is where we implement the fail-safe measures.\n\n1. Create an #ifdef guard to check if our installed SDL2 version is older than the version in which the function is introduced. In this case it is 2.0.14, so this is how it would like:\n\n```go\npackage sdl\n\n/*\n#include \"sdl_wrapper.h\"\n\n#if !(SDL_VERSION_ATLEAST(2,0,14))\n\n...\n\n#endif\n*/\n```\n\n2. Then in the `...` area, we implement a warning section if it doesn't have it already. The warnings are not printed by default when building the `go-sdl2` package but it can enabled by setting `CGO_CPPFLAGS=-DWARN_OUTDATED` environment variable.\n\n```go\npackage sdl\n\n/*\n#include \"sdl_wrapper.h\"\n\n#if !(SDL_VERSION_ATLEAST(2,0,14))\n\n#if defined(WARN_OUTDATED)\n#pragma message(\"SDL_LockSensors is not supported before SDL 2.0.14\")\n#endif\n\n#endif\n*/\n```\n\n3. Below the warning block, we define our fail-safe functions like so:\n\n```go\npackage sdl\n\n/*\n#include \"sdl_wrapper.h\"\n\n#if !(SDL_VERSION_ATLEAST(2,0,14))\n\n#if defined(WARN_OUTDATED)\n#pragma message(\"SDL_LockSensors is not supported before SDL 2.0.14\")\n#endif\n\nstatic void SDL_LockSensors(void)\n{\n        // do nothing\n}\n\n#endif\n*/\n```\n\n4. If we have more functions that need fail-safe, it would look like this:\n\n```go\npackage sdl\n  \n/*\n#include \"sdl_wrapper.h\"\n\n#if !(SDL_VERSION_ATLEAST(2,0,14))\n\n#if defined(WARN_OUTDATED)\n#pragma message(\"SDL_LockSensors is not supported before SDL 2.0.14\")\n#pragma message(\"SDL_UnlockSensors is not supported before SDL 2.0.14\")\n#endif\n\nstatic void SDL_LockSensors(void)\n{\n        // do nothing\n}\n\nstatic void SDL_UnlockSensors(void)\n{\n        // do nothing\n}\n\n#endif\n```"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.5595703125,
          "content": "# SDL2 binding for Go  [![Build Status](https://github.com/veandco/go-sdl2/actions/workflows/test-build.yml/badge.svg)](https://github.com/veandco/go-sdl2/actions/workflows/test-build.yml) [![Go Report Card](https://goreportcard.com/badge/github.com/veandco/go-sdl2)](https://goreportcard.com/report/github.com/veandco/go-sdl2) [![Reviewed by Hound](https://img.shields.io/badge/Reviewed_by-Hound-8E64B0.svg)](https://houndci.com) [![Financial Contributors on Open Collective](https://opencollective.com/veandco/all/badge.svg?label=financial+contributors)](https://opencollective.com/veandco)\n\n`go-sdl2` is SDL2 wrapped for Go users. It enables interoperability between Go and the SDL2 library which is written in C. That means the original SDL2 installation is required for this to work. Note that the first build may take several minutes on machines that are not powerful such as Raspberry Pi.\n\nNOTE: For the latest versions of SDL2, please use the `master` branch!\n\n# Table of Contents\n* [Documentation](#documentation)\n* [Examples](#examples)\n* [Requirements](#requirements)\n* [Installation](#installation)\n* [Cross-compiling](#cross-compiling)\n* [FAQ](#faq)\n* [License](#license)\n\n\n# Documentation\n* [GoDoc documentation for go-sdl2](https://godoc.org/github.com/veandco/go-sdl2)\n* [Original SDL2 wiki](https://wiki.libsdl.org/SDL2)\n\n# Getting Started\n\nIf you haven't created a Go module for your program, you can do it by making a directory called, for example, `app` and running the following command inside it:\n```\ngo mod init app\n```\n\nAfter that you can start writing code that uses `go-sdl2`, for example, like the following:\n```go\n// main.go\npackage main\n\nimport (\n\t\"github.com/veandco/go-sdl2/sdl\"\n)\n\nfunc main() {\n\tsdl.Init(sdl.INIT_EVERYTHING)\n}\n```\n\nThen to tell Go to fetch dependencies, you can run:\n```\ngo mod tidy\n```\n\nand then the program can be built using:\n```\ngo build\n```\n\nAfter that, you can execute your program:\n\n```\n./app\n```\n\n# Requirements\n* [Go v1.13+](https://go.dev/dl/)\n* [SDL2](https://github.com/libsdl-org/SDL/releases)\n* [SDL2_image (optional)](https://github.com/libsdl-org/SDL_image/releases)\n* [SDL2_mixer (optional)](https://github.com/libsdl-org/SDL_mixer/releases)\n* [SDL2_ttf (optional)](https://github.com/libsdl-org/SDL_ttf/releases)\n* [SDL2_gfx (optional)](http://www.ferzkopp.net/wordpress/2016/01/02/sdl_gfx-sdl2_gfx/)\n\nOn __Ubuntu 22.04 and above__, type:\\\n`apt install libsdl2{,-image,-mixer,-ttf,-gfx}-dev`\n\nOn __Fedora 36 and above__, type:\\\n`dnf install SDL2{,_image,_mixer,_ttf,_gfx}-devel`\n\nOn __Arch Linux__, type:\\\n`pacman -S sdl2{,_image,_mixer,_ttf,_gfx}`\n\nOn __Gentoo__, type:\\\n`emerge -av libsdl2 sdl2-{image,mixer,ttf,gfx}`\n\nOn __macOS__, install SDL2 via [Homebrew](http://brew.sh) like so:\\\n`brew install sdl2{,_image,_mixer,_ttf,_gfx} pkg-config`\n\nOn __Windows__,\n1. Install mingw-w64 from [Mingw-builds](https://github.com/niXman/mingw-builds-binaries/releases). A 7z archive extractor software might be needed which can be downloaded [here](https://www.7-zip.org/download.html). In this example, we extract the content, which is `mingw64`, into `C:\\`.\n2. Download and install `SDL2-devel-[version]-mingw.zip` files from https://github.com/libsdl-org/SDL/releases.\n    * Extract the SDL2 folder from the archive using a tool like [7zip](http://7-zip.org)\n    * Inside the extracted SDL2 folder, copy the `i686-w64-mingw32` and/or `x86_64-w64-mingw32` into mingw64 folder e.g. `C:\\mingw64`\n3. Setup `Path` environment variable\n    * Put mingw-w64 binaries location into system `Path` environment variable (e.g. `C:\\mingw64\\bin`)\n4. Close and open terminal again so the new `Path` environment variable takes effect. Now we should be able to run `go build` inside the project directory.\n5. Download and install SDL2 runtime libraries from https://github.com/libsdl-org/SDL/releases. Extract and copy the `.dll` file into the project directory. After that, the program should become runnable.\n6. (Optional) You can repeat __Step 2__ for [SDL_image](https://github.com/libsdl-org/SDL_image/releases), [SDL_mixer](https://github.com/libsdl-org/SDL_mixer/releases), [SDL_ttf](https://github.com/libsdl-org/SDL_ttf/releases)\n\n\n# Installation\nTo get the bindings, type:\\\n`go get -v github.com/veandco/go-sdl2/sdl`\\\n`go get -v github.com/veandco/go-sdl2/img`\\\n`go get -v github.com/veandco/go-sdl2/mix`\\\n`go get -v github.com/veandco/go-sdl2/ttf`\\\n`go get -v github.com/veandco/go-sdl2/gfx`\n\nor type this if you use Bash terminal:\\\n`go get -v github.com/veandco/go-sdl2/{sdl,img,mix,ttf}`\n\nDue to `go-sdl2` being under active development, a lot of breaking changes are going to happen during v0.x. With [versioning system](https://github.com/golang/proposal/blob/master/design/24301-versioned-go.md) coming to Go soon, we'll make use of semantic versioning to ensure stability in the future.\n\n# Static compilation\n\nSince v0.3.0, it is possible to build statically against included libraries in `.go-sdl2-libs`. To build statically, run:\n\n`CGO_ENABLED=1 CC=gcc GOOS=linux GOARCH=amd64 go build -tags static -ldflags \"-s -w\"`\n\nYou can also cross-compile to another OS. For example, to Windows:\n\n`CGO_ENABLED=1 CC=x86_64-w64-mingw32-gcc GOOS=windows GOARCH=amd64 go build -tags static -ldflags \"-s -w\"`\n\nOn Windows, if you would like to hide the Command Prompt window when running the statically-compiled program, you could append `-H windowsgui` to the `-ldflags` value.\n\nFor the list of OS and architecture, you can see inside the [.go-sdl2-libs](https://github.com/veandco/go-sdl2/tree/master/.go-sdl2-libs) directory.\n\nNOTE: If you're using the new Go Module system, you will need to refer to the master branch for now by running:\n\n`go get -v github.com/veandco/go-sdl2/sdl@master`\n\nBefore building the program.\n\n# Cross-compiling\n### Linux to Windows\n1. Install MinGW toolchain.\n   * On **Arch Linux**, it's simply `pacman -S mingw-w64`.\n2. Download the SDL2 development package for MinGW [here](http://libsdl.org/download-2.0.php) (and the others like *SDL_image*, *SDL_mixer*, etc.. [here](https://www.libsdl.org/projects/) if you use them).\n3. Extract the SDL2 development package and copy the `x86_64-w64-mingw32` folder inside recursively to the system's MinGW `x86_64-w64-mingw32` folder. You may also do the same for the `i686-w64-mingw32` folder.\n   * On **Arch Linux**, it's `cp -r x86_64-w64-mingw32 /usr`.\n4. Now you can start cross-compiling your Go program by running `env CGO_ENABLED=\"1\" CC=\"/usr/bin/x86_64-w64-mingw32-gcc\" GOOS=\"windows\" CGO_LDFLAGS=\"-lmingw32 -lSDL2\" CGO_CFLAGS=\"-D_REENTRANT\" go build -x main.go`. You can change some of the parameters if you'd like to. In this example, it should produce a `main.exe` executable file.\n5. Before running the program, you need to put `SDL2.dll` from the [SDL2 runtime package](http://libsdl.org/download-2.0.php) (For others like *SDL_image*, *SDL_mixer*, etc.., look for them [here](https://www.libsdl.org/projects/)) for Windows in the same folder as your executable.\n6. Now you should be able to run the program using Wine or Windows!\n\n### macOS to Windows\n1. Install [Homebrew](https://brew.sh)\n2. Install MinGW through Homebrew via `brew install mingw-w64`\n3. Download the SDL2 development package for MinGW [here](http://libsdl.org/download-2.0.php) (and the others like *SDL_image*, *SDL_mixer*, etc.. [here](https://www.libsdl.org/projects/) if you use them).\n4. Extract the SDL2 development package and copy the `x86_64-w64-mingw` folder inside recursively to the system's MinGW `x86_64-w64-mingw32 folder`. You may also do the same for the `i686-w64-mingw32` folder. The path to MinGW may be slightly different but the command should look something like `cp -r x86_64-w64-mingw32 /usr/local/Cellar/mingw-w64/5.0.3/toolchain-x86_64`.\n5. Now you can start cross-compiling your Go program by running `env CGO_ENABLED=1 CC=x86_64-w64-mingw32-gcc GOOS=windows CGO_LDFLAGS=\"-L/usr/local/Cellar/mingw-w64/5.0.3/toolchain-x86_64/x86_64-w64-mingw32/lib -lSDL2\" CGO_CFLAGS=\"-I/usr/local/Cellar/mingw-w64/5.0.3/toolchain-x86_64/x86_64-w64-mingw32/include -D_REENTRANT\" go build -x main.go`. You can change some of the parameters if you'd like to. In this example, it should produce a `main.exe` executable file.\n6. Before running the program, you need to put `SDL2.dll` from the [SDL2 runtime package](http://libsdl.org/download-2.0.php) (For others like *SDL_image*, *SDL_mixer*, etc.., look for them [here](https://www.libsdl.org/projects/)) for Windows in the same folder as your executable.\n7. Now you should be able to run the program using Wine or Windows!\n\n### Linux to macOS\n1. Install macOS toolchain via [osxcross](https://github.com/tpoechtrager/osxcross)\n2. Run the following build command (replace the values in parentheses):\n```\nCGO_ENABLED=1 CC=[path-to-osxcross]/target/bin/[arch]-apple-darwin[version]-clang GOOS=darwin GOARCH=[arch] go build -tags static -ldflags \"-s -w\" -a\n```\n\n# Examples\n\nNOTE: The following example is for the `master` branch. Please check the [README](https://github.com/veandco/go-sdl2/tree/v0.4.x?tab=readme-ov-file#examples) of `v0.4.x` for the stable version.\n\n```go\npackage main\n\nimport \"github.com/veandco/go-sdl2/sdl\"\n\nfunc main() {\n\tif err := sdl.Init(sdl.INIT_EVERYTHING); err != nil {\n\t\tpanic(err)\n\t}\n\tdefer sdl.Quit()\n\n\twindow, err := sdl.CreateWindow(\"test\", sdl.WINDOWPOS_UNDEFINED, sdl.WINDOWPOS_UNDEFINED, 800, 600, sdl.WINDOW_SHOWN)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer window.Destroy()\n\n\tsurface, err := window.GetSurface()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tsurface.FillRect(nil, 0)\n\n\trect := sdl.Rect{0, 0, 200, 200}\n\tcolour := sdl.Color{R: 255, G: 0, B: 255, A: 255} // purple\n\tpixel := sdl.MapRGBA(surface.Format, colour.R, colour.G, colour.B, colour.A)\n\tsurface.FillRect(&rect, pixel)\n\twindow.UpdateSurface()\n\n\trunning := true\n\tfor running {\n\t\tfor event := sdl.PollEvent(); event != nil; event = sdl.PollEvent() {\n\t\t\tswitch event.(type) {\n\t\t\tcase sdl.QuitEvent: // NOTE: Please use `*sdl.QuitEvent` for `v0.4.x` (current version).\n\t\t\t\tprintln(\"Quit\")\n\t\t\t\trunning = false\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n        sdl.Delay(33)\n\t}\n}\n```\n\nThere are two ways a game might be running: one that updates on user input using `sdl.WaitEvent()` and one that updates regardless of user input using `sdl.PollEvent()`. You can check the examples of those two loops [here](https://github.com/veandco/go-sdl2-examples/tree/master/examples/gameloop).\n\nFor more runnable examples, see https://github.com/veandco/go-sdl2-examples. You can run any of the `.go` files with `go run`.\n\n# FAQ\n__Why does the program not run on Windows?__\nTry putting the [runtime libraries](http://libsdl.org/download-2.0.php) (e.g. `SDL2.dll` and friends) in the same folder as your program.\n\n__Why does my program crash randomly or hang?__\nPutting `runtime.LockOSThread()` at the start of your main() usually solves the problem (see [SDL2 FAQ](https://wiki.libsdl.org/FAQDevelopment) about multi-threading).\n\nUPDATE: Recent update added a call queue system where you can put thread-sensitive code and have it called synchronously on the same OS thread. See the `render_queue` or `render_goroutines` examples from https://github.com/veandco/go-sdl2-examples to see how it works.\n\n__Why can't SDL_mixer seem to play MP3 audio file?__\nYour installed SDL_mixer probably doesn't support MP3 file.\n\nOn __macOS__, this is easy to correct. First remove the faulty mixer: `brew remove sdl2_mixer`, then reinstall it with the MP3 option: `brew install sdl2_mixer --with-flac --with-fluid-synth --with-libmikmod --with-libmodplug --with-smpeg2`. If necessary, check which options you can enable with `brew info sdl2_mixer`. You could also try installing sdl2\\_mixer with mpg123 by running `brew install sdl2_mixer --with-mpg123`.\n\nOn __Other Operating Systems__, you will need to compile smpeg and SDL_mixer from source with the MP3 option enabled. You can find smpeg in the `external` directory of SDL_mixer. Refer to issue [#148](https://github.com/veandco/go-sdl2/issues/148) for instructions.\n\n_Note that there seems to be a problem with SDL_mixer 2.0.2 so you can also try to revert back to 2.0.1 and see if it solves your problem_\n\n__Does go-sdl2 support compiling on mobile platforms like Android and iOS?__\nFor Android, see https://github.com/veandco/go-sdl2-examples/tree/master/examples/android.\n\nThere is currently no support for iOS yet.\n\n__Why does my window not immediately render after creation?__\nIt appears the rendering subsystem needs some time to be able to present the drawn pixels. This can be workaround by adding delay using `sdl.Delay()` or put the rendering code inside a draw loop.\n\n## Contributors\n\n### Code Contributors\n\nThis project exists thanks to all the people who contribute. [[Contribute](CONTRIBUTING.md)].\n<a href=\"https://github.com/veandco/go-sdl2/graphs/contributors\"><img src=\"https://opencollective.com/veandco/contributors.svg?width=890&button=false\" /></a>\n\n### Financial Contributors\n\nBecome a financial contributor and help us sustain our community. [[Contribute](https://opencollective.com/veandco/contribute)]\n\n#### Individuals\n\n<a href=\"https://opencollective.com/veandco\"><img src=\"https://opencollective.com/veandco/individuals.svg?width=890\"></a>\n\n#### Organizations\n\nSupport this project with your organization. Your logo will show up here with a link to your website. [[Contribute](https://opencollective.com/veandco/contribute)]\n\n<a href=\"https://opencollective.com/veandco/organization/0/website\"><img src=\"https://opencollective.com/veandco/organization/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/veandco/organization/1/website\"><img src=\"https://opencollective.com/veandco/organization/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/veandco/organization/2/website\"><img src=\"https://opencollective.com/veandco/organization/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/veandco/organization/3/website\"><img src=\"https://opencollective.com/veandco/organization/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/veandco/organization/4/website\"><img src=\"https://opencollective.com/veandco/organization/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/veandco/organization/5/website\"><img src=\"https://opencollective.com/veandco/organization/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/veandco/organization/6/website\"><img src=\"https://opencollective.com/veandco/organization/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/veandco/organization/7/website\"><img src=\"https://opencollective.com/veandco/organization/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/veandco/organization/8/website\"><img src=\"https://opencollective.com/veandco/organization/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/veandco/organization/9/website\"><img src=\"https://opencollective.com/veandco/organization/9/avatar.svg\"></a>\n\n# License\nGo-SDL2 is BSD 3-clause licensed.\n"
        },
        {
          "name": "_libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gfx",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.0419921875,
          "content": "module github.com/veandco/go-sdl2\n\ngo 1.15\n"
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "make.bat",
          "type": "blob",
          "size": 0.7109375,
          "content": "@ECHO OFF\r\nSETLOCAL\r\n\r\nREM Directories\r\nSET SRCDIR=%CD%\r\n\r\nREM @SET ALLDIRS!=\tfind ${SRCDIR} -type d -not -path \"./.hg*\"\r\n\r\nREM Packages\r\nSET ROOTPKG=github.com/veandco/go-sdl2\r\nSET PACKAGES=sdl img mix ttf\r\n\r\nSET GO=go\r\n\r\n@IF \"%~1\" == \"\" GOTO :all\r\n@GOTO :%~1\r\n\r\n:all\r\nCALL :packages\r\nGOTO :eof\r\n\r\n:test\r\nCALL :packages\r\nFOR %%p IN (%PACKAGES%) DO (\r\n\tECHO Testing %ROOTPKG%/%%p...\r\n\t%GO% test -v %ROOTPKG%/%%p\r\n)\r\nGOTO :eof\r\n\r\n:bench\r\nCALL :packages\r\nFOR %%p IN (%PACKAGES%) DO (\r\n\tECHO Benchmarking %ROOTPKG%/%%p...\r\n\t%GO% test -bench=. -cpu 1,2,3,4 %ROOTPKG%/%%p\r\n)\r\nGOTO :eof\r\n\r\n:packages\r\nFOR %%p IN (%PACKAGES%) DO (\r\n\tECHO Building package %ROOTPKG%/%%p...\r\n\t%GO% build %ROOTPKG%/%%p\r\n)\r\nGOTO :eof\r\n\r\nENDLOCAL\r\nECHO ON\r\n"
        },
        {
          "name": "mix",
          "type": "tree",
          "content": null
        },
        {
          "name": "raster",
          "type": "tree",
          "content": null
        },
        {
          "name": "sdl",
          "type": "tree",
          "content": null
        },
        {
          "name": "ttf",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}