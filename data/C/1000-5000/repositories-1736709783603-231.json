{
  "metadata": {
    "timestamp": 1736709783603,
    "page": 231,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Proxmark/proxmark3",
      "stars": 3235,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.1328125,
          "content": "# .gitattributes\n# prevent binary files from CRLF handling, diff and merge:\nfpga/fpga.bit -crlf -diff\n*.bin -crlf -diff\n*.z -crlf -diff\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5400390625,
          "content": "# .gitignore\n# don't push these files to the repository\n\n.history\n*.log\n*.eml\n*.o\n*.a\n*.d\n*.elf\n*.s19\n*.map\n*.bin\n!client/hardnested/*.bin\n!client/sc_upgrade_firmware/*.bin\n*.dll\n*.moc.cpp\n*.z\n!client/hardnested/tables/*.z\nusb_cmd.lua\nversion.c\narmsrc/fpga_version_info.c\nclient/ui/ui_overlays.h\n*.Td\n.DS_Store\n\n*.exe\nhardnested_stats.txt\nproxmark3\nflasher\nlua\nluac\nfpga_compress\nmfkey32\nmfkey64\n\nfpga/*\n!fpga/tests\n!fpga/fpga_lf.bit\n!fpga/fpga_hf.bit\n!fpga/*.v\n!fpga/Makefile\n!fpga/fpga.ucf\n!fpga/xst_lf.scr\n!fpga/xst_hf.scr\n!fpga/go.bat\n!fpga/sim.tcl\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 19.73046875,
          "content": "# Change Log\nAll notable changes to this project will be documented in this file.\nThis project uses the changelog in accordance with [keepchangelog](http://keepachangelog.com/). Please use this to write notable changes, which is not the same as git commit log...\n\n## [unreleased][unreleased]\n\n### Changed\n- Changed hf mfp security. Now it works in all the modes. (drHatson)\n- `hf fido` - show/check DER certificate and signatures (Merlok)\n- Changed `lf hitag reader 0x ... <firstPage> <tagmode>` - to select first page to read and tagmode (0=STANDARD, 1=ADVANCED, 2=FAST_ADVANCED)\n- Accept hitagS con0 tags with memory bits set to 11 and handle like 2048 tag\n\n### Fixed\n- AC-Mode decoding for HitagS\n- Wrong UID at HitagS simulation\n- `hf 15 sim` now works as expected (piwi)\n- `hf mf chk t` save to emulator memory now works as expected (mwalker)\n- Fix `hf mf sim` - wrong access rights to write key B in trailer (@McEloff)\n- allow files > 512Bytes in 'hf iclass eload' (@Sherhannn79)\n- `hf mf nested` now works with fixed nonce tags too (uzlonewolf, piwi)\n \n### Added\n- Added to `hf 14a apdu` print apdu and compose apdu (@merlokk)\n- Added `hf 15 csetuid` - set UID on ISO-15693 Magic tags (t0m4)\n- Added `lf config s xxxx` option to allow skipping x samples before capture (marshmellow)\n- Added `lf em 4x05protect` to support changing protection blocks on em4x05 chips (marshmellow)\n- Support Standard Communication Mode in HITAG S\n- Added `hf emv scan` - commands for scan EMV card and dump data to json file (Merlok)\n- `hf mfp` group of commands (Merlok)\n- Added `hf fido` - FIDO U2F authenticator commands https://fidoalliance.org/ (Merlok)\n- Added `lf hitag reader 03` - read block (instead of pages) \n- Added `lf hitag reader 04` - read block (instead of pages) \n- Added `hf fido` `assert` and `make` commands from fido2 protocol (authenticatorMakeCredential and authenticatorGetAssertion) (Merlok)\n- Added `lf paradox clone` to clone a Paradox card\n- Added `emv` commands working for both contactless and smart cards (Merlok)\n- Added `hf 15 snoop` (piwi)\n- Added support for standard USB Smartcard Readers (piwi)\n- Added `hf plot` (piwi)\n- Added `hf mfp mad` `hf mf mad` parsing MAD1 and MAD2 (Merlok)\n- Added `hf mfp ndef` `hf mf ndef` parsing NDEF records (Merlok)\n- Added Mifare Mini, Mifare 2K and 4K support to `hf mf sim` (piwi)\n- Added Legic detection to `hf search` (dnet)\n- Added Home (Pos1) and End key bindings to the plot GUI (based on @mcd1992)\n- Added downlink reference mode option r <mode> [ 0 - (or missing) default/fixed bit, 1 - long leading, 2 - leading 0 and 3 - 1 of 4 ] to `lf t55xx detect`, `lf t55xx read`, `lf t55xx write`, and `lf t55xx bruteforce`\n- Added special option `r 4` to bruteforce, to try all downlink modes (0,1,2 and 3) for each password\n- `hf mfu info` now checks the NXP Originality Signature if availabe (piwi)\n- Added `hf mf personalize` to personalize the UID option of Mifare Classic EV1 cards (piwi)\n\n\n## [v3.1.0][2018-10-10]\n\n### Changed\n- Adjusted `lf cmdread` to respond to client when complete and the client will then automatically call `data samples`\n- Improved backdoor detection misbehaving magic s50/1k tag (Fl0-0)\n- Deleted wipe functionality from `hf mf csetuid` (Merlok)\n- Changed `hf mf nested` logic (Merlok)\n- Added `hf mf nested` mode: autosearch keys for attack (from well known keys) (Merlok)\n- `hf mf nested` Check keys after they have found (Merlok)\n- `hf mf chk` Move main cycle to arm (Merlok)\n- Changed proxmark command line parameter `flush` to `-f` or `-flush` (Merlok)\n- Changed `hf 14a reader` to just request-anticolission-select sequence (Merlok)\n- Changed `hf 14a raw` - works with LED's and some exchange logic (Merlok)\n- Changed TLV parser messages to more convenient (Merlok)\n- Rewritten Legic Prime reader (`hf legic reader`, `write` and `fill`) - it is using xcorrelation now (AntiCat)\n- `hf 14a` commands works via argtable3 commandline parsing library (Merlok)\n- HID LF operations on firmware updated for complete native support of long (>37 bit) HID tags (grauerfuchs)\n- Changed Legic Prime tag simulator (`hf legic sim`) to run from 212 kHz SSP clock for better reliability (AntiCat)\n\n### Fixed\n- Changed start sequence in Qt mode (fix: short commands hangs main Qt thread) (Merlok)\n- Changed driver file proxmark3.inf to support both old and new Product/Vendor IDs (piwi)\n- Changed all command line parsers in `hf emv` commands to argtable (Merlok)\n- Implemented AppNap API, fixing #283 and #627 OSX USB comm issues (AntiCat)\n\n### Added\n- Added `sc` smartcard (contact card) commands - reader, info, raw, upgrade, setclock, list (hardware version RDV4.0 only) must turn option on in makefile options (Willok, Iceman, marshmellow)\n- Added a bitbang mode to `lf cmdread` if delay is 0 the cmd bits turn off and on the antenna with 0 and 1 respectively (marshmellow)\n- Added PAC/Stanley detection to lf search (marshmellow)\n- Added lf pac demod and lf pac read - extracts the raw blocks from a PAC/Stanley tag (marshmellow)\n- Added hf mf c* commands compatibility for 4k and gen1b backdoor (Fl0-0)\n- Added backdoor detection for gen1b magic s70/4k tag (Fl0-0)\n- Added data fsktonrz, a fsk cleaning/demodulating routine for weak fsk signal. Note: follow this up with a `data rawdemod nr` to finish demoding your signal. (marshmellow)\n- Added lf em 410xbrute, LF EM410x reader bruteforce attack by simulating UIDs from a file (Fl0-0)\n- Added `hf mf cwipe` command. It wipes \"magic Chinese\" card. For 1a generation it uses card's \"wipe\" command. For gen1a and gen1b it uses a write command. (Merlok)\n- Added to `hf mf nested` source key check before attack (Merlok)\n- Added to `hf mf nested` after attack it checks all found keys on non-open sectors (Merlok)\n- `hf mf chk` Added settings to set iso14443a operations timeout. default timeout set to 500us (Merlok)\n- Added to `hf mf nested` parameters `s` and `ss` for checking slow cards (Merlok)\n- Added to proxmark command line parameters `w` - wait 20s for serial port (Merlok)\n- Added to proxmark command line parameters `c` and `l` - execute command and lua script from command line (Merlok)\n- Added to proxmark ability to execute commands from stdin (pipe) (Merlok)\n- Added `hf 14a info` and moved there functionality from `hf 14a reader` (Merlok)\n- Added to `hf 14a info` detection of weak prng from Iceman1001 fork (Merlok)\n- Added to `hf 14a apdu` - exchange apdu via iso1443-4 (Merlok)\n- Added to `hf 14a apdu` - apdu and tlv results parser (Merlok)\n- Added `hf emv` group of commands (Merlok)\n- Added `hf emv search` `hf emv pse` - commands for selection of EMV application (Merlok)\n- Added `hf emv select` - command for select EMV application (Merlok)\n- Added `hf emv exec` - command for execute EMV transaction (Merlok)\n- Added to `hf emv exec` MSD path for VISA and Mastercard and some other compatible EMV cards (Merlok)\n- Added to `hf emv exec` SDA, DDA, fast DDA, CDA calculations for VISA and Mastercard and some other compatible EMV cards (Merlok)\n- Added `hf emv test` - crypto tests for DES, AES, SHA, RSA, SDA, DDA, CDA and some other crypto functions (Merlok)\n- Added `hf list mf` - deciphers crypto1 stream and works with first authentication and weak nested authentications (Merlok)\n- Added to `hf emv` commands: `gpo`, `readrec`, `genac`, `challenge`, `intauth` - commands working with EMV cards (Merlok)\n- Added `lf hid encode` and `lf hid decode` commands to translate printed HID card data to and from the packed data transmitted by a prox tag (grauerfuchs)\n- Added `lf hid write` command, which operates as a macro for encode followed by clone operations (grauerfuchs)\n\n## [3.0.1][2017-06-08]\n\n### Fixed\n- Compiles on OS X\n- Compiles with gcc 4.9\n- Compiles for non-Intel CPUs\n\n\n## [3.0.0][2017-06-05]\n\n### Added\n- Added lf hitag write 24, the command writes a block to hitag2 tags in crypto mode (henjo)\n\n### Added\n- Added hf mf hardnested, an attack working for hardened Mifare cards (EV1, Mifare Plus SL1) where hf mf nested fails (piwi)\n- Added experimental testmode write option for t55xx (danger) (marshmellow)\n- Added t55xx p1detect to `lf search` chip detections (marshmellow)\n- Added lf t55xx p1detect, detect page 1 of a t55xx tag based on E015 mfg code (marshmellow)\n- Added lf noralsy demod, read, clone, sim commands (iceman)\n- Added lf jablotron demod, read, clone, sim commands (iceman)\n- Added lf nexwatch read   - reads a nexwatch tag from the antenna\n- Added lf paradox read    - reads a paradox tag from the antenna\n- Added lf fdx sim (iceman)\n- Added lf fdx clone       - clones an fdx-b animal tag to t55x7 or q5 (iceman)\n- Added lf fdx read        - reads a fdx-b tag from the antenna (iceman)\n- Added lf gproxii read    - reads a gproxii tag from the antenna (marshmellow)\n- Added lf indala read     - reads an indala tag from the antenna (marshmellow)\n- Added lf visa2000 demod, read, clone, sim commands (iceman)\n- Added markers in the graph around found Sequence Terminator after askmandemod.\n- Added data mtrim <start> <stop> command to trim out samples between start and stop\n- Added data setgraphmarkers <orange> <blue> command to set two extra markers on the graph (marshmellow)\n- Added EM4x05/EM4x69 chip detection to lf search (marshmellow) \n- Added lf em 4x05dump command to read and output all the blocks of the chip (marshmellow)\n- Added lf em 4x05info command to read and display information about the chip (marshmellow)\n- Added lf cotag read, and added it to lf search (iceman)\n- Added hitag2 read UID only and added that to lf search (marshmellow)\n- Added lf pyramid commands (iceman)\n- Added lf presco commands - some bits not fully understood... (iceman)\n- Added experimental HitagS support (Oguzhan Cicek, Hendrik Schwartke, Ralf Spenneberg)\n  see https://media.ccc.de/v/32c3-7166-sicherheit_von_125khz_transpondern_am_beispiel_hitag_s\n  English video available\n- Added a LF ASK Sequence Terminator detection option to the standard ask demod - and applied it to `lf search u`, `lf t55xx detect`, and `data rawdemod am s` (marshmellow)\n- `lf t55xx bruteforce <start password> <end password> [i <*.dic>]` - Simple bruteforce attack to find password - (iceman and others)\n- `lf viking clone`- clone viking tag to t55x7 or Q5 from 4byte hex ID input \n- `lf viking sim`  - sim full viking tag from 4byte hex ID input\n- `lf viking read` - read viking tag and output ID\n- `lf t55xx wipe`  - sets t55xx back to factory defaults\n- Added viking demod to `lf search` (marshmellow)\n- `lf viking demod` demod viking id tag from graphbuffer (marshmellow)\n- `lf t55xx resetread` added reset then read command - should allow determining start of stream transmissions (marshmellow)\n- `lf t55xx wakeup` added wake with password (AOR) to allow lf search or standard lf read after (iceman, marshmellow)\n- `hf iclass managekeys` to save, load and manage iclass keys.  (adjusted most commands to accept a loaded key in memory) (marshmellow)\n- `hf iclass readblk` to select, authenticate, and read 1 block from an iclass card (marshmellow)\n- `hf iclass writeblk` to select, authenticate, and write 1 block to an iclass card (or picopass) (marshmellow + others)\n- `hf iclass clone` to take a saved dump file and clone selected blocks to a new tag (marshmellow + others)\n- `hf iclass calcnewkey` - to calculate the div_key change to change a key - (experimental) (marshmellow + others)\n- `hf iclass encryptblk` - to encrypt a data block hex to prep for writing that block (marshmellow)\n- ISO14443a stand-alone operation with ARM CFLAG=\"WITH_ISO14443a_StandAlone\". This code can read & emulate two banks of 14a tag UIDs and write to \"magic\" cards  (Craig Young) \n- AWID26 command context added as 'lf awid' containing realtime demodulation as well as cloning/simulation based on tag numbers (Craig Young)\n- Added 'hw status'. This command makes the ARM print out some runtime information. (holiman) \n- Added 'hw ping'. This command just sends a usb packets and checks if the pm3 is responsive. Can be used to abort certain operations which supports abort over usb. (holiman)\n- Added `data hex2bin` and `data bin2hex` for command line conversion between binary and hexadecimal (holiman)\n- Added 'hf snoop'. This command take digitalized signal from FPGA and put in BigBuffer. (pwpiwi + enio)\n- Added Topaz (NFC type 1) protocol support ('hf topaz reader', 'hf list topaz', 'hf 14a raw -T', 'hf topaz snoop'). (piwi)\n- Added option c to 'hf list' (mark CRC bytes) (piwi)\n\n### Changed\n- Adjusted the lf demods to auto align and set the grid for the graph plot. \n- `lf snoop` now automatically gets samples from the device\n- `lf read` now accepts [#samples] as arg. && now automatically gets samples from the device\n- adjusted lf t5 chip timings to use WaitUS. and adjusted the readblock timings\n    appears to have more consistent results with more antennas.\n- `lf t5 wakeup` has been adjusted to not need the p in front of the pwd arg.\n- `data psknexwatchdemod` has been moved to `lf nexwatch demod` (reads from graphbuffer)\n- `data fskparadoxdemod` has been moved to `lf paradox demod` (reads from graphbuffer)\n- `data fdxdemod` has been moved to `lf fdx demod` (reads from graphbuffer)\n- `data askgproxiidemod has been moved to `lf gproxii demod` (reads from graphbuffer)\n- `lf indalaclone` has been moved to `lf indala clone`\n- `lf indalademod` has been moved to `lf indala altdemod` (reads from graphbuffer)\n- `data pskindalademod` has been moved to `lf indala demod` (reads from graphbuffer)\n- `data askvikingdemod` has been moved to `lf viking demod` (reads from graphbuffer)\n- `data fskpyramiddemod` has been moved to `lf pyramid demod` (reads from graphbuffer)\n- `data fskiodemod` has been moved to `lf io demod` (reads from graphbuffer)\n- `lf io fskdemod` has been renamed to `lf io read` (reads from antenna)\n- `data fskawiddemod` has been moved to `lf awid demod` (reads from graphbuffer)\n- `lf awid fskdemod` has been renamed to `lf awid read` (reads from antenna)\n- `data fskhiddemod` has been moved to `lf hid demod` (reads from graphbuffer)\n- `lf hid demod` has been renamed to `lf hid read` (reads from antenna)\n- all em410x demod and print functions moved to cmdlfem4x.c\n- `data askem410xdemod` has been moved to `lf em 410xdemod` (reads from graphbuffer)\n- `lf em 410xdemod` has been renamed to `lf em 410xread` (reads from antenna)\n- hf mf dump - added retry loops to try each read attempt up to 3 times.  makes getting a complete dump easier with many antennas. \n- small changes to lf psk and fsk demods to improve results when the trace begins with noise or the chip isn't broadcasting yet (marshmellow)\n- NOTE CHANGED ALL `lf em4x em*` cmds to simpler `lf em ` - example: `lf em4x em410xdemod` is now `lf em 410xdemod`\n- Renamed and rebuilt `lf em readword` && readwordpwd to `lf em 4x05readword` - it now demods and outputs the read block (marshmellow/iceman)\n- Renamed and rebuilt `lf em writeword` && writewordpwd to `lf em 4x05writeword` - it now also reads validation output from the tag (marshmellow/iceman)\n- Fixed bug in lf sim and continuous demods not turning off antenna when finished\n- Fixed bug(s) in hf iclass write\n- Fixed bug in lf biphase sim - `lf simask b` (and any tagtype that relies on it - gproxii...) (marshmellow)\n- Fixed bug in lf viking clone/sim (iceman)\n- Fixed broken `data askedgedetect` (marshmellow)\n- Adjusted hf mf sim command (marshmellow)\n    added auto run mfkey32 to extract all keys \n    also added f parameter to allow attacking with UIDs from a file (implies x and i parameters)\n    also added e parameter to allow adding the extracted keys to emulator memory for the next simulation\n    added 10 byte uid option\n- Added `[l] <length>` option to data printdemodbuffer (marshmellow)\n- Adjusted lf awid clone to optionally clone to Q5 tags (marshmellow)\n- Adjusted lf t55xx detect to find Q5 tags (t5555) instead of just t55x7 (marshmellow)\n- Adjusted all lf NRZ demods - works more accurately and consistently (as long as you have strong signal) (marshmellow)\n- Adjusted lf pskindalademod to reduce false positive reads. (marshmellow)\n- Small adjustments to psk, nrz, and ask clock detect routines - more reliable. (marshmellow)\n- Adjusted lf em410x em410xsim to accept a clock argument (marshmellow)\n- Adjusted lf t55xx dump to allow overriding the safety check and warning text (marshmellow)\n- Adjusted lf t55xx write input variables (marshmellow)\n- Adjusted lf t55xx read with password safety check and warning text and adjusted the input variables (marshmellow & iceman)\n- Adjusted LF FSK demod to account for cross threshold fluctuations (898 count waves will adjust the 9 to 8 now...) more accurate. (marshmellow)\n- Adjusted timings for t55xx commands.  more reliable now. (marshmellow & iceman)\n- `lf cmdread` adjusted input methods and added help text (marshmellow & iceman)\n- changed `lf config t <threshold>` to be 0 - 128 and will trigger on + or - threshold value (marshmellow) \n- `hf iclass dump` cli options - can now dump AA1 and AA2 with different keys in one run (does not go to multiple pages for the larger tags yet) (marshmellow)\n- Revised workflow for StandAloneMode14a (Craig Young)\n- EPA functions (`hf epa`) now support both ISO 14443-A and 14443-B cards (frederikmoellers)\n- 'hw version' only talks to ARM at startup, after that the info is cached. (pwpiwi)\n- Added `r` option to iclass functions - allows key to be provided in raw block 3/4 format \n\n## [2.2.0][2015-07-12]\n\n### Changed\n- Added `hf 14b raw -s` option to auto select a 14b std tag before raw command \n- Changed `hf 14b write` to `hf 14b sriwrite` as it only applied to sri tags (marshmellow)\n- Added `hf 14b info` to `hf search` (marshmellow)\n- Added compression of fpga config and data, *BOOTROM REFLASH REQUIRED* (piwi)\n- Implemented better detection of mifare-tags that are not vulnerable to classic attacks (`hf mf mifare`, `hf mf nested`) (piwi)\n\n### Added\n- Add `hf 14b info` to find and print info about std 14b tags and sri tags (using 14b raw commands in the client)  (marshmellow)\n- Add PACE replay functionality (frederikmoellers)\n\n### Fixed \n- t55xx write timing (marshmellow)\n\n\n## [2.1.0][2015-06-23]\n\n### Changed\n- Added ultralight/ntag tag type detection to `hf 14a read` (marshmellow)\n- Improved ultralight dump command to auto detect tag type, take authentication, and dump full memory (or subset specified) of known tag types (iceman1001 / marshmellow)\n- Combined ultralight read/write commands and added authentication (iceman1001)\n- Improved LF manchester and biphase demodulation and ask clock detection especially for reads with heavy clipping. (marshmellow)\n- Iclass read, `hf iclass read` now also reads tag config and prints configuration. (holiman)\n- *bootrom* needs to be flashed, due to new address boundaries between os and fpga, after a size optimization (piwi)\n\n### Fixed\n- Fixed EM4x50 read/demod of the tags broadcasted memory blocks. 'lf em4x em4x50read' (not page read) (marshmellow)\n- Fixed issue #19, problems with LF T55xx commands (iceman1001, marshmellow)\n- Fixed various problems with iso14443b, issue #103 (piwi, marshmellow)\n\n### Added\n- Added `hf search` - currently tests for 14443a tags, iclass tags, and 15693 tags (marshmellow) \n- Added `hf mfu info` Ultralight/NTAG info command - reads tag configuration and info, allows authentication if needed (iceman1001, marshmellow)\n- Added Mifare Ultralight C and Ultralight EV1/NTAG authentication. (iceman1001)\n- Added changelog\n\n## [2.0.0] - 2015-03-25\n### Changed\n- LF sim operations now abort when new commands arrive over the USB - not required to push the device button anymore.\n\n### Fixed\n- Mifare simulation, `hf mf sim` (was broken a long time) (pwpiwi)\n- Major improvements in LF area and data operations. (marshmellow, iceman1001)\n- Issues regarding LF simulation (pwpiwi)\n\n### Added\n- iClass functionality: full simulation of iclass tags, so tags can be simulated with data (not only CSN). Not yet support for write/update, but readers don't seem to enforce update. (holiman).\n- iClass decryption. Proxmark can now decrypt data on an iclass tag, but requires you to have the HID decryption key locally on your computer, as this is not bundled with the sourcecode. \n"
        },
        {
          "name": "CI",
          "type": "tree",
          "content": null
        },
        {
          "name": "COMPILING.txt",
          "type": "blob",
          "size": 4.755859375,
          "content": "The project compiles on Linux, Mac OS X and Windows (MinGW/MSYS).\n\nit requires:\n- gcc >= 4.4\n- libpthread\n- GNU libreadline or BSD libedit (editline)\n- libusb\n- perl\n- an ARM cross-compiler to compile the firmware\n\nand optionally QT for the GUI\n\n\nTo compile, just run \"make\".\n\n===========\n= Windows =\n===========\nThe following is a complete list of packages required to setup the compile environment yourself. Alternatively you can download an archive of the full environment (see below).\n\n1 - Install QT SDK for Windows [1]\n\nIn the following instructions, we'll assume you installed it to C:\\QT\n\n2 - MSYS-1.0.11 [2]\n\nJust follow the installation procedure.\nWhen asked if you have MinGW installed and for its path, provide:\nC:/QT/mingw\n\n3 - readline-5.0-1-bin [5]\n\nFrom this archive, copy:\nbin/* to C:\\QT\\mingw\\bin\ninclude/* to C:\\QT\\mingw\\include\nlib/*.a to C:\\QT\\mingw\\lib\n\n4 - libusb-win32-device-bin-0.1.12.2 [6]\n\nBe careful here, it is *NOT* working with the filter version!\nLikewise copy:\ninclude/usb.h to C:\\QT\\mingw\\include\nlib/gcc/libusb.a to C:\\QT\\mingw\\lib\n\n\n5 - Install DevkitPro [5]\n\nYou'll need it to compile the firmware (ARM) side.\nYou only need devkitARM, nothing more (no extra lib or anything else)\nAssuming you installed it to C:\\devkitpro, make sure you set\nthe DEVKITARM environment variable to /c/devkitPro/devkitARM :\nexport DEVKITARM=/c/devkitPro/devkitARM\nAlso, add its bin to your PATH:\nexport PATH=$PATH:$DEVKITARM/bin\n\n6 - Install Strawberry Perl [6]\n\n7 - Setup a few variables\n\nIn your shell from MSYS, make sure you set QTDIR to your QT installation:\nexport QTDIR=/c/QT/qt\nAnd add its bin to your path as well:\nexport PATH=$PATH:$QTDIR/bin\n\nDownload links:\n\n[1] http://qt.nokia.com/downloads/sdk-windows-cpp\n[2] http://downloads.sourceforge.net/mingw/MSYS-1.0.11.exe\n[3] http://sourceforge.net/projects/gnuwin32/files/readline/5.0-1/readline-5.0-1-bin.zip/download\n[4] http://sourceforge.net/projects/libusb-win32/files/libusb-win32-releases/0.1.12.2/libusb-win32-device-bin-0.1.12.2.tar.gz/download\n[5] http://sourceforge.net/projects/devkitpro/files/Automated%20Installer/devkitProUpdater-1.5.0.exe/download\n[6] http://strawberry-perl.googlecode.com/files/strawberry-perl-5.10.1.1.msi\n\nRather than download and install every one of these packages, a new ProxSpace\nenvironment archive file will be made available for download on the project\npage at http://code.google.com/p/proxmark3/downloads/list\n\nDownload the ProxSpace environment archive and extract it to C:\\\n\n============\n= Mac OS X =\n============\n\nInstalling from HomeBrew tap\n---------------------------\nThis method is recommended and tested on macOS Sierra 10.12.3\n\n1. Install homebrew if you haven't yet already done so: http://brew.sh/\n\n2. Tap proxmark repo:\n    brew tap proxmark/proxmark3 \n\n3. Install Proxmark3:\n\nStable release\n    brew install proxmark3\n\nLatest non-stable from GitHub (use this if previous command fails)\n    brew install --HEAD proxmark3\n\nFor more information go to https://github.com/Proxmark/homebrew-proxmark3\n\n\nCompilling from source manually (Legacy)\n---------------------------\n\nTested on OSX 10.10 Yosemite\n\n1 - Install Xcode and Xcode Command Line Tools\n\n2 - Install Homebrew and dependencies\n    brew install libusb p7zip libusb-compat wget qt5 pkgconfig\n\n3 - Install DevKitARM for OSX\n    Option 1:\n        http://sourceforge.net/projects/devkitpro/files/devkitARM/devkitARM_r44/\n        Unpack devkitARM_r44-osx.tar.bz2 to proxmark3 directory.\n    Option 2:\n        brew tap nitsky/stm32\n        brew install arm-none-eabi-gcc\n\n4 - Edit proxmark3/client/Makefile adding path qt5\n\n    LDLIBS = -L/usr/local/opt/qt5/lib -L/opt/local/lib -L/usr/local/lib ../liblua/liblua.a -lreadline -lpthread -lm\n    CFLAGS = -std=c99 -I/usr/local/opt/qt5/include -I. -I../include -I../common -I../zlib -I/opt/local/include -I../liblua -Wall $(COMMON_FLAGS) -g -O4\n\n5 - Set Environment\n\n    export DEVKITPRO=$HOME/proxmark3/\n    export DEVKITARM=$DEVKITPRO/devkitARM\n    export PATH=${PATH}:${DEVKITARM}/bin\n\n\n============\n=   Linux  =\n============\n\n1 - Download \n\nA precompiled DevKitARM cross compiler tool chain package can be found at \nhttp://sourceforge.net/projects/devkitpro/files/devkitARM\nSelect the one you need (32bit or 64bit) and unpack to a convinient place, eg \n$HOME/proxmark3/. It will create a devkitARM/ subdirectory.\n\nYou will also need a general compiling environment on your computer for\nthe client and the libusb headers. In most distributions you will get all you \nneed with the lsb-package (Linux Standard Base). In debian/ubuntu you simply \ncall `aptitude install lsb libusb-dev libreadline-dev libreadline6`. \n\nFor the graphical plot view, you might need the qtlibs (debian/ubuntu: \nlibqt4-dev), too.\n\n2 - Set Environment\n\nexport DEVKITPRO=$HOME/proxmark3/\nexport DEVKITARM=$DEVKITPRO/devkitARM\nexport PATH=${PATH}:${DEVKITARM}/bin\n\n"
        },
        {
          "name": "HACKING.txt",
          "type": "blob",
          "size": 7.806640625,
          "content": "\t\"Coding styles are like assholes, everyone has one and no one likes anyone elses.\"\n\t--Eric Warmenhoven\n\nThe Proxmark3 codebase is pretty messy and in the process of being cleaned up,\nso we don't have clear guidelines on how to place new code just yet. However,\nplease don't make things worse.\n\nHowever, we have established a set of coding style guidelines in order to\nclean up the code consistently and keep it consistent in the future. Use common\nsense and good taste. If breaking a rule leads to cleaner code, you can do so,\nbut laziness is not an excuse.\n\n=== INDENTATION ===\n\nUse tabs for indentation, but use spaces for alignment:\n\n\tif (foo(this, that, there)\n\t    && bar == baz)\n\t{\n\t\tdostuff();\n\t}\n\nNotice it's like this (T___ for tab, S for space, for a 4-char tab setting):\n\nT___if (foo(this, that, there)\nT___SSSS&& bar == baz)\n\nAnother example:\n\n#define THIS            0x10\n#define THAT_THING      0x20\n#define SOMETHING_ELSE  0x80\n\nThese should look good no matter what your editor's tab setting is, so go nuts\nand pick whatever you like best.\n\n=== WIDTH ===\n\nTry to keep lines to a reasonable length. 80 characters is a good mark; using an\neditor that shows a vertical line is a great idea. However, don't break a line\njust because you're slightly over, it's not worth it. No 200-character lines,\nthough.\n\n=== MACROS ===\n\n#defines, function-like or not, are all UPPERCASE unless you're emulating a\nwell-known function name.\n\n=== IDENTIFIERS ===\n\nFunctions, local variables, and arguments are all named using\nunderscores_as_spaces. Global variables are Evil and are prepended with g_ to\ndistinguish them. Avoid them.\n\nSingle-character variables are a bad idea. Exceptions: loop iterators and maybe\nsimple byte pointers (*p) in very obvious places. If you have more than one\nsuch pointer, use a real name. If you have more than a couple nested loops,\ncomplex logic, or indices that differ in interpretation or purpose, use real\nnames instead of i,j,k.\n\n=== DATA TYPES ===\n\nUse stdint.h types (uint32_t and friends) unless you have a reason not to. Don't\nuse microsoft-style DWORD and the like, we're getting rid of those. Avoid char\nfor buffers, uint8_t is more obvious when you're not working with strings. Use\n'const' where things are const. Try to use size_t for sizes.\n\nPointers are:\n\tvoid *ptr;\nnot:\n\tvoid* ptr;\notherwise you're tempted to write:\n\tvoid* in, out;\nand you'll fail.\n\n=== EXPRESSIONS ===\n\nIn general, use whitespace around binary operators - no unspaced blobs of an\nexpression. This rule may be broken if it makes things clearer. For example,\n\n\tif (5*a < b && some_bool_var)\n\nbut not\n\n\tif (5*a<b&&some_bool_var)\n\nFor equality with constants, use i == 0xF00, not 0xF00 == i. The compiler warns\nyou about = vs == anyway, and you shouldn't be screwing that one up by now\nanyway.\n\n=== IF / FOR / WHILE / etc. ===\n\nPut the opening brace on the same line, with a space before it. Exception: if\nthe if/for/while condition/whatever are split over several lines, it might be\nmore appealing to put the opening brace on its own line, so use your own\njudgement there:\n\n\tif (foo(this, that, there)\n\t    && bar == baz)\n\t{\n\t\tdostuff();\n\t}\n\nIf you do split the condition, put the binary operators that join the lines at\nthe beginning of the following lines (as above), not at the end of the prior\nlines.\n\nThere should be a space between the construct name (if/for/whatever) and the\nopening parenthesis, and there should be a space between the closing parenthesis\nand the opening brace.\n\nFor generic for() iterator variables, declare them in-line:\n\n\tfor (int i = 0; i < 10; i++) {\n\t\t...\n\t}\n\nNote the spaces after the semicolons.\n\nif/else should be laid out as follows:\n\n\tif (foo) {\n\t\t...\n\t} else if (bar) {\n\t\t...\n\t} else {\n\t\t...\n\t}\n\nor\n\n\tif (foo)\n\t\t...\n\telse if (bar)\n\t\t...\n\telse\n\t\t...\n\nDon't mix braces vs. no braces. If any of your bodies are > 1 line, put braces\naround them all.\n\n=== FUNCTIONS ===\n\nFunctions with no arguments are declared as f(void), not f(). Put the return\ntype on the same line. Use static for functions that aren't exported, and put\nexported functions in a header file (one header file per source file with\nexported functions usually, no huge headers with all functions). Put a space\nafter a comma in argument lists.\n\nvoid foo(int a_thing, int something_else)\n{\n\t...\n}\n\nvoid baz(void)\n{\n\tfoo(bluh, blah);\n}\n\nFunction names should be separated_with_underscores(), except for standard\nfunctions (memcpy, etc.). It may make sense to break this rule for very common,\ngeneric functions that look like library functions (e.g. dprintf()).\n\nDon't use single-character arguments. Exception: very short functions with one\nargument that's really obvious:\n\nstatic int ascii(char c)\n{\n\tif (c < 0x20 || c >= 0x7f)\n\t\treturn '.';\n\telse\n\t\treturn c;\n}\n\nvs.\n\nstatic void hexdump(void *buf, size_t len)\n{\n\t...\n}\n\nAs a general guideline, functions shouldn't usually be much more than 30-50\nlines. Above, the general algorithm won't be easily apparent, and you're\nprobably missing some factoring/restructuring opportunity.\n\n=== STRUCTS / UNIONS / ENUMS ===\n\nUse typedefs when defining structs. The type should be named something_t.\n\ntypedef struct {\n\tblah blah;\n} prox_cmd_t;\n\nYou can use anonymous enums to replace lots of sequential or mostly-sequential\n#defines.\n\n=== SWITCH ===\n\nIndent once for the case: labels, then again for the body. Like this:\n\nswitch(bar) {\n\tcase OPTION_A:\n\t\tdo_stuff();\n\t\tbreak;\n\tcase OPTION_B:\n\t\tdo_other_stuff();\n\t\tbreak;\n}\n\nIf you fall through into another case, add an explicit comment; otherwise, it\ncan look confusing.\n\nIf your switch() is too long or has too many cases, it should be cleaned up.\nSplit off the cases into functions, break the switch() into parent and children\nswitches (e.g. command and subcommand), or use an array of function pointers or\nthe like. In other words, use common sense and your brain.\n\nIf you need local scope variables for a case, you can add braces:\n\nswitch(bar) {\n\tcase OPTION_A: {\n\t\tint baz = 5*bar;\n\t\tdo_stuff(baz);\n\t\tbreak;\n\t}\n\t...\n\nBut at that point you should probably consider using a separate function.\n\n=== COMMENTS ===\n\nUse //, it's shorter:\n\n// this does foo\n...\n\n// baz:\n// This does blah blah blah .....\n// blah blah...\n\n/* */ can be used to comment blocks of code, but you should probably remove\nthem anyway - we have version control, it's easy to fetch old code if needed,\nso avoid committing commented out chunks of code. The same goes for #if 0.\n\n=== FILE ===\n\nPlease use common sense and restrain yourself from having a thousands+++ line\nfile. Functions in a file should have something *specific* in common. Over time\nsub-categories can arise and should therefore yield to file splitting.\n\nFor these reasons, vague and general filenames (e.g. util.*, global.*, misc.*,\nmain.*, and the like) should be very limited, if not prohibited.\n\n=== FILE HEADERS ===\n\nLicense/description header first:\n\n//-----------------------------------------------------------------------------\n// YOUR COPYRIGHT LINE GOES HERE\n//\n// This code is licensed to you under the terms of the GNU GPL, version 2 or,\n// at your option, any later version. See the LICENSE.txt file for the text of\n// the license.\n//-----------------------------------------------------------------------------\n// FILE DESCRIPTION GOES HERE\n//-----------------------------------------------------------------------------\n\nIf you modify a file in any non-trivial way (add code, etc.), add your copyright\nto the top.\n\n=== HEADER FILES ===\n\nUse the following include guard format:\n\n#ifndef FOOBAR_H__\n#define FOOBAR_H__\n\n...\n\n#endif // FOOBAR_H__\n\nKeep in mind that __FOOBAR_H would be reserved by the implementation and thus\nyou shouldn't use it (same for _FOOBAR_H).\n\n=== WHITESPACE ===\n\nAvoid trailing whitespace (no line should end in tab or space). People forget\nthis all the time if their editor doesn't handle it, but don't be surprised if\nyou see someone fixing it from time to time.\n\nKeep a newline (blank line) at the end of each file.\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 14.7685546875,
          "content": "\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.357421875,
          "content": "GZIP=gzip\n# Windows' echo echos its input verbatim, on Posix there is some\n#  amount of shell command line parsing going on. echo \"\" on \n#  Windows yields literal \"\", on Linux yields an empty line\nifeq ($(shell echo \"\"),)\n# This is probably a proper system, so we can use uname\nDELETE=rm -rf\nFLASH_TOOL=client/flasher\nplatform=$(shell uname)\nifneq (,$(findstring MINGW,$(platform)))\nFLASH_PORT=com3\nPATHSEP=\\\\#\nelse\nFLASH_PORT=/dev/ttyACM0\nPATHSEP=/\nendif\nelse\n# Assume that we are running on native Windows\nDELETE=del /q\nFLASH_TOOL=client/flasher.exe\nplatform=Windows\nFLASH_PORT=com3\nPATHSEP=\\\\#\nendif\n\nall clean: %: client/% bootrom/% armsrc/% recovery/% mfkey/%\n\nbootrom/%: FORCE\n\t$(MAKE) -C bootrom $(patsubst bootrom/%, %, $@)\narmsrc/%: FORCE\n\t$(MAKE) -C armsrc $(patsubst armsrc/%, %, $@)\nclient/%: FORCE\n\t$(MAKE) -C client $(patsubst client/%, %, $@)\nrecovery/%: FORCE\n\t$(MAKE) -C recovery $(patsubst recovery/%, %, $@)\nmfkey/%: FORCE\n\t$(MAKE) -C tools/mfkey $(patsubst mfkey/%, %, $@)\nFORCE: # Dummy target to force remake in the subdirectories, even if files exist (this Makefile doesn't know about the prerequisites)\n\n.PHONY: all clean help _test flash-bootrom flash-os flash-all FORCE\n\nhelp:\n\t@echo Multi-OS Makefile, you are running on $(DETECTED_OS)\n\t@echo Possible targets:\n\t@echo +\tall           - Make bootrom, armsrc and the OS-specific host directory\n\t@echo + client        - Make only the OS-specific host directory\n\t@echo + flash-bootrom - Make bootrom and flash it\n\t@echo + flash-os      - Make armsrc and flash os \\(includes fpga\\)\n\t@echo + flash-all     - Make bootrom and armsrc and flash bootrom and os image\n\t@echo +\tclean         - Clean in bootrom, armsrc and the OS-specific host directory\n\nclient: client/all\n\nmfkey: mfkey/all\n\nflash-bootrom: bootrom/obj/bootrom.elf $(FLASH_TOOL)\n\t$(FLASH_TOOL) $(FLASH_PORT) -b $(subst /,$(PATHSEP),$<)\n\nflash-os: armsrc/obj/fullimage.elf $(FLASH_TOOL)\n\t$(FLASH_TOOL) $(FLASH_PORT) $(subst /,$(PATHSEP),$<)\n\nflash-all: bootrom/obj/bootrom.elf armsrc/obj/fullimage.elf $(FLASH_TOOL)\n\t$(FLASH_TOOL) $(FLASH_PORT) -b $(subst /,$(PATHSEP),$(filter-out $(FLASH_TOOL),$^))\n\nnewtarbin:\n\t$(DELETE) proxmark3-$(platform)-bin.tar proxmark3-$(platform)-bin.tar.gz\n\t@touch proxmark3-$(platform)-bin.tar\n\ntarbin: newtarbin client/tarbin armsrc/tarbin bootrom/tarbin\n\t$(GZIP) proxmark3-$(platform)-bin.tar\n\n# Dummy target to test for GNU make availability\n_test:\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.412109375,
          "content": "# proxmark3: the official Proxmark repository!\n\nThe proxmark3 is a powerful general purpose RFID tool, the size of a deck\nof cards, designed to snoop, listen and emulate everything from\n**Low Frequency (125kHz)** to **High Frequency (13.56MHz)** tags.\n\nThis repository contains enough software, logic (for the FPGA), and design\ndocumentation for the hardware that you could, at least in theory,\ndo something useful with a proxmark3.\n\n## Resources\n\n* [This repository!](https://github.com/Proxmark/proxmark3)\n* [The Wiki](https://github.com/Proxmark/proxmark3/wiki)\n* [The GitHub Pages website](http://proxmark.github.io/proxmark3/)\n* [The Forum](http://www.proxmark.org/forum)\n* The IRC channel: irc.freenode.org #proxmark3 ([chat in your browser](http://webchat.freenode.net/?channels=#proxmark3))\n* [The Homebrew formula repository](https://github.com/Proxmark/homebrew-proxmark3)\n* [Proxmark3 community discord server](https://discord.gg/86VcRtS)\n   \n## Development\n\nThe tools required to build  or run the project will vary depending on\nyour operating system. Please refer to [the wiki](https://github.com/Proxmark/proxmark3/wiki) for details.\n\n## Obtaining hardware\n\nThe Proxmark3 is available for purchase (assembled and tested) from the\nfollowing locations:\n\n| Distributor Name | Warehouse Location | Entity Location |\n|------------------|--------------------|-----------------|\n| [RyscCorp](https://proxmark3.com/)         | USA                | USA             |\n| [Hackerwarehouse](https://hackerwarehouse.com/)  | USA                | USA             |\n| [Elechouse](http://www.elechouse.com/)        | HK                 | HK              |\n| [Lab401](https://lab401.com/)           | EU                 | HK              |\n| [RFxSecure](http://www.rfxsecure.com/)       | CN                 | SG              |\n| [Sneaktechnology](https://www.sneaktechnology.com/)  | CN                 | CN              |\n\n   \nMost of the ultra-low-volume contract assemblers could put\nsomething like this together with a reasonable yield. A run of around\na dozen units is probably cost-effective. The BOM includes (possibly-\noutdated) component pricing, and everything is available from Digikey\nand the usual distributors.\n\nIf you've never assembled a modern circuit board by hand, then this is\nnot a good place to start. Some of the components (e.g. the crystals)\nmust not be assembled with a soldering iron, and require hot air.\n\nThe schematics are included; the component values given are not\nnecessarily correct for all situations, but it should be possible to do\nnearly anything you would want with appropriate population options.\n\nThe printed circuit board artwork is also available, as Gerbers and an\nExcellon drill file.\n\n\n## License\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to the Free Software\nFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n\nJonathan Westhues\nuser jwesthues, at host cq.cx\n\nMay 2007, Cambridge MA\n"
        },
        {
          "name": "armsrc",
          "type": "tree",
          "content": null
        },
        {
          "name": "bootrom",
          "type": "tree",
          "content": null
        },
        {
          "name": "client",
          "type": "tree",
          "content": null
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "driver",
          "type": "tree",
          "content": null
        },
        {
          "name": "fpga",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "liblua",
          "type": "tree",
          "content": null
        },
        {
          "name": "pcb",
          "type": "tree",
          "content": null
        },
        {
          "name": "recovery",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "traces",
          "type": "tree",
          "content": null
        },
        {
          "name": "uart",
          "type": "tree",
          "content": null
        },
        {
          "name": "zlib",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}