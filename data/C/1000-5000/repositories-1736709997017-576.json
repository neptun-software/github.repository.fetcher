{
  "metadata": {
    "timestamp": 1736709997017,
    "page": 576,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "libratbag/libratbag",
      "stars": 2156,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.306640625,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.{c,h}]\nindent_style = tab\ntab_width = 8\ntrim_trailing_whitespace = true\n\n[{*.{py,py.in},tools/ratbagctl.*.in}]\nindent_style = space\nindent_size = 4\n\n[*.{yml,xsl}]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.123046875,
          "content": "Copyright © 2015-2017 Red Hat, Inc.\nCopyright © 2015 David Herrmann <dh.herrmann@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice (including the next\nparagraph) shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.2333984375,
          "content": "libratbag\n=========\n\n<img src=\"https://libratbag.github.io/_images/logo.svg\" alt=\"\" width=\"30%\" align=\"right\">\n\nlibratbag provides **ratbagd**, a DBus daemon to configure input devices,\nmainly gaming mice. The daemon provides a generic way to access the various\nfeatures exposed by these mice and abstracts away hardware-specific and\nkernel-specific quirks.\n\nlibratbag currently supports devices from Logitech, Etekcity, GSkill,\nRoccat, Steelseries. See [the device\nfiles](https://github.com/libratbag/libratbag/tree/master/data/devices) for\na complete list of supported devices.\n\nUsers interact through a GUI like\n[Piper](https://github.com/libratbag/piper/). For developers, the\n`ratbagctl` tool is the prime tool for debugging.\n\nInstalling libratbag from system packages\n-----------------------------------------\n\nlibratbag is packaged for some distributions, you can use your system's\npackage manager to install it. See [the\nwiki](https://github.com/libratbag/libratbag/wiki/Installation) for details.\n\nCompiling libratbag\n-------------------\n\nlibratbag uses the [meson build system](http://mesonbuild.com) which in\nturn uses ninja to invoke the compiler. Run the following commands to clone\nlibratbag and initialize the build:\n\n    git clone https://github.com/libratbag/libratbag.git\n    cd libratbag\n    meson builddir\n    ninja -C builddir\n    sudo ninja -C builddir install\n\nThe default prefix is `/usr/local`, i.e. it will not overwrite the system\ninstallation. For more information, see [the\nwiki](https://github.com/libratbag/libratbag/wiki/Installation).\n\nAnd to build or re-build after code-changes, run:\n\n    ninja -C builddir\n    sudo ninja -C builddir install\n    \nTo remove/uninstall simply run:\n\n    sudo ninja -C builddir uninstall\n\nNote: `builddir` is the build output directory and can be changed to any\nother directory name. To set configure-time options, use e.g.\n\n    meson configure builddir -Ddocumentation=false\n\nRun `meson configure builddir` to list the options.\n\nRunning ratbagd as DBus-activated systemd service\n-------------------------------------------------\n\nTo run ratbagd, simply run it as root `sudo ratbagd`. However,\nratbagd is intended to run as dbus-activated systemd service and installs\nthe following files:\n\n    /usr/share/dbus-1/system.d/org.freedesktop.ratbag1.conf\n    /usr/share/dbus-1/system-services/org.freedesktop.ratbag1.conf\n    /usr/share/systemd/system/ratbagd.service\n\nThese files are installed into the prefix by `ninja install`, see also the\nconfigure-time options `-Dsystemd-unit-dir` and `-Ddbus-root-dir`.\nDevelopers are encouraged to simply symlink to the files in the git\nrepository.\n\nFor the files to take effect, you should run\n\n    sudo systemctl daemon-reload\n    sudo systemctl reload dbus.service\n\nAnd finally, to enable the service:\n\n    sudo systemctl enable ratbagd.service\n\nThis places the required symlink into the systemd directory so that dbus\nactivation is possible.\n\nThe DBus Interface\n-------------------\n\nFull documentation of the DBus interface to interact with devices is\navailable here: [ratbagd DBus Interface description](https://libratbag.github.io/).\n\nlibratbag Internal Architecture\n-------------------------------\n\nlibratbag has two main components, libratbag and ratbagd. Applications like\nPiper talk over DBus to ratbagd. ratbagd uses libratbag to access the actual\ndevices.\n\n    +-------+    +------+    +---------+    +-----------+\n    | Piper | -> | DBus | -> | ratbagd | -> | libratbag | -> device\n    +-------+    +------+    +---------+    +-----------+\n\n\nInside libratbag, we have the general frontend and API. Each device is\nhandled by a HW-specific backend.  That HW backend is responsible for the\ndevice-specific communication (usually some vendor-specific HID protocol).\n\n    +---------+    +-----+    +------------+    +----------+\n    | ratbagd | -> | API | -> | hw backend | -> | protocol | -> device\n    +---------+    +-----+    +------------+    +----------+\n\nThe API layer is HW agnostic. Depend on the HW, the protocol may be part of\nthe driver implementation (e.g. etekcity) or a separate set of files\n(HID++). Where the protocol is separate, the whole known protocol should be\nimplemented. The HW driver then only accesses the bits required for\nlibratbag. This allows us to optionally export the protocol as separate\nlibrary in the future, if other projects require it.\n\nAdding Devices to libratbag\n---------------------------\n\nlibratbag relies on a device database to match a device with the drivers.\nSee the [data/devices/](https://github.com/libratbag/libratbag/tree/master/data/devices)\ndirectory for the set of known devices. These files\nare usually installed into `$prefix/$datadir` (e.g. `/usr/share/libratbag/`).\n\nAdding a new device can be as simple as adding a new `.device` file. This is\nthe case for many devices with a shared protocol (e.g. Logitech's HID++).\nSee the\n[data/devices/device.example](https://github.com/libratbag/libratbag/tree/master/data/devices/device.example)\nfile for guidance on what information must be set. Look for existing devices\nfrom the same vendor as guidance too.\n\nIf the device has a different protocol and doesn't work after adding the\ndevice file, you'll have to start reverse-engineering the device-specific\nprotocol. Good luck :)\n\nSource\n------\n\n    git clone https://github.com/libratbag/libratbag.git\n\nBugs\n----\n\nBugs can be reported in [our issue tracker](https://github.com/libratbag/libratbag/issues)\n\nMailing list\n------------\n\nlibratbag discussions happen on the [input-tools mailing\nlist](http://lists.freedesktop.org/archives/input-tools/) hosted on\nfreedesktop.org\n\nDevice-specific notes\n---------------------\n\nA number of device-specific notes and observations can be found in our\nwiki: https://github.com/libratbag/libratbag/wiki/Devices\n\nLicense\n-------\n\nlibratbag is licensed under the MIT license.\n\n> Permission is hereby granted, free of charge, to any person obtaining a\n> copy of this software and associated documentation files (the \"Software\"),\n> to deal in the Software without restriction, including without limitation\n> the rights to use, copy, modify, merge, publish, distribute, sublicense,\n> and/or sell copies of the Software, and to permit persons to whom the\n> Software is furnished to do so, subject to the following conditions: [...]\n\nSee the COPYING file for the full license information.\n"
        },
        {
          "name": "TODO",
          "type": "blob",
          "size": 2.302734375,
          "content": "some mice have a per axis \"sensitivity\" control which adapts the hardware\nresolution without changing the DPI (looking at you Etekcity and Roccat).\n\nbuttons need a couple of has_capability() functions to check which action\ntypes and actions are possible\n\nprofiles should be allowed to be enabled/disabled\n\nlight support:\n- on/off\n- color\n- patterns\n\nsome epollfd-like thing for the caller to check if events are available.\nNeeded for notification when the mouse changes through someone else\nmanipulating settings.\nThis is on backburner for now, it'll make the library more complicated,\nrequire HID parsing in libratbag for relatively little benefit. The only\nadvantage we really get out of it is that a configuration UI would be able\nto update itself if a user presses a button to e.g. change the profile while\nthe UI is running.\n\nWe should actually drop the \"key\" functionality in favor of macros:\n- either a device supports real hardware macro, then there is no point in\n  having a special set of keys exported to the user space while the driver\n  can just figure out which way is most efficient\n- if the device does not support macros, then all of the supported keys\n  should be RATBAG_SPECIAL, so the UI can enumerate them and get a capability\n  on the current button if it supports this particular action (example:\n  the UI is interested in sending \"Volume Up\", not KEY_VOLUMEUP.\n\nMacro support:\n- enhance doctext\n- add API support for name/groups\n- revamp the API?\n\ndecide on a stable set of arguments, build the installed version of the\ncommand with that set, add a set of debug arguments (e.g. the\netekcity-specific ones) only available in the build.\n\ninteractive shell mode/batch mode for ratbag-command?\n\ndbus proxy - allows parallel access to the devices without interference, and\nprovides a single instance for root permissions. this should be a separate\nproject.\n\nchange the API to return enum ratbag_error with more meaningful error\nmessages. errno's are fine internally between the driver, but for the\npublic-facing API we need better options\n\nratbag-command:\n- add checks for user input: negative indices, unterminated macro\n  sequences, excessive timeouts, etc\n- add man page\n- extend test cases, have a list of test cases that should work on a\n  specific device, as per-device separate scripts\n- add default set/get to profile, resolution\n\n"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "dbus",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 19.2890625,
          "content": "project('libratbag', 'c',\n\tversion : '0.18',\n\tlicense : 'MIT/Expat',\n\tdefault_options : [ 'c_std=gnu99', 'warning_level=2' ],\n\tmeson_version : '>= 0.50.0')\n\n# TODO: remove this once we bump meson version.\nif meson.version().version_compare('>=0.56')\n  project_build_root = meson.project_build_root()\n  project_source_root = meson.project_source_root()\nelse\n  project_build_root = meson.build_root()\n  project_source_root = meson.source_root()\n  message('Embedding libratbag source will not work because an older version of meson is used')\nendif\n\n# The DBus API version. Increase this every time the DBus API changes.\n# No backwards/forwards guarantee, clients are expected to understand\n# whatever ratbagd speaks or bail out. This should be removed if we ever\n# finish the API and declare it stable.\nratbagd_api_version = 2\n\n# We use libtool-version numbers because it's easier to understand.\n# Before making a release, the libratbag_so_* and liblur_so_*\n# numbers should be modified. The components are of the form C:R:A.\n# a) If binary compatibility has been broken (eg removed or changed interfaces)\n#    change to C+1:0:0.\n# b) If interfaces have been changed or added, but binary compatibility has\n#    been preserved, change to C+1:0:A+1\n# c) If the interface is the same as the previous version, change to C:R+1:A\nliblur_so_c=3\nliblur_so_r=3\nliblur_so_a=0\n\n# convert to sonames\nliblur_so_version = '@0@.@1@.@2@'.format((liblur_so_c-liblur_so_a),\n\t\t\t\t\t liblur_so_a, liblur_so_r)\n\n# Compiler setup\ncc = meson.get_compiler('c')\ncflags = ['-Wno-unused-parameter',\n\t  '-fvisibility=hidden',\n\t  '-Wmissing-prototypes',\n\t  '-Wformat', # required by format-security\n\t  '-Werror=format-security',\n\t  '-Wstrict-prototypes']\nadd_project_arguments(cflags, language: 'c')\n\n# Initialize config.h, to be added to in the various options below, config.h\n# is generated at the end of this file\nconfig_h = configuration_data()\nconfig_h.set('_GNU_SOURCE', '1')\nconfig_h.set_quoted('RATBAG_VERSION', meson.project_version())\nconfig_h.set('RATBAGD_API_VERSION', ratbagd_api_version)\nlibratbag_data_dir = join_paths(get_option('prefix'),\n\t\t\t\tget_option('datadir'),\n\t\t\t\t'libratbag')\nlibratbag_data_dir_devel = join_paths(project_source_root, 'data', 'devices')\nconfig_h.set_quoted('LIBRATBAG_DATA_DIR', libratbag_data_dir)\n\n# dependencies\npkgconfig = import('pkgconfig')\ndep_udev = dependency('libudev')\ndep_libevdev = dependency('libevdev')\ndep_glib = dependency('glib-2.0')\ndep_json_glib = dependency('json-glib-1.0')\ndep_lm = cc.find_library('m')\ndep_unistring = cc.find_library('unistring')\n\nif get_option('logind-provider') == 'elogind'\n\tdep_logind = dependency('libelogind', version : '>=227')\nelse\n\tdep_logind = dependency('libsystemd', version : '>=227')\nendif\n\nenable_systemd = get_option('systemd')\nif enable_systemd\n\tdep_systemd = dependency('systemd')\nendif\n\n#### libutil.a ####\nsrc_libutil = [\n\t'src/libratbag-util.c',\n\t'src/libratbag-util.h'\n]\n\ndeps_libutil = [\n\tdep_udev,\n]\n\nlib_libutil = static_library('util',\n\tsrc_libutil,\n\tdependencies : deps_libutil\n)\ndep_libutil = declare_dependency(link_with: lib_libutil)\n\n### libhidpp.a ####\nsrc_libhidpp = [\n\t'src/hidpp-generic.h',\n\t'src/hidpp-generic.c',\n\t'src/hidpp10.h',\n\t'src/hidpp10.c',\n\t'src/hidpp20.h',\n\t'src/hidpp20.c',\n\t'src/usb-ids.h'\n]\n\ndeps_libhidpp = [ dep_lm ]\n\nlib_libhidpp = static_library('hidpp',\n\tsrc_libhidpp,\n\tdependencies : deps_libhidpp)\ndep_libhidpp = declare_dependency(link_with: lib_libhidpp)\n\n### libasus.a ####\nsrc_libasus = [\n\t'src/asus.c',\n]\n\ndeps_libasus = [ ]\n\nlib_libasus = static_library('asus',\n\tsrc_libasus,\n\tdependencies : deps_libasus)\ndep_libasus = declare_dependency(link_with: lib_libasus)\n\n### liblur ####\n#\n# liblur is the library to handle logitech unifying receivers.\n#\ninstall_headers('src/liblur.h')\n\nsrc_liblur = [\n\t'src/liblur.c',\n\t'src/liblur.h'\n]\n\ndeps_liblur = [\n\tdep_libutil,\n\tdep_libhidpp,\n\tdep_libasus,\n]\n\nlur_mapfile = 'src/liblur.sym'\nlur_version_flag = '-Wl,--version-script,@0@/@1@'.format(meson.current_source_dir(), lur_mapfile)\nlib_liblur = shared_library('lur',\n\tsrc_liblur,\n\tinclude_directories : include_directories('src'),\n\tdependencies : deps_liblur,\n\tversion : liblur_so_version,\n\tlink_args : lur_version_flag,\n\tlink_depends : lur_mapfile,\n\tinstall : true,\n)\n\ndep_liblur = declare_dependency(link_with: lib_liblur)\n\npkgconfig.generate (\n        filebase: 'liblur',\n        name: 'Liblur',\n        description: 'Logitech Unifying Receiver configuration library',\n        version: meson.project_version(),\n        libraries: lib_liblur\n)\n\n#### libratbag.so ####\n#\n# libratbag is an internal-only library and the bit that does the actual\n# work talking to the mouse. it's used by ratbagd.\nsrc_libratbag = [\n\t'src/libratbag-enums.h',\n\t'src/libratbag.h',\n\t'src/driver-asus.c',\n\t'src/driver-etekcity.c',\n\t'src/driver-hidpp20.c',\n\t'src/driver-hidpp10.c',\n\t'src/driver-logitech-g300.c',\n\t'src/driver-logitech-g600.c',\n\t'src/driver-roccat.c',\n\t'src/driver-roccat-kone-emp.c',\n\t'src/driver-roccat-kone-pure.c',\n\t'src/driver-gskill.c',\n\t'src/driver-openinput.c',\n\t'src/driver-steelseries.c',\n\t'src/driver-steelseries.h',\n\t'src/driver-sinowealth.c',\n\t'src/driver-sinowealth.h',\n\t'src/driver-sinowealth-nubwo.c',\n\t'src/driver-marsgaming/driver-marsgaming.c',\n\t'src/driver-marsgaming/marsgaming-buttons.c',\n\t'src/driver-marsgaming/marsgaming-command.c',\n\t'src/driver-marsgaming/marsgaming-commit.c',\n\t'src/driver-marsgaming/marsgaming-leds.c',\n\t'src/driver-marsgaming/marsgaming-probe.c',\n\t'src/driver-marsgaming/marsgaming-query.c',\n\t'src/driver-test.c',\n\t'src/libratbag.c',\n\t'src/libratbag.h',\n\t'src/libratbag-data.c',\n\t'src/libratbag-data.h',\n\t'src/libratbag-hidraw.c',\n\t'src/libratbag-hidraw.h',\n\t'src/libratbag-private.h',\n\t'src/libratbag-test.c',\n\t'src/libratbag-test.h',\n\t'src/usb-ids.h'\n]\n\ndeps_libratbag = [\n\tdep_udev,\n\tdep_libevdev,\n\tdep_glib,\n\tdep_json_glib,\n\tdep_libutil,\n\tdep_libhidpp,\n\tdep_libasus,\n]\n\nlib_libratbag = static_library('ratbag',\n\tsrc_libratbag,\n\tinclude_directories : include_directories('src'),\n\tdependencies : deps_libratbag,\n)\n\ndep_libratbag = declare_dependency(\n\tlink_with : lib_libratbag,\n\tdependencies : deps_libratbag\n)\n\n#### libshared.a ####\nsrc_libshared = [\n\t'tools/shared.c',\n\t'tools/shared.h'\n]\n\ndeps_libshared = [\n\tdep_udev,\n\tdep_libevdev,\n]\nlib_libshared = static_library('shared',\n\tsrc_libshared,\n\tdependencies : deps_libshared,\n\tinclude_directories : include_directories('src')\n)\ndep_libshared = declare_dependency(link_with: lib_libshared)\n\n#### hidpp10-dump-page ####\nsrc_hidpp10_dump_page = [ 'tools/hidpp10-dump-page.c' ]\nexecutable('hidpp10-dump-page',\n\tsrc_hidpp10_dump_page,\n\tdependencies : [ dep_libhidpp ],\n\tinclude_directories : include_directories('src'),\n\tinstall : false,\n)\n\n#### hidpp20-dump-page ####\nsrc_hidpp20_dump_page = [ 'tools/hidpp20-dump-page.c' ]\nexecutable('hidpp20-dump-page',\n\tsrc_hidpp20_dump_page,\n\tdependencies : [ dep_libhidpp ],\n\tinclude_directories : include_directories('src'),\n\tinstall : false,\n)\n\n#### hidpp20-reset ####\nsrc_hidpp20_reset = [ 'tools/hidpp20-reset.c' ]\nexecutable('hidpp20-reset',\n\tsrc_hidpp20_reset,\n\tdependencies : [ dep_libhidpp ],\n\tinclude_directories : include_directories('src'),\n\tinstall : false,\n)\n\n#### lur-command ####\n#\n# A tool to access and manipulate logitech unifying receivers.\nsrc_lur_command = [ 'tools/lur-command.c' ]\nexecutable('lur-command',\n\tsrc_lur_command,\n\tdependencies : [ dep_libshared, dep_liblur ],\n\tinclude_directories : include_directories('src'),\n\tinstall : true,\n)\n\nman_config = configuration_data()\n\nman_config.set('version', meson.project_version())\n\nman_lur_command = configure_file (\n\tinput: 'tools/lur-command.man',\n\toutput: 'lur-command.1',\n\tconfiguration: man_config,\n\tinstall : true,\n\tinstall_dir : join_paths(get_option('mandir'), 'man1')\n)\n\n#### data files ####\ninstall_subdir('data/devices',\n\t       strip_directory : true,\n\t       exclude_files : ['device.example', 'README.md'],\n\t       install_dir : join_paths(get_option('datadir'), 'libratbag'))\n\ndata_parse_test = find_program(join_paths(project_source_root, 'test/data-parse-test.py'))\ntest('data-parse-test', data_parse_test, args: libratbag_data_dir_devel)\n\nduplicate_test = find_program(join_paths(project_source_root, 'test/duplicate-check.py'))\ntest('duplicate-test', duplicate_test, args : libratbag_data_dir_devel)\n\nreceiver_id_test = find_program(join_paths(project_source_root, 'test/receiver-check.py'))\ntest('receiver-id-test', receiver_id_test, args : libratbag_data_dir_devel)\n\n#### tests ####\nenable_tests = get_option('tests')\nif enable_tests\n\tdep_check = dependency('check', version: '>= 0.9.10')\n\n\tconfig_h.set('BUILD_TESTS', '1')\n\n\ttest_context = executable('test-context',\n\t\t\t\t  ['test/test-context.c'],\n\t\t\t\t  dependencies : [ dep_libratbag, dep_check ],\n\t\t\t\t  include_directories : include_directories('src'),\n\t\t\t\t  install : false)\n\ttest_device = executable('test-device',\n\t\t\t\t ['test/test-device.c'],\n\t\t\t\t dependencies : [ dep_libratbag, dep_check ],\n\t\t\t\t include_directories : include_directories('src'),\n\t\t\t\t install : false)\n\ttest_util = executable('test-util',\n\t\t\t\t ['test/test-util.c'],\n\t\t\t\t dependencies : [ dep_libratbag, dep_check ],\n\t\t\t\t include_directories : include_directories('src'),\n\t\t\t\t install : false)\n\ttest_iconv_helper = executable('test-iconv-helper',\n\t\t\t\t['test/test-iconv-helper.c'],\n\t\t\t\tdependencies : [ dep_libratbag,\n\t\t\t\t\t\t dep_check,\n\t\t\t\t\t\t dep_libutil],\n\t\t\t\tinclude_directories : include_directories('src'),\n\t\t\t\tinstall : false)\n\ttest('test-context', test_context)\n\ttest('test-device', test_device)\n\ttest('test-util', test_util)\n\ttest('test-iconv-helper', test_iconv_helper)\n\n\tvalgrind = find_program('valgrind', required : false)\n\tif valgrind.found()\n\t\tvalgrind_suppressions_file = join_paths(project_source_root, 'test', 'valgrind.suppressions')\n\t\tadd_test_setup('valgrind',\n\t\t\t       exe_wrapper : [\n\t\t\t\t       valgrind,\n\t\t\t\t       '--leak-check=full',\n\t\t\t\t       '--quiet',\n\t\t\t\t       '--error-exitcode=3',\n\t\t\t\t       '--suppressions=' + valgrind_suppressions_file ],\n\t\t\t       timeout_multiplier: 5)\n\tendif\nendif\n\nsubdir('rbtree')\n\n#### ratbagd ####\n#\n# The main item of this repo, a DBus server that uses libratbag to talk to\n# the mice. The DBus API is the public-facing API.\n#\nsrc_ratbagd = [\n\t'src/shared-macro.h',\n\t'ratbagd/ratbagd.h',\n\t'ratbagd/ratbagd.c',\n\t'ratbagd/ratbagd-led.c',\n\t'ratbagd/ratbagd-button.c',\n\t'ratbagd/ratbagd-device.c',\n\t'ratbagd/ratbagd-profile.c',\n\t'ratbagd/ratbagd-resolution.c',\n\t'ratbagd/ratbagd-test.c',\n\t'ratbagd/ratbagd-json.c',\n\t'ratbagd/ratbagd-json.h',\n\t'src/libratbag-util.h',\n\t'src/libratbag-util.c',\n]\n\ndeps_ratbagd = [\n\tdep_udev,\n\tdep_logind,\n\tdep_libratbag,\n\tdep_rbtree,\n\tdep_unistring,\n]\n\nexecutable(\n  'ratbagd',\n  src_ratbagd,\n  dependencies : deps_ratbagd,\n  include_directories : include_directories('src'),\n  install : true,\n  install_dir : get_option('sbindir'),\n)\n\ninstall_man('ratbagd/ratbagd.8')\n\n#### ratbagd_devel ####\n#\n# A development ratbagd server that owns a different name on the bus\n# (org.freedesktop.ratbag_devel1). This server is used by ratbagdctl.devel.\n#\n\ndbus_devel_policy = configure_file(input : 'dbus/org.freedesktop.ratbag_devel1.conf.in',\n\t\t\t\t   output : 'org.freedesktop.ratbag_devel1.conf',\n\t\t\t\t   copy: true)\n\n# This is a hack. We always install the devel policy file into\n# /etc/dbus-1/system.d, independent of any prefixes we use otherwise.\n# This should never be used outside of developer machines anyway, but\n# installations on those may use different prefixes for building.\n# This is not set in stone, suggest something better if you can.\ndbussystemdir = join_paths('/', get_option('sysconfdir'), 'dbus-1', 'system.d')\n\nexecutable('ratbagd.devel',\n\t   src_ratbagd,\n\t   dependencies : deps_ratbagd,\n\t   include_directories : include_directories('src'),\n\t   install : false,\n\t   c_args : ['-DRATBAG_DBUS_INTERFACE=\"ratbag_devel1\"',\n\t\t     '-DDBUS_POLICY_SRC=\"@0@/@1@\"'.format(project_build_root, 'org.freedesktop.ratbag_devel1.conf'),\n\t\t     '-DDBUS_POLICY_DST=\"@0@/@1@\"'.format(dbussystemdir, 'org.freedesktop.ratbag_devel1.conf'),\n\t\t     '-DDISABLE_COREDUMP=1'],\n)\n\n\n#### unit file ####\nif enable_systemd\n\tunitdir = get_option('systemd-unit-dir')\n\tif unitdir == ''\n\t\tlibdir = get_option('libdir')\n\t\tdefault_unitdir = dep_systemd.get_pkgconfig_variable('systemdsystemunitdir')\n\t\t# Fedora uses lib64 but systemd is in lib. Hack around this so it\n\t\t# works out of the box.\n\t\tintended_unitdir = join_paths(get_option('prefix'), get_option('libdir'), 'systemd')\n\t\tif get_option('prefix') == '/usr' and intended_unitdir != default_unitdir\n\t\t\tmessage('''\n\t\t\tsystemd unitdir libdir mismatch detected, changing unitdir to\n\t\t\t\t@0@\n\t\t\tor specify with\n\t\t\t\tmesonconf -Dsystemd-unit-dir=<path>\n\n\t\t\tSee https://github.com/libratbag/libratbag/issues/188\n\t\t\t'''.format(default_unitdir))\n\t\t\tunitdir = default_unitdir\n\t\telse\n\t\t\tunitdir = intended_unitdir\n\t\tendif\n\tendif\nendif\n\nconfig_sbindir = configuration_data()\nconfig_sbindir.set(\n  'sbindir',\n  join_paths(get_option('prefix'), get_option('sbindir')),\n)\n\nif enable_systemd\n  configure_file(\n    input : 'ratbagd/ratbagd.service.in',\n    output : 'ratbagd.service',\n    configuration : config_sbindir,\n    install_dir : unitdir,\n  )\nendif\n\ndbusdir = get_option('dbus-root-dir')\nif dbusdir == ''\n\tdbusdir = join_paths(get_option('prefix'), get_option('datadir'), 'dbus-1')\nendif\n\nconfigure_file(\n  input : 'dbus/org.freedesktop.ratbag1.service.in',\n  output : 'org.freedesktop.ratbag1.service',\n  configuration : config_sbindir,\n  install_dir : join_paths(dbusdir, 'system-services')\n)\n\ndbusgroup = get_option('dbus-group')\nif dbusgroup == ''\n\t# grant everybody access by default\n\taccess = 'context=\"default\"'\nelse\n\t# grant access to members of the specified group only\n\taccess = 'group=\"@0@\"'.format(dbusgroup)\nendif\n\nconfig_dbusaccess = configuration_data()\nconfig_dbusaccess.set('access', access)\n\nconfigure_file(input : 'dbus/org.freedesktop.ratbag1.conf.in',\n\t       output : 'org.freedesktop.ratbag1.conf',\n\t       configuration : config_dbusaccess,\n\t       install_dir : join_paths(dbusdir, 'system.d'))\n\n#### tools ####\n\n# This is a special idiomatic construct in meson to get a fast dependency that\n# doesn't exist and isn't logged as \"not found\".\ndep_python3 = dependency('', required : false)\npymod = import('python')\npy3 = pymod.find_installation()\nif meson.version().version_compare('>= 0.53.0')\n  dep_python3 = py3.dependency(embed : true)\nendif\npy_version = py3.language_version()\n\n# From python 3.8 we need python3-embed\nembed = py_version.version_compare('>= 3.8') ? '-embed' : ''\nif not dep_python3.found()\n  dep_python3 = dependency('python-@0@@1@'.format(py_version, embed), required : false)\n  if not dep_python3.found()\n    dep_python3 = dependency('python3@0@'.format(embed))\n  endif\nendif\n\nconfig_ratbagctl = configuration_data()\nconfig_ratbagctl.set('RATBAGD_API_VERSION', ratbagd_api_version)\nconfig_ratbagctl.set('version', meson.project_version())\n\nratbagctl_body = configure_file(input : 'tools/ratbagctl.body.py.in',\n\t\t\t      output : 'ratbagctl.body.py',\n\t\t\t      configuration: config_ratbagctl)\n\n# ratbagctl is the commandline tool to interact with ratbagd over DBus.\nratbagctl_target = custom_target('ratbagctl',\n  output : 'ratbagctl',\n  input : [ratbagctl_body, 'tools/ratbagd.py'],\n  build_by_default : true,\n  command : [py3, join_paths(project_source_root, 'tools', 'merge_ratbagd.py'),\n\t\t\t\t'@INPUT@',\n\t\t\t\t'--output', '@OUTPUT@'],\n  install: true,\n  install_dir: get_option('bindir'))\n\nman_ratbagctl = configure_file (\n\tinput: 'tools/ratbagctl.1',\n\toutput: 'ratbagctl.1',\n\tconfiguration: man_config,\n\tinstall : true,\n\tinstall_dir : join_paths(get_option('mandir'), 'man1')\n)\n\nconfig_ratbagctl_devel = configuration_data()\nconfig_ratbagctl_devel.set('MESON_BUILD_ROOT', project_build_root)\nconfig_ratbagctl_devel.set('LIBRATBAG_DATA_DIR', libratbag_data_dir_devel)\nconfig_ratbagctl_devel.set('RATBAGD_API_VERSION', ratbagd_api_version)\n\nconfigure_file(input : 'tools/toolbox.py',\n\t       output : 'toolbox.py',\n\t       configuration : config_ratbagctl_devel)\n# ratbagctl.devel starts a custom ratbagd and interacts with that over DBus\nconfigure_file(input : 'tools/ratbagctl.devel.py.in',\n\t       output : 'ratbagctl.devel',\n\t       configuration : config_ratbagctl_devel)\n# ratbagctl.test starts a custom ratbagd and interacts with that over DBus\nconfigure_file(input : 'tools/ratbagctl.test.py.in',\n\t       output : 'ratbagctl.test',\n\t       configuration : config_ratbagctl_devel)\n\nenv_test = environment()\nenv_test.set('LIBRATBAG_DATA_DIR', libratbag_data_dir_devel)\n# See: https://github.com/mesonbuild/meson/issues/3306.\nenv_test.set('MESON_SOURCE_ROOT', project_source_root)\nratbagctl_test = find_program(join_paths(project_build_root, 'ratbagctl.test'))\ntest(\n  'ratbagctl-test',\n  ratbagctl_test,\n  args : ['-v'],\n  depends : [\n    ratbagctl_target,\n  ],\n  env : env_test,\n)\n\n# ratbag-command uses Swig bindings to call libratbag directly\nswig = find_program('swig')\nswig_gen = generator(\n    swig,\n    output: ['@BASENAME@.c'],\n    arguments: ['-python', '-py3', '-o', './@OUTPUT@',\n                '-outdir', '.',\n                '-I' + join_paths(project_source_root, 'src'),\n                '-I' + join_paths(project_source_root, 'tools'),\n                '@INPUT@'],\n)\n\nwrapper_deps = [\n    dep_python3,\n    dep_libratbag,\n    dep_libshared,\n]\n\ni_source = join_paths(project_source_root, 'src', 'libratbag.i')\nc_source = swig_gen.process(i_source)\nshared_library(\n   'libratbag',\n   c_source,\n   name_prefix: '_',\n   c_args : ['-Wno-missing-prototypes',\n             '-Wno-format-nonliteral',\n             '-Wno-missing-field-initializers'],\n   extra_files: [ i_source ] + src_libratbag ,\n   dependencies: deps_libratbag + wrapper_deps,\n   include_directories : include_directories('src', 'tools'),\n   install: false,\n)\n\ni_source = join_paths(project_source_root, 'src', 'hidpp.i')\nc_source = swig_gen.process(i_source)\nshared_library(\n   'hidpp',\n   c_source,\n   name_prefix: '_',\n   c_args : ['-Wno-missing-prototypes',\n             '-Wno-format-nonliteral',\n             '-Wno-missing-field-initializers',\n             '-Wno-strict-prototypes'],\n   extra_files: [ i_source ] + src_libratbag ,\n   dependencies: deps_libratbag + wrapper_deps,\n   include_directories : include_directories('src', 'tools'),\n   install: false,\n)\n\n# ratbagc is the layer that maps ratbagctl to the swig bindings\nratbagc_py_conf = configuration_data()\nratbagc_py_conf.set('LIBRATBAG_DATA_DIR', libratbag_data_dir_devel)\nratbagc_py = configure_file(input: 'tools/ratbagc.py.in',\n\t\t\t    output: 'ratbagc.py',\n\t\t\t    configuration: ratbagc_py_conf)\n\n# ratbag-command is a commandline tool with the UI as ratbagctl but instead\n# of connecting to ratbagd over DBus, it uses libratbag directly. This is a\n# development tool for protocol debugging etc.\ncustom_target('ratbag-command',\n  output : 'ratbag-command',\n  input : [ratbagctl_body, ratbagc_py],\n  build_by_default : true,\n  command : [py3, join_paths(project_source_root, 'tools', 'merge_ratbagd.py'),\n\t\t\t\t'@INPUT@',\n\t\t\t\t'--output', '@OUTPUT@'],\n  install: false)\n\n#### output files ####\nconfigure_file(output: 'config.h', install: false, configuration: config_h)\n\n#### code formatting #####\nrun_target(\n  'python-black',\n  command : 'tools/python-black.sh',\n)\n\npython_black_check = find_program(join_paths(project_source_root, 'test/python-black-check.sh'))\ntest(\n  'python-black-check',\n  python_black_check,\n  env: env_test,\n)\n\n#### code linting #####\nrun_target(\n  'python-ruff',\n  command : 'tools/python-ruff.sh',\n)\n\npython_ruff_check = find_program(join_paths(project_source_root, 'test/python-ruff-check.sh'))\ntest(\n  'python-ruff-check',\n  python_ruff_check,\n  env: env_test,\n)\n\nsubdir('doc')\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 0.9755859375,
          "content": "option('udev-dir',\n\ttype: 'string',\n\tvalue: '',\n\tdescription: 'udev base directory [default=$prefix/lib/udev]')\n\noption('tests',\n\ttype: 'boolean',\n\tvalue: true,\n\tdescription: 'Build the tests (default=yes)')\n\noption('systemd-unit-dir',\n\ttype : 'string',\n\tvalue : '',\n\tdescription : 'systemd unit directory [default=$libdir/systemd/system]')\n\noption('dbus-root-dir',\n\ttype : 'string',\n\tvalue : '',\n\tdescription : 'dbus service directory [default=$datadir/dbus-1]')\n\noption('documentation',\n\ttype: 'boolean',\n\tvalue: false,\n\tdescription: 'Enable documentation build (default=no)')\n\noption('dbus-group',\n\ttype: 'string',\n\tvalue : '',\n\tdescription : 'The UNIX group that is granted access to the ratbagd D-Bus service. By default all users may access it.')\n\noption('systemd',\n\ttype : 'boolean',\n\tvalue : true,\n\tdescription : 'Build systemd unit files')\n\noption('logind-provider',\n  type : 'combo',\n  choices: [ 'elogind', 'systemd'],\n  value : 'systemd',\n  description : 'Which logind provider to use')\n"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.8359375,
          "content": "[tool.black]\ntarget-version = [\"py37\"]\n\n[tool.ruff]\ntarget-version = \"py37\"\nlint.select = [\n\t# pycodestyle\n\t\"E\",\n\t\"W\",\n\t# pyflakes\n\t\"F\",\n\t# pyupgrade\n\t# Use modern Python features for the best possible develop experience.\n\t\"UP\",\n\t# flake8-bugbear\n\t# Find obvious bugs.\n\t\"B\",\n\t# flake8-pie\n\t\"PIE\",\n\t# flake8-return\n\t\"RET\",\n\t# pep8-naming\n\t# `Error` suffix on exception names.\n\t\"N818\",\n\t# flake8-simplify\n\t\"SIM\",\n]\nlint.ignore = [\n\t# Line too long.\n\t# We have some places where it's just impossible to make it fit.\n\t\"E501\",\n\t# Use 'contextlib.suppress(...)' instead of try-except-pass.\n\t# I think it's better to use integrated language constructs instead\n\t# of libraries.\n\t\"SIM105\",\n\t# Use `\"key\" in dict` instead of `\"key\" in dict.keys()`.\n\t# While the lint itself is good, fixing it's warnings causes `KeyError`\n\t# errors with `GLib.Variant`.\n\t\"SIM118\",\n]\n"
        },
        {
          "name": "ratbagd",
          "type": "tree",
          "content": null
        },
        {
          "name": "rbtree",
          "type": "tree",
          "content": null
        },
        {
          "name": "release.sh",
          "type": "blob",
          "size": 13.9912109375,
          "content": "#!/usr/bin/env bash\n#\n#\t\tGenerate the announce template\n#\n# Completely copy/paste of Xorg/util/modular/release.sh:\n#\n# Copyright (c) 2009, Oracle and/or its affiliates. All rights reserved.\n#\n# Permission is hereby granted, free of charge, to any person obtaining a\n# copy of this software and associated documentation files (the \"Software\"),\n# to deal in the Software without restriction, including without limitation\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n# and/or sell copies of the Software, and to permit persons to whom the\n# Software is furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice (including the next\n# paragraph) shall be included in all copies or substantial portions of the\n# Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n\nexport LC_ALL=C\n\n#------------------------------------------------------------------------------\n#\t\t\tFunction: check_local_changes\n#------------------------------------------------------------------------------\n#\ncheck_local_changes() {\n    git diff --quiet HEAD > /dev/null 2>&1\n    if [ $? -ne 0 ]; then\n\techo \"\"\n\techo \"Uncommitted changes found. Did you forget to commit? Aborting.\"\n\techo \"\"\n\techo \"You can perform a 'git stash' to save your local changes and\"\n\techo \"a 'git stash apply' to recover them after the tarball release.\"\n\techo \"Make sure to rebuild and run 'make distcheck' again.\"\n\techo \"\"\n\techo \"Alternatively, you can clone the module in another directory\"\n\techo \"and run ./configure. No need to build if testing was finished.\"\n\techo \"\"\n\treturn 1\n    fi\n    return 0\n}\n\n#------------------------------------------------------------------------------\n#\t\t\tFunction: check_option_args\n#------------------------------------------------------------------------------\n#\n# perform sanity checks on cmdline args which require arguments\n# arguments:\n#   $1 - the option being examined\n#   $2 - the argument to the option\n# returns:\n#   if it returns, everything is good\n#   otherwise it exit's\ncheck_option_args() {\n    option=$1\n    arg=$2\n\n    # check for an argument\n    if [ x\"$arg\" = x ]; then\n\techo \"\"\n\techo \"Error: the '$option' option is missing its required argument.\"\n\techo \"\"\n\tusage\n\texit 1\n    fi\n\n    # does the argument look like an option?\n    echo $arg | $GREP \"^-\" > /dev/null\n    if [ $? -eq 0 ]; then\n\techo \"\"\n\techo \"Error: the argument '$arg' of option '$option' looks like an option itself.\"\n\techo \"\"\n\tusage\n\texit 1\n    fi\n}\n\n#------------------------------------------------------------------------------\n#\t\t\tFunction: check_modules_specification\n#------------------------------------------------------------------------------\n#\ncheck_modules_specification() {\n\nif [ x\"${INPUT_MODULES}\" = x ]; then\n    echo \"\"\n    echo \"Error: no modules specified (blank command line).\"\n    usage\n    exit 1\nfi\n\n}\n\n#------------------------------------------------------------------------------\n#\t\t\tFunction: generate_announce\n#------------------------------------------------------------------------------\n#\ngenerate_announce()\n{\n    cat <<RELEASE\nSubject: [ANNOUNCE] $pkg_name $pkg_version\nTo: $list_to\nCc: $list_cc\n\n$pkg_name $tag_name is out.\n\nThe list of interesting changes are:\n\nSee the full log at the end if you are interested in the details.\n\n`git log --no-merges \"$tag_range\" | git shortlog`\n\ngit tag: $tag_name\n\nRELEASE\n\n    for tarball in $tarbz2 $targz $tarxz; do\n\tcat <<RELEASE\nThe libratbag project does not generate tarballs for releases, you can\ngrab one directly from github:\n\nhttps://github.com/libratbag/$pkg_name/archive/$tag_name/$tarball\n\nRELEASE\n    done\n}\n\n#------------------------------------------------------------------------------\n#\t\t\tFunction: print_epilog\n#------------------------------------------------------------------------------\n#\nprint_epilog() {\n\n    epilog=\"========  Successful Completion\"\n    if [ x\"$NO_QUIT\" != x ]; then\n\tif [ x\"$failed_modules\" != x ]; then\n\t    epilog=\"========  Partial Completion\"\n\tfi\n    elif [ x\"$failed_modules\" != x ]; then\n\tepilog=\"========  Stopped on Error\"\n    fi\n\n    echo \"\"\n    echo \"$epilog `date`\"\n\n    # Report about modules that failed for one reason or another\n    if [ x\"$failed_modules\" != x ]; then\n\techo \"\tList of failed modules:\"\n\tfor mod in $failed_modules; do\n\t    echo \"\t$mod\"\n\tdone\n\techo \"========\"\n\techo \"\"\n    fi\n}\n\n#------------------------------------------------------------------------------\n#\t\t\tFunction: process_modules\n#------------------------------------------------------------------------------\n#\n# Loop through each module to release\n# Exit on error if --no-quit was not specified\n#\nprocess_modules() {\n    for MODULE_RPATH in ${INPUT_MODULES}; do\n\tif ! process_module ; then\n\t    echo \"Error: processing module \\\"$MODULE_RPATH\\\" failed.\"\n\t    failed_modules=\"$failed_modules $MODULE_RPATH\"\n\t    if [ x\"$NO_QUIT\" = x ]; then\n\t\tprint_epilog\n\t\texit 1\n\t    fi\n\tfi\n    done\n}\n\n#------------------------------------------------------------------------------\n#\t\t\tFunction: process_module\n#------------------------------------------------------------------------------\n# Code 'return 0' on success to process the next module\n# Code 'return 1' on error to process next module if invoked with --no-quit\n#\nprocess_module() {\n\n    top_src=`pwd`\n    echo \"\"\n    echo \"========  Processing \\\"$top_src/$MODULE_RPATH\\\"\"\n\n    # This is the location where the script has been invoked\n    if [ ! -d $MODULE_RPATH ] ; then\n\techo \"Error: $MODULE_RPATH cannot be found under $top_src.\"\n\treturn 1\n    fi\n\n    # Change directory to be in the git module\n    cd $MODULE_RPATH\n    if [ $? -ne 0 ]; then\n\techo \"Error: failed to cd to $MODULE_RPATH.\"\n\treturn 1\n    fi\n\n    # ----- Now in the git module *root* directory ----- #\n\n    # Check that this is indeed a git module\n    if [ ! -d .git ]; then\n\techo \"Error: there is no git module here: `pwd`\"\n\treturn 1\n    fi\n\n    # Check for uncommitted/queued changes.\n    check_local_changes\n    if [ $? -ne 0 ]; then\n\tcd $top_src\n\treturn 1\n    fi\n\n    # Determine what is the current branch and the remote name\n    current_branch=`git branch | $GREP \"\\*\" | sed -e \"s/\\* //\"`\n    remote_name=`git config --get branch.$current_branch.remote`\n    remote_branch=`git config --get branch.$current_branch.merge | cut -d'/' -f3,4`\n    echo \"Info: working off the \\\"$current_branch\\\" branch tracking the remote \\\"$remote_name/$remote_branch\\\".\"\n\n    # Find out the tarname from meson.build\n    pkg_name=$($GREP '^project(' meson.build | sed 's|project(\\([^\\s,]*\\).*|\\1|' | sed \"s/'//g\")\n    pkg_version=$($GREP -m 1 '^[\t ]*version \\?: ' meson.build | sed 's|[\t ]*version \\?: \\([^\\s,]*\\).*|\\1|' | sed \"s/'//g\")\n    tar_name=\"$pkg_name-$pkg_version\"\n    targz=$tar_name.tar.gz\n    # libratbag tags with v0.3 but piper user just 0.3\n    case `git describe` in\n\t    v*)\n\t\t    tag_name=$(echo \"v$pkg_version\" | sed 's|\\.0$||')\n\t\t    ;;\n\t    *)\n\t\t    tag_name=$(echo \"$pkg_version\" | sed 's|\\.0$||')\n\t\t    ;;\n    esac\n    remote_url_root=\"https://github.com/libratbag/$pkg_name/archive\"\n\n    # Now get the tarballs from github directly to compute their checksum\n    remote_targz_url=$remote_url_root/$tag_name/$targz\n    echo \"downloading the tarball from $remote_targz_url\"\n    curl $remote_targz_url > $targz\n\n    # Obtain the top commit SHA which should be the version bump\n    # It should not have been tagged yet (the script will do it later)\n    local_top_commit_sha=`git  rev-list --max-count=1 HEAD`\n    if [ $? -ne 0 ]; then\n\techo \"Error: unable to obtain the local top commit id.\"\n\tcd $top_src\n\treturn 1\n    fi\n\n    # Check that the top commit looks like a version bump\n    git diff --unified=0 HEAD^ | $GREP -F $pkg_version >/dev/null 2>&1\n    if [ $? -ne 0 ]; then\n\t# Wayland repos use  m4_define([wayland_major_version], [0])\n\tgit diff --unified=0 HEAD^ | $GREP -E \"(major|minor|micro)_version\" >/dev/null 2>&1\n\tif [ $? -ne 0 ]; then\n\t    echo \"Error: the local top commit does not look like a version bump.\"\n\t    echo \"       the diff does not contain the string \\\"$pkg_version\\\".\"\n\t    local_top_commit_descr=`git log --oneline --max-count=1 $local_top_commit_sha`\n\t    echo \"       the local top commit is: \\\"$local_top_commit_descr\\\"\"\n\t    cd $top_src\n\t    return 1\n\tfi\n    fi\n\n    # Check that the top commit has been pushed to remote\n    remote_top_commit_sha=`git  rev-list --max-count=1 $remote_name/$remote_branch`\n    if [ $? -ne 0 ]; then\n\techo \"Error: unable to obtain top commit from the remote repository.\"\n\tcd $top_src\n\treturn 1\n    fi\n    if [ x\"$remote_top_commit_sha\" != x\"$local_top_commit_sha\" ]; then\n\techo \"Error: the local top commit has not been pushed to the remote.\"\n\tlocal_top_commit_descr=`git log --oneline --max-count=1 $local_top_commit_sha`\n\techo \"       the local top commit is: \\\"$local_top_commit_descr\\\"\"\n\tcd $top_src\n\treturn 1\n    fi\n\n    # If a tag exists with the the tar name, ensure it is tagging the top commit\n    # It may happen if the version set in configure.ac has been previously released\n    tagged_commit_sha=`git  rev-list --max-count=1 $tag_name 2>/dev/null`\n    if [ $? -eq 0 ]; then\n\t# Check if the tag is pointing to the top commit\n\tif [ x\"$tagged_commit_sha\" != x\"$remote_top_commit_sha\" ]; then\n\t    echo \"Error: the \\\"$tag_name\\\" already exists.\"\n\t    echo \"       this tag is not tagging the top commit.\"\n\t    remote_top_commit_descr=`git log --oneline --max-count=1 $remote_top_commit_sha`\n\t    echo \"       the top commit is: \\\"$remote_top_commit_descr\\\"\"\n\t    local_tag_commit_descr=`git log --oneline --max-count=1 $tagged_commit_sha`\n\t    echo \"       tag \\\"$tag_name\\\" is tagging some other commit: \\\"$local_tag_commit_descr\\\"\"\n\t    cd $top_src\n\t    return 1\n\telse\n\t    echo \"Info: module already tagged with \\\"$tag_name\\\".\"\n\tfi\n    else\n\t# Tag the top commit with the tar name\n\tif [ x\"$DRY_RUN\" = x ]; then\n\t    git tag -s -m $tag_name $tag_name\n\t    if [ $? -ne 0 ]; then\n\t\techo \"Error:  unable to tag module with \\\"$tag_name\\\".\"\n\t\tcd $top_src\n\t\treturn 1\n\t    else\n\t\techo \"Info: module tagged with \\\"$tag_name\\\".\"\n\t    fi\n\telse\n\t    echo \"Info: skipping the commit tagging in dry-run mode.\"\n\tfi\n    fi\n\n    # Mailing lists where to post the all [Announce] e-mails\n    list_to=\"input-tools@lists.freedesktop.org\"\n\n    # Pushing the top commit tag to the remote repository\n    if [ x$DRY_RUN = x ]; then\n\techo \"Info: pushing tag \\\"$tag_name\\\" to remote \\\"$remote_name\\\":\"\n\tgit push $remote_name $tag_name\n\tif [ $? -ne 0 ]; then\n\t    echo \"Error: unable to push tag \\\"$tag_name\\\" to the remote repository.\"\n\t    echo \"       it is recommended you fix this manually and not run the script again\"\n\t    cd $top_src\n\t    return 1\n\tfi\n    else\n\techo \"Info: skipped pushing tag \\\"$tag_name\\\" to the remote repository in dry-run mode.\"\n    fi\n\n    # --------- Generate the announce e-mail ------------------\n    # Failing to generate the announce is not considered a fatal error\n\n    # Git-describe returns only \"the most recent tag\", it may not be the expected one\n    # However, we only use it for the commit history which will be the same anyway.\n    tag_previous=`git describe --abbrev=0 HEAD^ 2>/dev/null`\n    # Git fails with rc=128 if no tags can be found prior to HEAD^\n    if [ $? -ne 0 ]; then\n\tif [ $? -ne 0 ]; then\n\t    echo \"Warning: unable to find a previous tag.\"\n\t    echo \"         perhaps a first release on this branch.\"\n\t    echo \"         Please check the commit history in the announce.\"\n\tfi\n    fi\n    if [ x\"$tag_previous\" != x ]; then\n\t# The top commit may not have been tagged in dry-run mode. Use commit.\n\ttag_range=$tag_previous..$local_top_commit_sha\n    else\n\ttag_range=$tag_name\n    fi\n    generate_announce > \"$tar_name.announce\"\n    echo \"Info: [ANNOUNCE] template generated in \\\"$tar_name.announce\\\" file.\"\n    echo \"      Please pgp sign and send it.\"\n\n    # --------- Successful completion --------------------------\n    cd $top_src\n    return 0\n\n}\n\n#------------------------------------------------------------------------------\n#\t\t\tFunction: usage\n#------------------------------------------------------------------------------\n# Displays the script usage and exits successfully\n#\nusage() {\n    basename=\"`expr \"//$0\" : '.*/\\([^/]*\\)'`\"\n    cat <<HELP\n\nUsage: $basename [options] path...\n\nWhere \"path\" is a relative path to a git module, including '.'.\n\nOptions:\n  --dry-run           Does everything except tagging and uploading tarballs\n  --force             Force overwriting an existing release\n  --help              Display this help and exit successfully\n  --no-quit           Do not quit after error; just print error message\n\nHELP\n}\n\n#------------------------------------------------------------------------------\n#\t\t\tScript main line\n#------------------------------------------------------------------------------\n#\n\n# Choose which grep program to use (on Solaris, must be gnu grep)\nif [ \"x$GREP\" = \"x\" ] ; then\n    if [ -x /usr/gnu/bin/grep ] ; then\n\tGREP=/usr/gnu/bin/grep\n    else\n\tGREP=grep\n    fi\nfi\n\n# Process command line args\nwhile [ $# != 0 ]\ndo\n    case $1 in\n    # Does everything except uploading tarball\n    --dry-run)\n\tDRY_RUN=yes\n\t;;\n    # Force overwriting an existing release\n    # Use only if nothing changed in the git repo\n    --force)\n\tFORCE=yes\n\t;;\n    # Display this help and exit successfully\n    --help)\n\tusage\n\texit 0\n\t;;\n    # Do not quit after error; just print error message\n    --no-quit)\n\tNO_QUIT=yes\n\t;;\n    --*)\n\techo \"\"\n\techo \"Error: unknown option: $1\"\n\techo \"\"\n\tusage\n\texit 1\n\t;;\n    -*)\n\techo \"\"\n\techo \"Error: unknown option: $1\"\n\techo \"\"\n\tusage\n\texit 1\n\t;;\n    *)\n\tINPUT_MODULES=\"${INPUT_MODULES} $1\"\n\t;;\n    esac\n\n    shift\ndone\n\n# If no modules specified (blank cmd line) display help\ncheck_modules_specification\n\n# Loop through each module to release\n# Exit on error if --no-quit no specified\nprocess_modules\n\n# Print the epilog with final status\nprint_epilog\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}