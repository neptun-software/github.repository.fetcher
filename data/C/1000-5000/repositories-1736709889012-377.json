{
  "metadata": {
    "timestamp": 1736709889012,
    "page": 377,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "minoca/os",
      "stars": 2724,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 1.0458984375,
          "content": "*.c diff=cpp text=auto whitespace=trailing-space,space-before-tab,tab-in-indent\n*.h diff=cpp text=auto whitespace=trailing-space,space-before-tab,tab-in-indent\n*.ck diff=cpp text=auto whitespace=trailing-space,space-before-tab,tab-in-indent\n*.S text=auto whitespace=trailing-space,space-before-tab,tab-in-indent\n*.inc text=auto whitespace=trailing-space,space-before-tab,tab-in-indent\nMakefile text=auto whitespace=trailing-space,space-before-tab\n*.mk text=auto whitespace=trailing-space,space-before-tab,\nsources text=auto whitespace=trailing-space,space-before-tab\n*.sh text=auto whitespace=trailing-space,space-before-tab,tab-in-indent\n*.py text=auto whitespace=trailing-space,space-before-tab,tab-in-indent\n*.asl text=auto whitespace=trailing-space,space-before-tab,tab-in-indent\n*.y text=auto whitespace=trailing-space,space-before-tab,tab-in-indent\n*.l text=auto whitespace=trailing-space,space-before-tab,tab-in-indent\n*.md text=auto whitespace=trailing-space,space-before-tab,tab-in-indent\ncommon text=auto whitespace=trailing-space,space-before-tab\n*.bin binary\n"
        },
        {
          "name": ".gitconfig",
          "type": "blob",
          "size": 0.7412109375,
          "content": "##\n## To activate this configuration (recommended), add the following include\n## section to your .git/config file (without the # characters).\n##\n## [include]\n##     path = ../.gitconfig\n##\n\n##\n## Set a better diff hunk header filter that ignores function comments.\n##\n\n[diff \"cpp\"]\n\txfuncname = \"!^[ \\t]*[A-Za-z_][A-Za-z_0-9]*:[[:space:]]*($|/[/*])\\n!:$\\n^((::[[:space:]]*)?[A-Za-z_].*)$\"\n\n[grep]\n\tlinenumber = true\n\n##\n## Always rebase when pulling, since we don't like merge commits.\n##\n\n[pull]\n\trebase = true\n\n##\n## Show the nice stat graph when doing git pull, which now defaults to rebase.\n##\n\n[rebase]\n\tstat = true\n\n##\n## Set up windiff as a guitool. To activate this, set diff.guitool to windiff.\n##\n\n[difftool \"windiff\"]\n\tcmd = windiff $LOCAL $REMOTE\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.033203125,
          "content": "# Ignore Chalk object files.\n*.cko"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.2802734375,
          "content": "# Contributing to Minoca OS\n\nMinoca OS is a new project, and there is a ton of work to do. We need your help! If you're interested in writing features, porting drivers, fixing bugs, writing tests, creating documentation, filling out examples, or helping out in any other way, we'd love the help.\n\nIf you've already got an idea of what you'd like to work on, great. Check out our [wish list](https://github.com/minoca/os/blob/master/docs/WISHLIST.md) page if you're looking for ideas on what to work on.\n\n### Contributor Agreement\n\nWe at Minoca are trying to make open source work as a business model. One of the ways we're doing that is by offering Minoca OS source for sale under more proprietary licensing terms. To do this Minoca needs to own the copyright to its source. In order to support this business model while also allowing community contributions, we ask that contributors sign a Contributor Assignment Agreement. We're using [Harmony Agreements](http://harmonyagreements.org/). Before submitting patches, please fill out the CAA for [individuals](https://www.minocacorp.com/ca/individual/) or [companies](https://www.minocacorp.com/ca/entity/).\n\n### Submissions\nPatches and submissions can be sent to minoca-dev@googlegroups.com. Security issues should be directed towards security@minocacorp.com.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 31.9736328125,
          "content": "This software is distributed under the terms of the GNU General Public License\nversion 3 (GPLv3). Minoca offers alternative licensing choices for sale.\nContact info@minocacorp.com if you or your company are interested in licensing\nthis software under alternate terms.\n\n                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.6015625,
          "content": "################################################################################\n#\n#   Copyright (c) 2012 Minoca Corp.\n#\n#    This file is licensed under the terms of the GNU General Public License\n#    version 3. Alternative licensing terms are available. Contact\n#    info@minocacorp.com for details. See the LICENSE file at the root of this\n#    project for complete licensing information.\n#\n#   Module Name:\n#\n#       Minoca OS\n#\n#   Abstract:\n#\n#       This file is responsible for kicking off the build of all source\n#       directories.\n#\n#   Author:\n#\n#       Evan Green 19-Jun-2012\n#\n#   Environment:\n#\n#       Build\n#\n################################################################################\n\n##\n## Check for the necessary environment variables.\n##\n\nifndef SRCROOT\n$(error Error: Environment not set up: SRCROOT environment variable missing)\nendif\n\nifndef ARCH\n$(error Error: Environment not set up: ARCH environment variable missing)\nendif\n\nifndef DEBUG\n$(error Error: Environment not set up: DEBUG environment variable missing)\nendif\n\nLIBRARIES = lib          \\\n\nCOMPONENTS = apps        \\\n             boot        \\\n             drivers     \\\n             kernel      \\\n             uefi        \\\n\nDIRS = $(LIBRARIES)      \\\n       $(COMPONENTS)     \\\n       images\n\ninclude $(SRCROOT)/os/minoca.mk\n\nimages: $(COMPONENTS)\n$(COMPONENTS): $(LIBRARIES)\n\n##\n## Boot and UEFI need KD from the kernel (which could be moved out to a\n## library). Drivers and apps (which may also build some drivers) link against\n## the kernel.\n##\n\nboot drivers apps uefi: kernel\n\n##\n## Boot relies on UEFI for the elfconv tool.\n##\n\nboot: uefi\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.4853515625,
          "content": "# Minoca OS\n\nMinoca OS is a general purpose operating system written from scratch. It aims to be lean, maintainable, modular, and compatible with existing software. It features a POSIX-like interface towards application software, and a growing suite of popular packages already built and ready to go. On the backend, it contains a powerful driver model between device drivers and the kernel. The driver model enables drivers to be written in a forward compatible manner, so that kernel level components can be upgraded without necessarily requiring a recompilation of all device drivers.\n\nMinoca OS is event driven, preemptible, SMP ready, and network capable. It currently runs on x86 PCs and a range of ARM boards.\n\n### Screenshots\n![Installing Git on Minoca OS](docs/screenshots/Installing-Git.png)\n![Memory Profiler](docs/screenshots/Memory-Profiler.png)\n![Stack Profiler](docs/screenshots/Stack-Profiler.png)\n\n### Getting Started\nIf you're just looking to try out Minoca OS, head over to our [download](https://www.minocacorp.com/download/) page to grab the latest stable images. The rest of this page describes how to use this repository to build your own custom image of Minoca OS.\n\n## Building Minoca OS\nThe paragraphs below will get you from a fresh clone to a built image.\n\n### Environment\nThe Minoca OS build environment is keyed off of a few environment variables you'll need to set in order to orient the build system:\n - `SRCROOT` - Contains the absolute path to the base source directory. This respository is expected to be in a directory called `os` inside `SRCROOT`. If the third-party or tools repositories are present, they should be in directories called `third-party` and `tools` respectively underneath `SRCROOT`. For example, if you had checked out this repository into `~/src/os`, then in your shell you'd run `export SRCROOT=~/src`.\n - `ARCH` - Contains the architecture to build Minoca OS for (aka the target architecture). Valid values are `armv6`, `armv7`, and `x86`.\n - `VARIANT` - Contains the architecture variant, if any. Leave this unset most of the time. Currently the only valid value is `q` for the `x86` architecture, which builds for the Intel Quark.\n - `DEBUG` - Describes whether to build Minoca OS for debugging or release. Valid values are `dbg` for debug or `rel` for release. We always build `dbg`.\n - `PATH` - You'll need to have `$SRCROOT/$ARCH$VARIANT$DEBUG/tools/bin` in your path to build successfully.\n\n### Prerequisites\nTo build Minoca OS you'll need a Minoca-specific toolchain for the particular architecture you're building. Prebuilt toolchains can be found [here](https://www.minocacorp.com/download/#toolchain). If you want to build the toolchain from sources, you'll need to check out the [third-party](https://gitlab.com/minoca/third-party) repository and run \"make tools\" in there.\n> Note: If you want to build your own toolchain on Windows, you may find the [tools](https://gitlab.com/minoca/tools) repository helpful, as it contains a native MinGW compiler, make, and other tools needed to bootstrap a toolchain on Windows.\n\n### Build\nRun `make` to build the OS for the particular architecture you've supplied. Parallel make is supported. The final output of the build will be several .img files located in `$SRCROOT/$ARCH$VARIANT$DEBUG/bin/*.img`. For example, the PC image is usually located at `$SRCROOT/x86dbg/bin/pc.img`. This is a raw hard disk file that can be applied directly to a hard drive or USB stick to boot Minoca OS. The image `install.img` is a generic installation archive that the `msetup` tool can use to create new Minoca OS installations on target disks or partitions.\n\nObject files are generated in `$SRCROOT/$ARCH$VARIANT$DEBUG/obj/os`. You can run `make clean`, or simply delete this directory, to cause the os repository to completely rebuild. Alternatively, you can run `make wipe` to delete all generated files, including the third-party tools you built or downloaded. Running `make wipe` simply deletes `$SRCROOT/$ARCH$VARIANT$DEBUG/`. We usually stick to `make clean` since `make wipe` requires a complete rebuild of the toolchain.\n\nA note for macOS users: We've managed to build successfully using both GCC from XCode 8 (really clang) and Homebrew GCC, both using the 10.12 SDK. Some users have reported that they need to export `SDKROOT=$(xcrun --show-sdk-path)` to build properly.\n\n### Running\nTo boot your built images, you can write the appropriate image for the platform you're trying to boot to a USB flash drive or hard disk. On Windows, you can use the Win32DiskImager tool (included in the [tools](https://gitlab.com/minoca/tools) repository under win32/Win32DiskImager). You can also use the msetup tool to build custom images. If you use the msetup tool to install Minoca OS onto a partition of a disk containing other partitions that you care about (such as on the same machine you're building from), we highly recommend making a complete backup of your disk. Minoca OS is still new, and we wouldn't want a bad bug to wipe out all your data.\n\nIf you're building Minoca OS on Windows and have downloaded the [tools](https://gitlab.com/minoca/tools) repository, several shortcuts have been set up to allow you to quickly run a Qemu instance with the images you've just built. Make sure you fired up the development environment with the setenv.cmd script. Type `run`, then `dx` to fire up an x86 Qemu instance of pc.img with a kernel debugger attached. We use this internally for faster development. If building for ARM, it's `runarm` and `da`.\n\n### Nickel Tour\nBelow is a brief orientation of a few of the directories in the repository. Check the Makefile in each directory for a more detailed description of what that directory contains.\n * `apps` - User mode applications and libraries\n   * `ck` - Chalk, an embeddable scripting language\n   * `debug` - Debugger application\n   * `libc` - The Minoca OS C Library\n   * `osbase` - The Minoca kernel API library\n   * `setup` - The msetup build tool\n   * `swiss` - POSIX tools in a box\n * `boot` - Executables used during system boot\n   * `mbr` - The Master Boot Record\n   * `fatboot` - The Volume Boot Record for FAT file systems\n   * `bootman` - The Minoca Boot Manager\n   * `loader` - The Minoca OS loader\n   * `lib` - Libraries shared across multiple boot executables\n * `drivers` - Device drivers\n   * `acpi` - ACPI platform driver, with AML interpreter\n   * `fat` - FAT file system driver\n   * `gpio` - GPIO core library and SoC drivers\n   * `net` - Networking support\n     * `ethernet` - Wired ethernet controller drivers\n     * `net80211` - Core 802.11 support\n     * `netcore` - Core networking support (TCP, UDP, IP, ARP, etc)\n     * `wireless` - 802.11 wireless controller drivers\n   * `pci` - PCI support\n   * `sd` - SD/MMC support\n   * `spb` - Serial Peripheral Bus drivers (I2C, SPI)\n   * `special` - Special devices (/dev/null, full, zero)\n   * `usb` - USB support\n     * `ehci` - EHCI host controller support\n     * `usbcomp` - USB composite device support\n     * `usbhid` - USB HID support\n     * `usbhub` - USB hub support\n     * `usbkbd` - USB keyboard support\n     * `usbmass` - USB mass storage support\n     * `usbmouse` - USB mouse support\n   * `input` - User input drivers\n   * `videocon` - Video terminal console driver\n * `images` - Recipes to create the final images for each supported platform\n * `include` - Public header files\n * `kernel` - The Minoca OS kernel\n   * `ke` - High level executive functions\n   * `mm` - Memory management\n   * `io` - Input/Output subsystem\n   * `kd` - Kernel debug support\n   * `hl` - Low level hardware layer support\n   * `ob` - Object management\n   * `ps` - Process and thread management\n   * `sp` - System profiler support\n * `lib` - Common libraries used throughout boot, kernel, and user mode.\n   * `basevid` - Library for drawing text on a framebuffer\n   * `fatlib` - FAT file system library\n   * `im` - ELF/PE image library\n   * `partlib` - Partition library\n   * `rtl` - General runtime library (printf, date/time, memcpy, etc)\n   * `termlib` - Terminal support library\n * `tasks` - Internal automation configuration\n * `uefi` - Minimal UEFI implementation for platforms supported by Minoca OS.\n   * `core` - Platform-agnostic UEFI firmware core\n   * `dev` - UEFI device libraries\n   * `plat` - Recipes and code for specific platforms\n     * `beagbone` - BeagleBone Black firmware\n     * `bios` - UEFI over BIOS firmware\n     * `integcp` - Integrator/CP firmware (for ARM Qemu)\n     * `panda` - TI PandaBoard firmware\n     * `rpi` - Raspberry Pi 1 firmware\n     * `rpi2` - Raspberry Pi 2 and 3 firmware\n     * `veyron` - Asus C201 Chromebook firmware\n   * `tools` - Tools used in building final firmware images\n\n## Contributing\nSubmissions are welcome! See our [CONTRIBUTING.md](CONTRIBUTING.md) page for details, or our [WISHLIST](docs/WISHLIST.md) page for suggestions. Bugs can be reported here on Github.\n\n## License\nMinoca OS is licensed to the public under the terms of the GNU General Public License, version 3. Alternate licensing options are available. Contact info@minocacorp.com if your company is interested in licensing Minoca OS. For complete licensing information, see the [LICENSE](LICENSE) file in this repository.\n\n## Contact\n * Email: minoca-dev@googlegroups.com\n   * Contact security@minocacorp.com for security related issues.\n   * Contact info@minocacorp.com for private or business inquries.\n * Website: [http://www.minocacorp.com/](http://www.minocacorp.com)\n * Github: [https://github.com/minoca](https://github.com/minoca)\n * Gitlab: [https://gitlab.com/minoca](https://gitlab.com/minoca)\n * IRC: [ircs://irc.oftc.net:6697/minoca-os](ircs://irc.oftc.net:6697/minoca-os)\n\n"
        },
        {
          "name": "apps",
          "type": "tree",
          "content": null
        },
        {
          "name": "boot",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.ck",
          "type": "blob",
          "size": 0.798828125,
          "content": "/*++\n\nCopyright (c) 2016 Minoca Corp.\n\n    This file is licensed under the terms of the GNU General Public License\n    version 3. Alternative licensing terms are available. Contact\n    info@minocacorp.com for details. See the LICENSE file at the root of this\n    project for complete licensing information.\n\nModule Name:\n\n    Minoca OS\n\nAbstract:\n\n    This module contains the top level build target for Minoca OS.\n\nAuthor:\n\n    Evan Green 14-Apr-2016\n\nEnvironment:\n\n    Build\n\n--*/\n\nimport menv;\nfrom menv import setupEnv, group;\n\nfunction build() {\n    var allGroup;\n    var entries;\n    var tools;\n\n    tools = setupEnv();\n    entries = [\n        \"lib:test_apps\",\n        \"images:\"\n    ];\n\n    allGroup = group(\"all\", entries);\n    allGroup[0].default = true;\n    entries = allGroup + tools;\n    return entries;\n}\n\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "drivers",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "kernel",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "menv.ck",
          "type": "blob",
          "size": 38.2578125,
          "content": "/*++\n\nCopyright (c) 2017 Minoca Corp.\n\n    This file is licensed under the terms of the GNU General Public License\n    version 3. Alternative licensing terms are available. Contact\n    info@minocacorp.com for details. See the LICENSE file at the root of this\n    project for complete licensing information.\n\nModule Name:\n\n    env.ck\n\nAbstract:\n\n    This build module contains the environment and functions used throughout\n    the Minoca OS build.\n\nAuthor:\n\n    Evan Green 1-Feb-2017\n\nEnvironment:\n\n    Build\n\n--*/\n\n//\n// -------------------------------------------------------------------- Imports\n//\n\nfrom mingen import config;\nfrom os import getenv, basename;\n\n//\n// -------------------------------------------------------------------- Globals\n//\n\nvar mconfig;\n\n//\n// ------------------------------------------------------------------ Functions\n//\n\nfunction\ninitListFromEnvironment (\n    name,\n    default\n    )\n\n/*++\n\nRoutine Description:\n\n    This routine gets an environment variable. It either returns that\n    environment variable wrapped in a list, or the given default.\n\nArguments:\n\n    name - Supplies the name of the environment variable.\n\n    default - Supplies the default value to return if not set.\n\nReturn Value:\n\n    Returns eithe the provided default or has the contents of the environment\n    variable wrapped in a list.\n\n--*/\n\n{\n\n    var value = getenv(name);\n\n    if (value != null) {\n        return [value];\n    }\n\n    return default;\n}\n\nfunction\ngetTools (\n    )\n\n/*++\n\nRoutine Description:\n\n    This routine is called as part of setupEnv, at the end. It returns the\n    basic set of tools used by the environment.\n\nArguments:\n\n    None.\n\nReturn Value:\n\n    Returns a list of the basic tools used in the environment.\n\n--*/\n\n{\n\n    var buildCflagsLine = \"$BUILD_BASE_CPPFLAGS $CPPFLAGS \" +\n                          \"$BUILD_BASE_CFLAGS $CFLAGS -MMD -MF $OUT.d \";\n\n    var buildAsflagsLine = buildCflagsLine +\n                           \"$BUILD_BASE_ASFLAGS $ASFLAGS \";\n\n    var buildLdflagsLine = \"$BUILD_BASE_LDFLAGS $LDFLAGS \";\n    var cflagsLine = \"$BASE_CPPFLAGS $CPPFLAGS $BASE_CFLAGS $CFLAGS \"\n                     \"-MMD -MF $OUT.d \";\n\n    var asflagsLine = cflagsLine + \"$BASE_ASFLAGS $ASFLAGS \";\n    var entries;\n    var ldflagsLine = \"-Wl,-Map=$OUT.map $BASE_LDFLAGS $LDFLAGS \";\n    var symlinkCommand = \"ln -sf $SYMLINK_IN $OUT\";\n    var buildLdLine = \"$BUILD_CC \" + buildLdflagsLine +\n                      \"-o $OUT $IN -Bdynamic $DYNLIBS\";\n\n    var tools;\n\n    if (mconfig.build_os == \"Windows\") {\n        symlinkCommand = \"cp $IN $OUT\";\n    }\n\n    //\n    // On Mac OS there shouldn't be a -Bdynamic flag to indicate the start of\n    // the dynamic libraries section.\n    //\n\n    if (mconfig.build_os == \"Darwin\") {\n        buildLdLine = \"$BUILD_CC \" + buildLdflagsLine +\n                      \"-o $OUT $IN $DYNLIBS\";\n\n    //\n    // Create a .map file (except on Mac, which doesn't support it).\n    //\n\n    } else {\n        buildLdflagsLine = \"-Wl,-Map=$OUT.map \" + buildLdflagsLine;\n    }\n\n    //\n    // Define the tools used.\n    //\n\n    tools = [\n\n    //\n    // C compiler for target binaries.\n    //\n\n    {\n        \"type\": \"tool\",\n        \"name\": \"cc\",\n        \"command\": \"$CC \" + cflagsLine + \"-c -o $OUT $IN\",\n        \"description\": \"Compiling - $IN\",\n        \"depsformat\": \"gcc\",\n        \"depfile\": \"$OUT.d\"\n    },\n\n    //\n    // C++ compiler for target binaries.\n    //\n\n    {\n        \"type\": \"tool\",\n        \"name\": \"cxx\",\n        \"command\": \"$CXX \" + cflagsLine + \"-c -o $OUT $IN\",\n        \"description\": \"Compiling - $IN\",\n        \"depsformat\": \"gcc\",\n        \"depfile\": \"$OUT.d\"\n    },\n\n    //\n    // Linker for target binaries.\n    //\n\n    {\n        \"type\": \"tool\",\n        \"name\": \"ld\",\n        \"command\": \"$CC \" + ldflagsLine + \"-o $OUT $IN -Bdynamic $DYNLIBS\",\n        \"description\": \"Linking - $OUT\",\n    },\n\n    //\n    // Static archiver for target binaries.\n    //\n\n    {\n        \"type\": \"tool\",\n        \"name\": \"ar\",\n        \"command\": \"$AR rcs $OUT $IN\",\n        \"description\": \"Building Library - $OUT\",\n    },\n\n    //\n    // Assembler for target binaries.\n    //\n\n    {\n        \"type\": \"tool\",\n        \"name\": \"as\",\n        \"command\": \"$CC \" + asflagsLine + \"-c -o $OUT $IN\",\n        \"description\": \"Assembling - $IN\",\n        \"depsformat\": \"gcc\",\n        \"depfile\": \"$OUT.d\"\n    },\n\n    //\n    // Objcopy for target binaries.\n    //\n\n    {\n        \"type\": \"tool\",\n        \"name\": \"objcopy\",\n        \"command\": \"$SHELL -c \\\"cd `dirname $IN` && \"\n                   \"$OBJCOPY $OBJCOPY_FLAGS `basename $IN` $OUT\\\"\",\n\n        \"description\": \"Objectifying - $IN\"\n    },\n\n    //\n    // Strip for target binaries.\n    //\n\n    {\n        \"type\": \"tool\",\n        \"name\": \"strip\",\n        \"command\": \"$STRIP $STRIP_FLAGS -o $OUT $IN\",\n        \"description\": \"Stripping - $OUT\",\n    },\n\n    //\n    // C compiler for the build machine.\n    //\n\n    {\n        \"type\": \"tool\",\n        \"name\": \"build_cc\",\n        \"command\": \"$BUILD_CC \" + buildCflagsLine + \"-c -o $OUT $IN\",\n        \"description\": \"Compiling - $IN\",\n        \"depsformat\": \"gcc\",\n        \"depfile\": \"$OUT.d\"\n    },\n\n    //\n    // C++ compiler for the build machine.\n    //\n\n    {\n        \"type\": \"tool\",\n        \"name\": \"build_cxx\",\n        \"command\": \"$BUILD_CXX \" + buildCflagsLine + \"-c -o $OUT $IN\",\n        \"description\": \"Compiling - $IN\",\n        \"depsformat\": \"gcc\",\n        \"depfile\": \"$OUT.d\"\n    },\n\n    //\n    // Linker for the build machine.\n    //\n\n    {\n        \"type\": \"tool\",\n        \"name\": \"build_ld\",\n        \"command\": \"$BUILD_CC \" + buildLdflagsLine +\n                   \"-o $OUT $IN -Bdynamic $DYNLIBS\",\n\n        \"description\": \"Linking - $OUT\",\n    },\n\n    //\n    // Static archiver for the build machine.\n    //\n\n    {\n        \"type\": \"tool\",\n        \"name\": \"build_ar\",\n        \"command\": \"$BUILD_AR rcs $OUT $IN\",\n        \"description\": \"Building Library - $OUT\",\n    },\n\n    //\n    // Assembler for the build machine.\n    //\n\n    {\n        \"type\": \"tool\",\n        \"name\": \"build_as\",\n        \"command\": \"$BUILD_CC \" + buildAsflagsLine + \"-c -o $OUT $IN\",\n        \"description\": \"Assembling - $IN\",\n        \"depsformat\": \"gcc\",\n        \"depfile\": \"$OUT.d\"\n    },\n\n    //\n    // Strip for the build machine.\n    //\n\n    {\n        \"type\": \"tool\",\n        \"name\": \"build_strip\",\n        \"command\": \"$BUILD_STRIP $STRIP_FLAGS -o $OUT $IN\",\n        \"description\": \"Stripping - $OUT\",\n    },\n\n    //\n    // Windows resource compiler for the build machine.\n    //\n\n    {\n        \"type\": \"tool\",\n        \"name\": \"build_rcc\",\n        \"command\": \"$RCC -o $OUT $IN\",\n        \"description\": \"Compiling Resource - $IN\",\n    },\n\n    //\n    // ACPI assembler used to build firmware images.\n    //\n\n    {\n        \"type\": \"tool\",\n        \"name\": \"iasl\",\n        \"command\": \"$SHELL -c \\\"$IASL $IASL_FLAGS -p $OUT $IN > $OUT.stdout\\\"\",\n        \"description\": \"Compiling ASL - $IN\"\n    },\n\n    //\n    // Copy files from one location to another.\n    //\n\n    {\n        \"type\": \"tool\",\n        \"name\": \"copy\",\n        \"command\": \"$SHELL -c \\\"cp $CPFLAGS $IN $OUT && [ -z $CHMOD_FLAGS ] || \"\n                   \"chmod $CHMOD_FLAGS $OUT\\\"\",\n\n        \"description\": \"Copying - $IN -> $OUT\"\n    },\n\n    //\n    // Create symbolic links (or just copy on Windows).\n    //\n\n    {\n        \"type\": \"tool\",\n        \"name\": \"symlink\",\n        \"command\": symlinkCommand,\n        \"description\": \"Symlinking - $OUT\"\n    },\n\n    //\n    // Touch a file with the date.\n    //\n\n    {\n        \"type\": \"tool\",\n        \"name\": \"stamp\",\n        \"command\": \"$SHELL -c \\\"date > $OUT\\\"\",\n        \"description\": \"Stamp - $OUT\"\n    },\n\n    //\n    // Touch to create a timestamped empty file.\n    //\n\n    {\n        \"type\": \"tool\",\n        \"name\": \"touch\",\n        \"command\": \"touch $OUT\",\n        \"description\": \"Touch - $OUT\"\n    },\n\n    //\n    // Create a directory.\n    //\n\n    {\n        \"type\": \"tool\",\n        \"name\": \"mkdir\",\n        \"command\": \"mkdir -p $OUT\",\n        \"description\": \"mkdir $OUT\"\n    },\n\n    //\n    // Generate a version.h.\n    //\n\n    {\n        \"type\": \"tool\",\n        \"name\": \"gen_version\",\n        \"command\": \"$SHELL $S/tasks/build/print_version.sh $OUT $FORM \"\n                   \"$MAJOR $MINOR $REVISION $RELEASE $SERIAL $BUILD_STRING\",\n\n        \"description\": \"Versioning - $OUT\"\n    }];\n\n    return tools;\n}\n\nfunction\nsetupEnv (\n    )\n\n/*++\n\nRoutine Description:\n\n    This routine is called once to set up the build environment.\n\nArguments:\n\n    None.\n\nReturn Value:\n\n    Returns the basic set of tools used by the environment.\n\n--*/\n\n{\n\n    var archVariant;\n\n    //\n    // Prefer Ninja files.\n    //\n\n    config.format ?= \"ninja\";\n\n    //\n    // Set up the Minoca config dictionary.\n    //\n\n    mconfig = {};\n    mconfig.build_os = config.build_os;\n    mconfig.build_machine = config.build_machine;\n    mconfig.build_variant = \"\";\n    if (mconfig.build_machine == \"i686\") {\n        mconfig.build_arch = \"x86\";\n\n    } else if (mconfig.build_machine == \"i586\") {\n        mconfig.build_arch = \"x86\";\n        mconfig.build_variant = \"q\";\n\n    } else if ((mconfig.build_machine == \"armv7\") ||\n               (mconfig.build_machine == \"armv6\")) {\n\n        mconfig.build_arch = mconfig.build_machine;\n\n    } else if (mconfig.build_machine == \"x86_64\") {\n        mconfig.build_arch = \"x64\";\n    }\n\n    mconfig.arch = getenv(\"ARCH\");\n    mconfig.arch ?= mconfig.build_arch;\n    mconfig.arch ?= \"x86\";\n    mconfig.debug = getenv(\"DEBUG\");\n    mconfig.debug ?= \"dbg\";\n    mconfig.variant = getenv(\"VARIANT\");\n    mconfig.variant ?= mconfig.build_variant;\n    mconfig.release_level = \"SystemReleaseDevelopment\";\n    mconfig.cflags = initListFromEnvironment(\"CFLAGS\",\n                                             [\"-O2\", \"-Wall\", \"-Werror\"]);\n\n    mconfig.kernelCflags = [];\n    mconfig.cppflags = initListFromEnvironment(\"CPPFLAGS\", []);\n    mconfig.ldflags = initListFromEnvironment(\"LDFLAGS\", []);\n    mconfig.asflags = initListFromEnvironment(\"ASFLAGS\", []);\n    mconfig.stripflags = initListFromEnvironment(\"STRIP_FLAGS\", []);\n    mconfig.build_cc = getenv(\"BUILD_CC\");\n    mconfig.build_cc ?= \"gcc\";\n    mconfig.build_ar = getenv(\"BUILD_AR\");\n    mconfig.build_ar ?= \"ar\";\n    mconfig.build_strip = getenv(\"BUILD_STRIP\");\n    mconfig.build_strip ?= \"strip\";\n    config.output ?= \"$S/../\" + mconfig.arch + mconfig.variant + mconfig.debug +\n                     \"/obj/os\";\n\n    mconfig.outroot = \"$O/../..\";\n    mconfig.binroot = mconfig.outroot + \"/bin\";\n    mconfig.stripped = mconfig.binroot + \"/stripped\";\n    mconfig.cc = getenv(\"CC\");\n    mconfig.ar = getenv(\"AR\");\n    mconfig.objcopy = getenv(\"OBJCOPY\");\n    mconfig.strip = getenv(\"STRIP\");\n    mconfig.rcc = getenv(\"RCC\");\n    mconfig.rcc ?= \"windres\";\n    mconfig.iasl = getenv(\"IASL\");\n    mconfig.iasl ?= \"iasl\";\n    mconfig.shell = getenv(\"SHELL\");\n    mconfig.shell ?= \"sh\";\n    mconfig.target = null;\n\n    //\n    // Add in the command line variables, then define the derived variables.\n    //\n\n    for (key in config.cmdvars) {\n        mconfig[key] = config.cmdvars[key];\n    }\n\n    archVariant = mconfig.arch + mconfig.variant;\n    if (!mconfig.target) {\n        if (archVariant == \"x86\") {\n            mconfig.target = \"i686-pc-minoca\";\n\n        } else if (archVariant == \"x86q\") {\n            mconfig.target = \"i586-pc-minoca\";\n\n        } else if ((mconfig.arch == \"armv7\") || (mconfig.arch == \"armv6\")) {\n            mconfig.target = \"arm-none-minoca\";\n\n        } else if (mconfig.arch == \"x64\") {\n            mconfig.target = \"x86_64-pc-minoca\";\n\n        } else {\n            Core.raise(ValueError(\"Unknown architecture\" + mconfig.arch));\n        }\n    }\n\n    mconfig.native = false;\n    if ((mconfig.build_os == \"Minoca\") &&\n        (mconfig.arch == mconfig.build_arch)) {\n\n        mconfig.native = true;\n    }\n\n    if (mconfig.native) {\n        mconfig.cc ?= mconfig.build_cc;\n        mconfig.ar ?= mconfig.build_ar;\n        mconfig.strip ?= mconfig.build_strip;\n        mconfig.objcopy ?= \"objcopy\";\n\n    } else {\n        mconfig.cc ?= mconfig.target + \"-gcc\";\n        mconfig.ar ?= mconfig.target + \"-ar\";\n        mconfig.strip ?= mconfig.target + \"-strip\";\n        mconfig.objcopy ?= mconfig.target + \"-objcopy\";\n    }\n\n    if (mconfig.debug == \"dbg\") {\n        mconfig.cflags += [\"-DDEBUG=1\"];\n\n    } else {\n        mconfig.cflags += [\"-Wno-unused-but-set-variable\", \"-DNDEBUG\"];\n    }\n\n    mconfig.cflags += [\"-fno-builtin\",\n                       \"-g\",\n                       \"-save-temps=obj\",\n                       \"-ffunction-sections\",\n                       \"-fdata-sections\",\n                       \"-fvisibility=hidden\"];\n\n    mconfig.cppflags += [\"-I$S/include\"];\n    mconfig.build_cflags = [] + mconfig.cflags;\n    mconfig.build_cppflags = [] + mconfig.cppflags;\n    mconfig.cflags += [\"-fpic\"];\n\n    //\n    // Windows cannot handle -fpic, but everyone else can.\n    //\n\n    if (mconfig.build_os == \"Windows\") {\n        mconfig.build_cflags += [\"-mno-ms-bitfields\"];\n\n    } else {\n        mconfig.build_cflags += [\"-fpic\"];\n    }\n\n    if (mconfig.build_os == \"Darwin\") {\n        mconfig.build_cflags += [\"-Wno-tautological-compare\",\n                                 \"-Wno-parentheses-equality\"];\n    }\n\n    //\n    // Add some architecture variant flags.\n    //\n\n    if (archVariant == \"x86q\") {\n        mconfig.cppflags += [\"-Wa,-momit-lock-prefix=yes\", \"-march=i586\"];\n\n    } else if (archVariant == \"x64\") {\n        mconfig.kernelCflags = [\"-mno-sse\", \"-mno-red-zone\"];\n\n    } else if (archVariant == \"armv6\") {\n        mconfig.cflags += [\"-march=armv6zk\", \"-marm\", \"-mfpu=vfp\"];\n    }\n\n    mconfig.build_asflags = [];\n    mconfig.asflags += [\"-Wa,-g\"];\n    mconfig.build_ldflags = initListFromEnvironment(\"BUILD_LDFLAGS\",\n                                                    [] + mconfig.ldflags);\n\n    mconfig.ldflags += [\"-Wl,--gc-sections\"];\n\n    //\n    // Mac OS cannot handle --gc-sections or strip -p.\n    //\n\n    if (mconfig.build_os != \"Darwin\") {\n        mconfig.build_ldflags += [\"-Wl,--gc-sections\"];\n        mconfig.stripflags += [\"-p\"];\n    }\n\n    //\n    // Define the set of variables that get passed all the way through to the\n    // final Make/ninja file. Passing these on as variables rather than\n    // substituting during the mingen build process allows for a smaller\n    // build file, and easier manual tweaking by the user.\n    //\n\n    config.vars = {\n        \"BUILD_CC\": mconfig.build_cc,\n        \"BUILD_AR\": mconfig.build_ar,\n        \"BUILD_STRIP\": mconfig.build_strip,\n        \"CC\": mconfig.cc,\n        \"AR\": mconfig.ar,\n        \"STRIP\": mconfig.strip,\n        \"OBJCOPY\": mconfig.objcopy,\n        \"RCC\": mconfig.rcc,\n        \"IASL\": mconfig.iasl,\n        \"SHELL\": mconfig.shell,\n        \"BASE_CFLAGS\": mconfig.cflags,\n        \"KERNEL_CFLAGS\": mconfig.kernelCflags,\n        \"BASE_CPPFLAGS\": mconfig.cppflags,\n        \"BASE_LDFLAGS\": mconfig.ldflags,\n        \"BASE_ASFLAGS\": mconfig.asflags,\n        \"BUILD_BASE_CFLAGS\": mconfig.build_cflags,\n        \"BUILD_BASE_CPPFLAGS\": mconfig.build_cppflags,\n        \"BUILD_BASE_LDFLAGS\": mconfig.build_ldflags,\n        \"BUILD_BASE_ASFLAGS\": mconfig.build_asflags,\n        \"STRIP_FLAGS\": mconfig.stripflags,\n        \"IASL_FLAGS\": [\"-we\"],\n        \"CPFLAGS\": \"-p\",\n    };\n\n    if (config.verbose) {\n        Core.print(\"Minoca Build Configuration:\");\n        for (key in mconfig) {\n            Core.print(\"\\t%s: %s\" % [key, mconfig[key].__str()]);\n        }\n    }\n\n    return getTools();\n}\n\nfunction\naddConfig (\n    entry,\n    name,\n    value\n    )\n\n/*++\n\nRoutine Description:\n\n    This routine adds a configure option to a list, ensuring that both the\n    config dictionary and option already exist.\n\nArguments:\n\n    entry - Supplies the entry to add the configure option to.\n\n    name - Supplies the name of the option to add.\n\n    value - Supplies the new value to add to the list of options.\n\nReturn Value:\n\n    None.\n\n--*/\n\n{\n\n    if (!entry.get(\"config\")) {\n        entry.config = {};\n    }\n\n    if (!entry.config.get(name)) {\n        entry.config[name] = [];\n    }\n\n    entry.config[name] += [value];\n    return;\n}\n\nfunction\ngroup (\n    name,\n    entries\n    )\n\n/*++\n\nRoutine Description:\n\n    This routine creates a phony target that groups a bunch of different\n    targets together under a common name.\n\nArguments:\n\n    name - Supplies the name of the new group target.\n\n    entries - Supplies the list of entries.\n\nReturn Value:\n\n    Returns a list containing the entry for the group target.\n\n--*/\n\n{\n    var entry = {\n        \"label\": name,\n        \"type\": \"target\",\n        \"tool\": \"phony\",\n        \"inputs\": entries,\n        \"config\": {}\n    };\n\n    return [entry];\n}\n\nfunction\ntouch (\n    destination,\n    destinationLabel,\n    mode\n    )\n\n/*++\n\nRoutine Description:\n\n    This routine creates an empty file target.\n\nArguments:\n\n    destination - Supplies the copy destination.\n\n    destinationLabel - Supplies a label naming the target.\n\n    mode - Supplies the chmod mode of the destination.\n\nReturn Value:\n\n    Returns a list containing the copy entry.\n\n--*/\n\n{\n\n    var config = {};\n\n    if (mode) {\n        config[\"CHMOD_FLAGS\"] = mode;\n    }\n\n    destinationLabel ?= destination;\n    var entry = {\n        \"type\": \"target\",\n        \"tool\": \"touch\",\n        \"label\": destinationLabel,\n        \"output\": destination,\n        \"config\": config\n    };\n\n    return [entry];\n}\n\nfunction\nmakedir (\n    destination,\n    destinationLabel\n    )\n\n/*++\n\nRoutine Description:\n\n    This routine creates an empty directory target.\n\nArguments:\n\n    destination - Supplies the copy destination.\n\n    destinationLabel - Supplies a label naming the target.\n\nReturn Value:\n\n    Returns a list containing the copy entry.\n\n--*/\n\n{\n\n    destinationLabel ?= destination;\n    var entry = {\n        \"type\": \"target\",\n        \"tool\": \"mkdir\",\n        \"label\": destinationLabel,\n        \"output\": destination,\n    };\n\n    return [entry];\n}\n\nfunction\ncopy (\n    source,\n    destination,\n    destinationLabel,\n    flags,\n    mode\n    )\n\n/*++\n\nRoutine Description:\n\n    This routine creates a target that copies a file from one place to another.\n\nArguments:\n\n    source - Supplies the source to copy.\n\n    destination - Supplies the copy destination.\n\n    destinationLabel - Supplies a label naming the copy target.\n\n    flags - Supplies the flags to include in the copy.\n\n    mode - Supplies the chmod mode of the destination.\n\nReturn Value:\n\n    Returns a list containing the copy entry.\n\n--*/\n\n{\n\n    var config = {};\n\n    if (flags) {\n        config[\"CPFLAGS\"] = flags;\n    }\n\n    if (mode) {\n        config[\"CHMOD_FLAGS\"] = mode;\n    }\n\n    var entry = {\n        \"type\": \"target\",\n        \"tool\": \"copy\",\n        \"label\": destinationLabel,\n        \"inputs\": [source],\n        \"output\": destination,\n        \"config\": config\n    };\n\n    if (!destinationLabel) {\n        entry[\"label\"] = destination;\n    }\n\n    return [entry];\n}\n\nfunction\nstrip (\n    params\n    )\n\n/*++\n\nRoutine Description:\n\n    This routine converts an entry to a strip entry, where the target will be\n    stripped.\n\nArguments:\n\n    params - Supplies the existing entry.\n\nReturn Value:\n\n    Returns a list containing the strip entry.\n\n--*/\n\n{\n\n    params.type = \"target\";\n    params.tool = \"strip\";\n    if (params.get(\"build\")) {\n        params.tool = \"build_strip\";\n    }\n\n    return [params];\n}\n\nfunction\nbinplace (\n    params\n    )\n\n/*++\n\nRoutine Description:\n\n    This routine replaces the current target with a copied version in the\n    final bin directory. This will also create a stripped version in the\n    stripped directory unless told not to.\n\nArguments:\n\n    params - Supplies the existing entry.\n\nReturn Value:\n\n    Returns a list containing the strip entry.\n\n--*/\n\n{\n\n    var build = params.get(\"build\");\n    var copiedEntry;\n    var cpflags = params.get(\"cpflags\");;\n    var destination;\n    var destinationLabel;\n    var destinationPath;\n    var element;\n    var entries = [];\n    var extraCopy;\n    var fileName;\n    var label = params.get(\"label\");\n    var mode = params.get(\"mode\");\n    var newOriginalLabel;\n    var originalTarget;\n    var source = params.get(\"output\");\n    var strippedEntry;\n    var strippedOutput;\n\n    label ?= source;\n    source ?= label;\n    if ((!label) || (!source)) {\n        Core.raise(ValueError(\"Label or output must be defined\"));\n    }\n\n    //\n    // Set the output since the label is going to be renamed and create the\n    // copy target.\n    //\n\n    params.output = source;\n    params.type = \"target\";\n    fileName = basename(source);\n    destination = params.get(\"binplace\");\n    newOriginalLabel = label + \"_orig\";\n    originalTarget = \":\" + newOriginalLabel;\n\n    //\n    // Create the first or only one with the genuine label.\n    //\n\n    element = destination;\n    if (element is List) {\n        element = element[0];\n    }\n\n    if (!element) {\n        element = \"bin\";\n    }\n\n    destinationPath = mconfig.outroot + \"/\" + element + \"/\" + fileName;\n    copiedEntry = copy(originalTarget,\n                       destinationPath,\n                       label,\n                       cpflags,\n                       mode)[0];\n\n    entries.append(copiedEntry);\n\n    //\n    // Handle binplacing into several areas.\n    //\n\n    if (destination is List) {\n        for (index in 1..destination.length()) {\n            element = destination[index];\n            if (!element) {\n                element = \"bin\";\n            }\n\n            destinationPath = mconfig.outroot + \"/\" + element + \"/\" + fileName;\n            destinationLabel = \"%s_%d\" % [label, index];\n            extraCopy = copy(originalTarget,\n                             destinationPath,\n                             destinationLabel,\n                             cpflags,\n                             mode)[0];\n\n            copiedEntry.implicit = [\":\" + destinationLabel];\n            entries.append(extraCopy);\n        }\n    }\n\n    //\n    // The original label was given to the copied destination, so tack an _orig\n    // on the source label.\n    //\n\n    params.label = newOriginalLabel;\n\n    //\n    // Unless asked not to, create a stripped entry as well.\n    //\n\n    if (!params.get(\"nostrip\")) {\n        if (build) {\n            strippedOutput = mconfig.stripped + \"/build/\" + fileName;\n\n        } else {\n            strippedOutput = mconfig.stripped + \"/\" + fileName;\n        }\n\n        strippedEntry = {\n            \"label\": label + \"_stripped\",\n            \"inputs\": [originalTarget],\n            \"output\": strippedOutput,\n            \"build\": build,\n        };\n\n        //\n        // Make the binplaced copy depend on the stripped version.\n        //\n\n        copiedEntry.implicit = [\":\" + strippedEntry[\"label\"]];\n        entries += strip(strippedEntry);\n    }\n\n    entries.append(params);\n    return entries;\n}\n\nfunction\ncompiledSources (\n    params\n    )\n\n/*++\n\nRoutine Description:\n\n    This routine compiles a group of object file targets from source files.\n\nArguments:\n\n    params - Supplies the entry with inputs filled out.\n\nReturn Value:\n\n    Returns the list containing a list of object names, and a list of object\n    targets.\n\n--*/\n\n{\n\n    var build = params.get(\"build\");\n    var entries = [];\n    var ext;\n    var includes = params.get(\"includes\");\n    var inputParts;\n    var inputs = params.inputs;\n    var objName;\n    var obj;\n    var objs = [];\n    var sourcesConfig = params.get(\"sources_config\");\n    var prefix = params.get(\"prefix\");\n    var suffix;\n    var tool;\n\n    if (includes) {\n        sourcesConfig ?= {};\n        if (!sourcesConfig.get(\"CPPFLAGS\")) {\n            sourcesConfig.CPPFLAGS = [];\n        }\n\n        for (include in includes) {\n            sourcesConfig[\"CPPFLAGS\"] += [\"-I\" + include];\n        }\n    }\n\n    if (inputs.length() == 0) {\n        Core.raise(ValueError(\"Compilation must have inputs\"));\n    }\n\n    for (input in inputs) {\n        inputParts = input.rsplit(\".\", 1);\n        try {\n            ext = inputParts[1];\n\n        } except IndexError {\n            ext = \"\";\n        }\n\n        suffix = \".o\";\n        if (ext == \"c\") {\n            tool = \"cc\";\n\n        } else if (ext == \"cc\") {\n            tool = \"cxx\";\n\n        } else if (ext == \"S\") {\n            tool = \"as\";\n\n        } else if (ext == \"rc\") {\n            tool = \"rcc\";\n            suffix = \".rsc\";\n\n        } else {\n            objs += [input];\n            continue;\n        }\n\n        if (build) {\n            tool = \"build_\" + tool;\n        }\n\n        objName = inputParts[0] + suffix;\n        if (objName[0] == \":\") {\n            objName = objName[1...-1];\n        }\n\n        if (prefix) {\n            objName = prefix + \"/\" + objName;\n        }\n\n        obj = {\n            \"type\": \"target\",\n            \"label\": objName,\n            \"output\": objName,\n            \"inputs\": [input],\n            \"tool\": tool,\n            \"config\": sourcesConfig,\n        };\n\n        entries += [obj];\n        objs += [\":\" + objName];\n    }\n\n    if (prefix) {\n        if (!params.get(\"output\")) {\n            params.output = params.label;\n        }\n\n        params.output = prefix + \"/\" + params.output;\n    }\n\n    return [objs, entries];\n}\n\nfunction\nexecutable (\n    params\n    )\n\n/*++\n\nRoutine Description:\n\n    This routine links a set of sources into some sort of executable or shared\n    object.\n\nArguments:\n\n    params - Supplies the entry with inputs filled out.\n\nReturn Value:\n\n    Returns the list of the linked entry.\n\n--*/\n\n{\n\n    var build = params.get(\"build\");\n    var entry = params.get(\"entry\");\n    var compilation = compiledSources(params);\n    var linkerScript = params.get(\"linker_script\");\n    var objs = compilation[0];\n    var entries = compilation[1];\n    var textAddress = params.get(\"text_address\");;\n\n    params.type = \"target\";\n    params.inputs = objs;\n    params.tool = \"ld\";\n    if (build) {\n        params.tool = \"build_ld\";\n    }\n\n    //\n    // Convert options for text_address, linker_script, and entry to actual\n    // LDFLAGS.\n    //\n\n    if (textAddress) {\n        addConfig(params, \"LDFLAGS\", \"-Wl,-Ttext-segment=\" + textAddress);\n        addConfig(params,\n                  \"LDFLAGS\",\n                  \"-Wl,--section-start,.init=\" + textAddress);\n    }\n\n    if (linkerScript) {\n        addConfig(params, \"LDFLAGS\", \"-Wl,-T\" + linkerScript);\n    }\n\n    if (entry != null) {\n        addConfig(params, \"LDFLAGS\", \"-Wl,-e\" + entry);\n        addConfig(params, \"LDFLAGS\", \"-Wl,-u\" + entry);\n    }\n\n    if (params.get(\"binplace\")) {\n        entries += binplace(params);\n\n    } else {\n        entries += [params];\n    }\n\n    return entries;\n}\n\nfunction\napplication (\n    params\n    )\n\n/*++\n\nRoutine Description:\n\n    This routine creates a position independent application.\n\nArguments:\n\n    params - Supplies the entry with inputs filled out.\n\nReturn Value:\n\n    Returns the list of the application entry.\n\n--*/\n\n{\n\n    var build = params.get(\"build\");\n    var exename = params.get(\"output\");\n\n    exename ?= params.get(\"label\");\n    if (!exename) {\n        Core.raise(ValueError(\"Missing output or label\"));\n    }\n\n    if (build && (mconfig.build_os == \"Windows\")) {\n        params.output = exename + \".exe\";\n    }\n\n    if (build && (mconfig.build_os == \"Darwin\")) {\n        addConfig(params, \"LDFLAGS\", \"-Wl,-pie\");\n\n    } else {\n        addConfig(params, \"LDFLAGS\", \"-pie\");\n    }\n\n    if ((!build) && (params.get(\"binplace\") == null)) {\n        params.binplace = \"bin\";\n    }\n\n    return executable(params);\n}\n\nfunction\nstaticApplication (\n    params\n    )\n\n/*++\n\nRoutine Description:\n\n    This routine creates a static application suitable for kernel or firmware\n    environments.\n\nArguments:\n\n    params - Supplies the entry with inputs filled out.\n\nReturn Value:\n\n    Returns the list of the application entry.\n\n--*/\n\n{\n\n    if (!(params.get(\"sources_config\") is Dict)) {\n        params.sources_config = {};\n    }\n\n    if (!(params.sources_config.get(\"CFLAGS\") is List)) {\n        params.sources_config.CFLAGS = [];\n    }\n\n    params.sources_config.CFLAGS += [\"$KERNEL_CFLAGS\"];\n    addConfig(params, \"LDFLAGS\", \"-static\");\n    addConfig(params, \"LDFLAGS\", \"-nostdlib\");\n    return executable(params);\n}\n\nfunction\nsharedLibrary (\n    params\n    )\n\n/*++\n\nRoutine Description:\n\n    This routine creates a shared library or DLL.\n\nArguments:\n\n    params - Supplies the entry with inputs filled out.\n\nReturn Value:\n\n    Returns the list of the application entry.\n\n--*/\n\n{\n\n    var build = params.get(\"build\");\n    var majorVersion = params.get(\"major_version\");\n    var minorVersion = params.get(\"minor_version\");\n    var soname = params.get(\"soname\");\n\n    soname ?= params.get(\"output\");\n    soname ?= params.get(\"label\");\n    if (!soname) {\n        Core.raise(ValueError(\n                          \"One of output, label, or soname must be defined.\"));\n    }\n\n    //\n    // Darwin shared libraries build with a whole different ballgame of options.\n    //\n\n    if (build && (mconfig.build_os == \"Darwin\")) {\n        majorVersion ?= \"0\";\n        minorVersion ?= \"0\";\n        soname += \".%s.dylib\" % majorVersion;\n        addConfig(params,\n                  \"LDFLAGS\",\n                  \"-undefined dynamic_lookup -dynamiclib\");\n\n        addConfig(params,\n                  \"LDFLAGS\",\n                  \"-current_version %s.%s\" % [majorVersion, minorVersion]);\n\n        addConfig(params,\n                  \"LDFLAGS\",\n                  \"-compatibility_version %s.%d\" % [majorVersion, 0]);\n\n\n    } else {\n        addConfig(params, \"LDFLAGS\", \"-shared\");\n        if ((!build) || (mconfig.build_os != \"Windows\")) {\n            soname += \".so\";\n            if (majorVersion != null) {\n                soname += \".\" + majorVersion;\n            }\n\n            addConfig(params, \"LDFLAGS\", \"-Wl,-soname=\" + soname);\n\n        } else {\n            soname += \".dll\";\n        }\n    }\n\n    params.output = soname;\n    if ((!build) && (params.get(\"binplace\") == null)) {\n        params.binplace = \"bin\";\n    }\n\n    return executable(params);\n}\n\nfunction\nstaticLibrary (\n    params\n    )\n\n/*++\n\nRoutine Description:\n\n    This routine creates a static library.\n\nArguments:\n\n    params - Supplies the entry with inputs filled out.\n\nReturn Value:\n\n    Returns the list of the application entry.\n\n--*/\n\n{\n\n    var build = params.get(\"build\");\n    var compilation = compiledSources(params);\n    var objs = compilation[0];\n    var output;\n    var entries = compilation[1];\n\n    params.type = \"target\";\n    output = params.get(\"output\");\n    output ?= params.get(\"label\");\n    if (!output) {\n        Core.raise(ValueError(\"output or label must be defined\"));\n    }\n\n    params.output = output + \".a\";\n    params.inputs  = objs;\n    params.tool = \"ar\";\n    if (build) {\n        params.tool = \"build_ar\";\n    }\n\n    if (params.get(\"binplace\")) {\n        entries += binplace(params);\n\n    } else {\n        entries += [params];\n    }\n\n    return entries;\n}\n\nfunction\nkernelLibrary (\n    params\n    )\n\n/*++\n\nRoutine Description:\n\n    This routine creates a static library compiled suitably for running within\n    the kernel.\n\nArguments:\n\n    params - Supplies the entry with inputs filled out.\n\nReturn Value:\n\n    Returns the list of the application entry.\n\n--*/\n\n{\n\n    if (!(params.get(\"sources_config\") is Dict)) {\n        params.sources_config = {};\n    }\n\n    if (!(params.sources_config.get(\"CFLAGS\") is List)) {\n        params.sources_config.CFLAGS = [];\n    }\n\n    params.sources_config.CFLAGS += [\"$KERNEL_CFLAGS\"];\n    return staticLibrary(params);\n}\n\nfunction\ncompiledAsl (\n    inputs\n    )\n\n/*++\n\nRoutine Description:\n\n    This routine creates a list of compiled .aml files from a list of .asl\n    files.\n\nArguments:\n\n    params - Supplies the entry with inputs filled out.\n\nReturn Value:\n\n    Returns a list where the first element is a list of all the resulting\n    target names, and the second element is a list of the target entries.\n\n--*/\n\n{\n\n    var entries = [];\n    var ext;\n    var inputParts;\n    var objName;\n    var obj;\n    var objs = [];\n\n    if (inputs.length() == 0) {\n        Core.raise(ValueError(\"Compilation must have inputs\"));\n    }\n\n    for (input in inputs) {\n        inputParts = input.rsplit(\".\", 1);\n        ext = inputParts[1];\n        objName = inputParts[0] + \".aml\";\n        obj = {\n            \"type\": \"target\",\n            \"label\": objName,\n            \"output\": objName,\n            \"inputs\": [input],\n            \"tool\": \"iasl\"\n        };\n\n        entries += [obj];\n        objs += [\":\" + objName];\n    }\n\n    return [objs, entries];\n}\n\nfunction\nobjectifiedBinaries (\n    params\n    )\n\n/*++\n\nRoutine Description:\n\n    This routine creates a group of object file targets from binary files.\n\nArguments:\n\n    params - Supplies the entry with inputs filled out.\n\nReturn Value:\n\n    Returns a list of object names in the first element and the object file\n    target entries in the second element.\n\n--*/\n\n{\n\n    var build = params.get(\"build\");\n    var entries = [];\n    var inputs = params.inputs;\n    var obj;\n    var objcopyConfig = params.get(\"config\");\n    var objName;\n    var objs = [];\n    var prefix = params.get(\"prefix\");\n    var tool;\n\n    if (inputs.length() == 0) {\n        Core.raise(ValueError(\"Compilation must have inputs\"));\n    }\n\n    for (input in inputs) {\n        tool = \"objcopy\";\n        if (build) {\n            tool = \"build_objcopy\";;\n        }\n\n        objName = input + \".o\";\n        if (prefix) {\n            objName = prefix + \"/\" + objName;\n        }\n\n        obj = {\n            \"type\": \"target\",\n            \"label\": objName,\n            \"output\": objName,\n            \"inputs\": [input],\n            \"tool\": tool,\n            \"config\": objcopyConfig,\n        };\n\n        entries += [obj];\n        objs += [\":\" + objName];\n    }\n\n    if (prefix) {\n        params.output ?= params.label;\n        params.output = prefix + \"/\" + params.output;\n    }\n\n    return [objs, entries];\n}\n\nfunction\nobjectifiedBinary (\n    params\n    )\n\n/*++\n\nRoutine Description:\n\n    This routine creates a single object file from a binary file.\n\nArguments:\n\n    params - Supplies the entry with inputs filled out.\n\nReturn Value:\n\n    Returns a list of the object file.\n\n--*/\n\n{\n    return objectifiedBinaries(params)[1];\n}\n\nfunction\nobjectifiedLibrary (\n    params\n    )\n\n/*++\n\nRoutine Description:\n\n    This routine creates a library from a set of objectified files.\n\nArguments:\n\n    params - Supplies the entry with inputs filled out.\n\nReturn Value:\n\n    Returns a list of the object file.\n\n--*/\n\n{\n\n    var build = params.get(\"build\");\n    var compilation = objectifiedBinaries(params);\n    var objs = compilation[0];\n    var entries = compilation[1];\n    var output = params.get(\"output\");\n\n    params.type = \"target\";\n    output ?= params.label;\n    params.output = output + \".a\";\n    params.inputs = objs;\n    params.tool = \"ar\";\n    if (build) {\n        params.tool = \"build_ar\";\n    }\n\n    entries += [params];\n    return entries;\n}\n\n//\n// Create a flat binary from an executable image.\n//\n\nfunction\nflattenedBinary (\n    params\n    )\n\n/*++\n\nRoutine Description:\n\n    This routine creates a flat binary from an executable image.\n\nArguments:\n\n    params - Supplies the entry with inputs filled out.\n\nReturn Value:\n\n    Returns a list of the flat binary.\n\n--*/\n\n{\n\n    var entries;\n\n    params.type = \"target\";\n    params.tool = \"objcopy\";\n    addConfig(params, \"OBJCOPY_FLAGS\", \"-O binary\");\n    if (params.get(\"binplace\")) {\n        params.nostrip = true;\n        entries = binplace(params);\n\n    } else {\n        entries = [params];\n    }\n\n    return entries;\n}\n\nfunction\ndriver (\n    params\n    )\n\n/*++\n\nRoutine Description:\n\n    This routine creates a Minoca kernel driver.\n\nArguments:\n\n    params - Supplies the entry with inputs filled out.\n\nReturn Value:\n\n    Returns a list of the driver entry.\n\n--*/\n\n{\n\n    var soname = params.get(\"output\");\n\n    if (!params.get(\"entry\")) {\n        params.entry = \"DriverEntry\";\n    }\n\n    if (!(params.get(\"sources_config\") is Dict)) {\n        params.sources_config = {};\n    }\n\n    if (!(params.sources_config.get(\"CFLAGS\") is List)) {\n        params.sources_config.CFLAGS = [];\n    }\n\n    params.sources_config.CFLAGS += [\"$KERNEL_CFLAGS\"];\n    params.binplace = \"bin\";\n    soname ?= params.get(\"label\");\n    if (soname != \"kernel\") {\n        soname += \".drv\";\n        params.output = soname;\n        params.inputs += [\"kernel:kernel\"];\n    }\n\n    addConfig(params, \"LDFLAGS\", \"-shared\");\n    addConfig(params, \"LDFLAGS\", \"-Wl,-soname=\" + soname);\n    addConfig(params, \"LDFLAGS\", \"-nostdlib\");\n    return executable(params);\n}\n\nfunction\nuefiRuntimeFfs (\n    name\n    )\n\n/*++\n\nRoutine Description:\n\n    This routine creates a runtime driver .FFS file from an ELF file.\n\nArguments:\n\n    params - Supplies the entry with inputs filled out.\n\nReturn Value:\n\n    Returns a list of the .FFS entry.\n\n--*/\n\n{\n\n    var elfconvConfig;\n    var ffs;\n    var pe;\n\n    elfconvConfig = {\n        \"ELFCONV_FLAGS\": \"-t efiruntimedriver\"\n    };\n\n    pe = {\n        \"type\": \"target\",\n        \"label\": name,\n        \"inputs\": [\":\" + name + \".elf\"],\n        \"implicit\": [\"uefi/tools/elfconv:elfconv\"],\n        \"tool\": \"elfconv\",\n        \"config\": elfconvConfig\n    };\n\n    ffs = {\n        \"type\": \"target\",\n        \"label\": name + \".ffs\",\n        \"inputs\": [\":\" + name],\n        \"implicit\": [\"uefi/tools/genffs:genffs\"],\n        \"tool\": \"genffs_runtime\"\n    };\n\n    return [pe, ffs];\n}\n\nfunction\nuefiFwvol (\n    path,\n    name,\n    ffs\n    )\n\n/*++\n\nRoutine Description:\n\n    This routine creates a UEFI firmware volume object file based on a platform\n    name and a list of FFS inputs.\n\nArguments:\n\n    path - Supplies the path to the source. The object directory version of\n        this path will be added to the include path.\n\n    name - Supplies the name of the firmware volume.\n\n    ffs - Supplies the FFS inputs.\n\nReturn Value:\n\n    Returns a list of the firmware volume entry.\n\n--*/\n\n{\n\n    var fwv;\n    var fwvO;\n    var fwvName = name + \"fwv\";\n    var fwvS;\n\n    fwv = {\n        \"type\": \"target\",\n        \"label\": fwvName,\n        \"inputs\": ffs,\n        \"implicit\": [\"uefi/tools/genfv:genfv\"],\n        \"tool\": \"genfv\"\n    };\n\n    fwvS = {\n        \"inputs\": [fwvName + \".S\"],\n        \"includes\": [\"$O/\" + path]\n    };\n\n    fwvO = compiledSources(fwvS);\n    fwvO = fwvO[1][0];\n    fwvO[\"implicit\"] = [\":\" + fwvName];\n    return [fwv, fwvO];\n}\n\n//\n// Define a function that creates a version.h file target.\n//\n\nfunction\ncreateVersionHeader (\n    major,\n    minor,\n    revision\n    )\n\n/*++\n\nRoutine Description:\n\n    This routine creates a version.h header that includes aspects of the\n    build environment.\n\nArguments:\n\n    major - Supplies the major number.\n\n    minor - Supplies the minor number.\n\n    revision - Supplies the revision.\n\nReturn Value:\n\n    Returns a list of the firmware volume entry.\n\n--*/\n\n{\n\n    var versionConfig;\n    var versionH;\n\n    versionConfig = {\n        \"FORM\": \"header\",\n        \"MAJOR\": major,\n        \"MINOR\": minor,\n        \"REVISION\": revision,\n        \"RELEASE\": mconfig.release_level\n    };\n\n    versionH = {\n        \"type\": \"target\",\n        \"output\": \"version.h\",\n        \"inputs\": [\"$S/.git/HEAD\"],\n        \"tool\": \"gen_version\",\n        \"config\": versionConfig\n    };\n\n    return [versionH];\n}\n\n"
        },
        {
          "name": "minoca.mk",
          "type": "blob",
          "size": 11.52734375,
          "content": "################################################################################\n#\n#   Copyright (c) 2012 Minoca Corp.\n#\n#    This file is licensed under the terms of the GNU General Public License\n#    version 3. Alternative licensing terms are available. Contact\n#    info@minocacorp.com for details. See the LICENSE file at the root of this\n#    project for complete licensing information.\n#\n#   Module Name:\n#\n#       OS Project Makefile\n#\n#   Abstract:\n#\n#       This file implements the base Makefile that all other makefiles include.\n#\n#   Author:\n#\n#       Evan Green 26-Jul-2012\n#\n#   Environment:\n#\n#       Build\n#\n################################################################################\n\n##\n## Define the default target.\n##\n\nall:\n\n##\n## Don't let make use any builtin rules.\n##\n\n.SUFFIXES:\n\n##\n## Define the architecture and object of the build machine.\n##\n\nOS ?= $(shell uname -s)\nifneq ($(findstring CYGWIN,$(shell uname -s)),)\nOS := cygwin\nendif\n\nBUILD_ARCH = $(shell uname -m)\nifeq ($(BUILD_ARCH), $(filter i686 i586,$(BUILD_ARCH)))\nBUILD_ARCH := x86\n\nelse ifeq ($(BUILD_ARCH), $(filter armv7 armv6,$(BUILD_ARCH)))\n\nelse ifeq ($(BUILD_ARCH), $(filter x86_64 amd64,$(BUILD_ARCH)))\nBUILD_ARCH := x64\nelse\n$(error Unknown architecture $(BUILD_ARCH))\nendif\n\n##\n## Define build locations.\n##\n\nSRCROOT := $(subst \\,/,$(SRCROOT))\nOUTROOT := $(SRCROOT)/$(ARCH)$(VARIANT)$(DEBUG)\nTOOLROOT := $(OUTROOT)/tools\nTOOLBIN := $(TOOLROOT)/bin\nBINROOT := $(OUTROOT)/bin\nTESTBIN := $(OUTROOT)/testbin\nOBJROOT := $(OUTROOT)/obj\nSTRIPPED_DIR := $(BINROOT)/stripped\n\nCURDIR := $(subst \\,/,$(CURDIR))\n\n##\n## If the current directory is not in the object root, then change to the\n## object directory and re-run make from there. The condition is \"if removing\n## OBJROOT makes no change\".\n##\n\nifeq ($(CURDIR), $(subst $(OBJROOT),,$(CURDIR)))\n\nTHISDIR := $(subst $(SRCROOT)/,,$(CURDIR))\nOBJDIR := $(OBJROOT)/$(THISDIR)\nMAKETARGET = $(MAKE) --no-print-directory -C $@ -f $(CURDIR)/Makefile \\\n    -I$(CURDIR) $(MAKECMDGOALS) SRCDIR=$(CURDIR)\n\n.PHONY: $(OBJDIR) clean wipe\n\n$(OBJDIR):\n\t+@[ -d $@ ] || mkdir -p $@\n\t+@$(MAKETARGET)\n\nclean:\n\trm -rf $(OBJROOT)/$(THISDIR)\n\nwipe:\n\trm -rf $(OBJROOT)\n\trm -rf $(BINROOT)\n\trm -rf $(TESTBIN)\n\trm -rf $(TOOLROOT)\n\nMakefile: ;\n%.mk :: ;\n% :: $(OBJDIR) ; @:\n\n##\n## If the current directory appears to be outside of SRCROOT, then there's a\n## problem. Having a symlink somewhere in SRCROOT causes this.\n##\n\nifeq ($(CURDIR), $(subst $(SRCROOT),,$(CURDIR)))\n$(error The current directory $(CURDIR) does not appear to be a subdirectory \\\nof SRCROOT=$(SRCROOT). Do you have a symlink in SRCROOT?)\nendif\n\nelse\n\nTHISDIR := $(subst $(OBJROOT)/,,$(CURDIR))\n\n##\n## VPATH specifies which directories make should look in to find all files.\n## Paths are separated by colons.\n##\n\nVPATH += :$(SRCDIR):\n\n##\n## Executable variables\n##\n\nCC_FOR_BUILD ?= gcc\nAR_FOR_BUILD ?= ar\nSTRIP_FOR_BUILD ?= strip\n\nifeq ($(OS), $(filter Windows_NT Minoca,$(OS)))\nCECHO_CYAN ?= cecho -fC\nelse\nCECHO_CYAN ?= echo\nendif\n\nRCC := windres\n\nifeq (x86, $(ARCH)$(VARIANT))\nCC := i686-pc-minoca-gcc\nAR := i686-pc-minoca-ar\nOBJCOPY := i686-pc-minoca-objcopy\nSTRIP := i686-pc-minoca-strip\n\nendif\n\nifeq (x86q, $(ARCH)$(VARIANT))\nCC := i586-pc-minoca-gcc\nAR := i586-pc-minoca-ar\nOBJCOPY := i586-pc-minoca-objcopy\nSTRIP := i586-pc-minoca-strip\nRCC := windres\nendif\n\nifeq (x64, $(ARCH))\nCC := x86_64-pc-minoca-gcc\nAR := x86_64-pc-minoca-ar\nOBJCOPY := x86_64-pc-minoca-objcopy\nSTRIP := x86_64-pc-minoca-strip\nendif\n\nifeq (armv7, $(ARCH))\nCC := arm-none-minoca-gcc\nAR := arm-none-minoca-ar\nOBJCOPY := arm-none-minoca-objcopy\nSTRIP := arm-none-minoca-strip\nendif\n\nifeq (armv6, $(ARCH))\nCC := arm-none-minoca-gcc\nAR := arm-none-minoca-ar\nOBJCOPY := arm-none-minoca-objcopy\nSTRIP := arm-none-minoca-strip\nendif\n\n##\n## These define versioning information for the code.\n##\n\nGEN_VERSION := @echo \"Creating - version.h\" && $(SRCROOT)/os/tasks/build/print_version.sh\n\n##\n## Define a file that gets touched to indicate that something has changed and\n## images need to be rebuilt.\n##\n\nLAST_UPDATE_FILE := $(OBJROOT)/os/last-update\nUPDATE_LAST_UPDATE := date > $(LAST_UPDATE_FILE)\n\n##\n## Includes directory.\n##\n\nINCLUDES += $(SRCROOT)/os/include\n\n##\n## Define default CFLAGS if none were specified elsewhere.\n##\n\n# LTO_OPT ?= -flto\nCFLAGS ?= -Wall -Werror\nifeq ($(DEBUG),rel)\nCFLAGS += -O2 $(LTO_OPT) -Wno-unused-but-set-variable\nelse\nCFLAGS += -O1 $(LTO_OPT)\nendif\n\n##\n## Compiler flags\n##\n\nEXTRA_CPPFLAGS += -I $(subst ;, -I ,$(INCLUDES))\n\nifeq ($(DEBUG),rel)\nEXTRA_CPPFLAGS += -DNDEBUG=1\nelse\nEXTRA_CPPFLAGS += -DDEBUG=1\nendif\n\nEXTRA_CPPFLAGS_FOR_BUILD := $(EXTRA_CPPFLAGS)\n\nEXTRA_CFLAGS += -fno-builtin -fno-omit-frame-pointer -g -save-temps=obj \\\n                -ffunction-sections -fdata-sections -fvisibility=hidden\n\nifeq ($(ARCH),x64)\nKERNEL_CFLAGS += -mno-sse -mno-red-zone\nendif\n\nEXTRA_CFLAGS_FOR_BUILD := $(EXTRA_CFLAGS)\n\nifneq (,$(filter klibrary driver staticapp,$(BINARYTYPE)))\nEXTRA_CFLAGS += $(KERNEL_CFLAGS)\nendif\n\nEXTRA_CFLAGS += -fpic\nifneq ($(OS),$(filter Windows_NT cygwin,$(OS)))\nEXTRA_CFLAGS_FOR_BUILD += -fpic\nendif\n\nPIE := -pie\nifeq ($(OS),Darwin)\nEXTRA_CFLAGS_FOR_BUILD += -Wno-tautological-compare -Wno-parentheses-equality\nPIE := -Wl,-pie\nendif\n\n##\n## Restrict ARMv6 to armv6zk instructions to support the arm1176jzf-s.\n##\n\nifeq (armv6, $(ARCH))\nifneq ($(BINARYTYPE), build)\nEXTRA_CPPFLAGS += -march=armv6zk -marm -mfpu=vfp\nendif\nendif\n\nifeq (x86, $(ARCH))\nEXTRA_CFLAGS += -mno-ms-bitfields\n\n##\n## Quark has an errata that requires no LOCK prefixes on instructions.\n##\n\nifeq ($(VARIANT),q)\nifneq ($(BINARYTYPE), build)\nEXTRA_CPPFLAGS += -Wa,-momit-lock-prefix=yes -march=i586\nendif\nendif\n\nifeq ($(BINARYTYPE),app)\nEXTRA_CFLAGS += -mno-stack-arg-probe\nendif\nendif\n\nifeq ($(OS),Darwin)\nSTRIP_FLAGS :=\nelse\nSTRIP_FLAGS := -p\nendif\n\n##\n## Build binaries on windows need a .exe suffix.\n##\n\nifeq ($(OS),Windows_NT)\nifeq (x86, $(BUILD_ARCH))\nEXTRA_CFLAGS_FOR_BUILD += -mno-ms-bitfields\nendif\nifeq (build,$(BINARYTYPE))\nBINARY := $(BINARY).exe\nendif\nendif\n\n##\n## Linker flags\n##\n\nifneq (,$(TEXT_ADDRESS))\nEXTRA_LDFLAGS +=  -Wl,--section-start,.init=$(TEXT_ADDRESS) \\\n -Wl,-Ttext-segment=$(TEXT_ADDRESS)\n\nendif\n\nifneq (,$(LINKER_SCRIPT))\nEXTRA_LDFLAGS += -T$(LINKER_SCRIPT)\nendif\n\nifeq ($(BINARYTYPE),driver)\nEXTRA_LDFLAGS += -nostdlib -Wl,--no-undefined\nENTRY ?= DriverEntry\nBINARYTYPE := so\nendif\n\nifneq ($(ENTRY),)\nEXTRA_LDFLAGS += -Wl,-e,$(ENTRY)                            \\\n                 -Wl,-u,$(ENTRY)                            \\\n\nendif\n\n##\n## The Darwin linker can't handle -Map or --gc-sections.\n##\n\nEXTRA_LDFLAGS_FOR_BUILD := $(EXTRA_LDFLAGS)\n\nEXTRA_LDFLAGS += -Wl,-Map=$(BINARY).map                     \\\n                 -Wl,--gc-sections                          \\\n\nifneq ($(OS),Darwin)\nEXTRA_LDFLAGS_FOR_BUILD := $(EXTRA_LDFLAGS)\nendif\n\n##\n## Assembler flags\n##\n\nEXTRA_ASFLAGS += -Wa,-I$(SRCDIR)\nEXTRA_ASFLAGS_FOR_BUILD := $(EXTRA_ASFLAGS)\nEXTRA_ASFLAGS += -Wa,-g\n\n##\n## For build executables, override the names even if set on the command line.\n##\n\nifneq (, $(BUILD))\noverride CC = $(CC_FOR_BUILD)\noverride AR = $(AR_FOR_BUILD)\noverride STRIP = $(STRIP_FOR_BUILD)\noverride CFLAGS = -Wall -Werror -O1\nifeq ($(DEBUG),rel)\noverride CFLAGS += -Wno-unused-but-set-variable\nendif\n\noverride EXTRA_CFLAGS := $(EXTRA_CFLAGS_FOR_BUILD)\noverride EXTRA_CPPFLAGS := $(EXTRA_CPPFLAGS_FOR_BUILD)\noverride EXTRA_ASFLAGS := $(EXTRA_ASFLAGS_FOR_BUILD)\noverride CPPFLAGS :=\noverride LDFLAGS :=\noverride EXTRA_LDFLAGS := $(EXTRA_LDFLAGS_FOR_BUILD)\nendif\n\n##\n## Makefile targets. .PHONY specifies that the following targets don't actually\n## have files associated with them.\n##\n\n.PHONY: all clean wipe $(DIRS) $(TESTDIRS) prebuild postbuild\n\n##\n## prepend the current object directory to every extra directory.\n##\n\nEXTRA_OBJ_DIRS += $(EXTRA_SRC_DIRS:%=$(OBJROOT)/$(THISDIR)/%) $(STRIPPED_DIR)\n\nall: $(DIRS) $(TESTDIRS) $(BINARY) postbuild\n\n$(DIRS): $(OBJROOT)/$(THISDIR)\npostbuild: $(BINARY)\n\n$(TESTDIRS): $(BINARY)\n$(DIRS) $(TESTDIRS):\n\t@$(CECHO_CYAN) Entering Directory: $(SRCROOT)/$(THISDIR)/$@ && \\\n\t[ -d $@ ] || mkdir -p $@ && \\\n\t$(MAKE) --no-print-directory -C $@ -f $(SRCDIR)/$@/Makefile \\\n\t    $(MAKECMDGOALS) SRCDIR=$(SRCDIR)/$@ && \\\n\t$(CECHO_CYAN) Leaving Directory: $(SRCROOT)/$(THISDIR)/$@\n\n##\n## The dependencies of the binary object depend on the architecture and type of\n## binary being built.\n##\n\nifneq (, $(BUILD))\nSAVED_ARCH := $(ARCH)\nARCH := $(BUILD_ARCH)\nendif\n\nifeq (x86, $(ARCH))\nALLOBJS = $(X86_OBJS) $(OBJS)\nendif\n\nifeq (x64, $(ARCH))\nALLOBJS = $(X64_OBJS) $(OBJS)\nendif\n\nifeq (armv7, $(ARCH))\nALLOBJS = $(ARMV7_OBJS) $(OBJS)\nendif\n\nifeq (armv6, $(ARCH))\nALLOBJS = $(ARMV6_OBJS) $(OBJS)\nendif\n\nifneq (, $(BUILD))\nARCH := $(SAVED_ARCH)\nendif\n\nifneq (, $(strip $(ALLOBJS)))\n\n##\n## The object files are dependent on the object directory, but the object\n## directory being newer should not trigger a rebuild of the object files.\n##\n\n$(ALLOBJS): | $(OBJROOT)/$(THISDIR)\n\n$(BINARY): $(ALLOBJS) $(TARGETLIBS)\n    ifeq ($(BINARYTYPE),app)\n\t@echo Linking - $@\n\t@$(CC) $(CFLAGS) $(EXTRA_CFLAGS) $(LDFLAGS) $(EXTRA_LDFLAGS) $(PIE) -o $@ $^ -Bdynamic $(DYNLIBS)\n    endif\n    ifeq ($(BINARYTYPE),staticapp)\n\t@echo Linking - $@\n\t@$(CC) $(CFLAGS) $(EXTRA_CFLAGS) $(LDFLAGS) $(EXTRA_LDFLAGS) -static -o $@ -Wl,--start-group $^ -Wl,--end-group -Bdynamic $(DYNLIBS)\n    endif\n    ifneq (,$(filter library klibrary,$(BINARYTYPE)))\n\t@echo Building Library - $@\n\t@$(AR) rcs $@ $^ $(TARGETLIBS)\n    endif\n    ifeq ($(BINARYTYPE),so)\n\t@echo Linking - $@\n    ifneq ($(BUILD),)\n    ifeq ($(OS),Darwin)\n    # Mac OS (Darwin)\n\t@$(CC) $(CFLAGS) $(EXTRA_CFLAGS) $(LDFLAGS) $(EXTRA_LDFLAGS) -undefined dynamic_lookup -dynamiclib -current_version $(SO_VERSION_MAJOR).$(SO_VERSION_MINOR) -compatibility_version $(SO_VERSION_MAJOR).0 -o $@ $^ $(DYNLIBS)\n    else ifeq ($(OS),Windows_NT)\n    # Windows\n\t@$(CC) $(CFLAGS) $(EXTRA_CFLAGS) $(LDFLAGS) $(EXTRA_LDFLAGS) -shared -o $@ $^ -Bdynamic $(DYNLIBS)\n    else\n    # Generic ELF\n\t@$(CC) $(CFLAGS) $(EXTRA_CFLAGS) $(LDFLAGS) $(EXTRA_LDFLAGS) -shared -Wl,-soname=$(BINARY) -o $@ $^ -Bdynamic $(DYNLIBS)\n    endif\n    else\n    # Native build\n\t@$(CC) $(CFLAGS) $(EXTRA_CFLAGS) $(LDFLAGS) $(EXTRA_LDFLAGS) -shared -Wl,-soname=$(BINARY) -o $@ $^ -Bdynamic $(DYNLIBS)\n    endif\n    endif\n    ifeq ($(BINARYTYPE),build)\n\t@echo Linking - $@\n\t@$(CC) $(CFLAGS) $(EXTRA_CFLAGS) $(LDFLAGS) $(EXTRA_LDFLAGS) -o $@ $^ $(TARGETLIBS) -Bdynamic $(DYNLIBS)\n    endif\n    ifeq ($(BINARYTYPE),custom)\n\t@echo Building - $@\n\t@$(BUILD_COMMAND)\n    endif\n    ifneq ($(BINPLACE),)\n\t@echo Binplacing - $(OUTROOT)/$(BINPLACE)/$(BINARY)\n\t@mkdir -p $(OUTROOT)/$(BINPLACE)\n\t@cp -fp $(BINARY) $(OUTROOT)/$(BINPLACE)/$(BINARY)\n    ifeq ($(BINPLACE),bin)\n\t@$(STRIP) $(STRIP_FLAGS) -o $(STRIPPED_DIR)/$(BINARY) $(BINARY)\n\t@$(UPDATE_LAST_UPDATE)\n    endif\n    endif\n\nelse\n\n.PHONY: $(BINARY)\n\nendif\n\n##\n## Prebuild is an \"order-only\" dependency of this directory, meaning that\n## prebuild getting rebuilt does not cause this directory to need to be\n## rebuilt.\n##\n\n$(OBJROOT)/$(THISDIR): | prebuild $(BINROOT) $(TOOLBIN) $(TESTBIN) $(EXTRA_OBJ_DIRS)\n\t@mkdir -p $(OBJROOT)/$(THISDIR)\n\n$(BINROOT) $(TOOLBIN) $(TESTBIN) $(EXTRA_OBJ_DIRS):\n\t@mkdir -p $@\n\n##\n## Generic target specifying how to compile a file.\n##\n\n%.o:%.c\n\t@echo Compiling - $(notdir $<)\n\t@$(CC) $(CPPFLAGS) $(EXTRA_CPPFLAGS) $(CFLAGS) $(EXTRA_CFLAGS) -c -o $@ $<\n\n##\n## Generic target specifying how to assemble a file.\n##\n\n%.o:%.S\n\t@echo Assembling - $(notdir $<)\n\t@$(CC) $(CPPFLAGS) $(EXTRA_CPPFLAGS) $(ASFLAGS) $(EXTRA_ASFLAGS) -c -o $@ $<\n\n##\n## Generic target specifying how to compile a resource.\n##\n\n%.rsc:%.rc\n\t@echo Compiling Resource - $(notdir $<)\n\t@$(RCC) -o $@ $<\n\n##\n## This ends the originated-in-source-directory make.\n##\n\nendif\n\n"
        },
        {
          "name": "new.c",
          "type": "blob",
          "size": 1.1923828125,
          "content": "/*++\n\nCopyright (c) 2017 Minoca Corp.\n\n    This file is licensed under the terms of the GNU General Public License\n    version 3. Alternative licensing terms are available. Contact\n    info@minocacorp.com for details. See the LICENSE file at the root of this\n    project for complete licensing information.\n\nModule Name:\n\n    new.c\n\nAbstract:\n\n    This module\n\nAuthor:\n\n    Your Name <you@example.com> 1-Jan-2017\n\nEnvironment:\n\n    Kernel\n\n--*/\n\n//\n// ------------------------------------------------------------------- Includes\n//\n\n//\n// --------------------------------------------------------------------- Macros\n//\n\n//\n// ---------------------------------------------------------------- Definitions\n//\n\n//\n// ------------------------------------------------------ Data Type Definitions\n//\n\n//\n// ----------------------------------------------- Internal Function Prototypes\n//\n\n//\n// -------------------------------------------------------------------- Globals\n//\n\n//\n// ------------------------------------------------------------------ Functions\n//\n\n/*++\n\nRoutine Description:\n\n    This routine\n\nArguments:\n\nReturn Value:\n\n--*/\n\n//\n// --------------------------------------------------------- Internal Functions\n//\n\n"
        },
        {
          "name": "new.h",
          "type": "blob",
          "size": 0.943359375,
          "content": "/*++\n\nCopyright (c) 2017 Minoca Corp.\n\n    This file is licensed under the terms of the GNU General Public License\n    version 3. Alternative licensing terms are available. Contact\n    info@minocacorp.com for details. See the LICENSE file at the root of this\n    project for complete licensing information.\n\nModule Name:\n\n    new.h\n\nAbstract:\n\n    This header contains definitions for\n\nAuthor:\n\n    Your Name <you@example.com> 1-Jan-2017\n\n--*/\n\n//\n// ------------------------------------------------------------------- Includes\n//\n\n//\n// --------------------------------------------------------------------- Macros\n//\n\n//\n// ---------------------------------------------------------------- Definitions\n//\n\n//\n// ------------------------------------------------------ Data Type Definitions\n//\n\n//\n// -------------------------------------------------------------------- Globals\n//\n\n//\n// -------------------------------------------------------- Function Prototypes\n//\n"
        },
        {
          "name": "setenv.sh",
          "type": "blob",
          "size": 2.1171875,
          "content": "##\n## Small script to set the correct environment variables needed for building\n## Minoca OS. Source this into your current environment by running:\n## . ./setenv.sh\n##\n\nif [ \"`basename -- $0`\" = \"setenv.sh\" ]; then\n    echo \"Error: This script is meant to be sourced, not run. Use: '. $0' to \\\nsource it into your current environment\"\nfi\n\nif [ -z \"$SRCROOT\" ]; then\n    cd ..\n    export SRCROOT=$PWD\n    cd - > /dev/null\nfi\n\nif [ -z \"$ARCH\" ]; then\n    if [ \"`uname -s`\" = \"Minoca\" ]; then\n        case \"`uname -m`\" in\n        i586)  export ARCH=x86 VARIANT=q ;;\n        i686)  export ARCH=x86 ;;\n        armv6) export ARCH=armv6 ;;\n        armv7) export ARCH=armv7 ;;\n        *)     export ARCH=x86 ;;\n        esac\n    else\n        export ARCH=x86\n    fi\nfi\n\nif [ -z \"$DEBUG\" ]; then\n    export DEBUG=dbg\nfi\n\nif ! echo \"$PATH\" | grep -q \"$SRCROOT/$ARCH$VARIANT$DEBUG/tools/bin\"; then\n    OLDPATH=\"$PATH\"\n    PATH=\"$SRCROOT/$ARCH$VARIANT$DEBUG/tools/bin:$OLDPATH\"\nfi\n\n##\n## Perform some sanity checks on the environment.\n##\n\nif ! [ -d \"$SRCROOT/os\" ]; then\n    echo \"Warning: I don't see the os repository at $SRCROOT/os.\"\nfi\n\ncase \"$ARCH$VARIANT\" in\n    x86q)     target=i586-pc-minoca ;;\n    x86)      target=i686-pc-minoca ;;\n    armv[67]) target=arm-none-minoca ;;\n    x64)      target=x86_64-none-minoca ;;\n    *) echo \"Warning: Unknown architecture $ARCH$VARIANT.\"\nesac\n\ntools=\"awk\n$target-ld\n$target-ar\n$target-gcc\n$target-g++\niasl\nm4\nmake\"\n\nfailed_tools=\nfor tool in $tools; do\n    if ! which $tool > /dev/null 2>&1 && \\\n       ! which $tool.exe > /dev/null 2>&1; then\n\n        failed_tools=\"$failed_tools $tool\"\n    fi\ndone\n\nif [ \"$failed_tools\" ]; then\n    if [ -d \"$SRCROOT/third-party\" ]; then\n        echo \"Warning: Failed to find tools$failed_tools. You may need to \\\nrun 'make tools' in $SRCROOT/third-party.\"\n    else\n        echo \"Warning: Failed to find tools$failed_tools. You may need to \\\ndownload the latest Minoca toolchain for your build OS, or rebuild the tools\nfrom source by grabbing the third-party repository and running 'make tools'.\"\n    fi\nelse\n    echo \"Minoca build environment for $ARCH$VARIANT.\"\nfi\n\nunset target tools failed_tools\n"
        },
        {
          "name": "tasks",
          "type": "tree",
          "content": null
        },
        {
          "name": "uefi",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}