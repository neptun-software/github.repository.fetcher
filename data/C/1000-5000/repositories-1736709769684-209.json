{
  "metadata": {
    "timestamp": 1736709769684,
    "page": 209,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jordansissel/xdotool",
      "stars": 3346,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".ghuser.io.json",
          "type": "blob",
          "size": 0.2255859375,
          "content": "{\n  \"_comment\": \"Repo metadata for ghuser.io. See https://github.com/AurelienLourot/ghuser.io/blob/master/docs/repo-settings.md\",\n  \"avatar_url\": \"https://avatars0.githubusercontent.com/u/15154639?s=200&v=4\",\n  \"techs\": [\"Xlib\"]\n}\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0966796875,
          "content": "*.o\n*.dylib\n*.so*\n*.1\nlibxdo.pc\nxdotool\ndeb-build\n*.deb\n# for CYGWIN\nxdotool\\.exe\n*\\.a\n*\\.a\\.[0-9]\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.412109375,
          "content": "sudo: require\nlanguage: cpp\ncompiler: gcc\ndist: trusty\n\ninstall:\n  - sudo apt-get install libx11-dev libxtst-dev libxinerama-dev libxkbcommon-dev\n\n# Start virtual X server, from https://docs.travis-ci.com/user/gui-and-headless-browsers/\nbefore_script:\n  - \"export DISPLAY=:99.0\"\n  - \"sh -e /etc/init.d/xvfb start\"\n  - sleep 3 # give xvfb some time to start\n\nscript: \n  - make\n  - sudo make install\n  - sudo make uninstall\n"
        },
        {
          "name": "CHANGELIST",
          "type": "blob",
          "size": 28.0224609375,
          "content": "KNOWN ISSUES:\n  - OSX: windowmove in OSX/X11 default WM incorrectly reports or accepts window\n    position.  The coordinates of a window's current position cannot be used to\n    correctly place the window. Normally, window managers are supposed to\n    report reserved window extents in the property list of the root window\n    (say, for the OS X menu bar), but OS X's default X11 wm does not do this.\n    If this affects you, please let me know and I will attempt to fix it.\n  - Wayland: Wayland is an alternative to X11 as a graphical system.\n    Unfortunately, there seem to be no common and stable way to do what\n    xdotool does *on* Wayland, so xdotool does not work correctly under Wayland.\n\n3.20211022.1\n  - Fix a bug causing `make create-package-deb` to fail. (#362)\n\n3.20210903.1\n  - Revert XWayland detection. Some parts of xdotool do not work under XWayland. However,\n    many features *do* work on XWayland, and rejecting XWayland caused problems for several\n    folks who were otherwise happily using xdotool under Wayland/XWayland. (#346, #355)\n\n3.20210804.1\n  - xdotool and libxdo will now reject if it is running under Wayland/XWayland.\n    If XWayland is detected, the program will fail. This is because XWayland\n    doesn't allow xdotool or libxdo to work correctly. (#342, Jordan Sissel)\n  - New command `windowstate` which can be used to modify properties of windows.\n    For example, to full-screen the current window, use:\n      xdotool getactivewindow windowstate --add FULLSCREEN\n    (#158 by Zhai Zhao Xuan)\n  - New command `windowquit`  which is used to ask the windowed application to\n    terminate. (#306, Antonio Russo)\n  - New command `getwindowclassname` to print the window's class name.\n    (#247, Dominic Mueller)\n  - When sending keystrokes, `enter` and `return` now are synonyms for the\n    `Return` key symbol (CSylvain)\n  - getmouselocation now updates the window stack with the window the cursor is\n    currently over. (#118, Jordan Sissel)\n  - search command now supports searching by window role with `--role` flag (#305, altblue)\n  - search command should now no longer report BadWindow errors (#335, Marek Marczykowski-Górecki)\n  - get_window_location now reports correct value (#289, Edwin Heerschap)\n  - Uppercase Latin-1/Basic Latin are now typed correctly (#283, Hasan)\n  - Document the regular expressions (POSIX Extended) supported by xdotool\n    (#???, Lucas Werkmeister)\n  - Use the default X11 Screen instead of assuming 0 (#265, Miroslav Koškár)\n  - Wrap header files with `extern \"C\"` to enable easier C++ use of libxdo.\n    (#331, easyaspi314)\n  - Install pkgconfig file when running `make install` (#229, Joakim Repomaa)\n  - Set permissions correctly when installing `xdo.h` (#324, Dan Church)\n  - Fix memory leak (#241, Andrew McDermott)\n  - Fix memory leak (#299, orcNo and longqi)\n  - Fixed some documentation typos (#161, Vincent Legoll; #336, yjqg6666)\n  - Fix all compiler warnings during `make` (#344, Jordan Sissel)\n\n3.20160805.1\n  - Fix release tool problem. cflags.sh was missing from the previous two\n    releases. \n    `make test-package-build` now works correctly on OSX 10.11 and Fedora 23.\n\n3.20160804.2\n  - Fix some bugs in the Makefile especially for OS X / macOS Sierra \n    (Misty De Meo)\n\n3.20160804.1\n  - Fix compilation problems on OSX 10.12 aka macOS Sierra. (#138; Jordan\n    Sissel and Misty De Meo)\n  - Fix memory leaks in window search and charcode map lookups (Markus Roth)\n  - xdotool selectwindow (xdo_select_window_with_click) now only selects the\n    window if mouse button 1 is pressed. Any other buttons will cause this\n    selection to be aborted. (#136, #137; Jordan Sissel and Yuri D'Elia)\n  - Fix bug where `xdotool click` with --clearmodifiers can sometimes leave\n    stuck keys or mouse buttons. (#102, Aurelien Lourot)\n  - windowmove now supports coordinates as a percentage of screen size. For\n    example, a move to 50% 50% would move the window such that the top-left\n    corner of the window is in the center of the screen. (#92, #27; Collin\n    Guarino)\n  - Typing commands (key and type) will now try to use XTEST instead of\n    XSendEvent in a special circumstance. If the window id given (by window\n    stack or the --window flag) is the currenly-focused window, key sequences\n    will be sent using XTEST. (#85, mpnolan)\n  - getmouselocation, getwindowgeometry, and search commands: now supports\n    --shell and --prefix for having stdout be consumable by bash or similar\n    shells. (#80, yatsek)\n  - xdotool scripts such as running via `xdotool -` will now execute commands\n    as lines of input are read. The previous behavior waited until stdin closed\n    before executing anything. (#131, abensj)\n\n3.20150503\n  - Lots of changes over the past 4 years, but with many folks telling me to do\n    another release tarball, here it is.\n    We can backfill the changelog later.\n\n2.20110530.*\n  - New set_window feature: --urgency. This lets you set the urgency flag on a\n    window Window managers will interpret this as something about your window\n    needing attention. It might flash in the taskbar, pop up, or other.\n    Original patch and suggestion by ervandew.\n    Issue: http://code.google.com/p/semicomplete/issues/detail?id=39\n  - New function: xdo_window_seturgency (see above)\n  - Hack in OS X support as it is missing a proper clock_gettime.\n    Should fix http://code.google.com/p/semicomplete/issues/detail?id=37\n    Reported by ryandesign.com\n  - Add support for typing UTF-8 characters. Patch from Joseph Krahn.\n  - Make all output call fflush to send data immediately (for pipes). Reported\n    by Andreas Wagner on the mailing list.\n  - Make 'get_desktop_viewport' output usable with 'set_desktop_viewport'\n    http://code.google.com/p/semicomplete/issues/detail?id=47\n  - You can now make 'libxdo.a' for embedding libxdo into your binary\n    (Requested by psc on the mailing list).\n  - Fixed a typing bug where the keymap changes unnecessarily \n  - Should now build cleanly in C++ environments (Reported by psc on the\n    mailing list)\n  - bugfix: xdotool should use command names first before trying file scripts. \n    See https://bbs.archlinux.org/viewtopic.php?pid=938309 for original report.\n  - Add a 'sleep' command. (Requested by Joseph Krahn via mailing list)\n  - Add --relative flag to windowmove. (Requested by Anthony Thyssen via mailing\n  - Add --desktop flag to the search command. This lets you search for windows\n    on specific desktop. Requires a window manager that supports multiple\n    desktops in a way that EWMH supports.\n    Fixes http://code.google.com/p/semicomplete/issues/detail?id=38\n  - Add --limit flag to search. This allows you to break the search early after\n    a certain number of matches. (Requested by Anthony Thyssen)\n  - New command 'getwindowgeometry' for fetching window position and size\n    (Requested by Anthony Thyssen via mailing list)\n  - Add --sync flag to search command; blocks until results are found.\n    xdotool will search every 0.5 seconds for results.\n    http://code.google.com/p/semicomplete/issues/detail?id=42\n  - windowmove can now move windows along an axis. Give literal 'x' or 'y'\n    instead of a coordinate and it uses the current position. (Requested by\n    etnlIcarus via mailing list)\n  - Add '--args N' and '--terminator TERMINATOR' to the 'exec' command.\n    Default terminator unless specified (or --args is) is ':' (Requested by\n    Joseph Krahn and Henning Bekel via mailing list)\n  - set_desktop now supports --relative flag (+N or -N to move relative)\n    (Requested by Anthony Thyssen)\n  - The mouse cursor now changes during 'xdotool selectwindow' (Requested by\n    Anthony Thyssen via mailing list)\n  - Added '--args N' and '--terminator TERMINATOR' to the 'type' command.\n  - Add 'getdisplaygeometry' command for querying the size of your screen.\n    (Requested by @rrwo via twitter)\n  - Add xdo_get_viewport_dimensions function.\n \n2.20101012.*\n  - New command: 'windowminimize' for minimizing windows. If you want to\n    unminimize a window, use 'windowactivate'.\n  - New command: 'behave_screen_edge' to attach commands to edge and corner\n    activities. For example, to lock your screen when the mouse hits the\n    top-right corner for more than 2 seconds:\n      xdotool behave_screen_edge --delay 2000 top-right exec xscreensaver-command -lock\n    'xscreensaver-command' comes with the xscreensaver package.\n  - New command: 'exec' for executing commands. Useful with behave_screen_edge.\n  - Bug fix: Catch pointer grab failures in selectwindow (xdo_window_select)\n    and abort if we can't grab it and report an error message.\n  - Add  --delay and --repeat flags to click. This allows you to easily\n    double-click (or more) in a single command. Requested by meenakshi sundaram\n    via the mailing list.\n  - Add new option to mouse move 'restore'. This will restore the mouse position\n    to the last known position prior to the most recent move. That is:\n      xdotool mousemove 0 0 mousemove restore\n    the above will move the mouse to 0,0 then move the mouse back to the\n    position it was before. Requested by luc le rumeur and suffian amjad on the\n    mailing list.\n  - Add 'static' and 'install-static' targets. Requested by Anthony Thyssen on\n    the mailing list.\n  - Fix bug in xdotool getmouselocation that didn't search for the client window\n    correctly.\n  - New function: xdo_mousewindow, which lets you get the window the mouse is\n    currently over.\n  - New function: xdo_mouselocation2, which is an extended version of\n    xdo_mouselocation and includes the window the mouse is currently over.\n  - New function: xdo_window_minimize, which minimizes a window.\n  - Add patch from Henning Bekel that greatly improves xdotool's script\n    feature. Scripts now no longer invoke /bin/sh for each line, but instead\n    build a command chain to execute. Further, positional arguments ($1, $2,\n    etc) and environment variables ($FOO, $WINDOWID, etc) work as expected\n    despite the removal of /bin/sh.\n\n2.20100818.*\n  - New commands: 'get_desktop_viewport' and 'set_desktop_viewport'. Some\n    window managers don't actually do 'multiple desktops' but instead show\n    workspaces as views on a large desktop. For example, Compiz Fusion does\n    this, which is why you may see 4 or more desktops, but 'xdotool\n    get_num_desktops' reports only one.\n  - New command: 'selectwindow' command which picks a window by clicking on it.\n  - New command: 'windowreparent' with original patch by Markus Opitz.\n  - New command: 'windowkill' will kill a window and the client that owns it\n    (via XKillClient)\n  - New command: 'getwindowname' for printing the name (title) of a window.\n    Requested by Dominik Reichl for KeePass.\n  - New command: 'behave'. This allows you to run xdotool commands on window\n    events. For example, you can achieve 'mouse-follows-focus' with this:\n      xdotool search --class xterm behave %@ mouse-enter windowfocus\n    This will find all xterms and, upon mouse entering, will focus that window.\n    Not really sure what I wanted with this feature, but it can grow as needed.\n  - Support percentages in 'windowsize'. Percentages are relative to the size\n    of the screen the window is on. 'windowsize 12345 100% 50%' will make the \n    window the full width and half height of the screen.\n  - When typing, if we can't find a character in the existing keymap, try\n    looking up in keysym_charmap (xdo_util.h) and binding a key if we find one\n    that matches. Reported by Victor Baulac on the mailing list. This allows\n    us to type '@', for example, even if the current keymap does not have\n    this key.\n\n2.20100701.*:\n  - No functional changes.\n  - Add missing file 'Doxyfile' to the release package so the xdo docs can be\n    built from a release tarball. (Reported by Daniel Kahn Gillmor)\n  - Skip 'getwindowfocus' misc test if we don't have a windowmanager due to\n    a bug/feature in Xvfb and Xephyr if there is only one client and no wm.\n\n2.20100623.*:\n  - Added 'window stack' and 'command chaining' support. Basically lets you\n    include multiple commands on a single xdotool invocation and saves the last\n    window result from search, getactivewindow, and getwindowfocus. For example,\n    the default window selector is \"%1\" meaning the first window. 'xdotool\n    search --class xterm windowsize 500 500' will resize the first xterm found.\n    All commands that take window arguments (as flags or otherwise) now default to\n    \"%1\" if unspecified. See xdotool(1) manpage sections 'COMMAND CHAINING'\n    and 'WINDOW STACK' for more details. This feature was suggested (with great\n    detail) by Henning Bekel.\n  - To simplify command chaining, all options now terminate at the first\n    non-option argument. See getopt(3) near 'POSIXLY_CORRECT' for details.\n  - Add --sync support to windowsize.\n  - Update docs and output to indicate that 'search --title' is deprecated (but\n    still functions). Use --name instead.\n  - Fix mousemove --screen problem due to bug in XTEST. Reported by\n    Philipp Specht, http://code.google.com/p/semicomplete/issues/detail?id=35\n  - Fix segfault when invoking xdotool with an invalid command.\n    http://code.google.com/p/semicomplete/issues/detail?id=34\n    Reported by: Bruce Jerrick, Sven Lankes, Daniel Kahn Gillmor, and Thomas\n    Schwery.\n  - Fix bug --clearmodifiers bug caused by an uninitialized value being\n    interpreted as the 'modmask' causing us to try to clear invalid modifiers.\n    Reported by Hong-Leong Ong on the mailing list.\n  - Lots of internal refactoring and documentation improvements.\n  - Testing additions for several commands in addition to command chaining.\n  - Documented libxdo through xdo.h. Docs can be generated by 'make docs'\n    from the xdotool release.\n  - libxdo: xdo_window_translate_with_sizehint\n  - libxdo: xdo_window_wait_for_size\n\n2.20100602.*:\n  - testing fix: Make mouse movement tests more tolerant of slight variations.\n\n2.20100601.*:\n  - Add --sync and --clearmodifiers support to mousemove_relative\n  - Fix bug in mousemove_relative --polar (Reported by Paul S via mailing list)\n  - Change polar coordinates to be 'north'-oriented (0 is up, 90 is right...)\n    (Requested by Paul S via mailing list)\n  - Changed xdotool search flags. '--title' now means '--name' to match the\n    window name (shown in the window manager title bar for the window).\n    Related: http://code.google.com/p/semicomplete/issues/detail?id=33\n    --title still works, but you will get a warning about deprecation.\n  - Walked through all commands and tried to make sure the manpage reflects\n    reality and has more detail where needed.\n\n2.20100525.*:\n  - Skip certain tests when the requirements aren't met (ie; no such window manager, etc)\n    Reported by Daniel Kahn Gillmor.\n\n2.20100524.*:\n  - Make search --name search the window title, not the classname\n  - Add --sync flag to many commands. This flag will make any supporting command\n    block until the operation completes. For example, a 'windowmove --sync' will\n    only exit once the window has moved. Commands supported:\n    * windowactivate\n    * windowfocus\n    * windowmap\n    * windowmove\n    * windowunmap\n  - Fix http://code.google.com/p/semicomplete/issues/detail?id=21\n    Multiple keyboard layouts are now supported better. Added unit tests\n    to ensure consistency in typing across releases.\n  - Added polar coordinate support to mouse movement. 'mousemove' and\n    'mousemove_relative' support this. Flag is --polar. 'x' becomes angle (degrees)\n    and 'y' becomes distance. The default origin is screen center. If you specify\n    a window (to mousemove) then the origin is the center of that window.\n    Requested by Paul S on the xdotool-users mailing list.\n  - internal: Reworked testing to be less flakey\n    http://code.google.com/p/semicomplete/issues/detail?id=30\n  - internal: split commands into one per C file\n  - API changes that required a version bump.\n    * xdo_keysequence and friends now take a delay.\n  - New libxdo functions:\n    * xdo_window_wait_for_map_state\n    * xdo_window_wait_for_active\n    * xdo_get_window_location\n    * xdo_window_wait_for_focus\n\n\n1.20100415.*:\n  - Add support for searching classnames (not just class)\n  - Support switched xkbmaps. We do this by checking if the keycode found for a keysym\n    has that keysym as the first or second (normal or with shift-key) mapping, if not\n    we pretend we didn't find it and request it be bound as if the keysym wasn't mapped\n    to any key.\n\n    This is a hack to avoid knowing what other modifiers are required to type\n    keysyms mapped at indexes 2 or beyond (0 is normal, 1 is shift, 2 and beyond\n    are unknown).\n    Verified fixes this: http://code.google.com/p/semicomplete/issues/detail?id=13\n    Should fix some of this: http://code.google.com/p/semicomplete/issues/detail?id=21\n  - Add --shell flag to getmouselocation. This will output data you can safely\n    eval in your shell.\n  - Add platform detection for Darwin when building.\n    Should fix: http://code.google.com/p/semicomplete/issues/detail?id=28\n\n1.20100325.*:\n  - Fix bug in search where --name wasn't working. Test written to cover this.\n    http://code.google.com/p/semicomplete/issues/detail?id=25\n\n1.20100318.*:\n  - Bug fixes only this release\n  - Rewrote tests to use ruby and will now test against Xvfb and Xephyr using:\n    no window manager, openbox, and then gnome.\n  - Fix build problems on Arch linux (or gentoo?)\n    Fixes: http://code.google.com/p/semicomplete/issues/detail?id=20\n  - Fix searching for only visible windows.\n    Fixes: http://code.google.com/p/semicomplete/issues/detail?id=22\n  - Fix xdotool search flags: --title, --name, --class\n  - Add include for keysym.h to fix compile errors reported on the mailing\n    list.\n\n1.20100302.*:\n  - Some test fixes suggested by Daniel Kahn Gillmor\n  - Don't use isatty(0) anymore as it isn't totally reliable in determining if\n    we should try to read from stdin.\n\n1.20100301.*:\n  - Minor libxdo patch to avoid exporting unnecessary symbols (Daniel Kahn\n    Gillmor)\n  - Minor Makefile fix to only link libxdo (and not xdotool) against libX11 and\n    libXtst (also Daniel Kahn Gillmor)\n  - Some test cleanup patches by Daniel Kahn Gillmor\n  - Fixed the 'type hello' test that would fail sometimes when run in Xephyr. \n  - Fix a minor bug in xdo_window_setclass that incorrectly aborts when\n    XGetClassHint fails.\n\n1.20100227.*:\n  - Bump major version since there were lots of libxdo changes (now\n    libxdo.so.1)\n  - Support '--pid NUM' for searching for windows by pid:\n    Fixes http://code.google.com/p/semicomplete/issues/detail?id=10\n    Example: xdotool search --pid 12345\n    Example: xdotool search --pid 12345 \"hello world\"\n  - Add 'xdotool getwindowpid' command to get the pid that owns a window.\n  - Add --window to xdotool mousemove, click, mousedown, and mouseup\n  - Add --screen to xdotool mousemove\n  - The --clearmodifiers flag now clears mouse buttons, too.\n    Part of http://code.google.com/p/semicomplete/issues/detail?id=6\n  - The --clearmodifiers flag now clears caps lock.\n    Fixes http://code.google.com/p/semicomplete/issues/detail?id=4\n  - Have 'make install' create all required directories\n    Fixes http://code.google.com/p/semicomplete/issues/detail?id=17\n  - Support multiple screens in searches. Default is to search all screens.\n    Fixes http://code.google.com/p/semicomplete/issues/detail?id=11\n    Example: 'xdotool search --screen N' specifies a single screen to search.\n  - Support reading a list of xdotool commands via stdin or a file. Usages:\n    * read from stdin:\n      xdotool -\n    * read from stdin (use isatty(0) to detect redirection): \n      xdotool < somefile    \n    * An executable script also works when it has this at the top:\n      #!/path/to/xdotool\n\n0.20100118.*:\n  - Slight change in how we present versions. Now versions have major, date,\n    and svn revision. The main addition was to add the major which maps to the\n    libxdo library abi version (libxdo.so.0).\n  - Add 'xdotool version' for querying version\n  - libxdo now has xdo_version function for fetching the library version.\n  - Allow typing keys that are not mapped to any keyboard button. \n    For example, you can type the euro symbol like this, even if you don't have\n    a key on your keyboard that can do it:\n      xdotool key EuroSign\n    http://code.google.com/p/semicomplete/issues/detail?id=16\n  - Fixed some pod errors in the manpage\n\n20091231.03:\n  - Fix regression in 'windowsize' command: --useflags stopped being accepted,\n    now works again. Reported by Evangelos Foutras in bug/issue #15.\n\n20091231.02:\n  No functional changes.\n  - fix linking problems and just use $(CC) for build and linking\n  - Make the tests headless (requires Xvfb and GNOME)\n  - Make the t/run.sh test runner exit-code friendly\n\n20091231.01:\n  No xdotool changes.\n  libxdo changes:\n    * Rename keysymcharmap -> keysym_charmap\n    * Expose keysym_charmap and symbol_map as xdo_keysym_charmap() \n      and xdo_symbol_map()\n\n20091210.01:\n  * No functional changes.\n  * Added a few patches from Russel Harmon which:\n    + fix some memory leaks\n    + add use of getopt in all the command functions\n    + some makefile fixes\n    + accept more variations of someone asking for help (-help and --help)\n\n20091210:\n  * No functional changes.\n  * Added 'soname' (shared library name/version) to libxdo.so for better\n    linkage. This change may break linking with non-gnu ld(1), I don't know.\n\n20091208:\n  * Added documentation about 'search --maxdepth' and new command 'set_window'\n  * Added building of libxdo.so so other tools can link against it. This\n    change requested by Debian:\n      http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=560103\n\n20090815:\n  * Incorporate patch from Henning Bekel which adds a new ability to change\n    window properties such as window name, icon name, class, role, etc.\n    New command: xdotool set_window\n  * Add --maxdepth to 'xdotool search' to limit the traversal depth\n\n20090710:\n  * You can clear keyboard modifiers during typing now with --clearmodifiers\n    When used, this flag causes physical keyboard modifiers (alt, control, etc)\n    that are currently active to be ignored during typing.\n    This is supported in: xdotool key, keyup, keydown, and type.\n    \n    Example: \n      xdotool type 'hello world' results in 'HELLO WORLD' while holding shift.\n      xdotool type --clearmodifiers 'hello world' results in 'hello world'\n        regardless of you holding shift.\n\n    The 'reset' only happens at the beginning of typing and the modifiers are\n    restored at the end. If you press a modifier key *during* typing it will \n    act as if --clearmodifiers was not present.\n    (http://code.google.com/p/semicomplete/issues/detail?id=6)\n\n  * You can now specify literal keycodes for any key command.\n    Example: xdotool key 38   (types 'a' with my keyboard)\n    (requested via mailing list)\n\n  * Regression fix: 'xdotool type' now properly obeys capitalization, again.\n  * Bug fix: 'xdotool key --window' now works properly\n\n20090612:\n  * Fixed bug where shift modifier was not reset when 'xdotool type' used.\n    http://code.google.com/p/semicomplete/issues/detail?id=5\n\n20090609:\n  * Add '--delay <delay_in_ms>' to xdotool type. Sets the delay between keys.\n  * Add '--window <windowid>' to xdotool type, key, keyup, and keydown.\n    This feature (key events with --window <windowid>) only works if the\n    application does not reject X events that have 'send_event' set to true.\n\n    Special notes:\n    * Firefox appears to ignore all input when it does not have focus.\n    * xterm ignores sendevent by default, ctrl+leftclick menu will let you\n      enable it.\n    * gnome-terminal appears to accept send_event input by default\n\n\n20090330:\n  * Fix bug where we use the wrong type in sizeof() for allocating character\n    code map.\n  * Fix tiny problem where we would try to free() an invalid pointer\n\n20090126:\n  * Change the default behavior of 'getwindowfocus' to get the first\n    ancestor-or-self window that has WM_CLASS set. WM_CLASS will be set on\n    (all?) top-level windows and it's possible that the currently focused\n    window according to X is not a top-level window. To use the previous\n    behavior, use 'getwindowfocus -f'\n  * Make 'xdotool key at' work correctly. 'at' is usually Shift+2, for example.\n    Now all shifted characters should work, but I've only tested on a US\n    keyboard.\n  * Minor Makefile fixes for package maintainers.\n\n20080720:\n  * Add 'getmouselocation' which outputs the coordinate of the mouse cursor and\n    the screen number the mouse is on.\n  * Add 'getactivewindow' which uses NETWM to query the active window; this is\n    often more reliable than 'getwindowfocus' assuming your window manager\n    supports it\n  * Fix typos in the documentation.\n\n20080716:\n  * Fix return codes in xdo_keysequence() and other functions\n\n20080606:\n  * Correctly report an error if xdotool is invoked with an invalid command.\n  * Fix invalid error code reporting from 'windowraise'\n\n20080603:\n  * Daniel Kahn Gillmor reported a problem with return codes from xdotool. All\n    commands return proper exit status now (0 == success, nonzero == error)\n  * I tested on 3 window managers: Gnome2 2.20.0, OpenBox 3.4, ion-3rc-20070608\n    - Gnome and OpenBox pass all tests.\n    - ion-3 fails on any desktop-related methods (ion-3 lacks the support).\n\n20080601:\n  * Add new commands:\n    - windowactivate: Activate a window. If the window is on another desktop,\n      we will switch to that desktop and then activate the window.\n    - set_num_desktops number: Changes the number of desktops or workspaces.\n    - get_num_desktops: Output the current number of desktops.\n    - set_desktop desktop_number: Change the current view to the specified\n        desktop.\n    - get_desktop: Output the current desktop in view.\n    - set_desktop_for_window window_id desktop_number: Move a window to a\n        different desktop.\n    - get_desktop_for_window window_id: Output the desktop currently containing\n        the given window.\n\n    windowactivate tested and confirmed working in: ion-3 and Gnome2 (metacity)\n    The rest of the new commands have only been tested in Gnome2. They do not\n    work in ion-3 due to lacking support for EWMH in ion.\n  * Rewrote the man page in perlpod format.\n\n20080521:\n  * Import patches from keynav's xdotool branch (From Lukas Mai) which make\n    xdotool compile happily when building with -Wall and -pedantic (and others)\n  * Finally convert to using Window type for (hopefully) everything instead of\n    incorrectly typecasting Window to int sometimes.\n  * Confirmed that the one (but mostly useless) test passes.\n\n20071230:\n  * Manpage contribution by Daniel Kahn Gillmor\n  * Add COPYRIGHT from svn to the distributed package.\n\n20070903:\n  * Add xdo_mousemove_relative for relative mouse movements\n  * Add xdolib.sh. This is a script library to help with features xdo does not\n    explicitly implement, such as querying window attributes, or fetching the\n    root window id. An example which uses this is: examples/move_window_away.sh\n\n20070812:\n  * Magnus Boman contributed keysequence_{up,down} adding new commands to\n    xdotool: keyup and keydown. These take the same arguments as 'key' but only\n    send keyup or keydown events.\n  * Lee Pumphret contributed getwindowfocus, which tells you the window id of\n    the window currently holding focus.\n  * Removed 'Makefile.no-pkg-config' because the original Makefile now knows\n    how to build for both cases: with and without pkg-config.\n\n20070722:\n  * Compiles without warnings when using gcc -Wall now\n  * Fixed false error reporting due to some functions missing return statements\n\n20070713:\n  * Add flag SIZE_USEHINTS to xdo_window_setsize\n  * Add flag --usehints to xdotool windowsize\n\n  Increments are used often in terminals that say \"my font is 5 by 7 pixels, so\n  resize by that increment\". So, you can use this to set a terminal to be 80x24\n  characters instead of pixels. Verified by resizing xterm and gnome-terminal\n  (with menus enabled).\n\n20070712:\n  Added new search options to 'xdotool search'\n    --onlyvisible shows only visible windows in the results\n    --title causes only the window title to be matched\n    --name causes the window name to be matched\n    --class causes the window class to be matched\n\n  For information on names and classes, check out the xprop tool.\n    For example, for an xterm you will see this in the xprop output:\n    WM_CLASS(STRING) = \"xterm\", \"XTerm\"\n  \"xterm\" is the name, \"XTerm\" is the class. Don't ask me what the differences\n  are supposed to be. ;)\n\n"
        },
        {
          "name": "COPYRIGHT",
          "type": "blob",
          "size": 1.44921875,
          "content": "Copyright (c) 2007, 2008, 2009: Jordan Sissel.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of the Jordan Sissel nor the names of its contributors\n      may be used to endorse or promote products derived from this software\n      without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY JORDAN SISSEL ``AS IS'' AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL JORDAN SISSEL BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Doxyfile",
          "type": "blob",
          "size": 61.865234375,
          "content": "# Doxyfile 1.6.1\n\n# This file describes the settings to be used by the documentation system\n# doxygen (www.doxygen.org) for a project\n#\n# All text after a hash (#) is considered a comment and will be ignored\n# The format is:\n#       TAG = value [value, ...]\n# For lists items can also be appended using:\n#       TAG += value [value, ...]\n# Values that contain spaces should be placed between quotes (\" \")\n\n#---------------------------------------------------------------------------\n# Project related configuration options\n#---------------------------------------------------------------------------\n\n# This tag specifies the encoding used for all characters in the config file\n# that follow. The default is UTF-8 which is also the encoding used for all\n# text before the first occurrence of this tag. Doxygen uses libiconv (or the\n# iconv built into libc) for the transcoding. See\n# http://www.gnu.org/software/libiconv for the list of possible encodings.\n\nDOXYFILE_ENCODING      = UTF-8\n\n# The PROJECT_NAME tag is a single word (or a sequence of words surrounded\n# by quotes) that should identify the project.\n\nPROJECT_NAME           = libxdo\n\n# The PROJECT_NUMBER tag can be used to enter a project or revision number.\n# This could be handy for archiving the generated documentation or\n# if some version control system is used.\n\nPROJECT_NUMBER         =\n\n# The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute)\n# base path where the generated documentation will be put.\n# If a relative path is entered, it will be relative to the location\n# where doxygen was started. If left blank the current directory will be used.\n\nOUTPUT_DIRECTORY       = docs\n\n# If the CREATE_SUBDIRS tag is set to YES, then doxygen will create\n# 4096 sub-directories (in 2 levels) under the output directory of each output\n# format and will distribute the generated files over these directories.\n# Enabling this option can be useful when feeding doxygen a huge amount of\n# source files, where putting all generated files in the same directory would\n# otherwise cause performance problems for the file system.\n\nCREATE_SUBDIRS         = NO\n\n# The OUTPUT_LANGUAGE tag is used to specify the language in which all\n# documentation generated by doxygen is written. Doxygen will use this\n# information to generate all constant output in the proper language.\n# The default language is English, other supported languages are:\n# Afrikaans, Arabic, Brazilian, Catalan, Chinese, Chinese-Traditional,\n# Croatian, Czech, Danish, Dutch, Esperanto, Farsi, Finnish, French, German,\n# Greek, Hungarian, Italian, Japanese, Japanese-en (Japanese with English\n# messages), Korean, Korean-en, Lithuanian, Norwegian, Macedonian, Persian,\n# Polish, Portuguese, Romanian, Russian, Serbian, Serbian-Cyrilic, Slovak,\n# Slovene, Spanish, Swedish, Ukrainian, and Vietnamese.\n\nOUTPUT_LANGUAGE        = English\n\n# If the BRIEF_MEMBER_DESC tag is set to YES (the default) Doxygen will\n# include brief member descriptions after the members that are listed in\n# the file and class documentation (similar to JavaDoc).\n# Set to NO to disable this.\n\nBRIEF_MEMBER_DESC      = YES\n\n# If the REPEAT_BRIEF tag is set to YES (the default) Doxygen will prepend\n# the brief description of a member or function before the detailed description.\n# Note: if both HIDE_UNDOC_MEMBERS and BRIEF_MEMBER_DESC are set to NO, the\n# brief descriptions will be completely suppressed.\n\nREPEAT_BRIEF           = YES\n\n# This tag implements a quasi-intelligent brief description abbreviator\n# that is used to form the text in various listings. Each string\n# in this list, if found as the leading text of the brief description, will be\n# stripped from the text and the result after processing the whole list, is\n# used as the annotated text. Otherwise, the brief description is used as-is.\n# If left blank, the following values are used (\"$name\" is automatically\n# replaced with the name of the entity): \"The $name class\" \"The $name widget\"\n# \"The $name file\" \"is\" \"provides\" \"specifies\" \"contains\"\n# \"represents\" \"a\" \"an\" \"the\"\n\nABBREVIATE_BRIEF       =\n\n# If the ALWAYS_DETAILED_SEC and REPEAT_BRIEF tags are both set to YES then\n# Doxygen will generate a detailed section even if there is only a brief\n# description.\n\nALWAYS_DETAILED_SEC    = NO\n\n# If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all\n# inherited members of a class in the documentation of that class as if those\n# members were ordinary class members. Constructors, destructors and assignment\n# operators of the base classes will not be shown.\n\nINLINE_INHERITED_MEMB  = NO\n\n# If the FULL_PATH_NAMES tag is set to YES then Doxygen will prepend the full\n# path before files name in the file list and in the header files. If set\n# to NO the shortest path that makes the file name unique will be used.\n\nFULL_PATH_NAMES        = YES\n\n# If the FULL_PATH_NAMES tag is set to YES then the STRIP_FROM_PATH tag\n# can be used to strip a user-defined part of the path. Stripping is\n# only done if one of the specified strings matches the left-hand part of\n# the path. The tag can be used to show relative paths in the file list.\n# If left blank the directory from which doxygen is run is used as the\n# path to strip.\n\nSTRIP_FROM_PATH        =\n\n# The STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of\n# the path mentioned in the documentation of a class, which tells\n# the reader which header file to include in order to use a class.\n# If left blank only the name of the header file containing the class\n# definition is used. Otherwise one should specify the include paths that\n# are normally passed to the compiler using the -I flag.\n\nSTRIP_FROM_INC_PATH    =\n\n# If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter\n# (but less readable) file names. This can be useful is your file systems\n# doesn't support long names like on DOS, Mac, or CD-ROM.\n\nSHORT_NAMES            = NO\n\n# If the JAVADOC_AUTOBRIEF tag is set to YES then Doxygen\n# will interpret the first line (until the first dot) of a JavaDoc-style\n# comment as the brief description. If set to NO, the JavaDoc\n# comments will behave just like regular Qt-style comments\n# (thus requiring an explicit @brief command for a brief description.)\n\nJAVADOC_AUTOBRIEF      = YES\n\n# If the QT_AUTOBRIEF tag is set to YES then Doxygen will\n# interpret the first line (until the first dot) of a Qt-style\n# comment as the brief description. If set to NO, the comments\n# will behave just like regular Qt-style comments (thus requiring\n# an explicit \\brief command for a brief description.)\n\nQT_AUTOBRIEF           = NO\n\n# The MULTILINE_CPP_IS_BRIEF tag can be set to YES to make Doxygen\n# treat a multi-line C++ special comment block (i.e. a block of //! or ///\n# comments) as a brief description. This used to be the default behaviour.\n# The new default is to treat a multi-line C++ comment block as a detailed\n# description. Set this tag to YES if you prefer the old behaviour instead.\n\nMULTILINE_CPP_IS_BRIEF = NO\n\n# If the INHERIT_DOCS tag is set to YES (the default) then an undocumented\n# member inherits the documentation from any documented member that it\n# re-implements.\n\nINHERIT_DOCS           = YES\n\n# If the SEPARATE_MEMBER_PAGES tag is set to YES, then doxygen will produce\n# a new page for each member. If set to NO, the documentation of a member will\n# be part of the file/class/namespace that contains it.\n\nSEPARATE_MEMBER_PAGES  = NO\n\n# The TAB_SIZE tag can be used to set the number of spaces in a tab.\n# Doxygen uses this value to replace tabs by spaces in code fragments.\n\nTAB_SIZE               = 8\n\n# This tag can be used to specify a number of aliases that acts\n# as commands in the documentation. An alias has the form \"name=value\".\n# For example adding \"sideeffect=\\par Side Effects:\\n\" will allow you to\n# put the command \\sideeffect (or @sideeffect) in the documentation, which\n# will result in a user-defined paragraph with heading \"Side Effects:\".\n# You can put \\n's in the value part of an alias to insert newlines.\n\nALIASES                =\n\n# Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C\n# sources only. Doxygen will then generate output that is more tailored for C.\n# For instance, some of the names that are used will be different. The list\n# of all members will be omitted, etc.\n\nOPTIMIZE_OUTPUT_FOR_C  = YES\n\n# Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of Java\n# sources only. Doxygen will then generate output that is more tailored for\n# Java. For instance, namespaces will be presented as packages, qualified\n# scopes will look different, etc.\n\nOPTIMIZE_OUTPUT_JAVA   = NO\n\n# Set the OPTIMIZE_FOR_FORTRAN tag to YES if your project consists of Fortran\n# sources only. Doxygen will then generate output that is more tailored for\n# Fortran.\n\nOPTIMIZE_FOR_FORTRAN   = NO\n\n# Set the OPTIMIZE_OUTPUT_VHDL tag to YES if your project consists of VHDL\n# sources. Doxygen will then generate output that is tailored for\n# VHDL.\n\nOPTIMIZE_OUTPUT_VHDL   = NO\n\n# Doxygen selects the parser to use depending on the extension of the files it parses.\n# With this tag you can assign which parser to use for a given extension.\n# Doxygen has a built-in mapping, but you can override or extend it using this tag.\n# The format is ext=language, where ext is a file extension, and language is one of\n# the parsers supported by doxygen: IDL, Java, Javascript, C#, C, C++, D, PHP,\n# Objective-C, Python, Fortran, VHDL, C, C++. For instance to make doxygen treat\n# .inc files as Fortran files (default is PHP), and .f files as C (default is Fortran),\n# use: inc=Fortran f=C. Note that for custom extensions you also need to set FILE_PATTERNS otherwise the files are not read by doxygen.\n\nEXTENSION_MAPPING      = c=C h=C\n\n# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want\n# to include (a tag file for) the STL sources as input, then you should\n# set this tag to YES in order to let doxygen match functions declarations and\n# definitions whose arguments contain STL classes (e.g. func(std::string); v.s.\n# func(std::string) {}). This also make the inheritance and collaboration\n# diagrams that involve STL classes more complete and accurate.\n\nBUILTIN_STL_SUPPORT    = NO\n\n# If you use Microsoft's C++/CLI language, you should set this option to YES to\n# enable parsing support.\n\nCPP_CLI_SUPPORT        = NO\n\n# Set the SIP_SUPPORT tag to YES if your project consists of sip sources only.\n# Doxygen will parse them like normal C++ but will assume all classes use public\n# instead of private inheritance when no explicit protection keyword is present.\n\nSIP_SUPPORT            = NO\n\n# For Microsoft's IDL there are propget and propput attributes to indicate getter\n# and setter methods for a property. Setting this option to YES (the default)\n# will make doxygen to replace the get and set methods by a property in the\n# documentation. This will only work if the methods are indeed getting or\n# setting a simple type. If this is not the case, or you want to show the\n# methods anyway, you should set this option to NO.\n\nIDL_PROPERTY_SUPPORT   = YES\n\n# If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC\n# tag is set to YES, then doxygen will reuse the documentation of the first\n# member in the group (if any) for the other members of the group. By default\n# all members of a group must be documented explicitly.\n\nDISTRIBUTE_GROUP_DOC   = NO\n\n# Set the SUBGROUPING tag to YES (the default) to allow class member groups of\n# the same type (for instance a group of public functions) to be put as a\n# subgroup of that type (e.g. under the Public Functions section). Set it to\n# NO to prevent subgrouping. Alternatively, this can be done per class using\n# the \\nosubgrouping command.\n\nSUBGROUPING            = YES\n\n# When TYPEDEF_HIDES_STRUCT is enabled, a typedef of a struct, union, or enum\n# is documented as struct, union, or enum with the name of the typedef. So\n# typedef struct TypeS {} TypeT, will appear in the documentation as a struct\n# with name TypeT. When disabled the typedef will appear as a member of a file,\n# namespace, or class. And the struct will be named TypeS. This can typically\n# be useful for C code in case the coding convention dictates that all compound\n# types are typedef'ed and only the typedef is referenced, never the tag name.\n\nTYPEDEF_HIDES_STRUCT   = NO\n\n# The SYMBOL_CACHE_SIZE determines the size of the internal cache use to\n# determine which symbols to keep in memory and which to flush to disk.\n# When the cache is full, less often used symbols will be written to disk.\n# For small to medium size projects (<1000 input files) the default value is\n# probably good enough. For larger projects a too small cache size can cause\n# doxygen to be busy swapping symbols to and from disk most of the time\n# causing a significant performance penality.\n# If the system has enough physical memory increasing the cache will improve the\n# performance by keeping more symbols in memory. Note that the value works on\n# a logarithmic scale so increasing the size by one will rougly double the\n# memory usage. The cache size is given by this formula:\n# 2^(16+SYMBOL_CACHE_SIZE). The valid range is 0..9, the default is 0,\n# corresponding to a cache size of 2^16 = 65536 symbols\n\nSYMBOL_CACHE_SIZE      = 0\n\n#---------------------------------------------------------------------------\n# Build related configuration options\n#---------------------------------------------------------------------------\n\n# If the EXTRACT_ALL tag is set to YES doxygen will assume all entities in\n# documentation are documented, even if no documentation was available.\n# Private class members and static file members will be hidden unless\n# the EXTRACT_PRIVATE and EXTRACT_STATIC tags are set to YES\n\nEXTRACT_ALL            = NO\n\n# If the EXTRACT_PRIVATE tag is set to YES all private members of a class\n# will be included in the documentation.\n\nEXTRACT_PRIVATE        = NO\n\n# If the EXTRACT_STATIC tag is set to YES all static members of a file\n# will be included in the documentation.\n\nEXTRACT_STATIC         = NO\n\n# If the EXTRACT_LOCAL_CLASSES tag is set to YES classes (and structs)\n# defined locally in source files will be included in the documentation.\n# If set to NO only classes defined in header files are included.\n\nEXTRACT_LOCAL_CLASSES  = YES\n\n# This flag is only useful for Objective-C code. When set to YES local\n# methods, which are defined in the implementation section but not in\n# the interface are included in the documentation.\n# If set to NO (the default) only methods in the interface are included.\n\nEXTRACT_LOCAL_METHODS  = NO\n\n# If this flag is set to YES, the members of anonymous namespaces will be\n# extracted and appear in the documentation as a namespace called\n# 'anonymous_namespace{file}', where file will be replaced with the base\n# name of the file that contains the anonymous namespace. By default\n# anonymous namespace are hidden.\n\nEXTRACT_ANON_NSPACES   = NO\n\n# If the HIDE_UNDOC_MEMBERS tag is set to YES, Doxygen will hide all\n# undocumented members of documented classes, files or namespaces.\n# If set to NO (the default) these members will be included in the\n# various overviews, but no documentation section is generated.\n# This option has no effect if EXTRACT_ALL is enabled.\n\nHIDE_UNDOC_MEMBERS     = NO\n\n# If the HIDE_UNDOC_CLASSES tag is set to YES, Doxygen will hide all\n# undocumented classes that are normally visible in the class hierarchy.\n# If set to NO (the default) these classes will be included in the various\n# overviews. This option has no effect if EXTRACT_ALL is enabled.\n\nHIDE_UNDOC_CLASSES     = NO\n\n# If the HIDE_FRIEND_COMPOUNDS tag is set to YES, Doxygen will hide all\n# friend (class|struct|union) declarations.\n# If set to NO (the default) these declarations will be included in the\n# documentation.\n\nHIDE_FRIEND_COMPOUNDS  = NO\n\n# If the HIDE_IN_BODY_DOCS tag is set to YES, Doxygen will hide any\n# documentation blocks found inside the body of a function.\n# If set to NO (the default) these blocks will be appended to the\n# function's detailed documentation block.\n\nHIDE_IN_BODY_DOCS      = NO\n\n# The INTERNAL_DOCS tag determines if documentation\n# that is typed after a \\internal command is included. If the tag is set\n# to NO (the default) then the documentation will be excluded.\n# Set it to YES to include the internal documentation.\n\nINTERNAL_DOCS          = NO\n\n# If the CASE_SENSE_NAMES tag is set to NO then Doxygen will only generate\n# file names in lower-case letters. If set to YES upper-case letters are also\n# allowed. This is useful if you have classes or files whose names only differ\n# in case and if your file system supports case sensitive file names. Windows\n# and Mac users are advised to set this option to NO.\n\nCASE_SENSE_NAMES       = YES\n\n# If the HIDE_SCOPE_NAMES tag is set to NO (the default) then Doxygen\n# will show members with their full class and namespace scopes in the\n# documentation. If set to YES the scope will be hidden.\n\nHIDE_SCOPE_NAMES       = NO\n\n# If the SHOW_INCLUDE_FILES tag is set to YES (the default) then Doxygen\n# will put a list of the files that are included by a file in the documentation\n# of that file.\n\nSHOW_INCLUDE_FILES     = YES\n\n# If the INLINE_INFO tag is set to YES (the default) then a tag [inline]\n# is inserted in the documentation for inline members.\n\nINLINE_INFO            = YES\n\n# If the SORT_MEMBER_DOCS tag is set to YES (the default) then doxygen\n# will sort the (detailed) documentation of file and class members\n# alphabetically by member name. If set to NO the members will appear in\n# declaration order.\n\nSORT_MEMBER_DOCS       = YES\n\n# If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the\n# brief documentation of file, namespace and class members alphabetically\n# by member name. If set to NO (the default) the members will appear in\n# declaration order.\n\nSORT_BRIEF_DOCS        = NO\n\n# If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen will sort the (brief and detailed) documentation of class members so that constructors and destructors are listed first. If set to NO (the default) the constructors will appear in the respective orders defined by SORT_MEMBER_DOCS and SORT_BRIEF_DOCS. This tag will be ignored for brief docs if SORT_BRIEF_DOCS is set to NO and ignored for detailed docs if SORT_MEMBER_DOCS is set to NO.\n\nSORT_MEMBERS_CTORS_1ST = NO\n\n# If the SORT_GROUP_NAMES tag is set to YES then doxygen will sort the\n# hierarchy of group names into alphabetical order. If set to NO (the default)\n# the group names will appear in their defined order.\n\nSORT_GROUP_NAMES       = NO\n\n# If the SORT_BY_SCOPE_NAME tag is set to YES, the class list will be\n# sorted by fully-qualified names, including namespaces. If set to\n# NO (the default), the class list will be sorted only by class name,\n# not including the namespace part.\n# Note: This option is not very useful if HIDE_SCOPE_NAMES is set to YES.\n# Note: This option applies only to the class list, not to the\n# alphabetical list.\n\nSORT_BY_SCOPE_NAME     = NO\n\n# The GENERATE_TODOLIST tag can be used to enable (YES) or\n# disable (NO) the todo list. This list is created by putting \\todo\n# commands in the documentation.\n\nGENERATE_TODOLIST      = YES\n\n# The GENERATE_TESTLIST tag can be used to enable (YES) or\n# disable (NO) the test list. This list is created by putting \\test\n# commands in the documentation.\n\nGENERATE_TESTLIST      = YES\n\n# The GENERATE_BUGLIST tag can be used to enable (YES) or\n# disable (NO) the bug list. This list is created by putting \\bug\n# commands in the documentation.\n\nGENERATE_BUGLIST       = YES\n\n# The GENERATE_DEPRECATEDLIST tag can be used to enable (YES) or\n# disable (NO) the deprecated list. This list is created by putting\n# \\deprecated commands in the documentation.\n\nGENERATE_DEPRECATEDLIST= YES\n\n# The ENABLED_SECTIONS tag can be used to enable conditional\n# documentation sections, marked by \\if sectionname ... \\endif.\n\nENABLED_SECTIONS       =\n\n# The MAX_INITIALIZER_LINES tag determines the maximum number of lines\n# the initial value of a variable or define consists of for it to appear in\n# the documentation. If the initializer consists of more lines than specified\n# here it will be hidden. Use a value of 0 to hide initializers completely.\n# The appearance of the initializer of individual variables and defines in the\n# documentation can be controlled using \\showinitializer or \\hideinitializer\n# command in the documentation regardless of this setting.\n\nMAX_INITIALIZER_LINES  = 30\n\n# Set the SHOW_USED_FILES tag to NO to disable the list of files generated\n# at the bottom of the documentation of classes and structs. If set to YES the\n# list will mention the files that were used to generate the documentation.\n\nSHOW_USED_FILES        = YES\n\n# If the sources in your project are distributed over multiple directories\n# then setting the SHOW_DIRECTORIES tag to YES will show the directory hierarchy\n# in the documentation. The default is NO.\n\nSHOW_DIRECTORIES       = NO\n\n# Set the SHOW_FILES tag to NO to disable the generation of the Files page.\n# This will remove the Files entry from the Quick Index and from the\n# Folder Tree View (if specified). The default is YES.\n\nSHOW_FILES             = YES\n\n# Set the SHOW_NAMESPACES tag to NO to disable the generation of the\n# Namespaces page.\n# This will remove the Namespaces entry from the Quick Index\n# and from the Folder Tree View (if specified). The default is YES.\n\nSHOW_NAMESPACES        = YES\n\n# The FILE_VERSION_FILTER tag can be used to specify a program or script that\n# doxygen should invoke to get the current version for each file (typically from\n# the version control system). Doxygen will invoke the program by executing (via\n# popen()) the command <command> <input-file>, where <command> is the value of\n# the FILE_VERSION_FILTER tag, and <input-file> is the name of an input file\n# provided by doxygen. Whatever the program writes to standard output\n# is used as the file version. See the manual for examples.\n\nFILE_VERSION_FILTER    =\n\n# The LAYOUT_FILE tag can be used to specify a layout file which will be parsed by\n# doxygen. The layout file controls the global structure of the generated output files\n# in an output format independent way. The create the layout file that represents\n# doxygen's defaults, run doxygen with the -l option. You can optionally specify a\n# file name after the option, if omitted DoxygenLayout.xml will be used as the name\n# of the layout file.\n\nLAYOUT_FILE            =\n\n#---------------------------------------------------------------------------\n# configuration options related to warning and progress messages\n#---------------------------------------------------------------------------\n\n# The QUIET tag can be used to turn on/off the messages that are generated\n# by doxygen. Possible values are YES and NO. If left blank NO is used.\n\nQUIET                  = NO\n\n# The WARNINGS tag can be used to turn on/off the warning messages that are\n# generated by doxygen. Possible values are YES and NO. If left blank\n# NO is used.\n\nWARNINGS               = YES\n\n# If WARN_IF_UNDOCUMENTED is set to YES, then doxygen will generate warnings\n# for undocumented members. If EXTRACT_ALL is set to YES then this flag will\n# automatically be disabled.\n\nWARN_IF_UNDOCUMENTED   = YES\n\n# If WARN_IF_DOC_ERROR is set to YES, doxygen will generate warnings for\n# potential errors in the documentation, such as not documenting some\n# parameters in a documented function, or documenting parameters that\n# don't exist or using markup commands wrongly.\n\nWARN_IF_DOC_ERROR      = YES\n\n# This WARN_NO_PARAMDOC option can be abled to get warnings for\n# functions that are documented, but have no documentation for their parameters\n# or return value. If set to NO (the default) doxygen will only warn about\n# wrong or incomplete parameter documentation, but not about the absence of\n# documentation.\n\nWARN_NO_PARAMDOC       = NO\n\n# The WARN_FORMAT tag determines the format of the warning messages that\n# doxygen can produce. The string should contain the $file, $line, and $text\n# tags, which will be replaced by the file and line number from which the\n# warning originated and the warning text. Optionally the format may contain\n# $version, which will be replaced by the version of the file (if it could\n# be obtained via FILE_VERSION_FILTER)\n\nWARN_FORMAT            = \"$file:$line: $text\"\n\n# The WARN_LOGFILE tag can be used to specify a file to which warning\n# and error messages should be written. If left blank the output is written\n# to stderr.\n\nWARN_LOGFILE           =\n\n#---------------------------------------------------------------------------\n# configuration options related to the input files\n#---------------------------------------------------------------------------\n\n# The INPUT tag can be used to specify the files and/or directories that contain\n# documented source files. You may enter file names like \"myfile.cpp\" or\n# directories like \"/usr/src/myproject\". Separate the files or directories\n# with spaces.\n\nINPUT                  =\n\n# This tag can be used to specify the character encoding of the source files\n# that doxygen parses. Internally doxygen uses the UTF-8 encoding, which is\n# also the default input encoding. Doxygen uses libiconv (or the iconv built\n# into libc) for the transcoding. See http://www.gnu.org/software/libiconv for\n# the list of possible encodings.\n\nINPUT_ENCODING         = UTF-8\n\n# If the value of the INPUT tag contains directories, you can use the\n# FILE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp\n# and *.h) to filter out the source-files in the directories. If left\n# blank the following patterns are tested:\n# *.c *.cc *.cxx *.cpp *.c++ *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh *.hxx\n# *.hpp *.h++ *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm *.py *.f90\n\nFILE_PATTERNS          = *.c *.h\n\n# The RECURSIVE tag can be used to turn specify whether or not subdirectories\n# should be searched for input files as well. Possible values are YES and NO.\n# If left blank NO is used.\n\nRECURSIVE              = NO\n\n# The EXCLUDE tag can be used to specify files and/or directories that should\n# excluded from the INPUT source files. This way you can easily exclude a\n# subdirectory from a directory tree whose root is specified with the INPUT tag.\n\nEXCLUDE                = conf.tab.c conf.tab.h conf.yy.c\n\n# The EXCLUDE_SYMLINKS tag can be used select whether or not files or\n# directories that are symbolic links (a Unix filesystem feature) are excluded\n# from the input.\n\nEXCLUDE_SYMLINKS       = NO\n\n# If the value of the INPUT tag contains directories, you can use the\n# EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude\n# certain files from those directories. Note that the wildcards are matched\n# against the file with absolute path, so to exclude all test directories\n# for example use the pattern */test/*\n\nEXCLUDE_PATTERNS       =\n\n# The EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names\n# (namespaces, classes, functions, etc.) that should be excluded from the\n# output. The symbol name can be a fully qualified name, a word, or if the\n# wildcard * is used, a substring. Examples: ANamespace, AClass,\n# AClass::ANamespace, ANamespace::*Test\n\nEXCLUDE_SYMBOLS        =\n\n# The EXAMPLE_PATH tag can be used to specify one or more files or\n# directories that contain example code fragments that are included (see\n# the \\include command).\n\nEXAMPLE_PATH           =\n\n# If the value of the EXAMPLE_PATH tag contains directories, you can use the\n# EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp\n# and *.h) to filter out the source-files in the directories. If left\n# blank all files are included.\n\nEXAMPLE_PATTERNS       =\n\n# If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be\n# searched for input files to be used with the \\include or \\dontinclude\n# commands irrespective of the value of the RECURSIVE tag.\n# Possible values are YES and NO. If left blank NO is used.\n\nEXAMPLE_RECURSIVE      = NO\n\n# The IMAGE_PATH tag can be used to specify one or more files or\n# directories that contain image that are included in the documentation (see\n# the \\image command).\n\nIMAGE_PATH             =\n\n# The INPUT_FILTER tag can be used to specify a program that doxygen should\n# invoke to filter for each input file. Doxygen will invoke the filter program\n# by executing (via popen()) the command <filter> <input-file>, where <filter>\n# is the value of the INPUT_FILTER tag, and <input-file> is the name of an\n# input file. Doxygen will then use the output that the filter program writes\n# to standard output.\n# If FILTER_PATTERNS is specified, this tag will be\n# ignored.\n\nINPUT_FILTER           =\n\n# The FILTER_PATTERNS tag can be used to specify filters on a per file pattern\n# basis.\n# Doxygen will compare the file name with each pattern and apply the\n# filter if there is a match.\n# The filters are a list of the form:\n# pattern=filter (like *.cpp=my_cpp_filter). See INPUT_FILTER for further\n# info on how filters are used. If FILTER_PATTERNS is empty, INPUT_FILTER\n# is applied to all files.\n\nFILTER_PATTERNS        =\n\n# If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using\n# INPUT_FILTER) will be used to filter the input files when producing source\n# files to browse (i.e. when SOURCE_BROWSER is set to YES).\n\nFILTER_SOURCE_FILES    = NO\n\n#---------------------------------------------------------------------------\n# configuration options related to source browsing\n#---------------------------------------------------------------------------\n\n# If the SOURCE_BROWSER tag is set to YES then a list of source files will\n# be generated. Documented entities will be cross-referenced with these sources.\n# Note: To get rid of all source code in the generated output, make sure also\n# VERBATIM_HEADERS is set to NO.\n\nSOURCE_BROWSER         = NO\n\n# Setting the INLINE_SOURCES tag to YES will include the body\n# of functions and classes directly in the documentation.\n\nINLINE_SOURCES         = NO\n\n# Setting the STRIP_CODE_COMMENTS tag to YES (the default) will instruct\n# doxygen to hide any special comment blocks from generated source code\n# fragments. Normal C and C++ comments will always remain visible.\n\nSTRIP_CODE_COMMENTS    = YES\n\n# If the REFERENCED_BY_RELATION tag is set to YES\n# then for each documented function all documented\n# functions referencing it will be listed.\n\nREFERENCED_BY_RELATION = NO\n\n# If the REFERENCES_RELATION tag is set to YES\n# then for each documented function all documented entities\n# called/used by that function will be listed.\n\nREFERENCES_RELATION    = NO\n\n# If the REFERENCES_LINK_SOURCE tag is set to YES (the default)\n# and SOURCE_BROWSER tag is set to YES, then the hyperlinks from\n# functions in REFERENCES_RELATION and REFERENCED_BY_RELATION lists will\n# link to the source code.\n# Otherwise they will link to the documentation.\n\nREFERENCES_LINK_SOURCE = YES\n\n# If the USE_HTAGS tag is set to YES then the references to source code\n# will point to the HTML generated by the htags(1) tool instead of doxygen\n# built-in source browser. The htags tool is part of GNU's global source\n# tagging system (see http://www.gnu.org/software/global/global.html). You\n# will need version 4.8.6 or higher.\n\nUSE_HTAGS              = NO\n\n# If the VERBATIM_HEADERS tag is set to YES (the default) then Doxygen\n# will generate a verbatim copy of the header file for each class for\n# which an include is specified. Set to NO to disable this.\n\nVERBATIM_HEADERS       = YES\n\n#---------------------------------------------------------------------------\n# configuration options related to the alphabetical class index\n#---------------------------------------------------------------------------\n\n# If the ALPHABETICAL_INDEX tag is set to YES, an alphabetical index\n# of all compounds will be generated. Enable this if the project\n# contains a lot of classes, structs, unions or interfaces.\n\nALPHABETICAL_INDEX     = NO\n\n# If the alphabetical index is enabled (see ALPHABETICAL_INDEX) then\n# the COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns\n# in which this list will be split (can be a number in the range [1..20])\n\nCOLS_IN_ALPHA_INDEX    = 5\n\n# In case all classes in a project start with a common prefix, all\n# classes will be put under the same header in the alphabetical index.\n# The IGNORE_PREFIX tag can be used to specify one or more prefixes that\n# should be ignored while generating the index headers.\n\nIGNORE_PREFIX          =\n\n#---------------------------------------------------------------------------\n# configuration options related to the HTML output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_HTML tag is set to YES (the default) Doxygen will\n# generate HTML output.\n\nGENERATE_HTML          = YES\n\n# The HTML_OUTPUT tag is used to specify where the HTML docs will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `html' will be used as the default path.\n\nHTML_OUTPUT            = html\n\n# The HTML_FILE_EXTENSION tag can be used to specify the file extension for\n# each generated HTML page (for example: .htm,.php,.asp). If it is left blank\n# doxygen will generate files with .html extension.\n\nHTML_FILE_EXTENSION    = .html\n\n# The HTML_HEADER tag can be used to specify a personal HTML header for\n# each generated HTML page. If it is left blank doxygen will generate a\n# standard header.\n\nHTML_HEADER            =\n\n# The HTML_FOOTER tag can be used to specify a personal HTML footer for\n# each generated HTML page. If it is left blank doxygen will generate a\n# standard footer.\n\nHTML_FOOTER            =\n\n# The HTML_STYLESHEET tag can be used to specify a user-defined cascading\n# style sheet that is used by each HTML page. It can be used to\n# fine-tune the look of the HTML output. If the tag is left blank doxygen\n# will generate a default style sheet. Note that doxygen will try to copy\n# the style sheet file to the HTML output directory, so don't put your own\n# stylesheet in the HTML output directory as well, or it will be erased!\n\nHTML_STYLESHEET        =\n\n# If the HTML_ALIGN_MEMBERS tag is set to YES, the members of classes,\n# files or namespaces will be aligned in HTML using tables. If set to\n# NO a bullet list will be used.\n\nHTML_ALIGN_MEMBERS     = YES\n\n# If the HTML_DYNAMIC_SECTIONS tag is set to YES then the generated HTML\n# documentation will contain sections that can be hidden and shown after the\n# page has loaded. For this to work a browser that supports\n# JavaScript and DHTML is required (for instance Mozilla 1.0+, Firefox\n# Netscape 6.0+, Internet explorer 5.0+, Konqueror, or Safari).\n\nHTML_DYNAMIC_SECTIONS  = NO\n\n# If the GENERATE_DOCSET tag is set to YES, additional index files\n# will be generated that can be used as input for Apple's Xcode 3\n# integrated development environment, introduced with OSX 10.5 (Leopard).\n# To create a documentation set, doxygen will generate a Makefile in the\n# HTML output directory. Running make will produce the docset in that\n# directory and running \"make install\" will install the docset in\n# ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find\n# it at startup.\n# See http://developer.apple.com/tools/creatingdocsetswithdoxygen.html for more information.\n\nGENERATE_DOCSET        = NO\n\n# When GENERATE_DOCSET tag is set to YES, this tag determines the name of the\n# feed. A documentation feed provides an umbrella under which multiple\n# documentation sets from a single provider (such as a company or product suite)\n# can be grouped.\n\nDOCSET_FEEDNAME        = \"Doxygen generated docs\"\n\n# When GENERATE_DOCSET tag is set to YES, this tag specifies a string that\n# should uniquely identify the documentation set bundle. This should be a\n# reverse domain-name style string, e.g. com.mycompany.MyDocSet. Doxygen\n# will append .docset to the name.\n\nDOCSET_BUNDLE_ID       = org.doxygen.Project\n\n# If the GENERATE_HTMLHELP tag is set to YES, additional index files\n# will be generated that can be used as input for tools like the\n# Microsoft HTML help workshop to generate a compiled HTML help file (.chm)\n# of the generated HTML documentation.\n\nGENERATE_HTMLHELP      = NO\n\n# If the GENERATE_HTMLHELP tag is set to YES, the CHM_FILE tag can\n# be used to specify the file name of the resulting .chm file. You\n# can add a path in front of the file if the result should not be\n# written to the html output directory.\n\nCHM_FILE               =\n\n# If the GENERATE_HTMLHELP tag is set to YES, the HHC_LOCATION tag can\n# be used to specify the location (absolute path including file name) of\n# the HTML help compiler (hhc.exe). If non-empty doxygen will try to run\n# the HTML help compiler on the generated index.hhp.\n\nHHC_LOCATION           =\n\n# If the GENERATE_HTMLHELP tag is set to YES, the GENERATE_CHI flag\n# controls if a separate .chi index file is generated (YES) or that\n# it should be included in the master .chm file (NO).\n\nGENERATE_CHI           = NO\n\n# If the GENERATE_HTMLHELP tag is set to YES, the CHM_INDEX_ENCODING\n# is used to encode HtmlHelp index (hhk), content (hhc) and project file\n# content.\n\nCHM_INDEX_ENCODING     =\n\n# If the GENERATE_HTMLHELP tag is set to YES, the BINARY_TOC flag\n# controls whether a binary table of contents is generated (YES) or a\n# normal table of contents (NO) in the .chm file.\n\nBINARY_TOC             = NO\n\n# The TOC_EXPAND flag can be set to YES to add extra items for group members\n# to the contents of the HTML help documentation and to the tree view.\n\nTOC_EXPAND             = NO\n\n# If the GENERATE_QHP tag is set to YES and both QHP_NAMESPACE and QHP_VIRTUAL_FOLDER\n# are set, an additional index file will be generated that can be used as input for\n# Qt's qhelpgenerator to generate a Qt Compressed Help (.qch) of the generated\n# HTML documentation.\n\nGENERATE_QHP           = NO\n\n# If the QHG_LOCATION tag is specified, the QCH_FILE tag can\n# be used to specify the file name of the resulting .qch file.\n# The path specified is relative to the HTML output folder.\n\nQCH_FILE               =\n\n# The QHP_NAMESPACE tag specifies the namespace to use when generating\n# Qt Help Project output. For more information please see\n# http://doc.trolltech.com/qthelpproject.html#namespace\n\nQHP_NAMESPACE          =\n\n# The QHP_VIRTUAL_FOLDER tag specifies the namespace to use when generating\n# Qt Help Project output. For more information please see\n# http://doc.trolltech.com/qthelpproject.html#virtual-folders\n\nQHP_VIRTUAL_FOLDER     = doc\n\n# If QHP_CUST_FILTER_NAME is set, it specifies the name of a custom filter to add.\n# For more information please see\n# http://doc.trolltech.com/qthelpproject.html#custom-filters\n\nQHP_CUST_FILTER_NAME   =\n\n# The QHP_CUST_FILT_ATTRS tag specifies the list of the attributes of the custom filter to add.For more information please see\n# <a href=\"http://doc.trolltech.com/qthelpproject.html#custom-filters\">Qt Help Project / Custom Filters</a>.\n\nQHP_CUST_FILTER_ATTRS  =\n\n# The QHP_SECT_FILTER_ATTRS tag specifies the list of the attributes this project's\n# filter section matches.\n# <a href=\"http://doc.trolltech.com/qthelpproject.html#filter-attributes\">Qt Help Project / Filter Attributes</a>.\n\nQHP_SECT_FILTER_ATTRS  =\n\n# If the GENERATE_QHP tag is set to YES, the QHG_LOCATION tag can\n# be used to specify the location of Qt's qhelpgenerator.\n# If non-empty doxygen will try to run qhelpgenerator on the generated\n# .qhp file.\n\nQHG_LOCATION           =\n\n# The DISABLE_INDEX tag can be used to turn on/off the condensed index at\n# top of each HTML page. The value NO (the default) enables the index and\n# the value YES disables it.\n\nDISABLE_INDEX          = NO\n\n# This tag can be used to set the number of enum values (range [1..20])\n# that doxygen will group on one line in the generated HTML documentation.\n\nENUM_VALUES_PER_LINE   = 4\n\n# The GENERATE_TREEVIEW tag is used to specify whether a tree-like index\n# structure should be generated to display hierarchical information.\n# If the tag value is set to YES, a side panel will be generated\n# containing a tree-like index structure (just like the one that\n# is generated for HTML Help). For this to work a browser that supports\n# JavaScript, DHTML, CSS and frames is required (i.e. any modern browser).\n# Windows users are probably better off using the HTML help feature.\n\nGENERATE_TREEVIEW      = NO\n\n# By enabling USE_INLINE_TREES, doxygen will generate the Groups, Directories,\n# and Class Hierarchy pages using a tree view instead of an ordered list.\n\nUSE_INLINE_TREES       = NO\n\n# If the treeview is enabled (see GENERATE_TREEVIEW) then this tag can be\n# used to set the initial width (in pixels) of the frame in which the tree\n# is shown.\n\nTREEVIEW_WIDTH         = 250\n\n# Use this tag to change the font size of Latex formulas included\n# as images in the HTML documentation. The default is 10. Note that\n# when you change the font size after a successful doxygen run you need\n# to manually remove any form_*.png images from the HTML output directory\n# to force them to be regenerated.\n\nFORMULA_FONTSIZE       = 10\n\n# When the SEARCHENGINE tag is enable doxygen will generate a search box for the HTML output. The underlying search engine uses javascript\n# and DHTML and should work on any modern browser. Note that when using HTML help (GENERATE_HTMLHELP) or Qt help (GENERATE_QHP)\n# there is already a search function so this one should typically\n# be disabled.\n\nSEARCHENGINE           = YES\n\n#---------------------------------------------------------------------------\n# configuration options related to the LaTeX output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_LATEX tag is set to YES (the default) Doxygen will\n# generate Latex output.\n\nGENERATE_LATEX         = NO\n\n# The LATEX_OUTPUT tag is used to specify where the LaTeX docs will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `latex' will be used as the default path.\n\nLATEX_OUTPUT           = latex\n\n# The LATEX_CMD_NAME tag can be used to specify the LaTeX command name to be\n# invoked. If left blank `latex' will be used as the default command name.\n\nLATEX_CMD_NAME         = latex\n\n# The MAKEINDEX_CMD_NAME tag can be used to specify the command name to\n# generate index for LaTeX. If left blank `makeindex' will be used as the\n# default command name.\n\nMAKEINDEX_CMD_NAME     = makeindex\n\n# If the COMPACT_LATEX tag is set to YES Doxygen generates more compact\n# LaTeX documents. This may be useful for small projects and may help to\n# save some trees in general.\n\nCOMPACT_LATEX          = NO\n\n# The PAPER_TYPE tag can be used to set the paper type that is used\n# by the printer. Possible values are: a4, a4wide, letter, legal and\n# executive. If left blank a4wide will be used.\n\nPAPER_TYPE             = a4wide\n\n# The EXTRA_PACKAGES tag can be to specify one or more names of LaTeX\n# packages that should be included in the LaTeX output.\n\nEXTRA_PACKAGES         =\n\n# The LATEX_HEADER tag can be used to specify a personal LaTeX header for\n# the generated latex document. The header should contain everything until\n# the first chapter. If it is left blank doxygen will generate a\n# standard header. Notice: only use this tag if you know what you are doing!\n\nLATEX_HEADER           =\n\n# If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated\n# is prepared for conversion to pdf (using ps2pdf). The pdf file will\n# contain links (just like the HTML output) instead of page references\n# This makes the output suitable for online browsing using a pdf viewer.\n\nPDF_HYPERLINKS         = YES\n\n# If the USE_PDFLATEX tag is set to YES, pdflatex will be used instead of\n# plain latex in the generated Makefile. Set this option to YES to get a\n# higher quality PDF documentation.\n\nUSE_PDFLATEX           = YES\n\n# If the LATEX_BATCHMODE tag is set to YES, doxygen will add the \\\\batchmode.\n# command to the generated LaTeX files. This will instruct LaTeX to keep\n# running if errors occur, instead of asking the user for help.\n# This option is also used when generating formulas in HTML.\n\nLATEX_BATCHMODE        = NO\n\n# If LATEX_HIDE_INDICES is set to YES then doxygen will not\n# include the index chapters (such as File Index, Compound Index, etc.)\n# in the output.\n\nLATEX_HIDE_INDICES     = NO\n\n# If LATEX_SOURCE_CODE is set to YES then doxygen will include source code with syntax highlighting in the LaTeX output. Note that which sources are shown also depends on other settings such as SOURCE_BROWSER.\n\nLATEX_SOURCE_CODE      = NO\n\n#---------------------------------------------------------------------------\n# configuration options related to the RTF output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_RTF tag is set to YES Doxygen will generate RTF output\n# The RTF output is optimized for Word 97 and may not look very pretty with\n# other RTF readers or editors.\n\nGENERATE_RTF           = NO\n\n# The RTF_OUTPUT tag is used to specify where the RTF docs will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `rtf' will be used as the default path.\n\nRTF_OUTPUT             = rtf\n\n# If the COMPACT_RTF tag is set to YES Doxygen generates more compact\n# RTF documents. This may be useful for small projects and may help to\n# save some trees in general.\n\nCOMPACT_RTF            = NO\n\n# If the RTF_HYPERLINKS tag is set to YES, the RTF that is generated\n# will contain hyperlink fields. The RTF file will\n# contain links (just like the HTML output) instead of page references.\n# This makes the output suitable for online browsing using WORD or other\n# programs which support those fields.\n# Note: wordpad (write) and others do not support links.\n\nRTF_HYPERLINKS         = NO\n\n# Load stylesheet definitions from file. Syntax is similar to doxygen's\n# config file, i.e. a series of assignments. You only have to provide\n# replacements, missing definitions are set to their default value.\n\nRTF_STYLESHEET_FILE    =\n\n# Set optional variables used in the generation of an rtf document.\n# Syntax is similar to doxygen's config file.\n\nRTF_EXTENSIONS_FILE    =\n\n#---------------------------------------------------------------------------\n# configuration options related to the man page output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_MAN tag is set to YES (the default) Doxygen will\n# generate man pages\n\nGENERATE_MAN           = NO\n\n# The MAN_OUTPUT tag is used to specify where the man pages will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `man' will be used as the default path.\n\nMAN_OUTPUT             = man\n\n# The MAN_EXTENSION tag determines the extension that is added to\n# the generated man pages (default is the subroutine's section .3)\n\nMAN_EXTENSION          = .3\n\n# If the MAN_LINKS tag is set to YES and Doxygen generates man output,\n# then it will generate one additional man file for each entity\n# documented in the real man page(s). These additional files\n# only source the real man page, but without them the man command\n# would be unable to find the correct page. The default is NO.\n\nMAN_LINKS              = NO\n\n#---------------------------------------------------------------------------\n# configuration options related to the XML output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_XML tag is set to YES Doxygen will\n# generate an XML file that captures the structure of\n# the code including all documentation.\n\nGENERATE_XML           = NO\n\n# The XML_OUTPUT tag is used to specify where the XML pages will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `xml' will be used as the default path.\n\nXML_OUTPUT             = xml\n\n# The XML_SCHEMA tag can be used to specify an XML schema,\n# which can be used by a validating XML parser to check the\n# syntax of the XML files.\n\nXML_SCHEMA             =\n\n# The XML_DTD tag can be used to specify an XML DTD,\n# which can be used by a validating XML parser to check the\n# syntax of the XML files.\n\nXML_DTD                =\n\n# If the XML_PROGRAMLISTING tag is set to YES Doxygen will\n# dump the program listings (including syntax highlighting\n# and cross-referencing information) to the XML output. Note that\n# enabling this will significantly increase the size of the XML output.\n\nXML_PROGRAMLISTING     = YES\n\n#---------------------------------------------------------------------------\n# configuration options for the AutoGen Definitions output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_AUTOGEN_DEF tag is set to YES Doxygen will\n# generate an AutoGen Definitions (see autogen.sf.net) file\n# that captures the structure of the code including all\n# documentation. Note that this feature is still experimental\n# and incomplete at the moment.\n\nGENERATE_AUTOGEN_DEF   = NO\n\n#---------------------------------------------------------------------------\n# configuration options related to the Perl module output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_PERLMOD tag is set to YES Doxygen will\n# generate a Perl module file that captures the structure of\n# the code including all documentation. Note that this\n# feature is still experimental and incomplete at the\n# moment.\n\nGENERATE_PERLMOD       = NO\n\n# If the PERLMOD_LATEX tag is set to YES Doxygen will generate\n# the necessary Makefile rules, Perl scripts and LaTeX code to be able\n# to generate PDF and DVI output from the Perl module output.\n\nPERLMOD_LATEX          = NO\n\n# If the PERLMOD_PRETTY tag is set to YES the Perl module output will be\n# nicely formatted so it can be parsed by a human reader.\n# This is useful\n# if you want to understand what is going on.\n# On the other hand, if this\n# tag is set to NO the size of the Perl module output will be much smaller\n# and Perl will parse it just the same.\n\nPERLMOD_PRETTY         = YES\n\n# The names of the make variables in the generated doxyrules.make file\n# are prefixed with the string contained in PERLMOD_MAKEVAR_PREFIX.\n# This is useful so different doxyrules.make files included by the same\n# Makefile don't overwrite each other's variables.\n\nPERLMOD_MAKEVAR_PREFIX =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the preprocessor\n#---------------------------------------------------------------------------\n\n# If the ENABLE_PREPROCESSING tag is set to YES (the default) Doxygen will\n# evaluate all C-preprocessor directives found in the sources and include\n# files.\n\nENABLE_PREPROCESSING   = NO\n\n# If the MACRO_EXPANSION tag is set to YES Doxygen will expand all macro\n# names in the source code. If set to NO (the default) only conditional\n# compilation will be performed. Macro expansion can be done in a controlled\n# way by setting EXPAND_ONLY_PREDEF to YES.\n\nMACRO_EXPANSION        = NO\n\n# If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES\n# then the macro expansion is limited to the macros specified with the\n# PREDEFINED and EXPAND_AS_DEFINED tags.\n\nEXPAND_ONLY_PREDEF     = NO\n\n# If the SEARCH_INCLUDES tag is set to YES (the default) the includes files\n# in the INCLUDE_PATH (see below) will be search if a #include is found.\n\nSEARCH_INCLUDES        = YES\n\n# The INCLUDE_PATH tag can be used to specify one or more directories that\n# contain include files that are not input files but should be processed by\n# the preprocessor.\n\nINCLUDE_PATH           =\n\n# You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard\n# patterns (like *.h and *.hpp) to filter out the header-files in the\n# directories. If left blank, the patterns specified with FILE_PATTERNS will\n# be used.\n\nINCLUDE_FILE_PATTERNS  =\n\n# The PREDEFINED tag can be used to specify one or more macro names that\n# are defined before the preprocessor is started (similar to the -D option of\n# gcc). The argument of the tag is a list of macros of the form: name\n# or name=definition (no spaces). If the definition and the = are\n# omitted =1 is assumed. To prevent a macro definition from being\n# undefined via #undef or recursively expanded use the := operator\n# instead of the = operator.\n\nPREDEFINED             =\n\n# If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then\n# this tag can be used to specify a list of macro names that should be expanded.\n# The macro definition that is found in the sources will be used.\n# Use the PREDEFINED tag if you want to use a different macro definition.\n\nEXPAND_AS_DEFINED      =\n\n# If the SKIP_FUNCTION_MACROS tag is set to YES (the default) then\n# doxygen's preprocessor will remove all function-like macros that are alone\n# on a line, have an all uppercase name, and do not end with a semicolon. Such\n# function macros are typically used for boiler-plate code, and will confuse\n# the parser if not removed.\n\nSKIP_FUNCTION_MACROS   = YES\n\n#---------------------------------------------------------------------------\n# Configuration::additions related to external references\n#---------------------------------------------------------------------------\n\n# The TAGFILES option can be used to specify one or more tagfiles.\n# Optionally an initial location of the external documentation\n# can be added for each tagfile. The format of a tag file without\n# this location is as follows:\n#\n# TAGFILES = file1 file2 ...\n# Adding location for the tag files is done as follows:\n#\n# TAGFILES = file1=loc1 \"file2 = loc2\" ...\n# where \"loc1\" and \"loc2\" can be relative or absolute paths or\n# URLs. If a location is present for each tag, the installdox tool\n# does not have to be run to correct the links.\n# Note that each tag file must have a unique name\n# (where the name does NOT include the path)\n# If a tag file is not located in the directory in which doxygen\n# is run, you must also specify the path to the tagfile here.\n\nTAGFILES               =\n\n# When a file name is specified after GENERATE_TAGFILE, doxygen will create\n# a tag file that is based on the input files it reads.\n\nGENERATE_TAGFILE       =\n\n# If the ALLEXTERNALS tag is set to YES all external classes will be listed\n# in the class index. If set to NO only the inherited external classes\n# will be listed.\n\nALLEXTERNALS           = NO\n\n# If the EXTERNAL_GROUPS tag is set to YES all external groups will be listed\n# in the modules index. If set to NO, only the current project's groups will\n# be listed.\n\nEXTERNAL_GROUPS        = YES\n\n# The PERL_PATH should be the absolute path and name of the perl script\n# interpreter (i.e. the result of `which perl').\n\nPERL_PATH              = /usr/bin/perl\n\n#---------------------------------------------------------------------------\n# Configuration options related to the dot tool\n#---------------------------------------------------------------------------\n\n# If the CLASS_DIAGRAMS tag is set to YES (the default) Doxygen will\n# generate a inheritance diagram (in HTML, RTF and LaTeX) for classes with base\n# or super classes. Setting the tag to NO turns the diagrams off. Note that\n# this option is superseded by the HAVE_DOT option below. This is only a\n# fallback. It is recommended to install and use dot, since it yields more\n# powerful graphs.\n\nCLASS_DIAGRAMS         = YES\n\n# You can define message sequence charts within doxygen comments using the \\msc\n# command. Doxygen will then run the mscgen tool (see\n# http://www.mcternan.me.uk/mscgen/) to produce the chart and insert it in the\n# documentation. The MSCGEN_PATH tag allows you to specify the directory where\n# the mscgen tool resides. If left empty the tool is assumed to be found in the\n# default search path.\n\nMSCGEN_PATH            =\n\n# If set to YES, the inheritance and collaboration graphs will hide\n# inheritance and usage relations if the target is undocumented\n# or is not a class.\n\nHIDE_UNDOC_RELATIONS   = YES\n\n# If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is\n# available from the path. This tool is part of Graphviz, a graph visualization\n# toolkit from AT&T and Lucent Bell Labs. The other options in this section\n# have no effect if this option is set to NO (the default)\n\nHAVE_DOT               = NO\n\n# By default doxygen will write a font called FreeSans.ttf to the output\n# directory and reference it in all dot files that doxygen generates. This\n# font does not include all possible unicode characters however, so when you need\n# these (or just want a differently looking font) you can specify the font name\n# using DOT_FONTNAME. You need need to make sure dot is able to find the font,\n# which can be done by putting it in a standard location or by setting the\n# DOTFONTPATH environment variable or by setting DOT_FONTPATH to the directory\n# containing the font.\n\nDOT_FONTNAME           = FreeSans\n\n# The DOT_FONTSIZE tag can be used to set the size of the font of dot graphs.\n# The default size is 10pt.\n\nDOT_FONTSIZE           = 10\n\n# By default doxygen will tell dot to use the output directory to look for the\n# FreeSans.ttf font (which doxygen will put there itself). If you specify a\n# different font using DOT_FONTNAME you can set the path where dot\n# can find it using this tag.\n\nDOT_FONTPATH           =\n\n# If the CLASS_GRAPH and HAVE_DOT tags are set to YES then doxygen\n# will generate a graph for each documented class showing the direct and\n# indirect inheritance relations. Setting this tag to YES will force the\n# the CLASS_DIAGRAMS tag to NO.\n\nCLASS_GRAPH            = YES\n\n# If the COLLABORATION_GRAPH and HAVE_DOT tags are set to YES then doxygen\n# will generate a graph for each documented class showing the direct and\n# indirect implementation dependencies (inheritance, containment, and\n# class references variables) of the class with other documented classes.\n\nCOLLABORATION_GRAPH    = YES\n\n# If the GROUP_GRAPHS and HAVE_DOT tags are set to YES then doxygen\n# will generate a graph for groups, showing the direct groups dependencies\n\nGROUP_GRAPHS           = YES\n\n# If the UML_LOOK tag is set to YES doxygen will generate inheritance and\n# collaboration diagrams in a style similar to the OMG's Unified Modeling\n# Language.\n\nUML_LOOK               = NO\n\n# If set to YES, the inheritance and collaboration graphs will show the\n# relations between templates and their instances.\n\nTEMPLATE_RELATIONS     = YES\n\n# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDE_GRAPH, and HAVE_DOT\n# tags are set to YES then doxygen will generate a graph for each documented\n# file showing the direct and indirect include dependencies of the file with\n# other documented files.\n\nINCLUDE_GRAPH          = YES\n\n# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDED_BY_GRAPH, and\n# HAVE_DOT tags are set to YES then doxygen will generate a graph for each\n# documented header file showing the documented files that directly or\n# indirectly include this file.\n\nINCLUDED_BY_GRAPH      = YES\n\n# If the CALL_GRAPH and HAVE_DOT options are set to YES then\n# doxygen will generate a call dependency graph for every global function\n# or class method. Note that enabling this option will significantly increase\n# the time of a run. So in most cases it will be better to enable call graphs\n# for selected functions only using the \\callgraph command.\n\nCALL_GRAPH             = NO\n\n# If the CALLER_GRAPH and HAVE_DOT tags are set to YES then\n# doxygen will generate a caller dependency graph for every global function\n# or class method. Note that enabling this option will significantly increase\n# the time of a run. So in most cases it will be better to enable caller\n# graphs for selected functions only using the \\callergraph command.\n\nCALLER_GRAPH           = NO\n\n# If the GRAPHICAL_HIERARCHY and HAVE_DOT tags are set to YES then doxygen\n# will graphical hierarchy of all classes instead of a textual one.\n\nGRAPHICAL_HIERARCHY    = YES\n\n# If the DIRECTORY_GRAPH, SHOW_DIRECTORIES and HAVE_DOT tags are set to YES\n# then doxygen will show the dependencies a directory has on other directories\n# in a graphical way. The dependency relations are determined by the #include\n# relations between the files in the directories.\n\nDIRECTORY_GRAPH        = YES\n\n# The DOT_IMAGE_FORMAT tag can be used to set the image format of the images\n# generated by dot. Possible values are png, jpg, or gif\n# If left blank png will be used.\n\nDOT_IMAGE_FORMAT       = png\n\n# The tag DOT_PATH can be used to specify the path where the dot tool can be\n# found. If left blank, it is assumed the dot tool can be found in the path.\n\nDOT_PATH               =\n\n# The DOTFILE_DIRS tag can be used to specify one or more directories that\n# contain dot files that are included in the documentation (see the\n# \\dotfile command).\n\nDOTFILE_DIRS           =\n\n# The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of\n# nodes that will be shown in the graph. If the number of nodes in a graph\n# becomes larger than this value, doxygen will truncate the graph, which is\n# visualized by representing a node as a red box. Note that doxygen if the\n# number of direct children of the root node in a graph is already larger than\n# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note\n# that the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.\n\nDOT_GRAPH_MAX_NODES    = 50\n\n# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the\n# graphs generated by dot. A depth value of 3 means that only nodes reachable\n# from the root by following a path via at most 3 edges will be shown. Nodes\n# that lay further from the root node will be omitted. Note that setting this\n# option to 1 or 2 may greatly reduce the computation time needed for large\n# code bases. Also note that the size of a graph can be further restricted by\n# DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.\n\nMAX_DOT_GRAPH_DEPTH    = 0\n\n# Set the DOT_TRANSPARENT tag to YES to generate images with a transparent\n# background. This is disabled by default, because dot on Windows does not\n# seem to support this out of the box. Warning: Depending on the platform used,\n# enabling this option may lead to badly anti-aliased labels on the edges of\n# a graph (i.e. they become hard to read).\n\nDOT_TRANSPARENT        = NO\n\n# Set the DOT_MULTI_TARGETS tag to YES allow dot to generate multiple output\n# files in one run (i.e. multiple -o and -T options on the command line). This\n# makes dot run faster, but since only newer versions of dot (>1.8.10)\n# support this, this feature is disabled by default.\n\nDOT_MULTI_TARGETS      = YES\n\n# If the GENERATE_LEGEND tag is set to YES (the default) Doxygen will\n# generate a legend page explaining the meaning of the various boxes and\n# arrows in the dot generated graphs.\n\nGENERATE_LEGEND        = YES\n\n# If the DOT_CLEANUP tag is set to YES (the default) Doxygen will\n# remove the intermediate dot files that are used to generate\n# the various graphs.\n\nDOT_CLEANUP            = YES\n"
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 1.166015625,
          "content": "# FAQ\n\n## Can `xdotool` work with hexadecimal window IDs?\n\nYes. You can easily check this, by using `wmctrl` as\nan alternative way to obtain a window ID in hexadecimal.\n\nThis will show the window ID in hexadecimal of\na window with title `My dialog title`:\n\n```\nwmctrl -l | grep \"My dialog title\" | cut -f 1 -d ' '\n```\n\nI got the value of `0x02800003` displayed on my screen, \nbut you will probably have a different value.\n\nFeeding that hexadecimal value to `xdotool` does activate the window:\n\n```\nxdotool windowactivate $(wmctrl -l | grep \"My dialog title\" | cut -f 1 -d ' ')\n```\n\n## How to let `xdotool` work with Qt applications?\n\n`xdotool` can unsually extract the ID of a Qt application \nfrom its window title, as shown by \n[this StackOverflow question](http://stackoverflow.com/questions/37050159/xdotool-cannot-find-qt-application-window-where-wmctrl-can).\n\nIf something is wrong, a workaround is to use `wmctrl`\nto obtain the window ID:\n\n```\nxdotool windowactivate $(wmctrl -l | grep \"My dialog title\" | cut -f 1 -d ' ')\n```\n\nReplace 'My dialog title' for the window name you are looking for.\n\nNote that `wmctrl` displays the window ID in hexadecimal. This is no\nproblem for `xdotool`!\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 9.095703125,
          "content": "DESTDIR?=\nPREFIX?=/usr/local\nINSTALLBIN?=$(PREFIX)/bin\nINSTALLLIB?=$(PREFIX)/lib\nINSTALLMAN?=$(PREFIX)/man\nINSTALLINCLUDE?=$(PREFIX)/include\nINSTALLPC?=$(INSTALLLIB)/pkgconfig\nLDCONFIG?=ldconfig\n\nDPREFIX=$(DESTDIR)$(PREFIX)\nDINSTALLBIN=$(DESTDIR)$(INSTALLBIN)\nDINSTALLLIB=$(DESTDIR)$(INSTALLLIB)\nDINSTALLMAN=$(DESTDIR)$(INSTALLMAN)\nDINSTALLINCLUDE=$(DESTDIR)$(INSTALLINCLUDE)\nDINSTALLPC=$(DESTDIR)$(INSTALLPC)\n\nMAJOR=$(shell sh version.sh --major)\nVERSION=$(shell sh version.sh)\n\nWARNFLAGS+=-pedantic -Wall -W -Wundef \\\n           -Wendif-labels -Wshadow -Wpointer-arith -Wbad-function-cast \\\n           -Wcast-align -Wwrite-strings -Wstrict-prototypes \\\n           -Wmissing-prototypes -Wnested-externs -Winline \\\n           -Wdisabled-optimization -Wno-missing-field-initializers\nLIBSUFFIX=$(shell sh platform.sh libsuffix)\nVERLIBSUFFIX=$(shell sh platform.sh libsuffix $(MAJOR))\nDYNLIBFLAG=$(shell sh platform.sh dynlibflag)\nLIBNAMEFLAG=$(shell sh platform.sh libnameflag $(MAJOR) $(INSTALLLIB))\n\nCFLAGS?=-pipe -O2 $(WARNFLAGS)\nCFLAGS+=-g # TODO(sissel): Comment before release\nCFLAGS+=$(CPPFLAGS)\nCFLAGS+=$(shell sh cflags.sh)\n\nDEFAULT_LIBS=-L/usr/X11R6/lib -L/usr/local/lib -lX11 -lXtst -lXinerama -lxkbcommon\nDEFAULT_INC=-I/usr/X11R6/include -I/usr/local/include\n\nXDOTOOL_LIBS=$(shell pkg-config --libs x11 2> /dev/null || echo \"$(DEFAULT_LIBS)\")  $(shell sh platform.sh extralibs)\nLIBXDO_LIBS=$(shell pkg-config --libs x11 xtst xinerama xkbcommon 2> /dev/null || echo \"$(DEFAULT_LIBS)\")\nINC=$(shell pkg-config --cflags x11 xtst xinerama xkbcommon 2> /dev/null || echo \"$(DEFAULT_INC)\")\nCFLAGS+=-std=c99 $(INC)\n\nCMDOBJS= cmd_click.o cmd_mousemove.o cmd_mousemove_relative.o cmd_mousedown.o \\\n         cmd_mouseup.o cmd_getmouselocation.o cmd_type.o cmd_key.o \\\n         cmd_windowmove.o cmd_windowactivate.o cmd_windowfocus.o \\\n         cmd_windowraise.o cmd_windowlower.o cmd_windowsize.o cmd_windowstate.o cmd_set_window.o cmd_search.o \\\n         cmd_getwindowfocus.o cmd_getwindowpid.o cmd_getactivewindow.o \\\n         cmd_windowmap.o cmd_windowunmap.o cmd_windowreparent.o \\\n         cmd_set_num_desktops.o \\\n         cmd_get_num_desktops.o cmd_set_desktop.o cmd_get_desktop.o \\\n         cmd_set_desktop_for_window.o cmd_get_desktop_for_window.o \\\n         cmd_get_desktop_viewport.o cmd_set_desktop_viewport.o \\\n         cmd_windowkill.o cmd_behave.o cmd_window_select.o \\\n         cmd_getwindowname.o cmd_getwindowclassname.o cmd_behave_screen_edge.o \\\n         cmd_windowminimize.o cmd_exec.o cmd_getwindowgeometry.o \\\n         cmd_windowclose.o cmd_windowquit.o \\\n         cmd_sleep.o cmd_get_display_geometry.o\n\n.PHONY: all\nall: xdotool.1 libxdo.$(LIBSUFFIX) libxdo.$(VERLIBSUFFIX) xdotool\n\n.PHONY: static\nstatic: xdotool.static\n\n.PHONY: install-static\ninstall-static: xdotool.static\n\tinstall -d $(DINSTALLBIN)\n\tinstall -m 755 xdotool.static $(DINSTALLBIN)/xdotool\n\nxdotool.static: xdotool.o $(CMDOBJS) xdo.o xdo_search.o\n\t$(CC) -o xdotool.static xdotool.o xdo.o xdo_search.o $(CMDOBJS) $(LDFLAGS)  -lm $(XDOTOOL_LIBS) $(LIBXDO_LIBS)\n\n.PHONY: install\ninstall: pre-install installlib installprog installman installheader installpc post-install\n\n.PHONY: pre-install\npre-install:\n\tinstall -d $(DPREFIX)\n\n.PHONY: post-install\npost-install:\n\t@if [ \"$$(uname)\" = \"Linux\" ] ; then \\\n\t\techo \"Running ldconfig to update library cache\"; \\\n\t\t$(LDCONFIG) \\\n\t\t  || echo \"Failed running 'ldconfig'. Maybe you need to be root?\"; \\\n\tfi\n\n.PHONY: installprog\ninstallprog: xdotool\n\tinstall -d $(DINSTALLBIN)\n\tinstall -m 755 xdotool $(DINSTALLBIN)/\n\n.PHONY: installlib\ninstalllib: libxdo.$(LIBSUFFIX)\n\tinstall -d $(DINSTALLLIB)\n\tinstall libxdo.$(LIBSUFFIX) $(DINSTALLLIB)/libxdo.$(VERLIBSUFFIX)\n\tln -sf libxdo.$(VERLIBSUFFIX) $(DINSTALLLIB)/libxdo.$(LIBSUFFIX)\n\n.PHONY: installheader\ninstallheader: xdo.h\n\tinstall -d $(DINSTALLINCLUDE)\n\tinstall -m 0644 xdo.h $(DINSTALLINCLUDE)/xdo.h\n\n.PHONY: installpc\ninstallpc: libxdo.pc\n\tinstall -d $(DINSTALLPC)\n\tinstall -m 0644 libxdo.pc $(DINSTALLPC)/libxdo.pc\n\n.PHONY: installman\ninstallman: xdotool.1\n\tinstall -d $(DINSTALLMAN)/man1\n\tinstall -m 644 xdotool.1 $(DINSTALLMAN)/man1/\n\n.PHONY: deinstall\ndeinstall: uninstall\n\n.PHONY: uninstall\nuninstall: \n\trm -f $(DINSTALLBIN)/xdotool\n\trm -f $(DINSTALLMAN)/xdotool.1\n\trm -f $(DINSTALLLIB)/libxdo.$(LIBSUFFIX)\n\trm -f $(DINSTALLLIB)/libxdo.$(VERLIBSUFFIX)\n\n.PHONY: clean\nclean:\n\trm -f *.o xdotool xdotool.static xdotool.1 xdotool.html \\\n\t      libxdo.$(LIBSUFFIX) libxdo.$(VERLIBSUFFIX) libxdo.a libxdo.pc \\\n\t      *.deb\n\nxdo.o: xdo.c xdo_version.h\n\t$(CC) $(CFLAGS) -fPIC -c xdo.c\n\nxdo_search.o: xdo_search.c\n\t$(CC) $(CFLAGS) -fPIC -c xdo_search.c\n\nxdotool.o: xdotool.c xdo_version.h\n\t$(CC) $(CFLAGS) -c xdotool.c\n\nxdo_search.c: xdo.h\nxdo.c: xdo.h\nxdotool.c: xdo.h\n\nlibxdo.$(LIBSUFFIX): xdo.o xdo_search.o\n\t$(CC) $(LDFLAGS) $(DYNLIBFLAG) $(LIBNAMEFLAG) xdo.o xdo_search.o -o $@ $(LIBXDO_LIBS)\n\nlibxdo.a: xdo.o xdo_search.o\n\tar qv $@ xdo.o xdo_search.o\n\nlibxdo.$(VERLIBSUFFIX): libxdo.$(LIBSUFFIX)\n\tln -s $< $@\n\nlibxdo.pc: VERSION\n\tsh pc.sh $(VERSION) $(INSTALLLIB) $(INSTALLINCLUDE) > libxdo.pc\n\n# xdotool the binary requires libX11 now for XSelectInput and friends.\n# This requirement will go away once more things are refactored into\n# libxdo.\n# TODO(sissel): only do this linker hack if we're using GCC?\nxdotool: LDFLAGS+=-Xlinker\nifneq ($(WITHOUT_RPATH_FIX),1)\nxdotool: LDFLAGS+=-rpath $(INSTALLLIB)\nendif\nxdotool: xdotool.o $(CMDOBJS) libxdo.$(LIBSUFFIX)\n\t$(CC) -o $@ xdotool.o $(CMDOBJS) -L. -lxdo $(LDFLAGS)  -lm $(XDOTOOL_LIBS)\n\nxdotool.1: xdotool.pod\n\tpod2man -c \"\" -r \"\" xdotool.pod > $@\n\n.PHONY: showman\nshowman: xdotool.1\n\tnroff -man $< | $$PAGER\n\n.PHONY: docs\ndocs: Doxyfile xdo.h\n\tdoxygen\n\nxdotool.html: xdotool.pod\n\tpod2html $< > $@\n\n.PHONY: package\npackage: test-package-build create-package create-package-deb\n\n.PHONY: update-version\nupdate-version:\n\trm -f VERSION\n\tmake VERSION xdo_version.h\n\n.PHONY: package-deb\npackage-deb: test-package-build create-package-deb\n\n.PHONY: test\ntest: WITH_SHELL=/bin/bash\ntest: xdotool libxdo.$(VERLIBSUFFIX)\n\techo $(WITH_SHELL)\n\tif [ \"$(WITH_SHELL)\" = \"/bin/sh\" ] ; then \\\n\t\techo \"Shell '$(WITH_SHELL)' fails on some Linux distros because it could\"; \\\n\t\techo \"be 'dash', a poorly implemented shell with bugs that break the\"; \\\n\t\techo \"tests. You need to use bash, zsh, or ksh to run the tests.\"; \\\n\t\texit 1; \\\n\tfi\n\tSHELL=$(WITH_SHELL) $(MAKE) -C t\n\nxdo_version.h: VERSION\n\tsh version.sh --header > $@\n\nVERSION:\n\tsh version.sh --shell > $@\n\n.PHONY: create-package\ncreate-package: NAME=xdotool-$(VERSION)\ncreate-package: xdo_version.h libxdo.pc\n\techo \"Creating package: $(NAME)\"\n\tmkdir \"$(NAME)\"\n\trsync --exclude '.*' -a `ls -d *.pod COPYRIGHT *.c *.h *.pc examples t CHANGELIST README.md Makefile* version.sh platform.sh cflags.sh VERSION Doxyfile 2> /dev/null` \"$(NAME)/\"\n\ttar -zcf \"$(NAME).tar.gz\" \"$(NAME)\"\n\trm -r \"$(NAME)\"\n\n# Make sure the package we're building compiles.\n.PHONY: test-package-build\ntest-package-build: NAME=xdotool-$(VERSION)\ntest-package-build: create-package\n\techo \"Testing package $(NAME)\"\n\ttar -zxf $(NAME).tar.gz\n\tmake -C ./$(NAME)\n\tmake -C ./$(NAME) docs\n\tmake -C ./$(NAME) install DESTDIR=$(NAME)/install-test/ LDCONFIG=:\n\tmake -C ./$(NAME) test\n\trm -rf ./$(NAME)\n\techo \"Package ready: $(NAME)\";\n\n\n### Build .deb packages for xdotool. The target 'create-package-deb' will\n# create {xdotool,xdotool-doc,libxdo$(MAJOR),libxdo$(MAJOR)-dev}*.deb packages\n# The reason I do this is to avoid any madness involved in dealing with\n# debuild, dh_make, and related tools. '.deb' packages are an 'ar' with two\n# tarballs.\n\nDEBDIR=deb-build\ncreate-package-deb: VERSION xdo_version.h\n\t[ -d $(DEBDIR) ] && rm -r $(DEBDIR) || true\n\t$(MAKE) xdotool.deb xdotool-doc.deb libxdo$(MAJOR).deb libxdo$(MAJOR)-dev.deb\n\n%.deb: $(DEBDIR)/usr\n\t$(MAKE) $(DEBDIR)/$*/data.tar.gz $(DEBDIR)/$*/control.tar.gz \\\n\t        $(DEBDIR)/$*/debian-binary\n\twd=$$PWD; \\\n\tcd $(DEBDIR)/$*; \\\n\t  ar -qc $$wd/$*_$(VERSION)-1_$(shell uname -m).deb \\\n\t    debian-binary control.tar.gz data.tar.gz\n\n$(DEBDIR)/usr:\n\t$(MAKE) install DESTDIR=$(DEBDIR) PREFIX=/usr INSTALLMAN=/usr/share/man\n\n$(DEBDIR)/xdotool $(DEBDIR)/xdotool-doc $(DEBDIR)/libxdo$(MAJOR) $(DEBDIR)/libxdo$(MAJOR)-dev:\n\tmkdir -p $@\n\n$(DEBDIR)/%/debian-binary:\n\techo \"2.0\" > $@\n\n# Generate the 'control' file\n$(DEBDIR)/%/control: $(DEBDIR)/%/\n\tsed -e 's/%VERSION%/$(VERSION)/g; s/%MAJOR%/$(MAJOR)/' \\\n\t\text/debian/$(shell echo $* | tr -d 0-9).control > $@\n\n# Generate the 'md5sums' file \n$(DEBDIR)/%/md5sums: $(DEBDIR)/%/ $(DEBDIR)/%/data.tar.gz \n\ttar -ztf $(DEBDIR)/$*/data.tar.gz | (cd $(DEBDIR); xargs md5sum || true) > $@\n\n# Generate the 'control.tar.gz'\n$(DEBDIR)/%/control.tar.gz: $(DEBDIR)/%/control $(DEBDIR)/%/md5sums\n\ttar -C $(DEBDIR)/$* -zcf $(DEBDIR)/$*/control.tar.gz control md5sums \n\n# Build a tarball for xdotool files\n$(DEBDIR)/xdotool/data.tar.gz: $(DEBDIR)/xdotool\n\ttar -C $(DEBDIR) -zcf $@ usr/bin\n\n# Build a tarball for libxdo# files\n$(DEBDIR)/libxdo$(MAJOR)/data.tar.gz: $(DEBDIR)/libxdo$(MAJOR)\n\ttar -C $(DEBDIR) -zcf $@ usr/lib\n\n# Build a tarball for libxdo#-dev files\n$(DEBDIR)/libxdo$(MAJOR)-dev/data.tar.gz: $(DEBDIR)/libxdo$(MAJOR)-dev\n\ttar -C $(DEBDIR) -zcf $@ usr/include\n\n# Build a tarball for xdotool-doc files\n$(DEBDIR)/xdotool-doc/data.tar.gz: $(DEBDIR)/xdotool-doc\n\ttar -C $(DEBDIR) -zcf $@ usr/share\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.826171875,
          "content": "# `xdotool` - x11 automation tool\n\n`xdotool` lets you simulate keyboard input and mouse activity, move and resize windows, etc. It does this using X11’s XTEST extension and other Xlib functions.\n\n⚠ Note: If you are using Wayland, please be aware this software will not work correctly. See the 'Wayland' section below for more detail.\n\nWith xdotool, you can search for windows and move, resize, hide, and modify\nwindow properties like the title. If your window manager supports it, you can\nuse xdotool to switch desktops, move windows between desktops, and change the\nnumber of desktops.\n\nAlso in this repository is `libxdo`, a C library for doing the same.\n\nYou may view the user documentation in [`xdotool.pod`](https://github.com/jordansissel/xdotool/blob/master/xdotool.pod)\n\n## Installation\n\nYou may find xdotool in your distribution packaging:\n\n* Debian and Ubuntu: `apt-get install xdotool`\n* Fedora: `dnf install xdotool`\n* FreeBSD: `pkg install xdotool`\n* macOS: `brew install xdotool` or `sudo port install xdotool`\n* OpenSUSE: `zypper install xdotool`\n\n## Basic Usage\n\n### Typing\n\nFrom your terminal, run:\n\n```\nxdotool type \"Hello world\"\n```\n\n### Sending keys\n\n```\nxdotool key ctrl+l\n```\n\nThe above will simulate the keystrokes as if you pressed the control key, then the \"L\" key, and then released both. This is useful for simulating hotkeys.\n\n### Closing a window\n\n```\nxdotool selectwindow windowclose\n```\n\nThis will close the first window you click on.\n\n## Cool Tricks\n\n### Bring up Firefox and focus the URL bar\n\n```\nxdotool search \"Mozilla Firefox\" windowactivate --sync key --clearmodifiers ctrl+l\n```\n\n### Resize all visible gnome-terminal windows\n\n```\nxdotool search --onlyvisible --classname \"gnome-terminal\" windowsize %@ 500\n500\n```\n\n## Wayland\n\nWayland is a very different graphics system than X11 (which you might know as Xorg or X). Wayland has some X11 compatibility, but for the purposes of xdotool, many things do not work correctly. Typing, window searching, and many other functions of xdotool do not work, and it is unclear if they could ever work.\n\nSome other tools that might help you if you use Wayland are:\n\n* [ydotool](https://github.com/ReimuNotMoe/ydotool) - a tool for sending mouse and keyboard events using Linux's uinput sytem\n* [dotool](https://git.sr.ht/~geb/dotool) - a tool for sending mouse and keyboard events using Linux's uinput sytem\n\n## Building / Compiling\n\nPrerequisites:\n* X11 libraries: xlib, xtst, xi, xkbcommon, xinerama\n\nHow to compile and install:\n\n* Compile: make\n* Install: make install\n* Remove: make uninstall\n\nYou may have to set 'PREFIX' to the location you want to install to. \nThe default PREFIX is /usr/local\n\nFor packagers, there's also support for DESTDIR for staged install.\n\nAlso, see the manpage, which you can generate by running:\n\n```\n  make showman\n```\n\nNote: the manpage will be installed during 'make install'\n\n\n"
        },
        {
          "name": "TODO",
          "type": "blob",
          "size": 0.7041015625,
          "content": "The following are todos not yet complete:\n\n  @ BUG: behave mouse-click doesn't work right. \n    http://code.google.com/p/semicomplete/issues/detail?id=42\n  @ BUG: This types the wrong symbols:\n      setxkbmap -option grp:switch,grp:shifts_toggle se,us\n      xdotool \"type\" '`12345678990-=~!@#$%^&*()_+[]{}'\n      Result: ¶12345678990\\=¾ !²#¼%⅝&«()¿+[]{}\n  @ FEATURE: snapshot and restore window geometries? Maybe best as a script.\n    (Requested by Joseph Krahn)\n  @ TODO: maximize, unmaximize windows (Requested by Joe Krahn via\n    mailing list)\n    This is hard to implement. I read over how EWMH recommends this, but\n    none of my messages resulted in maximize, shading, etc.\n  @ document getdisplaygeometry\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.041015625,
          "content": "MAJOR=\"3\"\nRELEASE=\"20211022\"\nREVISION=\"1\"\n"
        },
        {
          "name": "cflags.sh",
          "type": "blob",
          "size": 0.2470703125,
          "content": "#!/bin/sh\n\nsystem=`uname -s`\nif [ \"$system\" = \"Darwin\" ] ; then\n  major=`uname -r | cut -d. -f1`\n  if [ \"$major\" -le 15 ] ; then\n    # OS X 10.11 El Capitan (Darwin 15) and earlier did not have clock_gettime()\n    echo \"-DMISSING_CLOCK_GETTIME\"\n  fi\nfi\n"
        },
        {
          "name": "cmd_behave.c",
          "type": "blob",
          "size": 4.5546875,
          "content": "#include \"xdo_cmd.h\"\n#include <string.h>\n\nstruct events {\n  const char * const name;\n  int mask;\n} events[] = {\n  { \"mouse-enter\", EnterWindowMask },\n  { \"mouse-leave\", LeaveWindowMask },\n  { \"focus\", FocusChangeMask },\n  { \"blur\", FocusChangeMask },\n  { \"mouse-click\", ButtonReleaseMask },\n  { NULL, 0 },\n};\n\nint cmd_behave(context_t *context) {\n  int ret = 0;\n  char *cmd = *context->argv;\n\n  int c;\n  enum { opt_unused, opt_help };\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, opt_help },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \n    \"Usage: %s window event action [args...]\\n\"\n    \"The event is a window event, such as mouse-enter, resize, etc.\\n\"\n    \"The action is any valid xdotool command (chains OK here)\\n\"\n    \"\\n\"\n    \"Events: \\n\"\n    \"  mouse-enter      - When the mouse moves into the window\\n\"\n    \"  mouse-leave      - When the mouse leaves a window\\n\"\n    \"  mouse-click      - Fired when the mouse button is released\\n\"\n    \"  focus            - When the window gets focus\\n\"\n    \"  blur             - When the window loses focus\\n\";\n\n  int option_index;\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n      case opt_help:\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  if (context->argc < 3) {\n    fprintf(stderr, \"Invalid number of arguments (minimum is 3)\\n\");\n    fprintf(stderr, usage, cmd);\n    return EXIT_FAILURE;\n  }\n\n  /* Can't use consume_args since 'behave' eats the rest of the line. */\n  /* TODO(sissel): make it work. */\n  const char *window_arg = context->argv[0];\n  consume_args(context, 1);\n\n  const char *event = context->argv[0];\n  consume_args(context, 1);\n\n  /* The remainder of args are supposed to be what to run on the action */\n\n  long selectmask = 0;\n  int i;\n  for (i = 0; events[i].name != NULL; i++) {\n    //printf(\"%s vs %s\\n\", events[i].name, event);\n    if (!strcmp(events[i].name, event)) {\n      xdotool_debug(context, \"Adding mask for event '%s': 0x%lx\", event, events[i].mask);\n      selectmask |= events[i].mask;\n    }\n  }\n\n  if (selectmask == 0) {\n    fprintf(stderr, \"Unknown event '%s'\\n\", event);\n    return EXIT_FAILURE;\n  }\n\n  xdotool_debug(context, \"Selectmask: 0x%lx\", selectmask);\n  window_each(context, window_arg, {\n    xdotool_debug(context, \"Selecting events on window %ld: mask = 0x%lx\",\n                  window, selectmask);\n    ret = XSelectInput(context->xdo->xdpy, window, selectmask);\n    xdotool_debug(context, \"Select: %d\", ret);\n    if (ret != True) {\n      fprintf(stderr, \"XSelectInput reported an error\\n\");\n    }\n  }); /* window_each(...) */\n\n  while (True) {\n    XEvent e;\n    xdotool_debug(context, \"Waiting for next event...\");\n    XNextEvent(context->xdo->xdpy, &e);\n    xdotool_debug(context, \"Got event type %d\", e.type);\n\n    // Copy context\n    context_t tmpcontext = *context;\n\n    tmpcontext.nwindows = 1;\n    Window hover; /* for LeaveNotify */\n    switch (e.type) {\n      case LeaveNotify:\n        /* LeaveNotify is confusing.\n         * It is sometimes fired when you are actually entering the window\n         * especially at the screen edges. not sure why or what causes it.\n         * Work around: Query the window the mouse is over. If it is not\n         * us, then we can fire leave.  */\n\n        /* allow some time to pass to let the mouse really leave if we are on our way out */\n        /* TODO(sissel): allow this delay to be tunable */\n        usleep(100000); /* 100ms */\n        xdo_get_window_at_mouse(context->xdo, &hover);\n        if (hover == e.xcrossing.window) {\n          //printf(\"Ignoring Leave, we're still in the window\\n\");\n          break;\n        }\n        //printf(\"Window: %ld\\n\", e.xcrossing.window);\n        //printf(\"Hover: %ld\\n\", hover);\n\n        /* fall through */\n      case EnterNotify:\n        tmpcontext.windows = &(e.xcrossing.window);\n        ret = context_execute(&tmpcontext);\n        break;\n      case FocusIn:\n      case FocusOut:\n        tmpcontext.windows = &(e.xfocus.window);\n        ret = context_execute(&tmpcontext);\n        break;\n      case ButtonRelease:\n        tmpcontext.windows = &(e.xbutton.window);\n        ret = context_execute(&tmpcontext);\n        break;\n      default:\n        printf(\"Unexpected event: %d\\n\", e.type);\n        break;\n    }\n\n    if (ret != XDO_SUCCESS) {\n      xdotool_output(context, \"Command failed.\");\n    }\n  }\n  return ret;\n}\n\n"
        },
        {
          "name": "cmd_behave_screen_edge.c",
          "type": "blob",
          "size": 11.9599609375,
          "content": "#include \"xdo_cmd.h\"\n#include <string.h>\n#include <sys/select.h> /* for select */\n#include <time.h> /* for clock_gettime */\n#include <sys/time.h> /* for timeradd and friends */\n\n#if defined(MISSING_CLOCK_GETTIME)\n/* http://code.google.com/p/semicomplete/issues/detail?id=37\n * OS X doesn't support clock_gettime (in at least OSX <= 10.11) */\n#  include \"patch_clock_gettime.h\"\n#endif\n\n/* TODO(sissel): Refactor the madness.\n * The event look, delay and quiesce state handling, etc, are all pretty\n * intermingled. This needs a serious refactor into separate functions and\n * a struct to hold state, etc.\n */\n\n/* TODO(sissel): Implement XRANDR so we can detect when screen sizes change?\n *\n * Then again, since we always query the size of the window (root) that\n * the mouse is in, maybe it doesn't matter.\n *\n * Possible improvements to this could be to select ConfigureNotify so\n * we can be told of window size changes rather than querying the root\n * window size every time. \n */\nextern int context_execute(context_t *context);\n\ntypedef enum {\n  none, left, top_left, top, top_right, right,\n  bottom_right, bottom, bottom_left,\n} edge_or_corner;\n\nint is_edge_or_corner(const xdo_t *xdo, const edge_or_corner what, \n                      const Window window, const unsigned int x,\n                      const unsigned int y);\nint ignore_error(Display *dpy, XErrorEvent *xerr);\n\nint cmd_behave_screen_edge(context_t *context) {\n  int ret = 0;\n  char *cmd = *context->argv;\n  xdo_search_t search;\n  Window *windowlist;\n  unsigned int nwindows;\n  useconds_t delay = 0;\n  useconds_t quiesce = 2000000 /* 2 second default quiesce */;\n  enum { quiesce_start, quiesce_ing, quiesce_done } quiesce_state = quiesce_start;\n\n  int c;\n  enum { opt_unused, opt_help, opt_delay, opt_quiesce };\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, opt_help },\n    { \"delay\", required_argument, NULL, opt_delay },\n    { \"quiesce\", required_argument, NULL, opt_quiesce },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \n    \"Usage: %s [options] edge-or-corner action [args...]\\n\"\n    \"--delay MILLISECONDS     - delay before activating. During this time,\\n\"\n    \"        your mouse must stay in the area selected (corner or edge)\\n\"\n    \"        otherwise this timer will reset. Default is no delay (0).\\n\"\n    \"--quiesce MILLISECONDS   - quiet time period after activating that no\\n\"\n    \"        new activation will occur. This helps prevent accidental\\n\"\n    \"        re-activation immediately after an event. Default is 2000 (2\\n\"\n    \"        seconds).\"\n    \"\\n\"\n    \"edge-or-corner can be any of:\\n\"\n    \"  Edges: left, top, right, bottom\\n\"\n    \"  Corners: top-left, top-right, bottom-left, bottom-right\\n\"\n    \"The action is any valid xdotool command (chains OK here)\\n\";\n\n  int option_index;\n  while ((c = getopt_long_only(context->argc, context->argv, \"+hdq\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n      case opt_help:\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      case 'd':\n      case opt_delay:\n        delay = atoi(optarg) * 1000; /* convert ms to usec */\n        /* TODO(sissel): Do validation */\n        break;\n      case 'q':\n      case opt_quiesce:\n        quiesce = atoi(optarg) * 1000; /* convert ms to usec */\n        /* TODO(sissel): Do validation */\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  if (context->argc < 2) {\n    fprintf(stderr, \"Invalid number of arguments (minimum is 2)\\n\");\n    fprintf(stderr, usage, cmd);\n    return EXIT_FAILURE;\n  }\n\n  const char *edge_or_corner_spec = context->argv[0];\n  consume_args(context, 1);\n\n  /* The remainder of args are supposed to be what to run when the edge\n   * or corner is hit */\n\n  /* TODO(sissel): Refactor this into libxdo */\n  memset(&search, 0, sizeof(xdo_search_t));\n  search.max_depth = -1;\n  search.require = SEARCH_ANY;\n  search.searchmask = SEARCH_NAME;\n  search.winname = \"^\"; /* Match anything */\n  xdo_search_windows(context->xdo, &search, &windowlist, &nwindows);\n  unsigned int i;\n  for (i = 0; i < nwindows; i++) {\n    XSelectInput(context->xdo->xdpy, windowlist[i], PointerMotionMask | SubstructureNotifyMask);\n  }\n\n  edge_or_corner want;\n  if (!strcmp(edge_or_corner_spec, \"left\")) {\n    want = left;\n  } else if (!strcmp(edge_or_corner_spec, \"top-left\")) {\n    want = top_left;\n  } else if (!strcmp(edge_or_corner_spec, \"top\")) {\n    want = top;\n  } else if (!strcmp(edge_or_corner_spec, \"top-right\")) {\n    want = top_right;\n  } else if (!strcmp(edge_or_corner_spec, \"right\")) {\n    want = right;\n  } else if (!strcmp(edge_or_corner_spec, \"bottom-right\")) {\n    want = bottom_right;\n  } else if (!strcmp(edge_or_corner_spec, \"bottom\")) {\n    want = bottom;\n  } else if (!strcmp(edge_or_corner_spec, \"bottom-left\")) {\n    want = bottom_left;\n  } else {\n    fprintf(stderr, \"Invalid edge or corner, '%s'\\n\", edge_or_corner_spec);\n    fprintf(stderr, usage, cmd);\n    return EXIT_FAILURE;\n  } \n\n  int need_new_context = True;\n  context_t *tmpcontext = NULL;\n  edge_or_corner state = none;\n  struct timeval sleeptime = {-1,0};\n  struct timeval triggertime = {0,0};\n  struct timeval delaytime = { delay / 1000000, delay % 1000000 };\n  struct timeval quiescetime = { quiesce / 1000000, quiesce % 1000000 };\n  struct timeval quiesceuntil = {0,0};\n  //printf(\"Delay time: %ld.%ld\\n\", delaytime.tv_sec, delaytime.tv_usec);\n  struct timeval tmptime = {0,0};\n  struct timespec now = {0,0};\n\n  fd_set fdset;\n  int xfd = XConnectionNumber(context->xdo->xdpy);\n  FD_ZERO(&fdset);\n  FD_SET(xfd, &fdset);\n\n  /* Flush any pending requests before we start looping */\n  XFlush(context->xdo->xdpy);\n\n  while (True) {\n    XEvent e;\n    e.type = 0; /* clear event */\n\n    fd_set fdset_copy = fdset; \n    int ready = 0;\n\n    /* TODO(sissel): use select, not XNextEvent */\n    /* Take tv_sec value of '-1' to mean block-forever */\n\n    ready = select(xfd + 1, &fdset_copy, NULL, NULL,\n                   (sleeptime.tv_sec < 0 ? NULL : &sleeptime));\n    sleeptime.tv_sec = -1; /* default to block forever */\n\n    int trigger = False;\n    if (ready) {\n      XNextEvent(context->xdo->xdpy, &e);\n    } else {\n      /* timeout */\n      printf(\"Timeout\\n\");\n      if (quiesce_state == quiesce_ing) {\n        quiesce_state = quiesce_done;\n      } else if (state == want) {\n        trigger = True;\n      }\n    }\n\n    /* Only create a context copy if we need one */\n    if (need_new_context) {\n      tmpcontext = calloc(1, sizeof(context_t));\n      memcpy(tmpcontext, context, sizeof(context_t));\n    }\n\n    int (*old_error_handler)(Display *dpy, XErrorEvent *xerr);\n    switch (e.type) {\n      case CreateNotify:\n        /* Ignore selection errors. Errors can occur if we try to XSelectInput\n         * after a window has been destroyed */\n        old_error_handler = XSetErrorHandler(ignore_error);\n        XSelectInput(context->xdo->xdpy, e.xcreatewindow.window, PointerMotionMask | SubstructureNotifyMask);\n        XSync(context->xdo->xdpy, False);\n        XSetErrorHandler(old_error_handler);\n        break;\n      case MotionNotify:\n        /* TODO(sissel): Put this in a function */\n        //printf(\"%ld: %d,%d\\n\", e.xmotion.subwindow ? e.xmotion.subwindow : e.xmotion.window,\n               //e.xmotion.x_root, e.xmotion.y_root);\n\n        /* TODO(sissel): Make a dispatch table for this? */\n        if (is_edge_or_corner(context->xdo, want, e.xmotion.root,\n                              e.xmotion.x_root, e.xmotion.y_root)) {\n          /* If we get here, then we're in the edge/corner we wanted */\n          if (state == none) {\n            state = want;\n\n            if (delay > 0) {\n              /* Calculate when we should trigger */\n              clock_gettime(CLOCK_MONOTONIC, &now);\n              tmptime.tv_sec = now.tv_sec;\n              tmptime.tv_usec = now.tv_nsec / 1000;\n              timeradd(&tmptime, &delaytime, &triggertime);\n              /* Set select() to sleep on our delay */\n              memcpy(&sleeptime, &delaytime, sizeof(struct timeval));\n            } else {\n              trigger = True;\n            }\n          } else { /* else, we are still in wanted edge/corner state */\n\n            /* Only care if we have a trigger delay */\n            if (timerisset(&triggertime)) {\n              /* Check if current time exceeds trigger time */\n              clock_gettime(CLOCK_MONOTONIC, &now);\n              tmptime.tv_sec = now.tv_sec;\n              tmptime.tv_usec = now.tv_nsec / 1000;\n              if (timercmp(&tmptime, &triggertime, >=)) {\n                trigger = True;\n              } else {\n                /* Not time yet, so next sleep should be the\n                 * remainder of time left */\n                timersub(&triggertime, &tmptime, &sleeptime);\n              }\n            } /* if delay > 0 && timerisset(&triggertime) */\n          }\n        } else { /* else, we are not in an edge/corner */\n          if (state != none) {\n            state = none;\n            delaytime.tv_usec = -1;\n          }\n        }\n        break;\n      case DestroyNotify:\n      case UnmapNotify:\n      case MapNotify:\n      case ConfigureNotify:\n      case ClientMessage:\n      case ReparentNotify:\n      case 0: /* Special \"non event\" internal to xdotool */\n        /* Ignore */\n        break;\n      default:\n        printf(\"Unexpected event: %d\\n\", e.type);\n        break;\n    } /* X11 event handling */\n\n    if (trigger == True) {\n      //printf(\"Quiesce: %d / %d == %d?\\n\", quiesce, quiesce_state, quiesce_ing);\n      if (quiesce > 0 && quiesce_state == quiesce_ing) {\n        clock_gettime(CLOCK_MONOTONIC, &now);\n        tmptime.tv_sec = now.tv_sec;\n        tmptime.tv_usec = now.tv_nsec / 1000;\n        //printf(\"Start waiting until %ld.%ld (now: %ld.%ld) due to quiesce\\n\",\n               //quiesceuntil.tv_sec, quiesceuntil.tv_usec,\n               //tmptime.tv_sec, tmptime.tv_usec);\n        if (timercmp(&quiesceuntil, &tmptime, >)) {\n          /* Don't trigger yet. Wait until quiesceuntil time. */\n          timersub(&quiesceuntil, &tmptime, &sleeptime);\n          //printf(\"Waiting for %ld.%ld due to quiesce\\n\", sleeptime.tv_sec,\n                 //sleeptime.tv_usec);\n          continue;\n        } /* if quiesceuntil has not passed yet */\n        quiesce_state = quiesce_done;\n      } /* if quiesce */\n\n      ret = context_execute(tmpcontext);\n      need_new_context = True;\n      trigger = False;\n      timerclear(&triggertime);\n      if (quiesce > 0) {\n        /* TODO(sissel): refactor clock_gettime calls */\n        clock_gettime(CLOCK_MONOTONIC, &now); \n        quiesceuntil.tv_sec = now.tv_sec;\n        quiesceuntil.tv_usec = now.tv_nsec / 1000;\n        timeradd(&quiesceuntil, &quiescetime, &quiesceuntil);\n        quiesce_state = quiesce_ing;\n        //printf(\"Start waiting for %ld.%ld due to quiesce\\n\", quiesceuntil.tv_sec,\n               //quiesceuntil.tv_usec);\n      } /* if quiesce */\n    } /* if trigger == True */\n\n    free(tmpcontext);\n\n    if (ret != XDO_SUCCESS) {\n      printf(\"Command failed.\\n\");\n    }\n  } /* while True */\n  return ret;\n} /* int cmd_behave_screen_edge */\n\nint is_edge_or_corner(const xdo_t *xdo, const edge_or_corner what, \n                      const Window window, const unsigned int x,\n                      const unsigned int y) {\n  unsigned int width;\n  unsigned int height;\n  xdo_get_window_size(xdo, window, &width, &height);\n\n  unsigned int x_max = width - 1;\n  unsigned int y_max = height - 1;\n\n  switch (what) {\n    case left: return (x == 0); break;\n    case top_left: return (x == 0 && y == 0); break;\n    case top: return (y == 0); break;\n    case top_right: return (x == x_max && y == 0); break;\n    case right: return (x == x_max); break;\n    case bottom_right: return (x == x_max && y == y_max); break;\n    case bottom: return (y == y_max); break;\n    case bottom_left: return (x == 0 && y == y_max); break;\n    case none: return False; break;\n  }\n\n  return False;\n} /* int is_edge_or_corner */\n\nint ignore_error(Display *dpy, XErrorEvent *xerr) {\n  dpy = dpy; /* Just use these to avoid warnings. */\n  xerr = xerr;\n  return 0;\n}\n\n"
        },
        {
          "name": "cmd_click.c",
          "type": "blob",
          "size": 3.244140625,
          "content": "#include \"xdo_cmd.h\"\n#include <string.h>\n\nint cmd_click(context_t *context) {\n  int button;\n  char *cmd = context->argv[0];\n  int ret = 0;\n  int clear_modifiers = 0;\n  charcodemap_t *active_mods = NULL;\n  int active_mods_n;\n  char *window_arg = NULL;\n  useconds_t delay = 100000; /* 100ms */\n  int repeat = 1;\n\n  int c;\n  enum { \n    opt_unused, opt_help, opt_clearmodifiers, opt_window, opt_delay,\n    opt_repeat\n  };\n  static struct option longopts[] = {\n    { \"clearmodifiers\", no_argument, NULL, opt_clearmodifiers },\n    { \"help\", no_argument, NULL, opt_help },\n    { \"window\", required_argument, NULL, opt_window },\n    { \"delay\", required_argument, NULL, opt_delay },\n    { \"repeat\", required_argument, NULL, opt_repeat },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \n            \"Usage: %s [options] <button>\\n\"\n            \"--clearmodifiers       - reset active modifiers (alt, etc) while typing\\n\"\n            \"--window WINDOW        - specify a window to send click to\\n\"\n            \"--repeat REPEATS       - number of times to click. Default is 1\\n\"\n            \"--delay MILLISECONDS   - delay in milliseconds between clicks.\\n\"\n            \"    This has no effect if you do not use --repeat.\\n\"\n            \"    Default is 100ms\\n\"\n            \"\\n\"\n            \"Button is a button number. Generally, left = 1, middle = 2, \\n\"\n            \"right = 3, wheel up = 4, wheel down = 5\\n\";\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+cw:h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n      case opt_help:\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      case 'c':\n      case opt_clearmodifiers:\n        clear_modifiers = 1;\n        break;\n      case 'w':\n      case opt_window:\n        clear_modifiers = 1;\n        window_arg = strdup(optarg);\n        break;\n      case 'd':\n      case opt_delay:\n        delay = strtoul(optarg, NULL, 0) * 1000; /* convert ms to usec */\n        break;\n      case 'r':\n      case opt_repeat:\n        repeat = atoi(optarg);\n        if (repeat <= 0) { \n          fprintf(stderr, \"Invalid repeat value '%s' (must be >= 1)\\n\", optarg);\n          fprintf(stderr, usage, cmd);\n          return EXIT_FAILURE;\n        }\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  if (context->argc < 1) {\n    fprintf(stderr, usage, cmd);\n    fprintf(stderr, \"You specified the wrong number of args.\\n\");\n    return EXIT_FAILURE;\n  }\n\n  button = atoi(context->argv[0]);\n\n  window_each(context, window_arg, {\n    if (clear_modifiers) {\n      xdo_get_active_modifiers(context->xdo, &active_mods, &active_mods_n);\n      xdo_clear_active_modifiers(context->xdo, window, active_mods, active_mods_n);\n    }\n\n    ret = xdo_click_window_multiple(context->xdo, window, button, repeat, delay);\n    if (ret != XDO_SUCCESS) {\n      fprintf(stderr, \"xdo_click_window failed on window %ld\\n\", window);\n      return ret;\n    }\n\n    if (clear_modifiers) {\n      xdo_set_active_modifiers(context->xdo, window, active_mods, active_mods_n);\n      free(active_mods);\n    }\n  }); /* window_each(...) */\n\n  consume_args(context, 1);\n  return ret;\n}\n"
        },
        {
          "name": "cmd_exec.c",
          "type": "blob",
          "size": 3.4990234375,
          "content": "#include \"xdo_cmd.h\"\n#include <errno.h>\n#include <string.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n\nint cmd_exec(context_t *context) {\n  char *cmd = *context->argv;\n  char **command = NULL;\n  int command_count = 0;\n  int ret = EXIT_SUCCESS;\n  int opsync = 0;\n  int arity = -1;\n  char *terminator = NULL;\n  int c, i;\n\n  enum { opt_unused, opt_help, opt_sync, opt_args, opt_terminator };\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, opt_help },\n    { \"sync\", no_argument, NULL, opt_sync },\n    { \"args\", required_argument, NULL, opt_args },\n    { \"terminator\", required_argument, NULL, opt_terminator },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \n    \"Usage: %s [options] command [arg1 arg2 ...] [terminator]\\n\"\n    \"--sync    - only exit when the command given finishes. The default\\n\"\n    \"            is to fork a child process and continue.\\n\"\n    \"--args N  - how many arguments to expect in the exec command. This is\\n\"\n    \"            useful for ending an exec and continuing with more xdotool\\n\"\n    \"            commands\\n\"\n    \"--terminator TERM - similar to --args, specifies a terminator that\\n\"\n    \"                    marks the end of 'exec' arguments. This is useful\\n\"\n    \"                    for continuing with more xdotool commands.\\n\"\n    \"\\n\"\n    \"Unless --args OR --terminator is specified, the exec command is assumed\\n\"\n    \"to be the remainder of the command line.\\n\";\n  \n  int option_index;\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n      case opt_help:\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      case opt_sync:\n        opsync = 1;\n        break;\n      case opt_args:\n        arity = atoi(optarg);\n        break;\n      case opt_terminator:\n        terminator = strdup(optarg);\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  if (context->argc == 0) {\n    fprintf(stderr, \"No arguments given.\\n\");\n    fprintf(stderr, usage, cmd);\n    return EXIT_FAILURE;\n  }\n\n  if (arity > 0 && terminator != NULL) {\n    fprintf(stderr, \"Don't use both --terminator and --args.\\n\");\n    return EXIT_FAILURE;\n  }\n\n  if (context->argc < arity) {\n    fprintf(stderr, \"You said '--args %d' but only gave %d arguments.\\n\",\n            arity, context->argc);\n    return EXIT_FAILURE;\n  }\n\n  command = calloc(context->argc + 1, sizeof(char *));\n\n  for (i=0; i < context->argc; i++) {\n    if (arity > 0 && i == arity) {\n      break;\n    }\n\n    /* if we have a terminator and the current argument matches it... */\n    if (terminator != NULL && strcmp(terminator, context->argv[i]) == 0) {\n      command_count++; /* Consume the terminator, too */\n      break;\n    }\n\n    command[i] = strdup(context->argv[i]);\n    command_count = i + 1; /* i starts at 0 */\n    xdotool_debug(context, \"Exec arg[%d]: %s\", i, command[i]);\n  }\n  command[i] = NULL;\n  \n  pid_t child;\n  child = fork();\n  if (child == 0) { /* child */\n    execvp(command[0], command);\n\n    /* if we get here, there was an error */\n    perror(\"execvp failed\");\n    exit(errno);\n  } else { /* parent */\n    if (opsync) {\n      int status = 0;\n      waitpid(child, &status, 0);\n      ret = WEXITSTATUS(status);\n    }\n  }\n\n  consume_args(context, command_count);\n  free(terminator);\n\n  for (i=0; i < command_count; i++) {\n    free(command[i]);\n  }\n  free(command);\n  return ret;\n}\n"
        },
        {
          "name": "cmd_get_desktop.c",
          "type": "blob",
          "size": 0.81640625,
          "content": "#include \"xdo_cmd.h\"\n\nint cmd_get_desktop(context_t *context) {\n  int ret = 0;\n  char *cmd = context->argv[0];\n  long desktop = 0;\n\n  int c;\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, 'h' },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \"Usage: %s\\n\";\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  ret = xdo_get_current_desktop(context->xdo, &desktop);\n  xdotool_output(context, \"%ld\", desktop);\n\n  return ret;\n}\n"
        },
        {
          "name": "cmd_get_desktop_for_window.c",
          "type": "blob",
          "size": 1.09375,
          "content": "#include \"xdo_cmd.h\"\n\nint cmd_get_desktop_for_window(context_t *context) {\n  int ret = 0;\n  char *cmd = context->argv[0];\n  long desktop = 0;\n\n  int c;\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, 'h' },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \n    \"Usage: %s [window=%1]\\n\"\n    HELP_SEE_WINDOW_STACK;\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  const char *window_arg = \"%1\";\n  if (!window_get_arg(context, 0, 0, &window_arg)) {\n    fprintf(stderr, usage, cmd);\n    return EXIT_FAILURE;\n  }\n\n  window_each(context, window_arg, {\n    ret = xdo_get_desktop_for_window(context->xdo, window, &desktop);\n    xdotool_output(context, \"%ld\", desktop);\n  }); /* window_each(...) */\n  return ret;\n}\n\n"
        },
        {
          "name": "cmd_get_desktop_viewport.c",
          "type": "blob",
          "size": 1.05078125,
          "content": "#include \"xdo_cmd.h\"\n\nint cmd_get_desktop_viewport(context_t *context) {\n  int ret = 0;\n  char *cmd = context->argv[0];\n  int shell_output = 0;\n\n  int c;\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, 'h' },\n    { \"shell\", no_argument, NULL, 's' },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \"Usage: %s\\n\";\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      case 's':\n        shell_output = 1;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  int x, y;\n  consume_args(context, optind);\n  ret = xdo_get_desktop_viewport(context->xdo, &x, &y);\n\n  if (shell_output) {\n    xdotool_output(context, \"X=%d\", x);\n    xdotool_output(context, \"Y=%d\", y);\n  } else {\n    xdotool_output(context, \"%d %d\", x, y);\n  }\n\n  return ret;\n}\n"
        },
        {
          "name": "cmd_get_display_geometry.c",
          "type": "blob",
          "size": 1.4072265625,
          "content": "#include \"xdo_cmd.h\"\n\nint cmd_get_display_geometry(context_t *context) {\n  int ret = 0;\n  char *cmd = context->argv[0];\n\n  int c;\n  int screen = DefaultScreen(context->xdo->xdpy);\n  int shell_output = False;\n\n  enum { opt_unused, opt_help, opt_screen, opt_shell };\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, opt_help },\n    { \"screen\", required_argument, NULL, opt_screen },\n    { \"shell\", no_argument, NULL, opt_shell },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \"Usage: %s\\n\";\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n      case opt_help:\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      case opt_screen:\n        screen = atoi(optarg);\n        break;\n      case opt_shell:\n        shell_output = True;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  unsigned int width = 0;\n  unsigned int height = 0;\n  ret = xdo_get_viewport_dimensions(context->xdo, &width, &height, screen);\n\n  if (shell_output) {\n    xdotool_output(context, \"WIDTH=%d\", width);\n    xdotool_output(context, \"HEIGHT=%d\", height);\n  } else {\n    xdotool_output(context, \"%d %d\", width, height);\n  }\n\n  return ret;\n}\n"
        },
        {
          "name": "cmd_get_num_desktops.c",
          "type": "blob",
          "size": 0.916015625,
          "content": "#include \"xdo_cmd.h\"\n\nint cmd_get_num_desktops(context_t *context) {\n  int ret = 0;\n  char *cmd = context->argv[0];\n  long ndesktops = 0;\n\n  int c;\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, 'h' },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \"Usage: %s\\n\";\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  //if (context->argc != 0) {\n    //fprintf(stderr, usage, cmd);\n    //return 1;\n  //}\n\n  ret = xdo_get_number_of_desktops(context->xdo, &ndesktops);\n\n  xdotool_output(context, \"%ld\", ndesktops);\n  return ret;\n}\n"
        },
        {
          "name": "cmd_getactivewindow.c",
          "type": "blob",
          "size": 1.0078125,
          "content": "#include \"xdo_cmd.h\"\n\nint cmd_getactivewindow(context_t *context) {\n  Window window = 0;\n  int ret;\n  char *cmd = context->argv[0];\n\n  int c;\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, 'h' },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \"Usage: %s\\n\";\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  ret = xdo_get_active_window(context->xdo, &window);\n\n  if (ret) {\n    fprintf(stderr, \"xdo_get_active_window reported an error\\n\");\n  } else {\n    /* only print if we're the last command */\n    if (context->argc == 0) {\n      window_print(window);\n    }\n    window_save(context, window);\n  }\n\n  return ret;\n}\n\n"
        },
        {
          "name": "cmd_getmouselocation.c",
          "type": "blob",
          "size": 1.8076171875,
          "content": "#include \"xdo_cmd.h\"\n\nint cmd_getmouselocation(context_t *context) {\n  int x, y, screen_num;\n  Window window;\n  int ret;\n  char *cmd = context->argv[0];\n\n  int c;\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, 'h' },\n    { \"shell\", no_argument, NULL, 's' },\n    { \"prefix\", required_argument, NULL, 'p' },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \n    \"Usage: %s [--shell] [--prefix <STR>]\\n\"\n    \"--shell      - output shell variables for use with eval\\n\"\n    \"--prefix STR - use prefix for shell variables names (max 16 chars) \\n\";\n  int option_index;\n  int output_shell = 0;\n  char out_prefix[17] = {'\\0'};\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      case 's':\n        output_shell = 1;\n        break;\n      case 'p':\n        strncpy(out_prefix, optarg, sizeof(out_prefix)-1);\n        out_prefix[ sizeof(out_prefix)-1 ] = '\\0'; //just in case\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  ret = xdo_get_mouse_location2(context->xdo, &x, &y, &screen_num, &window);\n\n  if (output_shell) {\n    xdotool_output(context, \"%sX=%d\", out_prefix, x);\n    xdotool_output(context, \"%sY=%d\", out_prefix, y);\n    xdotool_output(context, \"%sSCREEN=%d\", out_prefix, screen_num);\n    xdotool_output(context, \"%sWINDOW=%d\", out_prefix, window);\n  } else {\n    /* only print if we're the last command */\n    if (context->argc == 0) {\n      xdotool_output(context, \"x:%d y:%d screen:%d window:%ld\", x, y, screen_num, window);\n    }\n    window_save(context, window);\n  }\n  return ret;\n}\n\n"
        },
        {
          "name": "cmd_getwindowclassname.c",
          "type": "blob",
          "size": 1.08984375,
          "content": "#include \"xdo_cmd.h\"\n\nint cmd_getwindowclassname(context_t *context) {\n  char *cmd = context->argv[0];\n\n  int c;\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, 'h' },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \n    \"Usage: %s [window=%1]\\n\"\n    HELP_SEE_WINDOW_STACK;\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  const char *window_arg = \"%1\";\n  if (!window_get_arg(context, 0, 0, &window_arg)) {\n    fprintf(stderr, usage, cmd);\n    return EXIT_FAILURE;\n  }\n\n  unsigned char *name;\n\n  window_each(context, window_arg, {\n    xdo_get_window_classname(context->xdo, window, &name);\n    xdotool_output(context, \"%s\", name);\n    XFree(name);\n  }); /* window_each(...) */\n  return EXIT_SUCCESS;\n}\n\n"
        },
        {
          "name": "cmd_getwindowfocus.c",
          "type": "blob",
          "size": 1.55859375,
          "content": "#include \"xdo_cmd.h\"\n\n/* Added 2007-07-28 - Lee Pumphret */\nint cmd_getwindowfocus(context_t *context) {\n  int ret = 0;\n  int get_toplevel_focus = 1;\n  Window window = 0;\n  char *cmd = context->argv[0];\n\n  int c;\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, 'h' },\n    { NULL, no_argument, NULL, 'f' },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \n    \"Usage: %s [-f]\\n\"\n    \"-f     - Report the window with focus even if we don't think it is a \\n\"\n    \"         top-level window. The default is to find the top-level window\\n\"\n    \"         that has focus.\\n\";\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+fh\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      case 'f':\n        get_toplevel_focus = 0;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  //if (context->argc > 0) {\n    //fprintf(stderr, usage, cmd);\n    //return 1;\n  //}\n\n  if (get_toplevel_focus) {\n    ret = xdo_get_focused_window_sane(context->xdo, &window);\n  } else {\n    ret = xdo_get_focused_window(context->xdo, &window);\n  }\n\n  if (ret) {\n    fprintf(stderr, \"xdo_focus_window reported an error\\n\");\n  } else { \n    /* only print if we're the last command */\n    if (context->argc == 0) {\n      window_print(window);\n    }\n    window_save(context, window);\n  }\n\n  return ret;\n}\n\n"
        },
        {
          "name": "cmd_getwindowgeometry.c",
          "type": "blob",
          "size": 2.57421875,
          "content": "#include \"xdo_cmd.h\"\n\nint cmd_getwindowgeometry(context_t *context) {\n  char *cmd = context->argv[0];\n  int x, y;\n  Screen *screen;\n  unsigned int width, height;\n\n  int shell_output = False;\n  char out_prefix[17] = {'\\0'};\n\n  int c;\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, 'h' },\n    { \"shell\", no_argument, NULL, 's' },\n    { \"prefix\", required_argument, NULL, 'p' },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \n    \"Usage: %s [window=%1] [--shell] [--prefix <STR>]\\n\"\n    \"--shell      - output shell variables for use with eval\\n\"\n    \"--prefix STR - use prefix for shell variables names (max 16 chars) \\n\"\n    HELP_SEE_WINDOW_STACK;\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      case 's':\n        shell_output = True;\n        break;\n      case 'p':\n        strncpy(out_prefix, optarg, sizeof(out_prefix)-1);\n        out_prefix[ sizeof(out_prefix)-1 ] = '\\0'; //just in case\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  const char *window_arg = \"%1\";\n  if (!window_get_arg(context, 0, 0, &window_arg)) {\n    fprintf(stderr, usage, cmd);\n    return EXIT_FAILURE;\n  }\n\n  window_each(context, window_arg, {\n    int ret = 0;\n    ret = xdo_get_window_size(context->xdo, window, &width, &height);\n    if (ret != XDO_SUCCESS) {\n      fprintf(stderr, \"window %ld - failed to get height/width?\\n\", window);\n    }\n\n    ret = xdo_get_window_location(context->xdo, window, &x, &y, &screen);\n    if (ret != XDO_SUCCESS) {\n      fprintf(stderr, \"window %ld - failed to get location?\\n\", window);\n    }\n\n    if (shell_output) {\n      xdotool_output(context, \"%sWINDOW=%ld\", out_prefix, window);\n      xdotool_output(context, \"%sX=%d\", out_prefix, x);\n      xdotool_output(context, \"%sY=%d\", out_prefix, y);\n      xdotool_output(context, \"%sWIDTH=%u\", out_prefix, width);\n      xdotool_output(context, \"%sHEIGHT=%u\", out_prefix, height);\n      xdotool_output(context, \"%sSCREEN=%d\", out_prefix, XScreenNumberOfScreen(screen));\n    } else {\n      xdotool_output(context, \"Window %ld\", window);\n      xdotool_output(context, \"  Position: %d,%d (screen: %d)\", x, y,\n                     XScreenNumberOfScreen(screen));\n      xdotool_output(context, \"  Geometry: %ux%u\", width, height);\n    }\n  }); /* window_each(...) */\n  return EXIT_SUCCESS;\n}\n\n"
        },
        {
          "name": "cmd_getwindowname.c",
          "type": "blob",
          "size": 1.146484375,
          "content": "#include \"xdo_cmd.h\"\n\nint cmd_getwindowname(context_t *context) {\n  char *cmd = context->argv[0];\n\n  int c;\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, 'h' },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \n    \"Usage: %s [window=%1]\\n\"\n    HELP_SEE_WINDOW_STACK;\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  const char *window_arg = \"%1\";\n  if (!window_get_arg(context, 0, 0, &window_arg)) {\n    fprintf(stderr, usage, cmd);\n    return EXIT_FAILURE;\n  }\n\n  unsigned char *name;\n  int name_len;\n  int name_type;\n\n  window_each(context, window_arg, {\n    xdo_get_window_name(context->xdo, window, &name, &name_len, &name_type);\n    xdotool_output(context, \"%.*s\", name_len, name);\n    XFree(name);\n  }); /* window_each(...) */\n  return EXIT_SUCCESS;\n}\n\n"
        },
        {
          "name": "cmd_getwindowpid.c",
          "type": "blob",
          "size": 1.3115234375,
          "content": "#include \"xdo_cmd.h\"\n\nint cmd_getwindowpid(context_t *context) {\n  int pid;\n  char *cmd = context->argv[0];\n\n  int c;\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, 'h' },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \n    \"Usage: %s [window=%1]\\n\"\n    HELP_SEE_WINDOW_STACK;\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  const char *window_arg = \"%1\";\n  if (!window_get_arg(context, 0, 0, &window_arg)) {\n    fprintf(stderr, usage, cmd);\n    return EXIT_FAILURE;\n  }\n\n  window_each(context, window_arg, {\n    pid = xdo_get_pid_window(context->xdo, window);\n    if (pid == 0) {\n      /* TODO(sissel): probably shouldn't exit failure when iterating over\n       * a list of windows. What should we do? */\n      fprintf(stderr, \"window %ld has no pid associated with it.\\n\", window);\n      return EXIT_FAILURE;\n    } else {\n      xdotool_output(context, \"%d\", pid);\n    }\n  }); /* window_each(...) */\n  return EXIT_SUCCESS;\n}\n\n"
        },
        {
          "name": "cmd_key.c",
          "type": "blob",
          "size": 4.64453125,
          "content": "#include \"xdo_cmd.h\"\n#include <string.h> /* for strcmp */\n\n/* This function handles all of these commands:\n * xdotool key\n * xdtoool keyup\n * xdotool keydown\n */\n\nint cmd_key(context_t *context) {\n  int ret = 0;\n  int i, j;\n  int c;\n  char *cmd = *context->argv;\n  charcodemap_t *active_mods = NULL;\n  int active_mods_n;\n  useconds_t key_delay = 12000;\n  useconds_t repeat_delay = 0;\n  int repeat = 1;\n  const char *window_arg = NULL;\n  int free_arg = 0;\n\n  /* Options */\n  int clear_modifiers = 0;\n\n  static struct option longopts[] = {\n    { \"clearmodifiers\", no_argument, NULL, 'c' },\n    { \"delay\", required_argument, NULL, 'd' },\n    { \"repeat-delay\", required_argument, NULL, 'R' },\n    { \"help\", no_argument, NULL, 'h' },\n    { \"window\", required_argument, NULL, 'w' },\n    { \"repeat\", required_argument, NULL, 'r' },\n    { 0, 0, 0, 0 },\n  };\n\n  static const char *usage = \n     \"Usage: %s [options] <keysequence> [keysequence ...]\\n\"\n     \"--clearmodifiers     - clear active keyboard modifiers during keystrokes\\n\"\n     \"--delay DELAY        - Use DELAY milliseconds between keystrokes\\n\"\n     \"--repeat TIMES       - How many times to repeat the key sequence\\n\"\n     \"--repeat-delay DELAY - DELAY milliseconds between repetitions\\n\"\n     \"--window WINDOW      - send keystrokes to a specific window\\n\"\n     \"Each keysequence can be any number of modifiers and keys, separated by plus (+)\\n\"\n     \"  For example: alt+r\\n\"\n     \"\\n\"\n     \"Any letter or key symbol such as Shift_L, Return, Dollar, a, space are valid,\\n\"\n     \"including those not currently available on your keyboard.\\n\"\n     \"\\n\"\n     \"If no window is given, and there are windows in the stack, %1 is used. Otherwise\\n\"\n     \"the currently-focused window is used\\n\";\n\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+d:hcw:\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'w':\n        window_arg = strdup(optarg);\n        free_arg = 1;\n        break;\n      case 'c':\n        clear_modifiers = 1;\n        break;\n      case 'h':\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      case 'd':\n        /* Argument is in milliseconds, keysequence delay is in microseconds. */\n        key_delay = strtoul(optarg, NULL, 0) * 1000;\n        break;\n      case 'r':\n        repeat = atoi(optarg);\n        if (repeat < 1) {\n          fprintf(stderr, \"Invalid '--repeat' value given: %s\\n\", optarg);\n          return EXIT_FAILURE;\n        }\n        break;\n      case 'R': // --repeat-delay\n        /* Argument is in milliseconds, keysequence delay is in microseconds. */\n        repeat_delay = strtoul(optarg, NULL, 0) * 1000;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  if (context->argc == 0) {\n    fprintf(stderr, \"You specified the wrong number of args.\\n\");\n    fprintf(stderr, usage, cmd);\n    return 1;\n  }\n\n  /* use %1 if there is a window stack */\n  if (window_arg == NULL && context->nwindows > 0) {\n    window_arg = \"%1\";\n  }\n\n  int (*keyfunc)(const xdo_t *, Window, const char *, useconds_t) = NULL;\n\n  if (!strcmp(cmd, \"key\")) {\n    keyfunc = xdo_send_keysequence_window;\n  } else if (!strcmp(cmd, \"keyup\")) {\n    keyfunc = xdo_send_keysequence_window_up;\n  } else if (!strcmp(cmd, \"keydown\")) {\n    keyfunc = xdo_send_keysequence_window_down;\n  } else {\n    fprintf(stderr, \"Unknown command '%s'\\n\", cmd);\n    return 1;\n  }\n\n  int max_arg = context->argc;\n  window_each(context, window_arg, {\n    if (clear_modifiers) {\n      xdo_get_active_modifiers(context->xdo, &active_mods, &active_mods_n);\n      xdo_clear_active_modifiers(context->xdo, window, active_mods, active_mods_n);\n    }\n\n    for (j = 0; j < repeat; j++) {\n      for (i = 0; i < context->argc; i++) {\n        if (is_command(context->argv[i])) {\n          max_arg = i;\n          break;\n        }\n        int tmp = keyfunc(context->xdo, window, context->argv[i], key_delay);\n        if (tmp != 0) {\n          fprintf(stderr,\n                  \"xdo_send_keysequence_window reported an error for string '%s'\\n\",\n                  context->argv[i]);\n        }\n        ret += tmp;\n      } /* each keysequence */\n\n      /* Sleep if --repeat-delay given and not on the last repetition */\n      if (repeat_delay > 0 && j < (repeat-1))  {\n        usleep(repeat_delay);\n      }\n    } /* repeat */\n\n    if (clear_modifiers) {\n      xdo_set_active_modifiers(context->xdo, window, active_mods, active_mods_n);\n      free(active_mods);\n    }\n  }); /* window_each(...) */\n\n  if (free_arg) {\n    free((char *)window_arg);\n  }\n\n  consume_args(context, max_arg);\n\n  return ret;\n}\n\n"
        },
        {
          "name": "cmd_mousedown.c",
          "type": "blob",
          "size": 2.07421875,
          "content": "#include \"xdo_cmd.h\"\n#include <string.h>\n\nint cmd_mousedown(context_t *context) {\n  int ret = 0;\n  int button;\n  char *cmd = *context->argv;\n  charcodemap_t *active_mods = NULL;\n  int active_mods_n;\n  int clear_modifiers = 0;\n  char *window_arg = NULL;\n\n  int c;\n  static struct option longopts[] = {\n    { \"clearmodifiers\", no_argument, NULL, 'c' },\n    { \"help\", no_argument, NULL, 'h' },\n    { \"window\", required_argument, NULL, 'w' },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage =\n            \"Usage: %s [--clearmodifiers] [--window WINDOW] <button>\\n\"\n            \"--window <windowid>    - specify a window to send keys to\\n\"\n            \"--clearmodifiers       - reset active modifiers (alt, etc) while typing\\n\";\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+chw:\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'c':\n        clear_modifiers = 1;\n        break;\n      case 'h':\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      case 'w':\n        window_arg = strdup(optarg);\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  if (context->argc < 1) {\n    fprintf(stderr, usage, cmd);\n    fprintf(stderr, \"What button do you want me to send?\\n\");\n    return EXIT_FAILURE;\n  }\n\n  button = atoi(context->argv[0]);\n\n  window_each(context, window_arg, {\n    if (clear_modifiers) {\n      xdo_get_active_modifiers(context->xdo, &active_mods, &active_mods_n);\n      xdo_clear_active_modifiers(context->xdo, window, active_mods, active_mods_n);\n    }\n\n    ret = xdo_mouse_down(context->xdo, window, button);\n\n    if (clear_modifiers) {\n      xdo_set_active_modifiers(context->xdo, window, active_mods, active_mods_n);\n      free(active_mods);\n    }\n\n    if (ret) {\n      fprintf(stderr, \"xdo_mouse_down reported an error on window %ld\\n\", window);\n      return ret;\n    }\n  }); /* window_each(...) */\n\n  consume_args(context, 1);\n  free(window_arg);\n\n  return ret;\n}\n"
        },
        {
          "name": "cmd_mousemove.c",
          "type": "blob",
          "size": 7.185546875,
          "content": "#include \"xdo_cmd.h\"\n#include <math.h>\n#include <string.h>\n\nstruct mousemove {\n  Window window;\n  int clear_modifiers;\n  int opsync;\n  int polar_coordinates;\n  int x;\n  int y;\n  int screen;\n  useconds_t delay;\n  int step;\n};\n\nstatic int _mousemove(context_t *context, struct mousemove *mousemove);\n\nint cmd_mousemove(context_t *context) {\n  int ret = 0;\n  char *cmd = *context->argv;\n  char *window_arg = NULL;\n\n  struct mousemove mousemove;\n  mousemove.clear_modifiers = 0;\n  mousemove.polar_coordinates = 0;\n  mousemove.opsync = 0;\n  mousemove.screen = DefaultScreen(context->xdo->xdpy);\n  mousemove.x = 0;\n  mousemove.y = 0;\n  mousemove.step = 0;\n\n  int c;\n  enum {\n    opt_unused, opt_help, opt_sync, opt_clearmodifiers, opt_polar,\n    opt_screen, opt_step, opt_delay, opt_window\n  };\n  static struct option longopts[] = {\n    { \"clearmodifiers\", no_argument, NULL, opt_clearmodifiers },\n    { \"help\", no_argument, NULL, opt_help},\n    { \"polar\", no_argument, NULL, opt_polar },\n    { \"screen\", required_argument, NULL, opt_screen },\n    //{ \"step\", required_argument, NULL, opt_step },\n    { \"sync\", no_argument, NULL, opt_sync },\n    //{ \"delay\", required_argument, NULL, opt_delay },\n    { \"window\", required_argument, NULL, opt_window },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \n      \"Usage: %s [options] <x> <y>\\n\"\n      \"-c, --clearmodifiers      - reset active modifiers (alt, etc) while typing\\n\"\n      //\"-d, --delay <MS>          - sleeptime in milliseconds between steps.\\n\"\n      //\"--step <STEP>             - pixels to move each time along path to x,y.\\n\" \"-p, --polar               - Use polar coordinates. X as an angle, Y as distance\\n\"\n      \"--screen SCREEN           - which screen to move on, default is current screen\\n\"\n      \"--sync                    - only exit once the mouse has moved\\n\"\n      \"-w, --window <windowid>   - specify a window to move relative to.\\n\";\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+chw:pd:\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'c':\n      case opt_clearmodifiers:\n        mousemove.clear_modifiers = 1;\n        break;\n      case 'h':\n      case opt_help:\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      case opt_screen:\n        mousemove.screen = atoi(optarg);\n        break;\n      case 'w':\n      case opt_window:\n        window_arg = strdup(optarg);\n        break;\n      case 'p':\n      case opt_polar:\n        mousemove.polar_coordinates = 1;\n        break;\n      case opt_step:\n        mousemove.step = atoi(optarg);\n        break;\n      case 'd':\n      case opt_delay:\n        mousemove.delay = strtoul(optarg, NULL, 0) * 1000;\n        break;\n      case opt_sync:\n        mousemove.opsync = 1;\n        break;\n      default:\n        printf(\"unknown opt: %d\\n\", c);\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  if (context->argc < 1 \\\n      || (strcmp(context->argv[0], \"restore\") && context->argc < 2)) {\n    fprintf(stderr, usage, cmd);\n    fprintf(stderr, \"You specified the wrong number of args (expected 2 coordinates or 'restore').\\n\");\n    return 1;\n  }\n\n  if (!strcmp(context->argv[0], \"restore\")) {\n    if (!context->have_last_mouse) {\n      fprintf(stderr, \"Have no previous mouse position. Cannot restore.\\n\");\n      return EXIT_FAILURE;\n    }\n    \n    mousemove.x = context->last_mouse_x;\n    mousemove.y = context->last_mouse_y;\n    mousemove.screen = context->last_mouse_screen;\n    consume_args(context, 1);\n  } else {\n    mousemove.x = atoi(context->argv[0]);\n    mousemove.y = atoi(context->argv[1]);\n    consume_args(context, 2);\n  }\n\n\n  window_each(context, window_arg, {\n    mousemove.window = window;\n    ret = _mousemove(context, &mousemove);\n    if (ret != XDO_SUCCESS) {\n      return ret;\n    }\n  }); /* window_each(...) */\n\n  free(window_arg);\n\n  return ret;\n}\n\nstatic int _mousemove(context_t *context, struct mousemove *mousemove) {\n  int ret;\n  charcodemap_t *active_mods = NULL;\n  int active_mods_n;\n\n  int x = mousemove->x;\n  int y = mousemove->y;\n  int screen = mousemove->screen;\n  Window window = mousemove->window;\n\n  /* Save the mouse position if the window is CURRENTWINDOW */\n  if (window == CURRENTWINDOW) {\n    context->have_last_mouse = True;\n    xdo_get_mouse_location(context->xdo, &(context->last_mouse_x),\n                      &(context->last_mouse_y), &(context->last_mouse_screen));\n  }\n  \n  if (mousemove->polar_coordinates) {\n    /* x becomes angle (degrees), y becomes distance.\n     * XXX: Origin should be center (of window or screen)\n     */\n    int origin_x, origin_y;\n    if (mousemove->window != CURRENTWINDOW) {\n      int win_x, win_y;\n      unsigned int win_w, win_h;\n      xdo_get_window_location(context->xdo, window, &win_x, &win_y, NULL);\n      xdo_get_window_size(context->xdo, window, &win_w, &win_h);\n      origin_x = win_x + (win_w / 2);\n      origin_y = win_y + (win_h / 2);\n    } else { /* no window selected, move relative to screen */\n      Screen *s = ScreenOfDisplay(context->xdo->xdpy, screen);\n      origin_x = s->width / 2;\n      origin_y = s->height / 2;\n    }\n\n    /* The original request for polar support was that '0' degrees is up\n     * and that rotation was clockwise, so 0 is up, 90 right, 180 down, 270\n     * left. This conversion can be done with (360 - degrees) + 90 */\n    //double radians = (x * M_PI / 180);\n    double radians = ((360 - x) + 90) * M_PI / 180;\n    double distance = y;\n    x = origin_x + (cos(radians) * distance);\n\n    /* Negative sin, since screen Y coordinates are descending, where cartesian\n     * is ascending */\n    y = origin_y + (-sin(radians) * distance);\n  }\n\n  int mx, my, mscreen;\n  xdo_get_mouse_location(context->xdo, &mx, &my, &mscreen);\n\n\n  if (mousemove->clear_modifiers) {\n    xdo_get_active_modifiers(context->xdo, &active_mods, &active_mods_n);\n    xdo_clear_active_modifiers(context->xdo, window, active_mods, active_mods_n);\n  }\n\n  if (mousemove->step == 0) {\n    if (window != CURRENTWINDOW && !mousemove->polar_coordinates) {\n      ret = xdo_move_mouse_relative_to_window(context->xdo, window, x, y);\n    } else {\n      ret = xdo_move_mouse(context->xdo, x, y, screen);\n    }\n  } else {\n    if (mx == x && my == y && mscreen == screen) {\n      /* Nothing to move. Quit now. */\n      return 0;\n    }\n    \n    fprintf(stderr, \"--step support not yet implemented\\n\");\n\n    if (window > 0) {\n      ret = xdo_move_mouse_relative_to_window(context->xdo, window, x, y);\n    } else {\n      ret = xdo_move_mouse(context->xdo, x, y, screen);\n    }\n  }\n\n  if (ret) {\n    fprintf(stderr, \"xdo_move_mouse reported an error\\n\");\n  } else {\n    if (mousemove->opsync) {\n      if (mx == x && my == y && mscreen == screen) {\n        /* Requested location is the same as the original mouse location, \n         * so there's nothing to wait for */\n\n        // Blank, do nothing.\n      }  else {\n        /* Wait until the mouse moves away from its current position */\n        xdo_wait_for_mouse_move_from(context->xdo, mx, my);\n      }\n    }\n  }\n\n  if (mousemove->clear_modifiers) {\n    xdo_set_active_modifiers(context->xdo, window, active_mods, active_mods_n);\n    free(active_mods);\n  }\n\n  return 0;\n} /* int mousemove ... */\n"
        },
        {
          "name": "cmd_mousemove_relative.c",
          "type": "blob",
          "size": 3.5869140625,
          "content": "#include \"xdo_cmd.h\"\n#include <math.h>\n\nint cmd_mousemove_relative(context_t *context) {\n  int x, y;\n  int ret = 0;\n  char *cmd = *context->argv;\n  int polar_coordinates = 0;\n  int clear_modifiers = 0;\n  int opsync = 0;\n  int origin_x = -1, origin_y = -1;\n\n  charcodemap_t *active_mods = NULL;\n  int active_mods_n;\n  int c;\n  enum {\n    opt_unused, opt_help, opt_sync, opt_clearmodifiers, opt_polar\n  };\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, opt_help },\n    { \"sync\", no_argument, NULL, opt_sync },\n    { \"polar\", no_argument, NULL, opt_polar },\n    { \"clearmodifiers\", no_argument, NULL, opt_clearmodifiers },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage =\n      \"Usage: %s [options] <x> <y>\\n\"\n      \"-c, --clearmodifiers      - reset active modifiers (alt, etc) while typing\\n\"\n      \"-p, --polar               - Use polar coordinates. X as an angle, Y as distance\\n\"\n      \"--sync                    - only exit once the mouse has moved\\n\"\n      \"\\n\"\n      \"Using polar coordinate mode makes 'x' the angle (in degrees) and\\n\"\n      \"'y' the distance.\\n\"\n      \"\\n\"\n      \"If you want to use negative numbers for a coordinate, you'll need to\\n\"\n      \"invoke it this way (with the '--'):\\n\"\n      \"   %s -- -20 -15\\n\"\n      \"otherwise, normal usage looks like this:\\n\"\n      \"   %s 100 140\\n\";\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+cph\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n      case opt_help:\n        printf(usage, cmd, cmd, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      case 'p':\n      case opt_polar:\n        polar_coordinates = 1;\n        break;\n      case opt_sync:\n        opsync = 1;\n        break;\n      case 'c':\n      case opt_clearmodifiers:\n        clear_modifiers = 1;\n        break;\n      default:\n        fprintf(stderr, usage, cmd, cmd, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  if (context->argc < 2) {\n    fprintf(stderr, usage, cmd, cmd, cmd);\n    fprintf(stderr, \"You specified the wrong number of args (expected 2).\\n\");\n    return EXIT_FAILURE;\n  }\n\n  x = atoi(context->argv[0]);\n  y = atoi(context->argv[1]);\n  consume_args(context, 2);\n\n  /* Quit early if we don't have to move. */\n  if (x == 0 && y == 0) {\n    return EXIT_SUCCESS;\n  }\n\n  if (polar_coordinates) {\n    /* The original request for polar support was that '0' degrees is up\n     * and that rotation was clockwise, so 0 is up, 90 right, 180 down, 270\n     * left. This conversion can be done with (360 - degrees) + 90 */\n    double radians = ((360 - x) + 90) * (M_PI / 180);\n    double distance = y;\n    x = (cos(radians) * distance);\n\n    /* Negative sin, since screen Y coordinates are descending, where cartesian\n     * is ascending */\n    y = (-sin(radians) * distance);\n  }\n \n  if (clear_modifiers) {\n    xdo_get_active_modifiers(context->xdo, &active_mods, &active_mods_n);\n    xdo_clear_active_modifiers(context->xdo, CURRENTWINDOW, active_mods, active_mods_n);\n  }\n\n  if (opsync) {\n    xdo_get_mouse_location(context->xdo, &origin_x, &origin_y, NULL);\n  }\n\n  ret = xdo_move_mouse_relative(context->xdo, x, y);\n\n  if (ret) {\n    fprintf(stderr, \"xdo_move_mouse_relative reported an error\\n\");\n  } else {\n    if (opsync) {\n      /* Wait until the mouse moves away from its current position */\n      xdo_wait_for_mouse_move_from(context->xdo, origin_x, origin_y);\n    }\n  }\n\n  if (clear_modifiers) {\n    xdo_set_active_modifiers(context->xdo, CURRENTWINDOW, active_mods, active_mods_n);\n    free(active_mods);\n  }\n\n  return ret;\n}\n\n"
        },
        {
          "name": "cmd_mouseup.c",
          "type": "blob",
          "size": 2.0615234375,
          "content": "#include \"xdo_cmd.h\"\n#include <string.h>\n\nint cmd_mouseup(context_t *context) {\n  int ret = 0;\n  int button;\n  char *cmd = *context->argv;\n  char *window_arg = NULL;\n  charcodemap_t *active_mods = NULL;\n  int active_mods_n;\n  int clear_modifiers = 0;\n\n  int c;\n  static struct option longopts[] = {\n    { \"clearmodifiers\", no_argument, NULL, 'c' },\n    { \"help\", no_argument, NULL, 'h' },\n    { \"window\", required_argument, NULL, 'w' },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage =\n            \"Usage: %s [--clearmodifiers] [--window WINDOW] <button>\\n\"\n            \"--window <windowid>    - specify a window to send keys to\\n\"\n            \"--clearmodifiers       - reset active modifiers (alt, etc) while typing\\n\";\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+cw:h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      case 'c':\n        clear_modifiers = 1;\n        break;\n      case 'w':\n        window_arg = strdup(optarg);\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  if (context->argc < 1) {\n    fprintf(stderr, usage, cmd);\n    fprintf(stderr, \"You specified the wrong number of args.\\n\");\n    return 1;\n  }\n\n  button = atoi(context->argv[0]);\n\n  window_each(context, window_arg, {\n    if (clear_modifiers) {\n      xdo_get_active_modifiers(context->xdo, &active_mods, &active_mods_n);\n      xdo_clear_active_modifiers(context->xdo, window, active_mods, active_mods_n);\n    }\n\n    ret = xdo_mouse_up(context->xdo, window, button);\n\n    if (clear_modifiers) {\n      xdo_set_active_modifiers(context->xdo, window, active_mods, active_mods_n);\n      free(active_mods);\n    }\n\n    if (ret) {\n      fprintf(stderr, \"xdo_mouse_up reported an error on window %ld\\n\", window);\n      return ret;\n    }\n  }); /* window_each(...) */\n\n  free(window_arg);\n  consume_args(context, 1);\n  return ret;\n}\n\n"
        },
        {
          "name": "cmd_search.c",
          "type": "blob",
          "size": 7.1845703125,
          "content": "#include \"xdo_cmd.h\"\n#include <string.h>\n\nint cmd_search(context_t *context) {\n  Window *list = NULL;\n  xdo_search_t search;\n  unsigned int nwindows;\n  unsigned int i;\n  int c;\n  int op_sync = False;\n\n  int search_title = 0;\n  int search_name = 0;\n  int out_shell = 0;\n  char out_prefix[17] = {'\\0'};\n  int search_class = 0;\n  int search_classname = 0;\n  int search_role = 0;\n  enum {\n    opt_unused, opt_title, opt_onlyvisible, opt_name, opt_shell, opt_prefix, opt_class, opt_maxdepth,\n    opt_pid, opt_help, opt_any, opt_all, opt_screen, opt_classname, opt_desktop,\n    opt_limit, opt_sync, opt_role\n  };\n  struct option longopts[] = {\n    { \"all\", no_argument, NULL, opt_all },\n    { \"any\", no_argument, NULL, opt_any },\n    { \"class\", no_argument, NULL, opt_class },\n    { \"classname\", no_argument, NULL, opt_classname },\n    { \"help\", no_argument, NULL, opt_help },\n    { \"maxdepth\", required_argument, NULL, opt_maxdepth },\n    { \"name\", no_argument, NULL, opt_name },\n    { \"shell\", no_argument, NULL, opt_shell },\n    { \"prefix\", required_argument, NULL, opt_prefix },\n    { \"onlyvisible\", 0, NULL, opt_onlyvisible },\n    { \"pid\", required_argument, NULL, opt_pid },\n    { \"screen\", required_argument, NULL, opt_screen },\n    { \"title\", no_argument, NULL, opt_title },\n    { \"desktop\", required_argument, NULL, opt_desktop },\n    { \"limit\", required_argument, NULL, opt_limit },\n    { \"sync\", no_argument, NULL, opt_sync },\n    { \"role\", no_argument, NULL, opt_role },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage =\n      \"Usage: xdotool %s \"\n      \"[options] regexp_pattern\\n\"\n      \"--class         check regexp_pattern against the window class\\n\"\n      \"--classname     check regexp_pattern against the window classname\\n\"\n      \"--role          check regexp_pattern against the window role\\n\"\n      \"--maxdepth N    set search depth to N. Default is infinite.\\n\"\n      \"                -1 also means infinite.\\n\"\n      \"--onlyvisible   matches only windows currently visible\\n\"\n      \"--pid PID       only show windows belonging to specific process\\n\"\n      \"                Not supported by all X11 applications\\n\"\n      \"--screen N      only search a specific screen. Default is all screens\\n\"\n      \"--desktop N     only search a specific desktop number\\n\"\n      \"--limit N       break search after N results\\n\"\n      \"--name          check regexp_pattern against the window name\\n\"\n      \"--shell         print results as shell array WINDOWS=( ... )\\n\"\n      \"--prefix STR    use prefix (max 16 chars) for array name STRWINDOWS\\n\"\n      \"--title         DEPRECATED. Same as --name.\\n\"\n      \"--all           Require all conditions match a window. Default is --any\\n\"\n      \"--any           Windows matching any condition will be reported\\n\"\n      \"--sync          Wait until a search result is found.\\n\"\n      \"-h, --help      show this help output\\n\"\n      \"\\n\"\n      \"If none of --name, --classname, --class, or --role are specified, the \\n\"\n      \"defaults are: --name --classname --class --role\\n\";\n\n  memset(&search, 0, sizeof(xdo_search_t));\n  search.max_depth = -1;\n  search.require = SEARCH_ANY;\n\n  char *cmd = *context->argv;\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 0:\n        break;\n      case 'h':\n      case opt_help:\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n      case opt_maxdepth:\n        search.max_depth = strtol(optarg, NULL, 0);\n        break;\n      case opt_pid:\n        search.pid = atoi(optarg);\n        search.searchmask |= SEARCH_PID;\n        break;\n      case opt_any:\n        search.require = SEARCH_ANY;\n        break;\n      case opt_all:\n        search.require = SEARCH_ALL;\n        break;\n      case opt_screen:\n        search.screen = strtoul(optarg, NULL, 0);\n        search.searchmask |= SEARCH_SCREEN;\n        break;\n      case opt_onlyvisible:\n        search.only_visible = True;\n        search.searchmask |= SEARCH_ONLYVISIBLE;\n        break;\n      case opt_class:\n        search_class = True;\n        break;\n      case opt_classname:\n        search_classname = True;\n        break;\n      case opt_role:\n        search_role = True;\n        break;\n      case opt_title:\n        fprintf(stderr, \"This flag is deprecated. Assuming you mean --name (the\"\n                \" window name).\\n\");\n        /* fall through */\n      case opt_name:\n        search_name = True;\n        break;\n      case opt_shell:\n        out_shell = True;\n        break;\n      case opt_prefix:\n        strncpy(out_prefix, optarg, sizeof(out_prefix)-1);\n        out_prefix[ sizeof(out_prefix)-1 ] = '\\0'; //just in case\n        break;\n      case opt_desktop:\n        search.desktop = strtol(optarg, NULL, 0);\n        search.searchmask |= SEARCH_DESKTOP;\n        break;\n      case opt_limit:\n        search.limit = atoi(optarg);\n        break;\n      case opt_sync:\n        op_sync = True;\n        break;\n      default:\n        fprintf(stderr, \"Invalid usage\\n\");\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  /* We require a pattern or a pid to search for */\n  if (context->argc < 1 && search.pid == 0) {\n    fprintf(stderr, usage, cmd);\n    return EXIT_FAILURE;\n  }\n\n  if (context->argc > 0) {\n    if (!search_title && !search_name && !search_class && !search_classname\n        && !search_role) {\n      fprintf(stderr,\n        \"Defaulting to search window name, class, classname, and role\\n\");\n      search.searchmask |= (SEARCH_NAME | SEARCH_CLASS | SEARCH_CLASSNAME\n        | SEARCH_ROLE);\n      search_name = 1;\n      search_class = 1;\n      search_classname = 1;\n      search_role = 1;\n    }\n\n    if (search_title) {\n      search.searchmask |= SEARCH_NAME;\n      search.winname = context->argv[0];\n    }\n    if (search_name) {\n      search.searchmask |= SEARCH_NAME;\n      search.winname = context->argv[0];\n    }\n    if (search_class) {\n      search.searchmask |= SEARCH_CLASS;\n      search.winclass = context->argv[0];\n    }\n    if (search_classname) {\n      search.searchmask |= SEARCH_CLASSNAME;\n      search.winclassname = context->argv[0];\n    }\n    if (search_role) {\n      search.searchmask |= SEARCH_ROLE;\n      search.winrole = context->argv[0];\n    }\n    consume_args(context, 1);\n  }\n\n  do {\n    free(list);\n\n    xdo_search_windows(context->xdo, &search, &list, &nwindows);\n\n    if ( (context->argc == 0) || out_shell ) {\n      /* only print if we're the last command or printing to shell*/\n      if (out_shell) printf(\"%s%s\", out_prefix, \"WINDOWS=(\");\n      for (i = 0; i < nwindows; i++) {\n        window_print(list[i]);\n      }\n      if (out_shell) printf(\"%s\",\")\\n\");\n    }\n\n    if (op_sync && nwindows == 0) {\n      xdotool_debug(context, \"No search results, still waiting...\");\n\n      /* TODO(sissel): Make this tunable */\n      usleep(500000);\n    }\n  } while (op_sync && nwindows == 0);\n\n  /* Free old list as it's malloc'd by xdo_search_windows */\n  free(context->windows);\n  context->windows = list;\n  context->nwindows = nwindows;\n\n  /* error if number of windows found is zero (behave like grep) \n  but return success when being used inside eval (--shell option)*/\n  return (nwindows || out_shell ? EXIT_SUCCESS : EXIT_FAILURE);\n}\n"
        },
        {
          "name": "cmd_set_desktop.c",
          "type": "blob",
          "size": 1.546875,
          "content": "#include \"xdo_cmd.h\"\n\nint cmd_set_desktop(context_t *context) {\n  char *cmd = *context->argv;\n  long desktop;\n  int relative = False;\n\n  int c;\n  enum { opt_unused, opt_help, opt_relative };\n\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, opt_help },\n    { \"relative\", no_argument, NULL, opt_relative },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \n    \"Usage: %s desktop\\n\"\n    \"--relative    - Move relative to the current desktop. Negative values OK\\n\";\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n      case opt_help:\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      case opt_relative:\n        relative = True;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  if (context->argc < 1) {\n    fprintf(stderr, usage, cmd);\n    return 1;\n  }\n\n  desktop = strtol(context->argv[0], NULL, 0);\n\n  consume_args(context, 1);\n\n  if (relative == True) {\n    long cur_desktop = 0, ndesktops = 0;\n    xdo_get_current_desktop(context->xdo, &cur_desktop);\n    xdo_get_number_of_desktops(context->xdo, &ndesktops);\n\n    desktop = (desktop + cur_desktop) % ndesktops;\n\n    /* negative mod doesn't result in a positive number. Fix that. */\n    if (desktop < 0) \n      desktop += ndesktops;\n  }\n\n  return xdo_set_current_desktop(context->xdo, desktop);\n}\n\n"
        },
        {
          "name": "cmd_set_desktop_for_window.c",
          "type": "blob",
          "size": 1.3271484375,
          "content": "#include \"xdo_cmd.h\"\n\nint cmd_set_desktop_for_window(context_t *context) {\n  char *cmd = *context->argv;\n  long desktop = 0;\n  int ret = EXIT_SUCCESS;\n  const char *window_arg = \"%1\";\n\n  int c;\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, 'h' },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \n    \"Usage: %s [window=%1] <desktop>\\n\"\n    HELP_SEE_WINDOW_STACK;\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  if (!window_get_arg(context, 1, 0, &window_arg)) {\n    fprintf(stderr, usage, cmd);\n    return EXIT_FAILURE;\n  }\n\n  desktop = strtol(context->argv[0], NULL, 0);\n  consume_args(context, 1);\n\n  window_each(context, window_arg, {\n    ret = xdo_set_desktop_for_window(context->xdo, window, desktop);\n    if (ret != XDO_SUCCESS) {\n      fprintf(stderr, \n              \"xdo_set_desktop_for_window on window %ld, desktop %ld failed\\n\", \n              window, desktop);\n      return ret;\n    }\n  }); /* window_each(...) */\n\n  return ret;\n}\n"
        },
        {
          "name": "cmd_set_desktop_viewport.c",
          "type": "blob",
          "size": 1.0029296875,
          "content": "#include \"xdo_cmd.h\"\n\nint cmd_set_desktop_viewport(context_t *context) {\n  int ret = 0;\n  char *cmd = context->argv[0];\n\n  int c;\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, 'h' },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \"Usage: %s x y\\n\";\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n  int x, y;\n\n  if (context->argc < 2) {\n    fprintf(stderr, \"Not enough arguments given.\\n\");\n    fprintf(stderr, usage, cmd);\n    return EXIT_FAILURE;\n  }\n\n  x = atoi(context->argv[0]);\n  y = atoi(context->argv[1]);\n  consume_args(context, 2);\n\n  ret = xdo_set_desktop_viewport(context->xdo, x, y);\n  return ret;\n}\n"
        },
        {
          "name": "cmd_set_num_desktops.c",
          "type": "blob",
          "size": 0.91796875,
          "content": "#include \"xdo_cmd.h\"\n\nint cmd_set_num_desktops(context_t *context) {\n  char *cmd = *context->argv;\n  long ndesktops;\n\n  int c;\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, 'h' },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \"Usage: %s num_desktops\\n\";\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  if (context->argc < 1) {\n    fprintf(stderr, usage, cmd);\n    return 1;\n  }\n\n  ndesktops = strtol(context->argv[0], NULL, 0);\n\n  consume_args(context, 1);\n  return xdo_set_number_of_desktops(context->xdo, ndesktops);\n}\n\n"
        },
        {
          "name": "cmd_set_window.c",
          "type": "blob",
          "size": 3.1669921875,
          "content": "#define _GNU_SOURCE 1\n#ifndef __USE_BSD\n#define __USE_BSD /* for strdup on linux/glibc */\n#endif /* __USE_BSD */\n#include <string.h>\n\n\n#include \"xdo_cmd.h\"\n\nint cmd_set_window(context_t *context) {\n  char *cmd = *context->argv;\n  int c;\n  char *role = NULL, *icon = NULL, *name = NULL, *_class = NULL,\n       *classname = NULL;\n  int override_redirect = -1;\n  int urgency = -1;\n  const char *window_arg = \"%1\";\n\n  struct option longopts[] = {\n    { \"name\", required_argument, NULL, 'n' },\n    { \"icon-name\", required_argument, NULL, 'i' },\n    { \"role\", required_argument, NULL, 'r' },\n    { \"class\", required_argument, NULL, 'C' },\n    { \"classname\", required_argument, NULL, 'N' },\n    { \"overrideredirect\", required_argument, NULL, 'O' },\n    { \"urgency\", required_argument, NULL, 'u' },\n    { \"help\", no_argument, NULL, 'h' },\n    { 0, 0, 0, 0 },\n  };\n  int option_index;\n  static const char *usage = \n      \"Usage: %s [options] [window=%1]\\n\"\n      \"--name NAME  - set the window name (aka title)\\n\"\n      \"--icon-name NAME - set the window name while minimized/iconified\\n\"\n      \"--role ROLE - set the window's role string\\n\"\n      \"--class CLASS - set the window's class\\n\"\n      \"--classname CLASSNAME - set the window's classname\\n\"\n      \"--overrideredirect OVERRIDE - set override_redirect.\\n\"\n      \"  1 means the window manager will not manage this window.\\n\"\n      \"--urgency URGENT - set the window's urgency hint.\\n\"\n      \"  1 sets the urgency flag, 0 removes it.\\n\";\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+hn:i:r:C:N:u:\",\n                               longopts, &option_index)) != -1) {\n    switch(c) {\n      case 'n': \n        name = strdup(optarg); \n        break;\n      case 'i':\n        icon = strdup(optarg);\n        break;\n      case 'r':\n        role = strdup(optarg);\n        break;\n      case 'C':\n        _class = strdup(optarg);\n        break;\n      case 'N':\n        classname = strdup(optarg);\n        break;\n      case 'O':\n        override_redirect = (atoi(optarg) > 0);\n        break;\n      case 'u':\n        urgency = (atoi(optarg) > 0);\n        break;\n      case 'h':\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }    \n  }\n\n  /* adjust context->argc, argv */\n  consume_args(context, optind);\n\n  if (!window_get_arg(context, 0, 0, &window_arg)) {\n    fprintf(stderr, usage, cmd);\n    return EXIT_FAILURE;\n  }\n\n  /* TODO(sissel): error handling needed... */\n  window_each(context, window_arg, {\n    if (name)\n      xdo_set_window_property(context->xdo, window, \"WM_NAME\", name);\n    if (icon)\n      xdo_set_window_property(context->xdo, window, \"WM_ICON_NAME\", icon);\n    if (role)\n      xdo_set_window_property(context->xdo, window, \"WM_WINDOW_ROLE\", role);\n    if (classname || _class)\n      xdo_set_window_class(context->xdo, window, classname, _class);\n    if (override_redirect != -1)\n      xdo_set_window_override_redirect(context->xdo, window,\n                                       override_redirect);\n    if (urgency != -1)\n      xdo_set_window_urgency(context->xdo, window, urgency);\n  }); /* window_each(...) */\n\n  return 0;\n}\n\n"
        },
        {
          "name": "cmd_sleep.c",
          "type": "blob",
          "size": 1.1904296875,
          "content": "#include \"xdo_cmd.h\"\n#include <errno.h>\n#include <string.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n\nint cmd_sleep(context_t *context) {\n  char *cmd = *context->argv;\n  int ret = EXIT_SUCCESS;\n  int c;\n  double duration_usec;\n\n  enum { opt_unused, opt_help };\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, opt_help },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \n    \"Usage: %s seconds\\n\" \\\n    \"Sleep a given number of seconds. Fractions of seconds are valid.\\n\";\n  \n  int option_index;\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n      case opt_help:\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  if (context->argc == 0) {\n    fprintf(stderr, \"No arguments given.\\n\");\n    fprintf(stderr, usage, cmd);\n    return EXIT_FAILURE;\n  }\n\n  duration_usec = atof(context->argv[0]) * (1000000);\n  usleep(duration_usec);\n  consume_args(context, 1);\n  return ret;\n}\n"
        },
        {
          "name": "cmd_type.c",
          "type": "blob",
          "size": 5.943359375,
          "content": "#include \"xdo_cmd.h\"\n#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n\nint cmd_type(context_t *context) {\n  int ret = 0;\n  int i;\n  int c;\n  char *cmd = *context->argv;\n  const char *window_arg = NULL;\n  int arity = -1;\n  char *terminator = NULL;\n  char *file = NULL;\n\n  FILE *input = NULL;\n  char *buffer = NULL;\n  char *marker = NULL;\n  size_t bytes_read = 0;\n\n  char **data = NULL; /* stuff to type */\n  int data_count = 0;\n  int args_count = 0;\n  charcodemap_t *active_mods = NULL;\n  int active_mods_n;\n\n  /* Options */\n  int clear_modifiers = 0;\n  useconds_t delay = 12000; /* 12ms between keystrokes default */\n\n  enum {\n    opt_unused, opt_clearmodifiers, opt_delay, opt_help, opt_window, opt_args,\n    opt_terminator, opt_file\n  };\n\n  struct option longopts[] = {\n    { \"clearmodifiers\", no_argument, NULL, opt_clearmodifiers },\n    { \"delay\", required_argument, NULL, opt_delay },\n    { \"help\", no_argument, NULL, opt_help },\n    { \"window\", required_argument, NULL, opt_window },\n    { \"args\", required_argument, NULL, opt_args },\n    { \"terminator\", required_argument, NULL, opt_terminator },\n    { \"file\", required_argument, NULL, opt_file },\n    { 0, 0, 0, 0 },\n  };\n\n  static const char *usage =\n    \"Usage: %s [--window windowid] [--delay milliseconds] \"\n    \"<things to type>\\n\"\n    \"--window <windowid>    - specify a window to send keys to\\n\"\n    \"--delay <milliseconds> - delay between keystrokes\\n\"\n    \"--clearmodifiers       - reset active modifiers (alt, etc) while typing\\n\"\n    \"--args N  - how many arguments to expect in the exec command. This is\\n\"\n    \"            useful for ending an exec and continuing with more xdotool\\n\"\n    \"            commands\\n\"\n    \"--terminator TERM - similar to --args, specifies a terminator that\\n\"\n    \"                    marks the end of 'exec' arguments. This is useful\\n\"\n    \"                    for continuing with more xdotool commands.\\n\"\n    \"--file <filepath> - specify a file, the contents of which will be\\n\"\n    \"                    be typed as if passed as an argument. The filepath\\n\"\n    \"                    may also be '-' to read from stdin.\\n\"\n            \"-h, --help             - show this help output\\n\"\n    HELP_SEE_WINDOW_STACK;\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+w:d:ch\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case opt_window:\n        window_arg = optarg;\n        break;\n      case opt_delay:\n        /* --delay is in milliseconds, convert to microseconds */\n        delay = strtoul(optarg, NULL, 0) * 1000;\n        break;\n      case opt_clearmodifiers:\n        clear_modifiers = 1;\n        break;\n      case opt_help:\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      case opt_args:\n        arity = atoi(optarg);\n        break;\n      case opt_terminator:\n        terminator = strdup(optarg);\n        break;\n      case opt_file:\n\tfile = strdup(optarg);\n\tbreak;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  if (context->argc == 0 && file == NULL) {\n    fprintf(stderr, \"You specified the wrong number of args.\\n\");\n    fprintf(stderr, usage, cmd);\n    return 1;\n  }\n\n  if (arity > 0 && terminator != NULL) {\n    fprintf(stderr, \"Don't use both --terminator and --args.\\n\");\n    return EXIT_FAILURE;\n  }\n\n  if (context->argc < arity) {\n    fprintf(stderr, \"You said '--args %d' but only gave %d arguments.\\n\",\n            arity, context->argc);\n    return EXIT_FAILURE;\n  }\n\n  if (file != NULL) {\n    data = calloc(1 + context->argc, sizeof(char *));\n\n    /* determine whether reading from a file or from stdin */\n    if (!strcmp(file, \"-\")) {\n      input = fdopen(0, \"r\");\n    } else {\n      input = fopen(file, \"r\");\n      if (input == NULL) {\n        fprintf(stderr, \"Failure opening '%s': %s\\n\", file, strerror(errno));\n        return EXIT_FAILURE;\n      }\n    }\n\n    while (feof(input) == 0) {\n      marker = realloc(buffer, bytes_read + 4096);\n      if (marker == NULL) {\n        fprintf(stderr, \"Failure allocating for '%s': %s\\n\", file, strerror(errno));\n        return EXIT_FAILURE;\n      }\n\n      buffer = marker;\n      marker = buffer + bytes_read;\n      if (fgets(marker, 4096, input) != NULL) {\n        bytes_read = (marker - buffer) + strlen(marker);\n      } else {\n        *marker = 0;\n      }\n\n      if (ferror(input) != 0) {\n        fprintf(stderr, \"Failure reading '%s': %s\\n\", file, strerror(errno));\n        return EXIT_FAILURE;\n      }\n    }\n\n    data[0] = buffer;\n    data_count++;\n\n    fclose(input);\n  }\n  else {\n    data = calloc(context->argc, sizeof(char *));\n  }\n\n  /* Apply any --arity or --terminator */\n  for (i=0; i < context->argc; i++) {\n    if (arity > 0 && i == arity) {\n      data[data_count] = NULL;\n      break;\n    }\n\n    /* if we have a terminator and the current argument matches it... */\n    if (terminator != NULL && strcmp(terminator, context->argv[i]) == 0) {\n      data[data_count] = NULL;\n      args_count++; /* Consume the terminator, too */\n      break;\n    }\n\n    data[data_count] = strdup(context->argv[i]);\n    xdotool_debug(context, \"Exec arg[%d]: %s\", i, data[data_count]);\n    data_count++;\n    args_count++;\n  }\n\n  window_each(context, window_arg, {\n    if (clear_modifiers) {\n      xdo_get_active_modifiers(context->xdo, &active_mods, &active_mods_n);\n      xdo_clear_active_modifiers(context->xdo, window, active_mods, active_mods_n);\n    }\n\n    for (i = 0; i < data_count; i++) {\n      //printf(\"Typing: '%s'\\n\", context->argv[i]);\n      int tmp = xdo_enter_text_window(context->xdo, window, data[i], delay);\n\n      if (tmp) {\n        fprintf(stderr, \"xdo_enter_text_window reported an error\\n\");\n      }\n\n      ret += tmp;\n    }\n\n    if (clear_modifiers) {\n      xdo_set_active_modifiers(context->xdo, window, active_mods, active_mods_n);\n      free(active_mods);\n    }\n  }); /* window_each(...) */\n\n  free(data);\n\n  consume_args(context, args_count);\n  return ret > 0;\n}\n\n"
        },
        {
          "name": "cmd_window_select.c",
          "type": "blob",
          "size": 1.01953125,
          "content": "#include \"xdo_cmd.h\"\n\nint cmd_window_select(context_t *context) {\n  Window window = 0;\n  int ret;\n  char *cmd = context->argv[0];\n\n  int c;\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, 'h' },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \"Usage: %s\\n\";\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  ret = xdo_select_window_with_click(context->xdo, &window);\n\n  if (ret) {\n    fprintf(stderr, \"xdo_select_window_with_click reported an error\\n\");\n  } else {\n    /* only print if we're the last command */\n    if (context->argc == 0) {\n      window_print(window);\n    }\n    window_save(context, window);\n  }\n\n  return ret;\n}\n\n"
        },
        {
          "name": "cmd_windowactivate.c",
          "type": "blob",
          "size": 1.51171875,
          "content": "#include \"xdo_cmd.h\"\n\nint cmd_windowactivate(context_t *context) {\n  int ret = 0;\n  char *cmd = *context->argv;\n  const char *window_arg = \"%1\";\n  int opsync = 0;\n\n  int c;\n  enum { opt_unused, opt_help, opt_sync };\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, opt_help },\n    { \"sync\", no_argument, NULL, opt_sync },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \n    \"Usage: %s [options] [window=%1]\\n\"\n    \"--sync    - only exit once the window is active (is visible + active)\\n\"\n    HELP_SEE_WINDOW_STACK;\n\n  int option_index;\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n      case opt_help:\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      case opt_sync:\n        opsync = 1;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  if (!window_get_arg(context, 0, 0, &window_arg)) {\n    fprintf(stderr, usage, cmd);\n    return EXIT_FAILURE;\n  }\n\n  window_each(context, window_arg, {\n    ret = xdo_activate_window(context->xdo, window);\n    if (ret) {\n      fprintf(stderr, \"xdo_activate_window on window:%ld reported an error\\n\",\n              window);\n      return ret;\n    } else {\n      if (opsync) {\n        xdo_wait_for_window_active(context->xdo, window, 1);\n      }\n    }\n  }); /* window_each(...) */\n\n  return ret;\n}\n\n"
        },
        {
          "name": "cmd_windowclose.c",
          "type": "blob",
          "size": 1.1533203125,
          "content": "#include \"xdo_cmd.h\"\n\nint cmd_windowclose(context_t *context) {\n  int ret = 0;\n  char *cmd = *context->argv;\n  const char *window_arg = \"%1\";\n\n  int c;\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, 'h' },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage =\n    \"Usage: %s [window=%1]\\n\"\n    HELP_SEE_WINDOW_STACK;\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  if (!window_get_arg(context, 0, 0, &window_arg)) {\n    fprintf(stderr, usage, cmd);\n    return EXIT_FAILURE;\n  }\n\n  window_each(context, window_arg, {\n    ret = xdo_close_window(context->xdo, window);\n    if (ret) {\n      fprintf(stderr, \"xdo_close_window reported an error on window %ld\\n\",\n              window);\n    }\n  }); /* window_each(...) */\n\n  return ret;\n} /* int cmd_windowclose(context_t *) */\n\n"
        },
        {
          "name": "cmd_windowfocus.c",
          "type": "blob",
          "size": 1.41015625,
          "content": "#include \"xdo_cmd.h\"\n\nint cmd_windowfocus(context_t *context) {\n  int ret = 0;\n  char *cmd = *context->argv;\n  int opsync = 0;\n\n  int c;\n  enum { opt_unused, opt_help, opt_sync };\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, opt_help },\n    { \"sync\", no_argument, NULL, opt_sync },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \n    \"Usage: %s [window=%1]\\n\"\n    \"--sync    - only exit once the window has focus\\n\";\n\n  int option_index;\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n      case opt_help:\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      case opt_sync:\n        opsync = 1;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  const char *window_arg = \"%1\";\n  if (!window_get_arg(context, 0, 0, &window_arg)) {\n    fprintf(stderr, usage, cmd);\n    return EXIT_FAILURE;\n  }\n\n  window_each(context, window_arg, {\n    ret = xdo_focus_window(context->xdo, window);\n    if (ret) {\n      fprintf(stderr, \"xdo_focus_window reported an error\\n\");\n      return ret;\n    } else {\n      if (opsync) {\n        xdo_wait_for_window_focus(context->xdo, window, 1);\n      }\n    }\n  }); /* window_each(...) */\n\n  return ret;\n}\n\n"
        },
        {
          "name": "cmd_windowkill.c",
          "type": "blob",
          "size": 1.150390625,
          "content": "#include \"xdo_cmd.h\"\n\nint cmd_windowkill(context_t *context) {\n  int ret = 0;\n  char *cmd = *context->argv;\n  const char *window_arg = \"%1\";\n\n  int c;\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, 'h' },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \n    \"Usage: %s [window=%1]\\n\"\n    HELP_SEE_WINDOW_STACK;\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  if (!window_get_arg(context, 0, 0, &window_arg)) {\n    fprintf(stderr, usage, cmd);\n    return EXIT_FAILURE;\n  }\n\n  window_each(context, window_arg, {\n    ret = xdo_kill_window(context->xdo, window);\n    if (ret) {\n      fprintf(stderr, \"xdo_kill_window reported an error on window %ld\\n\",\n              window);\n    }\n  }); /* window_each(...) */\n\n  return ret;\n} /* int cmd_windowkill(context_t *) */\n\n"
        },
        {
          "name": "cmd_windowlower.c",
          "type": "blob",
          "size": 1.1533203125,
          "content": "#include \"xdo_cmd.h\"\n\nint cmd_windowlower(context_t *context) {\n  int ret = 0;\n  char *cmd = *context->argv;\n  const char *window_arg = \"%1\";\n\n  int c;\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, 'h' },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage =\n    \"Usage: %s [window=%1]\\n\"\n    HELP_SEE_WINDOW_STACK;\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  if (!window_get_arg(context, 0, 0, &window_arg)) {\n    fprintf(stderr, usage, cmd);\n    return EXIT_FAILURE;\n  }\n\n  window_each(context, window_arg, {\n    ret = xdo_lower_window(context->xdo, window);\n    if (ret) {\n      fprintf(stderr, \"xdo_lower_window reported an error on window %ld\\n\",\n              window);\n    }\n  }); /* window_each(...) */\n\n  return ret;\n} /* int cmd_windowlower(context_t *) */\n\n"
        },
        {
          "name": "cmd_windowmap.c",
          "type": "blob",
          "size": 1.4521484375,
          "content": "#include \"xdo_cmd.h\"\n\nint cmd_windowmap(context_t *context) {\n  int ret = 0;\n  char *cmd = *context->argv;\n  const char *window_arg = \"%1\";\n  int opsync = 0;\n\n  int c;\n  enum { opt_unused, opt_help, opt_sync };\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, opt_help },\n    { \"sync\", no_argument, NULL, opt_sync },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \n    \"Usage: %s [options] [window=%1]\\n\"\n    \"--sync    - only exit once the window has been mapped (is visible)\\n\"\n    HELP_SEE_WINDOW_STACK;\n\n  int option_index;\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n      case opt_help:\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      case opt_sync:\n        opsync = 1;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  if (!window_get_arg(context, 0, 0, &window_arg)) {\n    fprintf(stderr, usage, cmd);\n    return EXIT_FAILURE;\n  }\n\n  window_each(context, window_arg, {\n    ret = xdo_map_window(context->xdo, window);\n    if (ret) {\n      fprintf(stderr, \"xdo_map_window reported an error\\n\");\n    } else {\n      if (opsync) {\n        xdo_wait_for_window_map_state(context->xdo, window, IsViewable);\n      }\n    }\n  }); /* window_each(...) */\n\n  return ret;\n}\n"
        },
        {
          "name": "cmd_windowminimize.c",
          "type": "blob",
          "size": 1.4697265625,
          "content": "\n#include \"xdo_cmd.h\"\n\nint cmd_windowminimize(context_t *context) {\n  int ret = 0;\n  char *cmd = *context->argv;\n  const char *window_arg = \"%1\";\n  int opsync = 0;\n\n  int c;\n  enum { opt_unused, opt_help, opt_sync };\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, opt_help },\n    { \"sync\", no_argument, NULL, opt_sync },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \n    \"Usage: %s [options] [window=%1]\\n\"\n    \"--sync    - only exit once the window has minimized (is not visible)\\n\"\n    HELP_SEE_WINDOW_STACK;\n\n  int option_index;\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n      case opt_help:\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      case opt_sync:\n        opsync = 1;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  if (!window_get_arg(context, 0, 0, &window_arg)) {\n    fprintf(stderr, usage, cmd);\n    return EXIT_FAILURE;\n  }\n\n  window_each(context, window_arg, {\n    ret = xdo_minimize_window(context->xdo, window);\n    if (ret) {\n      fprintf(stderr, \"xdo_minimize_window reported an error\\n\");\n    } else {\n      if (opsync) {\n        xdo_wait_for_window_map_state(context->xdo, window, IsUnmapped);\n      }\n    }\n  }); /* window_each(...) */\n\n  return ret;\n}\n"
        },
        {
          "name": "cmd_windowmove.c",
          "type": "blob",
          "size": 5.7734375,
          "content": "#include \"xdo_cmd.h\"\n\n#define WINDOWMOVE_X_CURRENT (1 << 0)\n#define WINDOWMOVE_Y_CURRENT (1 << 1)\n#define WINDOWMOVE_RELATIVE (1 << 2)\n\nstruct windowmove {\n  Window window;\n  int x;\n  int y;\n  int opsync;\n  int flags;\n};\n\n/* This function exists because at one time I had problems embedding certain\n * blocks of code within macros (window_each). */\nstatic int _windowmove(context_t *context, struct windowmove *windowmove);\n\nint cmd_windowmove(context_t *context) {\n  int ret = 0;\n  unsigned int width, height;\n  int is_width_percent = 0, is_height_percent = 0;\n  char *cmd = *context->argv;\n  struct windowmove windowmove;\n\n  windowmove.x = 0;\n  windowmove.y = 0;\n  windowmove.opsync = 0;\n  windowmove.window = CURRENTWINDOW;\n  windowmove.flags = 0;\n\n  int c;\n  enum { opt_unused, opt_help, opt_sync, opt_relative };\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, opt_help },\n    { \"sync\", no_argument, NULL, opt_sync },\n    { \"relative\", no_argument, NULL, opt_relative },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage =\n    \"Usage: %s [options] [window=%1] x y\\n\"\n    \"--sync      - only exit once the window has moved\\n\"\n    \"--relative  - make movements relative to the current window position\"\n    \"\\n\"\n    \"If you use literal 'x' or 'y' for the x coordinates, then the current\\n\"\n    \"coordinate will be used. This is useful for moving the window along\\n\"\n    \"only one axis.\\n\";\n\n  int option_index;\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n      case opt_help:\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      case opt_sync:\n        windowmove.opsync = 1;\n        break;\n      case opt_relative:\n        windowmove.flags |= WINDOWMOVE_RELATIVE;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  const char *window_arg = \"%1\";\n\n  if (!window_get_arg(context, 2, 0, &window_arg)) {\n    fprintf(stderr, usage, cmd);\n    return EXIT_FAILURE;\n  }\n\n  if (context->argv[0][0] == 'x') {\n    windowmove.flags |= WINDOWMOVE_X_CURRENT;\n  } else {\n    /* Use percentage if given a percent. */\n    if (strchr(context->argv[0], '%')) {\n        is_width_percent = 1;\n    } else {\n        windowmove.x = (int)strtol(context->argv[0], NULL, 0);\n    }\n  }\n\n  if (context->argv[1][0] == 'y') {\n    windowmove.flags |= WINDOWMOVE_Y_CURRENT;\n  } else {\n    /* Use percentage if given a percent. */\n    if (strchr(context->argv[0], '%')) {\n        is_height_percent = 1;\n    } else {\n        windowmove.y = (int)strtol(context->argv[1], NULL, 0);\n    }\n  }\n\n  width = (unsigned int)strtoul(context->argv[0], NULL, 0);\n  height = (unsigned int)strtoul(context->argv[1], NULL, 0);\n  consume_args(context, 2);\n\n  XWindowAttributes wattr;\n  unsigned int root_w, root_h; /* for percent */\n\n  window_each(context, window_arg, {\n      if (is_width_percent || is_height_percent) {\n        Window root = 0;\n        XGetWindowAttributes(context->xdo->xdpy, window, &wattr);\n        root = wattr.root;\n        xdo_get_window_size(context->xdo, root, &root_w, &root_h);\n\n        if (is_width_percent) {\n          windowmove.x = (root_w * width / 100);\n        }\n\n        if (is_height_percent) {\n          windowmove.y = (root_h * height / 100);\n        }\n      }\n      windowmove.window = window;\n      _windowmove(context, &windowmove);\n    }); /* window_each(...) */\n  return ret;\n}\n\nstatic int _windowmove(context_t *context, struct windowmove *windowmove) {\n  int orig_win_x = 0;\n  int orig_win_y = 0;\n  int ret;\n\n  /* Grab the current position of the window if we are moving synchronously\n   * or if we are moving along an axis.\n   * That is, with --sync or x or y in args were literally 'x' or 'y'\n   * or if --relative is given*/\n  if (windowmove->opsync || windowmove->flags != 0) {\n    xdo_get_window_location(context->xdo, windowmove->window,\n                            &orig_win_x, &orig_win_y, NULL);\n    /* Break early if we don't need to move the window */\n    if (orig_win_x == windowmove->x && orig_win_y == windowmove->y) {\n      return 0;\n    }\n  }\n\n  int target_x = windowmove->x;\n  int target_y = windowmove->y;\n\n\n  if (windowmove->flags & WINDOWMOVE_RELATIVE) {\n    target_x = orig_win_x + windowmove->x;\n    target_y = orig_win_y + windowmove->y;\n  }\n\n  if (windowmove->flags & WINDOWMOVE_X_CURRENT) {\n    target_x = orig_win_x;\n    xdotool_debug(context, \"Using %d for x\\n\", windowmove->x);\n  }\n\n  if (windowmove->flags & WINDOWMOVE_Y_CURRENT) {\n    target_y = orig_win_y;\n    xdotool_debug(context, \"Using %d for y\\n\", windowmove->y);\n  }\n\n\n  ret = xdo_move_window(context->xdo, windowmove->window, target_x, target_y);\n  if (ret) {\n    fprintf(stderr,\n            \"xdo_move_window reported an error while moving window %ld\\n\",\n            windowmove->window);\n  } else {\n    if (windowmove->opsync) {\n      /* This 'sync' request is stateful (we need to know the original window\n       * location to make the decision about 'done'\n       * Some window managers force alignments or otherwise mangle move\n       * requests, so we can't just look for the x,y positions exactly.\n       * Just look for any change in the window's position. */\n      int win_x, win_y;\n      xdo_get_window_location(context->xdo, windowmove->window,\n                              &win_x, &win_y, NULL);\n      /* Permit imprecision to account for window borders and titlebar */\n      while (orig_win_x == win_x && orig_win_y == win_y\n             && abs(windowmove->x - win_x) > 10\n             && abs(windowmove->y - win_y) > 50) {\n        xdo_get_window_location(context->xdo, windowmove->window,\n                                &win_x, &win_y, NULL);\n        usleep(30000);\n      }\n    }\n  }\n\n  return ret;\n}\n"
        },
        {
          "name": "cmd_windowquit.c",
          "type": "blob",
          "size": 1.1494140625,
          "content": "#include \"xdo_cmd.h\"\n\nint cmd_windowquit(context_t *context) {\n  int ret = 0;\n  char *cmd = *context->argv;\n  const char *window_arg = \"%1\";\n\n  int c;\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, 'h' },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage =\n    \"Usage: %s [window=%1]\\n\"\n    HELP_SEE_WINDOW_STACK;\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  if (!window_get_arg(context, 0, 0, &window_arg)) {\n    fprintf(stderr, usage, cmd);\n    return EXIT_FAILURE;\n  }\n\n  window_each(context, window_arg, {\n    ret = xdo_quit_window(context->xdo, window);\n    if (ret) {\n      fprintf(stderr, \"xdo_quit_window reported an error on window %ld\\n\",\n              window);\n    }\n  }); /* window_each(...) */\n\n  return ret;\n} /* int cmd_windowquit(context_t *) */\n\n"
        },
        {
          "name": "cmd_windowraise.c",
          "type": "blob",
          "size": 1.154296875,
          "content": "#include \"xdo_cmd.h\"\n\nint cmd_windowraise(context_t *context) {\n  int ret = 0;\n  char *cmd = *context->argv;\n  const char *window_arg = \"%1\";\n\n  int c;\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, 'h' },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \n    \"Usage: %s [window=%1]\\n\"\n    HELP_SEE_WINDOW_STACK;\n  int option_index;\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  if (!window_get_arg(context, 0, 0, &window_arg)) {\n    fprintf(stderr, usage, cmd);\n    return EXIT_FAILURE;\n  }\n\n  window_each(context, window_arg, {\n    ret = xdo_raise_window(context->xdo, window);\n    if (ret) {\n      fprintf(stderr, \"xdo_raise_window reported an error on window %ld\\n\",\n              window);\n    }\n  }); /* window_each(...) */\n\n  return ret;\n} /* int cmd_windowraise(context_t *) */\n\n"
        },
        {
          "name": "cmd_windowreparent.c",
          "type": "blob",
          "size": 1.8720703125,
          "content": "#include \"xdo_cmd.h\"\n\nint cmd_windowreparent(context_t *context) {\n  int ret = 0;\n  char *cmd = *context->argv;\n  const char *window_arg = \"%1\";\n\n  int c;\n  enum { opt_unused, opt_help };\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, opt_help },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \"Usage: %s [window_source=%1] window_destination\\n\";\n\n  int option_index;\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  if (!window_get_arg(context, 1, 0, &window_arg)) {\n    fprintf(stderr, usage, cmd);\n    return EXIT_FAILURE;\n  }\n\n  /* Permit using WINDOW STACK notation for the destination window, too */\n  Window *destwindows = NULL;\n  int ndestwindows = 0;\n  window_list(context, context->argv[0], &destwindows, &ndestwindows, False); \\\n\n  if (ndestwindows > 1) {\n    fprintf(stderr, \"It doesn't make sense to have multiple destinations as the \"\n            \"new parent window. Your destination selection '%s' resulted in %d \"\n            \"windows.\", context->argv[0], ndestwindows);\n    return EXIT_FAILURE;\n  }\n  Window destination = destwindows[0];\n\n  consume_args(context, 1);\n\n  window_each(context, window_arg, {\n    //printf(\"Reparenting %ld -> %ld\\n\", window, destination);\n    ret = xdo_reparent_window(context->xdo, window, destination);\n    if (ret) {\n      fprintf(stderr, \"xdo_reparent_window reported an error on for \"\n              \"src=%ld, dest=%ld\\n\", window, destination);\n    }\n  }); /* window_each(...) */\n\n  if (ret)\n    fprintf(stderr, \"xdo_reparent_window reported an error\\n\");\n\n  return ret;\n}\n"
        },
        {
          "name": "cmd_windowsize.c",
          "type": "blob",
          "size": 3.6845703125,
          "content": "#include \"xdo_cmd.h\"\n#include <string.h>\n\nint cmd_windowsize(context_t *context) {\n  int ret = 0;\n  unsigned int width, height;\n  int is_width_percent = 0, is_height_percent = 0;\n  int c;\n  int opsync = 0;\n\n  int use_hints = 0;\n  enum { opt_unused, opt_help, opt_usehints, opt_sync };\n  struct option longopts[] = {\n    { \"usehints\", 0, NULL, opt_usehints },\n    { \"help\", no_argument, NULL, opt_help },\n    { \"sync\", no_argument, NULL, opt_sync },\n    { 0, 0, 0, 0 },\n  };\n\n  int size_flags = 0;\n  char *cmd = *context->argv;\n  int option_index;\n  static const char *usage =\n            \"Usage: %s [--sync] [--usehints] [window=%1] width height\\n\"\n            HELP_SEE_WINDOW_STACK\n            \"--usehints  - Use window sizing hints (like font size in terminals)\\n\"\n            \"--sync      - only exit once the window has resized\\n\";\n\n\n  while ((c = getopt_long_only(context->argc, context->argv, \"+uh\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n      case opt_help:\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n      case 'u':\n      case opt_usehints:\n        use_hints = 1;\n        break;\n      case opt_sync:\n        opsync = 1;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  const char *window_arg = \"%1\";\n\n  if (!window_get_arg(context, 2, 0, &window_arg)) {\n    fprintf(stderr, \"Invalid argument count, got %d, expected %d\\n\", \n            3, context->argc);\n    fprintf(stderr, usage, cmd);\n    return EXIT_FAILURE;\n  }\n\n  /* Use percentage if given a percent. */\n  if (strchr(context->argv[0], '%')) {\n    is_width_percent = 1;\n  }\n\n  if (strchr(context->argv[1], '%')) {\n    is_height_percent = 1;\n  }\n\n  if (use_hints) {\n    if (!is_height_percent) {\n      size_flags |= SIZE_USEHINTS_Y;\n    }\n    if (!is_width_percent) {\n      size_flags |= SIZE_USEHINTS_X;\n    }\n  }\n\n  width = (unsigned int)strtoul(context->argv[0], NULL, 0);\n  height = (unsigned int)strtoul(context->argv[1], NULL, 0);\n  consume_args(context, 2);\n\n  XWindowAttributes wattr;\n  unsigned int original_w, original_h;\n  unsigned int root_w, root_h; /* for percent */\n\n  window_each(context, window_arg, {\n    if (is_width_percent || is_height_percent) {\n      Window root = 0;\n      XGetWindowAttributes(context->xdo->xdpy, window, &wattr);\n      root = wattr.root;\n      xdo_get_window_size(context->xdo, root, &root_w, &root_h);\n\n      if (is_width_percent) {\n        width = (root_w * width / 100);\n      }\n\n      if (is_height_percent) {\n        height = (root_h * height / 100);\n      }\n    }\n\n    if (opsync) {\n      unsigned int w = width;\n      unsigned int h = height;\n      xdo_get_window_size(context->xdo, window, &original_w, &original_h);\n      if (size_flags & SIZE_USEHINTS_X) {\n        xdo_translate_window_with_sizehint(context->xdo, window, w, h, &w, NULL);\n      }\n      if (size_flags & SIZE_USEHINTS_Y) {\n        xdo_translate_window_with_sizehint(context->xdo, window, w, h, NULL, &h);\n      }\n\n      if (original_w == w && original_h == h) {\n        /* Skip, this window doesn't need to move. */\n        break;\n      }\n    }\n\n    ret = xdo_set_window_size(context->xdo, window, width, height, size_flags);\n    if (ret) {\n      fprintf(stderr, \"xdo_set_window_size on window:%ld reported an error\\n\",\n              window);\n      return ret;\n    }\n    if (opsync) {\n      //xdo_wait_for_window_size(context->xdo, window, width, height, 0,\n                               //SIZE_TO);\n      xdo_wait_for_window_size(context->xdo, window, original_w, original_h, 0,\n                               SIZE_FROM);\n    }\n  }); /* window_each(...) */\n\n  return ret;\n}\n\n"
        },
        {
          "name": "cmd_windowstate.c",
          "type": "blob",
          "size": 2.9267578125,
          "content": "#include <ctype.h>\n#include <errno.h>\n#include \"xdo_cmd.h\"\n\nstatic char *parse_property(const char *arg_property) {\n  const char *prefix = \"_NET_WM_STATE_\";\n  const size_t len_prefix = strlen(prefix);\n  char *property;\n  char *pdst;\n  const char *psrc;\n\n  property = (char *) malloc(len_prefix + strlen(arg_property) + 1);\n  if (!property) {\n    return NULL;\n  }\n  strcpy(property, prefix);\n  pdst = property + len_prefix;\n  psrc = arg_property;\n  while (*psrc) {\n    *pdst++ = (char) toupper((int) *psrc++);\n  }\n  *pdst = 0;\n  return property;\n}\n\nint cmd_windowstate(context_t *context) {\n  int ret = 0;\n  int has_error = 0;\n\n  char *cmd = *context->argv;\n  int c;\n  const char *window_arg = \"%1\";\n\n  unsigned long action = (unsigned long) -1;\n  const char *arg_property = NULL;\n  char *property;\n\n  static struct option longopts[] = {\n          {\"add\",    required_argument, NULL, 'a'},\n          {\"remove\", required_argument, NULL, 'r'},\n          {\"toggle\", required_argument, NULL, 't'},\n          {\"help\",   no_argument,       NULL, 'h'},\n          {0, 0, 0,                           0},\n  };\n  int option_index = 0;\n  static const char *usage =\n          \"Usage: %s [options] [window=%1]\\n\"\n                  HELP_SEE_WINDOW_STACK\n                  \"--add property  - add a property\\n\"\n                  \"--remove property - remove a property\\n\"\n                  \"--toggle property - toggle a property\\n\"\n                  \"property can be one of \\n\"\n                  \"MODAL, STICKY, MAXIMIZED_VERT, MAXIMIZED_HORZ, SHADED, SKIP_TASKBAR, \\n\"\n                  \"SKIP_PAGER, HIDDEN, FULLSCREEN, ABOVE, BELOW, DEMANDS_ATTENTION\\n\";\n  while ((c = getopt_long_only(context->argc, context->argv, \"+ha:r:t:\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'a':\n        action = _NET_WM_STATE_ADD;\n        arg_property = optarg;\n        break;\n      case 'r':\n        action = _NET_WM_STATE_REMOVE;\n        arg_property = optarg;\n        break;\n      case 't':\n        action = _NET_WM_STATE_TOGGLE;\n        arg_property = optarg;\n        break;\n      case 'h':\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n\n  if (action == (unsigned long)-1 || arg_property == NULL) {\n    fprintf(stderr, usage, cmd);\n    return 1;\n  }\n\n  if (!window_get_arg(context, 0, 0, &window_arg)) {\n    fprintf(stderr, usage, cmd);\n    return 1;\n  }\n\n  property = parse_property(arg_property);\n  if (!property) {\n    return 1;\n  }\n\n  window_each(context, window_arg, {\n    ret = xdo_window_state(context->xdo, window, action, property);\n    if (ret) {\n      has_error = 1;\n      fprintf(stderr, \"xdo_window_property reported an error on window %ld\\n\",\n              window);\n    }\n  }); /* window_each(...) */\n\n  free(property);\n  return has_error;\n} /* int cmd_windowstate(context_t *) */\n"
        },
        {
          "name": "cmd_windowunmap.c",
          "type": "blob",
          "size": 1.4521484375,
          "content": "#include \"xdo_cmd.h\"\n\nint cmd_windowunmap(context_t *context) {\n  int ret = 0;\n  char *cmd = *context->argv;\n  const char *window_arg = \"%1\";\n  int opsync;\n\n  int c;\n  enum { opt_unused, opt_help, opt_sync, opt_verbose };\n  static struct option longopts[] = {\n    { \"help\", no_argument, NULL, opt_help },\n    { \"sync\", no_argument, NULL, opt_sync },\n    { 0, 0, 0, 0 },\n  };\n  static const char *usage = \n    \"Usage: %s [--sync] [window=%1]\\n\"\n    \"--sync    - only exit once the window has been unmapped (is hidden)\\n\"\n    HELP_SEE_WINDOW_STACK;\n\n  int option_index;\n  while ((c = getopt_long_only(context->argc, context->argv, \"+h\",\n                               longopts, &option_index)) != -1) {\n    switch (c) {\n      case 'h':\n      case opt_help:\n        printf(usage, cmd);\n        consume_args(context, context->argc);\n        return EXIT_SUCCESS;\n        break;\n      case opt_sync:\n        opsync = 1;\n        break;\n      default:\n        fprintf(stderr, usage, cmd);\n        return EXIT_FAILURE;\n    }\n  }\n\n  consume_args(context, optind);\n  \n  if (!window_get_arg(context, 0, 0, &window_arg)) {\n    fprintf(stderr, usage, cmd);\n    return EXIT_FAILURE;\n  }\n\n  window_each(context, window_arg, {\n    ret = xdo_unmap_window(context->xdo, window);\n    if (ret) {\n      fprintf(stderr, \"xdo_unmap_window reported an error\\n\");\n    }\n\n    if (opsync) {\n      xdo_wait_for_window_map_state(context->xdo, window, IsUnmapped);\n    }\n  }); /* window_each(...) */\n\n  return ret;\n}\n\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "ext",
          "type": "tree",
          "content": null
        },
        {
          "name": "patch_clock_gettime.h",
          "type": "blob",
          "size": 0.32421875,
          "content": "\n/* Hack support for clock_gettime into OS X */\n\n#define CLOCK_MONOTONIC 1\ntypedef int clockid_t;\nint clock_gettime(clockid_t clk_id, struct timespec *res) {\n  struct timeval tv;\n  int ret = 0;\n  ret = gettimeofday(&tv, NULL);\n  if (ret == 0) {\n    res->tv_sec = tv.tv_sec;\n    res->tv_nsec = tv.tv_usec * 1000;\n  }\n  return ret;\n}\n"
        },
        {
          "name": "pc.sh",
          "type": "blob",
          "size": 0.2666015625,
          "content": "#!/bin/sh\n\nVERSION=$1\nLIBDIR=$2\nINCLUDEDIR=$3\n\ncat <<ENDPC\nlibdir=${LIBDIR}\nincludedir=${INCLUDEDIR}\n\nName: libxdo\nDescription: fake keyboard/mouse input, window management, and more\nVersion: ${VERSION}\nRequires: x11\nLibs: -L\\${libdir} -lxdo\nCflags: -I\\${includedir}\nENDPC\n"
        },
        {
          "name": "platform.sh",
          "type": "blob",
          "size": 1.03515625,
          "content": "#!/bin/sh\n\nuname=$(uname)\n\nlibsuffix() {\n  case $uname in\n    Darwin)\n      if [ -z \"$1\" ] ; then\n        echo \"dylib\"\n      else\n        echo \"$1.dylib\"\n      fi\n      ;;\n    CYGWIN_NT*)\n      if [ -z \"$1\" ] ; then\n        echo \"a\"\n      else\n        echo a.$1\n      fi\n      ;;\n    *)\n      if [ -z \"$1\" ] ; then\n        echo \"so\"\n      else\n        echo so.$1\n      fi\n      ;;\n  esac\n}\n\ndynlibflag() {\n  case $uname in\n    Darwin) echo \"-dynamiclib\" ;;\n    *) echo \"-shared\" ;;\n  esac\n}\n\nlibnameflag() {\n  MAJOR=$1\n  INSTALLLIB=$2\n  case $uname in\n    Darwin) echo \"-Wl,-install_name,$INSTALLLIB/libxdo.$MAJOR.dylib\" ;;\n    *) echo \"-Wl,-soname=libxdo.so.$MAJOR\" ;;\n  esac\n}\n\nextralibs() {\n  case $uname in\n    CYGWIN_NT*) echo \"-lrt -lxkbcommon -lXtst -lXinerama\" ; ;;\n    Linux|GNU/kFreeBSD|GNU) echo \"-lrt\" ;;\n  esac\n}\n\ncommand=$1\nshift\ncase $command in\n  libsuffix) $command \"$@\" ;;\n  dynlibflag) $command \"$@\" ;;\n  libnameflag) $command \"$@\" ;;\n  extralibs) $command \"$@\" ;;\n  *) \n    echo \"Invalid $0 command, '$command'\" >&2\n    exit 1\n    ;;\nesac\n\n"
        },
        {
          "name": "t",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.sh",
          "type": "blob",
          "size": 0.83984375,
          "content": "#!/bin/sh\n\nif [ -r \"VERSION\" ] ; then\n  . ./VERSION\nfi\n\nif [ -z \"$MAJOR\" -o -z \"$RELEASE\" -o -z \"$REVISION\" ] ; then\n  MAJOR=\"3\"\n  SOURCE_DATE_EPOCH=\"${SOURCE_DATE_EPOCH:-$(date +%s)}\"\n  DATE_FMT=\"%Y%m%d\"\n  RELEASE=\"$(date -u -d \"@$SOURCE_DATE_EPOCH\" \"+$DATE_FMT\" 2>/dev/null || date -u -r \"$SOURCE_DATE_EPOCH\" \"+$DATE_FMT\" 2>/dev/null || date -u \"+$DATE_FMT\")\"\n  REVISION=1\n  #$([ -d .svn ] && svn info . | awk '/Revision:/ {print $2}')\n  : ${REVISION=:0}\nfi\n\nVERSION=\"$MAJOR.$RELEASE.$REVISION\"\n\ncase $1 in\n  --major) echo \"$MAJOR\" ;;\n  --header) \n    echo \"#ifndef _VERSION_H_\"\n    echo \"#define _VERSION_H_\"\n    echo \"static const char *XDO_VERSION = \\\"$VERSION\\\";\"\n    echo \"#endif /* ifndef _VERSION_H */\"\n    ;;\n  --shell)\n    echo \"MAJOR=\\\"$MAJOR\\\"\"\n    echo \"RELEASE=\\\"$RELEASE\\\"\"\n    echo \"REVISION=\\\"$REVISION\\\"\"\n    ;;\n  *) echo \"$VERSION\" ;;\nesac\n"
        },
        {
          "name": "xdo.c",
          "type": "blob",
          "size": 63.0166015625,
          "content": "/* xdo library\n * - getwindowfocus contributed by Lee Pumphret\n * - keysequence_{up,down} contributed by Magnus Boman\n *\n * See the following url for an explanation of how keymaps work in X11\n * http://www.in-ulm.de/~mascheck/X11/xmodmap.html\n */\n\n#ifndef _XOPEN_SOURCE\n#define _XOPEN_SOURCE 600\n#endif /* _XOPEN_SOURCE */\n\n#include <sys/select.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <strings.h>\n#include <unistd.h>\n#include <regex.h>\n#include <ctype.h>\n#include <locale.h>\n#include <stdarg.h>\n\n#include <X11/Xlib.h>\n#include <X11/XKBlib.h>\n#include <X11/Xatom.h>\n#include <X11/Xresource.h>\n#include <X11/Xutil.h>\n#include <X11/extensions/XTest.h>\n#include <X11/extensions/Xinerama.h>\n#include <X11/keysym.h>\n#include <X11/cursorfont.h>\n\n#include <xkbcommon/xkbcommon.h>\n\n#include \"xdo.h\"\n#include \"xdo_util.h\"\n#include \"xdo_version.h\"\n\n#define DEFAULT_DELAY 12\n\n/**\n * The number of tries to check for a wait condition before aborting.\n * TODO(sissel): Make this tunable at runtime?\n */\n#define MAX_TRIES 500\n\nstatic void _xdo_populate_charcode_map(xdo_t *xdo);\nstatic int _xdo_has_xtest(const xdo_t *xdo);\n\nstatic KeySym _xdo_keysym_from_char(const xdo_t *xdo, wchar_t key);\nstatic void _xdo_charcodemap_from_char(const xdo_t *xdo, charcodemap_t *key);\nstatic void _xdo_charcodemap_from_keysym(const xdo_t *xdo, charcodemap_t *key, KeySym keysym);\n//static int _xdo_get_shiftcode_if_needed(const xdo_t *xdo, char key);\n\nstatic int _xdo_send_keysequence_window_to_keycode_list(const xdo_t *xdo, const char *keyseq,\n                                            charcodemap_t **keys, int *nkeys);\nstatic int _xdo_send_keysequence_window_do(const xdo_t *xdo, Window window, const char *keyseq,\n                               int pressed, int *modifier, useconds_t delay);\nstatic int _xdo_ewmh_is_supported(const xdo_t *xdo, const char *feature);\nstatic void _xdo_init_xkeyevent(const xdo_t *xdo, XKeyEvent *xk);\nstatic void _xdo_send_key(const xdo_t *xdo, Window window, charcodemap_t *key,\n                          int modstate, int is_press, useconds_t delay);\nstatic void _xdo_send_modifier(const xdo_t *xdo, int modmask, int is_press);\n\nstatic int _xdo_query_keycode_to_modifier(XModifierKeymap *modmap, KeyCode keycode);\nstatic int _xdo_mousebutton(const xdo_t *xdo, Window window, int button, int is_press);\n\nstatic int _is_success(const char *funcname, int code, const xdo_t *xdo);\nstatic void _xdo_debug(const xdo_t *xdo, const char *format, ...);\nstatic void _xdo_eprintf(const xdo_t *xdo, int hushable, const char *format, ...);\n\n/* context-free functions */\nstatic wchar_t _keysym_to_char(KeySym keysym);\n\n/* Default to -1, initialize it when we need it */\nstatic Atom atom_NET_WM_PID = -1;\nstatic Atom atom_NET_WM_NAME = -1;\nstatic Atom atom_WM_NAME = -1;\nstatic Atom atom_STRING = -1;\nstatic Atom atom_UTF8_STRING = -1;\n\nxdo_t* xdo_new(const char *display_name) {\n  Display *xdpy;\n\n  if (display_name == NULL) {\n    display_name = XDisplayName(display_name);\n  }\n\n#define DISPLAY_HINT \"Is there an Xorg or other X server running? You can try setting 'export DISPLAY=:0' and trying again.\"\n  if (display_name == NULL) {\n    fprintf(stderr, \"Error: No DISPLAY environment variable is set. \" DISPLAY_HINT \"\\n\");\n    return NULL;\n  }\n\n  if (*display_name == '\\0') {\n    fprintf(stderr, \"Error: DISPLAY environment variable is empty. \" DISPLAY_HINT \"\\n\");\n    return NULL;\n  }\n\n  if ((xdpy = XOpenDisplay(display_name)) == NULL) {\n    return NULL;\n  }\n\n  return xdo_new_with_opened_display(xdpy, display_name, 1);\n}\n\nxdo_t* xdo_new_with_opened_display(Display *xdpy, const char *display,\n                                   int close_display_when_freed) {\n  xdo_t *xdo = NULL;\n\n  if (xdpy == NULL) {\n    /* Can't use _xdo_eprintf yet ... */\n    fprintf(stderr, \"xdo_new: xdisplay I was given is a null pointer\\n\");\n    return NULL;\n  }\n\n  /* XXX: Check for NULL here */\n  xdo = malloc(sizeof(xdo_t));\n  memset(xdo, 0, sizeof(xdo_t));\n\n  xdo->xdpy = xdpy;\n  xdo->close_display_when_freed = close_display_when_freed;\n\n  if (display == NULL) {\n    display = \"unknown\";\n  }\n\n  if (getenv(\"XDO_QUIET\")) {\n    xdo->quiet = True;\n  }\n\n  if (_xdo_has_xtest(xdo)) {\n    xdo_enable_feature(xdo, XDO_FEATURE_XTEST);\n    _xdo_debug(xdo, \"XTEST enabled.\");\n  } else {\n    _xdo_eprintf(xdo, False, \"Warning: XTEST extension unavailable on '%s'. Some\"\n                \" functionality may be disabled; See 'man xdotool' for more\"\n                \" info.\", xdo->display_name);\n    xdo_disable_feature(xdo, XDO_FEATURE_XTEST);\n  }\n\n  _xdo_populate_charcode_map(xdo);\n  return xdo;\n}\n\nvoid xdo_free(xdo_t *xdo) {\n  if (xdo == NULL)\n    return;\n\n  free(xdo->display_name);\n  free(xdo->charcodes);\n  if (xdo->xdpy && xdo->close_display_when_freed)\n    XCloseDisplay(xdo->xdpy);\n\n  free(xdo);\n}\n\nconst char *xdo_version(void) {\n  return XDO_VERSION;\n}\n\nint xdo_wait_for_window_map_state(const xdo_t *xdo, Window wid, int map_state) {\n  int tries = MAX_TRIES;\n  XWindowAttributes attr;\n  attr.map_state = IsUnmapped;\n  while (tries > 0 && attr.map_state != map_state) {\n    XGetWindowAttributes(xdo->xdpy, wid, &attr);\n    usleep(30000); /* TODO(sissel): Use exponential backoff up to 1 second */\n    tries--;\n  }\n  return 0;\n}\n\nint xdo_map_window(const xdo_t *xdo, Window wid) {\n  int ret = 0;\n  ret = XMapWindow(xdo->xdpy, wid);\n  XFlush(xdo->xdpy);\n  return _is_success(\"XMapWindow\", ret == 0, xdo);\n}\n\nint xdo_unmap_window(const xdo_t *xdo, Window wid) {\n  int ret = 0;\n  ret = XUnmapWindow(xdo->xdpy, wid);\n  XFlush(xdo->xdpy);\n  return _is_success(\"XUnmapWindow\", ret == 0, xdo);\n}\n\nint xdo_reparent_window(const xdo_t *xdo, Window wid_source, Window wid_target) {\n  int ret = 0;\n  ret = XReparentWindow(xdo->xdpy, wid_source, wid_target, 0, 0);\n  XFlush(xdo->xdpy);\n  return _is_success(\"XReparentWindow\", ret == 0, xdo);\n}\n\nint xdo_get_window_location(const xdo_t *xdo, Window wid,\n                            int *x_ret, int *y_ret, Screen **screen_ret) {\n  int ret;\n  XWindowAttributes attr;\n  ret = XGetWindowAttributes(xdo->xdpy, wid, &attr);\n  if (ret != 0) {\n    int x, y;\n    Window unused_child;\n\n    /* The coordinates in attr are relative to the parent window.  If\n     * the parent window is the root window, then the coordinates are\n     * correct.  If the parent window isn't the root window --- which\n     * is likely --- then we translate them. */\n    Window parent;\n    Window root;\n    Window* children;\n    unsigned int nchildren;\n    XQueryTree(xdo->xdpy, wid, &root, &parent, &children, &nchildren);\n    if (children != NULL) {\n      XFree(children);\n    }\n    if (parent == attr.root) {\n      x = attr.x;\n      y = attr.y;\n    } else {\n      XTranslateCoordinates(xdo->xdpy, wid, attr.root,\n                            0, 0, &x, &y, &unused_child);\n    }\n\n    if (x_ret != NULL) {\n      *x_ret = x;\n    }\n\n    if (y_ret != NULL) {\n      *y_ret = y;\n    }\n\n    if (screen_ret != NULL) {\n      *screen_ret = attr.screen;\n    }\n  }\n  return _is_success(\"XGetWindowAttributes\", ret == 0, xdo);\n}\n\nint xdo_get_window_size(const xdo_t *xdo, Window wid, unsigned int *width_ret,\n                        unsigned int *height_ret) {\n  int ret;\n  XWindowAttributes attr;\n  ret = XGetWindowAttributes(xdo->xdpy, wid, &attr);\n  if (ret != 0) {\n    if (width_ret != NULL) {\n      *width_ret = attr.width;\n    }\n\n    if (height_ret != NULL) {\n      *height_ret = attr.height;\n    }\n  }\n  return _is_success(\"XGetWindowAttributes\", ret == 0, xdo);\n}\n\nint xdo_move_window(const xdo_t *xdo, Window wid, int x, int y) {\n  XWindowChanges wc;\n  int ret = 0;\n  wc.x = x;\n  wc.y = y;\n\n  ret = XConfigureWindow(xdo->xdpy, wid, CWX | CWY, &wc);\n  return _is_success(\"XConfigureWindow\", ret == 0, xdo);\n}\n\nint xdo_translate_window_with_sizehint(const xdo_t *xdo, Window window,\n                                       unsigned int width, unsigned int height, \n                                       unsigned int *width_ret, unsigned int *height_ret) {\n  XSizeHints hints;\n  long supplied_return;\n  XGetWMNormalHints(xdo->xdpy, window, &hints, &supplied_return);\n  if (supplied_return & PResizeInc) {\n    width *= hints.width_inc;\n    height *= hints.height_inc;\n  } else {\n    fprintf(stderr, \"No size hints found for window %ld\\n\", window);\n    *width_ret = width;\n    *height_ret = width;\n  }\n\n  if (supplied_return & PBaseSize) {\n    width += hints.base_width;\n    height += hints.base_height;\n  }\n\n  if (width_ret != NULL) {\n    *width_ret = width;\n  }\n\n  if (height_ret != NULL) {\n    *height_ret = height;\n  }\n\n  return XDO_SUCCESS;\n}\n\nint xdo_set_window_size(const xdo_t *xdo, Window window, int width, int height, int flags) {\n  XWindowChanges wc;\n  int ret = 0;\n  int cw_flags = 0;\n\n  if (flags & SIZE_USEHINTS) {\n    flags |= SIZE_USEHINTS_X | SIZE_USEHINTS_Y;\n  }\n\n  wc.width = width;\n  wc.height = height;\n\n  if (flags & SIZE_USEHINTS_X) {\n    xdo_translate_window_with_sizehint(xdo, window, width, height, (unsigned int*)&wc.width,\n                                       NULL);\n  }\n\n  if (flags & SIZE_USEHINTS_Y) {\n    xdo_translate_window_with_sizehint(xdo, window, width, height, NULL,\n                                       (unsigned int*)&wc.height);\n  }\n\n  if (width > 0) {\n    cw_flags |= CWWidth;\n  }\n\n  if (height > 0) {\n    cw_flags |= CWHeight;\n  }\n\n  ret = XConfigureWindow(xdo->xdpy, window, cw_flags, &wc);\n  XFlush(xdo->xdpy);\n  return _is_success(\"XConfigureWindow\", ret == 0, xdo);\n}\n\nint xdo_set_window_override_redirect(const xdo_t *xdo, Window wid,\n                                     int override_redirect) {\n  int ret;\n  XSetWindowAttributes wattr;\n  long mask = CWOverrideRedirect;\n  wattr.override_redirect = override_redirect;\n  ret = XChangeWindowAttributes(xdo->xdpy, wid, mask, &wattr);\n\n  return _is_success(\"XChangeWindowAttributes\", ret == 0, xdo);\n}\n\nint xdo_set_window_class (const xdo_t *xdo, Window wid, const char *name,\n                         const char *_class) {\n  int ret = 0;\n  XClassHint *hint = XAllocClassHint();\n  XGetClassHint(xdo->xdpy, wid, hint);\n  if (name != NULL)\n    hint->res_name = (char*)name;\n\n  if(_class != NULL)\n    hint->res_class = (char*)_class;\n\n  ret = XSetClassHint(xdo->xdpy, wid, hint);\n  XFree(hint);\n  return _is_success(\"XSetClassHint\", ret == 0, xdo);\n}\n\nint xdo_set_window_urgency (const xdo_t *xdo, Window wid, int urgency) {\n  int ret = 0;\n  XWMHints *hint = XGetWMHints(xdo->xdpy, wid);\n  if (hint == NULL)\n    hint = XAllocWMHints();\n\n  if (urgency)\n    hint->flags = hint->flags | XUrgencyHint;\n  else\n    hint->flags = hint->flags & ~XUrgencyHint;\n\n  ret = XSetWMHints(xdo->xdpy, wid, hint);\n  XFree(hint);\n  return _is_success(\"XSetWMHint\", ret == 0, xdo);\n}\n\nint xdo_set_window_property(const xdo_t *xdo, Window wid, const char *property, const char *value) {\n  \n  char netwm_property[256] = \"_NET_\";\n  int ret = 0;\n  strcat(netwm_property, property);\n\n  // Change the property\n  ret = XChangeProperty(xdo->xdpy, wid, \n                        XInternAtom(xdo->xdpy, property, False), \n                        XInternAtom(xdo->xdpy, \"STRING\", False), 8, \n                        PropModeReplace, (unsigned char*)value, strlen(value));\n  if (ret == 0) {\n    return _is_success(\"XChangeProperty\", ret == 0, xdo);\n  }\n\n  // Change _NET_<property> just in case for simpler NETWM compliance?\n  ret = XChangeProperty(xdo->xdpy, wid, \n                        XInternAtom(xdo->xdpy, netwm_property, False), \n                        XInternAtom(xdo->xdpy, \"STRING\", False), 8, \n                        PropModeReplace, (unsigned char*)value, strlen(value));\n  return _is_success(\"XChangeProperty\", ret == 0, xdo);\n}\n\nint xdo_focus_window(const xdo_t *xdo, Window wid) {\n  int ret = 0;\n  ret = XSetInputFocus(xdo->xdpy, wid, RevertToParent, CurrentTime);\n  XFlush(xdo->xdpy);\n  return _is_success(\"XSetInputFocus\", ret == 0, xdo);\n}\n\nint xdo_wait_for_window_size(const xdo_t *xdo, Window window,\n                             unsigned int width, unsigned int height,\n                             int flags, int to_or_from) {\n  unsigned int cur_width, cur_height;\n  /*unsigned int alt_width, alt_height;*/\n\n  //printf(\"Want: %udx%ud\\n\", width, height);\n  if (flags & SIZE_USEHINTS) {\n    xdo_translate_window_with_sizehint(xdo, window, width, height,\n                                       &width, &height);\n  } else {\n    unsigned int hint_width, hint_height;\n    /* TODO(sissel): fix compiler warning here, but it will require\n     * an ABI breakage by changing types... */\n    xdo_translate_window_with_sizehint(xdo, window, 1, 1,\n                                       &hint_width, &hint_height);\n    //printf(\"Hint: %dx%d\\n\", hint_width, hint_height);\n    /* Find the nearest multiple (rounded down) of the hint height. */\n    /*alt_width = (width - (width % hint_width));*/\n    /*alt_height = (height - (height % hint_height));*/\n    //printf(\"Alt: %udx%ud\\n\", alt_width, alt_height);\n  }\n\n  int tries = MAX_TRIES;\n  xdo_get_window_size(xdo, window, &cur_width,\n                      &cur_height);\n  //printf(\"Want: %udx%ud\\n\", width, height);\n  //printf(\"Alt: %udx%ud\\n\", alt_width, alt_height);\n  while (tries > 0 && (to_or_from == SIZE_TO\n         ? (cur_width != width && cur_height != height)\n         : (cur_width == width && cur_height == height))) {\n    xdo_get_window_size(xdo, window, (unsigned int *)&cur_width,\n                        (unsigned int *)&cur_height);\n    usleep(30000);\n    tries--;\n  }\n\n  return 0;\n}\n\nint xdo_wait_for_window_active(const xdo_t *xdo, Window window, int active) {\n  Window activewin = 0;\n  int ret = 0;\n  int tries = MAX_TRIES;\n\n  /* If active is true, wait until activewin is our window\n   * otherwise, wait until activewin is not our window */\n  while (tries > 0 && \n         (active ? activewin != window : activewin == window)) {\n    ret = xdo_get_active_window(xdo, &activewin);\n    if (ret == XDO_ERROR) {\n      return ret;\n    }\n    usleep(30000);\n    tries--;\n  }\n\n  return 0;\n}\n\nint xdo_activate_window(const xdo_t *xdo, Window wid) {\n  int ret = 0;\n  long desktop = 0;\n  XEvent xev;\n  XWindowAttributes wattr;\n\n  if (_xdo_ewmh_is_supported(xdo, \"_NET_ACTIVE_WINDOW\") == False) {\n    fprintf(stderr,\n            \"Your windowmanager claims not to support _NET_ACTIVE_WINDOW, \"\n            \"so the attempt to activate the window was aborted.\\n\");\n    return XDO_ERROR;\n  }\n\n  /* If this window is on another desktop, let's go to that desktop first */\n\n  if (_xdo_ewmh_is_supported(xdo, \"_NET_WM_DESKTOP\") == True\n      && _xdo_ewmh_is_supported(xdo, \"_NET_CURRENT_DESKTOP\") == True) {\n    xdo_get_desktop_for_window(xdo, wid, &desktop);\n    xdo_set_current_desktop(xdo, desktop);\n  }\n\n  memset(&xev, 0, sizeof(xev));\n  xev.type = ClientMessage;\n  xev.xclient.display = xdo->xdpy;\n  xev.xclient.window = wid;\n  xev.xclient.message_type = XInternAtom(xdo->xdpy, \"_NET_ACTIVE_WINDOW\", False);\n  xev.xclient.format = 32;\n  xev.xclient.data.l[0] = 2L; /* 2 == Message from a window pager */\n  xev.xclient.data.l[1] = CurrentTime;\n\n  XGetWindowAttributes(xdo->xdpy, wid, &wattr);\n  ret = XSendEvent(xdo->xdpy, wattr.screen->root, False,\n                   SubstructureNotifyMask | SubstructureRedirectMask,\n                   &xev);\n\n  /* XXX: XSendEvent returns 0 on conversion failure, nonzero otherwise.\n   * Manpage says it will only generate BadWindow or BadValue errors */\n  return _is_success(\"XSendEvent[EWMH:_NET_ACTIVE_WINDOW]\", ret == 0, xdo);\n}\n\nint xdo_set_number_of_desktops(const xdo_t *xdo, long ndesktops) {\n  /* XXX: This should support passing a screen number */\n  XEvent xev;\n  Window root;\n  int ret = 0;\n\n  if (_xdo_ewmh_is_supported(xdo, \"_NET_NUMBER_OF_DESKTOPS\") == False) {\n    fprintf(stderr,\n            \"Your windowmanager claims not to support _NET_NUMBER_OF_DESKTOPS, \"\n            \"so the attempt to change the number of desktops was aborted.\\n\");\n    return XDO_ERROR;\n  }\n\n  root = RootWindow(xdo->xdpy, 0);\n\n  memset(&xev, 0, sizeof(xev));\n  xev.type = ClientMessage;\n  xev.xclient.display = xdo->xdpy;\n  xev.xclient.window = root;\n  xev.xclient.message_type = XInternAtom(xdo->xdpy, \"_NET_NUMBER_OF_DESKTOPS\", \n                                         False);\n  xev.xclient.format = 32;\n  xev.xclient.data.l[0] = ndesktops;\n\n  ret = XSendEvent(xdo->xdpy, root, False,\n                   SubstructureNotifyMask | SubstructureRedirectMask,\n                   &xev);\n\n  return _is_success(\"XSendEvent[EWMH:_NET_NUMBER_OF_DESKTOPS]\", ret == 0, xdo);\n}\n\nint xdo_get_number_of_desktops(const xdo_t *xdo, long *ndesktops) {\n  Atom type;\n  int size;\n  long nitems;\n  unsigned char *data;\n  Window root;\n  Atom request;\n\n  if (_xdo_ewmh_is_supported(xdo, \"_NET_NUMBER_OF_DESKTOPS\") == False) {\n    fprintf(stderr,\n            \"Your windowmanager claims not to support _NET_NUMBER_OF_DESKTOPS, \"\n            \"so the attempt to query the number of desktops was aborted.\\n\");\n    return XDO_ERROR;\n  }\n\n  request = XInternAtom(xdo->xdpy, \"_NET_NUMBER_OF_DESKTOPS\", False);\n  root = XDefaultRootWindow(xdo->xdpy);\n\n  data = xdo_get_window_property_by_atom(xdo, root, request, &nitems, &type, &size);\n\n  if (nitems > 0) {\n    *ndesktops = *((long*)data);\n  } else {\n    *ndesktops = 0;\n  }\n  free(data);\n\n  return _is_success(\"XGetWindowProperty[_NET_NUMBER_OF_DESKTOPS]\",\n                     *ndesktops == 0, xdo);\n}\n\nint xdo_set_current_desktop(const xdo_t *xdo, long desktop) {\n  /* XXX: This should support passing a screen number */\n  XEvent xev;\n  Window root;\n  int ret = 0;\n\n  root = RootWindow(xdo->xdpy, 0);\n\n  if (_xdo_ewmh_is_supported(xdo, \"_NET_CURRENT_DESKTOP\") == False) {\n    fprintf(stderr,\n            \"Your windowmanager claims not to support _NET_CURRENT_DESKTOP, \"\n            \"so the attempt to change desktops was aborted.\\n\");\n    return XDO_ERROR;\n  }\n\n  memset(&xev, 0, sizeof(xev));\n  xev.type = ClientMessage;\n  xev.xclient.display = xdo->xdpy;\n  xev.xclient.window = root;\n  xev.xclient.message_type = XInternAtom(xdo->xdpy, \"_NET_CURRENT_DESKTOP\", \n                                         False);\n  xev.xclient.format = 32;\n  xev.xclient.data.l[0] = desktop;\n  xev.xclient.data.l[1] = CurrentTime;\n\n  ret = XSendEvent(xdo->xdpy, root, False,\n                   SubstructureNotifyMask | SubstructureRedirectMask,\n                   &xev);\n\n  return _is_success(\"XSendEvent[EWMH:_NET_CURRENT_DESKTOP]\", ret == 0, xdo);\n}\n\nint xdo_get_current_desktop(const xdo_t *xdo, long *desktop) {\n  Atom type;\n  int size;\n  long nitems;\n  unsigned char *data;\n  Window root;\n\n  Atom request;\n\n  if (_xdo_ewmh_is_supported(xdo, \"_NET_CURRENT_DESKTOP\") == False) {\n    fprintf(stderr,\n            \"Your windowmanager claims not to support _NET_CURRENT_DESKTOP, \"\n            \"so the query for the current desktop was aborted.\\n\");\n    return XDO_ERROR;\n  }\n\n  request = XInternAtom(xdo->xdpy, \"_NET_CURRENT_DESKTOP\", False);\n  root = XDefaultRootWindow(xdo->xdpy);\n\n  data = xdo_get_window_property_by_atom(xdo, root, request, &nitems, &type, &size);\n\n  if (nitems > 0) {\n    *desktop = *((long*)data);\n  } else {\n    *desktop = -1;\n  }\n  free(data);\n\n  return _is_success(\"XGetWindowProperty[_NET_CURRENT_DESKTOP]\",\n                     *desktop == -1, xdo);\n}\n\nint xdo_set_desktop_for_window(const xdo_t *xdo, Window wid, long desktop) {\n  XEvent xev;\n  int ret = 0;\n  XWindowAttributes wattr;\n  XGetWindowAttributes(xdo->xdpy, wid, &wattr);\n\n  if (_xdo_ewmh_is_supported(xdo, \"_NET_WM_DESKTOP\") == False) {\n    fprintf(stderr,\n            \"Your windowmanager claims not to support _NET_WM_DESKTOP, \"\n            \"so the attempt to change a window's desktop location was \"\n            \"aborted.\\n\");\n    return XDO_ERROR;\n  }\n\n  memset(&xev, 0, sizeof(xev));\n  xev.type = ClientMessage;\n  xev.xclient.display = xdo->xdpy;\n  xev.xclient.window = wid;\n  xev.xclient.message_type = XInternAtom(xdo->xdpy, \"_NET_WM_DESKTOP\", \n                                         False);\n  xev.xclient.format = 32;\n  xev.xclient.data.l[0] = desktop;\n  xev.xclient.data.l[1] = 2; /* indicate we are messaging from a pager */\n\n  ret = XSendEvent(xdo->xdpy, wattr.screen->root, False,\n                   SubstructureNotifyMask | SubstructureRedirectMask,\n                   &xev);\n\n  return _is_success(\"XSendEvent[EWMH:_NET_WM_DESKTOP]\", ret == 0, xdo);\n}\n\nint xdo_get_desktop_for_window(const xdo_t *xdo, Window wid, long *desktop) {\n  Atom type;\n  int size;\n  long nitems;\n  unsigned char *data;\n  Atom request;\n\n  if (_xdo_ewmh_is_supported(xdo, \"_NET_WM_DESKTOP\") == False) {\n    fprintf(stderr,\n            \"Your windowmanager claims not to support _NET_WM_DESKTOP, \"\n            \"so the attempt to query a window's desktop location was \"\n            \"aborted.\\n\");\n    return XDO_ERROR;\n  }\n\n  request = XInternAtom(xdo->xdpy, \"_NET_WM_DESKTOP\", False);\n\n  data = xdo_get_window_property_by_atom(xdo, wid, request, &nitems, &type, &size);\n  if (data == NULL) {\n    return XDO_ERROR;\n  }\n\n  if (nitems > 0) {\n    *desktop = *((long*)data);\n  } else {\n    *desktop = -1;\n  }\n  free(data);\n\n  return _is_success(\"XGetWindowProperty[_NET_WM_DESKTOP]\",\n                     *desktop == -1, xdo);\n}\n\nint xdo_get_active_window(const xdo_t *xdo, Window *window_ret) {\n  Atom type;\n  int size;\n  long nitems;\n  unsigned char *data;\n  Atom request;\n  Window root;\n\n  if (_xdo_ewmh_is_supported(xdo, \"_NET_ACTIVE_WINDOW\") == False) {\n    fprintf(stderr,\n            \"Your windowmanager claims not to support _NET_ACTIVE_WINDOW, \"\n            \"so the attempt to query the active window aborted.\\n\");\n    return XDO_ERROR;\n  }\n\n  request = XInternAtom(xdo->xdpy, \"_NET_ACTIVE_WINDOW\", False);\n  root = XDefaultRootWindow(xdo->xdpy);\n  data = xdo_get_window_property_by_atom(xdo, root, request, &nitems, &type, &size);\n\n  if (nitems > 0) {\n    *window_ret = *((Window*)data);\n  } else {\n    *window_ret = 0;\n  }\n  free(data);\n\n  return _is_success(\"XGetWindowProperty[_NET_ACTIVE_WINDOW]\",\n                     *window_ret == 0, xdo);\n}\n\nint xdo_select_window_with_click(const xdo_t *xdo, Window *window_ret) {\n  int screen_num;\n  Screen *screen;\n  xdo_get_mouse_location(xdo, NULL, NULL, &screen_num);\n\n  screen = ScreenOfDisplay(xdo->xdpy, screen_num);\n\n  /* Grab sync mode so we can ensure nothing changes while we figure\n   * out what the client window is.\n   * Also, everyone else who does 'select window' does it this way.\n   */\n  Cursor cursor = XCreateFontCursor(xdo->xdpy, XC_target);\n  int grab_ret = 0;\n  grab_ret = XGrabPointer(xdo->xdpy, screen->root, False, ButtonReleaseMask,\n               GrabModeSync, GrabModeAsync, screen->root, cursor, CurrentTime);\n  if (grab_ret == AlreadyGrabbed) {\n    fprintf(stderr, \"Attempt to grab the mouse failed. Something already has\"\n            \" the mouse grabbed. This can happen if you are dragging something\"\n            \" or if there is a popup currently shown\\n\");\n    return XDO_ERROR;\n  }\n\n  XEvent e;\n  XAllowEvents(xdo->xdpy, SyncPointer, CurrentTime);\n  XWindowEvent(xdo->xdpy, screen->root, ButtonReleaseMask, &e);\n  XUngrabPointer(xdo->xdpy, CurrentTime);\n  XFreeCursor(xdo->xdpy, cursor);\n\n  if (e.xbutton.button != 1) {\n    fprintf(stderr, \"window selection aborted with button %d\\n\", e.xbutton.button);\n    return XDO_ERROR;\n  }\n\n  /* If there is no subwindow, then we clicked on the root window */\n  if (e.xbutton.subwindow == 0) {\n    *window_ret = e.xbutton.root;\n  } else {\n     /* Random testing showed that 'root' always is the same as 'window'\n      * while 'subwindow' is the actual window we clicked on. Confusing... */\n     *window_ret = e.xbutton.subwindow;\n    _xdo_debug(xdo, \"Click on window %lu foo\", *window_ret);\n    xdo_find_window_client(xdo, *window_ret, window_ret, XDO_FIND_CHILDREN);\n  }\n  return XDO_SUCCESS;\n}\n\n/* XRaiseWindow is ignored in ion3 and Gnome2. Is it even useful? */\nint xdo_raise_window(const xdo_t *xdo, Window wid) {\n  int ret = 0;\n  ret = XRaiseWindow(xdo->xdpy, wid);\n  XFlush(xdo->xdpy);\n  return _is_success(\"XRaiseWindow\", ret == 0, xdo);\n}\n\nint xdo_lower_window(const xdo_t *xdo, Window wid) {\n  int ret = 0;\n  ret = XLowerWindow(xdo->xdpy, wid);\n  XFlush(xdo->xdpy);\n  return _is_success(\"XLowerWindow\", ret == 0, xdo);\n}\n\nint xdo_move_mouse(const xdo_t *xdo, int x, int y, int screen)  {\n  int ret = 0;\n\n  /* There is a bug (feature?) in XTestFakeMotionEvent that causes\n   * the screen number in the request to be ignored. The internets\n   * seem to recommend XWarpPointer instead, ie;\n   * https://bugzilla.redhat.com/show_bug.cgi?id=518803\n   */\n  if (screen > 0) {\n    Window screen_root = RootWindow(xdo->xdpy, screen);\n    ret = XWarpPointer(xdo->xdpy, None, screen_root, 0, 0, 0, 0, x, y);\n  } else {\n    ret = XTestFakeMotionEvent(xdo->xdpy, 0, x, y, CurrentTime);\n  }\n  XFlush(xdo->xdpy);\n  return _is_success(\"XWarpPointer\", ret == 0, xdo);\n}\n\nint xdo_move_mouse_relative_to_window(const xdo_t *xdo, Window window, int x, int y) {\n  XWindowAttributes attr;\n  Window unused_child;\n  int root_x, root_y;\n\n  XGetWindowAttributes(xdo->xdpy, window, &attr);\n  XTranslateCoordinates(xdo->xdpy, window, attr.root,\n                        x, y, &root_x, &root_y, &unused_child);\n  return xdo_move_mouse(xdo, root_x, root_y, XScreenNumberOfScreen(attr.screen));\n}\n\nint xdo_move_mouse_relative(const xdo_t *xdo, int x, int y)  {\n  int ret = 0;\n  ret = XTestFakeRelativeMotionEvent(xdo->xdpy, x, y, CurrentTime);\n  XFlush(xdo->xdpy);\n  return _is_success(\"XTestFakeRelativeMotionEvent\", ret == 0, xdo);\n}\n\nint _xdo_mousebutton(const xdo_t *xdo, Window window, int button, int is_press) {\n  int ret = 0;\n\n  if (window == CURRENTWINDOW) {\n    ret = XTestFakeButtonEvent(xdo->xdpy, button, is_press, CurrentTime);\n    XFlush(xdo->xdpy);\n    return _is_success(\"XTestFakeButtonEvent(down)\", ret == 0, xdo);\n  } else {\n    /* Send to specific window */\n    int screen = 0;\n    XButtonEvent xbpe;\n    charcodemap_t *active_mod;\n    int active_mod_n;\n\n    xdo_get_mouse_location(xdo, &xbpe.x_root, &xbpe.y_root, &screen);\n    xdo_get_active_modifiers(xdo, &active_mod, &active_mod_n);\n\n    xbpe.window = window;\n    xbpe.button = button;\n    xbpe.display = xdo->xdpy;\n    xbpe.root = RootWindow(xdo->xdpy, screen);\n    xbpe.same_screen = True; /* Should we detect if window is on the same\n                                 screen as cursor? */\n    xbpe.state = xdo_get_input_state(xdo);\n\n    xbpe.subwindow = None;\n    xbpe.time = CurrentTime;\n    xbpe.type = (is_press ? ButtonPress : ButtonRelease);\n\n    /* Get the coordinates of the cursor relative to xbpe.window and also find what\n     * subwindow it might be on */\n    XTranslateCoordinates(xdo->xdpy, xbpe.root, xbpe.window, \n                          xbpe.x_root, xbpe.y_root, &xbpe.x, &xbpe.y, &xbpe.subwindow);\n\n    /* Normal behavior of 'mouse up' is that the modifier mask includes\n     * 'ButtonNMotionMask' where N is the button being released. This works the\n     * same way with keys, too. */\n    if (!is_press) { /* is mouse up */\n      switch(button) {\n        case 1: xbpe.state |= Button1MotionMask; break;\n        case 2: xbpe.state |= Button2MotionMask; break;\n        case 3: xbpe.state |= Button3MotionMask; break;\n        case 4: xbpe.state |= Button4MotionMask; break;\n        case 5: xbpe.state |= Button5MotionMask; break;\n      }\n    }\n    ret = XSendEvent(xdo->xdpy, window, True, ButtonPressMask, (XEvent *)&xbpe);\n    XFlush(xdo->xdpy);\n    free(active_mod);\n    return _is_success(\"XSendEvent(mousedown)\", ret == 0, xdo);\n  }\n}\n\nint xdo_mouse_up(const xdo_t *xdo, Window window, int button) {\n  return _xdo_mousebutton(xdo, window, button, False);\n}\n\nint xdo_mouse_down(const xdo_t *xdo, Window window, int button) {\n  return _xdo_mousebutton(xdo, window, button, True);\n}\n\nint xdo_get_mouse_location(const xdo_t *xdo, int *x_ret, int *y_ret,\n                           int *screen_num_ret) {\n  return xdo_get_mouse_location2(xdo, x_ret, y_ret, screen_num_ret, NULL);\n}\n\nint xdo_get_window_at_mouse(const xdo_t *xdo, Window *window_ret) {\n  return xdo_get_mouse_location2(xdo, NULL, NULL, NULL, window_ret);\n}\n\nint xdo_get_mouse_location2(const xdo_t *xdo, int *x_ret, int *y_ret,\n                            int *screen_num_ret, Window *window_ret) {\n  int ret = False;\n  int x = 0, y = 0, screen_num = 0;\n  int i = 0;\n  Window window = 0;\n  Window root = 0;\n  int dummy_int = 0;\n  unsigned int dummy_uint = 0;\n  int screencount = ScreenCount(xdo->xdpy);\n\n  for (i = 0; i < screencount; i++) {\n    Screen *screen = ScreenOfDisplay(xdo->xdpy, i);\n    ret = XQueryPointer(xdo->xdpy, RootWindowOfScreen(screen),\n                        &root, &window,\n                        &x, &y, &dummy_int, &dummy_int, &dummy_uint);\n    if (ret == True) {\n      screen_num = i;\n      break;\n    }\n  }\n\n  if (window_ret != NULL) {\n    /* Find the client window if we are not root. */\n    if (window != root && window != 0) {\n      int findret;\n      Window client = 0;\n\n      /* Search up the stack for a client window for this window */\n      findret = xdo_find_window_client(xdo, window, &client, XDO_FIND_PARENTS);\n      if (findret == XDO_ERROR) {\n        /* If no client found, search down the stack */\n        findret = xdo_find_window_client(xdo, window, &client, XDO_FIND_CHILDREN);\n      }\n      //fprintf(stderr, \"%ld, %ld, %ld, %d\\n\", window, root, client, findret);\n      if (findret == XDO_SUCCESS) {\n        window = client;\n      }\n    } else {\n      window = root;\n    }\n  }\n  //printf(\"mouseloc root: %ld\\n\", root);\n  //printf(\"mouseloc window: %ld\\n\", window);\n\n  if (ret == True) {\n    if (x_ret != NULL) *x_ret = x;\n    if (y_ret != NULL) *y_ret = y;\n    if (screen_num_ret != NULL) *screen_num_ret = screen_num;\n    if (window_ret != NULL) *window_ret = window;\n  }\n\n  return _is_success(\"XQueryPointer\", ret == False, xdo);\n}\n\nint xdo_click_window(const xdo_t *xdo, Window window, int button) {\n  int ret = 0;\n  ret = xdo_mouse_down(xdo, window, button);\n  if (ret != XDO_SUCCESS) {\n    fprintf(stderr, \"xdo_mouse_down failed, aborting click.\\n\");\n    return ret;\n  }\n  usleep(DEFAULT_DELAY);\n  ret = xdo_mouse_up(xdo, window, button);\n  return ret;\n}\n\nint xdo_click_window_multiple(const xdo_t *xdo, Window window, int button,\n                       int repeat, useconds_t delay) {\n  int ret = 0;\n  while (repeat > 0) {\n    ret = xdo_click_window(xdo, window, button);\n    if (ret != XDO_SUCCESS) {\n      fprintf(stderr, \"click failed with %d repeats remaining\\n\", repeat);\n      return ret;\n    }\n    repeat--;\n\n    /* Sleeping even after the last click is important, so that a call to xdo_set_active_modifiers()\n     * right after won't think that the button is still pressed. */\n    usleep(delay);\n  } /* while (repeat > 0) */\n  return ret;\n} /* int xdo_click_window_multiple */\n\n/* XXX: Return proper code if errors found */\nint xdo_enter_text_window(const xdo_t *xdo, Window window, const char *string, useconds_t delay) {\n  /* Keep the original delay for key up events, but use 50000 microseconds (50ms) for key down */\n  useconds_t down_delay = 50000; \n\n  charcodemap_t key;\n  setlocale(LC_CTYPE,\"\");\n  mbstate_t ps = { 0 };\n  ssize_t len;\n  while ( (len = mbsrtowcs(&key.key, &string, 1, &ps)) ) {\n    if (len == -1) {\n      fprintf(stderr, \"Invalid multi-byte sequence encountered\\n\");\n      return XDO_ERROR;\n    }\n    _xdo_charcodemap_from_char(xdo, &key);\n    if (key.code == 0 && key.symbol == NoSymbol) {\n      fprintf(stderr, \"I don't know which key produces '%lc', skipping.\\n\",\n              key.key);\n      continue;\n    }\n\n    /* Send the key press event with the fixed 50ms delay */\n    xdo_send_keysequence_window_list_do(xdo, window, &key, 1, True, NULL, down_delay);\n    key.needs_binding = 0;\n    /* Send the key release event with the user-specified delay */\n    xdo_send_keysequence_window_list_do(xdo, window, &key, 1, False, NULL, delay);\n  }\n\n  return XDO_SUCCESS;\n}\n\nint _xdo_send_keysequence_window_do(const xdo_t *xdo, Window window, const char *keyseq,\n                        int pressed, int *modifier, useconds_t delay) {\n  int ret = 0;\n  charcodemap_t *keys = NULL;\n  int nkeys = 0;\n\n  if (_xdo_send_keysequence_window_to_keycode_list(xdo, keyseq, &keys, &nkeys) == False) {\n    fprintf(stderr, \"Failure converting key sequence '%s' to keycodes\\n\", keyseq);\n    return 1;\n  }\n\n  ret = xdo_send_keysequence_window_list_do(xdo, window, keys, nkeys, pressed, modifier, delay);\n  free(keys);\n\n  return ret;\n}\n\nint xdo_send_keysequence_window_list_do(const xdo_t *xdo, Window window, charcodemap_t *keys, \n                            int nkeys, int pressed, int *modifier, useconds_t delay) {\n  int i = 0;\n  int modstate = 0;\n  int keymapchanged = 0;\n\n  /* Find an unused keycode in case we need to bind unmapped keysyms */\n  KeySym *keysyms = NULL;\n  int keysyms_per_keycode = 0;\n  int scratch_keycode = 0; /* Scratch space for temporary keycode bindings */\n  keysyms = XGetKeyboardMapping(xdo->xdpy, xdo->keycode_low,\n                                xdo->keycode_high - xdo->keycode_low,\n                                &keysyms_per_keycode);\n\n  /* Find a keycode that is unused for scratchspace */\n  for (i = xdo->keycode_low; i <= xdo->keycode_high; i++) {\n    int j = 0;\n    int key_is_empty = 1;\n    for (j = 0; j < keysyms_per_keycode; j++) {\n      /*char *symname;*/\n      int symindex = (i - xdo->keycode_low) * keysyms_per_keycode + j;\n      /*symname = XKeysymToString(keysyms[symindex]);*/\n      if (keysyms[symindex] != 0) {\n        key_is_empty = 0;\n      } else {\n        break;\n      }\n    }\n    if (key_is_empty) {\n      scratch_keycode = i;\n      break;\n    }\n  }\n  XFree(keysyms);\n\n  /* Allow passing NULL for modifier in case we don't care about knowing\n   * the modifier map state after we finish */\n  if (modifier == NULL)\n    modifier = &modstate;\n\n  for (i = 0; i < nkeys; i++) {\n    if (keys[i].needs_binding == 1) {\n      KeySym keysym_list[] = { keys[i].symbol };\n      _xdo_debug(xdo, \"Mapping sym %lu to %d\", keys[i].symbol, scratch_keycode);\n      XChangeKeyboardMapping(xdo->xdpy, scratch_keycode, 1, keysym_list, 1);\n      XSync(xdo->xdpy, False);\n      /* override the code in our current key to use the scratch_keycode */\n      keys[i].code = scratch_keycode;\n      keymapchanged = 1;\n    }\n\n    //fprintf(stderr, \"keyseqlist_do: Sending %lc %s (%d, mods %x)\\n\",\n            //keys[i].key, (pressed ? \"down\" : \"up\"), keys[i].code, *modifier);\n    _xdo_send_key(xdo, window, &(keys[i]), *modifier, pressed, delay);\n\n    if (keys[i].needs_binding == 1) {\n      /* If we needed to make a new keymapping for this keystroke, we\n       * should sync with the server now, after the keypress, so that\n       * the next mapping or removal doesn't conflict. */\n      XSync(xdo->xdpy, False);\n    }\n\n    if (pressed) {\n      *modifier |= keys[i].modmask;\n    } else {\n      *modifier &= ~(keys[i].modmask);\n    }\n  }\n\n\n  if (keymapchanged) {\n    KeySym keysym_list[] = { 0 };\n    _xdo_debug(xdo, \"Reverting scratch keycode (sym %lu to %d)\",\n              keys[i].symbol, scratch_keycode);\n    XChangeKeyboardMapping(xdo->xdpy, scratch_keycode, 1, keysym_list, 1);\n  }\n\n  /* Necessary? */\n  XFlush(xdo->xdpy);\n  return XDO_SUCCESS;\n}\n\n  \nint xdo_send_keysequence_window_down(const xdo_t *xdo, Window window, const char *keyseq,\n                         useconds_t delay) {\n  return _xdo_send_keysequence_window_do(xdo, window, keyseq, True, NULL, delay);\n}\n\nint xdo_send_keysequence_window_up(const xdo_t *xdo, Window window, const char *keyseq,\n                       useconds_t delay) {\n  return _xdo_send_keysequence_window_do(xdo, window, keyseq, False, NULL, delay);\n}\n\nint xdo_send_keysequence_window(const xdo_t *xdo, Window window, const char *keyseq,\n                    useconds_t delay) {\n  int ret = 0;\n  int modifier = 0;\n  ret += _xdo_send_keysequence_window_do(xdo, window, keyseq, True, &modifier, delay / 2);\n  ret += _xdo_send_keysequence_window_do(xdo, window, keyseq, False, &modifier, delay / 2);\n  return ret;\n}\n\n/* Add by Lee Pumphret 2007-07-28\n * Modified slightly by Jordan Sissel */\nint xdo_get_focused_window(const xdo_t *xdo, Window *window_ret) {\n  int ret = 0;\n  int unused_revert_ret;\n\n  ret = XGetInputFocus(xdo->xdpy, window_ret, &unused_revert_ret);\n\n  /* Xvfb with no window manager and given otherwise no input, with \n   * a single client, will return the current focused window as '1'\n   * I think this is a bug, so let's alert the user. */\n  if (*window_ret == 1) {\n    fprintf(stderr, \n            \"XGetInputFocus returned the focused window of %ld. \"\n            \"This is likely a bug in the X server.\\n\", *window_ret);\n  }\n  return _is_success(\"XGetInputFocus\", ret == 0, xdo);\n}\n\nint xdo_wait_for_window_focus(const xdo_t *xdo, Window window, int want_focus) {\n  Window focuswin = 0;\n  int ret;\n  int tries = MAX_TRIES;\n  ret = xdo_get_focused_window(xdo, &focuswin);\n  if (ret != 0) {\n    return ret;\n  }\n\n  while (tries > 0 && \n         (want_focus ? focuswin != window : focuswin == window)) {\n    usleep(30000); /* TODO(sissel): Use exponential backoff up to 1 second */\n    ret = xdo_get_focused_window(xdo, &focuswin);\n    if (ret != 0) {\n      return ret;\n    }\n    tries--;\n  }\n  return 0;\n}\n\n/* Like xdo_get_focused_window, but return the first ancestor-or-self window\n * having a property of WM_CLASS. This allows you to get the \"real\" or\n * top-level-ish window having focus rather than something you may\n * not expect to be the window having focused. */\nint xdo_get_focused_window_sane(const xdo_t *xdo, Window *window_ret) {\n  xdo_get_focused_window(xdo, window_ret);\n  xdo_find_window_client(xdo, *window_ret, window_ret, XDO_FIND_PARENTS);\n  return _is_success(\"xdo_get_focused_window_sane\", *window_ret == 0, xdo);\n}\n\nint xdo_find_window_client(const xdo_t *xdo, Window window, Window *window_ret,\n                           int direction) {\n  /* for XQueryTree */\n  Window dummy, parent, *children = NULL;\n  unsigned int nchildren;\n  Atom atom_wmstate = XInternAtom(xdo->xdpy, \"WM_STATE\", False);\n\n  int done = False;\n  while (!done) {\n    if (window == 0) {\n      return XDO_ERROR;\n    }\n\n    long items;\n    _xdo_debug(xdo, \"get_window_property on %lu\", window);\n    xdo_get_window_property_by_atom(xdo, window, atom_wmstate, &items, NULL, NULL);\n\n    if (items == 0) {\n      /* This window doesn't have WM_STATE property, keep searching. */\n      _xdo_debug(xdo, \"window %lu has no WM_STATE property, digging more.\", window);\n      XQueryTree(xdo->xdpy, window, &dummy, &parent, &children, &nchildren);\n\n      if (direction == XDO_FIND_PARENTS) {\n        _xdo_debug(xdo, \"searching parents\");\n        /* Don't care about the children, but we still need to free them */\n        if (children != NULL)\n          XFree(children);\n        window = parent;\n      } else if (direction == XDO_FIND_CHILDREN) {\n        _xdo_debug(xdo, \"searching %d children\", nchildren);\n        unsigned int i = 0;\n        int ret;\n        done = True; /* recursion should end us */\n        for (i = 0; i < nchildren; i++) {\n          ret = xdo_find_window_client(xdo, children[i], &window, direction);\n          //fprintf(stderr, \"findclient: %ld\\n\", window);\n          if (ret == XDO_SUCCESS) {\n            *window_ret = window;\n            break;\n          }\n        }\n        if (nchildren == 0) {\n          return XDO_ERROR;\n        }\n        if (children != NULL)\n          XFree(children);\n      } else {\n        fprintf(stderr, \"Invalid find_client direction (%d)\\n\", direction);\n        *window_ret = 0;\n        if (children != NULL)\n          XFree(children);\n        return XDO_ERROR;\n      }\n    } else {\n      *window_ret = window;\n      done = True;\n    }\n  }\n  return XDO_SUCCESS;\n}\n\n/* Helper functions */\nstatic KeySym _xdo_keysym_from_char(const xdo_t *xdo, wchar_t key) {\n  int i = 0;\n  int len = xdo->charcodes_len;\n\n  //printf(\"Finding symbol for key '%c'\\n\", key);\n  for (i = 0; i < len; i++) {\n    //printf(\"  => %c vs %c (%d)\\n\",\n           //key, xdo->charcodes[i].key, (xdo->charcodes[i].key == key));\n    if (xdo->charcodes[i].key == key) {\n      //printf(\"  => MATCH to symbol: %lu\\n\", xdo->charcodes[i].symbol);\n      return xdo->charcodes[i].symbol;\n    }\n  }\n\n  if (key >= 0x100) key += 0x01000000;\n  if (XKeysymToString(key)) return key;\n  return NoSymbol;\n}\n\nstatic void _xdo_charcodemap_from_char(const xdo_t *xdo, charcodemap_t *key) {\n  KeySym keysym = _xdo_keysym_from_char(xdo, key->key);\n  _xdo_charcodemap_from_keysym(xdo, key, keysym);\n\n  /* If the character is an uppercase character within the Basic Latin or Latin-1 code block,\n   * then sending the capital character keycode will not work.\n   * We have to also send the shift modifier.\n   * There are only three ranges of capital letters to worry about */\n  if ((key->key >= 0x41 && key->key <= 0x5A) || (key->key >= 0xC0 && key->key <= 0xD6) || (key->key >= 0xD8 && key->key <= 0xDE)) {\n    key->modmask = ShiftMask;\n  }\n}\n\nstatic void _xdo_charcodemap_from_keysym(const xdo_t *xdo, charcodemap_t *key, KeySym keysym) {\n  int i = 0;\n  int len = xdo->charcodes_len;\n\n  key->code = 0;\n  key->symbol = keysym;\n  key->group = 0;\n  key->modmask = 0;\n  key->needs_binding = 1;\n\n  for (i = 0; i < len; i++) {\n    if (xdo->charcodes[i].symbol == keysym) {\n      key->code = xdo->charcodes[i].code;\n      key->group = xdo->charcodes[i].group;\n      key->modmask = xdo->charcodes[i].modmask;\n      key->needs_binding = 0;\n      return;\n    }\n  }\n}\n\nstatic int _xdo_has_xtest(const xdo_t *xdo) {\n  int dummy;\n  return (XTestQueryExtension(xdo->xdpy, &dummy, &dummy, &dummy, &dummy) == True);\n}\n\nstatic void _xdo_populate_charcode_map(xdo_t *xdo) {\n  /* assert xdo->display is valid */\n  int keycodes_length = 0;\n  int idx = 0;\n  int keycode, group, groups, level, modmask, num_map;\n\n  XDisplayKeycodes(xdo->xdpy, &(xdo->keycode_low), &(xdo->keycode_high));\n  XModifierKeymap *modmap = XGetModifierMapping(xdo->xdpy);\n  KeySym *keysyms = XGetKeyboardMapping(xdo->xdpy, xdo->keycode_low,\n                                        xdo->keycode_high - xdo->keycode_low + 1,\n                                        &xdo->keysyms_per_keycode);\n  XFree(keysyms);\n\n  /* Add 2 to the size because the range [low, high] is inclusive */\n  /* Add 2 more for tab (\\t) and newline (\\n) */\n  keycodes_length = ((xdo->keycode_high - xdo->keycode_low) + 1)\n                     * xdo->keysyms_per_keycode;\n\n  xdo->charcodes = calloc(keycodes_length, sizeof(charcodemap_t));\n  XkbDescPtr desc = XkbGetMap(xdo->xdpy, XkbAllClientInfoMask, XkbUseCoreKbd);\n\n  for (keycode = xdo->keycode_low; keycode <= xdo->keycode_high; keycode++) {\n    groups = XkbKeyNumGroups(desc, keycode);\n    for (group = 0; group < groups; group++) {\n      XkbKeyTypePtr key_type = XkbKeyKeyType(desc, keycode, group);\n      for (level = 0; level < key_type->num_levels; level++) {\n        KeySym keysym = XkbKeycodeToKeysym(xdo->xdpy, keycode, group, level);\n        modmask = 0;\n\n        for (num_map = 0; num_map < key_type->map_count; num_map++) {\n          XkbKTMapEntryRec map = key_type->map[num_map];\n          if (map.active && map.level == level) {\n            modmask = map.mods.mask;\n            break;\n          }\n        }\n\n        xdo->charcodes[idx].key = _keysym_to_char(keysym);\n        xdo->charcodes[idx].code = keycode;\n        xdo->charcodes[idx].group = group;\n        xdo->charcodes[idx].modmask = modmask | _xdo_query_keycode_to_modifier(modmap, keycode);\n        xdo->charcodes[idx].symbol = keysym;\n\n        idx++;\n      }\n    }\n  }\n  xdo->charcodes_len = idx;\n  XkbFreeKeyboard(desc, 0, 1);\n  XFreeModifiermap(modmap);\n}\n\n/* context-free functions */\nwchar_t _keysym_to_char(KeySym keysym) {\n  return (wchar_t)xkb_keysym_to_utf32(keysym);\n}\n\nint _xdo_send_keysequence_window_to_keycode_list(const xdo_t *xdo, const char *keyseq,\n                                     charcodemap_t **keys, int *nkeys) {\n  char *tokctx = NULL;\n  const char *tok = NULL;\n  char *keyseq_copy = NULL, *strptr = NULL;\n  int i = 0;\n\n  /* Array of keys to press, in order given by keyseq */\n  int keys_size = 10;\n\n  if (strcspn(keyseq, \" \\t\\n.-[]{}\\\\|\") != strlen(keyseq)) {\n    fprintf(stderr, \"Error: Invalid key sequence '%s'\\n\", keyseq);\n    return False;\n  }\n\n  *nkeys = 0;\n  *keys = calloc(keys_size, sizeof(charcodemap_t));\n  keyseq_copy = strptr = strdup(keyseq);\n  while ((tok = strtok_r(strptr, \"+\", &tokctx)) != NULL) {\n    KeySym sym;\n    KeyCode key;\n\n    if (strptr != NULL)\n      strptr = NULL;\n\n    /* Check if 'tok' (string keysym) is an alias to another key */\n    /* symbol_map comes from xdo.util */\n    for (i = 0; symbol_map[i] != NULL; i+=2)\n      if (!strcasecmp(tok, symbol_map[i]))\n        tok = symbol_map[i + 1];\n\n    sym = XStringToKeysym(tok);\n    if (sym == NoSymbol) {\n      /* Accept a number as a explicit keycode */\n      if (isdigit(tok[0])) {\n        key = (unsigned int) atoi(tok);\n      } else {\n        fprintf(stderr, \"(symbol) No such key name '%s'. Ignoring it.\\n\", tok);\n        continue;\n      }\n      (*keys)[*nkeys].code = key;\n      (*keys)[*nkeys].symbol = sym;\n      (*keys)[*nkeys].group = 0;\n      (*keys)[*nkeys].modmask = 0;\n      (*keys)[*nkeys].needs_binding = 0;\n      if (key == 0) {\n        //fprintf(stderr, \"No such key '%s'. Ignoring it.\\n\", tok);\n        (*keys)[*nkeys].needs_binding = 1;\n      }\n    } else {\n      _xdo_charcodemap_from_keysym(xdo, &(*keys)[*nkeys], sym);\n    }\n\n    (*nkeys)++;\n    if (*nkeys == keys_size) {\n      keys_size *= 2;\n      *keys = realloc(*keys, keys_size * sizeof(KeyCode));\n    }\n  }\n\n  free(keyseq_copy);\n  return True;\n}\n\nint _is_success(const char *funcname, int code, const xdo_t *xdo) {\n  /* Nonzero is failure. */\n  if (code != 0 && !xdo->quiet)\n    fprintf(stderr, \"%s failed (code=%d)\\n\", funcname, code);\n  return code;\n}\n\nint xdo_get_window_property(const xdo_t *xdo, Window window, const char *property,\n                            unsigned char **value, long *nitems, Atom *type, int *size) {\n    *value = xdo_get_window_property_by_atom(xdo, window, XInternAtom(xdo->xdpy, property, False), nitems, type, size);\n    if (*value == NULL) {\n        return XDO_ERROR;\n    }\n    return XDO_SUCCESS;\n}\n\n/* Arbitrary window property retrieval\n * slightly modified version from xprop.c from Xorg */\nunsigned char *xdo_get_window_property_by_atom(const xdo_t *xdo, Window window, Atom atom,\n                                            long *nitems, Atom *type, int *size) {\n  Atom actual_type;\n  int actual_format;\n  unsigned long _nitems;\n  /*unsigned long nbytes;*/\n  unsigned long bytes_after; /* unused */\n  unsigned char *prop;\n  int status;\n\n  status = XGetWindowProperty(xdo->xdpy, window, atom, 0, (~0L),\n                              False, AnyPropertyType, &actual_type,\n                              &actual_format, &_nitems, &bytes_after,\n                              &prop);\n  if (status == BadWindow) {\n    fprintf(stderr, \"window id # 0x%lx does not exists!\", window);\n    return NULL;\n  } if (status != Success) {\n    fprintf(stderr, \"XGetWindowProperty failed!\");\n    return NULL;\n  }\n\n  /*\n   *if (actual_format == 32)\n   *  nbytes = sizeof(long);\n   *else if (actual_format == 16)\n   *  nbytes = sizeof(short);\n   *else if (actual_format == 8)\n   *  nbytes = 1;\n   *else if (actual_format == 0)\n   *  nbytes = 0;\n   */\n\n  if (nitems != NULL) {\n    *nitems = _nitems;\n  }\n\n  if (type != NULL) {\n    *type = actual_type;\n  }\n\n  if (size != NULL) {\n    *size = actual_format;\n  }\n  return prop;\n}\n\nint _xdo_ewmh_is_supported(const xdo_t *xdo, const char *feature) {\n  Atom type = 0;\n  long nitems = 0L;\n  int size = 0;\n  Atom *results = NULL;\n  long i = 0;\n\n  Window root;\n  Atom request;\n  Atom feature_atom;\n\n  request = XInternAtom(xdo->xdpy, \"_NET_SUPPORTED\", False);\n  feature_atom = XInternAtom(xdo->xdpy, feature, False);\n  root = XDefaultRootWindow(xdo->xdpy);\n\n  results = (Atom *) xdo_get_window_property_by_atom(xdo, root, request, &nitems, &type, &size);\n  for (i = 0L; i < nitems; i++) {\n    if (results[i] == feature_atom) {\n      free(results);\n      return True;\n    }\n  }\n  free(results);\n\n  return False;\n}\n\nvoid _xdo_init_xkeyevent(const xdo_t *xdo, XKeyEvent *xk) {\n  xk->display = xdo->xdpy;\n  xk->subwindow = None;\n  xk->time = CurrentTime;\n  xk->same_screen = True;\n\n  /* Should we set these at all? */\n  xk->x = xk->y = xk->x_root = xk->y_root = 1;\n}\n\nvoid _xdo_send_key(const xdo_t *xdo, Window window, charcodemap_t *key,\n                          int modstate, int is_press, useconds_t delay) {\n  /* Properly ensure the modstate is set by finding a key\n   * that activates each bit in the modifier state */\n  int mask = modstate | key->modmask;\n  int use_xtest = 0;\n\n  if (window == CURRENTWINDOW) {\n    use_xtest = 1;\n  } else {\n    Window focuswin = 0;\n    xdo_get_focused_window(xdo, &focuswin);\n    if (focuswin == window) {\n      use_xtest = 1;\n    }\n  }\n  if (use_xtest) {\n    //printf(\"XTEST: Sending key %d %s\\n\", key->code, is_press ? \"down\" : \"up\");\n    XkbStateRec state;\n    XkbGetState(xdo->xdpy, XkbUseCoreKbd, &state);\n    int current_group = state.group;\n    XkbLockGroup(xdo->xdpy, XkbUseCoreKbd, key->group);\n    if (mask)\n      _xdo_send_modifier(xdo, mask, is_press);\n    //printf(\"XTEST: Sending key %d %s %x %d\\n\", key->code, is_press ? \"down\" : \"up\", key->modmask, key->group);\n    XTestFakeKeyEvent(xdo->xdpy, key->code, is_press, CurrentTime);\n    XkbLockGroup(xdo->xdpy, XkbUseCoreKbd, current_group);\n    XSync(xdo->xdpy, False);\n  } else {\n    /* Since key events have 'state' (shift, etc) in the event, we don't\n     * need to worry about key press ordering. */\n    XKeyEvent xk;\n    _xdo_init_xkeyevent(xdo, &xk);\n    xk.window = window;\n    xk.keycode = key->code;\n    xk.state = mask | (key->group << 13);\n    xk.type = (is_press ? KeyPress : KeyRelease);\n    XSendEvent(xdo->xdpy, xk.window, True, KeyPressMask, (XEvent *)&xk);\n  }\n\n  /* Skipping the usleep if delay is 0 is much faster than calling usleep(0) */\n  XFlush(xdo->xdpy);\n  if (delay > 0) {\n    usleep(delay);\n  }\n}\n\nint _xdo_query_keycode_to_modifier(XModifierKeymap *modmap, KeyCode keycode) {\n  int i = 0, j = 0;\n  int max = modmap->max_keypermod;\n\n  for (i = 0; i < 8; i++) { /* 8 modifier types, per XGetModifierMapping(3X) */\n    for (j = 0; j < max && modmap->modifiermap[(i * max) + j]; j++) {\n      if (keycode == modmap->modifiermap[(i * max) + j]) {\n        switch (i) {\n          case ShiftMapIndex: return ShiftMask; break;\n          case LockMapIndex: return LockMask; break;\n          case ControlMapIndex: return ControlMask; break;\n          case Mod1MapIndex: return Mod1Mask; break;\n          case Mod2MapIndex: return Mod2Mask; break;\n          case Mod3MapIndex: return Mod3Mask; break;\n          case Mod4MapIndex: return Mod4Mask; break;\n          case Mod5MapIndex: return Mod5Mask; break;\n        }\n      } /* end if */\n    } /* end loop j */\n  } /* end loop i */\n\n  /* No modifier found for this keycode, return no mask */\n  return 0;\n}\n\nvoid _xdo_send_modifier(const xdo_t *xdo, int modmask, int is_press) {\n  XModifierKeymap *modifiers = XGetModifierMapping(xdo->xdpy);\n  int mod_index, mod_key, keycode;\n\n  for (mod_index = ShiftMapIndex; mod_index <= Mod5MapIndex; mod_index++) {\n    if (modmask & (1 << mod_index)) {\n      for (mod_key = 0; mod_key < modifiers->max_keypermod; mod_key++) {\n        keycode = modifiers->modifiermap[mod_index * modifiers->max_keypermod + mod_key];\n        if (keycode) {\n          XTestFakeKeyEvent(xdo->xdpy, keycode, is_press, CurrentTime);\n          XSync(xdo->xdpy, False);\n          break;\n        }\n      }\n    }\n  }\n\n  XFreeModifiermap(modifiers);\n}\n\nint xdo_get_active_modifiers(const xdo_t *xdo, charcodemap_t **keys,\n                                    int *nkeys) {\n  /* For each keyboard device, if an active key is a modifier,\n   * then add the keycode to the keycode list */\n\n  char keymap[32]; /* keycode map: 256 bits */\n  int keys_size = 10;\n  int keycode = 0;\n  int mod_index, mod_key;\n  XModifierKeymap *modifiers = XGetModifierMapping(xdo->xdpy);\n  *nkeys = 0;\n  *keys = malloc(keys_size * sizeof(charcodemap_t));\n\n  XQueryKeymap(xdo->xdpy, keymap);\n\n  for (mod_index = ShiftMapIndex; mod_index <= Mod5MapIndex; mod_index++) {\n    for (mod_key = 0; mod_key < modifiers->max_keypermod; mod_key++) {\n      keycode = modifiers->modifiermap[mod_index * modifiers->max_keypermod + mod_key];\n      if (keycode && keymap[(keycode / 8)] & (1 << (keycode % 8))) {\n        /* This keycode is active and is a modifier, record it. */\n\n        /* Zero the charcodemap_t entry before using it.\n         * Fixes a bug reported by Hong-Leong Ong - where\n         * 'xdotool key --clearmodifiers ...' sometimes failed trying\n         * to clear modifiers that didn't exist since charcodemap_t's modmask was\n         * uninitialized */\n        memset(*keys + *nkeys, 0, sizeof(charcodemap_t));\n\n        (*keys)[*nkeys].code = keycode;\n        (*nkeys)++;\n\n        if (*nkeys == keys_size) {\n          keys_size *= 2;\n          *keys = realloc(keys, keys_size * sizeof(charcodemap_t));\n        }\n      }\n    }\n  } \n\n  XFreeModifiermap(modifiers);\n\n  return XDO_SUCCESS;\n}\n\nunsigned int xdo_get_input_state(const xdo_t *xdo) {\n  Window root, dummy;\n  int root_x, root_y, win_x, win_y;\n  unsigned int mask;\n  root = DefaultRootWindow(xdo->xdpy);\n\n  XQueryPointer(xdo->xdpy, root, &dummy, &dummy,\n                &root_x, &root_y, &win_x, &win_y, &mask);\n\n  return mask;\n}\n\nconst char **xdo_get_symbol_map(void) {\n  return symbol_map;\n}\n\nint xdo_clear_active_modifiers(const xdo_t *xdo, Window window, charcodemap_t *active_mods, int active_mods_n) {\n  int ret = 0;\n  unsigned int input_state = xdo_get_input_state(xdo);\n  xdo_send_keysequence_window_list_do(xdo, window, active_mods,\n                          active_mods_n, False, NULL, DEFAULT_DELAY);\n\n  if (input_state & Button1MotionMask)\n    ret = xdo_mouse_up(xdo, window, 1);\n  if (!ret && input_state & Button2MotionMask)\n    ret = xdo_mouse_up(xdo, window, 2);\n  if (!ret && input_state & Button3MotionMask)\n    ret = xdo_mouse_up(xdo, window, 3);\n  if (!ret && input_state & Button4MotionMask)\n    ret = xdo_mouse_up(xdo, window, 4);\n  if (!ret && input_state & Button5MotionMask)\n    ret = xdo_mouse_up(xdo, window, 5);\n  if (!ret && input_state & LockMask) {\n    /* explicitly use down+up here since xdo_send_keysequence_window alone will track the modifiers\n     * incurred by a key (like shift, or caps) and send them on the 'up' sequence.\n     * That seems to break things with Caps_Lock only, so let's be explicit here. */\n    ret = xdo_send_keysequence_window_down(xdo, window, \"Caps_Lock\", DEFAULT_DELAY);\n    ret += xdo_send_keysequence_window_up(xdo, window, \"Caps_Lock\", DEFAULT_DELAY);\n  }\n\n  XSync(xdo->xdpy, False);\n  return ret;\n}\n\nint xdo_set_active_modifiers(const xdo_t *xdo, Window window, charcodemap_t *active_mods, int active_mods_n) {\n  int ret = 0;\n  unsigned int input_state = xdo_get_input_state(xdo);\n  xdo_send_keysequence_window_list_do(xdo, window, active_mods,\n                          active_mods_n, True, NULL, DEFAULT_DELAY);\n  if (input_state & Button1MotionMask)\n    ret = xdo_mouse_down(xdo, window, 1);\n  if (!ret && input_state & Button2MotionMask)\n    ret = xdo_mouse_down(xdo, window, 2);\n  if (!ret && input_state & Button3MotionMask)\n    ret = xdo_mouse_down(xdo, window, 3);\n  if (!ret && input_state & Button4MotionMask)\n    ret = xdo_mouse_down(xdo, window, 4);\n  if (!ret && input_state & Button5MotionMask)\n    ret = xdo_mouse_down(xdo, window, 5);\n  if (!ret && input_state & LockMask) {\n    /* explicitly use down+up here since xdo_send_keysequence_window alone will track the modifiers\n     * incurred by a key (like shift, or caps) and send them on the 'up' sequence.\n     * That seems to break things with Caps_Lock only, so let's be explicit here. */\n    ret = xdo_send_keysequence_window_down(xdo, window, \"Caps_Lock\", DEFAULT_DELAY);\n    ret += xdo_send_keysequence_window_up(xdo, window, \"Caps_Lock\", DEFAULT_DELAY);\n  }\n\n  XSync(xdo->xdpy, False);\n  return ret;\n}\n\nint xdo_get_pid_window(const xdo_t *xdo, Window window) {\n  Atom type;\n  int size;\n  long nitems;\n  unsigned char *data;\n  int window_pid = 0;\n\n  if (atom_NET_WM_PID == (Atom)-1) {\n    atom_NET_WM_PID = XInternAtom(xdo->xdpy, \"_NET_WM_PID\", False);\n  }\n\n  data = xdo_get_window_property_by_atom(xdo, window, atom_NET_WM_PID, &nitems, &type, &size);\n\n  if (nitems > 0) {\n    /* The data itself is unsigned long, but everyone uses int as pid values */\n    window_pid = (int) *((unsigned long *)data);\n  }\n  free(data);\n\n  return window_pid;\n}\n\nint xdo_wait_for_mouse_move_from(const xdo_t *xdo, int origin_x, int origin_y) {\n  int x, y;\n  int ret = 0;\n  int tries = MAX_TRIES;\n\n  ret = xdo_get_mouse_location(xdo, &x, &y, NULL);\n  while (tries > 0 && \n         (x == origin_x && y == origin_y)) {\n    usleep(30000);\n    ret = xdo_get_mouse_location(xdo, &x, &y, NULL);\n    tries--;\n  }\n\n  return ret;\n}\n\nint xdo_wait_for_mouse_move_to(const xdo_t *xdo, int dest_x, int dest_y) {\n  int x, y;\n  int ret = 0;\n  int tries = MAX_TRIES;\n\n  ret = xdo_get_mouse_location(xdo, &x, &y, NULL);\n  while (tries > 0 && (x != dest_x && y != dest_y)) {\n    usleep(30000);\n    ret = xdo_get_mouse_location(xdo, &x, &y, NULL);\n    tries--;\n  }\n\n  return ret;\n}\n\nint xdo_get_desktop_viewport(const xdo_t *xdo, int *x_ret, int *y_ret) {\n  if (_xdo_ewmh_is_supported(xdo, \"_NET_DESKTOP_VIEWPORT\") == False) {\n    fprintf(stderr,\n            \"Your windowmanager claims not to support _NET_DESKTOP_VIEWPORT, \"\n            \"so I cannot tell you the viewport position.\\n\");\n    return XDO_ERROR;\n  }\n\n  Atom type;\n  int size;\n  long nitems;\n  unsigned char *data;\n  Atom request = XInternAtom(xdo->xdpy, \"_NET_DESKTOP_VIEWPORT\", False);\n  Window root = RootWindow(xdo->xdpy, 0);\n  data = xdo_get_window_property_by_atom(xdo, root, request, &nitems, &type, &size);\n\n  if (type != XA_CARDINAL) {\n    fprintf(stderr, \n            \"Got unexpected type returned from _NET_DESKTOP_VIEWPORT.\"\n            \" Expected CARDINAL, got %s\\n\",\n            XGetAtomName(xdo->xdpy, type));\n    free(data);\n    return XDO_ERROR;\n  }\n\n  if (nitems != 2) {\n    fprintf(stderr, \"Expected 2 items for _NET_DESKTOP_VIEWPORT, got %ld\\n\",\n            nitems);\n    free(data);\n    return XDO_ERROR;\n  }\n\n  int *viewport_data = (int *)data;\n  *x_ret = viewport_data[0];\n  *y_ret = viewport_data[1];\n  free(data);\n\n  return XDO_SUCCESS;\n}\n\nint xdo_set_desktop_viewport(const xdo_t *xdo, int x, int y) {\n  XEvent xev;\n  int ret;\n  Window root = RootWindow(xdo->xdpy, 0);\n\n  memset(&xev, 0, sizeof(xev));\n  xev.type = ClientMessage;\n  xev.xclient.display = xdo->xdpy;\n  xev.xclient.window = root;\n  xev.xclient.message_type = XInternAtom(xdo->xdpy, \"_NET_DESKTOP_VIEWPORT\",\n                                         False);\n  xev.xclient.format = 32;\n  xev.xclient.data.l[0] = x;\n  xev.xclient.data.l[1] = y;\n\n  ret = XSendEvent(xdo->xdpy, root, False,\n                   SubstructureNotifyMask | SubstructureRedirectMask, &xev);\n\n  /* XXX: XSendEvent returns 0 on conversion failure, nonzero otherwise.\n   * Manpage says it will only generate BadWindow or BadValue errors */\n  return _is_success(\"XSendEvent[EWMH:_NET_DESKTOP_VIEWPORT]\", ret == 0, xdo);\n}\n\nint xdo_kill_window(const xdo_t *xdo, Window window) {\n  int ret;\n  ret = XKillClient(xdo->xdpy, window);\n  return _is_success(\"XKillClient\", ret == 0, xdo);\n}\n\nint xdo_close_window(const xdo_t *xdo, Window window) {\n  int ret;\n  ret = XDestroyWindow(xdo->xdpy, window);\n  return _is_success(\"XDestroyWindow\", ret == 0, xdo);\n}\n\nint xdo_quit_window(const xdo_t *xdo, Window window) {\n  XEvent xev;\n  int ret;\n  Window root = RootWindow(xdo->xdpy, 0);\n\n  memset(&xev, 0, sizeof(xev));\n  xev.type = ClientMessage;\n  xev.xclient.serial = 0;\n  xev.xclient.send_event = True;\n  xev.xclient.display = xdo->xdpy;\n  xev.xclient.window = window;\n  xev.xclient.message_type = XInternAtom(xdo->xdpy, \"_NET_CLOSE_WINDOW\", False);\n  xev.xclient.format = 32;\n\n  ret = XSendEvent(xdo->xdpy, root, False,\n                   SubstructureNotifyMask | SubstructureRedirectMask,\n                   &xev);\n\n  /* XXX: XSendEvent returns 0 on conversion failure, nonzero otherwise.\n   * Manpage says it will only generate BadWindow or BadValue errors */\n  return _is_success(\"XSendEvent[_NET_CLOSE_WINDOW]\", ret == 0, xdo);\n}\n\nint xdo_get_window_name(const xdo_t *xdo, Window window, \n                        unsigned char **name_ret, int *name_len_ret,\n                        int *name_type) {\n  if (atom_NET_WM_NAME == (Atom)-1) {\n    atom_NET_WM_NAME = XInternAtom(xdo->xdpy, \"_NET_WM_NAME\", False);\n  } \n  if (atom_WM_NAME == (Atom)-1) {\n    atom_WM_NAME = XInternAtom(xdo->xdpy, \"WM_NAME\", False);\n  }\n  if (atom_STRING == (Atom)-1) {\n    atom_STRING = XInternAtom(xdo->xdpy, \"STRING\", False);\n  }\n  if (atom_UTF8_STRING == (Atom)-1) {\n    atom_UTF8_STRING = XInternAtom(xdo->xdpy, \"UTF8_STRING\", False);\n  }\n\n  Atom type;\n  int size;\n  long nitems;\n\n  /**\n   * http://standards.freedesktop.org/wm-spec/1.3/ar01s05.html\n   * Prefer _NET_WM_NAME if available, otherwise use WM_NAME\n   * If no WM_NAME, set name_ret to NULL and set len to 0\n   */\n\n  *name_ret = xdo_get_window_property_by_atom(xdo, window, atom_NET_WM_NAME, &nitems,\n                             &type, &size);\n  if (nitems == 0) {\n    *name_ret = xdo_get_window_property_by_atom(xdo, window, atom_WM_NAME, &nitems,\n                               &type, &size);\n  }\n  *name_len_ret = nitems;\n  *name_type = type;\n\n  return 0;\n}\n\nint xdo_get_window_classname(const xdo_t *xdo, Window window, unsigned char **class_ret) {\n  XClassHint classhint;\n  Status ret = XGetClassHint(xdo->xdpy, window, &classhint);\n\n  if (ret) {\n    XFree(classhint.res_name);\n    *class_ret = (unsigned char*) classhint.res_class;\n  } else {\n    *class_ret = NULL;\n  }\n  return _is_success(\"XGetClassHint[WM_CLASS]\", ret == 0, xdo);\n}\n\nint xdo_window_state(xdo_t *xdo, Window window, unsigned long action, const char *property) {\n  int ret;\n  XEvent xev;\n  Window root = RootWindow(xdo->xdpy, 0);\n\n  memset(&xev, 0, sizeof(xev));\n  xev.xclient.type = ClientMessage;\n  xev.xclient.serial = 0;\n  xev.xclient.send_event = True;\n  xev.xclient.message_type = XInternAtom(xdo->xdpy, \"_NET_WM_STATE\", False);\n  xev.xclient.window = window;\n  xev.xclient.format = 32;\n  xev.xclient.data.l[0] = action;\n  xev.xclient.data.l[1] = XInternAtom(xdo->xdpy, property, False);\n\n  ret = XSendEvent(xdo->xdpy, root, False,\n                   SubstructureNotifyMask | SubstructureRedirectMask, &xev);\n  return _is_success(\"XSendEvent[EWMH:_NET_WM_STATE]\", ret == 0, xdo);\n}\n\nint xdo_minimize_window(const xdo_t *xdo, Window window) {\n  int ret;\n  int screen;\n\n  /* Get screen number */\n  XWindowAttributes attr;\n  XGetWindowAttributes(xdo->xdpy, window, &attr);\n  screen = XScreenNumberOfScreen(attr.screen);\n\n  /* Minimize it */\n  ret = XIconifyWindow(xdo->xdpy, window, screen);\n  return _is_success(\"XIconifyWindow\", ret == 0, xdo);\n}\n\nvoid _xdo_debug(const xdo_t *xdo, const char *format, ...) {\n  va_list args;\n\n  va_start(args, format);\n  if (xdo->debug) {\n    vfprintf(stderr, format, args);\n    fprintf(stderr, \"\\n\");\n  }\n  va_end(args);\n} /* _xdo_debug */\n\n/* Used for printing things conditionally based on xdo->quiet */\nvoid _xdo_eprintf(const xdo_t *xdo, int hushable, const char *format, ...) {\n  va_list args;\n\n  va_start(args, format);\n  if (xdo->quiet == True && hushable) {\n    return;\n  }\n\n  vfprintf(stderr, format, args);\n  fprintf(stderr, \"\\n\");\n  va_end(args);\n} /* _xdo_eprintf */\n\nvoid xdo_enable_feature(xdo_t *xdo, int feature) {\n  xdo->features_mask |= (0 << feature);\n}\n\nvoid xdo_disable_feature(xdo_t *xdo, int feature) {\n  xdo->features_mask &= ~(1 << feature);\n}\n\nint xdo_has_feature(xdo_t *xdo, int feature) {\n  return (xdo->features_mask & (1 << feature));\n}\n\nint xdo_get_viewport_dimensions(xdo_t *xdo, unsigned int *width,\n                                unsigned int *height, int screen) {\n  int dummy;\n\n  if (XineramaQueryExtension(xdo->xdpy, &dummy, &dummy) \\\n      && XineramaIsActive(xdo->xdpy)) {\n    XineramaScreenInfo *info;\n    int screens;\n\n    info = XineramaQueryScreens(xdo->xdpy, &screens);\n    if (screen < 0 || screen >= screens) {\n      fprintf(stderr, \"Invalid screen number %d outside range 0 - %d\\n\",\n              screen, screens - 1);\n      return XDO_ERROR;\n    }\n    *width = (unsigned int) info[screen].width;\n    *height = (unsigned int) info[screen].height;\n    XFree(info);\n    return XDO_SUCCESS;\n  } else {\n    /* Use the root window size if no zinerama */\n    Window root = RootWindow(xdo->xdpy, screen);\n    return xdo_get_window_size(xdo, root, width, height);\n  }\n}\n"
        },
        {
          "name": "xdo.h",
          "type": "blob",
          "size": 28.2412109375,
          "content": "/**\n * @file xdo.h\n */\n#ifndef _XDO_H_\n#define _XDO_H_\n\n#ifndef __USE_XOPEN\n#define __USE_XOPEN\n#endif /* __USE_XOPEN */\n\n#include <sys/types.h>\n#include <X11/Xlib.h>\n#include <X11/X.h>\n#include <unistd.h>\n#include <wchar.h>\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/**\n * @mainpage\n *\n * libxdo helps you send fake mouse and keyboard input, search for windows,\n * perform various window management tasks such as desktop changes, window\n * movement, etc.\n *\n * For examples on libxdo usage, the xdotool source code is a good reference.\n *\n * @see xdo.h\n * @see xdo_new\n */\n\n/**\n * When issuing a window size change, giving this flag will make the size\n * change be relative to the size hints of the window.  For terminals, this\n * generally means that the window size will be relative to the font size,\n * allowing you to change window sizes based on character rows and columns\n * instead of pixels.\n */\n#define SIZE_USEHINTS (1L << 0)\n#define SIZE_USEHINTS_X (1L << 1)\n#define SIZE_USEHINTS_Y (1L << 2)\n\n/**\n * CURRENTWINDOW is a special identify for xdo input faking (mouse and\n * keyboard) functions like xdo_send_keysequence_window that indicate we should target the\n * current window, not a specific window.\n *\n * Generally, this means we will use XTEST instead of XSendEvent when sending\n * events.\n */\n#define CURRENTWINDOW (0)\n\n/**\n * @internal\n * Map character to whatever information we need to be able to send\n * this key (keycode, modifiers, group, etc)\n */\ntypedef struct charcodemap {\n  wchar_t key; /** the letter for this key, like 'a' */\n  KeyCode code; /** the keycode that this key is on */\n  KeySym symbol; /** the symbol representing this key */\n  int group; /** the keyboard group that has this key in it */\n  int modmask; /** the modifiers to apply when sending this key */\n   /** if this key need to be bound at runtime because it does not\n    * exist in the current keymap, this will be set to 1. */\n  int needs_binding;\n} charcodemap_t;\n\ntypedef enum {\n  XDO_FEATURE_XTEST, /** Is XTest available? */\n} XDO_FEATURES;\n\n/**\n * The main context.\n */\ntypedef struct xdo {\n\n  /** The Display for Xlib */\n  Display *xdpy;\n\n  /** The display name, if any. NULL if not specified. */\n  char *display_name;\n\n  /** @internal Array of known keys/characters */\n  charcodemap_t *charcodes;\n\n  /** @internal Length of charcodes array */\n  int charcodes_len;\n\n  /** @internal highest keycode value */\n  int keycode_high; /* highest and lowest keycodes */\n\n  /** @internal lowest keycode value */\n  int keycode_low;  /* used by this X server */\n  \n  /** @internal number of keysyms per keycode */\n  int keysyms_per_keycode;\n\n  /** Should we close the display when calling xdo_free? */\n  int close_display_when_freed;\n\n  /** Be extra quiet? (omits some error/message output) */\n  int quiet;\n\n  /** Enable debug output? */\n  int debug;\n\n  /** Feature flags, such as XDO_FEATURE_XTEST, etc... */\n  int features_mask;\n\n} xdo_t;\n\n\n/**\n * Search only window title. DEPRECATED - Use SEARCH_NAME\n * @see xdo_search_windows\n */\n#define SEARCH_TITLE (1UL << 0)\n\n/**\n * Search only window class.\n * @see xdo_search_windows\n */\n#define SEARCH_CLASS (1UL << 1)\n\n/**\n * Search only window name.\n * @see xdo_search_windows\n */\n#define SEARCH_NAME (1UL << 2)\n\n/**\n * Search only window pid.\n * @see xdo_search_windows\n */\n#define SEARCH_PID  (1UL << 3)\n\n/**\n * Search only visible windows.\n * @see xdo_search_windows\n */\n#define SEARCH_ONLYVISIBLE  (1UL << 4)\n\n/**\n * Search only a specific screen. \n * @see xdo_search.screen\n * @see xdo_search_windows\n */\n#define SEARCH_SCREEN  (1UL << 5)\n\n/**\n * Search only window class name.\n * @see xdo_search\n */\n#define SEARCH_CLASSNAME (1UL << 6)\n\n/**\n * Search a specific desktop\n * @see xdo_search.screen\n * @see xdo_search_windows\n */\n#define SEARCH_DESKTOP (1UL << 7)\n\n/**\n * Search only window role.\n * @see xdo_search\n */\n#define SEARCH_ROLE (1UL << 8)\n\n/**\n * The window search query structure.\n *\n * @see xdo_search_windows\n */\ntypedef struct xdo_search {\n  const char *title;        /** pattern to test against a window title */\n  const char *winclass;     /** pattern to test against a window class */\n  const char *winclassname; /** pattern to test against a window class */\n  const char *winname;      /** pattern to test against a window name */\n  const char *winrole;      /** pattern to test against a window role */\n  int pid;            /** window pid (From window atom _NET_WM_PID) */\n  long max_depth;     /** depth of search. 1 means only toplevel windows */\n  int only_visible;   /** boolean; set true to search only visible windows */\n  int screen;         /** what screen to search, if any. If none given, search \n                         all screens */\n\n  /** Should the tests be 'and' or 'or' ? If 'and', any failure will skip the\n   * window. If 'or', any success will keep the window in search results. */\n  enum { SEARCH_ANY, SEARCH_ALL } require;\n  \n  /** bitmask of things you are searching for, such as SEARCH_NAME, etc.\n   * @see SEARCH_NAME, SEARCH_CLASS, SEARCH_PID, SEARCH_CLASSNAME, etc\n   */\n  unsigned int searchmask; \n\n  /** What desktop to search, if any. If none given, search all screens. */\n  long desktop;\n\n  /** How many results to return? If 0, return all. */\n  unsigned int limit;\n} xdo_search_t;\n\n#define XDO_ERROR 1\n#define XDO_SUCCESS 0\n\n/**\n * Create a new xdo_t instance.\n *\n * @param display the string display name, such as \":0\". If null, uses the\n * environment variable DISPLAY just like XOpenDisplay(NULL).\n *\n * @return Pointer to a new xdo_t or NULL on failure\n */\nxdo_t* xdo_new(const char *display);\n\n/**\n * Create a new xdo_t instance with an existing X11 Display instance.\n *\n * @param xdpy the Display pointer given by a previous XOpenDisplay()\n * @param display the string display name\n * @param close_display_when_freed If true, we will close the display when\n * xdo_free is called. Otherwise, we leave it open.\n */\nxdo_t* xdo_new_with_opened_display(Display *xdpy, const char *display,\n                                   int close_display_when_freed);\n\n/**\n * Return a string representing the version of this library\n */\nconst char *xdo_version(void);\n\n/**\n * Free and destroy an xdo_t instance.\n *\n * If close_display_when_freed is set, then we will also close the Display.\n */\nvoid xdo_free(xdo_t *xdo);\n\n/**\n * Move the mouse to a specific location.\n *\n * @param x the target X coordinate on the screen in pixels.\n * @param y the target Y coordinate on the screen in pixels.\n * @param screen the screen (number) you want to move on.\n */\nint xdo_move_mouse(const xdo_t *xdo, int x, int y, int screen);\n\n/**\n * Move the mouse to a specific location relative to the top-left corner\n * of a window.\n *\n * @param x the target X coordinate on the screen in pixels.\n * @param y the target Y coordinate on the screen in pixels.\n */\nint xdo_move_mouse_relative_to_window(const xdo_t *xdo, Window window, int x, int y);\n\n/**\n * Move the mouse relative to it's current position.\n *\n * @param x the distance in pixels to move on the X axis.\n * @param y the distance in pixels to move on the Y axis.\n */\nint xdo_move_mouse_relative(const xdo_t *xdo, int x, int y);\n\n/**\n * Send a mouse press (aka mouse down) for a given button at the current mouse\n * location.\n *\n * @param window The window you want to send the event to or CURRENTWINDOW\n * @param button The mouse button. Generally, 1 is left, 2 is middle, 3 is\n *    right, 4 is wheel up, 5 is wheel down.\n */\nint xdo_mouse_down(const xdo_t *xdo, Window window, int button);\n\n/**\n * Send a mouse release (aka mouse up) for a given button at the current mouse\n * location.\n *\n * @param window The window you want to send the event to or CURRENTWINDOW\n * @param button The mouse button. Generally, 1 is left, 2 is middle, 3 is\n *    right, 4 is wheel up, 5 is wheel down.\n */\nint xdo_mouse_up(const xdo_t *xdo, Window window, int button);\n\n/**\n * Get the current mouse location (coordinates and screen number).\n *\n * @param x integer pointer where the X coordinate will be stored\n * @param y integer pointer where the Y coordinate will be stored\n * @param screen_num integer pointer where the screen number will be stored\n */\nint xdo_get_mouse_location(const xdo_t *xdo, int *x, int *y, int *screen_num);\n\n/**\n * Get the window the mouse is currently over\n *\n * @param window_ret Window pointer where the window will be stored.\n */\nint xdo_get_window_at_mouse(const xdo_t *xdo, Window *window_ret);\n\n/**\n * Get all mouse location-related data.\n *\n * If null is passed for any parameter, we simply do not store it.\n * Useful if you only want the 'y' coordinate, for example.\n *\n * @param x integer pointer where the X coordinate will be stored\n * @param y integer pointer where the Y coordinate will be stored\n * @param screen_num integer pointer where the screen number will be stored\n * @param window Window pointer where the window/client the mouse is over\n *   will be stored.\n */\nint xdo_get_mouse_location2(const xdo_t *xdo, int *x_ret, int *y_ret,\n                            int *screen_num_ret, Window *window_ret);\n\n/**\n * Wait for the mouse to move from a location. This function will block\n * until the condition has been satisfied.\n *\n * @param origin_x the X position you expect the mouse to move from\n * @param origin_y the Y position you expect the mouse to move from\n */\nint xdo_wait_for_mouse_move_from(const xdo_t *xdo, int origin_x, int origin_y);\n\n/**\n * Wait for the mouse to move to a location. This function will block\n * until the condition has been satisfied.\n *\n * @param dest_x the X position you expect the mouse to move to\n * @param dest_y the Y position you expect the mouse to move to\n */\nint xdo_wait_for_mouse_move_to(const xdo_t *xdo, int dest_x, int dest_y);\n\n/**\n * Send a click for a specific mouse button at the current mouse location.\n *\n * @param window The window you want to send the event to or CURRENTWINDOW\n * @param button The mouse button. Generally, 1 is left, 2 is middle, 3 is\n *    right, 4 is wheel up, 5 is wheel down.\n */\nint xdo_click_window(const xdo_t *xdo, Window window, int button);\n\n/**\n * Send a one or more clicks for a specific mouse button at the current mouse\n * location.\n *\n * @param window The window you want to send the event to or CURRENTWINDOW\n * @param button The mouse button. Generally, 1 is left, 2 is middle, 3 is\n *    right, 4 is wheel up, 5 is wheel down.\n */\nint xdo_click_window_multiple(const xdo_t *xdo, Window window, int button,\n                       int repeat, useconds_t delay);\n\n/**\n * Type a string to the specified window.\n *\n * If you want to send a specific key or key sequence, such as \"alt+l\", you\n * want instead xdo_send_keysequence_window(...).\n *\n * @param window The window you want to send keystrokes to or CURRENTWINDOW\n * @param string The string to type, like \"Hello world!\"\n * @param delay The delay between keystrokes in microseconds. 12000 is a decent\n *    choice if you don't have other plans.\n */\nint xdo_enter_text_window(const xdo_t *xdo, Window window, const char *string, useconds_t delay);\n\n/**\n * Send a keysequence to the specified window.\n *\n * This allows you to send keysequences by symbol name. Any combination\n * of X11 KeySym names separated by '+' are valid. Single KeySym names\n * are valid, too.\n *\n * Examples:\n *   \"l\"\n *   \"semicolon\"\n *   \"alt+Return\"\n *   \"Alt_L+Tab\"\n *\n * If you want to type a string, such as \"Hello world.\" you want to instead\n * use xdo_enter_text_window.\n *\n * @param window The window you want to send the keysequence to or\n *   CURRENTWINDOW\n * @param keysequence The string keysequence to send.\n * @param delay The delay between keystrokes in microseconds.\n */\nint xdo_send_keysequence_window(const xdo_t *xdo, Window window,\n                    const char *keysequence, useconds_t delay);\n\n/**\n * Send key release (up) events for the given key sequence.\n *\n * @see xdo_send_keysequence_window\n */\nint xdo_send_keysequence_window_up(const xdo_t *xdo, Window window,\n                       const char *keysequence, useconds_t delay);\n\n/**\n * Send key press (down) events for the given key sequence.\n *\n * @see xdo_send_keysequence_window\n */\nint xdo_send_keysequence_window_down(const xdo_t *xdo, Window window,\n                         const char *keysequence, useconds_t delay);\n                         \n/**\n * Send a series of keystrokes.\n *\n * @param window The window to send events to or CURRENTWINDOW\n * @param keys The array of charcodemap_t entities to send.\n * @param nkeys The length of the keys parameter\n * @param pressed 1 for key press, 0 for key release.\n * @param modifier Pointer to integer to record the modifiers activated by\n *   the keys being pressed. If NULL, we don't save the modifiers.\n * @param delay The delay between keystrokes in microseconds.\n */\nint xdo_send_keysequence_window_list_do(const xdo_t *xdo, Window window,\n                            charcodemap_t *keys, int nkeys,\n                            int pressed, int *modifier, useconds_t delay);\n\n\n/**\n * Wait for a window to have a specific map state.\n *\n * State possibilities:\n *   IsUnmapped - window is not displayed.\n *   IsViewable - window is mapped and shown (though may be clipped by windows\n *     on top of it)\n *   IsUnviewable - window is mapped but a parent window is unmapped.\n *\n * @param wid the window you want to wait for.\n * @param map_state the state to wait for.\n */\nint xdo_wait_for_window_map_state(const xdo_t *xdo, Window wid, int map_state);\n\n#define SIZE_TO 0\n#define SIZE_FROM 1\nint xdo_wait_for_window_size(const xdo_t *xdo, Window window, unsigned int width,\n                             unsigned int height, int flags, int to_or_from);\n\n\n/**\n * Move a window to a specific location.\n *\n * The top left corner of the window will be moved to the x,y coordinate.\n *\n * @param wid the window to move\n * @param x the X coordinate to move to.\n * @param y the Y coordinate to move to.\n */\nint xdo_move_window(const xdo_t *xdo, Window wid, int x, int y);\n\n/**\n * Apply a window's sizing hints (if any) to a given width and height.\n *\n * This function wraps XGetWMNormalHints() and applies any \n * resize increment and base size to your given width and height values.\n *\n * @param window the window to use\n * @param width the unit width you want to translate\n * @param height the unit height you want to translate\n * @param width_ret the return location of the translated width\n * @param height_ret the return location of the translated height\n */\nint xdo_translate_window_with_sizehint(const xdo_t *xdo, Window window,\n                                       unsigned int width, unsigned int height,\n                                       unsigned int *width_ret, unsigned int *height_ret);\n\n/**\n * Change the window size.\n *\n * @param wid the window to resize\n * @param w the new desired width\n * @param h the new desired height\n * @param flags if 0, use pixels for units. If SIZE_USEHINTS, then\n *   the units will be relative to the window size hints.\n */\nint xdo_set_window_size(const xdo_t *xdo, Window wid, int w, int h, int flags);\n\n/**\n * Change a window property.\n *\n * Example properties you can change are WM_NAME, WM_ICON_NAME, etc.\n *\n * @param wid The window to change a property of.\n * @param property the string name of the property.\n * @param value the string value of the property.\n */\nint xdo_set_window_property(const xdo_t *xdo, Window wid, const char *property,\n                        const char *value);\n\n/**\n * Change the window's classname and or class.\n *\n * @param name The new class name. If NULL, no change.\n * @param _class The new class. If NULL, no change.\n */\nint xdo_set_window_class(const xdo_t *xdo, Window wid, const char *name,\n                        const char *_class);\n\n/**\n * Sets the urgency hint for a window.\n */\nint xdo_set_window_urgency (const xdo_t *xdo, Window wid, int urgency);\n\n/**\n * Set the override_redirect value for a window. This generally means\n * whether or not a window manager will manage this window.\n *\n * If you set it to 1, the window manager will usually not draw borders on the\n * window, etc. If you set it to 0, the window manager will see it like a\n * normal application window.\n *\n */\nint xdo_set_window_override_redirect(const xdo_t *xdo, Window wid,\n                                     int override_redirect);\n\n/**\n * Focus a window.\n *\n * @see xdo_activate_window\n * @param wid the window to focus.\n */\nint xdo_focus_window(const xdo_t *xdo, Window wid);\n\n/**\n * Raise a window to the top of the window stack. This is also sometimes\n * termed as bringing the window forward.\n *\n * @param wid The window to raise.\n */\nint xdo_raise_window(const xdo_t *xdo, Window wid);\n\n/**\n * Lower a window to the bottom of the window stack. This is also sometimes\n * termed as sending the window backward.\n *\n * @param wid The window to lower.\n */\nint xdo_lower_window(const xdo_t *xdo, Window wid);\n\n/**\n * Get the window currently having focus.\n *\n * @param window_ret Pointer to a window where the currently-focused window\n *   will be stored.\n */\nint xdo_get_focused_window(const xdo_t *xdo, Window *window_ret);\n\n/**\n * Wait for a window to have or lose focus.\n *\n * @param window The window to wait on\n * @param want_focus If 1, wait for focus. If 0, wait for loss of focus.\n */\nint xdo_wait_for_window_focus(const xdo_t *xdo, Window window, int want_focus);\n\n/**\n * Get the PID owning a window. Not all applications support this.\n * It looks at the _NET_WM_PID property of the window.\n *\n * @param window the window to query.\n * @return the process id or 0 if no pid found.\n */\nint xdo_get_pid_window(const xdo_t *xdo, Window window);\n\n/**\n * Like xdo_get_focused_window, but return the first ancestor-or-self window *\n * having a property of WM_CLASS. This allows you to get the \"real\" or\n * top-level-ish window having focus rather than something you may not expect\n * to be the window having focused.\n *\n * @param window_ret Pointer to a window where the currently-focused window\n *   will be stored.\n */\nint xdo_get_focused_window_sane(const xdo_t *xdo, Window *window_ret);\n\n/**\n * Activate a window. This is generally a better choice than xdo_focus_window\n * for a variety of reasons, but it requires window manager support:\n *   - If the window is on another desktop, that desktop is switched to.\n *   - It moves the window forward rather than simply focusing it\n *\n * Requires your window manager to support this.\n * Uses _NET_ACTIVE_WINDOW from the EWMH spec.\n *\n * @param wid the window to activate\n */\nint xdo_activate_window(const xdo_t *xdo, Window wid);\n\n/**\n * Wait for a window to be active or not active.\n *\n * Requires your window manager to support this.\n * Uses _NET_ACTIVE_WINDOW from the EWMH spec.\n *\n * @param window the window to wait on\n * @param active If 1, wait for active. If 0, wait for inactive.\n */\nint xdo_wait_for_window_active(const xdo_t *xdo, Window window, int active);\n\n/**\n * Map a window. This mostly means to make the window visible if it is\n * not currently mapped.\n *\n * @param wid the window to map.\n */\nint xdo_map_window(const xdo_t *xdo, Window wid);\n\n/**\n * Unmap a window\n *\n * @param wid the window to unmap\n */\nint xdo_unmap_window(const xdo_t *xdo, Window wid);\n\n/**\n * Minimize a window.\n */\nint xdo_minimize_window(const xdo_t *xdo, Window wid);\n\n#define _NET_WM_STATE_REMOVE        0    /* remove/unset property */\n#define _NET_WM_STATE_ADD           1    /* add/set property */\n#define _NET_WM_STATE_TOGGLE        2    /* toggle property  */\n\n/**\n * Get window classname\n * @param window the window\n * @param class_ret Pointer to the window classname WM_CLASS\n */\nint xdo_get_window_classname(const xdo_t *xdo, Window window, unsigned char **class_ret);\n\n/**\n * Change window state\n * @param action the _NET_WM_STATE action\n */\nint xdo_window_state(xdo_t *xdo, Window window, unsigned long action, const char *property);\n\n/** \n * Reparents a window\n *\n * @param wid_source the window to reparent\n * @param wid_target the new parent window\n */\nint xdo_reparent_window(const xdo_t *xdo, Window wid_source, Window wid_target);\n\n/**\n * Get a window's location.\n *\n * @param wid the window to query\n * @param x_ret pointer to int where the X location is stored. If NULL, X is\n *   ignored.\n * @param y_ret pointer to int where the Y location is stored. If NULL, X is\n *   ignored.\n * @param screen_ret Pointer to Screen* where the Screen* the window on is\n *   stored. If NULL, this parameter is ignored.\n */\nint xdo_get_window_location(const xdo_t *xdo, Window wid,\n                            int *x_ret, int *y_ret, Screen **screen_ret);\n\n/**\n * Get a window's size.\n *\n * @param wid the window to query\n * @param width_ret pointer to unsigned int where the width is stored.\n * @param height_ret pointer to unsigned int where the height is stored.\n */\nint xdo_get_window_size(const xdo_t *xdo, Window wid, unsigned int *width_ret,\n                        unsigned int *height_ret);\n\n/* pager-like behaviors */\n\n/**\n * Get the currently-active window.\n * Requires your window manager to support this.\n * Uses _NET_ACTIVE_WINDOW from the EWMH spec.\n *\n * @param window_ret Pointer to Window where the active window is stored.\n */\nint xdo_get_active_window(const xdo_t *xdo, Window *window_ret);\n\n/**\n * Get a window ID by clicking on it. This function blocks until a selection\n * is made.\n *\n * @param window_ret Pointer to Window where the selected window is stored.\n */\nint xdo_select_window_with_click(const xdo_t *xdo, Window *window_ret);\n\n/**\n * Set the number of desktops.\n * Uses _NET_NUMBER_OF_DESKTOPS of the EWMH spec.\n *\n * @param ndesktops the new number of desktops to set.\n */\nint xdo_set_number_of_desktops(const xdo_t *xdo, long ndesktops);\n\n/**\n * Get the current number of desktops.\n * Uses _NET_NUMBER_OF_DESKTOPS of the EWMH spec.\n *\n * @param ndesktops pointer to long where the current number of desktops is\n *   stored\n */\nint xdo_get_number_of_desktops(const xdo_t *xdo, long *ndesktops);\n\n/**\n * Switch to another desktop.\n * Uses _NET_CURRENT_DESKTOP of the EWMH spec.\n *\n * @param desktop The desktop number to switch to.\n */\nint xdo_set_current_desktop(const xdo_t *xdo, long desktop);\n\n/**\n * Get the current desktop.\n * Uses _NET_CURRENT_DESKTOP of the EWMH spec.\n *\n * @param desktop pointer to long where the current desktop number is stored.\n */\nint xdo_get_current_desktop(const xdo_t *xdo, long *desktop);\n\n/**\n * Move a window to another desktop\n * Uses _NET_WM_DESKTOP of the EWMH spec.\n *\n * @param wid the window to move\n * @param desktop the desktop destination for the window\n */\nint xdo_set_desktop_for_window(const xdo_t *xdo, Window wid, long desktop);\n\n/**\n * Get the desktop a window is on.\n * Uses _NET_WM_DESKTOP of the EWMH spec.\n *\n * If your desktop does not support _NET_WM_DESKTOP, then '*desktop' remains\n * unmodified.\n *\n * @param wid the window to query\n * @param deskto pointer to long where the desktop of the window is stored\n */\nint xdo_get_desktop_for_window(const xdo_t *xdo, Window wid, long *desktop);\n\n/**\n * Search for windows.\n *\n * @param search the search query.\n * @param windowlist_ret the list of matching windows to return\n * @param nwindows_ret the number of windows (length of windowlist_ret)\n * @see xdo_search_t\n */\nint xdo_search_windows(const xdo_t *xdo, const xdo_search_t *search,\n                      Window **windowlist_ret, unsigned int *nwindows_ret);\n\n/**\n * Generic property fetch.\n *\n * @param window the window to query\n * @param atom the Atom to request\n * @param nitems the number of items \n * @param type the type of the return\n * @param size the size of the type\n * @return data consisting of 'nitems' items of size 'size' and type 'type'\n *   will need to be cast to the type before using.\n */\nunsigned char *xdo_get_window_property_by_atom(const xdo_t *xdo, Window window, Atom atom,\n                              long *nitems, Atom *type, int *size);\n\n/**\n * Get property of window by name of atom.\n *\n * @param window the window to query\n * @param property the name of the atom\n * @param nitems the number of items \n * @param type the type of the return\n * @param size the size of the type\n * @return data consisting of 'nitems' items of size 'size' and type 'type'\n *   will need to be cast to the type before using.\n */\nint xdo_get_window_property(const xdo_t *xdo, Window window, const char *property,\n                            unsigned char **value, long *nitems, Atom *type, int *size);\n\n/**\n * Get the current input state. This is a mask value containing any of the\n * following: ShiftMask, LockMask, ControlMask, Mod1Mask, Mod2Mask, Mod3Mask,\n * Mod4Mask, or Mod5Mask.\n *\n * @return the input mask\n */\nunsigned int xdo_get_input_state(const xdo_t *xdo);\n\n/**\n * If you need the symbol map, use this method.\n *\n * The symbol map is an array of string pairs mapping common tokens to X Keysym\n * strings, such as \"alt\" to \"Alt_L\"\n *\n * @returns array of strings.\n */\nconst char **xdo_get_symbol_map(void);\n\n/* active modifiers stuff */\n\n/**\n * Get a list of active keys. Uses XQueryKeymap.\n *\n * @param keys Pointer to the array of charcodemap_t that will be allocated\n *    by this function.\n * @param nkeys Pointer to integer where the number of keys will be stored.\n */\nint xdo_get_active_modifiers(const xdo_t *xdo, charcodemap_t **keys,\n                             int *nkeys);\n\n/**\n * Send any events necessary to clear the active modifiers.\n * For example, if you are holding 'alt' when xdo_get_active_modifiers is \n * called, then this method will send a key-up for 'alt'\n */\nint xdo_clear_active_modifiers(const xdo_t *xdo, Window window,\n                               charcodemap_t *active_mods,\n                               int active_mods_n);\n\n/**\n * Send any events necessary to make these modifiers active.\n * This is useful if you just cleared the active modifiers and then wish\n * to restore them after.\n */\nint xdo_set_active_modifiers(const xdo_t *xdo, Window window,\n                             charcodemap_t *active_mods,\n                             int active_mods_n);\n\n/**\n * Get the position of the current viewport.\n *\n * This is only relevant if your window manager supports\n * _NET_DESKTOP_VIEWPORT \n */\nint xdo_get_desktop_viewport(const xdo_t *xdo, int *x_ret, int *y_ret);\n\n/**\n * Set the position of the current viewport.\n *\n * This is only relevant if your window manager supports\n * _NET_DESKTOP_VIEWPORT\n */\nint xdo_set_desktop_viewport(const xdo_t *xdo, int x, int y);\n\n/**\n * Kill a window and the client owning it.\n *\n */\nint xdo_kill_window(const xdo_t *xdo, Window window);\n\n/**\n * Close a window without trying to kill the client.\n *\n */\nint xdo_close_window(const xdo_t *xdo, Window window);\n\n/**\n * Request that a window close, gracefully.\n *\n */\nint xdo_quit_window(const xdo_t *xdo, Window window);\n\n/**\n * Find a client window that is a parent of the window given\n */\n#define XDO_FIND_PARENTS (0)\n\n/**\n * Find a client window that is a child of the window given\n */\n#define XDO_FIND_CHILDREN (1)\n\n/**\n * Find a client window (child) in a given window. Useful if you get the\n * window manager's decorator window rather than the client window.\n */\nint xdo_find_window_client(const xdo_t *xdo, Window window, Window *window_ret,\n                           int direction);\n\n/**\n * Get a window's name, if any.\n *\n * @param window window to get the name of.\n * @param name_ret character pointer pointer where the address of the window name will be stored.\n * @param name_len_ret integer pointer where the length of the window name will be stored.\n * @param name_type integer pointer where the type (atom) of the window name will be stored.\n */\nint xdo_get_window_name(const xdo_t *xdo, Window window, \n                        unsigned char **name_ret, int *name_len_ret,\n                        int *name_type);\n\n/**\n * Disable an xdo feature.\n *\n * This function is mainly used by libxdo itself, however, you may find it useful\n * in your own applications.\n * \n * @see XDO_FEATURES\n */\nvoid xdo_disable_feature(xdo_t *xdo, int feature);\n\n/**\n * Enable an xdo feature.\n *\n * This function is mainly used by libxdo itself, however, you may find it useful\n * in your own applications.\n * \n * @see XDO_FEATURES\n */\nvoid xdo_enable_feature(xdo_t *xdo, int feature);\n\n/**\n * Check if a feature is enabled.\n *\n * This function is mainly used by libxdo itself, however, you may find it useful\n * in your own applications.\n * \n * @see XDO_FEATURES\n */\nint xdo_has_feature(xdo_t *xdo, int feature);\n\n/**\n * Query the viewport (your display) dimensions\n *\n * If Xinerama is active and supported, that api internally is used.\n * If Xineram is disabled, we will report the root window's dimensions\n * for the given screen.\n */\nint xdo_get_viewport_dimensions(xdo_t *xdo, unsigned int *width,\n                                unsigned int *height, int screen);\n\n\n#ifdef __cplusplus\n} /* extern \"C\" */\n#endif\n\n#endif /* ifndef _XDO_H_ */\n\n"
        },
        {
          "name": "xdo_cmd.h",
          "type": "blob",
          "size": 1.255859375,
          "content": "\n#ifndef _XDO_CMD_H_\n#define _XDO_CMD_H_\n\n#define _GNU_SOURCE 1\n#ifndef __USE_BSD\n#define __USE_BSD /* for strdup on linux/glibc */\n#endif /* __USE_BSD */\n\n#include <getopt.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include \"xdo.h\"\n#include \"xdotool.h\"\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#define HELP_SEE_WINDOW_STACK \\\n  \"If no window is given, %1 is used. See WINDOW STACK in xdotool(1)\\n\"\n#define HELP_CHAINING_ENDS \\\n  \"This command consumes all arguments after it, so you cannot chain\\n\" \\\n  \" additional commands after it.\\n\"\n\nextern void consume_args(context_t *context, int argc);\nextern void window_list(context_t *context, const char *window_arg,\n                        Window **windowlist_ret, int *nwindows_ret,\n                        const int add_to_list);\n\nextern void window_save(context_t *context, Window window);\nextern int is_command(char *cmd);\n\nextern int window_get_arg(context_t *context, int min_arg, int window_arg_pos,\n                          const char **window_arg);\n\nextern int context_execute(context_t *);\n\nextern void xdotool_debug(context_t *context, const char *format, ...);\nextern void xdotool_output(context_t *context, const char *format, ...);\n\n#ifdef __cplusplus\n} /* extern \"C\" */\n#endif\n\n#endif /* _XDO_CMD_H_ */\n"
        },
        {
          "name": "xdo_search.c",
          "type": "blob",
          "size": 14.80859375,
          "content": "/* xdo search implementation\n *\n * Lets you search windows by a query\n */\n\n#include <stdlib.h>\n#include <regex.h>\n#include <stdio.h>\n#include <X11/Xlib.h>\n#include <X11/Xatom.h>\n#include <X11/Xresource.h>\n#include <X11/Xutil.h>\n#include <X11/extensions/XTest.h>\n#include \"xdo.h\"\n\nstatic int compile_re(const char *pattern, regex_t *re);\nstatic int check_window_match(const xdo_t *xdo, Window wid, const xdo_search_t *search);\nstatic int _xdo_match_window_class(const xdo_t *xdo, Window window, regex_t *re);\nstatic int _xdo_match_window_classname(const xdo_t *xdo, Window window, regex_t *re);\nstatic int _xdo_match_window_role(const xdo_t *xdo, Window window, regex_t *re);\nstatic int _xdo_match_window_name(const xdo_t *xdo, Window window, regex_t *re);\nstatic int _xdo_match_window_title(const xdo_t *xdo, Window window, regex_t *re);\nstatic int _xdo_match_window_pid(const xdo_t *xdo, Window window, int pid);\nstatic int _xdo_is_window_visible(const xdo_t *xdo, Window wid);\nstatic void find_matching_windows(const xdo_t *xdo, Window window, \n                                  const xdo_search_t *search,\n                                  Window **windowlist_ret,\n                                  unsigned int *nwindows_ret,\n                                  unsigned int *windowlist_size,\n                                  int current_depth);\n\nint xdo_search_windows(const xdo_t *xdo, const xdo_search_t *search,\n                      Window **windowlist_ret, unsigned int *nwindows_ret) {\n  int i = 0;\n\n  unsigned int windowlist_size = 100;\n  *nwindows_ret = 0;\n  *windowlist_ret = calloc(sizeof(Window), windowlist_size);\n\n  /* TODO(sissel): Support multiple screens */\n  if (search->searchmask & SEARCH_SCREEN) {\n      Window root = RootWindow(xdo->xdpy, search->screen);\n      if (check_window_match(xdo, root, search)) {\n        (*windowlist_ret)[*nwindows_ret] = root;\n        (*nwindows_ret)++;\n        /* Don't have to check for size bounds here because\n         * we start with array size 100 */\n      }\n\n      /* Start with depth=1 since we already covered the root windows */\n      find_matching_windows(xdo, root, search, windowlist_ret, nwindows_ret,\n                            &windowlist_size, 1);\n  } else {\n    const int screencount = ScreenCount(xdo->xdpy);\n    for (i = 0; i < screencount; i++) {\n      Window root = RootWindow(xdo->xdpy, i);\n      if (check_window_match(xdo, root, search)) {\n        (*windowlist_ret)[*nwindows_ret] = root;\n        (*nwindows_ret)++;\n        /* Don't have to check for size bounds here because\n         * we start with array size 100 */\n      }\n\n      /* Start with depth=1 since we already covered the root windows */\n      find_matching_windows(xdo, root, search, windowlist_ret,\n                            nwindows_ret, &windowlist_size, 1);\n    }\n  }\n\n  //printf(\"Window count: %d\\n\", (int)ncandidate_windows);\n  //printf(\"Search:\\n\");\n  //printf(\"onlyvisible: %d\\n\", search->only_visible);\n  //printf(\"pid: %lu\\n\", search->pid);\n  //printf(\"title: %s\\n\", search->title);\n  //printf(\"name: %s\\n\", search->winname);\n  //printf(\"class: %s\\n\", search->winclass);\n  //printf(\"classname: %s\\n\", search->winclassname);\n  //printf(\"//Search\\n\");\n\n  return XDO_SUCCESS;\n} /* int xdo_search_windows */\n\nstatic int _xdo_match_window_title(const xdo_t *xdo, Window window, regex_t *re) {\n  fprintf(stderr, \"This function (match window by title) is deprecated.\"\n          \" You want probably want to match by the window name.\\n\");\n  return _xdo_match_window_name(xdo, window, re);\n} /* int _xdo_match_window_title */\n\nstatic int _xdo_match_window_name(const xdo_t *xdo, Window window, regex_t *re) {\n  /* historically in xdo, 'match_name' matched the classhint 'name' which we\n   * match in _xdo_match_window_classname. But really, most of the time 'name'\n   * refers to the window manager name for the window, which is displayed in\n   * the titlebar */\n  int i;\n  int count = 0;\n  char **list = NULL;\n  XTextProperty tp;\n\n\n  XGetWMName(xdo->xdpy, window, &tp);\n  if (tp.nitems > 0) {\n    //XmbTextPropertyToTextList(xdo->xdpy, &tp, &list, &count);\n    Xutf8TextPropertyToTextList(xdo->xdpy, &tp, &list, &count);\n    for (i = 0; i < count; i++) {\n      if (regexec(re, list[i], 0, NULL, 0) == 0) {\n        XFreeStringList(list);\n        XFree(tp.value);\n        return True;\n      }\n    }\n  } else {\n    /* Treat windows with no names as empty strings */\n    if (regexec(re, \"\", 0, NULL, 0) == 0) {\n      XFreeStringList(list);\n      XFree(tp.value);\n      return True;\n    }\n  }\n  XFreeStringList(list);\n  XFree(tp.value);\n  return False;\n} /* int _xdo_match_window_name */\n\nstatic int _xdo_match_window_class(const xdo_t *xdo, Window window, regex_t *re) {\n  XWindowAttributes attr;\n  XClassHint classhint;\n  XGetWindowAttributes(xdo->xdpy, window, &attr);\n\n  if (XGetClassHint(xdo->xdpy, window, &classhint)) {\n    //printf(\"%d: class %s\\n\", window, classhint.res_class);\n    if ((classhint.res_class) && (regexec(re, classhint.res_class, 0, NULL, 0) == 0)) {\n      XFree(classhint.res_name);\n      XFree(classhint.res_class);\n      return True;\n    }\n    XFree(classhint.res_name);\n    XFree(classhint.res_class);\n  } else {\n    /* Treat windows with no class as empty strings */\n    if (regexec(re, \"\", 0, NULL, 0) == 0) {\n      return True;\n    }\n  }\n  return False;\n} /* int _xdo_match_window_class */\n\nstatic int _xdo_match_window_classname(const xdo_t *xdo, Window window, regex_t *re) {\n  XWindowAttributes attr;\n  XClassHint classhint;\n  XGetWindowAttributes(xdo->xdpy, window, &attr);\n\n  if (XGetClassHint(xdo->xdpy, window, &classhint)) {\n    if ((classhint.res_name) && (regexec(re, classhint.res_name, 0, NULL, 0) == 0)) {\n      XFree(classhint.res_name);\n      XFree(classhint.res_class);\n      return True;\n    }\n    XFree(classhint.res_name);\n    XFree(classhint.res_class);\n  } else {\n    /* Treat windows with no class name as empty strings */\n    if (regexec(re, \"\", 0, NULL, 0) == 0) {\n      return True;\n    }\n  }\n  return False;\n} /* int _xdo_match_window_classname */\n\nstatic int _xdo_match_window_role(const xdo_t *xdo, Window window, regex_t *re) {\n  int status;\n  int ret = False;\n  int i;\n  int count = 0;\n  char **list = NULL;\n  XTextProperty tp;\n\n  status = XGetTextProperty(xdo->xdpy, window, &tp,\n                            XInternAtom(xdo->xdpy, \"WM_WINDOW_ROLE\", False));\n  if (status && tp.nitems > 0) {\n    Xutf8TextPropertyToTextList(xdo->xdpy, &tp, &list, &count);\n    for (i = 0; i < count; i++) {\n      if (regexec(re, list[i], 0, NULL, 0) == 0) {\n        ret = True;\n      }\n    }\n  } else {\n    /* Treat windows with no role as empty strings */\n    if (regexec(re, \"\", 0, NULL, 0) == 0) {\n      ret = True;\n    }\n  }\n  if(status) {\n    XFreeStringList(list);\n    XFree(tp.value);\n  }\n  return ret;\n} /* int _xdo_match_window_role */\n\nstatic int _xdo_match_window_pid(const xdo_t *xdo, Window window, const int pid) {\n  int window_pid;\n\n  window_pid = xdo_get_pid_window(xdo, window);\n  if (pid == window_pid) {\n    return True;\n  } else {\n    return False;\n  }\n} /* int _xdo_match_window_pid */\n\nstatic int compile_re(const char *pattern, regex_t *re) {\n  int ret;\n  if (pattern == NULL) {\n    regcomp(re, \"^$\", REG_EXTENDED | REG_ICASE);\n    return True;\n  }\n\n  ret = regcomp(re, pattern, REG_EXTENDED | REG_ICASE);\n  if (ret != 0) {\n    fprintf(stderr, \"Failed to compile regex (return code %d): '%s'\\n\", ret, pattern);\n    return False;\n  }\n  return True;\n} /* int compile_re */\n\nstatic int _xdo_is_window_visible(const xdo_t *xdo, Window wid) {\n  XWindowAttributes wattr;\n  XGetWindowAttributes(xdo->xdpy, wid, &wattr);\n  if (wattr.map_state != IsViewable)\n    return False;\n\n  return True;\n} /* int _xdo_is_window_visible */\n\nstatic int check_window_match(const xdo_t *xdo, Window wid,\n                              const xdo_search_t *search) {\n  regex_t title_re;\n  regex_t class_re;\n  regex_t classname_re;\n  regex_t name_re;\n  regex_t role_re;\n\n\n  if (!compile_re(search->title, &title_re) \\\n      || !compile_re(search->winclass, &class_re) \\\n      || !compile_re(search->winclassname, &classname_re) \\\n      || !compile_re(search->winrole, &role_re) \\\n      || !compile_re(search->winname, &name_re)) {\n\n    regfree(&title_re);\n    regfree(&class_re);\n    regfree(&classname_re);\n    regfree(&name_re);\n    regfree(&role_re);\n\n    return False;\n  }\n\n  /* Set this to 1 for dev debugging */\n  static const int debug = 0;\n\n  int visible_ok, pid_ok, title_ok, name_ok, class_ok, classname_ok, desktop_ok;\n  int visible_want, pid_want, title_want, name_want, class_want, classname_want, desktop_want;\n  int role_ok, role_want;\n\n  visible_ok = pid_ok = title_ok = name_ok = class_ok = classname_ok = desktop_ok = True;\n    //(search->require == SEARCH_ANY ? False : True);\n\n  desktop_want = search->searchmask & SEARCH_DESKTOP;\n  visible_want = search->searchmask & SEARCH_ONLYVISIBLE;\n  pid_want = search->searchmask & SEARCH_PID;\n  title_want = search->searchmask & SEARCH_TITLE;\n  name_want = search->searchmask & SEARCH_NAME;\n  class_want = search->searchmask & SEARCH_CLASS;\n  classname_want = search->searchmask & SEARCH_CLASSNAME;\n  role_ok = True;\n  role_want = search->searchmask & SEARCH_ROLE;\n\n  do {\n    if (desktop_want) {\n      long desktop = -1;\n\n      /* We're modifying xdo here, but since we restore it, we're still \n       * obeying the \"const\" contract. */\n      int old_quiet = xdo->quiet;\n      xdo_t *xdo2 = (xdo_t *)xdo;\n      xdo2->quiet = 1;\n      int ret = xdo_get_desktop_for_window(xdo2, wid, &desktop);\n      xdo2->quiet = old_quiet;\n\n      /* Desktop matched if we support desktop queries *and* the desktop is\n       * equal */\n      desktop_ok = (ret == XDO_SUCCESS && desktop == search->desktop);\n    }\n\n    /* Visibility is a hard condition, fail always if we wanted \n     * only visible windows and this one isn't */\n    if (visible_want && !_xdo_is_window_visible(xdo, wid)) {\n      if (debug) fprintf(stderr, \"skip %ld visible\\n\", wid); \n      visible_ok = False;\n      break;\n    }\n\n    if (pid_want && !_xdo_match_window_pid(xdo, wid, search->pid)) {\n      if (debug) fprintf(stderr, \"skip %ld pid\\n\", wid); \n      pid_ok = False;\n    }\n\n    if (title_want && !_xdo_match_window_title(xdo, wid, &title_re)) {\n      if (debug) fprintf(stderr, \"skip %ld title\\n\", wid);\n      title_ok = False;\n    }\n\n    if (name_want && !_xdo_match_window_name(xdo, wid, &name_re)) {\n      if (debug) fprintf(stderr, \"skip %ld winname\\n\", wid);\n      name_ok = False;\n    }\n\n    if (class_want && !_xdo_match_window_class(xdo, wid, &class_re)) {\n      if (debug) fprintf(stderr, \"skip %ld winclass\\n\", wid);\n      class_ok = False;\n    }\n\n    if (classname_want && !_xdo_match_window_classname(xdo, wid, &classname_re)) {\n      if (debug) fprintf(stderr, \"skip %ld winclassname\\n\", wid);\n      classname_ok = False;\n    }\n\n    if (role_want && !_xdo_match_window_role(xdo, wid, &role_re)) {\n      if (debug) fprintf(stderr, \"skip %ld winrole\\n\", wid);\n      role_ok = False;\n    }\n  } while (0);\n\n  regfree(&title_re);\n  regfree(&class_re);\n  regfree(&classname_re);\n  regfree(&name_re);\n  regfree(&role_re);\n\n  if (debug) {\n    fprintf(stderr, \"win: %ld, pid:%d, title:%d, name:%d, class:%d, visible:%d\\n\",\n            wid, pid_ok, title_ok, name_ok, class_ok, visible_ok);\n  }\n\n  switch (search->require) {\n    case SEARCH_ALL:\n      return visible_ok && pid_ok && title_ok && name_ok && class_ok \\\n             && classname_ok && desktop_ok && role_ok;\n      break;\n    case SEARCH_ANY:\n      return visible_ok && ((pid_want && pid_ok) || (title_want && title_ok) \\\n                            || (name_want && name_ok) \\\n                            || (role_want && role_ok) \\\n                            || (class_want && class_ok) \\\n                            || (classname_want && classname_ok)) \\\n                         && desktop_ok;\n      break;\n  }\n  \n  fprintf(stderr, \n          \"Unexpected code reached. search->require is not valid? (%d); \"\n          \"this may be a bug?\\n\",\n          search->require);\n  return False;\n} /* int check_window_match */\n\nstatic int ignore_badwindow(Display *dpy, XErrorEvent *xerr) {\n#define ERROR_BUF_SIZE 256\n  char buf[ERROR_BUF_SIZE];\n  char request[ERROR_BUF_SIZE];\n\n  if (xerr->error_code == BadWindow)\n    return 0;\n\n  XGetErrorText(dpy, xerr->error_code, buf, sizeof(buf));\n  fprintf(stderr, \"X Error of failed request: %s\\n\", buf);\n\n  /* Intentionally ignore errors from protocol extensions, they are not used in\n   * this file. */\n  snprintf(request, sizeof(request), \"%d\", xerr->request_code);\n  XGetErrorDatabaseText(dpy, \"XRequest\", request, \"\", buf,\n      sizeof(buf));\n  fprintf(stderr, \"Major opcode: %d (%s)\\n\",\n      xerr->request_code, buf);\n  exit(1);\n}\n\nstatic void find_matching_windows(const xdo_t *xdo, Window window, \n                                  const xdo_search_t *search,\n                                  Window **windowlist_ret,\n                                  unsigned int *nwindows_ret,\n                                  unsigned int *windowlist_size,\n                                  int current_depth) {\n  /* Query for children of 'wid'. For each child, check match.\n   * We want to do a breadth-first search.\n   *\n   * If match, add to list.\n   * If over limit, break.\n   * Recurse.\n   */\n\n  Window dummy;\n  Window *children = NULL;\n  unsigned int i, nchildren;\n  int (*old_error_handler)(Display *dpy, XErrorEvent *xerr);\n\n  /* Break early, if we have enough windows already. */\n  if (search->limit > 0 && *nwindows_ret >= search->limit) {\n    return;\n  }\n\n  /* Break if too deep */\n  if (search->max_depth != -1 && current_depth > search->max_depth) {\n    return;\n  }\n\n  /* Don't crash if window dissappear in the meantime */\n  old_error_handler = XSetErrorHandler(ignore_badwindow);\n\n  /* Break if XQueryTree fails.\n   * TODO(sissel): report an error? */\n  Status success = XQueryTree(xdo->xdpy, window, &dummy, &dummy, &children, &nchildren);\n\n  if (!success) {\n    if (children != NULL)\n      XFree(children);\n    return;\n  }\n\n  /* Breadth first, check all children for matches */\n  for (i = 0; i < nchildren; i++) {\n    Window child = children[i];\n    if (!check_window_match(xdo, child, search))\n      continue;\n\n    (*windowlist_ret)[*nwindows_ret] = child;\n    (*nwindows_ret)++;\n\n    if (search->limit > 0 && *nwindows_ret >= search->limit) {\n      /* Limit hit, break early. */\n      break;\n    }\n\n    if (*windowlist_size == *nwindows_ret) {\n      *windowlist_size *= 2;\n      *windowlist_ret = realloc(*windowlist_ret, \n                                *windowlist_size * sizeof(Window));\n    }\n  } /* for (i in children) ... */\n  XSetErrorHandler(old_error_handler);\n\n  /* Now check children-children */\n  if (search->max_depth == -1 || (current_depth + 1) <= search->max_depth) {\n    for (i = 0; i < nchildren; i++) {\n      find_matching_windows(xdo, children[i], search, windowlist_ret,\n                            nwindows_ret, windowlist_size,\n                            current_depth + 1);\n    }\n  } /* recurse on children if not at max depth */\n\n  if (children != NULL)\n    XFree(children);\n} /* void find_matching_windows */\n"
        },
        {
          "name": "xdo_util.h",
          "type": "blob",
          "size": 0.388671875,
          "content": "/* xdo utility pieces \n *\n * $Id$\n */\n\n#ifndef _XDO_UTIL_H_\n#define _XDO_UTIL_H_\n\n#include \"xdo.h\"\n\n/* human to Keysym string mapping */\nstatic const char *symbol_map[] = {\n  \"alt\", \"Alt_L\",\n  \"ctrl\", \"Control_L\",\n  \"control\", \"Control_L\",\n  \"meta\", \"Meta_L\",\n  \"super\", \"Super_L\",\n  \"shift\", \"Shift_L\",\n  \"enter\", \"Return\",\n  \"return\", \"Return\",\n  NULL, NULL,\n};\n\n#endif /* ifndef _XDO_UTIL_H_ */\n"
        },
        {
          "name": "xdo_version.h",
          "type": "blob",
          "size": 0.1171875,
          "content": "#ifndef _VERSION_H_\n#define _VERSION_H_\nstatic const char *XDO_VERSION = \"3.20211022.1\";\n#endif /* ifndef _VERSION_H */\n"
        },
        {
          "name": "xdotool.c",
          "type": "blob",
          "size": 18.74609375,
          "content": "/* xdotool\n *\n * command line interface to the xdo library\n *\n * getwindowfocus contributed by Lee Pumphret\n * keyup/down contributed by Lee Pumphret\n *\n * vi: expandtab shiftwidth=2 softtabstop=2\n */\n\n#define _GNU_SOURCE 1\n#ifndef __USE_BSD\n#define __USE_BSD /* for strdup on linux/glibc */\n#endif /* __USE_BSD */\n\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <getopt.h>\n#include <string.h>\n#include <strings.h>\n#include <errno.h>\n#include <ctype.h>\n#include <stdarg.h>\n\n#include \"xdo.h\"\n#include \"xdotool.h\"\n#include \"xdo_cmd.h\"\n\nstatic int script_main(int argc, char **argv);\nstatic int args_main(int argc, char **argv);\n\nvoid consume_args(context_t *context, int argc) {\n  if (argc > context->argc) {\n    fprintf(stderr,\n            \"Can't consume %d args; are only %d available. This is a bug.\\n\",\n            argc, context->argc);\n    context->argv += context->argc;\n    context->argc = 0;\n    return;\n  }\n\n  context->argv += argc;\n  context->argc -= argc;\n} /* void consume_args(context_t *, int) */\n\nvoid window_save(context_t *context, Window window) {\n  free(context->windows);\n\n  context->windows = calloc(1, sizeof(Window));\n  context->nwindows = 1;\n  context->windows[0] = window;\n} /* void window_save(context_t *, Window) */\n\nstatic int window_is_valid(context_t *context, const char *window_arg) {\n  if (window_arg == NULL) {\n    return True;\n  }\n\n  if (window_arg[0] != '%') {\n    return True;\n  }\n\n  /* Selected a window with %N or %@, but are there windows on the stack? */\n  if (context->nwindows == 0) {\n    fprintf(stderr, \"There are no windows in the stack\\n\");\n    return False;\n  }\n\n  if (window_arg[1] == '\\0') {\n    fprintf(stderr, \"Invalid window stack selection '%s'\\n\", window_arg);\n    return False;\n  }\n\n  if (window_arg[1] == '@') {\n    return True;\n  }\n\n  int window_index = atoi(window_arg + 1);\n  if (abs(window_index - 1) >= context->nwindows || (window_index == 0)) {\n    fprintf(stderr, \"Invalid window stack selection '%s' (out of range)\\n\", window_arg);\n    return False;\n  }\n\n  return True;\n} /* int window_is_valid(context_t *, const char *) */\n\nint window_get_arg(context_t *context, int min_arg, int window_arg_pos,\n                   const char **window_arg) {\n  if (context->argc < min_arg) {\n    fprintf(stderr, \"Too few arguments (got %d, minimum is %d)\\n\",\n            context->argc, min_arg);\n    return False;\n  } else if (context->argc == min_arg) {\n    /* nothing, keep default */\n  } else if (context->argc > min_arg) {\n    if (is_command(context->argv[min_arg])) {\n      /* keep default */\n    } else {\n      /* got enough args, let's use the window you asked for */\n      *window_arg = context->argv[window_arg_pos];\n      consume_args(context, 1);\n    }\n  }\n\n  if (!window_is_valid(context, *window_arg)) {\n    fprintf(stderr, \"Invalid window '%s'\\n\", *window_arg);\n    return False;\n  }\n\n  return True;\n} /* int window_get_arg(context_t *, int, int, char **, int *) */\n\nvoid window_list(context_t *context, const char *window_arg,\n                 Window **windowlist_ret, int *nwindows_ret,\n                 const int add_to_list) {\n  /* If window_arg is NULL and we have windows in the list, use the list.\n   * If window_arg is \"%@\" and we have windows in the list, use the list.\n   * If window_arg is \"%N\" and we have windows in the list, use Nth window.\n   *   'N' above must be a positive number.\n   * Otherwise, assume it's a window id.\n   *\n   * TODO(sissel): Not implemented yet:\n   * If window_arg is \"%r\" it means the root window of the current screen.\n   * If window_arg is \"%q\" it means we will wait for you to select a window\n   *   by clicking on it. (May not be necessary since we have 'selectwindow')\n   * If window_arg is \"%c\" it means the currently-active window.\n   */\n\n  *nwindows_ret = 0;\n  *windowlist_ret = NULL;\n\n  if (window_arg != NULL && window_arg[0] == '%') {\n    if (context->nwindows == 0) {\n      fprintf(stderr, \"There are no windows on the stack, Can't continue.\\n\");\n      return;\n    }\n\n    if (strlen(window_arg) < 2) {\n      fprintf(stderr, \"Invalid window selection '%s'\\n\", window_arg);\n      return;\n    }\n\n    /* options.\n     * %N selects the Nth window. %1, %2, %-1 (last), %-2, etc.\n     * %@ selects all\n     */\n    if (window_arg[1] == '@') {\n      *windowlist_ret = context->windows;\n      *nwindows_ret = context->nwindows;\n    } else if (window_arg[1] == 'q') {\n      /* TODO(sissel): Wait for you to click on the window. */\n    } else if (window_arg[1] == 'r') {\n      /* TODO(sissel): Get the root window of the current screen */\n    } else if (window_arg[1] == 'c') {\n      /* TODO(sissel): Get the current window */\n    } else {\n      /* Otherwise assume %N */\n      int window_index = atoi(window_arg + 1);\n      if (window_index < 0) {\n        /* negative offset */\n        window_index = context->nwindows + window_index;\n      }\n\n      if (window_index > context->nwindows || window_index <= 0) {\n        fprintf(stderr, \"%d is out of range (only %d windows in list)\\n\",\n                window_index, context->nwindows);\n        return;\n      }\n\n      /* Subtract 1 since %1 is the first window in the list */\n      context->window_placeholder[0] = context->windows[window_index - 1];\n      *windowlist_ret = context->window_placeholder;\n      *nwindows_ret = 1;\n    }\n  } else {\n    /* Otherwise, window_arg is either invalid or null. Default to CURRENTWINDOW\n     */\n\n    /* We can't return a pointer to a piece of the stack in this function,\n     * so we'll store the window in the context_t and return a pointer\n     * to that.\n     */\n    Window window = CURRENTWINDOW;\n    if (window_arg != NULL) {\n      window = (Window)strtol(window_arg, NULL, 0);\n    }\n\n    context->window_placeholder[0] = window;\n    *nwindows_ret = 1;\n    *windowlist_ret = context->window_placeholder;\n  }\n\n  if (add_to_list) {\n    /* save the window to the windowlist */\n  }\n}\n\n\nstruct dispatch {\n  const char *name;\n  int (*func)(context_t *context);\n} dispatch[] = {\n  /* Query functions */\n  { \"getactivewindow\", cmd_getactivewindow, },\n  { \"getwindowfocus\", cmd_getwindowfocus, },\n  { \"getwindowname\", cmd_getwindowname, },\n  { \"getwindowclassname\", cmd_getwindowclassname},\n  { \"getwindowpid\", cmd_getwindowpid, },\n  { \"getwindowgeometry\", cmd_getwindowgeometry, },\n  { \"getdisplaygeometry\", cmd_get_display_geometry, },\n  { \"search\", cmd_search, },\n  { \"selectwindow\", cmd_window_select, },\n\n  /* Help me! */\n  { \"help\", cmd_help, },\n  { \"version\", cmd_version, },\n\n  /* Action functions */\n  { \"behave\", cmd_behave, },\n  { \"behave_screen_edge\", cmd_behave_screen_edge, },\n  { \"click\", cmd_click, },\n  { \"getmouselocation\", cmd_getmouselocation, },\n  { \"key\", cmd_key, },\n  { \"keydown\", cmd_key, },\n  { \"keyup\", cmd_key, },\n  { \"mousedown\", cmd_mousedown, },\n  { \"mousemove\", cmd_mousemove, },\n  { \"mousemove_relative\", cmd_mousemove_relative, },\n  { \"mouseup\", cmd_mouseup, },\n  { \"set_window\", cmd_set_window, },\n  { \"type\", cmd_type, },\n  { \"windowactivate\", cmd_windowactivate, },\n  { \"windowfocus\", cmd_windowfocus, },\n  { \"windowkill\", cmd_windowkill, },\n  { \"windowclose\", cmd_windowclose, },\n  { \"windowquit\", cmd_windowquit, },\n  { \"windowmap\", cmd_windowmap, },\n  { \"windowminimize\", cmd_windowminimize, },\n  { \"windowmove\", cmd_windowmove, },\n  { \"windowraise\", cmd_windowraise, },\n  { \"windowlower\", cmd_windowlower, },\n  { \"windowreparent\", cmd_windowreparent, },\n  { \"windowsize\", cmd_windowsize, },\n  { \"windowstate\", cmd_windowstate, },\n  { \"windowunmap\", cmd_windowunmap, },\n\n  { \"set_num_desktops\", cmd_set_num_desktops, },\n  { \"get_num_desktops\", cmd_get_num_desktops, },\n  { \"set_desktop\", cmd_set_desktop, },\n  { \"get_desktop\", cmd_get_desktop, },\n  { \"set_desktop_for_window\", cmd_set_desktop_for_window, },\n  { \"get_desktop_for_window\", cmd_get_desktop_for_window, },\n  { \"get_desktop_viewport\", cmd_get_desktop_viewport, },\n  { \"set_desktop_viewport\", cmd_set_desktop_viewport, },\n\n  { \"exec\", cmd_exec, },\n  { \"sleep\", cmd_sleep, },\n\n  { NULL, NULL, },\n};\n\nint is_command(char* cmd) {\n  int i;\n  for (i = 0; dispatch[i].name != NULL; i++) {\n      if (!strcasecmp(dispatch[i].name, cmd)) {\n        return 1;\n      }\n    }\n  return 0;\n}\n\nint main(int argc, char **argv) {\n  return xdotool_main(argc, argv);\n}\n\nint xdotool_main(int argc, char **argv) {\n\n  /* If argv[1] is a file or \"-\", read commands from file or stdin,\n   * else use commands from argv.\n   */\n\n  struct stat data;\n  int stat_ret;\n\n  if (argc >= 2) {\n    /* See if the first argument is an existing file */\n    stat_ret = stat(argv[1], &data);\n    int i = 0;\n    int argv1_is_command= 0;\n    \n    for (i = 0; dispatch[i].name != NULL; i++) {\n      if (!strcasecmp(dispatch[i].name, argv[1])) {\n        argv1_is_command = 1;\n        break;\n      }\n    }\n\n    if (!argv1_is_command && (strcmp(argv[1], \"-\") == 0 || stat_ret == 0)) {\n      return script_main(argc, argv);\n    }\n  }\n  return args_main(argc, argv);\n}\n\nint script_main(int argc, char **argv) {\n  /* Tokenize the input file while expanding positional parameters and\n   * environment variables. Pass the resulting argument list to\n   * args_main().\n   */\n\n  int result = XDO_SUCCESS;\n  FILE *input = NULL;\n  char buffer[4096];\n  int script_argc = 0;\n  int script_argc_max = 0;\n  size_t token_len, total_len = 0;\n  char *token = NULL;\n  const char *path = argv[1];\n  char **script_argv = (char **) calloc(1, sizeof(char *));\n  int continues_next_buffer = 0;\n\n  if (script_argv == NULL) {\n    fprintf(stderr, \"%s: error: failed to allocate memory while parsing `%s'.\\n\",\n            argv[0], argv[1]);\n    exit(EXIT_FAILURE);\n  }\n\n  /* determine whether reading from a file or from stdin */\n  if (!strcmp(path, \"-\")) {\n    input = fdopen(0, \"r\");\n  } else {\n    input = fopen(path, \"r\");\n    if (input == NULL) {\n      fprintf(stderr, \"Failure opening '%s': %s\\n\", path, strerror(errno));\n      return EXIT_FAILURE;\n    }\n  }\n\n  context_t context;\n  context.xdo = xdo_new(NULL);\n  context.prog = *argv;\n  context.windows = NULL;\n  context.nwindows = 0;\n  context.have_last_mouse = False;\n  context.debug = (getenv(\"DEBUG\") != NULL);\n\n  if (context.xdo == NULL) {\n    fprintf(stderr, \"Failed creating new xdo instance\\n\");\n    return EXIT_FAILURE;\n  }\n  context.xdo->debug = context.debug;\n\n  /* read input... */\n\n  while (fgets(buffer, sizeof(buffer), input) != NULL) {\n    char *line = buffer;\n    const size_t end = strcspn(line, \"\\n\");\n\n    /* replace newline with nul */\n    line[end] = '\\0';\n\n    /* tokenize line into script_argv... */\n    while (*line != '\\0') {\n      /* skip leading whitespace */\n      line += strspn(line, \" \\t\");\n      /* ignore comment lines */\n      if (line[0] == '#') {\n        line += strlen(line);\n        continue;\n      }\n\n      /* modify line to contain the current token. Tokens are\n       * separated by whitespace, or quoted with single/double quotes.\n       */\n      if (line[0] == '\"') {\n        line++;\n        line[strcspn(line, \"\\\"\")] = '\\0';\n      }\n      else if (line[0] == '\\'') {\n        line++;\n        line[strcspn(line, \"\\'\")] = '\\0';\n      }\n      else {\n        line[strcspn(line, \" \\t\")] = '\\0';\n      }\n\n      /* if a token begins with \"$\", append the corresponding\n       * positional parameter or environment variable to\n       * script_argv...\n      */\n      if (line[0] == '$') {\n        /* ignore dollar sign */\n        line++;\n\n        if (isdigit(line[0])) {\n          int pos;\n          /* get the position of this parameter in argv */\n          pos = atoi(line) + 1; /* $1 is actually index 2 in the argv array */\n\n          /* bail if no argument was given for this parameter */\n          if (pos >= argc) {\n            fprintf (stderr, \"%s: error: `%s' needs at least %d %s; only %d given\\n\",\n                     argv[0], argv[1], pos - 1, pos == 2 ? \"argument\" : \"arguments\",\n                     argc - 2);\n            return EXIT_FAILURE;\n          }\n          /* use command line argument */\n          token = argv[pos];\n        }\n        else {\n          /* use environment variable */\n          token = getenv(line);\n          if (token == NULL) {\n            /* since it's not clear what we should do if this env var is not\n             * present, let's abort */\n            fprintf(stderr, \"%s: error: environment variable $%s is not set.\\n\",\n                    argv[0], line);\n            return EXIT_FAILURE;\n          }\n        }\n      }\n      else {\n        /* use the verbatim token */\n        token = line;\n      }\n\n      token_len = strlen(token);\n      if (token_len == 0) {\n        continue; /* nothing there */\n      }\n\n      /* append token */\n\n      /* allocate memory for the new token if needed */\n      if (script_argc + 1 > script_argc_max) {\n        script_argv = realloc(script_argv, (script_argc + 1) * sizeof(char *));\n        if (script_argv == NULL) {\n          fprintf(stderr, \"%s: error: failed to allocate memory while parsing `%s'.\\n\",\n                  argv[0], argv[1]);\n          exit(EXIT_FAILURE);\n        }\n        script_argv[script_argc] = NULL;\n        script_argc_max++;\n      }\n\n      script_argv[script_argc] = realloc(script_argv[script_argc],\n          (total_len + token_len + 1) * sizeof(char)\n      );\n\n      if (script_argv[script_argc] == NULL) {\n        fprintf(stderr, \"%s: error: failed to allocate memory while parsing `%s'.\\n\",\n                argv[0], argv[1]);\n        exit(EXIT_FAILURE);\n      }\n\n      /* We _know_ that token fits and hence use strcpy */\n      strcpy(script_argv[script_argc] + total_len, token);\n\n      /* advance line to the next token */\n      line += token_len;\n      total_len += token_len;\n\n      /* we did not do exact byte-counting, so simply look at the buffer */\n      /* did we reach the end of the buffer? */\n      if (line == &buffer[sizeof(buffer) - 1]) {\n        /* yes. The remainder of the command/arg is in the next buffer */\n        continues_next_buffer = 1;\n\n        //if (context.debug) {\n        //  fprintf(stderr, \"token so far (continues): %s\\n\", token);\n        //}\n      } else {\n        /* no, get next argument */\n        line++; /* skip past current '\\0' */\n        script_argc++;\n        total_len = 0;\n        continues_next_buffer = 0;\n\n        //if (context.debug) {\n        //  fprintf(stderr, \"token: %s\\n\", token);\n        //}\n      }\n    } /* while line being tokenized */\n\n    /*\n     * Reallocate memory if needed for the final NULL at the end.\n     */\n    if(script_argc_max <= script_argc){\n      script_argv = realloc(script_argv, (script_argc+1) * sizeof(char *));\n      /* TODO(sissel): STOPPED HERE */\n      if (script_argv == NULL) {\n        fprintf(stderr, \"%s: error: failed to allocate memory while parsing `%s'.\\n\",\n                argv[0], argv[1]);\n        exit(EXIT_FAILURE);\n      }\n      script_argv[script_argc] = NULL;\n      script_argc_max++;\n    }\n\n    /* continues_next_buffer is true if a command or argument continues\n     * in the next buffer.\n     * Think: printf \"mousemove%4107s\" \"--polar -- 0 0 sleep 0.1\" > /tmp/i\n     *        xdotool - < /tmp/i\n     * should ideally parse until we see a supported command, i.e.\n     * do not break \"--p\" \"olar\" in half but continue reading until \"sleep\".\n     */\n    if(!continues_next_buffer && script_argc > 0){\n      context.argc = script_argc;\n      context.argv = script_argv;\n      result = context_execute(&context);\n\n      /*\n       * Free the allocated memory for tokens.\n       */\n      for(int j = 0; j < script_argc + 1; j++){\n        free(*(script_argv + j));\n        *(script_argv + j) = NULL;\n      }\n      script_argc = 0;\n    }\n  }\n  fclose(input);\n\n\n  xdo_free(context.xdo);\n  free(context.windows);\n\n  for(int i=0; i<script_argc+1; ++i) {\n      free(script_argv[i]);\n  }\n  free(script_argv);\n  return result;\n}\n\nint args_main(int argc, char **argv) {\n  int ret = 0;\n  int opt;\n  int option_index;\n\n  const char *usage = \"Usage: %s <cmd> <args>\\n\";\n  static struct option long_options[] = {\n    { \"help\", no_argument, NULL, 'h' },\n    { \"version\", no_argument, NULL, 'v' },\n    { 0, 0, 0, 0 }\n  };\n\n  if (argc < 2) {\n    fprintf(stderr, usage, argv[0]);\n    cmd_help(NULL);\n    exit(1);\n  }\n\n  if (!strcasecmp(argv[1], \"help\")) {\n    cmd_help(NULL);\n    exit(EXIT_SUCCESS);\n  } else if (!strcasecmp(argv[1], \"version\")) {\n    cmd_version(NULL);\n    exit(EXIT_SUCCESS);\n  }\n\n  while ((opt = getopt_long_only(argc, argv, \"++hv\", long_options, &option_index)) != -1) {\n    switch (opt) {\n      case 'h':\n        cmd_help(NULL);\n        exit(EXIT_SUCCESS);\n      case 'v':\n        cmd_version(NULL);\n        exit(EXIT_SUCCESS);\n      default:\n        fprintf(stderr, usage, argv[0]);\n        exit(EXIT_FAILURE);\n    }\n  }\n  \n  context_t context;\n  context.xdo = xdo_new(NULL);\n  context.prog = *argv;\n  argv++; argc--;\n  context.argc = argc;\n  context.argv = argv;\n  context.windows = NULL;\n  context.nwindows = 0;\n  context.have_last_mouse = False;\n  context.debug = (getenv(\"DEBUG\") != NULL);\n\n  if (context.xdo == NULL) {\n    fprintf(stderr, \"Failed creating new xdo instance.\\n\");\n    return 1;\n  }\n  context.xdo->debug = context.debug;\n\n  ret = context_execute(&context);\n\n  xdo_free(context.xdo);\n  free(context.windows);\n\n  return ret;\n} /* int args_main(int, char **) */\n\nint context_execute(context_t *context) {\n  int cmd_found = 0;\n  int i = 0;\n  char *cmd = NULL;\n  int ret = XDO_SUCCESS;\n\n  /* Loop until all argv is consumed. */\n  while (context->argc > 0 && ret == XDO_SUCCESS) {\n    cmd = context->argv[0];\n    cmd_found = 0;\n    for (i = 0; dispatch[i].name != NULL && !cmd_found; i++) {\n      if (!strcasecmp(dispatch[i].name, cmd)) {\n        cmd_found = 1;\n        optind = 0;\n        if (context->debug) {\n          fprintf(stderr, \"command: %s\\n\", cmd);\n        }\n        ret = dispatch[i].func(context);\n      }\n    }\n\n    if (!cmd_found) {\n      fprintf(stderr, \"%s: Unknown command: %s\\n\", context->prog, cmd);\n      fprintf(stderr, \"Run '%s help' if you want a command list\\n\", context->prog);\n      ret = 1;\n    }\n  } /* while ... */\n  return ret;\n} /* int args_main(int, char **) */\n\nint cmd_help(context_t *context) {\n  int i;\n  printf(\"Available commands:\\n\");\n  for (i = 0; dispatch[i].name != NULL; i++)\n    printf(\"  %s\\n\", dispatch[i].name);\n\n  /* \"help\" can be invoked on errors, like when xdotool is given no arguments,\n   * so let's make sure we only consume if we have a context */\n  if (context != NULL) {\n    consume_args(context, 1);\n  }\n\n  return 0;\n}\n\nint cmd_version(context_t *context) {\n  xdotool_output(context, \"xdotool version %s\", xdo_version());\n  if (context != NULL) {\n    consume_args(context, 1);\n  }\n\n  return 0;\n}\n\nvoid xdotool_debug(context_t *context, const char *format, ...) {\n  va_list args;\n\n  va_start(args, format);\n  if (context->debug) {\n    vfprintf(stderr, format, args);\n    fprintf(stderr, \"\\n\");\n  }\n  va_end(args);\n} /* xdotool_debug */\n\nvoid xdotool_output(context_t *context, const char *format, ...) {\n  context = context; /* Do something with context to avoid warnings */\n  va_list args;\n\n  va_start(args, format);\n  vfprintf(stdout, format, args);\n  fprintf(stdout, \"\\n\");\n  fflush(stdout);\n  va_end(args);\n} /* xdotool_output */\n"
        },
        {
          "name": "xdotool.h",
          "type": "blob",
          "size": 2.93359375,
          "content": "#ifndef _XDOTOOL_H_\n#define _XDOTOOL_H_\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* TODO(sissel): use proper printf format depending on the storage\n * size of Window (could be 4 or 8 bytes depending on platform */\n#define window_print(window) (printf(\"%ld\\n\", window))\n#define window_each(context, window_arg, block) \\\n{ \\\n  Window *windows; \\\n  int nwindows; \\\n  window_list(context, window_arg, &windows, &nwindows, False); \\\n  int w_index;\\\n  for (w_index = 0; w_index < nwindows; w_index++) { \\\n    Window window = windows[w_index]; \\\n    {  \\\n      block \\\n    } \\\n  } \\\n} /* end define window_each */\n\n  \n\ntypedef struct context {\n  xdo_t *xdo;\n  const char *prog;\n  int argc;\n  char **argv;\n  int debug;\n\n  /* Window stack */\n  Window *windows;\n  int nwindows;\n  Window window_placeholder[1];\n\n  /* Last known mouse position */\n  int last_mouse_x;\n  int last_mouse_y;\n  int last_mouse_screen;\n  int have_last_mouse;\n} context_t;\n\nint xdotool_main(int argc, char **argv);\nint cmd_exec(context_t *context);\nint cmd_sleep(context_t *context);\nint cmd_behave(context_t *context);\nint cmd_behave_screen_edge(context_t *context);\nint cmd_click(context_t *context);\nint cmd_getactivewindow(context_t *context);\nint cmd_getmouselocation(context_t *context);\nint cmd_getwindowfocus(context_t *context);\nint cmd_getwindowname(context_t *context);\nint cmd_getwindowclassname(context_t *context);\nint cmd_getwindowpid(context_t *context);\nint cmd_getwindowgeometry(context_t *context);\nint cmd_help(context_t *context);\nint cmd_key(context_t *context);\nint cmd_mousedown(context_t *context);\nint cmd_mousemove(context_t *context);\nint cmd_mousemove_relative(context_t *context);\nint cmd_mouseup(context_t *context);\nint cmd_search(context_t *context);\nint cmd_set_window(context_t *context);\nint cmd_type(context_t *context);\nint cmd_version(context_t *context);\nint cmd_window_select(context_t *context);\nint cmd_windowactivate(context_t *context);\nint cmd_windowfocus(context_t *context);\nint cmd_windowkill(context_t *context);\nint cmd_windowclose(context_t *context);\nint cmd_windowquit(context_t *context);\nint cmd_windowmap(context_t *context);\nint cmd_windowminimize(context_t *context);\nint cmd_windowmove(context_t *context);\nint cmd_windowraise(context_t *context);\nint cmd_windowlower(context_t *context);\nint cmd_windowreparent(context_t *context);\nint cmd_windowsize(context_t *context);\nint cmd_windowstate(context_t *context);\nint cmd_windowunmap(context_t *context);\n/* pager-like commands */\nint cmd_set_num_desktops(context_t *context);\nint cmd_get_num_desktops(context_t *context);\nint cmd_set_desktop(context_t *context);\nint cmd_get_desktop(context_t *context);\nint cmd_set_desktop_for_window(context_t *context);\nint cmd_get_desktop_for_window(context_t *context);\nint cmd_set_desktop_viewport(context_t *context);\nint cmd_get_desktop_viewport(context_t *context);\nint cmd_get_display_geometry(context_t *context);\n\n#ifdef __cplusplus\n} /* extern \"C\" */\n#endif\n\n#endif /* _XDOTOOL_H_ */\n"
        },
        {
          "name": "xdotool.pod",
          "type": "blob",
          "size": 35.1455078125,
          "content": "=pod\n\n=head1 NAME\n\nxdotool - command-line X11 automation tool\n\n=head1 SYNOPSIS\n\nB<xdotool> I<cmd> I<args...>\n\nNotation: Some documentation uses I<[window]> to denote an optional\nwindow argument. This case means that the argument, if not present, will\ndefault to \"%1\". See L<WINDOW STACK> for what \"%1\" means.\n\n=head1 DESCRIPTION\n\nB<xdotool> lets you programmatically (or manually) simulate keyboard input and\nmouse activity, move and resize windows, etc. It does this using X11's\nXTEST extension and other Xlib functions.\n\nThere is some support for Extended Window Manager Hints (aka EWMH or NetWM).\nSee the L</EXTENDED WINDOW MANAGER HINTS> section for more information.\n\n=head1 KEYBOARD COMMANDS\n\n=over\n\n=item B<key> I<[options]> I<keystroke> [I<keystroke> ...]\n\nOptions:\n\n=over\n\n=item B<--window window>\n\nSend keystrokes to a specific window id. You can use\nL<WINDOW STACK> references like \"%1\" and \"%@\" here. If there is a window stack,\nthen \"%1\" is the default, otherwise the current window is used.\n\nSee also: L<SENDEVENT NOTES> and L<WINDOW STACK>\n\n=item B<--clearmodifiers>\n\nClear modifiers before sending keystrokes. See L<CLEARMODIFIERS> below.\n\n=item B<--delay milliseconds>\n\nDelay between keystrokes. Default is 12ms.\n\n=back\n\nType a given keystroke. Examples being \"alt+r\", \"Control_L+J\",\n\"ctrl+alt+n\", \"BackSpace\".\n\nGenerally, any valid X Keysym string will work. Multiple keys are\nseparated by '+'. Aliases exist for \"alt\", \"ctrl\", \"shift\", \"super\",\nand \"meta\" which all map to Foo_L, such as Alt_L and Control_L, etc.\n\nIn cases where your keyboard doesn't actually have the key you want to type,\nxdotool will automatically find an unused keycode and use that to type the key.\n\nWith respect to L<COMMAND CHAINING>, this command consumes the remainder of the\narguments or until a new xdotool command is seen, because no xdotool commands\nare valid keystrokes.\n\nExample: Send the keystroke \"F2\"\n xdotool key F2\n\nExample: Send 'a' with an accent over it (not on English keyboards, but still\nworks with xdotool)\n xdotool key Aacute\n\nExample: Send ctrl+l and then BackSpace as separate keystrokes:\n xdotool key ctrl+l BackSpace\n\nExample: Send ctrl+c to all windows matching title 'gdb' (See L<COMMAND CHAINING>)\n xdotool search --name gdb key ctrl+c\n\n=item B<keydown> I<[options]> I<keystroke>\n\nSame as above, except only keydown (press) events are sent.\n\n=item B<keyup> I<keystroke>\n\nSame as above, except only keyup (release) events are sent.\n\n=item B<type> I<[options]> I<something to type>\n\nOptions:\n\n=over\n\n=item B<--window windowid>\n\nSend keystrokes to a specific window id. See L<SENDEVENT NOTES> below. The\ndefault, if no window is given, depends on the window stack. If the window\nstack is empty the current window is typed at using XTEST. Otherwise, the\ndefault is \"%1\" (see L<WINDOW STACK>).\n\n=item B<--delay milliseconds>\n\nDelay between keystrokes. Default is 12ms.\n\n=item B<--clearmodifiers>\n\nClear modifiers before sending keystrokes. See L<CLEARMODIFIERS> below.\n\n=back\n\nTypes as if you had typed it. Supports newlines and tabs (ASCII newline and\ntab). Each keystroke is separated by a delay given by the B<--delay> option.\n\nWith respect to L<COMMAND CHAINING>, this command consumes the remainder of the\narguments and types them. That is, no commands can chain after 'type'.\n\nExample: to type 'Hello world!' you would do:\n xdotool type 'Hello world!'\n\n=back\n\n=head1 MOUSE COMMANDS\n\n=over\n\n=item B<mousemove> I<[options]> I<x y OR 'restore'>\n\nMove the mouse to the specific X and Y coordinates on the screen.\n\nYou can move the mouse to the previous location if you specify 'restore'\ninstead of an X and Y coordinate. Restoring only works if you have moved\npreviously in this same command invocation. Further, it does not work with the\n--window option.\n\nFor example, to click the top-left corner of the screen and move the mouse to\nthe original position before you moved it, use this:\n xdotool mousemove 0 0 click 1 mousemove restore\n\n=over\n\n=item B<--window WINDOW>\n\nSpecify a window to move relative to. Coordinates 0,0 are at the top left of\nthe window you choose.\n\nL<WINDOW STACK> references are valid here, such as %1 and %@. Though, using %@\nprobably doesn't make sense.\n\n=item B<--screen SCREEN>\n\nMove the mouse to the specified screen to move to. This is only useful if you\nhave multiple screens and ARE NOT using Xinerama.\n\nThe default is the current screen. If you specify --window, the --screen flag\nis ignored.\n\n=item B<--polar>\n\nUse polar coordinates. This makes 'x' an angle (in degrees, 0-360, etc) and 'y'\nthe distance.\n\nRotation starts at 'up' (0 degrees) and rotates clockwise: 90 = right, 180 =\ndown, 270 = left.\n\nThe origin defaults to the center of the current screen. If you specify a\n--window, then the origin is the center of that window.\n\n=item B<--clearmodifiers>\n\nSee L<CLEARMODIFIERS>\n\n=item B<--sync>\n\nAfter sending the mouse move request, wait until the mouse is actually\nmoved. If no movement is necessary, we will not wait. This is useful for\nscripts that depend on actions being completed before moving on.\n\nNote: We wait until the mouse moves at all, not necessarily that it\nactually reaches your intended destination. Some applications lock the\nmouse cursor to certain regions of the screen, so waiting for any movement is\nbetter in the general case than waiting for a specific target.\n\n=back\n\n=item B<mousemove_relative> [options] I<x> I<y>\n\nMove the mouse x,y pixels relative to the current position of the mouse cursor.\n\n=over\n\n=item B<--polar>\n\nUse polar coordinates. This makes 'x' an angle (in degrees, 0-360, etc) and 'y'\nthe distance.\n\nRotation starts at 'up' (0 degrees) and rotates clockwise: 90 = right, 180 =\ndown, 270 = left.\n\n=item B<--sync>\n\nAfter sending the mouse move request, wait until the mouse is actually\nmoved. If no movement is necessary, we will not wait. This is useful for\nscripts that depend on actions being completed before moving on.\n\nNote that we wait until the mouse moves at all, not necessarily that it\nactually reaches your intended destination. Some applications lock the mouse\ncursor to certain regions of the screen, so waiting for any movement is better\nin the general case than waiting for a specific target.\n\n=item B<--clearmodifiers>\n\nSee L<CLEARMODIFIERS>\n\n=back\n\n=item B<click> I<[options]> I<button>\n\nSend a click, that is, a mousedown followed by mouseup for the given button\nwith a short delay between the two (currently 12ms).\n\nButtons generally map this way: Left mouse is 1, middle is 2, right is 3,\nwheel up is 4, wheel down is 5.\n\n=over\n\n=item B<--clearmodifiers>\n\nClear modifiers before clicking. See L<CLEARMODIFIERS> below.\n\n=item B<--repeat> REPEAT\n\nSpecify how many times to click. Default is 1. For a double-click, use\n'--repeat 2'\n\n=item B<--delay> MILLISECONDS\n\nSpecify how long, in milliseconds, to delay between clicks. This option is not\nused if the I<--repeat> flag is set to 1 (default).\n\n=item B<--window> WINDOW\n\nSpecify a window to send a click to. See L<SENDEVENT NOTES> below for caveats. Uses the\ncurrent mouse position when generating the event.\n\nThe default, if no window is given, depends on the window stack. If the window\nstack is empty the current window is typed at using XTEST. Otherwise, the\ndefault is \"%1\" (see L<WINDOW STACK>).\n\n=back\n\n=item B<mousedown> I<[options]> I<button>\n\nSame as B<click>, except only a mouse down is sent.\n\n=item B<mouseup> I<[options]> I<button>\n\nSame as B<click>, except only a mouse up is sent.\n\n=item B<getmouselocation> I<[--shell]>\n\nOutputs the x, y, screen, and window id of the mouse cursor. Screen numbers will\nbe nonzero if you have multiple monitors and are not using Xinerama.\n\nThis command updates the window stack with the window id of the window directly underneath the mouse.\n\n=over\n\n=item B<--shell>\n\nThis makes getmouselocation output shell data you can eval. Example:\n\n % xdotool getmouselocation --shell\n X=880\n Y=443\n SCREEN=0\n WINDOW=16777250\n\n % eval $(xdotool getmouselocation --shell)\n % echo $X,$Y\n 714,324\n\n=back\n\n=item B<behave_screen_edge> I<[options]> I<where> I<command ...>\n\nBind an action to events when the mouse hits the screen edge or corner.\n\nOptions are:\n\n=over\n\n=item I<--delay MILLISECONDS>\n\nDelay in milliseconds before running the command. This allows you to require\na given edge or corner to be held for a short period before your command will\nrun. If you leave the edge or corner before the delay expires then the time\nwill reset.\n\n=item I<--quiesce MILLISECONDS>\n\nDelay in milliseconds before the next command will run. This helps prevent\naccidentally running your command extra times; especially useful if you have\na very short --delay (like the default of 0).\n\n=back\n\nEvent timeline\n\n * Mouse hits an edge or corner.\n * If delay is nonzero, the mouse must stay in this edge or corner until delay time expires.\n * If still in the edge/corner, trigger.\n * If quiesce is nonzero, then there is a cool-down period where the next\n   trigger cannot occur\n\nValid 'where' values are:\n\n=over\n\n=item left\n\n=item top-left\n\n=item top\n\n=item top-right\n\n=item right\n\n=item bottom-left\n\n=item bottom\n\n=item bottom-right\n\n=back\n\nExamples:\n # Activate google-chrome when you move the mouse to the bottom-left corner:\n xdotool behave_screen_edge bottom-left \\\n   search --class google-chrome windowactivate\n\n # Go to the next workspace (right). Known to work in GNOME (metacity and compiz)\n xdotool behave_screen_edge --delay 500 bottom-right key XF86Forward\n\n # Activate firefox and do a web search in a new tab for text in your clipboard\n xdotool behave_screen_edge --delay 1000 top-left \\\n     search --classname Navigator \\\n     windowactivate --sync key --delay 250 ctrl+t ctrl+k ctrl+v Return\n\n=back\n\n=head1 WINDOW COMMANDS\n\n=over\n\n=item B<search> I<[options]> I<pattern>\n\nSearch for windows with titles, names, or classes with a regular expression\npattern. The output is line-delimited list of X window identifiers. If you\nare using L<COMMAND CHAINING>, the L<search> command will only write window\nids to stdout if it is the last (or only) command in the chain; otherwise, it\nis silent.\n\nThe result is saved to the window stack for future chained commands. See\nL<WINDOW STACK> and L<COMMAND CHAINING> for details.\n\nPatterns are POSIX extended regular expressions (ERE), e. g. \"Chrom(e|ium)$\" for\nwindows ending in \"Chrome\" or \"Chromium\". See L<regex(7)> for syntax details.\nMatches are case-insensitive.\n\nThe default options are C<--name --class --classname --role>\n(unless you specify one or more of --name, --class, --classname, or --role).\n\nThe options available are:\n\n=over\n\n=item B<--class>\n\nMatch against the window class.\n\n=item B<--classname>\n\nMatch against the window classname.\n\n=item B<--role>\n\nMatch against the window role.\n\n=item B<--maxdepth> N\n\nSet recursion/child search depth. Default is -1,\nmeaning infinite. 0 means no depth, only root windows will be searched. If you\nonly want toplevel windows, set maxdepth of 1 (or 2, depending on how your\nwindow manager does decorations).\n\n=item B<--name>\n\nMatch against the window name. This is the same string that is displayed in the\nwindow titlebar.\n\n=item B<--onlyvisible>\n\nShow only visible windows in the results. This means ones with map state\nIsViewable.\n\n=item B<--pid PID>\n\nMatch windows that belong to a specific process id. This may not work for some\nX applications that do not set this metadata on its windows.\n\n=item B<--screen N>\n\nSelect windows only on a specific screen. Default is to\nsearch all screens. Only meaningful if you have multiple displays and are not\nusing Xinerama.\n\n=item B<--desktop N>\n\nOnly match windows on a certain desktop. 'N' is a number. The default\nis to search all desktops.\n\n=item B<--limit N>\n\nStop searching after finding N matching windows. Specifying a limit will help\nspeed up your search if you only want a few results.\n\nThe default is no search limit (which is equivalent to '--limit 0')\n\n=item B<--title>\n\nDEPRECATED. See --name.\n\n=item B<--all>\n\nRequire that all conditions be met. For example:\n\n xdotool search --all --pid 1424 --name \"Hello World\"\n\nThis will match only windows that have \"Hello World\" as a name and are owned by\npid 1424.\n\n=item B<--any>\n\nMatch windows that match any condition (logically, 'or'). This is on by\ndefault. For example:\n\n xdotool search --any --pid 1424 --name \"Hello World\"\n\nThis will match any windows owned by pid 1424 or windows with name \"Hello\nWorld\"\n\n=item B<--sync >\n\nBlock until there are results. This is useful when you are launching an\napplication and want to wait until the application window is visible.\nFor example:\n\n google-chrome &\n xdotool search --sync --onlyvisible --class \"google-chrome\"\n\n=back\n\n=item B<selectwindow>\n\nGet the window id (for a client) by clicking on it. Useful for having scripts\nquery you humans for what window to act on. For example, killing a window by\nclicking on it:\n\n xdotool selectwindow windowkill\n\n=item B<behave> I<window> I<action> I<command ...>\n\nBind an action to an event on a window. This lets you run additional xdotool\ncommands whenever a matched event occurs.\n\nThe command run as a result of the behavior is run with %1 being the window\nthat was acted upon. Examples follow after the event list.\n\nThe following are valid events:\n\n=over\n\n=item B<mouse-enter>\n\nFires when the mouse enters a window. This is similar to 'mouse over' events in\njavascript, if that helps.\n\n=item B<mouse-leave>\n\nFires when the mouse leaves a window. This is the opposite of 'mouse-enter'\n\n=item B<mouse-click>\n\nFires when the mouse is clicked. Specifically, when the mouse button is released.\n\n=item B<focus>\n\nFires when the window gets input focus.\n\n=item B<blur>\n\nFires when the window loses focus.\n\n=back\n\nExamples:\n\n # Print the cursor location whenever the mouse enters a currently-visible\n # window:\n xdotool search --onlyvisible . behave %@ mouse-enter getmouselocation\n\n # Print the window title and pid whenever an xterm gets focus\n xdotool search --class xterm behave %@ focus getwindowname getwindowpid\n\n # Emulate focus-follows-mouse\n xdotool search . behave %@ mouse-enter windowfocus\n\n=item B<getwindowpid> I<[window]>\n\nOutput the PID owning a given window. This requires effort from the application\nowning a window and may not work for all windows. This uses _NET_WM_PID\nproperty of the window. See L<EXTENDED WINDOW MANAGER HINTS> below for more\ninformation.\n\nIf no window is given, the default is '%1'. If no windows are on the stack, then\nthis is an error. See L<WINDOW STACK> for more details.\n\nExample: Find the PID for all xterms:\n xdotool search --class xterm getwindowpid %@\n\n=item B<getwindowname> I<[window]>\n\nOutput the name of a given window, also known as the title. This is the text\ndisplayed in the window's titlebar by your window manager.\n\nIf no window is given, the default is '%1'. If no windows are on the stack, then\nthis is an error. See L<WINDOW STACK> for more details.\n\n=item B<getwindowgeometry> [options] I<[window]>\n\nOutput the geometry (location and position) of a window. The values include: x,\ny, width, height, and screen number.\n\n=over\n\n=item B<--shell>\n\nOutput values suitable for 'eval' in a shell.\n\n=back\n\n=item B<getwindowfocus> [-f]\n\nPrints the window id of the currently focused window. Saves the result to the\nwindow stack. See L<WINDOW STACK> for more details.\n\nIf the current window has no WM_CLASS property, we assume it is not a normal\ntop-level window and traverse up the parents until we find a window with a\nWM_CLASS set and return that window id.\n\nIf you really want the window currently having focus and don't care if it has a\nWM_CLASS setting, then use 'getwindowfocus -f'\n\n=item B<windowsize> [options] [window] width height\n\nSet the window size of the given window. If no window is given, %1 is the\ndefault.  See L<WINDOW STACK> and L<COMMAND CHAINING> for more details.\n\nPercentages are valid for width and height. They are relative to the geometry\nof the screen the window is on. For example, to make a window the full width of\nthe screen, but half height:\n\n xdotool windowsize <window> 100% 50%\n\nPercentages are valid with --usehints and still mean pixel-width relative to\nthe screen size.\n\nThe options available are:\n\n=over\n\n=item B<--usehints>\n\nUse window sizing hints (when available) to set width and height.  This is\nuseful on terminals for setting the size based on row/column of text rather\nthan pixels.\n\n=item B<--sync>\n\nAfter sending the window size request, wait until the window is actually\nresized. If no change is necessary, we will not wait. This is useful for\nscripts that depend on actions being completed before moving on.\n\nNote: Because many window managers may ignore or alter the original resize\nrequest, we will wait until the size changes from its original size, not\nnecessary to the requested size.\n\n=back\n\nExample: To set a terminal to be 80x24 characters, you would use:\n xdotool windowsize --usehints <some_windowid> 80 24\n\n=item B<windowmove> I<[options]> I<[window]> I<x> I<y>\n\nMove the window to the given position. If no window is given, %1 is the\ndefault. See L<WINDOW STACK> and L<COMMAND CHAINING> for more details.\n\nIf the given x coordinate is literally 'x', then the window's current x\nposition will be unchanged. The same applies for 'y'.\n\nExamples:\n\n xdotool getactivewindow windowmove 100 100    # Moves to 100,100\n xdotool getactivewindow windowmove x 100      # Moves to x,100\n xdotool getactivewindow windowmove 100 y      # Moves to 100,y\n xdotool getactivewindow windowmove 100 y      # Moves to 100,y\n\nPercentages are valid for width and height. They are relative to the geometry\nof the screen the window is on. For example, to make a window the full width of\nthe screen, but half height:\n\n xdotool windowmove <window> 100% 50%\n\n=over\n\n=item B<--sync>\n\nAfter sending the window move request, wait until the window is actually\nmoved. If no movement is necessary, we will not wait. This is useful for\nscripts that depend on actions being completed before moving on.\n\n=item B<--relative>\n\nMake movement relative to the current window position.\n\n=back\n\n=item B<windowfocus> I<[options]> I<[window]>\n\nFocus a window. If no window is given, %1 is the default. See L<WINDOW STACK>\nand L<COMMAND CHAINING> for more details.\n\nUses L<XSetInputFocus> which may be ignored by some window managers or programs.\n\n=over\n\n=item B<--sync>\n\nAfter sending the window focus request, wait until the window is actually\nfocused. This is useful for scripts that depend on actions being completed\nbefore moving on.\n\n=back\n\n=item B<windowmap> I<[options]> I<[window]>\n\nMap a window. In X11 terminology, mapping a window means making it visible on\nthe screen. If no window is given, %1 is the default. See L<WINDOW STACK> and\nL<COMMAND CHAINING> for more details.\n\n=over\n\n=item B<--sync>\n\nAfter requesting the window map, wait until the window is actually mapped\n(visible). This is useful for scripts that depend on actions being completed\nbefore moving on.\n\n=back\n\n=item B<windowminimize> I<[options]> I<[window]>\n\nMinimize a window. In X11 terminology, this is called 'iconify.'\nIf no window is given, %1 is the default. See L<WINDOW STACK> and\nL<COMMAND CHAINING> for more details.\n\n=over\n\n=item B<--sync>\n\nAfter requesting the window minimize, wait until the window is actually\nminimized. This is useful for scripts that depend on actions being completed\nbefore moving on.\n\n=back\n\n=item B<windowraise> I<[window_id=%1]>\n\nRaise the window to the top of the stack. This may not work on all window\nmanagers. If no window is given, %1 is the default. See L<WINDOW STACK> and\nL<COMMAND CHAINING> for more details.\n\n=item B<windowlower> I<[window_id=%1]>\n\nLower the window to the bottom of the stack. This may not work on all window\nmanagers. If no window is given, %1 is the default. See L<WINDOW STACK> and\nL<COMMAND CHAINING> for more details.\n\n=item B<windowreparent> I<[source_window]> I<destination_window>\n\nReparent a window. This moves the I<source_window> to be a child window of\nI<destination_window>. If no source is given, %1 is the default.\nL<WINDOW STACK> window references (like %1) are valid for both I<source_window>\nand I<destination_window> See L<WINDOW STACK> and L<COMMAND CHAINING> for more\ndetails.\n\n=item B<windowclose> I<[window]>\n\nClose a window. This action will destroy the window, but will not try\nto kill the client controlling it. If no window is given, %1 is the\ndefault. See L<WINDOW STACK> and L<COMMAND CHAINING> for more details.\n\n=item B<windowquit> I<[window]>\n\nClose a window gracefully. This action sends a request, allowing the\napplication to apply close confirmation mechanics. If no window is given, %1\nis the default. See L<WINDOW STACK> and L<COMMAND CHAINING> for more details.\n\n=item B<windowkill> I<[window]>\n\nKill a window. This action will destroy the window and kill the client\ncontrolling it. If no window is given, %1 is the default. See L<WINDOW\nSTACK> and L<COMMAND CHAINING> for more details.\n\n=item B<windowunmap> I<[options]> I<[window_id=%1]>\n\nUnmap a window, making it no longer appear on your screen. If no window is\ngiven, %1 is the default. See L<WINDOW STACK> and L<COMMAND CHAINING> for more\ndetails.\n\n=over\n\n=item B<--sync>\n\nAfter requesting the window unmap, wait until the window is actually unmapped\n(hidden). This is useful for scripts that depend on actions being completed\nbefore moving on.\n\n=back\n\n=item B<set_window> I<[options]> I<[windowid=%1]>\n\nSet properties about a window. If no window is given, %1 is the default. See\nL<WINDOW STACK> and L<COMMAND CHAINING> for more details.\n\nOptions:\n\n=over\n\n=item B<--name newname>\n\nSet window WM_NAME (the window title, usually)\n\n=item B<--icon-name newiconname>\n\nSet window WM_ICON_NAME (the window title when minimized, usually)\n\n=item B<--role newrole>\n\nSet window WM_WINDOW_ROLE\n\n=item B<--classname newclassname>\n\nSet window class name (not to be confused with window class)\n\n=item B<--class newclass>\n\nSet window class (not to be confused with window class name)\n\n=item B<--urgency value>\n\nSet window urgency hint. If the value is 1, the window will be marked urgent,\nand the window manager will somehow highlight it for the user's attention.\nIf the value is 0, the window will be marked non-urgent.\n\n=item B<--overrideredirect value>\n\nSet window's override_redirect value. This value is a hint to the window\nmanager for whether or not it should be managed. If the redirect value is 0,\nthen the window manager will draw borders and treat this window normally. If\nthe value is 1, the window manager will ignore this window.\n\nIf you change this value, your window manager may not notice the change until\nthe window is mapped again, so you may want to issue 'windowunmap' and\n'windowmap' to make the window manager take note.\n\n=back\n\n=back\n\n=head1 DESKTOP AND WINDOW COMMANDS\n\nThese commands follow the EWMH standard. See the section L<EXTENDED WINDOW\nMANAGER HINTS> for more information.\n\n=over\n\n=item B<windowactivate> I<[options]> I<[window]>\n\nActivate the window. This command is different from windowfocus:\nif the window is on another desktop, we will switch to that desktop. It also\nuses a different method for bringing the window up. I recommend trying this\ncommand before using windowfocus, as it will work on more window managers.\n\nIf no window is given, %1 is the default. See L<WINDOW STACK> and\nL<COMMAND CHAINING> for more details.\n\n=over\n\n=item B<--sync>\n\nAfter sending the window activation, wait until the window is actually\nactivated. This is useful for scripts that depend on actions being completed\nbefore moving on.\n\n=back\n\n=item B<getactivewindow>\n\nOutput the current active window. This command is often more reliable than\ngetwindowfocus. The result is saved to the window stack. See L<WINDOW STACK>\nfor more details.\n\n=item B<windowstate> I<[--add PROPERTY]> I<[--remove PROPERTY]> I<[--toggle PROPERTY]> I<[window]>\n\nChange a property on a window. \n\nSome properties may have no effect some windows or in some window managers.\n\nProperties can be any of:\n\n=over\n\n=item MODAL - makes the window into a modal\n\n=item STICKY - makes the window appear on all workspaces\n\n=item MAXIMIZED_VERT - sizes the window maximized vertically\n\n=item MAXIMIZED_HORZ - sizes the window maximized horizontally\n\n=item ABOVE - Show window above all others (always on top)\n\n=item BELOW - Show window below all others\n\n=item SKIP_TASKBAR - hides the window from the taskbar\n\n=item SKIP_PAGER - hides the window from the window pager\n\n=item FULLSCREEN - makes window fullscreen\n\n=item HIDDEN - unmaps the window\n\n=item SHADED - rolls the window up\n\n=item DEMANDS_ATTENTION - marks window urgent or needing attention\n\n=back\n\nThis feature requires a window manager which supports EWMH. Most window managers\nprobably support this :)\n\n=item B<getwindowclassname> I<[window]>\n\nPrints the class name for the window.\n\n=item B<set_num_desktops> I<number>\n\nChanges the number of desktops or workspaces.\n\n=item B<get_num_desktops>\n\nOutput the current number of desktops.\n\n=item B<get_desktop_viewport> I<[--shell]>\n\nReport the current viewport's position. If --shell is given, the output is\nfriendly to shell eval.\n\nViewports are sometimes used instead of 'virtual desktops' on some window\nmanagers. A viewport is simply a view on a very large desktop area.\n\n=item B<set_desktop_viewport> I<x> I<y>\n\nMove the viewport to the given position. Not all requests will be obeyed - some\nwindowmangers only obey requests that align to workspace boundaries, such as\nthe screen size.\n\nFor example, if your screen is 1280x800, you can move to the 2nd workspace by doing:\n xdotool set_desktop_viewport 1280 0\n\n=item B<set_desktop> I<[options]> I<desktop_number>\n\nChange the current view to the specified desktop.\n\n=over\n\n=item B<--relative>\n\nUse relative movements instead of absolute. This lets you move relative to the\ncurrent desktop.\n\n=back\n\n=item B<get_desktop>\n\nOutput the current desktop in view.\n\n=item B<set_desktop_for_window> I<[window]> I<desktop_number>\n\nMove a window to a different desktop. If no window is given, %1 is the\ndefault. See L<WINDOW STACK> and L<COMMAND CHAINING> for more details.\n\n=item B<get_desktop_for_window> I<[window]>\n\nOutput the desktop currently containing the given window. Move a window to a\ndifferent desktop. If no window is given, %1 is the default. See L<WINDOW\nSTACK> and L<COMMAND CHAINING> for more details.\n\n=back\n\n=head1 MISCELLANEOUS COMMANDS\n\n\n=over\n\n=item B<exec> I<[options]> I<command> I<[...]>\n\nExecute a program. This is often useful when combined with behave_screen_edge\nto do things like locking your screen.\n\nOptions:\n\n=over\n\n=item B<--sync>\n\nBlock until the child process exits. The child process exit status is then\npassed to the parent process (xdotool) which copies it.\n\n=back\n\nExamples:\n # Lock the screen when the mouse sits in the top-right corner\n xdotool behave_screen_edge --delay 1000 top-right \\\n   exec gnome-screensaver-command --lock\n # Substitute 'xscreensaver-command -lock' if you use that program.\n\n # The following will fail to move the mouse because we use '--sync' and\n # /bin/false exits nonzero:\n xdotool exec --sync /bin/false mousemove 0 0\n\n # This succeeds, though, since we do not use --sync on the exec command.\n xdotool exec /bin/false mousemove 0 0\n\n=item B<sleep> I<seconds>\n\nSleep for a specified period. Fractions of seconds (like 1.3, or 0.4) are\nvalid, here.\n\n=back\n\n=head1 SCRIPTS\n\nxdotool can read a list of commands via stdin or a file if you want. A script\nwill fail when any command fails.\n\nTruthfully, 'script' mode isn't fully fleshed out and may fall below your\nexpectations. If you have suggestions, please email the list or file a bug (See\nL<CONTACT>).\n\nScripts can use positional arguments (Represented by $1, $2, ...) and\nenvironment variables (like $HOME or $WINDOWID). Quoting arguments should work\nas expected.\n\nScripts are processed for parameter and environment variable expansion and then\nrun as if you had invoked xdotool with the entire script on one line (using\nCOMMAND CHAINING).\n\n=over\n\n=item * Read commands from a file:\n\n xdotool filename\n\n=item * Read commands from stdin:\n\n xdotool -\n\n=item * Read commands from a redirected file\n\n xdotool - < myfile\n\n=back\n\nYou can also write scripts that only execute xdotool. Example:\n\n #!/usr/local/bin/xdotool\n search --onlyvisible --classname $1\n\n windowsize %@ $2 $3\n windowraise %@\n\n windowmove %1 0 0\n windowmove %2 $2 0\n windowmove %3 0 $3\n windowmove %4 $2 $3\n\nThis script will take all windows matched by the classname query given by arg1\n($1) and sizes/moves them into a 2x2 grid with windows sized by the 2nd and 3rd\nparameters.\n\nHere's an example usage:\n\n % ./myscript xterm 600 400\n\nRunning it like this will take 4 visible xterms, raise them, and move them into\na 2x2 tile grid with each window 600x400 pixels in size.\n\n=head1 CLEARMODIFIERS\n\nAny command taking the I<--clearmodifiers> flag will attempt to clear any\nactive input modifiers during the command and restore them afterwards.\n\nFor example, if you were to run this command:\n xdotool key a\n\nThe result would be 'a' or 'A' depending on whether or not you were holding the\nshift key on your keyboard. Often it is undesirable to have any modifiers\nactive, so you can tell xdotool to clear any active modifiers.\n\nThe order of operations if you hold shift while running 'xdotool key --clearmodifiers a' is this:\n\n=over\n\n=item 1. Query for all active modifiers (finds shift, in this case)\n\n=item 2. Try to clear shift by sending 'key up' for the shift key\n\n=item 3. Runs normal 'xdotool key a'\n\n=item 4. Restore shift key by sending 'key down' for shift\n\n=back\n\nThe I<--clearmodifiers> flag can currently clear of the following:\n\n=over\n\n=item * any key in your active keymap that has a modifier associated with it.\n(See L<xmodmap(1)>'s 'xmodmap -pm' output)\n\n=item * mouse buttons (1, 2, 3, 4, and 5)\n\n=item * caps lock\n\n\n=back\n\n=head1 SENDEVENT NOTES\n\nIf you are trying to send key input to a specific window, and it does not\nappear to be working, then it's likely your application is ignoring the events\nxdotool is generating. This is fairly common.\n\nSending keystrokes to a specific window uses a different API than simply typing\nto the active window. If you specify 'xdotool type --window 12345 hello'\nxdotool will generate key events and send them directly to window 12345.\nHowever, X11 servers will set a special flag on all events generated in this\nway (see XEvent.xany.send_event in X11's manual). Many programs observe this\nflag and reject these events.\n\nIt is important to note that for key and mouse events, we only use\nL<XSendEvent> when a specific window is targeted. Otherwise, we use L<XTEST>.\n\nSome programs can be configured to accept events even if they are generated by\nxdotool. Seek the documentation of your application for help.\n\nSpecific application notes (from the author's testing):\n* Firefox 3 seems to ignore all input when it does not have focus.\n* xterm can be configured while running with ctrl+leftclick, 'Allow SendEvents'\n* gnome-terminal appears to accept generated input by default.\n\n=head1 WINDOW STACK\n\nCertain commands (search, getactivewindow, getwindowfocus) will find windows\nfor you. These results generally printed to stdout, but they are also saved\nto memory for future use during the lifetime of the xdotool process. See\nL<COMMAND CHAINING> for more information.\n\nThe only modifications support for the window stack are to replace it. That is,\ntwo of two sequential searches, only the last one's results will be the window\nstack.\n\n=head1 COMMAND CHAINING\n\nxdotool supports running multiple commands on a single invocation. Generally,\nyou'll start with a search command (see L<WINDOW STACK>) and then perform a\nset of actions on those results.\n\nTo query the window stack, you can use special notation \"%N\" where N is a\nnumber or the '@' symbol. If %N is given, the Nth window will be selected from\nthe window stack. Generally you will only want the first window or all windows.\nNote that the order of windows in the window stack corresponds to the window\nstacking order, i.e. the bottom-most window will be reported first (see\nXQueryTree(3)). Thus the order of the windows in the window stack may not be\nconsistent across invocations.\n\nThe notation described above is used as the \"window\" argument for any given\ncommand.\n\nFor example, to resize all xterms to 80x24:\n\n xdotool search --class xterm -- windowsize --usehints %@ 80 24\n\nResize move the current window:\n\n xdotool getactivewindow windowmove 0 0\n\nIn all cases, the default window argument, if omitted, will default to \"%1\". It is\nobviously an error if you omit the window argument and the window stack is empty. If you\ntry to use the window stack and it is empty, it is also an error.\n\nTo activate the first firefox window found:\n\n xdotool search --class firefox windowactivate\n\nThese would error:\n\n xdotool windowactivate\n xdotool windowactivate %1\n xdotool windowactivate %@\n\nWhen xdotool exits, the current window stack is lost.\n\nAdditionally, commands that modify the L<WINDOW STACK> will not print the\nresults if they are not the last command. For example:\n\n # Output the active window:\n % xdotool getactivewindow\n 20971533\n\n # Output the pid of the active window, but not the active window id:\n % xdotool getactivewindow getwindowpid\n 4686\n\n=head1 EXTENDED WINDOW MANAGER HINTS\n\nThe following pieces of the EWMH standard are supported:\n\n=over\n\n=item _NET_SUPPORTED\n\nAsks the window manager what is supported\n\n=item _NET_CURRENT_DESKTOP\n\nQuery and set the current desktop. Support for this enables these commands:\nC<set_desktop>, C<get_desktop>.\n\n=item _NET_WM_DESKTOP\n\nQuery and set what desktop a window is living in. Support for this enables\nthese commands: C<set_desktop_for_window>, C<get_desktop_for_window>.\n\n=item _NET_ACTIVE_WINDOW\n\nAllows you to query and set the active window by asking the window manager to\nbring it forward. Support for this enables these commands: C<windowactivate>, C<getactivewindow>.\n\n=item _NET_WM_PID\n\nThis feature is application dependent, not window-manager dependent. Query the\nPID owning a given window. Support for this enables these commands:\nC<getwindowpid>.\n\n=back\n\n=head1 SUPPORTED FEATURES\n\nxdotool (and libxdo) will try to function under all circumstances. However, there may\nbe some cases where functionality is not provided by your X server or by your\nwindow manager. In these cases, xdotool will try to detect and tell you if an action\nrequires a feature not currently supported by your system.\n\nFor window-manager specific features, see L<EXTENDED WINDOW MANAGER HINTS>.\n\n=over\n\n=item XTEST\n\nIf your X server does not support XTEST, then some typing and mouse movement\nfeatures may not work. Specifically, typing and mouse actions that act on the\n\"current window\" (window 0 in libxdo) are unlikely to work.\n\nIn most cases, XTEST is a feature you can enable on your X server if it is\nnot enabled by default.\n\nYou can see the list of supported X extensions by typing 'xdpyinfo' and looking\nthe text 'number of extensions: ...'\n\n=back\n\n=head1 BUGS\n\nTyping unusual symbols under non-us keybindings is known to\noccasionally send the wrong character.\n\n=head1 SEE ALSO\n\nL<xprop(1)>, L<xwininfo(1)>,\n\nProject site: L<http://www.semicomplete.com/projects/xdotool>\n\nSource code and Issues: L<https://github.com/jordansissel/xdotool>\n\nEWMH specification: L<http://standards.freedesktop.org/wm-spec/wm-spec-1.3.html>\n\n=head1 CONTACT\n\nPlease send questions to xdotool-users@googlegroups.com. File bugs and feature requests at the following URL:\n\nL<https://github.com/jordansissel/xdotool/issues>\n\nAlternately, if you prefer email, feel free to file bugs by emailing the list.\nWhat works for you :)\n\n=head1 AUTHOR\n\nxdotool was written by Jordan Sissel.\n\nThis manual page was written originally by Daniel Kahn Gillmor\nE<lt>dkg@fifthhorseman.netE<gt> for the Debian project (but may be\nused by others). It is maintained by Jordan Sissel.\n\nPatches, ideas, and other contributions by many, nice folks. See the CHANGELIST\nfile for who provided what.\n\n=cut\n"
        }
      ]
    }
  ]
}