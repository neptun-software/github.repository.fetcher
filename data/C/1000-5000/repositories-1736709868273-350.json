{
  "metadata": {
    "timestamp": 1736709868273,
    "page": 350,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "espruino/Espruino",
      "stars": 2820,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gdbinit",
          "type": "blob",
          "size": 2.404296875,
          "content": "break jsAssertFail\nbreak jsError\ndefine jsvTrace\n  print jsvTrace($arg0, 0)\nend   \ndefine whereami\n print jslPrintPosition(jsiConsolePrintString, 0, lex->tokenLastStart)\n print jslPrintTokenLineMarker(jsiConsolePrintString, 0, lex->tokenLastStart, 0)\nend\ndefine typeof\n  if (($arg0)->flags&JSV_VARTYPEMASK)>=JSV_NAME_STRING_0 && (($arg0)->flags&JSV_VARTYPEMASK)<=JSV_NAME_STRING_MAX\n    printf \"JSV_NAME_STRING_%d\\n\", (($arg0)->flags&JSV_VARTYPEMASK)-JSV_NAME_STRING_0\n  end\n  if (($arg0)->flags&JSV_VARTYPEMASK)>=JSV_NAME_STRING_INT_0 && (($arg0)->flags&JSV_VARTYPEMASK)<=JSV_NAME_STRING_INT_MAX\n    printf \"JSV_NAME_STRING_INT_%d\\n\", (($arg0)->flags&JSV_VARTYPEMASK)-JSV_NAME_STRING_INT_0\n  end\n  if (($arg0)->flags&JSV_VARTYPEMASK)>=JSV_STRING_0 && (($arg0)->flags&JSV_VARTYPEMASK)<=JSV_STRING_MAX\n    printf \"JSV_STRING_%d\\n\", (($arg0)->flags&JSV_VARTYPEMASK)-JSV_STRING_0\n  end\n  if (($arg0)->flags&JSV_VARTYPEMASK)>=JSV_STRING_EXT_0 && (($arg0)->flags&JSV_VARTYPEMASK)<=JSV_STRING_EXT_MAX\n    printf \"JSV_STRING_EXT_%d\\n\", (($arg0)->flags&JSV_VARTYPEMASK)-JSV_STRING_EXT_0\n  end\n  print (JsVarFlags)(($arg0)->flags&(JSV_VARTYPEMASK))\nend\ndefine asm\n  set  disassemble-next-line on\n  show disassemble-next-line\n  echo now use stepi \nend\n# Watchdog timer off for NRF52 devices\ndefine wdt_off\n  p (*(uint32_t*)0x4001050C)=1\nend\ndefine execflags\n  if execInfo.execute==0\n    printf \"EXEC_NO\\n\"\n  end\n  if execInfo.execute&EXEC_YES\n    printf \"EXEC_YES\\n\"\n  end\n  if execInfo.execute&EXEC_BREAK\n    printf \"EXEC_BREAK\\n\"\n  end\n  if execInfo.execute&EXEC_CONTINUE\n    printf \"EXEC_CONTINUE\\n\"\n  end\n  if execInfo.execute&EXEC_RETURN\n    printf \"EXEC_RETURN\\n\"\n  end\n  if execInfo.execute&EXEC_INTERRUPTED\n    printf \"EXEC_INTERRUPTED\\n\"\n  end\n  if execInfo.execute&EXEC_EXCEPTION\n    printf \"EXEC_EXCEPTION\\n\"\n  end\n  if execInfo.execute&EXEC_ERROR\n    printf \"EXEC_ERROR\\n\"\n  end\n  if execInfo.execute&EXEC_ERROR_LINE_REPORTED\n    printf \"EXEC_ERROR_LINE_REPORTED\\n\"\n  end\n  if execInfo.execute&EXEC_FOR_INIT\n    printf \"EXEC_FOR_INIT\\n\"\n  end\n  if execInfo.execute&EXEC_IN_LOOP\n    printf \"EXEC_IN_LOOP\\n\"\n  end\n  if execInfo.execute&EXEC_IN_SWITCH\n    printf \"EXEC_IN_SWITCH\\n\"\n  end\n  if execInfo.execute&EXEC_CTRL_C\n    printf \"EXEC_CTRL_C\\n\"\n  end\n  if execInfo.execute&EXEC_CTRL_C_WAIT\n    printf \"EXEC_CTRL_C_WAIT\\n\"\n  end\nend\n\ndefine hook-stop\n    set $primask=1\nend\n\ndefine hook-run\n    set $primask=0\nend \n\ndefine hook-continue\n    set $primask=0\nend\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.392578125,
          "content": "# Auto detect text files and perform LF normalization\r\n* text=auto eol=lf\r\n\r\n# Custom for Visual Studio\r\n*.cs     diff=csharp\r\n\r\n# Standard to msysgit\r\n*.doc\t diff=astextplain\r\n*.DOC\t diff=astextplain\r\n*.docx diff=astextplain\r\n*.DOCX diff=astextplain\r\n*.dot  diff=astextplain\r\n*.DOT  diff=astextplain\r\n*.pdf  diff=astextplain\r\n*.PDF\t diff=astextplain\r\n*.rtf\t diff=astextplain\r\n*.RTF\t diff=astextplain\r\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.6298828125,
          "content": "*~\n*.pyc\n/gen/*\n/bin/*\n/bin_*/*\n/obj/*\n/.vagrant/*\n/boards/*.html\n/boards/*.json\n/boards/*_CUSTOM.py\n/zipcontents\n/tmp\n/benchmark/*.txt\n/benchmark/*.result.json\n/espruino\n/archives/*\n/diffs/*\n/.cproject\n/.project\n/.settings\n/MDN_URLS.txt\nnode_modules\n/build/\n/esp_iot_sdk_v1.5.0\n/esp_iot_sdk_v2.0.0.p1\n/ESP8266_NONOS_SDK-2.2.1\n/xtensa-lx106-elf\n/app\n/esp-idf\n/esp-idf-4\nxtensa-esp32-elf\ngcc-arm-none-eabi*\narm-gnu-toolchain*\n*.c#\n/function_keywords.js\n/functions.html\n/targetlibs/emscripten/emsdk\n/targetlibs/nrf5x_11\n/targetlibs/nrf5x_12/examples\n/targetlibs/nrf5x_12/documentation/\n/targetlibs/nrf5x_14\n/targetlibs/nrf5x_15/components\n/targetlibs/nrf5x_15/example_config\n/targetlibs/nrf5x_15/examples\n/targetlibs/nrf5x_15/external\n/targetlibs/nrf5x_15/external_tools\n/targetlibs/nrf5x_15/integration\n/targetlibs/nrf5x_15/modules\n/targetlibs/nrf5x_15/config\n/targetlibs/nrf5x_15/license.txt\n/targetlibs/nrf5x_15_3/components\n/targetlibs/nrf5x_15_3/example_config\n/targetlibs/nrf5x_15_3/examples\n/targetlibs/nrf5x_15_3/external\n/targetlibs/nrf5x_15_3/external_tools\n/targetlibs/nrf5x_15_3/integration\n/targetlibs/nrf5x_15_3/modules\n/targetlibs/nrf5x_15_3/config\n/targetlibs/nrf5x_15_3/documentation\n/targetlibs/nrf5x_15_3/license.txt\n/targetlibs/nrf5x_15_3/nRF5x_*\n/targetlibs/nrf5x_15x\n/targetlibs/nrf5x_mesh\n/targetlibs/nrf5x_17/components\n/targetlibs/nrf5x_17/examples\n/targetlibs/nrf5x_17/external\n/targetlibs/nrf5x_17/integration\n/targetlibs/nrf5x_17/modules\n/targetlibs/nrf5x_17/config\n/targetlibs/nrf5x_17/documentation\n/targetlibs/raspberrypi\n/js\n/.vscode\n/CURRENT_BOARD.make\n/topreadonly\n/topstrings\n/misc\n*.user\n*.jdebug\n*.code-workspace\n/espruino_embedded.*\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.2373046875,
          "content": "Contributing\n=============\n\nThanks for thinking about contributing to Espruino! Anything you can add is hugely appreciated, but please can you follow a few simple rules:\n\n\nSupport / Bugs\n--------------\n\nFirst, please try and check that your problem hasn't [already been found](https://github.com/espruino/Espruino/issues) or [covered on our forum](http://www.espruino.com/Forum).\n\n**Do not post 'it doesn't work for me' / 'I can't connect' / 'How do I make a foobar' issues.** Please ask these on the [forum](http://www.espruino.com/Forum) where you will get a much more helpful response. Issues posted here should be for actual software bugs or feature requests.\n\n[Submit bugs](https://github.com/espruino/Espruino/issues) with clear steps to reproduce them: a minimal test case, and an actual and expected result. If you can't come up with these, please [post on the forum](http://www.espruino.com/Forum) first as it may just be something in your code that we can help out with.\n\nWork on Espruino is supported by [sales of our boards](http://www.espruino.com/Order).\n\n**If your board isn't made by us but came pre-installed with Espruino then you should contact the manufacturers.**\n\nWe try and support users of the boards we sell, but if you bought a non-official board your issue may not get addressed. In this case, please consider [donating](http://www.espruino.com/Donate) to help cover the time it takes to fix problems (even so, we can't guarantee to fix every problem).\n\n\nDocumentation\n-------------\n\nImprovements to Documentation are amazingly helpful, and are very rare so hugely appreciated.\n\n### Functions/Variables\n\nIf you want to change something in a [built-in function's documentation](http://www.espruino.com/Reference), look at the heading for the function on that page and there will be a right-arrow (â‡’).\n\nIf you click on that it will bring you to the area of Espruino's source code where the function *and the documentation for it* are stored. You can then edit the documentation in that file (above the function) on GitHub and issue a pull request - it's in Markdown format.\n\n### Tutorials\n\nPlease [see here](http://www.espruino.com/Writing+Tutorials)\n\n### Other\n\nIf there's something specific to an area of the Espruino interpreter *that can't be put in a source file*, please create a Markdown (`.md`) file in the relevant area, and make sure you link to it from other relevant files so it can be found.\n\n\nContributing Code\n-----------------\n\n### Modules\n\nPlease [see here](http://www.espruino.com/Writing+Modules)\n\n### Espruino code\n\n* Please keep the same coding style (See **Coding Style** below)\n* Keep the minimum amount of changes in each pull request/commit (this really helps with debugging later on)\n* Try not to commit huge whitespace/refactoring changes along with your fix\n* Avoid adding newlines, spaces, refactoring everything or renaming things to your own personal style (some things really could do with renaming, but please check first or we may reject your pull request)\n* Ensure that you are not contributing someone else's code, and that you are willing to add your code under Espruino's MPL Licence\n* Make sure that what you do doesn't break the Espruino board or the other boards we build for. We can't check all the boards for every commit, so if you break something you'll annoy a whole bunch of people.\n* Be aware that Espruino is designed for Microcontrollers - with very low amounts of flash and memory. Both are at a premium so don't statically allocate variables or do other stuff that will use up RAM.\n* Don't add a whole bunch of indirection/abstraction for the sake of it - it'll probably just use more of our precious memory.\n* If you add a new API, try and make it familiar to Arduino/JavaScript users.\n* Please [RUN THE TESTS](tests/README.md) before and after your changes to check that there are no regressions\n* Finally, please issue us a pull request to [www.github.com/espruino](https://www.github.com/espruino/Espruino) via GitHub. It's way easier for us to incorporate, give credit, and track changes that way.\n\n\nTarget Areas\n-----------\n\nWe'll keep the outstanding issues in [GitHub's issue list](https://github.com/espruino/Espruino/issues), but general stuff that would really help us is:\n\n* **Tests** If something doesn't work, please make a test for it. Even if you don't fix it it'll help others greatly. Bonus points if it's in a pull request :)\n* **Documentation** Improving the documentation (either the [EspruinoDocs](https://github.com/espruino/EspruinoDocs) project, source code, the auto-generated reference, or the Markdown files in this project) would be fantastic.\n* **Duplication** If the same code is used for multiple platforms, try and make sure it's shared, not duplicated.\n* **Remove hard-coded stuff** Some things are still hard-coded with ifdefs for each board - we want all that stuff to be generated from `build_platform_info.py` using the board definition file.\n* **Speed** There are a few areas this could be improved - but please benchmark what you're doing both before and afterwards on the Espruino board to check that what you've done helps.\n* **Memory Usage** Both RAM and Flash are at a premium. Ways of reducing this (including stack usage) and making usage more efficient are really appreciated.\n* **JavaScript compliance** - without affecting speed or memory usage too much\n\n\nCoding Style\n-----------\n\nThe rough coding style is as follows, but you should get a good idea from the code. If we've missed anything obvious please let us know!\n\n* Unix file format (`CR`, not `CR LF` for newlines)\n* 2 spaces for indents\n* Open curly braces on the same line\n* No Tabs used, only spaces\n* Use `bool` for booleans - not `int`\n* ```//``` comments for single lines, ```/* ... */``` for multiple lines\n* Half-hearted Doxygen compatibility: use ```///<``` for function/variable declaration documentation (if on same line), and ```/** ... */``` if doing it right before a function\n* If you're adding comments to a function, make sure they're in the header file, and if you are going to add comments in the source, make sure the two match.\n* Do not add `setFooBar // This sets the Foo to Bar` style comments to functions/variables. Only add comments if they *add something that is not obvious from the declaration itself*\n* Use new lines in code sparingly (only where it really makes sense)\n\n\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 236.7412109375,
          "content": "          : nRF5x: ensure TIMER1_IRQHandler doesn't always wake idle loop up (fix #1900)\n            Puck.js: On v2.1 ensure Puck.mag behaves like other variants - just returning the last reading (avoids glitches when used with Puck.magOn)\n\n     2v25 : ESP32C3: Get analogRead working correctly\n            Graphics: Adjust image alignment when rotating images to avoid cropping (fix #2535)\n            Bangle.js1: Switch to space-optimised sin/atan/atan2 to save enough space to continue building\n            ESP32C3: don't allow AP *AND* STA mode at the same time - solves issues when just calling 'wifi.connect' at boot\n            Emulator: ensure we include CallFunction stubs for Promises (fix regression after Promise refactor)\n            Pin.getInfo() now returns 'output' and 'mode' values, allowing the state of the output register to be queried\n            E.sendUSBHID now returns false if USB disconnected\n            (new Array(3)).includes(undefined) fix\n            USB: Disable software flow control as USB itself handles flow control\n            Graphics.createArrayBuffer can now be given an ArrayBuffer on initialisation (so it doesn't always try and allocate one)\n            Added packet transfer protocol for reliable code/file uploads - see README_Protocol.md\n            STM32F4: shorter timeout used for I2C/etc\n            STM32: add E.getClock() for retrieving more info on system clocks\n            Graphics: g.setColor(-1) now sets color to 0xFFFF (previously it would break antialiasing)\n            Added I2C.unsetup function\n            STM32: Stay away when USB is connected, even if no app is reading\n            Remove Ctrl-A/D/E/U/W code handling to free up flash space (the IDE/or VT100 terminals all use escape codes)\n            Ensure that 1%0.0===NaN (fix #2556)\n            Ensure Number(\"1A\")==NaN, previously we just parsed the digits we could (fix #2555)\n            First argument of operators is now dereferenced before parsing second argument (fix #2547)\n            Ensure x%Infinity===x (fix #2542)\n            Bangle.js: Remove meridian from default locale.time function (to match 'Languages' app)\n            nRF5x: When finding the CCCD for a Bluetooth Characteristic, now check at +2 as well as +1 (fix Bluefruit NUS TX)\n            Jolt.js: Increase Storage area from 40kb to 400kb\n            nRF5x: Don't add BLE UART write events into the input buffer\n            ESP32: Timers are now turned off when requested - digitalPulse/soft pwm/writeAtTime more accurate\n            Bangle.js2: Remove debug log messages from E.showScroller\n            STM32F4: Update stm32f4xx_ll_usb to fix over-buffered USB CDC tx after being woken from deep sleep\n            Waveform: Add 'npin' option to allow +/- output on two pins\n            Waveform: Add ability to play directly from Storage\n            Puck.js: Remove networking support from default build, add PUCKJS_NETWORK -> espruino_2vxx_puckjs_network.zip builds for those that need it\n            Bangle.js: Added fastpaths for 2 and 4 bit arraybuffers, and massively improve 1 bit fills\n            Graphic.createArrayBuffer msb now defaults to true as it's rare to ever need msb:false\n            Ensure Math.random() can never be `1` as per spec (was unlikely before, but possible)\n            Add Math.randInt: not in spec, but very useful for embedded\n            Fix debugging of switch statements (fix #2562)\n            Network: enable parsing of 'https' URL and TLS flag even even TLS not built in (#2410)\n            removeListener while executing events no longer stops subsequent listeners from executing (#2151)\n            jsvObjectIterator is now safe even if not called on something iterable\n            X.on now always allocates an array - tidies up code (fix #2559)\n            Bangle.js: E.showMenu no longer sends the internal `l` menu object as argument when running the callback function.\n            Bangle.js2: GPS request RMC packet automatically (so GPS speed/time work even without AGPS) (fix #2354)\n            Bangle.js2: GPS now detects binary CASIC packets and splits them into their own GPS-raw event\n            Bangle.js2: Pass the modified touch event on through both E.showScroller and E.showMenu (to enable more complex interaction with menus).\n            Bangle.js: Add Bangle.setOptions({manualWatchdog:true}) to enable users to supply their own JS watchdog\n            Bangle.js2: DFU update from flash now retries if CRC doesn't match\n            Bangle.js2: Bootloader now shows 'Hold button to turn on' to avoid users assuming it is dead when it's not\n            Bangle.js2: Bootloader now 'Hold BTN to reboot' not 'BTN1 = REBOOT'/etc\n            ESP32C3: don't kick connected BLE devices off if reset() is called\n            ESP32C3: disable warnings about \"BT_BTM: BTM_GetSecurityFlags false\"\n            Handle semicolons between field declarations in classes\n            Ensure that pretokenised Strings are loaded as Flat Strings when executed from a String in RAM\n            E.nativeCall also checks to see if getting data as a flat string failed (could have caused segfault)\n            Fix for regression after #2547 fix (left hand operand of maths with a valueOf method)\n            X.on now allocates a new array for each new handler added, stops new handlers being called for the event that's currently being handled (#2559)\n            RegExp: add optimisation for RegExp that is simply checking if a string ends with something\n            Bangle.js: .setUI now only clears back widget if it hasn't been hidden by widget_utils\n            Fix UtilTimer timings when new task added infront of existing tasks (fix #2575)\n            Graphics: Fix issue where drawLine for 2px horizontal lines only drew a 1px dot\n            nRF52: Add E.setComparator to enable interrupts from LPCOMP\n            Add Serial.isConnected to check if Bluetooth/USB/etc actually connected\n            Pixl.js: Remove Wiznet W5100 support from default build (there's now a espruino_#v##_pixljs_wiznet.zip without JIT enabled) to ensure we have enough flash to continue builds\n            Enable nostartfiles optimisation for Pixl,MDBT42 and nRF52DK\n            STM32F4: Add SDIO support\n            STM32: Ensure we kick the WDT if auto kicking is enabled and in deep sleep (avoids having to to it manually and wait 30ms for USB to wake up/shut down)\n            Allow a 'file receive' packet which can request Espruino sends a file as binary packets (also fix files not being closed if transmission fails)\n            Fix parsing of semicolons in DO with a statement: `do print(a);while(a--);`\n            In SAVE_ON_FLASH builds (Microbit 1) remove getSerial, Math.LN*/LOG*SQRT* constants, passwords, Serial/I2C/SPI.find, Date.toUTCString\n            ESP32: add setIP and setAPIP \n            Graphics.wrapString fix issue with missing final char if immediately after a '.' or other char we can split after (#2572)\n            Graphics: g.dump/asBMP can now output 16 bit images\n            Crypto: Add support for AES CCM (enabled on Bangle.js 2) \n            Add Serial over SWD vis RTT (enabled on Bangle.js 2)\n            \n     2v24 : Bangle.js2: Add 'Bangle.touchRd()', 'Bangle.touchWr()'\n            Bangle.js2: After Bangle.showTestScreen, put Bangle.js into a hard off state (not soft off)\n            Fix for unexpected power draw on newest batch of Bangle.js devices\n            Puck.js: skip CRT startup code to save ~300b\n            Fix memory leak when using Pin.getInfo on a pin with ADCs (and non-reporting of analogs)\n            Puck.js/Jolt.js: Ensure that firmware update ZIPs *do not* perform a self test at boot until they pass (only hex files that are used at the factory do)\n            Bangle.js2: If tapping at the bottom of the screen on a menu that is <12px onscreen, choose the menu item above (#3476)\n            Bangle.js: Ensure that the first button press event after a reboot is propagated to setWatch\n            Fix lexing of regex at the start of a if/loop (#2529)\n            ESP32: remove interrupt on/off code as it just causes a crash\n            ESP32: jshPinWatch now returns correct value (event ID vs pin number)\n            JS in the binary now uses jspExecuteJSFunctionCode which helps to skip a parsing step\n            JS modules that are included are now pretokenised\n            Bangle.js2: Now using pre-minified showRecoveryMenu and showTestScreen\n            Bangle.js2: Including Layout module in internal flash\n\n     2v23 : Fix XON/OFF thresholds to be based off the correct buffer size\n            Bangle.js2: Added BANGLE2_IFLASH target for firmware using internal flash for js files (currently only partially working)\n            Storage: If using internal+external, automatically put .bootcde and any libs in internal (as well as .js and .boot0)\n            Bangle.js2: Allow configuring device privacy to use random BLE addresses\n            Fix STM32 Nucleo regression from ESPR_PACKED_SYMPTR\n            Fixed issue with static fields in classes if defined before the constructor (fix #2517)\n            Jolt.js: ensure GPIO attached to outputs always default to input at startup\n            Graphics: Fix drawString centered multi-line alignment with UTF8 (fix #2519)\n            Bangle.js2: Fix 2v22 regression of overlays starting at nonzero offsets (#2520)\n            nRF52: Fix 2v22 regression that caused timekeeping to be off by ~500ppm\n         \n     2v22 : Graphics: Ensure floodFill sets modified area correctly\n            nRF52: Lower expected BLE XTAL accuracy to 50ppm (can improve BLE stability on some Bangle.js 2)\n            Emulator: force stack alignment of 'data' variable when accessing ArrayBuffers (fix #2463)\n            Swapped GCC version from 8.2.1 to 13.2.1 (fix #2455)\n            nRF52: Write flash in 2k blocks (not 4k) as SD 6.1.1 can crash (probably good for earlier SD too)\n            g.wrapString fix issues wrapping long words in UTF8 strings over multiple lines\n            Bangle.js2: Fix parsing of UTF8 strings containing char codes 0xF5..0xFF (which are not valid UTF8)\n            nRF52: Added window/interval arguments to NRF.setScan (default was 100ms)\n            nRF52840: setScan({... phy:\"both\"}) now means coded+1mbps (ref #2465)\n            Added 'globalThis' var as it's the ECMAScript version of Node.js's 'global'\n            Bangle.js: Bangle.setUI's back widget now uses stopEventPropagation to stop other touch handlers getting called\n            Improvements to Stepper module (default to absolute movement)\n            Throw error if there's an attempt to use Tagged Templates (fix #2475)\n            For built-in symbols, pack string offset inside function pointer, saving 2 bytes/symbol if ESPR_PACKED_SYMPTR set (fix #2405)\n            Graphics: font metrics for PBF now account for scale, setFontPBF takes a scale argument, 'PBF' no longer appears in getFonts\n            Ensure require(\"Storage\").writeJSON(\"test.json\", new Date()) writes `Date.toISOString()` as in JSON.stringify and 2v19+earlier\n            E.toJSON now uses `.toJSON` function if available on object\n            Puck.js/Jolt.js: ensure self-test keeps re-running at boot unless it has passed\n            Bangle.js: Locale currency deprecated, 'number' updated to BangleApps version with thousands separator, date now doesn't sometimes have trailing spaces\n            Bangle.js: 6x15 font tweaks for ISO8859-1\n            Bangle.js2: Fix 'UNFINISHED STRING' error if non-UTF8 char within UTF8 start char range is at end of string\n            Bangle.js2: Add Bangle.setOptions({lcdDoubleRefresh:true}) to pulse EXTCOMIN for LCD twice, avoiding contrast 'toggle' effect when viewing LCD off axis\n            Graphics: Fix wrapString when attempting to wrap text containing an image that's too large for the wrappable area (fix #2481)\n            Add String.replaceAll to allow all occurrances of a string to be replaced (previously .replace(/substr/g, \"\") had to be used)\n            Jolt.js: Jolt.Q0/1/2/3 now available as global vars (Q0/1/2/3)\n            Storage.readJSON will now read numeric field names like \"{1:1}\" which can be produced by writeJSON (fix #2484)\n            Ensure `Bangle.load(\".bootcde\")` just calls `load()` if no uiRemove - fix error loading clock without widgets\n            Forward errors encountered while loading modules back into Espruino (fix #2485)\n            JIT: Fix issue where the 'jit' keyword got included in compiled code\n            JIT: If using a builtin global function (eg digitalWrite), use it directly rather than searching by name\n            JIT: Store type in 'vars' list so we're not having to jsvSkipName if we know it's not a name\n            JIT: Fix passing function parameters to object constructors (also arrays) (fix #2480)\n            Change 'hidden root' timers/watches callback->cb and interval->intr to save 2 vars per interval and make processing faster\n            Jolt.js: Add an 'auto' motor driver mode, and make it the default\n            digitalWrite: ensure `digitalWrite(pins, true)` sets *all* pins to `true`, not just the first\n            ESP32: Fix setServices with 128bit UUIDs, fix NRF.setServices' onWrite and notify/indicate\n            Add E.getPowerUsage() to get estimated power usage of a device based on what internal hardware is powered on and CPU use\n            Use shorter Puck.selfTest messages to save a bit of flash storage space\n            Bangle.js2: Bangle.showTestScreen now shows firmware and battery\n            Bangle.js1: After updating compiler, we need to add NOPs into display code to slow it down\n            Graphics: Fix g.setFontPBF(font) if no second argument for scale is provided\n            Add support for static+nonstatic fields in Classes\n            Graphics: fix endianness of palette when used with `g.asImage`\n            Fix issue using String.replace on flash-based (read only) strings\n            Bangle.js2: Stop Bangle.setLCDBrightness turning the LCD backlight on \n            Graphics.drawImages: add 'compose' and 'palette' operators to allow one image to be composed on another (for instance XOR on background)\n            Bangle.js2: Bangle.setOptions({lowResistanceFix:1}) now provides a workaround for Bangle.js owners that have a Bangle with a button that appears stuck on\n            Bangle.js: Remove calls to require('locale').translate in menus as it's been deprecated and replaced with /*LANG*/\n            Fix potential MEMORY_BUSY caused by Date requesting an integer from a var\n              - also speed up ObjectGetInteger by not requiring a new var to be allocated to unpack a NAME_INT\n            jsvSkipName speed improvements by avoiding repeated masking of flags\n            No longer call jsvKill/Init when resetting, but just jsvReset (this avoids free+malloc on ESP32)\n            Bangle.js2: Bangle.setLCDOverlay can now take an object with {id:str, remove:fn} to deal with multiple users of overlays better\n            Bangle.js1: Fix issue where going out of and back into a menu would cause 'Back' to be added twice (fix #2470)\n            Bangle.js2: Added Graphics.filter (to allow gaussian/etc filters to be applied to graphics instances for borders/blur)\n            Graphics.drawImages layer x/y can now be non-integer (smoother movement on scaled/rotated images)\n            Puck.js: Fix Puck.selfTest() regression\n\n     2v21 : nRF52: free up 800b more flash by removing vector table padding\n            Throw Exception when a Promise tries to resolve with another Promise (#2450)\n            Add 'lcdBufferPtr' to Bangle.getOptions\n            Allow E.nativeCall to take 32 bit floats (eg for Inline C)\n            Add built-in Stepper motor handling with the `Stepper` class (if enabled in build)\n            Fix issue requesting constructor of builtin before the class itself has been accessed (fix #2451)\n            Allow pretokenisation to store raw, unencoded Strings for speed/efficiency\n            Automatic decoding and pretokenisation of 'atob(\".....\")' strings\n            Pull out pretokenisation on SAVE_ON_FLASH boards (pretokenised code can be executed, it's just not tokenised in Espruino - saves 1kb)\n            Bangle.js: Fix out of bounds coordinates in LCD code that caused screen corruption on newer GCC builds (#2455)\n            Bangle.js2: In flash bootloader, don't store flash write code in RAM (no need) (fix #2458)\n            Remove 65535-char max native string length restriction introduced in 2v20 on devices that could support more like Bangle.js 2\n            E.memoryArea(0, ...) now returns `undefined`\n            Fix issue using Flat/Flash/Native Strings to create fields in objects\n            Optimise pretokenised Strings so we load very short strings direct to RAM\n            Add jsvGet...Child functions to replace common call patterns - saves 280 bytes on Pico\n            Fix issue with g.wrapString when running on flash-based strings\n            Fix lock leak when using flat/flash/native strings as object indices\n            Fix g.wrapString lockup if wrap width is less than the character width\n            Fix potential for crash after ReferenceError during function declaration (fix #2457)\n            STM32: (Original/Pico/WiFi) if USB connected but PC not receiving data, throw away USB data rather than blocking (fix #2446)\n            Move commonly used sequences of function calls into functions (eg jsvRemoveChild,jsvUnLock -> jsvRemoveChildAndUnLock) - saves ~200b            \n\n     2v20 : Ensure String.charCodeAt returns NaN for out of bounds chars\n            Bangle.js2: When rendering overlays, *do not* use the current FG/BG color for 1 bit overlays\n            nRF52 SDK15: Fix UART when >1 central link enabled\n            Bangle.js2: Allow 2 central links at once\n            Fix `if (0);\"test\"||fail()` 2v19 regression - strings after if(0) didn't get interpreted \n            Ensure eval(\"1;;;\")==1 - eval(\"1;\")==1 before, but not eval(\"1;;\")            \n            Ensure AssignmentExpr returns the value of LHS, not the LHS. `(a=2)=3` now fails (as per spec)\n            Ensure default args for arrow functions fail with error `(a,b=3)=>a+b` now fails (until default args get added)\n            nRF52: bootloader asks for connection interval 7.5->30ms now, not just 15ms. Should improve DFU on iOS 16 which doesn't honour 15ms request\n            Fix unicode in object keys when UTF8 support enabled, eg.  {'\\u00e4':1}\n            Bangle.js: Change order of items in the Recovery Menu (hold BTN at boot) to put more common options first\n            Tidying up error messages (no trailing '.' or '\\n'), making almost-similar error messages the same \n            Fix issue using `String.concat` with flash strings (fix #2268)\n            jsvFindChildFromString enhancement - adds 10% performance on minified code\n            Remove createChild argument from jsvFindChildFromString, add jsvFindOrAddChildFromString instead\n            Add ES9 optional catch binding (`try {} catch {}`) \n            Bangle.js: Fix terminal's repeated call to '.flip' that broke double buffering on Bangle.js 1\n            JIT: Ensure ternary block skips 'named' variables (and references them correctly)\n            Fix for UNFINISHED REGEX syntax error when parsing `true / false` (fix #2424)\n            Allow `throw undefined` to still show an exception in the REPL (fix #2423)\n            When parsing function declarations, don't interpret the strings inside them\n            Bangle.js2: Fix spurious tap events when HRM enabled by changing threshold\n            Reinstate `if (0);\"test\"` fix after f87a53c accidentally reverted it\n            Bangle.js2: Do a soft reset every time we start the SPL06 pressure sensor (stops occasional sensor lockup)\n            Graphics: wrapString will now wrap lines on comma, dot, dash, and between images\n            Graphics: Improve PBF font loading to handle v3, plus Espruino extension to handle >10k glyphs in one file\n            Fix unicode in object accesses, eg c[\"\\u00FC\"]=42 (fix #2429)\n            Storage: Storage.writeJSON now escapes with a more compact `\\x##`/`\\#` character escape notation (still valid JSON)\n              This allows Espruino to save non-unicode strings with characters in the unicode range, and to also re-load them as non-unicode\n            Graphics: Graphics.stringMetrics now returns 'unrenderableChars/imageCount/maxImageHeight' for much more info about rendering strings\n            Graphics: wrapString now also wraps on slashes (to allow wrapping of URLs)\n            nRF5x: when connecting to other devices, allow a slave latency of 2 (might increase reliability)\n            Fix `Got [ERASED] expecting X` when storage compacts while executing a function *in* storage on non-Bangle devices (fix #2431)\n            JIT: Fix crashes when code got too big for simple 2-byte jump instructions (fix #2433)\n            JIT: Fixed/re-added while loops (and DO for huge loops)\n            Storage: Storage.writeJSON now skips quotes on alphanumeric field names to speed up settings read/write\n            Graphics: fix drawing image in string inside cliprect when rotated (fix #2435)\n            Bangle.js: Add wakeOnDoubleTap to Bangle.setOptions, \"lock\" event now has second argument giving a reason (if known)\n            nRF5x: On SDK15 ensure nonconnectable+nonscannable advertisements are not sent as extended\n            nRF52840: jsvReadVRef now reads VDDH value (not VDD, which is almost always internally regulated) \n            Ensure we error if an unsupported byteOffset is supplied to types array constructor (fix #2439)\n            I2C: Add I2C.readReg to combine I2C.writeTo+readFrom in an easy/fast way\n            Microbit2: Set up SCK/LRCK to unused pins for neopixel to ensure neopixel will work ok\n            ESP8266/others: Fix ArrayBuffers with 12 bit JsVars (previously they overflowed)\n            Ensure E.setDST disables E.setTimeZone, and vice-versa. \n            Added console.debug/info/warn/error as aliases of console.log\n            nRF5x: Fix INVALID_PARAM error when connecting to other BLE device when maxInterval or NRF.setLowPowerConnection specified \n            Bangle.js2: Add 'Test' option to factory reset menu, and Bangle.showTestScreen()\n            Added Pin.pulse/pwm/analog as aliases of digitalPulse,analogWrite,analogRead\n\n     2v19 : Fix Object.values/entries for numeric keys after 2v18 regression (fix #2375)\n            nRF52: for SD>5 use static buffers for advertising and scan response data (#2367)\n            Bangle.js: Add Bangle.showRecoveryMenu, and if storage is corrupt then show it rather than automatically doing factory reset\n            Fix Graphics.createImage if the last character is a newline\n            Graphics: Fix issue if drawImage given a non-image\n            Added optional Unicode support (Linux/Bangle.js only currently)\n            Added optional PBF font loading support (Linux/Bangle.js only currently)\n            Fix recent regression in switch handling caused by Strings only being interpreted when executing\n            Ensure [].length is a constant (we don't support assignment)\n            Bangle.js: showMenu now won't redraw menu items if the onchange handler changed the menu\n            Graphics: Add Espruino-specific extension to PBF font loader to handle 2bpp\n            Graphics: Improve blendColor when outputting to 2/4/8bpp Graphics\n            Graphics: Allow setFont(...) to work with >1bpp and PBF fonts\n            Add Object.addListener(same as '.on') and prependListener to allow a handler to be added first\n            Fix regression with g.wrapString and long UTF8 strings (fix #2385)\n            Bangle.js2: Fix reusing touch coordinates under high load (fix #2374)\n            Bangle.js: setUI now has a 'redraw' argument to allow apps to provide a way to redraw themselves\n            Now executes \".bootPowerOn\" from Storage on first boot after power restored\n            Bangle.js: Add Bangle.setBacklight(), Bangle.backlight event, Bangle.isBacklightOn() and allow input when lcd off if lockTimeout is 0 (fix #2383)\n            Added NRF.eraseBonds() to allow peer manager info to be removed (other than by holding all buttons down)\n            nRF52840: Fix potential 'SPI Send Error 17' SPI lockup\n            Bangle.js2: Fix number selector first draw in menu after 'redraw' argument added\n            Bangle.js2: number selector now supports tapping at top/bottom to increment/decrement value\n            Storage: StorageFiles don't store addr/len any more, they look up the file for each write (safer, and fast now we have a filename cache)\n            Graphics: g.dump() will now work without allocating huge buffers\n            nRF52: Added CTS (Current Time Service) support to ANCS/AMS code\n            nRF52: Add NRF.on('error') event to provide an easy way to check for Softdevice errors\n            If a jshardware op is interrupted, report \"Interrupted in X\" and not \"Timeout on X\"\n            Ensure Ctrl-C/holding button cannot break out of compaction\n            Bangle.js: don't compact storage if less than 10% battery\n            Support for Overlays when SPILCD driver used\n            Bangle.js2: Show a message on screen when compacting storage (fix #2391)\n            Storage: Compaction now starts from the last uncompacted page - faster if only partly compacted (#2391)\n            Graphics: drawImage now avoids getting pixels top/bottom of an image that might be cropped/offscreen\n            Bangle.js: Handle pushing events via the event queue (allows events to be queued rather than lost)\n            Bangle.js2: Allow HRM environment sensor data to be pushed, also add flags for disabling auto exposure and wear detect\n            Fix failure to run JIT caused by String interpreting optimisation\n            JIT: JIT failures now don't stop execution of subsequent commands - function is just executed as normal JS\n            JIT: Fix scoping of JITed functions (they can now access vars in the scope they were defined in)\n            Improve execution speed by not parsing strings when skipping blocks\n            Graphics: drawImage(...,{filter:1}) added to allow smooth downscaling of images\n            Graphics: fix for images in drawString when completely offscreen (regression after drawImage optimisation)\n            Storage: Output progress on FactoryReset and Compact\n            nRF5x: Ensure we don't start advertising immediately after softdevice restart if NRF.sleep() was used\n            Bangle.js2: Ensure `HRM-raw.raw` is set correctly after we moved to binary hrm algorithm\n            nRF5x: Add `NRF.on(\"passkey\", ...)` to allow passkey pairing with `NRF.setSecurity({mitm:1, display:1});`\n            nrf52: Allow disabling pairing with `NRF.setSecurity({pair:0})`\n            Allow E.pipe to pipe from Strings, remove pipe's internal `position` counter (fix #2352)\n            Bangle.js 1: remove OneWire,I2C,SPI as it uses too much flash space to exist alongside UTF8+Tensorflow+JIT on nRF52\n            ARM: Apply -fmerge-all-constants to the build (saves ~1kb)\n            Bangle.js: If screen is rotated, also rotate accelerometer and magnetometer values\n            Microbit1: don't include text versions of Bluetooth error messages (just the error number) to save some memory\n            \n     2v18 : Fix drawString with setClipRect with 90/270-degree rotation (fix #2343)\n            Pico/Wifi: Enabled JIT compiler\n            Ensure that if JIT fails, we correctly remove just the \"jit\" tag and treat the function as normal JS\n            nRF52: Add NRF.setAdvertising({},{whenConnected:true}) to allow advertisements to be sent while a connection is active\n            nRF52: Fix NRF.getSecurityStatus's 'advertising' field (only appeared when connected previously)\n            Fix 'ghosting' issue on Welcome screen (forcing timeout/lcdPower/etc at boot could disable the EXTCOMIN toggle)\n            nRF52: OneWire accesses are now scheduled with the Timeslot API to avoid the softdevice interfering (fix #1831)\n            nRF52: Add NRF.on('bond'/'advertising') events to keep track of BLE status more easily\n            Pixl.js: Switch to slower ROM-saving sin/cos/atan/atan2 (running out of free space after JIT enabled)\n            Graphics: Ensure fillPoly clips out of range (+/-2048) coordinates\n            nRF52: Fix regression after whenConnected:true addition. NRF.wake() will now not start advertising when connected unless whenConnected:true is set.\n            STM32: neopixel: Fix small glitches in the output pin just before writes that could throw off APA10x LEDs\n            Bangle.js2: Ensure that changing a menu item when half-scrolled off screen doesn't overwrite widgets\n            Puck.js: Ensure acc/gyro doesn't cause watch events to be added to the input queue (more efficient)\n            Waveform: Fix waveform input/output when not done at system start - Since 2v13 start time was set in the past\n            Fix ordering of Pin check in wrapper (so autocomplete and Pin prototype works)\n            Bangle.js2: Switched to proprietary heart rate algorithm (from our Open Source version). It just works better. \n            JIT: Implemented do { a } while (b)\n            Ensure that for(in), Object.keys and Object.getOwnPropertyNames return array indices as strings (not numbers)\n            Fix memory leak when an error happens while parsing function arguments - eg `print(1,2,3,JSON.parse(\"!%^$^\"),123)`\n            Bangle.js2: Added Bangle.setOptions({hrmSportMode})\n            ESP32: Fix reset() causing meditation error (ref #1777)\n            ESP32: Ensure XON/XOFF flow control is enabled            \n            ESP32: Advertising name is now 'Espruino abcd'\n            ESP32: BLUETOOTH UART IS ENABLED BY DEFAULT - disable with `NRF.setServices({},{uart:false})`\n            Bangle.js: GPS event now works even if only GGA NMEA events are enabled (which you might do for speed)\n            Add Serial.flush() to allow us to wait for transmission on a device to finish\n            Fix for var link corruption when replacing a native function with a normal one (fix #2361)\n            Fix memory leak (and assert in debug mode) when iterating over an object with proto with for...of (fix #2360)\n            Fix debug assert when reversing an array with non-integer elements (fix #2362)\n            Fix debug assert when using instanceof if __proto__ was set to non-object (fix #2363)\n            Fix debug assert when creating a function with code that isn't a string (fix #2364)\n            Fix debug assert parsing {}=>{} when not executing (fix #2365)\n            Fix issue with Graphics.createImage if more than the first line was empty (fix #2296)\n            Bangle.js: Now auto-reset compass if it was on while the watch was charging (fix https://github.com/espruino/BangleApps/issues/2648)\n            Graphics: Added .floodFill method to allow flood fill\n            Added E.stopEventPropagation() to allow event propagation to be stopped with multiple X.on('...', ...)\n            Graphics: g.drawImage(gfx) now reads palette+transparent fields if they exist in a Graphics object\n            Graphics: g.asImage() now reads palette+transparent fields (if they exist) in a Graphics object\n            Ensure Graphics uses jswrap_math_sin/jswrap_math_cos (saves ~5k on SAVE_ON_FLASH_MATH builds)\n            Modified E.toString to always return a String (not necessarily flat) - fixes occasion errors in Bangle.js clocks that use it when setting up fonts\n            Added E.toFlatString (using old E.toString behaviour)\n            Ensure Promise.all completes even if empty or containing pre-resolved promises (fix #2371)\n            Allow Graphics.createImage to use '.' as a placeholder for an empty area\n            Bangle.js: If a Storage file called '.loading' exists, use that instead of the loading screen\n            Bangle.js: E.showPrompt now resets background color before clearing the screen\n            Bangle.js2: Ensure overlays are flipped when screen is flipped 180 degrees (eg. left-handed mode)\n            Bangle.js2: Automatically switch the heart rate algorithm into sport mode when a certain amount of movement is detected\n\n     2v17 : Bangle.js: When reading file info from a filename table, do it in blocks of 8 (20% faster file search)\n            Bangle.js2: Increase flash buffer size from 16->32 bytes (5% performance increase)\n            ESP32: update esp-idf to v3.3.6\n            Bangle.js2: Fix issue where Bangle.getPressure could leave the barometer on\n            Bangle.js2: Bootloader update - triple-check CRC after writing firmware and retry if it fails\n            Bangle.js2: setUI(updown/leftright) now responds to button on falling (not rising) edge\n            If we get an unhandled exception, ensure we keep the stack trace intact\n            Array.sort() with undefined elements now puts them at the end of the array (as per spec - #2300)\n            Bangle.js1/2: Fix showMenu/showScroller spacing with back if no widgets loaded (ref #2286)\n            Bangle.js1: Bangle.setUI({back}) now responds to BTN3 if there were no other watches on buttons\n            ESP32: Allow up to 16k vars (if enough memory), allow non-active scan, and remove 30s BLE scan limit\n            Graphics: Ensure a scroll inside a cliprect can't go out of bounds (previously it was bounded to screen)\n            Puck.js: Fix regression in 2v15/2v16 that stopped Puck.js v1 using magnetometer\n            Bangle.js2: Fix scroller overlap with widget bar when scrolled more than the screen's height in one step\n            Bangle.js2: Improve touchscreen handling to handle out of range data from the controller on some devices\n            Bangle.js: Improve ANCS stability - cancel ongoing tasks if an error is reported\n            ESP32: setScan/findDevices/requestDevice now fill in `id` with the mac address followed by private/random/etc as NRF52 does\n            ESP32: disconnect event now gives 'reason' (as NRF52)\n            ESP32: Bluetooth scanning now uses event queue (fixes MEMORY_BUSY)\n            ESP32: Implement E.enableWatchdog\n            Speed up tab complete on large ArrayBuffers\n            Support for ArrayBuffers over 64k in size\n            Fix issue that could cause some variables not to be freed as soon as they weren't needed (requiring GC more often)\n            Fix lock leak if out of memory error occurs during 'var' initial assignment\n            Graphics: Add color mappings when rendering 3->4bpp and 3->8bpp\n            Bangle.js2: make the 4bpp mac palette more saturated to account for the LCD\n            ESP32: partition table updated in EspruinoBuildTools to ensure bootloader doesn't mistake js_code/storage for an otadata partition\n            ESP32: Add ESP32.setOTAValid(false) to allow the current partition to be marked as invalid (causing 'factory' to be booted into)\n            JIT: Arrays can now be defined in JIT code (`[1,2,3]`/etc)\n            JIT: Objects can now be defined in JIT code (`{a:2,b:3}`/etc)\n            JIT: 'this' can be used in JIT code\n            JIT: Support for short-circuit operators && and || (#2313) \n            JIT: Increased compile speed ~5x using iterators for string append\n            ESP32: Fix build with asserts enabled\n            ESP32: Add BTN1 (D0/BOOT) and LED1 (D2) as these appear to be reasonably common in boards\n            Add ability to add custom boot code inside the build with JSMODULESOURCES+=_:bootfile.js\n            Pixl.js: Don't load the splash screen if BTN1 and BTN4 held down (for recovery purposes)\n            Fix potential lock leaks during out of memory errors\n            Graphics: Added g.getVectorFontPolys to allow the underlying polygons behind a vector font to be retrieved\n            nRF5x: ensure we only clear pairing data if ALL buttons are pressed at boot to avoid accidental deletion\n            Graphics: Fix font clipping on rotated non-square graphics instances (fix #2326)\n            Fix jsvDumpLockedVars when flat strings are in memory (https://github.com/espruino/Espruino/issues/2323#issuecomment-1426107603)\n            Fix bool return values when building for 64 bit (fix #2323)\n            nRF52: Add support for 7 bit UART tx/rx (and parity) and error if a UART setting can't be honoured (fix #2324)\n            Bangle.js2: Fix regression in E.showMenu so you can use menu items with ':undefined' (as in the example in the reference)\n            Graphics: Ensure that an error is thrown if a palette is used in >8 bit images. It was previously possible to ask for a palette on a 32 bit image, which caused an overflow\n            Fix issue extending a class from a class from a class (fix #1529)\n            Added Object.getOwnPropertyDescriptors\n            Added Object.fromEntries (fix #2327)\n            Ignore whitespace after ':' in HTTP headers (fix #2331)\n            Don't allocate RegEx if just scanning over code \n            Don't store String/RegEx data in variables if we're just scanning over code\n            Ensure that if possible we create a JsVar Name direct from the underlying string, rather than creating and then converting (#2329)\n            Bangle.js2: Fix Compass Z heading (fix #2332)\n            Micro:bit 1: remove support for paletted images to free up flash\n            Bangle.js: Fix for Bangle.is* functions after #2323 fix\n            MakeIntoVariableName now shifts oversize strings around rather than re-allocating, which reduces fragmentation (#2329)\n            Fix scopes in `eval` (now uses the current function's scope) - fixes `(function(){eval(\"var x=42;print(x);\")})()` \n            Ensure new StorageFiles have 'len' set to 0\n            try...finally block now executes even if we do a 'return/break/continue' inside it (fix #2338)\n            Bluetooth: getSecurityStatus now returns 'advertising' field showing if we're advertising or not\n            Fix continue when used inside switch statement (fix #2339)\n            Storage: Fix issue locating js/.boot0 files on external storage when running with 2 Storage banks (doesn't affect Bangle.js 1/2)\n\n     2v16 : JIT functions now execute in their own function scope (allows arguments)\n            Move older 'HY' boards to use `g` for the built-in graphics, not `LCD` (and change docs)\n            Fix print(()=>{}) printing 'function (undefined) {}' - saves 1 var for arrow fn without args (fix #2265)\n            Bangle.js: Add support for `Bangle.setUI({remove:...})` to allow apps to be unloaded without a full reboot.\n            Bangle.js2: Fixed `Bangle.setLCDOverlay(img,x,y)` with negative offsets\n            Allow `atob` to accept base64 with whitespace inside it\n            Puck.js Lite: remove NFC from build (no NFC on board the Lite version)\n            Storage: When using Filename Table, be absolutely sure it's correct before using it (stops hang at startup if storage corrupt)\n            Bangle.js: Add Bangle.setOptions({btnLoadTimeout:...}) to allow home button timeout to be configurable\n            Bangle.js: A forced interrupt after button held now occurs 0.5s (not 0.1s) after the reboot request\n            Bangle.js: Holding the button during storage compact now won't try and break out of it\n            Bangle.js: Use 4k/64k/all flash clear commands to make erasing (and hence compact) external flash faster\n            Bangle.js2: Add built-in touchscreen calibration\n            Bangle.js2: Add fast-path for all-white or all-black full-width graphics fill/clear (24ms -> 2ms)\n            Bangle.js2: LCD background flip (send to LCD while returning to execute other code)\n            Bangle.js2: Swipe direction is now modified based on g.setRotation\n            ESP32: Bluetooth LE tweaks - central mode connects, scans, reads, writes and notifies\n            Bluetooth: fix for incorrect Bluetooth task strings shown in some errors\n            Bangle.js: showLauncher's 'fast load' now updates __FILE__\n            Improve jsvIs* functions (because v->flags is volatile). >5% speed improvement\n            Lexer speed improvements\n            Bangle.js: Compass 'heading' now provides correct value (without 360-heading) required\n            Bangle.js: Remove F_BEEPSET feature flag (now 3 years old)\n            Espruino: Ensure flash/native strings really can't be appended to (fix #2282)\n            Bangle.js2: Improved 3 bit LCD fill (20% faster)\n            process.memory() reports `stackFree` which allows us to easily check if we're ok for recursion\n            E.HSBtoRGB can now be called with `E.HSBtoRGB(h,s,b,16)` to return a 16 bit value suitable for Bangle.js/etc\n            Bangle.js2: Flip LCD SPI bit order so operations in Espruino can be faster (45% faster fillRect)\n            Bangle.js2: Use 8x3bpp block fill with masking (now at least 6x faster than 2v15)\n            Fix JIT when overwriting a pre-existing function, JIT now allows `var/let/const`, fix lock leak in function call, fix FOR postinc issue\n            JIT compiler now included in MDBT42Q/Pixl.js/Puck.js/Bangle.js 1          \n            Bangle.js2: Bangle.setUI remove unused 'touch' mode, ensure 'back' button doesn't overlap if button is already used (fix #2287)\n            Bangle.js: Do not clear widget area if only zero width wigets are using it\n            Bangle.js: Allow setting remove methods for E.show*\n            Bangle.js: Add Bangle.load() and Bangle.showClock() methods\n            Graphics: Ensure g.reset() after a custom font was set de-allocates the custom font (fix #2290) \n            Bangle.js: setUI now calls g.reset(), and also protects against recursion in uiRemove\n            Bangle.js2: Touched item coordinates in E.showScroller's select callback\n\n     2v15 : Fix issue where `E.toJS(\"\\0\"+\"0\") == '\"\\00\"'` which is just `\"\\0\"`\n            Fix issue accessing `arguments` after/inside 'let/const' keyword (fix #2224)\n            let/const now don't add a scope if executed in a function outside a block (fix #2225)\n            When executing a function, ensure the scope doesn't include a `return` var\n            Rename internal return var to fit it inside one JsVar on embedded systems\n            nRF52: Added support for 2 concurrent Bluetooth Central connections to Puck.js, Pixl.js, MDBT42Q (fix #1360)\n            Bangle.js2: JIT now built in (only enabled for functions prefixed '\"jit\"')\n            E.dumpVariables now outputs more info for variable values\n            Puck.js Lite support\n            Puck.js: Immediately after flashing new firmware, Puck.js now does a self-test and sets its BLE to PASS or FAIL\n            nRF52: Fix recent regression which stopped reconnection after a bluetooth disconnect (fix #2226)\n            Bangle.js: Include the 'sched' library in installed apps (needed for alarm) (fix #2229)\n            Bangle.js2: Fix text size on buttons when they are tapped in E.showPrompt\n            nRF5x: Add 'onWriteDesc' in NRF.setServices - allowing you to know when something subscribed for notifications\n            nRF5x: Move advertising_start and restart_softdevice outside of IRQs (MEMORY_BUSY warnings less likely now)\n            Bangle.js: Ensure E.showMessage background color comes from theme\n            Bangle.js: Add \"filename table\" support to Bangle.js - avoids slow file read/list when there are many deleted/updated files in Storage (fix #2152)\n            Storage: Don't align files <512 bytes to page boundaries - all files now stored in order (ref #2232)\n            nRF5x: Call sd_ble_gattc_hv_confirm in response to BLE indications\n            Bangle.js2: Make Bangle.setBarometerPower retry twice if it has an I2C error\n            Bangle.js2: Fix `NRF.setAdvertising({},{scannable:false})`\n            Bangle.js2: Initial long range functionality (via `phy:\"coded\"` in `NRF.setAdvertising/setScan/requestDevice/findDevices`)\n            nRF52: Change from hard -> softfp calling convention (saves a few bytes, more compatible with compiled code)\n            Fix 'console.log([1,2,3].splice(0, 1.0))' (fix #2245)\n            Bangle.js2: Added `Bangle.setLCDOverlay(img,x,y)` to allow an image to be overlaid on top of screen contents (eg for notifications)\n            Fix issue parsing constant decls when not executing (fix #2255)\n            Puck.js: Fix Puck.mag() in newest batch of Puck.js 2.1a sometimes returning -32768\n            Correctly handle parsing of template literals inside template literals\n            Don't store command history if echo=off (eg for Web IDE/App Loader uploads)\n            E.defrag now kicks the watchdog (on Bangle.js 2 it can take long enough that the watchdog fires)\n            \n     2v14 : Bangle.js2: Fix issue with E.showMenu creating a global `s` variable\n            Bangle.js2: Recheck string wrapping after font change inside E.showMenu\n            Bangle.js2: Double input buffer size from 1kb to 2kb\n            Bangle.js2: Fix E.showMenu title changing color after scroll down+up *if* a non-standard theme was used\n            Bangle.js2: Fix wear detection on latest Bangle.js 2 (VC31B variant) (fix #2141)\n            Bangle.js2: Allow variable HRM poll rates on Bangle.js 2 VC31B variant\n            Bangle.js2: VC31 HRM variant now polls at 25hz (not 50)\n            Bangle.js1: E.showMenu now displays boolean values with no `format` as a checkbox\n            Bangle.js1: E.showMenu now displays a submenu for multiple choice menu items (#2184)\n            Bangle.js: built-in locale now doesn't depend on argument being an instance of Date (#2187)\n            Bangle.js: Add \".noList\" property to prevent E.showScroller inside E.showMenu            \n            Bangle.js2: Add \"Back\"-Button on submenus inside E_showMenu \n            Graphics: g.setClipRect now uses rotated coordinates\n            Graphics: g.draw/fillCircle now works with rotated coordinates\n            Bangle.js2: Touch/drag coordinates now obey g.setRotation\n            Graphics: Fix drawString with combination of g.setClipRect and g.setRotation\n            nRF5x: Allow 'high speed' watches via 'hispeed' argument to setWatch. Higher power consumption but detects fast (<25us) pulses.\n            Bangle.js2: E.showMenu now returns 'scroller', `format` is called with a second argument, font in popup is scaled to fit (fix #2190)\n            Fix recent class method regression (24247e4ec9) (fix #2197)\n            Bangle.js2: 6x15 font tweaks for better ISO8859-1 support\n            Bangle.js: Add clock property to \"custom\" mode in setUI\n            Allow method declarations in objects - ES6 'Enhanced Object Literals' (#2202 / #1302)\n            Added Object.values/Object.entries (#1302)\n            Added block scoping for let and const (#971)\n            Honour non-writable const vars (fix #971)\n            Remove Line Numbers from 'save on flash' builds\n            Added Object shorthand, eg. x={a}\n            Added numeric separator support eg. 12_34\n            Add Nullish coalescing operator\n            Enable releases and cutting edge builds for Puck.js minimal releases (with 98kB of free Storage)\n            nRF5x: Fix memory leak (of address) when using NRF.setScan/requestDevice/findDevice (regression in 2v13)\n            Fix issue with const in a module when called from a scope with const already in (fix #2215, fix #2207)\n            Add `seaLevelPressure` to Bangle.setOptions (fix #2213)\n            Bangle.js: speed up HRM average adjustment (specifically when sample rate is 25Hz, eg. for Bangle.js 2)\n            Bangle.js: Change default distance units to m,km (from m,miles) (fix #2209, fix #2210)\n            Bangle.js: Rename default locale to 'system' (from 'en_GB')\n            Ctrl-C will now *not* break out of short-running intervals/watches, only long-running ones\n            Bangle.js: Allow E.showMenu to be given an array and title option (fix #2175)\n            nRF5x: We now clear the console's input line when connecting or disconnecting Bluetooth (fix #2219)\n            Graphics: Add g.blendColor to expose the ability to figure out what color is between two others (fix #2150)\n            Fix stack overflow if deallocating a massive linked list (fix #2136)\n            String substr/substring/slice now work on native/flash strings by changing pointers rather than doing an actual copy (fix #2066)\n            Fix over-iteration if breaking out of the very first iteration of FOR loop (fix #2012)\n            JSON.stringify(pin) now returns valid JSON (Pin name as a string). E.toJS still leaves it as an ID (fix #271)\n            Bangle.js2: Fix exception when using 'back' and physical button with Bangle.setUI\n            \n     2v13 : Memory usage improvement: Function scopes no longer stored as an array if they only contain one scope\n            Memory usage improvement: The root scope is never stored in the scope list (it's searched by default)\n            E.dumpVariables now dumps variable flags\n            Tidying up Native Function handling (now JSV_NATIVE_FUNCTION not JSV_NATIVE|JSV_FUNCTION)\n            NRF.getSecurityStatus now returns 'connected_addr' for the address of the currently-connected device\n            NRF.setAdvertising converts arrays of arrays to arrays of ArrayBuffers. Also don't update advertising when connected.\n            Memory usage improvement: Arrow functions only store value of 'this' if 'this' is used by code inside them (fix #2139)\n            Add String.prototype.concat (fix #2140)\n            Much-improved whitespace lexing code using single jumptable - 3% speed increase\n            Allow `process.memory(false)` to get memory info but skip GC\n            Graphics: fix height calculation bug in fillRect/clearRect when given an object with w/h as an argument\n            Fix potential corruption issue caused by `delete [].__proto__` (fix #2142)\n            Bangle.setUI is now minified, also calls Bangle.uiRemove if it was set (to clean up custom UI additions)\n            E.showScroller tweaks to allow redraw requests, get/set initial scroll amount, negative scroll (for titles)\n            NRF.setScanResponse now works on SDK15\n            Fix g.wrapString if string ends with a bitmap\n            g.wrapString now splits long words if they are too long for a line\n            Add Storage.getStats to get more fine-grained info about Storage\n            Add Bangle.midnight event that can be used for housekeeping tasks\n            Graphics: You can now do `g.fillRect({x,y,x2,y2,r})` for rounded rectangles\n            Bangle.js2: include new touchscreen E.showMenu system\n            String.toUpperCase() and .toLowerCase() now work for accented ISO8859-1 characters (fix #1866)\n            Report errors created during execution of `E.on('kill',...)`\n            Bangle.js: ANCS/AMS now advertises 16 bit time service (doesn't crop the name, and good enough for iOS pairing)\n            Number.toFixed(...) now doesn't exponentiate when the number is very small (fix #2157)\n            Add E.showMenu({\"\":{back:function}, ...}) for easy specification of 'back' menu item\n            Bangle.js2: Add 'back' option to E.showScroller and Bangle.setUI \n            Bangle.js2: Ensure that if Bangle.getPressure errors, the next call doesn't say 'Conversion in progress'\n            Bangle.js2: Update E.showPrompt with a bigger touchable area around buttons\n            Bangle.js2: 'touch' event coordinates are now clipped to screen coordinates (drag stay unclipped to allow touchscreen use for scrolling)\n            Bangle.js1: Fix regression that caused setLCDMode not to work in 2v12 (fix #2155)\n            Bangle.js1: Improved 'E.showScroller' menus\n            Bangle.js1: Add 'back' option to E.showScroller and Bangle.setUI \n            Bangle.js1: setUI button handlers now work on falling edge\n            Bangle.js: Add setUI custom 'swipe' handler\n            Util Timer now runs independently of system time. More accurate on nRF52 (fix #2125)\n            Bangle.js2: Battery discharge curve is now scaled better, and setting.json:batFullVoltage can be used to account for differences in sense voltage between devices\n            Bangle.js2: Ensure NRF.setTxPower works for all connections and advertising\n            If a process.on(\"uncaughtException\" handler creates an exception, make sure we report it as Uncaught\n            Bangle.js: If home button held and JS is still executing, force a break (like Ctrl-C)\n            Graphics: Fix text bounding box calculation when just the top line of a character would be visible\n            Bangle.js2: setUI now doesn't forward touch events if tapping over the back button\n            Bangle.js2: New E.showMenu now allows menu items of type 'string' - fixes 'Passkey' settings menu\n            Bangle.js2: Add visual feedback when showPrompt button is pressed\n            Storage: Fix erase-after-compact bug if Storage completely full (fix #2174)\n            Fix out of bounds jsvGetAddressOf in jsvNewFlatStringOfLength (wasn't a cause of instability)\n            Storage: Now put all .js files into internal storage (if 2 storage areas). Fix corruption issue when reading using file with explicit drive letter \n            Bangle.js: default 'locale' now supports second 'dp' argument for decimal places in distance/speed/temp\n            Graphics: Restrict setClipRect coordinates (Except on ST7789_8BIT (Bangle.js 1) where we need it for notifications. This stops potential out of bounds writes is setClipRect is wrong.\n            Fix issues accessing object/array fields when the field itself has a null character in it (fix #2176)\n            nRF5x: Fix merging of packers for `NRF.findDevice` - previously name fields in subsequent packets may have been left as 'undefined'\n            nRF5x: NRF.findDevice now aggregates multiple packets even if only one packet matches the filter (fix #2178)\n            nRF5x: Allow NRF.setAdvertising to set advertised service UUIDs (vs service data) easily with `NRF.setAdvertising({'180D':undefined})`\n            Ensure JSON.stringify([undefined])==\"[null]\" as per the spec\n            Bangle.js2: Unistroke recognition accuracy improvements\n\n     2v12 : nRF52840: Flow control XOFF is now sent at only 3/8th full - delays in BLE mean we can sometimes fill our 1k input buffer otherwise\n            __FILE__ is now set correctly for apps (fixes 2v11 regression)\n            Bangle.js: Ensure Bangle.getHealthStatus(\"day\") resets at midnight (fix https://github.com/espruino/BangleApps/issues/1216)\n            Bangle.js: Attempt to fix Bangle.buzz that occasionally doesn't stop\n            Bangle.js2: Lower bootloader LCD SPI bitrate (was out of spec, not all LCDs worked with it)\n            Bangle.js: Attempt to fix occasional issue where vibration gets stuck on (fix https://github.com/espruino/BangleApps/issues/1249)\n            Bangle.js: Ensure Bangle.setLCDPower only fires lcdPower event if state has changed (fix https://github.com/espruino/BangleApps/issues/1138)\n            Bangle.js2: Holding BTN at boot skips bootloader storage check, bootloader now times out if too many files\n            Bangle.js: Move position of filesystem checks to before first code is run\n            Storage.write is now explicit about not allowing zero length files, also creates exception if it fails because it can't get a data pointer\n            Bangle.js2: Only handle UBX protocol from GPS on Bangle.js 1 as it interferes with CASIC on Bangle.js 2 (fix #2124)\n            Bangle.js: GPS-raw no longer sets the FIFO_FULL message if data is lost - just passes a bool as the second argument\n            Fix for buffer overflow + segv found via fuzzing (#2121, #2122)\n            new Date(str) no longer interprets ISO 8601 UTC timestamps as local time (fix #2116)\n            Graphics: Fix clipRect checks for >1x bitmap fonts\n            Allow __proto__ to be set to a function as well as object\n            Bangle.js: Support for v2.1 barometer hardware (SPL06 vs BMP280)\n            Bangle.js: Increase step counting noise threshold 14->17 to work around pedometer fake steps (http://forum.espruino.com/conversations/371740)\n            Bangle.js: Support for v2.1 HRM hardware (VC31 vs VC31B)\n            Bangle.js: Better HRM detection (higher res filtering, better peak detection, lower median filter size, better confidence)\n            Fix E.decodeUTF8 when decoding UTF8 codes that contain all decimal digits\n            Fix for potential buffer overrun if JSON.stringify used with strangely crafted whitespace arg (fix #2114)\n            Add `NRF.setSecurity({encryptUart:true})` to force encrypted comms on BLE UART\n            Bangle.js2: Increase wait after power-on for BMP280 to fix getPressure on some devices (fix #2120)\n            Storage: Fix compaction error if a page starts with 0xff and the first write fits within that (fix #2009)\n            Add NRF.startBonding to force bonding on peripheral connection\n            nRF5x: Disable name change over BLE via 0x2A00\n            Bangle.js1/2 : Fix inconsitent scroll indicator in menus (fix #2104)\n            Bangle.js2: E.showScroller to respect widgets on bottom row (using appRect)\n            Bangle.js: Step counter - Remove hard-coded gravity value and subtract DC offset with a filter\n            Ensure jsfIsStorageValid kicks watchdog so we can't get stuck in a reboot loop if all of Storage is empty\n            Bangle.js: Add 'graphicsInternal' to make Graphics independent of JS vars. Terminal is now useful earlier, and can display softdevice errors\n            Bangle.js2: If errors do happen during Bangle.getPressure, reject the promise (fix #2137)\n\n     2v11 : Bangle.js: Enable the Bangle.on('tap') event from the accelerometer by default\n            Bangle.js: revert to (better) Kionix default thresholds for tap detect\n            Bangle.js2: When wake on touch is enabled, use a single tap on the front of the device for wakeup\n            Bangle.js: Display 'checking storage' message on first boot to alert users to slight delay\n            Bangle.js: Tweaked step count algorithm (low pass filter, 4 steps in 90s)\n            Graphics: asBMP/asURL/dump now support more bit depths\n            Graphics: Allow .setFont/.getFont to use font size in a colon after the font name\n            Graphics: .getFonts now lists 'setFont' functions however they were added (to `g`, built in, or to the prototype)\n            Graphics: When rendering fonts with a solid background, ensure the gap between is filled too\n            Flat Strings are now always aligned on a 4 byte boundary (fix #2040)\n            Graphics: add setTheme on supported devices\n            RAK5010: switch to 1.8v internal voltage (was 3.3v) to make GSM comms reliable, upgrade BG96 module\n            RAK5010: Compile in TLS/HTTPS support\n            Bangle.js: Fix issue where if non-fullscreen notification was visible and Bangle.js reset, screen was off-center\n            Fix for issue with pretokenised code not creating correct text string for reserved words, eg {undefined:1}\n            Bangle.js: Turn vibrate off every time a new app loads\n            Fix issue where ({a:0}).a in the console would create a ReferenceError (works in code)\n            Graphics: Allow setFont(\"FontName:1x2\") for scaling in 2 directions (fix #2044)\n            Graphics: Fix .asBMP for 4 bit images\n            Graphics: switch RGB order for palette in asBMP for 4/8 bit images\n            Bangle.js2: Idle power consumption down from 1.3mA to 0.9mA (pullups on HRM disabled when off)\n            Bangle.js2: Increase reported bit depth from 3->16 and perform bayer dithering when rendering\n              Makes icons/old apps way more usable (plus provides an easy way to get >3bpp)\n            Bangle.js: Fix color palette when rendering 3bpp -> 16bpp\n            nRF52840: Fix 900uA UART power draw when shut down\n            nRF52: Send XON/XOFF when buffer is less full - reduce likelihood of FIFO_FULL with big MTUs\n            Bangle.js: Fix powerSave regression (should default to 'on', but didn't since 2v10)\n            Storage test on boot only tests storage fully if the first record is empty\n            Graphics: drawString now accepts images in-line (fix #2063)\n            Graphics: added stringMetrics to get height as well as width\n            Graphics: drawString now correctly middle-aligns multi-line strings\n            Graphics: add imageMetrics to allow image width/height to be read\n            Graphics: drawImage(...,{frame:x}) can be used to draw animations\n            Graphics: fix rotated/scaled rendering of 3 bit bitmaps (fix #2049)\n            Bangle.js: fix Bangle.getLogo memory leak\n            Bangle.js2: Graphics.getBPP now returns 3\n            Bangle.js: attempt to unlock SPI flash multiple times (some devices don't unlock on the first attempt)\n            Bangle.js: Fix Bangle.tap event regression (now works again)\n            Graphics: add wrapString to wrap messages to the correct length\n            Bangle.js: update showMessage and showPrompt with correct wrapping\n            Bangle.js2: Add Bangle.compassRd, fix setCompassPower\n            Bangle.js: Add Bangle.on('health',..) event and Bangle.getHealthStatus\n            Graphics: drawImage now honours arraybuffer offsets\n            Graphics: drawImage now supports up to 4bpp palettes rendered direct from flash\n            Bangle.js2: Larger font for E.showMenu\n            Graphics: drawString(..., true) for vector fonts now clears the background\n            nRF52: swap getSerial bytes around so device ID string matches nrfjprog\n            Bangle.js2: bootloader can now flash firmware from a file in Storage\n            Bangle.js2: Add second Storage area in internal flash for fast access, memory-mapped files\n            Fix unhandled reject of a previously resolved promise (fix #1433)\n            Bangle.js: E.showMessage/showPrompt can now display images via optional img argument\n                       E.showMessage/showPrompt handle padding correctly if no widgets are displayed\n            Bangle.js2: Fix setUI clockupdown handling of 'up' \n            Bangle.js: Ensure builtin E.show* (and fake LEDs) wake the LCD up\n            Storage check now *only* happens on first boot\n            Ensure __FILE__ is set by the time bootcode runs\n            If executing from storage, work out line numbers and print filename for Errors\n            Bangle.js: Don't store line numbers in functions - no need when execing from flash\n            Bangle.js: Add E.showScroller for scrollable lists\n            Fix issue where invalid JSON stopped execution after Storage.readJSON\n            Bangle.js: Add Storage.hash for boot0 cache change checking\n            Bangle.js: A single widget load failure will now not remove all widgets\n            Bangle.js: widgets are now sorted by .sortorder\n            While and for loop conditions now use Expression, not AssignmentExpression (eg. while(0,0) is fine) (fix #2068)\n            Bangle.js2: Fix 'stuck' bottom row of pixels if scrolling downwards with g.scroll(0,1)\n            Bangle.js: Fix issue where minified E.showMenu was creating a global var called 'c'\n            Fix string formatting for \"Field or method X does not already exist\" error\n            Graphics: drawRect,fillRect,clearRect are now able to take an object as the first argument\n            Bangle.js: Add Bangle.appRect to allow apps to see how much space is available for them\n            Bangle.js: Add `Bangle.setOptions({hrmPollInterval:...});`\n            Bangle.js2: Bangle.dragHandler is now cleared by setUI (fix #2078)\n            Bangle.js2: Adjust full battery voltage\n            Avoid Watchdog reboot during compact if compacting a lot of data (fix #2075)\n            Storage: Fix issue where compacting empty storage could cause out of bounds erase (fix #2081)\n            Fix issue where pretokenised '1 - - 1' would turn to '1--1' (fix #2086)\n            Fix break scoping error in nested for loops (fix #2084)\n            Fix memory leak when rejecting pre-resolved promise (test_promise11.js)\n            Fix parser errors in arrow functions (fix #2067)\n            Bangle.js2: Add Unistroke object, and 'Bangle.stroke' event\n            Fix pretokenised '1 / /.../' and ensure jslSeek resets the previous token (ref #2086)\n            nRF52: Move neopixel LRCK pin which can't be disabled due to hardware errata, and restore state after (fix #2071)\n            Bangle.js2: Disable unboard flash bank for now (issues with erase on reboot)\n            Bangle.js1: Fix E.showScroller implementation\n            Bangle.js2: Ensure tap and twist turn LCD backlight on as well as unlocking\n            Bangle.js1: Bangle.setUI now deletes touchHandler (fix #2095)\n            Bangle.js2: Tweak battery high mark again\n            Bangle.js2: Fix E.showScroller when there are less than 3 menu items\n            Bangle.js2: Bangle.off and .softOff now turn off touchscreen if it was on \n            Bangle.js2: Ensure antialiased line routines are built in\n            Bangle.js2: Add HRM wear detection (LED no longer turns on if HRM not on skin)\n            Bangle.js2: Add a 32 entry cache to speed up finding common files - improves app load times\n            Bangle.js: Ensure locale honours 12 hour setting (https://github.com/espruino/BangleApps/issues/892)\n            Bangle.js2: Ensure EXTCOMIN time for LCD is nearer 2us (from datasheet) (ref #2097)\n            Bangle.js2: New default JS firmware\n            Bangle.js2: Minify Bangle.drawWidgets\n            Bangle.js: Bangle.appRect now copes with widgets at the bottom\n            Bangle.js2: Fix >128 ASCII codes for 12x20 font (fix #2105)\n            Bangle.js: Add SPI flash read-after-write to verify write succeeded (fix #2109)\n            Bangle.js: Fix E.showMenu clear if background color is set (https://github.com/espruino/BangleApps/issues/1024)\n            Bangle.js: Re-add E.showMenu predraw callback (fix #2108)\n            Bangle.js2: Add hrmRd/hrmWr that allow you to poke the HRM directly\n            Bangle.js: Fix for previous SPI flash write verify when <4 bytes written\n            Bangle.js2: Add write protection for bootloader and softdevice to avoid accidental bricking\n            Bangle.js2: Bootloader now attempts multiple times to initialise ext flash, and waits longer (fix fw update app issues)\n            Bangle.js: Add Bangle.getHealthStatus(\"day\") to allow automatic step counts for the current day\n            Remove for(of/in) for extremely constrained devices (Micro:bit 1 only)\n            Bangle.js: bootloader now doesn't start immediately after power off (can help with 100% flat battery)\n            \n     2v10 : Bangle.js: Improved HRM calculations - swapped autocorrelation for bandpass filter\n            Bangle.js: Significantly improved step counting algorithm using bandpass filter (fix #1846)\n            Bangle.js: Ignore touch and swipe events when the LCD is off\n            Graphics: Fix 1bpp custom fonts on 2/4/8 bpp graphics Canvas not being the right colour\n            Bangle.js: Don't reset all peripherals when loading a new app, and only\n              turn peripherals off if unused 500ms after starting new app\n            Increase max arguments for Function.apply from 64 to 256\n            NRF52840: Create new NRF_GPIO_PIN_X_FAST as Nordic's gpio functions will no longer inline!\n            Graphics: Add .blit() to allow fast blits within a single Graphics instance\n            nRF52840: workaround for SDK15 bug that stops softdevice restart when WDT enabled\n            Disallow template strings in object decls like {`hello`:1} (fix #2006)\n            Bangle.js: Add support for global colour themes which affect g.clear/g.reset (fix #499)\n            Bangle.js: Switch beep/buzz to IRQs (keeps time correct even when JS is busy)\n            Add E.decodeUTF8 to allow UTF8 to be decoded into standard 8 bit characters\n            Util timer: account for 'drift' in timer when adding new tasks if running it continuously\n            Graphics: Allow 'scroll' method to only scroll inside clipRect\n            Bangle.js: if we restart with home button held down, ignore the 'button up' event\n            Remove Graphics.drawImages from non-Bangle.js builds to free up space\n            Pico: Remove SHA512 from build to free up space\n            Storage: fix issue where functions referencing flash weren't correctly relocated during compact (#2009)\n            Add support for rendering 3 bit images to 12/16 bit destinations\n            Ensure Serial1.unsetup can be called even if it doesn't appear to have been enabled\n            Puck.js: ensure self test only happens after hardware reset (fix #2001)\n            Bangle.js: Fix issue where long-press BTN3 while holding BTN1 would reload the app but wouldn't load configuration (eg not setting timezone)\n            Graphics: add .getBPP, and allow color blending (rather than copy) when drawing 2 bit images on any BPP Graphics instance\n            nRF52: If getPrimaryServices fails with NRF_BUSY, keep retrying after a delay (fix #2008)\n            Bangle.js 2: Fix getPressure memory leak\n            Graphics: Theme now only applies for LCD, not for JS/ArrayBuffer graphics\n            Graphics: Add dark boolean to themes to allow apps to update depending on bg color\n            Bangle.js: setUI now has 'clock' modes\n            Rename SMAQ3 board to BANGLEJS2\n            nRF52840: Remove ifdef around PHY_UPDATE_REQUEST - fixes BLE5 connections\n            Graphics: Allow g.drawImage to use ArrayBuffer Graphics as an argument \n            Bangle.js: Display small 'Loading...' screen to show something is happening when loading apps\n            Promise: Fix issue with .then().then(...) on an already-resolved promise (fix #2019)\n            Bangle.js: g.flip no longer keeps the screen awake, flipTimer renamed to inactivityTimer\n            Bangle.js 2: 'factory default' set of JS now included inside firmware\n            Bangle.js: Build in ANCS support (disabled by default)\n            Bangle.js 2: Working VC31 heart rate monitoring\n            Bangle.js: Push GPS events immediately after GPGSV (more portable/resilient to config changes)\n            At first boot, fully check Storage for validity (if not full, ensure remaining pages are 0xFF)\n            Storage: Ensure jsfIsStorageValid returns true when storage is valid, but full\n            Bangle.js: Add Bangle.getGPSFix to get last GPS fix without waiting for a listener\n            Merge experimental_compact_vars branch to reduce var sixe from 16 to 13 bytes in most cases.\n            Add JSVAR_FORCE_16_BYTE to allow experimental_compact_vars changes to be removed\n            Add JSVAR_FORCE_INLINE, and don't force lock/unlock/getters to be inlined.\n              Compiler has improved enough we save 10% code space and get marginally faster\n            Add ArrayBufferView.subarray for easily making subarrays (eg a.set(a.subarray(-1)))\n            Solve case where an ArrayBuffer set using the same array could duplicate entries (`a.set(a.subarray(),1)`)\n            nRF52: Fix 2v09 regression where clearWatch reset pin state, removing pullups\n            nRF52: BLE stack errors now reports a line number\n            nRF52: 'BLE task in progress' messages now give a readable name, not task number\n            MICROBIT1: Remove hardware SPI to save space. Software SPI still works\n\n     2v09 : Bangle.js: increase default advertising interval from 375 to 200ms to ease connections\n            Fix Math.acos for negative values (fix #1950)\n            nRF5x: Add callback param to 'NRF.restart', allowing code to be called with softdevice disabled\n            Bangle.js: fix require(\"locale\").time(new Date()) for default locale\n            Now use exponents when printing doubles >= 1E21 or < 1E-6 (fix #1489)\n            Fix Regexp handling of unescaped '.' in character group: /[.]/ (fix #1948)\n            Now error if using (unsupported) RegExp backreferences\n            nRF52: Ensure SPI 1 byte DMA errata workaround isn't applied to non-52832 parts\n            nRF52: When outputting assertions, if we have an terminal device (eg LCD) use that\n            When load(filename) is used, set global variable __FILE__ to the filename\n            Util Timer no longer uses RTC - works based on estimated time from the hardware timer itself (fix #1749, ref #1444)\n            Pull in fixed SHT3C.min.js for RAK5010\n            Add support for relaying full touchscreen events in devices that support it\n            Fix flip-on-idle behaviour for non-Bangle.js smartwatch ports\n            Add support for buttonless bootloader (first boot only, times out after 5 seconds)\n            Fix emulator crash if Graphics.drawPoly used with odd number of points\n            Graphics.fillPoly now errors if >64 points (prev was 63)\n            Graphics: Support for palettes supplied in image strings\n            nRF52840: Ensure internal voltage regulator is set to 3.3v (not 1.8v default) at boot\n            Fix Array.forEach when deleting the item you're currently iterating over (fix #1962)\n            Bangle.js: StorageFile now uses 10x bigger chunks which reduces stress on Storage.list()\n            Storage.list now allows you to specifically request StorageFile, only ever reports first StorageFile chunk\n            Graphics: Allow colors to be specified as '#rgb' strings\n            Graphics: Antialiased lines now read the background color so overlap nicely\n            Graphics: Add fillPolyAA and use antialiased vector fonts (on platforms where AA is enabled) \n            Puck.js: Fix regression where IR LED was left on after transmission (fix #1969)\n            Graphics: Fix overdraw when drawing ellipses/circles\n            NRF52840: Use SPI3 by default as it's more capable/faster than SPI0\n            SMAQ3: Add support for unknown compass IC\n            Bangle.js: Make the 'home' button more configurable in code\n            Bangle.js: Add Bangle.softOff to allow the RTC to keep running\n            nRF52: Allow devices to remember the time between reboots (even if RTC is reset)\n            Microbit 2: Increase RAM from 64k to 128k\n            Bangle.js: Don't enter accelerometer power save mode if compass/barometer is in use\n            Watches: Allow streaming pressure data from Barometer\n            Graphics: Add antialias/colour blending for 24 bit buffers\n            NRF52840: Create new NRF_GPIO_PIN_X_FAST as Nordic's gpio functions will no longer inline!\n            nRF5x: reset BLE advertising after `load()/reset()` (fix #1975)\n            Bangle.js: Add accelerometer recovery for rare cases when accelerometer boots with corrupted address (fix #1972)\n            Bangle.js: Add app ID option to setXYZPower to allow apps to share devices (power is on as long as one app wants the device) (fix #1971)\n            Bangle.js: Add isXYZOn() functions\n            BLE: Allow 128-bit service data to be decoded (fix #1976)\n            Graphics: Fix 8 bit ArrayBuffer scroll not working correctly in some directions\n            Storage: Fix corruption issue with StorageFile write after a Storage compact (fix #1970)\n            Fixed dimmable backlight on non-Bangle.js watches \n            SMAQ3: Touchscreen is now powered off with Bangle.setLCDPower(0), auto-powers off after 30s\n            nRF52: Upon rebooting, reset time to 1970 if time looks corrupt\n            nRF52840: Don't use SPI3 unless ESPR_USE_SPI3 is defined (errata 195 means it draws an extra 1mA unless disabled!)\n            Bangle.js: apply g.drawImage fast path even if image goes to the edge of the screen\n            Graphics: Improve fillPolyAA for horizontalish lines, remove antialiased vector fonts (as won't work well on platforms without readback)\n            Fix invalid free caused by error inside a while loop condition (fix #1983)\n            Fix SIGFPE if using modulo with -1 (fix #1983)\n            Fix memory leak on Array.forEach/map/filter/etc caused by #1962 fix\n            Fix Espruino not sleeping when very low on free memory (fix #1986)\n            nRF52: Use 'low accuracy' GPIOTE for watches as we can shut down the high speed oscillator\n            E.getSizeOf() and trace() now don't recurse into references back to the global scope (makes sizes and traces far more useful)\n            nRF5x: Move from separate sdk_config.h to a single targets/nrf5x/app_config.h file\n            Original board: Remove Graphics.*Ellipse and StorageFile when networking enabled to allow builds\n            Update S132 Softdevice from 3.0.0 to 3.1.0 (fix #1999)\n            nRF5x: Allow Espruino builds with a configurable MTU - move Espruino boards to 53 byte (from 23) (#1998)\n            Fix issue parsing `r=>print((e=>{})(r))` (fix #1992)\n            Add DHE RSA key exchange for TLS/HTTPS (fix #1994)\n \n     2v08 : nRF52: Added option to build in I2C slave support\n            Fix Tensorflow aiGesture regression from 2v07 (re-add opcodes) (fix #1936)\n            Add support for > 1bpp custom bitmap fonts\n            Bangle.js: add drawLineAA and drawPolyAA for antialiased lines\n            Removed custom fonts for SAVE_ON_FLASH devices\n            Fixed BBC micro:bit show() regression from 2v07\n            Ensure Storage library is exposed on SAVE_ON_FLASH devices (fix micro:bit flash write)\n            nRF52: Fix issue where analogRead would stop E.getBattery from working\n            Fix setWatch debounce lastTime regression from 2v07 (fix #1902)\n            nRF52: CPU now sleeps when while UART/BLE data is waiting to be sent (fix #1938)\n            JSON.stringify now checks for potential stack overflow when stringifying (fix #1940)\n            Check for Stack overflow when Garbage Collecting giant linked list (fix #1765)\n            Added String.padStart/padEnd\n            Fix issue where JSON.stringify({ something: bool }) would output 'something' as a bool too\n            Bangle.js/Pixl.js: Ensure terminal is always the same color regardless of g.setColor()\n            Original Espruino Board: remove E.FFT in network-enabled builds (freeing up flash memory)\n            Storage compact now updates pointers stored in RAM so they still point to the correct address in Flash (fix #1881)\n            Bangle.js: Add debounce to the button used to wake Bangle.js up from sleep\n            Fix regex match with '-' that isn't a range: \"1-2_A3\".split(/[0-]/) (fix #1736)\n            Crypto: modified mbedtls SHA1 to reduce size from 3.5k to under 1k\n            Graphics: Fix for out of bounds ArrayBuffer scroll issue (fix #1946, #1947)\n\n     2v07 : Graphics.asImage() now contains buffer when bpp != 8 (fix #1863)\n            nRF52 SDK15: Fix NRF.setScan/findDevices/etc\n            nRF52: reduce input buffer space taken by advertising packets\n            Pretokenisation: reserved words can now be used as function names (fix #1868)\n            jslGetNextToken now avoids iterator clone for each token (fix #1857)\n            nRF52: fix instability when accessing ADC from IRQs and event loop at the same time (fix #1861)\n            Fix 0.0==null comparison (fix #1865)\n            WIZNet: add setHostname(), geHostname(), getStatus()\n            Fix XON not sent after reset() (fix #1872)\n            Remove USBSERIAL enum for non-USB devices\n            Shrink new vector font sizes to allow multi-line use (fix #1873)\n            Stop Object.setPrototypeOf overwriting Object.prototype sometimes (fix #1875)\n            Arrow functions now always overwrite `this` (fix #1878)\n            Implement Streaming Storage compaction to allow compact with less RAM (fix #1598,#1707,#1828)\n            jslTokenAsString now works for 'of'\n            Speed up Array.prototype.join (fix #1660)\n            Allow 'in' to be used with typed arrays (fix #1534)\n            Fix global regex issues when match may be 0 chars (fix #1888) (fix #1889)\n            Improve String.replace performance using iterator rather than repeated copy\n            Pixl.js: SDA/SCL constants should point to A4/A5, not D4/D5\n            Fix Graphics.fill/drawCircle lock leak\n            Fix issue when do..while loop condition has side effects\n            Bangle.js: Ensure SPI flash CS is disabled when sleeping/off\n            nRF5x: clear FPU interrupt before sleeping\n            micro:bit: Add support for LSM303 accelerometer/magnetometer\n            micro:bit: Add delays at first boot to wait for USB UART to init and connect vis USB\n            micro:bit: Re-added tab complete (enough space now)\n            micro:bit: Added a fake pin for LED/LED1 that uses the LED matrix\n            nRF52: Allow a cccd_handle of 0 for startNotifications\n            Bangle.js: Power down SPI flash when sleeping/off\n            nRF52: Use the best available hardware timer for PWM taking frequency into account\n            Fix delay in scheduling after initial setTimeout call (from 2v06 and later)\n            Align Tensorflow arena to 16 bytes - new Tensorflow requires this (fix #1914)\n            Fix ReferenceError when arguments[0] is used when an argument is undefined (fix #1691)\n            JSON conversion for console now removes quotes on key lengths bigger than 15 (63)\n            micro:bit: add Storage.write/etc even on space-constrained (SAVE_ON_FLASH) devices\n            Remove flash compaction code on SAVE_ON_FLASH devices to save some space\n            Fix occasional duplicate state changes when using setWatch with debounce (fix #1902)\n            JSON.stringify now outputs 'null' for non-finite numbers as the spec requires (fix #1919)\n            Update Tensorflow to latest version, fix return 0 issue on ARM release builds (fix #1918)\n            Bangle.js: Accelerometer poll handler now uses RTC app_timer, not TIMER1. 1mA->0.5mA standby current (ref #1920)\n            Bangle.js: SPI MISO is now input_pullup (shaves ~20uA)\n            Espruino WiFi: Fix startAP function when open and no password supplied\n            Bangle.js: Accelerometer now runs in low power mode (saving ~150uA)\n            Bangle.js: Peripheral polling now only fully wakes Bangle when an event requires JS processing (ref #1921)\n            Bangle.js: When not moved for 1 minute, slow down accelerometer poll interval from 80 to 800ms (fix #1921)\n            Ensure software SPI/I2C/Serial don't leak a variable when initialised\n            Fix delay in scheduling after initial setTimeout call (from 2v06 and later)\n            Espruino WiFi: Fix StorageFile on Espruino WiFi (use max storagefile size of 4k)\n            Espruino WiFi: Fix Storage compaction regression (introduced after 2v06 release)\n            Bangle.js: Fix backlight flicker regression if at part brightness (fix #1925)\n            Fix ArrayBuffer.sort with negative numbers (it's not just Array.sort!)\n            nRF52: Use the best available hardware timer for PWM taking frequency into account\n            Bangle.js: Report GPS HDOP (Horizontal Ditution of Precision => accuracy) values in 'GPS' event\n            Pixl.js: Remove SHA256 from build to free up a little extra code space\n            nRF52: Restarting softdevice no longer changes the system time by 5 mins sometimes (fix #1933)\n\n     2v06 : Allow `\"ram\"` keyword at the top of a function to allow it to be pretokenised and loaded to RAM\n            Don't store line numbers for pretokenised functions\n            Fix 1-byte overflow when using UDP (#1799)\n            Remove 1-byte padding in Graphics lib\n            Bangle.js: Make SPI flash memory map address configurable, and check end bounds (#1807)\n            Bangle.js: More SPI flash memory map address to 0x60000000 to avoid ARM/nRF52 registers\n            nRF52: Fix issue with fast Notifications causing Notification data to be duplicated\n              http://forum.espruino.com/conversations/345949\n            Bangle.js: allow custom splash screen with .splash file\n            Pixl.js: Fix E.showMessage\n            Puck.js v1: Fix regression that stopped Puck.IR(data) working - Puck.IR(data,D26,D25) required\n            Puck.js v2: Ensure FET is used for IR output, fix selfTest errors for IR and Blue LED\n            Bangle.js: Big speed improvements for 120x120 and 80x80 gfx modes\n            Enable Graphics arraybuffer optimisations on all but low-end devices\n            Add specific Graphics optimisations for 1 and 8 bit rendering\n            Bangle.js: drawImage - add fast path for non-transparent 1 or 8bpp image blit (fix #1794)\n            Graphics.drawImage docs improvements (fix #1812)\n            Fix issue where it was possible to get an address of a non-memory-mapped FlashString\n            Graphics.drawImage: Allow 8 bit palettes to be specified\n            Bangle.js: Remove dumping of hardware state - saves some flash memory\n            microbit: Remove dumping of hardware state - saves some flash memory\n            Bangle.js: fix 'short' time for built-in locale\n            Bangle.js: fix 'speed' units for built-in locale\n            Graphics.createArrayBuffer now honors `msb:true` if `bpp>8`\n            Graphics.asImage: handle >8bpp correctly (fix #1797)\n            Graphics.asImage: Allow 'string' output type, reference Graphics buffer if possible\n            STM32: Fix 2v05 regression in hardware SPI.write (RX timeout)\n            Graphics: fix lock leak in g.reset()/g.clear(1)\n            Graphics: added drawImages to allow layers of rotated/scaled images to be composited \n            Remove E.interpolate/2D (not used much, just using flash)\n            Bangle.js: use double math FFT to save a few bytes of flash\n            Storage.writeJSON (fix memory leak)\n            dump() is now aware of pretokenised code (fix #1821)\n            Merge jsvStringIteratorGetChar + jsvStringIteratorNext into jsvStringIteratorGetCharAndNext (fix #1816)\n            Fix 2v05 regression that stopped process.uncaughtException from working (had been moved to E.uncaughtException)\n            nRF52: If passkey or oob is set in setSecurity, ensure that the UART connection requires encryption (fix #1705)\n            Now report [ERASED] rather than ?[255] if we hit char code 255 while evaluating\n            Bangle.js: read `setting.json` at init and modify Bangle.beep/buzz behaviour accordingly\n            Tensorflow: remove some as-yet unused operators to free space\n            nRF52: Speed up bootloader, remove pauses on Pixl.js\n            Pixl.js: fix self-test/terminal print - write to screen immediately after newline unless in IRQ\n            Fix issue with iteration over arrays with negative entries (these should be converted to Strings)\n            Linux: improve command-line, allow recursive test directory and more than one test (eg wildcard + shell expansion)\n            Added new vector fonts supporting most of ISO8859-1\n            Graphics.fillPoly now uses 4 bit fixed point internally\n            nRF52: Fix 2v05 hardware SPI regression (chip errata when sending 1 byte)\n            Graphics.fillPoly now uses a more normal fill algorithm that doesn't attempt to fill to the top right (fix #1796)\n            Fix setTimeout/Interval accuracy when new timeouts scheduled within timeout (fix #1829)\n            nRF52: Fix 'BLE task 2 is already in progress' if disconnect called during connection process\n            Puck.js: Put accelerometer into lower power mode by default\n            Puck.js: Switch to IRQs for magnetometer (lower power consumption)\n            Improve Graphics.drawImage speed and simplify code by allowing fast path for non-rotated graphics\n            Tensorflow: updated to v2.2, removed un-needed ops (reduces size by 24k)\n            Puck.js: Fix Puck.magTemp();\n            Puck.js v1: Fix magnetometer reading after puck.magOn (2v05 regression) - use old software I2C implementation\n            I2C: Improve software I2C (now quickly forces I2C high before pullup, to help improve clock speed)\n            Bangle.js: Fix GPS-raw events to provde also u-blox UBX Protocol messages (fix #1838)\n            Bangle.js: Save RAM in GPS handling, allow arbitrary length data returned (fix #1843)\n            Tensorflow updated to current 'master' version\n            Bangle.js: Improve SPI flash speed by with specific function for reading and keeping CS asserted (fix #1849)\n            Bangle.js: Ensure BTN3 exits debug mode (fix #1842)\n            Bangle.js: Now warn if GPS data overflows (fix #1847)\n            Fix double unlock in load(filename)\n            Bangle.js: Fix occasional execution errors when executing from Flash (fix #1854)\n            Add Graphics.transformVertices()\n            Re-add Graphics.quadraticBezier for Bangle.js, move to integer math to halve fn size\n            Emscripten: (fake) Flash memory support\n\n     2v05 : Add Array.includes\n            Fix (Number.toFixed) rounding, eg (1234.505).toFixed(2)\n            nRF52: If a central is connected to Espruino but isn't reading from UART, don't block waiting to send data\n            ESP8266: reverse fix #1679\n            Added Graphics.getFont/setFont/getFonts\n            Added Graphics.getFontHeight\n            Added option to compile in 6x8 fixed-width fonts\n            Fix issue where Util Timer timers could break after a call to setTime\n            nRF52: Enable DMA for SPI send\n            Added option to build in TensorFlow Lite for AI\n            Documentation for modules now includes require('...') in the call type to be less confusing\n            ESP8266: warning: Empty loadable segment detected (fix #1690) \n            nRF52: Add NRF.nfcPair(...) and OOB pairing to allow tap to pair over BLE\n            nRF52: Add NRF.nfcAndroidApp(...) to launch an Android app on touch\n            Pixl.js remove SHA512 to make room for new NFC functionality\n            Graphics.setFont(\"4x6\",2) will now double the size of a bitmap font\n            Graphics.drawImage can now take a String of data for an image (eg. direct from Storage)\n            nRF5x: Support connection to devices with RANDOM_PRIVATE_RESOLVABLE and RANDOM_PRIVATE_NON_RESOLVABLE addresses\n            Pixl.js: Move SCK pin used during Neopixel writes to ensure it doesn't interfere with BTN3\n            nRF52: Fix alignment issue with Nordic's SDK12 code that stopped passkey pairing from working sometimes\n            Storage lib now doesn't bother reading to end of flash to ensure pages are clear\n            Allow heatshrink compress/decompress to work even if flat buffers can't be allocated\n            require(\"Flash\").write operations no longer need to be aligned\n            require(\"Storage\").open added - for appendable files\n            Pixl.js: Removed AES functionality - unfortunately we're running low on space for it\n            Original Espruino Board: Removed Vector font and don't add rotated drawImage to save flash\n            nRF5x: Add NRF.filterDevices to allow scanned devices to be easily filtered after scanning\n            nRF52: Fix 'BLE task completed that wasn't scheduled' warning regression (peripheral disconnect)\n            Can now get a data pointer even from a single JsVar string (it doesn't have to be flat)\n            Add option to specify a palette when drawing images with drawImage\n            Add XON/XOFF flow control to Bluetooth LE UART (on by default)\n            Lower thresholds for XON/XOFF to give more headroom with devices that are slow to respond\n            Add a fast path for non-rotated non-scaled Graphics.drawImage\n            Add argument check for heatshrink compress/decompress\n            nRF5x: Ensure gatt.connect silently succeeds if we're already connected to the device\n            Add E.showMenu, deprecate Pixl.menu - use a common function to ease porting between devices\n            Added E.showPrompt, E.showAlert for Bangle.js\n            Pixl.js - check '.splash' file at startup and use it for splash screen if it's there\n            Improve free list ordering when Flat Strings are freed\n            Added E.defrag to perform defragmentation - still beta!\n            nRF52: fix issue where restarting the softdevice would reset the RTC\n              - fixes Bangle.js watchdog reset\n            nRF52: fix issue where advertising flags could get out of sync after SD restart\n            Bangle.js: fix units for GPS speed (was knots, now km/h)\n            Bangle.js: Add Bangle.setLCDBrightness\n            nRF52: Fix passkey pairing if setSecurity is after setServices\n            Bangle.js: EVents for 'swipe' and 'touch' on the touchscreen\n            Added ability to compile Espruino to JavaScript with Emscripten\n            Allow g.setColor/setBgColor to take hex Strings of the form `'#00ff00'`\n            Bangle.js: Added heart rate autocorrelation, setHRMPower and 'HRM' event\n            Bangle.js: New 120x120 and 80x80 high speed buffered modes\n            Fixed REPL to allow chars with char code >=128\n            Fixed lex tokenToString for 'break'\n            Bangle.js: add fake LED/LED1/LED2 as @allObjects suggested\n            Add Graphics.toColor, and allow 4 bit Mac palette to be mapped to 8 bit web palette\n            Add Graphics.setClipRect to allow draw ops to be restricted to a certain area\n            Bangle.js: add 'null' LCD mode to stop apps from drawing\n            Bangle.js: add Bangle.getLCDMode\n            Bangle.js: skip firmware version checks to save some bytes in bootloader\n            Graphics: new g.fillPoly to handle irregular polygons\n            Bangle.js: Bangle.setLCDMode now errors if it can't allocate a flat string (also garbage collects and defrags to try and ensure it can)\n            Graphics: drawEllipse/fillEllipse now work correctly for very small ellipses\n            Fix type compare of string and flatstring\n            Allow Storage.read to make partial file reads (fix #1744)\n            Fix SyntaxError when using pretokenise + getters (fix #1745)\n            Add Graphics.reset, and ensure it (and g.clear(1)) unreference custom fonts\n            Iterator cloners now take a reference to the iterator rather than returning it\n            Flash Strings: On Bangle.js allow JS code (and other Strings) to be accessed without loading them completely from Flash\n            Added E.CRC32 for easy testing of data validity\n            Add `E.on('kill'` event for executing code before load/reset/save/etc\n            JSON.stringify now escapes using the less efficient JSON subset of escape characters (fix #1737)\n            Allow optional `load(\"filename\")` to load a JS file from Storage (was just `load()`)\n            Bangle.js: add Bangle.loadWidgets/drawWidgets\n            Bangle.js: Remove deprecated Bangle.menu\n            Ensure it's possible to get a solid background when using 4x6 font\n            Bangle.js: Add Bangle.showLauncher\n            Add append optimisation for string '+', and don't append to flat/native/etc strings (fix #1746)\n            ESP8266_4MB: add optional build flag FLASH_1MB for ESP8255  & ESP01s with 1MB flash\n            ESP8266: add optional build flag NO_FOTA to remove flash over the air functionality\n            Add Bangle.getCompass and Bangle.getAccel to get the latest compass/accelerometer readings without a callback\n            Fix `parseInt(\"0b\",16)` as well as some other non-compliant behaviour (fix #1722)\n            Bangle.js: Disable touch buttons if screen off\n            Bangle.js: Don't send 'up' event for a button that was used to wake the screen\n            Bangle.js: GPS event.time set to undefined if GPS time is not initialised\n            Fix regression that removed exception reporting in console\n            Bangle.js: speed up bootloader progress bar\n            Bangle.js: fix problems turning off via bootloader sometimes\n            Bangle.js: improve power consumption when off, now ~0.08mA (fix #1727)\n            Bangle.js: add Bangle.setOptions({wakeOn*}) for when LCD should light\n            Bangle.js: Add 'twist' event and 'wakeOnTwist' (wakeOnTwist now default true, waveOnFaceUp default false)\n            Bangle.js/Pixl.js: Updated E.showMenu\n            Bangle.js: E.showMenu now has some colour, bigger, with next/prev indicators, and works with widgets \n            Pixl.js: Add E.showPrompt/Alert/Message (fix #1747)\n            Add .toJSON handling for JSON.stringify, and add Date.toJSON (fix #1754)\n            Remove broken Graphics.drawImage centerx/y (fix #1742)\n            Add Storage.writeJSON to avoid any confusion of writing arrays/numbers/etc\n            Bangle.js: Keep widget area free when using showPrompt/Alert/etc (fix #1756)\n            Add more info about flash memory to process.env/process.memory\n            Add Graphics.quadraticBezier() \n            Allow Graphics.setFont to be used with custom fonts (fix #1762)\n            Espruino WiFi: WiFi module now makes BOOT pin open circuit when sleeping - saves ~2mA\n            Add E.setConsole/getConsole to allow console to be moved (including to 'null')\n            Bangle.js: Ensure HRM is turned off in Bangle.off() (fix #1759)\n            Increase 'Storage' library's max filename size to 24 bytes (from 8)\n            Remove header.replacement in 'Storage' lib and just zero header.name\n              - increase filename to 28 bytes, but file search now more efficient\n            Bangle.js: Increase Storage area to full 4MB of flash\n            Bangle.js: NEEDS NEW APPS - Move away from using first char as file descriptor and use file extensions instead\n            Add StorageFile.getLength() to get the current length of a StorageFile\n            StorageFile also writes files with a 'JSFF_STORAGEFILE' flag (not currently used)\n            Storage.list() can now take a RegEx/string to filter returned results \n            MDBT42Q: Remove AES encryption libs by default to free up more flash memory\n            Microbit: Add SAVE_ON_FLASH_EXTREME flag to ensure builds keep working\n            Bangle.js: Added built-in 'locale' module to handle common conversions - this can be overwritten by a Storage File to change language\n            Storage.readJSON now has optional 2nd arg that stops it from creating exceptions on bad JSON\n            Bangle.js: Tweak LCD gamma curves to provide better gradients on new watches (fix #1758)\n            Bangle.js: fix BLE UART transmit bug when compiling for SDK14 (thanks @fanoush!)\n            Add euro symbol to 6x8 and 4x6 fonts as char code 128 (ISO10646-1)\n            Bangle.js: Use 'locale' library to translate E.showMenu/Prompt/Alert/etc\n            Bangle.js: remove graphical_menu lib and inline specialised version into E.showMenu\n            Bangle.js: Modify handling of widgets to allow variable width widgets (requires new widget JS)\n            Changed 6x8 builtin font to a modified Dina_r400-6 supporting non-ASCII characters\n            Bangle.js: Modify E.showMessage/Prompt/Alert to clear the entire screen and redraw widgets (fix #1771)\n            Bangle.js: Modify Bangle.drawWidgets to only clear the areas where widgets actually are, not the whole top&bottom bar\n            Kick Watchdog when erasing flash (it can take so long on 4MB external flash that it reboots)\n            KICKSTARTER BUILD\n            Bangle.js: Add 'meridian' to locale library\n            ESP32: add environment variable COMPORT to be used with make flash \n            Puck.js: v2 Support: Accelerometer/Gyro/temp\n            Puck.js: Self test now sets Puck.js BLE name if there's an error\n            Fix bitwise rshift by 0 to be unsigned (fix #1784)\n            Bangle.js: Don't load .boot0/1/2/3 if BTN1 is pressed\n            Puck.js: Allow D21(RST) to be used as normal IO pin\n            Fix recent E.getTemperature regression (fix #1788)\n            Fix pretokenise of RegExp literals (fix #1786)\n            Add ability to turn off software I2C clock stretching (not accessible from JS)\n            Puck.js: disable clock stretching for built-in sensors\n            Bangle.js: Now clear entire top/bottom row if there are widgets in it (fix #1790)\n            Add Storage check at startup and erase everything if storage looks corrupt (fix #1766)\n            Fix restriction on StorageFile filename length (8 to 28)\n            Fix array sort when compare fn returns floats <1 (fix #1798)\n            Fix Storage.write duplicate file issue in some rare cases (fix #1801)\n            Bangle.js: fix post-kickstarter issue adding widgets in bottom of screen (#1790)\n            Bangle.js: fix magnetometer self-calibration\n            Espruino Original: Removed Debugger, Tab complete, AT command networking from WIZnet networking build to free enough Flash\n            Espruino Pico: Added a normal build that doesn't contain CC3000 or WIZnet support\n            Espruino Pico: Removed Debugger and Vector font from WIZnet/CC3000 networking versions to free enough Flash\n            HYSTM32_28: Removed from build due to lack of interest and difficulty with increased firmware size\n\n     2v04 : Allow \\1..\\9 escape codes in RegExp\n            ESP8266: reading storage is not working for boot from user2 (fix #1507)\n            Fix Array.fill crash if used to fill up all available memory (fix #1668)\n            Fix NRF.requestDevice regression (clearInterval error) (fix #1669)\n            Smartibot devices now advertise on BLE as 'Smartibot abcd'\n            nRF5x: Leave digital input disconnected for analog read (saves power)\n            nRF5x: Return 'analog' as pin mode for any pin where input is disconnected\n            If watchdog is on and automatic, ensure that `reset()` keeps the automatic kicking going\n            Ensure that a console stays locked even after \n            Ensure interpreter flags (eg echo) are cleared after a `reset()`\n            nRF5x: When watchdog is on and automatic, automatically wake up often enough to service it\n            Fix Graphics.setFontBitmap on builds with no vector font (fix #1671)\n            Graphics.asBMP now takes account of bitmap rotation (fix #1672)\n            Raspberry pi pin numbering the same if using wiringPi or filesystem GPIO (fix #1673)\n            nRF52: Peer manager init errors from Nordic libs now not fatal \n            SDK15: Writing to flash now works\n            nRF52840: USB Serial works even for big sends, and device swaps to USB automatically\n            nRF52840: Allow Serial2 to be used\n            ESP8266: optimize rename-section for ESP8266_4MB board, freeHeap +2064 byte (fix #1679)\n            Fix corruption if Function.replaceWith called manually on something not a function (fix #1684)\n            Fix bug where '.clone' on a native function didn't copy arguments (fix #1685)\n            nRF52840: Fix input/pullup/pulldown pin modes on IO bank 2\n            Added `E.memoryMap` to allow on-chip registers to be mapped direct to variables (fix #1500)\n\n     2v03 : nRF5x: Fix issue when calling NRF.setAdvertising while connected via BLE (fix #1659)\n            nRF5x: 'dump()' not outputs `NRF.setSecurity` line if it has been called.\n            Ensure that converting a valid pin to a boolean always returns true\n            clearInterval/clearTimeout/clearWatch(undefined) now throw an error asking for just clearX()\n              - this stops code accidentally clearing all timers/etc if it uses a variable that is undefined\n            Allow NRF.setAddress to work even with services defined and a connection in progress\n\n     2v02 : Fix string index calculation when using some regexes (fix #1602)\n            Ensure Function.replaceWith puts scope after parameters (fix #1601)\n            Ensure Graphics.* return the Graphics instance, to allow call chaining (fix #1580)\n            Ensure DataView.byteOffset/byteLength is always set even if not specified (fix #1567)\n            Added HttpServerResponse.setHeader\n            HttpServerResponse now automatically sends `Connection:close` unless overridden (fix #1596)\n            Fix sign of RSSI reporting with setRSSIHandler\n            nRF52: Add docs for properties that weren't documented before\n            nRF52: Add ability to connect to device with passkey authentication\n            nRF52: Allow startNotifications to use Indicate if Notify doesn't exist (as per spec)\n            nRF52: Add option for static passkey pairing with NRF.setSecurity\n\t    ESP32: update EspruinoBuildTools to esp-idf V3.1.2 - fix Wifi connect issues (multiple ssid)\n            Revert PR #1459 as it broke neopixel functionality that worked previously\n            nRF52: Disconnect RX pin after UART test at boot (saves power when in deep sleep)\n            Serial.unsetup now sets pin state to STATE_UNDEFINED, which disconnects the pins internally\n            Removed modulo on `new Date` h/m/s/ms arguments as it seems desktop JS is fine with out of range values\n            Added `active` option to NRF.setScan/findDevices/requestDevices to allow scan response packets to be requested\n            Add I2C/SPI baud rate checks (#1619)\n            STM32: Add `E.setRTCPrescaler` to allow the RTC to be calibrated on Espruino Pico (fix #1607)\n            nRF52: Fix slow Bluetooth connection if previously disconnected while using low power connection interval (fix #1605)\n            Allow `Graphics.clear(true)` to reset state (font, color, etc) to default as well as clearing the screen (fix #1615)\n            nRF52: Fix setScanResponse regression from 2v00\n            nRF5x: Execute SWI1_IRQHandler when radio turns off instead of on+off. More efficient, fixed multiple advertising.\n            Smartibot build added\n            ESP8266: add CFLAGs to shrink build size (fix #1622)\n            ESP32: update EspruinoBuildTools to esp-idf V3.1.3\n            nRF52: Add FAT Filesystem support to MDBT42Q module\n            Now save file modification time with FAT\n            Fix segfault if `.clone` is called with `this==undefined` (fix #1628)\n            Fix issue outputting char codes <8 after outputting hex char codes\n            nRF52: Don't allow NRF.updateServices while a BLE restart for setServices is queued\n            nRF5x: Don't sleep if we received any events since last sleep (fix #1572)\n            Remove limit on the number of scopes that can be searched (fix #948)\n            String.split - improve docs, split with RegExp now inserts the text after the final match\n            RegExp: Add '|' operator (fix #1503)\n            Switch ARM toolchain to gcc-arm-none-eabi-8-2018-q4-major\n            Improve handling of timeouts for RAK8212 GPS\n            nRF52: Now create exception if advertising calls fail (but ignore when in IRQ)\n            nRF52: Add setAdvertising({},{scannable:false}) for disabling scan response\n            nRF52: Add note about connectable:false requiring >=100ms intervals\n            STM32: Fix issue where occasionally STM32 would be ~0.2s late waking from light sleep\n            ESP8266: add Wifi.connect options channel and bssid for faster AP connects (fix #1595, #1640)\n            Fix index in E.mapInPlace and improve docs\n            nRF52: Add NRF.getSecurityStatus to allow devices to detect the current state of the connection\n            STM32F4: Add Filesystem module\n            STM32F3: Fix broken build\n            nRF52: Fix nRF52840 advertising and remove duplicated advertising code\n            Fix Software Serial receive when the frame has to be decoded inside the IRQ (fix #1654)\n            Raise software serial receive buffer to 64 bytes (from 7)\n            nRF5x: Add security options to NRF.setSecurity (courtesy of @vkolotov)\n            nRF5x: Allow Serial1.setup(...) with only TX or RX pins\n            Vector font removed from Espruino Original WIZnet build due to lack of spare flash\n\n     2v01 : ESP32: update to esp-idf V3.1\n            Fix issues with Class Extends\n            Improve Tab Completions for extended classes\n            Fix Storage.readJSON/readArrayBuffer memory leak (fix #1532)\n            Fix potential out of bounds Graphics.scroll\n            Serial.setConsole now warns if not used on hardware Serial\n            ESP8266: implement hw_timer (fix #1511) to make soft serial and pwm work\n            Fix Storage write error when skipping pages (fix #1539)\n            nRF5x: When scanning, only use as much of IO queue as is needed\n            nRF5x: If BLE/NFC/etc data won't fit in IO queue, drop whole packet\n            Allow `a in b` to search 'fake' objects (#1534)\n            Improve fast path when iterating over Uint8Array/ArrayBuffer\n            Allow deletion of function properties (fix #1549)\n            Add `{callback:...}` option for `.write` style functions - improve docs.\n            ESP8266: deepSleep invalid microseconds (fix #1547)\n            ESP8266: ESP_FLASH_MAX for ESP8266_4MB is wrong (fix #1551, #1553)\n            Fix buffer overflow if bytesize/stopbits used in `Serial.setup` (fix #1510)\n            Ensure jsvNewFlatStringOfLength tries twice (even if GC doesn't release memory, it reorders the free list) (#1559)\n            ESP8266: Missing variable Flash Mode (--flash_mode, -fm) in ESP8266.make files (fix #1563)\n            ESP8266: Remove hack added to get around SDK 1.4 bug (fix #1568)\n            Reduce available hardware SPI/I2C instances to 1 on nRF52 (since this is all we implement atm)\n            Add E.dumpFragmentation to show memory fragmentation (only for debug builds)\n            Fix parsing of dates from before 1970\n            nRF52: Fix some regressions in requestDevice (flagged up by asserts in debug build)\n            Allow built-in objects to be created with `new X()`\n            nRF52: Ensure Bluetooth stack doesn't do a reboot for non-fatal errors (just report them to console)\n            BluetoothRemoteGATTServer.disconnect now returns a Promise\n            nRF52: Jump out of low power mode after less BLE activity (2 reads/writes in 10 radio packets) (#1546)\n            nRF5x: Fix NRF.setConnectionInterval when there's no connection (fix #1546)\n            Explicitly mention Espruino not supporting CASE after DEFAULT in error (fix #1570)\n            Ensure scope is saved for Class constructors (fix #1576)\n            Add setNBCellOn for RAK8211-NB (fix #1581)\n            Now escape chars <8 as octal, and add escape of vertical tab \n            Add Graphics.createArrayBuffer(... {interleavex:true}) to allow faster support for P3 LED panels\n            Add Graphics.fill/drawEllipse and move fill/drawCircle to use the same code\n            CC3000-specific build removed on Original Espruino board (lack of space)\n\n     2v00 : Allow changeInterval with large (>32 bit) intervals (fix #1438)\n            changeInterval now changes the interval immediately when it's called inside the interval it is changing (fix #1440)\n            Fix parsing of try..catch when not executing (fix #1439)\n            Add extra ReferenceError checks, even if variable is not used\n            Allow Ctrl-C out of while...continue loop (fix #1441)\n            Fix bug if using an undefined member of an object for for..in (fix #1437)\n            Allow for..in to iterate over prototype chains down from Array and Object\n            Add for(var i of array) to iterate over elements\n            Added getter and setter support\n            Stop parsing blocks if not executing (fix #572)\n            Fix stack overflow if interpreting a file full of '{' (fix #1448)\n            Fix exception when performing record access on object from getter (fix #1454)\n            Switch to non-recursive StringExt copy (fix #1451)\n            Fix rounding errors in fillPoly -> improve vector font rendering\n            Fix issue that caused 'dump()' not to report variables/functions on Pixl.js\n            Add E.lookupNoCase to allow searching case-insensitively for Object keys\n            Fix HTTP Chunked transfers when the server uses lowercase headers (fix #1458)\n            Fix TypedArray.indexOf (fix #1468)\n            Allow require('Storage').write('a','',0,15) (zero length data) (fix #1465)\n            edit() now chooses the shortest way to describe the function\n            Fixed bug when RegExp.match/test called on non-strings\n            Added Global isFinite\n            Add missing ArrayBufferView.filter\n            Added Array.find and findIndex (also for ArrayBufferViews)\n            Fix unreliable ArrayBufferView.indexOf (#1468)\n            Added String.startsWith/endsWith/includes (#1302)\n            parseFloat(\".s\") now returns NaN\n            Fixed /\\S+/.test(\" \")\n            Added Storage.getFree() to return available space\n            Enable E.setTimeZone on boards with very little flash memory\n            Lower saved code area to 2k on micro:bit (from 3)\n            Remove RGB colour handling in setColor on devices with low flash\n            Reduce available variable count on STM32VL - we were too low on RAM\n            Added Graphics.asBMP/asURL/dump - allowing easy debugging of Graphics via IDE\n            Allow '.then' on already-resolved promise (fix #1476)\n            Stop atob adding trailing 0s when strings are not a multiple of 3 long\n            Reconstruct start and end newlines when dumping multi-line functions  \n            Fix regression parsing methods in classes on embedded (fix #1479)\n            nRF5x: Add options argument to NRF.connect and BluetoothDevice.gatt.connect, allowing a connection interval to be specified\n            nRF5x: Start renegotiating speed after 0.1ms, not 5s. Massively improves connect speed.\n            nRF5x: Now queue up to 5 UART TX packets per transmit interval (was 1 previously)\n            nRF52: Add Dynamic Interval Adjustment - default to 2x connection speed, but idle at 10x slower if not used for 2 minutes\n            nRF5x: Add NRF.setConnectionInterval() to allow connection speed to be set manually\n            RuuviTag: invert LED1, LED2 & BTN in software so LED.set() does what you'd expect\n            Console now doesn't print quotes around object keys if it's not needed\n            Added `E.toJS` to allow very compact JS data stringification (similar to `JSON.stringify`)\n            Output the current timer number as a comment in `dump()`\n            Don't print `=undefined` to console if line is empty\n            Added RAK8212 (and include SMS/GPRS code in RAK8211/2 builds)\n            Graphics.stringWidth now takes account of newlines\n            nRF52: NRF.requestDevice now resolves as soon as a device is found. Faster and better in congested areas\n            Replace use of obsolete 'usleep' function in Linux builds (fix #1455)\n            Add Ethernet.getIP/setIP callbacks for Wiznet to bring them in line with WiFi (fix #1482)\n            Fix Math.round for numbers > 32 bit (fix #1485)\n            Pixl.js menu now resets font alignment, and down arrow icon is fixed\n            Now check for ReferenceErrors in global scope\n            Fix Array.shift (returned a NAME, rather than the value)\n            Add sanity check for names returned from Functions and fix Array.pop\n            Stop characters getting dropped when pasting large amounts of data into Linux build\n            nRF5x increase JsSysTime accuracy to 2^-20 from 2^-16 - drastically improves Util Timer accuracy\n            Added support for Software Serial ports (for low baud rates, eg. 9600)\n            Fix JS state restoration issue (eg. Pixl.menu inside switch would cause errors)\n            Added Graphics.drawPoly\n            Add Graphics.asImage to turn a Graphics instance into an Image that can be used with drawImage\n            Add Graphics.createImage to allow creation of a 1 bit image direct from a string\n            Use 32 bit floats for E.FFT, not 64 (fix #1443)\n            Automatically shut down UART if both pin states are changed\n            Fix `setDeviceClockCmd: Unknown Device` when using `LoopbackB.setConsole()` on WiFi board\n            Fix non-UART serial regressions (after software serial additions)\n            Pixl.js: Add Pixl.setLCDPower to allow the LCD to be powered off, more than halving power consumption\n            nRF5x: Allow NRF.setScan and NRF.findDevices to take the same search filters NRF.requestDevice does (fix #1496)\n            Fix buffer overrun if we have to reallocate a pointer to argument lists when calling a function (fix #1491)\n            Fix stack overflow if executing regex full of hundreds of open brackets (fix #1487)\n            Fix issue where STM32F4 USB could lock up if TX during heavy RX\n            Improve `E.mapInPlace` docs, and allow it to work with no map (eg pass straight through)\n            Added non-standard Uint24Array, because it's very useful for RGB\n            ESP8266: add CFLAGs to shrink binaray files (fix #1499)\n            ESP8266: fully integration of analog pin A0 (fix #1495)\n            ESP32: update sdk to esp-idf 3.0.1, set Espruino build tools back to master branch\n            Allow btoa to work for arrays as well as Strings (fix #1509)\n            Allow E.mapInPlace to merge bits from multiple source elements, also add option for msb/lsb first\n            Remove Graphics.scroll/drawCircle/fillCircle on devices with low flash to allow builds to fit again\n            Remove BluetoothRemoteGATTCharacteristic.writeValue on NRF51 (accidental inclusion - it's not required)\n            Double IO buffer size to 256 (1k bytes) on boards with 96k of RAM or more (or NRF52)\n            nRF5x: allow arbirtary baud rates to be specified for UART\n            On devices with low flash, ensure atan2 uses the slower/smaller atan implementation\n            Move FFT back to 64 bit if low flash (it uses less memory!) and optimise for flash space\n            Remove new Graphics.createImage/asBML/asURL/dump on Original Espruino Board (not enough space) \n            Remove Olimexino from build (too difficult to slim down build and very low usage)\n            Remove Software Serial from boards where we're low on flash\n            Increase size of saved code area from 3*4k to 10*4k on RAK821x boards\n            Fix 'Can't extend undefined' when using Object.setPrototypeOf on a function\n            nRF52: Added NRF.HID event for two-way BLE HID communications\n            nRF5x: Remove multiple writes per connection interval (more trouble than the speed improvement is worth)\n            Fixed hang if trying to allocate Storage greater than total storage size in a fully erased Storage area.\n            Pixl.js: Fix 30s pause when closing sockets on WIZnet W5100 (fix #1306)\n            Remove HASH/hashlib from all builds as it was confusingly in some and not others. Now use 'crypto'\n            require('crypto').SHA1 is now JS in Espruino Original to cut down on the flash required\n            Added 'heatshrink' library to expose built-in heatshrink compression to users\n            Fix assert fail when calling Function.apply with an Object with non-numeric keys\n            Fix issue when AT lib has to process multiple custom line handers in one packet\n            Espruino WiFi: Fix unreliable send when receiving lots of data on another socket\n            Espruino WiFi: Only rename `EspruinoWiFi` to `WiFi` if not found (allows easier debug)\n            Check Flash Storage for modules when using `require`\n            Add 'bits' option for Software SPI\n            STM32 reset pin IRQs before storing the state - makes lost setWatches far less likely\n            Ensure that setBusyIndicator updates output state after the very first initialisation.\n            MDBT42Q: Add LED2 var in the Espruino interpreter, but don't use it for the bootloader\n            ESP8266: release heap used by logDebug(true) (fix #1508)\n            ESP8266: remove SHA256 SHA512 (fix #1517)\n            Ensure `Date.getTimezoneOffset()` returns the correct timezone offset (fix #1515)\n            Search for and execute files '.boot0'/1/2/3 in Storage at boot time if they exist\n            Pixl.js: reduce saved code area to 9 x 4kb to allow for extra features\n            ESP8266: switch to SDK 2.2.1 (fix #1207)\n            Fix Serial port path regression on Linux, and add docs\n            microbit: remove line-by-line debug capability to free up some space\n            Added ES6 String.prototype.repeat\n\n     1v99 : Increase jslMatch error buffer size to handle \"UNFINISHED TEMPLATE LITERAL\" string (#1426)\n            nRF5x: Make FlashWrite cope with flash writes > 4k\n            Increase max size of native strings on platforms that support it - 16 bit to 32 bit (#1432)\n            Fix stack size detection on Linux (fix #1427)\n            Fix strncat/cpy bounding issues (fix #1425)\n            Promises now ignore a second resolve/reject (fix #1433)\n            Fix stack overflow if void void void... is repeated many times (fix #1434)\n            Fix font rendering issue caused by signed bit field handling by GCC on non-x86 platforms (fix #1436)\n            Added E.reboot() to allow hard reboots from software (fix #1429)\n            Added 'Graphics.getInstance()' for more platform independent graphics\n            Added VT100 'erase in Display' to Terminal\n            In REPL, use x.toString() for objects if we know their name and it is available\n            Pixl.js add BLE aerial test to self-test, now also start immediately on BTN4 at boot\n\n     1v98 : Allow Crypto SHA1 without SHA256/512 (for ESP8266 where flash is scarce)\n            Add better docs for the form of Wifi callback functions\n            Modify ESP8266/ESP32 callbacks to match the node.js style used elsewhere\n            nRF52: fix pin.toggle() on software-negated pins\n            Pixl.js: Reorder pins so 0..13 are also D0..13 for better Arduino compatibility\n            Fix dump() when used with code written using E.setBootCode(..), (fix #1398)\n            Allow parseInt/parseFloat to be used on very large strings if the number doesn't extend right to the end (fix #1397)\n            nRF5x: Fix memory leak on NRF.connect\n            Fix memory leak if an exception is thrown within a rejected promise\n            ESP8266: rewrite wifi.save and restore to use the storage lib (imp #1380)\n\t    ESP8266: Add missing option ssid_hidden for Wifi.startAP() (imp #1358)\n            Fixed double-connect issue for TCP sockets\n            Pixl.js: Ensure Pixl.menu changes to bitmap fonts\n            Pixl.js: tweaked bias/contrast to improve display quality\n            ESP32: update esp-idf to v3.0. BLE support - thanks to @jumjum. Erase flash before flashing. vars now 2500\n            ESP8266: rearange rf_cal_sector (fix #1294)\n            ESP8266: Wifi.scan() now return authmode as text \n            ESP32: Fix accidental initialisation of UART3 when switching to Telnet (fix #1362)\n            nRF52: Added `NRF.setAddress` to allow the MAC address to be changed\n            Added Graphics.setFontAlign for font alignment and rotation\n            Make software I2C bitrate and waveform more accurate\n            Move default I2C bitrate to 100kbit/sec\n            Linux: don't create a espruino.flash file if we're not writing to flash\n            Add height check for Graphics.createArrayBuffer(...vertical_byte:true) (fix #1421)\n            Add sanity check for debug trace print statement (fix #1420)\n            Fix handling of exceptions in switch statements (fix #1352)\n            Fix 'return when not in function' regression when returning inside a catch block (fix #1422)\n            Don't load saved firmware images from different firmware versions - saved JS code still loaded (fix #1174)\n            Remove Graphics.setFontAlign and Graphics.getModified on devices with low flash memory\n\n     1v97 : nRF52: fix NRF.on('connect',...) issue\n            STM32: Fix setDeviceClockCmd error for USB.setConsole()\n            nRF5x: Fix getPinMode, which fixes SW I2C after save()\n            Thingy52: Don't report contents of 'Thingy' in 'dump()'\n            Thingy52: Allow multiple sounds to play at once\n            nRF5x: Ensure Waveform triggers a finished event\n            Thingy52: Enable simple bootloader, add travis build for DFU\n            Add Serial.inject to allow data to be added as if it was received from that device\n            Fix UDP handling so that it copes with packets not all being received in one go\n            STM32L496: increase variables - use full 320kB of RAM as it is contiguous\n            Add a maximum time for setTimeout/setInterval (100 years)\n            Fix Storage.write when writing partial file of the same length and initial contents\n            Fix corrupted timer channels returned by Pin.getInfo\n            Add command history to debugger\n            Remove process.env.EXPORTS (EXPTR does the same but takes less space)\n            Thingy52: Add 9 axis MPU support\n            Errors now store message in 'message', not 'msg' (fix #1366)\n            Ensure 'in' operator checks the prototype chain (fix #1365)\n            Promise.resolve now handles promises/thenables as arguments (fix #1363)\n            try..catch now creates exception in its own scope (fix #1367)\n            Thingy52,Pixl.js: add default NFC URL of the Espruino IDE \n            Add ArrayBuffer.byteLength property (fix #1374)\n            setWatch(..., {edge:\"rising\",debounce:25}) is now default for built-in buttons\n            Pixl.js: add Pixl.menu function for easy menus, build in graphical_menu.js\n            Fix regression in MDBT42Q advertised name\n            nRF52: Add E.getBattery as a more global battery percentage function, deprecate `Puck.getBatteryPercentage`\n            Fix '.buffer' regression in 'JSON.stringify(new Uint8Array([1,2,3,4]).buffer)'\n            Allow `typeof 123 .testing` without an exception (fix #1351)\n            Add crypto.AES to Puck.js and other nRF52 Espruino devices\n\n     1v96 : ESP8266: no callback if SSID is not available (fix #1297)\n            ESP8266: esp8266 wifi getStatus doesn't show savedMode (fix #752)\n            ESP8266: cleanup defines WIFI_DBG and NET_DBG for RELEASE\n            ESP8266: switch to single ld file eagle.app.v6.new.2048.ld for ESP8266_4MB board\n            Allow JS modules to be built-in by adding files to JSMODULESOURCES\n            Fix slow/hacky handling of 7 bit serial data for STM32\n            Add more stack checks so invalid code `typeof typeof typeof x100` can't break stack (fix #1310)\n            nRF5x: Fix PWM output via Waveform class\n            Fix free stack checking on ARM\n            nRF52: Make slightly more space available for stack\n            nRF5x: Move to SDK 12.3\n            Stop stack traces from being gathered in functions for Ctrl-C (fix #1313)\n            nRF5x: Fix crash if I2C is used before being initialised (fix #1301)\n            Internal printf can now pad with spaces\n            Add `E.dumpFreeList` in non-release builds to help with debugging\n            Fix mild memory leak in jsvMakeIntoVariableName that caused GC to run more often than normal\n            E.toString now tries harder to allocate a Flat String, and works with no-alloc for Uint8Array/FlatStrings\n            WIO_LTE fix SD card initialisation\n            Improve SD card reliability on all boards by trying to initialise multiple times before failing\n            Remove forced inlining in variable inspection functions (reduces flash usage by ~10k)\n            Remove un-needed DNS lookup for localhost\n            Add WIZnet UDP support\n            Tidying up build to avoid making un-needed bin, hex or lst files\n            Simplify flash save (and help debugging) by using the 'fake flash' implementation on Linux builds\n            Added Graphics.scroll command to scroll graphics contents\n            Added 'Terminal' class with built-in VT100 terminal\n            Tweak Espruino logo to be exactly 32 chars wide\n            Improved code for returning console device to the most useful place\n            Fix pinToString for devices with port A but no port B\n            Speed improvements for ArrayBuffer Graphics\n            Tidied up bootloader - devices with one LED now flash LED when button pressed\n            Simplify data returned by process.env\n            Add process.env.MODULES - to contain a list of the libraries provided in the firmware by require\n            Include WiFi and AT libraries inside Espruino WiFi builds\n            Add 'E.asm' placeholder to detect E.asm calls that haven't been replaced by the IDE\n            Add process.env.EXPTR to link to table of functions - will work better for compiled code over BLE\n            Added SAVE_ON_FLASH_EXTREME for HYSTM32_28, where we're now cutting out some Math.X functionality to keep builds going \n            Added `jshFlashGetMemMapAddress` to allow remapping of addresses for ESP8266/ESP32 without loads of code duplication\n            Remap peek8/16/32 addresses on ESP32/ESP8266 so it can be used on flash memory\n            Swapped save/load/E.setBootCode to use the flash library\n            Allow STM32LL port to write 32 bits to flash at a time to bring it in line with other ports\n            Allow flash writes *from* unaligned addresses on nRF52 and ESP8266 (previously this crashed the ESP8266)\n            Update process.ENV.EXPORTS to bring it in line with what the compiler uses\n            Now set 'this' correctly for Arrow Functions\n            Add ES6 classes and 'super'\n            nRF5x: Move all bluetooth events to event queue (removing MEMORY_BUSY issues)\n            Fix potential issue where EV_TYPE_MASK enum could be set incorrectly  \n            setWatch's edge argument can also be an integer now\n            Add 'data' option to setWatch to allow clocked data to be decoded easily\n            nRF52: Increase flash available for stored code from 12kB for 40kB\n            Now store/display appreviated commit in process.env, remove build date\n  \n     1v95 : nRF5x: Swap to UART fifo to avoid overrun errors at high baud rates\n            Ensure Exceptions/errors are reported on a blank line\n            Internal: Added initialiser argument to jsvNewStringOfLength\n            Internal: Added jsvObjectSetChildVar/jsvObjectSetChildVar/jsvObjectSetChildVar\n            Internal: Fix jsvCopy if given a NAME_INT/etc\n            Added ES6's Object.assign\n            nRF5x: NRF.setScan now reads service data automatically\n            nRF5x: NRF.findDevices aggregates data from multiple advertising packets\n            nRF5x: Remove app_uart and use nrf_drv_uart with double buffering - fix uart overflow errors (fix #1238)\n            nRF5x: Fix issue with findDevices/setScan servicedata when all digits of service are numbers (eg \"1809\")\n            Fix memory leak in tab completion code\n            Add `E.errorFlag` event to allow JS to respond to internal errors\n            Use Esc[J VT100 code when cycling through command history (much faster REPL on low bandwidth connections)\n            ESP8266: Remove debugger again as it will never work on 8266\n            ESP8266: Enable unaligned reads for ESP8266_4MB (fix #1240,#837)\n            ESP8266: move code save section to fist partition for memory mapping for ESP8266_4MB (fix #1240)\n            ESP8266: Add GPIO16 as D16 without watch (#1206) but soft PWM/I2C/SPI/etc \n            ESP8266: Remove osprintf for RELEASE=1 \n            Internal: Networkjs now forwards `socketType` - laying groundwork for UDP over AT command (#1232)\n            Added simple RegExp implemention (partial fix #256)\n            Speed up JSON.stringify for Arrays, and output non-numeric array elements in REPL (fix #64)\n            nRF5x: Bump nRF52-based boards variable count from 2000 to 2500 (fix #1215)\n            Ensure Ctrl-C doesn't redraw the input line if it's already empty\n            Added String.replace(regex, function) (fix #1256)\n            With E.setFlags({pretokenise:1}), ensure stack traces are not tokenised (fix #1258)\n            Allow digitalWrite/Read to take an object as an argument (calling .write and .read on it)\n            Add `E.getAddressOf` to allow embedded targets to get memory addresses for DMA/etc\n            nRF5x: Fix issue where doing a soft reset in the middle of some BLE ops could cause an assert in debug builds\n            nRF5x: Manufacturer Data is now decoded in advertising packets\n            Fix memory leak when allocating DataViews\n            nRF5x: Fix memory leak on BLE notifications\n            Ensure net/http .listen return the server instance (fix #1276)\n            nRF5x: Allow Manufacturer Data to be specified with setAdvertising\n            Internal: Fix memory leak in jsvArrayPushAll\n            nRF5x: jsvArrayPushAll memory leak fixes NRF.findDevices memory leak when services present\n            Internal: jsvNewIterator now has an option to iterate over sparse arrays as if they weren't sparse\n            Fixed some built-in functions that misbehaved when given sparse arrays\n            Puck.js: Allow flash memory protection to be overwridden with E.setFlags\n            Fix lexing of '/*/' as a complete block comment\n            nRF5x: Add support for negating pins in software (eg. buttons/LEDs)\n            Add `E.setFlags({unsyncFiles:1}` which doesn't sync the file to the SD card after each write - it's *much* faster\n            Filesystem API now uses flat strings (avoiding the 512 byte copy for each call)\n            Increase default internal SD card bitrate to 4MHz (from 100k)\n            nRF5x: Handle promise completions and advertising using IO queue, to avoid MEMORY_BUSY messages (#1277)\n            Allow E.HSBtoRGB to wrap 'hue' value, and allow it to return an array of [r,g,b] (fix #1283)\n            Remove spikes when changing pin state (fix #1274)\n            Changes to reduce code duplication in jswrapper.c\n            Fix `E.setBootCode` when no argument is supplied\n            Add WIZnet W5500 support to Espruino WiFi build\n\n     1v94 : Allow Espruino boards to reset straight out of the DFU Bootloader             \n            Improvements in handling errors in code running in IRQs\n             - if writing to disconnected Bluetooth device, throw data away immediately\n             - Drop chars if output buffer is full while waiting in an IRQ\n             - Handle out of memory errors in jsvCreateNewChild\n             - Do not garbage collect inside an IRQ\n            On nRF52 devices, allow button press at boot to clear out peer manager data\n            Work out length of typed array with offset correctly (fix #1204)\n            nRF5x: Add Watchdog timer handling\n            nRF52: start new connections on idle to ease memory allocation conflicts between code execution & IRQs\n            nRF52: Ignore INVALID_STATE from CONN_PARAM_UPDATE_REQUEST (it can happen if we disconnect and then SD requests an update)\n            Fix Date.toString for dates before 1970\n            STM32: Fix handling of months when setting the internal RTC\n            Move to a faster jsvNewFlatStringOfLength which avoids blocking memory allocation\n            nRF5x: If a task is in progress, report the task ID (BleTask enum)\n            nRF52: Report central mode promise errors correctly if returned by softdevice\n            Remove 'out of memory' warning messages (it's stored as a flag anyway)\n            nRF5x: Don't disable IRQs completely for some things - only disable Espruino ones\n            Fix tab complete for Pins (fix #1213)\n            ESP8266: Fix load() causes endless loops (fix #1037)\n            ESP8266: Wifi library doesn't handle {password: null} (fix #753)\n            ESP8266: make topstrings and topreadonly work on Mac OS X (fix #1210)\n            Change order of execution for init - E.on('init',...) now executed before onInit\n            Added Error flag to show if a UART overflow has occurred\n            Change more instances of jsWarn to jsException\n            Avoid printing error messages during execution, and report to console on idle when if errors were flagged (fix #766)\n            Increase HTTP server and client version from 1.0 to 1.1 (needed for Websockets on Safari)\n            Stop 'require' creating an undefined Module entry in the modules list (fix #1218)\n            Stop require dumping filesystem errors as well as 'module not found'\n            Now throw an exception when writing to a closed socket (fix #1220)\n            Set the internal 'conn' variable to false when a connection closes to avoid confusion\n            nRF5x: Fix typo so we wake every 4 min for RTC, not 0.25 sec!\n            process.memory() now reports time taken for GC and vars GC'd\n            Slightly more aggressive idle GC on most platforms (at 5% free)\n            Don't warn the user when we had to run a GC pass during execution\n            Fix issue drawing on right-hand side of rotated graphics where H>W (regression in 1v93) \n            If >1 button, set pin state correctly at boot/reset\n            Add an argument to `reset`. `reset(true)` will now cause all Flash memory to be cleared as well.\n            Puck.js: Holding down the button while booting (past the the 5 LED flashes) will now cause data saved in Flash to be cleared\n            STM32: Remove the 'utility timer' from the list of available PWM pins, fixing A0/1/2 PWM on F4 (fix #1229)\n            Disable Graphics.createCallback on devices with small amounts of flash memory - rarely used on those devices and fixes HYSTM32_28 build\n\n     1v93 : Ensure that specifying too many advertising UUIDs causes an exception, not a reboot\n            nRF5x: Fix for time jump caused by reentrancy in jshGetSystemTime\n            Fix regression causing multiple end/close callbacks when using standard TCP/IP socket client/server\n            Ensure NetworkJS reports receive errors back correctly\n            nRF5x: Fix issue where connect and immediate disconnect could in some cases trigger an error from nordic's libraries that'd cause a reboot\n            Fix regression that caused Original Espruino to have lost Filesystem/hashlib/neopixel support in 1v92\n\t    Re-add TV output to Original Espruino\n            Fix some stack overflow bugs on Linux found by fuzzing (#1147)\n            Remove un-needed code for parsing '.' in var statement (#1147)\n            Add autocomplete for pin names (fix #1124)\n            Add Array.indexOf fromIndex support (fix #162)\n            Puck.js: Add BluetoothRemoteGATTServer.startBonding to allow bonding to be initiated when Puck.js is a central\n            Fat FS: closedir after readdir, FS errors should be catchable (#1164), fs.statSync (#1163)\n            Allow hardware (CTS) flow control (fix #1165)\n            nRF52: Add AntiCat's patch to Nordic's NFC library to cope with malformed NFC requests\n            Puck.js: Fix increased battery drain after NFC usage (fix #1171)\n            Puck.js: Fix WS2811 output library that would output bad data after neopixel waveform (fix #1154)\n            nRF52: Seed random number generator at boot (fix #1166)\n            Stop trailing decimal point if there are no digits after it - which could cause issues in JSON\n            Don't enter debugger if we're in the middle of uploading (echo_off_for_line) (fix #644)\n            Added Date setters (fix #504)\n            Allow Timezone to be set for Date with E.setTimeZone(...) (fix #530)\n            Added RegEx lexing (part of #256)\n            Puck.js: fix error 8 from NRF.sleep during an active connection \n            nRF5x: Fix `NRF.updateServices` when a 128 bit service shares the same 16 bit UUID\n            Add 'errors' option when using `Serial.setup` to enable error handling (and turn it off by default as it can fill the input queue)\n            nRF52: Re-initialise services and HID after a `save()` (fix #1185)\n            nRF5x: Add NRF.getAdvertisingData\n            nRF5x: Allow array of objects in NRF.setAdvertising (fix #1188)\n            Fix internal vcbprintf JSON dumping\n            nRF5x: NRF.findDevices will now throw an exception if no callback is supplied\n            nRF52: Added BluetoothRemoteGATTServer.getSecurityStatus to check the status of the link\n            nRF52: Disable auto-whitelisting by default, add with `NRF.setWhitelist` (fix #1187)\n            nRF52: Allow secure Bluetooth LE connections\n            Don't draw font characters that are off the edge of the screen\n            Make atob and btoa use flat string for larger amounts of data (faster & more memory efficient) (fix #1192)\n            nRF52: Pull in Nordic SDK13 code to crash caused by writing large characteristic (fix #1181)\n            Puck.js: Added Puck.magTemp() function to get the magnetometer's temperature as well\n            nRF5x: Fix issue where 'NRF.sleep()' called while a connection was active could cause Espruino to go into a high power draw mode\n            Fix Object.setPrototypeOf when called on undefined (fix #1194)\n            Fix dumping of an ArrayBuffer containing data (new ArrayBuffer([1,2,3]) isn't valid)\n            Fix setAdvertising regression where name would be lost after save() (fix #1193)\n            Add `E.set/getFlags` to allow interpreter state to be controlled from one place\n            Add `E.setFlags({pretokenise:1})` to dynamically turn on pretokenisation (fix #1178)\n\n     1v92 : nRF5x: Fix issue where Espruino could crash during save() if the flash got into a strange state\n            Added Pin.toggle() function\n            Fix implicit casting to bool/number on ArrayBuffers (fix #1030)\n            Fix jstExecuteTaskChecker bug, and allow jstExecuteFn to take a userdata argument\n            Puck.js: Reduce IR LED to 10% duty cycle\n            Puck.js: Allow Puck.IR to take pins for external IR LED (fix #927)\n            nRF52: Allow arbitrary NFC data to be specified (fix #1021)\n            nRF5x: Allow multiple advertising packets to be set at once with NRF.setAdvertising\n            nRF52: Add 'properties' object to BluetoothRemoteGATTCharacteristic\n            nRF52: Perform write without response if that is what is required \n            Pico/WiFi: Allow USB HID to work on Windows (from @nailxx)\n            Allow Puck.js/nRF52 devices to drive Neopixel/WS281x/APA10x LEDs with require(\"neopixel\").write (fix #1023)\n            Fix crash in JSON.stringify for zero-length typed arrays\n            Fix precedence of 'void' keyword (fix #1079)\n            nRF52: Add BluetoothRemoteGATTCharacteristic.startNotifications (fix #959)\n            nRF52: Added BluetoothDevice.gattserverdisconnected event\n            nRF5x: Report back reason codes for BLE disconnect\n            Added DataView class\n            nRF52: char.readValue now returns DataView to be more Web Bluetooth compliant (fix #1091)\n            nRF5x: Fix explicit disconnect being able to reboot Puck (fix #1088)\n            nRF5x: Respond to conn_params update request, fix puck-puck disconnection after ~65 sec (fix #1089)\n            nRF52: Change connection params for central mode so NRF.setLowPowerConnection affects connection speed\n            Un-inlining jsvGet*AndUnLock functions to give us a little more free flash\n\t    ESP8266: RELEASE=1 sets WIFI_DBG and NET_DBG to 0 to shrink firmware size\n\t    ESP8266: Add Wifi.setAPIP() and Wifi.setIP\n\t    ESP8266: Add i2c clock stretch (#1097)\n\t    Fix E.FFT output (enable magnitude when one array specified)\n            Puck.js: Correct reading if using analogWrite to red LED and *then* using Puck.light()\n            Improved build process for all boards\n            Pin.toggle now returns a boolean (fix #1111)\n            nRF52: Now use 'high drive' mode for GPIOs\n            Puck.js: tweak IR duty cycle, with high drive GPIO range is ~3x more\n            nRF52: switch compilation to size optimisation, not speed\n            nRF5x: Allow services to be advertised (fix #996)\n            JSON.parse now throws an exception if an incorrect value type is found (fix #1117)\n            Pipe close event handlers now use 'this' arg - solves auto-closing pipe when piping from HTTP\n            nRF5x: stop app_timer NRF_ERROR_INVALID_PARAM errors (trying to sleep for too little time)\n            Added flash emulation to Linux port\n            Increase max graphics size from 1023 to 32767\n\t    Add Fat File System to boards with large Flash (ESP32)\n            nRF52: Don't get stuck in 'HID Busy' state if a HID send failed\n            Change name of socket close internal variable so it doesn't conflict with Pipe's close call\n            Stop pipe from causing errors if fields of the requested names exist but aren't functions\n            nRF52: Fix upgrade from older firmwares if saved code is in flash, reduce virtual pages to 2\n            Fix segfault detected by fuzzing (#1133)\n            Fix File.read so that end of file triggers pipe.end event\n            ESP8266: Add BOARD ESP8266_4M with 1600 vars, 64K save area and GRAPHICS (#1110)\n            ESP8266: Add ESP8266.deepSleep(micros, option) (#1102)\n\n     1v91 : Fix recent regression if no Boot Code defined at startup\n            Fix handling of return of rejected promise within a promise\n            Fix regression where HTTPS without cert/ca or key failed\n            nRF52: Making NRF.getPrimaryService/etc more robust\n            nRF5x: Add NRF.getAddress() - fix #1001\n            Fix bug that caused load() not to clear memory if only E.setBootCode was used\n            microbit: Update Espruino with pin polarity, so saved code gets loaded without BTN1 pressed\n            Fix bug that caused Bluetooth/TV/USB objects to be added in devices that didn't support them (fix #832)\n            nRF52: Increase custom UUID count from 3 to 10\n            Adding Global built-in objects like SPI1/Serial1 and Bluetooth to the docs\n            Puck.js: Tweak battery percentage calculation to try and make it more linear\n            Puck.js: Adjust Puck.light() levels based on battery percentage (and add comments)\n            nRF5x: Fix E.hwRand() (fix #1010)\n            Ensure tab complete/others include the Object proto even on functions/strings\n            nRF5x: Add NRF.restart() to force the restart of the Bluetooth Softdevice if required\n            nRF5x: Add E.setLowPowerConnection(bool) to allow continuous connections to Puck.js (fix #995)\n            Allow implicit conversion of hexadecimal strings to numbers (fix #1016)\n            Allow arrow functions inside nonexecuting functions (fix #1011)\n\n     1v90 : Fixes for Promise.all (passing in non-promises, pre-resolved, and ordering) (fix #976)\n            Fix arrow function bug when parsing multiple arguments\n            Added more helpful error messages for TLS\n            Allow `Modules.addCached` to take a function (makes module loading more memory efficient)\n            Re-add Espruino's old `rand` function (so no malloc, and ~1kB RAM, ~3kB ROM saved)\n            nRF5x: Ensure 'NRF.sleep' works even when connected\n            Fix bug when using >32 bit integers as array indices (fix #984)\n            Fix bug when parsing '.catch' while not executing (fix #989)\n            Stop PWM 'glitching' when moving from a nonzero value down to 0 (partial #991)\n            nRF5x: Add multi-channel hardware PWM (fix #991, fix #972)\n            'dump()' now outputs code written with E.setBootCode as well (fix #999)\n            nRF5x: Remember advertising information even after softdevice reboot  (fix #997)\n            nRF51: Remove heap placeholder on nRF51 as not needed since no malloc. Increase nRF51 var count (fix #985)\n            nRF5x: 'connect' event now contains address of device that has connected, and fix docs\n            nRF5x: Add a 'NRF.disconnect' function to disconnect a client that has connected to Puck.js\n            nRF5x: Fix timing accuracy problems with setWatch\n\n     1v89 : Allow entering of multi-line Templated Literals on the command-line (fix #970)\n            Make lexer fail when parsing non-templated strings with newlines in \n            Add 'let' and 'const' keywords - treat them like 'var' for now\n            Increased findDevices timeout to 2 seconds\n            Allowed 16 bit UUIDs to be specified as simply \"ABCD\" (no \"0x\")\n            Improved BLE error messages (especially from Promises)\n            Fix STM32F1 regression caused by F4 LSE fixes\n            Fix comma operator regression caused by recent arrow functions addition\n            Remove RTC changes for STM32F1\n            nRF5x: Make sure that updateServices(notify) on a non-notifyable service will just error, rather than reset (fix #973)\n            nRF5x: Ensure setWatch doesn't reset pin state\n            nRF5x: Reset pin states to default on 'reset()'\n            nRF5x: Move advertising back to 375ms (more reliable connections)\n            Puck: allow Puck.mag to work while magnetometer is on\n\n     1v88 : jshSetEventCallback callbacks now get an argument with the channel number\n            Tab complete now offers a much better set of completions (fix #926)\n            Fix emitting of events with long names (fix #906)\n            Ensure 'af_opendrain' pin mode gets remembered when saving (fix #890)\n            Add second Promise.then argument (fix #869)\n            Fix 'chained' promises (fix #894)\n            Fixed memory leak when automatically converting a simple object to a String\n            Added ES6 Template Literals\n            Initial commit of ES6 arrow functions\n            Add 'opendrain_pullup' pinMode (including emulation on STM32F1)\n            Make OneWire use opendrain_pullup (no resistor needed for short runs now)\n            Add Software I2C (with opendrain_pullup) (ref #549, fix #29)\n            Cope with new escape codes for home and end on Ubuntu 16.04 (27,91,70/72)\n            Tweak VGA output back porch to 2ms (so leftmost pixels always on screen)\n            Fix regression with 2 concurrent waveforms on different pins (fix #930)\n            nRF5x: add updateServices, and allow setServices to be called multiple times (partial #936)\n            Added Puck.getBatteryPercentage() utility function\n            nRF5x: setServices can now uninitialise SD in order to remove added services\n            Added E.lockConsole() for use with E.setPassword()\n            Calling jsvRemoveChild at end of array now updates the length (fix #946)\n            Allow padding to be specified as 3rd argument of JSON.stringify\n            JSON.stringify now dumps typed arrays as arrays (fix #489)\n            nRF52: BLE HID support and switchable Nordic UART\n            Fix STM32 regression where pinMode was set when it shouldn't have been\n            Add Third option to pinMode to allow the pin mode to be set while keeping it 'unforced'\n            Save and dump now keep track of whether pin mode had been forced or not\n            readFile (and File.read) now uses Flat Strings to allow more memory efficient reads (fix #932)\n            nRF5x: Add ability to get RSSI of current connection (fix #928)\n            More STM32 changes to LSI->LSE clock switchover to fix RTC misconfiguration on Espruino WiFi\n            Move LED + BTN definitions to Symbol Table (allows autocomplete)\n            When moving console before printing has started, move all buffer contents as well\n            Fix regression where replacing a function starting with 'return' with another would cause errors\n            Fix potential issues with Telnet server and return values from netCreateSocket/netAccept on some platforms (fix #931)\n            nRF5x: Add Puck.js self-test code, fix issue where analogRead reset pin state\n            nRF5x: Change central mode API to mirror Web Bluetooth\n            Fix switch fall-through to default (fix #964)\n            Started using jsvObjectRemoveChild to remove some internal object properties that are undefined (frees some variables)\n            Added E.dumpLockedVars() in non-release builds to help debug memory leaks in libraries\n            nRF5x: Added NRF.findDevices as a helper function to easily list BT devices in range\n            Console now prints the type of Objects if their constructor is in the root scope\n            nRF5x: setScan/findDevices now parses advertising data\n            nRF5x: Added Web Bluetooth style requestDevice function\n            Add spaces between large tab completes\n            Correct the handling of exceptions in promises\n            Ensure that exceptions have a 'stack' attribute if they can have children\n            nRF5x: Added list of free flash areas\n            Make sure Puck.js users can't overwrite bootloader/softdevice (doing so would brick the board)\n            Fix micro:bit/nRF51 ctrl-c behaviour (fix #905)\n            Simplified process.env on devices with little memory\n            nRF5x: fixed serial number reporting\n            Move button state setup to jshResetDevices\n            Had to remove 'dump()' and SW I2C on devices with very little flash memory (Olimexino/Micro:bit)\n\n     1v87 : Add support for compiling with float-abi=hard (even if it doesn't give us real-world benefits)\n            Add shortcut for quick execution of common call types\n            Fix BBC micro:bit save() regression from 1v86\n            Fix 'lock overflow' when calling methods with 'this' bound (fix #870, fix #885)\n            Fix jsvStringIteratorGetCharOrMinusOne for zero-length strings\n            Allow tab-completion straight after '.'\n            Make sure execution stops for native functions if there's an error when parsing arguments\n            NRF5x: remove setName and add functionality to setAdvertising, along with advertising interval\n            NRF5x: allow raw advertising data in setAdvertising\n            Add E.setPassword - allows Espruino console to be locked\n            Fix pin header numbering for BBC micro:bit (it changed for the production version) (fix #896)\n            Allow Magnetometer speed to be specified for Puck.js\n            Fix out of memory when appending a string to itself\n            Allow members of the same name as function arguments to be added to a function (fix #913)\n            Fix STM32F4 RTC stopping if reset during first 1 sec of boot, also fix Espruino WiFi board clock startup\n            Fix issue where native functions couldn't be replaced by non-native fns (fix #879)\n            If statements now return values (fix #909)\n            Fix >8 bit SPI when sending single elements with SPI.send (fix #897)\n            Sockets now fire 'end' events (fix #886)\n            Added Graphics.draw/fillCircle (fix #920)\n\n     1v86 : Compile Telnet server into linux by default, Add '--telnet' command-line option to enable it\n            Fix lock 'leak' in Telnet when Telnet is turned off\n            Add Telnet serial device to allow redirection\n            Create errors for unterminated expressions (fix #814)\n            Remove Espruino's built-in strcpy/etc\n            Remove Espruino's built-in maths\n            Add basic Taylor series sin and atan for when we're trying to save memory\n            Refactoring to use global var for lexer - save some memory and increase parse speed\n            Add .removeListener (fix #30)\n            Added better micro:bit `show()` that works well with Graphics\n            Add `require(\"Flash\").getFree()` as multiplatform way to find free flash pages (fix #815)\n            Add the ability to set clock frequencies on STM32F4 chips (like Pico) with E.setClock (fix #52)\n            `jsvEvaluate` now uses memory area for execution of JS strings (fix #817)\n            Add `E.setBootCode` to allow JS scripts to be run without being in RAM (fix #740)\n            'Expecting a number or something iterable, got X' changed to exception rather than warning (gives stack trace)\n            Drop '.init' and '.fini' symbols, allowing GCC 5.x compilation on STM32\n            Ensure that pinMode/digitalWrite is re-constituted properly by dump() and save() (fix #833)\n            ESP8266: add stack dump on fatal exception, ./targets/esp8266/printstack can extract a backtrace\n            ESP8266: move JswSymPtr and JswSymList to flash to free up gobs of RAM, bump jsvars to 1600\n            Fix write to flash when BLE connected on nRF51/2\n            Fix potential variable corruption issue when copying objects/arrays containing packed ints\n            Fix ESP8266 printLog memory leak (fix #852)\n            When parsing from a Native String (E.memoryArea), use Native String for function code too.\n            Added built-in Promise implementation\n            Fix broken Object.keys/getOwnPropertyNames caused by ESP8266 RAM saving tweaks\n            Add Object.g/setPrototypeOf (fix #856)\n            Fix memory leak when executing bound function with 'this'\n            Fix missing PBKDF2 & AES libs on Pico + Linux caused by an untested ESP8266 commit\n            Fix negative Date to string code (fix #854)\n            Convert type warnings to exceptions (to provide stack traces for problems)\n            Add uncaughtException event (fix #846)\n            Stop eval in a switch statement from confusing parsing (Fix #845)\n            Fix regression in 'mode' argument of SPI.setup (allows custom CC3000 pins to work)\n            Fix '.on' with long event names\n            Enable F4Discovery button pull-down. Newer boards don't seem to have one fitted\n            Add 'force' to 'Serial.setConsole' - you can force the console to stay in one place\n            Fix micro:bit compass problems (fix #864)\n            Ensure that Pico can properly enter deep sleep even if USB is never used\n            Only inline the very basic variable iterator functions (save enough space to allow Espruino board build again)\n            Don't include Promises on devices where flash memory of Scarce (fix Olimexino compile)\n            Fix glitches in PWM output when updating Software PWM quickly (fix #865)\n            Added `E.kickWatchdog()` to allow you to keep your JavaScript running - not just the interpreter (fix #859)\n            Ensure all pins set to AIN on startup\n            Fix regression where setWatch would remove pulldown from button if called after reset()\n            Reduce amount of flash available for saved code on Original Espruino (until we can get code size down)\n\n     1v85 : Ensure HttpServerResponse.writeHead actually sends the header right away\n             - enables WebSocket Server support from JS\n            Fix issue where GC'd objects referencing non-GC'd data wouldn't unreference it\n            Add E.memoryArea to allow memory addresses to be treated as variables\n            Fix STM32F4 LSI clock frequency - should make the Pico's RTC a lot more accurate (fix #776)\n            Added HeatShrink compression to saved code (instead of RLE)\n            If saving fails, delete command history and try again.\n            Make sure `reset()` resets the sleep and busy indicator pins\n            Now escape characters >=127 as well (fix #780)\n            Add decodeURIComponent (fix #779)\n            Allow reset();save() on one line\n            Fix potential issue parsing HTTP headers when more data is sent after the header (fix #783)\n            Fix broken storage of floating point values when <255 variables\n            Fix regression where DACs didn't work on Original Espruino Board\n            Improve tab complete's memopry usage\n            Added Tab complete and Debug to low-end Nordic uCs\n            Limit the number of events processed each time around the idle loop to the number that were in it at the start\n             - helps to fix issues with out of memory when receiving big files over ESP8266 serial connection\n            Allow different types of network to have different buffer sizes - enlarge JS, Linux and WIZnet buffers\n            Fix bug where clearInterval() and setWatch with debounce could cause setWatch to momentarily stop working\n            Make HTTP server only close connection after Content-Length bytes received\n            Speed up jsvNewFlatStringOfLength by combining it with updating the free var list\n            Update the free var list when garbage collecting (makes allocation at the start of memory more likely)\n            Don't zero the contents of memory when freeing - speeds up deallocation\n            Removal of un-needed zero initialisations for variables\n            Only garbage collect on idle if we're low on memory (fix #767)\n            Improve malloc behaviour for crypto lib (try and free all command history is first alloc fails)\n            Improve HTTPS error messages\n            Add READ_FLASH_UINT8, allowing ESP8266 to read&exec strings stored in Flash with E.memoryArea\n            Start the RTC up running off LSI, and switch after a few seconds if the LSE has started correctly\n            Allow JSV_GET_AS_CHAR_ARRAY to get a pointer to memory in ArrayBuffers or memoryAreas\n            Reset PinStateIsManual in reset (fix #765)\n\n     1v84 : Fix device initialisation flags not working when the device number is above 32 (fix #751, #748)\n             - this fixes broken SPI when not on standard pins\n\n     1v83 : Moved to size optimisation for Pico (needed to get HTTPS into 384kB)\n            Ensure Modules.addCached doesn't reset parse state (fix #723)\n            dump() in Espruino Pico now ignored the pull-down for the button (fix #731)\n            Warn when \"compiled\" functions gets into Espruiono (fix #707)\n            Fix lost character on Espruino Startup (fix #704)\n            Fix duplicated characters when USB+USART IRQs fire at the same time  (fix #635)\n            Fixed Serial.find(...)\n            Detect UART framing and parity errors and emit them as events on the Serial object\n            Fix [] instanceof Object (fix #737)\n            Fix regression in jsvCopyNameOnly (Object.getOwnPropertyNames when names are >8 characters long)\n            HTTP requests (and sockets) can now emit 'error' event (fix #706)\n            Add optional `ca`,`key`, and `cert` for server public key when using HTTPS or TLS (fix #736)\n\n     1v82 : Fix debugger regression (where quit/reset/etc don't exit properly)\n            Fix wakeup when setDeepSleep used at startup (fix #645)\n            Add `shiftOut` function (fix #631)\n            Store line numbers for functions (via `Esc [ 1234 d` escape code before decl) and use in debug + stack traces\n            Allow Ctrl-C to break out of tight loops with function calls in\n            Add tab -> autocomplete in Console (fix #677)\n            Fix I2C repeated start (#390)\n            Fix regression in Math.random() - now back between 0 and 1 (fix #656)\n            Fix `var a=0;typeof a -> \"undefined\"` (fix #683)\n            Don't store brackets in functions (fix #204)\n            Store functions as 'flat strings' if long enough (fix #467)\n            Move most functions out of jsvar.h header file - improves code size on devices where they're not inlined\n            Fix parse error for switch statements which meant that `switch (a,b)` caused an error\n            Fix error message when `LoopbackA.setConsole()` called\n            Move SPI/I2C/Serial initialisers to jsvReadConfigObject, will now error on invalid args (fix #413)\n            Fix issue where double-buffered waveforms would use the wrong buffer in the callback\n            Fix memory leak in tab autocomplete on objects\n            Added AES crypto library (Pico only)\n            Fix `typeof (new Uint8Array([1, 2, 3, 4]))`\n            Store `function(){return ...}` without the return (fix #700)\n            Increased simple string usage from 4 chars up to 8\n            Swap order of JsVar internals, string usage up to 10 chars\n            Add handling for uint32_t,uint64_t,uint32_t case for Raspberry Pi\n            Add startup sanity checks for jsnative.c (in non-release builds)\n            Added fix for returning floats on Raspberry Pi\n            When <1024 JsVars, `lastChild`'s top bits are stored in `flags`, and pack\n               is moved such that we get 1 extra character in StringExts\n            Allow events of >12 characters length\n            Fix regression in flash memory write (introduced via AES merge)\n            Fixed instability when resetting after using SD card on non-standard pins\n            HTTPS support on Pico (when compiled in)\n            Rename USE_HTTPS to USE_TLS, and enable by default for Pico + Linux\n            Add 'tls' module with 'connect' - for TLS Socket connections\n\n     1v81 : Fix regression on UART4/5 (bug #559)\n            Fix Serial3 on C10/C11 for F103 boards (fix #409)\n            Remove Graphics.setColorHSV, add E.HSBtoRGB (fix #554)\n            Make jsiDumpState/jsiAppendHardwareInitialisation use callbacks (fix #398)\n            Add `E.dumpStr()` to dump current state of interpreter as a string\n            Add ReferenceError, and ensure that TypeError gets converted to a string properly\n            Actually create ReferenceError for undefined variables\n            Fix Object constructor behaviour (fix #561)\n            Now remove intervals/watches if they occur within 0.1s of a Ctrl-C on a blank line\n            Fix parsing of trailing commas [,,1,,,]\n            Treat vertical tab as whitespace\n            Make sure we ReferenceError on '+='/etc\n            Allow reserved words in record access and structure definitions\n            Add Object.defineProperty/defineProperties (even if they ignore most args)\n            Fix value returned when redefining an existing function\n            Ensure Pico powers down USB in deep sleep - now down to 20uA!\n            Fix Exception throw within catch block (fix #566)\n            Fix issue where new Array(3.0) wouldn't produce a 3 element array\n            Keep track of modified area in Graphics (so modules with `.flip()` can be speeded up)\n            Fix `new Date('December 17, 1995 03:24:00')` - check only first 3 chars of month\n            Allow Software PWM via `analogWrite(..., {soft:true})`\n            Add `encodeURIComponent`\n            Make sure `typeof unknown` doesn't ReferenceError\n            Fix isNaN behaviour for 2 element array\n            Fix jshPopIOEventOfType when element is at the top of queue anyway\n            Produce more reasonable behaviour when converting very long strings to ints/floats\n            Added built-in JavaScript debugger! See espruino.com/Debugger for details (fix #37)\n            Fix crash when using E.getSizeOf() in some cases\n            Make sure a TCPIP connection closes even if no data sent\n            Make `flash.erasePage` safe if called without arguments (fix #586)\n            Add `Pin.getInfo` to see what a Pin can do (for #93)\n            Move Pin function code out of jshardware\n            Add `E.on('init', ...)` - like `onInit` but allows multiple handlers\n            Make sure `dump()` and `E.dumpStr()` dump the contents of Serial as well as events for other objects\n            `E.getSizeOf(.., 1)` can now recurse into objects showing the sizes of all their children (fix #579)\n            Fix bug when appending to a flat string (fix #614)\n            Add `Serial/SPI/I2C.find(pin)` - so we can figure out what device to use based on the pin\n            Ensure that when uploading, each command gets checked for errors (rather than right at the end)\n            Fix writes on HTTP requests after a timeout, and add chunked encoding if the header is set.\n            Added pin info for bit-banded pin addresses (and jshGetPinAddress).\n\n     1v80 : Fix SD card IO that can corrupt SD card on file append since 1v73 (fix #536)\n            Fix some potential pointer issues in hashlib\n            Make debounced setWatch output state+time information (regression fix #537)\n            Shorten some internal property names (faster/less mem is 4 chars or under)\n            Change 'internal property' prefix from '>' (fix #540)\n            Duplicate properties in an object defn. now cause second to be used (fix #495)\n            Make sure `E.unmountSD` doesn't forget custom SD card configs from `E.connectSDCard`\n            Added support for USB CK pin (fix #544)\n            ES5 parseInt behaviour - don't treat numbers beginning with 0 as octals (fix #538)\n            SPI.send now returns Uint8Array when passed an array. Also takes `{data:X, count:Y}` as argument (fix #485)\n            Fix `parseFloat(Infinity)` (fix #314)\n            Speed up jsvIterateCallback for arraybuffers\n            SPI speed improvements, esp for SPI.write (fix #547)\n            TV out tidyup, and VGA output can now do line doubling\n            Merge in USB HID support for STM32F4 (keeping old USB for the F1)\n            Add built-in 'Flash' module to allow Flash memory to be accessed from user code\n            Pulled load/save code out of jshardware into jswrap_flash.c\n            Remove jsiOneSecondAfterStartup from Linux builds (fix #551)\n            Add RLE compression when saving to flash, increase Pico RAM from 3000 to 5000 vars (fix #543)\n            Fix `JSON.parse` when not given strings (fix #546)\n            Tweak Olimexino board - 700->1k vars, but lowered code flash to 6k\n            Disable flash prefetch on Pico (~1% slower, but less power and way more accurate ADC readings) (fix #545)\n            Now throw errors when 'in' is used on an invalid datatype (fix #550)\n            Updated (inaccurate) docs for Serial.write/print and removed duplicated code\n            Changed Pico's device class to 0x02 - now works on older Mac OS 10.6.8\n            Change reported USB HID type to 0, from 2 (mouse)\n            Improve digitalWrite/etc documentation\n            Add `pin.mode` and `pin.getMode` functions (mirroring `pinMode`)\n            `Serial.setup` now remembers options if none specified (fix #557)\n\n     1v79 : Fix Mac address parsing for top nibbles\n            Make bind reference function internals not copy them. Fix scoped vars in bind (fix #533)\n            Use jsvUnlockMany to tidy up code and save some space\n            jsiExecuteEventCallback can now take an arbitrary number of arguments\n            Allow setTimeout/setInterval to take extra arguments (fix #532)\n            Ensure HTTP is closed even when no data handler (fix #535)\n            Seed random number from analog input, add W.hwRand and E.srand (fix #534)\n            Fix timing bug when setting timeouts from intervals in Deep Sleep\n            Reduce timeout for IO (eg. I2C write) on F401 and F4\n            Tweaks to keep code size low enough for Olimexino\n\n     1v78 : Fix regression where SPI2/3 weren't working on most pins (fix #525)\n            Allow MAC address to be set for WIZnet (fix #527)\n            Ensure res.on('close') is called for empty HTTP requests (fix #528)\n            Ensure that A9 is never the default pin for USART1 output (fix #526)\n\n     1v77 : Add E.mapInPlace\n            Allowed ArrayBuffer Graphics to store pixels MSB-first\n            Added faster software SPI path for simple writes\n            Make sure filesystem support gets compiled into Espruino Pico\n            Fix jsvGetFlatStringPointer to return the correct address\n            Fix I2C2/I2C3 on Pico\n            Fix issue where garbage collect of a Flat String corrupted the free variable list\n            Fix issue where Array.sort on big array with identical elements failed (#515)\n            Add 'modules' variable, and set 'this' to 'exports' when parsing a module (fix #520)\n            Fix instanceof implementation (and fix mem leak) (fix #523)\n\n     1v76 : Merged in NetworkJS library (for JS networking implementations)\n            Ensure that 'wrapped' libraries are killed before timers/watches\n            Made 'Field or method doesn't exist' report back the field that doesn't exist\n            Added quick and dirty scripts/test262.js runner script\n            Fix propogation of Errors and Exceptions through function calls\n            Allow parsing of integers > base 16\n            Now allow functions with >16 arguments (fix #490)\n            Fix assert fail for syntax error in do or while loop\n            Maths operations now call Object.valueOf if it's needed\n            Fix assert fail when jswrap_object_getOwnPropertyDescriptor called with non-string\n            Fix Array.indexOf when array contains non-basic values\n            valueOf returns a type error when called on undefined\n            Make sure analogRead doesn't overwrite pin state if it was set previously with pinMode\n            Make sure pinMode works with ADC input mode\n            Tweak event handling - events such as `Serial.on('data'` now set `this` to `Serial`\n            Add Function.bind (fix #318)\n            Fix SPI.setup memory leak (fix #496)\n            Fix assert fail on debug builds on Waveform output (fix #511)\n            Added more allowed types of whitespace\n            Added String.prototype.trim() (fix #507)\n            Allow argument lists in Function() (fix #505)\n            Propagate `this` into eval (fix #513)\n\n     1v75 : Fixed issue with Pins/Bools as Array indices\n            Fix crash when out of memory while creating built-in object\n            Fix continue statement in nested loops (fix #501)\n            On Linux, Exit nonzero when an error occurs (fix #499)\n            Ensure that pipes 'complete' if the source closes (was previously only the destination)\n            Make HTTP/Sockets throttle reads so internal buffers don't get full when piping\n            Added http statusCode, statusMessage, and httpVersion\n\n     1v74 : On Espruino Board, allow setTime to use full 64 bits so setTime(Date.parse(\"...\")/1000) works\n            Fixed issues with Waveform after 1v72 update to flat strings\n            Added 'global' built-in value\n            Fix inaccuracy of 'Date.now()' on STM32\n            Improve jsvIteratorGetIntegerValue speed for arrays (fix #493)\n            Change process.env.EXPORTS to something more useful for compiler\n            Fix issue with graphics fill on PCD8544 LCD\n            Add TypedArray.slice (from ES6) to help modules that use I2C\n\n     1v73 : Add Uint8ClampedArray, remove code duplication in ArrayBuffer (fix #486)\n            Fix regression where accessing certain member names of an undefined variable would cause a crash (fix #488)\n            Fix behaviour of char code 16 at beginning of the line (it now doesn't re-add the prompt after processing the line)\n            Added jspGetNamedVariable for use in compiled JS\n            Fix glitchy time values on the Espruino Board (fix #394)\n            Fix getTime()==0 in onInit, which could break timeouts in onInit after a reset (fix #462)\n            Refactor Software SPI code into jsspi.c\n            Allow filesystem to work on user-defined pins (fix #427)\n\n     1v72 : Stop RTC being reset by hard reset (getTime will now be time since power first applied) (fix #412)\n            Allow Function.apply to take typed arrays (fix #442)\n            Allow arrays to be passed to digitalPulse so square waves can be created easily\n            Force inlining of jsvLock/UnLock on most systems - improves performance a lot\n            Fix issues with SPI.write, CS, and out of sync receive bytes\n            Fix do..while without trailing semi-colon\n            Ensure that &,|,^,etc all have different precedences (without extra recursion)\n            Used new semi-recursive parse for expressions\n            Fix filled column when fillpoly is off the end of the screen\n            Fixed reporting of Serial RX pullup in `dump()`\n            Add input thread on Linux, and fix idle and Ctrl+C behaviour (fix #451)\n            Stop huge amounts of input events blocking Espruino's timers (fix #452)\n            Add ability to use serial ports on Linux with Serial1.setup({path:\"/dev/ttyUSB0\"})\n            Started ability to use SPI from Linux\n            Added 'net' library with support for sockets\n            Fix JSON parse of negative numbers (fix #456)\n            Only keep RTC settings if the relevant oscillator is running (fix #444)\n            Finally fixed sporadic compilation problems with '-Os'\n            Fixed issues with intervals in onInit (#462)\n            Remove libraries from root scope (fix #463)\n            Fix pin namings on Nucleo boards\n            Fix addition of stdlib's exit on Nucleo debug\n            Allow setWatch to execute native functions inside the IRQ\n            When dumping typed arrays, use the size if all elements are 0 (fix #448)\n            eval() can now access local variables and function arguments (fix #460)\n            Added 'flat strings' for typed arrays.\n              - these use a continuous chunk of memory so are much faster\n            Ensure that we only create as many Serial/I2C/etc items in Symbol table as we need (fix #453)\n            Allow modules to return whatever was assigned to exports - not just the original object\n            Allowed E.nativeCall (assembler/compiled functions) to execute directly from a flat string\n            Working F401 USB VCP bootloader\n            Make Press-poweron-release-press boot back into Espruino (this may confuse your OS)\n            Assert failures (in non-release builds) now reboot the system on ARM\n            Fix issues with freeing of variables not clearing the lock flags (fix #474)\n            Make Uint32Array actually return uints (even if they're so big they have to be represented as doubles)\n            Allow peek/poke to read and write arrays of values\n            Add Boolean constructor (fix #311)\n            Fix difference between String() and String(undefined) (fix #312)\n            Fix I2C/SPI on F401/F411-based boards (fix #470, fix #473)\n            Improved ArrayBuffer write performance\n            Massively improved ArrayBuffer Graphics fill performance for bpp<8\n            Fix issues with floating point on devices with <1024 vars (using 12 byte JsVar)\n            Add ability to change I2C bit rate from I2C.setup\n            Added VGA TV output\n            Added E.toString (for converting anything into a string)\n            Pulled Typed Array creation into its own function\n            Added E.toString and E.toUint8Array\n            Made I2C.readFrom return a Uint8Array (fix #479)\n            Allow multiple byte OneWire reads and writes\n            Fix setWatch on F3Discovery (fix #183)\n            Ensure that E.getSizeOf() works for ArrayBuffers (fix #484)\n            Don't allocate Flat Strings if we can get away with 2 normal string blocks\n              - it's actually faster to allocate and uses less memory\n\n     1v71 : Allowed WIZnet + CC3000 to be instantiated on any pins\n            Fix break inside loop inside case inside function (fix 428)\n            Added fs.stat and File.seek (fix #429, fix #430)\n            Allow use of DLE (char 16) on an empty line to turn echo off for *just that line*\n            Add XON/XOFF flow control on Serial + USB. This is enabled by default for Serial (fix #20)\n            Fix irregular timing on Espruino boards with clock crystal (inc rev 1v4)\n            Sort out 'Number()' constructor not being picky enough - parseFloat now parses 'Infinity' (Fix #325, mostly fix #322)\n            Stop iterator in FOR loop being called once more after a break\n            Fix bug allObjects found with iterating over undefined\n            Fix ArrayBuffer.sort issue with element size >1\n            Fix network de-initialisation on Linux\n            Fix reference count issue caused by removing a timer that had already been removed\n            Power up SYSCFG on F2/3/4 parts, allowing watch to work on ports other than A\n            Wait after setting the RTC time, to allow registers to update (fix #438, fix #441)\n            Now using gcc-arm-none-eabi-4_8-2014q3 for compilation - CodeSourcery stopped being supported\n\n     1v70 : Make pipe remove its drain/close listeners. Stops out of memory for repeated piping.\n            Fix parseInt for values too large to go in an int (#406)\n            Fix integer maths when result is too large for an integer\n            Fix mod operator with NaN/Infinity (fix #315)\n            Fix signed array values in PACKED_BIT devices\n            Drop JsVar size from 20 bytes to 16, increase Espruino variable count accordingly\n            Fix Array.fill on sparse arrays (fix #410)\n            Allow I2C repeated start (fixes some odd I2C devices, fix #390)\n            Refactoring to use iterators wherever possible\n            Merge fs_kill and file_kill to ensure that files always die before the filesystem\n            Add `E.unmountSD()` to allow SD cards to be removed once they have been used\n            Stop String.split(\"\") adding an empty elementy to the array\n            Tidy up linker script, allow F401 to use 3x16kB pages for storing program data\n            Fix regression in long timeouts (fix #416)\n            Use 'interval' var to specify if we're an interval or not (don't use 'recur' var)\n            Stop while/for/etc resetting exception state (fix #419)\n            Add  E.getSizeOf (fix #421)\n            Fix jsvCountJsVarsUsed for names with values\n            Make hidden names smaller to save a few JsVars\n            If there's only one function scope, don't define an array and save 2 JsVars\n            Fix setInterval on non-F1 boards (fix #415)\n            Fix issue where large doubles (> +/- 2^31) were converted to -1 rather than truncated ints\n            Fix E.getSizeOf (fix #424)\n            Fixed JSON indentation issue\n            Made 'pretty' JSON output look a bit better\n\n     1v69 : Fix 1v67's regression of digitalPulse when doing lots of pulses\n            Add configurable OneWire search command (for finding DS18B20s with alarm set)\n\n     1v68 : Fix memory leak in String.split\n            Fix references to `this` - you can now write `this[\"LED1\"]`\n            Fix memory leak when calling toString on a normal object\n            Fix memory leak in Graphics.createArrayBuffer\n            Fix memory leak when joining arrays containing null\n            Fix memory leak when syntax error while getting function arguments\n            Fix memory leak test when running on Linux\n            Fix memory leak in filesystem file open (when failure)\n            Fix memory leak on Syntax error\n            Stop multiple exceptions from being reported (eg. Syntax Errors)\n            Fix parsing of '!!' when not executing\n            Improve Error.toString, and fix bug when an exception was thrown from a function\n            Improve jsvObjectGetChild when out of memory\n            Switch native function decls from 32 bits to 16\n            Swap HY2.4 board to software LCD driver as well, work out pin mappings from PY file\n            Fix inaccuracy in setInterval, which had started since 32 bit switch in 1v65\n            Store JSWAT_EXECUTE_IMMEDIATELY in a way that will fit in 16 bit function decls\n            Allow bit-packing of refs for low memory boards (fix #145)\n            Now dump 'debounce' for setWatch\n            Make sure that dump() outputs correct JS for undefined variables\n            Allow pin counts per port of >31 on Linux-based systems\n            Fix issue with lost high-speed events when using setWatch with small debounce\n            Fix HTTP client regression\n            Fix Date constructor issue (uninitialised variable) (fix #408)\n            Fix invalid conversion of large ints to floats on ARM\n            Fix reset behaviour for non-standard default Serial ports\n\n     1v67 : Lower size of timer task array of devices with little RAM (fix #401)\n            Move hidden lists out of the root scope (fix #357)\n            Fixed exception catching\n            Fix Serial1 initialisation after 'reset()'\n            Fix parsing of try..catch when a serious error (not an exception) occurred\n            Stop the utility timer queue filling with WAKEUP tasks if Espruino gets woken up early\n            Add ability to specify default Serial TX and RX pins in BOARD.py\n            Reduce how many digits of floating point values are normally displayed\n            Fixed PWM output on B4 + B5\n            Fix regression when using pins as array indices\n            Remove negation for CHxN outputs - it seems they don't negate after all. Fixes PWM polarity on A7,B1,B13,B14,B15\n            Add pullup to USART RX. Reduces wakeups and random characters on Serial1.\n            Add error flags and E.getErrorFlags to report possible issues like buffer overflows and low memory (fix #136)\n            I2C timeouts now throw exceptions (fix #403)\n            Fix String.prototype.split with non-string args\n            Add fake digital pins D0..D7 under linux (helps with testing)\n            Rewrite ff_wtoupper and save 650 bytes \\o/ (fix #368)\n            Update Makefile to make it easier to cross-compile RPi->Espruino board\n            Fix HYSTM32_32 LCD at the expense of a bit of speed (fix #137, fix #327)\n\n     1v66 : Ensure that analogWrite(pin,1) works on negated outputs\n            Allow multiple Waveform playback on one pin (+ wave fixes)\n            Improve dump() for objects and Serial.on('data') (part of #397)\n            Fix Date.getSeconds,Milliseconds, and documentation on getMonth (#399)\n            Fix memory leak on Serial receive\n            Fix all Serial receive characters being 0 if no bytesize is specified\n\n     1v65 : SPI.send/I2C.write/Serial.write can now take variable number of arguments (fix #370)\n            Don't check for token matches where we already know what it should be (fix #280)\n            Improve file read speed for large reads\n            Waveform stability improvements\n            Fix Float32Array.set (and improve speed for non-float arrays)\n            OneWire library now uses hex strings for addresses rather than 64 bit ints\n            Fix issue with uninitialised function arguments (fix #391)\n            Fix parseURL for numeric keys in query string (fix #388)\n            When running JS files under Linux, do two parses to ensure that Functions are 'hoisted'\n            Add Object.create()\n            Add Function constructor\n            Add Object.getOwnPropertyDescriptor (although it won't return spec-compliant values)\n            Add some Stubs for inbuilt Date and Error classes\n            Added throw and try..catch..finally (see #40)\n            Fixed overriding of builtins with other Builtins\n            Added Date.valueOf\n            Stop warning about break at the end of 'default' in switch statement\n            Switch to 32 bit ints (fix #324)\n            Added Array.prototype.reverse, and also for ArrayBuffers (fix #389)\n            Swap JsVar fields around so everything is aligned on the correct boundaries\n            Merge jsvNewWithFlags and jsvNew - making variable allocation a bit faster\n            Fix changeInterval regression after int32 changes\n            Remove JSV_NAME flag - paving the way for more efficient variable storage\n            Store only 32 bit time for events (work out full 64 bits in event loop)\n            Increase event buffer size to 128 (from 64)\n            Enabled Graphics + CC3k support in the F3Discovery\n            Make `Serial.onData` call back with >1 char (#383)\n            Move `Serial.onData(...)` to `Serial.on('data',...)`\n            Add Serial.read/available/pipe (fix #383)\n            Add HTTP client/server read/available/pipe\n            Add documentation for events (and tidy it up for constructors)\n            Stop HTTP server closing before all data has been read\n            Fixed parsing of multiple shifts\n            setWatch now reports the pin back (fix #275)\n            Fixed memory leak in g.getPixel with arraybuffers\n            Fixed memory leak in \"\".indexOf(\".\")\n            Fixed ArrayBuffer Graphics where width*height*bpp&7!=0\n            Converted parse errors to throw exceptions\n            Added Date.parse and Date.toString\n            Fix parsing of integers that are too big to fit in an int32 (they're stored as doubles)\n            Fix Linux Espruino when no tty is present\n            Shave a few bytes off size of jsiDumpState using printf\n            url.parse now unescapes the query string (fix #227)\n\n     1v64 : Fix 'a=[2,3,4];delete a[1];'\n            Make sure parseInt(\"0x01\",16)==1 and parseInt(\"0x01\")==1 but parseInt(\"0b01\",16)==0\n            Fix equality check used in switch, so false !== 0\n            Improve Math.pow accuracy for small integer powers (fix #374)\n            Make Ctrl-C only interrupt code if it has been running for too long (fix Ctrl-C -> CC3000 restart issues)\n            Removed duplication in symbol lookup (fix #372, fix #323, fix #343)\n            Fix JSON.stringify with circular references (fix #378)\n            Fix String.indexOf when search string is bigger than the string being searched (fix #377)\n            Add String.prototype.slice() (fix #376)\n            Changed to more compact binary search symbol table (fix #278)\n            hasOwnProperty now doesn't check prototypes #24\n            Added Object.getOwnPropertyNames (fix #79, fix #158)\n            Move 'constructor' into the correct place, be more aware of builtins in prototypes (helps #380)\n            Handle __proto__ on builtin object types (eg. [].__proto__) (fix #381)\n            Remove indirection of __proto__ (fix #102)\n            Properly fix Object.getOwnPropertyNames (fix #380)\n            Remove jsvFindChild*Ref (fix #375)\n            Added LoopbackA/LoopbackB serial ports (fix #61)\n            Fix slowdown when lexing long strings\n            Remove Lock/UnLock in jslGetNextCh - should speed it up\n            fs.appendFile() now works even if the file doesn't exist (fix #385)\n            Support unicode escape sequence (\\uXXXX) but crop to 8 bits (fix #386)\n            Stop setInterval/etc increasing index numbers (fix #382)\n            Clear existing digitalWrites on reset() (fix #231)\n            Stop setWatch getting invalid data on load/save/reset (fix #254)\n\n     1v63 : Memory leak when defining functions (fix #359)\n            Fix Instance properties overwrite prototype (fix #360)\n            Fix `edit(functionName)` without quotes (fix #356)\n            Fix 'Uint32Array is not unsigned' (fix #330)\n            Ensure Object.keys([9,,undefined,9])==[0,2,3] (partial #349)\n            Store array length in the array root node rather than the last element (fix #351 #361)\n            Object.keys on array now returns strings (fix #348)\n            Remove jsvArrayGetLast (fix #363)\n            Fix issue parsing `function() { return }`\n            Stop jspNewObject creating a new object name if one already exists\n            startup_stm32f10x_hd.s now explicitly sets the stack pointer. Allows Espruino images to use more RAM\n            Add BusFault hander, to allow peek and poke to unmapped addresses without HardFaulting the ARM\n            Fix edit(...) so that functions themselves (not just the variable) are updated (fix #366)\n            Crop lines in errors when > 60 chars (fix #364)\n            Improve when stack traces happen for error reporting\n            Better error messages, and more efficient handler\n            Improving Util Timer rescheduling to try and avoid 64 bit divisions\n            Fix a lot of WIZnet W5500 issues (thanks @mgg1010!)\n            Add E.reverseByte\n            Add HIGH and LOW (fix #371)\n            Improve docs for SPI/I2C/Serial.setup\n            Force reconnect on CC3000 disconnect (fix #373)\n            Added cephdon's streaming file API (fix #12)\n            More WIZnet W5500 stability fixes - try and ensure that HTTP server never goes down\n            Fix HTTP client Host header when accessing ports!=80\n\n     1v62 : Added ArrayBufferView functions as per ES6 spec (fix #310)\n            Added Graphics.setRotation (fix #321)\n            Added Graphics.drawImage (fix #198)\n            Added E.toArrayBuffer for fast string->array conversion\n            Accessing an undefined array/object element now doesn't create it (fix #63)\n            Fix fs.unlink returns true if the file does not exist (fix #331)\n            Try and improve timer overlays by reordering the alternate function list\n            Ensure that PWM output doesn't enable negated/non-negated outputs when it doesn't have to\n            Improve console performance when sending long strings\n            Initialise Graphics flags Graphics.createCallback - could have caused all kinds of issues\n            Now make setInterval > 5s less accurate when setDeepSleep is on (saves ~0.5 sec of non-sleep time)\n            Fixed problem when accessing an array with a string in a variable\n            Fix issues with `\"0\" in {0:1}` (and hasOwnProperty)\n            Improved interpolate function, and moved it out of ArrayBufferView into E\n            Fix Problem with Object.keys on a string (fix #347)\n            Fix assert fail when deleting a property that doesn't exist (fix #344)\n            Ensure that dump remembers function names if they were in the root scope (fix #338)\n            Fix memory leak in fs.readdir\n            Ensure that abbreviations in console's '=...' output appear on newline if needed\n            Add String.replace (fix #334)\n            Make Graphics.drawImage draw bottom line of pixels (fix #329)\n            Add Array.shift/unshift (fix #342)\n            Fix Defining function after return causes error (fix #326)\n            Fix deleting the last element in array (fix #346)\n            More helpful I2C error messages (fix #10)\n            Fix overriding built-in functions (fix #202)\n            Add ES6 Array.prototype.fill (fix #317)\n            Modified jsiQueueObjectCallbacks (and Object.emit) to support >2 args\n            Added support for SPI LSB-first\n            WIZnet improvements (specifically on HTTP server)\n            Added WLAN.setIP for CC3000\n            Fix String.split issue with last element (fix #352)\n            Remove order warning for SPI if no order given (fix #353)\n            process.env will now contain the git commit\n            Move setInterval/Timeout implementations into jswrap_interactive (makes more sense)\n            Add setWatch warning if it's not possible (fix #337)\n\n     1v61 : Fix toString crash for large numbers\n            Support floating-point literals without a leading 0 - eg '.5' (fix #296)\n            Fix array access with booleans (fix #290)\n            Fix \"==\" issues where only one argument is an array (fix #283)\n            Make Array.join ignore null values (fix #289)\n            Callback graphics now works even without a fillRect implementation (fix #295)\n            ArrayBuffer Graphics now supports 2 and 4 bits as well as 1,8,16,24,32 (fix #301)\n            Allowed array.splice to as many arguments as needed\n            Make Array.sort() use string compare by default (fix #291, fix #292)\n            Allow [,] and [1,2,,4] - (fix #287)\n            Stop JSON.stringify using 'undefined' (fix #286)\n            function.call can now have more than 4 arguments\n            Rewrite native function caller (fix #277)\n            Fix conversion of floats to booleans (fix #307)\n            Fix parseInt of NaN/Infinity (fix #309)\n            Add extra escape codes in strings (fix #304)\n            Ensure String.charAt returns empty string for out of range (fix #305)\n            Make REPL faster when receiving large amounts of data (fix #303)\n            Improved jspeFunctionCall speed, added Named functions (fix #77)\n            Allow Array.map.forEach to be applied to Strings and ArrayBuffers (for #310)\n            Tweaks to make more Array functions work on non-arrays\n            Added Array.reduce\n            Allow commas in expressions at end of for loop - `for (;;i++,j++)`\n            Fix SPI send with a single number\n\n     1v60 : Fix unary plug on variable not working (fix #268)\n            Added DNS with eth.setIP() for W5500\n            Fix lock 'leak' when creating Graphics with callbacks\n            Small fixes for trigger/timer\n            Make dump() + console aware of built-in SPI/I2C/etc\n            Add Pin constructor for converting numbers into a pin object\n            Added getPinMode\n            Fixed I2C saving state (fix #270)\n            Add JTAG to ignore list for some boards\n            Fix LCD FSMC formatting and report if LCD is unknown\n            You can now reference built-in functions. eg. [1,2,3].map(Math.sqrt)\n            Add Object.valueOf - help with #187\n            Add Object.hasOwnProperty (although it does have some false positives) - #24\n            Add software SPI - fix #41\n            Fix issue when constructing an ArrayBuffer with a floating point length\n            Fix Math.round regression and add checks to ensure it can't happen again\n            Fix DEVICE_IS_XXX defines (fix SW SPI regression)\n            Fix hardware SPI regression (getting out of sync after ArrayBuffer write)\n            Removed non-standard Integer.valueOf - use \"A\".charCodeAt(0)\n            Fix non-standard ArrayBuffer behaviour when constructing an ArrayBuffer from an ArrayBufferView\n            Fix `1 in [2,3,4]` behaviour - it searches keys, not values\n            Make parseInt(..., >36) return NaN\n            Make Number.toString() use lowercase chars for hex\n            Fix issues with NaN, negative zero, and Math.round\n            Fix equality checks with null\n            Fix comparison of integers with empty string/whitespace+number\n            Added nativeCall, which allows C/Assembler to be called from JavaScript\n            Fix custom font memory leak\n\n     1v59 : (function(){})?1:0 should == 1 (fix #261)\n            Fix Math.pow (Fix #260)\n            Fix String.split() (Fix #259)\n            Added Array.concat (Fix #262)\n            Increase RTC/getTime reliability by ensuring overflow can't happen\n            Added Math.min/max\n            Allow jswrapper to wrap objects with a name >8 characters long (fix #264)\n            dump() now doesn't print 'var X = undefined;' - just 'var X;'\n\n     1v58 : Fix Serial.parity\n            Fix glitches in jshGetSystemTime\n            Added Graphics.setFontCustom for custom fonts\n            Added String.lastIndexOf, and made String.indexOf with fromIndex work\n            Used non-bold vector font, improve alignment, and make curves lower quality\n            I2C can now write any size (as long as it fits on the stack!)\n            Try and enlarge fillRects caused by polygons\n            Fix === issues, fix #257\n            Add Graphics.getColor/getBgColor for Juergen\n            Added E.convolve for doing fast calculations with Waveforms\n            Allow String.fromCharCode with multiple arguments\n            Add builtin_modules to board's JSON\n            Added E.FFT for Fast Fourier Transforms\n            Added 16 bit read/write to Waveform (and speed up utility timer)\n            Fix utility timer - now interrupts just in time\n\n     1v57 : Tweak IRQ priorities to try and make SPI RX more reliable\n            Make http default to port 80 if no port is specified in options\n            Try and stop issue with System Time suddenly jumping forwards\n            Fix assert fail when clearing and adding timeouts from within a timeout\n            Fix modulo (actually remainder) operator for floating point values :/\n\n     1v56 : Added atob and btoa (for base64 encode/decode) - fix #244\n            Added Array.sort() - fix #220\n            fs.writeFile/appendFile now return false if they fail for some reason\n            Move Graphics init and idle functions out of jsinterface.c\n            Add HttpServer.close\n            Ensure that Linux command-line tests keep running if there's something to do\n            Epic networking refactor - it should now be possible to support multiple network devices in a single binary\n            Now only remove the interval/timeout/watch that's causing the error - not every one\n            Change names of functions in callback-based Graphics so they don't conflict with the real ones\n            More CC300 reliability - now range check the return value from send+recv, because if there's a timeout it can be wrong\n            Fix memory leak in setWatch with debounce\n            Fix 'repeat:false' in debounced setWatch\n            Make sure 'repeat:false' disables the hardware watch\n            Initialise RTC roughly 1 sec after reset, and use external 32kHz oscillator if it exists\n            Added E.enableWatchdog (fix #252)\n            Fix negative start value for String.substr()\n            Fix problem where the RTC's full 32 bits weren't combined properly\n\n     1v55 : Add String.toUpperCase/LowerCase\n            Fix E.getAnalogVRef() regression\n            Add Math.tan()\n            Ensure Double/Integer have Number as a prototype (fixes: Number.prototype.n=function();(5.0).n() )\n            ||/&& now doesn't use booleans (fix #251)\n            More resilient parseInt behaviour\n            Allow data listener for HTTP POST (fix #226)\n            Stop JSON.parse using eval (fix #249, fix #208)\n            `.toString` is now called when a String is needed from an Object (fix #57)\n            Fixed reference count error when looking for functions in an Object's prototype\n            Fix issues with Numbers as Strings in maths (eg. '-5'|0)\n            Make sure NaN|0 == 0 (and not some huge number)\n            Ensure that [1.23]*1.0 == 1.23 (fix #91)\n            Don't pull in cos (use sin(x+PI/2))\n            Try and save flash memory on Olimexino board\n\n     1v54 : Add 4x6 font (instead of 8x8)\n            Fix occasional instability with Waveform read/write\n            Refactor JSON to improve speed and code size (using cbprintf)\n            Now print special 'short' JSON for console.log (and the REPL) (fix #47)\n            JSON.stringify now doesn't print functions (fix #207)\n            Refectoring jsparse.c to name functions after their JS Grammar names\n            IF statement now accepts commas\n            Ensure that undefined+0 == NaN (only worked for floats previously)\n            Fix assert fail (issue unlocking when executing built-in functions)\n            Fix setInterval regression in dump (and tidy up code)\n            FS lib now resets when issuing the reset() command (fix #200)\n\n     1v53 : Attempt to deal with the case where CC3000 crashes on initialization\n            Fix regression with setInterval/timeout and saving\n            Fix issue with saving Serial baud rates\n            Added ArrayBuffer.set\n            Use jswrapper.c for executing idle/init/kill events for libraries (cleans up jsinteractive.c)\n            Added beta 'Waveform' API to allow simple audio output\n            Improved non-deep-sleep power draw by allowing Espruino to wake itself on the Utility timer (rather than SysTick)\n            Allowed Waveform API to output on both DAC and PWM\n            Improve auto-generated documentation\n            Speed up ArrayBuffer.set and allow Strings to be used properly\n            Fix jsvArrayJoin if memory runs out\n            Added E.sum and E.variance array operations\n            Added Waveform Analog Input\n\n     1v52 : Fix memory leak in Array.slice\n            Fix broken Serial initialisation (partial fix for #241)\n            Add fs.unlink (for deleting files)\n            Fix url parsing when there are two slashes\n            Fix recent changeInterval regression\n            Making CC3000 recover properly in the case of repeated HTTP GET\n            Add alternate function remapping for Serial and improve Serial.setup error reporting, fix #241\n            Added preliminary WIZnet W5500 support (see http://www.espruino.com/WIZnet)\n            Alt Enter (27 + 10) now always inserts a newline: (eg. for `if (X) \\n Y`)\n            Fix digitalPulse with not a number\n            Make digitalPulse(... 0) wait until the last pulse is complete\n            Stop Espruino sending out so many carriage return characters (fix #243)\n            Added 'delete' keyword (fix #39)\n\n     1v51 : Added debounce to setWatch (fix #14)\n            Tidy up timeout/watch code and now store an integer for interval\n            Fix crash in url.parse (string free)\n            Fix Modules.addCached bug which means that Modules.removeAllModules created a memory leak\n            Fix regression introducted by fix for #199\n            Added 'Esc,[,2,K' escape sequence for clearing lines. Much safer than Ctrl+C which tends to break out of execution.\n            Fix bootloader (broken by LTO in 1v49)\n            Added Number.toFixed\n            Make number.toString(base) work for floating point (fix #232)\n            Fix Linux jshSleep so that timeouts are handled at <10ms if required (fixes test056)\n            Now use jshardware's SPI for SD filesystems - more multiplatform\n            Now ref thisVar, which stops it being repurposed into a Name for array accesses (fix #233)\n            Fix Linux halting when there is one long timeout but no other activity\n            fs.readFile returns 'undefined' if file is not found. Also make readdir return undefined on failure (fix #229)\n            Remove disk_timerproc in SD card implementation\n            Upgrade fatfs to R0.10a\n            Tweak jsinteractive.c to help reduce code size\n            Finally added Long filename support for FatFS (fix #78)\n            Epic refactor to remove JsParse (fix #17)\n            Implement faster Graphics ArrayBuffer fill (affects vector fonts + clear)\n            Stop repeated analogWrite with messing up PWM waveform (fix #56)\n            Swap open and close brackets in bitmap font (fix #191)\n            Graphics arraybuffer/callback now accepts 16bpp\n            Added ability to specify a JS function for Graphics fillRect\n            Graphics setPixel(x,y,undefined) to use foreground colour (fix #215)\n            Make sure that interruptions are handled better while drawing to graphics\n            Make sure that stack overflow errors are handled more tidily (and increase limit for warning)\n            Increase available stack on Espruino Board\n            Stop FatFS using insane amounts of RAM\n            High res timer (now to 1/2^23) using SysTick with RTC as a base (fix #168)\n            Added 'Infinity' constant\n            Fixed type equality check between int and float (should treat them as the same)\n            Fix parsing of '018' - it's not Octal after all (but 017 is)\n            More accurate values for PI and E\n            Fix charCodeAt being signed (should be unsigned)\n            When casting Strings to booleans, so s.length!=0\n            Guess initial values for average SysTick time - means that getTime is more accurate for the first 1-2 seconds after startup\n            setWatch now reports lastTime - time of last state change #238\n            analogWrite now respects pinMode (fix #234)\n            Add Open Drain support to pinMode (fix #225)\n            Fix calling Number([value]) always returns undefined (fix #186)\n            When disconnected from the net, make sure we free all HTTP clients/servers\n            Completely remove IRQs from CC3k code\n            Speed up CC3k code, try and make it automatically power cycle it on timeouts\n            Fix SPI MISO on F4 board\n            Move CC3000 to SPI3 (same pins) so SPI1 can be used for other things\n            Compile CC3000 support in for the F4 (untested)\n            Process.env now reports board serial # and current console device (se we can throttle for Bluetooth) (fix #219)\n            General bugfixing for low memory situations\n            Make string free non-recursive\n            Fix issue where fs.readFile of a big file would cause Espruino to crash\n            Fix memory test harness\n\n     1v50 : Fix broken Web IDE caused by change to printing JSON for console.log (part of #206)\n            Fix bug when trying to stringify {5:5}\n            Allow {1:2} to be parsed (fix #199)\n            Added SPI RX IRQ. Caved in and used a few bytes for buffers, made SPI significantly more reliable\n\n     1v49 : Change compiler flags to allow link-time optimisation\n            Increase buffer sizes on Linux\n            Increase buffer sizes on boards with >= 20kB RAM\n            Made Startup banner smaller\n            Less printing when loading from flash\n            Don't display startup banner if loading from flash (an easy way to fix #213)\n            Fix HTTP response code of 0 (fix #212)\n            Add timeouts to TI's CC3000 driver\n            Add timeouts for SPI, and other timeouts now interrupt execution\n            Lower USB interrupt priority, remove pesky PriorityGroupConfig that was breaking other IRQ priorities\n            Until we sort out SPI RX and IRQs, lower default SPI baud rate to stop timeouts\n            console.log and print output JSON now (part of #206)\n            Added handling of query in url.parse - still not fully compatible though (fix #205)\n\n     1v48 : Fix issue where the size of command history is being reported wrong and so process.memory().free is reported wrong too\n            We now loop without a seek to position inside the string (much faster if loop is not near the start of a fn) (fix #53)\n            Faster string iteration which doesn't involve incrementing it->index\n            Swapped to jumptable to lexer (should be a bit faster)\n            Added the 'E' class, with getAnalogVRef and getTemperature (fix #60)\n            Deprecated Math.clip (not in spec) and introduced E.clip\n            Fixed bug in common.py that meant that ifndefs in JSON were sometimes not obeyed (better mem usage on small chips)\n            Fix deep sleep breaking ADCs\n\n     1v47 : Fix issue with dump() and input_pullup not being quoted\n            Fix regression that broke OneWire in Espruino Board (#197)\n            Fix clock speed issue on SPI1 (https://github.com/espruino/EspruinoDocs/issues/18)\n            Don't interrupt on USB ESOF or ERR  - allows 'normal' sleep without interrupting every 1ms (fix #195)\n            Remove pointless KickStarter line printed on startup\n            Added bootloader hack to Python bootloader\n\n     1v46 : Fix parseFloat(\"\") not returning NaN, and parseFloat(\" \\t 5 Â£$%^&(*$\") returning NaN\n            Added isNaN() function (fix #184)\n            Fix parse order for 'typeof' (fix #172)\n            Added Number object (fix #165)\n            Bounded ftoa (stops crash when printing Number.MAX_VALUE) - helps with #185\n            Added Array.isArray() (fix #160)\n            Add do...while (fix #151)\n            Stop Espruino board from crashing if you try to create a web server without a connected CC3k (fix #182)\n            Remove Array.contains as it's not in the spec (use indexOf instead if you need it) (fix #161)\n            Fix nasty bug where adding/removing intervals/timeouts while in one could cause issues\n            Fix bug when printing 1.999999999 and similar (fix #190)\n            Remove need for pow for exponentiation. Not great but it fixes some tests that failed on FP inaccuracies\n            Change polarity of setSleepIndicator (fix #194)\n            Allow array.push with multiple arguments (fix #189)\n            Speed up array access by searching from the end backwards if we think the number is in the last half (fix #46)\n\n     1v45 : Fix parseFloat(\"foo\") not returning NaN (and assert) - fix #149\n            Remove Integer.parseInt\n            Fix parseInt(\"bar\") - fix #150\n            Ensure that maths ops with null do treat it as 0 rather than a string - fix #156\n            Fix digitalPulse length (properly!) - fix #154\n            Making sure that undefined gets cast to NaN\n            Fix Array.indexOf() returns undefined instead of -1 - fix #155\n            Moved memory() to process.memory() - added more info too\n            Try and improve handling of PWM timer speeds\n            Fixed varying SPI baud rates depending on device\n            Makefile changes for OSX compile\n\n     1v44 : Modified build system to store binary names in the python definition\n            Fix nasty regression involving losing code at the end of Strings\n            Fix segfault when pinMode is called on an invalid pin\n            Now disable interrupts during 4 bit SPI send - it's just too much otherwise\n            Detect unfinished block comments in console (fix #138)\n            Fix flash write on most 10XxB boards\n            Fix PWM output on all STM32 boards\n            General hardware tidy in prep for more intelligent device management\n            Run initialisation code before setWatch, to make sure pullup/down is set beforehand\n            Change 'Pin' datatype to be an unsigned char - makes tests easier\n            Now use the hardware RTC for keeping system time. Allows proper deep sleep on Espruino board\n            FINALLY - fix the USB VCP lost characters issue (#94)\n\n     1v43 : Added 'Modules' object with support for adding/removing cached modules\n            Allow product ID to be changed via Makefile\n            Fix documentation (and old-fashined Parsing style) for JSON\n            build_jswrapper now outputs errors to stderr (more compatible with default (silent) build process)\n            Fix issue when parsing quotes in strings\n            Added void operator for closure minification compatibility\n            Ensure that return takes the comma operator\n            Fix issue where printing Infinity would crash Espruino (fix #129)\n            Finally some working (extremely beta) cc3000 code\n            Added jsvObjectGet/SetChild to simplify some wrappers\n            'http' now uses JsVars for storage (so is suitable for non-linux devices)\n            Turned 'http' into a library\n            Added process.version and process.env (fix #131)\n            Changed handling of 2nd arg of << so that precedence is correct\n            Fixed handling of 'for (;;)'\n            Fix lock leak in Module handling\n            Update ST's library for the STM32F1\n            Update ST's VCP implementation\n            Added prefix operator (fix #130)\n            Allow espruino for linux to be run with '#!' in scripts\n            Fix indexOf on final element of strings (fix #133)\n            Remove JSV_PARENTINFO, as it turns out JS doesn't keep track of function scopes anyway (fix #109)\n            Make 'this' a keyword (now faster, more memory efficient)\n            Make 'Hardware' (root) the default value of 'this'\n            Add jsvArrayPushAndUnLock and modified code to use it (fix #135)\n            Now remember I2C state (partial fix for #13)\n            Replace 'pow' function with a smaller version - save ~2kb\n            Shaved another 1200 bytes off jslTokenAsString\n            Now store Pin state (fix for #13 on F1 parts, F4 still looks broken)\n            Added Graphics.stringWidth\n            Added internal Printf function\n\t           Misc speed and code size improvements\n            This version has gone to Seeed for use on the KickStarter boards\n\n     1v42 : [ebirger] allowing 'new' with no brackets\n            Allow built-in functions with variable numbers of arguments (fix #83)\n            Implement 'String' constructor in the normal way (fix #110)\n            Fix regression with parsing constructors while not executing\n            Allow multiple arguments to print and console.log (fix #92)\n            Make 'arguments' array available in functions (fix #100)\n            Fix an assert fail, and handle some potential memory leaks\n            Don't show __proto__ and constructor with for..in, keys(), or JSON.stringify\n            Make 'trace()' output more readable debug data for complex structures\n            Fix memory leak whe parsing functions iwht variable numbers of arguments - fix #115\n            Defined NaN\n            Stop 'new undefined()' crashing Espruino - fix #120\n            Get A13/A14 working on Espruino board (these were JTAG)\n            Get bootloader size direct from Python (remove hard-coding)\n\t           Fix '~' operator when acting on variables\n            Made bootloader a bit more error tolerate (CRC on write)\n            Added %=, /=, and *= operators (fix #121)\n            Allowed Object.toString() to take a radix argument for integers (fix #125)\n            Fix error message issue - broken strncat (fix #124)\n            Add comma operator (fix #122)\n            Added some basic code for STM32F429IDISCOVERY - not currently working though\n            This version is the one sent off on the Test Harness (so will probably appear on boards)\n\n     1v41 : Fix Olimexino compile (https://github.com/espruino/Espruino/issues/6)\n            [ebirger] Member constructors (eg. new a.b() )\n            [ebirger] Ensuring integers with radix specifiers can still be parsed if a radix is specified\n            Fix for tests/test_json_arraybuffer_001.js - iteration of arraybuffers of length==1\n            Add Object.keys(...)\n            More arraybuffer iteration fixes\n            On linux, use built-in stringToFloat to aid debugging. Handle exponentials, fix #31\n            'make serialflash' is now works correctly for Espruino Boards with bootloader\n            setWatch(..A0);setWatch(..A0);clearWatch(1) does not now kill the other watch, fix #25\n            One-based setTimeout/setWatch, fix #3\n            Added Function.call and Function.apply, fix #54\n            'http' and 'fs' are now libraries that need to be 'require'd, fix #8\n            Updated pin info for STM32F103xC/D/E chips, fix #84\n            Fixed linker script for STM32F4 (discovery board now works)\n            Object prototypes are now Objects, fix #101\n            Board docs now specify '3.3v' only pins fix #104\n            Add Array.forEach\n            Fix searching down >1 prototype to find functions (one more issue posted in #99)\n            Fix \"12345\"/5 type issues (fix #90)\n            'Consting' some string functions\n            Fixing arrays with string indices that are actually numbers \\o/ (fix #19)\n            Released onto website\n\n     1v40 : Ensure that LCD.prototype.setPixel = function actually works\n            Refactor LCD driver code to allow lcdInit (and start of making it non-platform-specific)\n            Built 'LCD' support into linux/raspi/carambola\n            Add initial SPI.send(ArrayBuffer) support - even if NO VALUES RETURNED\n            Start of built-in Nokia 5110 LCD support\n            Remove GPIO clock removal on sleep for now (it kills setWatch)\n            Fix (sub)ArrayBuffer problems (test100.js)\n            Added setDeepSleep - still beta put power consumption drops to 1mA\n            Fix broken name for httpCRq.write\n            Changed LCD to Graphics - added ability to render to ArrayBuffer\n            Fix 8 char built-in class names\n            Adding preliminary Sony SmartWatch support\n            Adding preliminary support for completely bare 36 pin chip\n            Fixing pin defs for Espruino board rev 1v1\n            Added proper SDL/ArrayBuffer and JS Callback graphics support\n            Added \"ifdef\" ability in build_jswrapper\n            Take JSVAR_CACHE_SIZE out of jsutils and put it in the board config file\n            Added JSV_PARENTINFO which will allow us to do things like setTimeout(foo.bar,10)\n            Fixed arrays in non-executes streams - 'if (0) print([1,2,3]);'\n            Added 'require' function loading modules from node_modules on SD card\n            Added module cache to stop modules being re-loaded\n            Renamed internal vars to start with '>' - much easier to distinguish for 'dump'/etc\n            Only use parentInfo on functions\n            Load all tests in test dir - don't do them by number\n            Added 'zigzag' ordering for ArrayBuffer Graphics\n            Added 'vertical_byte' ordering for ArrayBuffer Graphics\n            toJSON now ignores 'hidden' object elements\n            Special-case jsvArrayBufferIteratorSetIntegerValue\n            Make SPI output an ArrayBuffer\n            Use best out of 3 for DelayMicroseconds calibration - something seems flaky right after bootup\n\t           Lines now drawn from p1 to p2 inclusive\n\t           Events now use jshPushIOWatchEvent (should cut down on code) also fixed bug with watching pin #11\n\t           Now remember if pinMode was set or not\n       \t    Transform ```code``` in JSON into a code tag in the documentation\n            Graphics now supports FSMC for HY boards again\n            Drawing vector fonts is now roughly the right size and position (still not 100%)\n            Remove registration code\n            Adding MPL licence\n            Remove Arduino bit manipulation functions - nobody seems to use them anyway\n            # of flash pages/etc now comes from board info\n            [ebirger] Supply the correct arguments to Array.map\n            [ebirger] Method calls and membership evaluation should be done on all factors (ee. [1,2,3].foo())\n            [ebirger] When running multiple tests, only set up terminal once or it breaks the terminal window on exit\n            Added STM32-style USB CDC bootloader for Espruino Boards\n            Added scripts/create_espruino_image.sh to package up bootloader and espruino into one binary\n            SHIPPED on Impatient developer boards\n\n     1v39 : Added Bitwise NOT operator\n            Added Raspberry Pi version to ZIP (with HTTP support)\n            Fixed load/save on Linux Devices\n            Added pinMode function (to allow pull-ups/pull-downs to be turned on)\n            SPI.send4bit/send8bit will now not mess up the final element\n            changeInterval now clears up stored up callbacks (eg, setInterval(.., 0.01)...wait...changeInterval(...,20)\n            Ctrl-C no longer prints anything, which avoids lockups\n            No longer print \"Execution Interrupted\" if nothing was interrupted!\n            Added >>>= >>= and <<=\n            When entering text interactively, ensure that there are no trailing spaces\n\n     1v38 : Tweaks for Arduino IDE compile\n            Removed '(char #)' from stack trace, as a bit pointless now\n            Added better reporting of execution location when Ctrl-C pressed\n            Urgent fix for non-working Olimexino since 1v33\n            Fix string comparison when strings contain \"\\0\"\n            Added LED1/2/OSC/SD/etc to Olimexino Board docs\n\n     1v37 : Urgent fix - power saving code made it difficult to re-flash Espruino (now only apply this to Espruino Board)\n\n     1v36 : Fix documentation for Array.pop()\n            Added some much better board documentation\n            Fixed DAC output on F3\n            Fixed DAC output on devices where PWM is also available and the alternate function is less than the DAC's\n\n     1v35 : Attempt to reduce power consumption when sleeping by turning off GPIO, and setting GPIOs to AIN on reset\n            Fix F3 issue where ADC/DAC weren't picked up properly\n            Tidy up register text and add KickStarter mention\n            var a = {}; a[LED1]=0; - not converted to String\n            JSON (and hence dump()) now dumps ArrayBuffer correctly\n\n     1v34 : Faster jshFromDeviceString\n            Preliminary support for flow control on Serial receive\n            Speed improvements by removing jsvGetRef from jsvUnLock\n            fast 4 byte pre-check in jsvFindChildFromString\n            Skip lock/unlock in FindChildFromString to help increase speed\n            When we unplug USB, only go to the default console device IF that is the device we're currently on\n            Support for custom Espruino board\n            Added ArrayBufferView.interpolate\n            16 bit SPI send for send4bit/sevrnd8bit (better reliability on low-end chips)\n            Fix JSON dump of typed array\n            Added Math.clip(x, min, max)\n            When saving on flash, don't do jslTokenAsString properly\n            B3/B4 move from alternate fn\n            Fix incorrect reporting of analog pins\n            Fix I2C.readFrom on STM32F1/4\n            Make 1/2 == 0.5 (was being sensible before, but now follow JS spec)\n            Ctrl-C while in timer fn clears timers (but not outside it)\n            Fixed broken clearInterval from within setInterval\n            Hopefully fixed issue on SSD1289 LCD controller\n            Trigger wheel handler to use interrupts\n            2D arraybuffer interpolation\n            Added Math.wrap, fixed a lot of trigger issues\n            Fixed SysTick priority/preempt problems\n            Slowed the SysTick timer back down for everything\n            Fix Int8Array signedness on F4 boards\n            Refactored source code tree\n\n     1v33 : fix character encoding issue of \"\\16\"+\"1\" != \"\\161\"\n            Refactoring of ArrayBuffer into iterator, and addition of a general purpose iterator\n            Fancier assert for debugging\n            jsvArrayJoin to use new iterator\n            for (i in ...) to use new iterator\n            I2C and SPI use new iterator\n            Serial.write() - to allow single ints to easily be written\n            changeInterval assert fail when given a function by accident\n            added peek8/poke8/peek16/poke16\n            memory() now takes account of command history size\n            memory() on ARM reports the end address of the stack - so it can be used as a scratchpad with peek and poke\n            Try and reduce code size by not inlining several functions\n            No refs for StringExts - so we get one more byte per JsVar (~5%) more storage efficiency\n            Move from jsvIsBuiltInFunction to computer-generated jswIsBuiltInFunction\n            When creating Objects, check for built-in function BEFORE creating an Object class for it\n            Built process now checks that flash usage is under the allowed value\n            Added short compare to jswHandleFunctionCall to reduce code size\n            Added 3 byte compare (4 byte read and AND off top byte) - faster, less code\n            Auto-generate jsvGetBasicObjectName from docs\n            No longer using refs for storing whether free or not - use flags with JSV_UNUSED and get one extra var with 8 bit refs\n            Switch to using STRING_0...STRING_MAX in flags, rather than specific bits in JsVarFlags - allows more that 15 chars to be used per JsVar\n            Make ArrayBuffers actually be ArrayBufferViews - saves on extra string-handling code at expense of one var\n            Make sure Uint8Array,etc inherits from ArrayBufferView\n            Fix issue where a '\\0' coming in from serial was not put in e.data properly\n            Don't inline some functions when we're trying to save on flash\n            Re-use sin for cos, pow for sqrt to reduce code size\n\n     1v32 : Fixed embarassing issue with 0.999==\"0.A\"\n            Added and checked Pin.writeAtTime on STM32\n            Now don't allocate events array - just allocate directly, which saves memory and is faster (although slighty out of order)\n            Docs: now Alphabetically sorted, and class instances not listed by accident\n            Fix issue where Ctrl-C on ANY Serial port caused execution to be interrupted\n            Updated busy indicator to cope with recent change to not allocate events in an array\n            Fixed I2C on HY 2.4 board - I2C needed hard reset\n            Added basic ArrayBuffers/TypedArray support\n            Fix memory leak when error created with [] on a non-array/object\n            Improved hyperlinking in documentation\n            Fix I2C receive bug on F4\n            Increased VL board's input buffer size\n\n     1v31 : Fix PWM output on TIMER1/8 pins of the STM32F4\n            Fix PWM output for negated timers\n            memory() now runs a GC pass\n            Fixed multiple occurrence of functions in reference\n\n     1v30 : STM32F1: fixed AF issue meant peripherals would never return from AF mode\n            STM32F1: When given an invalid pin, now reports if pins are 'af' or not\n            Updated SPI.setup docs to mention that you can't mix AF and non-AF\n            If one SPI pin is specified but others aren't, only that pin will be set up\n            Added Olimexino hack so SPI1.setup works as expected\n            Allow using [] on a function\n            Fix precedence issue, so var a = function() { return 1; }(); works\n            Update SPI documentation\n            for (i in f) can now iterate over functions\n            Optional argument to trace() for object to start tracing from\n            Small steps towards ArrayBuffers\n            Added smart edit that checks for internal functions, and uses Function.replaceWith\n            Added Function.replaceWith to replace the internals of a function while keeping the scope\n\n     1v29 : Some hacky sysfs-based IO for running on Linux\n            HTTP Callbacks are now stored as names so they can be changed on the fly (Linux only)\n            Successful compile for Carambola\n            Filesystem support on Linux\n            Switch to variable size ref counter (marginally more efficient on very small devices, safe on Linux)\n            Linux now has unlimited memory available\n            Added linux/sysfs 'setWatch' (non-irq driven, so very noddy)\n            Checked jswrapper check from using multi-char constants to a #define\n            Improve pin suggestions for SPI/I2C/USART\n            Auto-initialise USART with default values when setConsole is used\n            Support for new Graphics LCD types\n            3.2\" VCT6 board support\n\n     1v28 : Faster LCD fillrect for HY 2.8\n            Fix for multi-byte SPI writes on HY board at 1Mhz (touchscreen control bug)\n            Fix issue with delayMicrosecond calibration on HY (and hence OneWire)\n            Fixed digitalPulse on STM32VLDISCOVERY\n\n     1v27 : Fixed problem with OneWire constructor execution\n            Added |=, &= and ^=\n            Added Array.splice()\n            Faster, more ROM-efficient built-in symbol table\n            Fix for potential issue when using field accessor on an undefined var\n\n     1v26 : I2C Support on STM32F1 and STM32F4 boards too\n            Emergency cut in variables for Olimexino with bootloader (as flash usage has got too high for save to flash!)\n\n     1v25 : http.writeHead to accept an empty header\n            Fixed issue finding methods on built in classes (0 termination)\n            make sure http server with no data still sends headers...\n            Start of MINI-HY-2.8\" support (all ok, but no SD card yet)\n            Reduce RAM usage by consting some arrays that are not modified\n            Vector fonts now use polys - 8kb less ROM, and faster rendering\n            Start of LCD 'driver' code\n            Standard way of handling events, Object.on/emit/removeAllListeners - like Node.js's EventEmitter\n            Self-calibrating Microsecond delay (for intermal OneWire/etc)\n            OneWire class\n            Correct handling of built-in class constructors\n            Fix error when parsing a zero-argument function that has been given arguments\n            I2C support - currently ONLY tested on STM32F3 board\n\n     1v24 : SDIO-based fat driver on the HY STM32 board\n            Added DAC to the HY boards (103xE-based)\n            Re-named the fileSystem functions to make them more compatible with node.js (readFile/writeFile/etc)\n            Added fs.appendFile\n            Removed HTTP from the reference until it is included in some boards\n\n     1v23 : Fix 'ERROR: INTERNAL: stmADCChannel' on STM32VLDISCOVERY/F1 boards when accessing PA0\n            Reference now mentions which Espruino version it is for\n\n     1v22 : Important fix - Events got executed in the wrong order if they got queued up\n\n     1v21 : Ensure SPI clock does not stop between bytes\n            Added SPI.send4bit and SPI.send8bit\n            Made sure the VL board's code fits into available flash\n            Smart += that can append to a string rather than cloning it\n            dump() prints functions properly, rather than 'var f = function() {}'\n            Pageup/down move the cursor to the beginning/end of input\n            LCD draw/fill with negative x and y\n\n     1v20 : Add console.log\n            Fix automatic usleep for Linux\n            Added node.js-style HTTP server for Linux version\n            Fixed null-pointer issue when accessing something that doesn't exist on an object\n            Added node.js-style HTTP client for Linux version\n            Start of bit bashing functionality\n            for (i in \"ABCD\") console.log(i) -> 0,1,2,3\n            String array access (but not for writing - doesn't work in JS anyway)\n            String String.fromCharCode / charCodeAt\n            Added SPI baud rate setting\n            Vector font chars 'a' and '4' now work ok\n            Fix numeric exception when rendering a poly that has some identical points\n            Better digitalPulse (uses timer + interrupts)\n            analogWrite can now take an object with a 'frequency' argument for PWM\n\n     1v19 : Fixed issue where var M=Math;M.random() failed\n            Fixed issue with var U=USB;U.print(\"Hello\");\n            Remove loop iteration limit\n            Fix memory leak when a syntax error is in for '(i in arr)'\n            Save state of pin on setWatch interrupt (e.state)\n            Change setWatch to allow only on rise or fall as an option\n            clearWatch() clears all watches\n\n     1v18 : DAC support on F3/F4\n            Serial.setup() can also take a second parameter of an object {tx,rx}\n            Better support for dump() with echo/setBusyIndicator/etc\n            Better dumping of prototypes on built-in vars\n            Don't add chars<32 (Except tab) to the input line\n            SPI1/2/3/4.setup() to take an object {baud,sck,miso,mosi}\n            Better hardware initialisation code (not UARTS auto-init if they are used)\n            Fix issues with prototypes\n            Peek/poke instructions\n            Start of I2C support (not usable yet)\n            Added Math. ceil/floor/exp/log\n\n     1v17 : Support for running alongside the Maple bootloader\n            Fix parsing of numbers beginning with 0 when forceRadix!=8\n            Fixed USART1 on Maple/Olimexino devices\n\n     1v16 : Inlining of jsvLock/UnLock in jsvar.h to improve speed\n            Move non-hardware-dependent stuff into jsdevices\n            Move jshardware.c into targets/stm32/jshardware.c, create 'targets/linux' and use a single makefile\n            For + While loops work without reallocating lex\n            Fix AddNativeFunction when function already exists (and tests + saved state)\n            Change jsvFindChildFromX to use JsVar* from JsVarRef - saves a lot of lock/unlock\n            Handle new Foo() as per spec (return value + init of this+prototype) - still does not cope with non-object prototype\n            Beginning of SD card support (works on Olimexino, but not very flexible)\n            Fix for parse/eval when given non-strings\n            Strings can now contain '\\0'\n            Jumptable-friendly reserved word check\n            Jumptable-friendly builtin functions (massive refactor)\n            SPI support\n            HY board support, and graphics LCD\n            Added fillPoly, and Vector fonts\n            Added Registration code\n            Fixed some undefined function/array warnings\n            Much better HTML function documentation\n            Fixed edit() function\n            STM32F3 support, and now peripheral stuff is done with a script\n            explain what pins are available if a pin is not capable of requested fn\n            power on ADCs only when needed\n            LCD fillPoly speed improvements, + drawLine\n            Add datatype for Pin, so pins written to console by pin name rather than integer value.\n            Added Pin.set/Pin.reset\n            Change warning about 'undefined.' into an error (foo.reset() had unexpected consequences!)\n            Fix parsing of '1.0/-3'!\n            Add typeof and instanceof operators\n            Ensure that Serial1/SPI1/etc are objects of type 'Serial'/'SPI' - so prototypes can be added\n\n     1v15 : Escaping JSON strings\n            Fix parsing of octal numbers in strings (so don't have to be 3 chars long)\n            Drastically improved stack usage using small stub functions (at expense of a bit of speed)\n            dump() also dumps out prototypes for functions\n\n     1v14 : Fix complaint about pins during setBusyIndicator()\n            Increase available memory on OLIMEXINO\n            Added function memory() to return memory usage\n            setWatch now links to function names (rather than just functions)\n            dump() also handles Serial.onData(...)\n            Fix issue with JSON printing functions with arguments to console\n            prefix builtin variables with '_'\n            fix ArrayIndexOf when array contains undefineds\n            move all devices into one git repository\n            USB on F4\n            call onInit function/string if it exists when Espruino powers on\n            Compile F4 with -O2 - as we have the program memory for it\n            Serial3/4/5/6 on F4\n            Serial3 on Olimexino\n            Make Serial.onData() clear onData handler\n\n     1v13 : Operations like + on Object/Array convert them to strings rather than error\n            var now doesn't error if there is no semi-colon\n            Allow new line or line delete in multi-line editing\n            add edit(functionName) - which copies function definition into inputline so it can be updated\n            When printing lines, delete current inputline and then put it back in idle loop (only if echo=1)\n            Support *,/ etc on numpad\n\n     1v12 : Issue when printing lots of data and then disconnect USB\n            Hide USB/Serial in Dump()\n            add Array.map(fn(x), thisArg)\n            For newline, count [] and () (as well as {}) - also knows about comments/strings/etc\n            Fix assert fail is setTimeout with non-function\n            If space at end of input line, enter still executes\n            Removed some hard-coded arrays in favour of JsVar strings\n            Fix confusion with jsvIsName/jsvIsString\n            Handle numpad end key\n            Add code to check stack and stop stack overflow if too much recursion\n            Ensure that setTimeout/setWatch store the link to a function, not the function\n            Fix nasty ref loop in ref loop GC issue\n            Add dotty output\n            Fix memory leak when error in jspParseSingleFunction\n            Now run Garbage collection if we're idle, and we know we have a few ms spare\n            Added setSleepIndicator\n            Fix line/col indicator in errors/warnings\n            Fix JSON parsing and printing when 'undefined' encountered\n            Rewritten object handling code to be way more standard JavaScript compliant\n            Array initialisation with 'new Array()', also for Strings\n            Added a few more built in functions\n            Nice error reporting with line + pointer\n            fixed Math.random\n            Binary style ops on doubles now work - they are just converted to ints\n            Added boolean datatype\n\n     1v11 : Add Math functions\n            Add command history (and dynamic history free if low memory)\n            Fix broken jsvArrayPop\n            Add tests for and fix Array.indexOf\n            In-line editing for commands\n            Fix bug in basicVarEquals for big strings\n            More fixes for low memory conditions\n            Multi-line edit for commands (but no newline or line delete yet)\n            Handle Home, End + reverse delete keys\n            Fix nested for loops not handling interrupts correctly\n            Fix AppendString issue when given start value greater than string\n            Add 'changeInterval' to allow things created with setInterval to have the frequency changed (eg. stepper motor control)\n            Now puts itself to sleep to save power, when it knows nothing is required and it'll be woken up by SysTick before\n            Change Math library to avoid putting constants in RAM\n\n     1v10 : Increase FIFO size for VL\n            Marginally decrease amount of F4 vars to ensure they all fit in one flash sector\n            Allow strings to be longer than the max token size\n            '\"key\" in obj' syntax\n            Detect if in FOR or WHILE loop, and if not, disallow break and continue\n            Change min setInterval time to 0.1ms - F4 can get close to this\n            Better analog pin error message\n            USB support on Olimexino/Maple\n            Start of multiple COM port support (ioEvent queue)\n            Ctrl-C now clears the input line\n            Save state of 'echo' into flash with save()\n            Add 'setBusyIndicator(pin)' to set pin high when Espruino is busy\n            Inbuilt function handling speed improvements\n            Allow Serial comms via other UARTS. Serial1/2.onData and print/println\n            now inserts elements into arrays in the correct order (GetLength can be (is) now much faster)\n            Faster code to work out pins from strings\n            Automatically convert IDs in form A#,A##,B#,B## etc into numbers.\n            Built-in constants for LED1/BTN/etc.\n\n     1v09 : Enabled 'abs' by default\n            Added flash programming to STM32F4\n            analogWrite now working!\n\n     1v08 : Add preliminary STM32F4 support\n            Allowed test cases to test timers - eg. code in jsinteractive.c\n            Fix memory leak for timer\n            Fix memory leak for digitalWrite\n\n     1v07 : Fix string charAt\n            Fix watch on different pin\n            Pass arguments to event handlers - eg. time\n            digitalWrite/Read to take arrays of pins, and int for value\n\n     1v06 : Add break + continue\n            Add switch statement\n            Handle /r, /r/n or just /n for newlines - phone compatible\n            Handle different type of delete\n\n     1v05 : Allow setWatch/setTimeout/setInterval with a string\n            Handle adding Open bracket then deleting it\n            When calling a NAMED function, zero the scopes - this stops scope table overflow\n\n     1v04 : Renamed to Espruino\n            Fixed issue with event add when out of memory\n            If out of memory happens during a timer, kill all timers\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.3291015625,
          "content": "# Usage:\n#\n# Note: if you're in Linux you need to run socker with 'sudo'.\n#   But honestly if you're on linux you should just save yourself\n#   gigabytes of downloads and disk space and build Espruino directly.\n#\n# 1: Build the container image \n#\n#   docker build . -t img_name\n#\n# 2: Run container image so it builds espruino\n#\n#   docker run -e BOARD='PICO_R1_3' --name container_name img_name\n# or\n#   docker run -e BOARD='BANGLEJS' -e DFU_UPDATE_BUILD=1 --name container_name img_name\n#\n# This will run the container and save build results into the container's filesystem.\n# Near the end of the build the filename will be displayed, for example espruino_2v00_pico_1r3.bin \n#\n# 3: Copy build results from the container into your filesystem\n#\n#   docker cp container_name:espruino/espruino_2v00_pico_1r3.bin ./\n#\n\nFROM python:3\n\nWORKDIR /espruino\n\n# Workaround add some stuff that the provision script uses\n# in here so it doesn't have to use sudo\nRUN apt-get update\nRUN apt-get install -qq -y python3-pip\nRUN pip install pyserial\nRUN pip install nrfutil\n\nCOPY ./scripts /espruino/scripts\nCOPY ./targetlibs /espruino/targetlibs\nCOPY ./boards /espruino/boards\n\n# This ensures ALL dependencies are installed beforehand\nRUN bash -c \"source scripts/provision.sh ALL\"\n\nCOPY . /espruino\n\nENV RELEASE 1\nCMD [\"bash\", \"-c\", \"source scripts/provision.sh ALL && make\"]\n\n"
        },
        {
          "name": "Doxyfile",
          "type": "blob",
          "size": 74.0322265625,
          "content": "# Doxyfile 1.7.6.1\n#\n# =====================================================================\n# See doxygen/README.md for more info\n# =====================================================================\n\n# This file describes the settings to be used by the documentation system\n# doxygen (www.doxygen.org) for a project.\n#\n# All text after a hash (#) is considered a comment and will be ignored.\n# The format is:\n#       TAG = value [value, ...]\n# For lists items can also be appended using:\n#       TAG += value [value, ...]\n# Values that contain spaces should be placed between quotes (\" \").\n\n#---------------------------------------------------------------------------\n# Project related configuration options\n#---------------------------------------------------------------------------\n\n# This tag specifies the encoding used for all characters in the config file\n# that follow. The default is UTF-8 which is also the encoding used for all\n# text before the first occurrence of this tag. Doxygen uses libiconv (or the\n# iconv built into libc) for the transcoding. See\n# http://www.gnu.org/software/libiconv for the list of possible encodings.\n\nDOXYFILE_ENCODING      = UTF-8\n\n# The PROJECT_NAME tag is a single word (or sequence of words) that should\n# identify the project. Note that if you do not use Doxywizard you need\n# to put quotes around the project name if it contains spaces.\n\nPROJECT_NAME           = \"Espruino\"\n\n# The PROJECT_NUMBER tag can be used to enter a project or revision number.\n# This could be handy for archiving the generated documentation or\n# if some version control system is used.\n\nPROJECT_NUMBER         =\n\n# Using the PROJECT_BRIEF tag one can provide an optional one line description\n# for a project that appears at the top of each page and should give viewer\n# a quick idea about the purpose of the project. Keep the description short.\n\nPROJECT_BRIEF          = \"A JavaScript interpreter for Microcontrollers\"\n\n# With the PROJECT_LOGO tag one can specify an logo or icon that is\n# included in the documentation. The maximum height of the logo should not\n# exceed 55 pixels and the maximum width should not exceed 200 pixels.\n# Doxygen will copy the logo to the output directory.\n\nPROJECT_LOGO           =\n\n# The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute)\n# base path where the generated documentation will be put.\n# If a relative path is entered, it will be relative to the location\n# where doxygen was started. If left blank the current directory will be used.\n\nOUTPUT_DIRECTORY       = \"doxygen\"\n\n# If the CREATE_SUBDIRS tag is set to YES, then doxygen will create\n# 4096 sub-directories (in 2 levels) under the output directory of each output\n# format and will distribute the generated files over these directories.\n# Enabling this option can be useful when feeding doxygen a huge amount of\n# source files, where putting all generated files in the same directory would\n# otherwise cause performance problems for the file system.\n\nCREATE_SUBDIRS         = NO\n\n# The OUTPUT_LANGUAGE tag is used to specify the language in which all\n# documentation generated by doxygen is written. Doxygen will use this\n# information to generate all constant output in the proper language.\n# The default language is English, other supported languages are:\n# Afrikaans, Arabic, Brazilian, Catalan, Chinese, Chinese-Traditional,\n# Croatian, Czech, Danish, Dutch, Esperanto, Farsi, Finnish, French, German,\n# Greek, Hungarian, Italian, Japanese, Japanese-en (Japanese with English\n# messages), Korean, Korean-en, Lithuanian, Norwegian, Macedonian, Persian,\n# Polish, Portuguese, Romanian, Russian, Serbian, Serbian-Cyrillic, Slovak,\n# Slovene, Spanish, Swedish, Ukrainian, and Vietnamese.\n\nOUTPUT_LANGUAGE        = English\n\n# If the BRIEF_MEMBER_DESC tag is set to YES (the default) Doxygen will\n# include brief member descriptions after the members that are listed in\n# the file and class documentation (similar to JavaDoc).\n# Set to NO to disable this.\n\nBRIEF_MEMBER_DESC      = YES\n\n# If the REPEAT_BRIEF tag is set to YES (the default) Doxygen will prepend\n# the brief description of a member or function before the detailed description.\n# Note: if both HIDE_UNDOC_MEMBERS and BRIEF_MEMBER_DESC are set to NO, the\n# brief descriptions will be completely suppressed.\n\nREPEAT_BRIEF           = YES\n\n# This tag implements a quasi-intelligent brief description abbreviator\n# that is used to form the text in various listings. Each string\n# in this list, if found as the leading text of the brief description, will be\n# stripped from the text and the result after processing the whole list, is\n# used as the annotated text. Otherwise, the brief description is used as-is.\n# If left blank, the following values are used (\"$name\" is automatically\n# replaced with the name of the entity): \"The $name class\" \"The $name widget\"\n# \"The $name file\" \"is\" \"provides\" \"specifies\" \"contains\"\n# \"represents\" \"a\" \"an\" \"the\"\n\nABBREVIATE_BRIEF       =\n\n# If the ALWAYS_DETAILED_SEC and REPEAT_BRIEF tags are both set to YES then\n# Doxygen will generate a detailed section even if there is only a brief\n# description.\n\nALWAYS_DETAILED_SEC    = NO\n\n# If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all\n# inherited members of a class in the documentation of that class as if those\n# members were ordinary class members. Constructors, destructors and assignment\n# operators of the base classes will not be shown.\n\nINLINE_INHERITED_MEMB  = NO\n\n# If the FULL_PATH_NAMES tag is set to YES then Doxygen will prepend the full\n# path before files name in the file list and in the header files. If set\n# to NO the shortest path that makes the file name unique will be used.\n\nFULL_PATH_NAMES        = YES\n\n# If the FULL_PATH_NAMES tag is set to YES then the STRIP_FROM_PATH tag\n# can be used to strip a user-defined part of the path. Stripping is\n# only done if one of the specified strings matches the left-hand part of\n# the path. The tag can be used to show relative paths in the file list.\n# If left blank the directory from which doxygen is run is used as the\n# path to strip.\n\nSTRIP_FROM_PATH        =\n\n# The STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of\n# the path mentioned in the documentation of a class, which tells\n# the reader which header file to include in order to use a class.\n# If left blank only the name of the header file containing the class\n# definition is used. Otherwise one should specify the include paths that\n# are normally passed to the compiler using the -I flag.\n\nSTRIP_FROM_INC_PATH    =\n\n# If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter\n# (but less readable) file names. This can be useful if your file system\n# doesn't support long names like on DOS, Mac, or CD-ROM.\n\nSHORT_NAMES            = NO\n\n# If the JAVADOC_AUTOBRIEF tag is set to YES then Doxygen\n# will interpret the first line (until the first dot) of a JavaDoc-style\n# comment as the brief description. If set to NO, the JavaDoc\n# comments will behave just like regular Qt-style comments\n# (thus requiring an explicit @brief command for a brief description.)\n\nJAVADOC_AUTOBRIEF      = NO\n\n# If the QT_AUTOBRIEF tag is set to YES then Doxygen will\n# interpret the first line (until the first dot) of a Qt-style\n# comment as the brief description. If set to NO, the comments\n# will behave just like regular Qt-style comments (thus requiring\n# an explicit \\brief command for a brief description.)\n\nQT_AUTOBRIEF           = NO\n\n# The MULTILINE_CPP_IS_BRIEF tag can be set to YES to make Doxygen\n# treat a multi-line C++ special comment block (i.e. a block of //! or ///\n# comments) as a brief description. This used to be the default behaviour.\n# The new default is to treat a multi-line C++ comment block as a detailed\n# description. Set this tag to YES if you prefer the old behaviour instead.\n\nMULTILINE_CPP_IS_BRIEF = NO\n\n# If the INHERIT_DOCS tag is set to YES (the default) then an undocumented\n# member inherits the documentation from any documented member that it\n# re-implements.\n\nINHERIT_DOCS           = YES\n\n# If the SEPARATE_MEMBER_PAGES tag is set to YES, then doxygen will produce\n# a new page for each member. If set to NO, the documentation of a member will\n# be part of the file/class/namespace that contains it.\n\nSEPARATE_MEMBER_PAGES  = NO\n\n# The TAB_SIZE tag can be used to set the number of spaces in a tab.\n# Doxygen uses this value to replace tabs by spaces in code fragments.\n\nTAB_SIZE               = 8\n\n# This tag can be used to specify a number of aliases that acts\n# as commands in the documentation. An alias has the form \"name=value\".\n# For example adding \"sideeffect=\\par Side Effects:\\n\" will allow you to\n# put the command \\sideeffect (or @sideeffect) in the documentation, which\n# will result in a user-defined paragraph with heading \"Side Effects:\".\n# You can put \\n's in the value part of an alias to insert newlines.\n\nALIASES                =\n\n# This tag can be used to specify a number of word-keyword mappings (TCL only).\n# A mapping has the form \"name=value\". For example adding\n# \"class=itcl::class\" will allow you to use the command class in the\n# itcl::class meaning.\n\nTCL_SUBST              =\n\n# Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C\n# sources only. Doxygen will then generate output that is more tailored for C.\n# For instance, some of the names that are used will be different. The list\n# of all members will be omitted, etc.\n\nOPTIMIZE_OUTPUT_FOR_C  = YES\n\n# Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of Java\n# sources only. Doxygen will then generate output that is more tailored for\n# Java. For instance, namespaces will be presented as packages, qualified\n# scopes will look different, etc.\n\nOPTIMIZE_OUTPUT_JAVA   = NO\n\n# Set the OPTIMIZE_FOR_FORTRAN tag to YES if your project consists of Fortran\n# sources only. Doxygen will then generate output that is more tailored for\n# Fortran.\n\nOPTIMIZE_FOR_FORTRAN   = NO\n\n# Set the OPTIMIZE_OUTPUT_VHDL tag to YES if your project consists of VHDL\n# sources. Doxygen will then generate output that is tailored for\n# VHDL.\n\nOPTIMIZE_OUTPUT_VHDL   = NO\n\n# Doxygen selects the parser to use depending on the extension of the files it\n# parses. With this tag you can assign which parser to use for a given extension.\n# Doxygen has a built-in mapping, but you can override or extend it using this\n# tag. The format is ext=language, where ext is a file extension, and language\n# is one of the parsers supported by doxygen: IDL, Java, Javascript, CSharp, C,\n# C++, D, PHP, Objective-C, Python, Fortran, VHDL, C, C++. For instance to make\n# doxygen treat .inc files as Fortran files (default is PHP), and .f files as C\n# (default is Fortran), use: inc=Fortran f=C. Note that for custom extensions\n# you also need to set FILE_PATTERNS otherwise the files are not read by doxygen.\n\nEXTENSION_MAPPING      =\n\n# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want\n# to include (a tag file for) the STL sources as input, then you should\n# set this tag to YES in order to let doxygen match functions declarations and\n# definitions whose arguments contain STL classes (e.g. func(std::string); v.s.\n# func(std::string) {}). This also makes the inheritance and collaboration\n# diagrams that involve STL classes more complete and accurate.\n\nBUILTIN_STL_SUPPORT    = NO\n\n# If you use Microsoft's C++/CLI language, you should set this option to YES to\n# enable parsing support.\n\nCPP_CLI_SUPPORT        = NO\n\n# Set the SIP_SUPPORT tag to YES if your project consists of sip sources only.\n# Doxygen will parse them like normal C++ but will assume all classes use public\n# instead of private inheritance when no explicit protection keyword is present.\n\nSIP_SUPPORT            = NO\n\n# For Microsoft's IDL there are propget and propput attributes to indicate getter\n# and setter methods for a property. Setting this option to YES (the default)\n# will make doxygen replace the get and set methods by a property in the\n# documentation. This will only work if the methods are indeed getting or\n# setting a simple type. If this is not the case, or you want to show the\n# methods anyway, you should set this option to NO.\n\nIDL_PROPERTY_SUPPORT   = YES\n\n# If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC\n# tag is set to YES, then doxygen will reuse the documentation of the first\n# member in the group (if any) for the other members of the group. By default\n# all members of a group must be documented explicitly.\n\nDISTRIBUTE_GROUP_DOC   = NO\n\n# Set the SUBGROUPING tag to YES (the default) to allow class member groups of\n# the same type (for instance a group of public functions) to be put as a\n# subgroup of that type (e.g. under the Public Functions section). Set it to\n# NO to prevent subgrouping. Alternatively, this can be done per class using\n# the \\nosubgrouping command.\n\nSUBGROUPING            = YES\n\n# When the INLINE_GROUPED_CLASSES tag is set to YES, classes, structs and\n# unions are shown inside the group in which they are included (e.g. using\n# @ingroup) instead of on a separate page (for HTML and Man pages) or\n# section (for LaTeX and RTF).\n\nINLINE_GROUPED_CLASSES = NO\n\n# When the INLINE_SIMPLE_STRUCTS tag is set to YES, structs, classes, and\n# unions with only public data fields will be shown inline in the documentation\n# of the scope in which they are defined (i.e. file, namespace, or group\n# documentation), provided this scope is documented. If set to NO (the default),\n# structs, classes, and unions are shown on a separate page (for HTML and Man\n# pages) or section (for LaTeX and RTF).\n\nINLINE_SIMPLE_STRUCTS  = NO\n\n# When TYPEDEF_HIDES_STRUCT is enabled, a typedef of a struct, union, or enum\n# is documented as struct, union, or enum with the name of the typedef. So\n# typedef struct TypeS {} TypeT, will appear in the documentation as a struct\n# with name TypeT. When disabled the typedef will appear as a member of a file,\n# namespace, or class. And the struct will be named TypeS. This can typically\n# be useful for C code in case the coding convention dictates that all compound\n# types are typedef'ed and only the typedef is referenced, never the tag name.\n\nTYPEDEF_HIDES_STRUCT   = NO\n\n# The SYMBOL_CACHE_SIZE determines the size of the internal cache use to\n# determine which symbols to keep in memory and which to flush to disk.\n# When the cache is full, less often used symbols will be written to disk.\n# For small to medium size projects (<1000 input files) the default value is\n# probably good enough. For larger projects a too small cache size can cause\n# doxygen to be busy swapping symbols to and from disk most of the time\n# causing a significant performance penalty.\n# If the system has enough physical memory increasing the cache will improve the\n# performance by keeping more symbols in memory. Note that the value works on\n# a logarithmic scale so increasing the size by one will roughly double the\n# memory usage. The cache size is given by this formula:\n# 2^(16+SYMBOL_CACHE_SIZE). The valid range is 0..9, the default is 0,\n# corresponding to a cache size of 2^16 = 65536 symbols.\n\nSYMBOL_CACHE_SIZE      = 0\n\n# Similar to the SYMBOL_CACHE_SIZE the size of the symbol lookup cache can be\n# set using LOOKUP_CACHE_SIZE. This cache is used to resolve symbols given\n# their name and scope. Since this can be an expensive process and often the\n# same symbol appear multiple times in the code, doxygen keeps a cache of\n# pre-resolved symbols. If the cache is too small doxygen will become slower.\n# If the cache is too large, memory is wasted. The cache size is given by this\n# formula: 2^(16+LOOKUP_CACHE_SIZE). The valid range is 0..9, the default is 0,\n# corresponding to a cache size of 2^16 = 65536 symbols.\n\nLOOKUP_CACHE_SIZE      = 0\n\n#---------------------------------------------------------------------------\n# Build related configuration options\n#---------------------------------------------------------------------------\n\n# If the EXTRACT_ALL tag is set to YES doxygen will assume all entities in\n# documentation are documented, even if no documentation was available.\n# Private class members and static file members will be hidden unless\n# the EXTRACT_PRIVATE and EXTRACT_STATIC tags are set to YES\n\nEXTRACT_ALL            = YES\n\n# If the EXTRACT_PRIVATE tag is set to YES all private members of a class\n# will be included in the documentation.\n\nEXTRACT_PRIVATE        = YES\n\n# If the EXTRACT_STATIC tag is set to YES all static members of a file\n# will be included in the documentation.\n\nEXTRACT_STATIC         = YES\n\n# If the EXTRACT_LOCAL_CLASSES tag is set to YES classes (and structs)\n# defined locally in source files will be included in the documentation.\n# If set to NO only classes defined in header files are included.\n\nEXTRACT_LOCAL_CLASSES  = YES\n\n# This flag is only useful for Objective-C code. When set to YES local\n# methods, which are defined in the implementation section but not in\n# the interface are included in the documentation.\n# If set to NO (the default) only methods in the interface are included.\n\nEXTRACT_LOCAL_METHODS  = NO\n\n# If this flag is set to YES, the members of anonymous namespaces will be\n# extracted and appear in the documentation as a namespace called\n# 'anonymous_namespace{file}', where file will be replaced with the base\n# name of the file that contains the anonymous namespace. By default\n# anonymous namespaces are hidden.\n\nEXTRACT_ANON_NSPACES   = NO\n\n# If the HIDE_UNDOC_MEMBERS tag is set to YES, Doxygen will hide all\n# undocumented members of documented classes, files or namespaces.\n# If set to NO (the default) these members will be included in the\n# various overviews, but no documentation section is generated.\n# This option has no effect if EXTRACT_ALL is enabled.\n\nHIDE_UNDOC_MEMBERS     = NO\n\n# If the HIDE_UNDOC_CLASSES tag is set to YES, Doxygen will hide all\n# undocumented classes that are normally visible in the class hierarchy.\n# If set to NO (the default) these classes will be included in the various\n# overviews. This option has no effect if EXTRACT_ALL is enabled.\n\nHIDE_UNDOC_CLASSES     = NO\n\n# If the HIDE_FRIEND_COMPOUNDS tag is set to YES, Doxygen will hide all\n# friend (class|struct|union) declarations.\n# If set to NO (the default) these declarations will be included in the\n# documentation.\n\nHIDE_FRIEND_COMPOUNDS  = NO\n\n# If the HIDE_IN_BODY_DOCS tag is set to YES, Doxygen will hide any\n# documentation blocks found inside the body of a function.\n# If set to NO (the default) these blocks will be appended to the\n# function's detailed documentation block.\n\nHIDE_IN_BODY_DOCS      = NO\n\n# The INTERNAL_DOCS tag determines if documentation\n# that is typed after a \\internal command is included. If the tag is set\n# to NO (the default) then the documentation will be excluded.\n# Set it to YES to include the internal documentation.\n\nINTERNAL_DOCS          = NO\n\n# If the CASE_SENSE_NAMES tag is set to NO then Doxygen will only generate\n# file names in lower-case letters. If set to YES upper-case letters are also\n# allowed. This is useful if you have classes or files whose names only differ\n# in case and if your file system supports case sensitive file names. Windows\n# and Mac users are advised to set this option to NO.\n\nCASE_SENSE_NAMES       = YES\n\n# If the HIDE_SCOPE_NAMES tag is set to NO (the default) then Doxygen\n# will show members with their full class and namespace scopes in the\n# documentation. If set to YES the scope will be hidden.\n\nHIDE_SCOPE_NAMES       = NO\n\n# If the SHOW_INCLUDE_FILES tag is set to YES (the default) then Doxygen\n# will put a list of the files that are included by a file in the documentation\n# of that file.\n\nSHOW_INCLUDE_FILES     = YES\n\n# If the FORCE_LOCAL_INCLUDES tag is set to YES then Doxygen\n# will list include files with double quotes in the documentation\n# rather than with sharp brackets.\n\nFORCE_LOCAL_INCLUDES   = NO\n\n# If the INLINE_INFO tag is set to YES (the default) then a tag [inline]\n# is inserted in the documentation for inline members.\n\nINLINE_INFO            = YES\n\n# If the SORT_MEMBER_DOCS tag is set to YES (the default) then doxygen\n# will sort the (detailed) documentation of file and class members\n# alphabetically by member name. If set to NO the members will appear in\n# declaration order.\n\nSORT_MEMBER_DOCS       = YES\n\n# If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the\n# brief documentation of file, namespace and class members alphabetically\n# by member name. If set to NO (the default) the members will appear in\n# declaration order.\n\nSORT_BRIEF_DOCS        = NO\n\n# If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen\n# will sort the (brief and detailed) documentation of class members so that\n# constructors and destructors are listed first. If set to NO (the default)\n# the constructors will appear in the respective orders defined by\n# SORT_MEMBER_DOCS and SORT_BRIEF_DOCS.\n# This tag will be ignored for brief docs if SORT_BRIEF_DOCS is set to NO\n# and ignored for detailed docs if SORT_MEMBER_DOCS is set to NO.\n\nSORT_MEMBERS_CTORS_1ST = NO\n\n# If the SORT_GROUP_NAMES tag is set to YES then doxygen will sort the\n# hierarchy of group names into alphabetical order. If set to NO (the default)\n# the group names will appear in their defined order.\n\nSORT_GROUP_NAMES       = NO\n\n# If the SORT_BY_SCOPE_NAME tag is set to YES, the class list will be\n# sorted by fully-qualified names, including namespaces. If set to\n# NO (the default), the class list will be sorted only by class name,\n# not including the namespace part.\n# Note: This option is not very useful if HIDE_SCOPE_NAMES is set to YES.\n# Note: This option applies only to the class list, not to the\n# alphabetical list.\n\nSORT_BY_SCOPE_NAME     = NO\n\n# If the STRICT_PROTO_MATCHING option is enabled and doxygen fails to\n# do proper type resolution of all parameters of a function it will reject a\n# match between the prototype and the implementation of a member function even\n# if there is only one candidate or it is obvious which candidate to choose\n# by doing a simple string match. By disabling STRICT_PROTO_MATCHING doxygen\n# will still accept a match between prototype and implementation in such cases.\n\nSTRICT_PROTO_MATCHING  = NO\n\n# The GENERATE_TODOLIST tag can be used to enable (YES) or\n# disable (NO) the todo list. This list is created by putting \\todo\n# commands in the documentation.\n\nGENERATE_TODOLIST      = YES\n\n# The GENERATE_TESTLIST tag can be used to enable (YES) or\n# disable (NO) the test list. This list is created by putting \\test\n# commands in the documentation.\n\nGENERATE_TESTLIST      = YES\n\n# The GENERATE_BUGLIST tag can be used to enable (YES) or\n# disable (NO) the bug list. This list is created by putting \\bug\n# commands in the documentation.\n\nGENERATE_BUGLIST       = YES\n\n# The GENERATE_DEPRECATEDLIST tag can be used to enable (YES) or\n# disable (NO) the deprecated list. This list is created by putting\n# \\deprecated commands in the documentation.\n\nGENERATE_DEPRECATEDLIST= YES\n\n# The ENABLED_SECTIONS tag can be used to enable conditional\n# documentation sections, marked by \\if sectionname ... \\endif.\n\nENABLED_SECTIONS       =\n\n# The MAX_INITIALIZER_LINES tag determines the maximum number of lines\n# the initial value of a variable or macro consists of for it to appear in\n# the documentation. If the initializer consists of more lines than specified\n# here it will be hidden. Use a value of 0 to hide initializers completely.\n# The appearance of the initializer of individual variables and macros in the\n# documentation can be controlled using \\showinitializer or \\hideinitializer\n# command in the documentation regardless of this setting.\n\nMAX_INITIALIZER_LINES  = 30\n\n# Set the SHOW_USED_FILES tag to NO to disable the list of files generated\n# at the bottom of the documentation of classes and structs. If set to YES the\n# list will mention the files that were used to generate the documentation.\n\nSHOW_USED_FILES        = YES\n\n# If the sources in your project are distributed over multiple directories\n# then setting the SHOW_DIRECTORIES tag to YES will show the directory hierarchy\n# in the documentation. The default is NO.\n\nSHOW_DIRECTORIES       = YES\n\n# Set the SHOW_FILES tag to NO to disable the generation of the Files page.\n# This will remove the Files entry from the Quick Index and from the\n# Folder Tree View (if specified). The default is YES.\n\nSHOW_FILES             = YES\n\n# Set the SHOW_NAMESPACES tag to NO to disable the generation of the\n# Namespaces page.\n# This will remove the Namespaces entry from the Quick Index\n# and from the Folder Tree View (if specified). The default is YES.\n\nSHOW_NAMESPACES        = NO\n\n# The FILE_VERSION_FILTER tag can be used to specify a program or script that\n# doxygen should invoke to get the current version for each file (typically from\n# the version control system). Doxygen will invoke the program by executing (via\n# popen()) the command <command> <input-file>, where <command> is the value of\n# the FILE_VERSION_FILTER tag, and <input-file> is the name of an input file\n# provided by doxygen. Whatever the program writes to standard output\n# is used as the file version. See the manual for examples.\n\nFILE_VERSION_FILTER    =\n\n# The LAYOUT_FILE tag can be used to specify a layout file which will be parsed\n# by doxygen. The layout file controls the global structure of the generated\n# output files in an output format independent way. The create the layout file\n# that represents doxygen's defaults, run doxygen with the -l option.\n# You can optionally specify a file name after the option, if omitted\n# DoxygenLayout.xml will be used as the name of the layout file.\n\nLAYOUT_FILE            =\n\n# The CITE_BIB_FILES tag can be used to specify one or more bib files\n# containing the references data. This must be a list of .bib files. The\n# .bib extension is automatically appended if omitted. Using this command\n# requires the bibtex tool to be installed. See also\n# http://en.wikipedia.org/wiki/BibTeX for more info. For LaTeX the style\n# of the bibliography can be controlled using LATEX_BIB_STYLE. To use this\n# feature you need bibtex and perl available in the search path.\n\nCITE_BIB_FILES         =\n\n#---------------------------------------------------------------------------\n# configuration options related to warning and progress messages\n#---------------------------------------------------------------------------\n\n# The QUIET tag can be used to turn on/off the messages that are generated\n# by doxygen. Possible values are YES and NO. If left blank NO is used.\n\nQUIET                  = NO\n\n# The WARNINGS tag can be used to turn on/off the warning messages that are\n# generated by doxygen. Possible values are YES and NO. If left blank\n# NO is used.\n\nWARNINGS               = YES\n\n# If WARN_IF_UNDOCUMENTED is set to YES, then doxygen will generate warnings\n# for undocumented members. If EXTRACT_ALL is set to YES then this flag will\n# automatically be disabled.\n\nWARN_IF_UNDOCUMENTED   = YES\n\n# If WARN_IF_DOC_ERROR is set to YES, doxygen will generate warnings for\n# potential errors in the documentation, such as not documenting some\n# parameters in a documented function, or documenting parameters that\n# don't exist or using markup commands wrongly.\n\nWARN_IF_DOC_ERROR      = YES\n\n# The WARN_NO_PARAMDOC option can be enabled to get warnings for\n# functions that are documented, but have no documentation for their parameters\n# or return value. If set to NO (the default) doxygen will only warn about\n# wrong or incomplete parameter documentation, but not about the absence of\n# documentation.\n\nWARN_NO_PARAMDOC       = NO\n\n# The WARN_FORMAT tag determines the format of the warning messages that\n# doxygen can produce. The string should contain the $file, $line, and $text\n# tags, which will be replaced by the file and line number from which the\n# warning originated and the warning text. Optionally the format may contain\n# $version, which will be replaced by the version of the file (if it could\n# be obtained via FILE_VERSION_FILTER)\n\nWARN_FORMAT            = \"$file:$line: $text\"\n\n# The WARN_LOGFILE tag can be used to specify a file to which warning\n# and error messages should be written. If left blank the output is written\n# to stderr.\n\nWARN_LOGFILE           =\n\n#---------------------------------------------------------------------------\n# configuration options related to the input files\n#---------------------------------------------------------------------------\n\n# The INPUT tag can be used to specify the files and/or directories that contain\n# documented source files. You may enter file names like \"myfile.cpp\" or\n# directories like \"/usr/src/myproject\". Separate the files or directories\n# with spaces.\n\nINPUT                  = src libs targets/stm32 targets/esp8266\n\n# This tag can be used to specify the character encoding of the source files\n# that doxygen parses. Internally doxygen uses the UTF-8 encoding, which is\n# also the default input encoding. Doxygen uses libiconv (or the iconv built\n# into libc) for the transcoding. See http://www.gnu.org/software/libiconv for\n# the list of possible encodings.\n\nINPUT_ENCODING         = UTF-8\n\n# If the value of the INPUT tag contains directories, you can use the\n# FILE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp\n# and *.h) to filter out the source-files in the directories. If left\n# blank the following patterns are tested:\n# *.c *.cc *.cxx *.cpp *.c++ *.d *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh\n# *.hxx *.hpp *.h++ *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm *.dox *.py\n# *.f90 *.f *.for *.vhd *.vhdl\n\nFILE_PATTERNS          = \n\n# The RECURSIVE tag can be used to turn specify whether or not subdirectories\n# should be searched for input files as well. Possible values are YES and NO.\n# If left blank NO is used.\n\nRECURSIVE              = YES\n\n# The EXCLUDE tag can be used to specify files and/or directories that should be\n# excluded from the INPUT source files. This way you can easily exclude a\n# subdirectory from a directory tree whose root is specified with the INPUT tag.\n# Note that relative paths are relative to the directory from which doxygen is\n# run.\n\nEXCLUDE                =\n\n# The EXCLUDE_SYMLINKS tag can be used to select whether or not files or\n# directories that are symbolic links (a Unix file system feature) are excluded\n# from the input.\n\nEXCLUDE_SYMLINKS       = NO\n\n# If the value of the INPUT tag contains directories, you can use the\n# EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude\n# certain files from those directories. Note that the wildcards are matched\n# against the file with absolute path, so to exclude all test directories\n# for example use the pattern */test/*\n\nEXCLUDE_PATTERNS       = *.md\n\n# The EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names\n# (namespaces, classes, functions, etc.) that should be excluded from the\n# output. The symbol name can be a fully qualified name, a word, or if the\n# wildcard * is used, a substring. Examples: ANamespace, AClass,\n# AClass::ANamespace, ANamespace::*Test\n\nEXCLUDE_SYMBOLS        =\n\n# The EXAMPLE_PATH tag can be used to specify one or more files or\n# directories that contain example code fragments that are included (see\n# the \\include command).\n\nEXAMPLE_PATH           =\n\n# If the value of the EXAMPLE_PATH tag contains directories, you can use the\n# EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp\n# and *.h) to filter out the source-files in the directories. If left\n# blank all files are included.\n\nEXAMPLE_PATTERNS       =\n\n# If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be\n# searched for input files to be used with the \\include or \\dontinclude\n# commands irrespective of the value of the RECURSIVE tag.\n# Possible values are YES and NO. If left blank NO is used.\n\nEXAMPLE_RECURSIVE      = NO\n\n# The IMAGE_PATH tag can be used to specify one or more files or\n# directories that contain image that are included in the documentation (see\n# the \\image command).\n\nIMAGE_PATH             =\n\n# The INPUT_FILTER tag can be used to specify a program that doxygen should\n# invoke to filter for each input file. Doxygen will invoke the filter program\n# by executing (via popen()) the command <filter> <input-file>, where <filter>\n# is the value of the INPUT_FILTER tag, and <input-file> is the name of an\n# input file. Doxygen will then use the output that the filter program writes\n# to standard output.\n# If FILTER_PATTERNS is specified, this tag will be\n# ignored.\n\nINPUT_FILTER           =\n\n# The FILTER_PATTERNS tag can be used to specify filters on a per file pattern\n# basis.\n# Doxygen will compare the file name with each pattern and apply the\n# filter if there is a match.\n# The filters are a list of the form:\n# pattern=filter (like *.cpp=my_cpp_filter). See INPUT_FILTER for further\n# info on how filters are used. If FILTER_PATTERNS is empty or if\n# non of the patterns match the file name, INPUT_FILTER is applied.\n\nFILTER_PATTERNS        =\n\n# If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using\n# INPUT_FILTER) will be used to filter the input files when producing source\n# files to browse (i.e. when SOURCE_BROWSER is set to YES).\n\nFILTER_SOURCE_FILES    = NO\n\n# The FILTER_SOURCE_PATTERNS tag can be used to specify source filters per file\n# pattern. A pattern will override the setting for FILTER_PATTERN (if any)\n# and it is also possible to disable source filtering for a specific pattern\n# using *.ext= (so without naming a filter). This option only has effect when\n# FILTER_SOURCE_FILES is enabled.\n\nFILTER_SOURCE_PATTERNS =\n\n#---------------------------------------------------------------------------\n# configuration options related to source browsing\n#---------------------------------------------------------------------------\n\n# If the SOURCE_BROWSER tag is set to YES then a list of source files will\n# be generated. Documented entities will be cross-referenced with these sources.\n# Note: To get rid of all source code in the generated output, make sure also\n# VERBATIM_HEADERS is set to NO.\n\nSOURCE_BROWSER         = NO\n\n# Setting the INLINE_SOURCES tag to YES will include the body\n# of functions and classes directly in the documentation.\n\nINLINE_SOURCES         = NO\n\n# Setting the STRIP_CODE_COMMENTS tag to YES (the default) will instruct\n# doxygen to hide any special comment blocks from generated source code\n# fragments. Normal C and C++ comments will always remain visible.\n\nSTRIP_CODE_COMMENTS    = YES\n\n# If the REFERENCED_BY_RELATION tag is set to YES\n# then for each documented function all documented\n# functions referencing it will be listed.\n\nREFERENCED_BY_RELATION = NO\n\n# If the REFERENCES_RELATION tag is set to YES\n# then for each documented function all documented entities\n# called/used by that function will be listed.\n\nREFERENCES_RELATION    = NO\n\n# If the REFERENCES_LINK_SOURCE tag is set to YES (the default)\n# and SOURCE_BROWSER tag is set to YES, then the hyperlinks from\n# functions in REFERENCES_RELATION and REFERENCED_BY_RELATION lists will\n# link to the source code.\n# Otherwise they will link to the documentation.\n\nREFERENCES_LINK_SOURCE = YES\n\n# If the USE_HTAGS tag is set to YES then the references to source code\n# will point to the HTML generated by the htags(1) tool instead of doxygen\n# built-in source browser. The htags tool is part of GNU's global source\n# tagging system (see http://www.gnu.org/software/global/global.html). You\n# will need version 4.8.6 or higher.\n\nUSE_HTAGS              = NO\n\n# If the VERBATIM_HEADERS tag is set to YES (the default) then Doxygen\n# will generate a verbatim copy of the header file for each class for\n# which an include is specified. Set to NO to disable this.\n\nVERBATIM_HEADERS       = YES\n\n#---------------------------------------------------------------------------\n# configuration options related to the alphabetical class index\n#---------------------------------------------------------------------------\n\n# If the ALPHABETICAL_INDEX tag is set to YES, an alphabetical index\n# of all compounds will be generated. Enable this if the project\n# contains a lot of classes, structs, unions or interfaces.\n\nALPHABETICAL_INDEX     = YES\n\n# If the alphabetical index is enabled (see ALPHABETICAL_INDEX) then\n# the COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns\n# in which this list will be split (can be a number in the range [1..20])\n\nCOLS_IN_ALPHA_INDEX    = 5\n\n# In case all classes in a project start with a common prefix, all\n# classes will be put under the same header in the alphabetical index.\n# The IGNORE_PREFIX tag can be used to specify one or more prefixes that\n# should be ignored while generating the index headers.\n\nIGNORE_PREFIX          =\n\n#---------------------------------------------------------------------------\n# configuration options related to the HTML output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_HTML tag is set to YES (the default) Doxygen will\n# generate HTML output.\n\nGENERATE_HTML          = YES\n\n# The HTML_OUTPUT tag is used to specify where the HTML docs will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `html' will be used as the default path.\n\nHTML_OUTPUT            = html\n\n# The HTML_FILE_EXTENSION tag can be used to specify the file extension for\n# each generated HTML page (for example: .htm,.php,.asp). If it is left blank\n# doxygen will generate files with .html extension.\n\nHTML_FILE_EXTENSION    = .html\n\n# The HTML_HEADER tag can be used to specify a personal HTML header for\n# each generated HTML page. If it is left blank doxygen will generate a\n# standard header. Note that when using a custom header you are responsible\n#  for the proper inclusion of any scripts and style sheets that doxygen\n# needs, which is dependent on the configuration options used.\n# It is advised to generate a default header using \"doxygen -w html\n# header.html footer.html stylesheet.css YourConfigFile\" and then modify\n# that header. Note that the header is subject to change so you typically\n# have to redo this when upgrading to a newer version of doxygen or when\n# changing the value of configuration settings such as GENERATE_TREEVIEW!\n\nHTML_HEADER            =\n\n# The HTML_FOOTER tag can be used to specify a personal HTML footer for\n# each generated HTML page. If it is left blank doxygen will generate a\n# standard footer.\n\nHTML_FOOTER            =\n\n# The HTML_STYLESHEET tag can be used to specify a user-defined cascading\n# style sheet that is used by each HTML page. It can be used to\n# fine-tune the look of the HTML output. If the tag is left blank doxygen\n# will generate a default style sheet. Note that doxygen will try to copy\n# the style sheet file to the HTML output directory, so don't put your own\n# style sheet in the HTML output directory as well, or it will be erased!\n\nHTML_STYLESHEET        =\n\n# The HTML_EXTRA_FILES tag can be used to specify one or more extra images or\n# other source files which should be copied to the HTML output directory. Note\n# that these files will be copied to the base HTML output directory. Use the\n# $relpath$ marker in the HTML_HEADER and/or HTML_FOOTER files to load these\n# files. In the HTML_STYLESHEET file, use the file name only. Also note that\n# the files will be copied as-is; there are no commands or markers available.\n\nHTML_EXTRA_FILES       =\n\n# The HTML_COLORSTYLE_HUE tag controls the color of the HTML output.\n# Doxygen will adjust the colors in the style sheet and background images\n# according to this color. Hue is specified as an angle on a colorwheel,\n# see http://en.wikipedia.org/wiki/Hue for more information.\n# For instance the value 0 represents red, 60 is yellow, 120 is green,\n# 180 is cyan, 240 is blue, 300 purple, and 360 is red again.\n# The allowed range is 0 to 359.\n\nHTML_COLORSTYLE_HUE    = 220\n\n# The HTML_COLORSTYLE_SAT tag controls the purity (or saturation) of\n# the colors in the HTML output. For a value of 0 the output will use\n# grayscales only. A value of 255 will produce the most vivid colors.\n\nHTML_COLORSTYLE_SAT    = 100\n\n# The HTML_COLORSTYLE_GAMMA tag controls the gamma correction applied to\n# the luminance component of the colors in the HTML output. Values below\n# 100 gradually make the output lighter, whereas values above 100 make\n# the output darker. The value divided by 100 is the actual gamma applied,\n# so 80 represents a gamma of 0.8, The value 220 represents a gamma of 2.2,\n# and 100 does not change the gamma.\n\nHTML_COLORSTYLE_GAMMA  = 80\n\n# If the HTML_TIMESTAMP tag is set to YES then the footer of each generated HTML\n# page will contain the date and time when the page was generated. Setting\n# this to NO can help when comparing the output of multiple runs.\n\nHTML_TIMESTAMP         = YES\n\n# If the HTML_ALIGN_MEMBERS tag is set to YES, the members of classes,\n# files or namespaces will be aligned in HTML using tables. If set to\n# NO a bullet list will be used.\n\nHTML_ALIGN_MEMBERS     = YES\n\n# If the HTML_DYNAMIC_SECTIONS tag is set to YES then the generated HTML\n# documentation will contain sections that can be hidden and shown after the\n# page has loaded. For this to work a browser that supports\n# JavaScript and DHTML is required (for instance Mozilla 1.0+, Firefox\n# Netscape 6.0+, Internet explorer 5.0+, Konqueror, or Safari).\n\nHTML_DYNAMIC_SECTIONS  = NO\n\n# If the GENERATE_DOCSET tag is set to YES, additional index files\n# will be generated that can be used as input for Apple's Xcode 3\n# integrated development environment, introduced with OSX 10.5 (Leopard).\n# To create a documentation set, doxygen will generate a Makefile in the\n# HTML output directory. Running make will produce the docset in that\n# directory and running \"make install\" will install the docset in\n# ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find\n# it at startup.\n# See http://developer.apple.com/tools/creatingdocsetswithdoxygen.html\n# for more information.\n\nGENERATE_DOCSET        = NO\n\n# When GENERATE_DOCSET tag is set to YES, this tag determines the name of the\n# feed. A documentation feed provides an umbrella under which multiple\n# documentation sets from a single provider (such as a company or product suite)\n# can be grouped.\n\nDOCSET_FEEDNAME        = \"Doxygen generated docs\"\n\n# When GENERATE_DOCSET tag is set to YES, this tag specifies a string that\n# should uniquely identify the documentation set bundle. This should be a\n# reverse domain-name style string, e.g. com.mycompany.MyDocSet. Doxygen\n# will append .docset to the name.\n\nDOCSET_BUNDLE_ID       = org.doxygen.Project\n\n# When GENERATE_PUBLISHER_ID tag specifies a string that should uniquely identify\n# the documentation publisher. This should be a reverse domain-name style\n# string, e.g. com.mycompany.MyDocSet.documentation.\n\nDOCSET_PUBLISHER_ID    = org.doxygen.Publisher\n\n# The GENERATE_PUBLISHER_NAME tag identifies the documentation publisher.\n\nDOCSET_PUBLISHER_NAME  = Publisher\n\n# If the GENERATE_HTMLHELP tag is set to YES, additional index files\n# will be generated that can be used as input for tools like the\n# Microsoft HTML help workshop to generate a compiled HTML help file (.chm)\n# of the generated HTML documentation.\n\nGENERATE_HTMLHELP      = NO\n\n# If the GENERATE_HTMLHELP tag is set to YES, the CHM_FILE tag can\n# be used to specify the file name of the resulting .chm file. You\n# can add a path in front of the file if the result should not be\n# written to the html output directory.\n\nCHM_FILE               =\n\n# If the GENERATE_HTMLHELP tag is set to YES, the HHC_LOCATION tag can\n# be used to specify the location (absolute path including file name) of\n# the HTML help compiler (hhc.exe). If non-empty doxygen will try to run\n# the HTML help compiler on the generated index.hhp.\n\nHHC_LOCATION           =\n\n# If the GENERATE_HTMLHELP tag is set to YES, the GENERATE_CHI flag\n# controls if a separate .chi index file is generated (YES) or that\n# it should be included in the master .chm file (NO).\n\nGENERATE_CHI           = NO\n\n# If the GENERATE_HTMLHELP tag is set to YES, the CHM_INDEX_ENCODING\n# is used to encode HtmlHelp index (hhk), content (hhc) and project file\n# content.\n\nCHM_INDEX_ENCODING     =\n\n# If the GENERATE_HTMLHELP tag is set to YES, the BINARY_TOC flag\n# controls whether a binary table of contents is generated (YES) or a\n# normal table of contents (NO) in the .chm file.\n\nBINARY_TOC             = NO\n\n# The TOC_EXPAND flag can be set to YES to add extra items for group members\n# to the contents of the HTML help documentation and to the tree view.\n\nTOC_EXPAND             = NO\n\n# If the GENERATE_QHP tag is set to YES and both QHP_NAMESPACE and\n# QHP_VIRTUAL_FOLDER are set, an additional index file will be generated\n# that can be used as input for Qt's qhelpgenerator to generate a\n# Qt Compressed Help (.qch) of the generated HTML documentation.\n\nGENERATE_QHP           = NO\n\n# If the QHG_LOCATION tag is specified, the QCH_FILE tag can\n# be used to specify the file name of the resulting .qch file.\n# The path specified is relative to the HTML output folder.\n\nQCH_FILE               =\n\n# The QHP_NAMESPACE tag specifies the namespace to use when generating\n# Qt Help Project output. For more information please see\n# http://doc.trolltech.com/qthelpproject.html#namespace\n\nQHP_NAMESPACE          = org.doxygen.Project\n\n# The QHP_VIRTUAL_FOLDER tag specifies the namespace to use when generating\n# Qt Help Project output. For more information please see\n# http://doc.trolltech.com/qthelpproject.html#virtual-folders\n\nQHP_VIRTUAL_FOLDER     = doc\n\n# If QHP_CUST_FILTER_NAME is set, it specifies the name of a custom filter to\n# add. For more information please see\n# http://doc.trolltech.com/qthelpproject.html#custom-filters\n\nQHP_CUST_FILTER_NAME   =\n\n# The QHP_CUST_FILT_ATTRS tag specifies the list of the attributes of the\n# custom filter to add. For more information please see\n# <a href=\"http://doc.trolltech.com/qthelpproject.html#custom-filters\">\n# Qt Help Project / Custom Filters</a>.\n\nQHP_CUST_FILTER_ATTRS  =\n\n# The QHP_SECT_FILTER_ATTRS tag specifies the list of the attributes this\n# project's\n# filter section matches.\n# <a href=\"http://doc.trolltech.com/qthelpproject.html#filter-attributes\">\n# Qt Help Project / Filter Attributes</a>.\n\nQHP_SECT_FILTER_ATTRS  =\n\n# If the GENERATE_QHP tag is set to YES, the QHG_LOCATION tag can\n# be used to specify the location of Qt's qhelpgenerator.\n# If non-empty doxygen will try to run qhelpgenerator on the generated\n# .qhp file.\n\nQHG_LOCATION           =\n\n# If the GENERATE_ECLIPSEHELP tag is set to YES, additional index files\n#  will be generated, which together with the HTML files, form an Eclipse help\n# plugin. To install this plugin and make it available under the help contents\n# menu in Eclipse, the contents of the directory containing the HTML and XML\n# files needs to be copied into the plugins directory of eclipse. The name of\n# the directory within the plugins directory should be the same as\n# the ECLIPSE_DOC_ID value. After copying Eclipse needs to be restarted before\n# the help appears.\n\nGENERATE_ECLIPSEHELP   = NO\n\n# A unique identifier for the eclipse help plugin. When installing the plugin\n# the directory name containing the HTML and XML files should also have\n# this name.\n\nECLIPSE_DOC_ID         = org.doxygen.Project\n\n# The DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs)\n# at top of each HTML page. The value NO (the default) enables the index and\n# the value YES disables it. Since the tabs have the same information as the\n# navigation tree you can set this option to NO if you already set\n# GENERATE_TREEVIEW to YES.\n\nDISABLE_INDEX          = NO\n\n# The GENERATE_TREEVIEW tag is used to specify whether a tree-like index\n# structure should be generated to display hierarchical information.\n# If the tag value is set to YES, a side panel will be generated\n# containing a tree-like index structure (just like the one that\n# is generated for HTML Help). For this to work a browser that supports\n# JavaScript, DHTML, CSS and frames is required (i.e. any modern browser).\n# Windows users are probably better off using the HTML help feature.\n# Since the tree basically has the same information as the tab index you\n# could consider to set DISABLE_INDEX to NO when enabling this option.\n\nGENERATE_TREEVIEW      = NO\n\n# The ENUM_VALUES_PER_LINE tag can be used to set the number of enum values\n# (range [0,1..20]) that doxygen will group on one line in the generated HTML\n# documentation. Note that a value of 0 will completely suppress the enum\n# values from appearing in the overview section.\n\nENUM_VALUES_PER_LINE   = 4\n\n# By enabling USE_INLINE_TREES, doxygen will generate the Groups, Directories,\n# and Class Hierarchy pages using a tree view instead of an ordered list.\n\nUSE_INLINE_TREES       = NO\n\n# If the treeview is enabled (see GENERATE_TREEVIEW) then this tag can be\n# used to set the initial width (in pixels) of the frame in which the tree\n# is shown.\n\nTREEVIEW_WIDTH         = 250\n\n# When the EXT_LINKS_IN_WINDOW option is set to YES doxygen will open\n# links to external symbols imported via tag files in a separate window.\n\nEXT_LINKS_IN_WINDOW    = NO\n\n# Use this tag to change the font size of Latex formulas included\n# as images in the HTML documentation. The default is 10. Note that\n# when you change the font size after a successful doxygen run you need\n# to manually remove any form_*.png images from the HTML output directory\n# to force them to be regenerated.\n\nFORMULA_FONTSIZE       = 10\n\n# Use the FORMULA_TRANPARENT tag to determine whether or not the images\n# generated for formulas are transparent PNGs. Transparent PNGs are\n# not supported properly for IE 6.0, but are supported on all modern browsers.\n# Note that when changing this option you need to delete any form_*.png files\n# in the HTML output before the changes have effect.\n\nFORMULA_TRANSPARENT    = YES\n\n# Enable the USE_MATHJAX option to render LaTeX formulas using MathJax\n# (see http://www.mathjax.org) which uses client side Javascript for the\n# rendering instead of using prerendered bitmaps. Use this if you do not\n# have LaTeX installed or if you want to formulas look prettier in the HTML\n# output. When enabled you also need to install MathJax separately and\n# configure the path to it using the MATHJAX_RELPATH option.\n\nUSE_MATHJAX            = NO\n\n# When MathJax is enabled you need to specify the location relative to the\n# HTML output directory using the MATHJAX_RELPATH option. The destination\n# directory should contain the MathJax.js script. For instance, if the mathjax\n# directory is located at the same level as the HTML output directory, then\n# MATHJAX_RELPATH should be ../mathjax. The default value points to the\n# mathjax.org site, so you can quickly see the result without installing\n# MathJax, but it is strongly recommended to install a local copy of MathJax\n# before deployment.\n\nMATHJAX_RELPATH        = http://www.mathjax.org/mathjax\n\n# The MATHJAX_EXTENSIONS tag can be used to specify one or MathJax extension\n# names that should be enabled during MathJax rendering.\n\nMATHJAX_EXTENSIONS     =\n\n# When the SEARCHENGINE tag is enabled doxygen will generate a search box\n# for the HTML output. The underlying search engine uses javascript\n# and DHTML and should work on any modern browser. Note that when using\n# HTML help (GENERATE_HTMLHELP), Qt help (GENERATE_QHP), or docsets\n# (GENERATE_DOCSET) there is already a search function so this one should\n# typically be disabled. For large projects the javascript based search engine\n# can be slow, then enabling SERVER_BASED_SEARCH may provide a better solution.\n\nSEARCHENGINE           = YES\n\n# When the SERVER_BASED_SEARCH tag is enabled the search engine will be\n# implemented using a PHP enabled web server instead of at the web client\n# using Javascript. Doxygen will generate the search PHP script and index\n# file to put on the web server. The advantage of the server\n# based approach is that it scales better to large projects and allows\n# full text search. The disadvantages are that it is more difficult to setup\n# and does not have live searching capabilities.\n\nSERVER_BASED_SEARCH    = NO\n\n#---------------------------------------------------------------------------\n# configuration options related to the LaTeX output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_LATEX tag is set to YES (the default) Doxygen will\n# generate Latex output.\n\nGENERATE_LATEX         = NO\n\n# The LATEX_OUTPUT tag is used to specify where the LaTeX docs will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `latex' will be used as the default path.\n\nLATEX_OUTPUT           = latex\n\n# The LATEX_CMD_NAME tag can be used to specify the LaTeX command name to be\n# invoked. If left blank `latex' will be used as the default command name.\n# Note that when enabling USE_PDFLATEX this option is only used for\n# generating bitmaps for formulas in the HTML output, but not in the\n# Makefile that is written to the output directory.\n\nLATEX_CMD_NAME         = latex\n\n# The MAKEINDEX_CMD_NAME tag can be used to specify the command name to\n# generate index for LaTeX. If left blank `makeindex' will be used as the\n# default command name.\n\nMAKEINDEX_CMD_NAME     = makeindex\n\n# If the COMPACT_LATEX tag is set to YES Doxygen generates more compact\n# LaTeX documents. This may be useful for small projects and may help to\n# save some trees in general.\n\nCOMPACT_LATEX          = NO\n\n# The PAPER_TYPE tag can be used to set the paper type that is used\n# by the printer. Possible values are: a4, letter, legal and\n# executive. If left blank a4wide will be used.\n\nPAPER_TYPE             = a4\n\n# The EXTRA_PACKAGES tag can be to specify one or more names of LaTeX\n# packages that should be included in the LaTeX output.\n\nEXTRA_PACKAGES         =\n\n# The LATEX_HEADER tag can be used to specify a personal LaTeX header for\n# the generated latex document. The header should contain everything until\n# the first chapter. If it is left blank doxygen will generate a\n# standard header. Notice: only use this tag if you know what you are doing!\n\nLATEX_HEADER           =\n\n# The LATEX_FOOTER tag can be used to specify a personal LaTeX footer for\n# the generated latex document. The footer should contain everything after\n# the last chapter. If it is left blank doxygen will generate a\n# standard footer. Notice: only use this tag if you know what you are doing!\n\nLATEX_FOOTER           =\n\n# If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated\n# is prepared for conversion to pdf (using ps2pdf). The pdf file will\n# contain links (just like the HTML output) instead of page references\n# This makes the output suitable for online browsing using a pdf viewer.\n\nPDF_HYPERLINKS         = YES\n\n# If the USE_PDFLATEX tag is set to YES, pdflatex will be used instead of\n# plain latex in the generated Makefile. Set this option to YES to get a\n# higher quality PDF documentation.\n\nUSE_PDFLATEX           = YES\n\n# If the LATEX_BATCHMODE tag is set to YES, doxygen will add the \\\\batchmode.\n# command to the generated LaTeX files. This will instruct LaTeX to keep\n# running if errors occur, instead of asking the user for help.\n# This option is also used when generating formulas in HTML.\n\nLATEX_BATCHMODE        = NO\n\n# If LATEX_HIDE_INDICES is set to YES then doxygen will not\n# include the index chapters (such as File Index, Compound Index, etc.)\n# in the output.\n\nLATEX_HIDE_INDICES     = NO\n\n# If LATEX_SOURCE_CODE is set to YES then doxygen will include\n# source code with syntax highlighting in the LaTeX output.\n# Note that which sources are shown also depends on other settings\n# such as SOURCE_BROWSER.\n\nLATEX_SOURCE_CODE      = NO\n\n# The LATEX_BIB_STYLE tag can be used to specify the style to use for the\n# bibliography, e.g. plainnat, or ieeetr. The default style is \"plain\". See\n# http://en.wikipedia.org/wiki/BibTeX for more info.\n\nLATEX_BIB_STYLE        = plain\n\n#---------------------------------------------------------------------------\n# configuration options related to the RTF output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_RTF tag is set to YES Doxygen will generate RTF output\n# The RTF output is optimized for Word 97 and may not look very pretty with\n# other RTF readers or editors.\n\nGENERATE_RTF           = NO\n\n# The RTF_OUTPUT tag is used to specify where the RTF docs will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `rtf' will be used as the default path.\n\nRTF_OUTPUT             = rtf\n\n# If the COMPACT_RTF tag is set to YES Doxygen generates more compact\n# RTF documents. This may be useful for small projects and may help to\n# save some trees in general.\n\nCOMPACT_RTF            = NO\n\n# If the RTF_HYPERLINKS tag is set to YES, the RTF that is generated\n# will contain hyperlink fields. The RTF file will\n# contain links (just like the HTML output) instead of page references.\n# This makes the output suitable for online browsing using WORD or other\n# programs which support those fields.\n# Note: wordpad (write) and others do not support links.\n\nRTF_HYPERLINKS         = NO\n\n# Load style sheet definitions from file. Syntax is similar to doxygen's\n# config file, i.e. a series of assignments. You only have to provide\n# replacements, missing definitions are set to their default value.\n\nRTF_STYLESHEET_FILE    =\n\n# Set optional variables used in the generation of an rtf document.\n# Syntax is similar to doxygen's config file.\n\nRTF_EXTENSIONS_FILE    =\n\n#---------------------------------------------------------------------------\n# configuration options related to the man page output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_MAN tag is set to YES (the default) Doxygen will\n# generate man pages\n\nGENERATE_MAN           = NO\n\n# The MAN_OUTPUT tag is used to specify where the man pages will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `man' will be used as the default path.\n\nMAN_OUTPUT             = man\n\n# The MAN_EXTENSION tag determines the extension that is added to\n# the generated man pages (default is the subroutine's section .3)\n\nMAN_EXTENSION          = .3\n\n# If the MAN_LINKS tag is set to YES and Doxygen generates man output,\n# then it will generate one additional man file for each entity\n# documented in the real man page(s). These additional files\n# only source the real man page, but without them the man command\n# would be unable to find the correct page. The default is NO.\n\nMAN_LINKS              = NO\n\n#---------------------------------------------------------------------------\n# configuration options related to the XML output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_XML tag is set to YES Doxygen will\n# generate an XML file that captures the structure of\n# the code including all documentation.\n\nGENERATE_XML           = NO\n\n# The XML_OUTPUT tag is used to specify where the XML pages will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be\n# put in front of it. If left blank `xml' will be used as the default path.\n\nXML_OUTPUT             = xml\n\n# The XML_SCHEMA tag can be used to specify an XML schema,\n# which can be used by a validating XML parser to check the\n# syntax of the XML files.\n\nXML_SCHEMA             =\n\n# The XML_DTD tag can be used to specify an XML DTD,\n# which can be used by a validating XML parser to check the\n# syntax of the XML files.\n\nXML_DTD                =\n\n# If the XML_PROGRAMLISTING tag is set to YES Doxygen will\n# dump the program listings (including syntax highlighting\n# and cross-referencing information) to the XML output. Note that\n# enabling this will significantly increase the size of the XML output.\n\nXML_PROGRAMLISTING     = YES\n\n#---------------------------------------------------------------------------\n# configuration options for the AutoGen Definitions output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_AUTOGEN_DEF tag is set to YES Doxygen will\n# generate an AutoGen Definitions (see autogen.sf.net) file\n# that captures the structure of the code including all\n# documentation. Note that this feature is still experimental\n# and incomplete at the moment.\n\nGENERATE_AUTOGEN_DEF   = NO\n\n#---------------------------------------------------------------------------\n# configuration options related to the Perl module output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_PERLMOD tag is set to YES Doxygen will\n# generate a Perl module file that captures the structure of\n# the code including all documentation. Note that this\n# feature is still experimental and incomplete at the\n# moment.\n\nGENERATE_PERLMOD       = NO\n\n# If the PERLMOD_LATEX tag is set to YES Doxygen will generate\n# the necessary Makefile rules, Perl scripts and LaTeX code to be able\n# to generate PDF and DVI output from the Perl module output.\n\nPERLMOD_LATEX          = NO\n\n# If the PERLMOD_PRETTY tag is set to YES the Perl module output will be\n# nicely formatted so it can be parsed by a human reader.\n# This is useful\n# if you want to understand what is going on.\n# On the other hand, if this\n# tag is set to NO the size of the Perl module output will be much smaller\n# and Perl will parse it just the same.\n\nPERLMOD_PRETTY         = YES\n\n# The names of the make variables in the generated doxyrules.make file\n# are prefixed with the string contained in PERLMOD_MAKEVAR_PREFIX.\n# This is useful so different doxyrules.make files included by the same\n# Makefile don't overwrite each other's variables.\n\nPERLMOD_MAKEVAR_PREFIX =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the preprocessor\n#---------------------------------------------------------------------------\n\n# If the ENABLE_PREPROCESSING tag is set to YES (the default) Doxygen will\n# evaluate all C-preprocessor directives found in the sources and include\n# files.\n\nENABLE_PREPROCESSING   = YES\n\n# If the MACRO_EXPANSION tag is set to YES Doxygen will expand all macro\n# names in the source code. If set to NO (the default) only conditional\n# compilation will be performed. Macro expansion can be done in a controlled\n# way by setting EXPAND_ONLY_PREDEF to YES.\n\nMACRO_EXPANSION        = NO\n\n# If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES\n# then the macro expansion is limited to the macros specified with the\n# PREDEFINED and EXPAND_AS_DEFINED tags.\n\nEXPAND_ONLY_PREDEF     = NO\n\n# If the SEARCH_INCLUDES tag is set to YES (the default) the includes files\n# pointed to by INCLUDE_PATH will be searched when a #include is found.\n\nSEARCH_INCLUDES        = YES\n\n# The INCLUDE_PATH tag can be used to specify one or more directories that\n# contain include files that are not input files but should be processed by\n# the preprocessor.\n\nINCLUDE_PATH           =\n\n# You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard\n# patterns (like *.h and *.hpp) to filter out the header-files in the\n# directories. If left blank, the patterns specified with FILE_PATTERNS will\n# be used.\n\nINCLUDE_FILE_PATTERNS  =\n\n# The PREDEFINED tag can be used to specify one or more macro names that\n# are defined before the preprocessor is started (similar to the -D option of\n# gcc). The argument of the tag is a list of macros of the form: name\n# or name=definition (no spaces). If the definition and the = are\n# omitted =1 is assumed. To prevent a macro definition from being\n# undefined via #undef or recursively expanded use the := operator\n# instead of the = operator.\n\nPREDEFINED             =\n\n# If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then\n# this tag can be used to specify a list of macro names that should be expanded.\n# The macro definition that is found in the sources will be used.\n# Use the PREDEFINED tag if you want to use a different macro definition that\n# overrules the definition found in the source code.\n\nEXPAND_AS_DEFINED      =\n\n# If the SKIP_FUNCTION_MACROS tag is set to YES (the default) then\n# doxygen's preprocessor will remove all references to function-like macros\n# that are alone on a line, have an all uppercase name, and do not end with a\n# semicolon, because these will confuse the parser if not removed.\n\nSKIP_FUNCTION_MACROS   = YES\n\n#---------------------------------------------------------------------------\n# Configuration::additions related to external references\n#---------------------------------------------------------------------------\n\n# The TAGFILES option can be used to specify one or more tagfiles.\n# Optionally an initial location of the external documentation\n# can be added for each tagfile. The format of a tag file without\n# this location is as follows:\n#\n# TAGFILES = file1 file2 ...\n# Adding location for the tag files is done as follows:\n#\n# TAGFILES = file1=loc1 \"file2 = loc2\" ...\n# where \"loc1\" and \"loc2\" can be relative or absolute paths or\n# URLs. If a location is present for each tag, the installdox tool\n# does not have to be run to correct the links.\n# Note that each tag file must have a unique name\n# (where the name does NOT include the path)\n# If a tag file is not located in the directory in which doxygen\n# is run, you must also specify the path to the tagfile here.\n\nTAGFILES               =\n\n# When a file name is specified after GENERATE_TAGFILE, doxygen will create\n# a tag file that is based on the input files it reads.\n\nGENERATE_TAGFILE       =\n\n# If the ALLEXTERNALS tag is set to YES all external classes will be listed\n# in the class index. If set to NO only the inherited external classes\n# will be listed.\n\nALLEXTERNALS           = NO\n\n# If the EXTERNAL_GROUPS tag is set to YES all external groups will be listed\n# in the modules index. If set to NO, only the current project's groups will\n# be listed.\n\nEXTERNAL_GROUPS        = YES\n\n# The PERL_PATH should be the absolute path and name of the perl script\n# interpreter (i.e. the result of `which perl').\n\nPERL_PATH              = /usr/bin/perl\n\n#---------------------------------------------------------------------------\n# Configuration options related to the dot tool\n#---------------------------------------------------------------------------\n\n# If the CLASS_DIAGRAMS tag is set to YES (the default) Doxygen will\n# generate a inheritance diagram (in HTML, RTF and LaTeX) for classes with base\n# or super classes. Setting the tag to NO turns the diagrams off. Note that\n# this option also works with HAVE_DOT disabled, but it is recommended to\n# install and use dot, since it yields more powerful graphs.\n\nCLASS_DIAGRAMS         = YES\n\n# You can define message sequence charts within doxygen comments using the \\msc\n# command. Doxygen will then run the mscgen tool (see\n# http://www.mcternan.me.uk/mscgen/) to produce the chart and insert it in the\n# documentation. The MSCGEN_PATH tag allows you to specify the directory where\n# the mscgen tool resides. If left empty the tool is assumed to be found in the\n# default search path.\n\nMSCGEN_PATH            =\n\n# If set to YES, the inheritance and collaboration graphs will hide\n# inheritance and usage relations if the target is undocumented\n# or is not a class.\n\nHIDE_UNDOC_RELATIONS   = YES\n\n# If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is\n# available from the path. This tool is part of Graphviz, a graph visualization\n# toolkit from AT&T and Lucent Bell Labs. The other options in this section\n# have no effect if this option is set to NO (the default)\n\nHAVE_DOT               = NO\n\n# The DOT_NUM_THREADS specifies the number of dot invocations doxygen is\n# allowed to run in parallel. When set to 0 (the default) doxygen will\n# base this on the number of processors available in the system. You can set it\n# explicitly to a value larger than 0 to get control over the balance\n# between CPU load and processing speed.\n\nDOT_NUM_THREADS        = 0\n\n# By default doxygen will use the Helvetica font for all dot files that\n# doxygen generates. When you want a differently looking font you can specify\n# the font name using DOT_FONTNAME. You need to make sure dot is able to find\n# the font, which can be done by putting it in a standard location or by setting\n# the DOTFONTPATH environment variable or by setting DOT_FONTPATH to the\n# directory containing the font.\n\nDOT_FONTNAME           = Helvetica\n\n# The DOT_FONTSIZE tag can be used to set the size of the font of dot graphs.\n# The default size is 10pt.\n\nDOT_FONTSIZE           = 10\n\n# By default doxygen will tell dot to use the Helvetica font.\n# If you specify a different font using DOT_FONTNAME you can use DOT_FONTPATH to\n# set the path where dot can find it.\n\nDOT_FONTPATH           =\n\n# If the CLASS_GRAPH and HAVE_DOT tags are set to YES then doxygen\n# will generate a graph for each documented class showing the direct and\n# indirect inheritance relations. Setting this tag to YES will force the\n# CLASS_DIAGRAMS tag to NO.\n\nCLASS_GRAPH            = YES\n\n# If the COLLABORATION_GRAPH and HAVE_DOT tags are set to YES then doxygen\n# will generate a graph for each documented class showing the direct and\n# indirect implementation dependencies (inheritance, containment, and\n# class references variables) of the class with other documented classes.\n\nCOLLABORATION_GRAPH    = YES\n\n# If the GROUP_GRAPHS and HAVE_DOT tags are set to YES then doxygen\n# will generate a graph for groups, showing the direct groups dependencies\n\nGROUP_GRAPHS           = YES\n\n# If the UML_LOOK tag is set to YES doxygen will generate inheritance and\n# collaboration diagrams in a style similar to the OMG's Unified Modeling\n# Language.\n\nUML_LOOK               = NO\n\n# If set to YES, the inheritance and collaboration graphs will show the\n# relations between templates and their instances.\n\nTEMPLATE_RELATIONS     = NO\n\n# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDE_GRAPH, and HAVE_DOT\n# tags are set to YES then doxygen will generate a graph for each documented\n# file showing the direct and indirect include dependencies of the file with\n# other documented files.\n\nINCLUDE_GRAPH          = YES\n\n# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDED_BY_GRAPH, and\n# HAVE_DOT tags are set to YES then doxygen will generate a graph for each\n# documented header file showing the documented files that directly or\n# indirectly include this file.\n\nINCLUDED_BY_GRAPH      = YES\n\n# If the CALL_GRAPH and HAVE_DOT options are set to YES then\n# doxygen will generate a call dependency graph for every global function\n# or class method. Note that enabling this option will significantly increase\n# the time of a run. So in most cases it will be better to enable call graphs\n# for selected functions only using the \\callgraph command.\n\nCALL_GRAPH             = NO\n\n# If the CALLER_GRAPH and HAVE_DOT tags are set to YES then\n# doxygen will generate a caller dependency graph for every global function\n# or class method. Note that enabling this option will significantly increase\n# the time of a run. So in most cases it will be better to enable caller\n# graphs for selected functions only using the \\callergraph command.\n\nCALLER_GRAPH           = NO\n\n# If the GRAPHICAL_HIERARCHY and HAVE_DOT tags are set to YES then doxygen\n# will generate a graphical hierarchy of all classes instead of a textual one.\n\nGRAPHICAL_HIERARCHY    = YES\n\n# If the DIRECTORY_GRAPH, SHOW_DIRECTORIES and HAVE_DOT tags are set to YES\n# then doxygen will show the dependencies a directory has on other directories\n# in a graphical way. The dependency relations are determined by the #include\n# relations between the files in the directories.\n\nDIRECTORY_GRAPH        = YES\n\n# The DOT_IMAGE_FORMAT tag can be used to set the image format of the images\n# generated by dot. Possible values are svg, png, jpg, or gif.\n# If left blank png will be used. If you choose svg you need to set\n# HTML_FILE_EXTENSION to xhtml in order to make the SVG files\n# visible in IE 9+ (other browsers do not have this requirement).\n\nDOT_IMAGE_FORMAT       = png\n\n# If DOT_IMAGE_FORMAT is set to svg, then this option can be set to YES to\n# enable generation of interactive SVG images that allow zooming and panning.\n# Note that this requires a modern browser other than Internet Explorer.\n# Tested and working are Firefox, Chrome, Safari, and Opera. For IE 9+ you\n# need to set HTML_FILE_EXTENSION to xhtml in order to make the SVG files\n# visible. Older versions of IE do not have SVG support.\n\nINTERACTIVE_SVG        = NO\n\n# The tag DOT_PATH can be used to specify the path where the dot tool can be\n# found. If left blank, it is assumed the dot tool can be found in the path.\n\nDOT_PATH               =\n\n# The DOTFILE_DIRS tag can be used to specify one or more directories that\n# contain dot files that are included in the documentation (see the\n# \\dotfile command).\n\nDOTFILE_DIRS           =\n\n# The MSCFILE_DIRS tag can be used to specify one or more directories that\n# contain msc files that are included in the documentation (see the\n# \\mscfile command).\n\nMSCFILE_DIRS           =\n\n# The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of\n# nodes that will be shown in the graph. If the number of nodes in a graph\n# becomes larger than this value, doxygen will truncate the graph, which is\n# visualized by representing a node as a red box. Note that doxygen if the\n# number of direct children of the root node in a graph is already larger than\n# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note\n# that the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.\n\nDOT_GRAPH_MAX_NODES    = 50\n\n# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the\n# graphs generated by dot. A depth value of 3 means that only nodes reachable\n# from the root by following a path via at most 3 edges will be shown. Nodes\n# that lay further from the root node will be omitted. Note that setting this\n# option to 1 or 2 may greatly reduce the computation time needed for large\n# code bases. Also note that the size of a graph can be further restricted by\n# DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.\n\nMAX_DOT_GRAPH_DEPTH    = 0\n\n# Set the DOT_TRANSPARENT tag to YES to generate images with a transparent\n# background. This is disabled by default, because dot on Windows does not\n# seem to support this out of the box. Warning: Depending on the platform used,\n# enabling this option may lead to badly anti-aliased labels on the edges of\n# a graph (i.e. they become hard to read).\n\nDOT_TRANSPARENT        = NO\n\n# Set the DOT_MULTI_TARGETS tag to YES allow dot to generate multiple output\n# files in one run (i.e. multiple -o and -T options on the command line). This\n# makes dot run faster, but since only newer versions of dot (>1.8.10)\n# support this, this feature is disabled by default.\n\nDOT_MULTI_TARGETS      = YES\n\n# If the GENERATE_LEGEND tag is set to YES (the default) Doxygen will\n# generate a legend page explaining the meaning of the various boxes and\n# arrows in the dot generated graphs.\n\nGENERATE_LEGEND        = YES\n\n# If the DOT_CLEANUP tag is set to YES (the default) Doxygen will\n# remove the intermediate dot files that are used to generate\n# the various graphs.\n\nDOT_CLEANUP            = YES\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 16.5068359375,
          "content": "All files in this package are Copyright 2019 Gordon Williams, Pur3 Ltd unless\notherwise noted.\n\n-------------------------------------------------------------------------------\n\nMozilla Public License Version 2.0\n==================================\n\n1. Definitions\n--------------\n\n1.1. \"Contributor\"\n    means each individual or legal entity that creates, contributes to\n    the creation of, or owns Covered Software.\n\n1.2. \"Contributor Version\"\n    means the combination of the Contributions of others (if any) used\n    by a Contributor and that particular Contributor's Contribution.\n\n1.3. \"Contribution\"\n    means Covered Software of a particular Contributor.\n\n1.4. \"Covered Software\"\n    means Source Code Form to which the initial Contributor has attached\n    the notice in Exhibit A, the Executable Form of such Source Code\n    Form, and Modifications of such Source Code Form, in each case\n    including portions thereof.\n\n1.5. \"Incompatible With Secondary Licenses\"\n    means\n\n    (a) that the initial Contributor has attached the notice described\n        in Exhibit B to the Covered Software; or\n\n    (b) that the Covered Software was made available under the terms of\n        version 1.1 or earlier of the License, but not also under the\n        terms of a Secondary License.\n\n1.6. \"Executable Form\"\n    means any form of the work other than Source Code Form.\n\n1.7. \"Larger Work\"\n    means a work that combines Covered Software with other material, in \n    a separate file or files, that is not Covered Software.\n\n1.8. \"License\"\n    means this document.\n\n1.9. \"Licensable\"\n    means having the right to grant, to the maximum extent possible,\n    whether at the time of the initial grant or subsequently, any and\n    all of the rights conveyed by this License.\n\n1.10. \"Modifications\"\n    means any of the following:\n\n    (a) any file in Source Code Form that results from an addition to,\n        deletion from, or modification of the contents of Covered\n        Software; or\n\n    (b) any new file in Source Code Form that contains any Covered\n        Software.\n\n1.11. \"Patent Claims\" of a Contributor\n    means any patent claim(s), including without limitation, method,\n    process, and apparatus claims, in any patent Licensable by such\n    Contributor that would be infringed, but for the grant of the\n    License, by the making, using, selling, offering for sale, having\n    made, import, or transfer of either its Contributions or its\n    Contributor Version.\n\n1.12. \"Secondary License\"\n    means either the GNU General Public License, Version 2.0, the GNU\n    Lesser General Public License, Version 2.1, the GNU Affero General\n    Public License, Version 3.0, or any later versions of those\n    licenses.\n\n1.13. \"Source Code Form\"\n    means the form of the work preferred for making modifications.\n\n1.14. \"You\" (or \"Your\")\n    means an individual or a legal entity exercising rights under this\n    License. For legal entities, \"You\" includes any entity that\n    controls, is controlled by, or is under common control with You. For\n    purposes of this definition, \"control\" means (a) the power, direct\n    or indirect, to cause the direction or management of such entity,\n    whether by contract or otherwise, or (b) ownership of more than\n    fifty percent (50%) of the outstanding shares or beneficial\n    ownership of such entity.\n\n2. License Grants and Conditions\n--------------------------------\n\n2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\n\n(a) under intellectual property rights (other than patent or trademark)\n    Licensable by such Contributor to use, reproduce, make available,\n    modify, display, perform, distribute, and otherwise exploit its\n    Contributions, either on an unmodified basis, with Modifications, or\n    as part of a Larger Work; and\n\n(b) under Patent Claims of such Contributor to make, use, sell, offer\n    for sale, have made, import, and otherwise transfer either its\n    Contributions or its Contributor Version.\n\n2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n\n2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:\n\n(a) for any code that a Contributor has removed from Covered Software;\n    or\n\n(b) for infringements caused by: (i) Your and any other third party's\n    modifications of Covered Software, or (ii) the combination of its\n    Contributions with other software (except as part of its Contributor\n    Version); or\n\n(c) under Patent Claims infringed by Covered Software in the absence of\n    its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n\n2.5. Representation\n\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n\n2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.\n\n3. Responsibilities\n-------------------\n\n3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.\n\n3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\n(a) such Covered Software must also be made available in Source Code\n    Form, as described in Section 3.1, and You must inform recipients of\n    the Executable Form how they can obtain a copy of such Source Code\n    Form by reasonable means in a timely manner, at a charge no more\n    than the cost of distribution to the recipient; and\n\n(b) You may distribute such Executable Form under the terms of this\n    License, or sublicense it under different terms, provided that the\n    license for the Executable Form does not attempt to limit or alter\n    the recipients' rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).\n\n3.4. Notices\n\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n---------------------------------------------------\n\nIf it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: (a) comply with\nthe terms of this License to the maximum extent possible; and (b)\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.\n\n5. Termination\n--------------\n\n5.1. The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated (a) provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and (b) on an\nongoing basis, if such Contributor fails to notify You of the\nnon-compliance by some reasonable means prior to 60 days after You have\ncome back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.\n\n5.2. If You initiate litigation against any entity by asserting a patent\ninfringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.\n\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.\n\n************************************************************************\n*                                                                      *\n*  6. Disclaimer of Warranty                                           *\n*  -------------------------                                           *\n*                                                                      *\n*  Covered Software is provided under this License on an \"as is\"       *\n*  basis, without warranty of any kind, either expressed, implied, or  *\n*  statutory, including, without limitation, warranties that the       *\n*  Covered Software is free of defects, merchantable, fit for a        *\n*  particular purpose or non-infringing. The entire risk as to the     *\n*  quality and performance of the Covered Software is with You.        *\n*  Should any Covered Software prove defective in any respect, You     *\n*  (not any Contributor) assume the cost of any necessary servicing,   *\n*  repair, or correction. This disclaimer of warranty constitutes an   *\n*  essential part of this License. No use of any Covered Software is   *\n*  authorized under this License except under this disclaimer.         *\n*                                                                      *\n************************************************************************\n\n************************************************************************\n*                                                                      *\n*  7. Limitation of Liability                                          *\n*  --------------------------                                          *\n*                                                                      *\n*  Under no circumstances and under no legal theory, whether tort      *\n*  (including negligence), contract, or otherwise, shall any           *\n*  Contributor, or anyone who distributes Covered Software as          *\n*  permitted above, be liable to You for any direct, indirect,         *\n*  special, incidental, or consequential damages of any character      *\n*  including, without limitation, damages for lost profits, loss of    *\n*  goodwill, work stoppage, computer failure or malfunction, or any    *\n*  and all other commercial damages or losses, even if such party      *\n*  shall have been informed of the possibility of such damages. This   *\n*  limitation of liability shall not apply to liability for death or   *\n*  personal injury resulting from such party's negligence to the       *\n*  extent applicable law prohibits such limitation. Some               *\n*  jurisdictions do not allow the exclusion or limitation of           *\n*  incidental or consequential damages, so this exclusion and          *\n*  limitation may not apply to You.                                    *\n*                                                                      *\n************************************************************************\n\n8. Litigation\n-------------\n\nAny litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party's ability to bring\ncross-claims or counter-claims.\n\n9. Miscellaneous\n----------------\n\nThis License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.\n\n10. Versions of the License\n---------------------------\n\n10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section\n10.3, no one other than the license steward has the right to modify or\npublish new versions of this License. Each version will be given a\ndistinguishing version number.\n\n10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version\nof the License under which You originally received the Covered Software,\nor under the terms of any subsequent version published by the license\nsteward.\n\n10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary\nLicenses\n\nIf You choose to distribute Source Code Form that is Incompatible With\nSecondary Licenses under the terms of this version of the License, the\nnotice described in Exhibit B of this License must be attached.\n\nExhibit A - Source Code Form License Notice\n-------------------------------------------\n\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular\nfile, then You may include the notice in a location (such as a LICENSE\nfile in a relevant directory) where a recipient would be likely to look\nfor such a notice.\n\nYou may add additional accurate notices of copyright ownership.\n\nExhibit B - \"Incompatible With Secondary Licenses\" Notice\n---------------------------------------------------------\n\n  This Source Code Form is \"Incompatible With Secondary Licenses\", as\n  defined by the Mozilla Public License, v. 2.0.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 29.421875,
          "content": "# This file is part of Espruino, a JavaScript interpreter for Microcontrollers\n#\n# Copyright (C) 2013 Gordon Williams <gw@pur3.co.uk>\n# Copyright (C) 2014 Alain SÃ©zille for NucleoF401RE, NucleoF411RE specific lines of this file\n#\n# This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\n#\n# -----------------------------------------------------------------------------\n# Makefile for Espruino\n# -----------------------------------------------------------------------------\n# Set the BOARD environment variable to one of the names of the .py file in\n# the `boards` directory. Eg. PICO, PUCKJS, ESPRUINOWIFI, etc\n#\n# make               # make whatever the default binary is\n# make flash         # Try and flash using the platform's normal flash tool\n# make serialflash   # flash over USB serial bootloader (STM32)\n# make lst           # Make listing files\n# make boardjson     # JSON file for a board\n# make docs          # Reference HTML for a board\n# make varsonly      # Dump Makefile vars - good for debugging\n# make wrappersources # Show the WRAPPERSOURCES - list of C files that contain functions to load into Espruino environment\n#\n# Also:\n#\n# DEBUG=1                 # add debug symbols (-g)\n# RELEASE=1               # Force release-style compile (no asserts, etc)\n# SINGLETHREAD=1          # Compile single-threaded to make compilation errors easier to find\n# BOOTLOADER=1            # make the bootloader (not Espruino)\n# PROFILE=1               # Compile with gprof profiling info\n# CFILE=test.c            # Compile in the supplied C file\n# CPPFILE=test.cpp        # Compile in the supplied C++ file\n# ESPRUINO_WRAPPERSOURCES=jswrap_x.c\n#                         # Compile in a wrapper file to the build (with JS functions in). WRAPPERSOURCES can be used too, but this adds the files to the END of the sources list\n# PYTHON=python3          # The python command used for this build\n#\n# WIZNET=1                # If compiling for a non-linux target that has internet support, use WIZnet W5500 support\n# W5100=1                 # Compile for WIZnet W5100 (not W5500)\n# CC3000=1                # If compiling for a non-linux target that has internet support, use CC3000 support\n# USB_PRODUCT_ID=0x1234   # force a specific USB Product ID (default 0x5740)\n#\n# GENDIR=MyGenDir\t\t      # sets directory for intermediate files generated during make\n# OBJDIR=MyObjDir\t\t      # sets directory for object files generated during make\n# BINDIR=MyBinDir    \t\t  # sets directory for binaries generated during make\n# SETDEFINES=FileDefines  # settings which are called after definitions for board are done\n#                         # SETDEFINES=/home/mydir/myDefines\n# UNSUPPORTEDMAKE=FileUnsu# Adds additional files from unsupported sources(means not supported by Gordon) to actual make\n#                         # UNSUPPORTEDMAKE=/home/mydir/unsupportedCommands\n# PROJECTNAME=myBigProject# Sets projectname\n# BLACKLIST=fileBlacklist # Removes javascript commands given in a file from compilation and therefore from project defined firmware\n#                         # is used in build_jswrapper.py - of the form [{class,name}...]\n#                         # BLACKLIST=/home/mydir/myBlackList\n# VARIABLES=1700          # Sets number of variables for project defined firmware. This parameter can be dangerous, be careful before changing.\n#                         # used in build_platform_config.py\n\n#\n# -- STM32 Only\n# PAD_FOR_BOOTLOADER=1    # Pad the binary out with 0xFF where the bootloader should be (allows the Web IDE to flash the binary)\n#\n# -- NRF52 Only\n# INCLUDE_BLANK_STORAGE=1 # Include storage inside hex, so firmware updates remove any saved code\n# DFU_UPDATE_BUILD=1      # Uncomment this to build Espruino for a device firmware update over the air (nRF52).\n#\n# -- ESP32 Only\n# RTOS=1                  # adds RTOS functions, available only for ESP32\n\ninclude make/sanitycheck.make\n\nifndef GENDIR\nGENDIR=gen\nendif\nifndef OBJDIR\nOBJDIR=obj\nendif\nifndef BINDIR\nBINDIR=bin\nendif\n\nifndef SINGLETHREAD\nMAKEFLAGS=-j$(shell nproc) # make multicore based on the number of cores available\nendif\n\nINCLUDE?=-I$(ROOT) -I$(ROOT)/targets -I$(ROOT)/src -I$(GENDIR)\nLIBS?=\nDEFINES?=\n\nCFLAGS_C_COMPILER?= -Werror=implicit-function-declaration\nCFLAGS?=-Wall -Wextra -Wconversion -fno-strict-aliasing -g\nCFLAGS+=-Wno-packed-bitfield-compat # remove warnings from packed var usage\n\nCCFLAGS?= # specific flags when compiling cc files\nLDFLAGS?=-Winline -g\nOPTIMIZEFLAGS?=\n#-fdiagnostics-show-option - shows which flags can be used with -Werror\nDEFINES+=-DGIT_COMMIT=$(shell git log -1 --format=\"%h\")\n\nifeq ($(shell uname),Darwin)\nMACOSX=1\nCFLAGS+=-D__MACOSX__\nSTAT_FLAGS='-f ''%z'''\nREALPATH='grealpath'\nTAR='gtar'\nelse\nSTAT_FLAGS='-c ''%s'''\nREALPATH='realpath'\nTAR='tar'\nendif\n\nifeq ($(OS),Windows_NT)\nMINGW=1\nendif\n\nifdef RELEASE\n# force no asserts to be compiled in\nDEFINES += -DNO_ASSERT -DRELEASE\nendif\n\nPYTHON?=python\n\nifndef ALT_RELEASE\n# Default release labeling.  (This may fail and give inconsistent results due to the fact that\n# travis does a shallow clone.)\nLATEST_RELEASE=$(shell git tag | grep RELEASE_ | sort | tail -1)\n# use egrep to count lines instead of wc to avoid whitespace error on Mac\nCOMMITS_SINCE_RELEASE=$(shell git log --oneline $(LATEST_RELEASE)..HEAD | egrep -c .)\nifneq ($(COMMITS_SINCE_RELEASE),0)\nDEFINES += -DBUILDNUMBER=\\\"$(COMMITS_SINCE_RELEASE)\\\"\nendif\n\nelse\n# Alternate release labeling, which works nicely in travis and allows other developers to put their\n# initials into the build number.\n# The release label is constructed by appending the value of ALT_RELEASE followed by the branch\n# name as build number instead of commit info. For example, you can set ALT_RELEASE=peter and\n# then your builds for branch \"experiment\" come out with a version like\n# v1.81.peter_experiment_83bd432, where the last letters are the short of the current commit SHA.\n# Warning: this same release label derivation is also in scripts/common.py in get_version()\nLATEST_RELEASE=$(shell egrep \"define JS_VERSION .*\\\"$$\" src/jsutils.h | egrep -o '[0-9]v[0-9]+')\nCOMMITS_SINCE_RELEASE=$(ALT_RELEASE)_$(subst -,_,$(shell git name-rev --name-only HEAD))_$(shell git rev-parse --short HEAD)\n# Figure out whether we're building a tagged commit (true release) or not\nTAGGED:=$(shell if git describe --tags --exact-match >/dev/null 2>&1; then echo yes; fi)\nifeq ($(TAGGED),yes)\n$(info %%%%% Release label: $(LATEST_RELEASE))\nelse\nDEFINES += -DBUILDNUMBER=\\\"$(COMMITS_SINCE_RELEASE)\\\"\n$(info %%%%% Build label: $(LATEST_RELEASE).$(COMMITS_SINCE_RELEASE))\nendif\n\nendif\n\nCWD = $(CURDIR)\nROOT = $(CWD)\nPRECOMPILED_OBJS=\nPLATFORM_CONFIG_FILE=$(GENDIR)/platform_config.h\nWRAPPERFILE=$(GENDIR)/jswrapper.c\nHEADERFILENAME=$(GENDIR)/platform_config.h\nBASEADDRESS=0x08000000\n\n\nifeq ($(BOARD),)\n # Try and guess board names\n ifneq ($(shell grep Raspbian /etc/os-release),)\n  BOARD=RASPBERRYPI # just a guess\n else ifeq ($(shell uname -n),beaglebone)\n  BOARD=BEAGLEBONE\n else ifeq ($(shell uname -n),arietta)\n  BOARD=ARIETTA\n else\n  #$(info *************************************************************)\n  #$(info *           To build, use BOARD=my_board make               *)\n  #$(info *************************************************************)\n  BOARD=LINUX\n  DEFINES+=-DSYSFS_GPIO_DIR=\"\\\"/sys/class/gpio\\\"\"\n endif\nendif\n\nifeq ($(BOARD),RASPBERRYPI)\n ifneq (\"$(wildcard /usr/include/wiringPi.h)\",\"\")\n USE_WIRINGPI=1\n else\n DEFINES+=-DSYSFS_GPIO_DIR=\"\\\"/sys/class/gpio\\\"\"\n $(info *************************************************************)\n $(info *  WIRINGPI NOT FOUND, and you probably want it             *)\n $(info *  see  http://wiringpi.com/download-and-install/           *)\n $(info *************************************************************)\n endif\nendif\n\n# ---------------------------------------------------------------------------------\n#                                                      Get info out of BOARDNAME.py\n# ---------------------------------------------------------------------------------\n# TODO: could check board here and make clean if it's different?\n\n$(shell rm -f $(GENDIR)/CURRENT_BOARD.make)\n$(shell $(PYTHON) scripts/get_makefile_decls.py $(BOARD) > $(GENDIR)/CURRENT_BOARD.make)\ninclude $(GENDIR)/CURRENT_BOARD.make\n\n#set or reset defines like USE_GRAPHIC from an external file to customize firmware\nifdef SETDEFINES\ninclude $(SETDEFINES)\nendif\n\n# ----------------------------- end of board defines ------------------------------\n# ---------------------------------------------------------------------------------\n\n\n\n# ---------------------------------------------------------------------------------\n\n\n# If we're not on Linux and we want internet, we need either CC3000 or WIZnet support\nifdef USE_NET\nifndef LINUX\nifdef WIZNET\nUSE_WIZNET=1\nifdef W5100\nUSE_WIZNET_W5100=1\nendif\nelse ifeq ($(FAMILY),ESP8266)\nUSE_ESP8266=1\nelse ifeq ($(FAMILY),ESP32)\nUSE_ESP32=1\nelse ifeq ($(FAMILY),ESP32_IDF4)\nUSE_ESP32=1\nelse ifdef EMW3165\nUSE_WICED=1\nelse ifdef CC3000\nUSE_CC3000=1\nendif\nendif\nendif\n\nifdef DEBUG\n#OPTIMIZEFLAGS=-Os -g\n ifeq ($(FAMILY),ESP8266)\n  OPTIMIZEFLAGS=-g -Os -Wl,--allow-multiple-definition\n  CFLAGS_C_COMPILER= -std=gnu11 -fgnu89-inline\n else\n  OPTIMIZEFLAGS=-g\n endif\nDEFINES+=-DDEBUG\nendif\n\nifdef PROFILE\nOPTIMIZEFLAGS+=-pg\nendif\n\n# These are files for platform-specific libraries\nTARGETSOURCES ?=\n\n# These are JS files to be included as pre-built Espruino modules\nJSMODULESOURCES ?=\n\n# These are jswrap_.c files specified on the command-line that get added to the build after other WRAPPERSOURCES\nESPRUINO_WRAPPERSOURCES ?=\n\n# Files that contains objects/functions/methods that will be\n# exported to JS. The order here actually determines the order\n# objects will be matched in. So for example Pins must come\n# above ints, since a Pin is also matched as an int.\nWRAPPERSOURCES += \\\nsrc/jswrap_array.c \\\nsrc/jswrap_arraybuffer.c \\\nsrc/jswrap_dataview.c \\\nsrc/jswrap_date.c \\\nsrc/jswrap_error.c \\\nsrc/jswrap_functions.c \\\nsrc/jswrap_json.c \\\nsrc/jswrap_number.c \\\nsrc/jswrap_object.c \\\nsrc/jswrap_regexp.c \\\nsrc/jswrap_string.c \\\nsrc/jswrap_modules.c \\\nsrc/jswrap_math.c\n\n\nifndef ESPR_EMBED # These are wrapper sources to do with hardware, if embedding we don't need these\nWRAPPERSOURCES += \\\nsrc/jswrap_espruino.c \\\nsrc/jswrap_flash.c \\\nsrc/jswrap_interactive.c \\\nsrc/jswrap_io.c \\\nsrc/jswrap_pin.c \\\nsrc/jswrap_pipe.c \\\nsrc/jswrap_process.c \\\nsrc/jswrap_onewire.c \\\nsrc/jswrap_promise.c \\\nsrc/jswrap_serial.c \\\nsrc/jswrap_storage.c \\\nsrc/jswrap_spi_i2c.c \\\nsrc/jswrap_stepper.c \\\nsrc/jswrap_stream.c \\\nsrc/jswrap_waveform.c\nendif\n\n# it is important that _pin comes before stuff which uses\n# integers (as the check for int *includes* the chek for pin)\nSOURCES += \\\nsrc/jslex.c \\\nsrc/jsflags.c \\\nsrc/jsvar.c \\\nsrc/jsvariterator.c \\\nsrc/jsutils.c \\\nsrc/jsnative.c \\\nsrc/jsparse.c \\\n$(WRAPPERFILE)\n\nifndef ESPR_EMBED # These are sources to do with hardware, if embedding we don't need these\nSOURCES += \\\nsrc/jsflash.c \\\nsrc/jspin.c \\\nsrc/jsinteractive.c \\\nsrc/jsdevices.c \\\nsrc/jstimer.c \\\nsrc/jsi2c.c \\\nsrc/jsserial.c \\\nsrc/jsspi.c \\\nsrc/jshardware_common.c\nendif\n\n\nCPPSOURCES =\nCCSOURCES =\n\nifdef CFILE\nWRAPPERSOURCES += $(CFILE)\nendif\nifdef CPPFILE\nCPPSOURCES += $(CPPFILE)\nendif\n\nifdef USB_PRODUCT_ID\nDEFINES+=-DUSB_PRODUCT_ID=$(USB_PRODUCT_ID)\nendif\n\nifdef SAVE_ON_FLASH\nDEFINES+=-DSAVE_ON_FLASH\n\n# Smaller, RLE compression for code\nINCLUDE += -I$(ROOT)/libs/compression -I$(ROOT)/libs/compression\nSOURCES += \\\nlibs/compression/compress_rle.c\n\nelse\n\n# If we have enough flash, include the debugger\nifneq ($(USE_DEBUGGER),0)\nDEFINES+=-DUSE_DEBUGGER\nendif\n# Use use tab complete\nifneq ($(USE_TAB_COMPLETE),0)\nDEFINES+=-DUSE_TAB_COMPLETE\nendif\n\n# Heatshrink compression library and wrapper - better compression when saving code to flash\nDEFINES+=-DUSE_HEATSHRINK\nINCLUDE += -I$(ROOT)/libs/compression -I$(ROOT)/libs/compression/heatshrink\nSOURCES += \\\nlibs/compression/heatshrink/heatshrink_encoder.c \\\nlibs/compression/heatshrink/heatshrink_decoder.c \\\nlibs/compression/compress_heatshrink.c\nWRAPPERSOURCES += \\\nlibs/compression/jswrap_heatshrink.c\nendif\n\nifndef BOOTLOADER # ------------------------------------------------------------------------------ DON'T USE IN BOOTLOADER\n\nifeq ($(FAMILY),ESP8266)\n# special ESP8266 maths lib that doesn't go into RAM\nLIBS += -lmirom\nLDFLAGS += -L$(ROOT)/targets/esp8266\nelse\n# everything else uses normal maths lib\nLIBS += -lm\nendif\n\nifeq ($(USE_FILESYSTEM),1)\nDEFINES += -DUSE_FILESYSTEM\nINCLUDE += -I$(ROOT)/libs/filesystem\nWRAPPERSOURCES += \\\nlibs/filesystem/jswrap_fs.c \\\nlibs/filesystem/jswrap_file.c\nifndef LINUX\nINCLUDE += -I$(ROOT)/libs/filesystem/fat_sd\nSOURCES += \\\nlibs/filesystem/fat_sd/fattime.c \\\nlibs/filesystem/fat_sd/ff.c \\\nlibs/filesystem/fat_sd/option/unicode.c # for LFN support (see _USE_LFN in ff.h)\n\nifeq ($(USE_FILESYSTEM_SDIO),1)\nDEFINES += -DUSE_FILESYSTEM_SDIO\nSOURCES += libs/filesystem/fat_sd/sdio_diskio.c\n# sdio_sdcard_X.c is added in make/family/X.make\nelse #USE_FILESYSTEM_SDIO\nifdef USE_FLASHFS\nDEFINES += -DUSE_FLASHFS\nSOURCES += \\\nlibs/filesystem/fat_sd/flash_diskio.c\nelse\nSOURCES += \\\nlibs/filesystem/fat_sd/spi_diskio.c\nendif #USE_FLASHFS\nendif #USE_FILESYSTEM_SDIO\nendif #!LINUX\nendif #USE_FILESYSTEM\n\nifeq ($(USE_GRAPHICS),1)\nDEFINES += -DUSE_GRAPHICS\nINCLUDE += -I$(ROOT)/libs/graphics\nWRAPPERSOURCES += libs/graphics/jswrap_graphics.c\nSOURCES += \\\nlibs/graphics/bitmap_font_4x6.c \\\nlibs/graphics/bitmap_font_6x8.c \\\nlibs/graphics/vector_font.c \\\nlibs/graphics/pbf_font.c \\\nlibs/graphics/graphics.c \\\nlibs/graphics/lcd_arraybuffer.c \\\nlibs/graphics/lcd_js.c\n\nifeq ($(USE_LCD_SDL),1)\n  DEFINES += -DUSE_LCD_SDL\n  SOURCES += libs/graphics/lcd_sdl.c\n  LIBS += -lSDL\n  INCLUDE += -I/usr/include/SDL\nendif\n\nifdef USE_LCD_FSMC\n  DEFINES += -DUSE_LCD_FSMC\n  SOURCES += libs/graphics/lcd_fsmc.c\nendif\n\nifdef USE_LCD_SPI\n  DEFINES += -DUSE_LCD_SPI\n  SOURCES += libs/graphics/lcd_spilcd.c\nendif\n\nifdef USE_LCD_ST7789_8BIT\n  DEFINES += -DUSE_LCD_ST7789_8BIT\n  SOURCES += libs/graphics/lcd_st7789_8bit.c\nendif\n\nifdef USE_LCD_MEMLCD\n  DEFINES += -DUSE_LCD_MEMLCD\n  SOURCES += libs/graphics/lcd_memlcd.c\nendif\n\nifdef USE_LCD_SPI_UNBUF\n  DEFINES += -DUSE_LCD_SPI_UNBUF\n  WRAPPERSOURCES += libs/graphics/lcd_spi_unbuf.c\nendif\n\nifeq ($(USE_TERMINAL),1)\n  DEFINES += -DUSE_TERMINAL\n  WRAPPERSOURCES += libs/graphics/jswrap_terminal.c\nendif\n\nifeq ($(USE_SWDCON),1)\n  DEFINES += -DUSE_SWDCON\n  WRAPPERSOURCES += libs/swdcon/jswrap_swdcon.c\n# directly included so not needed SOURCES += libs/swdcon/SEGGER_RTT_custom.c\nendif\n\nendif\n\nifeq ($(USE_USB_HID),1)\n  DEFINES += -DUSE_USB_HID\nendif\n\nifeq ($(USE_NET),1)\n DEFINES += -DUSE_NET\n INCLUDE += -I$(ROOT)/libs/network -I$(ROOT)/libs/network -I$(ROOT)/libs/network/http\n WRAPPERSOURCES += \\\n libs/network/jswrap_net.c \\\n libs/network/http/jswrap_http.c\n SOURCES += \\\n libs/network/network.c \\\n libs/network/socketserver.c \\\n libs/network/socketerrors.c\n\nifneq ($(USE_NETWORK_JS),0)\n DEFINES += -DUSE_NETWORK_JS\n WRAPPERSOURCES += libs/network/js/jswrap_jsnetwork.c\n INCLUDE += -I$(ROOT)/libs/network/js\n SOURCES += libs/network/js/network_js.c\nendif\n\n ifdef LINUX\n INCLUDE += -I$(ROOT)/libs/network/linux\n SOURCES += \\\n libs/network/linux/network_linux.c\n endif\n\n ifdef USE_CC3000\n DEFINES += -DUSE_CC3000 -DSEND_NON_BLOCKING\n WRAPPERSOURCES += libs/network/cc3000/jswrap_cc3000.c\n INCLUDE += -I$(ROOT)/libs/network/cc3000\n SOURCES += \\\n libs/network/cc3000/network_cc3000.c \\\n libs/network/cc3000/board_spi.c \\\n libs/network/cc3000/cc3000_common.c \\\n libs/network/cc3000/evnt_handler.c \\\n libs/network/cc3000/hci.c \\\n libs/network/cc3000/netapp.c \\\n libs/network/cc3000/nvmem.c \\\n libs/network/cc3000/security.c \\\n libs/network/cc3000/socket.c \\\n libs/network/cc3000/wlan.c\n endif\n\n ifdef USE_WIZNET\n DEFINES += -DUSE_WIZNET\n WRAPPERSOURCES += libs/network/wiznet/jswrap_wiznet.c\n INCLUDE += -I$(ROOT)/libs/network/wiznet -I$(ROOT)/libs/network/wiznet/Ethernet\n SOURCES += \\\n libs/network/wiznet/network_wiznet.c \\\n libs/network/wiznet/DNS/dns_parse.c \\\n libs/network/wiznet/DNS/dns.c \\\n libs/network/wiznet/DHCP/dhcp.c \\\n libs/network/wiznet/Ethernet/wizchip_conf.c \\\n libs/network/wiznet/Ethernet/socket.c\n  ifdef USE_WIZNET_W5100\n   DEFINES += -D_WIZCHIP_=5100\n   SOURCES += libs/network/wiznet/W5100/w5100.c\n  else\n   DEFINES += -D_WIZCHIP_=5500\n   SOURCES += libs/network/wiznet/W5500/w5500.c\n  endif\n endif\n\n ifdef USE_WICED\n # For EMW3165 use SDIO to access BCN43362 rev A2\n INCLUDE += -I$(ROOT)/targetlibs/wiced/include \\\n            -I$(ROOT)/targetlibs/wiced/wwd/include \\\n            -I$(ROOT)/targetlibs/wiced/wwd/include/network \\\n            -I$(ROOT)/targetlibs/wiced/wwd/include/RTOS \\\n            -I$(ROOT)/targetlibs/wiced/wwd/internal/bus_protocols/SDIO \\\n            -I$(ROOT)/targetlibs/wiced/wwd/internal/chips/43362A2\n\n SOURCES += targetlibs/wiced/wwd/internal/wwd_thread.c \\\n            targetlibs/wiced/wwd/internal/wwd_sdpcm.c \\\n            targetlibs/wiced/wwd/internal/wwd_internal.c \\\n            targetlibs/wiced/wwd/internal/wwd_management.c \\\n            targetlibs/wiced/wwd/internal/wwd_wifi.c \\\n            targetlibs/wiced/wwd/internal/wwd_crypto.c \\\n            targetlibs/wiced/wwd/internal/wwd_logging.c \\\n            targetlibs/wiced/wwd/internal/wwd_eapol.c \\\n            targetlibs/wiced/wwd/internal/bus_protocols/wwd_bus_common.c \\\n            targetlibs/wiced/wwd/internal/bus_protocols/SDIO/wwd_bus_protocol.c\n endif\n\n ifdef USE_ESP32\n DEFINES += -DUSE_ESP32\n WRAPPERSOURCES += \\\n   libs/network/jswrap_wifi.c \\\n   libs/network/esp32/jswrap_esp32_network.c \\\n   targets/esp32/jswrap_esp32.c\n INCLUDE += -I$(ROOT)/libs/network/esp32\n SOURCES +=  libs/network/esp32/network_esp32.c \\\n  targets/esp32/jshardwareI2c.c \\\n  targets/esp32/jshardwareSpi.c \\\n  targets/esp32/jshardwareUart.c \\\n  targets/esp32/jshardwareAnalog.c \\\n  targets/esp32/jshardwarePWM.c \\\n  targets/esp32/rtosutil.c \\\n  targets/esp32/jshardwarePulse.c\n  ifdef RTOS\n   DEFINES += -DRTOS\n   WRAPPERSOURCES += targets/esp32/jswrap_rtos.c\n  endif # RTOS\n endif # USE_ESP32\n\n ifdef USE_ESP8266\n DEFINES += -DUSE_ESP8266\n WRAPPERSOURCES += \\\n   libs/network/jswrap_wifi.c \\\n   libs/network/esp8266/jswrap_esp8266_network.c \\\n   targets/esp8266/jswrap_esp8266.c \\\n   targets/esp8266/jswrap_nodemcu.c\n INCLUDE += -I$(ROOT)/libs/network/esp8266\n SOURCES += \\\n libs/network/esp8266/network_esp8266.c\\\n libs/network/esp8266/pktbuf.c\n\n ifndef NO_FOTA\n   SOURCES += libs/network/esp8266/ota.c\n else\n   DEFINES += -DNO_FOTA\n endif\n endif\n\n ifdef USE_TELNET\n  DEFINES += -DUSE_TELNET\n  WRAPPERSOURCES += libs/network/telnet/jswrap_telnet.c\n  INCLUDE += -I$(ROOT)/libs/network/telnet\n endif\nendif # USE_NET\n\nifeq ($(USE_TV),1)\n  DEFINES += -DUSE_TV\n  WRAPPERSOURCES += libs/tv/jswrap_tv.c\n  INCLUDE += -I$(ROOT)/libs/tv\n  SOURCES += \\\n  libs/tv/tv.c\nendif\n\nifeq ($(USE_TRIGGER),1)\n  DEFINES += -DUSE_TRIGGER\n  WRAPPERSOURCES += libs/trigger/jswrap_trigger.c\n  INCLUDE += -I$(ROOT)/libs/trigger\n  SOURCES += \\\n  libs/trigger/trigger.c\nendif\n\nifeq ($(USE_WIRINGPI),1)\n  DEFINES += -DUSE_WIRINGPI\n  LIBS += -lwiringPi\nendif\n\nifeq ($(USE_BLUETOOTH),1)\n  DEFINES += -DBLUETOOTH\n  INCLUDE += -I$(ROOT)/libs/bluetooth\n  WRAPPERSOURCES += libs/bluetooth/jswrap_bluetooth.c\n  SOURCES += libs/bluetooth/bluetooth_utils.c\nendif\n\nifeq ($(USE_CRYPTO),1)\n  cryptofound:=$(shell if test -f make/crypto/$(FAMILY).make; then echo yes;fi)\n  ifeq ($(cryptofound),yes)\n    include make/crypto/$(FAMILY).make\n  else\n    include make/crypto/default.make\n  endif\nendif\n\nifeq ($(USE_NEOPIXEL),1)\n  DEFINES += -DUSE_NEOPIXEL\n  INCLUDE += -I$(ROOT)/libs/neopixel\n  WRAPPERSOURCES += libs/neopixel/jswrap_neopixel.c\nendif\n\nifeq ($(USE_NFC),1)\n  DEFINES += -DUSE_NFC -DNFC_HAL_ENABLED=1\n  INCLUDE          += -I$(NRF5X_SDK_PATH)/components/nfc/t2t_lib\n  INCLUDE          += -I$(NRF5X_SDK_PATH)/components/nfc/ndef/uri\n  INCLUDE          += -I$(NRF5X_SDK_PATH)/components/nfc/ndef/generic/message\n  INCLUDE          += -I$(NRF5X_SDK_PATH)/components/nfc/ndef/generic/record\n  INCLUDE          += -I$(NRF5X_SDK_PATH)/components/nfc/ndef/connection_handover/ble_pair_msg\n  INCLUDE          += -I$(NRF5X_SDK_PATH)/components/nfc/ndef/connection_handover/hs_rec\n  INCLUDE          += -I$(NRF5X_SDK_PATH)/components/nfc/ndef/connection_handover/ac_rec\n  INCLUDE          += -I$(NRF5X_SDK_PATH)/components/nfc/ndef/connection_handover/le_oob_rec\n  INCLUDE          += -I$(NRF5X_SDK_PATH)/components/nfc/ndef/connection_handover/ble_oob_advdata\n  INCLUDE          += -I$(NRF5X_SDK_PATH)/components/nfc/ndef/connection_handover/ep_oob_rec\n  INCLUDE          += -I$(NRF5X_SDK_PATH)/components/nfc/ndef/connection_handover/common\n  INCLUDE          += -I$(NRF5X_SDK_PATH)/components/nfc/ndef/launchapp\n  TARGETSOURCES    += $(NRF5X_SDK_PATH)/components/nfc/ndef/uri/nfc_uri_msg.c\n  TARGETSOURCES    += $(NRF5X_SDK_PATH)/components/nfc/ndef/uri/nfc_uri_rec.c\n  TARGETSOURCES    += $(NRF5X_SDK_PATH)/components/nfc/ndef/generic/message/nfc_ndef_msg.c\n  TARGETSOURCES    += $(NRF5X_SDK_PATH)/components/nfc/ndef/generic/record/nfc_ndef_record.c\n  TARGETSOURCES    += $(NRF5X_SDK_PATH)/components/nfc/ndef/connection_handover/ble_pair_msg/nfc_ble_pair_msg.c\n  TARGETSOURCES    += $(NRF5X_SDK_PATH)/components/nfc/ndef/connection_handover/hs_rec/nfc_hs_rec.c\n  TARGETSOURCES    += $(NRF5X_SDK_PATH)/components/nfc/ndef/connection_handover/le_oob_rec/nfc_le_oob_rec.c\n  TARGETSOURCES    += $(NRF5X_SDK_PATH)/components/nfc/ndef/connection_handover/ep_oob_rec/nfc_ep_oob_rec.c\n  TARGETSOURCES    += $(NRF5X_SDK_PATH)/components/nfc/ndef/connection_handover/ac_rec/nfc_ac_rec.c\n  TARGETSOURCES    += $(NRF5X_SDK_PATH)/components/nfc/ndef/connection_handover/hs_rec/nfc_hs_rec.c\n  TARGETSOURCES    += $(NRF5X_SDK_PATH)/components/nfc/ndef/connection_handover/ble_oob_advdata/nfc_ble_oob_advdata.c\n  TARGETSOURCES    += $(NRF5X_SDK_PATH)/components/nfc/ndef/connection_handover/common/nfc_ble_pair_common.c\n  TARGETSOURCES    += $(NRF5X_SDK_PATH)/components/nfc/ndef/launchapp/nfc_launchapp_msg.c\n  TARGETSOURCES    += $(NRF5X_SDK_PATH)/components/nfc/ndef/launchapp/nfc_launchapp_rec.c\n  TARGETSOURCES    += $(NRF5X_SDK_PATH)/components/nfc/t2t_lib/hal_t2t/hal_nfc_t2t.c\nendif\n\nifeq ($(USE_WIO_LTE),1)\n  INCLUDE += -I$(ROOT)/libs/wio_lte\n  WRAPPERSOURCES += libs/wio_lte/jswrap_wio_lte.c\n  SOURCES += targets/stm32/stm32_ws2812b_driver.c\nendif\n\nifeq ($(USE_TENSORFLOW),1)\ninclude make/misc/tensorflow.make\nendif\n\nifeq ($(USE_JIT),1)\n  DEFINES += -DESPR_JIT\n  SOURCES += src/jsjit.c src/jsjitc.c\nendif\n\n\nendif # BOOTLOADER ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ DON'T USE STUFF ABOVE IN BOOTLOADER\n\n# =========================================================================\n\n.PHONY:  proj\n\nall: \t proj\n# =========================================================================\nifneq ($(FAMILY),)\ninclude make/family/$(FAMILY).make\nendif\n# =========================================================================\n\n\nifdef USB\nDEFINES += -DUSB\nendif\n\nPININFOFILE=$(GENDIR)/jspininfo\nSOURCES += $(PININFOFILE).c\nWRAPPERSOURCES += $(ESPRUINO_WRAPPERSOURCES)\nSOURCES += $(WRAPPERSOURCES) $(TARGETSOURCES)\nSOURCEOBJS = $(patsubst %.c,$(OBJDIR)/%.o,$(SOURCES))\nifdef CPPSOURCES\nSOURCEOBJS += $(patsubst %.cpp,$(OBJDIR)/%.cpp.o,$(CPPSOURCES))\nendif\nifdef CCSOURCES\nSOURCEOBJS += $(patsubst %.cc,$(OBJDIR)/%.cc.o,$(CCSOURCES))\nendif\nOBJS = $(PRECOMPILED_OBJS) $(SOURCEOBJS)\n\n\n# -ffreestanding -nodefaultlibs -nostdlib -fno-common\n# -nodefaultlibs -nostdlib -nostartfiles\n# -fdata-sections -ffunction-sections are to help remove unused code\n\n# See the build_platform_config.py/platform_config.h for notes on why we define ESPR_DEFINES_ON_COMMANDLINE\nCFLAGS += $(OPTIMIZEFLAGS) -c $(ARCHFLAGS) $(DEFINES) $(INCLUDE) -DESPR_DEFINES_ON_COMMANDLINE\n\n# -Wl,--gc-sections helps remove unused code\n# -Wl,--whole-archive checks for duplicates\n# --specs=nano.specs uses newlib-nano\nifdef NRF5X\n LDFLAGS += $(OPTIMIZEFLAGS) $(ARCHFLAGS) --specs=nano.specs -lc -lnosys\nelse ifdef STM32\n LDFLAGS += $(OPTIMIZEFLAGS) $(ARCHFLAGS) --specs=nano.specs -lc -lnosys\nelse\n LDFLAGS += $(OPTIMIZEFLAGS) $(ARCHFLAGS)\nendif\n\nifdef EMBEDDED\nDEFINES += -DEMBEDDED\nLDFLAGS += -Wl,--gc-sections\nendif\n\nifdef LINKER_FILE\n  LDFLAGS += -T$(LINKER_FILE)\nendif\n\n# Adds additional files from unsupported sources(means not supported by Gordon) to actual make\nifdef UNSUPPORTEDMAKE\ninclude $(UNSUPPORTEDMAKE)\nendif\n# sets projectname for actual make\nifdef PROJECTNAME\n  PROJ_NAME=$(PROJECTNAME)\nendif\n\nexport CC=$(CCPREFIX)gcc\nexport LD=$(CCPREFIX)gcc\nexport AR=$(CCPREFIX)ar\nexport AS=$(CCPREFIX)as\nexport OBJCOPY=$(CCPREFIX)objcopy\nexport OBJDUMP=$(CCPREFIX)objdump\nexport GDB=$(CCPREFIX)gdb\n\nifeq ($(V),1)\n        quiet_=\n        Q=\nelse\n        quiet_=quiet_\n        Q=@\n  export SILENT=1\nendif\nifdef BLACKLIST\n  # to allow blacklist to take effect if defined\n  # inside a BOARD.py file\n  export BLACKLIST\nendif\n\n# =============================================================================\n# =============================================================================\n# =============================================================================\n\nboardjson: scripts/build_board_json.py $(WRAPPERSOURCES)\n\t@echo ================================== Generating Board JSON\n\t$(Q)echo WRAPPERSOURCES = $(WRAPPERSOURCES)\n\t$(Q)echo DEFINES =  $(DEFINES)\nifdef USE_NET\n        # hack to ensure that Pico/etc have all possible firmware configs listed\n\t$(Q)$(PYTHON) scripts/build_board_json.py $(WRAPPERSOURCES) $(DEFINES) -DUSE_WIZNET=1 -DUSE_CC3000=1 -B$(BOARD)\nelse\n\t$(Q)$(PYTHON) scripts/build_board_json.py $(WRAPPERSOURCES) $(DEFINES) -B$(BOARD)\nendif\n\ndocs:\n\t@echo ================================== Generating Board docs\n\t$(Q)python scripts/build_docs.py $(WRAPPERSOURCES) $(DEFINES) -B$(BOARD)\n\t@echo functions.html created\n\n$(WRAPPERFILE): scripts/build_jswrapper.py $(WRAPPERSOURCES)\n\t@echo ================================== Generating JS wrappers\n\t$(Q)echo WRAPPERSOURCES = $(WRAPPERSOURCES)\n\t$(Q)echo DEFINES =  $(DEFINES)\n\t$(Q)$(PYTHON) scripts/build_jswrapper.py $(WRAPPERSOURCES) $(JSMODULESOURCES) $(DEFINES) -B$(BOARD) -F$(WRAPPERFILE)\n\nifdef PININFOFILE\n$(PININFOFILE).c $(PININFOFILE).h: scripts/build_pininfo.py\n\t@echo ================================== Generating pin info\n\t$(Q)$(PYTHON) scripts/build_pininfo.py $(BOARD) $(PININFOFILE).c $(PININFOFILE).h\nendif\n\nifndef NRF5X # nRF5x devices use their own linker files that aren't automatically generated.\n$(LINKER_FILE): scripts/build_linker.py\n\t@echo ================================== Generating linker scripts\n\t$(Q)$(PYTHON) scripts/build_linker.py $(BOARD) $(LINKER_FILE) $(BUILD_LINKER_FLAGS)\nendif # NRF5X\n\n$(PLATFORM_CONFIG_FILE): boards/$(BOARD).py scripts/build_platform_config.py\n\t@echo ================================== Generating platform configs\n\t$(Q)$(PYTHON) scripts/build_platform_config.py $(BOARD) $(HEADERFILENAME) $(DEFINES)\n\n# If realpath exists, use relative paths\nifneq (\"$(shell ${REALPATH} --version > /dev/null;echo \"$$?\")\",\"0\")\ncompile=$(CC) $(CFLAGS_C_COMPILER) $(CFLAGS) $< -o $@\nelse\n# when macros use __FILE__ this stops us including the whole build path\ncompile=$(CC) $(CFLAGS_C_COMPILER) $(CFLAGS) $(shell ${REALPATH} --relative-to $(shell pwd) $<) -o $@\nendif\n\nlink=$(LD) $(LDFLAGS) -o $@ $(OBJS) $(LIBS)\n\n# note: link is ignored for the ESP8266\nobj_dump=$(OBJDUMP) -x -S $(PROJ_NAME).elf > $(PROJ_NAME).lst\nobj_to_bin=$(OBJCOPY) -O $1 $(PROJ_NAME).elf $(PROJ_NAME).$2\n\nquiet_compile= CC $@\nquiet_link= LD $@\nquiet_obj_dump= GEN $(PROJ_NAME).lst\nquiet_obj_to_bin= GEN $(PROJ_NAME).$2\n\n$(OBJDIR)/%.o: %.c $(PLATFORM_CONFIG_FILE) $(PININFOFILE).h\n\t@echo $($(quiet_)compile)\n\t@mkdir -p $(shell dirname $@) # create directory if it doesn't exist\n\t@$(call compile)\n\n$(OBJDIR)/%.cc.o: %.cc $(PLATFORM_CONFIG_FILE) $(PININFOFILE).h\n\t@echo $($(quiet_)compile)\n\t@mkdir -p $(shell dirname $@) # create directory if it doesn't exist\n\t@$(CC) $(CCFLAGS) $(CFLAGS) $< -o $@\n\n$(OBJDIR)/%.cpp.o: $(PLATFORM_CONFIG_FILE) $(PININFOFILE).h\n\t@echo $($(quiet_)compile)\n\t@mkdir -p $(shell dirname $@) # create directory if it doesn't exist\n\t@$(call compile)\n\n# case sensitive - Nordic's files are capitals\n$(OBJDIR)/%.s.o:\n\t@echo $($(quiet_)compile)\n\t@mkdir -p $(shell dirname $@) # create directory if it doesn't exist\n\t@$(call compile)\n\n$(OBJDIR)/%.S.o:\n\t@echo $($(quiet_)compile)\n\t@mkdir -p $(shell dirname $@) # create directory if it doesn't exist\n\t@$(call compile)\n\nifdef LINUX # ---------------------------------------------------\ninclude make/targets/LINUX.make\nelse ifdef EMSCRIPTEN\ninclude make/targets/EMSCRIPTEN.make\nelse ifdef ESP32_IDF4\ninclude make/targets/ESP32_IDF4.make\nelse ifdef ESP32\ninclude make/targets/ESP32.make\nelse ifdef ESP8266\ninclude make/targets/ESP8266.make\nelse ifdef ESPR_EMBED\ninclude make/targets/EMBED.make\nelse # ARM/etc, so generate bin, etc ---------------------------\ninclude make/targets/ARM.make\nendif\t    # ---------------------------------------------------\n\nlst: $(PROJ_NAME).lst\n\nclean:\n\t@echo Cleaning targets\n\t$(Q)rm -rf $(OBJDIR)/* $(BINDIR)/build $(BINDIR)/main\n\t$(Q)rm -f $(GENDIR)/*.c $(GENDIR)/*.h $(GENDIR)/*.ld\n\t$(Q)rm -f $(ROOT)/scripts/*.pyc $(ROOT)/boards/*.pyc\n\t$(Q)rm -f $(PROJ_NAME).elf\n\t$(Q)rm -f $(PROJ_NAME).hex\n\t$(Q)rm -f $(PROJ_NAME).bin\n\t$(Q)rm -f $(PROJ_NAME).srec\n\t$(Q)rm -f $(PROJ_NAME).lst\n\t$(Q)rm -f $(BINDIR)/espruino_embedded.h\n\t$(Q)rm -f $(BINDIR)/espruino_embedded.c\n\t$(Q)rm -f $(BINDIR)/jstypes.h\n\t$(Q)rm -f $(ROOT)/targetlibs/nrf5x_*/components/toolchain/gcc/gcc_startup_nrf5*.o $(ROOT)/targetlibs/nrf5x_*/modules/nrfx/mdk/gcc_startup_nrf5*.o $(ROOT)/targetlibs/stm32f4/lib/startup_stm32f4*.o $(ROOT)/targetlibs/stm32f1/lib/startup_stm32f10x_*.o\n\nwrappersources:\n\t$(info WRAPPERSOURCES=$(WRAPPERSOURCES))\n\n# start make like this \"make varsonly\" to get all variables created and used during make process without compiling\n# this helps to better understand linking, or to find oddities\nvarsonly:\n\t$(foreach v, $(.VARIABLES), $(info $(v) = $($(v))))\n"
        },
        {
          "name": "NRF_Bootloader.md",
          "type": "blob",
          "size": 1.322265625,
          "content": "Using Nordic Bootloader\n========================\n\nBuilding complete hex file for Nordic DK upload\n------------------------------------------------\n\nBuild the Bootloader:\n\n```\nmake clean;BOARD=PUCKJS RELEASE=1 BOOTLOADER=1 make\n```\n\nNow build everything:\n\n```\nmake clean;BOARD=PUCKJS RELEASE=1 make\n```\n\nConnect SWD connections and use:\n\n```\nBOARD=PUCKJS RELEASE=1 make flash\n```\n\n(Or just copy the zip file to the NRF52DK's flash drive)\n\nBuilding zip file for Over the Air upload\n-----------------------------------------\n\n### Prep\n\nhttps://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk5.v12.0.0%2Flib_crypto.html&anchor=lib_crypto_key\n\n```\nsudo apt install python-pip\npip install --upgrade pip\nsudo pip install setuptools\nsudo pip install nrfutil\n```\n\n### Compilation\n\n```\nmake clean;PUCKJS=1 RELEASE=1 DFU_UPDATE_BUILD=1 make\n```\n\n# Flashing\n\n* Download the `nRF Toolbox` app to your phone\n* Download the ZIP file to a local folder on your phone\n* Run the app and tap 'DFU'\n* Select the file (Distribution Packet)\n* Now take the battery out of the puck and re-insert it with the button hold down\n* The Green LED should be lit - now release the button (under 3 secs after inserting battery)\n* The Red LED should now be lit\n* Tap 'select device' in the app, and choose `DfuTarg`\n* Now tap `Upload`\n\nUpload Failed: UNKNOWN (8202)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.6376953125,
          "content": "Espruino JavaScript for Microcontrollers\n========================================\n<pre>\n _____                 _\n|   __|___ ___ ___ _ _|_|___ ___\n|   __|_ -| . |  _| | | |   | . |\n|_____|___|  _|_| |___|_|_|_|___|\n          |_|\n</pre>\nhttps://www.espruino.com &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [![Join the chat at https://gitter.im/espruino/Espruino](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/espruino/Espruino?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nAbout\n-----\n\nEspruino is a JavaScript interpreter for microcontrollers. It is designed for devices with as little as 128kB Flash and 8kB RAM.\n\nPlease support Espruino by [ordering one of our official boards](https://www.espruino.com/Order) or [donating](https://www.espruino.com/Donate).\n\n\nDocumentation\n------------\n\nIf you have an Espruino board, please read [the Quick Start Guide](https://www.espruino.com/Quick+Start) first.\n\nBrowse the [Espruino Website](https://www.espruino.com) (try using search in the top right), and read the [FAQ](https://www.espruino.com/FAQ).\n\nThere's also a [Reference](https://www.espruino.com/Reference) for JavaScript commands as well as [Tutorials](https://www.espruino.com/Tutorials). However the documentation on the Espruino website will match the version [available for download](https://www.espruino.com/Download) but **not** the latest version on GitHub.\n\nBuilds for the [Espruino Board](https://www.espruino.com/EspruinoBoard) and [Pico Board](https://www.espruino.com/Pico) (built automatically for each Git commit) are [available from here](https://www.espruino.com/binaries/git).\n\nOther documentation of use is:\n\n* [The Forum](http://forum.espruino.com/)\n* [FAQ](https://www.espruino.com/FAQ)\n* [Troubleshooting](https://www.espruino.com/Troubleshooting)\n* [Performance Notes](https://www.espruino.com/Performance)\n* [Implementation Notes](https://www.espruino.com/Internals)\n* [Build Process Notes](README_BuildProcess.md)\n* [Building Espruino](README_Building.md)\n* [Making your own libraries](libs/README.md)\n* [Hardware Debugging Notes](https://www.espruino.com/AdvancedDebug)\n\n\nSupport / Bugs\n--------------\n\nFirst, please try and check that your problem hasn't [already been found](https://github.com/espruino/Espruino/issues) or [covered on our forum](https://www.espruino.com/Forum).\n\n[Submit bugs](https://github.com/espruino/Espruino/issues) with clear steps to reproduce them: a **small** test case (not your whole program), and an actual and expected result. If you can't come up with these, please [post on the forum](https://www.espruino.com/Forum) first as it may just be something in your code that we can help out with.\n\nWork on Espruino is supported by [sales of our boards](https://www.espruino.com/Order).\n\n**If your board isn't made by us but came pre-installed with Espruino then you should contact the manufacturers.**\n\nWe try and support users of the boards we sell, but if you bought a non-official board your issue may not get addressed. In this case, please consider [donating](https://www.espruino.com/Donate) to help cover the time it takes to fix problems (even so, we can't guarantee to fix every problem).\n\n\nLicense\n-------\n\nPlease see the [LICENSE](LICENSE) file.\n\n\nBuilding\n--------\n\nCheck out [the page on building Espruino](README_Building.md).\n\n\nTesting\n-------\n\nThere are a bunch of tests in the `tests` directory. See [`tests/README.md`](tests/README.md) for examples on how to run them.\n\n\nCurrent State\n-------------\n\nThe [officially supported boards](https://www.espruino.com/Order) are the best supported. They come pre-installed with Espruino and you are able to easily download and flash the latest versions of Espruino to them.\n\nWhile Espruino can run on other boards, we make no money from them and so cannot afford to test, fix or support the firmware on them. We're dependent on the community.\n\nYou can download binaries from https://www.espruino.com/Download.\n\nIf you are a board manufacturer interested in getting your board officially supported, please [check out this page](https://www.espruino.com/Business).\n\nFor a list of supported boards, please see the [boards folder](https://github.com/espruino/Espruino/tree/master/boards).\n\nMain supported platforms are:\n\n* STM32 (F1, F3, F4, L4)\n* nRF52\n* nRF51\n* ESP8266\n* ESP32\n* Linux\n\nEspruino has been ported to other boards and platforms (such as EFM32 and SAMD), but these have a habit of being contributed and then never maintained. All boards that this has happened to reside in the [UNMAINTAINED_BOARDS](https://github.com/espruino/Espruino/tree/UNMAINTAINED_BOARDS) branch.\n\n\nModification\n------------\n\n**Check out [the documentation on the build process](README_BuildProcess.md) first** - this should\nclear up a lot of potential questions about the Espruino architecture.\n\nPlease see [CONTRIBUTING.md](CONTRIBUTING.md) for some hints about code style/etc.\n\nYou can auto-build documentation for all source files - see [doxygen/README.md](doxygen/README.md)\n\nAny more questions? [ask on the forum.](https://www.espruino.com/Forum)\n\n### Porting to new devices\n\nIf you're using an existing architecture everything can be done from `boards/BOARDNAME.py`. See a similar board's `.py` file as an example.\n\nHowever for a new architecture there are a bunch of different files to modify.\n\n* `boards/*.py` files describe the CPU, available pins, and connections - so the relevant linker script, headers + docs can be created\n* `boards/pins/*.csv` are copies of the 'pin definitions' table in the chip's datasheet. They are read in for STM32 chips by the `boards/*.py` files, but they are not required - see `boards/MICROBIT.py` for an example.\n* Global build options are handled in `Makefile`\n* The `make` directory contains arch-specific Makefile fragments\n* Extra libraries like USB/LCD/filesystem are in `Makefile`\n* Processor-specific code in `targets/ARCH` - eg. `targets/stm32`, `targets/linux`\n* Processor-specific libs (like the SDK) in `targetlibs/ARCH`\n* `src/jshardware.h` is effectively a simple abstraction layer for SPI/I2C/etc, which should be implemented in `targets/ARCH/jshardware.c`\n\n### Adding libraries\n\n* Create `jswrap_mylib.c/h` in `libs/`\n* Create library functions (see examples in other jswrap files, also the comments in `scripts/common.py`)\n\nSee [libs/README.md](libs/README.md) for a short tutorial on how to add your own libraries.\n\n\nUsing Espruino in your Projects\n---------------------------\n\nIf you're using Espruino for your own personal projects - go ahead, we hope you have fun - and please let us know what you do with it on https://www.espruino.com/Forum!\n\nIf you're planning on selling the Espruino software on your own board, please:\n\n* Let us know, we might be able to help.\n* Read the terms of the MPLv2 Licence that Espruino is distributed under, and make sure you comply with it\n* MPLv2 dictates that any files that you modify must be made available in source form. New files that you create don't need to be made available (although we'd encourage it!)\n* You won't be able to call your board an 'Espruino' board unless it's agreed with us (we own the trademark)\n* You must explain clearly in your documentation that your device uses Espruino internally\n* Please don't fork Espruino - improvements get very hard to share, and in the long run everyone loses.\n* Please give something back to the project - be it code improvements, documentation or support.\n\nWe spend a *lot* of time supporting Espruino on the forums, but can only do\nso because we make money from the sales of Espruino boards. If your users request\nsupport from us then we have absolutely no obligation to help them. However, we'll\nbe a lot more motivated if you're actively helping to improve Espruino for all its\nusers (not just your own).\n"
        },
        {
          "name": "README_BuildProcess.md",
          "type": "blob",
          "size": 22.2470703125,
          "content": "Espruino Internals: Build Process\n---------------------------------\n\nDirectories and Files\n-------------------\n\n* `ChangeLog`:          What's new\n* `boards/`:            Information on boards, used to auto-generate a lot of the code\n* `doxygen/`:           Directory for auto-generated code documentation - see [doxygen/README.md](doxygen/README.md) for more info\n* `gen/`:               Auto-Generated Source Files\n* `libs/`:              Optional libraries to include in Espruino (Math, Filesystem, Graphics, etc)\n* `make/`:              Makefile fragments for each architecture\n* `misc/`:              Other useful things\n* `scripts/`:           Scripts for generating files in gen, and for analysing code/compilation/etc\n* `src/`:               Main source code\n* `targetlibs/`:        Libraries for targeted architectures\n* `targets/`:           Specific code for targeted architectures\n* `tests/`:             JavaScript Testcases\n* `benchmark/`:         JavaScript Benchmarks\n* `dist_*`:             files to be copied into distribution zip file\n* `Makefile`:           the Makefile which controls the build process\n\nBuild Commands\n--------------\n\nBuilding for an Espruino board is generally done by typing:\n\n```\nBOARD=BOARDNAME make\n```\n\nAnd for release, by typing:\n\n```\nRELEASE=1 BOARD=BOARDNAME make\n```\n\nValid board names are in comments at the head of the [`Makefile`](https://github.com/espruino/Espruino/blob/master/Makefile)..\n\nRelease builds have all the assertions removed, reducing flash usage. Normal builds still have the assertions, and debug builds (with `DEBUG=1` have more debug info in the assertions, as well as the debug info needed for proper GDB debugging).\n\nThe Make system has the following targets:\n\n* `clean` - Clean the build\n* `all` (or unspecified) - Build, including binaries needed for flashing the firmware\n* `flash` - Generate the firmware files and flash to the board\n* `serialflash` - Generate the firmware files and flash to the board via serial bootloader (used for STM32, especially the Original Espruino and Espruino Pico)\n\nBuild Process\n-------------\n\n* Overall build logic is in the [`Makefile`](https://github.com/espruino/Espruino/blob/master/Makefile).\n* The  [Board Definition File](#boarddefinition) in `boards/$BOARD.py` is parsed by [`scripts/get_makefile_decls.py`](scripts/get_makefile_decls.py) to work out extra definitions for the Makefile (chip family, part number, binary name, whether it has a bootloader), which control the build.\n* Architecture-specic build logic is in the [`make`](https://github.com/espruino/Espruino/tree/master/make) directory - this is called based off `family` in the [Board Definition File](#boarddefinition) in `boards/`.\n* The `Makefile` adds source files to `$SOURCES`, and 'wrapper' source files to `$WRAPPERSOURCES`. [Wrapper files](#wrapperfiles) are files that contain functions that are exposed to JS.\n* The script [`scripts/build_platform_config.py`](scripts/build_platform_config.py) is run which generates `gen/platform_config.h` from `boards/$BOARD.py` - this contains information like the amount of RAM, as well as buffer sizes and the amount of variables that will be stored.\n* The script [`scripts/build_pininfo.py`](scripts/build_pininfo.py) creates [the pin definitions](#pindefinitions) and puts them in `gen/jspininfo.c`\n* The script [`scripts/build_jswrapper.py`](scripts/build_jswrapper.py) is then run on `$WRAPPERSOURCES` - it generates `gen/jswrapper.c` - a hard-coded symbol table of built-in functions - from the [Wrapper files](#wrapperfiles).\n* Source files are built\n* On embedded targets, a linker file `gen/linker.ld` is auto-generated by [`scripts/build_linker.py`](scripts/build_linker.py) based on the [board definition](#boarddefinition) (available flash, ram, bootloader etc). In some targets (especially non-STM32) a pre-made linker file will be used instead.\n* Everything is linked using link time optimisation (where possible) - this helps to inline code that wouldn't otherwise have been inlined, and generally makes for a much more efficient binary.\n* The `elf` file is converted with `objdump` to:\n  * `bin` (for uploading to Espruino board)\n  * `hex` (for uploading to mbed/etc)\n  * `lst` (assembler listing - used for debugging)\n* [`scripts/check_size.sh`](scripts/check_size.sh) does a sanity check of the `bin` file's size against what's described in the [board definition](#boarddefinition), and fails if it won't fit into available flash memory.\n\nOddities\n--------\n\n* `malloc` and `free` are not included, because they're not needed and by default they use a large pool of valuable RAM to speed up memory allocation.\n* `strcpy`, `memcpy`, `memset` are all reimplemented in [`jsutils.h`](src/jsutils.h) - again because of initial issues with high flash memory usage\n* Espruino on STM32 uses its own [Maths library](lib/maths) for double arithmetic, because when building initially the libraries included by GCC dynamically allocated memory - which pulled in `malloc`. If we could move back to GCC libraries at some point it'd be a huge bonus\n\n\nBoard Definition File  <a name=\"boarddefinition\">\n-------------------------------------------------\n\nThe board definition files are `.py` files that reside in the [`boards`](boards) folder (for example [the Pico one](boards/PICO_R1_3.py)). They're used all over the place:\n\n* To work out the binary's name\n* To choose which libraries get built in via the Makefile\n* To specify the architecture-specific Makefile fragments are used\n* To create `gen/platform_config.h` via [`scripts/build_playform_config.py`](scripts/build_playform_config.py)\n* To generate the linker file `gen/linker.ld` using [`scripts/build_linker.py`](scripts/build_linker.py). Mainly STM32-based targets only.\n* To create [the pin definitions](#pindefinitions)\n* To create the HTML page on each individual board (referenced from [the top of the Reference](http://www.espruino.com/Reference)) using [`scripts/build_board_docs.py`](scripts/build_board_docs.py)\n* Converted to JSON (along with the pin declarations) and put [on espruino.com](http://www.espruino.com/json/PICO_R1_3.json) to help with autocomplete in the Web IDE (and auto-population of dropdowns in the Blockly editor). Converted by [`scripts/build_board_json.py`](scripts/build_board_json.py)\n\nTo create a custom board based on one of the distributed board file copy e.g. `PICO_P1_3.py` to `PICO_P1_3_CUSTOM.py` and change the content of `PICO_P1_3_CUSTOM.py` as required for the planed project. The new board file name is than\n`PICO_P1_3_CUSTOM`. All created boards with the suffix `_CUSTOM.py` are ignored by git.\n\nThese contain:\n\n### info\n\n* Board name and link (for the HTML file)\n* `boardname` - override board name visible at runtime in process.env.BOARD, otherwise the filename of py file is used\n* Default console device, pins, and baus rate (the device Espruino goes to when USB is unplugged or not built in)\n* `variables` - The number of variables to use (this depends on the amount of RAM available). Less than 1023 vars use 12 bytes per var, more uses 16 bytes. You have to adjust this such that there is spare room for the stack and static variables (on Espruino boards this means leaving around 16kB free, but on smaller boards it can be reduced a lot)\n* `bootloader` - whether the binary image needs compiling with a special USB-VCP bootloader (Espruino boards only)\n* `binary_name` - the name of the binary that'll be produced\n* `binaries` - available binaries - this is used by the Web IDE to allow the user to choose which binary to upload\n* `build` - controls what gets build via the Makefile:\n  * `optimizeflags` - flags like `-O3` to give to the compiler\n  * `libraries` - list of libraries to include - these get transformed into `USE_LIBNAME` defines\n  * `makefile` - list of commands/definitions to execute in the Makefile\n\n#### info.makefile definitions\n\nThis is a partial list of definitions that can be added in a `BOARD.py` file's `info.build.makefile` array, eg: `'DEFINES+=-DBLUETOOTH_NAME_PREFIX=\\'\"Puck.js\"\\''`\n\n* `BLUETOOTH_NAME_PREFIX=\"...\"` - NRF52 only: Make the Bluetooth LE device's name `BLUETOOTH_NAME_PREFIX` followed by the last 2 bytes of the MAC address.\n* `BLUETOOTH_ADVERTISING_INTERVAL=375` - set the default Bluetooth advertising interval (default 375)\n* `NFC_DEFAULT_URL=\"http://foo\"` - If defined, set the advertised NFC URL to the one given, plus `?a=ble_address`. Only do it for a fresh boot - not when code has been saved.\n* `PIN_NAMES_DIRECT=1` - Package skips out some pins (maybe there's `D0`,`D1`,`D3` but no `D2`), so the code must search rather than just offsetting based on pin number.\n* `DUMP_IGNORE_VARIABLES=\"...\\0\"` - string containing zero-terminated list of global variable names to ignore when `dump()` is called. Must be explicityly zero-terminated so there are 2 trailing 0s\n* `FSMC_BITBANG` - if using a built-in FSMC Graphics LCD, don't use the hardware but instead do it in software\n* `FLASH_64BITS_ALIGNMENT=1` -  For testing 64 bit flash writes on linux\n* `JSMODULESOURCES+=libs/js/.../foo.min.js` - include the given JS file as a module that can be used via `require(\"foo\")`\n  * `JSMODULESOURCES+=ModuleName:libs/js/.../module.min.js` - include as a module used with `require(\"ModuleName\")`\n  * `JSMODULESOURCES+=_:libs/js/.../boot.min.js` - include as a file that's run at boot time\n* `JSVAR_MALLOC` - Allocate space for variables at jsvInit time, rather than statically\n* `JSVAR_FORCE_16_BYTE` - Force 16 byte JsVars (rather than packing bits to get JsVar size down to the minimum possible)\n* `USE_FONT_6X8=1` - Also include in a 6x8 fixed width bitmap font\n* `ESPR_DCDC_ENABLE=1` - On NRF52 use the built-in DCDC converter (requires external hardware)\n* `ESPR_DCDC_HV_ENABLE=1` - On NRF52840 use the built-in high-voltage (REG0) DCDC converter (requires external hardware)\n* `ESPR_REGOUT0_1_8V=1` - On NRF52830/40 set the REG0 VCC voltage to 1.8v (the default is 3.3v)\n* `ESPR_VREF_VDDH=1` - when measuring system voltage (eg for E.getAnalogVRef()) use VDDH, not VDD (only useful if DCDC_HV enabled)\n* `ESPR_LSE_ENABLE` - On NRF52 use an external 32kHz Low Speed External crystal on D0/D1\n* `ESPR_NO_LOADING_SCREEN` - Bangle.js, don't show a 'loading' screen when loading a new app\n* `ESPR_BOOTLOADER_SPIFLASH` - Allow bootloader to flash direct from a file in SPI flash storage\n* `ESPR_BANGLE_UNISTROKE` - Build in 'unistroke' touch gesture recognition\n* `ESPR_UNICODE_SUPPORT` - Build with support for Unicode Strings\n* `SPIFLASH_SLEEP_CMD` - Set if SPI flash needs to be explicitly slept and woken up\n* `SPIFLASH_READ2X` - Enable 2x speed reads of external flash (using MOSI+MOSI as inputs)\n* `ESPR_JSVAR_FLASH_BUFFER_SIZE=32` - The buffer size in bytes we use when executing/iterating over data in external flash memory (default 16). Should be set based on benchmarks.\n* `ESPR_FS_LARGE_WRITE_BUFFER` - When using FS library, should we allocate a 1kb buffer on the stack for writes? It can be ~3x faster but then allocating 1k can be dangerous without checking\n* `ESPR_PBF_FONTS` - Enable support for loading and displaying Pebble-style PBF font files with `g.setFontPBF`\n* `ESPR_BLUETOOTH_ANCS` - Enable Apple ANCS(notification), AMS and CTS support\n* `ESPR_USE_STEPPER_TIMER` - add builtin `Stepper` class to handle higher speed stepper handling\n* `USB_CDC` - without this on ESP32C3, USB CDC will not be used for outputting the console\n* `ESPR_RTC_INITIALISE_TICKS` - STM32: how many systicks do we wait for the LSE to initialise. Usually 2s, so the default of 10 is fine for 84Mhz. Higher clocks need higher values here\n* `ESPR_RTC_ALWAYS_TRY_LSE` - STM32: If we boot and RTC is initialised but using LSI, try again at starting LSE\n* `ESPR_DELAY_MULTIPLIER` - STM32: At boot Espruino works out how many iterations are needed to produce a set time period of delay. You can hard-code this for a faster boot\n* `ESPR_MIN_WFI_TIME_MS` - STM32: default 0.1ms, but if set, Espruino won't enter __WFI sleep unless the next setInterval is more than this number of milliseconds away\n* `ESPR_GRAPHICS_SELF_INIT` - Should the Graphics library instantiate itself with its own `g` instance?\n* `ESPR_LCD_MANUAL_BACKLIGHT` - STM32/FSMC: Don't turn the backlight on and leave code to do this manually\n* `ESPR_DISABLE_KICKWATCHDOG_PIN=BTN1_PININDEX` - If this pin is 1, skip kickWatchdog calls (which would eventually force a reboot if WDT enabled)\n* `ESPR_TERMNINAL_NO_SCROLL` - disable scrolling in the onscreen terminal (once we get to the end, we just clear the screen and start at the top)\n\n\nThere are some specifically that are useful for cutting a few bytes out of the build:\n\n* `SAVE_ON_FLASH` - Remove some features (like any ES6 support) to target devices with ~128kB Flash (see next list)\n* `SAVE_ON_FLASH_EXTREME` - Pull out as many features as possible to target devices with ~128kB Flash that also want things like Filesystem support\n* `ESPR_PACKED_SYMPTR` - Packs string offsets of builtin symbols into their function pointers in JswSymPtr, saves 2 bytes per symbol\n* `JSVAR_FORCE_NO_INLINE` - Opposite of `JSVAR_FORCE_INLINE`. Force getter/setter functions not to be inlined. Saves ~2% code size. Ideally just leave it up to the compiler\n* `JSVAR_FORCE_INLINE` - Opposite of `JSVAR_FORCE_NO_INLINE`. Force getter/setter functions to be inlined. 2% faster but ~10% extra code size.\n* `NO_VECTOR_FONT=1` - don't compile in the vector font (this is usually only done for SAVE_ON_FLASH)\n* `NO_DUMP_HARDWARE_INITIALISATION=1` - don't create lines like `digitalWrite(D1,1)` for `dump()/save()` to recreate hardware state\n* `USE_TAB_COMPLETE=0` - Don't include tab completion (default is yes unless SAVE_ON_FLASH is defined)\n* `USE_DEBUGGER=0` - Don't include the debugger (default is yes unless SAVE_ON_FLASH is defined)\n* `USE_NETWORK_JS=0` - Don't include JS networking lib used for handling AT commands (default is yes if networking is enabled)\n* `ESPR_NO_SOFTWARE_SERIAL` - don't build in software serial support\n* `ESPR_NO_SOFTWARE_I2C` - don't build in software I2C support\n* `ESPR_NO_BLUETOOTH_MESSAGES` - don't include text versions of Bluetooth error messages (just the error number)\n* `ESPR_LIMIT_DATE_RANGE` - limits the acceptable range for Date years (saves a few hundred bytes)\n* `ESPR_NO_REGEX_OPTIMISE` - strips out some speed optimisations from the regex library\n* On nRF52, `'LDFLAGS += -nostartfiles', 'ASFLAGS += -D__STARTUP_CLEAR_BSS -D__START=main',` can save ~300b by not including CRT startup code\n\n\nThese are set automatically when `SAVE_ON_FLASH` is set (see `jsutils.h`)\n\n* `SAVE_ON_FLASH_MATH` - Replace some Maths functions that use a bunch of Flash memory (sin/atan/atan2/fft) with slower, smaller versions\n* `ESPR_NO_GET_SET` - No Getter/setter functionality\n* `ESPR_NO_OBJECT_METHODS` - No methods in objects like `{method() { ... }}`\n* `ESPR_NO_PROPERTY_SHORTHAND` - No property shorthand in objects like `{a}`\n* `ESPR_NO_LINE_NUMBERS` - disable storing and reporting of Line Numbers. Usually these take 1 var per function, but if we're executing a function from flash we can just work it out from the file when needed\n* `ESPR_NO_LET_SCOPING` - don't create scopes for `let` (treat it like `var`, which was the 2v13 and earlier behaviour)\n* `ESPR_NO_PROMISES` - Don't include promise-handling functions\n* `ESPR_NO_PRETOKENISE` - Don't include code to pretokenise functions marked with `\"ram\"` - code pretokenised in the IDE can still be executed\n* `ESPR_NO_PASSWORD` - Disable password protection on the console (E.setPassword/E.lockConsole)\n\n\n### chip\n\n* `part` - Chip part number (this is defined in the compiler - eg if the part is `STM32F401CDU6`, `-DSTM32F401CDU6` is put on the GCC command-line)\n* `family` - Chip family - also defined, but used in the Makefile to define what gets built\n* `package` - Used for ST chips when working out [Pin Definitions](#pindefinitions) to ensure that the right pins are included\n* `ram` on chip in KB\n* `flash` on chip in KB\n* `speed` of chip in MHz\n* Number of `usart`s\n* Number of `spi`s\n* Number of `i2c`s\n* Number of `adc`s\n* Number of `dac`s\n* `saved_code` - how and where to save JS code in the chip's flash memory\n  * The `address` of the start of the code in flash memory. Note that on STM32 chips this\n    is at 0x08000000 even though code executes from 0x00000000 (the two areas are mirrored but\n    0x00000000 is faster to execute from while 0x08000000 is what's needed for writing to flash)\n  * The `page_size` in bytes of the first flash page containing code (not used now?)\n  * The number of flash `pages` we're using for code (not used now?)\n  *  `flash_available` in KB, used as a sanity check by [`scripts/check_size.sh`](scripts/check_size.sh) after the build completes\n* `place_text_section` what address to start the program code at - This is `0` if not specified,\n  but is useful in devices like the Pico where varying page sizes mean that the program code may\n  be located after the saved program code (and/or bootloader)\n\n### board\n\nNames of rows of pins - used solely by [`scripts/build_board_docs.py`](scripts/build_board_docs.py) to generate the nice HTML description.\n\nThere can also be a `_css` element which contains raw Cascading Style Sheets, which contain carefully tweaked positions of the rows of pins defined in `board`, to align with the background image in [`boards/img`](boards/img)\n\n### devices\n\nThis is a list of built-in stuff on the board that is made accessible to Espruino. It's:\n\n* Parsed and turned into a series of `#define`s in `gen/platform_config.h` by [this code](scripts/build_platform_config.py#L298).\n* Used for the magenta tags shown near pins in the board's HTML file - that warn users that the pin might be used for some other function.\n\nStuff you can use is `LED1`-`LED8`, `BTN1`-`BTN4`, `USB`, `LCD` (for boards with FSMC LCDs built in), `SD` (SD card), `JTAG` (when JTAG pins are defined, but we need to make sure we leave them alone when the board resets). You can also define your own.\n\n\nPin Definitions <a name=\"pindefinitions\">\n---------------\n\nThe pin definitions are created by [`scripts/build_pininfo.py`](`scripts/build_pininfo.py`) and are stored in `gen/jspininfo.c`. The script calls\n `get_pins` in `boards/$BOARD.py` and a structure of the following form is returned:\n\n```\n[\n   { \"name\":\"PD12\", \"sortingname\":\"D12\", \"port\":\"D\", \"num\":\"20\", \"functions\":{}, \"csv\":{} },\n   { \"name\":\"PD13\", \"sortingname\":\"D13\", \"port\":\"D\", \"num\":\"23\", \"functions\":{ \"SPI1_SCK\":0 }, \"csv\":{} },\n   ...\n]\n```\n\n`get_pins` can define the raw array (like [boards/MICROBIT.py](boards/MICROBIT.py)), or on boards with STM32 chips like the [Pico](boards/PICO_R1_3.py) some utility functions auto-generate the code from [CSV files](pins) that were copied from ST's datasheets.\n\n* `name` is the pin name - due to random historical reasons (from ST datasheets) it needs prefixing with `P`\n* `sortingname` is the name, but padded so that when it's sorted everything appears in the right order\n* `port` is the actual port - on ESP8266 this might not be needed and could just default to `D`\n* `num` is the pin number - this doesn't have to match `D` - it's what is needed internally to access the hardware. For instance [Olimexino](boards/OLIMEXINO_STM32.py) has 'logical' pins that actually map all over the place.\n* `functions` is a map of pin functions to their 'alternate functions' (an STM32 chip thing - STM32F4 chips can have different peripherals on each pin, so the alternate function is a number that you shove in that pin's register in order to connect it to that peripheral). The format, for instance `I2C1_SDA` is important as it's parsed later and is used to build `gen/jspininfo.c`. The code to parse them [is here](scripts/pinutils.py#L26)\n  * You can add `\"NEGATED\":0` to a pin's `functions` to make Espruino invert that pin in software (to JS 1 will output 0v, 0 will output 3.3v)\n  * You can add `\"NO_BLOCKLY\":0` to a pin's `functions` to stop that pin appearing in the Blockly graphical editor (if the pin is 'internal')\n  * You can add `\"3.3\":0` to a pin's `functions` to ensure that in a board's pinout file (eg https://www.espruino.com/Original#pinout) a pin is shown as only being capable of 3.3v maximum IO\n* `csv` isn't needed, but when using data grabbed from csv files from ST's datasheets [like this](boards/pins/stm32f401.csv) it contains the raw data for debugging)\n\n\nWrapper Files <a name=\"wrapperfiles\">\n-------------\n\nWrapper files are normal C source files that contain functions that are exposed to JavaScript code in the interpreter. They're prefixed `jswrap_`.\n\nSee [libs/README.md](libs/README.md) for a short tutorial on how to add your wrapper files.\n\nEach function to be exposed has a specially formatted comment above it containing JSON. The format of this JSON is specified in [this file](https://github.com/espruino/Espruino/blob/master/scripts/common.py#L52)\n\nAn example of a wrapper file might be:\n\n```\n#include \"jswrap_hello.h\"  // We need the declaration of the jswrap_hello_world function\n#include \"jsinteractive.h\" // Pull in the jsiConsolePrint function\n\n// Let's define the JavaScript class that will contain our `world()` method. We'll call it `Hello`\n/*JSON{\n  \"type\" : \"class\",\n  \"class\" : \"Hello\"\n}\nSome info about this class\n*/\n\n// Now, we define the `jswrap_hello_world` to be a `staticmethod` on the `Hello` class\n/*JSON{\n  \"type\" : \"staticmethod\",\n  \"class\" : \"Hello\",\n  \"name\" : \"world\",\n  \"generate\" : \"jswrap_hello_world\"\n}\nWe can write simple markdown-formatted comments in here. These\nthen get scanned and turned into the Espruino [Reference](http://www.espruino.com/Reference)\n\n * Bulletted\n * List\n*/\nvoid jswrap_hello_world() {\n    jsiConsolePrint(\"Hello World!\\r\\n\");\n}\n```\n\nIn the build process, [`scripts/build_jswrapper.py`](scripts/build_jswrapper.py) parses all these files, pulls out the headers, and generates `gen/jswrapper.c` - a hard-coded symbol table that resides on flash memory. It's consulted whenever\n\n[`scripts/build_jswrapper.py`](scripts/build_jswrapper.py) also needs to be aware of what definitions were passed to the compiler - for instance if `SAVE_ON_FLASH` is defined, several non-vital functions will not be compiled in (so should not appear in the symbol table).\n\nThe wrapper files are also parsed by:\n\n* [`scripts/build_docs.py`](scripts/build_docs.py), which builds the HTML file used for the Espruino [Reference](http://www.espruino.com/Reference).\n* [`scripts/build_tern_json.js`](scripts/build_tern_json.js), which generates a JSON description of all functions (along with their documentation) which is used for code completion in the Web IDE *and to parse all code examples in order to produce the 'Examples' links in the [Reference](http://www.espruino.com/Reference)*.\n"
        },
        {
          "name": "README_Building.md",
          "type": "blob",
          "size": 15.341796875,
          "content": "# Building\n\nThere are several options to building Espruino on various platforms for the OS and board versions that are avaiable.\n\nTo build and run Espruino on the OS that one is using is as simple as the following, if prerequisits are met:\n\n```bash\nmake clean && make\n```\n\n**Note:**\n\n* In general, have a look through the head of the Makefile to see what other options are available\n* If you're swapping between compiling for different targets, you need to call `make clean` before you compile for the new target.\n* ```RELEASE=1``` for performance and code size, without it, assertions are kept for debugging.\n* ```DEBUG=1``` is available (it may not be possible to build many targets with `DEBUG=1` without first disabling features in `boards/BOARDNAME.py`\n\n## Building a specific board\n\nTo work out which 'Board name' to use, simply look in the `boards` folder for the\nright `BOARD.py` file. To build for `boards/PUCKJS.py` use `BOARD=PUCKJS RELEASE=1 make`\n\n## Super Easy GitHub method\n\nGitHub now automatically builds Espruino for the most popular targets. \n\nSimply go to `https://github.com/espruino/Espruino/actions`, click on the build you're interested in,\nthen scroll down to the `Artefacts` heading. Just click on an artefact (for instance `PUCKJS`) to download\na zip **containing** the files.\n\nTo perform a DFU update on an nRF52 device, you need to unzip the `BOARDNAME.zip` file and\nthen **the zip file inside that** called `espruino_2vXX.YY_boardname.zip` is the one you \nneed to use for the firmware updates. **On MacOS it may not be immediately apparent that \nthe thing in `BOARDNAME.zip` named `espruino_2vXX.YY_boardname` is another zip file, and not a folder.**\n\nIf you fork the Espruino repository and make changes yourself you should be able\nto see the builds for your changes at `https://github.com/YOUR_USERNAME/Espruino/actions`\n\n**Note:** the firmware files produced by this method are for uploads via a bootloader only.\nIf you need a full binary file for uploading [via SWD](https://www.espruino.com/AdvancedDebug)\nyou'll need to follow the instructions below.\n\n\n## Under Linux (recommended)\n\nEspruino is easy to build under Linux, for either for Espruino running on Linux or a board.\n\n### Easy Method : provision.sh\n\nSimply run the following with the name of your board to set\nyour computer up ready for a build:\n\n```bash\nsource scripts/provision.sh BOARDNAME\n```\n\nThis should work for common platforms on Linux, but will only set\npaths up for your current session. You'll have to run it again\nnext time you log in.\n\n### Manual Method (not recommended)\n\n#### For Espruino\n\n\n```bash\nsudo apt-get update\nsudo apt-get install -y \\\n  build-essential git python python-pip\nsudo pip install --upgrade pip\n# User choice for placement of source repos\nmkdir -p ~/source/repos/github/espruino\ncd ~/source/repos/github/espruino\ngit clone https://github.com/espruino/Espruino.git\ncd Espruino\nmake clean && make\nchmod +x espruino && sudo cp espruino /usr/local/bin\n```\n\n#### for cross compilation to Puck.js\n\nHaving successfully created an native OS Espruino, try a cross compilation.\n\n```bash\nsudo apt-get update\nsudo pip install nrfutil\nsudo apt-get install -y \\\n  lib32z1 lib32ncurses5\nwget https://launchpad.net/gcc-arm-embedded/5.0/5-2016-q3-update/+download/gcc-arm-none-eabi-5_4-2016q3-20160926-linux.tar.bz2\ntar xjf gcc-arm-none-eabi-5_4-2016q3-20160926-linux.tar.bz2\nsudo mv gcc-arm-none-eabi-5_4-2016q3 /usr/local\nexport PATH=/usr/local/gcc-arm-none-eabi-5_4-2016q3/bin:$PATH\ncd ~/source/repos/github/espruino/Espruino\nmake clean && DFU_UPDATE_BUILD=1 BOARD=PUCKJS RELEASE=1 make\nls -l *puckjs*\n```\n\n## Under MacOS\n\n#### Create a self growing sparse image and mount \n\n```\nmkdir ~/diskimages\n\nhdiutil create -size 10g -fs \"Case-sensitive HFS+\" -volname Espruino ~/diskimages/Espruino.sparsebundle\n\nhdiutil attach ~/diskimages/Espruino.sparsebundle\n\nsudo ln -s /Volumes/Espruino/ /Espruino\n\ncd /Espruino\n\n```\n\n#### Resize if needed\n\n```\nhdiutil detach /Volumes/Espruino\nhdiutil resize -size 15G ~/diskimages/Espruino.sparsebundle\nhdiutil attach ~/diskimages/Espruino.sparsebundle\n```\n\n#### Create some directories on /Espruino \n\n```\nmkdir /Espruino/{gcc,sdk,repos,tmp}\n\n/Espruino -+- gcc     GNU Compiler Collection for different processors\n           +- sdk     Software Development Kits\n           +- repos   like Espruino EspruinoDocs ... \n\t   +- tmp     temporary files  \n```\n\n#### Install build and flash tools\n\n```\nbrew upgrade gnu-sed gawk binutils gperftools gettext wget help2man libtool autoconf automake\n\n# version 1.4.0\nbrew upgrade stlink\n\n# version 2.1\npip install esptool\n```\n\n#### Get GNU Compiler Collection \n\n```\n# Espruino, Pico, PuckJS, EspruinoWifi \n# gcc arm https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads\ncurl -Ls https://goo.gl/42fcKX | tar -C gcc -xvzf - \n\n# xtensa gcc - pre buid from  https://github.com/MaBecker/esp8266\ncurl -Ls https://github.com/MaBecker/esp8266/xtensa-lx106-elf-4.8.5.tgz | tar -C gcc -xvzf -\n```\n\n#### Get SDK\n\n```\n# ESP8266/esp8285 starting with 01  \n# espressif ESP8266 2.0 <- actual one \nwget -P tmp  https://github.com/espressif/ESP8266_NONOS_SDK/archive/v2.0.0.zip\nunzip -d sdk tmp/v2.0.0.zip\nrm tmp/v2.0.0.zip\n# add esptool.py\nmkdir /Espruino/sdk/ESP8266_NONOS_SDK-2.0.0/esptool\nln -s /usr/local/bin/esptool.py /Espruino/sdk/ESP8266_NONOS_SDK-2.0.0/esptool/\n```\n\nThe other stuff is similar to Linux\n\n## Under Windows\n\nIt is possible to build Espruino under Windows with the following addition to the Linux explanation:\n\n* Install Bash on Ubuntu on Windows 10 <https://msdn.microsoft.com/da-dk/commandline/wsl/install_guide>\n  * After enabling, just use the instructions for Linux\n\nNote:\n\n* there is no access to USB in the present version\n  * copy any crosscompile output to one's user directory and either bluetooth or USB the result to the target\n* Ubuntu 14.04 LTS is the present version.\n\nOr use a Virtual machine as described below dependent on ones taste.\n\n## Cross compilation\n\n### for Raspberry Pi\n\nUsing [RASPBIAN JESSIE WITH PIXEL](https://www.raspberrypi.org/downloads/raspbian/), getting Espruino is easy.\n\nTo enable the full power of Espruino on the Pi, [WiringPi](http://wiringpi.com/):\n\n* ```sudo apt-get install wiringpi```\n\nGetting Espruino:\n\n* clone this repository and cd into the directory\n  * ```make clean && make```\n  * ```chmod +x espruino && sudo cp espruino /usr/local/bin```\n\n### for OpenWRT\n\nFollow the instructions for [OpenWRT build system](https://wiki.openwrt.org/doc/howto/buildroot.exigence)\n\nAfter a successful OpenWRT build, [OpenWRT Espruino packages](https://github.com/vshymanskyy/OpenWRT-Espruino-packages)\n\n### for STM32 Boards (incl. [Espruino Board](http://www.espruino.com/EspruinoBoard)\n\n```bash\nmake clean && BOARD=BOARDNAME RELEASE=1 make\n```\n\nWhere BOARDNAME is one of:\n\n* `PICO_R1_3` for Espruino Pico\n* `ESPRUINOBOARD` for Original Espruino\n* `ESPRUINOWIFI` for Espruino WiFi\n\nOr choose another board name based on the files in `boards/*.py`\n\n* `BOARD=BOARDNAME RELEASE=1 make serialflash` will flash to /dev/ttyUSB0 using the STM32 serial bootloader (what's needed for the Espruino and HY boards)\n* `BOARD=BOARDNAME RELEASE=1 make flash` will flash using st-flash if it's a discovery board, the maple bootloader if using that board, or will copy the binary to `/media/NUCLEO` if using a Nucleo board.\n\nIt may complain that there isn't enough space on the chip. This isn't an issue unless you save to flash, but you can fix the error in a few ways:\n\n* Disable the check by adding `TRAVIS=1`\n* Change the compile flags from `-O3` to `-Os` in the `Makefile`\n* Knock out some functionality (like `USE_GRAPHICS=1`) that you don't need in the `Makefile`\n\n**Note:** Espruino boards contain a special bootloader at `0x08000000` (the default address), with the Espruino binary moved on 10240 bytes to `0x08002800`. To load the Espruino binary onto a board at the correct address, use `BOARD=ESPRUINO_1V3 RELEASE=1 make serialflash`. If you want to make a binary that contains the bootloader as well as Espruino (like the ones that the Espruino Web IDE expects to use) use the script `scripts/create_espruino_image_1v3.sh` which will compile the bootloader *and* Espruino, and then join them together.\n\n### for [Nordic Semiconductor's nRF51/nRF52 series devices](https://www.nordicsemi.com/eng/Products/Bluetooth-low-energy)\n\nDependant on the board, either usb or bluetooth can be used to program the board or install the bootloader from different devices.\n\n* Bluetooth Low energy\n  * the board will appear as `Espruino XYZ` where `XYZ` is the board name\n* USB\n  * the board appears as a drive to drop a hex on\n\n#### for [Puck.js](http://www.espruino.com/Puck.js) and [Pixl.js](http://www.espruino.com/Pixl.js)\n\nThe Puck.js and Pixl.js are based on the nRF52\n\n```bash\n# Puck.js\nmake clean && DFU_UPDATE_BUILD=1 BOARD=PUCKJS RELEASE=1 make\n# Pixl.js\nmake clean && DFU_UPDATE_BUILD=1 BOARD=PIXLJS RELEASE=1 make\n```\n\nThe resulting file is a zip that has to be transferred via Bluetooth Low Energy.\nSee the [Puck.js](http://www.espruino.com/Puck.js#firmware-updates) and [Pixl.js](http://www.espruino.com/Pixl.js#firmware-updates) pages for information concerning transferring the ZIP.\n\n#### for [NRF52-DK](https://www.nordicsemi.com/eng/Products/Bluetooth-low-energy/nRF52-DK)\n\nAll boards based on the nRF52 have RAM and Flash to support Espruino without feature disablement.\n\n```bash\nmake clean && BOARD=NRF52832DK RELEASE=1 make\n```\n\n#### for [micro:bit](http://microbit.org/)\n\nThe micro:bit is based on the nRF51.\n\n* ```make clean && BOARD=MICROBIT RELEASE=1 make```\n* Drop the hex generated on the micro:bit drive and it is then an Espruino.\n\nNote:\n\n* At the time of writing, if one uses the [Espruino Web IDE](https://www.espruino.com/Web+IDE), access the Settings->Communications\n  * Request board details on connect: false\n  * Throttle Send: true\n\n#### for [NRF51-DK](https://www.nordicsemi.com/eng/Products/nRF51-DK)\n\nAll boards based on the nRF51 are limited in RAM and Flash so many features are disabled.\n\n```bash\nmake clean && BOARD=NRF51822DK RELEASE=1 make\n```\n\n### for esp8266\n\nIn order to compile for the esp8266 on Linux several pre-requisites have to be installed:\n\n* the esp-open-sdk from <https://github.com/pfalcon/esp-open-sdk>, use make STANDALONE=n\n* the Espressif NONOS SDK (version 2.2.1) from <https://github.com/espruino/EspruinoBuildTools/blob/master/esp8266/ESP8266_NONOS_SDK-2.2.1.tgz>\n\nTo run make you need to pass a couple of environment variables to `make`.  These include:\n\n* `BOARD=ESP8266_BOARD`\n* `FLASH_4MB=1` if you have an esp-12\n* `ESP8266_SDK_ROOT=<Path to the 2.21 SDK>`\n* `PATH=<Path to esp-open-sdk/xtensa-lx106-elf/bin/>`\n* `COMPORT=</dev/ttyUSB0|COM1|...>`\n\nThe easiest is to place the following lines into a script, adapt it to your needs and then run it.\n\n```bash\n\n#! /bin/bash\nexport BOARD=ESP8266_BOARD\nexport FLASH_4MB=1\nexport ESP8266_SDK_ROOT=/esp8266/sdk/ESP8266_NONOS_SDK-2.2.1\nexport PATH=$PATH:/esp8266/gcc/xtensa-lx106-elf/bin/\nexport COMPORT=/dev/ttyUSB0\nmake clean && make $*\n\n```\n\n* If you do `make flash` it will try to flash your esp8266 module over serial\n* If you do `make wiflash` it will try to flash you esp8266 module over wifi, which assumes\n  that it's already running Espruino\n* You will also get an `espruino_2v0x_*_esp8266.tgz` archive, which contains everything you\n  need to flash a module (except for esptool.py), including a README_flash.txt\n  \n### for esp32\nOn 64 bit linux:\n\n```\ngit clone https://github.com/espruino/Espruino.git\ncd Espruino\nsource scripts/provision.sh ESP32\nmake clean && BOARD=ESP32 make\n```\n\nIf you are on a different platform such as the Mac, you will need to install the toolchain and esp-idf for your platform, see\nhttp://esp-idf.readthedocs.io/en/latest/macos-setup.html\n\nThe easiest way to get the esp-idf environment is to install:\nhttps://github.com/espruino/EspruinoBuildTools\n\nand then replace the toolchain with what is required for your platform.\n\nYou only need to use the *EspruinoBuildTools* if you want to compile esp-idf libaries\n\n#### Building on Eclipse\n\nWhen building on Eclipse, update the Makefile properties to include the definitions show above.  The easiest way to achieve\nthat task is to right-click your Espruino project and select `properties`.  From there, navigate to `C/C++ Build > Environment`.\n\n## Embedding in other applications\n\nYou can build Espruino with `BOARD=EMBED RELEASE=1 make` and a `.c` and `.h` file will be generated.\n\nIt doesn't contain any of the hardware access code, just the basic JS interpreter.\n\nSee `targets/embed/test.c` for an example of usage.\n\n\n## Documentation\n\n```bash\n\nsudo pip install markdown\npython scripts/build_docs.py\n\n```\n\nThis will create a file called ```functions.html``` that is a version of [the reference pages](http://www.espruino.com/Reference),\nbut based on your source code.\n\n## Virtual Machines under Windows and MacOS\n\nThe easiest solution for a Virtual Machine for Windows and MacOS is [VirtualBox](https://www.virtualbox.org/).\nA really easy way to provision, ie setup the system for development, is [Vagrant](https://www.vagrantup.com).\n\nNote:\n\n* Windows\n  * Installation of <https://git-scm.com/> gives a ssh that can be used with vagrant ssh\n\n### Vagrant and VirtualBox\n\n* For your host OS (Windows or MacOS)\n  * Download and install [VirtualBox](https://www.virtualbox.org/)\n  * Download and install [Vagrant](https://www.vagrantup.com/downloads.html)\n  * Note: for MacOS, the two previous steps can be accomplished easily with [Homebrew Cask](https://brew.sh)\n    * `brew cask install virtualbox vagrant`\n* Clone this repository and navigate with the command prompt to the contents\n* Install the auto-network plugin\n  * `vagrant plugin install vagrant-auto_network`\n* Execute\n  * `vagrant up`\n    * This will take a little while while the box is downloaded, and your virtual machine is provisioned.\n  * `vagrant ssh`\n    * a ssh session into your new VM will be created.\n  * `cd /vagrant && make clean && make`\n    * a native OS version of Espruino is now built. See this documentation for further examples\n  * To exit the ssh session\n    * `exit`.\n  * On the host OS, the following are useful vagrant commands\n    * `vagrant suspend`\n      * will pause the VM\n    * `vagrant halt`\n      * will stop the VM\n    * See Vagrant's [\"Getting Started\"](https://www.vagrantup.com/docs/getting-started/index.html) page for further information.\n\n### VirtualBox\n\nIf one does not wish to use vagrant, then install Virtual Box and use the Linux method.\n\n## USB access\n\nIn order to access USB, bluetooth or connected USB devices, one has USB filters to dedicate access to the guest OS.\nThe easiest method is via the VirtualBox Manager, and select which devices should be dedicated to the VM with the device filter.\nNote: VirtualBox Guest Additions from VirtualBox are required.\n\n### To flash Espruino from the VM\n\n* Plug the Espruino board in while holding BTN1, and wait for Windows to finish connecting to the USB device\n* Go into the VirtualBox Manager (There's no need to stop your VM)\n* Click on `USB`, then click on the icon with the `+` sign (With the tooltip 'Adds a new USB filter ... selected USB device')\n* Click on the device labeled `STMicroelectronics STM32 ...`\n* Now unplug the Espruino board, wait a few seconds, and plug it back in (holding BTN1 again)\n* Go back into the VM, and type `sudo BOARD=ESPRUINO_1V3 RELEASE=1 make serialflash`\n* Your board will now be flashed\n\n**Note:** if you want to you can change permissions so you don't need `sudo` by typing `sudo cp misc/45-espruino.rules /etc/udev/rules.d;sudo udevadm control --reload-rules` and then re-inserting the board.\n"
        },
        {
          "name": "README_JIT.md",
          "type": "blob",
          "size": 7.79296875,
          "content": "Espruino JIT compiler\n======================\n\nThis compiler allows Espruino to compile JS code into ARM Thumb code.\n\nRight now this roughly doubles execution speed.\n\nWorks:\n\n* Assignments\n* Maths operators, postfix operators\n* Function calls\n* Member access (with `.` or `[]`)\n* `for (;;)` loops\n* `if ()`\n* `i++` / `++i`\n* `i+=`\n* ternary operators\n* `~i`/`!i`/`+i`/`-i`\n* Function arguments\n* `var/const/let` (`const`/`let` scoping does not work at the moment)\n* On the whole functions that can't be JITed will produce a message on the console and will be treated as normal functions.\n* Short-circuit execution (`&&`/`||`)\n* Array `[]` and Object `{}` declarations\n\nDoesn't work:\n\n* `new X(...)`\n* Everything not mentioned under `Works`\n\nPerformance:\n\n* When calling a JIT function, we use existing FunctionCall code to set up args and an execution scope (so args can be passed in)\n* Variables are referenced at the start just once and stored on the stack\n  * We could also maybe extend it to allow caching of constant field accesses, for instance 'console.log'\n* Built-in global functions are called directly which is a ton faster, but methods like 'console.log' are not currently\n* Peephole optimisation could still be added (eg. removing `push r0, pop r0`) but this is the least of our worries\n* Stuff is in place to allow ints to be stored on the stack and converted when needed. This could allow us to keep some vars as ints, but control flow makes this hard\n* When a function is called we load up the address as a 32 bit literal each time. We could maybe have a constant pool or local stub functions?\n\nPossible improvements:\n\n* We always output a `return undefined` even if the function has already returned\n\n\n## Testing\n\n### Linux\n\n* Build for Linux `USE_JIT=1 DEBUG=1 make`\n* Test with `./espruino --test-jit` - doesn't do much useful right now\n* CLI test `./espruino -e 'function jit() {\"jit\";return 123;}'`\n* On Linux builds, a file `jit.bin` is created each time JIT runs. It contains the raw Thumb code.\n* Disassemble binary with `arm-none-eabi-objdump -D -Mforce-thumb -b binary -m cortex-m4 jit.bin`\n\nYou can see what code is created with stuff like:\n\n```\n./espruino -e \"E.setFlags({jitDebug:1});trace(function jit() {'jit';return 1+2;})\"\n\n./espruino -e 'E.setFlags({jitDebug:1});function jit() {\"jit\";return \"Hello\"}'\n\n./espruino -e 'E.setFlags({jitDebug:1});function jit() {\"jit\";print(42)}'\n\n./espruino -e 'E.setFlags({jitDebug:1});function jit() {\"jit\";i=5}'\n\n./espruino -e 'E.setFlags({jitDebug:1});function jit() {\"jit\";if (i<3) print(\"T\"); else print(\"X\");}}'\n\n./espruino -e 'E.setFlags({jitDebug:1});function jit() {\"jit\";for (i=0;i<5;i=i+1) print(i);}'\n```\n\n\n### Raspberry Pi\n\nThe Pi can execute Thumb-2 code (Pi 3 and on only)\n\n* Just build a normal Pi Binary on the Pi: `USE_JIT=1 DEBUG=1 make`\n* CLI test `./espruino -e 'function jit() {\"jit\";print(\"Hello World\");};jit()'`\n* This may or may not work - sometimes it does (especially when launched from GDB) but I'm unsure why it's flakey!\n* Dump binary on pi with `objdump -D -Mforce-thumb -b binary -m arm jit.bin`\n\n### Build for an actual device\n\n* Build for ARM: `USE_JIT=1 BOARD=BOARD_NAME RELEASE=1 make flash`\n* You can also add `CFLAGS+=-DDEBUG_JIT_CALLS=1` to ensure that function names are included in debug info even for a release build\n\n\n```\n// Enable debug output\nE.setFlags({jitDebug:1});\n\n\nfunction jit() {'jit';return 1;}\njit()==1\n\nfunction jit() {'jit';return 1+2+3+4+5;}\njit()==15\n\nfunction jit() {'jit';return 'Hello';}\njit()==\"Hello\"\n\nfunction jit() {'jit';return true;}\njit()==true\n\nvar test = \"Hello world\";\nfunction jit() {'jit';return test;}\njit()==\"Hello world\";\n\nfunction t() { print(\"Hello\"); }\nfunction jit() {'jit';t();}\njit(); // prints 'hello'\n\nfunction jit() {'jit';print(42);}\njit(); // prints 42\n\n\nfunction jit() {'jit';print(42);return 123;}\njit()==123 // prints 42, returns 123\n\nfunction jit() {'jit';return !123;}\njit()==false\nfunction jit() {'jit';return !0;}\njit()==true\nfunction jit() {'jit';return ~0;}\njit()==-1\nfunction jit() {'jit';return -(1);}\njit()==-1\nfunction jit() {'jit';return +\"0123\";}\njit()==83 // octal!\n\nE.setFlags({jitDebug:1});\nfunction jit(a) {'jit';return a?5:10;}\njit(1)==5\njit(0)==10\n\nfunction t() { return \"Hello\"; }\nfunction jit() {'jit'; return t()+\" world\";}\njit()==\"Hello world\"\n\nfunction jit() {'jit';digitalWrite(LED1,1);}\njit(); // LED on\n\n\nfunction jit() {'jit';return i++;}\ni=0;jit()==0 && i==1\n\nfunction jit() {'jit';return ++i;}\ni=0;jit()==1 && i==1\n\nfunction jit() {'jit';return i+=\" world\";}\ni=\"hello\";jit()==\"hello world\" && i==\"hello world\";\n\nfunction jit() {'jit';return i-=2;}\ni=3;jit()==1 && i==1\n\nfunction jit() {'jit';i=42;}\njit();i==42\n\nfunction jit() {'jit';return 1<2;}\njit()==true\n\nfunction jit() {\"jit\";if (i<3) print(\"T\"); else print(\"X\");print(\"--\")}\ni=2;jit(); // prints T,--\ni=5;jit(); // prints X,--\n\n\nfunction jit() {\"jit\";for (i=0;i<5;i=i+1) print(i);}\njit(); // prints 0,1,2,3,4\n\nfunction jit() {\"jit\";for (i=0;i<5;i++) print(i);}\njit(); // prints 0,1,2,3,4\n\nfunction jit() {\"jit\";for (var i=0;i<5;++i) print(i);}\njit(); // prints 0,1,2,3,4\n\nfunction jit() {\"jit\";while (0) {}}\njit();\nfunction jit() {\"jit\";while (1) return 42;}\njit()==42\nfunction jit() {\"jit\";while (0) return 0;return 42;}\njit()==42\n\nfunction jit(i) {\"jit\";while (i--) print(i);}\njit(5) // prints 4,3,2,1,0\n\nfunction jit() {\"jit\";while (i--) j++;}\ni=1;j=0;jit();  // ok, does nothing\nfunction jit() {\"jit\";while (0) print(5); print(\"Done\"); } jit(); // prints 'Done'\n\nfunction jit() {\"jit\";do { print(i); } while (i--);}\ni=5;jit(); // prints 5,4,3,2,1,0\n\nfunction nojit() {for (i=0;i<1000;i=i+1);}\nfunction jit() {\"jit\";for (i=0;i<1000;i=i+1);}\nt=getTime();jit();getTime()-t // 0.11 sec\nt=getTime();nojit();getTime()-t // 0.28 sec\n\n\na = {b:42,c:function(){print(\"hello\",this)}};\nfunction jit() {\"jit\";return a.b;}\njit()==42\nfunction jit() {\"jit\";return a[\"b\"];}\njit()==42\nfunction jit() {\"jit\";a.c();}\njit(); // prints 'hello {b:42,...}'\n\na=Uint8Array([42])\nfunction jit(){\"jit\";var i=0;return a[i];}\njit()==42\n\nfunction jit(a,b) {'jit';return a+\"Hello world\"+b;}\njit(1,2)==\"1Hello world2\"\n\nfunction jit() {'jit';return [1,2,1+2,\"Hello\",\"World\"];}\njit()==\"1,2,3,Hello,World\"\n\nfunction jit() {'jit';return {a:42,b:10,12:5};}\nJSON.stringify(jit()) == '{\"a\":42,\"b\":10,\"12\":5}'\n\nE.setFlags({jitDebug:1});\nfunction jit() {'jit';return 0&&2;}\njit()==0\nfunction jit() {'jit';return 3&&2;}\njit()==2\nfunction jit() {'jit';return 0||2;}\njit()==2\nfunction jit() {'jit';return 3||2;}\njit()==3\n\n\njit = {a:42, jit:function(){'jit';return this.a;}}\njit.jit()==42\n\nfunction nojit() {\n  for (var i=0;i<10000;i++) {\n    digitalWrite(LED,1);\n    digitalWrite(LED,0);\n  }\n}\nfunction jit() {\"jit\";\n  for (var i=0;i<10000;i++) {\n    digitalWrite(LED,1);\n    digitalWrite(LED,0);\n  }\n}\nt=getTime();nojit();getTime()-t // 6.96\nt=getTime();jit();getTime()-t   // 2.02\n\n\nt=getTime();function jit() {\"jit\";\n  for (var i=0;i<10;i++) {\n    print(\"Start\");\n    digitalWrite(LED,1);\n    digitalWrite(LED,0);\n    print(\"Stop\");\n  }\n};print(\"JIT compile time\", getTime()-t,\"s\")\n```\n\nRun JIT on ARM and then disassemble:\n\n```\n// on ARM\nfunction jit() {\"jit\";return 1;}\nprint(btoa(jit[\"\\xffcod\"]))\n// prints ASBL8Kz7AbQBvHBH\n\n// On Linux\necho ASBL8Kz7AbQBvHBH | base64 -d  > jit.bin\narm-none-eabi-objdump -D -Mforce-thumb -b binary -m cortex-m4 jit.bin\n```\n\nSeeing what GCC does:\n\n```\n// test.c\nvoid main() {\n  int data[400];\n  volatile int x = data[1];\n}\n```\n\n```\narm-none-eabi-gcc -Os -mcpu=cortex-m4 -mthumb -mabi=aapcs -mfloat-abi=hard -mfpu=fpv4-sp-d16 -nostartfiles test.c\narm-none-eabi-objdump -D -Mforce-thumb -m cortex-m4 a.out\n```\n\n## Useful links\n\n\nhttp://www.cs.cornell.edu/courses/cs414/2001FA/armcallconvention.pdf\nhttps://developer.arm.com/documentation/ddi0308/d/Thumb-Instructions/Alphabetical-list-of-Thumb-instructions/B\nhttps://community.arm.com/arm-community-blogs/b/architectures-and-processors-blog/posts/condition-codes-1-condition-flags-and-codes\n\n"
        },
        {
          "name": "README_Protocol.md",
          "type": "blob",
          "size": 1.9814453125,
          "content": "REPL Protocol\n===============\n\nWhen started, Espruino provides a REPL on whatever serial device is available (UART, Serial, Bluetooth, USB, etc).\n\nThe terminal works like a normal VT100 terminal, and displays `>` as a prompts and `:` for subsequent lines:\n\n* ASCII characters add to the line\n* Characters and arrow keys are echoed back to the user (unless `echo(0)`)\n* Char code 8 is backspace\n* Newlines either:\n  * Execute the command if there are no unmatched braces eg `hello(` rather than `hello()`\n  * Start a new line\n* ASCII CSI Sequences are used for arrow keys (https://en.wikipedia.org/wiki/ANSI_escape_code#CSI_(Control_Sequence_Introducer)_sequences) eg `ESC [ A` for up\n* UTF8 codes are not understood by the terminal, but are treated as normal characters\n\nThere are other codes added though:\n\n* 1 - SOH, packet transfer start if preceeded by DLE, or Ctrl-A clear line\n* 2 - Ctrl-C - BREAKS OUT OF RUNNING CODE OR CLEARS INPUT LINE IF NONEMPTY\n* 4 - Ctrl-d - backwards delete\n* 5 - Ctrl-e - end of line (or on a new line, ENQ(enquiry) outputs `Espruino 2v25 JOLTJS\\n` or similar\n* 16 - DLE - echo off if at beginning of line\n* 21 - Ctrl-u - delete line\n* 23 - Ctrl-w - delete word (currently just does the same as Ctrl-u)\n\n### Packet Transfer\n\nAdded in 2v25:\n\n```\nDLE[16],SOH[1],TYPE|LENHI,LENLO,DATA...\n```\n\nIf received or timed out (after 1s), will reply with an ACK[6] or NAK[21]\n\nTYPE is:\n\n```\nPT_TYPE_RESPONSE = 0x0000, // Response to an EVAL packet\nPT_TYPE_EVAL = 0x2000,  // execute and return the result as RESPONSE packet\nPT_TYPE_EVENT = 0x4000, // parse as JSON and create `E.on('packet', ...)` event\nPT_TYPE_FILE_SEND = 0x6000, // called before DATA, with {fn:\"filename\",s:123}\nPT_TYPE_DATA = 0x8000, // Sent after FILE_SEND with blocks of data for the file\nPT_TYPE_FILE_RECV = 0xA000 // receive a file - returns a series of PT_TYPE_DATA packets, with a final zero length packet to end\n```\n\nThere is currently an implementation of this in https://github.com/espruino/EspruinoWebTools/blob/master/uart.js\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.4326171875,
          "content": "# Security Policy\n\n## Supported Versions\n\nWe are currently providing software updates for all [official Espruino devices](https://www.espruino.com/Order).\n\n## Reporting a Vulnerability\n\nTo report a vulnerability please just create a [GitHub issue](https://github.com/espruino/Espruino/issues).\n\nIf you feel the vulnerability is extremely serious and could be exploited if details were published,\nplease contact us by email at gw@espruino.com.\n"
        },
        {
          "name": "TYPESCRIPT.md",
          "type": "blob",
          "size": 3.25390625,
          "content": "# Espruino and TypeScript\n\n## Build script\n\nThe build script at `scripts/build_types.js` will automatically generate types\nfrom documentation comments. To use it run:\n\n```sh\nnode scripts/build_types.js\n```\n\nThis will update the file located at `typescript/types/main.d.ts` in the\nBangleApps repository!\n\n**Note**: The script currently only works if this repository and `BangleApps`\nare in the same directory on your file system.\n\n## Making manual declarations\n\nThe script can automatically generate some TypeScript declarations from the\ninformation in JSON comments, but others have to be done manually. To add a\ndeclaration for a function or variable add a `\"typescript\"` field to its JSON\ncomment. Here's an example from `Graphics.drawString`:\n\n```json\n\"typescript\" : \"drawString(str: string, x: number, y: number, solid?: boolean): Graphics;\"\n```\n\nTo declare a function with multiple overloads, specify an array of strings:\n\n```json\n\"typescript\" : [\n  \"drawRect(x1: number, y1: number, x2: number, y2: number): Graphics;\",\n  \"drawRect(rect: { x: number, y: number, x2: number, y2: number } | { x: number, y: number, w: number, h: number }): Graphics;\"\n]\n```\n\nYou can also include declarations in comments starting with `TYPESCRIPT`. Use\nthese to declare types that are reused between functions or variables that for\nwhatever reason aren't defined in JSON comments.\n\nFor example, the following type is used in Bangle.js's `\"accel\"` event and\n`getAccel` method.\n\n```c\n/*TYPESCRIPT\ntype AccelData = {\n  x: number;\n  y: number;\n  z: number;\n  diff: number;\n  mag: number;\n};\n*/\n```\n\n`Bangle.CLOCK` and `Bangle.strokes` aren't defined in any JSON comments so we do\nit manually:\n\n```c\n/*TYPESCRIPT{\n  \"class\" : \"Bangle\"\n}\nstatic CLOCK: boolean;\nstatic strokes: undefined | { [key: string]: Unistroke };\n*/\n```\n\nNote that you can optionally add a JSON object of the form `{ \"class\" : string }`\nto add the declarations to a specific class. Otherwise they will be declared\nglobally.\n\nFinally, also note that you can declare classes as generics where necessary. For\nexample, in the Array class:\n\n```json\n\"typescript\" : \"Array<T>\"\n```\n\nThen you can use this generic in the class's properties and methods:\n\n```json\n\"typescript\" : \"includes(value: T, startIndex?: number): boolean;\"\n```\n\n## Guidelines\n\nHere are some guidelines for making manual declarations:\n\n- Only add a TypeScript declaration to a function or variable if the build\n  script can't generate it automatically. Check the `main.d.ts` file first to\n  see if it isn't already declared correctly. For example, `Bangle.setLCDPower`\n  doesn't need a TypeScript declaration since the script correctly declares it\n  automatically.\n\n- The build script can detect optional arguments if their description starts\n  with `\"[optional]\"`. If adding this keyword saves having to declare the\n  function manually, add it!\n\n- Include the `declare` keyword in global functions and variables.\n\n- Try to keep argument names the same as the ones specified in the `\"param\"`\n  field. In cases that this isn't possible (with reserved keywords such as\n  `function` or `var`) you'll have to change the name a little (for example,\n  `callback` or `variable`).\n\n- In the `\"typescript\"` field do not add the `static` keyword to static methods\n  and properties - the build script will add it automatically.\n"
        },
        {
          "name": "Vagrantfile",
          "type": "blob",
          "size": 1.8037109375,
          "content": "require 'vagrant-auto_network'\n\nVagrant.configure(2) do |config|\n\n  # Ubuntu Server\n  config.vm.define \"headless\", primary: true do |headless|\n    headless.vm.box = \"ubuntu/trusty64\"\n  end\n\n  ## FOLDER ##\n\n  config.vm.synced_folder \".\", \"/vagrant\"\n\n  ## NETWORK ##\n\n  # your host OS type\n  host = RbConfig::CONFIG['host_os']\n\n  ## VIRTUALBOX ##\n\n  config.vm.provider \"virtualbox\" do |v|\n    # Give some pessimistic default values, fix errors on Windows\n\tmem = 512\n\tcpus = 2\n    # Give VM 1/4 system memory & access to all cpu cores on the host\n    if host =~ /darwin/\n      cpus = `sysctl -n hw.ncpu`.to_i\n      # sysctl returns Bytes and we need to convert to MB\n      mem = `sysctl -n hw.memsize`.to_i / 1024 / 1024 / 4\n    elsif host =~ /linux/\n      cpus = `nproc`.to_i\n      # meminfo shows KB and we need to convert to MB\n      mem = `grep 'MemTotal' /proc/meminfo | sed -e 's/MemTotal://' -e 's/ kB//'`.to_i / 1024 / 4\n    end\n\n    v.memory = mem\n    v.cpus = cpus\n  end\n\n  ## HOST-SPECIFIC ##\n\n  if host =~ /darwin/\n    # macs require NFS for sharing because of performance issues.\n    # NFS comes preinstalled on Macs, so no extra steps are necessary here.\n    config.vm.synced_folder \".\", \"/vagrant\", type: \"nfs\"\n\n    # NFS requires a private network.  by default, a private network requires a static IP,\n    # but this is a pain to manage if you have many machines up.  the auto_network plugin\n    # will automatically assign a static IP to your box.  to install this plugin, execute\n    # `./scripts/vagrant/setup-host.sh` or `vagrant plugin install vagrant-auto_network`\n    config.vm.network :private_network, :auto_network => true\n  end\n\n  ## PROVISIONING ##\n\n  config.vm.provision \"shell\", inline: \"cd /vagrant && ./scripts/vagrant_provision.sh\"\n\n  ## SSH ##\n\n  config.ssh.forward_agent = true\n  config.ssh.forward_x11 = true\n\nend\n"
        },
        {
          "name": "benchmark",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "boards",
          "type": "tree",
          "content": null
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "doxygen",
          "type": "tree",
          "content": null
        },
        {
          "name": "gen",
          "type": "tree",
          "content": null
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "make",
          "type": "tree",
          "content": null
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.44921875,
          "content": "{\n  \"name\": \"Espruino\",\n  \"description\": \"Espruino JavaScript Interpreter\",\n  \"author\": \"Gordon Williams <gw@pur3.co.uk> (http://espruino.com)\",\n  \"license\": \"MPLv2\",\n  \"repository\": \"https://github.com/espruino/Espruino\",\n  \"scripts\": {\n    \"test\": \"scripts/factoryTests.js BANGLEJS && scripts/factoryTests.js BANGLEJS2\"\n  },\n  \"devDependencies\": {\n    \"highlight.js\": \"^11.6.0\",\n    \"marked\": \"^4.0.18\",\n    \"btoa\": \"^1.2.1\",\n    \"pngjs\": \"^7.0.0\"    \n  }\n}\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "targetlibs",
          "type": "tree",
          "content": null
        },
        {
          "name": "targets",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}