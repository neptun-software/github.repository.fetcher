{
  "metadata": {
    "timestamp": 1736709701523,
    "page": 78,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ThrowTheSwitch/Unity",
      "stars": 4205,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.5693359375,
          "content": "###############################################################################\n# Unity Project - A Test Framework for C\n# .editorconfig - F. Zahn 2019\n###############################################################################\n\n# This is the topmost .editorconfig file\nroot = true\n\n# Settings that apply to all languages / files\n[*]\ncharset = utf-8\nindent_size = 4\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.txt]\ntrim_trailing_whitespace = false\n\n[*.rb]\nindent_size = 2\n\n[*.yml]\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.576171875,
          "content": "*           text=auto\n\n# These files are text and should be normalized (convert crlf to lf)\n*.rb        text\n*.test      text\n*.c         text\n*.cpp       text\n*.h         text\n*.txt       text\n*.yml       text\n*.s79       text\n*.bat       text\n*.xcl       text\n*.inc       text\n*.info      text\n*.md        text\nmakefile    text\nrakefile    text\nmeson.build text\n\n\n#These files are binary and should not be normalized\n*.doc       binary\n*.odt       binary\n*.pdf       binary\n*.ewd       binary\n*.eww       binary\n*.dni       binary\n*.wsdt      binary\n*.dbgdt     binary\n*.mac       binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3779296875,
          "content": "build/\nbuilddir/\ntest/sandbox\n.DS_Store\nexamples/example_1/subprojects/unity\nexamples/example_1/test1.exe\nexamples/example_1/test2.exe\nexamples/example_2/all_tests.exe\nexamples/example_1/test1.out\nexamples/example_1/test2.out\nexamples/example_2/all_tests.out\nexamples/example_4/builddir\n*.sublime-project\n*.sublime-workspace\n*.cmake\nMakefile\nCMakeFiles\nCMakeCache.txt\n!unityConfig.cmake\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 6.19921875,
          "content": "###################################################################################\n#                                                                                 #\n# NAME: CMakeLists.txt                                                            #\n#                                                                                 #\n# AUTHOR: Mike Karlesky, Mark VanderVoord, Greg Williams.                         #\n# WRITTEN BY: Michael Brockus.                                                    #\n#                                                                                 #\n# License: MIT                                                                    #\n#                                                                                 #\n###################################################################################\n\ncmake_minimum_required(VERSION 3.12)\n\n# Read src/unity.h file and get project version from it\nset(UNITY_HEADER \"src/unity.h\")\n\nfile(STRINGS \"${UNITY_HEADER}\" UNITY_HEADER_CONTENT \n    REGEX \"^#define UNITY_VERSION_(MAJOR|MINOR|BUILD) +[0-9]+$\"\n)\n\nset(UNITY_HEADER_VERSION_MAJOR 0)\nset(UNITY_HEADER_VERSION_MINOR 0)\nset(UNITY_HEADER_VERSION_BUILD 0)\n\nforeach(VERSION_LINE IN LISTS UNITY_HEADER_CONTENT)\n    foreach(VERSION_PART MAJOR MINOR BUILD)\n        string(CONCAT REGEX_STRING \"#define UNITY_VERSION_\" \n                                   \"${VERSION_PART}\" \n                                   \" +([0-9]+)\"\n        )\n\n        if(VERSION_LINE MATCHES \"${REGEX_STRING}\")\n            set(UNITY_HEADER_VERSION_${VERSION_PART} \"${CMAKE_MATCH_1}\")\n        endif()\n    endforeach()\nendforeach()\n\nproject(unity\n    VERSION     ${UNITY_HEADER_VERSION_MAJOR}.${UNITY_HEADER_VERSION_MINOR}.${UNITY_HEADER_VERSION_BUILD}\n    LANGUAGES   C\n    DESCRIPTION \"C Unit testing framework.\"\n)\n\n# Options to Build With Extras -------------------------------------------------\noption(UNITY_EXTENSION_FIXTURE \"Compiles Unity with the \\\"fixture\\\" extension.\" OFF)\noption(UNITY_EXTENSION_MEMORY \"Compiles Unity with the \\\"memory\\\" extension.\" OFF)\n\nset(UNITY_EXTENSION_FIXTURE_ENABLED $<BOOL:${UNITY_EXTENSION_FIXTURE}>)\nset(UNITY_EXTENSION_MEMORY_ENABLED $<OR:${UNITY_EXTENSION_FIXTURE_ENABLED},$<BOOL:${UNITY_EXTENSION_MEMORY}>>)\n\nif(${UNITY_EXTENSION_FIXTURE})\n    message(STATUS \"Unity: Building with the fixture extension.\")\nendif()\n\nif(${UNITY_EXTENSION_MEMORY})\n    message(STATUS \"Unity: Building with the memory extension.\")\nendif()\n\n# Main target ------------------------------------------------------------------\nadd_library(${PROJECT_NAME} STATIC)\nadd_library(${PROJECT_NAME}::framework ALIAS ${PROJECT_NAME})\n\n# Includes ---------------------------------------------------------------------\ninclude(GNUInstallDirs)\ninclude(CMakePackageConfigHelpers)\n\ntarget_sources(${PROJECT_NAME}\n    PRIVATE\n        src/unity.c\n        $<$<BOOL:${UNITY_EXTENSION_FIXTURE_ENABLED}>:extras/fixture/src/unity_fixture.c>\n        $<$<BOOL:${UNITY_EXTENSION_MEMORY_ENABLED}>:extras/memory/src/unity_memory.c>\n)\n\ntarget_include_directories(${PROJECT_NAME}\n    PUBLIC\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>\n        $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>\n        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}>\n        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\n        $<BUILD_INTERFACE:$<$<BOOL:${UNITY_EXTENSION_MEMORY_ENABLED}>:${CMAKE_CURRENT_SOURCE_DIR}/extras/memory/src>>\n        $<BUILD_INTERFACE:$<$<BOOL:${UNITY_EXTENSION_FIXTURE_ENABLED}>:${CMAKE_CURRENT_SOURCE_DIR}/extras/fixture/src>>\n)\n\nset(${PROJECT_NAME}_PUBLIC_HEADERS\n        src/unity.h\n        src/unity_internals.h\n        $<$<BOOL:${UNITY_EXTENSION_FIXTURE_ENABLED}>:${CMAKE_CURRENT_SOURCE_DIR}/extras/fixture/src/unity_fixture.h>\n        $<$<BOOL:${UNITY_EXTENSION_FIXTURE_ENABLED}>:${CMAKE_CURRENT_SOURCE_DIR}/extras/fixture/src/unity_fixture_internals.h>\n        $<$<BOOL:${UNITY_EXTENSION_MEMORY_ENABLED}>:${CMAKE_CURRENT_SOURCE_DIR}/extras/memory/src/unity_memory.h>\n)\n\nset_target_properties(${PROJECT_NAME}\n    PROPERTIES \n        C_STANDARD          11\n        C_STANDARD_REQUIRED ON\n        C_EXTENSIONS        OFF\n        PUBLIC_HEADER       \"${${PROJECT_NAME}_PUBLIC_HEADERS}\"\n        EXPORT_NAME         framework\n)\n\ntarget_compile_options(${PROJECT_NAME}\n    PRIVATE\n        # Clang\n        $<$<C_COMPILER_ID:Clang>:\n            -Wcast-align\n            -Wcast-qual\n            -Wconversion\n            -Wexit-time-destructors                            \n            -Wglobal-constructors\n            -Wmissing-noreturn\n            -Wmissing-prototypes\n            -Wno-missing-braces\n            -Wold-style-cast\n            -Wshadow\n            -Wweak-vtables\n            -Werror\n            -Wall\n            $<$<VERSION_GREATER_EQUAL:$<C_COMPILER_VERSION>,8.0.0>:-Wextra-semi-stmt>\n        >\n        \n        # GCC\n        $<$<C_COMPILER_ID:GNU>:\n            -Waddress\n            -Waggregate-return\n            -Wformat-nonliteral\n            -Wformat-security\n            -Wformat\n            -Winit-self\n            -Wmissing-declarations\n            -Wmissing-include-dirs\n            -Wno-multichar\n            -Wno-parentheses\n            -Wno-type-limits\n            -Wno-unused-parameter\n            -Wunreachable-code\n            -Wwrite-strings\n            -Wpointer-arith\n            -Werror\n            -Wall\n        >\n\n        # MSVC\n        $<$<C_COMPILER_ID:MSVC>:\n            /Wall\n        >\n)\n\nwrite_basic_package_version_file(${PROJECT_NAME}ConfigVersion.cmake\n    VERSION       ${PROJECT_VERSION}\n    COMPATIBILITY SameMajorVersion \n)\n\n## Target installation\ninstall(TARGETS   ${PROJECT_NAME}\n    EXPORT        ${PROJECT_NAME}Targets\n    ARCHIVE       DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    LIBRARY       DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}\n    COMPONENT     library\n)\n\n## Target's cmake files: targets export\ninstall(EXPORT  ${PROJECT_NAME}Targets\n    NAMESPACE   ${PROJECT_NAME}::\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\n)\n\n## Target's cmake files: config and version config for find_package()\ninstall(FILES   ${PROJECT_NAME}Config.cmake\n                ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\n)\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.091796875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2007-25 Mike Karlesky, Mark VanderVoord, & Greg Williams\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.1142578125,
          "content": "# Unity Test ![CI][]\n\n__Copyright (c) 2007 - 2024 Unity Project by Mike Karlesky, Mark VanderVoord, and Greg Williams__\n\nWelcome to the Unity Test Project, one of the main projects of ThrowTheSwitch.org.\nUnity Test is a unit testing framework built for C, with a focus on working with embedded toolchains.\n\nThis project is made to test code targetting microcontrollers big and small.\nThe core project is a single C file and a pair of headers, allowing it to be added to your existing build setup without too much headache.\nYou may use any compiler you wish, and may use most existing build systems including Make, CMake, etc.\nIf you'd like to leave the hard work to us, you might be interested in Ceedling, a build tool also by ThrowTheSwitch.org.\n\nIf you're new to Unity, we encourage you to tour the [getting started guide][].\n\nYou can also find the [change log][] and [known issues][] in our documentation.\n\n## Getting Started\n\nThe [docs][] folder contains a [getting started guide][] and much more tips about using Unity.\n\n## Unity Assertion Summary\n\nFor the full list, see [UnityAssertionsReference.md][].\n\n### Basic Validity Tests\n\n    TEST_ASSERT_TRUE(condition)\n\nEvaluates whatever code is in condition and fails if it evaluates to false\n\n    TEST_ASSERT_FALSE(condition)\n\nEvaluates whatever code is in condition and fails if it evaluates to true\n\n    TEST_ASSERT(condition)\n\nAnother way of calling `TEST_ASSERT_TRUE`\n\n    TEST_ASSERT_UNLESS(condition)\n\nAnother way of calling `TEST_ASSERT_FALSE`\n\n    TEST_FAIL()\n    TEST_FAIL_MESSAGE(message)\n\nThis test is automatically marked as a failure.\nThe message is output stating why.\n\n### Numerical Assertions: Integers\n\n    TEST_ASSERT_EQUAL_INT(expected, actual)\n    TEST_ASSERT_EQUAL_INT8(expected, actual)\n    TEST_ASSERT_EQUAL_INT16(expected, actual)\n    TEST_ASSERT_EQUAL_INT32(expected, actual)\n    TEST_ASSERT_EQUAL_INT64(expected, actual)\n\nCompare two integers for equality and display errors as signed integers.\nA cast will be performed to your natural integer size so often this can just be used.\nWhen you need to specify the exact size, you can use a specific version.\n\n    TEST_ASSERT_EQUAL_UINT(expected, actual)\n    TEST_ASSERT_EQUAL_UINT8(expected, actual)\n    TEST_ASSERT_EQUAL_UINT16(expected, actual)\n    TEST_ASSERT_EQUAL_UINT32(expected, actual)\n    TEST_ASSERT_EQUAL_UINT64(expected, actual)\n\nCompare two integers for equality and display errors as unsigned integers.\nLike INT, there are variants for different sizes also.\n\n    TEST_ASSERT_EQUAL_HEX(expected, actual)\n    TEST_ASSERT_EQUAL_HEX8(expected, actual)\n    TEST_ASSERT_EQUAL_HEX16(expected, actual)\n    TEST_ASSERT_EQUAL_HEX32(expected, actual)\n    TEST_ASSERT_EQUAL_HEX64(expected, actual)\n\nCompares two integers for equality and display errors as hexadecimal.\nLike the other integer comparisons, you can specify the size... \nhere the size will also effect how many nibbles are shown (for example, `HEX16` will show 4 nibbles).\n\n    TEST_ASSERT_EQUAL(expected, actual)\n\nAnother way of calling TEST_ASSERT_EQUAL_INT\n\n    TEST_ASSERT_INT_WITHIN(delta, expected, actual)\n\nAsserts that the actual value is within plus or minus delta of the expected value.\nThis also comes in size specific variants.\n\n    TEST_ASSERT_GREATER_THAN(threshold, actual)\n\nAsserts that the actual value is greater than the threshold.\nThis also comes in size specific variants.\n\n    TEST_ASSERT_LESS_THAN(threshold, actual)\n\nAsserts that the actual value is less than the threshold.\nThis also comes in size specific variants.\n\n### Arrays\n\n    _ARRAY\n\nYou can append `_ARRAY` to any of these macros to make an array comparison of that type.\nHere you will need to care a bit more about the actual size of the value being checked.\nYou will also specify an additional argument which is the number of elements to compare.\nFor example:\n\n    TEST_ASSERT_EQUAL_HEX8_ARRAY(expected, actual, elements)\n\n    _EACH_EQUAL\n\nAnother array comparison option is to check that EVERY element of an array is equal to a single expected value.\nYou do this by specifying the EACH_EQUAL macro.\nFor example:\n\n    TEST_ASSERT_EACH_EQUAL_INT32(expected, actual, elements)\n\n### Numerical Assertions: Bitwise\n\n    TEST_ASSERT_BITS(mask, expected, actual)\n\nUse an integer mask to specify which bits should be compared between two other integers.\nHigh bits in the mask are compared, low bits ignored.\n\n    TEST_ASSERT_BITS_HIGH(mask, actual)\n\nUse an integer mask to specify which bits should be inspected to determine if they are all set high.\nHigh bits in the mask are compared, low bits ignored.\n\n    TEST_ASSERT_BITS_LOW(mask, actual)\n\nUse an integer mask to specify which bits should be inspected to determine if they are all set low.\nHigh bits in the mask are compared, low bits ignored.\n\n    TEST_ASSERT_BIT_HIGH(bit, actual)\n\nTest a single bit and verify that it is high.\nThe bit is specified 0-31 for a 32-bit integer.\n\n    TEST_ASSERT_BIT_LOW(bit, actual)\n\nTest a single bit and verify that it is low.\nThe bit is specified 0-31 for a 32-bit integer.\n\n### Numerical Assertions: Floats\n\n    TEST_ASSERT_FLOAT_WITHIN(delta, expected, actual)\n    TEST_ASSERT_DOUBLE_WITHIN(delta, expected, actual)\n\nAsserts that the actual value is within plus or minus delta of the expected value.\n\n    TEST_ASSERT_FLOAT_NOT_WITHIN(delta, expected, actual)\n    TEST_ASSERT_DOUBLE_NOT_WITHIN(delta, expected, actual)\n\nAsserts that the actual value is NOT within plus or minus delta of the expected value.\n\n    TEST_ASSERT_EQUAL_FLOAT(expected, actual)\n    TEST_ASSERT_EQUAL_DOUBLE(expected, actual)\n\nAsserts that two floating point values are \"equal\" within a small % delta of the expected value.\n\n    TEST_ASSERT_NOT_EQUAL_FLOAT(expected, actual)\n    TEST_ASSERT_NOT_EQUAL_DOUBLE(expected, actual)\n\nAsserts that two floating point values are NOT \"equal\" within a small % delta of the expected value.\n\n    TEST_ASSERT_LESS_THAN_FLOAT(threshold, actual)\n    TEST_ASSERT_LESS_THAN_DOUBLE(threshold, actual)\n    TEST_ASSERT_GREATER_THAN_FLOAT(threshold, actual)\n    TEST_ASSERT_GREATER_THAN_DOUBLE(threshold, actual)\n\nAsserts that the actual value is less than or greater than the threshold.\n\nThere are also `LESS_OR_EQUAL` and `GREATER_OR_EQUAL` variations.\nThese obey the same rules for equality as do `TEST_ASSERT_EQUAL_FLOAT` and `TEST_ASSERT_EQUAL_DOUBLE`:\nIf the two values are within a small % delta of the expected value, the assertion will pass.\n\n### String Assertions\n\n    TEST_ASSERT_EQUAL_STRING(expected, actual)\n\nCompare two null-terminate strings.\nFail if any character is different or if the lengths are different.\n\n    TEST_ASSERT_EQUAL_STRING_LEN(expected, actual, len)\n\nCompare two strings.\nFail if any character is different, stop comparing after len characters.\n\n    TEST_ASSERT_EQUAL_STRING_MESSAGE(expected, actual, message)\n\nCompare two null-terminate strings.\nFail if any character is different or if the lengths are different.\nOutput a custom message on failure.\n\n    TEST_ASSERT_EQUAL_STRING_LEN_MESSAGE(expected, actual, len, message)\n\nCompare two strings.\nFail if any character is different, stop comparing after len characters.\nOutput a custom message on failure.\n\n### Pointer Assertions\n\nMost pointer operations can be performed by simply using the integer comparisons above.\nHowever, a couple of special cases are added for clarity.\n\n    TEST_ASSERT_NULL(pointer)\n\nFails if the pointer is not equal to NULL\n\n    TEST_ASSERT_NOT_NULL(pointer)\n\nFails if the pointer is equal to NULL\n\n### Memory Assertions\n\n    TEST_ASSERT_EQUAL_MEMORY(expected, actual, len)\n\nCompare two blocks of memory.\nThis is a good generic assertion for types that can't be coerced into acting like standard types... \nbut since it's a memory compare, you have to be careful that your data types are packed.\n\n### \\_MESSAGE\n\nYou can append `\\_MESSAGE` to any of the macros to make them take an additional argument.\nThis argument is a string that will be printed at the end of the failure strings.\nThis is useful for specifying more information about the problem.\n\n[CI]: https://github.com/ThrowTheSwitch/Unity/workflows/CI/badge.svg\n[getting started guide]: docs/UnityGettingStartedGuide.md\n[change log]: docs/UnityChangeLog.md\n[known issues]: docs/UnityKnownIssues.md\n[docs]: docs/\n[UnityAssertionsReference.md]: docs/UnityAssertionsReference.md\n"
        },
        {
          "name": "auto",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "extras",
          "type": "tree",
          "content": null
        },
        {
          "name": "library.json",
          "type": "blob",
          "size": 0.75,
          "content": "# =========================================================================\n#   Unity - A Test Framework for C\n#   ThrowTheSwitch.org\n#   Copyright (c) 2007-24 Mike Karlesky, Mark VanderVoord, & Greg Williams\n#   SPDX-License-Identifier: MIT\n# =========================================================================\n\n{\n  \"name\": \"Unity\",\n  \"version\": \"2.6.0\",\n  \"keywords\": \"unit-testing, testing, tdd, testing-framework\",\n  \"description\": \"Simple Unit Testing for C\",\n  \"homepage\": \"http://www.throwtheswitch.org/unity\",\n  \"license\": \"MIT\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/ThrowTheSwitch/Unity.git\"\n  },\n  \"frameworks\": \"*\",\n  \"platforms\": \"*\",\n  \"headers\": \"unity.h\",\n  \"build\": {\n    \"extraScript\": \"platformio-build.py\"\n  }\n}\n"
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 1.66796875,
          "content": "#\n# build script written by : Michael Gene Brockus.\n# github repo author: Mike Karlesky, Mark VanderVoord, Greg Williams.\n#\n# license: MIT\n#\nproject('unity', 'c',\n  license: 'MIT',\n\n  # Set project version to value extracted from unity.h header\n  version: run_command(\n    [\n      'auto/extract_version.py',\n      'src/unity.h'\n    ],\n    check: true\n  ).stdout().strip(),\n\n  meson_version: '>=0.47.0',\n  default_options: [\n    'werror=true',\n    'c_std=c11'\n  ]\n)\n\nbuild_fixture = get_option('extension_fixture')\nbuild_memory = get_option('extension_memory')\nsupport_double = get_option('support_double')\n\nunity_args = []\nunity_src = []\nunity_inc = []\n\nsubdir('src')\n\nif build_fixture\n  # Building the fixture extension implies building the memory\n  # extension.\n  build_memory = true\n  subdir('extras/fixture/src')\nendif\n\nif build_memory\n  subdir('extras/memory/src')\nendif\n\nif support_double\n  unity_args += '-DUNITY_INCLUDE_DOUBLE'\nendif\n\nunity_lib = static_library(meson.project_name(),\n  sources: unity_src,\n  c_args: unity_args,\n  include_directories: unity_inc,\n  install: not meson.is_subproject(),\n)\n\nunity_dep = declare_dependency(\n  link_with: unity_lib,\n  include_directories: unity_inc\n)\n\n# Generate pkg-config file.\nif not meson.is_subproject()\n  pkg = import('pkgconfig')\n  pkg.generate(\n    name: meson.project_name(),\n    version: meson.project_version(),\n    libraries: [ unity_lib ],\n    description: 'C Unit testing framework.'\n  )\nendif\n\n# Create a generator that can be used by consumers of our build system to generate\n# test runners.\ngen_test_runner = generator(\n  find_program('auto/generate_test_runner.rb'),\n  output: '@BASENAME@_Runner.c',\n  arguments: ['@INPUT@', '@OUTPUT@']\n)\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 0.361328125,
          "content": "option('extension_fixture', type: 'boolean', value: 'false', description: 'Whether to enable the fixture extension.')\noption('extension_memory', type: 'boolean', value: 'false', description: 'Whether to enable the memory extension.')\noption('support_double', type: 'boolean', value: 'false', description: 'Whether to enable double precision floating point assertions.')\n"
        },
        {
          "name": "platformio-build.py",
          "type": "blob",
          "size": 0.69921875,
          "content": "# =========================================================================\n#   Unity - A Test Framework for C\n#   ThrowTheSwitch.org\n#   Copyright (c) 2007-24 Mike Karlesky, Mark VanderVoord, & Greg Williams\n#   SPDX-License-Identifier: MIT\n# =========================================================================\n\nimport os\n\nImport(\"env\")\n\nenv.Append(CPPDEFINES=[\"UNITY_INCLUDE_CONFIG_H\"])\n\n# import \"unity_config.h\" folder to the library builder\ntry:\n    Import(\"projenv\")\n\n    projenv.Append(CPPDEFINES=[\"UNITY_INCLUDE_CONFIG_H\"])\n    for p in projenv[\"CPPPATH\"]:\n        p = projenv.subst(p)\n        if os.path.isfile(os.path.join(p, \"unity_config.h\")):\n            env.Prepend(CPPPATH=[p])\nexcept:\n    pass\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "unityConfig.cmake",
          "type": "blob",
          "size": 0.052734375,
          "content": "include(${CMAKE_CURRENT_LIST_DIR}/unityTargets.cmake) "
        }
      ]
    }
  ]
}