{
  "metadata": {
    "timestamp": 1736710229101,
    "page": 955,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "litespeedtech/lsquic",
      "stars": 1585,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 0.5810546875,
          "content": "freebsd_instance:\n    image: freebsd-13-2-release-amd64\n\ntask:\n    install_script:\n        - pkg install -y cmake libevent git go\n        - git clone https://boringssl.googlesource.com/boringssl\n        - cd boringssl\n        # This is so that both GQUIC and IETF branches build.  Just picking\n        # a known good revision:\n        - git checkout a2278d4d2cabe73f6663e3299ea7808edfa306b9\n        - cmake .\n        - make\n        - cd -\n    script:\n        - git submodule init\n        - git submodule update\n        - cmake -DBORINGSSL_DIR=$PWD/boringssl .\n        - make\n        - make test\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.20703125,
          "content": "[submodule \"src/liblsquic/ls-qpack\"]\n\tpath = src/liblsquic/ls-qpack\n\turl = https://github.com/litespeedtech/ls-qpack\n[submodule \"src/lshpack\"]\n\tpath = src/lshpack\n\turl = https://github.com/litespeedtech/ls-hpack\n"
        },
        {
          "name": ".nojekyll",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 1.00390625,
          "content": "# Read the Docs configuration file for Sphinx projects\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the OS, Python version and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.12\"\n    # You can also specify other tool versions:\n    # nodejs: \"20\"\n    # rust: \"1.70\"\n    # golang: \"1.20\"\n\n# Build documentation in the \"docs/\" directory with Sphinx\nsphinx:\n  configuration: docs/conf.py\n  # You can configure Sphinx to use a different builder, for instance use the dirhtml builder for simpler URLs\n  # builder: \"dirhtml\"\n  # Fail on all warnings to avoid broken references\n  # fail_on_warning: true\n\n# Optionally build your docs in additional formats such as PDF and ePub\n# formats:\n#   - pdf\n#   - epub\n\n# Optional but recommended, declare the Python requirements required\n# to build your documentation\n# See https://docs.readthedocs.io/en/stable/guides/reproducible-builds.html\npython:\n  install:\n    - requirements: docs/requirements.txt\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.3876953125,
          "content": "language: c\nif: branch = master\nmatrix:\n    include:\n        - name: Linux (gcc)\n          os: linux\n          compiler: gcc\n          addons:\n            apt:\n                packages:\n                - libevent-dev\n        - name: Linux (clang)\n          os: linux\n          compiler: clang\n          addons:\n            apt:\n                packages:\n                - libevent-dev\n        - name: macOS\n          os: osx\nsudo: false\nbefore_install:\n    - if [ $TRAVIS_OS_NAME = linux ]; then sudo add-apt-repository -y ppa:longsleep/golang-backports; fi\n    - if [ $TRAVIS_OS_NAME = linux ]; then sudo apt-get update; fi\n    - if [ $TRAVIS_OS_NAME = linux ]; then sudo apt-get install golang-1.13-go; fi\ninstall:\n    - if [ $TRAVIS_OS_NAME = linux ]; then export PATH=/usr/lib/go-1.13/bin:$PATH; fi\n    - if [ $TRAVIS_OS_NAME = linux ]; then export GOPATH=/usr/lib/go-1.13:$GOPATH; fi\n    - if [ $TRAVIS_OS_NAME = linux ]; then export GOROOT=/usr/lib/go-1.13; fi\nbefore_script:\n    - git clone https://boringssl.googlesource.com/boringssl\n    - cd boringssl\n    # This is so that both GQUIC and IETF branches build.  Just picking\n    # a known good revision:\n    - git checkout a2278d4d2cabe73f6663e3299ea7808edfa306b9\n    - cmake .\n    - make\n    - cd -\n    - git submodule init\n    - git submodule update\n    - cmake -DBORINGSSL_DIR=$PWD/boringssl .\nscript:\n    # Now build lsquic-client\n    - make\n    - make test\n"
        },
        {
          "name": "APIs.txt",
          "type": "blob",
          "size": 7.9951171875,
          "content": "# Copyright (c) 2017 - 2022 LiteSpeed Technologies Inc.  See LICENSE.\nLSQUIC APIs\n===========\n\nLSQUIC exposes the following object types to the user:\n\n    - Engine Settings   (struct lsquic_engine_settings)\n    - Stream Interface  (struct lsquic_stream_if) \n    - Engine API        (struct lsquic_engine_api)\n    - Engine\n    - Connection\n    - Stream\n\nThe first three -- engine settings, engine APIs, and stream interface --\nare used to instantiate the engine.  After engine is instantiated, the\nuser code need only concern itself with engine, connections, and streams.\n\n\nEngine Settings\n---------------\n\nEngine settings is the struct lsquic_engine_settings.  It contains various\nQUIC settings and LSQUIC parameters.  The usual way to use it is to initialize\nit to default values using lsquic_engine_init_settings(), modify any values\nif necessary, and pass it as parameter to lsquic_engine_new().\n\nQUIC settings are specified by the following members:\n\n    lsquic_engine_settings      QUIC\n    member                      parameter\n    ----------------------      ---------\n    es_cfcw                     CFCW\n    es_sfcw                     SFCW\n    es_max_streams_in           MIDS\n    es_ua                       UAID\n    es_versions                 VER\n    es_idle_conn_to             ICSL\n    es_silent_close             SCLS\n    es_support_srej             COPT/SREJ\n    es_support_nstp             COPT/NSTP\n    es_support_tcid0            TCID\n\nThe following parameters affect run-time behavior:\n\n    es_rw_once                  Important: affects event dispatch\n    es_handshake_to\n    es_support_push\n    es_pace_packets\n\nOther noteworthy settings:\n\n    es_max_header_list_size\n    es_progress_check\n\nTo be sure your settings are good (in other words, passing this struct won't\ntrip up the engine constructor), use lsquic_engine_check_settings().\n\n\nStream Interface\n----------------\n\nThe stream interface, lsquic_stream_if, specifies callbacks LSQUIC engine\nwill call for connections and streams.\n\nThe following callbacks should be specified for connection:\n\n    on_new_conn             This is called when connection is created.\n\n    on_goaway_received      This function is called when we receive GOAWAY\n                            frame from peer.  This callback is optional.\n\n    on_conn_closed          Connection is closed: all streams have been\n                            destroyed.\n\nThe streams have four callbacks:\n\n    on_new_stream           Stream has been created.\n\n    on_read                 Stream can be read from (see Events).\n\n    on_write                Stream can be written to (see Events).\n\n    on_close                Stream has been closed.\n\nFor both connections and streams, the \"on new\" callback return value can\nbe used to specify user-supplied data.  This data pointer is optional and\ncan be NULL.  It can also refer to the same data for the connection and\nits streams.  \"on close\" callbacks should be used to free user-supplied\ndata.\n\n\nEngine API\n----------\n\nThe engine API, struct lsquic_engine_api, is a combination structure to\nmake calling lsquic_engine_new() manageable.  It holds references to\nstruct lsquic_engine_settings and struct lsquic_stream_if, as well as:\n\n    - Interface for sending outgoing packets, ea_packets_out\n    - Interface for allocating memory for outgoing packet buffers\n      (optional).\n    - Interface for share memory hash, ea_shi\n    - Optional interface for reporting connections whose handshake\n      did not complete (ea_bad_handshake)\n\nea_packets_out is a pointer to a function of type lsquic_packets_out_f.\nThe engine calls this function when it is appropriate to send out packets\nfor one or more connections, which it gives to the function in a batch.\nThis batch is an array of struct lsquic_out_spec.\n\n\nEngine\n------\n\nThe engine is instantiated using lsquic_engine_new().  The first parameter\nis a list flags and the second parameter is the reference to the engine\napi.  The engine settings are specified, they are copied; changing\nthe setting after the engine has been created will not affect engine's\nbehavior.  If the settings are not specified, the engine will use default\nsettings created by lsquic_engine_init_settings().\n\nOnce the engine is instantiated, there are four main ways to use it to\ndrive QUIC connections:\n\n    1. Create a connection using lsquic_engine_connect().\n    2. Feed it incoming packets using lsquic_engine_packet_in() function.\n    3. Process connections using one of the connection queue functions\n       (see Connection Queues).\n    4. Accept outgoing packets for sending (and send them!) using\n       ea_packets_out callback.\n\n\nConnection Management\n---------------------\n\nA connection needs to be processed once in a while.  It needs to be\nprocessed when one of the following is true:\n\n    - There are incoming packets;\n    - A stream is both readable by the user code and the user code wants\n      to read from it;\n    - A stream is both writeable by the user code and the user code wants\n      to write to it;\n    - User has written to stream outside of on_write() callbacks (that is\n      allowed) and now there are packets ready to be sent;\n    - A timer (pacer, retransmission, idle, etc) has expired;\n    - A control frame needs to be sent out;\n    - A stream needs to be serviced or created.\n\nEach of these use cases is handled by a single function:\n\n    lsquic_engine_process_conns()\n\nThe connections to which the conditions above apply are processed (or\n\"ticked\") in the least recently ticked order.  After calling this function,\nyou can see when is the next time a connection needs to be processed using\n\n    lsquic_engine_earliest_adv_tick()\n\nBased on this value, next event can be scheduled (in the event loop of\nyour choice).\n\nConnection\n----------\n\nA connection is created using lsquic_engine_connect().  When on_new_conn()\nis called, the client code should call lsquic_conn_make_stream() one or\nmore times.  One new stream will be created for each one of those calls.\n\nSeveral auxiliary functions are available:\n\n    - lsquic_conn_id()\n    - lsquic_conn_going_away()\n    - lsquic_conn_get_peer_ctx()\n    - lsquic_conn_get_stream_by_id()\n    - lsquic_conn_get_ctx()\n\n\nStream\n------\n\nLSQUIC stream hides QUIC and HTTP/2 framing complexities from the user.\nWhat it presents is a way to send HTTP headers and, optionally, body to\npeer.  On read side, the user gets what looks like HTTP/1.1 stream.\n\nExpected usage for client is to express the desire to write to stream\nusing lsquic_stream_wantwrite() call.  Once on_write() is called:\n\n    1. Write headers using lsquic_stream_send_headers()\n    2. Optionally write payload body using of of lsquic_stream_write(),\n       lsquic_stream_writev(), or lsquic_stream_writef().\n\nThat done, shutdown write side using lsquic_stream_shutdown(), unregister\nfor write events and register for read events using lsquic_stream_wantread().\n\nRead and parse HTTP/1.1 stream from on_read() callback until end-of-stream\nor an error is encountered.\n\nThen unregister the read event and shutdown the read side.  The stream will\nbe closed after that at some point and on_close() callback will be called,\nat which point resources can be freed.  (Internally, the stream object is\nnot destroyed until either all the packets carrying its data are ACKed or\nthe connection is destroyed).\n\non_read() and on_write() callbacks are dispatched differently based on the\nvalue of es_rw_once:\n\nIf es_rw_once is false, then the callbacks are dispatched in a loop until\nthe user unregisters the event or the stream becomes unreadable (or\nunwriteable).\n\nIf es_rw_once is true, on_read() and on_write() are called once \"per tick\".\nIt is the up to the user to read and write enough data.\n\n\nEvents\n------\n\nStream events are persistent: once call lsquic_stream_wantwrite() or\nlsquic_stream_wantread(), the event stays active until turned off.\n\nNote that when an error is encountered (such as a stream reset), the\nstream becomes readable and writeable: this allows user code to collect\nthe error.\n\n\nVersions\n--------\n\nQUIC version are listed in enum lsquic_version.  To specify a list of\nversions, they are usually placed in a bitmask, e.g. es_versions.\n"
        },
        {
          "name": "BUILD-WINDOWS.md",
          "type": "blob",
          "size": 4.4267578125,
          "content": "LiteSpeed QUIC (LSQUIC) Library - Building for Windows\n======================================================\n\nDescription\n-----------\n\nThis document is intended to supplement the document README.md at the\nroot of the distribution of the LiteSpeed QUIC (LSQUIC) Library\nto build the library and programs in a Windows environment.  \n\nThe addition of Windows support to the LSQUIC was a contribution \nfrom the user community and this document was based on our experiences\nof validating the code.  As for the overall implementation, do not hesitate\nto report bugs back to us.  Even better, continue to send us fixes and \nimprovements - it makes the code better for everyone.\n\n\nPreliminaries\n-------------\nIt it recommended that the installer have experience with Windows development,\nVisual Studio, and open source projects in Windows.  These instructions assume\na general build, primarily for 64-bit, both of a debug and a release version.\n\nSome open source code required to be installed to build the code include:\n   - The [Git version control system executable for Windows](https://git-scm.com/download/win).\n   - A version of the Visual Studio development environment for Windows.  \n     The Windows SDK and C++ must be installed from it.  The \n     [Visual Studio Community Edition](https://www.visualstudio.com/thank-you-downloading-visual-studio) will be just fine.\n   - [cmake for Windows](https://cmake.org/download/).  Download and install the \n     version appropriate for the development/target platform (32 vs 64-bits, \n     etc.).\n   - The Windows vcpkg package manager.  It can be cloned from [here](https://github.com/Microsoft/vcpkg).\n     Clone it at the same level to be used to clone/develop the lsquic.\n     The package must be compiled following the instructions on the git \n     repository.\n   - Perform builds using the _Developer Command Prompt for Visual Studio_ instead\n     of the regular `cmd.exe`.\n   - Once the package manager has been built, it must be used to install\n     and build some open source projects.  Before doing that, an environment \n     variable must be defined which specifies how the package should be built.\n     The easiest way would be to add it into the system environment variables\n     in the System applet of the Windows Control Panel.  This example assumes \n     64-bit static libraries will be built, which is what is generally \n     recommended:\n        ```\n        VCPKG_DEFAULT_TRIPLET=x64-windows-static\n        ```\n   - From the command line, once the variable above has been defined, install\n     both *zlib* and *libevent*.  Note that libevent may also automatically \n     install *openssl*.  If it does not, it may need to be manually specified \n     to properly link the lsquic executables.\n        ```\n        vcpkg install zlib:x64-windows-static\n        vcpkg install libevent:x64-windows-static\n        vcpkg integrate install\n        ```\n   - Clone and compile boringssl.  It can be cloned from [here](https://boringssl.googlesource.com/boringssl).\n   \n        ```\n        git clone https://boringssl.googlesource.com/boringssl\n        cd boringssl\n        cmake -DCMAKE_GENERATOR_PLATFORM=x64 --config Debug -DBUILD_SHARED_LIBS=OFF -DOPENSSL_NO_ASM=1 .\n        msbuild ALL_BUILD.vcxproj\n        set boringssl=%cd%\n        ```\n   - Visual Studio can be run, and the project opened within the boringssl\n     directory.  Set the solution configuration to *Debug* and the solution \n     platform to *64-bit*.  Compile the project.\n   - Repeat the cmake and compile steps replacing *Debug* with *Release*.\n\nMake and Compile LSQUIC\n-----------------------\n\n\nClone lsquic:\n\n   ```\n   git clone https://github.com/litespeedtech/lsquic.git --recurse-submodules\n   cd lsquic\n   ```\n\nConfigure the build using cmake (you can specify `Release` instead of `Debug`\nto build an optimized version of the library, but that won't build tests):\n\n   ```\n   cmake -DCMAKE_GENERATOR_PLATFORM=x64 -DBUILD_SHARED_LIBS=OFF ^\n        -DVCPKG_TARGET_TRIPLET=x64-windows-static -DCMAKE_BUILD_TYPE=Debug ^\n        -DCMAKE_TOOLCHAIN_FILE=c:/tools/vcpkg/scripts/buildsystems/vcpkg.cmake ^\n        -DBORINGSSL_DIR=%boringssl% .\n   ```\n\nCompile everything (add `/m` flag if you have processors to spare):\n\n   ```\n   msbuild ALL_BUILD.vcxproj\n   ```\n\n`http_client.exe` should be found in the `Debug` (or `Release`) directory.\n   \nRun tests (assuming `Debug` build):\n\n   ```\n   msbuild RUN_TESTS.vcxproj\n   ```\n\nHave fun,\n\nLiteSpeed QUIC Team.\n\nCopyright (c) 2017 - 2020 LiteSpeed Technologies Inc\n"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 65.4443359375,
          "content": "2024-12-16\n    - 4.1.0\n    - Update to ls-qpack v2.6.0 to fix a infinite loop.\n    - Add lsquic_engine_get_conns_count() API\n    - Updated ea_generate_scid() API\n    - Fix retry packet SCID generation to follow engine API.\n    - Fix QUICv2 header protection key when retry packet is involved.\n\n2024-09-23\n    - 4.0.12\n    - Fix stream WANT_WRITE flag that causes busy looping.\n\n2024-09-09\n    - 4.0.11\n    - Fix assert failure related to splitting a large packet.\n\n2024-07-02\n    - 4.0.10\n    - Fix server initial packet padding.\n    - Fix a handshake failure corner case due to packet corruption.\n\n2024-06-12\n    - 4.0.9\n    - Fix bpq_count (issue #504).\n\n2024-03-12\n    - 4.0.8\n    - Fix RETIRE_CONNECTION_ID frame abuse.\n    - Fix some assert failures.\n\n2024-02-28\n    - 4.0.7\n    - Fix overly strict 0-RTT packet DCID validation.\n    - Update docker build.\n\n2024-02-23\n    - 4.0.6\n    - Fix ACK handling.\n    - Do not apply congestion control to CONNECTION_CLOSE frame.\n\n2024-02-07\n    - 4.0.5\n    - Fix CPU spinning due to STREAM_BLOCKED frame.\n\n2024-01-08\n    - 4.0.4\n    - Fix DCID validation.\n    - Fix CPU spinning due to pending STREAM_BLOCKED frame.\n\n2023-12-25\n    - 4.0.3\n    - Fix session resumption bug introduced in 4.0.2.\n\n2023-12-19\n    - 4.0.2\n    - More strict RFC compliance.\n    - Minimize packet generated when send STREAM_BLOCKED frame\n    - Fix memory management bugs.\n    - Fix memory leak in unit tests.\n\n2023-05-14\n    - 4.0.1\n    - Fix send_ctl bug.\n    - Make logid consistent\n    - Reduce memory usage for storing CIDs.\n\n2023-03-14\n    - 4.0.0\n    - Add support for QUICv2 (RFC9369).\n    - Add support for version negotiation (RFC9368).\n    - Retry packet for address validation.\n    - Improve handshake under high packet loss/corruption.\n    - Improve QUIC interop results\n\n2023-01-26\n    - 3.3.1\n    - Fix blocked header encoding stream due to connection flow control congestion.\n    - Fix qeh_write_headers bug for Windows.\n    - Fix corner case for packet resizing.\n\n2023-01-04\n    - 3.3.0\n    - Improve path validation logic to avoid sending padded packet to unverified\n      peer, follow 3X anti-amplification rule.\n    - Optimize application callback when STOP_SENDING frame is received.\n    - Improve new connection callback logic.\n    - Improve handling of a closed connection.\n    - Update BoringSSL to the most recent version.\n    - Fix memory leaks in gquic handshake and packet handling.\n    - Update ls-qpack to 2.5.1, ls-hpack to 2.3.1 to address compiler warnings\n\n2022-10-20\n    - 3.2.0\n    - Update ls-qpack to 2.5.0 to address a decoder bug\n    - Assertion failure if poison packet was acked\n    - Fix packet_in pool memory leak\n\n2022-08-16\n    - 3.1.2\n    - Update ls-qpack to 2.4.0 to address a use-after-free bug\n    - Address a few corner cases that trigger assert failures.\n    - Properly handle unexpected large packet for gQUIC.\n    - Fix memory leak in shared hash interface\n    - Fix IPv6 MTU detection\n    - Fix wrong size used in packet regeneration.\n\n2022-05-13\n    - 3.1.1\n    - Fix memory leak in processing stream frames (isse #368)\n\n2022-05-06\n    - 3.1.0\n    - Better handling of transport parameter max_table_capcity < 32\n    - Fix NULL pointer dereference in handshake\n    - Fix 0-RTT transport parameter validation (issue #367)\n    - Remove unnecessary debug log to avoid NULL pointer dereference\n    - Tick connection on datagram write (pull #314)\n    - Do not dispatch write event for FINISHED stream\n    - Tweaks for CMake configuration (pull #354 #369 #370 #373 #374)\n    - Update ls-qpack to 2.3.0\n\n2022-01-10\n    - 3.0.4\n    - Fix overly strict assert()\n    - Do not reset path MTU due to three lost_mtu_probe\n    - Fix handshake failure due to too many realy data\n    - Better build support for Windows platform\n    - Update ls-qpack to 2.2.3\n\n2021-09-30\n    - 3.0.3\n    - Generate ACK for DATAGRAM frame while avoid RETX (issue #312 #325).\n    - Fix BBR end of startup phase detection (issue #328).\n    - Fix HTTP/3 v1 retry handling (issue #332)\n    - Fix memory leak when reset dcid (issue #333)\n    - Fix double decrement for ifc_active_cids_count (#334)\n    - Fix uninitialized value in frame_reader/frame_writer (#316)\n    - Remove a few overly strict asserts.\n\n2021-06-16\n    - 3.0.2\n    - Do not timeout connection if peer sends PING frames.\n    - Do not assert for MTU probe packet when cancel a path.\n\n2021-06-16\n    - 3.0.1\n    - Only force TICK_CLOSE flag after received CONNECTION_CLOSE frame. (issue #292 #281)\n    - Avoid mismatch in packet parsing. (issue #262)\n    - Remove unnecessary shi_delete call.\n\n2021-06-02\n    - 3.0.0\n    - Enable HTTP/3 v1 by default, drop draft 34.\n    - Prevent connection timeout when client does not send PING frame.\n    - Close connection ASAP after recieve CONNECTION_CLOSE (issue #284)\n    - Do not assert() when decode a trailer.\n    - Properly handle GOAWAY frame, do not close the last acknowledged stream.\n\n2021-04-20\n    - 2.30.2\n    - Update ls-hpack to 2.3.0 to address dynamic table size limit (issue #260).\n\n2021-04-16\n    - 2.30.1\n    - Fixed an unintialized data member for handling pushed headers.\n    - Added a new status code for version negotiation failure.\n    - Fixed a few compliance issues found by h3spec.\n    - Addressed high CPU usage when transport cannot send pending packets.\n\n2021-04-12\n    - 2.30.0\n    - Added support for sending/receiving multiple headers to address the\n      case related to \"100 continue\" header handling.\n    - Addressed high CPU usage for a GOAWAY connection before sending\n      CONNECTION_CLOSE.\n    - Addressed SIGFPE due to zero pacing rate. (ISSUE #254).\n    - Fixed a minor issue related to multi-paths.\n\n2021-03-31\n    - 2.29.6\n    - Documentation: describe lsquic internals (\"guts\").\n    - Two more fixes to compliance issues found by h3spec.\n    - Truncate, don't abort, SCIDs larger than 16 bytes (PR #244).\n    - Several small internal improvements and space optimizations.\n\n2021-03-17\n    - 2.29.5\n    - Fix a few issues detected by h3spec for better compliance with HTTP/3\n      standard.\n\n2021-03-08\n    - 2.29.4\n    - [BUGFIX] Infinite loop in stream: returned HQ frame can be at any\n      point on the list.\n    - [BUGFIX] Fail push promise immediately if STREAM_NOPUSH is set.\n\n2021-03-03\n    - 2.29.3\n    - [BUGFIX] Do not send RESET_STREAM if writing to stream is already\n      finished.\n    - perf_client: wait for all ACKs before exiting.\n    - Improve how generated RESET_STREAM is logged.\n    - Fix compilation in different combos of adv_tick/conn_stats flags.\n    - Move qpack warning disablement into src/liblsquic/CMakeLists.txt.\n\n2021-02-23\n    - 2.29.2\n    - Fix regression in gQUIC server: bug #234.\n\n2021-02-18\n    - 2.29.1\n    - Make it possible to build the library and unit tests without\n      libevent.\n    - Build all command-line utilities in bin/\n    - Add perf_client and perf_server command-line utilities to test\n      performance according to the \"perf\" protocol.\n\n2021-02-10\n    - 2.29.0\n    - [FEATURE] QUIC and HTTP/3 Internet Draft 34 support and v1 support.\n      The latter is turned off by default.\n    - Drop support for ID-28 and ID-32.\n    - [BUGFIX] IETF QUIC mini conn receive history (trechist): allow\n      unlimited inserts by dropping smallest elements.\n    - [BUGFIX] gQUIC: set STTL to correct value, issue #226.\n    - [BUGFIX] Account for poison packet gap when MTU probe was too large.\n\n2021-02-03\n    - 2.28.0\n    - [API] lsquic_ssl_sess_to_resume_info() is the new way to get\n      session info.\n    - [API] Add user pointer to ea_generate_scid callback.\n    - [API] Add lsquic_dcid_from_packet() -- a fast function to parse\n      out DCID.\n    - [API] Add es_max_batch_size to control outgoing packet batch size.\n    - [BUGFIX] Disallow sending of header while promise is being written.\n    - [BUGFIX] Flush stream when buffered bytes exhaust stream cap.\n    - [BUGFIX] Deactivate HQ frame if writing push promise fails.\n    - Perform sanity check on peer transport parameters and fail the\n      handshake if some flow control limits are too low.  This can be\n      turned off, see es_check_tp_sanity.\n    - http_server: fix how requests are read in \"hq\" mode.\n\n2021-01-27\n    - 2.27.6\n    - [BUGFIX] Replace dispatch read/write events assertion with a check.\n    - [BUGFIX] gQUIC connection close: there is no HEADERS stream without\n      HTTP flag, see issue #220.\n    - http_client, http_server: add hq protocol support and other flags\n      for use with QUIC Interop Runner.\n    - Fix: use IP_PMTUDISC_PROBE (not IP_PMTUDISC_DO) on Linux to set\n      Don't-Fragment flag on outgoing packets.\n    - Fix send_packets_one_by_one on Windows platform when sending\n      multiple iovs, see issue #218.\n    - Exit echo_client on Windows immediately, see issue #219.\n\n2021-01-18\n    - 2.27.5\n    - [BUGFIX] Assertion in send controller when path validation fails.\n    - [BUGFIX] Assertion in BBR when sending out-of-order packets is\n      detected.\n    - [BUGFIX] Drop overflow receive history ranges when cloning.\n    - Log correct size of the incoming packet.\n    - Fix internal stream function.\n\n2021-01-13\n    - 2.27.4\n    - [API] Add lsquic_conn_get_sni(), fixes issue #203.\n\n2021-01-08\n    - 2.27.3\n    - [BUGFIX] gQUIC: do not destroy critical streams when connection is\n      closed.  See issue #201.\n    - [BUGFIX] Drop #if LSQUIC_CONN_STATS from lsquic.h.  See issue #211.\n    - [BUGFIX] Challenge cancellation when path validation fails.\n    - [BUGFIX] Do not send FIN if RST is scheduled to be sent on a stream.\n    - [BUGFIX] gQUIC's is_tickable() when connection is closing.\n    - [BUGFIX] Q050 processing of GOAWAY frames.\n\n2021-01-06\n    - 2.27.2\n    - [BUGFIX] Memory corruption in receive history copy-ranges function.\n\n2021-01-06\n    - 2.27.1\n    - [API] New knob to set outgoing packet batch size.\n    - Aborted connection now become tickable immediately.\n    - Abort connection when HTTP/3 frame cannot be opened (can only happen\n      when malloc fails).\n\n2020-12-31\n    - 2.27.0\n    - [API] Remove keylog callbacks.  See issue #188.\n    - Add a bit more ALPN logging.\n\n2020-12-23\n    - 2.26.2\n    - [BUGFIX] Do not drop incoming data when STOP_SENDING is received.\n    - [BUGFIX] Receipt of STOP_SENDING should not cause read-reset.\n    - [BUGFIX] Allow stream writes after receiving RESET.\n    - [BUGFIX] Typo in stream: ANDing enum with wrong flag.\n    - [BUGFIX] Reset elision: do not use zero as special stream ID value,\n      for zero is a valid stream ID in IETF QUIC.\n    - [API] Add optional on_conncloseframe_received() callback.\n    - Use zero error code in RESET stream sent in response to STOP_SENDING.\n\n2020-12-17\n    - 2.26.1\n    - [BUGFIX] Migration corner cases: drop or pad over path challenge\n      and response frames when necessary.\n    - Fix stream unit test.\n\n2020-12-09\n    - 2.26.0\n    - [OPTIMIZATION] Adjust packet reordering threshold when spurious losses\n      are detected.\n    - [API] Pass pointer to local sockaddr to ea_get_ssl_ctx() callback.\n\n2020-12-04\n    - 2.25.0\n    - [API, FEATURE] Add es_delay_onclose option to delay on_close until all\n      data is ACKed.  Use new function lsquic_stream_has_unacked_data() to\n      learn whether peer acknowledged all data written to stream.\n    - [API] Add optional on_reset() stream callback to get notifications\n      when RESET or STOP_SENDING frames are received.\n    - [BUGFIX] On STOP_SENDING, make conn tickable is _writeable_, not\n      readable.\n\n2020-11-24\n    - 2.24.5\n    - [FEATURE] Improve Delayed ACKs extension and turn it on by default.\n    - Limit receive history to a finite amount of memory.\n\n2020-11-18\n    - 2.24.4\n    - [BUGFIX] Check whether ECN counts are set in ACK struct before using\n      them.\n    - [BUGFIX] Calculate TLP timer correctly when only one packet is in\n      flight.\n    - [BUGFIX] Min RTO delay is 200 milliseconds, not 1 second.\n    - [BUGFIX] Memory leak in QPACK decoder handler: discard hset when\n      necessary.\n    - Allow retired and drained CIDs to be reused after a timeout.\n\n2020-11-11\n    - 2.24.3\n    - [BUGFIX] Get rough RTT estimate on receipt of Handshake packet.\n      This prevents BBR on the client from miscalculating pacing rate,\n      slowing down sending of ACK packets.\n    - [BUGFIX] Packets sent during handshake are app-limited.\n    - [BUGFIX] Bandwidth sampler starts in app-limited mode.\n    - [BUGFIX] Memory leak: free QPACK handler context in stream dtor.\n    - Logging improvements.\n\n2020-11-05\n    - 2.24.2\n    - [BUGFIX] Allow peer to migrate when its SCID is zero-length.\n    - [BUGFIX] PADDING size calculation: only one Short packet can be\n      coalesced.  (This should have been part of the fix in 2.24.1).\n    - Abort connect if received NEW_CONNECTION_ID but current DCID is\n      zero-length.\n    - Improve log messages\n\n2020-11-04\n    - 2.24.1\n    - [API] Allow use of ea_get_ssl_ctx() on the client (optional).  PR #186.\n    - [BUGFIX] Expand datagram with ack-eliciting Initial to 1200 bytes\n      after connection promotion.\n    - [BUGFIX] Discard CRYPTO frames from lower encryption levels after\n      connection promotion.\n    - [BUGFIX] Cancel path response if path could not be initialized.\n\n2020-10-28\n    - 2.24.0\n    - [FEATURE] QUIC and HTTP/3 Internet Draft 31 support.  Drop ID-30\n      and ID-31 support.\n    - [BUGFIX] Divide-by-zero in newly enabled conn stats code when no\n      packets were sent.\n    - [BUGFIX] Memory leak in gQUIC client when server hello cannot be\n      parsed.\n    - [BUGFIX] Server Initial packet size calculation.\n    - Log user-agent and CONN_CLOSE reason when peer reports error.\n    - Example programs: Specify ALPN for echo and md5 clients and servers\n      (issue #184).\n    - Example programs: Don't add \"QUIC_\" prefix to lines in keylog file\n      (issue #185).\n    - http_server: Fix fd leak in preadv mode; fix preadv() usage when\n      reading from disk.\n\n2020-10-22\n    - 2.23.3\n    - [BUGFIX] Update packetization threshold when writing to stream\n      after packet size is reduced following an RTO.\n\n2020-10-21\n    - 2.23.2\n    - Add QPACK stats collection and experimentation mode, see the new\n      es_qpack_experiment setting.\n    - Log busy connection stats every second using the new \"conn-stats\"\n      log module.\n    - Log about skipping only once.\n    - Update HTTP/3 greased frame type formula.\n    - Use ls-qpack v2.2.1.\n\n2020-10-13\n    - 2.23.1\n    - [FEATURE] IETF Client 0-RTT support.\n    - [BUGFIX] Do not schedule MTU probe on first tick.\n    - [BUGFIX] Parsing DATAGRAM frame.\n    - [BUGFIX] If push promise fails, do not invoke hset destructor.\n    - [BUGFIX] Client: When connections are IDed by port number, check DCID.\n      Fixes issue #176.\n    - [BUGFIX] Regression introduced in 2.22.0: use correct number of\n      PNSs for IETF mini conn during promotion.\n    - Revert the 2.22.1 lsquic_is_valid_hs_packet change.  All that was\n      necessary is a change to the way we call it in lsquic_engine.  No\n      change to the function itself is required.\n\n2020-10-08\n    - 2.22.1\n    - [BUGFIX] Function that checks validity of handshake packets.\n\n2020-10-07\n    - 2.22.0\n    - [FEATURE] Extensible HTTP Priorities (HTTP/3 only).\n    - [FEATURE] Add conn context to packet-out memory interface (PR #175).\n    - [BUGFIX] gQUIC proof generation: allocate buffer big enough for\n      signature (issue #173).\n    - [BUGFIX] Make library thread-safe: drop use of global variables\n      (issue #133, issue #167).\n    - [BUGFIX] Deactivate only *recent* HQ frame, not any HQ frame.\n    - [BUGFIX] gQUIC server: associate compressed cert with SSL_CTX,\n      instead of keeping them in a separate hash, potentially leading\n      to mismatches.\n    - [BUGFIX] Stream data discard infinite loop: break on FIN.\n    - cmake: add install target via -DCMAKE_INSTALL_PREFIX (PR #171).\n    - Support randomized packet number to begin a connection.\n    - Mini and full IETF connection size optimization.\n    - http_client: specify HTTP priorities based on stream conditions.\n\n2020-09-29\n    - 2.21.0\n    - [FEATURE] QUIC and HTTP/3 Internet Draft 31 support.\n    - [API] Let user generate Souce Connection IDs.\n    - [FEATURE] Allow building lsquic as shared library.\n    - [OPTIMIZATION] Receive history: use a single contiguous memory\n      block for everything.\n    - Deprecate QUIC versions ID-27 and ID-30.\n\n2020-09-25\n    - 2.20.2\n    - [BUGFIX] Memory leak: free pushed promise when refcnt is zero.\n    - [BUGFIX] Memory leak in IETF full conn dtor: cleanup closed IDs sets.\n\n2020-09-23\n    - 2.20.1\n    - [BUGFIX] Typo in new \"validate peer addr by DCID\" code.  It is\n      a benign bug (works either way), but better to fix it.\n    - Simplify Stream Priority Iterator (SPI).\n    - Minor documentation updates.\n\n2020-09-15\n    - 2.20.0\n    - [FEATURE] QUIC and HTTP/3 Internet Draft 30 support.\n    - [FEATURE] Unreliable Datagram Extension support.\n    - [FEATURE] Adaptive congestion controller.\n    - [BUGFIX] Do not send MAX_STREAM_DATA frames on crypto streams.\n    - [BUGFIX] Fail with CRYPTO_BUFFER_EXCEEDED when too much CRYPTO\n      data comes in.\n    - [BUGFIX] Spin bit is now strictly per path; value is reset on\n      DCID change.\n    - [BUGFIX] Check that max value of max_streams_uni and\n      max_streams_bidi TPs is 2^60.\n    - [BUGFIX] Close IETF mini conn immediately if crypto session\n      cannot be initialized.\n    - Deprecate ID-28 (no browser uses it): it's no longer in the\n      default versions list.\n    - New programs duck_server and duck_client that implement the\n      experimental siduck-00 protocol.  They quack!\n    - IETF crypto streams: don't limit ourselves from sending.\n    - Command-line programs: turn off QL loss bits if -G is used, as\n      Wireshark cannot decrypt QUIC packets when this extension is used.\n    - Turn all h3 framing unit tests back on.\n    - Fix malo initialization when compiled in no-pool mode.\n\n2020-09-08\n    - 2.19.10\n    - [FEATURE] Add lsquic_stream_pwritev().  This function allows one to\n      reduce the number of system calls required to read a file from disk\n      by using lsquic_stream_pwritev() together with preadv(2).\n    - [BUGFIX] When stream is reset, it is writeable -- let user collect\n      the error.\n    - [BUGFIX] Calculate correct conn flow control if reading ends early.\n    - [BUGFIX] Remove stream from read and write queues on internal\n      shutdown.  This is a regression introduced in 2.19.7.\n    - [BUGFIX] Swapped arguments in IETF RESET_FRAME generation.\n    - Turn off mini conn history when compiling with Visual Studio; this\n      allows the project to compile on Windows again.\n    - http_client: Add -3 flag to stop reading from streams early; code\n      cleanup.\n    - Don't use -Werror.\n\n2020-09-02\n    - 2.19.8\n    - [FEATURE] Update the timestamp extension to latest version.\n    - [FEATURE] Cope with appearance of ECN blackholes.\n    - [OPTIMIZATION] return packno offset and size when header is generated.\n    - [BUGFIX] ignore old ACK frames in mini conns.\n    - [BUGFIX] Mark initial server path as initialized.\n    - [BUGFIX] Do not merge ACK if ECN counts do not match.\n    - Turn incoming packet number history in mini conn back on.\n    - Record mini conn event history again when compiled in debug mode.\n    - IETF mini conn: log when ACK is queued.\n    - Clean up and refactor code in several places.\n\n2020-08-26\n    - 2.19.7\n    - Handle ECT-CE event: issue a loss event.\n    - Log the fact that we ignore SETTINGS_MAX_HEADER_LIST_SIZE.\n    - Use Max Push ID in GOAWAY frame to cancel promises.\n    - Add support for HTTP/3 CANCEL_PUSH frame.\n    - lsquic_stream_is_pushed: streams without headers are never pushed.\n    - [BUGFIX] Regression in lsquic_stream_shutdown_internal: now it shuts down.\n    - Improve logic whether to generate CONNECTION_CLOSE.\n\n2020-08-20\n    - 2.19.6\n    - Don't process incoming ECN marks if ECN is not enabled.\n    - Schedule ACK when incoming packet is marked with CE.\n\n2020-08-11\n    - 2.19.5\n    - [BUGFIX] Generate frame record when moving an ACK from one buffered\n      packet to another.\n\n2020-08-06\n    - 2.19.4\n    - [BUGFIX] Do not return an oversize MTU probe to connection twice.\n    - [FEATURE] Delayed Acks updated to latest draft.  Still experimental.\n    - Minor code cleanup in IETF full connection.\n\n2020-08-04\n    - 2.19.3\n    - [BUGFIX] Regression in 2.19.1 that breaks Q050\n\n2020-07-30\n    - 2.19.2\n    - [BUGFIX] Do not reduce PLPMTU size by network overhead.\n    - [BUGFIX] Windows build.\n\n2020-07-29\n    - 2.19.1\n    - [FEATURE] DPLPMTUD support.  IETF connections now search for the\n      maximum packet size, improving throughput.\n    - [DEBUG] Record event in stream history when on_close() is called\n      in dtor.\n\n2020-07-22\n    - 2.18.2\n    - [BUGFIX] Send prediction: lone path challenges do not get squeezed out\n    - Fix crash in http_client: now -K and -B can be used simultaneously\n\n2020-07-14\n    - 2.18.1\n    - [FEATURE] Implement the \"QUIC bit grease\" extension.\n    - [BUGFIX] Selecting CID used for logging on client.\n    - [BUGFIX] Header protection assertion.\n    - [BUGFIX] Server: enable SSL key logging when cert lookup callback\n      is not set.\n    - Remove some dead code.\n\n2020-07-06\n    - 2.18.0\n    - [API] Rename \"0-RTT\" to \"session resumption.\" In IETF QUIC, \"0-RTT\"\n      always refers to early data, meaning a request that the server can\n      reply to in the very first return flight.  A more appropriate name\n      for what we support on the client site is \"session resumption,\" which\n      is standard TLS terminology.  Later, when we add support for 0-RTT\n      (early data), we can use the 0-RTT terminology again, this time in\n      proper context.\n    - [BUGFIX] Do not set certificate callback if ea_lookup_cert is NULL.\n    - [BUGFIX] Make connection tickable when it's marked as closed.\n    - [BUGFIX] Fail certificate lookup if SNI is not present in HTTP mode.\n    - Several documentation fixes and improvements.\n    - Minor code cleanup.\n\n2020-06-24\n    - 2.17.2\n    - [BUGFIX] Infinite loop in stream: advance read offset when discarding\n      data.\n    - [OPTIMIZATION] Header protection: only initialize cipher once.\n    - [OPTIMIZATION] Batch header protection application.\n\n2020-06-18\n    - 2.17.1\n    - [FEATURE] QUIC and HTTP/3 Internet Draft 29 support.\n    - [BUGFIX] Check that scheduled packets are also sendable when\n      calculating a connection's \"tickable\" property.\n    - [BUGFIX] Don't count scheduled packets as in-flight when pacer is\n      checked on tick.\n    - gQUIC: delay calling on_new for pushed stream until headers are\n      available.\n    - Allow nested calls to lsquic_engine_connect().\n\n2020-06-15\n    - 2.16.3\n    - [OPTIMIZATION] Stash up to two reordered packets in IETF mini conn\n      instead of dropping them.\n    - [BUGFIX] Crash: check decrypt context before using it.  This regression\n      was introduced in 2.16.2.\n\n2020-06-12\n    - 2.16.2\n    - [BUGFIX] ID-28: do not use TLS middlebox compatibility mode in\n      ClientHello.  This change requires using a newer version of BoringSSL.\n    - [BUGFIX] Free connections in Advisory Tick Time Queue in engine dtor.\n    - [BUGFIX] IETF QUIC client: narrow migration check to a single path.\n    - [BUGFIX] NULL dereference: set function pointers for alarm for path\n      challenges 2 and 3.\n    - [BUGFIX] HTTP/3 headers may be followed immediately by trailers.\n    - [BUGFIX] Log messages when SCID changes.\n\n2020-06-09\n    - 2.16.1\n    - [FEATURE] Use \"no-progress timeout\" after which connection is closed.\n    - [BUGFIX] Select new SCID when current SCID is retired.\n    - [BUGFIX] Don't warn about dropped Initial packet sequence gaps during\n      mini/full handoff.\n    - [BUGFIX] Send correct conn error when HTTP/3 frame is truncated.\n    - [BUGFIX] Mini conn: consider amplification when deciding to return\n      TICK_SEND.\n    - [BUGFIX] Don't double-count tag length in amplification logic.\n    - [BUGFIX] Don't squeeze out lone path challenges.\n    - [BUGFIX] Log messages dealing with scheduled packet queue squeezing.\n    - [BUGFIX] don't wipe current path if no path challenge responses\n      come back.\n    - [BUGFIX] When path is reset, don't lose path_id which is used for\n      logging.\n    - Downgrade flow control violations to info log level from warnings.\n    - Fix connection cap extra check, avoid checks in nested calls.\n    - Fix some unit tests when extra checks are enabled.\n    - Use ls-hpack 2.2.1.\n    - Turn off unconditional extra checks for IETF clients.\n    - Extra checks: don't verify sent size of hello packets.  Client\n      changes DCID length and this check will fail.\n\n2020-06-03\n    - 2.16.0\n    - [API] Use lsxpack_header v206.\n    - [FEATURE] Windows supported.\n    - [BUGFIX] Fix uninitialized variable use in client (regression in\n      2.15.0).\n    - Use ls-hpack 2.2.0.\n    - Use ls-qpack 2.2.0.\n    - Sample programs: fix the way maximum number of packets is\n      calculated.\n    - Remove some dead code.\n\n2020-05-27\n    - 2.15.0\n    - [FEATURE] QUIC and HTTP/3 Internet Draft 28 support.\n    - [BUGFIX] Ignore Retry packets after other packets are decrypted\n      successfully.\n    - [BUGFIX] Transport parameter decoding: CID no longer has 4-byte\n      length minimum.\n    - http_client: fix and optimize lsxpack_header allocator.\n    - Drop support for Internet Draft 25.\n\n2020-05-19\n    - 2.14.8\n    - Support Android.\n    - Rerrange tree: move command-line examples into bin/ and unit\n      tests into tests/ from test/unittests/.\n\n2020-05-12\n    - 2.14.7\n    - [BUGFIX] ALPN-to-version mapping: do not skip h3-Q050.\n    - [BUGFIX] Frame reader: skip headers if target stream is closed.\n\n2020-05-06\n    - 2.14.6\n    - [BUGFIX] Fix amplification mitigation in 0-RTT case.\n    - [BUGFIX] IETF mini connection should not tickable if cannot send\n      a packet due to amplification.\n    - [BUGFIX] Fail if active_connection_id_limit TP is smaller than 2.\n    - [BUGFIX] Qlog server certificates for IETF QUIC connections.\n    - [BUGFIX] Uninitialized struct padding usage in tokgen (benign).\n    - [BUGFIX] Incorrect argument to shi_lookup() (benign).\n\n2020-04-29\n    - 2.14.5\n    - [BUGFIX] In coalesced datagram, ignore packets whose CID does not match.\n    - [BUGFIX] Frame reader: skip headers if target stream is not found.\n    - [BUGFIX] Log message in QPACK decoder handler.\n\n2020-04-24\n    - 2.14.4\n    - [BUGFIX] Heed es_rw_once for pushed HTTP/3 streams.\n    - [BUGFIX] IETF client: set correct flags on bidirectional streams.\n    - [BUGFIX] Generate Cancel Stream QPACK instructions for abandoned\n      streams.\n    - [BUGFIX] Do not call header callbacks after stream is closed.\n    - Use ls-qpack 2.1.1\n\n2020-04-15\n    - 2.14.3\n    - [BUGFIX] gQUIC: pass correct stream to hsi_create_header_set() callback.\n    - [BUGFIX] Use ls-hpack 2.1.1\n    - Improve stream code readability.\n    - Use ls-qpack 2.0.5\n\n2020-04-08\n    - 2.14.2\n    - [BUGFIX] Use ls-qpack 2.0.4\n    - [BUGFIX] Honor max packet size on the client and when path changes.\n    - http_server: fix prepare_decode() function.\n\n2020-04-07\n    - 2.14.1\n    - [BUGFIX] Place connections on tickable queue when sending is reenabled.\n    - [BUGFIX] A connection is tickable if it has unsent packets.\n    - [BUGFIX] Heed peer's max_packet_size transport parameter.\n\n2020-03-30\n    - 2.14.0\n    - [API] Use lsxpack_header structure to send HTTP headers.\n    - [OPTIMIZATION] nocopy's readable_bytes() function.\n    - http_server: fix typo in error message\n    - Use ls-hpack 2.1.0.\n    - Use ls-qpack 2.0.0.\n\n2020-03-23\n    - 2.13.3\n    - [BUGFIX] ACK ping-pong: TIMESTAMP frame is not to be acked.\n\n2020-03-13\n    - 2.13.2\n    - [BUGFIX] Use of new lsxpack_header API's hsi_prepare_decode().\n\n2020-03-12\n    - 2.13.1\n    - [API] Use lsxpack_header structure to process incoming headers.\n    - [BUGFIX] Fix assertion when zero-padding Initial packet.\n    - [BUGFIX] Use idle timeout before we learn of peer's value.\n    - Use ls-hpack 2.0.1 -- has lsxpack_header changes.\n    - Use ls-qpack 0.14.0 -- new, common with ls-hpack, XXH seed (not\n      used yet).\n    - Code cleanup: prefix exported functions with \"lsquic_\".\n\n2020-03-02\n    - 2.12.0\n    - [FEATURE] QUIC timestamps extension.\n    - [API] New: ea_alpn that is used when not in HTTP mode.\n    - [BUGFIX] SNI is mandatory only for HTTP/3 and gQUIC.\n    - [BUGFIX] Benign double-free -- issue #110.\n    - [BUGFIX] Printing of transport parameters.\n\n2020-02-24\n    - 2.11.1\n    - [FEATURE] QUIC and HTTP/3 Internet Draft 27 support.\n    - [FEATURE] Add experimental delayed ACKs extension.\n    - Drop support for Internet Draft 24.\n    - Code cleanup.\n\n2020-02-14\n    - 2.10.6\n    - [BUGFIX] HTTP/3 framing: don't misinterpret rare occurence as error.\n    - [BUGFIX] Send gap warning due to missing poisoned packet.\n    - Stream unit test for scenario in issue #106.\n\n2020-02-13\n    - 2.10.5\n    - [BUGFIX] BBR: call cci_sent() with correct arguments and at correct\n      time.\n    - Refactor transport parameters module.\n    - Minor code cleanup.\n\n2020-02-11\n    - 2.10.4\n    - [BUGFIX] Send HANDSHAKE_DONE only after Finished is received.\n    - [BUGFIX] Don't treat garbage UDP padding as library error; ignore\n      it instead.\n    - [BUGFIX] Fix compilation on FreeBSD (missing header).\n    - Code cleanup: remove unnecessary #includes.\n\n2020-01-31\n    - 2.10.3\n    - [BUGFIX] Cancel path responses and challenges on old path when\n      switching to new path\n    - Logging network path information.\n\n2020-01-30\n    - 2.10.2\n    - [BUGFIX] Do not delay ACKs for Initial and Handshake packets.\n    - [BUGFIX] Send PATH_CHALLENGE if path changed before mini conn\n      promotion.\n    - Logging improvements.\n    - http_client: discard data faster.\n\n2020-01-29\n    - 2.10.1\n    - [BUGFIX] Coalesced packets could get longer than normal packet\n      size.\n    - Add spin bit configuration option es_spin (-o spin=[01]).\n    - Disable spin bit in 1/16 of connections.\n    - Improve logging a bit.\n\n2020-01-28\n    - 2.10.0\n    - [FEATURE] QUIC and HTTP/3 Internet Draft 25 support.\n    - [API] Drop support for ID-23.\n    - [BUGFIX] Set key phase bit on outgoing packets correctly.\n    - Code cleanup.\n\n2020-01-20\n    - 2.9.0\n    - [API] Drop support for Q039.\n    - Improve ACK-queuing logic.  Send an ACK once in a while if\n      peer keeps on sending non-ack-eliciting packets.\n    - Improve Alt-Svc string: Q050 and later are not included in\n      the old-style \"quic\" string.\n    - Send stateless resets if connection could not be promoted.\n    - Schedule MAX_DATA if needed when DATA_BLOCKED is received.\n    - Use ls-qpack 0.11.2 -- needed for server push optimization.\n    - Code cleanup: handle some error cases, improve logging.\n\n2020-01-16\n    - 2.8.9\n    - [BUGFIX] Use ls-qpack 0.11.1\n    - [OPTIMIZATION] Generate random bytes in batches.\n    - Change loss_bits transport parameter ID to 0x1057 following\n      latest draft.\n    - Randomize period with which PINGs are sent to elicit ACKs.\n    - Some refactoring and code cleanup.\n\n2020-01-14\n    - 2.8.8\n    - [BUGFIX] Invalid read when parsing IETF transport parameters\n      (this was benign).\n    - [OPTIMIZATION] Frame bundling when using buffered packets in\n      IETF QUIC: a) flush QPACK decoder stream and b) include ACKs\n      in opportunistic fashion.\n    - Fix HTTP/3 framing unit test.\n    - Code cleanup.\n\n2020-01-09\n    - 2.8.7\n    - [BUGFIX] Initial packet size check for IETF mini conn applies to\n      UDP payload, not QUIC packet.\n    - Support old and new school loss_bits transport parameter.\n    - Use Q run length of 64 as suggested in the loss bits Draft.\n    - Undo square wave count when packet is delayed.\n    - Code cleanup; minor fixes.\n\n2020-01-06\n    - 2.8.5\n    - [HTTP3] Verify number of bytes in incoming DATA frames against\n      content-length.\n    - [HTTP3] Stop issuing streams credits if peer stops opening QPACK\n      decoder window.  This addresses a potential attack whereby client\n      can cause the server to keep allocating memory.  See Security\n      Considerations in the QPACK draft.\n    - [BUGFIX] Mini conn: don't shorten max packet size for Q050 and later.\n    - [BUGFIX] Init IETF connection flow controller using correct setting.\n    - [BUGFIX] Fix unintended sign extension when removing header protection.\n    - Code cleanup and minor fixes.\n\n2019-12-30\n    - 2.8.1\n    - [FEATURE] Use occasional packet number gaps to detect optimistic\n      ACK attacks.\n    - [BUGFIX] Q050 client: all packet numbers are in the App PNS.\n    - [OPTIMIZATION] Merge multi-range ACK frames, not just single-range\n      ACK frames.\n    - IETF QUIC: use RTT estimate in ack timeout calculation.\n    - IETF handshake: abort conn when unexpected errors occur.\n    - Use PING rather than MAX_DATA frames to elicit ACKs from peer.\n    - Server: enforce 1200 byte Initial minimum packet size.\n    - [CLEANUP] Remove code to disable gQUIC crypto.\n    - [CLEANUP] Remove n_timestamps from ACK info struct.\n    - Optimize driver: reuse previous ancillary message when possible.\n\n2019-12-23\n    - 2.8.0\n    - [FEATURE] Add support for Q050.\n    - [OPTIMIZATION] Reduce mallocs in gQUIC handshake.\n    - [BUGFIX] Disable redo of failed STREAM frame insertion with debug\n      logging.\n\n2019-12-18\n    - 2.7.3\n    - [DEBUG] Further dedup next advisory tick messages when reason is\n      the same.\n    - [BUGFIX] Update size of `a` array in TP struct.  Fixes (benign)\n      GitHub bug #94.\n    - Use Cubic by default again instead of BBR, as it delivers more\n      consistent performance.\n\n2019-12-11\n    - 2.7.2\n    - [BUGFIX] Send controller: update scheduled bytes when DCID length\n      changes (IETF client).\n    - [BUGFIX] Drop alarm check from sanity test.  It no longer works now\n      that we use loss chains.\n    - [PORTABILITY] Fix build on Alpine Linux.\n    - [PORTABILITY] Fix build using XCode.\n    - Client initial DCID length: use RAND_bytes() instead of rand(3).\n    - Add unit tests for connection min heap.\n    - [DEBUG] Log CID in gQUIC handshake module\n    - [DEBUG] Turn on extra checks for IETF client send controller.\n    - [DEBUG] Dedup next advisory tick messages when reason is IDLE timer.\n    - [DEBUG] QPACK decoder handler: log header error code.\n\n2019-12-05\n    - 2.7.1\n    - [BUGFIX] client: don't call ignore_init() in middle of batch send.\n      ignore_init() makes an assumption that the send controller has access\n      to all outgoing packets.  This change wraps a few IETF full connection\n      methods to delay calling ignore_init() until the engine returns all\n      outgoing packets that were batched.\n    - [BUGFIX] set errno to EAGAIN if sendmmsg() can't send all of them.\n      This needs to be done because the value of errno may be lost on\n      some platforms.\n    - [BUGFIX] Typo that set all bits in sm_qflags lead to crashes.\n    - [BUGFIX] Do not cancel header block processing after failure, as\n      QPACK releases the reference in that case.\n    - [CLEANUP] IETF encrypt: replace assert(0) with a warning.\n    - Several small improvements to the test server.\n\n2019-11-27\n    - 2.7.0\n    - [API, FEATURE] Close connection immediately when ea_packets_out()\n      fails with errno != EAGAIN.  The API change is that errno is now\n      examined.  Make sure to set it if using something other than\n      sendmsg() to send packets.\n    - [CLEANUP] Immediate close logic in IETF full conn.\n    - [CLEANUP] Fix bogus warning about uninitialized `pair' variable.\n\n2019-11-22\n    - 2.6.7\n    - [FEATURE] Implement the QL extension (offered by default).\n    - [BUGFIX] Abort when encountering unexpected HTTP/3 frames.\n    - [BUGFIX] Acknowledge (QPACK) HTTP/3 trailers correctly.\n    - [DEBUG] Turn on debug message for next advisory tick.\n\n2019-11-20\n    - 2.6.6\n    - [BUGFIX] Using HTTP/3 to HTTP/1.x converter.\n    - [BUGFIX] Truncate log messages instead of throwing them away.\n\n2019-11-15\n    - 2.6.5\n    - [BUGFIX] High priority buffered packet queue length.\n    - [BUGFIX] Rain time calculation: max_ack_delay is in milliseconds.\n\n2019-11-12\n    - 2.6.3\n    - [BUGFIX] Close DATA frames with empty payload correctly.\n\n2019-11-11\n    - 2.6.2\n    - [BUGFIX] SCID!=ODCID rule applies to Retry packets, not regular\n      packets.\n    - [BUGFIX] Zero-RTT: BoringSSL no longer flips read/write secrets.\n    - [BUGFIX] Truncate ACK frame rather instead of aborting IETF\n      connection.\n    - [BUGFIX] Client: don't send duplicate reset tokens.\n    - [BUGFIX] Remove invalid assertion in H3 framing code.\n    - Silence a warning in send ctl by restructuring switch() statement.\n\n2019-11-08\n    - 2.6.1\n    - [BUGFIX] set retry token on all resubmitted packets.\n    - Event log: log sent packet flags.  In particular, this allows one\n      to see whether token was sent.\n    - Don't migrate client if es_allow_migration is false.\n\n2019-11-07\n    - 2.6.0\n    - [FEATURE] QUIC and HTTP/3 Internet Draft 24 support\n\n2019-11-07\n    - 2.5.2\n    - [BUGFIX] argument order to gQUIC client constructor.  Regression\n      introduced in 2.5.0.\n    - [BUGFIX] split buffered packet error recovery: destroy the correct\n      packet.\n\n2019-11-04\n    - 2.5.1\n    - [BUGFIX] Fix double-free when emptying a packet number space.\n    - [BUGFIX] http_server: fix md5sum handler: handle EOF correctly.\n    - [BUGFIX] Use random values in bits 4 and 5 of the first byte of\n      verneg packets (regression introduced in 2.5.0).\n    - [OPTIMIZATION] Don't compile in expensive attq checks by default.\n    - [OPTIMIZATION] http_server: compile regexes only once.\n\n2019-10-31\n    - 2.5.0\n    - [API] lsquic_engine_connect() can now be passed QUIC version to use.\n    - [OPTIMIZATION] Queue opportunistic ACKs if there is data to be sent.\n    - [BUGFIX] Don't evict streams from priority iterator if there is\n      only one queue.\n    - [OPTIMIZATION, BUGFIX] Several other optimizations and bug fixes.\n    - Use ls-qpack v0.10.7.\n\n2019-10-24\n    - 2.4.10\n    - [BUGFIX] IETF QUIC server: fix uninitialized variable use.\n    - [BUGFIX] make sure TLSv1.3 is not disabled in SSL object.\n    - [BUGFIX] Use issuer name and serial number to cache certs (SKID\n      values are not unique).\n    - [BUGFIX] Always set the idle alarm in IETF connection so that it\n      can time out.\n    - Use ls-qpack v0.10.6, as it silences some warnings.\n\n2019-10-21\n    - 2.4.8\n    - [OPTIMIZATION, BUGFIX] Use ls-qpack v0.10.5.\n\n2019-10-15\n    - 2.4.7\n    - Add echo client and server to the distibution.\n    - Add MD5 client and server to the distibution.\n    - Fix http_client: check command-line arguments better, prevent crash.\n    - Fix IETF conn: can_write_ack() should only care about APP PNS.\n    - Client: delay stream creation until handshake succeds.\n    - Reset HTTP stream whose write end is closed prematurely.\n    - Fix tickable(): mirror behavior of tick() wrt buffered packets.\n    - Log reason why engine is tickable.\n\n2019-10-11\n    - 2.4.6\n    - Minor code cleanup and logging improvements.\n    - Server and client programs: include library version (e.g. 2.4.6)\n      into `server' and `user-agent' headers.\n\n2019-10-08\n    - 2.4.5\n    - [OPTIMIZATION]: flush encoder stream only when necessary.\n    - [BUGFIX] Use ls-qpack v0.10.2 for new API -- and for a bug fix.\n    - [BUGFIX] Typo in IETF conn SETTINGS writer.\n    - Use latest BoringSSL.\n\n2019-10-08\n    - 2.4.4\n    - [API] Add lsquic_alpn2ver() to aid parsing Alt-Svc header.\n    - [BUGFIX] NULL dereference when H3 frame header would be split.\n    - [BUGFIX] Do not close fixed-size H3 frame prematurely.\n    - [BUGFIX] Allow PING frames in IETF mini conn.\n    - [BUGFIX] Mini conns: don't send any packets after receiving\n      CONNECTION_CLOSE.\n    - [BUGFIX] Client migration: reserve slot for DCID from transport params.\n    - [BUGFIX] Allow max_early_data_size=0 -- early_data might not be there.\n    - [BUGFIX] Use an invalid stream number to reset BPT cache (zero is now a\n      valid stream number).\n    - [SPEC] Use FINAL_SIZE_ERROR when FIN mismatch is detected.\n    - [OPTIMIZATION] Closed connection only gets one chance to send packets.\n    - [OPTIMIZATION] Flush headers stream before packetizing stream data.\n    - [OPTIMIZATION] process QPACK encoder STREAM frames immediately.\n    - Update ls-qpack to v0.10.1.\n\n2019-09-30\n    - 2.4.3\n    - Add GQUIC versions to the list of h3 ALPNs for Alt-Svc header.\n      For example, h3-Q043.  Chrome will switch to using this format at\n      some point in the future.\n    - [BUGFIX] Send correct value in max_streams_uni transport param\n    - [SPEC] Abort IETF QUIC connection if max_early_data_size is not set\n      to 0xFFFFFFFF\n\n2019-09-23\n    - 2.4.2\n    - [BUGFIX] H3 framing: fix zero-byte write when space is available\n    - [BUGFIX] Don't send STREAM frame when incoming unidirectgional stream\n      is closed\n    - [BUGFIX] Cancel all pending writes by stream reset by a GOAWAY\n    - [BUGFIX] Fix use-after-free in IETF full conn\n    - [OPTIMIZATION] Wait for session tickets for two seconds and then drop\n      SSL object and crypto streams.\n\n2019-09-18\n    - 2.4.0\n    - [FEATURE] QUIC and HTTP/3 Internet Draft 23 support\n\n2019-09-13\n    - 2.3.1\n    - [BUGFIX] Fix memory leaks\n    - [BUGFIX] Fix unit tests\n\n2019-09-12\n    - 2.3.0\n    - [FEATURE] BBR congestion control is on by default\n    - [BUGFIX] BBR app-limited logic\n    - [BUGFIX] Fix uninitialized warnings in IETF\n    - [BUGFIX] Update ls-qpack to v0.9.14\n    - [CLEANUP] Code cleanup\n\n2019-09-11\n    - 2.2.0\n    - [FEATURE] Server code is included in the library\n    - [FEATURE] IETF QUIC and HTTP/3 Support (ID-22)\n\n2019-05-13\n    - 1.21.2\n    - [OPTIMIZATION] HPACK: use history to improve compression performance\n\n2019-05-06\n    - 1.21.1\n    - [BUGFIX] If FIN or RST not received, don't delay stream destruction.\n    - [OPTIMIZATION] Speed up HPACK encoder by using same hash value to\n      search static and dynamic tables.\n\n2019-04-12\n    - 1.21.0\n    - [FEATURE] Add qlog log module.\n\n2019-04-01\n    - 1.20.0\n    - [FEATURE] Add support for Q046.\n\n2019-03-19\n    - 1.19.6\n    - [BUGFIX] Ensure that Largest Observed does not decrease in ACKs we\n      send.  ACK frames placed in packets in buffered queues (optimization\n      introduced in 1.17.15) can be preceded by an ACK frame generated later.\n      In this case, the older ACK frame should not be sent out, as Chromium-\n      based servers flags decrease in the ACK frame's Largest Observed value\n      as an error.\n\n2019-03-05\n    - 1.19.5\n    - [BUGFIX] Use correct public key from PUBS based on KEXS index.\n    - [BUGFIX] Check flags before dispatching writes, avoiding assert.\n    - [BUGFIX] Set :scheme to \"https\" (instead of \"HTTP\").\n\n2019-02-25\n    - 1.19.4\n    - [BUGFIX] Check buffer bounds when looking up version in 0-RTT blob.\n    - [BUGFIX] http_client: don't fetch 0-rtt info if handshake failed.\n    - Log number of pacer calls at DEBUG, rather than NOTICE, level.\n\n2019-02-18\n    - 1.19.3\n    - [BUGFIX] Q044: don't encode packet number in 6 bytes.  Six-byte\n      packet number encoding does not exist in Q044.  This fixes a\n      regression introduced in '[BUGFIX] Buffered packets can contain\n      ACK frames' -- we need to keep QUIC version in mind when selecting\n      the longest possible packet number encoding used for the buffered\n      packet that carries the ACK.\n    - [BUGFIX] Do not increase CWND when timeout occurs.\n    - http_client: support setting handshake timeout on command line.\n      Use -o handshake_to=timeout.\n    - http_client: use -k to connect UDP socket to pick up ICMP errors.\n    - http_client: allow pathless mode, when only handshake is performed\n      without issuing any requests.  This can be done by simply not\n      specifying a -p flag on the command line.\n\n2019-02-11\n    - 1.19.2\n    - [BUGFIX] Begin negotiation with version provided in 0-RTT info.\n    - [BUGFIX] Version checking in zero_rtt deserialize function.\n\n2019-02-04\n    - 1.19.1\n    - [BUGFIX] Fix Windows build.\n\n2019-02-04\n    - 1.19.0\n    - [FEATURE, API Change] 0-RTT support.  Add function to export 0-RTT\n      information; it can be supplied to a subsequent connect() call.\n    - [FEATURE] Add -0 flag to http_client to exercise 0-RTT support.\n    - [BUGFIX] Resuscitate the Windows build.\n    - [BUGFIX] Send HTTP settings (max header list size) if necessary.\n    - [BUGFIX] Buffered packets can contain ACK frames.\n    - [BUGFIX] Make packet writeable once all STREAM frames are elided.\n    - [BUGFIX] Fix potential null dereference when realloc fails.\n    - cmake: simplify build configuration.\n\n2019-01-28\n    - 1.18.0\n    - [API Change] Can specify clock granularity in engine settings.\n    - [BUGFIX] Pacer uses fixed clock granularity.  Since the change on\n      2018-04-09, it is not necessary to try to approximate the next tick\n      time in the pacer: it can use fix clock granularity specified by\n      the user.\n    - [BUGFIX] Do not tick constantly before handshake is done.\n    - [BUGFIX] Do not exit tick prematurely: reuse packet with ACK.  Even\n      if we cannot allocate *more* packets, we could still be able to write\n      to one already allocated.\n    - [BUGFIX] Do not schedule pacer if there are no lost packets.\n\n2019-01-17\n    - 1.17.15\n    - [BUGFIX] http_client: make sure only one read per on_read() callback\n      is performed in the header conversion bypass (-B) mode.\n    - http_client: with -E, assign random priority when stream is created.\n    - [OPTIMIZATION] On immediate write, place an ACK frame into the first\n      buffered packet if an ACK is queued.  This reduces the number of\n      standalone ACK packets.\n    - [OPTIMIZATION] Allow placing more than one STREAM frame from the same\n      stream into an outgoing packet.  This change minimizes the number of\n      buffered packets required to store several small HTTP messages by\n      virtue of allowing more than one STREAM frame from HEADERS stream in\n      the same packet.\n    - [OPTIMIZATION] Flush headers when writing to buffered packets.  This\n      causes the headers to be written to the same buffered packet queue,\n      thereby improving packet utilization, especially for small HTTP\n      messages.\n\n2019-01-16\n    - 1.17.14\n    - [FEATURE] http_client can now collect stats: time to connect, TTFB,\n      time to download, requests per seconds, and bandwidth.  See -t flag.\n    - [BUGFIX] http_client: -B, -K, and -r can be used at the same time.\n    - [BUGFIX] http_client: do not display cert chain before each request.\n      Now this is only done once per connection, if the handshake is\n      successful and -a option is given.\n    - [BUGFIX] Do not wait to dispatch on_close() after reading.  If a\n      stream is scheduled to be closed after on_read() callback returns,\n      close it immediately instead of waiting until the end of the tick.\n      If client creates new request from on_close() event, they will be\n      processed in the same tick instead of waiting for the next one.\n    - [BUGFIX] HEADERS stream is critical: always treat it with highest\n      priority.\n\n2019-01-10\n    - 1.17.12\n    - [FEATURE] http_client can now issue parallel requests in the context\n      of a single connection.  See -w option.\n\n2019-01-03\n    - 1.17.11\n    - Fix strict aliasing warning in optimized compilation.\n\n2018-12-27\n    - 1.17.10\n    - Fix the example program to be able to use parallel connections\n      again.  (See the -n argument.)\n\n2018-12-18\n    - 1.17.9\n    - [BUGFIX] Engine: reduce minimum batch size from 256 to 4\n\n2018-12-10\n    - 1.17.8\n    - [BUGFIX] Fix compilation on FreeBSD and 32-bit Linux\n\n2018-12-03\n    - 1.17.7\n    - [BUGFIX] Do not unset PING alarm before ringing expired alarms.\n      This prevented PING from ever being sent.\n\n2018-11-29\n    - 1.17.6\n    - Add failsafe: resume sending packets after some time\n\n      The change puts a 1-second limit on the amount of time the engine\n      will not send packets after some packets are delayed.  This makes\n      the library robust in case the user does not unblock the engine\n      explicitly using lsquic_engine_send_unsent_packets() call.\n\n    - [BUGFIX] Handle corner cases in send controller when packets are\n      a) delayed or b) dropped during repackaging.\n    - [BUGFIX] Memory leak: destroy buffered packets during controller\n      cleanup.\n\n2018-11-16\n    - 1.17.3\n    - [BUGFIX] Do not send STOP_WAITING frames when using Q044\n\n2018-10-19\n    - 1.17.2\n    - [BUGFIX] Memory leak in test_frame_rw unit test.\n    - [BUGFIX] Parsing packets with short IETF header: do not overwrite\n      flags.  (Only a problem in unit tests -- benign otherwise.)\n\n2018-10-16\n    - 1.17.0\n    - [API Change] Packet out Memory Interface (PMI) update:\n      - Split PMI pool return into pmi_release and pmi_return\n      - PMI callbacks take peer_ctx and is_ipv6 arguments\n    - [BUGFIX] Fix use-after-free when certificate is updated\n    - Silence gcc warning in optimized mode by performing useless\n      initialization\n    - cmake: use the standard variable CMAKE_BUILD_TYPE instead of\n      DEVEL_MODE\n\n2018-10-03\n    - 1.16.0\n    - [API Change] Add lsquic_conn_n_avail_streams()\n    - [BUGFIX] only dispatch crypto stream read events if WANT_READ is on\n\n2018-09-27\n    - 1.15.0\n    - [API Change] Add LSCONN_ST_PEER_GOING_AWAY to the list of conn statuses\n    - [BUGFIX] free uncompressed headers correctly when error occurs\n\n2018-09-12\n    - 1.14.3\n    - [BUGFIX] Do not abort conn on STREAM frame for a reset stream\n    - [BUGFIX] Drop packets that would become empty due to repackaging.\n      Packets on the scheduled queue may be marked for repackaging.\n      Frames such as ACK frame that are never resent are removed from\n      repackaged packets.  We must check that the newly repackaged packet\n      would not be empty.  If it would be, it is destroyed instead and\n      the next packet on the scheduled queue is used.  Note that this\n      change only affects the logic to return the next packet to be sent.\n      Lost packets that are being rescheduled are already processed in\n      this fashion.\n    - Byteswap CID before logging it - this makes it match Chrome CIDs.\n      (Except Q035, which is the last little-endian GQUIC version we\n      support.)\n\n2018-09-06\n    - 1.14.0\n    - [API Change] Disable packet sending if full batch cannot be sent\n      If lsquic_packets_out_f() cannot send the whole batch, disable\n      packet sending until lsquic_engine_send_unsent_packets() is called.\n    - [BUGFIX] Handle case when STREAM frame does not fit.\n    - [BUGFIX] Always allow incoming STREAM frames to overlap.  Peers\n      may send overlapping STREAM frames even if using versions older\n      than Q043.\n    - Custom header set fixes:\n      - set \"FIN reached\" flag when custom header with FIN flag is\n        claimed;\n      - do not return custom header set for a reset stream.\n\n2018-08-27\n\n    - 1.13.0\n    - [FEATURE, API Change] Add ability to create custom header set\n      objects via callbacks.  This avoids reading and re-parsing\n      headers from the stream.\n\n2018-08-27\n\n    - 1.12.4\n    - Fix memory leak when engine is destroyed\n    - Fix memory leak in http_client\n    - Fix gcc warning in unit tests\n\n2018-08-22\n\n    - 1.12.3\n    - [BUGFIX] Fix duplicate STREAM frame detection\n\n2018-08-20\n\n    - 1.12.2\n    - [BUGFIX] Update count of scheduled bytes when adjusting size of\n      an already-scheduled packet.\n    - Emit info instead of warning messages when stream is used in\n      unexpected ways.\n\n2018-08-17\n\n    - 1.12.0\n    - [FEATURE, API Change] Add support for certificate verification\n\n2018-08-16\n\n    - 1.11.1\n    - [BUGFIX] Fix STOP_WAITING frame processing in the new Q044 code\n\n2018-08-15\n\n    - 1.11.0\n    - [FEATURE] Add support for Q044.\n\n2018-08-09\n\n    - 1.10.2\n    - [BUGFIX] Don't go over limit when creating delayed streams\n\n2018-07-10\n\n    - 1.10.1\n    - [BUGFIX]  process connections after each batch of packets is read\n      This avoids a problem of accumulating a very large list of packets\n      (possible when speeds are high and socket's receive buffer is large)\n      and processing it all at once.\n    - If glibc is older than 2.17, link with rt.  This is necessary for\n      clock_getres(2).\n    - Add version macros to lsquic.h; remove unnecessary includes.\n\n2018-06-13\n\n    - [BUGFIX] allow multiple parallel connections by default\n\n      Use the original method of tracking connections by CIDs by default.\n      If zero-sized CID support is turned on, connections are tracked by\n      the address.  A new connection is not created if another connection\n      is using the same network address\n\n2018-05-30\n\n    - [FEATURE, API CHANGE] Support zero-sized CIDs in received packets\n\n2018-05-24\n\n    - Close connection properly when packet encryption fails\n\n2018-05-23\n\n    - [BUGFIX] Do not produce packet sequence gaps due to delayed packets\n\n2018-05-21\n\n    - [API Change] Add optional callback to call when handshake is done\n    - [API Change, BUGFIX] After send failure, wait until transport available\n\n2018-05-18\n\n    - [API] Expose useful lsquic_ver2str[] in lsquic.h\n    - [BUGFIX] Do not produce packet sequence gaps due to STREAM frame elision\n    - Improve checks of number of incoming streams limit and associated\n      error reporting.\n    - [BUGFIX] Command-line option `-6` now works correctly.\n\n2018-05-16\n\n    - [FEATURE] DNS resolution\n    - [BUGFIX] Frame insertion mis-ID as overlap instead of dup\n    - http_client: fix priority range generated by -E flag\n\n2018-05-09\n\n    - [FEATURE] Add support for Q043.\n    - Support for versions Q037, Q038, Q041, and Q042 has been removed.\n    - Fix typo in debug message.\n    - Fix code indentation.\n    - Add /* fallthru */ comment to stop newer gcc from complaining.\n    - Logger: fix compilation of optimized Windows build.\n\n2018-05-04\n\n    - [FEATURE] Add support for Q042.\n    - Remove comment: MSPC is obsolete (no code changes)\n    - Prog: use lsquic_str2ver() when processing -o version flag\n    - Remove unused CTIM and SRBF transport parameters\n    - Disable QUIC versions Q037 and Q038 by default\n    - Fix Windows compilation by including compat header file in\n      lshpack.c\n    - Address warnings produced by newer versions of gcc\n    - Future-proof: turn off -Werror\n\n2018-05-02\n\n    - [BUGFIX] Make lsquic_conn_quic_version() available\n    - Switch to using ls-hpack 1.1\n    - [BUGFIX] Do not ignore stream resets after receiving FIN\n\n2018-04-27\n\n    - HPACK: do not allow header block to end with table size update.\n\n2018-04-25\n\n    - [BUGFIX] Do not create gap in sent packnos when squeezing delayed\n      packets.\n    - [BUGFIX] sendctl checks for all unacked bytes, not just retx bytes.\n    - [BUGFIX] connections with blocked scheduled packets are not tickable\n      for sending.\n    - [BUGFIX] Conn is tickable if it wants to send a connection-level\n      frame.\n\n2018-04-23\n\n    - Fix busy loop: tickable must make progress.  When connection is\n      self-reporting as tickable, it must make progress when ticked.  There\n      are two issues:\n        1. If there are buffered packets, the connection is only tickable if\n           they can be sent out.\n        2. A connection is tickable if there are streams on the servicing\n           queue.  When the tick occurs, we must service the stream\n           independent of whether any packets are sent.\n    - Fix assertion in pacer which can be incorrect under some\n      conditions.\n    - cmake: do not turn on address sanitizer if in Travis.\n\n2018-04-20\n\n    - [BUGFIX] Fix bug in lsquic_engine_connect() exposed by yesterday's\n      changes.\n\n2018-04-19\n\n    - [BUGFIX] Add connection to Tickable Queue on stream write\n    - cmake: use MSVC variable instead of trying to detect\n    - engine: improve connection incref/decref logging\n    - stream: don't ignore errors that may occur on triggered flush\n    - connection: remove obsolete method\n    - engine: indicate connection as tickable if previous call went\n      over threshold\n\n2018-04-09\n\n    [API Change, OPTIMIZATION] Only process conns that need to be processed\n\n    The API is simplified: do not expose the user code to several\n    queues.  A \"connection queue\" is now an internal concept.\n    The user processes connections using the single function\n    lsquic_engine_process_conns().  When this function is called,\n    only those connections are processed that need to be processed.\n    A connection needs to be processed when:\n\n        1. New incoming packets have been fed to the connection.\n        2. User wants to read from a stream that is readable.\n        3. User wants to write to a stream that is writeable.\n        4. There are buffered packets that can be sent out.  (This\n           means that the user wrote to a stream outside of the\n           lsquic library callback.)\n        5. A control frame (such as BLOCKED) needs to be sent out.\n        6. A stream needs to be serviced or delayed stream needs to\n           be created.\n        7. An alarm rings.\n        8. Pacer timer expires.\n\n    To achieve this, the library places the connections into two\n    priority queues (min heaps):\n\n        1. Tickable Queue; and\n        2. Advisory Tick Time queue (ATTQ).\n\n    Each time lsquic_engine_process_conns() is called, the Tickable\n    Queue is emptied.  After the connections have been ticked, they are\n    queried again: if a connection is not being closed, it is placed\n    either in the Tickable Queue if it is ready to be ticked again or\n    it is placed in the Advisory Tick Time Queue.  It is assumed that\n    a connection always has at least one timer set (the idle alarm).\n\n    The connections in the Tickable Queue are arranged in the least\n    recently ticked order.  This lets connections that have been quiet\n    longer to get their packets scheduled first.\n\n    This change means that the library no longer needs to be ticked\n    periodically.  The user code can query the library when is the\n    next tick event and schedule it exactly.  When connections are\n    processed, only the tickable connections are processed, not *all*\n    the connections.  When there are no tick events, it means that no\n    timer event is necessary -- only the file descriptor READ event\n    is active.\n\n    The following are improvements and simplifications that have\n    been triggered:\n\n        - Queue of connections with incoming packets is gone.\n        - \"Pending Read/Write Events\" Queue is gone (along with its\n          history and progress checks).  This queue has become the\n          Tickable Queue.\n        - The connection hash no longer needs to track the connection\n          insertion order.\n\n2018-04-02\n\n    - [FEATURE] Windows support\n\n    - Reduce stack use -- outgoing packet batch is now allocated on the heap.\n\n2018-03-09\n\n    - [OPTIMIZATION] Merge series of ACKs if possible\n\n      Parsed single-range ACK frames (that is the majority of frames) are\n      saved in the connection and their processing is deferred until the\n      connection is ticked.  If several ACKs come in a series between\n      adjacent ticks, we check whether the latest ACK is a strict superset\n      of the saved ACK.  If it is, the older ACK is not processed.\n\n      If ACK frames can be merged, they are merged and only one of them is\n      either processed or saved.\n\n    - [OPTIMIZATION] Speed up ACK verification by simplifying send history.\n\n      Never generate a gap in the sent packet number sequence.  This reduces\n      the send history to a single number instead of potentially a series of\n      packet ranges and thereby speeds up ACK verification.\n\n      By default, detecting a gap in the send history is not fatal: only a\n      single warning is generated per connection.  The connection can continue\n      to operate even if the ACK verification code is not able to detect some\n      inconsistencies.\n\n    - [OPTIMIZATION] Rearrange the lsquic_send_ctl struct\n\n      The first part of struct lsquic_send_ctl now consists of members that\n      are used in lsquic_send_ctl_got_ack() (in the absense of packet loss,\n      which is the normal case).  To speed up reads and writes, we no longer\n      try to save space by using 8- and 16-bit integers.  Use regular integer\n      width for everything.\n\n    - [OPTIMIZATION] Cache size of sent packet.\n\n    - [OPTIMIZATION] Keep track of the largest ACKed in packet_out\n\n      Instead of parsing our own ACK frames when packet has been acked,\n      use the value saved in the packet_out structure when the ACK frame\n      was generated.\n\n    - [OPTIMIZATION] Take RTT sampling conditional out of ACK loop\n\n    - [OPTIMIZATION] ACK processing: only call clock_gettime() if needed\n\n    - [OPTIMIZATION] Several code-level optimizations to ACK processing.\n\n    - Fix: http_client: fix -I flag; switch assert() to abort()\n\n2018-02-26\n    - [API Change] lsquic_engine_connect() returns pointer to the connection\n      object.\n    - [API Change] Add lsquic_conn_get_engine() to get engine object from\n      connection object.\n    - [API Change] Add lsquic_conn_status() to query connection status.\n    - [API Change] Add add lsquic_conn_set_ctx().\n    - [API Change] Add new timestamp format, e.g. 2017-03-21 13:43:46.671345\n    - [OPTIMIZATION] Process handshake STREAM frames as soon as packet\n      arrives.\n    - [OPTIMIZATION] Do not compile expensive send controller sanity check\n      by default.\n    - [OPTIMIZATION] Add fast path to gquic_be_gen_reg_pkt_header.\n    - [OPTIMIZATION] Only make squeeze function call if necessary.\n    - [OPTIMIZATION] Speed up Q039 ACK frame parsing.\n    - [OPTIMIZATION] Fit most used elements of packet_out into first 64 bytes.\n    - [OPTIMIZATION] Keep track of scheduled bytes instead of calculating.\n    - [OPTIMIZATION] Prefetch next unacked packet when processing ACK.\n    - [OPTIMIZATION] Leverage fact that ACK ranges and unacked list are.\n      ordered.\n    - [OPTIMIZATION] Reduce function pointer use for STREAM frame generation\n    - Fix: reset incoming streams that arrive after we send GOAWAY.\n    - Fix: delay client on_new_conn() call until connection is fully set up.\n    - Fixes to buffered packets logic: splitting, STREAM frame elision.\n    - Fix: do not dispatch on_write callback if no packets are available.\n    - Fix WINDOW_UPDATE send and resend logic.\n    - Fix STREAM frame extension code.\n    - Fix: Drop unflushed data when stream is reset.\n    - Switch to tracking CWND using bytes rather than packets.\n    - Fix TCP friendly adjustment in cubic.\n    - Fix: do not generate invalid STOP_WAITING frames during high packet\n      loss.\n    - Pacer fixes.\n\n2017-12-18\n\n    - Fix: better follow cubic curve after idle period\n    - Fix: add missing parts to outgoing packet splitting code\n    - Fix: compilation using gcc 4.8.4\n\n2017-10-31\n\n    - Add APIs.txt -- describes LSQUIC APIs\n\n2017-10-31\n\n    - [API Change] Sendfile-like functionality is gone.  The stream no\n      longer opens files and deals with file descriptors.  (Among other\n      things, this makes the code more portable.)  Three writing functions\n      are provided:\n\n        lsquic_stream_write\n        lsquic_stream_writev\n        lsquic_stream_writef    (NEW)\n\n      lsquic_stream_writef() is given an abstract reader that has function\n      pointers for size() and read() functions which the user can implement.\n      This is the most flexible way.  lsquic_stream_write() and\n      lsquic_stream_writev() are now both implemented as wrappers around\n      lsquic_stream_writef().\n\n    - [OPTIMIZATION] When writing to stream, be it within or without the\n      on_write() callback, place data directly into packet buffer,\n      bypassing auxiliary data structures.  This reduces amount of memory\n      required, for the amount of data that can be written is limited\n      by the congestion window.\n\n      To support writes outside the on_write() callback, we keep N\n      outgoing packet buffers per connection which can be written to\n      by any stream.  One half of these are reserved for the highest\n      priority stream(s), the other half for all other streams.  This way,\n      low-priority streams cannot write instead of high-priority streams\n      and, on the other hand, low-priority streams get a chance to send\n      their packets out.\n\n      The algorithm is as follows:\n\n      - When user writes to stream outside of the callback:\n        - If this is the highest priority stream, place it onto the\n          reserved N/2 queue or fail.\n            (The actual size of this queue is dynamic -- MAX(N/2, CWND) --\n             rather than N/2, allowing high-priority streams to write as\n             much as can be sent.)\n        - If the stream is not the highest priority, try to place the\n          data onto the reserved N/2 queue or fail.\n      - When tick occurs *and* more packets can be scheduled:\n        - Transfer packets from the high N/2 queue to the scheduled\n          queue.\n        - If more scheduling is allowed:\n          - Call on_write callbacks for highest-priority streams,\n            placing resulting packets directly onto the scheduled queue.\n        - If more scheduling is allowed:\n          - Transfer packets from the low N/2 queue to the scheduled\n            queue.\n        - If more scheduling is allowed:\n          - Call on_write callbacks for non-highest-priority streams,\n            placing resulting packets directly onto the scheduled queue\n\n      The number N is currently 20, but it could be varied based on\n      resource usage.\n\n    - If stream is created due to incoming headers, make headers readable\n      from on_new.\n\n    - Outgoing packets are no longer marked non-writeable to prevent placing\n      more than one STREAM frame from the same stream into a single packet.\n      This property is maintained via code flow and an explicit check.\n      Packets for stream data are allocated using a special function.\n\n    - STREAM frame elision is cheaper, as we only perform it if a reset\n      stream has outgoing packets referencing it.\n\n    - lsquic_packet_out_t is smaller, as stream_rec elements are now\n      inside a union.\n\n2017-10-12\n\n    - Do not send RST_STREAM when stream is closed for reading\n    - Raise maximum header size from 4K to 64K\n    - Check header name and value lengths against maximum imposed by HPACK\n    - Fix NULL dereference in stream flow controller\n\n2017-10-09\n\n    - Hide handshake implementation behind a set of function pointers\n    - Use monotonically increasing clock\n    - Make sure that retx delay is not larger than the max of 60 seconds\n\n2017-09-29\n\n    - A few fixes to code and README\n\n2017-09-28\n\n    - Add support for Q041; drop support for Q040\n\n2017-09-27\n\n    - Fix CMakeLists.txt: BoringSSL include and lib was mixed up\n\n2017-09-26\n\n    - Add support for Mac OS\n    - Add support for Raspberry Pi\n    - Fix BoringSSL compilation: include <openssl/hmac.h> explicitly\n\n2017-09-22\n\n    - Initial release\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 11.779296875,
          "content": "# Copyright (c) 2017 - 2022 LiteSpeed Technologies Inc.  See LICENSE.\ncmake_minimum_required(VERSION 3.0...3.23)\n\n\nPROJECT(lsquic C CXX)\n\nSET(LIBS \"-lstdc++\")\n\nOPTION(LSQUIC_FIU \"Use Fault Injection in Userspace (FIU)\" OFF)\nOPTION(LSQUIC_BIN \"Compile example binaries that use the library\" ON)\nOPTION(LSQUIC_TESTS \"Compile library unit tests\" ON)\nOPTION(LSQUIC_SHARED_LIB \"Compile as shared librarry\" OFF)\nOPTION(LSQUIC_DEVEL \"Compile in development mode\" OFF)\n\nINCLUDE(GNUInstallDirs)\n\nMESSAGE(STATUS \"CMake v${CMAKE_VERSION}\")\n\nIF (CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n    # If using older glibc, need to link with -lrt.  See clock_getres(2).\n    include(CheckSymbolExists)\n    check_symbol_exists(clock_getres \"time.h\" HAS_clock_getres_WITHOUT_LIBRT)\n\n    if(NOT HAS_clock_getres_WITHOUT_LIBRT)\n        find_library(RT_LIBRARY rt)\n        set(NEED_LIBRT_FOR_clock_getres ON)\n    endif()\nELSEIF (CMAKE_SYSTEM_NAME STREQUAL \"Android\")\n    # for android-ndk >= r19b\n    set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY \"BOTH\")\n    set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE \"BOTH\")\n    set(CMAKE_FIND_ROOT_PATH_MODE_PATH \"BOTH\")\nENDIF()\n\nIF(\"${CMAKE_BUILD_TYPE}\" STREQUAL \"\")\n    SET(CMAKE_BUILD_TYPE Debug)\nENDIF()\n\nMESSAGE(STATUS \"Build type: ${CMAKE_BUILD_TYPE}\")\n\nIF (NOT \"$ENV{EXTRA_CFLAGS}\" MATCHES \"-DLSQUIC_DEBUG_NEXT_ADV_TICK\")\n    SET(MY_CMAKE_FLAGS \"-DLSQUIC_DEBUG_NEXT_ADV_TICK=1\")\nENDIF()\n\nIF (NOT \"$ENV{EXTRA_CFLAGS}\" MATCHES \"-DLSQUIC_CONN_STATS=\")\n    SET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} -DLSQUIC_CONN_STATS=1\")\nENDIF()\n\nIF (NOT MSVC)\n\nSET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} -Wall -Wextra -Wno-unused-parameter\")\nSET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} -fno-omit-frame-pointer\")\n\nIF(CMAKE_COMPILER_IS_GNUCC AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.9.3)\n    SET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} -Wno-missing-field-initializers\")\nENDIF()\n\nIF(LSQUIC_FIU)\n    SET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} -DFIU_ENABLE=1\")\n    SET(LIBS ${LIBS} fiu)\nENDIF()\n\nIF(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    SET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} -O0 -g3\")\n    IF(CMAKE_C_COMPILER MATCHES \"clang\" AND\n                        NOT \"$ENV{TRAVIS}\" MATCHES \"^true$\" AND\n                        NOT \"$ENV{EXTRA_CFLAGS}\" MATCHES \"-fsanitize\")\n        SET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} -fsanitize=address\")\n        SET(LIBS ${LIBS} -fsanitize=address)\n    ENDIF()\n    # Uncomment to enable cleartext protocol mode (no crypto):\n    #SET (MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} -DLSQUIC_ENABLE_HANDSHAKE_DISABLE=1\")\nELSE()\n    SET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} -O3 -g0\")\n    # Comment out the following line to compile out debug messages:\n    #SET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} -DLSQUIC_LOWEST_LOG_LEVEL=LSQ_LOG_INFO\")\nENDIF()\n\nIF (LSQUIC_DEVEL)\n    SET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} -DLSQUIC_DEVEL=1\")\nENDIF()\n\nIF(LSQUIC_PROFILE EQUAL 1)\n    SET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} -g -pg\")\nENDIF()\n\nIF(LSQUIC_COVERAGE EQUAL 1)\n    SET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} -fprofile-arcs -ftest-coverage\")\nENDIF()\n\nIF(MY_CMAKE_FLAGS MATCHES \"fsanitize=address\")\n    MESSAGE(STATUS \"AddressSanitizer is ON\")\nELSE()\n    MESSAGE(STATUS \"AddressSanitizer is OFF\")\nENDIF()\n\n#MSVC\nELSE()\nSET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} /wd4100\")\t# unreferenced formal parameter\nSET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} /wd4115\")\t# unnamed type definition in parentheses\nSET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} /wd4116\")\t# named type definition in parentheses\nSET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} /wd4146\")\t# unary minus operator applied to unsigned type, result still unsigned\nSET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} /wd4132\")\t# const initialization\nSET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} /wd4200\")\t# zero-sized array\nSET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} /wd4204\")\t# non-constant aggregate initializer\nSET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} /wd4244\")\t# integer conversion\nSET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} /wd4245\")\t# conversion from 'int' to 'unsigned int', signed/unsigned mismatch\nSET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} /wd4267\")\t# integer conversion\nSET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} /wd4214\")\t# nonstandard extension used: bit field types other than int\nSET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} /wd4295\")\t# array is too small to include a terminating null character\nSET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} /wd4324\")\t# structure was padded due to alignment specifier\nSET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} /wd4334\")\t# result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)\nSET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} /wd4456\")\t# hide previous local declaration\nSET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} /wd4459\")\t# hide global declaration\nSET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} /wd4706\")\t# assignment within conditional expression\nSET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} /wd4090\")\t# different 'const' qualifier (TODO: debug ls-sfparser.c)\nSET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} /wd4305\")\t# truncation from double to float\nSET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} -W4 -WX -Zi -DWIN32_LEAN_AND_MEAN -DNOMINMAX -D_CRT_SECURE_NO_WARNINGS -I${CMAKE_CURRENT_SOURCE_DIR}/wincompat\")\nIF(LSQUIC_SHARED_LIB)\n    SET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} -DLSQUIC_SHARED_LIB\")\nENDIF()\nIF(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    SET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} -Od\")\n    #SET (MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} -DFIU_ENABLE=1\")\n    #SET(LIBS ${LIBS} fiu)\nELSE()\n    SET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} -Ox\")\n    # Comment out the following line to compile out debug messages:\n    #SET(MY_CMAKE_FLAGS \"${MY_CMAKE_FLAGS} -DLSQUIC_LOWEST_LOG_LEVEL=LSQ_LOG_INFO\")\nENDIF()\n\nENDIF() #MSVC\n\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}  ${MY_CMAKE_FLAGS} $ENV{EXTRA_CFLAGS}\")\n\nMESSAGE(STATUS \"Compiler flags: ${CMAKE_C_FLAGS}\")\n\nfind_package(Perl)\nIF(NOT PERL_FOUND)\n    MESSAGE(FATAL_ERROR \"Perl not found -- need it to generate source code\")\nENDIF()\n\nIF (MSVC)\n    IF(LSQUIC_SHARED_LIB)\n        set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS YES CACHE BOOL \"Export all symbols\")\n        SET(LIB_SUFFIX .dll)\n    ELSE()\n        SET(LIB_SUFFIX .lib)\n    ENDIF()\nELSE()\n    IF(LSQUIC_SHARED_LIB)\n        SET(LIB_SUFFIX .so)\n    ELSE()\n        SET(LIB_SUFFIX .a)\n    ENDIF()\nENDIF()\n\nIF (NOT DEFINED BORINGSSL_INCLUDE AND DEFINED BORINGSSL_DIR)\n    FIND_PATH(BORINGSSL_INCLUDE NAMES openssl/ssl.h\n                PATHS ${BORINGSSL_DIR}/include\n                NO_DEFAULT_PATH)\nENDIF()\n# This must be done before adding other include directories to take\n# precedence over header files from other SSL installs.\n\nIF (BORINGSSL_INCLUDE)\n    MESSAGE(STATUS \"BoringSSL include directory ${BORINGSSL_INCLUDE}\")\n    INCLUDE_DIRECTORIES(${BORINGSSL_INCLUDE})\nELSE()\n    MESSAGE(FATAL_ERROR \"BoringSSL headers not found\")\nENDIF()\n\nIF (NOT DEFINED BORINGSSL_LIB AND DEFINED BORINGSSL_DIR)\n    FOREACH(LIB_NAME ssl crypto)\n        IF (CMAKE_SYSTEM_NAME STREQUAL Windows)\n            FIND_LIBRARY(BORINGSSL_LIB_${LIB_NAME}\n                NAMES ${LIB_NAME}\n                PATHS ${BORINGSSL_DIR}/${LIB_NAME}\n\t\tPATH_SUFFIXES Debug Release MinSizeRel RelWithDebInfo\n                NO_DEFAULT_PATH)\n        ELSE()\n            FIND_LIBRARY(BORINGSSL_LIB_${LIB_NAME}\n                NAMES lib${LIB_NAME}${LIB_SUFFIX}\n                PATHS ${BORINGSSL_DIR}/${LIB_NAME}\n                NO_DEFAULT_PATH)\n        ENDIF()\n        IF(BORINGSSL_LIB_${LIB_NAME})\n            MESSAGE(STATUS \"Found ${LIB_NAME} library: ${BORINGSSL_LIB_${LIB_NAME}}\")\n        ELSE()\n            MESSAGE(STATUS \"${LIB_NAME} library not found\")\n        ENDIF()\n    ENDFOREACH()\n\nELSE()\n\n\n    FOREACH(LIB_NAME ssl crypto)\n        # If BORINGSSL_LIB is defined, try find each lib. Otherwise, user should define BORINGSSL_LIB_ssl,\n        # BORINGSSL_LIB_crypto and so on explicitly. For example, including boringssl and lsquic both via\n        # add_subdirectory:\n        #   add_subdirectory(third_party/boringssl)\n        #   set(BORINGSSL_LIB_ssl ssl)\n        #   set(BORINGSSL_LIB_crypto crypto)\n        #   add_subdirectory(third_party/lsquic)\n        IF (DEFINED BORINGSSL_LIB)\n            IF (CMAKE_SYSTEM_NAME STREQUAL Windows)\n                FIND_LIBRARY(BORINGSSL_LIB_${LIB_NAME}\n                    NAMES ${LIB_NAME}\n                    PATHS ${BORINGSSL_LIB}\n                    PATH_SUFFIXES Debug Release MinSizeRel RelWithDebInfo\n                    NO_DEFAULT_PATH)\n            ELSE()\n                FIND_LIBRARY(BORINGSSL_LIB_${LIB_NAME}\n                    NAMES lib${LIB_NAME}${LIB_SUFFIX}\n                    PATHS ${BORINGSSL_LIB}\n                    PATH_SUFFIXES ${LIB_NAME}\n                    NO_DEFAULT_PATH)\n            ENDIF()\n        ENDIF()\n        IF(BORINGSSL_LIB_${LIB_NAME})\n            MESSAGE(STATUS \"Found ${LIB_NAME} library: ${BORINGSSL_LIB_${LIB_NAME}}\")\n        ELSE()\n            MESSAGE(FATAL_ERROR \"BORINGSSL_LIB_${LIB_NAME} library not found\")\n        ENDIF()\n    ENDFOREACH()\n\nENDIF()\n\nSET(CMAKE_INCLUDE_CURRENT_DIR ON)\nINCLUDE_DIRECTORIES(include)\nIF(CMAKE_SYSTEM_NAME STREQUAL \"FreeBSD\" OR CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n    # Find libevent on FreeBSD:\n    include_directories( /usr/local/include )\n    link_directories( /usr/local/lib )\nENDIF()\n\nIF (CMAKE_SYSTEM_NAME STREQUAL Windows AND LSQUIC_TESTS AND LSQUIC_BIN)\n    FIND_PATH(GETOPT_INCLUDE_DIR NAMES getopt.h)\n    IF (GETOPT_INCLUDE_DIR)\n        INCLUDE_DIRECTORIES(${GETOPT_INCLUDE_DIR})\n    ELSE()\n        MESSAGE(FATAL_ERROR \"getopt.h was not found\")\n    ENDIF()\n        FIND_LIBRARY(GETOPT_LIB getopt)\n    IF(GETOPT_LIB)\n        MESSAGE(STATUS \"Found getopt: ${GETOPT_LIB}\")\n    ELSE()\n        MESSAGE(STATUS \"getopt not found\")\n    ENDIF()\nENDIF()\n\n# Find zlib and libevent header files and library files\n# TODO: libevent is not strictly necessary to build the library.\nFIND_PATH(ZLIB_INCLUDE_DIR NAMES zlib.h)\nIF (ZLIB_INCLUDE_DIR)\n    INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIR})\nELSE()\n    MESSAGE(FATAL_ERROR \"zlib.h was not found\")\nENDIF()\nIF (CMAKE_SYSTEM_NAME STREQUAL Windows)\n    FIND_LIBRARY(ZLIB_LIB zlib)\nELSEIF(CMAKE_SYSTEM_NAME STREQUAL Darwin)\n    # XXX somehow FIND_LIBRARY() does not find zlib on Travis?\n    SET(ZLIB_LIB z)\nELSE()\n    FIND_LIBRARY(ZLIB_LIB libz${LIB_SUFFIX})\nENDIF()\nIF(ZLIB_LIB)\n    MESSAGE(STATUS \"Found zlib: ${ZLIB_LIB}\")\nELSE()\n    MESSAGE(STATUS \"zlib not found\")\nENDIF()\n\nSET(LIBS lsquic ${BORINGSSL_LIB_ssl} ${BORINGSSL_LIB_crypto} ${ZLIB_LIB} ${LIBS})\n\nIF (LSQUIC_BIN)\n    FIND_PATH(EVENT_INCLUDE_DIR NAMES event2/event.h\n              PATHS ${PROJECT_SOURCE_DIR}/../third-party/include)\n    IF (EVENT_INCLUDE_DIR)\n        INCLUDE_DIRECTORIES(${EVENT_INCLUDE_DIR})\n    ELSE()\n        MESSAGE(WARNING \"event2/event.h was not found: binaries won't be built\")\n        SET(LSQUIC_BIN OFF)\n    ENDIF()\nENDIF()\n\nIF (LSQUIC_BIN)\n    IF (CMAKE_SYSTEM_NAME STREQUAL Windows)\n        FIND_LIBRARY(EVENT_LIB event)\n    ELSE()\n        FIND_LIBRARY(EVENT_LIB libevent${LIB_SUFFIX}\n                    PATHS ${PROJECT_SOURCE_DIR}/../third-party/lib)\n        IF(NOT EVENT_LIB)\n            FIND_LIBRARY(EVENT_LIB libevent.so)\n        ENDIF()\n    ENDIF()\n    IF(EVENT_LIB)\n        MESSAGE(STATUS \"Found event: ${EVENT_LIB}\")\n    ELSE()\n        MESSAGE(WARNING \"libevent not found: binaries won't be built\")\n        SET(LSQUIC_BIN OFF)\n    ENDIF()\nENDIF()\n\n\nIF (NOT MSVC)\n    LIST(APPEND LIBS pthread m)\nELSE()\n    LIST(APPEND LIBS ws2_32)\nENDIF()\n\nIF (LSQUIC_BIN)\n    ADD_SUBDIRECTORY(bin)\nENDIF()\n\nadd_subdirectory(src)\n\nIF(LSQUIC_TESTS AND CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    # Our test framework relies on assertions, only compile if assertions are\n    # enabled.\n    #\n    enable_testing()\n    add_subdirectory(tests)\nENDIF()\n\n\nFIND_PROGRAM(SPHINX NAMES sphinx-build)\nIF(SPHINX)\n    ADD_CUSTOM_TARGET(docs\n        ${SPHINX} -b html\n        docs\n        docs/_build\n    )\nELSE()\n    MESSAGE(STATUS \"sphinx-build not found: docs won't be made\")\nENDIF()\n\nINSTALL(FILES\n    include/lsquic.h\n    include/lsquic_types.h\n    include/lsxpack_header.h\n    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/lsquic\n)\n\nif(WIN32)\n    install(FILES\n        wincompat/vc_compat.h\n        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/lsquic\n    )\nendif()\n"
        },
        {
          "name": "CONTRIBUTORS.txt",
          "type": "blob",
          "size": 0.904296875,
          "content": "# Copyright (c) 2017 - 2022 LiteSpeed Technologies Inc.  See LICENSE.\nIn addition to the LiteSpeed QUIC Team, the following people contributed\nto the LiteSpeed QUIC and HTTP/3 Library:\n\n    - Brian Prodoehl -- Docker file\n    - Amol Desphande -- Windows support\n    - Alexis La Goutte -- Travis-CI integration\n    - Bernhard Jaeger -- DNS Resolution\n    - Zhang Chi -- libevent build fix on Darwin\n    - Omar Roth -- Alpine Linux build and Crystal language bindings\n    - initlife (?) -- XCode build\n    - Rahul Jadhav -- Android support\n    - Victor Stewart -- Generate SCIDs API (connection ID steering)\n    - Aaron France -- Shared library support and Lisp bindings\n    - Suma Subbarao -- Use callback to supply client's SSL_CTX\n    - Paul Sheer -- Callback on arrival of CONNECTION_CLOSE frame\n    - Weiwei Wang -- Some fixes on Windows\n\nThank you!\n\nWe welcome contributions in any form -- patches, issues, pull requests.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.1435546875,
          "content": "FROM ubuntu:20.04 as build-lsquic\n\nENV DEBIAN_FRONTEND noninteractive\n\nRUN apt-get update && \\\n    apt-get install -y apt-utils build-essential git cmake software-properties-common \\\n                       zlib1g-dev libevent-dev\n\nRUN add-apt-repository ppa:longsleep/golang-backports && \\\n    apt-get update && \\\n    apt-get install -y golang-1.21-go && \\\n    cp /usr/lib/go-1.21/bin/go* /usr/bin/.\n\nENV GOROOT /usr/lib/go-1.21\n\nRUN mkdir /src\nWORKDIR /src\n\nRUN mkdir /src/lsquic\nCOPY ./ /src/lsquic/\n\nRUN git clone --depth=1 https://github.com/google/boringssl.git && \\\n    cd boringssl && \\\n    cmake . && \\\n    make\n\nENV EXTRA_CFLAGS -DLSQUIC_QIR=1\nRUN cd /src/lsquic && \\\n    cmake -DBORINGSSL_DIR=/src/boringssl -D BORINGSSL_LIB_crypto=/src/boringssl/build/crypto/libcrypto.a -DBORINGSSL_LIB_SSL=/src/boringssl/build/ssl/libssl.a . && \\\n    make\n\nRUN cd lsquic && cp bin/http_client /usr/bin/ && cp bin/http_server /usr/bin\n\nFROM martenseemann/quic-network-simulator-endpoint:latest as lsquic-qir\nCOPY --from=build-lsquic /usr/bin/http_client /usr/bin/http_server /usr/bin/\nCOPY qir/run_endpoint.sh .\nRUN chmod +x run_endpoint.sh\nENTRYPOINT [ \"./run_endpoint.sh\" ]\n"
        },
        {
          "name": "EXAMPLES.txt",
          "type": "blob",
          "size": 9.47265625,
          "content": "# Copyright (c) 2017 - 2022 LiteSpeed Technologies Inc.  See LICENSE.\nLSQUIC Examples\n===============\n\nLSQUIC comes with several examples of how the library is used.\n\nThe client and server programs described below are built on a common\nframework and share many options.\n\nEcho client and server\n----------------------\n\nEcho client and server (see bin/echo_{client,server}.c) are for simple\nline-based request and reply communication.  Only one stream per connection\nis supported for simplicity.  The client reads input from stdin.\n\nMD5 client and server\n---------------------\n\nSee bin/md5_{client,server}.c\n\nMD5 server accepts connections, computes MD5 sum of streams' (one or more)\npayload, and sends back the checksum.  MD5 client sends one or more file\ncontents to the server.  Both client and server support various options to\nexercise different aspects of LSQUIC.\n\nHTTP client and server\n----------------------\n\nSee bin/http_{client,server}.c\n\nThis pair of programs is to demonstrate how to use HTTP features of QUIC.\nHTTP server is interoperable with proto-quic's quic_client.\n\nDuck client and server\n----------------------\n\nSee bin/duck_{client,server}.c\n\nThis pair of programs implement the siduck-00 protocol.  They provide an\nillustration of using the datagram API.\n\nUsage Examples\n--------------\n\nFetch Google's home page:\n\n    ./bin/http_client -s www.google.com -p /\n\nThe default port number is 443, but it can be specified after colon\nusing the -s flag.  The value of the `host' header as well as the SNI\nvalue defaults to the host part of the -s option.  -H option can be\nused to override it.  For example:\n\n    ./bin/http_client -H www.youtube.com -s www.google.com:443 -p / -M HEAD\n\nThe host part can be an IP address.  Both IPv4 and IPv6 are supported.\nSee ./bin/http_client -h for a (long) list of different flags.\n\nPOST a file to calculate its CRC32 checksum:\n\n    ./bin/http_client -H www.litespeedtech.com -s 443 \\\n                        -p /cgi-bin/crc32.cgi -P file-256M -M POST\n\n    HTTP/1.1 200 OK\n    content-type: text/plain\n    date: Fri, 09 Jun 2017 08:40:45 GMT\n    server: LiteSpeed\n    alt-svc: quic=\":443\"; v=\"35,37\"\n\n    CRC32: 2A0E7DBB\n\nThis is a good way to check that the payload gets to the other side\ncorrectly.  The CGI script is:\n\n    #!/usr/bin/perl\n    use String::CRC32;\n    printf \"Content-type: text/plain\\r\\n\\r\\nCRC32: %X\\n\", crc32(*STDIN)\n\nOn the command line, I do\n\n    alias crc32=\"perl -MString::CRC32 -e'printf qq(%X\\n), crc32(<>)'\"\n\nTo submit several requests concurrently, one can use -n and -r options:\n\n    ./bin/http_client -H www.litespeedtech.com -s 443 \\\n                -p /cgi-bin/crc32.cgi -P file-256M -M POST -n 3 -r 10\n\nThis will open three parallel connections which will make ten POST\nrequests together.\n\nTo perform load testing, it is good to mix sending and receiving data:\n\n    for i in {1..100}; do\n        ./bin/http_client $COMMON_OPTS -p /cgi-bin/crc32.cgi -P file-256M \\\n                                                    -M POST >out-post.$i &\n        ./bin/http_client $COMMON_OPTS -p /docs/file-256M >out-get.$i        &\n        sleep 1\n    done\n\nIf you don't want to create a hundred 256-megabyte out-get.* files, use -K\nflag to discard output.\n\nTesting Large Packet Sizes\n---------------------------------\n\nIETF QUIC supports all valid UDP packet sizes. This section outlines the\nenvironment setup and testing parameters necessary to test this feature.\n\nCompilation\n    - Make sure to compile the library in DEBUG mode so that the NDEBUG\n      define is off.\n    - Build both the http_client and http_server test programs.\n\nRunning Instructions\n    - Specify maximum packet size using -o base_plpmtu=$number.\n      Valid sizes are up to 65535.\n    - Use the -W flag for http_client and http_server for the ability\n      to send packets of large size.\n    - On the client side, use the -z flag to specify the maximum size\n      of packet that the client will accept.\n\nExample Usage\n    ./bin/http_client -p /file-1M -H www.litespeedtech.com -s 192.168.0.85:5443\n        -o version=FF000014\n    ./bin/http_server -c www.litespeedtech.com,certschain,privkey\n        -s 0.0.0.0:5443 -W -o base_plpmtu=65535\n\nAdditional Notes\n    Since this feature does not have MTU discovery enabled at the time of\n    writing, make sure to use client and server machines that share a path\n    with the intended MTU.\n\nControl QUIC Settings via -o Flag\n---------------------------------\n\nMost of the settings in struct lsquic_engine_settings can be controlled\nvia -o flag.  With exception of es_versions, which is a bit mask, other\nes_* options can be mapped to corresponding -o value via s/^es_//:\n\n    es_cfcw             =>  -o cwcf=12345\n    es_max_streams_in   =>  -o max_streams_in=123\n\nAnd so on.\n\nFor example, to test version negotiation:\n\n    ./bin/http_server -c www.litespeedtech.com,certschain,privkey \\\n        -o version=Q035 -L debug 2>server.out &\n    ./bin/http_client -H www.litespeedtech.com -p Makefile -L debug 2>client.out\n\nAbove, the client will start with the default, which is the highest supported\nQUIC version, which the server should negotiate down.  You should see it from\nthe log files.\n\nThe code to set options via -o flag lives in set_engine_option().  It is good\nto update this function at the same time as member fields are added to struct\nlsquic_engine_settings.\n\nControl LSQUIC Behavior via Environment Variables\n-------------------------------------------------\n\nLSQUIC_PACKET_OUT_LIMIT\n\n    If set, the value of this environment variable is the maximum number\n    of packets that can be sent out in one shot.  The limit is in the test\n    program framework's ea_packets_out() callback.\n\n    It is not applicable when sendmmsg(2) is used.\n\n    Note 1: sendmmsg can be enabled using -g option, if available for your\n            platform.\n\n    Note 2: see -m option for a related packet-out limitation.\n\nLSQUIC_LOSE_PACKETS_RE\n\n    If set, this regular expression specifies the numbers of packets which\n    the sender will lose on purpose.  For example:\n\n        export LSQUIC_LOSE_PACKETS_RE='^(3|5|10)$'\n\n    The act of losing a packet is performed by changing its payload to\n    zero-filled buffer of the same size, which is almost as good as\n    not sending anything.  The latter is difficult to implement without\n    negatively affecting the regular code flow.\n\n    Only available in debug builds.\n\nLSQUIC_PACER_INTERTICK\n\n    Number of microsecods to use as constant intertick time in lieu of the\n    pacer's dynamic intertick time approximation.\n\n    Only available in debug builds.\n\nLSQUIC_CUBIC_SAMPLING_RATE\n\n    Number of microseconds between times CWND is logged at info level.\n\n    Only available in debug builds.\n\nLSQUIC_RANDOM_SEND_FAILURE\n\n    Frequency with which sending of packets fails: one out of this many\n    times on average.\n\n    Only available when compiled with -DLSQUIC_RANDOM_SEND_FAILURE=1\n\nLSQUIC_LOG_SECRETS\n\n    If set to true value, crypto secrets will be logged.  Applies to\n    IETF QUIC only.\n\nLSQUIC_COALESCE\n\n    If set to false, packets are not coalesced.  Defaults to true.\n\nLSQUIC_USE_POOLS\n\n    If set to false, all memory pooling code is replaced with calls to\n    malloc() and free().  This facilitates debugging memory issues.\n    The default is true.\n\nLSQUIC_ACK_ATTACK\n\n    If set to true, generate optimistic ACKs.\n\nControl Network-Related Stuff\n-----------------------------\n\n   -D          Set `do not fragment' flag on outgoing UDP packets.\n\n   -z BYTES    Maximum size of outgoing UDP packets.  The default is 1370\n               bytes for IPv4 socket and 1350 bytes for IPv6 socket.\n\n   -S opt=val  Socket options.  Supported options:\n                   sndbuf=12345    # Sets SO_SNDBUF\n                   rcvbuf=12345    # Sets SO_RCVBUF\n\n   -g          Use sendmmsg() to send packets.  This is only compiled in\n               if available.\n\nMore Compilation Options\n------------------------\n\n-DLSQUIC_CONN_STATS=1\n\n    Track some statistics about connections -- packets in, sent, delayed,\n    stream payload per packet size ratio, and some others -- and print them\n    at NOTICE level when connection is destroyed.\n\n    Cumulative connections statistics are printed by the engine when it is\n    destroyed if lsquic_engine_api.ea_stats_fh is set.  The HTTP client\n    programs sets it when -t or -T command-line option is used.\n\n-DLSQUIC_PACKINTS_SANITY_CHECK=1\n\n    Turn on sanity checking for packet interval code.  The packet interval\n    code, shared by both send and receive history modules, contained a bug\n    which prompted me to add a checking function.\n\n-DLSQUIC_SEND_STATS=0\n\n    Turn off statistics collection performed by the send controller: number\n    of packets sent, resent, and delayed.\n\n-DLOG_PACKET_CHECKSUM=1\n\n    When turned on, CRC32 checksum of each sent and received packet is\n    logged as an event.\n\n-DLSQUIC_LOWEST_LOG_LEVEL=LSQ_LOG_WARN\n\n    If you want to go even faster: compile out some log levels entirely.\n\n-DLSQUIC_EXTRA_CHECKS=1\n\n    Add relatively expensive run-time sanity checks\n\n-DLSQUIC_RANDOM_SEND_FAILURE=1\n\n    Simulate failure to send packets to test send resumption logic.  When\n    this flag is specified, sending of packets will randomly fail, about\n    one out of every 10 attempts.  Set environment variable\n    LSQUIC_RANDOM_SEND_FAILURE to change this frequency.\n\n-DLSQUIC_ECN_BLACK_HOLE=1\n\n    When compiled with this flag, setting environment variable\n    LSQUIC_ECN_BLACK_HOLE to 1 will emulate ECN black hole: all received\n    packets with ECN markings are dropped on the floor.\n\n-DLSQUIC_ACK_ATTACK=1\n\n    Enable ACK attack mode.  See LSQUIC_ACK_ATTACK environment variable\n    entry above.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.064453125,
          "content": "MIT License\n\nCopyright (c) 2017 - 2023 LiteSpeed Technologies Inc\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "LICENSE.chrome",
          "type": "blob",
          "size": 1.580078125,
          "content": "A few parts of LiteSpeed QUIC library are based on proto-quic.  That\ncode is covered by this additional license:\n\n------------------------------\n\nCopyright 2015 The Chromium Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n* Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n* Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.958984375,
          "content": "[![Linux and MacOS build status](https://ci.appveyor.com/api/projects/status/x790ve5msewmva2b/branch/master?svg=true)](https://ci.appveyor.com/project/litespeedtech/lsquic-linux/branch/master)\n[![Windows build status](https://ci.appveyor.com/api/projects/status/ij4n3vy343pkgm1j/branch/master?svg=true)](https://ci.appveyor.com/project/litespeedtech/lsquic-windows/branch/master)\n[![FreeBSD build status](https://api.cirrus-ci.com/github/litespeedtech/lsquic.svg)](https://cirrus-ci.com/github/litespeedtech/lsquic)\n[![Documentation Status](https://readthedocs.org/projects/lsquic/badge/?version=latest)](https://lsquic.readthedocs.io/en/latest/?badge=latest)\n\nLiteSpeed QUIC (LSQUIC) Library README\n=============================================\n\nDescription\n-----------\n\nLiteSpeed QUIC (LSQUIC) Library is an open-source implementation of QUIC\nand HTTP/3 functionality for servers and clients.  Most of the code in this\ndistribution is used in our own products: LiteSpeed Web Server, LiteSpeed ADC,\nand OpenLiteSpeed.\n\nCurrently supported QUIC versions are v1, v2, Internet-Draft versions 29, and 27;\nand the older \"Google\" QUIC versions Q043, Q046, an Q050.\n\nStandard Compliance\n-------------------\n\nLiteSpeed QUIC is mostly compliant to the follow RFCs:\n\n- [RFC 9000](https://www.rfc-editor.org/rfc/rfc9000) QUIC: A UDP-Based Multiplexed and Secure Transport\n- [RFC 9001](https://www.rfc-editor.org/rfc/rfc9001) Using TLS to Secure QUIC\n- [RFC 9002](https://www.rfc-editor.org/rfc/rfc9002) QUIC Loss Detection and Congestion Control\n- [RFC 9114](https://www.rfc-editor.org/rfc/rfc9114) HTTP/3\n- [RFC 9204](https://www.rfc-editor.org/rfc/rfc9204) QPACK: Field Compression for HTTP/3\n\nQUIC protocol extensions\n------------------------\n\nThe following QUIC protocol extensions are implemented:\n\n- [RFC 9368](https://www.rfc-editor.org/rfc/rfc9368) Compatible Version Negotiation for QUIC\n- [RFC 9369](https://www.rfc-editor.org/rfc/rfc9369) QUIC Version 2\n- [RFC 9218](https://www.rfc-editor.org/rfc/rfc9218) Extensible Prioritization Scheme for HTTP\n- [RFC 9221](https://www.rfc-editor.org/rfc/rfc9221) An Unreliable Datagram Extension to QUIC\n- [RFC 9287](https://www.rfc-editor.org/rfc/rfc9287) Greasing the QUIC Bit\n- [ACK Frequency](https://datatracker.ietf.org/doc/draft-ietf-quic-ack-frequency/)\n\nDocumentation\n-------------\n\nDocumentation is available at https://lsquic.readthedocs.io/en/latest/.\n\nIn addition, see example programs for API usage and EXAMPLES.txt for\nsome compilation and run-time options.\n\nRequirements\n------------\n\nTo build LSQUIC, you need CMake, zlib, and BoringSSL.  The example program\nuses libevent to provide the event loop.\n\nBuilding BoringSSL\n------------------\n\nBoringSSL is not packaged; you have to build it yourself.  The process is\nstraightforward.  You will need `go` installed.\n\n1. Clone BoringSSL by issuing the following command:\n\n```\ngit clone https://boringssl.googlesource.com/boringssl\ncd boringssl\n```\n\nYou may need to install pre-requisites like zlib and libevent.\n\n2. Use specific BoringSSL version\n\n```\ngit checkout 9fc1c33e9c21439ce5f87855a6591a9324e569fd\n```\nOr, just try the latest master branch.\n\n3. Compile the library\n\n```\ncmake . &&  make\n```\n\nRemember where BoringSSL sources are:\n```\nBORINGSSL=$PWD\n```\n\nIf you want to turn on optimizations, do\n\n```\ncmake -DCMAKE_BUILD_TYPE=Release . && make\n```\n\nIf you want to build as a library, (necessary to build lsquic itself\nas as shared library) do:\n\n```\ncmake -DBUILD_SHARED_LIBS=1 . && make\n```\n\nBuilding LSQUIC Library\n-----------------------\n\nLSQUIC's `http_client`, `http_server`, and the tests link BoringSSL\nlibraries statically.  Following previous section, you can build LSQUIC\nas follows:\n\n1. Get the source code\n\n```\ngit clone https://github.com/litespeedtech/lsquic.git\ncd lsquic\ngit submodule update --init\n```\n\n2. Compile the library\n\nStatically:\n\n\n```\n# $BORINGSSL is the top-level BoringSSL directory from the previous step\ncmake -DBORINGSSL_DIR=$BORINGSSL .\nmake\n```\n\nAs a dynamic library:\n\n```\ncmake -DLSQUIC_SHARED_LIB=1 -DBORINGSSL_DIR=$BORINGSSL .\nmake\n```\n\n\n3. Run tests\n\n```\nmake test\n```\n\nBuilding with Docker\n---------\nThe library and the example client and server can be built with Docker.\n\nInitialize Git submodules:\n```\ncd lsquic\ngit submodule update --init\n```\n\nBuild the Docker image:\n```\ndocker build -t lsquic .\n```\n\nThen you can use the examples from the command line.  For example:\n```\nsudo docker run -it --rm lsquic http_client -s www.google.com  -p / -o version=h3\nsudo docker run -p 12345:12345/udp -v /path/to/certs:/mnt/certs -it --rm lsquic http_server -c www.example.com,/mnt/certs/chain,/mnt/certs/key\n```\n\nPlatforms\n---------\n\nThe library has been tested on the following platforms:\n- Linux\n  - i386\n  - x86_64\n  - ARM (Raspberry Pi 3)\n- FreeBSD\n  - i386\n- MacOS\n  - x86_64\n- iOS\n  - ARM\n- Android\n  - ARM\n- Windows\n  - x86_64\n\nGet Involved\n------------\n\nDo not hesitate to report bugs back to us.  Even better, send us fixes\nand improvements!\n\nHave fun,\n\nLiteSpeed QUIC Team.\n\nCopyright (c) 2017 - 2021 LiteSpeed Technologies Inc\n"
        },
        {
          "name": "appveyor-linux.yml",
          "type": "blob",
          "size": 0.609375,
          "content": "version: 2.{branch}.{build}\n\nimage:\n- Ubuntu2004\n- MacOS\n\nbuild: off\n\ninit:\n\ncache:\n# - boringssl -> appveyor-linux.yml # we define the commit in here\n\ninstall:\n\n- sh: >-\n\n    if [[ -e boringssl/CMakeLists.txt ]] ; then\n\n        echo cached\n\n    else\n\n        git clone https://boringssl.googlesource.com/boringssl\n\n        cd boringssl\n\n        git checkout cf8d3ad3cea51cf7184307d54f465da62b7d8408\n\n        cmake .\n\n        make -j4\n\n        cd ..\n\n    fi\n\n    git submodule init\n\n    git submodule update --checkout --force --recursive\n\n    cmake -DBORINGSSL_DIR=$PWD/boringssl .\n\n    make\n\ntest_script:\n\n- sh: make test\n"
        },
        {
          "name": "appveyor-windows.cmd",
          "type": "blob",
          "size": 0.837890625,
          "content": "vcpkg list\n\nif exist \".\\boringssl\\CMakeLists.txt\" (\n    echo cached\n) else (\n    git clone https://boringssl.googlesource.com/boringssl\n    cd boringssl\n    git checkout cf8d3ad3cea51cf7184307d54f465da62b7d8408\n    cmake -DCMAKE_GENERATOR_PLATFORM=x64 --config Debug -DBUILD_SHARED_LIBS=OFF -DOPENSSL_NO_ASM=1 .\n    msbuild /m ALL_BUILD.vcxproj\n    cd ..\n)\n\ngit submodule init\n\ngit submodule update --checkout --force --recursive\n\nset VCPKG_ROOT=c:/tools/vcpkg/\n\ncmake -DCMAKE_GENERATOR_PLATFORM=x64 -DBUILD_SHARED_LIBS=OFF -DVCPKG_TARGET_TRIPLET=x64-windows-static -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=c:/tools/vcpkg/scripts/buildsystems/vcpkg.cmake -DGETOPT_INCLUDE_DIR=c:/tools/vcpkg/installed/x64-windows/include  -DGETOPT_LIB=c:/tools/vcpkg/installed/x64-windows/lib/getopt.lib -DBORINGSSL_DIR=%cd%\\boringssl .\n\n\nmsbuild /m ALL_BUILD.vcxproj\n"
        },
        {
          "name": "appveyor-windows.yml",
          "type": "blob",
          "size": 0.5009765625,
          "content": "version: 1.{branch}.{build}\n\nimage: Visual Studio 2017\n\ninit:\n\n- cmd: ''\n\ninstall:\n\n- cmd: >-\n\n    vcpkg install zlib:x64-windows-static\n\n    vcpkg install libevent:x64-windows-static\n\n    vcpkg install pcre:x64-windows-static\n\n    vcpkg install getopt:x64-windows\n\n    vcpkg integrate install\n\ncache:\n- c:\\tools\\vcpkg\\installed\n- boringssl -> appveyor-windows.yml, appveyor-windows.cmd # we define the commit in here\n\nbuild_script:\n\n- cmd: appveyor-windows.cmd\n\ntest_script:\n\n- cmd: msbuild /m RUN_TESTS.vcxproj\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "qir",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "wincompat",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}