{
  "metadata": {
    "timestamp": 1736710178722,
    "page": 863,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "commonmark/cmark",
      "stars": 1680,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.287109375,
          "content": "# editorconfig.org\n\nroot = true\n\n[*]\nend_of_line = lf\ncharset = utf-8\ninsert_final_newline = true\n\n[*.{c,h}]\ntrim_trailing_whitespace = true\nindent_style = space\nindent_size = 2\n\n[Makefile]\ntrim_trailing_whitespace = true\nindent_style = tab\nindent_size = 8\n\n[Makefile.nmake]\nend_of_line = crlf\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0419921875,
          "content": "* text=auto eol=lf\nMakefile.nmake eol=crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2890625,
          "content": "# Object files\n*.o\n*.ko\n*.obj\n*.elf\n\n# Libraries\n*.lib\n*.a\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n*.i*86\n*.x86_64\n*.hex\n*.pyc\n\n*~\n*.bak\n*.sw?\n*.diff\n*#\n*.zip\nbstrlib.txt\nbuild\ncmark.dSYM/*\ncmark\n\n# Visual Studio CMake support\n/.vs/\n/out/\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 4.2333984375,
          "content": "cmake_minimum_required(VERSION 3.7)\n\nif(POLICY CMP0063)\n  cmake_policy(SET CMP0063 NEW)\nendif()\nif(POLICY CMP0092)\n  cmake_policy(SET CMP0092 NEW)\nendif()\n\nproject(cmark\n  LANGUAGES C CXX\n  VERSION 0.31.1)\n\nif(CMAKE_BUILD_TYPE STREQUAL Asan)\n  list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/modules)\n  include(FindAsan)\nendif()\n\n# Include module for functions\n# - 'write_basic_package_version_file'\n# - 'configure_package_config_file'\ninclude(CMakePackageConfigHelpers)\ninclude(CTest)\ninclude(GenerateExportHeader)\ninclude(GNUInstallDirs)\n\nif(NOT MSVC OR CMAKE_HOST_SYSTEM_NAME STREQUAL Windows)\n  set(CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_NO_WARNINGS ON)\n  include(InstallRequiredSystemLibraries)\nendif()\n\nif(\"${CMAKE_SOURCE_DIR}\" STREQUAL \"${CMAKE_BINARY_DIR}\")\n    message(FATAL_ERROR \"Do not build in-source.\\nPlease remove CMakeCache.txt and the CMakeFiles/ directory.\\nThen: mkdir build ; cd build ; cmake .. ; make\")\nendif()\n\n# Backwards Compatibility\n# TODO: remove this once there has been a period to enable people to migrate\nset(_CMARK_BUILD_SHARED_LIBS_DEFAULT NO)\nif(DEFINED CMARK_SHARED)\n  message(AUTHOR_WARNING [=[\n'CMARK_SHARED' has been replaced with the standard 'BUILD_SHARED_LIBS' to control the library type.\n]=])\n  set(_CMARK_BUILD_SHARED_LIBS_DEFAULT ${CMARK_SHARED})\nendif()\nif(DEFINED CMARK_STATIC)\n  message(AUTHOR_WARNING [=[\n'CMARK_STATIC' has been replaced with the standard 'BUILD_SHARED_LIBS' to control the library type.\n]=])\n  if(NOT CMARK_STATIC)\n    set(_CMARK_BUILD_SHARED_LIBS_DEFAULT YES)\n  else()\n    set(_CMARK_BUILD_SHARED_LIBS_DEFAULT NO)\n  endif()\nendif()\n\noption(CMARK_LIB_FUZZER \"Build libFuzzer fuzzing harness\" OFF)\noption(BUILD_SHARED_LIBS \"Build the CMark library as shared\"\n  ${_CMARK_BUILD_SHARED_LIBS_DEFAULT})\n\nif(NOT MSVC)\n  set(CMAKE_C_STANDARD 99)\n  set(CMAKE_C_STANDARD_REQUIRED YES)\n  set(CMAKE_C_EXTENSIONS NO)\nendif()\n\n# -fvisibility=hidden\nset(CMAKE_C_VISIBILITY_PRESET hidden)\nset(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\n\nset(CMAKE_INCLUDE_CURRENT_DIR ON)\n\nif (DEFINED CMAKE_INSTALL_RPATH)\n  set(Base_rpath \"${CMAKE_INSTALL_RPATH}\")\nelse()\n  if(BUILD_SHARED_LIBS)\n    set(p \"${CMAKE_INSTALL_FULL_LIBDIR}\")\n    list(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES \"${p}\" i)\n    if(\"${i}\" STREQUAL \"-1\")\n      set(Base_rpath \"${p}\")\n    endif()\n  endif()\nendif()\n\n# Append non-standard external dependency directories, if any.\nset(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)\n\n# Check integrity of node structure when compiled as debug\nadd_compile_options($<$<CONFIG:Debug>:-DCMARK_DEBUG_NODES>)\n\n# In order to maintain compatibility with older platforms which may not have a\n# recent version of CMake (i.e. are running CMake <3.3), we cannot simply use\n# the `add_compile_options` with a generator expression.  This uses the\n# `target_compile_options` with `PRIVATE` to add the flags only to the targets\n# so that CMark may be used in projects with non-C languages.\nfunction(cmark_add_compile_options target)\n  if(MSVC)\n    target_compile_definitions(${target} PRIVATE _CRT_SECURE_NO_WARNINGS)\n  else()\n    target_compile_options(${target} PRIVATE\n            -Wall -Wextra -pedantic\n            $<$<COMPILE_LANGUAGE:C>:-Wstrict-prototypes>)\n  endif()\n  if(CMAKE_BUILD_TYPE STREQUAL Profile)\n    target_compile_options(${target} PRIVATE -pg)\n  endif()\n  if(CMAKE_BUILD_TYPE STREQUAL Ubsan)\n    target_compile_options(${target} PRIVATE -fsanitize=undefined)\n  endif()\n  if(CMARK_LIB_FUZZER)\n    if(target MATCHES fuzz)\n      target_compile_options(${target} PRIVATE -fsanitize=fuzzer)\n      target_link_options(${target} PRIVATE -fsanitize=fuzzer)\n    else()\n      target_compile_options(${target} PRIVATE -fsanitize=fuzzer-no-link)\n      target_link_options(${target} PRIVATE -fsanitize=fuzzer-no-link)\n    endif()\n  endif()\nendfunction()\n\nadd_subdirectory(src)\n# TODO(compnerd) should this be enabled for MinGW, which sets CMAKE_SYSTEM_NAME\n# to Windows, but defines `MINGW`.\nif(NOT CMAKE_SYSTEM_NAME STREQUAL Windows)\n  add_subdirectory(man)\nendif()\nif(BUILD_TESTING)\n  add_subdirectory(api_test)\n  add_subdirectory(test testdir)\nendif()\nif(CMARK_LIB_FUZZER)\n  add_subdirectory(fuzz)\nendif()\n\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE \"Release\" CACHE STRING\n  \"Choose the type of build, options are: Debug Profile Release Asan Ubsan.\" FORCE)\nendif(NOT CMAKE_BUILD_TYPE)\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 7.3896484375,
          "content": "Copyright (c) 2014, John MacFarlane\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following\n      disclaimer in the documentation and/or other materials provided\n      with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n-----\n\nhoudini.h, houdini_href_e.c, houdini_html_e.c, houdini_html_u.c\n\nderive from https://github.com/vmg/houdini (with some modifications)\n\nCopyright (C) 2012 Vicent Mart√≠\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n-----\n\nbuffer.h, buffer.c, chunk.h\n\nare derived from code (C) 2012 Github, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n-----\n\nutf8.c and utf8.c\n\nare derived from utf8proc\n(<http://www.public-software-group.org/utf8proc>),\n(C) 2009 Public Software Group e. V., Berlin, Germany.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\n-----\n\nThe normalization code in normalize.py was derived from the\nmarkdowntest project, Copyright 2013 Karl Dubost:\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 Karl Dubost\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n-----\n\nThe CommonMark spec (test/spec.txt) is\n\nCopyright (C) 2014-15 John MacFarlane\n\nReleased under the Creative Commons CC-BY-SA 4.0 license:\n<http://creativecommons.org/licenses/by-sa/4.0/>.\n\n-----\n\nThe test software in test/ is\n\nCopyright (c) 2014, John MacFarlane\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following\n      disclaimer in the documentation and/or other materials provided\n      with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 6.1064453125,
          "content": "SRCDIR=src\nDATADIR=data\nBUILDDIR?=build\nGENERATOR?=Unix Makefiles\nMINGW_BUILDDIR?=build-mingw\nMINGW_INSTALLDIR?=windows\nSPEC=test/spec.txt\nSITE=_site\nSPECVERSION=$(shell perl -ne 'print $$1 if /^version: *([0-9.]+)/' $(SPEC))\nFUZZCHARS?=2000000  # for fuzztest\nBENCHDIR=bench\nBENCHSAMPLES=$(wildcard $(BENCHDIR)/samples/*.md)\nBENCHFILE=$(BENCHDIR)/benchinput.md\nALLTESTS=alltests.md\nNUMRUNS?=10\nCMARK=$(BUILDDIR)/src/cmark\nCMARK_FUZZ=$(BUILDDIR)/src/cmark-fuzz\nPROG?=$(CMARK)\nVERSION?=$(SPECVERSION)\nRELEASE?=cmark-$(VERSION)\nINSTALL_PREFIX?=/usr/local\nCLANG_CHECK?=clang-check\nCLANG_FORMAT=clang-format -style llvm -sort-includes=0 -i\nAFL_PATH?=/usr/local/bin\n\n.PHONY: all cmake_build leakcheck clean fuzztest test debug ubsan asan mingw archive newbench bench format update-spec afl libFuzzer lint\n\nall: cmake_build man/man3/cmark.3\n\n$(CMARK): cmake_build\n\ncmake_build: $(BUILDDIR)\n\tcmake --build $(BUILDDIR)\n\t@echo \"Binaries can be found in $(BUILDDIR)/src\"\n\n$(BUILDDIR):\n\t@cmake --version > /dev/null || (echo \"You need cmake to build this program: http://www.cmake.org/download/\" && exit 1)\n\tcmake \\\n\t    -S . -B $(BUILDDIR) -G \"$(GENERATOR)\" \\\n\t    -DCMAKE_BUILD_TYPE=$(BUILD_TYPE) \\\n\t    -DCMAKE_INSTALL_PREFIX=$(INSTALL_PREFIX) \\\n\t    -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \\\n\t    -DBUILD_SHARED_LIBS=YES\n\ninstall: $(BUILDDIR)\n\tcmake --install $(BUILDDIR)\n\nuninstall: $(BUILDDIR)/install_manifest.txt\n\txargs rm < $<\n\ndebug:\n\tcmake \\\n\t    -S . -B $(BUILDDIR) -G \"$(GENERATOR)\" \\\n\t    -DCMAKE_BUILD_TYPE=Debug \\\n\t    -DBUILD_SHARED_LIBS=YES\n\tcmake --build $(BUILDDIR)\n\nubsan:\n\tcmake \\\n\t    -S . -B $(BUILDDIR) -G \"$(GENERATOR)\" \\\n\t    -DCMAKE_BUILD_TYPE=Ubsan\n\tcmake --build $(BUILDDIR)\n\nasan:\n\tcmake \\\n\t    -S . -B $(BUILDDIR) -G \"$(GENERATOR)\" \\\n\t    -DCMAKE_BUILD_TYPE=Asan\n\tcmake --build $(BUILDDIR)\n\nprof:\n\tcmake \\\n\t    -S . -B $(BUILDDIR) -G \"$(GENERATOR)\" \\\n\t    -DCMAKE_BUILD_TYPE=Profile\n\tcmake --build $(BUILDDIR)\n\nafl:\n\t@[ -n \"$(AFL_PATH)\" ] || { echo '$$AFL_PATH not set'; false; }\n\tcmake \\\n\t    -S . -B $(BUILDDIR) -G \"$(GENERATOR)\" \\\n\t    -DBUILD_TESTING=NO \\\n\t    -DCMAKE_C_COMPILER=$(AFL_PATH)/afl-clang\n\tcmake --build $(BUILDDIR)\n\t$(AFL_PATH)/afl-fuzz \\\n\t    -i fuzz/afl_test_cases \\\n\t    -o fuzz/afl_results \\\n\t    -x fuzz/dictionary \\\n\t    -t 100 \\\n\t    $(CMARK) $(CMARK_OPTS)\n\nlibFuzzer:\n\tcmake \\\n\t    -S . -B $(BUILDDIR) -G \"$(GENERATOR)\" \\\n\t    -DCMAKE_C_COMPILER=clang \\\n\t    -DCMAKE_CXX_COMPILER=clang++ \\\n\t    -DCMAKE_BUILD_TYPE=Asan \\\n\t    -DCMARK_LIB_FUZZER=ON\n\tcmake --build $(BUILDDIR)\n\tmkdir -p fuzz/corpus\n\t$(BUILDDIR)/fuzz/cmark-fuzz \\\n\t    -dict=fuzz/dictionary \\\n\t    -max_len=1000 \\\n\t    -timeout=1 \\\n\t    fuzz/corpus\n\nlint: $(BUILDDIR)\n\terrs=0 ; \\\n\tfor f in `ls src/*.[ch] | grep -v \"scanners.c\"` ; \\\n\t  do echo $$f ; clang-tidy -header-filter='^build/.*' -p=build -warnings-as-errors='*' $$f || errs=1 ; done ; \\\n\texit $$errs\n\nmingw:\n\tcmake \\\n\t    -S . -B $(MINGW_BUILDDIR) -G \"$(GENERATOR)\" \\\n\t    -DCMAKE_TOOLCHAIN_FILE=toolchain-mingw32.cmake \\\n\t    -DCMAKE_INSTALL_PREFIX=$(MINGW_INSTALLDIR)\n\tcmake --build $(MINGW_BUILDDIR)\n\tcmake --install $(MINGW_BUILDDIR)\n\nman/man3/cmark.3: src/cmark.h | $(CMARK)\n\tpython3 man/make_man_page.py $< > $@ \\\n\narchive:\n\tgit archive --prefix=$(RELEASE)/ -o $(RELEASE).tar.gz HEAD\n\tgit archive --prefix=$(RELEASE)/ -o $(RELEASE).zip HEAD\n\nclean:\n\trm -rf $(BUILDDIR) $(MINGW_BUILDDIR) $(MINGW_INSTALLDIR)\n\n# We include case_fold.inc in the repository, so this shouldn't\n# normally need to be generated.\n$(SRCDIR)/case_fold.inc: $(DATADIR)/CaseFolding.txt\n\tpython3 tools/make_case_fold_inc.py < $< > $@\n\n# We include scanners.c in the repository, so this shouldn't\n# normally need to be generated.\n$(SRCDIR)/scanners.c: $(SRCDIR)/scanners.re\n\t@case \"$$(re2c -v)\" in \\\n\t    *\\ 0.13.*|*\\ 0.14|*\\ 0.14.1) \\\n\t\techo \"re2c >= 0.14.2 is required\"; \\\n\t\tfalse; \\\n\t\t;; \\\n\tesac\n\tre2c -W -Werror --case-insensitive -b -i --no-generation-date \\\n\t\t-o $@ $<\n\t$(CLANG_FORMAT) $@\n\n# We include entities.inc in the repository, so normally this\n# doesn't need to be regenerated:\n$(SRCDIR)/entities.inc: tools/make_entities_inc.py\n\tpython3 $< > $@\n\nupdate-spec:\n\tcurl 'https://raw.githubusercontent.com/jgm/CommonMark/master/spec.txt'\\\n > $(SPEC)\n\ntest: cmake_build\n\tctest --test-dir $(BUILDDIR) --output-on-failure || (cat $(BUILDDIR)/Testing/Temporary/LastTest.log && exit 1)\n\n$(ALLTESTS):\n\tpython3 test/spec_tests.py --spec $(SPEC) --dump-tests | python3 -c 'import json; import sys; tests = json.loads(sys.stdin.read()); print(\"\\n\".join([test[\"markdown\"] for test in tests]))' > $@\n\nleakcheck: $(ALLTESTS)\n\tfor format in html man xml latex commonmark; do \\\n\t  for opts in \"\" \"--smart\"; do \\\n\t     echo \"cmark -t $$format $$opts\" ; \\\n\t     valgrind -q --leak-check=full --dsymutil=yes --error-exitcode=1 $(PROG) -t $$format $$opts $(ALLTESTS) >/dev/null || exit 1;\\\n          done; \\\n\tdone;\n\nfuzztest:\n\t{ for i in `seq 1 10`; do \\\n\t  cat /dev/urandom | head -c $(FUZZCHARS) | iconv -f latin1 -t utf-8 | tee fuzz-$$i.txt | \\\n\t\t/usr/bin/env time -p $(PROG) >/dev/null && rm fuzz-$$i.txt ; \\\n\tdone } 2>&1 | grep 'user\\|abnormally'\n\nprogit:\n\tgit clone https://github.com/progit/progit.git\n\n$(BENCHFILE): progit\n\techo \"\" > $@\n\tfor lang in ar az be ca cs de en eo es es-ni fa fi fr hi hu id it ja ko mk nl no-nb pl pt-br ro ru sr th tr uk vi zh zh-tw; do \\\n\tcat progit/$$lang/*/*.markdown >> $@; \\\n\tdone\n\n# for more accurate results, run with\n# sudo renice -10 $$; make bench\nbench: $(BENCHFILE)\n\t{ for x in `seq 1 $(NUMRUNS)` ; do \\\n\t\t/usr/bin/env time -p $(PROG) </dev/null >/dev/null ; \\\n\t\t/usr/bin/env time -p $(PROG) $< >/dev/null ; \\\n\t\tdone \\\n\t} 2>&1  | grep 'real' | awk '{print $$2}' | python3 'bench/stats.py'\n\nnewbench:\n\tfor f in $(BENCHSAMPLES) ; do \\\n\t  printf \"%26s  \" `basename $$f` ; \\\n\t  { for x in `seq 1 $(NUMRUNS)` ; do \\\n\t\t/usr/bin/env time -p $(PROG) </dev/null >/dev/null ; \\\n\t\tfor x in `seq 1 200` ; do cat $$f ; done | \\\n\t\t  /usr/bin/env time -p $(PROG) > /dev/null; \\\n\t\tdone \\\n\t  } 2>&1  | grep 'real' | awk '{print $$2}' | \\\n\t    python3 'bench/stats.py'; done\n\nformat:\n\t$(CLANG_FORMAT) src/*.c src/*.h api_test/*.c api_test/*.h\n\noperf: $(CMARK)\n\toperf $< < $(BENCHFILE) > /dev/null\n\ndistclean: clean\n\t-rm -rf *.dSYM\n\t-rm -f README.html\n\t-rm -rf $(BENCHFILE) $(ALLTESTS) progit\n"
        },
        {
          "name": "Makefile.nmake",
          "type": "blob",
          "size": 0.56640625,
          "content": "SRCDIR=src\nDATADIR=data\nBUILDDIR=build\nINSTALLDIR=windows\nPROG=$(BUILDDIR)\\src\\cmark.exe\nGENERATOR=NMake Makefiles\n\nall: $(BUILDDIR)/CMakeFiles\n\tcmake --build $(BUILDDIR)\n\n$(BUILDDIR)/CMakeFiles:\n\tcmake \\\n\t    -S . -B $(BUILDDIR) -G \"$(GENERATOR)\" \\\n\t    -D CMAKE_BUILD_TYPE=$(BUILD_TYPE) \\\n\t    -D CMAKE_INSTALL_PREFIX=$(INSTALLDIR)\n\ninstall: all\n\tcmake --install $(BUILDDIR)\n\nclean:\n\t-rmdir /s /q $(BUILDDIR) $(MINGW_INSTALLDIR) 2> nul\n\ntest: all\n\tctest --test-dir $(BUILDDIR) --output-on-failure\n\ndistclean: clean\n\tdel /q src\\scanners.c 2> nul\n\tdel /q spec.md spec.html 2> nul\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.416015625,
          "content": "cmark\n=====\n\n[![CI\ntests](https://github.com/commonmark/cmark/workflows/CI%20tests/badge.svg)](https://github.com/commonmark/cmark/actions)\n\n`cmark` is the C reference implementation of [CommonMark], a\nrationalized version of Markdown syntax with a [spec][the spec].\n(For the JavaScript reference implementation, see\n[commonmark.js].)\n\nIt provides a shared library (`libcmark`) with functions for parsing\nCommonMark documents to an abstract syntax tree (AST), manipulating\nthe AST, and rendering the document to HTML, groff man, LaTeX,\nCommonMark, or an XML representation of the AST.  It also provides a\ncommand-line program (`cmark`) for parsing and rendering CommonMark\ndocuments.\n\nAdvantages of this library:\n\n- **Portable.**  The library and program are written in standard\n  C99 and have no external dependencies.  They have been tested with\n  MSVC, gcc, tcc, and clang.\n\n- **Fast.** cmark can render a Markdown version of *War and Peace* in\n  the blink of an eye (127 milliseconds on a ten year old laptop,\n  vs. 100-400 milliseconds for an eye blink).  In our [benchmarks],\n  cmark is 10,000 times faster than the original `Markdown.pl`, and\n  on par with the very fastest available Markdown processors.\n\n- **Accurate.** The library passes all CommonMark conformance tests.\n\n- **Standardized.** The library can be expected to parse CommonMark\n  the same way as any other conforming parser.  So, for example,\n  you can use `commonmark.js` on the client to preview content that\n  will be rendered on the server using `cmark`.\n\n- **Robust.** The library has been extensively fuzz-tested using\n  [american fuzzy lop].  The test suite includes pathological cases\n  that bring many other Markdown parsers to a crawl (for example,\n  thousands-deep nested bracketed text or block quotes).\n\n- **Flexible.** CommonMark input is parsed to an AST which can be\n  manipulated programmatically prior to rendering.\n\n- **Multiple renderers.**  Output in HTML, groff man, LaTeX, CommonMark,\n  and a custom XML format is supported. And it is easy to write new\n  renderers to support other formats.\n\n- **Free.** BSD2-licensed.\n\nIt is easy to use `libcmark` in python, lua, ruby, and other dynamic\nlanguages: see the `wrappers/` subdirectory for some simple examples.\n\nThere are also libraries that wrap `libcmark` for\n[Go](https://github.com/rhinoman/go-commonmark),\n[Haskell](https://hackage.haskell.org/package/cmark),\n[Ruby](https://github.com/gjtorikian/commonmarker),\n[Lua](https://github.com/jgm/cmark-lua),\n[Perl](https://metacpan.org/release/CommonMark),\n[Python](https://pypi.python.org/pypi/paka.cmark),\n[R](https://cran.r-project.org/package=commonmark),\n[Scala](https://github.com/sparsetech/cmark-scala) and\n[PHP](https://www.php.net/manual/en/book.cmark.php).\n\nInstalling\n----------\n\nBuilding the C program (`cmark`) and shared library (`libcmark`)\nrequires [cmake].  If you modify `scanners.re`, then you will also\nneed [re2c] \\(>= 0.14.2\\), which is used to generate `scanners.c` from\n`scanners.re`.  We have included a pre-generated `scanners.c` in\nthe repository to reduce build dependencies.\n\nIf you have GNU make, you can simply `make`, `make test`, and `make\ninstall`.  This calls [cmake] to create a `Makefile` in the `build`\ndirectory, then uses that `Makefile` to create the executable and\nlibrary.  The binaries can be found in `build/src`.  The default\ninstallation prefix is `/usr/local`.  To change the installation\nprefix, pass the `INSTALL_PREFIX` variable if you run `make` for the\nfirst time: `make INSTALL_PREFIX=path`.\n\nFor a more portable method, you can use [cmake] manually. [cmake] knows\nhow to create build environments for many build systems.  For example,\non FreeBSD:\n\n    cmake -S . -B build  # optionally: -DCMAKE_INSTALL_PREFIX=path\n    cmake --build build  # executable will be created as build/src/cmark\n    ctest --test-dir build\n    cmake --install build\n\nOr, to create Xcode project files on OSX:\n\n    cmake -S . -B build -G Xcode\n    open build/cmark.xcodeproj\n\nThe GNU Makefile also provides a few other targets for developers.\nTo run a benchmark:\n\n    make bench\n\nFor more detailed benchmarks:\n\n    make newbench\n\nTo run a test for memory leaks using `valgrind`:\n\n    make leakcheck\n\nTo reformat source code using `clang-format`:\n\n    make format\n\nTo run a \"fuzz test\" against ten long randomly generated inputs:\n\n    make fuzztest\n\nTo do a more systematic fuzz test with [american fuzzy lop]:\n\n    AFL_PATH=/path/to/afl_directory make afl\n\nFuzzing with [libFuzzer] is also supported. The fuzzer can be run with:\n\n    make libFuzzer\n\nTo make a release tarball and zip archive:\n\n    make archive\n\nInstalling (Windows)\n--------------------\n\nTo compile with MSVC and NMAKE:\n\n    nmake /f Makefile.nmake\n\nYou can cross-compile a Windows binary and dll on linux if you have the\n`mingw32` compiler:\n\n    make mingw\n\nThe binaries will be in `build-mingw/windows/bin`.\n\nUsage\n-----\n\nInstructions for the use of the command line program and library can\nbe found in the man pages in the `man` subdirectory.\n\nSecurity\n--------\n\nBy default, the library will scrub raw HTML and potentially\ndangerous links (`javascript:`, `vbscript:`, `data:`, `file:`).\n\nTo allow these, use the option `CMARK_OPT_UNSAFE` (or\n`--unsafe`) with the command line program. If doing so, we\nrecommend you use a HTML sanitizer specific to your needs to\nprotect against [XSS\nattacks](http://en.wikipedia.org/wiki/Cross-site_scripting).\n\nContributing\n------------\n\nThere is a [forum for discussing\nCommonMark](http://talk.commonmark.org); you should use it instead of\ngithub issues for questions and possibly open-ended discussions.\nUse the [github issue tracker](http://github.com/commonmark/CommonMark/issues)\nonly for simple, clear, actionable issues.\n\nAuthors\n-------\n\nJohn MacFarlane wrote the original library and program.\nThe block parsing algorithm was worked out together with David\nGreenspan. Vicent Marti optimized the C implementation for\nperformance, increasing its speed tenfold.  KƒÅrlis Ga≈Üƒ£is helped\nwork out a better parsing algorithm for links and emphasis,\neliminating several worst-case performance issues.\nNick Wellnhofer contributed many improvements, including\nmost of the C library's API and its test harness.\n\n[benchmarks]: benchmarks.md\n[the spec]: http://spec.commonmark.org\n[CommonMark]: http://commonmark.org\n[cmake]: http://www.cmake.org/download/\n[re2c]: http://re2c.org\n[commonmark.js]: https://github.com/commonmark/commonmark.js\n[american fuzzy lop]: http://lcamtuf.coredump.cx/afl/\n[libFuzzer]: http://llvm.org/docs/LibFuzzer.html\n"
        },
        {
          "name": "api_test",
          "type": "tree",
          "content": null
        },
        {
          "name": "bench",
          "type": "tree",
          "content": null
        },
        {
          "name": "benchmarks.md",
          "type": "blob",
          "size": 0.9130859375,
          "content": "# Benchmarks\n\nHere are some benchmarks, run on a 2.3GHz 8-core i9 macbook pro.\nThe input text is a 1106 KB Markdown file built by concatenating\nthe Markdown sources of all the localizations of the first edition\nof [*Pro Git*](https://github.com/progit/progit/tree/master/en) by\nScott Chacon.\n\n|Implementation     |  Time (sec)|\n|-------------------|-----------:|\n| **commonmark.js** |    0.59    |\n| **cmark**         |    0.12    |\n| **md4c**          |    0.04    |\n\nTo run these benchmarks, use `make bench PROG=/path/to/program`.\n\n`time` is used to measure execution speed.  The reported\ntime is the *difference* between the time to run the program\nwith the benchmark input and the time to run it with no input.\n(This procedure ensures that implementations in dynamic languages are\nnot penalized by startup time.) A median of ten runs is taken.  The\nprocess is reniced to a high priority so that the system doesn't\ninterrupt runs.\n"
        },
        {
          "name": "changelog.txt",
          "type": "blob",
          "size": 77.0009765625,
          "content": "[0.31.1]\n\n  * Flag root node as open in `cmark_parser_new_with_mem_into_root` (#532).\n\n  * Remove `source`, add `search` to list of block tags\n    (a spec 0.31 change we forgot in last release).\n\n  * Accept lowercase inline HTML declarations (Michael Howell).\n\n  * Remove unused functions (Nick Wellnhofer).\n\n  * utf8:\n\n    + Fix encoding of U+FFFE and U+FFFF (#548, Nick Wellnhofer).\n    + Rework case folding (Nick Wellnhofer).  Using a table and binary\n      search instead of a generated switch statement significantly\n      reduces the size of the compiled code.\n\n  * houdini:\n\n    + Rename `houdini_escape_html0` -> `houdini_escape_html` (#536).\n    + Rework HTML entity table (Nick Wellnhofer).\n      The new layout saves about 20 KB and removes 50 KB of relocation\n      entries from the shared library, also speeding up loading.\n\n  * cmake:\n\n    + Tell cmake to set `rpath` so the installed `cmark` can find\n      `libcmark.so` (Michael Witten).\n    + Remove unnecessary enabling of target property: MACOSX_RPATH\n      (Michael Witten).\n    + Fix build type checks (Nick Wellnhofer). Make the libFuzzer\n      target use the Asan build type again.\n\n  * Makefile:\n\n    + Fix `libFuzzer` target (Nick Wellnhofer).\n    + Use `ctest` and `--output-on-failure` in `test` target.\n    + `make debug` should build a shared library (Nick Wellnhofer).\n      The full test suite is only available to a shared library build.\n\n  * wrappers:\n\n    + Fix memory leak in Ruby wrapper (Nick Wellnhofer).\n      Free the string returned from `cmark_markdown_to_html`.\n      Fix `cmark_markdown_to_html` argument types.\n    + Fix memory leak in Python wrapper (Nick Wellnhofer).\n      Free the string returned from cmark_markdown_to_html.\n      Fix cmark_markdown_to_html argument types.\n    + Convert to and from UTF-8 under Python 2.\n    + Add PHP wraper (Vinicius Dias).\n\n  * ci:\n\n    + Test with ASan and rework CI matrix (Nick Wellnhofer).\n    + Remove the valgrind leakcheck test. This should be covered now\n      by testing with LeakSanitizer on static builds, including tests\n      like spectest_executable. The full test suite is only available\n      to shared library builds which have to run without leak checks\n      for now.\n    + Separate cflags from cc (Nick Wellnhofer).\n    + Make CMake matrix options work (Nick Wellnhofer).\n      CMAKE_OPTIONS had no effect, leading to the shared library not being\n      tested. Invoke cmake directly, so we don't have to deal with the mess\n      in Makefile.\n    + Do debug build so that assertions will run (#532).\n    + Use `-gdwarf-4` with clang for compatibility with valgrind (#532).\n\n  * test:\n\n    + Fix memory leaks in cmark.py (Nick Wellnhofer).\n      Free results of libcmark API function calls.\n    + Fix memory leaks in api_test (Nick Wellnhofer).\n    + Simplify test execution environment handling (Saleem Abdulrasool).\n      Use generator expressions to compute the new path and avoid\n      translations. This reduces complexity in the build and allows for a\n      different build layout.\n\n  * fuzz: Test more parser entry points (Nick Wellnhofer).\n\n  * Remove superfluous definitions from scanners.re.\n\n  * re2c: Disable UTF-8 (Nick Wellnhofer). The regexes don't require UTF-8\n    features and work in ASCII mode as well. Disabling UTF-8 reduces the\n    size of the code generated by re2c.\n\n[0.31.0]\n\n  * Update to 0.31.2 spec.txt.\n\n  * Treat unicode Symbols like Punctuation, as per the 0.31 spec.\n\n  * Add a new function to `utf8.h`:\n    `int cmark_utf8proc_is_punctuation_or_symbol(int32_t uc)`.\n    The old `cmark_utf8proc_is_punctuation` has been kept for\n    now, but it is no longer used.\n\n  * Add new exported function `cmark_parser_new_with_mem_into_root`\n    (API change) (John Ericson).\n\n  * Avoid repeated `language-` in info string (commonmark/commonmark.js#277).\n\n  * Fix quadratic behavior in `S_insert_emph` (Nick Wellnhofer).\n    Fixes part of GHSA-66g8-4hjf-77xh.\n\n  * Fix quadratic behavior in `check_open_blocks` (Nick Wellnhofer).\n    Fixes part of GHSA-66g8-4hjf-77xh.\n\n  * Track underscore bottom separately mod 3, like asterisk (Michael\n    Howell). This was already implemented correctly for asterisks,\n    but not for underscore.\n\n  * Use `fwrite` instead of `printf` to print results in main (#523).\n    This avoids a massive slowdown in MSYS2.\n\n  * commonmark writer: less aggressive escaping for `!` (#131).\n\n  * Update libFuzzer build (Nick Wellnhofer):\n\n    + Move fuzzing files into their own directory.\n    + Use libFuzzer the modern way by compiling and linking with\n      `-fsanitize=fuzzer(-no-link)` without requiring `LIB_FUZZER_PATH`.\n    + Update the `libFuzzer` rule in Makefile and the README.md.\n\n  * CMake build changes (Saleem Abdulrasool).\n\n    + Inline multiple variables in CMake, following CMake recommendations.\n    + Simplify the version computation.\n    + Remove the `CMARK_STATIC` and `CMARK_SHARED` options as one of the two\n      must be enabled always as the cmark executable depends on the library.\n      Instead of having a custom flag to discern between the\n      library type, use the native CMake option `BUILD_SHARED_LIBS`,\n      allowing the user to control which library to build. This matches\n      CMake recommendations to only build a single copy of the library.\n    + Introduce an author warning for the use of `CMARK_SHARED` and\n      `CMARK_STATIC` to redirect the author of the dependent package to\n      `BUILD_SHARED_LIBS`.\n    + Permit incremental linking on Windows. Although incremental linking\n      does introduce padding in the binary for incremental links, that\n      should not matter for release mode builds in theory as `/OPT:REF`\n      and `/OPT:ICF` will trigger full links, which is the default in\n      release mode.\n    + Hoist the CMake module inclusion to the top level.\n    + Minor tweaks for speeding up the configure phase.\n      Restructure the file layout to place the custom modules into the\n      `cmake/modules` directory that is the common layout for CMake based\n      projects.\n    + Squelch C4232 warnings on MSVC builds.\n    + Remove check for `__builtin_expect`. Use `__has_builtin` to check\n      at compile time if the feature is supported.\n      This macro is supported by both clang and GCC (as of 10).\n      In the case that the compiler in use is not new enough, we still\n      provide the fallback so that the code will compile but without the\n      additional hints for the branch probability. `config.h` has been\n      removed from the code base as it is no longer needed.\n    + Remove `/TP` usage on MSVC and replace `CMARK_INLINE` with `inline`.\n      These were workarounds for pre-VS2015 compilers, which are no longer\n      supported.\n    + Hoist the C visibility settings to top level\n    + Clean up C4267 warnings on MSVC builds.\n    + Remove some compiler compatibility checks that are no longer\n      needed because VS 2013 is no longer supported (#498).\n    + Adjust the policy to silence warnings on MSVC builds\n      CMake 3.15+ remove `/W3` from the language flags under MSVC with\n      CMP0092.  Set the policy to new to avoid the D9025 warning.\n    + Reflow some text to match CMake documentation style\n    + Use generator expression for path computation.\n    + Use CMake to propagate `CMARK_STATIC_DEFINE`.\n    + Clean up an obsoleted variable (NFC).\n    + Hoist the policy settings. Policy settings may impact how\n      `project` functions.  They should be set immediately after\n      `cmake_minimum_required` (which implicitly sets policies).\n      Use the `POLICY` check to see if a policy is defined rather\n      than using a version check.\n    + Replace `CMARK_TESTS` with CMake sanctioned `BUILD_TESTING`.\n    + Correct typo and adjust command invocation. Use the proper\n      generator expression for the python interpreter and adjust\n      a typo in the component name.\n    + Add an upgrade path for newer CMake.\n      CMake 3.12 deprecated `FindPythonInterp`, and with CMake 3.27, were\n      obsoleted with CMP0148.  Add a version check and switch to the new\n      behaviour to allow building with newer releases.\n\n  * Fix regex syntax warnings in `pathological_tests.py` (Nick Wellnhofer).\n\n  * `test/cmark.py`: avoid star imports (Jakub Wilk).\n\n  * `spec_tests.py`: Add option to generate fuzz corpus (Nick Wellnhofer).\n    Add an option `--fuzz-corpus` that writes the test cases to separate\n    files including the options header, so they can be used as seed corpus\n    for fuzz testing.\n\n  * Fix some cmark.3 man rendering issues so we can do a clean regen\n    (John Ericson).\n\n  * Update Windows compilation instructions (Pomax, #525).\n\n[0.30.3]\n\n  * Fix quadratic complexity bug with repeated `![[]()`.\n    Resolves CVE-2023-22486. Add new pathological test. (John MacFarlane)\n\n  * Allow declarations with no space, as per spec (#456, John MacFarlane).\n\n  * Set `enumi*` counter correctly in LaTeX output (#451, John MacFarlane).\n\n  * Allow `<!DOCTYPE` to be case-insensitive. (This conforms to the\n    existing spec.) (John MacFarlane)\n\n  * Fixed HTML comment scanning. Need to handle this case: `<!--> and -->`.\n    Since the scanner finds the longest match, we had to\n    move some of the logic outside of the scanner. (John MacFarlane)\n\n  * Fix quadratic parsing issue with repeated `<!--` (this was not\n    introduced by the previous fix, and not in a released version of cmark).\n    Resolves CVE-2023-22484. Add new pathological test. (John MacFarlane)\n\n  * Update HTML comment scanner to accord with commonmark/commonmark-spec#713\n    (John MacFarlane).\n\n  * Pathological tests: half the number of repetitions, and the timeout.\n    This reduces the time needed for the pathological tests.\n    (John MacFarlane)\n\n  * Shrink `struct cmark_node` (#446). The `internal_offset` member is\n    only used for headings and can be moved to `struct cmark_heading`.\n    This reduces the size of `struct cmark_node` from 112 to 104 bytes on\n    64-bit systems. (Nick Wellnhofer)\n\n  * Add `-Wstrict-prototypes` and fix offending functions. (Nick\n    Wellnhofer, Dan C√Ærna»õ)\n\n  * Fix quadratic behavior involving `get_containing_block` (#431).\n    Instead of searching for the containing block, update the tight list\n    status when entering a child of a list item or exiting a list.\n    (Nick Wellnhofer)\n\n  * Fix `pathological_tests.py` (Nick Wellnhofer):\n    - Use a multiprocessing.Queue to actually get results from spawned\n      tests processes.\n    - Fix the `allowed_failures` test.\n    - Truncate actual output when printed.\n    - Prepare for testing pathological behavior of the Commonmark renderer.\n\n  * Fix source position bug with backticks (kyle).\n\n[0.30.2]\n\n  * Fix parsing of emphasis before links (#424, Nick Wellnhofer).\n    Fixes a regression introduced with commit ed0a4bf.\n\n  * Update to Unicode 14.0 (data-man).\n\n  * Add `~` to safe href character set (#394, frogtile).\n\n  * Update CMakeLists.txt (Saleem Abdulrasool).  Bump the minimum required\n    CMake to 3.7. Imperatively define output name for static library.\n\n  * Fix install paths in libcmark.pc (Sebasti√°n Mancilla).\n    `CMAKE_INSTALL_<dir>` can be relative or absolute path, so it is wrong to\n    prefix CMAKE_INSTALL_PREFIX because if CMAKE_INSTALL_<dir> is set to an\n    absolute path it will result in a malformed path with two absolute paths\n    joined together.  Instead, use `CMAKE_INSTALL_FULL_<dir>` from\n    GNUInstallDirs.\n\n[0.30.1]\n\n  * Properly indent block-level contents of list items in man (#258).\n    This handles nested lists as well as items with multiple paragraphs.\n    The change requires addition of a new field block_number_in_list_item\n    to cmark_renderer, but this does not change the public API.\n  * Fix quadratic behavior when parsing emphasis (#389, Nick\n    Wellnhofer).  Delimiters can be deleted, so store delimiter positions\n    instead of pointers in `openers_bottom`. Besides causing undefined\n    behavior when reading a dangling pointer, this could also result\n    in quadratic behavior when parsing emphasis.\n  * Fix quadratic behavior when parsing smart quotes (#388, Nick Wellnhofer).\n    Remove matching smart quote delimiters.  Otherwise, the same opener\n    could be found over and over, preventing the `openers_bottom`\n    optimization from kicking in and leading to quadratic behavior when\n    processing lots of quotes.\n  * Modify CMake configuration so that the project can be built with\n    older versions of CMake (#384, Saleem Abdulrasool).  (In 0.30.0,\n    some features were used that require CMake >= 3.3.) The cost of this\n    backwards compatibility is that developers must now explicitly invoke\n    `cmark_add_compile_options` when a new compilation target is added.\n  * Remove a comma at the end of an enumerator list, which was flagged\n    by clang as a C++11 extension.\n  * make_man_page.py: use absolute path with CDLL. This avoids the error\n    \"file system relative paths not allowed in hardened programs.\"\n  * Include cmark version in cmark(3) man page (instead of LOCAL).\n\n[0.30.0]\n\n  * Use official 0.30 spec.txt.\n  * Add `cmark_get_default_mem_allocator()` (#330).  API change: this\n    adds a new exported function in cmark.h.\n  * Fix #383.  An optimization we used for emphasis parsing was\n    too aggressive, causing us to miss some emphasis that was legal\n    according to the spec.  We fix this by indexing the `openers_bottom`\n    table not just by the type of delimiter and the length of the\n    closing delimiter mod 3, but by whether the closing delimiter\n    can also be an opener.  (The algorithm for determining emphasis\n    matching depends on all these factors.)  Add regression test.\n  * Fix quadratic behavior with inline HTML (#299, Nick Wellnhofer).\n    Repeated starting sequences like `<?`, `<!DECL ` or `<![CDATA[` could\n    lead to quadratic behavior if no matching ending sequence was found.\n    Separate the inline HTML scanners. Remember if scanning the whole input\n    for a specific ending sequence failed and skip subsequent scans.\n  * Speed up hierarchy check in tree manipulation API (Nick Wellnhofer).\n    Skip hierarchy check in the common case that the inserted child has\n    no children.\n  * Fix quadratic behavior when parsing inlines (#373, Nick Wellnhofer).\n    The inline parsing code would call `cmark_node_append_child` to append\n    nodes. This public function has a sanity check which is linear in the\n    depth of the tree. Repeated calls could show quadratic behavior in\n    degenerate trees. Use a special function to append nodes without this\n    check.  (Issue found by OSS-Fuzz.)\n  * Replace invalid characters in XML output (#365, Nick wellnhofer).\n    Control characters, U+FFFE and U+FFFF aren't allowed in XML 1.0, so\n    replace them with U+FFFD (replacement character). This doesn't solve\n    the problem how to roundtrip these characters, but at least we don't\n    produce invalid XML.\n  * Avoid quadratic output growth with reference links (#354, Nick Wellnhofer).\n    Keep track of the number bytes added through expansion of reference\n    links and limit the total to the size of the input document. Always\n    allow a minimum of 100KB.  Unfortunately, cmark has no error handling,\n    so all we can do is to stop expanding reference links without returning\n    an error. This should never be an issue in practice though. The 100KB\n    minimum alone should cover all real-world cases.\n  * Fix issue with type-7 HTML blocks interrupting paragraphs\n    (see commonmark/commonmark.js#213).\n  * Treat `textarea` like `script`, `style`, `pre` (type 1 HTML block),\n    in accordance with spec change.\n  * Define whitespace per spec (Asherah Conor).\n  * Add `MAX_INDENT` for xml (#355).  Otherwise we can get quadratic\n    increase in size with deeply nested structures.\n  * Fix handling of empty strings when creating XML/HTML output\n    (Steffen Kie√ü).\n  * Commonmark renderer: always use fences for code (#317).\n    This solves problems with adjacent code blocks being merged.\n  * Improve rendering of commonmark code spans with spaces (#316).\n  * Cleaner approach to max digits for numeric entities.\n    This modifies unescaping in `houdini_html_u.c` rather than\n    the entity handling in `inlines.c`.  Unlike the other,\n    this approach works also in e.g. link titles.\n  * Fix entity parser (and api test) to respect length limit on\n    numeric entities.\n  * Don't allow link destinations with unbalanced unescaped parentheses.\n    See commonmark/commonmark.js#177.\n  * `print_usage()`: Minor grammar fix, swap two words (#305, √òyvind A. Holm).\n  * Don't call `memcpy` with `NULL` as first parameter.\n    This is illegal according to the C standard, sec. 7.1.4.\n    See <https://www.imperialviolet.org/2016/06/26/nonnull.html>.\n  * Add needed include in `blocks.c`.\n  * Fix unnecessary variable assignment.\n  * Skip UTF-8 BOM if present at beginning of buffer (#334).\n  * Fix URL check in `is_autolink` (Nick Wellnhofer).  In a recent commit,\n    the check was changed to `strcmp`, but we really have to use `strncmp`.\n  * Fix null pointer deref in `is_autolink` (Nick Wellnhofer).\n    Introduced by a recent commit. Found by OSS-Fuzz.\n  * Rearrange struct cmark_node (Nick Wellnhofer).  Introduce multi-purpose\n    data/len members in struct cmark_node. This is mainly used to store\n    literal text for inlines, code and HTML blocks.\n    Move the content strbuf for blocks from `cmark_node` to `cmark_parser`.\n    When finalizing nodes that allow inlines (paragraphs and headings),\n    detach the strbuf and store the block content in the node's data/len\n    members. Free the block content after processing inlines.\n    Reduces size of struct `cmark_node` by 8 bytes.\n  * Improve packing of `struct cmark_list` (Nick Wellnhofer).\n  * Use C string instead of chunk in a number of contexts (Nick Wellnhofer,\n    #309).  The node struct never references memory of other nodes now.\n    Node accessors don't have to check for delayed creation of C strings,\n    so parsing and iterating all literals using the public API should\n    actually be faster than before.  These changes also reduce the size\n    of `struct cmark_node`.\n  * Add casts for MSVC10 (from kivikakk in cmark-cfm).\n  * commonmark renderer:  better escaping in smart mode.  When\n    `CMARK_OPT_SMART` is enabled, we escape literal `-`, `.`, and quote\n    characters when needed to avoid their being \"smartified.\"\n  * Add options field to `cmark_renderer`.\n  * commonmark.c - use `size_t` instead of `int`.\n  * Include `string.h` in `cmark-fuzz.c`.\n  * Fix #220 (hash collisions for references) (Vicent Marti via cmark-gfm).\n    Reimplemented reference storage as follows:\n    1. New references are always inserted at the end of a linked list. This\n    is an O(1) operation, and does not check whether an existing (duplicate)\n    reference with the same label already exists in the document.\n    2. Upon the first call to `cmark_reference_lookup` (when it is expected\n    that no further references will be added to the reference map), the\n    linked list of references is written into a fixed-size array.\n    3. The fixed size array can then be efficiently sorted in-place in O(n\n    log n). This operation only happens once. We perform this sort in a\n    _stable_ manner to ensure that the earliest link reference in the\n    document always has preference, as the spec dictates. To accomplish\n    this, every reference is tagged with a generation number when initially\n    inserted in the linked list.\n    4. The sorted array is then compacted in O(n). Since it was sorted in a\n    stable way, the first reference for each label is preserved and the\n    duplicates are removed, matching the spec.\n    5. We can now simply perform a binary search for the current\n    `cmark_reference_lookup` query in O(log n). Any further lookup calls\n    will also be O(log n), since the sorted references table only needs to\n    be generated once.\n    The resulting implementation is notably simple (as it uses standard\n    library builtins `qsort` and `bsearch`), whilst performing better than\n    the fixed size hash table in documents that have a high number of\n    references and never becoming pathological regardless of the input.\n  * Comment out unused function `cmark_strbuf_cstr` in `buffer.h`.\n  * Re-add `--safe` command-line option as a no-op (#344), for backwards\n    compatibility.\n  * Update to Unicode 13.0\n  * Generate and install cmake-config file (Reinhold Gschweicher).\n    Add full cmake support. The project can either be used with\n    `add_subdirectory` or be installed into the system (or some other\n    directory) and be found with `find_package(cmark)`. In both cases the\n    cmake target `cmark::cmark` and/or `cmark::cmark_static` is all that\n    is needed to be linked.  Previously the `cmarkConfig.cmake` file\n    was generated, but not installed.  As additional bonus of generation\n    by cmake we get a generated `cmake-config-version.cmake` file for\n    `find_package()` to search for the same major version.\n    The generated config file is position independent, allowing the\n    installed directory to be copied or moved and still work.\n    The following four files are generated and installed:\n    `lib/cmake/cmark/cmark-config.cmake`,\n    `lib/cmake/cmark/cmark-config-version.cmake`,\n    `lib/cmake/cmark/cmark-targets.cmake`,\n    `lib/cmake/cmark/cmark-targets-release.cmake`.\n  * Adjust the MinGW paths for MinGW64 (Daniil Baturin).\n  * Fix CMake generator expression checking for MSVC (Nick Wellnhofer).\n  * Fix `-Wconst-qual` warning (Saleem Abdulrasool).  This enables building\n    with `/Zc:strictString` with MSVC as well.\n  * Improve and modernize cmake build (Saleem Abdulrasool).\n    + Build: add exports targets for build tree usage (#307).\n    + Uuse target properties for include paths.\n    + Remove the unnecessary execute permission on CMakeLists.txt.\n    + Reduce property computation in CMake.\n    + Use `CMAKE_INCLUDE_CURRENT_DIRECTORY`.\n    + Improve man page installation.\n    + Only include `GNUInstallDirs` once.\n    + Replace `add_compile_definitions` with `add_compile_options`\n      since the former was introduced in 3.12 (#321).\n    + Cleanup CMake (#319).\n    + Inline a variable.\n    + Use `LINKER_LANGUAGE` property for C++ runtime.\n    + Use CMake to control C standard.\n    + Use the correct variable.\n    + Loosen the compiler check\n    + Hoist shared flags to top-level CMakeLists\n    + Remove duplicated flags.\n    + Use `add_compile_options` rather than modify `CMAKE_C_FLAGS`.\n    + Hoist sanitizer flags to global state.\n    + Hoist `-fvisibilty` flags to top-level.\n    + Hoist the debug flag handling.\n    + Hoist the profile flag handling.\n    + Remove incorrect variable handling.\n    + Remove unused CMake includes.\n  * Remove \"-rdynamic\" flag for static builds (#300, Eric Pruitt).\n  * Fixed installation on other than Ubuntu GNU/Linux distributions\n    (Vitaly Zaitsev).\n  * Link executable with static or shared library (Nick Wellnhofer).\n    If `CMARK_STATIC` is on (default), link the executable with the static\n    library. This produces exactly the same result as compiling the library\n    sources again and linking with the object files.\n    If `CMARK_STATIC` is off, link the executable with the shared library.\n    This wasn't supported before and should be the preferred way to\n    package cmark on Linux distros.\n    Building only a shared library and a statically linked executable\n    isn't supported anymore but this doesn't seem useful.\n  * Reintroduce version check for MSVC /TP flag (Nick Wellnhofer).\n    The flag is only required for old MSVC versions.\n  * normalize.py: use `html.escape` instead of `cgi.escape` (#313).\n  * Fix pathological_tests.py on Windows (Nick Wellnhofer).\n    When using multiprocessing on Windows, the main program must be\n    guarded with a `__name__` check.\n  * Remove useless `__name__` check in test scripts (Nick Wellnhofer).\n  * Add CIFuzz (Leo Neat).\n  * cmark.1 - Document --unsafe instead of --safe (#332).\n  * cmark.1: remove docs for `--normalize` which no longer exists (#332).\n  * Add lint target to Makefile.\n  * Add uninstall target to Makefile.\n  * Update benchmarks (#338).\n  * Fix typo in documentation (Tim Gates).\n  * Increase timeout for pathological tests to avoid CI failure.\n  * Update the Racket wrapper with the safe -> unsafe flag change (Eli\n    Barzilay).\n\n[0.29.0]\n\n  * Update spec to 0.29.\n  * Make rendering safe by default (#239, #273).\n    Adds `CMARK_OPT_UNSAFE` and make `CMARK_OPT_SAFE` a no-op (for API\n    compatibility).  The new default behavior is to suppress raw HTML and\n    potentially dangerous links.  The `CMARK_OPT_UNSAFE` option has to be set\n    explicitly to prevent this.\n    **NOTE:** This change will require modifications in bindings for cmark\n    and in most libraries and programs that use cmark.\n    Borrows heavily from @kivikakk's patch in github/cmark-gfm#123.\n  * Add sourcepos info for inlines (Yuki Izumi).\n  * Disallow more than 32 nested balanced parens in a link (Yuki Izumi).\n  * Resolve link references before creating setext header.\n    A setext header line after a link reference should not\n    create a header, according to the spec.\n  * commonmark renderer: improve escaping.\n    URL-escape special characters when escape mode is URL, and not otherwise.\n    Entity-escape control characters (< 0x20) in non-literal escape modes.\n  * render:  only emit actual newline when escape mode is LITERAL.\n    For markdown content, e.g., in other contexts we want some\n    kind of escaping, not a literal newline.\n  * Update code span normalization to conform with spec change.\n  * Allow empty `<>` link destination in reference link.\n  * Remove leftover includes of `memory.h` (#290).\n  * A link destination can't start with `<` unless it is\n    an angle-bracket link that also ends with `>` (#289).\n    (If your URL really starts with `<`, URL-escape it.)\n  * Allow internal delimiter runs to match if both have lengths that are\n    multiples of 3.  See commonmark/commonmark#528.\n  * Include `references.h` in `parser.h` (#287).\n  * Fix `[link](<foo\\>)`.\n  * Use hand-rolled scanner for thematic break (see #284).\n    Keep track of the last position where a thematic break\n    failed to match on a line, to avoid rescanning unnecessarily.\n  * Rename `ends_with_blank_line` with `S_` prefix.\n  * Add `CMARK_NODE__LAST_LINE_CHECKED` flag (#284).\n    Use this to avoid unnecessary recursion in `ends_with_blank_line`.\n  * In `ends_with_blank_line`, call `S_set_last_line_blank`\n    to avoid unnecessary repetition (#284).  Once we settle whether a list\n    item ends in a blank line, we don't need to revisit this in considering\n    parent list items.\n  * Disallow unescaped `(` in parenthesized link title.\n  * Copy line/col info straight from opener/closer (Ashe Connor).\n    We can't rely on anything in `subj` since it's been modified while parsing\n    the subject and could represent line info from a future line.  This is\n    simple and works.\n  * `render.c`: reset `last_breakable` after cr.  Fixes jgm/pandoc#5033.\n  * Fix a typo in `houdini_href_e.c` (Felix Yan).\n  * commonmark writer: use `~~~` fences if info string contains backtick.\n    This is needed for round-trip tests.\n  * Update scanners for new info string rules.\n  * Add XSLT stylesheet to convert cmark XML back to Commonmark\n    (Nick Wellnhofer, #264).  Initial version of an XSLT stylesheet that\n    converts the XML format produced by `cmark -t xml` back to Commonmark.\n  * Check for whitespace before reference title (#263).\n  * Bump CMake to version 3 (Jonathan M√ºller).\n  * Build: Remove deprecated call to `add_compiler_export_flags()`\n    (Jonathan M√ºller).  It is deprecated in CMake 3.0, the replacement is to\n    set the `CXX_VISIBILITY_PRESET` (or in our case `C_VISIBILITY_PRESET`) and\n    `VISIBILITY_INLINES_HIDDEN` properties of the target.  We're already\n    setting them by setting the CMake variables anyway, so the call can be\n    removed.\n  * Build: only attempt to install MSVC system libraries on Windows\n    (Saleem Abdulrasool).  Newer versions of CMake attempt to query the system\n    for information about the VS 2017 installation.  Unfortunately, this query\n    fails on non-Windows systems when cross-compiling:\n    `cmake_host_system_information does not recognize <key> VS_15_DIR`.\n    CMake will not find these system libraries on non-Windows hosts anyways,\n    and we were silencing the warnings, so simply omit the installation when\n    cross-compiling to Windows.\n  * Simplify code normalization, in line with spec change.\n  * Implement code span spec changes.  These affect both parsing and writing\n    commonmark.\n  * Add link parsing corner cases to regressions (Ashe Connor).\n  * Add `xml:space=\"preserve\"` in XML output when appropriate\n    (Nguy·ªÖn Th√°i Ng·ªçc Duy).\n    (For text, code, code_block, html_inline and html_block tags.)\n  * Removed meta from list of block tags.  Added regression test.\n    See commonmark/CommonMark#527.\n  * `entity_tests.py` - omit noisy success output.\n  * `pathological_tests.py`: make tests run faster.\n    Commented out the (already ignored) \"many references\" test, which\n    times out.  Reduced the iterations for a couple other tests.\n  * `pathological_tests.py`: added test for deeply nested lists.\n  * Optimize `S_find_first_nonspace`.  We were needlessly redoing things we'd\n    already done.  Now we skip the work if the first nonspace is greater than\n    the current offset.  This fixes pathological slowdown with deeply nested\n    lists (#255).  For N = 3000, the time goes from over 17s to about 0.7s.\n    Thanks to Martin Mitas for diagnosing the problem.\n  * Allow spaces in link destination delimited with pointy brackets.\n  * Adjust max length of decimal/numeric entities.\n    See commonmark/CommonMark#487.\n  * Fix inline raw HTML parsing.\n    This fixes a recently added failing spec test case.  Previously spaces\n    were being allowed in unquoted attribute values; no we forbid them.\n  * Don't allow list markers to be indented >= 4 spaces.\n    See commonmark/CommonMark#497.\n  * Check for empty buffer when rendering (Phil Turnbull).\n    For empty documents, `->size` is zero so\n    `renderer.buffer->ptr[renderer.buffer->size - 1]` will cause an\n    out-of-bounds read. Empty buffers always point to the global\n    `cmark_strbuf__initbuf` buffer so we read `cmark_strbuf__initbuf[-1]`.\n  * Also run API tests with `CMARK_SHARED=OFF` (Nick Wellnhofer).\n  * Rename roundtrip and entity tests (Nick Wellnhofer).\n    Rename the tests to reflect that they use the library, not the\n    executable.\n  * Generate export header for static-only build (#247, Nick Wellnhofer).\n  * Fuzz width parameter too (Phil Turnbull).  Allow the `width` parameter to\n    be generated too so we get better fuzz-coverage.\n  * Don't discard empty fuzz test-cases (Phil Turnbull).  We currently discard\n    fuzz test-cases that are empty but empty inputs are valid markdown. This\n    improves the fuzzing coverage slightly.\n  * Fixed exit code for pathological tests.\n  * Add allowed failures to `pathological_tests.py`.\n    This allows us to include tests that we don't yet know how to pass.\n  * Add timeout to `pathological_tests.py`.\n    Tests must complete in 8 seconds or are errors.\n  * Add more pathological tests (Martin Mitas).\n    These tests target the issues #214, #218, #220.\n  * Use pledge(2) on OpenBSD (Ashe Connor).\n  * Update the Racket wrapper (Eli Barzilay).\n  * Makefile: For afl target, don't build tests.\n\n[0.28.3]\n\n  * Include GNUInstallDirs in src/CMakeLists.txt (Nick Wellnhofer, #240).\n    This fixes build problems on some cmake versions (#241).\n\n[0.28.2]\n\n  * Fixed regression in install dest for static library (#238).\n    Due to a mistake, 0.28.1 installed libcmark.a into include/.\n\n[0.28.1]\n\n  * `--smart`: open quote can never occur right after `]` or `)` (#227).\n  * Fix quadratic behavior in `finalize` (Vicent Marti).\n  * Don't use `CMAKE_INSTALL_LIBDIR` to create `libcmark.pc` (#236).\n    This wasn't getting set in processing `libcmark.pc.in`, and we\n    were getting the wrong entry in `libcmark.pc`.\n    The new approach sets an internal `libdir` variable to\n    `lib${LIB_SUFFIX}`.  This variable is used both to set the\n    install destination and in the libcmark.pc.in template.\n  * Update README.md, replace `make astyle` with `make format`\n    (Nguy·ªÖn Th√°i Ng·ªçc Duy).\n\n[0.28.0]\n\n  * Update spec.\n  * Use unsigned integer when shifting (Phil Turnbull).\n    Avoids a UBSAN warning which can be triggered when handling a\n    long sequence of backticks.\n  * Avoid memcpy'ing NULL pointers (Phil Turnbull).\n    Avoids a UBSAN warning when link title is empty string.\n    The length of the memcpy is zero so the NULL pointer is not\n    dereferenced but it is still undefined behaviour.\n  * DeMorgan simplification of some tests in emphasis parser.\n    This also brings the code into closer alignment with the wording\n    of the spec (see jgm/CommonMark#467).\n  * Fixed undefined shift in commonmark writer (#211).\n    Found by google/oss-fuzz:\n    <https://oss-fuzz.com/v2/testcase-detail/4686992824598528>.\n  * latex writer:  fix memory overflow (#210).\n    We got an array overflow in enumerated lists nested more than\n    10 deep with start number =/= 1.\n    This commit also ensures that we don't try to set `enum_` counters\n    that aren't defined by LaTeX (generally up to enumv).\n    Found by google/oss-fuzz:\n    <https://oss-fuzz.com/v2/testcase-detail/5546760854306816>.\n  * Check for NULL pointer in get_link_type (Phil Turnbull).\n    `echo '[](xx:)' | ./build/src/cmark -t latex` gave a\n    segfault.\n  * Move fuzzing dictionary into single file (Phil Turnbull).\n    This allows AFL and libFuzzer to use the same dictionary\n  * Reset bytes after UTF8 proc (Yuki Izumi, #206).\n  * Don't scan past an EOL (Yuki Izumi).\n    The existing negated character classes (`[^‚Ä¶]`) are careful to\n    always include` \\x00` in the characters excluded, but these `.`\n    catch-alls can scan right past the terminating NUL placed\n    at the end of the buffer by `_scan_at`.  As such, buffer\n    overruns can occur.  Also, don't scan past a newline in HTML\n    block end scanners.\n  * Document cases where `get_` functions return `NULL` (#155).\n    E.g. `cmark_node_get_url` on a non-link or image.\n  * Properly handle backslashes in link destinations (#192).\n    Only ascii punctuation characters are escapable, per the spec.\n  * Fixed `cmark_node_get_list_start` to return 0 for bullet lists,\n    as documented (#202).\n  * Use `CMARK_NO_DELIM` for bullet lists (#201).\n  * Fixed code for freeing delimiter stack (#189).\n  * Removed abort outside of conditional (typo).\n  * Removed coercion in error message when aborting from buffer.\n  * Print message to stderr when we abort due to memory demands (#188).\n  * `libcmark.pc`: use `CMAKE_INSTALL_LIBDIR` (#185, Jens Petersen).\n    Needed for multilib distros like Fedora.\n  * Fixed buffer overflow error in `S_parser_feed` (#184).\n    The overflow could occur in the following condition:\n    the buffer ends with `\\r` and the next memory address\n    contains `\\n`.\n  * Update emphasis parsing for spec change.\n    Strong now goes inside Emph rather than the reverse,\n    when both scopes are possible.  The code is much simpler.\n    This also avoids a spec inconsistency that cmark had previously:\n    `***hi***` became Strong (Emph \"hi\")) but\n    `***hi****` became Emph (Strong \"hi\")) \"*\"\n  * Fixes for the LaTeX renderer (#182, Doeme)\n    + Don't double-output the link in latex-rendering.\n    + Prevent ligatures in dashes sensibly when rendering latex.\n      `\\-` is a hyphenation, so it doesn't get displayed at all.\n  * Added a test for NULL when freeing `subj->last_delim`.\n  * Cleaned up setting of lower bounds for openers.\n    We now use a much smaller array.\n  * Fix #178, quadratic parsing bug.  Add pathological test.\n  * Slight improvement of clarity of logic in emph matching.\n  * Fix \"multiple of 3\" determination in emph/strong parsing.\n    We need to store the length of the original delimiter run,\n    instead of using the length of the remaining delimiters\n    after some have been subtracted.  Test case:\n    `a***b* c*`.  Thanks to Raph Levin for reporting.\n  * Correctly initialize chunk in S_process_line (Nick Wellnhofer, #170).\n    The `alloc` member wasn't initialized.  This also allows to add an\n    assertion in `chunk_rtrim` which doesn't work for alloced chunks.\n  * Added 'make newbench'.\n  * `scanners.c` generated with re2c 0.16 (68K smaller!).\n  * `scanners.re` - fixed warnings; use `*` for fallback.\n  * Fixed some warnings in `scanners.re`.\n  * Update CaseFolding to latest (Kevin Wojniak, #168).\n  * Allow balanced nested parens in link destinations (Yuki Izumi, #166)\n  * Allocate enough bytes for backticks array.\n  * Inlines: Ensure that the delimiter stack is freed in subject.\n  * Fixed pathological cases with backtick code spans:\n\n    - Removed recursion in scan_to_closing_backticks\n    - Added an array of pointers to potential backtick closers\n      to subject\n    - This array is used to avoid traversing the subject again\n      when we've already seen all the potential backtick closers.\n    - Added a max bound of 1000 for backtick code span delimiters.\n    - This helps with pathological cases like:\n\n            x\n            x `\n            x ``\n            x ```\n            x ````\n            ...\n\n    - Added pathological test case.\n\n    Thanks to Martin Mit√°≈° for identifying the problem and for\n    discussion of solutions.\n  * Remove redundant cmake_minimum_required (#163, @kainjow).\n  * Make shared and static libraries optional (Azamat H. Hackimov).\n    Now you can enable/disable compilation and installation targets for\n    shared and static libraries via `-DCMARK_SHARED=ON/OFF` and\n    `-DCMARK_STATIC=ON/OFF`.\n  * Added support for built-in `${LIB_SUFFIX}` feature (Azamat H.\n    Hackimov).  Replaced `${LIB_INSTALL_DIR}` option with built-in\n    `${LIB_SUFFIX}` for installing for 32/64-bit systems. Normally,\n    CMake will set `${LIB_SUFFIX}` automatically for required enviroment.\n    If you have any issues with it, you can override this option with\n    `-DLIB_SUFFIX=64` or `-DLIB_SUFFIX=\"\"` during configuration.\n  * Add Makefile target and harness to fuzz with libFuzzer (Phil Turnbull).\n    This can be run locally with `make libFuzzer` but the harness will be\n    integrated into oss-fuzz for large-scale fuzzing.\n  * Advertise `--validate-utf8` in usage information\n    (Nguy·ªÖn Th√°i Ng·ªçc Duy).\n  * Makefile: use warnings with re2c.\n  * README: Add link to Python wrapper, prettify languages list\n    (Pavlo Kapyshin).\n  * README: Add link to cmark-scala (Tim Nieradzik, #196)\n\n[0.27.1]\n\n  * Set policy for CMP0063 to avoid a warning (#162).\n    Put set_policy under cmake version test.\n    Otherwise we get errors in older versions of cmake.\n  * Use VERSION_GREATER to clean up cmake version test.\n  * Improve afl target.  Use afl-clang by default.  Set default for path.\n\n[0.27.0]\n\n  * Update spec to 0.27.\n  * Fix warnings building with MSVC on Windows (#165, Hugh Bellamy).\n  * Fix `CMAKE_C_VISIBILITY_PRESET` for cmake versions greater than 1.8\n    (e.g. 3.6.2) (#162, Hugh Bellamy).  This lets us build swift-cmark\n    on Windows, using clang-cl.\n  * Fix for non-matching entities (#161, Yuki Izumi).\n  * Modified `print_delimiters` (commented out) so it compiles again.\n  * `make format`: don't change order of includes.\n  * Changed logic for null/eol checks (#160).\n    + only check once for \"not at end of line\"\n    + check for null before we check for newline characters (the\n      previous patch would fail for NULL + CR)\n  * Fix by not advancing past both `\\0` and `\\n` (Yuki Izumi).\n  * Add test for NUL-LF sequence (Yuki Izumi).\n  * Fix memory leak in list parsing (Yuki Izumi).\n  * Use `cmark_mem` to free where used to alloc (Yuki Izumi).\n  * Allow a shortcut link before a `(` (jgm/CommonMark#427).\n  * Allow tabs after setext header line (jgm/commonmark.js#109).\n  * Don't let URI schemes start with spaces.\n  * Fixed h2..h6 HTML blocks (jgm/CommonMark#430).  Added regression test.\n  * Autolink scheme can contain digits (G√°bor Cs√°rdi).\n  * Fix nullary function declarations in cmark.h (Nick Wellnhofer).\n    Fixes strict prototypes warnings.\n  * COPYING: Update file name and remove duplicate section and\n    (Peter Eisentraut).\n  * Fix typo (Pavlo Kapyshin).\n\n[0.26.1]\n\n  * Removed unnecessary typedef that caused build failure on\n    some platforms.\n  * Use `$(MAKE)` in Makefile instead of hardcoded `make` (#146,\n    Tobias Kortkamp).\n\n[0.26.0]\n\n  * Implement spec changes for list items:\n    - Empty list items cannot interrupt paragraphs.\n    - Ordered lists cannot interrupt paragraphs unless\n      they start with 1.\n    - Removed \"two blank lines break out of a list\" feature.\n  * Fix sourcepos for blockquotes (#142).\n  * Fix sourcepos for atx headers (#141).\n  * Fix ATX headers and thematic breaks to allow tabs as well as spaces.\n  * Fix `chunk_set_cstr` with suffix of current string (#139,\n    Nick Wellnhofer).  It's possible that `cmark_chunk_set_cstr` is called\n    with a substring (suffix) of the current string. Delay freeing of the\n    chunk content to handle this case correctly.\n  * Export targets on installation (Jonathan M√ºller).\n    This allows using them in other cmake projects.\n  * Fix cmake warning about CMP0048 (Jonathan M√ºller).\n  * commonmark renderer:  Ensure we don't have a blank line\n    before a code block when it's the first thing in a list\n    item.\n  * Change parsing of strong/emph in response to spec changes.\n    `process_emphasis` now gets better results in corner cases.\n    The change is this:  when considering matches between an interior\n    delimiter run (one that can open and can close) and another delimiter\n    run, we require that the sum of the lengths of the two delimiter\n    runs mod 3 is not 0.\n  * Ported Robin Stocker's changes to link parsing in jgm/commonmark#101.\n    This uses a separate stack for brackets, instead of putting them on the\n    delimiter stack.  This avoids the need for looking through the delimiter\n    stack for the next bracket.\n  * `cmark_reference_lookup`: Return NULL if reference is null string.\n  * Fix character type detection in `commonmark.c` (Nick Wellnhofer).\n    Fixes test failures on Windows and undefined behavior.\n    - Implement `cmark_isalpha`.\n    - Check for ASCII character before implicit cast to char.\n    - Use internal ctype functions in `commonmark.c`.\n  * Better documentation of memory-freeing responsibilities.\n    in `cmark.h` and its man page (#124).\n  * Use library functions to insert nodes in emphasis/link processing.\n    Previously we did this manually, which introduces many\n    places where errors can creep in.\n  * Correctly handle list marker followed only by spaces.\n    Previously when a list marker was followed only by spaces,\n    cmark expected the following content to be indented by\n    the same number of spaces.  But in this case we should\n    treat the line just like a blank line and set list padding\n    accordingly.\n  * Fixed a number of issues relating to line wrapping.\n    - Extend `CMARK_OPT_NOBREAKS` to all renderers and add `--nobreaks`.\n    - Do not autowrap, regardless of width parameter, if\n      `CMARK_OPT_NOBREAKS` is set.\n    - Fixed `CMARK_OPT_HARDBREAKS` for LaTeX and man renderers.\n    - Ensure that no auto-wrapping occurs if\n      `CMARK_OPT_NOBREAKS` is enabled, or if output is CommonMark and\n      `CMARK_OPT_HARDBREAKS` is enabled.\n  * Set stdin to binary mode on Windows (Nick Wellnhofer, #113).\n    This fixes EOLs when reading from stdin.\n  * Add library option to render softbreaks as spaces (Pavlo\n    Kapyshin).  Note that the `NOBREAKS` option is HTML-only\n  * renderer:  `no_linebreaks` instead of `no_wrap`.\n    We generally want this option to prohibit any breaking\n    in things like headers (not just wraps, but softbreaks).\n  * Coerce `realurllen` to `int`.  This is an alternate solution for pull\n    request #132, which introduced a new warning on the comparison\n    (Benedict Cohen).\n  * Remove unused variable `link_text` (Mathiew Duponchelle).\n  * Improved safety checks in buffer (Vicent Marti).\n  * Add new interface allowing specification of custom memory allocator\n    for nodes (Vicent Marti).  Added `cmark_node_new_with_mem`,\n    `cmark_parser_new_with_mem`, `cmark_mem` to API.\n  * Reduce storage size for nodes by using bit flags instead of\n    separate booleans (Vicent Marti).\n  * config: Add `SSIZE_T` compat for Win32 (Vicent Marti).\n  * cmake: Global handler for OOM situations (Vicent Marti).\n  * Add tests for memory exhaustion (Vicent Marti).\n  * Document in man page and public header that one should use the same\n    memory allocator for every node in a tree.\n  * Fix ctypes in Python FFI calls (Nick Wellnhofer).  This didn't cause\n    problems so far because all types are 32-bit on 32-bit systems and\n    arguments are passed in registers on x86-64.  The wrong types could cause\n    crashes on other platforms, though.\n  * Remove spurious failures in roundtrip tests.  In the commonmark writer we\n    separate lists, and lists and indented code, using a dummy HTML comment.\n    So in evaluating the round-trip tests, we now strip out\n    these comments.  We also normalize HTML to avoid issues\n    having to do with line breaks.\n  * Add 2016 to copyright (Kevin Burke).\n  * Added `to_commonmark` in `test/cmark.py` (for round-trip tests).\n  * `spec_test.py` - parameterize `do_test` with converter.\n  * `spec_tests.py`: exit code is now sum of failures and errors.\n    This ensures that a failing exit code will be given when\n    there are errors, not just with failures.\n  * Fixed round trip tests.  Previously they actually ran\n    `cmark` instead of the round-trip version, since there was a bug in\n    setting the ROUNDTRIP variable (#131).\n  * Added new `roundtrip_tests.py`.  This replaces the old use of simple shell\n    scripts.  It is much faster, and more flexible.  (We will be able\n    to do custom normalization and skip certain tests.)\n  * Fix tests under MinGW (Nick Wellnhofer).\n  * Fix leak in `api_test` (Mathieu Duponchelle).\n  * Makefile: have leakcheck stop on first error instead of going through\n    all the formats and options and probably getting the same output.\n  * Add regression tests (Nick Wellnhofer).\n\n[0.25.2]\n\n  * Open files in binary mode (#113, Nick Wellnhofer).  Now that cmark\n    supports different line endings, files must be openend in binary mode\n    on Windows.\n  * Reset `partially_consumed_tab` on every new line (#114, Nick Wellnhofer).\n  * Handle buffer split across a CRLF line ending (#117).  Adds an internal\n    field to the parser struct to keep track of `last_buffer_ended_with_cr`.\n    Added test.\n\n[0.25.1]\n\n  * Release with no code changes.  cmark version was mistakenly set to\n    0.25.1 in the 0.25.0 release (#112), so this release just\n    ensures that this will cause no confusion later.\n\n[0.25.0]\n\n  * Fixed tabs in indentation (#101).  This patch fixes S_advance_offset\n    so that it doesn't gobble a tab character when advancing less than the\n    width of a tab.\n  * Added partially_consumed_tab to parser.  This keeps track of when we\n    have gotten partway through a tab when consuming initial indentation.\n  * Simplified add_line (only need parser parameter).\n  * Properly handle partially consumed tab.  E.g. in\n\n        - foo\n\n         <TAB><TAB>bar\n\n    we should consume two spaces from the second tab, including two spaces\n    in the code block.\n  * Properly handle tabs with blockquotes and fenced blocks.\n  * Fixed handling of tabs in lists.\n  * Clarified logic in S_advance_offset.\n  * Use an assertion to check for in-range html_block_type.\n    It's a programming error if the type is out of range.\n  * Refactored S_processLines to make the logic easier to\n    understand, and added documentation (Mathieu Duponchelle).\n  * Removed unnecessary check for empty string_content.\n  * Factored out contains_inlines.\n  * Moved the cmake minimum version to top line of CMakeLists.txt\n    (tinysun212).\n  * Fix ctype(3) usage on NetBSD (Kamil Rytarowski).  We need to cast value\n    passed to isspace(3) to unsigned char to explicitly prevent possibly\n    undefined behavior.\n  * Compile in plain C mode with MSVC 12.0 or newer (Nick Wellnhofer).\n    Under MSVC, we used to compile in C++ mode to get some C99 features\n    like mixing declarations and code. With newer MSVC versions, it's\n    possible to build in plain C mode.\n  * Switched from \"inline\" to \"CMARK_INLINE\" (Nick Wellnhofer).\n    Newer MSVC versions support enough of C99 to be able to compile cmark\n    in plain C mode. Only the \"inline\" keyword is still unsupported.\n    We have to use \"__inline\" instead.\n  * Added include guards to config.h\n  * config.h.in - added compatibility snprintf, vsnprintf for MSVC.\n  * Replaced sprintf with snprintf (Marco Benelli).\n  * config.h: include stdio.h for _vscprintf etc.\n  * Include starg.h when needed in config.h.\n  * Removed an unnecessary C99-ism in buffer.c.  This helps compiling on\n    systems like luarocks that don't have all the cmake configuration\n    goodness (thanks to carlmartus).\n  * Don't use variable length arrays (Nick Wellnhofer).\n    They're not supported by MSVC.\n  * Test with multiple MSVC versions under Appveyor (Nick Wellnhofer).\n  * Fix installation dir of man-pages on NetBSD (Kamil Rytarowski).\n  * Fixed typo in cmark.h comments (Chris Eidhof).\n  * Clarify in man page that cmark_node_free frees a node's children too.\n  * Fixed documentation of --width in man page.\n  * Require re2c >= 1.14.2 (#102).\n  * Generated scanners.c with more recent re2c.\n\n[0.24.1]\n\n  * Commonmark renderer:\n    + Use HTML comment, not two blank lines, to separate a list\n      item from a following code block or list.  This makes the\n      output more portable, since the \"two blank lines\" rule is\n      unique to CommonMark.  Also, it allows us to break out of\n      a sublist without breaking out of all levels of nesting.\n    + `is_autolink` - handle case where link has no children,\n      which previously caused a segfault.\n    + Use 4-space indent for bullet lists, for increased portability.\n    + Use 2-space + newline for line break for increased portability (#90).\n    + Improved punctuation escaping.  Previously all `)` and\n      `.` characters after digits were escaped; now they are\n      only escaped if they are genuinely in a position where\n      they'd cause a list item.  This is achieved by changes in\n      `render.c`: (a) `renderer->begin_content` is only set to\n      false after a string of digits at the beginning of the\n      line, and (b) we never break a line before a digit.\n      Also, `begin_content` is properly initialized to true.\n  * Handle NULL root in `consolidate_text_nodes`.\n\n[0.24.0]\n\n  * [API change] Added `cmark_node_replace(oldnode, newnode)`.\n  * Updated spec.txt to 0.24.\n  * Fixed edge case with escaped parens in link destination (#97).\n    This was also checked against the #82 case with asan.\n  * Removed unnecessary check for `fenced` in `cmark_render_html`.\n    It's sufficient to check that the info string is empty.\n    Indeed, those who use the API may well create a code block\n    with an info string without explicitly setting `fenced`.\n  * Updated format of `test/smart_punct.txt`.\n  * Updated `test/spec.txt`, `test/smart_punct.txt`, and\n    `spec_tests.py` to new format.\n  * Fixed `get_containing_block` logic in `src/commonmark.c`.\n    This did not allow for the possibility that a node might have no\n    containing block, causing the commonmark renderer to segfault if\n    passed an inline node with no block parent.\n  * Fixed string representations of `CUSTOM_BLOCK`,\n    `CUSTOM_INLINE`.  The old versions `raw_inline` and\n    `raw_block` were being used, and this led to incorrect xml output.\n  * Use default opts in python sample wrapper.\n  * Allow multiline setext header content, as per spec.\n  * Don't allow spaces in link destinations, even with pointy brackets.\n    Conforms to latest change in spec.\n  * Updated `scheme` scanner according to spec change.  We no longer use\n    a whitelist of valid schemes.\n  * Allow any kind of nodes as children of `CUSTOM_BLOCK` (#96).\n  * `cmark.h`: moved typedefs for iterator into iterator section.\n    This just moves some code around so it makes more sense\n    to read, and in the man page.\n  * Fixed `make_man_page.py` so it includes typedefs again.\n\n[0.23.0]\n\n  * [API change] Added `CUSTOM_BLOCK` and `CUSTOM_INLINE` node types.\n    They are never generated by the parser, and do not correspond\n    to CommonMark elements.  They are designed to be inserted by\n    filters that postprocess the AST.  For example, a filter might\n    convert specially marked code blocks to svg diagrams in HTML\n    and tikz diagrams in LaTeX, passing these through to the renderer\n    as a `CUSTOM_BLOCK`.  These nodes can have children, but they\n    also have literal text to be printed by the renderer \"on enter\"\n    and \"on exit.\" Added `cmark_node_get_on_enter`,\n    `cmark_node_set_on_enter`, `cmark_node_get_on_exit`,\n    `cmark_node_set_on_exit` to API.\n  * [API change] Rename `NODE_HTML` -> `NODE_HTML_BLOCK`,\n    `NODE_INLINE_HTML` -> `NODE_HTML_INLINE`.  Define aliases\n    so the old names still work, for backwards compatibility.\n  * [API change] Rename `CMARK_NODE_HEADER` -> `CMARK_NODE_HEADING`.\n    Note that for backwards compatibility, we have defined aliases:\n    `CMARK_NODE_HEADER` = `CMARK_NODE_HEADING`,\n    `cmark_node_get_header_level` = `cmark_node_get_heading_level`, and\n    `cmark_node_set_header_level` = `cmark_node_set_heading_level`.\n  * [API change] Rename `CMARK_NODE_HRULE` -> `CMARK_NODE_THEMATIC_BREAK`.\n    Defined the former as the latter for backwards compatibility.\n  * Don't allow space between link text and link label in a reference link\n    (spec change).\n  * Separate parsing and rendering opts in `cmark.h` (#88).\n    This change also changes some of these constants' numerical values,\n    but nothing should change in the API if you use the constants\n    themselves.  It should now be clear in the man page which\n    options affect parsing and which affect rendering.\n  * xml renderer - Added xmlns attribute to document node (jgm/CommonMark#87).\n  * Commonmark renderer:  ensure html blocks surrounded by blanks.\n    Otherwise we get failures of roundtrip tests.\n  * Commonmark renderer: ensure that literal characters get escaped\n    when they're at the beginning of a block, e.g.  `> \\- foo`.\n  * LaTeX renderer - better handling of internal links.\n    Now we render `[foo](#bar)` as `\\protect\\hyperlink{bar}{foo}`.\n  * Check for NULL pointer in _scan_at (#81).\n  * `Makefile.nmake`:  be more robust when cmake is missing.  Previously,\n    when cmake was missing, the build dir would be created anyway, and\n    subsequent attempts (even with cmake) would fail, because cmake would\n    not be run.  Depending on `build/CMakeFiles` is more robust -- this won't\n    be created unless cmake is run.  Partially addresses #85.\n  * Fixed DOCTYPE in xml output.\n  * commonmark.c: fix `size_t` to `int`.  This fixes an MSVC warning\n   \"conversion from 'size_t' to 'int', possible loss of data\" (Kevin Wojniak).\n  * Correct string length in `cmark_parse_document` example (Lee Jeffery).\n  * Fix non-ASCII end-of-line character check (andyuhnak).\n  * Fix \"declaration shadows a local variable\" (Kevin Wojniak).\n  * Install static library (jgm/CommonMark#381).\n  * Fix warnings about dropping const qualifier (Kevin Wojniak).\n  * Use full (unabbreviated) versions of constants (`CMARK_...`).\n  * Removed outdated targets from Makefile.\n  * Removed need for sudo in `make bench`.\n  * Improved benchmark.  Use longer test, since `time` has limited resolution.\n  * Removed `bench.h` and timing calls in `main.c`.\n  * Updated API docs; getters return empty strings if not set\n    rather than NULL, as previously documented.\n  * Added api_tests for custom nodes.\n  * Made roundtrip test part of the test suite run by cmake.\n  * Regenerate `scanners.c` using re2c 0.15.3.\n  * Adjusted scanner for link url.  This fixes a heap buffer overflow (#82).\n  * Added version number (1.0) to XML namespace.  We don't guarantee\n    stability in this until 1.0 is actually released, however.\n  * Removed obsolete `TIMER` macro.\n  * Make `LIB_INSTALL_DIR` configurable (Mathieu Bridon, #79).\n  * Removed out-of-date luajit wrapper.\n  * Use `input`, not `parser->curline` to determine last line length.\n  * Small optimizations in `_scan_at`.\n  * Replaced hard-coded 4 with `TAB_STOP`.\n  * Have `make format` reformat api tests as well.\n  * Added api tests for man, latex, commonmark, and xml renderers (#51).\n  * render.c:  added `begin_content` field.  This is like `begin_line` except\n    that it doesn't trigger production of the prefix.  So it can be set\n    after an initial prefix (say `> `) is printed by the renderer, and\n    consulted in determining whether to escape content that has a special\n    meaning at the beginning of a line.  Used in the commonmark renderer.\n  * Python 3.5 compatibility: don't require HTMLParseError (Zhiming Wang).\n    HTMLParseError was removed in Python 3.5. Since it could never be thrown\n    in Python 3.5+, we simply define a placeholder when HTMLParseError\n    cannot be imported.\n  * Set `convert_charrefs=False` in `normalize.py` (#83).  This defeats the\n    new default as of python 3.5, and allows the script to work with python\n    3.5.\n\n[0.22.0]\n\n  * Removed `pre` from blocktags scanner. `pre` is handled separately\n    in rule 1 and needn't be handled in rule 6.\n  * Added `iframe` to list of blocktags, as per spec change.\n  * Fixed bug with `HRULE` after blank line. This previously caused cmark\n    to break out of a list, thinking it had two consecutive blanks.\n  * Check for empty string before trying to look at line ending.\n  * Make sure every line fed to `S_process_line` ends with `\\n` (#72).\n    So `S_process_line` sees only unix style line endings. Ultimately we\n    probably want a better solution, allowing the line ending style of\n    the input file to be preserved. This solution forces output with newlines.\n  * Improved `cmark_strbuf_normalize_whitespace` (#73). Now all characters\n    that satisfy `cmark_isspace` are recognized as whitespace. Previously\n    `\\r` and `\\t` (and others) weren't included.\n  * Treat line ending with EOF as ending with newline (#71).\n  * Fixed `--hardbreaks` with `\\r\\n` line breaks (#68).\n  * Disallow list item starting with multiple blank lines (jgm/CommonMark#332).\n  * Allow tabs before closing `#`s in ATX header\n  * Removed `cmark_strbuf_printf` and `cmark_strbuf_vprintf`.\n    These are no longer needed, and cause complications for MSVC.\n    Also removed `HAVE_VA_COPY` and `HAVE_C99_SNPRINTF` feature tests.\n  * Added option to disable tests (Kevin Wojniak).\n  * Added `CMARK_INLINE` macro.\n  * Removed need to disable MSVC warnings 4267, 4244, 4800\n    (Kevin Wojniak).\n  * Fixed MSVC inline errors when cmark is included in sources that\n    don't have the same set of disabled warnings (Kevin Wojniak).\n  * Fix `FileNotFoundError` errors on tests when cmark is built from\n    another project via `add_subdirectory()` (Kevin Wojniak).\n  * Prefix `utf8proc` functions to avoid conflict with existing library\n    (Kevin Wojniak).\n  * Avoid name clash between Windows `.pdb` files (Nick Wellnhofer).\n  * Improved `smart_punct.txt` (see jgm/commonmark.js#61).\n  * Set `POSITION_INDEPENDENT_CODE` `ON` for static library (see #39).\n  * `make bench`: allow overriding `BENCHFILE`. Previously if you did\n    this, it would clopper `BENCHFILE` with the default bench file.\n  * `make bench`: Use -10 priority with renice.\n  * Improved `make_autolink`. Ensures that title is chunk with empty\n    string rather than NULL, as with other links.\n  * Added `clang-check` target.\n  * Travis: split `roundtrip_test` and `leakcheck` (OGINO Masanori).\n  * Use clang-format, llvm style, for formatting. Reformatted all source files.\n    Added `format` target to Makefile. Removed `astyle` target.\n    Updated `.editorconfig`.\n\n[0.21.0]\n\n  * Updated to version 0.21 of spec.\n  * Added latex renderer (#31). New exported function in API:\n    `cmark_render_latex`. New source file: `src/latex.hs`.\n  * Updates for new HTML block spec. Removed old `html_block_tag` scanner.\n    Added new `html_block_start` and `html_block_start_7`, as well\n    as `html_block_end_n` for n = 1-5. Rewrote block parser for new HTML\n    block spec.\n  * We no longer preprocess tabs to spaces before parsing.\n    Instead, we keep track of both the byte offset and\n    the (virtual) column as we parse block starts.\n    This allows us to handle tabs without converting\n    to spaces first.  Tabs are left as tabs in the output, as\n    per the revised spec.\n  * Removed utf8 validation by default.  We now replace null characters\n    in the line splitting code.\n  * Added `CMARK_OPT_VALIDATE_UTF8` option and command-line option\n    `--validate-utf8`.  This option causes cmark to check for valid\n    UTF-8, replacing invalid sequences with the replacement\n    character, U+FFFD.  Previously this was done by default in\n    connection with tab expansion, but we no longer do it by\n    default with the new tab treatment.  (Many applications will\n    know that the input is valid UTF-8, so validation will not\n    be necessary.)\n  * Added `CMARK_OPT_SAFE` option and `--safe` command-line flag.\n    + Added `CMARK_OPT_SAFE`.  This option disables rendering of raw HTML\n      and potentially dangerous links.\n    + Added `--safe` option in command-line program.\n    + Updated `cmark.3` man page.\n    + Added `scan_dangerous_url` to scanners.\n    + In HTML, suppress rendering of raw HTML and potentially dangerous\n      links if `CMARK_OPT_SAFE`.  Dangerous URLs are those that begin\n      with `javascript:`, `vbscript:`, `file:`, or `data:` (except for\n      `image/png`, `image/gif`, `image/jpeg`, or `image/webp` mime types).\n    + Added `api_test` for `OPT_CMARK_SAFE`.\n    + Rewrote `README.md` on security.\n  * Limit ordered list start to 9 digits, per spec.\n  * Added width parameter to `render_man` (API change).\n  * Extracted common renderer code from latex, man, and commonmark\n    renderers into a separate module, `renderer.[ch]` (#63).  To write a\n    renderer now, you only need to write a character escaping function\n    and a node rendering function.  You pass these to `cmark_render`\n    and it handles all the plumbing (including line wrapping) for you.\n    So far this is an internal module, but we might consider adding\n    it to the API in the future.\n  * commonmark writer:  correctly handle email autolinks.\n  * commonmark writer:  escape `!`.\n  * Fixed soft breaks in commonmark renderer.\n  * Fixed scanner for link url. re2c returns the longest match, so we\n    were getting bad results with `[link](foo\\(and\\(bar\\)\\))`\n    which it would parse as containing a bare `\\` followed by\n    an in-parens chunk ending with the final paren.\n  * Allow non-initial hyphens in html tag names. This allows for\n    custom tags, see jgm/CommonMark#239.\n  * Updated `test/smart_punct.txt`.\n  * Implemented new treatment of hyphens with `--smart`, converting\n    sequences of hyphens to sequences of em and en dashes that contain no\n    hyphens.\n  * HTML renderer:  properly split info on first space char (see\n    jgm/commonmark.js#54).\n  * Changed version variables to functions (#60, Andrius Bentkus).\n    This is easier to access using ffi, since some languages, like C#\n    like to use only function interfaces for accessing library\n    functionality.\n  * `process_emphasis`: Fixed setting lower bound to potential openers.\n    Renamed `potential_openers` -> `openers_bottom`.\n    Renamed `start_delim` -> `stack_bottom`.\n  * Added case for #59 to `pathological_test.py`.\n  * Fixed emphasis/link parsing bug (#59).\n  * Fixed off-by-one error in line splitting routine.\n    This caused certain NULLs not to be replaced.\n  * Don't rtrim in `subject_from_buffer`.  This gives bad results in\n    parsing reference links, where we might have trailing blanks\n    (`finalize` removes the bytes parsed as a reference definition;\n    before this change, some blank bytes might remain on the line).\n    + Added `column` and `first_nonspace_column` fields to `parser`.\n    + Added utility function to advance the offset, computing\n      the virtual column too.  Note that we don't need to deal with\n      UTF-8 here at all.  Only ASCII occurs in block starts.\n    + Significant performance improvement due to the fact that\n      we're not doing UTF-8 validation.\n  * Fixed entity lookup table.  The old one had many errors.\n    The new one is derived from the list in the npm entities package.\n    Since the sequences can now be longer (multi-code-point), we\n    have bumped the length limit from 4 to 8, which also affects\n    `houdini_html_u.c`.  An example of the kind of error that was fixed:\n    `&ngE;` should be rendered as \"‚âßÃ∏\" (U+02267 U+00338), but it was\n    being rendered as \"‚âß\" (which is the same as `&gE;`).\n  * Replace gperf-based entity lookup with binary tree lookup.\n    The primary advantage is a big reduction in the size of\n    the compiled library and executable (> 100K).\n    There should be no measurable performance difference in\n    normal documents.  I detected only a slight performance\n    hit in a file containing 1,000,000 entities.\n    + Removed `src/html_unescape.gperf` and `src/html_unescape.h`.\n    + Added `src/entities.h` (generated by `tools/make_entities_h.py`).\n    + Added binary tree lookup functions to `houdini_html_u.c`, and\n      use the data in `src/entities.h`.\n    * Renamed `entities.h` -> `entities.inc`, and\n      `tools/make_entities_h.py` -> `tools/make_entitis_inc.py`.\n  * Fixed cases like\n    ```\n    [ref]: url\n    \"title\" ok\n    ```\n    Here we should parse the first line as a reference.\n  * `inlines.c`:  Added utility functions to skip spaces and line endings.\n  * Fixed backslashes in link destinations that are not part of escapes\n    (jgm/commonmark#45).\n  * `process_line`: Removed \"add newline if line doesn't have one.\"\n    This isn't actually needed.\n  * Small logic fixes and a simplification in `process_emphasis`.\n  * Added more pathological tests:\n    + Many link closers with no openers.\n    + Many link openers with no closers.\n    + Many emph openers with no closers.\n    + Many closers with no openers.\n    + `\"*a_ \" * 20000`.\n  * Fixed `process_emphasis` to handle new pathological cases.\n    Now we have an array of pointers (`potential_openers`),\n    keyed to the delim char.  When we've failed to match a potential opener\n    prior to point X in the delimiter stack, we reset `potential_openers`\n    for that opener type to X, and thus avoid having to look again through\n    all the openers we've already rejected.\n  * `process_inlines`:  remove closers from delim stack when possible.\n    When they have no matching openers and cannot be openers themselves,\n    we can safely remove them.  This helps with a performance case:\n    `\"a_ \" * 20000` (jgm/commonmark.js#43).\n  * Roll utf8proc_charlen into utf8proc_valid (Nick Wellnhofer).\n    Speeds up \"make bench\" by another percent.\n  * `spec_tests.py`: allow `‚Üí` for tab in HTML examples.\n  * `normalize.py`:  don't collapse whitespace in pre contexts.\n  * Use utf-8 aware re2c.\n  * Makefile afl target:  removed `-m none`, added `CMARK_OPTS`.\n  * README: added `make afl` instructions.\n  * Limit generated generated `cmark.3` to 72 character line width.\n  * Travis: switched to containerized build system.\n  * Removed `debug.h`. (It uses GNU extensions, and we don't need it anyway.)\n  * Removed sundown from benchmarks, because the reading was anomalous.\n    sundown had an arbitrary 16MB limit on buffers, and the benchmark\n    input exceeded that.  So who knows what we were actually testing?\n    Added hoedown, sundown's successor, which is a better comparison.\n\n[0.20.0]\n\n  * Fixed bug in list item parsing when items indented >= 4 spaces (#52).\n  * Don't allow link labels with no non-whitespace characters\n    (jgm/CommonMark#322).\n  * Fixed multiple issues with numeric entities (#33, Nick Wellnhofer).\n  * Support CR and CRLF line endings (Ben Trask).\n  * Added test for different line endings to `api_test`.\n  * Allow NULL value in string setters (Nick Wellnhofer).  (NULL\n    produces a 0-length string value.)  Internally, URL and\n    title are now stored as `cmark_chunk` rather than `char *`.\n  * Fixed memory leak in `cmark_consolidate_text_nodes` (#32).\n  * Fixed `is_autolink` in the CommonMark renderer (#50).  Previously *any*\n    link with an absolute URL was treated as an autolink.\n  * Cope with broken `snprintf` on Windows (Nick Wellnhofer).  On Windows,\n    `snprintf` returns -1 if the output was truncated. Fall back to\n    Windows-specific `_scprintf`.\n  * Switched length parameter on `cmark_markdown_to_html`,\n    `cmark_parser_feed`, and `cmark_parse_document` from `int`\n    to `size_t` (#53, Nick Wellnhofer).\n  * Use a custom type `bufsize_t` for all string sizes and indices.\n    This allows to switch to 64-bit string buffers by changing a single\n    typedef and a macro definition (Nick Wellnhofer).\n  * Hardened the `strbuf` code, checking for integer overflows and\n    adding range checks (Nick Wellnhofer).\n  * Removed unused function `cmark_strbuf_attach` (Nick Wellnhofer).\n  * Fixed all implicit 64-bit to 32-bit conversions that\n    `-Wshorten-64-to-32` warns about (Nick Wellnhofer).\n  * Added helper function `cmark_strbuf_safe_strlen` that converts\n    from `size_t` to `bufsize_t` and throws an error in case of\n    an overflow (Nick Wellnhofer).\n  * Abort on `strbuf` out of memory errors (Nick Wellnhofer).\n    Previously such errors were not being trapped.  This involves\n    some internal changes to the `buffer` library that do not affect\n    the API.\n  * Factored out `S_find_first_nonspace` in `S_proces_line`.\n    Added fields `offset`, `first_nonspace`, `indent`, and `blank`\n    to `cmark_parser` struct.  This just removes some repetition.\n  * Added Racket Racket (5.3+) wrapper (Eli Barzilay).\n  * Removed `-pg` from Debug build flags (#47).\n  * Added Ubsan build target, to check for undefined behavior.\n  * Improved `make leakcheck`.  We now return an error status if anything\n    in the loop fails.  We now check `--smart` and `--normalize` options.\n  * Removed `wrapper3.py`, made `wrapper.py` work with python 2 and 3.\n    Also improved the wrapper to work with Windows, and to use smart\n    punctuation (as an example).\n  * In `wrapper.rb`, added argument for options.\n  * Revised luajit wrapper.\n  * Added build status badges to README.md.\n  * Added links to go, perl, ruby, R, and Haskell bindings to README.md.\n\n[0.19.0]\n\n  * Fixed `_` emphasis parsing to conform to spec (jgm/CommonMark#317).\n  * Updated `spec.txt`.\n  * Compile static library with `-DCMARK_STATIC_DEFINE` (Nick Wellnhofer).\n  * Suppress warnings about Windows runtime library files (Nick Wellnhofer).\n    Visual Studio Express editions do not include the redistributable files.\n    Set `CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_NO_WARNINGS` to suppress warnings.\n  * Added appyeyor: Windows continuous integration (`appveyor.yml`).\n  * Use `os.path.join` in `test/cmark.py` for proper cross-platform paths.\n  * Fixed `Makefile.nmake`.\n  * Improved `make afl`:  added `test/afl_dictionary`, increased timeout\n    for hangs.\n  * Improved README with a description of the library's strengths.\n  * Pass-through Unicode non-characters (Nick Wellnhofer).\n    Despite their name, Unicode non-characters are valid code points. They\n    should be passed through by a library like libcmark.\n  * Check return status of `utf8proc_iterate` (#27).\n\n[0.18.3]\n\n  * Include patch level in soname (Nick Wellnhofer). Minor version is\n    tied to spec version, so this allows breaking the ABI between spec\n    releases.\n  * Install compiler-provided system runtime libraries (Changjiang Yang).\n  * Use `strbuf_printf` instead of `snprintf`. `snprintf` is not\n    available on some platforms (Visual Studio 2013 and earlier).\n  * Fixed memory access bug: \"invalid read of size 1\" on input `[link](<>)`.\n\n[0.18.2]\n\n  * Added commonmark renderer: `cmark_render_commonmark`. In addition\n    to options, this takes a `width` parameter.  A value of 0 disables\n    wrapping; a positive value wraps the document to the specified\n    width.  Note that width is automatically set to 0 if the\n    `CMARK_OPT_HARDBREAKS` option is set.\n  * The `cmark` executable now allows `-t commonmark` for output as\n    CommonMark.  A `--width` option has been added to specify wrapping\n    width.\n  * Added `roundtrip_test` Makefile target.  This runs all the spec\n    through the commonmark renderer, and then through the commonmark\n    parser, and compares normalized HTML to the test.  All tests pass\n    with the current parser and renderer, giving us some confidence that\n    the commonmark renderer is sufficiently robust.  Eventually this\n    should be pythonized and put in the cmake test routine.\n  * Removed an unnecessary check in `blocks.c`.  By the time we check\n    for a list start, we've already checked for a horizontal rule, so\n    we don't need to repeat that check here.  Thanks to Robin Stocker for\n    pointing out a similar redundancy in commonmark.js.\n  * Fixed bug in `cmark_strbuf_unescape` (`buffer.c`).  The old function\n    gave incorrect results on input like `\\\\*`, since the next backslash\n    would be treated as escaping the `*` instead of being escaped itself.\n  * `scanners.re`:  added `_scan_scheme`, `scan_scheme`, used in the\n    commonmark renderer.\n  * Check for `CMAKE_C_COMPILER` (not `CC_COMPILER`) when setting C flags.\n  * Update code examples in documentation, adding new parser option\n    argument, and using `CMARK_OPT_DEFAULT` (Nick Wellnhofer).\n  * Added options parameter to `cmark_markdown_to_html`.\n  * Removed obsolete reference to `CMARK_NODE_LINK_LABEL`.\n  * `make leakcheck` now checks all output formats.\n  * `test/cmark.py`:  set default options for `markdown_to_html`.\n  * Warn about buggy re2c versions (Nick Wellnhofer).\n\n[0.18.1]\n\n  * Build static version of library in default build (#11).\n  * `cmark.h`:  Add missing argument to `cmark_parser_new` (#12).\n\n[0.18]\n\n  * Switch to 2-clause BSD license, with agreement of contributors.\n  * Added Profile build type, `make prof` target.\n  * Fixed autolink scanner to conform to the spec. Backslash escapes\n    not allowed in autolinks.\n  * Don't rely on strnlen being available (Nick Wellnhofer).\n  * Updated scanners for new whitespace definition.\n  * Added `CMARK_OPT_SMART` and `--smart` option, `smart.c`, `smart.h`.\n  * Added test for `--smart` option.\n  * Fixed segfault with --normalize (closes #7).\n  * Moved normalization step from XML renderer to `cmark_parser_finish`.\n  * Added options parameter to `cmark_parse_document`, `cmark_parse_file`.\n  * Fixed man renderer's escaping for unicode characters.\n  * Don't require python3 to make `cmark.3` man page.\n  * Use ASCII escapes for punctuation characters for portability.\n  * Made `options` an int rather than a long, for consistency.\n  * Packed `cmark_node` struct to fit into 128 bytes.\n    This gives a small performance boost and lowers memory usage.\n  * Repacked `delimiter` struct to avoid hole.\n  * Fixed use-after-free bug, which arose when a paragraph containing\n    only reference links and blank space was finalized (#9).\n    Avoid using `parser->current` in the loop that creates new\n    blocks, since `finalize` in `add_child` may have removed\n    the current parser (if it contains only reference definitions).\n    This isn't a great solution; in the long run we need to rewrite\n    to make the logic clearer and to make it harder to make\n    mistakes like this one.\n  * Added 'Asan' build type. `make asan` will link against ASan; the\n    resulting executable will do checks for memory access issues.\n    Thanks @JordanMilne for the suggestion.\n  * Add Makefile target to fuzz with AFL (Nick Wellnhofer)\n    The variable `$AFL_PATH` must point to the directory containing the AFL\n    binaries. It can be set as an environment variable or passed to make on\n    the command line.\n\n[0.17]\n\n  * Stripped out all JavaScript related code and documentation, moving\n    it to a separate repository (<https://github.com/jgm/commonmark.js>).\n  * Improved Makefile targets, so that `cmake` is run again only when\n    necessary (Nick Wellnhofer).\n  * Added `INSTALL_PREFIX` to the Makefile, allowing installation to a\n    location other than `/usr/local` without invoking `cmake`\n    manually (Nick Wellnhofer).\n  * `make test` now guarantees that the project will\n    be rebuilt before tests are run (Nick Wellnhofer).\n  * Prohibited overriding of some Makefile variables (Nick Wellnhofer).\n  * Provide version number and string, both as macros\n    (`CMARK_VERSION`, `CMARK_VERSION_STRING`) and as symbols\n    (`cmark_version`, `cmark_version_string`) (Nick Wellnhofer).  All of\n    these come from `cmark_version.h`, which is constructed from a\n    template `cmark_version.h.in` and data in `CMakeLists.txt`.\n  * Avoid calling `free` on null pointer.\n  * Added an accessor for an iterator's root node (`cmark_iter_get_root`).\n  * Added user data field for nodes (Nick Wellnhofer).  This is\n    intended mainly for use in bindings for dynamic languages, where\n    it could store a pointer to a target language object (#287).  But\n    it can be used for anything.\n  * Man renderer:  properly escape multiline strings.\n  * Added assertion to raise error if finalize is called on a closed block.\n  * Implemented the new spec rule for emphasis and strong emphasis with `_`.\n  * Moved the check for fence-close with the other checks for end-of-block.\n  * Fixed a bug with loose list detection with items containings\n    fenced code blocks (#285).\n  * Removed recursive algorithm in `ends_with_blank_line` (#286).\n  * Minor code reformatting: renamed parameters.\n\n[0.16]\n\n  * Added xml renderer (XML representation of the CommonMark AST,\n    which is described in `CommonMark.dtd`).\n  * Reduced size of gperf entity table (Nick Wellnhofer).\n  * Reworked iterators to allow deletion of nodes during iteration\n    (Nick Wellnhofer).\n  * Optimized `S_is_leaf`.\n  * Added `cmark_iter_reset` to iterator API.\n  * Added `cmark_consolidate_text_nodes` to API to combine adjacent\n    text nodes.\n  * Added `CMARK_OPT_NORMALIZE` to options (this combines adjacent\n    text nodes).\n  * Added `--normalize` option to command-line program.\n  * Improved regex for HTML comments in inline parsing.\n  * Python is no longer required for a basic build from the\n    repository.\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "nmake.bat",
          "type": "blob",
          "size": 0.0400390625,
          "content": "@nmake.exe /nologo /f Makefile.nmake %*\r\n"
        },
        {
          "name": "shell.nix",
          "type": "blob",
          "size": 0.1328125,
          "content": "with (import <nixpkgs> {});\nmkShell {\n  buildInputs = [\n    clangStdenv\n    cmake\n    gdb\n    python3\n    perl\n    re2c\n    curl\n  ];\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "toolchain-mingw32.cmake",
          "type": "blob",
          "size": 0.6474609375,
          "content": "# the name of the target operating system\nSET(CMAKE_SYSTEM_NAME Windows)\n\n# which compilers to use for C and C++\nSET(CMAKE_C_COMPILER i686-w64-mingw32-gcc)\nSET(CMAKE_CXX_COMPILER i686-w64-mingw32-g++)\nSET(CMAKE_RC_COMPILER i686-w64-mingw32-windres)\n\n# here is the target environment located\nSET(CMAKE_FIND_ROOT_PATH /usr/i686-w64-mingw32/ \"${CMAKE_SOURCE_DIR}/windows\")\n\n# adjust the default behaviour of the FIND_XXX() commands:\n# search headers and libraries in the target environment, search\n# programs in the host environment\nset(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\nset(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\nset(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "why-cmark-and-not-x.md",
          "type": "blob",
          "size": 1.552734375,
          "content": "Why use `cmark` and not X?\n==========================\n\n`hoedown`\n---------\n\n`hoedown` (which derives from `sundown`) is slightly faster\nthan `cmark` in our benchmarks (0.21s vs. 0.29s).  But both\nare much faster than any other available implementations.\n\n`hoedown` boasts of including \"protection against all possible\nDOS attacks,\" but there are some chinks in the armor:\n\n    % time python -c 'print((\"[\" * 50000) + \"a\" + (\"]\" * 50000))' | cmark\n    ...\n    user 0m0.073s\n    % time python -c 'print((\"[\" * 50000) + \"a\" + (\"]\" * 50000))' | hoedown\n    ...\n    0m17.84s\n\n`hoedown` has many parsing bugs.  Here is a selection (as of\nv3.0.3):\n\n    % hoedown\n    - one\n      - two\n        1. three\n    ^D\n    <ul>\n    <li>one\n\n    <ul>\n    <li>two</li>\n    <li>three</li>\n    </ul></li>\n    </ul>\n\n\n    % hoedown\n    ## hi\\###\n    ^D\n    <h2>hi\\</h2>\n\n\n    % hoedown\n    [ŒëŒìŒ©]: /œÜŒøœÖ\n\n    [Œ±Œ≥œâ]\n    ^D\n    <p>[Œ±Œ≥œâ]</p>\n\n\n    % hoedown\n    ```\n    [foo]: /url\n    ```\n\n    [foo]\n    ^D\n    <p>```</p>\n\n    <p>```</p>\n\n    <p><a href=\"/url\">foo</a></p>\n\n\n    % hoedown\n    [foo](url \"ti\\*tle\")\n    ^D\n    <p><a href=\"url\" title=\"ti\\*tle\">foo</a></p>\n\n\n    % ./hoedown\n    - one\n     - two\n      - three\n       - four\n    ^D\n    <ul>\n    <li>one\n\n    <ul>\n    <li>two</li>\n    <li>three</li>\n    <li>four</li>\n    </ul></li>\n    </ul>\n\n\n`discount`\n----------\n\n`cmark` is about six times faster.\n\n`kramdown`\n----------\n\n`cmark` is about a hundred times faster.\n\n`kramdown` also gets tied in knots by pathological input like\n\n    python -c 'print((\"[\" * 50000) + \"a\" + (\"]\" * 50000))'\n\n\n"
        },
        {
          "name": "wrappers",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}