{
  "metadata": {
    "timestamp": 1736709760041,
    "page": 189,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "krakjoe/pthreads",
      "stars": 3466,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0087890625,
          "content": ".project\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.3583984375,
          "content": "language: php\nphp:\n  - 7.2\n  - 7.3\n  - nightly\n\nmatrix:\n  allow_failures:\n    - php: nightly\n\nscript:\n  - phpize\n  - ./configure\n  - make\n  - REPORT_EXIT_STATUS=1 TEST_PHP_ARGS=\"-q --show-diff\" make test\n\nnotifications:\n  webhooks:\n    urls:\n      - https://webhooks.gitter.im/e/428fac7bd9f4b867c347\n    on_success: always\n    on_failure: always\n    on_start: always\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 3.1005859375,
          "content": "-------------------------------------------------------------------- \r\n                  The PHP License, version 3.01\r\nCopyright (c) 2012-2014 Joe Watkins. All rights reserved.\r\n-------------------------------------------------------------------- \r\n\r\nRedistribution and use in source and binary forms, with or without\r\nmodification, is permitted provided that the following conditions\r\nare met:\r\n\r\n  1. Redistributions of source code must retain the above copyright\r\n     notice, this list of conditions and the following disclaimer.\r\n \r\n  2. Redistributions in binary form must reproduce the above copyright\r\n     notice, this list of conditions and the following disclaimer in\r\n     the documentation and/or other materials provided with the\r\n     distribution.\r\n \r\n  3. The name \"PHP\" must not be used to endorse or promote products\r\n     derived from this software without prior written permission. For\r\n     written permission, please contact group@php.net.\r\n  \r\n  4. Products derived from this software may not be called \"PHP\", nor\r\n     may \"PHP\" appear in their name, without prior written permission\r\n     from group@php.net.  You may indicate that your software works in\r\n     conjunction with PHP by saying \"Foo for PHP\" instead of calling\r\n     it \"PHP Foo\" or \"phpfoo\"\r\n \r\n  5. The PHP Group may publish revised and/or new versions of the\r\n     license from time to time. Each version will be given a\r\n     distinguishing version number.\r\n     Once covered code has been published under a particular version\r\n     of the license, you may always continue to use it under the terms\r\n     of that version. You may also choose to use such covered code\r\n     under the terms of any subsequent version of the license\r\n     published by the PHP Group. No one other than the PHP Group has\r\n     the right to modify the terms applicable to covered code created\r\n     under this License.\r\n\r\n  6. Redistributions of any form whatsoever must retain the following\r\n     acknowledgment:\r\n     \"This product includes PHP software, freely available from\r\n     <http://www.php.net/software/>\".\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE PHP DEVELOPMENT TEAM ``AS IS'' AND \r\nANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\r\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A \r\nPARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE PHP\r\nDEVELOPMENT TEAM OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, \r\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES \r\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR \r\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\r\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\r\nOF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\n-------------------------------------------------------------------- \r\n\r\nThe PHP Group can be contacted via Email at group@php.net.\r\n\r\nFor more information on the PHP Group and the PHP project, \r\nplease see <http://www.php.net>.\r\n\r\nPHP includes the Zend Engine, freely available at\r\n<http://www.zend.com>.\r\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.6171875,
          "content": "# Threading for PHP - Share Nothing, Do Everything :)\n\n[![Build Status](https://travis-ci.org/krakjoe/pthreads.svg?branch=master)](https://travis-ci.org/krakjoe/pthreads)\n[![Build status](https://ci.appveyor.com/api/projects/status/5pyrhbrxcgenkpbk/branch/master?svg=true)](https://ci.appveyor.com/project/krakjoe/pthreads/branch/master)\n[![Average time to resolve an issue](http://isitmaintained.com/badge/resolution/krakjoe/pthreads.svg)](http://isitmaintained.com/project/krakjoe/pthreads \"Average time to resolve an issue\")\n[![Percentage of issues still open](http://isitmaintained.com/badge/open/krakjoe/pthreads.svg)](http://isitmaintained.com/project/krakjoe/pthreads \"Percentage of issues still open\")\n[![Join the chat at https://gitter.im/krakjoe/pthreads](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/krakjoe/pthreads?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nThis project provides multi-threading that is compatible with PHP based on Posix Threads.\n\n## Highlights\n\n* An easy to use, quick to learn OO Threading API for PHP 7.2+\n* Execute any and all predefined and user declared methods and functions, including closures.\n* Ready made synchronization included\n* A world of possibilities ...\n\n## Technical Features\n\n* High Level Threading\n* Synchronization\n* Worker Threads\n* Thread Pools\n* Complete Support for OO - ie. traits, interfaces, inheritance etc\n* Full read/write/execute support for Threaded objects\n\n## Requirements\n\n* PHP 7.2+\n* ZTS Enabled ( Thread Safety )\n* Posix Threads Implementation\n\nTesting has been carried out on x86, x64 and ARM, in general you just need a compiler and pthread.h\n\n## PHP7\n\nFor PHP7, pthreads has been almost completely rewritten to be more efficient, easier to use and more robust. I will give a brief changelog here:\n\nThe API for v3 has changed, the following things have been removed:\n\n * ```Mutex```, ```Cond```, and ```Stackable```\n * ```Threaded::lock``` and ```Threaded::unlock```\n * ```Threaded::isWaiting```\n * ```Threaded::from```\n * ```Thread::kill``` (there be dragons)\n * ```Thread::detach```\n * ```Worker::isWorking```\n * ```Threaded::getTerminationInfo``` (this was unsafe, a better, safe impl can be done in userland)\n * Special behaviour of ```protected``` and ```private``` methods on ```Threaded``` objects\n\nThe following things have significant changes:\n \n * The method by which ```Threaded``` objects are stored as member properties of other ```Threaded``` objects.\n * The structure used by a ```Worker``` for stack (```Collectable``` objects to execute inserted by ```Worker::stack```).\n * The ```Pool::collect``` mechanism was moved from ```Pool``` to ```Worker``` for a more robust ```Worker``` and simpler ```Pool``` inheritance.\n * The method by which iteration occurs on ```Threaded``` objects, such that it uses memory more efficiently.\n * ```Threaded::synchronized``` provides true synchronization (state and properties lock).\n * ```Worker``` objects no longer require that you retain a reference to ```Collectable``` objects on the stack.\n * Unified monitor (cond/mutex/state) for ```Threaded``` objects\n * ```Threaded``` members of ```Threaded``` objects are immutable\n * ```Volatile``` objects, exempt from immutability\n * ```array``` coerced to ```Volatile``` when set as member of ```Threaded```\n * ```Collectable``` converted to interface, to make ```extends Volatile implements Collectable``` possible.\n\nSome blog posts explaining these changes:\n\n * [A Letter from the Future](http://blog.krakjoe.ninja/2015/08/a-letter-from-future.html)\n * [Addendum to A Letter from the Future](http://blog.krakjoe.ninja/2015/09/addendum-letter-from-future.html)\n\n### Supported PHP Versions\n\npthreads v3 requires PHP7 or above. PHP5 needs to use pthreads v2 which can be found in the PHP5 branch.\n\nNote that only PHP 7.2+ is now supported (requiring the current master branch of pthreads). This is due to safety issues with ZTS mode on PHP 7.0 and 7.1.\n\n##### Unix-based Building from Source\n\nBuilding pthreads from source is quite simple on Unix-based OSs. The instructions are as follows:\n * Clone this repository and checkout the release to use (or master for the latest updates)\n * `cd pthreads`\n * `phpize`\n * `./configure`\n * `make`\n * `make install` (may need sudo)\n * Update your php.ini file to load the `pthreads.so` file using the `extension` directive\n\n### Windows Support\n\nYes !! Windows support is offered thanks to the pthread-w32 library.\n\nReleases for Windows can be found: http://windows.php.net/downloads/pecl/releases/pthreads/\n\n##### Simple Windows Installation\n\n* Add `pthreadVC2.dll` (included with the Windows releases) to the same directory as `php.exe` eg. `C:\\xampp\\php`\n* Add `php_pthreads.dll` to PHP extension folder eg. `C:\\xampp\\php\\ext`\n\n### Mac OSX Support\n\nYes !! Users of Mac will be glad to hear that pthreads is now tested on OSX as part of the development process.\n\n### Hello World\n\nAs is customary in our line of work:\n\n```php\n<?php\n$thread = new class extends Thread {\n\tpublic function run() {\n\t\techo \"Hello World\\n\";\n\t}\n};\n\n$thread->start() && $thread->join();\n?>\n```\n\n### Are you serious ?\n\nAbsolutely, this is not a hack, we _don't_ use forking or any other such nonsense, what you create are honest to goodness posix threads that are completely compatible with PHP and safe ... this is true multi-threading :)\n\n### SAPI Support\n\npthreads v3 is restricted to operating in CLI only: I have spent many years trying to explain that threads in a web server just don't make sense, after 1,111 commits to pthreads I have realised that, my advice is going unheeded.\n\nSo I'm promoting the advice to hard and fast fact: *you can't use pthreads safely and sensibly anywhere but CLI.*\n\nThanks for listening ;)\n\n### Documentation \n\nDocumentation can be found in the PHP manual: http://docs.php.net/manual/en/book.pthreads.php, and some examples can be found in the \"examples\" folder in the master repository.\n\nFurther insights and occasional announcements can be read at the http://pthreads.org site where pthreads is developed and tested in the real world.\n\nHere are some links to articles I have prepared for users: everybody should read them before they do anything else:\n\n - https://gist.github.com/krakjoe/6437782\n - https://gist.github.com/krakjoe/9384409\n\nIf you have had the time to put any cool demo's together and would like them showcased on pthreads.org please get in touch.\n\n### Polyfill\n\nIt's possible to write code that optionally takes advantage of parallelism where the environment has ```pthreads``` loaded.\n\nThis is made possible by [pthreads-polyfill](http://github.com/krakjoe/pthreads-polyfill) which can be found on [packagist](https://packagist.org/packages/krakjoe/pthreads-polyfill).\n\nHaving required the appropriate package in your composer.json, the following code is executable everywhere:\n\n```php\n<?php\nrequire_once(\"vendor/autoload.php\");\n\nif (extension_loaded(\"pthreads\")) {\n\t    echo \"Using pthreads\\n\";\n} else  echo \"Using polyfill\\n\";\n\n$pool = new Pool(4);\n\n$pool->submit(new class extends Threaded {\n        public function run() {\n                echo \"Hello World\\n\";\n        }\n});\n\nwhile ($pool->collect()) continue;\n\n$pool->shutdown();\n?>\n```\n\nSome guidance on getting started, and detail regarding how the polyfill came to exist can be found [here](http://blog.krakjoe.ninja/2015/09/what-polly-really-wants.html).\n\n### Feedback\n\nPlease submit issues, and send your feedback and suggestions as often as you have them.\n\n### Reporting Bugs\n\nIf you believe you have found a bug in pthreads, please open an issue: Include in your report *minimal, executable, reproducing code*.\n\nMinimal:     reduce your problem to the smallest amount of code possible; This helps with hunting the bug, but also it helps with integration and regression testing once the bug is fixed.\n\nExecutable:  include all the information required to execute the example code, code snippets are not helpful.\n\nReproducing: some bugs don't show themselves on every execution, that's fine, mention that in the report and give an idea of how often you encounter the bug.\n\n__It is impossible to help without reproducing code, bugs that are opened without reproducing code will be closed.__\n\nPlease include version and operating system information in your report.\n\n*Please do not post requests to help with code on github; I spend a lot of time on Stackoverflow, a much better place for asking questions.*\n\nHave patience; I am one human being.\n\n### Developers\n\nThere is no defined API for you to create your own threads in your extensions, this project aims to provide Userland threading, it does not aim to provide a threading API for extension developers. I suggest you allow users to decide what they thread and keep your own extension focused on your functionality.\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 2.650390625,
          "content": "version: '{branch}.{build}'\r\nbranches:\r\n  only:\r\n  - master\r\n\r\nimage: Visual Studio 2017\r\n\r\nenvironment:\r\n  PHP_SDK_BINARY_TOOLS_VER: php-sdk-2.1.1\r\n\r\n  matrix:\r\n    - ARCH: x86\r\n      PHP_VER: 7.2\r\n      VC_VER: vc15\r\n    - ARCH: x64\r\n      PHP_VER: 7.2\r\n      VC_VER: vc15\r\n    - ARCH: x86\r\n      PHP_VER: 7.3\r\n      VC_VER: vc15\r\n    - ARCH: x64\r\n      PHP_VER: 7.3\r\n      VC_VER: vc15\r\ninstall:\r\n- cmd: cinst wget\r\nbuild_script:\r\n- cmd: >-\r\n    \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\" %ARCH%\r\n\r\n    wget https://github.com/OSTC/php-sdk-binary-tools/archive/%PHP_SDK_BINARY_TOOLS_VER%.zip --no-check-certificate -q -O php-sdk-binary-tools-%PHP_SDK_BINARY_TOOLS_VER%.zip\r\n\r\n    7z x -y php-sdk-binary-tools-%PHP_SDK_BINARY_TOOLS_VER%.zip -oC:\\projects\r\n\r\n    move C:\\projects\\php-sdk-binary-tools-%PHP_SDK_BINARY_TOOLS_VER% C:\\projects\\php-sdk\r\n    \r\n    C:\\projects\\php-sdk\\bin\\phpsdk_setvars.bat\r\n\r\n    git clone https://github.com/php/php-src C:\\projects\\php-src -b PHP-%PHP_VER% --depth=1\r\n\r\n    mkdir C:\\projects\\php-src\\ext\\pthreads\r\n\r\n    xcopy C:\\projects\\pthreads C:\\projects\\php-src\\ext\\pthreads /s /e /y /q\r\n\r\n    phpsdk_deps -u -t %VC_VER% -b %PHP_VER% -a %ARCH% -f -d C:\\projects\\php-src\\deps\r\n\r\n    wget http://www.mirrorservice.org/sites/sources.redhat.com/pub/pthreads-win32/pthreads-w32-2-9-1-release.zip -q\r\n\r\n    7z x -y pthreads-w32-2-9-1-release.zip -oC:\\projects\\pthreads-w32\r\n\r\n    copy C:\\projects\\pthreads-w32\\Pre-built.2\\include\\pthread.h C:\\projects\\php-src\\deps\\include\\pthread.h\r\n\r\n    copy C:\\projects\\pthreads-w32\\Pre-built.2\\include\\sched.h C:\\projects\\php-src\\deps\\include\\sched.h\r\n\r\n    copy C:\\projects\\pthreads-w32\\Pre-built.2\\include\\semaphore.h C:\\projects\\php-src\\deps\\include\\semaphore.h\r\n\r\n    copy C:\\projects\\pthreads-w32\\Pre-built.2\\lib\\%ARCH%\\pthreadVC2.lib C:\\projects\\php-src\\deps\\lib\\pthreadVC2.lib\r\n\r\n    cd C:\\projects\\php-src\r\n\r\n    buildconf.bat\r\n\r\n    configure.bat --disable-all --enable-cli --enable-zts --with-pthreads=shared --with-prefix=C:\\projects\\pthreads\\bin --with-php-build=deps --enable-ipv6\r\n\r\n    nmake\r\n\r\n    nmake install\r\n\r\n    cd C:\\projects\\pthreads\\bin\r\n\r\n    copy C:\\projects\\pthreads-w32\\Pre-built.2\\dll\\%ARCH%\\pthreadVC2.dll C:\\projects\\pthreads\\bin\\pthreadVC2.dll\r\n\r\n    echo [PHP] > php.ini\r\n\r\n    echo extension_dir = \"ext\" >> php.ini\r\n\r\n    echo extension=php_pthreads.dll >> php.ini\r\n\r\n    set TEST_PHP_EXECUTABLE=%cd%\\php.exe\r\n\r\n    php -v\r\n\r\n    php -m\r\ntest_script:\r\n- cmd: >-\r\n    set REPORT_EXIT_STATUS=1\r\n\r\n    php.exe /projects/php-src/run-tests.php /projects/php-src/ext/pthreads -q --show-diff --offline\r\nartifacts:\r\n  - path: bin\r\n    name: master\r\n    type: zip\r\n"
        },
        {
          "name": "classes",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.m4",
          "type": "blob",
          "size": 1.349609375,
          "content": "PHP_ARG_ENABLE(pthreads, whether to enable pthreads,\n[  --enable-pthreads          Enable pthreads])\n\nPHP_ARG_WITH(pthreads-sanitize, whether to enable AddressSanitizer for pthreads,\n[  --with-pthreads-sanitize   Enable AddressSanitizer for pthreads], no, no)\n\nPHP_ARG_WITH(pthreads-dmalloc, whether to enable dmalloc for pthreads,\n[  --with-pthreads-dmalloc   Enable dmalloc for pthreads], no, no)\n\nif test \"$PHP_PTHREADS\" != \"no\"; then\n\tAC_MSG_CHECKING([for ZTS])   \n\tif test \"$PHP_THREAD_SAFETY\" != \"no\"; then\n\t\tAC_MSG_RESULT([ok])\n\telse\n\t\tAC_MSG_ERROR([pthreads requires ZTS, please re-compile PHP with ZTS enabled])\n\tfi\n\n\tAC_DEFINE(HAVE_PTHREADS, 1, [Whether you have pthreads support])\n\n\tif test \"$PHP_PTHREADS_SANITIZE\" != \"no\"; then\n\t\tEXTRA_LDFLAGS=\"-lasan\"\n\t\tEXTRA_CFLAGS=\"-fsanitize=address -fno-omit-frame-pointer\"\n\tfi\n\t\n\tif test \"$PHP_PTHREADS_DMALLOC\" != \"no\"; then\n\t\tEXTRA_LDFLAGS=\"$EXTRA_LDFLAGS -ldmalloc\"\n\t\tEXTRA_CFLAGS=\"$EXTRA_CFLAGS -DDMALLOC\"\n\tfi\n\n\tPHP_NEW_EXTENSION(pthreads, php_pthreads.c src/monitor.c src/stack.c src/globals.c src/prepare.c src/store.c src/resources.c src/handlers.c src/object.c src/socket.c, $ext_shared,, -DZEND_ENABLE_STATIC_TSRMLS_CACHE=1)\n\tPHP_ADD_BUILD_DIR($ext_builddir/src, 1)\n\tPHP_ADD_INCLUDE($ext_builddir)\n\tPHP_SUBST(PTHREADS_SHARED_LIBADD)\n    PHP_SUBST(EXTRA_LDFLAGS)\n    PHP_SUBST(EXTRA_CFLAGS)\n\tPHP_ADD_MAKEFILE_FRAGMENT\nfi\n"
        },
        {
          "name": "config.w32",
          "type": "blob",
          "size": 1.1962890625,
          "content": "var PTHREADS_EXT_NAME=\"pthreads\";\r\nvar PTHREADS_EXT_SRC=\"monitor.c stack.c globals.c prepare.c store.c resources.c handlers.c object.c socket.c\";\r\nvar PTHREADS_EXT_DIR=configure_module_dirname + \"/src\";\r\nvar PTHREADS_EXT_API=\"php_pthreads.c\";\r\nvar PTHREADS_EXT_FLAGS=\"/DZEND_ENABLE_STATIC_TSRMLS_CACHE=1 /I\" + configure_module_dirname;\r\nvar PTHREADS_EXT_DEP=\"pthreadVC2.lib\";\r\n/* --------------------------------------------------------------------- */\r\nARG_WITH(\"pthreads\", \"for pthreads support\", \"no\");\r\n\r\nif (PHP_PTHREADS != \"no\") {\r\n\tif(CHECK_HEADER_ADD_INCLUDE(\"pthread.h\", \"CFLAGS_PTHREADS\", PHP_PTHREADS + \";\" + configure_module_dirname) &&    \r\n\t\tCHECK_HEADER_ADD_INCLUDE(\"sched.h\", \"CFLAGS_PTHREADS\", PHP_PTHREADS + \";\" + configure_module_dirname) &&\r\n\t\tCHECK_LIB(PTHREADS_EXT_DEP, PTHREADS_EXT_NAME, PHP_PTHREADS) &&\r\n\t\tCHECK_LIB(\"ws2_32.lib\", PTHREADS_EXT_NAME, PHP_PTHREADS) &&\r\n\t\tCHECK_LIB(\"Iphlpapi.lib\", PTHREADS_EXT_NAME, PHP_PTHREADS)) {\r\n\t\tEXTENSION(PTHREADS_EXT_NAME, PTHREADS_EXT_API, PHP_PTHREADS_SHARED, PTHREADS_EXT_FLAGS);\r\n\t\tADD_SOURCES(\r\n\t\t\tPTHREADS_EXT_DIR,\r\n\t\t\tPTHREADS_EXT_SRC, \r\n\t\t\tPTHREADS_EXT_NAME\r\n\t\t);\r\n\t} else {\r\n\t\tWARNING(\"pthreads not enabled; libraries and headers not found\");\r\n\t}\r\n}\r\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.xml",
          "type": "blob",
          "size": 13.1455078125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<package packagerversion=\"1.9.4\" version=\"2.0\" xmlns=\"http://pear.php.net/dtd/package-2.0\" xmlns:tasks=\"http://pear.php.net/dtd/tasks-1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://pear.php.net/dtd/tasks-1.0 http://pear.php.net/dtd/tasks-1.0.xsd http://pear.php.net/dtd/package-2.0 http://pear.php.net/dtd/package-2.0.xsd\">\n <name>pthreads</name>\n <channel>pecl.php.net</channel>\n <summary>Threading API</summary>\n <description>A compatible Threading API for PHP</description>\n <lead>\n  <name>Joe Watkins</name>\n  <user>krakjoe</user>\n  <email>krakjoe@php.net</email>\n  <active>no</active>\n </lead>\n <developer>\n \t<name>Bastian Schneider</name>\n \t<user>sirsnyder</user>\n \t<email>bastian.schneider@badnoob.com</email>\n \t<active>yes</active>\n </developer>\n <date>2018-12-09</date>\n <time>01:12:36</time>\n <version>\n  <release>3.2.0</release>\n  <api>3.2.0</api>\n </version>\n <stability>\n  <release>stable</release>\n  <api>stable</api>\n </stability>\n <license uri=\"http://www.php.net/license\">PHP License</license>\n <notes>\n php 7.2 support\n anonymous class support\n sockets are still experimental\n fix #596\n fix #585\n fix #570, improve static property behaviour  \n fix most warnings reported by #600 \n fix #622\n fix #616 \n fix #657\n fix #665\n fix #564\n fix #580\n fix #681 \n fix #666\n fix #505\n fix #658\n fix #659\n fix #729\n fix #725\n fix #733\n fix #782\n fix #797\n fix #788\n fix #780\n fix #801\n fix #816\n fix #819\n fix #836\n fix #706\n fix #874\n fix #860\n fix #890\n fix #888\n and many more improvements\n \n Thanks to @dktapps and @tpunt for your support!\n </notes>\n <contents>\n  <dir name=\"/\">\n   \t<file name=\"examples/Benchmark.php\" role=\"doc\" />\n\t<file name=\"examples/CallAnyFunction.php\" role=\"doc\" />\n\t<file name=\"examples/ChannelsAndMagic.php\" role=\"doc\" />\n\t<file name=\"examples/ClosureFuture.php\" role=\"doc\" />\n\t<file name=\"examples/fetching-data-from-a-thread.php\" role=\"doc\" />\n\t<file name=\"examples/KeepAliveSession.php\" role=\"doc\" />\n\t<file name=\"examples/MySQLi.php\" role=\"doc\" />\n\t<file name=\"examples/NonBlockingSocketServer.php\" role=\"doc\" />\n\t<file name=\"examples/ObjectsAsParameters.php\" role=\"doc\" />\n\t<file name=\"examples/Pooling.php\" role=\"doc\" />\n\t<file name=\"examples/SelectiveInheritance.php\" role=\"doc\" />\n\t<file name=\"examples/SharingResources.php\" role=\"doc\" />\n\t<file name=\"examples/SimpleWebRequest.php\" role=\"doc\" />\n\t<file name=\"examples/Singleton.php\" role=\"doc\" />\n\t<file name=\"examples/Sockets.php\" role=\"doc\" />\n\t<file name=\"examples/SocketServer.php\" role=\"doc\" />\n\t<file name=\"examples/StackableArray.php\" role=\"doc\" />\n\t<file name=\"examples/stub.php\" role=\"doc\" />\n\t<file name=\"examples/Synchronization.php\" role=\"doc\" />\n   \t<file name=\"tests/assets/ExternalClosureDefinition.php\" role=\"test\" />\n   \t<file name=\"tests/assets/ExternalConstantsInterface.php\" role=\"test\" />\n   \t<file name=\"tests/anon-bound-inherited.phpt\" role=\"test\" />\n   \t<file name=\"tests/anon-interceptors.phpt\" role=\"test\" />\n   \t<file name=\"tests/anon-unbound-double-inherited.phpt\" role=\"test\" />\n\t<file name=\"tests/anon-unbound-inherited.phpt\" role=\"test\" />\n   \t<file name=\"tests/anon-unbound-use-guards.phpt\" role=\"test\" />\n\t<file name=\"tests/binding.phpt\" role=\"test\" />\n\t<file name=\"tests/callstatic-etc.phpt\" role=\"test\" />\n   \t<file name=\"tests/child-to-parent-class-copying-helper.php\" role=\"test\" />\n   \t<file name=\"tests/child-to-parent-class-copying.phpt\" role=\"test\" />\n\t<file name=\"tests/chunk.phpt\" role=\"test\" />\n\t<file name=\"tests/class-defaults.phpt\" role=\"test\" />\n\t<file name=\"tests/class-static-properties-2.phpt\" role=\"test\" />\n\t<file name=\"tests/class-static-properties-double-inheritance.phpt\" role=\"test\" />\n\t<file name=\"tests/class-static-properties-order-dependencies-inheritance.phpt\" role=\"test\" />\n\t<file name=\"tests/class-static-properties-order-dependencies.phpt\" role=\"test\" />\n\t<file name=\"tests/class-static-properties.phpt\" role=\"test\" />\n\t<file name=\"tests/closure-delayed-include.phpt\" role=\"test\" />\n\t<file name=\"tests/closure-secondary-thread-copy.phpt\" role=\"test\" />\n\t<file name=\"tests/closures-as-members-repeated-reallocation.phpt\" role=\"test\" />\n\t<file name=\"tests/closures-as-members.phpt\" role=\"test\" />\n\t<file name=\"tests/complex-statics-set-null.phpt\" role=\"test\" />\n\t<file name=\"tests/complex-statics.phpt\" role=\"test\" />\n\t<file name=\"tests/constant-array.phpt\" role=\"test\" />\n\t<file name=\"tests/constant-ast-copy-missing-type.phpt\" role=\"test\" />\n\t<file name=\"tests/constant-ast-copy.phpt\" role=\"test\" />\n\t<file name=\"tests/constants.phpt\" role=\"test\" />\n\t<file name=\"tests/corrupted-resources.phpt\" role=\"test\" />\n\t<file name=\"tests/counting-members.phpt\" role=\"test\" />\n\t<file name=\"tests/crazy-refcounting-stuff.phpt\" role=\"test\" />\n\t<file name=\"tests/display-startup-errors-output.phpt\" role=\"test\" />\n\t<file name=\"tests/doc-comments.phpt\" role=\"test\" />\n\t<file name=\"tests/exception-handler-caught-nested.phpt\" role=\"test\" />\n\t<file name=\"tests/exception-handler-caught-uncaught.phpt\" role=\"test\" />\n\t<file name=\"tests/exception-handler-fail.phpt\" role=\"test\" />\n\t<file name=\"tests/exception-handler-options.phpt\" role=\"test\" />\n\t<file name=\"tests/exception-handler.phpt\" role=\"test\" />\n\t<file name=\"tests/explicit-cast-arrays.phpt\" role=\"test\" />\n\t<file name=\"tests/foreign-private-members.phpt\" role=\"test\" />\n\t<file name=\"tests/functions.phpt\" role=\"test\" />\n\t<file name=\"tests/global-constants.phpt\" role=\"test\" />\n\t<file name=\"tests/gone.phpt\" role=\"test\" />\n\t<file name=\"tests/graceful-fatalities.phpt\" role=\"test\" />\n\t<file name=\"tests/hacking-serials.phpt\" role=\"test\" />\n\t<file name=\"tests/immutable-threaded-members.phpt\" role=\"test\" />\n\t<file name=\"tests/included-files.phpt\" role=\"test\" />\n\t<file name=\"tests/include_interface_constant.phpt\" role=\"test\" />\n\t<file name=\"tests/includeme.inc\" role=\"test\" />\n\t<file name=\"tests/inherit-non-closures.phpt\" role=\"test\" />\n\t<file name=\"tests/inherited-anon-class-outside-context.phpt\" role=\"test\" />\n\t<file name=\"tests/inherited-anon-class.phpt\" role=\"test\" />\n\t<file name=\"tests/ini.phpt\" role=\"test\" />\n\t<file name=\"tests/interface.phpt\" role=\"test\" />\n\t<file name=\"tests/interfaces.phpt\" role=\"test\" />\n\t<file name=\"tests/ipv6_skipif.inc\" role=\"test\" />\n\t<file name=\"tests/isset-empty-compat.phpt\" role=\"test\" />\n\t<file name=\"tests/isset-unset.phpt\" role=\"test\" />\n\t<file name=\"tests/iterator-funcs.phpt\" role=\"test\" />\n\t<file name=\"tests/iterator-no-refs.phpt\" role=\"test\" />\n\t<file name=\"tests/legacy-ctor.phpt\" role=\"test\" />\n\t<file name=\"tests/lexical-vars.phpt\" role=\"test\" />\n\t<file name=\"tests/magic-methods-get-set.phpt\" role=\"test\" />\n\t<file name=\"tests/magic-methods-isset-unset.phpt\" role=\"test\" />\n\t<file name=\"tests/merge-non-threaded.phpt\" role=\"test\" />\n\t<file name=\"tests/merging-members.phpt\" role=\"test\" />\n\t<file name=\"tests/merging-range.phpt\" role=\"test\" />\n\t<file name=\"tests/nested-non-threaded-object-references.phpt\" role=\"test\" />\n\t<file name=\"tests/new-class-after-thread-creation.phpt\" role=\"test\" />\n\t<file name=\"tests/no-cloning.phpt\" role=\"test\" />\n\t<file name=\"tests/no-inheritance-anon-class.phpt\" role=\"test\" />\n\t<file name=\"tests/norefs.phpt\" role=\"test\" />\n\t<file name=\"tests/normal-reads.phpt\" role=\"test\" />\n\t<file name=\"tests/normalize-members.phpt\" role=\"test\" />\n\t<file name=\"tests/null-member-crash.phpt\" role=\"test\" />\n\t<file name=\"tests/object-cast.phpt\" role=\"test\" />\n\t<file name=\"tests/object-comparison.phpt\" role=\"test\" />\n\t<file name=\"tests/oomethods.phpt\" role=\"test\" />\n\t<file name=\"tests/pools-default.phpt\" role=\"test\" />\n\t<file name=\"tests/pools.phpt\" role=\"test\" />\n\t<file name=\"tests/private-class-constant-fetching.phpt\" role=\"test\" />\n\t<file name=\"tests/pthreads-inherit-none-class-constant.phpt\" role=\"test\" />\n\t<file name=\"tests/pthreads-inherit-none-class-constant-inherited.phpt\" role=\"test\" />\n\t<file name=\"tests/recv-overload.phpt\" role=\"test\" />\n\t<file name=\"tests/resource-keeping.phpt\" role=\"test\" />\n\t<file name=\"tests/return-types.phpt\" role=\"test\" />\n\t<file name=\"tests/run-time-cache-corruption.phpt\" role=\"test\" />\n\t<file name=\"tests/runtime-inheritance-volatile.phpt\" role=\"test\" />\n\t<file name=\"tests/runtime-inheritance.phpt\" role=\"test\" />\n\t<file name=\"tests/selective-inheritance.phpt\" role=\"test\" />\n\t<file name=\"tests/shift-pop.phpt\" role=\"test\" />\n\t<file name=\"tests/shutdown-handler.phpt\" role=\"test\" />\n\t<file name=\"tests/socket-bind.phpt\" role=\"test\" />\n\t<file name=\"tests/socket-connect-error-unix.phpt\" role=\"test\" />\n\t<file name=\"tests/socket-connect-error-win32.phpt\" role=\"test\" />\n\t<file name=\"tests/socket-connect-params-af-inet.phpt\" role=\"test\" />\n\t<file name=\"tests/socket-connect-params-af-unix.phpt\" role=\"test\" />\n\t<file name=\"tests/socket-construct.phpt\" role=\"test\" />\n\t<file name=\"tests/socket-getoption.phpt\" role=\"test\" />\n\t<file name=\"tests/socket-getpeername-af-inet.phpt\" role=\"test\" />\n\t<file name=\"tests/socket-getpeername-af-unix.phpt\" role=\"test\" />\n\t<file name=\"tests/socket-getsockname-af-inet.phpt\" role=\"test\" />\n\t<file name=\"tests/socket-getsockname-af-unix.phpt\" role=\"test\" />\n\t<file name=\"tests/socket-ipv4loop.phpt\" role=\"test\" />\n\t<file name=\"tests/socket-ipv6loop.phpt\" role=\"test\" />\n\t<file name=\"tests/socket-read-type.phpt\" role=\"test\" />\n\t<file name=\"tests/socket-select-unix.phpt\" role=\"test\" />\n\t<file name=\"tests/socket-select-win32.phpt\" role=\"test\" />\n\t<file name=\"tests/socket-sentto-recvfrom-ipv4-udp.phpt\" role=\"test\" />\n\t<file name=\"tests/socket-sentto-recvfrom-ipv6-udp.phpt\" role=\"test\" />\n\t<file name=\"tests/socket-sentto-recvfrom-unix.phpt\" role=\"test\" />\n\t<file name=\"tests/socket-setoption.phpt\" role=\"test\" />\n\t<file name=\"tests/socket-unixloop.phpt\" role=\"test\" />\n\t<file name=\"tests/stateful-fatalities.phpt\" role=\"test\" />\n\t<file name=\"tests/static-inheritance-unexpected-null.phpt\" role=\"test\" />\n\t<file name=\"tests/static-resolution.phpt\" role=\"test\" />\n\t<file name=\"tests/static-scope-vars.phpt\" role=\"test\" />\n\t<file name=\"tests/staticmethods.phpt\" role=\"test\" />\n\t<file name=\"tests/statics-thorn-in-other-side.phpt\" role=\"test\" />\n\t<file name=\"tests/statics.phpt\" role=\"test\" />\n\t<file name=\"tests/synchronization.phpt\" role=\"test\" />\n\t<file name=\"tests/thorn-in-side.phpt\" role=\"test\" />\n\t<file name=\"tests/thread.phpt\" role=\"test\" />\n\t<file name=\"tests/threaded_valid_tsrmls.phpt\" role=\"test\" />\n\t<file name=\"tests/threaded-extend-abstract.phpt\" role=\"test\" />\n\t<file name=\"tests/trait-alias-bug.phpt\" role=\"test\" />\n\t<file name=\"tests/trait-aliases-reflection.phpt\" role=\"test\" />\n\t<file name=\"tests/trait-aliases.phpt\" role=\"test\" />\n\t<file name=\"tests/traits-scope.inc\" role=\"test\" />\n\t<file name=\"tests/traits-scope.phpt\" role=\"test\" />\n\t<file name=\"tests/unprepared-entry-static-segfault.phpt\" role=\"test\" />\n\t<file name=\"tests/unset-defaults.phpt\" role=\"test\" />\n\t<file name=\"tests/unstack-running.phpt\" role=\"test\" />\n\t<file name=\"tests/verify-overload.phpt\" role=\"test\" />\n\t<file name=\"tests/volatile-arrays.phpt\" role=\"test\" />\n\t<file name=\"tests/volatile-nested.phpt\" role=\"test\" />\n\t<file name=\"tests/volatile-objects.phpt\" role=\"test\" />\n\t<file name=\"tests/wait.phpt\" role=\"test\" />\n\t<file name=\"tests/waiting-timeouts.phpt\" role=\"test\" />\n\t<file name=\"tests/workers-constant-copy.phpt\" role=\"test\" />\n\t<file name=\"tests/workers-default-collector.phpt\" role=\"test\" />\n\t<file name=\"tests/workers-no-collect.phpt\" role=\"test\" />\n\t<file name=\"tests/workers-no-join.phpt\" role=\"test\" />\n\t<file name=\"tests/workers-no-shutdown-before-start.phpt\" role=\"test\" />\n\t<file name=\"tests/workers-no-stack.phpt\" role=\"test\" />\n\t<file name=\"tests/workers-no-start.phpt\" role=\"test\" />\n\t<file name=\"tests/workers-no-unstack.phpt\" role=\"test\" />\n\t<file name=\"tests/workers-ok-unstack.phpt\" role=\"test\" />\n   \t<file name=\"src/sockets/windows_common.h\" role=\"src\" />\n   \t<file name=\"src/copy.h\" role=\"src\" />\n\t<file name=\"src/globals.c\" role=\"src\" />\n\t<file name=\"src/globals.h\" role=\"src\" />\n\t<file name=\"src/handlers.c\" role=\"src\" />\n\t<file name=\"src/handlers.h\" role=\"src\" />\n\t<file name=\"src/monitor.c\" role=\"src\" />\n\t<file name=\"src/monitor.h\" role=\"src\" />\n\t<file name=\"src/object.c\" role=\"src\" />\n\t<file name=\"src/object.h\" role=\"src\" />\n\t<file name=\"src/prepare.c\" role=\"src\" />\n\t<file name=\"src/prepare.h\" role=\"src\" />\n\t<file name=\"src/pthreads.h\" role=\"src\" />\n\t<file name=\"src/resources.c\" role=\"src\" />\n\t<file name=\"src/resources.h\" role=\"src\" />\n\t<file name=\"src/socket.c\" role=\"src\" />\n\t<file name=\"src/socket.h\" role=\"src\" />\n\t<file name=\"src/stack.c\" role=\"src\" />\n\t<file name=\"src/stack.h\" role=\"src\" />\n\t<file name=\"src/store.c\" role=\"src\" />\n\t<file name=\"src/store.h\" role=\"src\" />\n\t<file name=\"src/thread.h\" role=\"src\" />\n   \t<file name=\"classes/collectable.h\" role=\"src\" />\n\t<file name=\"classes/pool.h\" role=\"src\" />\n\t<file name=\"classes/socket.h\" role=\"src\" />\n\t<file name=\"classes/thread.h\" role=\"src\" />\n\t<file name=\"classes/threaded.h\" role=\"src\" />\n\t<file name=\"classes/worker.h\" role=\"src\" />\n\t<file name=\"config.m4\" role=\"src\" />\n\t<file name=\"config.w32\" role=\"src\" />\n\t<file name=\"LICENSE\" role=\"doc\" />\n\t<file name=\"php_pthreads.c\" role=\"src\" />\n\t<file name=\"php_pthreads.h\" role=\"src\" />\n\t<file name=\"README.md\" role=\"doc\" />\n  </dir>\n </contents>\n <dependencies>\n  <required>\n   <php>\n    <min>7.2.0</min>\n   </php>\n   <pearinstaller>\n    <min>1.4.0b1</min>\n   </pearinstaller>\n  </required>\n </dependencies>\n <providesextension>pthreads</providesextension>\n <extsrcrelease />\n</package>\n"
        },
        {
          "name": "php_pthreads.c",
          "type": "blob",
          "size": 34.7861328125,
          "content": "/*\n  +----------------------------------------------------------------------+\n  | pthreads                                                             |\n  +----------------------------------------------------------------------+\n  | Copyright (c) Joe Watkins 2012 - 2014                                |\n  +----------------------------------------------------------------------+\n  | This source file is subject to version 3.01 of the PHP license,      |\n  | that is bundled with this package in the file LICENSE, and is        |\n  | available through the world-wide-web at the following url:           |\n  | http://www.php.net/license/3_01.txt                                  |\n  | If you did not receive a copy of the PHP license and are unable to   |\n  | obtain it through the world-wide-web, please send a note to          |\n  | license@php.net so we can mail you a copy immediately.               |\n  +----------------------------------------------------------------------+\n  | Author: Joe Watkins <joe.watkins@live.co.uk>                         |\n  +----------------------------------------------------------------------+\n */\n#ifndef HAVE_PHP_PTHREADS\n#define HAVE_PHP_PTHREADS\n\n#ifndef HAVE_PTHREADS_H\n#\tinclude <src/pthreads.h>\n#endif\n\n#ifndef HAVE_PHP_PTHREADS_H\n#\tinclude <php_pthreads.h>\n#endif\n\n#ifndef HAVE_PTHREADS_OBJECT_H\n#\tinclude <src/object.h>\n#endif\n\n#ifndef ZTS\n#\terror \"pthreads requires that Thread Safety is enabled, add --enable-maintainer-zts to your PHP build configuration\"\n#endif\n\n#if PHP_VERSION_ID < 70200\n#\terror \"pthreads requires PHP 7.2, ZTS in versions 7.0 and 7.1 is broken\"\n#endif\n\n#if COMPILE_DL_PTHREADS\n\tZEND_TSRMLS_CACHE_DEFINE();\n\tZEND_GET_MODULE(pthreads)\n#endif\n\n#ifndef HAVE_PTHREADS_GLOBALS_H\n#\tinclude <src/globals.h>\n#endif\n\n#ifndef HAVE_PTHREADS_COPY_H\n#\tinclude <src/copy.h>\n#endif\n\nzend_module_entry pthreads_module_entry = {\n  STANDARD_MODULE_HEADER,\n  PHP_PTHREADS_EXTNAME,\n  NULL,\n  PHP_MINIT(pthreads),\n  PHP_MSHUTDOWN(pthreads),\n  PHP_RINIT(pthreads),\n  PHP_RSHUTDOWN(pthreads),\n  PHP_MINFO(pthreads),\n  PHP_PTHREADS_VERSION,\n  NO_MODULE_GLOBALS,\n  ZEND_MODULE_POST_ZEND_DEACTIVATE_N(pthreads),\n  STANDARD_MODULE_PROPERTIES_EX\n};\n\nzend_class_entry *pthreads_threaded_entry;\nzend_class_entry *pthreads_volatile_entry;\nzend_class_entry *pthreads_thread_entry;\nzend_class_entry *pthreads_worker_entry;\nzend_class_entry *pthreads_collectable_entry;\nzend_class_entry *pthreads_pool_entry;\nzend_class_entry *pthreads_socket_entry;\n\nzend_object_handlers pthreads_handlers;\nzend_object_handlers pthreads_socket_handlers;\nzend_object_handlers *zend_handlers;\nvoid ***pthreads_instance = NULL;\n\n#ifndef HAVE_PTHREADS_OBJECT_H\n#\tinclude <src/object.h>\n#endif\n\nZEND_DECLARE_MODULE_GLOBALS(pthreads)\n\ntypedef struct _pthreads_supported_sapi_t {\n\tconst char *name;\n\tsize_t      nlen;\n} pthreads_supported_sapi_t;\n\nconst static pthreads_supported_sapi_t whitelist[] = {\n\t{ZEND_STRL(\"cli\")},\n\t{ZEND_STRL(\"phpdbg\")}, /* not really supported, needs work */\n\t{ZEND_STRL(\"homegear\")},\n\t{NULL, 0}\n};\n\nstatic inline zend_bool pthreads_is_supported_sapi(char *name) {\n\tconst pthreads_supported_sapi_t *sapi = whitelist;\n\tzend_long nlen = strlen(name);\n\n\twhile (sapi->name) {\n\t\tif (nlen == sapi->nlen && \n\t\t\tmemcmp(sapi->name, name, nlen) == SUCCESS) {\n\t\t\treturn 1;\n\t\t}\n\t\tsapi++;\n\t}\n\n\treturn 0;\n}\n\ntypedef void (*zend_execute_ex_function)(zend_execute_data *);\n\nzend_execute_ex_function zend_execute_ex_hook = NULL;\n\nstatic inline void pthreads_globals_ctor(zend_pthreads_globals *pg) {\n\tZVAL_UNDEF(&pg->this);\n\tpg->pid = 0L;\n\tpg->signal = 0;\n\tpg->resources = NULL;\n}\n\n/* {{{ */\nstatic inline void pthreads_execute_ex(zend_execute_data *data) {\n\tif (zend_execute_ex_hook) {\n\t\tzend_execute_ex_hook(data);\n\t} else execute_ex(data);\n\t\n\tif (Z_TYPE(PTHREADS_ZG(this)) != IS_UNDEF) {\n\t\tif (EG(exception) && \n\t\t\t(!EG(current_execute_data) || !EG(current_execute_data)->prev_execute_data))\n\t\t\tzend_try_exception_handler();\n\t}\n} /* }}} */ \n\n/* {{{ */\nstatic inline zend_bool pthreads_verify_type(zend_execute_data *execute_data, zval *var, zend_arg_info *info) {\n\tif (!ZEND_TYPE_IS_SET(info->type)) {\n\t\treturn 1;\n\t}\n\n\tif (ZEND_TYPE_IS_CLASS(info->type)) {\n\t\tpthreads_object_t *threaded;\n\n\t\tif (!var || \n\t\t\tZ_TYPE_P(var) != IS_OBJECT || \n\t\t\t!instanceof_function(Z_OBJCE_P(var), pthreads_threaded_entry)) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tthreaded = PTHREADS_FETCH_FROM(Z_OBJ_P(var));\n\n\t\tif (!PTHREADS_IN_CREATOR(threaded)) {\n\t\t\tzend_class_entry *ce;\n\t\t\tvoid **cache = CACHE_ADDR(EX(opline)->op2.num);\n\n\t\t\tif (*cache) {\n\t\t\t\tce = *cache;\n\t\t\t} else {\n\t\t\t\tce = zend_fetch_class(ZEND_TYPE_NAME(info->type), \n\t\t\t\t\t(ZEND_FETCH_CLASS_AUTO | ZEND_FETCH_CLASS_NO_AUTOLOAD));\n\t\t\t\n\t\t\t\tif (!ce) {\n\t\t\t\t\treturn Z_TYPE_P(var) == IS_NULL && ZEND_TYPE_ALLOW_NULL(info->type);\n\t\t\t\t}\n\n\t\t\t\t*cache = (void*) ce;\n\t\t\t}\n\n\t\t\tif (Z_TYPE_P(var) == IS_OBJECT) {\n\t\t\t\tzend_class_entry *instance = zend_fetch_class(\n\t\t\t\t\tthreaded->std.ce->name, (ZEND_FETCH_CLASS_AUTO | ZEND_FETCH_CLASS_NO_AUTOLOAD));\n\n\t\t\t\tif (!instance) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn instanceof_function(instance, ce);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n} /* }}} */\n\n/* {{{ */\nstatic inline int php_pthreads_recv(zend_execute_data *execute_data) {\n\tif (Z_TYPE(PTHREADS_ZG(this)) != IS_UNDEF) {\n\t\tuint32_t arg_num = EX(opline)->op1.num;\t\n\t\tzval *var = NULL;\n\n\t\tif (UNEXPECTED(arg_num > EX_NUM_ARGS())) {\n\t\t\treturn ZEND_USER_OPCODE_DISPATCH;\t\n\t\t}\n\n#if ZEND_USE_ABS_CONST_ADDR\n\t\tif (EX(opline)->result_type == IS_CONST) {\n\t\t\t\tvar = (zval*) EX(opline)->result.var;\t\n\t\t} else var = EX_VAR(EX(opline)->result.num);\n#else\n\t\tvar = EX_VAR(EX(opline)->result.num);\n#endif\n\n\t\tif (UNEXPECTED((EX(func)->op_array.fn_flags & ZEND_ACC_HAS_TYPE_HINTS) != 0)) {\n\t\t\tif (pthreads_verify_type(execute_data, \n\t\t\t\tvar, \n\t\t\t\t&EX(func)->common.arg_info[arg_num-1])) {\n\t\t\t\tEX(opline)++;\n\t\t\t\treturn ZEND_USER_OPCODE_CONTINUE;\n\t\t\t}\n\t\t}\n\t}\n\treturn ZEND_USER_OPCODE_DISPATCH;\n} /* }}} */\n\n/* {{{ */\nstatic inline int php_pthreads_verify_return_type(zend_execute_data *execute_data) {\n\tif (Z_TYPE(PTHREADS_ZG(this)) != IS_UNDEF) {\n\t\tzval *var = NULL;\n\t\t\n\t\tif (EX(opline)->op1_type == IS_UNUSED) {\t\n\t\t\treturn ZEND_USER_OPCODE_DISPATCH;\n\t\t}\n\n#if ZEND_USE_ABS_CONST_ADDR\n\t\tif (EX(opline)->op1_type & IS_CONST) {\n\t\t\tvar = (zval*) EX(opline)->op1.var;\n\t\t} else var = EX_VAR(EX(opline)->op1.num);\n#else\n\t\tvar = EX_VAR(EX(opline)->op1.num);\n#endif\n\n\t\tif (pthreads_verify_type(execute_data, \n\t\t\tvar,\n\t\t\tEX(func)->common.arg_info - 1)) {\n\t\t\tEX(opline)++;\n\t\t\treturn ZEND_USER_OPCODE_CONTINUE;\n\t\t}\n\t}\n\n\treturn ZEND_USER_OPCODE_DISPATCH;\n} /* }}} */\n\nPHP_MINIT_FUNCTION(pthreads)\n{\n\tzend_class_entry ce;\n\n\tif (!pthreads_is_supported_sapi(sapi_module.name)) {\n\t\tzend_error(E_ERROR, \"The %s SAPI is not supported by pthreads\",\n\t\t\tsapi_module.name);\n\t\treturn FAILURE;\n\t}\n\n\tzend_execute_ex_hook = zend_execute_ex;\n\tzend_execute_ex = pthreads_execute_ex;\t\n\n\tREGISTER_LONG_CONSTANT(\"PTHREADS_INHERIT_ALL\", PTHREADS_INHERIT_ALL, CONST_CS | CONST_PERSISTENT);\n\tREGISTER_LONG_CONSTANT(\"PTHREADS_INHERIT_NONE\", PTHREADS_INHERIT_NONE, CONST_CS | CONST_PERSISTENT);\n\tREGISTER_LONG_CONSTANT(\"PTHREADS_INHERIT_INI\", PTHREADS_INHERIT_INI, CONST_CS | CONST_PERSISTENT);\n\tREGISTER_LONG_CONSTANT(\"PTHREADS_INHERIT_CONSTANTS\", PTHREADS_INHERIT_CONSTANTS, CONST_CS | CONST_PERSISTENT);\n\tREGISTER_LONG_CONSTANT(\"PTHREADS_INHERIT_CLASSES\", PTHREADS_INHERIT_CLASSES, CONST_CS | CONST_PERSISTENT);\n\tREGISTER_LONG_CONSTANT(\"PTHREADS_INHERIT_FUNCTIONS\", PTHREADS_INHERIT_FUNCTIONS, CONST_CS | CONST_PERSISTENT);\n\tREGISTER_LONG_CONSTANT(\"PTHREADS_INHERIT_INCLUDES\", PTHREADS_INHERIT_INCLUDES, CONST_CS | CONST_PERSISTENT);\n\tREGISTER_LONG_CONSTANT(\"PTHREADS_INHERIT_COMMENTS\", PTHREADS_INHERIT_COMMENTS, CONST_CS | CONST_PERSISTENT);\n\n\tREGISTER_LONG_CONSTANT(\"PTHREADS_ALLOW_HEADERS\", PTHREADS_ALLOW_HEADERS, CONST_CS | CONST_PERSISTENT);\n\n\tINIT_CLASS_ENTRY(ce, \"Collectable\", pthreads_collectable_methods);\n\tpthreads_collectable_entry = zend_register_internal_interface(&ce);\n\n\tINIT_CLASS_ENTRY(ce, \"Threaded\", pthreads_threaded_methods);\n\tpthreads_threaded_entry=zend_register_internal_class(&ce);\n\tpthreads_threaded_entry->get_iterator = pthreads_object_iterator_create;\n\tpthreads_threaded_entry->create_object = pthreads_threaded_ctor;\n\tpthreads_threaded_entry->serialize = pthreads_threaded_serialize;\n\tpthreads_threaded_entry->unserialize = pthreads_threaded_unserialize;\n\tzend_class_implements(pthreads_threaded_entry, 2, zend_ce_traversable, pthreads_collectable_entry);\n\t\n\tINIT_CLASS_ENTRY(ce, \"Volatile\", NULL);\n\tpthreads_volatile_entry = zend_register_internal_class_ex(&ce, pthreads_threaded_entry);\n\t\n\tINIT_CLASS_ENTRY(ce, \"Thread\", pthreads_thread_methods);\n\tpthreads_thread_entry=zend_register_internal_class_ex(&ce, pthreads_threaded_entry);\n\tpthreads_thread_entry->create_object = pthreads_thread_ctor;\n\n\tINIT_CLASS_ENTRY(ce, \"Worker\", pthreads_worker_methods);\n\tpthreads_worker_entry=zend_register_internal_class_ex(&ce, pthreads_thread_entry);\n\tpthreads_worker_entry->create_object = pthreads_worker_ctor;\t\n\n\tINIT_CLASS_ENTRY(ce, \"Pool\", pthreads_pool_methods);\n\tpthreads_pool_entry=zend_register_internal_class(&ce);\n\tzend_declare_property_long(pthreads_pool_entry, ZEND_STRL(\"size\"), 1, ZEND_ACC_PROTECTED);\n\tzend_declare_property_null(pthreads_pool_entry, ZEND_STRL(\"class\"),   ZEND_ACC_PROTECTED);\n\tzend_declare_property_null(pthreads_pool_entry, ZEND_STRL(\"workers\"), ZEND_ACC_PROTECTED);\n\tzend_declare_property_null(pthreads_pool_entry, ZEND_STRL(\"ctor\"),    ZEND_ACC_PROTECTED);\n\tzend_declare_property_long(pthreads_pool_entry, ZEND_STRL(\"last\"), 0, ZEND_ACC_PROTECTED);\n\n\tINIT_CLASS_ENTRY(ce, \"Socket\", pthreads_socket_methods);\n\tpthreads_socket_entry = zend_register_internal_class_ex(&ce, pthreads_threaded_entry);\n\tpthreads_socket_entry->create_object = pthreads_socket_ctor;\n\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"AF_UNIX\"), AF_UNIX);\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"AF_INET\"), AF_INET);\n#ifdef HAVE_IPV6\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"AF_INET6\"), AF_INET6);\n#endif\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"SOCK_STREAM\"), SOCK_STREAM);\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"SOCK_DGRAM\"), SOCK_DGRAM);\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"SOCK_RAW\"), SOCK_RAW);\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"SOCK_SEQPACKET\"), SOCK_SEQPACKET);\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"SOCK_RDM\"), SOCK_RDM);\n\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"SO_DEBUG\"), SO_DEBUG);\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"SO_REUSEADDR\"), SO_REUSEADDR);\n#ifdef SO_REUSEPORT\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"SO_REUSEPORT\"), SO_REUSEPORT);\n#endif\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"SO_KEEPALIVE\"), SO_KEEPALIVE);\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"SO_DONTROUTE\"), SO_DONTROUTE);\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"SO_LINGER\"), SO_LINGER);\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"SO_BROADCAST\"), SO_BROADCAST);\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"SO_OOBINLINE\"), SO_OOBINLINE);\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"SO_SNDBUF\"), SO_SNDBUF);\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"SO_RCVBUF\"), SO_RCVBUF);\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"SO_SNDLOWAT\"), SO_SNDLOWAT);\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"SO_RCVLOWAT\"), SO_RCVLOWAT);\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"SO_SNDTIMEO\"), SO_SNDTIMEO);\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"SO_RCVTIMEO\"), SO_RCVTIMEO);\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"SO_TYPE\"), SO_TYPE);\n#ifdef SO_FAMILY\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"SO_FAMILY\"), SO_FAMILY);\n#endif\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"SO_ERROR\"), SO_ERROR);\n#ifdef SO_BINDTODEVICE\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"SO_BINDTODEVICE\"), SO_BINDTODEVICE);\n#endif\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"SOMAXCONN\"), SOMAXCONN);\n#ifdef TCP_NODELAY\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"TCP_NODELAY\"), TCP_NODELAY);\n#endif\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"NORMAL_READ\"), PTHREADS_NORMAL_READ);\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"BINARY_READ\"), PTHREADS_BINARY_READ);\n\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"SOL_SOCKET\"), SOL_SOCKET);\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"SOL_TCP\"), IPPROTO_TCP);\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"SOL_UDP\"), IPPROTO_UDP);\n\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"MSG_OOB\"), MSG_OOB);\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"MSG_WAITALL\"), MSG_WAITALL);\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"MSG_CTRUNC\"), MSG_CTRUNC);\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"MSG_TRUNC\"), MSG_TRUNC);\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"MSG_PEEK\"), MSG_PEEK);\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"MSG_DONTROUTE\"), MSG_DONTROUTE);\n#ifdef MSG_EOR\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"MSG_EOR\"), MSG_EOR);\n#endif\n#ifdef MSG_EOF\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"MSG_EOF\"), MSG_EOF);\n#endif\n#ifdef MSG_CONFIRM\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"MSG_CONFIRM\"), MSG_CONFIRM);\n#endif\n#ifdef MSG_ERRQUEUE\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"MSG_ERRQUEUE\"), MSG_ERRQUEUE);\n#endif\n#ifdef MSG_NOSIGNAL\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"MSG_NOSIGNAL\"), MSG_NOSIGNAL);\n#endif\n#ifdef MSG_MORE\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"MSG_MORE\"), MSG_MORE);\n#endif\n#ifdef MSG_WAITFORONE\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"MSG_WAITFORONE\"), MSG_WAITFORONE);\n#endif\n#ifdef MSG_CMSG_CLOEXEC\n\tzend_declare_class_constant_long(pthreads_socket_entry, ZEND_STRL(\"MSG_CMSG_CLOEXEC\"), MSG_CMSG_CLOEXEC);\n#endif\n\n#ifndef _WIN32\n#ifdef EPERM\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EPERM\"), EPERM);\n#endif\n#ifdef ENOENT\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENOENT\"), ENOENT);\n#endif\n#ifdef EINTR\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EINTR\"), EINTR);\n#endif\n#ifdef EIO\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EIO\"), EIO);\n#endif\n#ifdef ENXIO\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENXIO\"), ENXIO);\n#endif\n#ifdef E2BIG\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"E2BIG\"), E2BIG);\n#endif\n#ifdef EBADF\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EBADF\"), EBADF);\n#endif\n#ifdef EAGAIN\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EAGAIN\"), EAGAIN);\n#endif\n#ifdef ENOMEM\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENOMEM\"), ENOMEM);\n#endif\n#ifdef EACCES\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EACCES\"), EACCES);\n#endif\n#ifdef EFAULT\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EFAULT\"), EFAULT);\n#endif\n#ifdef ENOTBLK\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENOTBLK\"), ENOTBLK);\n#endif\n#ifdef EBUSY\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EBUSY\"), EBUSY);\n#endif\n#ifdef EEXIST\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EEXIST\"), EEXIST);\n#endif\n#ifdef EXDEV\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EXDEV\"), EXDEV);\n#endif\n#ifdef ENODEV\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENODEV\"), ENODEV);\n#endif\n#ifdef ENOTDIR\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENOTDIR\"), ENOTDIR);\n#endif\n#ifdef EISDIR\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EISDIR\"), EISDIR);\n#endif\n#ifdef EINVAL\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EINVAL\"), EINVAL);\n#endif\n#ifdef ENFILE\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENFILE\"), ENFILE);\n#endif\n#ifdef EMFILE\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EMFILE\"), EMFILE);\n#endif\n#ifdef ENOTTY\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENOTTY\"), ENOTTY);\n#endif\n#ifdef ENOSPC\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENOSPC\"), ENOSPC);\n#endif\n#ifdef ESPIPE\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ESPIPE\"), ESPIPE);\n#endif\n#ifdef EROFS\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EROFS\"), EROFS);\n#endif\n#ifdef EMLINK\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EMLINK\"), EMLINK);\n#endif\n#ifdef EPIPE\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EPIPE\"), EPIPE);\n#endif\n#ifdef ENAMETOOLONG\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENAMETOOLONG\"), ENAMETOOLONG);\n#endif\n#ifdef ENOLCK\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENOLCK\"), ENOLCK);\n#endif\n#ifdef ENOSYS\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENOSYS\"), ENOSYS);\n#endif\n#ifdef ENOTEMPTY\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENOTEMPTY\"), ENOTEMPTY);\n#endif\n#ifdef ELOOP\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ELOOP\"), ELOOP);\n#endif\n#ifdef EWOULDBLOCK\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EWOULDBLOCK\"), EWOULDBLOCK);\n#endif\n#ifdef ENOMSG\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENOMSG\"), ENOMSG);\n#endif\n#ifdef EIDRM\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EIDRM\"), EIDRM);\n#endif\n#ifdef ECHRNG\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ECHRNG\"), ECHRNG);\n#endif\n#ifdef EL2NSYNC\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EL2NSYNC\"), EL2NSYNC);\n#endif\n#ifdef EL3HLT\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EL3HLT\"), EL3HLT);\n#endif\n#ifdef EL3RST\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EL3RST\"), EL3RST);\n#endif\n#ifdef ELNRNG\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ELNRNG\"), ELNRNG);\n#endif\n#ifdef EUNATCH\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EUNATCH\"), EUNATCH);\n#endif\n#ifdef ENOCSI\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENOCSI\"), ENOCSI);\n#endif\n#ifdef EL2HLT\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EL2HLT\"), EL2HLT);\n#endif\n#ifdef EBADE\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EBADE\"), EBADE);\n#endif\n#ifdef EBADR\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EBADR\"), EBADR);\n#endif\n#ifdef EXFULL\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EXFULL\"), EXFULL);\n#endif\n#ifdef ENOANO\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENOANO\"), ENOANO);\n#endif\n#ifdef EBADRQC\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EBADRQC\"), EBADRQC);\n#endif\n#ifdef EBADSLT\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EBADSLT\"), EBADSLT);\n#endif\n#ifdef ENOSTR\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENOSTR\"), ENOSTR);\n#endif\n#ifdef ENODATA\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENODATA\"), ENODATA);\n#endif\n#ifdef ETIME\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ETIME\"), ETIME);\n#endif\n#ifdef ENOSR\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENOSR\"), ENOSR);\n#endif\n#ifdef ENONET\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENONET\"), ENONET);\n#endif\n#ifdef EREMOTE\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EREMOTE\"), EREMOTE);\n#endif\n#ifdef ENOLINK\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENOLINK\"), ENOLINK);\n#endif\n#ifdef EADV\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EADV\"), EADV);\n#endif\n#ifdef ESRMNT\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ESRMNT\"), ESRMNT);\n#endif\n#ifdef ECOMM\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ECOMM\"), ECOMM);\n#endif\n#ifdef EPROTO\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EPROTO\"), EPROTO);\n#endif\n#ifdef EMULTIHOP\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EMULTIHOP\"), EMULTIHOP);\n#endif\n#ifdef EBADMSG\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EBADMSG\"), EBADMSG);\n#endif\n#ifdef ENOTUNIQ\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENOTUNIQ\"), ENOTUNIQ);\n#endif\n#ifdef EBADFD\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EBADFD\"), EBADFD);\n#endif\n#ifdef EREMCHG\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EREMCHG\"), EREMCHG);\n#endif\n#ifdef ERESTART\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ERESTART\"), ERESTART);\n#endif\n#ifdef ESTRPIPE\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ESTRPIPE\"), ESTRPIPE);\n#endif\n#ifdef EUSERS\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EUSERS\"), EUSERS);\n#endif\n#ifdef ENOTSOCK\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENOTSOCK\"), ENOTSOCK);\n#endif\n#ifdef EDESTADDRREQ\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EDESTADDRREQ\"), EDESTADDRREQ);\n#endif\n#ifdef EMSGSIZE\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EMSGSIZE\"), EMSGSIZE);\n#endif\n#ifdef EPROTOTYPE\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EPROTOTYPE\"), EPROTOTYPE);\n#endif\n#ifdef ENOPROTOOPT\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENOPROTOOPT\"), ENOPROTOOPT);\n#endif\n#ifdef EPROTONOSUPPORT\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EPROTONOSUPPORT\"), EPROTONOSUPPORT);\n#endif\n#ifdef ESOCKTNOSUPPORT\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ESOCKTNOSUPPORT\"), ESOCKTNOSUPPORT);\n#endif\n#ifdef EOPNOTSUPP\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EOPNOTSUPP\"), EOPNOTSUPP);\n#endif\n#ifdef EPFNOSUPPORT\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EPFNOSUPPORT\"), EPFNOSUPPORT);\n#endif\n#ifdef EAFNOSUPPORT\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EAFNOSUPPORT\"), EAFNOSUPPORT);\n#endif\n#ifdef EADDRINUSE\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EADDRINUSE\"), EADDRINUSE);\n#endif\n#ifdef EADDRNOTAVAIL\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EADDRNOTAVAIL\"), EADDRNOTAVAIL);\n#endif\n#ifdef ENETDOWN\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENETDOWN\"), ENETDOWN);\n#endif\n#ifdef ENETUNREACH\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENETUNREACH\"), ENETUNREACH);\n#endif\n#ifdef ENETRESET\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENETRESET\"), ENETRESET);\n#endif\n#ifdef ECONNABORTED\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ECONNABORTED\"), ECONNABORTED);\n#endif\n#ifdef ECONNRESET\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ECONNRESET\"), ECONNRESET);\n#endif\n#ifdef ENOBUFS\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENOBUFS\"), ENOBUFS);\n#endif\n#ifdef EISCONN\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EISCONN\"), EISCONN);\n#endif\n#ifdef ENOTCONN\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENOTCONN\"), ENOTCONN);\n#endif\n#ifdef ESHUTDOWN\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ESHUTDOWN\"), ESHUTDOWN);\n#endif\n#ifdef ETOOMANYREFS\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ETOOMANYREFS\"), ETOOMANYREFS);\n#endif\n#ifdef ETIMEDOUT\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ETIMEDOUT\"), ETIMEDOUT);\n#endif\n#ifdef ECONNREFUSED\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ECONNREFUSED\"), ECONNREFUSED);\n#endif\n#ifdef EHOSTDOWN\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EHOSTDOWN\"), EHOSTDOWN);\n#endif\n#ifdef EHOSTUNREACH\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EHOSTUNREACH\"), EHOSTUNREACH);\n#endif\n#ifdef EALREADY\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EALREADY\"), EALREADY);\n#endif\n#ifdef EINPROGRESS\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EINPROGRESS\"), EINPROGRESS);\n#endif\n#ifdef EISNAM\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EISNAM\"), EISNAM);\n#endif\n#ifdef EREMOTEIO\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EREMOTEIO\"), EREMOTEIO);\n#endif\n#ifdef EDQUOT\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EDQUOT\"), EDQUOT);\n#endif\n#ifdef ENOMEDIUM\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENOMEDIUM\"), ENOMEDIUM);\n#endif\n#ifdef EMEDIUMTYPE\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EMEDIUMTYPE\"), EMEDIUMTYPE);\n#endif\n#else\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EINTR\"), WSAEINTR);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EBADF\"), WSAEBADF);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EACCES\"), WSAEACCES);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EFAULT\"), WSAEFAULT);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EINVAL\"), WSAEINVAL);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EMFILE\"), WSAEMFILE);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EWOULDBLOCK\"), WSAEWOULDBLOCK);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EINPROGRESS\"), WSAEINPROGRESS);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EALREADY\"), WSAEALREADY);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENOTSOCK\"), WSAENOTSOCK);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EDESTADDRREQ\"), WSAEDESTADDRREQ);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EMSGSIZE\"), WSAEMSGSIZE);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EPROTOTYPE\"), WSAEPROTOTYPE);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENOPROTOOPT\"), WSAENOPROTOOPT);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EPROTONOSUPPORT\"), WSAEPROTONOSUPPORT);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ESOCKTNOSUPPORT\"), WSAESOCKTNOSUPPORT);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EOPNOTSUPP\"), WSAEOPNOTSUPP);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EPFNOSUPPORT\"), WSAEPFNOSUPPORT);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EAFNOSUPPORT\"), WSAEAFNOSUPPORT);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EADDRINUSE\"), WSAEADDRINUSE);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EADDRNOTAVAIL\"), WSAEADDRNOTAVAIL);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENETDOWN\"), WSAENETDOWN);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENETUNREACH\"), WSAENETUNREACH);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENETRESET\"), WSAENETRESET);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ECONNABORTED\"), WSAECONNABORTED);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ECONNRESET\"), WSAECONNRESET);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENOBUFS\"), WSAENOBUFS);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EISCONN\"), WSAEISCONN);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENOTCONN\"), WSAENOTCONN);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ESHUTDOWN\"), WSAESHUTDOWN);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ETOOMANYREFS\"), WSAETOOMANYREFS);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ETIMEDOUT\"), WSAETIMEDOUT);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ECONNREFUSED\"), WSAECONNREFUSED);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ELOOP\"), WSAELOOP);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENAMETOOLONG\"), WSAENAMETOOLONG);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EHOSTDOWN\"), WSAEHOSTDOWN);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EHOSTUNREACH\"), WSAEHOSTUNREACH);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ENOTEMPTY\"), WSAENOTEMPTY);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EPROCLIM\"), WSAEPROCLIM);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EUSERS\"), WSAEUSERS);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EDQUOT\"), WSAEDQUOT);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"ESTALE\"), WSAESTALE);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EREMOTE\"), WSAEREMOTE);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"EDISCON\"), WSAEDISCON);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"SYSNOTREADY\"), WSASYSNOTREADY);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"VERNOTSUPPORTED\"), WSAVERNOTSUPPORTED);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"NOTINITIALISED\"), WSANOTINITIALISED);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"HOST_NOT_FOUND\"), WSAHOST_NOT_FOUND);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"TRY_AGAIN\"), WSATRY_AGAIN);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"NO_RECOVERY\"), WSANO_RECOVERY);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"NO_DATA\"), WSANO_DATA);\n\tzend_declare_class_constant_long(pthreads_socket_entry,  ZEND_STRL(\"NO_ADDRESS\"), WSANO_ADDRESS);\n#endif\n\n\t/*\n\t* Setup object handlers\n\t*/\n\tzend_handlers = (zend_object_handlers*)zend_get_std_object_handlers();\n\t\n\tmemcpy(&pthreads_handlers, zend_handlers, sizeof(zend_object_handlers));\n\n\tpthreads_handlers.offset = XtOffsetOf(pthreads_object_t, std);\n\n\tpthreads_handlers.free_obj = pthreads_base_free;\n\tpthreads_handlers.cast_object = pthreads_cast_object;\n\tpthreads_handlers.count_elements = pthreads_count_properties;\n\n\tpthreads_handlers.get_debug_info = pthreads_read_debug;\t\n\tpthreads_handlers.get_properties = pthreads_read_properties;\n\t\n\tpthreads_handlers.read_property = pthreads_read_property;\n\tpthreads_handlers.write_property = pthreads_write_property;\n\tpthreads_handlers.has_property = pthreads_has_property;\n\tpthreads_handlers.unset_property = pthreads_unset_property;\n\t\n\tpthreads_handlers.read_dimension = pthreads_read_dimension;\n\tpthreads_handlers.write_dimension = pthreads_write_dimension;\n\tpthreads_handlers.has_dimension = pthreads_has_dimension;\n\tpthreads_handlers.unset_dimension = pthreads_unset_dimension;\n\n\tpthreads_handlers.get_property_ptr_ptr = NULL;\n\tpthreads_handlers.get = NULL;\n\tpthreads_handlers.set = NULL;\n\tpthreads_handlers.get_gc = pthreads_base_gc;\n\n\tpthreads_handlers.clone_obj = pthreads_base_clone;\n\tpthreads_handlers.compare_objects = pthreads_compare_objects;\n\n\tmemcpy(&pthreads_socket_handlers, &pthreads_handlers, sizeof(zend_object_handlers));\n\n\tpthreads_socket_handlers.count_elements = pthreads_count_properties_disallow;\n\n\tpthreads_socket_handlers.cast_object = zend_handlers->cast_object;\n\tpthreads_socket_handlers.get_properties = pthreads_read_properties_disallow;\n\tpthreads_socket_handlers.read_property = pthreads_read_property_disallow;\n\tpthreads_socket_handlers.write_property = pthreads_write_property_disallow;\n\tpthreads_socket_handlers.has_property = pthreads_has_property_disallow;\n\tpthreads_socket_handlers.unset_property = pthreads_unset_property_disallow;\n\tpthreads_socket_handlers.read_dimension = pthreads_read_dimension_disallow;\n\tpthreads_socket_handlers.write_dimension = pthreads_write_dimension_disallow;\n\tpthreads_socket_handlers.has_dimension = pthreads_has_dimension_disallow;\n\tpthreads_socket_handlers.unset_dimension = pthreads_unset_dimension_disallow;\n\n\tZEND_INIT_MODULE_GLOBALS(pthreads, pthreads_globals_ctor, NULL);\t\n\n\tif (pthreads_globals_init()) {\n\t\tTSRMLS_CACHE_UPDATE();\n\t\t\n\t\t/*\n\t\t* Global Init\n\t\t*/\n\t\tpthreads_instance = TSRMLS_CACHE;\n\t}\n\n\tzend_set_user_opcode_handler(ZEND_RECV, php_pthreads_recv);\n\tzend_set_user_opcode_handler(ZEND_VERIFY_RETURN_TYPE, php_pthreads_verify_return_type);\n\n\treturn SUCCESS;\n}\n\nstatic inline int sapi_cli_deactivate(void) \n{\n\tfflush(stdout);\n\tif (SG(request_info).argv0) {\n\t\tfree(SG(request_info).argv0);\n\t\tSG(request_info).argv0 = NULL;\n\t}\n\treturn SUCCESS;\n}\n\nPHP_MSHUTDOWN_FUNCTION(pthreads)\n{\n\tif (pthreads_instance == TSRMLS_CACHE) {\n\t\tpthreads_globals_shutdown();\n\n\t\tif (memcmp(sapi_module.name, ZEND_STRL(\"cli\")) == SUCCESS) {\n\t\t\tsapi_module.deactivate = sapi_cli_deactivate;\n\t\t}\n\t}\n\n\tzend_execute_ex = zend_execute_ex_hook;\n\n\treturn SUCCESS;\n}\n\nZEND_MODULE_POST_ZEND_DEACTIVATE_D(pthreads)\n{\n\tif (PTHREADS_ZG(resources)) {\n\t\tzend_hash_destroy(PTHREADS_ZG(resources));\n\t\tFREE_HASHTABLE(PTHREADS_ZG(resources));\n\t\tPTHREADS_ZG(resources) = NULL;\n\t}\n\n\treturn SUCCESS;\n}\n\nPHP_RINIT_FUNCTION(pthreads) {\n\tZEND_TSRMLS_CACHE_UPDATE();\n\n\tzend_hash_init(&PTHREADS_ZG(resolve), 15, NULL, NULL, 0);\n\tzend_hash_init(&PTHREADS_ZG(filenames), 15, NULL, NULL, 0);\n\n\tPTHREADS_ZG(hard_copy_interned_strings) = 0;\n\n\tif (pthreads_instance != TSRMLS_CACHE) {\n\t\tif (memcmp(sapi_module.name, ZEND_STRL(\"cli\")) == SUCCESS) {\n\t\t\tsapi_module.deactivate = NULL;\n\t\t}\n\t}\n\n\treturn SUCCESS;\n}\n\nPHP_RSHUTDOWN_FUNCTION(pthreads) {\n\tzend_hash_destroy(&PTHREADS_ZG(resolve));\n\tzend_hash_destroy(&PTHREADS_ZG(filenames));\n\n\treturn SUCCESS;\n}\n\nPHP_MINFO_FUNCTION(pthreads)\n{\n\tphp_info_print_table_start();\n\tphp_info_print_table_row(2, \"Version\", PHP_PTHREADS_VERSION);\n\tphp_info_print_table_end();\n}\n\n#ifndef HAVE_PTHREADS_CLASS_THREADED\n#\tinclude <classes/threaded.h>\n#endif\n\n#ifndef HAVE_PTHREADS_CLASS_THREAD\n#\tinclude <classes/thread.h>\n#endif\n\n#ifndef HAVE_PTHREADS_CLASS_COLLECTABLE\n#\tinclude <classes/collectable.h>\n#endif\n\n#ifndef HAVE_PTHREADS_CLASS_WORKER\n#\tinclude <classes/worker.h>\n#endif\n\n#ifndef HAVE_PTHREADS_CLASS_POOL\n#\tinclude <classes/pool.h>\n#endif\n\n#ifndef HAVE_PTHREADS_CLASS_SOCKET\n#\tinclude <classes/socket.h>\n#endif\n\n#endif\n"
        },
        {
          "name": "php_pthreads.h",
          "type": "blob",
          "size": 1.98828125,
          "content": "/*\n  +----------------------------------------------------------------------+\n  | pthreads                                                             |\n  +----------------------------------------------------------------------+\n  | Copyright (c) Joe Watkins 2012 - 2014                                |\n  +----------------------------------------------------------------------+\n  | This source file is subject to version 3.01 of the PHP license,      |\n  | that is bundled with this package in the file LICENSE, and is        |\n  | available through the world-wide-web at the following url:           |\n  | http://www.php.net/license/3_01.txt                                  |\n  | If you did not receive a copy of the PHP license and are unable to   |\n  | obtain it through the world-wide-web, please send a note to          |\n  | license@php.net so we can mail you a copy immediately.               |\n  +----------------------------------------------------------------------+\n  | Author: Joe Watkins <joe.watkins@live.co.uk>                         |\n  +----------------------------------------------------------------------+\n */\n#ifndef HAVE_PHP_PTHREADS_H\n#define HAVE_PHP_PTHREADS_H\n#define PHP_PTHREADS_EXTNAME \"pthreads\"\n#define PHP_PTHREADS_VERSION \"3.2.1dev\"\n\nPHP_MINIT_FUNCTION(pthreads);\nPHP_MSHUTDOWN_FUNCTION(pthreads);\nPHP_RINIT_FUNCTION(pthreads);\nPHP_RSHUTDOWN_FUNCTION(pthreads);\nPHP_MINFO_FUNCTION(pthreads);\nZEND_MODULE_POST_ZEND_DEACTIVATE_D(pthreads);\n\n#ifndef HAVE_PTHREADS_CLASS_THREADED_H\n#\tinclude <classes/threaded.h>\n#endif\n\n#ifndef HAVE_PTHREADS_CLASS_THREAD_H\n#\tinclude <classes/thread.h>\n#endif\n\n#ifndef HAVE_PTHREADS_CLASS_COLLECTABLE_H\n#\tinclude <classes/collectable.h>\n#endif\n\n#ifndef HAVE_PTHREADS_CLASS_WORKER_H\n#\tinclude <classes/worker.h>\n#endif\n\n#ifndef HAVE_PTHREADS_CLASS_POOL_H\n#\tinclude <classes/pool.h>\n#endif\n\n#ifndef HAVE_PTHREADS_CLASS_SOCKET_H\n#\tinclude <classes/socket.h>\n#endif\n\nextern zend_module_entry pthreads_module_entry;\n#define phpext_pthreads_ptr &pthreads_module_entry\n\n#endif \n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}