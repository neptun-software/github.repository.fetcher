{
  "metadata": {
    "timestamp": 1736709963567,
    "page": 513,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "langhuihui/jessibuca",
      "stars": 2312,
      "defaultBranch": "v3",
      "files": [
        {
          "name": ".babelrc",
          "type": "blob",
          "size": 0.212890625,
          "content": "{\n\t\"presets\": [\n\t\t[\n\t\t\t\"@babel/env\",\n\t\t\t{\n\t\t\t\t\"modules\": false\n\t\t\t}\n\t\t]\n\t],\n\t\"plugins\": [\n\t\t\"@babel/plugin-external-helpers\",\n\t\t\"@babel/plugin-transform-runtime\",\n        \"@babel/plugin-proposal-class-properties\"\n\t]\n}\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1650390625,
          "content": "# See editorconfig.org\nroot = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_size = 4\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.02734375,
          "content": "* text=auto\n*.js text eol=lf"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1396484375,
          "content": "Debug\n.vs\n.vscode\n*.rar\nnode_modules\n.idea\n.cache\n.parcel-cache\ndemo/.vitepress/dist\nyarn.lock\npackage-lock.json\n.DS_Store\ndemo/public/pro/js\n\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.0751953125,
          "content": "[submodule \"ffmpeg\"]\n\tpath = ffmpeg\n\turl = https://git.ffmpeg.org/ffmpeg.git\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.32421875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>."
        },
        {
          "name": "README.en.md",
          "type": "blob",
          "size": 9.6376953125,
          "content": "<h1 align=\"center\"> Jessibuca </h1>\n\n<p align=\"center\">\n<b> English </b> | <a href=\"https://github.com/langhuihui/jessibuca/blob/v3/README.md\"> 简体中文 </a>\n</p>\n\nJessibuca is an open-source pure H5 live streaming player.\n\nIt compiles the audio and video decoding library into Js (wasm) through Emscripten to run in the browser. It is compatible with almost all browsers and can run on PC, mobile, and WeChat without the need for additional plug-ins.\n\n## Features\n\n- Supports H.264 video decoding (Baseline, Main, and High Profile, supporting B frame video decoding)\n- Supports H.265 video decoding (flv id == 12)\n- Supports AAC audio decoding (LC, HE, and HEv2 Profile)\n- Supports PCMA and PCMU audio formats decoding\n- Can set the playback buffer duration, and can set 0 buffer limit for extremely low latency (network jitter may cause stuttering)\n- Supports WASM smart frame discarding, ensuring no accumulated delay during long-time playback.\n- Can create multiple playback instances\n- Optimized programming, accelerated by CDN, GZIP compressed (actual download size is 500k), faster loading speed\n- Supports both http-flv and websocket-flv protocols and websocket-raw private protocols (raw data, smaller transmission volume, need to be used with Monibuca server)\nNote: when making http-flv requests, there may be cross-domain request problems, need to set access-control-allow-origin, websocket-flv does not have this problem by default\n- Supports HTTPS/WSS encryption for video transmission, ensuring video content transmission security\n- Video playback in mobile browsers will not become full-screen playback\n- Long-time playback on mobile browsers will not turn off the screen\n- Supports decoding of 8kHz PCM_ALAW, PCM_MULAW G.711 audio\n- Supports 3 video scaling modes: fill, aspect ratio, and aspect ratio scaling\n- Supports 0, 90, 180, 270 degree screen rotation\n- Comes with a bottom UI, supporting atomized configuration of whether to display (play/pause, volume adjustment, screenshot, recording/pausing recording, full screen/cancel full screen, traffic display)\n- The bottom UI is adapted to H5 mobile end and supports web full-screen (the operation bar adapts to landscape mode)\n- The bottom UI supports setting it to automatically hide, only displaying when the mouse focuses on the inside of the player, and disappearing when removed\n- Supports keyboard shortcuts\n- Supports OffscreenCanvas to improve Webgl rendering performance\n- Supports WebWorker multi-core decoding to improve multi-screen playback performance\n- Supports WebCodecs hardware decoding API\n- Supports WebCodecs hardware decoding configuration to display the picture through the video tag rendering or canvas tag rendering\n- Supports MediaSourceExtensions hardware decoding\n- Automatically switches to wasm software decoding when WebCodecs and MediaSourceExtensions hardware decoding fails\n- Supports video not fluttering when the resolution changes for the same playback address (software decoding only)\n- Supports automatic audio switching when the same playback address audio sampling and encoding changes\n- Supports video recording (WebM, MP4 format [video/webm;codecs=h264]), (MP4 format supports playing duration on IOS VLC player, but Android VLC player cannot display it, PC VLC player can play it)\n\n## PRO Version\n\n- Supports almost all methods and events of the open source version, and supports seamless upgrade to the PRO version.\n- In wasm decoding mode, Http-Flv and WS requests are initiated in the work thread by default to reduce data transfer from the main thread to the worker thread and improve performance.\n- 360 browser can play H265 accelerated decoding using MSE.\n- Latest edge can use MSE accelerated decoding for H265.\n- Latest chrome version 107 and above support hardware-accelerated decoding and playback of H265 using Webcodecs.\n- Supports MSE hardware decoding with intelligent frame skipping to eliminate screen flicker and frame dropping, with no accumulated delays during long-term playback.\n- Supports Webcodecs hardware decoding with intelligent frame skipping to eliminate screen flicker and frame dropping, with no accumulated delays during long-term playback.\n- Supports detecting network latency and can trigger playback logic again after a certain delay.\n- Supports playing single video or audio data from live streaming or TF card streaming.\n- Supports audio communication: supports setting PCM / G711A / G711U format data, supports setting a sampling rate of 16000Hz or 8000Hz, supports setting a sampling precision of 32bits or 16bits or 8bits, and supports setting single-channel or dual-channel.\n- Supports UI control voice communication interaction buttons, providing event callbacks for easy operation in full-screen mode.\n- Supports multiple playback speeds for audio and video streams (TF card streams), with control for 2/4/8/16/32/64 times, and option to only decode and play I-frames after a certain multiple.\n- Supports a bottom 24-hour progress bar for TF card streams (audio and video streams), with precision control and event callbacks for easy operation in full-screen mode.\n- Supports pausing and resuming TF card streams (without disconnecting, stopping rendering, facilitating business notifications to the server not to push streams, and avoiding rendering timeouts).\n- Supports UI control PTZ operation disc, providing event callbacks for easy operation in full-screen mode.\n- Supports UI control to directly close the player, with notification event, for easy closure of a specific player page in multi-screen mode.\n- Supports UI control flow resolution configuration and display, providing event callbacks for easy operation in full-screen mode.\n- Supports UI control electronic zoom, providing event callbacks for easy operation in full-screen mode.\n- Supports UI control to pause the non-sending stream in TF card stream configuration, and provides event monitoring for the upper layer to cooperate with the server to stop sending the stream and implement the pause function of the non-sending stream.\n- Supports switching display modes (stretch, zoom, normal) for UI controls.\n- Supports HLS H264 protocol.\n- Supports mirror rotation (horizontal + vertical).\n- Supports crypto decryption playback.\n- Supports webrtc standard stream playback.\n- Supports WebTransport protocol playback.\n- Supports H264 raw stream playback.\n- Supports H265 raw stream playback.\n- Supports rendering and playback through canvas after MSE hardware decoding.\n- Supports rendering and playback through video after WASM decoding.\n- Supports video recording in MP4 (MPEG-4) format, supports H264 and H265 formats, and recorded videos support seeking, fast forwarding, displaying the total duration, etc. (video recording only, audio is not currently supported).\n- Supports custom watermarks for the player, displaying watermarks such as company name or logo during player playback.\n- Supports adding custom watermarks during screenshot capture, such as company name or logo.\n- Supports SIMD software decoding acceleration (using Chrome/Edge 91, Firefox 89, and later officially provided SIMD instruction set acceleration, bringing 100%-300% performance improvement for resolutions above 1080P).\n- Supports dynamically switching resolutions during playback.\n- Supports canvas rendering with webgpu (requires chrome canary version and enabling chrome://flags/#enable-unsafe-webgpu).\n- Supports customized service development.\n\n### Comparison between PRO version and open source version\n\n[http://jessibuca.monibuca.com/pro.html#%E5%BC%80%E6%BA%90%E7%89%88%E4%B8%8Epro-%E5%B7%AE%E5%BC%82%E6%80%A7](http://jessibuca.monibuca.com/pro.html#%E5%BC%80%E6%BA%90%E7%89%88%E4%B8%8Epro-%E5%B7%AE%E5%BC%82%E6%80%A7)\n\n## PRO AI Capability\n\n- Face Recognition\n\n## Experience Links\n\n### Jessibuca Open Source Version\n\n- https Link: [https://jessibuca.com/player.html](https://jessibuca.com/player.html)\n- http Link: [http://jessibuca.monibuca.com/player.html](http://jessibuca.monibuca.com/player.html)\n\n### Jessibuca Pro\n\n- https Link: [https://jessibuca.com/player-pro.html](https://jessibuca.com/player-pro.html)\n- http Link: [http://jessibuca.monibuca.com/player-pro.html](http://jessibuca.monibuca.com/player-pro.html)\n\n## Performance Testing\n\n### Test Results by User \"百鸣\"\n\n[https://blog.csdn.net/huapeng_guo/article/details/124385345](https://blog.csdn.net/huapeng_guo/article/details/124385345)\n\n## Local Testing\n\n- Run `yarn` or `npm i`\n- Run `yarn dev` or `npm run dev`\n\n## API\n\n[API](/demo/api.md)\n## HTTP Address\n\n[http://jessibuca.monibuca.com/](http://jessibuca.monibuca.com/)\n\n## HTTPS Address\n\n[https://jessibuca.com](https://jessibuca.com)\n\n## Demo\n\n[Demo](/demo/demo.md)\n\n## Directory Structure of Source Code\n\n- `wasm/obj` contains the bytecode library of the emscripten-compiled FFmpeg decoding library.\n- `dist` contains the compiled output js and wasm files.\n- `src` contains the source code of js.\n\n## Packaging JS\n\nRun `yarn build` or `npm run build`.\n\n## Reference Relationship\n\n- `jessibuca.js` is the business logic js code.\n- `decoder.js` is the js code that runs in the worker process responsible for audio and video decoding.\n- `decoder.wasm` is the glue code for `decoder.js`.\n\n## Compiling C++ Code\n\nRun `yarn build:wasm` or `npm run build:wasm`.\n\n## Basic Principle\n\n<img src=\"/demo/public/tech.png\">\n\n## star\n\n[![Star History Chart](https://api.star-history.com/svg?repos=langhuihui/jessibuca&type=Date)](https://star-history.com/#langhuihui/jessibuca&Date)\n\n## Support\n\n### Author of the First\n<img src=\"/demo/public/wx.jpg\"><img src=\"/demo/public/alipay.jpg\">\n\n### Author of the V3 Version\n<img src=\"/demo/public/wx-pay-wc.jpg\" style=\"width:333px\"><img src=\"/demo/public/alipay-wc.jpg\" style=\"width:333px\">\n\n\n## Group\n\n<img src=\"/demo/public/qrcode.jpeg\">\n\n\n## QQ Group\n<img src=\"/demo/public/qq-qrcode.jpg\">\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.1904296875,
          "content": "<p align=\"center\"><img src=\"/demo/public/logo.png\" /></p>\n<h1 align=\"center\"> Jessibuca </h1>\n\n<p align=\"center\">\n<a href=\"https://github.com/langhuihui/jessibuca/blob/v3/README.en.md\"> English </a> | <b> 简体中文 </b>\n</p>\n\nJessibuca 是一款开源的纯H5直播流播放器，通过Emscripten将音视频解码库编译成Js（wasm)运行于浏览器之中。兼容几乎所有浏览器，可以运行在PC、手机、微信中，无需额外安装插件。\n\n## 功能\n\n- 支持解码H.264视频(Baseline, Main, High Profile全支持，支持解码B帧视频)\n- 支持解码H.265视频（flv id == 12）\n- 支持[enhanced-rtmp](https://github.com/veovera/enhanced-rtmp/blob/main/enhanced-rtmp.pdf)H265格式。\n- 支持解码AAC音频(LC,HE,HEv2 Profile全支持)\n- 支持解码PCMA音频以及PCMU音频格式\n- 可设置播放缓冲区时长，可设置0缓冲极限低延迟（网络抖动会造成卡顿现象）\n- 支持WASM智能不花屏丢帧，前台长时间播放绝不累积延迟。\n- 可创建多个播放实例\n- 程序精简，经CDN加速，GZIP压缩（实际下载500k），加载速度更快\n- 同时支持http-flv和websocket-flv协议以及websocket-raw私有协议（裸数据，传输量更小，需要搭配Monibuca服务器）\n注：以http-flv请求时，存在跨域请求的问题，需要设置access-control-allow-origin, websocket-flv默认不存在此问题\n- 支持HTTPS/WSS加密视频传输，保证视频内容传输安全\n- 手机浏览器内打开视频不会变成全屏播放\n- 手机浏览器内打开长时间不会息屏\n- 支持解码8kHz PCM_ALAW, PCM_MULAW的G.711音频\n- 支持填充，等比，等比缩放 3中视频缩放模式\n- 支持0，90，180，270度画面旋转\n- 自带底部UI,支持原子化配置是否显示(播放/暂停、音量调节、截屏、录制/暂停录制、全屏/取消全屏、流量显示)\n- 自带底部UI适配H5移动端，并支持web端全屏(操作栏适配横屏)\n- 自带底部UI支持设置成自动隐藏，只有鼠标聚焦到播放器内部才会显示，移除之后，会消失。\n- 支持键盘快捷键\n- 支持OffscreenCanvas，提升Webgl渲染性能\n- 支持WebWorker多核解码，提升多画面播放性能\n- 支持WebCodecs硬件解码API\n- 支持WebCodecs硬件解码配置通过video标签渲染或者canvas标签渲染画面\n- 支持MediaSourceExtensions 硬件解码\n- 支持WebCodecs和MediaSourceExtensions硬解码失败的情况下自动切换到wasm软解码\n- 支持同一个播放地址视频分辨率发生变化的时候视频不花屏(仅软解码)\n- 支持同一个播放地址音频采样和编码发生改变的时候音频自动切换\n- 支持视频录制(WebM、MP4格式[video/webm;codecs=h264])，(MP4格式支持在IOS VLC播放器显示时长播放，Android VLC播放器无法显示时长播放,PC VLC播放器可以播放)\n\n## PRO版本\n\n### 直播流(支持19种直播格式)\n- 支持开源版几乎所有的方法和事件，支持无缝升级到PRO版本。\n- wasm解码模式下默认work线程中发起Http-Flv、WS请求，减少主线程往worker线程传递数据，提升性能。\n- 360浏览器可播放使用MSE加速解码H265。\n- 最新edge可使用MSE加速解码H265。\n- 最新chrome 107版本及以上支持使用Webcodecs硬件加速解码播放H265。\n- 支持WASM切换到后台播放，长时间播放绝不累积延迟。\n- 支持MSE硬解码智能不花屏丢帧，长时间播放绝不累积延迟。\n- 支持MSE切换到后台播放，长时间播放绝不累积延迟。\n- 支持Webcodecs硬解码智能不花屏丢帧，长时间播放绝不累积延迟。\n- 支持Webcodecs切换到后台播放，长时间播放绝不累积延迟。\n- 支持检测网络延迟，并可以设置延迟达到一定时间段重新触发播放逻辑。\n- 支持只播放直播流或者TF卡流中的单一视频或者单一音频数据。\n- 支持语音通讯：支持设置采集PCM/G711A/G711U格式的数据、支持设置采样率16000Hz或8000Hz，支持设置采样精度32bits或者16bits或者8bits，支持设置单通道或双通道。\n- 支持UI控件语音通讯交互按钮，提供事件回调，方便全屏模式下操作。\n- 支持UI控件PTZ操作盘，提供事件回调，方便全屏模式下操作。\n- 支持UI控件直接关闭播放器，并有事件通知，方便在多屏模式下，对直接对某个播放页面进行关闭操作。\n- 支持UI控件流分辨率配置和展示，提供事件回调，方便在全屏模型下操作。\n- 支持UI控件电子放大，提供事件回调，方便在全屏模型下操作。\n- 支持UI控件在TF卡流配置不断流暂停，并且提供事件监听，方便上层去配合服务器端停止发送流，实现不断流的暂停功能。\n- 支持UI控件切换显示模式(拉伸、缩放、正常)\n- 支持HLS H264格式协议。\n- 支持HLS H265格式协议。\n- 支持镜像旋转(水平+垂直)。\n- 支持加密私有协议流 (M7S服务器)播放。\n- 支持webrtc标准流播放。\n- 支持webrtc(zlm服务器播放地址)流播放。\n- 支持webrtc(srs服务器播放地址)流录制。\n- 支持webrtc(阿里云播放地址)流播放。\n- 支持WebTransport协议播放。\n- 支持H264裸流播放。\n- 支持H265裸流播放。\n- 支持Fmp4 H264格式播放。\n- 支持Fmp4 H265格式播放。\n- 支持MPEG2-TS H264格式播放。\n- 支持MPEG2-TS H265格式播放。\n- 支持MSE硬解码之后通过canvas渲染播放。\n- 支持WASM解码之后通过video渲染播放。\n- 支持WCS硬解码之后通过canvas webgl2渲染播放。\n- 支持视频录制MP4(MPEG-4)格式,支持H264、H265格式，录制的视频支持seek，快进，显示总时长等（仅支持视频录制，暂不支持音频）。\n- 支持视频录制Flv格式，支持H264、H265格式，录制的视频支持seek，快进，显示总时长等（vlc播放器）。\n- 支持播放器自定义水印,支持播放器播放过程中，显示水印，例如公司名称，公司logo等。\n- 支持截图加自定义水印,支持调用截图接口的时候，添加自定义水印，例如公司名称，公司logo等。\n- 支持全屏水印，支持在播放窗口下，显示水印，例如公司名称，公司logo等。\n- 支持SIMD软解码加速(使用Chrome/Edge 91, Firefox89及之后正式提供的SIMD指令集加速解码, 在1080P以上分辨率带来100%-300%的性能提升)。\n- 支持播放过程中动态切换分辨率。\n- 支持webgpu渲染canvas ~~（需要chrome canary 版本，然后设置chrome://flags/#enable-unsafe-webgpu 打开）~~ 最新版本chrome（>=113）默认支持。\n- 支持抛出SEI数据，方便上层业务进行二次开发。\n- 支持NxN路UI多屏播放(支持1x1,2x2,3x3,4x4),支持不规则多屏播放(3-1，4-1)。\n- 支持国标SM4加密流播放。\n- 支持XOR加密流播放。\n- 支持定制化服务开发。\n\n### 回放流\n\n- 支持音视频回放流（TF卡流）的国标 GB28181 [国标协议介绍](https://jessibuca.com/pro-playback.html)\n- 支持音视频回放流（TF卡流）的倍数播放，支持2/4/8/16/32/64倍数控制，支持设置多少倍之后只解码I帧播放。\n- 支持音视频回放流（TF卡流）UI控件的底部24小时进度条，并支持精度控制，提供事件回调，方便全屏模式下操作。\n- 支持音视频回放流（TF卡流）UI控件的底部固定时长进度条，并支持精度控制，提供事件回调，方便全屏模式下操作。\n- 支持音视频回放流（TF卡流）支持不规则码流，支持配置根据流的码率动态显示，也支持配置按照固定的码率显示。\n- 支持音视频回放流（TF卡流）支持支持缓存流数据（对于存在有些流会在一倍率的情况下一下子以2倍甚至4倍的速率推送的情况）\n\n\n\n### 点播文件(支持两种点播格式)\n\n- 支持MP4格式点播文件播放（支持H264和H265编码格式）。\n- 支持HLS格式点播文件播放（支持H264和H265编码格式）。\n- 支持硬解码(MediaSource、Webcodec)和软解码(Wasm,Wasm(simd))\n- 支持支持加密文件(国标SM4、XOR加密、m7s加密)\n\n### PRO和开源版对比\n\n[http://jessibuca.monibuca.com/pro.html#%E5%BC%80%E6%BA%90%E7%89%88%E4%B8%8Epro-%E5%B7%AE%E5%BC%82%E6%80%A7](http://jessibuca.monibuca.com/pro.html#%E5%BC%80%E6%BA%90%E7%89%88%E4%B8%8Epro-%E5%B7%AE%E5%BC%82%E6%80%A7)\n\n## PRO AI 能力\n\n- 人脸识别 [链接](https://jessibuca.com/pro-ai.html)\n- 物品识别 [链接](https://jessibuca.com/pro-ai.html)\n- 黑屏、绿屏、花屏、马赛克检查 [链接](https://jessibuca.com/pro-ai.html)\n- 遮挡物检查 [链接](https://jessibuca.com/pro-ai.html)\n\n## PRO 扩展模块\n\n- Mp4 录制（MPEG-4）(支持音视频) [链接](https://jessibuca.com/pro-module.html)\n- 直播流、回放(录像)流下载（录制）器 [链接](https://jessibuca.com/pro-module.html)\n\n\n## LiveVideoStack 分享\n\n- [掘金](https://juejin.cn/post/7306736066361753634)\n- [CSDN](https://blog.csdn.net/wancheng815926/article/details/134705526?spm=1001.2014.3001.5502)\n- [知乎](https://zhuanlan.zhihu.com/p/669605282)\n\n## 体验地址\n\n### Jessibuca 开源版\n\n- https Link: [https://jessibuca.com/player.html](https://jessibuca.com/player.html)\n- http Link: [http://jessibuca.monibuca.com/player.html](http://jessibuca.monibuca.com/player.html)\n\n### Jessibuca Pro\n\n- https Link: [https://jessibuca.com/player-pro.html](https://jessibuca.com/player-pro.html)\n- http Link: [http://jessibuca.monibuca.com/player-pro.html](http://jessibuca.monibuca.com/player-pro.html)\n\n## 性能测试情况\n\n### 网友`百鸣`的测评\n\n[https://blog.csdn.net/huapeng_guo/article/details/124385345](https://blog.csdn.net/huapeng_guo/article/details/124385345)\n\n\n## 性能测试情况（Pro）\n\n[单路](https://jessibuca.com/pro-doc/single.pdf)\n\n[多路](https://jessibuca.com/pro-doc/multi.pdf)\n\n[多路-16路-内存消耗](https://jessibuca.com/pro-doc/16multi-1080p.pdf)\n\n[多路-12路-低延迟](https://jessibuca.com/pro-doc/12multi-delay.pdf)\n\n[多路-24路-720p-1080p](https://jessibuca.com/pro-doc/24multi-720-1080.pdf)\n\n## 本地测试\n\n- 执行 `yarn` 或者 `npm i`\n- 执行 `yarn dev` 或者 `npm run dev`\n\n## API\n\n[API](/demo/api.md)\n\n## Document/Question 文档/答疑\n\n[DOC](/demo/document.md)\n\n## DEMO\n\n[Demo](/demo/demo.md)\n\n\n## HTTP 地址\n\n[http://jessibuca.monibuca.com/](http://jessibuca.monibuca.com/)\n\n## HTTPS 地址\n\n[https://jessibuca.com](https://jessibuca.com)\n\n\n## 源码目录结构\n\n- wasm/obj 存放 emscripten 编译好的 ffmpeg 解码库的字节码库\n- dist 存放编译输出的 js 和 wasm 文件\n- src 存放 js 源码\n\n## 打包 js\n\n执行 `yarn build` 或者 `npm run build`\n\n## 引用关系\n\n- jessibuca.js 是业务 js 代码\n- decoder.js 是 worker 进程跑的负责音视频解码的 js 代码\n- decoder.wasm 是 decoder.js 的胶水代码\n\n## 编译 C++ 代码\n\n执行yarn build:wasm 或者 npm run build:wasm\n\n## 基本原理\n\n<img src=\"/demo/public/tech.png\">\n\n## star\n\n[![Star History Chart](https://api.star-history.com/svg?repos=langhuihui/jessibuca&type=Date)](https://star-history.com/#langhuihui/jessibuca&Date)\n\n## 支持作者\n\n### 第一作者\n<img src=\"/demo/public/wx.jpg\"><img src=\"/demo/public/alipay.jpg\">\n\n### V3版本作者\n<img src=\"/demo/public/wx-pay-wc.jpg\" style=\"width:333px\"><img src=\"/demo/public/alipay-wc.jpg\" style=\"width:333px\">\n\n## 群\n\n<img src=\"/demo/public/qrcode.jpeg\">\n\n\n## qq频道\n<img src=\"/demo/public/qq-qrcode.jpg\">\n\n"
        },
        {
          "name": "d.ts",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "ffmpeg",
          "type": "commit",
          "content": null
        },
        {
          "name": "ffmpeg.py",
          "type": "blob",
          "size": 1.08203125,
          "content": "#!/usr/bin/python\n\nimport os\n\nargs = [\n    'extra-cflags=\"-c -Oz -fPIC\"',\n    'cc=emcc',\n    'cxx=em++',\n    'ar=emar',\n    'ranlib=emranlib',\n    'prefix=../wasm/obj',\n    'target-os=none',\n    'arch=x86_64',\n    'cpu=generic'\n    ]\ndisables = [\n    'everything','all','avdevice','postproc','avfilter','programs','asm','parsers','muxers','demuxers','filters',\n    'doc','devices','network','bsfs','shared','hwaccels','debug','protocols','indevs','outdevs','runtime-cpudetect','pthreads'\n]\nenables = [\n    'small','cross-compile','gpl','avcodec','swresample','ffmpeg','avformat',\n    'muxer=mp4',\n    'parser=h264',\n    'parser=hevc',\n    'parser=aac',\n    'decoder=h264',\n    'decoder=hevc',\n    'decoder=aac',\n    'decoder=pcm_alaw',\n    'decoder=pcm_mulaw',\n    'encoder=pcm_alaw',\n    'encoder=pcm_mulaw',\n    'encoder=aac','static'\n]\nenables = ['enable-'+item for i,item in enumerate(enables)]\ndisables = ['disable-'+item for i,item in enumerate(disables)]\nos.system('emconfigure ./configure --' +\n          (' --'.join(args+disables+enables)))\nos.system('make clean && emmake make -j && make install')\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.77734375,
          "content": "{\n    \"name\": \"jessibuca\",\n    \"version\": \"3.3.16\",\n    \"scripts\": {\n        \"build\": \"npx cross-env NODE_ENV=production rollup -c\",\n        \"build:wasm\": \"python wasm/make.py --wasm && npm run build && npm run build:demo\",\n        \"build:demo\": \"vitepress build demo\",\n        \"dev\": \"vitepress dev demo --open\",\n        \"dev:ip\": \"vitepress dev demo --host 0.0.0.0\",\n        \"dev:watch\": \"npx cross-env NODE_ENV=development rollup -c -m -w\"\n    },\n    \"dependencies\": {\n        \"screenfull\": \"5.1.0\",\n        \"recordrtc\": \"5.6.2\",\n        \"element-plus\": \"2.2.25\"\n    },\n    \"devDependencies\": {\n        \"vitepress\": \"0.16.1\",\n        \"typescript\": \"4.4.4\",\n        \"@rollup/plugin-json\": \"4.1.0\",\n        \"@babel/core\": \"^7.12.16\",\n        \"@babel/plugin-external-helpers\": \"^7.12.13\",\n        \"@babel/plugin-transform-runtime\": \"^7.12.15\",\n        \"@babel/plugin-proposal-class-properties\": \"^7.17.12\",\n        \"@babel/preset-env\": \"^7.12.16\",\n        \"@babel/runtime\": \"^7.12.13\",\n        \"autoprefixer\": \"^10.2.4\",\n        \"babel-eslint\": \"^10.1.0\",\n        \"cross-env\": \"^7.0.3\",\n        \"cssnano\": \"^4.1.10\",\n        \"less\": \"4.2.0\",\n        \"rollup\": \"^2.39.0\",\n        \"postcss\": \"^8.1.6\",\n        \"postcss-base64\": \"0.7.1\",\n        \"rollup-plugin-babel\": \"^4.4.0\",\n        \"rollup-plugin-babel-minify\": \"^10.0.0\",\n        \"rollup-plugin-commonjs\": \"^10.1.0\",\n        \"rollup-plugin-node-resolve\": \"^5.2.0\",\n        \"rollup-plugin-postcss\": \"^4.0.0\",\n        \"rollup-plugin-replace\": \"^2.2.0\",\n        \"rollup-plugin-string\": \"^3.0.0\",\n        \"rollup-plugin-terser\": \"^7.0.2\",\n        \"rollup-plugin-copy\": \"^3.4.0\",\n        \"servor\": \"^4.0.2\"\n    },\n    \"peerDependencies\": {\n        \"postcss\": \"^8.1.6\"\n    },\n    \"browserslist\": [\n        \"last 3 chrome versions\",\n        \"last 3 safari versions\"\n    ]\n}\n"
        },
        {
          "name": "rollup.config.js",
          "type": "blob",
          "size": 3.6181640625,
          "content": "import babel from 'rollup-plugin-babel'; // 大家都理解，方便使用 javascript 的新特性,es新特性的解析\nimport commonjs from 'rollup-plugin-commonjs'; // 插件将CommonJS模块转换为 ES2015 提供给 Rollup 处理\nimport postcss from 'rollup-plugin-postcss'; // 提取样式文件（sass 或者 less 等）添加浏览器前缀 以及压缩\nimport autoprefixer from 'autoprefixer'; // 添加前缀\nimport cssnano from 'cssnano'; // 压缩css\nimport replace from 'rollup-plugin-replace'; // 变量替换，可以将动态设置的变量提取出来在配置文件中设置\nimport nodeResolve from 'rollup-plugin-node-resolve';\nimport json from '@rollup/plugin-json'; // 解析json格式\nimport copy from 'rollup-plugin-copy';  // 直接复制文件和文件夹。\nimport {terser} from 'rollup-plugin-terser'; // 压缩\nimport base64 from 'postcss-base64'; // 图片变成base64\n\n\nconst isProd = process.env.NODE_ENV === 'production';\n\nconst baseConfig = {\n    output: {\n        format: 'umd',\n        sourcemap: !isProd,\n    },\n    plugins: [\n        nodeResolve(),\n        commonjs(),\n        babel({\n            runtimeHelpers: true,\n            exclude: 'node_modules/**',\n            presets: [\n                [\n                    '@babel/preset-env',\n                    {\n                        modules: false,\n                    },\n                ],\n            ],\n            plugins: ['@babel/plugin-external-helpers', '@babel/plugin-transform-runtime'],\n        }),\n        replace({\n            exclude: 'node_modules/**',\n            __ENV__: JSON.stringify(process.env.NODE_ENV || 'development'),\n            __VERSION__: JSON.stringify(require('./package.json').version),\n        }),\n        isProd && terser({\n            mangle: true,\n            output: {\n                comments: () => false,\n            },\n        }),\n        isProd && {\n            name: 'removeHtmlSpace',\n            transform(code) {\n                return {\n                    code: code.replace(/\\\\n*\\s*</g, '<').replace(/>\\\\n*\\s*/g, '>'),\n                };\n            },\n        },\n        copy({\n            targets: [\n                {\n                    src: \"src/decoder/decoder.wasm\",\n                    dest: isProd ? 'dist' : 'demo/public'\n                },\n                {\n                    src: 'd.ts/jessibuca.d.ts',\n                    dest: isProd ? 'dist' : 'demo/public'\n                }\n            ],\n            verbose: true, // Output copied items to console.\n            copyOnce: true //  Copy items once. Useful in watch mode.\n        })\n    ],\n};\n\nexport default [\n    {\n        input: 'src/jessibuca.js',\n        output: {\n            name: 'jessibuca',\n            file: isProd ? 'dist/jessibuca.js' : 'demo/public/jessibuca.js',\n        },\n        plugins: [\n            postcss({\n                plugins: [\n                    base64({\n                        extensions: ['.png'],\n                        root: './src/control/',\n                    }),\n                    autoprefixer(),\n                    cssnano({\n                        preset: 'default',\n                    }),\n                ],\n                sourceMap: !isProd,\n                extract: false,\n            }),\n            json()\n        ],\n    },\n    {\n        input: 'src/worker.js',\n        output: {\n            name: 'decoder',\n            file: isProd ? 'dist/decoder.js' : 'demo/public/decoder.js',\n        },\n        plugins: [],\n    }\n].map(config => {\n    return {\n        input: config.input,\n        output: {\n            ...baseConfig.output,\n            ...config.output,\n        },\n        plugins: [...baseConfig.plugins, ...config.plugins],\n    };\n});\n"
        },
        {
          "name": "settings.js",
          "type": "blob",
          "size": 97.240234375,
          "content": "//\n// @license\n// Copyright 2010 The Emscripten Authors\n// SPDX-License-Identifier: MIT\n//\n\n//\n// Various compiler settings. These are simply variables present when the\n// JS compiler runs. To set them, do something like:\n//\n//   emcc -sOPTION1=VALUE1 -sOPTION2=VALUE2 [..other stuff..]\n//\n// For convenience and readability `-sOPTION` expands to `-sOPTION=1`\n// and `-sNO_OPTION` expands to `-sOPTION=0` (assuming OPTION is a valid\n// option).\n//\n// See https://github.com/emscripten-core/emscripten/wiki/Code-Generation-Modes/\n//\n// Note that the values here are the defaults which can be affected either\n// directly via `-s` flags or indirectly via other options (e.g. -O1,2,3)\n//\n// These flags should only have an effect when compiling to JS, so there\n// should not be a need to have them when just compiling source to\n// bitcode. However, there will also be no harm either, so it is ok to.\n//\n// Settings in this file can be directly set from the command line.  Internal\n// settings that are not part of the user ABI live in the settings_internal.js.\n//\n// In general it is best to pass the same arguments at both compile and link\n// time, as whether wasm object files are used or not affects when codegen\n// happens (without wasm object files, codegen is done entirely during\n// link; otherwise, it is during compile). Flags affecting codegen must\n// be passed when codegen happens, so to let a build easily switch when codegen\n// happens (LTO vs normal), pass the flags at both times. The flags are also\n// annotated in this file:\n//\n// [link] - Should be passed at link time. This is the case for all JS flags,\n//          as we emit JS at link (and that is most of the flags here, and\n//          hence the default).\n// [compile+link] - A flag that has an effect at both compile and link time,\n//                  basically any time emcc is invoked. The same flag should be\n//                  passed at both times in most cases.\n//\n// If not otherwise specified, a flag is [link]. Note that no flag is only\n// relevant during compile time, as during link we may do codegen for system\n// libraries and other support code, so all flags are either link or\n// compile+link.\n//\n\n// Tuning\n\n// Whether we should add runtime assertions, for example to\n// check that each allocation to the stack does not\n// exceed its size, whether all allocations (stack and static) are\n// of positive size, etc., whether we should throw if we encounter a bad __label__, i.e.,\n// if code flow runs into a fault\n// ASSERTIONS == 2 gives even more runtime checks, that may be very slow. That\n// includes internal dlmalloc assertions.\n// [link]\nvar ASSERTIONS = 1;\n\n// Whether extra logging should be enabled.\n// This logging isn't quite assertion-quality in that it isn't necessarily a\n// symptom that something is wrong.\n// [link]\nvar RUNTIME_LOGGING = false;\n\n// Chooses what kind of stack smash checks to emit to generated code:\n// Building with ASSERTIONS=1 causes STACK_OVERFLOW_CHECK default to 1.\n// Since ASSERTIONS=1 is the default at -O0, which itself is the default\n// optimization level this means that this setting also effectively\n// defaults 1, absent any other settings.\n// 0: Stack overflows are not checked.\n// 1: Adds a security cookie at the top of the stack, which is checked at end of\n//    each tick and at exit (practically zero performance overhead)\n// 2: Same as above, but also runs a binaryen pass which adds a check to all\n//    stack pointer assignments. Has a small performance cost.\n// [link]\nvar STACK_OVERFLOW_CHECK = 0;\n\n// When set to 1, will generate more verbose output during compilation.\n// [general]\nvar VERBOSE = false;\n\n// Whether we will run the main() function. Disable if you embed the generated\n// code in your own, and will call main() yourself at the right time (which you\n// can do with Module.callMain(), with an optional parameter of commandline args).\n// [link]\nvar INVOKE_RUN = true;\n\n// If 0, the runtime is not quit when main() completes (allowing code to\n// run afterwards, for example from the browser main event loop). atexit()s\n// are also not executed, and we can avoid including code for runtime shutdown,\n// like flushing the stdio streams.\n// Set this to 1 if you do want atexit()s or stdio streams to be flushed\n// on exit.\n// This setting is controlled automatically in STANDALONE_WASM mode:\n//  - For a command (has a main function) this is always 1\n//  - For a reactor (no a main function) this is always 0\n// [link]\nvar EXIT_RUNTIME = false;\n\n// How to represent the initial memory content.\n// 0: embed a base64 string literal representing the initial memory data\n// 1: create a *.mem file containing the binary data of the initial memory;\n\n//    use the --memory-init-file command line switch to select this method\n// [link]\nvar MEM_INIT_METHOD = false;\n\n// The total stack size. There is no way to enlarge the stack, so this\n// value must be large enough for the program's requirements. If\n// assertions are on, we will assert on not exceeding this, otherwise,\n// it will fail silently.\n// [link]\nvar TOTAL_STACK = 5*1024*1024;\n\n// What malloc()/free() to use, out of\n//  * dlmalloc - a powerful general-purpose malloc\n//  * emmalloc - a simple and compact malloc designed for emscripten\n//  * emmalloc-debug - use emmalloc and add extra assertion checks\n//  * emmalloc-memvalidate - use emmalloc with assertions+heap consistency\n//                           checking.\n//  * emmalloc-verbose - use emmalloc with assertions + verbose logging.\n//  * emmalloc-memvalidate-verbose - use emmalloc with assertions + heap\n//                                   consistency checking + verbose logging.\n//  * none     - no malloc() implementation is provided, but you must implement\n//               malloc() and free() yourself.\n// dlmalloc is necessary for split memory and other special modes, and will be\n// used automatically in those cases.\n// In general, if you don't need one of those special modes, and if you don't\n// allocate very many small objects, you should use emmalloc since it's\n// smaller. Otherwise, if you do allocate many small objects, dlmalloc\n// is usually worth the extra size. dlmalloc is also a good choice if you want\n// the extra security checks it does (such as noticing metadata corruption in\n// its internal data structures, which emmalloc does not do).\n// [link]\nvar MALLOC = \"dlmalloc\";\n\n// If 1, then when malloc would fail we abort(). This is nonstandard behavior,\n// but makes sense for the web since we have a fixed amount of memory that\n// must all be allocated up front, and so (a) failing mallocs are much more\n// likely than on other platforms, and (b) people need a way to find out\n// how big that initial allocation (INITIAL_MEMORY) must be.\n// If you set this to 0, then you get the standard malloc behavior of\n// returning NULL (0) when it fails.\n//\n// Setting ALLOW_MEMORY_GROWTH turns this off, as in that mode we default to\n// the behavior of trying to grow and returning 0 from malloc on failure, like\n// a standard system would. However, you can still set this flag to override\n// that.\n//    * This is a mostly-backwards-compatible change. Previously this option\n//      was ignored when growth was on. The current behavior is that growth\n//      turns it off by default, so for users that never specified the flag\n//      nothing changes. But if you do specify it, it will have an effect now,\n//      which it did not previously. If you don't want that, just stop passing\n//      it in at link time.\n//\n// [link]\nvar ABORTING_MALLOC = true;\n\n// The initial amount of memory to use. Using more memory than this will\n// cause us to expand the heap, which can be costly with typed arrays:\n// we need to copy the old heap into a new one in that case.\n// If ALLOW_MEMORY_GROWTH is set, this initial amount of memory can increase\n// later; if not, then it is the final and total amount of memory.\n//\n// (This option was formerly called TOTAL_MEMORY.)\n// [link]\nvar INITIAL_MEMORY = 16777216;\n\n// Set the maximum size of memory in the wasm module (in bytes). This is only\n// relevant when ALLOW_MEMORY_GROWTH is set, as without growth, the size of\n// INITIAL_MEMORY is the final size of memory anyhow.\n//\n// Note that the default value here is 2GB, which means that by default if you\n// enable memory growth then we can grow up to 2GB but no higher. 2GB is a\n// natural limit for several reasons:\n//\n//   * If the maximum heap size is over 2GB, then pointers must be unsigned in\n//     JavaScript, which increases code size. We don't want memory growth builds\n//     to be larger unless someone explicitly opts in to >2GB+ heaps.\n//   * Historically no VM has supported more >2GB+, and only recently (Mar 2020)\n//     has support started to appear. As support is limited, it's safer for\n//     people to opt into >2GB+ heaps rather than get a build that may not\n//     work on all VMs.\n//\n// To use more than 2GB, set this to something higher, like 4GB.\n//\n// (This option was formerly called WASM_MEM_MAX and BINARYEN_MEM_MAX.)\n// [link]\nvar MAXIMUM_MEMORY = 2147483648;\n\n// If false, we abort with an error if we try to allocate more memory than\n// we can (INITIAL_MEMORY). If true, we will grow the memory arrays at\n// runtime, seamlessly and dynamically.\n// See https://code.google.com/p/v8/issues/detail?id=3907 regarding\n// memory growth performance in chrome.\n// Note that growing memory means we replace the JS typed array views, as\n// once created they cannot be resized. (In wasm we can grow the Memory, but\n// still need to create new views for JS.)\n// Setting this option on will disable ABORTING_MALLOC, in other words,\n// ALLOW_MEMORY_GROWTH enables fully standard behavior, of both malloc\n// returning 0 when it fails, and also of being able to allocate more\n// memory from the system as necessary.\n// [link]\nvar ALLOW_MEMORY_GROWTH = false;\n\n// If ALLOW_MEMORY_GROWTH is true, this variable specifies the geometric\n// overgrowth rate of the heap at resize. Specify MEMORY_GROWTH_GEOMETRIC_STEP=0\n// to disable overgrowing the heap at all, or e.g.\n// MEMORY_GROWTH_GEOMETRIC_STEP=1.0 to double the heap (+100%) at every grow step.\n// The larger this value is, the more memory the WebAssembly heap overreserves\n// to reduce performance hiccups coming from memory resize, and the smaller\n// this value is, the more memory is conserved, at the performance of more\n// stuttering when the heap grows. (profiled to be on the order of ~20 msecs)\n// [link]\nvar MEMORY_GROWTH_GEOMETRIC_STEP = 0.20;\n\n// Specifies a cap for the maximum geometric overgrowth size, in bytes. Use\n// this value to constrain the geometric grow to not exceed a specific rate.\n// Pass MEMORY_GROWTH_GEOMETRIC_CAP=0 to disable the cap and allow unbounded\n// size increases.\n// [link]\nvar MEMORY_GROWTH_GEOMETRIC_CAP = 96*1024*1024;\n\n// If ALLOW_MEMORY_GROWTH is true and MEMORY_GROWTH_LINEAR_STEP == -1, then\n// geometric memory overgrowth is utilized (above variable). Set\n// MEMORY_GROWTH_LINEAR_STEP to a multiple of WASM page size (64KB), eg. 16MB to\n// replace geometric overgrowth rate with a constant growth step size. When\n// MEMORY_GROWTH_LINEAR_STEP is used, the variables MEMORY_GROWTH_GEOMETRIC_STEP\n// and MEMORY_GROWTH_GEOMETRIC_CAP are ignored.\n// [link]\nvar MEMORY_GROWTH_LINEAR_STEP = -1;\n\n// The \"architecture\" to compile for. 0 means the default wasm32, 1 is\n// the full end-to-end wasm64 mode, and 2 is wasm64 for clang/lld but lowered to\n// wasm32 in Binaryen (such that it can run on wasm32 engines, while internally\n// using i64 pointers).\n// Assumes WASM_BIGINT.\n// [compile+link]\nvar MEMORY64 = 0;\n\n// Sets the initial size of the table when MAIN_MODULE or SIDE_MODULE is use\n// (and not otherwise). Normally Emscripten can determine the size of the table\n// at link time, but in SPLIT_MODULE mode, wasm-split often needs to grow the\n// table, so the table size baked into the JS for the instrumented build will be\n// too small after the module is split. This is a hack to allow users to specify\n// a large enough table size that can be consistent across both builds. This\n// setting may be removed at any time and should not be used except in\n// conjunction with SPLIT_MODULE and dynamic linking.\n// [link]\nvar INITIAL_TABLE = -1;\n\n// If true, allows more functions to be added to the table at runtime. This is\n// necessary for dynamic linking, and set automatically in that mode.\n// [link]\nvar ALLOW_TABLE_GROWTH = false;\n\n// Where global data begins; the start of static memory.\n// A GLOBAL_BASE of 1024 or above is useful for optimizing load/store offsets, as it\n// enables the --low-memory-unused pass\n// [link]\nvar GLOBAL_BASE = 1024;\n\n// Whether closure compiling is being run on this output\n// [link]\nvar USE_CLOSURE_COMPILER = false;\n\n// Specifies how warnings emitted by Closure are treated. Possible\n// options: 'quiet', 'warn', 'error'. If set to 'warn', Closure warnings are printed\n// out to console. If set to 'error', Closure warnings are treated like errors,\n// similar to -Werror compiler flag.\n// [link]\nvar CLOSURE_WARNINGS = 'quiet';\n\n// Ignore closure warnings and errors (like on duplicate definitions)\n// [link]\nvar IGNORE_CLOSURE_COMPILER_ERRORS = false;\n\n// If set to 1, each wasm module export is individually declared with a\n// JavaScript \"var\" definition. This is the simple and recommended approach.\n// However, this does increase code size (especially if you have many such\n// exports), which can be avoided in an unsafe way by setting this to 0. In that\n// case, no \"var\" is created for each export, and instead a loop (of small\n// constant code size, no matter how many exports you have) writes all the\n// exports received into the global scope. Doing so is dangerous since such\n// modifications of the global scope can confuse external JS minifier tools, and\n// also things can break if the scope the code is in is not the global scope\n// (e.g. if you manually enclose them in a function scope).\n// [link]\nvar DECLARE_ASM_MODULE_EXPORTS = true;\n\n// If set to 1, prevents inlining. If 0, we will inline normally in LLVM.\n// This does not affect the inlining policy in Binaryen.\n// [compile]\nvar INLINING_LIMIT = false;\n\n// If set to 1, perform acorn pass that converts each HEAP access into a\n// function call that uses DataView to enforce LE byte order for HEAP buffer;\n// This makes generated JavaScript run on BE as well as LE machines. (If 0, only\n// LE systems are supported). Does not affect generated wasm.\nvar SUPPORT_BIG_ENDIAN = false;\n\n// Check each write to the heap, for example, this will give a clear\n// error on what would be segfaults in a native build (like dereferencing\n// 0). See runtime_safe_heap.js for the actual checks performed.\n// Set to value 1 to test for safe behavior for both Wasm+Wasm2JS builds.\n// Set to value 2 to test for safe behavior for only Wasm builds. (notably,\n// Wasm-only builds allow unaligned memory accesses. Note, however, that\n// on some architectures unaligned accesses can be very slow, so it is still\n// a good idea to verify your code with the more strict mode 1)\n// [link]\nvar SAFE_HEAP = 0;\n\n// Log out all SAFE_HEAP operations\n// [link]\nvar SAFE_HEAP_LOG = false;\n\n// Allows function pointers to be cast, wraps each call of an incorrect type\n// with a runtime correction.  This adds overhead and should not be used\n// normally.  It also forces ALIASING_FUNCTION_POINTERS to 0.  Aside from making\n// calls not fail, this tries to convert values as best it can.\n// We use 64 bits (i64) to represent values, as if we wrote the sent value to\n// memory and loaded the received type from the same memory (using\n// truncs/extends/ reinterprets). This means that when types do not match the\n// emulated values may not match (this is true of native too, for that matter -\n// this is all undefined behavior). This approaches appears good enough to\n// support Python, which is the main use case motivating this feature.\n// [link]\nvar EMULATE_FUNCTION_POINTER_CASTS = false;\n\n// Print out exceptions in emscriptened code.\n// [link]\nvar EXCEPTION_DEBUG = false;\n\n// If 1, build in libcxxabi's full c++ demangling code, to allow stackTrace()\n// to emit fully proper demangled c++ names\n// [link]\nvar DEMANGLE_SUPPORT = false;\n\n// Print out when we enter a library call (library*.js). You can also unset\n// Runtime.debug at runtime for logging to cease, and can set it when you want\n// it back. A simple way to set it in C++ is\n//   emscripten_run_script(\"Runtime.debug = ...;\");\n// [link]\nvar LIBRARY_DEBUG = false;\n\n// Print out all musl syscalls, including translating their numeric index\n// to the string name, which can be convenient for debugging. (Other system\n// calls are not numbered and already have clear names; use LIBRARY_DEBUG\n// to get logging for all of them.)\n// [link]\nvar SYSCALL_DEBUG = false;\n\n// Log out socket/network data transfer.\n// [link]\nvar SOCKET_DEBUG = false;\n\n// Log dynamic linker information\n// [link]\nvar DYLINK_DEBUG = false;\n\n// Register file system callbacks using trackingDelegate in library_fs.js\n// [link]\nvar FS_DEBUG = false;\n\n// Select socket backend, either webrtc or websockets. XXX webrtc is not\n// currently tested, may be broken\n\n// As well as being configurable at compile time via the \"-s\" option the\n// WEBSOCKET_URL and WEBSOCKET_SUBPROTOCOL\n// settings may configured at run time via the Module object e.g.\n// Module['websocket'] = {subprotocol: 'base64, binary, text'};\n// Module['websocket'] = {url: 'wss://', subprotocol: 'base64'};\n// You can set 'subprotocol' to null, if you don't want to specify it\n// Run time configuration may be useful as it lets an application select\n// multiple different services.\n// [link]\nvar SOCKET_WEBRTC = false;\n\n// A string containing either a WebSocket URL prefix (ws:// or wss://) or a complete\n// RFC 6455 URL - \"ws[s]:\" \"//\" host [ \":\" port ] path [ \"?\" query ].\n// In the (default) case of only a prefix being specified the URL will be constructed from\n// prefix + addr + ':' + port\n// where addr and port are derived from the socket connect/bind/accept calls.\n// [link]\nvar WEBSOCKET_URL = 'ws://';\n\n// If 1, the POSIX sockets API uses a native bridge process server to proxy sockets calls\n// from browser to native world.\n// [link]\nvar PROXY_POSIX_SOCKETS = false;\n\n// A string containing a comma separated list of WebSocket subprotocols\n// as would be present in the Sec-WebSocket-Protocol header.\n// You can set 'null', if you don't want to specify it.\n// [link]\nvar WEBSOCKET_SUBPROTOCOL = 'binary';\n\n// Print out debugging information from our OpenAL implementation.\n// [link]\nvar OPENAL_DEBUG = false;\n\n// If 1, prints out debugging related to calls from emscripten_web_socket_* functions\n// in emscripten/websocket.h.\n// If 2, additionally traces bytes communicated via the sockets.\n// [link]\nvar WEBSOCKET_DEBUG = false;\n\n// Adds extra checks for error situations in the GL library. Can impact\n// performance.\n// [link]\nvar GL_ASSERTIONS = false;\n\n// If enabled, prints out all API calls to WebGL contexts. (*very* verbose)\n// [link]\nvar TRACE_WEBGL_CALLS = false;\n\n// Enables more verbose debug printing of WebGL related operations. As with\n// LIBRARY_DEBUG, this is toggleable at runtime with option GL.debug.\n// [link]\nvar GL_DEBUG = false;\n\n// When enabled, sets preserveDrawingBuffer in the context, to allow tests to\n// work (but adds overhead)\n// [link]\nvar GL_TESTING = false;\n\n// How large GL emulation temp buffers are\n// [link]\nvar GL_MAX_TEMP_BUFFER_SIZE = 2097152;\n\n// Enables some potentially-unsafe optimizations in GL emulation code\n// [link]\nvar GL_UNSAFE_OPTS = true;\n\n// Forces support for all GLES2 features, not just the WebGL-friendly subset.\n// [link]\nvar FULL_ES2 = false;\n\n// If true, glGetString() for GL_VERSION and GL_SHADING_LANGUAGE_VERSION will\n// return strings OpenGL ES format \"Open GL ES ... (WebGL ...)\" rather than the\n// WebGL format. If false, the direct WebGL format strings are returned. Set\n// this to true to make GL contexts appear like an OpenGL ES context in these\n// version strings (at the expense of a little bit of added code size), and to\n// false to make GL contexts appear like WebGL contexts and to save some bytes\n// from the output.\n// [link]\nvar GL_EMULATE_GLES_VERSION_STRING_FORMAT = true;\n\n// If true, all GL extensions are advertised in both unprefixed WebGL extension\n// format, but also in desktop/mobile GLES/GL extension format with \"GL_\" prefix.\n// [link]\nvar GL_EXTENSIONS_IN_PREFIXED_FORMAT = true;\n\n// If true, adds support for automatically enabling all GL extensions for\n// GLES/GL emulation purposes. This takes up code size. If you set this to 0,\n// you will need to manually enable the extensions you need.\n// [link]\nvar GL_SUPPORT_AUTOMATIC_ENABLE_EXTENSIONS = true;\n\n// If true, the function emscripten_webgl_enable_extension() can be called to\n// enable any WebGL extension. If false, to save code size,\n// emscripten_webgl_enable_extension() cannot be called to enable any of extensions\n// 'ANGLE_instanced_arrays', 'OES_vertex_array_object', 'WEBGL_draw_buffers',\n// 'WEBGL_multi_draw', 'WEBGL_draw_instanced_base_vertex_base_instance',\n// or 'WEBGL_multi_draw_instanced_base_vertex_base_instance',\n// but the dedicated functions emscripten_webgl_enable_*()\n// found in html5.h are used to enable each of those extensions.\n// This way code size is increased only for the extensions that are actually used.\n// N.B. if setting this to 0, GL_SUPPORT_AUTOMATIC_ENABLE_EXTENSIONS must be set\n// to zero as well.\n// [link]\nvar GL_SUPPORT_SIMPLE_ENABLE_EXTENSIONS = true;\n\n// If set to 0, Emscripten GLES2->WebGL translation layer does not track the kind\n// of GL errors that exist in GLES2 but do not exist in WebGL. Settings this to 0\n// saves code size. (Good to keep at 1 for development)\n// [link]\nvar GL_TRACK_ERRORS = true;\n\n// If true, GL contexts support the explicitSwapControl context creation flag.\n// Set to 0 to save a little bit of space on projects that do not need it.\n// [link]\nvar GL_SUPPORT_EXPLICIT_SWAP_CONTROL = false;\n\n// If true, calls to glUniform*fv and glUniformMatrix*fv utilize a pool of\n// preallocated temporary buffers for common small sizes to avoid generating\n// temporary garbage for WebGL 1. Disable this to optimize generated size of the\n// GL library a little bit, at the expense of generating garbage in WebGL 1. If\n// you are only using WebGL 2 and do not support WebGL 1, this is not needed and\n// you can turn it off.\n// [link]\nvar GL_POOL_TEMP_BUFFERS = true;\n\n// Some old Android WeChat (Chromium 37?) browser has a WebGL bug that it ignores\n// the offset of a typed array view pointing to an ArrayBuffer. Set this to\n// 1 to enable a polyfill that works around the issue when it appears. This\n// bug is only relevant to WebGL 1, the affected browsers do not support WebGL 2.\n// [link]\nvar WORKAROUND_OLD_WEBGL_UNIFORM_UPLOAD_IGNORED_OFFSET_BUG = false;\n\n// If true, enables support for the EMSCRIPTEN_explicit_uniform_location WebGL\n// extension. See docs/EMSCRIPTEN_explicit_uniform_location.txt\nvar GL_EXPLICIT_UNIFORM_LOCATION = false;\n\n// If true, enables support for the EMSCRIPTEN_uniform_layout_binding WebGL\n// extension. See docs/EMSCRIPTEN_explicit_uniform_binding.txt\nvar GL_EXPLICIT_UNIFORM_BINDING = false;\n\n// Deprecated. Pass -sMAX_WEBGL_VERSION=2 to target WebGL 2.0.\n// [link]\nvar USE_WEBGL2 = false;\n\n// Specifies the lowest WebGL version to target. Pass -sMIN_WEBGL_VERSION=1\n// to enable targeting WebGL 1, and -sMIN_WEBGL_VERSION=2 to drop support\n// for WebGL 1.0\n// [link]\nvar MIN_WEBGL_VERSION = 1;\n\n// Specifies the highest WebGL version to target. Pass -sMAX_WEBGL_VERSION=2\n// to enable targeting WebGL 2. If WebGL 2 is enabled, some APIs (EGL, GLUT, SDL)\n// will default to creating a WebGL 2 context if no version is specified.\n// Note that there is no automatic fallback to WebGL1 if WebGL2 is not supported\n// by the user's device, even if you build with both WebGL1 and WebGL2\n// support, as that may not always be what the application wants. If you want\n// such a fallback, you can try to create a context with WebGL2, and if that\n// fails try to create one with WebGL1.\n// [link]\nvar MAX_WEBGL_VERSION = 1;\n\n// If true, emulates some WebGL 1 features on WebGL 2 contexts, meaning that\n// applications that use WebGL 1/GLES 2 can initialize a WebGL 2/GLES3 context,\n// but still keep using WebGL1/GLES 2 functionality that no longer is supported\n// in WebGL2/GLES3. Currently this emulates GL_EXT_shader_texture_lod extension\n// in GLSLES 1.00 shaders, support for unsized internal texture formats, and the\n// GL_HALF_FLOAT_OES != GL_HALF_FLOAT mixup.\n// [link]\nvar WEBGL2_BACKWARDS_COMPATIBILITY_EMULATION = false;\n\n// Forces support for all GLES3 features, not just the WebGL2-friendly subset.\n// This automatically turns on FULL_ES2 and WebGL2 support.\n// [link]\nvar FULL_ES3 = false;\n\n// Includes code to emulate various desktop GL features. Incomplete but useful\n// in some cases, see\n// http://kripken.github.io/emscripten-site/docs/porting/multimedia_and_graphics/OpenGL-support.html\n// [link]\nvar LEGACY_GL_EMULATION = false;\n\n// If you specified LEGACY_GL_EMULATION = 1 and only use fixed function pipeline\n// in your code, you can also set this to 1 to signal the GL emulation layer\n// that it can perform extra optimizations by knowing that the user code does\n// not use shaders at all. If LEGACY_GL_EMULATION = 0, this setting has no\n// effect.\n// [link]\nvar GL_FFP_ONLY = false;\n\n// If you want to create the WebGL context up front in JS code, set this to 1\n// and set Module['preinitializedWebGLContext'] to a precreated WebGL context.\n// WebGL initialization afterwards will use this GL context to render.\n// [link]\nvar GL_PREINITIALIZED_CONTEXT = false;\n\n// Enables support for WebGPU (via \"webgpu/webgpu.h\").\n// [link]\nvar USE_WEBGPU = false;\n\n// Enables building of stb-image, a tiny public-domain library for decoding\n// images, allowing decoding of images without using the browser's built-in\n// decoders. The benefit is that this can be done synchronously, however, it\n// will not be as fast as the browser itself.  When enabled, stb-image will be\n// used automatically from IMG_Load and IMG_Load_RW. You can also call the\n// stbi_* functions directly yourself.\n// [link]\nvar STB_IMAGE = false;\n\n// From Safari 8 (where WebGL was introduced to Safari) onwards, OES_texture_half_float and OES_texture_half_float_linear extensions\n// are broken and do not function correctly, when used as source textures.\n// See https://bugs.webkit.org/show_bug.cgi?id=183321, https://bugs.webkit.org/show_bug.cgi?id=169999,\n// https://stackoverflow.com/questions/54248633/cannot-create-half-float-oes-texture-from-uint16array-on-ipad\n// [link]\nvar GL_DISABLE_HALF_FLOAT_EXTENSION_IF_BROKEN = false;\n\n// Workaround Safari WebGL issue: After successfully acquiring WebGL context on a canvas,\n// calling .getContext() will always return that context independent of which 'webgl' or 'webgl2'\n// context version was passed. See https://bugs.webkit.org/show_bug.cgi?id=222758 and\n// https://github.com/emscripten-core/emscripten/issues/13295.\n// Set this to 0 to force-disable the workaround if you know the issue will not affect you.\nvar GL_WORKAROUND_SAFARI_GETCONTEXT_BUG = true;\n\n// Use JavaScript math functions like Math.tan. This saves code size as we can avoid shipping\n// compiled musl code. However, it can be significantly slower as it calls out to JS. It\n// also may give different results as JS math is specced somewhat differently than libc, and\n// can also vary between browsers.\n// [link]\nvar JS_MATH = false;\n\n// If set, enables polyfilling for Math.clz32, Math.trunc, Math.imul, Math.fround.\n// [link]\nvar POLYFILL_OLD_MATH_FUNCTIONS = false;\n\n// Set this to enable compatibility emulations for old JavaScript engines. This gives you\n// the highest possible probability of the code working everywhere, even in rare old\n// browsers and shell environments. Specifically:\n//  * Add polyfilling for Math.clz32, Math.trunc, Math.imul, Math.fround. (-sPOLYFILL_OLD_MATH_FUNCTIONS)\n//  * Work around old Chromium WebGL 1 bug (-sWORKAROUND_OLD_WEBGL_UNIFORM_UPLOAD_IGNORED_OFFSET_BUG=1)\n//  * Disable WebAssembly. (Must be paired with -sWASM=0)\n//  * Adjusts MIN_X_VERSION settings to 0 to include support for all browser versions.\n//  * Avoid TypedArray.fill, if necessary, in zeroMemory utility function.\n// You can also configure the above options individually.\n// [link]\nvar LEGACY_VM_SUPPORT = false;\n\n// Specify which runtime environments the JS output will be capable of running\n// in.  For maximum portability this can configured to support all envionements\n// or it can be limited to reduce overall code size.  The supported environments\n// are:\n//    'web'     - the normal web environment.\n//    'webview' - just like web, but in a webview like Cordova;\n//                considered to be same as \"web\" in almost every place\n//    'worker'  - a web worker environment.\n//    'node'    - Node.js.\n//    'shell'   - a JS shell like d8, js, or jsc.\n// This setting can be a comma-separated list of these environments, e.g.,\n// \"web,worker\". If this is the empty string, then all environments are\n// supported.\n//\n// Note that the set of environments recognized here is not identical to the\n// ones we identify at runtime using ENVIRONMENT_IS_*. Specifically:\n//  * We detect whether we are a pthread at runtime, but that's set for workers\n//    and not for the main file so it wouldn't make sense to specify here.\n//  * The webview target is basically a subset of web. It must be specified\n//    alongside web (e.g. \"web,webview\") and we only use it for code generation\n//    at compile time, there is no runtime behavior change.\n//\n// Note that by default we do not include the 'shell' environment since direct\n// usage of d8, js, jsc is extremely rare.\n// [link]\nvar ENVIRONMENT = 'web,webview,worker,node';\n\n// Enable this to support lz4-compressed file packages. They are stored compressed in memory, and\n// decompressed on the fly, avoiding storing the entire decompressed data in memory at once.\n// If you run the file packager separately, you still need to build the main program with this flag,\n// and also pass --lz4 to the file packager.\n// (You can also manually compress one on the client, using LZ4.loadPackage(), but that is less\n// recommended.)\n// Limitations:\n//   * LZ4-compressed files are only decompressed when needed, so they are not available\n//     for special preloading operations like pre-decoding of images using browser codecs,\n//     preloadPlugin stuff, etc.\n//   * LZ4 files are read-only.\n// [link]\nvar LZ4 = false;\n\n// Emscripten exception handling options.\n// The three options below (DISABLE_EXCEPTION_CATCHING,\n// EXCEPTION_CATCHING_ALLOWED, and DISABLE_EXCEPTION_THROWING) only pertain to\n// Emscripten exception handling and do not control the native wasm exception\n// handling option (-fwasm-exceptions, internal setting: WASM_EXCEPTIONS).\n\n// Disables generating code to actually catch exceptions. This disabling is on\n// by default as the overhead of exceptions is quite high in size and speed\n// currently (in the future, wasm should improve that). When exceptions are\n// disabled, if an exception actually happens then it will not be caught\n// and the program will halt (so this will not introduce silent failures).\n//\n// XXX note that this removes *catching* of exceptions, which is the main\n//     issue for speed, but you should build source files with\n//     -fno-exceptions to really get rid of all exceptions code overhead,\n//     as it may contain thrown exceptions that are never caught (e.g.\n//     just using std::vector can have that). -fno-rtti may help as well.\n//\n// This option is mutually exclusive with EXCEPTION_CATCHING_ALLOWED.\n//\n// [compile+link] - affects user code at compile and system libraries at link\nvar DISABLE_EXCEPTION_CATCHING = 1;\n\n// Enables catching exception but only in the listed functions.  This\n// option acts like a more precise version of `DISABLE_EXCEPTION_CATCHING=0`.\n//\n// This option is mutually exclusive with DISABLE_EXCEPTION_CATCHING.\n//\n// [compile+link] - affects user code at compile and system libraries at link\nvar EXCEPTION_CATCHING_ALLOWED = [];\n\n// Internal: Tracks whether Emscripten should link in exception throwing (C++\n// 'throw') support library. This does not need to be set directly, but pass\n// -fno-exceptions to the build disable exceptions support. (This is basically\n// -fno-exceptions, but checked at final link time instead of individual .cpp\n// file compile time) If the program *does* contain throwing code (some source\n// files were not compiled with `-fno-exceptions`), and this flag is set at link\n// time, then you will get errors on undefined symbols, as the exception\n// throwing code is not linked in. If so you should either unset the option (if\n// you do want exceptions) or fix the compilation of the source files so that\n// indeed no exceptions are used).\n// TODO(sbc): Move to settings_internal (current blocked due to use in test\n// code).\n// [link]\nvar DISABLE_EXCEPTION_THROWING = false;\n\n// By default we handle exit() in node, by catching the Exit exception. However,\n// this means we catch all process exceptions. If you disable this, then we no\n// longer do that, and exceptions work normally, which can be useful for libraries\n// or programs that don't need exit() to work.\n\n// Emscripten uses an ExitStatus exception to halt when exit() is called.\n// With this option, we prevent that from showing up as an unhandled\n// exception.\n// [link]\nvar NODEJS_CATCH_EXIT = true;\n\n// Catch unhandled rejections in node. Without this, node may print the error,\n// and that this behavior will change in future node, wait a few seconds, and\n// then exit with 0 (which hides the error if you don't read the log). With\n// this, we catch any unhandled rejection and throw an actual error, which will\n// make the process exit immediately with a non-0 return code.\n// This should be fixed in Node 15+.\n// [link]\nvar NODEJS_CATCH_REJECTION = true;\n\n// Whether to support async operations in the compiled code. This makes it\n// possible to call JS functions from synchronous-looking code in C/C++.\n//  1: Run binaryen's Asyncify pass to transform the code using asyncify. This\n//     emits a normal wasm file in the end, so it works everywhere, but it has a\n//     significant cost in terms of code size and speed.\n//     See https://emscripten.org/docs/porting/asyncify.html\n//  2: Depend on VM support for the wasm stack switching proposal. This allows\n//     async operations to happen without the overhead of modifying the wasm.\n//     This is experimental atm while spec discussion is ongoing, see\n//     https://github.com/WebAssembly/js-promise-integration/\n//     TODO: document which of the following flags are still relevant in this\n//           mode (e.g. IGNORE_INDIRECT etc. are not needed)\n// [link]\nvar ASYNCIFY = 0;\n\n// Imports which can do an sync operation, in addition to the default ones that\n// emscripten defines like emscripten_sleep. If you add more you will need to\n// mention them to here, or else they will not work (in ASSERTIONS builds an\n// error will be shown).\n// Note that this list used to contain the default ones, which meant that you\n// had to list them when adding your own; the default ones are now added\n// automatically.\n// [link]\nvar ASYNCIFY_IMPORTS = [];\n\n// Whether indirect calls can be on the stack during an unwind/rewind.\n// If you know they cannot, then setting this can be extremely helpful, as otherwise asyncify\n// must assume an indirect call can reach almost everywhere.\n// [link]\nvar ASYNCIFY_IGNORE_INDIRECT = false;\n\n// The size of the asyncify stack - the region used to store unwind/rewind\n// info. This must be large enough to store the call stack and locals. If it is too\n// small, you will see a wasm trap due to executing an \"unreachable\" instruction.\n// In that case, you should increase this size.\n// [link]\nvar ASYNCIFY_STACK_SIZE = 4096;\n\n// If the Asyncify remove-list is provided, then the functions in it will not\n// be instrumented even if it looks like they need to. This can be useful\n// if you know things the whole-program analysis doesn't, like if you\n// know certain indirect calls are safe and won't unwind. But if you\n// get the list wrong things will break (and in a production build user\n// input might reach code paths you missed during testing, so it's hard\n// to know you got this right), so this is not recommended unless you\n// really know what are doing, and need to optimize every bit of speed\n// and size.\n//\n// The names in this list are names from the WebAssembly Names section. The\n// wasm backend will emit those names in *human-readable* form instead of\n// typical C++ mangling. For example, you should write Struct::func()\n// instead of _ZN6Struct4FuncEv. C is also different from C++, as C\n// names don't end with parameters; as a result foo(int) in C++ would appear\n// as just foo in C (C++ has parameters because it needs to differentiate\n// overloaded functions). You will see warnings in the console if a name in the\n// list is missing (these are not errors because inlining etc. may cause\n// changes which would mean a single list couldn't work for both -O0 and -O1\n// builds, etc.). You can inspect the wasm binary to look for the actual names,\n// either directly or using wasm-objdump or wasm-dis, etc.\n//\n// Simple '*' wildcard matching is supported.\n//\n// To avoid dealing with limitations in operating system shells or build system\n// escaping, the following substitutions can be made:\n// - ' ' -> '.',\n// - '&' -> '#',\n// - ',' -> '?'.\n//\n// That is, the function\n//    \"foo(char const*, int&)\" can be inputted as\n//    \"foo(char.const*?.int#)\" on the command line instead.\n//\n// Note: Whitespace is part of the function signature! I.e.\n//    \"foo(char const *, int &)\" will not match \"foo(char const*, int&)\", and\n// neither would \"foo(const char*, int &)\".\n//\n// [link]\nvar ASYNCIFY_REMOVE = [];\n\n// Functions in the Asyncify add-list are added to the list of instrumented\n// functions, that is, they will be instrumented even if otherwise asyncify\n// thinks they don't need to be. As by default everything will be instrumented\n// in the safest way possible, this is only useful if you use IGNORE_INDIRECT\n// and use this list to fix up some indirect calls that *do* need to be\n// instrumented.\n// See notes on ASYNCIFY_REMOVE about the names.\n// [link]\nvar ASYNCIFY_ADD = [];\n\n// If the Asyncify only-list is provided, then *only* the functions in the list\n// will be instrumented. Like the remove-list, getting this wrong will break\n// your application.\n// See notes on ASYNCIFY_REMOVE about the names.\n// [link]\nvar ASYNCIFY_ONLY = [];\n\n// If enabled will output which functions have been instrumented and why.\n// [link]\nvar ASYNCIFY_ADVISE = false;\n\n// Allows lazy code loading: where emscripten_lazy_load_code() is written, we\n// will pause execution, load the rest of the code, and then resume.\n// [link]\nvar ASYNCIFY_LAZY_LOAD_CODE = false;\n\n// Runtime debug logging from asyncify internals.\n//  1: Minimal logging.\n//  2: Verbose logging.\n// [link]\nvar ASYNCIFY_DEBUG = 0;\n\n// Runtime elements that are exported on Module by default. We used to export\n// quite a lot here, but have removed them all. You should use\n// EXPORTED_RUNTIME_METHODS for things you want to export from the runtime. Note\n// that methods on this list are only exported if they are included (either\n// automatically from linking, or due to being in\n// DEFAULT_LIBRARY_FUNCS_TO_INCLUDE).\n// Note that the name may be slightly misleading, as this is for any JS library\n// element, and not just methods. For example, we can export the FS object by\n// having \"FS\" in this list.\n// [link]\nvar EXPORTED_RUNTIME_METHODS = [];\n\n// Deprecated, use EXPORTED_RUNTIME_METHODS instead.\nvar EXTRA_EXPORTED_RUNTIME_METHODS = [];\n\n// A list of incoming values on the Module object in JS that we care about. If\n// a value is not in this list, then we don't emit code to check if you provide\n// it on the Module object. For example, if\n// you have this:\n//\n//  var Module = {\n//    print: function(x) { console.log('print: ' + x) },\n//    preRun: [function() { console.log('pre run') }]\n//  };\n//\n// Then MODULE_JS_API must contain 'print' and 'preRun'; if it does not then\n// we may not emit code to read and use that value. In other words, this\n// option lets you set, statically at compile time, the list of which Module\n// JS values you will be providing at runtime, so the compiler can better\n// optimize.\n//\n// Setting this list to [], or at least a short and concise set of names you\n// actually use, can be very useful for reducing code size. By default, the\n// list contains a set of commonly used symbols.\n//\n// FIXME: should this just be  0  if we want everything?\n// [link]\nvar INCOMING_MODULE_JS_API = [\n  'ENVIRONMENT', 'GL_MAX_TEXTURE_IMAGE_UNITS', 'SDL_canPlayWithWebAudio',\n  'SDL_numSimultaneouslyQueuedBuffers', 'INITIAL_MEMORY', 'wasmMemory', 'arguments',\n  'buffer', 'canvas', 'doNotCaptureKeyboard', 'dynamicLibraries',\n  'elementPointerLock', 'extraStackTrace', 'forcedAspectRatio',\n  'instantiateWasm', 'keyboardListeningElement', 'freePreloadedMediaOnUse',\n  'loadSplitModule', 'locateFile', 'logReadFiles', 'mainScriptUrlOrBlob', 'mem',\n  'monitorRunDependencies', 'noExitRuntime', 'noInitialRun', 'onAbort',\n  'onCustomMessage', 'onExit', 'onFree', 'onFullScreen', 'onMalloc',\n  'onRealloc', 'onRuntimeInitialized', 'postMainLoop', 'postRun', 'preInit',\n  'preMainLoop', 'preRun',\n  'preinitializedWebGLContext', 'memoryInitializerRequest', 'preloadPlugins',\n  'print', 'printErr', 'quit', 'setStatus', 'statusMessage', 'stderr',\n  'stdin', 'stdout', 'thisProgram', 'wasm', 'wasmBinary', 'websocket'\n];\n\n// If set to nonzero, the provided virtual filesystem if treated\n// case-insensitive, like Windows and macOS do. If set to 0, the VFS is\n// case-sensitive, like on Linux.\n// [link]\nvar CASE_INSENSITIVE_FS = false;\n\n// If set to 0, does not build in any filesystem support. Useful if you are just\n// doing pure computation, but not reading files or using any streams (including\n// fprintf, and other stdio.h things) or anything related. The one exception is\n// there is partial support for printf, and puts, hackishly.  The compiler will\n// automatically set this if it detects that syscall usage (which is static)\n// does not require a full filesystem. If you still want filesystem support, use\n// FORCE_FILESYSTEM\n// [link]\nvar FILESYSTEM = true;\n\n// Makes full filesystem support be included, even if statically it looks like\n// it is not used. For example, if your C code uses no files, but you include\n// some JS that does, you might need this.\n// [link]\nvar FORCE_FILESYSTEM = false;\n\n// Enables support for the NODERAWFS filesystem backend. This is a special\n// backend as it replaces all normal filesystem access with direct Node.js\n// operations, without the need to do `FS.mount()`, and this backend only\n// works with Node.js. The initial working directory will be same as\n// process.cwd() instead of VFS root directory.  Because this mode directly uses\n// Node.js to access the real local filesystem on your OS, the code will not\n// necessarily be portable between OSes - it will be as portable as a Node.js\n// program would be, which means that differences in how the underlying OS\n// handles permissions and errors and so forth may be noticeable.  This has\n// mostly been tested on Linux so far.\n// [link]\nvar NODERAWFS = false;\n\n// This saves the compiled wasm module in a file with name\n//   $WASM_BINARY_NAME.$V8_VERSION.cached\n// and loads it on subsequent runs. This caches the compiled wasm code from\n// v8 in node, which saves compiling on subsequent runs, making them start up\n// much faster.\n// The V8 version used in node is included in the cache name so that we don't\n// try to load cached code from another version, which fails silently (it seems\n// to load ok, but we do actually recompile).\n//  * The only version known to work for sure is node 12.9.1, as this has\n//    regressed, see\n//    https://github.com/nodejs/node/issues/18265#issuecomment-622971547\n//  * The default location of the .cached files is alongside the wasm binary,\n//    as mentioned earlier. If that is in a read-only directory, you may need\n//    to place them elsewhere. You can use the locateFile() hook to do so.\n// [link]\nvar NODE_CODE_CACHING = false;\n\n// Functions that are explicitly exported. These functions are kept alive\n// through LLVM dead code elimination, and also made accessible outside of the\n// generated code even after running closure compiler (on \"Module\").  The\n// symbols listed here require an `_` prefix.\n//\n// By default if this setting is not specified on the command line the\n// `_main` function will be implicitly exported.  In STANDALONE_WASM mode the\n// default export is `__start` (or `__initialize` if --no-entry is specified).\n// [link]\nvar EXPORTED_FUNCTIONS = [];\n\n// If true, we export all the symbols that are present in JS onto the Module\n// object. This does not affect which symbols will be present - it does not\n// prevent DCE or cause anything to be included in linking. It only does\n//   Module['X'] = X;\n// for all X that end up in the JS file. This is useful to export the JS\n// library functions on Module, for things like dynamic linking.\n// [link]\nvar EXPORT_ALL = false;\n\n// Remembers the values of these settings, and makes them accessible\n// through Runtime.getCompilerSetting and emscripten_get_compiler_setting.\n// To see what is retained, look for compilerSettings in the generated code.\n// [link]\nvar RETAIN_COMPILER_SETTINGS = false;\n\n// JS library elements (C functions implemented in JS) that we include by\n// default. If you want to make sure something is included by the JS compiler,\n// add it here.  For example, if you do not use some emscripten_* C API call\n// from C, but you want to call it from JS, add it here (and in EXPORTED\n// FUNCTIONS with prefix \"_\", if you use closure compiler).  Note that the name\n// may be slightly misleading, as this is for any JS library element, and not\n// just functions. For example, you can include the Browser object by adding\n// \"$Browser\" to this list.\n// [link]\nvar DEFAULT_LIBRARY_FUNCS_TO_INCLUDE = [];\n\n// Include all JS library functions instead of the sum of\n// DEFAULT_LIBRARY_FUNCS_TO_INCLUDE + any functions used by the generated code.\n// This is needed when dynamically loading (i.e. dlopen) modules that make use\n// of runtime library functions that are not used in the main module.  Note that\n// this only applies to js libraries, *not* C. You will need the main file to\n// include all needed C libraries.  For example, if a module uses malloc or new,\n// you will need to use those in the main file too to pull in malloc for use by\n// the module.\n// [link]\nvar INCLUDE_FULL_LIBRARY = false;\n\n// If set to 1, we emit relocatable code from the LLVM backend; both\n// globals and function pointers are all offset (by gb and fp, respectively)\n// Automatically set for SIDE_MODULE or MAIN_MODULE.\n// [compile+link]\nvar RELOCATABLE = false;\n\n// A main module is a file compiled in a way that allows us to link it to\n// a side module at runtime.\n//  1: Normal main module.\n//  2: DCE'd main module. We eliminate dead code normally. If a side\n//     module needs something from main, it is up to you to make sure\n//     it is kept alive.\n// [compile+link]\nvar MAIN_MODULE = 0;\n\n// Corresponds to MAIN_MODULE (also supports modes 1 and 2)\n// [compile+link]\nvar SIDE_MODULE = 0;\n\n// Deprecated, list shared libraries directly on the command line instead.\n// [link]\nvar RUNTIME_LINKED_LIBS = [];\n\n// If set to 1, this is a worker library, a special kind of library that is run\n// in a worker. See emscripten.h\n// [link]\nvar BUILD_AS_WORKER = false;\n\n// If set to 1, we build the project into a js file that will run in a worker,\n// and generate an html file that proxies input and output to/from it.\n// [link]\nvar PROXY_TO_WORKER = false;\n\n// If set, the script file name the main thread loads.  Useful if your project\n// doesn't run the main emscripten- generated script immediately but does some\n// setup before\n// [link]\nvar PROXY_TO_WORKER_FILENAME = '';\n\n// If set to 1, compiles in a small stub main() in between the real main() which\n// calls pthread_create() to run the application main() in a pthread.  This is\n// something that applications can do manually as well if they wish, this option\n// is provided as convenience.\n//\n// The pthread that main() runs on is a normal pthread in all ways, with the one\n// difference that its stack size is the same as the main thread would normally\n// have, that is, TOTAL_STACK. This makes it easy to flip between\n// PROXY_TO_PTHREAD and non-PROXY_TO_PTHREAD modes with main() always getting\n// the same amount of stack.\n//\n// This proxies Module['canvas'], if present, and if OFFSCREENCANVAS_SUPPORT\n// is enabled. This has to happen because this is the only chance - this browser\n// main thread does the only pthread_create call that happens on\n// that thread, so it's the only chance to transfer the canvas from there.\n// [link]\nvar PROXY_TO_PTHREAD = false;\n\n// If set to 1, this file can be linked with others, either as a shared library\n// or as the main file that calls a shared library. To enable that, we will not\n// internalize all symbols and cull the unused ones, in other words, we will not\n// remove unused functions and globals, which might be used by another module we\n// are linked with.\n//\n// MAIN_MODULE and SIDE_MODULE both imply this, so it not normally necessary\n// to set this explicitly. Note that MAIN_MODULE and SIDE_MODULE mode 2 do\n// *not* set this, so that we still do normal DCE on them, and in that case\n// you must keep relevant things alive yourself using exporting.\n// [link]\nvar LINKABLE = false;\n\n// Emscripten 'strict' build mode: Drop supporting any deprecated build options.\n// Set the environment variable EMCC_STRICT=1 or pass -sSTRICT to test that a\n// codebase builds nicely in forward compatible manner.\n// Changes enabled by this:\n//   * The C define EMSCRIPTEN is not defined (__EMSCRIPTEN__ always is, and\n//     is the correct thing to use).\n//   * STRICT_JS is enabled.\n//   * IGNORE_MISSING_MAIN is disabled.\n//   * AUTO_JS_LIBRARIES is disabled.\n//   * AUTO_NATIVE_LIBRARIES is disabled.\n//   * AUTO_ARCHIVE_INDEXES is disabled.\n//   * DEFAULT_TO_CXX is disabled.\n//   * ALLOW_UNIMPLEMENTED_SYSCALLS is disabled.\n// [compile+link]\nvar STRICT = false;\n\n// Allow program to link with or without `main` symbol.\n// If this is disabled then one must provide a `main` symbol or explicitly\n// opt out by passing `--no-entry` or an EXPORTED_FUNCTIONS list that doesn't\n// include `_main`.\n// [link]\nvar IGNORE_MISSING_MAIN = true;\n\n// Automatically attempt to add archive indexes at link time to archives that\n// don't already have them.  This can happen when GNU ar or GNU ranlib is used\n// rather than `llvm-ar` or `emar` since the former don't understand the wasm\n// object format.\n// [link]\nvar AUTO_ARCHIVE_INDEXES = true;\n\n// Add \"use strict;\" to generated JS\n// [link]\nvar STRICT_JS = false;\n\n// If set to 1, we will warn on any undefined symbols that are not resolved by\n// the library_*.js files. Note that it is common in large projects to not\n// implement everything, when you know what is not going to actually be called\n// (and don't want to mess with the existing buildsystem), and functions might\n// be implemented later on, say in --pre-js, so you may want to build with -s\n// WARN_ON_UNDEFINED_SYMBOLS=0 to disable the warnings if they annoy you.  See\n// also ERROR_ON_UNDEFINED_SYMBOLS.  Any undefined symbols that are listed in-\n// EXPORTED_FUNCTIONS will also be reported.\n// [link]\nvar WARN_ON_UNDEFINED_SYMBOLS = true;\n\n// If set to 1, we will give a link-time error on any undefined symbols (see\n// WARN_ON_UNDEFINED_SYMBOLS). To allow undefined symbols at link time set this\n// to 0, in which case if an undefined function is called a runtime error will\n// occur.  Any undefined symbols that are listed in EXPORTED_FUNCTIONS will also\n// be reported.\n// [link]\nvar ERROR_ON_UNDEFINED_SYMBOLS = true;\n\n// Use small chunk size for binary synchronous XHR's in Web Workers.  Used for\n// testing.  See test_chunked_synchronous_xhr in runner.py and library.js.\n// [link]\nvar SMALL_XHR_CHUNKS = false;\n\n// If 1, will include shim code that tries to 'fake' a browser environment, in\n// order to let you run a browser program (say, using SDL) in the shell.\n// Obviously nothing is rendered, but this can be useful for benchmarking and\n// debugging if actual rendering is not the issue. Note that the shim code is\n// very partial - it is hard to fake a whole browser! - so keep your\n// expectations low for this to work.\n// [link]\nvar HEADLESS = false;\n\n// If 1, we force Date.now(), Math.random, etc. to return deterministic results.\n// This also tries to make execution deterministic across machines and\n// environments, for example, not doing anything different based on the\n// browser's language setting (which would mean you can get different results\n// in different browsers, or in the browser and in node).\n// Good for comparing builds for debugging purposes (and nothing else).\n// [link]\nvar DETERMINISTIC = false;\n\n// By default we emit all code in a straightforward way into the output\n// .js file. That means that if you load that in a script tag in a web\n// page, it will use the global scope. With `MODULARIZE` set, we instead emit\n// the code wrapped in a function that returns a promise. The promise is\n// resolved with the module instance when it is safe to run the compiled code,\n// similar to the `onRuntimeInitialized` callback. You do not need to use the\n// `onRuntimeInitialized` callback when using `MODULARIZE`.\n//\n// (If WASM_ASYNC_COMPILATION is off, that is, if compilation is\n// *synchronous*, then it would not make sense to return a Promise, and instead\n// the Module object itself is returned, which is ready to be used.)\n//\n// The default name of the function is `Module`, but can be changed using the\n// `EXPORT_NAME` option. We recommend renaming it to a more typical name for a\n// factory function, e.g. `createModule`.\n//\n//\n// You use the factory function like so:\n//\n//   const module = await EXPORT_NAME();\n//\n// or:\n//\n//   let module;\n//   EXPORT_NAME().then(instance => {\n//     module = instance;\n//   });\n//\n//\n// The factory function accepts 1 parameter, an object with default values for\n// the module instance:\n//\n//   const module = await EXPORT_NAME({ option: value, ... });\n//\n// Note the parentheses - we are calling EXPORT_NAME in order to instantiate\n// the module. This allows you to create multiple instances of the module.\n//\n// Note that in MODULARIZE mode we do *not* look for a global `Module` object\n// for default values. Default values must be passed as a parameter to the\n// factory function.\n//\n// The default .html shell file provided in MINIMAL_RUNTIME mode will create\n// a singleton instance automatically, to run the application on the page.\n// (Note that it does so without using the Promise API mentioned earlier, and\n// so code for the Promise is not even emitted in the .js file if you tell\n// emcc to emit an .html output.)\n// The default .html shell file provided by traditional runtime mode is only\n// compatible with MODULARIZE=0 mode, so when building with traditional\n// runtime, you should provided your own html shell file to perform the\n// instantiation when building with MODULARIZE=1. (For more details, see\n// https://github.com/emscripten-core/emscripten/issues/7950)\n//\n// If you add --pre-js or --post-js files, they will be included inside\n// the factory function with the rest of the emitted code in order to be\n// optimized together with it.\n//\n// If you want to include code outside all of the generated code, including the\n// factory function, you can use --extern-pre-js or --extern-post-js. While\n// --pre-js and --post-js happen to do that in non-MODULARIZE mode, their\n// intended usage is to add code that is optimized with the rest of the emitted\n// code, allowing better dead code elimination and minification.\n// [link]\nvar MODULARIZE = false;\n\n// Export using an ES6 Module export rather than a UMD export.  MODULARIZE must\n// be enabled for ES6 exports.\n// [link]\nvar EXPORT_ES6 = false;\n\n// Use the ES6 Module relative import feature 'import.meta.url'\n// to auto-detect WASM Module path.\n// It might not be supported on old browsers / toolchains\n// [link]\nvar USE_ES6_IMPORT_META = true;\n\n// If 1, will just time how long main() takes to execute, and not print out\n// anything at all whatsoever. This is useful for benchmarking.\n// [link]\nvar BENCHMARK = false;\n\n// Global variable to export the module as for environments without a\n// standardized module loading system (e.g. the browser and SM shell).\n// [link]\nvar EXPORT_NAME = 'Module';\n\n// When set to 0, we do not emit eval() and new Function(), which disables some functionality\n// (causing runtime errors if attempted to be used), but allows the emitted code to be\n// acceptable in places that disallow dynamic code execution (chrome packaged app,\n// privileged firefox app, etc.). Pass this flag when developing an Emscripten application\n// that is targeting a privileged or a certified execution environment, see\n// Firefox Content Security Policy (CSP) webpage for details:\n// https://developer.mozilla.org/en-US/Apps/Build/Building_apps_for_Firefox_OS/CSP\n//\n// When this flag is set, the following features (linker flags) are unavailable:\n//  -sRELOCATABLE: the function Runtime.loadDynamicLibrary would need to eval().\n// and some features may fall back to slower code paths when they need to:\n// Embind: uses eval() to jit functions for speed.\n//\n// Additionally, the following Emscripten runtime functions are unavailable when\n// DYNAMIC_EXECUTION=0 is set, and an attempt to call them will throw an exception:\n// - emscripten_run_script(),\n// - emscripten_run_script_int(),\n// - emscripten_run_script_string(),\n// - dlopen(),\n// - the functions ccall() and cwrap() are still available, but they are restricted to only\n//   being able to call functions that have been exported in the Module object in advance.\n//\n// When set to -sDYNAMIC_EXECUTION=2 flag is set, attempts to call to eval() are demoted\n// to warnings instead of throwing an exception.\n// [link]\nvar DYNAMIC_EXECUTION = 1;\n\n// whether we are in the generate struct_info bootstrap phase\n// [link]\nvar BOOTSTRAPPING_STRUCT_INFO = false;\n\n// Add some calls to emscripten tracing APIs\n// [compile+link]\nvar EMSCRIPTEN_TRACING = false;\n\n// Specify the GLFW version that is being linked against.  Only relevant, if you\n// are linking against the GLFW library.  Valid options are 2 for GLFW2 and 3\n// for GLFW3.\n// [link]\nvar USE_GLFW = 2;\n\n// Whether to use compile code to WebAssembly. Set this to 0 to compile to JS\n// instead of wasm.\n//\n// Specify -sWASM=2 to target both WebAssembly and JavaScript at the same time.\n// In that build mode, two files a.wasm and a.wasm.js are produced, and at runtime\n// the WebAssembly file is loaded if browser/shell supports it. Otherwise the\n// .wasm.js fallback will be used.\n//\n// If WASM=2 is enabled and the browser fails to compile the WebAssembly module,\n// the page will be reloaded in Wasm2JS mode.\n// [link]\nvar WASM = 1;\n\n// STANDALONE_WASM indicates that we want to emit a wasm file that can run\n// without JavaScript. The file will use standard APIs such as wasi as much as\n// possible to achieve that.\n//\n// This option does not guarantee that the wasm can be used by itself - if you\n// use APIs with no non-JS alternative, we will still use those (e.g., OpenGL\n// at the time of writing this). This gives you the option to see which APIs\n// are missing, and if you are compiling for a custom wasi embedding, to add\n// those to your embedding.\n//\n// We may still emit JS with this flag, but the JS should only be a convenient\n// way to run the wasm on the Web or in Node.js, and you can run the wasm by\n// itself without that JS (again, unless you use APIs for which there is no\n// non-JS alternative) in a wasm runtime like wasmer or wasmtime.\n//\n// Note that even without this option we try to use wasi etc. syscalls as much\n// as possible. What this option changes is that we do so even when it means\n// a tradeoff with JS size. For example, when this option is set we do not\n// import the Memory - importing it is useful for JS, so that JS can start to\n// use it before the wasm is even loaded, but in wasi and other wasm-only\n// environments the expectation is to create the memory in the wasm itself.\n// Doing so prevents some possible JS optimizations, so we only do it behind\n// this flag.\n//\n// When this flag is set we do not legalize the JS interface, since the wasm is\n// meant to run in a wasm VM, which can handle i64s directly. If we legalized it\n// the wasm VM would not recognize the API. However, this means that the\n// optional JS emitted won't run if you use a JS API with an i64. You can use\n// the WASM_BIGINT option to avoid that problem by using BigInts for i64s which\n// means we don't need to legalize for JS (but this requires a new enough JS\n// VM).\n//\n// Standlone builds require a `main` entry point by default.  If you want to\n// build a library (also known as a reactor) instead you can pass `--no-entry`.\n// [link]\nvar STANDALONE_WASM = false;\n\n// Whether to ignore implicit traps when optimizing in binaryen.  Implicit\n// traps are the traps that happen in a load that is out of bounds, or\n// div/rem of 0, etc. With this option set, the optimizer assumes that loads\n// cannot trap, and therefore that they have no side effects at all. This\n// is *not* safe in general, as you may have a load behind a condition which\n// ensures it it is safe; but if the load is assumed to not have side effects it\n// could be executed unconditionally. For that reason this option is generally\n// not useful on large and complex projects, but in a small and simple enough\n// codebase it may help reduce code size a little bit.\n// [link]\nvar BINARYEN_IGNORE_IMPLICIT_TRAPS = false;\n\n// A comma-separated list of extra passes to run in the binaryen optimizer,\n// Setting this does not override/replace the default passes. It is appended at\n// the end of the list of passes.\n// [link]\nvar BINARYEN_EXTRA_PASSES = \"\";\n\n// Whether to compile the wasm asynchronously, which is more efficient and does\n// not block the main thread. This is currently required for all but the\n// smallest modules to run in chrome.\n//\n// (This option was formerly called BINARYEN_ASYNC_COMPILATION)\n// [link]\nvar WASM_ASYNC_COMPILATION = true;\n\n// If set to 1, the dynCall() and dynCall_sig() API is made available\n// to caller.\n// [link]\nvar DYNCALLS = false;\n\n// WebAssembly integration with JavaScript BigInt. When enabled we don't need\n// to legalize i64s into pairs of i32s, as the wasm VM will use a BigInt where\n// an i64 is used.\n// [link]\nvar WASM_BIGINT = false;\n\n// WebAssembly defines a \"producers section\" which compilers and tools can\n// annotate themselves in, and LLVM emits this by default.\n// Emscripten will strip that out so that it is *not* emitted because it\n// increases code size, and also some users may not want information\n// about their tools to be included in their builds for privacy or security\n// reasons, see\n// https://github.com/WebAssembly/tool-conventions/issues/93.\n// [link]\nvar EMIT_PRODUCERS_SECTION = false;\n\n// Emits emscripten license info in the JS output.\n// [link]\nvar EMIT_EMSCRIPTEN_LICENSE = false;\n\n// Whether to legalize the JS FFI interfaces (imports/exports) by wrapping them\n// to automatically demote i64 to i32 and promote f32 to f64. This is necessary\n// in order to interface with JavaScript.  For non-web/non-JS embeddings, setting\n// this to 0 may be desirable.\n// [link]\nvar LEGALIZE_JS_FFI = true;\n\n// Ports\n\n// Specify the SDL version that is being linked against.\n// 1, the default, is 1.3, which is implemented in JS\n// 2 is a port of the SDL C code on emscripten-ports\n// When AUTO_JS_LIBRARIES is set to 0 this defaults to 0 and SDL\n// is not linked in.\n// [link]\nvar USE_SDL = 1;\n\n// Specify the SDL_gfx version that is being linked against. Must match USE_SDL\n// [link]\nvar USE_SDL_GFX = 0;\n\n// Specify the SDL_image version that is being linked against. Must match USE_SDL\n// [link]\nvar USE_SDL_IMAGE = 1;\n\n// Specify the SDL_ttf version that is being linked against. Must match USE_SDL\n// [link]\nvar USE_SDL_TTF = 1;\n\n// Specify the SDL_net version that is being linked against. Must match USE_SDL\n// [link]\nvar USE_SDL_NET = 1;\n\n// 1 = use icu from emscripten-ports\n// [link]\nvar USE_ICU = false;\n\n// 1 = use zlib from emscripten-ports\n// [link]\nvar USE_ZLIB = false;\n\n// 1 = use bzip2 from emscripten-ports\n// [link]\nvar USE_BZIP2 = false;\n\n// 1 = use giflib from emscripten-ports\n// [link]\nvar USE_GIFLIB = false;\n\n// 1 = use libjpeg from emscripten-ports\n// [link]\nvar USE_LIBJPEG = false;\n\n// 1 = use libpng from emscripten-ports\n// [link]\nvar USE_LIBPNG = false;\n\n// 1 = use Regal from emscripten-ports\n// [link]\nvar USE_REGAL = false;\n\n// 1 = use Boost headers from emscripten-ports\n// [link]\nvar USE_BOOST_HEADERS = false;\n\n// 1 = use bullet from emscripten-ports\n// [link]\nvar USE_BULLET = false;\n\n// 1 = use vorbis from emscripten-ports\n// [link]\nvar USE_VORBIS = false;\n\n// 1 = use ogg from emscripten-ports\n// [link]\nvar USE_OGG = false;\n\n// 1 = use mpg123 from emscripten-ports\n// [link]\nvar USE_MPG123 = false;\n\n// 1 = use freetype from emscripten-ports\n// [link]\nvar USE_FREETYPE = false;\n\n// Specify the SDL_mixer version that is being linked against.\n// Doesn't *have* to match USE_SDL, but a good idea.\n// [link]\nvar USE_SDL_MIXER = 1;\n\n// 1 = use harfbuzz from harfbuzz upstream\n// [link]\nvar USE_HARFBUZZ = false;\n\n// 3 = use cocos2d v3 from emscripten-ports\n// [link]\nvar USE_COCOS2D = 0;\n\n// 1 = use libmodplug from emscripten-ports\n// [link]\nvar USE_MODPLUG = false;\n\n// Formats to support in SDL2_image. Valid values: bmp, gif, lbm, pcx, png, pnm, tga, xcf, xpm, xv\n// [link]\nvar SDL2_IMAGE_FORMATS = [];\n\n// Formats to support in SDL2_mixer. Valid values: ogg, mp3, mod, mid\n// [link]\nvar SDL2_MIXER_FORMATS = [\"ogg\"];\n\n// If true, the current build is performed for the Emscripten test harness.\n// [other]\nvar IN_TEST_HARNESS = false;\n\n// If 1, target compiling a shared Wasm Memory.\n// [compile+link] - affects user code at compile and system libraries at link.\nvar SHARED_MEMORY = false;\n\n// If true, enables support for pthreads. This implies SHARED_MEMORY.\n// This setting is equivalent to `-pthread`, which should be preferred.\n// [compile+link] - affects user code at compile and system libraries at link.\nvar USE_PTHREADS = false;\n\n// If true, enables support for Wasm Workers. Wasm Workers enable applications\n// to create threads using a lightweight web-specific API that builds on top\n// of Wasm SharedArrayBuffer + Atomics API.\n// [compile+link] - affects user code at compile and system libraries at link.\nvar WASM_WORKERS = 0;\n\n// In web browsers, Workers cannot be created while the main browser thread\n// is executing JS/Wasm code, but the main thread must regularly yield back\n// to the browser event loop for Worker initialization to occur.\n// This means that pthread_create() is essentially an asynchronous operation\n// when called from the main browser thread, and the main thread must\n// repeatedly yield back to the JS event loop in order for the thread to\n// actually start.\n// If your application needs to be able to synchronously create new threads,\n// you can pre-create a pthread pool by specifying -sPTHREAD_POOL_SIZE=x,\n// in which case the specified number of Workers will be preloaded into a pool\n// before the application starts, and that many threads can then be available\n// for synchronous creation.\n// Note that this setting is a string, and will be emitted in the JS code\n// (directly, with no extra quotes) so that if you set it to '5' then 5 workers\n// will be used in the pool, and so forth. The benefit of this being a string\n// is that you can set it to something like\n// 'navigator.hardwareConcurrency' (which will use the number of cores the\n// browser reports, and is how you can get exactly enough workers for a\n// threadpool equal to the number of cores).\n// [link] - affects generated JS runtime code at link time\nvar PTHREAD_POOL_SIZE = 0;\n\n// Normally, applications can create new threads even when the pool is empty.\n// When application breaks out to the JS event loop before trying to block on\n// the thread via `pthread_join` or any other blocking primitive,\n// an extra Worker will be created and the thread callback will be executed.\n// However, breaking out to the event loop requires custom modifications to\n// the code to adapt it to the Web, and not something that works for\n// off-the-shelf apps. Those apps without any modifications are most likely\n// to deadlock. This setting ensures that, instead of a risking a deadlock,\n// they get a runtime EAGAIN error instead that can at least be gracefully\n// handled from the C / C++ side.\n// Values:\n//  - `0` - disable warnings on thread pool exhaustion\n//  - `1` - enable warnings on thread pool exhaustion (default)\n//  - `2` - make thread pool exhaustion a hard error\n// [link]\nvar PTHREAD_POOL_SIZE_STRICT = 1;\n\n// If your application does not need the ability to synchronously create\n// threads, but it would still like to opportunistically speed up initial thread\n// startup time by prewarming a pool of Workers, you can specify the size of\n// the pool with -sPTHREAD_POOL_SIZE=x, but then also specify\n// -sPTHREAD_POOL_DELAY_LOAD, which will cause the runtime to not wait up at\n// startup for the Worker pool to finish loading. Instead, the runtime will\n// immediately start up and the Worker pool will asynchronously spin up in\n// parallel on the background. This can shorten the time that pthread_create()\n// calls take to actually start a thread, but without actually slowing down\n// main application startup speed. If PTHREAD_POOL_DELAY_LOAD=0 (default),\n// then the runtime will wait for the pool to start up before running main().\n// [link] - affects generated JS runtime code at link time\nvar PTHREAD_POOL_DELAY_LOAD = false;\n\n// If not explicitly specified, this is the stack size to use for newly created\n// pthreads.  According to\n// http://man7.org/linux/man-pages/man3/pthread_create.3.html, default stack\n// size on Linux/x86-32 for a new thread is 2 megabytes, so follow the same\n// convention. Use pthread_attr_setstacksize() at thread creation time to\n// explicitly specify the stack size, in which case this value is ignored. Note\n// that the wasm function call control flow stack is separate from this\n// stack, and this stack only contains certain function local variables, such as\n// those that have their addresses taken, or ones that are too large to fit as\n// local vars in wasm code.\n// [link]\nvar DEFAULT_PTHREAD_STACK_SIZE = 2*1024*1024;\n\n// True when building with --threadprofiler\n// [link]\nvar PTHREADS_PROFILING = false;\n\n// It is dangerous to call pthread_join or pthread_cond_wait\n// on the main thread, as doing so can cause deadlocks on the Web (and also\n// it works using a busy-wait which is expensive). See\n// https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\n// This may become set to 0 by default in the future; for now, this just\n// warns in the console.\n// [link]\nvar ALLOW_BLOCKING_ON_MAIN_THREAD = true;\n\n// If true, add in debug traces for diagnosing pthreads related issues.\n// [link]\nvar PTHREADS_DEBUG = false;\n\n// This tries to evaluate code at compile time. The main use case is to eval\n// global ctor functions, which are those that run before main(), but main()\n// itself or parts of it can also be evalled. Evaluating code this way can avoid\n// work at runtime, as it applies the results of the execution to memory and\n// globals and so forth, \"snapshotting\" the wasm and then just running it from\n// there when it is loaded.\n//\n// This will stop when it sees something it cannot eval at compile time, like a\n// call to an import. When running with this option you will see logging that\n// indicates what is evalled and where it stops.\n//\n// This optimization can either reduce or increase code size. If a small amount\n// of code generates many changes in memory, for example, then overall size may\n// increase.\n//\n// LLVM's GlobalOpt *almost* does this operation. It does in simple cases, where\n// LLVM IR is not too complex for its logic to evaluate, but it isn't powerful\n// enough for e.g. libc++ iostream ctors. It is just hard to do at the LLVM IR\n// level - LLVM IR is complex and getting more complex, so this would require\n// GlobalOpt to have a full interpreter, plus a way to write back into LLVM IR\n// global objects.  At the wasm level, however, everything has been lowered\n// into a simple low level, and we also just need to write bytes into an array,\n// so this is easy for us to do. A further issue for LLVM is that it doesn't\n// know that we will not link in further code, so it only tries to optimize\n// ctors with lowest priority (while we do know explicitly if dynamic linking is\n// enabled or not).\n//\n// If set to a value of 2, this also makes some \"unsafe\" assumptions,\n// specifically that there is no input received while evalling ctors. That means\n// we ignore args to main() as well as assume no environment vars are readable.\n// This allows more programs to be optimized, but you need to make sure your\n// program does not depend on those features - even just checking the value of\n// argc can lead to problems.\n//\n// [link]\nvar EVAL_CTORS = 0;\n\n// Is enabled, use the JavaScript TextDecoder API for string marshalling.\n// Enabled by default, set this to 0 to disable.\n// If set to 2, we assume TextDecoder is present and usable, and do not emit\n// any JS code to fall back if it is missing. In single threaded -Oz build modes,\n// TEXTDECODER defaults to value == 2 to save code size.\n// [link]\nvar TEXTDECODER = 1;\n\n// Embind specific: If enabled, assume UTF-8 encoded data in std::string binding.\n// Disable this to support binary data transfer.\n// [link]\nvar EMBIND_STD_STRING_IS_UTF8 = true;\n\n// If set to 1, enables support for transferring canvases to pthreads and\n// creating WebGL contexts in them, as well as explicit swap control for GL\n// contexts. This needs browser support for the OffscreenCanvas specification.\n// [link]\nvar OFFSCREENCANVAS_SUPPORT = false;\n\n// If you are using PROXY_TO_PTHREAD with OFFSCREENCANVAS_SUPPORT, then specify\n// here a comma separated list of CSS ID selectors to canvases to proxy over\n// to the pthread at program startup, e.g. '#canvas1, #canvas2'.\n// [link]\nvar OFFSCREENCANVASES_TO_PTHREAD = \"#canvas\";\n\n// If set to 1, enables support for WebGL contexts to render to an offscreen\n// render target, to avoid the implicit swap behavior of WebGL where exiting any\n// event callback would automatically perform a \"flip\" to present rendered\n// content on screen. When an Emscripten GL context has Offscreen Framebuffer\n// enabled, a single frame can be composited from multiple event callbacks, and\n// the swap function emscripten_webgl_commit_frame() is then explicitly called\n// to present the rendered content on screen.\n//\n// The OffscreenCanvas feature also enables explicit GL frame swapping support,\n// and also, -sOFFSCREEN_FRAMEBUFFER feature can be used to polyfill support\n// for accessing WebGL in multiple threads in the absence of OffscreenCanvas\n// support in browser, at the cost of some performance and latency.\n// OffscreenCanvas and Offscreen Framebuffer support can be enabled at the same\n// time, and allows one to utilize OffscreenCanvas where available, and to fall\n// back to Offscreen Framebuffer otherwise.\n// [link]\nvar OFFSCREEN_FRAMEBUFFER = false;\n\n// If nonzero, Fetch API supports backing to IndexedDB. If 0, IndexedDB is not\n// utilized. Set to 0 if IndexedDB support is not interesting for target\n// application, to save a few kBytes.\n// [link]\nvar FETCH_SUPPORT_INDEXEDDB = true;\n\n// If nonzero, prints out debugging information in library_fetch.js\n// [link]\nvar FETCH_DEBUG = false;\n\n// If nonzero, enables emscripten_fetch API.\n// [link]\nvar FETCH = false;\n\n// ATTENTION [WIP]: Experimental feature. Please use at your own risk.\n// This will eventually replace the current JS file system implementation.\n// If set to 1, uses new filesystem implementation.\n// [link]\nvar WASMFS = false;\n\n// If set to 1, embeds all subresources in the emitted file as base64 string\n// literals. Embedded subresources may include (but aren't limited to) wasm,\n// asm.js, and static memory initialization code.\n//\n// When using code that depends on this option, your Content Security Policy may\n// need to be updated. Specifically, embedding asm.js requires the script-src\n// directive to allow 'unsafe-inline', and using a Worker requires the\n// child-src directive to allow blob:. If you aren't using Content Security\n// Policy, or your CSP header doesn't include either script-src or child-src,\n// then you can safely ignore this warning.\n// [link]\nvar SINGLE_FILE = false;\n\n// If set to 1, all JS libraries will be automatically available at link time.\n// This gets set to 0 in STRICT mode (or with MINIMAL_RUNTIME) which mean you\n// need to explicitly specify -lfoo.js in at link time in order to access\n// library function in library_foo.js.\n// [link]\nvar AUTO_JS_LIBRARIES = true;\n\n// Like AUTO_JS_LIBRARIES but for the native libraries such as libgl, libal\n// and libhtml5.   If this is disabled it is necessary to explcitly add\n// e.g. -lhtml5 and also to first build the library using `embuilder`.\n// [link]\nvar AUTO_NATIVE_LIBRARIES = true;\n\n// Specifies the oldest major version of Firefox to target. I.e. all Firefox\n// versions >= MIN_FIREFOX_VERSION\n// are desired to work. Pass -sMIN_FIREFOX_VERSION=majorVersion to drop support\n// for Firefox versions older than < majorVersion.\n// Firefox ESR 60.5 (Firefox 65) was released on 2019-01-29.\n// [link]\nvar MIN_FIREFOX_VERSION = 65;\n\n// Specifies the oldest version of desktop Safari to target. Version is encoded\n// in MMmmVV, e.g. 70101 denotes Safari 7.1.1.\n// Safari 12.0.0 was released on September 17, 2018, bundled with macOS 10.14.0\n// Mojave.\n// NOTE: Emscripten is unable to produce code that would work in iOS 9.3.5 and\n// older, i.e. iPhone 4s, iPad 2, iPad 3, iPad Mini 1, Pod Touch 5 and older,\n// see https://github.com/emscripten-core/emscripten/pull/7191.\n// [link]\nvar MIN_SAFARI_VERSION = 120000;\n\n// Specifies the oldest version of Internet Explorer to target. E.g. pass -s\n// MIN_IE_VERSION = 11 to drop support for IE 10 and older.\n// Internet Explorer is at end of life and does not support WebAssembly.\n// MAX_INT (0x7FFFFFFF) specifies that target is not supported.\n// [link]\nvar MIN_IE_VERSION = 0x7FFFFFFF;\n\n// Specifies the oldest version of Edge (EdgeHTML, the non-Chromium based\n// flavor) to target. E.g. pass -sMIN_EDGE_VERSION=40 to drop support for\n// EdgeHTML 39 and older.\n// Edge 44.17763 was released on November 13, 2018\n// [link]\nvar MIN_EDGE_VERSION = 44;\n\n// Specifies the oldest version of Chrome. E.g. pass -sMIN_CHROME_VERSION=58 to\n// drop support for Chrome 57 and older.\n// Chrome 75.0.3770 was released on 2019-06-04\n// [link]\nvar MIN_CHROME_VERSION = 75;\n\n// Tracks whether we are building with errno support enabled. Set to 0\n// to disable compiling errno support in altogether. This saves a little\n// bit of generated code size in applications that do not care about\n// POSIX errno variable. Setting this to 0 also requires using --closure\n// for effective code size optimizations to take place.\n// In MINIMAL_RUNTIME builds, this option defaults to 0.\n// [link]\nvar SUPPORT_ERRNO = true;\n\n// If true, uses minimal sized runtime without POSIX features, Module,\n// preRun/preInit/etc., Emscripten built-in XHR loading or library_browser.js.\n// Enable this setting to target the smallest code size possible.  Set\n// MINIMAL_RUNTIME=2 to further enable even more code size optimizations. These\n// opts are quite hacky, and work around limitations in Closure and other parts\n// of the build system, so they may not work in all generated programs (But can\n// be useful for really small programs)\n// [link]\nvar MINIMAL_RUNTIME = 0;\n\n// If set to 1, MINIMAL_RUNTIME will utilize streaming WebAssembly compilation,\n// where WebAssembly module is compiled already while it is being downloaded.\n// In order for this to work, the web server MUST properly serve the .wasm file\n// with a HTTP response header \"Content-Type: application/wasm\". If this HTTP\n// header is not present, e.g. Firefox 73 will fail with an error message\n//    TypeError: Response has unsupported MIME type\n// and Chrome 78 will fail with an error message\n//    Uncaught (in promise) TypeError: Failed to execute 'compile' on\n//    'WebAssembly': Incorrect response MIME type. Expected 'application/wasm'.\n// If set to 0 (default), streaming WebAssembly compilation is disabled, which\n// means that the WebAssembly Module will first be downloaded fully, and only\n// then compilation starts.\n// For large .wasm modules and production environments, this should be set to 1\n// for faster startup speeds. However this setting is disabled by default\n// since it requires server side configuration and for really small pages there\n// is no observable difference (also has a ~100 byte impact to code size)\n// [link]\nvar MINIMAL_RUNTIME_STREAMING_WASM_COMPILATION = false;\n\n// If set to 1, MINIMAL_RUNTIME will utilize streaming WebAssembly instantiation,\n// where WebAssembly module is compiled+instantiated already while it is being\n// downloaded. Same restrictions/requirements apply as with\n// MINIMAL_RUNTIME_STREAMING_WASM_COMPILATION.\n// MINIMAL_RUNTIME_STREAMING_WASM_COMPILATION and\n// MINIMAL_RUNTIME_STREAMING_WASM_INSTANTIATION cannot be simultaneously active.\n// Which one of these two is faster depends on the size of the wasm module,\n// the size of the JS runtime file, and the size of the preloaded data file\n// to download, and the browser in question.\n// [link]\nvar MINIMAL_RUNTIME_STREAMING_WASM_INSTANTIATION = false;\n\n// If building with MINIMAL_RUNTIME=1 and application uses sbrk()/malloc(),\n// enable this. If you are not using dynamic allocations, can set this to 0 to\n// save code size. This setting is ignored when building with -s\n// MINIMAL_RUNTIME=0.\n// [link]\nvar USES_DYNAMIC_ALLOC = true;\n\n// If set to 'emscripten' or 'wasm', compiler supports setjmp() and longjmp().\n// If set to 0, these APIs are not available.  If you are using C++ exceptions,\n// but do not need setjmp()+longjmp() API, then you can set this to 0 to save a\n// little bit of code size and performance when catching exceptions.\n//\n// 'emscripten': (default) Emscripten setjmp/longjmp handling using JavaScript\n// 'wasm': setjmp/longjmp handling using Wasm EH instructions (experimental)\n// 0: No setjmp/longjmp handling\n// 1: Default setjmp/longjmp/handling. Currently 'emscripten'.\n//\n// [compile+link] - at compile time this enables the transformations needed for\n// longjmp support at codegen time, while at link it allows linking in the\n// library support.\nvar SUPPORT_LONGJMP = true;\n\n// If set to 1, disables old deprecated HTML5 API event target lookup behavior.\n// When enabled, there is no \"Module.canvas\" object, no magic \"null\" default\n// handling, and DOM element 'target' parameters are taken to refer to CSS\n// selectors, instead of referring to DOM IDs.\n// [link]\nvar DISABLE_DEPRECATED_FIND_EVENT_TARGET_BEHAVIOR = true;\n\n// Certain browser DOM API operations, such as requesting fullscreen mode\n// transition or pointer lock require that the request originates from within\n// an user initiated event, such as mouse click or keyboard press. Refactoring\n// an application to follow this kind of program structure can be difficult, so\n// HTML5_SUPPORT_DEFERRING_USER_SENSITIVE_REQUESTS=1 flag allows transparent\n// emulation of this by deferring synchronous fullscreen mode and pointer lock\n// requests until a suitable event callback is generated. Set this to 0\n// to disable support for deferring to save code space if your application does\n// not need support for deferred calls.\n// [link]\nvar HTML5_SUPPORT_DEFERRING_USER_SENSITIVE_REQUESTS = true;\n\n// Specifies whether the generated .html file is run through html-minifier. The\n// set of optimization passes run by html-minifier depends on debug and\n// optimization levels. In -g2 and higher, no minification is performed. In -g1,\n// minification is done, but whitespace is retained. Minification requires at\n// least -O1 or -Os to be used. Pass -sMINIFY_HTML=0 to explicitly choose to\n// disable HTML minification altogether.\n// [link]\nvar MINIFY_HTML = true;\n\n// Whether we *may* be using wasm2js. This compiles to wasm normally, but lets\n// you run wasm2js *later* on the wasm, and you can pick between running the\n// normal wasm or that wasm2js code. For details of how to do that, see the\n// test_maybe_wasm2js test.  This option can be useful for debugging and\n// bisecting.\n// [link]\nvar MAYBE_WASM2JS = false;\n\n// This option is no longer used. The appropriate shadow memory size is now\n// calculated from INITIAL_MEMORY and MAXIMUM_MEMORY. Will be removed in a\n// future release.\n// [link]\nvar ASAN_SHADOW_SIZE = -1\n\n// Whether we should use the offset converter.  This is needed for older\n// versions of v8 (<7.7) that does not give the hex module offset into wasm\n// binary in stack traces, as well as for avoiding using source map entries\n// across function boundaries.\n// [link]\nvar USE_OFFSET_CONVERTER = false;\n\n// Whether we should load the WASM source map at runtime.\n// This is enabled automatically when using -g4 with sanitizers.\nvar LOAD_SOURCE_MAP = false;\n\n// If set to 1, the JS compiler is run before wasm-ld so that the linker can\n// report undefined symbols within the binary.  Without this option the linker\n// doesn't know which symbols might be defined in JS so reporting of undefined\n// symbols is delayed until the JS compiler is run.\n// [link]\nvar LLD_REPORT_UNDEFINED = false;\n\n// Default to c++ mode even when run as `emcc` rather then `emc++`.\n// When this is disabled `em++` is required when compiling and linking C++\n// programs. This which matches the behaviour of gcc/g++ and clang/clang++.\n// [compile+link]\nvar DEFAULT_TO_CXX = true;\n\n// While LLVM's wasm32 has long double = float128, we don't support printing\n// that at full precision by default. Instead we print as 64-bit doubles, which\n// saves libc code size. You can flip this option on to get a libc with full\n// long double printing precision.\n// [link]\nvar PRINTF_LONG_DOUBLE = false;\n\n// Run wabt's wasm2c tool on the final wasm, and combine that with a C runtime,\n// resulting in a .c file that you can compile with a C compiler to get a\n// native executable that works the same as the normal js+wasm. This will also\n// emit the wasm2c .h file. The output filenames will be X.wasm.c, X.wasm.h\n// if your output is X.js or X.wasm (note the added .wasm. we make sure to emit,\n// which avoids trampling a C file).\n// [link]\nvar WASM2C = false;\n\n// Experimental sandboxing mode, see\n// https://kripken.github.io/blog/wasm/2020/07/27/wasmboxc.html\n//\n//  * full: Normal full wasm2c sandboxing. This uses a signal handler if it can.\n//  * mask: Masks loads and stores.\n//  * none: No sandboxing at all.\nvar WASM2C_SANDBOXING = 'full';\n\n// Setting this affects the path emitted in the wasm that refers to the DWARF\n// file, in -gseparate-dwarf mode. This allows the debugging file to be hosted\n// in a custom location.\n// [link]\nvar SEPARATE_DWARF_URL = '';\n\n// Emscripten runs wasm-ld to link, and in some cases will do further changes to\n// the wasm afterwards, like running wasm-opt to optimize the binary in\n// optimized builds. However, in some builds no wasm changes are necessary after\n// link. This can make the entire link step faster, and can also be important\n// for other reasons, like in debugging if the wasm is not modified then the\n// DWARF info from LLVM is preserved (wasm-opt can rewrite it in some cases, but\n// not in others like split-dwarf).\n// When this flag is turned on, we error at link time if the build requires any\n// changes to the wasm after link. This can be useful in testing, for example.\n// [link]\nvar ERROR_ON_WASM_CHANGES_AFTER_LINK = false;\n\n// Whether the program should abort when an unhandled WASM exception is encountered.\n// This makes the Emscripten program behave more like a native program where the OS\n// would terminate the process and no further code can be executed when an unhandled\n// exception (e.g. out-of-bounds memory access) happens.\n// This will instrument all exported functions to catch thrown exceptions and\n// call abort() when they happen. Once the program aborts any exported function calls\n// will fail with a \"program has already aborted\" exception to prevent calls into\n// code with a potentially corrupted program state.\n// This adds a small fixed amount to code size in optimized builds and a slight overhead\n// for the extra instrumented function indirection.\n// Enable this if you want Emscripten to handle unhandled exceptions nicely at the\n// cost of a few bytes extra.\n// [link]\nvar ABORT_ON_WASM_EXCEPTIONS = false;\n\n// Build binaries that use as many WASI APIs as possible, and include additional\n// JS support libraries for those APIs.  This allows emscripten to produce binaries\n// are more WASI compilant and also allows it to process and execute WASI\n// binaries built with other SDKs (e.g.  wasi-sdk).\n// This setting is experimental and subject to change or removal.\n// Implies STANDALONE_WASM.\n// [link]\nvar PURE_WASI = false;\n\n// Set to 1 to define the WebAssembly.Memory object outside of the wasm\n// module.  By default the wasm module defines the memory and exports\n// it to JavaScript.\n// Use of the following settings will enable this settings since they\n// depend on being able to define the memory in JavaScript:\n// - USE_PTHREADS\n// - RELOCATABLE\n// - ASYNCIFY_LAZY_LOAD_CODE\n// - WASM2JS (WASM=0)\n// [link]\nvar IMPORTED_MEMORY = false;\n\n// Generate code to loading split wasm modules.\n// This option will automatically generate two wasm files as output, one\n// with the `.orig` suffix and one without.  The default file (without\n// the suffix) when run will generate instrumentation data can later be\n// fed into wasm-split (the binaryen tool).\n// As well as this the generated JS code will contains help functions\n// to loading split modules.\n// [link]\nvar SPLIT_MODULE = false;\n\n// How to calculate reverse dependencies (dependencies from JS functions to\n// native functions) prior to linking native code with wasm-ld.  This option\n// has three possible values:\n// 'auto': (default) Inspect the object code passed to the linker (by running\n//         llvm-nm on all input) and use the map in deps_info.py to determine\n//         the set of additional dependencies.\n// 'all' : Include the full set of possible reverse dependencies.\n// 'none': No reverse dependences will be added by emscriopten. Any reverse\n//         dependencies will be assumed to be explicitly added to\n//         EXPORTED_FUNCTIONS and deps_info.py will be completely ignored.\n// While 'auto' will produce a minimal set (so is good for code size), 'all'\n// and 'none' will give faster link times, especially for very large projects\n// (since they both avoid the running of llvm-nm on all linker inputs).\n// [link]\nvar REVERSE_DEPS = 'auto';\n\n// For MAIN_MODULE builds, automatically load any dynamic library dependencies\n// on startup, before loading the main module.\nvar AUTOLOAD_DYLIBS = true;\n\n// Include unimplemented JS syscalls to be included in the final output.  This\n// allows programs that depend on these syscalls at runtime to be compiled, even\n// though these syscalls will fail (or do nothing) at runtime.\nvar ALLOW_UNIMPLEMENTED_SYSCALLS = true;\n\n// Allow calls to Worker(...) and importScripts(...) to be Trusted Types compatible.\n// Trusted Types is a Web Platform feature designed to mitigate DOM XSS by restricting\n// the usage of DOM sink APIs. See https://w3c.github.io/webappsec-trusted-types/.\n// [link]\nvar TRUSTED_TYPES = false;\n\n// When targeting older browsers emscripten will sometimes require that\n// polyfills be included in the output.  If you would prefer to take care of\n// polyfilling yourself via some other mechanism you can prevent emscripten\n// from generating these by passing `-sNO_POLYFILL` or `-sPOLYFILL=0`\n// With default browser targets emscripten does not need any polyfills so this\n// settings is *only* needed when also explicitly targeting older browsers.\nvar POLYFILL = true;\n\n// If true, add tracing to core runtime functions.\n// This setting is enabled by default if any of the following debugging settings\n// are enabled:\n// - PTHREADS_DEBUG\n// - DYLINK_DEBUG\n// - LIBRARY_DEBUG\n// - GL_DEBUG\n// [link]\nvar RUNTIME_DEBUG = false;\n\n//===========================================\n// Internal, used for testing only, from here\n//===========================================\n\n// Internal (testing only): Disables the blitOffscreenFramebuffer VAO path.\n// [link]\nvar OFFSCREEN_FRAMEBUFFER_FORBID_VAO_PATH = false;\n\n// Internal (testing only): Forces memory growing to fail.\n// [link]\nvar TEST_MEMORY_GROWTH_FAILS = false;\n\n// For renamed settings the format is:\n// [OLD_NAME, NEW_NAME]\n// For removed settings (which now effectively have a fixed value and can no\n// longer be changed) the format is:\n// [OPTION_NAME, POSSIBLE_VALUES, ERROR_EXPLANATION], where POSSIBLE_VALUES is\n// an array of values that will still be silently accepted by the compiler.\n// First element in the list is the canonical/fixed value going forward.\n// This allows existing build systems to keep specifying one of the supported\n// settings, for backwards compatibility.\n// When a setting has been removed, and we want to error on all values of it,\n// we can set POSSIBLE_VALUES to an impossible value (like \"disallowed\" for a\n// numeric setting, or -1 for a string setting).\nvar LEGACY_SETTINGS = [\n  ['BINARYEN', 'WASM'],\n  ['BINARYEN_ASYNC_COMPILATION', 'WASM_ASYNC_COMPILATION'],\n  ['UNALIGNED_MEMORY', [0], 'forced unaligned memory not supported in fastcomp'],\n  ['FORCE_ALIGNED_MEMORY', [0], 'forced aligned memory is not supported in fastcomp'],\n  ['PGO', [0], 'pgo no longer supported'],\n  ['QUANTUM_SIZE', [4], 'altering the QUANTUM_SIZE is not supported'],\n  ['FUNCTION_POINTER_ALIGNMENT', [2], 'Starting from Emscripten 1.37.29, no longer available (https://github.com/emscripten-core/emscripten/pull/6091)'],\n  // Reserving function pointers is not needed - allowing table growth allows any number of new functions to be added.\n  ['RESERVED_FUNCTION_POINTERS', 'ALLOW_TABLE_GROWTH'],\n  ['BUILD_AS_SHARED_LIB', [0], 'Starting from Emscripten 1.38.16, no longer available (https://github.com/emscripten-core/emscripten/pull/7433)'],\n  ['SAFE_SPLIT_MEMORY', [0], 'Starting from Emscripten 1.38.19, SAFE_SPLIT_MEMORY codegen is no longer available (https://github.com/emscripten-core/emscripten/pull/7465)'],\n  ['SPLIT_MEMORY', [0], 'Starting from Emscripten 1.38.19, SPLIT_MEMORY codegen is no longer available (https://github.com/emscripten-core/emscripten/pull/7465)'],\n  ['BINARYEN_METHOD', ['native-wasm'], 'Starting from Emscripten 1.38.23, Emscripten now always builds either to Wasm (-sWASM=1 - default), or to JavaScript (-sWASM=0), other methods are not supported (https://github.com/emscripten-core/emscripten/pull/7836)'],\n  ['BINARYEN_TRAP_MODE', [-1], 'The wasm backend does not support a trap mode (it always clamps, in effect)'],\n  ['PRECISE_I64_MATH', [1, 2], 'Starting from Emscripten 1.38.26, PRECISE_I64_MATH is always enabled (https://github.com/emscripten-core/emscripten/pull/7935)'],\n  ['MEMFS_APPEND_TO_TYPED_ARRAYS', [1], 'Starting from Emscripten 1.38.26, MEMFS_APPEND_TO_TYPED_ARRAYS=0 is no longer supported. MEMFS no longer supports using JS arrays for file data (https://github.com/emscripten-core/emscripten/pull/7918)'],\n  ['ERROR_ON_MISSING_LIBRARIES', [1], 'missing libraries are always an error now'],\n  ['EMITTING_JS', [1], 'The new STANDALONE_WASM flag replaces this (replace EMITTING_JS=0 with STANDALONE_WASM=1)'],\n  ['SKIP_STACK_IN_SMALL', [0, 1], 'SKIP_STACK_IN_SMALL is no longer needed as the backend can optimize it directly'],\n  ['SAFE_STACK', [0], 'Replace SAFE_STACK=1 with STACK_OVERFLOW_CHECK=2'],\n  ['MEMORY_GROWTH_STEP', 'MEMORY_GROWTH_LINEAR_STEP'],\n  ['ELIMINATE_DUPLICATE_FUNCTIONS', [0, 1], 'Duplicate function elimination for wasm is handled automatically by binaryen'],\n  ['ELIMINATE_DUPLICATE_FUNCTIONS_DUMP_EQUIVALENT_FUNCTIONS', [0], 'Duplicate function elimination for wasm is handled automatically by binaryen'],\n  ['ELIMINATE_DUPLICATE_FUNCTIONS_PASSES', [5], 'Duplicate function elimination for wasm is handled automatically by binaryen'],\n  // WASM_OBJECT_FILES is handled in emcc.py, supporting both 0 and 1 for now.\n  ['WASM_OBJECT_FILES', [0, 1], 'For LTO, use -flto or -fto=thin instead; to disable LTO, just do not pass WASM_OBJECT_FILES=1 as 1 is the default anyhow'],\n  ['TOTAL_MEMORY', 'INITIAL_MEMORY'],\n  ['WASM_MEM_MAX', 'MAXIMUM_MEMORY'],\n  ['BINARYEN_MEM_MAX', 'MAXIMUM_MEMORY'],\n  ['BINARYEN_PASSES', [''], 'Use BINARYEN_EXTRA_PASSES to add additional passes'],\n  ['SWAPPABLE_ASM_MODULE', [0], 'Fully swappable asm modules are no longer supported'],\n  ['ASM_JS', [1], 'asm.js output is not supported any more'],\n  ['FINALIZE_ASM_JS', [0, 1], 'asm.js output is not supported any more'],\n  ['ASYNCIFY_WHITELIST', 'ASYNCIFY_ONLY'],\n  ['ASYNCIFY_BLACKLIST', 'ASYNCIFY_REMOVE'],\n  ['EXCEPTION_CATCHING_WHITELIST', 'EXCEPTION_CATCHING_ALLOWED'],\n  ['SEPARATE_ASM', [0], 'Separate asm.js only made sense for fastcomp with asm.js output'],\n  ['SEPARATE_ASM_MODULE_NAME', [''], 'Separate asm.js only made sense for fastcomp with asm.js output'],\n  ['FAST_UNROLLED_MEMCPY_AND_MEMSET', [0, 1], 'The wasm backend implements memcpy/memset in C'],\n  ['DOUBLE_MODE', [0, 1], 'The wasm backend always implements doubles normally'],\n  ['PRECISE_F32', [0, 1, 2], 'The wasm backend always implements floats normally'],\n  ['ALIASING_FUNCTION_POINTERS', [0, 1], 'The wasm backend always uses a single index space for function pointers, in a single Table'],\n  ['AGGRESSIVE_VARIABLE_ELIMINATION', [0, 1], 'Wasm ignores asm.js-specific optimization flags'],\n  ['SIMPLIFY_IFS', [1], 'Wasm ignores asm.js-specific optimization flags'],\n  ['DEAD_FUNCTIONS', [[]], 'The wasm backend does not support dead function removal'],\n  ['WASM_BACKEND', [-1], 'Only the wasm backend is now supported (note that setting it as -s has never been allowed anyhow)'],\n  ['EXPORT_BINDINGS', [0, 1], 'No longer needed'],\n  ['RUNNING_JS_OPTS', [0], 'Fastcomp cared about running JS which could alter asm.js validation, but not upstream'],\n  ['EXPORT_FUNCTION_TABLES', [0], 'No longer needed'],\n  ['BINARYEN_SCRIPTS', [''], 'No longer needed'],\n  ['WARN_UNALIGNED', [0, 1], 'No longer needed'],\n  ['ASM_PRIMITIVE_VARS', [[]], 'No longer needed'],\n  ['WORKAROUND_IOS_9_RIGHT_SHIFT_BUG', [0], 'Wasm2JS does not support iPhone 4s, iPad 2, iPad 3, iPad Mini 1, Pod Touch 5 (devices with end-of-life at iOS 9.3.5) and older'],\n  ['RUNTIME_FUNCS_TO_IMPORT', [[]], 'No longer needed'],\n  ['LIBRARY_DEPS_TO_AUTOEXPORT', [[]], 'No longer needed'],\n  ['EMIT_EMSCRIPTEN_METADATA', [0], 'No longer supported'],\n  ['SHELL_FILE', [''], 'No longer supported'],\n];\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.0048828125,
          "content": "{\n\n}\n"
        },
        {
          "name": "wasm",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}