{
  "metadata": {
    "timestamp": 1736709693967,
    "page": 65,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "marcobambini/gravity",
      "stars": 4336,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.060546875,
          "content": "*.gravity linguist-language=swift\n*.gravity linguist-vendored\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 5.3935546875,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# Microsoft Visual Studio Code\n.vscode/\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n\n# Visual Studio 2015 cache/options directory\n.vs/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# DNX\nproject.lock.json\nartifacts/\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n# NuGet v3's project.json files produces more ignoreable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\norleans.codegen.cs\ntmp/\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n#################################### Edit after this line, ^ upper part is the visual studio template\n\n# Object files\n*.o\n*.ko\n*.obj\n*.elf\n\n# Precompiled Headers\n*.gch\n\n# Libraries\n*.lib\n*.a\n*.la\n*.lo\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n*.i*86\n*.x86_64\n*.hex\ngravity\n\n# Debug files\n*.dSYM/\n*.su\n\n## Build generated\nbuild/\nDerivedData/\n\n## Various settings\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\nxcuserdata/\n\n## Other\n*.moved-aside\n*.xcscheme\n*.xccheckout\n*.xcscmblueprint\n*.xcuserstate\n*.xcworkspacedata\n.DS_Store\ngravity.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist\napi/api.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist\n*.xcscheme\ngravity.xcodeproj/xcuserdata/marco.xcuserdatad/xcschemes/xcschememanagement.plist\n*.xcscheme\nexamples/GravityCpp/GravityCpp.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist\ngravity.xcodeproj/xcuserdata/marco.xcuserdatad/xcschemes/gravity.xcscheme\nbinding/GravityObjC/GravityObjC.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist\ngravity.xcodeproj/xcuserdata/marco.xcuserdatad/xcschemes/gravity.xcscheme\n*.xcscheme\n*.xcscheme\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.103515625,
          "content": "language: c\nos:\n - osx\n - linux\ncompiler:\n  - gcc\n  - clang\nscript:\n  - make\n  - test/unittest/run_all.sh\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.3955078125,
          "content": "cmake_minimum_required(VERSION 3.0)\nproject(gravity VERSION 1.0 LANGUAGES C)\n\nset(CMAKE_C_STANDARD 99)\n\noption(BUILD_CLI \"Build the command line interface\" ON)\n\n# ----------------------------------------------------------------\n# Library\nadd_subdirectory(src)\n\n# ----------------------------------------------------------------\n# Command Line Interface\nif(BUILD_CLI)\n    add_subdirectory(src/cli)\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.359375,
          "content": "#### Contributing to Gravity\nEveryone is welcome to contribute to Gravity. Contributing doesn’t just mean submitting pull requests,\nthere are many different ways for you to get involved, including reporting bugs, add new functionalities\nor just participating in the project.\n\n#### Where to make changes\nCore libraries and documentation is probably the areas that need major contribution.\nAny change to the core VM or other parts of the compiler are welcomed.\n\n#### Code style and syntax rules\nLooking at the Gravity source code I think you can easily follow the same coding style and syntax rule.\nPrivate functions usually don't begin with a gravity_ prefix and are marked as static.\nFeel free to expand this section with a more formal description of the syntax rules.\n\n#### Testing rules\nIf you fix a bug or if you add a new functionality then a unit-test is required.\nA unit-test is a single source code file that is able to run under the unittest executable file.\nYou are free to test your functionalities/fixes into a single unit-test file or split the test in more files.\n\n#### Add Docs\nIf you add new functionality, or edit the way that current functionality works,\nadd or edit the docs to reflect this so that there is documentation of the new\nchanges for new users.\n\n#### Contributors File\nDon't forget to add your name and your email address to the official **CONTRIBUTORS** file!\n"
        },
        {
          "name": "CONTRIBUTORS",
          "type": "blob",
          "size": 0.39453125,
          "content": "# This is the official list of people who contributed to the Gravity repository in some way.\n# Please keep the list sorted by appending your name to the end of the file.\n\nMarco Bambini <marco@creolabs.com>\nSaša Barišić  <cartman300@net.hr>\nSteven Hall   <hallzy.18@gmail.com>\nBrandon Ray   <brandon@bombsightgames.com>\nFilippo Costa <filippocosta.italy@gmail.com>\nMatan Silver  <matansilver@gmail.com>"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2017 Marco Bambini\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.556640625,
          "content": "COMPILER_DIR = src/compiler/\nRUNTIME_DIR = src/runtime/\nSHARED_DIR = src/shared/\nUTILS_DIR = src/utils/\nOPT_DIR = src/optionals/\nGRAVITY_SRC = src/cli/gravity.c\nEXAMPLE_SRC = examples/example.c\n\nCC ?= gcc\nSRC = $(wildcard $(COMPILER_DIR)*.c) \\\n      $(wildcard $(RUNTIME_DIR)*.c) \\\n      $(wildcard $(SHARED_DIR)*.c) \\\n      $(wildcard $(UTILS_DIR)*.c) \\\n      $(wildcard $(OPT_DIR)*.c)\n\nINCLUDE = -I$(COMPILER_DIR) -I$(RUNTIME_DIR) -I$(SHARED_DIR) -I$(UTILS_DIR) -I$(OPT_DIR)\nCFLAGS = $(INCLUDE) -std=gnu99 -fgnu89-inline -fPIC -DBUILD_GRAVITY_API\nOBJ = $(SRC:.c=.o)\n\nifeq ($(OS),Windows_NT)\n\t# Windows\n\tLIBTARGET = gravity.dll\n\tLDFLAGS = -lm -lShlwapi\nelse\n\tUNAME_S := $(shell uname -s)\n\tifeq ($(UNAME_S),Darwin)\n\t\t# MacOS\n\t\tLIBTARGET = libgravity.dylib\n\t\tLDFLAGS = -lm\n\telse ifeq ($(UNAME_S),OpenBSD)\n\t\t# OpenBSD\n\t\tLIBTARGET = libgravity.so\n\t\tLDFLAGS = -lm\n\telse ifeq ($(UNAME_S),FreeBSD)\n\t\t# FreeBSD\n\t\tLIBTARGET = libgravity.so\n\t\tLDFLAGS = -lm\n\telse ifeq ($(UNAME_S),NetBSD)\n\t\t# NetBSD\n\t\tLIBTARGET = libgravity.so\n\t\tLDFLAGS = -lm\n\telse ifeq ($(UNAME_S),DragonFly)\n\t\t# DragonFly\n\t\tLIBTARGET = libgravity.so\n\t\tLDFLAGS = -lm\n\telse\n\t\t# Linux\n\t\tLIBTARGET = libgravity.so\n\t\tLDFLAGS = -lm -lrt\n\tendif\nendif\n\nifeq ($(mode),debug)\n\tCFLAGS += -g -O0 -DDEBUG\nelse\n\tCFLAGS += -O2\nendif\n\nall: gravity\n\ngravity:\t$(OBJ) $(GRAVITY_SRC)\n\t$(CC) $(CFLAGS) -o $@ $^ $(LDFLAGS)\n\t\nexample:\t$(OBJ) $(EXAMPLE_SRC)\n\t$(CC) $(CFLAGS) -o $@ $^ $(LDFLAGS)\n\nlib: gravity\n\t$(CC) -shared -o $(LIBTARGET) $(OBJ) $(LDFLAGS)\n\nclean:\n\trm -f $(OBJ) gravity example libgravity.so gravity.dll\n\t\n.PHONY: all clean gravity example\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.580078125,
          "content": "[![Build Status](https://travis-ci.com/marcobambini/gravity.svg?branch=master)](https://travis-ci.com/marcobambini/gravity)\n\n<p align=\"center\" >\n<img src=\"https://raw.githubusercontent.com/marcobambini/gravity/master/docs/assets/images/logo-gravity.png\" height=\"74px\" alt=\"Gravity Programming Language\" title=\"Gravity Programming Language\">\n</p>\n\n**Gravity** is a powerful, dynamically typed, lightweight, embeddable programming language written in C without any external dependencies (except for stdlib). It is a class-based concurrent scripting language with modern <a href=\"https://github.com/apple/swift\">Swift</a>-like syntax.\n\n**Gravity** supports procedural programming, object-oriented programming, functional programming, and data-driven programming. Thanks to special built-in methods, it can also be used as a prototype-based programming language.\n\n**Gravity** has been developed from scratch for the <a href=\"http://creolabs.com\" target=\"_blank\">Creo</a> project in order to offer an easy way to write portable code for the iOS and Android platforms. It is written in portable C code that can be compiled on any platform using a C99 compiler. The VM code is about 4K lines long, the multipass compiler code is about 7K lines and the shared code is about 3K lines long. The compiler and virtual machine combined add less than 200KB to the executable on a 64-bit system.\n\n## What Gravity code looks like\n\n```swift\nclass Vector {\n\t// instance variables\n\tvar x = 0;\n\tvar y = 0;\n\tvar z = 0;\n\n\t// constructor\n\tfunc init (a = 0, b = 0, c = 0) {\n\t\tx = a; y = b; z = c;\n\t}\n\n\t// instance method (built-in operator overriding)\n\tfunc + (v) {\n\t\tif (v is Int) return Vector(x+v, y+v, z+v);\n\t\telse if (v is Vector) return Vector(x+v.x, y+v.y, z+v.z);\n\t\treturn null;\n\t}\n\n\t// instance method (built-in String conversion overriding)\n\tfunc String() {\n\t        // string interpolation support\n\t\treturn \"[\\(x),\\(y),\\(z)]\";\n\t}\n}\n\nfunc main() {\n\t// initialize a new vector object\n\tvar v1 = Vector(1,2,3);\n\t\n\t// initialize a new vector object\n\tvar v2 = Vector(4,5,6);\n\t\n\t// call + function in the vector object\n\tvar v3 = v1 + v2;\n\t\n\t// returns string \"[1,2,3] + [4,5,6] = [5,7,9]\"\n    \treturn \"\\(v1) + \\(v2) = \\(v3)\";\n }\n ```\n\n## Features\n* multipass compiler\n* dynamic typing\n* classes and inheritance\n* higher-order functions and classes\n* lexical scoping\n* coroutines (via fibers)\n* nested classes\n* closures\n* garbage collection\n* operator overriding\n* powerful embedding API\n* built-in unit tests\n* built-in JSON serializer/deserializer\n* **optional semicolons**\n\n## Special thanks\nGravity was supported by a couple of open-source projects. The inspiration for closures comes from the elegant <a href=\"http://www.lua.org\" target=\"_blank\">Lua</a> programming language; specifically from the document <a href=\"http://www.cs.tufts.edu/~nr/cs257/archive/roberto-ierusalimschy/closures-draft.pdf\">Closures in Lua</a>. For fibers, upvalues handling and some parts of the garbage collector, my gratitude goes to <a href=\"http://journal.stuffwithstuff.com\" target=\"_blank\">Bob Nystrom</a> and his excellent <a href=\"https://github.com/munificent/wren\">Wren</a> programming language. A very special thanks should also go to my friend **Andrea Donetti** who helped me debugging and testing various aspects of the language.\n\n## Documentation\nThe <a href=\"https://marcobambini.github.io/gravity/#/README\">Getting Started</a> page is a guide for downloading and compiling the language. There is also a more extensive <a href=\"https://gravity-lang.org\">language documentation</a>. Official [wiki](https://github.com/marcobambini/gravity/wiki) is used to collect related projects and tools.\n\n## Where Gravity is used\n* Gravity is the core language built into Creo (https://creolabs.com)\n* Gravity is the scripting language for the Untold game engine (https://youtu.be/OGrWq8jpK14?t=58)\n\n## Community\nSeems like a good idea to make a group chat for people to discuss Gravity.<br> [![Join the chat at https://gitter.im/gravity-lang/](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/gravity-lang/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n## Contributing\nContributions to Gravity are welcomed and encouraged!<br>\nMore information is available in the official [CONTRIBUTING](CONTRIBUTING.md) file.\n* <a href=\"https://github.com/marcobambini/gravity/issues/new\">Open an issue</a>:\n\t* if you need help\n\t* if you find a bug\n\t* if you have a feature request\n\t* to ask a general question\n* <a href=\"https://github.com/marcobambini/gravity/pulls\">Submit a pull request</a>:\n\t* if you want to contribute\n\n## License\nGravity is available under the permissive MIT license.\n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 0.3408203125,
          "content": "**FUNCTIONALITIES**\n* Add support for modules\n* Class extensions\n* Code generation for ternary operator\n* Code generation for switch statement\n* Improve register allocation algorithm\n* Improve parser error handling\n\n**DOCUMENTATION AND EXAMPLES**\n* Add examples with projects about API usage (C <-> Gravity)\n* Add the objc bridge with documentation\n"
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "binding",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "gravity.xcodeproj",
          "type": "tree",
          "content": null
        },
        {
          "name": "gravity_visualstudio",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}