{
  "metadata": {
    "timestamp": 1736710168235,
    "page": 847,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nanomq/nanomq",
      "stars": 1703,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.40234375,
          "content": "BasedOnStyle: WebKit\nUseTab: ForIndentation\nIndentWidth: 8\nColumnLimit: 79\nAlignConsecutiveAssignments: true\nAlignConsecutiveDeclarations: true\nAlignTrailingComments: true\nAlignEscapedNewlinesLeft: true\nPointerAlignment: Right\nForEachMacros: ['NNI_LIST_FOREACH']\nAlwaysBreakAfterReturnType: TopLevelDefinitions\nSpaceAfterCStyleCast: true\nAllowShortFunctionsOnASingleLine: Inline\nBreakBeforeBinaryOperators: None\n"
        },
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.20703125,
          "content": "ignore:\n - \"nanomq/tests\"\n - \"nanomq_cli\"\ncoverage:\n range: 50..95\n status:\n  patch: false\n  project:\n    default:\n      # basic\n      target: auto\n      threshold: 5%\n      base: auto\n      if_ci_failed: success"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.328125,
          "content": "# Object files\n*.o\n*.ko\n*.obj\n*.elf\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Libraries\n*.lib\n*.a\n*.la\n*.lo\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n*.i*86\n*.x86_64\n*.hex\n\n# Debug files\n*.dSYM/\n*.su\n.idea/\n.vscode/\nbuild/\ncmake-build-debug/\n\n.DS_Store\n\n# Generate files\nfdb_version.h\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.2900390625,
          "content": "[submodule \"nanonng\"]\n\tpath = nng\n\turl = https://github.com/nanomq/NanoNNG.git\n[submodule \"extern/l8w8jwt\"]\n\tpath = extern/l8w8jwt\n\turl = https://github.com/GlitchedPolygons/l8w8jwt.git\n[submodule \"nanomq_cli/nftp-codec\"]\n\tpath = nanomq_cli/nftp-codec\n\turl = https://github.com/nanomq/nftp-codec/\n"
        },
        {
          "name": ".grcov.yml",
          "type": "blob",
          "size": 0.0927734375,
          "content": "branch: true\nignore-not-existing: true\nfilter: covered\noutput-type: lcov\noutput-file: lcov.info"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.759765625,
          "content": "# Changelog for NanoMQ\n\n## NanoMQ 0.17.2\n\n### What's Changed\n\n* Fix a use-after-free bug in sub_handler.c by @moonZHH in https://github.com/emqx/nanomq/pull/1117\n* Fixed vsomeip compile error. by @lee-emqx in https://github.com/emqx/nanomq/pull/1121\n* Sync with new version of nanosdk by @JaylinYu in https://github.com/emqx/nanomq/pull/1124\n* New QUIC config params & move nng head by @JaylinYu in https://github.com/emqx/nanomq/pull/1125\n* Fix #1127 by @JaylinYu in https://github.com/emqx/nanomq/pull/1129\n* Support generates idl_convert.c & idl_convert.h with specified idl file by cmake. by @alvin1221 in https://github.com/emqx/nanomq/pull/1122\n* Update dds README.md by @alvin1221 in https://github.com/emqx/nanomq/pull/1123\n* MDF [nng] move nng head fix release by @JaylinYu in https://github.com/emqx/nanomq/pull/1130\n* NEW [conf] Add new configuration option 0RTT supported. by @wanghaEMQ in https://github.com/emqx/nanomq/pull/1136\n* Add docs for QUIC & TCP bridge by @alvin1221 in https://github.com/emqx/nanomq/pull/1134\n* Update en_US/config-description. by @alvin1221 in https://github.com/emqx/nanomq/pull/1139\n* Update bridging documents (English) by @alvin1221 in https://github.com/emqx/nanomq/pull/1140\n* Fix the wrong default value was set in nanomq_example.conf. by @wanghaEMQ in https://github.com/emqx/nanomq/pull/1143\n* Update docs related to mqtt bridge by @alvin1221 in https://github.com/emqx/nanomq/pull/1144\n* MDF [conf] update docs & move nng head by @JaylinYu in https://github.com/emqx/nanomq/pull/1146\n\n\n### What's Changed in NanoNNG\n* FIX [broker_tcp] Fix the error that sending null tcp packets. by @wanghaEMQ in https://github.com/nanomq/NanoNNG/pull/487\n* Fix No_Local by @JaylinYu in https://github.com/nanomq/NanoNNG/pull/488\n* Fix the error that heap-buffer-overflow on rotation index. by @wanghaEMQ in https://github.com/nanomq/NanoNNG/pull/489\n* Configuration 0RTT option is supported. by @wanghaEMQ in https://github.com/nanomq/NanoNNG/pull/493\n* Fix [QUIC] seg.fault & remove unused configuration item by @alvin1221 in https://github.com/nanomq/NanoNNG/pull/495\n* FIX [mqtt-tcp test] fix memleak of connmsg. by @Hermann0222 in https://github.com/nanomq/NanoNNG/pull/491\n* fix memleak in nng_mqtt_client_free & transtest by @Hermann0222 in https://github.com/nanomq/NanoNNG/pull/496\n* Fix the error that the value in bridge_node was not initialled by @wanghaEMQ in https://github.com/nanomq/NanoNNG/pull/497\n* FIX [QUIC] fix potential deadlock in mqtt over quic by @JaylinYu in https://github.com/nanomq/NanoNNG/pull/503\n\n**Full Changelog**: https://github.com/nanomq/NanoNNG/compare/0.17.0...0.17.2\n\n### New Contributors\n* @moonZHH made their first contribution in https://github.com/emqx/nanomq/pull/1117\n\n**Full Changelog**: https://github.com/emqx/nanomq/compare/0.16.5...0.17.2"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 12.6484375,
          "content": "#\n# This software is supplied under the terms of the MIT License, a\n# copy of which should be located in the distribution where this\n# file was obtained (LICENSE.txt).  A copy of the license may also be\n# found online at https://opensource.org/licenses/MIT.\n# not finished yet #\n\ncmake_minimum_required (VERSION 2.8.12)\nSET(CMAKE_C_STANDARD 99)\n\nproject(nanomq-nng)\n\ninclude(CheckCCompilerFlag)\n\nset(CMAKE_MODULE_PATH\n  ${CMAKE_MODULE_PATH}\n  \"${CMAKE_CURRENT_LIST_DIR}/cmake\"\n)\n\ninclude(NanoMQHelpers)\n\noption (BUILD_NANOMQ_CLI \"Build nanomq CLI\" OFF)\noption (BUILD_CLIENT \"Build nanomq client\" ON)\noption (BUILD_QUIC_CLI \"Build quic client\" OFF)\noption (BUILD_NNG_PROXY \"Build nng proxy\" ON)\noption (BUILD_ZMQ_GATEWAY \"Build zmq gateway\" OFF)\noption (BUILD_VSOMEIP_GATEWAY \"Build vsomeip gateway\" OFF)\noption (BUILD_DDS_PROXY \"Build dds proxy\" OFF)\noption (BUILD_NFTP \"Build nftp client\" OFF)\noption (BUILD_BENCH \"Build nano-bench\" OFF)\noption (BUILD_APP_LIB \"Build library for app\" OFF)\noption (ENABLE_JWT \"Enable jwt library\" OFF)\noption (ENABLE_RULE_ENGINE \"Enable rule engine\" OFF)\noption (ENABLE_MYSQL \"Enable MYSQL\" OFF)\noption (ENABLE_POSTGRESQL \"Enable POSTGRESQL\" OFF)\noption (ENABLE_TIMESCALEDB \"Enable TIMESCALEDB\" OFF)\noption (ENABLE_AWS_BRIDGE \"Enable aws bridge\" OFF)\noption (ENABLE_SYSLOG \"Enable syslog\" ON)\noption (ENABLE_PARQUET \"Enable parquet\" OFF)\noption (ENABLE_BLF \"Enable BLF\" OFF)\noption (ENABLE_ICEORYX \"Enable iceoryx\" OFF)\noption (NOLOG \"Disable log\" OFF)\noption (ENABLE_ACL \"Enable ACL\" ON)\noption (NANOMQ_TESTS \"Enable nanomq unit tests\" OFF)\noption (BUILD_STATIC \"build with static libs\" OFF)\n\nset (NNG_PROTO_MQTT_BROKER  ON)\nset (NNG_TRANSPORT_MQTT_BROKER_TCP ON)\nset (NNG_TRANSPORT_MQTT_BROKER_WS  ON)\nset (FDB_DFT_API_VERSION 630)\nset (FDB_DFT_DATABASE NULL)\n\nif (NNG_ENABLE_TLS) \n  set (NNG_TRANSPORT_MQTT_BROKER_TLS ON)\n  set (NNG_TRANSPORT_MQTT_BROKER_WSS ON)\n  add_definitions(-DNNG_SUPP_TLS)\nendif()\n\nif (NNG_ENABLE_SQLITE)\n  add_definitions(-DNNG_SUPP_SQLITE)\nendif()\n\nif (NANOMQ_TESTS)\n    enable_testing()\n    set(all_tests, \"\")\n    set(BUILD_STATIC_LIB ON)\n    add_definitions(-DENABLE_NANOMQ_TESTS)\nendif ()\n\n# If the compiler is not on Windows, does it support hiding the\n# symbols by default?  For shared libraries we would like to do this.\nif (NOT WIN32 AND NOT CYGWIN)\n    check_c_compiler_flag(-fvisibility=hidden NANO_HIDDEN_VISIBILITY)\n    if (NANO_HIDDEN_VISIBILITY)\n        add_definitions(-DNANO_HIDDEN_VISIBILITY)\n    endif ()\nendif ()\n\nif (CMAKE_SYSTEM_NAME MATCHES \"Linux\")\n    add_definitions(-DNANO_PLATFORM_POSIX)\n    add_definitions(-DNANO_PLATFORM_LINUX)\n    add_definitions(-DNANO_USE_EVENTFD)\n    add_definitions(-DNANO_HAVE_ABSTRACT_SOCKETS)\n    # Windows subsystem for Linux -- smells like Linux, but it has\n    # some differences (SO_REUSEADDR for one).\n    if (CMAKE_SYSTEM_VERSION MATCHES \"Microsoft\")\n        add_definitions(-DNANO_PLATFORM_WSL)\n    endif ()\n    set(NANO_PLATFORM_POSIX ON)\n\nelseif (CMAKE_SYSTEM_NAME MATCHES \"Android\")\n    add_definitions(-DNANO_PLATFORM_POSIX)\n    add_definitions(-DNANO_PLATFORM_LINUX)\n    add_definitions(-DNANO_PLATFORM_ANDROID)\n    add_definitions(-DNANO_USE_EVENTFD)\n    set(NANO_PLATFORM_POSIX ON)\n\nelseif (APPLE)\n    add_definitions(-DNANO_PLATFORM_POSIX)\n    add_definitions(-DNANO_PLATFORM_DARWIN)\n    set(NANO_PLATFORM_POSIX ON)\n\nelseif (CMAKE_SYSTEM_NAME MATCHES \"FreeBSD\")\n    add_definitions(-DNANO_PLATFORM_POSIX)\n    add_definitions(-DNANO_PLATFORM_FREEBSD)\n    set(NANO_PLATFORM_POSIX ON)\n\nelseif (CMAKE_SYSTEM_NAME MATCHES \"NetBSD\")\n    add_definitions(-DNANO_PLATFORM_POSIX)\n    add_definitions(-DNANO_PLATFORM_NETBSD)\n    set(NANO_PLATFORM_POSIX ON)\n\nelseif (CMAKE_SYSTEM_NAME MATCHES \"OpenBSD\")\n    add_definitions(-DNANO_PLATFORM_POSIX)\n    add_definitions(-DNANO_PLATFORM_OPENBSD)\n    set(NANO_PLATFORM_POSIX ON)\n\nelseif (CMAKE_SYSTEM_NAME MATCHES \"SunOS\")\n    add_definitions(-DNANO_PLATFORM_POSIX)\n    add_definitions(-DNANO_PLATFORM_SUNOS)\n    set(NANO_PLATFORM_POSIX ON)\n\nelseif (CMAKE_SYSTEM_NAME MATCHES \"Windows\")\n    add_definitions(-DNANO_PLATFORM_WINDOWS)\n    add_definitions(-D_CRT_SECURE_NO_WARNINGS)\n    add_definitions(-D_CRT_RAND_S)\n    set(NANO_PLATFORM_WINDOWS ON)\n\n    # Target Windows Vista and later\n    add_definitions(-D_WIN32_WINNT=0x0600)\n    list(APPEND CMAKE_REQUIRED_DEFINITIONS -D_WIN32_WINNT=0x0600)\n\nelseif (CMAKE_SYSTEM_NAME MATCHES \"QNX\")\n    add_definitions(-DNANO_PLATFORM_POSIX)\n    add_definitions(-D__EXT_BSD)\n    add_definitions(-D_QNX_SOURCE)\n    add_definitions(-DNANO_PLATFORM_QNX)\n    set(NANO_PLATFORM_POSIX ON)\n\nelse ()\n    message(AUTHOR_WARNING \"WARNING: This platform may not be supported: ${CMAKE_SYSTEM_NAME}\")\n    message(AUTHOR_WARNING \"${ISSUE_REPORT_MSG}\")\n    # blithely hope for POSIX to work\n    add_definitions(-DNANO_PLATFORM_POSIX)\n    set(NANO_PLATFORM_POSIX ON)\nendif ()\n\nif (NANO_PLATFORM_WINDOWS)\n  set (ENABLE_SYSLOG OFF)\nendif ()\n\nif(BUILD_APP_LIB)\n  set(BUILD_NANO_LIB ON)\n  set(BUILD_CLIENT OFF)\n  set(BUILD_BENCH OFF)\n  set(BUILD_NNG_PROXY OFF)\n  set(NOLOG ON)\n  set(ENABLE_SYSLOG OFF)\n  add_definitions(-DBUILD_APP_LIB)\nendif()\n\nif (NOT NOLOG)\n  add_definitions(-DENABLE_LOG)\n\n  if (ENABLE_SYSLOG)\n    add_definitions(-DSUPP_SYSLOG)\n  endif ()\n\nendif ()\n\nmessage(\"-- NanoMQ versions --\")\n# Determine NanoMQ versions.\nfile(READ \"nanomq/include/version.h\" nano_ver_h)\n\nstring(REGEX MATCH \"NANO_VER_MAJOR ([0-9]*)\" _ ${nano_ver_h})\nset(NANO_MAJOR_VERSION ${CMAKE_MATCH_1})\nstring(REGEX MATCH \"NANO_VER_MINOR ([0-9]*)\" _ ${nano_ver_h})\nset(NANO_MINOR_VERSION ${CMAKE_MATCH_1})\nstring(REGEX MATCH \"NANO_VER_PATCH ([0-9]*)\" _ ${nano_ver_h})\nset(NANO_PATCH_VERSION ${CMAKE_MATCH_1})\n\nset(NANO_ABI_SOVERSION 1)\nset(NANO_ABI_VERSION \"${NANO_MAJOR_VERSION}.${NANO_MINOR_VERSION}.${NANO_PATCH_VERSION}\")\nset(NANO_PACKAGE_VERSION \"${NANO_ABI_VERSION}\")\nmessage(STATUS \"Configuring for NanoMQ version ${NANO_ABI_VERSION}\")\n\nSET(DEBUG 0 CACHE STRING \"gdb support\")\nSET(ASAN 0 CACHE STRING \"asan support\")\nSET(TSAN 0 CACHE STRING \"tsan support\")\n\nif(BUILD_NANO_LIB)\n  add_definitions(-DSUPP_NANO_LIB)\nendif(BUILD_NANO_LIB)\n\nif(BUILD_STATIC_LIB OR BUILD_SHARED_LIBS)\n  add_definitions(-DSUPP_NANO_LIB)\nendif()\n\nif(BUILD_CLIENT)\n  set(BUILD_NANOMQ_CLI ON)\n  add_definitions(-DSUPP_CLIENT)\nendif(BUILD_CLIENT)\n\nif(BUILD_BENCH)\n  set(BUILD_NANOMQ_CLI ON)\n  add_definitions(-DSUPP_BENCH)\nendif()\n\nif(ENABLE_PARQUET)\n  set(NNG_ENABLE_PARQUET ON)\n  add_definitions(-DSUPP_PARQUET)\nendif()\n\nif(ENABLE_BLF)\n  set(NNG_ENABLE_BLF ON)\n  add_definitions(-DSUPP_BLF)\nendif()\n\nif(ENABLE_PLUGIN)\n  if (NOT WIN32 AND NOT CYGWIN)\n    set(NNG_ENABLE_PLUGIN ON)\n    add_definitions(-DSUPP_PLUGIN)\n  else()\n    message(FATAL_ERROR \"Plugin is not supported on Windows\")\n  endif()\nendif(ENABLE_PLUGIN)\n\nif(NNG_ENABLE_QUIC)\n  set(BUILD_QUIC_CLI ON)\n  add_definitions(-DSUPP_QUIC)\n  # This is for enabling beta feature of MSQUIC such as CUBIC/BBR\n  add_definitions(-DQUIC_API_ENABLE_PREVIEW_FEATURES)\nendif()\n\nif(ENABLE_ICEORYX)\n  set(BUILD_ICEORYX_CLI ON)\n  set(NNG_ENABLE_ICEORYX ON)\n  add_definitions(-DSUPP_ICEORYX)\nendif(ENABLE_ICEORYX)\n\nif(ENABLE_ACL)\n  message(\"-- Build NanoMQ with ACL support --\")\n  set(ENABLE_ACL ON)\n  add_definitions(-DACL_SUPP)\nendif()\n\nif(BUILD_NNG_PROXY)\n  set(BUILD_NANOMQ_CLI ON)\n  add_definitions(-DSUPP_NNG_PROXY)\nendif(BUILD_NNG_PROXY)\n\nif(BUILD_ZMQ_GATEWAY)\n  set(BUILD_NANOMQ_CLI ON)\n  add_definitions(-DSUPP_ZMQ_GATEWAY)\nendif(BUILD_ZMQ_GATEWAY)\n\nif(BUILD_VSOMEIP_GATEWAY)\n  set(BUILD_NANOMQ_CLI ON)\n  add_definitions(-DSUPP_VSOMEIP_GATEWAY)\nendif(BUILD_VSOMEIP_GATEWAY)\n\nif(BUILD_DDS_PROXY)\n  set(BUILD_NANOMQ_CLI ON)\n  add_definitions(-DSUPP_DDS_PROXY)\nendif(BUILD_DDS_PROXY)\n\nif(BUILD_NFTP)\n  set(BUILD_NANOMQ_CLI ON)\n  add_definitions(-DSUPP_NFTP)\nendif(BUILD_NFTP)\n\nif (DEBUG)\n  message(\"-- MODE [Debug] --\")\n  SET(CMAKE_BUILD_TYPE \"Debug\")\n  add_definitions(-DDEBUG)\n  add_definitions(-DLOG_USE_COLOR)\n  set(CMAKE_C_CLANG_TIDY ${CMAKE_C_CLANG_TIDY_AVAILABLE})\n  if (NNG_ENABLE_PARQUET)\n    set(CMAKE_CXX_CLANG_TIDY ${CMAKE_C_CLANG_TIDY_AVAILABLE})\n    set(CMAKE_CXX_CPPCHECK ${CMAKE_C_CPPCHECK_AVAILABLE})\n    set(CMAKE_C_CPPCHECK ${CMAKE_C_CPPCHECK_AVAILABLE})\n  endif (NNG_ENABLE_PARQUET)\n\n  if (ASAN)\n    message(\"* ASAN\")\n    SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -g -fsanitize=address\")\n    if (NNG_ENABLE_PARQUET OR NNG_ENABLE_BLF)\n      SET(CMAKE_CXX_FLAGS \"${CMAKE_C_FLAGS} -g -fsanitize=address\")\n    endif (NNG_ENABLE_PARQUET OR NNG_ENABLE_BLF)\n    add_definitions(-DASAN)\n  endif (ASAN)\n  if (TSAN)\n    message(\"* TSAN\")\n    SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -g -fsanitize=thread\")\n    if (NNG_ENABLE_PARQUET OR NNG_ENABLE_BLF)\n      SET(CMAKE_CXX_FLAGS \"${CMAKE_C_FLAGS} -g -fsanitize=thread\")\n    endif (NNG_ENABLE_PARQUET OR NNG_ENABLE_BLF)\n    add_definitions(-DTSAN)\n  endif (TSAN)\nelse()\n  message(\"-- MODE [Release] --\")\nendif(DEBUG)\n\nif (DEBUG_TRACE)\n  message(\"-- MODE [enable ptrace] --\")\n  SET(CMAKE_BUILD_TYPE \"Debug\")\n  add_definitions(-DDEBUG_TRACE)\nendif(DEBUG_TRACE)\n\nif (NNG_ENABLE_COVERAGE)\n    # NB: This only works for GCC and Clang 3.0 and newer.  If your stuff\n    # is older than that, you will need to find something newer.  For\n    # correct reporting, we always turn off all optimizations.\n    if (CMAKE_C_COMPILER_ID STREQUAL \"GNU\")\n        set(NNG_COVERAGE_C_FLAGS \"-g -O0 --coverage\")\n        set(CMAKE_SHARED_LINKER_FLAGS --coverage)\n    elseif (CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n        set(NNG_COVERAGE_C_FLAGS \"-g -O0 --coverage\")\n        set(CMAKE_SHARED_LINKER_FLAGS --coverage)\n    else ()\n        message(FATAL_ERROR \"Unable to enable coverage for your compiler.\")\n    endif ()\n    SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${NNG_COVERAGE_C_FLAGS}\")\nendif ()\n\nif (ENABLE_JWT) \n  add_subdirectory(extern/l8w8jwt)\n  add_definitions(-DSUPP_JWT)\nendif (ENABLE_JWT)\n\nif(ENABLE_AWS_BRIDGE)\n  message(\"ENABLE_AWS_BRIDGE=ON\")\n  add_definitions(-DSUPP_AWS_BRIDGE)\n  add_definitions(-DMQTT_DO_NOT_USE_CUSTOM_CONFIG)\nendif(ENABLE_AWS_BRIDGE)\n\nif (ENABLE_RULE_ENGINE)\n  add_definitions(-DSUPP_RULE_ENGINE)\n  ## find_path(FOUNDATION_INCLUDE_DIR fdb_c.h /usr/include/foundationdb/ /usr/local/include/foundationdb/)\n  ## find_library(FOUNDATION_LIBRARY NAMES fdb_c PATHS /usr/lib/ /usr/local/lib/)\n  ## if (NOT FOUNDATION_INCLUDE_DIR OR NOT FOUNDATION_LIBRARY)\n  ##     message(FATAL_ERROR \"Not found foundationdb\")\n  ## else ()\n  ##     message(STATUS \"Found foundationdb: ${FOUNDATION_LIBRARY}\")\n  ## endif()\n\n  ## if (NOT FDB_API_VERSION)\n  ##     set(FDB_API_VERSION 630)\n  ## endif()\n\n  ## if (FDB_DATABASE)\n  ##     set(FDB_DATABASE \"\\\"${FDB_DATABASE}\\\"\")\n  ## else()\n  ##     set(FDB_DATABASE NULL)\n  ## endif()\n\n  ## configure_file(\n  ##       \"${PROJECT_SOURCE_DIR}/fdbversionConfig.h.in\"\n  ##       \"${PROJECT_SOURCE_DIR}/nanomq/include/fdb_version.h\"\n  ## )\n\nendif (ENABLE_RULE_ENGINE)\n\nif (ENABLE_MYSQL)\n  add_definitions(-DSUPP_MYSQL)\nendif (ENABLE_MYSQL)\n\nif (ENABLE_POSTGRESQL)\n  add_definitions(-DSUPP_POSTGRESQL)\nendif (ENABLE_POSTGRESQL)\n\nif (ENABLE_TIMESCALEDB)\n  add_definitions(-DSUPP_TIMESCALEDB)\nendif (ENABLE_TIMESCALEDB)\n\n\nadd_subdirectory(nng)\nadd_subdirectory(nanomq)\n\nadd_dependencies(nanomq nng)\n\nif (ENABLE_JWT) \n  add_dependencies(nanomq l8w8jwt)\nendif (ENABLE_JWT)\n\nif(BUILD_NANOMQ_CLI)\n  add_subdirectory(nanomq_cli)\nendif(BUILD_NANOMQ_CLI)\n\n# Build Windows MSI package with WIX\nif (NANO_PLATFORM_WINDOWS)\n  if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n         set(CMAKE_INSTALL_PREFIX \"${PROJECT_SOURCE_DIR}/install\")\n  endif()\nendif()\nmessage(\"Install prefix: \" ${CMAKE_INSTALL_PREFIX})\n\n# copy and relocate files\n# install(TARGETS nanomq nanolib nng\n# \tRUNTIME DESTINATION bin # executable file\n# \tLIBRARY DESTINATION bin # dynamic library\n# \tARCHIVE DESTINATION lib)# static library\n# install(FILES nng.h DESTINATION include)\n\nFILE(GLOB CONFIG_FILES \"${PROJECT_SOURCE_DIR}/etc/*.conf\")\n\nif (NOT WIN32 AND NOT CYGWIN)\n  install(FILES ${CONFIG_FILES} DESTINATION ${CMAKE_INSTALL_PREFIX}/etc)\nelse ()\n  install(FILES ${CONFIG_FILES}  DESTINATION config)\n  install(FILES libwinpthread-1.dll DESTINATION bin)\nendif ()\n\n\n# set CPACK params\n\nset(CPACK_PACKAGE_NAME \"NanoMQ\")\nset(CPACK_PACKAGE_VERSION ${NANO_PACKAGE_VERSION})\nset(CPACK_PACKAGE_CONTACT \"contact@emqx.io\")\nset(CPACK_PACKAGE_VENDOR \"nanomq.io\")\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"NanoMQ Edge Computing Kit\")\nset(CPACK_SOURCE_GENERATOR \"TBZ2;TGZ;ZIP;WIX\")\nset(CPACK_SOURCE_IGNORE_FILES \"/build/;/.git/;~$;${CPACK_SOURCE_IGNORE_FILES}\")\nset(CPACK_SOURCE_PACKAGE_FILE_NAME\n        \"${PROJECT_NAME}-v${NANO_PACKAGE_VERSION}-src\")\nset(CPACK_PACKAGE_INSTALL_DIRECTORY \"nanomq\")\nset(CPACK_PACKAGE_FILE_NAME \"${PROJECT_NAME}-v${NANO_PACKAGE_VERSION}\")  # set package name\n\nset(CPACK_RESOURCE_FILE_LICENSE \"${PROJECT_SOURCE_DIR}/LICENSE.txt\") # set license in installer\nset(CPACK_WIX_PATCH_FILE \"${PROJECT_SOURCE_DIR}/wix-patch.xml\") # set environment variables\nset(CPACK_VER)\n\n# package files into installer\ninclude(CPack)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.2109375,
          "content": "# How to contribute\n\nThis guide covers how you can become a part of the ongoing develpment of NanoMQ. We welcome every contribution to prosper the NanoMQ community.\n\n### Did you find a bug?\n\n* Ensure the bug was not already reported. Before you report a bug please search on GitHub [Issues](https://github.com/emqx/nanomq/issues) first.\n\n* If you're unable to find an open issue addressing the problem, [open a new issue](https://github.com/emqx/nanomq/issues/new/choose) of bug report.\n You can use the bug report template to create an issue. Be sure to include a title and clear description, and as much relevant information as possible.\n\n### Did you write a patch that fix a bug?\n\n* Open a new GitHub pull request with the patch. If you are new to contribute check [Steps to contribute](#steps-to-contribute).\n  \n* Ensure the PR description clearly describes the problem and solution.\n\n\n### Do you intend to add a new feature or change an exsiting one?\n\n* If you plan to do something more involved, first [open a new issue](https://github.com/emqx/nanomq/issues/new/choose) of feature request to disscuss your idea.\n This will avoid unnecessary work and surely give you and us a good deal of inspiration.\n  \n* Before you make changes to NanoMQ to create your own project, you may check [guidance](./CodeGuidance.md) to learn more about NanoMQ source code.\n\n* We will be glad if you can share your code with the NanoMQ project. This will surely inspire the NanoMQ community and the open-source world.\n\n### Do you have questions about the source code?\n\n* Ask any question about NanoMQ in [discussion](https://github.com/emqx/nanomq/discussions).\n  \n* You can check [guidance](./CodeGuidance.md) to learn more.\n\n## Steps to Contribute\n\nHere are some steps to create your own forked repository and open a new GitHub pull request.\n\n### First time setup\n\nWe use GitHub pull request to review proposed code changes. So you need to obtain a GitHub account before making code contribution.\n\n1. **Fork** NanoMQ to your private repository. Click the `Fork` button in the top right corner of NanoMQ repository.\n2. **Clone** the repository locally from your personal fork. `git clone https://github.com/<Github_user>/nanomq.git`.\n3. Add NanoMQ repo as additional Git remote so that you can sync between local repo and NanoMQ.\n\n```shell\ngit remote add upstream https://github.com/emqx/nanomq.git\n```\n\n### Create a branch to work on\n\nYou’ll work on your contribution in a branch in your own (forked) repository. Create a local branch, initialized with\nthe state of the branch you expect your changes to be merged into. The `master` branch is the active development branch, so\nit is recommended to set `master` as base branch.\n\n```shell\ngit fetch upstream\ngit checkout -b <my-branch> upstream/master\n```\n\nNow you can use your favorite IDE or editor to make change happens.\n\n### Testing\n\nNanoMQ project leverages Github actions to run unit test & FVT (functional verification test), so please take a\nlook at the PR status result, and make sure that all testcases run successfully.\n\nYou can run the test suit locally in advance.\n\n```shell\ncmake .. -DDEBUG=ON -DASAN=ON -DNANOMQ_TESTS=ON <-DCMAKE_BUILD_TYPE=ON>\nmake\nctest --output-on-failure\n```\nNote: some tests may fail due to bad Internet connection, you can still submit your commits to run test via Github action.\n\n### Licensing\n\nAll code contributed to NanoMQ should be licensed under MIT license. Be sure every new file you have added include the right license header.\n\n### Sign-off commit\n\nSign-off is required to certify the origin of the commit. If you have set your `user.name` and `user.email` in git configs,\n you can simply use `git commit -s` to sign off your commit. Every commit\nmust be signed off.\n\n### Syncing\n\nPeriodically while you work, and certainly before submitting a pull request, you should update your branch with the most\nrecent changes to the target branch. We prefer rebase than merge to avoid extraneous merge commits.\n\n```shell\ngit fetch upstream\ngit rebase upstream/master\n```\n\n### Submitting changes\n\nThe `master` branch is the active development branch, so it's recommended to set `master` as base branch, and also create PR\nagainst `master` branch.\n\nOrganize your commits to make our reviewing job easier. We prefer multiple small pull requests, instead of a single large pull request.\n Within one pull request, we prefer a relatively small number of commits with logical steps. \n For most pull requests, it is better to squash your changes down to one commit.\n\nMake sure all your commits comply to the [commit message guidelines](#commit-message-guidelines).\n\nThen you can push to your forked repo. Assume the remove name for your forked is the default `origin`. If you have\nrebased the git history before the last push, add `-f` to force pushing the changes.\n\n```shell\ngit push origin -f\n```\n\nThen you can navigate to NanoMQ repo to create a pull request. Our GitHub repo provides automatic testing with GitHub action.\n Please make sure those tests pass. We will review the code after all tests pass.\n\n### Commit Message Guidelines\n<!-- this may need further discussion -->\n\nEach commit message start with a '*' and consists of a **tppe**, a **scope** and a **subject**.\n\n```text\n* <type> [<scope>] <subject>\n```\n\nExamples:\n\n```text\n* FIX [bridge] add SUPP_QUIC condition to hybrid protector \n```\n\n```text\n* NEW [conf] add new conf params for QUIC\n```\n\n#### Type\n\nYou can use following types:\n\n- **FIX**: fix a bug, a typo, fix anything.\n- **MDF**: refactoring code, format,etc.\n- **NEW**: new feature, new docs, new tests, anything new.\n\n#### Scope\n\nThere are no predefined scopes for this repository. You can use a custom scope for clarity.\n\n#### Subject\n\nThe subject contains a succinct description of the change.\n\n## Community Promotion\n\nThere are many other great ways to get involved. We appreciate every contribution to promoting NanoMQ to the open source community.\n\nThe promotion contributions include but not limited to:\n\n- Integrating NanoMQ to your own open source project\n- Organizing workshops or meetups about the project\n- Answering questions about the project on issues, slack or maillist\n- Writing tutorials for how the project can be used\n- Offering to mentor another contributor\n\nThank you for your great effort to the NanoMQ community and the open-source world!\n\n"
        },
        {
          "name": "CodeGuidance.md",
          "type": "blob",
          "size": 3.8125,
          "content": "# Code Guidance\n\nThis guide covers code structure, state machine, important data structure and commom nng interface that you may need to know before you make code changes.\n\n## Code Structure\n\nThis is a brief introduction for NanoMQ project, note that code structure presented here could be invalidated due to updates and modifications. \n\n```shell\n├── deploy\n├── docs\n│   ├── en_US            \n│   └── zh_CN            \n├── etc                    // example configuration files, certs and idl files\n├── extern                 // submodules\n├── nanomq\n│   ├── acl_handler.c    \n│   ├── apps\n│   │   └── broker.c       // core src code of broker including the state machine\n│   ├── aws_bridge.c     \n│   ├── bridge.c         \n│   ├── cmd_proc.c         // ipc server for receving commands like reload\n│   ├── conf_api.c         // APIs to handle configuration\n│   ├── db_cli.c           // handle foundation db, only when SUPP_RULE_ENGINE is on\n│   ├── mqtt_api.c         // APIs to handle commom mqtt msg and logs\n│   ├── nanomq.c           // user interface of NanoMQ\n│   ├── nanomq_rule.c      // handle sqlite and mysql db, only when SUPP_RULE_ENGINE is on\n│   ├── process.c          // APIs for process\n│   ├── pub_handler.c    \n│   ├── rest_api.c       \n│   ├── sub_handler.c    \n│   ├── tests            \n│   ├── unsub_handler.c  \n│   ├── webhook_inproc.c   // webhook server\n│   ├── webhook_post.c   \n│   └── web_server.c       // web server to handle web request\n├── nanomq_cli             // mqtt client \n└── nng                   \n    ├── demo              \n    ├── docs             \n    ├── etc              \n    ├── extern             // submodules of nanonng\n    ├── src              \n    │   ├── compat       \n    │   ├── core           // core src code of nng\n    │   ├── mqtt           // nng extension for mqtt\n    │   ├── nng.c          // public APIs for applications to use directly\n    │   ├── nng_legacy.c   // legacy APIs provided for compatibility for now\n    │   ├── platform     \n    │   ├── sp             // sp protocal\n    │   ├── supplemental   // supplemental APIs for developers to use\n    │   ├── testing        // test framework\n    │   └── tools        \n    └── tests            \n```\n\n## State Machine\n\n`nano_work` is the bottom worker of NanoMQ project, it can be used for broker, http server and bridge. All these protos work in the same state machine. `nano_work` has 6 states, namely `INIT`, `RECV`, `SEND`, `WAIT`, `END`, `CLOSE`. `nano_work` start with `INIT` after initialization, then try to recv msgs and transform state to `RECV`. `RECV` is the major state where `nano_work` takes various actions according to the msg type then transform into another state. If `nano_work` fails to handle msgs, then it will transform into the `CLOSE` state to compose and send a disconnect msg. If it succeeds to handle msgs, then it may go to the `SEND`  state to check whether the optional rule engine or webhook actions should be taken. When receiving pub msgs, connack msgs, or disconnect events, it will take corresponding action and go to the `WAIT` state to encode and send the pub msg. `END` state is mainly for will msgs. All these states `CLOSE`, `SEND`, `WAIT`, `END` will end with a action to free msgs and try to receive msgs again, then transform into the `RECV` state forming a closed loop. You can check the diagram blow for more information.\n\n![image](docs/zh_CN/images/NanoMQ_state_machine.png)\n\n<!-- \n## Data Structure\n\n## NanoNNG Interface\n\nTODO: list commom nanonng interface \ncheck nanomq/nng/src/nng.c to get all. \n-->"
        },
        {
          "name": "Docker-introduction",
          "type": "blob",
          "size": 6.3251953125,
          "content": "\n# Quick Reference\n\nOfficial Website:\n\nhttps://nanomq.io/\n\nWhere to get help and fire issues:\n\nhttps://github.com/emqx/nanomq/issues or https://slack-invite.emqx.io/ or https://discord.gg/xYGf3fQnES\n\nSupported architectures\n\nPOSIX compatible Architecture\n\n\n# What is NanoMQ\n\nNano MQTT Broker (NanoMQ) is a lightweight and blazing-fast MQTT Broker for the IoT Edge platform. NanoMQ unifies data in motions and data in use between Edge and Cloud in an efficient manner.\n\nIhe cost effectiveness, performant, high compatibility and interoperability makes NanoMQ your best option of edge messaging broker and databus.\n\n## Features\n\n- Fully MQTT 5.0 Compliant\n\nFully support MQTT 5.0/3.1.1, Compatible with all standard open-source MQTT SDKs.\n\n- MQTT Bridges\n\nBridging message from edge to multiple clouds. In-line connections to Global cloud services.\n\n- Message Persistence\n\nPreserve your business-critical data with built-in data persistence, and resume uploading automatically when the connection is restored.\n\n- Rule Engine\n\nUnlock the flexibility of data with a SQL-based rule engine. Integrates with eKuiper to bring stream processing to the edge. \n\n- Integrability\n\nReduce the cost of integrating edge computing applications with event-driven WebHooks. Easy to maintain with EdgeOps friendly HTTP APIs.\n\n- All-round\n\nSupport multiple protocols such as ZeroMQ/nanomsg/NNG/WebSocket. Enabling flexible and diverse routing topology on edge with. Secure your IoT connections with TLS/SSL.\n\n# How to use this image\n\n```bash\ndocker pull emqx/nanomq:latest\n```\n\nRun specific version of NanoMQ:\n```bash\ndocker run -d -p 1883:1883 -p 8883:8883 --name nanomq emqx/nanomq:latest\n```\nThere are 3 kinds of NanoMQ docker image:\n\nDefault: Take alpine as base image, minimum size but only has basic MQTT broker function.\n\n```bash\ndocker pull emqx/nanomq:0.14.1\n```\n\nSlim: Take Ubuntu as base image, moderate size with necessary features like TLS/SSL, SQLite and Rule Engine.\n\n```bash\ndocker pull emqx/nanomq:0.14.1-slim\n```\n\n\nFull: A comprehensive docker image with all features on board, such as QUIC bridging, ZeroMQ gateway and Bench toolkit.\n\n```bash\ndocker pull emqx/nanomq:0.14.1-full\n```\n\n### NanoMQ configuration file\n\nDocker version:\n  Specify config file path from host:\n\n  ```bash\n  docker run -d -p 1883:1883 -v {YOU LOCAL PATH}: /etc \\\n              --name nanomq  emqx/nanomq:0.14.1\n  ```\n\nRecommend to use Environment variables to config NanoMQ\n\n#### NanoMQ Environment Variables \n| Variable | Type  | Value |\n| ------------------------------------------------------------ |     ------------------------------------------------------------ | ------------------------------------------------------------ |\n|NANOMQ_BROKER_URL |String | 'nmq-tcp://host:port', 'tls+nmq-tcp://host:port'|\n|NANOMQ_DAEMON |Boolean | Set nanomq as daemon (default: false).|\n|NANOMQ_NUM_TASKQ_THREAD | Unsigned Integar 32 (Long) | Number of taskq threads used, `num` greater than 0 and less than 256.|\n|NANOMQ_MAX_TASKQ_THREAD | Unsigned Integar 32 (Long) | Maximum number of taskq threads used, `num` greater than 0 and less than 256.|\n|NANOMQ_PARALLEL | Unsigned Integar 32 (Long) | Number of parallel.|\n|NANOMQ_PROPERTY_SIZE | Integer | Max size for a MQTT user property.|\n|NANOMQ_MSQ_LEN | Integer | Queue length for resending messages.|\n|NANOMQ_QOS_DURATION | Integer |  The interval of the qos timer.|\n|NANOMQ_ALLOW_ANONYMOUS | Boolean | Allow anonymous login (default: true).|\n|NANOMQ_WEBSOCKET_ENABLE | Boolean | Enable websocket listener (default: true).|\n|NANOMQ_WEBSOCKET_URL | String | 'nmq-ws://host:port/path', 'nmq-wss://host:port/path' |\n|NANOMQ_HTTP_SERVER_ENABLE | Boolean | Enable http server (default: false).|\n|NANOMQ_HTTP_SERVER_PORT | Integer | Port for http server (default: 8081).|\n|NANOMQ_HTTP_SERVER_USERNAME | String | Http server user name for auth.|\n|NANOMQ_HTTP_SERVER_PASSWORD | String | Http server password for auth.|\n|NANOMQ_TLS_ENABLE|Boolean|Enable TLS connection.|\n|NANOMQ_TLS_URL| String | 'tls+nmq-tcp://host:port'.|\n|NANOMQ_TLS_CA_CERT_PATH| String | Path to the file containing PEM-encoded CA certificates.|\n|NANOMQ_TLS_CERT_PATH| String |  Path to a file containing the user certificate.|\n|NANOMQ_TLS_KEY_PATH| String | Path to the file containing the user's private PEM-encoded key.|\n|NANOMQ_TLS_KEY_PASSWORD| String |  String containing the user's password. Only used if the private keyfile is password-protected.|\n|NANOMQ_TLS_VERIFY_PEER| Boolean | Verify peer certificate (default: false).|\n|NANOMQ_TLS_FAIL_IF_NO_PEER_CERT| Boolean | Server will fail if the client does not have a certificate to send (default: false).|\n|NANOMQ_CONF_PATH | String | NanoMQ main config file path (defalt: /etc/nanomq.conf).|\n\n\n- Specify a broker url.\n  On host system: \n  ```bash\n  export NANOMQ_BROKER_URL=\"nmq-tcp://0.0.0.0:1883\"\n  export NANOMQ_TLS_ENABLE=true\n  export NANOMQ_TLS_URL=\"tls+nmq-tcp://0.0.0.0:8883\"\n  ```\n  Creating docker container:\n  ```bash\n  docker run -d -p 1883:1883 -p 8883:8883 \\\n             -e NANOMQ_BROKER_URL=\"nmq-tcp://0.0.0.0:1883\" \\\n             -e NANOMQ_TLS_ENABLE=true \\\n             -e NANOMQ_TLS_URL=\"tls+nmq-tcp://0.0.0.0:8883\" \\\n             --name nanomq emqx/nanomq:0.14.1-full\n  ```\n\n- Specify a nanomq config file path.\n  On host system: \n  ```bash\n  export NANOMQ_CONF_PATH=\"/usr/local/etc/nanomq.conf\"\n  ```\n  Creating docker container:\n  ```bash\n  docker run -d -p 1883:1883 -e NANOMQ_CONF_PATH=\"/usr/local/etc/nanomq.conf\" \\\n              [-v {LOCAL PATH}:{CONTAINER PATH}] \\\n              --name nanomq emqx/nanomq:0.14.0-slim\n  ```\n### Performance Tunning\n\nIn order to achieve the best performance on your platform, recommend to change following settings:\n\nName                               | Type          | Description\n---------------------------------- | ------------- | ----------------------------------------------------------------------------------------------\nsystem.num_taskq_thread            | Unsigned Integar 32 (Long)       | Number of taskq threads used. (equal to your CPU cores)\nsystem.max_taskq_thread            | Unsigned Integar 32 (Long)       | Maximum number of taskq threads used. (equal to your CPU cores)\nsystem.parallel                    | Long          | Number of parallel. (equal to your CPU cores * 2)\nmqtt.session.msq_len               | Integer       | Inflight window/Queue length for resending messages. (Recommend to set as max number: 65535, depending on your memory limitation)\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0654296875,
          "content": "The MIT License\n\nCopyright 2020 NanoMQ Team, Inc. <jaylin@emqx.io>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom\nthe Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.818359375,
          "content": "# LF Edge NanoMQ\n\n[![GitHub Release](https://img.shields.io/github/release/emqx/nanomq?color=brightgreen&label=Release)](https://github.com/emqx/nanomq/releases)\n[![Build Status](https://img.shields.io/github/actions/workflow/status/emqx/nanomq/build_packages.yaml?branch=master&label=Build)](https://github.com/emqx/nanomq/actions)\n[![Docker Pulls](https://img.shields.io/docker/pulls/emqx/nanomq?label=Docker%20Pulls)](https://hub.docker.com/r/emqx/nanomq)\n[![Discord](https://img.shields.io/discord/931086341838622751?label=Discord&logo=discord)](https://discord.gg/xYGf3fQnES)\n[![Twitter](https://img.shields.io/badge/Follow-EMQ-1DA1F2?logo=twitter)](https://twitter.com/EMQTech)\n[![YouTube](https://img.shields.io/badge/Subscribe-EMQ-FF0000?logo=youtube)](https://www.youtube.com/channel/UC5FjR77ErAxvZENEWzQaO5Q)\n[![Community](https://img.shields.io/badge/Community-NanoMQ-yellow?logo=github)](https://github.com/emqx/nanomq/discussions)\n[![codecov](https://codecov.io/gh/emqx/nanomq/branch/master/graph/badge.svg?token=24E9Q3C0M0)](https://codecov.io/gh/emqx/nanomq)\n[![License](https://img.shields.io/github/license/emqx/nanomq.svg?logoColor=silver&logo=open-source-initiative&label=&color=blue)](https://github.com/emqx/nanomq/blob/master/LICENSE.txt)\n\nNanoMQ MQTT Broker (NanoMQ) is an all-around Edge Messaging Platform that includes a blazing-fast MQTT Broker for the IoT/IIoT and a lightweight Messaging Bus for SDV.\n\nNanoMQ's embedded Actor architecture extends NNG's internal asynchronous I/O, plus an enhanced message passing and scheduling system to maximize the overall capacity. Fine-tuned towards the embedded environment and mission-critical scenarios.\n\nNanoMQ fully supports MQTT V3.1.1/3.1 and MQTT V5.0.\n\nFor more information, please visit [NanoMQ homepage](https://nanomq.io/).\n\n## Features\n\n- Cost-effective on an embedded platform;\n- Fully based on native POSIX. High Compatibility;\n- Pure C implementation. High portability;\n- Fully asynchronous I/O and multi-threading;\n- Good support for SMP;\n- Low latency & High handling capacity;\n\n![image](https://user-images.githubusercontent.com/64823539/182988350-f6e2520f-6e6f-46db-b469-685bec977270.png)\n\n## Get Started\n\n### Run NanoMQ using Docker\n\n```bash\ndocker run -d --name nanomq -p 1883:1883 -p 8083:8083 -p 8883:8883 emqx/nanomq:latest\n```\n\n### More installation options\n\nIf you prefer to install and manage NanoMQ yourself, you can download the latest version from [nanomq.io/downloads](https://nanomq.io/downloads).\n\n#### Run NanoMQ:\n\n```bash\nnanomq start\n## or run nanomq with a specified configuration file\nnanomq start --conf <config_file>\n```\n\n\n## Build From Source\n\nNanoMQ is dedicated to delivering a simple but powerful Messaging Hub on various edge platforms.\n\nWith this being said, NanoMQ can run on different architectures such like x86_64 and ARM with minor migration efforts.\n\nBuilding NanoMQ requires a C99-compatible compiler and [CMake](http://www.cmake.org/) (version 3.13 or newer). \n\n- It is recommended to compile with `Ninja`:\n\n  ```bash\n  git clone https://github.com/emqx/nanomq.git\n  cd nanomq\n  git submodule update --init --recursive\n  mkdir build && cd build\n  cmake -G Ninja ..\n  ninja\n  ```\n\n- Or compile with `make`:\n\n  ``` bash\n  git clone https://github.com/emqx/nanomq.git \n  cd nanomq\n  git submodule update --init --recursive\n  mkdir build && cd build\n  cmake .. \n  make\n  ```\n\n### Build option\n\nThere are some configuration options specified using CMake defines in addition to the standard options like `CMAKE_BUILD_TYPE`:\n\n- `-DNNG_ENABLE_QUIC=ON`: to build NanoMQ with QUIC bridging feature\n- `-DNNG_ENABLE_TLS=ON`: to build with TLS support. (Need to install  [mbedTLS](https://tls.mbed.org) in advance)\n- `-DBUILD_CLIENT=OFF`: to disable nanomq tools client suite  (including pub / sub / conn )\n- `-DBUILD_ZMQ_GATEWAY=ON`: to build `nanomq_cli` with zeromq gateway tool\n- `-DBUILD_NFTP=ON`: to build `nanomq_cli` with nftp client\n- `-DBUILD_DDS_PROXY=ON`: to build `nanomq_cli` with dds client ( proxy / sub / pub )\n- `-DBUILD_BENCH=ON`: to build  `nanomq_cli` mqtt bench\n- `-DENABLE_JWT=ON`: to build  JWT dependency for http server\n- `-DNNG_ENABLE_SQLITE=ON`: to build nanomq with sqlite support\n- `-DBUILD_STATIC_LIB=ON`: to build nanomq as a static library\n- `-DBUILD_SHARED_LIBS=ON`: to build nanomq as a shared library\n- `-DDEBUG=ON`: to enable debug flag\n- `-DASAN=ON`: to enable sanitizer\n- `-DDEBUG_TRACE=ON`: to enable ptrace (ptrace is a mechanism that allows one process to “trace” the execution of another process. The tracer is able to\n  pause execution, and inspect and modify memory and registers in the tracee process)\n\n\n\n## Resources\n\n- NanoMQ \n  - [Blog](https://www.emqx.com/en/blog/category/nanomq)\n  \n  - [Official website](https://nanomq.io/)\n\n- MQTT Specifications \n  - [MQTT Version 3.1.1](https://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html)\n  - [MQTT Version 5.0](https://docs.oasis-open.org/mqtt/mqtt/v5.0/cs02/mqtt-v5.0-cs02.html)\n  - [MQTT SN](http://mqtt.org/new/wp-content/uploads/2009/06/MQTT-SN_spec_v1.2.pdf)\n  - *Unsupported features of MQTT 5.0*\n    - Auth https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901217\n    - Server Redirection https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901255\n\n- MQTT Client Examples\n  - [MQTT-Client-Examples](https://github.com/emqx/MQTT-Client-Examples)\n\n- MQTT Client SDK\n  - [NanoSDK](https://github.com/nanomq/NanoSDK)\n\n- Internet of Vehicles\n  - [Internet of Vehicles](https://www.emqx.com/en/blog/category/internet-of-vehicles). Build a reliable, efficient, and industry-specific IoV platform based on EMQ's practical experience, from theoretical knowledge such as protocol selection to practical operations like platform architecture design.\n\n- DDS \n  - [CycloneDDS](https://cyclonedds.io/)\n  - [DDS proxy on NanoMQ_CLI](./nanomq_cli/dds2mqtt/README.md)\n\n\n\n## Get Involved\n\n### Our Website\n\nVisit our [official website](https://nanomq.io/) to have a good grasp on NanoMQ MQTT broker and see how it can be applied in current industries.\n\n### Test Report\n\nThis [test report](https://nanomq.io/docs/latest/test-report.html#about-nanomq) shows how extraordinary and competitive the NanoMQ is in Edge Computing.\n\n*Currently the benchmark is for 0.2.5, the updated one with ver 0.3.5 is coming soon*\n\n### Questions\n\nThe [Github Discussions](https://github.com/emqx/nanomq/discussions) provides a place for you to ask questions and share your ideas with users around the world.\n\n### Slack\n\nYou could join us on [Slack](https://slack-invite.emqx.io/). We now share a workspace with the entire EMQ X team. After joining, find your channel! \n\n- `#nanomq`: is a channel for general usage, where for asking questions or sharing using experience; \n- `#nanomq-dev`: is a channel for MQTT lovers and developers, your great thoughts are what we love to hear;\n- `#nanomq-nng`: is a channel for guys who are interested in NNG, one of our fabulous dependencies.\n\n\n\n## Community\n\nSome quotes from NNG's maintainer --- Garrett:\nI’m very excited about the synergy between the NanoMQ and NNG projects, and grateful for sponsorship that NNG has received from the NanoMQ team. The NanoMQ team has been able to push NNG's envelope, and the collaboration has already yielded substantial improvements for both projects. Further, the cooperation between these two project will make MQTT and SP (nanomsg) protocols easy to use within a single project as well as other capabilities (such as websockets, HTTPS clients and servers), greatly expanding the toolset within easy reach of the IoT developer. Further this comes without the usual licensing or portability/embeddability challenges that face other projects. Additional planned collaborative work will further expand on these capabilities to the benefit of our shared communities.\n\n### Open Source \n\nNanoMQ is fully open-sourced!\n\n\n\n## License\n\n[MIT License](./LICENSE.txt)\n\n\n\n## Authors\n\n\nThe EMQ Edge Computing team.\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "deploy",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "extern",
          "type": "tree",
          "content": null
        },
        {
          "name": "libatomic-1.dll",
          "type": "blob",
          "size": 44.3984375,
          "content": null
        },
        {
          "name": "libwinpthread-1.dll",
          "type": "blob",
          "size": 92.1142578125,
          "content": null
        },
        {
          "name": "nanomq",
          "type": "tree",
          "content": null
        },
        {
          "name": "nanomq_cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "nng",
          "type": "commit",
          "content": null
        },
        {
          "name": "package.mk",
          "type": "blob",
          "size": 0.0107421875,
          "content": "package.mk\n"
        },
        {
          "name": "wix-patch.xml",
          "type": "blob",
          "size": 0.4228515625,
          "content": "<CPackWiXPatch>\r\n\t<CPackWiXFragment Id=\"CM_CP_services.bin.nanomq.exe\">\r\n\t\t<Environment Id=\"NANOMQ_DIR\" Action=\"set\" \r\n\t\t\tName=\"NANOMQ\" Value=\"[INSTALL_ROOT]\"/>\r\n\r\n\t\t<Environment Id=\"NANOSDK_LIB_DIR\" Action=\"set\" \r\n\t\t\tName=\"NANOSDK_LIB_DIR\" Value=\"[INSTALL_ROOT]lib\"/>\r\n\r\n\t\t<Environment Id=\"NANOMQ_BIN_DIR\" Action=\"set\" Part=\"first\"\r\n\t\t\tName=\"PATH\" Value=\"[INSTALL_ROOT]bin\"\r\n\t\t\tSystem=\"yes\"/>\r\n\t</CPackWiXFragment>\r\n</CPackWiXPatch>"
        }
      ]
    }
  ]
}