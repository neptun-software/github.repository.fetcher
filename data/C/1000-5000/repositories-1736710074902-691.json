{
  "metadata": {
    "timestamp": 1736710074902,
    "page": 691,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "limine-bootloader/limine",
      "stars": 1929,
      "defaultBranch": "v8.x",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.32421875,
          "content": "# top-most EditorConfig file\nroot = true\n\n# Unix-style newlines with a newline ending every file\n[*]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\nmax_line_length = 80\n\n[{Makefile,GNUmakefile*}]\nindent_style = tab\n\n[{*.toml,*.yml}]\nindent_size = 2\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.8974609375,
          "content": "# We don't want to ignore the following files\n!.clang-format\n!.editorconfig\n!.gitattributes\n!.gitignore\n!.typos.toml\n\n\n# Generated files\n*.o\n*.d\n*.a\n*.exe\n*.EFI\n*.bin\n*.bin.gz\n*.tar*\n*.elf\n*.hdd\n*.iso\n*.sys\n*.dtb\n*~\n\n/bin\n/build\n/toolchain-files\n/nyu-efi\n/freestnd-c-hdrs-0bsd\n/common/flanterm\n/common/libfdt\n/common/lib/stb_image.h.nopatch\n/common/lib/stb_image.h\n/cc-runtime\n/decompressor/tinf\n/dtc\n/tinf\n/ovmf*\n/bochsout.txt\n/bx_enh_dbg.ini\n/test_image\n/configure\n/configure.ac.save\n/timestamps\n/build-aux\n/aclocal.m4\n/config.status\n/config.log\n/autom4te.cache\n/man/man1/limine.1\n/GNUmakefile\n/config.h\n/common-bios\n/common-uefi-ia32\n/common-uefi-x86-64\n/common-uefi-aarch64\n/common-uefi-riscv64\n/common-uefi-loongarch64\n/decompressor-build\n/stage1.stamp\n\n\n# For local development\n/.vscode\n/.gdb_history\n/tags\n/TAGS\n\n# Clang's compilation database file\ncompile_commands.json\n\n# clangd caches\n/.clangd\n/.cache/clangd\n"
        },
        {
          "name": ".typos.toml",
          "type": "blob",
          "size": 0.34375,
          "content": "# Configuration for https://github.com/crate-ci/typos\n\n[files]\nextend-exclude = [\n  # Typos already uses .gitignore. These excludes are additional:\n]\n\n[default.extend-words]\nhda = \"hda\"\nNd = \"Nd\"\nsie = \"sie\"\nSIE = \"SIE\"\nist = \"ist\"\nrela = \"rela\"\nRELA = \"RELA\"\nguid = \"guid\"\nGUID = \"GUID\"\npn = \"pn\"\nhd = \"hd\"\nhtpt = \"htpt\"\n\n[default.extend-identifiers]\n"
        },
        {
          "name": "CONFIG.md",
          "type": "blob",
          "size": 16.5791015625,
          "content": "# Limine configuration file\n\n## Location of the config file\n\nFirst, Limine considers configurations supplied to it as SMBIOS OEM String entries (Type 11). Such\nconfigurations are accepted if the first string of such an entry starts with the prefix of\n`limine:config:`. The rest of the string is taken as the config file. If such a configuration is\nfound, no further scanning for config files is done. As such, the `boot():` drive is undefined\non BIOS, and set to the boot device of Limine on UEFI.\n\nNext, Limine scans for a config file on *the boot drive*. Every partition on the boot drive\nis scanned sequentially - first partition first (or, on UEFI, the partition containing the\nEFI executable of the booted Limine is scanned first), last partition last - for the presence\nof either a `/limine.conf`, `/limine/limine.conf`, `/boot/limine.conf`, `/boot/limine/limine.conf`,\nor a `/EFI/BOOT/limine.conf` file, in that order.\n\nOnce the file is located, Limine will use it as its config file. Other possible\ncandidates in subsequent partitions or directories are ignored.\n\nIt is thus imperative that the intended config file is placed in a location that will\nnot be shadowed by another candidate config file.\n\n## Structure of the config file\n\nThe Limine configuration file is comprised of *menu entries* and *options*.\nComments begin in '#' and can only be on their own lines.\n\n### Menu entries and sub-entries\n\n*Menu entries* describe *entries* which the user can select in the *boot menu*.\n\nA *menu entry* is opened by a line starting with `/` followed by a newline-terminated\nstring, that being the title of the entry which the user will see.\nAny *local option* that comes after it, and before another *menu entry*, or\nthe end of the file, will be part of that *menu entry*.\n\nA *menu entry* can be a directory, meaning it can hold sub-entries. In order for an\nentry to become a directory, it needs to have a sub-entry following right after it.\n(A `comment` option may be present between the beginning of the directory entry and\nthe beginning of the sub-entry).\n\nA *sub-entry* is a menu entry started with a number of `/` greater than 1 prepended to it.\nEach `/` represents 1 level deeper down the tree hierarchy of directories and\nentries.\n\nDirectories can be expanded (meaning they will not show up as collapsed in the\nmenu) by default if a `+` is put between the `/`s and the beginning of the entry's title.\n\n### Options\n\n*Options* are simple `option_name: string...` style \"assignments\".\nThe string can have spaces and other special characters, without requiring quotations. New lines\nare delimiters. Option names are not case sensitive.\n\nSome *options* are part of an entry (*local*), some other options are *global*.\n*Global options* can appear anywhere in the file and are not part of an entry,\nalthough usually one would put them at the beginning of the config.\nSome *local options* work the same between entries using any *protocol*, while other\n*local options* are specific to a given *protocol*.\n\nSome options take *paths* as strings; these are described in the next section.\n\n*Global options* are:\n\nMiscellaneous:\n\n* `timeout` - Specifies the timeout in seconds before the first *entry* is automatically booted. If set to `no`, disable automatic boot. If set to `0`, boots default entry instantly (see `default_entry` option).\n* `quiet` - If set to `yes`, enable quiet mode, where all screen output except panics and important warnings is suppressed. If `timeout` is not 0, the `timeout` still occurs, and pressing any key during the timeout will reveal the menu and disable quiet mode.\n* `serial` - If set to `yes`, enable serial I/O for the bootloader.\n* `serial_baudrate` - If `serial` is set to `yes`, this specifies the baudrate to use for serial I/O. Defaults to `9600`. BIOS only, ignored with Limine UEFI.\n* `default_entry` - 1-based entry index of the entry which will be automatically selected at startup. If unspecified, it is `1`.\n* `remember_last_entry` - If set to `yes`, remember last booted entry. (UEFI only)\n* `graphics` - If set to `no`, force CGA text mode for the boot menu, else use a video mode. Ignored with Limine UEFI.\n* `wallpaper` - Path to a file to use as a wallpaper. BMP, PNG, and JPEG formats are supported. There can be multiple of this option, in which case the wallpaper will be randomly selected from the provided options.\n* `wallpaper_style` - The style which will be used to display the wallpaper image: `tiled`, `centered`, or `stretched`. Default is `stretched`.\n* `backdrop` - When the background style is `centered`, this specifies the colour of the backdrop for parts of the screen not covered by the background image, in RRGGBB format.\n* `verbose` - If set to `yes`, print additional information during boot. Defaults to not verbose.\n* `randomise_memory` - If set to `yes`, randomise the contents of RAM at bootup in order to find bugs related to non zeroed memory or for security reasons. This option will slow down boot time significantly. For the BIOS port of Limine, this will only randomise memory below 4GiB.\n* `randomize_memory` - Alias of `randomise_memory`.\n* `hash_mismatch_panic` - If set to `no`, do not panic if there is a hash mismatch for a file, but print a warning instead.\n\nLimine interface control options:\n\n* `interface_resolution` - Specify screen resolution to be used by the Limine interface (menu, editor, console...) in the form `<width>x<height>`. This will *only* affect the Limine interface, not any booted OS. If not specified, Limine will pick a resolution automatically. If the resolution is not available, Limine will pick another one automatically. Ignored if using text mode.\n* `interface_branding` - A string that will be displayed on top of the Limine interface.\n* `interface_branding_colour` - A value between 0 and 7 specifying the colour of the branding string. Default is cyan (6).\n* `interface_branding_color` - Alias of `interface_branding_colour`.\n* `interface_help_hidden` - Hides the help text located at the top of the screen showing the key bindings.\n\nLimine graphical terminal control options:\n\nThese are ignored if using text mode.\n\n* `term_font` - Path to a font file to be used instead of the default one for the menu and terminal. The font file must be a code page 437 character set comprised of 256 consecutive glyph bitmaps. Each glyph's bitmap must be expressed left to right (1 byte per row), and top to bottom (16 bytes per whole glyph by default; see `term_font_size`). See e.g. the [VGA text mode font collection](https://github.com/viler-int10h/vga-text-mode-fonts) for fonts.\n* `term_font_size` - The size of the font in dots, which must correspond to the font file or the display will be garbled. Note that glyphs are always one byte wide, and columns over 8 are empty. Many fonts may be used in both 8- and 9-dot wide variants. Defaults to `8x16`. Ignored if `term_font` not set or if the font fails to load.\n* `term_font_scale` - Scaling for the font in the x and y directions. `2x2` would display the font in double size, which is useful on high-DPI displays at native resolution. `2x1` only makes the font twice as wide, similar to the VGA 40 column mode. `4x2` might be good for a narrow font on a high resolution display. Values over 8 are disallowed. Default is no scaling, i.e. `1x1`.\n* `term_font_spacing` - Horizontal spacing, in pixels, between glyphs on screen. It is equivalent to setting a font width of `<specified width>+<this value>`, except this value is preserved even in case font loading fails, and it also applies to the built-in Limine font. Defaults to 1. 0 is allowed.\n* `term_palette` - Specifies the colour palette used by the terminal (RRGGBB). It is a `;` separated array of 8 colours: black, red, green, brown, blue, magenta, cyan, and gray. Ignored if not using a graphical terminal.\n* `term_palette_bright` - Specifies the bright colour palette used by the terminal (RRGGBB). It is a `;` separated array of 8 bright colours: dark gray, bright red, bright green, yellow, bright blue, bright magenta, bright cyan, and white. Ignored if not using a graphical terminal.\n* `term_background` - Terminal text background colour (TTRRGGBB). TT stands for transparency.\n* `term_foreground` - Terminal text foreground colour (RRGGBB).\n* `term_background_bright` - Terminal text background bright colour (RRGGBB).\n* `term_foreground_bright` - Terminal text foreground bright colour (RRGGBB).\n* `term_margin` - Set the amount of margin around the terminal.\n* `term_margin_gradient` - Set the thickness in pixel for the gradient around the terminal.\n\nEditor control options:\n\n* `editor_enabled` - If set to `no`, the editor will not be accessible. Defaults to `yes` unless a config hash is enrolled.\n* `editor_highlighting` - If set to `no`, syntax highlighting in the editor will be disabled. Defaults to `yes`.\n* `editor_validation` - If set to `no`, the editor will not alert you about invalid options or syntax errors. Defaults to `yes`.\n\n*Locally assignable (non protocol specific) options* are:\n\n* `comment` - An optional comment string that will be displayed by the bootloader on the menu when an entry is selected.\n* `protocol` - The boot protocol that will be used to boot the kernel/executable. Valid protocols are: `linux`, `limine`, `multiboot` (or `multiboot1`), `multiboot2`, `efi_chainload`, `bios_chainload`, and `chainload_next`.\n* `cmdline` - The command line string to be passed to the kernel/executable. Can be omitted.\n* `kernel_cmdline` - Alias of `cmdline`.\n\n*Locally assignable (protocol specific) options* are:\n\n* Linux protocol:\n  * `path` - The path of the kernel.\n  * `kernel_path` - Alias of `path`.\n  * `module_path` - The path to a module (such as initramfs). This option can be specified multiple times to specify multiple modules.\n  * `resolution` - The resolution to be used. This setting takes the form of `<width>x<height>x<bpp>`. If the resolution is not available, Limine will pick another one automatically. Omitting `<bpp>` will default to 32.\n  * `textmode` - If set to `yes`, prefer text mode. (BIOS only)\n  * `dtb_path` - A device tree blob to pass instead of the one provided by the firmware.\n\n* Limine protocol:\n  * `path` - The path of the executable.\n  * `kernel_path` - Alias of `path`.\n  * `module_path` - The path to a module. This option can be specified multiple times to specify multiple modules.\n  * `module_cmdline` - A command line to be passed to a module. This option can also be specified multiple times. It applies to the module described by the last module option specified.\n  * `resolution` - The resolution to be used. This setting takes the form of `<width>x<height>x<bpp>`. If the resolution is not available, Limine will pick another one automatically. Omitting `<bpp>` will default to 32.\n  * `kaslr` - For relocatable executables, if set to `no`, disable kernel address space layout randomisation. KASLR is enabled by default.\n  * `randomise_hhdm_base` - If set to `yes`, randomise the base address of the higher half direct map. If set to `no`, do not. By default it is `yes` if KASLR is supported and enabled, else it is `no`.\n  * `randomize_hhdm_base` - Alias of `randomise_hhdm_base`.\n  * `max_paging_mode`, `min_paging_mode` - Limit the maximum and minimum paging modes to one of the following:\n    - x86-64 and aarch64: `4level`, `5level`.\n    - riscv64: `sv39`, `sv48`, `sv57`.\n    - loongarch64: `4level`.\n  * `paging_mode` - Equivalent to setting both `max_paging_mode` and `min_paging_mode` to the same value.\n  * `dtb_path` - A device tree blob to pass instead of the one provided by the firmware.\n\n* multiboot1 and multiboot2 protocols:\n  * `path` - The path of the executable.\n  * `kernel_path` - Alias of `path`.\n  * `module_path` - The path to a module. This option can be specified multiple times to specify multiple modules.\n  * `module_string` - A string to be passed to a module. This option can also be specified multiple times. It applies to the module described by the last module option specified.\n  * `resolution` - The resolution to be used should the executable request a graphical framebuffer. This setting takes the form of `<width>x<height>x<bpp>` and *overrides* any resolution requested by the executable. If the resolution is not available, Limine will pick another one automatically. Omitting `<bpp>` will default to 32.\n  * `textmode` - If set to `yes`, prefer text mode. (BIOS only)\n\n* EFI Chainload protocol:\n  * `path` - Path of the EFI application to chainload.\n  * `image_path` - Alias of `path`.\n  * `resolution` - The resolution to be used. This setting takes the form of `<width>x<height>x<bpp>`. If the resolution is not available, Limine will pick another one automatically. Omitting `<bpp>` will default to 32.\n\n* BIOS Chainload protocol:\n  * `drive` - The 1-based drive to chainload, if omitted, assume boot drive.\n  * `partition` - The 1-based partition to chainload, if omitted, or set to 0, chainload drive (MBR).\n  * `mbr_id` - Optional. If passed, use an MBR ID (32-bit hex value) to identify the drive containing the volume to chainload. Overrides `drive`, if present, but does *not* override `partition`.\n  * `gpt_uuid` or `gpt_guid` - Optional. If passed, use the GPT GUID to identify the drive containing the volume to chainload. Overrides `drive` and `mbr_id`, if present, but does *not* override `partition`.\n\n* chainload_next protocol:\n  * `resolution` - For UEFI, the resolution to be used. This setting takes the form of `<width>x<height>x<bpp>`. If the resolution is not available, Limine will pick another one automatically. Omitting `<bpp>` will default to 32.\n\n## Paths\n\nA Limine path is used to locate files in the whole system. It is\ncomprised of a *resource*, a *resource argument*, and a *path*. It takes the form of:\n```\nresource(argument):/path\n```\n\nThe format for `argument` changes depending on the resource used.\n\nA resource can be one of the following:\n* `boot` - If booted off PXE this is an alias of `tftp`. Else the `argument` is the 1-based decimal value representing the partition on the boot drive (values of 5+ for MBR logical partitions). If omitted, the partition containing the configuration file on the boot drive is used. For example: `boot(2):/...` will use partition 2 of the boot drive and `boot():/...` will use the partition containing the config file on the boot drive.\n* `hdd` - Hard disk drives. The `argument` takes the form of `drive:partition`; for example: `hdd(3:1):/...` would use hard drive 3, partition 1. Partitions and drives are both 1-based (partition values of 5+ for MBR logical partitions). Omitting the partition is possible; for example: `hdd(2:):/...`. Omitting the partition will access the entire volume instead of a specific partition (useful for unpartitioned media).\n* `odd` - Optical disk drives (CDs/DVDs/...). The `argument` takes the form of `drive:partition`; for example: `odd(3:1):/...` would use optical drive 3, partition 1. Partitions and drives are both 1-based (partition values of 5+ for MBR logical partitions). Omitting the partition is possible; for example: `odd(2:):/...`. Omitting the partition will access the entire volume instead of a specific partition (useful for unpartitioned media, which is often the case for optical media).\n* `guid` - The `argument` takes the form of a GUID/UUID, such as `guid(736b5698-5ae1-4dff-be2c-ef8f44a61c52):/...`. The GUID is that of either a filesystem, when available, or a GPT partition GUID, when using GPT, in a unified namespace.\n* `uuid` - Alias of `guid`.\n* `fslabel` - The `argument` is the name of the filesystem label of a partition.\n* `tftp` - The `argument` is the IP address of the tftp server to load the file from. If the argument is left empty (`tftp():/...`) the file will be loaded from the server Limine booted from. This resource is only available when booting off PXE.\n\nA path can optionally be suffixed with a blake2b hash for the referenced file,\nby appending a pound character (`#`) followed by the blake2b hash.\nE.g.: `boot():/somemodule.tar#ca6914d2...446b470a`.\n\n## Macros\n\nMacros are strings that can be arbitrarily assigned to represent other strings. For example:\n```\n${MY_MACRO}=Some text\n```\n\nNow, whenever `${MY_MACRO}` is used in the config file (except for an assignment as above), it will\nbe replaced by the text `Some text`. For example:\n```\nCMDLINE=something before ${MY_MACRO} something after\n```\n\nMacros must always be placed inside `${...}` where `...` is the arbitrary macro name.\n\n### Built-in macros\n\nLimine automatically defines these macros:\n\n* `ARCH` - This built-in macro expands to the architecture of the machine. Possible values are: `x86-64`, `ia-32`, `aarch64`, `riscv64`, `loongarch64`. In the case of IA-32, BIOS or UEFI, the macro will always expand to `x86-64` if the 64-bit extensions are available, else `ia-32`.\n* `FW_TYPE` - This built-in macro expands to `UEFI` if booted using UEFI firmware, or `BIOS` if booted using legacy x86 BIOS.\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.2666015625,
          "content": "Copyright (C) 2019-2025 mintsuki and contributors.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 31.734375,
          "content": "2025-01-10  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.7.0 ***\n\n    Noteworthy changes compared to the previous release, 8.6.1:\n\n    New features:\n        - Limine boot protocol: Add support for PE executables.\n        - Linux boot protocol: Enable support for Loongarch64.\n        - Add support for selecting a random wallpaper every boot if multiple\n          are provided.\n        - Add `path` aliases for `kernel_path` and `image_path` for the Linux\n          and EFI Chainloading protocols respectively.\n\n    Miscellaneous:\n        - Submodule version/commit bumps.\n\n2024-12-26  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.6.1 ***\n\n    Noteworthy changes compared to the previous release, 8.6.0:\n\n    Bug fixes:\n        - Propagate EFI PXE device handle properly when chainloading.\n        - Ensure that, when specifying a `dtb_path`, extra space is properly\n          allocated just as is done for EFI-provided DTBs.\n\n    Miscellaneous:\n        - Linux on RISCs: General code clean up; pass EFI memory map and initrd\n          information as EFI configuration tables alongside already passed DTB\n          parameters for the same, in preparation for loongarch64 support.\n\n2024-12-05  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.6.0 ***\n\n    Noteworthy changes compared to the previous release, 8.5.0:\n\n    New features:\n        - Limine boot protocol: Specify and implement new \"RISC-V BSP Hart ID\"\n          feature.\n        - Limine boot protocol: Add a new \"SBI\" firmware type to the firmware\n          type feature\n        - Limine boot protocol: Add a new API revision 2 to the limine.h header\n          file. This replaces many mentions of 'kernel' with a more neutral\n          'executable' instead.\n        - Config: add 'path' alias for 'kernel_path' for the Limine and\n          multiboot1 and 2 protocols.\n\n2024-11-30  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.5.0 ***\n\n    Noteworthy changes compared to the previous release, 8.4.1:\n\n    New features:\n        - Limine boot protocol: Introduce limine.h API revisions to avoid API\n          breaks.\n\n    Bug fixes:\n        - Limine boot protocol: Amend base revision 3 to keep EFI memmap\n          pointer as virtual. Making it physical made no sense and is\n          henceforth considered a bug.\n\n    Miscellaneous:\n        - Limine boot protocol: Rename SMP feature to MP feature for limine.h\n          API revision 1+.\n        - Limine boot protocol: Make some types that were void pointers into\n          uint64_t's to better represent their physical nature; limine.h API\n          revision 1+.\n\n2024-11-25  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.4.1 ***\n\n    Noteworthy changes compared to the previous release, 8.4.0:\n\n    Miscellaneous:\n        - Limine boot protocol: Ensure machines with pre-enabled x2APIC are\n          properly supported.\n        - Reuse a viable framebuffer for UEFI fallback terminal output (like on\n          panics) if boot services have been exited instead of bailing out.\n        - Miscellaneous build system updates.\n\n2024-11-08  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.4.0 ***\n\n    Noteworthy changes compared to the previous release, 8.3.2:\n\n    New features:\n        - Support passing Limine its configuration via SMBIOS tables.\n\n    Miscellaneous:\n        - Update cc-runtime to latest; use non-packed version.\n\n2024-10-31  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.3.2 ***\n\n    Noteworthy changes compared to the previous release, 8.3.1:\n\n    Miscellaneous:\n        - Limine boot protocol: Amend base revision 3 to mandate reporting base\n          revision used to kernels.\n\n2024-10-28  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.3.1 ***\n\n    Noteworthy changes compared to the previous release, 8.3.0:\n\n    Bug fixes:\n        - Limine boot protocol: Revert broken optimisation.\n\n2024-10-28  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.3.0 ***\n\n    Noteworthy changes compared to the previous release, 8.2.0:\n\n    New features:\n        - Limine boot protocol: Specify and implement base revision 3. See the\n          specification for further info.\n        - Add a new `FW_TYPE` built-in config macro.\n\n    Miscellaneous:\n        - Bump Flanterm revision to a6f6edd6631c01caab932a59dce97bbd5f0c72c8.\n        - Limine boot protocol: Misc optimisations to page tables usage.\n\n2024-10-23  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.2.0 ***\n\n    Noteworthy changes compared to the previous release, 8.1.2:\n\n    New features:\n        - Add device tree blob override configuration options for the Limine\n          and Linux boot protocols.\n        - Limine boot protocol: Filter `memory@...` nodes out of device trees.\n\n    Miscellaneous:\n        - Documentation: USAGE.md: Update `xorriso` command to produce\n          ISOHYBRIDs with Joliet info and an HFS+ filesystem for broader\n          compatibility.\n        - Increase the size of the `limine-cd-uefi.bin` image to 5760 sectors;\n          this allows more and/or larger EFI executables to fit (like for\n          example those generated when compiling with -O0).\n        - Bump cc-runtime revision to d5425655388977fa12ff9b903e554a20b20c426e.\n\n2024-10-15  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.1.2 ***\n\n    Noteworthy changes compared to the previous release, 8.1.1:\n\n    Bug fixes:\n        - Add missing register saves and restores around call from assembly to\n          C code for the x86-64 UEFI port. This bug could have caused crashes\n          with certain compiler optimisation levels (like -O0).\n        - Adjust size of reserved area of VBE mode info struct to be the right\n          size. This bug could have caused crashes with certain compiler\n          optimisation levels (like -O0).\n        - Ignore UEFI memory map entries of length 0. This fixes crashes that\n          could have happened on quirky UEFI firmwares passing such entries.\n\n2024-10-12  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.1.1 ***\n\n    Noteworthy changes compared to the previous release, 8.1.0:\n\n    Bug fixes:\n        - Limine boot protocol: Do not hard depend on the CPU supporting the\n          Page Attribute Table (PAT) *for SMP processors as well*.\n\n2024-10-12  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.1.0 ***\n\n    Noteworthy changes compared to the previous release, 8.0.14:\n\n    Bug fixes:\n        - Limine boot protocol: Do not hard depend on the CPU supporting the\n          Page Attribute Table (PAT).\n\n    New features:\n        - Limine boot protocol: Add a `randomise_hhdm_base` config file option.\n\n    Miscellaneous:\n        - Update libfdt (from dtc) to 1.7.1.\n\n2024-09-29  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.0.14 ***\n\n    Noteworthy changes compared to the previous release, 8.0.13:\n\n    Miscellaneous:\n        - Limine boot protocol: Increase maximum memory map entry count from\n          256 to 1024 as it would otherwise cause issues on certain systems.\n\n2024-09-18  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.0.13 ***\n\n    Noteworthy changes compared to the previous release, 8.0.12:\n\n    Bug fixes:\n        - multiboot2: Fix handling of relocatable kernels.\n\n2024-09-15  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.0.12 ***\n\n    Noteworthy changes compared to the previous release, 8.0.11:\n\n    Bug fixes:\n        - Fix a build system problem that could cause configure failures if\n          STRIP variable set to an absolute path.\n\n    Miscellaneous:\n        - Updates for \"freestanding-headers\" being rebranded to\n          \"freestnd-c-hdrs-0bsd\".\n        - Updates for \"limine-efi\" being rebranded to \"nyu-efi\".\n\n2024-09-10  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.0.11 ***\n\n    Noteworthy changes compared to the previous release, 8.0.10:\n\n    Miscellaneous:\n        - Replace \"freestnd-c-hdrs\" back with \"freestanding-headers\" due to\n          GPLv3 with Runtime Exceptions licensing concerns and size.\n\n2024-09-09  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.0.10 ***\n\n    Noteworthy changes compared to the previous release, 8.0.9:\n\n    Bug fixes:\n        - Fix bug where contents of loaded EFI image size variable could be off\n          significantly compared to actual size when compiled with GCC, causing\n          many issues.\n        - Fix memory manager bug introduced in 2021 during optimisation work.\n\n    Miscellaneous:\n        - Replace \"freestanding-headers\" with GCC-provided \"freestnd-c-hdrs\".\n\n2024-09-04  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.0.9 ***\n\n    Noteworthy changes compared to the previous release, 8.0.8:\n\n    Bug fixes:\n        - Fix an issue that could cause Limine to not boot on UEFI systems with\n          too many memory map entries.\n\n2024-09-03  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.0.8 ***\n\n    Noteworthy changes compared to the previous release, 8.0.7:\n\n    Bug fixes:\n        - Work around makefile issues that caused GNU make versions 4.0 and 4.1\n          as well as version 3.80 to fail to build Limine.\n\n2024-09-02  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.0.7 ***\n\n    Noteworthy changes compared to the previous release, 8.0.6:\n\n    Miscellaneous:\n        - Remove GNU make version check as we now support building on older\n          make versions.\n        - Miscellaneous build system improvements.\n\n2024-08-25  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.0.6 ***\n\n    Noteworthy changes compared to the previous release, 8.0.5:\n\n    Bug fixes:\n        - Fix issue with makefiles that would cause, among others, issues with\n          job control on older GNU make versions.\n\n    Miscellaneous:\n        - Update limine-efi dependency to latest.\n        - Minor build system improvements.\n\n2024-08-12  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.0.5 ***\n\n    Noteworthy changes compared to the previous release, 8.0.4:\n\n    Bug fixes:\n        - Limine boot protocol: Obtain LAPIC ID from LAPIC instead of CPUID.\n          This fixes crashes on some odd machines whose firmware remaps the\n          BSP's LAPIC ID from the default one.\n\n2024-08-10  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.0.4 ***\n\n    Noteworthy changes compared to the previous release, 8.0.3:\n\n    Bug fixes:\n        - Limine boot protocol: Fix off-by-1 error in HHDM MAXPHYADDR bounds\n          check.\n\n    Miscellaneous:\n        - Updated cc-runtime dependency to latest, packed version.\n\n2024-08-09  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.0.3 ***\n\n    Noteworthy changes compared to the previous release, 8.0.2:\n\n    Bug fixes:\n        - AArch64, riscv64: SMP: Fix BSP potentially timing out while waiting\n          for APs due to missing delay.\n\n2024-08-08  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.0.2 ***\n\n    Noteworthy changes compared to the previous release, 8.0.1:\n\n    Bug fixes:\n        - Menu: Miscellaneous cosmetic fixes.\n        - Editor: Fix input and displaying of tab characters.\n\n    Miscellaneous:\n        - Config: Accept tab characters as whitespace after option colon.\n\n2024-08-05  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.0.1 ***\n\n    Noteworthy changes compared to the previous release, 8.0.0:\n\n    Bug fixes:\n        - Assortment of menu fixes to issues that could cause things not to\n          render as they should.\n\n    Miscellaneous:\n        - Documentation fixes for 8.x.\n\n2024-08-02  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 8.0.0 ***\n\n    Noteworthy changes compared to the previous release, 7.13.3:\n\n    New features:\n        - Add loongarch64 support.\n\n    Bug fixes:\n        - Limine boot protocol: Ensure higher half direct map size does not\n          exceed MAXPHYADDR on x86.\n\n    Miscellaneous:\n        - Extensive changes to the config syntax. (See CONFIG.md).\n        - Rename term_wallpaper, term_wallpaper_style, and term_backdrop config\n          options to remove the term_ prefix.\n        - Removed support for GZ-compressed files (and internal Limine\n          protocol modules).\n\n2024-08-02  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.13.3 ***\n\n    Noteworthy changes compared to the previous release, 7.13.2:\n\n    Bug fixes:\n        - Limine boot protocol: Fix broken comparison that could cause an HHDM\n          too large to not be properly detected.\n        - Limine boot protocol: aarch64: Fix incorrect macro value that would\n          cause the size of the higher half to be incorrectly detected as half.\n\n    Miscellaneous:\n        - Remove Nix flake stuff from repository/tarball.\n\n2024-07-30  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.13.2 ***\n\n    Noteworthy changes compared to the previous release, 7.13.1:\n\n    Bug fixes:\n        - Limine boot protocol: Fix a bug introduced in 7.13.0 that made\n          compressed modules not work on IA-32 ports.\n\n2024-07-29  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.13.1 ***\n\n    Noteworthy changes compared to the previous release, 7.13.0:\n\n    Bug fixes:\n        - Limine boot protocol: Fix a bug introduced in 7.13.0 that made the\n          protocol unusable with the BIOS port when loading any modules, when\n          Limine was linked using ld.bfd.\n\n2024-07-29  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.13.0 ***\n\n    Noteworthy changes compared to the previous release, 7.12.1:\n\n    New features:\n        - Limine boot protocol: Allow above-4GiB load of modules on IA-32\n          ports.\n\n    Miscellaneous:\n        - Build system improvements.\n\n2024-07-27  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.12.1 ***\n\n    Noteworthy changes compared to the previous release, 7.12.0:\n\n    Miscellaneous:\n        - Limine boot protocol: limit the HHDM size to half of the higher half\n          in all conditions; limit HHDM KASLR wiggle room to a quarter rather\n          than half of the higher half.\n        - Build system improvements.\n\n2024-07-21  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.12.0 ***\n\n    Noteworthy changes compared to the previous release, 7.11.0:\n\n    New features:\n        - Reinstate support for ext2/3/4, albeit in an unsupported and\n          unmaintained state, at least for the time being.\n        - Menu: Add vertical bars around entry title in entry editor.\n        - Menu: Add clearer indications of what is wrong when config invalid or\n          missing.\n\n    Bug fixes:\n        - Terminal: Fix long standing wallpaper drawing related bug that under\n          certain circumstances could cause memory corruption.\n        - Miscellaneous VBE related bug fixes.\n        - Miscellaneous A20 line related improvements/fixes.\n\n    Miscellaneous:\n        - Limine boot protocol: perform appropriate checks to ensure that the\n          higher half direct map fits in the higher half; enforce paging modes\n          as needed.\n        - Limine boot protocol: aarch64: Specify that the granule size for both\n          TTBR0_EL1 and TTBR1_EL1 is 4KiB.\n        - Limine boot protocol: aarch64: Specify the values of TCR_EL1.T0SZ and\n          TCR_EL1.T1SZ depending on the paging mode used.\n        - Limine boot protocol: aarch64: Specify the condition of TTBR0_EL1 and\n          TTBR1_EL1 at entry.\n\n2024-07-18  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.11.0 ***\n\n    Noteworthy changes compared to the previous release, 7.10.3:\n\n    New features:\n        - Limine boot protocol: Specify and implement \"firmware type\" feature.\n        - Limine boot protocol: Specify and implement revision 1 \"paging mode\"\n          request extension.\n\n2024-07-16  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.10.3 ***\n\n    Noteworthy changes compared to the previous release, 7.10.2:\n\n    Bug fixes:\n        - Menu: Fix high menu entry count support that was previously broken in\n          a regression.\n        - Linux boot protocol: Install \"memory reservation\" EFI configuration\n          table on aarch64/riscv64.\n\n    Miscellaneous:\n        - Miscellaneous improvements and optimisations of code introduced in\n          version 7.10.2.\n\n2024-07-14  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.10.2 ***\n\n    Noteworthy changes compared to the previous release, 7.10.1:\n\n    Bug fixes:\n        - Fix a long standing issue with volume detection on UEFI.\n        - Fix issue returning to editor after a panic when coming from a blank\n          entry without a valid config.\n        - Add missing \"loading\" prints when booting Linux on non-x86.\n\n2024-07-12  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.10.1 ***\n\n    Noteworthy changes compared to the previous release, 7.10.0:\n\n    Bug fixes:\n        - DTB: Never pass UEFI DTB buffer directly; fix misuse of libfdt API.\n\n2024-07-12  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.10.0 ***\n\n    Noteworthy changes compared to the previous release, 7.9.2:\n\n    New features:\n        - SMP: Support SMP on AArch64 without ACPI.\n\n    Bug fixes:\n        - SMP: Do not allocate a useless stack for the BSP.\n        - `limine`: Protect against overwriting MBR partitions beginning at\n          exceedingly low sector values (outside de facto specification).\n\n    Miscellaneous:\n        - Limine boot protocol: Do not pass responses if RSDP or SMBIOS not\n          available instead of returning responses with NULL pointers.\n        - Limine boot protocol: Do not pass a framebuffer response if no\n          framebuffers are available.\n\n2024-07-06  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.9.2 ***\n\n    Noteworthy changes compared to the previous release, 7.9.1:\n\n    Bug fixes:\n        - Limine boot protocol: Return NULL response instead of a response with\n          erroneous CPU count of 0 for SMP on x86-64, if x2APIC support not\n          enabled and missing xAPIC fallback.\n        - Limine boot protocol: Do not ignore MAX_PAGING_MODE config setting if\n          paging mode request missing from loaded kernel.\n\n    Miscellaneous:\n        - Limine boot protocol/ELF: Apply a slide of 0xffffffff80000000 minus\n          the ELF-reported base load address for relocatable kernels that have\n          lower half load addresses, instead of always applying a slide of\n          0xffffffff80000000.\n\n2024-06-29  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.9.1 ***\n\n    Noteworthy changes compared to the previous release, 7.9.0:\n\n    Bug fixes:\n        - `limine`: Revert change that marked protective MBR wrapper partition\n          as active on GPT.\n\n2024-06-28  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.9.0 ***\n\n    Noteworthy changes compared to the previous release, 7.8.0:\n\n    New features:\n        - Linux boot protocol: Add support on aarch64 and riscv64.\n\n    Bug fixes:\n        - multiboot1/2: Relax ELF file type requirements (mainly for multiboot2\n          relocatable kernels).\n        - UEFI: Fix bug that caused delete key to behave as if it was backspace\n          even when the SERIAL config option was not \"yes\".\n\n    Miscellaneous:\n        - Limine boot protocol/ELF: Do not consider ELFs relocatable unless the\n          ELF file type is ET_DYN.\n        - Some dead code removal.\n\n2024-06-24  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.8.0 ***\n\n    Noteworthy changes compared to the previous release, 7.7.2:\n\n    New features:\n        - Return to booted edited entry on panic.\n\n    Bug fixes:\n        - `limine`: Mark protective MBR wrapper partition as active on GPT.\n\n    Miscellaneous:\n        - UEFI: Allocate most memory as EfiLoaderCode instead of EfiLoaderData.\n        - Smaller fixes and improvements.\n\n2024-06-09  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.7.2 ***\n\n    Noteworthy changes compared to the previous release, 7.7.1:\n\n    Bug fixes:\n        - Limine boot protocol/ELF: Ignore PT_LOAD segments with 0 memory size.\n        - Limine boot protocol/ELF: Panic on non-weak unresolved symbols.\n        - Limine boot protocol/ELF: Do not sanity check DT_RELAENT size for non\n          DT_RELA relocations. This is because DT_RELAENT may not be present.\n        - multiboot 1 and 2 protocols: Reject relocatable ELFs.\n\n2024-06-06  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.7.1 ***\n\n    Noteworthy changes compared to the previous release, 7.7.0:\n\n    Bug fixes:\n        - Limine boot protocol/ELF: Stop parsing PT_DYNAMIC segment once\n          DT_NULL is reached.\n\n2024-06-04  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.7.0 ***\n\n    Noteworthy changes compared to the previous release, 7.6.0:\n\n    New features:\n        - Limine boot protocol/ELF: Add support for GLOB_DAT, JUMP_SLOT, 64,\n          and NONE relocation types.\n        - Limine boot protocol/ELF: Add RELR (packed relative relocations)\n          support.\n\n    Bug fixes:\n        - Limine boot protocol/ELF: Reject ELFs that depend on external\n          dynamically linked libraries.\n\n    Miscellaneous:\n        - Bring back .xz compressed release tarball.\n\n2024-06-01  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.6.0 ***\n\n    Noteworthy changes compared to the previous release, 7.5.3:\n\n    New features:\n        - RISC-V: Add support for RISC-V systems without ACPI (using DTBs).\n\n2024-05-24  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.5.3 ***\n\n    Noteworthy changes compared to the previous release, 7.5.2:\n\n    Bug fixes:\n        - Multiboot 2 protocol: Fix an issue where the 32-bit EFI Image Handle\n          tag would be generated under 64-bit EFI and vice versa.\n        - Do not set VirtualStart to PhysicalStart when generating the EFI\n          memory map; set it to 0 instead.\n        - Do not perform additional checks when loading relocatable ELF files\n          after verifying that they are of type ET_DYN and have a PT_DYNAMIC\n          segment. This ensures that certain relocatable ELF files that were\n          previously misidentified as non-relocatable are recognised as such.\n\n2024-05-22  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.5.2 ***\n\n    Noteworthy changes compared to the previous release, 7.5.1:\n\n    Bug fixes:\n        - Fix missing checks in the FAT filesystem driver that could cause\n          divide-by-0 exceptions when parsing malformed/corrupted filesystems.\n        - Limine boot protocol: Do not reject relocatable kernels with ELF PHDR\n          load addresses at or around 0, instead slide them all the way to the\n          topmost 2GiB (0xffffffff80000000). This allows setting a base load\n          address of 0 in LD BFD/LLD linker scripts which makes LD BFD (the\n          default GNU LD) actually emit an ELF with ET_DYN type.\n\n2024-05-08  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.5.1 ***\n\n    Noteworthy changes compared to the previous release, 7.5.0:\n\n    Bug fixes:\n        - Workarounds for issues related to drive iteration on BIOS. Discovered\n          on an HP Pavilion dv6-3152er.\n\n2024-05-03  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.5.0 ***\n\n    Noteworthy changes compared to the previous release, 7.4.1:\n\n    New features:\n        - Limine boot protocol: Add support for requests start marker, to\n          complement the previously called delimiter, now renamed to \"end\n          marker\".\n        - Limine boot protocol: Add base revision 2. The sole difference\n          compared to base revision 1 being that it mandates bootloaders to\n          support request delimiters.\n\n    Bug fixes:\n        - Fix an issue regarding commit date parsing in the bootstrap script.\n\n    Miscellaneous:\n        - General documentation updates and improvements; split USAGE.md from\n          README.md and install the former only.\n\n2024-04-29  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.4.1 ***\n\n    Noteworthy changes compared to the previous release, 7.4.0:\n\n    Miscellaneous:\n        - Bump max volume limit for UEFI from 64 to 256.\n        - Improve how ISA name and firmware type is reported as part of the\n          default branding.\n\n2024-04-20  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.4.0 ***\n\n    Noteworthy changes compared to the previous release, 7.3.1:\n\n    New features:\n        - ISA name and firmware type is now printed as part of the default\n          bootloader branding.\n        - Add 'B' key shortcut to menu to open up a blank entry.\n\n    Bug fixes:\n        - Fix missing NULL pointer check in configuration related function.\n\n    Miscellaneous:\n        - Console has been removed.\n\n2024-04-11  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.3.1 ***\n\n    Noteworthy changes compared to the previous release, 7.3.0:\n\n    Bug fixes:\n        - Fix a minor issue with scrolling when using the EFI console fallback.\n\n    Miscellaneous:\n        - Bump the Flanterm revision to current latest.\n        - Some dead code removal.\n\n2024-03-31  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.3.0 ***\n\n    Noteworthy changes compared to the previous release, 7.2.1:\n\n    New features:\n        - Limine boot protocol: Add a `MAX_PAGING_MODE` configuration option\n          to override kernel/bootloader selected paging mode.\n\n    Bug fixes:\n        - Fix a couple of minor bugs with the 4GiB workaround introduced in\n          version 7.2.1.\n\n    Miscellaneous:\n        - No longer produce xz compressed release tarballs. Add bzip2, lzip,\n          and zstd as alternatives in its place.\n\n2024-03-28  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.2.1 ***\n\n    Noteworthy changes compared to the previous release, 7.2.0:\n\n    Bug fixes:\n        - Implement workaround to allow Limine loaded above 4GiB by UEFI on\n          x86-64 to work in some configurations, instead of panicking.\n\n2024-03-24  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.2.0 ***\n\n    Noteworthy changes compared to the previous release, 7.1.0:\n\n    New features:\n        - Add support for remembering the last booted entry on UEFI by means\n          of the `REMEMBER_LAST_ENTRY` config option.\n\n2024-03-19  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.1.0 ***\n\n    Noteworthy changes compared to the previous release, 7.0.5:\n\n    New features:\n        - Limine boot protocol: Add support for requests delimiter.\n\n    Bug fixes:\n        - Fixed a potential security vulnerability in the ISO9660 driver.\n\n2024-02-15  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.0.5 ***\n\n    Noteworthy changes compared to the previous release, 7.0.4:\n\n    Bug fixes:\n        - Build system related fixes and improvements. This fixes an issue that\n          caused Limine 7.0.4 to fail building on Busybox systems.\n\n2024-02-14  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.0.4 ***\n\n    Noteworthy changes compared to the previous release, 7.0.3:\n\n    Bug fixes:\n        - Minor build system related fixes and improvements.\n\n    Miscellaneous:\n        - Significantly improve reproducibility of builds.\n\n2024-02-08  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.0.3 ***\n\n    Noteworthy changes compared to the previous release, 7.0.2:\n\n    Bug fixes:\n        - multiboot2 protocol: Do not panic if there is a ENTRY_ADDRESS_EFI64\n          tag, but there is a valid alternative entry point. This further aligns\n          our behaviour with GRUB2.\n\n    Miscellaneous:\n        - Terminal: Significantly improve serial and fallback UEFI console's\n          rendition (especially colour palettes).\n        - Serial: Add a baud rate config setting for Limine's BIOS version.\n\n2024-01-26  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.0.2 ***\n\n    Noteworthy changes compared to the previous release, 7.0.1:\n\n    Bug fixes:\n        - Fix a cosmetic bug in the menu where, when the editor was disabled,\n          the controls showed \"ENTER Expand\" even for boot entries instead of\n          only for menu directories.\n\n    Miscellaneous:\n        - Exclusively use git for obtaining dependencies in \"bootstrap\" script.\n\n2024-01-22  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.0.1 ***\n\n    Noteworthy changes compared to the previous release, 7.0.0:\n\n    Bug fixes:\n        - Fix ARM64/aarch64 spinup code to properly support Apple Silicon\n          chips.\n        - Prevent users from building Limine with a GNU Make version older than\n          4.2, as that is not supported, by gracefully erroring out with a\n          useful error message.\n        - Avoid usage of reserved C identifiers in certain cases.\n\n    Miscellaneous:\n        - Drop usage of \"libgcc-binaries\" for \"cc-runtime\". This finally makes\n          us able to ship Limine tarballs without included binary blobs, and\n          should improve compatibility with more obscure toolchain set ups.\n\n2024-01-14  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 7.0.0 ***\n\n    Noteworthy changes compared to the previous release, 6.20240107.0:\n\n    Bug fixes:\n        - Minor fix of newline handling when reading user input lines.\n\n    Miscellaneous:\n        - Bump major version to 7. Note: There is no breaking change in 7.x\n          compared to 6.x; the major version bump is done due to a change in\n          the versioning scheme used by Limine (move to proper Semantic\n          Versioning).\n        - Fix versions of external dependencies in \"bootstrap\" script.\n\n2024-01-07  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 6.20240107.0 ***\n\n    Noteworthy changes compared to the previous release, 6.20231227.0:\n\n    New features:\n        - Limine boot protocol: Add support for compressed internal modules.\n\n    Miscellaneous:\n        - Improve error reporting from host \"limine\" executable.\n        - Track \"master\" branch of stb_image upstream.\n\n2023-12-27  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 6.20231227.0 ***\n\n    Noteworthy changes compared to the previous release, 6.20231226.0:\n\n    Bug fixes:\n        - Actually regenerate build system with GNU Autoconf 2.72 instead of\n          GNU Autoconf 2.71.\n\n2023-12-26  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 6.20231226.0 ***\n\n    Noteworthy changes compared to the previous release, 6.20231216.0:\n\n    New features:\n        - Ignore trailing whitespace in Limine config file.\n\n    Miscellaneous:\n        - Regenerate build system with GNU Autoconf 2.72.\n        - Minor build system adjustments.\n\n2023-12-16  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 6.20231216.0 ***\n\n    Noteworthy changes compared to the previous release, 6.20231210.0:\n\n    New features:\n        - Added a `--print-datadir` switch to the `limine` program in order\n          to print the directory where Limine files are stored when installed\n          on a host distro.\n\n    Miscellaneous:\n        - General improvements to the `--help` texts for the `limine` program.\n\n2023-12-10  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 6.20231210.0 ***\n\n    This is the first release in the 6.x series.\n\n    Breaking changes compared to the 5.x series:\n\n    - Support for the unmaintained ext2/3/4 filesystems dropped in compliance\n      with the Limine bootloader design philosophy.\n    - Chainloading protocol split into 2 protocols: EFI chainloading and BIOS\n      chainloading.\n\n2023-12-07  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 5.20231207.1 ***\n\n    Noteworthy changes compared to the previous release, 5.20231207.0:\n\n    Bug fixes:\n        - multiboot2/elf: Fix issue where ELF vaddrs were taken into account\n          instead of paddrs when loading executables.\n        - Fix implementation of a function that detects whether a given memory\n          range is physical RAM.\n\n2023-12-07  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 5.20231207.0 ***\n\n    Noteworthy changes compared to the previous release, 5.20231124.0:\n\n    New features:\n        - multiboot2 protocol: Add support for relocatable header tag.\n        - multiboot2 protocol: Add support for console flags header tag.\n        - Limine protocol: Add support for EFI memory map feature.\n\n    Miscellaneous:\n        - Improve error reporting from host \"limine\" executable.\n        - Do not ignore errors from mtools when building limine-uefi-cd.bin.\n\n2023-11-24  mintsuki  <mintsuki@protonmail.com>\n\n    *** Release 5.20231124.0 ***\n\n    Compared to previous release, 5.20231121.0:\n\n    New features:\n        - Add support for rebooting to UEFI firmware setup.\n\n    Bug fixes:\n        - Fix SMP (multiprocessor) initialisation regression on aarch64.\n\n    Miscellaneous:\n        - Move to new, handwritten ChangeLog from autogenerated one.\n"
        },
        {
          "name": "GNUmakefile.in",
          "type": "blob",
          "size": 18.234375,
          "content": "MAKEFLAGS += -rR\n.SUFFIXES:\n\noverride SOURCE_DATE_EPOCH := @SOURCE_DATE_EPOCH@\nexport SOURCE_DATE_EPOCH\n\noverride SOURCE_DATE_EPOCH_TOUCH := @SOURCE_DATE_EPOCH_TOUCH@\n\noverride PACKAGE_TARNAME := @PACKAGE_TARNAME@\noverride PACKAGE_VERSION := @PACKAGE_VERSION@\noverride DIST_OUTPUT := $(PACKAGE_TARNAME)-$(PACKAGE_VERSION)\n\nprefix := @prefix@\nexec_prefix := @exec_prefix@\n\nbindir := @bindir@\ndatarootdir := @datarootdir@\nincludedir := @includedir@\ndatarootdir := @datarootdir@\nmandir := @mandir@\ndocdir := @docdir@\n\nSTRIP := @STRIP@\n\noverride BUILDDIR := @BUILDDIR@\noverride BINDIR := $(BUILDDIR)/bin\n\noverride SRCDIR := @SRCDIR@\n\noverride SPACE := $(subst ,, )\noverride COMMA := ,\n\noverride MKESCAPE = $(subst $(SPACE),\\ ,$(1))\noverride SHESCAPE = $(subst ','\\'',$(1))\noverride NASMESCAPE = $(subst ','\"'$(COMMA) \\\"'\\\"$(COMMA) '\"',$(1))\n\noverride BUILD_BIOS := @BUILD_BIOS@\noverride BUILD_UEFI_X86_64 := @BUILD_UEFI_X86_64@\noverride BUILD_UEFI_IA32 := @BUILD_UEFI_IA32@\noverride BUILD_UEFI_AARCH64 := @BUILD_UEFI_AARCH64@\noverride BUILD_UEFI_RISCV64 := @BUILD_UEFI_RISCV64@\noverride BUILD_UEFI_LOONGARCH64 := @BUILD_UEFI_LOONGARCH64@\noverride BUILD_UEFI_CD := @BUILD_UEFI_CD@\noverride BUILD_BIOS_PXE := @BUILD_BIOS_PXE@\noverride BUILD_BIOS_CD := @BUILD_BIOS_CD@\n\nCC := @CC@\nexport CC\n\nMKDIR_P := @MKDIR_P@\nexport MKDIR_P\n\nINSTALL := @INSTALL@\nexport INSTALL\n\nINSTALL_PROGRAM := @INSTALL_PROGRAM@\nexport INSTALL_PROGRAM\n\nINSTALL_DATA := @INSTALL_DATA@\nexport INSTALL_DATA\n\nGREP := @GREP@\nexport GREP\n\nSED := @SED@\nexport SED\n\nAWK := @AWK@\nexport AWK\n\nCPPFLAGS := @CPPFLAGS@\nexport CPPFLAGS\nCFLAGS := @CFLAGS@\nexport CFLAGS\nLDFLAGS := @LDFLAGS@\nexport LDFLAGS\nLIBS := @LIBS@\nexport LIBS\n\noverride WERROR_FLAG := @WERROR_FLAG@\nexport WERROR_FLAG\n\nCFLAGS_FOR_TARGET := @CFLAGS_FOR_TARGET@\nexport CFLAGS_FOR_TARGET\nCPPFLAGS_FOR_TARGET := @CPPFLAGS_FOR_TARGET@\nexport CPPFLAGS_FOR_TARGET\nLDFLAGS_FOR_TARGET := @LDFLAGS_FOR_TARGET@\nexport LDFLAGS_FOR_TARGET\nNASMFLAGS_FOR_TARGET := @NASMFLAGS_FOR_TARGET@\nexport NASMFLAGS_FOR_TARGET\n\noverride STAGE1_FILES := $(shell find '$(call SHESCAPE,$(SRCDIR))/stage1' -type f -name '*.asm' | LC_ALL=C sort)\n\n.PHONY: all\nall: $(call MKESCAPE,$(BINDIR))/Makefile\n\t$(MAKE) all1\n\n.PHONY: all1\nall1: $(BUILD_UEFI_X86_64) $(BUILD_UEFI_IA32) $(BUILD_UEFI_AARCH64) $(BUILD_UEFI_RISCV64) $(BUILD_UEFI_LOONGARCH64) $(BUILD_BIOS)\n\t$(MAKE) '$(call SHESCAPE,$(BINDIR))/limine'\n\t$(MAKE) '$(call SHESCAPE,$(BINDIR))/limine-uefi-cd.bin'\n\n$(call MKESCAPE,$(BINDIR))/limine-bios-hdd.h: $(call MKESCAPE,$(BINDIR))/limine-bios-hdd.bin\n\t$(MKDIR_P) '$(call SHESCAPE,$(BINDIR))'\n\tcd '$(call SHESCAPE,$(BINDIR))' && '$(call SHESCAPE,$(SRCDIR))/host/hgen.sh' >limine-bios-hdd.h\n\noverride LIMINE_NO_BIOS :=\nifneq ($(BUILD_BIOS),limine-bios)\noverride LIMINE_NO_BIOS := -DLIMINE_NO_BIOS\nendif\n\n$(call MKESCAPE,$(BINDIR))/limine: $(call MKESCAPE,$(BINDIR))/Makefile $(call MKESCAPE,$(SRCDIR))/host/limine.c $(if $(filter $(BUILD_BIOS),limine-bios),$(call MKESCAPE,$(BINDIR))/limine-bios-hdd.h)\n\t$(SED) 's/%VERSION%/@PACKAGE_VERSION@/g;s/%COPYRIGHT%/@LIMINE_COPYRIGHT@/g' <'$(call SHESCAPE,$(SRCDIR))/host/limine.c' >'$(call SHESCAPE,$(BINDIR))/limine.c'\n\t$(MAKE) -C '$(call SHESCAPE,$(BINDIR))' limine \\\n\t\tCC=\"$(CC)\" \\\n\t\tCFLAGS=\"$(CFLAGS)\" \\\n\t\tCPPFLAGS='$(CPPFLAGS) $(LIMINE_NO_BIOS) -DLIMINE_DATADIR=\\\"$(call SHESCAPE,$(datarootdir))/limine\\\"' \\\n\t\tLDFLAGS=\"$(LDFLAGS)\" \\\n\t\tLIBS=\"$(LIBS)\" \\\n\t\tWERROR_FLAG=\"$(WERROR_FLAG)\"\n\n$(call MKESCAPE,$(BINDIR))/Makefile: $(call MKESCAPE,$(SRCDIR))/host/host.mk $(call MKESCAPE,$(SRCDIR))/host/.gitignore\n\tmkdir -p '$(call SHESCAPE,$(BINDIR))'\n\tcp '$(call SHESCAPE,$(SRCDIR))/host/host.mk' '$(call SHESCAPE,$(BINDIR))/Makefile'\n\tcp '$(call SHESCAPE,$(SRCDIR))/host/.gitignore' '$(call SHESCAPE,$(BINDIR))/'\n\n.PHONY: limine\nlimine:\n\t$(MAKE) '$(call SHESCAPE,$(BINDIR))/limine'\n\n.PHONY: clean\nclean: limine-bios-clean limine-uefi-ia32-clean limine-uefi-x86-64-clean limine-uefi-aarch64-clean limine-uefi-riscv64-clean limine-uefi-loongarch64-clean\n\trm -rf '$(call SHESCAPE,$(BINDIR))' '$(call SHESCAPE,$(BUILDDIR))/stage1.stamp'\n\n.PHONY: install\ninstall: all\n\t$(INSTALL) -d '$(call SHESCAPE,$(DESTDIR)$(docdir))'\n\t$(INSTALL_DATA) '$(call SHESCAPE,$(SRCDIR))/COPYING' '$(call SHESCAPE,$(DESTDIR)$(docdir))/'\n\t$(INSTALL_DATA) '$(call SHESCAPE,$(SRCDIR))/CONFIG.md' '$(call SHESCAPE,$(DESTDIR)$(docdir))/'\n\t$(INSTALL_DATA) '$(call SHESCAPE,$(SRCDIR))/PROTOCOL.md' '$(call SHESCAPE,$(DESTDIR)$(docdir))/'\n\t$(INSTALL_DATA) '$(call SHESCAPE,$(SRCDIR))/PHILOSOPHY.md' '$(call SHESCAPE,$(DESTDIR)$(docdir))/'\n\t$(INSTALL_DATA) '$(call SHESCAPE,$(SRCDIR))/USAGE.md' '$(call SHESCAPE,$(DESTDIR)$(docdir))/'\n\t$(INSTALL) -d '$(call SHESCAPE,$(DESTDIR)$(mandir))/man1'\n\t$(INSTALL_DATA) '$(call SHESCAPE,$(BUILDDIR))/man/man1/limine.1' '$(call SHESCAPE,$(DESTDIR)$(mandir))/man1/'\n\t$(INSTALL) -d '$(call SHESCAPE,$(DESTDIR)$(datarootdir))'\n\t$(INSTALL) -d '$(call SHESCAPE,$(DESTDIR)$(datarootdir))/limine'\nifeq ($(BUILD_BIOS),limine-bios)\n\t$(INSTALL_DATA) '$(call SHESCAPE,$(BINDIR))/limine-bios.sys' '$(call SHESCAPE,$(DESTDIR)$(datarootdir))/limine/'\nendif\nifneq ($(BUILD_BIOS_CD),no)\n\t$(INSTALL_DATA) '$(call SHESCAPE,$(BINDIR))/limine-bios-cd.bin' '$(call SHESCAPE,$(DESTDIR)$(datarootdir))/limine/'\nendif\nifneq ($(BUILD_UEFI_CD),no)\n\t$(INSTALL_DATA) '$(call SHESCAPE,$(BINDIR))/limine-uefi-cd.bin' '$(call SHESCAPE,$(DESTDIR)$(datarootdir))/limine/'\nendif\nifneq ($(BUILD_BIOS_PXE),no)\n\t$(INSTALL_DATA) '$(call SHESCAPE,$(BINDIR))/limine-bios-pxe.bin' '$(call SHESCAPE,$(DESTDIR)$(datarootdir))/limine/'\nendif\nifeq ($(BUILD_UEFI_AARCH64),limine-uefi-aarch64)\n\t$(INSTALL_DATA) '$(call SHESCAPE,$(BINDIR))/BOOTAA64.EFI' '$(call SHESCAPE,$(DESTDIR)$(datarootdir))/limine/'\nendif\nifeq ($(BUILD_UEFI_RISCV64),limine-uefi-riscv64)\n\t$(INSTALL_DATA) '$(call SHESCAPE,$(BINDIR))/BOOTRISCV64.EFI' '$(call SHESCAPE,$(DESTDIR)$(datarootdir))/limine/'\nendif\nifeq ($(BUILD_UEFI_LOONGARCH64),limine-uefi-loongarch64)\n\t$(INSTALL_DATA) '$(call SHESCAPE,$(BINDIR))/BOOTLOONGARCH64.EFI' '$(call SHESCAPE,$(DESTDIR)$(datarootdir))/limine/'\nendif\nifeq ($(BUILD_UEFI_X86_64),limine-uefi-x86-64)\n\t$(INSTALL_DATA) '$(call SHESCAPE,$(BINDIR))/BOOTX64.EFI' '$(call SHESCAPE,$(DESTDIR)$(datarootdir))/limine/'\nendif\nifeq ($(BUILD_UEFI_IA32),limine-uefi-ia32)\n\t$(INSTALL_DATA) '$(call SHESCAPE,$(BINDIR))/BOOTIA32.EFI' '$(call SHESCAPE,$(DESTDIR)$(datarootdir))/limine/'\nendif\n\t$(INSTALL) -d '$(call SHESCAPE,$(DESTDIR)$(includedir))'\n\t$(INSTALL_DATA) '$(call SHESCAPE,$(SRCDIR))/limine.h' '$(call SHESCAPE,$(DESTDIR)$(includedir))/'\n\t$(INSTALL) -d '$(call SHESCAPE,$(DESTDIR)$(bindir))'\n\t$(INSTALL_PROGRAM) '$(call SHESCAPE,$(BINDIR))/limine' '$(call SHESCAPE,$(DESTDIR)$(bindir))/'\n\n.PHONY: install-strip\ninstall-strip: install\n\t$(STRIP) '$(call SHESCAPE,$(DESTDIR)$(bindir))/limine'\n\n.PHONY: uninstall\nuninstall:\n\trm -f '$(call SHESCAPE,$(DESTDIR)$(docdir))/COPYING'\n\trm -f '$(call SHESCAPE,$(DESTDIR)$(docdir))/CONFIG.md'\n\trm -f '$(call SHESCAPE,$(DESTDIR)$(docdir))/PROTOCOL.md'\n\trm -f '$(call SHESCAPE,$(DESTDIR)$(docdir))/PHILOSOPHY.md'\n\trm -f '$(call SHESCAPE,$(DESTDIR)$(docdir))/USAGE.md'\n\trm -f '$(call SHESCAPE,$(DESTDIR)$(mandir))/man1/limine.1'\n\trm -f '$(call SHESCAPE,$(DESTDIR)$(bindir))/limine'\n\trm -rf '$(call SHESCAPE,$(DESTDIR)$(datarootdir))/limine'\n\trm -f '$(call SHESCAPE,$(DESTDIR)$(includedir))/limine.h'\n\n$(call MKESCAPE,$(BUILDDIR))/stage1.stamp: $(STAGE1_FILES) $(call MKESCAPE,$(BUILDDIR))/decompressor-build/decompressor.bin $(call MKESCAPE,$(BUILDDIR))/common-bios/stage2.bin.gz\n\t$(MKDIR_P) '$(call SHESCAPE,$(BINDIR))'\n\tcd '$(call SHESCAPE,$(SRCDIR))/stage1/hdd' && nasm bootsect.asm -Wall -w-unknown-warning -w-reloc $(WERROR_FLAG) -fbin -DBUILDDIR=\"'\"'$(call NASMESCAPE,$(BUILDDIR))'\"'\" -o '$(call SHESCAPE,$(BINDIR))/limine-bios-hdd.bin'\nifneq ($(BUILD_BIOS_CD),no)\n\tcd '$(call SHESCAPE,$(SRCDIR))/stage1/cd'  && nasm bootsect.asm -Wall -w-unknown-warning -w-reloc $(WERROR_FLAG) -fbin -DBUILDDIR=\"'\"'$(call NASMESCAPE,$(BUILDDIR))'\"'\" -o '$(call SHESCAPE,$(BINDIR))/limine-bios-cd.bin'\nendif\nifneq ($(BUILD_BIOS_PXE),no)\n\tcd '$(call SHESCAPE,$(SRCDIR))/stage1/pxe' && nasm bootsect.asm -Wall -w-unknown-warning -w-reloc $(WERROR_FLAG) -fbin -DBUILDDIR=\"'\"'$(call NASMESCAPE,$(BUILDDIR))'\"'\" -o '$(call SHESCAPE,$(BINDIR))/limine-bios-pxe.bin'\nendif\n\tcp '$(call SHESCAPE,$(BUILDDIR))/common-bios/limine-bios.sys' '$(call SHESCAPE,$(BINDIR))/'\n\ttouch '$(call SHESCAPE,$(BUILDDIR))/stage1.stamp'\n\n.PHONY: limine-bios\nlimine-bios: common-bios decompressor\n\t$(MAKE) '$(call SHESCAPE,$(BUILDDIR))/stage1.stamp'\n\n$(call MKESCAPE,$(BINDIR))/limine-uefi-cd.bin: $(if $(BUILD_UEFI_IA32),$(call MKESCAPE,$(BUILDDIR))/common-uefi-ia32/BOOTIA32.EFI) $(if $(BUILD_UEFI_X86_64),$(call MKESCAPE,$(BUILDDIR))/common-uefi-x86-64/BOOTX64.EFI) $(if $(BUILD_UEFI_AARCH64),$(call MKESCAPE,$(BUILDDIR))/common-uefi-aarch64/BOOTAA64.EFI) $(if $(BUILD_UEFI_RISCV64),$(call MKESCAPE,$(BUILDDIR))/common-uefi-riscv64/BOOTRISCV64.EFI) $(if $(BUILD_UEFI_LOONGARCH64),$(call MKESCAPE,$(BUILDDIR))/common-uefi-loongarch64/BOOTLOONGARCH64.EFI)\nifneq ($(BUILD_UEFI_CD),no)\n\t$(MKDIR_P) '$(call SHESCAPE,$(BINDIR))'\n\trm -f '$(call SHESCAPE,$(BINDIR))/limine-uefi-cd.bin'\n\tdd if=/dev/zero of='$(call SHESCAPE,$(BINDIR))/limine-uefi-cd.bin' bs=512 count=5760 2>/dev/null\n\tmformat -i '$(call SHESCAPE,$(BINDIR))/limine-uefi-cd.bin' -f 2880 -N 12345678 ::\n\tLIMINE_UEFI_CD_TMP=\"$$(mktemp -d)\"; \\\n\t\tmkdir -p \"$$LIMINE_UEFI_CD_TMP\"/EFI/BOOT; \\\n\t\tcp '$(call SHESCAPE,$(BUILDDIR))/common-uefi-aarch64/BOOTAA64.EFI' \"$$LIMINE_UEFI_CD_TMP\"/EFI/BOOT/ 2>/dev/null; \\\n\t\tcp '$(call SHESCAPE,$(BUILDDIR))/common-uefi-riscv64/BOOTRISCV64.EFI' \"$$LIMINE_UEFI_CD_TMP\"/EFI/BOOT/ 2>/dev/null; \\\n\t\tcp '$(call SHESCAPE,$(BUILDDIR))/common-uefi-loongarch64/BOOTLOONGARCH64.EFI' \"$$LIMINE_UEFI_CD_TMP\"/EFI/BOOT/ 2>/dev/null; \\\n\t\tcp '$(call SHESCAPE,$(BUILDDIR))/common-uefi-x86-64/BOOTX64.EFI' \"$$LIMINE_UEFI_CD_TMP\"/EFI/BOOT/ 2>/dev/null; \\\n\t\tcp '$(call SHESCAPE,$(BUILDDIR))/common-uefi-ia32/BOOTIA32.EFI' \"$$LIMINE_UEFI_CD_TMP\"/EFI/BOOT/ 2>/dev/null; \\\n\t\tfind \"$$LIMINE_UEFI_CD_TMP\" -exec touch -t $(SOURCE_DATE_EPOCH_TOUCH) '{}' + && \\\n\t\tmcopy -D o -s -m -i '$(call SHESCAPE,$(BINDIR))/limine-uefi-cd.bin' \"$$LIMINE_UEFI_CD_TMP\"/EFI :: && \\\n\t\trm -rf \"$$LIMINE_UEFI_CD_TMP\"\nendif\n\n.PHONY: limine-uefi-cd\nlimine-uefi-cd:\n\t$(MAKE) '$(call SHESCAPE,$(BINDIR))/limine-uefi-cd.bin'\n\n$(call MKESCAPE,$(BINDIR))/BOOTX64.EFI: $(call MKESCAPE,$(BUILDDIR))/common-uefi-x86-64/BOOTX64.EFI\n\t$(MKDIR_P) '$(call SHESCAPE,$(BINDIR))'\n\tcp '$(call SHESCAPE,$(BUILDDIR))/common-uefi-x86-64/BOOTX64.EFI' '$(call SHESCAPE,$(BINDIR))/'\n\n.PHONY: limine-uefi-x86-64\nlimine-uefi-x86-64:\n\t$(MAKE) common-uefi-x86-64\n\t$(MAKE) '$(call SHESCAPE,$(BINDIR))/BOOTX64.EFI'\n\n$(call MKESCAPE,$(BINDIR))/BOOTIA32.EFI: $(call MKESCAPE,$(BUILDDIR))/common-uefi-ia32/BOOTIA32.EFI\n\t$(MKDIR_P) '$(call SHESCAPE,$(BINDIR))'\n\tcp '$(call SHESCAPE,$(BUILDDIR))/common-uefi-ia32/BOOTIA32.EFI' '$(call SHESCAPE,$(BINDIR))/'\n\n.PHONY: limine-uefi-ia32\nlimine-uefi-ia32:\n\t$(MAKE) common-uefi-ia32\n\t$(MAKE) '$(call SHESCAPE,$(BINDIR))/BOOTIA32.EFI'\n\n$(call MKESCAPE,$(BINDIR))/BOOTAA64.EFI: $(call MKESCAPE,$(BUILDDIR))/common-uefi-aarch64/BOOTAA64.EFI\n\t$(MKDIR_P) '$(call SHESCAPE,$(BINDIR))'\n\tcp '$(call SHESCAPE,$(BUILDDIR))/common-uefi-aarch64/BOOTAA64.EFI' '$(call SHESCAPE,$(BINDIR))/'\n\n.PHONY: limine-uefi-aarch64\nlimine-uefi-aarch64:\n\t$(MAKE) common-uefi-aarch64\n\t$(MAKE) '$(call SHESCAPE,$(BINDIR))/BOOTAA64.EFI'\n\n$(call MKESCAPE,$(BINDIR))/BOOTRISCV64.EFI: $(call MKESCAPE,$(BUILDDIR))/common-uefi-riscv64/BOOTRISCV64.EFI\n\t$(MKDIR_P) '$(call SHESCAPE,$(BINDIR))'\n\tcp '$(call SHESCAPE,$(BUILDDIR))/common-uefi-riscv64/BOOTRISCV64.EFI' '$(call SHESCAPE,$(BINDIR))/'\n\n.PHONY: limine-uefi-riscv64\nlimine-uefi-riscv64:\n\t$(MAKE) common-uefi-riscv64\n\t$(MAKE) '$(call SHESCAPE,$(BINDIR))/BOOTRISCV64.EFI'\n\n$(call MKESCAPE,$(BINDIR))/BOOTLOONGARCH64.EFI: $(call MKESCAPE,$(BUILDDIR))/common-uefi-loongarch64/BOOTLOONGARCH64.EFI\n\t$(MKDIR_P) '$(call SHESCAPE,$(BINDIR))'\n\tcp '$(call SHESCAPE,$(BUILDDIR))/common-uefi-loongarch64/BOOTLOONGARCH64.EFI' '$(call SHESCAPE,$(BINDIR))/'\n\n.PHONY: limine-uefi-loongarch64\nlimine-uefi-loongarch64:\n\t$(MAKE) common-uefi-loongarch64\n\t$(MAKE) '$(call SHESCAPE,$(BINDIR))/BOOTLOONGARCH64.EFI'\n\n.PHONY: limine-bios-clean\nlimine-bios-clean: common-bios-clean decompressor-clean\n\n.PHONY: limine-uefi-x86-64-clean\nlimine-uefi-x86-64-clean: common-uefi-x86-64-clean\n\n.PHONY: limine-uefi-ia32-clean\nlimine-uefi-ia32-clean: common-uefi-ia32-clean\n\n.PHONY: limine-uefi-aarch64-clean\nlimine-uefi-aarch64-clean: common-uefi-aarch64-clean\n\n.PHONY: limine-uefi-riscv64-clean\nlimine-uefi-riscv64-clean: common-uefi-riscv64-clean\n\n.PHONY: limine-uefi-loongarch64-clean\nlimine-uefi-loongarch64-clean: common-uefi-loongarch64-clean\n\n.PHONY: dist\ndist:\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))'/\"$(DIST_OUTPUT)\"\n\t$(MKDIR_P) '$(call SHESCAPE,$(BUILDDIR))'/\"$(DIST_OUTPUT)\"\n\tcp -r '$(call SHESCAPE,$(SRCDIR))'/.git '$(call SHESCAPE,$(BUILDDIR))'/\"$(DIST_OUTPUT)\"/\n\tcd '$(call SHESCAPE,$(BUILDDIR))'/\"$(DIST_OUTPUT)\" && git checkout .\n\tcd '$(call SHESCAPE,$(BUILDDIR))'/\"$(DIST_OUTPUT)\" && ./bootstrap\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))'/\"$(DIST_OUTPUT)/common/flanterm/.git\"\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))'/\"$(DIST_OUTPUT)/common/flanterm/.gitignore\"\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))'/\"$(DIST_OUTPUT)/freestnd-c-hdrs-0bsd/.git\"\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))'/\"$(DIST_OUTPUT)/nyu-efi/.git\"\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))'/\"$(DIST_OUTPUT)/nyu-efi/.gitignore\"\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))'/\"$(DIST_OUTPUT)/cc-runtime/.git\"\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))'/\"$(DIST_OUTPUT)/cc-runtime/.gitignore\"\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))'/\"$(DIST_OUTPUT)/dtc\"\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))'/\"$(DIST_OUTPUT)/tinf\"\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))'/\"$(DIST_OUTPUT)/common/lib/stb_image.h.nopatch\"\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))'/\"$(DIST_OUTPUT)/.git\"\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))'/\"$(DIST_OUTPUT)/.gitignore\"\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))'/\"$(DIST_OUTPUT)/.github\"\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))'/\"$(DIST_OUTPUT)/README.md\"\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))'/\"$(DIST_OUTPUT)/autom4te.cache\"\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))'/\"$(DIST_OUTPUT)/test\"\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))'/\"$(DIST_OUTPUT)/test.mk\"\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))'/\"$(DIST_OUTPUT)/logo.png\"\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))'/\"$(DIST_OUTPUT)/screenshot.png\"\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))'/\"$(DIST_OUTPUT)/bochsrc\"\n\techo \"$(PACKAGE_VERSION)\" > '$(call SHESCAPE,$(BUILDDIR))'/\"$(DIST_OUTPUT)/version\"\n\tcd '$(call SHESCAPE,$(BUILDDIR))' && tar -cf \"$(DIST_OUTPUT).tar\" \"$(DIST_OUTPUT)\"\n\tcd '$(call SHESCAPE,$(BUILDDIR))' && gzip < \"$(DIST_OUTPUT).tar\" > \"$(DIST_OUTPUT).tar.gz\"\n\tcd '$(call SHESCAPE,$(BUILDDIR))' && ( lzip < \"$(DIST_OUTPUT).tar\" > \"$(DIST_OUTPUT).tar.lz\" || rm -f \"$(DIST_OUTPUT).tar.lz\" )\n\tcd '$(call SHESCAPE,$(BUILDDIR))' && ( bzip2 < \"$(DIST_OUTPUT).tar\" > \"$(DIST_OUTPUT).tar.bz2\" || rm -f \"$(DIST_OUTPUT).tar.bz2\" )\n\tcd '$(call SHESCAPE,$(BUILDDIR))' && ( xz < \"$(DIST_OUTPUT).tar\" > \"$(DIST_OUTPUT).tar.xz\" || rm -f \"$(DIST_OUTPUT).tar.xz\" )\n\tcd '$(call SHESCAPE,$(BUILDDIR))' && ( zstd < \"$(DIST_OUTPUT).tar\" > \"$(DIST_OUTPUT).tar.zst\" || rm -f \"$(DIST_OUTPUT).tar.zst\" )\n\tcd '$(call SHESCAPE,$(BUILDDIR))' && rm \"$(DIST_OUTPUT).tar\"\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))'/\"$(DIST_OUTPUT)\"\n\n.PHONY: distclean\ndistclean: clean\n\trm -rf ovmf* config.log config.status GNUmakefile config.h toolchain-files man/man1/limine.1\n\n.PHONY: maintainer-clean\nmaintainer-clean: distclean\n\tcd '$(call SHESCAPE,$(SRCDIR))' && rm -rf common/flanterm common/libfdt common/lib/stb_image.h.nopatch common/lib/stb_image.h decompressor/tinf tinf dtc freestnd-c-hdrs-0bsd cc-runtime nyu-efi configure timestamps build-aux *'~' autom4te.cache aclocal.m4 *.tar*\n\n.PHONY: common-uefi-x86-64\ncommon-uefi-x86-64:\n\tTOOLCHAIN_FILE='$(call SHESCAPE,$(BUILDDIR))/toolchain-files/uefi-x86_64-toolchain.mk' \\\n\tTARGET=uefi-x86-64 \\\n\tBUILDDIR='$(call SHESCAPE,$(BUILDDIR))/common-uefi-x86-64' \\\n\t\t$(MAKE) -C '$(call SHESCAPE,$(SRCDIR))/common' -f common.mk\n\n.PHONY: common-uefi-x86-64-clean\ncommon-uefi-x86-64-clean:\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))/common-uefi-x86-64'\n\n.PHONY: common-uefi-aarch64\ncommon-uefi-aarch64:\n\tTOOLCHAIN_FILE='$(call SHESCAPE,$(BUILDDIR))/toolchain-files/uefi-aarch64-toolchain.mk' \\\n\tTARGET=uefi-aarch64 \\\n\tBUILDDIR='$(call SHESCAPE,$(BUILDDIR))/common-uefi-aarch64' \\\n\t\t$(MAKE) -C '$(call SHESCAPE,$(SRCDIR))/common' -f common.mk\n\n.PHONY: common-uefi-aarch64-clean\ncommon-uefi-aarch64-clean:\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))/common-uefi-aarch64'\n\n.PHONY: common-uefi-riscv64\ncommon-uefi-riscv64:\n\tTOOLCHAIN_FILE='$(call SHESCAPE,$(BUILDDIR))/toolchain-files/uefi-riscv64-toolchain.mk' \\\n\tTARGET=uefi-riscv64 \\\n\tBUILDDIR='$(call SHESCAPE,$(BUILDDIR))/common-uefi-riscv64' \\\n\t\t$(MAKE) -C '$(call SHESCAPE,$(SRCDIR))/common' -f common.mk\n\n.PHONY: common-uefi-riscv64-clean\ncommon-uefi-riscv64-clean:\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))/common-uefi-riscv64'\n\n.PHONY: common-uefi-loongarch64\ncommon-uefi-loongarch64:\n\tTOOLCHAIN_FILE='$(call SHESCAPE,$(BUILDDIR))/toolchain-files/uefi-loongarch64-toolchain.mk' \\\n\tTARGET=uefi-loongarch64 \\\n\tBUILDDIR='$(call SHESCAPE,$(BUILDDIR))/common-uefi-loongarch64' \\\n\t\t$(MAKE) -C '$(call SHESCAPE,$(SRCDIR))/common' -f common.mk\n\n.PHONY: common-uefi-loongarch64-clean\ncommon-uefi-loongarch64-clean:\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))/common-uefi-loongarch64'\n\n.PHONY: common-uefi-ia32\ncommon-uefi-ia32:\n\tTOOLCHAIN_FILE='$(call SHESCAPE,$(BUILDDIR))/toolchain-files/uefi-i686-toolchain.mk' \\\n\tTARGET=uefi-ia32 \\\n\tBUILDDIR='$(call SHESCAPE,$(BUILDDIR))/common-uefi-ia32' \\\n\t\t$(MAKE) -C '$(call SHESCAPE,$(SRCDIR))/common' -f common.mk\n\n.PHONY: common-uefi-ia32-clean\ncommon-uefi-ia32-clean:\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))/common-uefi-ia32'\n\n.PHONY: common-bios\ncommon-bios:\n\tTOOLCHAIN_FILE='$(call SHESCAPE,$(BUILDDIR))/toolchain-files/bios-i686-toolchain.mk' \\\n\tTARGET=bios \\\n\tBUILDDIR='$(call SHESCAPE,$(BUILDDIR))/common-bios' \\\n\t\t$(MAKE) -C '$(call SHESCAPE,$(SRCDIR))/common' -f common.mk\n\n.PHONY: common-bios-clean\ncommon-bios-clean:\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))/common-bios'\n\n.PHONY: decompressor\ndecompressor:\n\tTOOLCHAIN_FILE='$(call SHESCAPE,$(BUILDDIR))/toolchain-files/bios-i686-toolchain.mk' \\\n\tBUILDDIR='$(call SHESCAPE,$(BUILDDIR))/decompressor-build' \\\n\t\t$(MAKE) -C '$(call SHESCAPE,$(SRCDIR))/decompressor' -f decompressor.mk\n\n.PHONY: decompressor-clean\ndecompressor-clean:\n\trm -rf '$(call SHESCAPE,$(BUILDDIR))/decompressor-build'\n\n-include test.mk\n"
        },
        {
          "name": "PHILOSOPHY.md",
          "type": "blob",
          "size": 2.1572265625,
          "content": "# Limine's Design Philosophy\n\n### Why not support filesystem X or feature Y? (eg: LUKS, LVM)\n\nThe idea with Limine is to remove the responsibility of parsing filesystems and formats, aside from the bare minimum necessities (eg: FAT*, ISO9660),\nfrom the bootloader itself.\nIt is a needless duplication of efforts to have bootloaders support all possible filesystems and formats, and it leads to massive, bloated\nbootloaders as a result (eg: GRUB2).\nWhat is needed is to simply make sure the bootloader is capable of reading its own files, configuration, and be able to load kernel/module files\nfrom disk. The kernel should be responsible for parsing everything else as it sees fit.\n\n### What about LUKS? What about security? Encrypt the kernel!\n\nSimply put, this is unnecessary. Putting the kernel/modules in a readable FAT32 partition and letting Limine know about their BLAKE2B checksums\nin the config file provides as much security as encrypting the kernel does.\n\n### What? But what if someone modifies the config file! Ha! You clearly have not thought about that!\n\nWe have. While this is a pointless effort on legacy x86 BIOS, it is a reasonable expectation on UEFI systems with Secure Boot. Limine provides a\nway to modify its own EFI executable to bake in the BLAKE2B checksum of the config file itself. The EFI executable can then get signed with\na key added to the firmware's keychain. This prevents modifications to the config file (and in turn the checksums contained there)\nfrom going unnoticed.\n\n### What about ext2/3/4? Why is that supported then?\n\nThis is explicitly against the philosophy, but it is a pragmatic compromise since a lot of Linux distros and setups expect it to \"work that way\".\nIt is necessary to keep in mind, additionally, that this is experimental and not explicitly supported, due to lack of maintenance. Maintainers wanted!\n\n### But I don't want to have a separate FAT boot partition! I don't want it!!!\n\nWell tough luck. It is `$year_following_2012` now and most PCs are equipped with UEFI and simply won't boot without a FAT EFI system partition\nanyways. It is not unreasonable to share the EFI system partition with the OS's /boot and store kernels and initramfses there.\n"
        },
        {
          "name": "PROTOCOL.md",
          "type": "blob",
          "size": 40.865234375,
          "content": "# The Limine Boot Protocol\n\nThe Limine boot protocol is a modern, portable, featureful, and extensible boot\nprotocol.\n\nThis file serves as the official centralised collection of features that\nthe Limine boot protocol is comprised of. Other bootloaders may support extra\nunofficial features, but it is strongly recommended to avoid fragmentation\nand submit new features by opening a pull request to the Limine repository.\n\nThe [limine.h](/limine.h) file provides an implementation of all the\nstructures and constants described in this document, for the C and C++\nlanguages.\n\n## General Notes\n\nThe \"executable\" is the kernel or otherwise the freestanding application being loaded\nby the Limine boot protocol.\n\nAll pointers are 64-bit wide. All non-NULL pointers point to the object with the\nhigher half direct map offset already added to them, unless otherwise noted.\n\nAll responses and associated data structures are placed in bootloader-reclaimable\nmemory regions.\n\nThe calling convention matches the C ABI for the specific architecture\n(SysV for x86, AAPCS LP64 for aarch64, LP64 for riscv64).\n\n## Base protocol revisions\n\nThe Limine boot protocol comes in several base revisions; so far, 4\nbase revisions are specified: 0 through 3.\n\nBase protocol revisions change certain behaviours of the Limine boot protocol\noutside any specific feature. The specifics are going to be described as\nneeded throughout this specification.\n\nBase revision 0 through 2 are considered deprecated. Base revision 0 is the default base revision\nan executable is assumed to be requesting and complying to if no base revision tag\nis provided by the executable, for backwards compatibility.\n\nA base revision tag is a set of 3 64-bit values placed somewhere in the loaded executable\nimage on an 8-byte aligned boundary; the first 2 values are a magic number\nfor the bootloader to be able to identify the tag, and the last value is the\nrequested base revision number. Lack of base revision tag implies revision 0.\n\n```c\n#define LIMINE_BASE_REVISION(N) \\\n    uint64_t limine_base_revision[3] = { 0xf9562b2d5c95a6c8, 0x6a7b384944536bdc, (N) };\n```\n\nIf a bootloader drops support for an older base revision, the bootloader must\nfail to boot an executable requesting such base revision. If a bootloader does not yet\nsupport a requested base revision (i.e. if the requested base revision is higher\nthan the maximum base revision supported), it must boot the executable using any\narbitrary revision it supports, and communicate failure to comply to the executable by\n*leaving the 3rd component of the base revision tag unchanged*.\nOn the other hand, if the executable's requested base revision is supported,\n*the 3rd component of the base revision tag must be set to 0 by the bootloader*.\n\nNote: this means that unlike when the bootloader drops support for an older base\nrevision and *it* is responsible for failing to boot the executable, in case the\nbootloader does not yet support the executable's requested base revision,\nit is up to the executable itself to fail (or handle the condition otherwise).\n\nFor any Limine-compliant bootloader supporting base revision 3, it is *mandatory*\nto load executables requesting higher unsupported base revisions with at least\nbase revision 3, and it is mandatory for it to always set the 2nd component of\nthe base revision tag to the base revision actually used to load the executable,\nregardless of whether it was the requested one or not.\n\n## Features\n\nThe protocol is centered around the concept of request/response - collectively\nnamed \"features\" - where the executable requests some action or information from\nthe bootloader, and the bootloader responds accordingly, if it is capable of\ndoing so.\n\nIn C terms, a feature is comprised of 2 structures: the request, and the response.\n\nA request has 3 mandatory members at the beginning of the structure:\n```c\nstruct limine_example_request {\n    uint64_t id[4];\n    uint64_t revision;\n    struct limine_example_response *response;\n    ... optional members follow ...\n};\n```\n* `id` - The ID of the request. This is an 8-byte aligned magic number that the\nbootloader will scan for inside the loaded executable image to find requests. Requests\nmay be located anywhere inside the loaded executable image as long as they are 8-byte\naligned. There may only be 1 of the same request. The bootloader will refuse\nto boot an executable with multiple of the same request IDs. Alternatively,\nit is possible to provide a list of requests explicitly via an executable file section.\nSee \"Limine Requests Section\". (Note: this is deprecated and removed in base revision 1)\n* `revision` - The revision of the request that the executable provides. This starts at 0 and is\nbumped whenever new members or functionality are added to the request structure.\nBootloaders process requests in a backwards compatible manner, *always*. This\nmeans that if the bootloader does not support the revision of the request,\nit will process the request as if were the highest revision that the bootloader\nsupports.\n* `response` - This field is filled in by the bootloader at load time, with a\npointer to the response structure, if the request was successfully processed.\nIf the request is unsupported or was not successfully processed, this field\nis *left untouched*, meaning that if it was set to `NULL`, it will stay that\nway.\n\nA response has only 1 mandatory member at the beginning of the structure:\n```c\nstruct limine_example_response {\n    uint64_t revision;\n    ... optional members follow ...\n};\n```\n* `revision` - Like for requests, bootloaders will instead mark responses with a\nrevision number. This revision is not coupled between requests and responses,\nas they are bumped individually when new members are added or functionality is\nchanged. Bootloaders will set the revision to the one they provide, and this is\n*always backwards compatible*, meaning higher revisions support all that lower\nrevisions do.\n\nThis is all there is to features. For a list of official Limine features, read\nthe \"Feature List\" section below.\n\n## Requests Delimiters\n\nThe bootloader can be told to start and/or stop searching for requests (including base\nrevision tags) in an executable's loaded image by placing start and/or end markers,\non an 8-byte aligned boundary.\n\nThe bootloader will only accept requests placed between the last start marker found (if\nthere happen to be more than 1, which there should not, ideally) and the first end\nmarker found.\n```c\n#define LIMINE_REQUESTS_START_MARKER \\\n    uint64_t limine_requests_start_marker[4] = { 0xf6b8f4b39de7d1ae, 0xfab91a6940fcb9cf, \\\n                                                 0x785c6ed015d3e316, 0x181e920a7852b9d9 };\n\n#define LIMINE_REQUESTS_END_MARKER \\\n    uint64_t limine_requests_end_marker[2] = { 0xadc0e0531bb10d03, 0x9572709f31764c62 };\n```\n\nFor base revisions 0 and 1, the requests delimiters are *hints*. The bootloader can still search for\nrequests and base revision tags outside the delimited area if it doesn't support the hints.\n\nBase revision 2's sole difference compared to base revision 1 is that support for\nrequest delimiters has to be provided and the delimiters must be honoured, if present,\nrather than them just being a hint.\n\n## Limine Requests Section\n\nNote: *This behaviour is deprecated and removed as of base protocol revision 1*\n\nFor executables requesting deprecated base revision 0,\nif the executable executable file contains a `.limine_reqs` section, the bootloader\nwill, instead of scanning the executable for requests, fetch the requests\nfrom a NULL-terminated array of pointers to the provided requests, contained\ninside said section.\n\n## Entry memory layout\n\nThe protocol mandates executables to load themselves at or above\n`0xffffffff80000000`. Lower half executables are *not supported*. For relocatable executables\nasking to be loaded at address 0, a minimum slide of `0xffffffff80000000` is applied.\n\nAt handoff, the executable will be properly loaded and mapped with appropriate\nMMU permissions, as supervisor, at the requested virtual memory address (provided it is at\nor above `0xffffffff80000000`).\n\nNo specific physical memory placement is guaranteed, except that the loaded executable image\nis guaranteed to be physically contiguous. In order to determine\nwhere the executable is loaded in physical memory, see the Executable Address feature\nbelow.\n\nAlongside the loaded executable, the bootloader will set up memory mappings as such:\n\n```\n Base Physical Address |                               | Base Virtual Address\n ----------------------+-------------------------------+-----------------------\n                       |    (4 GiB - 0x1000) and any   |\n  0x0000000000001000   |  additional memory map region |  0x0000000000001000\n                       |    (Base revision 0 only)     |\n ----------------------+-------------------------------+-----------------------\n                       |     4 GiB and additional      |\n  0x0000000000000000   |  memory map regions depending |      HHDM start\n                       |       on base revision        |\n```\nWhere \"HHDM start\" is returned by the Higher Half Direct Map feature (see below).\nThese mappings are supervisor, read, write, execute (-rwx).\n\nFor base revision 0, the above-4GiB identity and HHDM mappings cover any memory\nmap region.\n\nFor base revisions 1 and 2, the above-4GiB HHDM mappings do not comprise memory map regions\nof types:\n - Reserved\n - Bad memory\n\nFor base revision 3, the only memory map regions mapped to the HHDM are:\n - Usable\n - Bootloader reclaimable\n - Executable and modules\n - Framebuffer\n\nFor base revision 3, the unconditional direct map of the first 4GiB is dropped, and\nonly memory map regions of complying types are mapped in.\n\nThe bootloader page tables are in bootloader-reclaimable memory (see Memory Map\nfeature below), and their specific layout is undefined as long as they provide\nthe above memory mappings.\n\nIf the executable is a position independent executable, the bootloader is free to\nrelocate it as it sees fit, potentially performing KASLR (as specified by the\nconfig).\n\n## Caching\n\n### x86-64\n\nThe executable, loaded at or above `0xffffffff80000000`, sees all of its\nsegments mapped using write-back (WB) caching at the page tables level.\n\nAll HHDM and identity map memory regions are mapped using write-back (WB) caching at the page\ntables level, except framebuffer regions which are mapped using write-combining\n(WC) caching at the page tables level (if the CPU support the PAT, see below).\n\nIf the CPU supports the PAT (Page Attribute Table), its layout is specified to be as follows:\n```\nPAT0 -> WB\nPAT1 -> WT\nPAT2 -> UC-\nPAT3 -> UC\nPAT4 -> WP\nPAT5 -> WC\nPAT6 -> unspecified\nPAT7 -> unspecified\n```\n\nThe MTRRs are left as the firmware set them up.\n\n### aarch64\n\nThe executable, loaded at or above `0xffffffff80000000`, sees all of its\nsegments mapped using Normal Write-Back RW-Allocate non-transient caching mode.\n\nAll HHDM and identity map memory regions are mapped using the Normal Write-Back RW-Allocate\nnon-transient caching mode, except for the framebuffer regions, which are\nmapped in using an unspecified caching mode, correct for use with the\nframebuffer on the platform.\n\nThe `MAIR_EL1` register will at least contain entries for the above-mentioned\ncaching modes, in an unspecified order.\n\nIn order to access MMIO regions, the executable must ensure the correct caching mode\nis used on its own.\n\n### riscv64\n\nIf the `Svpbmt` extension is available, all framebuffer memory regions are mapped\nwith `PBMT=NC` to enable write-combining optimizations. The executable,\nloaded at or above `0xffffffff80000000`, and all HHDM and identity map memory regions are mapped\nwith the default `PBMT=PMA`.\n\nIf the `Svpbmt` extension is not available, no PMAs can be overridden (effectively,\neverything is mapped with `PBMT=PMA`).\n\n### loongarch64\n\nThe executable, loaded at or above `0xffffffff80000000`, sees all of its\nsegments mapped using the Coherent Cached (CC) memory access type (MAT).\n\nAll HHDM and identity map memory regions are mapped using the Coherent Cached (CC)\nMAT, except for the framebuffer regions, which are mapped in using the\nWeakly-ordered UnCached (WUC) MAT.\n\n## Machine state at entry\n\n### x86-64\n\n`rip` will be the entry point as defined as part of the executable file format,\nunless the Entry Point feature is requested (see below), in which case, the value\nof `rip` is going to be taken from there.\n\nAt entry all segment registers are loaded as 64 bit code/data segments, limits\nand bases are ignored since this is 64-bit mode.\n\nThe GDT register is loaded to point to a GDT, in bootloader-reclaimable memory,\nwith at least the following entries, starting at offset 0:\n\n  - Null descriptor\n  - 16-bit code descriptor. Base = `0`, limit = `0xffff`. Readable.\n  - 16-bit data descriptor. Base = `0`, limit = `0xffff`. Writable.\n  - 32-bit code descriptor. Base = `0`, limit = `0xffffffff`. Readable.\n  - 32-bit data descriptor. Base = `0`, limit = `0xffffffff`. Writable.\n  - 64-bit code descriptor. Base and limit irrelevant. Readable.\n  - 64-bit data descriptor. Base and limit irrelevant. Writable.\n\nThe IDT is in an undefined state. Executable must load its own.\n\nIF flag, VM flag, and direction flag are cleared on entry. Other flags\nundefined.\n\nPG is enabled (`cr0`), PE is enabled (`cr0`), PAE is enabled (`cr4`),\nWP is enabled (`cr0`), LME is enabled (`EFER`), NX is enabled (`EFER`) if available.\nIf 5-level paging is requested and available, then 5-level paging is enabled\n(LA57 bit in `cr4`).\n\nThe A20 gate is opened.\n\nLegacy PIC (if available) and IO APIC IRQs (only those with delivery mode fixed\n(0b000) or lowest priority (0b001)) are all masked.\n\nIf booted by EFI/UEFI, boot services are exited.\n\n`rsp` is set to point to a stack, in bootloader-reclaimable memory, which is\nat least 64KiB (65536 bytes) in size, or the size specified in the Stack\nSize Request (see below). An invalid return address of 0 is pushed\nto the stack before jumping to the executable.\n\nAll other general purpose registers are set to 0.\n\n### aarch64\n\n`PC` will be the entry point as defined as part of the executable file format,\nunless the Entry Point feature is requested (see below), in which case,\nthe value of `PC` is going to be taken from there.\n\nThe contents of the `VBAR_EL1` register are undefined, and the executable must load\nits own.\n\nThe `MAIR_EL1` register contents are described above, in the caching section.\n\nAll interrupts are masked (`PSTATE.{D, A, I, F}` are set to 1).\n\nThe executable is entered in little-endian AArch64 EL1t (EL1 with `PSTATE.SP` set to\n0, `PSTATE.E` set to 0, and `PSTATE.nRW` set to 0).\n\nOther fields of `PSTATE` are undefined.\n\nAt entry: the MMU (`SCTLR_EL1.M`) is enabled, the I-Cache and D-Cache\n(`SCTLR_EL1.{I, C}`) are enabled, data alignment checking (`SCTLR_EL1.A`) is\ndisabled. SP alignment checking (`SCTLR_EL1.{SA, SA0}`) is enabled. Other fields\nof `SCTLR_EL1` are reset to 0 or to their reserved value.\n\nHigher ELs do not interfere with accesses to vector or floating point\ninstructions or registers.\n\nHigher ELs do not interfere with accesses to the generic timer and counter.\n\nThe used translation granule size for both `TTBR0_EL1` and `TTBR1_EL1` is 4KiB.\n\n`TCR_EL1.{T0SZ, T1SZ}` are set to 16 under 4-level paging, or 12 under 5-level\npaging. Additionally, for 5-level paging, `TCR_EL1.DS` is set to 1.\n\n`TTBR1_EL1` points to the bootloader-provided higher half page tables.\nFor base revision 0, `TTBR0_EL1` points to the bootloader-provided identity\nmapping page tables, and is unspecified for all other base revisions and can\nthus be freely used by the executable.\n\nIf booted by EFI/UEFI, boot services are exited.\n\n`SP` is set to point to a stack, in bootloader-reclaimable memory, which is\nat least 64KiB (65536 bytes) in size, or the size specified in the Stack\nSize Request (see below).\n\nAll other general purpose registers (including `X29` and `X30`) are set to 0.\nVector registers are in an undefined state.\n\n### riscv64\n\nAt entry the machine is executing in Supervisor mode.\n\n`pc` will be the entry point as defined as part of the executable file format,\nunless the Entry Point feature is requested (see below), in which case, the\nvalue of `pc` is going to be taken from there.\n\n`x1`(`ra`) is set to 0, the executable must not return from the entry point.\n\n`x2`(`sp`) is set to point to a stack, in bootloader-reclaimable memory, which is\nat least 64KiB (65536 bytes) in size, or the size specified in the Stack\nSize Request (see below).\n\n`x3`(`gp`) is set to 0, executable must load its own global pointer if needed.\n\nAll other general purpose registers, with the exception of `x5`(`t0`), are set to 0.\n\nIf booted by EFI/UEFI, boot services are exited.\n\n`stvec` is in an undefined state. `sstatus.SIE` and `sie` are set to 0.\n\n`sstatus.FS` and `sstatus.XS` are both set to `Off`.\n\nPaging is enabled with the paging mode specified by the Paging Mode feature (see below).\n\nThe (A)PLIC, if present, is in an undefined state.\n\n### loongarch64\n\nAt entry the machine is executing in PLV0.\n\n`$pc` will be the entry point as defined as part of the executable file format,\nunless the Entry Point feature is requested (see below), in which case, the\nvalue of `$pc` is going to be taken from there.\n\n`$r1`(`$ra`) is set to 0, the executable must not return from the entry point.\n\n`$r3`(`$sp`) is set to point to a stack, in bootloader-reclaimable memory, which is\nat least 64KiB (65536 bytes) in size, or the size specified in the Stack\nSize Request (see below).\n\nAll other general purpose registers, with the exception of `$r12`(`$t0`), are set to 0.\n\nIf booted by EFI/UEFI, boot services are exited.\n\n`CSR.EENTRY`, `CSR.MERRENTRY` and `CSR.DWM0-3` are in an undefined state.\n\n`PG` in `CSR.CRMD` is 1, `DA` is 0, `IE` is 0 and `PLV` is 0 but is otherwise unspecified.\n\n`CSR.TLBRENTRY` is filled with a provided TLB refill handler.\n\n## Feature List\n\nRequest IDs are composed of 4 64-bit unsigned integers, but the first 2 are\ncommon to every request:\n```c\n#define LIMINE_COMMON_MAGIC 0xc7b1dd30df4c8b88, 0x0a82e883a194f07b\n```\n\n### Bootloader Info Feature\n\nID:\n```c\n#define LIMINE_BOOTLOADER_INFO_REQUEST { LIMINE_COMMON_MAGIC, 0xf55038d8e2a1202f, 0x279426fcf5f59740 }\n```\n\nRequest:\n```c\nstruct limine_bootloader_info_request {\n    uint64_t id[4];\n    uint64_t revision;\n    struct limine_bootloader_info_response *response;\n};\n```\n\nResponse:\n```c\nstruct limine_bootloader_info_response {\n    uint64_t revision;\n    char *name;\n    char *version;\n};\n```\n\n`name` and `version` are 0-terminated ASCII strings containing the name and\nversion of the loading bootloader.\n\n### Firmware Type Feature\n\nID:\n```c\n#define LIMINE_FIRMWARE_TYPE_REQUEST { LIMINE_COMMON_MAGIC, 0x8c2f75d90bef28a8, 0x7045a4688eac00c3 }\n```\n\nRequest:\n```c\nstruct limine_firmware_type_request {\n    uint64_t id[4];\n    uint64_t revision;\n    struct limine_firmware_type_response *response;\n};\n```\n\nResponse:\n```c\nstruct limine_firmware_type_response {\n    uint64_t revision;\n    uint64_t firmware_type;\n};\n```\n\n`firmware_type` is an enumeration that can have one of the following values:\n```c\n#define LIMINE_FIRMWARE_TYPE_X86BIOS 0\n#define LIMINE_FIRMWARE_TYPE_UEFI32 1\n#define LIMINE_FIRMWARE_TYPE_UEFI64 2\n#define LIMINE_FIRMWARE_TYPE_SBI 3\n```\n\n### Stack Size Feature\n\nID:\n```c\n#define LIMINE_STACK_SIZE_REQUEST { LIMINE_COMMON_MAGIC, 0x224ef0460a8e8926, 0xe1cb0fc25f46ea3d }\n```\n\nRequest:\n```c\nstruct limine_stack_size_request {\n    uint64_t id[4];\n    uint64_t revision;\n    struct limine_stack_size_response *response;\n    uint64_t stack_size;\n};\n```\n\n* `stack_size` - The requested stack size in bytes (also used for MP processors).\n\nResponse:\n```c\nstruct limine_stack_size_response {\n    uint64_t revision;\n};\n```\n\n### HHDM (Higher Half Direct Map) Feature\n\nID:\n```c\n#define LIMINE_HHDM_REQUEST { LIMINE_COMMON_MAGIC, 0x48dcf1cb8ad2b852, 0x63984e959a98244b }\n```\n\nRequest:\n```c\nstruct limine_hhdm_request {\n    uint64_t id[4];\n    uint64_t revision;\n    struct limine_hhdm_response *response;\n};\n```\n\nResponse:\n```c\nstruct limine_hhdm_response {\n    uint64_t revision;\n    uint64_t offset;\n};\n```\n\n* `offset` - the virtual address offset of the beginning of the higher half\ndirect map.\n\n### Framebuffer Feature\n\nID:\n```c\n#define LIMINE_FRAMEBUFFER_REQUEST { LIMINE_COMMON_MAGIC, 0x9d5827dcd881dd75, 0xa3148604f6fab11b }\n```\n\nRequest:\n```c\nstruct limine_framebuffer_request {\n    uint64_t id[4];\n    uint64_t revision;\n    struct limine_framebuffer_response *response;\n};\n```\n\nResponse:\n```c\nstruct limine_framebuffer_response {\n    uint64_t revision;\n    uint64_t framebuffer_count;\n    struct limine_framebuffer **framebuffers;\n};\n```\n\n* `framebuffer_count` - How many framebuffers are present.\n* `framebuffers` - Pointer to an array of `framebuffer_count` pointers to\n`struct limine_framebuffer` structures.\n\n```c\n// Constants for `memory_model`\n#define LIMINE_FRAMEBUFFER_RGB 1\n\nstruct limine_framebuffer {\n    void *address;\n    uint64_t width;\n    uint64_t height;\n    uint64_t pitch;\n    uint16_t bpp; // Bits per pixel\n    uint8_t memory_model;\n    uint8_t red_mask_size;\n    uint8_t red_mask_shift;\n    uint8_t green_mask_size;\n    uint8_t green_mask_shift;\n    uint8_t blue_mask_size;\n    uint8_t blue_mask_shift;\n    uint8_t unused[7];\n    uint64_t edid_size;\n    void *edid;\n\n    /* Response revision 1 */\n    uint64_t mode_count;\n    struct limine_video_mode **modes;\n};\n```\n\n`modes` is an array of `mode_count` pointers to `struct limine_video_mode` describing the\navailable video modes for the given framebuffer.\n\n`edid` points to the screen's EDID blob, if available, else NULL.\n\n```c\nstruct limine_video_mode {\n    uint64_t pitch;\n    uint64_t width;\n    uint64_t height;\n    uint16_t bpp;\n    uint8_t memory_model;\n    uint8_t red_mask_size;\n    uint8_t red_mask_shift;\n    uint8_t green_mask_size;\n    uint8_t green_mask_shift;\n    uint8_t blue_mask_size;\n    uint8_t blue_mask_shift;\n};\n```\n\n### Paging Mode Feature\n\nThe Paging Mode feature allows the executable to control which paging mode is enabled\nbefore control is passed to it.\n\nID:\n```c\n#define LIMINE_PAGING_MODE_REQUEST { LIMINE_COMMON_MAGIC, 0x95c1a0edab0944cb, 0xa4e5cb3842f7488a }\n```\n\nRequest:\n```c\nstruct limine_paging_mode_request {\n    uint64_t id[4];\n    uint64_t revision;\n    struct limine_paging_mode_response *response;\n    uint64_t mode;\n    /* Request revision 1 and above */\n    uint64_t max_mode;\n    uint64_t min_mode;\n};\n```\n\nThe `mode`, `max_mode`, and `min_mode` fields take architecture-specific values\nas described below.\n\n`mode` is the preferred paging mode by the OS; the bootloader should always aim\nto pick this mode unless unavailable or overridden by the user in the bootloader's\nconfiguration file.\n\n`max_mode` is the highest paging mode in numerical order that the OS supports. The\nbootloader will refuse to boot the OS if no paging modes of this type or lower\n(but equal or greater than `min_mode`) are available.\n\n`min_mode` is the lowest paging mode in numerical order that the OS supports. The\nbootloader will refuse to boot the OS if no paging modes of this type or greater\n(but equal or lower than `max_mode`) are available.\n\nIf no Paging Mode Request is provided, the values of `mode`, `max_mode`, and `min_mode`\nthat the bootloader assumes are `LIMINE_PAGING_MODE_DEFAULT`, `LIMINE_PAGING_MODE_DEFAULT`,\nand `LIMINE_PAGING_MODE_MIN`, respectively.\n\nIf request revision 0 is used, the values of `max_mode` and `min_mode` that the\nbootloader assumes are the value of `mode` and `LIMINE_PAGING_MODE_MIN`,\nrespectively.\n\nResponse:\n```c\nstruct limine_paging_mode_response {\n    uint64_t revision;\n    uint64_t mode;\n};\n```\n\nThe response indicates which paging mode was actually enabled by the bootloader.\nExecutables must be prepared to handle cases where the provided paging mode is\nnot supported.\n\n#### x86-64\n\nValues assignable to `mode`, `max_mode`, and `min_mode`:\n```c\n#define LIMINE_PAGING_MODE_X86_64_4LVL 0\n#define LIMINE_PAGING_MODE_X86_64_5LVL 1\n\n#define LIMINE_PAGING_MODE_DEFAULT LIMINE_PAGING_MODE_X86_64_4LVL\n#define LIMINE_PAGING_MODE_MIN LIMINE_PAGING_MODE_X86_64_4LVL\n```\n\n#### aarch64\n\nValues assignable to `mode`, `max_mode`, and `min_mode`:\n```c\n#define LIMINE_PAGING_MODE_AARCH64_4LVL 0\n#define LIMINE_PAGING_MODE_AARCH64_5LVL 1\n\n#define LIMINE_PAGING_MODE_DEFAULT LIMINE_PAGING_MODE_AARCH64_4LVL\n#define LIMINE_PAGING_MODE_MIN LIMINE_PAGING_MODE_AARCH64_4LVL\n```\n\n#### riscv64\n\nValues assignable to `mode`, `max_mode`, and `min_mode`:\n```c\n#define LIMINE_PAGING_MODE_RISCV_SV39 0\n#define LIMINE_PAGING_MODE_RISCV_SV48 1\n#define LIMINE_PAGING_MODE_RISCV_SV57 2\n\n#define LIMINE_PAGING_MODE_DEFAULT LIMINE_PAGING_MODE_RISCV_SV48\n#define LIMINE_PAGING_MODE_MIN LIMINE_PAGING_MODE_RISCV_SV39\n```\n\n### loongarch64\n\nValues assignable to `mode`, `max_mode`, and `min_mode`:\n```c\n#define LIMINE_PAGING_MODE_LOONGARCH64_4LVL 0\n\n#define LIMINE_PAGING_MODE_DEFAULT LIMINE_PAGING_MODE_LOONGARCH64_4LVL\n#define LIMINE_PAGING_MODE_MIN LIMINE_PAGING_MODE_LOONGARCH64_4LVL\n```\n\n### MP (multiprocessor) Feature\n\nID:\n```c\n#define LIMINE_MP_REQUEST { LIMINE_COMMON_MAGIC, 0x95a67b819a1b857e, 0xa0b61b723b6a73e0 }\n```\n\nRequest:\n```c\nstruct limine_mp_request {\n    uint64_t id[4];\n    uint64_t revision;\n    struct limine_mp_response *response;\n    uint64_t flags;\n};\n```\n\n* `flags` - Bit 0: Enable X2APIC, if possible. (x86-64 only)\n\n#### x86-64:\n\nResponse:\n\n```c\nstruct limine_mp_response {\n    uint64_t revision;\n    uint32_t flags;\n    uint32_t bsp_lapic_id;\n    uint64_t cpu_count;\n    struct limine_mp_info **cpus;\n};\n```\n\n* `flags` - Bit 0: X2APIC has been enabled.\n* `bsp_lapic_id` - The Local APIC ID of the bootstrap processor.\n* `cpu_count` - How many CPUs are present. It includes the bootstrap processor.\n* `cpus` - Pointer to an array of `cpu_count` pointers to\n`struct limine_mp_info` structures.\n\nNote: The presence of this request will prompt the bootloader to bootstrap\nthe secondary processors. This will not be done if this request is not present.\n\nNote: The MTRRs of APs will be synchronised by the bootloader to match\nthe BSP, as Intel SDM requires (Vol. 3A, 12.11.5).\n\n```c\nstruct limine_mp_info;\n\ntypedef void (*limine_goto_address)(struct limine_mp_info *);\n\nstruct limine_mp_info {\n    uint32_t processor_id;\n    uint32_t lapic_id;\n    uint64_t reserved;\n    limine_goto_address goto_address;\n    uint64_t extra_argument;\n};\n```\n\n* `processor_id` - ACPI Processor UID as specified by the MADT\n* `lapic_id` - Local APIC ID of the processor as specified by the MADT\n* `goto_address` - An atomic write to this field causes the parked CPU to\njump to the written address, on a 64KiB (or Stack Size Request size) stack. A pointer to the\n`struct limine_mp_info` structure of the CPU is passed in `RDI`. Other than\nthat, the CPU state will be the same as described for the bootstrap\nprocessor. This field is unused for the structure describing the bootstrap\nprocessor. For all CPUs, this field is guaranteed to be NULL when control is first passed\nto the bootstrap processor.\n* `extra_argument` - A free for use field.\n\n#### aarch64:\n\nResponse:\n\n```c\nstruct limine_mp_response {\n    uint64_t revision;\n    uint64_t flags;\n    uint64_t bsp_mpidr;\n    uint64_t cpu_count;\n    struct limine_mp_info **cpus;\n};\n```\n\n* `flags` - Always zero\n* `bsp_mpidr` - MPIDR of the bootstrap processor (as read from `MPIDR_EL1`, with Res1 masked off).\n* `cpu_count` - How many CPUs are present. It includes the bootstrap processor.\n* `cpus` - Pointer to an array of `cpu_count` pointers to\n`struct limine_mp_info` structures.\n\nNote: The presence of this request will prompt the bootloader to bootstrap\nthe secondary processors. This will not be done if this request is not present.\n\n```c\nstruct limine_mp_info;\n\ntypedef void (*limine_goto_address)(struct limine_mp_info *);\n\nstruct limine_mp_info {\n    uint32_t processor_id;\n    uint32_t reserved1;\n    uint64_t mpidr;\n    uint64_t reserved;\n    limine_goto_address goto_address;\n    uint64_t extra_argument;\n};\n```\n\n* `processor_id` - ACPI Processor UID as specified by the MADT (always 0 on non-ACPI systems)\n* `mpidr` - MPIDR of the processor as specified by the MADT or device tree\n* `goto_address` - An atomic write to this field causes the parked CPU to\njump to the written address, on a 64KiB (or Stack Size Request size) stack. A pointer to the\n`struct limine_mp_info` structure of the CPU is passed in `X0`. Other than\nthat, the CPU state will be the same as described for the bootstrap\nprocessor. This field is unused for the structure describing the bootstrap\nprocessor.\n* `extra_argument` - A free for use field.\n\n#### riscv64\n\nResponse:\n\n```c\nstruct limine_mp_response {\n    uint64_t revision;\n    uint64_t flags;\n    uint64_t bsp_hartid;\n    uint64_t cpu_count;\n    struct limine_mp_info **cpus;\n};\n```\n\n* `flags` - Always zero\n* `bsp_hartid` - Hart ID of the bootstrap processor as reported by the UEFI RISC-V Boot Protocol or the SBI.\n* `cpu_count` - How many CPUs are present. It includes the bootstrap processor.\n* `cpus` - Pointer to an array of `cpu_count` pointers to\n`struct limine_mp_info` structures.\n\nNote: The presence of this request will prompt the bootloader to bootstrap\nthe secondary processors. This will not be done if this request is not present.\n\n```c\nstruct limine_mp_info;\n\ntypedef void (*limine_goto_address)(struct limine_mp_info *);\n\nstruct limine_mp_info {\n    uint64_t processor_id;\n    uint64_t hartid;\n    uint64_t reserved;\n    limine_goto_address goto_address;\n    uint64_t extra_argument;\n};\n```\n\n* `processor_id` - ACPI Processor UID as specified by the MADT (always 0 on non-ACPI systems).\n* `hartid` - Hart ID of the processor as specified by the MADT or Device Tree.\n* `goto_address` - An atomic write to this field causes the parked CPU to\njump to the written address, on a 64KiB (or Stack Size Request size) stack. A pointer to the\n`struct limine_mp_info` structure of the CPU is passed in `x10`(`a0`). Other than\nthat, the CPU state will be the same as described for the bootstrap\nprocessor. This field is unused for the structure describing the bootstrap\nprocessor.\n* `extra_argument` - A free for use field.\n\n### RISC-V BSP Hart ID Feature\n\nID:\n```c\n#define LIMINE_RISCV_BSP_HARTID_REQUEST { LIMINE_COMMON_MAGIC, 0x1369359f025525f9, 0x2ff2a56178391bb6 }\n```\n\nRequest:\n```c\nstruct limine_riscv_bsp_hartid_request {\n    uint64_t id[4];\n    uint64_t revision;\n    LIMINE_PTR(struct limine_riscv_bsp_hartid_response *) response;\n};\n```\n\nResponse:\n```c\nstruct limine_riscv_bsp_hartid_response {\n    uint64_t revision;\n    uint64_t bsp_hartid;\n};\n```\n\n* `bsp_hartid` - The Hart ID of the boot processor.\nNote: This request contains the same information as `limine_mp_response.bsp_hartid`,\nbut doesn't boot up other APs.\n\n### Memory Map Feature\n\nID:\n```c\n#define LIMINE_MEMMAP_REQUEST { LIMINE_COMMON_MAGIC, 0x67cf3d9d378a806f, 0xe304acdfc50c3c62 }\n```\n\nRequest:\n```c\nstruct limine_memmap_request {\n    uint64_t id[4];\n    uint64_t revision;\n    struct limine_memmap_response *response;\n};\n```\n\nResponse:\n```c\nstruct limine_memmap_response {\n    uint64_t revision;\n    uint64_t entry_count;\n    struct limine_memmap_entry **entries;\n};\n```\n\n* `entry_count` - How many memory map entries are present.\n* `entries` - Pointer to an array of `entry_count` pointers to\n`struct limine_memmap_entry` structures.\n\n```c\n// Constants for `type`\n#define LIMINE_MEMMAP_USABLE                 0\n#define LIMINE_MEMMAP_RESERVED               1\n#define LIMINE_MEMMAP_ACPI_RECLAIMABLE       2\n#define LIMINE_MEMMAP_ACPI_NVS               3\n#define LIMINE_MEMMAP_BAD_MEMORY             4\n#define LIMINE_MEMMAP_BOOTLOADER_RECLAIMABLE 5\n#define LIMINE_MEMMAP_EXECUTABLE_AND_MODULES 6\n#define LIMINE_MEMMAP_FRAMEBUFFER            7\n\nstruct limine_memmap_entry {\n    uint64_t base;\n    uint64_t length;\n    uint64_t type;\n};\n```\n\nAll these memory entry types, besides usable and bootloader reclaimable,\nare meant to have an illustrative purpose only, and are not authoritative sources\nto be used as a means to find the addresses of the executable, modules, framebuffer, ACPI,\nor otherwise. Use the specific Limine features to do that, if available, or other\ndiscovery means.\n\nFor base revisions <= 2, memory between 0 and 0x1000 is never marked as usable memory.\n\nThe executable and modules loaded are not marked as usable memory, but as Executable/Modules.\n\nThe entries are guaranteed to be sorted by base address, lowest to highest.\n\nUsable and bootloader reclaimable entries are guaranteed to be 4096 byte aligned for\nboth base and length.\n\nUsable and bootloader reclaimable entries are guaranteed not to overlap with any other\nentry. To the contrary, all non-usable entries (including executable/modules) are\nnot guaranteed any alignment, nor is it guaranteed that they do not overlap\nother entries.\n\n### Entry Point Feature\n\nID:\n```c\n#define LIMINE_ENTRY_POINT_REQUEST { LIMINE_COMMON_MAGIC, 0x13d86c035a1cd3e1, 0x2b0caa89d8f3026a }\n```\n\nRequest:\n```c\ntypedef void (*limine_entry_point)(void);\n\nstruct limine_entry_point_request {\n    uint64_t id[4];\n    uint64_t revision;\n    struct limine_entry_point_response *response;\n    limine_entry_point entry;\n};\n```\n\n* `entry` - The requested entry point.\n\nResponse:\n```c\nstruct limine_entry_point_response {\n    uint64_t revision;\n};\n```\n\n### Executable File Feature\n\nID:\n```c\n#define LIMINE_EXECUTABLE_FILE_REQUEST { LIMINE_COMMON_MAGIC, 0xad97e90e83f1ed67, 0x31eb5d1c5ff23b69 }\n```\n\nRequest:\n```c\nstruct limine_executable_file_request {\n    uint64_t id[4];\n    uint64_t revision;\n    struct limine_executable_file_response *response;\n};\n```\n\nResponse:\n```c\nstruct limine_executable_file_response {\n    uint64_t revision;\n    struct limine_file *executable_file;\n};\n```\n\n* `executable_file` - Pointer to the `struct limine_file` structure (see below)\nfor the executable file.\n\n### Module Feature\n\nID:\n```c\n#define LIMINE_MODULE_REQUEST { LIMINE_COMMON_MAGIC, 0x3e7e279702be32af, 0xca1c4f3bd1280cee }\n```\n\nRequest:\n```c\n#define LIMINE_INTERNAL_MODULE_REQUIRED (1 << 0)\n#define LIMINE_INTERNAL_MODULE_COMPRESSED (1 << 1)\n\nstruct limine_internal_module {\n    const char *path;\n    const char *cmdline;\n    uint64_t flags;\n};\n\nstruct limine_module_request {\n    uint64_t id[4];\n    uint64_t revision;\n    struct limine_module_response *response;\n\n    /* Request revision 1 */\n    uint64_t internal_module_count;\n    struct limine_internal_module **internal_modules;\n};\n```\n\n* `internal_module_count` - How many internal modules are passed by the executable.\n* `internal_modules` - Pointer to an array of `internal_module_count` pointers to\n`struct limine_internal_module` structures.\n\nNote: Internal modules are honoured if the module response has revision >= 1.\n\nAs part of `struct limine_internal_module`:\n\n* `path` - Path to the module to load. This path is *relative* to the location of\nthe executable.\n* `cmdline` - Command line for the given module.\n* `flags` - Flags changing module loading behaviour:\n  - `LIMINE_INTERNAL_MODULE_REQUIRED`: Fail if the requested module is not found.\n  - `LIMINE_INTERNAL_MODULE_COMPRESSED`: Deprecated. Bootloader may not support it and panic instead (from Limine 8.x onwards). Alternatively: the module is GZ-compressed and should be decompressed by the bootloader. This is honoured if the response is revision 2 or greater.\n\nInternal Limine modules are guaranteed to be loaded *before* user-specified\n(configuration) modules, and thus they are guaranteed to appear before user-specified\nmodules in the `modules` array in the response.\n\nResponse:\n```c\nstruct limine_module_response {\n    uint64_t revision;\n    uint64_t module_count;\n    struct limine_file **modules;\n};\n```\n\n* `module_count` - How many modules are present.\n* `modules` - Pointer to an array of `module_count` pointers to\n`struct limine_file` structures (see below).\n\n### File Structure\n\n```c\nstruct limine_uuid {\n    uint32_t a;\n    uint16_t b;\n    uint16_t c;\n    uint8_t d[8];\n};\n\n#define LIMINE_MEDIA_TYPE_GENERIC 0\n#define LIMINE_MEDIA_TYPE_OPTICAL 1\n#define LIMINE_MEDIA_TYPE_TFTP 2\n\nstruct limine_file {\n    uint64_t revision;\n    void *address;\n    uint64_t size;\n    char *path;\n    char *cmdline;\n    uint32_t media_type;\n    uint32_t unused;\n    uint32_t tftp_ip;\n    uint32_t tftp_port;\n    uint32_t partition_index;\n    uint32_t mbr_disk_id;\n    struct limine_uuid gpt_disk_uuid;\n    struct limine_uuid gpt_part_uuid;\n    struct limine_uuid part_uuid;\n};\n```\n\n* `revision` - Revision of the `struct limine_file` structure.\n* `address` - The address of the file. This is always at least 4KiB aligned.\n* `size` - The size of the file.\n* `path` - The path of the file within the volume, with a leading slash.\n* `cmdline` - A command line associated with the file.\n* `media_type` - Type of media file resides on.\n* `tftp_ip` - If non-0, this is the IP of the TFTP server the file was loaded\nfrom.\n* `tftp_port` - Likewise, but port.\n* `partition_index` - 1-based partition index of the volume from which the\nfile was loaded. If 0, it means invalid or unpartitioned.\n* `mbr_disk_id` - If non-0, this is the ID of the disk the file was loaded\nfrom as reported in its MBR.\n* `gpt_disk_uuid` - If non-0, this is the UUID of the disk the file was\nloaded from as reported in its GPT.\n* `gpt_part_uuid` - If non-0, this is the UUID of the partition the file\nwas loaded from as reported in the GPT.\n* `part_uuid` - If non-0, this is the UUID of the filesystem of the partition\nthe file was loaded from.\n\n### RSDP Feature\n\nID:\n```c\n#define LIMINE_RSDP_REQUEST { LIMINE_COMMON_MAGIC, 0xc5e77b6b397e7b43, 0x27637845accdcf3c }\n```\n\nRequest:\n```c\nstruct limine_rsdp_request {\n    uint64_t id[4];\n    uint64_t revision;\n    struct limine_rsdp_response *response;\n};\n```\n\nResponse:\n```c\nstruct limine_rsdp_response {\n    uint64_t revision;\n    uint64_t address;\n};\n```\n\n* `address` - Address of the RSDP table. Physical for base revision >= 3.\n\n### SMBIOS Feature\n\nID:\n```c\n#define LIMINE_SMBIOS_REQUEST { LIMINE_COMMON_MAGIC, 0x9e9046f11e095391, 0xaa4a520fefbde5ee }\n```\n\nRequest:\n```c\nstruct limine_smbios_request {\n    uint64_t id[4];\n    uint64_t revision;\n    struct limine_smbios_response *response;\n};\n```\n\nResponse:\n```c\nstruct limine_smbios_response {\n    uint64_t revision;\n    uint64_t entry_32;\n    uint64_t entry_64;\n};\n```\n\n* `entry_32` - Address of the 32-bit SMBIOS entry point. NULL if not present. Physical for base revision >= 3.\n* `entry_64` - Address of the 64-bit SMBIOS entry point. NULL if not present. Physical for base revision >= 3.\n\n### EFI System Table Feature\n\nID:\n```c\n#define LIMINE_EFI_SYSTEM_TABLE_REQUEST { LIMINE_COMMON_MAGIC, 0x5ceba5163eaaf6d6, 0x0a6981610cf65fcc }\n```\n\nRequest:\n```c\nstruct limine_efi_system_table_request {\n    uint64_t id[4];\n    uint64_t revision;\n    struct limine_efi_system_table_response *response;\n};\n```\n\nResponse:\n```c\nstruct limine_efi_system_table_response {\n    uint64_t revision;\n    uint64_t address;\n};\n```\n\n* `address` - Address of EFI system table. Physical for base revision >= 3.\n\n### EFI Memory Map Feature\n\nID:\n```c\n#define LIMINE_EFI_MEMMAP_REQUEST { LIMINE_COMMON_MAGIC, 0x7df62a431d6872d5, 0xa4fcdfb3e57306c8 }\n```\n\nRequest:\n```c\nstruct limine_efi_memmap_request {\n    uint64_t id[4];\n    uint64_t revision;\n    struct limine_efi_memmap_response *response;\n};\n```\n\nResponse:\n```c\nstruct limine_efi_memmap_response {\n    uint64_t revision;\n    void *memmap;\n    uint64_t memmap_size;\n    uint64_t desc_size;\n    uint64_t desc_version;\n};\n```\n\n* `memmap` - Address (HHDM, in bootloader reclaimable memory) of the EFI memory map.\n* `memmap_size` - Size in bytes of the EFI memory map.\n* `desc_size` - EFI memory map descriptor size in bytes.\n* `desc_version` - Version of EFI memory map descriptors.\n\nNote: This feature provides data suitable for use with RT->SetVirtualAddressMap(), provided\nHHDM offset is subtracted from `memmap`.\n\n### Boot Time Feature\n\nID:\n```c\n#define LIMINE_BOOT_TIME_REQUEST { LIMINE_COMMON_MAGIC, 0x502746e184c088aa, 0xfbc5ec83e6327893 }\n```\n\nRequest:\n```c\nstruct limine_boot_time_request {\n    uint64_t id[4];\n    uint64_t revision;\n    struct limine_boot_time_response *response;\n};\n```\n\nResponse:\n```c\nstruct limine_boot_time_response {\n    uint64_t revision;\n    int64_t boot_time;\n};\n```\n\n* `boot_time` - The UNIX time on boot, in seconds, taken from the system RTC.\n\n### Executable Address Feature\n\nID:\n```c\n#define LIMINE_EXECUTABLE_ADDRESS_REQUEST { LIMINE_COMMON_MAGIC, 0x71ba76863cc55f63, 0xb2644a48c516a487 }\n```\n\nRequest:\n```c\nstruct limine_executable_address_request {\n    uint64_t id[4];\n    uint64_t revision;\n    struct limine_executable_address_response *response;\n};\n```\n\nResponse:\n```c\nstruct limine_executable_address_response {\n    uint64_t revision;\n    uint64_t physical_base;\n    uint64_t virtual_base;\n};\n```\n\n* `physical_base` - The physical base address of the executable.\n* `virtual_base` - The virtual base address of the executable.\n\n### Device Tree Blob Feature\n\nID:\n```c\n#define LIMINE_DTB_REQUEST { LIMINE_COMMON_MAGIC, 0xb40ddb48fb54bac7, 0x545081493f81ffb7 }\n```\n\nRequest:\n```c\nstruct limine_dtb_request {\n    uint64_t id[4];\n    uint64_t revision;\n    struct limine_dtb_response *response;\n};\n```\n\nResponse:\n```c\nstruct limine_dtb_response {\n    uint64_t revision;\n    void *dtb_ptr;\n};\n```\n\n* `dtb_ptr` - Virtual (HHDM) pointer to the device tree blob, in bootloader reclaimable memory.\n\nNote: If the DTB cannot be found, the response will *not* be generated.\n\nNote: Information contained in the `/chosen` node may not reflect the information\ngiven by bootloader tags, and as such the `/chosen` node properties should be ignored.\n\nNote: If the DTB contained `memory@...` nodes, they will get removed.\nExecutables may not rely on these nodes and should use the Memory Map feature instead.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.6416015625,
          "content": "# Limine\n\n<p align=\"center\">\n    <img src=\"https://github.com/limine-bootloader/limine/blob/trunk/logo.png?raw=true\" alt=\"Limine's logo\"/>\n</p>\n\n### What is Limine?\n\nLimine (pronounced as demonstrated [here](https://www.merriam-webster.com/dictionary/in%20limine))\nis a modern, advanced, portable, multiprotocol bootloader and boot manager, also used\nas the reference implementation for the [Limine boot protocol](PROTOCOL.md).\n\n### Community, Support, and Donations\n\n#### Donate\nIf you want to support the work I ([@mintsuki](https://github.com/mintsuki)) do on Limine, feel free to donate to me on Liberapay:\n<p><a href=\"https://liberapay.com/mintsuki/donate\"><img alt=\"Donate using Liberapay\" src=\"https://liberapay.com/assets/widgets/donate.svg\"></a></p>\n\nDonations welcome, but absolutely not mandatory!\n\n#### Community\nWe have a Matrix room at `#limine:matrix.org` (preferred), and a [Discord server](https://discord.gg/QEeZMz4) if you need support, info, or you just want to hang out with us.\n\n### Limine's boot menu\n\n![Reference screenshot](screenshot.png?raw=true \"Reference screenshot\")\n\n[Photo by Gundula Vogel](https://www.pexels.com/photo/ginger-cat-sitting-on-grass-25189639/)\n\n### Supported architectures\n* IA-32 (32-bit x86)\n* x86-64\n* aarch64 (arm64)\n* riscv64\n* loongarch64\n\n### Supported boot protocols\n* Linux\n* [Limine](PROTOCOL.md)\n* Multiboot 1\n* Multiboot 2\n* Chainloading\n\n### Supported partitioning schemes\n* MBR\n* GPT\n* Unpartitioned media\n\n### Supported filesystems\n* FAT12/16/32\n* ISO9660 (CDs/DVDs)\n* ext2/3/4 (NOTE: This is experimental and not supported. Maintainers wanted!)\n\nIf your filesystem isn't listed here, please read [the philosophy](PHILOSOPHY.md) first, especially before\nopening issues or pull requests related to this.\n\n### Minimum system requirements\nFor 32-bit x86 systems, support is only ensured starting with those with\nPentium Pro (i686) class CPUs.\n\nAll x86-64, aarch64, riscv64 and loongarch64 (UEFI) systems are supported.\n\n## Packaging status\n\nAll Limine releases since 7.x use [Semantic Versioning](https://semver.org/spec/v2.0.0.html) for their naming.\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/limine.svg?columns=3)](https://repology.org/project/limine/versions)\n\n## Binary releases\n\nFor convenience, for point releases, binaries are distributed. These binaries\nare shipped in the `-binary` branches and tags of this repository\n(see [branches](https://github.com/limine-bootloader/limine/branches/all) and\n[tags](https://github.com/limine-bootloader/limine/tags)).\n\nFor example, to clone the latest binary release of the `8.x` branch, one can do:\n```bash\ngit clone https://github.com/limine-bootloader/limine.git --branch=v8.x-binary --depth=1\n```\nor, to clone a specific binary point release (for example `8.7.0`):\n```bash\ngit clone https://github.com/limine-bootloader/limine.git --branch=v8.7.0-binary --depth=1\n```\n\nIn order to rebuild host utilities like `limine`, simply run `make` in the binary\nrelease directory.\n\nHost utility binaries are provided for Windows.\n\n## Building the bootloader\n\n*The following steps are not necessary if cloning a binary release. If so, skip to*\n*\"Installing Limine binaries\".*\n\n### Prerequisites\n\nIn order to build Limine, the following programs have to be installed:\ncommon UNIX tools (also known as `coreutils`),\n`GNU make`, `grep`, `sed`, `find`, `awk`, `gzip`, `nasm`, `mtools`\n(optional, necessary to build `limine-uefi-cd.bin`).\nFurthermore, `gcc` or `llvm/clang` must also be installed, alongside\nthe respective binutils.\n\n### Configure\n\nIf using a release tarball (recommended, see https://github.com/limine-bootloader/limine/releases),\nrun `./configure` directly.\n\nIf checking out from the repository, run `./bootstrap` first in order to download the\nnecessary dependencies and generate the configure script (`GNU autoconf` required).\n\n`./configure` takes arguments and environment variables; for more information on\nthese, run `./configure --help`.\n\n**`./configure` by default does not build any Limine port. Make sure to read the**\n**output of `./configure --help` and enable any or all ports!**\n\nLimine supports both in-tree and out-of-tree builds. Simply run the `configure`\nscript from the directory you wish to execute the build in. The following `make`\ncommands are supposed to be run inside the build directory.\n\n### Building Limine\n\nTo build Limine, run:\n```bash\nmake    # (or gmake where applicable)\n```\n\n## Installing Limine\n\nThis step will install Limine files to `share`, `include`, and\n`bin` directories in the specified prefix (default is `/usr/local`, see\n`./configure --help`, or the `PREFIX` variable if installing from a binary release).\n\nTo install Limine, run:\n```bash\nmake install    # (or gmake where applicable)\n```\n\n## Usage\n\nSee [USAGE.md](USAGE.md).\n\n## Acknowledgments\n\n[cc-runtime](https://github.com/osdev0/cc-runtime) (Apache License v2.0 with LLVM Exceptions) is used to provide runtime libgcc-like routines.\n\n[0BSD Freestanding C Headers](https://github.com/osdev0/freestnd-c-hdrs-0bsd) (0BSD License) provide GCC and Clang compatible freestanding C headers.\n\n[Nyu-EFI](https://github.com/osdev0/nyu-efi) (Intel Open Source License/BSD-2-Clause License/HP License) provides headers and build-time support for UEFI.\n\n[tinf](https://github.com/jibsen/tinf) (zlib License) is used in early x86 BIOS stages for GZIP decompression of stage2.\n\n[Flanterm](https://github.com/mintsuki/flanterm) (BSD-2-Clause License) is used for text related screen drawing.\n\n[stb_image](https://github.com/nothings/stb/blob/master/stb_image.h) (MIT License/Public Domain) is used for wallpaper image loading.\n\n[libfdt](https://git.kernel.org/pub/scm/utils/dtc/dtc.git) (BSD-2-Clause License) is used for manipulating Flat Device Trees.\n"
        },
        {
          "name": "USAGE.md",
          "type": "blob",
          "size": 4.521484375,
          "content": "# Usage\n\n### UEFI\nThe `BOOT*.EFI` files are valid EFI applications that can be simply copied to\nthe `/EFI/BOOT` directory of a FAT formatted EFI system partition. These files can\nbe installed there and coexist with a BIOS installation of Limine (see below) so\nthat the disk will be bootable on both BIOS and UEFI systems.\n\nThe boot device must contain the `limine.conf` files in\neither the root, `limine`, `boot`, or `boot/limine` directory of one of the\npartitions, formatted with a supported file system (the ESP partition is recommended).\n\n### Secure Boot\nLimine can be booted with secure boot if the executable is signed and the key used to\nsign it is added to the firmware's keychain. This should be done in combination with enrolling\nthe BLAKE2B hash of the Limine config file into the Limine EFI executable image itself for\nverification purposes.\nFor more information see the `limine enroll-config` program and [the philosophy](PHILOSOPHY.md).\n\n### BIOS/MBR\nIn order to install Limine on a MBR device (which can just be a raw image file),\nrun `limine bios-install` as such:\n\n```bash\nlimine bios-install <path to device/image>\n```\n\nThe boot device must contain the `limine-bios.sys` and `limine.conf` files in\neither the root, `limine`, `boot`, or `boot/limine` directory of one of the\npartitions, formatted with a supported file system.\n\n### BIOS/GPT\nIf using a GPT formatted device, there are 2 options one can follow for\ninstallation:\n* Specifying a dedicated stage 2 partition.\n* Letting `limine bios-install` attempt to embed stage 2 within GPT structures.\n\nIn case one wants to specify a stage 2 partition, create a partition on the GPT\ndevice of at least 32KiB in size, and pass the 1-based number of the partition\nto `limine bios-install` as a second argument; such as:\n\n```bash\nlimine bios-install <path to device/image> <1-based stage 2 partition number>\n```\n\nIn case one wants to let `limine bios-install` embed stage 2 within GPT's structures,\nsimply omit the partition number, and invoke `limine bios-install` the same as one\nwould do for an MBR partitioned device.\n\nThe boot device must contain the `limine-bios.sys` and `limine.conf` files in\neither the root, `limine`, `boot`, or `boot/limine` directory of one of the\npartitions, formatted with a supported file system.\n\n### BIOS/UEFI hybrid ISO creation\nIn order to create a hybrid ISO with Limine, place the\n`limine-uefi-cd.bin`, `limine-bios-cd.bin`, `limine-bios.sys`, and `limine.conf` files\ninto a directory which will serve as the root of the created ISO.\n(`limine-bios.sys` and `limine.conf` must either be in the root, `limine`, `boot`, or\n`boot/limine` directory; `limine-uefi-cd.bin` and `limine-bios-cd.bin` can reside\nanywhere).\n\nAfter that, create a `<ISO root directory>/EFI/BOOT` directory and copy the\nrelevant Limine EFI executables over (such as `BOOTX64.EFI`).\n\nPlace any other file you want to be on the final ISO in said directory, then\nrun:\n```\nxorriso -as mkisofs -R -r -J -b <relative path of limine-bios-cd.bin> \\\n        -no-emul-boot -boot-load-size 4 -boot-info-table -hfsplus \\\n        -apm-block-size 2048 --efi-boot <relative path of limine-uefi-cd.bin> \\\n        -efi-boot-part --efi-boot-image --protective-msdos-label \\\n        <root directory> -o image.iso\n```\n\n*Note: `xorriso` is required.*\n\nAnd do not forget to also run `limine bios-install` on the generated image:\n```\nlimine bios-install image.iso\n```\n\n`<relative path of limine-bios-cd.bin>` is the relative path of\n`limine-bios-cd.bin` inside the root directory.\nFor example, if it was copied in `<root directory>/boot/limine-bios-cd.bin`,\nit would be `boot/limine-bios-cd.bin`.\n\n`<relative path of limine-uefi-cd.bin>` is the relative path of\n`limine-uefi-cd.bin` inside the root directory.\nFor example, if it was copied in\n`<root directory>/boot/limine-uefi-cd.bin`, it would be\n`boot/limine-uefi-cd.bin`.\n\n### BIOS/PXE boot\nThe `limine-bios-pxe.bin` binary is a valid PXE boot image.\nIn order to boot Limine from PXE it is necessary to setup a DHCP server with\nsupport for PXE booting. This can either be accomplished using a single DHCP\nserver or your existing DHCP server and a proxy DHCP server such as dnsmasq.\n\n`limine.conf` and `limine-bios.sys` are expected to be on the server used for boot.\n\n### UEFI/PXE boot\nThe `BOOT*.EFI` files are compatible with UEFI PXE.\nThe steps needed to boot Limine are the same as with BIOS PXE,\nexcept that the `limine-bios.sys` file is not needed on the server.\n\n### Configuration\nThe `limine.conf` file contains Limine's configuration.\n\nMore info on the format of `limine.conf` can be found in [`CONFIG.md`](CONFIG.md).\n"
        },
        {
          "name": "bochsrc",
          "type": "blob",
          "size": 0.212890625,
          "content": "cpu: count=2, reset_on_triple_fault=0\nmemory: guest=1024, host=1024\nata0-master: type=disk, path=\"test.hdd\", mode=flat\nboot: c\nclock: sync=realtime, rtc_sync=1, time0=utc\nport_e9_hack: enabled=1\nmagic_break: enabled=1\n"
        },
        {
          "name": "bootstrap",
          "type": "blob",
          "size": 4.9443359375,
          "content": "#! /bin/sh\n\nset -ex\n\nsrcdir=\"$(dirname \"$0\")\"\ntest -z \"$srcdir\" && srcdir=.\n\n: \"${AUTORECONF:=autoreconf}\"\n: \"${AUTOMAKE:=automake}\"\n\ncd \"$srcdir\"\n\nAUXFILES=\"config.guess config.sub install-sh\"\n\nclone_repo_commit() {\n    if test -d \"$2/.git\"; then\n        git -C \"$2\" reset --hard\n        git -C \"$2\" clean -fd\n        if ! git -C \"$2\" checkout $3; then\n            rm -rf \"$2\"\n        fi\n    else\n        if test -d \"$2\"; then\n            set +x\n            echo \"error: '$2' is not a Git repository\"\n            exit 1\n        fi\n    fi\n    if ! test -d \"$2\"; then\n        git clone $1 \"$2\"\n        if ! git -C \"$2\" checkout $3; then\n            rm -rf \"$2\"\n            exit 1\n        fi\n    fi\n}\n\ndownload_by_hash() {\n    DOWNLOAD_COMMAND=\"curl -Lo\"\n    if ! command -v $DOWNLOAD_COMMAND >/dev/null 2>&1; then\n        DOWNLOAD_COMMAND=\"wget -O\"\n        if ! command -v $DOWNLOAD_COMMAND >/dev/null 2>&1; then\n            set +x\n            echo \"error: Neither curl nor wget found\"\n            exit 1\n        fi\n    fi\n    SHA256_COMMAND=\"sha256sum\"\n    if ! command -v $SHA256_COMMAND >/dev/null 2>&1; then\n        SHA256_COMMAND=\"sha256\"\n        if ! command -v $SHA256_COMMAND >/dev/null 2>&1; then\n            set +x\n            echo \"error: Cannot find sha256(sum) command\"\n            exit 1\n        fi\n    fi\n    if ! test -f \"$2\" || ! $SHA256_COMMAND \"$2\" | grep $3 >/dev/null 2>&1; then\n        rm -f \"$2\"\n        mkdir -p \"$2\" && rm -rf \"$2\"\n        $DOWNLOAD_COMMAND \"$2\" $1\n        if ! $SHA256_COMMAND \"$2\" | grep $3 >/dev/null 2>&1; then\n            set +x\n            echo \"error: Cannot download file '$2' by hash\"\n            echo \"incorrect hash:\"\n            $SHA256_COMMAND \"$2\"\n            rm -f \"$2\"\n            exit 1\n        fi\n    fi\n}\n\nif ! test -f version; then\n    clone_repo_commit \\\n        https://github.com/osdev0/freestnd-c-hdrs-0bsd.git \\\n        freestnd-c-hdrs-0bsd \\\n        a87c192f3eb66b0806740dc67325f9ad23fc2d0b\n\n    clone_repo_commit \\\n        https://github.com/osdev0/cc-runtime.git \\\n        cc-runtime \\\n        576a01179f3298a4795b92f42c088f9f8800b56b\n\n    download_by_hash \\\n        https://github.com/osdev0/freestanding-toolchain/raw/b285931385edc926decab5c69934af5c045bd2dd/freestanding-toolchain \\\n        build-aux/freestanding-toolchain \\\n        b280df87c6db0f6ca1dd0a48579e694b403cb0fc77cf6df1e2ddbe69a134b405\n    chmod +x build-aux/freestanding-toolchain\n\n    clone_repo_commit \\\n        https://github.com/osdev0/nyu-efi.git \\\n        nyu-efi \\\n        eede601b8a9134cb4b6de96d2c430e2424c1390c\n\n    clone_repo_commit \\\n        https://github.com/jibsen/tinf.git \\\n        tinf \\\n        57ffa1f1d5e3dde19011b2127bd26d01689b694b\n    mkdir -p decompressor/tinf\n    cp tinf/src/tinf.h tinf/src/tinflate.c tinf/src/tinfgzip.c decompressor/tinf/\n    patch -p0 < decompressor/tinf.patch\n    rm -f decompressor/tinf/*.orig\n\n    clone_repo_commit \\\n        https://github.com/mintsuki/flanterm.git \\\n        common/flanterm \\\n        6f4e92ed8f7202bda3a53e28fd527f2f997bbb5c\n\n    download_by_hash \\\n        https://github.com/nothings/stb/raw/5c205738c191bcb0abc65c4febfa9bd25ff35234/stb_image.h \\\n        common/lib/stb_image.h.nopatch \\\n        594c2fe35d49488b4382dbfaec8f98366defca819d916ac95becf3e75f4200b3\n    cp common/lib/stb_image.h.nopatch common/lib/stb_image.h\n    patch -p0 < common/stb_image.patch\n    rm -f common/lib/stb_image.h.orig\n\n    clone_repo_commit \\\n        https://git.kernel.org/pub/scm/utils/dtc/dtc.git \\\n        dtc \\\n        2d10aa2afe35527728db30b35ec491ecb6959e5c\n    rm -rf common/libfdt\n    cp -rp dtc/libfdt common/\n    find common/libfdt/ -type f -not -name '*.c' -not -name '*.h' -delete\nfi\n\n# Create timestamps file\nif test -d .git && git log -1 >/dev/null 2>&1; then\n    cat >timestamps <<EOF\nREGEN_DATE=\"$(git log -1 --pretty=%cd --date='format:%B %Y')\"\nSOURCE_DATE_EPOCH=\"$(git log -1 --pretty=%ct)\"\nSOURCE_DATE_EPOCH_TOUCH=\"$(git log -1 --pretty=%cI | head -c 16 | sed 's/-//g;s/T//g;s/://g')\"\nEOF\nelse\n    if ! test -f timestamps; then\n        cat >timestamps <<EOF\nREGEN_DATE=\"UNVERSIONED\"\nSOURCE_DATE_EPOCH=\"1546297200\"\nSOURCE_DATE_EPOCH_TOUCH=\"201901010000\"\nEOF\n    fi\nfi\n\nfor auxfile in $AUXFILES; do\n    rm -f build-aux/$auxfile\ndone\n\n$AUTORECONF -fvi -Wall\n\n# Older versions of autoreconf have a bug where they do not\n# install auxiliary files, sometimes... Check if that is the\n# case and work around...\nfor auxfile in $AUXFILES; do\n    if ! test -f build-aux/$auxfile; then\n        if ! $AUTOMAKE --print-libdir >/dev/null 2>&1; then\n            set +x\n            echo \"error: Broken autoreconf detected, but missing or broken automake.\"\n            echo \"       Please make sure automake is installed and working.\"\n            exit 1\n        fi\n        AUTOMAKE_LIBDIR=\"$($AUTOMAKE --print-libdir)\"\n        if test -z \"$AUTOMAKE_LIBDIR\"; then\n            # Assume `true` was passed as $AUTOMAKE\n            continue\n        fi\n        mkdir -p build-aux\n        cp -v \"$AUTOMAKE_LIBDIR/$auxfile\" build-aux/\n        chmod +x build-aux/$auxfile\n    fi\ndone\n"
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.h.in",
          "type": "blob",
          "size": 0.13671875,
          "content": "#ifndef __CONFIG_H__\n#define __CONFIG_H__\n\n#define LIMINE_VERSION \"@PACKAGE_VERSION@\"\n#define LIMINE_COPYRIGHT \"@LIMINE_COPYRIGHT@\"\n\n#endif\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 12.380859375,
          "content": "AC_INIT([Limine], [m4_esyscmd([./version.sh])], [https://github.com/limine-bootloader/limine/issues], [limine], [https://limine-bootloader.org/])\n\nAC_PREREQ([2.69])\n\nAC_CONFIG_AUX_DIR([build-aux])\n\nSRCDIR=\"$(cd \"$srcdir\" && pwd -P)\"\nBUILDDIR=\"$(pwd -P)\"\n\nAC_SUBST([SRCDIR])\nAC_SUBST([BUILDDIR])\n\n. \"$SRCDIR\"/timestamps\n\nAC_SUBST([REGEN_DATE])\nAC_SUBST([SOURCE_DATE_EPOCH])\nAC_SUBST([SOURCE_DATE_EPOCH_TOUCH])\n\nAC_CANONICAL_HOST\n\n# Portably convert relative paths into absolute paths.\nrel2abs() {\n    rel2abs_first=true\n    for i in $1; do\n        if test $rel2abs_first = true; then\n            case \"$i\" in\n                /*)\n                    printf \"%s\" \"$i\"\n                    ;;\n                */*)\n                    if test -d \"$(dirname \"$i\")\"; then\n                        printf \"%s\" \"$(cd \"$(dirname \"$i\")\" && pwd -P)/$(basename \"$i\")\"\n                    else\n                        printf \"false\"\n                    fi\n                    ;;\n                *)\n                    printf \"%s\" \"$i\"\n                    ;;\n            esac\n            rel2abs_first=false\n        else\n            printf \" %s\" \"$i\"\n        fi\n    done\n    printf \"\\n\"\n}\n\ntest \"x${CFLAGS+set}\" = \"x\" && CFLAGS='-g -O2 -pipe'\n\nAC_LANG([C])\nAC_PROG_CC\nCC=\"$(rel2abs \"$CC\")\"\n\nwerror_state=\"no\"\nAC_ARG_ENABLE([werror],\n    [AS_HELP_STRING([--enable-werror], [treat warnings as errors])],\n    [werror_state=\"$enableval\"])\nif test \"$werror_state\" = \"yes\"; then\n    AC_SUBST([WERROR_FLAG], [-Werror])\nelse\n    AC_SUBST([WERROR_FLAG], [-Wno-error])\nfi\n\nAC_PROG_MKDIR_P\nMKDIR_P=\"$(rel2abs \"$MKDIR_P\")\"\nAC_PROG_INSTALL\nINSTALL=\"$(rel2abs \"$INSTALL\")\"\nAC_PROG_SED\nSED=\"$(rel2abs \"$SED\")\"\nAC_PROG_GREP\nGREP=\"$(rel2abs \"$GREP\")\"\nAC_PROG_AWK\nAWK=\"$(rel2abs \"$AWK\")\"\n\nAC_CHECK_PROG([FIND_FOUND], [find], [yes])\nif ! test \"x$FIND_FOUND\" = \"xyes\"; then\n    AC_MSG_ERROR([find not found, please install find before configuring])\nfi\n\n# $1 - UPPERCASEVAR, $2 - default program\nAC_DEFUN([GET_PROG_FROM_TOOLCHAIN], [\n    AC_ARG_VAR([$1], [$2 command @<:@default: $2@:>@])\n\n    if ! test -z \"$$1\"; then\n        first_elem=\"$(echo \"$$1\" | cut -f 1 -d \" \")\"\n        case \"$first_elem\" in\n            */*)\n                if test -f \"$first_elem\" && test -x \"$first_elem\"; then\n                    $1_USER_FOUND=yes\n                fi\n                ;;\n            *)\n                AC_CHECK_PROG([$1_USER_FOUND], [$$1], [yes])\n                ;;\n        esac\n\n        if ! test \"x$$1_USER_FOUND\" = \"xyes\"; then\n            AC_MSG_ERROR([$2 not found, please install $2 before configuring])\n        fi\n    else\n        AC_CHECK_TOOL([$1], [$2], [:])\n        if test \"x$$1\" = \"x:\"; then\n            AC_MSG_ERROR([$2 not found, please install $2 or set $1 to a valid command])\n        fi\n    fi\n\n    $1=\"$(rel2abs \"$$1\")\"\n])\n\nGET_PROG_FROM_TOOLCHAIN([STRIP], [strip])\n\nAC_CHECK_HEADERS([stdint.h stddef.h stdbool.h limits.h inttypes.h stdio.h stdlib.h string.h],\n    [], [AC_MSG_ERROR([required header not found])])\n\nAC_ARG_VAR([TOOLCHAIN_FOR_TARGET], [alternative toolchain prefix for Limine (or 'llvm', or 'gnu')])\nAC_ARG_VAR([AR_FOR_TARGET], [archiver command for Limine])\nAC_ARG_VAR([CC_FOR_TARGET], [C compiler command for Limine])\nAC_ARG_VAR([LD_FOR_TARGET], [linker command for Limine])\nAC_ARG_VAR([OBJCOPY_FOR_TARGET], [objcopy command for Limine])\nAC_ARG_VAR([OBJDUMP_FOR_TARGET], [objdump command for Limine])\nAC_ARG_VAR([READELF_FOR_TARGET], [readelf command for Limine])\n\nrm -rf toolchain-files\n\nBUILD_ALL=\"no\"\n\nAC_ARG_ENABLE([all],\n    [AS_HELP_STRING([--enable-all], [enable ALL ports and targets])],\n    [BUILD_ALL=\"$enableval\"])\n\nBUILD_BIOS_CD=\"$BUILD_ALL\"\n\nAC_ARG_ENABLE([bios-cd],\n    [AS_HELP_STRING([--enable-bios-cd], [enable building the x86 BIOS CD image])],\n    [BUILD_BIOS_CD=\"$enableval\"])\n\nAC_SUBST([BUILD_BIOS_CD])\n\nBUILD_BIOS_PXE=\"$BUILD_ALL\"\n\nAC_ARG_ENABLE([bios-pxe],\n    [AS_HELP_STRING([--enable-bios-pxe], [enable building the x86 BIOS PXE image])],\n    [BUILD_BIOS_PXE=\"$enableval\"])\n\nAC_SUBST([BUILD_BIOS_PXE])\n\nBUILD_BIOS=\"$BUILD_ALL\"\n\nAC_ARG_ENABLE([bios],\n    [AS_HELP_STRING([--enable-bios], [enable building the x86 BIOS port])],\n    [BUILD_BIOS=\"$enableval\"])\n\nif test \"x$BUILD_BIOS\" = \"xno\"; then\n    if test \"x$BUILD_BIOS_CD\" = \"xyes\"; then\n        BUILD_BIOS=\"yes\"\n    fi\n    if test \"x$BUILD_BIOS_PXE\" = \"xyes\"; then\n        BUILD_BIOS=\"yes\"\n    fi\nfi\n\nif test \"x$BUILD_BIOS\" = \"xno\"; then\n    BUILD_BIOS=\"\"\nelse\n    $MKDIR_P toolchain-files\n    CC=\"$CC\" \\\n        ARCHITECTURE=i686 \\\n        FREESTANDING_TOOLCHAIN_SUFFIX=\"_FOR_TARGET\" \\\n        FREESTANDING_TOOLCHAIN=\"$TOOLCHAIN_FOR_TARGET\" \\\n        WANT_FREESTANDING_AR=yes \\\n        FREESTANDING_AR=\"$AR_FOR_TARGET\" \\\n        WANT_FREESTANDING_CC=yes \\\n        FREESTANDING_CC=\"$CC_FOR_TARGET\" \\\n        WANT_FREESTANDING_LD=yes \\\n        FREESTANDING_LD=\"$LD_FOR_TARGET\" \\\n        WANT_FREESTANDING_OBJCOPY=yes \\\n        FREESTANDING_OBJCOPY=\"$OBJCOPY_FOR_TARGET\" \\\n        WANT_FREESTANDING_OBJDUMP=yes \\\n        FREESTANDING_OBJDUMP=\"$OBJDUMP_FOR_TARGET\" \\\n        WANT_FREESTANDING_READELF=yes \\\n        FREESTANDING_READELF=\"$READELF_FOR_TARGET\" \\\n        \"$SRCDIR/build-aux/freestanding-toolchain\" 2>\"toolchain-files/bios-i686-toolchain.mk\" || exit 1\n    BUILD_BIOS=\"limine-bios\"\n    NEED_NASM=yes\n    NEED_GZIP=yes\nfi\n\nAC_SUBST([BUILD_BIOS])\n\nBUILD_UEFI_IA32=\"$BUILD_ALL\"\n\nAC_ARG_ENABLE([uefi-ia32],\n    [AS_HELP_STRING([--enable-uefi-ia32], [enable building the IA-32 UEFI port])],\n    [BUILD_UEFI_IA32=\"$enableval\"])\n\nif test \"x$BUILD_UEFI_IA32\" = \"xno\"; then\n    BUILD_UEFI_IA32=\"\"\nelse\n    $MKDIR_P toolchain-files\n    CC=\"$CC\" \\\n        ARCHITECTURE=i686 \\\n        FREESTANDING_TOOLCHAIN_SUFFIX=\"_FOR_TARGET\" \\\n        FREESTANDING_TOOLCHAIN=\"$TOOLCHAIN_FOR_TARGET\" \\\n        WANT_FREESTANDING_AR=yes \\\n        FREESTANDING_AR=\"$AR_FOR_TARGET\" \\\n        WANT_FREESTANDING_CC=yes \\\n        FREESTANDING_CC=\"$CC_FOR_TARGET\" \\\n        WANT_FREESTANDING_LD=yes \\\n        FREESTANDING_LD=\"$LD_FOR_TARGET\" \\\n        WANT_FREESTANDING_OBJCOPY=yes \\\n        FREESTANDING_OBJCOPY=\"$OBJCOPY_FOR_TARGET\" \\\n        WANT_FREESTANDING_OBJDUMP=yes \\\n        FREESTANDING_OBJDUMP=\"$OBJDUMP_FOR_TARGET\" \\\n        \"$SRCDIR/build-aux/freestanding-toolchain\" 2>\"toolchain-files/uefi-i686-toolchain.mk\" || exit 1\n    BUILD_UEFI_IA32=\"limine-uefi-ia32\"\n    NEED_NASM=yes\nfi\n\nAC_SUBST([BUILD_UEFI_IA32])\n\nBUILD_UEFI_X86_64=\"$BUILD_ALL\"\n\nAC_ARG_ENABLE([uefi-x86-64],\n    [AS_HELP_STRING([--enable-uefi-x86-64], [enable building the x86-64 UEFI port])],\n    [BUILD_UEFI_X86_64=\"$enableval\"])\n\nif test \"x$BUILD_UEFI_X86_64\" = \"xno\"; then\n    BUILD_UEFI_X86_64=\"\"\nelse\n    $MKDIR_P toolchain-files\n    CC=\"$CC\" \\\n        ARCHITECTURE=x86_64 \\\n        FREESTANDING_TOOLCHAIN_SUFFIX=\"_FOR_TARGET\" \\\n        FREESTANDING_TOOLCHAIN=\"$TOOLCHAIN_FOR_TARGET\" \\\n        WANT_FREESTANDING_AR=yes \\\n        FREESTANDING_AR=\"$AR_FOR_TARGET\" \\\n        WANT_FREESTANDING_CC=yes \\\n        FREESTANDING_CC=\"$CC_FOR_TARGET\" \\\n        WANT_FREESTANDING_LD=yes \\\n        FREESTANDING_LD=\"$LD_FOR_TARGET\" \\\n        WANT_FREESTANDING_OBJCOPY=yes \\\n        FREESTANDING_OBJCOPY=\"$OBJCOPY_FOR_TARGET\" \\\n        WANT_FREESTANDING_OBJDUMP=yes \\\n        FREESTANDING_OBJDUMP=\"$OBJDUMP_FOR_TARGET\" \\\n        \"$SRCDIR/build-aux/freestanding-toolchain\" 2>\"toolchain-files/uefi-x86_64-toolchain.mk\" || exit 1\n    BUILD_UEFI_X86_64=\"limine-uefi-x86-64\"\n    NEED_NASM=yes\nfi\n\nAC_SUBST([BUILD_UEFI_X86_64])\n\nBUILD_UEFI_AARCH64=\"$BUILD_ALL\"\n\nAC_ARG_ENABLE([uefi-aarch64],\n    [AS_HELP_STRING([--enable-uefi-aarch64], [enable building the aarch64 UEFI port])],\n    [BUILD_UEFI_AARCH64=\"$enableval\"])\n\nif test \"x$BUILD_UEFI_AARCH64\" = \"xno\"; then\n    BUILD_UEFI_AARCH64=\"\"\nelse\n    mkdir -p toolchain-files\n    CC=\"$CC\" \\\n        ARCHITECTURE=aarch64 \\\n        FREESTANDING_TOOLCHAIN_SUFFIX=\"_FOR_TARGET\" \\\n        FREESTANDING_TOOLCHAIN=\"$TOOLCHAIN_FOR_TARGET\" \\\n        WANT_FREESTANDING_AR=yes \\\n        FREESTANDING_AR=\"$AR_FOR_TARGET\" \\\n        WANT_FREESTANDING_CC=yes \\\n        FREESTANDING_CC=\"$CC_FOR_TARGET\" \\\n        WANT_FREESTANDING_LD=yes \\\n        FREESTANDING_LD=\"$LD_FOR_TARGET\" \\\n        WANT_FREESTANDING_OBJCOPY=yes \\\n        FREESTANDING_OBJCOPY=\"$OBJCOPY_FOR_TARGET\" \\\n        WANT_FREESTANDING_OBJDUMP=yes \\\n        FREESTANDING_OBJDUMP=\"$OBJDUMP_FOR_TARGET\" \\\n        \"$SRCDIR/build-aux/freestanding-toolchain\" 2>\"toolchain-files/uefi-aarch64-toolchain.mk\" || exit 1\n    BUILD_UEFI_AARCH64=\"limine-uefi-aarch64\"\nfi\n\nAC_SUBST([BUILD_UEFI_AARCH64])\n\nBUILD_UEFI_RISCV64=\"$BUILD_ALL\"\n\nAC_ARG_ENABLE([uefi-riscv64],\n    [AS_HELP_STRING([--enable-uefi-riscv64], [enable building the riscv64 UEFI port])],\n    [BUILD_UEFI_RISCV64=\"$enableval\"])\n\nif test \"x$BUILD_UEFI_RISCV64\" = \"xno\"; then\n    BUILD_UEFI_RISCV64=\"\"\nelse\n    mkdir -p toolchain-files\n    CC=\"$CC\" \\\n        ARCHITECTURE=riscv64 \\\n        FREESTANDING_TOOLCHAIN_SUFFIX=\"_FOR_TARGET\" \\\n        FREESTANDING_TOOLCHAIN=\"$TOOLCHAIN_FOR_TARGET\" \\\n        WANT_FREESTANDING_AR=yes \\\n        FREESTANDING_AR=\"$AR_FOR_TARGET\" \\\n        WANT_FREESTANDING_CC=yes \\\n        FREESTANDING_CC=\"$CC_FOR_TARGET\" \\\n        WANT_FREESTANDING_LD=yes \\\n        FREESTANDING_LD=\"$LD_FOR_TARGET\" \\\n        WANT_FREESTANDING_OBJCOPY=yes \\\n        FREESTANDING_OBJCOPY=\"$OBJCOPY_FOR_TARGET\" \\\n        WANT_FREESTANDING_OBJDUMP=yes \\\n        FREESTANDING_OBJDUMP=\"$OBJDUMP_FOR_TARGET\" \\\n        \"$SRCDIR/build-aux/freestanding-toolchain\" 2>\"toolchain-files/uefi-riscv64-toolchain.mk\" || exit 1\n    BUILD_UEFI_RISCV64=\"limine-uefi-riscv64\"\nfi\n\nAC_SUBST([BUILD_UEFI_RISCV64])\n\nBUILD_UEFI_LOONGARCH64=\"$BUILD_ALL\"\n\nAC_ARG_ENABLE([uefi-loongarch64],\n    [AS_HELP_STRING([--enable-uefi-loongarch64], [enable building the loongarch64 UEFI port])],\n    [BUILD_UEFI_LOONGARCH64=\"$enableval\"])\n\nif test \"x$BUILD_UEFI_LOONGARCH64\" = \"xno\"; then\n    BUILD_UEFI_LOONGARCH64=\"\"\nelse\n    mkdir -p toolchain-files\n    CC=\"$CC\" \\\n        ARCHITECTURE=loongarch64 \\\n        FREESTANDING_TOOLCHAIN_SUFFIX=\"_FOR_TARGET\" \\\n        FREESTANDING_TOOLCHAIN=\"$TOOLCHAIN_FOR_TARGET\" \\\n        WANT_FREESTANDING_AR=yes \\\n        FREESTANDING_AR=\"$AR_FOR_TARGET\" \\\n        WANT_FREESTANDING_CC=yes \\\n        FREESTANDING_CC=\"$CC_FOR_TARGET\" \\\n        WANT_FREESTANDING_LD=yes \\\n        FREESTANDING_LD=\"$LD_FOR_TARGET\" \\\n        WANT_FREESTANDING_OBJCOPY=yes \\\n        FREESTANDING_OBJCOPY=\"$OBJCOPY_FOR_TARGET\" \\\n        WANT_FREESTANDING_OBJDUMP=yes \\\n        FREESTANDING_OBJDUMP=\"$OBJDUMP_FOR_TARGET\" \\\n        \"$SRCDIR/build-aux/freestanding-toolchain\" 2>\"toolchain-files/uefi-loongarch64-toolchain.mk\" || exit 1\n    BUILD_UEFI_LOONGARCH64=\"limine-uefi-loongarch64\"\nfi\n\nAC_SUBST([BUILD_UEFI_LOONGARCH64])\n\nBUILD_UEFI_CD=\"$BUILD_ALL\"\n\nAC_ARG_ENABLE([uefi-cd],\n    [AS_HELP_STRING([--enable-uefi-cd], [enable building limine-uefi-cd.bin])],\n    [BUILD_UEFI_CD=\"$enableval\"])\n\nif ! test \"x$BUILD_UEFI_CD\" = \"xno\"; then\n    AC_CHECK_PROG([MTOOLS_FOUND], [mcopy], [yes])\n    if ! test \"x$MTOOLS_FOUND\" = \"xyes\"; then\n        if test \"x$BUILD_UEFI_CD\" = \"xyes\"; then\n            AC_MSG_ERROR([mtools not found, install mtools to build limine-uefi-cd.bin])\n        fi\n        AC_MSG_WARN([mtools not found, install mtools to build limine-uefi-cd.bin])\n        BUILD_UEFI_CD=\"no\"\n    fi\nfi\n\nAC_SUBST([BUILD_UEFI_CD])\n\nif test \"x$NEED_NASM\" = \"xyes\"; then\n    AC_CHECK_PROG([NASM_FOUND], [nasm], [yes])\n    if ! test \"x$NASM_FOUND\" = \"xyes\"; then\n        AC_MSG_ERROR([nasm not found, please install nasm before configuring])\n    fi\nfi\n\nif test \"x$NEED_GZIP\" = \"xyes\"; then\n    AC_CHECK_PROG([GZIP_FOUND], [gzip], [yes])\n    if ! test \"x$GZIP_FOUND\" = \"xyes\"; then\n        AC_MSG_ERROR([gzip not found, please install gzip before configuring])\n    fi\nfi\n\nBORROWED_CFLAGS=\"\"\nfor cflag in $CFLAGS; do\n    case $cflag in\n        -O*|-pipe|-g|-f*-prefix-map*)\n            BORROWED_CFLAGS=\"$BORROWED_CFLAGS $cflag\"\n            ;;\n    esac\ndone\n\nAC_ARG_VAR([CFLAGS_FOR_TARGET], [C flags for Limine])\ntest \"x${CFLAGS_FOR_TARGET+set}\" = \"x\" && CFLAGS_FOR_TARGET=\"$BORROWED_CFLAGS\"\n\nAC_ARG_VAR([CPPFLAGS_FOR_TARGET], [C preprocessor flags for Limine])\ntest \"x${CPPFLAGS_FOR_TARGET+set}\" = \"x\" && CPPFLAGS_FOR_TARGET=\"\"\n\nAC_ARG_VAR([LDFLAGS_FOR_TARGET], [linker flags for Limine])\ntest \"x${LDFLAGS_FOR_TARGET+set}\" = \"x\" && LDFLAGS_FOR_TARGET=\"\"\n\nAC_ARG_VAR([NASMFLAGS_FOR_TARGET], [nasm flags for Limine])\ntest \"x${NASMFLAGS_FOR_TARGET+set}\" = \"x\" && NASMFLAGS_FOR_TARGET=\"-F dwarf -g\"\n\nLIMINE_COPYRIGHT=$($GREP Copyright \"$SRCDIR/COPYING\")\nAC_SUBST([LIMINE_COPYRIGHT])\n\nAC_PREFIX_DEFAULT([/usr/local])\n\nif ! test -f limine.h; then\n    cp \"$SRCDIR/limine.h\" ./\nfi\n\nAC_CONFIG_FILES([man/man1/limine.1 GNUmakefile config.h])\nAC_OUTPUT\n"
        },
        {
          "name": "decompressor",
          "type": "tree",
          "content": null
        },
        {
          "name": "host",
          "type": "tree",
          "content": null
        },
        {
          "name": "limine.h",
          "type": "blob",
          "size": 18.16796875,
          "content": "/* BSD Zero Clause License */\n\n/* Copyright (C) 2022-2025 mintsuki and contributors.\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY\n * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION\n * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\n * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n#ifndef LIMINE_H\n#define LIMINE_H 1\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#include <stdint.h>\n\n/* Misc */\n\n#ifdef LIMINE_NO_POINTERS\n#  define LIMINE_PTR(TYPE) uint64_t\n#else\n#  define LIMINE_PTR(TYPE) TYPE\n#endif\n\n#ifndef LIMINE_API_REVISION\n#  define LIMINE_API_REVISION 0\n#endif\n\n#if LIMINE_API_REVISION > 2\n#  error \"limine.h API revision unsupported\"\n#endif\n\n#ifdef __GNUC__\n#  define LIMINE_DEPRECATED __attribute__((__deprecated__))\n#  define LIMINE_DEPRECATED_IGNORE_START \\\n    _Pragma(\"GCC diagnostic push\") \\\n    _Pragma(\"GCC diagnostic ignored \\\"-Wdeprecated-declarations\\\"\")\n#  define LIMINE_DEPRECATED_IGNORE_END \\\n    _Pragma(\"GCC diagnostic pop\")\n#else\n#  define LIMINE_DEPRECATED\n#  define LIMINE_DEPRECATED_IGNORE_START\n#  define LIMINE_DEPRECATED_IGNORE_END\n#endif\n\n#define LIMINE_REQUESTS_START_MARKER \\\n    uint64_t limine_requests_start_marker[4] = { 0xf6b8f4b39de7d1ae, 0xfab91a6940fcb9cf, \\\n                                                 0x785c6ed015d3e316, 0x181e920a7852b9d9 };\n#define LIMINE_REQUESTS_END_MARKER \\\n    uint64_t limine_requests_end_marker[2] = { 0xadc0e0531bb10d03, 0x9572709f31764c62 };\n\n#define LIMINE_REQUESTS_DELIMITER LIMINE_REQUESTS_END_MARKER\n\n#define LIMINE_BASE_REVISION(N) \\\n    uint64_t limine_base_revision[3] = { 0xf9562b2d5c95a6c8, 0x6a7b384944536bdc, (N) };\n\n#define LIMINE_BASE_REVISION_SUPPORTED (limine_base_revision[2] == 0)\n\n#define LIMINE_LOADED_BASE_REV_VALID (limine_base_revision[1] != 0x6a7b384944536bdc)\n#define LIMINE_LOADED_BASE_REVISION (limine_base_revision[1])\n\n#define LIMINE_COMMON_MAGIC 0xc7b1dd30df4c8b88, 0x0a82e883a194f07b\n\nstruct limine_uuid {\n    uint32_t a;\n    uint16_t b;\n    uint16_t c;\n    uint8_t d[8];\n};\n\n#define LIMINE_MEDIA_TYPE_GENERIC 0\n#define LIMINE_MEDIA_TYPE_OPTICAL 1\n#define LIMINE_MEDIA_TYPE_TFTP 2\n\nstruct limine_file {\n    uint64_t revision;\n    LIMINE_PTR(void *) address;\n    uint64_t size;\n    LIMINE_PTR(char *) path;\n    LIMINE_PTR(char *) cmdline;\n    uint32_t media_type;\n    uint32_t unused;\n    uint32_t tftp_ip;\n    uint32_t tftp_port;\n    uint32_t partition_index;\n    uint32_t mbr_disk_id;\n    struct limine_uuid gpt_disk_uuid;\n    struct limine_uuid gpt_part_uuid;\n    struct limine_uuid part_uuid;\n};\n\n/* Boot info */\n\n#define LIMINE_BOOTLOADER_INFO_REQUEST { LIMINE_COMMON_MAGIC, 0xf55038d8e2a1202f, 0x279426fcf5f59740 }\n\nstruct limine_bootloader_info_response {\n    uint64_t revision;\n    LIMINE_PTR(char *) name;\n    LIMINE_PTR(char *) version;\n};\n\nstruct limine_bootloader_info_request {\n    uint64_t id[4];\n    uint64_t revision;\n    LIMINE_PTR(struct limine_bootloader_info_response *) response;\n};\n\n/* Firmware type */\n\n#define LIMINE_FIRMWARE_TYPE_REQUEST { LIMINE_COMMON_MAGIC, 0x8c2f75d90bef28a8, 0x7045a4688eac00c3 }\n\n#define LIMINE_FIRMWARE_TYPE_X86BIOS 0\n#define LIMINE_FIRMWARE_TYPE_UEFI32 1\n#define LIMINE_FIRMWARE_TYPE_UEFI64 2\n#define LIMINE_FIRMWARE_TYPE_SBI 3\n\nstruct limine_firmware_type_response {\n    uint64_t revision;\n    uint64_t firmware_type;\n};\n\nstruct limine_firmware_type_request {\n    uint64_t id[4];\n    uint64_t revision;\n    LIMINE_PTR(struct limine_firmware_type_response *) response;\n};\n\n/* Stack size */\n\n#define LIMINE_STACK_SIZE_REQUEST { LIMINE_COMMON_MAGIC, 0x224ef0460a8e8926, 0xe1cb0fc25f46ea3d }\n\nstruct limine_stack_size_response {\n    uint64_t revision;\n};\n\nstruct limine_stack_size_request {\n    uint64_t id[4];\n    uint64_t revision;\n    LIMINE_PTR(struct limine_stack_size_response *) response;\n    uint64_t stack_size;\n};\n\n/* HHDM */\n\n#define LIMINE_HHDM_REQUEST { LIMINE_COMMON_MAGIC, 0x48dcf1cb8ad2b852, 0x63984e959a98244b }\n\nstruct limine_hhdm_response {\n    uint64_t revision;\n    uint64_t offset;\n};\n\nstruct limine_hhdm_request {\n    uint64_t id[4];\n    uint64_t revision;\n    LIMINE_PTR(struct limine_hhdm_response *) response;\n};\n\n/* Framebuffer */\n\n#define LIMINE_FRAMEBUFFER_REQUEST { LIMINE_COMMON_MAGIC, 0x9d5827dcd881dd75, 0xa3148604f6fab11b }\n\n#define LIMINE_FRAMEBUFFER_RGB 1\n\nstruct limine_video_mode {\n    uint64_t pitch;\n    uint64_t width;\n    uint64_t height;\n    uint16_t bpp;\n    uint8_t memory_model;\n    uint8_t red_mask_size;\n    uint8_t red_mask_shift;\n    uint8_t green_mask_size;\n    uint8_t green_mask_shift;\n    uint8_t blue_mask_size;\n    uint8_t blue_mask_shift;\n};\n\nstruct limine_framebuffer {\n    LIMINE_PTR(void *) address;\n    uint64_t width;\n    uint64_t height;\n    uint64_t pitch;\n    uint16_t bpp;\n    uint8_t memory_model;\n    uint8_t red_mask_size;\n    uint8_t red_mask_shift;\n    uint8_t green_mask_size;\n    uint8_t green_mask_shift;\n    uint8_t blue_mask_size;\n    uint8_t blue_mask_shift;\n    uint8_t unused[7];\n    uint64_t edid_size;\n    LIMINE_PTR(void *) edid;\n    /* Response revision 1 */\n    uint64_t mode_count;\n    LIMINE_PTR(struct limine_video_mode **) modes;\n};\n\nstruct limine_framebuffer_response {\n    uint64_t revision;\n    uint64_t framebuffer_count;\n    LIMINE_PTR(struct limine_framebuffer **) framebuffers;\n};\n\nstruct limine_framebuffer_request {\n    uint64_t id[4];\n    uint64_t revision;\n    LIMINE_PTR(struct limine_framebuffer_response *) response;\n};\n\n/* Terminal */\n\n#define LIMINE_TERMINAL_REQUEST { LIMINE_COMMON_MAGIC, 0xc8ac59310c2b0844, 0xa68d0c7265d38878 }\n\n#define LIMINE_TERMINAL_CB_DEC 10\n#define LIMINE_TERMINAL_CB_BELL 20\n#define LIMINE_TERMINAL_CB_PRIVATE_ID 30\n#define LIMINE_TERMINAL_CB_STATUS_REPORT 40\n#define LIMINE_TERMINAL_CB_POS_REPORT 50\n#define LIMINE_TERMINAL_CB_KBD_LEDS 60\n#define LIMINE_TERMINAL_CB_MODE 70\n#define LIMINE_TERMINAL_CB_LINUX 80\n\n#define LIMINE_TERMINAL_CTX_SIZE ((uint64_t)(-1))\n#define LIMINE_TERMINAL_CTX_SAVE ((uint64_t)(-2))\n#define LIMINE_TERMINAL_CTX_RESTORE ((uint64_t)(-3))\n#define LIMINE_TERMINAL_FULL_REFRESH ((uint64_t)(-4))\n\n/* Response revision 1 */\n#define LIMINE_TERMINAL_OOB_OUTPUT_GET ((uint64_t)(-10))\n#define LIMINE_TERMINAL_OOB_OUTPUT_SET ((uint64_t)(-11))\n\n#define LIMINE_TERMINAL_OOB_OUTPUT_OCRNL (1 << 0)\n#define LIMINE_TERMINAL_OOB_OUTPUT_OFDEL (1 << 1)\n#define LIMINE_TERMINAL_OOB_OUTPUT_OFILL (1 << 2)\n#define LIMINE_TERMINAL_OOB_OUTPUT_OLCUC (1 << 3)\n#define LIMINE_TERMINAL_OOB_OUTPUT_ONLCR (1 << 4)\n#define LIMINE_TERMINAL_OOB_OUTPUT_ONLRET (1 << 5)\n#define LIMINE_TERMINAL_OOB_OUTPUT_ONOCR (1 << 6)\n#define LIMINE_TERMINAL_OOB_OUTPUT_OPOST (1 << 7)\n\nLIMINE_DEPRECATED_IGNORE_START\n\nstruct LIMINE_DEPRECATED limine_terminal;\n\ntypedef void (*limine_terminal_write)(struct limine_terminal *, const char *, uint64_t);\ntypedef void (*limine_terminal_callback)(struct limine_terminal *, uint64_t, uint64_t, uint64_t, uint64_t);\n\nstruct LIMINE_DEPRECATED limine_terminal {\n    uint64_t columns;\n    uint64_t rows;\n    LIMINE_PTR(struct limine_framebuffer *) framebuffer;\n};\n\nstruct LIMINE_DEPRECATED limine_terminal_response {\n    uint64_t revision;\n    uint64_t terminal_count;\n    LIMINE_PTR(struct limine_terminal **) terminals;\n    LIMINE_PTR(limine_terminal_write) write;\n};\n\nstruct LIMINE_DEPRECATED limine_terminal_request {\n    uint64_t id[4];\n    uint64_t revision;\n    LIMINE_PTR(struct limine_terminal_response *) response;\n    LIMINE_PTR(limine_terminal_callback) callback;\n};\n\nLIMINE_DEPRECATED_IGNORE_END\n\n/* Paging mode */\n\n#define LIMINE_PAGING_MODE_REQUEST { LIMINE_COMMON_MAGIC, 0x95c1a0edab0944cb, 0xa4e5cb3842f7488a }\n\n#if defined (__x86_64__) || defined (__i386__)\n#define LIMINE_PAGING_MODE_X86_64_4LVL 0\n#define LIMINE_PAGING_MODE_X86_64_5LVL 1\n#define LIMINE_PAGING_MODE_MIN LIMINE_PAGING_MODE_X86_64_4LVL\n#define LIMINE_PAGING_MODE_DEFAULT LIMINE_PAGING_MODE_X86_64_4LVL\n#elif defined (__aarch64__)\n#define LIMINE_PAGING_MODE_AARCH64_4LVL 0\n#define LIMINE_PAGING_MODE_AARCH64_5LVL 1\n#define LIMINE_PAGING_MODE_MIN LIMINE_PAGING_MODE_AARCH64_4LVL\n#define LIMINE_PAGING_MODE_DEFAULT LIMINE_PAGING_MODE_AARCH64_4LVL\n#elif defined (__riscv) && (__riscv_xlen == 64)\n#define LIMINE_PAGING_MODE_RISCV_SV39 0\n#define LIMINE_PAGING_MODE_RISCV_SV48 1\n#define LIMINE_PAGING_MODE_RISCV_SV57 2\n#define LIMINE_PAGING_MODE_MIN LIMINE_PAGING_MODE_RISCV_SV39\n#define LIMINE_PAGING_MODE_DEFAULT LIMINE_PAGING_MODE_RISCV_SV48\n#elif defined (__loongarch__) && (__loongarch_grlen == 64)\n#define LIMINE_PAGING_MODE_LOONGARCH64_4LVL 0\n#define LIMINE_PAGING_MODE_MIN LIMINE_PAGING_MODE_LOONGARCH64_4LVL\n#define LIMINE_PAGING_MODE_DEFAULT LIMINE_PAGING_MODE_LOONGARCH64_4LVL\n#else\n#error Unknown architecture\n#endif\n\nstruct limine_paging_mode_response {\n    uint64_t revision;\n    uint64_t mode;\n};\n\nstruct limine_paging_mode_request {\n    uint64_t id[4];\n    uint64_t revision;\n    LIMINE_PTR(struct limine_paging_mode_response *) response;\n    uint64_t mode;\n    uint64_t max_mode;\n    uint64_t min_mode;\n};\n\n/* 5-level paging */\n\n#define LIMINE_5_LEVEL_PAGING_REQUEST { LIMINE_COMMON_MAGIC, 0x94469551da9b3192, 0xebe5e86db7382888 }\n\nLIMINE_DEPRECATED_IGNORE_START\n\nstruct LIMINE_DEPRECATED limine_5_level_paging_response {\n    uint64_t revision;\n};\n\nstruct LIMINE_DEPRECATED limine_5_level_paging_request {\n    uint64_t id[4];\n    uint64_t revision;\n    LIMINE_PTR(struct limine_5_level_paging_response *) response;\n};\n\nLIMINE_DEPRECATED_IGNORE_END\n\n/* MP */\n\n#if LIMINE_API_REVISION >= 1\n#  define LIMINE_MP_REQUEST { LIMINE_COMMON_MAGIC, 0x95a67b819a1b857e, 0xa0b61b723b6a73e0 }\n#  define LIMINE_MP(TEXT) limine_mp_##TEXT\n#else\n#  define LIMINE_SMP_REQUEST { LIMINE_COMMON_MAGIC, 0x95a67b819a1b857e, 0xa0b61b723b6a73e0 }\n#  define LIMINE_MP(TEXT) limine_smp_##TEXT\n#endif\n\nstruct LIMINE_MP(info);\n\ntypedef void (*limine_goto_address)(struct LIMINE_MP(info) *);\n\n#if defined (__x86_64__) || defined (__i386__)\n\n#if LIMINE_API_REVISION >= 1\n#  define LIMINE_MP_X2APIC (1 << 0)\n#else\n#  define LIMINE_SMP_X2APIC (1 << 0)\n#endif\n\nstruct LIMINE_MP(info) {\n    uint32_t processor_id;\n    uint32_t lapic_id;\n    uint64_t reserved;\n    LIMINE_PTR(limine_goto_address) goto_address;\n    uint64_t extra_argument;\n};\n\nstruct LIMINE_MP(response) {\n    uint64_t revision;\n    uint32_t flags;\n    uint32_t bsp_lapic_id;\n    uint64_t cpu_count;\n    LIMINE_PTR(struct LIMINE_MP(info) **) cpus;\n};\n\n#elif defined (__aarch64__)\n\nstruct LIMINE_MP(info) {\n    uint32_t processor_id;\n    uint32_t reserved1;\n    uint64_t mpidr;\n    uint64_t reserved;\n    LIMINE_PTR(limine_goto_address) goto_address;\n    uint64_t extra_argument;\n};\n\nstruct LIMINE_MP(response) {\n    uint64_t revision;\n    uint64_t flags;\n    uint64_t bsp_mpidr;\n    uint64_t cpu_count;\n    LIMINE_PTR(struct LIMINE_MP(info) **) cpus;\n};\n\n#elif defined (__riscv) && (__riscv_xlen == 64)\n\nstruct LIMINE_MP(info) {\n    uint64_t processor_id;\n    uint64_t hartid;\n    uint64_t reserved;\n    LIMINE_PTR(limine_goto_address) goto_address;\n    uint64_t extra_argument;\n};\n\nstruct LIMINE_MP(response) {\n    uint64_t revision;\n    uint64_t flags;\n    uint64_t bsp_hartid;\n    uint64_t cpu_count;\n    LIMINE_PTR(struct LIMINE_MP(info) **) cpus;\n};\n\n#elif defined (__loongarch__) && (__loongarch_grlen == 64)\n\nstruct LIMINE_MP(info) {\n    uint64_t reserved;\n};\n\nstruct LIMINE_MP(response) {\n    uint64_t cpu_count;\n    LIMINE_PTR(struct LIMINE_MP(info) **) cpus;\n};\n\n#else\n#error Unknown architecture\n#endif\n\nstruct LIMINE_MP(request) {\n    uint64_t id[4];\n    uint64_t revision;\n    LIMINE_PTR(struct LIMINE_MP(response) *) response;\n    uint64_t flags;\n};\n\n/* Memory map */\n\n#define LIMINE_MEMMAP_REQUEST { LIMINE_COMMON_MAGIC, 0x67cf3d9d378a806f, 0xe304acdfc50c3c62 }\n\n#define LIMINE_MEMMAP_USABLE                 0\n#define LIMINE_MEMMAP_RESERVED               1\n#define LIMINE_MEMMAP_ACPI_RECLAIMABLE       2\n#define LIMINE_MEMMAP_ACPI_NVS               3\n#define LIMINE_MEMMAP_BAD_MEMORY             4\n#define LIMINE_MEMMAP_BOOTLOADER_RECLAIMABLE 5\n#if LIMINE_API_REVISION >= 2\n#  define LIMINE_MEMMAP_EXECUTABLE_AND_MODULES 6\n#else\n#  define LIMINE_MEMMAP_KERNEL_AND_MODULES 6\n#endif\n#define LIMINE_MEMMAP_FRAMEBUFFER            7\n\nstruct limine_memmap_entry {\n    uint64_t base;\n    uint64_t length;\n    uint64_t type;\n};\n\nstruct limine_memmap_response {\n    uint64_t revision;\n    uint64_t entry_count;\n    LIMINE_PTR(struct limine_memmap_entry **) entries;\n};\n\nstruct limine_memmap_request {\n    uint64_t id[4];\n    uint64_t revision;\n    LIMINE_PTR(struct limine_memmap_response *) response;\n};\n\n/* Entry point */\n\n#define LIMINE_ENTRY_POINT_REQUEST { LIMINE_COMMON_MAGIC, 0x13d86c035a1cd3e1, 0x2b0caa89d8f3026a }\n\ntypedef void (*limine_entry_point)(void);\n\nstruct limine_entry_point_response {\n    uint64_t revision;\n};\n\nstruct limine_entry_point_request {\n    uint64_t id[4];\n    uint64_t revision;\n    LIMINE_PTR(struct limine_entry_point_response *) response;\n    LIMINE_PTR(limine_entry_point) entry;\n};\n\n/* Executable File */\n\n#if LIMINE_API_REVISION >= 2\n#  define LIMINE_EXECUTABLE_FILE_REQUEST { LIMINE_COMMON_MAGIC, 0xad97e90e83f1ed67, 0x31eb5d1c5ff23b69 }\n#else\n#  define LIMINE_KERNEL_FILE_REQUEST { LIMINE_COMMON_MAGIC, 0xad97e90e83f1ed67, 0x31eb5d1c5ff23b69 }\n#endif\n\n#if LIMINE_API_REVISION >= 2\nstruct limine_executable_file_response {\n#else\nstruct limine_kernel_file_response {\n#endif\n    uint64_t revision;\n#if LIMINE_API_REVISION >= 2\n    LIMINE_PTR(struct limine_file *) executable_file;\n#else\n    LIMINE_PTR(struct limine_file *) kernel_file;\n#endif\n};\n\n#if LIMINE_API_REVISION >= 2\nstruct limine_executable_file_request {\n#else\nstruct limine_kernel_file_request {\n#endif\n    uint64_t id[4];\n    uint64_t revision;\n#if LIMINE_API_REVISION >= 2\n    LIMINE_PTR(struct limine_executable_file_response *) response;\n#else\n    LIMINE_PTR(struct limine_kernel_file_response *) response;\n#endif\n};\n\n/* Module */\n\n#define LIMINE_MODULE_REQUEST { LIMINE_COMMON_MAGIC, 0x3e7e279702be32af, 0xca1c4f3bd1280cee }\n\n#define LIMINE_INTERNAL_MODULE_REQUIRED (1 << 0)\n#define LIMINE_INTERNAL_MODULE_COMPRESSED (1 << 1)\n\nstruct limine_internal_module {\n    LIMINE_PTR(const char *) path;\n    LIMINE_PTR(const char *) cmdline;\n    uint64_t flags;\n};\n\nstruct limine_module_response {\n    uint64_t revision;\n    uint64_t module_count;\n    LIMINE_PTR(struct limine_file **) modules;\n};\n\nstruct limine_module_request {\n    uint64_t id[4];\n    uint64_t revision;\n    LIMINE_PTR(struct limine_module_response *) response;\n\n    /* Request revision 1 */\n    uint64_t internal_module_count;\n    LIMINE_PTR(struct limine_internal_module **) internal_modules;\n};\n\n/* RSDP */\n\n#define LIMINE_RSDP_REQUEST { LIMINE_COMMON_MAGIC, 0xc5e77b6b397e7b43, 0x27637845accdcf3c }\n\nstruct limine_rsdp_response {\n    uint64_t revision;\n#if LIMINE_API_REVISION >= 1\n    uint64_t address;\n#else\n    LIMINE_PTR(void *) address;\n#endif\n};\n\nstruct limine_rsdp_request {\n    uint64_t id[4];\n    uint64_t revision;\n    LIMINE_PTR(struct limine_rsdp_response *) response;\n};\n\n/* SMBIOS */\n\n#define LIMINE_SMBIOS_REQUEST { LIMINE_COMMON_MAGIC, 0x9e9046f11e095391, 0xaa4a520fefbde5ee }\n\nstruct limine_smbios_response {\n    uint64_t revision;\n#if LIMINE_API_REVISION >= 1\n    uint64_t entry_32;\n    uint64_t entry_64;\n#else\n    LIMINE_PTR(void *) entry_32;\n    LIMINE_PTR(void *) entry_64;\n#endif\n};\n\nstruct limine_smbios_request {\n    uint64_t id[4];\n    uint64_t revision;\n    LIMINE_PTR(struct limine_smbios_response *) response;\n};\n\n/* EFI system table */\n\n#define LIMINE_EFI_SYSTEM_TABLE_REQUEST { LIMINE_COMMON_MAGIC, 0x5ceba5163eaaf6d6, 0x0a6981610cf65fcc }\n\nstruct limine_efi_system_table_response {\n    uint64_t revision;\n#if LIMINE_API_REVISION >= 1\n    uint64_t address;\n#else\n    LIMINE_PTR(void *) address;\n#endif\n};\n\nstruct limine_efi_system_table_request {\n    uint64_t id[4];\n    uint64_t revision;\n    LIMINE_PTR(struct limine_efi_system_table_response *) response;\n};\n\n/* EFI memory map */\n\n#define LIMINE_EFI_MEMMAP_REQUEST { LIMINE_COMMON_MAGIC, 0x7df62a431d6872d5, 0xa4fcdfb3e57306c8 }\n\nstruct limine_efi_memmap_response {\n    uint64_t revision;\n    LIMINE_PTR(void *) memmap;\n    uint64_t memmap_size;\n    uint64_t desc_size;\n    uint64_t desc_version;\n};\n\nstruct limine_efi_memmap_request {\n    uint64_t id[4];\n    uint64_t revision;\n    LIMINE_PTR(struct limine_efi_memmap_response *) response;\n};\n\n/* Boot time */\n\n#define LIMINE_BOOT_TIME_REQUEST { LIMINE_COMMON_MAGIC, 0x502746e184c088aa, 0xfbc5ec83e6327893 }\n\nstruct limine_boot_time_response {\n    uint64_t revision;\n    int64_t boot_time;\n};\n\nstruct limine_boot_time_request {\n    uint64_t id[4];\n    uint64_t revision;\n    LIMINE_PTR(struct limine_boot_time_response *) response;\n};\n\n/* Executable address */\n\n#if LIMINE_API_REVISION >= 2\n#  define LIMINE_EXECUTABLE_ADDRESS_REQUEST { LIMINE_COMMON_MAGIC, 0x71ba76863cc55f63, 0xb2644a48c516a487 }\n#else\n#  define LIMINE_KERNEL_ADDRESS_REQUEST { LIMINE_COMMON_MAGIC, 0x71ba76863cc55f63, 0xb2644a48c516a487 }\n#endif\n\n#if LIMINE_API_REVISION >= 2\nstruct limine_executable_address_response {\n#else\nstruct limine_kernel_address_response {\n#endif\n    uint64_t revision;\n    uint64_t physical_base;\n    uint64_t virtual_base;\n};\n\n#if LIMINE_API_REVISION >= 2\nstruct limine_executable_address_request {\n#else\nstruct limine_kernel_address_request {\n#endif\n    uint64_t id[4];\n    uint64_t revision;\n#if LIMINE_API_REVISION >= 2\n    LIMINE_PTR(struct limine_executable_address_response *) response;\n#else\n    LIMINE_PTR(struct limine_kernel_address_response *) response;\n#endif\n};\n\n/* Device Tree Blob */\n\n#define LIMINE_DTB_REQUEST { LIMINE_COMMON_MAGIC, 0xb40ddb48fb54bac7, 0x545081493f81ffb7 }\n\nstruct limine_dtb_response {\n    uint64_t revision;\n    LIMINE_PTR(void *) dtb_ptr;\n};\n\nstruct limine_dtb_request {\n    uint64_t id[4];\n    uint64_t revision;\n    LIMINE_PTR(struct limine_dtb_response *) response;\n};\n\n/* RISC-V Boot Hart ID */\n\n#define LIMINE_RISCV_BSP_HARTID_REQUEST { LIMINE_COMMON_MAGIC, 0x1369359f025525f9, 0x2ff2a56178391bb6 }\n\nstruct limine_riscv_bsp_hartid_response {\n    uint64_t revision;\n    uint64_t bsp_hartid;\n};\n\nstruct limine_riscv_bsp_hartid_request {\n    uint64_t id[4];\n    uint64_t revision;\n    LIMINE_PTR(struct limine_riscv_bsp_hartid_response *) response;\n};\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n"
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 0.7373046875,
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "screenshot.png",
          "type": "blob",
          "size": 962.451171875,
          "content": null
        },
        {
          "name": "stage1",
          "type": "tree",
          "content": null
        },
        {
          "name": "test.mk",
          "type": "blob",
          "size": 13.3017578125,
          "content": ".PHONY: test-clean\ntest-clean:\n\t$(MAKE) -C test -f test.mk clean\n\trm -rf test_image test.hdd test.iso\n\novmf-x64:\n\t$(MKDIR_P) ovmf-x64\n\tcurl -Lo ovmf-x64/OVMF_CODE.fd https://github.com/osdev0/edk2-ovmf-nightly/releases/latest/download/ovmf-code-x86_64.fd\n\tcurl -Lo ovmf-x64/OVMF_VARS.fd https://github.com/osdev0/edk2-ovmf-nightly/releases/latest/download/ovmf-vars-x86_64.fd\n\novmf-aa64:\n\t$(MKDIR_P) ovmf-aa64\n\tcurl -Lo ovmf-aa64/OVMF_CODE.fd https://github.com/osdev0/edk2-ovmf-nightly/releases/latest/download/ovmf-code-aarch64.fd\n\tcurl -Lo ovmf-aa64/OVMF_VARS.fd https://github.com/osdev0/edk2-ovmf-nightly/releases/latest/download/ovmf-vars-aarch64.fd\n\tdd if=/dev/zero of=ovmf-aa64/OVMF_CODE.fd bs=1 count=0 seek=67108864 2>/dev/null\n\tdd if=/dev/zero of=ovmf-aa64/OVMF_VARS.fd bs=1 count=0 seek=67108864 2>/dev/null\n\novmf-rv64:\n\t$(MKDIR_P) ovmf-rv64\n\tcurl -Lo ovmf-rv64/OVMF_CODE.fd https://github.com/osdev0/edk2-ovmf-nightly/releases/latest/download/ovmf-code-riscv64.fd\n\tcurl -Lo ovmf-rv64/OVMF_VARS.fd https://github.com/osdev0/edk2-ovmf-nightly/releases/latest/download/ovmf-vars-riscv64.fd\n\tdd if=/dev/zero of=ovmf-rv64/OVMF_CODE.fd bs=1 count=0 seek=33554432 2>/dev/null\n\tdd if=/dev/zero of=ovmf-rv64/OVMF_VARS.fd bs=1 count=0 seek=33554432 2>/dev/null\n\novmf-ia32:\n\t$(MKDIR_P) ovmf-ia32\n\tcurl -Lo ovmf-ia32/OVMF_CODE.fd https://github.com/osdev0/edk2-ovmf-nightly/releases/latest/download/ovmf-code-ia32.fd\n\tcurl -Lo ovmf-ia32/OVMF_VARS.fd https://github.com/osdev0/edk2-ovmf-nightly/releases/latest/download/ovmf-vars-ia32.fd\n\novmf-loongarch64:\n\t$(MKDIR_P) ovmf-loongarch64\n\tcurl -Lo ovmf-loongarch64/OVMF_CODE.fd https://github.com/osdev0/edk2-ovmf-nightly/releases/latest/download/ovmf-code-loongarch64.fd\n\tcurl -Lo ovmf-loongarch64/OVMF_VARS.fd https://github.com/osdev0/edk2-ovmf-nightly/releases/latest/download/ovmf-vars-loongarch64.fd\n\n.PHONY: test.hdd\ntest.hdd:\n\trm -f test.hdd\n\tdd if=/dev/zero bs=1M count=0 seek=64 of=test.hdd\n\tPATH=$$PATH:/usr/sbin:/sbin parted -s test.hdd mklabel gpt\n\tPATH=$$PATH:/usr/sbin:/sbin parted -s test.hdd mkpart primary 2048s 100%\n\n.PHONY: mbrtest.hdd\nmbrtest.hdd:\n\trm -f mbrtest.hdd\n\tdd if=/dev/zero bs=1M count=0 seek=64 of=mbrtest.hdd\n\techo -e \"o\\nn\\np\\n1\\n2048\\n\\nt\\n6\\na\\nw\\n\" | fdisk mbrtest.hdd -H 16 -S 63\n\n.PHONY: ext2-test\next2-test:\n\t$(MAKE) test-clean\n\t$(MAKE) test.hdd\n\t$(MAKE) limine-bios\n\t$(MAKE) limine\n\t$(MAKE) -C test -f test.mk TOOLCHAIN_FILE='$(call SHESCAPE,$(BUILDDIR))/toolchain-files/uefi-x86_64-toolchain.mk'\n\trm -rf test_image/\n\tmkdir test_image\n\tsudo losetup -Pf --show test.hdd > loopback_dev\n\tsudo partprobe `cat loopback_dev`\n\tsudo mkfs.ext2 `cat loopback_dev`p1\n\tsudo mount `cat loopback_dev`p1 test_image\n\tsudo mkdir test_image/boot\n\tsudo cp -rv $(BINDIR)/* test_image/boot/\n\tsudo cp -rv test/* test_image/boot/\n\tsync\n\tsudo umount test_image/\n\tsudo losetup -d `cat loopback_dev`\n\trm -rf test_image loopback_dev\n\t$(BINDIR)/limine bios-install test.hdd\n\tqemu-system-x86_64 -net none -smp 4   -hda test.hdd -debugcon stdio\n\n.PHONY: fat12-test\nfat12-test:\n\t$(MAKE) test-clean\n\t$(MAKE) test.hdd\n\t$(MAKE) limine-bios\n\t$(MAKE) limine\n\t$(MAKE) -C test -f test.mk TOOLCHAIN_FILE='$(call SHESCAPE,$(BUILDDIR))/toolchain-files/uefi-x86_64-toolchain.mk'\n\trm -rf test_image/\n\tmkdir test_image\n\tsudo losetup -Pf --show test.hdd > loopback_dev\n\tsudo partprobe `cat loopback_dev`\n\tsudo mkfs.fat -F 12 `cat loopback_dev`p1\n\tsudo mount `cat loopback_dev`p1 test_image\n\tsudo mkdir test_image/boot\n\tsudo cp -rv $(BINDIR)/* test_image/boot/\n\tsudo cp -rv test/* test_image/boot/\n\tsync\n\tsudo umount test_image/\n\tsudo losetup -d `cat loopback_dev`\n\trm -rf test_image loopback_dev\n\t$(BINDIR)/limine bios-install test.hdd\n\tqemu-system-x86_64 -net none -smp 4   -hda test.hdd -debugcon stdio\n\n.PHONY: fat16-test\nfat16-test:\n\t$(MAKE) test-clean\n\t$(MAKE) test.hdd\n\t$(MAKE) limine-bios\n\t$(MAKE) limine\n\t$(MAKE) -C test -f test.mk TOOLCHAIN_FILE='$(call SHESCAPE,$(BUILDDIR))/toolchain-files/uefi-x86_64-toolchain.mk'\n\trm -rf test_image/\n\tmkdir test_image\n\tsudo losetup -Pf --show test.hdd > loopback_dev\n\tsudo partprobe `cat loopback_dev`\n\tsudo mkfs.fat -F 16 `cat loopback_dev`p1\n\tsudo mount `cat loopback_dev`p1 test_image\n\tsudo mkdir test_image/boot\n\tsudo cp -rv $(BINDIR)/* test_image/boot/\n\tsudo cp -rv test/* test_image/boot/\n\tsync\n\tsudo umount test_image/\n\tsudo losetup -d `cat loopback_dev`\n\trm -rf test_image loopback_dev\n\t$(BINDIR)/limine bios-install test.hdd\n\tqemu-system-x86_64 -net none -smp 4   -hda test.hdd -debugcon stdio\n\n.PHONY: legacy-fat16-test\nlegacy-fat16-test:\n\t$(MAKE) test-clean\n\t$(MAKE) mbrtest.hdd\n\tfdisk -l mbrtest.hdd\n\t$(MAKE) limine-bios\n\t$(MAKE) limine\n\t$(MAKE) -C test -f test.mk TOOLCHAIN_FILE='$(call SHESCAPE,$(BUILDDIR))/toolchain-files/uefi-x86_64-toolchain.mk'\n\trm -rf test_image/\n\tmkdir test_image\n\tsudo losetup -Pf --show mbrtest.hdd > loopback_dev\n\tsudo partprobe `cat loopback_dev`\n\tsudo mkfs.fat -F 16 `cat loopback_dev`p1\n\tsudo mount `cat loopback_dev`p1 test_image\n\tsudo mkdir test_image/boot\n\tsudo cp -rv $(BINDIR)/* test_image/boot/\n\tsudo cp -rv test/* test_image/boot/\n\tsync\n\tsudo umount test_image/\n\tsudo losetup -d `cat loopback_dev`\n\trm -rf test_image loopback_dev\n\t$(BINDIR)/limine bios-install mbrtest.hdd\n\tqemu-system-i386 -cpu pentium2 -m 16M -M isapc -net none   -hda mbrtest.hdd -debugcon stdio\n\n.PHONY: fat32-test\nfat32-test:\n\t$(MAKE) test-clean\n\t$(MAKE) test.hdd\n\t$(MAKE) limine-bios\n\t$(MAKE) limine\n\t$(MAKE) -C test -f test.mk TOOLCHAIN_FILE='$(call SHESCAPE,$(BUILDDIR))/toolchain-files/uefi-x86_64-toolchain.mk'\n\trm -rf test_image/\n\tmkdir test_image\n\tsudo losetup -Pf --show test.hdd > loopback_dev\n\tsudo partprobe `cat loopback_dev`\n\tsudo mkfs.fat -F 32 `cat loopback_dev`p1\n\tsudo mount `cat loopback_dev`p1 test_image\n\tsudo mkdir test_image/boot\n\tsudo cp -rv $(BINDIR)/* test_image/boot/\n\tsudo cp -rv test/* test_image/boot/\n\tsync\n\tsudo umount test_image/\n\tsudo losetup -d `cat loopback_dev`\n\trm -rf test_image loopback_dev\n\t$(BINDIR)/limine bios-install test.hdd\n\tqemu-system-x86_64 -net none -smp 4   -hda test.hdd -debugcon stdio\n\n.PHONY: iso9660-test\niso9660-test:\n\t$(MAKE) test-clean\n\t$(MAKE) test.hdd\n\t$(MAKE) limine-bios\n\t$(MAKE) -C test -f test.mk TOOLCHAIN_FILE='$(call SHESCAPE,$(BUILDDIR))/toolchain-files/uefi-x86_64-toolchain.mk'\n\trm -rf test_image/\n\t$(MKDIR_P) test_image/boot\n\tcp -rv $(BINDIR)/* test_image/boot/\n\tcp -rv test/* test_image/boot/\n\txorriso -as mkisofs -b boot/limine-bios-cd.bin -no-emul-boot -boot-load-size 4 -boot-info-table test_image/ -o test.iso\n\tqemu-system-x86_64 -net none -smp 4   -cdrom test.iso -debugcon stdio\n\n.PHONY: full-hybrid-test\nfull-hybrid-test:\n\t$(MAKE) ovmf-x64\n\t$(MAKE) ovmf-ia32\n\t$(MAKE) test-clean\n\t$(MAKE) all\n\t$(MAKE) -C test -f test.mk TOOLCHAIN_FILE='$(call SHESCAPE,$(BUILDDIR))/toolchain-files/uefi-x86_64-toolchain.mk'\n\trm -rf test_image/\n\t$(MKDIR_P) test_image/boot\n\tcp -rv $(BINDIR)/* test_image/boot/\n\tcp -rv test/* test_image/boot/\n\t$(MKDIR_P) test_image/EFI/BOOT\n\tcp -v $(BINDIR)/BOOT*.EFI test_image/EFI/BOOT/\n\txorriso -as mkisofs -R -r -J -b boot/limine-bios-cd.bin -no-emul-boot -boot-load-size 4 -boot-info-table -hfsplus -apm-block-size 2048 --efi-boot boot/limine-uefi-cd.bin -efi-boot-part --efi-boot-image --protective-msdos-label test_image/ -o test.iso\n\t$(BINDIR)/limine bios-install test.iso\n\tqemu-system-x86_64 -m 512M -M q35 -drive if=pflash,unit=0,format=raw,file=ovmf-x64/OVMF_CODE.fd,readonly=on -net none -smp 4   -cdrom test.iso -debugcon stdio\n\tqemu-system-x86_64 -m 512M -M q35 -drive if=pflash,unit=0,format=raw,file=ovmf-x64/OVMF_CODE.fd,readonly=on -net none -smp 4   -hda test.iso -debugcon stdio\n\tqemu-system-x86_64 -m 512M -M q35 -drive if=pflash,unit=0,format=raw,file=ovmf-ia32/OVMF_CODE.fd,readonly=on -net none -smp 4   -cdrom test.iso -debugcon stdio\n\tqemu-system-x86_64 -m 512M -M q35 -drive if=pflash,unit=0,format=raw,file=ovmf-ia32/OVMF_CODE.fd,readonly=on -net none -smp 4   -hda test.iso -debugcon stdio\n\tqemu-system-x86_64 -m 512M -M q35 -net none -smp 4   -cdrom test.iso -debugcon stdio\n\tqemu-system-x86_64 -m 512M -M q35 -net none -smp 4   -hda test.iso -debugcon stdio\n\n.PHONY: pxe-test\npxe-test:\n\t$(MAKE) test-clean\n\t$(MAKE) limine-bios\n\t$(MAKE) -C test -f test.mk TOOLCHAIN_FILE='$(call SHESCAPE,$(BUILDDIR))/toolchain-files/uefi-x86_64-toolchain.mk'\n\trm -rf test_image/\n\t$(MKDIR_P) test_image/boot\n\tcp -rv $(BINDIR)/* test_image/boot/\n\tcp -rv test/* test_image/boot/\n\tqemu-system-x86_64  -smp 4  -netdev user,id=n0,tftp=./test_image,bootfile=boot/limine-bios-pxe.bin -device rtl8139,netdev=n0,mac=00:00:00:11:11:11 -debugcon stdio\n\n.PHONY: uefi-x86-64-test\nuefi-x86-64-test:\n\t$(MAKE) ovmf-x64\n\t$(MAKE) test-clean\n\t$(MAKE) test.hdd\n\t$(MAKE) limine-uefi-x86-64\n\t$(MAKE) -C test -f test.mk TOOLCHAIN_FILE='$(call SHESCAPE,$(BUILDDIR))/toolchain-files/uefi-x86_64-toolchain.mk'\n\trm -rf test_image/\n\tmkdir test_image\n\tsudo losetup -Pf --show test.hdd > loopback_dev\n\tsudo partprobe `cat loopback_dev`\n\tsudo mkfs.fat -F 32 `cat loopback_dev`p1\n\tsudo mount `cat loopback_dev`p1 test_image\n\tsudo mkdir test_image/boot\n\tsudo cp -rv $(BINDIR)/* test_image/boot/\n\tsudo cp -rv test/* test_image/boot/\n\tsudo $(MKDIR_P) test_image/EFI/BOOT\n\tsudo cp $(BINDIR)/BOOTX64.EFI test_image/EFI/BOOT/\n\tsync\n\tsudo umount test_image/\n\tsudo losetup -d `cat loopback_dev`\n\trm -rf test_image loopback_dev\n\tqemu-system-x86_64 -m 512M -M q35 -drive if=pflash,unit=0,format=raw,file=ovmf-x64/OVMF_CODE.fd,readonly=on -drive if=pflash,unit=1,format=raw,file=ovmf-x64/OVMF_VARS.fd -net none -smp 4   -hda test.hdd -debugcon stdio\n\n.PHONY: uefi-aa64-test\nuefi-aa64-test:\n\t$(MAKE) ovmf-aa64\n\t$(MAKE) test-clean\n\t$(MAKE) test.hdd\n\t$(MAKE) limine-uefi-aarch64\n\t$(MAKE) -C test -f test.mk TOOLCHAIN_FILE='$(call SHESCAPE,$(BUILDDIR))/toolchain-files/uefi-aarch64-toolchain.mk'\n\trm -rf test_image/\n\tmkdir test_image\n\tsudo losetup -Pf --show test.hdd > loopback_dev\n\tsudo partprobe `cat loopback_dev`\n\tsudo mkfs.fat -F 32 `cat loopback_dev`p1\n\tsudo mount `cat loopback_dev`p1 test_image\n\tsudo mkdir test_image/boot\n\tsudo cp -rv $(BINDIR)/* test_image/boot/\n\tsudo cp -rv test/* test_image/boot/\n\tsudo $(MKDIR_P) test_image/EFI/BOOT\n\tsudo cp $(BINDIR)/BOOTAA64.EFI test_image/EFI/BOOT/\n\tsync\n\tsudo umount test_image/\n\tsudo losetup -d `cat loopback_dev`\n\trm -rf test_image loopback_dev\n\tqemu-system-aarch64 -m 512M -M virt -cpu cortex-a72 -drive if=pflash,unit=0,format=raw,file=ovmf-aa64/OVMF_CODE.fd,readonly=on -drive if=pflash,unit=1,format=raw,file=ovmf-aa64/OVMF_VARS.fd -net none -smp 4 -device ramfb -device qemu-xhci -device usb-kbd  -hda test.hdd -serial stdio\n\n.PHONY: uefi-rv64-test\nuefi-rv64-test:\n\t$(MAKE) ovmf-rv64\n\t$(MAKE) test-clean\n\t$(MAKE) test.hdd\n\t$(MAKE) limine-uefi-riscv64\n\t$(MAKE) -C test -f test.mk TOOLCHAIN_FILE='$(call SHESCAPE,$(BUILDDIR))/toolchain-files/uefi-riscv64-toolchain.mk'\n\trm -rf test_image/\n\tmkdir test_image\n\tsudo losetup -Pf --show test.hdd > loopback_dev\n\tsudo partprobe `cat loopback_dev`\n\tsudo mkfs.fat -F 32 `cat loopback_dev`p1\n\tsudo mount `cat loopback_dev`p1 test_image\n\tsudo mkdir test_image/boot\n\tsudo cp -rv $(BINDIR)/* test_image/boot/\n\tsudo cp -rv test/* test_image/boot/\n\tsudo $(MKDIR_P) test_image/EFI/BOOT\n\tsudo cp $(BINDIR)/BOOTRISCV64.EFI test_image/EFI/BOOT/\n\tsync\n\tsudo umount test_image/\n\tsudo losetup -d `cat loopback_dev`\n\trm -rf test_image loopback_dev\n\tqemu-system-riscv64 -m 512M -M virt -cpu rv64 -drive if=pflash,unit=0,format=raw,file=ovmf-rv64/OVMF_CODE.fd,readonly=on -drive if=pflash,unit=1,format=raw,file=ovmf-rv64/OVMF_VARS.fd -net none -smp 4 -device ramfb -device qemu-xhci -device usb-kbd -hda test.hdd -serial stdio\n\n.PHONY: uefi-loongarch64-test\nuefi-loongarch64-test:\n\t$(MAKE) ovmf-loongarch64\n\t$(MAKE) test-clean\n\t$(MAKE) test.hdd\n\t$(MAKE) limine-uefi-loongarch64\n\t$(MAKE) -C test -f test.mk TOOLCHAIN_FILE='$(call SHESCAPE,$(BUILDDIR))/toolchain-files/uefi-loongarch64-toolchain.mk'\n\trm -rf test_image/\n\tmkdir test_image\n\tsudo losetup -Pf --show test.hdd > loopback_dev\n\tsudo partprobe `cat loopback_dev`\n\tsudo mkfs.fat -F 32 `cat loopback_dev`p1\n\tsudo mount `cat loopback_dev`p1 test_image\n\tsudo mkdir test_image/boot\n\tsudo cp -rv $(BINDIR)/* test_image/boot/\n\tsudo cp -rv test/* test_image/boot/\n\tsudo $(MKDIR_P) test_image/EFI/BOOT\n\tsudo cp $(BINDIR)/BOOTLOONGARCH64.EFI test_image/EFI/BOOT/\n\tsync\n\tsudo umount test_image/\n\tsudo losetup -d `cat loopback_dev`\n\trm -rf test_image loopback_dev\n\tqemu-system-loongarch64 -m 1G -net none -M virt -cpu la464 -device ramfb -device qemu-xhci -device usb-kbd -drive if=pflash,unit=0,format=raw,file=ovmf-loongarch64/OVMF_CODE.fd,readonly=on -drive if=pflash,unit=1,format=raw,file=ovmf-loongarch64/OVMF_VARS.fd -hda test.hdd -serial stdio\n\n.PHONY: uefi-ia32-test\nuefi-ia32-test:\n\t$(MAKE) ovmf-ia32\n\t$(MAKE) test-clean\n\t$(MAKE) test.hdd\n\t$(MAKE) limine-uefi-ia32\n\t$(MAKE) -C test -f test.mk TOOLCHAIN_FILE='$(call SHESCAPE,$(BUILDDIR))/toolchain-files/uefi-x86_64-toolchain.mk'\n\trm -rf test_image/\n\tmkdir test_image\n\tsudo losetup -Pf --show test.hdd > loopback_dev\n\tsudo partprobe `cat loopback_dev`\n\tsudo mkfs.fat -F 32 `cat loopback_dev`p1\n\tsudo mount `cat loopback_dev`p1 test_image\n\tsudo mkdir test_image/boot\n\tsudo cp -rv $(BINDIR)/* test_image/boot/\n\tsudo cp -rv test/* test_image/boot/\n\tsudo $(MKDIR_P) test_image/EFI/BOOT\n\tsudo cp $(BINDIR)/BOOTIA32.EFI test_image/EFI/BOOT/\n\tsync\n\tsudo umount test_image/\n\tsudo losetup -d `cat loopback_dev`\n\trm -rf test_image loopback_dev\n\tqemu-system-x86_64 -m 512M -M q35 -drive if=pflash,unit=0,format=raw,file=ovmf-ia32/OVMF_CODE.fd,readonly=on -drive if=pflash,unit=1,format=raw,file=ovmf-ia32/OVMF_VARS.fd -net none -smp 4   -hda test.hdd -debugcon stdio\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.sh",
          "type": "blob",
          "size": 0.5126953125,
          "content": "#! /bin/sh\n\nLC_ALL=C\nexport LC_ALL\n\nsrcdir=\"$(dirname \"$0\")\"\ntest -z \"$srcdir\" && srcdir=.\n\ncd \"$srcdir\"\n\nif test -f version; then\n    printf '%s' \"$(cat version)\"\n    exit 0\nfi\n\nif ! test -d .git || ! git log -n1 --pretty='%h' >/dev/null 2>&1; then\n    printf 'UNVERSIONED'\n    exit 0\nfi\n\ntmpfile=\"$(mktemp)\"\n\nif ! git describe --exact-match --tags $(git log -n1 --pretty='%h') >\"$tmpfile\" 2>/dev/null; then\n    echo g$(git log -n1 --pretty='%h') >\"$tmpfile\"\nfi\n\nprintf '%s' \"$(sed 's/^v//g' <\"$tmpfile\")\"\n\nrm -f \"$tmpfile\"\n"
        }
      ]
    }
  ]
}