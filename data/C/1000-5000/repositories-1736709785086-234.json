{
  "metadata": {
    "timestamp": 1736709785086,
    "page": 234,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "checkedc/checkedc",
      "stars": 3222,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.01171875,
          "content": "*.out\n*.exe\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.1240234375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nadmin@secure-software-development-project.org.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.6533203125,
          "content": "# Contributing to Checked C\n\nWe welcome contributions to the Checked C Project.  Contributions can take many forms depending\non your level of interest:\n\n* Participating in [discussions](https://github.com/microsoft/checkedc/discussions)\n  on the specification and reviewing proposed changes to it.\n* Helping out with the [Checked C clang compiler implementation](https://github.com/Microsoft/checkedc-clang). We could\n particularly use code reviewers for compiler changes.  There are also a number of self-contained small features that \n you could implement.\n * Adding test code and samples.\n* Making improvements to the specification.  This can include fixing typographical errors or\nclarifying wording, adding examples, adding related work, improving the existing discussion of features, or adding new features.\n* Proposing significant new functionality.  We have focused on bounds checking so far, and welcome proposals\nfor checking type casts and memory management.\n\nIf you choose to contribute code to the [Checked C clang compiler implementation](https://github.com/Microsoft/checkedc-clang),\nplease follow the guidelines below while submitting PRs:\n- Please break your changes into multiple small PRs rather than submitting one big PR as smaller changes are easier and faster to review.\n- Please place changes to the compiler core and to any other compiler tools in separate PRs.\n- Before submitting a PR, please ensure that it passes all build and test requirements both in Linux and Windows.\n\nFrom our side, we assure you that we will not squash-merge your PRs in a way that erases your commit history.\nFor more guidelines from LLVM/Clang, please refer to [this](https://llvm.org/docs/Contributing.html) link.\n\n## Workflow\n\nYou can provide feedback on the specification by opening an issue or sending email to the discussion email list.  \n\nWe follow the standard [GitHub workflow](https://guides.github.com/introduction/flow/).  You can propose changes\nto the specification, tests, examples, or implement compiler features.\n\n - To submit changes, please create a personal fork of the appropriate repo.  For specification changes,\n   examples, and tests, fork the  [Checked C repo](https://github.com/Microsoft/checkedc).   For compiler\n   changes, fork the [Checked C clang repo](https://github.com/Microsoft/checkedc-clang).\n-  Make your changes in  your fork and then make a pull request to merge those changes into  the master branch of the appropriate\n   repo.\n - For small changes (such as typos and clarifying wording), you can just directly submit a pull request.\n - For more substantial changes or changes where discussion is likely needed, please use the Github issues \n   system for the appropriate repo to track your changes.   For the specification, tests, and examples use\n [Checked C issues](https://github.com/Microsoft/checkedc/issues).\n   For compiler implementation issues, use [Checked C clang issues](https://github.com/Microsoft/checkedc-clang/issues). \n - Please be sure to test your changes before making the pull request. \n\n## Licensing\n\nYou are free to discuss the specification using the email lists or the\n[Checked C issues](https://github.com/Microsoft/checkedc/issues) system. These are public forums, so do not\nshare confidential information.\n\n### Specification\nContributions to the specification are subject to the \n[OpenWeb Foundation Specification agreement](http://www.openwebfoundation.org/legal/the-owf-1-0-agreements/owfa-1-0). \nFor minor changes, such as \nimproving wording, improving discussion of features, and fixing typos, you do not need to sign anything. \nFor more substantial changes (such as proposals for new functionality), we will ask you to sign the\n[OpenWeb Contributing License Agreement](http://www.openwebfoundation.org/legal/the-owf-1-0-agreements/owf-contributor-license-agreement-1-0---copyright-and-patent).\nThis is in the interest of keeping intellectual property rights clear so the community is free\nto use the contribution later.\n\n### Code\n\nContributions of test and sample code to the Checked C repo are subject to the\n[licensing terms](https://github.com/Microsoft/CheckedC/blob/master/LICENSE.TXT)\nfor the repo (MIT license).  Contributions of code to the Checked C LLVM/clang implementation are\nsubject to the [CLANG/LLVM licensing terms](https://github.com/microsoft/checkedc-clang/blob/master/clang/LICENSE.TXT).\n\nFor minor changes, such as fixing typos, you do not need to sign anything. For other changes, we will ask that you \nsign a [contribution license agreement (CLA)](https://cla.microsoft.com/) before accepting your change. \nIf you already have signed a CLA for another Microsoft-related open-source project, it covers the these repos too.\nYou do not need to sign another CLA.\n\n"
        },
        {
          "name": "LICENSE.TXT",
          "type": "blob",
          "size": 1.0986328125,
          "content": "Checked C Test and Sample Code\nCopyright (c) Microsoft Corporation\nAll rights reserved.\n\nMIT License\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.751953125,
          "content": "# Checked C\n\nChecked C extends C with bounds checking and improved type safety.  It helps programmers retrofit existing C code to\nbe more secure. This repo contains\nthe [Checked C specification](https://github.com/checkedc/checkedc/releases),\nsample code, and test code.\n\n- For a quick overview of Checked C and pointers to sample code,\n  see our [Wiki](https://github.com/checkedc/checkedc/wiki).\n- You can download Checked C clang compiler releases for Windows, Mac, and Ubuntu\n  [here](https://github.com/checkedc/checkedc-clang/releases).\n- The specification is available [here](https://github.com/checkedc/checkedc/releases).\n- The repo for the Checked C clang compiler is\n  [here](https://github.com/checkedc/checkedc-clang).  The compiler is a fork of\n  LLVM/clang. Instructions for building the compiler from source code are on the\n  [Checked C clang wiki](https://github.com/checkedc/checkedc-clang/wiki).\n\n# Build Status\n\n[![Checked C Clang CI [Linux]](https://github.com/checkedc/workflows/actions/workflows/check-clang-linux.yml/badge.svg)](https://github.com/checkedc/workflows/actions/workflows/check-clang-linux.yml)\n\n[![Checked C Clang CI [MacOS]](https://github.com/checkedc/workflows/actions/workflows/checkedc-clang-macos.yml/badge.svg)](https://github.com/checkedc/workflows/actions/workflows/checkedc-clang-macos.yml)\n\n[![Checked C Clang CI [WINDOWS]](https://github.com/checkedc/workflows/actions/workflows/check-clang-windows.yml/badge.svg)](https://github.com/checkedc/workflows/actions/workflows/check-clang-windows.yml)\n\n# Publications and Presentations\n\n- [Fat Pointers For Temporal Memory Safety of C](https://dl.acm.org/doi/pdf/10.1145/3586038) by Jie Zhou,\n  John Criswell, and Michael Hicks. This appeared in\n  [OOPSLA 2023](https://2023.splashcon.org/details/splash-2023-oopsla/12/Fat-Pointers-for-Temporal-Memory-Safety-of-C).\n  It describes an extension to Checked C that adds new pointers that provide temporal memory safety.\n\n- [C to Checked C by 3C](https://dl.acm.org/doi/10.1145/3527322), by Aravind Machiry, John Kastner, Matt McCutchen, Aaron Eline,\n  Kyle Headley, and Michael Hicks. This paper describes the semi-automated 3C tool for converting C to Checked C.\n  It [won](https://2022.splashcon.org/details/splash-2022-oopsla/13/C-to-checked-C-by-3c) a SIGPLAN Distinguished Paper award\n  at OOPSLA 2022.\n\n- [A Formal Model of Checked C](https://ieeexplore.ieee.org/document/9919657), by Liyi Li, Deena Postol, Leonida\n  Lampropoulos, David Van Horn, and Michael Hicks. This was published in the 2022 IEEE 35th Computer Security Foundations\n  Symposlium. It describe a formal model of Checked C.  The model was formalized using the Coq theorem prover.\n\n- [Achieving Safety Incrementally With Checked C](https://www.microsoft.com/en-us/research/uploads/prod/2019/05/checkedc-post2019.pdf).\n  This was presented at the [2019 Principles of Security and Trust Conference](http://www.etaps.org/2019/post):.\n  This paper describes an early version of 3C that convert existing C code to use Ptr types.  It also proves a blame\n   property about checked regions that shows that checked regions are blameless for any memory corruption.\n  This proof is formalized for a core subset of the language extension.\n\n- [Checked C: Making C Safe by Extension](https://www.microsoft.com/en-us/research/publication/checkedc-making-c-safe-by-extension/) by\n  David Tarditi, Samuel Elliott, Andrew Ruef, and Michael Hicks.  This appeared in the\n  [IEEE 2018 Cybersecurity Development Conference](https://secdev.ieee.org/2018/home). It describes the key ideas of Checked C bounds\n   checking in 8 pages.  We have added features to Checked C since then.\n   The [Wiki](https://github.com/checkedc/checkedc/wiki) and [specification](https://github.com/checkedc/checkedc/releases)\n   provide up-to-date descriptions of Checked C.\n\n\n- There was a\n[poster](https://github.com/checkedc/checkedc/blob/main/papers/presentations/llvmdevmeet2019-checkedc_for_memory_safety.pdf)\npresented at the [LLVM Dev Meeting\n2019](https://llvm.org/devmtg/2019-10/talk-abstracts.html#post6): \"Overflows Be\nGone: Checked C for Memory Safety\". The poster provides an introduction to\nChecked C, outlines the compiler implementation and presents an experimental\nevaluation of Checked C.\n\n- There was a [talk](https://youtu.be/EuxAzvtX9CI)\n  ([slides](https://github.com/checkedc/checkedc/blob/main/papers/presentations/llvmdevmeet2020-checkedc_adding_memory_safety_to_llvm.pdf))\nat the [2020 LLVM Virtual Dev\nMeeting](https://llvm.org/devmtg/2020-09/program): \"Checked C: Adding memory\nsafety support to LLVM\". The talk describes the design of bounds annotations\nfor checked pointers and array pointers as well as the framework for the static\nchecking of the soundness of bounds. The talk also briefly describes novel algorithms\nto automatically widen bounds for null-terminated arrays and for comparison of\nexpressions for equivalence.\n\n# Participating\nWe are happy to have the help. You can contribute by trying out Checked C,\nreporting bugs, and giving us feedback. There are other ways to [contribute](CONTRIBUTING.md) too.\n\n# Licensing\nThe software in this repository is covered by the MIT license.  See the file LICENSE.TXT for the license.  The\nChecked C specification is made available by Microsoft under the [OpenWeb Foundation Final\nSpecification Agreement, version 1.0](http://www.openwebfoundation.org/legal/the-owf-1-0-agreements/owfa-1-0).\nContributions of code to the Checked LLVM/clang repos are\nsubject to the [LLVM/clang licensing terms](https://github.com/checkedc/checkedc-clang/blob/main/clang/LICENSE.TXT).\n\n# History\n\nChecked C is an independent open-source project.   It started as a research project at Microsoft in 2015.\nsimilar to Checked C.  We were looking for a way to improve the security of existing systems software and\neliminate classes of bugs.\n\nOne approach is to rewrite the software in a newer language such as Rust.\nHowever, rewriting code is challenging for a number of reasons:  it is costly, there are subtle differences in even\nbasic language features such as arithmetic across languages, and it can take a long time before you\nhave a working system.  Combined, this makes a rewrite a high-risk software development project.  These kinds\nof rewrites are unlikely to be done just to improve security.  We decided to pursue an incremental approach that allows\nexisting C code to be improved gradually and at much lower cost.\n\nResearchers from many universities and companies have contributed to Checked C.\nResearchers at the University of Maryland, the University of Rochester, the University of Washington, Samsung,\nRutgers University, and the University of Pennsylvania have contributed to Checked C.\nApple has proposed a C extension similar to Checked C that relies on more dynamic checking.\n\n# Code of conduct\n\nThis project has adopted a [Code of Conduct](CODE_OF_CONDUCT.md).\n"
        },
        {
          "name": "WishList.md",
          "type": "blob",
          "size": 3.052734375,
          "content": "# A Wish List of Checked C Projects.\n\nThere is plenty of work to do on Checked C. Here is a list of projects \nthat could be begun now or in the next few months.  The projects cover compiler\nimplementation, tools, language design, and experimental evaluation.  The \nprojects range in nature from implementation to design to open research\nproblems.  If you decide to work on a project, it would be helpful to let us\nknow so that we can try to coordinate work among interested parties.\n\n# Compiler implementation\n\nHere are projects for the LLVM/clang implementation of Checked C.  Some \nprojects could be begun now.  Others will need to wait until bounds declarations\nare added to the clang AST.\n\n- Nightly build automation and build testing.\n- Pointer arithmetic for checked pointers types that has overflow checking.\n- Non-null checks for checked pointer types.\n- Span pointer types: parsing, representation in IR, typechecking, and\n  implementation of operations.\n- Insert runtime bounds checks during the lowering to LLVM IR.\n- Enforce the rule in Section 3.2 that all uses of externally-scoped variables\n  within a compilation unit have the same view of the bounds for the variable.\n-  Bounds-safe interfaces for functions and static variables:\n-- Parsing of interoperation annotations for unchecked pointer types.\n-- Insertion of implicit type coercions between checked and unchecked pointer\n   types.\n-- Compatibility between declarations with and without bounds information.\n-- Checks that there are no intervening definitions.\n-  Checked/unchecked blocks.\n- Bounds declarations for structure types and structure member operations.\n\nAnother interesting direction is to begin implementing Checked C in other\ncompilers such as GCC.\n\n# Tools\n\n- Create tools that modify existing C code to use features in Checked C. One possible project \n  is to build a tool that identifies pointers that are never used with pointer arithmetic\n  and convert them to _ptr_.  We have implemented typechecking for the _ptr_ type in LLVM/clang,\n  so the typechecking rules for _ptr_ would be enforced.\n\n# Experimental evaluation\n\n- Try applying Checked C to additional code bases.  We are experimenting with OpenSSL.\n  It would be useful to gather experiences with other code bases, which will have\n  different coding styles and address other problem domains.  \n\n# Language design\n\n- Extend the Checked C design to describe null-terminated array types.\n- Extend the C language definition notion of compatibility to declarations\n  with and without bounds information. This would allow bounds-safe\n  interfaces to be declared for C standard library functions, without \n  modifying the source code for existing headers.\n- Add a way to describe that aliasing (or anti-aliasing) properties of data\n  structures.  This would allow bounds invariants to be suspended for certain\n  data during function calls.\n- Ways to check the correct use of the following memory management strategies\n  used in C programs:\n-- Stack allocation.\n-- Reference counting\n-- Regions.\n- A design for checking the correctness of explicit memory management\nstrategies.\n\n\n\n\n\n\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "papers",
          "type": "tree",
          "content": null
        },
        {
          "name": "presentations",
          "type": "tree",
          "content": null
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "spec",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}