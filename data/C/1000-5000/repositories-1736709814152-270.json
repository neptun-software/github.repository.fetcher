{
  "metadata": {
    "timestamp": 1736709814152,
    "page": 270,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Stichting-MINIX-Research-Foundation/minix",
      "stars": 3091,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0361328125,
          "content": "cscope.*\n*.swap\n.*.sw[po]\n.sw[po]\n*~\n*.orig\n*.diff\n*.patch\n*.rej\n*.[1-9].gz\n*.o\n*.[psS]o\n*.pico\nlib*.so*\n*.a\n*.so.*\n*.d\n!etc/*.d\n.depend\n*.gcno\n*.gcda\nTAGS\ntags\nGPATH\nGRTAGS\nGSYMS\nGTAGS\n\\#*#\nCVS\nobj\n!/.gitignore\n.gitignore\n.svn\n*.worldstone.log\n.worldstone*\nusr.bin/mdocml/man/*.7\netc/passwd\netc/pwd.db\netc/spwd.db\nreleasetools/image\nreleasetools/kernel\nreleasetools/revision\nshare/zoneinfo/builddir\nexternal/bsd/llvm/dist/clang/test/CodeGenCXX/microsoft-abi-vtables-multiple-nonvirtual-inheritance-no-thu\nexternal/bsd/llvm/dist/clang/test/CodeGenCXX/microsoft-abi-vtables-multiple-nonvirtual-inheritance-pure-v\nexternal/bsd/llvm/dist/clang/test/CodeGenCXX/microsoft-abi-vtables-multiple-nonvirtual-inheritance-return\nexternal/bsd/llvm/dist/clang/test/CodeGenCXX/microsoft-abi-vtables-multiple-nonvirtual-inheritance-this-a\nexternal/bsd/llvm/dist/clang/test/CodeGenCXX/microsoft-abi-vtables-multiple-nonvirtual-inheritance-vdtors\nexternal/bsd/llvm/dist/llvm/test/Verifier/bitcast-address-space-through-constant-inttoptr-inside-gep-i\nlib/libc/compat__*\n.gdbinit\n"
        },
        {
          "name": ".gitreview",
          "type": "blob",
          "size": 0.5341796875,
          "content": "# MINIX 3 code review setup.\n# \n# This gerrit code review configuration is meant for performing per commit \n# internal code reviews. If you are an external contributor please read and \n# apply http://wiki.minix3.org/en/HowToContribute\n#\n# Consider reading http://wiki.openstack.org/GerritWorkflow to learn how\n# to install git review on a Linux setup. On Minix you can use pkgin to \n# install git-review.\n#\n[gerrit]\n# The git-minix host is to be configured in your .ssh/config\n#\nhost=gerrit.minix3.org\nport=2222\nproject=minix\ndefaultbranch=master\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 2.6064453125,
          "content": "\nLicense\n\nCopyright (c) 1987, 1997, 2006, Vrije Universiteit, Amsterdam,\nThe Netherlands All rights reserved. Redistribution and use of the MINIX 3\noperating system in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n\n    * Neither the name of the Vrije Universiteit nor the names of the\n    software authors or contributors may be used to endorse or promote\n    products derived from this software without specific prior written\n    permission.\n\n    * Any deviations from these conditions require written permission\n    from the copyright holder in advance\n\n\nDisclaimer\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS, AUTHORS, AND\n CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN\n NO EVENT SHALL PRENTICE HALL OR ANY AUTHORS OR CONTRIBUTORS BE LIABLE\n FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\n BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nAggregated Software\n\nIn addition to MINIX 3 itself, the distribution CD-ROM and this Website\ncontain additional software that is not part of MINIX 3 and is not\ncovered by this license. The licensing conditions for this additional\nsoftware are stated in the various packages. In particular, some of the\nadditional software falls under the GPL, and you must take care to\nobserve the conditions of the GPL with respect to this software. As\nclearly stated in Article 2 of the GPL, when GPL and nonGPL software are\ndistributed together on the same medium, this aggregation does not cause\nthe license of either part to apply to the other part.\n\n\nAcknowledgements\n\nThis product includes software developed by the University of\nCalifornia, Berkeley and its contributors.\n\nThis product includes software developed by Softweyr LLC, the\nUniversity of California, Berkeley, and its contributors.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 16.814453125,
          "content": "#\t$NetBSD: Makefile,v 1.316 2015/07/23 08:03:25 mrg Exp $\n\n#\n# This is the top-level makefile for building NetBSD. For an outline of\n# how to build a snapshot or release, as well as other release engineering\n# information, see http://www.NetBSD.org/developers/releng/index.html\n#\n# Not everything you can set or do is documented in this makefile. In\n# particular, you should review the files in /usr/share/mk (especially\n# bsd.README) for general information on building programs and writing\n# Makefiles within this structure, and see the comments in src/etc/Makefile\n# for further information on installation and release set options.\n#\n# Variables listed below can be set on the make command line (highest\n# priority), in /etc/mk.conf (middle priority), or in the environment\n# (lowest priority).\n#\n# Variables:\n#   DESTDIR is the target directory for installation of the compiled\n#\tsoftware. It defaults to /. Note that programs are built against\n#\tlibraries installed in DESTDIR.\n#   MKMAN, if `no', will prevent building of manual pages.\n#   MKOBJDIRS, if not `no', will build object directories at\n#\tan appropriate point in a build.\n#   MKSHARE, if `no', will prevent building and installing\n#\tanything in /usr/share.\n#   MKUPDATE, if not `no', will avoid a `make cleandir' at the start of\n#\t`make build', as well as having the effects listed in\n#\t/usr/share/mk/bsd.README.\n#   NOCLEANDIR, if defined, will avoid a `make cleandir' at the start\n#\tof the `make build'.\n#   NOINCLUDES will avoid the `make includes' usually done by `make build'.\n#\n#   See mk.conf(5) for more details.\n#\n#\n# Targets:\n#   build:\n#\tBuilds a full release of NetBSD in DESTDIR, except for the\n#\t/etc configuration files.\n#\tIf BUILD_DONE is set, this is an empty target.\n#   distribution:\n#\tBuilds a full release of NetBSD in DESTDIR, including the /etc\n#\tconfiguration files.\n#   buildworld:\n#\tAs per `make distribution', except that it ensures that DESTDIR\n#\tis not the root directory.\n#   installworld:\n#\tInstall the distribution from DESTDIR to INSTALLWORLDDIR (which\n#\tdefaults to the root directory).  Ensures that INSTALLWORLDDIR\n#\tis not the root directory if cross compiling.\n#   release:\n#\tDoes a `make distribution', and then tars up the DESTDIR files\n#\tinto ${RELEASEDIR}/${RELEASEMACHINEDIR}, in release(7) format.\n#\t(See etc/Makefile for more information on this.)\n#   regression-tests:\n#\tRuns the regression tests in \"regress\" on this host.\n#   sets:\n#\tPopulate ${RELEASEDIR}/${RELEASEMACHINEDIR}/binary/sets\n#\tfrom ${DESTDIR}\n#   sourcesets:\n#\tPopulate ${RELEASEDIR}/source/sets from ${NETBSDSRCDIR}\n#   syspkgs:\n#\tPopulate ${RELEASEDIR}/${RELEASEMACHINEDIR}/binary/syspkgs\n#\tfrom ${DESTDIR}\n#   iso-image:\n#\tCreate CD-ROM image in RELEASEDIR/images.\n#\tRELEASEDIR must already have been populated by `make release'\n#\tor equivalent.\n#   iso-image-source:\n#\tCreate CD-ROM image with source in RELEASEDIR/images.\n#\tRELEASEDIR must already have been populated by\n#\t`make release sourcesets' or equivalent.\n#   live-image:\n#\tCreate bootable live image for emulators or USB stick etc.\n#\tin RELEASEDIR/liveimage.\n#\tRELEASEDIR must already have been populated by `make release'\n#\tor equivalent.\n#   install-image:\n#\tCreate bootable installation image for USB stick etc.\n#\tin RELEASEDIR/installimage.\n#\tRELEASEDIR must already have been populated by `make release'\n#\tor equivalent.\n#\n# Targets invoked by `make build,' in order:\n#   cleandir:        cleans the tree.\n#   do-top-obj:      creates the top level object directory.\n#   do-tools-obj:    creates object directories for the host toolchain.\n#   do-tools:        builds host toolchain.\n#   params:          record the values of variables that might affect the\n#                    build.\n#   obj:             creates object directories.\n#   do-distrib-dirs: creates the distribution directories.\n#   includes:        installs include files.\n#   do-lib:          builds and installs prerequisites from lib\n#                    if ${MKCOMPAT} != \"no\".\n#   do-compat-lib:   builds and installs prerequisites from compat/lib\n#                    if ${MKCOMPAT} != \"no\".\n#   do-build:        builds and installs the entire system.\n#   do-x11:          builds and installs X11 if ${MKX11} != \"no\"; either\n#                    X11R7 from src/external/mit/xorg \n#   do-extsrc:       builds and installs extsrc if ${MKEXTSRC} != \"no\".\n#   do-obsolete:     installs the obsolete sets (for the postinstall-* targets).\n#\n\n.if ${.MAKEFLAGS:M${.CURDIR}/share/mk} == \"\"\n.MAKEFLAGS: -m ${.CURDIR}/share/mk\n.endif\n\n#\n# If _SRC_TOP_OBJ_ gets set here, we will end up with a directory that may\n# not be the top level objdir, because \"make obj\" can happen in the *middle*\n# of \"make build\" (long after <bsd.own.mk> is calculated it).  So, pre-set\n# _SRC_TOP_OBJ_ here so it will not be added to ${.MAKEOVERRIDES}.\n#\n_SRC_TOP_OBJ_=\n\n.include <bsd.own.mk>\n\n#\n# Sanity check: make sure that \"make build\" is not invoked simultaneously\n# with a standard recursive target.\n#\n\n.if make(build) || make(release) || make(snapshot)\n.for targ in ${TARGETS:Nobj:Ncleandir}\n.if make(${targ}) && !target(.BEGIN)\n.BEGIN:\n\t@echo 'BUILD ABORTED: \"make build\" and \"make ${targ}\" are mutually exclusive.'\n\t@false\n.endif\n.endfor\n.endif\n\n#\n# _SUBDIR is used to set SUBDIR, after removing directories that have\n# BUILD_${dir}=no, or that have no ${dir}/Makefile.\n#\n_SUBDIR=\ttools lib include gnu external crypto/external bin games\n_SUBDIR+=\tlibexec sbin usr.bin\n_SUBDIR+=\tusr.sbin share sys etc tests compat\n_SUBDIR+=\t.WAIT rescue .WAIT distrib regress\n.if defined(__MINIX)\n# the minix subdir depends on some other things (e.g. lib/) \n_SUBDIR+=\t.WAIT minix\n.endif # defined(__MINIX)\n\n.for dir in ${_SUBDIR}\n.if \"${dir}\" == \".WAIT\" \\\n\t|| (${BUILD_${dir}:Uyes} != \"no\" && exists(${dir}/Makefile))\nSUBDIR+=\t${dir}\n.endif\n.endfor\n\n.if exists(regress)\nregression-tests: .PHONY .MAKE\n\t@echo Running regression tests...\n\t${MAKEDIRTARGET} regress regress\n.endif\n\n.if ${MKUNPRIVED} != \"no\"\nNOPOSTINSTALL=\t# defined\n.endif\n\nafterinstall: .PHONY .MAKE\n.if ${MKMAN} != \"no\"\n.if !defined(__MINIX)\n\t${MAKEDIRTARGET} share/man makedb\n.else\n\t${MAKEDIRTARGET} minix/man makedb\n.endif # !defined(__MINIX)\n.endif\n.if (${MKUNPRIVED} != \"no\" && ${MKINFO} != \"no\")\n\t${MAKEDIRTARGET} gnu/usr.bin/texinfo/install-info infodir-meta\n.endif\n.if !defined(NOPOSTINSTALL)\n\t${MAKEDIRTARGET} . postinstall-check\n.endif\n\n_POSTINSTALL=\t${.CURDIR}/usr.sbin/postinstall/postinstall \\\n\t\t-m ${MACHINE} -a ${MACHINE_ARCH}\n_POSTINSTALL_ENV= \\\n\tAWK=${TOOL_AWK:Q}\t\t\\\n\tDB=${TOOL_DB:Q}\t\t\t\\\n\tHOST_SH=${HOST_SH:Q}\t\t\\\n\tMAKE=${MAKE:Q}\t\t\t\\\n\tPWD_MKDB=${TOOL_PWD_MKDB:Q}\t\\\n\tSED=${TOOL_SED:Q}\t\t\\\n\tSTAT=${TOOL_STAT:Q}\n\n.if ${MKX11} != \"no\"\n_POSTINSTALL_X11=-x ${X11SRCDIR:Q}\n.endif\n\npostinstall-check: .PHONY\n\t@echo \"   === Post installation checks ===\"\n\t${_POSTINSTALL_ENV} ${HOST_SH} ${_POSTINSTALL} -s ${.CURDIR} ${_POSTINSTALL_X11} -d ${DESTDIR}/ check; if [ $$? -gt 1 ]; then exit 1; fi\n\t@echo \"   ================================\"\n\npostinstall-fix: .NOTMAIN .PHONY\n\t@echo \"   === Post installation fixes ===\"\n\t${_POSTINSTALL_ENV} ${HOST_SH} ${_POSTINSTALL} -s ${.CURDIR} ${_POSTINSTALL_X11} -d ${DESTDIR}/ fix\n\t@echo \"   ===============================\"\n\npostinstall-fix-obsolete: .NOTMAIN .PHONY\n\t@echo \"   === Removing obsolete files ===\"\n\t${_POSTINSTALL_ENV} ${HOST_SH} ${_POSTINSTALL} -s ${.CURDIR} ${_POSTINSTALL_X11} -d ${DESTDIR}/ fix obsolete\n\t@echo \"   ===============================\"\n\npostinstall-fix-obsolete_stand: .NOTMAIN .PHONY\n\t@echo \"   === Removing obsolete files ===\"\n\t${_POSTINSTALL_ENV} ${HOST_SH} ${_POSTINSTALL} -s ${.CURDIR} ${_POSTINSTALL_X11} -d ${DESTDIR}/ fix obsolete_stand\n\t@echo \"   ===============================\"\n\n\n#\n# Targets (in order!) called by \"make build\".\n#\nBUILDTARGETS+=\tcheck-tools\n.if ${MKUPDATE} == \"no\" && !defined(NOCLEANDIR)\nBUILDTARGETS+=\tcleandir\n.endif\n.if ${MKOBJDIRS} != \"no\"\nBUILDTARGETS+=\tdo-top-obj\n.endif\n.if ${USETOOLS} == \"yes\"\t# {\n.if ${MKOBJDIRS} != \"no\"\nBUILDTARGETS+=\tdo-tools-obj\n.endif\nBUILDTARGETS+=\tdo-tools\n.endif # USETOOLS\t\t# }\nBUILDTARGETS+=\tparams\n.if ${MKOBJDIRS} != \"no\"\nBUILDTARGETS+=\tobj\n.endif\nBUILDTARGETS+=\tclean_METALOG\n.if !defined(NODISTRIBDIRS)\nBUILDTARGETS+=\tdo-distrib-dirs\n.endif\n.if !defined(NOINCLUDES)\nBUILDTARGETS+=\tincludes\n.endif\nBUILDTARGETS+=\tdo-lib\n.if !defined(__MINIX)\n# LSC Not used in MINIX3\nBUILDTARGETS+=\tdo-compat-lib\n.endif # !defined(__MINIX)\n.if ${MKX11} != \"no\"\nBUILDTARGETS+=\tdo-x11\n.endif\nBUILDTARGETS+=\tdo-build\n.if ${MKEXTSRC} != \"no\"\nBUILDTARGETS+=\tdo-extsrc\n.endif\n\n.if defined(__MINIX) && ${MKSRC} == \"yes\"\nBUILDTARGETS+=\tdo-installsrc\n.endif # defined(__MINIX)\n\nBUILDTARGETS+=\tdo-obsolete\n\n#\n# Enforce proper ordering of some rules.\n#\n\n.ORDER:\t\t${BUILDTARGETS}\nincludes-lib:\t.PHONY includes-include includes-sys\nincludes-gnu:\t.PHONY includes-lib\n\n#\n# Record the values of variables that might affect the build.\n# If no values have changed, avoid updating the timestamp\n# of the params file.\n#\n# This is referenced by _NETBSD_VERSION_DEPENDS in <bsd.own.mk>.\n#\n.include \"${NETBSDSRCDIR}/etc/Makefile.params\"\nCLEANDIRFILES+= params\nparams: .EXEC\n\t${_MKMSG_CREATE} params\n\t@${PRINT_PARAMS} >${.TARGET}.new\n\t@if cmp -s ${.TARGET}.new ${.TARGET} > /dev/null 2>&1; then \\\n\t\t: \"params is unchanged\" ; \\\n\t\trm ${.TARGET}.new ; \\\n\telse \\\n\t\t: \"params has changed or is new\" ; \\\n\t\tmv ${.TARGET}.new ${.TARGET} ; \\\n\tfi\n\n#\n# Display current make(1) parameters\n#\nshow-params: .PHONY .MAKE\n\t@${PRINT_PARAMS}\n\n#\n# Build the system and install into DESTDIR.\n#\n\nSTART_TIME!=\tdate\n\n.if defined(__MINIX)\nworld: build .PHONY .MAKE\n\t${MAKEDIRTARGET} . etcfiles\n\t@echo \"WARNING: \"\n\t@echo \"WARNING: The 'world' target is obsolete, please use 'build' instead.\"\n\t@echo \"WARNING: \"\n\netcfiles: .PHONY .MAKE\n\t${MAKEDIRTARGET} etc install-etc-files-safe  DESTDIR=${DESTDIR:U/}\n\netcforce: .PHONY .MAKE\n\t${MAKEDIRTARGET} etc install-etc-files  DESTDIR=${DESTDIR:U/}\n\n.endif # defined(__MINIX)\n\nbuild: .PHONY .MAKE\n.if defined(BUILD_DONE)\n\t@echo \"Build already installed into ${DESTDIR}\"\n.else\n\t@echo \"Build started at: ${START_TIME}\"\n.for tgt in ${BUILDTARGETS}\n\t${MAKEDIRTARGET} . ${tgt}\n.endfor\n\t${MAKEDIRTARGET} etc install-etc-release\n.if defined(__MINIX)\n\t${MAKEDIRTARGET} etc install-etc-files-safe DESTDIR=${DESTDIR:U/}\n\t${MAKEDIRTARGET} releasetools do-hdboot\n.endif # defined(__MINIX)\n\t@echo   \"Build started at:  ${START_TIME}\"\n\t@printf \"Build finished at: \" && date\n.endif\n\n#\n# Build a full distribution, but not a release (i.e. no sets into\n# ${RELEASEDIR}).  \"buildworld\" enforces a build to ${DESTDIR} != /\n#\n\ndistribution buildworld: .PHONY .MAKE\n.if make(buildworld) && \\\n    (!defined(DESTDIR) || ${DESTDIR} == \"\" || ${DESTDIR} == \"/\")\n\t@echo \"Won't make ${.TARGET} with DESTDIR=/\"\n\t@false\n.endif\n\t${MAKEDIRTARGET} . build NOPOSTINSTALL=1\n\t${MAKEDIRTARGET} etc distribution INSTALL_DONE=1\n.if defined(DESTDIR) && ${DESTDIR} != \"\" && ${DESTDIR} != \"/\"\n\t${MAKEDIRTARGET} . postinstall-fix-obsolete\n\t${MAKEDIRTARGET} . postinstall-fix-obsolete_stand\n\t${MAKEDIRTARGET} distrib/sets checkflist\n.endif\n\t@echo   \"make ${.TARGET} started at:  ${START_TIME}\"\n\t@printf \"make ${.TARGET} finished at: \" && date\n\n#\n# Install the distribution from $DESTDIR to $INSTALLWORLDDIR (defaults to `/')\n# If installing to /, ensures that the host's operating system is NetBSD and\n# the host's `uname -m` == ${MACHINE}.\n#\n\nHOST_UNAME_S!=\tuname -s\n.if ${HOST_OSTYPE:C/\\-.*//} != \"Minix\"\nHOST_UNAME_M!=\tuname -m\n.else\nHOST_UNAME_M:= ${MACHINE}\n.endif\n\ninstallworld: .PHONY .MAKE\n.if (!defined(DESTDIR) || ${DESTDIR} == \"\" || ${DESTDIR} == \"/\")\n\t@echo \"Can't make ${.TARGET} to DESTDIR=/\"\n\t@false\n.endif\n.if !defined(INSTALLWORLDDIR) || \\\n    ${INSTALLWORLDDIR} == \"\" || ${INSTALLWORLDDIR} == \"/\"\n.if (${HOST_UNAME_S} != \"NetBSD\") && (${HOST_UNAME_S} != \"Minix\")\n\t@echo \"Won't cross-make ${.TARGET} from ${HOST_UNAME_S} to Minix with INSTALLWORLDDIR=/\"\n\t@false\n.endif\n.if (${HOST_UNAME_M} != ${MACHINE})\n\t@echo \"Won't cross-make ${.TARGET} from ${HOST_UNAME_M} to ${MACHINE} with INSTALLWORLDDIR=/\"\n\t@false\n.endif\n.endif\n\t${MAKEDIRTARGET} distrib/sets installsets \\\n\t\tINSTALLDIR=${INSTALLWORLDDIR:U/} INSTALLSETS=${INSTALLSETS:Q}\n\t${MAKEDIRTARGET} . postinstall-check DESTDIR=${INSTALLWORLDDIR}\n\t@echo   \"make ${.TARGET} started at:  ${START_TIME}\"\n\t@printf \"make ${.TARGET} finished at: \" && date\n\n#\n# Install modules from $DESTDIR to $INSTALLMODULESDIR\n#\ninstallmodules: .PHONY .MAKE\n.if (!defined(DESTDIR) || ${DESTDIR} == \"\" || ${DESTDIR} == \"/\")\n\t@echo \"Can't make ${.TARGET} to DESTDIR=/\"\n\t@false\n.endif\n.if !defined(INSTALLMODULESDIR) || \\\n    ${INSTALLMODULESDIR} == \"\" || ${INSTALLMODULESDIR} == \"/\"\n.if (${HOST_UNAME_S} != \"NetBSD\")\n\t@echo \"Won't cross-make ${.TARGET} from ${HOST_UNAME_S} to NetBSD with INSTALLMODULESDIR=/\"\n\t@false\n.endif\n.if (${HOST_UNAME_M} != ${MACHINE})\n\t@echo \"Won't cross-make ${.TARGET} from ${HOST_UNAME_M} to ${MACHINE} with INSTALLMODULESDIR=/\"\n\t@false\n.endif\n.endif\n\t${MAKEDIRTARGET} sys/modules install DESTDIR=${INSTALLMODULESDIR:U/}\n\t@echo   \"make ${.TARGET} started at:  ${START_TIME}\"\n\t@printf \"make ${.TARGET} finished at: \" && date\n\n#\n# Create sets from $DESTDIR or $NETBSDSRCDIR into $RELEASEDIR\n#\n\n.for tgt in sets sourcesets syspkgs\n${tgt}: .PHONY .MAKE\n\t${MAKEDIRTARGET} distrib/sets ${tgt}\n.endfor\n\n#\n# Build a release or snapshot (implies \"make distribution\").  Note that\n# in this case, the set lists will be checked before the tar files\n# are made.\n#\n\nrelease snapshot: .PHONY .MAKE\n\t${MAKEDIRTARGET} . distribution\n\t${MAKEDIRTARGET} etc release DISTRIBUTION_DONE=1\n\t@echo   \"make ${.TARGET} started at:  ${START_TIME}\"\n\t@printf \"make ${.TARGET} finished at: \" && date\n\n#\n# Create a CD-ROM image.\n#\n\niso-image: .PHONY\n\t${MAKEDIRTARGET} distrib iso_image\n\t${MAKEDIRTARGET} etc iso-image\n\t@echo   \"make ${.TARGET} started at:  ${START_TIME}\"\n\t@printf \"make ${.TARGET} finished at: \" && date\n\niso-image-source: .PHONY\n\t${MAKEDIRTARGET} distrib iso_image CDSOURCE=true\n\t${MAKEDIRTARGET} etc iso-image\n\t@echo   \"make ${.TARGET} started at:  ${START_TIME}\"\n\t@printf \"make ${.TARGET} finished at: \" && date\n\n#\n# Create bootable live images.\n#\n\nlive-image: .PHONY\n\t${MAKEDIRTARGET} etc live-image\n\t@echo   \"make ${.TARGET} started at:  ${START_TIME}\"\n\t@printf \"make ${.TARGET} finished at: \" && date\n\n#\n# Create bootable installation images.\n#\n\ninstall-image: .PHONY\n\t${MAKEDIRTARGET} etc install-image\n\t@echo   \"make ${.TARGET} started at:  ${START_TIME}\"\n\t@printf \"make ${.TARGET} finished at: \" && date\n\n#\n# Special components of the \"make build\" process.\n#\n\ncheck-tools: .PHONY\n.if ${TOOLCHAIN_MISSING} != \"no\" && !defined(EXTERNAL_TOOLCHAIN)\n\t@echo '*** WARNING:  Building on MACHINE=${MACHINE} with missing toolchain.'\n\t@echo '*** May result in a failed build or corrupt binaries!'\n.elif defined(EXTERNAL_TOOLCHAIN)\n\t@echo '*** Using external toolchain rooted at ${EXTERNAL_TOOLCHAIN}.'\n.endif\n.if defined(NBUILDJOBS)\n\t@echo '*** WARNING: NBUILDJOBS is obsolete; use -j directly instead!'\n.endif\n\n# Delete or sanitise a leftover METALOG from a previous build.\nclean_METALOG: .PHONY .MAKE\n.if ${MKUPDATE} != \"no\"\n\t${MAKEDIRTARGET} distrib/sets clean_METALOG\n.endif\n\ndo-distrib-dirs: .PHONY .MAKE\n.if !defined(DESTDIR) || ${DESTDIR} == \"\"\n\t${MAKEDIRTARGET} etc distrib-dirs DESTDIR=/\n.else\n\t${MAKEDIRTARGET} etc distrib-dirs DESTDIR=${DESTDIR}\n.endif\n\n.for targ in cleandir obj includes\ndo-${targ}: .PHONY ${targ}\n\t@true\n.endfor\n\ndo-tools: .PHONY .MAKE\n\t${MAKEDIRTARGET} tools build_install\n\ndo-lib: .PHONY .MAKE\n\t${MAKEDIRTARGET} lib build_install\n\ndo-compat-lib: .PHONY .MAKE\n\t${MAKEDIRTARGET} compat build_install BOOTSTRAP_SUBDIRS=\"../../../lib\"\n\ndo-top-obj: .PHONY .MAKE\n\t${MAKEDIRTARGET} . obj NOSUBDIR=\n\ndo-tools-obj: .PHONY .MAKE\n\t${MAKEDIRTARGET} tools obj\n\ndo-build: .PHONY .MAKE\n.for targ in dependall install\n\t${MAKEDIRTARGET} . ${targ} BUILD_tools=no BUILD_lib=no\n.endfor\n\ndo-x11: .PHONY .MAKE\n.if ${MKX11} != \"no\"\n\t${MAKEDIRTARGET} external/mit/xorg/tools all\n\t${MAKEDIRTARGET} external/mit/xorg/lib build_install\n.if ${MKCOMPATX11} != \"no\"\n\t${MAKEDIRTARGET} compat build_install BOOTSTRAP_SUBDIRS=\"../../../external/mit/xorg/lib\"\n.endif\n.else\n\t@echo \"MKX11 is not enabled\"\n\t@false\n.endif\n\ndo-extsrc: .PHONY .MAKE\n.if ${MKEXTSRC} != \"no\"\n\t${MAKEDIRTARGET} extsrc build\n.else\n\t@echo \"MKEXTSRC is not enabled\"\n\t@false\n.endif\n\ndo-obsolete: .PHONY .MAKE\n\t${MAKEDIRTARGET} etc install-obsolete-lists\n\n#\n# Speedup stubs for some subtrees that don't need to run these rules.\n# (Tells <bsd.subdir.mk> not to recurse for them.)\n#\n\n.for dir in bin etc distrib games libexec regress sbin usr.bin usr.sbin tools\nincludes-${dir}: .PHONY\n\t@true\n.endfor\n.for dir in etc distrib regress\ninstall-${dir}: .PHONY\n\t@true\n.endfor\n\n.if defined(__MINIX)\nSRCTAR=src.tar.gz\ndo-installsrc:\n\tcd ${.CURDIR} && git ls-tree -r HEAD --name-only | tar czf ${.OBJDIR}/$(SRCTAR) -T -\n\t${INSTALL_FILE} ${.OBJDIR}/$(SRCTAR) ${DESTDIR}/usr/src/\n.endif # defined(__MINIX)\n\n#\n# XXX this needs to change when distrib Makefiles are recursion compliant\n# XXX many distrib subdirs need \"cd etc && make snap_pre snap_kern\" first...\n#\ndependall-distrib depend-distrib all-distrib: .PHONY\n\t@true\n\n.include <bsd.obj.mk>\n.include <bsd.kernobj.mk>\n.include <bsd.subdir.mk>\n"
        },
        {
          "name": "Makefile.inc",
          "type": "blob",
          "size": 0.34375,
          "content": "#\t$NetBSD: Makefile.inc,v 1.4 2002/04/10 14:53:43 lukem Exp $\n\n.ifndef ABSTOP\nABSTOP!= cd ${.PARSEDIR}; pwd\n\n.if (${.PARSEDIR} == ${.CURDIR})\nRELTOP:= .\n.else\nRELTOP:= ${.PARSEDIR:S,^${.CURDIR},,}\n.endif\n\n# you can set BSD{SRC,OBJ}DIR in Makefile.local.inc\n.if exists(${ABSTOP}/Makefile.local.inc)\n.include \"${ABSTOP}/Makefile.local.inc\"\n.endif\n.endif\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 65.3505859375,
          "content": "#! /usr/bin/env sh\n#\t$NetBSD: build.sh,v 1.308 2015/06/27 06:00:28 matt Exp $\n#\n# Copyright (c) 2001-2011 The NetBSD Foundation, Inc.\n# All rights reserved.\n#\n# This code is derived from software contributed to The NetBSD Foundation\n# by Todd Vierling and Luke Mewburn.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions\n# are met:\n# 1. Redistributions of source code must retain the above copyright\n#    notice, this list of conditions and the following disclaimer.\n# 2. Redistributions in binary form must reproduce the above copyright\n#    notice, this list of conditions and the following disclaimer in the\n#    documentation and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS\n# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS\n# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n# POSSIBILITY OF SUCH DAMAGE.\n#\n#\n# Top level build wrapper, to build or cross-build NetBSD.\n#\n\n#\n# {{{ Begin shell feature tests.\n#\n# We try to determine whether or not this script is being run under\n# a shell that supports the features that we use.  If not, we try to\n# re-exec the script under another shell.  If we can't find another\n# suitable shell, then we print a message and exit.\n#\n\nerrmsg=''\t\t# error message, if not empty\nshelltest=false\t\t# if true, exit after testing the shell\nre_exec_allowed=true\t# if true, we may exec under another shell\n\n# Parse special command line options in $1.  These special options are\n# for internal use only, are not documented, and are not valid anywhere\n# other than $1.\ncase \"$1\" in\n\"--shelltest\")\n    shelltest=true\n    re_exec_allowed=false\n    shift\n    ;;\n\"--no-re-exec\")\n    re_exec_allowed=false\n    shift\n    ;;\nesac\n\n# Solaris /bin/sh, and other SVR4 shells, do not support \"!\".\n# This is the first feature that we test, because subsequent\n# tests use \"!\".\n#\nif test -z \"$errmsg\"; then\n    if ( eval '! false' ) >/dev/null 2>&1 ; then\n\t:\n    else\n\terrmsg='Shell does not support \"!\".'\n    fi\nfi\n\n# Does the shell support functions?\n#\nif test -z \"$errmsg\"; then\n    if ! (\n\teval 'somefunction() { : ; }'\n\t) >/dev/null 2>&1\n    then\n\terrmsg='Shell does not support functions.'\n    fi\nfi\n\n# Does the shell support the \"local\" keyword for variables in functions?\n#\n# Local variables are not required by SUSv3, but some scripts run during\n# the NetBSD build use them.\n#\n# ksh93 fails this test; it uses an incompatible syntax involving the\n# keywords 'function' and 'typeset'.\n#\nif test -z \"$errmsg\"; then\n    if ! (\n\teval 'f() { local v=2; }; v=1; f && test x\"$v\" = x\"1\"'\n\t) >/dev/null 2>&1\n    then\n\terrmsg='Shell does not support the \"local\" keyword in functions.'\n    fi\nfi\n\n# Does the shell support ${var%suffix}, ${var#prefix}, and their variants?\n#\n# We don't bother testing for ${var+value}, ${var-value}, or their variants,\n# since shells without those are sure to fail other tests too.\n#\nif test -z \"$errmsg\"; then\n    if ! (\n\teval 'var=a/b/c ;\n\t      test x\"${var#*/};${var##*/};${var%/*};${var%%/*}\" = \\\n\t\t   x\"b/c;c;a/b;a\" ;'\n\t) >/dev/null 2>&1\n    then\n\terrmsg='Shell does not support \"${var%suffix}\" or \"${var#prefix}\".'\n    fi\nfi\n\n# Does the shell support IFS?\n#\n# zsh in normal mode (as opposed to \"emulate sh\" mode) fails this test.\n#\nif test -z \"$errmsg\"; then\n    if ! (\n\teval 'IFS=: ; v=\":a b::c\" ; set -- $v ; IFS=+ ;\n\t\ttest x\"$#;$1,$2,$3,$4;$*\" = x\"4;,a b,,c;+a b++c\"'\n\t) >/dev/null 2>&1\n    then\n\terrmsg='Shell does not support IFS word splitting.'\n    fi\nfi\n\n# Does the shell support ${1+\"$@\"}?\n#\n# Some versions of zsh fail this test, even in \"emulate sh\" mode.\n#\nif test -z \"$errmsg\"; then\n    if ! (\n\teval 'set -- \"a a a\" \"b b b\"; set -- ${1+\"$@\"};\n\t      test x\"$#;$1;$2\" = x\"2;a a a;b b b\";'\n\t) >/dev/null 2>&1\n    then\n\terrmsg='Shell does not support ${1+\"$@\"}.'\n    fi\nfi\n\n# Does the shell support $(...) command substitution?\n#\nif test -z \"$errmsg\"; then\n    if ! (\n\teval 'var=$(echo abc); test x\"$var\" = x\"abc\"'\n\t) >/dev/null 2>&1\n    then\n\terrmsg='Shell does not support \"$(...)\" command substitution.'\n    fi\nfi\n\n# Does the shell support $(...) command substitution with\n# unbalanced parentheses?\n#\n# Some shells known to fail this test are:  NetBSD /bin/ksh (as of 2009-12),\n# bash-3.1, pdksh-5.2.14, zsh-4.2.7 in \"emulate sh\" mode.\n#\nif test -z \"$errmsg\"; then\n    if ! (\n\teval 'var=$(case x in x) echo abc;; esac); test x\"$var\" = x\"abc\"'\n\t) >/dev/null 2>&1\n    then\n\t# XXX: This test is ignored because so many shells fail it; instead,\n\t#      the NetBSD build avoids using the problematic construct.\n\t: ignore 'Shell does not support \"$(...)\" with unbalanced \")\".'\n    fi\nfi\n\n# Does the shell support getopts or getopt?\n#\nif test -z \"$errmsg\"; then\n    if ! (\n\teval 'type getopts || type getopt'\n\t) >/dev/null 2>&1\n    then\n\terrmsg='Shell does not support getopts or getopt.'\n    fi\nfi\n\n#\n# If shelltest is true, exit now, reporting whether or not the shell is good.\n#\nif $shelltest; then\n    if test -n \"$errmsg\"; then\n\techo >&2 \"$0: $errmsg\"\n\texit 1\n    else\n\texit 0\n    fi\nfi\n\n#\n# If the shell was bad, try to exec a better shell, or report an error.\n#\n# Loops are broken by passing an extra \"--no-re-exec\" flag to the new\n# instance of this script.\n#\nif test -n \"$errmsg\"; then\n    if $re_exec_allowed; then\n\tfor othershell in \\\n\t    \"${HOST_SH}\" /usr/xpg4/bin/sh ksh ksh88 mksh pdksh dash bash\n\t    # NOTE: some shells known not to work are:\n\t    # any shell using csh syntax;\n\t    # Solaris /bin/sh (missing many modern features);\n\t    # ksh93 (incompatible syntax for local variables);\n\t    # zsh (many differences, unless run in compatibility mode).\n\tdo\n\t    test -n \"$othershell\" || continue\n\t    if eval 'type \"$othershell\"' >/dev/null 2>&1 \\\n\t\t&& \"$othershell\" \"$0\" --shelltest >/dev/null 2>&1\n\t    then\n\t\tcat <<EOF\n$0: $errmsg\n$0: Retrying under $othershell\nEOF\n\t\tHOST_SH=\"$othershell\"\n\t\texport HOST_SH\n\t\texec $othershell \"$0\" --no-re-exec \"$@\" # avoid ${1+\"$@\"}\n\t    fi\n\t    # If HOST_SH was set, but failed the test above,\n\t    # then give up without trying any other shells.\n\t    test x\"${othershell}\" = x\"${HOST_SH}\" && break\n\tdone\n    fi\n\n    #\n    # If we get here, then the shell is bad, and we either could not\n    # find a replacement, or were not allowed to try a replacement.\n    #\n    cat <<EOF\n$0: $errmsg\n\nThe NetBSD build system requires a shell that supports modern POSIX\nfeatures, as well as the \"local\" keyword in functions (which is a\nwidely-implemented but non-standardised feature).\n\nPlease re-run this script under a suitable shell.  For example:\n\n\t/path/to/suitable/shell $0 ...\n\nThe above command will usually enable build.sh to automatically set\nHOST_SH=/path/to/suitable/shell, but if that fails, then you may also\nneed to explicitly set the HOST_SH environment variable, as follows:\n\n\tHOST_SH=/path/to/suitable/shell\n\texport HOST_SH\n\t\\${HOST_SH} $0 ...\nEOF\n    exit 1\nfi\n\n#\n# }}} End shell feature tests.\n#\n\nprogname=${0##*/}\ntoppid=$$\nresults=/dev/null\ntab='\t'\nnl='\n'\ntrap \"exit 1\" 1 2 3 15\n\nbomb()\n{\n\tcat >&2 <<ERRORMESSAGE\n\nERROR: $@\n*** BUILD ABORTED ***\nERRORMESSAGE\n\tkill ${toppid}\t\t# in case we were invoked from a subshell\n\texit 1\n}\n\n# Quote args to make them safe in the shell.\n# Usage: quotedlist=\"$(shell_quote args...)\"\n#\n# After building up a quoted list, use it by evaling it inside\n# double quotes, like this:\n#    eval \"set -- $quotedlist\"\n# or like this:\n#    eval \"\\$command $quotedlist \\$filename\"\n#\nshell_quote()\n{(\n\tlocal result=''\n\tlocal arg qarg\n\tLC_COLLATE=C ; export LC_COLLATE # so [a-zA-Z0-9] works in ASCII\n\tfor arg in \"$@\" ; do\n\t\tcase \"${arg}\" in\n\t\t'')\n\t\t\tqarg=\"''\"\n\t\t\t;;\n\t\t*[!-./a-zA-Z0-9]*)\n\t\t\t# Convert each embedded ' to '\\'',\n\t\t\t# then insert ' at the beginning of the first line,\n\t\t\t# and append ' at the end of the last line.\n\t\t\t# Finally, elide unnecessary '' pairs at the\n\t\t\t# beginning and end of the result and as part of\n\t\t\t# '\\'''\\'' sequences that result from multiple\n\t\t\t# adjacent quotes in he input.\n\t\t\tqarg=\"$(printf \"%s\\n\" \"$arg\" | \\\n\t\t\t    ${SED:-sed} -e \"s/'/'\\\\\\\\''/g\" \\\n\t\t\t\t-e \"1s/^/'/\" -e \"\\$s/\\$/'/\" \\\n\t\t\t\t-e \"1s/^''//\" -e \"\\$s/''\\$//\" \\\n\t\t\t\t-e \"s/'''/'/g\"\n\t\t\t\t)\"\n\t\t\t;;\n\t\t*)\n\t\t\t# Arg is not the empty string, and does not contain\n\t\t\t# any unsafe characters.  Leave it unchanged for\n\t\t\t# readability.\n\t\t\tqarg=\"${arg}\"\n\t\t\t;;\n\t\tesac\n\t\tresult=\"${result}${result:+ }${qarg}\"\n\tdone\n\tprintf \"%s\\n\" \"$result\"\n)}\n\nstatusmsg()\n{\n\t${runcmd} echo \"===> $@\" | tee -a \"${results}\"\n}\n\nstatusmsg2()\n{\n\tlocal msg\n\n\tmsg=\"${1}\"\n\tshift\n\tcase \"${msg}\" in\n\t????????????????*)\t;;\n\t??????????*)\t\tmsg=\"${msg}      \";;\n\t?????*)\t\t\tmsg=\"${msg}           \";;\n\t*)\t\t\tmsg=\"${msg}                \";;\n\tesac\n\tcase \"${msg}\" in\n\t?????????????????????*)\t;;\n\t????????????????????)\tmsg=\"${msg} \";;\n\t???????????????????)\tmsg=\"${msg}  \";;\n\t??????????????????)\tmsg=\"${msg}   \";;\n\t?????????????????)\tmsg=\"${msg}    \";;\n\t????????????????)\tmsg=\"${msg}     \";;\n\tesac\n\tstatusmsg \"${msg}$*\"\n}\n\nwarning()\n{\n\tstatusmsg \"Warning: $@\"\n}\n\n# Find a program in the PATH, and print the result.  If not found,\n# print a default.  If $2 is defined (even if it is an empty string),\n# then that is the default; otherwise, $1 is used as the default.\nfind_in_PATH()\n{\n\tlocal prog=\"$1\"\n\tlocal result=\"${2-\"$1\"}\"\n\tlocal oldIFS=\"${IFS}\"\n\tlocal dir\n\tIFS=\":\"\n\tfor dir in ${PATH}; do\n\t\tif [ -x \"${dir}/${prog}\" ]; then\n\t\t\tresult=\"${dir}/${prog}\"\n\t\t\tbreak\n\t\tfi\n\tdone\n\tIFS=\"${oldIFS}\"\n\techo \"${result}\"\n}\n\n# Try to find a working POSIX shell, and set HOST_SH to refer to it.\n# Assumes that uname_s, uname_m, and PWD have been set.\nset_HOST_SH()\n{\n\t# Even if ${HOST_SH} is already defined, we still do the\n\t# sanity checks at the end.\n\n\t# Solaris has /usr/xpg4/bin/sh.\n\t#\n\t[ -z \"${HOST_SH}\" ] && [ x\"${uname_s}\" = x\"SunOS\" ] && \\\n\t\t[ -x /usr/xpg4/bin/sh ] && HOST_SH=\"/usr/xpg4/bin/sh\"\n\n\t# Try to get the name of the shell that's running this script,\n\t# by parsing the output from \"ps\".  We assume that, if the host\n\t# system's ps command supports -o comm at all, it will do so\n\t# in the usual way: a one-line header followed by a one-line\n\t# result, possibly including trailing white space.  And if the\n\t# host system's ps command doesn't support -o comm, we assume\n\t# that we'll get an error message on stderr and nothing on\n\t# stdout.  (We don't try to use ps -o 'comm=' to suppress the\n\t# header line, because that is less widely supported.)\n\t#\n\t# If we get the wrong result here, the user can override it by\n\t# specifying HOST_SH in the environment.\n\t#\n\t[ -z \"${HOST_SH}\" ] && HOST_SH=\"$(\n\t\t(ps -p $$ -o comm | sed -ne \"2s/[ ${tab}]*\\$//p\") 2>/dev/null )\"\n\n\t# If nothing above worked, use \"sh\".  We will later find the\n\t# first directory in the PATH that has a \"sh\" program.\n\t#\n\t[ -z \"${HOST_SH}\" ] && HOST_SH=\"sh\"\n\n\t# If the result so far is not an absolute path, try to prepend\n\t# PWD or search the PATH.\n\t#\n\tcase \"${HOST_SH}\" in\n\t/*)\t:\n\t\t;;\n\t*/*)\tHOST_SH=\"${PWD}/${HOST_SH}\"\n\t\t;;\n\t*)\tHOST_SH=\"$(find_in_PATH \"${HOST_SH}\")\"\n\t\t;;\n\tesac\n\n\t# If we don't have an absolute path by now, bomb.\n\t#\n\tcase \"${HOST_SH}\" in\n\t/*)\t:\n\t\t;;\n\t*)\tbomb \"HOST_SH=\\\"${HOST_SH}\\\" is not an absolute path.\"\n\t\t;;\n\tesac\n\n\t# If HOST_SH is not executable, bomb.\n\t#\n\t[ -x \"${HOST_SH}\" ] ||\n\t    bomb \"HOST_SH=\\\"${HOST_SH}\\\" is not executable.\"\n\n\t# If HOST_SH fails tests, bomb.\n\t# (\"$0\" may be a path that is no longer valid, because we have\n\t# performed \"cd $(dirname $0)\", so don't use $0 here.)\n\t#\n\t\"${HOST_SH}\" build.sh --shelltest ||\n\t    bomb \"HOST_SH=\\\"${HOST_SH}\\\" failed functionality tests.\"\n}\n\n# initdefaults --\n# Set defaults before parsing command line options.\n#\ninitdefaults()\n{\n\tmakeenv=\n\tmakewrapper=\n\tmakewrappermachine=\n\truncmd=\n\toperations=\n\tremovedirs=\n\n\t[ -d usr.bin/make ] || cd \"$(dirname $0)\"\n\t[ -d usr.bin/make ] ||\n\t    bomb \"build.sh must be run from the top source level\"\n\t[ -f share/mk/bsd.own.mk ] ||\n\t    bomb \"src/share/mk is missing; please re-fetch the source tree\"\n\n\t# Set various environment variables to known defaults,\n\t# to minimize (cross-)build problems observed \"in the field\".\n\t#\n\t# LC_ALL=C must be set before we try to parse the output from\n\t# any command.  Other variables are set (or unset) here, before\n\t# we parse command line arguments.\n\t#\n\t# These variables can be overridden via \"-V var=value\" if\n\t# you know what you are doing.\n\t#\n\tunsetmakeenv INFODIR\n\tunsetmakeenv LESSCHARSET\n\tunsetmakeenv MAKEFLAGS\n\tunsetmakeenv TERMINFO\n\tsetmakeenv LC_ALL C\n\n\t# Find information about the build platform.  This should be\n\t# kept in sync with _HOST_OSNAME, _HOST_OSREL, and _HOST_ARCH\n\t# variables in share/mk/bsd.sys.mk.\n\t#\n\t# Note that \"uname -p\" is not part of POSIX, but we want uname_p\n\t# to be set to the host MACHINE_ARCH, if possible.  On systems\n\t# where \"uname -p\" fails, prints \"unknown\", or prints a string\n\t# that does not look like an identifier, fall back to using the\n\t# output from \"uname -m\" instead.\n\t#\n\tuname_s=$(uname -s 2>/dev/null)\n\tuname_r=$(uname -r 2>/dev/null)\n\tuname_m=$(uname -m 2>/dev/null)\n\tuname_p=$(uname -p 2>/dev/null || echo \"unknown\")\n\tcase \"${uname_p}\" in\n\t''|unknown|*[^-_A-Za-z0-9]*) uname_p=\"${uname_m}\" ;;\n\tesac\n\n\tid_u=$(id -u 2>/dev/null || /usr/xpg4/bin/id -u 2>/dev/null)\n\n\t# If $PWD is a valid name of the current directory, POSIX mandates\n\t# that pwd return it by default which causes problems in the\n\t# presence of symlinks.  Unsetting PWD is simpler than changing\n\t# every occurrence of pwd to use -P.\n\t#\n\t# XXX Except that doesn't work on Solaris. Or many Linuces.\n\t#\n\tunset PWD\n\tTOP=$(/bin/pwd -P 2>/dev/null || /bin/pwd 2>/dev/null)\n\n\t# The user can set HOST_SH in the environment, or we try to\n\t# guess an appropriate value.  Then we set several other\n\t# variables from HOST_SH.\n\t#\n\tset_HOST_SH\n\tsetmakeenv HOST_SH \"${HOST_SH}\"\n\tsetmakeenv BSHELL \"${HOST_SH}\"\n\tsetmakeenv CONFIG_SHELL \"${HOST_SH}\"\n\n\t# Set defaults.\n\t#\n\ttoolprefix=nb\n\n\t# Some systems have a small ARG_MAX.  -X prevents make(1) from\n\t# exporting variables in the environment redundantly.\n\t#\n\tcase \"${uname_s}\" in\n\tDarwin | FreeBSD | CYGWIN*)\n\t\tMAKEFLAGS=\"-X ${MAKEFLAGS}\"\n\t\t;;\n\tesac\n\n\t# do_{operation}=true if given operation is requested.\n\t#\n\tdo_expertmode=false\n\tdo_rebuildmake=false\n\tdo_removedirs=false\n\tdo_tools=false\n\tdo_cleandir=false\n\tdo_obj=false\n\tdo_build=false\n\tdo_distribution=false\n\tdo_release=false\n\tdo_kernel=false\n\tdo_releasekernel=false\n\tdo_kernels=false\n\tdo_modules=false\n\tdo_installmodules=false\n\tdo_install=false\n\tdo_sets=false\n\tdo_sourcesets=false\n\tdo_syspkgs=false\n\tdo_iso_image=false\n\tdo_iso_image_source=false\n\tdo_live_image=false\n\tdo_install_image=false\n\tdo_disk_image=false\n\tdo_show_params=false\n\tdo_rump=false\n\n\t# done_{operation}=true if given operation has been done.\n\t#\n\tdone_rebuildmake=false\n\n\t# Create scratch directory\n\t#\n\ttmpdir=\"${TMPDIR-/tmp}/nbbuild$$\"\n\tmkdir \"${tmpdir}\" || bomb \"Cannot mkdir: ${tmpdir}\"\n\ttrap \"cd /; rm -r -f \\\"${tmpdir}\\\"\" 0\n\tresults=\"${tmpdir}/build.sh.results\"\n\n\t# Set source directories\n\t#\n\tsetmakeenv NETBSDSRCDIR \"${TOP}\"\n\n\t# Make sure KERNOBJDIR is an absolute path if defined\n\t#\n\tcase \"${KERNOBJDIR}\" in\n\t''|/*)\t;;\n\t*)\tKERNOBJDIR=\"${TOP}/${KERNOBJDIR}\"\n\t\tsetmakeenv KERNOBJDIR \"${KERNOBJDIR}\"\n\t\t;;\n\tesac\n\n\t# Find the version of NetBSD\n\t#\n\tDISTRIBVER=\"$(${HOST_SH} ${TOP}/sys/conf/osrelease.sh)\"\n\n\t# Set the BUILDSEED to NetBSD-\"N\"\n\t#\n\tsetmakeenv BUILDSEED \"MINIX-$(${HOST_SH} ${TOP}/sys/conf/osrelease.sh -m)\"\n\n\t# Set MKARZERO to \"yes\"\n\t#\n\tsetmakeenv MKARZERO \"yes\"\n\n}\n\n# valid_MACHINE_ARCH -- A multi-line string, listing all valid\n# MACHINE/MACHINE_ARCH pairs.\n#\n# Each line contains a MACHINE and MACHINE_ARCH value, an optional ALIAS\n# which may be used to refer to the MACHINE/MACHINE_ARCH pair, and an\n# optional DEFAULT or NO_DEFAULT keyword.\n#\n# When a MACHINE corresponds to multiple possible values of\n# MACHINE_ARCH, then this table should list all allowed combinations.\n# If the MACHINE is associated with a default MACHINE_ARCH (to be\n# used when the user specifies the MACHINE but fails to specify the\n# MACHINE_ARCH), then one of the lines should have the \"DEFAULT\"\n# keyword.  If there is no default MACHINE_ARCH for a particular\n# MACHINE, then there should be a line with the \"NO_DEFAULT\" keyword,\n# and with a blank MACHINE_ARCH.\n#\nvalid_MACHINE_ARCH='\nMACHINE=acorn26\t\tMACHINE_ARCH=arm\nMACHINE=acorn32\t\tMACHINE_ARCH=arm\nMACHINE=algor\t\tMACHINE_ARCH=mips64el\tALIAS=algor64\nMACHINE=algor\t\tMACHINE_ARCH=mipsel\tDEFAULT\nMACHINE=alpha\t\tMACHINE_ARCH=alpha\nMACHINE=amd64\t\tMACHINE_ARCH=x86_64\nMACHINE=amiga\t\tMACHINE_ARCH=m68k\nMACHINE=amigappc\tMACHINE_ARCH=powerpc\nMACHINE=arc\t\tMACHINE_ARCH=mips64el\tALIAS=arc64\nMACHINE=arc\t\tMACHINE_ARCH=mipsel\tDEFAULT\nMACHINE=atari\t\tMACHINE_ARCH=m68k\nMACHINE=bebox\t\tMACHINE_ARCH=powerpc\nMACHINE=cats\t\tMACHINE_ARCH=arm\tALIAS=ocats\nMACHINE=cats\t\tMACHINE_ARCH=earmv4\tALIAS=ecats DEFAULT\nMACHINE=cesfic\t\tMACHINE_ARCH=m68k\nMACHINE=cobalt\t\tMACHINE_ARCH=mips64el\tALIAS=cobalt64\nMACHINE=cobalt\t\tMACHINE_ARCH=mipsel\tDEFAULT\nMACHINE=dreamcast\tMACHINE_ARCH=sh3el\nMACHINE=emips\t\tMACHINE_ARCH=mipseb\nMACHINE=epoc32\t\tMACHINE_ARCH=arm\nMACHINE=evbarm\t\tMACHINE_ARCH=arm\tALIAS=evboarm-el\nMACHINE=evbarm\t\tMACHINE_ARCH=armeb\tALIAS=evboarm-eb\nMACHINE=evbarm\t\tMACHINE_ARCH=earm\tALIAS=evbearm-el DEFAULT\nMACHINE=evbarm\t\tMACHINE_ARCH=earmeb\tALIAS=evbearm-eb\nMACHINE=evbarm\t\tMACHINE_ARCH=earmhf\tALIAS=evbearmhf-el\nMACHINE=evbarm\t\tMACHINE_ARCH=earmhfeb\tALIAS=evbearmhf-eb\nMACHINE=evbarm\t\tMACHINE_ARCH=earmv4\tALIAS=evbearmv4-el\nMACHINE=evbarm\t\tMACHINE_ARCH=earmv4eb\tALIAS=evbearmv4-eb\nMACHINE=evbarm\t\tMACHINE_ARCH=earmv5\tALIAS=evbearmv5-el\nMACHINE=evbarm\t\tMACHINE_ARCH=earmv5eb\tALIAS=evbearmv5-eb\nMACHINE=evbarm\t\tMACHINE_ARCH=earmv6\tALIAS=evbearmv6-el\nMACHINE=evbarm\t\tMACHINE_ARCH=earmv6hf\tALIAS=evbearmv6hf-el\nMACHINE=evbarm\t\tMACHINE_ARCH=earmv6eb\tALIAS=evbearmv6-eb\nMACHINE=evbarm\t\tMACHINE_ARCH=earmv6hfeb\tALIAS=evbearmv6hf-eb\nMACHINE=evbarm\t\tMACHINE_ARCH=earmv7\tALIAS=evbearmv7-el\nMACHINE=evbarm\t\tMACHINE_ARCH=earmv7eb\tALIAS=evbearmv7-eb\nMACHINE=evbarm\t\tMACHINE_ARCH=earmv7hf\tALIAS=evbearmv7hf-el\nMACHINE=evbarm\t\tMACHINE_ARCH=earmv7hfeb\tALIAS=evbearmv7hf-eb\nMACHINE=evbarm64\tMACHINE_ARCH=aarch64\tALIAS=evbarm64-el DEFAULT\nMACHINE=evbarm64\tMACHINE_ARCH=aarch64eb\tALIAS=evbarm64-eb\nMACHINE=evbcf\t\tMACHINE_ARCH=coldfire\nMACHINE=evbmips\t\tMACHINE_ARCH=\t\tNO_DEFAULT\nMACHINE=evbmips\t\tMACHINE_ARCH=mips64eb\tALIAS=evbmips64-eb\nMACHINE=evbmips\t\tMACHINE_ARCH=mips64el\tALIAS=evbmips64-el\nMACHINE=evbmips\t\tMACHINE_ARCH=mipseb\tALIAS=evbmips-eb\nMACHINE=evbmips\t\tMACHINE_ARCH=mipsel\tALIAS=evbmips-el\nMACHINE=evbppc\t\tMACHINE_ARCH=powerpc\tDEFAULT\nMACHINE=evbppc\t\tMACHINE_ARCH=powerpc64\tALIAS=evbppc64\nMACHINE=evbsh3\t\tMACHINE_ARCH=\t\tNO_DEFAULT\nMACHINE=evbsh3\t\tMACHINE_ARCH=sh3eb\tALIAS=evbsh3-eb\nMACHINE=evbsh3\t\tMACHINE_ARCH=sh3el\tALIAS=evbsh3-el\nMACHINE=ews4800mips\tMACHINE_ARCH=mipseb\nMACHINE=hp300\t\tMACHINE_ARCH=m68k\nMACHINE=hppa\t\tMACHINE_ARCH=hppa\nMACHINE=hpcarm\t\tMACHINE_ARCH=arm\tALIAS=hpcoarm\nMACHINE=hpcarm\t\tMACHINE_ARCH=earmv4\tALIAS=hpcearm DEFAULT\nMACHINE=hpcmips\t\tMACHINE_ARCH=mipsel\nMACHINE=hpcsh\t\tMACHINE_ARCH=sh3el\nMACHINE=i386\t\tMACHINE_ARCH=i386\nMACHINE=ia64\t\tMACHINE_ARCH=ia64\nMACHINE=ibmnws\t\tMACHINE_ARCH=powerpc\nMACHINE=iyonix\t\tMACHINE_ARCH=arm\tALIAS=oiyonix\nMACHINE=iyonix\t\tMACHINE_ARCH=earm\tALIAS=eiyonix DEFAULT\nMACHINE=landisk\t\tMACHINE_ARCH=sh3el\nMACHINE=luna68k\t\tMACHINE_ARCH=m68k\nMACHINE=mac68k\t\tMACHINE_ARCH=m68k\nMACHINE=macppc\t\tMACHINE_ARCH=powerpc\tDEFAULT\nMACHINE=macppc\t\tMACHINE_ARCH=powerpc64\tALIAS=macppc64\nMACHINE=mipsco\t\tMACHINE_ARCH=mipseb\nMACHINE=mmeye\t\tMACHINE_ARCH=sh3eb\nMACHINE=mvme68k\t\tMACHINE_ARCH=m68k\nMACHINE=mvmeppc\t\tMACHINE_ARCH=powerpc\nMACHINE=netwinder\tMACHINE_ARCH=arm\tALIAS=onetwinder\nMACHINE=netwinder\tMACHINE_ARCH=earmv4\tALIAS=enetwinder DEFAULT\nMACHINE=news68k\t\tMACHINE_ARCH=m68k\nMACHINE=newsmips\tMACHINE_ARCH=mipseb\nMACHINE=next68k\t\tMACHINE_ARCH=m68k\nMACHINE=ofppc\t\tMACHINE_ARCH=powerpc\tDEFAULT\nMACHINE=ofppc\t\tMACHINE_ARCH=powerpc64\tALIAS=ofppc64\nMACHINE=or1k\t\tMACHINE_ARCH=or1k\nMACHINE=playstation2\tMACHINE_ARCH=mipsel\nMACHINE=pmax\t\tMACHINE_ARCH=mips64el\tALIAS=pmax64\nMACHINE=pmax\t\tMACHINE_ARCH=mipsel\tDEFAULT\nMACHINE=prep\t\tMACHINE_ARCH=powerpc\nMACHINE=riscv\t\tMACHINE_ARCH=riscv64\tALIAS=riscv64 DEFAULT\nMACHINE=riscv\t\tMACHINE_ARCH=riscv32\tALIAS=riscv32\nMACHINE=rs6000\t\tMACHINE_ARCH=powerpc\nMACHINE=sandpoint\tMACHINE_ARCH=powerpc\nMACHINE=sbmips\t\tMACHINE_ARCH=\t\tNO_DEFAULT\nMACHINE=sbmips\t\tMACHINE_ARCH=mips64eb\tALIAS=sbmips64-eb\nMACHINE=sbmips\t\tMACHINE_ARCH=mips64el\tALIAS=sbmips64-el\nMACHINE=sbmips\t\tMACHINE_ARCH=mipseb\tALIAS=sbmips-eb\nMACHINE=sbmips\t\tMACHINE_ARCH=mipsel\tALIAS=sbmips-el\nMACHINE=sgimips\t\tMACHINE_ARCH=mips64eb\tALIAS=sgimips64\nMACHINE=sgimips\t\tMACHINE_ARCH=mipseb\tDEFAULT\nMACHINE=shark\t\tMACHINE_ARCH=arm\tALIAS=oshark\nMACHINE=shark\t\tMACHINE_ARCH=earmv4\tALIAS=eshark DEFAULT\nMACHINE=sparc\t\tMACHINE_ARCH=sparc\nMACHINE=sparc64\t\tMACHINE_ARCH=sparc64\nMACHINE=sun2\t\tMACHINE_ARCH=m68000\nMACHINE=sun3\t\tMACHINE_ARCH=m68k\nMACHINE=vax\t\tMACHINE_ARCH=vax\nMACHINE=x68k\t\tMACHINE_ARCH=m68k\nMACHINE=zaurus\t\tMACHINE_ARCH=arm\tALIAS=ozaurus\nMACHINE=zaurus\t\tMACHINE_ARCH=earm\tALIAS=ezaurus DEFAULT\n'\n\n# getarch -- find the default MACHINE_ARCH for a MACHINE,\n# or convert an alias to a MACHINE/MACHINE_ARCH pair.\n#\n# Saves the original value of MACHINE in makewrappermachine before\n# alias processing.\n#\n# Sets MACHINE and MACHINE_ARCH if the input MACHINE value is\n# recognised as an alias, or recognised as a machine that has a default\n# MACHINE_ARCH (or that has only one possible MACHINE_ARCH).\n#\n# Leaves MACHINE and MACHINE_ARCH unchanged if MACHINE is recognised\n# as being associated with multiple MACHINE_ARCH values with no default.\n#\n# Bombs if MACHINE is not recognised.\n#\ngetarch()\n{\n\tlocal IFS\n\tlocal found=\"\"\n\tlocal line\n\n\tIFS=\"${nl}\"\n\tmakewrappermachine=\"${MACHINE}\"\n\tfor line in ${valid_MACHINE_ARCH}; do\n\t\tline=\"${line%%#*}\" # ignore comments\n\t\tline=\"$( IFS=\" ${tab}\" ; echo $line )\" # normalise white space\n\t\tcase \"${line} \" in\n\t\t\" \")\n\t\t\t# skip blank lines or comment lines\n\t\t\tcontinue\n\t\t\t;;\n\t\t*\" ALIAS=${MACHINE} \"*)\n\t\t\t# Found a line with a matching ALIAS=<alias>.\n\t\t\tfound=\"$line\"\n\t\t\tbreak\n\t\t\t;;\n\t\t\"MACHINE=${MACHINE} \"*\" NO_DEFAULT\"*)\n\t\t\t# Found an explicit \"NO_DEFAULT\" for this MACHINE.\n\t\t\tfound=\"$line\"\n\t\t\tbreak\n\t\t\t;;\n\t\t\"MACHINE=${MACHINE} \"*\" DEFAULT\"*)\n\t\t\t# Found an explicit \"DEFAULT\" for this MACHINE.\n\t\t\tfound=\"$line\"\n\t\t\tbreak\n\t\t\t;;\n\t\t\"MACHINE=${MACHINE} \"*)\n\t\t\t# Found a line for this MACHINE.  If it's the\n\t\t\t# first such line, then tentatively accept it.\n\t\t\t# If it's not the first matching line, then\n\t\t\t# remember that there was more than one match.\n\t\t\tcase \"$found\" in\n\t\t\t'')\tfound=\"$line\" ;;\n\t\t\t*)\tfound=\"MULTIPLE_MATCHES\" ;;\n\t\t\tesac\n\t\t\t;;\n\t\tesac\n\tdone\n\n\tcase \"$found\" in\n\t*NO_DEFAULT*|*MULTIPLE_MATCHES*)\n\t\t# MACHINE is OK, but MACHINE_ARCH is still unknown\n\t\treturn\n\t\t;;\n\t\"MACHINE=\"*\" MACHINE_ARCH=\"*)\n\t\t# Obey the MACHINE= and MACHINE_ARCH= parts of the line.\n\t\tIFS=\" \"\n\t\tfor frag in ${found}; do\n\t\t\tcase \"$frag\" in\n\t\t\tMACHINE=*|MACHINE_ARCH=*)\n\t\t\t\teval \"$frag\"\n\t\t\t\t;;\n\t\t\tesac\n\t\tdone\n\t\t;;\n\t*)\n\t\tbomb \"Unknown target MACHINE: ${MACHINE}\"\n\t\t;;\n\tesac\n}\n\n# validatearch -- check that the MACHINE/MACHINE_ARCH pair is supported.\n#\n# Bombs if the pair is not supported.\n#\nvalidatearch()\n{\n\tlocal IFS\n\tlocal line\n\tlocal foundpair=false foundmachine=false foundarch=false\n\n\tcase \"${MACHINE_ARCH}\" in\n\t\"\")\n\t\tbomb \"No MACHINE_ARCH provided\"\n\t\t;;\n\tesac\n\n\tIFS=\"${nl}\"\n\tfor line in ${valid_MACHINE_ARCH}; do\n\t\tline=\"${line%%#*}\" # ignore comments\n\t\tline=\"$( IFS=\" ${tab}\" ; echo $line )\" # normalise white space\n\t\tcase \"${line} \" in\n\t\t\" \")\n\t\t\t# skip blank lines or comment lines\n\t\t\tcontinue\n\t\t\t;;\n\t\t\"MACHINE=${MACHINE} MACHINE_ARCH=${MACHINE_ARCH} \"*)\n\t\t\tfoundpair=true\n\t\t\t;;\n\t\t\"MACHINE=${MACHINE} \"*)\n\t\t\tfoundmachine=true\n\t\t\t;;\n\t\t*\"MACHINE_ARCH=${MACHINE_ARCH} \"*)\n\t\t\tfoundarch=true\n\t\t\t;;\n\t\tesac\n\tdone\n\n\tcase \"${foundpair}:${foundmachine}:${foundarch}\" in\n\ttrue:*)\n\t\t: OK\n\t\t;;\n\t*:false:*)\n\t\tbomb \"Unknown target MACHINE: ${MACHINE}\"\n\t\t;;\n\t*:*:false)\n\t\tbomb \"Unknown target MACHINE_ARCH: ${MACHINE_ARCH}\"\n\t\t;;\n\t*)\n\t\tbomb \"MACHINE_ARCH '${MACHINE_ARCH}' does not support MACHINE '${MACHINE}'\"\n\t\t;;\n\tesac\n}\n\n# listarch -- list valid MACHINE/MACHINE_ARCH/ALIAS values,\n# optionally restricted to those where the MACHINE and/or MACHINE_ARCH\n# match specifed glob patterns.\n#\nlistarch()\n{\n\tlocal machglob=\"$1\" archglob=\"$2\"\n\tlocal IFS\n\tlocal wildcard=\"*\"\n\tlocal line xline frag\n\tlocal line_matches_machine line_matches_arch\n\tlocal found=false\n\n\t# Empty machglob or archglob should match anything\n\t: \"${machglob:=${wildcard}}\"\n\t: \"${archglob:=${wildcard}}\"\n\n\tIFS=\"${nl}\"\n\tfor line in ${valid_MACHINE_ARCH}; do\n\t\tline=\"${line%%#*}\" # ignore comments\n\t\txline=\"$( IFS=\" ${tab}\" ; echo $line )\" # normalise white space\n\t\t[ -z \"${xline}\" ] && continue # skip blank or comment lines\n\n\t\tline_matches_machine=false\n\t\tline_matches_arch=false\n\n\t\tIFS=\" \"\n\t\tfor frag in ${xline}; do\n\t\t\tcase \"${frag}\" in\n\t\t\tMACHINE=${machglob})\n\t\t\t\tline_matches_machine=true ;;\n\t\t\tALIAS=${machglob})\n\t\t\t\tline_matches_machine=true ;;\n\t\t\tMACHINE_ARCH=${archglob})\n\t\t\t\tline_matches_arch=true ;;\n\t\t\tesac\n\t\tdone\n\n\t\tif $line_matches_machine && $line_matches_arch; then\n\t\t\tfound=true\n\t\t\techo \"$line\"\n\t\tfi\n\tdone\n\tif ! $found; then\n\t\techo >&2 \"No match for\" \\\n\t\t    \"MACHINE=${machglob} MACHINE_ARCH=${archglob}\"\n\t\treturn 1\n\tfi\n\treturn 0\n}\n\n# nobomb_getmakevar --\n# Given the name of a make variable in $1, print make's idea of the\n# value of that variable, or return 1 if there's an error.\n#\nnobomb_getmakevar()\n{\n\t[ -x \"${make}\" ] || return 1\n\t\"${make}\" -m ${TOP}/share/mk -s -B -f- _x_ <<EOF || return 1\n_x_:\n\techo \\${$1}\n# LSC FIXME: We are cross compiling, so overwrite default and build tools\nUSETOOLS:=yes\n.include <bsd.prog.mk>\n.include <bsd.kernobj.mk>\nEOF\n}\n\n# bomb_getmakevar --\n# Given the name of a make variable in $1, print make's idea of the\n# value of that variable, or bomb if there's an error.\n#\nbomb_getmakevar()\n{\n\t[ -x \"${make}\" ] || bomb \"bomb_getmakevar $1: ${make} is not executable\"\n\tnobomb_getmakevar \"$1\" || bomb \"bomb_getmakevar $1: ${make} failed\"\n}\n\n# getmakevar --\n# Given the name of a make variable in $1, print make's idea of the\n# value of that variable, or print a literal '$' followed by the\n# variable name if ${make} is not executable.  This is intended for use in\n# messages that need to be readable even if $make hasn't been built,\n# such as when build.sh is run with the \"-n\" option.\n#\ngetmakevar()\n{\n\tif [ -x \"${make}\" ]; then\n\t\tbomb_getmakevar \"$1\"\n\telse\n\t\techo \"\\$$1\"\n\tfi\n}\n\nsetmakeenv()\n{\n\teval \"$1='$2'; export $1\"\n\tmakeenv=\"${makeenv} $1\"\n}\n\nunsetmakeenv()\n{\n\teval \"unset $1\"\n\tmakeenv=\"${makeenv} $1\"\n}\n\n# Given a variable name in $1, modify the variable in place as follows:\n# For each space-separated word in the variable, call resolvepath.\nresolvepaths()\n{\n\tlocal var=\"$1\"\n\tlocal val\n\teval val=\\\"\\${${var}}\\\"\n\tlocal newval=''\n\tlocal word\n\tfor word in ${val}; do\n\t\tresolvepath word\n\t\tnewval=\"${newval}${newval:+ }${word}\"\n\tdone\n\teval ${var}=\\\"\\${newval}\\\"\n}\n\n# Given a variable name in $1, modify the variable in place as follows:\n# Convert possibly-relative path to absolute path by prepending\n# ${TOP} if necessary.  Also delete trailing \"/\", if any.\nresolvepath()\n{\n\tlocal var=\"$1\"\n\tlocal val\n\teval val=\\\"\\${${var}}\\\"\n\tcase \"${val}\" in\n\t/)\n\t\t;;\n\t/*)\n\t\tval=\"${val%/}\"\n\t\t;;\n\t*)\n\t\tval=\"${TOP}/${val%/}\"\n\t\t;;\n\tesac\n\teval ${var}=\\\"\\${val}\\\"\n}\n\nusage()\n{\n\tif [ -n \"$*\" ]; then\n\t\techo \"\"\n\t\techo \"${progname}: $*\"\n\tfi\n\tcat <<_usage_\n\nUsage: ${progname} [-EhnorUuxy] [-a arch] [-B buildid] [-C cdextras]\n                [-D dest] [-j njob] [-M obj] [-m mach] [-N noisy]\n                [-O obj] [-R release] [-S seed] [-T tools]\n                [-V var=[value]] [-w wrapper] [-X x11src] [-Y extsrcsrc]\n                [-Z var]\n                operation [...]\n\n Build operations (all imply \"obj\" and \"tools\"):\n    build               Run \"make build\".\n    distribution        Run \"make distribution\" (includes DESTDIR/etc/ files).\n    release             Run \"make release\" (includes kernels & distrib media).\n\n Other operations:\n    help                Show this message and exit.\n    makewrapper         Create ${toolprefix}make-\\${MACHINE} wrapper and ${toolprefix}make.\n                        Always performed.\n    cleandir            Run \"make cleandir\".  [Default unless -u is used]\n    obj                 Run \"make obj\".  [Default unless -o is used]\n    tools               Build and install tools.\n    install=idir        Run \"make installworld\" to \\`idir' to install all sets\n                        except \\`etc'.  Useful after \"distribution\" or \"release\"\n    kernel=conf         Build kernel with config file \\`conf'\n    kernel.gdb=conf     Build kernel (including netbsd.gdb) with config\n                        file \\`conf'\n    releasekernel=conf  Install kernel built by kernel=conf to RELEASEDIR.\n    kernels             Build all kernels\n    installmodules=idir Run \"make installmodules\" to \\`idir' to install all\n                        kernel modules.\n    modules             Build kernel modules.\n    rumptest            Do a linktest for rump (for developers).\n    sets                Create binary sets in\n                        RELEASEDIR/RELEASEMACHINEDIR/binary/sets.\n                        DESTDIR should be populated beforehand.\n    sourcesets          Create source sets in RELEASEDIR/source/sets.\n    syspkgs             Create syspkgs in\n                        RELEASEDIR/RELEASEMACHINEDIR/binary/syspkgs.\n    iso-image           Create CD-ROM image in RELEASEDIR/images.\n    iso-image-source    Create CD-ROM image with source in RELEASEDIR/images.\n    live-image          Create bootable live image in\n                        RELEASEDIR/RELEASEMACHINEDIR/installation/liveimage.\n    install-image       Create bootable installation image in\n                        RELEASEDIR/RELEASEMACHINEDIR/installation/installimage.\n    disk-image=target   Create bootable disk image in\n                        RELEASEDIR/RELEASEMACHINEDIR/binary/gzimg/target.img.gz.\n    params              Display various make(1) parameters.\n    list-arch           Display a list of valid MACHINE/MACHINE_ARCH values,\n                        and exit.  The list may be narrowed by passing glob\n                        patterns or exact values in MACHINE or MACHINE_ARCH.\n\n Options:\n    -a arch        Set MACHINE_ARCH to arch.  [Default: deduced from MACHINE]\n    -B buildid     Set BUILDID to buildid.\n    -C cdextras    Append cdextras to CDEXTRA variable for inclusion on CD-ROM.\n    -D dest        Set DESTDIR to dest.  [Default: destdir.MACHINE]\n    -E             Set \"expert\" mode; disables various safety checks.\n                   Should not be used without expert knowledge of the build system.\n    -h             Print this help message.\n    -j njob        Run up to njob jobs in parallel; see make(1) -j.\n    -M obj         Set obj root directory to obj; sets MAKEOBJDIRPREFIX.\n                   Unsets MAKEOBJDIR.\n    -m mach        Set MACHINE to mach.  Some mach values are actually\n                   aliases that set MACHINE/MACHINE_ARCH pairs.\n                   [Default: deduced from the host system if the host\n                   OS is NetBSD]\n    -N noisy       Set the noisyness (MAKEVERBOSE) level of the build:\n                       0   Minimal output (\"quiet\")\n                       1   Describe what is occurring\n                       2   Describe what is occurring and echo the actual command\n                       3   Ignore the effect of the \"@\" prefix in make commands\n                       4   Trace shell commands using the shell's -x flag\n                   [Default: 2]\n    -n             Show commands that would be executed, but do not execute them.\n    -O obj         Set obj root directory to obj; sets a MAKEOBJDIR pattern.\n                   Unsets MAKEOBJDIRPREFIX.\n    -o             Set MKOBJDIRS=no; do not create objdirs at start of build.\n    -R release     Set RELEASEDIR to release.  [Default: releasedir]\n    -r             Remove contents of TOOLDIR and DESTDIR before building.\n    -S seed        Set BUILDSEED to seed.  [Default: NetBSD-majorversion]\n    -T tools       Set TOOLDIR to tools.  If unset, and TOOLDIR is not set in\n                   the environment, ${toolprefix}make will be (re)built\n                   unconditionally.\n    -U             Set MKUNPRIVED=yes; build without requiring root privileges,\n                   install from an UNPRIVED build with proper file permissions.\n    -u             Set MKUPDATE=yes; do not run \"make cleandir\" first.\n                   Without this, everything is rebuilt, including the tools.\n    -V var=[value] Set variable \\`var' to \\`value'.\n    -w wrapper     Create ${toolprefix}make script as wrapper.\n                   [Default: \\${TOOLDIR}/bin/${toolprefix}make-\\${MACHINE}]\n    -X x11src      Set X11SRCDIR to x11src.  [Default: /usr/xsrc]\n    -x             Set MKX11=yes; build X11 from X11SRCDIR\n    -Y extsrcsrc   Set EXTSRCSRCDIR to extsrcsrc.  [Default: /usr/extsrc]\n    -y             Set MKEXTSRC=yes; build extsrc from EXTSRCSRCDIR\n    -Z var         Unset (\"zap\") variable \\`var'.\n\n_usage_\n\texit 1\n}\n\nparseoptions()\n{\n\topts='a:B:C:D:Ehj:M:m:N:nO:oR:rS:T:UuV:w:X:xY:yZ:'\n\topt_a=false\n\topt_m=false\n\n\tif type getopts >/dev/null 2>&1; then\n\t\t# Use POSIX getopts.\n\t\t#\n\t\tgetoptcmd='getopts ${opts} opt && opt=-${opt}'\n\t\toptargcmd=':'\n\t\toptremcmd='shift $((${OPTIND} -1))'\n\telse\n\t\ttype getopt >/dev/null 2>&1 ||\n\t\t    bomb \"Shell does not support getopts or getopt\"\n\n\t\t# Use old-style getopt(1) (doesn't handle whitespace in args).\n\t\t#\n\t\targs=\"$(getopt ${opts} $*)\"\n\t\t[ $? = 0 ] || usage\n\t\tset -- ${args}\n\n\t\tgetoptcmd='[ $# -gt 0 ] && opt=\"$1\" && shift'\n\t\toptargcmd='OPTARG=\"$1\"; shift'\n\t\toptremcmd=':'\n\tfi\n\n\t# Parse command line options.\n\t#\n\twhile eval ${getoptcmd}; do\n\t\tcase ${opt} in\n\n\t\t-a)\n\t\t\teval ${optargcmd}\n\t\t\tMACHINE_ARCH=${OPTARG}\n\t\t\topt_a=true\n\t\t\t;;\n\n\t\t-B)\n\t\t\teval ${optargcmd}\n\t\t\tBUILDID=${OPTARG}\n\t\t\t;;\n\n\t\t-C)\n\t\t\teval ${optargcmd}; resolvepaths OPTARG\n\t\t\tCDEXTRA=\"${CDEXTRA}${CDEXTRA:+ }${OPTARG}\"\n\t\t\t;;\n\n\t\t-D)\n\t\t\teval ${optargcmd}; resolvepath OPTARG\n\t\t\tsetmakeenv DESTDIR \"${OPTARG}\"\n\t\t\t;;\n\n\t\t-E)\n\t\t\tdo_expertmode=true\n\t\t\t;;\n\n\t\t-j)\n\t\t\teval ${optargcmd}\n\t\t\tparallel=\"-j ${OPTARG}\"\n\t\t\t;;\n\n\t\t-M)\n\t\t\teval ${optargcmd}; resolvepath OPTARG\n\t\t\tcase \"${OPTARG}\" in\n\t\t\t\\$*)\tusage \"-M argument must not begin with '\\$'\"\n\t\t\t\t;;\n\t\t\t*\\$*)\t# can use resolvepath, but can't set TOP_objdir\n\t\t\t\tresolvepath OPTARG\n\t\t\t\t;;\n\t\t\t*)\tresolvepath OPTARG\n\t\t\t\tTOP_objdir=\"${OPTARG}${TOP}\"\n\t\t\t\t;;\n\t\t\tesac\n\t\t\tunsetmakeenv MAKEOBJDIR\n\t\t\tsetmakeenv MAKEOBJDIRPREFIX \"${OPTARG}\"\n\t\t\t;;\n\n\t\t\t# -m overrides MACHINE_ARCH unless \"-a\" is specified\n\t\t-m)\n\t\t\teval ${optargcmd}\n\t\t\tMACHINE=\"${OPTARG}\"\n\t\t\topt_m=true\n\t\t\t;;\n\n\t\t-N)\n\t\t\teval ${optargcmd}\n\t\t\tcase \"${OPTARG}\" in\n\t\t\t0|1|2|3|4)\n\t\t\t\tsetmakeenv MAKEVERBOSE \"${OPTARG}\"\n\t\t\t\t;;\n\t\t\t*)\n\t\t\t\tusage \"'${OPTARG}' is not a valid value for -N\"\n\t\t\t\t;;\n\t\t\tesac\n\t\t\t;;\n\n\t\t-n)\n\t\t\truncmd=echo\n\t\t\t;;\n\n\t\t-O)\n\t\t\teval ${optargcmd}\n\t\t\tcase \"${OPTARG}\" in\n\t\t\t*\\$*)\tusage \"-O argument must not contain '\\$'\"\n\t\t\t\t;;\n\t\t\t*)\tresolvepath OPTARG\n\t\t\t\tTOP_objdir=\"${OPTARG}\"\n\t\t\t\t;;\n\t\t\tesac\n\t\t\tunsetmakeenv MAKEOBJDIRPREFIX\n\t\t\tsetmakeenv MAKEOBJDIR \"\\${.CURDIR:C,^$TOP,$OPTARG,}\"\n\t\t\t;;\n\n\t\t-o)\n\t\t\tMKOBJDIRS=no\n\t\t\t;;\n\n\t\t-R)\n\t\t\teval ${optargcmd}; resolvepath OPTARG\n\t\t\tsetmakeenv RELEASEDIR \"${OPTARG}\"\n\t\t\t;;\n\n\t\t-r)\n\t\t\tdo_removedirs=true\n\t\t\tdo_rebuildmake=true\n\t\t\t;;\n\n\t\t-S)\n\t\t\teval ${optargcmd}\n\t\t\tsetmakeenv BUILDSEED \"${OPTARG}\"\n\t\t\t;;\n\n\t\t-T)\n\t\t\teval ${optargcmd}; resolvepath OPTARG\n\t\t\tTOOLDIR=\"${OPTARG}\"\n\t\t\texport TOOLDIR\n\t\t\t;;\n\n\t\t-U)\n\t\t\tsetmakeenv MKUNPRIVED yes\n\t\t\t;;\n\n\t\t-u)\n\t\t\tsetmakeenv MKUPDATE yes\n\t\t\t;;\n\n\t\t-V)\n\t\t\teval ${optargcmd}\n\t\t\tcase \"${OPTARG}\" in\n\t\t    # XXX: consider restricting which variables can be changed?\n\t\t\t[a-zA-Z_][a-zA-Z_0-9]*=*)\n\t\t\t\tsetmakeenv \"${OPTARG%%=*}\" \"${OPTARG#*=}\"\n\t\t\t\t;;\n\t\t\t*)\n\t\t\t\tusage \"-V argument must be of the form 'var=[value]'\"\n\t\t\t\t;;\n\t\t\tesac\n\t\t\t;;\n\n\t\t-w)\n\t\t\teval ${optargcmd}; resolvepath OPTARG\n\t\t\tmakewrapper=\"${OPTARG}\"\n\t\t\t;;\n\n\t\t-X)\n\t\t\teval ${optargcmd}; resolvepath OPTARG\n\t\t\tsetmakeenv X11SRCDIR \"${OPTARG}\"\n\t\t\t;;\n\n\t\t-x)\n\t\t\tsetmakeenv MKX11 yes\n\t\t\t;;\n\n\t\t-Y)\n\t\t\teval ${optargcmd}; resolvepath OPTARG\n\t\t\tsetmakeenv EXTSRCSRCDIR \"${OPTARG}\"\n\t\t\t;;\n\n\t\t-y)\n\t\t\tsetmakeenv MKEXTSRC yes\n\t\t\t;;\n\n\t\t-Z)\n\t\t\teval ${optargcmd}\n\t\t    # XXX: consider restricting which variables can be unset?\n\t\t\tunsetmakeenv \"${OPTARG}\"\n\t\t\t;;\n\n\t\t--)\n\t\t\tbreak\n\t\t\t;;\n\n\t\t-'?'|-h)\n\t\t\tusage\n\t\t\t;;\n\n\t\tesac\n\tdone\n\n\t# Validate operations.\n\t#\n\teval ${optremcmd}\n\twhile [ $# -gt 0 ]; do\n\t\top=$1; shift\n\t\toperations=\"${operations} ${op}\"\n\n\t\tcase \"${op}\" in\n\n\t\thelp)\n\t\t\tusage\n\t\t\t;;\n\n\t\tlist-arch)\n\t\t\tlistarch \"${MACHINE}\" \"${MACHINE_ARCH}\"\n\t\t\texit $?\n\t\t\t;;\n\n\t\tshow-params)\n\t\t\top=show_params\t# used as part of a variable name\n\t\t\t;;\n\n\t\tkernel=*|releasekernel=*|kernel.gdb=*)\n\t\t\targ=${op#*=}\n\t\t\top=${op%%=*}\n\t\t\t[ -n \"${arg}\" ] ||\n\t\t\t    bomb \"Must supply a kernel name with \\`${op}=...'\"\n\t\t\t;;\n\n\t\tdisk-image=*)\n\t\t\targ=${op#*=}\n\t\t\top=disk_image\n\t\t\t[ -n \"${arg}\" ] ||\n\t\t\t    bomb \"Must supply a target name with \\`${op}=...'\"\n\n\t\t\t;;\n\n\t\tinstall=*|installmodules=*)\n\t\t\targ=${op#*=}\n\t\t\top=${op%%=*}\n\t\t\t[ -n \"${arg}\" ] ||\n\t\t\t    bomb \"Must supply a directory with \\`install=...'\"\n\t\t\t;;\n\n\t\tbuild|\\\n\t\tcleandir|\\\n\t\tdistribution|\\\n\t\tinstall-image|\\\n\t\tiso-image-source|\\\n\t\tiso-image|\\\n\t\tkernels|\\\n\t\tlive-image|\\\n\t\tmakewrapper|\\\n\t\tmodules|\\\n\t\tobj|\\\n\t\tparams|\\\n\t\trelease|\\\n\t\trump|\\\n\t\trumptest|\\\n\t\tsets|\\\n\t\tsourcesets|\\\n\t\tsyspkgs|\\\n\t\ttools)\n\t\t\t;;\n\n\t\t*)\n\t\t\tusage \"Unknown operation \\`${op}'\"\n\t\t\t;;\n\n\t\tesac\n\t\t# ${op} may contain chars that are not allowed in variable\n\t\t# names.  Replace them with '_' before setting do_${op}.\n\t\top=\"$( echo \"$op\" | tr -s '.-' '__')\"\n\t\teval do_${op}=true\n\tdone\n\t[ -n \"${operations}\" ] || usage \"Missing operation to perform.\"\n\n\t# Set up MACHINE*.  On a NetBSD host, these are allowed to be unset.\n\t#\n\tif [ -z \"${MACHINE}\" ]; then\n\t\t[ \"${uname_s}\" = \"Minix\" ] ||\n\t\t    bomb \"MACHINE must be set, or -m must be used, for cross builds.\"\n\t\tMACHINE=${uname_m}\n\tfi\n\tif $opt_m && ! $opt_a; then\n\t\t# Settings implied by the command line -m option\n\t\t# override MACHINE_ARCH from the environment (if any).\n\t\tgetarch\n\tfi\n\t[ -n \"${MACHINE_ARCH}\" ] || getarch\n\tvalidatearch\n\n\t# Set up default make(1) environment.\n\t#\n\tmakeenv=\"${makeenv} TOOLDIR MACHINE MACHINE_ARCH MAKEFLAGS\"\n\t[ -z \"${BUILDID}\" ] || makeenv=\"${makeenv} BUILDID\"\n\t[ -z \"${BUILDINFO}\" ] || makeenv=\"${makeenv} BUILDINFO\"\n\tMAKEFLAGS=\"-de -m ${TOP}/share/mk ${MAKEFLAGS}\"\n\tMAKEFLAGS=\"${MAKEFLAGS} MKOBJDIRS=${MKOBJDIRS-yes}\"\n\texport MAKEFLAGS MACHINE MACHINE_ARCH\n\tsetmakeenv USETOOLS \"yes\"\n\tsetmakeenv MAKEWRAPPERMACHINE \"${makewrappermachine:-${MACHINE}}\"\n}\n\n# sanitycheck --\n# Sanity check after parsing command line options, before rebuildmake.\n#\nsanitycheck()\n{\n\t# Install as non-root is a bad idea.\n\t#\n\tif ${do_install} && [ \"$id_u\" -ne 0 ] ; then\n\t\tif ${do_expertmode}; then\n\t\t\twarning \"Will install as an unprivileged user.\"\n\t\telse\n\t\t\tbomb \"-E must be set for install as an unprivileged user.\"\n\t\tfi\n\tfi\n\n\t# If the PATH contains any non-absolute components (including,\n\t# but not limited to, \".\" or \"\"), then complain.  As an exception,\n\t# allow \"\" or \".\" as the last component of the PATH.  This is fatal\n\t# if expert mode is not in effect.\n\t#\n\tlocal path=\"${PATH}\"\n\tpath=\"${path%:}\"\t# delete trailing \":\"\n\tpath=\"${path%:.}\"\t# delete trailing \":.\"\n\tcase \":${path}:/\" in\n\t*:[!/]*)\n\t\tif ${do_expertmode}; then\n\t\t\twarning \"PATH contains non-absolute components\"\n\t\telse\n\t\t\tbomb \"PATH environment variable must not\" \\\n\t\t\t     \"contain non-absolute components\"\n\t\tfi\n\t\t;;\n\tesac\n}\n\n# print_tooldir_make --\n# Try to find and print a path to an existing\n# ${TOOLDIR}/bin/${toolprefix}make, for use by rebuildmake() before a\n# new version of ${toolprefix}make has been built.\n#\n# * If TOOLDIR was set in the environment or on the command line, use\n#   that value.\n# * Otherwise try to guess what TOOLDIR would be if not overridden by\n#   /etc/mk.conf, and check whether the resulting directory contains\n#   a copy of ${toolprefix}make (this should work for everybody who\n#   doesn't override TOOLDIR via /etc/mk.conf);\n# * Failing that, search for ${toolprefix}make, nbmake, bmake, or make,\n#   in the PATH (this might accidentally find a version of make that\n#   does not understand the syntax used by NetBSD make, and that will\n#   lead to failure in the next step);\n# * If a copy of make was found above, try to use it with\n#   nobomb_getmakevar to find the correct value for TOOLDIR, and believe the\n#   result only if it's a directory that already exists;\n# * If a value of TOOLDIR was found above, and if\n#   ${TOOLDIR}/bin/${toolprefix}make exists, print that value.\n#\nprint_tooldir_make()\n{\n\tlocal possible_TOP_OBJ\n\tlocal possible_TOOLDIR\n\tlocal possible_make\n\tlocal tooldir_make\n\n\tif [ -n \"${TOOLDIR}\" ]; then\n\t\techo \"${TOOLDIR}/bin/${toolprefix}make\"\n\t\treturn 0\n\tfi\n\n\t# Set host_ostype to something like \"NetBSD-4.5.6-i386\".  This\n\t# is intended to match the HOST_OSTYPE variable in <bsd.own.mk>.\n\t#\n\tlocal host_ostype=\"${uname_s}-$(\n\t\techo \"${uname_r}\" | sed -e 's/([^)]*)//g' -e 's/ /_/g'\n\t\t)-$(\n\t\techo \"${uname_p}\" | sed -e 's/([^)]*)//g' -e 's/ /_/g'\n\t\t)\"\n\n\t# Look in a few potential locations for\n\t# ${possible_TOOLDIR}/bin/${toolprefix}make.\n\t# If we find it, then set possible_make.\n\t#\n\t# In the usual case (without interference from environment\n\t# variables or /etc/mk.conf), <bsd.own.mk> should set TOOLDIR to\n\t# \"${_SRC_TOP_OBJ_}/tooldir.${host_ostype}\".\n\t#\n\t# In practice it's difficult to figure out the correct value\n\t# for _SRC_TOP_OBJ_.  In the easiest case, when the -M or -O\n\t# options were passed to build.sh, then ${TOP_objdir} will be\n\t# the correct value.  We also try a few other possibilities, but\n\t# we do not replicate all the logic of <bsd.obj.mk>.\n\t#\n\tfor possible_TOP_OBJ in \\\n\t\t\"${TOP_objdir}\" \\\n\t\t\"${MAKEOBJDIRPREFIX:+${MAKEOBJDIRPREFIX}${TOP}}\" \\\n\t\t\"${TOP}\" \\\n\t\t\"${TOP}/obj\" \\\n\t\t\"${TOP}/obj.${MACHINE}\"\n\tdo\n\t\t[ -n \"${possible_TOP_OBJ}\" ] || continue\n\t\tpossible_TOOLDIR=\"${possible_TOP_OBJ}/tooldir.${host_ostype}\"\n\t\tpossible_make=\"${possible_TOOLDIR}/bin/${toolprefix}make\"\n\t\tif [ -x \"${possible_make}\" ]; then\n\t\t\tbreak\n\t\telse\n\t\t\tunset possible_make\n\t\tfi\n\tdone\n\n\t# If the above didn't work, search the PATH for a suitable\n\t# ${toolprefix}make, nbmake, bmake, or make.\n\t#\n\t: ${possible_make:=$(find_in_PATH ${toolprefix}make '')}\n\t: ${possible_make:=$(find_in_PATH nbmake '')}\n\t: ${possible_make:=$(find_in_PATH bmake '')}\n\t: ${possible_make:=$(find_in_PATH make '')}\n\n\t# At this point, we don't care whether possible_make is in the\n\t# correct TOOLDIR or not; we simply want it to be usable by\n\t# getmakevar to help us find the correct TOOLDIR.\n\t#\n\t# Use ${possible_make} with nobomb_getmakevar to try to find\n\t# the value of TOOLDIR.  Believe the result only if it's\n\t# a directory that already exists and contains bin/${toolprefix}make.\n\t#\n\tif [ -x \"${possible_make}\" ]; then\n\t\tpossible_TOOLDIR=\"$(\n\t\t\tmake=\"${possible_make}\" \\\n\t\t\tnobomb_getmakevar TOOLDIR 2>/dev/null\n\t\t\t)\"\n\t\tif [ $? = 0 ] && [ -n \"${possible_TOOLDIR}\" ] \\\n\t\t    && [ -d \"${possible_TOOLDIR}\" ];\n\t\tthen\n\t\t\ttooldir_make=\"${possible_TOOLDIR}/bin/${toolprefix}make\"\n\t\t\tif [ -x \"${tooldir_make}\" ]; then\n\t\t\t\techo \"${tooldir_make}\"\n\t\t\t\treturn 0\n\t\t\tfi\n\t\tfi\n\tfi\n\treturn 1\n}\n\n# rebuildmake --\n# Rebuild nbmake in a temporary directory if necessary.  Sets $make\n# to a path to the nbmake executable.  Sets done_rebuildmake=true\n# if nbmake was rebuilt.\n#\n# There is a cyclic dependency between building nbmake and choosing\n# TOOLDIR: TOOLDIR may be affected by settings in /etc/mk.conf, so we\n# would like to use getmakevar to get the value of TOOLDIR; but we can't\n# use getmakevar before we have an up to date version of nbmake; we\n# might already have an up to date version of nbmake in TOOLDIR, but we\n# don't yet know where TOOLDIR is.\n#\n# The default value of TOOLDIR also depends on the location of the top\n# level object directory, so $(getmakevar TOOLDIR) invoked before or\n# after making the top level object directory may produce different\n# results.\n#\n# Strictly speaking, we should do the following:\n#\n#    1. build a new version of nbmake in a temporary directory;\n#    2. use the temporary nbmake to create the top level obj directory;\n#    3. use $(getmakevar TOOLDIR) with the temporary nbmake to\n#       get the correct value of TOOLDIR;\n#    4. move the temporary nbmake to ${TOOLDIR}/bin/nbmake.\n#\n# However, people don't like building nbmake unnecessarily if their\n# TOOLDIR has not changed since an earlier build.  We try to avoid\n# rebuilding a temporary version of nbmake by taking some shortcuts to\n# guess a value for TOOLDIR, looking for an existing version of nbmake\n# in that TOOLDIR, and checking whether that nbmake is newer than the\n# sources used to build it.\n#\nrebuildmake()\n{\n\tmake=\"$(print_tooldir_make)\"\n\tif [ -n \"${make}\" ] && [ -x \"${make}\" ]; then\n\t\tfor f in usr.bin/make/*.[ch] usr.bin/make/lst.lib/*.[ch]; do\n\t\t\tif [ \"${f}\" -nt \"${make}\" ]; then\n\t\t\t\tstatusmsg \"${make} outdated\" \\\n\t\t\t\t\t\"(older than ${f}), needs building.\"\n\t\t\t\tdo_rebuildmake=true\n\t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\telse\n\t\tstatusmsg \"No \\$TOOLDIR/bin/${toolprefix}make, needs building.\"\n\t\tdo_rebuildmake=true\n\tfi\n\n\t# Build bootstrap ${toolprefix}make if needed.\n\tif ${do_rebuildmake}; then\n\t\tstatusmsg \"Bootstrapping ${toolprefix}make\"\n\t\t${runcmd} cd \"${tmpdir}\"\n\t\t${runcmd} env CC=\"${HOST_CC-cc}\" CPPFLAGS=\"${HOST_CPPFLAGS}\" \\\n\t\t\tCFLAGS=\"${HOST_CFLAGS--O}\" LDFLAGS=\"${HOST_LDFLAGS}\" \\\n\t\t\t${HOST_SH} \"${TOP}/tools/make/configure\" ||\n\t\t    ( cp ${tmpdir}/config.log ${tmpdir}-config.log\n\t\t      bomb \"Configure of ${toolprefix}make failed, see ${tmpdir}-config.log for details\" )\n\t\t${runcmd} ${HOST_SH} buildmake.sh ||\n\t\t    bomb \"Build of ${toolprefix}make failed\"\n\t\tmake=\"${tmpdir}/${toolprefix}make\"\n\t\t${runcmd} cd \"${TOP}\"\n\t\t${runcmd} rm -f usr.bin/make/*.o usr.bin/make/lst.lib/*.o\n\t\tdone_rebuildmake=true\n\tfi\n}\n\n# validatemakeparams --\n# Perform some late sanity checks, after rebuildmake,\n# but before createmakewrapper or any real work.\n#\n# Creates the top-level obj directory, because that\n# is needed by some of the sanity checks.\n#\n# Prints status messages reporting the values of several variables.\n#\nvalidatemakeparams()\n{\n\t# MAKECONF (which defaults to /etc/mk.conf in share/mk/bsd.own.mk)\n\t# can affect many things, so mention it in an early status message.\n\t#\n\tMAKECONF=$(getmakevar MAKECONF)\n\tif [ -e \"${MAKECONF}\" ]; then\n\t\tstatusmsg2 \"MAKECONF file:\" \"${MAKECONF}\"\n\telse\n\t\tstatusmsg2 \"MAKECONF file:\" \"${MAKECONF} (File not found)\"\n\tfi\n\n\t# Normalise MKOBJDIRS, MKUNPRIVED, and MKUPDATE.\n\t# These may be set as build.sh options or in \"mk.conf\".\n\t# Don't export them as they're only used for tests in build.sh.\n\t#\n\tMKOBJDIRS=$(getmakevar MKOBJDIRS)\n\tMKUNPRIVED=$(getmakevar MKUNPRIVED)\n\tMKUPDATE=$(getmakevar MKUPDATE)\n\n\t# Non-root should always use either the -U or -E flag.\n\t#\n\tif ! ${do_expertmode} && \\\n\t    [ \"$id_u\" -ne 0 ] && \\\n\t    [ \"${MKUNPRIVED}\" = \"no\" ] ; then\n\t\tbomb \"-U or -E must be set for build as an unprivileged user.\"\n\tfi\n\n\tif [ \"${runcmd}\" = \"echo\" ]; then\n\t\tTOOLCHAIN_MISSING=no\n\t\tEXTERNAL_TOOLCHAIN=\"\"\n\telse\n\t\tTOOLCHAIN_MISSING=$(bomb_getmakevar TOOLCHAIN_MISSING)\n\t\tEXTERNAL_TOOLCHAIN=$(bomb_getmakevar EXTERNAL_TOOLCHAIN)\n\tfi\n\tif [ \"${TOOLCHAIN_MISSING}\" = \"yes\" ] && \\\n\t   [ -z \"${EXTERNAL_TOOLCHAIN}\" ]; then\n\t\t${runcmd} echo \"ERROR: build.sh (in-tree cross-toolchain) is not yet available for\"\n\t\t${runcmd} echo \"\tMACHINE:      ${MACHINE}\"\n\t\t${runcmd} echo \"\tMACHINE_ARCH: ${MACHINE_ARCH}\"\n\t\t${runcmd} echo \"\"\n\t\t${runcmd} echo \"All builds for this platform should be done via a traditional make\"\n\t\t${runcmd} echo \"If you wish to use an external cross-toolchain, set\"\n\t\t${runcmd} echo \"\tEXTERNAL_TOOLCHAIN=<path to toolchain root>\"\n\t\t${runcmd} echo \"in either the environment or mk.conf and rerun\"\n\t\t${runcmd} echo \"\t${progname} $*\"\n\t\texit 1\n\tfi\n\n\tif [ \"${MKOBJDIRS}\" != \"no\" ]; then\n\t\t# Create the top-level object directory.\n\t\t#\n\t\t# \"make obj NOSUBDIR=\" can handle most cases, but it\n\t\t# can't handle the case where MAKEOBJDIRPREFIX is set\n\t\t# while the corresponding directory does not exist\n\t\t# (rules in <bsd.obj.mk> would abort the build).  We\n\t\t# therefore have to handle the MAKEOBJDIRPREFIX case\n\t\t# without invoking \"make obj\".  The MAKEOBJDIR case\n\t\t# could be handled either way, but we choose to handle\n\t\t# it similarly to MAKEOBJDIRPREFIX.\n\t\t#\n\t\tif [ -n \"${TOP_obj}\" ]; then\n\t\t\t# It must have been set by the \"-M\" or \"-O\"\n\t\t\t# command line options, so there's no need to\n\t\t\t# use getmakevar\n\t\t\t:\n\t\telif [ -n \"$MAKEOBJDIRPREFIX\" ]; then\n\t\t\tTOP_obj=\"$(getmakevar MAKEOBJDIRPREFIX)${TOP}\"\n\t\telif [ -n \"$MAKEOBJDIR\" ]; then\n\t\t\tTOP_obj=\"$(getmakevar MAKEOBJDIR)\"\n\t\tfi\n\t\tif [ -n \"$TOP_obj\" ]; then\n\t\t\t${runcmd} mkdir -p \"${TOP_obj}\" ||\n\t\t\t    bomb \"Can't create top level object directory\" \\\n\t\t\t\t\t\"${TOP_obj}\"\n\t\telse\n\t\t\t${runcmd} \"${make}\" -m ${TOP}/share/mk obj NOSUBDIR= ||\n\t\t\t    bomb \"Can't create top level object directory\" \\\n\t\t\t\t\t\"using make obj\"\n\t\tfi\n\n\t\t# make obj in tools to ensure that the objdir for \"tools\"\n\t\t# is available.\n\t\t#\n\t\t${runcmd} cd tools\n\t\t${runcmd} \"${make}\" -m ${TOP}/share/mk obj NOSUBDIR= ||\n\t\t    bomb \"Failed to make obj in tools\"\n\t\t${runcmd} cd \"${TOP}\"\n\tfi\n\n\t# Find TOOLDIR, DESTDIR, and RELEASEDIR, according to getmakevar,\n\t# and bomb if they have changed from the values we had from the\n\t# command line or environment.\n\t#\n\t# This must be done after creating the top-level object directory.\n\t#\n\tfor var in TOOLDIR DESTDIR RELEASEDIR\n\tdo\n\t\teval oldval=\\\"\\$${var}\\\"\n\t\tnewval=\"$(getmakevar $var)\"\n\t\tif ! $do_expertmode; then\n\t\t\t: ${_SRC_TOP_OBJ_:=$(getmakevar _SRC_TOP_OBJ_)}\n\t\t\tcase \"$var\" in\n\t\t\tDESTDIR)\n\t\t\t\t: ${newval:=${_SRC_TOP_OBJ_}/destdir.${MACHINE}}\n\t\t\t\tmakeenv=\"${makeenv} DESTDIR\"\n\t\t\t\t;;\n\t\t\tRELEASEDIR)\n\t\t\t\t: ${newval:=${_SRC_TOP_OBJ_}/releasedir}\n\t\t\t\tmakeenv=\"${makeenv} RELEASEDIR\"\n\t\t\t\t;;\n\t\t\tesac\n\t\tfi\n\t\tif [ -n \"$oldval\" ] && [ \"$oldval\" != \"$newval\" ]; then\n\t\t\tbomb \"Value of ${var} has changed\" \\\n\t\t\t\t\"(was \\\"${oldval}\\\", now \\\"${newval}\\\")\"\n\t\tfi\n\t\teval ${var}=\\\"\\${newval}\\\"\n\t\teval export ${var}\n\t\tstatusmsg2 \"${var} path:\" \"${newval}\"\n\tdone\n\n\t# RELEASEMACHINEDIR is just a subdir name, e.g. \"i386\".\n\tRELEASEMACHINEDIR=$(getmakevar RELEASEMACHINEDIR)\n\n\t# Check validity of TOOLDIR and DESTDIR.\n\t#\n\tif [ -z \"${TOOLDIR}\" ] || [ \"${TOOLDIR}\" = \"/\" ]; then\n\t\tbomb \"TOOLDIR '${TOOLDIR}' invalid\"\n\tfi\n\tremovedirs=\"${TOOLDIR}\"\n\n\tif [ -z \"${DESTDIR}\" ] || [ \"${DESTDIR}\" = \"/\" ]; then\n\t\tif ${do_distribution} || ${do_release} || \\\n\t\t   ( [ \"${uname_s}\" != \"NetBSD\" ] && [ \"${uname_s}\" != \"Minix\" ] ) || \\\n\t\t   [ \"${uname_m}\" != \"${MACHINE}\" ]; then\n\t\t\tbomb \"DESTDIR must != / for cross builds, or ${progname} 'distribution' or 'release'.\"\n\t\tfi\n\t\tif ! ${do_expertmode}; then\n\t\t\tbomb \"DESTDIR must != / for non -E (expert) builds\"\n\t\tfi\n\t\tstatusmsg \"WARNING: Building to /, in expert mode.\"\n\t\tstatusmsg \"         This may cause your system to break!  Reasons include:\"\n\t\tstatusmsg \"            - your kernel is not up to date\"\n\t\tstatusmsg \"            - the libraries or toolchain have changed\"\n\t\tstatusmsg \"         YOU HAVE BEEN WARNED!\"\n\telse\n\t\tremovedirs=\"${removedirs} ${DESTDIR}\"\n\tfi\n\tif ${do_releasekernel} && [ -z \"${RELEASEDIR}\" ]; then\n\t\tbomb \"Must set RELEASEDIR with \\`releasekernel=...'\"\n\tfi\n\n\t# If a previous build.sh run used -U (and therefore created a\n\t# METALOG file), then most subsequent build.sh runs must also\n\t# use -U.  If DESTDIR is about to be removed, then don't perform\n\t# this check.\n\t#\n\tcase \"${do_removedirs} ${removedirs} \" in\n\ttrue*\" ${DESTDIR} \"*)\n\t\t# DESTDIR is about to be removed\n\t\t;;\n\t*)\n\t\tif [ -e \"${DESTDIR}/METALOG\" ] && \\\n\t\t    [ \"${MKUNPRIVED}\" = \"no\" ] ; then\n\t\t\tif $do_expertmode; then\n\t\t\t\twarning \"A previous build.sh run specified -U.\"\n\t\t\telse\n\t\t\t\tbomb \"A previous build.sh run specified -U; you must specify it again now.\"\n\t\t\tfi\n\t\tfi\n\t\t;;\n\tesac\n\n\t# live-image and install-image targets require binary sets\n\t# (actually DESTDIR/etc/mtree/set.* files) built with MKUNPRIVED.\n\t# If release operation is specified with live-image or install-image,\n\t# the release op should be performed with -U for later image ops.\n\t#\n\tif ${do_release} && ( ${do_live_image} || ${do_install_image} ) && \\\n\t    [ \"${MKUNPRIVED}\" = \"no\" ] ; then\n\t\tbomb \"-U must be specified on building release to create images later.\"\n\tfi\n}\n\n\ncreatemakewrapper()\n{\n\t# Remove the target directories.\n\t#\n\tif ${do_removedirs}; then\n\t\tfor f in ${removedirs}; do\n\t\t\tstatusmsg \"Removing ${f}\"\n\t\t\t${runcmd} rm -r -f \"${f}\"\n\t\tdone\n\tfi\n\n\t# Recreate $TOOLDIR.\n\t#\n\t${runcmd} mkdir -p \"${TOOLDIR}/bin\" ||\n\t    bomb \"mkdir of '${TOOLDIR}/bin' failed\"\n\n\t# If we did not previously rebuild ${toolprefix}make, then\n\t# check whether $make is still valid and the same as the output\n\t# from print_tooldir_make.  If not, then rebuild make now.  A\n\t# possible reason for this being necessary is that the actual\n\t# value of TOOLDIR might be different from the value guessed\n\t# before the top level obj dir was created.\n\t#\n\tif ! ${done_rebuildmake} && \\\n\t    ( [ ! -x \"$make\" ] || [ \"$make\" != \"$(print_tooldir_make)\" ] )\n\tthen\n\t\trebuildmake\n\tfi\n\n\t# Install ${toolprefix}make if it was built.\n\t#\n\tif ${done_rebuildmake}; then\n\t\t${runcmd} rm -f \"${TOOLDIR}/bin/${toolprefix}make\"\n\t\t${runcmd} cp \"${make}\" \"${TOOLDIR}/bin/${toolprefix}make\" ||\n\t\t    bomb \"Failed to install \\$TOOLDIR/bin/${toolprefix}make\"\n\t\tmake=\"${TOOLDIR}/bin/${toolprefix}make\"\n\t\tstatusmsg \"Created ${make}\"\n\tfi\n\n\t# Build a ${toolprefix}make wrapper script, usable by hand as\n\t# well as by build.sh.\n\t#\n\tif [ -z \"${makewrapper}\" ]; then\n\t\tmakewrapper=\"${TOOLDIR}/bin/${toolprefix}make-${makewrappermachine:-${MACHINE}}\"\n\t\t[ -z \"${BUILDID}\" ] || makewrapper=\"${makewrapper}-${BUILDID}\"\n\tfi\n\n\t${runcmd} rm -f \"${makewrapper}\"\n\tif [ \"${runcmd}\" = \"echo\" ]; then\n\t\techo 'cat <<EOF >'${makewrapper}\n\t\tmakewrapout=\n\telse\n\t\tmakewrapout=\">>\\${makewrapper}\"\n\tfi\n\n\tcase \"${KSH_VERSION:-${SH_VERSION}}\" in\n\t*PD\\ KSH*|*MIRBSD\\ KSH*)\n\t\tset +o braceexpand\n\t\t;;\n\tesac\n\n\teval cat <<EOF ${makewrapout}\n#! ${HOST_SH}\n# Set proper variables to allow easy \"make\" building of a NetBSD subtree.\n# Generated from:  \\$NetBSD: build.sh,v 1.308 2015/06/27 06:00:28 matt Exp $\n# with these arguments: ${_args}\n#\n\nEOF\n\t{\n\t\tsorted_vars=\"$(for var in ${makeenv}; do echo \"${var}\" ; done \\\n\t\t\t| sort -u )\"\n\t\tfor var in ${sorted_vars}; do\n\t\t\teval val=\\\"\\${${var}}\\\"\n\t\t\teval is_set=\\\"\\${${var}+set}\\\"\n\t\t\tif [ -z \"${is_set}\" ]; then\n\t\t\t\techo \"unset ${var}\"\n\t\t\telse\n\t\t\t\tqval=\"$(shell_quote \"${val}\")\"\n\t\t\t\techo \"${var}=${qval}; export ${var}\"\n\t\t\tfi\n\t\tdone\n\n\t\teval cat <<EOF\nMAKEWRAPPERMACHINE=${makewrappermachine:-${MACHINE}}; export MAKEWRAPPERMACHINE\nUSETOOLS=yes; export USETOOLS\n# LSC We are cross compiling, so do not install to root!\nMKINSTALLBOOT=no; export MKINSTALLBOOT\nEOF\n\t} | eval sort -u \"${makewrapout}\"\n\teval cat <<EOF \"${makewrapout}\"\n\nexec \"\\${TOOLDIR}/bin/${toolprefix}make\" \\${1+\"\\$@\"}\nEOF\n\t[ \"${runcmd}\" = \"echo\" ] && echo EOF\n\t${runcmd} chmod +x \"${makewrapper}\"\n\tstatusmsg2 \"Updated makewrapper:\" \"${makewrapper}\"\n}\n\nmake_in_dir()\n{\n\tdir=\"$1\"\n\top=\"$2\"\n\t${runcmd} cd \"${dir}\" ||\n\t    bomb \"Failed to cd to \\\"${dir}\\\"\"\n\t${runcmd} \"${makewrapper}\" ${parallel} ${op} ||\n\t    bomb \"Failed to make ${op} in \\\"${dir}\\\"\"\n\t${runcmd} cd \"${TOP}\" ||\n\t    bomb \"Failed to cd back to \\\"${TOP}\\\"\"\n}\n\nbuildtools()\n{\n\tif [ \"${MKOBJDIRS}\" != \"no\" ]; then\n\t\t${runcmd} \"${makewrapper}\" ${parallel} obj-tools ||\n\t\t    bomb \"Failed to make obj-tools\"\n\tfi\n\tif [ \"${MKUPDATE}\" = \"no\" ]; then\n\t\tmake_in_dir tools cleandir\n\tfi\n\tmake_in_dir tools build_install\n\tstatusmsg \"Tools built to ${TOOLDIR}\"\n}\n\ngetkernelconf()\n{\n\tkernelconf=\"$1\"\n\tif [ \"${MKOBJDIRS}\" != \"no\" ]; then\n\t\t# The correct value of KERNOBJDIR might\n\t\t# depend on a prior \"make obj\" in\n\t\t# ${KERNSRCDIR}/${KERNARCHDIR}/compile.\n\t\t#\n\t\tKERNSRCDIR=\"$(getmakevar KERNSRCDIR)\"\n\t\tKERNARCHDIR=\"$(getmakevar KERNARCHDIR)\"\n\t\tmake_in_dir \"${KERNSRCDIR}/${KERNARCHDIR}/compile\" obj\n\tfi\n\tKERNCONFDIR=\"$(getmakevar KERNCONFDIR)\"\n\tKERNOBJDIR=\"$(getmakevar KERNOBJDIR)\"\n\tcase \"${kernelconf}\" in\n\t*/*)\n\t\tkernelconfpath=\"${kernelconf}\"\n\t\tkernelconfname=\"${kernelconf##*/}\"\n\t\t;;\n\t*)\n\t\tkernelconfpath=\"${KERNCONFDIR}/${kernelconf}\"\n\t\tkernelconfname=\"${kernelconf}\"\n\t\t;;\n\tesac\n\tkernelbuildpath=\"${KERNOBJDIR}/${kernelconfname}\"\n}\n\ndiskimage()\n{\n\tARG=\"$(echo $1 | tr '[:lower:]' '[:upper:]')\"\n\t[ -f \"${DESTDIR}/etc/mtree/set.base\" ] || \n\t    bomb \"The release binaries must be built first\"\n\tkerneldir=\"${RELEASEDIR}/${RELEASEMACHINEDIR}/binary/kernel\"\n\tkernel=\"${kerneldir}/netbsd-${ARG}.gz\"\n\t[ -f \"${kernel}\" ] ||\n\t    bomb \"The kernel ${kernel} must be built first\"\n\tmake_in_dir \"${NETBSDSRCDIR}/etc\" \"smp_${1}\"\n}\n\nbuildkernel()\n{\n\tif ! ${do_tools} && ! ${buildkernelwarned:-false}; then\n\t\t# Building tools every time we build a kernel is clearly\n\t\t# unnecessary.  We could try to figure out whether rebuilding\n\t\t# the tools is necessary this time, but it doesn't seem worth\n\t\t# the trouble.  Instead, we say it's the user's responsibility\n\t\t# to rebuild the tools if necessary.\n\t\t#\n\t\tstatusmsg \"Building kernel without building new tools\"\n\t\tbuildkernelwarned=true\n\tfi\n\tgetkernelconf $1\n\tstatusmsg2 \"Building kernel:\" \"${kernelconf}\"\n\tstatusmsg2 \"Build directory:\" \"${kernelbuildpath}\"\n\t${runcmd} mkdir -p \"${kernelbuildpath}\" ||\n\t    bomb \"Cannot mkdir: ${kernelbuildpath}\"\n\tif [ \"${MKUPDATE}\" = \"no\" ]; then\n\t\tmake_in_dir \"${kernelbuildpath}\" cleandir\n\tfi\n\t[ -x \"${TOOLDIR}/bin/${toolprefix}config\" ] \\\n\t|| bomb \"${TOOLDIR}/bin/${toolprefix}config does not exist. You need to \\\"$0 tools\\\" first.\"\n\tCONFIGOPTS=$(getmakevar CONFIGOPTS)\n\t${runcmd} \"${TOOLDIR}/bin/${toolprefix}config\" ${CONFIGOPTS} \\\n\t\t-b \"${kernelbuildpath}\" -s \"${TOP}/sys\" ${configopts} \\\n\t\t\"${kernelconfpath}\" ||\n\t    bomb \"${toolprefix}config failed for ${kernelconf}\"\n\tmake_in_dir \"${kernelbuildpath}\" depend\n\tmake_in_dir \"${kernelbuildpath}\" all\n\n\tif [ \"${runcmd}\" != \"echo\" ]; then\n\t\tstatusmsg \"Kernels built from ${kernelconf}:\"\n\t\tkernlist=$(awk '$1 == \"config\" { print $2 }' ${kernelconfpath})\n\t\tfor kern in ${kernlist:-netbsd}; do\n\t\t\t[ -f \"${kernelbuildpath}/${kern}\" ] && \\\n\t\t\t    echo \"  ${kernelbuildpath}/${kern}\"\n\t\tdone | tee -a \"${results}\"\n\tfi\n}\n\nreleasekernel()\n{\n\tgetkernelconf $1\n\tkernelreldir=\"${RELEASEDIR}/${RELEASEMACHINEDIR}/binary/kernel\"\n\t${runcmd} mkdir -p \"${kernelreldir}\"\n\tkernlist=$(awk '$1 == \"config\" { print $2 }' ${kernelconfpath})\n\tfor kern in ${kernlist:-netbsd}; do\n\t\tbuiltkern=\"${kernelbuildpath}/${kern}\"\n\t\t[ -f \"${builtkern}\" ] || continue\n\t\treleasekern=\"${kernelreldir}/${kern}-${kernelconfname}.gz\"\n\t\tstatusmsg2 \"Kernel copy:\" \"${releasekern}\"\n\t\tif [ \"${runcmd}\" = \"echo\" ]; then\n\t\t\techo \"gzip -c -9 < ${builtkern} > ${releasekern}\"\n\t\telse\n\t\t\tgzip -c -9 < \"${builtkern}\" > \"${releasekern}\"\n\t\tfi\n\tdone\n}\n\nbuildkernels()\n{\n\tallkernels=$( runcmd= make_in_dir etc '-V ${ALL_KERNELS}' )\n\tfor k in $allkernels; do\n\t\tbuildkernel \"${k}\"\n\tdone\n}\n\nbuildmodules()\n{\n\tsetmakeenv MKBINUTILS no\n\tif ! ${do_tools} && ! ${buildmoduleswarned:-false}; then\n\t\t# Building tools every time we build modules is clearly\n\t\t# unnecessary as well as a kernel.\n\t\t#\n\t\tstatusmsg \"Building modules without building new tools\"\n\t\tbuildmoduleswarned=true\n\tfi\n\n\tstatusmsg \"Building kernel modules for NetBSD/${MACHINE} ${DISTRIBVER}\"\n\tif [ \"${MKOBJDIRS}\" != \"no\" ]; then\n\t\tmake_in_dir sys/modules obj\n\tfi\n\tif [ \"${MKUPDATE}\" = \"no\" ]; then\n\t\tmake_in_dir sys/modules cleandir\n\tfi\n\tmake_in_dir sys/modules dependall\n\tmake_in_dir sys/modules install\n\n\tstatusmsg \"Successful build of kernel modules for NetBSD/${MACHINE} ${DISTRIBVER}\"\n}\n\ninstallmodules()\n{\n\tdir=\"$1\"\n\t${runcmd} \"${makewrapper}\" INSTALLMODULESDIR=\"${dir}\" installmodules ||\n\t    bomb \"Failed to make installmodules to ${dir}\"\n\tstatusmsg \"Successful installmodules to ${dir}\"\n}\n\ninstallworld()\n{\n\tdir=\"$1\"\n\t${runcmd} \"${makewrapper}\" INSTALLWORLDDIR=\"${dir}\" installworld ||\n\t    bomb \"Failed to make installworld to ${dir}\"\n\tstatusmsg \"Successful installworld to ${dir}\"\n}\n\n# Run rump build&link tests.\n#\n# To make this feasible for running without having to install includes and\n# libraries into destdir (i.e. quick), we only run ld.  This is possible\n# since the rump kernel is a closed namespace apart from calls to rumpuser.\n# Therefore, if ld complains only about rumpuser symbols, rump kernel\n# linking was successful.\n#\n# We test that rump links with a number of component configurations.\n# These attempt to mimic what is encountered in the full build.\n# See list below.  The list should probably be either autogenerated\n# or managed elsewhere; keep it here until a better idea arises.\n#\n# Above all, note that THIS IS NOT A SUBSTITUTE FOR A FULL BUILD.\n#\n\nRUMP_LIBSETS='\n\t-lrump,\n\t-lrumpvfs -lrump,\n\t-lrumpvfs -lrumpdev -lrump,\n\t-lrumpnet -lrump,\n\t-lrumpkern_tty -lrumpvfs -lrump,\n\t-lrumpfs_tmpfs -lrumpvfs -lrump,\n\t-lrumpfs_ffs -lrumpfs_msdos -lrumpvfs -lrumpdev_disk -lrumpdev -lrump,\n\t-lrumpnet_virtif -lrumpnet_netinet -lrumpnet_net -lrumpnet -lrump,\n\t-lrumpnet_sockin -lrumpfs_smbfs -lrumpdev_netsmb\n\t    -lrumpkern_crypto -lrumpdev -lrumpnet -lrumpvfs -lrump,\n\t-lrumpnet_sockin -lrumpfs_nfs -lrumpnet -lrumpvfs -lrump,\n\t-lrumpdev_cgd -lrumpdev_raidframe -lrumpdev_disk -lrumpdev_rnd\n\t    -lrumpdev_dm -lrumpdev -lrumpvfs -lrumpkern_crypto -lrump'\ndorump()\n{\n\tlocal doclean=\"\"\n\tlocal doobjs=\"\"\n\n\t# we cannot link libs without building csu, and that leads to lossage\n\t[ \"${1}\" != \"rumptest\" ] && bomb 'build.sh rump not yet functional. ' \\\n\t    'did you mean \"rumptest\"?'\n\n\texport RUMPKERN_ONLY=1\n\t# create obj and distrib dirs\n\tif [ \"${MKOBJDIRS}\" != \"no\" ]; then\n\t\tmake_in_dir \"${NETBSDSRCDIR}/etc/mtree\" obj\n\t\tmake_in_dir \"${NETBSDSRCDIR}/sys/rump\" obj\n\tfi\n\t${runcmd} \"${makewrapper}\" ${parallel} do-distrib-dirs \\\n\t    || bomb 'could not create distrib-dirs'\n\n\t[ \"${MKUPDATE}\" = \"no\" ] && doclean=\"cleandir\"\n\ttarglist=\"${doclean} ${doobjs} dependall install\"\n\t# optimize: for test we build only static libs (3x test speedup)\n\tif [ \"${1}\" = \"rumptest\" ] ; then\n\t\tsetmakeenv NOPIC 1\n\t\tsetmakeenv NOPROFILE 1\n\tfi\n\tfor cmd in ${targlist} ; do\n\t\tmake_in_dir \"${NETBSDSRCDIR}/sys/rump\" ${cmd}\n\tdone\n\n\t# if we just wanted to build & install rump, we're done\n\t[ \"${1}\" != \"rumptest\" ] && return\n\n\t${runcmd} cd \"${NETBSDSRCDIR}/sys/rump/librump/rumpkern\" \\\n\t    || bomb \"cd to rumpkern failed\"\n\tmd_quirks=`${runcmd} \"${makewrapper}\" -V '${_SYMQUIRK}'`\n\t# one little, two little, three little backslashes ...\n\tmd_quirks=\"$(echo ${md_quirks} | sed 's,\\\\,\\\\\\\\,g'\";s/'//g\" )\"\n\t${runcmd} cd \"${TOP}\" || bomb \"cd to ${TOP} failed\"\n\ttool_ld=`${runcmd} \"${makewrapper}\" -V '${LD}'`\n\n\tlocal oIFS=\"${IFS}\"\n\tIFS=\",\"\n\tfor set in ${RUMP_LIBSETS} ; do\n\t\tIFS=\"${oIFS}\"\n\t\t${runcmd} ${tool_ld} -nostdlib -L${DESTDIR}/usr/lib\t\\\n\t\t    -static --whole-archive ${set} 2>&1 -o /tmp/rumptest.$$ | \\\n\t\t      awk -v quirks=\"${md_quirks}\" '\n\t\t\t/undefined reference/ &&\n\t\t\t    !/more undefined references.*follow/{\n\t\t\t\tif (match($NF,\n\t\t\t\t    \"`(rumpuser_|rumpcomp_|__\" quirks \")\") == 0)\n\t\t\t\t\tfails[NR] = $0\n\t\t\t}\n\t\t\t/cannot find -l/{fails[NR] = $0}\n\t\t\t/cannot open output file/{fails[NR] = $0}\n\t\t\tEND{\n\t\t\t\tfor (x in fails)\n\t\t\t\t\tprint fails[x]\n\t\t\t\texit x!=0\n\t\t\t}'\n\t\t[ $? -ne 0 ] && bomb \"Testlink of rump failed: ${set}\"\n\tdone\n\tstatusmsg \"Rump build&link tests successful\"\n}\n\nmain()\n{\n\tinitdefaults\n\t_args=$@\n\tparseoptions \"$@\"\n\n\tsanitycheck\n\n\tbuild_start=$(date)\n\tstatusmsg2 \"${progname} command:\" \"$0 $*\"\n\tstatusmsg2 \"${progname} started:\" \"${build_start}\"\n\tstatusmsg2 \"MINIX version:\"    \"${DISTRIBVER}\"\n\tstatusmsg2 \"MACHINE:\"          \"${MACHINE}\"\n\tstatusmsg2 \"MACHINE_ARCH:\"     \"${MACHINE_ARCH}\"\n\tstatusmsg2 \"Build platform:\"   \"${uname_s} ${uname_r} ${uname_m}\"\n\tstatusmsg2 \"HOST_SH:\"          \"${HOST_SH}\"\n\tif [ -n \"${BUILDID}\" ]; then\n\t\tstatusmsg2 \"BUILDID:\"  \"${BUILDID}\"\n\tfi\n\tif [ -n \"${BUILDINFO}\" ]; then\n\t\tprintf \"%b\\n\" \"${BUILDINFO}\" | \\\n\t\twhile read -r line ; do\n\t\t\t[ -s \"${line}\" ] && continue\n\t\t\tstatusmsg2 \"BUILDINFO:\"  \"${line}\"\n\t\tdone\n\tfi\n\n\trebuildmake\n\tvalidatemakeparams\n\tcreatemakewrapper\n\n\t# Perform the operations.\n\t#\n\tfor op in ${operations}; do\n\t\tcase \"${op}\" in\n\n\t\tmakewrapper)\n\t\t\t# no-op\n\t\t\t;;\n\n\t\ttools)\n\t\t\tbuildtools\n\t\t\t;;\n\n\t\tsets)\n\t\t\tstatusmsg \"Building sets from pre-populated ${DESTDIR}\"\n\t\t\t${runcmd} \"${makewrapper}\" ${parallel} ${op} ||\n\t\t\t    bomb \"Failed to make ${op}\"\n\t\t\tsetdir=${RELEASEDIR}/${RELEASEMACHINEDIR}/binary/sets\n\t\t\tstatusmsg \"Built sets to ${setdir}\"\n\t\t\t;;\n\n\t\tcleandir|obj|build|distribution|release|sourcesets|syspkgs|show-params)\n\t\t\t${runcmd} \"${makewrapper}\" ${parallel} ${op} ||\n\t\t\t    bomb \"Failed to make ${op}\"\n\t\t\tstatusmsg \"Successful make ${op}\"\n\t\t\t;;\n\n\t\tiso-image|iso-image-source)\n\t\t\t${runcmd} \"${makewrapper}\" ${parallel} \\\n\t\t\t    CDEXTRA=\"$CDEXTRA\" ${op} ||\n\t\t\t    bomb \"Failed to make ${op}\"\n\t\t\tstatusmsg \"Successful make ${op}\"\n\t\t\t;;\n\n\t\tlive-image|install-image)\n\t\t\t# install-image and live-image require mtree spec files\n\t\t\t# built with UNPRIVED.  Assume UNPRIVED build has been\n\t\t\t# performed if METALOG file is created in DESTDIR.\n\t\t\tif [ ! -e \"${DESTDIR}/METALOG\" ] ; then\n\t\t\t\tbomb \"The release binaries must have been built with -U to create images.\"\n\t\t\tfi\n\t\t\t${runcmd} \"${makewrapper}\" ${parallel} ${op} ||\n\t\t\t    bomb \"Failed to make ${op}\"\n\t\t\tstatusmsg \"Successful make ${op}\"\n\t\t\t;;\n\t\tkernel=*)\n\t\t\targ=${op#*=}\n\t\t\tbuildkernel \"${arg}\"\n\t\t\t;;\n\t\tkernel.gdb=*)\n\t\t\targ=${op#*=}\n\t\t\tconfigopts=\"-D DEBUG=-g\"\n\t\t\tbuildkernel \"${arg}\"\n\t\t\t;;\n\t\treleasekernel=*)\n\t\t\targ=${op#*=}\n\t\t\treleasekernel \"${arg}\"\n\t\t\t;;\n\n\t\tkernels)\n\t\t\tbuildkernels\n\t\t\t;;\n\n\t\tdisk-image=*)\n\t\t\targ=${op#*=}\n\t\t\tdiskimage \"${arg}\"\n\t\t\t;;\n\n\t\tmodules)\n\t\t\tbuildmodules\n\t\t\t;;\n\n\t\tinstallmodules=*)\n\t\t\targ=${op#*=}\n\t\t\tif [ \"${arg}\" = \"/\" ] && \\\n\t\t\t    (\t( [ \"${uname_s}\" != \"NetBSD\" ] && [ \"${uname_s}\" != \"Minix\" ] ) || \\\n\t\t\t\t[ \"${uname_m}\" != \"${MACHINE}\" ] ); then\n\t\t\t\tbomb \"'${op}' must != / for cross builds.\"\n\t\t\tfi\n\t\t\tinstallmodules \"${arg}\"\n\t\t\t;;\n\n\t\tinstall=*)\n\t\t\targ=${op#*=}\n\t\t\tif [ \"${arg}\" = \"/\" ] && \\\n\t\t\t    (\t( [ \"${uname_s}\" != \"NetBSD\" ] && [ \"${uname_s}\" != \"Minix\" ] ) || \\\n\t\t\t\t[ \"${uname_m}\" != \"${MACHINE}\" ] ); then\n\t\t\t\tbomb \"'${op}' must != / for cross builds.\"\n\t\t\tfi\n\t\t\tinstallworld \"${arg}\"\n\t\t\t;;\n\n\t\trump|rumptest)\n\t\t\tdorump \"${op}\"\n\t\t\t;;\n\n\t\t*)\n\t\t\tbomb \"Unknown operation \\`${op}'\"\n\t\t\t;;\n\n\t\tesac\n\tdone\n\n\tstatusmsg2 \"${progname} ended:\" \"$(date)\"\n\tif [ -s \"${results}\" ]; then\n\t\techo \"===> Summary of results:\"\n\t\tsed -e 's/^===>//;s/^/\t/' \"${results}\"\n\t\techo \"===> .\"\n\tfi\n}\n\nmain \"$@\"\n"
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "crypto",
          "type": "tree",
          "content": null
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "distrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "games",
          "type": "tree",
          "content": null
        },
        {
          "name": "gnu",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "libexec",
          "type": "tree",
          "content": null
        },
        {
          "name": "minix",
          "type": "tree",
          "content": null
        },
        {
          "name": "releasetools",
          "type": "tree",
          "content": null
        },
        {
          "name": "sbin",
          "type": "tree",
          "content": null
        },
        {
          "name": "share",
          "type": "tree",
          "content": null
        },
        {
          "name": "sys",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "usr.bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "usr.sbin",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}