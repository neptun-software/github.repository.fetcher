{
  "metadata": {
    "timestamp": 1736709975708,
    "page": 537,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "libbpf/libbpf",
      "stars": 2256,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0234375,
          "content": "assets/** export-ignore\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 1.291015625,
          "content": "Alexei Starovoitov <ast@kernel.org> <alexei.starovoitov@gmail.com>\nAntoine Tenart <atenart@kernel.org> <antoine.tenart@bootlin.com>\nBenjamin Tissoires <bentiss@kernel.org> <benjamin.tissoires@redhat.com>\nBjörn Töpel <bjorn@kernel.org> <bjorn.topel@intel.com>\nChangbin Du <changbin.du@intel.com> <changbin.du@gmail.com>\nColin Ian King <colin.i.king@gmail.com> <colin.king@canonical.com>\nDan Carpenter <error27@gmail.com> <dan.carpenter@oracle.com>\nGeliang Tang <geliang@kernel.org> <geliang.tang@suse.com>\nHerbert Xu <herbert@gondor.apana.org.au>\nJakub Kicinski <kuba@kernel.org> <jakub.kicinski@netronome.com>\nJesper Dangaard Brouer <hawk@kernel.org> <brouer@redhat.com>\nKees Cook <kees@kernel.org> <keescook@chromium.org>\nLeo Yan <leo.yan@linux.dev> <leo.yan@linaro.org>\nMark Starovoytov <mstarovo@pm.me> <mstarovoitov@marvell.com>\nMaxim Mikityanskiy <maxtram95@gmail.com> <maximmi@mellanox.com>\nMaxim Mikityanskiy <maxtram95@gmail.com> <maximmi@nvidia.com>\nPuranjay Mohan <puranjay@kernel.org> <puranjay12@gmail.com>\nQuentin Monnet <qmo@kernel.org> <quentin@isovalent.com>\nQuentin Monnet <qmo@kernel.org> <quentin.monnet@netronome.com>\nStanislav Fomichev <sdf@fomichev.me> <sdf@google.com>\nVadim Fedorenko <vadim.fedorenko@linux.dev> <vadfed@meta.com>\nVadim Fedorenko <vadim.fedorenko@linux.dev> <vfedorenko@novek.ru>\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.5029296875,
          "content": "# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\nbuild:\n  os: \"ubuntu-22.04\"\n  tools:\n    python: \"3.11\"\n\n# Build documentation in the docs/ directory with Sphinx\nsphinx:\n  builder: html\n  configuration: docs/conf.py\n\nformats:\n  - htmlzip\n  - pdf\n  - epub\n\n# Optionally set the version of Python and requirements required to build your docs\npython:\n   install:\n   - requirements: docs/sphinx/requirements.txt\n"
        },
        {
          "name": "BPF-CHECKPOINT-COMMIT",
          "type": "blob",
          "size": 0.0400390625,
          "content": "9d89551994a430b50c4fffcb1e617a057fa76e20\n"
        },
        {
          "name": "CHECKPOINT-COMMIT",
          "type": "blob",
          "size": 0.0400390625,
          "content": "f44275e7155dc310d36516fc25be503da099781c\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.0244140625,
          "content": "LGPL-2.1 OR BSD-2-Clause\n"
        },
        {
          "name": "LICENSE.BSD-2-Clause",
          "type": "blob",
          "size": 1.6103515625,
          "content": "Valid-License-Identifier: BSD-2-Clause\nSPDX-URL: https://spdx.org/licenses/BSD-2-Clause.html\nUsage-Guide:\n  To use the BSD 2-clause \"Simplified\" License put the following SPDX\n  tag/value pair into a comment according to the placement guidelines in\n  the licensing rules documentation:\n    SPDX-License-Identifier: BSD-2-Clause\nLicense-Text:\n\nCopyright (c) 2015 The Libbpf Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice,\n   this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "LICENSE.LGPL-2.1",
          "type": "blob",
          "size": 26.7705078125,
          "content": "Valid-License-Identifier: LGPL-2.1\nValid-License-Identifier: LGPL-2.1+\nSPDX-URL: https://spdx.org/licenses/LGPL-2.1.html\nUsage-Guide:\n  To use this license in source code, put one of the following SPDX\n  tag/value pairs into a comment according to the placement\n  guidelines in the licensing rules documentation.\n  For 'GNU Lesser General Public License (LGPL) version 2.1 only' use:\n    SPDX-License-Identifier: LGPL-2.1\n  For 'GNU Lesser General Public License (LGPL) version 2.1 or any later\n  version' use:\n    SPDX-License-Identifier: LGPL-2.1+\nLicense-Text:\n\nGNU LESSER GENERAL PUBLIC LICENSE\nVersion 2.1, February 1999\n\nCopyright (C) 1991, 1999 Free Software Foundation, Inc.\n51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL. It also counts as\nthe successor of the GNU Library Public License, version 2, hence the\nversion number 2.1.]\n\nPreamble\n\nThe licenses for most software are designed to take away your freedom to\nshare and change it. By contrast, the GNU General Public Licenses are\nintended to guarantee your freedom to share and change free software--to\nmake sure the software is free for all its users.\n\nThis license, the Lesser General Public License, applies to some specially\ndesignated software packages--typically libraries--of the Free Software\nFoundation and other authors who decide to use it. You can use it too, but\nwe suggest you first think carefully about whether this license or the\nordinary General Public License is the better strategy to use in any\nparticular case, based on the explanations below.\n\nWhen we speak of free software, we are referring to freedom of use, not\nprice. Our General Public Licenses are designed to make sure that you have\nthe freedom to distribute copies of free software (and charge for this\nservice if you wish); that you receive source code or can get it if you\nwant it; that you can change the software and use pieces of it in new free\nprograms; and that you are informed that you can do these things.\n\nTo protect your rights, we need to make restrictions that forbid\ndistributors to deny you these rights or to ask you to surrender these\nrights. These restrictions translate to certain responsibilities for you if\nyou distribute copies of the library or if you modify it.\n\nFor example, if you distribute copies of the library, whether gratis or for\na fee, you must give the recipients all the rights that we gave you. You\nmust make sure that they, too, receive or can get the source code. If you\nlink other code with the library, you must provide complete object files to\nthe recipients, so that they can relink them with the library after making\nchanges to the library and recompiling it. And you must show them these\nterms so they know their rights.\n\nWe protect your rights with a two-step method: (1) we copyright the\nlibrary, and (2) we offer you this license, which gives you legal\npermission to copy, distribute and/or modify the library.\n\nTo protect each distributor, we want to make it very clear that there is no\nwarranty for the free library. Also, if the library is modified by someone\nelse and passed on, the recipients should know that what they have is not\nthe original version, so that the original author's reputation will not be\naffected by problems that might be introduced by others.\n\nFinally, software patents pose a constant threat to the existence of any\nfree program. We wish to make sure that a company cannot effectively\nrestrict the users of a free program by obtaining a restrictive license\nfrom a patent holder. Therefore, we insist that any patent license obtained\nfor a version of the library must be consistent with the full freedom of\nuse specified in this license.\n\nMost GNU software, including some libraries, is covered by the ordinary GNU\nGeneral Public License. This license, the GNU Lesser General Public\nLicense, applies to certain designated libraries, and is quite different\nfrom the ordinary General Public License. We use this license for certain\nlibraries in order to permit linking those libraries into non-free\nprograms.\n\nWhen a program is linked with a library, whether statically or using a\nshared library, the combination of the two is legally speaking a combined\nwork, a derivative of the original library. The ordinary General Public\nLicense therefore permits such linking only if the entire combination fits\nits criteria of freedom. The Lesser General Public License permits more lax\ncriteria for linking other code with the library.\n\nWe call this license the \"Lesser\" General Public License because it does\nLess to protect the user's freedom than the ordinary General Public\nLicense. It also provides other free software developers Less of an\nadvantage over competing non-free programs. These disadvantages are the\nreason we use the ordinary General Public License for many\nlibraries. However, the Lesser license provides advantages in certain\nspecial circumstances.\n\nFor example, on rare occasions, there may be a special need to encourage\nthe widest possible use of a certain library, so that it becomes a de-facto\nstandard. To achieve this, non-free programs must be allowed to use the\nlibrary. A more frequent case is that a free library does the same job as\nwidely used non-free libraries. In this case, there is little to gain by\nlimiting the free library to free software only, so we use the Lesser\nGeneral Public License.\n\nIn other cases, permission to use a particular library in non-free programs\nenables a greater number of people to use a large body of free\nsoftware. For example, permission to use the GNU C Library in non-free\nprograms enables many more people to use the whole GNU operating system, as\nwell as its variant, the GNU/Linux operating system.\n\nAlthough the Lesser General Public License is Less protective of the users'\nfreedom, it does ensure that the user of a program that is linked with the\nLibrary has the freedom and the wherewithal to run that program using a\nmodified version of the Library.\n\nThe precise terms and conditions for copying, distribution and modification\nfollow. Pay close attention to the difference between a \"work based on the\nlibrary\" and a \"work that uses the library\". The former contains code\nderived from the library, whereas the latter must be combined with the\nlibrary in order to run.\n\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n0. This License Agreement applies to any software library or other program\n   which contains a notice placed by the copyright holder or other\n   authorized party saying it may be distributed under the terms of this\n   Lesser General Public License (also called \"this License\"). Each\n   licensee is addressed as \"you\".\n\n   A \"library\" means a collection of software functions and/or data\n   prepared so as to be conveniently linked with application programs\n   (which use some of those functions and data) to form executables.\n\n   The \"Library\", below, refers to any such software library or work which\n   has been distributed under these terms. A \"work based on the Library\"\n   means either the Library or any derivative work under copyright law:\n   that is to say, a work containing the Library or a portion of it, either\n   verbatim or with modifications and/or translated straightforwardly into\n   another language. (Hereinafter, translation is included without\n   limitation in the term \"modification\".)\n\n   \"Source code\" for a work means the preferred form of the work for making\n   modifications to it. For a library, complete source code means all the\n   source code for all modules it contains, plus any associated interface\n   definition files, plus the scripts used to control compilation and\n   installation of the library.\n\n    Activities other than copying, distribution and modification are not\n    covered by this License; they are outside its scope. The act of running\n    a program using the Library is not restricted, and output from such a\n    program is covered only if its contents constitute a work based on the\n    Library (independent of the use of the Library in a tool for writing\n    it). Whether that is true depends on what the Library does and what the\n    program that uses the Library does.\n\n1. You may copy and distribute verbatim copies of the Library's complete\n   source code as you receive it, in any medium, provided that you\n   conspicuously and appropriately publish on each copy an appropriate\n   copyright notice and disclaimer of warranty; keep intact all the notices\n   that refer to this License and to the absence of any warranty; and\n   distribute a copy of this License along with the Library.\n\n   You may charge a fee for the physical act of transferring a copy, and\n   you may at your option offer warranty protection in exchange for a fee.\n\n2. You may modify your copy or copies of the Library or any portion of it,\n   thus forming a work based on the Library, and copy and distribute such\n   modifications or work under the terms of Section 1 above, provided that\n   you also meet all of these conditions:\n\n   a) The modified work must itself be a software library.\n\n   b) You must cause the files modified to carry prominent notices stating\n      that you changed the files and the date of any change.\n\n   c) You must cause the whole of the work to be licensed at no charge to\n      all third parties under the terms of this License.\n\n   d) If a facility in the modified Library refers to a function or a table\n      of data to be supplied by an application program that uses the\n      facility, other than as an argument passed when the facility is\n      invoked, then you must make a good faith effort to ensure that, in\n      the event an application does not supply such function or table, the\n      facility still operates, and performs whatever part of its purpose\n      remains meaningful.\n\n   (For example, a function in a library to compute square roots has a\n    purpose that is entirely well-defined independent of the\n    application. Therefore, Subsection 2d requires that any\n    application-supplied function or table used by this function must be\n    optional: if the application does not supply it, the square root\n    function must still compute square roots.)\n\n   These requirements apply to the modified work as a whole. If\n   identifiable sections of that work are not derived from the Library, and\n   can be reasonably considered independent and separate works in\n   themselves, then this License, and its terms, do not apply to those\n   sections when you distribute them as separate works. But when you\n   distribute the same sections as part of a whole which is a work based on\n   the Library, the distribution of the whole must be on the terms of this\n   License, whose permissions for other licensees extend to the entire\n   whole, and thus to each and every part regardless of who wrote it.\n\n   Thus, it is not the intent of this section to claim rights or contest\n   your rights to work written entirely by you; rather, the intent is to\n   exercise the right to control the distribution of derivative or\n   collective works based on the Library.\n\n   In addition, mere aggregation of another work not based on the Library\n   with the Library (or with a work based on the Library) on a volume of a\n   storage or distribution medium does not bring the other work under the\n   scope of this License.\n\n3. You may opt to apply the terms of the ordinary GNU General Public\n   License instead of this License to a given copy of the Library. To do\n   this, you must alter all the notices that refer to this License, so that\n   they refer to the ordinary GNU General Public License, version 2,\n   instead of to this License. (If a newer version than version 2 of the\n   ordinary GNU General Public License has appeared, then you can specify\n   that version instead if you wish.) Do not make any other change in these\n   notices.\n\n   Once this change is made in a given copy, it is irreversible for that\n   copy, so the ordinary GNU General Public License applies to all\n   subsequent copies and derivative works made from that copy.\n\n   This option is useful when you wish to copy part of the code of the\n   Library into a program that is not a library.\n\n4. You may copy and distribute the Library (or a portion or derivative of\n   it, under Section 2) in object code or executable form under the terms\n   of Sections 1 and 2 above provided that you accompany it with the\n   complete corresponding machine-readable source code, which must be\n   distributed under the terms of Sections 1 and 2 above on a medium\n   customarily used for software interchange.\n\n   If distribution of object code is made by offering access to copy from a\n   designated place, then offering equivalent access to copy the source\n   code from the same place satisfies the requirement to distribute the\n   source code, even though third parties are not compelled to copy the\n   source along with the object code.\n\n5. A program that contains no derivative of any portion of the Library, but\n   is designed to work with the Library by being compiled or linked with\n   it, is called a \"work that uses the Library\". Such a work, in isolation,\n   is not a derivative work of the Library, and therefore falls outside the\n   scope of this License.\n\n   However, linking a \"work that uses the Library\" with the Library creates\n   an executable that is a derivative of the Library (because it contains\n   portions of the Library), rather than a \"work that uses the\n   library\". The executable is therefore covered by this License. Section 6\n   states terms for distribution of such executables.\n\n   When a \"work that uses the Library\" uses material from a header file\n   that is part of the Library, the object code for the work may be a\n   derivative work of the Library even though the source code is\n   not. Whether this is true is especially significant if the work can be\n   linked without the Library, or if the work is itself a library. The\n   threshold for this to be true is not precisely defined by law.\n\n   If such an object file uses only numerical parameters, data structure\n   layouts and accessors, and small macros and small inline functions (ten\n   lines or less in length), then the use of the object file is\n   unrestricted, regardless of whether it is legally a derivative\n   work. (Executables containing this object code plus portions of the\n   Library will still fall under Section 6.)\n\n   Otherwise, if the work is a derivative of the Library, you may\n   distribute the object code for the work under the terms of Section\n   6. Any executables containing that work also fall under Section 6,\n   whether or not they are linked directly with the Library itself.\n\n6. As an exception to the Sections above, you may also combine or link a\n   \"work that uses the Library\" with the Library to produce a work\n   containing portions of the Library, and distribute that work under terms\n   of your choice, provided that the terms permit modification of the work\n   for the customer's own use and reverse engineering for debugging such\n   modifications.\n\n   You must give prominent notice with each copy of the work that the\n   Library is used in it and that the Library and its use are covered by\n   this License. You must supply a copy of this License. If the work during\n   execution displays copyright notices, you must include the copyright\n   notice for the Library among them, as well as a reference directing the\n   user to the copy of this License. Also, you must do one of these things:\n\n   a) Accompany the work with the complete corresponding machine-readable\n      source code for the Library including whatever changes were used in\n      the work (which must be distributed under Sections 1 and 2 above);\n      and, if the work is an executable linked with the Library, with the\n      complete machine-readable \"work that uses the Library\", as object\n      code and/or source code, so that the user can modify the Library and\n      then relink to produce a modified executable containing the modified\n      Library. (It is understood that the user who changes the contents of\n      definitions files in the Library will not necessarily be able to\n      recompile the application to use the modified definitions.)\n\n   b) Use a suitable shared library mechanism for linking with the\n      Library. A suitable mechanism is one that (1) uses at run time a copy\n      of the library already present on the user's computer system, rather\n      than copying library functions into the executable, and (2) will\n      operate properly with a modified version of the library, if the user\n      installs one, as long as the modified version is interface-compatible\n      with the version that the work was made with.\n\n   c) Accompany the work with a written offer, valid for at least three\n      years, to give the same user the materials specified in Subsection\n      6a, above, for a charge no more than the cost of performing this\n      distribution.\n\n   d) If distribution of the work is made by offering access to copy from a\n      designated place, offer equivalent access to copy the above specified\n      materials from the same place.\n\n   e) Verify that the user has already received a copy of these materials\n      or that you have already sent this user a copy.\n\n   For an executable, the required form of the \"work that uses the Library\"\n   must include any data and utility programs needed for reproducing the\n   executable from it. However, as a special exception, the materials to be\n   distributed need not include anything that is normally distributed (in\n   either source or binary form) with the major components (compiler,\n   kernel, and so on) of the operating system on which the executable runs,\n   unless that component itself accompanies the executable.\n\n   It may happen that this requirement contradicts the license restrictions\n   of other proprietary libraries that do not normally accompany the\n   operating system. Such a contradiction means you cannot use both them\n   and the Library together in an executable that you distribute.\n\n7. You may place library facilities that are a work based on the Library\n   side-by-side in a single library together with other library facilities\n   not covered by this License, and distribute such a combined library,\n   provided that the separate distribution of the work based on the Library\n   and of the other library facilities is otherwise permitted, and provided\n   that you do these two things:\n\n   a) Accompany the combined library with a copy of the same work based on\n      the Library, uncombined with any other library facilities. This must\n      be distributed under the terms of the Sections above.\n\n   b) Give prominent notice with the combined library of the fact that part\n      of it is a work based on the Library, and explaining where to find\n      the accompanying uncombined form of the same work.\n\n8. You may not copy, modify, sublicense, link with, or distribute the\n   Library except as expressly provided under this License. Any attempt\n   otherwise to copy, modify, sublicense, link with, or distribute the\n   Library is void, and will automatically terminate your rights under this\n   License. However, parties who have received copies, or rights, from you\n   under this License will not have their licenses terminated so long as\n   such parties remain in full compliance.\n\n9. You are not required to accept this License, since you have not signed\n   it. However, nothing else grants you permission to modify or distribute\n   the Library or its derivative works. These actions are prohibited by law\n   if you do not accept this License. Therefore, by modifying or\n   distributing the Library (or any work based on the Library), you\n   indicate your acceptance of this License to do so, and all its terms and\n   conditions for copying, distributing or modifying the Library or works\n   based on it.\n\n10. Each time you redistribute the Library (or any work based on the\n    Library), the recipient automatically receives a license from the\n    original licensor to copy, distribute, link with or modify the Library\n    subject to these terms and conditions. You may not impose any further\n    restrictions on the recipients' exercise of the rights granted\n    herein. You are not responsible for enforcing compliance by third\n    parties with this License.\n\n11. If, as a consequence of a court judgment or allegation of patent\n    infringement or for any other reason (not limited to patent issues),\n    conditions are imposed on you (whether by court order, agreement or\n    otherwise) that contradict the conditions of this License, they do not\n    excuse you from the conditions of this License. If you cannot\n    distribute so as to satisfy simultaneously your obligations under this\n    License and any other pertinent obligations, then as a consequence you\n    may not distribute the Library at all. For example, if a patent license\n    would not permit royalty-free redistribution of the Library by all\n    those who receive copies directly or indirectly through you, then the\n    only way you could satisfy both it and this License would be to refrain\n    entirely from distribution of the Library.\n\n    If any portion of this section is held invalid or unenforceable under\n    any particular circumstance, the balance of the section is intended to\n    apply, and the section as a whole is intended to apply in other\n    circumstances.\n\n    It is not the purpose of this section to induce you to infringe any\n    patents or other property right claims or to contest validity of any\n    such claims; this section has the sole purpose of protecting the\n    integrity of the free software distribution system which is implemented\n    by public license practices. Many people have made generous\n    contributions to the wide range of software distributed through that\n    system in reliance on consistent application of that system; it is up\n    to the author/donor to decide if he or she is willing to distribute\n    software through any other system and a licensee cannot impose that\n    choice.\n\n    This section is intended to make thoroughly clear what is believed to\n    be a consequence of the rest of this License.\n\n12. If the distribution and/or use of the Library is restricted in certain\n    countries either by patents or by copyrighted interfaces, the original\n    copyright holder who places the Library under this License may add an\n    explicit geographical distribution limitation excluding those\n    countries, so that distribution is permitted only in or among countries\n    not thus excluded. In such case, this License incorporates the\n    limitation as if written in the body of this License.\n\n13. The Free Software Foundation may publish revised and/or new versions of\n    the Lesser General Public License from time to time. Such new versions\n    will be similar in spirit to the present version, but may differ in\n    detail to address new problems or concerns.\n\n    Each version is given a distinguishing version number. If the Library\n    specifies a version number of this License which applies to it and \"any\n    later version\", you have the option of following the terms and\n    conditions either of that version or of any later version published by\n    the Free Software Foundation. If the Library does not specify a license\n    version number, you may choose any version ever published by the Free\n    Software Foundation.\n\n14. If you wish to incorporate parts of the Library into other free\n    programs whose distribution conditions are incompatible with these,\n    write to the author to ask for permission. For software which is\n    copyrighted by the Free Software Foundation, write to the Free Software\n    Foundation; we sometimes make exceptions for this. Our decision will be\n    guided by the two goals of preserving the free status of all\n    derivatives of our free software and of promoting the sharing and reuse\n    of software generally.\n\nNO WARRANTY\n\n15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\n    FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN\n    OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\n    PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER\n    EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE\n    ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH\n    YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL\n    NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\n    WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\n    REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU FOR\n    DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL\n    DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE LIBRARY\n    (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED\n    INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF\n    THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR\n    OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\nEND OF TERMS AND CONDITIONS\n\nHow to Apply These Terms to Your New Libraries\n\nIf you develop a new library, and you want it to be of the greatest\npossible use to the public, we recommend making it free software that\neveryone can redistribute and change. You can do so by permitting\nredistribution under these terms (or, alternatively, under the terms of the\nordinary General Public License).\n\nTo apply these terms, attach the following notices to the library. It is\nsafest to attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\none line to give the library's name and an idea of what it does.\nCopyright (C) year name of author\n\nThis library is free software; you can redistribute it and/or modify it\nunder the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation; either version 2.1 of the License, or (at\nyour option) any later version.\n\nThis library is distributed in the hope that it will be useful, but WITHOUT\nANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\nFITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License\nfor more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with this library; if not, write to the Free Software Foundation,\nInc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Also add\ninformation on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the library, if\nnecessary. Here is a sample; alter the names:\n\nYoyodyne, Inc., hereby disclaims all copyright interest in\nthe library `Frob' (a library for tweaking knobs) written\nby James Random Hacker.\n\nsignature of Ty Coon, 1 April 1990\nTy Coon, President of Vice\nThat's all there is to it!\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.310546875,
          "content": "<picture>\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"assets/libbpf-logo-sideways-darkbg.png\" width=\"40%\">\n  <img src=\"assets/libbpf-logo-sideways.png\" width=\"40%\">\n</picture>\n\nlibbpf\n[![Github Actions Builds & Tests](https://github.com/libbpf/libbpf/actions/workflows/test.yml/badge.svg)](https://github.com/libbpf/libbpf/actions/workflows/test.yml)\n[![Coverity](https://img.shields.io/coverity/scan/18195.svg)](https://scan.coverity.com/projects/libbpf)\n[![CodeQL](https://github.com/libbpf/libbpf/workflows/CodeQL/badge.svg?branch=master)](https://github.com/libbpf/libbpf/actions?query=workflow%3ACodeQL+branch%3Amaster)\n[![OSS-Fuzz Status](https://oss-fuzz-build-logs.storage.googleapis.com/badges/libbpf.svg)](https://oss-fuzz-build-logs.storage.googleapis.com/index.html#libbpf)\n[![Read the Docs](https://readthedocs.org/projects/libbpf/badge/?version=latest)](https://libbpf.readthedocs.io/en/latest/)\n======\n\n**This is the official home of the libbpf library.**\n\n*Please use this Github repository for building and packaging libbpf\nand when using it in your projects through Git submodule.*\n\nLibbpf *authoritative source code* is developed as part of [bpf-next Linux source\ntree](https://kernel.googlesource.com/pub/scm/linux/kernel/git/bpf/bpf-next) under\n`tools/lib/bpf` subdirectory and is periodically synced to Github. As such, all the\nlibbpf changes should be sent to [BPF mailing list](http://vger.kernel.org/vger-lists.html#bpf),\nplease don't open PRs here unless you are changing Github-specific parts of libbpf\n(e.g., Github-specific Makefile).\n\nLibbpf and general BPF usage questions\n======================================\n\nLibbpf documentation can be found [here](https://libbpf.readthedocs.io/en/latest/api.html).\nIt's an ongoing effort and has ways to go, but please take a look and consider contributing as well.\n\nPlease check out [libbpf-bootstrap](https://github.com/libbpf/libbpf-bootstrap)\nand [the companion blog post](https://nakryiko.com/posts/libbpf-bootstrap/) for\nthe examples of building BPF applications with libbpf.\n[libbpf-tools](https://github.com/iovisor/bcc/tree/master/libbpf-tools) are also\na good source of the real-world libbpf-based tracing tools.\n\nSee also [\"BPF CO-RE reference guide\"](https://nakryiko.com/posts/bpf-core-reference-guide/)\nfor the coverage of practical aspects of building BPF CO-RE applications and\n[\"BPF CO-RE\"](https://nakryiko.com/posts/bpf-portability-and-co-re/) for\ngeneral introduction into BPF portability issues and BPF CO-RE origins.\n\nAll general BPF questions, including kernel functionality, libbpf APIs and\ntheir application, should be sent to bpf@vger.kernel.org mailing list. You can\nsubscribe to it [here](http://vger.kernel.org/vger-lists.html#bpf) and search\nits archive [here](https://lore.kernel.org/bpf/). Please search the archive\nbefore asking new questions. It very well might be that this was already\naddressed or answered before.\n\nbpf@vger.kernel.org is monitored by many more people and they will happily try\nto help you with whatever issue you have. This repository's PRs and issues\nshould be opened only for dealing with issues pertaining to specific way this\nlibbpf mirror repo is set up and organized.\n\nBuilding libbpf\n===============\nlibelf is an internal dependency of libbpf and thus it is required to link\nagainst and must be installed on the system for applications to work.\npkg-config is used by default to find libelf, and the program called can be\noverridden with `PKG_CONFIG`.\n\nIf using `pkg-config` at build time is not desired, it can be disabled by\nsetting `NO_PKG_CONFIG=1` when calling make.\n\nTo build both static libbpf.a and shared libbpf.so:\n```bash\n$ cd src\n$ make\n```\n\nTo build only static libbpf.a library in directory\nbuild/ and install them together with libbpf headers in a staging directory\nroot/:\n```bash\n$ cd src\n$ mkdir build root\n$ BUILD_STATIC_ONLY=y OBJDIR=build DESTDIR=root make install\n```\n\nTo build both static libbpf.a and shared libbpf.so against a custom libelf\ndependency installed in /build/root/ and install them together with libbpf\nheaders in a build directory /build/root/:\n```bash\n$ cd src\n$ PKG_CONFIG_PATH=/build/root/lib64/pkgconfig DESTDIR=/build/root make install\n```\n\nBPF CO-RE (Compile Once – Run Everywhere)\n=========================================\n\nLibbpf supports building BPF CO-RE-enabled applications, which, in contrast to\n[BCC](https://github.com/iovisor/bcc/), do not require Clang/LLVM runtime\nbeing deployed to target servers and doesn't rely on kernel-devel headers\nbeing available.\n\nIt does rely on kernel to be built with [BTF type\ninformation](https://www.kernel.org/doc/html/latest/bpf/btf.html), though.\nSome major Linux distributions come with kernel BTF already built in:\n  - Fedora 31+\n  - RHEL 8.2+\n  - OpenSUSE Tumbleweed (in the next release, as of 2020-06-04)\n  - Arch Linux (from kernel 5.7.1.arch1-1)\n  - Manjaro (from kernel 5.4 if compiled after 2021-06-18)\n  - Ubuntu 20.10\n  - Debian 11 (amd64/arm64)\n\nIf your kernel doesn't come with BTF built-in, you'll need to build custom\nkernel. You'll need:\n  - `pahole` 1.16+ tool (part of `dwarves` package), which performs DWARF to\n    BTF conversion;\n  - kernel built with `CONFIG_DEBUG_INFO_BTF=y` option;\n  - you can check if your kernel has BTF built-in by looking for\n    `/sys/kernel/btf/vmlinux` file:\n  \n```shell\n$ ls -la /sys/kernel/btf/vmlinux\n-r--r--r--. 1 root root 3541561 Jun  2 18:16 /sys/kernel/btf/vmlinux\n```\n  \nTo develop and build BPF programs, you'll need Clang/LLVM 10+. The following\ndistributions have Clang/LLVM 10+ packaged by default:\n  - Fedora 32+\n  - Ubuntu 20.04+\n  - Arch Linux\n  - Ubuntu 20.10 (LLVM 11)\n  - Debian 11 (LLVM 11)\n  - Alpine 3.13+\n\nOtherwise, please make sure to update it on your system.\n\nThe following resources are useful to understand what BPF CO-RE is and how to\nuse it:\n- [BPF CO-RE reference guide](https://nakryiko.com/posts/bpf-core-reference-guide/)\n- [BPF Portability and CO-RE](https://nakryiko.com/posts/bpf-portability-and-co-re/)\n- [HOWTO: BCC to libbpf conversion](https://nakryiko.com/posts/bcc-to-libbpf-howto-guide/)\n- [libbpf-tools in BCC repo](https://github.com/iovisor/bcc/tree/master/libbpf-tools)\n  contain lots of real-world tools converted from BCC to BPF CO-RE. Consider\n  converting some more to both contribute to the BPF community and gain some\n  more experience with it.\n\nDistributions\n=============\n\nDistributions packaging libbpf from this mirror:\n  - [Fedora](https://src.fedoraproject.org/rpms/libbpf)\n  - [Gentoo](https://packages.gentoo.org/packages/dev-libs/libbpf)\n  - [Debian](https://packages.debian.org/source/sid/libbpf)\n  - [Arch](https://archlinux.org/packages/core/x86_64/libbpf/)\n  - [Ubuntu](https://packages.ubuntu.com/source/jammy/libbpf)\n  - [Alpine](https://pkgs.alpinelinux.org/packages?name=libbpf)\n\nBenefits of packaging from the mirror over packaging from kernel sources:\n  - Consistent versioning across distributions.\n  - No ties to any specific kernel, transparent handling of older kernels.\n    Libbpf is designed to be kernel-agnostic and work across multitude of\n    kernel versions. It has built-in mechanisms to gracefully handle older\n    kernels, that are missing some of the features, by working around or\n    gracefully degrading functionality. Thus libbpf is not tied to a specific\n    kernel version and can/should be packaged and versioned independently.\n  - Continuous integration testing via\n    [GitHub Actions](https://github.com/libbpf/libbpf/actions).\n  - Static code analysis via [LGTM](https://lgtm.com/projects/g/libbpf/libbpf)\n    and [Coverity](https://scan.coverity.com/projects/libbpf).\n\nPackage dependencies of libbpf, package names may vary across distros:\n  - zlib\n  - libelf\n\n[![libbpf distro packaging status](https://repology.org/badge/vertical-allrepos/libbpf.svg)](https://repology.org/project/libbpf/versions)\n\n\nbpf-next to Github sync\n=======================\n\nAll the gory details of syncing can be found in `scripts/sync-kernel.sh`\nscript. See [SYNC.md](SYNC.md) for instruction.\n\nSome header files in this repo (`include/linux/*.h`) are reduced versions of\ntheir counterpart files at\n[bpf-next](https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next.git/)'s\n`tools/include/linux/*.h` to make compilation successful.\n\nLicense\n=======\n\nThis work is dual-licensed under BSD 2-clause license and GNU LGPL v2.1 license.\nYou can choose between one of them if you use this work.\n\n`SPDX-License-Identifier: BSD-2-Clause OR LGPL-2.1`\n"
        },
        {
          "name": "SYNC.md",
          "type": "blob",
          "size": 12.921875,
          "content": "<picture>\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"assets/libbpf-logo-sideways-darkbg.png\" width=\"40%\">\n  <img src=\"assets/libbpf-logo-sideways.png\" width=\"40%\">\n</picture>\n\nLibbpf sync\n===========\n\nLibbpf *authoritative source code* is developed as part of [bpf-next Linux source\ntree](https://kernel.googlesource.com/pub/scm/linux/kernel/git/bpf/bpf-next) under\n`tools/lib/bpf` subdirectory and is periodically synced to Github.\n\nMost of the mundane mechanical things like bpf and bpf-next tree merge, Git\nhistory transformation, cherry-picking relevant commits, re-generating\nauto-generated headers, etc. are taken care by\n[sync-kernel.sh script](https://github.com/libbpf/libbpf/blob/master/scripts/sync-kernel.sh).\nBut occasionally human needs to do few extra things to make everything work\nnicely.\n\nThis document goes over the process of syncing libbpf sources from Linux repo\nto this Github repository. Feel free to contribute fixes and additions if you\nrun into new problems not outlined here.\n\nSetup expectations\n------------------\n\nSync script has particular expectation of upstream Linux repo setup. It\nexpects that current HEAD of that repo points to bpf-next's master branch and\nthat there is a separate local branch pointing to bpf tree's master branch.\nThis is important, as the script will automatically merge their histories for\nthe purpose of libbpf sync.\n\nBelow, we assume that Linux repo is located at `~/linux`, it's current head is\nat latest `bpf-next/master`, and libbpf's Github repo is located at\n`~/libbpf`, checked out to latest commit on `master` branch. It doesn't matter\nfrom where to run `sync-kernel.sh` script, but we'll be running it from inside\n`~/libbpf`.\n\n```\n$ cd ~/linux && git remote -v | grep -E '^(bpf|bpf-next)'\nbpf     https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf.git (fetch)\nbpf     ssh://git@gitolite.kernel.org/pub/scm/linux/kernel/git/bpf/bpf.git\n(push)\nbpf-next\nhttps://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next.git (fetch)\nbpf-next\nssh://git@gitolite.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next.git (push)\n$ git branch -vv | grep -E '^? (master|bpf-master)'\n* bpf-master                               2d311f480b52 [bpf/master] riscv, bpf: Fix patch_text implicit declaration\n  master                                   c8ee37bde402 [bpf-next/master] libbpf: Fix bpf_xdp_query() in old kernels\n$ git checkout bpf-master && git pull && git checkout master && git pull\n...\n$ git log --oneline -n1\nc8ee37bde402 (HEAD -> master, bpf-next/master) libbpf: Fix bpf_xdp_query() in old kernels\n$ cd ~/libbpf && git checkout master && git pull\nYour branch is up to date with 'libbpf/master'.\nAlready up to date.\n```\n\nRunning setup script\n--------------------\n\nFirst step is to always run `sync-kernel.sh` script. It expects three arguments:\n\n```\n$ scripts/sync-kernel.sh <libbpf-repo> <kernel-repo> <bpf-branch>\n```\n\nNote, that we'll store script's entire output in `/tmp/libbpf-sync.txt` and\nput it into PR summary later on. **Please store scripts output and include it\nin PR summary for others to check for anything unexpected and suspicious.**\n\n```\n$ scripts/sync-kernel.sh ~/libbpf ~/linux bpf-master | tee /tmp/libbpf-sync.txt\nDumping existing libbpf commit signatures...\nWORKDIR:          /home/andriin/libbpf\nLINUX REPO:       /home/andriin/linux\nLIBBPF REPO:      /home/andriin/libbpf\n...\n```\n\nMost of the time this will go very uneventful. One expected case when sync\nscript might require user intervention is if `bpf` tree has some libbpf fixes,\nwhich is nowadays not a very frequent occurence. But if that happens, script\nwill show you a diff between expected state as of latest bpf-next and synced\nGithub repo state. And will ask if these changes look good. Please use your\nbest judgement to verify that differences are indeed from expected `bpf` tree\nfixes. E.g., it might look like below:\n\n```\nComparing list of files...\nComparing file contents...\n--- /home/andriin/linux/include/uapi/linux/netdev.h     2023-02-27 16:54:42.270583372 -0800\n+++ /home/andriin/libbpf/include/uapi/linux/netdev.h    2023-02-27 16:54:34.615530796 -0800\n@@ -19,7 +19,7 @@\n  * @NETDEV_XDP_ACT_XSK_ZEROCOPY: This feature informs if netdev supports AF_XDP\n  *   in zero copy mode.\n  * @NETDEV_XDP_ACT_HW_OFFLOAD: This feature informs if netdev supports XDP hw\n- *   oflloading.\n+ *   offloading.\n  * @NETDEV_XDP_ACT_RX_SG: This feature informs if netdev implements non-linear\n  *   XDP buffer support in the driver napi callback.\n  * @NETDEV_XDP_ACT_NDO_XMIT_SG: This feature informs if netdev implements\n/home/andriin/linux/include/uapi/linux/netdev.h and /home/andriin/libbpf/include/uapi/linux/netdev.h are different!\nUnfortunately, there are some inconsistencies, please double check.\nDoes everything look good? [y/N]:\n```\n\nIf it looks sensible and expected, type `y` and script will proceed.\n\nIf sync is successful, your `~/linux` repo will be left in original state on\nthe original HEAD commit. `~/libbpf` repo will now be on a new branch, named\n`libbpf-sync-<timestamp>` (e.g., `libbpf-sync-2023-02-28T00-53-40.072Z`).\n\nPush this branch into your fork of `libbpf/libbpf` Github repo and create a PR:\n\n```\n$ git push --set-upstream origin libbpf-sync-2023-02-28T00-53-40.072Z\nEnumerating objects: 130, done.\nCounting objects: 100% (115/115), done.\nDelta compression using up to 80 threads\nCompressing objects: 100% (28/28), done.\nWriting objects: 100% (32/32), 5.57 KiB | 1.86 MiB/s, done.\nTotal 32 (delta 21), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (21/21), completed with 9 local objects.\nremote:\nremote: Create a pull request for 'libbpf-sync-2023-02-28T00-53-40.072Z' on GitHub by visiting:\nremote:      https://github.com/anakryiko/libbpf/pull/new/libbpf-sync-2023-02-28T00-53-40.072Z\nremote:\nTo github.com:anakryiko/libbpf.git\n * [new branch]                libbpf-sync-2023-02-28T00-53-40.072Z -> libbpf-sync-2023-02-28T00-53-40.072Z\nBranch 'libbpf-sync-2023-02-28T00-53-40.072Z' set up to track remote branch 'libbpf-sync-2023-02-28T00-53-40.072Z' from 'origin'.\n```\n\n**Please, adjust PR name to have a properly looking timestamp. Libbpf\nmaintainers will be very thankful for that!**\n\nBy default Github will turn above branch name into PR with subject \"Libbpf sync\n2023 02 28 t00 53 40.072 z\". Please fix this into a proper timestamp, e.g.:\n\"Libbpf sync 2023-02-28T00:53:40.072Z\". Thank you!\n\n**Please don't forget to paste contents of /tmp/libbpf-sync.txt into PR\nsummary!**\n\nOnce PR is created, libbpf CI will run a bunch of tests to check that\neverything is good. In simple cases that would be all you'd need to do. In more\ncomplicated cases some extra adjustments might be necessary.\n\n**Please, keep naming and style consistent.** Prefix CI-related fixes with `ci: `\nprefix. If you had to modify sync script, prefix it with `sync: `. Also make\nsure that each such commit has `Signed-off-by: Your Full Name <your@email.com>`,\njust like you'd do that for Linux upstream patch. Libbpf closely follows kernel\nconventions and styling, so please help maintaining that.\n\nIncluding new sources\n---------------------\n\nIf entirely new source files (typically `*.c`) were added to the library in the\nkernel repository, it may be necessary to add these to the build system\nmanually (you may notice linker errors otherwise), because the script cannot\nhandle such changes automatically. To that end, edit `src/Makefile` as\nnecessary. Commit\n[c2495832ced4](https://github.com/libbpf/libbpf/commit/c2495832ced4239bcd376b9954db38a6addd89ca)\nis an example of how to go about doing that.\n\nSimilarly, if new public API header files were added, the `Makefile` will need\nto be adjusted as well.\n\nUpdating allow/deny lists\n-------------------------\n\nLibbpf CI intentionally runs a subset of latest BPF selftests on old kernel\n(4.9 and 5.5, currently). It happens from time to time that some tests that\npreviously were successfully running on old kernels now don't, typically due to\nreliance on some freshly added kernel feature. It might look something like this in [CI logs](https://github.com/libbpf/libbpf/actions/runs/4206303272/jobs/7299609578#step:4:2733):\n\n```\n  All error logs:\n  serial_test_xdp_info:FAIL:get_xdp_none errno=2\n  #283     xdp_info:FAIL\n  Summary: 49/166 PASSED, 5 SKIPPED, 1 FAILED\n```\n\nIn such case we can either work with upstream to fix test to be compatible with\nold kernels, or we'll have to add a test into a denylist (or remove it from\nallowlist, like was [done](https://github.com/libbpf/libbpf/commit/ea284299025bf85b85b4923191de6463cd43ccd6)\nfor the case above).\n\n```\n$ find . -name '*LIST*'\n./ci/vmtest/configs/ALLOWLIST-4.9.0\n./ci/vmtest/configs/DENYLIST-5.5.0\n./ci/vmtest/configs/DENYLIST-latest.s390x\n./ci/vmtest/configs/DENYLIST-latest\n./ci/vmtest/configs/ALLOWLIST-5.5.0\n```\n\nPlease determine which tests need to be added/removed from which list. And then\nadd that as a separate commit. **Please keep using the same branch name, so\nthat the same PR can be updated.** There is no need to open new PRs for each\nsuch fix.\n\nRegenerating vmlinux.h header\n-----------------------------\n\nTo compile latest BPF selftests against old kernels, we check in pre-generated\n[vmlinux.h](https://github.com/libbpf/libbpf/blob/master/.github/actions/build-selftests/vmlinux.h)\nheader file, located at `.github/actions/build-selftests/vmlinux.h`, which\ncontains type definitions from latest upstream kernel. When after libbpf sync\nupstream BPF selftests require new kernel types, we'd need to regenerate\n`vmlinux.h` and check it in as well.\n\nThis will looks something like this in [CI logs](https://github.com/libbpf/libbpf/actions/runs/4198939244/jobs/7283214243#step:4:1903):\n\n```\n  In file included from progs/test_spin_lock_fail.c:5:\n  /home/runner/work/libbpf/libbpf/.kernel/tools/testing/selftests/bpf/bpf_experimental.h:73:53: error: declaration of 'struct bpf_rb_root' will not be visible outside of this function [-Werror,-Wvisibility]\n  extern struct bpf_rb_node *bpf_rbtree_remove(struct bpf_rb_root *root,\n                                                      ^\n  /home/runner/work/libbpf/libbpf/.kernel/tools/testing/selftests/bpf/bpf_experimental.h:81:35: error: declaration of 'struct bpf_rb_root' will not be visible outside of this function [-Werror,-Wvisibility]\n  extern void bpf_rbtree_add(struct bpf_rb_root *root, struct bpf_rb_node *node,\n                                    ^\n  /home/runner/work/libbpf/libbpf/.kernel/tools/testing/selftests/bpf/bpf_experimental.h:90:52: error: declaration of 'struct bpf_rb_root' will not be visible outside of this function [-Werror,-Wvisibility]\n  extern struct bpf_rb_node *bpf_rbtree_first(struct bpf_rb_root *root) __ksym;\n                                                     ^\n  3 errors generated.\n  make: *** [Makefile:572: /home/runner/work/libbpf/libbpf/.kernel/tools/testing/selftests/bpf/test_spin_lock_fail.bpf.o] Error 1\n  make: *** Waiting for unfinished jobs....\n  Error: Process completed with exit code 2.\n```\n\nYou'll need to build latest upstream kernel from `bpf-next` tree, using BPF\nselftest configs. Concat arch-agnostic and arch-specific configs, build kernel,\nthen use bpftool to dump `vmlinux.h`:\n\n```\n$ cd ~/linux\n$ cat tools/testing/selftests/bpf/config \\\n   tools/testing/selftests/bpf/config.x86_64 > .config\n$ make -j$(nproc) olddefconfig all\n...\n$ bpftool btf dump file ~/linux/vmlinux format c > ~/libbpf/.github/actions/build-selftests/vmlinux.h\n$ cd ~/libbpf && git add . && git commit -s\n```\n\nCheck in generated `vmlinux.h`, don't forget to use `ci: ` commit prefix, add\nit on top of sync commits. Push to Github and let libbpf CI do the checking for\nyou. See [this commit](https://github.com/libbpf/libbpf/commit/34212c94a64df8eeb1dd5d064630a65e1dfd4c20)\nfor reference.\n\nTroubleshooting\n---------------\n\nIf something goes wrong and sync script exits early or is terminated early by\nuser, you might end up with `~/linux` repo on temporary sync-related branch.\nDon't worry, though, sync script never destroys repo state, it follows\n\"copy-on-write\" philosophy and creates new branches where necessary. So it's\nvery easy to restore previous state. So if anything goes wrong, it's easy to\nstart fresh:\n\n```\n$ git branch | grep -E 'libbpf-.*Z'\n  libbpf-baseline-2023-02-28T00-43-35.146Z\n  libbpf-bpf-baseline-2023-02-28T00-43-35.146Z\n  libbpf-bpf-tip-2023-02-28T00-43-35.146Z\n  libbpf-squash-base-2023-02-28T00-43-35.146Z\n* libbpf-squash-tip-2023-02-28T00-43-35.146Z\n$ git cherry-pick --abort\n$ git checkout master && git branch | grep -E 'libbpf-.*Z' | xargs git br -D\nSwitched to branch 'master'\nYour branch is up to date with 'bpf-next/master'.\nDeleted branch libbpf-baseline-2023-02-28T00-43-35.146Z (was 951bce29c898).\nDeleted branch libbpf-bpf-baseline-2023-02-28T00-43-35.146Z (was 3a70e0d4c9d7).\nDeleted branch libbpf-bpf-tip-2023-02-28T00-43-35.146Z (was 2d311f480b52).\nDeleted branch libbpf-squash-base-2023-02-28T00-43-35.146Z (was 957f109ef883).\nDeleted branch libbpf-squash-tip-2023-02-28T00-43-35.146Z (was be66130d2339).\nDeleted branch libbpf-tip-2023-02-28T00-43-35.146Z (was 2d311f480b52).\n```\n\nYou might need to do the same for your `~/libbpf` repo sometimes, depending at\nwhich stage sync script was terminated.\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}