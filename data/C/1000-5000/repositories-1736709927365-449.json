{
  "metadata": {
    "timestamp": 1736709927365,
    "page": 449,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "alibaba/tsar",
      "stars": 2480,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.06640625,
          "content": "*.o\n*.so\n*.so.*\ntags\nsrc/tsar\n*.DS_Store\n*.dSYM\ncscope.out\nttsar.sh\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.365234375,
          "content": "#This file contains a list of people who've made non-trivial\n# contribution to the Tsar project.  People who commit code\n# to the project are encouraged to add their names here.\n# Please keep the list sorted by first names.\n\nkongjian <kongjian@taobao.com>\nkuotai <kuotai@taobao.com>\nyonghao <yonghao@taobao.com>\nzituan <zituan@taobao.com>\nhuiyan.jhf <huiyan.jhf@taobao.com>\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 0.373046875,
          "content": "2017-12-12\n* 支持Lua语言开发模块\n2015-12-14\n* 增加了tsar -w 功能\n2015-07-27\n* output_tcp 增加了多目的发送功能，目前最多支持4个地址，以空格隔开\n2013-03-06\n* tsar的模块支持参数配置\n2013-01-23\n* tsar支持--spec功能，可以指定特定字段来显示\n2013-01-16\n* merge inner and opensource tsar version\n2011-05-18\n* tsar opensourced\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 0.7666015625,
          "content": "Simple install procedure\n========================\n\n  % gzip -cd tsar-2.1.0.tar.gz | tar xvf -  # unpack the sources\n  % cd tsar-2.1.0                           # change to the toplevel directory\n  % make                                    # build tsar\n\n  [ Become root if necessary ]\n  % make install                            # install tsar\n  % make uninstall                          # uninstall tsar\n  [ if you want install tsardevel ]\n  % make tsardevel\n  % make uninstall\n\nRPM install\n========================\n\n  %gzip -cd tsar-2.1.0.tar.gz | tar xvf -  # unpack the sources\n  %cd tsar-2.1.0/rpm                       # change to the rpm directory\n  %sh tsar-build.sh .. tsar 2.1.0 1        # create rpm for tsar\n  %rpm -ivh *.rpm                          # install tsar by rpm\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.865234375,
          "content": "DIRS = src modules lualib\n\nall:\n\tfor i in $(DIRS); do make -C $$i; done\n\nclean:\n\tfor i in $(DIRS); do cd $$i;make clean;cd ..; done\n\ninstall: all\n\t#mkdir for tsar\n\tmkdir -p /usr/local/tsar/modules\n\tmkdir -p /etc/tsar\n\tmkdir -p /usr/local/man/man8/\n\t#copy tsar shared so\n\tcp modules/*.so /usr/local/tsar/modules\n\t#copy bin file\n\tcp src/tsar /usr/bin/tsar\n\t#copy config file\n\tcp conf/tsar.conf /etc/tsar/tsar.conf\n\tcp conf/tsar.logrotate /etc/logrotate.d/tsar\n\tcp conf/tsar.cron /etc/cron.d/tsar\n\t#copy man file\n\tcp conf/tsar.8 /usr/local/man/man8/\n\t#install lualib\n\tmake -C lualib install\n\nuninstall:\n\t#rm tsar\n\trm -rf /usr/local/tsar\n\trm -rf /etc/tsar/cron.d\n\trm -f /etc/logrotate.d/tsar\n\trm -f /etc/cron.d/tsar\n\trm -f /usr/local/man/man8/tsar.8\n\t#rm tsar\n\trm -f /usr/bin/tsar\n\t#rm tsardevel\n\trm -f /usr/bin/tsardevel\n\t#rm tsarluadevel\n\trm -f /usr/bin/tsarluadevel\n\t#backup configure file\n\tif [ -f /etc/tsar/tsar.conf ]; then mv /etc/tsar/tsar.conf /etc/tsar/tsar.conf.rpmsave; fi\n\t#backup the log data file\n\tif [ -f /var/log/tsar.data ]; then mv /var/log/tsar.data /var/log/tsar.data.bak; fi\n\ntsardevel:\n\tmkdir -p $(DESTDIR)/usr/local/tsar/devel\n\tcp devel/mod_test.c $(DESTDIR)/usr/local/tsar/devel/mod_test.c\n\tcp devel/mod_test.conf $(DESTDIR)/usr/local/tsar/devel/mod_test.conf\n\tcp devel/tsar.h $(DESTDIR)/usr/local/tsar/devel/tsar.h\n\tcp devel/Makefile.test $(DESTDIR)/usr/local/tsar/devel/Makefile.test\n\tcp devel/tsardevel $(DESTDIR)/usr/bin/tsardevel\n\ntsarluadevel:\n\tmkdir -p $(DESTDIR)/usr/local/tsar/luadevel\n\tcp luadevel/mod_lua_test.lua $(DESTDIR)/usr/local/tsar/luadevel/mod_lua_test.lua\n\tcp luadevel/mod_lua_test.conf $(DESTDIR)/usr/local/tsar/luadevel/mod_lua_test.conf\n\tcp luadevel/Makefile.test $(DESTDIR)/usr/local/tsar/luadevel/Makefile.test\n\tcp luadevel/tsarluadevel $(DESTDIR)/usr/bin/tsarluadevel\n\ntags:\n\tctags -R\n\tcscope -Rbq\n\n.PHONY: all clean install unintall tsardevel tsarluadevel tags\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.9453125,
          "content": "Introduction\n------------\nTsar (Taobao System Activity Reporter) is a monitoring tool, which can be used to gather and summarize system information, e.g. CPU, load, IO, and application information, e.g. nginx, HAProxy, Squid, etc. The results can be stored at local disk or sent to Nagios.\n\nTsar can be easily extended by writing modules, which makes it a powerful and versatile reporting tool.\n\nModule introduction: [info](https://github.com/alibaba/tsar/blob/master/info.md)\n\nInstallation\n-------------\nTsar is available on GitHub, you can clone and install it as follows:\n\n    $ git clone https://github.com/alibaba/tsar.git\n    $ cd tsar\n    $ make\n    # make install\n\nOr you can download the zip file and install it:\n\n    $ wget -O tsar.zip https://github.com/alibaba/tsar/archive/master.zip --no-check-certificate\n    $ unzip tsar.zip\n    $ cd tsar\n    $ make\n    # make install\n\nAfter installation, you may see these files:\n\n* `/etc/tsar/tsar.conf`, which is tsar's main configuration file;\n* `/etc/cron.d/tsar`, is used to run tsar to collect information every minute;\n* `/etc/logrotate.d/tsar` will rotate tsar's log files every month;\n* `/usr/local/tsar/modules` is the directory where all module libraries (*.so) are located;\n\nConfiguration\n-------------\nThere is no output displayed after installation by default. Just run `tsar -l` to see if the real-time monitoring works, for instance:\n\n    [kongjian@tsar]$ tsar -l -i 1\n    Time              ---cpu-- ---mem-- ---tcp-- -----traffic---- --xvda-- -xvda1-- -xvda2-- -xvda3-- -xvda4-- -xvda5--  ---load-\n    Time                util     util   retran    pktin  pktout     util     util     util     util     util     util     load1\n    11/04/13-14:09:10   0.20    11.57     0.00     9.00    2.00     0.00     0.00     0.00     0.00     0.00     0.00      0.00\n    11/04/13-14:09:11   0.20    11.57     0.00     4.00    2.00     0.00     0.00     0.00     0.00     0.00     0.00      0.00\n\nUsually, we configure Tsar by simply editing `/etc/tsar/tsar.conf`:\n\n* To add a module, add a line like `mod_<yourmodname> on`\n* To enable or disable a module, use `mod_<yourmodname> on/off`\n* To specify parameters for a module, use `mod_<yourmodname> on parameter`\n* `output_stdio_mod` is to set modules output to standard I/O\n* `output_file_path` is to set history data file, (you should modify the logrotate script `/etc/logrotate.d/tsar` too)\n* `output_interface` specifies tsar data output destination, which by default is a local file. See the Advanced section for more information.\n\nUsage\n------\n* null          :see default mods history data, `tsar`\n* --modname     :specify module to show, `tsar --cpu`\n* -L/--list     :list available module, `tsar -L`\n* -l/--live     :show real-time info, `tsar -l --cpu`\n* -i/--interval :set interval for report, `tsar -i 1 --cpu`\n* -s/--spec     :specify module detail field, `tsar --cpu -s sys,util`\n* -D/--detail   :do not conver data to K/M/G, `tsar --mem -D`\n* -m/--merge    :merge multiply item to one, `tsar --io -m`\n* -I/--item     :show spec item data, `tsar --io -I sda`\n* -d/--date     :specify data, YYYYMMDD, or n means n days ago\n* -C/--check    :show the last collect data\n* -h/--help     :show help, `tsar -h`\n\nAdvanced\n--------\n* Output to Nagios\n\nTo turn it on, just set output type `output_interface file,nagios` in the main configuration file.\n\nYou should also specify Nagios' IP address, port, and sending interval, e.g.:\n\n    ####The IP address or the hostname running the NSCA daemon\n    server_addr nagios.server.com\n    ####The port on which the daemon is listening - by default it is 5667\n    server_port 8086\n    ####The cycle (interval) of sending alerts to Nagios\n    cycle_time 300\n\nAs tsar uses Nagios' passive mode, so you should specify the nsca binary and its configuration file, e.g.:\n\n    ####nsca client program\n    send_nsca_cmd /usr/bin/send_nsca\n    send_nsca_conf /home/a/conf/amon/send_nsca.conf\n\nThen specify the module and fields to be checked. There are 4 threshold levels.\n\n    ####tsar mod alert config file\n    ####threshold servicename.key;w-min;w-max;c-min;cmax;\n    threshold cpu.util;50;60;70;80;\n\n* Output to MySQL\n\nTo use this feature, just add output type `output_interface file,db` in tsar's configuration file.\n\nThen specify which module(s) will be enabled:\n\n    output_db_mod mod_cpu,mod_mem,mod_traffic,mod_load,mod_tcp,mod_udpmod_io\n\nNote that you should set the IP address (or hostname) and port where tsar2db listens, e.g.:\n\n    output_db_addr console2:56677\n\nTsar2db receives sql data and flush it to MySQL. You can find more information about tsar2db at https://github.com/alibaba/tsar2db.\n\n\nModule development\n------------------\nTsar is easily extended. Whenever you want information that is not collected by tsar yet, you can write a module with `C` or `Lua`.\n\nC Module\n--------\nFirst, install the tsardevel tool (`make tsardevel` will do this for you):\n\nThen run `tsardevel <yourmodname>`, and you will get a directory named yourmodname, e.g.:\n\n````bash\n[kongjian@tsar]$ tsardevel test\nbuild:make\ninstall:make install\nuninstall:make uninstall\n\n[kongjian@tsar]$ ls test\nMakefile  mod_test.c  mod_test.conf\n````\n\nYou can modify the read_test_stats() and set_test_record() functions in mod_test.c as you need.\nThen run `make;make install` to install your module and run `tsar --yourmodname` to see the output.\n\nLua Module\n----------\nFirst, install the tsarluadevel tool (`make tsarluadevel` will do this for you):\n\nThen run `tsarluadevel <yourmodname>`, and you will get a directory named yourmodname, e.g.:\n\n````bash\n[kongjian@tsar]$ tsarluadevel test\ninstall:make install\nuninstall:make uninstall\ntest:tsar --list or tsar --lua_test --live -i 1\n\n[kongjian@tsar]$ ls test\nMakefile  mod_lua_test.conf  mod_lua_test.lua\n````\n\nYou can modify the register()、read() and set() functions in mod_lua_test.lua as you need.\nThen run `make install` to install your module and run `tsar --lua_yourmodname` to see the output.\n\nMore\n----\nHomepage http://tsar.taobao.org\n\nAny question, please feel free to contact me by kongjian@taobao.com\n"
        },
        {
          "name": "README_cn.md",
          "type": "blob",
          "size": 5.802734375,
          "content": "Tsar介绍\n------------\nTsar是淘宝的一个用来收集服务器系统和应用信息的采集报告工具，如收集服务器的系统信息（cpu，mem等），以及应用数据（nginx、swift等），收集到的数据存储在服务器磁盘上，可以随时查询历史信息，也可以将数据发送到nagios报警。\n\nTsar能够比较方便的增加模块，只需要按照tsar的要求编写数据的采集函数和展现函数，就可以把自定义的模块加入到tsar中。\n\n安装\n-------------\nTsar目前托管在github上，下载编译安装步骤:\n\n    $git clone git://github.com/kongjian/tsar.git\n    $cd tsar\n    $make\n    $make install\n\n安装后：\n\n定时任务配置:`/etc/cron.d/tsar`，负责每分钟调用tsar执行采集任务；\n\n日志文件轮转配置:`/etc/logrotate.d/tsar`，每个月会把tsar的本地存储进行轮转；\n\nTsar配置文件路径：`/etc/tsar/tsar.conf`，tsar的采集模块和输出的具体配置；\n\n模块路径：`/usr/local/tsar/modules`，各个模块的动态库so文件；\n\nTsar配置\n-------------\nTsar刚安装完，还没有历史数据，想要check是否正常，执行tsar -l，查看是否有实时信息输出：\n\n    [kongjian@v132172.sqa.cm4 tsar]$ tsar -l -i 1\n    Time              ---cpu-- ---mem-- ---tcp-- -----traffic---- --xvda-- -xvda1-- -xvda2-- -xvda3-- -xvda4-- -xvda5--  ---load-\n    Time                util     util   retran    pktin  pktout     util     util     util     util     util     util     load1\n    11/04/13-14:09:10   0.20    11.57     0.00     9.00    2.00     0.00     0.00     0.00     0.00     0.00     0.00      0.00\n    11/04/13-14:09:11   0.20    11.57     0.00     4.00    2.00     0.00     0.00     0.00     0.00     0.00     0.00      0.00\n\nTsar的配置主要都在`/etc/tsar/tsar.conf`中，常用的有：\n* 增加一个模块,添加 `mod_<yourmodname> on` 到配置文件中\n* 打开或者关闭一个模块,修改`mod_<yourmodname> on/off`\n* `output_stdio_mod` 能够配置执行tsar时的输出模块\n* `output_file_path` 采集到的数据默认保存到的文件（如果修改的话需要对应修改轮转的配置`/etc/logrotate.d/tsar`）\n* `output_interface` 指定tsar的数据输出目的，默认file保存本地，nagios/db输出到监控中心/数据库中，这两个功能还需要结合其它配置，具体见后面\n\nTsar使用\n-------------\n* 查看历史数据，tsar\n* -l/--list 查看可用的模块列表\n* -l/--live 查看实时数据,tsar -l --cpu\n* -i/--interval 指定间隔，历史,tsar -i 1 --cpu\n* --modname 指定模块,tsar --cpu\n* -s/--spec 指定字段,tsar --cpu -s sys,util\n* -d/--date 指定日期,YYYYMMDD或者n代表n天前\n* -C/--check 查看最后一次的采集数据\n* -d/--detail 能够指定查看主要字段还是模块的所有字段\n* -h/--help 帮助功能\n\n高级功能\n-------------\n* 输出到nagios\n\n配置：\n首先配置`output_interface file,nagios`，增加nagios输出\n\n然后配置nagios服务器和端口，以及发送的间隔时间\n\n    ####The IP address or the host running the NSCA daemon\n    server_addr nagios.server.com\n    ####The port on which the daemon is running - default is 5667\n    server_port 8086\n    ####The cycle of send alert to nagios\n    cycle_time 300\n\n由于是nagios的被动监控模式，需要制定nsca的位置和配置文件位置\n\n    ####nsca client program\n    send_nsca_cmd /usr/bin/send_nsca\n    send_nsca_conf /home/a/conf/amon/send_nsca.conf\n\n接下来制定哪些模块和字段需要进行监控，一共四个阀值对应nagios中的不同报警级别\n\n    ####tsar mod alert config file\n    ####threshold servicename.key;w-min;w-max;c-min;cmax;\n    threshold cpu.util;50;60;70;80;\n\n* 输出到mysql\n\n配置：\n首先配置`output_interface file,db`，增加db输出\n\n然后配置哪些模块数据需要输出\n\n    output_db_mod mod_cpu,mod_mem,mod_traffic,mod_load,mod_tcp,mod_udpmod_io\n\n然后配置sql语句发送的目的地址和端口\n\n    output_db_addr console2:56677\n\n目的地址在该端口监听tcp数据，并且把数据入库即可，可以参照tsar2db：https://github.com/kongjian/tsar2db\n\n模块开发\n-------------\nTsar的一个比较好的功能是能够增加自己的采集，这时候需要编写模块代码，编译成so文件即可。\n\nC模块\n-----\n首先安装tsardevel，刚才安装时，如果执行`make tsardevel`，就会把模块开发的基本文件安装到系统\n然后执行tsardevel <yourmodname>，就能在当前模块生成一个模块目录：\n\n````bash\n[kongjian@v132172.sqa.cm4 tsar]$ tsardevel test\nbuild:make\ninstall:make install\nuninstall:make uninstall\n\n[kongjian@v132172.sqa.cm4 tsar]$ ls test\nMakefile  mod_test.c  mod_test.conf\n````\n\n按照要求修改mod_test.c中的read_test_stats，set_test_record\n完成后`make;make install`就完成新模块的配置文件和so的设置，执行`tsar --yourmodname`就能查看效果\n\n另外也可以通过配置文件对自定义模块传递参数，方法是\n修改配置文件中的`mod_test on myparameter`\n然后在mod_test.c中的read_test_stats函数中，通过parameter参数就可以获得刚才配置文件中的内容\n\nLua模块\n-------\n首先安装tsarluadevel，刚才安装时，如果执行`make tsarluadevel`，就会把Lua模块开发的基本文件安装到系统\n然后执行tsarluadevel <yourmodname>，就能在当前模块生成一个模块目录：\n\n````bash\n[kongjian@v132172.sqa.cm4 tsar]$ tsarluadevel test\ninstall:make install\nuninstall:make uninstall\ntest:tsar --list or tsar --lua_test --live -i 1\n\n[kongjian@v132172.sqa.cm4 tsar]$ ls test\nMakefile  mod_lua_test.conf  mod_lua_test.lua\n````\n\n按照要求修改mod_lua_test.lua中的register()，read()和set()函数\n完成后`make install`就完成新模块的安装，执行`tsar --lua_yourmodname`就能查看效果\n\n其它\n-------------\nTaocode地址：http://code.taobao.org/p/tsar/\n有其它问题请联系：kongjian@taobao.com\n"
        },
        {
          "name": "conf",
          "type": "tree",
          "content": null
        },
        {
          "name": "devel",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "info.md",
          "type": "blob",
          "size": 23.71875,
          "content": "## 系统模块\n### cpu\n#### 字段含义\n* user:  表示CPU执行用户进程的时间,通常期望用户空间CPU越高越好.\n* sys:   表示CPU在内核运行时间,系统CPU占用率高,表明系统某部分存在瓶颈.通常值越低越好.\n* wait:  CPU在等待I/O操作完成所花费的时间.系统部应该花费大量时间来等待I/O操作,否则就说明I/O存在瓶颈.\n* hirq: 系统处理硬中断所花费的时间百分比\n* sirq: 系统处理软中断所花费的时间百分比\n* util: CPU总使用的时间百分比\n* nice:  系统调整进程优先级所花费的时间百分比\n* steal: 被强制等待（involuntary wait）虚拟CPU的时间,此时hypervisor在为另一个虚拟处理器服务\n* ncpu:  CPU的总个数\n\n#### 采集方式\nCPU的占用率计算,都是根据/proc/stat计数器文件而来,stat文件的内容基本格式是:\n\n    cpu  67793686 1353560 66172807 4167536491 2705057 0 195975 609768\n    cpu0 10529517 944309 11652564 835725059 2150687 0 74605 196726\n    cpu1 14380773 127146 13908869 832565666 150815 0 31780 108418\n\ncpu是总的信息,cpu0,cpu1等是各个具体cpu的信息,共有8个值,单位是ticks,分别是：\n- User time, 67793686\n- Nice time, 1353560\n- System time, 66172807\n- Idle time, 4167536491\n- Waiting time, 2705057\n- Hard Irq time, 0\n- SoftIRQ time, 195975\n- Steal time, 609768\n\n`CPU总时间=user+system+nice+idle+iowait+irq+softirq+Stl`\n\n各个状态的占用=状态的cpu时间/CPU总时间＊100%\n\n比较特殊的是CPU总使用率的计算(util),目前的算法是:\n`util = 1 - idle - iowait - steal` 。\n\n### mem\n#### 字段含义\n* free:   空闲的物理内存的大小\n* used:   已经使用的内存大小\n* buff:   buff使用的内存大小,buffer is something that has yet to be \"written\" to disk.\n* cach:   操作系统会把经常访问的东西放在cache中加快执行速度,A cache is something that has been \"read\" from the disk and stored for later use\n* total:  系统总的内存大小\n* util:   内存使用率\n\n#### 采集方法\n内存的计数器在/proc/meminfo,里面有一些关键项\n\n        MemTotal:      7680000 kB\n        MemFree:        815652 kB\n        Buffers:       1004824 kB\n        Cached:        4922556 kB\n\n含义就不解释了,主要介绍一下内存使用率的计算算法:\n`util = (total - free - buff - cache) / total * 100%`\n\n### load\n#### 字段含义\n* load1: 一分钟的系统平均负载\n* load5: 五分钟的系统平均负载\n* load15:十五分钟的系统平均负载\n* runq:  在采样时刻,运行队列的任务的数目,与/proc/stat的procs_running表示相同意思\n* plit:  在采样时刻,系统中活跃的任务的个数（不包括运行已经结束的任务）\n\n#### 采集方法\n/proc/loadavg文件中保存的有负载相关的数据：\n\n`0.00 0.01 0.00 1/271 23741`\n\n分别是1分钟负载,五分钟负载,十五分钟负载,运行进程／总进程 最大的pid\n\n只需要采集前五个数据既可得到所有信息\n\n注意:只有当系统负载除cpu核数>1的时候,系统负载较高\n\n### traffic\n#### 字段含义\n* bytin:   入口流量byte/s\n* bytout:  出口流量byte/s\n* pktin:   入口pkt/s\n* pktout:  出口pkt/s\n\n#### 采集方法\n流量的计数器信息来自:/proc/net/dev\n\n        face |bytes    packets errs drop fifo frame compressed multicast|bytes    packets errs drop fifo colls carrier compressed\n        lo:1291647853895 811582000    0    0    0     0          0         0 1291647853895 811582000    0    0    0     0       0          0\n        eth0:853633725380 1122575617    0    0    0     0          0         0 1254282827126 808083790    0    0    0     0       0          0\n\n字段的含义第一行已经标示出来,每一行代表一个网卡,tsar主要采集的是出口和入口的bytes／packets。\n\n注意tsar只对以eth和em开头的网卡数据进行了采集,像lo这种网卡直接就忽略掉了,流量的单位是byte。\n\n### tcp\n#### 字段含义\n* active:主动打开的tcp连接数目\n* pasive:被动打开的tcp连接数目\n* iseg:  收到的tcp报文数目\n* outseg:发出的tcp报文数目\n* EstRes:Number of resets that have occurred at ESTABLISHED\n* AtmpFa:Number of failed connection attempts\n* CurrEs:当前状态为ESTABLISHED的tcp连接数\n* retran:系统的重传率\n\n#### 采集方法\ntcp的相关计数器文件是:/proc/net/snmp\n\n        Tcp: RtoAlgorithm RtoMin RtoMax MaxConn ActiveOpens PassiveOpens AttemptFails EstabResets CurrEstab InSegs OutSegs RetransSegs InErrs OutRsts\n        Tcp: 1 200 120000 -1 31702170 14416937 935062 772446 16 1846056224 1426620266 448823 0 5387732\n\n我们主要关注其中的ActiveOpens/PassiveOpens/AttemptFails/EstabResets/CurrEstab/InSegs/OutSegs/RetransSegs\n\n主要关注一下重传率的计算方式:\n`retran = (RetransSegs－last RetransSegs) ／ (OutSegs－last OutSegs) * 100%`\n\n### udp\n#### 字段含义\n* idgm:  收到的udp报文数目\n* odgm:  发送的udp报文数目\n* noport:udp协议层接收到目的地址或目的端口不存在的数据包\n* idmerr:udp层接收到的无效数据包的个数\n\n\n#### 采集方法\nUDP的数据来源文件和TCP一样,也是在/proc/net/snmp\n\n        Udp: InDatagrams NoPorts InErrors OutDatagrams\n        Udp: 31609577 10708119 0 159885874\n\n### io\n#### 字段含义\n* rrqms: The number of read requests merged per second that were issued to the device.\n* wrqms: The number of write requests merged per second that were issued to the device.\n* %rrqm: The percentage of read requests merged together before being sent to the device.\n* %wrqm: The percentage of write requests merged together before being sent to the device.\n* rs:    The number of read requests that were issued to the device per second.\n* ws:    The number of write requests that were issued to the device per second.\n* rsecs: The number of sectors read from the device per second.\n* wsecs: The number of sectors written to the device per second.\n* rqsize:The average size (in megabytes) of the requests that were issued to the device.\n* rarqsz:The average size (in megabytes) of the read requests that were issued to the device.\n* warqsz:The average size (in megabytes) of the write requests that were issued to the device.\n* qusize:The average queue length of the requests that were issued to the device.\n* await: The average time (in milliseconds) for I/O requests issued to the device to be served. This includes the time spent by the requests in queue and the time spent servicing them.\n* rawait:The average time (in milliseconds) for read requests issued to the device to be served. This includes the time spent by the requests in queue and the time spent servicing them.\n* wawait:The average time (in milliseconds) for write requests issued to the device to be served. This includes the time spent by the requests in queue and the time spent servicing them.\n* svctm: The average service time (in milliseconds) for I/O requests that were issued to the device.\n* util:  Percentage of CPU time during which I/O requests were issued to the device (bandwidth utilization for the device).Device saturation occurs when this value is close to 100%.\n\n#### 采集方法\nIO的计数器文件是:/proc/diskstats,比如:\n\n        202    0 xvda 12645385 1235409 416827071 59607552 193111576 258112651 3679534806 657719704 0 37341324 717325100\n        202    1 xvda1 421 2203 3081 9888 155 63 421 1404 0 2608 11292\n\n每一行字段的含义是:\n* major:     主设备号\n* minor:      次设备号,设备号是用来区分磁盘的类型和厂家信息\n* name:       设备名称\n* rd_ios:     读完成次数,number of issued reads. This is the total number of reads completed successfully\n* rd_merges:  合并读完成次数,为了效率可能会合并相邻的读和写.从而两次4K的读在它最终被处理到磁盘上之前可能会变成一次8K的读,才被计数（和排队）,因此只有一次I/O操作\n* rd_sectors: 读扇区的次数,number of sectors read. This is the total number of sectors read successfully.\n* rd_ticks:   读花费的毫秒数,number of milliseconds spent reading. This is the total number of milliseconds spent by all reads\n* wr_ios:     写完成次数,number of writes completed. This is the total number of writes completed successfully\n* wr_merges:  合并写完成次数,number of writes merged Reads and writes which are adjacent to each other may be merged for efficiency. Thus two 4K reads may become one 8K read before it is ultimately handed to the disk, and so it will be counted (and queued) as only one I/O.\n* wr_sectors: 写扇区次数,number of sectors written. This is the total number of sectors written successfully\n* wr_ticks:   写花费的毫秒数,number of milliseconds spent writing. This is the total number of milliseconds spent by all writes.\n* cur_ios:    正在处理的输入/输出请求数,number of I/Os currently in progress. The only field that should go to zero. Incremented as requests are given to appropriate request_queue_t and decremented as they finish.\n* ticks:      输入/输出操作花费的毫秒数\n* aveq:       输入/输出操作花费的加权毫秒数\n\n通过这些计数器可以算出来上面的每个字段的值\n\n    double n_ios = rd_ios + wr_ios;\n    st_array[0] = rd_merges / (inter * 1.0);\n    st_array[1] = wr_merges / (inter * 1.0);\n    st_array[2] = rd_merges + rd_ios ? (double)rd_merges / (rd_merges + rd_ios) * 100 : 0.0;\n    st_array[3] = wr_merges + wr_ios ? (double)wr_merges / (wr_merges + wr_ios) * 100 : 0.0;\n    st_array[4] = rd_ios / (inter * 1.0);\n    st_array[5] = wr_ios / (inter * 1.0);\n    st_array[6] = rd_sectors / (inter * 1.0);\n    st_array[7] = wr_sectors / (inter * 1.0);\n    st_array[8] = n_ios ? (rd_sectors + wr_sectors) / (n_ios * 2) : 0.0;\n    st_array[9] = rd_ios ? rd_sectors / ((double)rd_ios * 2) : 0.0;\n    st_array[10] = wr_ios ? wr_sectors / ((double)wr_ios * 2) : 0.0;\n    st_array[11] = aveq / (inter * 1000);\n    st_array[12] = n_ios ? (rd_ticks + wr_ticks) / (double)n_ios : 0.0;\n    st_array[13] = rd_ios ? rd_ticks / (double)rd_ios : 0.0;\n    st_array[14] = wr_ios ? wr_ticks / (double)wr_ios : 0.0;\n    st_array[15] = n_ios ? ticks / n_ios : 0.0;\n    st_array[16] = ticks / (inter * 10.0); /* percentage! */\n    /*st_array分别代表tsar显示的每一个值*/\n\n注意:\n> 1. 扇区一般都是512字节,因此有的地方除以2了\n> 1. ws是指真正落到io设备上的写次数, wrqpms是指系统调用合并的写次数, 它们之间的大小关系没有可比性,因为不知道多少请求能够被合并,比如发起了100个read系统调用,每个读4K,假如这100个都是连续的读,由于硬盘通常允许最大的request为256KB,那么block层会把这100个读请求合并成2个request,一个256KB,另一个144KB,rrqpm/s为100,因为100个request都发生了合并,不管它最后合并成几个；r/s为2,因为最后的request数为2\n\n### partition\n#### 字段含义\n* bfree: 分区空闲的字节\n* bused: 分区使用中的字节\n* btotl: 分区总的大小\n* util:  分区使用率\n* ifree: 可用文件结点数\n* itotl: 文件结点总数\n* iutil: 文件结点使用率\n\n#### 采集方法\n首先通过/etc/mtab获取到分区信息,然后通过statfs访问该分区的信息,查询文件系统相关信息,包含:\n\n        struct statfs {\n        long f_type; /* 文件系统类型 */\n        long f_bsiz\n        e; /* 经过优化的传输块大小 */\n        long f_blocks; /* 文件系统数据块总数 */\n        long f_bfree; /* 可用块数 */\n        long f_bavail; /* 非超级用户可获取的块数 */\n        long f_files; /* 文件结点总数 */\n        long f_ffree; /* 可用文件结点数 */\n        fsid_t f_fsid; /* 文件系统标识 */\n        long f_namelen; /* 文件名的最大长度 */\n        };\n\n然后就可以计算出tsar需要的信息,分区的字节数＝块数＊块大小＝f_blocks * f_bsize\n\n### pcsw\n#### 字段含义\n* cswch: 进程切换次数\n* proc:   新建的进程数\n\n#### 采集方法\n计数器在/proc/stat:\n\n        ctxt 19873315174\n        processes 296444211\n\n分别代表进程切换次数,以及进程数\n\n### tcpx\n#### 字段含义\nrecvq sendq est twait fwait1 fwait2 lisq lising lisove cnest ndrop edrop rdrop pdrop kdrop\n\n分别代表\n\ntcprecvq tcpsendq tcpest tcptimewait tcpfinwait1 tcpfinwait2 tcplistenq tcplistenincq tcplistenover tcpnconnest tcpnconndrop tcpembdrop tcprexmitdrop tcppersistdrop tcpkadrop\n#### 采集方法\n计数器来自:/proc/net/netstat /proc/net/snmp\n\n里面用到的数据有:\n\n        TcpExt: SyncookiesSent SyncookiesRecv SyncookiesFailed EmbryonicRsts PruneCalled RcvPruned OfoPruned OutOfWindowIcmps LockDroppedIcmps ArpFilter TW TWRecycled TWKilled PAWSPassive PAWSActive PAWSEstab DelayedACKs DelayedACKLocked DelayedACKLost ListenOverflows ListenDrops TCPPrequeued TCPDirectCopyFromBacklog TCPDirectCopyFromPrequeue TCPPrequeueDropped TCPHPHits TCPHPHitsToUser TCPPureAcks TCPHPAcks TCPRenoRecovery TCPSackRecovery TCPSACKReneging TCPFACKReorder TCPSACKReorder TCPRenoReorder TCPTSReorder TCPFullUndo TCPPartialUndo TCPDSACKUndo TCPLossUndo TCPLoss TCPLostRetransmit TCPRenoFailures TCPSackFailures TCPLossFailures TCPFastRetrans TCPForwardRetrans TCPSlowStartRetrans TCPTimeouts TCPRenoRecoveryFail TCPSackRecoveryFail TCPSchedulerFailed TCPRcvCollapsed TCPDSACKOldSent TCPDSACKOfoSent TCPDSACKRecv TCPDSACKOfoRecv TCPAbortOnSyn TCPAbortOnData TCPAbortOnClose TCPAbortOnMemory TCPAbortOnTimeout TCPAbortOnLinger TCPAbortFailed TCPMemoryPressures\n        TcpExt: 0 0 0 80 539 0 0 0 0 0 3733709 51268 0 0 0 80 5583301 5966 104803 146887 146887 6500405 39465075 2562794034 0 689613557 2730596 540646233 234702206 0 44187 2066 94 240 0 114 293 1781 7221 60514 185158 2 2 3403 400 107505 5860 24813 174014 0 2966 7 168787 106151 40 32851 2 0 2180 9862 0 15999 0 0 0\n\n具体字段找到并且获取即可\n\n### percpu ncpu\n#### 字段含义\n字段含义等同cpu模块,只不过能够支持采集具体的每一个cpu的信息\n#### 采集方法\n等同于cpu模块\n\n### pernic\n#### 字段含义\n字段含义等同traffic模块,只不过能够支持采集具体的每一个网卡的信息\n#### 采集方法\n等同于traffic模块\n\n## 应用模块\n### proc\n#### 字段含义\n* user: 某个进程用户态cpu消耗\n* sys:  某个进程系统态cpu消耗\n* total:某个进程总的cpu消耗\n* mem:  某个进程的内存消耗百分比\n* RSS:  某个进程的虚拟内存消耗,这是驻留在物理内存的一部分.它没有交换到硬盘.它包括代码,数据和栈\n* read: 进程io读字节\n* write:进程的io写字节\n\n### #采集方法\n计数器文件\n> /proc/pid/stat:获取进程的cpu信息\n> /proc/pid/status:获取进程的mem信息\n> /proc/pid/io:获取进程的读写IO信息\n\n注意,需要将采集的进程名称配置在/etc/tsar/tsar.conf总的mod_proc on procname,这样就会找到procname的pid,并进行数据采集\n\n### nginx\n#### 字段含义\n* accept:总共接收的新连接数目\n* handle:总共处理的连接数目\n* reqs:总共产生请求数目\n* active:活跃的连接数,等于read+write+wait\n* read:读取请求数据的连接数目\n* write:向用户写响应数据的连接数目\n* wait:长连接等待的连接数目\n* qps:每秒处理的请求数\n* rt:平均响应时间ms\n* sslqps:每秒处理的SSL请求数\n* spdyps:每秒处理的spdy请求数\n* sslhst:平均ssl握手时间ms\n\n\n#### 采集方法\n通过nginx的采集模块配置,访问特定地址,具体参见:https://github.com/taobao/tsar-mod_nginx\n\n        location = /nginx_status {\n            stub_status on;\n        }\n\n请确保如下方式能得到数据：\ncurl 127.0.0.1:80/nginx_status  -H 'Host: status.taobao.com'\n请求到的数据是:\n\n        Active connections: 1\n        server accepts handled requests request_time\n         24 24 7 0\n        Reading: 0 Writing: 1 Waiting: 0\n        SSL: 0 SPDY: 0\n（注：对于上述返回数据中的server accepts handled requests request_time，当前是通过“ 24 24 7 0”数据行首的空格作为前导。现tsar在本模块中同时支持“Server accepts: 24 handled: 24 requests: 7 request_time 0”格式返回该数据行。今后将升级tengine改用此方式。）\n\n需要确保nginx配置该location,并且能够访问`curl http://localhost/nginx_status`得到上面的数据  \n如果nginx的端口不是80,则需要在配置文件中指定端口,配置文件是/etc/tsar/tsar.conf,修改mod_nginx on为mod_nginx on 8080 。\n\n不同端口的nginx数据以不同item的形式展现，在对各item进行合并的时候（-m），除rt以及sslhst依然为平均值之外，其他的所有值都为所有端口的值的总和\n\n类似的有nginx_code, nginx_domain模块,相应的配置是:\n\n        req_status_zone server \"$host\" 20M;\n        req_status server;\n        location /traffic_status {\n                req_status_show;\n        }\n\n通过访问`curl http://localhost/traffic_status`能够得到如下字段的数据\n`localhost,0,0,2,2,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0`\n\n请求到的数据每个字段的含义是:\n* kv 计算得到的req_status_zone指令定义变量的值,此时为domain字段\n* bytes_in_total 从客户端接收流量总和\n* bytes_out_total 发送到客户端流量总和\n* conn_total 处理过的连接总数\n* req_total 处理过的总请求数\n* 2xx 2xx请求的总数\n* 3xx 3xx请求的总数\n* 4xx 4xx请求的总数\n* 5xx 5xx请求的总数\n* other 其他请求的总数\n* rt_total rt的总数\n* upstream_req 需要访问upstream的请求总数\n* upstream_rt 访问upstream的总rt\n* upstream_tries upstram总访问次数\n* 200 200请求的总数\n* 206 206请求的总数\n* 302 302请求的总数\n* 304 304请求的总数\n* 403 403请求的总数\n* 404 404请求的总数\n* 416 416请求的总数\n* 499 499请求的总数\n* 500 500请求的总数\n* 502 502请求的总数\n* 503 503请求的总数\n* 504 504请求的总数\n* 508 508请求的总数\n* detail_other 非以上13种status code的请求总数\n\n如果domain数量太多,或者端口不是80,需要进行专门的配置,配置文件内容如下:\n\n        port=8080 #指定nginx的端口\n        top=10 #指定最多采集的域名个数，按照请求总个数排列\n        domain=a.com b.com #指定特定需要采集的域名列表,分隔符为空格,逗号,或者制表符\n\n在/etc/tsar/tsar.conf中指定配置文件的路径:mod_nginx_domain on /tmp/my.conf\n\n#### nginx_domain_traffic\nnginx配置是:\n\n        req_status_zone server \"$host\" 20M;\n        req_status server;\n\n        # req_status_zone_add_indecator 指令：可以在req status输出的每一行最后添加新的字段\n        # 这里添加的字段用于统计nginx的变量: $2xx_bytes_sent, $3xx_bytes_sent, $4xx_bytes_sent, $5xx_bytes_sent\n        # $2xx_bytes_sent: 请求返回2xx时候，发送给客户端的数据量(如果请求非2xx则该变量为0)\n        req_status_zone_add_indecator server $2xx_bytes_sent $3xx_bytes_sent $4xx_bytes_sent $5xx_bytes_sent;\n\n        location /traffic_status {\n                req_status_show;\n        }\n\n输出实例:\n\n       module004033.sqa.cm4 tsar $ tsar --nginx_domain_traffic -li1\n       Time              -----------------localhost:8080----------------- ----------------www.foo.com:8080----------------\n       Time               bytin  bytout  2XXout  3XXout  4XXout  5XXout    bytin  bytout  2XXout  3XXout  4XXout  5XXout\n       09/01/15-13:45:48   0.00    0.00    0.00    0.00    0.00    0.00   410.1K   16.6M   16.6M    0.00    0.00    0.00\n       09/01/15-13:45:49   0.00    0.00    0.00    0.00    0.00    0.00   407.8K   16.5M   16.5M    0.00    0.00    0.00\n       09/01/15-13:45:51 159.0K  287.4K    0.00    0.00    0.00  287.4K   258.6K   10.5M   10.5M    0.00    0.00    0.00\n       09/01/15-13:45:52 245.5K  443.5K    0.00    0.00    0.00  443.5K   224.2K    9.1M    9.1M    0.00    0.00    0.00\n\n字段含义:\n* bytin:   收到的请求字节数byte/s\n* bytout:  输出的应答字节数byte/s\n* 2XXout:  输出的2XX应答字节数byte/s\n* 3XXout:  输出的3XX应答字节数byte/s\n* 4XXout:  输出的4XX应答字节数byte/s\n* 5XXout:  输出的5XX应答字节数byte/s\n\n#### nginx_ups\n用于输出nginx upstream想关信息\nnginx配置是:\n\n        req_status_zone server \"$host\" 20M;\n        req_status server;\n        req_status_zone_add_indecator server $response_fbt_time $upstream_response_fbt_time $upstream_response_length;\n\n        location /traffic_status {\n                req_status_show;\n        }\n\n输出实例:\n\n         module004033.sqa.cm4 tsar $ tsar --nginx_ups -li1\n         Time              ----------------------------nginx_ups---------------------------\n         Time               traff     qps     4XX     5XX    rqps      rt     fbt    ufbt\n         09/01/15-16:26:29  15.8M    3.9K    3.9K    0.00    0.00    9.7K    9.7K    9.7K\n         09/01/15-16:26:30  15.8M    3.9K    3.9K    0.00    0.00    9.7K    9.7K    9.7K\n         09/01/15-16:26:31   4.9M    1.2K    1.2K    0.00    0.00    3.0K    3.0K    3.0K\n\n字段含义:\n* traff: 后端返回的应答body的流量(不包括http应答头部)\n* qps:   后端qps\n* rqps:  后端总qps(包含重试的qps + 后端qps)\n* 4XX:   后端返回4XX状态码的qps\n* 5XX:   后端返回5XX状态码的qps\n* rt:    后端应答时间\n* fbt:   tengine首字节时间\n* ufbt:  后端应答首字节时间\n\n### nginx_live\n#### 字段含义\n* online:当前总共在线数\n* olhstr:历史总共在线数\n* olvary:历史在线数增长量（待商榷，不显示）\n* upflow:上行总流量\n* uspeed:上行总速度\n* downfl:下行总流量\n* dspeed:下行总速度\n* fmtime:当前平均首播时间\n* fmdata:不显示\n* dropfr:丢帧\n\n\n#### 采集方法\n请确保如下方式能得到数据：\ncurl -x 127.0.0.1:7001 http://status.taobao.com/rtmp_reqstat\n请求到的数据是:\nrtmp://pagefault/alicdn/diaoliang123,fm_time:574 drop_frame:0 online:1 online_history:2 down_flow:166096189 up_flow:166096188 internal:0 edge:2\n\n### squid\n#### 字段含义\n* qps:   每秒请求数\n* rt:    访问平均相应时间\n* r_hit: 请求命中率\n* b_hit: 字节命中率\n* d_hit: 磁盘命中率\n* m_hit: 内存命中率\n* fdused: Number of file desc currently in use\n* fdque:  Files queued for open\n* objs:   StoreEntries\n* inmem:  StoreEntries with MemObjects\n* hot:    Hot Object Cache Items\n* size:   Mean Object Size\n\n####采集方法\n访问squid的mgrinfo信息获取,有些字段经过了一些patch,可能不适用外部版本\n\n###haproxy\n####字段含义\n* stat:   状态,1正常\n* uptime:启动持续时间\n* conns: 总的连接数\n* qps:   每秒请求数\n* hit:   haproxy开启cache时的命中率\n* rt:    平均响应时间ms\n\n#### 采集方法\nhaproxy经过了patch,能够在多进程模式下进行统计信息的汇总,然后通过haproxy的本地访问其状态页面admin分析得到\n\n### lvs\n#### 字段含义\n* stat:   lvs状态,1正常\n* conns: 总的连接数\n* pktin: 收到的包数\n* pktout:发出的包数\n* bytin: 收到的字节数\n* bytout:发出的字节数\n* total: lvs所有的 session 数量, 包含 local 和 sync\n* local: lvs本机转发的 session 数量\n* lact: local session 中处于 establish 状态的数量\n* linact: local session 中处于非 establish 状态的数量\n* sync: 其他lvs同步过来的 session 数量\n* sact: sync session 中处于 establish 状态的数量\n* sinact: sync session 中处于非 establish 状态的数量\n* templ: 会话保持(模板) session 的数量\n\n\n#### 采集方法\n内核版 lvs: 访问lvs的统计文件:/proc/net/ip_vs_stats, /proc/net/ip_vs_conn_stats\nnetframe lvs: 访问 lvs 的命令行工具: slb_admin -ln --total --dump, appctl -cas\n\n### apache\n参见:https://github.com/kongjian/tsar-apache\n### tcprt\n私有应用,略\n### swift\n私有应用,略\n### cgcpu/cgmem/cgblkio\n私有应用,略\n### trafficserver\n待补充\n### tmd\n私有应用,略\n\n### lua\n#### 采集方法\n在/etc/tsar/tsar.conf中：\n\n        mod_lua on {lua_file_name}\n\n启用lua模块，将从绝对路径调用{lua_file_name}这个lua脚本文件。\n\nmod_lua 依赖luajit-5.1。\n\n目前为仅有一个tsar模块支持lua，通过修改lua脚本文件来实现不同的数据采集。目前支持11个字段供lua操作\n具体实现样例见lua_modules/nginx_mem.lua，该脚本实现采集本机上所有nginx进程分配的内存总数。\n"
        },
        {
          "name": "luadevel",
          "type": "tree",
          "content": null
        },
        {
          "name": "lualib",
          "type": "tree",
          "content": null
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "rpm",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}