{
  "metadata": {
    "timestamp": 1736709836484,
    "page": 306,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "microsoft/ProcDump-for-Linux",
      "stars": 2972,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3408203125,
          "content": "# IDE folders & Files\n.vs/\n.vscode/\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n\n# Prerequisites\n*.d\n\n# Object files\n*.o\n*.ko\n*.obj\n*.elf\n\n# Linker output\n*.ilk\n*.map\n*.exp\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Libraries\n*.lib\n*.a\n*.la\n*.lo\n*.o\n\n# Project directories\nbin/\nrelease/\npkgbuild/\nobj/\nbuild/\n"
        },
        {
          "name": "BUILD.md",
          "type": "blob",
          "size": 2.1162109375,
          "content": "# Linux\n## Containerized Builds\nThe Dockerfiles in this repo (located under the `.devcontainer` directory) are the same Dockerfiles that are used on the backend build systems when a PR is built as part of the PR checks. This provides an easy and convenient way to ensure that any changes being made can be built using the same backend infrastructure.\n\nThere are three Dockerfiles available:\n\n- `Dockerfile_Ubuntu` (default)\n- `Dockerfile_Rocky`\n- `Dockerfile_AzureLinux`\n\nThere are two primary ways to build using containers:\n\n1. If you use VS Code the repo has support for VS Code Dev Containers. To use this functionality, you need to have the VS Code Dev Containers extension installed as well as Docker. Once installed open VS Code and the `ProcDump-for-Linux` folder and go to command palette and select \"Dev Containers: Rebuild and Reopen in Container\".\nOnce the container has finished building, you will be connected to the newly built container. You can also switch which Dockerfile you are using by setting the `dockerfile` field in the file `devcontainer.json`.\nFor more information about VS Code Dev Containers please see - https://code.visualstudio.com/docs/devcontainers/containers\n\n2. Use the Dockerfiles located under the `.devcontainer` directory and build/run docker locally.\n\nTo build inside the container:\n```sh\nmkdir build\ncd build\ncmake ..\nmake\n```\n## Local Builds\n### Prerequisites\n#### Ubuntu\n```\nsudo apt update\nsudo apt -y install gcc cmake make clang clang-12 gdb zlib1g-dev libelf-dev build-essential libbpf-dev linux-tools-common linux-tools-$(uname -r)\n```\n\n#### Rocky Linux\n```\nsudo yum install gcc make cmake clang gdb zlib-devel elfutils-libelf-devel libbpf-devel bpftool\n```\n\n### Build\n```sh\nmkdir build\ncd build\ncmake ..\nmake\n```\n\n## Building Packages\nThe distribution packages for Procdump for Linux are constructed utilizing `dpkg-deb` for Debian targets and `rpmbuild` for Fedora targets.\n\nCreate a deb package:\n```sh\nmake deb\n```\n\nCreate an rpm package:\n```sh\nmake rpm\n```\n\n# macOS\n### Prerequisites\nInstall the clang tool chain. \n\n### Build\n```sh\nmkdir build\ncd build\ncmake ..\nmake\n```\n\n## Building Packages\n```sh\nmake brew\n```\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 13.3232421875,
          "content": "#\n#\n#    ProcDump-for-Linux\n#\n#    Copyright (c) Microsoft Corporation\n#\n#    All rights reserved.\n#\n#    MIT License\n#\n#    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"\"Software\"\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n#\n#    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n#\n#    THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#\n#\n\n#################################################################################\n#\n# CMakeLists.txt\n#\n# Build script\n#\n#################################################################################\n\ncmake_minimum_required(VERSION 3.10)\ncmake_policy(SET CMP0048 NEW)\n\n#\n# set the project name - version is MAJOR.MINOR.PATCH.RELEASE - releases start at 1\n#\nif (DEFINED ENV{VERSION})\n  project(ProcDumpForLinux VERSION $ENV{VERSION})\nelse()\n  project(ProcDumpForLinux VERSION 0.0.0)\nendif()\n\nset(PROJECT_VERSION_TWEAK 0)\nfile(READ \"dist/changelog\" CHANGE_LOG)\n\n#\n# package name\n#\nset(PACKAGE_NAME \"procdump\")\n\n#\n# MAN page\n#\nset(PROCDUMP_COMPRESS_MAN \"procdump.1.gz\")\n\nadd_custom_target(procDumpManPageCompress ALL\n                  DEPENDS ${PROJECT_BINARY_DIR}/${PROCDUMP_COMPRESS_MAN}\n                  )\n\nif(${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\")\n  add_custom_command(OUTPUT ${PROJECT_BINARY_DIR}/${PROCDUMP_COMPRESS_MAN}\n                    COMMAND gzip -9n -f -c \"${CMAKE_SOURCE_DIR}/procdump.1\" > ${PROJECT_BINARY_DIR}/${PROCDUMP_COMPRESS_MAN}\n                    COMMENT \"Compressing ProcDump man page\"\n                    DEPENDS \"${CMAKE_SOURCE_DIR}/procdump.1\"\n                    )\nelse()\n  add_custom_command(OUTPUT ${PROJECT_BINARY_DIR}/${PROCDUMP_COMPRESS_MAN}\n                    COMMAND gzip -9n -f -c \"${CMAKE_SOURCE_DIR}/procdump_mac.1\" > ${PROJECT_BINARY_DIR}/${PROCDUMP_COMPRESS_MAN}\n                    COMMENT \"Compressing ProcDump man page\"\n                    DEPENDS \"${CMAKE_SOURCE_DIR}/procdump.1\"\n                    )\nendif()\n\n#\n# Change log\n#\nset(PROCDUMP_COMPRESS_CHANGELOG \"changelog.gz\")\n\nadd_custom_target(procDumpChangelogCompress ALL\n                  DEPENDS ${PROJECT_BINARY_DIR}/${PROCDUMP_COMPRESS_CHANGELOG}\n                  )\n\nadd_custom_command(OUTPUT ${PROJECT_BINARY_DIR}/${PROCDUMP_COMPRESS_CHANGELOG}\n                   COMMAND cp \"${CMAKE_SOURCE_DIR}/dist/changelog\" ${PROJECT_BINARY_DIR} && gzip -f -c \"${CMAKE_SOURCE_DIR}/dist/changelog\" > ${PROJECT_BINARY_DIR}/${PROCDUMP_COMPRESS_CHANGELOG}\n                   COMMENT \"Compressing changelog\"\n                   DEPENDS \"${CMAKE_SOURCE_DIR}/dist/changelog\"\n                  )\n\n#\n# Paths\n#\nset(profiler_INC ${CMAKE_SOURCE_DIR}/profiler/inc)\nset(profiler_SRC ${CMAKE_SOURCE_DIR}/profiler/src)\nset(procdump_INC ${CMAKE_SOURCE_DIR}/include)\nset(procdump_SRC ${CMAKE_SOURCE_DIR}/src)\nset(procdump_Test ${CMAKE_SOURCE_DIR}/tests/integration)\nset(LD \"/usr/bin/ld\")\nset(libbpf_SOURCE_DIR ${CMAKE_BINARY_DIR}/libbpf/src/libbpf)\nset(procdump_ebpf_SOURCE_DIR ${CMAKE_SOURCE_DIR}/ebpf)\nset(sym_SOURCE_DIR ${CMAKE_SOURCE_DIR}/sym)\n\n#\n# Configure files\n#\nconfigure_file(${procdump_INC}/ProcDumpVersion.h.in ${PROJECT_BINARY_DIR}/ProcDumpVersion.h)\nif(${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\")\n  configure_file(dist/DEBIAN.in/control.in DEBIANcontrol)\n  configure_file(dist/SPECS.in/spec.in SPECS.spec)\nendif()\n\n#\n# Compiler\n#\nset(CMAKE_CXX_COMPILER \"clang++\")\n\n#\n# Make procdump profiler\n#\nif(${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\")\n  message(STATUS \"Building for Linux\")\n  # Figure out which architecture we are building for\n  if(CMAKE_SYSTEM_PROCESSOR STREQUAL x86_64 OR CMAKE_SYSTEM_PROCESSOR STREQUAL amd64)\n    set(CLRHOSTDEF -DHOST_AMD64 -DHOST_64BIT)\n  elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL x86 OR CMAKE_SYSTEM_PROCESSOR STREQUAL i686)\n    set(CLRHOSTDEF -DHOST_X86)\n  elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL armv6 OR CMAKE_SYSTEM_PROCESSOR STREQUAL armv6l)\n    set(CLRHOSTDEF -DHOST_ARM -DHOST_ARMV6)\n  elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL arm OR CMAKE_SYSTEM_PROCESSOR STREQUAL armv7-a)\n    set(CLRHOSTDEF -DHOST_ARM)\n  elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL aarch64 OR CMAKE_SYSTEM_PROCESSOR STREQUAL arm64)\n    set(CLRHOSTDEF -DHOST_ARM64 -DHOST_64BIT)\n  elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL loongarch64)\n    set(CLRHOSTDEF -DHOST_LOONGARCH64 -DHOST_64BIT)\n  elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL riscv64)\n    set(CLRHOSTDEF -DHOST_RISCV64 -DHOST_64BIT)\n  elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL s390x)\n    set(CLRHOSTDEF -DHOST_S390X -DHOST_64BIT -DBIGENDIAN)\n  elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL mips64)\n    set(CLRHOSTDEF -DHOST_MIPS64 -DHOST_64BIT=1)\n  elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL ppc64le)\n    set(CLRHOSTDEF -DHOST_POWERPC64 -DHOST_64BIT)\n  else()\n    message(FATAL_ERROR \"'${CMAKE_SYSTEM_PROCESSOR}' is an unsupported architecture.\")\n  endif()\n\n  add_library(ProcDumpProfiler SHARED\n              ${profiler_SRC}/ClassFactory.cpp\n              ${profiler_SRC}/ProcDumpProfiler.cpp\n              ${profiler_SRC}/dllmain.cpp\n              ${profiler_SRC}/corprof_i.cpp\n              ${profiler_SRC}/easylogging++.cc\n              )\n\n  target_compile_options(ProcDumpProfiler PRIVATE -DELPP_NO_DEFAULT_LOG_FILE -DELPP_THREAD_SAFE -g -pthread -Wno-pragma-pack -Wno-pointer-arith -Wno-conversion-null -Wno-write-strings -Wno-format-security -fPIC -fms-extensions ${CLRHOSTDEF} -DPAL_STDCPP_COMPAT -DPLATFORM_UNIX -std=c++11)\n  set_target_properties(ProcDumpProfiler PROPERTIES PREFIX \"\")\n\n  target_include_directories(ProcDumpProfiler PUBLIC\n                            \"${profiler_INC}\"\n                            \"${procdump_INC}\"\n                            /usr/include\n                            )\n\n  add_custom_command(OUTPUT ProcDumpProfiler.o\n                    COMMAND \"${LD}\" -r -b binary -o \"${PROJECT_BINARY_DIR}/ProcDumpProfiler.o\" ProcDumpProfiler.so\n                    COMMENT \"Packing ProcDumpProfiler.so into ProcDumpProfiler.o\"\n                    DEPENDS ProcDumpProfiler\n                    )\nendif()\n\n#\n# Make ProcDump\n#\nif(APPLE)\n    # Create universal binary\n    set(CMAKE_OSX_ARCHITECTURES \"x86_64;arm64\")\nendif()\n\nif(${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\")\n  message(STATUS \"Building for Linux\")\n  add_executable(procdump\n                ${procdump_SRC}/CoreDumpWriter.cpp\n                ${procdump_SRC}/DotnetHelpers.cpp\n                ${procdump_SRC}/Events.cpp\n                ${procdump_SRC}/GenHelpers.cpp\n                ${procdump_SRC}/Handle.cpp\n                ${procdump_SRC}/Logging.cpp\n                ${procdump_SRC}/Monitor.cpp\n                ${procdump_SRC}/Procdump.cpp\n                ${procdump_SRC}/ProcDumpConfiguration.cpp\n                ${procdump_SRC}/Process.cpp\n                ${procdump_SRC}/ProfilerHelpers.cpp\n                ${procdump_SRC}/Restrack.cpp\n                ${sym_SOURCE_DIR}/bcc_proc.cpp\n                ${sym_SOURCE_DIR}/bcc_syms.cc\n                ${sym_SOURCE_DIR}/bcc_elf.cpp\n                ${sym_SOURCE_DIR}/bcc_perf_map.cpp\n                ${sym_SOURCE_DIR}/bcc_zip.cpp\n                ${PROJECT_BINARY_DIR}/ProcDumpProfiler.o\n                )\nelse()\n  add_executable(procdump\n                ${procdump_SRC}/CoreDumpWriter.cpp\n                #${procdump_SRC}/DotnetHelpers.cpp\n                ${procdump_SRC}/Events.cpp\n                ${procdump_SRC}/GenHelpers.cpp\n                ${procdump_SRC}/Handle.cpp\n                ${procdump_SRC}/Logging.cpp\n                ${procdump_SRC}/Monitor.cpp\n                ${procdump_SRC}/Procdump.cpp\n                ${procdump_SRC}/ProcDumpConfiguration.cpp\n                ${procdump_SRC}/Process.cpp\n                #${procdump_SRC}/ProfilerHelpers.cpp\n                #${procdump_SRC}/Restrack.cpp\n                #${sym_SOURCE_DIR}/bcc_proc.cpp\n                #${sym_SOURCE_DIR}/bcc_syms.cc\n                #${sym_SOURCE_DIR}/bcc_elf.cpp\n                #${sym_SOURCE_DIR}/bcc_perf_map.cpp\n                #${sym_SOURCE_DIR}/bcc_zip.cpp\n                #${PROJECT_BINARY_DIR}/ProcDumpProfiler.o\n                )\nendif()\n\ntarget_compile_options(procdump PRIVATE -g -pthread -fstack-protector-all -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2 -Werror -D_GNU_SOURCE -std=c++11 -O2)\n\ntarget_include_directories(procdump PUBLIC\n                           ${procdump_INC}\n                           ${PROJECT_BINARY_DIR}\n                           /usr/include\n                           ${sym_SOURCE_DIR}\n                           ${procdump_ebpf_SOURCE_DIR}\n                          )\nif(${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\")\n  add_dependencies(procdump libbpf procdump_ebpf)\n  target_link_libraries(procdump ${libbpf_SOURCE_DIR}/src/libbpf.a elf z pthread)\nelse()\n  target_link_libraries(procdump z pthread)\nendif()\n\n#\n# Copy integration test directory\n#\nadd_custom_target(copy_integration_test_dir ALL\n                  COMMAND ${CMAKE_COMMAND} -E copy_directory\n                  ${CMAKE_SOURCE_DIR}/tests/integration ${CMAKE_BINARY_DIR}/tests/integration\n                  COMMENT \"Copying the tests/integration directory to the build directory\"\n                 )\n\n#\n# Make test application\n#\nadd_executable(ProcDumpTestApplication\n               ${procdump_Test}/ProcDumpTestApplication.c\n              )\n\ntarget_compile_options(ProcDumpTestApplication PRIVATE -g -pthread -std=gnu99 -fstack-protector-all -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2 -D_GNU_SOURCE -Werror -O2)\n\ntarget_include_directories(ProcDumpTestApplication PUBLIC\n                           /usr/include\n                          )\n\ntarget_link_libraries(ProcDumpTestApplication pthread)\n\n#\n# Make package(s)\n#\nif(${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\")\n  add_custom_target(deb\n                  COMMAND \"${CMAKE_SOURCE_DIR}/makePackages.sh\" \"${CMAKE_SOURCE_DIR}\" \"${PROJECT_BINARY_DIR}\" \"${PACKAGE_NAME}\" \"${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}\" \"0\" \"deb\"\n                  DEPENDS \"${CMAKE_SOURCE_DIR}/dist\" \"${PROJECT_BINARY_DIR}/procdump\"\n                  )\n\n  add_custom_target(rpm\n                  COMMAND \"${CMAKE_SOURCE_DIR}/makePackages.sh\" \"${CMAKE_SOURCE_DIR}\" \"${PROJECT_BINARY_DIR}\" \"${PACKAGE_NAME}\" \"${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}\" \"0\" \"rpm\"\n                  DEPENDS \"${CMAKE_SOURCE_DIR}/dist\" \"${PROJECT_BINARY_DIR}/procdump\"\n                  )\nelse()\n  add_custom_target(brew\n                  COMMAND \"${CMAKE_SOURCE_DIR}/makePackages.sh\" \"${CMAKE_SOURCE_DIR}\" \"${PROJECT_BINARY_DIR}\" \"${PACKAGE_NAME}\" \"${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}\" \"0\" \"brew\"\n                  DEPENDS \"${CMAKE_SOURCE_DIR}/dist\" \"${PROJECT_BINARY_DIR}/procdump\"\n                  )\nendif()\n\n#\n# Make ProcDump eBPF program\n#\nif(${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\")\n  # Fetch libbpf\n  include(ExternalProject)\n\n  ExternalProject_Add(libbpf\n      GIT_REPOSITORY https://github.com/libbpf/libbpf.git\n      GIT_TAG v1.2.2\n      PREFIX ./libbpf\n      CONFIGURE_COMMAND \"\"\n      BUILD_COMMAND cd ../libbpf/src && bash -c \"CFLAGS=\\\"-g -O2 -Werror -Wall -fPIC\\\" make\"\n      INSTALL_COMMAND \"\"\n      )\n\n  # set binaries and options for clang and llc\n  set(CLANG \"clang\")\n  set(LLC \"llc\")\n  set(CLANG_OPTIONS -Wno-unused-value\n                    -Wno-pointer-sign\n                    -Wno-compare-distinct-pointer-types\n                    -Wno-gnu-variable-sized-type-not-at-end\n                    -Wno-address-of-packed-member\n                    -Wno-tautological-compare\n                    -Wno-unknown-warning-option\n                    -g\n                    )\n  set(CLANG_DEFINES -D __KERNEL__\n                    -D __BPF_TRACING__\n                    -D __TARGET_ARCH_x86\n                    -D __linux__\n                    )\n  if (DEBUG_K)\n      message(\"Using DEBUG_K Option...\")\n      list(APPEND CLANG_DEFINES -DDEBUG_K)\n  endif()\n\n  set(CLANG_INCLUDES\n                    -I \"/usr/include\"\n                    -I \"/usr/include/x86_64-linux-gnu\"\n                    -I \"${CMAKE_SOURCE_DIR}\"\n                    -I \"${CMAKE_BINARY_DIR}\"\n                    -I \"${libbpf_SOURCE_DIR}/src\"\n                    )\n\n  add_custom_target(procdump_ebpf\n                    DEPENDS procdump_ebpf.o\n                  )\n\n  add_dependencies(procdump_ebpf libbpf)\n\n  add_custom_command(OUTPUT procdump_ebpf.o\n                    COMMAND \"${CLANG}\" -nostdinc -isystem `gcc -print-file-name=include` ${CLANG_INCLUDES} ${CLANG_DEFINES} -O2 ${CLANG_OPTIONS} -target bpf -fno-stack-protector -c \"${procdump_ebpf_SOURCE_DIR}/procdump_ebpf.c\" -o \"procdump_ebpf.o\" && bpftool gen object procdump.ebpf.o procdump_ebpf.o && bpftool gen skeleton \"procdump.ebpf.o\" name \"procdump_ebpf\" > \"procdump_ebpf.skel.h\"\n                    COMMENT \"Building EBPF object procdump_ebpf.o\"\n                    DEPENDS ${procdump_ebpf_SOURCE_DIR}/procdump_ebpf.c\n                    )\n\n  set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES procdump.ebpf.o)\nendif()\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.3349609375,
          "content": "# Code of Conduct\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](opencode@microsoft.com) with any additional questions or comments."
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.4072265625,
          "content": "# Contributing\n\nBefore we can accept a pull request from you, you'll need to sign a [Contributor License Agreement (CLA)](https://cla.microsoft.com). It is an automated process and you only need to do it once.\nTo enable us to quickly review and accept your pull requests, always create one pull request per issue and link the issue in the pull request. Never merge multiple requests in one unless they have the same root cause. Be sure to follow our Coding Guidelines and keep code changes as small as possible. Avoid pure formatting changes to code that has not been modified otherwise. Pull requests should contain tests whenever possible.\n\n# Branching\nThe master branch contains current development.  While CI should ensure that master always builds, it is still considered pre-release code.  Release checkpoints will be put into stable branches for maintenance.\n\nTo contribute, fork the repository and create a branch in your fork for your work.  Please keep branch names short and descriptive.  Please direct PRs into the upstream master branch.\n\n## Build and run from source\nPlease refer to [Build instructions](BUILD.md) for details on how to build ProcDump for Linux.\n\n## Testing\n* There are a multitude of tests included in the `tests` directory of the repository.\n* Add new tests corresponding to your change, if applicable. Include tests when adding new features. When fixing bugs, start with adding a test that highlights how the current behavior is broken.\n* Make sure that the tests are all passing, including your new tests.\n\n## Creating integration tests\nThe integration tests run using the local procdump built from source. Individual test cases are written as bash scripts and need to be inside `/tests/integration/scenarios/` in order to be called automatically by `run.sh`.\n\nTest scripts will return `0` when they succeed and `1` when they fail.\n\nMost of the tests are written using [stress-ng](https://wiki.ubuntu.com/Kernel/References/stress-ng \"stress-ng manual\"), but you can write your own code to simulate the scenario you require.\n\nAfter writing a new test, run the `run.sh` script from $build/tests/integration and verify that no tests fail.\n\n## Pull Requests\n* Always tag a work item or issue with a pull request.\n* Limit pull requests to as few issues as possible, preferably 1 per PR\n\n## Coding Guidelines\n## Indentation\nWe welcome all whitespace characters, but prefer space expanded tabs.\n## Names\n* Do not use `typedef`, we like to know what is a struct and what is a type\n* Use PascalCase for:\n  * `struct` names\n  * `enum` names\n  * `function` names\n* Use camelCase for:\n  * `local variable` names\n* `enum` names should start with a captol `E`, e.g., `enum ECoreDumpType`\n* Global variables should be prefixed with `g_`, e.g., `struct ProcDumpConfiguration g_Config;`\n* `struct Handle`s that contain a `struct Event` should have variable names prefixed by `evt`, e.g., `struct Handle evtIsQuit;`\n* `struct Handle`s that contain a `sem_t` should have variable names prefixed by `sem`, e.g., `struct Handle semDumpSlot;`\n* Please use whole words when possible\n## Style\n* Curly brackets, `{ }`, should go on the next line after whatever necessitates them\n  * For structs, put on same line\n* Put a space before the open paren, `(`, with `for`, `while`, `if`, and `switch` statements\n  * No space after function names and before parameter lists\n* The `*` for a pointer goes next to the variable name, e.g., `char *variable`\n* Declare 1 variable at a time\n* Declare all local variables at the start of a function\n  * Either initialize upon declaration, or initialize before logic\n  * The exception is `for` loop iterators\n* Wrap header (`.h`) files with:\n```c\n#ifndef HEADER_FILE_NAME_H\n#define HEADER_FILE_NAME_H\n//...\n#endif // HEADER_FILE_NAME_H\n```\n\n## Trace and Error Handling\nFor system calls and other \"failable\" function calls, please make use of the `Trace` macro and the logging methods, like so:\n\n```c\nint rc = 0;\nif ((rc = FailableFunction(...)) != 0)\n{\n    Log(error, INTERNAL_ERROR);\n    Trace(\"WriteCoreDump: failed pthread_setcanceltype.\");\n    exit(-1);\n}\n```\n## Example of style\n\n```c\nstruct Baz {\n    int Foobar;\n}\n\nint main(int argc, char *argv[])\n{\n    int foo = 0;\n    int bar = 1;\n    char[64] str = \"This is a string\";\n    struct Baz baz = { 10 };\n\n    while (foo < 10)\n    {\n        foo++;\n    }\n\n    for (int i = 0; i < foo; i++)\n    {\n        printf(str);\n        baz.Foobar--;\n    }\n\n    printf(\"baz.Foobar is %d\", baz.Foobar);\n\n    return bar - 1;\n}\n```\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 3.6591796875,
          "content": "# Install ProcDump\n\n## Azure Linux 2.0\n```sh\nsudo yum install procdump\n```\n\n## Ubuntu 20.04, 22.04, 24.04\n#### 1. Register Microsoft key and feed\n```sh\nwget -q https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb -O packages-microsoft-prod.deb\nsudo dpkg -i packages-microsoft-prod.deb\n```\n\n#### 2. Install Procdump\n```sh\nsudo apt-get update\nsudo apt-get install procdump\n```\n\n## Debian 11\n#### 1. Register Microsoft key and feed\n```sh\nwget -q https://packages.microsoft.com/config/debian/11/packages-microsoft-prod.deb -O packages-microsoft-prod.deb\nsudo dpkg -i packages-microsoft-prod.deb\n```\n\n#### 2. Install Procdump\n```sh\nsudo apt-get update\nsudo apt-get install apt-transport-https\nsudo apt-get update\nsudo apt-get install procdump\n```\n\n## Debian 12\n#### 1. Register Microsoft key and feed\n```sh\nwget -q https://packages.microsoft.com/config/debian/12/packages-microsoft-prod.deb -O packages-microsoft-prod.deb\nsudo dpkg -i packages-microsoft-prod.deb\n```\n\n#### 2. Install Procdump\n```sh\nsudo apt-get update\nsudo apt-get install apt-transport-https\nsudo apt-get update\nsudo apt-get install procdump\n```\n\n## Fedora 38\n#### 1. Register Microsoft key and feed\n```sh\nsudo rpm -Uvh https://packages.microsoft.com/config/fedora/38/packages-microsoft-prod.rpm\n```\n\n#### 2. Install Procdump\n```sh\nsudo dnf install procdump\n```\n\n## Fedora 39\n#### 1. Register Microsoft key and feed\n```sh\nsudo rpm -Uvh https://packages.microsoft.com/config/fedora/39/packages-microsoft-prod.rpm\n```\n\n#### 2. Install Procdump\n```sh\nsudo dnf install procdump\n```\n\n## Fedora 40\n#### 1. Register Microsoft key and feed\n```sh\nsudo rpm -Uvh https://packages.microsoft.com/config/fedora/40/packages-microsoft-prod.rpm\n```\n\n#### 2. Install Procdump\n```sh\nsudo dnf install procdump\n```\n\n## RHEL 7\n#### 1. Register Microsoft key and feed\n```sh\nsudo rpm -Uvh https://packages.microsoft.com/config/rhel/7/packages-microsoft-prod.rpm\n```\n\n#### 2. Install Procdump\n```sh\nsudo yum install procdump\n```\n\n## RHEL 8\n#### 1. Register Microsoft key and feed\n```sh\nsudo rpm -Uvh https://packages.microsoft.com/config/rhel/8/packages-microsoft-prod.rpm\n```\n\n#### 2. Install Procdump\n```sh\nsudo yum install procdump\n```\n\n## RHEL 9\n#### 1. Register Microsoft key and feed\n```sh\nsudo rpm -Uvh https://packages.microsoft.com/config/rhel/9/packages-microsoft-prod.rpm\n```\n\n#### 2. Install Procdump\n```sh\nsudo yum install procdump\n```\n\n## CentOS 7\n#### 1. Register Microsoft key and feed\n```sh\nsudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm\n```\n\n#### 2. Install Procdump\n```sh\nsudo yum install procdump\n```\n\n## openSUSE 15\n#### 1. Register Microsoft key and feed\n```sh\nsudo zypper install libicu\nsudo rpm --import https://packages.microsoft.com/keys/microsoft.asc\nwget -q https://packages.microsoft.com/config/opensuse/15/prod.repo\nsudo mv prod.repo /etc/zypp/repos.d/microsoft-prod.repo\nsudo chown root:root /etc/zypp/repos.d/microsoft-prod.repo\n```\n\n#### 2. Install Procdump\n```sh\nsudo zypper install procdump\n```\n\n## SLES 12\n#### 1. Register Microsoft key and feed\n```sh\nsudo rpm -Uvh https://packages.microsoft.com/config/sles/12/packages-microsoft-prod.rpm\n```\n\n#### 2. Install Procdump\n```sh\nsudo zypper install procdump\n```\n\n## SLES 15\n#### 1. Register Microsoft key and feed\n```sh\nsudo rpm -Uvh https://packages.microsoft.com/config/sles/15/packages-microsoft-prod.rpm\n```\n\n#### 2. Install Procdump\n```sh\nsudo zypper install procdump\n```\n\n## macOS\nTo install ProcDump for Mac, you'll need to install [Homebrew](https://brew.sh) if you haven't already.\n\n1. Add the Sysinternals tap:\n   ```bash\n   brew tap Microsoft/sysinternalstap\n   ```\n   \n1. Install ProcDump:\n   ```bash\n   brew install procdump\n   ```\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.134765625,
          "content": "    MIT License\n\n    Copyright (c) Microsoft Corporation. All rights reserved.\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE\n"
        },
        {
          "name": "NOTICE.txt",
          "type": "blob",
          "size": 13.998046875,
          "content": "Valid-License-Identifier: BSD-2-Clause\nSPDX-URL: https://spdx.org/licenses/BSD-2-Clause.html\nUsage-Guide:\n  To use the BSD 2-clause \"Simplified\" License put the following SPDX\n  tag/value pair into a comment according to the placement guidelines in\n  the licensing rules documentation:\n    SPDX-License-Identifier: BSD-2-Clause\nLicense-Text:\n\nCopyright (c) 2015 The Libbpf Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice,\n   this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n\n\n--------------------------------------------------------------------------------\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n--------------------------------------------------------------------------------\n\n    MIT License\n\n    Copyright (c) Microsoft Corporation. All rights reserved.\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.0146484375,
          "content": "# ProcDump [![Build Status](https://dev.azure.com/sysinternals/Tools/_apis/build/status/Sysinternals.ProcDump-for-Linux?branchName=master)](https://dev.azure.com/sysinternals/Tools/_build/latest?definitionId=341&branchName=master)\nProcDump is a Linux and Mac reimagining of the classic ProcDump tool from the Sysinternals suite of tools for Windows.  ProcDump provides a convenient way for Linux and Mac developers to create core dumps of their application based on performance triggers. ProcDump for Linux and Mac is part of [Sysinternals](https://sysinternals.com).\n\n![ProcDump in use](procdump.gif \"Procdump in use\")\n\n# Installation & Usage\n\n## Requirements\n* Minimum Linux OS:\n  * Red Hat Enterprise Linux / CentOS 7\n  * Fedora 29\n  * Ubuntu 16.04 LTS\n  * `gdb` >= 7.6.1\n* Minimum Mac OS: Sierra\n \n## Install ProcDump\nPlease see installation instructions [here](INSTALL.md).\n\n## Build\nPlease see build instructions [here](BUILD.md).\n\n## Usage\n**BREAKING CHANGE** With the release of ProcDump 1.3 the switches are now aligned with the Windows ProcDump version.\nPlease note that the [Mac](https://github.com/microsoft/ProcDump-for-Mac) version currently has a limited set of triggers.\n```\nCapture Usage:\n   procdump [-n Count]\n            [-s Seconds]\n            [-c|-cl CPU_Usage]\n            [-m|-ml Commit_Usage1[,Commit_Usage2...]]\n            [-gcm [<GCGeneration>: | LOH: | POH:]Memory_Usage1[,Memory_Usage2...]]\n            [-gcgen Generation]\n            [-restrack [nodump]]\n            [-sr Sample_Rate]\n            [-tc Thread_Threshold]\n            [-fc FileDescriptor_Threshold]\n            [-sig Signal_Number1[,Signal_Number2...]]\n            [-e]\n            [-f Include_Filter,...]\n            [-fx Exclude_Filter]\n            [-mc Custom_Dump_Mask]\n            [-pf Polling_Frequency]\n            [-o]\n            [-log syslog|stdout]\n            {\n             {{[-w] Process_Name | [-pgid] PID} [Dump_File | Dump_Folder]}\n            }\n\nOptions:\n   -n      Number of dumps to write before exiting.\n   -s      Consecutive seconds before dump is written (default is 10).\n   -c      CPU threshold above which to create a dump of the process.\n   -cl     CPU threshold below which to create a dump of the process.\n   -m      Memory commit threshold(s) (MB) above which to create dumps.\n   -ml     Memory commit threshold(s) (MB) below which to create dumps.\n   -gcm    [.NET] GC memory threshold(s) (MB) above which to create dumps for the specified generation or heap (default is total .NET memory usage).\n   -gcgen  [.NET] Create dump when the garbage collection of the specified generation starts and finishes.\n   -restrack Enable memory leak tracking (malloc family of APIs). Use the nodump option to prevent dump generation and only produce restrack report(s).\n   -sr     Sample rate when using -restrack.\n   -tc     Thread count threshold above which to create a dump of the process.\n   -fc     File descriptor count threshold above which to create a dump of the process.\n   -sig    Comma separated list of signal number(s) during which any signal results in a dump of the process.\n   -e      [.NET] Create dump when the process encounters an exception.\n   -f      Filter (include) on the content of .NET exceptions (comma separated). Wildcards (*) are supported.\n   -fx     Filter (exclude) on the content of -restrack call stacks. Wildcards (*) are supported.\n   -mc     Custom core dump mask (in hex) indicating what memory should be included in the core dump. Please see 'man core' (/proc/[pid]/coredump_filter) for available options.\n   -pf     Polling frequency.\n   -o      Overwrite existing dump file.\n   -log    Writes extended ProcDump tracing to the specified output stream (syslog or stdout).\n   -w      Wait for the specified process to launch if it's not running.\n   -pgid   Process ID specified refers to a process group ID.\n```\n### Resource Tracking\nThe -restrack switch activates resource tracking, allowing for the monitoring and reporting of any resource allocations that have not been freed at the time of generating the core dump. The results are saved to a file with a '.restrack' extension. Currently, the following resource allocation/deallocation functions are tracked:\n\nAllocation:\n* malloc\n* calloc\n* realloc\n* reallocarray\n* mmap\n\nDeallocation:\n* free\n* munmap\n\nThe Mac version does not currently implement resource tracking.\n\n### Examples\n> The following examples all target a process with pid == 1234\n\nThe following will create a core dump immediately.\n```\nsudo procdump 1234\n```\nThe following will create 3 core dumps 10 seconds apart.\n```\nsudo procdump -n 3 1234\n```\nThe following will create 3 core dumps 5 seconds apart.\n```\nsudo procdump -n 3 -s 5 1234\n```\nThe following will create a core dump each time the process has CPU usage >= 65%, up to 3 times, with at least 10 seconds between each dump.\n```\nsudo procdump -c 65 -n 3 1234\n```\nThe following will create a core dump each time the process has CPU usage >= 65%, up to 3 times, with at least 5 seconds between each dump.\n```\nsudo procdump -c 65 -n 3 -s 5 1234\n```\nThe following will create a core dump when CPU usage is outside the range [10,65].\n```\nsudo procdump -cl 10 -c 65 1234\n```\nThe following will create a core dump when CPU usage is >= 65% or memory usage is >= 100 MB.\n```\nsudo procdump -c 65 -m 100 1234\n```\nThe following will create a core dump when memory usage is >= 100 MB followed by another dump when memory usage is >= 200MB.\n```\nsudo procdump -m 100,200 1234\n```\nThe following will create a core dump and a memory leak report when memory usage is >= 100 MB\n```\nsudo procdump -m 100 -restrack 1234\n```\nThe following will create a memory leak report (no dumps) when memory usage is >= 100 MB\n```\nsudo procdump -m 100 -restrack nodump 1234\n```\nThe following will create a core dump and a memory leak report when memory usage is >= 100 MB by sampling every 10th memory allocation.\n```\nsudo procdump -m 100 -restrack -sr 10 1234\n```\nThe following will create a core dump and a memory leak report when memory usage is >= 100 MB and exclude any call stacks that contain frames with the string \"cache\" in them\n```\nsudo procdump -m 100 -restrack -fx *cache* 1234\n```\nThe following will create a core dump when the total .NET memory usage is >= 100 MB followed by another dump when memory usage is >= 200MB.\n```\nsudo procdump -gcm 100,200 1234\n```\nThe following will create a core dump when .NET memory usage for generation 1 is >= 1 MB followed by another dump when memory usage is >= 2MB.\n```\nsudo procdump -gcm 1:1,2 1234\n```\nThe following will create a core dump when .NET Large Object Heap memory usage is >= 100 MB followed by another dump when memory usage is >= 200MB.\n```\nsudo procdump -gcm LOH:100,200 1234\n```\nThe following will create a core dump at the start and end of a .NET generation 1 garbage collection.\n```\nsudo procdump -gcgen 1\n```\nThe following will create a core dump in the `/tmp` directory immediately.\n```\nsudo procdump 1234 /tmp\n```\nThe following will create a core dump in the current directory with the name dump_0.1234. If -n is used, the files will be named dump_0.1234, dump_1.1234 and so on.\n```\nsudo procdump 1234 dump\n```\nThe following will create a core dump when a SIGSEGV occurs.\n```\nsudo procdump -sig 11 1234\n```\nThe following will create a core dump when a SIGSEGV occures where the core dump contains only anonymous private mappings.\n```\nsudo procdump -mc 1 -sig 11 1234\n```\nThe following will create a core dump when the target .NET application throws a System.InvalidOperationException\n```\nsudo procdump -e -f System.InvalidOperationException 1234\n```\nThe include filter supports partial and wildcard matching, so the following will create a core dump too for a System.InvalidOperationException\n```\nsudo procdump -e -f InvalidOperation 1234\n```\nor\n```\nsudo procdump -e -f \"*Invali*Operation*\" 1234\n```\n> All options can also be used with `-w`, to wait for any process with the given name.\n\nThe following waits for a process named `my_application` and creates a core dump immediately when it is found.\n```\nsudo procdump -w my_application\n```\n\n## Current Limitations\n* Currently will only run on Linux Kernels version 3.5+ or macOS Sierra+. \n* Does not have full feature parity with Windows version of ProcDump, specifically, stay alive functionality, and custom performance counters\n\n# Feedback\n* Ask a question on StackOverflow (tag with ProcDumpForLinux)\n* Request a new feature on GitHub\n* Vote for popular feature requests\n* File a bug in GitHub Issues\n\n# Contributing\nIf you are interested in fixing issues and contributing directly to the code base, please see the [document How to Contribute](CONTRIBUTING.md), which covers the following:\n* How to build and run from source\n* The development workflow, including debugging and running tests\n* Coding Guidelines\n* Submitting pull requests\n\nPlease see also our [Code of Conduct](CODE_OF_CONDUCT.md).\n\n\n# License\nCopyright (c) Microsoft Corporation. All rights reserved.\n\nLicensed under the MIT License.\n\nProcDump for Linux:\n\n* Clones, compiles and statically links against libbpf (https://github.com/libbpf/libbpf)\n* Copies symbol resolution source code from BCC (https://github.com/iovisor/bcc).\n* Uses eBPF\n"
        },
        {
          "name": "azure-pipelines.yml",
          "type": "blob",
          "size": 2.173828125,
          "content": "# Azure build pipelines for Procdump-for-Linux\ntrigger:\n  branches:\n    include:\n      - release/*\n    exclude:\n      - dev/*\n      - test/*\n\npr:\n  - master\n\nstages:\n - stage: \"Build\"\n   jobs:\n    - job: \"ProcDump_Build_Run_Unit_Tests\"\n      pool:\n        vmImage: \"ubuntu-20.04\"\n      steps:\n      - script: |\n          clang --version\n          clang++ --version\n          gcc --version\n        displayName: 'List compiler versions'\n\n      - script: |\n          apt install rsyslog\n          rm -f /run/rsyslogd.pid\n          service rsyslog start || true\n        displayName: 'Enable syslog'\n\n      - script: |\n          chmod +x .devcontainer/install-ubuntu-dependencies.sh\n          .devcontainer/install-ubuntu-dependencies.sh\n        displayName: \"Install pre-reqs for Ubuntu\"\n\n      - script: |\n          clang --version\n          clang++ --version\n          gcc --version\n        displayName: 'List compiler versions'\n\n      - template: templates/build.yaml\n\n      - script: |\n          cd procdump_build/tests/integration\n          sudo ./run.sh\n        displayName: 'Run unit tests'\n\n      - script: |\n          mkdir $(Build.ArtifactStagingDirectory)/logs\n          cp /var/log/syslog $(Build.ArtifactStagingDirectory)/logs\n          cp /var/tmp/procdumpprofiler.log $(Build.ArtifactStagingDirectory)/logs\n        displayName: 'Copy log artifacts to staging'\n        condition: always()\n\n      - task: PublishBuildArtifacts@1\n        condition: always()\n        inputs:\n          PathtoPublish: '$(Build.ArtifactStagingDirectory)/logs/syslog'\n          ArtifactName: 'syslog'\n          publishLocation: 'Container'\n\n      - task: PublishBuildArtifacts@1\n        condition: always()\n        inputs:\n          PathtoPublish: '$(Build.ArtifactStagingDirectory)/logs/procdumpprofiler.log'\n          ArtifactName: 'procdumpprofiler.log'\n          publishLocation: 'Container'\n\n    - job: \"ProcDump_Build_Mac_Run_Unit_Tests\"\n      pool:\n        vmImage: \"macOS-latest\"\n      steps:\n\n      - script: |\n          sw_vers\n        displayName: 'Diagnostics'\n\n      - template: templates/build.yaml\n\n      - script: |\n          cd procdump_build/tests/integration\n          sudo ./run.sh\n        displayName: 'Run unit tests'"
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "ebpf",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "makePackages.sh",
          "type": "blob",
          "size": 4.2490234375,
          "content": "#!/bin/sh\n#\n#    ProcDump for Linux\n#\n#    Copyright (c) Microsoft Corporation\n#\n#    All rights reserved.\n#\n#    MIT License\n#\n#    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"\"Software\"\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n#\n#    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n#\n#    THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#\n\n#################################################################################\n#\n# makePackages.sh\n#\n# Builds the directory trees for DEB and RPM packages and, if suitable tools are\n# available, builds the actual packages too.\n#\n#################################################################################\n\nif [ \"$5\" = \"\" ]; then\n    echo \"Usage: $0 <SourceDir> <BinaryDir> <package name> <package version> <package release> <PackageType>\"\n    exit 1\nfi\n\n# copy cmake vars\nCMAKE_SOURCE_DIR=$1\nPROJECT_BINARY_DIR=$2\nPACKAGE_NAME=$3\nPACKAGE_VER=$4\nPACKAGE_REL=$5\nPACKAGE_TYPE=$6\n\nDEB_PACKAGE_NAME=\"${PACKAGE_NAME}_${PACKAGE_VER}_amd64\"\nRPM_PACKAGE_NAME=\"${PACKAGE_NAME}-${PACKAGE_VER}-${PACKAGE_REL}\"\nBREW_PACKAGE_NAME=\"${PACKAGE_NAME}-mac-${PACKAGE_VER}\"\n\nif [ \"$PACKAGE_TYPE\" = \"deb\" ]; then\n    DPKGDEB=`which dpkg-deb`\n\n    if [ -d \"${PROJECT_BINARY_DIR}/deb\" ]; then\n        rm -rf \"${PROJECT_BINARY_DIR}/deb\"\n    fi\n\n    # copy deb files\n    mkdir -p \"${PROJECT_BINARY_DIR}/deb/${DEB_PACKAGE_NAME}\"\n    #cp -a \"${CMAKE_SOURCE_DIR}/dist/DEBIAN\" \"${PROJECT_BINARY_DIR}/deb/${DEB_PACKAGE_NAME}/\"\n    mkdir -p \"${PROJECT_BINARY_DIR}/deb/${DEB_PACKAGE_NAME}/DEBIAN\"\n    cp \"${PROJECT_BINARY_DIR}/DEBIANcontrol\" \"${PROJECT_BINARY_DIR}/deb/${DEB_PACKAGE_NAME}/DEBIAN/control\"\n    mkdir -p \"${PROJECT_BINARY_DIR}/deb/${DEB_PACKAGE_NAME}/usr/share/doc/procdump\"\n    cp \"${PROJECT_BINARY_DIR}/changelog.gz\" \"${PROJECT_BINARY_DIR}/deb/${DEB_PACKAGE_NAME}/usr/share/doc/procdump\"\n    mkdir -p \"${PROJECT_BINARY_DIR}/deb/${DEB_PACKAGE_NAME}/usr/share/man/man1\"\n    cp -a \"${PROJECT_BINARY_DIR}/procdump.1.gz\" \"${PROJECT_BINARY_DIR}/deb/${DEB_PACKAGE_NAME}/usr/share/man/man1\"\n    mkdir -p \"${PROJECT_BINARY_DIR}/deb/${DEB_PACKAGE_NAME}/usr/bin\"\n    cp \"${PROJECT_BINARY_DIR}/procdump\" \"${PROJECT_BINARY_DIR}/deb/${DEB_PACKAGE_NAME}/usr/bin/\"\n\n    # make the deb\n    if [ \"$DPKGDEB\" != \"\" ]; then\n        cd \"${PROJECT_BINARY_DIR}/deb\"\n        \"$DPKGDEB\" -Zxz --build --root-owner-group \"${DEB_PACKAGE_NAME}\"\n        RET=$?\n    else\n        echo \"No dpkg-deb found\"\n        RET=1\n    fi\n\n    exit 0\nfi\n\nif [ \"$PACKAGE_TYPE\" = \"rpm\" ]; then\n    RPMBUILD=`which rpmbuild`\n\n    if [ -d \"${PROJECT_BINARY_DIR}/rpm\" ]; then\n        rm -rf \"${PROJECT_BINARY_DIR}/rpm\"\n    fi\n\n    # copy rpm files\n    mkdir -p \"${PROJECT_BINARY_DIR}/rpm/${RPM_PACKAGE_NAME}/SPECS\"\n    cp -a \"${PROJECT_BINARY_DIR}/SPECS.spec\" \"${PROJECT_BINARY_DIR}/rpm/${RPM_PACKAGE_NAME}/SPECS/${RPM_PACKAGE_NAME}.spec\"\n    mkdir \"${PROJECT_BINARY_DIR}/rpm/${RPM_PACKAGE_NAME}/BUILD/\"\n    cp \"${PROJECT_BINARY_DIR}/procdump.1.gz\" \"${PROJECT_BINARY_DIR}/changelog\" \"${PROJECT_BINARY_DIR}/procdump\" \"${PROJECT_BINARY_DIR}/rpm/${RPM_PACKAGE_NAME}/BUILD/\"\n\n    # make the rpm\n    if [ \"$RPMBUILD\" != \"\" ]; then\n        cd \"${PROJECT_BINARY_DIR}/rpm/${RPM_PACKAGE_NAME}\"\n        \"$RPMBUILD\" --define \"_topdir `pwd`\" -v -bb \"SPECS/${RPM_PACKAGE_NAME}.spec\"\n        RET=$?\n        cp RPMS/x86_64/*.rpm ..\n    else\n        echo \"No rpmbuild found\"\n        RET=1\n    fi\nfi\n\nif [ \"$PACKAGE_TYPE\" = \"brew\" ]; then\n\n    # create brew package\n    zip $PROJECT_BINARY_DIR/${BREW_PACKAGE_NAME}.zip procdump procdump.1.gz\nfi\nexit $RET"
        },
        {
          "name": "procdump.1",
          "type": "blob",
          "size": 2.87109375,
          "content": ".\\\" Manpage for procdump.\n.TH man 8 \"2/5/2024\" \"3.3\" \"procdump manpage\"\n.SH NAME\nprocdump \\- generate coredumps based off performance triggers.\n.SH SYNOPSIS\nprocdump [-n Count]\n         [-s Seconds]\n         [-c|-cl CPU_Usage]\n         [-m|-ml Commit_Usage1[,Commit_Usage2...]]\n         [-gcm [<GCGeneration>: | LOH: | POH:]Memory_Usage1[,Memory_Usage2...]]\n         [-gcgen Generation]\n         [-restrack [nodump]]\n         [-sr Sample_Rate]\n         [-tc Thread_Threshold]\n         [-fc FileDescriptor_Threshold]\n         [-sig Signal_Number1[,Signal_Number2...]]\n         [-e]\n         [-f Include_Filter,...]\n         [-fx Exclude_Filter]\n         [-mc Custom_Dump_Mask]\n         [-pf Polling_Frequency]\n         [-o]\n         [-log syslog|stdout]\n         {\n           {{[-w] Process_Name | [-pgid] PID} [Dump_File | Dump_Folder]}\n         }\n\nOptions:\n   -n      Number of dumps to write before exiting.\n   -s      Consecutive seconds before dump is written (default is 10).\n   -c      CPU threshold above which to create a dump of the process.\n   -cl     CPU threshold below which to create a dump of the process.\n   -m      Memory commit threshold(s) (MB) above which to create dumps.\n   -ml     Memory commit threshold(s) (MB) below which to create dumps.\n   -gcm    [.NET] GC memory threshold(s) (MB) above which to create dumps for the specified generation or heap (default is total .NET memory usage).\n   -gcgen  [.NET] Create dump when the garbage collection of the specified generation starts and finishes.\n   -restrack Enable memory leak tracking (malloc family of APIs). Use the nodump option to prevent dump generation and only produce restrack report(s).\n   -sr     Sample rate when using -restrack.\n   -tc     Thread count threshold above which to create a dump of the process.\n   -fc     File descriptor count threshold above which to create a dump of the process.\n   -sig    Comma separated list of signal number(s) during which any signal results in a dump of the process.\n   -e      [.NET] Create dump when the process encounters an exception.\n   -f      Filter (include) on the content of .NET exceptions (comma separated). Wildcards (*) are supported.\n   -fx     Filter (exclude) on the content of -restrack call stacks. Wildcards (*) are supported.\n   -mc     Custom core dump mask (in hex) indicating what memory should be included in the core dump. Please see 'man core' (/proc/[pid]/coredump_filter) for available options.\n   -pf     Polling frequency.\n   -o      Overwrite existing dump file.\n   -log    Writes extended ProcDump tracing to the specified output stream (syslog or stdout).\n   -w      Wait for the specified process to launch if it's not running.\n   -pgid   Process ID specified refers to a process group ID.\n\n.SH DESCRIPTION\nProcDump provides a convenient way for Linux and Mac developers to create core dumps of their application based on performance triggers. ProcDump is part of Sysinternals."
        },
        {
          "name": "procdump.gif",
          "type": "blob",
          "size": 6659.931640625,
          "content": ""
        },
        {
          "name": "procdump_mac.1",
          "type": "blob",
          "size": 1.482421875,
          "content": ".\\\" Manpage for procdump.\n.TH man 8 \"2/5/2024\" \"1.0\" \"procdump manpage\"\n.SH NAME\nprocdump \\- generate coredumps based off performance triggers.\n.SH SYNOPSIS\nprocdump [-n Count]\n         [-s Seconds]\n         [-c|-cl CPU_Usage]\n         [-m|-ml Commit_Usage1[,Commit_Usage2...]]\n         [-tc Thread_Threshold]\n         [-fc FileDescriptor_Threshold]\n         [-pf Polling_Frequency]\n         [-o]\n         [-log syslog|stdout]\n         {\n           {{[-w] Process_Name} [Dump_File | Dump_Folder]}\n         }\n\nOptions:\n   -n      Number of dumps to write before exiting.\n   -s      Consecutive seconds before dump is written (default is 10).\n   -c      CPU threshold above which to create a dump of the process.\n   -cl     CPU threshold below which to create a dump of the process.\n   -m      Memory commit threshold(s) (MB) above which to create dumps.\n   -ml     Memory commit threshold(s) (MB) below which to create dumps.\n   -tc     Thread count threshold above which to create a dump of the process.\n   -fc     File descriptor count threshold above which to create a dump of the process.\n   -pf     Polling frequency.\n   -o      Overwrite existing dump file.\n   -log    Writes extended ProcDump tracing to the specified output stream (syslog or stdout).\n   -w      Wait for the specified process to launch if it's not running.\n\n.SH DESCRIPTION\nProcDump provides a convenient way for Linux and Mac developers to create core dumps of their application based on performance triggers. ProcDump is part of Sysinternals."
        },
        {
          "name": "profiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "sudo",
          "type": "blob",
          "size": 0.0595703125,
          "content": "APT::Get::Assume-Yes \"true\"; /etc/apt/apt.conf.d/90assumeyes\n"
        },
        {
          "name": "sym",
          "type": "tree",
          "content": null
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}