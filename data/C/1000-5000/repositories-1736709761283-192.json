{
  "metadata": {
    "timestamp": 1736709761283,
    "page": 192,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "answer-huang/dSYMTools",
      "stars": 3458,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".DS_Store",
          "type": "blob",
          "size": 6.00390625,
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0400390625,
          "content": ".idea/\nbuild/\ndist/\ntest*.py\n*.pyc\n*.psd\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.052734375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2024 answer-huang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "Objective-C",
          "type": "tree",
          "content": null
        },
        {
          "name": "Pic",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.095703125,
          "content": "#  优化代码，快速根据友盟反馈定位崩溃信息\n### 操作方法：将下图中友盟检测崩溃日志中红框内的地址填入，即可快速定位奔溃信息\n![image](https://github.com/liunianhuaguoyanxi/dSYMTools/blob/master/Pic/crashLog1.png)\n![image](https://github.com/liunianhuaguoyanxi/dSYMTools/blob/master/Pic/crashLog2.png)\n\n# Star History\n[![Star History Chart](https://api.star-history.com/svg?repos=answer-huang/dSYMTools&type=Date)](https://star-history.com/#answer-huang/dSYMTools&Date)\n\n# 更新：\n### Version 1.0.5       2016-11-28\n1.支持拖入 dSYM 文件。\n### Version 1.0.4       2016-11-08\n1.使用 Objective-C 重写应用。\n2.建议都使用此版本。\n### Version 1.0.3       2015-05-16\n1.解决文件路径中不能包含空格的 bug。\n\n### Version 1.0.2       2015-05-05\n1.由于在 arm64 上 Slide address 变化，现需要提供 Slide address，不然得不到异常地址。\n\n### Version 1.0.1       2014-07-29\n\n1.增加对 dSYM 文件的支持，直接将 xcarchive 或 dSYM 文件拖入窗口中即可。\n\n\n2.修复 dSYM 根据和版本管理软件冲突的 bug。\n\n\n### Version 1.0.0       2014-06-26\n\n\n1.软件基本功能完成（仅支持 xcarchive 文件）。\n\n\n# 项目简介\n\n来到新公司后，前段时间就一直在忙，前不久  [项目](https://itunes.apple.com/cn/app/kang-da-yu-zhen-nu-ren-bao/id707364888?l=en&mt=8) 终于成功发布上线了，最近就在给项目做优化，并排除一些线上软件的 bug，因为项目中使用了友盟统计，所以在友盟给出的错误信息统计中能比较方便的找出客户端异常的信息，可是很多像数组越界却只给出了 `*** -[__NSArrayM objectAtIndex:]: index 50 beyond bounds [0 .. 39]'` 这类错误信息，如下图所示：\n\n![errorInfo](http://answerhuang.bj.bcebos.com/blog/errorInfo.png)\n\n遇到这种问题如果通过 `objectAtIndex` 去检索错误的地方那将会是一个巨大的工作量。\n\n# dSYM 文件\n\n### 什么是 dSYM 文件\nXcode编译项目后，我们会看到一个同名的 dSYM 文件，dSYM 是保存 16 进制函数地址映射信息的中转文件，我们调试的 symbols 都会包含在这个文件中，并且每次编译项目的时候都会生成一个新的 dSYM 文件，位于 `/Users/<用户名>/Library/Developer/Xcode/Archives` 目录下，对于每一个发布版本我们都很有必要保存对应的 Archives 文件 ( [AUTOMATICALLY SAVE THE DSYM FILES](http://www.cimgf.com/2009/12/23/automatically-save-the-dsym-files/) 这篇文章介绍了通过脚本每次编译后都自动保存 dSYM 文件)。\n\n\n### dSYM 文件有什么作用\n当我们软件 release 模式打包或上线后，不会像我们在 Xcode 中那样直观的看到用崩溃的错误，这个时候我们就需要分析 crash report 文件了，iOS 设备中会有日志文件保存我们每个应用出错的函数内存地址，通过 Xcode 的 Organizer 可以将 iOS 设备中的 DeviceLog 导出成 crash 文件，这个时候我们就可以通过出错的函数地址去查询 dSYM 文件中程序对应的函数名和文件名。大前提是我们需要有软件版本对应的 dSYM 文件，这也是为什么我们很有必要保存每个发布版本的 Archives 文件了。\n\n### 如何将文件一一对应\n每一个 xx.app 和 xx.app.dSYM 文件都有对应的 UUID，crash 文件也有自己的 UUID，只要这三个文件的 UUID 一致，我们就可以通过他们解析出正确的错误函数信息了。\n\n    1.查看 xx.app 文件的 UUID，terminal 中输入命令 ：\n\n    dwarfdump --uuid xx.app/xx (xx代表你的项目名)\n\n    2.查看 xx.app.dSYM 文件的 UUID ，在 terminal 中输入命令：\n    dwarfdump --uuid xx.app.dSYM \n\n    3.crash 文件内 Binary Images: 下面一行中 <> 内的 e86bcc8875b230279c962186b80b466d  就是该 crash 文件的 UUID，而第一个地址 0x1000ac000 便是 slide address:\n    Binary Images:\n    0x1000ac000 - 0x100c13fff Example arm64  <e86bcc8875b230279c962186b80b466d> /var/containers/Bundle/Application/99EE6ECE-4CEA-4ADD-AE8D-C4B498886D22/Example.app/Example\n\n\n# dSYM工具\n于是我抽了几个小时的时间将这些命令封装到一个应用中，也为以后解决bug提供了便利。\n\n使用步骤:\n\n1.将打包发布软件时的xcarchive文件拖入软件窗口内的任意位置(支持多个文件同时拖入，注意：`文件名不要包含空格`)\n\n2.选中任意一个版本的xcarchive文件，右边会列出该xcarchive文件支持的CPU类型，选中错误对应的CPU类型。\n\n3.对比错误给出的UUID和工具界面中给出的UUID是否一致。\n\n4.将错误地址以及 Slide Address 输入工具的文本框中，点击分析。\n\n![dSYMToos](http://answerhuang.bj.bcebos.com/blog/dsymTool.png)\n\n\n[项目源码地址](https://github.com/answer-huang/dSYMTools)\n\n\n[1]: https://itunes.apple.com/cn/app/kang-da-yu-zhen-nu-ren-bao/id707364888?l=en&mt=8\n[2]: http://answerhuang.bj.bcebos.com/blog/errorInfo.png\n[3]: http://answerhuang.bj.bcebos.com/blog/dsymTool.png\n[4]: http://answerhuang.bj.bcebos.com/blog/crashUUID.png\n[5]: http://www.cimgf.com/2009/12/23/automatically-save-the-dsym-files/\n[6]: https://github.com/answer-huang/dSYMTools\n\n\n"
        },
        {
          "name": "Swift",
          "type": "tree",
          "content": null
        },
        {
          "name": "wxPython",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}