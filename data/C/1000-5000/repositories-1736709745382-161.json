{
  "metadata": {
    "timestamp": 1736709745382,
    "page": 161,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "janet-lang/janet",
      "stars": 3659,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".builds",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.169921875,
          "content": "*.janet linguist-language=Janet\n*.janet text eol=lf\n*.c text eol=lf\n*.h text eol=lf\n*.md text eol=lf\n*.yml text eol=lf\n*.build text eol=lf\n*.txt text eol=lf\n*.sh text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.482421875,
          "content": "# Target\ndst\n!*/**/dst\njanet\n!*/**/janet\n/build\n/builddir\n/Build\n/Release\n/Debug\n/Emscripten\n/src/include/generated/*.h\njanet-*.tar.gz\ndist\n\n# jpm lockfile\nlockfile.janet\n\n# Kakoune (fzf via fd)\n.fdignore\n\n# VSCode\n.vscode\n\n# Eclipse\n.project\n.cproject\n\n# Gnome Builder\n.buildconfig\n\n# Local directory for testing\nlocal\n\n# Common test files I use.\ntemp.janet\ntemp.c\ntemp*janet\ntemp*.c\nscratch.janet\nscratch.c\n\n# Emscripten\n*.bc\njanet.js\njanet.wasm\n\n# Generated files\n*.gen.h\n*.gen.c\n*.tmp\ntemp.*\n\n# Generate test files\n*.out\n.orig\n\n# Tools\nxxd\nxxd.exe\n\n# VSCode\n.vs\n.clangd\n.cache\n\n# Swap files\n*.swp\n\n# Tags\ntags\n\n# Valgrind files\nvgcore.*\n*.out.*\n\n# WiX artifacts\n*.msi\n*.wixpdb\n\n# Makefile config\n/config.mk\n\n# Created by https://www.gitignore.io/api/c\n\n### C ###\n# Prerequisites\n*.d\n\n# Object files\n*.o\n*.ko\n*.obj\n*.elf\n\n# Linker output\n*.ilk\n*.map\n*.exp\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Libraries\n*.lib\n*.a\n*.la\n*.lo\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n*.i*86\n*.x86_64\n*.hex\n\n# Debug files\n*.dSYM/\n*.su\n*.idb\n*.pdb\n\n# GGov\n*.gcov\n\n# Kernel Module Compile Results\n*.mod*\n*.cmd\nmodules.order\nModule.symvers\nMkfile.old\ndkms.conf\n\n# Coverage files\n*.cov\n\n# End of https://www.gitignore.io/api/c\n\n# Created by https://www.gitignore.io/api/cmake\n\n### CMake ###\nCMakeCache.txt\nCMakeFiles\nCMakeScripts\nTesting\ncmake_install.cmake\ninstall_manifest.txt\ncompile_commands.json\nCTestTestfile.cmake\n\n# End of https://www.gitignore.io/api/cmake\n\n# Astyle\n*.orig\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 46.69140625,
          "content": "# Changelog\nAll notable changes to this project will be documented in this file.\n\n## ??? - Unreleased\n- Add `struct/rawget`\n- Fix `deep=` and `deep-not=` to better handle degenerate cases with mutable table keys\n- Long strings will now dedent on `\\r\\n` instead of just `\\n`.\n- Add `ev/to-file` for synchronous resource operations\n\n## 1.37.1 - 2024-12-05\n- Fix meson cross compilation\n- Update timeout documentation for networking APIs: timeouts raise errors and do not return nil.\n- Add `janet_addtimeout_nil(double sec);` to the C API.\n- Change string hashing.\n- Fix string equality bug.\n- Add `assertf`\n- Change how JANET_PROFILE is loaded to allow more easily customizing the environment.\n- Add `*repl-prompt*` dynamic binding to allow customizing the built in repl.\n- Add multiple path support in the `JANET_PATH` environment variables. This lets\n  user more easily import modules from many directories.\n- Add `nth` and `only-tags` PEG specials to select from sub-captures while\n  dropping the rest.\n\n## 1.36.0 - 2024-09-07\n- Improve error messages in `bundle/add*` functions.\n- Add CI testing and verify tests pass on the s390x architecture.\n- Save `:source-form` in environment entries when `*debug*` is set.\n- Add experimental `filewatch/` module for listening to file system changes on Linux and Windows.\n- Add `bundle/who-is` to query which bundle a file on disk was installed by.\n- Add `geomean` function\n- Add `:R` and `:W` flags to `os/pipe` to create blocking pipes on Posix and Windows systems.\n  These streams cannot be directly read to and written from, but can be passed to subprocesses.\n- Add `array/join`\n- Add `tuple/join`\n- Add `bundle/add-bin` to make installing scripts easier. This also establishes a packaging convention for it.\n- Fix marshalling weak tables and weak arrays.\n- Fix bug in `ev/` module that could accidentally close sockets on accident.\n- Expose C functions for constructing weak tables in janet.h\n- Let range take non-integer values.\n\n## 1.35.2 - 2024-06-16\n- Fix some documentation typos.\n- Allow using `:only` in import without quoting.\n\n## 1.35.0 - 2024-06-15\n- Add `:only` argument to `import` to allow for easier control over imported bindings.\n- Add extra optional `env` argument to `eval` and `eval-string`.\n- Allow naming function literals with a keyword. This allows better stacktraces for macros without\n  accidentally adding new bindings.\n- Add `bundle/` module for managing packages within Janet. This should replace the jpm packaging\n  format eventually and is much simpler and amenable to more complicated builds.\n- Add macros `ev/with-lock`, `ev/with-rlock`, and `ev/with-wlock` for using mutexes and rwlocks.\n- Add `with-env`\n- Add *module-make-env* dynamic binding\n- Add buffer/format-at\n- Add long form command line options for readable CLI usage\n- Fix bug with `net/accept-loop` that would sometimes miss connections.\n\n## 1.34.0 - 2024-03-22\n- Add a new (split) PEG special by @ianthehenry\n- Add buffer/push-* sized int and float by @pnelson\n- Documentation improvements: @amano-kenji, @llmII, @MaxGyver83, @pepe, @sogaiu.\n- Expose _exit to skip certain cleanup with os/exit.\n- Swap set / body order for each by @sogaiu.\n- Abort on assert failure instead of exit.\n- Fix: os/proc-wait by @llmII.\n- Fix macex1 to keep syntax location for all tuples.\n- Restore if-let tail calls.\n- Don't try and resume fibers that can't be resumed.\n- Register stream on unmarshal.\n- Fix asm roundtrip issue.\n\n## 1.33.0 - 2024-01-07\n- Add more + and * keywords to default-peg-grammar by @sogaiu.\n- Use libc strlen in janet_buffer_push_cstring by @williewillus.\n- Be a bit safer with reference counting.\n- Add support for atomic loads in Janet's atomic abstraction.\n- Fix poll event loop CPU usage issue.\n- Add ipv6, shared, and cryptorand options to meson.\n- Add more ipv6 feature detection.\n- Fix loop for forever loop.\n- Cleaned up unused NetStateConnect, fixed janet_async_end() ev refcount by @zevv.\n- Fix warnings w/ MSVC and format.\n- Fix marshal_one_env w/ JANET_MARSHAL_UNSAFE.\n- Fix `(default)`.\n- Fix cannot marshal fiber with c stackframe, in a dynamic way that is fairly conservative.\n- Fix typo for SIGALARM in os/proc-kill.\n- Prevent bytecode optimization from remove mk* instructions.\n- Fix arity typo in peg.c by @pepe.\n- Update Makefile for MinGW.\n- Fix canceling waiting fiber.\n- Add a new (sub) PEG special by @ianthehenry.\n- Fix if net/server's handler has incorrect arity.\n- Fix macex raising on ().\n\n## 1.32.1 - 2023-10-15\n- Fix return value from C function `janet_dobytes` when called on Janet functions that yield to event loop.\n- Change C API for event loop interaction - get rid of JanetListener and instead use `janet_async_start` and `janet_async_end`.\n- Rework event loop to make fewer system calls on kqueue and epoll.\n- Expose atomic refcount abstraction in janet.h\n- Add `array/weak` for weak references in arrays\n- Add support for weak tables via `table/weak`, `table/weak-keys`, and `table/weak-values`.\n- Fix compiler bug with using the result of `(break x)` expression in some contexts.\n- Rework internal event loop code to be better behaved on Windows\n- Update meson build to work better on windows\n\n## 1.31.0 - 2023-09-17\n- Report line and column when using `janet_dobytes`\n- Add `:unless` loop modifier\n- Allow calling `reverse` on generators.\n- Improve performance of a number of core functions including `partition`, `mean`, `keys`, `values`, `pairs`, `interleave`.\n- Add `lengthable?`\n- Add `os/sigaction`\n- Change `every?` and `any?` to behave like the functional versions of the `and` and `or` macros.\n- Fix bug with garbage collecting threaded abstract types.\n- Add `:signal` to the `sandbox` function to allow intercepting signals.\n\n## 1.30.0 - 2023-08-05\n- Change indexing of `array/remove` to start from -1 at the end instead of -2.\n- Add new string escape sequences `\\\\a`, `\\\\b`, `\\\\?`, and `\\\\'`.\n- Fix bug with marshalling channels\n- Add `div` for floored division\n- Make `div` and `mod` variadic\n- Support `bnot` for integer types.\n- Define `(mod x 0)` as `x`\n- Add `ffi/pointer-cfunction` to convert pointers to cfunctions\n\n## 1.29.1 - 2023-06-19\n- Add support for passing booleans to PEGs for \"always\" and \"never\" matching.\n- Allow dictionary types for `take` and `drop`\n- Fix bug with closing channels while other fibers were waiting on them - `ev/take`, `ev/give`, and `ev/select`  will now return the correct (documented) value when another fiber closes the channel.\n- Add `ffi/calling-conventions` to show all available calling conventions for FFI.\n- Add `net/setsockopt`\n- Add `signal` argument to `os/proc-kill` to send signals besides `SIGKILL` on Posix.\n- Add `source` argument to `os/clock` to get different time sources.\n- Various combinator functions now are variadic like `map`\n- Add `file/lines` to iterate over lines in a file lazily.\n- Reorganize test suite to be sorted by module rather than pseudo-randomly.\n- Add `*task-id*`\n- Add `env` argument to `fiber/new`.\n- Add `JANET_NO_AMALG` flag to Makefile to properly incremental builds\n- Optimize bytecode compiler to generate fewer instructions and improve loops.\n- Fix bug with `ev/gather` and hung fibers.\n- Add `os/isatty`\n- Add `has-key?` and `has-value?`\n- Make imperative arithmetic macros variadic\n- `ev/connect` now yields to the event loop instead of blocking while waiting for an ACK.\n\n## 1.28.0 - 2023-05-13\n- Various bug fixes\n- Make nested short-fn's behave a bit more predictably (it is still not recommended to nest short-fns).\n- Add `os/strftime` for date formatting.\n- Fix `ev/select` on threaded channels sometimes live-locking.\n- Support the `NO_COLOR` environment variable to turn off VT100 color codes in repl (and in scripts).\n  See http://no-color.org/\n- Disallow using `(splice x)` in contexts where it doesn't make sense rather than silently coercing to `x`.\n  Instead, raise a compiler error.\n- Change the names of `:user8` and `:user9` signals to `:interrupt` and `:await`\n- Change the names of `:user8` and `:user9` fiber statuses to `:interrupted` and `:suspended`.\n- Add `ev/all-tasks` to see all currently suspended fibers.\n- Add `keep-syntax` and `keep-syntax!` functions to make writing macros easier.\n\n## 1.27.0 - 2023-03-05\n- Change semantics around bracket tuples to no longer be equal to regular tuples.\n- Add `index` argument to `ffi/write` for symmetry with `ffi/read`.\n- Add `buffer/push-at`\n- Add `ffi/pointer-buffer` to convert pointers to buffers the cannot be reallocated. This\n  allows easier manipulation of FFI memory, memory mapped files, and buffer memory shared between threads.\n- Calling `ev/cancel` on a fiber waiting on `ev/gather` will correctly\n  cancel the child fibers.\n- Add `(sandbox ...)` function to core for permission based security. Also add `janet_sandbox` to C API.\n  The sandbox allows limiting access to the file system, network, ffi, and OS resources at runtime.\n- Add `(.locals)` function to debugger to see currently bound local symbols.\n- Track symbol -> slot mapping so debugger can get symbolic information. This exposes local bindings\n  in `debug/stack` and `disasm`.\n- Add `os/compiler` to detect what host compiler was used to compile the interpreter\n- Add support for mingw and cygwin builds (mingw support also added in jpm).\n\n## 1.26.0 - 2023-01-07\n- Add `ffi/malloc` and `ffi/free`. Useful as tools of last resort.\n- Add `ffi/jitfn` to allow calling function pointers generated at runtime from machine code.\n  Bring your own assembler, though.\n- Channels can now be marshalled. Pending state is not saved, only items in the channel.\n- Use the new `.length` function pointer on abstract types for lengths. Adding\n  a `length` method will still work as well.\n- Support byte views on abstract types with the `.bytes` function pointer.\n- Add the `u` format specifier to printf family functions.\n- Allow printing 64 integer types in `printf` and `string/format` family functions.\n- Allow importing modules from custom directories more easily with the `@` prefix\n  to module paths. For example, if there is a dynamic binding :custom-modules that\n  is a file system path to a directory of modules, import from that directory with\n  `(import @custom-modules/mymod)`.\n- Fix error message bug in FFI library.\n\n## 1.25.1 - 2022-10-29\n- Add `memcmp` function to core library.\n- Fix bug in `os/open` with `:rw` permissions not correct on Linux.\n- Support config.mk for more easily configuring the Makefile.\n\n## 1.25.0 - 2022-10-10\n- Windows FFI fixes.\n- Fix PEG `if-not` combinator with captures in the condition\n- Fix bug with `os/date` with nil first argument\n- Fix bug with `net/accept` on Linux that could leak file descriptors to subprocesses\n- Reduce number of hash collisions from pointer hashing\n- Add optional parameter to `marshal` to skip cycle checking code\n\n## 1.24.1 - 2022-08-24\n- Fix FFI bug on Linux/Posix\n- Improve parse error messages for bad delimiters.\n- Add optional `name` parameter to the `short-fn` macro.\n\n## 1.24.0 - 2022-08-14\n- Add FFI support to 64-bit windows compiled with MSVC\n- Don't process shared object names passed to dlopen.\n- Add better support for windows console in the default shell.c for auto-completion and\n  other shell-like input features.\n- Improve default error message from `assert`.\n- Add the `tabseq` macro for simpler table comprehensions.\n- Allow setting `(dyn :task-id)` in fibers to improve context in supervisor messages. Prior to\n  this change, supervisor messages over threaded channels would be from ambiguous threads/fibers.\n\n## 1.23.0 - 2022-06-20\n- Add experimental `ffi/` module for interfacing with dynamic libraries and raw function pointers. Only available\n  on 64 bit linux, mac, and bsd systems.\n- Allow using `&named` in function prototypes for named arguments. This is a more ergonomic\n  variant of `&keys` that isn't as redundant, more self documenting, and allows extension to\n  things like default arguments.\n- Add `delay` macro for lazy evaluate-and-save thunks.\n- Remove pthread.h from janet.h for easier includes.\n- Add `debugger` - an easy to use debugger function that just takes a fiber.\n- `dofile` will now start a debugger on errors if the environment it is passed has `:debug` set.\n- Add `debugger-on-status` function, which can be passed to `run-context` to start a debugger on\n  abnormal fiber signals.\n- Allow running scripts with the `-d` flag to use the built-in debugger on errors and breakpoints.\n- Add mutexes (locks) and reader-writer locks to ev module for thread coordination.\n- Add `parse-all` as a generalization of the `parse` function.\n- Add `os/cpu-count` to get the number of available processors on a machine\n\n## 1.22.0 - 2022-05-09\n- Prohibit negative size argument to `table/new`.\n- Add `module/value`.\n- Remove `file/popen`. Use `os/spawn` with the `:pipe` options instead.\n- Fix bug in peg `thru` and `to` combinators.\n- Fix printing issue in `doc` macro.\n- Numerous updates to function docstrings\n- Add `defdyn` aliases for various dynamic bindings used in core.\n- Install `janet.h` symlink to make Janet native libraries and applications\n  easier to build without `jpm`.\n\n## 1.21.2 - 2022-04-01\n- C functions `janet_dobytes` and `janet_dostring` will now enter the event loop if it is enabled.\n- Fix hashing regression - hash of negative 0 must be the same as positive 0 since they are equal.\n- The `flycheck` function no longer pollutes the module/cache\n- Fix quasiquote bug in compiler\n- Disallow use of `cancel` and `resume` on fibers scheduled or created with `ev/go`, as well as the root\n  fiber.\n\n## 1.20.0 - 2022-1-27\n- Add `:missing-symbol` hook to `compile` that will act as a catch-all macro for undefined symbols.\n- Add `:redef` dynamic binding that will allow users to redefine top-level bindings with late binding. This\n  is intended for development use.\n- Fix a bug with reading from a stream returned by `os/open` on Windows and Linux.\n- Add `:ppc64` as a detectable OS type.\n- Add `& more` support for destructuring in the match macro.\n- Add `& more` support for destructuring in all binding forms (`def`).\n\n## 1.19.2 - 2021-12-06\n- Fix bug with missing status lines in some stack traces.\n- Update hash function to have better statistical properties.\n\n## 1.19.1 - 2021-12-04\n- Add an optional `prefix` parameter to `debug/stacktrace` to allow printing prettier error messages.\n- Remove appveyor for CI pipeline\n- Fixed a bug that prevented sending threaded abstracts over threaded channels.\n- Fix bug in the `map` function with arity at least 3.\n\n## 1.19.0 - 2021-11-27\n- Add `math/log-gamma` to replace `math/gamma`, and change `math/gamma` to be the expected gamma function.\n- Fix leaking file-descriptors in os/spawn and os/execute.\n- Ctrl-C will now raise SIGINT.\n- Allow quoted literals in the `match` macro to behave as expected in patterns.\n- Fix windows net related bug for TCP servers.\n- Allow evaluating ev streams with dofile.\n- Fix `ev` related bug with operations on already closed file descriptors.\n- Add struct and table agnostic `getproto` function.\n- Add a number of functions related to structs.\n- Add prototypes to structs. Structs can now inherit from other structs, just like tables.\n- Create a struct with a prototype with `struct/with-proto`.\n- Deadlocked channels will no longer exit early - instead they will hang, which is more intuitive.\n\n## 1.18.1 - 2021-10-16\n- Fix some documentation typos\n- Fix - Set pipes passed to subprocess to blocking mode.\n- Fix `-r` switch in repl.\n\n## 1.18.0 - 2021-10-10\n- Allow `ev/cancel` to work on already scheduled fibers.\n- Fix bugs with ev/ module.\n- Add optional `base` argument to scan-number\n- Add `-i` flag to janet binary to make it easier to run image files from the command line\n- Remove `thread/` module.\n- Add `(number ...)` pattern to peg for more efficient number parsing using Janet's\n  scan-number function without immediate string creation.\n\n## 1.17.2 - 2021-09-18\n- Remove include of windows.h from janet.h. This caused issues on certain projects.\n- Fix formatting in doc-format to better handle special characters in signatures.\n- Fix some marshalling bugs.\n- Add optional Makefile target to install jpm as well.\n- Supervisor channels in threads will no longer include a wasteful copy of the fiber in every\n  message across a thread.\n- Allow passing a closure to `ev/thread` as well as a whole fiber.\n- Allow passing a closure directly to `ev/go` to spawn fibers on the event loop.\n\n## 1.17.1 - 2021-08-29\n- Fix docstring typos\n- Add `make install-jpm-git` to make jpm co-install simpler if using the Makefile.\n- Fix bugs with starting ev/threads and fiber marshaling.\n\n## 1.17.0 - 2021-08-21\n- Add the `-E` flag for one-liners with the `short-fn` syntax for argument passing.\n- Add support for threaded abstract types. Threaded abstract types can easily be shared between threads.\n- Deprecate the `thread` library. Use threaded channels and ev instead.\n- Channels can now be marshalled.\n- Add the ability to close channels with `ev/chan-close` (or `:close`).\n- Add threaded channels with `ev/thread-chan`.\n- Add `JANET_FN` and `JANET_REG` macros to more easily define C functions that export their source mapping information.\n- Add `janet_interpreter_interrupt` and `janet_loop1_interrupt` to interrupt the interpreter while running.\n- Add `table/clear`\n- Add build option to disable the threading library without disabling all threads.\n- Remove JPM from the main Janet distribution. Instead, JPM must be installed\n  separately like any other package.\n- Fix issue with `ev/go` when called with an initial value and supervisor.\n- Add the C API functions `janet_vm_save` and `janet_vm_load` to allow\nsaving and restoring the entire VM state.\n\n## 1.16.1 - 2021-06-09\n- Add `maclintf` - a utility for adding linting messages when inside macros.\n- Print source code of offending line on compiler warnings and errors.\n- Fix some issues with linting and re-add missing `make docs`.\n- Allow controlling linting with dynamic bindings `:lint-warn`, `:lint-error`, and `:lint-levels`.\n- Add `-w` and `-x` command line flags to the `janet` binary to set linting thresholds.\n  linting thresholds are as follows:\n    - :none - will never be trigger.\n    - :relaxed - will only trigger on `:relaxed` lints.\n    - :normal - will trigger on `:relaxed` and `:normal` lints.\n    - :strict - will trigger on `:strict`, `:normal`, and `:relaxed` lints. This will catch the most issues\n      but can be distracting.\n\n## 1.16.0 - 2021-05-30\n- Add color documentation to the `doc` macro - enable/disable with `(dyn :doc-color)`.\n- Remove simpler HTML docs from distribution - use website or built-in documentation instead.\n- Add compiler warnings and deprecation levels.\n- Add `as-macro` to make using macros within quasiquote easier to do hygienically.\n- Expose `JANET_OUT_OF_MEMORY` as part of the Janet API.\n- Add `native-deps` option to `declare-native` in `jpm`. This lets native libraries link to other\n  native libraries when building with jpm.\n- Remove the `tarray` module. The functionality of typed arrays will be moved to an external module\n  that can be installed via `jpm`.\n- Add `from-pairs` to core.\n- Add `JPM_OS_WHICH` environment variable to jpm to allow changing auto-detection behavior.\n- The flychecker will consider any top-level calls of functions that start with `define-` to\n  be safe to execute and execute them. This allows certain patterns (like spork/path) to be\n  better processed by the flychecker.\n\n## 1.15.5 - 2021-04-25\n- Add `declare-headers` to jpm.\n- Fix error using unix pipes on BSDs.\n- Support .cc and .cxx extensions in `jpm` for C++ code.\n- Change networking code to not create as many HUP errors.\n- Add `net/shutdown` to close sockets in one direction without hang ups.\n- Update code for printing the debug repl\n\n## 1.15.4 - 2021-03-16\n- Increase default nesting depth of pretty printing to `JANET_RECURSION_GUARD`\n- Update meson.build\n- Add option to automatically add shebang line in installed scripts with `jpm`.\n- Add `partition-by` and `group-by` to the core.\n- Sort keys in pretty printing output.\n\n## 1.15.3 - 2021-02-28\n- Fix a fiber bug that occurred in deeply nested fibers\n- Add `unref` combinator to pegs.\n- Small docstring changes.\n\n## 1.15.2 - 2021-02-15\n- Fix bug in windows version of `os/spawn` and `os/execute` with setting environment variables.\n- Fix documentation typos.\n- Fix peg integer reading combinators when used with capture tags.\n\n## 1.15.0 - 2021-02-08\n- Fix `gtim` and `ltim` bytecode instructions on non-integer values.\n- Clean up output of flychecking to be the same as the repl.\n- Change behavior of `debug/stacktrace` with a nil error value.\n- Add optional argument to `parser/produce`.\n- Add `no-core` option to creating standalone binaries to make execution faster.\n- Fix bug where a buffer overflow could be confused with an out of memory error.\n- Change error output to `file:line:column: message`. Column is in bytes - tabs\n  are considered to have width 1 (instead of 8).\n\n## 1.14.2 - 2021-01-23\n- Allow `JANET_PROFILE` env variable to load a profile before loading the repl.\n- Update `tracev` macro to allow `def` and `var` inside to work as expected.\n- Use `(dyn :peg-grammar)` for passing a default grammar to `peg/compile` instead of loading\n  `default-peg-grammar` directly from the root environment.\n- Add `ev/thread` for combining threading with the event loop.\n- Add `ev/do-thread` to make `ev/thread` easier to use.\n- Automatically set supervisor channel in `net/accept-loop` and `net/server` correctly.\n\n## 1.14.1 - 2021-01-18\n- Add `doc-of` for reverse documentation lookup.\n- Add `ev/give-supervsior` to send a message to the supervising channel.\n- Add `ev/gather` and `chan` argument to `ev/go`. This new argument allows \"supervisor channels\"\n  for fibers to enable structured concurrency.\n- Make `-k` flag work on stdin if no files are given.\n- Add `flycheck` function to core.\n- Make `backmatch` and `backref` more expressive in pegs.\n- Fix buggy `string/split`.\n- Add `fiber/last-value` to get the value that was last yielded, errored, or signaled\n  by a fiber.\n- Remove `:generate` verb from `loop` macros. Instead, use the `:in` verb\n  which will now work on fibers as well as other data structures.\n- Define `next`, `get`, and `in` for fibers. This lets\n  `each`, `map`, and similar iteration macros can now iterate over fibers.\n- Remove macro `eachy`, which can be replaced by `each`.\n- Add `dflt` argument to find-index.\n- Deprecate `file/popen` in favor of `os/spawn`.\n- Add `:all` keyword to `ev/read` and `net/read` to make them more like `file/read`. However, we\n  do not provide any `:line` option as that requires buffering.\n- Change repl behavior to make Ctrl-C raise SIGINT on posix. The old behavior for Ctrl-C,\n  to clear the current line buffer, has been moved to Ctrl-Q.\n- Importing modules that start with `/` is now the only way to import from project root.\n  Before, this would import from / on disk. Previous imports that did not start with `.` or `/`\n  are now unambiguously importing from the syspath, instead of checking both the syspath and\n  the project root. This is backwards incompatible and dependencies should be updated for this.\n- Change hash function for numbers.\n- Improve error handling of `dofile`.\n- Bug fixes in networking and subprocess code.\n- Use markdown formatting in more places for docstrings.\n\n## 1.13.1 - 2020-12-13\n- Pretty printing a table with a prototype will look for `:_name` instead of `:name`\n  in the prototype table to tag the output.\n- `match` macro implementation changed to be tail recursive.\n- Adds a :preload loader which allows one to manually put things into `module/cache`.\n- Add `buffer/push` function.\n- Backtick delimited strings and buffers are now reindented based on the column of the\n  opening delimiter. Whitespace in columns to the left of the starting column is ignored unless\n  there are non-space/non-newline characters in that region, in which case the old behavior is preserved.\n- Argument to `(error)` combinator in PEGs is now optional.\n- Add `(line)` and `(column)` combinators to PEGs to capture source line and column.\n  This should make error reporting a bit easier.\n- Add `merge-module` to core.\n- During installation and release, merge janetconf.h into janet.h for easier install.\n- Add `upscope` special form.\n- `os/execute` and `os/spawn` can take streams for redirecting IO.\n- Add `:parser` and `:read` parameters to `run-context`.\n- Add `os/open` if ev is enabled.\n- Add `os/pipe` if ev is enabled.\n- Add `janet_thread_current(void)` to C API\n- Add integer parsing forms to pegs. This makes parsing many binary protocols easier.\n- Lots of updates to networking code - now can use epoll (or poll) on linux and IOCP on windows.\n- Add `ev/` module. This exposes a fiber scheduler, queues, timeouts, and other functionality to users\n  for single threaded cooperative scheduling and asynchronous IO.\n- Add `net/accept-loop` and `net/listen`. These functions break down `net/server` into it's essential parts\n  and are more flexible. They also allow further improvements to these utility functions.\n- Various small bug fixes.\n\n## 1.12.2 - 2020-09-20\n- Add janet\\_try and janet\\_restore to C API.\n- Fix `os/execute` regression on windows.\n- Add :pipe option to `os/spawn`.\n- Fix docstring typos.\n\n## 1.12.1 - 2020-09-07\n- Make `zero?`, `one?`, `pos?`, and `neg?` polymorphic.\n- Add C++ support to jpm and improve C++ interop in janet.h.\n- Add `%t` formatter to `printf`, `string/format`, and other formatter functions.\n- Expose `janet_cfuns_prefix` in C API.\n- Add `os/proc-wait` and `os/proc-kill` for interacting with processes.\n- Add `janet_getjfile` to C API.\n- Allow redirection of stdin, stdout, and stderr by passing keywords in the env table in `os/spawn` and `os/execute`.\n- Add `os/spawn` to get a core/process back instead of an exit code as in `os/execute`.\n  When called like this, `os/execute` returns immediately.\n- Add `:x` flag to os/execute to raise error when exit code is non-zero.\n- Don't run `main` when flychecking.\n- Add `:n` flag to `file/open` to raise an error if file cannot be opened.\n- Fix import macro to not try and coerce everything to a string.\n- Allow passing a second argument to `disasm`.\n- Add `cancel`. Resumes a fiber but makes it immediately error at the yield point.\n- Allow multi-line paste into built in repl.\n- Add `(curenv)`.\n- Change `net/read`, `net/chunk`, and `net/write` to raise errors in the case of failures.\n- Add `janet_continue_signal` to C API. This indirectly enables C functions that yield to the event loop\n  to raise errors or other signals.\n- Update meson build script to fix bug on Debian's version of meson\n- Add `xprint`, `xprin`, `xprintf`, and `xprinf`.\n- `net/write` now raises an error message if write fails.\n- Fix issue with SIGPIPE on macOS and BSDs.\n\n## 1.11.3 - 2020-08-03\n- Add `JANET_HASHSEED` environment variable when `JANET_PRF` is enabled.\n- Expose `janet_cryptorand` in C API.\n- Properly initialize PRF in default janet program\n- Add `index-of` to core library.\n- Add `-fPIC` back to core CFLAGS (non-optional when compiling default client with Makefile)\n- Fix defaults on Windows for ARM\n- Fix defaults on NetBSD.\n\n## 1.11.1 - 2020-07-25\n- Fix jpm and git with multiple git installs on Windows\n- Fix importing a .so file in the current directory\n- Allow passing byte sequence types directly to typed-array constructors.\n- Fix bug sending files between threads.\n- Disable PRF by default.\n- Update the soname.\n\n## 1.11.0 - 2020-07-18\n- Add `forever` macro.\n- Add `any?` predicate to core.\n- Add `jpm list-pkgs` subcommand to see which package aliases are in the listing.\n- Add `jpm list-installed` subcommand to see which packages are installed.\n- Add `math/int-min`, `math/int-max`, `math/int32-min`, and `math/int32-max` for getting integer limits.\n- The gc interval is now autotuned, to prevent very bad gc behavior.\n- Improvements to the bytecode compiler, Janet will now generate more efficient bytecode.\n- Add `peg/find`, `peg/find-all`, `peg/replace`, and `peg/replace-all`\n- Add `math/nan`\n- Add `forv` macro\n- Add `symbol/slice`\n- Add `keyword/slice`\n- Allow cross compilation with Makefile.\n- Change `compare-primitive` to `cmp` and make it more efficient.\n- Add `reverse!` for reversing an array or buffer in place.\n- `janet_dobytes` and `janet_dostring` return parse errors in \\*out\n- Add `repeat` macro for iterating something n times.\n- Add `eachy` (each yield) macro for iterating a fiber.\n- Fix `:generate` verb in loop macro to accept non symbols as bindings.\n- Add `:h`, `:h+`, and `:h*` in `default-peg-grammar` for hexadecimal digits.\n- Fix `%j` formatter to print numbers precisely (using the `%.17g` format string to printf).\n\n## 1.10.1 - 2020-06-18\n- Expose `janet_table_clear` in API.\n- Respect `JANET_NO_PROCESSES` define when building\n- Fix `jpm` rules having multiple copies of the same dependency.\n- Fix `jpm` install in some cases.\n- Add `array/trim` and `buffer/trim` to shrink the backing capacity of these types\n  to their current length.\n\n## 1.10.0 - 2020-06-14\n- Hardcode default jpm paths on install so env variables are needed in fewer cases.\n- Add `:no-compile` to `create-executable` option for jpm.\n- Fix bug with the `trace` function.\n- Add `:h`, `:a`, and `:c` flags to `thread/new` for creating new kinds of threads.\n  By default, threads will now consume much less memory per thread, but sending data between\n  threads may cost more.\n- Fix flychecking when using the `use` macro.\n- CTRL-C no longer exits the repl, and instead cancels the current form.\n- Various small bug fixes\n- New MSI installer instead of NSIS based installer.\n- Make `os/realpath` work on windows.\n- Add polymorphic `compare` functions for comparing numbers.\n- Add `to` and `thru` peg combinators.\n- Add `JANET_GIT` environment variable to jpm to use a specific git binary (useful mainly on windows).\n- `asm` and `disasm` functions now use keywords instead of macros for keys. Also\n  some slight changes to the way constants are encoded (remove wrapping `quote` in some cases).\n- Expose current macro form inside macros as (dyn :macro-form)\n- Add `tracev` macro.\n- Fix compiler bug that emitted incorrect code in some cases for while loops that create closures.\n- Add `:fresh` option to `(import ...)` to overwrite the module cache.\n- `(range x y 0)` will return an empty array instead of hanging forever.\n- Rename `jpm repl` to `jpm debug-repl`.\n\n## 1.9.1 - 2020-05-12\n- Add :prefix option to declare-source\n- Re-enable minimal builds with the debugger.\n- Add several flags for configuring Janet on different platforms.\n- Fix broken meson build from 1.9.0 and add meson to CI.\n- Fix compilation issue when nanboxing is disabled.\n\n## 1.9.0 - 2020-05-10\n- Add `:ldflags` option to many jpm declare functions.\n- Add `errorf` to core.\n- Add `lenprefix` combinator to PEGs.\n- Add `%M`, `%m`, `%N`, and `%n` formatters to formatting functions. These are the\n  same as `%Q`, `%q`, `%P`, and `%p`, but will not truncate long values.\n- Add `fiber/root`.\n- Add beta `net/` module to core for socket based networking.\n- Add the `parse` function to parse strings of source code more conveniently.\n- Add `jpm rule-tree` subcommand.\n- Add `--offline` flag to jpm to force use of the cache.\n- Allow sending pointers and C functions across threads via `thread/send`.\n- Fix bug in `getline`.\n- Add `sh-rule` and `sh-phony` to jpm's dialect of Janet.\n- Change C api's `janet_formatb` -> `janet_formatbv`, and add new function `janet_formatb` to C api.\n- Add `edefer` macro to core.\n- A struct/table literal/constructor with duplicate keys will use the last value given.\n  Previously, this was inconsistent between tables and structs, literals and constructor functions.\n- Add debugger to core. The debugger functions are only available\n  in a debug repl, and are prefixed by a `.`.\n- Add `sort-by` and `sorted-by` to core.\n- Support UTF-8 escapes in strings via `\\uXXXX` or `\\UXXXXXX`.\n- Add `math/erf`\n- Add `math/erfc`\n- Add `math/log1p`\n- Add `math/next`\n- Add os/umask\n- Add os/perm-int\n- Add os/perm-string\n- Add :int-permissions option for os/stat.\n- Add `jpm repl` subcommand, as well as `post-deps` macro in project.janet files.\n- Various bug fixes.\n\n## 1.8.1 - 2020-03-31\n- Fix bugs for big endian systems\n- Fix 1.8.0 regression on BSDs\n\n## 1.8.0 - 2020-03-29\n- Add `reduce2`, `accumulate`, and `accumulate2`.\n- Add lockfiles to `jpm` via `jpm make-lockfile` and `jpm load-lockfile`.\n- Add `os/realpath` (Not supported on windows).\n- Add `os/chmod`.\n- Add `chr` macro.\n- Allow `_` in the `match` macro to match anything without creating a binding\n  or doing unification. Also change behavior of matching nil.\n- Add `:range-to` and `:down-to` verbs in the `loop` macro.\n- Fix `and` and `or` macros returning nil instead of false in some cases.\n- Allow matching successfully against nil values in the `match` macro.\n- Improve `janet_formatc` and `janet_panicf` formatters to be more like `string/format`.\n  This makes it easier to make nice error messages from C.\n- Add `signal`\n- Add `fiber/can-resume?`\n- Allow fiber functions to accept arguments that are passed in via `resume`.\n- Make flychecking slightly less strict but more useful\n- Correct arity for `next`\n- Correct arity for `marshal`\n- Add `flush` and `eflush`\n- Add `prompt` and `return` on top of signal for user friendly delimited continuations.\n- Fix bug in buffer/blit when using the offset-src argument.\n- Fix segfault with malformed pegs.\n\n## 1.7.0 - 2020-02-01\n- Remove `file/fileno` and `file/fdopen`.\n- Remove `==`, `not==`, `order<`, `order>`, `order<=`, and `order>=`. Instead, use the normal\n  comparison and equality functions.\n- Let abstract types define a hash function and comparison/equality semantics. This lets\n  abstract types much better represent value types. This adds more fields to abstract types, which\n  will generate warnings when compiled against other versions.\n- Remove Emscripten build. Instead, use the amalgamated source code with a custom toolchain.\n- Update documentation.\n- Add `var-`\n- Add `module/add-paths`\n- Add `file/temp`\n- Add `mod` function to core.\n- Small bug fixes\n- Allow signaling from C functions (yielding) via janet\\_signalv. This\n  makes it easy to write C functions that work with event loops, such as\n  in libuv or embedded in a game.\n- Add '%j' formatting option to the format family of functions.\n- Add `defer`\n- Add `assert`\n- Add `when-with`\n- Add `if-with`\n- Add completion to the default repl based on currently defined bindings. Also generally improve\n  the repl keybindings.\n- Add `eachk`\n- Add `eachp`\n- Improve functionality of the `next` function. `next` now works on many different\n  types, not just tables and structs. This allows for more generic data processing.\n- Fix thread module issue where sometimes decoding a message failed.\n- Fix segfault regression when macros are called with bad arity.\n\n## 1.6.0 - 2019-12-22\n- Add `thread/` module to the core.\n- Allow seeding RNGs with any sequence of bytes. This provides\n  a wider key space for the RNG. Exposed in C as `janet_rng_longseed`.\n- Fix issue in `resume` and similar functions that could cause breakpoints to be skipped.\n- Add a number of new math functions.\n- Improve debugger experience and capabilities. See examples/debugger.janet\n  for what an interactive debugger could look like.\n- Add `debug/step` (janet\\_step in the C API) for single stepping Janet bytecode.\n- The built in repl now can enter the debugger on any signal (errors, yields,\n  user signals, and debug signals). To enable this, type (setdyn :debug true)\n  in the repl environment.\n- When exiting the debugger, the fiber being debugged is resumed with the exit value\n  of the debug session (the value returned by `(quit return-value)`, or nil if user typed Ctrl-D).\n- `(quit)` can take an optional argument that is the return value. If a module\n  contains `(quit some-value)`, the value of that module returned to `(require \"somemod\")`\n  is the return value. This lets module writers completely customize a module without writing\n  a loader.\n- Add nested quasiquotation.\n- Add `os/cryptorand`\n- Add `prinf` and `eprinf` to be have like `printf` and `eprintf`. The latter two functions\n  now including a trailing newline, like the other print functions.\n- Add nan?\n- Add `janet_in` to C API.\n- Add `truthy?`\n- Add `os/environ`\n- Add `buffer/fill` and `array/fill`\n- Add `array/new-filled`\n- Use `(doc)` with no arguments to see available bindings and dynamic bindings.\n- `jpm` will use `CC` and `AR` environment variables when compiling programs.\n- Add `comptime` macro for compile time evaluation.\n- Run `main` functions in scripts if they exist, just like jpm standalone binaries.\n- Add `protect` macro.\n- Add `root-env` to get the root environment table.\n- Change marshalling protocol with regard to abstract types.\n- Add `show-paths` to `jpm`.\n- Add several default patterns, like `:d` and `:s+`, to PEGs.\n- Update `jpm` path settings to make using `jpm` easier on non-global module trees.\n- Numerous small bug fixes and usability improvements.\n\n### 1.5.1 - 2019-11-16\n- Fix bug when printing buffer to self in some edge cases.\n- Fix bug with `jpm` on windows.\n- Fix `update` return value.\n\n## 1.5.0 - 2019-11-10\n- `os/date` now defaults to UTC.\n- Add `--test` flag to jpm to test libraries on installation.\n- Add `math/rng`, `math/rng-int`, and `math/rng-uniform`.\n- Add `in` function to index in a stricter manner. Conversely, `get` will\n  now not throw errors on bad keys.\n- Indexed types and byte sequences will now error when indexed out of range or\n  with bad keys.\n- Add rng functions to Janet. This also replaces the RNG behind `math/random`\n  and `math/seedrandom` with a consistent, platform independent RNG.\n- Add `with-vars` macro.\n- Add the `quickbin` command to jpm.\n- Create shell.c when making the amalgamated source. This can be compiled with\n  janet.c to make the janet interpreter.\n- Add `cli-main` function to the core, which invokes Janet's CLI interface.\n  This basically moves what was init.janet into boot.janet.\n- Improve flychecking, and fix flychecking bugs introduced in 1.4.0.\n- Add `prin`, `eprint`, `eprintf` and `eprin` functions. The\n  functions prefix with e print to `(dyn :err stderr)`\n- Print family of functions can now also print to buffers\n  (before, they could only print to files.) Output can also\n  be completely disabled with `(setdyn :out false)`.\n- `printf` is now a c function for optimizations in the case\n  of printing to buffers.\n\n## 1.4.0 - 2019-10-14\n- Add `quit` function to exit from a repl, but not always exit the entire\n  application.\n- Add `update-pkgs` to jpm.\n- Integrate jpm with https://github.com/janet-lang/pkgs.git. jpm can now\n  install packages based on their short names in the package listing, which\n  can be customized via an env variable.\n- Add `varfn` macro\n- Add compile time arity checking when function in function call is known.\n- Added `slice` to the core library.\n- The `*/slice` family of functions now can take nil as start or end to get\n  the same behavior as the defaults (0 and -1) for those parameters.\n- `string/` functions that take a pattern to search for will throw an error\n  when receiving the empty string.\n- Replace (start:end) style stacktrace source position information with\n  line, column. This should be more readable for humans. Also, range information\n  can be recovered by re-parsing source.\n\n## 1.3.1 - 2019-09-21\n- Fix some linking issues when creating executables with native dependencies.\n- jpm now runs each test script in a new interpreter.\n- Fix an issue that prevent some valid programs from compiling.\n- Add `mean` to core.\n- Abstract types that implement the `:+`, `:-`, `:*`, `:/`, `:>`, `:==`, `:<`,\n  `:<=`, and `:>=` methods will work with the corresponding built-in\n  arithmetic functions. This means built-in integer types can now be used as\n  normal number values in many contexts.\n- Allow (length x) on typed arrays an other abstract types that implement\n  the :length method.\n\n## 1.3.0 - 2019-09-05\n- Add `get-in`, `put-in`, `update-in`, and `freeze` to core.\n- Add `jpm run rule` and `jpm rules` to jpm to improve utility and discoverability of jpm.\n- Remove `cook` module and move `path` module to https://github.com/janet-lang/path.git.\n  The functionality in `cook` is now bundled directly in the `jpm` script.\n- Add `buffer/format` and `string/format` format flags `Q` and `q` to print colored and\n  non-colored single-line values, similar to `P` and `p`.\n- Change default repl to print long sequences on one line and color stacktraces if color is enabled.\n- Add `backmatch` pattern for PEGs.\n- jpm detects if not in a Developer Command prompt on windows for a better error message.\n- jpm install git submodules in dependencies\n- Change default fiber stack limit to the maximum value of a 32 bit signed integer.\n- Some bug fixes with `jpm`\n- Fix bugs with pegs.\n- Add `os/arch` to get ISA that janet was compiled for\n- Add color to stacktraces via `(dyn :err-color)`\n\n## 1.2.0 - 2019-08-08\n- Add `take` and `drop` functions that are easier to use compared to the\n  existing slice functions.\n- Add optional default value to `get`.\n- Add function literal short-hand via `|` reader macro, which maps to the\n  `short-fn` macro.\n- Add `int?` and `nat?` functions to the core.\n- Add `(dyn :executable)` at top level to get what used to be\n  `(process/args 0)`.\n- Add `:linux` to platforms returned by `(os/which)`.\n- Update jpm to build standalone executables. Use `declare-executable` for this.\n- Add `use` macro.\n- Remove `process/args` in favor of `(dyn :args)`.\n- Fix bug with Nanbox implementation allowing users to created\n  custom values of any type with typed array and marshal modules, which\n  was unsafe.\n- Add `janet_wrap_number_safe` to API, for converting numbers to Janets\n  where the number could be any 64 bit, user provided bit pattern. Certain\n  NaN values (which a machine will never generate as a result of a floating\n  point operation) are guarded against and converted to a default NaN value.\n\n## 1.1.0 - 2019-07-08\n- Change semantics of `-l` flag to be import rather than dofile.\n- Fix compiler regression in top level defs with destructuring.\n- Add `table/clone`.\n- Improve `jpm` tool with git and dependency capabilities, as well as better\n  module uninstalls.\n\n## 1.0.0 - 2019-07-01\n- Add `with` macro for resource handling.\n- Add `propagate` function so we can \"rethrow\" signals after they are\n  intercepted. This makes signals even more flexible.\n- Add `JANET_NO_DOCSTRINGS` and `JANET_NO_SOURCEMAPS` defines in janetconf.h\n  for shrinking binary size.\n  This seems to save about 50kB in most builds, so it's not usually worth it.\n- Update module system to allow relative imports. The `:cur:` pattern\n  in `module/expand-path` will expand to the directory part of the current file, or\n  whatever the value of `(dyn :current-file)` is. The `:dir:` pattern gets\n  the directory part of the input path name.\n- Remove `:native:` pattern in `module/paths`.\n- Add `module/expand-path`\n- Remove `module/*syspath*` and `module/*headerpath*` in favor of dynamic\n  bindings `:syspath` and `:headerpath`.\n- Compiled PEGs can now be marshaled and unmarshaled.\n- Change signature to `parser/state`\n- Add `:until` verb to loop.\n- Add `:p` flag to `fiber/new`.\n- Add `file/{fdopen,fileno}` functions.\n- Add `parser/clone` function.\n- Add optional argument to `parser/where` to set parser byte index.\n- Add optional `env` argument to `all-bindings` and `all-dynamics`.\n- Add scratch memory C API functions for auto-released memory on next gc.\n  Scratch memory differs from normal GCed memory as it can also be freed normally\n  for better performance.\n- Add API compatibility checking for modules. This will let native modules not load\n  when the host program is not of a compatible version or configuration.\n- Change signature of `os/execute` to be much more flexible.\n\n## 0.6.0 - 2019-05-29\n- `file/close` returns exit code when closing file opened with `file/popen`.\n- Add `os/rename`\n- Update windows installer to include tools like `jpm`.\n- Add `jpm` tool for building and managing projects.\n- Change interface to `cook` tool.\n- Add optional filters to `module/paths` to further refine import methods.\n- Add keyword arguments via `&keys` in parameter list.\n- Add `-k` flag for flychecking source.\n- Change signature to `compile` function.\n- Add `module/loaders` for custom loading functions.\n- Add external unification to `match` macro.\n- Add static library to main build.\n- Add `janet/*headerpath*` and change location of installed headers.\n- Let `partition` take strings.\n- Haiku OS support\n- Add `string/trim`, `string/trimr`, and `string/triml`.\n- Add `dofile` function.\n- Numbers require at least 1 significant digit.\n- `file/read` will return nil on end of file.\n- Fix various bugs.\n\n## 0.5.0 - 2019-05-09\n- Fix some bugs with buffers.\n- Add `trace` and `untrace` to the core library.\n- Add `string/has-prefix?` and `string/has-suffix?` to string module.\n- Add simple debugger to repl that activates on errors or debug signal\n- Remove `*env*` and `*doc-width*`.\n- Add `fiber/getenv`, `fiber/setenv`, and `dyn`, and `setdyn`.\n- Add support for dynamic bindings (via the `dyn` and `setdyn` functions).\n- Change signatures of some functions like `eval` which no longer takes\n  an optional environment.\n- Add printf function\n- Make `pp` configurable with dynamic binding `:pretty-format`.\n- Remove the `meta` function.\n- Add `with-dyns` for blocks with dynamic bindings assigned.\n- Allow leading and trailing newlines in backtick-delimited string (long strings).\n  These newlines will not be included in the actual string value.\n\n## 0.4.1 - 2019-04-14\n- Squash some bugs\n- Peg patterns can now make captures in any position in a grammar.\n- Add color to repl output\n- Add array/remove function\n- Add meson build support\n- Add int module for int types\n- Add meson build option\n- Add (break) special form and improve loop macro\n- Allow abstract types to specify custom tostring method\n- Extend C API for marshalling abstract types and other values\n- Add functions to `os` module.\n\n## 0.4.0 - 2019-03-08\n- Fix a number of smaller bugs\n- Added :export option to import and require\n- Added typed arrays\n- Remove `callable?`.\n- Remove `tuple/append` and `tuple/prepend`, which may have seemed like `O(1)`\n  operations. Instead, use the `splice` special to extend tuples.\n- Add `-m` flag to main client to allow specifying where to load\n  system modules from.\n- Add `-c` flag to main client to allow compiling Janet modules to images.\n- Add `string/format` and `buffer/format`.\n- Remove `string/pretty` and `string/number`.\n- `make-image` function creates pre compiled images for janet. These images\n  link to the core library. They can be loaded via require or manually via\n  `load-image`.\n- Add bracketed tuples as tuple constructor.\n- Add partition function to core library.\n- Pre-compile core library into an image for faster startup.\n- Add methods to parser values that mirror the api.\n- Add janet\\_getmethod to CAPI for easier use of method like syntax.\n- Add get/set to abstract types to allow them to behave more\n  like objects with methods.\n- Add parser/insert to modify parser state programmatically\n- Add debug/stacktrace for easy, pretty stacktraces\n- Remove the status-pp function\n- Update API to run-context to be much more sane\n- Add :lflags option to cook/make-native\n- Disallow NaNs as table or struct keys\n- Update module resolution paths and format\n\n## 0.3.0 - 2019-01-26\n- Add amalgamated build to janet for easier embedding.\n- Add os/date function\n- Add slurp and spit to core library.\n- Added this changelog.\n- Added peg module (Parsing Expression Grammars)\n- Move hand written documentation into website repository.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.4599609375,
          "content": "# Guidelines for contributing to Janet\n\nThanks for taking time to contribute to Janet!\n\nPlease read this document before making contributions.\n\n## Reporting bugs\n\n* Check past and current issues to see if your problem has been run into before.\n* If you can't find a past issue for your problem, or if the issues has been closed\n  you should open a new issue. If there is a closed issue that is relevant, make\n  sure to reference it.\n* As with any project, include a comprehensive description of the problem and instructions\n  on how to reproduce it. If it is a compiler or language bug, please try to include a minimal\n  example. This means don't post all 200 lines of code from your project, but spend some time\n  distilling the problem to just the relevant code.\n\n## Contributing Changes\n\nIf you want to contribute some code to the project, please submit a pull request and\nfollow the below guidelines. Not all changes will be merged, and some pull requests\nmay require changes before being merged.\n\n* Include a description of the changes.\n* If there are changes to the compiler or the language, please include tests in the test folder.\n  The test suites are not organized in any particular way now, so simply add your tests\n  to one of the test suite files (test/suite0.janet, test/suite1.janet, etc.). You can\n  run tests with `make test`. If you want to add a new test suite, simply add a file to\n  the test folder and make sure it is run when`make test` is invoked.\n* Be consistent with the style. For C this means follow the indentation and style in\n  other files (files have MIT license at top, 4 spaces indentation, no trailing\n  whitespace, cuddled brackets, etc.) Use `make format` to automatically format your C code with\n  [astyle](http://astyle.sourceforge.net/astyle.html). You will probably need\n  to install this, but it can be installed with most package managers.\n\n  For janet code, use lisp indentation with 2 spaces. One can use janet.vim to\n  do this indentation, or approximate as close as possible. There is a janet formatter\n  in [spork](https://github.com/janet-lang/spork.git) that can be used to format code as well.\n\n## C style\n\nFor changes to the VM and Core code, you will probably need to know C. Janet is programmed with\na subset of C99 that works with Microsoft Visual C++. This means most of C99 but with the following\nomissions.\n\n* No `restrict`\n* Certain functions in the standard library are not always available\n\nIn practice, this means programming for both MSVC on one hand and everything else on the other.\nThe code must also build with emscripten, even if some features are not available, although\nthis is not a priority.\n\nCode should compile warning free and run valgrind clean. I find that these two criteria are some\nof the easiest ways to protect against a large number of bugs in an unsafe language like C. To check for\nvalgrind errors, run `make valtest` and check the output for undefined or flagged behavior.\n\n### Formatting\n\nUse [astyle](http://astyle.sourceforge.net/astyle.html) via `make format` to\nensure a consistent code style for C.\n\n## Janet style\n\nAll janet code in the project should be formatted similar to the code in core.janet.\nThe auto formatting from janet.vim will work well.\n\n## Typo Fixing and One-Line changes\n\nTypo fixes are welcome, as are simple one line fixes. Do not open many separate pull requests for each\nindividual typo fix. This is incredibly annoying to deal with as someone needs to review each PR, run\nCI, and merge. Instead, accumulate batches of typo fixes into a single PR. If there are objections to\nspecific changes, these can be addressed in the review process before the final merge, if the changes\nare accepted.\n\nSimilarly, low effort and bad faith changes are annoying to developers and such issues may be closed\nimmediately without response.\n\n## Contributions from Automated Tools\n\nPeople making changes found or generated by automated tools MUST note this when opening an issue\nor creating a pull request. This can help give context to developers if the change/issue is\nconfusing or nonsensical.\n\n## Suggesting Changes\n\nTo suggest changes, open an issue on GitHub. Check GitHub for other issues\nthat may be related to your issue before opening a new suggestion. Suggestions\nput forth without code will be considered, but not necessarily implemented in any\ntimely manner. In short, if you want extra functionality now, then build it.\n\n* Include a good description of the problem that is being solved\n* Include descriptions of potential solutions if you have some in mind.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.046875,
          "content": "Copyright (c) 2023 Calvin Rose and contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 13.5361328125,
          "content": "# Copyright (c) 2024 Calvin Rose\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to\n# deal in the Software without restriction, including without limitation the\n# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n# sell copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n# IN THE SOFTWARE.\n\n################################\n##### Set global variables #####\n################################\nsinclude config.mk\nPREFIX?=/usr/local\n\nJANETCONF_HEADER?=src/conf/janetconf.h\nINCLUDEDIR?=$(PREFIX)/include\nBINDIR?=$(PREFIX)/bin\nLIBDIR?=$(PREFIX)/lib\nJANET_BUILD?=\"\\\"$(shell git log --pretty=format:'%h' -n 1 2> /dev/null || echo local)\\\"\"\nCLIBS=-lm -lpthread\nJANET_TARGET=build/janet\nJANET_BOOT=build/janet_boot\nJANET_IMPORT_LIB=build/janet.lib\nJANET_LIBRARY_IMPORT_LIB=build/libjanet.lib\nJANET_LIBRARY=build/libjanet.so\nJANET_STATIC_LIBRARY=build/libjanet.a\nJANET_PATH?=$(LIBDIR)/janet\nJANET_MANPATH?=$(PREFIX)/share/man/man1/\nJANET_PKG_CONFIG_PATH?=$(LIBDIR)/pkgconfig\nJANET_DIST_DIR?=janet-dist\nJANET_BOOT_FLAGS:=. JANET_PATH '$(JANET_PATH)'\nJANET_TARGET_OBJECTS=build/janet.o build/shell.o\nJPM_TAG?=master\nSPORK_TAG?=master\nHAS_SHARED?=1\nDEBUGGER=gdb\nSONAME_SETTER=-Wl,-soname,\n\n# For cross compilation\nHOSTCC?=$(CC)\nHOSTAR?=$(AR)\n# Symbols are (optionally) removed later, keep -g as default!\nCFLAGS?=-O2 -g\nLDFLAGS?=-rdynamic\nLIBJANET_LDFLAGS?=$(LD_FLAGS)\nRUN:=$(RUN)\n\nCOMMON_CFLAGS:=-std=c99 -Wall -Wextra -Isrc/include -Isrc/conf -fvisibility=hidden -fPIC\nBOOT_CFLAGS:=-DJANET_BOOTSTRAP -DJANET_BUILD=$(JANET_BUILD) -O0 $(COMMON_CFLAGS) -g\nBUILD_CFLAGS:=$(CFLAGS) $(COMMON_CFLAGS)\n\n# Disable amalgamated build\nifeq ($(JANET_NO_AMALG), 1)\n\tJANET_TARGET_OBJECTS+=$(patsubst src/%.c,build/%.bin.o,$(JANET_CORE_SOURCES))\n\tJANET_BOOT_FLAGS+=image-only\nendif\n\n# For installation\nLDCONFIG:=ldconfig \"$(LIBDIR)\"\n\n# Check OS\nUNAME?=$(shell uname -s)\nifeq ($(UNAME), Darwin)\n\tCLIBS:=$(CLIBS) -ldl\n\tSONAME_SETTER:=-Wl,-install_name,\n\tJANET_LIBRARY=build/libjanet.dylib\n\tLDCONFIG:=true\nelse ifeq ($(UNAME), Linux)\n\tCLIBS:=$(CLIBS) -lrt -ldl\nendif\n\n# For other unix likes, add flags here!\nifeq ($(UNAME), Haiku)\n\tLDCONFIG:=true\n\tLDFLAGS=-Wl,--export-dynamic\nendif\n# For Android (termux)\nifeq ($(UNAME), Linux) # uname on Darwin doesn't recognise -o\nifeq ($(shell uname -o), Android)\n\tCLIBS:=$(CLIBS) -landroid-spawn\nendif\nendif\n\n# Mingw\nifeq ($(findstring MINGW,$(UNAME)), MINGW)\n\tCLIBS:=-lws2_32 -lpsapi -lwsock32\n\tLDFLAGS:=-Wl,--out-implib,$(JANET_IMPORT_LIB)\n\tLIBJANET_LDFLAGS:=-Wl,--out-implib,$(JANET_LIBRARY_IMPORT_LIB)\n\tJANET_TARGET:=$(JANET_TARGET).exe\n\tJANET_BOOT:=$(JANET_BOOT).exe\nendif\n\n\n$(shell mkdir -p build/core build/c build/boot build/mainclient)\nall: $(JANET_TARGET) $(JANET_STATIC_LIBRARY) build/janet.h\nifeq ($(HAS_SHARED), 1)\nall: $(JANET_LIBRARY)\nendif\n\n######################\n##### Name Files #####\n######################\n\nJANET_HEADERS=src/include/janet.h $(JANETCONF_HEADER)\n\nJANET_LOCAL_HEADERS=src/core/features.h \\\n\t\t\t\t\tsrc/core/util.h \\\n\t\t\t\t\tsrc/core/state.h \\\n\t\t\t\t\tsrc/core/gc.h \\\n\t\t\t\t\tsrc/core/vector.h \\\n\t\t\t\t\tsrc/core/fiber.h \\\n\t\t\t\t\tsrc/core/regalloc.h \\\n\t\t\t\t\tsrc/core/compile.h \\\n\t\t\t\t\tsrc/core/emit.h \\\n\t\t\t\t\tsrc/core/symcache.h\n\nJANET_CORE_SOURCES=src/core/abstract.c \\\n\t\t\t\t   src/core/array.c \\\n\t\t\t\t   src/core/asm.c \\\n\t\t\t\t   src/core/buffer.c \\\n\t\t\t\t   src/core/bytecode.c \\\n\t\t\t\t   src/core/capi.c \\\n\t\t\t\t   src/core/cfuns.c \\\n\t\t\t\t   src/core/compile.c \\\n\t\t\t\t   src/core/corelib.c \\\n\t\t\t\t   src/core/debug.c \\\n\t\t\t\t   src/core/emit.c \\\n\t\t\t\t   src/core/ev.c \\\n\t\t\t\t   src/core/ffi.c \\\n\t\t\t\t   src/core/fiber.c \\\n\t\t\t\t   src/core/filewatch.c \\\n\t\t\t\t   src/core/gc.c \\\n\t\t\t\t   src/core/inttypes.c \\\n\t\t\t\t   src/core/io.c \\\n\t\t\t\t   src/core/marsh.c \\\n\t\t\t\t   src/core/math.c \\\n\t\t\t\t   src/core/net.c \\\n\t\t\t\t   src/core/os.c \\\n\t\t\t\t   src/core/parse.c \\\n\t\t\t\t   src/core/peg.c \\\n\t\t\t\t   src/core/pp.c \\\n\t\t\t\t   src/core/regalloc.c \\\n\t\t\t\t   src/core/run.c \\\n\t\t\t\t   src/core/specials.c \\\n\t\t\t\t   src/core/state.c \\\n\t\t\t\t   src/core/string.c \\\n\t\t\t\t   src/core/strtod.c \\\n\t\t\t\t   src/core/struct.c \\\n\t\t\t\t   src/core/symcache.c \\\n\t\t\t\t   src/core/table.c \\\n\t\t\t\t   src/core/tuple.c \\\n\t\t\t\t   src/core/util.c \\\n\t\t\t\t   src/core/value.c \\\n\t\t\t\t   src/core/vector.c \\\n\t\t\t\t   src/core/vm.c \\\n\t\t\t\t   src/core/wrap.c\n\nJANET_BOOT_SOURCES=src/boot/array_test.c \\\n\t\t\t\t   src/boot/boot.c \\\n\t\t\t\t   src/boot/buffer_test.c \\\n\t\t\t\t   src/boot/number_test.c \\\n\t\t\t\t   src/boot/system_test.c \\\n\t\t\t\t   src/boot/table_test.c\nJANET_BOOT_HEADERS=src/boot/tests.h\n\n##########################################################\n##### The bootstrap interpreter that creates janet.c #####\n##########################################################\n\nJANET_BOOT_OBJECTS=$(patsubst src/%.c,build/%.boot.o,$(JANET_CORE_SOURCES) $(JANET_BOOT_SOURCES))\n\n$(JANET_BOOT_OBJECTS): $(JANET_BOOT_HEADERS)\n\nbuild/%.boot.o: src/%.c $(JANET_HEADERS) $(JANET_LOCAL_HEADERS) Makefile\n\t$(CC) $(BOOT_CFLAGS) -o $@ -c $<\n\n$(JANET_BOOT): $(JANET_BOOT_OBJECTS)\n\t$(CC) $(BOOT_CFLAGS) -o $@ $(JANET_BOOT_OBJECTS) $(CLIBS)\n\n# Now the reason we bootstrap in the first place\nbuild/c/janet.c: $(JANET_BOOT) src/boot/boot.janet\n\t$(RUN) $(JANET_BOOT) $(JANET_BOOT_FLAGS) > $@\n\tcksum $@\n\n##################\n##### Quicky #####\n##################\n\nbuild/%.bin.o: src/%.c $(JANET_HEADERS) $(JANET_LOCAL_HEADERS) Makefile\n\t$(HOSTCC) $(BUILD_CFLAGS) -o $@ -c $<\n\n########################\n##### Amalgamation #####\n########################\n\nifeq ($(UNAME), Darwin)\nSONAME=libjanet.1.37.dylib\nelse\nSONAME=libjanet.so.1.37\nendif\n\nbuild/c/shell.c: src/mainclient/shell.c\n\tcp $< $@\n\nbuild/janet.h: $(JANET_TARGET) src/include/janet.h $(JANETCONF_HEADER)\n\t$(RUN) ./$(JANET_TARGET) tools/patch-header.janet src/include/janet.h $(JANETCONF_HEADER) $@\n\nbuild/janetconf.h: $(JANETCONF_HEADER)\n\tcp $< $@\n\nbuild/janet.o: build/c/janet.c $(JANETCONF_HEADER) src/include/janet.h\n\t$(HOSTCC) $(BUILD_CFLAGS) -c $< -o $@\n\nbuild/shell.o: build/c/shell.c $(JANETCONF_HEADER) src/include/janet.h\n\t$(HOSTCC) $(BUILD_CFLAGS) -c $< -o $@\n\n$(JANET_TARGET): $(JANET_TARGET_OBJECTS)\n\t$(HOSTCC) $(LDFLAGS) $(BUILD_CFLAGS) -o $@ $^ $(CLIBS)\n\n$(JANET_LIBRARY): $(JANET_TARGET_OBJECTS)\n\t$(HOSTCC) $(LIBJANET_LDFLAGS) $(BUILD_CFLAGS) $(SONAME_SETTER)$(SONAME) -shared -o $@ $^ $(CLIBS)\n\n$(JANET_STATIC_LIBRARY): $(JANET_TARGET_OBJECTS)\n\t$(HOSTAR) rcs $@ $^\n\n###################\n##### Testing #####\n###################\n\n# Testing assumes HOSTCC=CC\n\nTEST_SCRIPTS=$(wildcard test/suite*.janet)\n\nrepl: $(JANET_TARGET)\n\t$(RUN) ./$(JANET_TARGET)\n\ndebug: $(JANET_TARGET)\n\t$(DEBUGGER) ./$(JANET_TARGET)\n\nVALGRIND_COMMAND=valgrind --leak-check=full --quiet\n\nvalgrind: $(JANET_TARGET)\n\t$(VALGRIND_COMMAND) ./$(JANET_TARGET)\n\ntest: $(JANET_TARGET) $(TEST_PROGRAMS)\n\tfor f in test/suite*.janet; do $(RUN) ./$(JANET_TARGET) \"$$f\" || exit; done\n\tfor f in examples/*.janet; do $(RUN) ./$(JANET_TARGET) -k \"$$f\"; done\n\nvaltest: $(JANET_TARGET) $(TEST_PROGRAMS)\n\tfor f in test/suite*.janet; do $(VALGRIND_COMMAND) ./$(JANET_TARGET) \"$$f\" || exit; done\n\tfor f in examples/*.janet; do ./$(JANET_TARGET) -k \"$$f\"; done\n\ncallgrind: $(JANET_TARGET)\n\tfor f in test/suite*.janet; do valgrind --tool=callgrind ./$(JANET_TARGET) \"$$f\" || exit; done\n\n########################\n##### Distribution #####\n########################\n\ndist: build/janet-dist.tar.gz\n\nbuild/janet-%.tar.gz: $(JANET_TARGET) \\\n\tbuild/janet.h \\\n\tjanet.1 LICENSE CONTRIBUTING.md $(JANET_STATIC_LIBRARY) \\\n\tREADME.md build/c/janet.c build/c/shell.c\n\tmkdir -p build/$(JANET_DIST_DIR)/bin\n\tcp $(JANET_TARGET) build/$(JANET_DIST_DIR)/bin/\n\tstrip -x -S 'build/$(JANET_DIST_DIR)/bin/janet'\n\tmkdir -p build/$(JANET_DIST_DIR)/include\n\tcp build/janet.h build/$(JANET_DIST_DIR)/include/\n\tmkdir -p build/$(JANET_DIST_DIR)/lib/\n\tcp $(JANET_STATIC_LIBRARY) build/$(JANET_DIST_DIR)/lib/\n\tcp $(JANET_LIBRARY) build/$(JANET_DIST_DIR)/lib/ || true\n\tmkdir -p build/$(JANET_DIST_DIR)/man/man1/\n\tcp janet.1 build/$(JANET_DIST_DIR)/man/man1/janet.1\n\tmkdir -p build/$(JANET_DIST_DIR)/src/\n\tcp build/c/janet.c build/c/shell.c build/$(JANET_DIST_DIR)/src/\n\tcp CONTRIBUTING.md LICENSE README.md build/$(JANET_DIST_DIR)/\n\tcd build && tar -czvf ../$@ ./$(JANET_DIST_DIR)\nifeq ($(HAS_SHARED), 1)\nbuild/janet-%.tar.gz: $(JANET_LIBRARY)\nendif\n\n#########################\n##### Documentation #####\n#########################\n\ndocs: build/doc.html\n\nbuild/doc.html: $(JANET_TARGET) tools/gendoc.janet\n\t$(RUN) $(JANET_TARGET) tools/gendoc.janet > build/doc.html\n\n########################\n##### Installation #####\n########################\n\n.INTERMEDIATE: build/janet.pc\nbuild/janet.pc: $(JANET_TARGET)\n\techo 'prefix=$(PREFIX)' > $@\n\techo 'exec_prefix=$${prefix}' >> $@\n\techo 'includedir=$(INCLUDEDIR)/janet' >> $@\n\techo 'libdir=$(LIBDIR)' >> $@\n\techo \"\" >> $@\n\techo \"Name: janet\" >> $@\n\techo \"Url: https://janet-lang.org\" >> $@\n\techo \"Description: Library for the Janet programming language.\" >> $@\n\t$(RUN) $(JANET_TARGET) -e '(print \"Version: \" janet/version)' >> $@\n\techo 'Cflags: -I$${includedir}' >> $@\n\techo 'Libs: -L$${libdir} -ljanet' >> $@\n\techo 'Libs.private: $(CLIBS)' >> $@\n\ninstall: $(JANET_TARGET) $(JANET_LIBRARY) $(JANET_STATIC_LIBRARY) build/janet.pc build/janet.h\n\tmkdir -p '$(DESTDIR)$(BINDIR)'\n\tcp $(JANET_TARGET) '$(DESTDIR)$(BINDIR)/janet'\n\tstrip -x -S '$(DESTDIR)$(BINDIR)/janet'\n\tmkdir -p '$(DESTDIR)$(INCLUDEDIR)/janet'\n\tcp -r build/janet.h '$(DESTDIR)$(INCLUDEDIR)/janet'\n\tln -sf ./janet/janet.h '$(DESTDIR)$(INCLUDEDIR)/janet.h'\n\tmkdir -p '$(DESTDIR)$(JANET_PATH)'\n\tmkdir -p '$(DESTDIR)$(LIBDIR)'\n\tif test $(UNAME) = Darwin ; then \\\n\t\tcp $(JANET_LIBRARY) '$(DESTDIR)$(LIBDIR)/libjanet.$(shell $(JANET_TARGET) -e '(print janet/version)').dylib' ; \\\n\t\tln -sf $(SONAME) '$(DESTDIR)$(LIBDIR)/libjanet.dylib' ; \\\n\t\tln -sf libjanet.$(shell $(JANET_TARGET) -e '(print janet/version)').dylib $(DESTDIR)$(LIBDIR)/$(SONAME) ; \\\n\telse \\\n\t\tcp $(JANET_LIBRARY) '$(DESTDIR)$(LIBDIR)/libjanet.so.$(shell $(JANET_TARGET) -e '(print janet/version)')' ; \\\n\t\tln -sf $(SONAME) '$(DESTDIR)$(LIBDIR)/libjanet.so' ; \\\n\t\tln -sf libjanet.so.$(shell $(JANET_TARGET) -e '(print janet/version)') $(DESTDIR)$(LIBDIR)/$(SONAME) ; \\\n\tfi\n\tcp $(JANET_STATIC_LIBRARY) '$(DESTDIR)$(LIBDIR)/libjanet.a'\n\tmkdir -p '$(DESTDIR)$(JANET_MANPATH)'\n\tcp janet.1 '$(DESTDIR)$(JANET_MANPATH)'\n\tmkdir -p '$(DESTDIR)$(JANET_PKG_CONFIG_PATH)'\n\tcp build/janet.pc '$(DESTDIR)$(JANET_PKG_CONFIG_PATH)/janet.pc'\n\tcp '$(JANET_IMPORT_LIB)' '$(DESTDIR)$(LIBDIR)' || echo 'no import lib to install (mingw only)'\n\tcp '$(JANET_LIBRARY_IMPORT_LIB)' '$(DESTDIR)$(LIBDIR)' || echo 'no import lib to install (mingw only)'\n\t[ -z '$(DESTDIR)' ] && $(LDCONFIG) || echo \"You can ignore this error for non-Linux systems or local installs\"\n\ninstall-jpm-git: $(JANET_TARGET)\n\tmkdir -p build\n\trm -rf build/jpm\n\tgit clone --depth=1 --branch='$(JPM_TAG)' https://github.com/janet-lang/jpm.git build/jpm\n\tcd build/jpm && PREFIX='$(PREFIX)' \\\n\t\tDESTDIR=$(DESTDIR) \\\n\t\tJANET_MANPATH='$(JANET_MANPATH)' \\\n\t\tJANET_HEADERPATH='$(INCLUDEDIR)/janet' \\\n\t\tJANET_BINPATH='$(BINDIR)' \\\n\t\tJANET_LIBPATH='$(LIBDIR)' \\\n\t\t$(RUN) ../../$(JANET_TARGET) ./bootstrap.janet\n\ninstall-spork-git: $(JANET_TARGET)\n\tmkdir -p build\n\trm -rf build/spork\n\tgit clone --depth=1 --branch='$(SPORK_TAG)' https://github.com/janet-lang/spork.git build/spork\n\t$(JANET_TARGET) -e '(bundle/install \"build/spork\")'\n\nuninstall:\n\t-rm '$(DESTDIR)$(BINDIR)/janet'\n\t-rm -rf '$(DESTDIR)$(INCLUDEDIR)/janet'\n\t-rm -rf '$(DESTDIR)$(INCLUDEDIR)/janet.h'\n\t-rm -rf '$(DESTDIR)$(LIBDIR)'/libjanet.*\n\t-rm '$(DESTDIR)$(JANET_PKG_CONFIG_PATH)/janet.pc'\n\t-rm '$(DESTDIR)$(JANET_MANPATH)/janet.1'\n\t# -rm -rf '$(DESTDIR)$(JANET_PATH)'/* - err on the side of correctness here\n\n#################\n##### Other #####\n#################\n\nformat:\n\tsh tools/format.sh\n\ngrammar: build/janet.tmLanguage\nbuild/janet.tmLanguage: tools/tm_lang_gen.janet $(JANET_TARGET)\n\t$(RUN) $(JANET_TARGET) $< > $@\n\ncompile-commands:\n\t# Requires pip install compiledb\n\tcompiledb make\n\nclean:\n\t-rm -rf build vgcore.* callgrind.*\n\t-rm -rf test/install/build test/install/modpath\n\ntest-install:\n\techo \"JPM has been removed from default install.\"\n\nhelp:\n\t@echo\n\t@echo 'Janet: A Dynamic Language & Bytecode VM'\n\t@echo\n\t@echo Usage:\n\t@echo '   make            Build Janet'\n\t@echo '   make repl       Start a REPL from a built Janet'\n\t@echo\n\t@echo '   make test       Test a built Janet'\n\t@echo '   make valgrind   Assess Janet with Valgrind'\n\t@echo '   make callgrind  Assess Janet with Valgrind, using Callgrind'\n\t@echo '   make valtest    Run the test suite with Valgrind to check for memory leaks'\n\t@echo '   make dist       Create a distribution tarball'\n\t@echo '   make docs       Generate documentation'\n\t@echo '   make debug      Run janet with GDB or LLDB'\n\t@echo '   make install    Install into the current filesystem'\n\t@echo '   make uninstall  Uninstall from the current filesystem'\n\t@echo '   make clean      Clean intermediate build artifacts'\n\t@echo \"   make format     Format Janet's own source files\"\n\t@echo '   make grammar    Generate a TextMate language grammar'\n\t@echo\n\n.PHONY: clean install repl debug valgrind test \\\n\tvaltest dist uninstall docs grammar format help compile-commands\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.7333984375,
          "content": "[![Join the chat](https://img.shields.io/badge/zulip-join_chat-brightgreen.svg)](https://janet.zulipchat.com)\n&nbsp;\n[![builds.sr.ht status](https://builds.sr.ht/~bakpakin/janet/commits/master/freebsd.yml.svg)](https://builds.sr.ht/~bakpakin/janet/commits/master/freebsd.yml?)\n[![builds.sr.ht status](https://builds.sr.ht/~bakpakin/janet/commits/master/openbsd.yml.svg)](https://builds.sr.ht/~bakpakin/janet/commits/master/openbsd.yml?)\n[![Actions Status](https://github.com/janet-lang/janet/actions/workflows/test.yml/badge.svg)](https://github.com/janet-lang/janet/actions/workflows/test.yml)\n\n<img src=\"https://raw.githubusercontent.com/janet-lang/janet/master/assets/janet-w200.png\" alt=\"Janet logo\" width=200 align=\"left\">\n\n**Janet** is a programming language for system scripting, expressive automation, and\nextending programs written in C or C++ with user scripting capabilities.\n\nJanet makes a good system scripting language, or a language to embed in other programs.\nIt's like Lua and GNU Guile in that regard. It has more built-in functionality and a richer core language than\nLua, but smaller than GNU Guile or Python. However, it is much easier to embed and port than Python or Guile.\n\nThere is a REPL for trying out the language, as well as the ability\nto run script files. This client program is separate from the core runtime, so\nJanet can be embedded in other programs. Try Janet in your browser at\n<https://janet-lang.org>.\n\n<br>\n\n## Examples\n\nSee the examples directory for all provided example programs.\n\n### Game of Life\n\n```janet\n# John Conway's Game of Life\n\n(def- window\n  (seq [x :range [-1 2]\n         y :range [-1 2]\n         :when (not (and (zero? x) (zero? y)))]\n       [x y]))\n\n(defn- neighbors\n  [[x y]]\n  (map (fn [[x1 y1]] [(+ x x1) (+ y y1)]) window))\n\n(defn tick\n  \"Get the next state in the Game Of Life.\"\n  [state]\n  (def cell-set (frequencies state))\n  (def neighbor-set (frequencies (mapcat neighbors state)))\n  (seq [coord :keys neighbor-set\n         :let [count (get neighbor-set coord)]\n         :when (or (= count 3) (and (get cell-set coord) (= count 2)))]\n      coord))\n\n(defn draw\n  \"Draw cells in the game of life from (x1, y1) to (x2, y2)\"\n  [state x1 y1 x2 y2]\n  (def cellset @{})\n  (each cell state (put cellset cell true))\n  (loop [x :range [x1 (+ 1 x2)]\n         :after (print)\n         y :range [y1 (+ 1 y2)]]\n    (file/write stdout (if (get cellset [x y]) \"X \" \". \")))\n  (print))\n\n# Print the first 20 generations of a glider\n(var *state* '[(0 0) (-1 0) (1 0) (1 1) (0 2)])\n(for i 0 20\n  (print \"generation \" i)\n  (draw *state* -7 -7 7 7)\n  (set *state* (tick *state*)))\n```\n\n### TCP Echo Server\n\n```janet\n# A simple TCP echo server using the built-in socket networking and event loop.\n\n(defn handler\n  \"Simple handler for connections.\"\n  [stream]\n  (defer (:close stream)\n    (def id (gensym))\n    (def b @\"\")\n    (print \"Connection \" id \"!\")\n    (while (:read stream 1024 b)\n      (printf \" %v -> %v\" id b)\n      (:write stream b)\n      (buffer/clear b))\n    (printf \"Done %v!\" id)\n    (ev/sleep 0.5)))\n\n(net/server \"127.0.0.1\" \"8000\" handler)\n```\n\n### Windows FFI Hello, World!\n\n```janet\n# Use the FFI to popup a Windows message box - no C required\n\n(ffi/context \"user32.dll\")\n\n(ffi/defbind MessageBoxA :int\n  [w :ptr text :string cap :string typ :int])\n\n(MessageBoxA nil \"Hello, World!\" \"Test\" 0)\n```\n\n## Language Features\n\n* 600+ functions and macros in the core library\n* Built-in socket networking, threading, subprocesses, and file system functions.\n* Parsing Expression Grammars (PEG) engine as a more robust Regex alternative\n* Macros and compile-time computation\n* Per-thread event loop for efficient IO (epoll/IOCP/kqueue)\n* First-class green threads (continuations) as well as OS threads\n* Erlang-style supervision trees that integrate with the event loop\n* First-class closures\n* Garbage collection\n* Distributed as janet.c and janet.h for embedding into a larger program.\n* Python-style generators (implemented as a plain macro)\n* Mutable and immutable arrays (array/tuple)\n* Mutable and immutable hashtables (table/struct)\n* Mutable and immutable strings (buffer/string)\n* Tail recursion\n* Interface with C functions and dynamically load plugins (\"natives\").\n* Built-in C FFI for when the native bindings are too much work\n* REPL development with debugger and inspectable runtime\n\n## Documentation\n\n* For a quick tutorial, see [the introduction](https://janet-lang.org/docs/index.html) for more details.\n* For the full API for all functions in the core library, see [the core API doc](https://janet-lang.org/api/index.html).\n\nDocumentation is also available locally in the REPL.\nUse the `(doc symbol-name)` macro to get API\ndocumentation for symbols in the core library. For example,\n```\n(doc apply)\n```\nshows documentation for the `apply` function.\n\nTo get a list of all bindings in the default\nenvironment, use the `(all-bindings)` function. You\ncan also use the `(doc)` macro with no arguments if you are in the REPL\nto show bound symbols.\n\n## Source\n\nYou can get the source on [GitHub](https://github.com/janet-lang/janet) or\n[SourceHut](https://git.sr.ht/~bakpakin/janet). While the GitHub repo is the official repo,\nthe SourceHut mirror is actively maintained.\n\n## Building\n\n### macOS and Unix-like\n\nThe Makefile is non-portable and requires GNU-flavored make.\n\n```sh\ncd somewhere/my/projects/janet\nmake\nmake test\nmake repl\nmake install\nmake install-jpm-git\n```\n\nFind out more about the available make targets by running `make help`.\n\n### 32-bit Haiku\n\n32-bit Haiku build instructions are the same as the UNIX-like build instructions,\nbut you need to specify an alternative compiler, such as `gcc-x86`.\n\n```sh\ncd somewhere/my/projects/janet\nmake CC=gcc-x86\nmake test\nmake repl\nmake install\nmake install-jpm-git\n```\n\n### FreeBSD\n\nFreeBSD build instructions are the same as the UNIX-like build instructions,\nbut you need `gmake` to compile. Alternatively, install the package directly with `pkg install lang/janet`.\n\n```sh\ncd somewhere/my/projects/janet\ngmake\ngmake test\ngmake repl\ngmake install\ngmake install-jpm-git\n```\n\n### NetBSD\n\nNetBSD build instructions are the same as the FreeBSD build instructions.\nAlternatively, install the package directly with `pkgin install janet`.\n\n### Windows\n\n1. Install [Visual Studio](https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=Community&rel=15#) or [Visual Studio Build Tools](https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&rel=15#).\n2. Run a Visual Studio Command Prompt (`cl.exe` and `link.exe` need to be on your PATH) and `cd` to the directory with Janet.\n3. Run `build_win` to compile Janet.\n4. Run `build_win test` to make sure everything is working.\n\nTo build an `.msi` installer executable, in addition to the above steps, you will have to:\n\n5. Install, or otherwise add to your PATH the [WiX 3.14 Toolset](https://github.com/wixtoolset/wix3/releases).\n6. Run `build_win dist`.\n\nNow you should have an `.msi`. You can run `build_win install` to install the `.msi`, or execute the file itself.\n\n### Meson\n\nJanet also has a build file for [Meson](https://mesonbuild.com/), a cross-platform build\nsystem. Although Meson has a Python dependency, Meson is a very complete build system that\nis maybe more convenient and flexible for integrating into existing pipelines.\nMeson also provides much better IDE integration than Make or batch files, as well as support\nfor cross-compilation.\n\nFor the impatient, building with Meson is as follows. The options provided to\n`meson setup` below emulate Janet's Makefile.\n\n```sh\ngit clone https://github.com/janet-lang/janet.git\ncd janet\nmeson setup build \\\n          --buildtype release \\\n          --optimization 2 \\\n          --libdir /usr/local/lib \\\n          -Dgit_hash=$(git log --pretty=format:'%h' -n 1)\nninja -C build\n\n# Run the binary\nbuild/janet\n\n# Installation\nninja -C build install\n```\n\n## Development\n\nJanet can be hacked on with pretty much any environment you like, but for IDE\nlovers, [Gnome Builder](https://wiki.gnome.org/Apps/Builder) is probably the\nbest option, as it has excellent Meson integration. It also offers code completion\nfor Janet's C API right out of the box, which is very useful for exploring. VSCode, Vim,\nEmacs, and Atom each have syntax packages for the Janet language, though.\n\n## Installation\n\nIf you just want to try out the language, you don't need to install anything.\nIn this case you can also move the `janet` executable wherever you want on\nyour system and run it.  However, for a fuller setup, please see the\n[Introduction](https://janet-lang.org/docs/index.html) for more details.\n\n## Usage\n\nA REPL is launched when the binary is invoked with no arguments. Pass the `-h` flag\nto display the usage information. Individual scripts can be run with `./janet myscript.janet`.\n\nIf you are looking to explore, you can print a list of all available macros, functions, and constants\nby entering the command `(all-bindings)` into the REPL.\n\n```\n$ janet\nJanet 1.7.1-dev-951e10f  Copyright (C) 2017-2020 Calvin Rose\njanet:1:> (+ 1 2 3)\n6\njanet:2:> (print \"Hello, World!\")\nHello, World!\nnil\njanet:3:> (os/exit)\n$ janet -h\nusage: janet [options] script args...\nOptions are:\n  -h : Show this help\n  -v : Print the version string\n  -s : Use raw stdin instead of getline like functionality\n  -e code : Execute a string of janet\n  -E code arguments... : Evaluate an expression as a short-fn with arguments\n  -d : Set the debug flag in the REPL\n  -r : Enter the REPL after running all scripts\n  -R : Disables loading profile.janet when JANET_PROFILE is present\n  -p : Keep on executing if there is a top-level error (persistent)\n  -q : Hide logo (quiet)\n  -k : Compile scripts but do not execute (flycheck)\n  -m syspath : Set system path for loading global modules\n  -c source output : Compile janet source code into an image\n  -i : Load the script argument as an image file instead of source code\n  -n : Disable ANSI color output in the REPL\n  -l lib : Use a module before processing more arguments\n  -w level : Set the lint warning level - default is \"normal\"\n  -x level : Set the lint error level - default is \"none\"\n  -- : Stop handling options\n```\n\nIf installed, you can also run `man janet` to get usage information.\n\n## Embedding\n\nJanet can be embedded in a host program very easily. The normal build\nwill create a file `build/janet.c`, which is a single C file\nthat contains all the source to Janet. This file, along with\n`src/include/janet.h` and `src/conf/janetconf.h`, can be dragged into any C\nproject and compiled into it. Janet should be compiled with `-std=c99`\non most compilers, and will need to be linked to the math library, `-lm`, and\nthe dynamic linker, `-ldl`, if one wants to be able to load dynamic modules. If\nthere is no need for dynamic modules, add the define\n`-DJANET_NO_DYNAMIC_MODULES` to the compiler options.\n\nSee the [Embedding Section](https://janet-lang.org/capi/embedding.html) on the website for more information.\n\n## Discussion\n\nFeel free to ask questions and join the discussion on the [Janet Zulip Instance](https://janet.zulipchat.com/)\n\n## FAQ\n\n### How fast is it?\n\nIt is about the same speed as most interpreted languages without a JIT compiler. Tight, critical\nloops should probably be written in C or C++ . Programs tend to be a bit faster than\nthey would be in a language like Python due to the discouragement of slow Object-Oriented abstraction\nwith lots of hash-table lookups, and making late-binding explicit. All values are boxed in an 8-byte\nrepresentation by default and allocated on the heap, with the exception of numbers, nils and booleans. The\nPEG engine is a specialized interpreter that can efficiently process string and buffer data.\n\nThe GC is simple and stop-the-world, but GC knobs are exposed in the core library and separate threads\nhave isolated heaps and garbage collectors. Data that is shared between threads is reference counted.\n\nYMMV.\n\n### Where is (favorite feature from other language)?\n\nIt may exist, it may not. If you want to propose a major language feature, go ahead and open an issue, but\nit will likely be closed as \"will not implement\". Often, such features make one usecase simpler at the expense\nof 5 others by making the language more complicated.\n\n### Is there a language spec?\n\nThere is not currently a spec besides the documentation at <https://janet-lang.org>.\n\n### Is this Scheme/Common Lisp? Where are the cons cells?\n\nNope. There are no cons cells here.\n\n### Is this a Clojure port?\n\nNo. It's similar to Clojure superficially because I like Lisps and I like the aesthetics.\nInternally, Janet is not at all like Clojure, Scheme, or Common Lisp.\n\n### Are the immutable data structures (tuples and structs) implemented as hash tries?\n\nNo. They are immutable arrays and hash tables. Don't try and use them like Clojure's vectors\nand maps, instead they work well as table keys or other identifiers.\n\n### Can I do object-oriented programming with Janet?\n\nTo some extent, yes. However, it is not the recommended method of abstraction, and performance may suffer.\nThat said, tables can be used to make mutable objects with inheritance and polymorphism, where object\nmethods are implemented with keywords.\n\n```clj\n(def Car @{:honk (fn [self msg] (print \"car \" self \" goes \" msg)) })\n(def my-car (table/setproto @{} Car))\n(:honk my-car \"Beep!\")\n```\n\n### Why can't we add (feature from Clojure) into the core?\n\nUsually, one of a few reasons:\n- Often, it already exists in a different form and the Clojure port would be redundant.\n- Clojure programs often generate a lot of garbage and rely on the JVM to clean it up.\n  Janet does not run on the JVM and has a more primitive garbage collector.\n- We want to keep the Janet core small. With Lisps, a feature can usually be added as a library\n  without feeling \"bolted on\", especially when compared to ALGOL-like languages. Adding features\n  to the core also makes it a bit more difficult to keep Janet maximally portable.\n\n### Can I bind to Rust/Zig/Go/Java/Nim/C++/D/Pascal/Fortran/Odin/Jai/(Some new \"Systems\" Programming Language)?\n\nProbably, if that language has a good interface with C. But the programmer may need to do\nsome extra work to map Janet's internal memory model to that of the bound language. Janet\nalso uses `setjmp`/`longjmp` for non-local returns internally. This\napproach is out of favor with many programmers now and doesn't always play well with other languages\nthat have exceptions or stack-unwinding.\n\n### Why is my terminal spitting out junk when I run the REPL?\n\nMake sure your terminal supports ANSI escape codes. Most modern terminals will\nsupport these, but some older terminals, Windows consoles, or embedded terminals\nwill not. If your terminal does not support ANSI escape codes, run the REPL with\nthe `-n` flag, which disables color output. You can also try the `-s` flag if further issues\nensue.\n\n## Why is it called \"Janet\"?\n\nJanet is named after the almost omniscient and friendly artificial being in [The Good Place](https://en.wikipedia.org/wiki/The_Good_Place).\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "build_win.bat",
          "type": "blob",
          "size": 5.2275390625,
          "content": "@rem Build janet on windows\n@rem\n@rem Open a \"Windows SDK Command Shell\" and cd to the janet directory\n@rem Then run this script with no arguments to build the executable\n\n@echo off\n\n@rem Ensure correct command prompt\n@if not defined INCLUDE goto :BADCMD\n\n@rem Sub commands\n@if \"%1\"==\"help\" goto HELP\n@if \"%1\"==\"clean\" goto CLEAN\n@if \"%1\"==\"test\" goto TEST\n@if \"%1\"==\"dist\" goto DIST\n@if \"%1\"==\"install\" goto INSTALL\n@if \"%1\"==\"all\" goto ALL\n\n@rem Set compile and link options here\n@setlocal\n\n@rem Example use asan\n@rem set JANET_COMPILE=cl /nologo /Isrc\\include /Isrc\\conf /c /O2 /W3 /D_CRT_SECURE_NO_WARNINGS /MD /fsanitize=address /Zi\n@rem set JANET_LINK=link /nologo clang_rt.asan_dynamic-x86_64.lib clang_rt.asan_dynamic_runtime_thunk-x86_64.lib\n\n@set JANET_COMPILE=cl /nologo /Isrc\\include /Isrc\\conf /c /O2 /W3 /D_CRT_SECURE_NO_WARNINGS /MD\n@set JANET_LINK=link /nologo\n\n@set JANET_LINK_STATIC=lib /nologo\n\n@rem Add janet build tag\nif not \"%JANET_BUILD%\" == \"\" (\n    @set JANET_COMPILE=%JANET_COMPILE% /DJANET_BUILD=\"\\\"%JANET_BUILD%\\\"\"\n)\n\nif not exist build mkdir build\nif not exist build\\core mkdir build\\core\nif not exist build\\c mkdir build\\c\nif not exist build\\boot mkdir build\\boot\n\n@rem Build the bootstrap interpreter\nfor %%f in (src\\core\\*.c) do (\n    %JANET_COMPILE% /DJANET_BOOTSTRAP /Fobuild\\boot\\%%~nf.obj %%f\n    @if not errorlevel 0 goto :BUILDFAIL\n)\nfor %%f in (src\\boot\\*.c) do (\n    %JANET_COMPILE% /DJANET_BOOTSTRAP /Fobuild\\boot\\%%~nf.obj %%f\n    @if not errorlevel 0 goto :BUILDFAIL\n)\n%JANET_LINK% /out:build\\janet_boot.exe build\\boot\\*.obj\n@if not errorlevel 0 goto :BUILDFAIL\nbuild\\janet_boot . > build\\c\\janet.c\n@if not errorlevel 0 goto :BUILDFAIL\n\n@rem Build the sources\n%JANET_COMPILE% /Fobuild\\janet.obj build\\c\\janet.c\n@if not errorlevel 0 goto :BUILDFAIL\n%JANET_COMPILE% /Fobuild\\shell.obj src\\mainclient\\shell.c\n@if not errorlevel 0 goto :BUILDFAIL\n\n@rem Build the resources\nrc /nologo /fobuild\\janet_win.res janet_win.rc\n@if not errorlevel 0 goto :BUILDFAIL\n\n@rem Link everything to main client\n%JANET_LINK% /out:janet.exe build\\janet.obj build\\shell.obj build\\janet_win.res\n@if not errorlevel 0 goto :BUILDFAIL\n\n@rem Build static library (libjanet.lib)\n%JANET_LINK_STATIC% /out:build\\libjanet.lib build\\janet.obj\n@if not errorlevel 0 goto :BUILDFAIL\n\necho === Successfully built janet.exe for Windows ===\necho === Run 'build_win test' to run tests. ==\necho === Run 'build_win clean' to delete build artifacts. ===\nexit /b 0\n\n@rem Not using correct command line\n:BADCMD\n@echo You must open a \"Visual Studio .NET Command Prompt\" to run this script\nexit /b 1\n\n@rem Show help\n:HELP\n@echo.\n@echo Usage: build_windows [subcommand=clean,help,test,dist]\n@echo.\n@echo Script to build janet on windows. Must be run from the Visual Studio\n@echo command prompt.\nexit /b 0\n\n@rem Clean build artifacts\n:CLEAN\ndel *.exe *.lib *.exp *.msi *.wixpdb\nrd /s /q build\nif exist dist (\n    rd /s /q dist\n)\nexit /b 0\n\n@rem Run tests\n:TEST\nfor %%f in (test/suite*.janet) do (\n    janet.exe test\\%%f\n    @if not errorlevel 0 goto TESTFAIL\n)\nexit /b 0\n\n@rem Build a dist directory\n:DIST\nmkdir dist\njanet.exe tools\\gendoc.janet > dist\\doc.html\njanet.exe tools\\removecr.janet dist\\doc.html\njanet.exe tools\\removecr.janet build\\c\\janet.c\n\ncopy build\\c\\janet.c dist\\janet.c\ncopy src\\mainclient\\shell.c dist\\shell.c\ncopy janet.exe dist\\janet.exe\ncopy LICENSE dist\\LICENSE\ncopy README.md dist\\README.md\n\ncopy janet.lib dist\\janet.lib\ncopy janet.exp dist\\janet.exp\n\njanet.exe tools\\patch-header.janet src\\include\\janet.h src\\conf\\janetconf.h build\\janet.h\ncopy build\\janet.h dist\\janet.h\ncopy build\\libjanet.lib dist\\libjanet.lib\n\n@rem Create installer\njanet.exe -e \"(->> janet/version (peg/match ''(* :d+ `.` :d+ `.` :d+)) first print)\" > build\\version.txt\njanet.exe -e \"(print (os/arch))\" > build\\arch.txt\nset /p JANET_VERSION= < build\\version.txt\nset /p BUILDARCH= < build\\arch.txt\necho \"JANET_VERSION is %JANET_VERSION%\"\nif defined APPVEYOR_REPO_TAG_NAME (\n    set RELEASE_VERSION=%APPVEYOR_REPO_TAG_NAME%\n) else (\n    set RELEASE_VERSION=%JANET_VERSION%\n)\nif defined CI (\n    set WIXBIN=\"%WIX%bin\\\"\n    echo WIXBIN = %WIXBIN%\n) else (\n    set WIXBIN=\n)\n\nset WIXARCH=%BUILDARCH%\nif \"%WIXARCH%\"==\"aarch64\" (\n    set WIXARCH=arm64\n)\n\n%WIXBIN%candle.exe tools\\msi\\janet.wxs -arch %WIXARCH% -out build\\\n%WIXBIN%light.exe \"-sice:ICE38\" -b tools\\msi -ext WixUIExtension build\\janet.wixobj -out janet-%RELEASE_VERSION%-windows-%BUILDARCH%-installer.msi\nexit /b 0\n\n@rem Run the installer. (Installs to the local user with default settings)\n:INSTALL\nFOR %%a in (janet-*-windows-*-installer.msi) DO (\n    @echo Running Installer %%a...\n    %%a /QN\n)\nexit /b 0\n\n@rem build, test, dist, install. Useful for local dev.\n:ALL\ncall %0 build\n@if errorlevel 1 exit /b 1\ncall %0 test\n@if errorlevel 1 exit /b 1\ncall %0 dist\n@if errorlevel 1 exit /b 1\ncall %0 install\n@if errorlevel 1 exit /b 1\n@echo Done!\nexit /b 0\n\n:TESTFAIL\n@echo.\n@echo *******************************************************\n@echo *** Tests FAILED -- Please check the error messages ***\n@echo *******************************************************\nexit /b 1\n\n@rem Build failed\n:BUILDFAIL\n@echo.\n@echo *******************************************************\n@echo *** Build FAILED -- Please check the error messages ***\n@echo *******************************************************\nexit /b 1\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "janet.1",
          "type": "blob",
          "size": 7.908203125,
          "content": ".TH JANET 1\n.SH NAME\njanet \\- run the Janet language abstract machine\n.SH SYNOPSIS\n.B janet\n[\\fB\\-hvsrpnqik\\fR]\n[\\fB\\-e\\fR \\fISOURCE\\fR]\n[\\fB\\-E\\fR \\fISOURCE ...ARGUMENTS\\fR]\n[\\fB\\-l\\fR \\fIMODULE\\fR]\n[\\fB\\-m\\fR \\fIPATH\\fR]\n[\\fB\\-c\\fR \\fIMODULE JIMAGE\\fR]\n[\\fB\\-w\\fR \\fILEVEL\\fR]\n[\\fB\\-x\\fR \\fILEVEL\\fR]\n[\\fB\\-\\-\\fR]\n.BR script\n.BR args ...\n.SH DESCRIPTION\nJanet is a functional and imperative programming language and bytecode interpreter.\nIt is a Lisp-like language, but lists are replaced by other data structures\n(arrays, tables, structs, tuples). The language also features bridging\nto native code written in C, meta-programming with macros, and bytecode assembly.\n\nThere is a repl for trying out the language, as well as the ability to run script files.\nThis client program is separate from the core runtime, so Janet could be embedded\ninto other programs. Try Janet in your browser at https://janet-lang.org.\n\nImplemented in mostly standard C99, Janet runs on Windows, Linux and macOS.\nThe few features that are not standard C99 (dynamic library loading, compiler\nspecific optimizations), are fairly straight forward. Janet can be easily ported to\nmost new platforms.\n\n.SH REPL KEY-BINDINGS\n\n.TP 16\n.BR Home\nMove cursor to the beginning of input line.\n\n.TP 16\n.BR End\nMove cursor to the end of input line.\n\n.TP 16\n.BR Left/Right\nMove cursor in input line.\n\n.TP 16\n.BR Up/Down\nGo backwards and forwards through history.\n\n.TP 16\n.BR Tab\nComplete current symbol, or show available completions.\n\n.TP 16\n.BR Delete\nDelete one character after the cursor.\n\n.TP 16\n.BR Backspace\nDelete one character before the cursor.\n\n.TP 16\n.BR Ctrl\\-A\nMove cursor to the beginning of input line.\n\n.TP 16\n.BR Ctrl\\-B\nMove cursor one character to the left.\n\n.TP 16\n.BR Ctrl\\-D\nIf on a newline, indicate end of stream and exit the repl.\n\n.TP 16\n.BR Ctrl\\-E\nMove cursor to the end of input line.\n\n.TP 16\n.BR Ctrl\\-F\nMove cursor one character to the right.\n\n.TP 16\n.BR Ctrl\\-H\nDelete one character before the cursor.\n\n.TP 16\n.BR Ctrl\\-K\nDelete everything after the cursor on the input line.\n\n.TP 16\n.BR Ctrl\\-L\nClear the screen.\n\n.TP 16\n.BR Ctrl\\-N/Ctrl\\-P\nGo forwards and backwards through history.\n\n.TP 16\n.BR Ctrl\\-U\nDelete everything before the cursor on the input line.\n\n.TP 16\n.BR Ctrl\\-W\nDelete one word before the cursor.\n\n.TP 16\n.BR Ctrl\\-G\nShow documentation for the current symbol under the cursor.\n\n.TP 16\n.BR Ctrl\\-Q\nClear the current command, including already typed lines.\n\n.TP 16\n.BR Alt\\-B/Alt\\-F\nMove cursor backwards and forwards one word.\n\n.TP 16\n.BR Alt\\-D\nDelete one word after the cursor.\n\n.TP 16\n.BR Alt\\-,\nGo to earliest item in history.\n\n.TP 16\n.BR Alt\\-.\nGo to last item in history.\n\n.LP\n\nThe repl keybindings are loosely based on a subset of GNU readline, although\nJanet does not use GNU readline internally for the repl. It is a limited\nsubstitute for GNU readline, and does not handle\nutf-8 input or other mutlibyte input well.\n\nTo disable the built-in repl input handling, pass the \\fB\\-s\\fR option to Janet, and\nuse a program like rlwrap with Janet to provide input.\n\nFor key bindings that operate on words, a word is considered to be a sequence\nof characters that does not contain whitespace.\n\n.SH DOCUMENTATION\n\nFor more complete API documentation, run a REPL (Read Eval Print Loop), and use the doc macro to\nsee documentation on individual bindings.\n\n.SH OPTIONS\n.TP\n.BR \\-h\nShows the usage text and exits immediately.\n\n.TP\n.BR \\-v\nShows the version text and exits immediately.\n\n.TP\n.BR \\-s\nRead raw input from stdin and forgo prompt history and other readline-like features.\n\n.TP\n.BR \\-e\\ code\nExecute a string of Janet source. Source code is executed in the order it is encountered, so earlier\narguments are executed before later ones.\n\n.TP\n.BR \\-E\\ code\\ arguments...\nExecute a single Janet expression as a Janet short-fn, passing the remaining command line arguments to the expression. This allows\nmore concise one-liners with command line arguments.\n\nExample: janet -E '(print $0)' 12 is equivalent to '((short-fn (print $0)) 12)', which is in turn equivalent to\n`((fn [k] (print k)) 12)`\n\nSee docs for the `short-fn` function for more details.\n\n.TP\n.BR \\-d\nEnable debug mode. On all terminating signals as well the debug signal, this will\ncause the debugger to come up in the REPL. Same as calling (setdyn :debug true) in a\ndefault repl.\n\n.TP\n.BR \\-n\nDisable ANSI colors in the repl. Has no effect if no repl is run.\n\n.TP\n.BR \\-N\nEnable ANSI colors in the repl. Has no effect if no repl is run.\n\n.TP\n.BR \\-r\nOpen a REPL (Read Eval Print Loop) after executing all sources. By default, if Janet is called with no\narguments, a REPL is opened.\n\n.TP\n.BR \\-R\nIf using the REPL, disable loading the user profile from the JANET_PROFILE environment variable.\n\n.TP\n.BR \\-p\nTurn on the persistent flag. By default, when Janet is executing commands from a file and encounters an error,\nit will immediately exit after printing the error message. In persistent mode, Janet will keep executing commands\nafter an error. Persistent mode can be good for debugging and testing.\n\n.TP\n.BR \\-q\nHide the logo in the repl.\n\n.TP\n.BR \\-k\nDon't execute a script, only compile it to check for errors. Useful for linting scripts.\n\n.TP\n.BR \\-m\\ syspath\nSet the dynamic binding :syspath to the string syspath so that Janet will load system modules\nfrom a directory different than the default. The default is set when Janet is built, and defaults to\n/usr/local/lib/janet on Linux/Posix, and C:/Janet/Library on Windows. This option supersedes JANET_PATH.\n\n.TP\n.BR \\-c\\ source\\ output\nPrecompiles Janet source code into an image, a binary dump that can be efficiently loaded later.\nSource should be a path to the Janet module to compile, and output should be the file path of\nresulting image. Output should usually end with the .jimage extension.\n\n.TP\n.BR \\-i\nWhen this flag is passed, a script passed to the interpreter will be treated as a janet image file\nrather than a janet source file.\n\n.TP\n.BR \\-l\\ lib\nImport a Janet module before running a script or repl. Multiple files can be loaded\nin this manner, and exports from each file will be made available to the script\nor repl.\n.TP\n.BR \\-w\\ level\nSet the warning linting level for Janet.\nThis linting level should be one of :relaxed, :none, :strict, :normal, or a\nJanet number. Any linting message that is of a greater lint level than this setting will be displayed as\na warning, but not stop compilation or execution.\n.TP\n.BR \\-x\\ level\nSet the error linting level for Janet.\nThis linting level should be one of :relaxed, :none, :strict, :normal, or a\nJanet number. Any linting message that is of a greater lint level will cause a compilation error\nand stop compilation.\n.TP\n.BR \\-\\-\nStop parsing command line arguments. All arguments after this one will be considered file names\nand then arguments to the script.\n\n.SH ENVIRONMENT\n\n.B JANET_PATH\n.RS\nThe location to look for Janet libraries. This is the only environment variable Janet needs to\nfind native and source code modules. If no JANET_PATH is set, Janet will look in\nthe default location set at compile time. This should be a list of as well as a colon\nseparate list of such directories.\n.RE\n\n.B JANET_PROFILE\n.RS\nPath to a profile file that the interpreter will load before entering the REPL. This profile file will\nnot run for scripts, though. This behavior can be disabled with the -R option.\n.RE\n\n.B JANET_HASHSEED\n.RS\nTo disable randomization of Janet's PRF on start up, one can set this variable. This can have the\neffect of making programs deterministic that otherwise would depend on the random seed chosen at program start.\nThis variable does nothing in the default configuration of Janet, as PRF is disabled by default. Also, JANET_REDUCED_OS\ncannot be defined for this variable to have an effect.\n.RE\n\n.B NO_COLOR\n.RS\nTurn off color by default in the repl and in the error handler of scripts. This can be changed at runtime\nvia dynamic bindings *err-color* and *pretty-format*, or via the command line parameters -n and -N.\n.RE\n\n.SH AUTHOR\nWritten by Calvin Rose <calsrose@gmail.com>\n"
        },
        {
          "name": "janet_win.rc",
          "type": "blob",
          "size": 0.0322265625,
          "content": "IDI_MYICON ICON \"assets\\icon.ico\""
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 10.724609375,
          "content": "# Copyright (c) 2024 Calvin Rose and contributors\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to\n# deal in the Software without restriction, including without limitation the\n# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n# sell copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n# IN THE SOFTWARE.\n\nproject('janet', 'c',\n  default_options : ['c_std=c99', 'build.c_std=c99', 'b_lundef=false', 'default_library=both'],\n  version : '1.37.1')\n\n# Global settings\njanet_path = join_paths(get_option('prefix'), get_option('libdir'), 'janet')\nheader_path = join_paths(get_option('prefix'), get_option('includedir'), 'janet')\n\n# Compilers\ncc = meson.get_compiler('c')\nnative_cc = meson.get_compiler('c', native : true)\n\n# Native deps\nnative_m_dep = native_cc.find_library('m', required : false)\nnative_dl_dep = native_cc.find_library('dl', required : false)\nnative_android_spawn_dep = native_cc.find_library('android-spawn', required : false)\nnative_thread_dep = dependency('threads', native : true)\n\n# Deps\nm_dep = cc.find_library('m', required : false)\ndl_dep = cc.find_library('dl', required : false)\nandroid_spawn_dep = cc.find_library('android-spawn', required : false)\nthread_dep = dependency('threads')\n\n# Link options\nif get_option('default_library') != 'static' and build_machine.system() != 'windows'\n    add_project_link_arguments('-rdynamic', language : 'c')\nendif\n\n# Generate custom janetconf.h\nconf = configuration_data()\nversion_parts = meson.project_version().split('.')\nlast_parts = version_parts[2].split('-')\nif last_parts.length() > 1\n  conf.set_quoted('JANET_VERSION_EXTRA', '-' + last_parts[1])\nelse\n  conf.set_quoted('JANET_VERSION_EXTRA', '')\nendif\nconf.set('JANET_VERSION_MAJOR', version_parts[0].to_int())\nconf.set('JANET_VERSION_MINOR', version_parts[1].to_int())\nconf.set('JANET_VERSION_PATCH', last_parts[0].to_int())\nconf.set_quoted('JANET_VERSION', meson.project_version())\n# Use options\nconf.set_quoted('JANET_BUILD', get_option('git_hash'))\nconf.set('JANET_NO_NANBOX', not get_option('nanbox'))\nconf.set('JANET_SINGLE_THREADED', get_option('single_threaded'))\nconf.set('JANET_NO_DYNAMIC_MODULES', not get_option('dynamic_modules'))\nconf.set('JANET_NO_DOCSTRINGS', not get_option('docstrings'))\nconf.set('JANET_NO_SOURCEMAPS', not get_option('sourcemaps'))\nconf.set('JANET_NO_ASSEMBLER', not get_option('assembler'))\nconf.set('JANET_NO_PEG', not get_option('peg'))\nconf.set('JANET_NO_NET', not get_option('net'))\nconf.set('JANET_NO_IPV6', not get_option('ipv6'))\nconf.set('JANET_NO_EV', not get_option('ev') or get_option('single_threaded'))\nconf.set('JANET_REDUCED_OS', get_option('reduced_os'))\nconf.set('JANET_NO_INT_TYPES', not get_option('int_types'))\nconf.set('JANET_PRF', get_option('prf'))\nconf.set('JANET_RECURSION_GUARD', get_option('recursion_guard'))\nconf.set('JANET_MAX_PROTO_DEPTH', get_option('max_proto_depth'))\nconf.set('JANET_MAX_MACRO_EXPAND', get_option('max_macro_expand'))\nconf.set('JANET_STACK_MAX', get_option('stack_max'))\nconf.set('JANET_NO_UMASK', not get_option('umask'))\nconf.set('JANET_NO_REALPATH', not get_option('realpath'))\nconf.set('JANET_NO_PROCESSES', not get_option('processes'))\nconf.set('JANET_SIMPLE_GETLINE', get_option('simple_getline'))\nconf.set('JANET_EV_NO_EPOLL', not get_option('epoll'))\nconf.set('JANET_EV_NO_KQUEUE', not get_option('kqueue'))\nconf.set('JANET_NO_INTERPRETER_INTERRUPT', not get_option('interpreter_interrupt'))\nconf.set('JANET_NO_FFI', not get_option('ffi'))\nconf.set('JANET_NO_FFI_JIT', not get_option('ffi_jit'))\nconf.set('JANET_NO_FILEWATCH', not get_option('filewatch'))\nconf.set('JANET_NO_CRYPTORAND', not get_option('cryptorand'))\nif get_option('os_name') != ''\n  conf.set('JANET_OS_NAME', get_option('os_name'))\nendif\nif get_option('arch_name') != ''\n  conf.set('JANET_ARCH_NAME', get_option('arch_name'))\nendif\njconf = configure_file(output : 'janetconf.h',\n  configuration : conf)\n\n# Include directories\nincdir = include_directories(['src/include', '.'])\n\n# Order is important here, as some headers\n# depend on other headers for the amalg target\ncore_headers = [\n  'src/core/features.h',\n  'src/core/util.h',\n  'src/core/state.h',\n  'src/core/gc.h',\n  'src/core/vector.h',\n  'src/core/fiber.h',\n  'src/core/regalloc.h',\n  'src/core/compile.h',\n  'src/core/emit.h',\n  'src/core/symcache.h'\n]\n\ncore_src = [\n  'src/core/abstract.c',\n  'src/core/array.c',\n  'src/core/asm.c',\n  'src/core/buffer.c',\n  'src/core/bytecode.c',\n  'src/core/capi.c',\n  'src/core/cfuns.c',\n  'src/core/compile.c',\n  'src/core/corelib.c',\n  'src/core/debug.c',\n  'src/core/emit.c',\n  'src/core/ev.c',\n  'src/core/ffi.c',\n  'src/core/fiber.c',\n  'src/core/filewatch.c',\n  'src/core/gc.c',\n  'src/core/inttypes.c',\n  'src/core/io.c',\n  'src/core/marsh.c',\n  'src/core/math.c',\n  'src/core/net.c',\n  'src/core/os.c',\n  'src/core/parse.c',\n  'src/core/peg.c',\n  'src/core/pp.c',\n  'src/core/regalloc.c',\n  'src/core/run.c',\n  'src/core/specials.c',\n  'src/core/state.c',\n  'src/core/string.c',\n  'src/core/strtod.c',\n  'src/core/struct.c',\n  'src/core/symcache.c',\n  'src/core/table.c',\n  'src/core/tuple.c',\n  'src/core/util.c',\n  'src/core/value.c',\n  'src/core/vector.c',\n  'src/core/vm.c',\n  'src/core/wrap.c'\n]\n\nboot_src = [\n  'src/boot/array_test.c',\n  'src/boot/boot.c',\n  'src/boot/buffer_test.c',\n  'src/boot/number_test.c',\n  'src/boot/system_test.c',\n  'src/boot/table_test.c',\n]\n\nmainclient_src = [\n  'src/mainclient/shell.c'\n]\n\njanet_dependencies = [m_dep, dl_dep, android_spawn_dep]\njanet_native_dependencies = [native_m_dep, native_dl_dep, native_android_spawn_dep]\nif not get_option('single_threaded')\n  janet_dependencies += thread_dep\n  janet_native_dependencies += native_thread_dep\nendif\n\n# Build boot binary\njanet_boot = executable('janet-boot', core_src, boot_src,\n  include_directories : incdir,\n  c_args : '-DJANET_BOOTSTRAP',\n  dependencies : janet_native_dependencies,\n  native : true)\n\n# Build janet.c\njanetc = custom_target('janetc',\n  input : [janet_boot, 'src/boot/boot.janet'],\n  output : 'janet.c',\n  capture : true,\n  command : [\n    janet_boot, meson.current_source_dir(),\n    'JANET_PATH', janet_path\n  ])\n\n# Allow building with no shared library\nif cc.has_argument('-fvisibility=hidden')\n  lib_cflags = ['-fvisibility=hidden']\nelse\n  lib_cflags = []\nendif\nif get_option('shared')\n  libjanet = library('janet', janetc,\n    include_directories : incdir,\n    dependencies : janet_dependencies,\n    version: meson.project_version(),\n    soversion: version_parts[0] + '.' + version_parts[1],\n    c_args : lib_cflags,\n    install : true)\n# Extra c flags - adding -fvisibility=hidden matches the Makefile and\n# shaves off about 10k on linux x64, likely similar on other platforms.\n  if cc.has_argument('-fvisibility=hidden')\n    extra_cflags = ['-fvisibility=hidden', '-DJANET_DLL_IMPORT']\n  else\n    extra_cflags = ['-DJANET_DLL_IMPORT']\n  endif\n  janet_mainclient = executable('janet', mainclient_src,\n    include_directories : incdir,\n    dependencies : janet_dependencies,\n    link_with: [libjanet],\n    c_args : extra_cflags,\n    install : true)\nelse\n  # No shared library\n  janet_mainclient = executable('janet', mainclient_src, janetc,\n    include_directories : incdir,\n    dependencies : janet_dependencies,\n    c_args : lib_cflags,\n    install : true)\nendif\n\nif meson.is_cross_build()\n  native_cc = meson.get_compiler('c', native: true)\n  if native_cc.has_argument('-fvisibility=hidden')\n    extra_native_cflags = ['-fvisibility=hidden']\n  else\n    extra_native_cflags = []\n  endif\n  janet_nativeclient = executable('janet-native', janetc, mainclient_src,\n    include_directories : incdir,\n    dependencies : janet_native_dependencies,\n    c_args : extra_native_cflags,\n    native : true)\nelse\n  janet_nativeclient = janet_mainclient\nendif\n\n# Documentation\ndocs = custom_target('docs',\n  input : ['tools/gendoc.janet'],\n  output : ['doc.html'],\n  capture : true,\n  command : [janet_nativeclient, '@INPUT@'])\n\n# Tests\ntest_files = [\n  'test/suite-array.janet',\n  'test/suite-asm.janet',\n  'test/suite-boot.janet',\n  'test/suite-buffer.janet',\n  'test/suite-bundle.janet',\n  'test/suite-capi.janet',\n  'test/suite-cfuns.janet',\n  'test/suite-compile.janet',\n  'test/suite-corelib.janet',\n  'test/suite-debug.janet',\n  'test/suite-ev.janet',\n  'test/suite-ffi.janet',\n  'test/suite-filewatch.janet',\n  'test/suite-inttypes.janet',\n  'test/suite-io.janet',\n  'test/suite-marsh.janet',\n  'test/suite-math.janet',\n  'test/suite-os.janet',\n  'test/suite-parse.janet',\n  'test/suite-peg.janet',\n  'test/suite-pp.janet',\n  'test/suite-specials.janet',\n  'test/suite-string.janet',\n  'test/suite-strtod.janet',\n  'test/suite-struct.janet',\n  'test/suite-symcache.janet',\n  'test/suite-table.janet',\n  'test/suite-tuple.janet',\n  'test/suite-unknown.janet',\n  'test/suite-value.janet',\n  'test/suite-vm.janet'\n]\nforeach t : test_files\n  test(t, janet_nativeclient, args : files([t]), workdir : meson.current_source_dir())\nendforeach\n\n# Repl\nrun_target('repl', command : [janet_nativeclient])\n\n# For use as meson subproject (wrap)\nif get_option('shared')\n  janet_dep = declare_dependency(include_directories : incdir,\n    link_with : libjanet)\n# pkgconfig\n  pkg = import('pkgconfig')\n  pkg.generate(libjanet,\n    subdirs: 'janet',\n    description: 'Library for the Janet programming language.')\nendif\n\n# Installation\ninstall_man('janet.1')\ninstall_data(sources : ['tools/.keep'], install_dir : join_paths(get_option('libdir'), 'janet'))\npatched_janet = custom_target('patched-janeth',\n  input : ['tools/patch-header.janet', 'src/include/janet.h', jconf],\n  install : true,\n  install_dir : join_paths(get_option('includedir'), 'janet'),\n  build_by_default : true,\n  output : ['janet_' + meson.project_version() + '.h'],\n  command : [janet_nativeclient, '@INPUT@', '@OUTPUT@'])\n\n# Create a version of the janet.h header that matches what jpm often expects\nif meson.version().version_compare('>=0.61')\n  install_symlink('janet.h', pointing_to: 'janet/janet_' + meson.project_version() + '.h', install_dir: get_option('includedir'))\n  install_symlink('janet.h', pointing_to: 'janet_' + meson.project_version() + '.h', install_dir: join_paths(get_option('includedir'), 'janet'))\nendif\n\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 1.7138671875,
          "content": "option('git_hash', type : 'string', value : 'meson')\n\noption('single_threaded', type : 'boolean', value : false)\noption('nanbox', type : 'boolean', value : true)\noption('dynamic_modules', type : 'boolean', value : true)\noption('docstrings', type : 'boolean', value : true)\noption('sourcemaps', type : 'boolean', value : true)\noption('reduced_os', type : 'boolean', value : false)\noption('assembler', type : 'boolean', value : true)\noption('peg', type : 'boolean', value : true)\noption('int_types', type : 'boolean', value : true)\noption('prf', type : 'boolean', value : false)\noption('net', type : 'boolean', value : true)\noption('ipv6', type : 'boolean', value : true)\noption('ev', type : 'boolean', value : true)\noption('processes', type : 'boolean', value : true)\noption('umask', type : 'boolean', value : true)\noption('realpath', type : 'boolean', value : true)\noption('simple_getline', type : 'boolean', value : false)\noption('epoll', type : 'boolean', value : true)\noption('kqueue', type : 'boolean', value : true)\noption('interpreter_interrupt', type : 'boolean', value : true)\noption('ffi', type : 'boolean', value : true)\noption('ffi_jit', type : 'boolean', value : true)\noption('filewatch', type : 'boolean', value : true)\n\noption('recursion_guard', type : 'integer', min : 10, max : 8000, value : 1024)\noption('max_proto_depth', type : 'integer', min : 10, max : 8000, value : 200)\noption('max_macro_expand', type : 'integer', min : 1, max : 8000, value : 200)\noption('stack_max', type : 'integer', min : 8096, max : 0x7fffffff, value : 0x7fffffff)\n\noption('arch_name', type : 'string', value: '')\noption('os_name', type : 'string', value: '')\noption('shared', type : 'boolean', value: true)\noption('cryptorand', type : 'boolean', value: true)\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}