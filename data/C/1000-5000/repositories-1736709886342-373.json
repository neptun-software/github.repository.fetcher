{
  "metadata": {
    "timestamp": 1736709886342,
    "page": 373,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "htacg/tidy-html5",
      "stars": 2736,
      "defaultBranch": "next",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2080078125,
          "content": "/autom4te.cache/\n/console/.deps/\n/console/.libs/\n/src/.deps/\n/src/.libs/\n*.user\n*.suo\n*.sdf\n/test\n/test/testall.log\n/test/tmp/\n/test/tmp2/\n*~\ntemp*\n*.bak\n.DS_Store\n.idea\n*.old\n/regression_testing/cases/*-results/\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 26.33984375,
          "content": "##############################################################################\n# @file CMakeLists.txt\n# Build executables, static and dylibs, packages, build systems, etc., for\n# HTML Tidy.\n#\n# Read this file or use cmake-gui (Windows) or ccmake (everything else) for\n# guided build.\n#\n# @author  Geoff McLane [ubuntu@geoffair.info]\n# @author  HTACG, et al (consult git log)\n#\n# @copyright\n#          Copyright (c) 1998-2017 HTACG\n# @copyright\n#          See tidy.h for license.\n#\n# @date    Consult git log.\n##############################################################################\n\ncmake_minimum_required (VERSION 2.8.12)\n\nset(LIB_NAME tidy)\nset(LIBTIDY_DESCRIPTION \"${LIB_NAME} - HTML syntax checker\")\nset(LIBTIDY_URL \"https://www.html-tidy.org\")\n\nproject (${LIB_NAME})\n\n\n#################################################\n# Setup\n#################################################\n\n#------------------------------------------------------------------------\n# Release Information\n#   Release version and date are found in `version.txt`; update *that*\n#   file when required. It will be read into variable `versionFile`\n#   (stripping any newlines or spaces). This file must be formatted into\n#   two lines: the dot-separated MAJOR.MINOR.POINT version, followed by\n#   the date separated YEAR.MONTH.DAY release date.\n#------------------------------------------------------------------------\nfile(READ version.txt versionFile)\n\nif (NOT versionFile)\n    message(FATAL_ERROR \"Unable to determine libtidy version. version.txt file is missing.\")\nendif()\n\nstring(STRIP \"${versionFile}\" VERSION_TEXT)\nstring(REGEX REPLACE \"(.*)[\\r\\n|\\n](.*)\" \"\\\\1\" LIBTIDY_VERSION ${VERSION_TEXT})\nstring(REGEX REPLACE \"(.*)[\\r\\n|\\n](.*)\" \"\\\\2\" LIBTIDY_DATE ${VERSION_TEXT})\n\n# Establish version number\nif (LIBTIDY_VERSION)\n    string(REPLACE \".\" \";\" VERSION_LIST ${LIBTIDY_VERSION})\n    list(GET VERSION_LIST 0 TIDY_MAJOR_VERSION)\n    list(GET VERSION_LIST 1 TIDY_MINOR_VERSION)\n    list(GET VERSION_LIST 2 TIDY_POINT_VERSION)\n    set(TIDY_SO_VERSION \"${TIDY_MAJOR_VERSION}${TIDY_MINOR_VERSION}\")\nelse ()\n    message(FATAL_ERROR \"*** FAILED to get a VERSION from version.txt!\")\nendif ()   \n \n# Establish version date\nif (LIBTIDY_DATE)\n    string(REPLACE \".\" \";\" DATE_LIST ${LIBTIDY_DATE})\n    list(GET DATE_LIST 0 tidy_YEAR)\n    list(GET DATE_LIST 1 tidy_MONTH)\n    list(GET DATE_LIST 2 tidy_DAY)\nelse ()\n    message(FATAL_ERROR \"*** FAILED to get a DATE from version.txt!\")\nendif ()\n\n# Establish SOVERSION. Tidy uses a weird form of semantic versioning,\n# wherein even minor versions are stable versions with SONAMEs, and\n# odd minor versions are `next` versions that should NOT be released,\n# are NOT stable, and should NOT have a valid SONAME.\nif (TIDY_SO_VERSION)\n    math(EXPR NO_SONAME \"${TIDY_SO_VERSION} % 2\")\n    if ( NO_SONAME EQUAL 0)\n        message(\"-> TIDY_SO_VERSION = ${TIDY_SO_VERSION}. This is an EVEN (stable) release.\")\n    else ()\n        message(\"-> TIDY_SO_VERSION = ${TIDY_SO_VERSION}. This is an ODD (development) release.\")\n    endif ()\nelse ()\n    message(FATAL_ERROR \"*** FAILED to build a TIDY_SO_VERSION!\")\nendif ()\n\n\n#------------------------------------------------------------------------\n# Library Types and Linking\n#   By default, *both* static and dynamic library types are built. The\n#   shared library can be turned off if not needed. The console program\n#   can be configured for static linking or dynamic linking.\n#------------------------------------------------------------------------\nset( LIB_TYPE STATIC )  # set default message\n\noption( BUILD_SHARED_LIB \"Set OFF to NOT build shared library\"     ON  )\n\n# Issue #326 - Allow linkage choice of console app tidy\noption( TIDY_CONSOLE_SHARED \"Set ON to link with shared(DLL) lib.\" OFF )\n\nif (TIDY_CONSOLE_SHARED)\n    if (NOT BUILD_SHARED_LIB)\n        message(FATAL_ERROR \"Enable shared build for this tidy linkage!\")\n    endif ()\nendif ()\n\n\n#------------------------------------------------------------------------\n# Miscellaneous Options\n#------------------------------------------------------------------------\noption( BUILD_TAB2SPACE     \"Set ON to build utility app, tab2space\"  OFF )\noption( BUILD_SAMPLE_CODE   \"Set ON to build the sample code\"         OFF )\noption( TIDY_COMPAT_HEADERS \"Set ON to include compatibility headers\" OFF )\n\n\n#------------------------------------------------------------------------\n# Man Page\n#   Allow building with non-default man page directory.\n#------------------------------------------------------------------------\nif (NOT MAN_INSTALL_DIR)\n    set(MAN_INSTALL_DIR share/man/man1)\nendif ()\n\n\n#------------------------------------------------------------------------\n# Localization\n#   Allow building without extra language support.\n#------------------------------------------------------------------------\noption( SUPPORT_LOCALIZATIONS \"Set OFF to build without additional languages.\" ON )\n\nif (SUPPORT_LOCALIZATIONS)\n    add_definitions ( -DSUPPORT_LOCALIZATIONS=1 )\nelse ()\n    add_definitions ( -DSUPPORT_LOCALIZATIONS=0 )\nendif ()\n\n\n#------------------------------------------------------------------------\n# Console Application\n#   Allow building without console support, which mostly prevents\n#   console strings from existing in the library. Note that this will\n#   prevent the console application from being built, since it can't be\n#   linked.\n#------------------------------------------------------------------------\noption( SUPPORT_CONSOLE_APP \"Set OFF to build libraries only without console application support.\" ON )\n\nif (SUPPORT_CONSOLE_APP)\n    add_definitions ( -DSUPPORT_CONSOLE_APP=1 )\nelse ()\n    add_definitions ( -DSUPPORT_CONSOLE_APP=0 )\nendif ()\n\n\n#------------------------------------------------------------------------\n# Diagnostics\n#   Enable building with logs, some memory diagnostics.\n#------------------------------------------------------------------------\noption( ENABLE_DEBUG_LOG    \"Set ON to output debugging messages.\"          OFF )\noption( ENABLE_ALLOC_DEBUG  \"Set ON to output node allocation diagnostics.\" OFF )\noption( ENABLE_MEMORY_DEBUG \"Set ON to output some memory diagnostics.\"     OFF )\n\nif ( ENABLE_DEBUG_LOG )\n    add_definitions( -DENABLE_DEBUG_LOG )\n    message(STATUS \"*** Debug Logging is enabled.\")  \nelse ()\n    message(STATUS \"*** Debug Logging is NOT enabled.\")  \nendif ()\n\nif (ENABLE_ALLOC_DEBUG)\n    add_definitions ( -DDEBUG_ALLOCATION )  # see lexer.c for details\n    message(STATUS \"*** Note, lexer.c node allocation diagnostics are ON\")\nendif ()\n    \nif (ENABLE_MEMORY_DEBUG)\n    add_definitions ( -DDEBUG_MEMORY )  # see alloc.c for details\n    message(STATUS \"*** Note, alloc.c memory diagnostics are ON\")\nendif ()\n    \nif (WIN32)\n    option( ENABLE_CRTDBG_MEMORY \"Set ON to enable the Windows CRT debug library.\" OFF )\n    \n    if (ENABLE_CRTDBG_MEMORY)\n        add_definitions ( -D_CRTDBG_MAP_ALLOC )  # see tidy.c for details\n        message(STATUS \"*** Note, tidy.c Windows CRT memory debug is ON\")\n    endif ()\nendif ()\n\n\n#------------------------------------------------------------------------\n# Complier Flags\n#   Setup other compiler-specific and platform-specific compiler flags.\n#------------------------------------------------------------------------\nif(CMAKE_COMPILER_IS_GNUCXX)\n    set( WARNING_FLAGS -Wall )\nendif(CMAKE_COMPILER_IS_GNUCXX)\n\nif (CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\") \n   set( WARNING_FLAGS \"-Wall -Wno-overloaded-virtual\" )\nendif() \n\nif(WIN32 AND MSVC)\n    # C4996: The compiler encountered a deprecated declaration.\n    # C4090: 'function' : different 'const' qualifiers\n    # C4244: '=' : conversion from '__int64' to 'uint', possible loss of data\n    # C4267: 'function' : conversion from 'size_t' to 'uint', possible loss of data\n    foreach(warning 4996 4090 4244 4267)\n        set(WARNING_FLAGS \"${WARNING_FLAGS} /wd${warning}\")\n    endforeach()\n    \n    set( MSVC_FLAGS \"-DNOMINMAX -D_USE_MATH_DEFINES -D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS -D__CRT_NONSTDC_NO_WARNINGS\" )\n\n    # to distinguish between debug and release lib in windows\n    set( CMAKE_DEBUG_POSTFIX \"d\" ) # little effect in unix\nelse()\n    # add any gcc flags\nendif()\n\nset( CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${WARNING_FLAGS} ${MSVC_FLAGS} -D_REENTRANT\" )\nset( CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${WARNING_FLAGS} ${MSVC_FLAGS} -D_REENTRANT\" )\nset( CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${MSVC_LD_FLAGS}\" )\n\n\n#------------------------------------------------------------------------\n# Static Windows Runtime\n#   Option to statically link to the Windows runtime. Maybe only \n#   applies to WIN32/MSVC.\n#------------------------------------------------------------------------\nif (MSVC)\n    option( USE_STATIC_RUNTIME \"Set ON to change /MD(DLL) to /MT(static)\" OFF )\n    if (USE_STATIC_RUNTIME)\n        set(CompilerFlags\n            CMAKE_CXX_FLAGS\n            CMAKE_CXX_FLAGS_DEBUG\n            CMAKE_CXX_FLAGS_RELEASE\n            CMAKE_C_FLAGS\n            CMAKE_C_FLAGS_DEBUG\n            CMAKE_C_FLAGS_RELEASE\n            )\n        foreach(CompilerFlag ${CompilerFlags})\n            string(REPLACE \"/MD\" \"/MT\" ${CompilerFlag} \"${${CompilerFlag}}\")\n        endforeach()    \n        message(STATUS \"Using /MT STATIC runtime\")\n    else ()\n        message(STATUS \"Using /MD DYNAMIC runtime\")\n    endif ()\nendif ()\n\n\n#------------------------------------------------------------------------\n# Macro Values\n#   These additional macros are set in Tidy's source code. It is *very*\n#   seldom that you would ever have to change any of these in order to\n#   achieve a functioning build.\n#------------------------------------------------------------------------\nadd_definitions ( -DLIBTIDY_VERSION=\"${LIBTIDY_VERSION}\" )\nadd_definitions ( -DRELEASE_DATE=\"${tidy_YEAR}/${tidy_MONTH}/${tidy_DAY}\" )\n\n# Optionally specify an extra version point for pre-release/debug versions.\nif (TIDY_RC_NUMBER)\n    add_definitions ( -DRC_NUMBER=\"${TIDY_RC_NUMBER}\" )\nendif ()\n\n# If your OS doesn't have native ISO2022 support, then build with this flag.\nif (NO_NATIVE_ISO2022_SUPPORT)\n    add_definitions ( -DNO_NATIVE_ISO2022_SUPPORT=1 )\nendif ()\n\n# If your OS doesn't have library function access(), build with this flag.\nif (NO_ACCESS_SUPPORT)\n    add_definitions ( -DNO_ACCESS_SUPPORT=1 )\nendif ()\n\n# Delete me? Not used in Tidy source!\nadd_definitions ( -DHAVE_CONFIG_H ) \n\n\n#------------------------------------------------------------------------\n# Runtime Configuration File Support\n#   By default on Unix-like systems when building for the console program,\n#   support runtime configuration files in /etc/ and in ~/. To prevent this,\n#   set ENABLE_CONFIG_FILES to NO. Specify -DTIDY_CONFIG_FILE and/or \n#   -DTIDY_USER_CONFIG_FILE to override the default paths in tidyplatform.h.\n# @note: this section refactored to support #584.\n#------------------------------------------------------------------------\nif ( UNIX AND SUPPORT_CONSOLE_APP )\n\n  option ( ENABLE_CONFIG_FILES \"Set to OFF to disable Tidy runtime configuration file support\" ON )\n\n    # All Unixes support getpwnam(); undef'd in tidyplatform.h if necessary.\n    add_definitions( -DSUPPORT_GETPWNAM=1 )\n\nelse ()\n\n  option ( ENABLE_CONFIG_FILES \"Set to ON to enable Tidy runtime configuration file support\" OFF )\n  \n  if ( SUPPORT_GETPWNAM )\n    add_definitions( -DSUPPORT_GETPWNAM=1 )\n  endif ()\n  \nendif ()\n\nif ( ENABLE_CONFIG_FILES )\n\n    message(STATUS \"*** Building support for runtime configuration files.\")\n\n    add_definitions( -DTIDY_ENABLE_CONFIG_FILES )\n    \n    # define a default here so we can pass to XSL.\n    if ( NOT TIDY_CONFIG_FILE )\n        set( TIDY_CONFIG_FILE \"/etc/tidy.conf\" )\n    endif ()\n\n    # define a default here so we can pass to XSL.\n    if ( NOT TIDY_USER_CONFIG_FILE )\n        set( TIDY_USER_CONFIG_FILE \"~/.tidyrc\" )\n    endif ()\n\n    # do *not* add these unless ENABLE_CONFIG_FILES!\n    add_definitions( -DTIDY_CONFIG_FILE=\"${TIDY_CONFIG_FILE}\" )\n    add_definitions( -DTIDY_USER_CONFIG_FILE=\"${TIDY_USER_CONFIG_FILE}\" )\n\nendif ()\n  \n\n#------------------------------------------------------------------------\n# Shared Library\n#   Setup whether or not we will build the shared library.\n#------------------------------------------------------------------------\nif(BUILD_SHARED_LIB)\n   set(LIB_TYPE SHARED)\n   message(STATUS \"*** Also building DLL library ${LIB_TYPE}, version ${LIBTIDY_VERSION}, date ${LIBTIDY_DATE}\")\nelse()\n   message(STATUS \"*** Only building static library ${LIB_TYPE}, version ${LIBTIDY_VERSION}, date ${LIBTIDY_DATE}\")\nendif()\n\n\n#################################################\n# Build\n#################################################\n\n#------------------------------------------------------------------------\n# File Locations and File Lists\n#   Setup whether or not we will build the shared library.\n#------------------------------------------------------------------------\ninclude_directories ( \"${PROJECT_SOURCE_DIR}/include\" \"${PROJECT_SOURCE_DIR}/src\" )\n\nset ( SRCDIR src )\nset ( INCDIR include )\n\nset ( CFILES\n        ${SRCDIR}/access.c       ${SRCDIR}/attrs.c        ${SRCDIR}/istack.c\n        ${SRCDIR}/parser.c       ${SRCDIR}/tags.c         ${SRCDIR}/entities.c\n        ${SRCDIR}/lexer.c        ${SRCDIR}/pprint.c       ${SRCDIR}/charsets.c\n        ${SRCDIR}/clean.c        ${SRCDIR}/message.c      ${SRCDIR}/config.c\n        ${SRCDIR}/alloc.c        ${SRCDIR}/attrdict.c     ${SRCDIR}/buffio.c\n        ${SRCDIR}/fileio.c       ${SRCDIR}/streamio.c     ${SRCDIR}/tagask.c\n        ${SRCDIR}/tmbstr.c       ${SRCDIR}/utf8.c         ${SRCDIR}/tidylib.c\n        ${SRCDIR}/mappedio.c     ${SRCDIR}/gdoc.c         ${SRCDIR}/language.c\n        ${SRCDIR}/messageobj.c   ${SRCDIR}/sprtf.c )\n        \nset ( HFILES\n        ${INCDIR}/tidyplatform.h ${INCDIR}/tidy.h         ${INCDIR}/tidyenum.h\n        ${INCDIR}/tidybuffio.h )\n\nif (TIDY_COMPAT_HEADERS)\n    set ( HFILES ${HFILES}      ${INCDIR}/buffio.h        ${INCDIR}/platform.h )\nendif ()\n\nset ( LIBHFILES\n        ${SRCDIR}/access.h       ${SRCDIR}/attrs.h        ${SRCDIR}/attrdict.h ${SRCDIR}/charsets.h\n        ${SRCDIR}/clean.h        ${SRCDIR}/config.h       ${SRCDIR}/entities.h\n        ${SRCDIR}/fileio.h       ${SRCDIR}/forward.h      ${SRCDIR}/lexer.h\n        ${SRCDIR}/mappedio.h     ${SRCDIR}/message.h      ${SRCDIR}/parser.h\n        ${SRCDIR}/pprint.h       ${SRCDIR}/streamio.h     ${SRCDIR}/tags.h\n        ${SRCDIR}/tmbstr.h       ${SRCDIR}/utf8.h         ${SRCDIR}/tidy-int.h\n        ${SRCDIR}/version.h      ${SRCDIR}/gdoc.h         ${SRCDIR}/language.h\n        ${SRCDIR}/language_en.h  ${SRCDIR}/sprtf.h )\n  \n\n#------------------------------------------------------------------------\n# Target Locations\n#------------------------------------------------------------------------\nif (NOT LIB_INSTALL_DIR)\n    set(LIB_INSTALL_DIR lib${LIB_SUFFIX})\nendif ()\n\nif (NOT BIN_INSTALL_DIR)\n    set(BIN_INSTALL_DIR bin)\nendif ()\n\nif (NOT INCLUDE_INSTALL_DIR)\n    set(INCLUDE_INSTALL_DIR include)\nendif ()\n\n\n#------------------------------------------------------------------------\n# Static Library\n#   The static library always builds.\n#------------------------------------------------------------------------\nset(name tidy-static)\nadd_library ( ${name} STATIC ${CFILES} ${HFILES} ${LIBHFILES} )\ntarget_include_directories( ${name} PUBLIC \"${PROJECT_SOURCE_DIR}/include\")\nif (WIN32)\n    set_target_properties( ${name} PROPERTIES \n                           OUTPUT_NAME ${LIB_NAME}_static ) \nelse ()\n    set_target_properties( ${name} PROPERTIES \n                           OUTPUT_NAME ${LIB_NAME} )\n\nendif ()\nif (NOT TIDY_CONSOLE_SHARED) # user wants default static linkage\n    list ( APPEND add_LIBS ${name} )\nendif ()    \ninstall(TARGETS ${name}\n        RUNTIME DESTINATION ${BIN_INSTALL_DIR}\n        ARCHIVE DESTINATION ${LIB_INSTALL_DIR}\n        LIBRARY DESTINATION ${LIB_INSTALL_DIR}\n        )\ninstall( FILES ${HFILES} DESTINATION ${INCLUDE_INSTALL_DIR} )\n\n#------------------------------------------------------------------------\n# Dynamic Library\n#   If the user option is still on.\n#------------------------------------------------------------------------\nif (BUILD_SHARED_LIB)\n    set(name tidy-share)\n    if (UNIX AND APPLE)\n        set(CMAKE_MACOSX_RPATH 1)\n    endif ()\n    add_library ( ${name} SHARED ${CFILES} ${HFILES} ${LIBHFILES} )\n    target_include_directories( ${name} PUBLIC \"${PROJECT_SOURCE_DIR}/include\")\n    set_target_properties( ${name} PROPERTIES \n                                   OUTPUT_NAME ${LIB_NAME} )\n    set_target_properties( ${name} PROPERTIES\n                                   VERSION   ${LIBTIDY_VERSION}\n                                   SOVERSION ${TIDY_SO_VERSION}\n                                   NO_SONAME ${NO_SONAME} )\n    set_target_properties( ${name} PROPERTIES \n                                   COMPILE_FLAGS \"-DBUILD_SHARED_LIB -DBUILDING_SHARED_LIB\")\n    install(TARGETS ${name}\n        RUNTIME DESTINATION ${BIN_INSTALL_DIR}\n        ARCHIVE DESTINATION ${LIB_INSTALL_DIR}\n        LIBRARY DESTINATION ${LIB_INSTALL_DIR}\n        )\n    if(MSVC)\n        install(FILES $<TARGET_PDB_FILE:tidy-share> DESTINATION ${LIB_INSTALL_DIR} OPTIONAL)\n    endif()\n    if (TIDY_CONSOLE_SHARED) # user wants shared/dll linkage\n        list ( APPEND add_LIBS ${name} )\n    endif ()    \nendif ()\n\n\n#------------------------------------------------------------------------\n# Main Executable\n#   The main executable will be linked with either the static or the\n#   shared library.\n#------------------------------------------------------------------------\nif (SUPPORT_CONSOLE_APP)\n    set(name ${LIB_NAME})\n    set ( BINDIR console )\n    add_executable( ${name} ${BINDIR}/tidy.c )\n    target_link_libraries( ${name} ${add_LIBS} )\n    if (MSVC)\n        set_target_properties( ${name} PROPERTIES DEBUG_POSTFIX d )\n    endif ()\n    if (APPLE)\n        string(TIMESTAMP CURRENT_YEAR \"%Y\")\n        configure_file(\n            ${CMAKE_CURRENT_SOURCE_DIR}/console/Info.plist.in \n            ${CMAKE_CURRENT_BINARY_DIR}/Info.plist\n        )\n        target_link_options(${name} PRIVATE LINKER:-sectcreate,__TEXT,__info_plist,Info.plist)\n    endif ()\n    if (NOT TIDY_CONSOLE_SHARED)\n        set_target_properties( ${name} PROPERTIES \n                                       COMPILE_FLAGS \"-DTIDY_STATIC\" )\n    endif ()\n    install (TARGETS ${name} DESTINATION bin)\nendif ()\n\n\n#------------------------------------------------------------------------\n# Miscellaneous Targets\n#------------------------------------------------------------------------\nif (BUILD_TAB2SPACE)\n    set(name tab2space)\n    add_executable( ${name} ${BINDIR}/tab2space.c )\n    if (MSVC)\n        set_target_properties( ${name} PROPERTIES DEBUG_POSTFIX d )\n    endif ()\n    # no INSTALL of this 'local' tool - use depreciated\nendif ()\n\nif (BUILD_SAMPLE_CODE)\n    set(name test71)\n    set(dir console)\n    add_executable( ${name} ${dir}/${name}.cxx )\n    if (MSVC)\n        set_target_properties( ${name} PROPERTIES DEBUG_POSTFIX d )\n    endif ()\n    target_link_libraries( ${name} ${add_LIBS} )\n    # no INSTALL of this 'local' sample\nendif ()\n\n\n#################################################\n# Create man pages\n#################################################\n\nif (UNIX AND SUPPORT_CONSOLE_APP)\n    find_program( XSLTPROC_FOUND xsltproc )\n    if (XSLTPROC_FOUND)\n        ## NOTE: man name must match exe ie currently `${LIB_NAME}.1` not `tidy.1`\n        ## also could use `manpath` command output to determine target install path\n        set(TIDY_MANFILE ${LIB_NAME}.1)\n        message(STATUS \"*** Generating man ${TIDY_MANFILE} custom commands...\")\n        set(TIDY1XSL ${CMAKE_CURRENT_BINARY_DIR}/tidy1.xsl)\n        set(TIDYHELP ${CMAKE_CURRENT_BINARY_DIR}/tidy-help.xml)\n        set(TIDYCONFIG ${CMAKE_CURRENT_BINARY_DIR}/tidy-config.xml)\n        add_custom_target(man ALL DEPENDS \"${CMAKE_CURRENT_BINARY_DIR}/${LIB_NAME}\")\n        \n        ## Populate the @VARIABLES@ in the input file.\n        configure_file(\n            ${CMAKE_CURRENT_SOURCE_DIR}/man/tidy1.xsl.in\n            ${TIDY1XSL}\n        )\n \n        # Run the built EXE to generate xml output .\n        add_custom_command(\n            TARGET man\n            COMMAND ${CMAKE_CURRENT_BINARY_DIR}/${LIB_NAME} -xml-help > ${TIDYHELP}\n            COMMENT \"Generate ${TIDYHELP}\"\n            VERBATIM\n        )\n\n        # Run the built EXE to generate more xml output.\n        add_custom_command(\n            TARGET man\n            COMMAND ${CMAKE_CURRENT_BINARY_DIR}/${LIB_NAME} -xml-config > ${TIDYCONFIG}\n            COMMENT \"Generate ${TIDYCONFIG}\"\n            VERBATIM\n        )\n\n        # Run xsltproc to generate the install files.\n        add_custom_command(\n            TARGET man\n            DEPENDS ${TIDYHELP}\n            COMMAND xsltproc ARGS ${TIDY1XSL} ${TIDYHELP} > ${CMAKE_CURRENT_BINARY_DIR}/${TIDY_MANFILE}\n            COMMENT \"Generate ${TIDY_MANFILE}\"\n            VERBATIM\n        )\n\n        install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${TIDY_MANFILE} DESTINATION ${MAN_INSTALL_DIR})\n\n    else ()\n        message(STATUS \"*** NOTE: xsltproc NOT FOUND! Can NOT generate man page.\")\n        message(STATUS \"*** You need to install xsltproc in your system.\")\n    endif ()\nendif ()\n\n\n#################################################\n# Create MSI,EXE, DMG, DEB/RPM\n#   TODO: Check each of these builds\n#################################################\n\nset(BITNESS 32)\nif(CMAKE_SIZEOF_VOID_P EQUAL 8)\n  set(BITNESS 64)\nendif()\n\n\n#------------------------------------------------------------------------\n# System Runtime Libraries\n#   Need to ensure that system DLLs get included in a binary \n#   distribution, but since it can miss some - seems incomplete - make\n#   optional.\n#------------------------------------------------------------------------\noption( ADD_SYSTEM_RUNTIMES \"Set ON to include system runtime DLLS in distribution\" OFF )\nif (MSVC AND ADD_SYSTEM_RUNTIMES)\n    if (NOT DEFINED CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_NO_WARNINGS)\n      # Visual Studio Express does include redistributable components so\n      # squelch the warning.\n      set (CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_NO_WARNINGS ON)\n    endif ()\n    set (CMAKE_INSTALL_DEBUG_LIBRARIES OFF)\n    include (InstallRequiredSystemLibraries)\nendif ()\n\n\n#------------------------------------------------------------------------\n# Windows\n#   MSI - this needs WiX Tooset installed and a path to candle.exe\n#   EXE - this needs NSIS tools to be in path\n# Everything Else\n#   RPM required to build RPM's, and might not be installed by default.\n#------------------------------------------------------------------------\nif (WIN32)\n    set(CPACK_GENERATOR \"NSIS;WIX;ZIP\")\n    set(CPACK_SOURCE_GENERATOR \"ZIP\")\n    set(CPACK_WIX_UPGRADE_GUID \"D809598A-B513-4752-B268-0BAC403B00E4\")\nelseif ( ${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\" )\n    set(CPACK_GENERATOR \"productbuild\")\n    set(CPACK_SOURCE_GENERATOR \"TGZ\")\nelse ()\n    set(CPACK_GENERATOR \"DEB;RPM\")\n    set(CPACK_SOURCE_GENERATOR \"TGZ\")\nendif ()\n\n\n#------------------------------------------------------------------------\n# General\n#------------------------------------------------------------------------\nset(CPACK_PACKAGE_NAME \"${LIB_NAME}\")\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"${LIBTIDY_DESCRIPTION}\")\nset(CPACK_PACKAGE_VENDOR \"HTML Tidy Advocacy Community Group\")\nset(CPACK_PACKAGE_CONTACT \"maintainer@htacg.org\")\n\nset(CPACK_PACKAGE_VERSION ${LIBTIDY_VERSION})\nset(CPACK_PACKAGE_VERSION_MAJOR \"${TIDY_MAJOR_VERSION}\")\nset(CPACK_PACKAGE_VERSION_MINOR \"${TIDY_MINOR_VERSION}\")\nset(CPACK_PACKAGE_VERSION_PATCH \"${TIDY_POINT_VERSION}\")\nset(CPACK_PACKAGE_DESCRIPTION_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/README/README.html\")\n\n\n#------------------------------------------------------------------------\n# Windows: it looks like only the LICENSE.txt file is used by Windows,\n#   for either package type (.exe and .msi).\n# Linux: none of the files are shown publicly by default when installing\n#   from a .deb or .rpm.\n# Mac: cannot show HTML; need RTF. CPACK_RESOURCE_FILE_WELCOME isn't\n#   needed.\n#------------------------------------------------------------------------\nif (APPLE)\n    set(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/build/macos/Installer-License.rtf\")\n    set(CPACK_RESOURCE_FILE_README \"${CMAKE_CURRENT_SOURCE_DIR}/build/macos/Installer-Introduction.rtf\")\nelse ()\n    set(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/README/LICENSE.txt\")\n    set(CPACK_RESOURCE_FILE_README \"${CMAKE_CURRENT_SOURCE_DIR}/README/README.html\")\n    set(CPACK_RESOURCE_FILE_WELCOME \"${CMAKE_CURRENT_SOURCE_DIR}/README/README.html\")\nendif ()\n\n\n#------------------------------------------------------------------------\n# Debian\n#------------------------------------------------------------------------\nset(CPACK_DEBIAN_PACKAGE_MAINTAINER ${CPACK_PACKAGE_CONTACT})\nset(CPACK_DEBIAN_PACKAGE_HOMEPAGE ${LIBTIDY_URL})\nset(CPACK_DEBIAN_PACKAGE_SECTION \"Libraries\")\nset(CPACK_SOURCE_IGNORE_FILES \"${PROJECT_SOURCE_DIR}/build\" )\n\n\n#------------------------------------------------------------------------\n# RPM config\n#------------------------------------------------------------------------\nset(CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION \"/usr/share/man\" \"/usr/share/man/man1\")\nset(CPACK_SOURCE_IGNORE_FILES \"${CMAKE_CURRENT_SOURCE_DIR}/test/;${CMAKE_CURRENT_SOURCE_DIR}/build/;${CMAKE_CURRENT_SOURCE_DIR}/.git/\")\n\n\n#------------------------------------------------------------------------\n# Package name configuration\n#   The default is LIB_NAME-CPACK_PACKAGE_VERSION-CMAKE_SYSTEM_NAME,\n#   but we want to include system name for Unixes, and correct the\n#   system name on Apple targets.\n#------------------------------------------------------------------------\nif (UNIX AND NOT APPLE)\n    set(CPACK_PACKAGE_FILE_NAME \"${LIB_NAME}-${CPACK_PACKAGE_VERSION}-${CMAKE_SYSTEM_NAME}-${BITNESS}bit\")\nendif ()\nif (APPLE AND NOT IOS)\n    if (CMAKE_OSX_ARCHITECTURES)\n        set(CPACK_PACKAGE_FILE_NAME \"${LIB_NAME}-${CPACK_PACKAGE_VERSION}-macOS-${CMAKE_OSX_ARCHITECTURES}\")\n        string(REPLACE \";\" \"+\" CPACK_PACKAGE_FILE_NAME \"${CPACK_PACKAGE_FILE_NAME}\")\n    else ()\n        set(CPACK_PACKAGE_FILE_NAME \"${LIB_NAME}-${CPACK_PACKAGE_VERSION}-macOS-${BITNESS}bit\")\n    endif ()\nendif ()\nif (IOS)\n    set(CPACK_PACKAGE_FILE_NAME \"${LIB_NAME}-${CPACK_PACKAGE_VERSION}-iOS-${BITNESS}bit\")\nendif ()\n\n\n#------------------------------------------------------------------------\n# Build the Package\n#------------------------------------------------------------------------\ninclude(CPack)\n\n\n#------------------------------------------------------------------------\n# pkg-config\n#------------------------------------------------------------------------\nconfigure_file(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/${LIB_NAME}.pc.cmake.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/${LIB_NAME}.pc\"\n    @ONLY\n    )\n    \ninstall(FILES\n    \"${CMAKE_CURRENT_BINARY_DIR}/${LIB_NAME}.pc\"\n    DESTINATION \"${LIB_INSTALL_DIR}/pkgconfig\"\n    )\n\n# eof\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.8740234375,
          "content": "# HTACG HTML Tidy\n\nAll other READMEs and related materials can be found in [README/][100]. Although all of our materials should be linked in this README, be sure to check this directory for documents we’ve not yet added to this document.\n\n## Building HTML Tidy\n\n  - For build instructions please see [README/BUILD.md][115].\n  \n## Branches and Versions\n\nLearn about which branches are available, which branch you should use, and how HTML Tidy’s versioning scheme works.\n\n  - Learn about version numbering in [README/VERSION.md][160].\n  - Learn about our repository branches in [README/BRANCHES.md][110].\n  \n## Contributing and Development Guides\n\nWe gladly accept PRs! Read about some of our contribution guidelines, and check out some of the additional explanatory documents that will aid your understanding of how to accomplish certain things in HTML Tidy.\n\n### General Contribution Guidelines\n\nThese are some general guidelines that will help you help us when it comes to making your own contributions to HTML Tidy.\n\n  - Learn about our contributing guidelines in [README/CONTRIBUTING.md][125].\n  - Understand HTML Tidy’s source code style in [README/CODESTYLE.md][120].\n\n### Adding Features Guides\n\nWhen you’re ready to add a great new feature, these write-ups may be useful.\n\n  - Learn how to add new element attributes to HTML Tidy by reading [README/ATTRIBUTES.md][105].\n  - Discover how to add new tags to Tidy in [README/TAGS.md][130].\n  - If you want to add new messages to Tidy, read [README/MESSAGE.md][150].\n  - Configuration options can be added according to [README/OPTIONS.md][155].\n  - Pull Requests must pass all existing regression tests, or you must change existing regression test expectations with a good explanation. New features require that you add new regression tests. See [README/TESTING.md][165] for more details.\n\n### Language Localization Guides\n\nTidy supports localization, and welcomes translations into various languages. Please read up on how to localize HTML Tidy.\n\n - The general README for localizing can be found in [README/LOCALIZE.md][140].\n - And [localize/README.md][145] contains specific instructions for localizing.\n\n\n## Other Important Links\n\n - site: [https://www.html-tidy.org/][4]\n - source: [https://github.com/htacg/tidy-html5][5]\n - binaries: [https://binaries.html-tidy.org][6]\n - bugs: [https://github.com/htacg/tidy-html5/issues][7]\n - list: [https://lists.w3.org/Archives/Public/html-tidy/][8]\n - api and quickref: [https://api.html-tidy.org/][9]\n - Wikidata: [https://www.wikidata.org/wiki/Q1566084][10]\n\n  [4]: https://www.html-tidy.org/\n  [5]: https://github.com/htacg/tidy-html5\n  [6]: https://binaries.html-tidy.org\n  [7]: https://github.com/htacg/tidy-html5/issues\n  [8]: https://lists.w3.org/Archives/Public/html-tidy/\n  [9]: https://api.html-tidy.org/\n  [10]: https://www.wikidata.org/wiki/Q1566084\n\n\n## History\n\nThis repository should be considered canonical for HTML Tidy starting from 2015-January-15.\n\n - This repository originally transferred from [w3c.github.com/tidy-html5][20], then redirected to the current site, but now dead.\n \n - First moved to Github from [tidy.sourceforge.net][21]. Note, this site is kept only for historic reasons, and is not now well maintained.\n\n**Tidy is the granddaddy of HTML tools, with support for modern standards.** Have fun...\n\n  [20]: https://w3c.github.com/tidy-html5/\n  [21]: http://tidy.sourceforge.net\n\n\n## License\n\nHTML Tidy and LibTidy are free and open source software with a permissive license.\n\n - You can read the complete license in [README/LICENSE.md][135].\n\n\n\n  [100]: README/\n  [105]: README/ATTRIBUTES.md\n  [110]: README/BRANCHES.md\n  [115]: README/BUILD.md\n  [120]: README/CODESTYLE.md\n  [125]: README/CONTRIBUTING.md\n  [130]: README/TAGS.md\n  [135]: README/LICENSE.md\n  [140]: README/LOCALIZE.md\n  [145]: localize/README.md\n  [150]: README/MESSAGE.md\n  [155]: README/OPTIONS.md\n  [160]: README/VERSION.md\n  [165]: README/TESTING.md\n \n"
        },
        {
          "name": "README",
          "type": "tree",
          "content": null
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "console",
          "type": "tree",
          "content": null
        },
        {
          "name": "experimental",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "localize",
          "type": "tree",
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "regression_testing",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tidy.pc.cmake.in",
          "type": "blob",
          "size": 0.2822265625,
          "content": "prefix=@CMAKE_INSTALL_PREFIX@\nexec_prefix=${prefix}\nlibdir=${exec_prefix}/@LIB_INSTALL_DIR@\nincludedir=${prefix}/@INCLUDE_INSTALL_DIR@\n\nName: @LIB_NAME@\nDescription: @LIBTIDY_DESCRIPTION@\nURL: @LIBTIDY_URL@\nVersion: @LIBTIDY_VERSION@\nLibs: -L${libdir} -l@LIB_NAME@\nCflags: -I${includedir}\n"
        },
        {
          "name": "version.txt",
          "type": "blob",
          "size": 0.017578125,
          "content": "5.9.20\n2022.01.25\n"
        }
      ]
    }
  ]
}