{
  "metadata": {
    "timestamp": 1736710053531,
    "page": 670,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mackyle/sqlite",
      "stars": 1968,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".fossil-settings",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 3.7734375,
          "content": "License Information\n===================\n\nSQLite Is Public Domain\n-----------------------\n\nThe SQLite source code, including all of the files in the directories\nlisted in the bullets below are \n[Public Domain](https://sqlite.org/copyright.html).\nThe authors have submitted written affidavits releasing their work to\nthe public for any use.  Every byte of the public-domain code can be\ntraced back to the original authors.  The files of this repository\nthat are public domain include the following:\n\n  *  All of the primary SQLite source code files found in the\n     [src/ directory](https://sqlite.org/src/tree/src?type=tree&expand)\n  *  All of the test cases and testing code in the\n     [test/ directory](https://sqlite.org/src/tree/test?type=tree&expand)\n  *  All of the SQLite extension source code and test cases in the\n     [ext/ directory](https://sqlite.org/src/tree/ext?type=tree&expand)\n  *  All code that ends up in the \"sqlite3.c\" and \"sqlite3.h\" build products\n     that actually implement the SQLite RDBMS.\n  *  All of the code used to compile the\n     [command-line interface](https://sqlite.org/cli.html)\n  *  All of the code used to build various utility programs such as\n     \"sqldiff\", \"sqlite3_rsync\", and \"sqlite3_analyzer\".\n\n\nThe public domain source files usually contain a header comment\nsimilar to the following to make it clear that the software is\npublic domain.\n\n> ~~~\nThe author disclaims copyright to this source code.  In place of\na legal notice, here is a blessing:\n\n  *   May you do good and not evil.\n  *   May you find forgiveness for yourself and forgive others.\n  *   May you share freely, never taking more than you give.\n~~~\n\nAlmost every file you find in this source repository will be\npublic domain.  But there are a small number of exceptions:\n\nNon-Public-Domain Code Included With This Source Repository AS A Convenience\n----------------------------------------------------------------------------\n\nThis repository contains a (relatively) small amount of non-public-domain\ncode used to help implement the configuration and build logic.  In other\nwords, there are some non-public-domain files used to implement:\n\n> ~~~\n./configure && make\n~~~\n\nIn all cases, the non-public-domain files included with this\nrepository have generous BSD-style licenses.  So anyone is free to\nuse any of the code in this source repository for any purpose, though\nattribution may be required to reuse or republish the configure and\nbuild scripts.  None of the non-public-domain code ever actually reaches\nthe build products, such as \"sqlite3.c\", however, so no attribution is\nrequired to use SQLite itself.  The non-public-domain code consists of\nscripts used to help compile SQLite.  The non-public-domain code is\ntechnically not part of SQLite.  The non-public-domain code is\nincluded in this repository as a convenience to developers, so that those\nwho want to build SQLite do not need to go download a bunch of\nthird-party build scripts in order to compile SQLite.\n\nNon-public-domain code included in this respository includes:\n\n  *  The [\"autosetup\"](http://msteveb.github.io/autosetup/) configuration\n     system that is contained (mostly) the autosetup/ directory, but also\n     includes the \"./configure\" script at the top-level of this archive.\n     Autosetup has a separate BSD-style license.  See the\n     [autosetup/LICENSE](http://msteveb.github.io/autosetup/license/)\n     for details.\n\n  *  There are BSD-style licenses on some of the configuration\n     software found in the legacy autoconf/ directory and its\n     subdirectories.\n\nThe following unix shell command is can be run from the top-level\nof this source repository in order to remove all non-public-domain\ncode:\n\n> ~~~\nrm -rf configure autosetup autoconf\n~~~\n\nIf you unpack this source repository and then run the command above, what\nis left will be 100% public domain.\n"
        },
        {
          "name": "Makefile.in",
          "type": "blob",
          "size": 10.232421875,
          "content": "#!/usr/bin/make\n# ^^^^ help out editors which guess this file's type.\n#\n# Makefile for SQLITE\n#\n# This makefile is intended to be configured automatically using the\n# configure script.\n#\n# The docs for many of its variables are in the primary static\n# makefile, main.mk (which this one includes at runtime).\n#\nall:\n########################################################################\n#\n# Known TODOs/FIXMEs/TOIMPROVEs for the autosetup port, in no\n# particular order...\n#\n# - TEA pieces.\n#\n# - Replace the autotools-specific distribution deliverable(s).\n#\n# - Confirm whether cross-compilation works and patch it\n# appropriately.\n#\n# Maintenance reminders:\n#\n# - This makefile should remain as POSIX-make-compatible as possible:\n#   https://pubs.opengroup.org/onlinepubs/9799919799/utilities/make.html\n#\n# - The naming convention of some vars, using periods instead of\n#   underscores, though unconventional, was selected for a couple of\n#   reasons: 1) Personal taste (for which there is no accounting).  2)\n#   It is thought to help defend against inadvertent injection of\n#   those vars via environment variables (because X.Y is not a legal\n#   environment variable name).  \"Feature or bug?\" is debatable and\n#   this naming convention may be reverted if it causes any grief.\n#\n\n#\n# The top-most directory of the source tree.  This is the directory\n# that contains this \"Makefile.in\" and the \"configure\" script.\n#\nTOP = @abs_top_srcdir@\n\n#\n# Autotools-conventional vars which are used by package installation\n# rules in main.mk. To get sane handling when a user overrides only\n# a subset of these, we perform some acrobatics with these vars\n# in the configure script: see [proj-remap-autoconf-dir-vars] for\n# full details.\n#\n# For completeness's sake, the aforementioned conventional vars which\n# are relevant to our installation rules are:\n#\n# datadir     = $(prefix)/share\n# mandir      = $(datadir)/man\n# includedir  = $(prefix)/include\n# exec_prefix = $(prefix)\n# bindir      = $(exec_prefix)/bin\n# libdir      = $(exec_prefix)/lib\n#\n# Our builds do not require any of their relatives:\n#\n# sbindir        = $(exec_prefix)/sbin\n# sysconfdir     = /etc\n# sharedstatedir = $(prefix)/com\n# localstatedir  = /var\n# runstatedir    = /run\n# infodir        = $(datadir)/info\n# libexecdir     = $(exec_prefix)/libexec\n#\nprefix      = @prefix@\ndatadir     = @datadir@\nmandir      = @mandir@\nincludedir  = @includedir@\nexec_prefix = @exec_prefix@\nbindir      = @bindir@\nlibdir      = @libdir@\n\nINSTALL = @BIN_INSTALL@\nAR = @AR@\nAR.flags = cr # TODO? Add a configure test to determine this?\nCC = @CC@\nB.cc = @CC_FOR_BUILD@ @BUILD_CFLAGS@\nT.cc = $(CC)\n#\n# $(CFLAGS) is problematic because it is frequently overridden when\n# invoking make, which loses things like -fPIC. So... we avoid using\n# it directly and instead add a level of indirection.  We combine\n# $(CFLAGS) and $(CPPFLAGS) here because that's the way the legacy\n# build did it and many builds rely on that. See main.mk for more\n# details.\n#\n# Historical note: the pre-3.48 build only honored CPPFLAGS at\n# configure-time, and expanded them into the generated Makefile. There\n# are, in that build, no uses of CPPFLAGS in the configure-expanded\n# Makefile. Ergo: if a client configures with CPPFLAGS=... and then\n# explicitly passes CFLAGS=... to make, the CPPFLAGS will be\n# lost. That behavior is retained in 3.48+.\n#\nCFLAGS = @CFLAGS@ @CPPFLAGS@\n#\n# $(LDFLAGS.configure) represents any LDFLAGS=... the client passes to\n# configure. See main.mk.\n#\nLDFLAGS.configure = @LDFLAGS@\n\n#\n# CFLAGS.core is documented in main.mk.\n#\nCFLAGS.core = @SH_CFLAGS@\nLDFLAGS.shlib = @SH_LDFLAGS@\nLDFLAGS.zlib = @LDFLAGS_ZLIB@\nLDFLAGS.math = @LDFLAGS_MATH@\nLDFLAGS.rpath = @LDFLAGS_RPATH@\nLDFLAGS.pthread = @LDFLAGS_PTHREAD@\nLDFLAGS.dlopen = @LDFLAGS_DLOPEN@\nLDFLAGS.readline = @LDFLAGS_READLINE@\nCFLAGS.readline = @CFLAGS_READLINE@\nLDFLAGS.icu = @LDFLAGS_ICU@\nCFLAGS.icu = @CFLAGS_ICU@\nLDFLAGS.libsqlite3.soname = @LDFLAGS_LIBSQLITE3_SONAME@\n# soname: see https://sqlite.org/src/forumpost/5a3b44f510df8ded\nENABLE_SHARED = @ENABLE_SHARED@\nENABLE_STATIC = @ENABLE_STATIC@\nHAVE_WASI_SDK = @HAVE_WASI_SDK@\n\nT.cc.sqlite = $(T.cc) @TARGET_DEBUG@\n\n#\n# Define -D_HAVE_SQLITE_CONFIG_H so that the code knows it\n# can include the generated sqlite_cfg.h.\n#\n# main.mk will fill out T.cc.sqlite with additional flags common to\n# all builds.\n#\nT.cc.sqlite += -D_HAVE_SQLITE_CONFIG_H -DBUILD_sqlite\n\n#\n# $(JIMSH) and $(CFLAGS.jimsh) are documented in main.mk.  $(JIMSH)\n# must start with a path component so that it can be invoked as a\n# shell command.\n#\nCFLAGS.jimsh = @CFLAGS_JIMSH@\nJIMSH = ./jimsh$(TEXE)\n\n#\n# $(B.tclsh) is documented in main.mk.\n#\nB.tclsh = @BTCLSH@\n$(B.tclsh):\n\n#\n# $(OPT_FEATURE_FLAGS) is documented in main.mk.\n#\n# The appending of $(OPTIONS) to $(OPT_FEATURE_FLAGS) is historical\n# and somewhat confusing because there's another var, $(OPTS), which\n# has a similar (but not identical) role.\n#\nOPT_FEATURE_FLAGS = @OPT_FEATURE_FLAGS@ $(OPTIONS)\n\n#\n# Version (X.Y.Z) number for the SQLite being compiled.\n#\nPACKAGE_VERSION = @PACKAGE_VERSION@\n\n#\n# Filename extensions for binaries and libraries\n#\nB.exe = @BUILD_EXEEXT@\nT.exe = @TARGET_EXEEXT@\nB.dll = @BUILD_DLLEXT@\nT.dll = @TARGET_DLLEXT@\nB.lib = @BUILD_LIBEXT@\nT.lib = @TARGET_LIBEXT@\n\n#\n# $(HAVE_TCL) is 1 if the configure script was able to locate the\n# tclConfig.sh file, else it is 0.  When this variable is 1, the TCL\n# extension library (libtclsqlite3.so) and related testing apps are\n# built.\n#\nHAVE_TCL = @HAVE_TCL@\n\n#\n# $(TCLSH_CMD) is the command to use for tclsh - normally just\n# \"tclsh\", but we may know the specific version we want to use. This\n# must point to a canonical TCL interpreter, not JimTCL.\n#\nTCLSH_CMD = @TCLSH_CMD@\nTCL_CONFIG_SH = @TCL_CONFIG_SH@\n\n#\n# TCL config info from tclConfig.sh\n#\n# We have to inject this differently in main.mk to accommodate static\n# makefiles, so we don't currently bother to export it here. This\n# block is retained in case we decide that we do indeed need to export\n# it at configure-time instead of calculate it at make-time.\n#\n#TCL_INCLUDE_SPEC = @TCL_INCLUDE_SPEC@\n#TCL_LIB_SPEC = @TCL_LIB_SPEC@\n#TCL_STUB_LIB_SPEC = @TCL_STUB_LIB_SPEC@\n#TCL_EXEC_PREFIX = @TCL_EXEC_PREFIX@\n#TCL_VERSION = @TCL_VERSION@\n#\n# $(TCLLIBDIR) = where to install the tcl plugin. If this is empty, it\n# is calculated at make-time by the targets which need it but we\n# export it here so that it can be set at configure-time, so that\n# clients are not required to pass it at make-time, or may set it in\n# their environment to override it.\n#\nTCLLIBDIR = @TCLLIBDIR@\n\n#\n# Additional options when running tests using testrunner.tcl\n# This is usually either blank or --status.\n#\nTSTRNNR_OPTS = @TSTRNNR_OPTS@\n\n#\n# If gcov support was enabled by the configure script, add the appropriate\n# flags here.  It's not always as easy as just having the user add the right\n# CFLAGS / LDFLAGS, because libtool wants to use CFLAGS when linking, which\n# causes build errors with -fprofile-arcs -ftest-coverage with some GCCs.\n# Supposedly GCC does the right thing if you use --coverage, but in\n# practice it still fails.  See:\n#\n# http://www.mail-archive.com/debian-gcc@lists.debian.org/msg26197.html\n#\n# for more info.\n#\nCFLAGS.gcov1 = -DSQLITE_COVERAGE_TEST=1 -fprofile-arcs -ftest-coverage\nLDFLAGS.gcov1 = -lgcov\nUSE_GCOV = @USE_GCOV@\nT.compile.extras = $(CFLAGS.gcov$(USE_GCOV))\nT.link.extras = $(LDFLAGS.gcov$(USE_GCOV))\n\n#\n# Vars with the AS_ prefix are specifically related to AutoSetup.\n#\n# AS_AUTO_DEF is the main configure script.\n#\nAS_AUTO_DEF = $(TOP)/auto.def\n#\n# Shell commands to re-run $(TOP)/configure with the same args it was\n# invoked with to produce this makefile.\n#\nAS_AUTORECONFIG = @SQLITE_AUTORECONFIG@\n\nUSE_AMALGAMATION ?= @USE_AMALGAMATION@\nLINK_TOOLS_DYNAMICALLY ?= @LINK_TOOLS_DYNAMICALLY@\nAMALGAMATION_GEN_FLAGS ?= --linemacros=@AMALGAMATION_LINE_MACROS@\n\n#\n# CFLAGS for sqlite3$(T.exe)\n#\nSHELL_OPT ?= @OPT_SHELL@\n\nMakefile: $(TOP)/Makefile.in $(AS_AUTO_DEF)\n\t$(AS_AUTORECONFIG)\n\t@touch $@\n\nsqlite3.pc: $(TOP)/sqlite3.pc.in $(AS_AUTO_DEF)\n\t$(AS_AUTORECONFIG)\n\t@touch $@\ninstall: install-pc # defined in main.mk\n\nsqlite_cfg.h: $(AS_AUTO_DEF)\n\t$(AS_AUTORECONFIG)\n\t@touch $@\n\n#\n# Fiddle app\n#\n# EMCC_WRAPPER must refer to the genuine emcc binary, or a\n# call-compatible wrapper, e.g. $(TOP)/tool/emcc.sh. If it's empty,\n# build components requiring Emscripten will not build.\n#\n# Achtung: though _this_ makefile is POSIX-make compatible, the fiddle\n# build requires GNU make.\n#\nEMCC_WRAPPER = @EMCC_WRAPPER@\nfiddle: sqlite3.c shell.c\n\t@if [ x = \"x$(EMCC_WRAPPER)\" ]; then \\\n\t\techo \"Emscripten SDK not found by configure. Cannot build fiddle.\" 1&>2; \\\n\t\texit 1; \\\n\tfi\n\t$(MAKE) -C ext/wasm fiddle emcc_opt=-Os\n\n#\n# Spell-checking for source comments\n# The sources checked are either C sources or C source templates.\n# Their comments are extracted and processed through aspell using\n# a custom dictionary that contains scads of odd identifiers that\n# find their way into the comments.\n#\n# Currently, this target is setup to be \"made\" in-tree only.\n# The output is ephemeral. Redirect it to guide spelling fixups,\n# either to correct spelling or add words to tool/custom.txt.\n#\n./custom.rws: ./tool/custom.txt\n\t@echo 'Updating custom dictionary from tool/custom.txt'\n\taspell --lang=en create master ./custom.rws < ./tool/custom.txt\n# Note that jimsh does not work here:\n# https://github.com/msteveb/jimtcl/issues/319\nmisspell: ./custom.rws has_tclsh84\n\t$(TCLSH_CMD) ./tool/spellsift.tcl ./src/*.c ./src/*.h ./src/*.in\n\n#\n# clean/distclean are mostly defined in main.mk. In this makefile we\n# perform cleanup known to be relevant to (only) the autosetup-driven\n# build.\n#\n#clean-autosetup:\n#\t-if [ -f ext/wasm/GNUmakefile ]; then \\\n#\t\tgmake --no-print-directory --ignore-errors -C ext/wasm clean; \\\n#\tfi >/dev/null 2>&1; true\n#clean: clean-autosetup\n\ndistclean-autosetup:\tclean\n\trm -f sqlite_cfg.h config.log config.status config.defines.* Makefile sqlite3.pc\n\trm -f $(TOP)/tool/emcc.sh\n\trm -f libsqlite3*$(T.dll)\n\trm -f jimsh0*\n#\t-if [ -f ext/wasm/GNUmakefile ]; then \\\n#\t\tgmake --no-print-directory  --ignore-errors -C ext/wasm distclean; \\\n#\tfi >/dev/null 2>&1; true\ndistclean: distclean-autosetup\n\n#\n# tool/version-info: a utility for emitting sqlite3 version info\n# in various forms.\n#\nversion-info$(T.exe): $(TOP)/tool/version-info.c Makefile sqlite3.h\n\t$(T.link) $(ST_OPT) -o $@ $(TOP)/tool/version-info.c\n\ninclude $(TOP)/main.mk\n"
        },
        {
          "name": "Makefile.linux-generic",
          "type": "blob",
          "size": 1.96875,
          "content": "#!/usr/make\nall:\n#\n# Makefile for SQLITE\n#\n# This is a template makefile for SQLite.  Most people prefer to\n# use the autoconf generated \"configure\" script to generate the\n# makefile automatically.  But that does not work for everybody\n# and in every situation.  If you are having problems with the\n# \"configure\" script, you might want to try this makefile as an\n# alternative.  Create a copy of this file, edit the parameters\n# below and type \"make\".\n#\n# Maintenance note: because this is the template for Linux systems, it\n# is assumed that the platform has GNU make and this file takes\n# advantage of that.\n#\n####\n#\n# $(TOP) = The toplevel directory of the source tree.  This is the\n# directory that contains \"Makefile.in\" and \"auto.def\".\n#\nTOP ?= $(realpath $(dir $(lastword $(MAKEFILE_LIST))))\n\n#\n# $(CFLAGS) will be used when compiling the library and most\n# utilities.  It must normally contain -fPIC on Linux systems,\n# but overriding CFLAGS is an easy way for users to inadvertently\n# remove -fPIC from their builds, so we generally expect to see\n# -fPIC in $(CFLAGS.core), which main.mk will integrate with\n# the CFLAGS where needed.\n#\nCFLAGS =\nCFLAGS.core = -fPIC\n\n#\n# $(SHELL_OPT) contains CFLAGS for building the sqlite3 CLI shell.\n# See main.mk for other potentially-relevant vars which may need\n# tweaking, like $(LDFLAGS_READLINE).\n#\nSHELL_OPT += -DHAVE_READLINE=1\nSHELL_OPT += -DSQLITE_HAVE_ZLIB=1\nLDFLAGS.readline = -lreadline # may need -lcurses etc, depending on the system\nCFLAGS.readline = # needs -I... if readline.h is in an unusual place.\nLDFLAGS.zlib = -lz\n\n#\n# Library's version number.\n#\nPACKAGE_VERSION ?= $(shell cat $(TOP)/VERSION 2>/dev/null)\n\n# sqlite_cfg.h is typically created by the configure script. It's\n# commonly not needed but main.mk does not know that so we have to\n# create a dummy if we don't already have one.\nsqlite_cfg.h:\n\ttouch $@\ndistclean-.:\n\trm -f sqlite_cfg.h\n\n#\n# With the above in place, we can now import the rules make use of\n# it...\n#\ninclude $(TOP)/main.mk\n"
        },
        {
          "name": "Makefile.msc",
          "type": "blob",
          "size": 86.8720703125,
          "content": "#\n# nmake Makefile for SQLite\n#\n###############################################################################\n############################## START OF OPTIONS ###############################\n###############################################################################\n\n# The toplevel directory of the source tree.  This is the directory\n# that contains this \"Makefile.msc\".\n#\nTOP = .\n\n# <<mark>>\n# Set this non-0 to create and use the SQLite amalgamation file.\n#\n!IFNDEF USE_AMALGAMATION\nUSE_AMALGAMATION = 1\n!ENDIF\n# <</mark>>\n\n# Optionally set EXTRA_SRC to a list of C files to append to\n# the generated sqlite3.c. Any sqlite3 extensions added this\n# way may require manual editing, as described in\n# https://sqlite.org/forum/forumpost/903f721f3e7c0d25\n#\n!IFNDEF EXTRA_SRC\nEXTRA_SRC =\n!ENDIF\n\n# Set this non-0 to enable full warnings (-W4, etc) when compiling.\n#\n!IFNDEF USE_FULLWARN\nUSE_FULLWARN = 1\n!ENDIF\n\n# Set this non-0 to enable treating warnings as errors (-WX, etc) when\n# compiling.\n#\n!IFNDEF USE_FATAL_WARN\nUSE_FATAL_WARN = 0\n!ENDIF\n\n# Set this non-0 to enable full runtime error checks (-RTC1, etc).  This\n# has no effect if (any) optimizations are enabled.\n#\n!IFNDEF USE_RUNTIME_CHECKS\nUSE_RUNTIME_CHECKS = 0\n!ENDIF\n\n# Set this non-0 to create a SQLite amalgamation file that excludes the\n# various built-in extensions.\n#\n!IFNDEF MINIMAL_AMALGAMATION\nMINIMAL_AMALGAMATION = 0\n!ENDIF\n\n# Set this non-0 to use \"stdcall\" calling convention for the core library\n# and shell executable.\n#\n!IFNDEF USE_STDCALL\nUSE_STDCALL = 0\n!ENDIF\n\n# Use the USE_SEH=0 option on the nmake command line to omit structured\n# exception handling (SEH) support.  SEH is on by default.\n#\n!IFNDEF USE_SEH\nUSE_SEH = 1\n!ENDIF\n\n# Use STATICALLY_LINK_TCL=1 to statically link against TCL\n#\n!IFNDEF STATICALLY_LINK_TCL\nSTATICALLY_LINK_TCL = 0\n!ELSEIF $(STATICALLY_LINK_TCL)!=0\nCCOPTS = $(CCOPTS) -DSTATIC_BUILD\n!ENDIF\n\n# Set this non-0 to have the shell executable link against the core dynamic\n# link library.\n#\n!IFNDEF DYNAMIC_SHELL\nDYNAMIC_SHELL = 0\n!ENDIF\n\n# Set this non-0 to enable extra code that attempts to detect misuse of the\n# SQLite API.\n#\n!IFNDEF API_ARMOR\nAPI_ARMOR = 0\n!ENDIF\n\n# If necessary, create a list of harmless compiler warnings to disable when\n# compiling the various tools.  For the SQLite source code itself, warnings,\n# if any, will be disabled from within it.\n#\n!IFNDEF NO_WARN\n!IF $(USE_FULLWARN)!=0\nNO_WARN = -wd4054 -wd4055 -wd4100 -wd4127 -wd4130 -wd4152 -wd4189 -wd4206\nNO_WARN = $(NO_WARN) -wd4210 -wd4232 -wd4244 -wd4305 -wd4306 -wd4702 -wd4706\n!ENDIF\n!ENDIF\n\n# Set this non-0 to use the library paths and other options necessary for\n# Windows Phone 8.1.\n#\n!IFNDEF USE_WP81_OPTS\nUSE_WP81_OPTS = 0\n!ENDIF\n\n# Set this non-0 to split the SQLite amalgamation file into chunks to\n# be used for debugging with Visual Studio.\n#\n!IFNDEF SPLIT_AMALGAMATION\nSPLIT_AMALGAMATION = 0\n!ENDIF\n\n# <<mark>>\n# Set this non-0 to have this makefile assume the Tcl shell executable\n# (tclsh*.exe) is available in the PATH.  By default, this is disabled\n# for compatibility with older build environments.  This setting only\n# applies if TCLSH_CMD is not set manually.\n#\n!IFNDEF USE_TCLSH_IN_PATH\nUSE_TCLSH_IN_PATH = 0\n!ENDIF\n\n# Set this non-0 to use zlib, possibly compiling it from source code.\n#\n!IFNDEF USE_ZLIB\nUSE_ZLIB = 0\n!ENDIF\n\n# Set this non-0 to build zlib from source code.  This is enabled by\n# default and in that case it will be assumed that the ZLIBDIR macro\n# points to the top-level source code directory for zlib.\n#\n!IFNDEF BUILD_ZLIB\nBUILD_ZLIB = 1\n!ENDIF\n\n# Set this non-0 to use the International Components for Unicode (ICU).\n#\n!IFNDEF USE_ICU\nUSE_ICU = 0\n!ENDIF\n# <</mark>>\n\n# Set this non-0 to dynamically link to the MSVC runtime library.\n#\n!IFNDEF USE_CRT_DLL\nUSE_CRT_DLL = 0\n!ENDIF\n\n# Set this non-0 to link to the RPCRT4 library.\n#\n!IFNDEF USE_RPCRT4_LIB\nUSE_RPCRT4_LIB = 0\n!ENDIF\n\n# Set this non-0 to generate assembly code listings for the source code\n# files.\n#\n!IFNDEF USE_LISTINGS\nUSE_LISTINGS = 0\n!ENDIF\n\n# Set this non-0 to attempt setting the native compiler automatically\n# for cross-compiling the command line tools needed during the compilation\n# process.\n#\n!IFNDEF XCOMPILE\nXCOMPILE = 0\n!ENDIF\n\n# Set this non-0 to use the native libraries paths for cross-compiling\n# the command line tools needed during the compilation process.\n#\n!IFNDEF USE_NATIVE_LIBPATHS\nUSE_NATIVE_LIBPATHS = 0\n!ENDIF\n\n# Set this 0 to skip the compiling and embedding of version resources.\n#\n!IFNDEF USE_RC\nUSE_RC = 1\n!ENDIF\n\n# Set this non-0 to compile binaries suitable for the WinRT environment.\n# This setting does not apply to any binaries that require Tcl to operate\n# properly (i.e. the text fixture, etc).\n#\n!IFNDEF FOR_WINRT\nFOR_WINRT = 0\n!ENDIF\n\n# Set this non-0 to compile binaries suitable for the UWP environment.\n# This setting does not apply to any binaries that require Tcl to operate\n# properly (i.e. the text fixture, etc).\n#\n!IFNDEF FOR_UWP\nFOR_UWP = 0\n!ENDIF\n\n# Set this non-0 to compile binaries suitable for the Windows 10 platform.\n#\n!IFNDEF FOR_WIN10\nFOR_WIN10 = 0\n!ENDIF\n\n# <<mark>>\n# Set this non-0 to skip attempting to look for and/or link with the Tcl\n# runtime library.\n#\n!IFNDEF NO_TCL\nNO_TCL = 0\n!ENDIF\n# <</mark>>\n\n# Set this to non-0 to create and use PDBs.\n#\n!IFNDEF SYMBOLS\nSYMBOLS = 1\n!ENDIF\n\n# Set this to non-0 to use the SQLite debugging heap subsystem.\n#\n!IFNDEF MEMDEBUG\nMEMDEBUG = 0\n!ENDIF\n\n# Set this to non-0 to use the Win32 native heap subsystem.\n#\n!IFNDEF WIN32HEAP\nWIN32HEAP = 0\n!ENDIF\n\n# Set this to non-0 to enable OSTRACE() macros, which can be useful when\n# debugging.\n#\n!IFNDEF OSTRACE\nOSTRACE = 0\n!ENDIF\n\n# enable address sanitizer using ASAN=1 on the command-line.\n#\n!IFNDEF ASAN\nASAN = 0\n!ENDIF\n\n# Set this to one of the following values to enable various debugging\n# features.  Each level includes the debugging options from the previous\n# levels.  Currently, the recognized values for DEBUG are:\n#\n# 0 == NDEBUG: Disables assert() and other runtime diagnostics.\n# 1 == SQLITE_ENABLE_API_ARMOR: extra attempts to detect misuse of the API.\n# 2 == Disables NDEBUG and all optimizations and then enables PDBs.\n# 3 == SQLITE_DEBUG: Enables various diagnostics messages and code.\n# 4 == SQLITE_WIN32_MALLOC_VALIDATE: Validate the Win32 native heap per call.\n# 5 == SQLITE_DEBUG_OS_TRACE: Enables output from the OSTRACE() macros.\n# 6 == SQLITE_ENABLE_IOTRACE: Enables output from the IOTRACE() macros.\n#\n!IFNDEF DEBUG\nDEBUG = 0\n!ENDIF\n\n# <<mark>>\n# By default, use --linemacros=1 argument to the mksqlite3c.tcl tool, which\n# is used to build the amalgamation. This can be turned off to ease debug\n# of the amalgamation away from the source tree.\n#\n!IFNDEF NO_LINEMACROS\nNO_LINEMACROS = 0\n!ENDIF\n# <</mark>>\n\n# Enable use of available compiler optimizations?  Normally, this should be\n# non-zero.  Setting this to zero, thus disabling all compiler optimizations,\n# can be useful for testing.\n#\n!IFNDEF OPTIMIZATIONS\nOPTIMIZATIONS = 2\n!ENDIF\n\n# Set this to non-0 to enable support for the session extension.\n#\n!IFNDEF SESSION\nSESSION = 0\n!ENDIF\n\n# Set this to non-0 to enable support for the rbu extension.\n#\n!IFNDEF RBU\nRBU = 0\n!ENDIF\n\n# Set the source code file to be used by executables and libraries when\n# they need the amalgamation.\n#\n!IFNDEF SQLITE3C\n!IF $(SPLIT_AMALGAMATION)!=0\nSQLITE3C = sqlite3-all.c\n!ELSE\nSQLITE3C = sqlite3.c\n!ENDIF\n!ENDIF\n\n# Set the include code file to be used by executables and libraries when\n# they need SQLite.\n#\n!IFNDEF SQLITE3H\nSQLITE3H = sqlite3.h\n!ENDIF\n\n# This is the name to use for the SQLite dynamic link library (DLL).\n#\n!IFNDEF SQLITE3DLL\n!IF $(FOR_WIN10)!=0\nSQLITE3DLL = winsqlite3.dll\n!ELSE\nSQLITE3DLL = sqlite3.dll\n!ENDIF\n!ENDIF\n\n# This is the name to use for the SQLite import library (LIB).\n#\n!IFNDEF SQLITE3LIB\n!IF $(FOR_WIN10)!=0\nSQLITE3LIB = winsqlite3.lib\n!ELSE\nSQLITE3LIB = sqlite3.lib\n!ENDIF\n!ENDIF\n\n# This is the name to use for the SQLite shell executable (EXE).\n#\n!IFNDEF SQLITE3EXE\n!IF $(FOR_WIN10)!=0\nSQLITE3EXE = winsqlite3shell.exe\n!ELSE\nSQLITE3EXE = sqlite3.exe\n!ENDIF\n!ENDIF\n\n# This is the argument used to set the program database (PDB) file for the\n# SQLite shell executable (EXE).\n#\n!IFNDEF SQLITE3EXEPDB\n!IF $(FOR_WIN10)!=0\nSQLITE3EXEPDB =\n!ELSE\nSQLITE3EXEPDB = /pdb:sqlite3sh.pdb\n!ENDIF\n!ENDIF\n\n# <<mark>>\n# These are the names of the customized Tcl header files used by various parts\n# of this makefile when the stdcall calling convention is in use.  It is not\n# used for any other purpose.\n#\n!IFNDEF SQLITETCLH\nSQLITETCLH = sqlite_tcl.h\n!ENDIF\n\n!IFNDEF SQLITETCLDECLSH\nSQLITETCLDECLSH = sqlite_tclDecls.h\n!ENDIF\n\n# This is the name to use for the dynamic link library (DLL) containing the\n# Tcl bindings for SQLite.\n#\n!IFNDEF SQLITE3TCLDLL\nSQLITE3TCLDLL = tclsqlite3.dll\n!ENDIF\n\n# These are the additional targets that the targets that integrate with the\n# Tcl library should depend on when compiling, etc.\n#\n!IFNDEF SQLITE_TCL_DEP\n!IF $(USE_STDCALL)!=0 || $(FOR_WIN10)!=0\nSQLITE_TCL_DEP = $(SQLITETCLDECLSH) $(SQLITETCLH)\n!ELSE\nSQLITE_TCL_DEP =\n!ENDIF\n!ENDIF\n# <</mark>>\n\n# These are the \"standard\" SQLite compilation options used when compiling for\n# the Windows platform.\n#\n!IFNDEF OPT_FEATURE_FLAGS\nOPT_FEATURE_FLAGS = $(OPT_XTRA)\n!IF $(MINIMAL_AMALGAMATION)==0\nOPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_FTS3=1\nOPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_FTS5=1\nOPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_RTREE=1\nOPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_GEOPOLY=1\nOPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_STMTVTAB=1\nOPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_DBPAGE_VTAB=1\nOPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_DBSTAT_VTAB=1\nOPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_BYTECODE_VTAB=1\n!ENDIF\nOPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_COLUMN_METADATA=1\n!ENDIF\n\n# Additional feature-options above and beyond what are normally used can be\n# be added using OPTIONS=.... on the command-line.  These values are\n# appended to the OPT_FEATURE_FLAGS variable.\n#\n!IFDEF OPTIONS\nOPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) $(OPTIONS)\n!ENDIF\n\n# Should the session extension be enabled?  If so, add compilation options\n# to enable it.\n#\n!IF $(SESSION)!=0\nOPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_SESSION=1\nOPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_PREUPDATE_HOOK=1\n!ENDIF\n\n# Always enable math functions on Windows\nOPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_MATH_FUNCTIONS\n\n# Should the rbu extension be enabled?  If so, add compilation options\n# to enable it.\n#\n!IF $(RBU)!=0\nOPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_RBU=1\n!ENDIF\n\n# Should structured exception handling (SEH) be enabled for WAL mode in\n# the core library?  It is on by default.  Only omit it if the\n# USE_SEH=0 option is provided on the nmake command-line.\n#\n!IF $(USE_SEH)==0\nOPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_OMIT_SEH=1\n!ENDIF\n\n# These are the \"extended\" SQLite compilation options used when compiling for\n# the Windows 10 platform.\n#\n!IFNDEF EXT_FEATURE_FLAGS\n!IF $(FOR_WIN10)!=0\nEXT_FEATURE_FLAGS = $(EXT_FEATURE_FLAGS) -DSQLITE_ENABLE_FTS4=1\nEXT_FEATURE_FLAGS = $(EXT_FEATURE_FLAGS) -DSQLITE_SYSTEM_MALLOC=1\nEXT_FEATURE_FLAGS = $(EXT_FEATURE_FLAGS) -DSQLITE_OMIT_LOCALTIME=1\n!ELSE\nEXT_FEATURE_FLAGS =\n!ENDIF\n!ENDIF\n\n###############################################################################\n############################### END OF OPTIONS ################################\n###############################################################################\n\n# When compiling for the Windows 10 platform, the PLATFORM macro must be set\n# to an appropriate value (e.g. x86, x64, arm, arm64, etc).\n#\n!IF $(FOR_WIN10)!=0\n!IFNDEF PLATFORM\n!ERROR Using the FOR_WIN10 option requires a value for PLATFORM.\n!ENDIF\n!ENDIF\n\n# This assumes that MSVC is always installed in 32-bit Program Files directory\n# and sets the variable for use in locating other 32-bit installs accordingly.\n#\nPROGRAMFILES_X86 = $(VCINSTALLDIR)\\..\\..\nPROGRAMFILES_X86 = $(PROGRAMFILES_X86:\\\\=\\)\n\n# Check for the predefined command macro CC.  This should point to the compiler\n# binary for the target platform.  If it is not defined, simply define it to\n# the legacy default value 'cl.exe'.\n#\n!IFNDEF CC\nCC = cl.exe\n!ENDIF\n\n# Check for the predefined command macro CSC.  This should point to a working\n# C Sharp compiler binary.  If it is not defined, simply define it to the\n# legacy default value 'csc.exe'.\n#\n!IFNDEF CSC\nCSC = csc.exe\n!ENDIF\n\n# Check for the command macro LD.  This should point to the linker binary for\n# the target platform.  If it is not defined, simply define it to the legacy\n# default value 'link.exe'.\n#\n!IFNDEF LD\nLD = link.exe\n!ENDIF\n\n# Check for the predefined command macro RC.  This should point to the resource\n# compiler binary for the target platform.  If it is not defined, simply define\n# it to the legacy default value 'rc.exe'.\n#\n!IFNDEF RC\nRC = rc.exe\n!ENDIF\n\n# Check for the MSVC runtime library path macro.  Otherwise, this value will\n# default to the 'lib' directory underneath the MSVC installation directory.\n#\n!IFNDEF CRTLIBPATH\nCRTLIBPATH = $(VCINSTALLDIR)\\lib\n!ENDIF\n\nCRTLIBPATH = $(CRTLIBPATH:\\\\=\\)\n\n# Check for the command macro NCC.  This should point to the compiler binary\n# for the platform the compilation process is taking place on.  If it is not\n# defined, simply define it to have the same value as the CC macro.  When\n# cross-compiling, it is suggested that this macro be modified via the command\n# line (since nmake itself does not provide a built-in method to guess it).\n# For example, to use the x86 compiler when cross-compiling for x64, a command\n# line similar to the following could be used (all on one line):\n#\n#     nmake /f Makefile.msc sqlite3.dll\n#           XCOMPILE=1 USE_NATIVE_LIBPATHS=1\n#\n# Alternatively, the full path and file name to the compiler binary for the\n# platform the compilation process is taking place may be specified (all on\n# one line):\n#\n#     nmake /f Makefile.msc sqlite3.dll\n#           \"NCC=\"\"%VCINSTALLDIR%\\bin\\cl.exe\"\"\"\n#           USE_NATIVE_LIBPATHS=1\n#\n!IFDEF NCC\nNCC = $(NCC:\\\\=\\)\n!ELSEIF $(XCOMPILE)!=0\nNCC = \"$(VCINSTALLDIR)\\bin\\$(CC)\"\nNCC = $(NCC:\\\\=\\)\n!ELSE\nNCC = $(CC)\n!ENDIF\n\n# Check for the MSVC native runtime library path macro.  Otherwise,\n# this value will default to the 'lib' directory underneath the MSVC\n# installation directory.\n#\n!IFNDEF NCRTLIBPATH\nNCRTLIBPATH = $(VCINSTALLDIR)\\lib\n!ENDIF\n\nNCRTLIBPATH = $(NCRTLIBPATH:\\\\=\\)\n\n# Check for the Platform SDK library path macro.  Otherwise, this\n# value will default to the 'lib' directory underneath the Windows\n# SDK installation directory (the environment variable used appears\n# to be available when using Visual C++ 2008 or later via the\n# command line).\n#\n!IFNDEF NSDKLIBPATH\nNSDKLIBPATH = $(WINDOWSSDKDIR)\\lib\n!ENDIF\n\nNSDKLIBPATH = $(NSDKLIBPATH:\\\\=\\)\n\n# Check for the UCRT library path macro.  Otherwise, this value will\n# default to the version-specific, platform-specific 'lib' directory\n# underneath the Windows SDK installation directory.\n#\n!IFNDEF UCRTLIBPATH\nUCRTLIBPATH = $(WINDOWSSDKDIR)\\lib\\$(WINDOWSSDKLIBVERSION)\\ucrt\\$(PLATFORM)\n!ENDIF\n\nUCRTLIBPATH = $(UCRTLIBPATH:\\\\=\\)\n\n# C compiler and options for use in building executables that\n# will run on the platform that is doing the build.\n#\n!IF $(USE_FULLWARN)!=0\nBCC = $(NCC) -nologo -W4 -Fd$*.pdb $(CCOPTS) $(BCCOPTS)\n!ELSE\nBCC = $(NCC) -nologo -W3 -Fd$*.pdb $(CCOPTS) $(BCCOPTS)\n!ENDIF\n\n# Check if assembly code listings should be generated for the source\n# code files to be compiled.\n#\n!IF $(USE_LISTINGS)!=0\nBCC = $(BCC) -FAcs\n!ENDIF\n\n# Check if the native library paths should be used when compiling\n# the command line tools used during the compilation process.  If\n# so, set the necessary macro now.\n#\n!IF $(USE_NATIVE_LIBPATHS)!=0\nNLTLIBPATHS = \"/LIBPATH:$(NCRTLIBPATH)\" \"/LIBPATH:$(NSDKLIBPATH)\"\n\n!IFDEF NUCRTLIBPATH\nNUCRTLIBPATH = $(NUCRTLIBPATH:\\\\=\\)\nNLTLIBPATHS = $(NLTLIBPATHS) \"/LIBPATH:$(NUCRTLIBPATH)\"\n!ENDIF\n!ENDIF\n\n# C compiler and options for use in building executables that\n# will run on the target platform.  (BCC and TCC are usually the\n# same unless your are cross-compiling.)\n#\n!IF $(USE_FULLWARN)!=0\nTCC = $(CC) -nologo -W4 -DINCLUDE_MSVC_H=1 $(CCOPTS) $(TCCOPTS)\n!ELSE\nTCC = $(CC) -nologo -W3 $(CCOPTS) $(TCCOPTS)\n!ENDIF\n\n# Check if warnings should be treated as errors when compiling.\n#\n!IF $(USE_FATAL_WARN)!=0\nTCC = $(TCC) -WX\n!ENDIF\n\nTCC = $(TCC) -DSQLITE_OS_WIN=1 -I. -I$(TOP) -I$(TOP)\\src -fp:precise\nRCC = $(RC) -DSQLITE_OS_WIN=1 -I. -I$(TOP) -I$(TOP)\\src $(RCOPTS) $(RCCOPTS)\n\n# Check if we want to use the \"stdcall\" calling convention when compiling.\n# This is not supported by the compilers for non-x86 platforms.  It should\n# also be noted here that building any target with these \"stdcall\" options\n# will most likely fail if the Tcl library is also required.  This is due\n# to how the Tcl library functions are declared and exported (i.e. without\n# an explicit calling convention, which results in \"cdecl\").\n#\n!IF $(USE_STDCALL)!=0 || $(FOR_WIN10)!=0\n!IF \"$(PLATFORM)\"==\"x86\"\nCORE_CCONV_OPTS = -Gz -guard:cf -DSQLITE_CDECL=__cdecl -DSQLITE_APICALL=__stdcall -DSQLITE_CALLBACK=__stdcall -DSQLITE_SYSAPI=__stdcall\nSHELL_CCONV_OPTS = -Gz -guard:cf -DSQLITE_CDECL=__cdecl -DSQLITE_APICALL=__stdcall -DSQLITE_CALLBACK=__stdcall -DSQLITE_SYSAPI=__stdcall\n# <<mark>>\nTEST_CCONV_OPTS = -Gz -guard:cf -DSQLITE_CDECL=__cdecl -DSQLITE_APICALL=__stdcall -DSQLITE_CALLBACK=__stdcall -DSQLITE_SYSAPI=__stdcall -DINCLUDE_SQLITE_TCL_H=1 -DSQLITE_TCLAPI=__cdecl\n# <</mark>>\n!ELSE\n!IFNDEF PLATFORM\nCORE_CCONV_OPTS = -Gz -guard:cf -DSQLITE_CDECL=__cdecl -DSQLITE_APICALL=__stdcall -DSQLITE_CALLBACK=__stdcall -DSQLITE_SYSAPI=__stdcall\nSHELL_CCONV_OPTS = -Gz -guard:cf -DSQLITE_CDECL=__cdecl -DSQLITE_APICALL=__stdcall -DSQLITE_CALLBACK=__stdcall -DSQLITE_SYSAPI=__stdcall\n# <<mark>>\nTEST_CCONV_OPTS = -Gz -guard:cf -DSQLITE_CDECL=__cdecl -DSQLITE_APICALL=__stdcall -DSQLITE_CALLBACK=__stdcall -DSQLITE_SYSAPI=__stdcall -DINCLUDE_SQLITE_TCL_H=1 -DSQLITE_TCLAPI=__cdecl\n# <</mark>>\n!ELSE\nCORE_CCONV_OPTS =\nSHELL_CCONV_OPTS =\n# <<mark>>\nTEST_CCONV_OPTS =\n# <</mark>>\n!ENDIF\n!ENDIF\n!ELSE\nCORE_CCONV_OPTS =\nSHELL_CCONV_OPTS =\n# <<mark>>\nTEST_CCONV_OPTS =\n# <</mark>>\n!ENDIF\n\n# These are additional compiler options used for the core library.\n#\n!IFNDEF CORE_COMPILE_OPTS\n!IF $(DYNAMIC_SHELL)!=0 || $(FOR_WIN10)!=0\nCORE_COMPILE_OPTS = $(CORE_CCONV_OPTS) -DSQLITE_API=__declspec(dllexport)\n!ELSE\nCORE_COMPILE_OPTS = $(CORE_CCONV_OPTS)\n!ENDIF\n!ENDIF\n\n# These are the additional targets that the core library should depend on\n# when linking.\n#\n!IFNDEF CORE_LINK_DEP\n!IF $(DYNAMIC_SHELL)!=0\nCORE_LINK_DEP =\n!ELSEIF $(FOR_WIN10)==0 || \"$(PLATFORM)\"==\"x86\"\nCORE_LINK_DEP = sqlite3.def\n!ELSE\nCORE_LINK_DEP =\n!ENDIF\n!ENDIF\n\n# These are additional linker options used for the core library.\n#\n!IFNDEF CORE_LINK_OPTS\n!IF $(DYNAMIC_SHELL)!=0\nCORE_LINK_OPTS =\n!ELSEIF $(FOR_WIN10)==0 || \"$(PLATFORM)\"==\"x86\"\nCORE_LINK_OPTS = /DEF:sqlite3.def\n!ELSE\nCORE_LINK_OPTS =\n!ENDIF\n!ENDIF\n\n# These are additional compiler options used for the shell executable.\n#\n!IFNDEF SHELL_COMPILE_OPTS\n!IF $(DYNAMIC_SHELL)!=0 || $(FOR_WIN10)!=0\nSHELL_COMPILE_OPTS = $(SHELL_CCONV_OPTS) -DSQLITE_API=__declspec(dllimport)\n!ELSE\nSHELL_COMPILE_OPTS = $(SHELL_CCONV_OPTS)\n!ENDIF\n!ENDIF\n\n# This is the source code that the shell executable should be compiled\n# with.\n#\n!IFNDEF SHELL_CORE_SRC\n!IF $(DYNAMIC_SHELL)!=0 || $(FOR_WIN10)!=0\nSHELL_CORE_SRC =\n# <<mark>>\n!ELSEIF $(USE_AMALGAMATION)==0\nSHELL_CORE_SRC =\n# <</mark>>\n!ELSE\nSHELL_CORE_SRC = $(SQLITE3C)\n!ENDIF\n!ENDIF\n\n# This is the core library that the shell executable should depend on.\n#\n!IFNDEF SHELL_CORE_DEP\n!IF $(DYNAMIC_SHELL)!=0 || $(FOR_WIN10)!=0\nSHELL_CORE_DEP = $(SQLITE3DLL)\n# <<mark>>\n!ELSEIF $(USE_AMALGAMATION)==0\nSHELL_CORE_DEP = libsqlite3.lib\n# <</mark>>\n!ELSE\nSHELL_CORE_DEP =\n!ENDIF\n!ENDIF\n\n# <<mark>>\n# If zlib support is enabled, add the dependencies for it.\n#\n!IF $(USE_ZLIB)!=0 && $(BUILD_ZLIB)!=0\nSHELL_CORE_DEP = zlib $(SHELL_CORE_DEP)\nTESTFIXTURE_DEP = zlib $(TESTFIXTURE_DEP)\n!ENDIF\n# <</mark>>\n\n# This is the core library that the shell executable should link with.\n#\n!IFNDEF SHELL_CORE_LIB\n!IF $(DYNAMIC_SHELL)!=0 || $(FOR_WIN10)!=0\nSHELL_CORE_LIB = $(SQLITE3LIB)\n# <<mark>>\n!ELSEIF $(USE_AMALGAMATION)==0\nSHELL_CORE_LIB = libsqlite3.lib\n# <</mark>>\n!ELSE\nSHELL_CORE_LIB =\n!ENDIF\n!ENDIF\n\n# These are additional linker options used for the shell executable.\n#\n!IFNDEF SHELL_LINK_OPTS\nSHELL_LINK_OPTS = $(SHELL_CORE_LIB)\n!ENDIF\n\n# Check if assembly code listings should be generated for the source\n# code files to be compiled.\n#\n!IF $(USE_LISTINGS)!=0\nTCC = $(TCC) -FAcs\n!ENDIF\n\n# When compiling the library for use in the WinRT environment,\n# the following compile-time options must be used as well to\n# disable use of Win32 APIs that are not available and to enable\n# use of Win32 APIs that are specific to Windows 8 and/or WinRT.\n#\n!IF $(FOR_WINRT)!=0\nTCC = $(TCC) -DSQLITE_OS_WINRT=1\nRCC = $(RCC) -DSQLITE_OS_WINRT=1\nTCC = $(TCC) -DWINAPI_FAMILY=WINAPI_FAMILY_APP\nRCC = $(RCC) -DWINAPI_FAMILY=WINAPI_FAMILY_APP\n!ENDIF\n\n# C compiler options for the Windows 10 platform (needs MSVC 2015).\n#\n!IF $(FOR_WIN10)!=0\nTCC = $(TCC) /d2guard4 -D_ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE\nBCC = $(BCC) /d2guard4 -D_ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE\n!ENDIF\n\n# Also, we need to dynamically link to the correct MSVC runtime\n# when compiling for WinRT (e.g. debug or release) OR if the\n# USE_CRT_DLL option is set to force dynamically linking to the\n# MSVC runtime library.\n#\n!IF $(FOR_WINRT)!=0 || $(USE_CRT_DLL)!=0\n!IF $(DEBUG)>1\nTCC = $(TCC) -MDd\nBCC = $(BCC) -MDd\n!ELSE\nTCC = $(TCC) -MD\nBCC = $(BCC) -MD\n!ENDIF\n!ELSE\n!IF $(DEBUG)>1\nTCC = $(TCC) -MTd\nBCC = $(BCC) -MTd\n!ELSE\nTCC = $(TCC) -MT\nBCC = $(BCC) -MT\n!ENDIF\n!ENDIF\n\n# <<mark>>\n# The mksqlite3c.tcl and mksqlite3h.tcl scripts will pull in\n# any extension header files by default.  For non-amalgamation\n# builds, we need to make sure the compiler can find these.\n#\n!IF $(USE_AMALGAMATION)==0\nTCC = $(TCC) -I$(TOP)\\ext\\fts3\nRCC = $(RCC) -I$(TOP)\\ext\\fts3\nTCC = $(TCC) -I$(TOP)\\ext\\rtree\nRCC = $(RCC) -I$(TOP)\\ext\\rtree\nTCC = $(TCC) -I$(TOP)\\ext\\session\nRCC = $(RCC) -I$(TOP)\\ext\\session\n!ENDIF\n\n# The mksqlite3c.tcl script accepts some options on the command\n# line.  When compiling with debugging enabled, some of these\n# options are necessary in order to allow debugging symbols to\n# work correctly with Visual Studio when using the amalgamation.\n#\n!IFNDEF MKSQLITE3C_TOOL\n!IF $(MINIMAL_AMALGAMATION)!=0\nMKSQLITE3C_TOOL = $(TOP)\\tool\\mksqlite3c-noext.tcl\n!ELSE\nMKSQLITE3C_TOOL = $(TOP)\\tool\\mksqlite3c.tcl\n!ENDIF\n!ENDIF\n\n!IFNDEF MKSQLITE3C_ARGS\n!IF $(DEBUG)>1 && $(NO_LINEMACROS)==0\nMKSQLITE3C_ARGS = --linemacros=1\n!ELSE\nMKSQLITE3C_ARGS = --linemacros=0\n!ENDIF\n!IF $(USE_STDCALL)!=0 || $(FOR_WIN10)!=0\nMKSQLITE3C_ARGS = $(MKSQLITE3C_ARGS) --useapicall\n!ENDIF\n!ENDIF\n\n# The mksqlite3h.tcl script accepts some options on the command line.\n# When compiling with stdcall support, some of these options are\n# necessary.\n#\n!IFNDEF MKSQLITE3H_ARGS\n!IF $(USE_STDCALL)!=0 || $(FOR_WIN10)!=0\nMKSQLITE3H_ARGS = --useapicall\n!ELSE\nMKSQLITE3H_ARGS =\n!ENDIF\n!ENDIF\n# <</mark>>\n\n# Define -DNDEBUG to compile without debugging (i.e., for production usage)\n# Omitting the define will cause extra debugging code to be inserted and\n# includes extra comments when \"EXPLAIN stmt\" is used.\n#\n!IF $(DEBUG)==0\nTCC = $(TCC) -DNDEBUG\nBCC = $(BCC) -DNDEBUG\nRCC = $(RCC) -DNDEBUG\n!ENDIF\n\n!IF $(DEBUG)>0 || $(API_ARMOR)!=0 || $(FOR_WIN10)!=0\nTCC = $(TCC) -DSQLITE_ENABLE_API_ARMOR=1\nRCC = $(RCC) -DSQLITE_ENABLE_API_ARMOR=1\n!ENDIF\n\n!IF $(DEBUG)>2\nTCC = $(TCC) -DSQLITE_DEBUG=1\nRCC = $(RCC) -DSQLITE_DEBUG=1\n!IF $(DYNAMIC_SHELL)==0\nTCC = $(TCC) -DSQLITE_ENABLE_WHERETRACE -DSQLITE_ENABLE_SELECTTRACE\nRCC = $(RCC) -DSQLITE_ENABLE_WHERETRACE -DSQLITE_ENABLE_SELECTTRACE\n!ENDIF\n!ENDIF\n\n!IF $(DEBUG)>4 || $(OSTRACE)!=0\nTCC = $(TCC) -DSQLITE_FORCE_OS_TRACE=1 -DSQLITE_DEBUG_OS_TRACE=1\nRCC = $(RCC) -DSQLITE_FORCE_OS_TRACE=1 -DSQLITE_DEBUG_OS_TRACE=1\n!ENDIF\n\n!IF $(DEBUG)>5\nTCC = $(TCC) -DSQLITE_ENABLE_IOTRACE=1\nRCC = $(RCC) -DSQLITE_ENABLE_IOTRACE=1\n!ENDIF\n\n# Prevent warnings about \"insecure\" MSVC runtime library functions\n# being used.\n#\nTCC = $(TCC) -D_CRT_SECURE_NO_DEPRECATE -D_CRT_SECURE_NO_WARNINGS\nBCC = $(BCC) -D_CRT_SECURE_NO_DEPRECATE -D_CRT_SECURE_NO_WARNINGS\nRCC = $(RCC) -D_CRT_SECURE_NO_DEPRECATE -D_CRT_SECURE_NO_WARNINGS\n\n# Prevent warnings about \"deprecated\" POSIX functions being used.\n#\nTCC = $(TCC) -D_CRT_NONSTDC_NO_DEPRECATE -D_CRT_NONSTDC_NO_WARNINGS\nBCC = $(BCC) -D_CRT_NONSTDC_NO_DEPRECATE -D_CRT_NONSTDC_NO_WARNINGS\nRCC = $(RCC) -D_CRT_NONSTDC_NO_DEPRECATE -D_CRT_NONSTDC_NO_WARNINGS\n\n# Use the SQLite debugging heap subsystem?\n#\n!IF $(MEMDEBUG)!=0\nTCC = $(TCC) -DSQLITE_MEMDEBUG=1\nRCC = $(RCC) -DSQLITE_MEMDEBUG=1\n\n# Use native Win32 heap subsystem instead of malloc/free?\n#\n!ELSEIF $(WIN32HEAP)!=0\nTCC = $(TCC) -DSQLITE_WIN32_MALLOC=1\nRCC = $(RCC) -DSQLITE_WIN32_MALLOC=1\n\n# Validate the heap on every call into the native Win32 heap subsystem?\n#\n!IF $(DEBUG)>3\nTCC = $(TCC) -DSQLITE_WIN32_MALLOC_VALIDATE=1\nRCC = $(RCC) -DSQLITE_WIN32_MALLOC_VALIDATE=1\n!ENDIF\n!ENDIF\n\n\n# Address sanitizer if ASAN=1\n#\n!IF $(ASAN)>0\nTCC = $(TCC) /fsanitize=address\n!ENDIF\n\n# <<mark>>\n# The locations of the Tcl header and library files.  Also, the library that\n# non-stubs enabled programs using Tcl must link against.  These variables\n# (TCLINCDIR, TCLLIBDIR, and LIBTCL) may be overridden via the environment\n# prior to running nmake in order to match the actual installed location and\n# version on this machine.\n#\n!IF $(STATICALLY_LINK_TCL)!=0\nTCLSUFFIX = s\n!ENDIF\n!IFNDEF TCLSUFFIX\nTCLSUFFIX =\n!ENDIF\n\n!IFNDEF TCLDIR\nTCLDIR = C:\\Tcl\n!ENDIF\n\n!IFNDEF TCLVERSION\n!IF EXISTS(\"$(TCLDIR)\\lib\\tcl90$(TCLSUFFIX).lib\")\nTCLVERSION = 90\n!ELSEIF EXISTS(\"$(TCLDIR)\\lib\\tcl86$(TCLSUFFIX).lib\")\nTCLVERSION = 86\n!ELSEIF EXISTS(\"$(TCLDIR)\\lib\\tcl86t.lib\")\nTCLSUFFIX = t\nTCLVERSION = 86\n!ELSE\nTCLVERSION = 90\n!ENDIF\n!ENDIF\n\n!IFNDEF TCLINCDIR\nTCLINCDIR = $(TCLDIR)\\include\n!ENDIF\n\n!IFNDEF TCLLIBDIR\nTCLLIBDIR = $(TCLDIR)\\lib\n!ENDIF\n\n!IFNDEF LIBTCL\nLIBTCL = tcl$(TCLVERSION)$(TCLSUFFIX).lib\n!ENDIF\n\n!IFNDEF TCLLIBS\n!IF $(STATICALLY_LINK_TCL)!=0\nTCLLIBS = /NODEFAULTLIB:libucrt.lib netapi32.lib user32.lib ucrt.lib\n!ELSE\nTCLLIBS =\n!ENDIF\n!ENDIF\n\n!IFNDEF LIBTCLSTUB\n!IF EXISTS(\"$(TCLLIBDIR)\\tclstub$(TCLVERSION)$(TCLSUFFIX).lib\")\nLIBTCLSTUB = tclstub$(TCLVERSION)$(TCLSUFFIX).lib\n!ELSEIF EXISTS(\"$(TCLLIBDIR)\\tclstub$(TCLSUFFIX).lib\")\nLIBTCLSTUB = tclstub$(TCLSUFFIX).lib\n!ELSEIF EXISTS(\"$(TCLLIBDIR)\\tclstub$(TCLVERSION).lib\")\nLIBTCLSTUB = tclstub$(TCLVERSION).lib\n!ELSE\nLIBTCLSTUB = tclstub.lib\n!ENDIF\n!ENDIF\n\n!IFNDEF LIBTCLPATH\nLIBTCLPATH = $(TCLDIR)\\bin\n!ENDIF\n\n# The locations of the zlib header and library files.  These variables\n# (ZLIBINCDIR, ZLIBLIBDIR, and ZLIBLIB) may be overridden via the environment\n# prior to running nmake in order to match the actual installed (or source\n# code) location on this machine.\n#\n!IFNDEF ZLIBDIR\nZLIBDIR = $(TOP)\\compat\\zlib\n!ENDIF\n\n!IFNDEF ZLIBINCDIR\nZLIBINCDIR = $(ZLIBDIR)\n!ENDIF\n\n!IFNDEF ZLIBLIBDIR\nZLIBLIBDIR = $(ZLIBDIR)\n!ENDIF\n\n!IFNDEF ZLIBLIB\n!IF $(DYNAMIC_SHELL)!=0\nZLIBLIB = zdll.lib\n!ELSE\nZLIBLIB = zlib.lib\n!ENDIF\n!ENDIF\n\n# The locations of the ICU header and library files.  These variables\n# (ICUINCDIR, ICULIBDIR, and LIBICU) may be overridden via the environment\n# prior to running nmake in order to match the actual installed location on\n# this machine.\n#\n!IFNDEF ICUDIR\nICUDIR = $(TOP)\\compat\\icu\n!ENDIF\n\n!IFNDEF ICUINCDIR\nICUINCDIR = $(ICUDIR)\\include\n!ENDIF\n\n!IFNDEF ICULIBDIR\nICULIBDIR = $(ICUDIR)\\lib\n!ENDIF\n\n!IFNDEF LIBICU\nLIBICU = icuuc.lib icuin.lib\n!ENDIF\n\n# This is the command to use for tclsh - normally just \"tclsh\", but we may\n# know the specific version we want to use.  This variable (TCLSH_CMD) may be\n# overridden via the environment prior to running nmake in order to select a\n# specific Tcl shell to use.\n#\n!IFNDEF TCLSH_CMD\n!IF EXISTS(\"$(TCLDIR)\\bin\\tclsh$(TCLVERSION).exe\")\nTCLSH_CMD = $(TCLDIR)\\bin\\tclsh$(TCLVERSION).exe\n!ELSEIF EXISTS(\"$(TCLDIR)\\bin\\tclsh90.exe\")\nTCLSH_CMD = $(TCLDIR)\\bin\\tclsh90.exe\n!ELSEIF EXISTS(\"$(TCLDIR)\\bin\\tclsh86.exe\")\nTCLSH_CMD = $(TCLDIR)\\bin\\tclsh86.exe\n!ELSEIF EXISTS(\"$(TCLDIR)\\bin\\tclsh86t.exe\")\nTCLSH_CMD = $(TCLDIR)\\bin\\tclsh86t.exe\n!ELSEIF EXISTS(\"$(TCLDIR)\\bin\\tclsh.exe\")\nTCLSH_CMD = $(TCLDIR)\\bin\\tclsh.exe\n!ELSE\nTCLSH_CMD = tclsh\n!ENDIF\n!ENDIF\n\n# A light-weight TCLSH replacement that can be used for code generation\n# but which is not adequate for testing.  This is \"jimsh0\" by default,\n# with source code in the repository.  To force the whole build to use\n# the full, official tclsh, add WITHOUT_JIMSH=1 to the nmake command line.\n#\n!IFDEF WITHOUT_JIMSH\nJIM_TCLSH = $(TCLSH_CMD)\n!ENDIF\n!IFNDEF JIM_TCLSH\nJIM_TCLSH = jimsh0.exe\n!ENDIF\n# <</mark>>\n\n# Compiler options needed for programs that use the readline() library.\n#\n!IFNDEF READLINE_FLAGS\nREADLINE_FLAGS = -DHAVE_READLINE=0\n!ENDIF\n\n# The library that programs using readline() must link against.\n#\n!IFNDEF LIBREADLINE\nLIBREADLINE =\n!ENDIF\n\n# Should the database engine be compiled threadsafe\n#\nTCC = $(TCC) -DSQLITE_THREADSAFE=1\nRCC = $(RCC) -DSQLITE_THREADSAFE=1\n\n# Do threads override each others locks by default (1), or do we test (-1)\n#\nTCC = $(TCC) -DSQLITE_THREAD_OVERRIDE_LOCK=-1\nRCC = $(RCC) -DSQLITE_THREAD_OVERRIDE_LOCK=-1\n\n# Any target libraries which libsqlite must be linked against\n#\n!IFNDEF TLIBS\nTLIBS =\n!ENDIF\n\n# Enable/disable loadable extensions, and other optional features\n# based on configuration. (-DSQLITE_OMIT*, -DSQLITE_ENABLE*).\n# The same set of OMIT and ENABLE flags should be passed to the\n# LEMON parser generator and the mkkeywordhash tool as well.\n\n# These are the required SQLite compilation options used when compiling for\n# the Windows platform.\n#\nREQ_FEATURE_FLAGS = $(REQ_FEATURE_FLAGS) -DSQLITE_MAX_TRIGGER_DEPTH=100\n\n# If we are linking to the RPCRT4 library, enable features that need it.\n#\n!IF $(USE_RPCRT4_LIB)!=0\nREQ_FEATURE_FLAGS = $(REQ_FEATURE_FLAGS) -DSQLITE_WIN32_USE_UUID=1\n!ENDIF\n\n# Add the required and optional SQLite compilation options into the command\n# lines used to invoke the MSVC code and resource compilers.\n#\nTCC = $(TCC) $(REQ_FEATURE_FLAGS) $(OPT_FEATURE_FLAGS) $(EXT_FEATURE_FLAGS)\nRCC = $(RCC) $(REQ_FEATURE_FLAGS) $(OPT_FEATURE_FLAGS) $(EXT_FEATURE_FLAGS)\n\n# Add in any optional parameters specified on the commane line, e.g.\n# nmake /f Makefile.msc all \"OPTS=-DSQLITE_ENABLE_FOO=1 -DSQLITE_OMIT_FOO=1\"\n#\nTCC = $(TCC) $(OPTS)\nRCC = $(RCC) $(OPTS)\n\n# If compiling for debugging, add some defines.\n#\n!IF $(DEBUG)>1\nTCC = $(TCC) -D_DEBUG\nBCC = $(BCC) -D_DEBUG\nRCC = $(RCC) -D_DEBUG\n!ENDIF\n\n# If optimizations are enabled or disabled (either implicitly or\n# explicitly), add the necessary flags.\n#\n!IF $(DEBUG)>1 || $(OPTIMIZATIONS)==0\nTCC = $(TCC) -Od\nBCC = $(BCC) -Od\n!IF $(USE_RUNTIME_CHECKS)!=0\nTCC = $(TCC) -RTC1\nBCC = $(BCC) -RTC1\n!ENDIF\n!ELSEIF $(OPTIMIZATIONS)>=3\nTCC = $(TCC) -Ox\nBCC = $(BCC) -Ox\n!ELSEIF $(OPTIMIZATIONS)==2\nTCC = $(TCC) -O2\nBCC = $(BCC) -O2\n!ELSEIF $(OPTIMIZATIONS)==1\nTCC = $(TCC) -O1\nBCC = $(BCC) -O1\n!ENDIF\n\n# If symbols are enabled (or compiling for debugging), enable PDBs.\n#\n!IF $(DEBUG)>1 || $(SYMBOLS)!=0\nTCC = $(TCC) -Zi\nBCC = $(BCC) -Zi\n!ENDIF\n\n# <<mark>>\n# If zlib support is enabled, add the compiler options for it.\n#\n!IF $(USE_ZLIB)!=0\nTCC = $(TCC) -DSQLITE_HAVE_ZLIB=1\nRCC = $(RCC) -DSQLITE_HAVE_ZLIB=1\nTCC = $(TCC) -I$(ZLIBINCDIR)\nRCC = $(RCC) -I$(ZLIBINCDIR)\n!ENDIF\n\n# If ICU support is enabled, add the compiler options for it.\n#\n!IF $(USE_ICU)!=0\nTCC = $(TCC) -DSQLITE_ENABLE_ICU=1\nRCC = $(RCC) -DSQLITE_ENABLE_ICU=1\nTCC = $(TCC) -I$(TOP)\\ext\\icu\nRCC = $(RCC) -I$(TOP)\\ext\\icu\nTCC = $(TCC) -I$(ICUINCDIR)\nRCC = $(RCC) -I$(ICUINCDIR)\n!ENDIF\n# <</mark>>\n\n# Command line prefixes for compiling code, compiling resources,\n# linking, etc.\n#\nLTCOMPILE = $(TCC) -Fo$@ -Fd$*.pdb\nLTRCOMPILE = $(RCC) -r\nLTLIB = lib.exe\nLTLINK = $(TCC) -Fe$@\n\n# If requested, link to the RPCRT4 library.\n#\n!IF $(USE_RPCRT4_LIB)!=0\nLTLIBS = $(LTLIBS) rpcrt4.lib\n!ENDIF\n\n# If a platform was set, force the linker to target that.\n# Note that the vcvars*.bat family of batch files typically\n# set this for you.  Otherwise, the linker will attempt\n# to deduce the binary type based on the object files.\n!IFDEF PLATFORM\nLTLINKOPTS = /NOLOGO /MACHINE:$(PLATFORM)\nLTLIBOPTS = /NOLOGO /MACHINE:$(PLATFORM)\n!ELSEIF \"$(VISUALSTUDIOVERSION)\"==\"12.0\" || \\\n        \"$(VISUALSTUDIOVERSION)\"==\"14.0\" || \\\n        \"$(VISUALSTUDIOVERSION)\"==\"15.0\"\nLTLINKOPTS = /NOLOGO /MACHINE:x86\nLTLIBOPTS = /NOLOGO /MACHINE:x86\n!ELSE\nLTLINKOPTS = /NOLOGO\nLTLIBOPTS = /NOLOGO\n!ENDIF\n\n# When compiling for use in the WinRT environment, the following\n# linker option must be used to mark the executable as runnable\n# only in the context of an application container.\n#\n!IF $(FOR_WINRT)!=0\nLTLINKOPTS = $(LTLINKOPTS) /APPCONTAINER\n!IF \"$(VISUALSTUDIOVERSION)\"==\"12.0\" || \"$(VISUALSTUDIOVERSION)\"==\"14.0\"\n!IFNDEF STORELIBPATH\n!IF \"$(PLATFORM)\"==\"x86\"\nSTORELIBPATH = $(CRTLIBPATH)\\store\n!ELSEIF \"$(PLATFORM)\"==\"x64\"\nSTORELIBPATH = $(CRTLIBPATH)\\store\\amd64\n!ELSEIF \"$(PLATFORM)\"==\"ARM\"\nSTORELIBPATH = $(CRTLIBPATH)\\store\\arm\n!ELSE\nSTORELIBPATH = $(CRTLIBPATH)\\store\n!ENDIF\n!ENDIF\nSTORELIBPATH = $(STORELIBPATH:\\\\=\\)\nLTLINKOPTS = $(LTLINKOPTS) \"/LIBPATH:$(STORELIBPATH)\"\n!ENDIF\n!ENDIF\n\n# When compiling for Windows Phone 8.1, an extra library path is\n# required.\n#\n!IF $(USE_WP81_OPTS)!=0\n!IFNDEF WP81LIBPATH\n!IF \"$(PLATFORM)\"==\"x86\"\nWP81LIBPATH = $(PROGRAMFILES_X86)\\Windows Phone Kits\\8.1\\lib\\x86\n!ELSEIF \"$(PLATFORM)\"==\"ARM\"\nWP81LIBPATH = $(PROGRAMFILES_X86)\\Windows Phone Kits\\8.1\\lib\\ARM\n!ELSE\nWP81LIBPATH = $(PROGRAMFILES_X86)\\Windows Phone Kits\\8.1\\lib\\x86\n!ENDIF\n!ENDIF\n!ENDIF\n\n# When compiling for Windows Phone 8.1, some extra linker options\n# are also required.\n#\n!IF $(USE_WP81_OPTS)!=0\n!IFDEF WP81LIBPATH\nLTLINKOPTS = $(LTLINKOPTS) \"/LIBPATH:$(WP81LIBPATH)\"\n!ENDIF\nLTLINKOPTS = $(LTLINKOPTS) /DYNAMICBASE\nLTLINKOPTS = $(LTLINKOPTS) WindowsPhoneCore.lib RuntimeObject.lib PhoneAppModelHost.lib\nLTLINKOPTS = $(LTLINKOPTS) /NODEFAULTLIB:kernel32.lib /NODEFAULTLIB:ole32.lib\n!ENDIF\n\n# When compiling for UWP or the Windows 10 platform, some extra linker\n# options are also required.\n#\n!IF $(FOR_UWP)!=0 || $(FOR_WIN10)!=0\nLTLINKOPTS = $(LTLINKOPTS) /DYNAMICBASE /NODEFAULTLIB:kernel32.lib\nLTLINKOPTS = $(LTLINKOPTS) mincore.lib\n!IFDEF PSDKLIBPATH\nLTLINKOPTS = $(LTLINKOPTS) \"/LIBPATH:$(PSDKLIBPATH)\"\n!ENDIF\n!ENDIF\n\n!IF $(FOR_WIN10)!=0\nLTLINKOPTS = $(LTLINKOPTS) /guard:cf \"/LIBPATH:$(UCRTLIBPATH)\"\n!IF $(DEBUG)>1\nLTLINKOPTS = $(LTLINKOPTS) /NODEFAULTLIB:libucrtd.lib /DEFAULTLIB:ucrtd.lib\n!ELSE\nLTLINKOPTS = $(LTLINKOPTS) /NODEFAULTLIB:libucrt.lib /DEFAULTLIB:ucrt.lib\n!ENDIF\n!ENDIF\n\n# If either debugging or symbols are enabled, enable PDBs.\n#\n!IF $(DEBUG)>1 || $(SYMBOLS)!=0\nLDFLAGS = /DEBUG $(LDOPTS)\n!ELSE\nLDFLAGS = $(LDOPTS)\n!ENDIF\n\n# <<mark>>\n# Start with the Tcl related linker options.\n#\n!IF $(NO_TCL)==0\nTCLLIBPATHS = $(TCLLIBPATHS) /LIBPATH:$(TCLLIBDIR)\nTCLLIBS = $(TCLLIBS) $(LIBTCL)\n!ENDIF\n\n# If zlib support is enabled, add the linker options for it.\n#\n!IF $(USE_ZLIB)!=0\nLTLIBPATHS = $(LTLIBPATHS) /LIBPATH:$(ZLIBLIBDIR)\nLTLIBS = $(LTLIBS) $(ZLIBLIB)\n!ENDIF\n\n# If ICU support is enabled, add the linker options for it.\n#\n!IF $(USE_ICU)!=0\nLTLIBPATHS = $(LTLIBPATHS) /LIBPATH:$(ICULIBDIR)\nLTLIBS = $(LTLIBS) $(LIBICU)\n!ENDIF\n# <</mark>>\n\n# You should not have to change anything below this line\n###############################################################################\n\n# <<mark>>\n# Object files for the SQLite library (non-amalgamation).\n#\nLIBOBJS0 = vdbe.lo parse.lo alter.lo analyze.lo attach.lo auth.lo \\\n         backup.lo bitvec.lo btmutex.lo btree.lo build.lo \\\n         callback.lo complete.lo ctime.lo \\\n         date.lo dbpage.lo dbstat.lo delete.lo \\\n         expr.lo fault.lo fkey.lo \\\n         fts3.lo fts3_aux.lo fts3_expr.lo fts3_hash.lo fts3_icu.lo \\\n         fts3_porter.lo fts3_snippet.lo fts3_tokenizer.lo fts3_tokenizer1.lo \\\n         fts3_tokenize_vtab.lo fts3_unicode.lo fts3_unicode2.lo fts3_write.lo \\\n         fts5.lo \\\n         func.lo global.lo hash.lo \\\n         icu.lo insert.lo json.lo legacy.lo loadext.lo \\\n         main.lo malloc.lo mem0.lo mem1.lo mem2.lo mem3.lo mem5.lo \\\n         memdb.lo memjournal.lo \\\n         mutex.lo mutex_noop.lo mutex_unix.lo mutex_w32.lo \\\n         notify.lo opcodes.lo os.lo os_kv.lo os_unix.lo os_win.lo \\\n         pager.lo pcache.lo pcache1.lo pragma.lo prepare.lo printf.lo \\\n         random.lo resolve.lo rowset.lo rtree.lo \\\n         sqlite3session.lo select.lo sqlite3rbu.lo status.lo stmt.lo \\\n         table.lo threads.lo tokenize.lo treeview.lo trigger.lo \\\n         update.lo upsert.lo util.lo vacuum.lo \\\n         vdbeapi.lo vdbeaux.lo vdbeblob.lo vdbemem.lo vdbesort.lo \\\n         vdbetrace.lo vdbevtab.lo wal.lo walker.lo where.lo wherecode.lo \\\n         whereexpr.lo \\\n         window.lo utf.lo vtab.lo\n# <</mark>>\n\n# Object files for the amalgamation.\n#\nLIBOBJS1 = sqlite3.lo\n\n# Determine the real value of LIBOBJ based on the 'configure' script\n#\n# <<mark>>\n!IF $(USE_AMALGAMATION)==0\nLIBOBJ = $(LIBOBJS0)\n!ELSE\n# <</mark>>\nLIBOBJ = $(LIBOBJS1)\n# <<mark>>\n!ENDIF\n# <</mark>>\n\n# Determine if embedded resource compilation and usage are enabled.\n#\n!IF $(USE_RC)!=0\nLIBRESOBJS = sqlite3res.lo\n!ELSE\nLIBRESOBJS =\n!ENDIF\n\n# <<mark>>\n# Core source code files, part 1.\n#\nSRC00 = \\\n  $(TOP)\\src\\alter.c \\\n  $(TOP)\\src\\analyze.c \\\n  $(TOP)\\src\\attach.c \\\n  $(TOP)\\src\\auth.c \\\n  $(TOP)\\src\\backup.c \\\n  $(TOP)\\src\\bitvec.c \\\n  $(TOP)\\src\\btmutex.c \\\n  $(TOP)\\src\\btree.c \\\n  $(TOP)\\src\\build.c \\\n  $(TOP)\\src\\callback.c \\\n  $(TOP)\\src\\complete.c \\\n  $(TOP)\\src\\ctime.c \\\n  $(TOP)\\src\\date.c \\\n  $(TOP)\\src\\dbpage.c \\\n  $(TOP)\\src\\dbstat.c \\\n  $(TOP)\\src\\delete.c \\\n  $(TOP)\\src\\expr.c \\\n  $(TOP)\\src\\fault.c \\\n  $(TOP)\\src\\fkey.c \\\n  $(TOP)\\src\\func.c \\\n  $(TOP)\\src\\global.c \\\n  $(TOP)\\src\\hash.c \\\n  $(TOP)\\src\\insert.c \\\n  $(TOP)\\src\\json.c \\\n  $(TOP)\\src\\legacy.c \\\n  $(TOP)\\src\\loadext.c \\\n  $(TOP)\\src\\main.c \\\n  $(TOP)\\src\\malloc.c \\\n  $(TOP)\\src\\mem0.c \\\n  $(TOP)\\src\\mem1.c \\\n  $(TOP)\\src\\mem2.c \\\n  $(TOP)\\src\\mem3.c \\\n  $(TOP)\\src\\mem5.c \\\n  $(TOP)\\src\\memdb.c \\\n  $(TOP)\\src\\memjournal.c \\\n  $(TOP)\\src\\mutex.c \\\n  $(TOP)\\src\\mutex_noop.c \\\n  $(TOP)\\src\\mutex_unix.c \\\n  $(TOP)\\src\\mutex_w32.c \\\n  $(TOP)\\src\\notify.c \\\n  $(TOP)\\src\\os.c \\\n  $(TOP)\\src\\os_kv.c \\\n  $(TOP)\\src\\os_unix.c \\\n  $(TOP)\\src\\os_win.c\n\n# Core source code files, part 2.\n#\nSRC01 = \\\n  $(TOP)\\src\\pager.c \\\n  $(TOP)\\src\\pcache.c \\\n  $(TOP)\\src\\pcache1.c \\\n  $(TOP)\\src\\pragma.c \\\n  $(TOP)\\src\\prepare.c \\\n  $(TOP)\\src\\printf.c \\\n  $(TOP)\\src\\random.c \\\n  $(TOP)\\src\\resolve.c \\\n  $(TOP)\\src\\rowset.c \\\n  $(TOP)\\src\\select.c \\\n  $(TOP)\\src\\status.c \\\n  $(TOP)\\src\\table.c \\\n  $(TOP)\\src\\threads.c \\\n  $(TOP)\\src\\tclsqlite.c \\\n  $(TOP)\\src\\tokenize.c \\\n  $(TOP)\\src\\treeview.c \\\n  $(TOP)\\src\\trigger.c \\\n  $(TOP)\\src\\utf.c \\\n  $(TOP)\\src\\update.c \\\n  $(TOP)\\src\\upsert.c \\\n  $(TOP)\\src\\util.c \\\n  $(TOP)\\src\\vacuum.c \\\n  $(TOP)\\src\\vdbe.c \\\n  $(TOP)\\src\\vdbeapi.c \\\n  $(TOP)\\src\\vdbeaux.c \\\n  $(TOP)\\src\\vdbeblob.c \\\n  $(TOP)\\src\\vdbemem.c \\\n  $(TOP)\\src\\vdbesort.c \\\n  $(TOP)\\src\\vdbetrace.c \\\n  $(TOP)\\src\\vdbevtab.c \\\n  $(TOP)\\src\\vtab.c \\\n  $(TOP)\\src\\wal.c \\\n  $(TOP)\\src\\walker.c \\\n  $(TOP)\\src\\where.c \\\n  $(TOP)\\src\\wherecode.c \\\n  $(TOP)\\src\\whereexpr.c \\\n  $(TOP)\\src\\window.c\n\n# Core miscellaneous files.\n#\nSRC03 = \\\n  $(TOP)\\src\\parse.y\n\n# Core header files, part 1.\n#\nSRC04 = \\\n  $(TOP)\\src\\btree.h \\\n  $(TOP)\\src\\btreeInt.h \\\n  $(TOP)\\src\\hash.h \\\n  $(TOP)\\src\\hwtime.h \\\n  $(TOP)\\src\\msvc.h \\\n  $(TOP)\\src\\mutex.h \\\n  $(TOP)\\src\\os.h \\\n  $(TOP)\\src\\os_common.h \\\n  $(TOP)\\src\\os_setup.h \\\n  $(TOP)\\src\\os_win.h\n\n# Core header files, part 2.\n#\nSRC05 = \\\n  $(TOP)\\src\\pager.h \\\n  $(TOP)\\src\\pcache.h \\\n  $(TOP)\\src\\pragma.h \\\n  $(TOP)\\src\\sqlite.h.in \\\n  $(TOP)\\src\\sqlite3ext.h \\\n  $(TOP)\\src\\sqliteInt.h \\\n  $(TOP)\\src\\sqliteLimit.h \\\n  $(TOP)\\src\\vdbe.h \\\n  $(TOP)\\src\\vdbeInt.h \\\n  $(TOP)\\src\\vxworks.h \\\n  $(TOP)\\src\\wal.h \\\n  $(TOP)\\src\\whereInt.h\n\n# Extension source code files, part 2.\n#\nSRC07 = \\\n  $(TOP)\\ext\\fts3\\fts3.c \\\n  $(TOP)\\ext\\fts3\\fts3_aux.c \\\n  $(TOP)\\ext\\fts3\\fts3_expr.c \\\n  $(TOP)\\ext\\fts3\\fts3_hash.c \\\n  $(TOP)\\ext\\fts3\\fts3_icu.c \\\n  $(TOP)\\ext\\fts3\\fts3_porter.c \\\n  $(TOP)\\ext\\fts3\\fts3_snippet.c \\\n  $(TOP)\\ext\\fts3\\fts3_tokenizer.c \\\n  $(TOP)\\ext\\fts3\\fts3_tokenizer1.c \\\n  $(TOP)\\ext\\fts3\\fts3_tokenize_vtab.c \\\n  $(TOP)\\ext\\fts3\\fts3_unicode.c \\\n  $(TOP)\\ext\\fts3\\fts3_unicode2.c \\\n  $(TOP)\\ext\\fts3\\fts3_write.c \\\n  $(TOP)\\ext\\icu\\icu.c \\\n  $(TOP)\\ext\\rtree\\rtree.c \\\n  $(TOP)\\ext\\session\\sqlite3session.c \\\n  $(TOP)\\ext\\rbu\\sqlite3rbu.c \\\n  $(TOP)\\ext\\misc\\stmt.c\n\n# Extension header files, part 2.\n#\nSRC09 = \\\n  $(TOP)\\ext\\fts3\\fts3.h \\\n  $(TOP)\\ext\\fts3\\fts3Int.h \\\n  $(TOP)\\ext\\fts3\\fts3_hash.h \\\n  $(TOP)\\ext\\fts3\\fts3_tokenizer.h \\\n  $(TOP)\\ext\\icu\\sqliteicu.h \\\n  $(TOP)\\ext\\rtree\\rtree.h \\\n  $(TOP)\\ext\\rtree\\geopoly.c \\\n  $(TOP)\\ext\\rbu\\sqlite3rbu.h \\\n  $(TOP)\\ext\\session\\sqlite3session.h\n\n# Generated source code files\n#\nSRC10 = \\\n  opcodes.c \\\n  parse.c\n\n# Generated header files\n#\nSRC11 = \\\n  keywordhash.h \\\n  opcodes.h \\\n  parse.h \\\n  shell.c \\\n  $(SQLITE3H)\n\n# Generated Tcl header files\n#\n!IF $(USE_STDCALL)!=0 || $(FOR_WIN10)!=0\nSRC12 = \\\n  $(SQLITETCLH) \\\n  $(SQLITETCLDECLSH)\n!ELSE\nSRC12 =\n!ENDIF\n\n# All source code files.\n#\nSRC = $(SRC00) $(SRC01) $(SRC03) $(SRC04) $(SRC05) $(SRC07) $(SRC09) $(SRC10) $(SRC11) $(SRC12)\n\n# Source code to the test files.\n#\nTESTSRC = \\\n  $(TOP)\\src\\test1.c \\\n  $(TOP)\\src\\test2.c \\\n  $(TOP)\\src\\test3.c \\\n  $(TOP)\\src\\test4.c \\\n  $(TOP)\\src\\test5.c \\\n  $(TOP)\\src\\test6.c \\\n  $(TOP)\\src\\test8.c \\\n  $(TOP)\\src\\test9.c \\\n  $(TOP)\\src\\test_autoext.c \\\n  $(TOP)\\src\\test_backup.c \\\n  $(TOP)\\src\\test_bestindex.c \\\n  $(TOP)\\src\\test_blob.c \\\n  $(TOP)\\src\\test_btree.c \\\n  $(TOP)\\src\\test_config.c \\\n  $(TOP)\\src\\test_delete.c \\\n  $(TOP)\\src\\test_demovfs.c \\\n  $(TOP)\\src\\test_devsym.c \\\n  $(TOP)\\src\\test_fs.c \\\n  $(TOP)\\src\\test_func.c \\\n  $(TOP)\\src\\test_hexio.c \\\n  $(TOP)\\src\\test_init.c \\\n  $(TOP)\\src\\test_intarray.c \\\n  $(TOP)\\src\\test_journal.c \\\n  $(TOP)\\src\\test_malloc.c \\\n  $(TOP)\\src\\test_md5.c \\\n  $(TOP)\\src\\test_multiplex.c \\\n  $(TOP)\\src\\test_mutex.c \\\n  $(TOP)\\src\\test_onefile.c \\\n  $(TOP)\\src\\test_osinst.c \\\n  $(TOP)\\src\\test_pcache.c \\\n  $(TOP)\\src\\test_quota.c \\\n  $(TOP)\\src\\test_rtree.c \\\n  $(TOP)\\src\\test_schema.c \\\n  $(TOP)\\src\\test_superlock.c \\\n  $(TOP)\\src\\test_syscall.c \\\n  $(TOP)\\src\\test_tclsh.c \\\n  $(TOP)\\src\\test_tclvar.c \\\n  $(TOP)\\src\\test_thread.c \\\n  $(TOP)\\src\\test_vdbecov.c \\\n  $(TOP)\\src\\test_vfs.c \\\n  $(TOP)\\src\\test_windirent.c \\\n  $(TOP)\\src\\test_window.c \\\n  $(TOP)\\src\\test_wsd.c \\\n  $(TOP)\\ext\\fts3\\fts3_term.c \\\n  $(TOP)\\ext\\fts3\\fts3_test.c \\\n  $(TOP)\\ext\\rbu\\test_rbu.c \\\n  $(TOP)\\ext\\session\\test_session.c\n\n# Statically linked extensions.\n#\nTESTEXT = \\\n  $(TOP)\\ext\\expert\\sqlite3expert.c \\\n  $(TOP)\\ext\\expert\\test_expert.c \\\n  $(TOP)\\ext\\misc\\amatch.c \\\n  $(TOP)\\ext\\misc\\appendvfs.c \\\n  $(TOP)\\ext\\misc\\basexx.c \\\n  $(TOP)\\ext\\misc\\carray.c \\\n  $(TOP)\\ext\\misc\\cksumvfs.c \\\n  $(TOP)\\ext\\misc\\closure.c \\\n  $(TOP)\\ext\\misc\\csv.c \\\n  $(TOP)\\ext\\misc\\decimal.c \\\n  $(TOP)\\ext\\misc\\eval.c \\\n  $(TOP)\\ext\\misc\\explain.c \\\n  $(TOP)\\ext\\misc\\fileio.c \\\n  $(TOP)\\ext\\misc\\fuzzer.c \\\n  $(TOP)\\ext\\fts5\\fts5_tcl.c \\\n  $(TOP)\\ext\\fts5\\fts5_test_mi.c \\\n  $(TOP)\\ext\\fts5\\fts5_test_tok.c \\\n  $(TOP)\\ext\\misc\\ieee754.c \\\n  $(TOP)\\ext\\misc\\mmapwarm.c \\\n  $(TOP)\\ext\\misc\\nextchar.c \\\n  $(TOP)\\ext\\misc\\normalize.c \\\n  $(TOP)\\ext\\misc\\percentile.c \\\n  $(TOP)\\ext\\misc\\prefixes.c \\\n  $(TOP)\\ext\\misc\\qpvtab.c \\\n  $(TOP)\\ext\\misc\\randomjson.c \\\n  $(TOP)\\ext\\misc\\regexp.c \\\n  $(TOP)\\ext\\misc\\remember.c \\\n  $(TOP)\\ext\\misc\\series.c \\\n  $(TOP)\\ext\\misc\\spellfix.c \\\n  $(TOP)\\ext\\misc\\stmtrand.c \\\n  $(TOP)\\ext\\misc\\totype.c \\\n  $(TOP)\\ext\\misc\\unionvtab.c \\\n  $(TOP)\\ext\\misc\\wholenumber.c \\\n  $(TOP)\\ext\\rtree\\test_rtreedoc.c \\\n  $(TOP)\\ext\\recover\\sqlite3recover.c \\\n  $(TOP)\\ext\\recover\\test_recover.c \\\n  $(TOP)\\ext\\intck\\test_intck.c  \\\n  $(TOP)\\ext\\intck\\sqlite3intck.c \\\n  $(TOP)\\ext\\recover\\dbdata.c \n\n# If use of zlib is enabled, add the \"zipfile.c\" source file.\n#\n!IF $(USE_ZLIB)!=0\nTESTEXT = $(TESTEXT) $(TOP)\\ext\\misc\\zipfile.c\n!ENDIF\n\n# Source code to the library files needed by the test fixture\n# (non-amalgamation)\n#\nTESTSRC2 = \\\n  $(SRC00) \\\n  $(SRC01) \\\n  $(SRC07) \\\n  $(SRC10) \\\n  fts5.c\n\n# Header files used by all library source files.\n#\nHDR = \\\n   $(TOP)\\src\\btree.h \\\n   $(TOP)\\src\\btreeInt.h \\\n   $(TOP)\\src\\hash.h \\\n   $(TOP)\\src\\hwtime.h \\\n   keywordhash.h \\\n   $(TOP)\\src\\msvc.h \\\n   $(TOP)\\src\\mutex.h \\\n   opcodes.h \\\n   $(TOP)\\src\\os.h \\\n   $(TOP)\\src\\os_common.h \\\n   $(TOP)\\src\\os_setup.h \\\n   $(TOP)\\src\\os_win.h \\\n   $(TOP)\\src\\pager.h \\\n   $(TOP)\\src\\pcache.h \\\n   parse.h \\\n   $(TOP)\\src\\pragma.h \\\n   $(SQLITE3H) \\\n   sqlite3ext.h \\\n   $(TOP)\\src\\sqliteInt.h \\\n   $(TOP)\\src\\sqliteLimit.h \\\n   $(TOP)\\src\\vdbe.h \\\n   $(TOP)\\src\\vdbeInt.h \\\n   $(TOP)\\src\\vxworks.h \\\n   $(TOP)\\src\\whereInt.h\n\n# Header files used by extensions\n#\nEXTHDR = $(EXTHDR) \\\n  $(TOP)\\ext\\fts3\\fts3.h \\\n  $(TOP)\\ext\\fts3\\fts3Int.h \\\n  $(TOP)\\ext\\fts3\\fts3_hash.h \\\n  $(TOP)\\ext\\fts3\\fts3_tokenizer.h\nEXTHDR = $(EXTHDR) \\\n  $(TOP)\\ext\\rtree\\rtree.h \\\n  $(TOP)\\ext\\rtree\\geopoly.c\nEXTHDR = $(EXTHDR) \\\n  $(TOP)\\ext\\icu\\sqliteicu.h\nEXTHDR = $(EXTHDR) \\\n  $(TOP)\\ext\\rtree\\sqlite3rtree.h\nEXTHDR = $(EXTHDR) \\\n  $(TOP)\\ext\\session\\sqlite3session.h\n\n# executables needed for testing\n#\nTESTPROGS = \\\n  testfixture.exe \\\n  $(SQLITE3EXE) \\\n  sqlite3_analyzer.exe \\\n  sqlite3_checker.exe \\\n  sqldiff.exe \\\n  dbhash.exe \\\n  sqltclsh.exe\n\n# Databases containing fuzzer test cases\n#\nFUZZDATA = \\\n  $(TOP)\\test\\fuzzdata1.db \\\n  $(TOP)\\test\\fuzzdata2.db \\\n  $(TOP)\\test\\fuzzdata3.db \\\n  $(TOP)\\test\\fuzzdata4.db \\\n  $(TOP)\\test\\fuzzdata5.db \\\n  $(TOP)\\test\\fuzzdata6.db \\\n  $(TOP)\\test\\fuzzdata7.db \\\n  $(TOP)\\test\\fuzzdata8.db\n# <</mark>>\n\n# Additional compiler options for the shell.  These are only effective\n# when the shell is not being dynamically linked.\n#\n!IF $(DYNAMIC_SHELL)==0 && $(FOR_WIN10)==0\nSHELL_COMPILE_OPTS = $(SHELL_COMPILE_OPTS) -DSQLITE_DQS=0\nSHELL_COMPILE_OPTS = $(SHELL_COMPILE_OPTS) -DSQLITE_ENABLE_FTS4=1\nSHELL_COMPILE_OPTS = $(SHELL_COMPILE_OPTS) -DSQLITE_ENABLE_EXPLAIN_COMMENTS=1\nSHELL_COMPILE_OPTS = $(SHELL_COMPILE_OPTS) -DSQLITE_ENABLE_OFFSET_SQL_FUNC=1\nSHELL_COMPILE_OPTS = $(SHELL_COMPILE_OPTS) -DSQLITE_ENABLE_UNKNOWN_SQL_FUNCTION=1\nSHELL_COMPILE_OPTS = $(SHELL_COMPILE_OPTS) -DSQLITE_ENABLE_STMT_SCANSTATUS=1\nSHELL_COMPILE_OPTS = $(SHELL_COMPILE_OPTS) -DSQLITE_STRICT_SUBTYPE=1\n!ENDIF\n\n# <<mark>>\n# Extra compiler options for various test tools.\n#\nMPTESTER_COMPILE_OPTS = -DSQLITE_ENABLE_FTS5\nFUZZERSHELL_COMPILE_OPTS =\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -I$(TOP)\\test -I$(TOP)\\ext\\recover\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_MEMSYS5\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_OSS_FUZZ\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_BYTECODE_VTAB\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_DBPAGE_VTAB\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_DBSTAT_VTAB\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_BYTECODE_VTAB\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_DESERIALIZE\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_EXPLAIN_COMMENTS\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_FTS3_PARENTHESIS\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_FTS4\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_FTS5\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_GEOPOLY\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_MATH_FUNCTIONS\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_MEMSYS5\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_NORMALIZE\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_OFFSET_SQL_FUNC\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_PREUPDATE_HOOK\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_RTREE\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_SESSION\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_STMTVTAB\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_UNKNOWN_SQL_FUNCTION\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_STAT4\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_STMT_SCANSTATUS\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_MAX_MEMORY=50000000\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_MAX_MMAP_SIZE=0\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_OMIT_LOAD_EXTENSION\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_PRINTF_PRECISION_LIMIT=1000\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_PRIVATE=\"\"\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_STRICT_SUBTYPE=1\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_STATIC_RANDOMJSON\n\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_MAX_MEMORY=50000000\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_PRINTF_PRECISION_LIMIT=1000\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_OMIT_LOAD_EXTENSION\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_FTS4\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_FTS5\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_RTREE\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_GEOPOLY\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_DBSTAT_VTAB\nFUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_BYTECODE_VTAB\nFUZZCHECK_SRC = $(FUZZCHECK_SRC) $(TOP)\\test\\fuzzcheck.c\nFUZZCHECK_SRC = $(FUZZCHECK_SRC) $(TOP)\\test\\ossfuzz.c\nFUZZCHECK_SRC = $(FUZZCHECK_SRC) $(TOP)\\test\\fuzzinvariants.c\nFUZZCHECK_SRC = $(FUZZCHECK_SRC) $(TOP)\\test\\vt02.c\nFUZZCHECK_SRC = $(FUZZCHECK_SRC) $(TOP)\\ext\\recover\\dbdata.c\nFUZZCHECK_SRC = $(FUZZCHECK_SRC) $(TOP)\\ext\\recover\\sqlite3recover.c\nFUZZCHECK_SRC = $(FUZZCHECK_SRC) $(TOP)\\ext\\misc\\percentile.c\nFUZZCHECK_SRC = $(FUZZCHECK_SRC) $(TOP)\\ext\\misc\\randomjson.c\n\nOSSSHELL_SRC = $(TOP)\\test\\ossshell.c $(TOP)\\test\\ossfuzz.c\nDBFUZZ_COMPILE_OPTS = -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION\nKV_COMPILE_OPTS = -DSQLITE_THREADSAFE=0 -DSQLITE_DIRECT_OVERFLOW_READ\nST_COMPILE_OPTS = -DSQLITE_THREADSAFE=0\n\n# Standard options to testfixture.\n#\nTESTOPTS = --verbose=file --output=test-out.txt\n\n# Extra targets for the \"all\" target that require Tcl.\n#\n!IF $(NO_TCL)==0\nALL_TCL_TARGETS = $(SQLITE3TCLDLL)\n!ELSE\nALL_TCL_TARGETS =\n!ENDIF\n# <</mark>>\n\n# This is the default Makefile target.  The objects listed here\n# are what get build when you type just \"make\" with no arguments.\n#\ncore:\tdll libsqlite3.lib shell\n\n# Targets that require the Tcl library.\n#\ntcl:\t$(ALL_TCL_TARGETS)\n\n# This Makefile target builds all of the standard binaries.\n#\nall:\tcore tcl\n\n# Dynamic link library section.\n#\ndll:\t$(SQLITE3DLL)\n\n# Shell executable.\n#\nshell:\t$(SQLITE3EXE)\n\n# jimsh0 - replacement for tclsh\n#\njimsh0.exe:\t$(TOP)\\autosetup\\jimsh0.c\n\tcl -DHAVE__FULLPATH=1 $(TOP)\\autosetup\\jimsh0.c\n\n# <<mark>>\nlibsqlite3.lib:\t$(LIBOBJ)\n\t$(LTLIB) $(LTLIBOPTS) /OUT:$@ $(LIBOBJ) $(TLIBS)\n\nlibtclsqlite3.lib:\ttclsqlite.lo libsqlite3.lib\n\t$(LTLIB) $(LTLIBOPTS) $(TCLLIBPATHS) $(LTLIBPATHS) /OUT:$@ tclsqlite.lo libsqlite3.lib $(LIBTCLSTUB) $(TLIBS)\n\ntclsqlite3.def:\ttclsqlite.lo\n\techo EXPORTS > tclsqlite3.def\n\tdumpbin /all tclsqlite.lo \\\n\t\t| $(TCLSH_CMD) $(TOP)\\tool\\replace.tcl include \"^\\s+/EXPORT:_?((?:Sqlite3|Tclsqlite3)_[^@]*)(?:@\\d+)?$$\" \\1 \\\n\t\t| sort >> tclsqlite3.def\n\npkgIndex.tcl:\t$(TOP)\\VERSION\n\tfor /F %%V in ('type \"$(TOP)\\VERSION\"') do ( \\\n\t\techo package ifneeded sqlite3 @version@ [list load [file join $$dir $(SQLITE3TCLDLL)] Sqlite3] \\\n\t\t\t| $(TCLSH_CMD) $(TOP)\\tool\\replace.tcl exact @version@ %%V > pkgIndex.tcl \\\n\t)\n\n$(SQLITE3TCLDLL):\tlibtclsqlite3.lib $(LIBRESOBJS) tclsqlite3.def pkgIndex.tcl\n\t$(LD) $(LDFLAGS) $(LTLINKOPTS) $(LTLIBPATHS) /DLL /DEF:tclsqlite3.def /OUT:$@ libtclsqlite3.lib $(LIBRESOBJS) $(LTLIBS) $(TLIBS)\n\ntclextension:\t$(SQLITE3TCLDLL)\n\ntclextension-install:\t$(SQLITE3TCLDLL)\n\t$(TCLSH_CMD) $(TOP)\\tool\\buildtclext.tcl --install-only\n\ntclextension-uninstall:\n\t$(TCLSH_CMD) $(TOP)\\tool\\buildtclext.tcl --uninstall\n\ntclextension-list:\n\t@ $(TCLSH_CMD) $(TOP)\\tool\\buildtclext.tcl --info\n\ntclextension-verify: sqlite3.h\n\t@ $(TCLSH_CMD) $(TOP)\\tool\\buildtclext.tcl --version-check\n\n\n# <</mark>>\n\n$(SQLITE3DLL):\t$(LIBOBJ) $(LIBRESOBJS) $(CORE_LINK_DEP)\n\t$(LD) $(LDFLAGS) $(LTLINKOPTS) $(LTLIBPATHS) /DLL $(CORE_LINK_OPTS) /OUT:$@ $(LIBOBJ) $(LIBRESOBJS) $(LTLIBS) $(TLIBS)\n\n# <<block2>>\nsqlite3.def:\tlibsqlite3.lib $(JIM_TCLSH)\n\techo EXPORTS > sqlite3.def\n\tdumpbin /all libsqlite3.lib \\\n\t\t| $(JIM_TCLSH) $(TOP)\\tool\\replace.tcl include \"^\\s+1 _?(sqlite3(?:session|changeset|changegroup|rebaser|rbu)?_[^@]*)(?:@\\d+)?$$\" \\1 \\\n\t\t| sort >> sqlite3.def\n# <</block2>>\n\n$(SQLITE3EXE):\tshell.c $(SHELL_CORE_DEP) $(LIBRESOBJS) $(SHELL_CORE_SRC) $(SQLITE3H)\n\t$(LTLINK) $(SHELL_COMPILE_OPTS) $(READLINE_FLAGS) shell.c $(SHELL_CORE_SRC) \\\n\t\t/link $(SQLITE3EXEPDB) $(LDFLAGS) $(LTLINKOPTS) $(SHELL_LINK_OPTS) $(LTLIBPATHS) $(LIBRESOBJS) $(LIBREADLINE) $(LTLIBS) $(TLIBS)\n\n# <<mark>>\nsqldiff.exe:\t$(TOP)\\tool\\sqldiff.c $(TOP)\\ext\\misc\\sqlite3_stdio.h $(TOP)\\ext\\misc\\sqlite3_stdio.c $(SQLITE3C) $(SQLITE3H) $(LIBRESOBJS)\n\t$(LTLINK) $(NO_WARN) -I$(TOP)\\ext\\misc $(TOP)\\tool\\sqldiff.c $(TOP)\\ext\\misc\\sqlite3_stdio.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS) $(LIBRESOBJS)\n\ndbhash.exe:\t$(TOP)\\tool\\dbhash.c $(SQLITE3C) $(SQLITE3H)\n\t$(LTLINK) $(NO_WARN) $(TOP)\\tool\\dbhash.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)\n\nRSYNC_SRC = \\\n  $(TOP)\\tool\\sqlite3_rsync.c \\\n  $(SQLITE3C)\n\nRSYNC_OPT = \\\n  -DSQLITE_ENABLE_DBPAGE_VTAB \\\n  -DSQLITE_THREADSAFE=0 \\\n  -DSQLITE_OMIT_LOAD_EXTENSION \\\n  -DSQLITE_OMIT_DEPRECATED\n\nsqlite3_rsync.exe:\t$(RSYNC_SRC) $(LIBRESOBJS)\n\t$(LTLINK) $(RSYNC_OPT) $(NO_WARN) $(RSYNC_SRC) /link $(LDFLAGS) $(LTLINKOPTS) $(LIBRESOBJS)\n\nscrub.exe:\t$(TOP)\\ext\\misc\\scrub.c $(SQLITE3C) $(SQLITE3H)\n\t$(LTLINK) $(NO_WARN) -DSCRUB_STANDALONE=1 $(TOP)\\ext\\misc\\scrub.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)\n\nsrcck1.exe:\t$(TOP)\\tool\\srcck1.c\n\t$(BCC) $(NO_WARN) -Fe$@ $(TOP)\\tool\\srcck1.c\n\nsourcetest:\tsrcck1.exe $(SQLITE3C)\n\tsrcck1.exe $(SQLITE3C)\n\nsrc-verify.exe:\t$(TOP)\\tool\\src-verify.c\n\t$(LTLINK) $(NO_WARN) $(TOP)\\tool\\src-verify.c\n\nverify-source:\tsrc-verify.exe\n\tsrc-verify.exe $(TOP)\n\nfuzzershell.exe:\t$(TOP)\\tool\\fuzzershell.c $(SQLITE3C) $(SQLITE3H)\n\t$(LTLINK) $(NO_WARN) $(FUZZERSHELL_COMPILE_OPTS) $(TOP)\\tool\\fuzzershell.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)\n\ndbfuzz.exe:\t$(TOP)\\test\\dbfuzz.c $(SQLITE3C) $(SQLITE3H)\n\t$(LTLINK) $(NO_WARN) $(DBFUZZ_COMPILE_OPTS) $(TOP)\\test\\dbfuzz.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)\n\nfuzzcheck.exe:\t$(FUZZCHECK_SRC) $(SQLITE3C) $(SQLITE3H)\n\t$(LTLINK) /F 8388608 $(NO_WARN) $(FUZZCHECK_OPTS) $(FUZZCHECK_SRC) $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)\n\nfuzzcheck-asan.exe:\t$(FUZZCHECK_SRC) $(SQLITE3C) $(SQLITE3H)\n\t$(LTLINK) $(NO_WARN) /fsanitize=address $(FUZZCHECK_OPTS) $(FUZZCHECK_SRC) $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)\n\nrun-fuzzcheck:\tfuzzcheck.exe fuzzcheck-asan.exe\n\tfuzzcheck --spinner $(FUZZDB)\n\tfuzzcheck-asan --spinner $(FUZZDB)\n\nossshell.exe:\t$(OSSSHELL_SRC) $(SQLITE3C) $(SQLITE3H)\n\t$(LTLINK) $(NO_WARN) $(FUZZCHECK_OPTS) $(OSSSHELL_SRC) $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)\n\nsessionfuzz.exe:\tzlib $(TOP)\\test\\sessionfuzz.c $(SQLITE3C) $(SQLITE3H)\n\t$(LTLINK) $(NO_WARN) -I$(ZLIBINCDIR) $(TOP)\\test\\sessionfuzz.c /link $(LDFLAGS) $(LTLINKOPTS) /LIBPATH:$(ZLIBLIBDIR) $(ZLIBLIB)\n\nmptester.exe:\t$(TOP)\\mptest\\mptest.c $(SQLITE3C) $(SQLITE3H)\n\t$(LTLINK) $(NO_WARN) $(MPTESTER_COMPILE_OPTS) $(TOP)\\mptest\\mptest.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)\n\nMPTEST1 = mptester mptest.db $(TOP)\\mptest\\crash01.test --repeat 20\nMPTEST2 = mptester mptest.db $(TOP)\\mptest\\multiwrite01.test --repeat 20\n\nmptest:\tmptester.exe\n\tdel /Q mptest.db 2>NUL\n\t$(MPTEST1) --journalmode DELETE\n\t$(MPTEST2) --journalmode WAL\n\t$(MPTEST1) --journalmode WAL\n\t$(MPTEST2) --journalmode PERSIST\n\t$(MPTEST1) --journalmode PERSIST\n\t$(MPTEST2) --journalmode TRUNCATE\n\t$(MPTEST1) --journalmode TRUNCATE\n\t$(MPTEST2) --journalmode DELETE\n\n# This target creates a directory named \"tsrc\" and fills it with\n# copies of all of the C source code and header files needed to\n# build on the target system.  Some of the C source code and header\n# files are automatically generated.  This target takes care of\n# all that automatic generation.\n#\n.target_source:\t$(SRC) $(TOP)\\tool\\vdbe-compress.tcl fts5.c $(SQLITE_TCL_DEP) $(JIM_TCLSH)\n\t-rmdir /Q/S tsrc 2>NUL\n\t-mkdir tsrc\n        $(JIM_TCLSH) $(TOP)\\tool\\cp.tcl $(SRC00) $(SRC01) $(SRC03) $(SRC04) $(SRC05) $(SRC07) $(SRC09) $(SRC10) $(SRC11) $(SRC12) fts5.c fts5.h tsrc\n\tcopy /B tsrc\\fts5.c +,,\n\tcopy /B tsrc\\fts5.h +,,\n\tdel /Q tsrc\\sqlite.h.in tsrc\\parse.y 2>NUL\n\t$(JIM_TCLSH) $(TOP)\\tool\\vdbe-compress.tcl $(OPTS) < tsrc\\vdbe.c > vdbe.new\n\tmove vdbe.new tsrc\\vdbe.c\n\techo > .target_source\n\nsqlite3.c:\t.target_source sqlite3ext.h sqlite3session.h $(MKSQLITE3C_TOOL) src-verify.exe $(JIM_TCLSH)\n\t$(JIM_TCLSH) $(MKSQLITE3C_TOOL) $(MKSQLITE3C_ARGS) $(EXTRA_SRC)\n\nsqlite3-all.c:\tsqlite3.c $(TOP)\\tool\\split-sqlite3c.tcl $(JIM_TCLSH)\n\t$(JIM_TCLSH) $(TOP)\\tool\\split-sqlite3c.tcl\n# <</mark>>\n\n# Rule to build the amalgamation\n#\nsqlite3.lo:\t$(SQLITE3C)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(SQLITE3C)\n\n# <<mark>>\n# Rules to build the LEMON compiler generator\n#\nlempar.c:\t$(TOP)\\tool\\lempar.c\n\tcopy /Y $(TOP)\\tool\\lempar.c .\n\tcopy /B lempar.c +,,\n\nlemon.exe:\t$(TOP)\\tool\\lemon.c lempar.c\n\t$(BCC) $(NO_WARN) -Daccess=_access \\\n\t\t-Fe$@ $(TOP)\\tool\\lemon.c /link $(LDFLAGS) $(NLTLINKOPTS) $(NLTLIBPATHS)\n\n# <<mark>>\n# Rules to build the source-id generator tool\n#\nmksourceid.exe:\t$(TOP)\\tool\\mksourceid.c\n\t$(BCC) $(NO_WARN) -Fe$@ $(TOP)\\tool\\mksourceid.c /link $(LDFLAGS) $(NLTLINKOPTS) $(NLTLIBPATHS)\n\n# Rules to build individual *.lo files from generated *.c files. This\n# applies to:\n#\n#     parse.lo\n#     opcodes.lo\n#\nparse.lo:\tparse.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c parse.c\n\nopcodes.lo:\topcodes.c\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c opcodes.c\n# <</mark>>\n\n# Rule to build the Win32 resources object file.\n#\n!IF $(USE_RC)!=0\n# <<block1>>\n$(LIBRESOBJS):\t$(TOP)\\src\\sqlite3.rc $(SQLITE3H) $(TOP)\\VERSION $(JIM_TCLSH)\n\techo #ifndef SQLITE_RESOURCE_VERSION > sqlite3rc.h\n\tfor /F %%V in ('type \"$(TOP)\\VERSION\"') do ( \\\n\t\techo #define SQLITE_RESOURCE_VERSION %%V \\\n\t\t\t| $(JIM_TCLSH) $(TOP)\\tool\\replace.tcl exact . ^, >> sqlite3rc.h \\\n\t)\n\techo #endif >> sqlite3rc.h\n\t$(LTRCOMPILE) -fo $(LIBRESOBJS) $(TOP)\\src\\sqlite3.rc\n# <</block1>>\n!ENDIF\n\n# <<mark>>\n# Rules to build individual *.lo files from files in the src directory.\n#\nalter.lo:\t$(TOP)\\src\\alter.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\alter.c\n\nanalyze.lo:\t$(TOP)\\src\\analyze.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\analyze.c\n\nattach.lo:\t$(TOP)\\src\\attach.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\attach.c\n\nauth.lo:\t$(TOP)\\src\\auth.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\auth.c\n\nbackup.lo:\t$(TOP)\\src\\backup.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\backup.c\n\nbitvec.lo:\t$(TOP)\\src\\bitvec.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\bitvec.c\n\nbtmutex.lo:\t$(TOP)\\src\\btmutex.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\btmutex.c\n\nbtree.lo:\t$(TOP)\\src\\btree.c $(HDR) $(TOP)\\src\\pager.h\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\btree.c\n\nbuild.lo:\t$(TOP)\\src\\build.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\build.c\n\ncallback.lo:\t$(TOP)\\src\\callback.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\callback.c\n\ncomplete.lo:\t$(TOP)\\src\\complete.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\complete.c\n\nctime.lo:\t$(TOP)\\src\\ctime.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\ctime.c\n\ndate.lo:\t$(TOP)\\src\\date.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\date.c\n\ndbpage.lo:\t$(TOP)\\src\\dbpage.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\dbpage.c\n\ndbstat.lo:\t$(TOP)\\src\\dbstat.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\dbstat.c\n\ndelete.lo:\t$(TOP)\\src\\delete.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\delete.c\n\nexpr.lo:\t$(TOP)\\src\\expr.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\expr.c\n\nfault.lo:\t$(TOP)\\src\\fault.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\fault.c\n\nfkey.lo:\t$(TOP)\\src\\fkey.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\fkey.c\n\nfunc.lo:\t$(TOP)\\src\\func.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\func.c\n\nglobal.lo:\t$(TOP)\\src\\global.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\global.c\n\nhash.lo:\t$(TOP)\\src\\hash.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\hash.c\n\ninsert.lo:\t$(TOP)\\src\\insert.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\insert.c\n\njson.lo:\t$(TOP)\\src\\json.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\json.c\n\nlegacy.lo:\t$(TOP)\\src\\legacy.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\legacy.c\n\nloadext.lo:\t$(TOP)\\src\\loadext.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\loadext.c\n\nmain.lo:\t$(TOP)\\src\\main.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\main.c\n\nmalloc.lo:\t$(TOP)\\src\\malloc.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\malloc.c\n\nmem0.lo:\t$(TOP)\\src\\mem0.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\mem0.c\n\nmem1.lo:\t$(TOP)\\src\\mem1.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\mem1.c\n\nmem2.lo:\t$(TOP)\\src\\mem2.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\mem2.c\n\nmem3.lo:\t$(TOP)\\src\\mem3.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\mem3.c\n\nmem5.lo:\t$(TOP)\\src\\mem5.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\mem5.c\n\nmemdb.lo:\t$(TOP)\\src\\memdb.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\memdb.c\n\nmemjournal.lo:\t$(TOP)\\src\\memjournal.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\memjournal.c\n\nmutex.lo:\t$(TOP)\\src\\mutex.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\mutex.c\n\nmutex_noop.lo:\t$(TOP)\\src\\mutex_noop.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\mutex_noop.c\n\nmutex_unix.lo:\t$(TOP)\\src\\mutex_unix.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\mutex_unix.c\n\nmutex_w32.lo:\t$(TOP)\\src\\mutex_w32.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\mutex_w32.c\n\nnotify.lo:\t$(TOP)\\src\\notify.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\notify.c\n\npager.lo:\t$(TOP)\\src\\pager.c $(HDR) $(TOP)\\src\\pager.h\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\pager.c\n\npcache.lo:\t$(TOP)\\src\\pcache.c $(HDR) $(TOP)\\src\\pcache.h\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\pcache.c\n\npcache1.lo:\t$(TOP)\\src\\pcache1.c $(HDR) $(TOP)\\src\\pcache.h\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\pcache1.c\n\nos.lo:\t$(TOP)\\src\\os.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\os.c\n\nos_kv.lo:\t$(TOP)\\src\\os_kv.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\os_kv.c\n\nos_unix.lo:\t$(TOP)\\src\\os_unix.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\os_unix.c\n\nos_win.lo:\t$(TOP)\\src\\os_win.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\os_win.c\n\npragma.lo:\t$(TOP)\\src\\pragma.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\pragma.c\n\nprepare.lo:\t$(TOP)\\src\\prepare.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\prepare.c\n\nprintf.lo:\t$(TOP)\\src\\printf.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\printf.c\n\nrandom.lo:\t$(TOP)\\src\\random.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\random.c\n\nresolve.lo:\t$(TOP)\\src\\resolve.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\resolve.c\n\nrowset.lo:\t$(TOP)\\src\\rowset.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\rowset.c\n\nselect.lo:\t$(TOP)\\src\\select.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\select.c\n\nstatus.lo:\t$(TOP)\\src\\status.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\status.c\n\ntable.lo:\t$(TOP)\\src\\table.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\table.c\n\nthreads.lo:\t$(TOP)\\src\\threads.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\threads.c\n\ntokenize.lo:\t$(TOP)\\src\\tokenize.c keywordhash.h $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\tokenize.c\n\ntreeview.lo:\t$(TOP)\\src\\treeview.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\treeview.c\n\ntrigger.lo:\t$(TOP)\\src\\trigger.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\trigger.c\n\nupdate.lo:\t$(TOP)\\src\\update.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\update.c\n\nupsert.lo:\t$(TOP)\\src\\upsert.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\upsert.c\n\nutf.lo:\t$(TOP)\\src\\utf.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\utf.c\n\nutil.lo:\t$(TOP)\\src\\util.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\util.c\n\nvacuum.lo:\t$(TOP)\\src\\vacuum.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\vacuum.c\n\nvdbe.lo:\t$(TOP)\\src\\vdbe.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\vdbe.c\n\nvdbeapi.lo:\t$(TOP)\\src\\vdbeapi.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\vdbeapi.c\n\nvdbeaux.lo:\t$(TOP)\\src\\vdbeaux.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\vdbeaux.c\n\nvdbeblob.lo:\t$(TOP)\\src\\vdbeblob.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\vdbeblob.c\n\nvdbemem.lo:\t$(TOP)\\src\\vdbemem.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\vdbemem.c\n\nvdbesort.lo:\t$(TOP)\\src\\vdbesort.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\vdbesort.c\n\nvdbetrace.lo:\t$(TOP)\\src\\vdbetrace.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\vdbetrace.c\n\nvdbevtab.lo:\t$(TOP)\\src\\vdbevtab.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\vdbevtab.c\n\nvtab.lo:\t$(TOP)\\src\\vtab.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\vtab.c\n\nwal.lo:\t$(TOP)\\src\\wal.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\wal.c\n\nwalker.lo:\t$(TOP)\\src\\walker.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\walker.c\n\nwhere.lo:\t$(TOP)\\src\\where.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\where.c\n\nwherecode.lo:\t$(TOP)\\src\\wherecode.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\wherecode.c\n\nwhereexpr.lo:\t$(TOP)\\src\\whereexpr.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\whereexpr.c\n\nwindow.lo:\t$(TOP)\\src\\window.c $(HDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\window.c\n\ntclsqlite.lo:\t$(TOP)\\src\\tclsqlite.c $(HDR) $(SQLITE_TCL_DEP)\n\t$(LTCOMPILE) $(NO_WARN) -DUSE_TCL_STUBS=1 -DBUILD_sqlite -I$(TCLINCDIR) -c $(TOP)\\src\\tclsqlite.c\n\ntclsqlite-shell.lo:\t$(TOP)\\src\\tclsqlite.c $(HDR) $(SQLITE_TCL_DEP)\n\t$(LTCOMPILE) $(NO_WARN) -DTCLSH -DBUILD_sqlite -I$(TCLINCDIR) -c $(TOP)\\src\\tclsqlite.c\n\ntclsqlite3.exe:\ttclsqlite-shell.lo $(SQLITE3C) $(SQLITE3H) $(LIBRESOBJS)\n\t$(LTLINK) $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS) $(TCLLIBPATHS) $(LTLIBPATHS) /OUT:$@ tclsqlite-shell.lo $(LIBRESOBJS) $(TCLLIBS) $(LTLIBS) $(TLIBS)\n\n# Rules to build opcodes.c and opcodes.h\n#\nopcodes.c:\topcodes.h $(TOP)\\tool\\mkopcodec.tcl $(JIM_TCLSH)\n\t$(JIM_TCLSH) $(TOP)\\tool\\mkopcodec.tcl opcodes.h > opcodes.c\n\nopcodes.h:\tparse.h $(TOP)\\src\\vdbe.c $(TOP)\\tool\\mkopcodeh.tcl $(JIM_TCLSH)\n\ttype parse.h $(TOP)\\src\\vdbe.c | $(JIM_TCLSH) $(TOP)\\tool\\mkopcodeh.tcl > opcodes.h\n\n# Rules to build parse.c and parse.h - the outputs of lemon.\n#\nparse.h:\tparse.c\n\nparse.c:\t$(TOP)\\src\\parse.y lemon.exe\n\tdel /Q parse.y parse.h parse.h.temp 2>NUL\n\tcopy /Y $(TOP)\\src\\parse.y .\n\tcopy /B parse.y +,,\n\t.\\lemon.exe $(REQ_FEATURE_FLAGS) $(OPT_FEATURE_FLAGS) $(EXT_FEATURE_FLAGS) $(OPTS) -S parse.y\n\n$(SQLITE3H):\t$(TOP)\\src\\sqlite.h.in $(TOP)\\manifest mksourceid.exe $(TOP)\\VERSION $(JIM_TCLSH)\n\t$(JIM_TCLSH) $(TOP)\\tool\\mksqlite3h.tcl \"$(TOP:\\=/)\" > $(SQLITE3H) $(MKSQLITE3H_ARGS)\n\nsqlite3ext.h:\t.target_source\n!IF $(USE_STDCALL)!=0 || $(FOR_WIN10)!=0\n\ttype tsrc\\sqlite3ext.h | $(TCLSH_CMD) $(TOP)\\tool\\replace.tcl regsub \"\\(\\*\\)\" \"(SQLITE_CALLBACK *)\" \\\n\t\t| $(TCLSH_CMD) $(TOP)\\tool\\replace.tcl regsub \"\\(\\*\" \"(SQLITE_APICALL *\" > sqlite3ext.h\n\tcopy /Y sqlite3ext.h tsrc\\sqlite3ext.h\n!ELSE\n\tcopy /Y tsrc\\sqlite3ext.h sqlite3ext.h\n\tcopy /B sqlite3ext.h +,,\n!ENDIF\n\nsqlite3session.h:\t$(TOP)\\ext\\session\\sqlite3session.h\n\tcopy /Y $(TOP)\\ext\\session\\sqlite3session.h .\n\tcopy /B sqlite3session.h +,,\n\nmkkeywordhash.exe:\t$(TOP)\\tool\\mkkeywordhash.c\n\t$(BCC) $(NO_WARN) -Fe$@ $(REQ_FEATURE_FLAGS) $(OPT_FEATURE_FLAGS) $(EXT_FEATURE_FLAGS) $(OPTS) \\\n\t\t$(TOP)\\tool\\mkkeywordhash.c /link $(LDFLAGS) $(NLTLINKOPTS) $(NLTLIBPATHS)\n\nkeywordhash.h:\t$(TOP)\\tool\\mkkeywordhash.c mkkeywordhash.exe\n\t.\\mkkeywordhash.exe > keywordhash.h\n\n# Source and header files that shell.c depends on\nSHELL_DEP = \\\n    $(TOP)\\src\\shell.c.in \\\n    $(TOP)\\ext\\expert\\sqlite3expert.c \\\n    $(TOP)\\ext\\expert\\sqlite3expert.h \\\n    $(TOP)\\ext\\intck\\sqlite3intck.c \\\n    $(TOP)\\ext\\intck\\sqlite3intck.h \\\n    $(TOP)\\ext\\misc\\appendvfs.c \\\n    $(TOP)\\ext\\misc\\base64.c \\\n    $(TOP)\\ext\\misc\\base85.c \\\n    $(TOP)\\ext\\misc\\completion.c \\\n    $(TOP)\\ext\\misc\\decimal.c \\\n    $(TOP)\\ext\\misc\\fileio.c \\\n    $(TOP)\\ext\\misc\\ieee754.c \\\n    $(TOP)\\ext\\misc\\memtrace.c \\\n    $(TOP)\\ext\\misc\\pcachetrace.c \\\n    $(TOP)\\ext\\misc\\percentile.c \\\n    $(TOP)\\ext\\misc\\regexp.c \\\n    $(TOP)\\ext\\misc\\series.c \\\n    $(TOP)\\ext\\misc\\sha1.c \\\n    $(TOP)\\ext\\misc\\shathree.c \\\n    $(TOP)\\ext\\misc\\sqlar.c \\\n    $(TOP)\\ext\\misc\\sqlite3_stdio.c \\\n    $(TOP)\\ext\\misc\\sqlite3_stdio.h \\\n    $(TOP)\\ext\\misc\\uint.c \\\n    $(TOP)\\ext\\misc\\vfstrace.c \\\n    $(TOP)\\ext\\misc\\zipfile.c \\\n    $(TOP)\\ext\\recover\\dbdata.c \\\n    $(TOP)\\ext\\recover\\sqlite3recover.c \\\n    $(TOP)\\ext\\recover\\sqlite3recover.h \\\n    $(TOP)\\src\\test_windirent.c \\\n    $(TOP)\\src\\test_windirent.h\n\n# If use of zlib is enabled, add the \"zipfile.c\" source file.\n#\n!IF $(USE_ZLIB)!=0\nSHELL_DEP = $(SHELL_DEP) $(TOP)\\ext\\misc\\sqlar.c\nSHELL_DEP = $(SHELL_DEP) $(TOP)\\ext\\misc\\zipfile.c\n!ENDIF\n\nshell.c:\t$(SHELL_DEP) $(TOP)\\tool\\mkshellc.tcl $(JIM_TCLSH)\n\t$(JIM_TCLSH) $(TOP)\\tool\\mkshellc.tcl > shell.c\n\nzlib:\n\tpushd $(ZLIBDIR) && $(MAKE) /f win32\\Makefile.msc clean $(ZLIBLIB) && popd\n\n# Rules to build the extension objects.\n#\nicu.lo:\t$(TOP)\\ext\\icu\\icu.c $(HDR) $(EXTHDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) $(NO_WARN) -DSQLITE_CORE -c $(TOP)\\ext\\icu\\icu.c\n\nfts3.lo:\t$(TOP)\\ext\\fts3\\fts3.c $(HDR) $(EXTHDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) $(NO_WARN) -DSQLITE_CORE -c $(TOP)\\ext\\fts3\\fts3.c\n\nfts3_aux.lo:\t$(TOP)\\ext\\fts3\\fts3_aux.c $(HDR) $(EXTHDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) $(NO_WARN) -DSQLITE_CORE -c $(TOP)\\ext\\fts3\\fts3_aux.c\n\nfts3_expr.lo:\t$(TOP)\\ext\\fts3\\fts3_expr.c $(HDR) $(EXTHDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) $(NO_WARN) -DSQLITE_CORE -c $(TOP)\\ext\\fts3\\fts3_expr.c\n\nfts3_hash.lo:\t$(TOP)\\ext\\fts3\\fts3_hash.c $(HDR) $(EXTHDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) $(NO_WARN) -DSQLITE_CORE -c $(TOP)\\ext\\fts3\\fts3_hash.c\n\nfts3_icu.lo:\t$(TOP)\\ext\\fts3\\fts3_icu.c $(HDR) $(EXTHDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) $(NO_WARN) -DSQLITE_CORE -c $(TOP)\\ext\\fts3\\fts3_icu.c\n\nfts3_snippet.lo:\t$(TOP)\\ext\\fts3\\fts3_snippet.c $(HDR) $(EXTHDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) $(NO_WARN) -DSQLITE_CORE -c $(TOP)\\ext\\fts3\\fts3_snippet.c\n\nfts3_porter.lo:\t$(TOP)\\ext\\fts3\\fts3_porter.c $(HDR) $(EXTHDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) $(NO_WARN) -DSQLITE_CORE -c $(TOP)\\ext\\fts3\\fts3_porter.c\n\nfts3_tokenizer.lo:\t$(TOP)\\ext\\fts3\\fts3_tokenizer.c $(HDR) $(EXTHDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) $(NO_WARN) -DSQLITE_CORE -c $(TOP)\\ext\\fts3\\fts3_tokenizer.c\n\nfts3_tokenizer1.lo:\t$(TOP)\\ext\\fts3\\fts3_tokenizer1.c $(HDR) $(EXTHDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) $(NO_WARN) -DSQLITE_CORE -c $(TOP)\\ext\\fts3\\fts3_tokenizer1.c\n\nfts3_tokenize_vtab.lo:\t$(TOP)\\ext\\fts3\\fts3_tokenize_vtab.c $(HDR) $(EXTHDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) $(NO_WARN) -DSQLITE_CORE -c $(TOP)\\ext\\fts3\\fts3_tokenize_vtab.c\n\nfts3_unicode.lo:\t$(TOP)\\ext\\fts3\\fts3_unicode.c $(HDR) $(EXTHDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) $(NO_WARN) -DSQLITE_CORE -c $(TOP)\\ext\\fts3\\fts3_unicode.c\n\nfts3_unicode2.lo:\t$(TOP)\\ext\\fts3\\fts3_unicode2.c $(HDR) $(EXTHDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) $(NO_WARN) -DSQLITE_CORE -c $(TOP)\\ext\\fts3\\fts3_unicode2.c\n\nfts3_write.lo:\t$(TOP)\\ext\\fts3\\fts3_write.c $(HDR) $(EXTHDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) $(NO_WARN) -DSQLITE_CORE -c $(TOP)\\ext\\fts3\\fts3_write.c\n\nstmt.lo:\t$(TOP)\\ext\\misc\\stmt.c $(HDR) $(EXTHDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) $(NO_WARN) -DSQLITE_CORE -c $(TOP)\\ext\\misc\\stmt.c\n\nrtree.lo:\t$(TOP)\\ext\\rtree\\rtree.c $(HDR) $(EXTHDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) $(NO_WARN) -DSQLITE_CORE -c $(TOP)\\ext\\rtree\\rtree.c\n\nsqlite3session.lo:\t$(TOP)\\ext\\session\\sqlite3session.c $(HDR) $(EXTHDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) $(NO_WARN) -DSQLITE_CORE -c $(TOP)\\ext\\session\\sqlite3session.c\n\n# FTS5 things\n#\nFTS5_SRC = \\\n   $(TOP)\\ext\\fts5\\fts5.h \\\n   $(TOP)\\ext\\fts5\\fts5Int.h \\\n   $(TOP)\\ext\\fts5\\fts5_aux.c \\\n   $(TOP)\\ext\\fts5\\fts5_buffer.c \\\n   $(TOP)\\ext\\fts5\\fts5_main.c \\\n   $(TOP)\\ext\\fts5\\fts5_config.c \\\n   $(TOP)\\ext\\fts5\\fts5_expr.c \\\n   $(TOP)\\ext\\fts5\\fts5_hash.c \\\n   $(TOP)\\ext\\fts5\\fts5_index.c \\\n   fts5parse.c fts5parse.h \\\n   $(TOP)\\ext\\fts5\\fts5_storage.c \\\n   $(TOP)\\ext\\fts5\\fts5_tokenize.c \\\n   $(TOP)\\ext\\fts5\\fts5_unicode2.c \\\n   $(TOP)\\ext\\fts5\\fts5_varint.c \\\n   $(TOP)\\ext\\fts5\\fts5_vocab.c\n\nLSM1_SRC = \\\n   $(TOP)\\ext\\lsm1\\lsm.h \\\n   $(TOP)\\ext\\lsm1\\lsmInt.h \\\n   $(TOP)\\ext\\lsm1\\lsm_ckpt.c \\\n   $(TOP)\\ext\\lsm1\\lsm_file.c \\\n   $(TOP)\\ext\\lsm1\\lsm_log.c \\\n   $(TOP)\\ext\\lsm1\\lsm_main.c \\\n   $(TOP)\\ext\\lsm1\\lsm_mem.c \\\n   $(TOP)\\ext\\lsm1\\lsm_mutex.c \\\n   $(TOP)\\ext\\lsm1\\lsm_shared.c \\\n   $(TOP)\\ext\\lsm1\\lsm_sorted.c \\\n   $(TOP)\\ext\\lsm1\\lsm_str.c \\\n   $(TOP)\\ext\\lsm1\\lsm_tree.c \\\n   $(TOP)\\ext\\lsm1\\lsm_unix.c \\\n   $(TOP)\\ext\\lsm1\\lsm_varint.c \\\n   $(TOP)\\ext\\lsm1\\lsm_vtab.c \\\n   $(TOP)\\ext\\lsm1\\lsm_win32.c\n\nfts5parse.c:\t$(TOP)\\ext\\fts5\\fts5parse.y lemon.exe\n\tcopy /Y $(TOP)\\ext\\fts5\\fts5parse.y .\n\tcopy /B fts5parse.y +,,\n\tdel /Q fts5parse.h 2>NUL\n\t.\\lemon.exe $(REQ_FEATURE_FLAGS) $(OPT_FEATURE_FLAGS) $(EXT_FEATURE_FLAGS) $(OPTS) -S fts5parse.y\n\nfts5parse.h:\tfts5parse.c\n\nfts5.c:\t$(FTS5_SRC) $(JIM_TCLSH)\n\t$(JIM_TCLSH) $(TOP)\\ext\\fts5\\tool\\mkfts5c.tcl\n\tcopy /Y $(TOP)\\ext\\fts5\\fts5.h .\n\tcopy /B fts5.h +,,\n\nlsm1.c:\t$(LSM1_SRC) $(JIM_TCLSH)\n\t$(JIM_TCLSH) $(TOP)\\ext\\lsm1\\tool\\mklsm1c.tcl\n\tcopy /Y $(TOP)\\ext\\lsm1\\lsm.h .\n\tcopy /B lsm.h +,,\n\nfts5.lo:\tfts5.c $(HDR) $(EXTHDR)\n\t$(LTCOMPILE) $(CORE_COMPILE_OPTS) $(NO_WARN) -DSQLITE_CORE -c fts5.c\n\nfts5_ext.lo:\tfts5.c $(HDR) $(EXTHDR)\n\t$(LTCOMPILE) $(NO_WARN) -c fts5.c\n\nfts5.dll:\tfts5_ext.lo\n\t$(LD) $(LDFLAGS) $(LTLINKOPTS) $(LTLIBPATHS) /DLL /OUT:$@ fts5_ext.lo\n\nsqlite3rbu.lo:\t$(TOP)\\ext\\rbu\\sqlite3rbu.c $(HDR) $(EXTHDR)\n\t$(LTCOMPILE) -DSQLITE_CORE -c $(TOP)\\ext\\rbu\\sqlite3rbu.c\n\n# Rules to build the 'testfixture' application.\n#\n# If using the amalgamation, use sqlite3.c directly to build the test\n# fixture.  Otherwise link against libsqlite3.lib.  (This distinction is\n# necessary because the test fixture requires non-API symbols which are\n# hidden when the library is built via the amalgamation).\n#\nTESTFIXTURE_FLAGS = -DTCLSH_INIT_PROC=sqlite3TestInit -DSQLITE_TEST=1 -DSQLITE_CRASH_TEST=1\nTESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_SERVER=1 -DSQLITE_PRIVATE=\"\"\nTESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_CORE $(NO_WARN)\nTESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_SERIES_CONSTRAINT_VERIFY=1\nTESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_DEFAULT_PAGE_SIZE=1024\nTESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_ENABLE_STMTVTAB=1\nTESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_ENABLE_DBPAGE_VTAB=1\nTESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_ENABLE_BYTECODE_VTAB=1\nTESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_CKSUMVFS_STATIC=1\nTESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) $(TEST_CCONV_OPTS)\nTESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_STATIC_RANDOMJSON\nTESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_STRICT_SUBTYPE=1\n\nTESTFIXTURE_SRC0 = $(TESTEXT) $(TESTSRC2)\nTESTFIXTURE_SRC1 = $(TESTEXT) $(SQLITE3C)\n!IF $(USE_AMALGAMATION)==0\nTESTFIXTURE_SRC = $(TESTSRC) $(TOP)\\src\\tclsqlite.c $(TESTFIXTURE_SRC0)\n!ELSE\nTESTFIXTURE_SRC = $(TESTSRC) $(TOP)\\src\\tclsqlite.c $(TESTFIXTURE_SRC1)\n!ENDIF\n\n!IF $(USE_STDCALL)!=0 || $(FOR_WIN10)!=0\nsqlite_tclDecls.h:\n\techo #ifndef SQLITE_TCLAPI > $(SQLITETCLDECLSH)\n\techo #  define SQLITE_TCLAPI >> $(SQLITETCLDECLSH)\n\techo #endif >> $(SQLITETCLDECLSH)\n\ttype \"$(TCLINCDIR)\\tclDecls.h\" \\\n\t\t| $(TCLSH_CMD) $(TOP)\\tool\\replace.tcl regsub \"^(EXTERN(?: CONST\\d+?)?\\s+?[^\\(]*?\\s+?)Tcl_\" \"\\1 SQLITE_TCLAPI Tcl_\" \\\n\t\t| $(TCLSH_CMD) $(TOP)\\tool\\replace.tcl regsub \"^(EXTERN\\s+?(?:void|VOID)\\s+?)TclFreeObj\" \"\\1 SQLITE_TCLAPI TclFreeObj\" \\\n\t\t| $(TCLSH_CMD) $(TOP)\\tool\\replace.tcl regsub \"\\(\\*tcl_\" \"(SQLITE_TCLAPI *tcl_\" \\\n\t\t| $(TCLSH_CMD) $(TOP)\\tool\\replace.tcl regsub \"\\(\\*tclFreeObj\" \"(SQLITE_TCLAPI *tclFreeObj\" \\\n\t\t| $(TCLSH_CMD) $(TOP)\\tool\\replace.tcl regsub \"\\(\\*\" \"(SQLITE_TCLAPI *\" >> $(SQLITETCLDECLSH)\n\nsqlite_tcl.h:\n\ttype \"$(TCLINCDIR)\\tcl.h\" | $(TCLSH_CMD) $(TOP)\\tool\\replace.tcl exact tclDecls.h sqlite_tclDecls.h \\\n\t\t| $(TCLSH_CMD) $(TOP)\\tool\\replace.tcl regsub \"typedef (.*?)\\(Tcl_\" \"typedef \\1 (SQLITE_TCLAPI Tcl_\" \\\n\t\t| $(TCLSH_CMD) $(TOP)\\tool\\replace.tcl exact \"void (*freeProc)\" \"void (SQLITE_TCLAPI *freeProc)\" \\\n\t\t| $(TCLSH_CMD) $(TOP)\\tool\\replace.tcl exact \"Tcl_HashEntry *(*findProc)\" \"Tcl_HashEntry *(SQLITE_TCLAPI *findProc)\" \\\n\t\t| $(TCLSH_CMD) $(TOP)\\tool\\replace.tcl exact \"Tcl_HashEntry *(*createProc)\" \"Tcl_HashEntry *(SQLITE_TCLAPI *createProc)\" >> $(SQLITETCLH)\n!ENDIF\n\ntestfixture.exe:\t$(TESTFIXTURE_SRC) $(TESTFIXTURE_DEP) $(SQLITE3H) $(LIBRESOBJS) $(HDR) $(SQLITE_TCL_DEP)\n\t$(LTLINK) -DSQLITE_NO_SYNC=1 $(TESTFIXTURE_FLAGS) \\\n\t\t-DBUILD_sqlite -I$(TCLINCDIR) \\\n\t\t$(TESTFIXTURE_SRC) \\\n\t\t/link $(LDFLAGS) $(LTLINKOPTS) $(TCLLIBPATHS) $(LTLIBPATHS) $(LIBRESOBJS) $(TCLLIBS) $(LTLIBS) $(TLIBS)\n\nextensiontest:\ttestfixture.exe testloadext.dll\n\t@set PATH=$(LIBTCLPATH);$(PATH)\n\t.\\testfixture.exe $(TOP)\\test\\loadext.test $(TESTOPTS)\n\ntool-zip:\ttestfixture.exe sqlite3.exe sqldiff.exe sqlite3_analyzer.exe sqlite3_rsync.exe $(TOP)\\tool\\mktoolzip.tcl\n\t.\\testfixture.exe $(TOP)\\tool\\mktoolzip.tcl\n\ncoretestprogs:\ttestfixture.exe sqlite3.exe\n\ntestprogs:\t$(TESTPROGS) srcck1.exe fuzzcheck.exe sessionfuzz.exe\n\nfulltest:\talltest fuzztest\n\nalltest:\t$(TESTPROGS)\n\t@set PATH=$(LIBTCLPATH);$(PATH)\n\t.\\testfixture.exe $(TOP)\\test\\all.test $(TESTOPTS)\n\nsoaktest:\t$(TESTPROGS)\n\t@set PATH=$(LIBTCLPATH);$(PATH)\n\t.\\testfixture.exe $(TOP)\\test\\all.test -soak=1 $(TESTOPTS)\n\nfulltestonly:\t$(TESTPROGS) fuzztest\n\t@set PATH=$(LIBTCLPATH);$(PATH)\n\t.\\testfixture.exe $(TOP)\\test\\full.test\n\nqueryplantest:\ttestfixture.exe shell\n\t@set PATH=$(LIBTCLPATH);$(PATH)\n\t.\\testfixture.exe $(TOP)\\test\\permutations.test queryplanner $(TESTOPTS)\n\nfuzztest:\tfuzzcheck.exe\n\t.\\fuzzcheck.exe $(FUZZDATA)\n\n# Legacy testing target for third-party integrators.  The SQLite\n# developers seldom use this target themselves.  Instead\n# they use \"nmake /f Makefile.msc devtest\" which runs tests on\n# a standard set of options\n#\ntest:\t$(TESTPROGS) sourcetest fuzztest tcltest\n\n# Minimal testing that runs in less than 3 minutes (on a fast machine)\n#\nquicktest:\ttestfixture.exe sourcetest\n\t@set PATH=$(LIBTCLPATH);$(PATH)\n\t.\\testfixture.exe $(TOP)\\test\\extraquick.test $(TESTOPTS)\n\n# This is the common case.  Run many tests that do not take too long,\n# including fuzzcheck, sqlite3_analyzer, and sqldiff tests.\n#\n\n# The veryquick.test TCL tests.\n#\ntcltest: testfixture.exe\n\t@set PATH=$(LIBTCLPATH);$(PATH)\n\t.\\testfixture.exe $(TOP)\\test\\veryquick.test $(TESTOPTS)\n\n# Runs all the same tests cases as the \"tcltest\" target but uses\n# the testrunner.tcl script to run them in multiple cores\n# concurrently.\ntestrunner:\ttestfixture.exe\n\t.\\testfixture.exe $(TOP)\\test\\testrunner.tcl\n\n# This is the testing target preferred by the core SQLite developers.\n# It runs tests under a standard configuration.  The devs run \n# \"nmake /f Makefile.msc devtest\" prior to each check-in, at a minimum.\n# Probably other tests too, but at least this one.\n#\ndevtest:\tsrctree-check sourcetest\n\t$(TCLSH_CMD) $(TOP)\\test\\testrunner.tcl mdevtest\n\nmdevtest:\n\t$(TCLSH_CMD) $(TOP)\\test\\testrunner.tcl mdevtest\n\n# Validate that various generated files in the source tree\n# are up-to-date.\n#\nsrctree-check:\t$(TOP)\\tool\\srctree-check.tcl\n\t$(TCLSH_CMD) $(TOP)\\tool\\srctree-check.tcl\n\n# Testing for a release\n#\nreleasetest:\n\t$(TCLSH_CMD) $(TOP)\\test\\testrunner.tcl release\n\n\nsmoketest:\t$(TESTPROGS)\n\t@set PATH=$(LIBTCLPATH);$(PATH)\n\t.\\testfixture.exe $(TOP)\\test\\main.test $(TESTOPTS)\n\nshelltest: $(TESTPROGS)\n\t.\\testfixture.exe $(TOP)\\test\\permutations.test shell\n\nsqlite3_analyzer.c:\t$(SQLITE3C) $(SQLITE3H) $(TOP)\\src\\tclsqlite.c $(TOP)\\tool\\spaceanal.tcl $(TOP)\\tool\\mkccode.tcl $(TOP)\\tool\\sqlite3_analyzer.c.in $(TOP)\\ext\\misc\\sqlite3_stdio.h $(TOP)\\ext\\misc\\sqlite3_stdio.c $(SQLITE_TCL_DEP)\n\t$(TCLSH_CMD) $(TOP)\\tool\\mkccode.tcl -DINCLUDE_SQLITE3_C $(TOP)\\tool\\sqlite3_analyzer.c.in > $@\n\nsqlite3_analyzer.exe:\tsqlite3_analyzer.c $(LIBRESOBJS)\n\t$(LTLINK) $(NO_WARN) -DBUILD_sqlite -I$(TCLINCDIR) sqlite3_analyzer.c \\\n\t\t/link $(LDFLAGS) $(LTLINKOPTS) $(TCLLIBPATHS) $(LTLIBPATHS) $(LIBRESOBJS) $(TCLLIBS) $(LTLIBS) $(TLIBS)\n\nsqltclsh.c: sqlite3.c $(TOP)\\src\\tclsqlite.c $(TOP)\\tool\\sqltclsh.tcl $(TOP)\\ext\\misc\\appendvfs.c $(TOP)\\tool\\mkccode.tcl $(TOP)\\tool\\sqltclsh.c.in\n\t$(TCLSH_CMD) $(TOP)\\tool\\mkccode.tcl $(TOP)\\tool\\sqltclsh.c.in >sqltclsh.c\n\nsqltclsh.exe: sqltclsh.c  $(SHELL_CORE_DEP) $(LIBRESOBJS)\n\t$(LTLINK) $(NO_WARN) -DBUILD_sqlite -I$(TCLINCDIR) sqltclsh.c \\\n\t\t/link $(LDFLAGS) $(LTLINKOPTS) $(TCLLIBPATHS) $(LTLIBPATHS) $(LIBRESOBJS) $(TCLLIBS) $(LTLIBS) $(TLIBS)\n\nsqlite3_expert.exe: $(SQLITE3C) $(TOP)\\ext\\expert\\sqlite3expert.h $(TOP)\\ext\\expert\\sqlite3expert.c $(TOP)\\ext\\expert\\expert.c\n\t$(LTLINK) $(NO_WARN)\t$(TOP)\\ext\\expert\\sqlite3expert.c $(TOP)\\ext\\expert\\expert.c $(SQLITE3C) $(TLIBS)\n\nCHECKER_DEPS =\\\n  $(TOP)\\tool\\mkccode.tcl \\\n  sqlite3.c \\\n  $(TOP)\\src\\tclsqlite.c \\\n  $(TOP)\\ext\\repair\\sqlite3_checker.tcl \\\n  $(TOP)\\ext\\repair\\checkindex.c \\\n  $(TOP)\\ext\\repair\\checkfreelist.c \\\n  $(TOP)\\ext\\misc\\btreeinfo.c \\\n  $(TOP)\\ext\\repair\\sqlite3_checker.c.in\n\nsqlite3_checker.c:\t$(CHECKER_DEPS)\n\t$(TCLSH_CMD) $(TOP)\\tool\\mkccode.tcl $(TOP)\\ext\\repair\\sqlite3_checker.c.in > $@\n\nsqlite3_checker.exe:\tsqlite3_checker.c $(LIBRESOBJS)\n\t$(LTLINK) $(NO_WARN) -DBUILD_sqlite -I$(TCLINCDIR) sqlite3_checker.c \\\n\t\t/link $(LDFLAGS) $(LTLINKOPTS) $(TCLLIBPATHS) $(LTLIBPATHS) $(LIBRESOBJS) $(TCLLIBS) $(LTLIBS) $(TLIBS)\n\ndbdump.exe:\t$(TOP)\\ext\\misc\\dbdump.c $(SQLITE3C) $(SQLITE3H) $(LIBRESOBJS)\n\t$(LTLINK) $(NO_WARN) -DDBDUMP_STANDALONE $(TOP)\\ext\\misc\\dbdump.c $(SQLITE3C) \\\n\t\t/link $(LDFLAGS) $(LTLINKOPTS) $(LTLIBPATHS) $(LIBRESOBJS) $(LTLIBS)\n\ntestloadext.lo:\t$(TOP)\\src\\test_loadext.c $(SQLITE3H)\n\t$(LTCOMPILE) $(NO_WARN) -c $(TOP)\\src\\test_loadext.c\n\ntestloadext.dll:\ttestloadext.lo\n\t$(LD) $(LDFLAGS) $(LTLINKOPTS) $(LTLIBPATHS) /DLL /OUT:$@ testloadext.lo\n\ndbtotxt.exe:\t$(TOP)\\tool\\dbtotxt.c\n\t$(LTLINK) $(NO_WARN)\t$(TOP)\\tool\\dbtotxt.c /link $(LDFLAGS) $(LTLINKOPTS)\n\nshowdb.exe:\t$(TOP)\\tool\\showdb.c $(SQLITE3C) $(SQLITE3H)\n\t$(LTLINK) $(NO_WARN) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION \\\n\t\t$(TOP)\\tool\\showdb.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)\n\nshowstat4.exe:\t$(TOP)\\tool\\showstat4.c $(SQLITE3C) $(SQLITE3H)\n\t$(LTLINK) $(NO_WARN) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION \\\n\t\t$(TOP)\\tool\\showstat4.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)\n\nshowjournal.exe:\t$(TOP)\\tool\\showjournal.c $(SQLITE3C) $(SQLITE3H)\n\t$(LTLINK) $(NO_WARN) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION \\\n\t\t$(TOP)\\tool\\showjournal.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)\n\nshowwal.exe:\t$(TOP)\\tool\\showwal.c $(SQLITE3C) $(SQLITE3H)\n\t$(LTLINK) $(NO_WARN) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION \\\n\t\t$(TOP)\\tool\\showwal.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)\n\nshowshm.exe:\t$(TOP)\\tool\\showshm.c\n\t$(LTLINK) $(NO_WARN)\t$(TOP)\\tool\\showshm.c /link $(LDFLAGS) $(LTLINKOPTS)\n\nindex_usage.exe: $(TOP)\\tool\\index_usage.c $(SQLITE3C) $(SQLITE3H)\n\t$(LTLINK) $(NO_WARN) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION \\\n\t\t$(TOP)\\tool\\index_usage.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)\n\nchangeset.exe:\t$(TOP)\\ext\\session\\changeset.c $(SQLITE3C) $(SQLITE3H)\n\t$(LTLINK) $(NO_WARN) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION \\\n\t\t-DSQLITE_ENABLE_SESSION=1 -DSQLITE_ENABLE_PREUPDATE_HOOK=1 \\\n\t\t$(TOP)\\ext\\session\\changeset.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)\n\nchangesetfuzz.exe:\t$(TOP)\\ext\\session\\changesetfuzz.c $(SQLITE3C) $(SQLITE3H)\n\t$(LTLINK) $(NO_WARN) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION \\\n\t\t-DSQLITE_ENABLE_SESSION=1 -DSQLITE_ENABLE_PREUPDATE_HOOK=1 \\\n\t\t$(TOP)\\ext\\session\\changesetfuzz.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)\n\nfts3view.exe:\t$(TOP)\\ext\\fts3\\tool\\fts3view.c $(SQLITE3C) $(SQLITE3H)\n\t$(LTLINK) $(NO_WARN) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION \\\n\t\t$(TOP)\\ext\\fts3\\tool\\fts3view.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)\n\nrollback-test.exe:\t$(TOP)\\tool\\rollback-test.c $(SQLITE3C) $(SQLITE3H)\n\t$(LTLINK) $(NO_WARN) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION \\\n\t\t$(TOP)\\tool\\rollback-test.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)\n\natrc.exe:\t$(TOP)\\test\\atrc.c $(SQLITE3C) $(SQLITE3H)\n\t$(LTLINK) $(NO_WARN) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION \\\n\t\t$(TOP)\\test\\atrc.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)\n\nLogEst.exe:\t$(TOP)\\tool\\logest.c $(SQLITE3H)\n\t$(LTLINK) $(NO_WARN) $(TOP)\\tool\\LogEst.c /link $(LDFLAGS) $(LTLINKOPTS)\n\nwordcount.exe:\t$(TOP)\\test\\wordcount.c $(SQLITE3C) $(SQLITE3H)\n\t$(LTLINK) $(NO_WARN) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION \\\n\t\t$(TOP)\\test\\wordcount.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)\n\nspeedtest1.exe:\t$(TOP)\\test\\speedtest1.c $(SQLITE3C) $(SQLITE3H)\n\t$(LTLINK) $(NO_WARN) $(ST_COMPILE_OPTS) -DSQLITE_OMIT_LOAD_EXTENSION \\\n\t\t$(TOP)\\test\\speedtest1.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)\n\nkvtest.exe:\t$(TOP)\\test\\kvtest.c $(SQLITE3C) $(SQLITE3H)\n\t$(LTLINK) $(NO_WARN) $(KV_COMPILE_OPTS) \\\n\t\t$(TOP)\\test\\kvtest.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)\n\nrbu.exe:\t$(TOP)\\ext\\rbu\\rbu.c $(TOP)\\ext\\rbu\\sqlite3rbu.c $(SQLITE3C) $(SQLITE3H)\n\t$(LTLINK) $(NO_WARN) -DSQLITE_ENABLE_RBU \\\n\t\t$(TOP)\\ext\\rbu\\rbu.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)\n\nTHREADTEST3_SRC = \\\n  $(TOP)\\test\\threadtest3.c \\\n  $(TOP)\\test\\tt3_checkpoint.c \\\n  $(TOP)\\test\\tt3_index.c \\\n  $(TOP)\\test\\tt3_vacuum.c \\\n  $(TOP)\\test\\tt3_stress.c \\\n  $(TOP)\\test\\tt3_lookaside1.c\n\nthreadtest3.exe: $(THREADTEST3_SRC) $(TOP)\\src\\test_multiplex.c $(SQLITE3C) $(SQLITE3H)\n\t$(LTLINK) $(NO_WARN) $(TOP)\\test\\threadtest3.c $(TOP)\\src\\test_multiplex.c $(SQLITE3C) /link $(LDFLAGS) $(LTLINKOPTS)\n\n# Display key variables that control which version of TCL is to be used.\n#\ntcl-env:\n\t@echo TCLDIR = $(TCLDIR)\n\t@echo TCLVERSION = $(TCLVERSION)\n\t@echo TCLSUFFIX = $(TCLSUFFIX)\n\t@echo LIBTCL = $(LIBTCL)\n\t@echo LIBTCLSTUB = $(LIBTCLSTUB)\n\t@echo TCLSH_CMD = $(TCLSH_CMD)\n\t@echo JIM_TCLSH = $(JIM_TCLSH)\n\t@echo VISUALSTUDIOVERSION = $(VISUALSTUDIOVERSION)\n\nLSMDIR=$(TOP)\\ext\\lsm1\n!INCLUDE $(LSMDIR)\\Makefile.msc\n\nmoreclean:\tclean\n\tdel /Q $(SQLITE3C) $(SQLITE3H) 2>NUL\n# <</mark>>\n\nclean:\n\tdel /Q *.exp *.lo *.ilk *.lib *.obj *.ncb *.pdb *.sdf *.suo 2>NUL\n\tdel /Q *.bsc *.def *.cod *.da *.bb *.bbg *.vc gmon.out 2>NUL\n\tdel /Q $(SQLITE3EXE) $(SQLITE3DLL) Replace.exe 2>NUL\n# <<mark>>\n\tdel /Q $(SQLITE3TCLDLL) pkgIndex.tcl 2>NUL\n\tdel /Q opcodes.c opcodes.h 2>NUL\n\tdel /Q lemon.* lempar.c parse.* 2>NUL\n\tdel /Q mksourceid.* mkkeywordhash.* keywordhash.h 2>NUL\n\tdel /Q notasharedlib.* 2>NUL\n\t-rmdir /Q/S .deps 2>NUL\n\t-rmdir /Q/S .libs 2>NUL\n\t-rmdir /Q/S tsrc 2>NUL\n\tdel /Q .target_source 2>NUL\n\tdel /Q tclsqlite3.exe $(SQLITETCLH) $(SQLITETCLDECLSH) 2>NUL\n\tdel /Q lsm.dll lsmtest.exe 2>NUL\n\tdel /Q atrc.exe changesetfuzz.exe dbtotxt.exe index_usage.exe 2>NUL\n\tdel /Q testloadext.dll 2>NUL\n\tdel /Q testfixture.exe test.db 2>NUL\n\tdel /Q LogEst.exe fts3view.exe rollback-test.exe showdb.exe dbdump.exe 2>NUL\n\tdel /Q changeset.exe 2>NUL\n\tdel /Q showjournal.exe showstat4.exe showwal.exe speedtest1.exe 2>NUL\n\tdel /Q mptester.exe wordcount.exe rbu.exe srcck1.exe 2>NUL\n\tdel /Q sqlite3.c sqlite3-*.c sqlite3.h 2>NUL\n\tdel /Q sqlite3rc.h 2>NUL\n\tdel /Q shell.c sqlite3ext.h sqlite3session.h 2>NUL\n\tdel /Q sqlite3_analyzer.exe sqlite3_analyzer.c sqlite3_rsync.exe 2>NUL\n\tdel /Q sqlite-*-output.vsix 2>NUL\n\tdel /Q fuzzershell.exe fuzzcheck.exe sqldiff.exe dbhash.exe 2>NUL\n\tdel /Q sqltclsh.* 2>NUL\n\tdel /Q dbfuzz.exe sessionfuzz.exe threadtest3.exe 2>NUL\n\tdel /Q kvtest.exe ossshell.exe scrub.exe 2>NUL\n\tdel /Q showshm.exe sqlite3_checker.* sqlite3_expert.exe 2>NUL\n\tdel /Q fts5.* fts5parse.* 2>NUL\n\tdel /Q lsm.h lsm1.c 2>NUL\n\tdel /q src-verify.exe 2>NUL\n# <</mark>>\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 21.048828125,
          "content": "<h1 align=\"center\">SQLite Source Repository</h1>\n\nThis repository contains the complete source code for the\n[SQLite database engine](https://sqlite.org/), including\nmany test scripts.  However, other test scripts\nand most of the documentation are managed separately.\n\nSee the [on-line documentation](https://sqlite.org/) for more information\nabout what SQLite is and how it works from a user's perspective.  This\nREADME file is about the source code that goes into building SQLite,\nnot about how SQLite is used.\n\n## Version Control\n\nSQLite sources are managed using\n[Fossil](https://fossil-scm.org/), a distributed version control system\nthat was specifically designed and written to support SQLite development.\nThe [Fossil repository](https://sqlite.org/src/timeline) contains the urtext.\n\nIf you are reading this on GitHub or some other Git repository or service,\nthen you are looking at a mirror.  The names of check-ins and\nother artifacts in a Git mirror are different from the official\nnames for those objects.  The official names for check-ins are\nfound in a footer on the check-in comment for authorized mirrors.\nThe official check-in name can also be seen in the `manifest.uuid` file\nin the root of the tree.  Always use the official name, not  the\nGit-name, when communicating about an SQLite check-in.\n\nIf you pulled your SQLite source code from a secondary source and want to\nverify its integrity, there are hints on how to do that in the\n[Verifying Code Authenticity](#vauth) section below.\n\n## Contacting The SQLite Developers\n\nThe preferred way to ask questions or make comments about SQLite or to\nreport bugs against SQLite is to visit the \n[SQLite Forum](https://sqlite.org/forum) at <https://sqlite.org/forum/>.\nAnonymous postings are permitted.\n\nIf you think you have found a bug that has security implications and\nyou do not want to report it on the public forum, you can send a private\nemail to drh at sqlite dot org.\n\n## Public Domain\n\nThe SQLite source code is in the public domain.  See\n<https://sqlite.org/copyright.html> for details. \n\nBecause SQLite is in the public domain, we do not normally accept pull\nrequests, because if we did take a pull request, the changes in that\npull request might carry a copyright and the SQLite source code would\nthen no longer be fully in the public domain.\n\n## Obtaining The SQLite Source Code\n\nIf you do not want to use Fossil, you can download tarballs or ZIP\narchives or [SQLite archives](https://sqlite.org/cli.html#sqlar) as follows:\n\n  *  Latest trunk check-in as\n     [Tarball](https://www.sqlite.org/src/tarball/sqlite.tar.gz),\n     [ZIP-archive](https://www.sqlite.org/src/zip/sqlite.zip), or\n     [SQLite-archive](https://www.sqlite.org/src/sqlar/sqlite.sqlar).\n\n  *  Latest release as\n     [Tarball](https://www.sqlite.org/src/tarball/sqlite.tar.gz?r=release),\n     [ZIP-archive](https://www.sqlite.org/src/zip/sqlite.zip?r=release), or\n     [SQLite-archive](https://www.sqlite.org/src/sqlar/sqlite.sqlar?r=release).\n\n  *  For other check-ins, substitute an appropriate branch name or\n     tag or hash prefix in place of \"release\" in the URLs of the previous\n     bullet.  Or browse the [timeline](https://www.sqlite.org/src/timeline)\n     to locate the check-in desired, click on its information page link,\n     then click on the \"Tarball\" or \"ZIP Archive\" links on the information\n     page.\n\nTo access sources directly using [Fossil](https://fossil-scm.org/home),\nfirst install Fossil version 2.0 or later.\nSource tarballs and precompiled binaries available at\n<https://fossil-scm.org/home/uv/download.html>.  Fossil is\na stand-alone program.  To install, simply download or build the single\nexecutable file and put that file someplace on your $PATH.\nThen run commands like this:\n\n        mkdir -p ~/sqlite\n        cd ~/sqlite\n        fossil open https://sqlite.org/src\n\nThe \"fossil open\" command will take two or three minutes.  Afterwards,\nyou can do fast, bandwidth-efficient updates to the whatever versions\nof SQLite you like.  Some examples:\n\n        fossil update trunk             ;# latest trunk check-in\n        fossil update release           ;# latest official release\n        fossil update trunk:2024-01-01  ;# First trunk check-in after 2024-01-01\n        fossil update version-3.39.0    ;# Version 3.39.0\n\nOr type \"fossil ui\" to get a web-based user interface.\n\n## Compiling for Unix-like systems\n\nFirst create a directory in which to place\nthe build products.  It is recommended, but not required, that the\nbuild directory be separate from the source directory.  Cd into the\nbuild directory and then from the build directory run the configure\nscript found at the root of the source tree.  Then run \"make\".\n\nFor example:\n\n        apt install gcc make tcl-dev  ;#  Make sure you have all the necessary build tools\n        tar xzf sqlite.tar.gz         ;#  Unpack the source tree into \"sqlite\"\n        mkdir bld                     ;#  Build will occur in a sibling directory\n        cd bld                        ;#  Change to the build directory\n        ../sqlite/configure           ;#  Run the configure script\n        make sqlite3                  ;#  Builds the \"sqlite3\" command-line tool\n        make sqlite3.c                ;#  Build the \"amalgamation\" source file\n        make sqldiff                  ;#  Builds the \"sqldiff\" command-line tool\n        # Makefile targets below this point require tcl-dev\n        make tclextension-install     ;#  Build and install the SQLite TCL extension\n        make devtest                  ;#  Run development tests\n        make releasetest              ;#  Run full release tests\n        make sqlite3_analyzer         ;#  Builds the \"sqlite3_analyzer\" tool\n\nSee the makefile for additional targets.  For debugging builds, the\ncore developers typically run \"configure\" with options like this:\n\n        ../sqlite/configure --enable-all --enable-debug CFLAGS='-O0 -g'\n\nFor release builds, the core developers usually do:\n\n        ../sqlite/configure --enable-all\n\nAlmost all makefile targets require a \"tclsh\" TCL interpreter version 8.6 or\nlater.  The \"tclextension-install\" target and the test targets that follow\nall require TCL development libraries too.  (\"apt install tcl-dev\").  It is\nhelpful, but is not required, to install the SQLite TCL extension (the\n\"tclextension-install\" target) prior to running tests.  The \"releasetest\"\ntarget has additional requiremenst, such as \"valgrind\".\n\nOn \"make\" command-lines, one can add \"OPTIONS=...\" to specify additional\ncompile-time options over and above those set by ./configure.  For example,\nto compile with the SQLITE_OMIT_DEPRECATED compile-time option, one could say:\n\n        ./configure --enable-all\n        make OPTIONS=-DSQLITE_OMIT_DEPRECATED sqlite3\n\nThe configure script uses autoconf 2.61 and libtool.  If the configure\nscript does not work out for you, there is a generic makefile named\n\"Makefile.linux-gcc\" in the top directory of the source tree that you\ncan copy and edit to suit your needs.  Comments on the generic makefile\nshow what changes are needed.\n\n## Compiling for Windows Using MSVC\n\nOn Windows, everything can be compiled with MSVC.\nYou will also need a working installation of TCL.\nSee the [compile-for-windows.md](doc/compile-for-windows.md) document for\nadditional information about how to install MSVC and TCL and configure your\nbuild environment.\n\nIf you want to run tests, you need to let SQLite know the location of your\nTCL library, using a command like this:\n\n        set TCLDIR=c:\\Tcl\n\nSQLite uses \"tclsh.exe\" as part of the build process, and so that\nprogram will need to be somewhere on your %PATH%.  SQLite itself\ndoes not contain any TCL code, but it does use TCL to help with the\nbuild process and to run tests.  You may need to install TCL development\nlibraries in order to successfully complete some makefile targets.\nIt is helpful, but is not required, to install the SQLite TCL extension\n(the \"tclextension-install\" target) prior to running tests.\n\nBuild using Makefile.msc.  Example:\n\n        nmake /f Makefile.msc sqlite3.exe\n        nmake /f Makefile.msc sqlite3.c\n        nmake /f Makefile.msc sqldiff.exe\n        # Makefile targets below this point require TCL development libraries\n        nmake /f Makefile.msc tclextension-install\n        nmake /f Makefile.msc devtest\n        nmake /f Makefile.msc releasetest\n        nmake /f Makefile.msc sqlite3_analyzer.exe\n \nThere are many other makefile targets.  See comments in Makefile.msc for\ndetails.\n\nAs with the unix Makefile, the OPTIONS=... argument can be passed on the nmake\ncommand-line to enable new compile-time options.  For example:\n\n        nmake /f Makefile.msc OPTIONS=-DSQLITE_OMIT_DEPRECATED sqlite3.exe\n\n## Source Tree Map\n\n  *  **src/** - This directory contains the primary source code for the\n     SQLite core.  For historical reasons, C-code used for testing is\n     also found here.  Source files intended for testing begin with \"`test`\".\n     The `tclsqlite3.c` and `tclsqlite3.h` files are the TCL interface\n     for SQLite and are also not part of the core.\n\n  *  **test/** - This directory and its subdirectories contains code used\n     for testing.  Files that end in \"`.test`\" are TCL scripts that run\n     tests using an augmented TCL interpreter named \"testfixture\".  Use\n     a command like \"`make testfixture`\" (unix) or \n     \"`nmake /f Makefile.msc testfixture.exe`\" (windows) to build that\n     augmented TCL interpreter, then run individual tests using commands like\n     \"`testfixture test/main.test`\".  This test/ subdirectory also contains\n     additional C code modules and scripts for other kinds of testing.\n\n  *  **tool/** - This directory contains programs and scripts used to\n     build some of the machine-generated code that goes into the SQLite\n     core, as well as to build and run tests and perform diagnostics.\n     The source code to [the Lemon parser generator](./doc/lemon.html) is\n     found here.  There are also TCL scripts used to build and/or transform\n     source code files.  For example, the tool/mksqlite3h.tcl script reads\n     the src/sqlite.h.in file and uses it as a template to construct\n     the deliverable \"sqlite3.h\" file that defines the SQLite interface.\n\n  *  **ext/** - Various extensions to SQLite are found under this\n     directory.  For example, the FTS5 subsystem is in \"ext/fts5/\".\n     Some of these extensions (ex: FTS3/4, FTS5, RTREE) might get built\n     into the SQLite amalgamation, but not all of them.  The\n     \"ext/misc/\" subdirectory contains an assortment of one-file extensions,\n     many of which are omitted from the SQLite core, but which are included\n     in the [SQLite CLI](https://sqlite.org/cli.html).\n     \n  *  **doc/** - Some documentation files about SQLite internals are found\n     here.  Note, however, that the primary documentation designed for\n     application developers and users of SQLite is in a completely separate\n     repository.  Note also that the primary API documentation is derived\n     from specially constructed comments in the src/sqlite.h.in file.\n\n### Generated Source Code Files\n\nSeveral of the C-language source files used by SQLite are generated from\nother sources rather than being typed in manually by a programmer.  This\nsection will summarize those automatically-generated files.  To create all\nof the automatically-generated files, simply run \"make target&#95;source\".\nThe \"target&#95;source\" make target will create a subdirectory \"tsrc/\" and\nfill it with all the source files needed to build SQLite, both\nmanually-edited files and automatically-generated files.\n\nThe SQLite interface is defined by the **sqlite3.h** header file, which is\ngenerated from src/sqlite.h.in, ./manifest.uuid, and ./VERSION.  The\n[Tcl script](https://www.tcl.tk) at tool/mksqlite3h.tcl does the conversion.\nThe manifest.uuid file contains the SHA3 hash of the particular check-in\nand is used to generate the SQLITE\\_SOURCE\\_ID macro.  The VERSION file\ncontains the current SQLite version number.  The sqlite3.h header is really\njust a copy of src/sqlite.h.in with the source-id and version number inserted\nat just the right spots. Note that comment text in the sqlite3.h file is\nused to generate much of the SQLite API documentation.  The Tcl scripts\nused to generate that documentation are in a separate source repository.\n\nThe SQL language parser is **parse.c** which is generated from a grammar in\nthe src/parse.y file.  The conversion of \"parse.y\" into \"parse.c\" is done\nby the [lemon](./doc/lemon.html) LALR(1) parser generator.  The source code\nfor lemon is at tool/lemon.c.  Lemon uses the tool/lempar.c file as a\ntemplate for generating its parser.\nLemon also generates the **parse.h** header file, at the same time it\ngenerates parse.c.\n\nThe **opcodes.h** header file contains macros that define the numbers\ncorresponding to opcodes in the \"VDBE\" virtual machine.  The opcodes.h\nfile is generated by scanning the src/vdbe.c source file.  The\nTcl script at ./mkopcodeh.tcl does this scan and generates opcodes.h.\nA second Tcl script, ./mkopcodec.tcl, then scans opcodes.h to generate\nthe **opcodes.c** source file, which contains a reverse mapping from\nopcode-number to opcode-name that is used for EXPLAIN output.\n\nThe **keywordhash.h** header file contains the definition of a hash table\nthat maps SQL language keywords (ex: \"CREATE\", \"SELECT\", \"INDEX\", etc.) into\nthe numeric codes used by the parse.c parser.  The keywordhash.h file is\ngenerated by a C-language program at tool mkkeywordhash.c.\n\nThe **pragma.h** header file contains various definitions used to parse\nand implement the PRAGMA statements.  The header is generated by a\nscript **tool/mkpragmatab.tcl**. If you want to add a new PRAGMA, edit\nthe **tool/mkpragmatab.tcl** file to insert the information needed by the\nparser for your new PRAGMA, then run the script to regenerate the\n**pragma.h** header file.\n\n### The Amalgamation\n\nAll of the individual C source code and header files (both manually-edited\nand automatically-generated) can be combined into a single big source file\n**sqlite3.c** called \"the amalgamation\".  The amalgamation is the recommended\nway of using SQLite in a larger application.  Combining all individual\nsource code files into a single big source code file allows the C compiler\nto perform more cross-procedure analysis and generate better code.  SQLite\nruns about 5% faster when compiled from the amalgamation versus when compiled\nfrom individual source files.\n\nThe amalgamation is generated from the tool/mksqlite3c.tcl Tcl script.\nFirst, all of the individual source files must be gathered into the tsrc/\nsubdirectory (using the equivalent of \"make target_source\") then the\ntool/mksqlite3c.tcl script is run to copy them all together in just the\nright order while resolving internal \"#include\" references.\n\nThe amalgamation source file is more than 200K lines long.  Some symbolic\ndebuggers (most notably MSVC) are unable to deal with files longer than 64K\nlines.  To work around this, a separate Tcl script, tool/split-sqlite3c.tcl,\ncan be run on the amalgamation to break it up into a single small C file\ncalled **sqlite3-all.c** that does #include on about seven other files\nnamed **sqlite3-1.c**, **sqlite3-2.c**, ..., **sqlite3-7.c**.  In this way,\nall of the source code is contained within a single translation unit so\nthat the compiler can do extra cross-procedure optimization, but no\nindividual source file exceeds 32K lines in length.\n\n## How It All Fits Together\n\nSQLite is modular in design.\nSee the [architectural description](https://www.sqlite.org/arch.html)\nfor details. Other documents that are useful in\nhelping to understand how SQLite works include the\n[file format](https://www.sqlite.org/fileformat2.html) description,\nthe [virtual machine](https://www.sqlite.org/opcode.html) that runs\nprepared statements, the description of\n[how transactions work](https://www.sqlite.org/atomiccommit.html), and\nthe [overview of the query planner](https://www.sqlite.org/optoverview.html).\n\nDecades of effort have gone into optimizing SQLite, both\nfor small size and high performance.  And optimizations tend to result in\ncomplex code.  So there is a lot of complexity in the current SQLite\nimplementation.  It will not be the easiest library in the world to hack.\n\n### Key source code files\n\n  *  **sqlite.h.in** - This file defines the public interface to the SQLite\n     library.  Readers will need to be familiar with this interface before\n     trying to understand how the library works internally.  This file is\n     really a template that is transformed into the \"sqlite3.h\" deliverable\n     using a script invoked by the makefile.\n\n  *  **sqliteInt.h** - this header file defines many of the data objects\n     used internally by SQLite.  In addition to \"sqliteInt.h\", some\n     subsystems inside of sQLite have their own header files.  These internal\n     interfaces are not for use by applications.  They can and do change\n     from one release of SQLite to the next.\n\n  *  **parse.y** - This file describes the LALR(1) grammar that SQLite uses\n     to parse SQL statements, and the actions that are taken at each step\n     in the parsing process.  The file is processed by the\n     [Lemon Parser Generator](./doc/lemon.html) to produce the actual C code\n     used for parsing.\n\n  *  **vdbe.c** - This file implements the virtual machine that runs\n     prepared statements.  There are various helper files whose names\n     begin with \"vdbe\".  The VDBE has access to the vdbeInt.h header file\n     which defines internal data objects.  The rest of SQLite interacts\n     with the VDBE through an interface defined by vdbe.h.\n\n  *  **where.c** - This file (together with its helper files named\n     by \"where*.c\") analyzes the WHERE clause and generates\n     virtual machine code to run queries efficiently.  This file is\n     sometimes called the \"query optimizer\".  It has its own private\n     header file, whereInt.h, that defines data objects used internally.\n\n  *  **btree.c** - This file contains the implementation of the B-Tree\n     storage engine used by SQLite.  The interface to the rest of the system\n     is defined by \"btree.h\".  The \"btreeInt.h\" header defines objects\n     used internally by btree.c and not published to the rest of the system.\n\n  *  **pager.c** - This file contains the \"pager\" implementation, the\n     module that implements transactions.  The \"pager.h\" header file\n     defines the interface between pager.c and the rest of the system.\n\n  *  **os_unix.c** and **os_win.c** - These two files implement the interface\n     between SQLite and the underlying operating system using the run-time\n     pluggable VFS interface.\n\n  *  **shell.c.in** - This file is not part of the core SQLite library.  This\n     is the file that, when linked against sqlite3.a, generates the\n     \"sqlite3.exe\" command-line shell.  The \"shell.c.in\" file is transformed\n     into \"shell.c\" as part of the build process.\n\n  *  **tclsqlite.c** - This file implements the Tcl bindings for SQLite.  It\n     is not part of the core SQLite library.  But as most of the tests in this\n     repository are written in Tcl, the Tcl language bindings are important.\n\n  *  **test\\*.c** - Files in the src/ folder that begin with \"test\" go into\n     building the \"testfixture.exe\" program.  The testfixture.exe program is\n     an enhanced Tcl shell.  The testfixture.exe program runs scripts in the\n     test/ folder to validate the core SQLite code.  The testfixture program\n     (and some other test programs too) is built and run when you type\n     \"make test\".\n\n  *  **VERSION**, **manifest**, and **manifest.uuid** - These files define\n     the current SQLite version number.  The \"VERSION\" file is human generated,\n     but the \"manifest\" and \"manifest.uuid\" files are automatically generated\n     by the [Fossil version control system](https://fossil-scm.org/).\n\nThere are many other source files.  Each has a succinct header comment that\ndescribes its purpose and role within the larger system.\n\n<a name=\"vauth\"></a>\n## Verifying Code Authenticity\n\nThe `manifest` file at the root directory of the source tree\ncontains either a SHA3-256 hash or a SHA1 hash\nfor every source file in the repository.\nThe name of the version of the entire source tree is just the\nSHA3-256 hash of the `manifest` file itself, possibly with the\nlast line of that file omitted if the last line begins with\n\"`# Remove this line`\".\nThe `manifest.uuid` file should contain the SHA3-256 hash of the\n`manifest` file. If all of the above hash comparisons are correct, then\nyou can be confident that your source tree is authentic and unadulterated.\nDetails on the format for the `manifest` files are available\n[on the Fossil website](https://fossil-scm.org/home/doc/trunk/www/fileformat.wiki#manifest).\n\nThe process of checking source code authenticity is automated by the \nmakefile:\n\n>   make verify-source\n\nOr on windows:\n\n>   nmake /f Makefile.msc verify-source\n\nUsing the makefile to verify source integrity is good for detecting\naccidental changes to the source tree, but malicious changes could be\nhidden by also modifying the makefiles.\n\n## Contacts\n\nThe main SQLite website is [https://sqlite.org/](https://sqlite.org/)\nwith geographically distributed backups at\n[https://www2.sqlite.org/](https://www2.sqlite.org) and\n[https://www3.sqlite.org/](https://www3.sqlite.org).\n\nContact the SQLite developers through the\n[SQLite Forum](https://sqlite.org/forum/).  In an emergency, you\ncan send private email to the lead developer at drh at sqlite dot org.\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0068359375,
          "content": "3.48.0\n"
        },
        {
          "name": "art",
          "type": "tree",
          "content": null
        },
        {
          "name": "auto.def",
          "type": "blob",
          "size": 53.4091796875,
          "content": "#/do/not/tclsh\n# ^^^ help out editors which guess this file's content type.\n#\n# This is the main autosetup-compatible configure script for the\n# SQLite project.\n#\n# This script should be kept compatible with JimTCL, a copy of which\n# is included in this source tree as ./autosetup/jimsh0.c. The number\n# of incompatibilities between canonical TCL and JimTCL is very low\n# and alternative formulations of incompatible constructs have, so\n# far, been easy to find.\n#\n# JimTCL: https://jim.tcl.tk\n#\nuse cc cc-db cc-shared cc-lib proj pkg-config\n\n# $DUMP_DEFINES_TXT is the file emitted by --dump-defines, intended\n# only for build debugging and not part of the public build interface.\nset DUMP_DEFINES_TXT ./config.defines.txt\n# $DUMP_DEFINES_JSON is the autosetup counterpart of the historical\n# \"DEFS\" var which was generated by the autotools in the pre-processed\n# autotools builds (but not in the canonical tree). Generation of this\n# file is disabled (via an empty file name) until/unless someone\n# voices a specific interest in it. The original motivating use case\n# is handled fine by sqlite_cfg.h.\nset DUMP_DEFINES_JSON \"\"; #./config.defines.json\n\n########################################################################\n# Regarding flag compatibility with the historical autotool configure\n# script:\n#\n# A very long story made short, autosetup's --flag handling has\n# some behaviors which make it impossible to implement 100% identical\n# flags compared to the historical autotools build. The differences\n# are documented here:\n#\n# 1) --debug is used by autosetup itself, so we have to rename it to\n# --with-debug. We cannot use --enable-debug because that is, for\n# autosetup, an alias for --debug=1. Alternately, we can patch\n# autosetup to use --autosetup-debug for its own purposes instead.\n#\n# 2) In autosetup, all flags starting with (--enable, --disable) are\n# forced to be booleans and receive special handling in how they're\n# resolved. Because of that we have to rename:\n#\n#   2.1) --enable-tempstore[=no] to --with-tempstore[=no], noting that\n#        it has four legal values, not two.\n#\n########################################################################\n# A gentle introduction to flags handling in autosetup\n#\n# Reference: https://msteveb.github.io/autosetup/developer/\n#\n# All configure flags must be described in an 'options' call, which\n# must appear very early on in this script. The general syntax is:\n#\n#  FLAG => {Help text}\n#\n# Where FLAG can have any of the following formats:\n#\n#   boolopt            => \"a boolean option which defaults to disabled\"\n#   boolopt2=1         => \"a boolean option which defaults to enabled\"\n#   stringopt:         => \"an option which takes an argument, e.g. --stringopt=value\"\n#   stringopt2:=value  => \"an option where the argument is optional and defaults to 'value'\"\n#   optalias booltopt3 => \"a boolean with a hidden alias. --optalias is not shown in --help\"\n#\n# Autosetup does no small amount of specialized handling for flags,\n# especially booleans. Each bool-type --FLAG implicitly gets\n# --enable-FLAG and --disable-FLAG forms. e.g. we define a flag\n# \"readline\", which will be interpreted in one of two ways, depending\n# on how it's invoked and how its default is defined:\n#\n#   --enable-readline ==> boolean true\n#   --disable-readline ==> boolean false\n#\n# Passing --readline or --readline=1 is equivalent to passing\n# --enable-readline, and --readline=0 is equivalent to\n# --disable-readline.\n#\n# The behavior described above can lead lead to some confusion when\n# writing help text. For example:\n#\n#   options { json=1 {Disable JSON functions} }\n#\n# The reason the help text says \"disable\" is because a boolean option\n# which defaults to true is, in the --help text, rendered as:\n#\n#   --disable-json          Disable JSON functions\n#\n# Whereas a bool flag which defaults to false will instead render as:\n#\n#   --enable-FLAG\n#\n# Non-boolean flags, in contrast, use the names specifically given to\n# them in the [options] invocation. e.g. \"with-tcl\" is the --with-tcl\n# flag.\n#\n# Fetching values for flags:\n#\n#   booleans: use one of:\n#     - [opt-bool FLAG] is autosetup's built-in command for this, but we\n#       have some convenience variants:\n#     - [proj-opt-truthy FLAG]\n#     - [proj-opt-if-truthy FLAG {THEN} {ELSE}]\n#\n#   Non-boolean (i.e. string) flags:\n#     - [opt-val FLAG ?default?]\n#     - [opt-str ...] - see the docs in ./autosetup/autosetup\n#\n########################################################################\nset flags {\n  # When writing {help text blocks}, be aware that autosetup formats\n  # them differently (left-aligned, directly under the --flag) if the\n  # block starts with a newline. It does NOT expand vars and commands,\n  # but we use a [subst] call below which will replace (only) var\n  # refs.\n\n  # <build-modes>\n  shared=1             => {Disable build of shared libary}\n  static=1             => {Disable build of static library (mostly)}\n  amalgamation=1       => {Disable the amalgamation and instead build all files separately.}\n  # </build-modes>\n  # <lib-feature>\n  threadsafe=1         => {Disable mutexing}\n  with-tempstore:=no   => {Use an in-RAM database for temporary tables: never,no,yes,always}\n  largefile=1          => {Disable large file support}\n  load-extension=1     => {Disable loading of external extensions}\n  math=1               => {Disable math functions}\n  json=1               => {Disable JSON functions}\n  memsys5              => {Enable MEMSYS5}\n  memsys3              => {Enable MEMSYS3}\n  fts3                 => {Enable the FTS3 extension}\n  fts4                 => {Enable the FTS4 extension}\n  fts5                 => {Enable the FTS5 extension}\n  update-limit         => {Enable the UPDATE/DELETE LIMIT clause}\n  geopoly              => {Enable the GEOPOLY extension}\n  rtree                => {Enable the RTREE extension}\n  session              => {Enable the SESSION extension}\n  all                  => {Enable FTS4, FTS5, Geopoly, RTree, Sessions}\n  # </lib-feature>\n  # <tcl>\n  with-tcl:DIR         =>\n    {Directory containing tclConfig.sh or a directory one level up from\n     that, from which we can derive a directory containing tclConfig.sh.\n     A dir name of \"prefix\" is equivalent to the directory specified by\n     the --prefix flag.}\n  with-tclsh:PATH      =>\n    {Full pathname of tclsh to use.  It is used for (A) trying to find\n     tclConfig.sh and (B) all TCL-based code generation.  Warning: if\n     its containing dir has multiple tclsh versions, it may select the\n     wrong tclConfig.sh!}\n  tcl=1                =>\n    {Disable components which require TCL, including all tests.\n     This tree requires TCL for code generation but can use the in-tree\n     copy of autosetup/jimsh0.c for that. The SQLite TCL extension and the\n     test code require a canonical tclsh.}\n  # <tcl>\n  # <line-editing>\n  readline=1           => {Disable readline support}\n  # --with-readline-lib is a backwards-compatible alias for\n  # --with-readline-ldflags\n  with-readline-lib:\n  with-readline-ldflags:=auto\n                       => {Readline LDFLAGS, e.g. -lreadline -lncurses}\n  # --with-readline-inc is a backwards-compatible alias for\n  # --with-readline-cflags.\n  with-readline-inc:\n  with-readline-cflags:=auto\n                       => {Readline CFLAGS, e.g. -I/path/to/includes}\n  with-readline-header:PATH\n                       => {Full path to readline.h, from which --with-readline-cflags will be derived}\n  with-linenoise:DIR   => {Source directory for linenoise.c and linenoise.h}\n  editline=0           => {Enable BSD editline support}\n  # </line-editing>\n  # <icu>\n  with-icu-ldflags:LDFLAGS\n                        => {Enable SQLITE_ENABLE_ICU and add the given linker flags for the ICU libraries}\n  with-icu-cflags:CFLAGS\n                        => {Apply extra CFLAGS/CPPFLAGS necessary for building with ICU. e.g. -I/usr/local/include}\n  with-icu-config:=auto => {Enable SQLITE_ENABLE_ICU. Value must be one of: auto, pkg-config, /path/to/icu-config}\n  icu-collations=0      => {Enable SQLITE_ENABLE_ICU_COLLATIONS. Requires --with-icu-ldflags=... or --with-icu-config}\n  # </icu>\n  # <alternative-builds>\n  with-wasi-sdk:=/opt/wasi-sdk\n                       => {Top-most dir of the wasi-sdk for a WASI build}\n  with-emsdk:=auto     => {Top-most dir of the Emscripten SDK installation. Default = EMSDK env var.}\n  # </alternative-builds>\n  # <developer>\n  # Note that using the --debug/--enable-debug flag here requires patching\n  # autosetup/autosetup to rename the --debug to --autosetup-debug.\n  with-debug=0\n  debug=0              =>\n    {Enable debug build flags. This option will impact performance by\n     as much as 4x, as it includes large numbers of assert()s in\n     performance-critical loops.  Never use --debug for production\n     builds.}\n  scanstatus           => {Enable the SQLITE_ENABLE_STMT_SCANSTATUS feature flag}\n  dev                  => {Enable dev-mode build: automatically enables certain other flags}\n  test-status          => {Enable status of tests}\n  gcov=0               => {Enable coverage testing using gcov}\n  linemacros           => {Enable #line macros in the amalgamation}\n  dump-defines=0       => {Dump autosetup defines to $DUMP_DEFINES_TXT (for build debugging)}\n  dynlink-tools        => {Dynamically link libsqlite3 to certain tools which normally statically embed it.}\n  soname:=legacy       =>\n    {SONAME for libsqlite3.so. \"none\", or not using this flag, sets no\n     soname. \"legacy\" sets it to its historical value of\n     libsqlite3.so.0.  A value matching the glob \"libsqlite3.*\" sets\n     it to that literal value. Any other value is assumed to be a\n     suffix which gets applied to \"libsqlite3.so.\",\n     e.g. --soname=9.10 equates to \"libsqlite3.so.9.10\".\n    }\n  # --soname has a long story behind it: https://sqlite.org/src/forumpost/5a3b44f510df8ded\n  # </developer>\n}\nif {\"\" ne $DUMP_DEFINES_JSON} {\n  lappend flags \\\n    defines-json-include-lowercase=0 \\\n    => {Include lower-case defines (primarily system paths) in $DUMP_DEFINES_JSON}\n}\n\noptions [subst -nobackslashes -nocommands $flags]\nunset flags\n\n#\n# Carry values from hidden --flag aliases over to their canonical flag\n# forms.\n#\nproj-xfer-options-aliases {\n  with-readline-inc => with-readline-cflags\n  with-readline-lib => with-readline-ldflags\n  with-debug => debug\n}\n\nset srcdir $::autosetup(srcdir)\nset PACKAGE_VERSION [proj-file-content -trim $srcdir/VERSION]\ndefine PACKAGE_NAME \"sqlite\"\ndefine PACKAGE_URL {https://sqlite.org}\ndefine PACKAGE_VERSION $PACKAGE_VERSION\ndefine PACKAGE_STRING \"[get-define PACKAGE_NAME] $PACKAGE_VERSION\"\ndefine PACKAGE_BUGREPORT [get-define PACKAGE_URL]/forum\nmsg-result \"Source dir = $srcdir\"\nmsg-result \"Build dir  = $::autosetup(builddir)\"\nmsg-result \"Configuring SQLite version $PACKAGE_VERSION\"\n\napply {{} {\n  #\n  # SQLITE_AUTORECONFIG contains make target rules for re-running the\n  # configure script with the same arguments it was initially invoked\n  # with. This can be used to automatically reconfigure\n  #\n  proc squote {arg} {\n    # Wrap $arg in single-quotes if it looks like it might need that\n    # to avoid mis-handling as a shell argument. We assume that $arg\n    # will never contain any single-quote characters.\n    if {[string match {*[ &;$*\"]*} $arg]} { return '$arg' }\n    return $arg\n  }\n  define-append SQLITE_AUTORECONFIG cd [squote $::autosetup(builddir)] && [squote $::srcdir/configure]\n  #{*}$::autosetup(argv) breaks with --flag='val with spaces', so...\n  foreach arg $::autosetup(argv) {\n    define-append SQLITE_AUTORECONFIG [squote $arg]\n  }\n  rename squote \"\"\n}}\n\n# Are we cross-compiling?\nset isCrossCompiling [proj-is-cross-compiling]\n\ndefine OPT_FEATURE_FLAGS {} ; # -DSQLITE_OMIT/ENABLE flags.\ndefine OPT_SHELL {}         ; # Feature-related CFLAGS for the sqlite3 CLI app\n########################################################################\n# Adds $args, if not empty, to OPT_FEATURE_FLAGS.  If the first arg is\n# -shell then it strips that arg and passes the remaining args the\n# sqlite-add-shell-opt in addition to adding them to\n# OPT_FEATURE_FLAGS.\nproc sqlite-add-feature-flag {args} {\n  set shell \"\"\n  if {\"-shell\" eq [lindex $args 0]} {\n    set args [lassign $args shell]\n  }\n  if {\"\" ne $args} {\n    if {\"\" ne $shell} {\n      sqlite-add-shell-opt {*}$args\n    }\n    define-append OPT_FEATURE_FLAGS {*}$args\n  }\n}\n# Appends $args, if not empty, to OPT_SHELL.\nproc sqlite-add-shell-opt {args} {\n  if {\"\" ne $args} {\n    define-append OPT_SHELL {*}$args\n  }\n}\n\n# Pass msg-debug=1 to configure to enable obnoxiously loud output from\n# msg-debug.\nset msgDebugEnabled [proj-val-truthy [get-env msg-debug 0]]\nproc msg-debug {msg} {\n  if {$::msgDebugEnabled} {\n    puts stderr [proj-bold \"** DEBUG: $msg\"]\n  }\n}\n\nproj-file-extensions\nif {\".exe\" eq [get-define TARGET_EXEEXT]} {\n  define SQLITE_OS_UNIX 0\n  define SQLITE_OS_WIN 1\n} else {\n  define SQLITE_OS_UNIX 1\n  define SQLITE_OS_WIN 0\n}\n\n#########\n# Programs needed\ncc-check-tools ld ar ; # must come before [sqlite-check-wasi-sdk]\nif {\"\" eq [proj-bin-define install]} {\n  proj-warn \"Cannot find install binary, so 'make install' will not work.\"\n  define BIN_INSTALL false\n}\n\n########################################################################\n# We differentiate between two C compilers: the one used for binaries\n# which are to run on the build system (in autosetup it's called\n# CC_FOR_BUILD and in Makefile.in it's $(B.cc)) and the one used for\n# compiling binaries for the target system (CC a.k.a. $(T.cc)).\n# Normally they're the same, but they will differ when\n# cross-compiling.\ndefine CFLAGS [proj-get-env CFLAGS {-g -O2}]\ndefine BUILD_CFLAGS [proj-get-env BUILD_CFLAGS {-g}]\n\nproj-if-opt-truthy dev {\n  # --enable-dev needs to come early so that the downstream tests\n  # which check for the following flags use their updated state.\n  proj-opt-set all 1\n  proj-opt-set debug 1\n  proj-opt-set amalgamation 0\n  define CFLAGS [get-env CFLAGS {-O0 -g}]\n}\n\n########################################################################\n# Handle --with-wasi-sdk=DIR\n#\n# This must be run relatively early on because it may change the\n# toolchain and disable a number of config options.\nproc sqlite-check-wasi-sdk {} {\n  set wasiSdkDir [opt-val with-wasi-sdk] ; # ??? [lindex [opt-val with-wasi-sdk] end]\n  define HAVE_WASI_SDK 0\n  if {$wasiSdkDir eq \"\"} {\n    return 0\n  } elseif {$::isCrossCompiling} {\n    proj-fatal \"Cannot combine --with-wasi-sdk with cross-compilation\"\n  }\n  msg-result \"Checking WASI SDK directory \\[$wasiSdkDir]... \"\n  #puts \"prefix = [prefix $wasiSdkDir/bin {clang ld}]\"\n  proj-affirm-files-exist -v {*}[prefix \"$wasiSdkDir/bin/\" {clang wasm-ld ar}]\n  define HAVE_WASI_SDK 1\n  define WASI_SDK_DIR $wasiSdkDir\n  # Disable numerous options which we know either can't work or are\n  # not useful in this build...\n  msg-result \"Using wasi-sdk clang. Disabling CLI shell modifying config flags:\"\n  # Boolean (--enable-/--disable-) flags which must be switched off:\n  foreach opt {\n    dynlink-tools\n    editline\n    gcov\n    icu-collations\n    load-extension\n    readline\n    shared\n    tcl\n    threadsafe\n  } {\n    if {[opt-bool $opt]} {\n      msg-result \"  --disable-$opt\"\n      proj-opt-set $opt 0\n    }\n  }\n  # Non-boolean flags which need to be cleared:\n  foreach opt {\n    with-emsdk\n    with-icu-config\n    with-icu-ldflags\n    with-icu-cflags\n    with-linenoise\n    with-tcl\n  } {\n    if {[proj-opt-was-provided $opt]} {\n      msg-result \"  removing --$opt\"\n      proj-opt-set $opt \"\"\n    }\n  }\n  # Remember that we now have a discrepancy beteween\n  # $::isCrossCompiling and [proj-is-cross-compiling].\n  set ::isCrossCompiling 1\n\n  #\n  # Changing --host and --target have no effect here except to\n  # possibly cause confusion. Autosetup has finished processing them\n  # by this point.\n  #\n  #  host_alias=wasm32-wasi\n  #  target=wasm32-wasi\n  #\n  # Merely changing CC, LD, and AR to the wasi-sdk's is enough to get\n  # sqlite3.o building in WASM format.\n  #\n  define CC \"${wasiSdkDir}/bin/clang\"\n  define LD \"${wasiSdkDir}/bin/wasm-ld\"\n  define AR \"${wasiSdkDir}/bin/ar\"\n  #define STRIP \"${wasiSdkDir}/bin/strip\"\n  return 1\n}; # sqlite-check-wasi-sdk\nsqlite-check-wasi-sdk\n\n########################################################################\n# --dynlink-tools tells the build to dynamically link certain binaries\n# to libsqlite3.so instead of embedding a copy of the amalgamation.\ndefine LINK_TOOLS_DYNAMICALLY [proj-opt-was-provided dynlink-tools]\n\n#\n# Enable large file support (if special flags are necessary)\ndefine HAVE_LFS 0\nif {[opt-bool largefile]} {\n  cc-check-lfs\n}\n\n#\n# Check for needed/wanted data types\ncc-with {-includes stdint.h} \\\n  {cc-check-types int8_t int16_t int32_t int64_t intptr_t \\\n     uint8_t uint16_t uint32_t uint64_t uintptr_t}\n\n#\n# Check for needed/wanted functions\ncc-check-functions gmtime_r isnan localtime_r localtime_s \\\n  malloc_usable_size strchrnul usleep utime pread pread64 pwrite pwrite64\n\nproj-check-function-in-lib fdatasync rt\ndefine LDFLAGS_FDATASYNC [get-define lib_fdatasync]\nundefine lib_fdatasync\n\n#\n# Check for needed/wanted headers\ncc-check-includes \\\n  sys/types.h sys/stat.h dlfcn.h unistd.h \\\n  stdlib.h malloc.h memory.h \\\n  string.h strings.h \\\n  inttypes.h\n\nif {[cc-check-includes zlib.h] && [proj-check-function-in-lib deflate z]} {\n  # TODO? port over the more sophisticated zlib search from the fossil auto.def\n  define HAVE_ZLIB 1\n  define LDFLAGS_ZLIB -lz\n  sqlite-add-shell-opt -DSQLITE_HAVE_ZLIB=1\n} else {\n  define HAVE_ZLIB 0\n  define LDFLAGS_ZLIB \"\"\n}\n\nproj-check-rpath  ; # Determine proper rpath-handling flag\n\n########################################################################\n# \"soname\" for libsqlite3.so. See discussion at:\n# https://sqlite.org/src/forumpost/5a3b44f510df8ded\napply {{} {\n  define LDFLAGS_LIBSQLITE3_SONAME \"\"\n  if {[proj-opt-was-provided soname]} {\n    set soname [join [opt-val soname] \"\"]\n  } else {\n    # Enabling soname breaks linking for the --dynlink-tools feature,\n    # and this project has no direct use for soname, so default to\n    # none. Package maintainers, on the other hand, like to have an\n    # soname.\n    set soname none\n  }\n  switch -exact -- $soname {\n    none - \"\" { return 0 }\n    auto      { set soname libsqlite3.so.3 }\n    legacy    { set soname libsqlite3.so.0 }\n    default {\n      if {[string match libsqlite3.* $soname]} {\n        # use it as-is\n      } else {\n        # Assume it's a suffix\n        set soname \"libsqlite3.so.${soname}\"\n      }\n    }\n  }\n  msg-debug \"soname=$soname\"\n  if {[proj-check-soname $soname]} {\n    define LDFLAGS_LIBSQLITE3_SONAME [get-define LDFLAGS_SONAME_PREFIX]$soname\n    msg-result \"Setting SONAME using: [get-define LDFLAGS_LIBSQLITE3_SONAME]\"\n  } elseif {[proj-opt-was-provided soname]} {\n    # --soname was explicitly requested but not available, so fail fatally\n    proj-fatal \"This environment does not support SONAME.\"\n  } else {\n    # --soname was not explicitly requested but not available, so just warn\n    msg-result \"This environment does not support SONAME.\"\n  }\n}}\n\nproj-define-for-opt shared ENABLE_SHARED \"Build shared library?\"\n\nif {![proj-define-for-opt static ENABLE_STATIC \\\n        \"Build static library?\"]} {\n  proj-warn \"Static lib build may be implicitly re-activated by other components, e.g. some test apps.\"\n}\n\nproj-define-for-opt amalgamation USE_AMALGAMATION \"Use amalgamation for builds?\"\n\nproj-define-for-opt gcov USE_GCOV \"Use gcov?\"\n\nproj-define-for-opt test-status TSTRNNR_OPTS \\\n  \"test-runner flags:\" {--status} {}\n\nproj-define-for-opt linemacros AMALGAMATION_LINE_MACROS \\\n  \"Use #line macros in the amalgamation:\"\n\nmsg-checking \"SQLITE_DEBUG build? \"\nproj-if-opt-truthy debug {\n  define SQLITE_DEBUG 1\n  define TARGET_DEBUG {-g -DSQLITE_DEBUG=1 -DSQLITE_ENABLE_SELECTTRACE -DSQLITE_ENABLE_WHERETRACE -O0 -Wall}\n  proj-opt-set memsys5\n  msg-result yes\n} {\n  define TARGET_DEBUG {-DNDEBUG}\n  msg-result no\n}\n\n########################################################################\n# TCL...\n#\n# sqlite-check-tcl performs most of the --with-tcl and --with-tclsh\n# handling. Some related bits and pieces are performed before and\n# after that function is called.\n#\n# Important [define]'d vars:\n#\n#  - HAVE_TCL indicates whether we have a tclsh suitable for building\n#    the TCL SQLite extension and, by extension, the testing\n#    infrastructure. This must only be 1 for environments where\n#    tclConfig.sh can be found.\n#\n#  - TCLSH_CMD is the path to the canonical tclsh or \"\". It never\n#    refers to jimtcl.\n#\n#  - TCL_CONFIG_SH is the path to tclConfig.sh or \"\".\n#\n#  - TCLLIBDIR is the dir to which libtclsqlite3 gets installed.\n#\n#  - BTCLSH = the path to the tcl interpreter used for in-tree code\n#    generation.  It may be jimtcl or the canonical tclsh but may not\n#    be empty - this tree requires TCL to generated numerous\n#    components.\n#\n# If --tcl or --with-tcl are provided but no TCL is found, this\n# function fails fatally. If they are not explicitly provided then\n# failure to find TCL is not fatal but a loud warning will be emitted.\n#\nproc sqlite-check-tcl {} {\n  rename sqlite-check-tcl \"\"\n  define TCLSH_CMD false ; # Significant is that it exits with non-0\n  define HAVE_TCL 0      ; # Will be enabled via --tcl or a successful search\n  define TCLLIBDIR \"\"    ; # Installation dir for TCL extension lib\n  define TCL_CONFIG_SH \"\"; # full path to tclConfig.sh\n\n  # Clear out all vars which would be set by tclConfigToAutoDef.sh, so\n  # that the late-config validation of @VARS@ works even if\n  # --disable-tcl is used.\n  foreach k {TCL_INCLUDE_SPEC TCL_LIB_SPEC TCL_STUB_LIB_SPEC TCL_EXEC_PREFIX TCL_VERSION} {\n    define $k \"\"\n  }\n\n  file delete -force \".tclenv.sh\"; # ensure no stale state from previous configures.\n  if {![opt-bool tcl]} {\n    proj-indented-notice {\n      NOTE: TCL is disabled via --disable-tcl. This means that none\n      of the TCL-based components will be built, including tests\n      and sqlite3_analyzer.\n    }\n    return\n  }\n  # TODO: document the steps this is taking.\n  global srcdir\n  msg-result \"Checking for a suitable tcl... \"\n  proj-assert [proj-opt-truthy tcl]\n  set use_tcl 1\n  set with_tclsh [opt-val with-tclsh]\n  set with_tcl [opt-val with-tcl]\n  if {\"prefix\" eq $with_tcl} {\n    set with_tcl [get-define prefix]\n  }\n  msg-debug \"sqlite-check-tcl: use_tcl ${use_tcl}\"\n  msg-debug \"sqlite-check-tcl: with_tclsh=${with_tclsh}\"\n  msg-debug \"sqlite-check-tcl: with_tcl=$with_tcl\"\n  if {\"\" eq $with_tclsh && \"\" eq $with_tcl} {\n    # If neither --with-tclsh nor --with-tcl are provided, try to find\n    # a workable tclsh.\n    set with_tclsh [proj-first-bin-of tclsh9.0 tclsh8.6 tclsh]\n    msg-debug \"sqlite-check-tcl: with_tclsh=${with_tclsh}\"\n  }\n\n  set doConfigLookup 1 ; # set to 0 to test the tclConfig.sh-not-found cases\n  if {\"\" ne $with_tclsh} {\n    # --with-tclsh was provided or found above. Validate it and use it\n    # to trump any value passed via --with-tcl=DIR.\n    if {![file isfile $with_tclsh]} {\n      proj-fatal \"TCL shell $with_tclsh is not a file\"\n    } elseif {![file-isexec $with_tclsh]} {\n      proj-fatal \"TCL shell $with_tclsh is not executable\"\n    } else {\n      define TCLSH_CMD $with_tclsh\n      #msg-result \"Using tclsh: $with_tclsh\"\n    }\n    if {$doConfigLookup &&\n        [catch {exec $with_tclsh $srcdir/tool/find_tclconfig.tcl} result] == 0} {\n      set with_tcl $result\n    }\n    if {\"\" ne $with_tcl && [file isdir $with_tcl]} {\n      msg-result \"$with_tclsh recommends the tclConfig.sh from $with_tcl\"\n    } else {\n      proj-warn \"$with_tclsh is unable to recommend a tclConfig.sh\"\n      set use_tcl 0\n    }\n  }\n  set cfg \"\"\n  set tclSubdirs {tcl9.0 tcl8.6 lib}\n  while {$use_tcl} {\n    if {\"\" ne $with_tcl} {\n      # Ensure that we can find tclConfig.sh under ${with_tcl}/...\n      if {$doConfigLookup} {\n        if {[file readable \"${with_tcl}/tclConfig.sh\"]} {\n          set cfg \"${with_tcl}/tclConfig.sh\"\n        } else {\n          foreach i $tclSubdirs {\n            if {[file readable \"${with_tcl}/$i/tclConfig.sh\"]} {\n              set cfg \"${with_tcl}/$i/tclConfig.sh\"\n              break\n            }\n          }\n        }\n      }\n      if {\"\" eq $cfg} {\n        proj-fatal \"No tclConfig.sh found under ${with_tcl}\"\n      }\n    } else {\n      # If we have not yet found a tclConfig.sh file, look in\n      # $libdir which is set automatically by autosetup or by the\n      # --prefix command-line option.  See\n      # https://sqlite.org/forum/forumpost/e04e693439a22457\n      set libdir [get-define libdir]\n      if {[file readable \"${libdir}/tclConfig.sh\"]} {\n        set cfg \"${libdir}/tclConfig.sh\"\n      } else {\n        foreach i $tclSubdirs {\n          if {[file readable \"${libdir}/$i/tclConfig.sh\"]} {\n            set cfg \"${libdir}/$i/tclConfig.sh\"\n            break\n          }\n        }\n      }\n      if {![file readable $cfg]} {\n        break\n      }\n    }\n    msg-result \"Using tclConfig.sh: $cfg\"\n    break\n  }\n  define TCL_CONFIG_SH $cfg\n  # Export a subset of tclConfig.sh to the current TCL-space.  If $cfg\n  # is an empty string, this emits empty-string entries for the\n  # various options we're interested in.\n  eval [exec \"${srcdir}/tool/tclConfigShToAutoDef.sh\" \"$cfg\"]\n\n  if {\"\" eq $with_tclsh && $cfg ne \"\"} {\n    # We have tclConfig.sh but no tclsh. Attempt to locate a tclsh\n    # based on info from tclConfig.sh.\n    proj-assert {\"\" ne [get-define TCL_EXEC_PREFIX]}\n    set with_tclsh [get-define TCL_EXEC_PREFIX]/bin/tclsh[get-define TCL_VERSION]\n    if {![file-isexec $with_tclsh]} {\n      set with_tclsh2 [get-define TCL_EXEC_PREFIX]/bin/tclsh\n      if {![file-isexec $with_tclsh2]} {\n        proj-warn \"Cannot find a usable tclsh (tried: $with_tclsh $with_tclsh2)\"\n      } else {\n        set with_tclsh $with_tclsh2\n      }\n    }\n  }\n  define TCLSH_CMD $with_tclsh\n  if {$use_tcl} {\n    # Set up the TCLLIBDIR\n    #\n    # 2024-10-28: calculation of TCLLIBDIR is now done via the shell\n    # in main.mk (search it for T.tcl.env.sh) so that\n    # static/hand-written makefiles which import main.mk do not have\n    # to define that before importing main.mk. Even so, we export\n    # TCLLIBDIR from here, which will cause the canonical makefile to\n    # use this one rather than to re-calculate it at make-time.\n    set tcllibdir [get-env TCLLIBDIR \"\"]\n    if {\"\" eq $tcllibdir} {\n      # Attempt to extract TCLLIBDIR from TCL's $auto_path\n      if {\"\" ne $with_tclsh &&\n          [catch {exec echo \"puts stdout \\$auto_path\" | \"$with_tclsh\"} result] == 0} {\n        foreach i $result {\n          if {[file isdir $i]} {\n            set tcllibdir $i/sqlite3\n            break\n          }\n        }\n      } else {\n        proj-warn \"Cannot determine TCLLIBDIR.\"\n        # The makefile will fail fatally in this case if a target is\n        # invoked which requires TCLLIBDIR.\n      }\n    }\n    #if {\"\" ne $tcllibdir} { msg-result \"TCLLIBDIR = ${tcllibdir}\"; }\n    define TCLLIBDIR $tcllibdir\n  }; # find TCLLIBDIR\n\n  if {[file-isexec $with_tclsh]} {\n    msg-result \"Using tclsh: $with_tclsh\"\n    if {$cfg ne \"\"} {\n      define HAVE_TCL 1\n    } else {\n      proj-warn \"Found tclsh but no tclConfig.sh.\"\n    }\n  }\n  show-notices\n  # If TCL is not found: if it was explicitly requested then fail\n  # fatally, else just emit a warning. If we can find the APIs needed\n  # to generate a working JimTCL then that will suffice for build-time\n  # TCL purposes (see: proc sqlite-determine-codegen-tcl).\n  if {![get-define HAVE_TCL] &&\n      ([proj-opt-was-provided tcl] || [proj-opt-was-provided with-tcl])} {\n    proj-fatal \"TCL support was requested but no tclConfig.sh could be found.\"\n  }\n  if {\"\" eq $cfg} {\n    proj-assert {0 == [get-define HAVE_TCL]}\n    proj-indented-notice {\n      WARNING: Cannot find a usable tclConfig.sh file.  Use\n      --with-tcl=DIR to specify a directory where tclConfig.sh can be\n      found.  SQLite does not use TCL internally, but some optional\n      components require TCL, including tests and sqlite3_analyzer.\n    }\n  }\n}; # sqlite-check-tcl\nsqlite-check-tcl\n\n########################################################################\n# sqlite-determine-codegen-tcl checks which TCL to use as a code\n# generator.  By default, prefer jimsh simply because we have it\n# in-tree (it's part of autosetup) unless --with-tclsh=X is used, in\n# which case prefer X.\n#\n# Returns the human-readable name of the TCL it selects. Fails fatally\n# if it cannot detect a TCL appropriate for code generation.\n#\n# Defines:\n#\n#   - BTCLSH = the TCL shell used for code generation. It may set this\n#     to an unexpanded makefile var name.\n#\n#   - CFLAGS_JIMSH = any flags needed for buildng a BTCLSH-compatible\n#     jimsh. The defaults may be passed on to configure as\n#     CFLAGS_JIMSH=...\nset useJimForCodeGen 0 ; # Set to 1 when using jimsh for code generation.\n                         # May affect later decisions.\nproc sqlite-determine-codegen-tcl {} {\n  rename sqlite-determine-codegen-tcl \"\"\n  msg-result \"Checking for TCL to use for code generation... \"\n  define CFLAGS_JIMSH [proj-get-env CFLAGS_JIMSH {-O1}]\n  set cgtcl [opt-val with-tclsh jimsh]\n  if {\"jimsh\" ne $cgtcl} {\n    # When --with-tclsh=X is used, use that for all TCL purposes,\n    # including in-tree code generation, per developer request.\n    define BTCLSH \"\\$(TCLSH_CMD)\"\n    return $cgtcl\n  }\n  set flagsToRestore {CC CFLAGS AS_CFLAGS CPPFLAGS AS_CPPFLAGS LDFLAGS LINKFLAGS LIBS CROSS}\n  define-push $flagsToRestore {\n    # We have to swap CC to CC_FOR_BUILD for purposes of the various\n    # [cc-...] tests below. Recall that --with-wasi-sdk may have\n    # swapped out CC with one which is not appropriate for this block.\n    # Per consulation with autosetup's creator, doing this properly\n    # requires us to [define-push] the whole $flagsToRestore list\n    # (plus a few others which are not relevant in this tree).\n    #\n    # These will get set to their previous values at the end of this\n    # block.\n    foreach flag $flagsToRestore {define $flag \"\"}\n    define CC [get-define CC_FOR_BUILD]\n    # These headers are technically optional for JimTCL but necessary if\n    # we want to use it for code generation:\n    set sysh [cc-check-includes dirent.h sys/time.h]\n    # jimsh0.c hard-codes #define's for HAVE_DIRENT_H and\n    # HAVE_SYS_TIME_H on the platforms it supports, so we do not\n    # need to add -D... flags for those. We check for them here only\n    # so that we can avoid the situation that we later, at\n    # make-time, try to compile jimsh but it then fails due to\n    # missing headers (i.e. fail earlier rather than later).\n    if {$sysh && [cc-check-functions realpath]} {\n      define-append CFLAGS_JIMSH -DHAVE_REALPATH\n      define BTCLSH \"\\$(JIMSH)\"\n      set ::useJimForCodeGen 1\n    } elseif {$sysh && [cc-check-functions _fullpath]} {\n      # _fullpath() is a Windows API. It's not entirely clear\n      # whether we need to add {-DHAVE_SYS_TIME_H -DHAVE_DIRENT_H}\n      # to CFLAGS_JIMSH in this case. On MinGW32 we definitely do\n      # not want to because it already hard-codes them. On _MSC_VER\n      # builds it does not.\n      define-append CFLAGS_JIMSH -DHAVE__FULLPATH\n      define BTCLSH \"\\$(JIMSH)\"\n      set ::useJimForCodeGen 1\n    } elseif {[file-isexec [get-define TCLSH_CMD]]} {\n      set cgtcl [get-define TCLSH_CMD]\n      define BTCLSH \"\\$(TCLSH_CMD)\"\n    } else {\n      # One last-ditch effort to find TCLSH_CMD: use info from\n      # tclConfig.sh to try to find a tclsh\n      if {\"\" eq [get-define TCLSH_CMD]} {\n        set tpre [get-define TCL_EXEC_PREFIX]\n        if {\"\" ne $tpre} {\n          set tv [get-define TCL_VERSION]\n          if {[file-isexec \"${tpre}/bin/tclsh${tv}\"]} {\n            define TCLSH_CMD \"${tpre}/bin/tclsh${tv}\"\n          } elseif {[file-isexec \"${tpre}/bin/tclsh\"]} {\n            define TCLSH_CMD \"${tpre}/bin/tclsh\"\n          }\n        }\n      }\n      set cgtcl [get-define TCLSH_CMD]\n      if {![file-isexec $cgtcl]} {\n        proj-fatal \"Cannot find a tclsh to use for code generation.\"\n      }\n      define BTCLSH \"\\$(TCLSH_CMD)\"\n    }\n  }; # CC swap-out\n  return $cgtcl\n}; # sqlite-determine-codegen-tcl\nmsg-result \"TCL for code generation: [sqlite-determine-codegen-tcl]\"\n# /TCL\n########################################################################\n\n########################################################################\n# Thread safety?\nmsg-checking \"Support threadsafe operation? \"\nproj-if-opt-truthy threadsafe {\n  msg-result yes\n  sqlite-add-feature-flag -DSQLITE_THREADSAFE=1\n  if {![proj-check-function-in-lib pthread_create pthread]\n      || ![proj-check-function-in-lib pthread_mutexattr_init pthread]} {\n    user-error \"Missing required pthread bits\"\n  }\n  define LDFLAGS_PTHREAD [get-define lib_pthread_create]\n  undefine lib_pthread_create\n  # Recall that LDFLAGS_PTHREAD might be empty even if pthreads if\n  # found because it's in -lc on some platforms.\n} {\n  msg-result no\n  sqlite-add-feature-flag -DSQLITE_THREADSAFE=0\n  define LDFLAGS_PTHREAD \"\"\n}\n\n########################################################################\n# Do we want temporary databases in memory?\n#\n# The test fixture likes to set SQLITE_TEMP_STORE on its own, so do\n# not set that feature flag unless it was explicitly provided to the\n# configure script.\nif {[proj-opt-was-provided with-tempstore]} {\n  apply {{} {\n    set ts [opt-val with-tempstore no]\n    set tsn 1\n    msg-checking \"Use an in-RAM database for temporary tables? \"\n    switch -exact -- $ts {\n      never  { set tsn 0 }\n      no     { set tsn 1 }\n      yes    { set tsn 2 }\n      always { set tsn 3 }\n      default {\n        user-error \"Invalid --with-tempstore value '$ts'. Use one of: never, no, yes, always\"\n      }\n    }\n    msg-result $ts\n    sqlite-add-feature-flag -DSQLITE_TEMP_STORE=$tsn\n  }}\n}\n\n########################################################################\n# sqlite-check-line-editing jumps through proverbial hoops to try to\n# find a working line-editing library, setting:\n#\n#   - HAVE_READLINE to 0 or 1\n#   - HAVE_LINENOISE to 0, 1, or 2\n#   - HAVE_EDITLINE to 0 or 1\n#\n# Only one of ^^^ those will be set to non-0.\n#\n#   - LDFLAGS_READLINE = linker flags or empty string\n#\n#   - CFLAGS_READLINE = compilation flags for clients or empty string.\n#\n# Note that LDFLAGS_READLINE and CFLAGS_READLINE may refer to\n# linenoise or editline, not necessarily libreadline.  In some cases\n# it will set HAVE_READLINE=1 when it's really using editline, for\n# reasons described in this function's comments.\n#\n# Returns a string describing which line-editing approach to use, or\n# \"none\" if no option is available.\n#\n# Order of checks:\n#\n#  1) --with-linenoise trumps all others and skips all of the\n#     complexities involved with the remaining options.\n#\n#  2) --editline trumps --readline\n#\n#  3) --disable-readline trumps --readline\n#\n#  4) Default to automatic search for optional readline\n#\n#  5) Try to find readline or editline. If it's not found AND the\n#     corresponding --FEATURE flag was explicitly given, fail fatally,\n#     else fail silently.\nproc sqlite-check-line-editing {} {\n  rename sqlite-check-line-editing \"\"\n  msg-result \"Checking for line-editing capability...\"\n  define HAVE_READLINE 0\n  define HAVE_LINENOISE 0\n  define HAVE_EDITLINE 0\n  define LDFLAGS_READLINE \"\"\n  define CFLAGS_READLINE \"\"\n  set failIfNotFound 0 ; # Gets set to 1 for explicit --FEATURE requests\n                         # so that we know whether to fail fatally or not\n                         # if the library is not found.\n  set libsForReadline {readline edit} ; # -l<LIB> names to check for readline().\n                                        # The libedit check changes this.\n  set editLibName \"readline\" ; # \"readline\" or \"editline\"\n  set editLibDef \"HAVE_READLINE\" ; # \"HAVE_READLINE\" or \"HAVE_EDITLINE\"\n  set dirLn [opt-val with-linenoise]\n  if {\"\" ne $dirLn} {\n    # Use linenoise from a copy of its sources (not a library)...\n    if {![file isdir $dirLn]} {\n      proj-fatal \"--with-linenoise value is not a directory\"\n    }\n    set lnH $dirLn/linenoise.h\n    if {![file exists $lnH] } {\n      proj-fatal \"Cannot find linenoise.h in $dirLn\"\n    }\n    set lnC \"\"\n    set lnCOpts {linenoise-ship.c linenoise.c}\n    foreach f $lnCOpts {\n      if {[file exists $dirLn/$f]} {\n        set lnC $dirLn/$f\n        break;\n      }\n    }\n    if {\"\" eq $lnC} {\n      proj-fatal \"Cannot find any of $lnCOpts in $dirLn\"\n    }\n    set flavor \"\"\n    set lnVal [proj-which-linenoise $lnH]\n    switch -- $lnVal {\n      1 { set flavor \"antirez\" }\n      2 { set flavor \"msteveb\" }\n      default {\n        proj-fatal \"Cannot determine the flavor of linenoise from $lnH\"\n      }\n    }\n    define CFLAGS_READLINE \"-I$dirLn $lnC\"\n    define HAVE_LINENOISE $lnVal\n    sqlite-add-shell-opt -DHAVE_LINENOISE=$lnVal\n    if {$::useJimForCodeGen && 2 == $lnVal} {\n      define-append CFLAGS_JIMSH -DUSE_LINENOISE [get-define CFLAGS_READLINE]\n      user-notice \"Adding linenoise support to jimsh.\"\n    }\n    return \"linenoise ($flavor)\"\n  } elseif {[opt-bool editline]} {\n    # libedit mimics libreadline and on some systems does not have its\n    # own header installed (instead, that of libreadline is used).\n    #\n    # shell.c historically expects HAVE_EDITLINE to be set for\n    # libedit, but it then expects to see <editline/readline.h>, which\n    # some system's don't actually have despite having libedit.  If we\n    # end up finding <editline/readline.h> below, we will use\n    # -DHAVE_EDITLINE=1, else we will use -DHAVE_READLINE=1. In either\n    # case, we will link against libedit.\n    set failIfNotFound 1\n    set libsForReadline {edit}\n    set editLibName editline\n  } elseif {![opt-bool readline]} {\n    msg-result \"Readline support explicitly disabled with --disable-readline\"\n    return \"none\"\n  } elseif {[proj-opt-was-provided readline]} {\n    # If an explicit --[enable-]readline was used, fail if it's not\n    # found, else treat the feature as optional.\n    set failIfNotFound 1\n  }\n\n  # Transform with-readline-header=X to with-readline-cflags=-I...\n  set v [opt-val with-readline-header]\n  proj-opt-set with-readline-header \"\"\n  if {\"\" ne $v} {\n    if {\"auto\" eq $v} {\n      proj-opt-set with-readline-cflags auto\n    } else {\n      set v [file dirname $v]\n      if {[string match */readline $v]} {\n        # Special case: if the path includes .../readline/readline.h,\n        # set the -I to one dir up from that because our sources\n        # #include <readline/readline.h> or <editline/readline.h>.\n        set v [file dirname $v]\n      }\n      proj-opt-set with-readline-cflags \"-I$v\"\n    }\n  }\n\n  # Look for readline.h\n  set rlInc [opt-val with-readline-cflags auto]\n  if {\"auto\" eq $rlInc} {\n    set rlInc \"\"\n    if {$::isCrossCompiling} {\n      # ^^^ this check is derived from the legacy configure script.\n      proj-warn \"Skipping check for readline.h because we're cross-compiling.\"\n    } else {\n      set dirs \"[get-define prefix] /usr /usr/local /usr/local/readline /usr/contrib /mingw\"\n      set subdirs \"include/$editLibName\"\n      if {\"editline\" eq $editLibName} {\n        lappend subdirs include/readline\n        # ^^^ editline, on some systems, does not have its own header,\n        # and uses libreadline's header.\n      }\n      lappend subdirs include\n      # ^^^ The dirs and subdirs lists are, except for the inclusion\n      # of $prefix and editline, from the legacy configure script\n      set rlInc [proj-search-for-header-dir readline.h \\\n                 -dirs $dirs -subdirs $subdirs]\n      if {\"\" ne $rlInc} {\n        if {[string match */readline $rlInc]} {\n          set rlInc [file dirname $rlInc]; # shell #include's <readline/readline.h>\n        } elseif {[string match */editline $rlInc]} {\n          set editLibDef HAVE_EDITLINE\n          set rlInc [file dirname $rlInc]; # shell #include's <editline/readline.h>\n        }\n        set rlInc \"-I${rlInc}\"\n      }\n    }\n  } elseif {\"\" ne $rlInc && ![string match *-I* $rlInc]} {\n    proj-fatal \"Argument to --with-readline-cflags is intended to be CFLAGS and contain -I...\"\n  }\n\n  # If readline.h was found/specified, look for lib(readline|edit)...\n  #\n  # This is not quite straightforward because both libreadline and\n  # libedit typically require some other library which (according to\n  # legacy autotools-generated tests) provides tgetent(3). On some\n  # systems that's built into libreadline/edit, on some (most?) its in\n  # lib[n]curses, and on some it's in libtermcap.\n  set rlLib \"\"\n  if {\"\" ne $rlInc} {\n    set rlLib [opt-val with-readline-ldflags]\n    if {\"\" eq $rlLib || \"auto\" eq $rlLib} {\n      set rlLib \"\"\n      set libTerm \"\"\n      if {[proj-check-function-in-lib tgetent \"$editLibName ncurses curses termcap\"]} {\n        # ^^^ that libs list comes from the legacy configure script ^^^\n        set libTerm [get-define lib_tgetent]\n        undefine lib_tgetent\n      }\n      if {$editLibName eq $libTerm} {\n        set rlLib $libTerm\n      } elseif {[proj-check-function-in-lib readline $libsForReadline $libTerm]} {\n        set rlLib [get-define lib_readline]\n        lappend rlLib $libTerm\n        undefine lib_readline\n      }\n    }\n  }\n\n  # If we found a library, configure the build to use it...\n  if {\"\" ne $rlLib} {\n    if {\"editline\" eq $editLibName && \"HAVE_READLINE\" eq $editLibDef} {\n      # Alert the user that, despite outward appearances, we won't be\n      # linking to the GPL'd libreadline. Presumably that distinction is\n      # significant for those using --editline.\n      proj-indented-notice {\n        NOTE: the local libedit but uses <readline/readline.h> so we\n        will compile with -DHAVE_READLINE=1 but will link with\n        libedit.\n      }\n    }\n    set rlLib [join $rlLib]\n    set rlInc [join $rlInc]\n    define LDFLAGS_READLINE $rlLib\n    define CFLAGS_READLINE $rlInc\n    proj-assert {$editLibDef in {HAVE_READLINE HAVE_EDITLINE}}\n    proj-assert {$editLibName in {readline editline}}\n    sqlite-add-shell-opt -D${editLibDef}=1\n    msg-result \"Using $editLibName flags: $rlInc $rlLib\"\n    # Check whether rl_completion_matches() has a signature we can use\n    # and disable that sub-feature if it doesn't.\n    if {![cctest \\\n            -cflags \"$rlInc -D${editLibDef}\" -libs $rlLib -nooutput 1 -source {\n             #include <stdio.h>\n             #ifdef HAVE_EDITLINE\n             #include <editline/readline.h>\n             #else\n             #include <readline/readline.h>\n             #endif\n             static char * rcg(const char *z, int i){(void)z; (void)i; return 0;}\n             int main(void) {\n               char ** x = rl_completion_matches(\"one\", rcg);\n               (void)x;\n               return 0;\n             }\n           }]} {\n      proj-warn \"readline-style completion disabled due to rl_completion_matches() signature mismatch\"\n      sqlite-add-shell-opt -DSQLITE_OMIT_READLINE_COMPLETION\n    }\n    return $editLibName\n  }\n\n  if {$failIfNotFound} {\n    proj-fatal \"Explicit --$editLibName failed to find a matching library.\"\n  }\n  return \"none\"\n}; # sqlite-check-line-editing\nmsg-result \"Line-editing support for the sqlite3 shell: [sqlite-check-line-editing]\"\n\nproj-if-opt-truthy load-extension {\n  if {[proj-check-function-in-lib dlopen dl]} {\n    define LDFLAGS_DLOPEN [get-define lib_dlopen]\n    undefine lib_dlopen\n  } else {\n    user-error \"dlopen() not found. Use --disable-load-extension to bypass this check.\"\n  }\n} {\n  define LDFLAGS_DLOPEN \"\"\n  sqlite-add-feature-flag {-DSQLITE_OMIT_LOAD_EXTENSION=1}\n  msg-result \"Disabling loadable extensions.\"\n}\n\nproj-if-opt-truthy math {\n  if {![proj-check-function-in-lib ceil m]} {\n    user-error \"Cannot find libm functions. Use --disable-math to bypass this.\"\n  }\n  define LDFLAGS_MATH [get-define lib_ceil]\n  undefine lib_ceil\n  sqlite-add-feature-flag {-DSQLITE_ENABLE_MATH_FUNCTIONS}\n  msg-result \"Enabling math SQL functions [get-define LDFLAGS_MATH]\"\n} {\n  define LDFLAGS_MATH \"\"\n  msg-result \"Disabling math SQL functions\"\n}\n\n########################################################################\n# ICU - International Components for Unicode\n#\n# Handles these flags:\n#\n#  --with-icu-ldflags=LDFLAGS\n#  --with-icu-cflags=CFLAGS\n#  --with-icu-config[=auto | pkg-config | /path/to/icu-config]\n#  --enable-icu-collations\n#\n# --with-icu-config values:\n#\n#   - auto: use the first one of (pkg-config, icu-config) found on the\n#     system.\n#   - pkg-config: use only pkg-config to determine flags\n#   - /path/to/icu-config: use that to determine flags\n#\n# If --with-icu-config is used as neither pkg-config nor icu-config\n# are found, fail fatally.\n#\n# If both --with-icu-ldflags and --with-icu-config are provided, they\n# are cumulative.  If neither are provided, icu-collations is not\n# honored and a warning is emitted if it is provided.\n#\n# Design note: though we could automatically enable ICU if the\n# icu-config binary or (pkg-config icu-io) are found, we specifically\n# do not. ICU is always an opt-in feature.\nproc sqlite-check-icu {} {\n  rename sqlite-check-icu \"\"\n  define LDFLAGS_ICU [join [opt-val with-icu-ldflags \"\"]]\n  define CFLAGS_ICU [join [opt-val with-icu-cflags \"\"]]\n  if {[proj-opt-was-provided with-icu-config]} {\n    set icuConfigBin [opt-val with-icu-config]\n    set tryIcuConfigBin 1; # set to 0 if we end up using pkg-config\n    if {\"auto\" eq $icuConfigBin || \"pkg-config\" eq $icuConfigBin} {\n      if {[pkg-config-init 0] && [pkg-config icu-io]} {\n        # Maintenance reminder: historical docs say to use both of\n        # (icu-io, icu-uc). icu-uc lacks a required lib and icu-io has\n        # all of them on tested OSes.\n        set tryIcuConfigBin 0\n        define LDFLAGS_ICU [get-define PKG_ICU_IO_LDFLAGS]\n        define-append LDFLAGS_ICU [get-define PKG_ICU_IO_LIBS]\n        define CFLAGS_ICU [get-define PKG_ICU_IO_CFLAGS]\n      } elseif {\"pkg-config\" eq $icuConfigBin} {\n        proj-fatal \"pkg-config cannot find package icu-io\"\n      } else {\n        proj-assert {\"auto\" eq $icuConfigBin}\n      }\n    }\n    if {$tryIcuConfigBin} {\n      if {\"auto\" eq $icuConfigBin} {\n        set icuConfigBin [proj-first-bin-of \\\n                            /usr/local/bin/icu-config \\\n                            /usr/bin/icu-config]\n        if {\"\" eq $icuConfigBin} {\n          proj-fatal \"--with-icu-config=auto cannot find (pkg-config icu-io) or icu-config binary\"\n        }\n      }\n      if {[file-isexec $icuConfigBin]} {\n        set x [exec $icuConfigBin --ldflags]\n        if {\"\" eq $x} {\n          proj-fatal \"$icuConfigBin --ldflags returned no data\"\n        }\n        define-append LDFLAGS_ICU $x\n        set x [exec $icuConfigBin --cppflags]\n        define-append CFLAGS_ICU $x\n      } else {\n        proj-fatal \"--with-icu-config=$bin does not refer to an executable\"\n      }\n    }\n  }\n  set ldflags [define LDFLAGS_ICU [string trim [get-define LDFLAGS_ICU]]]\n  set cflags [define CFLAGS_ICU [string trim [get-define CFLAGS_ICU]]]\n  if {\"\" ne $ldflags} {\n    sqlite-add-feature-flag -shell -DSQLITE_ENABLE_ICU\n    msg-result \"Enabling ICU support with flags: $ldflags $cflags\"\n    if {[opt-bool icu-collations]} {\n      msg-result \"Enabling ICU collations.\"\n      sqlite-add-feature-flag -shell -DSQLITE_ENABLE_ICU_COLLATIONS\n      # Recall that shell.c builds with sqlite3.c\n    }\n  } elseif {[opt-bool icu-collations]} {\n    proj-warn \"ignoring --enable-icu-collations because neither --with-icu-ldflags nor --with-icu-config provided any linker flags\"\n  } else {\n    msg-result \"ICU support is disabled.\"\n  }\n}; # sqlite-check-icu\nsqlite-check-icu\n\n########################################################################\n# Check for the Emscripten SDK for building the web-based wasm\n# components.  The core lib and tools do not require this but ext/wasm\n# does.\napply {{} {\n  if {$::autosetup(srcdir) ne $::autosetup(builddir)} {\n    # The EMSDK pieces require writing to the original source tree\n    # even when doing an out-of-tree build. The ext/wasm pieces do not\n    # support an out-of-tree build so we catch that case and treat it\n    # as if EMSDK were not found.\n    msg-result \"Out-of tree build: not checking for EMSDK.\"\n    define EMCC_WRAPPER \"\"\n    return\n  }\n  set emccsh $::srcdir/tool/emcc.sh\n  if {![get-define HAVE_WASI_SDK] && [proj-check-emsdk]} {\n    define EMCC_WRAPPER $emccsh\n    proj-make-from-dot-in $emccsh\n    catch {exec chmod u+x $emccsh}\n  } else {\n    define EMCC_WRAPPER \"\"\n    file delete -force $emccsh\n  }\n}}\n\n########################################################################\n# Check for log(3) in libm and die with an error if it is not\n# found. $featureName should be the feature name which requires that\n# function (it's used only in error messages). defines LDFLAGS_MATH to\n# the required linker flags (which may be empty even if the math APIs\n# are found, depending on the OS).\nproc affirm-have-math {featureName} {\n  if {\"\" eq [get-define LDFLAGS_MATH \"\"]} {\n    if {![msg-quiet proj-check-function-in-lib log m]} {\n      user-error \"Missing math APIs for $featureName\"\n    }\n    define LDFLAGS_MATH [get-define lib_log \"\"]\n    undefine lib_log\n  }\n}\n\n########################################################################\n# Handle various SQLITE_ENABLE_... feature flags.\nmsg-result \"Feature flags...\"\nforeach {boolFlag featureFlag ifSetEvalThis} {\n  all         {} {\n    # The 'all' option must be first in this list.\n    proj-opt-set fts4\n    proj-opt-set fts5\n    proj-opt-set geopoly\n    proj-opt-set rtree\n    proj-opt-set session\n  }\n  fts4         -DSQLITE_ENABLE_FTS4    {affirm-have-math fts4}\n  fts5         -DSQLITE_ENABLE_FTS5    {affirm-have-math fts5}\n  geopoly      -DSQLITE_ENABLE_GEOPOLY {proj-opt-set rtree}\n  rtree        -DSQLITE_ENABLE_RTREE   {}\n  session      {-DSQLITE_ENABLE_SESSION -DSQLITE_ENABLE_PREUPDATE_HOOK} {}\n  update-limit -DSQLITE_ENABLE_UPDATE_DELETE_LIMIT {}\n  memsys5      -DSQLITE_ENABLE_MEMSYS5 {}\n  memsys3      {} {\n    if {[opt-bool memsys5]} {\n      proj-warn \"not enabling memsys3 because memsys5 is enabled.\"\n      expr 0\n    } else {\n      sqlite-add-feature-flag -DSQLITE_ENABLE_MEMSYS3\n    }\n  }\n  scanstatus     -DSQLITE_ENABLE_STMT_SCANSTATUS {}\n} {\n  proj-if-opt-truthy $boolFlag {\n    sqlite-add-feature-flag $featureFlag\n    if {0 != [eval $ifSetEvalThis] && \"all\" ne $boolFlag} {\n      msg-result \"  + $boolFlag\"\n    }\n  } {\n    if {\"all\" ne $boolFlag} {\n      msg-result \"  - $boolFlag\"\n    }\n  }\n}\n\n########################################################################\n# Invert the above loop's logic for some SQLITE_OMIT_...  cases. If\n# config option $boolFlag is false, [sqlite-add-feature-flag\n# $featureFlag], where $featureFlag is intended to be\n# -DSQLITE_OMIT_...\nforeach {boolFlag featureFlag} {\n  json        -DSQLITE_OMIT_JSON\n} {\n  if {[proj-opt-truthy $boolFlag]} {\n    msg-result \"  + $boolFlag\"\n  } else {\n    sqlite-add-feature-flag $featureFlag\n    msg-result \"  - $boolFlag\"\n  }\n}\n\n#########################################################################\n# Show the final feature flag sets:\napply {{} {\n  set oFF [get-define OPT_FEATURE_FLAGS]\n  if {\"\" ne $oFF} {\n    define OPT_FEATURE_FLAGS [lsort -unique $oFF]\n    msg-result \"Library feature flags: [get-define OPT_FEATURE_FLAGS]\"\n  }\n  set oFF [get-define OPT_SHELL]\n  if {\"\" ne $oFF} {\n    define OPT_SHELL [lsort -unique $oFF]\n    msg-result \"Shell options: [get-define OPT_SHELL]\"\n  }\n  unset oFF\n}}\n\n########################################################################\n# \"Re-export\" the autoconf-conventional --XYZdir flags into something\n# which is more easily overridable from a make invocation. See the docs\n# for [proj-remap-autoconf-dir-vars] for the explanation of why.\n#\n# We do this late in the config process, immediately before we export\n# the Makefile and other generated files, so that configure tests\n# which make make use of the autotools-conventional flags\n# (e.g. [proj-check-rpath]) may do so before we \"mangle\" them here.\nproj-remap-autoconf-dir-vars\n\n########################################################################\n# Generate the output files.\n#\n# Potential TODO (unclear): in sqlite3.pc.in, do we need to include\n# any CFLAGS_READLINE, CFLAGS_ZLIB, etc in its \"Cflags:\" section?\nproj-make-from-dot-in -touch Makefile sqlite3.pc\nmake-config-header sqlite_cfg.h \\\n  -bare {SIZEOF_* HAVE_DECL_*} \\\n  -none {HAVE_CFLAG_* LDFLAGS_* SH_* SQLITE_AUTORECONFIG\n    TARGET_* USE_GCOV TCL_*} \\\n  -auto {HAVE_* PACKAGE_*} \\\n  -none *\nproj-touch sqlite_cfg.h ; # help avoid frequent unnecessary @SQLITE_AUTORECONFIG@\n\n########################################################################\n# Some build-dev/debug-only output\nproj-if-opt-truthy dump-defines {\n  make-config-header $::DUMP_DEFINES_TXT \\\n    -bare {SQLITE_OS* SQLITE_DEBUG USE_*} \\\n    -str {BIN_* CC LD AR LDFLAG* OPT_*} \\\n    -auto {*}\n  # achtung: ^^^^ whichever SQLITE_OS_foo flag which is set to 0 will\n  # get _undefined_ here unless it's part of the -bare set.\n  if {\"\" ne $DUMP_DEFINES_JSON} {\n    msg-result \"--dump-defines is creating $::DUMP_DEFINES_JSON\"\n    ########################################################################\n    # Dump config-defines.json...\n    # Demonstrate (mis?)handling of spaces in JSON-export array values:\n    # define-append OPT_FOO.list {\"-DFOO=bar baz\" -DBAR=\"baz barre\"}\n    define OPT_FEATURE_FLAGS.list [get-define OPT_FEATURE_FLAGS]\n    define OPT_SHELL.list [get-define OPT_SHELL]\n    set dumpDefsOpt {\n      -bare {SIZEOF_* HAVE_DECL_*}\n      -none {HAVE_CFLAG_* LDFLAGS_* SH_* SQLITE_AUTORECONFIG TARGET_* USE_GCOV TCL_*}\n      -array {*.list}\n      -auto {OPT_* PACKAGE_* HAVE_*}\n    }\n    if {[opt-bool defines-json-include-lowercase]} {\n      lappend dumpDefsOpt -none {lib_*} ; # remnants from proj-check-function-in-lib and friends\n      lappend dumpDefsOpt -auto {[a-z]*}\n    }\n    lappend dumpDefsOpt -none *\n    proj-dump-defs-json $DUMP_DEFINES_JSON {*}$dumpDefsOpt\n    undefine OPT_FEATURE_FLAGS.list\n    undefine OPT_SHELL.list\n  }\n}\n\n########################################################################\n# Perform some high-level validation on the generated files...\n#\n# 1) Ensure that no unresolved @VAR@ placeholders are in files which\n#    use those.\n#\n# 2) TBD\napply {{} {\n  # Check #1: ensure that files which get filtered for @VAR@ do not\n  # contain any unresolved @VAR@ refs. That may indicate an\n  # unexported/unused var or a typo.\n  foreach f \"Makefile sqlite3.pc $::srcdir/tool/emcc.sh\" {\n    if {![file exists $f]} continue\n    set lnno 1\n    foreach line [proj-file-content-list $f] {\n      if {[regexp {(@[A-Za-z_]+@)} $line match]} {\n        error \"Unresolved reference to $match at line $lnno of $f\"\n      }\n      incr lnno\n    }\n  }\n}}\n"
        },
        {
          "name": "autoconf",
          "type": "tree",
          "content": null
        },
        {
          "name": "autosetup",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 0.142578125,
          "content": "#!/bin/sh\ndir=\"`dirname \"$0\"`/autosetup\"\n#@@INITCHECK@@#\nWRAPPER=\"$0\"; export WRAPPER; exec \"`\"$dir/autosetup-find-tclsh\"`\" \"$dir/autosetup\" \"$@\"\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "ext",
          "type": "tree",
          "content": null
        },
        {
          "name": "magic.txt",
          "type": "blob",
          "size": 1.525390625,
          "content": "# This file contains suggested magic(5) text for the unix file(1)\n# utility for recognizing SQLite3 databases.\n#\n# When SQLite is used as an application file format, it is desirable to\n# have file(1) recognize the database file as being with the specific\n# application.  You can set the application_id for a database file\n# using:\n#\n#     PRAGMA application_id = INTEGER;\n#\n# INTEGER can be any signed 32-bit integer.  That integer is written as\n# a 4-byte big-endian integer into offset 68 of the database header.\n#\n# The Monotone application used \"PRAGMA user_version=1598903374;\" to set\n# its identifier long before \"PRAGMA application_id\" became available.\n# The user_version is very similar to application_id except that it is\n# stored at offset 60 instead of offset 68.  The application_id pragma\n# is preferred.  The rule using offset 60 for Monotone is for historical\n# compatibility only.\n#\n0    string  =SQLite\\ format\\ 3\n>68  belong  =0x0f055112  Fossil checkout -\n>68  belong  =0x0f055113  Fossil global configuration -\n>68  belong  =0x0f055111  Fossil repository -\n>68  belong  =0x42654462  Bentley Systems BeSQLite Database -\n>68  belong  =0x42654c6e  Bentley Systems Localization File -\n>60  belong  =0x5f4d544e  Monotone source repository -\n>68  belong  =0x47504b47  OGC GeoPackage file -\n>68  belong  =0x47503130  OGC GeoPackage version 1.0 file -\n>68  belong  =0x45737269  Esri Spatially-Enabled Database -\n>68  belong  =0x4d504258  MBTiles tileset -\n>68  belong  =0x6a035744  TeXnicard card database\n>0   string  =SQLite      SQLite3 database\n"
        },
        {
          "name": "main.mk",
          "type": "blob",
          "size": 76.2138671875,
          "content": "#!/do/not/make\n# ^^^^ help out editors which guess this file's type.\n###############################################################################\n# This is the main makefile for sqlite. It expects to be included from\n# a higher-level makefile which configures any dynamic state needed by\n# this one (as documented below).\n#\n# Maintenance reminders:\n#\n#  - This file must remain devoid of GNU Make-isms.  i.e. it must be\n#  POSIX Make compatible. \"bmake\" (BSD make) is available on most\n#  Linux systems, so compatibility is relatively easy to test.  As a\n#  harmless exception, this file sometimes uses $(MAKEFILE_LIST) as a\n#  dependency. That var, in GNU Make, lists all of the makefile\n#  currently loaded.\n#\n# The variables listed below must be defined before this script is\n# invoked. This file will use defaults, very possibly invalid, for any\n# which are not defined.\n########################################################################\nall:\n#\n# $(TOP) =\n#\n# The toplevel directory of the source tree.  For canonical builds\n# this is the directory that contains this \"Makefile.in\" and the\n# \"configure.in\" script. For out-of-tree builds, this will differ\n# from $(PWD).\n#\nTOP ?= $(PWD)\n#\n# $(PACKAGE_VERSION) =\n#\n# The MAJOR.MINOR.PATCH version number of this build.\n#\nPACKAGE_VERSION ?=\n#\n# $(B.cc) =\n#\n# C Compiler and options for use in building executables that will run\n# on the platform that is doing the build.\n#\nB.cc ?= $(CC)\n#\n# $(T.cc) =\n#\n# C Compiler and options for use in building executables that will run\n# on the target platform.  This is usually the same as B.cc, unless you\n# are cross-compiling. Note that it should only contain flags which\n# are used by _all_ build targets.  Flags needed only by specific\n# targets are defined elsewhere and applied on a per-target basis.\n#\nT.cc ?= $(B.cc)\n#\n# $(AR) =\n#\n# Tool used to build a static library from object files, without its\n# arguments. $(AR.flags) are its flags for creating a lib.\n#\nAR       ?= ar\nAR.flags ?= cr\n#\n# $(B.exe) =\n#\n# File extension for executables on the build platform. \".exe\" for\n# Windows and \"\" everywhere else.\n#\nB.exe ?=\n#\n# $(B.dll) and $(B.lib) =\n#\n# The DLL resp. static library counterparts of $(B.exe).\n#\nB.dll ?= .so\nB.lib ?= .a\n#\n# $(T.exe) =\n#\n# File extension for executables on the target platform. \".exe\" for\n# Windows and \"\" everywhere else.\n#\nT.exe ?= $(B.exe)\n#\n# $(T.dll) and $(T.lib) =\n#\n# The DLL resp. static library counterparts of $(T.exe).\n#\nT.dll ?= $(B.dll)\nT.lib ?= $(B.lib)\n#\n# $(TCLSH_CMD) =\n#\n# The canonical tclsh.\n#\nTCLSH_CMD ?= tclsh\n#\n# JimTCL is part of the autosetup suite and is suitable for all\n# current in-tree code-generation TCL jobs, but it requires that we\n# build it with non-default flags. Note that the build tree will, if\n# no system-level tclsh is found, also have a ./jimsh0 binary. That\n# one is a bare-bones build for the configure process, whereas we need\n# to build it with another option enabled for use with the various\n# code generators.\n#\n# JIMSH requires a leading path component, even if it's ./, so that it\n# can be used as a shell command.\n#\n# On Windows platforms, if -DHAVE_REALPATH does not work then try\n# -DHAVE__FULLPATH (note the double-underscore).\n#\nCFLAGS.jimsh ?= -DHAVE_REALPATH\nJIMSH ?= ./jimsh$(T.exe)\n#\n# $(B.tclsh) =\n#\n# The TCL interpreter for in-tree code generation. May be either the\n# in-tree JimTCL ($(JIMSH)) or the canonical TCL ($(TCLSH_CMD). If\n# it's JimTCL, it must be compiled with -DHAVE_REALPATH or\n# -DHAVE__FULLPATH.\n#\nB.tclsh ?= $(JIMSH)\n\n#\n# Autotools-conventional vars which are (in this tree) used only by\n# package installation rules and for generating sqlite3.pc (pkg-config\n# data file).\n#\n# The following ${XYZdir} vars are provided for the sake of clients\n# who expect to be able to override these using autotools-conventional\n# dir name vars.\n#\nprefix      ?= /usr/local\ndatadir     ?= $(prefix)/share\nmandir      ?= $(datadir)/man\nincludedir  ?= $(prefix)/include\nexec_prefix ?= $(prefix)\nbindir      ?= $(exec_prefix)/bin\nlibdir      ?= $(exec_prefix)/lib\n# This makefile does not use any of:\n# sbindir        ?= $(exec_prefix)/sbin\n# sysconfdir     ?= /etc\n# sharedstatedir ?= $(prefix)/com\n# localstatedir  ?= /var\n# runstatedir    ?= /run\n# infodir        ?= $(datadir)/info\n# libexecdir     ?= $(exec_prefix)/libexec\n### end of autotools-compatible install dir vars\n\n\n#\n# $(LDFLAGS.{feature}) and $(CFLAGS.{feature}) =\n#\n# Linker resp. C/CPP flags required by a specific feature, e.g.\n# $(LDFLAGS.pthread) or $(CFLAGS.readline).\n#\n# Rather that stuffing all CFLAGS and LDFLAGS into a single set, we\n# break them down on a per-feature basis and expect the build targets\n# to use the one(s) it needs.\n#\nLDFLAGS.zlib ?= -lz\nLDFLAGS.math ?= -lm\nLDFLAGS.rpath ?= -Wl,-rpath -Wl,$(prefix)/lib\nLDFLAGS.pthread ?= -lpthread\nLDFLAGS.dlopen ?= -ldl\nLDFLAGS.shlib ?= -shared\nLDFLAGS.icu ?= # -licui18n -licuuc -licudata\nCFLAGS.icu ?=\nLDFLAGS.libsqlite3.soname ?= # see https://sqlite.org/src/forumpost/5a3b44f510df8ded\n# libreadline (or a workalike):\n# To activate readline in the shell: SHELL_OPT = -DHAVE_READLINE=1\nLDFLAGS.readline ?= -lreadline # these vary across platforms\nCFLAGS.readline ?= -I$(prefix)/include\n# ^^^ When using linenoise instead of readline, do something like:\n# SHELL_OPT += -DHAVE_LINENOISE=1\n# CFLAGS.readline = -I$(HOME)/linenoise $(HOME)/linenoise/linenoise.c\n# LDFLAGS.readline = # empty\n\n#\n#\n# $(INSTALL) =\n#\n# Tool for installing files and directories. It must be compatible\n# with conventional Unix /usr/bin/install. Note that libtool's\n# install-sh is _not_ compatible with this because it _moves_ targets\n# during installation, which may break the build of targets which are\n# built after others are installed.\n#\nINSTALL ?= install\n#\n# $(ENABLE_SHARED) =\n#\n# 1 if libsqlite3.$(T.dll) should be built.\n#\nENABLE_SHARED ?= 1\n#\n# $(ENABLE_STATIC) =\n#\n# 1 if libsqlite3.$(T.lib) should be built. Some components,\n# e.g. libtclsqlite3 and some test apps, implicitly require the static\n# library and will ignore this preference.\n#\nENABLE_STATIC ?= 1\n#\n# $(USE_AMALGAMATION)\n#\n# 1 if the amalgamation (sqlite3.c/h) should be built/used, otherwise\n# the library is built from all of its original source files.\n# Certaint tools, like sqlite3$(T.exe), require the amalgamation and\n# will ignore this preference.\n#\nUSE_AMALGAMATION ?= 1\n#\n# $(LINK_TOOLS_DYNAMICALLY)\n#\n# If 1, certain binaries which typically statically link against\n# libsqlite3 or its component object files will instead link against\n# the DLL. The caveat is that running such builds from the source tree\n# may require that the user specifically prepend \".\" to their\n# $LD_LIBRARY_PATH so that the dynamic linker does not pick up a\n# libsqlite3.so from outside the source tree. Alternately, symlinking\n# the in-build-tree $(libsqlite3.SO) to some dir in the system's\n# library path will work for giving the apps access to the in-tree\n# DLL.\n#\nLINK_TOOLS_DYNAMICALLY ?= 0\n#\n# $(AMALGAMATION_GEN_FLAGS) =\n#\n# Optional flags for the amalgamation generator.\n#\nAMALGAMATION_GEN_FLAGS ?= --linemacros=0\n#\n# $(OPT_FEATURE_FLAGS) =\n#\n# Preprocessor flags for enabling and disabling specific libsqlite3\n# features (-DSQLITE_OMIT*, -DSQLITE_ENABLE*). The same set of OMIT\n# and ENABLE flags must be passed to the LEMON parser generator and\n# the mkkeywordhash tool as well. This is normally set by the\n# configure process, and passing a custom value to a\n# coonfigure-filtered Makefile may not work.\n#\n# When using the canonical makefile, add $(OPTIONS)=... on the make\n# command line to append additional options to the\n# $(OPT_FEATURE_FLAGS). Note that some flags, because they influence\n# generation of the SQL parser, only work if the build is specifically\n# configured to account for them. Adding them later, when compiling\n# the amalgamation separately, may or may not work.\n#\n# $(OPTS)=... is another way of influencing C compilation. It is\n# distinctly separate from $(OPTIONS) and $(OPT_FEATURE_FLAGS) but,\n# like those, $(OPTS) applies to all invocations of $(T.cc). The\n# configure process does not set either of $(OPTIONS) or $(OPTS).\n#\nOPT_FEATURE_FLAGS ?=\n#\n# $(SHELL_OPT) =\n#\n# CFLAGS specific to the sqlite3 CLI shell app and its close cousins.\n#\nSHELL_OPT ?=\n#\n# TCL_CONFIG_SH must, for some of the build targets, refer to a valid\n# tclConfig.sh. That script will be used to populate most of the other\n# TCL-related vars the build needs. The core library does not require\n# TCL, but TCL is needed for running tests and certain tools, e.g.\n# sqlite3_analyzer.\n#\nTCL_CONFIG_SH ?=\n#\n# $(HAVE_WASI_SDK) =\n#\n# Set to 1 when building with the WASI SDK. This disables certain\n# build targets. It is expected that the invoker sets $(CC), $(LD),\n# and $(AR) to their counterparts from the wasi-sdk.\n#\nHAVE_WASI_SDK ?= 0\n#\n# ... and many, many more. Sane defaults are selected where possible.\n#\n# With the above-described defined, the rest of this make script will\n# build the project's deliverables and testing tools.\n################################################################################\nall:\tsqlite3.h sqlite3.c\n\n########################################################################\n########################################################################\n# Modifying anything after this point should not be necessary for most\n# builds.\n########################################################################\n########################################################################\n\n#\n# $(CFLAGS.env) holds the any $(CFLAGS) provided at configure- or\n# make-time (the latter overriding the former).\n#\n# $(CFLAGS) should ideally only contain flags which are relevant for\n# all binaries built for the target platform. However, many people\n# like to pass it to \"make\" without realizing that it applies to\n# dozens of deliverables, and they override core flags (like -fPIC)\n# when doing so. To help work around that, we expect all core-most\n# CFLAGS, e.g. -fPIC, to be set in $(CFLAGS.core). That enables people\n# to pass their other CFLAGS without triggering, e.g., \"recompile with\n# -fPIC\" errors.\n#\n# Historical note: the pre-3.48 build does not honor CPPFLAGS passed\n# to make, so we do not do so here. Both the legacy and 3.48+ builds\n# support CPPFLAGS passed at configure-time, and combines them with\n# the configure-time CFLAGS.\n#\nCFLAGS.core ?=\nCFLAGS.env  = $(CFLAGS)\nT.cc += $(CFLAGS.core) $(CFLAGS.env)\n\n#\n# $(LDFLAGS.configure) represents any LDFLAGS=... the client passes to\n# the configure process.  The historical build enabled passing-on of\n# user-provided LDFLAGS at configure-time but not make-time. That\n# behavior is not possible to fully emulate here because this makefile\n# is not filtered by the configure script, so we instead\n# \"soft-enforce\" it by using a level of indirection, which clients who\n# read this can (but are not advised to!) bypass by passing\n# LDFLAGS.configure=... to this makefile. (We do not guaranty this\n# variable name to be stable, so do not rely on that capability!)\n#\n# A significant difference from the legacy build:\n#\n# The legacy build applied such LDFLAGS to all link operations for all\n# deliverables. The 3.48+ build applies them (as of this writing) more\n# selectively: search this file LDFLAGS.configure to see where they're\n# set.\n#\nLDFLAGS.configure ?=\n\n#\n# The difference between $(OPT_FEATURE_FLAGS) and $(OPTS) is that the\n# former is historically provided by the configure script, whereas\n# $(OPTS) is intended to be provided as arguments to the make\n# invocation.\n#\nT.cc += $(OPT_FEATURE_FLAGS)\n\n#\n# Add in any optional global compilation flags on the make command\n# line i.e.  make \"OPTS=-DSQLITE_ENABLE_FOO=1 -DSQLITE_OMIT_FOO=1\".\n#\nT.cc += $(OPTS)\n\n#\n# $(INSTALL) invocation for use with non-executable files.\n#\nINSTALL.noexec = $(INSTALL) -m 0644\n# ^^^ do not use GNU-specific flags to $(INSTALL), e.g. --mode=...\n\n#\n# $(T.compile) = generic target platform compiler invocation,\n# differing only from $(T.cc) in that it appends $(T.compile.extras),\n# which are primarily intended for use with gcov-related flags.\n#\nT.compile = $(T.cc) $(T.compile.extras)\n\n#\n# $(T.cc.sqlite) is $(T.cc) plus any flags which are desired for the\n# library as a whole, but not necessarily needed for every binary. It\n# will normally get initially populated with flags by the\n# configure-generated makefile.\n#\nT.cc.sqlite ?= $(T.cc)\n\n#\n# $(CFLAGS.intree_includes) = -I... flags relevant specifically to\n# this tree, including any subdirectories commonly needed for building\n# various tools.\n#\nCFLAGS.intree_includes = \\\n    -I. -I$(TOP)/src -I$(TOP)/ext/rtree -I$(TOP)/ext/icu \\\n    -I$(TOP)/ext/fts3 -I$(TOP)/ext/session \\\n    -I$(TOP)/ext/misc\nT.cc.sqlite += $(CFLAGS.intree_includes)\n\n#\n# $(T.cc.extension) = compiler invocation for loadable extensions.\n#\nT.cc.extension = $(T.compile) -I. -I$(TOP)/src -DSQLITE_CORE\n\n#\n# $(T.link) = compiler invocation for when the target will be an\n# executable.\n#\n# $(T.link.extras) = optional config-specific flags for $(T.link),\n# primarily intended for use with gcov-related flags.\n#\nT.link = $(T.cc.sqlite) $(T.link.extras)\n#\n# $(T.link.shared) = $(T.link) invocation specifically for shared libraries\n#\nT.link.shared = $(T.link) $(LDFLAGS.shlib)\n\n#\n# $(LDFLAGS.libsqlite3) should be used with any deliverable for which\n# any of the following apply:\n#\n#  - Results in building libsqlite3.so\n#  - Compiles sqlite3.c in to an application\n#  - Links with libsqlite3.a\n#  - Links in either of $(LIBOBJSO) or $(LIBOBJS1)\n#\n# Note that these flags are for the target build platform, not\n# necessarily localhost.  i.e. it should be used with $(T.cc.sqlite)\n# or $(T.link) but not $(B.cc).\n#\nLDFLAGS.libsqlite3 = \\\n  $(LDFLAGS.rpath) $(LDFLAGS.pthread) \\\n  $(LDFLAGS.math) $(LDFLAGS.dlopen) \\\n  $(LDFLAGS.zlib) $(LDFLAGS.icu) \\\n  $(LDFLAGS.configure)\n\n#\n# $(install-dir.XYZ) = dirs for installation.\n#\n# Design note: these should arguably all be defined with surrounding\n# double-quotes so that targets which have spaces in their paths will\n# work, but that leads to Make treating the quotes as part of the dir\n# name, which in turn leads to it never finding a matching name in the\n# filesystem and always invoking ($(INSTALL) -d ...) for them. The\n# moral of this story is that spaces in installation paths will break\n# the install process.\n#\ninstall-dir.bin = $(DESTDIR)$(bindir)\ninstall-dir.lib = $(DESTDIR)$(libdir)\ninstall-dir.include = $(DESTDIR)$(includedir)\ninstall-dir.pkgconfig = $(DESTDIR)$(libdir)/pkgconfig\ninstall-dir.man1 = $(DESTDIR)$(mandir)/man1\ninstall-dir.all = $(install-dir.bin) $(install-dir.include) \\\n  $(install-dir.lib) $(install-dir.man1) \\\n  $(install-dir.pkgconfig)\n$(install-dir.all):\n\t$(INSTALL) -d \"$@\"\n\n#\n# After jimsh is compiled, we run some sanity checks to ensure that\n# it was built in a way compatible with this project's scripts:\n#\n# 1) Ensure that it was built with realpath() or _fullpath() support.\n# Without that flag the [file normalize] command will always resolve\n# to an empty string.\n#\n# 2) Ensure that it is built with -DJIM_COMPAT (which may be\n# hard-coded into jimsh0.c). Without this, the [expr] command\n# accepts only a single argument.\n#\n$(JIMSH): $(TOP)/autosetup/jimsh0.c\n\t$(B.cc) -o $@ $(CFLAGS.jimsh) $(TOP)/autosetup/jimsh0.c\n\t@if [ x = \"x$$($(JIMSH) -e 'file normalize $(JIMSH)' 2>/dev/null)\" ]; then \\\n\t\techo \"$(JIMSH) was built without -DHAVE_REALPATH or -DHAVE__FULLPATH.\" 1>&2; \\\n\t\texit 1; \\\n\tfi\n\t@if [ x3 != \"x$$($(JIMSH) -e 'expr 1 + 2' 2>/dev/null)\" ]; then \\\n\t\techo \"$(JIMSH) was built without -DJIM_COMPAT.\" 1>&2; \\\n\t\texit 1; \\\n\tfi\ndistclean-jimsh:\n\trm -f $(JIMSH)\ndistclean: distclean-jimsh\n\n#\n# $(MAKE_SANITY_CHECK) = a set of checks for various make vars which\n# must be provided to this file before including it. If any are\n# missing, this target fails. It does (almost) no semantic validation,\n# only checks to see that appropriate vars are not empty.\n#\n# Note that $(MAKEFILE_LIST) is a GNU-make-ism but its use is harmless\n# in other flavors of Make.\n#\nMAKE_SANITY_CHECK = .main.mk.checks\n$(MAKE_SANITY_CHECK): $(MAKEFILE_LIST) $(TOP)/auto.def\n\t@if [ x = \"x$(TOP)\" ]; then echo \"Missing TOP var\" 1>&2; exit 1; fi\n\t@if [ ! -d \"$(TOP)\" ]; then echo \"$(TOP) is not a directory\" 1>&2; exit 1; fi\n\t@if [ ! -f \"$(TOP)/auto.def\" ]; then echo \"$(TOP) does not appear to be the top-most source dir\" 1>&2; exit 1; fi\n\t@if [ x = \"x$(PACKAGE_VERSION)\" ]; then echo \"PACKAGE_VERSION must be set to the library's X.Y.Z-format version number\" 1>&2; exit 1; fi\n\t@if [ x = \"x$(B.cc)\" ]; then echo \"Missing B.cc var\" 1>&2; exit 1; fi\n\t@if [ x = \"x$(T.cc)\" ]; then echo \"Missing T.cc var\" 1>&2; exit 1; fi\n\t@if [ x = \"x$(B.tclsh)\" ]; then echo \"Missing B.tclsh var\" 1>&2; exit 1; fi\n\t@if [ x = \"x$(AR)\" ]; then echo \"Missing AR var\" 1>&2; exit 1; fi\n\ttouch $@\nclean-sanity-check:\n\trm -f $(MAKE_SANITY_CHECK)\nclean: clean-sanity-check\n\n#\n# Object files for the SQLite library (non-amalgamation).\n#\nLIBOBJS0 = alter.o analyze.o attach.o auth.o \\\n         backup.o bitvec.o btmutex.o btree.o build.o \\\n         callback.o complete.o ctime.o \\\n         date.o dbpage.o dbstat.o delete.o \\\n         expr.o fault.o fkey.o \\\n         fts3.o fts3_aux.o fts3_expr.o fts3_hash.o fts3_icu.o \\\n         fts3_porter.o fts3_snippet.o fts3_tokenizer.o fts3_tokenizer1.o \\\n         fts3_tokenize_vtab.o \\\n         fts3_unicode.o fts3_unicode2.o fts3_write.o \\\n         fts5.o \\\n         func.o global.o hash.o \\\n         icu.o insert.o json.o legacy.o loadext.o \\\n         main.o malloc.o mem0.o mem1.o mem2.o mem3.o mem5.o \\\n         memdb.o memjournal.o \\\n         mutex.o mutex_noop.o mutex_unix.o mutex_w32.o \\\n         notify.o opcodes.o os.o os_kv.o os_unix.o os_win.o \\\n         pager.o parse.o pcache.o pcache1.o pragma.o prepare.o printf.o \\\n         random.o resolve.o rowset.o rtree.o \\\n         sqlite3session.o select.o sqlite3rbu.o status.o stmt.o \\\n         table.o threads.o tokenize.o treeview.o trigger.o \\\n         update.o upsert.o utf.o util.o vacuum.o \\\n         vdbe.o vdbeapi.o vdbeaux.o vdbeblob.o vdbemem.o vdbesort.o \\\n         vdbetrace.o vdbevtab.o vtab.o \\\n         wal.o walker.o where.o wherecode.o whereexpr.o \\\n         window.o\nLIBOBJS = $(LIBOBJS0)\n\n#\n# Object files for the amalgamation.\n#\nLIBOBJS1 = sqlite3.o\n\n#\n# Determine the real value of LIBOBJ based on whether the amalgamation\n# is enabled or not.\n#\nLIBOBJ = $(LIBOBJS$(USE_AMALGAMATION))\n$(LIBOBJ): $(MAKE_SANITY_CHECK)\n\n#\n# All of the source code files.\n#\nSRC = \\\n  $(TOP)/src/alter.c \\\n  $(TOP)/src/analyze.c \\\n  $(TOP)/src/attach.c \\\n  $(TOP)/src/auth.c \\\n  $(TOP)/src/backup.c \\\n  $(TOP)/src/bitvec.c \\\n  $(TOP)/src/btmutex.c \\\n  $(TOP)/src/btree.c \\\n  $(TOP)/src/btree.h \\\n  $(TOP)/src/btreeInt.h \\\n  $(TOP)/src/build.c \\\n  $(TOP)/src/callback.c \\\n  $(TOP)/src/complete.c \\\n  $(TOP)/src/ctime.c \\\n  $(TOP)/src/date.c \\\n  $(TOP)/src/dbpage.c \\\n  $(TOP)/src/dbstat.c \\\n  $(TOP)/src/delete.c \\\n  $(TOP)/src/expr.c \\\n  $(TOP)/src/fault.c \\\n  $(TOP)/src/fkey.c \\\n  $(TOP)/src/func.c \\\n  $(TOP)/src/global.c \\\n  $(TOP)/src/hash.c \\\n  $(TOP)/src/hash.h \\\n  $(TOP)/src/hwtime.h \\\n  $(TOP)/src/insert.c \\\n  $(TOP)/src/json.c \\\n  $(TOP)/src/legacy.c \\\n  $(TOP)/src/loadext.c \\\n  $(TOP)/src/main.c \\\n  $(TOP)/src/malloc.c \\\n  $(TOP)/src/mem0.c \\\n  $(TOP)/src/mem1.c \\\n  $(TOP)/src/mem2.c \\\n  $(TOP)/src/mem3.c \\\n  $(TOP)/src/mem5.c \\\n  $(TOP)/src/memdb.c \\\n  $(TOP)/src/memjournal.c \\\n  $(TOP)/src/msvc.h \\\n  $(TOP)/src/mutex.c \\\n  $(TOP)/src/mutex.h \\\n  $(TOP)/src/mutex_noop.c \\\n  $(TOP)/src/mutex_unix.c \\\n  $(TOP)/src/mutex_w32.c \\\n  $(TOP)/src/notify.c \\\n  $(TOP)/src/os.c \\\n  $(TOP)/src/os.h \\\n  $(TOP)/src/os_common.h \\\n  $(TOP)/src/os_setup.h \\\n  $(TOP)/src/os_kv.c \\\n  $(TOP)/src/os_unix.c \\\n  $(TOP)/src/os_win.c \\\n  $(TOP)/src/os_win.h \\\n  $(TOP)/src/pager.c \\\n  $(TOP)/src/pager.h \\\n  $(TOP)/src/parse.y \\\n  $(TOP)/src/pcache.c \\\n  $(TOP)/src/pcache.h \\\n  $(TOP)/src/pcache1.c \\\n  $(TOP)/src/pragma.c \\\n  $(TOP)/src/pragma.h \\\n  $(TOP)/src/prepare.c \\\n  $(TOP)/src/printf.c \\\n  $(TOP)/src/random.c \\\n  $(TOP)/src/resolve.c \\\n  $(TOP)/src/rowset.c \\\n  $(TOP)/src/select.c \\\n  $(TOP)/src/status.c \\\n  $(TOP)/src/shell.c.in \\\n  $(TOP)/src/sqlite.h.in \\\n  $(TOP)/src/sqlite3ext.h \\\n  $(TOP)/src/sqliteInt.h \\\n  $(TOP)/src/sqliteLimit.h \\\n  $(TOP)/src/table.c \\\n  $(TOP)/src/tclsqlite.c \\\n  $(TOP)/src/threads.c \\\n  $(TOP)/src/tokenize.c \\\n  $(TOP)/src/treeview.c \\\n  $(TOP)/src/trigger.c \\\n  $(TOP)/src/utf.c \\\n  $(TOP)/src/update.c \\\n  $(TOP)/src/upsert.c \\\n  $(TOP)/src/util.c \\\n  $(TOP)/src/vacuum.c \\\n  $(TOP)/src/vdbe.c \\\n  $(TOP)/src/vdbe.h \\\n  $(TOP)/src/vdbeapi.c \\\n  $(TOP)/src/vdbeaux.c \\\n  $(TOP)/src/vdbeblob.c \\\n  $(TOP)/src/vdbemem.c \\\n  $(TOP)/src/vdbesort.c \\\n  $(TOP)/src/vdbetrace.c \\\n  $(TOP)/src/vdbevtab.c \\\n  $(TOP)/src/vdbeInt.h \\\n  $(TOP)/src/vtab.c \\\n  $(TOP)/src/vxworks.h \\\n  $(TOP)/src/wal.c \\\n  $(TOP)/src/wal.h \\\n  $(TOP)/src/walker.c \\\n  $(TOP)/src/where.c \\\n  $(TOP)/src/wherecode.c \\\n  $(TOP)/src/whereexpr.c \\\n  $(TOP)/src/whereInt.h \\\n  $(TOP)/src/window.c\n\n# Source code for extensions\n#\nSRC += \\\n  $(TOP)/ext/fts3/fts3.c \\\n  $(TOP)/ext/fts3/fts3.h \\\n  $(TOP)/ext/fts3/fts3Int.h \\\n  $(TOP)/ext/fts3/fts3_aux.c \\\n  $(TOP)/ext/fts3/fts3_expr.c \\\n  $(TOP)/ext/fts3/fts3_hash.c \\\n  $(TOP)/ext/fts3/fts3_hash.h \\\n  $(TOP)/ext/fts3/fts3_icu.c \\\n  $(TOP)/ext/fts3/fts3_porter.c \\\n  $(TOP)/ext/fts3/fts3_snippet.c \\\n  $(TOP)/ext/fts3/fts3_tokenizer.h \\\n  $(TOP)/ext/fts3/fts3_tokenizer.c \\\n  $(TOP)/ext/fts3/fts3_tokenizer1.c \\\n  $(TOP)/ext/fts3/fts3_tokenize_vtab.c \\\n  $(TOP)/ext/fts3/fts3_unicode.c \\\n  $(TOP)/ext/fts3/fts3_unicode2.c \\\n  $(TOP)/ext/fts3/fts3_write.c\nSRC += \\\n  $(TOP)/ext/icu/sqliteicu.h \\\n  $(TOP)/ext/icu/icu.c\nSRC += \\\n  $(TOP)/ext/rtree/rtree.h \\\n  $(TOP)/ext/rtree/rtree.c \\\n  $(TOP)/ext/rtree/geopoly.c\nSRC += \\\n  $(TOP)/ext/session/sqlite3session.c \\\n  $(TOP)/ext/session/sqlite3session.h\nSRC += \\\n  $(TOP)/ext/rbu/sqlite3rbu.h \\\n  $(TOP)/ext/rbu/sqlite3rbu.c\nSRC += \\\n  $(TOP)/ext/misc/stmt.c\n\n# Generated source code files\n#\nSRC += \\\n  keywordhash.h \\\n  opcodes.c \\\n  opcodes.h \\\n  parse.c \\\n  parse.h \\\n  sqlite_cfg.h \\\n  shell.c \\\n  sqlite3.h\n\n# Source code to the test files.\n#\nTESTSRC = \\\n  $(TOP)/src/test1.c \\\n  $(TOP)/src/test2.c \\\n  $(TOP)/src/test3.c \\\n  $(TOP)/src/test4.c \\\n  $(TOP)/src/test5.c \\\n  $(TOP)/src/test6.c \\\n  $(TOP)/src/test8.c \\\n  $(TOP)/src/test9.c \\\n  $(TOP)/src/test_autoext.c \\\n  $(TOP)/src/test_backup.c \\\n  $(TOP)/src/test_bestindex.c \\\n  $(TOP)/src/test_blob.c \\\n  $(TOP)/src/test_btree.c \\\n  $(TOP)/src/test_config.c \\\n  $(TOP)/src/test_delete.c \\\n  $(TOP)/src/test_demovfs.c \\\n  $(TOP)/src/test_devsym.c \\\n  $(TOP)/src/test_fs.c \\\n  $(TOP)/src/test_func.c \\\n  $(TOP)/src/test_hexio.c \\\n  $(TOP)/src/test_init.c \\\n  $(TOP)/src/test_intarray.c \\\n  $(TOP)/src/test_journal.c \\\n  $(TOP)/src/test_malloc.c \\\n  $(TOP)/src/test_md5.c \\\n  $(TOP)/src/test_multiplex.c \\\n  $(TOP)/src/test_mutex.c \\\n  $(TOP)/src/test_onefile.c \\\n  $(TOP)/src/test_osinst.c \\\n  $(TOP)/src/test_pcache.c \\\n  $(TOP)/src/test_quota.c \\\n  $(TOP)/src/test_rtree.c \\\n  $(TOP)/src/test_schema.c \\\n  $(TOP)/src/test_superlock.c \\\n  $(TOP)/src/test_syscall.c \\\n  $(TOP)/src/test_tclsh.c \\\n  $(TOP)/src/test_tclvar.c \\\n  $(TOP)/src/test_thread.c \\\n  $(TOP)/src/test_vdbecov.c \\\n  $(TOP)/src/test_vfs.c \\\n  $(TOP)/src/test_windirent.c \\\n  $(TOP)/src/test_window.c \\\n  $(TOP)/src/test_wsd.c       \\\n  $(TOP)/ext/fts3/fts3_term.c \\\n  $(TOP)/ext/fts3/fts3_test.c  \\\n  $(TOP)/ext/session/test_session.c \\\n  $(TOP)/ext/recover/sqlite3recover.c \\\n  $(TOP)/ext/recover/dbdata.c \\\n  $(TOP)/ext/recover/test_recover.c \\\n  $(TOP)/ext/intck/test_intck.c  \\\n  $(TOP)/ext/intck/sqlite3intck.c \\\n  $(TOP)/ext/rbu/test_rbu.c\n\n# Statically linked extensions\n#\nTESTSRC += \\\n  $(TOP)/ext/expert/sqlite3expert.c \\\n  $(TOP)/ext/expert/test_expert.c \\\n  $(TOP)/ext/misc/amatch.c \\\n  $(TOP)/ext/misc/appendvfs.c \\\n  $(TOP)/ext/misc/basexx.c \\\n  $(TOP)/ext/misc/carray.c \\\n  $(TOP)/ext/misc/cksumvfs.c \\\n  $(TOP)/ext/misc/closure.c \\\n  $(TOP)/ext/misc/csv.c \\\n  $(TOP)/ext/misc/decimal.c \\\n  $(TOP)/ext/misc/eval.c \\\n  $(TOP)/ext/misc/explain.c \\\n  $(TOP)/ext/misc/fileio.c \\\n  $(TOP)/ext/misc/fuzzer.c \\\n  $(TOP)/ext/fts5/fts5_tcl.c \\\n  $(TOP)/ext/fts5/fts5_test_mi.c \\\n  $(TOP)/ext/fts5/fts5_test_tok.c \\\n  $(TOP)/ext/misc/ieee754.c \\\n  $(TOP)/ext/misc/mmapwarm.c \\\n  $(TOP)/ext/misc/nextchar.c \\\n  $(TOP)/ext/misc/normalize.c \\\n  $(TOP)/ext/misc/percentile.c \\\n  $(TOP)/ext/misc/prefixes.c \\\n  $(TOP)/ext/misc/qpvtab.c \\\n  $(TOP)/ext/misc/randomjson.c \\\n  $(TOP)/ext/misc/regexp.c \\\n  $(TOP)/ext/misc/remember.c \\\n  $(TOP)/ext/misc/series.c \\\n  $(TOP)/ext/misc/spellfix.c \\\n  $(TOP)/ext/misc/stmtrand.c \\\n  $(TOP)/ext/misc/totype.c \\\n  $(TOP)/ext/misc/unionvtab.c \\\n  $(TOP)/ext/misc/wholenumber.c \\\n  $(TOP)/ext/misc/zipfile.c \\\n  $(TOP)/ext/rtree/test_rtreedoc.c\n\n# Source code to the library files needed by the test fixture\n#\nTESTSRC2 = \\\n  $(TOP)/src/attach.c \\\n  $(TOP)/src/backup.c \\\n  $(TOP)/src/bitvec.c \\\n  $(TOP)/src/btree.c \\\n  $(TOP)/src/build.c \\\n  $(TOP)/src/ctime.c \\\n  $(TOP)/src/date.c \\\n  $(TOP)/src/dbpage.c \\\n  $(TOP)/src/dbstat.c \\\n  $(TOP)/src/expr.c \\\n  $(TOP)/src/func.c \\\n  $(TOP)/src/global.c \\\n  $(TOP)/src/insert.c \\\n  $(TOP)/src/wal.c \\\n  $(TOP)/src/main.c \\\n  $(TOP)/src/mem5.c \\\n  $(TOP)/src/os.c \\\n  $(TOP)/src/os_kv.c \\\n  $(TOP)/src/os_unix.c \\\n  $(TOP)/src/os_win.c \\\n  $(TOP)/src/pager.c \\\n  $(TOP)/src/pragma.c \\\n  $(TOP)/src/prepare.c \\\n  $(TOP)/src/printf.c \\\n  $(TOP)/src/random.c \\\n  $(TOP)/src/pcache.c \\\n  $(TOP)/src/pcache1.c \\\n  $(TOP)/src/select.c \\\n  $(TOP)/src/tokenize.c \\\n  $(TOP)/src/treeview.c \\\n  $(TOP)/src/utf.c \\\n  $(TOP)/src/util.c \\\n  $(TOP)/src/vdbeapi.c \\\n  $(TOP)/src/vdbeaux.c \\\n  $(TOP)/src/vdbe.c \\\n  $(TOP)/src/vdbemem.c \\\n  $(TOP)/src/vdbetrace.c \\\n  $(TOP)/src/vdbevtab.c \\\n  $(TOP)/src/where.c \\\n  $(TOP)/src/wherecode.c \\\n  $(TOP)/src/whereexpr.c \\\n  $(TOP)/src/window.c \\\n  parse.c \\\n  $(TOP)/ext/fts3/fts3.c \\\n  $(TOP)/ext/fts3/fts3_aux.c \\\n  $(TOP)/ext/fts3/fts3_expr.c \\\n  $(TOP)/ext/fts3/fts3_tokenizer.c \\\n  $(TOP)/ext/fts3/fts3_write.c \\\n  $(TOP)/ext/session/sqlite3session.c \\\n  $(TOP)/ext/misc/stmt.c \\\n  fts5.c\n\n# Header files used by all library source files.\n#\nHDR = \\\n   $(TOP)/src/btree.h \\\n   $(TOP)/src/btreeInt.h \\\n   $(TOP)/src/hash.h \\\n   $(TOP)/src/hwtime.h \\\n   keywordhash.h \\\n   $(TOP)/src/msvc.h \\\n   $(TOP)/src/mutex.h \\\n   opcodes.h \\\n   $(TOP)/src/os.h \\\n   $(TOP)/src/os_common.h \\\n   $(TOP)/src/os_setup.h \\\n   $(TOP)/src/os_win.h \\\n   $(TOP)/src/pager.h \\\n   $(TOP)/src/pcache.h \\\n   parse.h  \\\n   $(TOP)/src/pragma.h \\\n   sqlite3.h  \\\n   $(TOP)/src/sqlite3ext.h \\\n   $(TOP)/src/sqliteInt.h  \\\n   $(TOP)/src/sqliteLimit.h \\\n   $(TOP)/src/vdbe.h \\\n   $(TOP)/src/vdbeInt.h \\\n   $(TOP)/src/vxworks.h \\\n   $(TOP)/src/whereInt.h \\\n   sqlite_cfg.h\n# Reminder: sqlite_cfg.h is typically created by the configure script\n\n# Header files used by extensions\n#\nEXTHDR += \\\n  $(TOP)/ext/fts3/fts3.h \\\n  $(TOP)/ext/fts3/fts3Int.h \\\n  $(TOP)/ext/fts3/fts3_hash.h \\\n  $(TOP)/ext/fts3/fts3_tokenizer.h\nEXTHDR += \\\n  $(TOP)/ext/rtree/rtree.h \\\n  $(TOP)/ext/rtree/geopoly.c\nEXTHDR += \\\n  $(TOP)/ext/icu/sqliteicu.h\nEXTHDR += \\\n  $(TOP)/ext/rtree/sqlite3rtree.h\n\n#\n# Executables needed for testing\n#\nTESTPROGS = \\\n  testfixture$(T.exe) \\\n  sqlite3$(T.exe) \\\n  sqlite3_analyzer$(T.exe) \\\n  sqldiff$(T.exe) \\\n  dbhash$(T.exe) \\\n  sqltclsh$(T.exe)\n\n# Databases containing fuzzer test cases\n#\nFUZZDATA = \\\n  $(TOP)/test/fuzzdata1.db \\\n  $(TOP)/test/fuzzdata2.db \\\n  $(TOP)/test/fuzzdata3.db \\\n  $(TOP)/test/fuzzdata4.db \\\n  $(TOP)/test/fuzzdata5.db \\\n  $(TOP)/test/fuzzdata6.db \\\n  $(TOP)/test/fuzzdata7.db \\\n  $(TOP)/test/fuzzdata8.db\n\n#\n# Standard options to testfixture\n#\nTESTOPTS = --verbose=file --output=test-out.txt\n\n#\n# Extra compiler options for various shell tools\n#\n# Note that some of these will only apply when embedding sqlite3.c\n# into the shell, as these flags are not otherwise passed on to the\n# library.\nSHELL_OPT += -DSQLITE_DQS=0\nSHELL_OPT += -DSQLITE_ENABLE_FTS4\n#SHELL_OPT += -DSQLITE_ENABLE_FTS5\nSHELL_OPT += -DSQLITE_ENABLE_RTREE\nSHELL_OPT += -DSQLITE_ENABLE_EXPLAIN_COMMENTS\nSHELL_OPT += -DSQLITE_ENABLE_UNKNOWN_SQL_FUNCTION\nSHELL_OPT += -DSQLITE_ENABLE_STMTVTAB\nSHELL_OPT += -DSQLITE_ENABLE_DBPAGE_VTAB\nSHELL_OPT += -DSQLITE_ENABLE_DBSTAT_VTAB\nSHELL_OPT += -DSQLITE_ENABLE_BYTECODE_VTAB\nSHELL_OPT += -DSQLITE_ENABLE_OFFSET_SQL_FUNC\nSHELL_OPT += -DSQLITE_STRICT_SUBTYPE=1\nFUZZERSHELL_OPT =\nFUZZCHECK_OPT += -I$(TOP)/test\nFUZZCHECK_OPT += -I$(TOP)/ext/recover\nFUZZCHECK_OPT += \\\n  -DSQLITE_OSS_FUZZ \\\n  -DSQLITE_ENABLE_BYTECODE_VTAB \\\n  -DSQLITE_ENABLE_DBPAGE_VTAB \\\n  -DSQLITE_ENABLE_DBSTAT_VTAB \\\n  -DSQLITE_ENABLE_BYTECODE_VTAB \\\n  -DSQLITE_ENABLE_DESERIALIZE \\\n  -DSQLITE_ENABLE_EXPLAIN_COMMENTS \\\n  -DSQLITE_ENABLE_FTS3_PARENTHESIS \\\n  -DSQLITE_ENABLE_FTS4 \\\n  -DSQLITE_ENABLE_FTS5 \\\n  -DSQLITE_ENABLE_GEOPOLY \\\n  -DSQLITE_ENABLE_MATH_FUNCTIONS \\\n  -DSQLITE_ENABLE_MEMSYS5 \\\n  -DSQLITE_ENABLE_NORMALIZE \\\n  -DSQLITE_ENABLE_OFFSET_SQL_FUNC \\\n  -DSQLITE_ENABLE_PREUPDATE_HOOK \\\n  -DSQLITE_ENABLE_RTREE \\\n  -DSQLITE_ENABLE_SESSION \\\n  -DSQLITE_ENABLE_STMTVTAB \\\n  -DSQLITE_ENABLE_UNKNOWN_SQL_FUNCTION \\\n  -DSQLITE_ENABLE_STAT4 \\\n  -DSQLITE_ENABLE_STMT_SCANSTATUS \\\n  -DSQLITE_MAX_MEMORY=50000000 \\\n  -DSQLITE_MAX_MMAP_SIZE=0 \\\n  -DSQLITE_OMIT_LOAD_EXTENSION \\\n  -DSQLITE_PRINTF_PRECISION_LIMIT=1000 \\\n  -DSQLITE_PRIVATE=\"\" \\\n  -DSQLITE_STRICT_SUBTYPE=1 \\\n  -DSQLITE_STATIC_RANDOMJSON\n\nFUZZCHECK_SRC += $(TOP)/test/fuzzcheck.c\nFUZZCHECK_SRC += $(TOP)/test/ossfuzz.c\nFUZZCHECK_SRC += $(TOP)/test/fuzzinvariants.c\nFUZZCHECK_SRC += $(TOP)/ext/recover/dbdata.c\nFUZZCHECK_SRC += $(TOP)/ext/recover/sqlite3recover.c\nFUZZCHECK_SRC += $(TOP)/test/vt02.c\nFUZZCHECK_SRC += $(TOP)/ext/misc/percentile.c\nFUZZCHECK_SRC += $(TOP)/ext/misc/randomjson.c\nDBFUZZ_OPT =\nST_OPT = -DSQLITE_OS_KV_OPTIONAL\n\n$(TCLSH_CMD):\nhas_tclsh84:\n\tsh $(TOP)/tool/cktclsh.sh 8.4 $(TCLSH_CMD)\n\ttouch has_tclsh84\n\nhas_tclsh85:\n\tsh $(TOP)/tool/cktclsh.sh 8.5 $(TCLSH_CMD)\n\ttouch has_tclsh85\n\n#\n# $(T.tcl.env.sh) is a shell script intended for source'ing to set\n# various TCL config info in the current shell context:\n#\n# - All info exported by tclConfig.sh\n#\n# - TCLLIBDIR = the first entry from TCL's $auto_path which refers to\n#   an existing dir, then append /sqlite3 to it. If TCLLIBDIR is\n#   provided via the environment, that value is used instead.\n#\n# Maintenance reminder: the ./ at the start of the name is required or /bin/sh\n# refuses to source it:\n#\n#   . .tclenv.sh    ==> .tclenv.sh: not found\n#   . ./.tclenv.sh  ==> fine\n#\n# It took half an hour to figure that out.\n#\nT.tcl.env.sh = ./.tclenv.sh\n$(T.tcl.env.sh): $(TCLSH_CMD) $(TCL_CONFIG_SH) $(MAKEFILE_LIST)\n\t@if [ x = \"x$(TCL_CONFIG_SH)\" ]; then \\\n\t\techo 'TCL_CONFIG_SH must be set to point to a \"tclConfig.sh\"' 1>&2; exit 1; \\\n\tfi; \\\n\tif [ x != \"x$(TCLLIBDIR)\" ]; then echo TCLLIBDIR=\"$(TCLLIBDIR)\"; else \\\n\t\tld= ; \\\n\t\tfor d in `echo \"puts stdout \\\\$$auto_path\" | $(TCLSH_CMD)`; do \\\n\t\t\tif [ -d \"$$d\" ]; then ld=$$d; break; fi; \\\n\t\tdone; \\\n\t\tif [ x = \"x$$ld\" ]; then echo \"Cannot determine TCLLIBDIR\" 1>&2; exit 1; fi; \\\n\t\techo \"TCLLIBDIR=$$ld/sqlite3\"; \\\n\tfi > $@; \\\n\techo \". \\\"$(TCL_CONFIG_SH)\\\" || exit \\$$?\" >> $@; \\\n\techo \"Created $@\"\n\n#\n# $(T.tcl.env.source) is shell code to be run as part of any\n# compilation or link step which requires vars from\n# $(TCL_CONFIG_SH). All targets which use this should also have a\n# dependency on $(T.tcl.env.sh).\n#\nT.tcl.env.source = . $(T.tcl.env.sh) || exit $$?\n\n#\n# $(T.compile.tcl) and $(T.link.tcl) are TCL-specific counterparts for $(T.compile)\n# and $(T.link) which first invoke $(T.tcl.env.source). Any targets which used them\n# must have a dependency on $(T.tcl.env.sh)\n#\nT.compile.tcl = $(T.tcl.env.source); $(T.compile) $(CFLAGS.intree_includes)\nT.link.tcl = $(T.tcl.env.source); $(T.link)\n\n#\n# This target creates a directory named \"tsrc\" and fills it with\n# copies of all of the C source code and header files needed to\n# build on the target system.  Some of the C source code and header\n# files are automatically generated.  This target takes care of\n# all that automatic generation.\n#\n.target_source: $(MAKE_SANITY_CHECK) $(SRC) $(TOP)/tool/vdbe-compress.tcl \\\n    fts5.c $(B.tclsh)\n\trm -rf tsrc\n\tmkdir tsrc\n\tcp -f $(SRC) tsrc\n\trm -f tsrc/sqlite.h.in tsrc/parse.y\n\t$(B.tclsh) $(TOP)/tool/vdbe-compress.tcl $(OPTS) <tsrc/vdbe.c >vdbe.new\n\tmv -f vdbe.new tsrc/vdbe.c\n\tcp fts5.c fts5.h tsrc\n\ttouch .target_source\n\nlibsqlite3.LIB = libsqlite3$(T.lib)\nlibsqlite3.SO = libsqlite3$(T.dll)\n\n# Rules to build the LEMON compiler generator\n#\nlemon$(B.exe): $(MAKE_SANITY_CHECK) $(TOP)/tool/lemon.c $(TOP)/tool/lempar.c\n\t$(B.cc) -o $@ $(TOP)/tool/lemon.c\n\tcp $(TOP)/tool/lempar.c .\n\n# Rules to build the program that generates the source-id\n#\nmksourceid$(B.exe): $(MAKE_SANITY_CHECK) $(TOP)/tool/mksourceid.c\n\t$(B.cc) -o $@ $(TOP)/tool/mksourceid.c\n\nsqlite3.h: $(MAKE_SANITY_CHECK) $(TOP)/src/sqlite.h.in \\\n    $(TOP)/manifest mksourceid$(B.exe) \\\n\t\t$(TOP)/VERSION $(B.tclsh)\n\t$(B.tclsh) $(TOP)/tool/mksqlite3h.tcl $(TOP) >sqlite3.h\n\nsqlite3.c:\t.target_source sqlite3.h $(TOP)/tool/mksqlite3c.tcl src-verify$(B.exe) \\\n\t\t$(B.tclsh)\n\t$(B.tclsh) $(TOP)/tool/mksqlite3c.tcl $(AMALGAMATION_GEN_FLAGS) $(EXTRA_SRC)\n\tcp tsrc/sqlite3ext.h .\n\tcp $(TOP)/ext/session/sqlite3session.h .\n\nsqlite3r.h: sqlite3.h $(B.tclsh)\n\t$(B.tclsh) $(TOP)/tool/mksqlite3h.tcl $(TOP) --enable-recover >sqlite3r.h\n\nsqlite3r.c: sqlite3.c sqlite3r.h $(B.tclsh)\n\tcp $(TOP)/ext/recover/sqlite3recover.c tsrc/\n\tcp $(TOP)/ext/recover/sqlite3recover.h tsrc/\n\tcp $(TOP)/ext/recover/dbdata.c tsrc/\n\t$(B.tclsh) $(TOP)/tool/mksqlite3c.tcl --enable-recover $(AMALGAMATION_GEN_FLAGS) $(EXTRA_SRC)\n\nsqlite3ext.h: .target_source\n\tcp tsrc/sqlite3ext.h .\n\n# Rules to build individual *.o files from generated *.c files. This\n# applies to:\n#\n#     parse.o\n#     opcodes.o\n#\nDEPS_OBJ_COMMON = $(MAKE_SANITY_CHECK) $(HDR)\nparse.o:\tparse.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c parse.c\n\nopcodes.o:\topcodes.c\n\t$(T.cc.sqlite) -c opcodes.c\n\n# Rules to build individual *.o files from files in the src directory.\n#\nalter.o:\t$(TOP)/src/alter.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/alter.c\n\nanalyze.o:\t$(TOP)/src/analyze.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/analyze.c\n\nattach.o:\t$(TOP)/src/attach.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/attach.c\n\nauth.o:\t$(TOP)/src/auth.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/auth.c\n\nbackup.o:\t$(TOP)/src/backup.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/backup.c\n\nbitvec.o:\t$(TOP)/src/bitvec.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/bitvec.c\n\nbtmutex.o:\t$(TOP)/src/btmutex.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/btmutex.c\n\nbtree.o:\t$(TOP)/src/btree.c $(DEPS_OBJ_COMMON) $(TOP)/src/pager.h\n\t$(T.cc.sqlite) -c $(TOP)/src/btree.c\n\nbuild.o:\t$(TOP)/src/build.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/build.c\n\ncallback.o:\t$(TOP)/src/callback.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/callback.c\n\ncomplete.o:\t$(TOP)/src/complete.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/complete.c\n\nctime.o:\t$(TOP)/src/ctime.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/ctime.c\n\ndate.o:\t$(TOP)/src/date.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/date.c\n\ndbpage.o:\t$(TOP)/src/dbpage.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/dbpage.c\n\ndbstat.o:\t$(TOP)/src/dbstat.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/dbstat.c\n\ndelete.o:\t$(TOP)/src/delete.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/delete.c\n\nexpr.o:\t$(TOP)/src/expr.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/expr.c\n\nfault.o:\t$(TOP)/src/fault.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/fault.c\n\nfkey.o:\t$(TOP)/src/fkey.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/fkey.c\n\nfunc.o:\t$(TOP)/src/func.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/func.c\n\nglobal.o:\t$(TOP)/src/global.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/global.c\n\nhash.o:\t$(TOP)/src/hash.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/hash.c\n\ninsert.o:\t$(TOP)/src/insert.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/insert.c\n\njson.o:\t$(TOP)/src/json.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/json.c\n\nlegacy.o:\t$(TOP)/src/legacy.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/legacy.c\n\nloadext.o:\t$(TOP)/src/loadext.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/loadext.c\n\nmain.o:\t$(TOP)/src/main.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/main.c\n\nmalloc.o:\t$(TOP)/src/malloc.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/malloc.c\n\nmem0.o:\t$(TOP)/src/mem0.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/mem0.c\n\nmem1.o:\t$(TOP)/src/mem1.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/mem1.c\n\nmem2.o:\t$(TOP)/src/mem2.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/mem2.c\n\nmem3.o:\t$(TOP)/src/mem3.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/mem3.c\n\nmem5.o:\t$(TOP)/src/mem5.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/mem5.c\n\nmemdb.o:\t$(TOP)/src/memdb.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/memdb.c\n\nmemjournal.o:\t$(TOP)/src/memjournal.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/memjournal.c\n\nmutex.o:\t$(TOP)/src/mutex.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/mutex.c\n\nmutex_noop.o:\t$(TOP)/src/mutex_noop.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/mutex_noop.c\n\nmutex_unix.o:\t$(TOP)/src/mutex_unix.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/mutex_unix.c\n\nmutex_w32.o:\t$(TOP)/src/mutex_w32.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/mutex_w32.c\n\nnotify.o:\t$(TOP)/src/notify.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/notify.c\n\npager.o:\t$(TOP)/src/pager.c $(DEPS_OBJ_COMMON) $(TOP)/src/pager.h\n\t$(T.cc.sqlite) -c $(TOP)/src/pager.c\n\npcache.o:\t$(TOP)/src/pcache.c $(DEPS_OBJ_COMMON) $(TOP)/src/pcache.h\n\t$(T.cc.sqlite) -c $(TOP)/src/pcache.c\n\npcache1.o:\t$(TOP)/src/pcache1.c $(DEPS_OBJ_COMMON) $(TOP)/src/pcache.h\n\t$(T.cc.sqlite) -c $(TOP)/src/pcache1.c\n\nos.o:\t$(TOP)/src/os.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/os.c\n\nos_kv.o:\t$(TOP)/src/os_kv.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/os_kv.c\n\nos_unix.o:\t$(TOP)/src/os_unix.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/os_unix.c\n\nos_win.o:\t$(TOP)/src/os_win.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/os_win.c\n\npragma.o:\t$(TOP)/src/pragma.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/pragma.c\n\nprepare.o:\t$(TOP)/src/prepare.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/prepare.c\n\nprintf.o:\t$(TOP)/src/printf.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/printf.c\n\nrandom.o:\t$(TOP)/src/random.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/random.c\n\nresolve.o:\t$(TOP)/src/resolve.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/resolve.c\n\nrowset.o:\t$(TOP)/src/rowset.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/rowset.c\n\nselect.o:\t$(TOP)/src/select.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/select.c\n\nstatus.o:\t$(TOP)/src/status.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/status.c\n\nsqlite3.o:\tsqlite3.h sqlite3.c\n\t$(T.cc.sqlite) -c sqlite3.c\n\ntable.o:\t$(TOP)/src/table.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/table.c\n\nthreads.o:\t$(TOP)/src/threads.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/threads.c\n\ntokenize.o:\t$(TOP)/src/tokenize.c keywordhash.h $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/tokenize.c\n\ntreeview.o:\t$(TOP)/src/treeview.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/treeview.c\n\ntrigger.o:\t$(TOP)/src/trigger.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/trigger.c\n\nupdate.o:\t$(TOP)/src/update.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/update.c\n\nupsert.o:\t$(TOP)/src/upsert.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/upsert.c\n\nutf.o:\t$(TOP)/src/utf.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/utf.c\n\nutil.o:\t$(TOP)/src/util.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/util.c\n\nvacuum.o:\t$(TOP)/src/vacuum.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/vacuum.c\n\nvdbe.o:\t$(TOP)/src/vdbe.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/vdbe.c\n\nvdbeapi.o:\t$(TOP)/src/vdbeapi.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/vdbeapi.c\n\nvdbeaux.o:\t$(TOP)/src/vdbeaux.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/vdbeaux.c\n\nvdbeblob.o:\t$(TOP)/src/vdbeblob.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/vdbeblob.c\n\nvdbemem.o:\t$(TOP)/src/vdbemem.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/vdbemem.c\n\nvdbesort.o:\t$(TOP)/src/vdbesort.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/vdbesort.c\n\nvdbetrace.o:\t$(TOP)/src/vdbetrace.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/vdbetrace.c\n\nvdbevtab.o:\t$(TOP)/src/vdbevtab.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/vdbevtab.c\n\nvtab.o:\t$(TOP)/src/vtab.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/vtab.c\n\nwal.o:\t$(TOP)/src/wal.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/wal.c\n\nwalker.o:\t$(TOP)/src/walker.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/walker.c\n\nwhere.o:\t$(TOP)/src/where.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/where.c\n\nwherecode.o:\t$(TOP)/src/wherecode.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/wherecode.c\n\nwhereexpr.o:\t$(TOP)/src/whereexpr.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/whereexpr.c\n\nwindow.o:\t$(TOP)/src/window.c $(DEPS_OBJ_COMMON)\n\t$(T.cc.sqlite) -c $(TOP)/src/window.c\n\ntclsqlite.o:\t$(T.tcl.env.sh) $(TOP)/src/tclsqlite.c $(DEPS_OBJ_COMMON)\n\t$(T.compile.tcl) -DUSE_TCL_STUBS=1 $$TCL_INCLUDE_SPEC \\\n\t\t-c $(TOP)/src/tclsqlite.c\n\ntclsqlite-shell.o:\t$(T.tcl.env.sh) $(TOP)/src/tclsqlite.c $(DEPS_OBJ_COMMON)\n\t$(T.compile.tcl) -DTCLSH -o $@ -c $(TOP)/src/tclsqlite.c $$TCL_INCLUDE_SPEC\n\ntclsqlite-stubs.o:\t$(T.tcl.env.sh) $(TOP)/src/tclsqlite.c $(DEPS_OBJ_COMMON)\n\t$(T.compile.tcl) -DUSE_TCL_STUBS=1 -o $@ -c $(TOP)/src/tclsqlite.c $$TCL_INCLUDE_SPEC\n\ntclsqlite3$(T.exe):\t$(T.tcl.env.sh) tclsqlite-shell.o $(libsqlite3.SO)\n\t$(T.link.tcl) -o $@ tclsqlite-shell.o \\\n\t\t$(libsqlite3.SO) $$TCL_INCLUDE_SPEC $$TCL_LIB_SPEC \\\n\t\t$(LDFLAGS.libsqlite3)\ntclsqlite3$(T.exe)-1: tclsqlite3$(T.exe)\ntclsqlite3$(T.exe)-0 tclsqlite3$(T.exe)-:\ntcl: tclsqlite3$(T.exe)-$(HAVE_TCL)\n\n# Rules to build opcodes.c and opcodes.h\n#\nopcodes.c:\topcodes.h $(TOP)/tool/mkopcodec.tcl $(B.tclsh)\n\t$(B.tclsh) $(TOP)/tool/mkopcodec.tcl opcodes.h >opcodes.c\n\nopcodes.h:\tparse.h $(TOP)/src/vdbe.c \\\n\t\t$(TOP)/tool/mkopcodeh.tcl $(B.tclsh)\n\tcat parse.h $(TOP)/src/vdbe.c | $(B.tclsh) $(TOP)/tool/mkopcodeh.tcl >opcodes.h\n\n# Rules to build parse.c and parse.h - the outputs of lemon.\n#\nparse.h:\tparse.c\n\nparse.c:\t$(TOP)/src/parse.y lemon$(B.exe)\n\tcp $(TOP)/src/parse.y .\n\t./lemon$(B.exe) $(OPT_FEATURE_FLAGS) $(OPTS) -S parse.y\n\nsqlite3rc.h:\t$(TOP)/src/sqlite3.rc $(TOP)/VERSION $(B.tclsh)\n\techo '#ifndef SQLITE_RESOURCE_VERSION' >$@\n\techo -n '#define SQLITE_RESOURCE_VERSION ' >>$@\n\tcat $(TOP)/VERSION | $(B.tclsh) $(TOP)/tool/replace.tcl exact . , >>$@\n\techo '#endif' >>sqlite3rc.h\n\nmkkeywordhash$(B.exe): $(TOP)/tool/mkkeywordhash.c\n\t$(B.cc) -o $@ $(OPT_FEATURE_FLAGS) $(OPTS) $(TOP)/tool/mkkeywordhash.c\nkeywordhash.h:\tmkkeywordhash$(B.exe)\n\t./mkkeywordhash$(B.exe) > $@\n\n#\n# sqlite3.c split into many smaller files.\n#\nsqlite3-all.c:\tsqlite3.c $(TOP)/tool/split-sqlite3c.tcl $(B.tclsh)\n\t$(B.tclsh) $(TOP)/tool/split-sqlite3c.tcl\n\n#\n# Static libsqlite3\n#\n$(libsqlite3.LIB): $(LIBOBJ)\n\t$(AR) $(AR.flags) $@ $(LIBOBJ)\n$(libsqlite3.LIB)-1: $(libsqlite3.LIB)\n$(libsqlite3.LIB)-0 $(libsqlite3.LIB)-:\nlib: $(libsqlite3.LIB)-$(ENABLE_STATIC)\nall: lib\n\n#\n# Dynamic libsqlite3\n#\n$(libsqlite3.SO):\t$(LIBOBJ)\n\t$(T.link.shared) -o $@ $(LIBOBJ) $(LDFLAGS.libsqlite3) \\\n\t\t$(LDFLAGS.libsqlite3.soname)\n$(libsqlite3.SO)-1: $(libsqlite3.SO)\n$(libsqlite3.SO)-0 $(libsqlite3.SO)-:\nso: $(libsqlite3.SO)-$(ENABLE_SHARED)\nall: so\n\n#\n# Install the $(libsqlite3.SO) as $(libsqlite3.SO).$(PACKAGE_VERSION)\n# and create symlinks which point to it:\n#\n# - libsqlite3.so.$(PACKAGE_VERSION)\n# - libsqlite3.so.0      =symlink-> libsqlite3.so.$(PACKAGE_VERSION) (see below)\n# - libsqlite3.so        =symlink-> libsqlite3.so.3\n#\n# N.B. we initially had a link named libsqlite3.so.3 but it's\n# unnecessary unless we want to set SONAME to libsqlite3.so.3, which\n# is also unnecessary.\n#\n# The link named libsqlite3.so.0 is provided in an attempt to reduce\n# downstream disruption when performing upgrades from pre-3.48 to a\n# version 3.48 or higher.  That name is considered a legacy remnant\n# and will eventually be removed from this installation process.\n#\n# Historically libtool installed the library like so:\n#\n#  libsqlite3.so     -> libsqlite3.so.0.8.6\n#  libsqlite3.so.0   -> libsqlite3.so.0.8.6\n#  libsqlite3.so.0.8.6\n#\n# The historical SQLite build always used a version number of 0.8.6\n# for reasons lost to history but having something to do with libtool\n# (which is no longer used in this tree). In order to retain filename\n# compatibility for systems which have libraries installed using those\n# conventions:\n#\n# 1) If libsqlite3.so.0.8.6 is found in the target installation\n#    directory then it is re-linked to point to the newer-style\n#    names. We cannot retain both the old and new installation because\n#    they both share the high-level name $(libsqlite3.SO). The\n#    down-side of this is that it may upset packaging tools when we\n#    replace libsqlite3.so (from a legacy package) with a new symlink.\n#\n# 2) If INSTALL_SO_086_LINK=1 and point (1) does not apply then links\n#    to the legacy-style names are created. The primary intent of this\n#    is to enable chains of operations such as the hypothetical (apt\n#    remove sqlite3-3.47.0 && apt install sqlite3-3.48.0). In such\n#    cases, condition (1) would never trigger but applications might\n#    still expect to see the legacy file names.\n#\n# In either case, libsqlite3.la, if found, is deleted because it would\n# contain stale state, refering to non-libtool-generated libraries.\n#\ninstall-so-1: $(install-dir.lib) $(libsqlite3.SO)\n\t$(INSTALL) $(libsqlite3.SO) \"$(install-dir.lib)\"\n\t@echo \"Setting up $(libsqlite3.SO) symlinks...\"; \\\n\t\tcd \"$(install-dir.lib)\" || exit $$?; \\\n\t\trm -f $(libsqlite3.SO).0 $(libsqlite3.SO).$(PACKAGE_VERSION) || exit $$?; \\\n\t\tmv $(libsqlite3.SO) $(libsqlite3.SO).$(PACKAGE_VERSION) || exit $$?; \\\n\t\tln -s $(libsqlite3.SO).$(PACKAGE_VERSION) $(libsqlite3.SO) || exit $$?; \\\n\t\tln -s $(libsqlite3.SO).$(PACKAGE_VERSION) $(libsqlite3.SO).0 || exit $$?; \\\n\t\tls -la $(libsqlite3.SO) $(libsqlite3.SO).[03]*; \\\n\t\tif [ -e $(libsqlite3.SO).0.8.6 ]; then \\\n\t\t\techo \"ACHTUNG: legacy libtool-compatible install found. Re-linking it...\"; \\\n\t\t\trm -f libsqlite3.la $(libsqlite3.SO).0.8.6 || exit $$?; \\\n\t\t\tln -s $(libsqlite3.SO).$(PACKAGE_VERSION) $(libsqlite3.SO).0.8.6 || exit $$?; \\\n\t\t\tls -la $(libsqlite3.SO).0.8.6; \\\n\t\telif [ x1 = \"x$(INSTALL_SO_086_LINK)\" ]; then \\\n\t\t\techo \"ACHTUNG: installing legacy libtool-style links because INSTALL_SO_086_LINK=1\"; \\\n\t\t\trm -f libsqlite3.la $(libsqlite3.SO).0.8.6 || exit $$?; \\\n\t\t\tln -s $(libsqlite3.SO).$(PACKAGE_VERSION) $(libsqlite3.SO).0.8.6 || exit $$?; \\\n\t\t\tls -la $(libsqlite3.SO).0.8.6; \\\n\t\tfi\ninstall-so-0 install-so-:\ninstall-so: install-so-$(ENABLE_SHARED)\ninstall: install-so\n\n#\n# Install $(libsqlite3.LIB)\n#\ninstall-lib-1: $(install-dir.lib) $(libsqlite3.LIB)\n\t$(INSTALL.noexec) $(libsqlite3.LIB) \"$(install-dir.lib)\"\ninstall-lib-0 install-lib-:\ninstall-lib: install-lib-$(ENABLE_STATIC)\ninstall: install-lib\n\n#\n# Install C header files\n#\ninstall-headers: sqlite3.h $(install-dir.include)\n\t$(INSTALL.noexec) sqlite3.h \"$(TOP)/src/sqlite3ext.h\" \"$(install-dir.include)\"\ninstall: install-headers\n\n#\n# libtclsqlite3...\n#\npkgIndex.tcl:\n\techo 'package ifneeded sqlite3 $(PACKAGE_VERSION) [list load [file join $$dir libtclsqlite3[info sharedlibextension]] sqlite3]' > $@\npkgIndex.tcl-1: pkgIndex.tcl\npkgIndex.tcl-0 pkgIndex.tcl-:\ntcl: pkgIndex.tcl-$(HAVE_TCL)\nlibtclsqlite3.SO = libtclsqlite3$(T.dll)\n$(libtclsqlite3.SO): $(T.tcl.env.sh) tclsqlite.o $(LIBOBJ)\n\t$(T.tcl.env.source); \\\n\t$(T.link.shared) -o $@ tclsqlite.o \\\n\t\t$$TCL_INCLUDE_SPEC $$TCL_STUB_LIB_SPEC $(LDFLAGS.libsqlite3) \\\n\t\t$(LIBOBJ) -Wl,-rpath,$$TCLLIBDIR\n# ^^^ that rpath bit is defined as TCL_LD_SEARCH_FLAGS in\n# tclConfig.sh, but it's defined in such a way as to be useless for a\n# _static_ makefile.\n$(libtclsqlite3.SO)-1: $(libtclsqlite3.SO)\n$(libtclsqlite3.SO)-0 $(libtclsqlite3.SO)-:\nlibtcl: $(libtclsqlite3.SO)-$(HAVE_TCL)\ntcl: libtcl\nall: tcl\n\ninstall-tcl-1: $(libtclsqlite3.SO) pkgIndex.tcl\n\t$(T.tcl.env.source); \\\n\t$(INSTALL) -d \"$(DESTDIR)$$TCLLIBDIR\"; \\\n\t$(INSTALL) $(libtclsqlite3.SO) \"$(DESTDIR)$$TCLLIBDIR\"; \\\n\t$(INSTALL.noexec) pkgIndex.tcl \"$(DESTDIR)$$TCLLIBDIR\"\ninstall-tcl-0 install-tcl-:\n\t@echo \"TCL support disabled, so not installing $(libtclsqlite3.SO)\"\ninstall-tcl: install-tcl-$(HAVE_TCL)\ninstall: install-tcl\n\ntclsqlite3.c:\tsqlite3.c\n\techo '#ifndef USE_SYSTEM_SQLITE' >tclsqlite3.c\n\tcat sqlite3.c >>tclsqlite3.c\n\techo '#endif /* USE_SYSTEM_SQLITE */' >>tclsqlite3.c\n\tcat $(TOP)/src/tclsqlite.c >>tclsqlite3.c\n\n#\n# $(CFLAGS.tclextension) = CFLAGS for the tclextension* targets.\n#\nCFLAGS.tclextension = $(CFLAGS.intree_includes) $(CFLAGS.env) $(OPT_FEATURE_FLAGS) $(OPTS)\n#\n# Build the SQLite TCL extension in a way that make it compatible\n# with whatever version of TCL is running as $TCLSH_CMD, possibly defined\n# by --with-tclsh=\n#\ntclextension: tclsqlite3.c\n\t$(TCLSH_CMD) $(TOP)/tool/buildtclext.tcl --build-only --cc \"$(T.cc)\" $(CFLAGS.tclextension)\n\n#\n# Install the SQLite TCL extension in a way that is appropriate for $TCLSH_CMD\n# to find it.\n#\ntclextension-install: tclsqlite3.c\n\t$(TCLSH_CMD) $(TOP)/tool/buildtclext.tcl --destdir \"$(DESTDIR)\" --cc \"$(T.cc)\" $(CFLAGS.tclextension)\n\n#\n# Uninstall the SQLite TCL extension that is used by $TCLSH_CMD.\n#\ntclextension-uninstall:\n\t$(TCLSH_CMD) $(TOP)/tool/buildtclext.tcl --uninstall\n\n#\n# List all installed the SQLite TCL extensions that is are accessible\n# by $TCLSH_CMD, including prior versions.\n#\ntclextension-list:\n\t@ $(TCLSH_CMD) $(TOP)/tool/buildtclext.tcl --info\n\n# Verify that the SQLite TCL extension that is loaded by default\n# in $(TCLSH_CMD) is the same as the version of SQLite for the\n# current source tree\n#\ntclextension-verify: sqlite3.h\n\t@ $(TCLSH_CMD) $(TOP)/tool/buildtclext.tcl --version-check\n\n#\n# FTS5 things\n#\nFTS5_SRC = \\\n   $(TOP)/ext/fts5/fts5.h \\\n   $(TOP)/ext/fts5/fts5Int.h \\\n   $(TOP)/ext/fts5/fts5_aux.c \\\n   $(TOP)/ext/fts5/fts5_buffer.c \\\n   $(TOP)/ext/fts5/fts5_main.c \\\n   $(TOP)/ext/fts5/fts5_config.c \\\n   $(TOP)/ext/fts5/fts5_expr.c \\\n   $(TOP)/ext/fts5/fts5_hash.c \\\n   $(TOP)/ext/fts5/fts5_index.c \\\n   fts5parse.c fts5parse.h \\\n   $(TOP)/ext/fts5/fts5_storage.c \\\n   $(TOP)/ext/fts5/fts5_tokenize.c \\\n   $(TOP)/ext/fts5/fts5_unicode2.c \\\n   $(TOP)/ext/fts5/fts5_varint.c \\\n   $(TOP)/ext/fts5/fts5_vocab.c  \\\n\nfts5parse.c:\t$(TOP)/ext/fts5/fts5parse.y lemon$(B.exe)\n\tcp $(TOP)/ext/fts5/fts5parse.y .\n\trm -f fts5parse.h\n\t./lemon$(B.exe) $(OPTS) -S fts5parse.y\n\nfts5parse.h: fts5parse.c\n\nfts5.c: $(FTS5_SRC) $(B.tclsh)\n\t$(B.tclsh) $(TOP)/ext/fts5/tool/mkfts5c.tcl\n\tcp $(TOP)/ext/fts5/fts5.h .\n\nfts5.o:\tfts5.c $(DEPS_OBJ_COMMON) $(EXTHDR)\n\t$(T.cc.extension) -c fts5.c\n\nsqlite3rbu.o:\t$(TOP)/ext/rbu/sqlite3rbu.c $(DEPS_OBJ_COMMON) $(EXTHDR)\n\t$(T.cc.extension) -c $(TOP)/ext/rbu/sqlite3rbu.c\n\n\n#\n# Rules to build the 'testfixture' application.\n#\n# If using the amalgamation, use sqlite3.c directly to build the test\n# fixture.  Otherwise link against libsqlite3.a.  (This distinction is\n# necessary because the test fixture requires non-API symbols which are\n# hidden when the library is built via the amalgamation).\n#\nTESTFIXTURE_FLAGS  = -DSQLITE_TEST=1 -DSQLITE_CRASH_TEST=1\nTESTFIXTURE_FLAGS += -DTCLSH_INIT_PROC=sqlite3TestInit\nTESTFIXTURE_FLAGS += -DSQLITE_SERVER=1 -DSQLITE_PRIVATE=\"\" -DSQLITE_CORE\nTESTFIXTURE_FLAGS += -DBUILD_sqlite\nTESTFIXTURE_FLAGS += -DSQLITE_SERIES_CONSTRAINT_VERIFY=1\nTESTFIXTURE_FLAGS += -DSQLITE_DEFAULT_PAGE_SIZE=1024\nTESTFIXTURE_FLAGS += -DSQLITE_ENABLE_STMTVTAB\nTESTFIXTURE_FLAGS += -DSQLITE_ENABLE_DBPAGE_VTAB\nTESTFIXTURE_FLAGS += -DSQLITE_ENABLE_BYTECODE_VTAB\nTESTFIXTURE_FLAGS += -DSQLITE_CKSUMVFS_STATIC\nTESTFIXTURE_FLAGS += -DSQLITE_STATIC_RANDOMJSON\nTESTFIXTURE_FLAGS += -DSQLITE_STRICT_SUBTYPE=1\n\nTESTFIXTURE_SRC0 = $(TESTSRC2) $(libsqlite3.LIB)\nTESTFIXTURE_SRC1 = sqlite3.c\nTESTFIXTURE_SRC = $(TESTSRC) $(TOP)/src/tclsqlite.c\nTESTFIXTURE_SRC += $(TESTFIXTURE_SRC$(USE_AMALGAMATION))\n\ntestfixture$(T.exe):\t$(T.tcl.env.sh) has_tclsh85 $(TESTFIXTURE_SRC)\n\t$(T.link.tcl) -DSQLITE_NO_SYNC=1 $(TESTFIXTURE_FLAGS) \\\n\t\t-o $@ $(TESTFIXTURE_SRC) \\\n\t\t$$TCL_LIB_SPEC $$TCL_INCLUDE_SPEC \\\n\t\t$(LDFLAGS.libsqlite3)\n\ncoretestprogs:\ttestfixture$(B.exe) sqlite3$(B.exe)\n\ntestprogs:\t$(TESTPROGS) srcck1$(B.exe) fuzzcheck$(T.exe) sessionfuzz$(T.exe)\n\n# A very detailed test running most or all test cases\nfulltest:\talltest fuzztest\n\n# Run most or all tcl test cases\nalltest:\t$(TESTPROGS)\n\t./testfixture$(T.exe) $(TOP)/test/all.test $(TESTOPTS)\n\n# Really really long testing\nsoaktest:\t$(TESTPROGS)\n\t./testfixture$(T.exe) $(TOP)/test/all.test -soak=1 $(TESTOPTS)\n\n# Do extra testing but not everything.\nfulltestonly:\t$(TESTPROGS) fuzztest\n\t./testfixture$(T.exe) $(TOP)/test/full.test\n\n#\n# Fuzz testing\n#\n# WARNING: When the \"fuzztest\" target is run by the testrunner.tcl script,\n# it does not actually run this code. Instead, it schedules equivalent\n# commands. Therefore, if this target is updated, then code in\n# testrunner_data.tcl (search for \"trd_fuzztest_data\") must also be updated.\n#\nfuzztest:\tfuzzcheck$(T.exe) $(FUZZDATA) sessionfuzz$(T.exe)\n\t./fuzzcheck$(T.exe) $(FUZZDATA)\n\t./sessionfuzz$(T.exe) run $(TOP)/test/sessionfuzz-data1.db\n\nvalgrindfuzz:\tfuzzcheck$(TEXT) $(FUZZDATA) sessionfuzz$(T.exe)\n\tvalgrind ./fuzzcheck$(T.exe) --cell-size-check --limit-mem 10M $(FUZZDATA)\n\tvalgrind ./sessionfuzz$(T.exe) run $(TOP)/test/sessionfuzz-data1.db\n\n#\n# The veryquick.test TCL tests.\n#\ntcltest:\t./testfixture$(T.exe)\n\t./testfixture$(T.exe) $(TOP)/test/veryquick.test $(TESTOPTS)\n\n#\n# Runs all the same tests cases as the \"tcltest\" target but uses\n# the testrunner.tcl script to run them in multiple cores\n# concurrently.\ntestrunner:\ttestfixture$(T.exe)\n\t./testfixture$(T.exe) $(TOP)/test/testrunner.tcl\n\n#\n# This is the testing target preferred by the core SQLite developers.\n# It runs tests under a standard configuration, regardless of how\n# ./configure was run.  The devs run \"make devtest\" prior to each\n# check-in, at a minimum.  Probably other tests too, but at least this\n# one.\n#\ndevtest:\tsrctree-check sourcetest\n\t$(TCLSH_CMD) $(TOP)/test/testrunner.tcl mdevtest $(TSTRNNR_OPTS)\n\nmdevtest: srctree-check has_tclsh85\n\t$(TCLSH_CMD) $(TOP)/test/testrunner.tcl mdevtest $(TSTRNNR_OPTS)\n\nsdevtest: has_tclsh85\n\t$(TCLSH_CMD) $(TOP)/test/testrunner.tcl sdevtest $(TSTRNNR_OPTS)\n\n#\n# Validate that various generated files in the source tree\n# are up-to-date.\n#\nsrctree-check:\t$(TOP)/tool/srctree-check.tcl\n\t$(TCLSH_CMD) $(TOP)/tool/srctree-check.tcl\n\n#\n# Testing for a release\n#\nreleasetest: srctree-check has_tclsh85 verify-source\n\t$(TCLSH_CMD) $(TOP)/test/testrunner.tcl release $(TSTRNNR_OPTS)\n\n#\n# Minimal testing that runs in less than 3 minutes\n#\nquicktest:\t./testfixture$(T.exe)\n\t./testfixture$(T.exe) $(TOP)/test/extraquick.test $(TESTOPTS)\n\n#\n# Try to run tests on whatever options are specified by the\n# ./configure.  The developers seldom use this target.  Instead\n# they use \"make devtest\" which runs tests on a standard set of\n# options regardless of how SQLite is configured.  This \"test\"\n# target is provided for legacy only.\n#\ntest:\tsrctree-check fuzztest sourcetest $(TESTPROGS) tcltest\n\n#\n# Run a test using valgrind.  This can take a really long time\n# because valgrind is so much slower than a native machine.\n#\nvalgrindtest:\t$(TESTPROGS) valgrindfuzz\n\tOMIT_MISUSE=1 valgrind -v ./testfixture$(T.exe) $(TOP)/test/permutations.test valgrind $(TESTOPTS)\n\n#\n# A very fast test that checks basic sanity.  The name comes from\n# the 60s-era electronics testing:  \"Turn it on and see if smoke\n# comes out.\"\n#\nsmoketest:\t$(TESTPROGS) fuzzcheck$(T.exe)\n\t./testfixture$(T.exe) $(TOP)/test/main.test $(TESTOPTS)\n\nshelltest:\n\t$(TCLSH_CMD) $(TOP)/test/testrunner.tcl release shell\n\n#\n# sqlite3_analyzer.c build depends on $(LINK_TOOLS_DYNAMICALLY).\n#\nsqlite3_analyzer.c.flags.0 = -DINCLUDE_SQLITE3_C=1\nsqlite3_analyzer.c.flags.1 =\nsqlite3_analyzer.c: sqlite3.c $(TOP)/src/tclsqlite.c $(TOP)/tool/spaceanal.tcl \\\n                    $(TOP)/tool/mkccode.tcl $(TOP)/tool/sqlite3_analyzer.c.in\n\t$(B.tclsh) $(TOP)/tool/mkccode.tcl $(TOP)/tool/sqlite3_analyzer.c.in \\\n\t\t$(sqlite3_analyzer.c.flags.$(LINK_TOOLS_DYNAMICALLY)) \\\n\t\t$(OPT_FEATURE_FLAGS) \\\n\t\t> $@\n\n#\n# sqlite3_analyzer's build mode depends on $(LINK_TOOLS_DYNAMICALLY).\n#\nsqlite3_analyzer.flags.1 = -L. -lsqlite3\nsqlite3_analyzer.flags.0 = $(LDFLAGS.libsqlite3)\nsqlite3_analyzer.deps.1 = $(libsqlite3.SO)\nsqlite3_analyzer.deps.0 =\nsqlite3_analyzer$(T.exe): $(T.tcl.env.sh) sqlite3_analyzer.c \\\n                          $(sqlite3_analyzer.deps.$(LINK_TOOLS_DYNAMICALLY))\n\t$(T.link.tcl) sqlite3_analyzer.c -o $@ \\\n\t\t$(sqlite3_analyzer.flags.$(LINK_TOOLS_DYNAMICALLY)) \\\n\t\t$$TCL_LIB_SPEC $$TCL_INCLUDE_SPEC $$TCL_LIBS\n# ^^^^ the order of those flags is relevant for\n# $(sqlite3_analyzer.flags.1): if the $$TCL_... flags come first they\n# can cause the $@ to link to an out-of-tree libsqlite3.so, which may\n# or may not fail or otherwise cause confusion.\n\nsqltclsh.c: sqlite3.c $(TOP)/src/tclsqlite.c $(TOP)/tool/sqltclsh.tcl \\\n            $(TOP)/ext/misc/appendvfs.c $(TOP)/tool/mkccode.tcl \\\n            $(TOP)/tool/sqltclsh.c.in\n\t$(B.tclsh) $(TOP)/tool/mkccode.tcl $(TOP)/tool/sqltclsh.c.in >sqltclsh.c\n\nsqltclsh$(T.exe): $(T.tcl.env.sh) sqltclsh.c\n\t$(T.link.tcl) sqltclsh.c -o $@ $$TCL_INCLUDE_SPEC \\\n\t\t$(LDFLAGS.libsqlite3) $$TCL_LIB_SPEC $$TCL_LIBS\n# xbin: target for generic binaries which aren't usually built. It is\n# used primarily for testing the build process.\nxbin: sqltclsh$(T.exe) sqlite3_analyzer$(T.exe)\n\nsqlite3_expert$(T.exe): $(TOP)/ext/expert/sqlite3expert.h $(TOP)/ext/expert/sqlite3expert.c \\\n                       $(TOP)/ext/expert/expert.c sqlite3.c\n\t$(T.link) $(TOP)/ext/expert/sqlite3expert.h $(TOP)/ext/expert/sqlite3expert.c \\\n\t\t$(TOP)/ext/expert/expert.c sqlite3.c -o sqlite3_expert $(LDFLAGS.libsqlite3)\nxbin: sqlite3_expert$(T.exe)\n\nCHECKER_DEPS =\\\n  $(TOP)/tool/mkccode.tcl \\\n  sqlite3.c \\\n  $(TOP)/src/tclsqlite.c \\\n  $(TOP)/ext/repair/sqlite3_checker.tcl \\\n  $(TOP)/ext/repair/checkindex.c \\\n  $(TOP)/ext/repair/checkfreelist.c \\\n  $(TOP)/ext/misc/btreeinfo.c \\\n  $(TOP)/ext/repair/sqlite3_checker.c.in\n\nsqlite3_checker.c:\t$(CHECKER_DEPS)\n\t$(B.tclsh) $(TOP)/tool/mkccode.tcl $(TOP)/ext/repair/sqlite3_checker.c.in >$@\n\nsqlite3_checker$(T.exe):\t$(T.tcl.env.sh) sqlite3_checker.c\n\t$(T.link.tcl) sqlite3_checker.c -o $@ $$TCL_INCLUDE_SPEC \\\n\t\t$$TCL_LIB_SPEC $(LDFLAGS.libsqlite3)\nxbin: sqlite3_checker$(T.exe)\n\ndbdump$(T.exe): $(TOP)/ext/misc/dbdump.c sqlite3.o\n\t$(T.link) -DDBDUMP_STANDALONE -o $@ \\\n\t\t$(TOP)/ext/misc/dbdump.c sqlite3.o $(LDFLAGS.libsqlite3)\nxbin: dbdump$(T.exe)\n\ndbtotxt$(T.exe): $(TOP)/tool/dbtotxt.c\n\t$(T.link)-o $@ $(TOP)/tool/dbtotxt.c $(LDFLAGS.configure)\nxbin: dbtotxt$(T.exe)\n\nshowdb$(T.exe):\t$(TOP)/tool/showdb.c sqlite3.o\n\t$(T.link) -o $@ $(TOP)/tool/showdb.c sqlite3.o $(LDFLAGS.libsqlite3)\nxbin: showdb$(T.exe)\n\nshowstat4$(T.exe):\t$(TOP)/tool/showstat4.c sqlite3.o\n\t$(T.link) -o $@ $(TOP)/tool/showstat4.c sqlite3.o $(LDFLAGS.libsqlite3)\nxbin: showstat4$(T.exe)\n\nshowjournal$(T.exe):\t$(TOP)/tool/showjournal.c sqlite3.o\n\t$(T.link) -o $@ $(TOP)/tool/showjournal.c sqlite3.o $(LDFLAGS.libsqlite3)\nxbin: showjournal$(T.exe)\n\nshowwal$(T.exe):\t$(TOP)/tool/showwal.c sqlite3.o\n\t$(T.link) -o $@ $(TOP)/tool/showwal.c sqlite3.o $(LDFLAGS.libsqlite3)\nxbin: showwal$(T.exe)\n\nshowshm$(T.exe):\t$(TOP)/tool/showshm.c\n\t$(T.link) -o $@ $(TOP)/tool/showshm.c $(LDFLAGS.configure)\nxbin: showshm$(T.exe)\n\nindex_usage$(T.exe): $(TOP)/tool/index_usage.c sqlite3.o\n\t$(T.link) $(SHELL_OPT) -o $@ $(TOP)/tool/index_usage.c sqlite3.o \\\n\t\t$(LDFLAGS.libsqlite3)\nxbin: index_usage$(T.exe)\n\n# Reminder: changeset does not build without -DSQLITE_ENABLE_SESSION\nchangeset$(T.exe):\t$(TOP)/ext/session/changeset.c sqlite3.o\n\t$(T.link) -o $@ $(TOP)/ext/session/changeset.c sqlite3.o \\\n\t\t$(LDFLAGS.libsqlite3)\nxbin: changeset$(T.exe)\n\nchangesetfuzz$(T.exe):\t$(TOP)/ext/session/changesetfuzz.c sqlite3.o\n\t$(T.link) -o $@ $(TOP)/ext/session/changesetfuzz.c sqlite3.o \\\n\t\t$(LDFLAGS.libsqlite3)\nxbin: changesetfuzz$(T.exe)\n\nrollback-test$(T.exe):\t$(TOP)/tool/rollback-test.c sqlite3.o\n\t$(T.link) -o $@ $(TOP)/tool/rollback-test.c sqlite3.o $(LDFLAGS.libsqlite3)\nxbin: rollback-test$(T.exe)\n\natrc$(T.exe): $(TOP)/test/atrc.c sqlite3.o\n\t$(T.link) -o $@ $(TOP)/test/atrc.c sqlite3.o $(LDFLAGS.libsqlite3)\nxbin: atrc$(T.exe)\n\nLogEst$(T.exe):\t$(TOP)/tool/logest.c sqlite3.h\n\t$(T.link) -I. -o $@ $(TOP)/tool/logest.c $(LDFLAGS.configure)\nxbin: LogEst$(T.exe)\n\nwordcount$(T.exe):\t$(TOP)/test/wordcount.c sqlite3.o\n\t$(T.link) -o $@ $(TOP)/test/wordcount.c sqlite3.o $(LDFLAGS.libsqlite3)\nxbin: wordcount$(T.exe)\n\nspeedtest1$(T.exe):\t$(TOP)/test/speedtest1.c sqlite3.c Makefile\n\t$(T.link) $(ST_OPT) -o $@ $(TOP)/test/speedtest1.c sqlite3.c \\\n\t\t$(LDFLAGS.libsqlite3)\nxbin: speedtest1$(T.exe)\n\nstartup$(T.exe):\t$(TOP)/test/startup.c sqlite3.c\n\t$(T.link) -Os -g -USQLITE_THREADSAFE -DSQLITE_THREADSAFE=0 \\\n\t\t-o $@ $(TOP)/test/startup.c sqlite3.c $(LDFLAGS.libsqlite3)\nxbin: startup$(T.exe)\n\nKV_OPT += -DSQLITE_DIRECT_OVERFLOW_READ\n\nkvtest$(T.exe):\t$(TOP)/test/kvtest.c sqlite3.c\n\t$(T.link) $(KV_OPT) -o $@ $(TOP)/test/kvtest.c sqlite3.c \\\n\t\t$(LDFLAGS.libsqlite3)\nxbin: kvtest$(T.exe)\n\n#\n# rbu$(T.exe) requires building with -DSQLITE_ENABLE_RBU, which\n# specifically does not have an --enable-rbu flag in the configure\n# script.\nrbu$(T.exe): $(TOP)/ext/rbu/rbu.c $(TOP)/ext/rbu/sqlite3rbu.c sqlite3.o\n\t$(T.link) -I. -o $@ $(TOP)/ext/rbu/rbu.c sqlite3.o $(LDFLAGS.libsqlite3)\n\nloadfts$(T.exe): $(TOP)/tool/loadfts.c $(libsqlite3.LIB)\n\t$(T.link) $(TOP)/tool/loadfts.c $(libsqlite3.LIB) \\\n\t\t-o $@ $(LDFLAGS.libsqlite3)\nxbin: loadfts$(T.exe)\n\n# This target will fail if the SQLite amalgamation contains any exported\n# symbols that do not begin with \"sqlite3_\". It is run as part of the\n# releasetest.tcl script.\n#\nVALIDIDS=' sqlite3(changeset|changegroup|session|rebaser)?_'\nchecksymbols: sqlite3.o\n\tnm -g --defined-only sqlite3.o\n\tnm -g --defined-only sqlite3.o | egrep -v $(VALIDIDS); test $$? -ne 0\n\techo '0 errors out of 1 tests'\n\n# Build the amalgamation-autoconf package.  The amalamgation-tarball target builds\n# a tarball named for the version number.  Ex:  sqlite-autoconf-3110000.tar.gz.\n# The snapshot-tarball target builds a tarball named by the SHA3 hash\n#\namalgamation-tarball: sqlite3.c sqlite3rc.h\n\tTOP=$(TOP) sh $(TOP)/tool/mkautoconfamal.sh --normal\n\nsnapshot-tarball: sqlite3.c sqlite3rc.h\n\tTOP=$(TOP) sh $(TOP)/tool/mkautoconfamal.sh --snapshot\n\n# Build a ZIP archive snapshot of the latest check-in.\n#\nsqlite-src.zip:\t$(TOP)/tool/mksrczip.tcl\n\t$(TCLSH_CMD) $(TOP)/tool/mksrczip.tcl\n\n# Build a ZIP archive of the amaglamation\n#\nsqlite-amalgamation.zip:\t$(TOP)/tool/mkamalzip.tcl sqlite3.c sqlite3.h shell.c sqlite3ext.h\n\t$(TCLSH_CMD) $(TOP)/tool/mkamalzip.tcl\n\n# Build all the source code deliverables\n#\nsrc-archives: sqlite-amalgamation.zip amalgamation-tarball sqlite-src.zip\n\tls -ltr *.zip *.tar.gz | tail -3\n\n# Build a ZIP archive containing various command-line tools.\n#\ntool-zip:\ttestfixture$(T.exe) sqlite3$(T.exe) sqldiff$(T.exe) \\\n            sqlite3_analyzer$(T.exe) sqlite3_rsync$(T.exe) $(TOP)/tool/mktoolzip.tcl\n\tstrip sqlite3$(T.exe) sqldiff$(T.exe) sqlite3_analyzer$(T.exe) sqlite3_rsync$(T.exe)\n\t./testfixture$(T.exe) $(TOP)/tool/mktoolzip.tcl\nclean-tool-zip:\n\trm -f sqlite-tools-*.zip\nclean: clean-tool-zip\n\n#\n# The next few rules are used to support the \"threadtest\" target. Building\n# threadtest runs a few thread-safety tests that are implemented in C. This\n# target is invoked by the releasetest.tcl script.\n#\nTHREADTEST3_SRC = $(TOP)/test/threadtest3.c    \\\n                  $(TOP)/test/tt3_checkpoint.c \\\n                  $(TOP)/test/tt3_index.c      \\\n                  $(TOP)/test/tt3_vacuum.c      \\\n                  $(TOP)/test/tt3_stress.c      \\\n                  $(TOP)/test/tt3_lookaside1.c\n\nthreadtest3$(T.exe): sqlite3.o $(THREADTEST3_SRC)\n\t$(T.link) $(TOP)/test/threadtest3.c $(TOP)/src/test_multiplex.c sqlite3.o \\\n\t\t-o $@ $(LDFLAGS.libsqlite3)\nxbin: threadtest3$(T.exe)\n\nthreadtest: threadtest3$(T.exe)\n\t./threadtest3$(T.exe)\n\nthreadtest5: sqlite3.c $(TOP)/test/threadtest5.c\n\t$(T.link) $(TOP)/test/threadtest5.c sqlite3.c -o $@ $(LDFLAGS.libsqlite3)\nxbin: threadtest5\n\n#\n# When building sqlite3$(T.exe) we specifically embed a copy of\n# sqlite3.c, and not link to libsqlite3.so or libsqlite3.a, because\n# the shell needs to be able to enable arbitrary library features,\n# some of which have significant performance impacts. For example,,\n# SQLITE_ENABLE_EXPLAIN_COMMENTS has been measured as having a 5.2%\n# runtime performance hit, which is fine for use in the shell but is\n# not appropriate for the canonical library build.\n#\nsqlite3$(T.exe):\tshell.c sqlite3.c\n\t$(T.link) -o $@ \\\n\t\tshell.c sqlite3.c \\\n\t\t$(CFLAGS.readline) $(SHELL_OPT) $(CFLAGS.icu) \\\n\t\t$(LDFLAGS.libsqlite3) $(LDFLAGS.readline)\n#\n# Build sqlite3$(T.exe) by default except in wasi-sdk builds.  Yes, the\n# semantics of 0 and 1 are confusingly swapped here.\n#\nsqlite3$(T.exe)-1:\nsqlite3$(T.exe)-0: sqlite3$(T.exe)\nall: sqlite3$(T.exe)-$(HAVE_WASI_SDK)\n\n# The \"sqlite3d\" CLI is build using separate source files.  This\n# is useful during development and debugging.\n#\nsqlite3d$(T.exe):\tshell.c $(LIBOBJS0)\n\t$(T.link) -o $@ \\\n\t\tshell.c $(LIBOBJS0) \\\n\t\t$(CFLAGS.readline) $(SHELL_OPT) \\\n\t\t$(LDFLAGS.libsqlite3) $(LDFLAGS.readline)\n\ninstall-shell-0: sqlite3$(T.exe) $(install-dir.bin)\n\t$(INSTALL) -s sqlite3$(T.exe) \"$(install-dir.bin)\"\ninstall-shell-1:\ninstall: install-shell-$(HAVE_WASI_SDK)\n\n# How to build sqldiff$(T.exe) depends on $(LINK_TOOLS_DYNAMICALLY)\n#\nsqldiff.0.deps = $(TOP)/tool/sqldiff.c $(TOP)/ext/misc/sqlite3_stdio.h sqlite3.o sqlite3.h\nsqldiff.0.rules = $(T.link) -o $@ $(TOP)/tool/sqldiff.c sqlite3.o $(LDFLAGS.libsqlite3)\nsqldiff.1.deps = $(TOP)/tool/sqldiff.c $(TOP)/ext/misc/sqlite3_stdio.h $(libsqlite3.SO)\nsqldiff.1.rules = $(T.link) -o $@ $(TOP)/tool/sqldiff.c -L. -lsqlite3 $(LDFLAGS.configure)\nsqldiff$(T.exe): $(sqldiff.$(LINK_TOOLS_DYNAMICALLY).deps)\n\t$(sqldiff.$(LINK_TOOLS_DYNAMICALLY).rules)\n\ninstall-diff: sqldiff$(T.exe) $(install-dir.bin)\n\t$(INSTALL) -s sqldiff$(T.exe) \"$(install-dir.bin)\"\n#install: install-diff\n\ndbhash$(T.exe):\t$(TOP)/tool/dbhash.c sqlite3.o sqlite3.h\n\t$(T.link) -o $@ $(TOP)/tool/dbhash.c sqlite3.o $(LDFLAGS.libsqlite3)\nxbin: dbhash$(T.exe)\n\nRSYNC_SRC = \\\n  $(TOP)/tool/sqlite3_rsync.c \\\n  sqlite3.c\n\nRSYNC_OPT = \\\n  -DSQLITE_ENABLE_DBPAGE_VTAB \\\n  -USQLITE_THREADSAFE \\\n  -DSQLITE_THREADSAFE=0 \\\n  -DSQLITE_OMIT_LOAD_EXTENSION \\\n  -DSQLITE_OMIT_DEPRECATED\n\nsqlite3_rsync$(T.exe):\t$(RSYNC_SRC)\n\t$(T.cc.sqlite) -o $@ $(RSYNC_OPT) $(RSYNC_SRC) $(LDFLAGS.libsqlite3)\nxbin: sqlite3_rsync$(T.exe)\n\ninstall-rsync: sqlite3_rsync$(T.exe) $(install-dir.bin)\n\t$(INSTALL) sqlite3_rsync$(T.exe) \"$(install-dir.bin)\"\n#install: install-rsync\n\ninstall-man1: $(install-dir.man1)\n\t$(INSTALL.noexec) \"$(TOP)/sqlite3.1\" \"$(install-dir.man1)\"\ninstall: install-man1\n\n#\n# sqlite3.pc is typically generated by the configure script but could\n# conceivably be generated by hand.\ninstall-pc: sqlite3.pc $(install-dir.pkgconfig)\n\t$(INSTALL.noexec) sqlite3.pc \"$(install-dir.pkgconfig)\"\n\nscrub$(T.exe):\t$(TOP)/ext/misc/scrub.c sqlite3.o\n\t$(T.link) -o $@ -I. -DSCRUB_STANDALONE \\\n\t\t$(TOP)/ext/misc/scrub.c sqlite3.o $(LDFLAGS.libsqlite3)\nxbin: scrub$(T.exe)\n\nsrcck1$(B.exe):\t$(TOP)/tool/srcck1.c\n\t$(B.cc) -o srcck1$(B.exe) $(TOP)/tool/srcck1.c\nxbin: srcck1$(B.exe)\n\nsourcetest:\tsrcck1$(B.exe) sqlite3.c\n\t./srcck1$(B.exe) sqlite3.c\n\nsrc-verify$(B.exe):\t$(TOP)/tool/src-verify.c\n\t$(B.cc) -o src-verify$(B.exe) $(TOP)/tool/src-verify.c\nxbin: src-verify$(B.exe)\n\nverify-source:\t./src-verify$(B.exe)\n\t./src-verify$(B.exe) $(TOP)\n\nfuzzershell$(T.exe):\t$(TOP)/tool/fuzzershell.c sqlite3.c sqlite3.h\n\t$(T.link) -o $@ $(FUZZERSHELL_OPT) \\\n\t\t$(TOP)/tool/fuzzershell.c sqlite3.c $(LDFLAGS.libsqlite3)\nfuzzy: fuzzershell$(T.exe)\nxbin: fuzzershell$(T.exe)\n\nfuzzcheck$(T.exe):\t$(FUZZCHECK_SRC) sqlite3.c sqlite3.h $(FUZZCHECK_DEP)\n\t$(T.link) -o $@ $(FUZZCHECK_OPT) $(FUZZCHECK_SRC) sqlite3.c $(LDFLAGS.libsqlite3)\nfuzzy: fuzzcheck$(T.exe)\nxbin: fuzzcheck$(T.exe)\n\nfuzzcheck-asan$(T.exe):\t$(FUZZCHECK_SRC) sqlite3.c sqlite3.h $(FUZZCHECK_DEP)\n\t$(T.link) -o $@ -fsanitize=address $(FUZZCHECK_OPT) $(FUZZCHECK_SRC) \\\n\t\tsqlite3.c $(LDFLAGS.libsqlite3)\nfuzzy: fuzzcheck-asan$(T.exe)\nxbin: fuzzcheck-asan$(T.exe)\n\nfuzzcheck-ubsan$(T.exe):\t$(FUZZCHECK_SRC) sqlite3.c sqlite3.h $(FUZZCHECK_DEP)\n\t$(T.link) -o $@ -fsanitize=undefined $(FUZZCHECK_OPT) $(FUZZCHECK_SRC) \\\n\t\tsqlite3.c $(LDFLAGS.libsqlite3)\nfuzzy: fuzzcheck-ubsan$(T.exe)\nxbin: fuzzcheck-ubsan$(T.exe)\n\n# Usage:    FUZZDB=filename make run-fuzzcheck\n#\n# Where filename is a fuzzcheck database, this target builds and runs\n# fuzzcheck, fuzzcheck-asan, and fuzzcheck-ubsan on that database.\n#\n# FUZZDB can be a glob pattern of two or more databases. Example:\n#\n#     FUZZDB=test/fuzzdata*.db make run-fuzzcheck\n#\nrun-fuzzcheck:\tfuzzcheck$(T.exe) fuzzcheck-asan$(T.exe) fuzzcheck-ubsan$(T.exe)\n\t@if test \"$(FUZZDB)\" = \"\"; then echo 'ERROR: No FUZZDB specified. Rerun with FUZZDB=filename'; exit 1; fi\n\t./fuzzcheck$(T.exe) --spinner $(FUZZDB)\n\t./fuzzcheck-asan$(T.exe) --spinner $(FUZZDB)\n\t./fuzzcheck-ubsan$(T.exe) --spinner $(FUZZDB)\n\nossshell$(T.exe):\t$(TOP)/test/ossfuzz.c $(TOP)/test/ossshell.c sqlite3.c sqlite3.h\n\t$(T.link) -o $@ $(FUZZCHECK_OPT) $(TOP)/test/ossshell.c \\\n\t\t$(TOP)/test/ossfuzz.c sqlite3.c $(LDFLAGS.libsqlite3)\nfuzzy: ossshell$(T.exe)\nxbin: ossshell$(T.exe)\n\nsessionfuzz$(T.exe):\t$(TOP)/test/sessionfuzz.c sqlite3.c sqlite3.h\n\t$(T.link) -o $@ $(TOP)/test/sessionfuzz.c $(LDFLAGS.libsqlite3)\nfuzzy: sessionfuzz$(T.exe)\n\ndbfuzz$(T.exe):\t$(TOP)/test/dbfuzz.c sqlite3.c sqlite3.h\n\t$(T.link) -o $@ $(DBFUZZ_OPT) $(TOP)/test/dbfuzz.c sqlite3.c \\\n\t\t$(LDFLAGS.libsqlite3)\nfuzzy: dbfuzz$(T.exe)\nxbin: dbfuzz$(T.exe)\n\nDBFUZZ2_OPTS = \\\n  -USQLITE_THREADSAFE \\\n  -DSQLITE_THREADSAFE=0 \\\n  -DSQLITE_OMIT_LOAD_EXTENSION \\\n  -DSQLITE_DEBUG \\\n  -DSQLITE_ENABLE_DBSTAT_VTAB \\\n  -DSQLITE_ENABLE_BYTECODE_VTAB \\\n  -DSQLITE_ENABLE_RTREE \\\n  -DSQLITE_ENABLE_FTS4 \\\n  -DSQLITE_ENABLE_FTS5\n\ndbfuzz2$(T.exe):\t$(TOP)/test/dbfuzz2.c sqlite3.c sqlite3.h\n\t$(T.cc) -I. -g -O0 \\\n\t\t-DSTANDALONE -o dbfuzz2 \\\n\t\t$(DBFUZZ2_OPTS) $(TOP)/test/dbfuzz2.c sqlite3.c $(LDFLAGS.libsqlite3)\n\tmkdir -p dbfuzz2-dir\n\tcp $(TOP)/test/dbfuzz2-seed* dbfuzz2-dir\nfuzzy: dbfuzz2$(T.exe)\nxbin: dbfuzz2$(T.exe)\n\nmptester$(T.exe):\t$(libsqlite3.LIB) $(TOP)/mptest/mptest.c\n\t$(T.link) -o $@ -I. $(TOP)/mptest/mptest.c $(libsqlite3.LIB) \\\n\t\t$(LDFLAGS.libsqlite3)\nxbin: mptester$(T.exe)\n\nMPTEST1=./mptester$(T.exe) mptest.db $(TOP)/mptest/crash01.test --repeat 20\nMPTEST2=./mptester$(T.exe) mptest.db $(TOP)/mptest/multiwrite01.test --repeat 20\nmptest:\tmptester$(T.exe)\n\trm -f mptest.db\n\t$(MPTEST1) --journalmode DELETE\n\t$(MPTEST2) --journalmode WAL\n\t$(MPTEST1) --journalmode WAL\n\t$(MPTEST2) --journalmode PERSIST\n\t$(MPTEST1) --journalmode PERSIST\n\t$(MPTEST2) --journalmode TRUNCATE\n\t$(MPTEST1) --journalmode TRUNCATE\n\t$(MPTEST2) --journalmode DELETE\n\n# Source and header files that shell.c depends on\nSHELL_DEP = \\\n    $(TOP)/src/shell.c.in \\\n    $(TOP)/ext/expert/sqlite3expert.c \\\n    $(TOP)/ext/expert/sqlite3expert.h \\\n    $(TOP)/ext/intck/sqlite3intck.c \\\n    $(TOP)/ext/intck/sqlite3intck.h \\\n    $(TOP)/ext/misc/appendvfs.c \\\n    $(TOP)/ext/misc/base64.c \\\n    $(TOP)/ext/misc/base85.c \\\n    $(TOP)/ext/misc/completion.c \\\n    $(TOP)/ext/misc/decimal.c \\\n    $(TOP)/ext/misc/fileio.c \\\n    $(TOP)/ext/misc/ieee754.c \\\n    $(TOP)/ext/misc/memtrace.c \\\n    $(TOP)/ext/misc/pcachetrace.c \\\n    $(TOP)/ext/misc/percentile.c \\\n    $(TOP)/ext/misc/regexp.c \\\n    $(TOP)/ext/misc/series.c \\\n    $(TOP)/ext/misc/sha1.c \\\n    $(TOP)/ext/misc/shathree.c \\\n    $(TOP)/ext/misc/sqlar.c \\\n    $(TOP)/ext/misc/uint.c \\\n    $(TOP)/ext/misc/vfstrace.c \\\n    $(TOP)/ext/misc/zipfile.c \\\n    $(TOP)/ext/recover/dbdata.c \\\n    $(TOP)/ext/recover/sqlite3recover.c \\\n    $(TOP)/ext/recover/sqlite3recover.h \\\n    $(TOP)/src/test_windirent.c \\\n    $(TOP)/src/test_windirent.h\n\nshell.c:\t$(SHELL_DEP) $(TOP)/tool/mkshellc.tcl $(B.tclsh)\n\t$(B.tclsh) $(TOP)/tool/mkshellc.tcl >shell.c\n\n#\n# Rules to build the extension objects.\n#\nDEPS_EXT_COMMON = $(DEPS_OBJ_COMMON) $(EXTHDR)\nicu.o:\t$(TOP)/ext/icu/icu.c $(DEPS_EXT_COMMON)\n\t$(T.cc.extension) -c $(TOP)/ext/icu/icu.c $(CFLAGS.icu)\n\nfts3.o:\t$(TOP)/ext/fts3/fts3.c $(DEPS_EXT_COMMON)\n\t$(T.cc.extension) -c $(TOP)/ext/fts3/fts3.c\n\nfts3_aux.o:\t$(TOP)/ext/fts3/fts3_aux.c $(DEPS_EXT_COMMON)\n\t$(T.cc.extension) -c $(TOP)/ext/fts3/fts3_aux.c\n\nfts3_expr.o:\t$(TOP)/ext/fts3/fts3_expr.c $(DEPS_EXT_COMMON)\n\t$(T.cc.extension) -c $(TOP)/ext/fts3/fts3_expr.c\n\nfts3_hash.o:\t$(TOP)/ext/fts3/fts3_hash.c $(DEPS_EXT_COMMON)\n\t$(T.cc.extension) -c $(TOP)/ext/fts3/fts3_hash.c\n\nfts3_icu.o:\t$(TOP)/ext/fts3/fts3_icu.c $(DEPS_EXT_COMMON)\n\t$(T.cc.extension) -c $(TOP)/ext/fts3/fts3_icu.c $(CFLAGS.icu)\n\nfts3_porter.o:\t$(TOP)/ext/fts3/fts3_porter.c $(DEPS_EXT_COMMON)\n\t$(T.cc.extension) -c $(TOP)/ext/fts3/fts3_porter.c\n\nfts3_snippet.o:\t$(TOP)/ext/fts3/fts3_snippet.c $(DEPS_EXT_COMMON)\n\t$(T.cc.extension) -c $(TOP)/ext/fts3/fts3_snippet.c\n\nfts3_tokenizer.o:\t$(TOP)/ext/fts3/fts3_tokenizer.c $(DEPS_EXT_COMMON)\n\t$(T.cc.extension) -c $(TOP)/ext/fts3/fts3_tokenizer.c\n\nfts3_tokenizer1.o:\t$(TOP)/ext/fts3/fts3_tokenizer1.c $(DEPS_EXT_COMMON)\n\t$(T.cc.extension) -c $(TOP)/ext/fts3/fts3_tokenizer1.c\n\nfts3_tokenize_vtab.o:\t$(TOP)/ext/fts3/fts3_tokenize_vtab.c $(DEPS_EXT_COMMON)\n\t$(T.cc.extension) -c $(TOP)/ext/fts3/fts3_tokenize_vtab.c\n\nfts3_unicode.o:\t$(TOP)/ext/fts3/fts3_unicode.c $(DEPS_EXT_COMMON)\n\t$(T.cc.extension) -c $(TOP)/ext/fts3/fts3_unicode.c\n\nfts3_unicode2.o:\t$(TOP)/ext/fts3/fts3_unicode2.c $(DEPS_EXT_COMMON)\n\t$(T.cc.extension) -c $(TOP)/ext/fts3/fts3_unicode2.c\n\nfts3_write.o:\t$(TOP)/ext/fts3/fts3_write.c $(DEPS_EXT_COMMON)\n\t$(T.cc.extension) -c $(TOP)/ext/fts3/fts3_write.c\n\nrtree.o:\t$(TOP)/ext/rtree/rtree.c $(DEPS_EXT_COMMON)\n\t$(T.cc.extension) -c $(TOP)/ext/rtree/rtree.c\n\nsqlite3session.o:\t$(TOP)/ext/session/sqlite3session.c $(DEPS_EXT_COMMON)\n\t$(T.cc.extension) -c $(TOP)/ext/session/sqlite3session.c\n\nstmt.o:\t$(TOP)/ext/misc/stmt.c $(DEPS_EXT_COMMON)\n\t$(T.cc.extension) -c $(TOP)/ext/misc/stmt.c\n\n#\n# Windows section\n#\ndll: sqlite3.dll\nsqlite3.def: $(LIBOBJ)\n\techo 'EXPORTS' >sqlite3.def\n\tnm $(LIBOBJ) | grep ' T ' | grep ' _sqlite3_' \\\n\t\t| sed 's/^.* _//' >>sqlite3.def\n\nsqlite3.dll: $(LIBOBJ) sqlite3.def\n\t$(T.cc.sqlite) $(LDFLAGS.shlib) -o $@ sqlite3.def \\\n\t\t-Wl,\"--strip-all\" $(LIBOBJ) $(LDFLAGS.configure)\n\n#\n# Emit a list of commonly-used targets\nhelp:\n\t@echo; echo \"Frequently-used high-level make targets:\"; echo; \\\n\techo \" - all [default] = builds most components\"; \\\n\techo \" - clean         = cleans up most build products\"; \\\n\techo \" - distclean     = cleans up all build products\"; \\\n\techo \" - install       = installs activated components\"; \\\n\techo; echo \"Testing-related targets:\"; echo; \\\n\techo \" - test          = a number of sanity checks\"; \\\n\techo \" - quicktest     = minimal tests\"; \\\n\techo \" - releasetest   = pre-release tests\"; \\\n\techo \" - devtest       = Minimum tests required before code check-ins\"; \\\n\techo \" - mdevtest      = A variant of devtest\"; \\\n\techo \" - sdevtest      = A variant of devtest\"; \\\n\techo \" - tcltest       = Runs test/veryquick.test\"; \\\n\techo \" - testrunner    = Like tcltest but spread across multiple cores\"; \\\n\techo \" - fuzztest      = The core fuzz tester (see target docs for important info)\"; \\\n\techo \" - valgrindfuzz  = Runs fuzztest under valgrind\"; \\\n\techo \" - soaktest      = Really, really long tests\"; \\\n\techo \" - alltest       = Runs most or all TCL tests\"; \\\n\techo\n\n\n# Remove build products sufficient so that subsequent makes will recompile\n# everything from scratch.  Do not remove:\n#\n#   *   test results and test logs\n#   *   output from ./configure\n#\ntidy-.:\ntidy: tidy-.\n\trm -f *.o *.c *.da *.bb *.bbg gmon.* *.rws sqlite3$(T.exe)\n\trm -f fts5.h keywordhash.h opcodes.h sqlite3.h sqlite3ext.h sqlite3session.h\n\trm -rf .libs .deps tsrc .target_source\n\trm -f lemon$(B.exe) sqlite*.tar.gz\n\trm -f mkkeywordhash$(B.exe) mksourceid$(B.exe)\n\trm -f parse.* fts5parse.*\n\trm -f $(libsqlite3.SO) $(libsqlite3.LIB) $(libtclsqlite3.SO)\n\trm -f tclsqlite3$(T.exe) $(TESTPROGS)\n\trm -f LogEst$(T.exe) fts3view$(T.exe) rollback-test$(T.exe) showdb$(T.exe)\n\trm -f showjournal$(T.exe) showstat4$(T.exe) showwal$(T.exe) speedtest1$(T.exe)\n\trm -f wordcount$(T.exe) changeset$(T.exe) version-info$(T.exe)\n\trm -f *.exp *.vsix pkgIndex.tcl\n\trm -f sqlite3_analyzer$(T.exe) sqlite3_rsync$(T.exe) sqlite3_expert$(T.exe)\n\trm -f mptester$(T.exe) rbu$(T.exe)\tsrcck1$(T.exe)\n\trm -f fuzzershell$(T.exe) fuzzcheck$(T.exe) sqldiff$(T.exe) dbhash$(T.exe)\n\trm -f dbfuzz$(T.exe) dbfuzz2$(T.exe)\n\trm -fr dbfuzz2-dir\n\trm -f fuzzcheck-asan$(T.exe) fuzzcheck-ubsan$(T.exe) ossshell$(T.exe)\n\trm -f scrub$(T.exe) showshm$(T.exe) sqlite3_checker$(T.exe) loadfts$(T.exe)\n\trm -f index_usage$(T.exe) kvtest$(T.exe) startup$(T.exe) threadtest3$(T.exe)\n\trm -f sessionfuzz$(T.exe) changesetfuzz$(T.exe)\n\trm -f dbdump$(T.exe) dbtotxt$(T.exe) atrc$(T.exe)\n\trm -f threadtest5$(T.exe)\n\trm -f src-verify$(B.exe)\n\trm -f tclsqlite3.c has_tclsh* $(T.tcl.env.sh)\n\trm -f sqlite3rc.h sqlite3.def\n\n#\n# Removes build products and test logs.  Retains ./configure outputs.\n#\nclean-.:\nclean:\tclean-. tidy\n\trm -rf omittest* testrunner* testdir*\n\n# Clean up everything.  No exceptions.\ndistclean-.:\ndistclean:\tdistclean-. clean\n\n\n# Show important variable settings.\nshow-variables:\t\n\t@echo \"CC          = $(CC)\"\n\t@echo \"B.cc        = $(B.cc)\"\n\t@echo \"T.cc        = $(T.cc)\"\n\t@echo \"T.cc.sqlite = $(T.cc.sqlite)\"\n"
        },
        {
          "name": "mptest",
          "type": "tree",
          "content": null
        },
        {
          "name": "sqlite.pc.in",
          "type": "blob",
          "size": 0.251953125,
          "content": "# Package Information for pkg-config\n\nprefix=@prefix@\nexec_prefix=@exec_prefix@\nlibdir=@libdir@\nincludedir=@includedir@\n\nName: SQLite\nDescription: SQL database engine\nVersion: @RELEASE@\nLibs: -L${libdir} -lsqlite\nLibs.private: @LIBS@\nCflags: -I${includedir}\n"
        },
        {
          "name": "sqlite3.1",
          "type": "blob",
          "size": 4.23828125,
          "content": ".\\\"                                      Hey, EMACS: -*- nroff -*-\n.\\\" First parameter, NAME, should be all caps\n.\\\" Second parameter, SECTION, should be 1-8, maybe w/ subsection\n.\\\" other parameters are allowed: see man(7), man(1)\n.TH SQLITE3 1 \"Fri Aug 11 23:50:12 CET 2023\"\n.\\\" Please adjust this date whenever revising the manpage.\n.\\\"\n.\\\" Some roff macros, for reference:\n.\\\" .nh        disable hyphenation\n.\\\" .hy        enable hyphenation\n.\\\" .ad l      left justify\n.\\\" .ad b      justify to both left and right margins\n.\\\" .nf        disable filling\n.\\\" .fi        enable filling\n.\\\" .br        insert line break\n.\\\" .sp <n>    insert n+1 empty lines\n.\\\" for manpage-specific macros, see man(7)\n.SH NAME\n.B sqlite3 \n\\- A command line interface for SQLite version 3\n\n.SH SYNOPSIS\n.B sqlite3\n.RI [ options ]\n.RI [ databasefile ]\n.RI [ SQL ]\n\n.SH SUMMARY\n.PP\n.B sqlite3\nis a terminal-based front-end to the SQLite library that can evaluate\nqueries interactively and display the results in multiple formats.\n.B sqlite3\ncan also be used within shell scripts and other applications to provide\nbatch processing features.\n\n.SH DESCRIPTION\nTo start a\n.B sqlite3\ninteractive session, invoke the\n.B sqlite3\ncommand and optionally provide the name of a database file.  If the\ndatabase file does not exist, it will be created.  If the database file\ndoes exist, it will be opened.\n\nFor example, to create a new database file named \"mydata.db\", create\na table named \"memos\" and insert a couple of records into that table:\n.sp\n$ \n.B sqlite3 mydata.db\n.br\nSQLite version 3.43.0 2023-08-11 17:45:23\n.br\nEnter \".help\" for usage hints.\n.br\nsqlite>\n.B create table memos(text, priority INTEGER);\n.br\nsqlite>\n.B insert into memos values('deliver project description', 10);\n.br\nsqlite>\n.B insert into memos values('lunch with Christine', 100);\n.br\nsqlite>\n.B select * from memos;\n.br\ndeliver project description|10\n.br\nlunch with Christine|100\n.br\nsqlite>\n.sp\n\nIf no database name is supplied, the ATTACH sql command can be used\nto attach to existing or create new database files.  ATTACH can also\nbe used to attach to multiple databases within the same interactive\nsession.  This is useful for migrating data between databases,\npossibly changing the schema along the way.\n\nOptionally, a SQL statement or set of SQL statements can be supplied as\na single argument.  Multiple statements should be separated by\nsemi-colons.\n\nFor example:\n.sp\n$ \n.B sqlite3 -line mydata.db 'select * from memos where priority > 20;'\n.br\n    text = lunch with Christine\n.br\npriority = 100\n.br\n.sp\n\n.SS SQLITE META-COMMANDS\n.PP\nThe interactive interpreter offers a set of meta-commands that can be\nused to control the output format, examine the currently attached\ndatabase files, or perform administrative operations upon the\nattached databases (such as rebuilding indices).   Meta-commands are\nalways prefixed with a dot (.).\n\nA list of available meta-commands can be viewed at any time by issuing\nthe '.help' command.  For example:\n.sp\nsqlite>\n.B .help\n.nf\n.tr %.\n...\n.sp\n.fi\n\nThe available commands differ by version and build options, so they\nare not listed here. Please refer to your local copy for all available\noptions.\n\n\n.SH INIT FILE\n.B sqlite3\nreads an initialization file to set the configuration of the\ninteractive environment.  Throughout initialization, any previously\nspecified setting can be overridden.  The sequence of initialization is\nas follows:\n\no The default configuration is established as follows:\n\n.sp\n.nf\n.cc |\nmode            = LIST\nseparator       = \"|\"\nmain prompt     = \"sqlite> \"\ncontinue prompt = \"   ...> \"\n|cc .\n.sp\n.fi\n\no If the file\n.B ${XDG_CONFIG_HOME}/sqlite3/sqliterc\nor\n.B ~/.sqliterc\nexists, the first of those to be found is processed during startup.\nIt should generally only contain meta-commands.\n\no If the -init option is present, the specified file is processed.\n\no All other command line options are processed.\n\n.SH SEE ALSO\nhttps://sqlite.org/cli.html\n.br\nhttps://sqlite.org/fiddle (a WebAssembly build of the CLI app)\n.br\nThe sqlite3-doc package.\n.SH AUTHOR\nThis manual page was originally written by Andreas Rottmann\n<rotty@debian.org>, for the Debian GNU/Linux system (but may be used\nby others). It was subsequently revised by Bill Bumgarner <bbum@mac.com>,\nLaszlo Boszormenyi <gcs@debian.hu>, and the sqlite3 developers.\n"
        },
        {
          "name": "sqlite3.pc.in",
          "type": "blob",
          "size": 0.296875,
          "content": "# Package Information for pkg-config\n\nprefix=@prefix@\nexec_prefix=@exec_prefix@\nlibdir=@libdir@\nincludedir=@includedir@\n\nName: SQLite\nDescription: SQL database engine\nVersion: @PACKAGE_VERSION@\nLibs: -L${libdir} -lsqlite3\nLibs.private: @LDFLAGS_MATH@ @LDFLAGS_ZLIB@ @LDFLAGS_ICU@\nCflags: -I${includedir}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tool",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}