{
  "metadata": {
    "timestamp": 1736709899735,
    "page": 400,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "matrixcascade/PainterEngine",
      "stars": 2645,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.064453125,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4765625,
          "content": "# Prerequisites\n*.d\n\n# Object files\n*.o\n*.ko\n*.obj\n*.elf\n\n# Linker output\n*.ilk\n*.map\n*.exp\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Libraries\n*.la\n*.lo\n\n# Shared objects (inc. Windows DLLs)\n*.so.*\n*.dylib\n\n# Executables\n*.out\n*.app\n*.i*86\n*.x86_64\n*.hex\n\n# Debug files\n*.dSYM/\n*.su\n*.idb\n*.pdb\n\n# Kernel Module Compile Results\n*.mod*\n*.cmd\n.tmp_versions/\nmodules.order\nModule.symvers\nMkfile.old\ndkms.conf\n\n# Xmake cache\n.xmake/\n.cache/\nbuild/\ncompile_commands.json\n\n# MacOS Cache\n.DS_Store\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0390625,
          "content": "MIT License\n\nCopyright (c) 2023 DBinary\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "PainterEngine.h",
          "type": "blob",
          "size": 0.572265625,
          "content": "#ifdef PAINTERENGINE_STANDALONE\n#include \"kernel/PX_Kernel.h\"\n#else\n#ifndef PAINTERENGINE_PLATFORM\n#define PAINTERENGINE_PLATFORM\n#define main px_main\n#ifdef __cplusplus \nextern \"C\" {\n#endif \n#include \"runtime/PainterEngine_Application.h\"\nextern PX_Object* root;\nextern px_memorypool* mp,*mp_static;\nextern px_int screen_width;\nextern px_int screen_height;\nextern px_int surface_width;\nextern px_int surface_height;\nextern px_surface* render_surface;\nextern PX_ResourceLibrary* resource_library;\nextern PX_SoundPlay* soundplay;\nint px_main();\n#ifdef __cplusplus \n}\n#endif \n#endif\n#endif"
        },
        {
          "name": "README(ENGLISH).md",
          "type": "blob",
          "size": 9.09765625,
          "content": "<p align=\"center\">\n  <a href=\"https://painterengine.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n    <img src=\"images/title.png\" alt=\"PainterEngine Title\">\n  </a>\n</p>\n\n[![中文](https://img.shields.io/badge/语言-中文-brightgreen)](https://github.com/QuantumCipherMaster/PainterEngine/blob/master/README.md)\n\nPainterEngine is a cross-platform graphics engine written in C language, with support for Windows, Linux, iOS, Android, WebAssembly, and even bare-metal embedded platforms without OS. It is built on a component-based design pattern, making it accessible to even C language beginners. [PainterEngine Make](https://www.painterengine.com/) enables you to compile your PainterEngine project for multiple platforms with just one click.\nIt covers various fields including basic data structures, graphics, acoustics, digital signal processing, compiler design, virtual machine systems, cryptography, human-computer interaction, game engines, FPGA-GPU graphics acceleration, and more. You can use it to create mini-applications or as a learning project for acquiring knowledge.\n\n## 30-Second Quick Start Guide to PainterEngine\n\nTo incorporate PainterEngine into your project, all you need is:\n```c\n#include \"PainterEngine.h\"\n```\n\nUtilize `PainterEngine_Initialize` to swiftly create a graphical interactive interface:\n```c\n#include \"PainterEngine.h\"\nint main()\n{\n    PainterEngine_Initialize(800, 600);\n    return 1;\n}\n```\n\nCreate components or even craft your own:\n\n```c\n#include \"PainterEngine.h\"\nint main()\n{\n    PainterEngine_Initialize(800, 600);\n    PX_Object_Firework01Create(mp, root,200,600);\n    PX_Object_Firework01Create(mp, root,400,600);\n    PX_Object_Firework01Create(mp, root,600,600);\n    return 1;\n}\n```\n\n<p align=\"center\">\n  <img src=\"images/firework.png\" alt=\"PainterEngine firework\">\n</p>\n\nUse [\"PainterEngine Make\"](https://www.painterengine.com/) to quickly compile and deploy your project to various platforms such as Windows, Linux, WebAssembly, Android, and more. One-click compilation and deployment, with no need to modify the source code, enabling seamless portability at zero cost.\n\n\n\n<p align=\"center\">\n  <a href=\"https://cdn.painterengine.com/PainterEngine_make_en.zip\" target=\"_blank\" rel=\"noopener noreferrer\">\n    <img src=\"images/pemakeen.png\" alt=\"PainterEngine make\">\n  </a>\n</p>\n\n## Swift development and smooth transitions\n\nIf you don't need the one-key compilation feature provided by PainterEngine Make and prefer to develop PainterEngine programs or components using your preferred IDE, you just need to:\n\n1. Add all the code from \"PainterEngine/core\", \"PainterEngine/kernel\", and \"PainterEngine/runtime\" to your project.\n\n2. Select your working platform in \"PainterEngine/platform\" (eg: choose \"PainterEngine/platform/windows\" for Windows), and add all the code from the corresponding folder to your project.\n\n3. Include the directory containing PainterEngine source code in your project's include directories.\n\n4. Add your code to the project.\n\n## Not just a graphics library but also an application framework.\n\n| Functions             | Support                                                      | Description                                                                       |\n| --------------------- | ------------------------------------------------------------ | ------------------------------------------------------------------------          |\n| memorypool            | alloc/free                                                   | Platform-agnostic memory management implementation                               |\n| math               | sin/cos/tan/arcsin/log/exp/relu/...                | The complete implementation of the vast majority of C standard math libraries                          |\n| signal processing     | dft/dct/fft/dwt/window functions/mfcc/...                | Fourier/Cosine/Wavelet Transform, common window functions, MFCC, and other signal processing fundamental functions and higher-level feature extraction algorithms, etc.                         |\n| Data structures       | string/vector/list/map/stack/fifo/circular-buffer/...                | Platform-agnostic common data structures and algorithms                          |\n| Cryptography          | curve25519/AES/SHAx/MD5/...                | This includes commonly used symmetric key algorithms and key exchange algorithms                          |\n| image codec           | PNG/JPG/GIF/BMP                                              | Supports decoding of PNG/JPG/GIF/BMP images and encoding of PNG images           |\n| audio codec           | Wav/Mp3                                              | Supports decoding of Wav/Mp3 and encoding of Wav           |\n| fontmodule            | TTF                                                  | Support fontmodule of truetype(reference: stb_truetype.c)|\n| Geometric             | Line/Triangle/Rectangle/Circle/Ring/Sector/Rounded/...      | Geometric rasterization                                                           |\n| Renderer              | 2D/3D                                                        | Implementation of a 2D/3D software renderer. A painting engine                  |\n| sound                 | VC codec/mixer/piano/ks                                               | Includes an implementation of a VC(voice conversion), a mixer, a physically-modeled piano and Karplus-Strong string synthesis. Direct synthesis of PCM audio streams|\n| Animation             | 2dx/live2D                                                   | 2D frame-by-frame animation and a Live2D-style animation system                  |\n| PainterScript         | Compiler/VM/Debugger                                         | A complete scripting engine, including a compiler, virtual machine, and debugger |\n| UI                    | button/radio/image/edit/label/list/...                       | Implementation of common UI controls                                             |\n| protocals             | MQTT/MODBUS/Game-network-synchronization                     | Common communication protocols                                                   |\n| Game framework        |                                                              | PainterEngine Game Framework                                                      |\n| FPGA-GPU             | 2D accelerator                                               | Implemented an FPGA-based GPU graphics accelerator that provides at least 50 million pixels per second (Mpps) 2D Blender acceleration for PainterEngine and supports HDMI output. Validation has been completed on the Zynq-7000 series SoC|\n\n## The FPGA-GPU Graphics Acceleration Solution\n\nA GPU IP core based on FPGA has been developed and functionally verified on the Zynq 7020 platform. It provides 2D Blender graphics rendering acceleration with a performance of no less than 50Mpps (Million pixels per second) and supports HDMI output. This solution has been successfully validated on the Zynq 7000 series SoC.\n\n<p align=\"center\"><img src=\"images/gpu_block_design.png\" alt=\"PainterEngine designer\"></p>\n\n<p align=\"center\"><img src=\"images/gpu_demo.png\" alt=\"PainterEngine designer\"></p>\n\n<p align=\"center\"><img src=\"images/gpu_demo2.png\" alt=\"PainterEngine designer\"></p>\n\n## Component-based development with support for a designer mode, making it as simple as it gets\n\n<p align=\"center\"><img src=\"images/designer.png\" alt=\"PainterEngine designer\"></p>\n\n## An abundance of components to unleash your creativity without limitations.\n\n<p align=\"center\"><img width=\"600\" src=\"images/market.png\" alt=\"PainterEngine market\"></p>\n\n<p align=\"center\"><img width=\"600\" src=\"images/paint.png\" alt=\"PainterEngine market\"></p>\n\n<p align=\"center\"><img width=\"600\" src=\"images/piano.png\" alt=\"PainterEngine market\"></p>\n\n<p align=\"center\"><img width=\"600\" src=\"images/l2d.png\" alt=\"PainterEngine market\"></p>\n\n### Now, join the PainterEngine.com contribute to its development.\n\n<p align=\"center\">\n<img src=\"documents/assets/mini/1.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/2.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/3.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/4.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/5.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/6.png\" alt=\"logo\">\n</p>\n\n<p align=\"center\">\n<img src=\"documents/assets/mini/7.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/8.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/9.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/10.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/11.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/12.png\" alt=\"logo\">\n</p>\n\n<p align=\"center\">\n<img src=\"documents/assets/mini/13.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/14.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/15.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/16.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/17.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/18.png\" alt=\"logo\">\n</p>\n\n<p align=\"center\">\n<img src=\"documents/assets/mini/19.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/20.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/21.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/22.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/23.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/24.png\" alt=\"logo\">\n</p>\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.8955078125,
          "content": "<p align=\"center\">\n  <a href=\"https://painterengine.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n    <img src=\"images/title.png\" alt=\"PainterEngine Title\">\n  </a>\n</p>\n\n[![ENGLISH](https://img.shields.io/badge/language-English-red.svg)](https://github.com/QuantumCipherMaster/PainterEngine/blob/master/README(ENGLISH).md)\n\nPainterEngine 是一个由 C 语言编写的跨平台图形引擎, 支持 Windows/Linux/iOS/Android/WebAssembly 甚至无操作系统的裸嵌入式平台, 它基于组件化的设计模式, 即使是 C 语言初学者, 也可以在几分钟内掌握它的使用, [PainterEngine Make](https://www.painterengine.com/) 允许您一键将您的 PainterEngine 项目编译到多个平台.\n它涵盖了基础数据结构、图形学、声学、数字信号处理、编译原理、虚拟机系统、密码学、人机交互、游戏引擎、神经网络、FPGA-GPU 图形 IP 设计等多个领域, 你既可以用它制作微应用, 也可以将它作为学习项目。\n\n## 30 秒速览 PainterEngine\n\n将 PainterEngine 引入到您的 C/C++ 项目中, 仅仅需要 `#include \"PainterEngine.h\"`.\n\n使用 `PainterEngine_Initialize`, 快速创建一个图形化的交互式界面:\n\n```c\n#include \"PainterEngine.h\"\nint main()\n{\n    PainterEngine_Initialize(800, 600);\n    return 1;\n}\n```\n\n创建组件, 或者...创造自己的组件:\n\n```c\n#include \"PainterEngine.h\"\nint main()\n{\n    PainterEngine_Initialize(800, 600);\n    PX_Object_Firework01Create(mp, root,200,600);\n    PX_Object_Firework01Create(mp, root,400,600);\n    PX_Object_Firework01Create(mp, root,600,600);\n    return 1;\n}\n```\n\n<p align=\"center\">\n  <img src=\"images/firework.png\" alt=\"PainterEngine firework\">\n</p>\n\n使用 [PainterEngine Make](https://www.painterengine.com/) 快速将您的项目编译到 Windows, Linux, WebAssembly, Android 等任意平台, 一键编译部署, 源码无需修改, 零成本移植.\n\n<p align=\"center\">\n  <a href=\"https://cdn.painterengine.com/PainterEngine_make.zip\" target=\"_blank\" rel=\"noopener noreferrer\">\n  \t<img src=\"images/pemake.png\" alt=\"PainterEngine make\">\n  </a>\n</p>\n\n\n## 快速开发, 无缝迁移\n\n如果您不需要 PainterEngine Make 提供的一键编译功能, 希望使用自己常用的 IDE 开发 PainterEngine 程序或组件, 您只需要:\n\n1. 将 \"PainterEngine/core\", \"PainterEngine/kernel\", \"PainterEngine/runtime\" 的所有代码, 添加到您的项目中. \n\n2. 在 \"PainterEngine/platform\" 中选择您的工作平台(例如 Windows 中选择 \"PainterEngine/platform/windows\"), 并将对应文件夹中的所有代码添加到您的项目中.\n\n3. 将 PainterEngine 所在目录, 添加到包含目录中. \n\n4. 将您的代码添加进项目中.\n\n## 不仅是图形库, 更是应用程序框架\n\n| 功能                  | 支持内容                                                     | 描述                                                                           |\n| --------------------- | ------------------------------------------------------------ | ------------------------------------------------------------------------          |\n| 内存池                 | alloc/free                                                   | 平台无关的内存池实现                              |\n| 数学库               | sin/cos/tan/arcsin/log/exp/relu/...                | 绝大部分 C 标准数学库的完整实现                          |\n| 信号处理               | dft/dct/fft/dwt/window functions/mfcc/...                | 傅里叶/余弦/小波变换, 常用窗函数, mfcc 等特征采集算法...等等信号处理相关基础函数及上层特征采集算法                         |\n| 数据结构               | string/vector/list/map/stack/fifo/circular-buffer/...                | 平台无关的数据结构算法实现                          |\n| 密码学               | curve25519/AES/SHAx/MD5/...                | 包含常用的密钥对称算法及密钥协商算法                          |\n| 神经网络               | BP Neutral Network                        |经典BP神经网络框架,可实现简单分类问题|\n| 图片支持               | PNG/JPG/GIF/BMP                                              | 支持 PNG/JPG/GIF/BMP 解码及 PNG 编码           |\n| 音频支持               | WAV/MP3                                              | 支持 Wav, Mp3 解码及 Wav 编码|\n| 字模支持               | ttf                                              | 支持 ttf 字模文件(由 stb_truetype.c 移植而来)|\n| 几何绘制               | Line/Triangle/Rectangle/Circle/Ring/Sector/Rounded/...      | 常用几何光栅化实现                                                                 |\n| 渲染器                | 2D/3D                                                        | 2D/3D 渲染器实现及一个高质量制图引擎                                                 |\n| 动画                  | 2dx/live2D                                                   | 2D 动画和一个类 Live2D 骨骼动画系统                                                  |\n| 声学模型               | mixer/piano/ks                                               | 包含一个混音器实现, 一个相位声码器, 一个物理建模的钢琴及 karplus-strong 合成的拨弦模型, 直接合成 PCM 音频流   |\n| 脚本引擎               | Compiler/VM/Debugger                                         | 一个完整的脚本引擎, 包含编译器虚拟机调试器                                           |\n| UI 框架                 | button/radio/image/edit/label/list/...                       | UI 框架实现                                                                        |\n| 协议                   | MQTT/MODBUS/Game-network-synchronization                     | 常用的通讯协议                                                                    |\n| 游戏引擎               |                                                              | 集成一个游戏世界框架                                                               |\n| 跨平台显示服务          | VisualOS                                                    |platform/visualos提供了一个基于TCP网络的显示服务器,可以完成cs/bs架构的远程界面交互连接,为没有显示条件的设备提供图形操作终端|\n| FPGA-GPU               |2D accelerator                                               | 实现了基于 FPGA 的 GPU 图形加速器, 能够为 PainterEngine 提供不低于 50Mpps 的 2D Blender 及图元光栅化加速, 支持 HDMI 输出, 目前已在 zynq7000 系列 Soc 上完成验证|\n\n## FPGA-GPU 嵌入式图形加速方案\n\n提供一个基于 FPGA 的 GPU IP 核, 已在 Zynq7020 上完成功能验证, 提供不低于 50Mpps 的 2D Blender 图形渲染加速, 支持 HDMI 输出, 目前已在 zynq7000 系列 Soc 上完成验证.\n\n<p align=\"center\"><img src=\"images/gpu_block_design.png\" alt=\"PainterEngine designer\"></p>\n\n<p align=\"center\"><img src=\"images/gpu_demo.png\" alt=\"PainterEngine designer\"></p>\n\n<p align=\"center\"><img src=\"images/gpu_demo2.png\" alt=\"PainterEngine designer\"></p>\n\n## 组件化开发, 支持设计器模式, 简单的不能再简单\n\n<p align=\"center\"><img src=\"images/designer.png\" alt=\"PainterEngine designer\"></p>\n\n## 海量组件, 创意无界\n\n<p align=\"center\"><img width=\"600\" src=\"images/market.png\" alt=\"PainterEngine market\"></p>\n\n<p align=\"center\"><img width=\"600\" src=\"images/paint.png\" alt=\"PainterEngine market\"></p>\n\n<p align=\"center\"><img width=\"600\" src=\"images/piano.png\" alt=\"PainterEngine market\"></p>\n\n<p align=\"center\"><img width=\"600\" src=\"images/l2d.png\" alt=\"PainterEngine market\"></p>\n\n### 现在, 访问 PainterEngine.com, 参与建设\n\n<p align=\"center\">\n<img src=\"documents/assets/mini/1.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/2.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/3.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/4.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/5.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/6.png\" alt=\"logo\">\n</p>\n\n<p align=\"center\">\n<img src=\"documents/assets/mini/7.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/8.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/9.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/10.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/11.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/12.png\" alt=\"logo\">\n</p>\n\n<p align=\"center\">\n<img src=\"documents/assets/mini/13.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/14.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/15.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/16.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/17.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/18.png\" alt=\"logo\">\n</p>\n\n<p align=\"center\">\n<img src=\"documents/assets/mini/19.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/20.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/21.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/22.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/23.png\" alt=\"logo\">\n<img src=\"documents/assets/mini/24.png\" alt=\"logo\">\n</p>\n\n"
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "documents",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "kernel",
          "type": "tree",
          "content": null
        },
        {
          "name": "platform",
          "type": "tree",
          "content": null
        },
        {
          "name": "runtime",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}