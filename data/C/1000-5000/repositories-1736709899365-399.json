{
  "metadata": {
    "timestamp": 1736709899365,
    "page": 399,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cundong/SmartAppUpdates",
      "stars": 2647,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2119140625,
          "content": "gen/*\nbin/*\nobj/*\n\nApkPatchLibraryDemo/bin/*\nApkPatchLibraryDemo/gen/*\n\nApkPatchLibraryDemo2/bin/*\nApkPatchLibraryDemo2/gen/*\n\nApkPatchLibraryServer/bin/*\nApkPatchLibraryServer/Debug/*\nApkPatchLibraryServer/Release/*\n"
        },
        {
          "name": "ApkPatchLibrary",
          "type": "tree",
          "content": null
        },
        {
          "name": "ApkPatchLibrarySample.apk",
          "type": "blob",
          "size": 1423.4404296875,
          "content": null
        },
        {
          "name": "ApkPatchLibrarySample",
          "type": "tree",
          "content": null
        },
        {
          "name": "ApkPatchLibraryServer",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.564453125,
          "content": "# Android应用增量更新 - Smart App Updates\n\n------\n\n## 介绍\n\n你所看到的，是一个用于Android应用程序增量更新的库。\n\n包括客户端、服务端两部分代码。\n\n## 原理\n\n自从 Android 4.1 开始， [Google Play 引入了应用程序的增量更新功能][1]，App使用该升级方式，可节省约2/3的流量。\n\n> Smart app updates is a new feature of Google Play that introduces a\n> better way of delivering app updates to devices. When developers\n> publish an update, Google Play now delivers only the bits that have\n> changed to devices, rather than the entire APK. This makes the updates\n> much lighter-weight in most cases, so they are faster to download,\n> save the device’s battery, and conserve bandwidth usage on users’\n> mobile data plan. On average, a smart app update is about 1/3 the\n> sizeof a full APK update.\n\n现在国内主流的应用市场也都支持应用的增量更新了。\n\n增量更新的原理，就是将手机上已安装apk与服务器端最新apk进行二进制对比，得到差分包，用户更新程序时，只需要下载差分包，并在本地使用差分包与已安装apk，合成新版apk。\n\n例如，当前手机中已安装微博V1，大小为12.8MB，现在微博发布了最新版V2，大小为15.4MB，我们对两个版本的apk文件差分比对之后，发现差异只有3M，那么用户就只需要要下载一个3M的差分包，使用旧版apk与这个差分包，合成得到一个新版本apk，提醒用户安装即可，不需要整包下载15.4M的微博V2版apk。\n\napk文件的差分、合成，可以通过 [开源的二进制比较工具 bsdiff][2] 来实现，又因为bsdiff依赖bzip2，所以我们还需要用到 [bzip2][3]\n\nbsdiff中，`bsdiff.c` 用于生成差分包，`bspatch.c` 用于合成文件。 \n\n弄清楚原理之后，我们想实现增量更新，共需要做3件事：\n\n* 在服务器端，生成两个版本apk的差分包； \n\n* 在手机客户端，使用已安装的apk与这个差分包进行合成，得到新版的微博apk； \n\n* 校验新合成的apk文件是否完整，MD5或SHA1是否正确，如正确，则引导用户安装；\n\n## 过程分析\n\n### 1 生成差分包\n\n这一步需要在服务器端来实现，一般来说，每当apk有新版本需要提示用户升级，都需要运营人员在后台管理端上传新apk，上传时就应该由程序生成与之前所有旧版本们与最新版的差分包。 \n\n例如：\n你的apk已经发布了3个版，V1.0、V2.0、V3.0，这时候你要在后台发布V4.0，那么，当你在服务器上传最新的V4.0包时，服务器端就应该立即生成以下差分包：\n\n 1. V1.0 ——> V4.0的差分包；\n 2. V2.0 ——> V4.0的差分包；\n 3. V3.0 ——> V4.0的差分包；\n\nApkPatchLibraryServer 工程即为 Java 语言实现的服务器端差分程序。\n\n下面对ApkPatchLibraryServer做一些简单说明：\n\n#### 1.1 C部分\n\nApkPatchLibraryServer/jni 中，除了以下4个：\n\n>com_cundong_utils_DiffUtils.c\n\n>com_cundong_utils_DiffUtils.h\n\n>com_cundong_utils_PatchUtils.c\n\n>com_cundong_utils_PatchUtils.h\n\njni/bzip2目录中的文件，全部来自bzip2项目。\n\n>com_cundong_utils_DiffUtils.c\n\n>com_cundong_utils_DiffUtils.h\n\n用于生成差分包。\n\n>com_cundong_utils_PatchUtils.c\n\n>com_cundong_utils_PatchUtils.h\n\n用于合成新apk文件。\n\n`com_cundong_utils_DiffUtils.c` 修改自 `bsdiff/bsdiff.c`，`com_cundong_utils_PatchUtils.c`修改自`bsdiff/bspatch.c`。\n\n我们在需要将jni中的C文件，build输出为动态链接库，以供Java调用（Window环境下生成的文件名为libApkPatchLibraryServer.dll，Unix-like系统下为libApkPatchLibraryServer.so，OSX下为libApkPatchLibraryServer.dylib）。\n\nBuild成功后，将该动态链接库文件，加入环境变量，供Java语言调用。\n\n`com_cundong_utils_DiffUtils.c` 中 `Java_com_cundong_utils_DiffUtils_genDiff()` 方法，用于生成差分包的：\n\n```C\n\nJNIEXPORT jint JNICALL Java_com_cundong_utils_DiffUtils_genDiff(JNIEnv *env,\n\t\tjclass cls, jstring old, jstring new, jstring patch) {\n\tint argc = 4;\n\tchar * argv[argc];\n\targv[0] = \"bsdiff\";\n\targv[1] = (char*) ((*env)->GetStringUTFChars(env, old, 0));\n\targv[2] = (char*) ((*env)->GetStringUTFChars(env, new, 0));\n\targv[3] = (char*) ((*env)->GetStringUTFChars(env, patch, 0));\n\n\tprintf(\"old apk = %s \\n\", argv[1]);\n\tprintf(\"new apk = %s \\n\", argv[2]);\n\tprintf(\"patch = %s \\n\", argv[3]);\n\n\tint ret = genpatch(argc, argv);\n\n\tprintf(\"genDiff result = %d \", ret);\n\n\t(*env)->ReleaseStringUTFChars(env, old, argv[1]);\n\t(*env)->ReleaseStringUTFChars(env, new, argv[2]);\n\t(*env)->ReleaseStringUTFChars(env, patch, argv[3]);\n\n\treturn ret;\n}\n\n```\n`com_cundong_utils_PatchUtils.c` 中 `Java_com_cundong_utils_PatchUtils_patch()` 方法，用于合成新的APK；\n\n```C\nJNIEXPORT jint JNICALL Java_com_cundong_utils_PatchUtils_patch\n  (JNIEnv *env, jclass cls,\n\t\t\tjstring old, jstring new, jstring patch){\n\tint argc = 4;\n\tchar * argv[argc];\n\targv[0] = \"bspatch\";\n\targv[1] = (char*) ((*env)->GetStringUTFChars(env, old, 0));\n\targv[2] = (char*) ((*env)->GetStringUTFChars(env, new, 0));\n\targv[3] = (char*) ((*env)->GetStringUTFChars(env, patch, 0));\n\n\tprintf(\"old apk = %s \\n\", argv[1]);\n\tprintf(\"patch = %s \\n\", argv[3]);\n\tprintf(\"new apk = %s \\n\", argv[2]);\n\n\tint ret = applypatch(argc, argv);\n\n\tprintf(\"patch result = %d \", ret);\n\n\t(*env)->ReleaseStringUTFChars(env, old, argv[1]);\n\t(*env)->ReleaseStringUTFChars(env, new, argv[2]);\n\t(*env)->ReleaseStringUTFChars(env, patch, argv[3]);\n\treturn ret;\n}\n```\n\n#### 1.2 Java部分\n\ncom.cundong.utils包，为调用C语言的Java实现；\ncom.cundong.apkdiff包，为apk差分程序的Demo；\ncom.cundong.apkpatch包，为apk合并程序的Demo；\n\n调用，`com.cundong.utils.DiffUtils`中`genDiff()`方法，可以通过传入的新旧apk路径，得到差分包。 \n\n```java\n/**\n * 类说明： \tAPK Diff工具类\n * \n * @author     Cundong\n * @date \t      2013-9-6\n * @version  1.0\n */\npublic class DiffUtils {\n\n\t/**\n\t * native方法 比较路径为oldPath的apk与newPath的apk之间差异，并生成patch包，存储于patchPath\n\t * \n\t * 返回：0，说明操作成功\n\t *  \n\t * @param oldApkPath 示例:/sdcard/old.apk\n\t * @param newApkPath 示例:/sdcard/new.apk\n\t * @param patchPath  示例:/sdcard/xx.patch\n\t * @return\n\t */\n\tpublic static native int genDiff(String oldApkPath, String newApkPath, String patchPath);\n}\n```\n\n调用，`com.cundong.utils.PatchUtils`中`patch()`方法，可以通过旧apk与差分包，合成为新apk。\n\n```java\n/**\n * 类说明： \tAPK Patch工具类\n * \n * @author    Cundong\n * @date \t     2013-9-6\n * @version 1.0\n */\npublic class PatchUtils {\n\n\t/**\n\t * native方法 使用路径为oldApkPath的apk与路径为patchPath的补丁包，合成新的apk，并存储于newApkPath\n\t * \n\t * 返回：0，说明操作成功\n\t * \n\t * @param oldApkPath 示例:/sdcard/old.apk\n\t * @param newApkPath 示例:/sdcard/new.apk\n\t * @param patchPath  示例:/sdcard/xx.patch\n\t * @return\n\t */\n\tpublic static native int patch(String oldApkPath, String newApkPath,\n\t\t\tString patchPath);\n}\n```\n\n### 2.使用旧版apk与差分包，在客户端合成新apk\n\n需要在手机客户端实现，ApkPatchLibrary 工程封装了这个过程。\n\n#### 2.1 C部分\n同ApkPatchLibraryServer工程一样，ApkPatchLibrary/jni/bzip2 目录中所有文件都来自bzip2项目。\n\n`ApkPatchLibrary/jni/com_cundong_utils_PatchUtils.c`、`ApkPatchLibrary/jni/com_cundong_utils_PatchUtils.c`实现文件的合并过程，其中`com_cundong_utils_PatchUtils.c`修改自`bsdiff/bspatch.c`。\n\n我们需要用NDK编译出一个libApkPatchLibrary.so文件，生成的so文件位于libs/armeabi/ 下，其他 Android 工程便可以使用该libApkPatchLibrary.so文件来合成apk（如果需要支持多种CPU架构需要自己配置）。\n\n`com_cundong_utils_PatchUtils.Java_com_cundong_utils_PatchUtils_patch()`方法，即为生成差分包的代码：\n\n```C\n/*\n * Class:     com_cundong_utils_PatchUtils\n * Method:    patch\n * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I\n */\nJNIEXPORT jint JNICALL Java_com_cundong_utils_PatchUtils_patch(JNIEnv *env,\n\t\tjobject obj, jstring old, jstring new, jstring patch) {\n\n\tchar * ch[4];\n\tch[0] = \"bspatch\";\n\tch[1] = (char*) ((*env)->GetStringUTFChars(env, old, 0));\n\tch[2] = (char*) ((*env)->GetStringUTFChars(env, new, 0));\n\tch[3] = (char*) ((*env)->GetStringUTFChars(env, patch, 0));\n\n\t__android_log_print(ANDROID_LOG_INFO, \"ApkPatchLibrary\", \"old = %s \", ch[1]);\n\t__android_log_print(ANDROID_LOG_INFO, \"ApkPatchLibrary\", \"new = %s \", ch[2]);\n\t__android_log_print(ANDROID_LOG_INFO, \"ApkPatchLibrary\", \"patch = %s \", ch[3]);\n\n\tint ret = applypatch(4, ch);\n\n\t__android_log_print(ANDROID_LOG_INFO, \"ApkPatchLibrary\", \"applypatch result = %d \", ret);\n\n\t(*env)->ReleaseStringUTFChars(env, old, ch[1]);\n\t(*env)->ReleaseStringUTFChars(env, new, ch[2]);\n\t(*env)->ReleaseStringUTFChars(env, patch, ch[3]);\n\n\treturn ret;\n}\n```\n\n#### 2.2 Java部分\n\ncom.cundong.utils包，为调用C语言的Java实现；\n\n调用，`com.cundong.utils.PatchUtils中patch()`方法，可以通过旧apk与差分包，合成为新apk。\n\n```java\n/**\n * 类说明： \tAPK Patch工具类\n * \n * @author   Cundong\n * @date      2013-9-6\n * @version 1.0\n */\npublic class PatchUtils {\n\n\t/**\n\t * native方法 使用路径为oldApkPath的apk与路径为patchPath的补丁包，合成新的apk，并存储于     newApkPath\n\t * \n\t * 返回：0，说明操作成功\n\t * \n\t * @param oldApkPath 示例:/sdcard/old.apk\n\t * @param newApkPath 示例:/sdcard/new.apk\n\t * @param patchPath  示例:/sdcard/xx.patch\n\t * @return\n\t */\n\tpublic static native int patch(String oldApkPath, String newApkPath,\n\t\t\tString patchPath);\n}\n```\n\n### 3.校验新合成的apk文件\n\n在执行patch之前，需要先读取本地安装旧版本APK的MD5或SHA1，判断当前安装的文件是否为合法版本，同样，patch得到新包之后，也需要对它进行MD5或SHA1校验，校验失败，说明合成过程有问题。\n\n## 注意事项\n\n增量更新的前提条件，是在手机客户端能让我们读取到当前应用程序安装后的源apk，如果获取不到源apk，那么就无法进行增量更新了，另外，如果你的应用程序不是很大，比如只有2、3M，那么完全没有必要使用增量更新，增量更新只适用于apk包比较大的情况，比如手机游戏客户端。\n\n## 一些说明\n\n* ApkPatchLibraryServer：服务器端生成差分包工程，使用Java实现；\n\n* ApkPatchLibrary：客户端使用的apk合成库，用于生成libApkPatchLibrary.so，使用Eclipse开发；\n\n* ApkPatchLibrarySample：一个Sample，手机上安装 Weibo5.5.apk，通过与SD卡上预先存放的weibo.patch文件进行合并，得到Weibo5.6.apk，使用AndroidStudio开发。 \n\n* 二进制差分或许有更好的实现方案，如：xdelta；\n\n另外， ApkPatchLibraryServer、ApkPatchLibrarySample 中用到的Weibo5.5.apk，Weibo5.6.apk，以及使用ApkPatchLibraryServer生成的差分包(Weibo5.5.apk->Weibo5.6.apk)， [都通过云盘共享了][5]。\n\n## 关于我\n\n* Blog: [http://my.oschina.net/liucundong/blog][4]\n* Mail: cundong.liu#gmail.com\n\n## Update\n\n1.目前的做法只是提供了一个例子，并没有做成开源库，打算这几天改进一下，做成一个开源库，push到GitHub上，开发ing..（2014年，8月31日）\n\n2.已经大幅度重构原代码，并将原来的Demo程序提取成为开源库，欢迎所有人Watch、Star、Fork。（2014年，9月2日）\n\n3.修改ReadMe.md，更加清晰的说明开源库的使用，同时进一步重构代码。（2014年，10月4日晚）\n\n4.调整ApkPatchLibraryServer工程目录。（2015年，4月24日)\n\n5.上传[一个演示demo ApkPatchLibrarySample.apk][6]。（2015-4-26）\n\n6.ApkPatchLibrarySample重新使用AndroidStudio开发，修改文件MD5的对比逻辑。（2015-12-22）\n\n## License\n\n    Copyright 2015 Cundong\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n  [1]: http://developer.android.com/about/versions/jelly-bean.html\n  [2]: http://www.daemonology.net/bsdiff/\n  [3]: http://www.bzip.org/downloads.html\n  [4]: http://my.oschina.net/liucundong/blog\n  [5]: http://pan.baidu.com/s/1T5Szc#path=%252FSmartAppUpdates\n  [6]: https://github.com/cundong/SmartAppUpdates/blob/master/ApkPatchLibrarySample.apk\n"
        }
      ]
    }
  ]
}