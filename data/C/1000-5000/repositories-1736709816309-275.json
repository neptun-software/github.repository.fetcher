{
  "metadata": {
    "timestamp": 1736709816309,
    "page": 275,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Simple-XX/SimpleKernel",
      "stars": 3074,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 13.005859375,
          "content": "# This file is a part of Simple-XX/SimpleKernel\n# (https://github.com/Simple-XX/SimpleKernel).\n#\n# CMakeLists.txt for Simple-XX/SimpleKernel.\n\n---\n# @version clang-format version 15\n# @see https://clang.llvm.org/docs/ClangFormatStyleOptions.html\n\n# 访问说明符 public/private 的偏移，与类对齐\nAccessModifierOffset: -4\n# ( 后的参数对齐，与 ( 对齐\nAlignAfterOpenBracket: Align\n# 结构体初始化对齐，右对齐\nAlignArrayOfStructures: Right\n# 连续赋值对齐\nAlignConsecutiveAssignments:\n  # 允许\n  Enabled: true\n  # 忽略空行\n  AcrossEmptyLines: true\n  # 忽略注释\n  AcrossComments: true\n  # 忽略混合运算符\n  AlignCompound: true\n  # 填充运算符\n  PadOperators: true\n# 位域对齐\nAlignConsecutiveBitFields:\n  # 允许\n  Enabled: true\n  # 忽略空行\n  AcrossEmptyLines: true\n  # 忽略注释\n  AcrossComments: true\n  # 忽略混合运算符\n  AlignCompound: true\n  # 填充运算符\n  PadOperators: true\n# 连续声明对齐，忽略空行/注释\nAlignConsecutiveDeclarations:\n  # 允许\n  Enabled: true\n  # 忽略空行\n  AcrossEmptyLines: true\n  # 忽略注释\n  AcrossComments: true\n  # 忽略混合运算符\n  AlignCompound: true\n  # 填充运算符\n  PadOperators: true\n# 连续宏定义对齐，忽略空行/注释\nAlignConsecutiveMacros:\n  # 允许\n  Enabled: true\n  # 忽略空行\n  AcrossEmptyLines: true\n  # 忽略注释\n  AcrossComments: true\n  # 忽略混合运算符\n  AlignCompound: true\n  # 填充运算符\n  PadOperators: true\n# 换行符号左对齐\nAlignEscapedNewlines: Left\n# 操作符对齐，与 BreakBeforeBinaryOperators 共同生效\nAlignOperands: AlignAfterOperator\n# 行后注释对齐\nAlignTrailingComments: true\n# 尽量将函数调用/初始化的所有参数放在同一行，禁用\nAllowAllArgumentsOnNextLine: false\n# 尽量将函数声明的参数放在同一行\nAllowAllParametersOfDeclarationOnNextLine: true\n# 将 while (true) {} 中的 {} 合并为一行，禁用\nAllowShortBlocksOnASingleLine: Never\n# 将 switch case: 中的 case: 合并为一行，禁用\nAllowShortCaseLabelsOnASingleLine: false\n# 将枚举类型合并为一行，禁用\nAllowShortEnumsOnASingleLine: false\n# 将短函数合并为一行，禁用\nAllowShortFunctionsOnASingleLine: None\n# 将短语句合并为一行，禁用\nAllowShortIfStatementsOnASingleLine: Never\n# 将 lambda 表达式合并为一行，禁用\nAllowShortLambdasOnASingleLine: None\n# 将短循环合并为一行，禁用\nAllowShortLoopsOnASingleLine: false\n# 将在返回类型后换行，禁用\nAlwaysBreakAfterReturnType: None\n# 将在多行字符串前换行，禁用\nAlwaysBreakBeforeMultilineStrings: false\n# 在模版声明后换行\nAlwaysBreakTemplateDeclarations: Yes\n# 编译器属性排除，不会参与格式化\nAttributeMacros: [ '__capability',\n                   '__output',\n                   '__ununsed',\n                   '[[maybe_unused]]' ]\n\n# 尽量将函数调用的参数放在同一行\nBinPackArguments: true\n# 尽量将函数声明的参数放在同一行\nBinPackParameters: true\n# 在位域声明的 : 前后都加空格\nBitFieldColonSpacing: Both\n# 大括号换行设置\nBraceWrapping:\n  # 在 case 后换行，禁用\n  AfterCaseLabel: false\n  # 在 class 后换行，禁用\n  AfterClass: false\n  # 在控制语句后换行，禁用\n  AfterControlStatement: Never\n  # 在 enum 后换行，禁用\n  AfterEnum: false\n  # 在函数定义后换行，禁用\n  AfterFunction: false\n  # 在 namespace 后换行，禁用\n  AfterNamespace: false\n  # 在结构体后换行，禁用\n  AfterStruct: false\n  # 在联合体后换行，禁用\n  AfterUnion: false\n  # 在 extern 后换行，禁用\n  AfterExternBlock: false\n  # 在 catch 后换行，禁用\n  BeforeCatch: false\n  # 在 else 前换行\n  BeforeElse: true\n  # 在 lambda 后换行，禁用\n  BeforeLambdaBody: false\n  # 在 while 前换行，禁用\n  BeforeWhile: false\n  # 换行缩进括号，禁用\n  IndentBraces: false\n  # 空函数的大括号换行\n  SplitEmptyFunction: true\n  # 空 class/struct/union 的大括号换行\n  SplitEmptyRecord: true\n  # 空 namespace 的大括号换行\n  SplitEmptyNamespace: true\n# 在二元操作符前换行\nBreakBeforeBinaryOperators: All\n# 在大括号前换行，使用自定义规则，在 BraceWrapping 中规定\nBreakBeforeBraces: Custom\n# 在 concept(c++20) 前换行\nBreakBeforeConceptDeclarations: Always\n# 在三元操作符前换行\nBreakBeforeTernaryOperators: true\n# 构造函数初始化列表在冒号 : 前，逗号 , 后换行\nBreakConstructorInitializers: BeforeColon\n# class 继承列表在冒号 : 前，逗号 , 后换行\nBreakInheritanceList: BeforeColon\n# 允许将字符串切割\nBreakStringLiterals: true\n# 最大列数\nColumnLimit: 80\n# 特殊注释的正则表达式，不会进行格式化\nCommentPragmas: '^ NO_STYLE:'\n# 将多个 namespace 合并为一行，禁用\nCompactNamespaces: false\n# 构造函数的初始化列表/继承列表的缩进宽度\nConstructorInitializerIndentWidth: 4\n# 续行的缩进宽度\nContinuationIndentWidth: 2\n# 去除 C++11 的列表初始化的大括号 { 后和 } 前的空格，禁用\nCpp11BracedListStyle: false\n# 分析文件使用最多的换行符并应用到整个文件，\n# 只有当无法得到结论时才会使用 UseCRLF，禁用\nDeriveLineEnding: true\n# 分析文件使用最多的指针/引用的对齐方式并应用到整个文件，\n# 只有当无法得到结论时才会使用 PointerAlignment，禁用\nDerivePointerAlignment: false\n# 关闭格式化，禁用\nDisableFormat: false\n# 访问描述符后的空行，只保留 MaxEmptyLinesToKeep 指定的行数\nEmptyLineAfterAccessModifier: Leave\n# 访问描述符前的空行，始终保留，除非是 class/struct 的开始\nEmptyLineBeforeAccessModifier: Always\n# 在命名空间结束后添加注释，与 ShortNamespaceLines 共同生效\nFixNamespaceComments: true\n# for-each 宏，作为循环语句进行格式化\nForEachMacros: [ 'RANGES_FOR', 'FOREACH' ]\n\n# if 宏，作为条件语句进行格式化\nIfMacros: [ 'IF' ]\n# 将 #include 分块，规则由 IncludeCategories 指定，暂未使用\n#IncludeBlocks: Regroup\n# 将 #include 分块，保留原有分块\nIncludeBlocks: Preserve\n# 对 #include 进行排序，匹配了某正则表达式的 #include 拥有对应的优先级，\n# 优先级越小排序越靠前，匹配不到的则默认优先级为 INT_MAX，暂未使用\nIncludeCategories:\n  # 正则\n  - Regex: '^\"(llvm|llvm-c|clang|clang-c)/'\n    # 优先级\n    Priority: 2\n    # 排序优先级，默认与 Priority 相同\n    SortPriority: 2\n    # 大小写敏感\n    CaseSensitive: true\n  - Regex: '^((<|\")(gtest|gmock|isl|json)/)'\n    Priority: 3\n    CaseSensitive: true\n  - Regex: '<[[:alnum:].]+>'\n    Priority: 4\n    CaseSensitive: true\n  - Regex: '.*'\n    Priority: 1\n    SortPriority: 0\n    CaseSensitive: true\n# 判断头文件是否为相关的头文件，用于排序\n# 如 a.cpp 与 a.h，设置为 a.cpp/a_test.cpp\nIncludeIsMainRegex: '(_test)?$'\n# 判断头文件是否包含实现，用于排序\nIncludeIsMainSourceRegex: '(*\\.hpp)$'\n# 访问控制符缩进，禁用\nIndentAccessModifiers: false\n# case 块缩进，禁用\nIndentCaseBlocks: false\n# case 标签缩进\nIndentCaseLabels: true\n# extern 块缩进，与 BraceWrapping.AfterExternBlock 共同生效\nIndentExternBlock: AfterExternBlock\n# 缩进 goto 标签，禁用\nIndentGotoLabels: false\n# 缩进预处理，在 # 后缩进\nIndentPPDirectives: AfterHash\n# 缩进 requires\nIndentRequiresClause: true\n# 缩进宽度\nIndentWidth: 4\n# 函数返回类型换行时，缩进函数声明/函数定义的函数名，禁用\nIndentWrappedFunctionNames: false\n# 自动插入大括号\nInsertBraces: true\n# 保留在块开始处的空行，禁用\nKeepEmptyLinesAtTheStartOfBlocks: false\n# lambda 表达式函数体缩进\nLambdaBodyIndentation: OuterScope\n# 语言，设置语言为 c++\nLanguage: Cpp\n\n# 开始一个块的宏的正则表达式\nMacroBlockBegin: \"^MACRO_BEGIN|NS_TABLE_HEAD$\"\n# 结束一个块的宏的正则表达式\nMacroBlockEnd: \"^MACRO_END|NS_TABLE_.*_END$\"\n# 最大连续空行\nMaxEmptyLinesToKeep: 1\n# namespace 缩进，禁用\nNamespaceIndentation: None\n# namespace 宏\nNamespaceMacros: [ 'NAMESPACE' ]\n# 预处理缩进，-1 表示使用默认值 IndentWidth\nPPIndentWidth: -1\n# 如果构造函数的初始化列表超过一行则换行\nPackConstructorInitializers: NextLine\n\n# 有些情况下你会觉得怎么排版都达不到完美，\n# 只能各方面妥协一下（例如你限定了行宽，但注释想放宽松点允许超一些）。\n# penalty 简单来说就是給每一次“违规”设定一个罚分，\n# clang-format 帮你选择最终吃到的总罚分比较少的策略。\n# 在赋值前后换行时的罚分\n# @see https://www.zhihu.com/question/438473572/answer/1668773325\n# 在赋值前后打断的罚分\nPenaltyBreakAssignment: 2\n# 在函数调用 fun( 后打断的罚分\nPenaltyBreakBeforeFirstCallParameter: 19\n# 在注释中换行的罚分\nPenaltyBreakComment: 300\n# 在第一个 << 点打断的罚分\nPenaltyBreakFirstLessLess: 120\n# 在 ( 后打断的罚分\nPenaltyBreakOpenParenthesis: 100\n# 在字符串常量中换行的罚分\nPenaltyBreakString: 1000\n# 在模版声明后打断的罚分\nPenaltyBreakTemplateDeclaration: 10\n# 注释的每个字符超出 ColumnLimit 的罚分\nPenaltyExcessCharacter: 1000000\n# 每个空格缩进的罚分，\n# counted relative to leading non-whitespace column\nPenaltyIndentedWhitespace: 0\n# 函数返回类型单独成行的罚分\nPenaltyReturnTypeOnItsOwnLine: 0\n# 指针和引用对齐，左对齐\nPointerAlignment: Left\n# 修饰符对齐，由 QualifierOrder 指定\nQualifierAlignment: Custom\n# 修饰符顺序\nQualifierOrder: [ 'inline', 'static', 'const',  'volatile','type' ]\n# 将字符串格式化，与 ProtocolBuffers 配合使用，未使用\nRawStringFormats:\n  - Language: Cpp\n    BasedOnStyle: InheritParentConfig\n    Delimiters: [ pb ]\n# 引用对齐，与 PointerAlignment 相同\nReferenceAlignment: Pointer\n# 重新排版注释\nReflowComments: true\n# requires 位置，单独成行\nRequiresClausePosition: OwnLine\n# 在定义块之间添加空行，总是添加\nSeparateDefinitionBlocks: Always\n# 设置短 namespace 长度，0 表示将所有 namespace 视为 short namespace\nShortNamespaceLines: 0\n# 排序 #include，按照字母序\nSortIncludes: CaseInsensitive\n# 排序 using 声明\nSortUsingDeclarations: true\n# 在 C 风格类型转换后添加空格，禁用\nSpaceAfterCStyleCast: false\n# 在逻辑非 ! 后添加空格，禁用\nSpaceAfterLogicalNot: false\n# 在 template 后添加空格\nSpaceAfterTemplateKeyword: true\n# 在指针修饰符周围添加空格，使用 PointerAlignment\nSpaceAroundPointerQualifiers: Default\n# 在赋值运算符之前添加空格\nSpaceBeforeAssignmentOperators: true\n# 在 case 的 : 前添加空格，禁用\nSpaceBeforeCaseColon: false\n# 在 c++11 大括号初始化前添加空格\nSpaceBeforeCpp11BracedList: true\n# 在构造函数初始化列表 : 前添加空格\nSpaceBeforeCtorInitializerColon: true\n# 在继承 : 前添加空格\nSpaceBeforeInheritanceColon: true\n# 在 ( 前添加空格，由 SpaceBeforeParensOptions 指定\nSpaceBeforeParens: Custom\n# 在 ( 前添加空格的规则\nSpaceBeforeParensOptions:\n  # 在控制语句后添加\n  AfterControlStatements: true\n  # 在 for-each 宏后添加，禁用\n  AfterForeachMacros: false\n  # 在函数声明后添加，禁用\n  AfterFunctionDeclarationName: false\n  # 在函数定义后添加，禁用\n  AfterFunctionDefinitionName: false\n  # 在 if 宏后添加，禁用\n  AfterIfMacros: false\n  # 在重载运算符后添加，禁用\n  AfterOverloadedOperator: false\n  # 在 requires 后添加\n  AfterRequiresInClause: true\n  # 在表达式中的 requires 后添加，禁用\n  AfterRequiresInExpression: false\n  # 在非空的 () 前添加，禁用\n  BeforeNonEmptyParentheses: false\n# 在范围 for 循环 : 前添加空格\nSpaceBeforeRangeBasedForLoopColon: true\n# 在 [ 前添加空格，禁用\nSpaceBeforeSquareBrackets: false\n# 在空 {} 中添加空格\nSpaceInEmptyBlock: true\n# 在空的圆括号中添加空格，禁用\nSpaceInEmptyParentheses: false\n# 在行后注释前添加空格(只适用于 //)\nSpacesBeforeTrailingComments: 4\n# 在尖括号的 < 后和 > 前添加空格，禁用\nSpacesInAngles: Never\n# 在 C 风格类型转换的括号中添加空格，禁用\nSpacesInCStyleCastParentheses: false\n# 在条件判断中 ( 后 ) 前添加空格，禁用\nSpacesInConditionalStatement: false\n# 在容器字面量中添加空格\nSpacesInContainerLiterals: true\n# 行注释前缀中的空格\nSpacesInLineCommentPrefix:\n  # 最大值\n  Maximum: 1\n  # 最小值\n  Minimum: 1\n# 在 ( 后和 ) 前添加空格，禁用\nSpacesInParentheses: false\n# 在 [ 后和 ] 前添加空格，lamda 表达式和未指明大小的数组的声明不受影响，禁用\nSpacesInSquareBrackets: false\n# cpp 标准，使用最新支持的\nStandard: Latest\n# 需要识别为宏的代码块前缀\nStatementAttributeLikeMacros: [ ]\n# 需要解释为完整代码段的宏\nStatementMacros: [ ]\n# tab 宽度，8 个空格\nTabWidth: 8\n# 需要识别为宏，而不是函数调用的宏\nTypenameMacros: [ ]\n# 使用 \\r\\n 换行符，与 DeriveLineEnding 共同生效，禁用\nUseCRLF: false\n# 使用 tab，禁用\nUseTab: Never\n# 对空格敏感的宏\nWhitespaceSensitiveMacros: [ ]\n...\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2998046875,
          "content": "\n# This file is a part of Simple-XX/SimpleKernel\n# (https://github.com/Simple-XX/SimpleKernel).\n#\n# .gitinnore for Simple-XX/SimpleKernel.\n\n*.o\n*.gch\n*.tags*\n.DS_Store\nbuild*\ngrub-2.04.tar.xz\ngrub-2.04\ntools/opensbi\niso\n*.img\n*.iso\n*.bin\nnull.d\ntools/aarch64-unknown-linux-gnu*\n.gdbinit\ntools/opensbi/build\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 1.5009765625,
          "content": "\n# This file is a part of Simple-XX/SimpleKernel\n# (https://github.com/Simple-XX/SimpleKernel).\n#\n# CMakeLists.txt for Simple-XX/SimpleKernel.\n# CMake 入口\n\n# 设置最小 cmake 版本\ncmake_minimum_required(VERSION 3.13)\n\n# 跳过编译器检查\nset(CMAKE_C_COMPILER_WORKS TRUE)\nset(CMAKE_CXX_COMPILER_WORKS TRUE)\n\n# 设置项目名与使用的语言\nproject(SimpleKernel LANGUAGES CXX ASM)\n\n# 禁止原地编译\nif(${SimpleKernel_SOURCE_DIR} STREQUAL ${SimpleKernel_BINARY_DIR})\n    message(FATAL_ERROR \"In-source builds not allowed. Please make a new directory (called a build directory) and run CMake from there.\")\nendif()\n\n# 设置使用的 C/C++ 版本\nset(CMAKE_C_STANDARD 11)\nset(CMAKE_CXX_STANDARD 17)\n\n# 设置辅助 cmake 脚本路径\nset(CMAKE_MODULE_PATH \"${SimpleKernel_SOURCE_DIR}/cmake\" ${CMAKE_MODULE_PATH})\n\n# 设置 arch\ninclude(${SimpleKernel_SOURCE_DIR}/cmake/arch_detector.cmake)\n# 引入添加头文件函数\ninclude(${SimpleKernel_SOURCE_DIR}/cmake/header_files.cmake)\n# 引入添加汇编文件函数\ninclude(${SimpleKernel_SOURCE_DIR}/cmake/find_asm_files.cmake)\n\n# 设置输出路径\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\n\n# 设置内核名称\nset(KernelName kernel.elf)\n\n# 设置 src 路径\nset(SimpleKernel_SOURCE_CODE_DIR ${SimpleKernel_SOURCE_DIR}/src)\n# 跳转到 SimpleKernel_SOURCE_CODE_DIR 下的 CMakeLists\nadd_subdirectory(${SimpleKernel_SOURCE_CODE_DIR})\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0576171875,
          "content": "MIT License\n\nCopyright (c) 2018-2024 Simple-XX\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n----------\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.669921875,
          "content": "![github ci](https://github.com/Simple-XX/SimpleKernel/workflows/CMake/badge.svg) ![last-commit](https://img.shields.io/github/last-commit/google/skia.svg) ![languages](https://img.shields.io/github/languages/count/badges/shields.svg) ![MIT License](https://img.shields.io/github/license/mashape/apistatus.svg) [![LICENSE](https://img.shields.io/badge/license-Anti%20996-blue.svg)](https://github.com/996icu/996.ICU/blob/master/LICENSE) [![996.icu](https://img.shields.io/badge/link-996.icu-red.svg)](https://996.icu)\n\n[English](./README_en.md) | [中文](./README.md)\n\n# SimpleKernel\n\n## 关键词\n\n- kernel\n- x86, x86_64, riscv64\n- C, C++, AT&T ASM\n- cmake\n- multiboot2, opensbi\n\n## 简介\n\n提供了各个阶段完成度不同的内核，你可以从自己喜欢的地方开始。\n\n各分支内容：\n\n1. boot: 系统的启动，从引导程序到内核入口\n2. printf: 基本的字符输出，便于调试\n3. parse_boot_info: 对引导程序传递信息的初步解析\n4. pmm: 物理内存初始化\n5. vmm: 虚拟内存初始化\n6. heap: 堆管理\n7. lib: C++ std/stl 的部分支持\n8. intr: 中断管理\n9. 进程: TODO\n10. 文件系统: TODO\n11. 设备管理: TODO\n12. 系统调用: TODO\n13. 用户模式: TODO\n\n## 开发环境\n\n- 基本工具\n\n    交叉编译器 `x86_64-elf-gcc`, `riscv64-unknown-elf-gcc`, `arm-none-eabi-gcc`\n\n    调试工具 `x86_64-elf-gdb`, `riscv64-unknown-elf-gdb`, `arm-none-eabi-gdb`\n\n    构建工具 `cmake`\n\n    模拟器 `bochs`, `qemu`\n\n- For x86\n\n    引导程序 `grub`\n    \n    制作内核镜像 `xorriso`\n    \n- For riscv64\n\n    引导程序 `opensbi`\n    \n- For arm\n\n    TODO\n\n## 如何运行\n\n```shell\ngit clone https://github.com/Simple-XX/SimpleKernel.git\ncd SimpleKernel/\nbash ./run.sh\n```\n\n运行截图\n\n![](https://tva1.sinaimg.cn/large/00831rSTly1gdl6j8bxw7j317s0u0td9.jpg)\n\n## 目录结构\n\n- 原则\n\n    整个工程按照功能模块划分子目录，每个子目录再划分头文件和源文件目录，以便架构清晰、易懂。\n\n### 目录设计\n\n- 原则\n\n    目录的命名能准确描述模块的基本功能，建议用小写字母且不含下划线、点等特殊符号；\n\n    目录必须放于相包含的父目录之下，并需要明确与其他目录间的耦合性。\n\n- 示例\n\n\tkernel：系统内核部分；\n\tlibs：依赖库；\n\n### 依赖关系\n\n- 原则\n\n    新添加组件往往依赖于系统原有组件，必须以最小耦合的方式明确所直接依赖的组件。\n\n### 头文件\n\n#### 文件命名\n\n头文件命名能准确描述文件所包含的模块内容，达到通俗、易懂的目的。\n\n## CMake\n\n## 测试\n\n### 自动集成\n\n每次 push 会使用 Github Action 进行测试，可以通过编译即可。\n\n## 代码风格\n\n- git commit 规范：\n\n    [tools/Git Commit 规范.pdf](./tools/Git Commit 规范.pdf)\n\n- 代码样式\n\n    由 .clang-format 指定\n\n## TODO\n\n- 并发\n- 文件系统\n- 设备驱动\n\n## 贡献者\n\n[MRNIU](https://github.com/MRNIU)\n\n[cy295957410](https://github.com/cy295957410)\n\n[rakino](https://github.com/rakino)\n\n[xiaoerlaigeid](https://github.com/xiaoerlaigeid)\n\n[digmouse233](https://github.com/digmouse233)\n\n[KehRoche](https://github.com/KehRoche)\n\n## 贡献\n\nFree to PR!\n\n## 感谢\n\n此项目参考了很多优秀的项目和资料。\n\n[osdev](https://wiki.osdev.org)\n\n[GRUB 在 Mac 上的安装](https://wiki.osdev.org/GRUB#Installing_GRUB_2_on_OS_X)\n\n[multiboot](https://www.gnu.org/software/grub/manual/multiboot/multiboot.html)\n\n《程序员的自我修养--链接、装载与库》(俞甲子 石凡 潘爱民)\n\n[JamesM's kernel development tutorials](http://www.jamesmolloy.co.uk/tutorial_html/1.-Environment%20setup.html)\n\n[xOS](https://github.com/fengleicn/xOS)\n\n[hurlex](http://wiki.0xffffff.org/posts/hurlex-8.html)\n\n[howerj/os](https://github.com/howerj/os)\n\n[cfenollosa/os-tutorial](https://github.com/cfenollosa/os-tutorial)\n\n[omarrx024/xos](https://github.com/omarrx024/xos)\n\n[PurpleBooth/project-title](https://gist.github.com/PurpleBooth/109311bb0361f32d87a2%23project-title)\n\n[0xAX weblong](http://0xax.blogspot.com/search/label/asm)\n\n[How-to-Make-a-Computer-Operating-System](https://github.com/SamyPesse/How-to-Make-a-Computer-Operating-System)\n\n[coding-style](https://www.kernel.org/doc/Documentation/process/coding-style.rst)\n\n[DNKernel](https://github.com/morimolymoly/DNKernel)\n\n[c-algorithms](https://github.com/fragglet/c-algorithms)\n\n[Linux内核中的中断栈与内核栈的补充说明](http://blog.chinaunix.net/uid-23769728-id-3077874.html)\n\n[Linux进程管理 (1)进程的诞生](https://www.cnblogs.com/arnoldlu/p/8466928.html)\n\n[SynestiaOS](https://github.com/SynestiaOS/SynestiaOS)\n\n## 捐助者\n\n- [digmouse233](https://github.com/digmouse233)\n- l*e\n- fslongjin\n\n## 版权信息\n\n此项目使用 MIT 许可证\n"
        },
        {
          "name": "README_en.md",
          "type": "blob",
          "size": 4.8662109375,
          "content": "![github ci](https://github.com/Simple-XX/SimpleKernel/workflows/CMake/badge.svg) ![last-commit](https://img.shields.io/github/last-commit/google/skia.svg) ![languages](https://img.shields.io/github/languages/count/badges/shields.svg) ![MIT License](https://img.shields.io/github/license/mashape/apistatus.svg) [![LICENSE](https://img.shields.io/badge/license-Anti%20996-blue.svg)](https://github.com/996icu/996.ICU/blob/master/LICENSE) [![996.icu](https://img.shields.io/badge/link-996.icu-red.svg)](https://996.icu)\n\n[English](./README_en.md) | [中文](./README.md)\n\n# SimpleKernel\n\n## Key Words\n\n- kernel\n- x86, x86_64, riscv64\n- C, C++, AT&T ASM\n- cmake\n- multiboot2, opensbi\n\n## Abstract\n\nSimpleKernel, a simple kernel for learning. Contains the basic functionality of an operating system\n\nKernels with different levels of completion are available, and you can start from where you like.\n\nEach branch:\n\n1. boot: system startup, from the bootloader to the kernel entry\n2. printf: basic character output for debud\n3. parse_boot_info: reliminary parsing of the information passed by the bootloader\n4. pmm: physical memory management\n5. vmm: virtual memory management\n6. heap: heap management\n7. lib: part of c++ std/stl\n8. intr: interrupt management\n9. task: TODO\n10. filesystem: TODO\n11. device management: TODO\n12. syscall: TODO\n13. user mode: TODO\n\n## Environment\n\n- Common tools\n\n    Cross compiler `x86_64-elf-gcc`, `riscv64-unknown-elf-gcc`, `arm-none-eabi-gcc`\n\n    Debug `x86_64-elf-gdb`, `riscv64-unknown-elf-gdb`, `arm-none-eabi-gdb`\n\n    Build `cmake`\n\n    Simulator `bochs`, `qemu`\n\n- For x86\n\n    Bootloader `grub`\n    \n    ISO `xorriso`\n    \n- For riscv64\n\n    Bootloader `opensbi`\n    \n- For arm\n\n    TODO\n\n## RUN\n\n```shell\ngit clone https://github.com/Simple-XX/SimpleKernel.git\ncd SimpleKernel/\nbash ./run.sh\n```\n\nScreenshot\n\n![](https://tva1.sinaimg.cn/large/00831rSTly1gdl6i75r60j317s0u046c.jpg)\n\n## Directory Structure\n\nThe whole project according to the functional modules delimited molecular directory, each subdirectory and then divided header file and source file directory, so that the architecture is clear and easy to understand.\n\n### Directory Design\n\n- Principle\n\n    The naming of the directory should accurately describe the basic function of the module, it is recommended to use lowercase letters and do not contain underline, dot and other special symbols;\n\n    Directories must be placed under the parent directory that they contain, and they need to be explicitly coupled to other directories.\n\n### Dependencies\n\n- Principle\n\n    New components are often dependent on existing components of the system, and the components that are directly dependent must be specified with minimal coupling.\n\n### Header File\n\n#### Naming\n\n- Principle\n\n    Header file naming should accurately describe the contents of the module contained in the file to achieve the purpose of easy to understand.\n\n## CMake\n\n## Test\n\n### CI\n\nEach push will be tested using Github Action.\n\n## Code Style\n\n- git commit：\n\n    [tools/Git Commit 规范.pdf](./tools/Git Commit 规范.pdf)\n\n- code style\n\n    Specified by .clang-format\n\n## TODO\n\n- concurrent\n- File system\n- drive\n\n## CONTRIBUTORS\n\n[MRNIU](https://github.com/MRNIU)\n\n[cy295957410](https://github.com/cy295957410)\n\n[rakino](https://github.com/rakino)\n\n[xiaoerlaigeid](https://github.com/xiaoerlaigeid)\n\n[digmouse233](https://github.com/digmouse233)\n\n[KehRoche](https://github.com/KehRoche)\n\n## CONTRIBUTING\n\nFree to PR!\n\n## Thanks\n\n[osdev](https://wiki.osdev.org)\n\n[GRUB 在 Mac 上的安装](https://wiki.osdev.org/GRUB#Installing_GRUB_2_on_OS_X)\n\n[multiboot](https://www.gnu.org/software/grub/manual/multiboot/multiboot.html)\n\n《程序员的自我修养--链接、装载与库》(俞甲子 石凡 潘爱民)\n\n[JamesM's kernel development tutorials](http://www.jamesmolloy.co.uk/tutorial_html/1.-Environment%20setup.html)\n\n[xOS](https://github.com/fengleicn/xOS)\n\n[hurlex](http://wiki.0xffffff.org/posts/hurlex-8.html)\n\n[howerj/os](https://github.com/howerj/os)\n\n[cfenollosa/os-tutorial](https://github.com/cfenollosa/os-tutorial)\n\n[omarrx024/xos](https://github.com/omarrx024/xos)\n\n[PurpleBooth/project-title](https://gist.github.com/PurpleBooth/109311bb0361f32d87a2%23project-title)\n\n[0xAX weblong](http://0xax.blogspot.com/search/label/asm)\n\n[How-to-Make-a-Computer-Operating-System](https://github.com/SamyPesse/How-to-Make-a-Computer-Operating-System)\n\n[coding-style](https://www.kernel.org/doc/Documentation/process/coding-style.rst)\n\n[DNKernel](https://github.com/morimolymoly/DNKernel)\n\n[c-algorithms](https://github.com/fragglet/c-algorithms)\n\n[Linux内核中的中断栈与内核栈的补充说明](http://blog.chinaunix.net/uid-23769728-id-3077874.html)\n\n[Linux进程管理 (1)进程的诞生](https://www.cnblogs.com/arnoldlu/p/8466928.html)\n\n[SynestiaOS](https://github.com/SynestiaOS/SynestiaOS)\n\n## Donors\n\n- [digmouse233](https://github.com/digmouse233)\n- l*e\n- fslongjin\n\n## CopyRight\n\nMIT LICENCE\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "run.sh",
          "type": "blob",
          "size": 2.546875,
          "content": "#!/bin/bash\n\n# This file is a part of Simple-XX/SimpleKernel\n# (https://github.com/Simple-XX/SimpleKernel).\n#\n# run.sh for Simple-XX/SimpleKernel.\n# 在虚拟机中运行内核\n\n# shell 执行出错时终止运行\nset -e\n# 输出实际执行内容\n#set -x\n\nsource ./tools/env.sh\nexport PATH=\"${GRUB_PATH}:$PATH\"\n\n# 重新编译\nmkdir -p ./build_${ARCH}/\nrm -rf ./build_${ARCH}/*\ncd ./build_${ARCH}\ncmake -DCMAKE_TOOLCHAIN_FILE=./cmake/${TOOLS} -DARCH=${ARCH} -DCMAKE_BUILD_TYPE=DEBUG ..\nmake\ncd ../\n\n# 如果是 i386/x86_64，需要判断是否符合 multiboot2 标准\nif [ ${ARCH} == \"i386\" ] || [ ${ARCH} == \"x86_64\" ]; then\n    if ${GRUB_PATH}/grub-file --is-x86-multiboot2 ${kernel}; then\n        echo Multiboot2 Confirmed!\n    else\n        echo NOT Multiboot2!\n        exit\n    fi\nfi\n\n# 如果是 riscv 64，需要使用 opensbi\nif [ ${ARCH} == \"riscv64\" ]; then\n    # OPENSBI 不存在则编译\n    if [ ! -f ${OPENSBI} ]; then\n        echo build opensbi.\n        cd ./tools/opensbi\n        mkdir -p build\n        export CROSS_COMPILE=${TOOLCHAIN_PREFIX}\n        export FW_JUMP=y\n        export FW_JUMP_ADDR=0x80200000\n        export PLATFORM_RISCV_XLEN=64\n        export PLATFORM=generic\n        make\n        cd ../..\n        echo build opensbi done.\n    fi\nfi\n\n# 检测路径是否合法，发生过 rm -rf -f /* 的惨剧\nif [ \"${iso_boot}\" == \"\" ]; then\n    echo iso_boot path error.\nelse\n    mkdir -p ${iso_boot}\n    rm -rf -f ${iso_boot}/*\nfi\n\n# 初始化 gdb\nif [ ${DEBUG} == 1 ]; then\n    cp ./tools/gdbinit ./.gdbinit\n    echo \"\" >> ./.gdbinit\n    echo \"file \"${kernel} >> ./.gdbinit\n    if [ ${ARCH} == \"riscv64\" ]; then\n        echo \"add-symbol-file \"${OPENSBI} >> ./.gdbinit\n    fi\n    echo \"target remote localhost:1234\" >> ./.gdbinit\n    GDB_OPT='-S -gdb tcp::1234'\n    echo \"Run gdb-multiarch in another shell\"\nfi\n\n# 设置 grub 相关数据\nif [ ${ARCH} == \"i386\" ] || [ ${ARCH} == \"x86_64\" ]; then\n    mkdir -p ${iso_boot_grub}\n    cp ${kernel} ${iso_boot}\n    cp ./tools/grub.cfg ${iso_boot_grub}/\nfi\n\n# 运行虚拟机\nif [ ${ARCH} == \"i386\" ] || [ ${ARCH} == \"x86_64\" ]; then\n    qemu-system-x86_64 -cdrom ${iso} -m 128M \\\n    -monitor telnet::2333,server,nowait -serial stdio \\\n    ${GDB_OPT}\nelif [ ${ARCH} == \"aarch64\" ]; then\n    qemu-system-aarch64 -machine virt -cpu cortex-a72 -kernel ${kernel} \\\n    -monitor telnet::2333,server,nowait -serial stdio -nographic \\\n    ${GDB_OPT}\nelif [ ${ARCH} == \"riscv64\" ]; then\n    qemu-system-riscv64 -machine virt -bios ${OPENSBI} -kernel ${kernel} \\\n    -monitor telnet::2333,server,nowait -serial stdio -nographic \\\n    ${GDB_OPT}\nfi\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}