{
  "metadata": {
    "timestamp": 1736709673742,
    "page": 34,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "easychen/pushdeer",
      "stars": 4668,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitee",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1494140625,
          "content": ".DS_Store\n\nandroid/app_self*\nandroid/pushdeerclient\nandroid/app/java/com/pushdeer/os/values/App*\nandroid/app/build\nandroid/app/debug\nandroid/app/release\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.1474609375,
          "content": "本项目禁止商用（包括但不限于搭建后挂广告或售卖会员、打包后上架商店销售等），对非商业用途采用 GPLV2 授权"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.90234375,
          "content": "> ⚠️ 目前，官方架设的Android版本因接口权限停止无法使用，[详情请点击](https://github.com/easychen/pushdeer/issues/150)\n\n> ⚠️ 自架版服务器端需每年更新推送证书，如果之前架设的服务突然无法收到推送，请尝试拉取部署最新代码，或者[手动更新证书](https://github.com/easychen/pushdeer/tree/main/push)\n\nPushDeer是一个可以自行架设的无APP推送服务，同时也为因为某些原因无法使用无APP推送方案的同学提供有APP/自制设备方案。\n\n[🐙🐱 GitHub仓库](https://github.com/easychen/pushdeer) [🔮 中国大陆镜像仓库@Gitee](https://gitee.com/easychen/pushdeer)\n\n本项目已经实现的方案/端包括：\n\n- 无APP方案：\n  - 轻APP（APP Clip）\n  - 快应用\n- 有APP方案：\n  - iOS客户端\n  - Mac客户端\n  - Android客户端\n- 自制设备方案：\n  - DeerESP（ESP8266/ESP32）\n\n![](iot/image/deeresp.gif)\n\n👉[点此查看如何将PushDeer消息推送到成本不到40元的自制设备上](iot/README.md) \n\n---\n\n|登入|设备|Key|消息|设置|\n|-|-|-|-|-|\n|![](doc/design_and_resource/登入.png)|![](doc/design_and_resource/设备.png)|![](doc/design_and_resource/key.png)|![](doc/design_and_resource/消息.png)|![](doc/design_and_resource/设置.png)\n\n# 子项目和核心贡献者\n\n|功能|核心贡献人|预期完成时间|最低版本兼容|本周进度|\n|-|-|-|-|-|\n|iOS客户端/Mac客户端/轻APP|[Hext123](https://github.com/Hext123)|已完成|iOS14|第一版完成，代码在iOS目录下|\n|Android客户端|[WolfHugo](https://github.com/alone-wolf)|已完成|5.1|第一版开发完成，release页面可下载。Websocket方案准备中|\n|快应用|[7YHong](https://github.com/7YHong)|已完成|-|代码在[quickapp目录下](quickapp)，可自行上架|\n|物联网版本DeerESP|[Easy](https://ftqq.com) |已完成|-|代码在[iot目录下](iot)，专用设备PCB和外壳设计中|\n|API|[Easy](https://ftqq.com) [古俊杰](https://github.com/ilovintit)|已完成|-|-|\n|gorush的mi push版本|[SinTod](https://www.sintod.cn/)|已完成|-|代码在[push/gorush-with-mipush目录下](push/gorush-with-mipush)|\n\n\n\n# 试用\n\n![](doc/image/video.gif)\n\n## 使用官方在线版本\n\n官方在线版不用自行架设服务器端，只需启动客户端即可\n\n### iOS14+\n\n![](doc/image/clipcode.png)\n\n苹果手机（iOS 14+）用系统摄像头扫描上边的码即可拉起轻应用。亦可在苹果商店搜索「PushDeer」安装。\n\n> 注意：这里不要安装PushDeer自架版\n\n### MacOS 11+\n\nPushDeer有Mac客户端，亦支持推送。可在Mac应用商店中搜索「PushDeer」安装。\n\n### Android\n\n快应用尚在开发，可下载并安装Android测试版APP([GitHub](https://github.com/easychen/pushdeer/releases/tag/android1.0alpha)|[Gitee](https://gitee.com/easychen/pushdeer/releases/android1.0alpha))。\n\n\n### 发送消息\n\n1. 通过apple账号（或微信账号·仅Android版支持）登录\n1. 切换到「设备」标签页，点击右上角的加号，注册当前设备\n1. 切换到「Key」标签页，点击右上角的加号，创建一个Key\n1. 通过访问后边的URL即可推送内容：https://api2.pushdeer.com/message/push?pushkey=key&text=要发送的内容\n\n> 注意注册设备用到了device token，应用一旦重装，device token会变，所以需要重新注册一次。\n\n### 发送实例\n\n发送文字：\n\n```\nhttps://api2.pushdeer.com/message/push?pushkey=key&text=要发送的内容\n```\n\n发送图片：\n\n```\nhttps://api2.pushdeer.com/message/push?pushkey=<key>&text=<图片URL>&type=image\n```\n\n发送Markdown：\n\n```\nhttps://api2.pushdeer.com/message/push?pushkey=<key>&text=标题&desp=<markdown>&type=markdown\n```\n\n在URL中可以用`%0A`换行，当参数中有特殊字符时，需要进行urlencode，因此更建议通过函数或者SDK发送。\n\n- [Python SDK](https://github.com/gaoliang/pypushdeer) by [Gao Liang](https://github.com/gaoliang)\n- [Go SDK](https://github.com/Luoxin/go-pushdeer-sdk) by [Luoxin](https://github.com/Luoxin)\n- [Rust SDK](https://github.com/abgelehnt/rupushdeer) by [Chi](https://github.com/abgelehnt)\n\nPHP函数：\n\n```php\nfunction pushdeer_send($text, $desp = '', $type='text', $key = '[PUSHKEY]')\n{\n    $postdata = http_build_query(array( 'text' => $text, 'desp' => $desp, 'type' => $type , 'pushkey' => $key ));\n    $opts = array('http' =>\n    array(\n        'method'  => 'POST',\n        'header'  => 'Content-type: application/x-www-form-urlencoded',\n        'content' => $postdata));\n    \n    $context  = stream_context_create($opts);\n    return $result = file_get_contents('https://api2.pushdeer.com/message/push', false, $context);\n}\n```\n\n### 将 PushDeer 接入 ServerChan \n\n由于 PushDeer 刚开发，很多软件和平台都尚未整合其接口，你可以将 PushDeer 接入Server酱作为通道使用，效果是：\n\n1. 使用`sendkey`调用Server酱接口\n2. 在 PushDeer 客户端收到通知\n\n接入方式如下：\n\n1. 登入 sct.ftqq.com ，选择「消息通道」页面，选择「推荐通道」中的「PushDeer」\n1. 将在PushDeer客户端中生成的Key填入即可\n\n![](doc/image/2022-02-02-21-39-16.png)\n\n如果你使用的是自架服务器，那么也可以通过「其他通道」中的「自定义」来修改转发格式和文案。具体操作是，在「自定义 WebHook 配置用 json」中填入以下内容:\n\n```json\n{\n\t\"url\":\"<endpoint>/message/push?pushkey=<pushkey>\",\n\t\"values\":[\n\t\t{\"type\":\"markdown\"},\n                 {\"text\":\"{{title}} \"},\n                 {\"desp\":\"{{desp}} [查看详情]({{url}})\"}\n\t]\n}\n```\n\n注意将 `<endpoint>` 换成你自架服务器的地址，将 `{{pushkey}}` 换成你自己的 PushDeer 账号中的 key，保存即可。可点右侧的测试按钮测试效果。\n\n## 使用自架服务器端和自架版客户端\n\n### 自架服务器端\n\n除了使用官方架设的服务器端，你也可以架设自己的服务器端。本仓库支持通过docker部署服务器端。\n\n如果你没有云服务器，可以看看[腾讯云30~50元首单的特价服务器](https://curl.qcloud.com/VPjlS4gj)\n\n#### Docker-compose\n\n首先请确保服务器(假设其IP或域名为$AAA)上支持docker和docker-compose。\n\n然后运行以下代码：\n\n```\ngit clone https://github.com/easychen/pushdeer.git\ncd pushdeer\ndocker-compose -f docker-compose.self-hosted.yml up --build -d\n```\n\n如果你的服务器连接GitHub有困难，可以使用Gitee的代码，但需要核对是否为最新版本（有可能没同步）\n```\ngit clone https://gitee.com/easychen/pushdeer.git\ncd pushdeer\ndocker-compose -f docker-compose.self-hosted.yml up --build -d \n```\n\n> 如提示docker服务未安装/找不到/未启动，可在 docker-compose 前加 sudo 再试\n\n等待初始化完成后，访问 `$AAA(需替换为服务器端IP或域名):8800`，看到扫码提示和图片则说明容器已经启动。\n\n> ⚠️ 自架服务器端需每年2月拉取一次更新推送证书\n\n如果您在部署中遇到问题，可按[调试文档](/doc/调试文档.md)定位并发现错误信息。\n\n<!--\n#### 单一容器部署方案\n\n对于很多不能运行docker-compose的容器环境，可以直接使用 pushdeer 镜像。该镜像中已经包含了 redis 服务，但需要通过环境变量指定数据库等信息：\n\n```\ndocker run -e DB_DATABASE=* -e DB_HOST=* -e DB_PORT=*28740* -e DB_USERNAME=* -e DB_PASSWORD=* -e DB_TIMEZONE=+08:00  -e WEB_PHP_SOCKET=127.0.0.1:8000 -p 9000:9000 ccr.ccs.tencentyun.com/ftqq/pushdeercore\n```\n\n请将上述命令中的`*`替换为对应的数据库信息。\n-->\n\n### 使用自架版客户端\n\n![](doc/image/2022-02-02-21-45-29.png)\n\n在苹果商店搜索「PushDeer·自架版」安装并启动。\n\n![](doc/image/2022-02-02-21-14-21.png)\n\n在启动界面输入 `$AAA(需替换为服务器端IP或域名):8800`，点保存。如果通信顺利，即可顺利完成「通过Apple登录」。如输入错误，可点击「重置API endpoint」重新输入。\n\n![](doc/image/2022-02-02-21-17-45.png)\n\n登入成功后，亦可随时在设置页面重置 API endpoint。\n\n![](doc/image/2022-02-02-21-18-49.png)\n\n\n### 生产环境的配置强化/优化\n\n参见[𐂂安装文档](doc/安装文档.md)\n\n\n# 关于轻应用\n\n> 轻应用找不到了怎么办？\n\n在搜索框搜索pushdeer就能找到。\n\n> 轻应用怎么清理掉?占空间么?\n\n系统设置里边有一个轻应用管理，在里边可以清理。30天不用会自动清理掉。注意重新安装后设备id会变动，需要再手动注册一遍。\n\n# 开发说明\n\n视频版设计文档：  [📼 项目视频说明](https://www.bilibili.com/video/BV1Ar4y1S7em/) [📼 项目架构和模块说明](https://www.bilibili.com/video/BV1ZS4y1T7Bf/)\n\n\n## 目录说明\n\n- api: Laravel实现的API接口，[点此查看请求和返回demo](doc/api/PushDeerOS.md)\n- docker: API实现的docker封装，一键启动，方便使用\n- doc: 文档目录，包括界面设计源文件（Adobe XD）和资源文件（logo和avatar）\n- push: 基于 [gorush](https://github.com/appleboy/gorush) 架设的推送微服务，配置文件开启 async 可以提升发送速度\n- ios: 用于放置 iOS 源文件，`ios/Prototype_version` 目录是我边学边写的原型验证版本（SwiftUI+Moya+Codable），很多地方需要重写，仅供参考\n- quickapp: 用于放置快应用源代码\n- android: 用于放置安卓客户端源代码\n\n## 开发环境搭建\n\n### 下载代码\n\n```git clone https://github.com/easychen/pushdeer.git```\n\n\n### 启动docker环境\n\n运行 `docker-compose up -d`，启动API。默认访问地址为`http://127.0.0.1:8800`。可修改`docker-compose.yml`调整端口。\n\n\n### API 说明\n\n[在线文档（Swagger）](https://ilovintit.github.io/pushdeer-api-doc/#/) \n\nAPI_BASE=http://127.0.0.1:8800\n\n认证方式：通过登入接口获得`token`，通过`post`和`get`方式附带`token`参数即可自动登入。\n\n#### 模拟登入(环境变量APP_DEBUG=true时可用)\n\n`GET /login/fake`\n\n#### 通过苹果 idToken 登入\n\n`POST /login/idtoken`\n\n|参数|说明|备注|\n|-|-|-|\n|idToken|Sign in with Apple 中得到的 idToken|\n\n#### 通过微信 oauth code 登入\n\n`POST /login/wecode`\n\n|参数|说明|备注|\n|-|-|-|\n|code|客户端微信授权得到的code|\n\n\n#### 合并用户并将旧用户删除\n\n`POST /user/merge`\n\n|参数|说明|备注|\n|-|-|-|\n|token|认证token|\n|type|字符串，必须为 apple 或者 wechat|\n|tokenorcode|type 为 apple时此字段为 idToken，否则为 微信code |\n\n#### 获得当前用户的基本信息\n\n`POST /user/info`\n\n|参数|说明|备注|\n|-|-|-|\n|token|认证token|\n\n#### 注册设备\n\n`POST /device/reg`\n\n|参数|说明|备注|\n|-|-|-|\n|token|认证token|\n|name|设备名称|\n|device_id|device token（推送用）|\n|is_clip|是否轻应用|0为APP|\n\n#### 设备列表\n\n`POST /device/list`\n\n|参数|说明|备注|\n|-|-|-|\n|token|认证token|\n\n#### 重命名设备\n\n`POST /device/rename`\n\n|参数|说明|备注|\n|-|-|-|\n|token|认证token|\n|id|设备id|\n|name|设备新名称|\n\n#### 移除设备\n\n`POST /device/remove`\n\n|参数|说明|备注|\n|-|-|-|\n|token|认证token|\n|id|设备id|\n\n#### 生成一个新Key\n\n`POST /key/gen`\n\n|参数|说明|备注|\n|-|-|-|\n|token|认证token|\n\n#### 重命名Key\n\n`POST /key/rename`\n\n|参数|说明|备注|\n|-|-|-|\n|token|认证token|\n|id|Key ID|\n|name|Key新名称|\n\n#### 重置一个Key\n\n`POST /key/regen`\n\n|参数|说明|备注|\n|-|-|-|\n|token|认证token|\n|id|Key ID|\n\n#### 获取当前用户的Key列表\n\n`POST /key/list`\n\n|参数|说明|备注|\n|-|-|-|\n|token|认证token|\n\n#### 删除Key\n\n`POST /key/remove`\n\n|参数|说明|备注|\n|-|-|-|\n|token|认证token|\n|id|Key ID|\n\n\n#### 推送消息\n\n`POST /message/push`\n\n|参数|说明|备注|\n|-|-|-|\n|pushkey|PushKey|多个key用`,`隔开，在线版最多10个，自架版默认最多100个|\n|text|推送消息内容|\n|desp|消息内容第二部分，选填|\n|type|格式，选填|文本=text，markdown，图片=image，默认为markdown|\n\ntype 为 image 时，text 中为要发送图片的URL。\n\n#### 获得当前用户的消息列表\n\n`POST /message/list`\n\n\n|参数|说明|备注|\n|-|-|-|\n|token|认证token|\n|limit|消息条数|默认为10，最大100\n\n#### 删除消息\n\n`POST /message/remove`\n\n|参数|说明|备注|\n|-|-|-|\n|token|认证token|\n|id|消息ID|\n\n#### 清除全部消息\n\n`POST /message/clean`\n\n|参数|说明|备注|\n|-|-|-|\n|token|认证token|\n\n#### Simple token\n> 为了方便客户端永久保持登入状态，我们提供了一个永不失效的Token，即 Simple token\n\n##### 获取 Simple token\n通过 上文中的「获得当前用户的基本信息」接口(`POST /user/info`) 得到\n\n##### 通过 Simple token 登入\n\n`POST /login/simple_token`\n\n|参数|说明|备注|\n|-|-|-|\n|stoken|Simple token|\n\n登入成功返回认证token。\n\n##### 重置 Simple token \n\n`POST /simple_token/regen`\n\n|参数|说明|备注|\n|-|-|-|\n|token|认证token|\n\n##### 清空 Simple token \n\n`POST /simple_token/remove`\n\n|参数|说明|备注|\n|-|-|-|\n|token|认证token|\n\n\n[更详细的请求和返回值可以参考这里](doc/api/PushDeerOS.md)\n\n通用返回格式：\n\n```\n{\n    code:正确为0，错误为非0,\n    content:内容,错误时无此字段，\n    error:错误信息，无错误时无此字段\n}\n```\n\n\n# 产品设计文档\n\n## 产品定义\n\nPushDeer的**核心价值**，包括：「易用」、「可控」和「渐进」。\n\n### 易用\n\n易用性表现在两个方面：\n\n1. 易安装：采用无APP方案，直接**去掉安装步骤**\n1. 易调用：只需输入URL，**无需阅读文档**，就可以发送消息\n\n### 可控\n\n1. `Self-hosted`：让有能力和精力的用户可以自行架设，避免因为在线服务下线导致的接口更换风险。\n1. 非商用免费：不用PushDeer挣钱，就无需支付费用\n1. 不依赖微信消息接口：不像Server酱那样受腾讯政策影响\n\n### 渐进\n\n1. 通过URL即可发送基本的文本消息；通过更多参数，可以对消息的样式等细节进行调整\n1. 无APP不能实现的功能不能覆盖的机型，后期可以通过APP来补充\n\n## 商业模式\n\nPushDeer是一个商业开源项目，采用「开放源码」、「自用免费」、「在线服务收费」的方式进行运作。\n\n### 具体实现\n\nPushDeer是一个以盈利为目的的商业项目，品牌和源码所有权都由「方糖君」公司持有，但和纯商业项目不同的地方在于：\n\n1. 它开放源代码，所有人都可以在非商业前提下按GPLv2授权使用\n1. 它接受社区贡献代码，作为回报，它会从商业收益中拿出部分来赞助项目贡献人\n1. 如果商业收益够大，它会尝试雇佣项目贡献人以兼职或者全职的方式为项目工作\n\n这里边有一些细节：\n\n1. 为了避免某些个人或者公司使用源码搭建在线竞品服务收费，我们限制了源码不能商用\n1. 在刚开始的时候，项目并没有商业收入，而却是开发工作量最大的。所以首先我们会承担产品和界面设计、API设计和开发等工作；并通过众筹的方式筹集了一些资金给其他大模块的贡献人\n\n开放源码形式保证了其他代码贡献人在非商业场景下对源码的可控：\n\n1. 如果社区和代码贡献人不满意「方糖君」主导的商业化，可以 Fork 一个版本，继续在非商用的前提下自行运营\n1. 如果「方糖君」之后不再开放源代码，普通用户依然可以按之前的协议使用修改协议前的源码\n\n## 用户细分\n\nPushDeer主要面向以下三类用户\n\n1. 高阶电脑用户\n1. 开发者\n1. 公司或自媒体\n\n### 高阶电脑用户\n\n具有一定电脑操作技能的高阶用户，比如：\n\n1. NAS 用户\n1. 站长\n1. 电脑技术爱好者\n\n他们使用PushDeer的场景包括但不限于：\n\n1. 推送路由器和 NAS 的状态、公网 IP 等信息\n1. 推送 Wordpress 最新的评论\n1. 推送加密货币达到特定价格的通知\n1. 在多台设备上推送文本\n1. 自动化工具推送定期汇报\n\n### 开发者\n\n使用PushDeer的场景包括但不限于：\n\n1. 推送报错和调试信息\n1. 推送服务器异常\n1. 推送定时任务输出\n1. 在自己的软件发送消息到手机（引导用户填入PushDeer的key）\n\n### 公司或自媒体\n\n使用PushDeer的场景包括但不限于：\n\n1. 面向自己的用户推送通知、内容和营销信息（类似公众号，但不受微信限制）\n\n\n# 授权\n\n本项目禁止商用（包括但不限于搭建后挂广告或售卖会员、打包后上架商店销售等），在非商用的情况下遵循GPL v2，当两者冲突时，以非商用原则优先。\n\n\n# 相关项目\n\n- [C# SDK](https://gitee.com/mrbread/pushdeer_csharp_sdk) by [MrBread](https://gitee.com/mrbread)\n- [Java SDK](https://gitee.com/mrbread/pushdeer-java-sdk) by [MrBread](https://gitee.com/mrbread)\n- [Python SDK](https://github.com/gaoliang/pypushdeer) by [Gao Liang](https://github.com/gaoliang)\n- [API的Go实现](https://github.com/iepngs/pushdeer-backend-go) by [iepngs](https://github.com/iepngs)\n- [API的Node实现](https://github.com/xkrfer/pushdeer-node) by [DouDou](https://github.com/xkrfer)\n- [浏览器插件](https://github.com/xkrfer/pushdeer-crx) by [DouDou](https://github.com/xkrfer)\n- [Rust SDK](https://github.com/abgelehnt/rupushdeer) by [Chi](https://github.com/abgelehnt)\n"
        },
        {
          "name": "RoboFile.php",
          "type": "blob",
          "size": 1.279296875,
          "content": "<?php\n/**\n * This is project's console commands configuration for Robo task runner.\n *\n * @see http://robo.li/\n */\nclass RoboFile extends \\Robo\\Tasks\n{\n    /**\n     * 构建一个独立镜像，只包含api和redis\n     */\n    public function buildDockerImage()\n    {\n        $tmp_dir = \"/tmp/\".md5(__DIR__);\n        $this->_copyDir('docker', $tmp_dir.'/app/docker');\n        # $this->taskReplaceInFile($tmp_dir.'/app/docker/web/init.sh')->from('# ./redis-server &')->to('./redis-server &')->run();\n        \n        $this->_copyDir('api', $tmp_dir.'/app/docker/web/api');\n        $this->_copyDir('push', $tmp_dir.'/app/docker/web/push');\n        // 更新redis为memory\n        $this->taskReplaceInFile($tmp_dir.'/app/docker/web/push/ios.yml')->from('addr: \"redis:6379\"')->to('addr: \"127.0.0.1:6379\"')->run();\n        $this->taskReplaceInFile($tmp_dir.'/app/docker/web/push/clip.yml')->from('addr: \"redis:6379\"')->to('addr: \"127.0.0.1:6379\"')->run();\n        // $this->_exec(\"open \".$tmp_dir.'/app/docker/');\n        $this->_exec(\"cd $tmp_dir/app && docker build -f ./docker/web/Dockerfile.serverless -t pushdeercore ./docker/web \");\n        $this->_exec(\"docker tag pushdeercore ccr.ccs.tencentyun.com/ftqq/pushdeercore\");\n        $this->_exec(\"docker push ccr.ccs.tencentyun.com/ftqq/pushdeercore\");\n    }\n}\n"
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.self-hosted.yml",
          "type": "blob",
          "size": 1.384765625,
          "content": "version: '2.1'\nservices:\n  mariadb:\n    image: 'mariadb:10.5.8-focal'\n    healthcheck:\n      test: [\"CMD\", \"mysqladmin\", \"ping\", \"--silent\",\"--password=$$MYSQL_ROOT_PASSWORD\"]\n      timeout: 10s\n      retries: 3\n    volumes:\n      - 'mariadb_data:/var/lib/mysql'\n    environment:\n      - MYSQL_ROOT_PASSWORD=theVeryp@ssw0rd\n      - MYSQL_DATABASE=pushdeer\n#     ports:\n#       - '3306:3306' \n  redis: \n    image: 'bitnami/redis:6.0.16'\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\",\"ping\"]\n    environment:\n      - ALLOW_EMPTY_PASSWORD=yes \n  app:\n    #image: 'webdevops/php-apache:8.0-alpine'\n    build: './docker/web/'\n    ports:\n      - '8800:80'\n    volumes:\n      - './:/app'\n    depends_on:\n      mariadb:\n        condition: service_healthy\n      redis:\n        condition: service_healthy\n    environment:\n      - DB_HOST=mariadb\n      - DB_PORT=3306\n      - DB_USERNAME=root\n      - DB_DATABASE=pushdeer\n      - DB_PASSWORD=theVeryp@ssw0rd\n      - GO_PUSH_IOS_TOPIC=com.pushdeer.self.ios\n      - GO_PUSH_IOS_CLIP_TOPIC=com.pushdeer.self.ios.Clip\n      - APP_DEBUG=false\n      - MQTT_API_KEY=9LKo3\n      - MQTT_ON=false\n  # mqtt:\n  #   image: 'ccr.ccs.tencentyun.com/ftqq/pushdeeresp'\n  #   ports:\n  #     - '1883:1883'\n  #   environment:\n  #     - API_KEY=9LKo3\n  #     - MQTT_PORT=1883\n  #     - MQTT_USER=easy\n  #     - MQTT_PASSWORD=y0urp@ss\n  #     - MQTT_BASE_TOPIC=default    \nvolumes:\n  mariadb_data:\n"
        },
        {
          "name": "docker-compose.serverless.yml",
          "type": "blob",
          "size": 0.5634765625,
          "content": "# 已废弃\n# version: '2'\n# services:\n#   app:\n#     image: 'ccr.ccs.tencentyun.com/ftqq/pushdeercore'\n#     ports:\n#       - '9000:9000'\n#     environment:\n#       - DB_HOST=host.docker.internal\n#       - DB_PORT=3306\n#       - DB_USERNAME=root\n#       - DB_DATABASE=pushdeer_local\n#       - DB_PASSWORD=\n#       - DB_TIMEZONE=+08:00\n#       - GO_PUSH_IOS_TOPIC=com.pushdeer.self.ios\n#       - GO_PUSH_IOS_CLIP_TOPIC=com.pushdeer.self.ios.Clip\n#       - APP_DEBUG=false\n#       - WEB_PHP_SOCKET=127.0.0.1:8000\n#     extra_hosts:\n#       - \"host.docker.internal:host-gateway\"\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.947265625,
          "content": "version: '2.1'\nservices:\n  mariadb:\n    image: 'mariadb:10.5.8-focal'\n    healthcheck:\n      test: [\"CMD\", \"mysqladmin\", \"ping\", \"--silent\",\"--password=$$MYSQL_ROOT_PASSWORD\"]\n      timeout: 10s\n      retries: 3\n    volumes:\n      - 'mariadb_data:/var/lib/mysql'\n    environment:\n      - MYSQL_ROOT_PASSWORD=theVeryp@ssw0rd\n      - MYSQL_DATABASE=pushdeer\n    ports:\n      - '3306:3306' \n  redis: \n    image: 'bitnami/redis:6.0.16'\n    healthcheck:\n      test: [\"CMD\", \"redis-cli\",\"ping\"]\n    environment:\n      - ALLOW_EMPTY_PASSWORD=yes \n  app:\n    #image: 'webdevops/php-apache:8.0-alpine'\n    build: './docker/web/'\n    ports:\n      - '8800:80'\n    volumes:\n      - './:/app'\n    depends_on:\n      mariadb:\n        condition: service_healthy\n      redis:\n        condition: service_healthy\n    environment:\n      - DB_HOST=mariadb\n      - DB_PORT=3306\n      - DB_USERNAME=root\n      - DB_DATABASE=pushdeer\n      - DB_PASSWORD=theVeryp@ssw0rd\nvolumes:\n  mariadb_data:"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "ios",
          "type": "tree",
          "content": null
        },
        {
          "name": "iot",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "push",
          "type": "tree",
          "content": null
        },
        {
          "name": "quickapp",
          "type": "tree",
          "content": null
        },
        {
          "name": "self-hosted-push-server",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}