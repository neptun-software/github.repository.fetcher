{
  "metadata": {
    "timestamp": 1736709737546,
    "page": 146,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zhaojh329/rtty",
      "stars": 3733,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4267578125,
          "content": "# Prerequisites\n*.d\n\n# Object files\n*.o\n*.ko\n*.obj\n*.elf\n\n# Linker output\n*.ilk\n*.map\n*.exp\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Libraries\n*.lib\n*.a\n*.la\n*.lo\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n*.i*86\n*.x86_64\n*.hex\n\n# Debug files\n*.dSYM/\n*.su\n*.idb\n*.pdb\n\n# Kernel Module Compile Results\n*.mod*\n*.cmd\n.tmp_versions/\nmodules.order\nModule.symvers\nMkfile.old\ndkms.conf\n\nbuild\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.2490234375,
          "content": "[submodule \"src/buffer\"]\n\tpath = src/buffer\n\turl = https://github.com/zhaojh329/buffer.git\n[submodule \"src/ssl\"]\n\tpath = src/ssl\n\turl = https://github.com/zhaojh329/ssl.git\n[submodule \"src/log\"]\n\tpath = src/log\n\turl = https://github.com/zhaojh329/log.git\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.173828125,
          "content": "cmake_minimum_required(VERSION 3.0)\n\nproject(rtty C)\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake/Modules/\")\n\n#set(CMAKE_VERBOSE_MAKEFILE ON)\n\nadd_subdirectory(src)\n"
        },
        {
          "name": "COMMAND.md",
          "type": "blob",
          "size": 1.70703125,
          "content": "# Instructions\nAPI Path\n\n    /cmd/:devid?wait=10\n\nThe wait parameter is optional and defaults to 30s, or 0 if you do not care about the execution of the command\n\nRequest message format\n\n    {\n        \"username\": \"test\",\n        \"password\": \"test\",\n        \"cmd\": \"echo\",\n        \"params\": [\"hello rtty\"]\n    }\n\nThe username, cmd in the message must be provided. The password, params are optional. The params is a JSON array.\n\nIf the command is executed finish, the server will return the command execution result in json format.\n    \n    {\n        \"code\": 0,\n        \"stdout\": \"aGVsbG8gcnR0eQo=\",\n        \"stderr\": \"\"\n    }\n\nThe stdout and stderr in the response are base64 encoded.\n\nIf any of the steps fail, the server will return an error message in json format.\n\n    {\n        \"err\": 1002,\n        \"msg\": \"device offline\"\n    }\n\n\nAll error codes are as follows\n\n    1001    invalid format\n    1002    device offline\n    1003    timeout\n    1       operation not permitted\n    2       not found\n    3       no mem\n    4       sys error\n    5       stdout+stderr is too big\n\n# Example\n## [Shell](/tools/sendcmd.sh)\n\n## Jquery\n\n```javascript\nvar data = {username: 'test', password: 'test', cmd: 'echo', params: ['hello rtty']};\n$.post('http://your-server:5913/cmd/test', JSON.stringify(data), function(r) {\n    if (r.stdout) {\n        console.log(window.atob(r.stdout))\n    } else {\n        console.log(r)\n    }\n});\n```\n\n## Axios\n\n```javascript\nvar data = {username: 'test', password: 'test', cmd: 'echo', params: ['hello rtty']};\naxios.post('http://your-server:5913/cmd/test', data).then(function(r) {\n    var resp = r.data;\n    if (resp.stdout) {\n        console.log(window.atob(resp.stdout))\n    } else {\n        console.log(resp)\n    }\n});\n```"
        },
        {
          "name": "COMMAND_ZH.md",
          "type": "blob",
          "size": 1.646484375,
          "content": "# 说明\nAPI 路径\n\n    /cmd/:devid?wait=10\n\nwait 参数为可选，默认等待 30s，如果不关心命令执行结果，可设置为 0\n\n请求消息格式\n\n    {\n        \"username\": \"test\",\n        \"password\": \"test\",\n        \"cmd\": \"echo\",\n        \"params\": [\"hello rtty\"]\n    }\n\n其中 username、cmd 必须提供。password、params 为可选项。params 为一个 JSON 数组。\n\n如果命令执行完成，服务器将返回 json 格式的命令执行结果：\n\n    {\n        \"code\": 0,\n        \"stdout\": \"aGVsbG8gcnR0eQo=\",\n        \"stderr\": \"\"\n    }\n\n响应中的 stdout 和 stderr 是经过 base64 编码的。\n\n如果任何一步操作失败，服务器都将返回 json 格式的错误信息：\n    \n    {\n        \"err\": 1002,\n        \"msg\": \"device offline\"\n    }\n\n\n所有错误码如下\n\n    1001    invalid format\n    1002    device offline\n    1003    timeout\n    1       operation not permitted\n    2       not found\n    3       no mem\n    4       sys error\n    5       stdout+stderr is too big\n\n# Example\n## [Shell](/tools/sendcmd.sh)\n\n## Jquery\n\n```javascript\nvar data = {username: 'test', password: 'test', cmd: 'echo', params: ['hello rtty']};\n$.post('http://your-server:5913/cmd/test', JSON.stringify(data), function(r) {\n    if (r.stdout) {\n        console.log(window.atob(r.stdout))\n    } else {\n        console.log(r)\n    }\n});\n```\n\n## Axios\n\n```javascript\nvar data = {username: 'test', password: 'test', cmd: 'echo', params: ['hello rtty']};\naxios.post('http://your-server:5913/cmd/test', data).then(function(r) {\n    var resp = r.data;\n    if (resp.stdout) {\n        console.log(window.atob(resp.stdout))\n    } else {\n        console.log(resp)\n    }\n});\n```"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.0615234375,
          "content": "Contributing\n================================================================================\n\nIf you want to contribute to [rtty](https://github.com/zhaojh329/rtty), please follow these simple rules:\n\n1. Press the fork button:\n\n    ![fork](http://oi58.tinypic.com/jj2trm.jpg)\n\n2. Clone the repository from your account with:\n\n    ```\n    git clone https://github.com/your_github_username/rtty.git\n    ```\n\n3. Create a new branch with:\n\n    ```\n    git checkout -b \"rtty-1-fix\"\n    ```\n    You can name it however you want.\n\n4. Make your changes\n\n5. Commit and push your changes, then make a pull request from Github.\n\n    git commit --signoff\n    git push origin rtty-1-fix\n \n6. Awaiting review, if accepted, merged!\n\n**IMPORTANT**\n\nPlease, don't forget to update your fork. While you made your changes, \nthe content of the `master` branch can change because other pull requests \nwere merged and it can create conflicts. This is why you have to rebase \non `master` every time before pushing your changes and check that your \nbranch doesn't have any conflicts with `master`.\n\nThank you.\n"
        },
        {
          "name": "CONTRIBUTING_ZH.md",
          "type": "blob",
          "size": 1.0078125,
          "content": "贡献代码\n================================================================================\n\n如果你想为[rtty](https://github.com/zhaojh329/rtty)贡献代码, 请按照如下步骤:\n\n1. 点击fork按钮:\n\n    ![fork](http://oi58.tinypic.com/jj2trm.jpg)\n\n2. 从你的github账户克隆仓库代码:\n\n    ```\n    git clone https://github.com/你的github账户/rtty.git\n    ```\n\n3. 创建一个新的分支:\n\n    ```\n    git checkout -b \"rtty-1-fix\"\n    ```\n    你可以使用一个你想要的分支名称。\n\n4. 修改代码\n\n5. 提交代码并推送到服务器，然后从Github提交pull request。\n\n    git commit --signoff\n    git push origin rtty-1-fix\n\n6. 等待审查，如果被接受，你的修改将会被合并到主分支。\n\n**注意**\n\n请不要忘记更新你的fork。当你修改代码时，主分支的内容可能已被修改，因为其他用户提交的pull request被合并，\n这就会产生代码冲突。这就是为什么在你每次修改前都要在你的主分支上进行rebase操作\n\n谢谢.\n"
        },
        {
          "name": "CROSS_COMPILE.md",
          "type": "blob",
          "size": 0.7314453125,
          "content": "# Build libev\n\n    git clone https://github.com/enki/libev.git\n    cd libev\n    ./configure --host=arm-linux-gnueabi\n    DESTDIR=/tmp/rtty_install make install\n\n# Build rtty\n\n    git clone --recursive https://github.com/zhaojh329/rtty.git\n    cd rtty\n    cmake . -DCMAKE_C_COMPILER=arm-linux-gnueabi-gcc -DCMAKE_FIND_ROOT_PATH=/tmp/rtty_install\n    DESTDIR=/tmp/rtty_install make install\n\n# Copy these files to your device's corresponding directory\n\n    /tmp/rtty_install/\n    └── usr\n        └── local\n            ├── bin\n            │   └── rtty\n            └── lib\n                ├── libev.so -> libev.so.4.0.0\n                ├── libev.so.4 -> libev.so.4.0.0\n                ├── libev.so.4.0.0\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0654296875,
          "content": "MIT License\n\nCopyright (c) 2019 Jianhui Zhao <zhaojh329@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "OPENWRT.md",
          "type": "blob",
          "size": 1.48046875,
          "content": "# Install directly in the device\n\n    opkg update\n    opkg list | grep rtty\n    opkg install rtty-nossl\n\n# Compile it yourself\n## Update feed\n\n    ./scripts/feeds update packages\n    ./scripts/feeds install -a -p packages\n\n***If the rtty is not the latest version in your openwrt, you can get the latest package from here***\n\n    https://github.com/zhaojh329/rtty/tree/openwrt-package\n\n## Select rtty in menuconfig and compile new image\n\n    Utilities  --->\n\t    Terminal  --->\n\t        <*> rtty-mbedtls................. Access your terminals from anywhere via the web\n\t        < > rtty-nossl................... Access your terminals from anywhere via the web\n\t        < > rtty-openssl................. Access your terminals from anywhere via the web\n\t        < > rtty-wolfssl................. Access your terminals from anywhere via the web\n\n# Configure\nConfiguring the server parameter\n\n    uci add rtty rtty   # If it is configured for the first time\n    uci set rtty.@rtty[0].host='your server host'\n    uci set rtty.@rtty[0].port='your server port'\n\nYou can customize an ID for your device. If the ID is not configured, rtty will use\nthe MAC address of the specified network interface as the ID.\n\n\tuci set rtty.@rtty[0].id='your-device-id'\n\nYou can add a description to your device\n\n    uci set rtty.@rtty[0].description='My device'\n\nUse SSL\n\n    uci set rtty.@rtty[0].ssl='1'\n\nAuthorization\n\n    uci set rtty.@rtty[0].token='your-token'\n\nSave configuration and apply\n\n    uci commit\n    /etc/init.d/rtty start\n"
        },
        {
          "name": "OPENWRT_ZH.md",
          "type": "blob",
          "size": 1.4033203125,
          "content": "# 直接在设备里面安装\n\n    opkg update\n    opkg list | grep rtty\n    opkg install rtty-nossl\n\n# 自己编译\n## 更新feed\n\n    ./scripts/feeds update packages\n    ./scripts/feeds install -a -p packages\n\n***如果您的openwrt中的rtty不是最新版本，您可以从这里获取最新的package***\n\n    https://gitee.com/zhaojh329/rtty/tree/openwrt-package\n\n## 在menuconfig中选择rtty，然后重新编译固件。\n\n    Utilities  --->\n\t    Terminal  --->\n\t        <*> rtty-mbedtls................. Access your terminals from anywhere via the web\n\t        < > rtty-nossl................... Access your terminals from anywhere via the web\n\t        < > rtty-openssl................. Access your terminals from anywhere via the web\n\t        < > rtty-wolfssl................. Access your terminals from anywhere via the web\n\n# 配置\n配置服务器参数\n\n    uci add rtty rtty   # 如果是第一次配置\n    uci set rtty.@rtty[0].host='your server host'\n    uci set rtty.@rtty[0].port='your server port'\n\n你可以给你的设备自定义一个ID。如果未指定，RTTY将使用指定的网络接口的MAC地址作为其ID\n\n\tuci set rtty.@rtty[0].id='your-device-id'\n\n给你的设备添加一个描述\n\n    uci set rtty.@rtty[0].description='My device'\n\n使用SSL\n\n    uci set rtty.@rtty[0].ssl='1'\n\n认证\n\n    uci set rtty.@rtty[0].token='your-token'\n\n保存配置并应用\n\n    uci commit\n    /etc/init.d/rtty restart\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.126953125,
          "content": "# rtty([中文](/README_ZH.md))\n\n**This project is officially supported by [GL.iNet](https://github.com/gl-inet).**\n\n[1]: https://img.shields.io/badge/license-MIT-brightgreen.svg?style=plastic\n[2]: /LICENSE\n[3]: https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=plastic\n[4]: https://github.com/zhaojh329/rtty/pulls\n[5]: https://img.shields.io/badge/Issues-welcome-brightgreen.svg?style=plastic\n[6]: https://github.com/zhaojh329/rtty/issues/new\n[7]: https://img.shields.io/badge/release-8.1.3-blue.svg?style=plastic\n[8]: https://github.com/zhaojh329/rtty/releases\n[9]: https://github.com/zhaojh329/rtty/workflows/build/badge.svg\n\n[![license][1]][2]\n[![PRs Welcome][3]][4]\n[![Issue Welcome][5]][6]\n[![Release Version][7]][8]\n![Build Status][9]\n![visitors](https://visitor-badge.laobi.icu/badge?page_id=zhaojh329.rtty)\n\n[Xterm.js]: https://github.com/xtermjs/xterm.js\n[libev]: http://software.schmorp.de/pkg/libev.html\n[openssl]: https://github.com/openssl/openssl\n[mbedtls(polarssl)]: https://github.com/ARMmbed/mbedtls\n[CyaSSl(wolfssl)]: https://github.com/wolfSSL/wolfssl\n[vue]: https://github.com/vuejs/vue\n[server]: https://github.com/zhaojh329/rttys\n\n```mermaid\nflowchart TB\ns[rttys with public IP address]\nu1[\"User(Web Browser)\"] --> s\nu2[\"User(Web Browser)\"] --> s\nu3[\"User(Web Browser)\"] --> s\ns --> c1[\"rtty(Linux Device)\"]\ns --> c2[\"rtty(Linux Device)\"]\ns --> c3[\"rtty(Linux Device)\"]\n```\n\n![](/doc/terminal.gif)\n![](/doc/file.gif)\n![](/doc/web.gif)\n\nIt is composed of a client and a [server]. The client is written in pure C. The [server] is written in go language\nand the front-end is written in [Vue].\n\nYou can access your device's terminal from anywhere via the web. Distinguish your different device by device ID.\n\nrtty is very suitable for remote maintenance your or your company's thousands of Linux devices deployed around\nthe world.\n\n## Features\n* The client is writen in C language, very small, suitable for embedded Linux\n  - No SSL: rtty(32K) + libev(56K)\n  - Support SSL: + libmbedtls(88K) + libmbedcrypto(241K) + libmbedx509(48k)\n* Execute command remotely in a batch of devices \n* SSL support: openssl, mbedtls, CyaSSl(wolfssl)\n* mTLS\n* Very convenient to upload and download files\n* Access different devices based on device ID\n* Support HTTP Proxy - Access your device's Web\n* Fully-featured terminal based on [Xterm.js]\n* Simple to deployment and easy to use\n\n## Who's using rtty\n- [GL.iNet](https://www.gl-inet.com/)\n- [Yunlianxin Technology](http://www.iyunlink.com/)\n- [One IOT World](https://www.oneiotworld.com/)\n- [bitswrt Communication Technology](http://bitswrt.com/)\n\n## Dependencies of the Client side\n* [libev] - A full-featured and high-performance event loop\n* [mbedtls(polarssl)] or [CyaSSl(wolfssl)] or [openssl] - If you want to support SSL\n\n## [Deploying the server side](https://github.com/zhaojh329/rttys)\n\n## How to install rtty\n### For Linux distribution\n\nInstall Dependencies\n\n    sudo apt install -y libev-dev libssl-dev      # Ubuntu, Debian\n    sudo pacman -S --noconfirm libev openssl      # ArchLinux\n    sudo yum install -y libev-devel openssl-devel # Centos\n\nClone the code of rtty\n\n    git clone --recursive https://github.com/zhaojh329/rtty.git\n\nBuild\n\n    cd rtty && mkdir build && cd build\n    cmake .. && make install\n\n### For Buildroot\nSelect rtty in menuconfig and compile it\n\n    Target packages  --->\n        Shell and utilities  --->\n            [*] rtty\n\n### [For OpenWRT](/OPENWRT.md)\n\n### [For Other Embedded Linux Platform](/CROSS_COMPILE.md)\n\n## Command-line Options\n\n    Usage: rtty [option]\n        -I, --id=string          Set an ID for the device(Maximum 63 bytes, valid\n                                 character:letter, number, underline and short line)\n        -h, --host=string        Server's host or ipaddr(Default is localhost)\n        -p, --port=number        Server port(Default is 5912)\n        -d, --description=string Add a description to the device(Maximum 126 bytes)\n        -a                       Auto reconnect to the server\n        -s                       SSL on\n        -C, --cacert             CA certificate to verify peer against\n        -x, --insecure           Allow insecure server connections when using SSL\n        -c, --cert               Certificate file to use\"\n        -k, --key                Private key file to use\"\n        -D                       Run in the background\n        -t, --token=string       Authorization token\n        -f username              Skip a second login authentication. See man login(1) about the details\n        -R                       Receive file\n        -S file                  Send file\n        -v, --verbose            verbose\n        -V, --version            Show version\n        --help                   Show usage\n\n## How to run rtty\nReplace the following parameters with your own parameters\n\n    sudo rtty -I 'My-device-ID' -h 'your-server' -p 5912 -a -v -d 'My Device Description'\n\nIf your [rttys](https://github.com/zhaojh329/rttys) is configured with mTLS enabled (device key and certificate required),\nadd the following parameters(Replace the following with valid paths to your own)\n\n    -k /etc/ssl/private/abc.pem -c /etc/ssl/certs/abc.pem\n\nYou can generate them e.g. via openssl tool\n    openssl req -x509 -newkey ec -pkeyopt ec_paramgen_curve:secp521r1 -keyout /tmp/key.pem -out /tmp/cert.pem -days 18262 -nodes -subj \"/C=CZ/O=Acme Inc./OU=ACME/CN=ACME-DEV-123\"\n\nIf your rttys is configured with a token, add the following parameter(Replace the following token with your own)\n\n    -t 34762d07637276694b938d23f10d7164\n\n## Usage\nUse your web browser to access your server: `http://your-server-host:5913`, then click the connection button\n\n### connect devices with no web login required(you need to configure the device white list on the server)\nhttp://your-server-host:5913/connect/devid1\n\nhttp://your-server-host:5913/connect/devid2\n\n### Transfer file\nTransfer file from local to remote device\n\n\trtty -R\n\nTransfer file from remote device to the local\n\n\trtty -S test.txt\n\n### [Execute command remotely](/COMMAND.md)\n\n## Contributing\nIf you would like to help making [rtty](https://github.com/zhaojh329/rtty) better,\nsee the [CONTRIBUTING.md](https://github.com/zhaojh329/rtty/blob/master/CONTRIBUTING.md) file.\n"
        },
        {
          "name": "README_ZH.md",
          "type": "blob",
          "size": 5.962890625,
          "content": "# rtty - 在任何地方通过Web访问您的设备的终端\n\n[1]: https://img.shields.io/badge/开源协议-MIT-brightgreen.svg?style=plastic\n[2]: /LICENSE\n[3]: https://img.shields.io/badge/提交代码-欢迎-brightgreen.svg?style=plastic\n[4]: https://github.com/zhaojh329/rtty/pulls\n[5]: https://img.shields.io/badge/提问-欢迎-brightgreen.svg?style=plastic\n[6]: https://github.com/zhaojh329/rtty/issues/new\n[7]: https://img.shields.io/badge/发布版本-8.1.3-blue.svg?style=plastic\n[8]: https://github.com/zhaojh329/rtty/releases\n[9]: https://github.com/zhaojh329/rtty/workflows/build/badge.svg\n[11]: https://img.shields.io/badge/技术交流群-点击加入：153530783-brightgreen.svg\n[12]: https://jq.qq.com/?_wv=1027&k=5PKxbTV\n\n[![license][1]][2]\n[![PRs Welcome][3]][4]\n[![Issue Welcome][5]][6]\n[![Release Version][7]][8]\n![Build Status][9]\n![visitors](https://visitor-badge.laobi.icu/badge?page_id=zhaojh329.rtty)\n[![Chinese Chat][11]][12]\n\n[Xterm.js]: https://github.com/xtermjs/xterm.js\n[libev]: http://software.schmorp.de/pkg/libev.html\n[openssl]: https://github.com/openssl/openssl\n[mbedtls(polarssl)]: https://github.com/ARMmbed/mbedtls\n[CyaSSl(wolfssl)]: https://github.com/wolfSSL/wolfssl\n[vue]: https://github.com/vuejs/vue\n[服务端]: https://github.com/zhaojh329/rttys\n\n```mermaid\nflowchart TB\ns[rttys with public IP address]\nu1[\"User(Web Browser)\"] --> s\nu2[\"User(Web Browser)\"] --> s\nu3[\"User(Web Browser)\"] --> s\ns --> c1[\"rtty(Linux Device)\"]\ns --> c2[\"rtty(Linux Device)\"]\ns --> c3[\"rtty(Linux Device)\"]\n```\n\n![](/doc/terminal.gif)\n![](/doc/file.gif)\n![](/doc/web.gif)\n\n它由客户端和[服务端]组成。客户端采用纯C实现。[服务端]采用GO语言实现，前端界面采用[vue]实现。\n\n您可以在任何地方通过Web访问您的设备的终端。通过设备ID来区分您的不同的设备。\n\nrtty非常适合远程维护您的或者您的公司的部署在全球各地的成千上万的Linux设备。\n\n## 特性\n* 客户端 C 语言实现，非常小，适合嵌入式 Linux\n  - 不支持 SSL: rtty(32K) + libev(56K)\n  - 支持 SSL: + libmbedtls(88K) + libmbedcrypto(241K) + libmbedx509(48k)\n* 远程批量执行命令\n* 支持SSL: openssl, mbedtls, CyaSSl(wolfssl)\n* SSL 双向认证(mTLS)\n* 非常方便的上传和下载文件\n* 根据设备ID访问不同的设备\n* 支持 HTTP 代理 - 访问您的设备的 Web\n* 基于[Xterm.js]的全功能终端\n* 部署简单，使用方便\n\n## 谁在使用 rtty\n- [深圳市广联智通科技有限公司](https://www.gl-inet.com/)\n- [深圳市云联芯科技有限公司](http://www.iyunlink.com/)\n- [成都四海万联科技有限公司](https://www.oneiotworld.com/)\n- [bitswrt Communication Technology](http://bitswrt.com/)\n\n## 客户端依赖\n* [libev] - 高性能的事件循环库\n* [mbedtls(polarssl)]、[CyaSSl(wolfssl)]或者[openssl] - 如果您需要支持SSL\n\n## [部署服务端](https://github.com/zhaojh329/rttys/blob/master/README_ZH.md)\n\n## 如何安装rtty\n### 针对Linux发行版\n安装依赖\n\n    sudo apt install -y libev-dev libssl-dev      # Ubuntu, Debian\n    sudo pacman -S --noconfirm libev openssl      # ArchLinux\n    sudo yum install -y libev-devel openssl-devel # Centos\n\n克隆rtty代码\n\n    git clone --recursive https://github.com/zhaojh329/rtty.git\n\n编译\n\n    cd rtty && mkdir build && cd build\n    cmake .. && make install\n\n### 如何在Buildroot中使用\n在menuconfig中选中rtty然后编译\n\n    Target packages  --->\n        Shell and utilities  --->\n            [*] rtty\n\n### [如何在OpenWRT中使用](/OPENWRT_ZH.md)\n\n### [其它嵌入式Linux平台](/CROSS_COMPILE.md)\n\n## 命令行选项\n\n    Usage: rtty [option]\n        -I, --id=string          Set an ID for the device(Maximum 63 bytes, valid\n                                 character:letter, number, underline and short line)\n        -h, --host=string        Server's host or ipaddr(Default is localhost)\n        -p, --port=number        Server port(Default is 5912)\n        -d, --description=string Add a description to the device(Maximum 126 bytes)\n        -a                       Auto reconnect to the server\n        -s                       SSL on\n        -C, --cacert             CA certificate to verify peer against\n        -x, --insecure           Allow insecure server connections when using SSL\n        -c, --cert               Certificate file to use\"\n        -k, --key                Private key file to use\"\n        -D                       Run in the background\n        -t, --token=string       Authorization token\n        -f username              Skip a second login authentication. See man login(1) about the details\n        -R                       Receive file\n        -S file                  Send file\n        -v, --verbose            verbose\n        -V, --version            Show version\n        --help                   Show usage\n\n## 运行rtty\n将下面的参数替换为您自己的参数\n\n    sudo rtty -I 'My-device-ID' -h 'your-server' -p 5912 -a -v -d 'My Device Description'\n\n如果您的 [rttys](https://gitee.com/zhaojh329/rttys) 配置了一个 token，请加上如下参数（将下面的 token 替换为您自己生成的）\n\n    -t 34762d07637276694b938d23f10d7164\n\n## 如何使用\n使用您的 Web 浏览器访问您的服务器: `http://your-server-host:5913`，然后点击连接按钮。\n\n### 直接连接设备，无需 Web 登录(需要在服务端配置设备白名单)\nhttp://your-server-host:5913/connect/devid1\n\nhttp://your-server-host:5913/connect/devid2\n\n### 传输文件\n从本地传输文件到远程设备\n\n    rtty -R\n\n从远程设备传输文件到本地\n\n    rtty -S test.txt\n\n### [远程执行命令](/COMMAND_ZH.md)\n\n## 贡献代码\n如果您想帮助 rtty 变得更好，请参考 [CONTRIBUTING_ZH.md](/CONTRIBUTING_ZH.md)。\n\n## 强烈推荐佐大的 OpenWrt 培训班\n想学习 OpenWrt 开发，但是摸不着门道？自学没毅力？基础太差？怕太难学不会？快来参加<跟着佐大学 OpenWrt 开发入门培训班> 佐大助你能学有所成，培训班报名地址：http://forgotfun.org/2018/04/openwrt-training-2018.html\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}