{
  "metadata": {
    "timestamp": 1736710002340,
    "page": 589,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "avem-labs/Avem",
      "stars": 2126,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.140625,
          "content": "os: osx\nosx_image: xcode\nlanguage: c\nbefore_install:\n    - brew update\n    - brew tap px4/px4\n    - brew install gcc-arm-none-eabi\nscript: make\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0419921875,
          "content": "MIT License\n\nCopyright (c) 2016-2017 but0n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.806640625,
          "content": "# general Makefile\n# make OptLIB=0 OptSRC=0 all tshow\ninclude Makefile.common\nLDFLAGS=$(COMMONFLAGS) -fno-exceptions -ffunction-sections -fdata-sections -L$(LIBDIR) -nostartfiles -Wl,--gc-sections,-Tlinker.ld\n\nLDLIBS+=-lstm32\nLDLIBS+=-lm\n\nSTARTUP=startup.c\n\nall: libs src\n\t$(CC) -o $(PROGRAM).elf $(LDFLAGS) \\\n\t\t-Wl,--whole-archive \\\n\t\t\tsrc/app.a \\\n\t\t-Wl,--no-whole-archive \\\n\t\t\t$(LDLIBS)\n\t$(OBJCOPY) -O ihex $(PROGRAM).elf $(PROGRAM).hex\n\t$(OBJCOPY) -O binary $(PROGRAM).elf $(PROGRAM).bin\n#Extract info contained in ELF to readable text-files:\n\tarm-none-eabi-readelf -a $(PROGRAM).elf > $(PROGRAM).info_elf\n\tarm-none-eabi-size -d -B -t $(PROGRAM).elf > $(PROGRAM).info_size\n\tarm-none-eabi-objdump -S $(PROGRAM).elf > $(PROGRAM).info_code\n\tarm-none-eabi-nm -t d -S --size-sort -s $(PROGRAM).elf > $(PROGRAM).info_symbol\n\n.PHONY: libs src clean tshow\n\nlibs:\n\t$(MAKE) -C libs $@\nsrc:\n\t$(MAKE) -C src $@\nclean:\n\t$(MAKE) -C src $@\n\t$(MAKE) -C libs $@\n\trm -f $(PROGRAM).elf $(PROGRAM).hex $(PROGRAM).bin $(PROGRAM).info_elf $(PROGRAM).info_size\n\trm -f $(PROGRAM).info_code\n\trm -f $(PROGRAM).info_symbol\n\trm -f DUMP.s\ntshow:\n\t\t@echo \"=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_\"\n\t\t@echo \"=🍺====>> optimize settings: $(InfoTextLib), $(InfoTextSrc)\"\n\t\t@echo \"=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_=_\"\n\nisp: /dev/cu.SLAB_USBtoUART main.bin\n\tcat -u /dev/cu.SLAB_USBtoUART & stty -f /dev/cu.SLAB_USBtoUART 115200\n\techo '>' > /dev/cu.SLAB_USBtoUART\n\tpkill cat -u /dev/cu.SLAB_USBtoUART\n\tmake flash || make flash\n\nflash: /dev/cu.SLAB_USBtoUART main.bin\n\tstm32flash -w $(TOP)/main.bin -v -g 0 /dev/tty.SLAB_USBtoUART\ndump:\n\t$(OBJDUMP) -D main.elf > DUMP.s\n\topen DUMP.s\ntty:\n\tscreen /dev/tty.SLAB_USBtoUART 115200\ndfu:\n\tdfu-util -d 0483:df11 -c 1 -a 0 -s 0x08000000:leave -D main.bin\n"
        },
        {
          "name": "Makefile.common",
          "type": "blob",
          "size": 3.8203125,
          "content": "# include Makefile\n\n#This file is included in the general Makefile, the libs Makefile and the src Makefile\n#Different optimize settings for library and source files can be realized by using arguments\n#Compiler optimize settings:\n# -O0 no optimize, reduce compilation time and make debugging produce the expected results (default).\n# -O1 optimize, reduce code size and execution time, without much increase of compilation time.\n# -O2 optimize, reduce code execution time compared to ‘O1’, increase of compilation time.\n# -O3 optimize, turns on all optimizations, further increase of compilation time.\n# -Os optimize for size, enables all ‘-O2’ optimizations that do not typically increase code size and other code size optimizations.\n#Recommended optimize settings for release version: -O3\n#Recommended optimize settings for debug version: -O0\n#Valid parameters :\n# OptLIB=0 --> optimize library files using the -O0 setting\n# OptLIB=1 --> optimize library files using the -O1 setting\n# OptLIB=2 --> optimize library files using the -O2 setting\n# OptLIB=3 --> optimize library files using the -O3 setting\n# OptLIB=s --> optimize library files using the -Os setting\n# OptSRC=0 --> optimize source files using the -O0 setting\n# OptSRC=1 --> optimize source files using the -O1 setting\n# OptSRC=2 --> optimize source files using the -O2 setting\n# OptSRC=3 --> optimize source files using the -O3 setting\n# OptSRC=s --> optimize source files using the -Os setting\n# all --> build all\n# libs --> build libs only\n# src --> build src only\n# clean --> clean project\n# tshow --> show optimize settings\n#Example:\n# make OptLIB=3 OptSRC=0 all tshow\n\nTOP=$(shell greadlink -f \"$(dir $(lastword $(MAKEFILE_LIST)))\")\nPROGRAM=main\nLIBDIR=$(TOP)/libs\n\n#Adust the following line to the library in use\nSTMLIB=$(LIBDIR)/STM32_USB-FS-Device_Lib_V4.0.0/Libraries\n#Adjust TypeOfMCU in use, see CMSIS file \"stm32f10x.h\"\n#STM32F103RBT (128KB FLASH, 20KB RAM) --> STM32F10X_MD\n#TypeOfMCU=STM32F10X_MD\n#STM32F103RET (512KB FLASH, 64KB RAM) --> STM32F10X_HD\n#STM32F103ZET (512KB FLASH, 64KB RAM) --> STM32F10X_HD\n#============================================================================#\nTypeOfMCU=STM32F10X_HD\n#============================================================================#\n\nTC=arm-none-eabi\nCC=echo \"CC $@\";$(TC)-gcc\nLD=echo \"LD $@\";$(TC)-ld -v\nOBJCOPY=$(TC)-objcopy\nOBJDUMP=$(TC)-objdump\nAR=echo \"AR $@\";$(TC)-ar\nGDB=$(TC)-gdb\nINCLUDE=-I$(TOP)/inc\nINCLUDE+=-I$(STMLIB)/CMSIS/Include\nINCLUDE+=-I$(STMLIB)/CMSIS/Device/ST/STM32F10x/Include\nINCLUDE+=-I$(STMLIB)/CMSIS/Device/ST/STM32F10x/Source/Templates\nINCLUDE+=-I$(STMLIB)/STM32F10x_StdPeriph_Driver/inc\nINCLUDE+=-I$(STMLIB)/STM32_USB-FS-Device_Driver/inc\nINCLUDE+=-I$(LIBDIR)/module\nCOMMONFLAGS=-g -mcpu=cortex-m3 -mthumb -std=c99\nCOMMONFLAGSlib=$(COMMONFLAGS)\n#Commands for general Makefile and src Makefile\nifeq ($(OptSRC),0)\n\tCOMMONFLAGS+=-O0\n\tInfoTextSrc=src (no optimize, -O0)\nelse ifeq ($(OptSRC),1)\n\tCOMMONFLAGS+=-O1\n\tInfoTextSrc=src (optimize time+ size+, -O1)\nelse ifeq ($(OptSRC),2)\n\tCOMMONFLAGS+=-O2\n\tInfoTextSrc=src (optimize time++ size+, -O2)\nelse ifeq ($(OptSRC),s)\n\tCOMMONFLAGS+=-Os\n\tInfoTextSrc=src (optimize size++, -Os)\nelse\n\tCOMMONFLAGS+=-O3\n\tInfoTextSrc=src (full optimize, -O3)\nendif\nCFLAGS+=$(COMMONFLAGS) -Wall -Werror $(INCLUDE)\nCFLAGS+=-D $(TypeOfMCU)\nCFLAGS+=-D VECT_TAB_FLASH\n\n#Commands for libs Makefile\nifeq ($(OptLIB),0)\n\tCOMMONFLAGSlib+=-O0\n\tInfoTextLib=libs (no optimize, -O0)\nelse ifeq ($(OptLIB),1)\n\tCOMMONFLAGSlib+=-O1\n\tInfoTextLib=libs (optimize time+ size+, -O1)\nelse ifeq ($(OptLIB),2)\n\tCOMMONFLAGSlib+=-O2\n\tInfoTextLib=libs (optimize time++ size+, -O2)\nelse ifeq ($(OptLIB),s)\n\tCOMMONFLAGSlib+=-Os\n\tInfoTextLib=libs (optimize size++, -Os)\nelse\n\tCOMMONFLAGSlib+=-O3\n\tInfoTextLib=libs (full optimize, -O3)\nendif\nCFLAGSlib+=$(COMMONFLAGSlib) -Wall -Werror $(INCLUDE)\nCFLAGSlib+=-D $(TypeOfMCU)\nCFLAGSlib+=-D VECT_TAB_FLASH\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.759765625,
          "content": "[![Build Status](https://travis-ci.org/avem-labs/Avem.svg?branch=develop)](https://travis-ci.org/avem-labs/Avem) [![License](https://img.shields.io/github/license/but0n/Avem.svg)](#)  [![Releases](https://img.shields.io/github/release/but0n/Avem.svg)](https://github.com/but0n/Avem/releases)  [![platform](https://img.shields.io/badge/platform-MacOS%20%7C%20Linux-orange.svg)](#)\n# Avem :bird:\n\n![](docs/images/header.jpg)\n\n[UAV] - [STM32F103] - 6 Axes sensor MPU6050 - Quaternion &amp; Euler Angles Compute - PID Controller\n\n[Details & Videos](http://bbs.5imx.com/forum.php?mod=viewthread&tid=1227960&extra=page%3D1)\n\nTerminal demo\n\n<div align=\"center\"><img src=\"https://cdn.rawgit.com/but0n/Avem/develop/docs/images/hud.gif\"></div>\n\n![](docs/images/HUD.PNG)\n\nhttps://github.com/but0n/Avem_HUD\n\n# I/O List\n\nMPU6050 \t\t\t| BLDC \t\t\t\t| Wi-Fi \t\t\t\t| GPS\n:----:\t\t\t\t|:----:\t\t\t\t|:----: \t\t\t\t|:---:\n**`SCL`** PB15\t\t|**`Channel 1`** PA6|**`USART3_TX`** PB10\t|*TBD*\n**`SDA`** PB14\t\t|**`Channel 2`** PA7|**`USART3_RX`** PB11\t|*TBD*\n ||**`Channel 3`** PB0| | |\n ||**`Channel 4`** PB1| | |\n\n\n# To-do list\n\n- [x] Software **I2C**\n- [x] Init **MPU6050**\n- [x] Get 3 axes `Gryo` and 3 axes `Accel` data from MPU6050\n- [x] Cumpute Quaternion and Euler Angles\n- [x] **PWM** output\n- [x] ~~Driving motors with **L9110S**~~\n- [x] **PID** Control\n- [x] Schematic\n- [x] PCB Layout\n- [x] Brushless DC motor-[Video via YouTube](https://youtu.be/iHYVgTmxoSw)\n- [ ] **Wi-Fi**(`ESP8266`)\n- [x] [Cascade PID control](https://github.com/but0n/Avem/blob/master/docs/README.md)\n- [x] FreeRTOS\n- [x] Host: Flask + pyserial\n- [ ] PID debug\n- [ ] **GPS**\n\n\n# Hardware\n![](docs/images/PF.png)\n\n## Schematic\n![](docs/images/pcb.png)\n\n## PCB Layout\n\nVersion 3.0\n\n![](docs/images/PCB/demoV3.0.JPG)\n\n\n[Documents](docs/)\n\nMade with ♥ by but0n\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "linker.ld",
          "type": "blob",
          "size": 4.9794921875,
          "content": "ENTRY(Reset_Handler)\n\nMEMORY {\n\t/*Adust LENGTH to RAMsize of target MCU:*/\n\t/*STM32F103RBT --> 20K*/\n\t/*RAM (RWX) : ORIGIN = 0x20000000 , LENGTH = 20K*/\n\t/*STM32F103RET --> 64K*/\n\t/*STM32F103ZET --> 64K*/\n\tRAM (RWX) : ORIGIN = 0x20000000 , LENGTH = 64K\n\tEXTSRAM (RWX) : ORIGIN = 0x68000000 , LENGTH = 0\n\t/*Adust LENGTH to (FLASHsize - FeePROMsize) of target MCU:*/\n\t/*STM32F103RBT --> 126K*/\n\tFLASH (RX) : ORIGIN = 0x08000000 , LENGTH = 256K\n\t/*STM32F103RET --> 508K*/\n\t/*FLASH (RX) : ORIGIN = 0x08000000 , LENGTH = 508K*/\n\t/*STM32F103ZET --> 508K*/\n\t/*FLASH (RX) : ORIGIN = 0x08000000 , LENGTH = 508K*/\n\t/*Adust ORIGIN to (0x08000000 + (FLASHsize-FeePROMsize)) of target MCU*/\n\t/*and adust LENGTH to FeePROMsize allocated:*/\n\t/*STM32F103RBT --> 0x08000000+126K, 2K*/\n\tEEMUL (RWX) : ORIGIN = 0x08000000+508K, LENGTH = 4K\n\t/*STM32F103RET --> 0x08000000+508K, 4K*/\n\t/*EEMUL (RWX) : ORIGIN = 0x08000000+508K, LENGTH = 4K*/\n}\n_estack\t= ORIGIN(RAM)+LENGTH(RAM);\t/* end of the stack */\n_seemul = ORIGIN(EEMUL);\t/* start of the eeprom emulation area; stm32的 eeprom 是用 flash 模拟的 */\n_min_stack\t= 0x100;\t/* minimum stack space to reserve for the user app */\n/* check valid alignment for the vector table */\nASSERT(ORIGIN(FLASH) == ALIGN(ORIGIN(FLASH), 0x80), \"Start of memory region flash not aligned for startup vector table\");\nSECTIONS {\n\t/* vector table and program code goes into FLASH */\n\t.text : {\n\t\t. = ALIGN(0x80);\n\t\t_isr_vectors_offs = . - 0x08000000;\n\t\tKEEP(*(.isr_vectors))\n\t\t. = ALIGN(4);\n\t\tCREATE_OBJECT_SYMBOLS\n\t\t*(.text .text.*)\n\t} >FLASH\n\t.rodata : ALIGN (4) {\n\t\t*(.rodata .rodata.*)\n\n\t\t. = ALIGN(4);\n\t\tKEEP(*(.init))\n\n\t\t. = ALIGN(4);\n\t\t__preinit_array_start = .;\n\t\tKEEP (*(.preinit_array))\n\t\t__preinit_array_end = .;\n\n\t\t. = ALIGN(4);\n\t\t__init_array_start = .;\n\t\tKEEP (*(SORT(.init_array.*)))\n\t\tKEEP (*(.init_array))\n\t\t__init_array_end = .;\n\n\t\t. = ALIGN(4);\n\t\tKEEP(*(.fini))\n\n\t\t. = ALIGN(4);\n\t\t__fini_array_start = .;\n\t\tKEEP (*(.fini_array))\n\t\tKEEP (*(SORT(.fini_array.*)))\n\t\t__fini_array_end = .;\n\n\t\t*(.init .init.*)\n\t\t*(.fini .fini.*)\n\n\t\tPROVIDE_HIDDEN (__preinit_array_start = .);\n\t\tKEEP (*(.preinit_array))\n\t\tPROVIDE_HIDDEN (__preinit_array_end = .);\n\t\tPROVIDE_HIDDEN (__init_array_start = .);\n\t\tKEEP (*(SORT(.init_array.*)))\n\t\tKEEP (*(.init_array))\n\t\tPROVIDE_HIDDEN (__init_array_end = .);\n\t\tPROVIDE_HIDDEN (__fini_array_start = .);\n\t\tKEEP (*(.fini_array))\n\t\tKEEP (*(SORT(.fini_array.*)))\n\t\tPROVIDE_HIDDEN (__fini_array_end = .);\n\n\t\t. = ALIGN (8);\n\t\t*(.rom)\n\t\t*(.rom.b)\n\t\t_etext = .;\n\t\t_sidata = _etext; /* exported for the startup function */\n\t} >FLASH\n\t/*\n\t\tthis data is expected by the program to be in ram\n\t\tbut we have to store it in the FLASH otherwise it\n\t\twill get lost between resets, so the startup code\n\t\thas to copy it into RAM before the program starts\n\t*/\n\t.data : ALIGN (8) {\n\t\t_sdata = . ; /* exported for the startup function */\n\t\t. = ALIGN(4);\n\t\tKEEP(*(.jcr))\n\t\t*(.got.plt) *(.got)\n\t\t*(.shdata)\n\t\t*(.data .data.*)\n\t\t. = ALIGN (8);\n\t\t*(.ram)\n\t\t*(.ramfunc*)\n\t\t. = ALIGN(4);\n\t\t_edata = . ; /* exported for the startup function */\n\t} >RAM AT>FLASH\n\t/* This is the uninitialized data section */\n\t.bss (NOLOAD): {\n\t\t. = ALIGN(4);\n\t\t_sbss = . ; /* exported for the startup function */\n\t\t*(.shbss)\n\t\t*(.bss .bss.*)\n\t\t*(COMMON)\n\t\t. = ALIGN (8);\n\t\t*(.ram.b)\n\t\t. = ALIGN(4);\n\t\t_ebss = . ; /* exported for the startup function */\n\t\t_end = .;\n\t\t__end = .;\n\t} >RAM AT>FLASH\n\t/* ensure there is enough room for the user stack */\n\t._usrstack (NOLOAD): {\n\t\t. = ALIGN(4);\n\t\t_susrstack = . ;\n\t\t. = . + _min_stack ;\n\t\t. = ALIGN(4);\n\t\t_eusrstack = . ;\n\t} >RAM\n\t/* Stabs debugging sections. */\n\t.stab\t\t0 : { *(.stab) }\n\t.stabstr\t0 : { *(.stabstr) }\n\t.stab.excl \t0 : { *(.stab.excl) }\n\t.stab.exclstr \t0 : { *(.stab.exclstr) }\n\t.stab.index \t0 : { *(.stab.index) }\n\t.stab.indexstr \t0 : { *(.stab.indexstr) }\n\t.comment\t0 : { *(.comment) }\n\t/* DWARF debug sections.\n\t\tSymbols in the DWARF debugging sections are relative to the beginning\n\t\tof the section so we begin them at 0. */\n\t/* DWARF 1 */\n\t.debug\t\t0 : { *(.debug) }\n\t.line\t\t0 : { *(.line) }\n\t/* GNU DWARF 1 extensions */\n\t.debug_srcinfo 0 : { *(.debug_srcinfo) }\n\t.debug_sfnames 0 : { *(.debug_sfnames) }\n\t/* DWARF 1.1 and DWARF 2 */\n\t.debug_aranges 0 : { *(.debug_aranges) }\n\t.debug_pubnames 0 : { *(.debug_pubnames) }\n\t/* DWARF 2 */\n\t.debug_info \t0 : { *(.debug_info .gnu.linkonce.wi.*) }\n\t.debug_abbrev \t0 : { *(.debug_abbrev) }\n\t.debug_line \t0 : { *(.debug_line) }\n\t.debug_frame \t0 : { *(.debug_frame) }\n\t.debug_str\t0 : { *(.debug_str) }\n\t.debug_loc\t0 : { *(.debug_loc) }\n\t.debug_macinfo \t0 : { *(.debug_macinfo) }\n\t/* SGI/MIPS DWARF 2 extensions */\n\t.debug_weaknames 0 : { *(.debug_weaknames) }\n\t.debug_funcnames 0 : { *(.debug_funcnames) }\n\t.debug_typenames 0 : { *(.debug_typenames) }\n\t.debug_varnames 0 : { *(.debug_varnames) }\n\t/* DWARF 3 */\n\t.debug_pubtypes 0 : { *(.debug_pubtypes) }\n\t.debug_ranges 0 : { *(.debug_ranges) }\n\n\t.ARM.attributes 0 : { KEEP (*(.ARM.attributes)) KEEP (*(.gnu.attributes)) }\n\t.note.gnu.arm.ident 0 : { KEEP (*(.note.gnu.arm.ident)) }\n\t/DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) }\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}