{
  "metadata": {
    "timestamp": 1736709936099,
    "page": 467,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cokemine/ServerStatus-Hotaru",
      "stars": 2429,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0283203125,
          "content": ".idea\n.vscode\n*.iml\nout\ngen\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.03515625,
          "content": "MIT License\n\nCopyright 2019 CokeMine\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.62890625,
          "content": "# ServerStatus-Hotaru\n云探针、多服务器探针、云监控、多服务器云监控\n\n基于 ServerStatus-Toyo 最新版本稍作修改。\n\n## 特性\n\n服务端客户端脚本支持系统：Centos 7、Debian 8、Ubuntu 15.10 及以上、ArchLinux\n\nPython 客户端：支持 Python 版本：Python 2.7+\n\nGo 客户端：如果您的客户端环境无法使用 Python， 可以使用 Go 编写的客户端\n\n开源地址：https://github.com/cokemine/ServerStatus-goclient\n\n流量计算：客户端可以选择使用 vnStat 按月计算流量，会自动编译安装最新版本vnStat（ArchLinux 会从软件源安装最新版本）。如不使用 vnStat ，则默认计算流量方式为重启后流量清零。请注意 ServerStatus 不会把协议为 GPLv2 的 vnStat 作为必须的依赖。\n\n前端基于 Vue 3.0 和 SemanticUI 制作，如需修改前端建议自行修改打包。\n\n前端所使用一些静态资源见前端仓库下的声明。\n\n前端开源地址：https://github.com/cokemine/hotaru_theme\n\n## 其他说明\n\nServerStatus-Hotaru 将会停留在轻量级的 ServerStatus，不会再添加新的功能\n\n如果你有以下需求：\n\n1、服务端更低的 IO 占用\n\n2、Websocket 支持\n\n3、Docker 支持\n\n4、更方便服务器的顺序调整\n\n5、客户端掉线 Telegram Bot 通知\n\n6、使用 Web 管理、添加、修改客户端信息\n\n7、等等\n\n欢迎使用 NodeStatus: https://github.com/cokemine/nodestatus\n\n本项目仍会继续维护\n\n## 安装方法\n\n服务端：\n\n```bash\nwget https://raw.githubusercontent.com/cokemine/ServerStatus-Hotaru/master/status.sh\n# wget https://cokemine.coding.net/p/hotarunet/d/ServerStatus-Hotaru/git/raw/master/status.sh 若服务器位于中国大陆建议选择 Coding.net 仓库\nbash status.sh s\n```\n\n客户端：\n\n```\nbash status.sh c\n```\n\n## 手动安装服务端\n\n```bash\nmkdir -p /usr/local/ServerStatus/server\napt install wget unzip curl vim build-essential\ncd /tmp\nwget https://github.com/cokemine/ServerStatus-Hotaru/archive/master.zip\nunzip master.zip\ncd ./ServerStatus-Hotaru-master/server\nmake #编译生成二进制文件\nchmod +x sergate\nmv sergate /usr/local/ServerStatus/server\nvim /usr/local/ServerStatus/server/config.json #修改配置文件\n#下载前端\ncd /tmp && wget https://github.com/cokemine/hotaru_theme/releases/latest/download/hotaru-theme.zip\nunzip hotaru-theme.zip\nmv ./hotaru-theme /usr/local/ServerStatus/web #此为站点根目录，请自行设置\nnohup ./sergate --config=config.json --web-dir=/usr/local/ServerStatus/web --port=35601 > /tmp/serverstatus_server.log 2>&1 & #默认端口35601\n```\n\n## 手动安装客户端\n\n使用 Psutil 版客户端即可使 ServerStatus 客户端在 Windows 等其他平台运行\n\n```powershell\ncurl https://bootstrap.pypa.io/get-pip.py -o get-pip.py # 若未安装pip\npython get-pip.py\npython pip install psutil\n# 修改 status-psutil.py\npython status-psutil.py\n```\n\nLinux 版客户端支持绝大部分 Linux 发行版系统，一般不需要使用 psutil 版客户端。\n\n```bash\napt install python3 python3-pip wget\npip3 install psutil\nwget https://raw.githubusercontent.com/cokemine/ServerStatus-Hotaru/master/clients/status-psutil.py\nvim status-psutil.py #修改客户端配置文件\npython3 status-psutil.py\n# https://raw.githubusercontent.com/cokemine/ServerStatus-Hotaru/master/clients/status-client.py 默认版本无需 psutil 依赖\n```\n\n## 更新前端\n\n默认服务端更新不会更新前端。因为更新前端会导致自己自定义的前端消失。\n\n```bash\nrm -rf /usr/local/ServerStatus/web/*\nwget https://github.com/cokemine/hotaru_theme/releases/latest/download/hotaru-theme.zip\nunzip hotaru-theme.zip\nmv ./hotaru-theme/* /usr/local/ServerStatus/web/\nservice status-server restart\n# systemctl restart status-server\n```\n\n## 关于前端旗帜图标\n\n目前通过脚本使用旗帜图标仅支援当前国家/地区在 ISO 3166-1 标准里，否则可能会出现无法添加的情况，如欧盟 `EU`，但是前端是具备该旗帜的。你可能需要手动加入。方法是修改`/usr/local/ServerStatus/server/config.json`，将你想修改的服务器的`region`改成你需要的。\n\n同时，前端还具备以下特殊旗帜，可供选择使用，启用也是需要上述修改。\n\nTransgender flag: `trans`\n\nRainbow flag: `rainbow`\n\nPirate flag: `pirate`\n\n## Toyo版本修改方法\n\n如果你使用 Toyo 版本或其他版本的 ServerStatus，请备份你的config文件并重新编译安装本版本服务端\n\n配置文件: /usr/local/ServerStatus/server/config.json 备份并自行添加`region`\n\n```json\n{\n   \"username\": \"Name\",\n   \"password\": \"Password\",\n   \"name\": \"Your Servername\",\n   \"type\": \"KVM\",\n   \"host\": \"None\",\n   \"location\": \"洛杉矶\",\n   \"disabled\": false,\n   \"region\": \"US\"\n},\n```\n\n替换配置文件，重启 ServerStatus\n\n## 效果演示\n\n![](https://i.imgur.com/utfcHPV.png)\n\n## 相关开源项目 ： \n* ServerStatus-Toyo：https://github.com/ToyoDAdoubiBackup/ServerStatus-Toyo MIT License\n* ServerStatus：https://github.com/BotoX/ServerStatus WTFPL License\n* mojeda's ServerStatus: https://github.com/mojeda/ServerStatus WTFPL License -> GNU GPLv3 License (ServerStatus is a full rewrite of mojeda's ServerStatus script and not affected by GPL)\n* BlueVM's project: http://www.lowendtalk.com/discussion/comment/169690#Comment_169690 WTFPL License\n\n## 感谢\n\n* i18n-iso-countries: https://github.com/michaelwittig/node-i18n-iso-countries MIT License (To convert country name in Chinese to iso 3166-1 and check if the code is valid)\n* jq: https://github.com/stedolan/jq CC BY 3.0 License\n* caddy: https://github.com/caddyserver/caddy Apache-2.0 License\n* twemoji: https://github.com/twitter/twemoji CC-BY 4.0 License (The flag icons are designed by Twitter)\n\n"
        },
        {
          "name": "caddy",
          "type": "tree",
          "content": null
        },
        {
          "name": "clients",
          "type": "tree",
          "content": null
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        },
        {
          "name": "service",
          "type": "tree",
          "content": null
        },
        {
          "name": "status.sh",
          "type": "blob",
          "size": 51.220703125,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#=================================================\n#  System Required: CentOS/Debian/Ubuntu/ArchLinux\n#  Description: ServerStatus client + server\n#  Version: Test v0.4.1\n#  Author: Toyo, Modified by APTX\n#=================================================\n\nsh_ver=\"0.4.1\"\nfilepath=$(\n  cd \"$(dirname \"$0\")\" || exit\n  pwd\n)\nfile_1=$(echo -e \"${filepath}\" | awk -F \"$0\" '{print $1}')\nfile=\"/usr/local/ServerStatus\"\nweb_file=\"/usr/local/ServerStatus/web\"\nserver_file=\"/usr/local/ServerStatus/server\"\nserver_conf=\"/usr/local/ServerStatus/server/config.json\"\nserver_conf_1=\"/usr/local/ServerStatus/server/config.conf\"\nclient_file=\"/usr/local/ServerStatus/client\"\n\nclient_log_file=\"/tmp/serverstatus_client.log\"\nserver_log_file=\"/tmp/serverstatus_server.log\"\njq_file=\"${file}/jq\"\n[[ ! -e ${jq_file} ]] && jq_file=\"/usr/bin/jq\"\nregion_json=\"${file}/region.json\"\n\ngithub_prefix=\"https://raw.githubusercontent.com/CokeMine/ServerStatus-Hotaru/master\"\ncoding_prefix=\"https://cokemine.coding.net/p/hotarunet/d/ServerStatus-Hotaru/git/raw/master\"\nlink_prefix=${github_prefix}\n\nGreen_font_prefix=\"\\033[32m\" && Red_font_prefix=\"\\033[31m\" && Red_background_prefix=\"\\033[41;37m\" && Font_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\"\nError=\"${Red_font_prefix}[错误]${Font_color_suffix}\"\nTip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n\n#检查系统\ncheck_sys() {\n  if [[ -f /etc/redhat-release ]]; then\n    release=\"centos\"\n  elif grep -q -E -i \"debian|ubuntu\" /etc/issue; then\n    release=\"debian\"\n  elif grep -q -E -i \"centos|red hat|redhat\" /etc/issue; then\n    release=\"centos\"\n  elif grep -q -E -i \"Arch|Manjaro\" /etc/issue; then\n    release=\"archlinux\"\n  elif grep -q -E -i \"debian|ubuntu\" /proc/version; then\n    release=\"debian\"\n  elif grep -q -E -i \"centos|red hat|redhat\" /proc/version; then\n    release=\"centos\"\n  else\n    echo -e \"ServerStatus 暂不支持该Linux发行版\"\n  fi\n  bit=$(uname -m)\n}\ncheck_installed_server_status() {\n  [[ ! -e \"${server_file}/sergate\" ]] && echo -e \"${Error} ServerStatus 服务端没有安装，请检查 !\" && exit 1\n}\ncheck_installed_client_status() {\n  [[ ! -e \"${client_file}/status-client.py\" ]] && echo -e \"${Error} ServerStatus 客户端没有安装，请检查 !\" && exit 1\n}\ncheck_pid_server() {\n  #PID=$(ps -ef | grep \"sergate\" | grep -v grep | grep -v \".sh\" | grep -v \"init.d\" | grep -v \"service\" | awk '{print $2}')\n  PID=$(pgrep -f \"sergate\")\n}\ncheck_pid_client() {\n  #PID=$(ps -ef | grep \"status-client.py\" | grep -v grep | grep -v \".sh\" | grep -v \"init.d\" | grep -v \"service\" | awk '{print $2}')\n  PID=$(pgrep -f \"status-client.py\")\n}\ncheck_region() {\n  # 如果找不到 region 文件, 默认不检测\n  [[ ! -e \"${region_json}\" ]] && return 0\n  if ${jq_file} \"[.countries | has(\\\"${region_s}}\\\")]\" \"${region_json}\" | grep -q 'true' >/dev/null 2>&1; then\n    return 0\n  elif grep -qw \"${region_s}\" \"${region_json}\"; then\n    region_s=$(grep -w \"${region_s}\" \"${region_json}\" | sed \"s/[[:space:]]//g\")\n    region_s=${region_s:1:2}\n    return 0\n  fi\n  return 1\n}\nDownload_Server_Status_server() {\n  cd \"/tmp\" || exit 1\n  [[ ${mirror_num} == 2 ]] && bundle_link=\"https://cokemine.coding.net/p/hotarunet/d/ServerStatus-Hotaru/git/archive/master/?download=true\" || bundle_link=\"https://github.com/CokeMine/ServerStatus-Hotaru/archive/master.zip\"\n  [[ ${mirror_num} == 2 ]] && github_link=\"https://hub.fastgit.org\" || github_link=\"https://github.com\"\n  wget -N --no-check-certificate \"${bundle_link}\" -O \"master.zip\"\n  [[ ! -e \"master.zip\" ]] && echo -e \"${Error} ServerStatus 服务端下载失败 !\" && exit 1\n  unzip master.zip\n  rm -rf master.zip\n  [[ -d \"/tmp/cokemine-hotarunet-ServerStatus-Hotaru-master\" ]] && mv \"/tmp/cokemine-hotarunet-ServerStatus-Hotaru-master\" \"/tmp/ServerStatus-Hotaru-master\"\n  [[ ! -d \"/tmp/ServerStatus-Hotaru-master\" ]] && echo -e \"${Error} ServerStatus 服务端解压失败 !\" && exit 1\n  cd \"/tmp/ServerStatus-Hotaru-master/server\" || exit 1\n  make\n  [[ ! -e \"sergate\" ]] && echo -e \"${Error} ServerStatus 服务端编译失败 !\" && cd \"${file_1}\" && rm -rf \"/tmp/ServerStatus-Hotaru-master\" && exit 1\n  cd \"${file_1}\" || exit 1\n  mkdir -p \"${server_file}\"\n  if [[ -e \"${server_file}/sergate\" ]]; then\n    mv \"${server_file}/sergate\" \"${server_file}/sergate1\"\n    mv \"/tmp/ServerStatus-Hotaru-master/server/sergate\" \"${server_file}/sergate\"\n  else\n    mv \"/tmp/ServerStatus-Hotaru-master/server/sergate\" \"${server_file}/sergate\"\n    wget -N --no-check-certificate \"${github_link}/cokemine/hotaru_theme/releases/latest/download/hotaru-theme.zip\"\n    unzip hotaru-theme.zip && mv \"./hotaru-theme\" \"${web_file}\"\n    rm -rf hotaru-theme.zip\n  fi\n  rm -rf \"/tmp/ServerStatus-Hotaru-master\"\n  if [[ ! -e \"${server_file}/sergate\" ]]; then\n    echo -e \"${Error} ServerStatus 服务端移动重命名失败 !\"\n    [[ -e \"${server_file}/sergate1\" ]] && mv \"${server_file}/sergate1\" \"${server_file}/sergate\"\n    exit 1\n  else\n    [[ -e \"${server_file}/sergate1\" ]] && rm -rf \"${server_file}/sergate1\"\n  fi\n}\nDownload_Server_Status_client() {\n  cd \"/tmp\" || exit 1\n  wget -N --no-check-certificate \"${link_prefix}/clients/status-client.py\"\n  [[ ! -e \"status-client.py\" ]] && echo -e \"${Error} ServerStatus 客户端下载失败 !\" && exit 1\n  cd \"${file_1}\" || exit 1\n  mkdir -p \"${client_file}\"\n  [[ -e \"${client_file}/status-client.py\" ]] && mv \"${client_file}/status-client.py\" \"${client_file}/status-client1.py\"\n  mv \"/tmp/status-client.py\" \"${client_file}/status-client.py\"\n  if [[ ! -e \"${client_file}/status-client.py\" ]]; then\n    echo -e \"${Error} ServerStatus 客户端移动失败 !\"\n    [[ -e \"${client_file}/status-client1.py\" ]] && mv \"${client_file}/status-client1.py\" \"${client_file}/status-client.py\"\n    rm -rf \"/tmp/status-client.py\"\n    exit 1\n  else\n    [[ -e \"${client_file}/status-client1.py\" ]] && rm -rf \"${client_file}/status-client1.py\"\n    rm -rf \"/tmp/status-client.py\"\n  fi\n}\nDownload_Server_Status_Service() {\n  mode=$1\n  [[ -z ${mode} ]] && mode=\"server\"\n  local service_note=\"服务端\"\n  [[ ${mode} == \"client\" ]] && service_note=\"客户端\"\n  if [[ ${release} == \"archlinux\" ]]; then\n    wget --no-check-certificate \"${link_prefix}/service/status-${mode}.service\" -O \"/usr/lib/systemd/system/status-${mode}.service\" ||\n      {\n        echo -e \"${Error} ServerStatus ${service_note}服务管理脚本下载失败 !\"\n        exit 1\n      }\n    systemctl enable \"status-${mode}.service\"\n  else\n    wget --no-check-certificate \"${link_prefix}/service/server_status_${mode}_${release}\" -O \"/etc/init.d/status-${mode}\" ||\n      {\n        echo -e \"${Error} ServerStatus ${service_note}服务管理脚本下载失败 !\"\n        exit 1\n      }\n    chmod +x \"/etc/init.d/status-${mode}\"\n    [[ ${release} == \"centos\" ]] &&\n      {\n        chkconfig --add \"status-${mode}\"\n        chkconfig \"status-${mode}\" on\n      }\n\n    [[ ${release} == \"debian\" ]] && update-rc.d -f \"status-${mode}\" defaults\n  fi\n  echo -e \"${Info} ServerStatus ${service_note}服务管理脚本下载完成 !\"\n}\nService_Server_Status_server() {\n  Download_Server_Status_Service \"server\"\n}\nService_Server_Status_client() {\n  Download_Server_Status_Service \"client\"\n}\nInstallation_dependency() {\n  mode=$1\n  if [[ ${release} == \"centos\" ]]; then\n    yum makecache\n    yum -y install unzip\n    yum -y install python3 >/dev/null 2>&1 || yum -y install python\n    [[ ${mode} == \"server\" ]] && yum -y groupinstall \"Development Tools\"\n  elif [[ ${release} == \"debian\" ]]; then\n    apt -y update\n    apt -y install unzip\n    apt -y install python3 >/dev/null 2>&1 || apt -y install python\n    [[ ${mode} == \"server\" ]] && apt -y install build-essential\n  elif [[ ${release} == \"archlinux\" ]]; then\n    pacman -Sy python python-pip unzip --noconfirm\n    [[ ${mode} == \"server\" ]] && pacman -Sy base-devel --noconfirm\n  fi\n  [[ ! -e /usr/bin/python ]] && ln -s /usr/bin/python3 /usr/bin/python\n}\nWrite_server_config() {\n  cat >${server_conf} <<-EOF\n{\"servers\":\n [\n  {\n   \"username\": \"username01\",\n   \"password\": \"password\",\n   \"name\": \"Server 01\",\n   \"type\": \"KVM\",\n   \"host\": \"\",\n   \"location\": \"Hong Kong\",\n   \"disabled\": false,\n   \"region\": \"HK\"\n  }\n ]\n}\nEOF\n}\nWrite_server_config_conf() {\n  cat >${server_conf_1} <<-EOF\nPORT = ${server_port_s}\nEOF\n}\nRead_config_client() {\n  client_text=\"$(sed 's/\\\"//g;s/,//g;s/ //g' \"${client_file}/status-client.py\") \"\n  client_server=\"$(echo -e \"${client_text}\" | grep \"SERVER=\" | awk -F \"=\" '{print $2}')\"\n  client_port=\"$(echo -e \"${client_text}\" | grep \"PORT=\" | awk -F \"=\" '{print $2}')\"\n  client_user=\"$(echo -e \"${client_text}\" | grep \"USER=\" | awk -F \"=\" '{print $2}')\"\n  client_password=\"$(echo -e \"${client_text}\" | grep \"PASSWORD=\" | awk -F \"=\" '{print $2}')\"\n  grep -q \"NET_IN, NET_OUT = get_traffic_vnstat()\" \"${client_file}/status-client.py\" && client_vnstat=\"true\" || client_vnstat=\"false\"\n}\nRead_config_server() {\n  if [[ ! -e \"${server_conf_1}\" ]]; then\n    server_port_s=\"35601\"\n    Write_server_config_conf\n    server_port=\"35601\"\n  else\n    server_port=\"$(grep \"PORT = \" ${server_conf_1} | awk '{print $3}')\"\n  fi\n}\nSet_server() {\n  mode=$1\n  [[ -z ${mode} ]] && mode=\"server\"\n  if [[ ${mode} == \"server\" ]]; then\n    echo -e \"请输入 ServerStatus 服务端中网站要设置的 域名[server]\n默认为本机IP为域名，例如输入: toyoo.pw ，如果要使用本机IP，请留空直接回车\"\n    read -erp \"(默认: 本机IP):\" server_s\n    [[ -z \"$server_s\" ]] && server_s=\"\"\n  else\n    echo -e \"请输入 ServerStatus 服务端的 IP/域名[server]，请注意，如果你的域名使用了CDN，请直接填写IP\"\n    read -erp \"(默认: 127.0.0.1):\" server_s\n    [[ -z \"$server_s\" ]] && server_s=\"127.0.0.1\"\n  fi\n\n  echo && echo \"\t================================================\"\n  echo -e \"\tIP/域名[server]: ${Red_background_prefix} ${server_s} ${Font_color_suffix}\"\n  echo \"\t================================================\" && echo\n}\nSet_server_http_port() {\n  while true; do\n    echo -e \"请输入 ServerStatus 服务端中网站要设置的 域名/IP的端口[1-65535]（如果是域名的话，一般用 80 端口）\"\n    read -erp \"(默认: 8888):\" server_http_port_s\n    [[ -z \"$server_http_port_s\" ]] && server_http_port_s=\"8888\"\n    if [[ \"$server_http_port_s\" =~ ^[0-9]*$ ]]; then\n      if [[ ${server_http_port_s} -ge 1 ]] && [[ ${server_http_port_s} -le 65535 ]]; then\n        echo && echo \"\t================================================\"\n        echo -e \"\t端口: ${Red_background_prefix} ${server_http_port_s} ${Font_color_suffix}\"\n        echo \"\t================================================\" && echo\n        break\n      else\n        echo \"输入错误, 请输入正确的端口。\"\n      fi\n    else\n      echo \"输入错误, 请输入正确的端口。\"\n    fi\n  done\n}\nSet_server_port() {\n  while true; do\n    echo -e \"请输入 ServerStatus 服务端监听的端口[1-65535]（用于服务端接收客户端消息的端口，客户端要填写这个端口）\"\n    read -erp \"(默认: 35601):\" server_port_s\n    [[ -z \"$server_port_s\" ]] && server_port_s=\"35601\"\n    if [[ \"$server_port_s\" =~ ^[0-9]*$ ]]; then\n      if [[ ${server_port_s} -ge 1 ]] && [[ ${server_port_s} -le 65535 ]]; then\n        echo && echo \"\t================================================\"\n        echo -e \"\t端口: ${Red_background_prefix} ${server_port_s} ${Font_color_suffix}\"\n        echo \"\t================================================\" && echo\n        break\n      else\n        echo \"输入错误, 请输入正确的端口。\"\n      fi\n    else\n      echo \"输入错误, 请输入正确的端口。\"\n    fi\n  done\n}\nSet_username() {\n  mode=$1\n  [[ -z ${mode} ]] && mode=\"server\"\n  if [[ ${mode} == \"server\" ]]; then\n    echo -e \"请输入 ServerStatus 服务端要设置的用户名[username]（字母/数字，不可与其他账号重复）\"\n  else\n    echo -e \"请输入 ServerStatus 服务端中对应配置的用户名[username]（字母/数字，不可与其他账号重复）\"\n  fi\n  read -erp \"(默认: 取消):\" username_s\n  [[ -z \"$username_s\" ]] && echo \"已取消...\" && exit 0\n  echo && echo \"\t================================================\"\n  echo -e \"\t账号[username]: ${Red_background_prefix} ${username_s} ${Font_color_suffix}\"\n  echo \"\t================================================\" && echo\n}\nSet_password() {\n  mode=$1\n  [[ -z ${mode} ]] && mode=\"server\"\n  if [[ ${mode} == \"server\" ]]; then\n    echo -e \"请输入 ServerStatus 服务端要设置的密码[password]（字母/数字，可重复）\"\n  else\n    echo -e \"请输入 ServerStatus 服务端中对应配置的密码[password]（字母/数字）\"\n  fi\n  read -erp \"(默认: doub.io):\" password_s\n  [[ -z \"$password_s\" ]] && password_s=\"doub.io\"\n  echo && echo \"\t================================================\"\n  echo -e \"\t密码[password]: ${Red_background_prefix} ${password_s} ${Font_color_suffix}\"\n  echo \"\t================================================\" && echo\n}\nSet_vnstat() {\n  echo -e \"对于流量计算是否使用Vnstat每月自动清零？ [y/N]\"\n  read -erp \"(默认: N):\" isVnstat\n  [[ -z \"$isVnstat\" ]] && isVnstat=\"n\"\n}\nSet_name() {\n  echo -e \"请输入 ServerStatus 服务端要设置的节点名称[name]（支持中文，前提是你的系统和SSH工具支持中文输入，仅仅是个名字）\"\n  read -erp \"(默认: Server 01):\" name_s\n  [[ -z \"$name_s\" ]] && name_s=\"Server 01\"\n  echo && echo \"\t================================================\"\n  echo -e \"\t节点名称[name]: ${Red_background_prefix} ${name_s} ${Font_color_suffix}\"\n  echo \"\t================================================\" && echo\n}\nSet_type() {\n  echo -e \"请输入 ServerStatus 服务端要设置的节点虚拟化类型[type]（例如 OpenVZ / KVM）\"\n  read -erp \"(默认: KVM):\" type_s\n  [[ -z \"$type_s\" ]] && type_s=\"KVM\"\n  echo && echo \"\t================================================\"\n  echo -e \"\t虚拟化类型[type]: ${Red_background_prefix} ${type_s} ${Font_color_suffix}\"\n  echo \"\t================================================\" && echo\n}\nSet_location() {\n  echo -e \"请输入 ServerStatus 服务端要设置的节点位置[location]（支持中文，前提是你的系统和SSH工具支持中文输入）\"\n  read -erp \"(默认: Hong Kong):\" location_s\n  [[ -z \"$location_s\" ]] && location_s=\"Hong Kong\"\n  echo && echo \"\t================================================\"\n  echo -e \"\t节点位置[location]: ${Red_background_prefix} ${location_s} ${Font_color_suffix}\"\n  echo \"\t================================================\" && echo\n}\nSet_region() {\n  echo -e \"请输入 ServerStatus 服务端要设置的节点地区[region]（用于国家/地区的旗帜图标显示）\"\n  read -erp \"(默认: HK):\" region_s\n  [[ -z \"$region_s\" ]] && region_s=\"HK\"\n  while ! check_region; do\n    read -erp \"你输入的节点地区不合法，请重新输入：\" region_s\n  done\n  echo && echo \"\t================================================\"\n  echo -e \"\t节点地区[region]: ${Red_background_prefix} ${region_s} ${Font_color_suffix}\"\n  echo \"\t================================================\" && echo\n}\nSet_config_server() {\n  Set_username \"server\"\n  Set_password \"server\"\n  Set_name\n  Set_type\n  Set_location\n  Set_region\n}\nSet_config_client() {\n  Set_server \"client\"\n  Set_server_port\n  Set_username \"client\"\n  Set_password \"client\"\n  Set_vnstat\n}\nSet_ServerStatus_server() {\n  check_installed_server_status\n  echo && echo -e \" 你要做什么？\n\n ${Green_font_prefix} 1.${Font_color_suffix} 添加 节点配置\n ${Green_font_prefix} 2.${Font_color_suffix} 删除 节点配置\n————————\n ${Green_font_prefix} 3.${Font_color_suffix} 修改 节点配置 - 节点用户名\n ${Green_font_prefix} 4.${Font_color_suffix} 修改 节点配置 - 节点密码\n ${Green_font_prefix} 5.${Font_color_suffix} 修改 节点配置 - 节点名称\n ${Green_font_prefix} 6.${Font_color_suffix} 修改 节点配置 - 节点虚拟化\n ${Green_font_prefix} 7.${Font_color_suffix} 修改 节点配置 - 节点位置\n ${Green_font_prefix} 8.${Font_color_suffix} 修改 节点配置 - 节点区域\n ${Green_font_prefix} 9.${Font_color_suffix} 修改 节点配置 - 全部参数\n————————\n ${Green_font_prefix} 10.${Font_color_suffix} 启用/禁用 节点配置\n————————\n ${Green_font_prefix}11.${Font_color_suffix} 修改 服务端监听端口\" && echo\n  read -erp \"(默认: 取消):\" server_num\n  [[ -z \"${server_num}\" ]] && echo \"已取消...\" && exit 1\n  if [[ ${server_num} == \"1\" ]]; then\n    Add_ServerStatus_server\n  elif [[ ${server_num} == \"2\" ]]; then\n    Del_ServerStatus_server\n  elif [[ ${server_num} == \"3\" ]]; then\n    Modify_ServerStatus_server_username\n  elif [[ ${server_num} == \"4\" ]]; then\n    Modify_ServerStatus_server_password\n  elif [[ ${server_num} == \"5\" ]]; then\n    Modify_ServerStatus_server_name\n  elif [[ ${server_num} == \"6\" ]]; then\n    Modify_ServerStatus_server_type\n  elif [[ ${server_num} == \"7\" ]]; then\n    Modify_ServerStatus_server_location\n  elif [[ ${server_num} == \"8\" ]]; then\n    Modify_ServerStatus_server_region\n  elif [[ ${server_num} == \"9\" ]]; then\n    Modify_ServerStatus_server_all\n  elif [[ ${server_num} == \"10\" ]]; then\n    Modify_ServerStatus_server_disabled\n  elif [[ ${server_num} == \"11\" ]]; then\n    Read_config_server\n    Set_server_port\n    Write_server_config_conf\n  else\n    echo -e \"${Error} 请输入正确的数字[1-11]\" && exit 1\n  fi\n  Restart_ServerStatus_server\n}\nList_ServerStatus_server() {\n  conf_text=$(${jq_file} '.servers' ${server_conf} | ${jq_file} \".[]|.username\" | sed 's/\\\"//g')\n  conf_text_total=$(echo -e \"${conf_text}\" | wc -l)\n  [[ ${conf_text_total} == \"0\" ]] && echo -e \"${Error} 没有发现 一个节点配置，请检查 !\" && exit 1\n  conf_text_total_a=$((conf_text_total - 1))\n  conf_list_all=\"\"\n  for ((integer = 0; integer <= conf_text_total_a; integer++)); do\n    now_text=$(${jq_file} '.servers' ${server_conf} | ${jq_file} \".[${integer}]\" | sed 's/\\\"//g;s/,$//g' | sed '$d;1d')\n    now_text_username=$(echo -e \"${now_text}\" | grep \"username\" | awk -F \": \" '{print $2}')\n    now_text_password=$(echo -e \"${now_text}\" | grep \"password\" | awk -F \": \" '{print $2}')\n    now_text_name=$(echo -e \"${now_text}\" | grep \"name\" | grep -v \"username\" | awk -F \": \" '{print $2}')\n    now_text_type=$(echo -e \"${now_text}\" | grep \"type\" | awk -F \": \" '{print $2}')\n    now_text_location=$(echo -e \"${now_text}\" | grep \"location\" | awk -F \": \" '{print $2}')\n    now_text_region=$(echo -e \"${now_text}\" | grep \"region\" | awk -F \": \" '{print $2}')\n    now_text_disabled=$(echo -e \"${now_text}\" | grep \"disabled\" | awk -F \": \" '{print $2}')\n    if [[ ${now_text_disabled} == \"false\" ]]; then\n      now_text_disabled_status=\"${Green_font_prefix}启用${Font_color_suffix}\"\n    else\n      now_text_disabled_status=\"${Red_font_prefix}禁用${Font_color_suffix}\"\n    fi\n    conf_list_all=${conf_list_all}\"用户名: ${Green_font_prefix}${now_text_username}${Font_color_suffix} 密码: ${Green_font_prefix}${now_text_password}${Font_color_suffix} 节点名: ${Green_font_prefix}${now_text_name}${Font_color_suffix} 类型: ${Green_font_prefix}${now_text_type}${Font_color_suffix} 位置: ${Green_font_prefix}${now_text_location}${Font_color_suffix} 区域: ${Green_font_prefix}${now_text_region}${Font_color_suffix} 状态: ${Green_font_prefix}${now_text_disabled_status}${Font_color_suffix}\\n\"\n  done\n  echo && echo -e \"节点总数 ${Green_font_prefix}${conf_text_total}${Font_color_suffix}\"\n  echo -e \"${conf_list_all}\"\n}\nAdd_ServerStatus_server() {\n  Set_config_server\n  Set_username_ch=$(grep '\"username\": \"'\"${username_s}\"'\"' ${server_conf})\n  [[ -n \"${Set_username_ch}\" ]] && echo -e \"${Error} 用户名已被使用 !\" && exit 1\n  sed -i '3i\\  },' ${server_conf}\n  sed -i '3i\\   \"region\": \"'\"${region_s}\"'\"' ${server_conf}\n  sed -i '3i\\   \"disabled\": false ,' ${server_conf}\n  sed -i '3i\\   \"location\": \"'\"${location_s}\"'\",' ${server_conf}\n  sed -i '3i\\   \"host\": \"'\"None\"'\",' ${server_conf}\n  sed -i '3i\\   \"type\": \"'\"${type_s}\"'\",' ${server_conf}\n  sed -i '3i\\   \"name\": \"'\"${name_s}\"'\",' ${server_conf}\n  sed -i '3i\\   \"password\": \"'\"${password_s}\"'\",' ${server_conf}\n  sed -i '3i\\   \"username\": \"'\"${username_s}\"'\",' ${server_conf}\n  sed -i '3i\\  {' ${server_conf}\n  echo -e \"${Info} 添加节点成功 ${Green_font_prefix}[ 节点名称: ${name_s}, 节点用户名: ${username_s}, 节点密码: ${password_s} ]${Font_color_suffix} !\"\n}\nDel_ServerStatus_server() {\n  List_ServerStatus_server\n  [[ \"${conf_text_total}\" == \"1\" ]] && echo -e \"${Error} 节点配置仅剩 1个，不能删除 !\" && exit 1\n  echo -e \"请输入要删除的节点用户名\"\n  read -erp \"(默认: 取消):\" del_server_username\n  [[ -z \"${del_server_username}\" ]] && echo -e \"已取消...\" && exit 1\n  del_username=$(cat -n ${server_conf} | grep '\"username\": \"'\"${del_server_username}\"'\"' | awk '{print $1}')\n  if [[ -n ${del_username} ]]; then\n    del_username_min=$((del_username - 1))\n    del_username_max=$((del_username + 8))\n    del_username_max_text=$(sed -n \"${del_username_max}p\" ${server_conf})\n    del_username_max_text_last=${del_username_max_text:((${#del_username_max_text} - 1))}\n    if [[ ${del_username_max_text_last} != \",\" ]]; then\n      del_list_num=$((del_username_min - 1))\n      sed -i \"${del_list_num}s/,$//g\" ${server_conf}\n    fi\n    sed -i \"${del_username_min},${del_username_max}d\" ${server_conf}\n    echo -e \"${Info} 节点删除成功 ${Green_font_prefix}[ 节点用户名: ${del_server_username} ]${Font_color_suffix} \"\n  else\n    echo -e \"${Error} 请输入正确的节点用户名 !\" && exit 1\n  fi\n}\nModify_ServerStatus_server_username() {\n  List_ServerStatus_server\n  echo -e \"请输入要修改的节点用户名\"\n  read -erp \"(默认: 取消):\" manually_username\n  [[ -z \"${manually_username}\" ]] && echo -e \"已取消...\" && exit 1\n  Set_username_num=$(cat -n ${server_conf} | grep '\"username\": \"'\"${manually_username}\"'\"' | awk '{print $1}')\n  if [[ -n ${Set_username_num} ]]; then\n    Set_username\n    Set_username_ch=$(grep '\"username\": \"'\"${username_s}\"'\"' ${server_conf})\n    [[ -n \"${Set_username_ch}\" ]] && echo -e \"${Error} 用户名已被使用 !\" && exit 1\n    sed -i \"${Set_username_num}\"'s/\"username\": \"'\"${manually_username}\"'\"/\"username\": \"'\"${username_s}\"'\"/g' ${server_conf}\n    echo -e \"${Info} 修改成功 [ 原节点用户名: ${manually_username}, 新节点用户名: ${username_s} ]\"\n  else\n    echo -e \"${Error} 请输入正确的节点用户名 !\" && exit 1\n  fi\n}\nModify_ServerStatus_server_password() {\n  List_ServerStatus_server\n  echo -e \"请输入要修改的节点用户名\"\n  read -erp \"(默认: 取消):\" manually_username\n  [[ -z \"${manually_username}\" ]] && echo -e \"已取消...\" && exit 1\n  Set_username_num=$(cat -n ${server_conf} | grep '\"username\": \"'\"${manually_username}\"'\"' | awk '{print $1}')\n  if [[ -n ${Set_username_num} ]]; then\n    Set_password\n    Set_password_num_a=$((Set_username_num + 1))\n    Set_password_num_text=$(sed -n \"${Set_password_num_a}p\" ${server_conf} | sed 's/\\\"//g;s/,$//g' | awk -F \": \" '{print $2}')\n    sed -i \"${Set_password_num_a}\"'s/\"password\": \"'\"${Set_password_num_text}\"'\"/\"password\": \"'\"${password_s}\"'\"/g' ${server_conf}\n    echo -e \"${Info} 修改成功 [ 原节点密码: ${Set_password_num_text}, 新节点密码: ${password_s} ]\"\n  else\n    echo -e \"${Error} 请输入正确的节点用户名 !\" && exit 1\n  fi\n}\nModify_ServerStatus_server_name() {\n  List_ServerStatus_server\n  echo -e \"请输入要修改的节点用户名\"\n  read -erp \"(默认: 取消):\" manually_username\n  [[ -z \"${manually_username}\" ]] && echo -e \"已取消...\" && exit 1\n  Set_username_num=$(cat -n ${server_conf} | grep '\"username\": \"'\"${manually_username}\"'\"' | awk '{print $1}')\n  if [[ -n ${Set_username_num} ]]; then\n    Set_name\n    Set_name_num_a=$((Set_username_num + 2))\n    Set_name_num_a_text=$(sed -n \"${Set_name_num_a}p\" ${server_conf} | sed 's/\\\"//g;s/,$//g' | awk -F \": \" '{print $2}')\n    sed -i \"${Set_name_num_a}\"'s/\"name\": \"'\"${Set_name_num_a_text}\"'\"/\"name\": \"'\"${name_s}\"'\"/g' ${server_conf}\n    echo -e \"${Info} 修改成功 [ 原节点名称: ${Set_name_num_a_text}, 新节点名称: ${name_s} ]\"\n  else\n    echo -e \"${Error} 请输入正确的节点用户名 !\" && exit 1\n  fi\n}\nModify_ServerStatus_server_type() {\n  List_ServerStatus_server\n  echo -e \"请输入要修改的节点用户名\"\n  read -erp \"(默认: 取消):\" manually_username\n  [[ -z \"${manually_username}\" ]] && echo -e \"已取消...\" && exit 1\n  Set_username_num=$(cat -n ${server_conf} | grep '\"username\": \"'\"${manually_username}\"'\"' | awk '{print $1}')\n  if [[ -n ${Set_username_num} ]]; then\n    Set_type\n    Set_type_num_a=$((Set_username_num + 3))\n    Set_type_num_a_text=$(sed -n \"${Set_type_num_a}p\" ${server_conf} | sed 's/\\\"//g;s/,$//g' | awk -F \": \" '{print $2}')\n    sed -i \"${Set_type_num_a}\"'s/\"type\": \"'\"${Set_type_num_a_text}\"'\"/\"type\": \"'\"${type_s}\"'\"/g' ${server_conf}\n    echo -e \"${Info} 修改成功 [ 原节点虚拟化: ${Set_type_num_a_text}, 新节点虚拟化: ${type_s} ]\"\n  else\n    echo -e \"${Error} 请输入正确的节点用户名 !\" && exit 1\n  fi\n}\nModify_ServerStatus_server_location() {\n  List_ServerStatus_server\n  echo -e \"请输入要修改的节点用户名\"\n  read -erp \"(默认: 取消):\" manually_username\n  [[ -z \"${manually_username}\" ]] && echo -e \"已取消...\" && exit 1\n  Set_username_num=$(cat -n ${server_conf} | grep '\"username\": \"'\"${manually_username}\"'\"' | awk '{print $1}')\n  if [[ -n ${Set_username_num} ]]; then\n    Set_location\n    Set_location_num_a=$((Set_username_num + 5))\n    Set_location_num_a_text=$(sed -n \"${Set_location_num_a}p\" ${server_conf} | sed 's/\\\"//g;s/,$//g' | awk -F \": \" '{print $2}')\n    sed -i \"${Set_location_num_a}\"'s/\"location\": \"'\"${Set_location_num_a_text}\"'\"/\"location\": \"'\"${location_s}\"'\"/g' ${server_conf}\n    echo -e \"${Info} 修改成功 [ 原节点位置: ${Set_location_num_a_text}, 新节点位置: ${location_s} ]\"\n  else\n    echo -e \"${Error} 请输入正确的节点用户名 !\" && exit 1\n  fi\n}\nModify_ServerStatus_server_region() {\n  List_ServerStatus_server\n  echo -e \"请输入要修改的节点用户名\"\n  read -erp \"(默认: 取消):\" manually_username\n  [[ -z \"${manually_username}\" ]] && echo -e \"已取消...\" && exit 1\n  Set_username_num=$(cat -n ${server_conf} | grep '\"username\": \"'\"${manually_username}\"'\"' | awk '{print $1}')\n  if [[ -n ${Set_username_num} ]]; then\n    Set_region\n    Set_region_num_a=$((Set_username_num + 7))\n    Set_region_num_a_text=$(sed -n \"${Set_region_num_a}p\" ${server_conf} | sed 's/\\\"//g;s/,$//g' | awk -F \": \" '{print $2}')\n    sed -i \"${Set_region_num_a}\"'s/\"region\": \"'\"${Set_region_num_a_text}\"'\"/\"region\": \"'\"${region_s}\"'\"/g' ${server_conf}\n    echo -e \"${Info} 修改成功 [ 原节点地区: ${Set_region_num_a_text}, 新节点地区: ${region_s} ]\"\n  else\n    echo -e \"${Error} 请输入正确的节点用户名 !\" && exit 1\n  fi\n}\nModify_ServerStatus_server_all() {\n  List_ServerStatus_server\n  echo -e \"请输入要修改的节点用户名\"\n  read -erp \"(默认: 取消):\" manually_username\n  [[ -z \"${manually_username}\" ]] && echo -e \"已取消...\" && exit 1\n  Set_username_num=$(cat -n ${server_conf} | grep '\"username\": \"'\"${manually_username}\"'\"' | awk '{print $1}')\n  if [[ -n ${Set_username_num} ]]; then\n    Set_username\n    Set_password\n    Set_name\n    Set_type\n    Set_location\n    Set_region\n    sed -i \"${Set_username_num}\"'s/\"username\": \"'\"${manually_username}\"'\"/\"username\": \"'\"${username_s}\"'\"/g' ${server_conf}\n    Set_password_num_a=$((Set_username_num + 1))\n    Set_password_num_text=$(sed -n \"${Set_password_num_a}p\" ${server_conf} | sed 's/\\\"//g;s/,$//g' | awk -F \": \" '{print $2}')\n    sed -i \"${Set_password_num_a}\"'s/\"password\": \"'\"${Set_password_num_text}\"'\"/\"password\": \"'\"${password_s}\"'\"/g' ${server_conf}\n    Set_name_num_a=$((Set_username_num + 2))\n    Set_name_num_a_text=$(sed -n \"${Set_name_num_a}p\" ${server_conf} | sed 's/\\\"//g;s/,$//g' | awk -F \": \" '{print $2}')\n    sed -i \"${Set_name_num_a}\"'s/\"name\": \"'\"${Set_name_num_a_text}\"'\"/\"name\": \"'\"${name_s}\"'\"/g' ${server_conf}\n    Set_type_num_a=$((Set_username_num + 3))\n    Set_type_num_a_text=$(sed -n \"${Set_type_num_a}p\" ${server_conf} | sed 's/\\\"//g;s/,$//g' | awk -F \": \" '{print $2}')\n    sed -i \"${Set_type_num_a}\"'s/\"type\": \"'\"${Set_type_num_a_text}\"'\"/\"type\": \"'\"${type_s}\"'\"/g' ${server_conf}\n    Set_location_num_a=$((Set_username_num + 5))\n    Set_location_num_a_text=$(sed -n \"${Set_location_num_a}p\" ${server_conf} | sed 's/\\\"//g;s/,$//g' | awk -F \": \" '{print $2}')\n    sed -i \"${Set_location_num_a}\"'s/\"location\": \"'\"${Set_location_num_a_text}\"'\"/\"location\": \"'\"${location_s}\"'\"/g' ${server_conf}\n    Set_region_num_a=$((Set_username_num + 7))\n    Set_region_num_a_text=$(sed -n \"${Set_region_num_a}p\" ${server_conf} | sed 's/\\\"//g;s/,$//g' | awk -F \": \" '{print $2}')\n    sed -i \"${Set_region_num_a}\"'s/\"region\": \"'\"${Set_region_num_a_text}\"'\"/\"region\": \"'\"${region_s}\"'\"/g' ${server_conf}\n    echo -e \"${Info} 修改成功。\"\n  else\n    echo -e \"${Error} 请输入正确的节点用户名 !\" && exit 1\n  fi\n}\nModify_ServerStatus_server_disabled() {\n  List_ServerStatus_server\n  echo -e \"请输入要修改的节点用户名\"\n  read -erp \"(默认: 取消):\" manually_username\n  [[ -z \"${manually_username}\" ]] && echo -e \"已取消...\" && exit 1\n  Set_username_num=$(cat -n ${server_conf} | grep '\"username\": \"'\"${manually_username}\"'\"' | awk '{print $1}')\n  if [[ -n ${Set_username_num} ]]; then\n    Set_disabled_num_a=$((Set_username_num + 6))\n    Set_disabled_num_a_text=$(sed -n \"${Set_disabled_num_a}p\" ${server_conf} | sed 's/\\\"//g;s/,$//g' | awk -F \": \" '{print $2}')\n    if [[ ${Set_disabled_num_a_text} == \"false\" ]]; then\n      disabled_s=\"true\"\n    else\n      disabled_s=\"false\"\n    fi\n    sed -i \"${Set_disabled_num_a}\"'s/\"disabled\": '\"${Set_disabled_num_a_text}\"'/\"disabled\": '\"${disabled_s}\"'/g' ${server_conf}\n    echo -e \"${Info} 修改成功 [ 原禁用状态: ${Set_disabled_num_a_text}, 新禁用状态: ${disabled_s} ]\"\n  else\n    echo -e \"${Error} 请输入正确的节点用户名 !\" && exit 1\n  fi\n}\nSet_ServerStatus_client() {\n  check_installed_client_status\n  Set_config_client\n  Read_config_client\n  Modify_config_client\n  Restart_ServerStatus_client\n}\nInstall_vnStat() {\n  if [[ ${release} == \"archlinux\" ]]; then\n    pacman -Sy vnstat --noconfirm\n    systemctl enable vnstat\n    systemctl start vnstat\n    return 0\n  elif [[ ${release} == \"centos\" ]]; then\n    yum makecache\n    yum -y install sqlite sqlite-devel\n    yum -y groupinstall \"Development Tools\"\n  elif [[ ${release} == \"debian\" ]]; then\n    apt -y update\n    apt -y install sqlite3 libsqlite3-dev build-essential\n  fi\n  cd \"/tmp\" || return 1\n  wget --no-check-certificate https://humdi.net/vnstat/vnstat-latest.tar.gz\n  tar zxvf vnstat-latest.tar.gz\n  cd vnstat-*/ || return 1\n  ./configure --prefix=/usr --sysconfdir=/etc && make && make install\n  if ! vnstat -v >/dev/null 2>&1; then\n    echo \"编译安装vnStat失败，请手动安装vnStat\"\n    exit 1\n  fi\n  vnstatd -d\n  if [[ ${release} == \"centos\" ]]; then\n    if grep \"6\\..*\" /etc/redhat-release | grep -i \"centos\" | grep -v \"{^6}\\.6\" >/dev/null; then\n      [[ ! -e /etc/init.d/vnstat ]] && cp examples/init.d/redhat/vnstat /etc/init.d/\n      chkconfig vnstat on\n      service vnstat restart\n    fi\n  else\n    if grep -i \"debian\" /etc/issue | grep -q \"7\" || grep -i \"ubuntu\" /etc/issue | grep -q \"14\"; then\n      [[ ! -e /etc/init.d/vnstat ]] && cp examples/init.d/debian/vnstat /etc/init.d/\n      update-rc.d vnstat defaults\n      service vnstat restart\n    fi\n  fi\n  if [[ ! -e /etc/init.d/vnstat ]]; then\n    cp -v examples/systemd/simple/vnstat.service /etc/systemd/system/\n    systemctl enable vnstat\n    systemctl start vnstat\n  fi\n  rm -rf vnstat*\n  cd ~ || exit\n}\nModify_config_client_traffic() {\n  [ -z ${isVnstat} ] && [[ ${client_vnstat_s} == \"false\" ]] && return\n  if [[ ${isVnstat=\"y\"} == [Yy] ]]; then\n    vnstat -v >/dev/null 2>&1 || Install_vnStat\n    netName=$(awk '{i++; if( i>2 && ($2 != 0 && $10 != 0) ){print $1}}' /proc/net/dev | sed 's/^lo:$//g' | sed 's/^tun:$//g' | sed '/^$/d' | sed 's/^[\\t]*//g' | sed 's/[:]*$//g')\n    if [ -z \"$netName\" ]; then\n      echo -e \"获取网卡名称失败，请在Github反馈\"\n      exit 1\n    fi\n    if [[ $netName =~ [[:space:]] ]]; then\n      read -erp \"检测到多个网卡: ${netName}，请手动输入网卡名称\" netName\n    fi\n    read -erp \"请输入每月流量归零的日期(1~28)，默认为1(即每月1日): \" time_N\n    [[ -z \"$time_N\" ]] && time_N=\"1\"\n    while ! [[ $time_N =~ ^[0-9]*$ ]] || ((time_N < 1 || time_N > 28)); do\n      read -erp \"你输入的日期不合法，请重新输入: \" time_N\n    done\n    sed -i \"s/$(grep -w \"MonthRotate\" /etc/vnstat.conf)/MonthRotate $time_N/\" /etc/vnstat.conf\n    sed -i \"s/$(grep -w \"Interface\" /etc/vnstat.conf)/Interface \\\"$netName\\\"/\" /etc/vnstat.conf\n    chmod -R 777 /var/lib/vnstat/\n    systemctl restart vnstat\n    if ! grep -q \"NET_IN, NET_OUT = get_traffic_vnstat()\" ${client_file}/status-client.py; then\n      sed -i 's/\\t/    /g' ${client_file}/status-client.py\n      sed -i 's/NET_IN, NET_OUT = traffic.get_traffic()/NET_IN, NET_OUT = get_traffic_vnstat()/' ${client_file}/status-client.py\n    fi\n  elif grep -q \"NET_IN, NET_OUT = get_traffic_vnstat()\" ${client_file}/status-client.py; then\n    sed -i 's/\\t/    /g' ${client_file}/status-client.py\n    sed -i 's/NET_IN, NET_OUT = get_traffic_vnstat()/NET_IN, NET_OUT = traffic.get_traffic()/' ${client_file}/status-client.py\n  fi\n}\nModify_config_client() {\n  sed -i 's/SERVER = \"'\"${client_server}\"'\"/SERVER = \"'\"${server_s}\"'\"/g' \"${client_file}/status-client.py\"\n  sed -i \"s/PORT = ${client_port}/PORT = ${server_port_s}/g\" \"${client_file}/status-client.py\"\n  sed -i 's/USER = \"'\"${client_user}\"'\"/USER = \"'\"${username_s}\"'\"/g' \"${client_file}/status-client.py\"\n  sed -i 's/PASSWORD = \"'\"${client_password}\"'\"/PASSWORD = \"'\"${password_s}\"'\"/g' \"${client_file}/status-client.py\"\n  Modify_config_client_traffic\n}\nInstall_jq() {\n  [[ ${mirror_num} == 2 ]] && {\n    github_link=\"https://hub.fastgit.org\"\n    raw_link=\"https://raw.fastgit.org\"\n  } || {\n    github_link=\"https://github.com\"\n    raw_link=\"https://raw.githubusercontent.com\"\n  }\n  if [[ ! -e ${jq_file} ]]; then\n    if [[ ${bit} == \"x86_64\" ]]; then\n      jq_file=\"${file}/jq\"\n      wget --no-check-certificate \"${github_link}/stedolan/jq/releases/download/jq-1.5/jq-linux64\" -O ${jq_file}\n    elif [[ ${bit} == \"i386\" ]]; then\n      jq_file=\"${file}/jq\"\n      wget --no-check-certificate \"${github_link}/stedolan/jq/releases/download/jq-1.5/jq-linux32\" -O ${jq_file}\n    else\n      # ARM fallback to package manager\n      [[ ${release} == \"archlinux\" ]] && pacman -Sy jq --noconfirm\n      [[ ${release} == \"centos\" ]] && yum -y install jq\n      [[ ${release} == \"debian\" ]] && apt -y install jq\n      jq_file=\"/usr/bin/jq\"\n    fi\n    [[ ! -e ${jq_file} ]] && echo -e \"${Error} JQ解析器 下载失败，请检查 !\" && exit 1\n    chmod +x ${jq_file}\n    echo -e \"${Info} JQ解析器 安装完成，继续...\"\n  else\n    echo -e \"${Info} JQ解析器 已安装，继续...\"\n  fi\n  if [[ ! -e ${region_json} ]]; then\n    wget --no-check-certificate \"${raw_link}/michaelwittig/node-i18n-iso-countries/master/langs/zh.json\" -O ${region_json}\n    [[ ! -e ${region_json} ]] && echo -e \"${Error} ISO 3166-1 json文件下载失败，请检查！\" && exit 1\n  fi\n}\nInstall_caddy() {\n  echo\n  echo -e \"${Info} 是否由脚本自动配置HTTP服务(服务端的在线监控网站)，如果选择 N，则请在其他HTTP服务中配置网站根目录为：${Green_font_prefix}${web_file}${Font_color_suffix} [Y/n]\"\n  read -erp \"(默认: Y 自动部署):\" caddy_yn\n  [[ -z \"$caddy_yn\" ]] && caddy_yn=\"y\"\n  if [[ \"${caddy_yn}\" == [Yy] ]]; then\n    caddy_file=\"/etc/caddy/Caddyfile\" # Where is the default Caddyfile specified in Archlinux?\n    [[ ! -e /usr/bin/caddy ]] && {\n      # https://caddyserver.com/docs/install\n      if [[ ${release} == \"debian\" ]]; then\n        apt install -y debian-keyring debian-archive-keyring apt-transport-https curl\n        curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg\n        curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | tee /etc/apt/sources.list.d/caddy-stable.list\n        apt update && apt install caddy\n      elif [[ ${release} == \"centos\" ]]; then\n        yum install yum-plugin-copr -y\n        yum copr enable @caddy/caddy -y\n        yum install caddy -y\n      elif [[ ${release} == \"archlinux\" ]]; then\n        pacman -Sy caddy --noconfirm\n      fi\n      [[ ! -e \"/usr/bin/caddy\" ]] && echo -e \"${Error} Caddy安装失败，请手动部署，Web网页文件位置：${web_file}\" && exit 1\n      systemctl enable caddy\n      echo \"\" >${caddy_file}\n    }\n    Set_server \"server\"\n    Set_server_http_port\n    cat >>${caddy_file} <<-EOF\nhttp://${server_s}:${server_http_port_s} {\n  root * ${web_file}\n  encode gzip\n  file_server\n}\nEOF\n    systemctl restart caddy\n  else\n    echo -e \"${Info} 跳过 HTTP服务部署，请手动部署，Web网页文件位置：${web_file} ，如果位置改变，请注意修改服务脚本文件 /etc/init.d/status-server 中的 WEB_BIN 变量 !\"\n  fi\n}\nInstall_ServerStatus_server() {\n  Set_Mirror\n  [[ -e \"${server_file}/sergate\" ]] && echo -e \"${Error} 检测到 ServerStatus 服务端已安装 !\" && exit 1\n  Set_server_port\n  echo -e \"${Info} 开始安装/配置 依赖...\"\n  Installation_dependency \"server\"\n  Install_caddy\n  echo -e \"${Info} 开始下载/安装...\"\n  Download_Server_Status_server\n  Install_jq\n  echo -e \"${Info} 开始下载/安装 服务脚本(init)...\"\n  Service_Server_Status_server\n  echo -e \"${Info} 开始写入 配置文件...\"\n  Write_server_config\n  Write_server_config_conf\n  echo -e \"${Info} 所有步骤 安装完毕，开始启动...\"\n  Start_ServerStatus_server\n}\nInstall_ServerStatus_client() {\n  Set_Mirror\n  [[ -e \"${client_file}/status-client.py\" ]] && echo -e \"${Error} 检测到 ServerStatus 客户端已安装 !\" && exit 1\n  check_sys\n  echo -e \"${Info} 开始设置 用户配置...\"\n  Set_config_client\n  echo -e \"${Info} 开始安装/配置 依赖...\"\n  Installation_dependency \"client\"\n  echo -e \"${Info} 开始下载/安装...\"\n  Download_Server_Status_client\n  echo -e \"${Info} 开始下载/安装 服务脚本(init)...\"\n  Service_Server_Status_client\n  echo -e \"${Info} 开始写入 配置...\"\n  Read_config_client\n  Modify_config_client\n  echo -e \"${Info} 所有步骤 安装完毕，开始启动...\"\n  Start_ServerStatus_client\n}\nUpdate_ServerStatus_server() {\n  Set_Mirror\n  check_installed_server_status\n  check_pid_server\n  if [[ -n ${PID} ]]; then\n    if [[ ${release} == \"archlinux\" ]]; then\n      systemctl stop status-server\n    else\n      /etc/init.d/status-server stop\n    fi\n  fi\n  Download_Server_Status_server\n  rm -rf /etc/init.d/status-server\n  Service_Server_Status_server\n  Start_ServerStatus_server\n}\nUpdate_ServerStatus_client() {\n  Set_Mirror\n  check_installed_client_status\n  check_pid_client\n  if [[ -n ${PID} ]]; then\n    if [[ ${release} == \"archlinux\" ]]; then\n      systemctl stop status-client\n    else\n      /etc/init.d/status-client stop\n    fi\n  fi\n  if [[ ! -e \"${client_file}/status-client.py\" ]]; then\n    if [[ ! -e \"${file}/status-client.py\" ]]; then\n      echo -e \"${Error} ServerStatus 客户端文件不存在 !\" && exit 1\n    else\n      client_text=\"$(sed 's/\\\"//g;s/,//g;s/ //g' \"${file}/status-client.py\")\"\n      rm -rf \"${file}/status-client.py\"\n    fi\n  else\n    client_text=\"$(sed 's/\\\"//g;s/,//g;s/ //g' \"${client_file}/status-client.py\")\"\n  fi\n  server_s=\"$(echo -e \"${client_text}\" | grep \"SERVER=\" | awk -F \"=\" '{print $2}')\"\n  server_port_s=\"$(echo -e \"${client_text}\" | grep \"PORT=\" | awk -F \"=\" '{print $2}')\"\n  username_s=\"$(echo -e \"${client_text}\" | grep \"USER=\" | awk -F \"=\" '{print $2}')\"\n  password_s=\"$(echo -e \"${client_text}\" | grep \"PASSWORD=\" | awk -F \"=\" '{print $2}')\"\n  grep -q \"NET_IN, NET_OUT = get_traffic_vnstat()\" \"${client_file}/status-client.py\" && client_vnstat_s=\"true\" || client_vnstat_s=\"false\"\n  Download_Server_Status_client\n  Read_config_client\n  Modify_config_client\n  rm -rf /etc/init.d/status-client\n  Service_Server_Status_client\n  Start_ServerStatus_client\n}\nStart_ServerStatus_server() {\n  check_installed_server_status\n  check_pid_server\n  [[ -n ${PID} ]] && echo -e \"${Error} ServerStatus 正在运行，请检查 !\" && exit 1\n  if [[ ${release} == \"archlinux\" ]]; then\n    systemctl start status-server.service\n  else\n    /etc/init.d/status-server start\n  fi\n}\nStop_ServerStatus_server() {\n  check_installed_server_status\n  check_pid_server\n  [[ -z ${PID} ]] && echo -e \"${Error} ServerStatus 没有运行，请检查 !\" && exit 1\n  if [[ ${release} == \"archlinux\" ]]; then\n    systemctl stop status-server.service\n  else\n    /etc/init.d/status-server stop\n  fi\n}\nRestart_ServerStatus_server() {\n  check_installed_server_status\n  check_pid_server\n  if [[ -n ${PID} ]]; then\n    if [[ ${release} == \"archlinux\" ]]; then\n      systemctl stop status-server.service\n    else\n      /etc/init.d/status-server stop\n    fi\n  fi\n  if [[ ${release} == \"archlinux\" ]]; then\n    systemctl start status-server.service\n  else\n    /etc/init.d/status-server start\n  fi\n}\nUninstall_ServerStatus_server() {\n  check_installed_server_status\n  echo \"确定要卸载 ServerStatus 服务端(如果同时安装了客户端，则只会删除服务端) ? [y/N]\"\n  echo\n  read -erp \"(默认: n):\" unyn\n  [[ -z ${unyn} ]] && unyn=\"n\"\n  if [[ ${unyn} == [Yy] ]]; then\n    check_pid_server\n    [[ -n $PID ]] && kill -9 \"${PID}\"\n    Read_config_server\n    if [[ -e \"${client_file}/status-client.py\" ]]; then\n      rm -rf \"${server_file}\"\n      rm -rf \"${web_file}\"\n    else\n      rm -rf \"${file}\"\n    fi\n    rm -rf \"/etc/init.d/status-server\"\n    if [[ -e \"/usr/bin/caddy\" ]]; then\n      systemctl stop caddy\n      systemctl disable caddy\n      [[ ${release} == \"debian\" ]] && apt purge -y caddy\n      [[ ${release} == \"centos\" ]] && yum -y remove caddy\n      [[ ${release} == \"archlinux\" ]] && pacman -R caddy --noconfirm\n    fi\n    if [[ ${release} == \"centos\" ]]; then\n      chkconfig --del status-server\n    elif [[ ${release} == \"debian\" ]]; then\n      update-rc.d -f status-server remove\n    elif [[ ${release} == \"archlinux\" ]]; then\n      systemctl stop status-server\n      systemctl disable status-server\n      rm /usr/lib/systemd/system/status-server.service\n    fi\n    echo && echo \"ServerStatus 卸载完成 !\" && echo\n  else\n    echo && echo \"卸载已取消...\" && echo\n  fi\n}\nStart_ServerStatus_client() {\n  check_installed_client_status\n  check_pid_client\n  [[ -n ${PID} ]] && echo -e \"${Error} ServerStatus 正在运行，请检查 !\" && exit 1\n  if [[ ${release} == \"archlinux\" ]]; then\n    systemctl start status-client.service\n  else\n    /etc/init.d/status-client start\n  fi\n}\nStop_ServerStatus_client() {\n  check_installed_client_status\n  check_pid_client\n  [[ -z ${PID} ]] && echo -e \"${Error} ServerStatus 没有运行，请检查 !\" && exit 1\n  if [[ ${release} == \"archlinux\" ]]; then\n    systemctl stop status-client.service\n  else\n    /etc/init.d/status-client stop\n  fi\n}\nRestart_ServerStatus_client() {\n  check_installed_client_status\n  check_pid_client\n  if [[ -n ${PID} ]]; then\n    if [[ ${release} == \"archlinux\" ]]; then\n      systemctl restart status-client.service\n    else\n      /etc/init.d/status-client restart\n    fi\n  fi\n}\nUninstall_ServerStatus_client() {\n  check_installed_client_status\n  echo \"确定要卸载 ServerStatus 客户端(如果同时安装了服务端，则只会删除客户端) ? [y/N]\"\n  echo\n  read -erp \"(默认: n):\" unyn\n  [[ -z ${unyn} ]] && unyn=\"n\"\n  if [[ ${unyn} == [Yy] ]]; then\n    check_pid_client\n    [[ -n $PID ]] && kill -9 \"${PID}\"\n    Read_config_client\n    if [[ -e \"${server_file}/sergate\" ]]; then\n      rm -rf \"${client_file}\"\n    else\n      rm -rf \"${file}\"\n    fi\n    rm -rf /etc/init.d/status-client\n    if [[ ${release} == \"centos\" ]]; then\n      chkconfig --del status-client\n    elif [[ ${release} == \"debian\" ]]; then\n      update-rc.d -f status-client remove\n    elif [[ ${release} == \"archlinux\" ]]; then\n      systemctl stop status-client\n      systemctl disable status-client\n      rm /usr/lib/systemd/system/status-client.service\n    fi\n    echo && echo \"ServerStatus 卸载完成 !\" && echo\n  else\n    echo && echo \"卸载已取消...\" && echo\n  fi\n}\nView_ServerStatus_client() {\n  check_installed_client_status\n  Read_config_client\n  clear && echo \"————————————————————\" && echo\n  echo -e \"  ServerStatus 客户端配置信息：\n\n  IP \\t: ${Green_font_prefix}${client_server}${Font_color_suffix}\n  端口 \\t: ${Green_font_prefix}${client_port}${Font_color_suffix}\n  账号 \\t: ${Green_font_prefix}${client_user}${Font_color_suffix}\n  密码 \\t: ${Green_font_prefix}${client_password}${Font_color_suffix}\n  vnStat : ${Green_font_prefix}${client_vnstat}${Font_color_suffix}\n\n————————————————————\"\n}\nView_client_Log() {\n  [[ ! -e ${client_log_file} ]] && echo -e \"${Error} 没有找到日志文件 !\" && exit 1\n  echo && echo -e \"${Tip} 按 ${Red_font_prefix}Ctrl+C${Font_color_suffix} 终止查看日志\" && echo -e \"如果需要查看完整日志内容，请用 ${Red_font_prefix}cat ${client_log_file}${Font_color_suffix} 命令。\" && echo\n  tail -f ${client_log_file}\n}\nView_server_Log() {\n  [[ ! -e ${server_log_file} ]] && echo -e \"${Error} 没有找到日志文件 !\" && exit 1\n  echo && echo -e \"${Tip} 按 ${Red_font_prefix}Ctrl+C${Font_color_suffix} 终止查看日志\" && echo -e \"如果需要查看完整日志内容，请用 ${Red_font_prefix}cat ${server_log_file}${Font_color_suffix} 命令。\" && echo\n  tail -f ${server_log_file}\n}\nUpdate_Shell() {\n  Set_Mirror\n  sh_new_ver=$(wget --no-check-certificate -qO- -t1 -T3 \"${link_prefix}/status.sh\" | grep 'sh_ver=\"' | awk -F \"=\" '{print $NF}' | sed 's/\\\"//g' | head -1)\n  [[ -z ${sh_new_ver} ]] && echo -e \"${Error} 无法链接到 Github !\" && exit 0\n  if [[ -e \"/etc/init.d/status-client\" ]] || [[ -e \"/usr/lib/systemd/system/status-client.service\" ]]; then\n    rm -rf /etc/init.d/status-client\n    rm -rf /usr/lib/systemd/system/status-client.service\n    Service_Server_Status_client\n  fi\n  if [[ -e \"/etc/init.d/status-server\" ]] || [[ -e \"/usr/lib/systemd/system/status-server.service\" ]]; then\n    rm -rf /etc/init.d/status-server\n    rm -rf /usr/lib/systemd/system/status-server.service\n    Service_Server_Status_server\n  fi\n  wget -N --no-check-certificate \"${link_prefix}/status.sh\" && chmod +x status.sh\n  echo -e \"脚本已更新为最新版本[ ${sh_new_ver} ] !(注意：因为更新方式为直接覆盖当前运行的脚本，所以可能下面会提示一些报错，无视即可)\" && exit 0\n}\nmenu_client() {\n  echo && echo -e \"  ServerStatus 一键安装管理脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n  -- Toyo | doub.io/shell-jc3 --\n  --    Modified by APTX    --\n ${Green_font_prefix} 0.${Font_color_suffix} 升级脚本\n ————————————\n ${Green_font_prefix} 1.${Font_color_suffix} 安装 客户端\n ${Green_font_prefix} 2.${Font_color_suffix} 更新 客户端\n ${Green_font_prefix} 3.${Font_color_suffix} 卸载 客户端\n————————————\n ${Green_font_prefix} 4.${Font_color_suffix} 启动 客户端\n ${Green_font_prefix} 5.${Font_color_suffix} 停止 客户端\n ${Green_font_prefix} 6.${Font_color_suffix} 重启 客户端\n————————————\n ${Green_font_prefix} 7.${Font_color_suffix} 设置 客户端配置\n ${Green_font_prefix} 8.${Font_color_suffix} 查看 客户端信息\n ${Green_font_prefix} 9.${Font_color_suffix} 查看 客户端日志\n————————————\n ${Green_font_prefix}10.${Font_color_suffix} 切换为 服务端菜单\" && echo\n  if [[ -e \"${client_file}/status-client.py\" ]]; then\n    check_pid_client\n    if [[ -n \"${PID}\" ]]; then\n      echo -e \" 当前状态: 客户端 ${Green_font_prefix}已安装${Font_color_suffix} 并 ${Green_font_prefix}已启动${Font_color_suffix}\"\n    else\n      echo -e \" 当前状态: 客户端 ${Green_font_prefix}已安装${Font_color_suffix} 但 ${Red_font_prefix}未启动${Font_color_suffix}\"\n    fi\n  else\n    if [[ -e \"${file}/status-client.py\" ]]; then\n      check_pid_client\n      if [[ -n \"${PID}\" ]]; then\n        echo -e \" 当前状态: 客户端 ${Green_font_prefix}已安装${Font_color_suffix} 并 ${Green_font_prefix}已启动${Font_color_suffix}\"\n      else\n        echo -e \" 当前状态: 客户端 ${Green_font_prefix}已安装${Font_color_suffix} 但 ${Red_font_prefix}未启动${Font_color_suffix}\"\n      fi\n    else\n      echo -e \" 当前状态: 客户端 ${Red_font_prefix}未安装${Font_color_suffix}\"\n    fi\n  fi\n  echo\n  read -erp \" 请输入数字 [0-10]:\" num\n  case \"$num\" in\n  0)\n    Update_Shell\n    ;;\n  1)\n    Install_ServerStatus_client\n    ;;\n  2)\n    Update_ServerStatus_client\n    ;;\n  3)\n    Uninstall_ServerStatus_client\n    ;;\n  4)\n    Start_ServerStatus_client\n    ;;\n  5)\n    Stop_ServerStatus_client\n    ;;\n  6)\n    Restart_ServerStatus_client\n    ;;\n  7)\n    Set_ServerStatus_client\n    ;;\n  8)\n    View_ServerStatus_client\n    ;;\n  9)\n    View_client_Log\n    ;;\n  10)\n    menu_server\n    ;;\n  *)\n    echo \"请输入正确数字 [0-10]\"\n    ;;\n  esac\n}\nmenu_server() {\n  echo && echo -e \"  ServerStatus 一键安装管理脚本 ${Red_font_prefix}[v${sh_ver}]${Font_color_suffix}\n  -- Toyo | doub.io/shell-jc3 --\n  --    Modified by APTX    --\n ${Green_font_prefix} 0.${Font_color_suffix} 升级脚本\n ————————————\n ${Green_font_prefix} 1.${Font_color_suffix} 安装 服务端\n ${Green_font_prefix} 2.${Font_color_suffix} 更新 服务端\n ${Green_font_prefix} 3.${Font_color_suffix} 卸载 服务端\n————————————\n ${Green_font_prefix} 4.${Font_color_suffix} 启动 服务端\n ${Green_font_prefix} 5.${Font_color_suffix} 停止 服务端\n ${Green_font_prefix} 6.${Font_color_suffix} 重启 服务端\n————————————\n ${Green_font_prefix} 7.${Font_color_suffix} 设置 服务端配置\n ${Green_font_prefix} 8.${Font_color_suffix} 查看 服务端信息\n ${Green_font_prefix} 9.${Font_color_suffix} 查看 服务端日志\n————————————\n ${Green_font_prefix}10.${Font_color_suffix} 切换为 客户端菜单\" && echo\n  if [[ -e \"${server_file}/sergate\" ]]; then\n    check_pid_server\n    if [[ -n \"${PID}\" ]]; then\n      echo -e \" 当前状态: 服务端 ${Green_font_prefix}已安装${Font_color_suffix} 并 ${Green_font_prefix}已启动${Font_color_suffix}\"\n    else\n      echo -e \" 当前状态: 服务端 ${Green_font_prefix}已安装${Font_color_suffix} 但 ${Red_font_prefix}未启动${Font_color_suffix}\"\n    fi\n  else\n    echo -e \" 当前状态: 服务端 ${Red_font_prefix}未安装${Font_color_suffix}\"\n  fi\n  echo\n  read -erp \" 请输入数字 [0-10]:\" num\n  case \"$num\" in\n  0)\n    Update_Shell\n    ;;\n  1)\n    Install_ServerStatus_server\n    ;;\n  2)\n    Update_ServerStatus_server\n    ;;\n  3)\n    Uninstall_ServerStatus_server\n    ;;\n  4)\n    Start_ServerStatus_server\n    ;;\n  5)\n    Stop_ServerStatus_server\n    ;;\n  6)\n    Restart_ServerStatus_server\n    ;;\n  7)\n    Set_ServerStatus_server\n    ;;\n  8)\n    List_ServerStatus_server\n    ;;\n  9)\n    View_server_Log\n    ;;\n  10)\n    menu_client\n    ;;\n  *)\n    echo \"请输入正确数字 [0-10]\"\n    ;;\n  esac\n}\nSet_Mirror() {\n  echo -e \"${Info} 请输入要选择的下载源，默认使用GitHub，中国大陆建议选择Coding.net，但是不建议将服务端部署在中国大陆主机上\n  ${Green_font_prefix} 1.${Font_color_suffix} GitHub\n  ${Green_font_prefix} 2.${Font_color_suffix} Coding.net (部分资源通过 FastGit 提供服务下载, Thanks to FastGit.org for the service)\"\n  read -erp \"请输入数字 [1-2], 默认为 1:\" mirror_num\n  [[ -z \"${mirror_num}\" ]] && mirror_num=1\n  [[ ${mirror_num} == 2 ]] && link_prefix=${coding_prefix} || link_prefix=${github_prefix}\n}\ncheck_sys\naction=$1\nif [[ -n $action ]]; then\n  if [[ $action == \"s\" ]]; then\n    menu_server\n  elif [[ $action == \"c\" ]]; then\n    menu_client\n  fi\nelse\n  menu_client\nfi\n"
        }
      ]
    }
  ]
}