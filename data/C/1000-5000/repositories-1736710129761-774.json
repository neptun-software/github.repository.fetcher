{
  "metadata": {
    "timestamp": 1736710129761,
    "page": 774,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Stephane-D/SGDK",
      "stars": 1807,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.21484375,
          "content": "# Ignore non-build related directories\n/doc/\n/sample/\n/vstudio/\n/.*/\n\n#prebuilds\n/lib/\n/out/\n/bin/\n# Ignore non-build related files\n.*\n.DS_Store\n/*.bat\n/changelog.txt\n/COPYING.RUNTIME\n/Dockerfile\n/license.txt\n/readme.md\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.169921875,
          "content": "# https://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n# Unix-style newlines with a newline ending every file\n[*]\nend_of_line = lf\ninsert_final_newline = true\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.01171875,
          "content": "*.sh\teol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.490234375,
          "content": "*.VC.*\n*.log\n*.obj\n*.tlog\n*.suo\n*.iobj\n*.ipdb\n*.pdb\n*.o\n*.out\n*.pal\n*.depend\n*.layout\n*.xml\n*.lst\n*.class\n*.ini\n*.rs\n*.d\n/.idea\n*.iml\n.vscode\n**/.DS_Store\n**/.settings/**\n**/out/**\n!**/out/rom.bin\nsymbol.txt\nrom_head.bin\n**/Debug\n**/Release\n**/res/*.h\nres/libres.s\n!res/libres.h\narchive\ncb\nnot needed\nsample/sound/loss\ntools/archives\ntools/extras\ntools/old\ntools/genesis_tools.workspace\ntools/emu\ntools/lz4w/test\ntools/lz4w/lz4w.jar\ntools/rescomp/format\ntools/rescomp/rescomp.jar\ntools/xgm rom builder\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 3.240234375,
          "content": "cmake_minimum_required(VERSION 3.22)\n\n# Set the compiler prefix\nif(DEFINED ENV{PREFIX})\n  set(PREFIX \"$ENV{PREFIX}\")\nendif()\n\n# Set the compiler/assembler name\nset(CMAKE_C_COMPILER ${PREFIX}gcc)\nset(CMAKE_ASM_COMPILER ${PREFIX}gcc)\nset(CMAKE_AR ${PREFIX}ar)\nset(CMAKE_TRY_COMPILE_TARGET_TYPE \"STATIC_LIBRARY\")\n\nproject(md C ASM)\n\ninclude(ExternalProject)\nExternalProject_Add(\n  BINTOS\n  SOURCE_DIR ${PROJECT_SOURCE_DIR}/tools/bintos/src\n  BINARY_DIR ${PROJECT_SOURCE_DIR}/tools/bintos/src/build\n  INSTALL_COMMAND install bintos ${PROJECT_SOURCE_DIR}/bin\n  BUILD_ALWAYS TRUE)\nExternalProject_Add(\n  XGMTOOL\n  SOURCE_DIR ${PROJECT_SOURCE_DIR}/tools/xgmtool/src\n  BINARY_DIR ${PROJECT_SOURCE_DIR}/tools/xgmtool/src/build\n  INSTALL_COMMAND install xgmtool ${PROJECT_SOURCE_DIR}/bin\n  BUILD_ALWAYS TRUE)\nExternalProject_Add(\n  SJASM\n  CONFIGURE_COMMAND \"\"\n  DOWNLOAD_COMMAND \"\"\n  BUILD_COMMAND make -C ${PROJECT_SOURCE_DIR}/tools/sjasm/src\n  INSTALL_COMMAND install ${PROJECT_SOURCE_DIR}/tools/sjasm/src/sjasm ${PROJECT_SOURCE_DIR}/bin\n  BUILD_ALWAYS TRUE)\n\ninclude_directories(${PROJECT_SOURCE_DIR}/inc)\ninclude_directories(${PROJECT_SOURCE_DIR}/res)\ninclude_directories(${PROJECT_SOURCE_DIR}/src)\n\nset(RESCOMP java -jar ${PROJECT_SOURCE_DIR}/bin/rescomp.jar)\nset(ASMZ80 ${PROJECT_SOURCE_DIR}/bin/sjasm -q)\nset(BINTOS_EXE ${PROJECT_SOURCE_DIR}/bin/bintos)\n\nadd_compile_options(\n  -DSGDK_GCC\n  -m68000\n  -Wall\n  -Wextra\n  -Wno-main\n  -Wno-shift-negative-value\n  -Wno-unused-parameter\n  -fno-builtin\n  -nostdlib\n  -nodefaultlibs)\n\nadd_compile_options(\n  \"$<$<CONFIG:Release,>:-fuse-linker-plugin;-fno-web;-fno-gcse;-fomit-frame-pointer;-ffat-lto-objects;-flto>\"\n  \"$<$<CONFIG:Debug>:-O0;-DDEBUG=1>\"\n  \"$<$<COMPILE_LANGUAGE:ASM>:-xassembler-with-cpp;-Wa,-I${PROJECT_SOURCE_DIR};-Wa,--register-prefix-optional,--bitwise-or>\"\n)\n\n# If CMAKE_BUILD_TYPE is not set\nadd_compile_options(\"$<$<CONFIG:>:-O3>\")\n\n# Gather sources\nfile(GLOB_RECURSE SRC_LIB_C src/*.c)\nstring(REPLACE \"src/boot/rom_head.c\" \"\" SRC_LIB_C \"${SRC_LIB_C}\")\nfile(GLOB_RECURSE SRC_LIB_S src/*.s)\nstring(REPLACE \"src/boot/sega.s\" \"\" SRC_LIB_S \"${SRC_LIB_S}\")\nfile(GLOB_RECURSE SRC_LIB_S80 src/*.s80)\nstring(REGEX REPLACE \"[.]s80\" \".s;\" Z80SRC ${SRC_LIB_S80})\nfile(GLOB_RECURSE RES_LIB_RES res/*.res)\nstring(REGEX REPLACE \"[.]res\" \".s;\" RESSRC ${RES_LIB_RES})\n\n# Rules to build Z80 source code\nforeach(z80_source ${Z80SRC})\n  get_filename_component(file ${z80_source} NAME_WE)\n  get_filename_component(dir ${z80_source} DIRECTORY)\n  set(file ${dir}/${file})\n  add_custom_command(\n    OUTPUT ${z80_source}\n    COMMAND ${ASMZ80} -i${PROJECT_SOURCE_DIR}/inc/snd ${file}.s80 ${file}.out &&\n            ${BINTOS_EXE} ${file}.out ${file}.s\n    DEPENDS ${file}.s80 BINTOS SJASM\n    BYPRODUCTS ${file}.out ${file}.h)\nendforeach()\n\n# Rules to build resources\nforeach(res_source ${RESSRC})\n  string(REGEX REPLACE \"[.]s\" \".h\" res_header ${res_source})\n  string(REGEX REPLACE \"[.]s\" \".res\" res ${res_source})\n  add_custom_command(\n    OUTPUT ${res_source} ${res_header}\n    COMMAND ${RESCOMP} ${res}\n    DEPENDS ${res} XGMTOOL)\nendforeach()\n\nadd_library(md STATIC ${SRC_LIB_C} ${SRC_LIB_S} ${Z80SRC} ${RESSRC})\nset_target_properties(\n  md\n  PROPERTIES ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/lib\n             OUTPUT_NAME \"md\"\n             DEBUG_OUTPUT_NAME \"md_debug\")\n"
        },
        {
          "name": "COPYING.RUNTIME",
          "type": "blob",
          "size": 3.24609375,
          "content": "GCC RUNTIME LIBRARY EXCEPTION\n\nVersion 3.1, 31 March 2009\n\nCopyright (C) 2009 Free Software Foundation, Inc. <http://fsf.org/>\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nThis GCC Runtime Library Exception (\"Exception\") is an additional\npermission under section 7 of the GNU General Public License, version\n3 (\"GPLv3\"). It applies to a given file (the \"Runtime Library\") that\nbears a notice placed by the copyright holder of the file stating that\nthe file is governed by GPLv3 along with this Exception.\n\nWhen you use GCC to compile a program, GCC may combine portions of\ncertain GCC header files and runtime libraries with the compiled\nprogram. The purpose of this Exception is to allow compilation of\nnon-GPL (including proprietary) programs to use, in this way, the\nheader files and runtime libraries covered by this Exception.\n\n0. Definitions.\n\nA file is an \"Independent Module\" if it either requires the Runtime\nLibrary for execution after a Compilation Process, or makes use of an\ninterface provided by the Runtime Library, but is not otherwise based\non the Runtime Library.\n\n\"GCC\" means a version of the GNU Compiler Collection, with or without\nmodifications, governed by version 3 (or a specified later version) of\nthe GNU General Public License (GPL) with the option of using any\nsubsequent versions published by the FSF.\n\n\"GPL-compatible Software\" is software whose conditions of propagation,\nmodification and use would permit combination with GCC in accord with\nthe license of GCC.\n\n\"Target Code\" refers to output from any compiler for a real or virtual\ntarget processor architecture, in executable form or suitable for\ninput to an assembler, loader, linker and/or execution\nphase. Notwithstanding that, Target Code does not include data in any\nformat that is used as a compiler intermediate representation, or used\nfor producing a compiler intermediate representation.\n\nThe \"Compilation Process\" transforms code entirely represented in\nnon-intermediate languages designed for human-written code, and/or in\nJava Virtual Machine byte code, into Target Code. Thus, for example,\nuse of source code generators and preprocessors need not be considered\npart of the Compilation Process, since the Compilation Process can be\nunderstood as starting with the output of the generators or\npreprocessors.\n\nA Compilation Process is \"Eligible\" if it is done using GCC, alone or\nwith other GPL-compatible software, or if it is done without using any\nwork based on GCC. For example, using non-GPL-compatible Software to\noptimize any GCC intermediate representations would not qualify as an\nEligible Compilation Process.\n\n1. Grant of Additional Permission.\n\nYou have permission to propagate a work of Target Code formed by\ncombining the Runtime Library with Independent Modules, even if such\npropagation would otherwise violate the terms of GPLv3, provided that\nall Target Code was generated by Eligible Compilation Processes. You\nmay then convey such a combination under terms of your choice,\nconsistent with the licensing of the Independent Modules.\n\n2. No Weakening of GCC Copyleft.\n\nThe availability of this Exception does not imply any general\npresumption that third-party software is unaffected by the copyleft\nrequirements of the license of GCC.\n\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 3.4619140625,
          "content": "ARG ALPINE_VERSION=3.18.3\nARG JDK_VER=11\n\nARG BASE_IMAGE=ghcr.io/stephane-d/sgdk-m68k-gcc\nARG BASE_IMAGE_VERSION=latest\n\n\n# Stage Zero - Base images for m68k compiler and JRE\nFROM $BASE_IMAGE:$BASE_IMAGE_VERSION as m68k-files\n\nFROM alpine:$ALPINE_VERSION as jre-minimal\nARG JDK_VER\nRUN apk add --no-cache openjdk${JDK_VER}\nENV JRE_MODULES=\"java.base,java.desktop,java.xml\"\nRUN jlink \\\n    --module-path \"$JAVA_HOME/jmods\" \\\n    --add-modules $JRE_MODULES \\\n    --verbose \\\n    --strip-debug \\\n    --compress 2 \\\n    --no-header-files \\\n    --no-man-pages \\\n    --output /opt/jre-minimal\n\n\n# Stage One - build all tools and libs for SGDK\nFROM jre-minimal as build\nRUN apk add --no-cache build-base git cmake ninja\n\n# Set-up environment and folders\nENV SGDK_PATH=/sgdk\nRUN mkdir -p $SGDK_PATH/bin\n\n# Get SGDK sources\nCOPY . $SGDK_PATH\n\n# Building apj.jar\nWORKDIR $SGDK_PATH/tools/apj/src\nRUN javac sgdk/aplib/*.java\nRUN jar cfe $SGDK_PATH/bin/apj.jar sgdk.aplib.Launcher sgdk/aplib/*.class\n\n# Building lz4w.jar\nWORKDIR $SGDK_PATH/tools/lz4w/src\nRUN javac sgdk/lz4w/*.java\nRUN jar cfe $SGDK_PATH/bin/lz4w.jar sgdk.lz4w.Launcher sgdk/lz4w/*.class\n\n# Building sizebnd.jar\nWORKDIR $SGDK_PATH/tools/sizebnd/src\nRUN javac sgdk/sizebnd/*.java\nRUN jar cfe $SGDK_PATH/bin/sizebnd.jar sgdk.sizebnd.Launcher sgdk/sizebnd/*.class\n\n# Building rescomp.jar\nWORKDIR $SGDK_PATH/tools/rescomp/src\nENV CLASSPATH=\"$SGDK_PATH/bin/apj.jar:$SGDK_PATH/bin/lz4w.jar:$SGDK_PATH/tools/rescomp/src\"\nRUN cp -r $SGDK_PATH/tools/commons/src/sgdk .\nRUN find . -name \"*.java\" | xargs javac\nRUN echo -e \"Main-Class: sgdk.rescomp.Launcher\\nClass-Path: apj.jar lz4w.jar\" > Manifest.txt\nRUN jar cfm $SGDK_PATH/bin/rescomp.jar Manifest.txt  .\n\n# Building xgm2tool.jar\nWORKDIR $SGDK_PATH/tools/xgm2tool/src\nENV CLASSPATH=\"$SGDK_PATH/bin/apj.jar:$SGDK_PATH/bin/lz4w.jar:$SGDK_PATH/tools/xgm2tool/src\"\nRUN cp -r $SGDK_PATH/tools/commons/src/sgdk .\nRUN find . -name \"*.java\" | xargs javac\nRUN echo -e \"Main-Class: sgdk.xgm2tool.Launcher\\nClass-Path: apj.jar lz4w.jar\" > Manifest.txt\nRUN jar cfm $SGDK_PATH/bin/xgm2tool.jar Manifest.txt  .\n\n# Building convsym\nWORKDIR $SGDK_PATH/tools/convsym\nRUN make\nRUN cp build/convsym $SGDK_PATH/bin/convsym\n\n# Copy m68k compiler from base image\nCOPY --from=m68k-files /m68k/ /usr/\nENV PATH=\"$SGDK_PATH/bin:${PATH}\"\n\n# 32-bit not supported on Alpine, this may have side-effects\nRUN sed -i /-m32/d $SGDK_PATH/tools/xgmtool/src/CMakeLists.txt\nENV PREFIX=m68k-elf-\nRUN cmake -G Ninja -S $SGDK_PATH -B $SGDK_PATH/build_release -DCMAKE_BUILD_TYPE=Release && cmake --build $SGDK_PATH/build_release\nRUN cmake -G Ninja -S $SGDK_PATH -B $SGDK_PATH/build_debug -DCMAKE_BUILD_TYPE=Debug && cmake --build $SGDK_PATH/build_debug\n\nRUN rm -rf $SGDK_PATH/tools\nRUN rm -rf $SGDK_PATH/build_release\nRUN rm -rf $SGDK_PATH/build_debug\n\n# Stage Two - copy tools into a clean image\nFROM alpine:$ALPINE_VERSION\nRUN apk add --no-cache build-base\n\n# Copy m68k compiler from base image\nCOPY --from=m68k-files /m68k/ /usr/\n\n# Copy JRE from base image\nCOPY --from=jre-minimal /opt/jre-minimal /opt/jre-minimal\nENV JAVA_HOME=/opt/jre-minimal\nENV PATH=\"$PATH:$JAVA_HOME/bin\"\n\n# Set-up SGDK\nENV SGDK_PATH=/sgdk\n\n# Create sgdk unprivileged user\nRUN addgroup -S sgdk && adduser -S sgdk -G sgdk -h $SGDK_PATH\n\n# Copy SGDK tools and libraries\nCOPY --from=build --chown=sgdk:sgdk $SGDK_PATH $SGDK_PATH\n\n# Set-up mount point, user, and make command\nVOLUME /src\nWORKDIR /src\nUSER sgdk\nENV PATH=\"$SGDK_PATH/bin:${PATH}\"\nENTRYPOINT [\"/bin/sh\",\"-c\",\"make -f $SGDK_PATH/makefile.gen $@\", \"--\"]\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "build_adv.bat",
          "type": "blob",
          "size": 3.25390625,
          "content": "@echo OFF\n\n\techo.                         \n\techo \" _____ _____ ____  _____ \"\n\techo \"|   __|   __|    \\|  |  |\"\n\techo \"|__   |  |  |  |  |    -|\"\n\techo \"|_____|_____|____/|__|__|\"\n\techo.\n\techo.                        \n\techo \"This batch script helps to build SGDK if PATH environmental variables \"\n\techo \"    are not setup for GDK already.                                    \"\n\techo.\n\techo \"(1) When run the GDK and GDK_WIN EnvVars will be configured           \"\n\techo \"    temporarily for the local directory.                              \"\n\techo \"(2) The User will be asked whether to temporarily empty PATH. If yes, \"\n\techo \"    PATH will be cleared for the the local script's execution only.   \"\n\techo \"(3) SGDK clean script will be launched and then SGDK will be rebuild. \"\n\n:START\n    echo.\n    echo.\n    echo.\n    echo 1) Starting:\n    echo ------------\n    set \"str_ScriptName=%~f0\"\n    echo Now running %str_ScriptName%\n    echo.\n \n    setlocal\n\n:CREATEENVVARS\n    echo.\n    echo 2) Creating EnvVars:\n    echo --------------------\n    set \"str_MyCurrentDir=%~dp0\"\n\n    set \"GDK=%str_MyCurrentDir%\"\n    set \"GDK_WIN=%str_MyCurrentDir%\"\n    set \"GDK=%GDK:\\=/%\"\n\n    if %GDK:~-1%==/ set \"GDK=%GDK:~0,-1%\"\n    if %GDK_WIN:~-1%==\\ set \"GDK_WIN=%GDK_WIN:~0,-1%\"\n\n    echo GDK is %GDK%\n    echo GDK_WIN is %GDK_WIN%\n\n:CHECKINGPATH\n    echo.\n    echo 3) Checking PATH:\n    echo --------------------\n\n    set \"PATHREAL=%PATH%\"\n    echo PATH = %PATH%\n    echo.\n\n:PATHCLEARQUESTION \n    echo Conflicting GCC setups in PATH can cause issues. \n    set /p \"EMPTYPATH=Should PATH be temporarily cleared? (Y/[N])?\"\n    if /i \"%EMPTYPATH:~,1%\" EQU \"Y\" goto YCLEARPATH\n    if /i \"%EMPTYPATH:~,1%\" EQU \"N\" goto NCLEARPATH\n    echo Please type Y for Yes or N for No\n    goto PATHCLEARQUESTION\n\n:YCLEARPATH\n    echo Setting PATH to just GDK stuff so that other CC1's do not conflict.\n\n    REM Assuming that the current directory exists since that is where this file is.\n    set \"PATH=%GDK_WIN%\"\n    if EXIST %GDK_WIN%\\bin set \"PATH=%PATH%;%GDK_WIN%\\bin\"\n    echo PATH = %PATH%\n    goto CONTINUEAFTERCLEARQUESTION\n\n:NCLEARPATH\n    set \"TPATH=%GDK_WIN%\"\n    if EXIST %GDK_WIN%\\bin set \"TPATH=%TPATH%;%GDK_WIN%\\bin\"\n    set \"PATH=%TPATH%;%PATH%\"\n    goto CONTINUEAFTERCLEARQUESTION\n\n\n:CONTINUEAFTERCLEARQUESTION\n    echo %GDK_WIN%\\bin added to PATH\n    echo.\n    echo PATH = %PATH%\n\n:LAUNCHING\n    echo.\n    echo 4) Launching:\n    echo ------------------\n\n    %GDK_WIN%\\bin\\make -f %GDK_WIN%\\makelib.gen clean\n    %GDK_WIN%\\bin\\make -f %GDK_WIN%\\makelib.gen\n\n:MAKECARTBAT\n\techo.\n\techo 5) Creating a make_cart.bat file for this machine.\n\techo -------------------------------------------------\n\t\n\techo.\n\techo Batch for your machine:\n\techo =======================\n\techo set GDK=%GDK%\n    echo GDK_WIN=%GDK_WIN%\n    echo PATH=%PATH%\n    echo %GDK_WIN%\\bin\\make -f %GDK_WIN%\\makefile.gen\n    echo.\n    echo ============================================\n   \n\techo set GDK=%GDK%> make_cart.bat\n\techo set GDK_WIN=%GDK_WIN%>> make_cart.bat\n\techo set PATH=%PATH%>> make_cart.bat\n\techo %GDK_WIN%\\bin\\make -f %GDK_WIN%\\makefile.gen>> make_cart.bat\n\t\n      \n:CLEANUP\n\techo.\n\techo 6) Done. Cleaning up.\n\techo ---------------------\n\t    \n    echo.\n    echo Reseting PATH.\n    set \"PATH=%PATHREAL%\"\n    echo PATH = %PATH%\n\n:END\n    endlocal\n    @echo ON\n    exit /b\n"
        },
        {
          "name": "build_lib.bat",
          "type": "blob",
          "size": 0.345703125,
          "content": "SET \"GDK=%cd:\\=/%\"\nSET \"GDK_WIN=%cd%\"\nSET PATH=%GDK_WIN%\\bin;%PATH%\n\nmake -f %GDK_WIN%\\makelib.gen cleanrelease\nmake -f %GDK_WIN%\\makelib.gen release\nmake -f %GDK_WIN%\\makelib.gen cleandebug\nmake -f %GDK_WIN%\\makelib.gen debug\n\n@ECHO.\n@ECHO.\n@ECHO -------------------------------------------\n@ECHO SGDK is now ready! Press any key to exit...\n@PAUSE >nul\n"
        },
        {
          "name": "changelog.txt",
          "type": "blob",
          "size": 63.6650390625,
          "content": "SGDK 2.00 (January 2024)\r\n------------------------\r\n\r\nCOMPILER\r\n* added new xgm2tool\r\n* RESCOMP\r\n - added new XGM2 resource type\r\n - MAP: fixed TMX high priority layer definition from \"<layer name> high\" (thanks cidoku)\r\n - TILESET: fixed a small bug with empty tileset\r\n - SPRITE: small improvement in sprite cutting processing\r\n - changed sound drivers name\r\n - improved clarity of console output (thanks danielt3)\r\n* MAKEFILE\r\n - improved support for newer Linux based GCC (thanks Craig Hackney)\r\n - support for deeper file structure\r\n* README\r\n - added alternates sound drivers references\r\n\r\nLIBRARY\r\n* SPRITE\r\n - sprites are now initialized with an intermediate depth level (leave more freedom for afterward depth adjustment)\r\n - added SPR_setAnimationLoop(..) method to enable/disable animation loop\r\n - added SPR_setAlwaysAtBottom(..) method because why not ^^\r\n* OBJECT\r\n - optimized object release operation when maintaining coherency\r\n* MATH\r\n - refactoring / improvements on fix16 / fix32 operations\r\n - added fastfix16 (ff16) and fastfix32 (ff32) types\r\n* MEM\r\n - fixed MEM_allocAt(..) function\r\n* VDP\r\n - fixed VDP VSRAM read / write / DMA command\r\n - text clear operation is now done by using the 'space' char instead of tile #0\r\n - added VDP_setVInterrupt(bool) method to enable/disable V-Interrupt\r\n - small fix on RGB24_TO_VDPCOLOR(..) macro (thanks Werton)\r\n* PAL\r\n - PAL_getColor(..) / PAL_getPalette(..) / PAL_getColors(..) return forced RGB333 value (undefined bits are set to 0)\r\n* SYS\r\n - removed z80 halt on reset (already done in sega.s boot)\r\n* SOUND\r\n - major refactor in sound drivers structure\r\n - added new XGM2 sound driver - beta (XGM2_xxx methods)\r\n - added 'minimusic' sound driver from Sik\r\n - removed fractal driver support (driver is discontinued) and enable conso…\r\n* TYPE\r\n - fixed bool declaration to be compliant with C23\r\n - added size_t and ptrdiff_t definitions\r\n* 'console' module is now enabled by default\r\n* added new SGDK logo from Adrian Spoz (thanks for making it !)\r\n* smalls fixes, general cleanup, some refactoring..\r\n\r\nSAMPLE\r\n* moved 'sonic' and 'platformer' samples into 'sample/game' folder\r\n* moved 'sound' sample into 'sample/snd/sound-test' and moved 'xgm-player' into 'sample/snd'\r\n* moved 'console' and 'multitasking' samples into 'sample/sys' folder\r\n* renamed 'bench' sample to 'benchmark'\r\n* updated samples to last SGDK\r\n\r\nSGDK 2.00 MIGRATION NOTE\r\n\r\n* SND_xxx_<DRV> methods --> SND_<DRV>_xxx\r\n* SND_xxx_XGM methods removed (use XGM_xxx methods instead)\r\n* Z80_DRIVER_2ADPCM --> Z80_DRIVER_DPCM2\r\n* Z80_DRIVER_4PCM  --> Z80_DRIVER_PCM4\r\n \r\n \r\nSGDK 1.90 (July 2023)\r\n---------------------\r\n\r\nCOMPILER\r\n* RESCOMP\r\n - MAP: added support for 8x8 tile priority information for TMX maps (was fixed to TMX map tile size before)\r\n - OBJECT: objects are now sorted on 'id' field by default (if it exists)\r\n - OBJECT: added 'width' and 'height' fields export\r\n - OBJECT: fixed 'name' field export\r\n - OBJECT: fixed bug with f32 field value\r\n - SPRITE: added support for empty frame in the middle of a sprite animation\r\n - SPRITE: fixed bug with dummy empty frame when NONE optimisation level selected\r\n - SPRITE: fixed a small bug in sprite frame duplicate detection\r\n - SPRITE: added new optimization level for cutting process (replaced 'iteration' with 'optLevel')\r\n - SPRITE: several fixes / improvements to sprite cutting algorithm\r\n - PAL: better JASC .pal file support\r\n - fixed a small bug with empty / dummy tileset\r\n - added info in output log for duplicated objects\r\n - rescomp.txt documentation updated and fixes\r\n - several others tweaks and fixes\r\n* XGMTOOL\r\n - fixed compilation on linux (thanks to Andrew DeRosier)\r\n - updated XGMTool binary to support ZGM output\r\n* MAKEFILE\r\n - made ext.mk optional\r\n* LINK\r\n - added .ramprog section for easier moving code into RAM\r\n* DOCKER\r\n - fixed windows docker build container (thanks to Allion Benjamin)\r\n - removed wine32 dependency, support Apple M1 (arm64) and native tools too\r\n* README\r\n - fixed assembly (asm target) generation\r\n - added links + smalls updates here and there\r\n\r\nLIBRARY\r\n* SPRITE:\r\n Rewrote the sprite engine to get rid of hardware sprite allocation (note that the legacy sprite engine\r\n is still accessible through the config.h file as it can be useful for sprite multiplexing).\r\n - better hardware sprite usage\r\n - general simplification of the API\r\n - lighter 'Sprite' structure\r\n - re-introduced Y position in visibility computation\r\n - lot of optimisations done to maintain same or get higher level of performance\r\n - added SPR_getAnimationDone(..) method to know if current playing animation reached the last frame\r\n - added SPR_getUsedVDPSprite() method to know how many hardware sprite are currently in use.\r\n - added SPR_enableVDPSpriteChecking() / SPR_disableVDPSpriteChecking() methods\r\n - added SPR_getFreeVRAM() and SPR_getLargestFreeVRAMBlock() methods\r\n - keep same behavior in debug / release build\r\n* OBJECT\r\n - small fix in POOL_find(..) method\r\n* MATH\r\n - transformed some macros to methods for better type checking (can also help the compiler)\r\n* CONSOLE \r\n - added TTY console support (added as module - thanks to Andreas Dietrich for it)\r\n* VDP\r\n - modified MAX_VDP_SPRITE to SAT_MAX_SIZE as max displayable sprite depend from horizontal reolution\r\n - disable VDP during VDP_resetScreen() process (faster operation)\r\n - small fix on VDP_waitVSync() and VDP_waitVActive() methods to take care of VDP disable state\r\n* SYS\r\n - added SYS_nextFrame() method (just an alias to SYS_doVBlankProcess)\r\n - added SYS_resetBanks(), SYS_getNextFarAccessRegion() and SYS_setNextFarAccessRegion() methods\r\n - fixed a bug with soft reset + general safer soft reset operation\r\n - added SYS_getShowFrameLoad() method\r\n - fixed small bug in TSK_init()\r\n* Z80\r\n - several fixes and method updates for safer operation\r\n* SOUND\r\n - added XGM_setPCM_FAR(..) and XGM_setPCMFast_FAR(..) to allow playing PCM through bank switch\r\n - added YM2612_readStatus() method\r\n* JOY\r\n - added JOY_getEventHandler() method (useful for saving / restoring callback)\r\n* SAVE\r\n - added flash save support (added as module - thanks to doragasu for it)\r\n* MISC\r\n - tweaked / improved readability of lz4w_unpack (thanks to HpMan)\r\n* deprecated methods and definitions now generate compilation error\r\n* added NO_INLINE definition when we want to force no inlining\r\n* forced NO_INLINE on some larges functions to avoid code growing too much\r\n* added megaWifi README file\r\n* documentation updates\r\n* smalls fixes, general cleanup, some refactoring..\r\n\r\nSAMPLE\r\n* BENCHMARK\r\n - added new large scroll performance test\r\n - added new big sprite tests\r\n - reworked scoring (making it not comparable to previous versions unfortunately)\r\n - small fixes\r\n* updated samples to last SGDK\r\n\r\nSGDK 1.90 MIGRATION NOTE\r\n\r\n* Removed 'resetz80' parameter from Z80_upload(..) function (it's always reseted now)\r\n* Z80_clear(..) doesn't take any parameters now (it always clears all the Z80 RAM now)\r\n \r\n \r\nSGDK 1.80 (September 2022)\r\n--------------------------\r\n\r\nCOMPILER\r\n* RESCOMP\r\n - added new OBJECTS resource (see rescomp.txt for more infos)\r\n - added new TILEMAP resource (see rescomp.txt for more infos)\r\n - added Tiled TMX map and object support (TILEMAP, MAP and OBJECT resources)\r\n - added Tiled TSX tileset support (TILESET resource)\r\n - added global RGB image support (see rescomp.txt for more infos)\r\n - added .pal file and RGB image support for PALETTE resource\r\n - added extension support so you can add your own custom resource (see rescomp.txt for more infos)\r\n - better management of duplicated resources\r\n - better compression logic (don't compress if gain is too low)\r\n - better logic for extended attributes from tile (MAP and TILEMAP resources)\r\n - improved tile indexing performance\r\n - improved compilation reports\r\n - some tweaks and fixes\r\n* XGMTOOL\r\n - added support to split VGM and PCM streams in VGM file (Thanks to Vic_)\r\n - added ZGM (compressed VGM) export support (Thanks to Vic_, useful for 32X dev)\r\n* MAKEFILE\r\n - added '-fms-extensions' flag to allow usage of anonymous embedded structures and enums\r\n - added '--register-prefix-optional,--bitwise-or' flags to help with assembly code (can use '|' as OR operator)\r\n - added 'ext.mk' and 'ext_lib.mk' files for makefile extension and customization\r\n - removed '-ggdb' flag for .s files compilation. It makes AS crashing when using 'dc.b' data declaration.\r\n* README\r\n - added 'useful tools' section\r\n - some rewrites and tweaks (thanks to MrBen89)\r\n - updated tutorial section\r\n - updated thanks section\r\n - added special thanks section\r\n\r\nLIBRARY\r\n* OBJECT\r\n - added new 'pool' unit for easy and fast object pool management\r\n - added new 'object' unit for easy general object implementation\r\n* VDP\r\n - renamed many constants for better coherency in naming convention (ex: TILE_USERINDEX --> TILE_USER_INDEX)\r\n - renamed all GFX_xxx constants to VDP_xxx \r\n - added bit fields to VDPSprite structure for easier field manipulation (thanks to Carlos Aragones)\r\n - added many methods to manipulate these fields (thanks to Carlos Aragones)\r\n* MAP\r\n - removed 'palette' and 'tileset' fields from Map structure (better to handle that externally)\r\n - fixed allocateMap(..) method\r\n* MEM\r\n - added MEM_allocAt(..) function to allocate memory at a fixed address\r\n - splitted memory.h file --> memory.h and memory_base.h (easier to include in .s file)\r\n* SYS\r\n - faster H-int callback implementation (callback method need to be prefixed with HINTERRUPT_CALLBACK now)\r\n - added TSK_init() method for easier proper multi tasking system initialization \r\n - modified random() implementation to allow reproducible numbers sequence\r\n* Z80\r\n - added generic and customizable Z80 bus protection methods (Z80_useBusProtection / Z80_setBusProtection)\r\n - added generic Z80_setForceDelayDMA() so it can be used by all sound driver (not only reserved to XGM sound driver)\r\n* SOUND\r\n - added Fractal sound driver support (https://gitlab.com/Natsumi/Fractal-Sound)\r\n - added PSG_setToneLow(..) method (only set low part of tone register)\r\n - renamed PSG_init() --> PSG_reset()\r\n* TYPE\r\n - added volatile fix16/fix32 type (vfix16, vfix32, vf16, vf32)\r\n - changed 'bool' to 'u8' instead of 'u16' (don't waste RAM / ROM :p)\r\n - added p16 type (short pointer for low ROM / high RAM address)\r\n* DMA\r\n - increased a bit default DMA buffer size\r\n* added macros to create 'enum' type compatible with assembly (.s) files\r\n* several documentation fixes / cleanups / updates\r\n* removed old deprecated units and headers (vdp_pal and vdp_dma)\r\n* general cleanup, some refactoring..\r\n\r\nSAMPLE\r\n* rewrote 'sonic' sample with better separation of different units.\r\n* added new 'platformer' sample (thanks to Gerard Gascon).\r\n* tweaked/fixed 'scaling' and 'wobble' samples (using the new fast h-int call)\r\n\r\nSGDK 1.80 MIGRATION NOTE\r\n* Add extra '_' character on some constantes (i.e: TILE_USERINDEX --> TILE_USER_INDEX; TILE_FONTINDEX --> TILE_FONT_INDEX; ...)\r\n* Replace all GFX_xxx constants with VDP_xxx\r\n* Add HINTERRUPT_CALLBACK keyword before your hint callback method (see 'scaling' sample for an example)\r\n \r\n \r\n SGDK 1.70 (February 2022)\r\n-------------------------\r\n\r\nCOMPILER\r\n* fixed bug in sizebnd companion tool\r\n* RESCOMP\r\n - fixed compression for BIN resource (AUTO cannot be accepted here)\r\n - fixed a small bug preventing having a transparent tile with high priority or palette index > 0\r\n - fixed a bug with 'opt' set to NONE in SPRITE resource\r\n - fixed illegal sun 'WaveFileReader' class usage for WAV file resampling operation\r\n* MAKEFILE\r\n - added 'EXTRA_FLAGS' entry to makefiles so we can use custom extra compilation flags\r\n - added 'SGDK_GCC' define to identify SGDK compilation toolchain if needed (when used in larger build frameworks)\r\n - modifications to support Linux native toolchains (thanks to Doragasu)\r\n* LINK\r\n - now use objcopy instead of ld to generate rom_head.bin (improve compatibility with others GCC)\r\n* README\r\n - added Doragasu references / version update\r\n - added DOA game reference\r\n* DOCKER\r\n - use unprivileged sgdk user to avoid root privilege usage (thanks to Doragasu)\r\n - Modifications to support Linux native toolchains (thanks to Doragasu)\r\n - minors tweaks\r\n\r\nLIBRARY\r\n* added multitask support - see 'task' unit for more details (thanks to Doragasu)\r\n* added MegaWifi support - module should be enable in config.h file (thanks to Doragasu)\r\n* SPRITE\r\n* VDP\r\n - small fix to VDP_resetScreen() function to avoid a stack overflow on failure\r\n - added VDP_drawTextEx(..), VDP_clearTextEx(..) and VDP_clearTextAreaEx(..) methods (can use DMA / DMA_QUEUE)\r\n* MAP\r\n - added wrapping support (map size need to be aligned on power of 2)\r\n - added MAP_scrollToEx(..) method to allow forced full map redraw\r\n - fixed a bug on initial map refresh\r\n - fixed a small bug on full map refresh\r\n* MATH\r\n - added getNextPow2(..) method\r\n - added casting to int to fix conversion (safer)\r\n* SYS\r\n - added VDP_setExtInterrupt(..) method and fixed ext interrupt enable stat…\r\n - added new kprintf(..) method for easier KMod debug logging\r\n - minor tweak on mapper banking logic\r\n* DMA\r\n - removed Z80 halt/resume hack before triggering DMA (was not preventing bus clash anyway)\r\n* PAL\r\n - fixed first set palette operation not always done in vblank during fading process (CRAM dots)\r\n - simpler setFadePalette(..) implementation \r\n - updated to use color value rounding instead of truncation for RGB24_TO_VDPCOLOR(..) macro\r\n - added new RGB_TO_VDPCOLOR macros (thanks to emmanuel)\r\n* STRING\r\n - modified intToStr(..) to display hexa value for too large number\r\n* for safety HALT_Z80_ON_IO is also enable by default (config.h file)\r\n* some refactoring\r\n* changed u16 to bool in some declarations\r\n* documentation fixes / cleanups / updates\r\n* cleanup, removed old deprecated units / headers\r\n\r\nSAMPLE\r\n* added linescroll sample\r\n* added multitasking sample (thanks to Doragasu)\r\n* added MegaWifi sample (thanks to Doragasu)\r\n* BENCHMARK\r\n - updated to fix tests when using pure C (still not perfect)\r\n \r\n\r\nSGDK 1.65 (July 2021)\r\n---------------------\r\n\r\nCOMPILER\r\n* rewrote sizebnd tool in Java and added auto checksum feature.\r\n* RESCOMP\r\n - added new NEAR function to force NEAR location of binary data (read rescomp.txt file for more info)\r\n - fixed a small bug on MAP resource where it was using flipped version of a tile even if tileset was containing non flipped version\r\n - better optimisation process for large sprites (close to the limit of 16 hardware sprites)\r\n - many small fixes, tweaks and improvements to sprite cutting process\r\n - added duplicated sprite frame optimization\r\n - fixed typo on 2BPP to 8BPP image conversion\r\n - added information on MAP resource compilation\r\n - WAV resource can now be set as FAR (bank switch)\r\n - fixed sample output override for WAV resource (needed for Bad Apple sample which use a custom ADPCM2 driver)\r\n - fixed a possible bug in duplicated resource symbol\r\n* APJ\r\n - fixed cost computation (bit better compression)\r\n - fixed encoding for short match with long offset\r\n - more infos on encoding errors\r\n* LINK\r\n - increased theoretical max ROM size to ~3.8GB (using bank switch)\r\n* README\r\n - added MarsDev project reference\r\n - added And-0 documentation references\r\n* DOCKER\r\n - use lighter docker image\r\n - improved / fixed docker script (thanks to all contributors for that)\r\n\r\nLIBRARY\r\n* SPRITE\r\n - fixed a bug where some sprites wouldn't be properly hidden in rare occasion\r\n - automatically update VRAM region location when VRAM mapping changed\r\n - VRAM region can be remapped if needed on defrag operation\r\n - added sprite validity check in 'debug' build\r\n* VDP\r\n - VDP_resetScreen() now also reset VSRAM\r\n - updated VRAM mapping for 64x64 plane size to allow full window map\r\n - use new mul/div/mod functions for small performance improvement on some functions\r\n* MAP\r\n - fixed a decoding bug when we had consecutive same row block offset\r\n - fixed MAP scrolling update when using TILE/LINE horizontal scrolling mode\r\n* MATH\r\n - added fix32Avg(..) and fix16Avg(..) methods\r\n - added mulu/muls/divu/divs/modu/mods/divmodu/divmods(..) functions which allow to directly use the 68000 mul/div instruction (GCC doesn't always use them correctly)\r\n* SYS\r\n - added ROM_SIZE definition to get ROM size\r\n - added SYS_getFarDataEx(..) and SYS_getFarDataSafeEx(..) methods\r\n - added SYS_isCrossingBank(..) method\r\n - fixed RAM mapping for bank switching with ROM larger than 12MB\r\n - reset banks only when bank switch is enabled (may help with Everdrive X3)\r\n - added SYS_setVBlankCallback(..) method\r\n - added SYS_computeChecksum() and SYS_isChecksumOk() methods\r\n* DMA\r\n - lowered default PAL buffer capacity (DMA_BUFFER_SIZE_PAL_LOW) to spare memory\r\n - HALT_Z80_ON_DMA is now enabled by default for the sake of safety\r\n - added DMA_canQueue(..) method and small fix on transferSize calculation\r\n - fixed a stupid bug in DMA_doDma(..) on 128K bank crossing\r\n - removed some VDP_waitDMACompletion() check for performance reason (developer need to do it by himself)\r\n* PAL\r\n - added TransfertMethod parameter to set palette colors methods\r\n - made 'fadeCurrentPal' and 'fadeEndPal' variables visible (can be useful)\r\n* SOUND / XGM\r\n - protected XGM_xxx methods against interrupts\r\n - fixed XGM_pausePlay(..) which wasn't always muting all sound (thanks to BigEvilCorporation for the fix)\r\n - fixed potential PENDING_FRM overflow (mutual change)\r\n - XGM play / pause / resume commands are now exclusive (cannot be pending at same time)\r\n - full YM reset on YM2612_reset()\r\n* BITMAP\r\n - fixed VRAM organization for Bitmap mode (restore 64x32 plane size on exit)\r\n - use new mul/div/mod functions for small performance improvement on BMP_scale(..) function\r\n* ROM HEADER\r\n - updated default SRAM size to 64 KB\r\n* JOY\r\n - use the correct bits to detect 3-button.\r\n - tried to compensate 6 button read to avoid the UP+DOWN issue state (emulator or unofficial controllers)\r\n* small changes for better/safer soft reset behavior\r\n* replaced some waitVSync() by SYS_doVBlankProcess()\r\n* more detailed error / warning logs in debug build\r\n* documentation fixes and updates\r\n* cleanup, removed old deprecated units / headers\r\n\r\nSAMPLE\r\n* SONIC\r\n - fixed DMA buffer size for initial MAP update\r\n \r\n\r\nSGDK 1.62 (March 2021)\r\n----------------------\r\n\r\nCOMPILER\r\n* RESCOMP\r\n - fixed a small bug on MAP resource compression\r\n - implemented independant compression on MAP resource\r\n - XGM resource are now stored as FAR (accessible through bank switch)\r\n - tweaked default BALANCED sprite cutting optimization strategy to reduce a bit sprite usage over tile\r\n - increased maximum SPRITE width / height to 248 pixels (it was 128 pixels)\r\n - optimized SPRITE metadata size (divided size by 4) at the expense of slower sprite processing\r\n - force slow sprite cutting processing when specifying a number of iteration different from default (500000)\r\n - added information (rescomp.txt) about how to provide extra data (priority / palette) on tilemap for MAP and IMAGE resources\r\n - added support to grayscale image\r\n - better error reporting\r\n* BATCH\r\n - several fixes to build_adv.bat file\r\n* MAKEFILE\r\n - makefile can now define GDK variable on its own (environment variable not anymore needed)\r\n - fixed copy/paste typo in makelib.gen file\r\n* README\r\n - smalls changes to alternative OS solutions\r\n - added Raster Scroll MD graphics guide reference\r\n - updated credits part\r\n - fixed line return\r\n* increased maximum ROM size to 12MB\r\n* removed resourcemanager tool which was not used nor complete \r\n* added prelemenary docker support for easier SGDK usage on alternative OS (thanks to Steve Schnepp for it)\r\n  \r\nLIBRARY\r\n* SYS\r\n - added SYS_getFarDataSafe(..) method / FAR_SAFE(..) macro allowing safe access to resource crossing 512 KB banks\r\n   SGDK methods now use FAR_SAFE(..) accessor instead of FAR(..) for bank switch mechanism\r\n - fixed a bug in bank switch initialization\r\n - better CPU load reporting\r\n - minor change to main(..) prototype and return execution\r\n - added new 'ROMHeader rom_header' variable to get easier access to ROM header infos\r\n* SPRITE\r\n - modified sprite structures to reduce metadata size (but at the expense of a bit slower processing)\r\n - added SPR_getVisibility(..) and SPR_isVisible(..) methods\r\n - now automatic sprite visibility is computed using only X position as we use it only scanline sprite usage optimization\r\n - made 'firstSprite' / 'lastSprite' visible\r\n - improved profiling\r\n* DMA\r\n - small tweak + some fixes when DMA is disabled\r\n* VDP\r\n - added VDP_setHorizontalScrollVSync() and VDP_setVerticalScrollVSync() methods to do delayed scrolling update\r\n - safier VDP_drawText(..) / VDP_clearText(..) methods (bounds check)\r\n - prevented tilemap column update when plane width is set to 128 (not possible because auto-inc register is limited to 255)\r\n* MAP\r\n - added priority info support to baseTile parameter in MAP_create(..)\r\n* MATH\r\n - removed MATH_BIG_TABLES define as it's not anymore useful with the lto\r\n - add clamp function (thanks de Devon Powell)\r\n - fix issue with rounding helpers (fix16)\r\n* MEMORY\r\n - added malloc(..) / free(..) so they forward to MEM_alloc(..) / MEM_free(..) methods\r\n* SOUND\r\n - added XGM_startPlay_FAR(..) to allow to play XGM music accessible through bank switch\r\n* TIMER\r\n - small fix on waitSubTick(..) method to take care of small wait during vblank\r\n* JOY\r\n - added JOY_writeJoypadX(..) and JOY_writeJoypadY(...) which allow to set a specific position for mouse pointer (Thanks to LIZARDRIVE)\r\n* small change to 'Map' and 'Sprite' structure for better doxygen documentation reference\r\n\r\nSAMPLE\r\n* reworked folder structure\r\n* added new basic HELLO_WORLD sample\r\n* added BAD APPLE demo sample (to exhibit SGDK bank switching mechanism)\r\n* added new WOBBLE fx sample (thanks to Andreas Dietrich for it)\r\n* added new SCALING fx sample (thanks to Andreas Dietrich for it)\r\n* SPRITE sample renamed to SONIC\r\n* BENCHMARK\r\n - better score computation for Sprite part (also now comparable to others tests)\r\n\r\nSGDK 1.62 MIGRATION NOTE\r\n* Replace all sprite->seqInd occurence with sprite->frameInd\r\n* Replace all sprite->animation->length occurence with sprite->animation->numFrame\r\n* Sprite frame size is now directly defined in the SpriteDefinition structure (SpriteDefinition->w, SpriteDefinition->y) as it's fixed for all frames.\r\n\r\n\r\nSGDK 1.6 (December 2020)\r\n------------------------\r\n\r\nCOMPILER\r\n* APLIB\r\n - replaced appack tool by new APJ (Java APLIB packer) tool written from scratch\r\n* LZ4W\r\n - much faster compression speed\r\n - better exit operation\r\n* RESCOMP\r\n - added new MAP resource and MAP_xx methods (in map.h unit) to handle large maps / background scrolling easily (finally !)\r\n - integrated APJ tool for faster ApLib compression\r\n - added per resource size information, fixed Map resource export...\r\n - we can now disable sprite cutting optimisation ('NONE' value for opt parameter)\r\n - fixed a small bug on Sprite cutting optimisation process\r\n - added 'optimisation' parameter to TILESET resource\r\n - fixed bug on tilemap generation with base tile index used\r\n - fixed a mall bug in BIN resource export\r\n - fixed a small bug on ALIGN directive\r\n - optimized tile parsing\r\n* XGMROMBUILDER\r\n - now remember last used folder\r\n* MAKEFILE\r\n - added deps file (.d) support for better dependencies handling\r\n - added sources sub folders support (2 depth levels)\r\n - removed useless and undesired warnings\r\n* README\r\n - added GET STARTED part\r\n - major rewrite / revamp to take benefit of Markdown format (thanks to Astrofra)\r\n - others changes\r\n\r\nLIBRARY\r\n* MAJOR CHANGE !WARNING!:\r\n  Added SYS_doVBlankProcess(..) to replace automatic V-Int processing of SGDK.\r\n  This was done to avoid issues with missing interrupts protection and to offer more control in general.\r\n  So basically you should replace all your _VDP_waitVSync()_ references with _SYS_doVBlankProcess()_\r\n* SYS\r\n - faster user callback interrupt handling\r\n - modified ROM header to enable SRAM by default\r\n - fixed small initialization issue\r\n - minor fix on SSF2 mapper initialization\r\n - added LOG_LEVEL setting allowing different level of log for debug (default = LOG_LEVEL_WARNING)\r\n - removed interrupts protection where they are not anymore useful\r\n - small change for more accurate detection of frame miss\r\n* MAP\r\n Added new MAP engine (map.h unit) to handle large maps / background scrolling easily from MAP resource:\r\n - Map* MAP_create(const MapDefinition* mapDef, VDPPlane plane, u16 baseTile);\r\n - void MAP_scrollTo(Map* map, u32 x, u32 y);\r\n - u16 MAP_getMetaTile(Map* map, u16 x, u16 y);\r\n - u16 MAP_getTile(Map* map, u16 x, u16 y);\r\n - void MAP_getMetaTilemapRect(Map* map, u16 x, u16 y, u16 w, u16 h, u16* dest);\r\n - void MAP_getTilemapRect(Map* map, u16 x, u16 y, u16 w, u16 h, bool column, u16* dest);\r\n* DMA\r\n - added DMA_xxxFast() methods (no 128 KB bank cross check)\r\n - small tweaks for bit faster DMA queue\r\n - tweaks in general to DMA methods\r\n - increased default DMA queue size (we can quickly reach 64)\r\n* VDP \r\n - fixed a small bug on VDP_drawTextBG(..) method\r\n - added VDP_waitVBlank() and VDP_waitVActive() methods\r\n - added VDP_getPlaneAddress() method (was internal first)\r\n* STRING\r\n - added support to u32/s32 type to sprintf(..) function\r\n - fixed fix16ToStr(..) and fix32ToStr(..) methods\r\n* SOUND\r\n - fixed a small bug on PCM command play (thanks to hsk)\r\n - better restoring of Z80 BUS request state\r\n* Z80\r\n - added Z80_getAndRequestBus() method\r\n - added loading of a dummy driver by default to keep Z80 active on init\r\n* replaced some u16 parameter by bool where it makes sense to have it\r\n\r\nSAMPLE\r\n* Updated for SGDK 1.6 changes\r\n* BENCHMARK\r\n - minors changes (updated to version 1.31)\r\n* SPRITE\r\n - updated background to complete level dimension.\r\n - updated to take benefit of the new MAP resource and advanced MAP methods\r\n - added alternate scrolling update mode (still using new MAP unit)\r\n\r\nSGDK 1.6 MIGRATION NOTE\r\n* Replace all VDP_waitVSync() references with SYS_doVBlankProcess()\r\n* Replace all VDP_waitVInt() references with SYS_doVBlankProcess()\r\n\r\n\r\nSGDK 1.51 (April 2020)\r\n----------------------\r\n\r\nCOMPILER\r\n* APPACK\r\n - fixed build for 32 and 64 bit linux (thanks doragasu)\r\n* LZ4W\r\n - minor fix  \r\n* RESCOMP\r\n - added new sprite optimization options to SPRITE resource (see rescomp.txt for details)\r\n - minor tweak on binary export order (can save some bytes with LZ4W compression)\r\n - fixed resource duplication bug\r\n* XGMTOOL\r\n - fixed VGM loop\r\n  \r\nLIBRARY\r\n* fixed corrupted library binaries which were displaying a blank screen on some MD models\r\n* MEMORY\r\n - fixed a minor in memory packing operation\r\n - added MEM_pack() here and there to avoid memory fragmentation\r\n* VDP\r\n - fixed getAdjustedVCounterInternal(..) which could return value > 255 in some rare situation\r\n - moved VDP DMA busy checking on reset (better to do it before accessing VDP)\r\n - VDP_setPlaneSize(..):\r\n   - added constraint on plane size\r\n   - fixed maps start address calculation (when VRAM setup is asked)\r\n - minor change in VDP_drawImageEx(..) to do setTileMap(..) operation using CPU (DMA is actually slower here)   \r\n* added SYS_showFrameLoad() / SYS_hideFrameLoad() methods to monitor CPU frame load.\r\n* always load font using CPU in reset process (safer)\r\n* fixed String unit build when ENABLE_NEWLIB set (thanks doragasu)\r\n* improved documentation in Joy unit (thanks Chilly Willy) and VDP (regarding DMA QUEUE usage specifically)\r\n\r\nSAMPLE\r\n* reduced memory usage on sample which use Bitmap mode by reducing DMA allocated memory\r\n* SPRITE\r\n - added SYS_showFrameLoad() showcase\r\n\r\n\r\nSGDK 1.5 (April 2020)\r\n---------------------\r\n\r\nCOMPILER\r\n* RESCOMP\r\n - added ALIGN directive (read rescomp.txt for more information about it)\r\n - added UNGROUP directive (read rescomp.txt for more information about it)\r\n - added 'compression' and 'far' field to BIN resource\r\n - replaced Map structure export by TileMap\r\n - minor optimization in building IMAGE tilemap\r\n   plain tiles are now ignored (taken from system tiles) when using a base tile index offset for tilemap (mapbase parameter in IMAGE resource)\r\n - more flexible resource compilation\r\n   - ignore palette and priority for transparent pixel\r\n   - sprite can have their palette not starting at index 0\r\n - reorganized resource data export order for better LZ4W compression and bank switch support\r\n - added support for 1bpp and 2bpp indexed color images\r\n - faster LZ4W tool call (embeded in rescomp now)\r\n - preserve resource order for better BIN data compression with LZ4W\r\n - more constrained sprite cutting process depending chosen optimization strategy\r\n - minor fix to allow using bit 7 (color index >= 128) in IMAGE resource as priority bit in tilemap\r\n - simplified / fixed binary compression block with alignment\r\n - fixed a bug on possible duplicated resource export\r\n - fixed Circle collision type export\r\n - now return -1 as exit code on error\r\n - replaced FileWriter by StringBuffer (faster and safer)\r\n - minor changes and improvements to rescomp.txt file\r\n* XGMTOOL\r\n - fixed a small bug during sample conversion processing\r\n* XGMROMBUILDER\r\n - updated to last XGMTool and XGM driver version\r\n* LZ4W\r\n - fixed LZ4W compression which could failed in very are case\r\n* BINTOS\r\n - fixed data section (it was .text instead of .rodata)\r\n* MAKEFILE\r\n - updated 'release' target to generate symbol.txt file (always interesting to have)\r\n - show more warnings\r\n* forced no inlining of memset / memcpy methods to fix LTO agressive optimization issue\r\n\r\nLIBRARY\r\n* SYS\r\n - added bank switch support using SSF2 mapper (allow ROM > 4MB)\r\n   - use ENABLE_BANK_SWITCH flag in config.h file to enable bank siwtch support in SGDK\r\n   - added FAR(..) directive to access a resource through bank switch if required\r\n   - added SYS_getBank(..) / SYS_setBank(..) methods\r\n - moved RAM initialization to sys.c unit and added support for bank crossing (more control on it)\r\n - minors changes to reset methods (simpler)\r\n - added ROM and RAM constants (yeah, why not ^^)\r\n* SPRITE\r\n - added sprite frame change event callback (using SPR_setFrameChangeCallback(..) method)\r\n - added SPR_loadAllFrames(..) to (pre)load all frames data of a SpriteDefinition to VRAM\r\n - removed unpack buffer (replaced by DMA buffer and new DMA_QUEUE_COPY method)\r\n - fixed a small issue with delayed update\r\n - fixed a bug on SPR_setDefinition(..) (can display glitches as some sprites weren't always properly hidden)\r\n - fixed internal sprite link (could occasionaly let some phantom and glitched sprites visible)\r\n - added out of range index detection for animation and frame (debug build only)\r\n* DMA\r\n - added new DMA buffer for easier and better DMA queue management\r\n   - added 'bufferSize' parameter to DMA_initEx(..) function\r\n   - added DMA_setBufferSize(..) and DMA_setBufferSizeToDefault() functions to set the temporary DMA buffer size\r\n   - added new DMA_QUEUE_COPY transfer method (TransferMethod enum) to copy data to a temporary buffer before transfer actually occurs\r\n   - added DMA_allocateAndQueueDma(..) function which return a temporary buffer and queue a DMA transfer from it\r\n   - added DMA_allocateTemp(..) and DMA_releaseTemp(..) methods to allocate memory from DMA temporary buffer (use that safely)\r\n   - added DMA_copyAndQueueDma(..) function which copy data to transfer to a temporary buffer and queue the DMA transfer\r\n - added a new generic DMA_transfer(..) function\r\n - added DMA_doCPUCopy(..) function to do a CPU copy to VRAM/CRAM/VSRAM\r\n - added DMA_getMaxQueueSize() and DMA_setMaxQueueSize() to get and set the queue size.\r\n - passed the DMA queue flush loop in assembly for better control (and also faster operation as GCC was dumb about it)\r\n - safer DMA operation on DMA_doDMA(..)\r\n - added DMA_initEx(..) and simplified DMA_init()\r\n - added new DMA_DISABLED flag in config.h to completely disable DMA support in SGDK (for debug purpose)\r\n - fix for HALT_Z80_ON_DMA (stupid typo)\r\n* VDP \r\n - many refactoring (see refactoring section at bottom)\r\n - TILE_USERMAXINDEX now take allocated VRAM for sprite engine in account !\r\n - added TILE_SPRITEINDEX constant to get base tile index for the Sprite Engine\r\n - added tilemap row update methods\r\n   - VDP_setTileMapDataRow(..) / VDP_setTileMapDataRowEx(..)\r\n   - VDP_setTileMapRow(..) / VDP_setTileMapRowEx(..)\r\n - added tilemap column update methods\r\n   - VDP_setTileMapDataColumnFast(..) / VDP_setTileMapDataColumn(..) / VDP_setTileMapDataColumnEx(..)\r\n   - VDP_setTileMapColumn(..) / VDP_setTileMapColumnEx(..)\r\n - added TransferMethod parameter to many tilemap set methods\r\n - added tilemap wrapping support to VDP_setTileMap(..) and VDP_setTileMapEx(..) methods.\r\n - added setupVram parameter to VDP_setPlaneSize(..) function\r\n - removed vdpSpriteCacheQueue table (replaced by new DMA_QUEUE_COPY)\r\n - re-introduced VDP_loadTileData(..) method in vdp_tile.c unit (no more assembly code for this one)\r\n - moved font loading in VDP_resetScreen() method (fix)\r\n* PALETTE\r\n - fixed palette fading so it correctly trigger during vblank (avoid CRAM dot)\r\n - fixed minor issue in palette fading (sometime not properly doing last fade step) \r\n* MEMORY\r\n - fixed MEM_getLargestFreeBlock(..) method\r\n - added MEM_pack() method to help reducing memory fragmentation\r\n - removed MEM_init() access as it's not safe to call it externally\r\n - increased stack size to 0xA00\r\n* MATHS\r\n - fixed getLog2Int(..) method\r\n - replaced sin tabs to use FIX32/FIX16 (thanks to FireRat for the generator)\r\n* TYPES\r\n - added new rorxx(..) / rolxx(..) functions which are correctly turned into ROR / ROL instruction when optimization are enabled\r\n* Z80\r\n - fixed Z80 enable restoration on DMA\r\n* general cleanup and refactoring\r\n\r\nSAMPLE\r\n* Updated for SGDK 1.5 changes\r\n* BENCHMARK\r\n - added memory information at startup\r\n - some changes to adapt to last SGDK\r\n* SPRITE\r\n - updated resources to use large backgrounds\r\n - updated to support long scrolling > 512 px (vertical and horizontal) !\r\n - as collision is not implemented, added physic settings using START button so we can play with vertical scrolling too\r\n - enemies sprites frames preloaded and animated using new Sprite engine features\r\n   Showcase of SPR_loadAllFrames(..) and SPR_setFrameChangeCallback(..) methods\r\n* XGMPlayer\r\n - updated for easier integration in XGM ROM Builder tool\r\n* added notes and tutorial references to README.txt\r\n\r\nREFACTORING\r\n* TILE_USERMAXINDEX now take allocated VRAM for sprite engine in account !\r\n* _voidCallback --> VoidCallback\r\n* _joyEventCallback --> JoyEventCallback\r\n* PLAN_A --> BG_A\r\n* PLAN_B --> BG_B\r\n* PLAN_WINDOW --> WINDOW\r\n* VDP_PLAN_A --> VDP_BG_A\r\n* VDP_PLAN_B --> VDP_BG_B\r\n* VDP_PLAN_WINDOW --> VDP_WINDOW\r\n* all references to 'Plan' keyword --> 'Plane'\r\n - VDPPlan --> VDPPlane\r\n - VDP_clearPlan --> VDP_clearPlane\r\n - VDP_getTextPlan --> VDP_getTextPlane\r\n - VDP_setTextPlan --> VDP_setTextPlane\r\n - VDP_setAPlanAddress --> VDP_setBGAAddress\r\n - VDP_setBPlanAddress --> VDP_setBGBAddress\r\n - VDP_setPlanSize --> VDP_setPlaneSize\r\n* all references to 'Map' --> 'TileMap'\r\n - Map --> TileMap\r\n - unpackMap --> unpackTileMap\r\n - allocateMap --> allocateTileMap\r\n - VDP_setMap --> VDP_setTileMap\r\n - VDP_setMapEx --> VDP_setTileMapEx\r\n\r\n\r\nSGDK 1.41 (September 2019)\r\n--------------------------\r\n\r\nCOMPILER\r\n* RESCOMP\r\n - added new sprite optimization options to SPRITE resource (see rescomp.txt for details)\r\n - minor tweak on binary export order (can save some bytes with LZ4W compression)\r\n - fixed resource duplication bug\r\n* XGMTOOL\r\n - fixed VGM loop\r\n  \r\nLIBRARY\r\n* SYS\r\n - Safer SYS_setInterruptMaskLevel() so interrupt mask is not lost after SYS_enablesInts() call\r\n - fixed/updated SGDK logo display code\r\n - renamed getFPS() / getFPS_f() to SYS_getFPS() / SYS_getFPSAsFloat()\r\n* DMA\r\n - fixed possible DMA failure on some Megadrive when Z80 access 68K BUS at same time we trigger DMA\r\n - minor fix on autoInc restoration after DMA_flushQueue()\r\n* VDP \r\n - tweaked default VRAM configuration so window can be freely used anywhere.\r\n - added VDP_getAdjustedVCounter() method to have a consistent [0..255] V-Counter (avoiding rollback issue)\r\n - tweaked up VDP_resetScreen() method\r\n - added VDP_setHVLatching() and VDP_setDMAEnabled() methods\r\n* PALETTE\r\n - fixed VDP_getPaletteColors() and VDP_getPalette(..) methods (regression)\r\n - fixed a bug with all palette fading methods (regression)\r\n - renamed vdp_pal unit to pal unit (so all palette methods are now called PAL_xxx)\r\n* JOY\r\n - added JOY_reset() method to reset controller detection without clearing JOY state change event callback\r\n - safer JOY_setSupport(..) / gun controller implementation\r\n - more permissive mouse id detection in mouse pooling code\r\n - fixed an issue where an EA 4-way multitap could be incorrectly detected\r\n* TIMER\r\n - safer waitSubTick(..) implementation during VInt.\r\n - fixed getSubTick() method to take care of HV counter latching when light guns are used.\r\n* RESOURCE\r\n - added 2 alternate SGDK logo (free feel to use it)\r\n - minor change on library resources name\r\n - fixed version and added alias for old resource names\r\n* added ENABLE_NEWLIB define in config.h file for those who want to use newlib within SGDK (you need to build it by yourself)\r\n* changed 'u16' to 'bool' where it makes sense to use 'bool' (internally they are the same type, it's just for readability).\r\n* minors tweaks, changes and fixes here and there\r\n\r\nSAMPLE\r\n* XGMPlayer\r\n - updated to make it work with last SGDK (sprite engine difference mainly)\r\n* SOUND\r\n - reintroduced cry SFX test for XGM driver\r\n\r\n\r\nSGDK 1.4 (May 2019)\r\n-------------------\r\n\r\nCOMPILER\r\n* RESCOMP\r\n - rewrote from scratch in java for easier evolution and easy multi OS support.\r\n - added smart sprite cutting (detect empty space in sprite)\r\n - many changes on SPRITE resource, don't forget to read the rescomp.txt file to see changes about this resource.\r\n - can now disable map optimization for IMAGE resources (see rescomp.txt for more information)\r\n* LZ4W\r\n - added code sources (java)\r\n - fixed compression using previous data block in ROM (updated packer to version 1.4)\r\n* BINTOS\r\n - fixed a stupid bug on path.\r\n* added XGM ROM builder tool sources.\r\n* removed RESCOMP (C version), WAVTORAW, TFMCOM and Z80DASM tools.\r\n* added Visual Studio template.\r\n\r\nLIBRARY\r\n* SYS\r\n - added SYS_setVIntAligned(..) method to force V-Int callback to align process on VBlank.\r\n   IMPORTANT: by default now SGDK *does* align the V-Int processing to VBlank so you need to disable it if you don't want it !\r\n - added SYS_getCPULoad() to return CPU load estimation.\r\n - added SYS_resetMissedFrames() / SYS_getMissedFrames() methods.\r\n* DMA\r\n - simplified DMA over capacity strategy\r\n - minor change in debug log message\r\n* SPRITE\r\n - renamed SPR_init(..) to SPR_initEx(..) so now SPR_init() doesn't require any parameters by default.\r\n - removed 'maxSprite' parameter from Sprite Engine initialization (alays use max available).\r\n - added delayed frame update support.\r\n - added SPR_FLAG_DISABLE_DELAYED_FRAME_UPDATE flag to disable the delayed frame update (when we are running out of DMA capacity).\r\n - added SPR_setDelayedFrameUpdate() to change the delayed frame update state for a sprite.\r\n - added SPR_FLAG_INSERT_HEAD flag to allow adding new sprite in first position (instead of last position by default)\r\n - added SPR_defragVRAM() method to force VRAM defragmentation\r\n - added SPR_addSpriteSafe(..) and SPR_addSpriteExSafe(..) methods (automatically do VRAM defrag if needed)\r\n - fixed a bug where the last VDP sprite attribute weren't always correctly updated with visibility set to AUTO_SLOW.\r\n - fixed a bug a sprite couldn't be allocated.\r\n - fixed sprite visibility state when the number of used sprite changed.\r\n - many changes to sprite structures (better handling of flip info, better ROM usage...)\r\n* VDP \r\n - added VDP_showCPULoad() method to display CPU load\r\n - added VDP_waitVInt() method to wait until next VInt to happen.\r\n - removed 'waitvsync' parameter for VDP_initFading(..) and VDP_doStepFading(..) methods (we always want VSync here)\r\n - simplified / tweaked macros for VDP control writes\r\n* VRAM\r\n - added VRAM_getAllocated(..) and VRAM_getLargestFreeBlock(..) methods\r\n* TYPE\r\n - added bool type\r\n - replaced u16 by bool where it needs to be\r\n* MATHS\r\n - updated fix32Mul() and fix32Div() definition (again, trying to find the best compromize)\r\n - added new missing structures as Vect2D_f32, Mat2D_f32, Vect3D_xx...\r\n - added f16 and f32 as shorcut of fix16 and fix32 types.\r\n - added short typedefs (V2u16 = Vect2D_u16, V2f32 = Vect2D_f32, M2f16 = Mat2D_f16, M3f32 = Mat3D_f32)\r\n* PALETTE\r\n - removed index field from Palette structure\r\n* JOY\r\n - added checking for mouse / multipad read operation to avoid timeout operation when mouse or multipad is not present.\r\n* Z80\r\n - added volatile access for safety\r\n* TIMER\r\n - improved waitMs(..) method to be more accurate on small wait.\r\n - tweaked getSubTick() method (need testing, possible regression)\r\n* STRING\r\n - fixed and optimized uintToStr() method\r\n* TOOL\r\n - memory allocation methods for unpacking now always use deep allocation regardless of the compression used (simpler and less bug prone)\r\n - fixed LZ4W decompression using previous data block\r\n* fixed variable initialization (last byte was not always properly initialized)\r\n* added HALT_Z80_ON_IO define (config.h) to force Z80 halt on IO port access.\r\n* new awesome SGDK logo (Thanks a tons to Lizardrive for making it !)\r\n* removed useless sound drivers (MVS, TFM and VGM)\r\n* removed old TILE_CACHE unit (replaced by VRAM unit)\r\n* removed useless zlib \r\n* many refactoring (sorry for that, you will need to update your old code)\r\n* many tweaks / cleanup\r\n\r\nSAMPLE\r\n* updated all samples to take care of last changes made in SGDK\r\n* BENCHMARK\r\n - tweaked big sprite test to disable the delayed sprite update (new sprite engine feature)\r\n - fixed sheet size (new rescomp don't allow it)\r\n\r\n\r\nSGDK 1.34 (January 2018)\r\n------------------------\r\n\r\nLIBRARY\r\n* DMA\r\n - added DMA queue support for all (or almost all) methods supporting DMA operation\r\n* SPRITE\r\n - fixed timing issue when changing FRAME or ANIMATION manually.\r\n - fixed sprite sorting when multiple depth were modified in a single SPR_update(..).\r\n - safer sprite allocation / release.\r\n* MEMORY\r\n - added MEM_getLargestFreeBlock() to get the largest available block of memory.\r\n* improved LZ4W compression (better compression rate, faster compression...)\r\n* minors changes on method updating tilemap through X,Y position (safer)\r\n* some cleanup\r\n\r\nSAMPLE\r\n* reworked benchmark sample to avoid out of memory error (^^)\r\n\r\n\r\nSGDK 1.33 (November 2017)\r\n-------------------------\r\n\r\nLIBRARY\r\n* DMA\r\n - added HALT_Z80_ON_DMA flag in config.h to enable Z80 halt on DMA (avoid corruptions or sound issues on Tectoy MD).\r\n - deprecated 'vdp_dma' unit now forward calls to 'dma' unit.\r\n - added wait DMA checking (DMA fill or DMA copy operation) before doing a DMA operation.\r\n* SPRITE\r\n - simplified sprite sorting (always enabled, just need to use SPR_setDepth(..) method if needed)\r\n - fixed a regression which was causing 1 frame latency in sprite update.\r\n\r\nSAMPLE\r\n* minor change to sound sample\r\n\r\n\r\nSGDK 1.32 (October 2017)\r\n------------------------\r\n\r\nCOMPILER\r\n* added VS project for easier compilation with Visual Studio (thanks to lab313)\r\n\r\nLIBRARY\r\n* TIMER:\r\n - fixed getSubTick() method (no more possible rollback)\r\n - minor fix in getFPS() and getFPS_f() methods\r\n* VDP:\r\n - tweaked default VRAM memory layout\r\n* BITMAP:\r\n - changed get/setPixelXXX(..) methods so they now work on single pixel (not anymore doubled X pixel resolution)\r\n - changed drawLine(..) method so it now work on single pixel (not anymore doubled X pixel resolution).\r\n   WARNING: drawLine(..) is not anymore doing clipping, use BMP_clipLine(..) first for that.\r\n - added get/setPixelXXXFast(..) methods for fast get/set pixel operation (no clipping check)\r\n* SOUND:\r\n - fixed auto PCM selection when playing sample with driver 2ADPCM and 4PCM.\r\n - fixed default tempo for PAL system with XGM driver\r\n* SPRITE:\r\n   WARNING: you now require to set the sprite depth to use depth sorting (not anymore using the sprite Y position).\r\n - replaced SPR_FLAG_AUTO_YSORTING by SPR_FLAG_AUTO_DEPTH_SORTING\r\n - replaced SPR_setYSorting(..) method by SPR_setDepthSorting(..) / SPR_setZSorting(..)\r\n - replaced SPR_sortOnYPos() by SPR_sortOnDepth()\r\n - added void SPR_setDepth(..) / SPR_setZ(..) methods to set sprite depth\r\n - fixed VDP_updateSprites() with DMA queue operation (prevent sprite table modifications before DMA occurs).\r\n* STRING:\r\n - added int16ToStr(..) and uint16ToStr(..) methods (faster than intToStr(..) or uintToStr(..) for 16 bit integer, thanks to clbr)\r\n - optimized intToStr(..) and uintToStr(..) methods (thanks to clbr for that)\r\n\r\nSAMPLE\r\n* added XGM Player sample :)\r\n* Bench:\r\n - added some pixels / line draw tests\r\n* Donuts:\r\n - updated for new depth sorting refactoring\r\n\r\n\r\nSGDK 1.31 (July 2017)\r\n---------------------\r\n\r\nDOCUMENTATION\r\n* minor fix and updated to last version\r\n\r\nCOMPILER\r\n* fixed debug build in 'build_lib' batch\r\n\r\nLIBRARY\r\n* JOY:\r\n - fixed joy state variables declaration to avoid issues when GCC -O3 optimization level is used.\r\n* SPRITE:\r\n - added ALWAYS_ON_TOP flag to keep a sprite above others sprites whatever is sorting order.\r\n - minor fix on sprite sort\r\n\r\n\r\nSGDK 1.3 (June 2017)\r\n--------------------\r\n\r\nDOCUMENTATION\r\n* updated to last version\r\n\r\nCOMPILER\r\n* Updated to GCC 6.3 (thanks a tons to Gligli for that !)\r\n - many bugs fix and new features compared to old GCC 3.4.6\r\n - much better assembly code generation :)\r\n - added LTO (Linker Time Optimization) support\r\n* Modified makefile to enable LTO and improve optimization level.\r\n* Rescomp:\r\n - updated to handle structure changes in the Sprite Engine.\r\n\r\nLIBRARY\r\n* DMA:\r\n - minor optimization to DMA_queue(..) method (thanks to HpMan)\r\n* Memory:\r\n - default stack size increased to 0x800 bytes (GCC 6.3 requires more stack memory :p)\r\n* Sprite Engine:\r\n - added automatic Y sorting (per sprite)\r\n - added SPR_sort(..) for generic sorting\r\n - added SPR_sortOnY(..) for generic sorting\r\n - by default now sprite visibility is set to always ON (faster than automatic visibility)\r\n - updated 'Collision' structure (hierarchical structure)\r\n - some changes to internal structures to provide better performance\r\n* VDP BG/Tile:\r\n - fixed a minor bug in VDP_setTileMapDataEx(..) and VDP_setTileMapDataRectEx(..) methods (thanks to Alekmaul for reporting it)\r\n* minors fixes...\r\n\r\nSAMPLE\r\n* Bench:\r\n - fixed math tests for GCC 6.3\r\n\r\n\r\nSGDK 1.22a (September 2016)\r\n---------------------------\r\n\r\nLIBRARY\r\n* VDP: reintroduced the 16 plain system tiles.\r\n\r\n\r\nSGDK 1.22 (September 2016)\r\n--------------------------\r\n\r\nDOCUMENTATION\r\n* minors improvements and fixes\r\n\r\nCOMPILER\r\n* Rescomp: fixed a minor issue in sprite resource\r\n* XGMTool:\r\n - added duration information to XD3 tag\r\n - improved loop\r\n* added the XGM ROM builder tool.\r\n* removed GenRes from makefile\r\n\r\nLIBRARY\r\n* Sprite Engine:\r\n - fixed sprite attribut update for non visible sprite\r\n - fixed sprite list update in certain condition\r\n* Sound:\r\n - moved XGM driver method in a specific unit (xgm.c)\r\n - added XGM_getElapsed(..) method to retrieve elapsed XGM music playing time (in number of frame)\r\n - added XGM_setLoopNumber(..) to set the wanted number of loop in XGM music play.\r\n - added interrupt protection for Z80 access\r\n* Maths:\r\n - reverted fix32Mul() and fix32Div() to previous version to avoid cumulative error\r\n - added getApproximatedLog2(..) method for fast Log2 calculation (approximated)\r\n - added getLog2Int(..) method for integer Log2 calculation\r\n* Misc:\r\n - moved QSort methods to tools\r\n - added generic qsort with custom comparator callback\r\n* VDP: more flexible VRAM tilemap configuration (window plan don't have to be first map).\r\n* Bitmap mode: can now set bitmap mode in window plan\r\n* changed to MIT license\r\n* refactoring\r\n\r\nSAMPLE\r\n* Bench: added sprite donut animation test.\r\n\r\n\r\nSGDK 1.21 (May 2016)\r\n--------------------\r\n\r\nLIBRARY\r\n* SPRITE: fixed a bug causing corrupted sprite after SPR_release(..) operation\r\n* TOOLS: reintroduced zlib_unpack(..) method (accidentally removed from header)\r\n\r\nSAMPLE\r\n* Bench:\r\n - fixed a bug causing address error on real hardware during 'Sprite test'.\r\n - added 2 tests in 'BG test'\r\n\r\n\r\nSGDK 1.2 (May 2016)\r\n-------------------\r\n\r\nDOCUMENTATION\r\n* several update and fixes here and there (some tags were not correctly recognized in later doxygen version).\r\n\r\nCOMPILER\r\n* Rescomp: updated to version 1.5 (with updated documentation)\r\n - updated SPRITE resource compilation to the new SGDK Sprite structures.\r\n - fixed minor issue on IMAGE resource packing.\r\n - now using constants for sound driver (less confusing, got annoying bug because of that).\r\n - changed header 'define' name generation to avoid conflict between 2 identical named file.\r\n - fixed a bug in tilemap optimization for flipped tiles.\r\n - removed all packers not anymore used in SGDK.\r\n - minor change to XGM resource to support extra parameter\r\n - fixed a minor bug in sprite structure definition\r\n* XGMTool: updated to version 1.64\r\n - major structure changes for faster conversion / optimization operations\r\n - improved VGM to XGM conversion.\r\n - added options to disable some PCM auto processing\r\n - new options available to handle specific case and improve conversion process\r\n - added GD3 tag support.\r\n - better handling of PAL/NTSC timing\r\n - fixed pal information lost during XGC conversion.\r\n - more accurate loop position\r\n - fixed a minor issue in offset calculation.\r\n - fixed VGM loop information export (when using VGM optimization)\r\n* WavToRaw:\r\n - fix 64-bit issues, it is still not endian safe.\r\n - check for read errors.\r\n* Appack: minor fix for silent parameter.\r\n* Added new custom LZ4W packer (require Java to be installed).\r\n* Removed GenRes tool (not anymore used and can confuse with rescomp).\r\n* added GDB tool (not yet really used yet)\r\n* Separated 'debug' and 'release' library build for easier profile switch.\r\n\r\nLIBRARY\r\n* BITMAP:\r\n - allow to change the plan used for bitmap rendering\r\n - added buffer preservation option (severe impact on performance)\r\n - fixed minors issues on reset/initialization process\r\n* DMA: added new DMA queue system in 'dma' unit, you can consider 'vdp_dma' unit as deprecated (still provided for backward compatibility).\r\n - we can now limit the max transfer capabilities in a single frame with DMA_setMaxTransferSize(..)\r\n - can now define the DMA queue size with DMA_init(..) method.\r\n - added DMA_setIgnoreOverCapacity(..) to change DMA strategy when reaching max capacity.\r\n* GRAPHIC:\r\n - added news methods for allocation and compression stuff (see TOOLS section)\r\n - added dynamic VRAM allocation ('vram' unit which replace 'tilecache' unit)\r\n* PALETTE:\r\n - fixed RGB24_TO_VDPCOLOR so it does what it says.\r\n - better palette fading using rounding.\r\n - fixed issue using sync fading locking interrupts (can cause XGM music lag).\r\n* MATHS:\r\n - added abs(..) method.\r\n - fixed fix32ToRoundedInt() and fix32Round() defines (added parenthesis around)\r\n - replaced distance_approx(..) by getApproximatedDistance(..)\r\n - changed fix32 div/mul calculation strategy for better value preservation\r\n* MEMORY:\r\n - added MEM_getAllocated() to return current dynamically allocated memory.\r\n - added MEM_dump() to dump in Gend KMod console the memory allocation table\r\n* SOUND:\r\n - renamed Z80_DRIVER_4PCM_ENV --> Z80_DRIVER_4PCM\r\n* SPRITE: complete rewrite of sprite engine !\r\n - many changes including the API.\r\n - should be faster but will be more optimized in future.\r\n* STRING:\r\n - added isdigit(c), strnlen(..) and the very useful sprintf(..) ma\r\n - added strncpy(..) method.\r\n - replaced strreplace(..) --> strreplacechar(..)\r\n - fixed fix32ToStr(..) and fix16ToStr(..) methods\r\n* SYSTEM:\r\n - tried to more more compatible with default GCC stdint.h definitions\r\n - added SYS_setVIntPreCallback(..) so you can have your method called at VInt before any internal SGDK stuff are proceed.\r\n - added SYS_isNTSC() and SYS_isPAL() methods for easy system determination.\r\n - minor fix on SP register initialization (preserve value set in vector table)\r\n - added SYS_hardReset() to force hard reset.\r\n* TOOLS:\r\n - added new LZ4W compression (very fast unpacking but average compression level)\r\n - removed RLE, RLE_MAP and UFTC compression (LZ4W performs better in almost all cases).\r\n - removed UnpackEx(..) method (useless now).\r\n - added setRandomSeed(u16 seed) to initialize randomizer.\r\n* VDP:\r\n - renamed WPLAN / WINDOW / VDP_WINDOW --> VDP_PLAN_WINDOW\r\n - renamed APLAN --> VDP_PLAN_A\r\n - renamed BPLAN --> VDP_PLAN_B\r\n - renamed SLIST / VDP_SPRITE_LIST --> VDP_SPRITE_TABLE\r\n - renamed HSCRL / VDP_SCROLL_H --> VDP_HSCROLL_TABLE\r\n - added planWidth / planHeight to replace VDP_getPlanWidth() / VDP_getPlanHeigth() for faster internal SGDK calculations.\r\n - added windowWidth / windowHeight for faster internal SGDK calculations.\r\n - added VDP_setWindowHPos(..) and VDP_setWindowVPos(..) methods to set window positions.\r\n - fixed a bug with VDP_setBPlanAddress(..) method.\r\n* VDP BG/TILE:\r\n - replaced VDP_PLAN_A / VDP_PLAN_B constants by PLAN_A / PLAN_B in some methods.\r\n - some methods now support PLAN_WINDOW parameter.\r\n - added VDP_clearTextAreaBG(..), VDP_clearTextLineBG(..), VDP_clearTextArea(..) methods.\r\n - modified VDP_drawTextBG(..) method.\r\n - others minors changes.\r\n* VDP SPRITE: major rewrite of 'vdp_sprite' unit (require project modifications) !\r\n - replaced SpriteDef structure by VDPSprite structure (fit better hardware structure).\r\n - added dynamic allocation of hardware sprite:\r\n   VDP_allocateSprites(..), VDP_releaseSprites(..), VDP_getAvailableSprites()\r\n - VDP_updateSprites(..) can now use DMA queue.\r\n - many others changes.\r\n* XGM driver:\r\n - better handling of main BUS contention with DMA\r\n - added methods to improve BUS contention when using PSG sound in music.\r\n - fixed PCM play status when PCM is used from XGM music.\r\n - minor fix in driver code for better music frame sync.\r\n - better pause/resume support.\r\n - music sync is now handled on 68000 side for more flexibility (adjustable tempo).\r\n* Z80:\r\n - modified writeYM macros\r\n* memory usage optimizations.\r\n\r\nSAMPLE:\r\n* Bench: added new sample for general test and benchmarking.\r\n* Sound:\r\n - minors changes about Z80 load information for XGM driver.\r\n* Sprite:\r\n - added basic enemies (no collision yet)\r\n - added basic SFX\r\n - updated to last SGDK\r\n - some refactoring\r\n\r\n\r\nSGDK 1.12 (March 2015)\r\n----------------------\r\n\r\nCOMPILER\r\n* XGMTool:\r\n - minors changes and fixes. \r\n\r\nLIBRARY\r\n* SPRITE:\r\n - added VDP_resetSpritesDirect() method. \r\n* SOUND:\r\n - minor fix to XGM driver (PCM in music was wrong in some case). \r\n\r\n\r\nSGDK 1.11 (December 2014)\r\n-------------------------\r\n\r\n* CONTROLLER:\r\n - fixed small issue in joystick code (Chilly Willy). \r\n* SOUND:\r\n - added Z80 CPU load information in XGM driver (experimental).\r\n* Fixed small issue in joystick code (Chilly Willy).\r\n\r\n\r\nSGDK 1.10 (December 2014)\r\n-------------------------\r\n\r\nCOMPILER\r\n* XGMTool:\r\n - removed DAC enabled command (automatically handle by the XGM driver).\r\n - added DAC enabled state (XGM driver uses it when no PCM are playing).\r\n - now uses the VGM 1.60 'stream id' information to allow multi PCM channel for XGM conversion.\r\n   Note that each channel has its own priority as VGM music does not contains PCM priority information.\r\n\r\nLIBRARY\r\n* VDP:\r\n - VDP_fade(..) method now automatically disables interrupts if needed.\r\n* SPRITE:\r\n - minor optimization in the Sprite Engine to quickly discard disabled sprites (visibility forced to off).\r\n* SOUND:\r\n - added automatic DAC enabled control (XGM driver).\r\n - fixed issue with music pause operation on real hardware (XGM driver).\r\n - minor tweak to reduce a bit the size of the Z80 drivers.\r\n - removed Z80_DRIVER_4PCM which is useless (use Z80_DRIVER_4PCM_ENV driver instead).\r\n* CONTROLLER:\r\n - added Sega Phaser support (Chilly Willy).\r\n* SYSTEM:\r\n - disable library debug info.\r\n* SAMPLE:\r\n - updated 'Joy' sample to add Phaser test (Chilly Willy).\r\n - updated 'Sound' sample to remove Z80_DRIVER_4PCM test and add an example of the MVS driver PCM SFX.\r\n\r\n\r\nSGDK 1.01 (November 2014)\r\n-------------------------\r\n\r\nCOMPILER\r\n* fixed bugs in XGMTool.\r\n* removed linear interpolation when converting WAV file.\r\n* others minors changes.\r\n\r\n\r\nSGDK 1.00 (November 2014)\r\n-------------------------\r\n\r\nCOMPILER\r\n* Rescomp:\r\n - added support to XGM resource in rescomp.\r\n* added xgmtool to convert VGM into XGM and compile XGM file.\r\n* removed Genitile tool sources.\r\n* updated wavtoraw to support sample interpolation.\r\n\r\nLIBRARY\r\n* VDP:\r\n - added VDP_setScanMode(u16 mode) method to change the interlaced mode.\r\n - added VDP_interruptFade() method to interrupt async palette fading.\r\n* SPRITE:\r\n - fixed a bug with SPR_init(..) method when using same definition, sometime timer could be not reseted and then animation is not working anymore.\r\n - fixed declaration of VDP_setSprite(..) / VDP_setSpriteDirect(..) / VDP_setSpritePosition(..) methods.\r\n* SOUND:\r\n - Z80 memory is cleared before loading a custom driver.\r\n - added Z80_read(..) and Z80_write(..) methods for simple Z80 RAM read/write operations.\r\n - added XGM driver methods:\r\n   u8 SND_isPlaying_XGM();\r\n   void SND_startPlay_XGM(const u8 *song);\r\n   void SND_stopPlay_XGM();\r\n   void SND_resumePlay_XGM();\r\n   u8 SND_isPlayingPCM_XGM(const u16 channel_mask);\r\n   void SND_setPCM_XGM(const u8 id, const u8 *sample, const u32 len);\r\n   void SND_setPCMFast_XGM(const u8 id, const u8 *sample, const u32 len);\r\n   void SND_startPlayPCM_XGM(const u8 id, const u8 priority, const u16 channel);\r\n   void SND_stopPlayPCM_XGM(const u16 channel);\r\n* MATH:\r\n - minor fix in min/max defines.\r\n* CONTROLLER:\r\n - fixed declaration of JOY_readJoypadX/Y(..) methods (they should return s16 and not u16)\r\n* SYSTEM:\r\n - sega.s and rom_head.c files are now copied into the 'src/boot' project folder so they can easily be customized per project.\r\n* SAMPLE:\r\n - modified sound sample to add XGM driver example.\r\n* some fixes in the doxygen documentation.\r\n* others changes and improvements.\r\n\r\n\r\nSGDK 0.96d (june 2014)\r\n----------------------\r\n\r\nLIBRARY\r\n* removed direct VRam Map data unpacking as it was buggy.\r\n\r\n\r\nSGDK 0.96c (june 2014)\r\n----------------------\r\n\r\nCOMPILER\r\n* Rescomp:\r\n - fixed some issues on compression.\r\n - now accept string to define which compression to use (AUTO, APLIB, RLE) in resource definition. \r\n\r\nLIBRARY\r\n* minors changes to Doxygen documentation. \r\n\r\n\r\nSGDK 0.96 (may 2014)\r\n--------------------\r\n\r\nCOMPILER\r\n* Rescomp:\r\n - improved BMP image support.\r\n - byte data are now output in word format to avoid the GCC bug (compilation with \"-g\" flag fails when byte data is encountered).\r\n - fixed issue on empty sprite animation detection.\r\n - fixed path separator issue on old windows system.\r\n - fixed compilation issues on unix system.\r\n* Makefile:\r\n - Added \"release\" and \"debug\" target to makefile (default is \"release\").\r\n  \"debug\" target allow you to use GDB interactive debugger through emulator supporting it.\r\n* added appack tool sources code (compatibility for linux system).\r\n* some cleanup in bintos tool (removed the useless sizealign command done by sizebnd tool).\r\n\r\nLIBRARY\r\n* VDP:\r\n - fixed palette fading methods where the last frame colors weren't always correct.\r\n - VDP_drawImage(..) and VDP_drawBitmap(..) now use dynamic VRAM tile index so they does not erase anymore the previous drawn image.\r\n   'curTileInd' variable which contains the VRAM tile index where next tile will be uploaded is public.\r\n* TILE:\r\n - fixed somes bugs in the tile cache engine.\r\n - removed the MEM_free(..) call from the VInt callback (tile cache engine).\r\n   So we don't need anymore to disable interrupts at each memory allocation operation for safety ;)\r\n* SPRITE:\r\n - fixed somes bugs in the sprite engine. \r\n - added SPR_setAlwaysVisible(..) and SPR_setNeverVisible(..) to force (not) visibility on sprite (sprite engine)\r\n* BITMAP:\r\n - minor performance improvement on the BMP_drawPolygon(..) method.\r\n* SOUND:\r\n - fixed YM2612 write methods (can have issue on MD2 system).\r\n* DMA:\r\n - fixed VRam Copy DMA.\r\n* MATH:\r\n- fixed 2D projection calculation in M3D_project_xxx(..) methods.\r\n  Now the camera distance is correctly taken in account for the final projection (adding a minor impact on performance).\r\n* SYSTEM:\r\n - fixed soft reset issues.\r\n* TIMER:\r\n - fixed a minor issue with getTime(..) method.\r\n - waitSubTick(..) is now more accurate when called from V-Interrupt code.\r\n* SAMPLE:\r\n - minors changes and improvements on the Sonic Sprite sample.\r\n - minors changes to 3D cube flat sample.\r\n* DEBUG:\r\n - added some KDebug log methods (KLog, KLog_Uxx, KLog_Sxx...)\r\n* added strcmp(..) method.\r\n* others changes and improvements.\r\n\r\n\r\nSGDK 0.95 (feb 2014)\r\n--------------------\r\n\r\nCOMPILER\r\n* Major change on resource compilation:\r\n  A new resource compiler tool (rescomp) is used to compile all resource files.\r\n  It support many type of resources as BMP, PNG, WAV, PCM, VGM, TFM..\r\n  Read the rescomp.txt file to have more informations about it and look in the 'sound' and 'sprite' sample example.\r\n  You can also convert your old project by using the \"rescomp -convert\" command on the project folder to convert.\r\n- added appack tool.\r\n- minor fix in wavtoraw tool.\r\n\r\nLIBRARY\r\n* added GFX compression support (see tools.h file for doxygen documentation).\r\n* VDP:\r\n - added VDP_getBackgroundColor() and VDP_setBackgroundColor(..) methods.\r\n - added VDP_get/setTextPlan(), VDP_get/setTextPalette() and VDP_get/setTextPriority() methods to change text drawing properties.\r\n - added VDP_drawBitmap(..) and VDP_drawBitmapEx(..) methods to draw Bitmap resource.\r\n - added VDP_drawImage(..) and VDP_drawImageEx(..) methods to draw Image resources.\r\n - added VDP_loadTileSet(..) method to load TileSet resource.\r\n - added VDP_setMap(..) and VDP_setMapEx(..) methods to load Map resources.\r\n - lot of refactoring in the setTileMap methods...\r\n - some tweaks.\r\n* TILE:\r\n - added new tile cache engine for easier tile allocation in VRAM.\r\n   See the tile_cache.h file for doxygen documentation.\r\n* SPRITE:\r\n - added sprite engine for easier sprite manipulation.\r\n   See the sprite_eng.h file for doxygen documentation and the included \"sprite\" sample for an example.\r\n* SOUND:\r\n - added TFC_isPlaying() command for the 68k TFM driver.\r\n - fixed issue with consecutive play command on TFM Z80 driver.\r\n - Improved VGM driver (thanks to kubilus1 and sigflup).\r\n   You can now pause, resume music and even better play PCM SFX !\r\n - now clear Z80 memory on driver loading to avoid any problems with var initialization.\r\n* DMA:\r\n  - minor change to VDP_doDMAEx(..) method, be careful if you use this method, the last parameter changed.\r\n* JOY:\r\n - added JOY_waitPressTime() and JOY_waitPressBtnTime() methods.\r\n - JOY_waitPressBtn() and JOY_waitPress() now return button pressed info.\r\n* MEMORY:\r\n - fixed a minor buf with dynamic memory allocation.\r\n* SYSTEM:\r\n - added SYS_disableInts() and SYS_enableInts() methods.\r\n - added SYS_isInInterrupt() to detect if we are in an interrupt callback.\r\n - added SYS_getAndSetInterruptMaskLevel(..) method to \"atomically\" get and set interrupt mask level.\r\n - added SYS_die(..) for fatal error handling.\r\n* library font is now included as an image.\r\n* added some logs for easier debugging (KDebug message).\r\n* many others smalls improvements.\r\n* lot of refactoring.\r\n\r\n\r\nSGDK 0.94 (feb 2013):\r\n---------------------\r\n\r\n* Major rewrite of the Bitmap engine:\r\n - Fixed 256x160 resolution.\r\n - Removed all specifics flags as it now always use deferred flip operation with extended blank.\r\n - Simpler and easier to use.\r\n - Better performance (20 FPS in NTSC, 25 FPS in PAL).\r\n - Backface culling now directly handled in the BMP_drawPolygon(..) method.\r\n - Removed useless FF BMP engine (too complex, incomplete..)\r\n - Many others changes you will discover :)\r\n* Added \"Bitmap\" structure for better bitmap handling.\r\n  SGDK automatically convert 16 colors bitmap images to \"Bitmap\".\r\n* Major rewrite of Maths3D engine:\r\n  - Added many 3D related structures (as matrix, transform..).\r\n  - More flexibility.\r\n  - Improved performance (not much).\r\n* added DMA capability to VDP_setHorizontalScrollxxx(..) / VDP_setVerticalScrollTile(..) functions.\r\n* Added VDP_doDMAEx(..) so we can specify if we modify the VRam step.\r\n* Refactored palette functions.\r\n* Fixed QSort function.\r\n* Removed useless VRAM table (eat rom space for minor speed boost).\r\n* Minors fixes/tweaks in memset and memcpy functions.\r\n* Updated WavToRaw tool (now support any output rate).\r\n* Added Genitile 1.7 sources.\r\n* Minors tweaks on makefile.\r\n* Fixed a minor issue in rom_head (Thanks Chilly Willy).\r\n* Updated demo samples.\r\n* Others minors changes or improvements."
        },
        {
          "name": "common.mk",
          "type": "blob",
          "size": 0.9228515625,
          "content": "# Common definitions\n\nBIN := $(GDK)/bin\nLIB := $(GDK)/lib\n\nSRC_LIB := $(GDK)/src\nRES_LIB := $(GDK)/res\nINCLUDE_LIB := $(GDK)/inc\n\nifeq ($(OS),Windows_NT)\n\t# Native Windows\n\tSHELL := $(BIN)/sh\n\tRM := $(BIN)/rm\n\tCP := $(BIN)/cp\n\tMKDIR := $(BIN)/mkdir\n\n\tAR := $(BIN)/ar\n\tCC := $(BIN)/gcc\n\tLD:= $(BIN)/ld\n\tNM:= $(BIN)/nm\n\tOBJCPY := $(BIN)/objcopy\n\tCONVSYM := $(BIN)/convsym\n\tASMZ80 := $(BIN)/sjasm\n\tMACCER := $(BIN)/mac68k\n\tBINTOS := $(BIN)/bintos\n\tLTO_PLUGIN := --plugin=liblto_plugin.dll\n\tLIBGCC := $(LIB)/libgcc.a\nelse\n\t# Native Linux and Docker\n\tPREFIX ?= m68k-elf-\n\tSHELL := sh\n\tRM := rm\n\tCP := cp\n\tMKDIR := mkdir\n\n\tAR := $(PREFIX)ar\n\tCC := $(PREFIX)gcc\n\tLD := $(PREFIX)ld\n\tNM := $(PREFIX)nm\n\tOBJCPY := $(PREFIX)objcopy\n\tCONVSYM := convsym\n\tASMZ80 := sjasm\n\tMACCER := mac68k\n\tBINTOS := bintos\n\tLTO_PLUGIN :=\n\tLIBGCC := -lgcc\nendif\n\nJAVA := java\nECHO := echo\nSIZEBND := $(JAVA) -jar $(BIN)/sizebnd.jar\nRESCOMP := $(JAVA) -jar $(BIN)/rescomp.jar\n"
        },
        {
          "name": "deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "inc",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "license.txt",
          "type": "blob",
          "size": 1.06640625,
          "content": "MIT License - Copyright (c) 2019 Stephane Dallongeville\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"),\r\nto deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\nand/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE\r\nOR OTHER DEALINGS IN THE SOFTWARE.\r\n"
        },
        {
          "name": "makefile.gen",
          "type": "blob",
          "size": 6.330078125,
          "content": "MAKEFILE_DIR := $(dir $(lastword $(MAKEFILE_LIST)))\r\nMAKEFILE_DIR := $(subst \\,/,$(MAKEFILE_DIR))\r\n\r\nifneq (\"$(wildcard $(MAKEFILE_DIR)bin/rescomp.jar)\",\"\")\r\n    GDK := $(patsubst %/,%,$(MAKEFILE_DIR))\r\nendif\r\n\r\ninclude $(GDK)/common.mk\r\n\r\nSRC := src\r\nRES := res\r\nINCLUDE := inc\r\nOUT := out\r\n\r\nSRC_C= $(wildcard *.c)\r\nSRC_C+= $(wildcard $(SRC)/*.c)\r\nSRC_C+= $(wildcard $(SRC)/*/*.c)\r\nSRC_C+= $(wildcard $(SRC)/*/*/*.c)\r\nSRC_C:= $(filter-out $(SRC)/boot/rom_head.c,$(SRC_C))\r\nifeq ($(SRC_C),)\r\nSRC_C=$(SRC)/main.c\r\nendif\r\nSRC_S= $(wildcard *.s)\r\nSRC_S+= $(wildcard $(SRC)/*.s)\r\nSRC_S+= $(wildcard $(SRC)/*/*.s)\r\nSRC_S+= $(wildcard $(SRC)/*/*/*.s)\r\nSRC_S:= $(filter-out $(SRC)/boot/sega.s,$(SRC_S))\r\nSRC_ASM= $(wildcard *.asm)\r\nSRC_ASM+= $(wildcard $(SRC)/*.asm)\r\nSRC_ASM+= $(wildcard $(SRC)/*/*.asm)\r\nSRC_ASM+= $(wildcard $(SRC)/*/*/*.asm)\r\nSRC_S80= $(wildcard *.s80)\r\nSRC_S80+= $(wildcard $(SRC)/*.s80)\r\nSRC_S80+= $(wildcard $(SRC)/*/*.s80)\r\nSRC_S80+= $(wildcard $(SRC)/*/*/*.s80)\r\n\r\nRES_C= $(wildcard $(RES)/*.c)\r\nRES_S= $(wildcard $(RES)/*.s)\r\nRES_RES= $(wildcard *.res)\r\nRES_RES+= $(wildcard $(RES)/*.res)\r\n\r\nRES_RS= $(RES_RES:.res=.rs)\r\nRES_H= $(RES_RES:.res=.h)\r\nRES_DEP= $(RES_RES:.res=.d)\r\nRES_DEPS= $(addprefix $(OUT)/, $(RES_DEP))\r\n\r\nOBJ= $(RES_RES:.res=.o)\r\nOBJ+= $(RES_S:.s=.o)\r\nOBJ+= $(RES_C:.c=.o)\r\nOBJ+= $(SRC_S80:.s80=.o)\r\nOBJ+= $(SRC_ASM:.asm=.o)\r\nOBJ+= $(SRC_S:.s=.o)\r\nOBJ+= $(SRC_C:.c=.o)\r\nOBJS:= $(addprefix $(OUT)/, $(OBJ))\r\n\r\nDEPS:= $(OBJS:.o=.d)\r\n\r\nLST:= $(SRC_C:.c=.lst)\r\nLSTS:= $(addprefix $(OUT)/, $(LST))\r\n\r\nINCS:= -I$(INCLUDE) -I$(SRC) -I$(RES) -I$(INCLUDE_LIB) -I$(RES_LIB)\r\nDEFAULT_FLAGS= $(EXTRA_FLAGS) -DSGDK_GCC -m68000 -Wall -Wextra -Wno-shift-negative-value -Wno-main -Wno-unused-parameter -fno-builtin -ffunction-sections -fdata-sections -fms-extensions $(INCS) -B$(BIN)\r\nFLAGSZ80:= -i$(SRC) -i$(INCLUDE) -i$(RES) -i$(SRC_LIB) -i$(INCLUDE_LIB) -i$(INCLUDE_LIB)/snd\r\n\r\nall: release\r\ndefault: release\r\nDefault: release\r\n\r\nDebug: debug\r\nRelease: release\r\nAsm: asm\r\n\r\n#release: FLAGS= $(DEFAULT_FLAGS) -Os -fomit-frame-pointer -fuse-linker-plugin -flto\r\nrelease: FLAGS= $(DEFAULT_FLAGS) -O3 -fuse-linker-plugin -fno-web -fno-gcse -fomit-frame-pointer -flto -flto=auto -ffat-lto-objects\r\nrelease: CFLAGS= $(FLAGS)\r\nrelease: AFLAGS= $(FLAGS)\r\nrelease: LIBMD= $(LIB)/libmd.a\r\nrelease: $(OUT)/rom.bin $(OUT)/symbol.txt\r\nrelease: padROM\r\n.PHONY: release padROM\r\n\r\n#release: $(info $$var is [${SRC_C}])\r\n\r\ndebug: FLAGS= $(DEFAULT_FLAGS) -O1 -DDEBUG=1\r\ndebug: CFLAGS= $(FLAGS) -ggdb -g\r\ndebug: AFLAGS= $(FLAGS)\r\ndebug: LIBMD= $(LIB)/libmd_debug.a\r\ndebug: $(OUT)/rom.bin $(OUT)/rom.out $(OUT)/symbol.txt\r\ndebug: injectSymbolsInROM\r\ndebug: padROM\r\n.PHONY: debug injectSymbolsInROM padROM\r\n\r\nasm: FLAGS= $(DEFAULT_FLAGS) -O3 -fuse-linker-plugin -fno-web -fno-gcse -fomit-frame-pointer -S\r\nasm: CFLAGS= $(FLAGS)\r\nasm: AFLAGS= $(FLAGS)\r\nasm: LIBMD= $(LIB)/libmd.a\r\nasm: $(LSTS)\r\n.PHONY: asm\r\n\r\n-include $(DEPS)\r\n\r\ndefine MAIN_C_CONTENT\r\n#include \"genesis.h\"\r\n\r\nint main(bool hardReset){\r\n    VDP_drawText(\"Hello SGDK!\", 12, 12);\r\n    while(TRUE) { SYS_doVBlankProcess(); }\r\n    return 0;\r\n}\r\nendef\r\n\r\n$(SRC)/main.c: export MAIN_C_CONTENT:=$(MAIN_C_CONTENT)\r\n$(SRC)/main.c:\r\n\t$(MKDIR) -p $(dir $@)\r\n\t$(ECHO) \"$${MAIN_C_CONTENT}\" > $@\r\n\r\n# include ext.mk if it exists (better to do it after release rule definition)\r\nifneq (\"$(wildcard $(GDK)/ext.mk)\",\"\")\r\n    include $(GDK)/ext.mk\r\nendif\r\n\r\ncleantmp:\r\n\t$(RM) -f $(RES_RS)\r\n.PHONY: cleantmp\r\n\r\ncleandep:\r\n\t$(RM) -f $(DEPS)\r\n.PHONY: cleandep\r\n\r\ncleanlst:\r\n\t$(RM) -f $(LSTS)\r\n.PHONY: cleanlst\r\n\r\ncleanres: cleantmp\r\n\t$(RM) -f $(RES_H) $(RES_DEP) $(RES_DEPS)\r\n.PHONY: cleanres\r\n\r\ncleanobj:\r\n\t$(RM) -f $(OBJS) $(OUT)/sega.o $(OUT)/rom_head.bin $(OUT)/rom_head.o $(OUT)/rom.out\r\n.PHONY: cleanobj\r\n\r\nclean: cleanobj cleanres cleanlst cleandep\r\n\t$(RM) -f $(OUT)/out.lst $(OUT)/cmd_ $(OUT)/symbol.txt $(OUT)/rom.nm $(OUT)/rom.wch $(OUT)/rom.bin\r\n.PHONY: clean\r\n\r\ncleanrelease: clean\r\n.PHONY: cleanrelease\r\n\r\ncleandebug: clean\r\n.PHONY: cleandebug\r\n\r\ncleanasm: cleanlst\r\n.PHONY: cleanasm\r\n\r\ncleandefault: clean\r\ncleanDefault: clean\r\n.PHONY: cleandefault cleanDefault\r\n\r\ncleanRelease: cleanrelease\r\ncleanDebug: cleandebug\r\ncleanAsm: cleanasm\r\n.PHONY: cleanRelease cleanDebug cleanAsm\r\n\r\npadROM:\t$(OUT)/rom.bin\r\n\t$(SIZEBND) $(OUT)/rom.bin -sizealign 131072 -checksum\r\n\r\ninjectSymbolsInROM:\t$(OUT)/rom.bin $(OUT)/rom.out $(OUT)/symbol.txt\r\n\t$(CONVSYM) $(OUT)/symbol.txt $(OUT)/rom.bin -in txt -inopt \" /fmt='%X %*[TtBbCcDd] %511s' /offsetFirst+\" -range 0 FFFFFF -a -ref @MDDBG__SymbolDataPtr\r\n\r\n$(OUT)/rom.bin: $(OUT)/rom.out $(OUT)/symbol.txt\r\n\t$(OBJCPY) -O binary $(OUT)/rom.out $(OUT)/rom.bin\r\n\r\n$(OUT)/symbol.txt: $(OUT)/rom.out\r\n\t$(NM) $(LTO_PLUGIN) -nl $(OUT)/rom.out > $(OUT)/symbol.txt\r\n\r\n$(OUT)/rom.out: $(OUT)/sega.o $(OUT)/cmd_ $(LIBMD)\r\n\t$(MKDIR) -p $(dir $@)\r\n\t$(CC) -m68000 -B$(BIN) -n -T $(GDK)/md.ld -nostdlib $(OUT)/sega.o @$(OUT)/cmd_ $(LIBMD) $(LIBGCC) -o $(OUT)/rom.out -Wl,--gc-sections -flto -flto=auto -ffat-lto-objects\r\n\t$(RM) $(OUT)/cmd_\r\n\r\n$(OUT)/cmd_: $(OBJS)\r\n\t$(MKDIR) -p $(dir $@)\r\n\t$(ECHO) \"$(OBJS)\" > $(OUT)/cmd_\r\n\r\n# NOTE: sega.s references rom_head.bin internally.\r\n$(OUT)/sega.o: $(SRC)/boot/sega.s $(OUT)/rom_head.bin\r\n\t$(CC) -x assembler-with-cpp -Wa,--register-prefix-optional,--bitwise-or $(AFLAGS) -c $(SRC)/boot/sega.s -o $@\r\n\r\n$(OUT)/rom_head.bin: $(OUT)/rom_head.o\r\n\t$(OBJCPY) -O binary $< $@\r\n\r\n$(OUT)/rom_head.o: $(SRC)/boot/rom_head.c\r\n\t$(MKDIR) -p $(dir $@)\r\n\t$(CC) $(DEFAULT_FLAGS) -c $< -o $@\r\n\r\n# SRC_LIB files are \"order-only\" deps, right of the pipe.  This means we will\r\n# never overwrite the file in SRC, even if SRC_LIB is newer.\r\n\r\n$(SRC)/boot/sega.s: | $(SRC_LIB)/boot/sega.s\r\n\t$(MKDIR) -p $(dir $@)\r\n\t$(CP) $| $@\r\n\r\n$(SRC)/boot/rom_head.c: | $(SRC_LIB)/boot/rom_head.c\r\n\t$(MKDIR) -p $(dir $@)\r\n\t$(CP) $| $@\r\n\r\n$(OUT)/%.lst: %.c\r\n\t$(MKDIR) -p $(dir $@)\r\n\t$(CC) $(CFLAGS) -c $< -o $@\r\n\r\n$(OUT)/%.o: %.c\r\n\t$(MKDIR) -p $(dir $@)\r\n\t$(CC) $(CFLAGS) -MMD -c $< -o $@\r\n\r\n$(OUT)/%.o: %.s\r\n\t$(MKDIR) -p $(dir $@)\r\n\t$(CC) -x assembler-with-cpp -Wa,--register-prefix-optional,--bitwise-or $(AFLAGS) -MMD -c $< -o $@\r\n\r\n$(OUT)/%.o: %.rs\r\n\t$(MKDIR) -p $(dir $@)\r\n\t$(CC) -x assembler-with-cpp -Wa,--register-prefix-optional,--bitwise-or $(AFLAGS) -c $*.rs -o $@\r\n\t$(CP) $*.d $(OUT)/$*.d\r\n\t$(RM) $*.d\r\n\r\n%.rs: %.res\r\n\t$(RESCOMP) $*.res $*.rs -dep $(OUT)/$*.o\r\n\r\n%.s: %.asm\r\n\t$(MACCER) -o $@ $<\r\n\r\n%.o80: %.s80\r\n\t$(ASMZ80) $(FLAGSZ80) $< $@ $(OUT)/out.lst\r\n\r\n%.s: %.o80\r\n\t$(BINTOS) $<\r\n"
        },
        {
          "name": "makelib.gen",
          "type": "blob",
          "size": 3.3720703125,
          "content": "MAKEFILE_DIR := $(dir $(lastword $(MAKEFILE_LIST)))\r\nMAKEFILE_DIR := $(subst \\,/,$(MAKEFILE_DIR))\r\n\r\nifneq (\"$(wildcard $(MAKEFILE_DIR)bin/rescomp.jar)\",\"\")\r\n    GDK := $(patsubst %/,%,$(MAKEFILE_DIR))\r\nendif\r\n\r\ninclude $(GDK)/common.mk\r\n\r\nSRC_LIB_C = $(wildcard $(SRC_LIB)/*.c)\r\nSRC_LIB_C += $(wildcard $(SRC_LIB)/*/*.c)\r\nSRC_LIB_C += $(wildcard $(SRC_LIB)/*/*/*.c)\r\nSRC_LIB_C := $(filter-out $(SRC_LIB)/boot/rom_head.c, $(SRC_LIB_C))\r\nSRC_LIB_S = $(wildcard $(SRC_LIB)/*.s)\r\nSRC_LIB_S += $(wildcard $(SRC_LIB)/*/*.s)\r\nSRC_LIB_S += $(wildcard $(SRC_LIB)/*/*/*.s)\r\nSRC_LIB_S := $(filter-out $(SRC_LIB)/boot/sega.s, $(SRC_LIB_S))\r\nSRC_LIB_S80 = $(wildcard $(SRC_LIB)/*.s80)\r\nSRC_LIB_S80 += $(wildcard $(SRC_LIB)/*/*.s80)\r\nSRC_LIB_S80 += $(wildcard $(SRC_LIB)/*/*/*.s80)\r\n\r\nRES_LIB_RES := $(wildcard $(RES_LIB)/*.res)\r\n\r\nOBJ_LIB = $(RES_LIB_RES:.res=.o)\r\nOBJ_LIB += $(SRC_LIB_S80:.s80=.o)\r\nOBJ_LIB += $(SRC_LIB_S:.s=.o)\r\nOBJ_LIB += $(SRC_LIB_C:.c=.o)\r\n\r\nDEP_LIB := $(OBJ_LIB:.o=.d)\r\n\r\nLST_LIB := $(SRC_LIB_C:.c=.lst)\r\n\r\nINCS_LIB := -I$(INCLUDE_LIB) -I$(SRC_LIB) -I$(RES_LIB)\r\nDEFAULT_FLAGS_LIB := $(EXTRA_FLAGS) -DSGDK_GCC -m68000 -Wall -Wextra -Wno-array-bounds -Wno-shift-negative-value -Wno-unused-parameter -fno-builtin -fms-extensions -ffunction-sections -fdata-sections $(INCS_LIB) -B$(BIN)\r\nFLAGSZ80_LIB := -i$(SRC_LIB) -i$(INCLUDE_LIB) -i$(INCLUDE_LIB)/snd\r\n\r\nall: release\r\ndefault: release\r\nDefault: release\r\n\r\nDebug: debug\r\nRelease: release\r\nAsm: asm\r\n\r\n#release: FLAGS_LIB= $(DEFAULT_FLAGS_LIB) -Os -fomit-frame-pointer -fuse-linker-plugin -flto -flto=auto -ffat-lto-objects\r\nrelease: FLAGS_LIB= $(DEFAULT_FLAGS_LIB) -O3 -fuse-linker-plugin -fno-web -fno-gcse -fomit-frame-pointer -flto -flto=auto -ffat-lto-objects\r\nrelease: CFLAGS_LIB= $(FLAGS_LIB)\r\nrelease: AFLAGS_LIB= $(FLAGS_LIB)\r\nrelease: $(LIB)/libmd.a\r\n\r\ndebug: FLAGS_LIB= $(DEFAULT_FLAGS_LIB) -O1 -DDEBUG=1\r\ndebug: CFLAGS_LIB= $(FLAGS_LIB) -ggdb\r\ndebug: AFLAGS_LIB= $(FLAGS_LIB)\r\ndebug: $(LIB)/libmd_debug.a\r\n\r\nasm: FLAGS_LIB= $(DEFAULT_FLAGS_LIB) -O3 -fuse-linker-plugin -fno-web -fno-gcse -fomit-frame-pointer -S\r\nasm: CFLAGS_LIB= $(FLAGS_LIB)\r\nasm: AFLAGS_LIB= $(FLAGS_LIB)\r\nasm: $(LST_LIB)\r\n\r\n.PHONY: clean\r\n\r\n-include $(DEP_LIB)\r\n\r\ncleanlst:\r\n\t$(RM) -f $(LST_LIB)\r\n\r\ncleandep:\r\n\t$(RM) -f $(DEP_LIB)\r\n\r\ncleanobj:\r\n\t$(RM) -f $(OBJ_LIB)\r\n\r\ncleanrelease: cleanobj cleandep cleanlst\r\n\t$(RM) -f $(LIB)/libmd.a out.lst cmd_\r\n\r\ncleandebug: cleanobj cleandep cleanlst\r\n\t$(RM) -f $(LIB)/libmd_debug.a out.lst cmd_\r\n\r\ncleanasm: cleanlst\r\n\r\nclean: cleanobj cleandep cleanlst\r\n\t$(RM) -f $(LIB)/libmd.a $(LIB)/libmd_debug.a out.lst cmd_\r\n\r\ncleanall: clean\r\ncleanAll: clean\r\ncleandefault: clean\r\ncleanDefault: clean\r\n\r\ncleanRelease: cleanrelease\r\ncleanDebug: cleandebug\r\ncleanAsm: cleanasm\r\n\r\n\r\n$(LIB)/libmd.a: cmd_\r\n\t$(AR) rs $(LIB)/libmd.a $(LTO_PLUGIN) @cmd_\r\n\t$(RM) cmd_\r\n\r\n$(LIB)/libmd_debug.a: cmd_\r\n\t$(AR) rs $(LIB)/libmd_debug.a $(LTO_PLUGIN) @cmd_\r\n\t$(RM) cmd_\r\n\r\ncmd_ : $(OBJ_LIB)\r\n\t$(ECHO) \"$(OBJ_LIB)\" > cmd_\r\n\r\n\r\n%.lst: %.c\r\n\t$(CC) $(CFLAGS_LIB) -c $< -o $@\r\n\r\n%.o: %.c\r\n\t$(CC) $(CFLAGS_LIB) -MMD -c $< -o $@\r\n\r\n%.o: %.s\r\n\t$(CC) -x assembler-with-cpp -Wa,--register-prefix-optional,--bitwise-or -MMD $(AFLAGS_LIB) -c $< -o $@\r\n\r\n%.o: %.rs\r\n\t$(CC) -x assembler-with-cpp -Wa,--register-prefix-optional,--bitwise-or $(AFLAGS_LIB) -c $*.rs -o $@\r\n\r\n%.rs: %.res\r\n\t$(RESCOMP) $*.res $*.rs -dep $*.o\r\n\r\n%.o80: %.s80\r\n\t$(ASMZ80) $(FLAGSZ80_LIB) $< $@ out.lst\r\n\r\n%.s: %.o80\r\n\t$(BINTOS) $<\r\n"
        },
        {
          "name": "md.ld",
          "type": "blob",
          "size": 2.4482421875,
          "content": "OUTPUT_ARCH(m68k)\r\nSEARCH_DIR(.)\r\n/*GROUP(-lbcc -lc -lgcc)*/\r\n__DYNAMIC  =  0;\r\n\r\n/*\r\n * Setup the memory map of the SEGA Genesis.\r\n * stack grows down from high memory.\r\n *\r\n * The memory map look like this:\r\n * +--------------------+ <- low memory\r\n * | .text              |\r\n * |        _etext      |\r\n * |        ctor list   | the ctor and dtor lists are for\r\n * |        dtor list   | C++ support\r\n * +--------------------+\r\n * .                    .\r\n * .                    .\r\n * .                    .\r\n * +--------------------+ <- 0xE0FF0000\r\n * | .data              | initialized data goes here\r\n * |        _data       |\r\n * |        _edata      |\r\n * +--------------------+\r\n * | .bss               |\r\n * |        _bstart     | start of bss, cleared by crt0\r\n * |        _bend       | start of heap, used by sbrk()\r\n * +--------------------+\r\n * .                    .\r\n * .                    .\r\n * .                    .\r\n * |        __stack     | top of stack\r\n * +--------------------+ <- 0xE1000000\r\n */\r\nMEMORY\r\n{\r\n\trom (rx) : ORIGIN = 0x00000000, LENGTH = 0xE0000000\r\n\tram : ORIGIN = 0xE0FF0000, LENGTH = 0x00010000\r\n}\r\n\r\n/*\r\n * allocate the stack to be at the top of memory, since the stack\r\n * grows down\r\n */\r\n\r\nPROVIDE (__stack = 0xE1000000);\r\n\r\n\r\nSECTIONS\r\n{\r\n  .text 0x00000000:\r\n  {\r\n    KEEP(*(.text.keepboot)) *(.text.*) *(.text)\r\n    . = ALIGN(0x4);\r\n     __CTOR_LIST__ = .;\r\n    LONG((__CTOR_END__ - __CTOR_LIST__) / 4 - 2)\r\n    *(.ctors)\r\n    LONG(0)\r\n    __CTOR_END__ = .;\r\n    __DTOR_LIST__ = .;\r\n    LONG((__DTOR_END__ - __DTOR_LIST__) / 4 - 2)\r\n    *(.dtors)\r\n     LONG(0)\r\n    __DTOR_END__ = .;\r\n\r\n    *(.rodata .rodata.*)\r\n    *(.gcc_except_table .gcc_except_table.*)\r\n\r\n    . = ALIGN(0x4);\r\n    __INIT_SECTION__ = . ;\r\n    *(.init)\r\n    SHORT (0x4E75)\t/* rts */\r\n\r\n    __FINI_SECTION__ = . ;\r\n    *(.fini)\r\n    SHORT (0x4E75)\t/* rts */\r\n\r\n    _etext = .;\r\n    *(.lit)\r\n\r\n    *(.rodata_bin)\r\n    *(.rodata_binf)\r\n  } > rom\r\n  _stext = SIZEOF (.text);\r\n\r\n  .data 0xE0FF0000 :\r\n  AT ( ADDR (.text) + SIZEOF (.text) )\r\n  {\r\n    *(.got.plt) *(.got)\r\n    *(.shdata)\r\n    *(.data .data.*)\r\n    *(.ramprog .ramprog.*)\r\n    _edata = .;\r\n  } > ram\r\n  _sdata = SIZEOF (.data);\r\n\r\n  .bss 0xE0FF0000 + SIZEOF (.data) :\r\n  {\r\n    _start = . ;\r\n    *(.shbss)\r\n    *(.bss .bss.*)\r\n    *(COMMON)\r\n    _bend = . ;\r\n  } > ram\r\n\r\n  .stab 0 (NOLOAD) :\r\n  {\r\n    *(.stab)\r\n  }\r\n\r\n  .stabstr 0 (NOLOAD) :\r\n  {\r\n    *(.stabstr)\r\n  }\r\n\r\n  .eh_frame 0 (NOLOAD) :\r\n  {\r\n    *(.eh_frame)\r\n  }\r\n}\r\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 12.716796875,
          "content": "# SGDK 2.00 (January 2024)\r\n#### Copyright 2024 Stephane Dallongeville\r\nPatreon: https://www.patreon.com/SGDK<br>\r\nGithub: https://github.com/Stephane-D/SGDK\r\n\r\n**SGDK** is a free development kit allowing development of software in **C language** for the **Sega Mega Drive**.\r\nIt contains the development library itself (with the code sources) and some custom tools used to compile resources.\r\nSGDK uses the GCC compiler (m68k-elf target) and the libgcc to generate a ROM image. Binaries (GCC 13.2) are provided for Windows OS for convenience, but you need to install it by yourself for other operating systems.\r\nNote that SGDK also requires Java (custom tools require it), so you need to have Java installed on your system.\r\n\r\nSGDK library and custom tools are distributed under the MIT license (see [license.txt](license.txt) file).\r\nGCC compiler and libgcc are under GNU license (GPL3) and any software build from it (as the SGDK library) is under the GCC runtime library exception license (see [COPYING.RUNTIME](COPYING.RUNTIME) file)\r\n \r\n## GETTING STARTED\r\n\r\nFirst, you need to know that SGDK uses the C language (assembly is also possible, but not necessary) so it's highly recommended to be familiar with C programming before trying to develop with SGDK. Learning C language at same time as learning 'Sega Mega Drive' programming is definitely too difficult and you will end up getting nowhere. It's also important to have, at least, a basic knowledge of the Sega Mega Drive hardware (specifically the video system). \r\n\r\n### MEGA DRIVE TECHNICAL INFO REFERENCES\r\n\r\n* And-0 - Awesome Mega Drive Development references:<br>\r\nhttps://github.com/And-0/awesome-megadrive\r\n* Raster Scroll - Sega Mega Drive Graphics guide:<br>\r\nhttps://rasterscroll.com/mdgraphics/\r\n* Mega Cat Studios - Sega Mega Drive graphics guide:<br>\r\nhttps://megacatstudios.com/blogs/retro-development/sega-genesis-mega-drive-vdp-graphics-guide-v1-2a-03-14-17\r\n* Sik's Blog dedicated to MD assembly programming but explain a lot of stuff (and in a nice way) about the Sega Mega Drive hardware:<br>\r\nhttps://plutiedev.com\r\n* A nice article from Rodrigo Copetti explaining the Mega Drive architecture:<br>\r\nhttps://www.copetti.org/projects/consoles/mega-drive-genesis\r\n* Genesis Software Manual which contains absolutely everything you need to know about the Sega Mega Drive:<br>\r\nhttps://segaretro.org/images/a/a2/Genesis_Software_Manual.pdf\r\n\r\n### INSTALLATION AND DOCUMENTATION \r\n\r\nThen when you feel ready you can go further and finally install SGDK :)\r\n\r\nYou can find installation instructions and tutorials about how use SGDK on the wiki:<br>\r\nhttps://github.com/Stephane-D/SGDK/wiki\r\n\r\nSGDK comes with doxygen documentation (generated from .h header files) which provides descriptions about SGDK structures and functions. You can find it in the _'doc'_ folder (open your local _doc/html/files.html_ in your browser).\r\n\r\nIt's important to know that SGDK heavily relies on _resources_ which are compiled through the _rescomp_ tool. You should read the [rescomp.txt](https://raw.githubusercontent.com/Stephane-D/SGDK/master/bin/rescomp.txt) file to understand **which kind of resources you can use and how to declare them**. Then you can look at the *'sample'* folder from SGDK and, in particular, the [sonic sample](https://github.com/Stephane-D/SGDK/tree/master/sample/game/sonic) which is a good showcase of SGDK usage in general (functions and resources).\r\n\r\n### OTHERS TUTORIALS\r\n\r\nYou can find a lot of tutorials online about SGDK but be careful, some are outdated or sometimes just wrong.<br>\r\nI really recommend starting from the [wiki](https://github.com/Stephane-D/SGDK/wiki) which provides the basics to start, but if you need more _visual_ and more complete tutorials you can give either of these a try:<br>\r\nMD programming tutorials from Ohsat:<br>\r\nhttps://www.ohsat.com/tutorial/mdmisc/creating-graphics-for-md/<br>\r\nVery complete and visual tutorials from Danibus (spanish only):<br>\r\nhttps://danibus.wordpress.com/<br>\r\n\r\n### USEFUL TOOLS\r\n\r\nHere's a list of useful tools to help you creating your assets:\r\n\r\n#### Pixel art / Sprite\r\n\r\n* [Asesprite](https://www.aseprite.org/)\r\n* [Graphics gale](https://graphicsgale.com/)\r\n* [Pro Motion](https://www.cosmigo.com/)\r\n* [Grafx2](http://grafx2.chez.com/)\r\n* [Palette quantizer](https://rilden.github.io/tiledpalettequant/): powerful tool to convert your image with palette palette constraints\r\n\r\n#### Map / Level\r\n\r\n* [16Tile](https://allone-works.itch.io/16tile): SGDK specific tile map editor\r\n* [Tiled](https://www.mapeditor.org/): Tile map editor, supported by SGDK resource compiler tool\r\n* [LDTK](https://deepnight.net/tools/ldtk-2d-level-editor/): New but powerful tile map editor (support Tiled formats as well)\r\n* [Ogmo](https://ogmo-editor-3.github.io/): Another nice and simple tile map editor\r\n* [Palette merger](https://github.com/bolon667/paletteMergerForSGDK): A tool allowing to easily change tile palette index and priority\r\n\r\n#### Music / sound\r\n\r\n* [Deflemask](https://www.deflemask.com/): music tracker supporting several system as the Sega Mega Drive\r\n* [Furnace](https://github.com/tildearrow/furnace): new music tracker supporting many systems\r\n* [Wavosaur](https://www.wavosaur.com/): wave sound editor (windows only)\r\n* [Audacity](https://www.audacityteam.org/): wave sound editor (all OS)\r\n\r\n#### Alternates sound drivers\r\n\r\nSGDK sound drivers may not fit your needs so it's important to know that some alternatives exist:\r\n* [MDSDRV](https://github.com/superctr/MDSDRV): powerful sound driver support FM & PSG SFX, pitchable PCM playback...\r\n* [Echo](https://github.com/sikthehedgehog/Echo): another sound driver supporting FM & PSG SFX and working 100% on Z80 CPU.\r\n* [MiniMusic](https://github.com/sikthehedgehog/minimusic): a tiny Z80 sound driver for Mega Drive that runs entirely off Z80 RAM\r\nand doesn't access the cartridge slot.\r\n \r\n \r\n## HELP AND SUPPORT\r\n\r\nIf you need help or support with SGDK, you can join the SGDK Discord server:<br>\r\nhttps://discord.gg/xmnBWQS\r\n\r\nYou can also go to the Spritesmind forum which is dedicated to Sega Mega Drive development and has a specific section for SGDK:<br>\r\nhttp://gendev.spritesmind.net/forum/\r\n \r\n### MACOSX / LINUX\r\n\r\nUnix/Linux users should give this very simple script a try, allowing you to use SGDK from Wine easily:<br>\r\nhttps://github.com/Franticware/SGDK_wine\r\n\r\nThere is also a new solution proposed by Daniel Valdivieso to use SGDK with VSCode under any OS using Wine:<br>\r\nhttps://github.com/v4ld3r5/sgdk_vscode_template\r\n\r\nAnother great alternative is to use the complete _MarsDev_ environment developed by Andy Grind:\r\nhttps://github.com/andwn/marsdev\r\nIt supports all OSes, provides SGDK compatibility as well as 32X support, so be sure to check it out.\r\n\r\nMacOSX users also have access to SGDK with Gendev for MacOS from the Sonic3D project:<br>\r\nhttps://github.com/SONIC3D/gendev-macos\r\n\r\n### DOCKER\r\n\r\n*A modern way to install it on any environement is to use Docker.*\r\n\r\nTo download the `sgdk` base image:\r\n\r\n     docker pull ghcr.io/stephane-d/sgdk\r\n     docker tag ghcr.io/stephane-d/sgdk sgdk\r\n\r\nOr build it:\r\n\r\n     docker build -t ghcr.io/stephane-d/sgdk-m68k-gcc:latest -f deps/gcc.Dockerfile deps/\r\n     docker build -t sgdk .\r\n\r\nAnd then to compile the local env, such as `samples` for example:\r\n\r\n    cd sample/game/sonic\r\n    docker run --rm -v \"$PWD\":/src sgdk\r\n\r\nNotes:\r\n\r\n- `$PWD` will not work on Windows, `%CD%` has to be used instead.\r\n- To avoid writing `./out` files as root, execute the docker command as current user:\r\n  `docker run --rm -v \"$PWD\":/src -u $(id -u):$(id -g) sgdk`\r\n- You can also try the alternate Doragasu docker solution which uses a native linux compiler (much faster):\r\n  https://gitlab.com/doragasu/docker-sgdk\r\n \r\n### AWS\r\n\r\nYes you're reading correctly, thanks to Matthew Nimmo you can even now use SGDK from AWS ^^\r\nHere's the link to his blog which explain how to do that:\r\nhttps://community.aws/content/2hZInsYwWX8cYEAIFKquutVoYQj/how-to-build-retro-games-in-aws-using-sega-genesis-development-kit-sgdk\r\n\r\n### VISUAL STUDIO\r\n\r\nYou can find a Visual Studio template in the 'vstudio' folder to facilate SGDK integration with VS.\r\nOr, to take it even further, you can also install the VS extension made by zerasul:<br>\r\nhttps://marketplace.visualstudio.com/items?itemName=zerasul.genesis-code\r\n \r\n## SUPPORT SGDK\r\n\r\nSGDK is completly free but you can support it on Patreon: https://www.patreon.com/SGDK\r\n\r\n## THANKS\r\n\r\n- Doragasu for the multi-tasking engine (based on Sik implementation), MegaWifi, flash save support and others nice additions.\r\n- Sik for the multi-tasking base implementation and for all its unvaluable Plutidev Sega Mega Drive technical information source. \r\n- Chilly Willy for making almost all the JOY / controller support in SGDK (and the joy test sample ^^).\r\n- Vladikcomper for the powerful error handler capable of displaying human readable backtrace informations :)\r\n- Astrofra for the starfield donut sample and the revamped readme ;)\r\n- Gligli for building and providing GCC 6.3 for Windows.\r\n- Gunpog for making the 'cute' SGDK logo.\r\n- Adrian Spoz for making the 'profesionnal' SGDK logo.\r\n- Vojtěch Salajka for the script allowing to use SGDK easily from Wine (Linux/Unix but may work on OSX too).\r\n- Daniel Valdivieso for another Wine based solution to use SGDK on multi-OS (including a VSCode template).\r\n- Andy Grind for the MarsDev project allowing to use SGDK on any OS and also supporting 32X dev.\r\n- Kubilus for the GenDev Linux port of SGDK.\r\n- Sonic3D for the GenDev OSX port of SGDK.\r\n- Vladimir Kryvian for Visual Studio support and template.\r\n- Steve Schnepp for Docker support.\r\n- Andreas Dietrich for the nice Wobbler & scaling effect samples.\r\n- clbr for various contributions.\r\n- jgyllinsky for providing / improving build batches.\r\n- nolddor for fixes / contributions.\r\n- starling13 for fixes.\r\n- davidgf for its contributions (improved assembly LTO optimization).\r\n- ShiningBzh / Jeremy and Kentosama for their precious help in testing.\r\n- Vetea and Studio Vetea Discord people in general for their support and kindness.\r\n- all those I forgot and generally all people who contributed in any form to SGDK !\r\n\r\n## SPECIAL THANKS\r\n\r\nOf course I thank all my patreon for their continuous support but I want to dedicace a very special and warmfull thanks for generous donation from:\r\n\r\n- Bitmap Bureau (Xeno Crisis team)\r\n- Neofid Studios (Demons of Asteborg team)\r\n- Dmitry (D I)\r\n- Rajen Savjani\r\n\r\n## POWERED BY THE SGDK!\r\n\r\nThese projects are known to be based on the SGDK _(non-exhaustive list)_:\r\n\r\n![alt text](doc/img/game_tanzer.gif)\r\n \r\nTanzer by [Mega Cat Studios](https://megacatstudios.com/products/tanzer-sega-genesis)\r\n\r\n![alt text](doc/img/demo_masiaka.gif)\r\n \r\nMASIAKA by [Resistance](https://www.pouet.net/prod.php?which=71543)\r\n\r\n![alt text](doc/img/game_xenocrisis.gif)\r\n \r\nXeno Crisis by the [Bitmap Bureau](https://www.bitmapbureau.com/)\r\n\r\n![alt text](doc/img/game_doa.gif)\r\n \r\nDemons of Asteborg [Neofid Studios](https://neofid-studios.com/)\r\n\r\n### Random list of SGDK-powered games and demos\r\n\r\n* [2048](https://github.com/atamurad/sega-2048) by atamurad\r\n* [Abbaye des Morts (l')](https://playonretro.itch.io/labbaye-des-morts-megadrivegenesis-por-002) unofficial MD port by Moon-Watcher\r\n* [Art of LeonBli (the)](https://www.pouet.net/prod.php?which=72272) by Resistance\r\n* [Barbarian](https://www.youtube.com/watch?v=e8IIfNLXzAU) unofficial MD port by Z-Team\r\n* [Demons of Asteborg](https://demonsofasteborg.com/) by Neofid Studio\r\n* [Devwill Too MD](https://amaweks.itch.io/devwill-too-md) by Amaweks\r\n* [Fatal Smarties](https://globalgamejam.org/2016/games/fatal-smarties) made for the GGJ 2016\r\n* [Fullscreen NICCC 2000](https://www.pouet.net/prod.php?which=81136) by Resistance\r\n* [IK+ Deluxe](https://www.youtube.com/watch?v=mcm0TRsOwuw) unofficial MD port by Z-Team\r\n* [Irena](https://white-ninja.itch.io/irena-genesis-metal-fury) by White Ninja Studio\r\n* [Omega Blast](https://nendo16.jimdofree.com/omega-blast/) by Nendo\r\n* [Perlin & Pinpin](https://lizardrive.itch.io/perlin-pinpin-episode1) by Lizardrive\r\n* [Right 2 Repair](https://supermegabyte.itch.io/right-2-repair) by Super Megabyte made for the GGJ 2020\r\n* [Return to Genesis](https://www.youtube.com/watch?v=jjy0Iz_64dY) unofficial MD port by Z-Team\r\n* [Road to Valhalla](https://www.pouet.net/prod.php?which=72961) by Bounty/Banana & Resistance\r\n* [Spiral (the)](https://www.pouet.net/prod.php?which=82607) by Resistance\r\n* [TCK](https://www.cursed-knight.fr/cursed-knight-fr.php) by GGS Studio Creation\r\n* [Tetris MD](https://github.com/NeroJin/TetrisMD) unofficial MD port by Nero Jin\r\n* [ThunderCats MD](https://github.com/mxfolken/thundercats_megadrive) by Rolando Fernández Benavidez.\r\n* [Travel](https://www.pouet.net/prod.php?which=65975) by Resistance\r\n* [Wacky Willy Weiner Sausage Surfer](https://globalgamejam.org/2017/games/wacky-willy-weiner-sausage-surfer) made for the GGJ 2017\r\n"
        },
        {
          "name": "res",
          "type": "tree",
          "content": null
        },
        {
          "name": "sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "vstudio",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}