{
  "metadata": {
    "timestamp": 1736709724725,
    "page": 117,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tanersener/mobile-ffmpeg",
      "stars": 3905,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0341796875,
          "content": "*.log\n/prebuilt/\n*.DS_Store\n/.tmp/\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 4.7919921875,
          "content": "branches:\n  only:\n  - master\n  - development\ngit:\n  quiet: true\n  depth: false\njobs:\n  include:\n    - name: \"Android Main Build\"\n      language: android\n      os: linux\n      dist : trusty\n      addons:\n        apt:\n          packages:\n            - autoconf\n            - automake\n            - libtool\n            - pkg-config\n            - curl\n            - git\n            - cmake\n            - gcc\n            - gperf\n            - texinfo\n            - yasm\n            - bison\n            - autogen\n            - patch\n      android:\n        components:\n          - tools\n          - platform-tools\n          - build-tools-28.0.3\n          - android-24\n          - extra-google-google_play_services\n          - extra-google-m2repository\n          - extra-android-m2repository\n      install:\n        - echo y | sdkmanager \"ndk;21.3.6528147\"\n        - echo y | sdkmanager \"cmake;3.10.2.4988404\"\n      before_install:\n        - touch $HOME/.android/repositories.cfg\n      before_script:\n        - export ANDROID_NDK_ROOT=${ANDROID_HOME}ndk/21.3.6528147\n        - rm -f ./build.log\n        - wget https://www.nasm.us/pub/nasm/releasebuilds/2.14.02/nasm-2.14.02.tar.gz;tar zxvf nasm-2.14.02.tar.gz;cd nasm-2.14.02;./configure;make;sudo make install;cd ..\n      after_success:\n        - grep -e INFO ./build.log | grep build\n      after_failure:\n        - tail -30 ./build.log\n        - tail -30 ./src/ffmpeg/ffbuild/config.log\n      script:\n        - bash ./android.sh --no-output-redirection -d\n    - name: \"Android LTS Build\"\n      language: android\n      os: linux\n      dist : trusty\n      addons:\n        apt:\n          packages:\n            - autoconf\n            - automake\n            - libtool\n            - pkg-config\n            - curl\n            - git\n            - cmake\n            - gcc\n            - gperf\n            - texinfo\n            - yasm\n            - bison\n            - autogen\n            - patch\n      android:\n        components:\n          - tools\n          - platform-tools\n          - build-tools-28.0.3\n          - android-16\n          - android-21\n          - extra-google-google_play_services\n          - extra-google-m2repository\n          - extra-android-m2repository\n      install:\n        - echo y | sdkmanager \"ndk;21.3.6528147\"\n        - echo y | sdkmanager \"cmake;3.10.2.4988404\"\n      before_install:\n        - touch $HOME/.android/repositories.cfg\n      before_script:\n        - export ANDROID_NDK_ROOT=${ANDROID_HOME}ndk/21.3.6528147\n        - rm -f ./build.log\n        - wget https://www.nasm.us/pub/nasm/releasebuilds/2.14.02/nasm-2.14.02.tar.gz;tar zxvf nasm-2.14.02.tar.gz;cd nasm-2.14.02;./configure;make;sudo make install;cd ..\n      after_success:\n        - grep -e INFO ./build.log | grep build\n      after_failure:\n        - tail -30 ./build.log\n        - tail -30 ./src/ffmpeg/ffbuild/config.log\n      script:\n        - bash ./android.sh --lts --no-output-redirection -d\n    - name: \"iOS Main Build\"\n      language: objective-c\n      os: osx\n      osx_image: xcode10.2\n      addons:\n        homebrew:\n          packages:\n            - nasm\n          update: true\n      before_script:\n        - rm -f ./build.log\n      after_success:\n        - grep -e INFO ./build.log | grep build\n      after_failure:\n        - tail -30 ./build.log\n        - tail -30 ./src/ffmpeg/ffbuild/config.log\n      script:\n        - bash ./ios.sh --no-output-redirection --disable-arm64e\n    - name: \"iOS LTS Build\"\n      language: objective-c\n      osx_image: xcode7.3\n      os: osx\n      addons:\n        homebrew:\n          packages:\n            - nasm\n          update: true\n      before_script:\n        - rm -f ./build.log\n      after_success:\n        - grep -e INFO ./build.log | grep build\n      after_failure:\n        - tail -30 ./build.log\n        - tail -30 ./src/ffmpeg/ffbuild/config.log\n      script:\n        - bash ./ios.sh --lts --no-output-redirection --disable-armv7 --disable-armv7s --disable-i386\n    - name: \"tvOS Main Build\"\n      language: objective-c\n      os: osx\n      osx_image: xcode10.2\n      addons:\n        homebrew:\n          packages:\n            - nasm\n          update: true\n      before_script:\n        - rm -f ./build.log\n      after_success:\n        - grep -e INFO ./build.log | grep build\n      after_failure:\n        - tail -30 ./build.log\n        - tail -30 ./src/ffmpeg/ffbuild/config.log\n      script:\n        - bash ./tvos.sh --no-output-redirection\n    - name: \"tvOS LTS Build\"\n      language: objective-c\n      os: osx\n      osx_image: xcode7.3\n      addons:\n        homebrew:\n          packages:\n            - nasm\n          update: true\n      before_script:\n        - rm -f ./build.log\n      after_success:\n        - grep -e INFO ./build.log | grep build\n      after_failure:\n        - tail -30 ./build.log\n        - tail -30 ./src/ffmpeg/ffbuild/config.log\n      script:\n        - bash ./tvos.sh --lts --no-output-redirection\n"
        },
        {
          "name": "LICENSE.GPLv3",
          "type": "blob",
          "size": 34.3232421875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "LICENSE.LGPLv3",
          "type": "blob",
          "size": 7.4716796875,
          "content": "                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 30.75,
          "content": "# MobileFFmpeg [![Financial Contributors on Open Collective](https://opencollective.com/mobile-ffmpeg/all/badge.svg?label=financial+contributors)](https://opencollective.com/mobile-ffmpeg) ![GitHub release](https://img.shields.io/badge/release-v4.4-blue.svg) ![Maven Central](https://img.shields.io/maven-central/v/com.arthenica/mobile-ffmpeg-min) ![CocoaPods](https://img.shields.io/badge/pod-v4.4-blue.svg) [![Build Status](https://travis-ci.org/tanersener/mobile-ffmpeg.svg?branch=master)](https://travis-ci.org/tanersener/mobile-ffmpeg)\n\nFFmpeg for Android, iOS and tvOS. \n\nNot maintained anymore as explained in [What’s next for MobileFFmpeg?](https://tanersener.medium.com/whats-next-for-mobileffmpeg-44d2fac6f09b). Superseded by [FFmpegKit](https://github.com/tanersener/ffmpeg-kit).\n\n<img src=\"https://github.com/tanersener/mobile-ffmpeg/blob/master/docs/assets/mobile-ffmpeg-logo-v7.png\" width=\"320\">\n\n### 1. Features\n- Includes both `FFmpeg` and `FFprobe`\n- Use binaries available at `Github`/`Maven Central`/`CocoaPods` or build your own version with external libraries you need\n- Supports\n    - Android, iOS and tvOS\n    - FFmpeg `v3.4.x`, `v4.0.x`, `v4.1`, `v4.2` , `v4.3` and `v4.4-dev` releases\n    - 29 external libraries\n    \n        `chromaprint`, `fontconfig`, `freetype`, `fribidi`, `gmp`, `gnutls`, `kvazaar`, `lame`, `libaom`, `libass`, `libiconv`, `libilbc`, `libtheora`, `libvorbis`, `libvpx`, `libwebp`, `libxml2`, `opencore-amr`, `openh264`, `opus`, `sdl`, `shine`, `snappy`, `soxr`, `speex`, `tesseract`, `twolame`, `vo-amrwbenc`, `wavpack`\n    \n    - 5 external libraries with GPL license\n    \n        `rubberband`, `vid.stab`, `x264`, `x265`, `xvidcore`\n\n    - Concurrent execution\n\n- Exposes both FFmpeg library and MobileFFmpeg wrapper library capabilities\n- Includes cross-compile instructions for 47 open-source libraries\n    \n    `chromaprint`, `expat`, `ffmpeg`, `fontconfig`, `freetype`, `fribidi`, `giflib`, `gmp`, `gnutls`, `kvazaar`, `lame`, `leptonica`, `libaom`, `libass`, `libiconv`, `libilbc`, `libjpeg`, `libjpeg-turbo`, `libogg`, `libpng`, `libsamplerate`, `libsndfile`, `libtheora`, `libuuid`, `libvorbis`, `libvpx`, `libwebp`, `libxml2`, `nettle`, `opencore-amr`, `openh264`, `opus`, `rubberband`, `sdl`, `shine`, `snappy`, `soxr`, `speex`, `tesseract`, `tiff`, `twolame`, `vid.stab`, `vo-amrwbenc`, `wavpack`, `x264`, `x265`, `xvidcore`\n\n- Licensed under LGPL 3.0, can be customized to support GPL v3.0\n\n#### 1.1 Android\n- Builds `arm-v7a`, `arm-v7a-neon`, `arm64-v8a`, `x86` and `x86_64` architectures\n- Supports `zlib` and `MediaCodec` system libraries\n- Camera access on [supported devices](https://developer.android.com/ndk/guides/stable_apis#camera)\n- Builds shared native libraries (.so)\n- Creates Android archive with .aar extension\n- Supports `API Level 16+`\n\n#### 1.2 iOS\n- Builds `armv7`, `armv7s`, `arm64`, `arm64e`, `i386`, `x86_64` and `x86_64` (Mac Catalyst) architectures\n- Supports `bzip2`, `iconv`, `libuuid`, `zlib` system libraries and `AudioToolbox`, `VideoToolbox`, `AVFoundation` system frameworks\n- Objective-C API\n- Camera access\n- `ARC` enabled library\n- Built with `-fembed-bitcode` flag\n- Creates static frameworks, static xcframeworks and static universal (fat) libraries (.a)\n- Supports `iOS SDK 9.3` or later\n \n#### 1.3 tvOS\n- Builds `arm64` and `x86_64` architectures\n- Supports `bzip2`, `iconv`, `libuuid`, `zlib` system libraries and `AudioToolbox`, `VideoToolbox` system frameworks\n- Objective-C API\n- `ARC` enabled library\n- Built with `-fembed-bitcode` flag\n- Creates static frameworks and static universal (fat) libraries (.a)\n- Supports `tvOS SDK 9.2` or later\n\n### 2. Using\n\nPrebuilt binaries are available at [Github](https://github.com/tanersener/mobile-ffmpeg/releases), [Maven Central](https://repo1.maven.org/maven2) and [CocoaPods](https://cocoapods.org).\n\n#### 2.1 Packages\n\nThere are eight different `mobile-ffmpeg` packages. Below you can see which system libraries and external libraries are enabled in each of them. \n\nPlease remember that some parts of `FFmpeg` are licensed under the `GPL` and only `GPL` licensed `mobile-ffmpeg` packages include them.\n\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\"><sup>min</sup></th>\n<th align=\"center\"><sup>min-gpl</sup></th>\n<th align=\"center\"><sup>https</sup></th>\n<th align=\"center\"><sup>https-gpl</sup></th>\n<th align=\"center\"><sup>audio</sup></th>\n<th align=\"center\"><sup>video</sup></th>\n<th align=\"center\"><sup>full</sup></th>\n<th align=\"center\"><sup>full-gpl</sup></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><sup>external libraries</sup></td>\n<td align=\"center\">-</td>\n<td align=\"center\"><sup>vid.stab</sup><br><sup>x264</sup><br><sup>x265</sup><br><sup>xvidcore</sup></td>\n<td align=\"center\"><sup>gmp</sup><br><sup>gnutls</sup></td>\n<td align=\"center\"><sup>gmp</sup><br><sup>gnutls</sup><br><sup>vid.stab</sup><br><sup>x264</sup><br><sup>x265</sup><br><sup>xvidcore</sup></td>\n<td align=\"center\"><sup>lame</sup><br><sup>libilbc</sup><br><sup>libvorbis</sup><br><sup>opencore-amr</sup><br><sup>opus</sup><br><sup>shine</sup><br><sup>soxr</sup><br><sup>speex</sup><br><sup>twolame</sup><br><sup>vo-amrwbenc</sup><br><sup>wavpack</sup></td>\n<td align=\"center\"><sup>fontconfig</sup><br><sup>freetype</sup><br><sup>fribidi</sup><br><sup>kvazaar</sup><br><sup>libaom</sup><br><sup>libass</sup><br><sup>libiconv</sup><br><sup>libtheora</sup><br><sup>libvpx</sup><br><sup>libwebp</sup><br><sup>snappy</sup></td>\n<td align=\"center\"><sup>fontconfig</sup><br><sup>freetype</sup><br><sup>fribidi</sup><br><sup>gmp</sup><br><sup>gnutls</sup><br><sup>kvazaar</sup><br><sup>lame</sup><br><sup>libaom</sup><br><sup>libass</sup><br><sup>libiconv</sup><br><sup>libilbc</sup><br><sup>libtheora</sup><br><sup>libvorbis</sup><br><sup>libvpx</sup><br><sup>libwebp</sup><br><sup>libxml2</sup><br><sup>opencore-amr</sup><br><sup>opus</sup><br><sup>shine</sup><br><sup>snappy</sup><br><sup>soxr</sup><br><sup>speex</sup><br><sup>twolame</sup><br><sup>vo-amrwbenc</sup><br><sup>wavpack</sup></td>\n<td align=\"center\"><sup>fontconfig</sup><br><sup>freetype</sup><br><sup>fribidi</sup><br><sup>gmp</sup><br><sup>gnutls</sup><br><sup>kvazaar</sup><br><sup>lame</sup><br><sup>libaom</sup><br><sup>libass</sup><br><sup>libiconv</sup><br><sup>libilbc</sup><br><sup>libtheora</sup><br><sup>libvorbis</sup><br><sup>libvpx</sup><br><sup>libwebp</sup><br><sup>libxml2</sup><br><sup>opencore-amr</sup><br><sup>opus</sup><br><sup>shine</sup><br><sup>snappy</sup><br><sup>soxr</sup><br><sup>speex</sup><br><sup>twolame</sup><br><sup>vid.stab</sup><br><sup>vo-amrwbenc</sup><br><sup>wavpack</sup><br><sup>x264</sup><br><sup>x265</sup><br><sup>xvidcore</sup></td>\n</tr>\n<tr>\n<td align=\"center\"><sup>android system libraries</sup></td>\n<td align=\"center\" colspan=8><sup>zlib</sup><br><sup>MediaCodec</sup></td>\n</tr>\n<tr>\n<td align=\"center\"><sup>ios system libraries</sup></td>\n<td align=\"center\" colspan=8><sup>zlib</sup><br><sup>AudioToolbox</sup><br><sup>AVFoundation</sup><br><sup>iconv</sup><br><sup>VideoToolbox</sup><br><sup>bzip2</sup></td>\n</tr>\n<tr>\n<td align=\"center\"><sup>tvos system libraries</sup></td>\n<td align=\"center\" colspan=8><sup>zlib</sup><br><sup>AudioToolbox</sup><br><sup>iconv</sup><br><sup>VideoToolbox</sup><br><sup>bzip2</sup></td>\n</tr>\n</tbody>\n</table>\n\n - `libilbc`, `opus`, `snappy`, `x264` and `xvidcore` are supported since `v1.1`\n\n - `libaom` and `soxr` are supported since `v2.0`\n\n - `chromaprint`, `vid.stab` and `x265` are supported since `v2.1`\n\n - `sdl`, `tesseract`, `twolame` external libraries; `zlib`, `MediaCodec` Android system libraries; `bzip2`, `zlib` iOS system libraries and `AudioToolbox`, `VideoToolbox`, `AVFoundation` iOS system frameworks are supported since `v3.0`\n\n - Since `v4.2`, `chromaprint`, `sdl` and `tesseract` libraries are not included in binary releases. You can still build them and include in your releases\n \n - `AVFoundation` is not available on `tvOS`, `VideoToolbox` is not available on `tvOS` LTS releases\n \n - Since `v4.3.1`, `iOS` and `tvOS` releases started to use `iconv` system library instead of `iconv` external library \n\n - `vo-amrwbenc` is supported since `v4.4`\n\n#### 2.2 Android\n  - For versions `4.4` and `4.4.LTS`, add `mavenCentral()` to your `build.gradle` and make sure that it is listed\n    before `jcenter()`\n  - For `4.3.2` and older releases, add `jcenter()`\n    ```\n    repositories {\n        mavenCentral()\n    }\n    ```\n\n1. Add MobileFFmpeg dependency to your `build.gradle` in `mobile-ffmpeg-<package name>` pattern.\n    ```\n    dependencies {\n        implementation 'com.arthenica:mobile-ffmpeg-full:4.4'\n    }\n    ```\n\n2. Execute synchronous FFmpeg commands.\n    ```\n    import com.arthenica.mobileffmpeg.Config;\n    import com.arthenica.mobileffmpeg.FFmpeg;\n\n    int rc = FFmpeg.execute(\"-i file1.mp4 -c:v mpeg4 file2.mp4\");\n   \n    if (rc == RETURN_CODE_SUCCESS) {\n        Log.i(Config.TAG, \"Command execution completed successfully.\");\n    } else if (rc == RETURN_CODE_CANCEL) {\n        Log.i(Config.TAG, \"Command execution cancelled by user.\");\n    } else {\n        Log.i(Config.TAG, String.format(\"Command execution failed with rc=%d and the output below.\", rc));\n        Config.printLastCommandOutput(Log.INFO);\n    }\n    ```\n\n3. Execute asynchronous FFmpeg commands.\n    ```\n    import com.arthenica.mobileffmpeg.Config;\n    import com.arthenica.mobileffmpeg.FFmpeg;\n\n    long executionId = FFmpeg.executeAsync(\"-i file1.mp4 -c:v mpeg4 file2.mp4\", new ExecuteCallback() {\n\n        @Override\n        public void apply(final long executionId, final int returnCode) {\n            if (returnCode == RETURN_CODE_SUCCESS) {\n                Log.i(Config.TAG, \"Async command execution completed successfully.\");\n            } else if (returnCode == RETURN_CODE_CANCEL) {\n                Log.i(Config.TAG, \"Async command execution cancelled by user.\");\n            } else {\n                Log.i(Config.TAG, String.format(\"Async command execution failed with returnCode=%d.\", returnCode));\n            }\n        }\n    });\n    ```\n\n4. Execute FFprobe commands.\n    ```\n    import com.arthenica.mobileffmpeg.Config;\n    import com.arthenica.mobileffmpeg.FFprobe;\n\n    int rc = FFprobe.execute(\"-i file1.mp4\");\n   \n    if (rc == RETURN_CODE_SUCCESS) {\n        Log.i(Config.TAG, \"Command execution completed successfully.\");\n    } else {\n        Log.i(Config.TAG, String.format(\"Command execution failed with rc=%d and the output below.\", rc));\n        Config.printLastCommandOutput(Log.INFO);\n    }\n    ```\n\n5. Check execution output later.\n    ```\n    int rc = Config.getLastReturnCode();\n \n    if (rc == RETURN_CODE_SUCCESS) {\n        Log.i(Config.TAG, \"Command execution completed successfully.\");\n    } else if (rc == RETURN_CODE_CANCEL) {\n        Log.i(Config.TAG, \"Command execution cancelled by user.\");\n    } else {\n        Log.i(Config.TAG, String.format(\"Command execution failed with rc=%d and the output below.\", rc));\n        Config.printLastCommandOutput(Log.INFO);\n    }\n    ```\n\n6. Stop ongoing FFmpeg operations.\n    - Stop all executions\n        ```\n        FFmpeg.cancel();\n        ```\n    - Stop a specific execution\n        ```\n        FFmpeg.cancel(executionId);\n        ```\n\n7. Get media information for a file.\n    ```\n    MediaInformation info = FFprobe.getMediaInformation(\"<file path or uri>\");\n    ```\n\n8. Record video using Android camera.\n    ```\n    FFmpeg.execute(\"-f android_camera -i 0:0 -r 30 -pixel_format bgr0 -t 00:00:05 <record file path>\");\n    ```\n\n9. Enable log callback.\n    ```\n    Config.enableLogCallback(new LogCallback() {\n        public void apply(LogMessage message) {\n            Log.d(Config.TAG, message.getText());\n        }\n    });\n    ```\n\n10. Enable statistics callback.\n    ```\n    Config.enableStatisticsCallback(new StatisticsCallback() {\n        public void apply(Statistics newStatistics) {\n            Log.d(Config.TAG, String.format(\"frame: %d, time: %d\", newStatistics.getVideoFrameNumber(), newStatistics.getTime()));\n        }\n    });\n    ```\n11. Ignore the handling of a signal.\n    ```\n    Config.ignoreSignal(Signal.SIGXCPU);\n    ```\n\n12. List ongoing executions.\n    ```\n    final List<FFmpegExecution> ffmpegExecutions = FFmpeg.listExecutions();\n    for (int i = 0; i < ffmpegExecutions.size(); i++) {\n        FFmpegExecution execution = ffmpegExecutions.get(i);\n        Log.d(TAG, String.format(\"Execution %d = id:%d, startTime:%s, command:%s.\", i, execution.getExecutionId(), execution.getStartTime(), execution.getCommand()));\n    }\n    ```\n\n13. Set default log level.\n    ```\n    Config.setLogLevel(Level.AV_LOG_FATAL);\n    ```\n\n14. Register custom fonts directory.\n    ```\n    Config.setFontDirectory(this, \"<folder with fonts>\", Collections.EMPTY_MAP);\n    ```\n\n#### 2.3 iOS / tvOS\n1. Add MobileFFmpeg dependency to your `Podfile` in `mobile-ffmpeg-<package name>` pattern.\n\n    - iOS\n    ```\n    pod 'mobile-ffmpeg-full', '~> 4.4'\n    ```\n\n    - tvOS\n    ```\n    pod 'mobile-ffmpeg-tvos-full', '~> 4.4'\n    ```\n\n2. Execute synchronous FFmpeg commands.\n    ```\n    #import <mobileffmpeg/MobileFFmpegConfig.h>\n    #import <mobileffmpeg/MobileFFmpeg.h>\n\n    int rc = [MobileFFmpeg execute: @\"-i file1.mp4 -c:v mpeg4 file2.mp4\"];\n   \n    if (rc == RETURN_CODE_SUCCESS) {\n        NSLog(@\"Command execution completed successfully.\\n\");\n    } else if (rc == RETURN_CODE_CANCEL) {\n        NSLog(@\"Command execution cancelled by user.\\n\");\n    } else {\n        NSLog(@\"Command execution failed with rc=%d and output=%@.\\n\", rc, [MobileFFmpegConfig getLastCommandOutput]);\n    }\n    ```\n\n3. Execute asynchronous FFmpeg commands.\n    ```\n    #import <mobileffmpeg/MobileFFmpegConfig.h>\n    #import <mobileffmpeg/MobileFFmpeg.h>\n\n    long executionId = [MobileFFmpeg executeAsync:@\"-i file1.mp4 -c:v mpeg4 file2.mp4\" withCallback:self];\n\n    - (void)executeCallback:(long)executionId :(int)returnCode {\n        if (rc == RETURN_CODE_SUCCESS) {\n            NSLog(@\"Async command execution completed successfully.\\n\");\n        } else if (rc == RETURN_CODE_CANCEL) {\n            NSLog(@\"Async command execution cancelled by user.\\n\");\n        } else {\n            NSLog(@\"Async command execution failed with rc=%d.\\n\", rc);\n        }\n    }\n    ```\n\n4. Execute FFprobe commands.\n    ```\n    #import <mobileffmpeg/MobileFFmpegConfig.h>\n    #import <mobileffmpeg/MobileFFprobe.h>\n\n    int rc = [MobileFFprobe execute: @\"-i file1.mp4\"];\n   \n    if (rc == RETURN_CODE_SUCCESS) {\n        NSLog(@\"Command execution completed successfully.\\n\");\n    } else if (rc == RETURN_CODE_CANCEL) {\n        NSLog(@\"Command execution cancelled by user.\\n\");\n    } else {\n        NSLog(@\"Command execution failed with rc=%d and output=%@.\\n\", rc, [MobileFFmpegConfig getLastCommandOutput]);\n    }\n    ```\n    \n5. Check execution output later.\n    ```\n    int rc = [MobileFFmpegConfig getLastReturnCode];\n    NSString *output = [MobileFFmpegConfig getLastCommandOutput];\n\n    if (rc == RETURN_CODE_SUCCESS) {\n        NSLog(@\"Command execution completed successfully.\\n\");\n    } else if (rc == RETURN_CODE_CANCEL) {\n        NSLog(@\"Command execution cancelled by user.\\n\");\n    } else {\n        NSLog(@\"Command execution failed with rc=%d and output=%@.\\n\", rc, output);\n    }\n    ```\n\n6. Stop ongoing FFmpeg operations.\n    - Stop all executions\n        ```\n        [MobileFFmpeg cancel];\n\n        ```\n    - Stop a specific execution\n        ```\n        [MobileFFmpeg cancel:executionId];\n        ```\n\n7. Get media information for a file.\n    ```\n    MediaInformation *mediaInformation = [MobileFFprobe getMediaInformation:@\"<file path or uri>\"];\n    ```\n\n8. Record video and audio using iOS camera. This operation is not supported on `tvOS` since `AVFoundation` is not available on `tvOS`.\n\n    ```\n    [MobileFFmpeg execute: @\"-f avfoundation -r 30 -video_size 1280x720 -pixel_format bgr0 -i 0:0 -vcodec h264_videotoolbox -vsync 2 -f h264 -t 00:00:05 %@\", recordFilePath];\n    ```\n\n9. Enable log callback.\n    ```\n    [MobileFFmpegConfig setLogDelegate:self];\n\n    - (void)logCallback:(long)executionId :(int)level :(NSString*)message {\n        dispatch_async(dispatch_get_main_queue(), ^{\n            NSLog(@\"%@\", message);\n        });\n    }\n    ```\n\n10. Enable statistics callback.\n    ```\n    [MobileFFmpegConfig setStatisticsDelegate:self];\n\n    - (void)statisticsCallback:(Statistics *)newStatistics {\n        dispatch_async(dispatch_get_main_queue(), ^{\n            NSLog(@\"frame: %d, time: %d\\n\", newStatistics.getVideoFrameNumber, newStatistics.getTime);\n        });\n    }\n    ```\n\n11. Ignore the handling of a signal.\n    ```\n    [MobileFFmpegConfig ignoreSignal:SIGXCPU];\n    ```\n\n12. List ongoing executions.\n    ```\n    NSArray* ffmpegExecutions = [MobileFFmpeg listExecutions];\n    for (int i = 0; i < [ffmpegExecutions count]; i++) {\n        FFmpegExecution* execution = [ffmpegExecutions objectAtIndex:i];\n        NSLog(@\"Execution %d = id: %ld, startTime: %@, command: %@.\\n\", i, [execution getExecutionId], [execution getStartTime], [execution getCommand]);\n    }\n    ```\n\n13. Set default log level.\n    ```\n    [MobileFFmpegConfig setLogLevel:AV_LOG_FATAL];\n    ```\n\n14. Register custom fonts directory.\n    ```\n    [MobileFFmpegConfig setFontDirectory:@\"<folder with fonts>\" with:nil];\n    ```\n\n#### 2.4 Manual Installation\n##### 2.4.1 Android\n\nYou can import `MobileFFmpeg` aar packages in `Android Studio` using the `File` -> `New` -> `New Module` -> `Import .JAR/.AAR Package` menu.\n\n##### 2.4.2 iOS / tvOS\n\niOS and tvOS frameworks can be installed manually using the [Importing Frameworks](https://github.com/tanersener/mobile-ffmpeg/wiki/Importing-Frameworks) guide. \nIf you want to use universal binaries please refer to [Using Universal Binaries](https://github.com/tanersener/mobile-ffmpeg/wiki/Using-Universal-Binaries) guide.   \n    \n#### 2.5 Test Application\nYou can see how MobileFFmpeg is used inside an application by running test applications provided.\nThere is an `Android` test application under the `android/test-app` folder, an `iOS` test application under the \n`ios/test-app` folder and a `tvOS` test application under the `tvos/test-app` folder. \n\nAll applications are identical and supports command execution, video encoding, accessing https, encoding audio, \nburning subtitles, video stabilisation, pipe operations and concurrent command execution.\n\n<img src=\"https://github.com/tanersener/mobile-ffmpeg/blob/master/docs/assets/android_test_app.gif\" width=\"240\">\n\n### 3. Versions\n\n`MobileFFmpeg` version number is aligned with `FFmpeg` since version `4.2`. \n\nIn previous versions, `MobileFFmpeg` version of a release and `FFmpeg` version included in that release was different. \nThe following table lists `FFmpeg` versions used in `MobileFFmpeg` releases.\n  \n- `dev` part in `FFmpeg` version number indicates that `FFmpeg` source is pulled from the `FFmpeg` `master` branch. \nExact version number is obtained using `git describe --tags`. \n\n|  MobileFFmpeg Version | FFmpeg Version | Release Date |\n| :----: | :----: |:----: |\n| [4.4](https://github.com/tanersener/mobile-ffmpeg/releases/tag/v4.4) | 4.4-dev-416 | Jul 25, 2020 |\n| [4.4.LTS](https://github.com/tanersener/mobile-ffmpeg/releases/tag/v4.4.LTS) | 4.4-dev-416 | Jul 24, 2020 |\n| [4.3.2](https://github.com/tanersener/mobile-ffmpeg/releases/tag/v4.3.2) | 4.3-dev-2955 | Apr 15, 2020 |\n| [4.3.1](https://github.com/tanersener/mobile-ffmpeg/releases/tag/v4.3.1) | 4.3-dev-1944 | Jan 25, 2020 |\n| [4.3.1.LTS](https://github.com/tanersener/mobile-ffmpeg/releases/tag/v4.3.1.LTS) | 4.3-dev-1944 | Jan 25, 2020 |\n| [4.3](https://github.com/tanersener/mobile-ffmpeg/releases/tag/v4.3) | 4.3-dev-1181 | Oct 27, 2019 |\n| [4.2.2](https://github.com/tanersener/mobile-ffmpeg/releases/tag/v4.2.2) | 4.2-dev-1824 | July 3, 2019 |\n| [4.2.2.LTS](https://github.com/tanersener/mobile-ffmpeg/releases/tag/v4.2.2.LTS) | 4.2-dev-1824 | July 3, 2019 |\n| [4.2.1](https://github.com/tanersener/mobile-ffmpeg/releases/tag/v4.2.1) | 4.2-dev-1156 | Apr 2, 2019 |\n| [4.2](https://github.com/tanersener/mobile-ffmpeg/releases/tag/v4.2) | 4.2-dev-480 | Jan 3, 2019 |\n| [4.2.LTS](https://github.com/tanersener/mobile-ffmpeg/releases/tag/v4.2.LTS) | 4.2-dev-480 | Jan 3, 2019 |\n| [3.1](https://github.com/tanersener/mobile-ffmpeg/releases/tag/v3.1) | 4.1-10 | Dec 11, 2018 |\n| [3.0](https://github.com/tanersener/mobile-ffmpeg/releases/tag/v3.0) | 4.1-dev-1517 | Oct 25, 2018 |\n| [2.2](https://github.com/tanersener/mobile-ffmpeg/releases/tag/v2.2) | 4.0.3 | Nov 10, 2018 |\n| [2.1.1](https://github.com/tanersener/mobile-ffmpeg/releases/tag/v2.1.1) | 4.0.2 | Sep 19, 2018 |\n| [2.1](https://github.com/tanersener/mobile-ffmpeg/releases/tag/v2.1) | 4.0.2 | Sep 5, 2018 |\n| [2.0](https://github.com/tanersener/mobile-ffmpeg/releases/tag/v2.0) | 4.0.1 | Jun 30, 2018 |\n| [1.2](https://github.com/tanersener/mobile-ffmpeg/releases/tag/v1.2) | 3.4.4 | Aug 30, 2018|\n| [1.1](https://github.com/tanersener/mobile-ffmpeg/releases/tag/v1.1) | 3.4.2 | Jun 18, 2018 |\n| [1.0](https://github.com/tanersener/mobile-ffmpeg/releases/tag/v1.0) | 3.4.2 | Jun 6, 2018 |\n\n### 4. LTS Releases\n\nStarting from `v4.2`, `MobileFFmpeg` binaries are published in two different variants: `Main Release` and `LTS Release`. \n\n- Main releases include complete functionality of the library and support the latest SDK/API features.\n\n- LTS releases are customized to support a wider range of devices. They are built using older API/SDK versions, so some features are not available on them.\n\nThis table shows the differences between two variants.\n\n|        | Main Release | LTS Release |\n| :----: | :----: | :----: |\n| Android API Level | 24 | 16 | \n| Android Camera Access | Yes | - |\n| Android Architectures | arm-v7a-neon<br/>arm64-v8a<br/>x86<br/>x86-64 | arm-v7a<br/>arm-v7a-neon<br/>arm64-v8a<br/>x86<br/>x86-64 |\n| Xcode Support | 10.1 | 7.3.1 |\n| iOS SDK | 12.1 | 9.3 |\n| iOS AVFoundation | Yes | - |\n| iOS Architectures | arm64<br/>arm64e<sup>1</sup><br/>x86-64<br/>x86-64-mac-catalyst<sup>2</sup> | armv7<br/>arm64<br/>i386<br/>x86-64 |\n| tvOS SDK | 10.2 | 9.2 |\n| tvOS Architectures | arm64<br/>x86-64 | arm64<br/>x86-64 |\n\n<sup>1</sup> - Included until `v4.3.2`\n\n<sup>2</sup> - Included since `v4.3.2`\n\n### 5. Building\n\nBuild scripts from `master` and `development` branches are tested periodically. See the latest status from the table below.\n\n| branch | status |\n| :---: | :---: |\n|  master | [![Build Status](https://travis-ci.org/tanersener/mobile-ffmpeg.svg?branch=master)](https://travis-ci.org/tanersener/mobile-ffmpeg) |\n|  development | [![Build Status](https://travis-ci.org/tanersener/mobile-ffmpeg.svg?branch=development)](https://travis-ci.org/tanersener/mobile-ffmpeg) |\n\n\n#### 5.1 Prerequisites\n1. Use your package manager (apt, yum, dnf, brew, etc.) to install the following packages.\n\n    ```\n    autoconf automake libtool pkg-config curl cmake gcc gperf texinfo yasm nasm bison autogen patch git\n    ```\nSome of these packages are not mandatory for the default build.\nPlease visit [Android Prerequisites](https://github.com/tanersener/mobile-ffmpeg/wiki/Android-Prerequisites), \n[iOS Prerequisites](https://github.com/tanersener/mobile-ffmpeg/wiki/iOS-Prerequisites) and \n[tvOS Prerequisites](https://github.com/tanersener/mobile-ffmpeg/wiki/tvOS-Prerequisites) for the details.\n\n2. Android builds require these additional packages.\n    - **Android SDK 4.1 Jelly Bean (API Level 16)** or later\n    - **Android NDK r21** or later with LLDB and CMake\n\n3. iOS builds need these extra packages and tools.\n    - **Xcode 7.3.1** or later\n    - **iOS SDK 9.3** or later\n    - **Command Line Tools**\n\n4. tvOS builds need these extra packages and tools.\n    - **Xcode 7.3.1** or later\n    - **tvOS SDK 9.2** or later\n    - **Command Line Tools**\n\n#### 5.2 Build Scripts\nUse `android.sh`, `ios.sh` and `tvos.sh` to build MobileFFmpeg for each platform. \n\nAll three scripts support additional options and \ncan be customized to enable/disable specific external libraries and/or architectures. Please refer to wiki pages of\n[android.sh](https://github.com/tanersener/mobile-ffmpeg/wiki/android.sh), \n[ios.sh](https://github.com/tanersener/mobile-ffmpeg/wiki/ios.sh) and \n[tvos.sh](https://github.com/tanersener/mobile-ffmpeg/wiki/tvos.sh) to see all available build options.\n##### 5.2.1 Android \n```\nexport ANDROID_HOME=<Android SDK Path>\nexport ANDROID_NDK_ROOT=<Android NDK Path>\n./android.sh\n```\n\n<img src=\"https://github.com/tanersener/mobile-ffmpeg/blob/master/docs/assets/android_custom.gif\" width=\"600\">\n\n##### 5.2.2 iOS\n```\n./ios.sh\n```\n\n<img src=\"https://github.com/tanersener/mobile-ffmpeg/blob/master/docs/assets/ios_custom.gif\" width=\"600\">\n\n##### 5.2.3 tvOS\n```\n./tvos.sh\n```\n\n<img src=\"https://github.com/tanersener/mobile-ffmpeg/blob/master/docs/assets/tvos_custom.gif\" width=\"600\">\n\n\n##### 5.2.4 Building LTS Binaries\n\nUse `--lts` option to build lts binaries for each platform.\n\n#### 5.3 Build Output\n\nAll libraries created by the top level build scripts (`android.sh`, `ios.sh` and `tvos.sh`) can be found under \nthe `prebuilt` directory.\n\n- `Android` archive (.aar file) is located under the `android-aar` folder\n- `iOS` frameworks are located under the `ios-framework` folder\n- `iOS` xcframeworks are located under the `ios-xcframework` folder\n- `iOS` universal binaries are located under the `ios-universal` folder\n- `tvOS` frameworks are located under the `tvos-framework` folder\n- `tvOS` universal binaries are located under the `tvos-universal` folder\n\n#### 5.4 GPL Support\nIt is possible to enable GPL licensed libraries `x264`, `xvidcore` since `v1.1`; `vid.stab`, `x265` since `v2.1` and\n`rubberband` since `v4.3.2` from the top level build scripts. Their source code is not included in the repository and\ndownloaded when enabled.\n\n#### 5.5 External Libraries\n`build` directory includes build scripts of all external libraries. Two scripts exist for each external library, \none for `Android` and one for `iOS / tvOS`. Each of these two scripts contains options/flags used to cross-compile the \nlibrary on the specified mobile platform. \n\nCPU optimizations (`ASM`) are enabled for most of the external libraries. Details and exceptions can be found under the \n[ASM Support](https://github.com/tanersener/mobile-ffmpeg/wiki/ASM-Support) wiki page.\n\n### 6. Documentation\n\nA more detailed documentation is available at [Wiki](https://github.com/tanersener/mobile-ffmpeg/wiki).\n\n### 7. Contributors\n\n#### 7.1 Code Contributors\n\nThis project exists thanks to all the people who contribute. [[Contribute](CONTRIBUTING.md)].\n<a href=\"https://github.com/tanersener/mobile-ffmpeg/graphs/contributors\"><img src=\"https://opencollective.com/mobile-ffmpeg/contributors.svg?width=890&button=false\" /></a>\n\n#### 7.2 Financial Contributors\n\nBecome a financial contributor and help us sustain our community. [[Contribute](https://opencollective.com/mobile-ffmpeg/contribute)]\n\n##### 7.2.1 Individuals\n\n<a href=\"https://opencollective.com/mobile-ffmpeg\"><img src=\"https://opencollective.com/mobile-ffmpeg/individuals.svg?width=890\"></a>\n\n##### 7.2.2 Organizations\n\nSupport this project with your organization. Your logo will show up here with a link to your website. [[Contribute](https://opencollective.com/mobile-ffmpeg/contribute)]\n\n<a href=\"https://opencollective.com/mobile-ffmpeg/organization/0/website\"><img src=\"https://opencollective.com/mobile-ffmpeg/organization/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/mobile-ffmpeg/organization/1/website\"><img src=\"https://opencollective.com/mobile-ffmpeg/organization/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/mobile-ffmpeg/organization/2/website\"><img src=\"https://opencollective.com/mobile-ffmpeg/organization/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/mobile-ffmpeg/organization/3/website\"><img src=\"https://opencollective.com/mobile-ffmpeg/organization/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/mobile-ffmpeg/organization/4/website\"><img src=\"https://opencollective.com/mobile-ffmpeg/organization/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/mobile-ffmpeg/organization/5/website\"><img src=\"https://opencollective.com/mobile-ffmpeg/organization/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/mobile-ffmpeg/organization/6/website\"><img src=\"https://opencollective.com/mobile-ffmpeg/organization/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/mobile-ffmpeg/organization/7/website\"><img src=\"https://opencollective.com/mobile-ffmpeg/organization/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/mobile-ffmpeg/organization/8/website\"><img src=\"https://opencollective.com/mobile-ffmpeg/organization/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/mobile-ffmpeg/organization/9/website\"><img src=\"https://opencollective.com/mobile-ffmpeg/organization/9/avatar.svg\"></a>\n\n### 8. License\n\n`MobileFFmpeg` is licensed under the LGPL v3.0. However, if source code is built using the optional `--enable-gpl` flag\nor prebuilt binaries with `-gpl` postfix are used, then MobileFFmpeg is subject to the GPL v3.0 license.\n\nThe source code of all external libraries included is in compliance with their individual licenses.\n\n`openh264` source code included in this repository is licensed under the 2-clause BSD License but this license does \nnot cover the `MPEG LA` licensing fees. If you build `mobile-ffmpeg` with `openh264` and distribute that library, then \nyou are subject to pay `MPEG LA` licensing fees. Refer to [OpenH264 FAQ](https://www.openh264.org/faq.html) page for \nthe details. Please note that `mobile-ffmpeg` does not publish a binary with `openh264` inside.\n\n`strip-frameworks.sh` script included and distributed (until v4.x) is published under the\n[Apache License version 2.0](https://www.apache.org/licenses/LICENSE-2.0).\n\nIn test applications; embedded fonts are licensed under the\n[SIL Open Font License](https://opensource.org/licenses/OFL-1.1), other digital assets are published in the public\ndomain.\n\nPlease visit [License](https://github.com/tanersener/mobile-ffmpeg/wiki/License) page for the details.\n\n### 9. Patents\n\nIt is not clearly explained in their documentation but it is believed that `FFmpeg`, `kvazaar`, `x264` and `x265`\ninclude algorithms which are subject to software patents. If you live in a country where software algorithms are\npatentable then you'll probably need to pay royalty fees to patent holders. We are not lawyers though, so we recommend\nthat you seek legal advice first. See [FFmpeg Patent Mini-FAQ](https://ffmpeg.org/legal.html).\n\n`openh264` clearly states that it uses patented algorithms. Therefore, if you build mobile-ffmpeg with openh264 and\ndistribute that library, then you are subject to pay MPEG LA licensing fees. Refer to\n[OpenH264 FAQ](https://www.openh264.org/faq.html) page for the details.\n\n### 10. Contributing\n\nFeel free to submit issues or pull requests. \n\nPlease note that `master` branch includes only the latest released source code. Changes planned for the next release \nare implemented under the `development` branch. Therefore, if you want to create a pull request, please open it against\nthe `development`.\n\n### 11. See Also\n\n- [libav gas-preprocessor](https://github.com/libav/gas-preprocessor/raw/master/gas-preprocessor.pl)\n- [FFmpeg API Documentation](https://ffmpeg.org/doxygen/4.0/index.html)\n- [FFmpeg Wiki](https://trac.ffmpeg.org/wiki/WikiStart)\n- [FFmpeg External Library Licenses](https://www.ffmpeg.org/doxygen/4.0/md_LICENSE.html)\n"
        },
        {
          "name": "android.sh",
          "type": "blob",
          "size": 23.2265625,
          "content": "#!/bin/bash\n\n# ARCH INDEXES\nARCH_ARM_V7A=0\nARCH_ARM_V7A_NEON=1\nARCH_ARM64_V8A=2\nARCH_X86=3\nARCH_X86_64=4\n\n# LIBRARY INDEXES\nLIBRARY_FONTCONFIG=0\nLIBRARY_FREETYPE=1\nLIBRARY_FRIBIDI=2\nLIBRARY_GMP=3\nLIBRARY_GNUTLS=4\nLIBRARY_LAME=5\nLIBRARY_LIBASS=6\nLIBRARY_LIBICONV=7\nLIBRARY_LIBTHEORA=8\nLIBRARY_LIBVORBIS=9\nLIBRARY_LIBVPX=10\nLIBRARY_LIBWEBP=11\nLIBRARY_LIBXML2=12\nLIBRARY_OPENCOREAMR=13\nLIBRARY_SHINE=14\nLIBRARY_SPEEX=15\nLIBRARY_WAVPACK=16\nLIBRARY_KVAZAAR=17\nLIBRARY_X264=18\nLIBRARY_XVIDCORE=19\nLIBRARY_X265=20\nLIBRARY_LIBVIDSTAB=21\nLIBRARY_RUBBERBAND=22\nLIBRARY_LIBILBC=23\nLIBRARY_OPUS=24\nLIBRARY_SNAPPY=25\nLIBRARY_SOXR=26\nLIBRARY_LIBAOM=27\nLIBRARY_CHROMAPRINT=28\nLIBRARY_TWOLAME=29\nLIBRARY_SDL=30\nLIBRARY_TESSERACT=31\nLIBRARY_OPENH264=32\nLIBRARY_VO_AMRWBENC=33\nLIBRARY_GIFLIB=34\nLIBRARY_JPEG=35\nLIBRARY_LIBOGG=36\nLIBRARY_LIBPNG=37\nLIBRARY_LIBUUID=38\nLIBRARY_NETTLE=39\nLIBRARY_TIFF=40\nLIBRARY_EXPAT=41\nLIBRARY_SNDFILE=42\nLIBRARY_LEPTONICA=43\nLIBRARY_LIBSAMPLERATE=44\nLIBRARY_ZLIB=45\nLIBRARY_MEDIA_CODEC=46\nLIBRARY_CPU_FEATURES=47\n\n# ENABLE ARCH\nENABLED_ARCHITECTURES=(1 1 1 1 1)\n\n# ENABLE LIBRARIES\nENABLED_LIBRARIES=(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1)\n\nexport BASEDIR=$(pwd)\n\n# USING API LEVEL 24 / Android 7.0 (NOUGAT)\nexport API=24\n\nRECONF_LIBRARIES=()\nREBUILD_LIBRARIES=()\nREDOWNLOAD_LIBRARIES=()\n\nget_mobile_ffmpeg_version() {\n  local MOBILE_FFMPEG_VERSION=$(grep '#define MOBILE_FFMPEG_VERSION' ${BASEDIR}/android/app/src/main/cpp/mobileffmpeg.h | grep -Eo '\\\".*\\\"' | sed -e 's/\\\"//g')\n\n  echo ${MOBILE_FFMPEG_VERSION}\n}\n\ndisplay_help() {\n  COMMAND=$(echo $0 | sed -e 's/\\.\\///g')\n\n  echo -e \"\\n'\"$COMMAND\"' builds FFmpeg and MobileFFmpeg for Android platform. By default five Android ABIs (armeabi-v7a, armeabi-v7a-neon, arm64-v8a, x86 and x86_64) are built \\\nwithout any external libraries enabled. Options can be used to disable ABIs and/or enable external libraries. \\\nPlease note that GPL libraries (external libraries with GPL license) need --enable-gpl flag to be set explicitly. \\\nWhen compilation ends an Android Archive (AAR) file is created under the prebuilt folder.\\n\"\n\n  echo -e \"Usage: ./\"$COMMAND\" [OPTION]...\\n\"\n\n  echo -e \"Specify environment variables as VARIABLE=VALUE to override default build options.\\n\"\n\n  echo -e \"Options:\"\n\n  echo -e \"  -h, --help\\t\\t\\tdisplay this help and exit\"\n  echo -e \"  -v, --version\\t\\t\\tdisplay version information and exit\"\n  echo -e \"  -d, --debug\\t\\t\\tbuild with debug information\"\n  echo -e \"  -s, --speed\\t\\t\\toptimize for speed instead of size\"\n  echo -e \"  -l, --lts\\t\\t\\tbuild lts packages to support API 16+ devices\"\n  echo -e \"  -f, --force\\t\\t\\tignore warnings\\n\"\n\n  echo -e \"Licensing options:\"\n\n  echo -e \"  --enable-gpl\\t\\t\\tallow use of GPL libraries, created libs will be licensed under GPLv3.0 [no]\\n\"\n\n  echo -e \"Platforms:\"\n\n  echo -e \"  --disable-arm-v7a\\t\\tdo not build arm-v7a platform [yes]\"\n  echo -e \"  --disable-arm-v7a-neon\\tdo not build arm-v7a-neon platform [yes]\"\n  echo -e \"  --disable-arm64-v8a\\t\\tdo not build arm64-v8a platform [yes]\"\n  echo -e \"  --disable-x86\\t\\t\\tdo not build x86 platform [yes]\"\n  echo -e \"  --disable-x86-64\\t\\tdo not build x86-64 platform [yes]\\n\"\n\n  echo -e \"Libraries:\"\n\n  echo -e \"  --full\\t\\t\\tenables all external libraries\"\n  echo -e \"  --enable-android-media-codec\\tbuild with built-in Android MediaCodec support[no]\"\n  echo -e \"  --enable-android-zlib\\t\\tbuild with built-in zlib support[no]\"\n  echo -e \"  --enable-chromaprint\\t\\tbuild with chromaprint [no]\"\n  echo -e \"  --enable-fontconfig\\t\\tbuild with fontconfig [no]\"\n  echo -e \"  --enable-freetype\\t\\tbuild with freetype [no]\"\n  echo -e \"  --enable-fribidi\\t\\tbuild with fribidi [no]\"\n  echo -e \"  --enable-gmp\\t\\t\\tbuild with gmp [no]\"\n  echo -e \"  --enable-gnutls\\t\\tbuild with gnutls [no]\"\n  echo -e \"  --enable-kvazaar\\t\\tbuild with kvazaar [no]\"\n  echo -e \"  --enable-lame\\t\\t\\tbuild with lame [no]\"\n  echo -e \"  --enable-libaom\\t\\tbuild with libaom [no]\"\n  echo -e \"  --enable-libass\\t\\tbuild with libass [no]\"\n  echo -e \"  --enable-libiconv\\t\\tbuild with libiconv [no]\"\n  echo -e \"  --enable-libilbc\\t\\tbuild with libilbc [no]\"\n  echo -e \"  --enable-libtheora\\t\\tbuild with libtheora [no]\"\n  echo -e \"  --enable-libvorbis\\t\\tbuild with libvorbis [no]\"\n  echo -e \"  --enable-libvpx\\t\\tbuild with libvpx [no]\"\n  echo -e \"  --enable-libwebp\\t\\tbuild with libwebp [no]\"\n  echo -e \"  --enable-libxml2\\t\\tbuild with libxml2 [no]\"\n  echo -e \"  --enable-opencore-amr\\t\\tbuild with opencore-amr [no]\"\n  echo -e \"  --enable-openh264\\t\\tbuild with openh264 [no]\"\n  echo -e \"  --enable-opus\\t\\t\\tbuild with opus [no]\"\n  echo -e \"  --enable-sdl\\t\\t\\tbuild with sdl [no]\"\n  echo -e \"  --enable-shine\\t\\tbuild with shine [no]\"\n  echo -e \"  --enable-snappy\\t\\tbuild with snappy [no]\"\n  echo -e \"  --enable-soxr\\t\\t\\tbuild with soxr [no]\"\n  echo -e \"  --enable-speex\\t\\tbuild with speex [no]\"\n  echo -e \"  --enable-tesseract\\t\\tbuild with tesseract [no]\"\n  echo -e \"  --enable-twolame\\t\\tbuild with twolame [no]\"\n  echo -e \"  --enable-vo-amrwbenc\\t\\tbuild with vo-amrwbenc [no]\"\n  echo -e \"  --enable-wavpack\\t\\tbuild with wavpack [no]\\n\"\n\n  echo -e \"GPL libraries:\"\n\n  echo -e \"  --enable-libvidstab\\t\\tbuild with libvidstab [no]\"\n  echo -e \"  --enable-rubberband\\t\\tbuild with rubber band [no]\"\n  echo -e \"  --enable-x264\\t\\t\\tbuild with x264 [no]\"\n  echo -e \"  --enable-x265\\t\\t\\tbuild with x265 [no]\"\n  echo -e \"  --enable-xvidcore\\t\\tbuild with xvidcore [no]\\n\"\n\n  echo -e \"Advanced options:\"\n\n  echo -e \"  --reconf-LIBRARY\\t\\trun autoreconf before building LIBRARY [no]\"\n  echo -e \"  --redownload-LIBRARY\\t\\tdownload LIBRARY even it is detected as already downloaded [no]\"\n  echo -e \"  --rebuild-LIBRARY\\t\\tbuild LIBRARY even it is detected as already built [no]\\n\"\n}\n\ndisplay_version() {\n  COMMAND=$(echo $0 | sed -e 's/\\.\\///g')\n\n  echo -e \"\\\n$COMMAND v$(get_mobile_ffmpeg_version)\\n\\\nCopyright (c) 2018 Taner Sener\\n\\\nLicense LGPLv3.0: GNU LGPL version 3 or later\\n\\\n<https://www.gnu.org/licenses/lgpl-3.0.en.html>\\n\\\nThis is free software: you can redistribute it and/or modify it under the terms of the \\\nGNU Lesser General Public License as published by the Free Software Foundation, \\\neither version 3 of the License, or (at your option) any later version.\"\n}\n\nskip_library() {\n  SKIP_VARIABLE=$(echo \"SKIP_$1\" | sed \"s/\\-/\\_/g\")\n\n  export ${SKIP_VARIABLE}=1\n}\n\nno_output_redirection() {\n  export NO_OUTPUT_REDIRECTION=1\n}\n\nno_workspace_cleanup_library() {\n  NO_WORKSPACE_CLEANUP_VARIABLE=$(echo \"NO_WORKSPACE_CLEANUP_$1\" | sed \"s/\\-/\\_/g\")\n\n  export ${NO_WORKSPACE_CLEANUP_VARIABLE}=1\n}\n\nno_link_time_optimization() {\n  export NO_LINK_TIME_OPTIMIZATION=1\n}\n\nenable_debug() {\n  export MOBILE_FFMPEG_DEBUG=\"-g\"\n\n  BUILD_TYPE_ID+=\"debug \"\n}\n\noptimize_for_speed() {\n  export MOBILE_FFMPEG_OPTIMIZED_FOR_SPEED=\"1\"\n}\n\nenable_lts_build() {\n  export MOBILE_FFMPEG_LTS_BUILD=\"1\"\n\n  # USING API LEVEL 16 / Android 4.1 (JELLY BEAN)\n  export API=16\n}\n\nreconf_library() {\n  local RECONF_VARIABLE=$(echo \"RECONF_$1\" | sed \"s/\\-/\\_/g\")\n  local library_supported=0\n\n  for library in {1..45}; do\n    library_name=$(get_library_name $((library - 1)))\n\n    if [[ $1 != \"ffmpeg\" ]] && [[ ${library_name} == $1 ]]; then\n      export ${RECONF_VARIABLE}=1\n      RECONF_LIBRARIES+=($1)\n      library_supported=1\n    fi\n  done\n\n  if [[ ${library_supported} -eq 0 ]]; then\n    echo -e \"INFO: --reconf flag detected for library $1 is not supported.\\n\" 1>>${BASEDIR}/build.log 2>&1\n  fi\n}\n\nrebuild_library() {\n  local REBUILD_VARIABLE=$(echo \"REBUILD_$1\" | sed \"s/\\-/\\_/g\")\n  local library_supported=0\n\n  for library in {0..47}; do\n    library_name=$(get_library_name ${library})\n\n    if [[ $1 != \"ffmpeg\" ]] && [[ ${library_name} == $1 ]]; then\n      export ${REBUILD_VARIABLE}=1\n      REBUILD_LIBRARIES+=($1)\n      library_supported=1\n    fi\n  done\n\n  if [[ ${library_supported} -eq 0 ]]; then\n    echo -e \"INFO: --rebuild flag detected for library $1 is not supported.\\n\" 1>>${BASEDIR}/build.log 2>&1\n  fi\n}\n\nredownload_library() {\n  local REDOWNLOAD_VARIABLE=$(echo \"REDOWNLOAD_$1\" | sed \"s/\\-/\\_/g\")\n  local library_supported=0\n\n  for library in {0..47}; do\n    library_name=$(get_library_name ${library})\n\n    if [[ ${library_name} == $1 ]]; then\n      export ${REDOWNLOAD_VARIABLE}=1\n      REDOWNLOAD_LIBRARIES+=($1)\n      library_supported=1\n    fi\n  done\n\n  if [[ \"ffmpeg\" == $1 ]]; then\n    export ${REDOWNLOAD_VARIABLE}=1\n    REDOWNLOAD_LIBRARIES+=($1)\n    library_supported=1\n  fi\n\n  if [[ ${library_supported} -eq 0 ]]; then\n    echo -e \"INFO: --redownload flag detected for library $1 is not supported.\\n\" 1>>${BASEDIR}/build.log 2>&1\n  fi\n}\n\nenable_library() {\n  set_library $1 1\n}\n\nset_library() {\n  case $1 in\n  android-media-codec)\n    ENABLED_LIBRARIES[LIBRARY_MEDIA_CODEC]=$2\n    ;;\n  android-zlib)\n    ENABLED_LIBRARIES[LIBRARY_ZLIB]=$2\n    ;;\n  chromaprint)\n    ENABLED_LIBRARIES[LIBRARY_CHROMAPRINT]=$2\n    ;;\n  fontconfig)\n    ENABLED_LIBRARIES[LIBRARY_FONTCONFIG]=$2\n    ENABLED_LIBRARIES[LIBRARY_LIBUUID]=$2\n    ENABLED_LIBRARIES[LIBRARY_EXPAT]=$2\n    ENABLED_LIBRARIES[LIBRARY_LIBICONV]=$2\n    set_library \"freetype\" $2\n    ;;\n  freetype)\n    ENABLED_LIBRARIES[LIBRARY_FREETYPE]=$2\n    ENABLED_LIBRARIES[LIBRARY_ZLIB]=$2\n    set_library \"libpng\" $2\n    ;;\n  fribidi)\n    ENABLED_LIBRARIES[LIBRARY_FRIBIDI]=$2\n    ;;\n  gmp)\n    ENABLED_LIBRARIES[LIBRARY_GMP]=$2\n    ;;\n  gnutls)\n    ENABLED_LIBRARIES[LIBRARY_GNUTLS]=$2\n    ENABLED_LIBRARIES[LIBRARY_ZLIB]=$2\n    set_library \"nettle\" $2\n    set_library \"gmp\" $2\n    set_library \"libiconv\" $2\n    ;;\n  kvazaar)\n    ENABLED_LIBRARIES[LIBRARY_KVAZAAR]=$2\n    ;;\n  lame)\n    ENABLED_LIBRARIES[LIBRARY_LAME]=$2\n    set_library \"libiconv\" $2\n    ;;\n  libaom)\n    ENABLED_LIBRARIES[LIBRARY_LIBAOM]=$2\n    ;;\n  libass)\n    ENABLED_LIBRARIES[LIBRARY_LIBASS]=$2\n    ENABLED_LIBRARIES[LIBRARY_LIBUUID]=$2\n    ENABLED_LIBRARIES[LIBRARY_EXPAT]=$2\n    set_library \"freetype\" $2\n    set_library \"fribidi\" $2\n    set_library \"fontconfig\" $2\n    set_library \"libiconv\" $2\n    ;;\n  libiconv)\n    ENABLED_LIBRARIES[LIBRARY_LIBICONV]=$2\n    ;;\n  libilbc)\n    ENABLED_LIBRARIES[LIBRARY_LIBILBC]=$2\n    ;;\n  libpng)\n    ENABLED_LIBRARIES[LIBRARY_LIBPNG]=$2\n    ENABLED_LIBRARIES[LIBRARY_ZLIB]=$2\n    ;;\n  libtheora)\n    ENABLED_LIBRARIES[LIBRARY_LIBTHEORA]=$2\n    ENABLED_LIBRARIES[LIBRARY_LIBOGG]=$2\n    set_library \"libvorbis\" $2\n    ;;\n  libvidstab)\n    ENABLED_LIBRARIES[LIBRARY_LIBVIDSTAB]=$2\n    ;;\n  libvorbis)\n    ENABLED_LIBRARIES[LIBRARY_LIBVORBIS]=$2\n    ENABLED_LIBRARIES[LIBRARY_LIBOGG]=$2\n    ;;\n  libvpx)\n    ENABLED_LIBRARIES[LIBRARY_LIBVPX]=$2\n    ;;\n  libwebp)\n    ENABLED_LIBRARIES[LIBRARY_LIBWEBP]=$2\n    ENABLED_LIBRARIES[LIBRARY_GIFLIB]=$2\n    ENABLED_LIBRARIES[LIBRARY_JPEG]=$2\n    set_library \"tiff\" $2\n    set_library \"libpng\" $2\n    ;;\n  libxml2)\n    ENABLED_LIBRARIES[LIBRARY_LIBXML2]=$2\n    set_library \"libiconv\" $2\n    ;;\n  opencore-amr)\n    ENABLED_LIBRARIES[LIBRARY_OPENCOREAMR]=$2\n    ;;\n  openh264)\n    ENABLED_LIBRARIES[LIBRARY_OPENH264]=$2\n    ;;\n  opus)\n    ENABLED_LIBRARIES[LIBRARY_OPUS]=$2\n    ;;\n  rubberband)\n    ENABLED_LIBRARIES[LIBRARY_RUBBERBAND]=$2\n    ENABLED_LIBRARIES[LIBRARY_SNDFILE]=$2\n    ENABLED_LIBRARIES[LIBRARY_LIBSAMPLERATE]=$2\n    ;;\n  sdl)\n    ENABLED_LIBRARIES[LIBRARY_SDL]=$2\n    ;;\n  shine)\n    ENABLED_LIBRARIES[LIBRARY_SHINE]=$2\n    ;;\n  snappy)\n    ENABLED_LIBRARIES[LIBRARY_SNAPPY]=$2\n    ENABLED_LIBRARIES[LIBRARY_ZLIB]=$2\n    ;;\n  soxr)\n    ENABLED_LIBRARIES[LIBRARY_SOXR]=$2\n    ;;\n  speex)\n    ENABLED_LIBRARIES[LIBRARY_SPEEX]=$2\n    ;;\n  tesseract)\n    ENABLED_LIBRARIES[LIBRARY_TESSERACT]=$2\n    ENABLED_LIBRARIES[LIBRARY_LEPTONICA]=$2\n    ENABLED_LIBRARIES[LIBRARY_LIBWEBP]=$2\n    ENABLED_LIBRARIES[LIBRARY_GIFLIB]=$2\n    ENABLED_LIBRARIES[LIBRARY_JPEG]=$2\n    ENABLED_LIBRARIES[LIBRARY_ZLIB]=$2\n    set_library \"tiff\" $2\n    set_library \"libpng\" $2\n    ;;\n  twolame)\n    ENABLED_LIBRARIES[LIBRARY_TWOLAME]=$2\n    ENABLED_LIBRARIES[LIBRARY_SNDFILE]=$2\n    ;;\n  vo-amrwbenc)\n    ENABLED_LIBRARIES[LIBRARY_VO_AMRWBENC]=$2\n    ;;\n  wavpack)\n    ENABLED_LIBRARIES[LIBRARY_WAVPACK]=$2\n    ;;\n  x264)\n    ENABLED_LIBRARIES[LIBRARY_X264]=$2\n    ;;\n  x265)\n    ENABLED_LIBRARIES[LIBRARY_X265]=$2\n    ;;\n  xvidcore)\n    ENABLED_LIBRARIES[LIBRARY_XVIDCORE]=$2\n    ;;\n  expat | giflib | jpeg | leptonica | libogg | libsamplerate | libsndfile | libuuid)\n    # THESE LIBRARIES ARE NOT ENABLED DIRECTLY\n    ;;\n  nettle)\n    ENABLED_LIBRARIES[LIBRARY_NETTLE]=$2\n    set_library \"gmp\" $2\n    ;;\n  tiff)\n    ENABLED_LIBRARIES[LIBRARY_TIFF]=$2\n    ENABLED_LIBRARIES[LIBRARY_JPEG]=$2\n    ;;\n  *)\n    print_unknown_library $1\n    ;;\n  esac\n}\n\ndisable_arch() {\n  set_arch $1 0\n}\n\nset_arch() {\n  case $1 in\n  arm-v7a)\n    ENABLED_ARCHITECTURES[ARCH_ARM_V7A]=$2\n    ;;\n  arm-v7a-neon)\n    ENABLED_ARCHITECTURES[ARCH_ARM_V7A_NEON]=$2\n    ;;\n  arm64-v8a)\n    ENABLED_ARCHITECTURES[ARCH_ARM64_V8A]=$2\n    ;;\n  x86)\n    ENABLED_ARCHITECTURES[ARCH_X86]=$2\n    ;;\n  x86-64)\n    ENABLED_ARCHITECTURES[ARCH_X86_64]=$2\n    ;;\n  *)\n    print_unknown_platform $1\n    ;;\n  esac\n}\n\nprint_unknown_option() {\n  echo -e \"Unknown option \\\"$1\\\".\\nSee $0 --help for available options.\"\n  exit 1\n}\n\nprint_unknown_library() {\n  echo -e \"Unknown library \\\"$1\\\".\\nSee $0 --help for available libraries.\"\n  exit 1\n}\n\nprint_unknown_platform() {\n  echo -e \"Unknown platform \\\"$1\\\".\\nSee $0 --help for available platforms.\"\n  exit 1\n}\n\nprint_enabled_architectures() {\n  echo -n \"Architectures: \"\n\n  let enabled=0\n  for print_arch in {0..4}; do\n    if [[ ${ENABLED_ARCHITECTURES[$print_arch]} -eq 1 ]]; then\n      if [[ ${enabled} -ge 1 ]]; then\n        echo -n \", \"\n      fi\n      echo -n $(get_arch_name $print_arch)\n      enabled=$((${enabled} + 1))\n    fi\n  done\n\n  if [ ${enabled} -gt 0 ]; then\n    echo \"\"\n  else\n    echo \"none\"\n  fi\n}\n\nprint_enabled_libraries() {\n  echo -n \"Libraries: \"\n\n  let enabled=0\n\n  for library in {45..47} {0..33}; do\n    if [[ ${ENABLED_LIBRARIES[$library]} -eq 1 ]]; then\n      if [[ ${enabled} -ge 1 ]]; then\n        echo -n \", \"\n      fi\n      echo -n $(get_library_name $library)\n      enabled=$((${enabled} + 1))\n    fi\n  done\n\n  if [ ${enabled} -gt 0 ]; then\n    echo \"\"\n  else\n    echo \"none\"\n  fi\n}\n\nprint_reconfigure_requested_libraries() {\n  local counter=0\n\n  for RECONF_LIBRARY in \"${RECONF_LIBRARIES[@]}\"; do\n    if [[ ${counter} -eq 0 ]]; then\n      echo -n \"Reconfigure: \"\n    else\n      echo -n \", \"\n    fi\n\n    echo -n ${RECONF_LIBRARY}\n\n    counter=$((${counter} + 1))\n  done\n\n  if [[ ${counter} -gt 0 ]]; then\n    echo \"\"\n  fi\n}\n\nprint_rebuild_requested_libraries() {\n  local counter=0\n\n  for REBUILD_LIBRARY in \"${REBUILD_LIBRARIES[@]}\"; do\n    if [[ ${counter} -eq 0 ]]; then\n      echo -n \"Rebuild: \"\n    else\n      echo -n \", \"\n    fi\n\n    echo -n ${REBUILD_LIBRARY}\n\n    counter=$((${counter} + 1))\n  done\n\n  if [[ ${counter} -gt 0 ]]; then\n    echo \"\"\n  fi\n}\n\nprint_redownload_requested_libraries() {\n  local counter=0\n\n  for REDOWNLOAD_LIBRARY in \"${REDOWNLOAD_LIBRARIES[@]}\"; do\n    if [[ ${counter} -eq 0 ]]; then\n      echo -n \"Redownload: \"\n    else\n      echo -n \", \"\n    fi\n\n    echo -n ${REDOWNLOAD_LIBRARY}\n\n    counter=$((${counter} + 1))\n  done\n\n  if [[ ${counter} -gt 0 ]]; then\n    echo \"\"\n  fi\n}\n\nbuild_application_mk() {\n  if [[ ! -z ${MOBILE_FFMPEG_LTS_BUILD} ]]; then\n    local LTS_BUILD_FLAG=\"-DMOBILE_FFMPEG_LTS \"\n  fi\n\n  if [[ ${ENABLED_LIBRARIES[$LIBRARY_X265]} -eq 1 ]] || [[ ${ENABLED_LIBRARIES[$LIBRARY_TESSERACT]} -eq 1 ]] || [[ ${ENABLED_LIBRARIES[$LIBRARY_OPENH264]} -eq 1 ]] || [[ ${ENABLED_LIBRARIES[$LIBRARY_SNAPPY]} -eq 1 ]] || [[ ${ENABLED_LIBRARIES[$LIBRARY_RUBBERBAND]} -eq 1 ]]; then\n    local APP_STL=\"c++_shared\"\n  else\n    local APP_STL=\"none\"\n  fi\n\n  local BUILD_DATE=\"-DMOBILE_FFMPEG_BUILD_DATE=$(date +%Y%m%d 2>>${BASEDIR}/build.log)\"\n\n  rm -f ${BASEDIR}/android/jni/Application.mk\n\n  cat >\"${BASEDIR}/android/jni/Application.mk\" <<EOF\nAPP_OPTIM := release\n\nAPP_ABI := ${ANDROID_ARCHITECTURES}\n\nAPP_STL := ${APP_STL}\n\nAPP_PLATFORM := android-${API}\n\nAPP_CFLAGS := -O3 -DANDROID ${LTS_BUILD_FLAG}${BUILD_DATE} -Wall -Wno-deprecated-declarations -Wno-pointer-sign -Wno-switch -Wno-unused-result -Wno-unused-variable\n\nAPP_LDFLAGS := -Wl,--hash-style=both\nEOF\n}\n\nif [[ -z ${ANDROID_NDK_ROOT} ]]; then\n  echo \"ANDROID_NDK_ROOT not defined\"\n  exit 1\nfi\n\nif [[ -z ${ANDROID_HOME} ]]; then\n  echo \"ANDROID_HOME not defined\"\n  exit 1\nfi\n\n# ENABLE COMMON FUNCTIONS\n. ${BASEDIR}/build/android-common.sh\n\nDETECTED_NDK_VERSION=$(grep -Eo Revision.* ${ANDROID_NDK_ROOT}/source.properties | sed 's/Revision//g;s/=//g;s/ //g')\n\necho -e \"\\nINFO: Using Android NDK v${DETECTED_NDK_VERSION} provided at ${ANDROID_NDK_ROOT}\\n\" 1>>${BASEDIR}/build.log 2>&1\necho -e \"INFO: Build options: $*\\n\" 1>>${BASEDIR}/build.log 2>&1\n\n# CLEAR OLD NATIVE LIBS\nrm -rf ${BASEDIR}/android/libs 1>>${BASEDIR}/build.log 2>&1\nrm -rf ${BASEDIR}/android/obj 1>>${BASEDIR}/build.log 2>&1\n\nGPL_ENABLED=\"no\"\nDISPLAY_HELP=\"\"\nBUILD_LTS=\"\"\nBUILD_FULL=\"\"\nBUILD_TYPE_ID=\"\"\nBUILD_VERSION=$(git describe --tags 2>>${BASEDIR}/build.log)\n\nwhile [ ! $# -eq 0 ]; do\n\n  case $1 in\n  -h | --help)\n    DISPLAY_HELP=\"1\"\n    ;;\n  -v | --version)\n    display_version\n    exit 0\n    ;;\n  --skip-*)\n    SKIP_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    skip_library ${SKIP_LIBRARY}\n    ;;\n  --no-output-redirection)\n    no_output_redirection\n    ;;\n  --no-workspace-cleanup-*)\n    NO_WORKSPACE_CLEANUP_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-[A-Za-z]*-[A-Za-z]*-//g')\n\n    no_workspace_cleanup_library ${NO_WORKSPACE_CLEANUP_LIBRARY}\n    ;;\n  --no-link-time-optimization)\n    no_link_time_optimization\n    ;;\n  -d | --debug)\n    enable_debug\n    ;;\n  -s | --speed)\n    optimize_for_speed\n    ;;\n  -l | --lts)\n    BUILD_LTS=\"1\"\n    ;;\n  -f | --force)\n    BUILD_FORCE=\"1\"\n    ;;\n  --reconf-*)\n    CONF_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    reconf_library ${CONF_LIBRARY}\n    ;;\n  --rebuild-*)\n    BUILD_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    rebuild_library ${BUILD_LIBRARY}\n    ;;\n  --redownload-*)\n    DOWNLOAD_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    redownload_library ${DOWNLOAD_LIBRARY}\n    ;;\n  --full)\n    BUILD_FULL=\"1\"\n    ;;\n  --enable-gpl)\n    GPL_ENABLED=\"yes\"\n    ;;\n  --enable-*)\n    ENABLED_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    enable_library ${ENABLED_LIBRARY}\n    ;;\n  --disable-*)\n    DISABLED_ARCH=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    disable_arch ${DISABLED_ARCH}\n    ;;\n  *)\n    print_unknown_option $1\n    ;;\n  esac\n  shift\ndone\n\n# DETECT BUILD TYPE\nrm -f ${BASEDIR}/android/app/build.gradle 1>>${BASEDIR}/build.log 2>&1\nif [[ ! -z ${BUILD_LTS} ]]; then\n  enable_lts_build\n  BUILD_TYPE_ID+=\"LTS \"\n\n  cp ${BASEDIR}/tools/release/android/build.lts.gradle ${BASEDIR}/android/app/build.gradle 1>>${BASEDIR}/build.log 2>&1\nelse\n  cp ${BASEDIR}/tools/release/android/build.gradle ${BASEDIR}/android/app/build.gradle 1>>${BASEDIR}/build.log 2>&1\nfi\n\nif [[ ! -z ${DISPLAY_HELP} ]]; then\n  display_help\n  exit 0\nfi\n\nif [[ -n ${BUILD_FULL} ]]; then\n  for library in {0..46}; do\n    if [ ${GPL_ENABLED} == \"yes\" ]; then\n      enable_library $(get_library_name $library)\n    else\n      if [[ $library -ne 18 ]] && [[ $library -ne 19 ]] && [[ $library -ne 20 ]] && [[ $library -ne 21 ]] && [[ $library -ne 22 ]]; then\n        enable_library $(get_library_name $library)\n      fi\n    fi\n  done\nfi\n\nif [[ -z ${BUILD_VERSION} ]]; then\n  echo -e \"\\nerror: Can not run git commands in this folder. See build.log.\\n\"\n  exit 1\nfi\n\necho -e \"\\nBuilding mobile-ffmpeg ${BUILD_TYPE_ID}library for Android\\n\"\necho -e -n \"INFO: Building mobile-ffmpeg ${BUILD_VERSION} ${BUILD_TYPE_ID}library for Android: \" 1>>${BASEDIR}/build.log 2>&1\necho -e $(date) 1>>${BASEDIR}/build.log 2>&1\n\nprint_enabled_architectures\nprint_enabled_libraries\nprint_reconfigure_requested_libraries\nprint_rebuild_requested_libraries\nprint_redownload_requested_libraries\n\n# CHECK GPL LIBRARIES\nfor gpl_library in {18,19,20,21,22}; do\n  if [[ ${ENABLED_LIBRARIES[$gpl_library]} -eq 1 ]]; then\n    library_name=$(get_library_name ${gpl_library})\n\n    if [ ${GPL_ENABLED} != \"yes\" ]; then\n      echo -e \"\\n(*) Invalid configuration detected. GPL library ${library_name} enabled without --enable-gpl flag.\\n\"\n      echo -e \"\\n(*) Invalid configuration detected. GPL library ${library_name} enabled without --enable-gpl flag.\\n\" 1>>${BASEDIR}/build.log 2>&1\n      exit 1\n    else\n      DOWNLOAD_RESULT=$(download_gpl_library_source ${library_name})\n      if [[ ${DOWNLOAD_RESULT} -ne 0 ]]; then\n        echo -e \"\\n(*) Failed to download GPL library ${library_name} source. Please check build.log file for details. If the problem persists refer to offline building instructions.\\n\"\n        echo -e \"\\n(*) Failed to download GPL library ${library_name} source.\\n\" 1>>${BASEDIR}/build.log 2>&1\n        exit 1\n      fi\n    fi\n  fi\ndone\n\n# SAVE API VALUE\nexport ORIGINAL_API=${API}\n\nfor run_arch in {0..4}; do\n  if [[ ${ENABLED_ARCHITECTURES[$run_arch]} -eq 1 ]]; then\n    if [[ (${run_arch} -eq ${ARCH_ARM64_V8A} || ${run_arch} -eq ${ARCH_X86_64}) && ${API} -lt 21 ]]; then\n\n      # 64 bit ABIs supported after API 21\n      export API=21\n    else\n      export API=${ORIGINAL_API}\n    fi\n\n    export ARCH=$(get_arch_name $run_arch)\n    export TOOLCHAIN=$(get_toolchain)\n    export TOOLCHAIN_ARCH=$(get_toolchain_arch)\n\n    . ${BASEDIR}/build/main-android.sh \"${ENABLED_LIBRARIES[@]}\" || exit 1\n\n    # CLEAR FLAGS\n    for library in {0..47}; do\n      library_name=$(get_library_name ${library})\n      unset $(echo \"OK_${library_name}\" | sed \"s/\\-/\\_/g\")\n      unset $(echo \"DEPENDENCY_REBUILT_${library_name}\" | sed \"s/\\-/\\_/g\")\n    done\n  fi\ndone\n\nexport API=${ORIGINAL_API}\n\nrm -f ${BASEDIR}/android/build/.armv7 1>>${BASEDIR}/build.log 2>&1\nrm -f ${BASEDIR}/android/build/.armv7neon 1>>${BASEDIR}/build.log 2>&1\nANDROID_ARCHITECTURES=\"\"\nif [[ ${ENABLED_ARCHITECTURES[0]} -eq 1 ]] || [[ ${ENABLED_ARCHITECTURES[1]} -eq 1 ]]; then\n  ANDROID_ARCHITECTURES+=\"$(get_android_arch 0) \"\nfi\nif [[ ${ENABLED_ARCHITECTURES[0]} -eq 1 ]]; then\n  mkdir -p ${BASEDIR}/android/build 1>>${BASEDIR}/build.log 2>&1\n  cat >\"${BASEDIR}/android/build/.armv7\" <<EOF\nEOF\nfi\nif [[ ${ENABLED_ARCHITECTURES[1]} -eq 1 ]]; then\n  mkdir -p ${BASEDIR}/android/build 1>>${BASEDIR}/build.log 2>&1\n  cat >\"${BASEDIR}/android/build/.armv7neon\" <<EOF\nEOF\nfi\nif [[ ${ENABLED_ARCHITECTURES[2]} -eq 1 ]]; then\n  ANDROID_ARCHITECTURES+=\"$(get_android_arch 2) \"\nfi\nif [[ ${ENABLED_ARCHITECTURES[3]} -eq 1 ]]; then\n  ANDROID_ARCHITECTURES+=\"$(get_android_arch 3) \"\nfi\nif [[ ${ENABLED_ARCHITECTURES[4]} -eq 1 ]]; then\n  ANDROID_ARCHITECTURES+=\"$(get_android_arch 4) \"\nfi\n\nif [[ ! -z ${ANDROID_ARCHITECTURES} ]]; then\n\n  echo -n -e \"\\nmobile-ffmpeg: \"\n\n  build_application_mk\n\n  MOBILE_FFMPEG_AAR=${BASEDIR}/prebuilt/android-aar/mobile-ffmpeg\n\n  # BUILDING ANDROID ARCHIVE LIBRARY\n  rm -rf ${BASEDIR}/android/libs 1>>${BASEDIR}/build.log 2>&1\n\n  mkdir -p ${MOBILE_FFMPEG_AAR} 1>>${BASEDIR}/build.log 2>&1\n\n  cd ${BASEDIR}/android 1>>${BASEDIR}/build.log 2>&1\n\n  ${ANDROID_NDK_ROOT}/ndk-build -B 1>>${BASEDIR}/build.log 2>&1\n\n  if [ $? -eq 0 ]; then\n    echo \"ok\"\n  else\n    echo \"failed\"\n    exit 1\n  fi\n\n  echo -e -n \"\\n\\nCreating Android archive under prebuilt/android-aar: \"\n\n  ./gradlew app:clean app:assembleRelease app:testReleaseUnitTest 1>>${BASEDIR}/build.log 2>&1\n\n  if [ $? -ne 0 ]; then\n    echo -e \"failed\\n\"\n    exit 1\n  fi\n\n  cp ${BASEDIR}/android/app/build/outputs/aar/mobile-ffmpeg-release.aar ${MOBILE_FFMPEG_AAR}/mobile-ffmpeg.aar 1>>${BASEDIR}/build.log 2>&1\n\n  if [ $? -ne 0 ]; then\n    echo -e \"failed\\n\"\n    exit 1\n  fi\n\n  echo -e \"Created mobile-ffmpeg Android archive successfully.\\n\" 1>>${BASEDIR}/build.log 2>&1\n\n  echo -e \"ok\\n\"\nfi\n"
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "ios.sh",
          "type": "blob",
          "size": 47.9521484375,
          "content": "#!/bin/bash\n\n# ARCH INDEXES\nARCH_ARMV7=0\nARCH_ARMV7S=1\nARCH_ARM64=2\nARCH_ARM64E=3\nARCH_I386=4\nARCH_X86_64=5\nARCH_X86_64_MAC_CATALYST=6\n\n# LIBRARY INDEXES\nLIBRARY_FONTCONFIG=0\nLIBRARY_FREETYPE=1\nLIBRARY_FRIBIDI=2\nLIBRARY_GMP=3\nLIBRARY_GNUTLS=4\nLIBRARY_LAME=5\nLIBRARY_LIBASS=6\nLIBRARY_LIBTHEORA=7\nLIBRARY_LIBVORBIS=8\nLIBRARY_LIBVPX=9\nLIBRARY_LIBWEBP=10\nLIBRARY_LIBXML2=11\nLIBRARY_OPENCOREAMR=12\nLIBRARY_SHINE=13\nLIBRARY_SPEEX=14\nLIBRARY_WAVPACK=15\nLIBRARY_KVAZAAR=16\nLIBRARY_X264=17\nLIBRARY_XVIDCORE=18\nLIBRARY_X265=19\nLIBRARY_LIBVIDSTAB=20\nLIBRARY_RUBBERBAND=21\nLIBRARY_LIBILBC=22\nLIBRARY_OPUS=23\nLIBRARY_SNAPPY=24\nLIBRARY_SOXR=25\nLIBRARY_LIBAOM=26\nLIBRARY_CHROMAPRINT=27\nLIBRARY_TWOLAME=28\nLIBRARY_SDL=29\nLIBRARY_TESSERACT=30\nLIBRARY_OPENH264=31\nLIBRARY_VO_AMRWBENC=32\nLIBRARY_GIFLIB=33\nLIBRARY_JPEG=34\nLIBRARY_LIBOGG=35\nLIBRARY_LIBPNG=36\nLIBRARY_NETTLE=37\nLIBRARY_TIFF=38\nLIBRARY_EXPAT=39\nLIBRARY_SNDFILE=40\nLIBRARY_LEPTONICA=41\nLIBRARY_LIBSAMPLERATE=42\nLIBRARY_ZLIB=43\nLIBRARY_AUDIOTOOLBOX=44\nLIBRARY_BZIP2=45\nLIBRARY_VIDEOTOOLBOX=46\nLIBRARY_AVFOUNDATION=47\nLIBRARY_LIBICONV=48\nLIBRARY_LIBUUID=49\n\n# ENABLE ARCH\nENABLED_ARCHITECTURES=(1 1 1 1 1 1 1)\n\n# ENABLE LIBRARIES\nENABLED_LIBRARIES=(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)\n\nexport BASEDIR=$(pwd)\n\nRECONF_LIBRARIES=()\nREBUILD_LIBRARIES=()\nREDOWNLOAD_LIBRARIES=()\n\n# CHECKING IF XCODE IS INSTALLED\nif ! [ -x \"$(command -v xcrun)\" ]; then\n  echo -e \"\\n(*) xcrun command not found. Please check your Xcode installation.\\n\"\n  exit 1\nfi\n\n# USE 12.1 AS DEFAULT IOS_MIN_VERSION\nexport IOS_MIN_VERSION=12.1\n\nget_mobile_ffmpeg_version() {\n  local MOBILE_FFMPEG_VERSION=$(grep 'const MOBILE_FFMPEG_VERSION' \"${BASEDIR}/ios/src/MobileFFmpeg.m\" | grep -Eo '\\\".*\\\"' | sed -e 's/\\\"//g')\n\n  if [[ -z ${MOBILE_FFMPEG_LTS_BUILD} ]]; then\n    echo \"${MOBILE_FFMPEG_VERSION}\"\n  else\n    echo \"${MOBILE_FFMPEG_VERSION}.LTS\"\n  fi\n}\n\ndisplay_help() {\n  COMMAND=$(echo \"$0\" | sed -e 's/\\.\\///g')\n\n  echo -e \"\\n$COMMAND builds FFmpeg and MobileFFmpeg for iOS platform. By default seven architectures (armv7, armv7s, arm64, arm64e, i386, x86-64 and x86-64-mac-catalyst) are built without any external libraries enabled. Options can be used to disable architectures and/or enable external libraries. Please note that GPL libraries (external libraries with GPL license) need --enable-gpl flag to be set explicitly. When compilation ends, library bundles are created under the prebuilt folder. By default framework bundles and universal fat binaries are created. If --xcframework option is provided then xcframework bundles are created.\\n\"\n\n  echo -e \"Usage: ./$COMMAND [OPTION]...\\n\"\n\n  echo -e \"Specify environment variables as VARIABLE=VALUE to override default build options.\\n\"\n\n  echo -e \"Options:\"\n\n  echo -e \"  -h, --help\\t\\t\\tdisplay this help and exit\"\n  echo -e \"  -v, --version\\t\\t\\tdisplay version information and exit\"\n  echo -e \"  -d, --debug\\t\\t\\tbuild with debug information\"\n  echo -e \"  -s, --speed\\t\\t\\toptimize for speed instead of size\"\n  echo -e \"  -l, --lts\\t\\t\\tbuild lts packages to support sdk 9.3+ devices\"\n  echo -e \"  -x, --xcframework\\t\\tbuild xcframework bundles instead of framework bundles and universal libraries\"\n  echo -e \"  -f, --force\\t\\t\\tignore warnings and build with given options\\n\"\n\n  echo -e \"Licensing options:\"\n\n  echo -e \"  --enable-gpl\\t\\t\\tallow use of GPL libraries, created libs will be licensed under GPLv3.0 [no]\\n\"\n\n  echo -e \"Platforms:\"\n\n  echo -e \"  --disable-armv7\\t\\tdo not build armv7 platform [yes]\"\n  echo -e \"  --disable-armv7s\\t\\tdo not build armv7s platform [yes]\"\n  echo -e \"  --disable-arm64\\t\\tdo not build arm64 platform [yes]\"\n  echo -e \"  --disable-arm64e\\t\\tdo not build arm64e platform [yes]\"\n  echo -e \"  --disable-i386\\t\\tdo not build i386 platform [yes]\"\n  echo -e \"  --disable-x86-64\\t\\tdo not build x86-64 platform [yes]\"\n  echo -e \"  --disable-x86-64-mac-catalyst\\tdo not build x86-64-mac-catalyst platform [yes]\\n\"\n\n  echo -e \"Libraries:\"\n\n  echo -e \"  --full\\t\\t\\tenables all non-GPL external libraries\"\n  echo -e \"  --enable-ios-audiotoolbox\\tbuild with built-in Apple AudioToolbox support[no]\"\n  echo -e \"  --enable-ios-avfoundation\\tbuild with built-in Apple AVFoundation support[no]\"\n  echo -e \"  --enable-ios-bzip2\\t\\tbuild with built-in bzip2 support[no]\"\n  echo -e \"  --enable-ios-videotoolbox\\tbuild with built-in Apple VideoToolbox support[no]\"\n  echo -e \"  --enable-ios-zlib\\t\\tbuild with built-in zlib [no]\"\n  echo -e \"  --enable-ios-libiconv\\t\\tbuild with built-in libiconv [no]\"\n  echo -e \"  --enable-chromaprint\\t\\tbuild with chromaprint [no]\"\n  echo -e \"  --enable-fontconfig\\t\\tbuild with fontconfig [no]\"\n  echo -e \"  --enable-freetype\\t\\tbuild with freetype [no]\"\n  echo -e \"  --enable-fribidi\\t\\tbuild with fribidi [no]\"\n  echo -e \"  --enable-gmp\\t\\t\\tbuild with gmp [no]\"\n  echo -e \"  --enable-gnutls\\t\\tbuild with gnutls [no]\"\n  echo -e \"  --enable-kvazaar\\t\\tbuild with kvazaar [no]\"\n  echo -e \"  --enable-lame\\t\\t\\tbuild with lame [no]\"\n  echo -e \"  --enable-libaom\\t\\tbuild with libaom [no]\"\n  echo -e \"  --enable-libass\\t\\tbuild with libass [no]\"\n  echo -e \"  --enable-libilbc\\t\\tbuild with libilbc [no]\"\n  echo -e \"  --enable-libtheora\\t\\tbuild with libtheora [no]\"\n  echo -e \"  --enable-libvorbis\\t\\tbuild with libvorbis [no]\"\n  echo -e \"  --enable-libvpx\\t\\tbuild with libvpx [no]\"\n  echo -e \"  --enable-libwebp\\t\\tbuild with libwebp [no]\"\n  echo -e \"  --enable-libxml2\\t\\tbuild with libxml2 [no]\"\n  echo -e \"  --enable-opencore-amr\\t\\tbuild with opencore-amr [no]\"\n  echo -e \"  --enable-openh264\\t\\tbuild with openh264 [no]\"\n  echo -e \"  --enable-opus\\t\\t\\tbuild with opus [no]\"\n  echo -e \"  --enable-sdl\\t\\t\\tbuild with sdl [no]\"\n  echo -e \"  --enable-shine\\t\\tbuild with shine [no]\"\n  echo -e \"  --enable-snappy\\t\\tbuild with snappy [no]\"\n  echo -e \"  --enable-soxr\\t\\t\\tbuild with soxr [no]\"\n  echo -e \"  --enable-speex\\t\\tbuild with speex [no]\"\n  echo -e \"  --enable-tesseract\\t\\tbuild with tesseract [no]\"\n  echo -e \"  --enable-twolame\\t\\tbuild with twolame [no]\"\n  echo -e \"  --enable-vo-amrwbenc\\t\\tbuild with vo-amrwbenc [no]\"\n  echo -e \"  --enable-wavpack\\t\\tbuild with wavpack [no]\\n\"\n\n  echo -e \"GPL libraries:\"\n\n  echo -e \"  --enable-libvidstab\\t\\tbuild with libvidstab [no]\"\n  echo -e \"  --enable-rubberband\\t\\tbuild with rubber band [no]\"\n  echo -e \"  --enable-x264\\t\\t\\tbuild with x264 [no]\"\n  echo -e \"  --enable-x265\\t\\t\\tbuild with x265 [no]\"\n  echo -e \"  --enable-xvidcore\\t\\tbuild with xvidcore [no]\\n\"\n\n  echo -e \"Advanced options:\"\n\n  echo -e \"  --reconf-LIBRARY\\t\\trun autoreconf before building LIBRARY [no]\"\n  echo -e \"  --redownload-LIBRARY\\t\\tdownload LIBRARY even it is detected as already downloaded [no]\"\n  echo -e \"  --rebuild-LIBRARY\\t\\tbuild LIBRARY even it is detected as already built [no]\\n\"\n}\n\ndisplay_version() {\n  local COMMAND=$(echo \"$0\" | sed -e 's/\\.\\///g')\n\n  echo -e \"\\\n$COMMAND v$(get_mobile_ffmpeg_version)\\n\\\nCopyright (c) 2018-2020 Taner Sener\\n\\\nLicense LGPLv3.0: GNU LGPL version 3 or later\\n\\\n<https://www.gnu.org/licenses/lgpl-3.0.en.html>\\n\\\nThis is free software: you can redistribute it and/or modify it under the terms of the \\\nGNU Lesser General Public License as published by the Free Software Foundation, \\\neither version 3 of the License, or (at your option) any later version.\"\n}\n\nskip_library() {\n  SKIP_VARIABLE=$(echo \"SKIP_$1\" | sed \"s/\\-/\\_/g\")\n\n  export \"${SKIP_VARIABLE}\"=1\n}\n\nno_output_redirection() {\n  export NO_OUTPUT_REDIRECTION=1\n}\n\nno_workspace_cleanup_library() {\n  NO_WORKSPACE_CLEANUP_VARIABLE=$(echo \"NO_WORKSPACE_CLEANUP_$1\" | sed \"s/\\-/\\_/g\")\n\n  export \"${NO_WORKSPACE_CLEANUP_VARIABLE}\"=1\n}\n\nenable_debug() {\n  export MOBILE_FFMPEG_DEBUG=\"-g\"\n\n  BUILD_TYPE_ID+=\"debug \"\n}\n\noptimize_for_speed() {\n  export MOBILE_FFMPEG_OPTIMIZED_FOR_SPEED=\"1\"\n}\n\nenable_lts_build() {\n  export MOBILE_FFMPEG_LTS_BUILD=\"1\"\n\n  # XCODE 7.3 HAS IOS SDK 9.3\n  export IOS_MIN_VERSION=9.3\n}\n\nreconf_library() {\n  local RECONF_VARIABLE=$(echo \"RECONF_$1\" | sed \"s/\\-/\\_/g\")\n  local library_supported=0\n\n  for library in {1..43}; do\n    library_name=$(get_library_name $((library - 1)))\n\n    if [[ $1 != \"ffmpeg\" ]] && [[ ${library_name} == \"$1\" ]]; then\n      export \"${RECONF_VARIABLE}\"=1\n      RECONF_LIBRARIES+=(\"$1\")\n      library_supported=1\n    fi\n  done\n\n  if [[ ${library_supported} -eq 0 ]]; then\n    echo -e \"INFO: --reconf flag detected for library $1 is not supported.\\n\" 1>>\"${BASEDIR}/build.log\" 2>&1\n  fi\n}\n\nrebuild_library() {\n  local REBUILD_VARIABLE=$(echo \"REBUILD_$1\" | sed \"s/\\-/\\_/g\")\n  local library_supported=0\n\n  for library in {1..43}; do\n    library_name=$(get_library_name $((library - 1)))\n\n    if [[ $1 != \"ffmpeg\" ]] && [[ ${library_name} == \"$1\" ]]; then\n      export \"${REBUILD_VARIABLE}\"=1\n      REBUILD_LIBRARIES+=(\"$1\")\n      library_supported=1\n    fi\n  done\n\n  if [[ ${library_supported} -eq 0 ]]; then\n    echo -e \"INFO: --rebuild flag detected for library $1 is not supported.\\n\" 1>>\"${BASEDIR}/build.log\" 2>&1\n  fi\n}\n\nredownload_library() {\n  local REDOWNLOAD_VARIABLE=$(echo \"REDOWNLOAD_$1\" | sed \"s/\\-/\\_/g\")\n  local library_supported=0\n\n  for library in {0..42}; do\n    library_name=$(get_library_name ${library})\n\n    if [[ ${library_name} == $1 ]]; then\n      export ${REDOWNLOAD_VARIABLE}=1\n      REDOWNLOAD_LIBRARIES+=($1)\n      library_supported=1\n    fi\n  done\n\n  if [[ \"ffmpeg\" == $1 ]]; then\n    export ${REDOWNLOAD_VARIABLE}=1\n    REDOWNLOAD_LIBRARIES+=($1)\n    library_supported=1\n  fi\n\n  if [[ ${library_supported} -eq 0 ]]; then\n    echo -e \"INFO: --redownload flag detected for library $1 is not supported.\\n\" 1>>${BASEDIR}/build.log 2>&1\n  fi\n}\n\nenable_library() {\n  set_library \"$1\" 1\n}\n\nset_library() {\n  case $1 in\n  ios-zlib)\n    ENABLED_LIBRARIES[LIBRARY_ZLIB]=$2\n    ;;\n  ios-audiotoolbox)\n    ENABLED_LIBRARIES[LIBRARY_AUDIOTOOLBOX]=$2\n    ;;\n  ios-avfoundation)\n    ENABLED_LIBRARIES[LIBRARY_AVFOUNDATION]=$2\n    ;;\n  ios-bzip2)\n    ENABLED_LIBRARIES[LIBRARY_BZIP2]=$2\n    ;;\n  ios-videotoolbox)\n    ENABLED_LIBRARIES[LIBRARY_VIDEOTOOLBOX]=$2\n    ;;\n  ios-libiconv)\n    ENABLED_LIBRARIES[LIBRARY_LIBICONV]=$2\n    ;;\n  ios-libuuid)\n    ENABLED_LIBRARIES[LIBRARY_LIBUUID]=$2\n    ;;\n  chromaprint)\n    ENABLED_LIBRARIES[LIBRARY_CHROMAPRINT]=$2\n    ;;\n  fontconfig)\n    ENABLED_LIBRARIES[LIBRARY_FONTCONFIG]=$2\n    ENABLED_LIBRARIES[LIBRARY_LIBUUID]=$2\n    ENABLED_LIBRARIES[LIBRARY_EXPAT]=$2\n    ENABLED_LIBRARIES[LIBRARY_LIBICONV]=$2\n    set_library \"freetype\" \"$2\"\n    ;;\n  freetype)\n    ENABLED_LIBRARIES[LIBRARY_FREETYPE]=$2\n    ENABLED_LIBRARIES[LIBRARY_ZLIB]=$2\n    set_library \"libpng\" \"$2\"\n    ;;\n  fribidi)\n    ENABLED_LIBRARIES[LIBRARY_FRIBIDI]=$2\n    ;;\n  gmp)\n    ENABLED_LIBRARIES[LIBRARY_GMP]=$2\n    ;;\n  gnutls)\n    ENABLED_LIBRARIES[LIBRARY_GNUTLS]=$2\n    ENABLED_LIBRARIES[LIBRARY_ZLIB]=$2\n    set_library \"nettle\" \"$2\"\n    set_library \"gmp\" \"$2\"\n    set_library \"ios-libiconv\" \"$2\"\n    ;;\n  kvazaar)\n    ENABLED_LIBRARIES[LIBRARY_KVAZAAR]=$2\n    ;;\n  lame)\n    ENABLED_LIBRARIES[LIBRARY_LAME]=$2\n    set_library \"ios-libiconv\" \"$2\"\n    ;;\n  libaom)\n    ENABLED_LIBRARIES[LIBRARY_LIBAOM]=$2\n    ;;\n  libass)\n    ENABLED_LIBRARIES[LIBRARY_LIBASS]=$2\n    ENABLED_LIBRARIES[LIBRARY_LIBUUID]=$2\n    ENABLED_LIBRARIES[LIBRARY_EXPAT]=$2\n    set_library \"freetype\" \"$2\"\n    set_library \"fribidi\" \"$2\"\n    set_library \"fontconfig\" \"$2\"\n    set_library \"ios-libiconv\" \"$2\"\n    ;;\n  libilbc)\n    ENABLED_LIBRARIES[LIBRARY_LIBILBC]=$2\n    ;;\n  libpng)\n    ENABLED_LIBRARIES[LIBRARY_LIBPNG]=$2\n    ENABLED_LIBRARIES[LIBRARY_ZLIB]=$2\n    ;;\n  libtheora)\n    ENABLED_LIBRARIES[LIBRARY_LIBTHEORA]=$2\n    ENABLED_LIBRARIES[LIBRARY_LIBOGG]=$2\n    set_library \"libvorbis\" \"$2\"\n    ;;\n  libvidstab)\n    ENABLED_LIBRARIES[LIBRARY_LIBVIDSTAB]=$2\n    ;;\n  libvorbis)\n    ENABLED_LIBRARIES[LIBRARY_LIBVORBIS]=$2\n    ENABLED_LIBRARIES[LIBRARY_LIBOGG]=$2\n    ;;\n  libvpx)\n    ENABLED_LIBRARIES[LIBRARY_LIBVPX]=$2\n    ;;\n  libwebp)\n    ENABLED_LIBRARIES[LIBRARY_LIBWEBP]=$2\n    ENABLED_LIBRARIES[LIBRARY_GIFLIB]=$2\n    ENABLED_LIBRARIES[LIBRARY_JPEG]=$2\n    set_library \"tiff\" \"$2\"\n    set_library \"libpng\" \"$2\"\n    ;;\n  libxml2)\n    ENABLED_LIBRARIES[LIBRARY_LIBXML2]=$2\n    set_library \"ios-libiconv\" \"$2\"\n    ;;\n  opencore-amr)\n    ENABLED_LIBRARIES[LIBRARY_OPENCOREAMR]=$2\n    ;;\n  openh264)\n    ENABLED_LIBRARIES[LIBRARY_OPENH264]=$2\n    ;;\n  opus)\n    ENABLED_LIBRARIES[LIBRARY_OPUS]=$2\n    ;;\n  rubberband)\n    ENABLED_LIBRARIES[LIBRARY_RUBBERBAND]=$2\n    ENABLED_LIBRARIES[LIBRARY_SNDFILE]=$2\n    ENABLED_LIBRARIES[LIBRARY_LIBSAMPLERATE]=$2\n    ;;\n  sdl)\n    ENABLED_LIBRARIES[LIBRARY_SDL]=$2\n    ;;\n  shine)\n    ENABLED_LIBRARIES[LIBRARY_SHINE]=$2\n    ;;\n  snappy)\n    ENABLED_LIBRARIES[LIBRARY_SNAPPY]=$2\n    ENABLED_LIBRARIES[LIBRARY_ZLIB]=$2\n    ;;\n  soxr)\n    ENABLED_LIBRARIES[LIBRARY_SOXR]=$2\n    ;;\n  speex)\n    ENABLED_LIBRARIES[LIBRARY_SPEEX]=$2\n    ;;\n  tesseract)\n    ENABLED_LIBRARIES[LIBRARY_TESSERACT]=$2\n    ENABLED_LIBRARIES[LIBRARY_LEPTONICA]=$2\n    ENABLED_LIBRARIES[LIBRARY_LIBWEBP]=$2\n    ENABLED_LIBRARIES[LIBRARY_GIFLIB]=$2\n    ENABLED_LIBRARIES[LIBRARY_JPEG]=$2\n    ENABLED_LIBRARIES[LIBRARY_ZLIB]=$2\n    set_library \"tiff\" \"$2\"\n    set_library \"libpng\" \"$2\"\n    ;;\n  twolame)\n    ENABLED_LIBRARIES[LIBRARY_TWOLAME]=$2\n    ENABLED_LIBRARIES[LIBRARY_SNDFILE]=$2\n    ;;\n  vo-amrwbenc)\n    ENABLED_LIBRARIES[LIBRARY_VO_AMRWBENC]=$2\n    ;;\n  wavpack)\n    ENABLED_LIBRARIES[LIBRARY_WAVPACK]=$2\n    ;;\n  x264)\n    ENABLED_LIBRARIES[LIBRARY_X264]=$2\n    ;;\n  x265)\n    ENABLED_LIBRARIES[LIBRARY_X265]=$2\n    ;;\n  xvidcore)\n    ENABLED_LIBRARIES[LIBRARY_XVIDCORE]=$2\n    ;;\n  expat | giflib | jpeg | leptonica | libogg | libsamplerate | libsndfile)\n    # THESE LIBRARIES ARE NOT ENABLED DIRECTLY\n    ;;\n  nettle)\n    ENABLED_LIBRARIES[LIBRARY_NETTLE]=$2\n    set_library \"gmp\" \"$2\"\n    ;;\n  tiff)\n    ENABLED_LIBRARIES[LIBRARY_TIFF]=$2\n    ENABLED_LIBRARIES[LIBRARY_JPEG]=$2\n    ;;\n  *)\n    print_unknown_library \"$1\"\n    ;;\n  esac\n}\n\ndisable_arch() {\n  set_arch \"$1\" 0\n}\n\nset_arch() {\n  case $1 in\n  armv7)\n    ENABLED_ARCHITECTURES[ARCH_ARMV7]=$2\n    ;;\n  armv7s)\n    ENABLED_ARCHITECTURES[ARCH_ARMV7S]=$2\n    ;;\n  arm64)\n    ENABLED_ARCHITECTURES[ARCH_ARM64]=$2\n    ;;\n  arm64e)\n    ENABLED_ARCHITECTURES[ARCH_ARM64E]=$2\n    ;;\n  i386)\n    ENABLED_ARCHITECTURES[ARCH_I386]=$2\n    ;;\n  x86-64)\n    ENABLED_ARCHITECTURES[ARCH_X86_64]=$2\n    ;;\n  x86-64-mac-catalyst)\n    ENABLED_ARCHITECTURES[ARCH_X86_64_MAC_CATALYST]=$2\n    ;;\n  *)\n    print_unknown_platform \"$1\"\n    ;;\n  esac\n}\n\nprint_unknown_option() {\n  echo -e \"Unknown option \\\"$1\\\".\\nSee $0 --help for available options.\"\n  exit 1\n}\n\nprint_unknown_library() {\n  echo -e \"Unknown library \\\"$1\\\".\\nSee $0 --help for available libraries.\"\n  exit 1\n}\n\nprint_unknown_platform() {\n  echo -e \"Unknown platform \\\"$1\\\".\\nSee $0 --help for available platforms.\"\n  exit 1\n}\n\nprint_enabled_architectures() {\n  echo -n \"Architectures: \"\n\n  let enabled=0\n  for print_arch in {0..6}; do\n    if [[ ${ENABLED_ARCHITECTURES[$print_arch]} -eq 1 ]]; then\n      if [[ ${enabled} -ge 1 ]]; then\n        echo -n \", \"\n      fi\n      echo -n \"$(get_arch_name $print_arch)\"\n      enabled=$((enabled + 1))\n    fi\n  done\n\n  if [ ${enabled} -gt 0 ]; then\n    echo \"\"\n  else\n    echo \"none\"\n  fi\n}\n\nprint_enabled_libraries() {\n  echo -n \"Libraries: \"\n\n  let enabled=0\n\n  # FIRST BUILT-IN LIBRARIES\n  for library in {43..49}; do\n    if [[ ${ENABLED_LIBRARIES[$library]} -eq 1 ]]; then\n      if [[ ${enabled} -ge 1 ]]; then\n        echo -n \", \"\n      fi\n      echo -n \"$(get_library_name $library)\"\n      enabled=$((enabled + 1))\n    fi\n  done\n\n  # THEN EXTERNAL LIBRARIES\n  for library in {0..32}; do\n    if [[ ${ENABLED_LIBRARIES[$library]} -eq 1 ]]; then\n      if [[ ${enabled} -ge 1 ]]; then\n        echo -n \", \"\n      fi\n      echo -n \"$(get_library_name $library)\"\n      enabled=$((enabled + 1))\n    fi\n  done\n\n  if [ ${enabled} -gt 0 ]; then\n    echo \"\"\n  else\n    echo \"none\"\n  fi\n}\n\nprint_reconfigure_requested_libraries() {\n  local counter=0\n\n  for RECONF_LIBRARY in \"${RECONF_LIBRARIES[@]}\"; do\n    if [[ ${counter} -eq 0 ]]; then\n      echo -n \"Reconfigure: \"\n    else\n      echo -n \", \"\n    fi\n\n    echo -n \"${RECONF_LIBRARY}\"\n\n    counter=$((counter + 1))\n  done\n\n  if [[ ${counter} -gt 0 ]]; then\n    echo \"\"\n  fi\n}\n\nprint_rebuild_requested_libraries() {\n  local counter=0\n\n  for REBUILD_LIBRARY in \"${REBUILD_LIBRARIES[@]}\"; do\n    if [[ ${counter} -eq 0 ]]; then\n      echo -n \"Rebuild: \"\n    else\n      echo -n \", \"\n    fi\n\n    echo -n \"${REBUILD_LIBRARY}\"\n\n    counter=$((counter + 1))\n  done\n\n  if [[ ${counter} -gt 0 ]]; then\n    echo \"\"\n  fi\n}\n\nprint_redownload_requested_libraries() {\n  local counter=0\n\n  for REDOWNLOAD_LIBRARY in \"${REDOWNLOAD_LIBRARIES[@]}\"; do\n    if [[ ${counter} -eq 0 ]]; then\n      echo -n \"Redownload: \"\n    else\n      echo -n \", \"\n    fi\n\n    echo -n ${REDOWNLOAD_LIBRARY}\n\n    counter=$((${counter} + 1))\n  done\n\n  if [[ ${counter} -gt 0 ]]; then\n    echo \"\"\n  fi\n}\n\nbuild_info_plist() {\n  local FILE_PATH=\"$1\"\n  local FRAMEWORK_NAME=\"$2\"\n  local FRAMEWORK_ID=\"$3\"\n  local FRAMEWORK_SHORT_VERSION=\"$4\"\n  local FRAMEWORK_VERSION=\"$5\"\n\n  cat >\"${FILE_PATH}\" <<EOF\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>CFBundleDevelopmentRegion</key>\n\t<string>en</string>\n\t<key>CFBundleExecutable</key>\n\t<string>${FRAMEWORK_NAME}</string>\n\t<key>CFBundleIdentifier</key>\n\t<string>${FRAMEWORK_ID}</string>\n\t<key>CFBundleInfoDictionaryVersion</key>\n\t<string>6.0</string>\n\t<key>CFBundleName</key>\n\t<string>${FRAMEWORK_NAME}</string>\n\t<key>CFBundlePackageType</key>\n\t<string>FMWK</string>\n\t<key>CFBundleShortVersionString</key>\n\t<string>${FRAMEWORK_SHORT_VERSION}</string>\n\t<key>CFBundleVersion</key>\n\t<string>${FRAMEWORK_VERSION}</string>\n\t<key>CFBundleSignature</key>\n\t<string>????</string>\n\t<key>MinimumOSVersion</key>\n\t<string>${IOS_MIN_VERSION}</string>\n\t<key>CFBundleSupportedPlatforms</key>\n\t<array>\n\t\t<string>iPhoneOS</string>\n\t</array>\n\t<key>NSPrincipalClass</key>\n\t<string></string>\n</dict>\n</plist>\nEOF\n}\n\nbuild_modulemap() {\n  local FILE_PATH=\"$1\"\n\n  cat >\"${FILE_PATH}\" <<EOF\nframework module mobileffmpeg {\n\n  header \"ArchDetect.h\"\n  header \"AtomicLong.h\"\n  header \"ExecuteDelegate.h\"\n  header \"FFmpegExecution.h\"\n  header \"LogDelegate.h\"\n  header \"MediaInformation.h\"\n  header \"MediaInformationParser.h\"\n  header \"MobileFFmpeg.h\"\n  header \"MobileFFmpegConfig.h\"\n  header \"MobileFFprobe.h\"\n  header \"Statistics.h\"\n  header \"StatisticsDelegate.h\"\n  header \"StreamInformation.h\"\n  header \"mobileffmpeg_exception.h\"\n\n  export *\n}\nEOF\n}\n\n# 1 - library index\n# 2 - library name\n# 3 - static library name\n# 4 - library version\ncreate_external_library_package() {\n  if [[ -n ${MOBILE_FFMPEG_XCF_BUILD} ]]; then\n\n    # 1. CREATE INDIVIDUAL FRAMEWORKS\n    for TARGET_ARCH in \"${TARGET_ARCH_LIST[@]}\"; do\n      if [[ ${TARGET_ARCH} != \"arm64e\" ]]; then\n        local FRAMEWORK_PATH=${BASEDIR}/prebuilt/ios-xcframework/.tmp/ios-${TARGET_ARCH}/$2.framework\n        mkdir -p \"${FRAMEWORK_PATH}\" 1>>\"${BASEDIR}/build.log\" 2>&1 || exit 1\n        local STATIC_LIBRARY_PATH=$(find ${BASEDIR}/prebuilt/ios-${TARGET_ARCH} -name $3)\n        local CAPITAL_CASE_LIBRARY_NAME=$(to_capital_case \"$2\")\n\n        build_info_plist \"${FRAMEWORK_PATH}/Info.plist\" \"$2\" \"com.arthenica.mobileffmpeg.${CAPITAL_CASE_LIBRARY_NAME}\" \"$4\" \"$4\"\n        cp \"${STATIC_LIBRARY_PATH}\" \"${FRAMEWORK_PATH}/$2\" 1>>\"${BASEDIR}/build.log\" 2>&1\n      fi\n    done\n\n    # 2. CREATE XCFRAMEWORKS\n    local XCFRAMEWORK_PATH=${BASEDIR}/prebuilt/ios-xcframework/$2.xcframework\n    mkdir -p \"${XCFRAMEWORK_PATH}\" 1>>\"${BASEDIR}/build.log\" 2>&1 || exit 1\n\n    BUILD_COMMAND=\"xcodebuild -create-xcframework \"\n\n    for TARGET_ARCH in \"${TARGET_ARCH_LIST[@]}\"; do\n      if [[ ${TARGET_ARCH} != \"arm64e\" ]]; then\n        local FRAMEWORK_PATH=${BASEDIR}/prebuilt/ios-xcframework/.tmp/ios-${TARGET_ARCH}/$2.framework\n        BUILD_COMMAND+=\" -framework ${FRAMEWORK_PATH}\"\n      fi\n    done\n\n    BUILD_COMMAND+=\" -output ${XCFRAMEWORK_PATH}\"\n\n    COMMAND_OUTPUT=$(${BUILD_COMMAND} 2>&1)\n\n    echo \"${COMMAND_OUTPUT}\" 1>>\"${BASEDIR}/build.log\" 2>&1\n\n    echo \"\" 1>>\"${BASEDIR}/build.log\" 2>&1\n\n    if [[ ${COMMAND_OUTPUT} == *\"is empty in library\"* ]]; then\n      RC=1\n    else\n      RC=0\n    fi\n\n  else\n\n    # 1. CREATE FAT LIBRARY\n    local FAT_LIBRARY_PATH=${BASEDIR}/prebuilt/ios-universal/$2-universal\n\n    mkdir -p \"${FAT_LIBRARY_PATH}/lib\" 1>>\"${BASEDIR}/build.log\" 2>&1 || exit 1\n\n    LIPO_COMMAND=\"${LIPO} -create\"\n\n    for TARGET_ARCH in \"${TARGET_ARCH_LIST[@]}\"; do\n      LIPO_COMMAND+=\" $(find ${BASEDIR}/prebuilt/ios-${TARGET_ARCH} -name $3)\"\n    done\n\n    LIPO_COMMAND+=\" -output ${FAT_LIBRARY_PATH}/lib/$3\"\n\n    RC=$(${LIPO_COMMAND} 1>>\"${BASEDIR}/build.log\" 2>&1)\n\n    if [[ ${RC} -eq 0 ]]; then\n\n      # 2. CREATE FRAMEWORK\n      RC=$(create_static_framework \"$2\" \"$3\" \"$4\")\n\n      if [[ ${RC} -eq 0 ]]; then\n\n        # 3. COPY LICENSES\n        if [[ ${LIBRARY_LIBTHEORA} == \"$1\" ]]; then\n          license_directories=(\"${BASEDIR}/prebuilt/ios-universal/libtheora-universal\" \"${BASEDIR}/prebuilt/ios-universal/libtheoraenc-universal\" \"${BASEDIR}/prebuilt/ios-universal/libtheoradec-universal\" \"${BASEDIR}/prebuilt/ios-framework/libtheora.framework\" \"${BASEDIR}/prebuilt/ios-framework/libtheoraenc.framework\" \"${BASEDIR}/prebuilt/ios-framework/libtheoradec.framework\")\n        elif [[ ${LIBRARY_LIBVORBIS} == \"$1\" ]]; then\n          license_directories=(\"${BASEDIR}/prebuilt/ios-universal/libvorbisfile-universal\" \"${BASEDIR}/prebuilt/ios-universal/libvorbisenc-universal\" \"${BASEDIR}/prebuilt/ios-universal/libvorbis-universal\" \"${BASEDIR}/prebuilt/ios-framework/libvorbisfile.framework\" \"${BASEDIR}/prebuilt/ios-framework/libvorbisenc.framework\" \"${BASEDIR}/prebuilt/ios-framework/libvorbis.framework\")\n        elif [[ ${LIBRARY_LIBWEBP} == \"$1\" ]]; then\n          license_directories=(\"${BASEDIR}/prebuilt/ios-universal/libwebpmux-universal\" \"${BASEDIR}/prebuilt/ios-universal/libwebpdemux-universal\" \"${BASEDIR}/prebuilt/ios-universal/libwebp-universal\" \"${BASEDIR}/prebuilt/ios-framework/libwebpmux.framework\" \"${BASEDIR}/prebuilt/ios-framework/libwebpdemux.framework\" \"${BASEDIR}/prebuilt/ios-framework/libwebp.framework\")\n        elif [[ ${LIBRARY_OPENCOREAMR} == \"$1\" ]]; then\n          license_directories=(\"${BASEDIR}/prebuilt/ios-universal/libopencore-amrnb-universal\" \"${BASEDIR}/prebuilt/ios-framework/libopencore-amrnb.framework\")\n        elif [[ ${LIBRARY_NETTLE} == \"$1\" ]]; then\n          license_directories=(\"${BASEDIR}/prebuilt/ios-universal/libnettle-universal\" \"${BASEDIR}/prebuilt/ios-universal/libhogweed-universal\" \"${BASEDIR}/prebuilt/ios-framework/libnettle.framework\" \"${BASEDIR}/prebuilt/ios-framework/libhogweed.framework\")\n        else\n          license_directories=(\"${BASEDIR}/prebuilt/ios-universal/$2-universal\" \"${BASEDIR}/prebuilt/ios-framework/$2.framework\")\n        fi\n\n        RC=$(copy_external_library_license \"$1\" \"${license_directories[@]}\")\n      fi\n\n    fi\n\n  fi\n\n  echo \"${RC}\"\n\n}\n\n# 1 - library name\n# 2 - static library name\n# 3 - library version\ncreate_static_framework() {\n  local FRAMEWORK_PATH=${BASEDIR}/prebuilt/ios-framework/$1.framework\n\n  mkdir -p \"${FRAMEWORK_PATH}\" 1>>\"${BASEDIR}/build.log\" 2>&1 || exit 1\n\n  local CAPITAL_CASE_LIBRARY_NAME=$(to_capital_case \"$1\")\n\n  build_info_plist \"${FRAMEWORK_PATH}/Info.plist\" \"${FFMPEG_LIB}\" \"com.arthenica.mobileffmpeg.${CAPITAL_CASE_LIBRARY_NAME}\" \"$3\" \"$3\"\n\n  cp \"${BASEDIR}/prebuilt/ios-universal/$1-universal/lib/$2\" \"${FRAMEWORK_PATH}/$1\" 1>>\"${BASEDIR}/build.log\" 2>&1\n\n  echo \"$?\"\n}\n\n# 1 - library index\n# 2 - output path\ncopy_external_library_license() {\n  output_path_array=\"$2\"\n  for output_path in \"${output_path_array[@]}\"\n  do\n    $(cp $(get_external_library_license_path \"$1\") \"${output_path}/LICENSE\" 1>>\"${BASEDIR}/build.log\" 2>&1)\n    if [ $? -ne 0 ]; then\n      echo 1\n      return\n    fi\n  done;\n  echo 0\n}\n\n# 1 - library index\nget_external_library_license_path() {\n  case $1 in\n  1) echo \"${BASEDIR}/src/$(get_library_name \"$1\")/docs/LICENSE.TXT\" ;;\n  3) echo \"${BASEDIR}/src/$(get_library_name \"$1\")/COPYING.LESSERv3\" ;;\n  25) echo \"${BASEDIR}/src/$(get_library_name \"$1\")/COPYING.LGPL\" ;;\n  27) echo \"${BASEDIR}/src/$(get_library_name \"$1\")/LICENSE.md\" ;;\n  29) echo \"${BASEDIR}/src/$(get_library_name \"$1\")/COPYING.txt\" ;;\n  34) echo \"${BASEDIR}/src/$(get_library_name \"$1\")/LICENSE.md \" ;;\n  37) echo \"${BASEDIR}/src/$(get_library_name \"$1\")/COPYING.LESSERv3\" ;;\n  38) echo \"${BASEDIR}/src/$(get_library_name \"$1\")/COPYRIGHT\" ;;\n  41) echo \"${BASEDIR}/src/$(get_library_name \"$1\")/leptonica-license.txt\" ;;\n  4 | 9 | 12 | 18 | 20 | 26 | 31 | 36) echo \"${BASEDIR}/src/$(get_library_name \"$1\")/LICENSE\" ;;\n  *) echo \"${BASEDIR}/src/$(get_library_name \"$1\")/COPYING\" ;;\n  esac\n}\n\nget_external_library_version() {\n  echo \"$(grep Version ${BASEDIR}/prebuilt/ios-${TARGET_ARCH_LIST[0]}/pkgconfig/$1.pc 2>>\"${BASEDIR}/build.log\" | sed 's/Version://g;s/\\ //g')\"\n}\n\n# ENABLE COMMON FUNCTIONS\n. ${BASEDIR}/build/ios-common.sh\n\necho -e \"\\nINFO: Build options: $*\\n\" 1>>\"${BASEDIR}/build.log\" 2>&1\n\nGPL_ENABLED=\"no\"\nDISPLAY_HELP=\"\"\nBUILD_TYPE_ID=\"\"\nBUILD_LTS=\"\"\nBUILD_FULL=\"\"\nMOBILE_FFMPEG_XCF_BUILD=\"\"\nBUILD_FORCE=\"\"\nBUILD_VERSION=$(git describe --tags 2>>\"${BASEDIR}/build.log\")\n\nwhile [ ! $# -eq 0 ]; do\n  case $1 in\n  -h | --help)\n    DISPLAY_HELP=\"1\"\n    ;;\n  -v | --version)\n    display_version\n    exit 0\n    ;;\n  --skip-*)\n    SKIP_LIBRARY=$(echo \"$1\" | sed -e 's/^--[A-Za-z]*-//g')\n\n    skip_library \"${SKIP_LIBRARY}\"\n    ;;\n  --no-output-redirection)\n    no_output_redirection\n    ;;\n  --no-workspace-cleanup-*)\n    NO_WORKSPACE_CLEANUP_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-[A-Za-z]*-[A-Za-z]*-//g')\n\n    no_workspace_cleanup_library \"${NO_WORKSPACE_CLEANUP_LIBRARY}\"\n    ;;\n  -d | --debug)\n    enable_debug\n    ;;\n  -s | --speed)\n    optimize_for_speed\n    ;;\n  -l | --lts)\n    BUILD_LTS=\"1\"\n    ;;\n  -x | --xcframework)\n    MOBILE_FFMPEG_XCF_BUILD=\"1\"\n    ;;\n  -f | --force)\n    BUILD_FORCE=\"1\"\n    ;;\n  --reconf-*)\n    CONF_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    reconf_library \"${CONF_LIBRARY}\"\n    ;;\n  --rebuild-*)\n    BUILD_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    rebuild_library \"${BUILD_LIBRARY}\"\n    ;;\n    --redownload-*)\n    DOWNLOAD_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    redownload_library ${DOWNLOAD_LIBRARY}\n    ;;\n  --full)\n    BUILD_FULL=\"1\"\n    ;;\n  --enable-gpl)\n    GPL_ENABLED=\"yes\"\n    ;;\n  --enable-*)\n    ENABLED_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    enable_library \"${ENABLED_LIBRARY}\"\n    ;;\n  --disable-*)\n    DISABLED_ARCH=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    disable_arch \"${DISABLED_ARCH}\"\n    ;;\n  *)\n    print_unknown_option \"$1\"\n    ;;\n  esac\n  shift\ndone\n\nif [[ -n ${BUILD_FULL} ]]; then\n  for library in {0..49}; do\n    if [ ${GPL_ENABLED} == \"yes\" ]; then\n      enable_library $(get_library_name $library)\n    else\n      if [[ $library -ne 17 ]] && [[ $library -ne 18 ]] && [[ $library -ne 19 ]] && [[ $library -ne 20 ]] && [[ $library -ne 21 ]]; then\n        enable_library $(get_library_name $library)\n      fi\n    fi\n  done\nfi\n\n# DETECT BUILD TYPE\nif [[ -n ${BUILD_LTS} ]]; then\n  enable_lts_build\n  BUILD_TYPE_ID+=\"LTS \"\nfi\n\nif [[ -n ${DISPLAY_HELP} ]]; then\n  display_help\n  exit 0\nfi\n\nif [[ -z ${BUILD_VERSION} ]]; then\n  echo -e \"\\nerror: Can not run git commands in this folder. See build.log.\\n\"\n  exit 1\nfi\n\n# SELECT XCODE VERSION USED FOR BUILDING\nXCODE_FOR_MOBILE_FFMPEG=~/.xcode.for.mobile.ffmpeg.sh\nif [[ -f ${XCODE_FOR_MOBILE_FFMPEG} ]]; then\n  source ${XCODE_FOR_MOBILE_FFMPEG} 1>>\"${BASEDIR}/build.log\" 2>&1\nfi\nDETECTED_IOS_SDK_VERSION=\"$(xcrun --sdk iphoneos --show-sdk-version)\"\n\necho -e \"INFO: Using SDK ${DETECTED_IOS_SDK_VERSION} by Xcode provided at $(xcode-select -p)\\n\" 1>>\"${BASEDIR}/build.log\" 2>&1\nif [[ -n ${MOBILE_FFMPEG_LTS_BUILD} ]] && [[ \"${DETECTED_IOS_SDK_VERSION}\" != \"${IOS_MIN_VERSION}\" ]]; then\n  echo -e \"\\n(*) LTS packages should be built using SDK ${IOS_MIN_VERSION} but current configuration uses SDK ${DETECTED_IOS_SDK_VERSION}\\n\"\n\n  if [[ -z ${BUILD_FORCE} ]]; then\n    exit 1\n  fi\nfi\n\n# DISABLE 32-bit architectures on newer IOS versions\nif [[ ${DETECTED_IOS_SDK_VERSION} == 11* ]] || [[ ${DETECTED_IOS_SDK_VERSION} == 12* ]] || [[ ${DETECTED_IOS_SDK_VERSION} == 13* ]] || [[ ${DETECTED_IOS_SDK_VERSION} == 14* ]]; then\n  if [[ -z ${BUILD_FORCE} ]] && [[ ${ENABLED_ARCHITECTURES[${ARCH_ARMV7}]} -eq 1 ]]; then\n    echo -e \"INFO: Disabled armv7 architecture which is not supported on SDK ${DETECTED_IOS_SDK_VERSION}\\n\" 1>>\"${BASEDIR}/build.log\" 2>&1\n    disable_arch \"armv7\"\n  fi\n  if [[ -z ${BUILD_FORCE} ]] && [[ ${ENABLED_ARCHITECTURES[${ARCH_ARMV7S}]} -eq 1 ]]; then\n    echo -e \"INFO: Disabled armv7s architecture which is not supported on SDK ${DETECTED_IOS_SDK_VERSION}\\n\" 1>>\"${BASEDIR}/build.log\" 2>&1\n    disable_arch \"armv7s\"\n  fi\n  if [[ -z ${BUILD_FORCE} ]] && [[ ${ENABLED_ARCHITECTURES[${ARCH_I386}]} -eq 1 ]]; then\n    echo -e \"INFO: Disabled i386 architecture which is not supported on SDK ${DETECTED_IOS_SDK_VERSION}\\n\" 1>>\"${BASEDIR}/build.log\" 2>&1\n    disable_arch \"i386\"\n  fi\n\n# DISABLE arm64e architecture on older IOS versions\nelif [[ ${DETECTED_IOS_SDK_VERSION} != 10* ]]; then\n  if [[ -z ${BUILD_FORCE} ]] && [[ ${ENABLED_ARCHITECTURES[${ARCH_ARM64E}]} -eq 1 ]]; then\n    echo -e \"INFO: Disabled arm64e architecture which is not supported on SDK ${DETECTED_IOS_SDK_VERSION}\\n\" 1>>\"${BASEDIR}/build.log\" 2>&1\n    disable_arch \"arm64e\"\n  fi\nfi\n\n# DISABLE x86-64-mac-catalyst architecture on IOS versions lower than 13\nif [[ ${DETECTED_IOS_SDK_VERSION} != 13* || ${DETECTED_IOS_SDK_VERSION} != 14* ]] && [[ -z ${BUILD_FORCE} ]] && [[ ${ENABLED_ARCHITECTURES[${ARCH_X86_64_MAC_CATALYST}]} -eq 1 ]]; then\n  echo -e \"INFO: Disabled x86-64-mac-catalyst architecture which is not supported on SDK ${DETECTED_IOS_SDK_VERSION}\\n\" 1>>\"${BASEDIR}/build.log\" 2>&1\n  disable_arch \"x86-64-mac-catalyst\"\nfi\n\n# DISABLE x86-64-mac-catalyst when x86-64 is enabled\nif [[ -z ${MOBILE_FFMPEG_XCF_BUILD} ]] && [[ ${ENABLED_ARCHITECTURES[${ARCH_X86_64}]} -eq 1 ]] && [[ ${ENABLED_ARCHITECTURES[${ARCH_X86_64_MAC_CATALYST}]} -eq 1 ]]; then\n  echo -e \"INFO: Disabled x86-64-mac-catalyst architecture which can not co-exist with x86-64 in a framework bundle / universal fat library.\\n\" 1>>\"${BASEDIR}/build.log\" 2>&1\n  disable_arch \"x86-64-mac-catalyst\"\nfi\n\n# DISABLE arm64e when arm64 is enabled\nif [[ -n ${MOBILE_FFMPEG_XCF_BUILD} ]] && [[ ${ENABLED_ARCHITECTURES[${ARCH_ARM64E}]} -eq 1 ]] && [[ ${ENABLED_ARCHITECTURES[${ARCH_ARM64}]} -eq 1 ]]; then\n  echo -e \"INFO: Disabled arm64e architecture which can not co-exist with arm64 in an xcframework bundle.\\n\" 1>>\"${BASEDIR}/build.log\" 2>&1\n  disable_arch \"arm64e\"\nfi\n\necho -e \"\\nBuilding mobile-ffmpeg ${BUILD_TYPE_ID}static library for iOS\\n\"\n\necho -e -n \"INFO: Building mobile-ffmpeg ${BUILD_VERSION} ${BUILD_TYPE_ID}for iOS: \" 1>>\"${BASEDIR}/build.log\" 2>&1\necho -e \"$(date)\" 1>>\"${BASEDIR}/build.log\" 2>&1\n\nprint_enabled_architectures\nprint_enabled_libraries\nprint_reconfigure_requested_libraries\nprint_rebuild_requested_libraries\nprint_redownload_requested_libraries\n\n# CHECK GPL LIBRARIES\nfor gpl_library in {17..21}; do\n  if [[ ${ENABLED_LIBRARIES[$gpl_library]} -eq 1 ]]; then\n    library_name=$(get_library_name ${gpl_library})\n\n    if [ ${GPL_ENABLED} != \"yes\" ]; then\n      echo -e \"\\n(*) Invalid configuration detected. GPL library ${library_name} enabled without --enable-gpl flag.\\n\"\n      echo -e \"\\n(*) Invalid configuration detected. GPL library ${library_name} enabled without --enable-gpl flag.\\n\" 1>>\"${BASEDIR}/build.log\" 2>&1\n      exit 1\n    else\n      DOWNLOAD_RESULT=$(download_gpl_library_source \"${library_name}\")\n      if [[ ${DOWNLOAD_RESULT} -ne 0 ]]; then\n        echo -e \"\\n(*) Failed to download GPL library ${library_name} source. Please check build.log file for details. If the problem persists refer to offline building instructions.\\n\"\n        echo -e \"\\n(*) Failed to download GPL library ${library_name} source.\\n\" 1>>\"${BASEDIR}/build.log\" 2>&1\n        exit 1\n      fi\n    fi\n  fi\ndone\n\nTARGET_ARCH_LIST=()\n\nfor run_arch in {0..6}; do\n  if [[ ${ENABLED_ARCHITECTURES[$run_arch]} -eq 1 ]]; then\n    export ARCH=$(get_arch_name $run_arch)\n    export TARGET_SDK=$(get_target_sdk)\n    export SDK_PATH=$(get_sdk_path)\n    export SDK_NAME=$(get_sdk_name)\n\n    export LIPO=\"$(xcrun --sdk $(get_sdk_name) -f lipo)\"\n\n    . ${BASEDIR}/build/main-ios.sh \"${ENABLED_LIBRARIES[@]}\"\n    case ${ARCH} in\n    x86-64)\n      TARGET_ARCH=\"x86_64\"\n      ;;\n    x86-64-mac-catalyst)\n      TARGET_ARCH=\"x86_64-mac-catalyst\"\n      ;;\n    *)\n      TARGET_ARCH=\"${ARCH}\"\n      ;;\n    esac\n    TARGET_ARCH_LIST+=(\"${TARGET_ARCH}\")\n\n    # CLEAR FLAGS\n    for library in {1..50}; do\n      library_name=$(get_library_name $((library - 1)))\n      unset \"$(echo \"OK_${library_name}\" | sed \"s/\\-/\\_/g\")\"\n      unset \"$(echo \"DEPENDENCY_REBUILT_${library_name}\" | sed \"s/\\-/\\_/g\")\"\n    done\n  fi\ndone\n\nFFMPEG_LIBS=\"libavcodec libavdevice libavfilter libavformat libavutil libswresample libswscale\"\n\nBUILD_LIBRARY_EXTENSION=\"a\"\n\nif [[ -n ${TARGET_ARCH_LIST[0]} ]]; then\n\n  # BUILDING PACKAGES\n  if [[ -n ${MOBILE_FFMPEG_XCF_BUILD} ]]; then\n    echo -e -n \"\\n\\nCreating xcframeworks under prebuilt: \"\n\n    rm -rf \"${BASEDIR}/prebuilt/ios-xcframework\" 1>>\"${BASEDIR}/build.log\" 2>&1 || exit 1\n    mkdir -p \"${BASEDIR}/prebuilt/ios-xcframework\" 1>>\"${BASEDIR}/build.log\" 2>&1 || exit 1\n  else\n    echo -e -n \"\\n\\nCreating frameworks and universal libraries under prebuilt: \"\n\n    rm -rf \"${BASEDIR}/prebuilt/ios-universal\" 1>>\"${BASEDIR}/build.log\" 2>&1 || exit 1\n    mkdir -p \"${BASEDIR}/prebuilt/ios-universal\" 1>>\"${BASEDIR}/build.log\" 2>&1 || exit 1\n    rm -rf \"${BASEDIR}/prebuilt/ios-framework\" 1>>\"${BASEDIR}/build.log\" 2>&1 || exit 1\n    mkdir -p \"${BASEDIR}/prebuilt/ios-framework\" 1>>\"${BASEDIR}/build.log\" 2>&1 || exit 1\n  fi\n\n  # 1. EXTERNAL LIBRARIES\n  for library in {0..42}; do\n    if [[ ${ENABLED_LIBRARIES[$library]} -eq 1 ]]; then\n\n      library_name=$(get_library_name ${library})\n      package_config_file_name=$(get_package_config_file_name ${library})\n      library_version=$(get_external_library_version \"${package_config_file_name}\")\n      if [[ -z ${library_version} ]]; then\n        echo -e \"Failed to detect version for ${library_name} from ${package_config_file_name}.pc\\n\" 1>>\"${BASEDIR}/build.log\" 2>&1\n        echo -e \"failed\\n\"\n        exit 1\n      fi\n\n      echo -e \"Creating external library package for ${library_name}\\n\" 1>>\"${BASEDIR}/build.log\" 2>&1\n\n      if [[ ${LIBRARY_LIBTHEORA} == \"$library\" ]]; then\n\n        LIBRARY_CREATED=$(create_external_library_package $library \"libtheora\" \"libtheora.a\" \"${library_version}\")\n        if [[ ${LIBRARY_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        LIBRARY_CREATED=$(create_external_library_package $library \"libtheoraenc\" \"libtheoraenc.a\" \"${library_version}\")\n        if [[ ${LIBRARY_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        LIBRARY_CREATED=$(create_external_library_package $library \"libtheoradec\" \"libtheoradec.a\" \"${library_version}\")\n        if [[ ${LIBRARY_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n      elif [[ ${LIBRARY_LIBVORBIS} == \"$library\" ]]; then\n\n        LIBRARY_CREATED=$(create_external_library_package $library \"libvorbisfile\" \"libvorbisfile.a\" \"${library_version}\")\n        if [[ ${LIBRARY_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        LIBRARY_CREATED=$(create_external_library_package $library \"libvorbisenc\" \"libvorbisenc.a\" \"${library_version}\")\n        if [[ ${LIBRARY_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        LIBRARY_CREATED=$(create_external_library_package $library \"libvorbis\" \"libvorbis.a\" \"${library_version}\")\n        if [[ ${LIBRARY_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n      elif [[ ${LIBRARY_LIBWEBP} == \"$library\" ]]; then\n\n        LIBRARY_CREATED=$(create_external_library_package $library \"libwebpmux\" \"libwebpmux.a\" \"${library_version}\")\n        if [[ ${LIBRARY_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        LIBRARY_CREATED=$(create_external_library_package $library \"libwebpdemux\" \"libwebpdemux.a\" \"${library_version}\")\n        if [[ ${LIBRARY_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        LIBRARY_CREATED=$(create_external_library_package $library \"libwebp\" \"libwebp.a\" \"${library_version}\")\n        if [[ ${LIBRARY_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n      elif [[ ${LIBRARY_OPENCOREAMR} == \"$library\" ]]; then\n\n        LIBRARY_CREATED=$(create_external_library_package $library \"libopencore-amrnb\" \"libopencore-amrnb.a\" \"${library_version}\")\n        if [[ ${LIBRARY_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n      elif [[ ${LIBRARY_NETTLE} == \"$library\" ]]; then\n\n        LIBRARY_CREATED=$(create_external_library_package $library \"libnettle\" \"libnettle.a\" \"${library_version}\")\n        if [[ ${LIBRARY_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        LIBRARY_CREATED=$(create_external_library_package $library \"libhogweed\" \"libhogweed.a\" \"${library_version}\")\n        if [[ ${LIBRARY_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n      else\n\n        library_name=$(get_library_name $((library)))\n        static_archive_name=$(get_static_archive_name $((library)))\n        LIBRARY_CREATED=$(create_external_library_package $library \"$library_name\" \"$static_archive_name\" \"${library_version}\")\n        if [[ ${LIBRARY_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n      fi\n\n    fi\n  done\n\n  # 2. FFMPEG & MOBILE FFMPEG\n  if [[ -n ${MOBILE_FFMPEG_XCF_BUILD} ]]; then\n\n    # FFMPEG\n    for FFMPEG_LIB in ${FFMPEG_LIBS}; do\n\n      XCFRAMEWORK_PATH=${BASEDIR}/prebuilt/ios-xcframework/${FFMPEG_LIB}.xcframework\n      mkdir -p \"${XCFRAMEWORK_PATH}\" 1>>\"${BASEDIR}/build.log\" 2>&1 || exit 1\n\n      echo -e \"Creating package for ${FFMPEG_LIB}\\n\" 1>>\"${BASEDIR}/build.log\" 2>&1\n\n      BUILD_COMMAND=\"xcodebuild -create-xcframework \"\n\n      for TARGET_ARCH in \"${TARGET_ARCH_LIST[@]}\"; do\n\n        if [[ ${TARGET_ARCH} != \"arm64e\" ]]; then\n\n          FFMPEG_LIB_UPPERCASE=$(echo \"${FFMPEG_LIB}\" | tr '[a-z]' '[A-Z]')\n          FFMPEG_LIB_CAPITALCASE=$(to_capital_case \"${FFMPEG_LIB}\")\n\n          FFMPEG_LIB_MAJOR=$(grep \"#define ${FFMPEG_LIB_UPPERCASE}_VERSION_MAJOR\" \"${BASEDIR}/prebuilt/ios-${TARGET_ARCH}/ffmpeg/include/${FFMPEG_LIB}/version.h\" | sed -e \"s/#define ${FFMPEG_LIB_UPPERCASE}_VERSION_MAJOR//g;s/\\ //g\")\n          FFMPEG_LIB_MINOR=$(grep \"#define ${FFMPEG_LIB_UPPERCASE}_VERSION_MINOR\" \"${BASEDIR}/prebuilt/ios-${TARGET_ARCH}/ffmpeg/include/${FFMPEG_LIB}/version.h\" | sed -e \"s/#define ${FFMPEG_LIB_UPPERCASE}_VERSION_MINOR//g;s/\\ //g\")\n          FFMPEG_LIB_MICRO=$(grep \"#define ${FFMPEG_LIB_UPPERCASE}_VERSION_MICRO\" \"${BASEDIR}/prebuilt/ios-${TARGET_ARCH}/ffmpeg/include/${FFMPEG_LIB}/version.h\" | sed \"s/#define ${FFMPEG_LIB_UPPERCASE}_VERSION_MICRO//g;s/\\ //g\")\n\n          FFMPEG_LIB_VERSION=\"${FFMPEG_LIB_MAJOR}.${FFMPEG_LIB_MINOR}.${FFMPEG_LIB_MICRO}\"\n\n          FFMPEG_LIB_FRAMEWORK_PATH=${BASEDIR}/prebuilt/ios-xcframework/.tmp/ios-${TARGET_ARCH}/${FFMPEG_LIB}.framework\n\n          rm -rf \"${FFMPEG_LIB_FRAMEWORK_PATH}\" 1>>\"${BASEDIR}/build.log\" 2>&1\n          mkdir -p \"${FFMPEG_LIB_FRAMEWORK_PATH}/Headers\" 1>>\"${BASEDIR}/build.log\" 2>&1 || exit 1\n\n          cp -r ${BASEDIR}/prebuilt/ios-${TARGET_ARCH}/ffmpeg/include/${FFMPEG_LIB}/* ${FFMPEG_LIB_FRAMEWORK_PATH}/Headers 1>>\"${BASEDIR}/build.log\" 2>&1\n          cp \"${BASEDIR}/prebuilt/ios-${TARGET_ARCH}/ffmpeg/lib/${FFMPEG_LIB}.${BUILD_LIBRARY_EXTENSION}\" \"${FFMPEG_LIB_FRAMEWORK_PATH}/${FFMPEG_LIB}\" 1>>\"${BASEDIR}/build.log\" 2>&1\n\n          # COPY THE LICENSES\n          if [ ${GPL_ENABLED} == \"yes\" ]; then\n\n            # GPLv3.0\n            cp \"${BASEDIR}/LICENSE.GPLv3\" \"${FFMPEG_LIB_FRAMEWORK_PATH}/LICENSE\" 1>>\"${BASEDIR}/build.log\" 2>&1\n          else\n\n            # LGPLv3.0\n            cp \"${BASEDIR}/LICENSE.LGPLv3\" \"${FFMPEG_LIB_FRAMEWORK_PATH}/LICENSE\" 1>>\"${BASEDIR}/build.log\" 2>&1\n          fi\n\n          build_info_plist \"${FFMPEG_LIB_FRAMEWORK_PATH}/Info.plist\" \"${FFMPEG_LIB}\" \"com.arthenica.mobileffmpeg.${FFMPEG_LIB_CAPITALCASE}\" \"${FFMPEG_LIB_VERSION}\" \"${FFMPEG_LIB_VERSION}\"\n\n          BUILD_COMMAND+=\" -framework ${FFMPEG_LIB_FRAMEWORK_PATH}\"\n        fi\n\n      done\n\n      BUILD_COMMAND+=\" -output ${XCFRAMEWORK_PATH}\"\n\n      COMMAND_OUTPUT=$(${BUILD_COMMAND} 2>&1)\n\n      echo \"${COMMAND_OUTPUT}\" 1>>\"${BASEDIR}/build.log\" 2>&1\n\n      echo \"\" 1>>\"${BASEDIR}/build.log\" 2>&1\n\n      if [[ ${COMMAND_OUTPUT} == *\"is empty in library\"* ]]; then\n        echo -e \"failed\\n\"\n        exit 1\n      fi\n\n      echo -e \"Created ${FFMPEG_LIB} xcframework successfully.\\n\" 1>>\"${BASEDIR}/build.log\" 2>&1\n\n    done\n\n    # MOBILE FFMPEG\n    XCFRAMEWORK_PATH=${BASEDIR}/prebuilt/ios-xcframework/mobileffmpeg.xcframework\n    mkdir -p \"${XCFRAMEWORK_PATH}\" 1>>\"${BASEDIR}/build.log\" 2>&1 || exit 1\n\n    BUILD_COMMAND=\"xcodebuild -create-xcframework \"\n\n    for TARGET_ARCH in \"${TARGET_ARCH_LIST[@]}\"; do\n\n      if [[ ${TARGET_ARCH} != \"arm64e\" ]]; then\n\n        MOBILE_FFMPEG_FRAMEWORK_PATH=\"${BASEDIR}/prebuilt/ios-xcframework/.tmp/ios-${TARGET_ARCH}/mobileffmpeg.framework\"\n\n        rm -rf \"${MOBILE_FFMPEG_FRAMEWORK_PATH}\" 1>>\"${BASEDIR}/build.log\" 2>&1\n        mkdir -p \"${MOBILE_FFMPEG_FRAMEWORK_PATH}/Headers\" 1>>\"${BASEDIR}/build.log\" 2>&1 || exit 1\n        mkdir -p \"${MOBILE_FFMPEG_FRAMEWORK_PATH}/Modules\" 1>>\"${BASEDIR}/build.log\" 2>&1 || exit 1\n        build_modulemap \"${MOBILE_FFMPEG_FRAMEWORK_PATH}/Modules/module.modulemap\"\n\n        cp -r ${BASEDIR}/prebuilt/ios-${TARGET_ARCH}/mobile-ffmpeg/include/* ${MOBILE_FFMPEG_FRAMEWORK_PATH}/Headers 1>>\"${BASEDIR}/build.log\" 2>&1\n        cp \"${BASEDIR}/prebuilt/ios-${TARGET_ARCH}/mobile-ffmpeg/lib/libmobileffmpeg.${BUILD_LIBRARY_EXTENSION}\" \"${MOBILE_FFMPEG_FRAMEWORK_PATH}/mobileffmpeg\" 1>>\"${BASEDIR}/build.log\" 2>&1\n\n        # COPY THE LICENSES\n        if [ ${GPL_ENABLED} == \"yes\" ]; then\n          cp \"${BASEDIR}/LICENSE.GPLv3\" \"${MOBILE_FFMPEG_FRAMEWORK_PATH}/LICENSE\" 1>>\"${BASEDIR}/build.log\" 2>&1\n        else\n          cp \"${BASEDIR}/LICENSE.LGPLv3\" \"${MOBILE_FFMPEG_FRAMEWORK_PATH}/LICENSE\" 1>>\"${BASEDIR}/build.log\" 2>&1\n        fi\n\n        BUILD_COMMAND+=\" -framework ${MOBILE_FFMPEG_FRAMEWORK_PATH}\"\n\n      fi\n    done;\n\n    BUILD_COMMAND+=\" -output ${XCFRAMEWORK_PATH}\"\n\n    COMMAND_OUTPUT=$(${BUILD_COMMAND} 2>&1)\n\n    echo \"${COMMAND_OUTPUT}\" 1>>\"${BASEDIR}/build.log\" 2>&1\n\n    echo \"\" 1>>\"${BASEDIR}/build.log\" 2>&1\n\n    if [[ ${COMMAND_OUTPUT} == *\"is empty in library\"* ]]; then\n      echo -e \"failed\\n\"\n      exit 1\n    fi\n\n    echo -e \"Created mobileffmpeg xcframework successfully.\\n\" 1>>\"${BASEDIR}/build.log\" 2>&1\n\n    echo -e \"ok\\n\"\n\n  else\n\n    FFMPEG_UNIVERSAL=\"${BASEDIR}/prebuilt/ios-universal/ffmpeg-universal\"\n    mkdir -p \"${FFMPEG_UNIVERSAL}/include\" 1>>\"${BASEDIR}/build.log\" 2>&1 || exit 1\n    mkdir -p \"${FFMPEG_UNIVERSAL}/lib\" 1>>\"${BASEDIR}/build.log\" 2>&1 || exit 1\n\n    cp -r ${BASEDIR}/prebuilt/ios-${TARGET_ARCH_LIST[0]}/ffmpeg/include/* ${FFMPEG_UNIVERSAL}/include 1>>\"${BASEDIR}/build.log\" 2>&1\n    cp \"${BASEDIR}/prebuilt/ios-${TARGET_ARCH_LIST[0]}/ffmpeg/include/config.h\" \"${FFMPEG_UNIVERSAL}/include\" 1>>\"${BASEDIR}/build.log\" 2>&1\n\n    for FFMPEG_LIB in ${FFMPEG_LIBS}; do\n      LIPO_COMMAND=\"${LIPO} -create\"\n\n      for TARGET_ARCH in \"${TARGET_ARCH_LIST[@]}\"; do\n        LIPO_COMMAND+=\" ${BASEDIR}/prebuilt/ios-${TARGET_ARCH}/ffmpeg/lib/${FFMPEG_LIB}.${BUILD_LIBRARY_EXTENSION}\"\n      done\n\n      LIPO_COMMAND+=\" -output ${FFMPEG_UNIVERSAL}/lib/${FFMPEG_LIB}.${BUILD_LIBRARY_EXTENSION}\"\n\n      ${LIPO_COMMAND} 1>>\"${BASEDIR}/build.log\" 2>&1\n\n      if [ $? -ne 0 ]; then\n        echo -e \"failed\\n\"\n        exit 1\n      fi\n\n      FFMPEG_LIB_UPPERCASE=$(echo \"${FFMPEG_LIB}\" | tr '[a-z]' '[A-Z]')\n      FFMPEG_LIB_CAPITALCASE=$(to_capital_case \"${FFMPEG_LIB}\")\n\n      FFMPEG_LIB_MAJOR=$(grep \"#define ${FFMPEG_LIB_UPPERCASE}_VERSION_MAJOR\" \"${FFMPEG_UNIVERSAL}/include/${FFMPEG_LIB}/version.h\" | sed -e \"s/#define ${FFMPEG_LIB_UPPERCASE}_VERSION_MAJOR//g;s/\\ //g\")\n      FFMPEG_LIB_MINOR=$(grep \"#define ${FFMPEG_LIB_UPPERCASE}_VERSION_MINOR\" \"${FFMPEG_UNIVERSAL}/include/${FFMPEG_LIB}/version.h\" | sed -e \"s/#define ${FFMPEG_LIB_UPPERCASE}_VERSION_MINOR//g;s/\\ //g\")\n      FFMPEG_LIB_MICRO=$(grep \"#define ${FFMPEG_LIB_UPPERCASE}_VERSION_MICRO\" \"${FFMPEG_UNIVERSAL}/include/${FFMPEG_LIB}/version.h\" | sed \"s/#define ${FFMPEG_LIB_UPPERCASE}_VERSION_MICRO//g;s/\\ //g\")\n\n      FFMPEG_LIB_VERSION=\"${FFMPEG_LIB_MAJOR}.${FFMPEG_LIB_MINOR}.${FFMPEG_LIB_MICRO}\"\n\n      FFMPEG_LIB_FRAMEWORK_PATH=\"${BASEDIR}/prebuilt/ios-framework/${FFMPEG_LIB}.framework\"\n\n      rm -rf \"${FFMPEG_LIB_FRAMEWORK_PATH}\" 1>>\"${BASEDIR}/build.log\" 2>&1\n      mkdir -p \"${FFMPEG_LIB_FRAMEWORK_PATH}/Headers\" 1>>\"${BASEDIR}/build.log\" 2>&1 || exit 1\n\n      cp -r ${FFMPEG_UNIVERSAL}/include/${FFMPEG_LIB}/* ${FFMPEG_LIB_FRAMEWORK_PATH}/Headers 1>>\"${BASEDIR}/build.log\" 2>&1\n      cp \"${FFMPEG_UNIVERSAL}/lib/${FFMPEG_LIB}.${BUILD_LIBRARY_EXTENSION}\" \"${FFMPEG_LIB_FRAMEWORK_PATH}/${FFMPEG_LIB}\" 1>>\"${BASEDIR}/build.log\" 2>&1\n\n      # COPY THE LICENSES\n      if [ ${GPL_ENABLED} == \"yes\" ]; then\n\n        # GPLv3.0\n        cp \"${BASEDIR}/LICENSE.GPLv3\" \"${FFMPEG_LIB_FRAMEWORK_PATH}/LICENSE\" 1>>\"${BASEDIR}/build.log\" 2>&1\n      else\n\n        # LGPLv3.0\n        cp \"${BASEDIR}/LICENSE.LGPLv3\" \"${FFMPEG_LIB_FRAMEWORK_PATH}/LICENSE\" 1>>\"${BASEDIR}/build.log\" 2>&1\n      fi\n\n      build_info_plist \"${FFMPEG_LIB_FRAMEWORK_PATH}/Info.plist\" \"${FFMPEG_LIB}\" \"com.arthenica.mobileffmpeg.${FFMPEG_LIB_CAPITALCASE}\" \"${FFMPEG_LIB_VERSION}\" \"${FFMPEG_LIB_VERSION}\"\n\n      echo -e \"Created ${FFMPEG_LIB} framework successfully.\\n\" 1>>\"${BASEDIR}/build.log\" 2>&1\n    done\n\n    # COPY THE LICENSES\n    if [ ${GPL_ENABLED} == \"yes\" ]; then\n      cp \"${BASEDIR}/LICENSE.GPLv3\" \"${FFMPEG_UNIVERSAL}/LICENSE\" 1>>\"${BASEDIR}/build.log\" 2>&1\n    else\n      cp \"${BASEDIR}/LICENSE.LGPLv3\" \"${FFMPEG_UNIVERSAL}/LICENSE\" 1>>\"${BASEDIR}/build.log\" 2>&1\n    fi\n\n    # 3. MOBILE FFMPEG\n    MOBILE_FFMPEG_VERSION=$(get_mobile_ffmpeg_version)\n    MOBILE_FFMPEG_UNIVERSAL=\"${BASEDIR}/prebuilt/ios-universal/mobile-ffmpeg-universal\"\n    MOBILE_FFMPEG_FRAMEWORK_PATH=\"${BASEDIR}/prebuilt/ios-framework/mobileffmpeg.framework\"\n    mkdir -p \"${MOBILE_FFMPEG_UNIVERSAL}/include\" 1>>\"${BASEDIR}/build.log\" 2>&1 || exit 1\n    mkdir -p \"${MOBILE_FFMPEG_UNIVERSAL}/lib\" 1>>\"${BASEDIR}/build.log\" 2>&1 || exit 1\n    rm -rf \"${MOBILE_FFMPEG_FRAMEWORK_PATH}\" 1>>\"${BASEDIR}/build.log\" 2>&1\n    mkdir -p \"${MOBILE_FFMPEG_FRAMEWORK_PATH}/Headers\" 1>>\"${BASEDIR}/build.log\" 2>&1 || exit 1\n    mkdir -p \"${MOBILE_FFMPEG_FRAMEWORK_PATH}/Modules\" 1>>\"${BASEDIR}/build.log\" 2>&1 || exit 1\n\n    LIPO_COMMAND=\"${LIPO} -create\"\n    for TARGET_ARCH in \"${TARGET_ARCH_LIST[@]}\"; do\n      LIPO_COMMAND+=\" ${BASEDIR}/prebuilt/ios-${TARGET_ARCH}/mobile-ffmpeg/lib/libmobileffmpeg.${BUILD_LIBRARY_EXTENSION}\"\n    done\n    LIPO_COMMAND+=\" -output ${MOBILE_FFMPEG_UNIVERSAL}/lib/libmobileffmpeg.${BUILD_LIBRARY_EXTENSION}\"\n\n    ${LIPO_COMMAND} 1>>\"${BASEDIR}/build.log\" 2>&1\n\n    if [ $? -ne 0 ]; then\n      echo -e \"failed\\n\"\n      exit 1\n    fi\n\n    cp -r ${BASEDIR}/prebuilt/ios-${TARGET_ARCH_LIST[0]}/mobile-ffmpeg/include/* ${MOBILE_FFMPEG_UNIVERSAL}/include 1>>\"${BASEDIR}/build.log\" 2>&1\n    cp -r ${MOBILE_FFMPEG_UNIVERSAL}/include/* ${MOBILE_FFMPEG_FRAMEWORK_PATH}/Headers 1>>\"${BASEDIR}/build.log\" 2>&1\n    cp \"${MOBILE_FFMPEG_UNIVERSAL}/lib/libmobileffmpeg.${BUILD_LIBRARY_EXTENSION}\" \"${MOBILE_FFMPEG_FRAMEWORK_PATH}/mobileffmpeg\" 1>>\"${BASEDIR}/build.log\" 2>&1\n\n    # COPY THE LICENSES\n    if [ ${GPL_ENABLED} == \"yes\" ]; then\n      cp \"${BASEDIR}/LICENSE.GPLv3\" \"${MOBILE_FFMPEG_UNIVERSAL}/LICENSE\" 1>>\"${BASEDIR}/build.log\" 2>&1\n      cp \"${BASEDIR}/LICENSE.GPLv3\" \"${MOBILE_FFMPEG_FRAMEWORK_PATH}/LICENSE\" 1>>\"${BASEDIR}/build.log\" 2>&1\n    else\n      cp \"${BASEDIR}/LICENSE.LGPLv3\" \"${MOBILE_FFMPEG_UNIVERSAL}/LICENSE\" 1>>\"${BASEDIR}/build.log\" 2>&1\n      cp \"${BASEDIR}/LICENSE.LGPLv3\" \"${MOBILE_FFMPEG_FRAMEWORK_PATH}/LICENSE\" 1>>\"${BASEDIR}/build.log\" 2>&1\n    fi\n\n    build_info_plist \"${MOBILE_FFMPEG_FRAMEWORK_PATH}/Info.plist\" \"mobileffmpeg\" \"com.arthenica.mobileffmpeg.MobileFFmpeg\" \"${MOBILE_FFMPEG_VERSION}\" \"${MOBILE_FFMPEG_VERSION}\"\n    build_modulemap \"${MOBILE_FFMPEG_FRAMEWORK_PATH}/Modules/module.modulemap\"\n\n    echo -e \"Created mobileffmpeg.framework and universal library successfully.\\n\" 1>>\"${BASEDIR}/build.log\" 2>&1\n\n    echo -e \"ok\\n\"\n  fi\nfi\n"
        },
        {
          "name": "ios",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "tvos.sh",
          "type": "blob",
          "size": 42.6044921875,
          "content": "#!/bin/bash\n\n# ARCH INDEXES\nARCH_ARM64=0\nARCH_X86_64=1\n\n# LIBRARY INDEXES\nLIBRARY_FONTCONFIG=0\nLIBRARY_FREETYPE=1\nLIBRARY_FRIBIDI=2\nLIBRARY_GMP=3\nLIBRARY_GNUTLS=4\nLIBRARY_LAME=5\nLIBRARY_LIBASS=6\nLIBRARY_LIBTHEORA=7\nLIBRARY_LIBVORBIS=8\nLIBRARY_LIBVPX=9\nLIBRARY_LIBWEBP=10\nLIBRARY_LIBXML2=11\nLIBRARY_OPENCOREAMR=12\nLIBRARY_SHINE=13\nLIBRARY_SPEEX=14\nLIBRARY_WAVPACK=15\nLIBRARY_KVAZAAR=16\nLIBRARY_X264=17\nLIBRARY_XVIDCORE=18\nLIBRARY_X265=19\nLIBRARY_LIBVIDSTAB=20\nLIBRARY_RUBBERBAND=21\nLIBRARY_LIBILBC=22\nLIBRARY_OPUS=23\nLIBRARY_SNAPPY=24\nLIBRARY_SOXR=25\nLIBRARY_LIBAOM=26\nLIBRARY_CHROMAPRINT=27\nLIBRARY_TWOLAME=28\nLIBRARY_SDL=29\nLIBRARY_TESSERACT=30\nLIBRARY_OPENH264=31\nLIBRARY_VO_AMRWBENC=32\nLIBRARY_GIFLIB=33\nLIBRARY_JPEG=34\nLIBRARY_LIBOGG=35\nLIBRARY_LIBPNG=36\nLIBRARY_NETTLE=37\nLIBRARY_TIFF=38\nLIBRARY_EXPAT=39\nLIBRARY_SNDFILE=40\nLIBRARY_LEPTONICA=41\nLIBRARY_LIBSAMPLERATE=42\nLIBRARY_ZLIB=43\nLIBRARY_AUDIOTOOLBOX=44\nLIBRARY_BZIP2=45\nLIBRARY_VIDEOTOOLBOX=46\nLIBRARY_AVFOUNDATION=47\nLIBRARY_LIBICONV=48\nLIBRARY_LIBUUID=49\n\n# ENABLE ARCH\nENABLED_ARCHITECTURES=(1 1)\n\n# ENABLE LIBRARIES\nENABLED_LIBRARIES=(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)\n\nexport BASEDIR=$(pwd)\n\nRECONF_LIBRARIES=()\nREBUILD_LIBRARIES=()\nREDOWNLOAD_LIBRARIES=()\n\n# CHECKING IF XCODE IS INSTALLED\nif ! [ -x \"$(command -v xcrun)\" ]; then\n  echo -e \"\\n(*) xcrun command not found. Please check your Xcode installation.\\n\"\n  exit 1\nfi\n\n# USE 10.2 AS TVOS_MIN_VERSION\nexport TVOS_MIN_VERSION=10.2\n\nexport APPLE_TVOS_BUILD=1\n\nget_mobile_ffmpeg_version() {\n  local MOBILE_FFMPEG_VERSION=$(grep 'const MOBILE_FFMPEG_VERSION' ${BASEDIR}/ios/src/MobileFFmpeg.m | grep -Eo '\\\".*\\\"' | sed -e 's/\\\"//g')\n\n  if [[ -z ${MOBILE_FFMPEG_LTS_BUILD} ]]; then\n    echo \"${MOBILE_FFMPEG_VERSION}\"\n  else\n    echo \"${MOBILE_FFMPEG_VERSION}.LTS\"\n  fi\n}\n\ndisplay_help() {\n  COMMAND=$(echo $0 | sed -e 's/\\.\\///g')\n\n  echo -e \"\\n$COMMAND builds FFmpeg and MobileFFmpeg for tvOS platform. By default two architectures (arm64 and x86-64) are built without any external libraries enabled. Options can be used to disable architectures and/or enable external libraries. Please note that GPL libraries (external libraries with GPL license) need --enable-gpl flag to be set explicitly. When compilation ends, framework bundles and universal fat binaries are created under the prebuilt folder.\\n\"\n\n  echo -e \"Usage: ./$COMMAND [OPTION]...\\n\"\n\n  echo -e \"Specify environment variables as VARIABLE=VALUE to override default build options.\\n\"\n\n  echo -e \"Options:\"\n\n  echo -e \"  -h, --help\\t\\t\\tdisplay this help and exit\"\n  echo -e \"  -v, --version\\t\\t\\tdisplay version information and exit\"\n  echo -e \"  -d, --debug\\t\\t\\tbuild with debug information\"\n  echo -e \"  -s, --speed\\t\\t\\toptimize for speed instead of size\"\n  echo -e \"  -l, --lts\\t\\t\\tbuild lts packages to support sdk 9.2+ devices\"\n  echo -e \"  -f, --force\\t\\t\\tignore warnings and build with given options\\n\"\n\n  echo -e \"Licensing options:\"\n\n  echo -e \"  --enable-gpl\\t\\t\\tallow use of GPL libraries, created libs will be licensed under GPLv3.0 [no]\\n\"\n\n  echo -e \"Platforms:\"\n\n  echo -e \"  --disable-arm64\\t\\tdo not build arm64 platform [yes]\"\n  echo -e \"  --disable-x86-64\\t\\tdo not build x86-64 platform [yes]\\n\"\n\n  echo -e \"Libraries:\"\n\n  echo -e \"  --full\\t\\t\\tenables all non-GPL external libraries\"\n  echo -e \"  --enable-tvos-audiotoolbox\\tbuild with built-in Apple AudioToolbox support[no]\"\n  echo -e \"  --enable-tvos-bzip2\\t\\tbuild with built-in bzip2 support[no]\"\n  if [[ -z ${MOBILE_FFMPEG_LTS_BUILD} ]]; then\n    echo -e \"  --enable-tvos-videotoolbox\\tbuild with built-in Apple VideoToolbox support[no]\"\n  fi\n  echo -e \"  --enable-tvos-zlib\\t\\tbuild with built-in zlib [no]\"\n  echo -e \"  --enable-tvos-libiconv\\tbuild with built-in libiconv [no]\"\n  echo -e \"  --enable-chromaprint\\t\\tbuild with chromaprint [no]\"\n  echo -e \"  --enable-fontconfig\\t\\tbuild with fontconfig [no]\"\n  echo -e \"  --enable-freetype\\t\\tbuild with freetype [no]\"\n  echo -e \"  --enable-fribidi\\t\\tbuild with fribidi [no]\"\n  echo -e \"  --enable-gmp\\t\\t\\tbuild with gmp [no]\"\n  echo -e \"  --enable-gnutls\\t\\tbuild with gnutls [no]\"\n  echo -e \"  --enable-kvazaar\\t\\tbuild with kvazaar [no]\"\n  echo -e \"  --enable-lame\\t\\t\\tbuild with lame [no]\"\n  echo -e \"  --enable-libaom\\t\\tbuild with libaom [no]\"\n  echo -e \"  --enable-libass\\t\\tbuild with libass [no]\"\n  echo -e \"  --enable-libilbc\\t\\tbuild with libilbc [no]\"\n  echo -e \"  --enable-libtheora\\t\\tbuild with libtheora [no]\"\n  echo -e \"  --enable-libvorbis\\t\\tbuild with libvorbis [no]\"\n  echo -e \"  --enable-libvpx\\t\\tbuild with libvpx [no]\"\n  echo -e \"  --enable-libwebp\\t\\tbuild with libwebp [no]\"\n  echo -e \"  --enable-libxml2\\t\\tbuild with libxml2 [no]\"\n  echo -e \"  --enable-opencore-amr\\t\\tbuild with opencore-amr [no]\"\n  echo -e \"  --enable-openh264\\t\\tbuild with openh264 [no]\"\n  echo -e \"  --enable-opus\\t\\t\\tbuild with opus [no]\"\n  echo -e \"  --enable-sdl\\t\\t\\tbuild with sdl [no]\"\n  echo -e \"  --enable-shine\\t\\tbuild with shine [no]\"\n  echo -e \"  --enable-snappy\\t\\tbuild with snappy [no]\"\n  echo -e \"  --enable-soxr\\t\\t\\tbuild with soxr [no]\"\n  echo -e \"  --enable-speex\\t\\tbuild with speex [no]\"\n  echo -e \"  --enable-tesseract\\t\\tbuild with tesseract [no]\"\n  echo -e \"  --enable-twolame\\t\\tbuild with twolame [no]\"\n  echo -e \"  --enable-vo-amrwbenc\\t\\tbuild with vo-amrwbenc [no]\"\n  echo -e \"  --enable-wavpack\\t\\tbuild with wavpack [no]\\n\"\n\n  echo -e \"GPL libraries:\"\n\n  echo -e \"  --enable-libvidstab\\t\\tbuild with libvidstab [no]\"\n  echo -e \"  --enable-rubberband\\t\\tbuild with rubber band [no]\"\n  echo -e \"  --enable-x264\\t\\t\\tbuild with x264 [no]\"\n  echo -e \"  --enable-x265\\t\\t\\tbuild with x265 [no]\"\n  echo -e \"  --enable-xvidcore\\t\\tbuild with xvidcore [no]\\n\"\n\n  echo -e \"Advanced options:\"\n\n  echo -e \"  --reconf-LIBRARY\\t\\trun autoreconf before building LIBRARY [no]\"\n  echo -e \"  --redownload-LIBRARY\\t\\tdownload LIBRARY even it is detected as already downloaded [no]\"\n  echo -e \"  --rebuild-LIBRARY\\t\\tbuild LIBRARY even it is detected as already built [no]\\n\"\n}\n\ndisplay_version() {\n  COMMAND=$(echo $0 | sed -e 's/\\.\\///g')\n\n  echo -e \"\\\n$COMMAND v$(get_mobile_ffmpeg_version)\\n\\\nCopyright (c) 2019-2020 Taner Sener\\n\\\nLicense LGPLv3.0: GNU LGPL version 3 or later\\n\\\n<https://www.gnu.org/licenses/lgpl-3.0.en.html>\\n\\\nThis is free software: you can redistribute it and/or modify it under the terms of the \\\nGNU Lesser General Public License as published by the Free Software Foundation, \\\neither version 3 of the License, or (at your option) any later version.\"\n}\n\nskip_library() {\n  SKIP_VARIABLE=$(echo \"SKIP_$1\" | sed \"s/\\-/\\_/g\")\n\n  export ${SKIP_VARIABLE}=1\n}\n\nno_output_redirection() {\n  export NO_OUTPUT_REDIRECTION=1\n}\n\nno_workspace_cleanup_library() {\n  NO_WORKSPACE_CLEANUP_VARIABLE=$(echo \"NO_WORKSPACE_CLEANUP_$1\" | sed \"s/\\-/\\_/g\")\n\n  export ${NO_WORKSPACE_CLEANUP_VARIABLE}=1\n}\n\nenable_debug() {\n  export MOBILE_FFMPEG_DEBUG=\"-g\"\n\n  BUILD_TYPE_ID+=\"debug \"\n}\n\noptimize_for_speed() {\n  export MOBILE_FFMPEG_OPTIMIZED_FOR_SPEED=\"1\"\n}\n\nenable_lts_build() {\n  export MOBILE_FFMPEG_LTS_BUILD=\"1\"\n\n  # XCODE 7.3 HAS TVOS SDK 9.2\n  export TVOS_MIN_VERSION=9.2\n\n  # TVOS SDK 9.2 DOES NOT INCLUDE VIDEOTOOLBOX\n  ENABLED_LIBRARIES[LIBRARY_VIDEOTOOLBOX]=0\n}\n\nreconf_library() {\n  local RECONF_VARIABLE=$(echo \"RECONF_$1\" | sed \"s/\\-/\\_/g\")\n  local library_supported=0\n\n  for library in {1..43}; do\n    library_name=$(get_library_name $((library - 1)))\n\n    if [[ $1 != \"ffmpeg\" ]] && [[ ${library_name} == \"$1\" ]]; then\n      export \"${RECONF_VARIABLE}\"=1\n      RECONF_LIBRARIES+=(\"$1\")\n      library_supported=1\n    fi\n  done\n\n  if [[ ${library_supported} -eq 0 ]]; then\n    echo -e \"INFO: --reconf flag detected for library $1 is not supported.\\n\" 1>>${BASEDIR}/build.log 2>&1\n  fi\n}\n\nrebuild_library() {\n  local REBUILD_VARIABLE=$(echo \"REBUILD_$1\" | sed \"s/\\-/\\_/g\")\n  local library_supported=0\n\n  for library in {1..43}; do\n    library_name=$(get_library_name $((library - 1)))\n\n    if [[ $1 != \"ffmpeg\" ]] && [[ ${library_name} == $1 ]]; then\n      export ${REBUILD_VARIABLE}=1\n      REBUILD_LIBRARIES+=($1)\n      library_supported=1\n    fi\n  done\n\n  if [[ ${library_supported} -eq 0 ]]; then\n    echo -e \"INFO: --rebuild flag detected for library $1 is not supported.\\n\" 1>>${BASEDIR}/build.log 2>&1\n  fi\n}\n\nredownload_library() {\n  local REDOWNLOAD_VARIABLE=$(echo \"REDOWNLOAD_$1\" | sed \"s/\\-/\\_/g\")\n  local library_supported=0\n\n  for library in {0..42}; do\n    library_name=$(get_library_name ${library})\n\n    if [[ ${library_name} == $1 ]]; then\n      export ${REDOWNLOAD_VARIABLE}=1\n      REDOWNLOAD_LIBRARIES+=($1)\n      library_supported=1\n    fi\n  done\n\n  if [[ \"ffmpeg\" == $1 ]]; then\n    export ${REDOWNLOAD_VARIABLE}=1\n    REDOWNLOAD_LIBRARIES+=($1)\n    library_supported=1\n  fi\n\n  if [[ ${library_supported} -eq 0 ]]; then\n    echo -e \"INFO: --redownload flag detected for library $1 is not supported.\\n\" 1>>${BASEDIR}/build.log 2>&1\n  fi\n}\n\nenable_library() {\n  set_library $1 1\n}\n\nset_library() {\n  case $1 in\n  tvos-zlib)\n    ENABLED_LIBRARIES[LIBRARY_ZLIB]=$2\n    ;;\n  tvos-audiotoolbox)\n    ENABLED_LIBRARIES[LIBRARY_AUDIOTOOLBOX]=$2\n    ;;\n  tvos-bzip2)\n    ENABLED_LIBRARIES[LIBRARY_BZIP2]=$2\n    ;;\n  tvos-videotoolbox)\n    ENABLED_LIBRARIES[LIBRARY_VIDEOTOOLBOX]=$2\n    ;;\n  tvos-libiconv)\n    ENABLED_LIBRARIES[LIBRARY_LIBICONV]=$2\n    ;;\n  tvos-libuuid)\n    ENABLED_LIBRARIES[LIBRARY_LIBUUID]=$2\n    ;;\n  chromaprint)\n    ENABLED_LIBRARIES[LIBRARY_CHROMAPRINT]=$2\n    ;;\n  fontconfig)\n    ENABLED_LIBRARIES[LIBRARY_FONTCONFIG]=$2\n    ENABLED_LIBRARIES[LIBRARY_LIBUUID]=$2\n    ENABLED_LIBRARIES[LIBRARY_EXPAT]=$2\n    ENABLED_LIBRARIES[LIBRARY_LIBICONV]=$2\n    set_library \"freetype\" $2\n    ;;\n  freetype)\n    ENABLED_LIBRARIES[LIBRARY_FREETYPE]=$2\n    ENABLED_LIBRARIES[LIBRARY_ZLIB]=$2\n    set_library \"libpng\" $2\n    ;;\n  fribidi)\n    ENABLED_LIBRARIES[LIBRARY_FRIBIDI]=$2\n    ;;\n  gmp)\n    ENABLED_LIBRARIES[LIBRARY_GMP]=$2\n    ;;\n  gnutls)\n    ENABLED_LIBRARIES[LIBRARY_GNUTLS]=$2\n    ENABLED_LIBRARIES[LIBRARY_ZLIB]=$2\n    set_library \"nettle\" $2\n    set_library \"gmp\" $2\n    set_library \"tvos-libiconv\" $2\n    ;;\n  kvazaar)\n    ENABLED_LIBRARIES[LIBRARY_KVAZAAR]=$2\n    ;;\n  lame)\n    ENABLED_LIBRARIES[LIBRARY_LAME]=$2\n    set_library \"tvos-libiconv\" $2\n    ;;\n  libaom)\n    ENABLED_LIBRARIES[LIBRARY_LIBAOM]=$2\n    ;;\n  libass)\n    ENABLED_LIBRARIES[LIBRARY_LIBASS]=$2\n    ENABLED_LIBRARIES[LIBRARY_LIBUUID]=$2\n    ENABLED_LIBRARIES[LIBRARY_EXPAT]=$2\n    set_library \"freetype\" $2\n    set_library \"fribidi\" $2\n    set_library \"fontconfig\" $2\n    set_library \"tvos-libiconv\" $2\n    ;;\n  libilbc)\n    ENABLED_LIBRARIES[LIBRARY_LIBILBC]=$2\n    ;;\n  libpng)\n    ENABLED_LIBRARIES[LIBRARY_LIBPNG]=$2\n    ENABLED_LIBRARIES[LIBRARY_ZLIB]=$2\n    ;;\n  libtheora)\n    ENABLED_LIBRARIES[LIBRARY_LIBTHEORA]=$2\n    ENABLED_LIBRARIES[LIBRARY_LIBOGG]=$2\n    set_library \"libvorbis\" $2\n    ;;\n  libvidstab)\n    ENABLED_LIBRARIES[LIBRARY_LIBVIDSTAB]=$2\n    ;;\n  libvorbis)\n    ENABLED_LIBRARIES[LIBRARY_LIBVORBIS]=$2\n    ENABLED_LIBRARIES[LIBRARY_LIBOGG]=$2\n    ;;\n  libvpx)\n    ENABLED_LIBRARIES[LIBRARY_LIBVPX]=$2\n    ;;\n  libwebp)\n    ENABLED_LIBRARIES[LIBRARY_LIBWEBP]=$2\n    ENABLED_LIBRARIES[LIBRARY_GIFLIB]=$2\n    ENABLED_LIBRARIES[LIBRARY_JPEG]=$2\n    set_library \"tiff\" $2\n    set_library \"libpng\" $2\n    ;;\n  libxml2)\n    ENABLED_LIBRARIES[LIBRARY_LIBXML2]=$2\n    set_library \"tvos-libiconv\" $2\n    ;;\n  opencore-amr)\n    ENABLED_LIBRARIES[LIBRARY_OPENCOREAMR]=$2\n    ;;\n  openh264)\n    ENABLED_LIBRARIES[LIBRARY_OPENH264]=$2\n    ;;\n  opus)\n    ENABLED_LIBRARIES[LIBRARY_OPUS]=$2\n    ;;\n  rubberband)\n    ENABLED_LIBRARIES[LIBRARY_RUBBERBAND]=$2\n    ENABLED_LIBRARIES[LIBRARY_SNDFILE]=$2\n    ENABLED_LIBRARIES[LIBRARY_LIBSAMPLERATE]=$2\n    ;;\n  sdl)\n    ENABLED_LIBRARIES[LIBRARY_SDL]=$2\n    ;;\n  shine)\n    ENABLED_LIBRARIES[LIBRARY_SHINE]=$2\n    ;;\n  snappy)\n    ENABLED_LIBRARIES[LIBRARY_SNAPPY]=$2\n    ENABLED_LIBRARIES[LIBRARY_ZLIB]=$2\n    ;;\n  soxr)\n    ENABLED_LIBRARIES[LIBRARY_SOXR]=$2\n    ;;\n  speex)\n    ENABLED_LIBRARIES[LIBRARY_SPEEX]=$2\n    ;;\n  tesseract)\n    ENABLED_LIBRARIES[LIBRARY_TESSERACT]=$2\n    ENABLED_LIBRARIES[LIBRARY_LEPTONICA]=$2\n    ENABLED_LIBRARIES[LIBRARY_LIBWEBP]=$2\n    ENABLED_LIBRARIES[LIBRARY_GIFLIB]=$2\n    ENABLED_LIBRARIES[LIBRARY_JPEG]=$2\n    ENABLED_LIBRARIES[LIBRARY_ZLIB]=$2\n    set_library \"tiff\" $2\n    set_library \"libpng\" $2\n    ;;\n  twolame)\n    ENABLED_LIBRARIES[LIBRARY_TWOLAME]=$2\n    ENABLED_LIBRARIES[LIBRARY_SNDFILE]=$2\n    ;;\n  vo-amrwbenc)\n    ENABLED_LIBRARIES[LIBRARY_VO_AMRWBENC]=$2\n    ;;\n  wavpack)\n    ENABLED_LIBRARIES[LIBRARY_WAVPACK]=$2\n    ;;\n  x264)\n    ENABLED_LIBRARIES[LIBRARY_X264]=$2\n    ;;\n  x265)\n    ENABLED_LIBRARIES[LIBRARY_X265]=$2\n    ;;\n  xvidcore)\n    ENABLED_LIBRARIES[LIBRARY_XVIDCORE]=$2\n    ;;\n  expat | giflib | jpeg | leptonica | libogg | libsamplerate | libsndfile)\n    # THESE LIBRARIES ARE NOT ENABLED DIRECTLY\n    ;;\n  nettle)\n    ENABLED_LIBRARIES[LIBRARY_NETTLE]=$2\n    set_library \"gmp\" $2\n    ;;\n  tiff)\n    ENABLED_LIBRARIES[LIBRARY_TIFF]=$2\n    ENABLED_LIBRARIES[LIBRARY_JPEG]=$2\n    ;;\n  *)\n    print_unknown_library $1\n    ;;\n  esac\n}\n\ndisable_arch() {\n  set_arch $1 0\n}\n\nset_arch() {\n  case $1 in\n  arm64)\n    ENABLED_ARCHITECTURES[ARCH_ARM64]=$2\n    ;;\n  x86-64)\n    ENABLED_ARCHITECTURES[ARCH_X86_64]=$2\n    ;;\n  *)\n    print_unknown_platform $1\n    ;;\n  esac\n}\n\nprint_unknown_option() {\n  echo -e \"Unknown option \\\"$1\\\".\\nSee $0 --help for available options.\"\n  exit 1\n}\n\nprint_unknown_library() {\n  echo -e \"Unknown library \\\"$1\\\".\\nSee $0 --help for available libraries.\"\n  exit 1\n}\n\nprint_unknown_platform() {\n  echo -e \"Unknown platform \\\"$1\\\".\\nSee $0 --help for available platforms.\"\n  exit 1\n}\n\nprint_enabled_architectures() {\n  echo -n \"Architectures: \"\n\n  let enabled=0\n  for print_arch in {0..1}; do\n    if [[ ${ENABLED_ARCHITECTURES[$print_arch]} -eq 1 ]]; then\n      if [[ ${enabled} -ge 1 ]]; then\n        echo -n \", \"\n      fi\n      echo -n $(get_arch_name $print_arch)\n      enabled=$((${enabled} + 1))\n    fi\n  done\n\n  if [ ${enabled} -gt 0 ]; then\n    echo \"\"\n  else\n    echo \"none\"\n  fi\n}\n\nprint_enabled_libraries() {\n  echo -n \"Libraries: \"\n\n  let enabled=0\n\n  # FIRST BUILT-IN LIBRARIES\n  for library in {43..49}; do\n    if [[ ${ENABLED_LIBRARIES[$library]} -eq 1 ]]; then\n      if [[ ${enabled} -ge 1 ]]; then\n        echo -n \", \"\n      fi\n      echo -n $(get_library_name $library)\n      enabled=$((${enabled} + 1))\n    fi\n  done\n\n  # THEN EXTERNAL LIBRARIES\n  for library in {0..32}; do\n    if [[ ${ENABLED_LIBRARIES[$library]} -eq 1 ]]; then\n      if [[ ${enabled} -ge 1 ]]; then\n        echo -n \", \"\n      fi\n      echo -n $(get_library_name $library)\n      enabled=$((${enabled} + 1))\n    fi\n  done\n\n  if [ ${enabled} -gt 0 ]; then\n    echo \"\"\n  else\n    echo \"none\"\n  fi\n}\n\nprint_reconfigure_requested_libraries() {\n  local counter=0\n\n  for RECONF_LIBRARY in \"${RECONF_LIBRARIES[@]}\"; do\n    if [[ ${counter} -eq 0 ]]; then\n      echo -n \"Reconfigure: \"\n    else\n      echo -n \", \"\n    fi\n\n    echo -n ${RECONF_LIBRARY}\n\n    counter=$((${counter} + 1))\n  done\n\n  if [[ ${counter} -gt 0 ]]; then\n    echo \"\"\n  fi\n}\n\nprint_rebuild_requested_libraries() {\n  local counter=0\n\n  for REBUILD_LIBRARY in \"${REBUILD_LIBRARIES[@]}\"; do\n    if [[ ${counter} -eq 0 ]]; then\n      echo -n \"Rebuild: \"\n    else\n      echo -n \", \"\n    fi\n\n    echo -n ${REBUILD_LIBRARY}\n\n    counter=$((${counter} + 1))\n  done\n\n  if [[ ${counter} -gt 0 ]]; then\n    echo \"\"\n  fi\n}\n\nprint_redownload_requested_libraries() {\n  local counter=0\n\n  for REDOWNLOAD_LIBRARY in \"${REDOWNLOAD_LIBRARIES[@]}\"; do\n    if [[ ${counter} -eq 0 ]]; then\n      echo -n \"Redownload: \"\n    else\n      echo -n \", \"\n    fi\n\n    echo -n ${REDOWNLOAD_LIBRARY}\n\n    counter=$((${counter} + 1))\n  done\n\n  if [[ ${counter} -gt 0 ]]; then\n    echo \"\"\n  fi\n}\n\nbuild_info_plist() {\n  local FILE_PATH=\"$1\"\n  local FRAMEWORK_NAME=\"$2\"\n  local FRAMEWORK_ID=\"$3\"\n  local FRAMEWORK_SHORT_VERSION=\"$4\"\n  local FRAMEWORK_VERSION=\"$5\"\n\n  cat >${FILE_PATH} <<EOF\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>CFBundleDevelopmentRegion</key>\n\t<string>en</string>\n\t<key>CFBundleExecutable</key>\n\t<string>${FRAMEWORK_NAME}</string>\n\t<key>CFBundleIdentifier</key>\n\t<string>${FRAMEWORK_ID}</string>\n\t<key>CFBundleInfoDictionaryVersion</key>\n\t<string>6.0</string>\n\t<key>CFBundleName</key>\n\t<string>${FRAMEWORK_NAME}</string>\n\t<key>CFBundlePackageType</key>\n\t<string>FMWK</string>\n\t<key>CFBundleShortVersionString</key>\n\t<string>${FRAMEWORK_SHORT_VERSION}</string>\n\t<key>CFBundleVersion</key>\n\t<string>${FRAMEWORK_VERSION}</string>\n\t<key>CFBundleSignature</key>\n\t<string>????</string>\n\t<key>MinimumOSVersion</key>\n\t<string>${TVOS_MIN_VERSION}</string>\n\t<key>CFBundleSupportedPlatforms</key>\n\t<array>\n\t\t<string>AppleTVOS</string>\n\t</array>\n\t<key>NSPrincipalClass</key>\n\t<string></string>\n</dict>\n</plist>\nEOF\n}\n\nbuild_modulemap() {\n  local FILE_PATH=\"$1\"\n\n  cat >${FILE_PATH} <<EOF\nframework module mobileffmpeg {\n\n  header \"ArchDetect.h\"\n  header \"AtomicLong.h\"\n  header \"ExecuteDelegate.h\"\n  header \"FFmpegExecution.h\"\n  header \"LogDelegate.h\"\n  header \"MediaInformation.h\"\n  header \"MediaInformationParser.h\"\n  header \"MobileFFmpeg.h\"\n  header \"MobileFFmpegConfig.h\"\n  header \"MobileFFprobe.h\"\n  header \"Statistics.h\"\n  header \"StatisticsDelegate.h\"\n  header \"StreamInformation.h\"\n  header \"mobileffmpeg_exception.h\"\n\n  export *\n}\nEOF\n}\n\ncreate_static_fat_library() {\n  local FAT_LIBRARY_PATH=${BASEDIR}/prebuilt/tvos-universal/$2-universal\n\n  mkdir -p ${FAT_LIBRARY_PATH}/lib 1>>${BASEDIR}/build.log 2>&1\n\n  LIPO_COMMAND=\"${LIPO} -create\"\n\n  for TARGET_ARCH in \"${TARGET_ARCH_LIST[@]}\"; do\n    LIPO_COMMAND+=\" $(find ${BASEDIR}/prebuilt/tvos-${TARGET_ARCH}-apple-darwin -name $1)\"\n  done\n\n  LIPO_COMMAND+=\" -output ${FAT_LIBRARY_PATH}/lib/$1\"\n\n  RC=$(${LIPO_COMMAND} 1>>${BASEDIR}/build.log 2>&1)\n\n  echo ${RC}\n}\n\n# 1 - library name\n# 2 - static library name\n# 3 - library version\ncreate_static_framework() {\n  local FRAMEWORK_PATH=${BASEDIR}/prebuilt/tvos-framework/$1.framework\n\n  mkdir -p ${FRAMEWORK_PATH} 1>>${BASEDIR}/build.log 2>&1\n\n  local CAPITAL_CASE_LIBRARY_NAME=$(to_capital_case $1)\n\n  build_info_plist \"${FRAMEWORK_PATH}/Info.plist\" \"${FFMPEG_LIB}\" \"com.arthenica.mobileffmpeg.${CAPITAL_CASE_LIBRARY_NAME}\" \"$3\" \"$3\"\n\n  cp ${BASEDIR}/prebuilt/tvos-universal/$1-universal/lib/$2 ${FRAMEWORK_PATH}/$1 1>>${BASEDIR}/build.log 2>&1\n\n  echo \"$?\"\n}\n\nget_external_library_license_path() {\n  case $1 in\n  1) echo \"${BASEDIR}/src/$(get_library_name $1)/docs/LICENSE.TXT\" ;;\n  3) echo \"${BASEDIR}/src/$(get_library_name $1)/COPYING.LESSERv3\" ;;\n  25) echo \"${BASEDIR}/src/$(get_library_name $1)/COPYING.LGPL\" ;;\n  27) echo \"${BASEDIR}/src/$(get_library_name $1)/LICENSE.md\" ;;\n  29) echo \"${BASEDIR}/src/$(get_library_name $1)/COPYING.txt\" ;;\n  34) echo \"${BASEDIR}/src/$(get_library_name $1)/LICENSE.md \" ;;\n  37) echo \"${BASEDIR}/src/$(get_library_name $1)/COPYING.LESSERv3\" ;;\n  38) echo \"${BASEDIR}/src/$(get_library_name $1)/COPYRIGHT\" ;;\n  41) echo \"${BASEDIR}/src/$(get_library_name $1)/leptonica-license.txt\" ;;\n  4 | 9 | 12 | 18 | 20 | 26 | 31 | 36) echo \"${BASEDIR}/src/$(get_library_name $1)/LICENSE\" ;;\n  *) echo \"${BASEDIR}/src/$(get_library_name $1)/COPYING\" ;;\n  esac\n}\n\nget_external_library_version() {\n  echo \"$(grep Version ${BASEDIR}/prebuilt/tvos-${TARGET_ARCH_LIST[0]}-apple-darwin/pkgconfig/$1.pc 2>>${BASEDIR}/build.log | sed 's/Version://g;s/\\ //g')\"\n}\n\n# ENABLE COMMON FUNCTIONS\n. ${BASEDIR}/build/tvos-common.sh\n\necho -e \"\\nINFO: Build options: $*\\n\" 1>>${BASEDIR}/build.log 2>&1\n\nGPL_ENABLED=\"no\"\nDISPLAY_HELP=\"\"\nBUILD_LTS=\"\"\nBUILD_FULL=\"\"\nBUILD_TYPE_ID=\"\"\nBUILD_FORCE=\"\"\nBUILD_VERSION=$(git describe --tags 2>>${BASEDIR}/build.log)\n\nwhile [ ! $# -eq 0 ]; do\n  case $1 in\n  -h | --help)\n    DISPLAY_HELP=\"1\"\n    ;;\n  -v | --version)\n    display_version\n    exit 0\n    ;;\n  --skip-*)\n    SKIP_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    skip_library ${SKIP_LIBRARY}\n    ;;\n  --no-output-redirection)\n    no_output_redirection\n    ;;\n  --no-workspace-cleanup-*)\n    NO_WORKSPACE_CLEANUP_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-[A-Za-z]*-[A-Za-z]*-//g')\n\n    no_workspace_cleanup_library ${NO_WORKSPACE_CLEANUP_LIBRARY}\n    ;;\n  -d | --debug)\n    enable_debug\n    ;;\n  -s | --speed)\n    optimize_for_speed\n    ;;\n  -l | --lts)\n    BUILD_LTS=\"1\"\n    ;;\n  -f | --force)\n    BUILD_FORCE=\"1\"\n    ;;\n  --reconf-*)\n    CONF_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    reconf_library ${CONF_LIBRARY}\n    ;;\n  --rebuild-*)\n    BUILD_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    rebuild_library ${BUILD_LIBRARY}\n    ;;\n  --redownload-*)\n    DOWNLOAD_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    redownload_library ${DOWNLOAD_LIBRARY}\n    ;;\n  --full)\n    BUILD_FULL=\"1\"\n    ;;\n  --enable-gpl)\n    GPL_ENABLED=\"yes\"\n    ;;\n  --enable-*)\n    ENABLED_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    enable_library ${ENABLED_LIBRARY}\n    ;;\n  --disable-*)\n    DISABLED_ARCH=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    disable_arch ${DISABLED_ARCH}\n    ;;\n  *)\n    print_unknown_option $1\n    ;;\n  esac\n  shift\ndone\n\nif [[ -n ${BUILD_FULL} ]]; then\n  for library in {0..46} {48..49}; do\n    if [ ${GPL_ENABLED} == \"yes\" ]; then\n      enable_library $(get_library_name $library)\n    else\n      if [[ $library -ne 17 ]] && [[ $library -ne 18 ]] && [[ $library -ne 19 ]] && [[ $library -ne 20 ]] && [[ $library -ne 21 ]]; then\n        enable_library $(get_library_name $library)\n      fi\n    fi\n  done\nfi\n\n# DETECT BUILD TYPE\nif [[ -n ${BUILD_LTS} ]]; then\n  enable_lts_build\n  BUILD_TYPE_ID+=\"LTS \"\nfi\n\nif [[ -n ${DISPLAY_HELP} ]]; then\n  display_help\n  exit 0\nfi\n\nif [[ -z ${BUILD_VERSION} ]]; then\n  echo -e \"\\nerror: Can not run git commands in this folder. See build.log.\\n\"\n  exit 1\nfi\n\n# SELECT XCODE VERSION USED FOR BUILDING\nXCODE_FOR_MOBILE_FFMPEG=~/.xcode.for.mobile.ffmpeg.sh\nif [[ -f ${XCODE_FOR_MOBILE_FFMPEG} ]]; then\n  source ${XCODE_FOR_MOBILE_FFMPEG} 1>>${BASEDIR}/build.log 2>&1\nfi\nDETECTED_TVOS_SDK_VERSION=\"$(xcrun --sdk appletvos --show-sdk-version)\"\n\necho -e \"INFO: Using SDK ${DETECTED_TVOS_SDK_VERSION} by Xcode provided at $(xcode-select -p)\\n\" 1>>${BASEDIR}/build.log 2>&1\nif [[ ! -z ${MOBILE_FFMPEG_LTS_BUILD} ]] && [[ \"${DETECTED_TVOS_SDK_VERSION}\" != \"${TVOS_MIN_VERSION}\" ]]; then\n  echo -e \"\\n(*) LTS packages should be built using SDK ${TVOS_MIN_VERSION} but current configuration uses SDK ${DETECTED_TVOS_SDK_VERSION}\\n\"\n\n  if [[ -z ${BUILD_FORCE} ]]; then\n    exit 1\n  fi\nfi\n\necho -e \"\\nBuilding mobile-ffmpeg ${BUILD_TYPE_ID}static library for tvOS\\n\"\n\necho -e -n \"INFO: Building mobile-ffmpeg ${BUILD_VERSION} ${BUILD_TYPE_ID}for tvOS: \" 1>>${BASEDIR}/build.log 2>&1\necho -e $(date) 1>>${BASEDIR}/build.log 2>&1\n\nprint_enabled_architectures\nprint_enabled_libraries\nprint_reconfigure_requested_libraries\nprint_rebuild_requested_libraries\nprint_redownload_requested_libraries\n\n# CHECK GPL LIBRARIES\nfor gpl_library in {17..21}; do\n  if [[ ${ENABLED_LIBRARIES[$gpl_library]} -eq 1 ]]; then\n    library_name=$(get_library_name ${gpl_library})\n\n    if [ ${GPL_ENABLED} != \"yes\" ]; then\n      echo -e \"\\n(*) Invalid configuration detected. GPL library ${library_name} enabled without --enable-gpl flag.\\n\"\n      echo -e \"\\n(*) Invalid configuration detected. GPL library ${library_name} enabled without --enable-gpl flag.\\n\" 1>>${BASEDIR}/build.log 2>&1\n      exit 1\n    else\n      DOWNLOAD_RESULT=$(download_gpl_library_source ${library_name})\n      if [[ ${DOWNLOAD_RESULT} -ne 0 ]]; then\n        echo -e \"\\n(*) Failed to download GPL library ${library_name} source. Please check build.log file for details. If the problem persists refer to offline building instructions.\\n\"\n        echo -e \"\\n(*) Failed to download GPL library ${library_name} source.\\n\" 1>>${BASEDIR}/build.log 2>&1\n        exit 1\n      fi\n    fi\n  fi\ndone\n\nTARGET_ARCH_LIST=()\n\nfor run_arch in {0..1}; do\n  if [[ ${ENABLED_ARCHITECTURES[$run_arch]} -eq 1 ]]; then\n    export ARCH=$(get_arch_name $run_arch)\n    export TARGET_SDK=$(get_target_sdk)\n    export SDK_PATH=$(get_sdk_path)\n    export SDK_NAME=$(get_sdk_name)\n\n    export LIPO=\"$(xcrun --sdk $(get_sdk_name) -f lipo)\"\n\n    . ${BASEDIR}/build/main-tvos.sh \"${ENABLED_LIBRARIES[@]}\"\n    case ${ARCH} in\n    x86-64)\n      TARGET_ARCH=\"x86_64\"\n      ;;\n    *)\n      TARGET_ARCH=\"${ARCH}\"\n      ;;\n    esac\n    TARGET_ARCH_LIST+=(${TARGET_ARCH})\n\n    # CLEAR FLAGS\n    for library in {1..50}; do\n      library_name=$(get_library_name $((library - 1)))\n      unset $(echo \"OK_${library_name}\" | sed \"s/\\-/\\_/g\")\n      unset $(echo \"DEPENDENCY_REBUILT_${library_name}\" | sed \"s/\\-/\\_/g\")\n    done\n  fi\ndone\n\nFFMPEG_LIBS=\"libavcodec libavdevice libavfilter libavformat libavutil libswresample libswscale\"\n\nBUILD_LIBRARY_EXTENSION=\"a\"\n\nif [[ ! -z ${TARGET_ARCH_LIST} ]]; then\n\n  echo -e -n \"\\n\\nCreating frameworks and universal libraries under prebuilt: \"\n\n  # BUILDING UNIVERSAL LIBRARIES\n  rm -rf ${BASEDIR}/prebuilt/tvos-universal 1>>${BASEDIR}/build.log 2>&1\n  mkdir -p ${BASEDIR}/prebuilt/tvos-universal 1>>${BASEDIR}/build.log 2>&1\n  rm -rf ${BASEDIR}/prebuilt/tvos-framework 1>>${BASEDIR}/build.log 2>&1\n  mkdir -p ${BASEDIR}/prebuilt/tvos-framework 1>>${BASEDIR}/build.log 2>&1\n\n  # 1. EXTERNAL LIBRARIES\n  for library in {0..42}; do\n    if [[ ${ENABLED_LIBRARIES[$library]} -eq 1 ]]; then\n\n      library_name=$(get_library_name ${library})\n      package_config_file_name=$(get_package_config_file_name ${library})\n      library_version=$(get_external_library_version ${package_config_file_name})\n      capital_case_library_name=$(to_capital_case ${library_name})\n      if [[ -z ${library_version} ]]; then\n        echo -e \"Failed to detect version for ${library_name} from ${package_config_file_name}.pc\\n\" 1>>${BASEDIR}/build.log 2>&1\n        echo -e \"failed\\n\"\n        exit 1\n      fi\n\n      echo -e \"Creating universal library for ${library_name}\\n\" 1>>${BASEDIR}/build.log 2>&1\n\n      if [[ ${LIBRARY_LIBTHEORA} == $library ]]; then\n\n        LIBRARY_CREATED=$(create_static_fat_library \"libtheora.a\" \"libtheora\")\n        if [[ ${LIBRARY_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        LIBRARY_CREATED=$(create_static_fat_library \"libtheoraenc.a\" \"libtheoraenc\")\n        if [[ ${LIBRARY_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        LIBRARY_CREATED=$(create_static_fat_library \"libtheoradec.a\" \"libtheoradec\")\n        if [[ ${LIBRARY_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        FRAMEWORK_CREATED=$(create_static_framework \"libtheora\" \"libtheora.a\" $library_version)\n        if [[ ${FRAMEWORK_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        FRAMEWORK_CREATED=$(create_static_framework \"libtheoraenc\" \"libtheoraenc.a\" $library_version)\n        if [[ ${FRAMEWORK_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        FRAMEWORK_CREATED=$(create_static_framework \"libtheoradec\" \"libtheoradec.a\" $library_version)\n        if [[ ${FRAMEWORK_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        $(cp $(get_external_library_license_path ${library}) ${BASEDIR}/prebuilt/tvos-universal/libtheora-universal/LICENSE 1>>${BASEDIR}/build.log 2>&1)\n        if [ $? -ne 0 ]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        $(cp $(get_external_library_license_path ${library}) ${BASEDIR}/prebuilt/tvos-universal/libtheoraenc-universal/LICENSE 1>>${BASEDIR}/build.log 2>&1)\n        if [ $? -ne 0 ]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        $(cp $(get_external_library_license_path ${library}) ${BASEDIR}/prebuilt/tvos-universal/libtheoradec-universal/LICENSE 1>>${BASEDIR}/build.log 2>&1)\n        if [ $? -ne 0 ]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        $(cp $(get_external_library_license_path ${library}) ${BASEDIR}/prebuilt/tvos-framework/libtheora.framework/LICENSE 1>>${BASEDIR}/build.log 2>&1)\n        if [ $? -ne 0 ]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        $(cp $(get_external_library_license_path ${library}) ${BASEDIR}/prebuilt/tvos-framework/libtheoraenc.framework/LICENSE 1>>${BASEDIR}/build.log 2>&1)\n        if [ $? -ne 0 ]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        $(cp $(get_external_library_license_path ${library}) ${BASEDIR}/prebuilt/tvos-framework/libtheoradec.framework/LICENSE 1>>${BASEDIR}/build.log 2>&1)\n        if [ $? -ne 0 ]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n      elif [[ ${LIBRARY_LIBVORBIS} == $library ]]; then\n\n        LIBRARY_CREATED=$(create_static_fat_library \"libvorbisfile.a\" \"libvorbisfile\")\n        if [[ ${LIBRARY_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        LIBRARY_CREATED=$(create_static_fat_library \"libvorbisenc.a\" \"libvorbisenc\")\n        if [[ ${LIBRARY_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        LIBRARY_CREATED=$(create_static_fat_library \"libvorbis.a\" \"libvorbis\")\n        if [[ ${LIBRARY_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        FRAMEWORK_CREATED=$(create_static_framework \"libvorbisfile\" \"libvorbisfile.a\" $library_version)\n        if [[ ${FRAMEWORK_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        FRAMEWORK_CREATED=$(create_static_framework \"libvorbisenc\" \"libvorbisenc.a\" $library_version)\n        if [[ ${FRAMEWORK_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        FRAMEWORK_CREATED=$(create_static_framework \"libvorbis\" \"libvorbis.a\" $library_version)\n        if [[ ${FRAMEWORK_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        $(cp $(get_external_library_license_path ${library}) ${BASEDIR}/prebuilt/tvos-universal/libvorbisfile-universal/LICENSE 1>>${BASEDIR}/build.log 2>&1)\n        if [ $? -ne 0 ]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        $(cp $(get_external_library_license_path ${library}) ${BASEDIR}/prebuilt/tvos-universal/libvorbisenc-universal/LICENSE 1>>${BASEDIR}/build.log 2>&1)\n        if [ $? -ne 0 ]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        $(cp $(get_external_library_license_path ${library}) ${BASEDIR}/prebuilt/tvos-universal/libvorbis-universal/LICENSE 1>>${BASEDIR}/build.log 2>&1)\n        if [ $? -ne 0 ]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        $(cp $(get_external_library_license_path ${library}) ${BASEDIR}/prebuilt/tvos-framework/libvorbisfile.framework/LICENSE 1>>${BASEDIR}/build.log 2>&1)\n        if [ $? -ne 0 ]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        $(cp $(get_external_library_license_path ${library}) ${BASEDIR}/prebuilt/tvos-framework/libvorbisenc.framework/LICENSE 1>>${BASEDIR}/build.log 2>&1)\n        if [ $? -ne 0 ]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        $(cp $(get_external_library_license_path ${library}) ${BASEDIR}/prebuilt/tvos-framework/libvorbis.framework/LICENSE 1>>${BASEDIR}/build.log 2>&1)\n        if [ $? -ne 0 ]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n      elif [[ ${LIBRARY_LIBWEBP} == $library ]]; then\n\n        LIBRARY_CREATED=$(create_static_fat_library \"libwebpmux.a\" \"libwebpmux\")\n        if [[ ${LIBRARY_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        LIBRARY_CREATED=$(create_static_fat_library \"libwebpdemux.a\" \"libwebpdemux\")\n        if [[ ${LIBRARY_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        LIBRARY_CREATED=$(create_static_fat_library \"libwebp.a\" \"libwebp\")\n        if [[ ${LIBRARY_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        FRAMEWORK_CREATED=$(create_static_framework \"libwebpmux\" \"libwebpmux.a\" $library_version)\n        if [[ ${FRAMEWORK_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        FRAMEWORK_CREATED=$(create_static_framework \"libwebpdemux\" \"libwebpdemux.a\" $library_version)\n        if [[ ${FRAMEWORK_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        FRAMEWORK_CREATED=$(create_static_framework \"libwebp\" \"libwebp.a\" $library_version)\n        if [[ ${FRAMEWORK_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        $(cp $(get_external_library_license_path ${library}) ${BASEDIR}/prebuilt/tvos-universal/libwebpmux-universal/LICENSE 1>>${BASEDIR}/build.log 2>&1)\n        if [ $? -ne 0 ]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        $(cp $(get_external_library_license_path ${library}) ${BASEDIR}/prebuilt/tvos-universal/libwebpdemux-universal/LICENSE 1>>${BASEDIR}/build.log 2>&1)\n        if [ $? -ne 0 ]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        $(cp $(get_external_library_license_path ${library}) ${BASEDIR}/prebuilt/tvos-universal/libwebp-universal/LICENSE 1>>${BASEDIR}/build.log 2>&1)\n        if [ $? -ne 0 ]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        $(cp $(get_external_library_license_path ${library}) ${BASEDIR}/prebuilt/tvos-framework/libwebpmux.framework/LICENSE 1>>${BASEDIR}/build.log 2>&1)\n        if [ $? -ne 0 ]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        $(cp $(get_external_library_license_path ${library}) ${BASEDIR}/prebuilt/tvos-framework/libwebpdemux.framework/LICENSE 1>>${BASEDIR}/build.log 2>&1)\n        if [ $? -ne 0 ]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        $(cp $(get_external_library_license_path ${library}) ${BASEDIR}/prebuilt/tvos-framework/libwebp.framework/LICENSE 1>>${BASEDIR}/build.log 2>&1)\n        if [ $? -ne 0 ]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n      elif\n        [[ ${LIBRARY_OPENCOREAMR} == $library ]]\n      then\n\n        LIBRARY_CREATED=$(create_static_fat_library \"libopencore-amrnb.a\" \"libopencore-amrnb\")\n        if [[ ${LIBRARY_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        FRAMEWORK_CREATED=$(create_static_framework \"libopencore-amrnb\" \"libopencore-amrnb.a\" $library_version)\n        if [[ ${FRAMEWORK_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        $(cp $(get_external_library_license_path ${library}) ${BASEDIR}/prebuilt/tvos-universal/libopencore-amrnb-universal/LICENSE 1>>${BASEDIR}/build.log 2>&1)\n        if [ $? -ne 0 ]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        $(cp $(get_external_library_license_path ${library}) ${BASEDIR}/prebuilt/tvos-framework/libopencore-amrnb.framework/LICENSE 1>>${BASEDIR}/build.log 2>&1)\n        if [ $? -ne 0 ]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n      elif [[ ${LIBRARY_NETTLE} == $library ]]; then\n\n        LIBRARY_CREATED=$(create_static_fat_library \"libnettle.a\" \"libnettle\")\n        if [[ ${LIBRARY_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        LIBRARY_CREATED=$(create_static_fat_library \"libhogweed.a\" \"libhogweed\")\n        if [[ ${LIBRARY_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        FRAMEWORK_CREATED=$(create_static_framework \"libnettle\" \"libnettle.a\" $library_version)\n        if [[ ${FRAMEWORK_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        FRAMEWORK_CREATED=$(create_static_framework \"libhogweed\" \"libhogweed.a\" $library_version)\n        if [[ ${FRAMEWORK_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        $(cp $(get_external_library_license_path ${library}) ${BASEDIR}/prebuilt/tvos-universal/libnettle-universal/LICENSE 1>>${BASEDIR}/build.log 2>&1)\n        if [ $? -ne 0 ]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        $(cp $(get_external_library_license_path ${library}) ${BASEDIR}/prebuilt/tvos-universal/libhogweed-universal/LICENSE 1>>${BASEDIR}/build.log 2>&1)\n        if [ $? -ne 0 ]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        $(cp $(get_external_library_license_path ${library}) ${BASEDIR}/prebuilt/tvos-framework/libnettle.framework/LICENSE 1>>${BASEDIR}/build.log 2>&1)\n        if [ $? -ne 0 ]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        $(cp $(get_external_library_license_path ${library}) ${BASEDIR}/prebuilt/tvos-framework/libhogweed.framework/LICENSE 1>>${BASEDIR}/build.log 2>&1)\n        if [ $? -ne 0 ]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n      else\n        library_name=$(get_library_name $((library)))\n        static_archive_name=$(get_static_archive_name $((library)))\n        LIBRARY_CREATED=$(create_static_fat_library $static_archive_name $library_name)\n        if [[ ${LIBRARY_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        FRAMEWORK_CREATED=$(create_static_framework $library_name $static_archive_name $library_version)\n        if [[ ${FRAMEWORK_CREATED} -ne 0 ]]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        $(cp $(get_external_library_license_path ${library}) ${BASEDIR}/prebuilt/tvos-universal/${library_name}-universal/LICENSE 1>>${BASEDIR}/build.log 2>&1)\n        if [ $? -ne 0 ]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n        $(cp $(get_external_library_license_path ${library}) ${BASEDIR}/prebuilt/tvos-framework/${library_name}.framework/LICENSE 1>>${BASEDIR}/build.log 2>&1)\n        if [ $? -ne 0 ]; then\n          echo -e \"failed\\n\"\n          exit 1\n        fi\n\n      fi\n\n    fi\n  done\n\n  # 2. FFMPEG\n  FFMPEG_UNIVERSAL=${BASEDIR}/prebuilt/tvos-universal/ffmpeg-universal\n  mkdir -p ${FFMPEG_UNIVERSAL}/include 1>>${BASEDIR}/build.log 2>&1\n  mkdir -p ${FFMPEG_UNIVERSAL}/lib 1>>${BASEDIR}/build.log 2>&1\n\n  cp -r ${BASEDIR}/prebuilt/tvos-${TARGET_ARCH_LIST[0]}-apple-darwin/ffmpeg/include/* ${FFMPEG_UNIVERSAL}/include 1>>${BASEDIR}/build.log 2>&1\n  cp ${BASEDIR}/prebuilt/tvos-${TARGET_ARCH_LIST[0]}-apple-darwin/ffmpeg/include/config.h ${FFMPEG_UNIVERSAL}/include 1>>${BASEDIR}/build.log 2>&1\n\n  for FFMPEG_LIB in ${FFMPEG_LIBS}; do\n    LIPO_COMMAND=\"${LIPO} -create\"\n\n    for TARGET_ARCH in \"${TARGET_ARCH_LIST[@]}\"; do\n      LIPO_COMMAND+=\" ${BASEDIR}/prebuilt/tvos-${TARGET_ARCH}-apple-darwin/ffmpeg/lib/${FFMPEG_LIB}.${BUILD_LIBRARY_EXTENSION}\"\n    done\n\n    LIPO_COMMAND+=\" -output ${FFMPEG_UNIVERSAL}/lib/${FFMPEG_LIB}.${BUILD_LIBRARY_EXTENSION}\"\n\n    ${LIPO_COMMAND} 1>>${BASEDIR}/build.log 2>&1\n\n    if [ $? -ne 0 ]; then\n      echo -e \"failed\\n\"\n      exit 1\n    fi\n\n    FFMPEG_LIB_UPPERCASE=$(echo ${FFMPEG_LIB} | tr '[a-z]' '[A-Z]')\n    FFMPEG_LIB_CAPITALCASE=$(to_capital_case ${FFMPEG_LIB})\n\n    FFMPEG_LIB_MAJOR=$(grep \"#define ${FFMPEG_LIB_UPPERCASE}_VERSION_MAJOR\" ${FFMPEG_UNIVERSAL}/include/${FFMPEG_LIB}/version.h | sed -e \"s/#define ${FFMPEG_LIB_UPPERCASE}_VERSION_MAJOR//g;s/\\ //g\")\n    FFMPEG_LIB_MINOR=$(grep \"#define ${FFMPEG_LIB_UPPERCASE}_VERSION_MINOR\" ${FFMPEG_UNIVERSAL}/include/${FFMPEG_LIB}/version.h | sed -e \"s/#define ${FFMPEG_LIB_UPPERCASE}_VERSION_MINOR//g;s/\\ //g\")\n    FFMPEG_LIB_MICRO=$(grep \"#define ${FFMPEG_LIB_UPPERCASE}_VERSION_MICRO\" ${FFMPEG_UNIVERSAL}/include/${FFMPEG_LIB}/version.h | sed \"s/#define ${FFMPEG_LIB_UPPERCASE}_VERSION_MICRO//g;s/\\ //g\")\n\n    FFMPEG_LIB_VERSION=\"${FFMPEG_LIB_MAJOR}.${FFMPEG_LIB_MINOR}.${FFMPEG_LIB_MICRO}\"\n\n    FFMPEG_LIB_FRAMEWORK_PATH=${BASEDIR}/prebuilt/tvos-framework/${FFMPEG_LIB}.framework\n\n    rm -rf ${FFMPEG_LIB_FRAMEWORK_PATH} 1>>${BASEDIR}/build.log 2>&1\n    mkdir -p ${FFMPEG_LIB_FRAMEWORK_PATH}/Headers 1>>${BASEDIR}/build.log 2>&1\n\n    cp -r ${FFMPEG_UNIVERSAL}/include/${FFMPEG_LIB}/* ${FFMPEG_LIB_FRAMEWORK_PATH}/Headers 1>>${BASEDIR}/build.log 2>&1\n    cp ${FFMPEG_UNIVERSAL}/lib/${FFMPEG_LIB}.${BUILD_LIBRARY_EXTENSION} ${FFMPEG_LIB_FRAMEWORK_PATH}/${FFMPEG_LIB} 1>>${BASEDIR}/build.log 2>&1\n\n    # COPY THE LICENSES\n    if [ ${GPL_ENABLED} == \"yes\" ]; then\n\n      # GPLv3.0\n      cp ${BASEDIR}/LICENSE.GPLv3 ${FFMPEG_LIB_FRAMEWORK_PATH}/LICENSE 1>>${BASEDIR}/build.log 2>&1\n    else\n\n      # LGPLv3.0\n      cp ${BASEDIR}/LICENSE.LGPLv3 ${FFMPEG_LIB_FRAMEWORK_PATH}/LICENSE 1>>${BASEDIR}/build.log 2>&1\n    fi\n\n    build_info_plist \"${FFMPEG_LIB_FRAMEWORK_PATH}/Info.plist\" \"${FFMPEG_LIB}\" \"com.arthenica.mobileffmpeg.${FFMPEG_LIB_CAPITALCASE}\" \"${FFMPEG_LIB_VERSION}\" \"${FFMPEG_LIB_VERSION}\"\n\n    echo -e \"Created ${FFMPEG_LIB} framework successfully.\\n\" 1>>${BASEDIR}/build.log 2>&1\n  done\n\n  # COPY THE LICENSES\n  if [ ${GPL_ENABLED} == \"yes\" ]; then\n    cp ${BASEDIR}/LICENSE.GPLv3 ${FFMPEG_UNIVERSAL}/LICENSE 1>>${BASEDIR}/build.log 2>&1\n  else\n    cp ${BASEDIR}/LICENSE.LGPLv3 ${FFMPEG_UNIVERSAL}/LICENSE 1>>${BASEDIR}/build.log 2>&1\n  fi\n\n  # 3. MOBILE FFMPEG\n  MOBILE_FFMPEG_VERSION=$(get_mobile_ffmpeg_version)\n  MOBILE_FFMPEG_UNIVERSAL=${BASEDIR}/prebuilt/tvos-universal/mobile-ffmpeg-universal\n  MOBILE_FFMPEG_FRAMEWORK_PATH=${BASEDIR}/prebuilt/tvos-framework/mobileffmpeg.framework\n  mkdir -p ${MOBILE_FFMPEG_UNIVERSAL}/include 1>>${BASEDIR}/build.log 2>&1\n  mkdir -p ${MOBILE_FFMPEG_UNIVERSAL}/lib 1>>${BASEDIR}/build.log 2>&1\n  rm -rf ${MOBILE_FFMPEG_FRAMEWORK_PATH} 1>>${BASEDIR}/build.log 2>&1\n  mkdir -p ${MOBILE_FFMPEG_FRAMEWORK_PATH}/Headers 1>>${BASEDIR}/build.log 2>&1\n  mkdir -p ${MOBILE_FFMPEG_FRAMEWORK_PATH}/Modules 1>>${BASEDIR}/build.log 2>&1\n\n  LIPO_COMMAND=\"${LIPO} -create\"\n  for TARGET_ARCH in \"${TARGET_ARCH_LIST[@]}\"; do\n    LIPO_COMMAND+=\" ${BASEDIR}/prebuilt/tvos-${TARGET_ARCH}-apple-darwin/mobile-ffmpeg/lib/libmobileffmpeg.${BUILD_LIBRARY_EXTENSION}\"\n  done\n  LIPO_COMMAND+=\" -output ${MOBILE_FFMPEG_UNIVERSAL}/lib/libmobileffmpeg.${BUILD_LIBRARY_EXTENSION}\"\n\n  ${LIPO_COMMAND} 1>>${BASEDIR}/build.log 2>&1\n\n  if [ $? -ne 0 ]; then\n    echo -e \"failed\\n\"\n    exit 1\n  fi\n\n  cp -r ${BASEDIR}/prebuilt/tvos-${TARGET_ARCH_LIST[0]}-apple-darwin/mobile-ffmpeg/include/* ${MOBILE_FFMPEG_UNIVERSAL}/include 1>>${BASEDIR}/build.log 2>&1\n  cp -r ${MOBILE_FFMPEG_UNIVERSAL}/include/* ${MOBILE_FFMPEG_FRAMEWORK_PATH}/Headers 1>>${BASEDIR}/build.log 2>&1\n  cp ${MOBILE_FFMPEG_UNIVERSAL}/lib/libmobileffmpeg.${BUILD_LIBRARY_EXTENSION} ${MOBILE_FFMPEG_FRAMEWORK_PATH}/mobileffmpeg 1>>${BASEDIR}/build.log 2>&1\n\n  # COPY THE LICENSES\n  if [ ${GPL_ENABLED} == \"yes\" ]; then\n    cp ${BASEDIR}/LICENSE.GPLv3 ${MOBILE_FFMPEG_UNIVERSAL}/LICENSE 1>>${BASEDIR}/build.log 2>&1\n    cp ${BASEDIR}/LICENSE.GPLv3 ${MOBILE_FFMPEG_FRAMEWORK_PATH}/LICENSE 1>>${BASEDIR}/build.log 2>&1\n  else\n    cp ${BASEDIR}/LICENSE.LGPLv3 ${MOBILE_FFMPEG_UNIVERSAL}/LICENSE 1>>${BASEDIR}/build.log 2>&1\n    cp ${BASEDIR}/LICENSE.LGPLv3 ${MOBILE_FFMPEG_FRAMEWORK_PATH}/LICENSE 1>>${BASEDIR}/build.log 2>&1\n  fi\n\n  build_info_plist \"${MOBILE_FFMPEG_FRAMEWORK_PATH}/Info.plist\" \"mobileffmpeg\" \"com.arthenica.mobileffmpeg.MobileFFmpeg\" \"${MOBILE_FFMPEG_VERSION}\" \"${MOBILE_FFMPEG_VERSION}\"\n  build_modulemap \"${MOBILE_FFMPEG_FRAMEWORK_PATH}/Modules/module.modulemap\"\n\n  echo -e \"Created mobile-ffmpeg.framework and universal library successfully.\\n\" 1>>${BASEDIR}/build.log 2>&1\n\n  echo -e \"ok\\n\"\nfi\n"
        },
        {
          "name": "tvos",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}