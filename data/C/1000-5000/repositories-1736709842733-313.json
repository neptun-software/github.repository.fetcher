{
  "metadata": {
    "timestamp": 1736709842733,
    "page": 313,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "civetweb/civetweb",
      "stars": 2950,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.8603515625,
          "content": "# http://clang.llvm.org/docs/ClangFormatStyleOptions.html\n\nBasedOnStyle: LLVM\n\nIndentWidth: 4\nTabWidth: 4\nUseTab: ForIndentation\nColumnLimit: 80\n\nLanguage: Cpp\n\nAlignAfterOpenBracket: true\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: None\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: true\nBinPackArguments: false\nBinPackParameters: false\nBreakBeforeBinaryOperators: NonAssignment\nBreakBeforeBraces: Linux\nDerivePointerAlignment: false\nMaxEmptyLinesToKeep: 2\nPenaltyBreakBeforeFirstCallParameter: 100\nReflowComments: true\n\nSpaceBeforeParens: ControlStatements\nSpaceInEmptyParentheses: false\nSpacesInSquareBrackets: false\n\nIndentPPDirectives: None\nIncludeBlocks: Preserve\n\n\nDisableFormat: false\n"
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.8056640625,
          "content": "# Binary files\n*.bin    binary\n\n# Auto detect text files and perform LF normalization\n* -text\n\n# Custom for Visual Studio\n*.cs     diff=csharp\n*.sln    merge=union\n*.csproj merge=union\n*.vbproj merge=union\n*.fsproj merge=union\n*.dbproj merge=union\n\n# Standard to msysgit\n*.doc    diff=astextplain\n*.DOC    diff=astextplain\n*.docx   diff=astextplain\n*.DOCX   diff=astextplain\n*.dot    diff=astextplain\n*.DOT    diff=astextplain\n*.pdf    diff=astextplain\n*.PDF    diff=astextplain\n*.rtf    diff=astextplain\n*.RTF    diff=astextplain\n\n# Preserver Windows specfic lines endings\n*.cmd text eol=crlf\n\n\n# Settings for github syntax highlighting\n# see https://github.com/github/linguist/blob/master/README.md\ndocs/* linguist-documentation\n*.inl linguist-language=C\n*.h linguist-language=C\ninclude/CivetServer.h linguist-language=C++\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.775390625,
          "content": "\ncivetweb\ncivetweb_test\nlibcivetweb.a\nlibcivetweb.so\nlibcivetweb.so.*\n*-cache\nout\n*.dmg\n*.msi\n*.exe\n*.zip\n*.trace\n[oO]utput\n[tT]esting\nexamples/embedded_c/embedded_c\nexamples/embedded_cpp/embedded_cpp\n*.a\n*.o\nVisualStudio/unit_test/*\nlog.out\n\n\n################# //hash\n## CMake\n#################\n/CMakeCache.txt\n/CMakeFiles\n/mingw-builds\n/output\n\n#################\n## Eclipse\n#################\n\n*.pydevproject\n.project\n.metadata\nbin/\ntmp/\n*.tmp\n*.bak\n*.swp\n*~.nib\nlocal.properties\n.classpath\n.settings/\n.loadpath\n\n# External tool builders\n.externalToolBuilders/\n\n# Locally stored \"Eclipse launch configurations\"\n*.launch\n\n# CDT-specific\n.cproject\n\n# PDT-specific\n.buildpath\n\n\n#################\n## Visual Studio\n#################\n\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.sln.docstates\n\n# Text-mode IDE tools\ncscope.out\ntags\n\n# Build results\n\n[Dd]ebug/\n[Dd]ebug CONSOLE/\n[Rr]elease/\nx64/\n[Bb]in/\n[Oo]bj/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n*_i.c\n*_p.c\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.log\n*.scc\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n*.ncrunch*\n.*crunch*.local.xml\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.Publish.xml\n*.pubxml\n\n# NuGet Packages Directory\n## TODO: If you have NuGet Package Restore enabled, uncomment the next line\n#packages/\n\n# Windows Azure Build Output\ncsx\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\nsql/\n*.Cache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.[Pp]ublish.xml\n*.pfx\n*.publishsettings\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file to a newer\n# Visual Studio version. Backup files are not needed, because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\nApp_Data/*.mdf\nApp_Data/*.ldf\n\n\n#################\n## Other IDEs\n#################\n\n*.kdev4\n\n\n#############\n## Windows detritus\n#############\n\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Mac crap\n.DS_Store\n\n\n#############\n## Python\n#############\n\n*.py[co]\n\n# Packages\n*.egg\n*.egg-info\ndist/\neggs/\nparts/\nvar/\nsdist/\ndevelop-eggs/\n.installed.cfg\n\n# Installer logs\npip-log.txt\n\n# Unit test / coverage reports\n.coverage\n.tox\n\n#Translations\n*.mo\n\n#Mr Developer\n.mr.developer.cfg\n\n\n##########################\n## Files created by tests\n##########################\nrequests.db\n\n##########################\n## Files created by ctags\n##########################\n?tags\n?tags?\n\n##########################\n## Files created by autotools\n##########################\n*.lo\n.libs\n\n##########################\n## Travis Build Dir\n##########################\nci/lua\n\n\n##########################\n## Conan test cache\n##########################\nconan/test_package/build\n\n\n##########################\n## Visual Studio Code\n##########################\n.vscode\n\n\n##########################\n## Fuzz test corpus\n##########################\nfuzztest/http1/**\nfuzztest/http1c/**\nfuzztest/url/**\ncrash-[0-9a-f]*\nleak-[0-9a-f]*\nslow-unit-[0-9a-f]*\ncivetweb_fuzz?\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 4.8876953125,
          "content": "\r\n##############################################################################\r\n# Project specific settings\r\n##############################################################################\r\n\r\nlanguage: c\r\n\r\ncache:\r\n  directories:\r\n  - $HOME/third-party\r\n\r\nbefore_install:\r\n  - cmake --version\r\n\r\ninstall:\r\n\r\nbefore_script:\r\n  # Check some settings of the build server (operating system, IPv6 availability, directory)\r\n  - uname -a\r\n  - ifconfig\r\n  - pwd\r\n  - ls -la\r\n  # Generate the build scripts with CMake\r\n  - mkdir output\r\n  - openssl version\r\n  - gcc --version\r\n  - cmake --version\r\n  - gcc unittest/cgi_test.c -o output/cgi_test.cgi\r\n  - cd output\r\n  - echo cmake\r\n    -G \"Unix Makefiles\"\r\n    -DCMAKE_BUILD_TYPE=${BUILD_TYPE}\r\n    -DBUILD_SHARED_LIBS=${BUILD_SHARED}\r\n    \"-DCIVETWEB_THIRD_PARTY_DIR=${HOME}/third-party\"\r\n    -DCIVETWEB_ENABLE_THIRD_PARTY_OUTPUT=YES\r\n    -DCIVETWEB_ENABLE_SSL=${ENABLE_SSL}\r\n    -DCIVETWEB_DISABLE_CGI=${NO_CGI}\r\n    -DCIVETWEB_SERVE_NO_FILES=${NO_FILES}\r\n    -DCIVETWEB_ENABLE_SSL_DYNAMIC_LOADING=${ENABLE_SSL_DYNAMIC_LOADING}\r\n    -DCIVETWEB_SSL_OPENSSL_API_1_0=${OPENSSL_1_0}\r\n    -DCIVETWEB_SSL_OPENSSL_API_1_1=${OPENSSL_1_1}\r\n    -DCIVETWEB_SSL_OPENSSL_API_3_0=${OPENSSL_3_0}\r\n    -DCIVETWEB_ENABLE_WEBSOCKETS=${ENABLE_WEBSOCKETS}\r\n    -DCIVETWEB_ENABLE_CXX=${ENABLE_CXX}\r\n    -DCIVETWEB_ENABLE_SERVER_STATS=${ENABLE_SERVER_STATS}\r\n    -DCIVETWEB_ENABLE_LUA=${ENABLE_LUA}\r\n    -DCIVETWEB_ENABLE_LUA_SHARED=${ENABLE_LUA_SHARED}\r\n    -DCIVETWEB_ENABLE_DUKTAPE=${ENABLE_DUKTAPE}\r\n    -DCIVETWEB_DISABLE_CACHING=${NO_CACHING}\r\n    -DCIVETWEB_C_STANDARD=${C_STANDARD}\r\n    -DCIVETWEB_CXX_STANDARD=${CXX_STANDARD}\r\n    -DCIVETWEB_ALLOW_WARNINGS=${ALLOW_WARNINGS}\r\n    -DCIVETWEB_ENABLE_IPV6=${ENABLE_IPV6}\r\n    ${ADDITIONAL_CMAKE_ARGS}\r\n    ..\r\n  - cmake\r\n    -G \"Unix Makefiles\"\r\n    -DCMAKE_BUILD_TYPE=${BUILD_TYPE}\r\n    -DBUILD_SHARED_LIBS=${BUILD_SHARED}\r\n    \"-DCIVETWEB_THIRD_PARTY_DIR=${HOME}/third-party\"\r\n    -DCIVETWEB_ENABLE_THIRD_PARTY_OUTPUT=YES\r\n    -DCIVETWEB_ENABLE_SSL=${ENABLE_SSL}\r\n    -DCIVETWEB_DISABLE_CGI=${NO_CGI}\r\n    -DCIVETWEB_SERVE_NO_FILES=${NO_FILES}\r\n    -DCIVETWEB_ENABLE_SSL_DYNAMIC_LOADING=${ENABLE_SSL_DYNAMIC_LOADING}\r\n    -DCIVETWEB_SSL_OPENSSL_API_1_0=${OPENSSL_1_0}\r\n    -DCIVETWEB_SSL_OPENSSL_API_1_1=${OPENSSL_1_1}\r\n    -DCIVETWEB_SSL_OPENSSL_API_3_0=${OPENSSL_3_0}\r\n    -DCIVETWEB_ENABLE_WEBSOCKETS=${ENABLE_WEBSOCKETS}\r\n    -DCIVETWEB_ENABLE_CXX=${ENABLE_CXX}\r\n    -DCIVETWEB_ENABLE_SERVER_STATS=${ENABLE_SERVER_STATS}\r\n    -DCIVETWEB_ENABLE_LUA=${ENABLE_LUA}\r\n    -DCIVETWEB_ENABLE_LUA_SHARED=${ENABLE_LUA_SHARED}\r\n    -DCIVETWEB_ENABLE_DUKTAPE=${ENABLE_DUKTAPE}\r\n    -DCIVETWEB_DISABLE_CACHING=${NO_CACHING}\r\n    -DCIVETWEB_C_STANDARD=${C_STANDARD}\r\n    -DCIVETWEB_CXX_STANDARD=${CXX_STANDARD}\r\n    -DCIVETWEB_ALLOW_WARNINGS=${ALLOW_WARNINGS}\r\n    -DCIVETWEB_ENABLE_IPV6=${ENABLE_IPV6}\r\n    ${ADDITIONAL_CMAKE_ARGS}\r\n    ..\r\n  - ls -la\r\n  - ulimit -c unlimited -S\r\n\r\nafter_failure:\r\n  - COREFILE=$(find . -maxdepth 1 -name \"core*\" | head -n 1) # find core file\r\n  - if [[ -f \"$COREFILE\" ]]; then gdb -c \"$COREFILE\" example -ex \"thread apply all bt\" -ex \"set pagination 0\" -batch; fi\r\n\r\n\r\nscript:\r\n  - if [ \"${RUN_UNITTEST}\" == \"1\" ]; then\r\n      CTEST_OUTPUT_ON_FAILURE=1  CK_FORK=yes  make all test;\r\n    fi\r\n  - pwd\r\n  - ls -la unittest\r\n  - echo \"Show all test logs:\"\r\n  - if [ \"${RUN_UNITTEST}\" == \"1\" ]; then\r\n      for f in unittest/test-*.log; do printf \"\\n$f:\\n\"; cat $f; done;\r\n      for f in unittest/test-*.xml; do printf \"\\n$f:\\n\"; cat $f; done;\r\n    fi\r\n  - echo \"Build and test script DONE\"\r\n\r\nafter_success:\r\n\r\n\r\n#########################################################################################\r\n#########################################################################################\r\n#####   START OF BUILD MATRIX   #########################################################\r\n#########################################################################################\r\n#########################################################################################\r\n\r\nmatrix:\r\n  fast_finish: true\r\n  include:\r\n#########################################################################################\r\n#####   FREEBSD BUILD   ###########=#####################################################\r\n#########################################################################################\r\n\r\n  -\r\n    os: freebsd\r\n    sudo: required\r\n    compiler: clang\r\n    env:\r\n      idx=20\r\n      N=Clang-FREEBSD-Complete-NoLua-Release\r\n      BUILD_TYPE=Release\r\n      ENABLE_SSL_DYNAMIC_LOADING=YES\r\n      OPENSSL_1_0=NO\r\n      OPENSSL_1_1=YES\r\n      ENABLE_CXX=NO\r\n      ENABLE_LUA_SHARED=NO\r\n      C_STANDARD=auto\r\n      CXX_STANDARD=auto\r\n      BUILD_SHARED=NO\r\n      NO_FILES=NO\r\n      ENABLE_SSL=YES\r\n      NO_CGI=NO\r\n      ENABLE_IPV6=YES\r\n      ENABLE_WEBSOCKETS=YES\r\n      ENABLE_SERVER_STATS=YES\r\n      ENABLE_LUA=NO\r\n      ENABLE_DUKTAPE=NO\r\n      NO_CACHING=NO\r\n      ALLOW_WARNINGS=YES\r\n      RUN_UNITTEST=1"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 24.6552734375,
          "content": "cmake_minimum_required(VERSION 3.10)\ncmake_policy(VERSION 3.10)\n\n# Set up the project\nproject (civetweb VERSION 1.16.0)\n\n# Detect the platform reliably\nif(ZEPHYR_BASE)\n    if (NOT CONFIG_CIVETWEB)\n      return()\n    endif()\n    SET(ZEPHYR YES)\nelseif(NOT MACOSX AND ${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\")\n    SET(DARWIN YES)\nelseif(NOT BSD AND ${CMAKE_SYSTEM_NAME} MATCHES \"FreeBSD\")\n    SET(FREEBSD YES)\nelseif(NOT LINUX AND ${CMAKE_SYSTEM_NAME} MATCHES \"Linux\")\n    SET(LINUX YES)\nendif()\n\n# Do not allow in source builds\nset(CMAKE_DISABLE_SOURCE_CHANGES ON)\nset(CMAKE_DISABLE_IN_SOURCE_BUILD ON)\n\n# Make sure we can import out CMake functions\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_LIST_DIR}/cmake\")\n\n# Load in the needed CMake modules\ninclude(CheckIncludeFiles)\ninclude(CheckCCompilerFlag)\ninclude(CheckCXXCompilerFlag)\ninclude(AddCCompilerFlag)\ninclude(AddCXXCompilerFlag)\ninclude(DetermineTargetArchitecture)\ninclude(CMakeDependentOption)\n\nset(CIVETWEB_VERSION \"1.16.0\" CACHE STRING \"The version of the civetweb library\")\nstring(REGEX MATCH \"([0-9]+)\\\\.([0-9]+)\\\\.([0-9]+)\" CIVETWEB_VERSION_MATCH \"${CIVETWEB_VERSION}\")\nif (\"${CIVETWEB_VERSION_MATCH}\" STREQUAL \"\")\n  message(FATAL_ERROR \"Must specify a semantic version: major.minor.patch\")\nendif()\nset(CIVETWEB_VERSION_MAJOR \"${CMAKE_MATCH_1}\")\nset(CIVETWEB_VERSION_MINOR \"${CMAKE_MATCH_2}\")\nset(CIVETWEB_VERSION_PATCH \"${CMAKE_MATCH_3}\")\ndetermine_target_architecture(CIVETWEB_ARCHITECTURE)\ninclude(GNUInstallDirs)\n\n# CTest automation\noption(CIVETWEB_BUILD_TESTING \"Enable automated testing of civetweb\" ON)\nmessage(STATUS \"Enabling tests in the build - ${CIVETWEB_BUILD_TESTING}\")\n\n# C++ wrappers\noption(CIVETWEB_ENABLE_THIRD_PARTY_OUTPUT \"Shows the output of third party dependency processing\" OFF)\n\n# Thread Stack Size\nset(CIVETWEB_THREAD_STACK_SIZE 102400 CACHE STRING\n  \"The stack size in bytes for each thread created\")\nset_property(CACHE CIVETWEB_THREAD_STACK_SIZE PROPERTY VALUE ${CIVETWEB_THREAD_STACK_SIZE})\nmessage(STATUS \"Thread Stack Size - ${CIVETWEB_THREAD_STACK_SIZE}\")\n\noption(CIVETWEB_ENABLE_SERVER_EXECUTABLE \"Enable building of the server executable\" ON)\nmessage(STATUS \"Enabling server executable - ${CIVETWEB_ENABLE_SERVER_EXECUTABLE}\")\n\n# Serve no files from the web server\noption(CIVETWEB_SERVE_NO_FILES \"Configures the server to serve no static files\" OFF)\nmessage(STATUS \"Serve no static files - ${CIVETWEB_SERVE_NO_FILES}\")\n\n# Serve no files from the web server\noption(CIVETWEB_DISABLE_CGI \"Disables CGI, so theserver will not execute CGI scripts\" OFF)\nmessage(STATUS \"Disable CGI support - ${CIVETWEB_DISABLE_CGI}\")\n\n# Disable caching\noption(CIVETWEB_DISABLE_CACHING \"Disables caching, so that no timegm is used.\" OFF)\nmessage(STATUS \"Disable caching support - ${CIVETWEB_DISABLE_CACHING}\")\n\n# C++ wrappers\noption(CIVETWEB_ENABLE_CXX \"Enables the C++ wrapper library\" OFF)\nmessage(STATUS \"C++ wrappers - ${CIVETWEB_ENABLE_CXX}\")\n\n# HTTP2 Support\noption(CIVETWEB_ENABLE_HTTP2 \"Enables HTTP2 support\" OFF)\nmessage(STATUS \"Use HTPP2 - ${CIVETWEB_ENABLE_HTTP2}\")\n\n# IP Version 6\noption(CIVETWEB_ENABLE_IPV6 \"Enables the IP version 6 support\" ON)\nmessage(STATUS \"IP Version 6 - ${CIVETWEB_ENABLE_IPV6}\")\n\n# Websocket support\noption(CIVETWEB_ENABLE_WEBSOCKETS \"Enable websockets connections\" OFF)\nmessage(STATUS \"Websockets support - ${CIVETWEB_ENABLE_WEBSOCKETS}\")\n\n# X DOM sockets support\noption(CIVETWEB_ENABLE_X_DOM_SOCKET \"Enable X DOM sockets support\" OFF)\nmessage(STATUS \"X DOM sockets support - ${CIVETWEB_ENABLE_X_DOM_SOCKET}\")\n\n\n# Server statistics support\noption(CIVETWEB_ENABLE_SERVER_STATS \"Enable server statistics\" OFF)\nmessage(STATUS \"Server statistics support - ${CIVETWEB_ENABLE_SERVER_STATS}\")\n\n# Memory debugging\noption(CIVETWEB_ENABLE_MEMORY_DEBUGGING \"Enable the memory debugging features\" OFF)\nmessage(STATUS \"Memory Debugging - ${CIVETWEB_ENABLE_MEMORY_DEBUGGING}\")\n\n# ASAN in debug mode (-fsanitize=address, etc)\noption(CIVETWEB_ENABLE_ASAN \"Enable ASAN in debug mode\" ON)\nmessage(STATUS \"ASAN in debug mode - ${CIVETWEB_ENABLE_ASAN}\")\n\n# ARCH flag\noption(CIVETWEB_ARCH \"Force 32/64 bit architecture\" OFF)\nmessage(STATUS \"Force x32 / x64 architecture - ${CIVETWEB_ARCH}\")\n\n# LUA CGI support\noption(CIVETWEB_ENABLE_LUA \"Enable Lua CGIs\" OFF)\nmessage(STATUS \"Lua CGI support - ${CIVETWEB_ENABLE_LUA}\")\n\n# zlib compression support\noption(CIVETWEB_ENABLE_ZLIB \"Enables zlib compression support\" OFF)\nmessage(STATUS \"zlib support - ${CIVETWEB_ENABLE_ZLIB}\")\n\n# Enable installing CivetWeb executables\noption(CIVETWEB_INSTALL_EXECUTABLE \"Enable installing CivetWeb executable\" ON)\nmark_as_advanced(FORCE CIVETWEB_INSTALL_EXECUTABLE) # Advanced users can disable\nmessage(STATUS \"Executable installation - ${CIVETWEB_INSTALL_EXECUTABLE}\")\n\n# Allow builds to complete with warnings (do not set -Werror)\n# CivetWeb Linux support is stable:\n# Builds for GCC 4.6 and clang 3.4 are free from warnings.\n# However, GCC introduced a couple of new, partially idiotic warnings,\n# that can not be disabled using a #pragma directive.\n# It seems unreasonable to have all GCC versions warning free, but only\n# some selected ones.\noption(CIVETWEB_ALLOW_WARNINGS \"Do not stop build if there are warnings\" ON)\nmessage(STATUS \"Build if there are warnings - ${CIVETWEB_ALLOW_WARNINGS}\")\n\nif (NOT CIVETWEB_ALLOW_WARNINGS)\n  if (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n    message(FATAL_ERROR \"Cannot compile with warning as errors, until this GCC bug is solved: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=53431\")\n  endif()\nendif()\n\n# Link to the shared LUA library\ncmake_dependent_option(\n  CIVETWEB_ENABLE_LUA_SHARED  \"Link to the shared LUA system library\" OFF\n CIVETWEB_ENABLE_LUA OFF)\nif (CIVETWEB_ENABLE_LUA)\n  message(STATUS \"Linking shared Lua library - ${CIVETWEB_ENABLE_LUA_SHARED}\")\nendif()\n\n# Lua Third Party Settings\nif (CIVETWEB_ENABLE_LUA)\n  if (NOT CIVETWEB_ENABLE_LUA_SHARED)\n    # Lua Version\n    set(CIVETWEB_LUA_VERSION 5.2.4 CACHE STRING\n      \"The version of Lua to build and include statically\")\n    set_property(CACHE CIVETWEB_LUA_VERSION PROPERTY VALUE ${CIVETWEB_LUA_VERSION})\n    message(STATUS \"Lua Version - ${CIVETWEB_LUA_VERSION}\")\n    mark_as_advanced(CIVETWEB_LUA_VERSION)\n\n    # Lua Verification Hash\n    set(CIVETWEB_LUA_MD5_HASH 913fdb32207046b273fdb17aad70be13 CACHE STRING\n      \"The hash of Lua archive to be downloaded\")\n    set_property(CACHE CIVETWEB_LUA_MD5_HASH PROPERTY VALUE ${CIVETWEB_LUA_MD5_HASH})\n    mark_as_advanced(CIVETWEB_LUA_MD5_HASH)\n  endif()\n\n  # Lua Filesystem Version\n  set(CIVETWEB_LUA_FILESYSTEM_VERSION 1.6.3 CACHE STRING\n    \"The version of Lua Filesystem to build and include statically\")\n  set_property(CACHE CIVETWEB_LUA_FILESYSTEM_VERSION PROPERTY VALUE ${CIVETWEB_LUA_FILESYSTEM_VERSION})\n  message(STATUS \"Lua Filesystem Version - ${CIVETWEB_LUA_FILESYSTEM_VERSION}\")\n  mark_as_advanced(CIVETWEB_LUA_FILESYSTEM_VERSION)\n\n  # Lua Filesystem Verification Hash\n  set(CIVETWEB_LUA_FILESYSTEM_MD5_HASH d0552c7e5a082f5bb2865af63fb9dc95 CACHE STRING\n    \"The hash of Lua Filesystem archive to be downloaded\")\n  set_property(CACHE CIVETWEB_LUA_FILESYSTEM_MD5_HASH PROPERTY VALUE ${CIVETWEB_LUA_FILESYSTEM_MD5_HASH})\n  mark_as_advanced(CIVETWEB_LUA_FILESYSTEM_MD5_HASH)\n\n  # Lua SQLite Version\n  set(CIVETWEB_LUA_SQLITE_VERSION 0.9.3 CACHE STRING\n    \"The version of Lua SQLite to build and include statically\")\n  set_property(CACHE CIVETWEB_LUA_SQLITE_VERSION PROPERTY VALUE ${CIVETWEB_LUA_SQLITE_VERSION})\n  message(STATUS \"Lua SQLite Version - ${CIVETWEB_LUA_SQLITE_VERSION}\")\n  mark_as_advanced(CIVETWEB_LUA_SQLITE_VERSION)\n\n  # Lua SQLite Verification Hash\n  set(CIVETWEB_LUA_SQLITE_MD5_HASH ff7abd4aa8bd549eb18298fb954612f8 CACHE STRING\n    \"The hash of Lua SQLite archive to be downloaded\")\n  set_property(CACHE CIVETWEB_LUA_SQLITE_MD5_HASH PROPERTY VALUE ${CIVETWEB_LUA_SQLITE_MD5_HASH})\n  mark_as_advanced(CIVETWEB_LUA_SQLITE_MD5_HASH)\n\n  # Lua XML Version\n  set(CIVETWEB_LUA_XML_VERSION 1.8.0 CACHE STRING\n    \"The version of Lua XML to build and include statically\")\n  set_property(CACHE CIVETWEB_LUA_XML_VERSION PROPERTY VALUE ${CIVETWEB_LUA_XML_VERSION})\n  message(STATUS \"Lua XML Version - ${CIVETWEB_LUA_XML_VERSION}\")\n  mark_as_advanced(CIVETWEB_LUA_XML_VERSION)\n\n  # Lua XML Verification Hash\n  set(CIVETWEB_LUA_XML_MD5_HASH 25e4c276c5d8716af1de0c7853aec2b4 CACHE STRING\n    \"The hash of Lua XML archive to be downloaded\")\n  set_property(CACHE CIVETWEB_LUA_XML_MD5_HASH PROPERTY VALUE ${CIVETWEB_LUA_XML_MD5_HASH})\n  mark_as_advanced(CIVETWEB_LUA_XML_MD5_HASH)\n\n  # SQLite Version\n  set(CIVETWEB_SQLITE_VERSION 3.8.9 CACHE STRING\n    \"The version of SQLite to build and include statically\")\n  set_property(CACHE CIVETWEB_SQLITE_VERSION PROPERTY VALUE ${CIVETWEB_SQLITE_VERSION})\n  message(STATUS \"SQLite Version - ${CIVETWEB_SQLITE_VERSION}\")\n  mark_as_advanced(CIVETWEB_SQLITE_VERSION)\n\n  # SQLite Verification Hash\n  set(CIVETWEB_SQLITE_MD5_HASH 02e9c3a6daa8b8587cf6bef828c2e33f CACHE STRING\n    \"The hash of SQLite archive to be downloaded\")\n  set_property(CACHE CIVETWEB_SQLITE_MD5_HASH PROPERTY VALUE ${CIVETWEB_SQLITE_MD5_HASH})\n  mark_as_advanced(CIVETWEB_SQLITE_MD5_HASH)\nendif()\n\n# Duktape CGI support\noption(CIVETWEB_ENABLE_DUKTAPE \"Enable Duktape CGIs\" OFF)\nmessage(STATUS \"Duktape CGI support - ${CIVETWEB_ENABLE_DUKTAPE}\")\n\n# SSL support\noption(CIVETWEB_ENABLE_SSL \"Enables the secure socket layer\" ON)\nmessage(STATUS \"SSL support - ${CIVETWEB_ENABLE_SSL}\")\n\n# OpenSSL 1.0 API\noption(CIVETWEB_SSL_OPENSSL_API_1_0 \"Use the OpenSSL 1.0 API\" OFF)\nmessage(STATUS \"Compile for OpenSSL 1.0 API - ${CIVETWEB_SSL_OPENSSL_API_1_0}\")\n\n# OpenSSL 1.1 API\noption(CIVETWEB_SSL_OPENSSL_API_1_1 \"Use the OpenSSL 1.1 API\" ON)\nmessage(STATUS \"Compile for OpenSSL 1.1 API - ${CIVETWEB_SSL_OPENSSL_API_1_1}\")\n\n# OpenSSL 3.0 API\noption(CIVETWEB_SSL_OPENSSL_API_3_0 \"Use the OpenSSL 3.0 API\" OFF)\nmessage(STATUS \"Compile for OpenSSL 3.0 API - ${CIVETWEB_SSL_OPENSSL_API_3_0}\")\n\noption(CIVETWEB_ENABLE_GNUTLS \"Use the GnuTls\" OFF)\nmessage(STATUS \"SSL support (GnuTLS)  - ${CIVETWEB_ENABLE_GNUTLS}\")\n\noption(CIVETWEB_ENABLE_MBEDTLS \"Use the MbedTls\" OFF)\nmessage(STATUS \"SSL support (MbedTLS) - ${CIVETWEB_ENABLE_MBEDTLS}\")\n\n# Dynamically load or link the SSL libraries\ncmake_dependent_option(\n  CIVETWEB_ENABLE_SSL_DYNAMIC_LOADING \"Dynamically loads the SSL library rather than linking it\" ON\n  CIVETWEB_ENABLE_SSL OFF)\nif (CIVETWEB_ENABLE_SSL)\n  message(STATUS \"Dynamically load SSL libraries - ${CIVETWEB_ENABLE_SSL_DYNAMIC_LOADING}\")\nendif()\n\n# Link time optimization\noption(CIVETWEB_ENABLE_LTO \"Enable link time optimization\" OFF)\nif (NOT \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\" OR\n    \"${BUILD_SHARED_LIBS}\" STREQUAL \"SHARED\" OR\n    ${CMAKE_CXX_COMPILER_VERSION} GREATER 5)\n  option(CIVETWEB_CXX_ENABLE_LTO \"Enable link time optimization for the C++ wrapper library\" ON)\nelse()\n  option(CIVETWEB_CXX_ENABLE_LTO \"Enable link time optimization for the C++ wrapper library\" OFF)\nendif()\n\n# Third Party Download location\nset(CIVETWEB_THIRD_PARTY_DIR \"${CMAKE_BINARY_DIR}/third_party\" CACHE STRING\n  \"The location that third party code is downloaded, built and installed\")\nset_property(CACHE CIVETWEB_THIRD_PARTY_DIR PROPERTY VALUE ${CIVETWEB_THIRD_PARTY_DIR})\n\n# Unix systems can define the dynamic library names to load\nif (CIVETWEB_ENABLE_SSL_DYNAMIC_LOADING AND NOT DARWIN AND UNIX)\n  # SSL library name\n  set(CIVETWEB_SSL_SSL_LIB \"libssl.so\" CACHE STRING\n    \"The name of the SSL library to load\")\n  set_property(CACHE CIVETWEB_SSL_SSL_LIB PROPERTY VALUE ${CIVETWEB_SSL_SSL_LIB})\n  message(STATUS \"SSL Library Name - ${CIVETWEB_SSL_SSL_LIB}\")\n\n  # Crytography library name\n  set(CIVETWEB_SSL_CRYPTO_LIB \"libcrypto.so\" CACHE STRING\n    \"The name of the SSL Cryptography library to load\")\n  set_property(CACHE CIVETWEB_SSL_CRYPTO_LIB PROPERTY VALUE ${CIVETWEB_SSL_CRYPTO_LIB})\n  message(STATUS \"SSL Cryptography Library Name - ${CIVETWEB_SSL_CRYPTO_LIB}\")\nendif()\n\n# Allow warnings in 3rd party components\nif (CIVETWEB_ENABLE_LUA OR CIVETWEB_ENABLE_DUKTAPE)\nSET(CIVETWEB_ALLOW_WARNINGS YES)\nendif()\n\n# The C and C++ standards to use\nset(CIVETWEB_C_STANDARD auto CACHE STRING\n  \"The C standard to use; auto determines the latest supported by the compiler\")\nset_property(CACHE CIVETWEB_C_STANDARD PROPERTY STRINGS auto c11 c99 c89)\nset(CIVETWEB_CXX_STANDARD auto CACHE STRING\n  \"The C++ standard to use; auto determines the latest supported by the compiler\")\nset_property(CACHE CIVETWEB_CXX_STANDARD PROPERTY STRINGS auto c++14 c++11 c++98)\n\n# Configure the linker\nif (\"${CMAKE_C_COMPILER_ID}\" STREQUAL \"GNU\")\n  find_program(GCC_AR gcc-ar)\n  if (GCC_AR)\n    set(CMAKE_AR ${GCC_AR})\n  endif()\n  find_program(GCC_RANLIB gcc-ranlib)\n  if (GCC_RANLIB)\n    set(CMAKE_RANLIB ${GCC_RANLIB})\n  endif()\nendif()\n\n# Configure the C compiler\nmessage(STATUS \"Configuring C Compiler\")\nif (\"${CIVETWEB_C_STANDARD}\" STREQUAL \"auto\")\n  add_c_compiler_flag(-std=c11)\n  if (NOT HAVE_C_FLAG_STD_C11)\n    add_c_compiler_flag(-std=c99)\n    if (NOT HAVE_C_FLAG_STD_C99)\n      add_c_compiler_flag(-std=c89)\n    endif()\n  endif()\nelse()\n  add_c_compiler_flag(-std=${CIVETWEB_C_STANDARD})\nendif()\n\nif (MINGW)\n  add_c_compiler_flag(-Wno-format)\nendif()\nif (NOT CIVETWEB_ALLOW_WARNINGS)\n  add_c_compiler_flag(-Werror)\n  add_c_compiler_flag(/WX)\nendif()\nif (${CIVETWEB_ENABLE_LTO})\n  add_c_compiler_flag(-flto RELEASE)\nendif()\nif (${CIVETWEB_ENABLE_ASAN})\nadd_c_compiler_flag(-fsanitize=undefined DEBUG)\nadd_c_compiler_flag(-fsanitize=address DEBUG)\nif (HAVE_C_FLAG_FSANITIZE_ADDRESS)\n  add_c_compiler_flag(-static-asan DEBUG)\nendif()\nendif()\nif (MINGW)\n  add_c_compiler_flag(-mwindows)\nendif()\n\n# Coverage build type\nset(CMAKE_C_FLAGS_COVERAGE \"${CMAKE_C_FLAGS_DEBUG}\" CACHE STRING\n    \"Flags used by the C compiler during coverage builds.\"\n    FORCE)\nset(CMAKE_EXE_LINKER_FLAGS_COVERAGE\n    \"${CMAKE_EXE_LINKER_FLAGS_DEBUG}\" CACHE STRING\n    \"Flags used for linking binaries during coverage builds.\"\n    FORCE)\nset(CMAKE_SHARED_LINKER_FLAGS_COVERAGE\n    \"${CMAKE_SHARED_LINKER_FLAGS_DEBUG}\" CACHE STRING\n    \"Flags used by the shared libraries linker during coverage builds.\"\n    FORCE)\nmark_as_advanced(\n    CMAKE_CXX_FLAGS_COVERAGE\n    CMAKE_C_FLAGS_COVERAGE\n    CMAKE_EXE_LINKER_FLAGS_COVERAGE\n    CMAKE_SHARED_LINKER_FLAGS_COVERAGE)\nset(CMAKE_BUILD_TYPE \"${CMAKE_BUILD_TYPE}\" CACHE STRING\n    \"Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel Coverage.\"\n    FORCE)\nadd_c_compiler_flag(--coverage COVERAGE)\n\n# Configure the C++ compiler\nif (CIVETWEB_ENABLE_CXX)\n  message(STATUS \"Configuring C++ Compiler\")\n  if (\"${CIVETWEB_CXX_STANDARD}\" STREQUAL \"auto\")\n    add_cxx_compiler_flag(-std=c++14)\n    if (NOT HAVE_CXX_FLAG_STD_CXX14)\n      add_cxx_compiler_flag(-std=c++11)\n      if (NOT HAVE_CXX_FLAG_STD_CXX11)\n        add_cxx_compiler_flag(-std=c++98)\n      endif()\n    endif()\n  else()\n    add_cxx_compiler_flag(-std=${CIVETWEB_CXX_STANDARD})\n  endif()\n  add_cxx_compiler_flag(-Wall)\n  add_cxx_compiler_flag(-Wextra)\n  add_cxx_compiler_flag(-Wshadow)\n  add_cxx_compiler_flag(-Wmissing-prototypes)\n  add_cxx_compiler_flag(-Weverything)\n  add_cxx_compiler_flag(/W4)\n  add_cxx_compiler_flag(-Wno-padded)\n  add_cxx_compiler_flag(/Wd4820) # padding\n  add_cxx_compiler_flag(-Wno-unused-macros)\n  add_cxx_compiler_flag(-Wno-format-nonliteral)\n  if (MINGW)\n    add_cxx_compiler_flag(-Wno-format)\n  endif()\n  if (NOT CIVETWEB_ALLOW_WARNINGS)\n    add_cxx_compiler_flag(-Werror)\n    add_cxx_compiler_flag(/WX)\n  endif()\n  add_cxx_compiler_flag(-pedantic-errors)\n  add_cxx_compiler_flag(-fvisibility=hidden)\n  add_cxx_compiler_flag(-fstack-protector-strong RELEASE)\n\n  if (${CIVETWEB_CXX_ENABLE_LTO})\n    add_cxx_compiler_flag(-flto RELEASE)\n  endif()\n  if (${CIVETWEB_ENABLE_ASAN})\n  add_cxx_compiler_flag(-fsanitize=undefined DEBUG)\n  add_cxx_compiler_flag(-fsanitize=address DEBUG)\n  if (HAVE_CXX_FLAG_FSANITIZE_ADDRESS)\n    add_cxx_compiler_flag(-static-asan DEBUG)\n  endif()\n  endif()\n  add_cxx_compiler_flag(-fstack-protector-all DEBUG)\n  if (MINGW)\n    add_cxx_compiler_flag(-mwindows)\n  endif()\n  set(CMAKE_CXX_FLAGS_COVERAGE \"${CMAKE_CXX_FLAGS_DEBUG}\" CACHE STRING\n      \"Flags used by the C++ compiler during coverage builds.\"\n      FORCE)\n  add_cxx_compiler_flag(--coverage COVERAGE)\nendif()\n\nif (NOT ZEPHYR)\n  #Warnings: enable everything\n  add_c_compiler_flag(-Wall)\n  add_c_compiler_flag(-Wextra)\n  add_c_compiler_flag(-Wshadow)\n  add_c_compiler_flag(-Wconversion)\n  add_c_compiler_flag(-Wmissing-prototypes)\n  add_c_compiler_flag(-Weverything)\n  add_c_compiler_flag(-Wparentheses)\n  add_c_compiler_flag(/W4) # VisualStudio highest warning level\n\n  #Warnings: Disable some warnings\n  add_c_compiler_flag(-Wno-padded) # padding in structures by compiler\n  add_c_compiler_flag(-Wno-unused-macros) # so what?\n  Check_C_Compiler_Flag( HAVE_NO_RESERVED_ID_MACROS -Wno-reserved-id-macros)\n  if (HAVE_NO_RESERVED_ID_MACROS)\n  add_c_compiler_flag(-Wno-reserved-id-macros) # for system headers\n  endif (HAVE_NO_RESERVED_ID_MACROS)\n  add_c_compiler_flag(-Wno-format-nonliteral) # printf(myFormatStringVar, ...)\n  add_c_compiler_flag(-Wno-cast-qual) # const cast\n  add_c_compiler_flag(/Wd4820) # padding\n\n  add_c_compiler_flag(-pedantic-errors)\n  add_c_compiler_flag(-fvisibility=hidden)\n  add_c_compiler_flag(-fstack-protector-strong RELEASE)\n  add_c_compiler_flag(-fstack-protector-all DEBUG)\nelse()\n  # This policy is needed to override options with variables\n  cmake_policy(SET CMP0077 NEW)\n\n  # Configure what you need/support in Zephyr\n  set(CIVETWEB_SERVE_NO_FILES ON)\n  set(CIVETWEB_SERVE_NO_FILESYSTEMS ON)\n  set(CIVETWEB_DISABLE_CGI ON)\n  set(CIVETWEB_DISABLE_CACHING ON)\n  set(CIVETWEB_ENABLE_SSL OFF)\n  set(CIVETWEB_ENABLE_SSL_DYNAMIC_LOADING OFF)\n\n  set(CIVETWEB_ENABLE_LUA OFF)\n  set(CIVETWEB_ENABLE_DUKTAPE OFF)\n  set(CIVETWEB_ENABLE_MEMORY_DEBUGGING OFF)\n  set(CIVETWEB_ENABLE_SERVER_EXECUTABLE OFF)\n  set(CIVETWEB_ENABLE_ASAN OFF)\n  set(CIVETWEB_INSTALL_EXECUTABLE OFF)\n\n  set(CIVETWEB_THREAD_STACK_SIZE 0)\n\n  set(BUILD_SHARED_LIBS OFF)\n\n  add_definitions(-DMG_EXTERNAL_FUNCTION_mg_cry_internal_impl)\n  add_definitions(-DMG_EXTERNAL_FUNCTION_log_access)\n\n  add_definitions(-DNO_ALTERNATIVE_QUEUE)\n  add_definitions(-DZEPHYR_VERSION=${KERNEL_VERSION_STRING})\n\n  zephyr_interface_library_named(CIVETWEB)\n\n  target_include_directories(CIVETWEB INTERFACE src)\n  target_include_directories(CIVETWEB INTERFACE include)\n  target_include_directories(CIVETWEB INTERFACE ${CMAKE_SOURCE_DIR}/src)\n\n  zephyr_include_directories(include)\n\n  zephyr_library()\n  zephyr_library_sources(\n    src/civetweb.c\n  )\n\n  zephyr_library_link_libraries(CIVETWEB)\n  target_link_libraries(CIVETWEB INTERFACE zephyr_interface)\nendif()\n\n\n# Set up the definitions\noption(CIVETWEB_ENABLE_DEBUG_TOOLS \"For Debug builds enable verbose logging and assertions\" ON)\nif (${CMAKE_BUILD_TYPE} MATCHES \"[Dd]ebug\")\n  if(CIVETWEB_ENABLE_DEBUG_TOOLS)\n    add_definitions(-DDEBUG)\n  endif()\n  add_definitions(-O0)\n  add_definitions(-g)\nendif()\nif (CIVETWEB_ENABLE_HTTP2)\n  add_definitions(-DUSE_HTTP2)\nendif()\nif (CIVETWEB_ENABLE_IPV6)\n  add_definitions(-DUSE_IPV6)\nendif()\nif (CIVETWEB_ENABLE_WEBSOCKETS)\n  add_definitions(-DUSE_WEBSOCKET)\nendif()\nif (CIVETWEB_ENABLE_X_DOM_SOCKET)\n   add_definitions(-DUSE_X_DOM_SOCKET)\nendif()\nif (CIVETWEB_ENABLE_SERVER_STATS)\n  add_definitions(-DUSE_SERVER_STATS)\nendif()\nif (CIVETWEB_SERVE_NO_FILES)\n  add_definitions(-DNO_FILES)\nendif()\nif (CIVETWEB_SERVE_NO_FILESYSTEMS)\n  add_definitions(-DNO_FILESYSTEMS)\nendif()\nif (CIVETWEB_DISABLE_CGI)\n  add_definitions(-DNO_CGI)\nendif()\nif (CIVETWEB_DISABLE_CACHING)\n  add_definitions(-DNO_CACHING)\nendif()\nif (CIVETWEB_ENABLE_LUA)\n  add_definitions(-DUSE_LUA)\nendif()\nif (CIVETWEB_ENABLE_ZLIB)\n  add_definitions(-DUSE_ZLIB)\nendif()\nif (CIVETWEB_ENABLE_DUKTAPE)\n  add_definitions(-DUSE_DUKTAPE)\nendif()\nif (CIVETWEB_ENABLE_MEMORY_DEBUGGING)\n  add_definitions(-DMEMORY_DEBUGGING)\nendif()\nif (NOT CIVETWEB_ENABLE_SSL)\n  add_definitions(-DNO_SSL)\nelseif (CIVETWEB_ENABLE_GNUTLS)\n  add_definitions(-DUSE_GNUTLS)\nelseif (CIVETWEB_ENABLE_MBEDTLS)\n  add_definitions(-DUSE_MBEDTLS)\nelseif (NOT CIVETWEB_ENABLE_SSL_DYNAMIC_LOADING)\n  add_definitions(-DNO_SSL_DL)\nelse()\n  if(CIVETWEB_SSL_SSL_LIB)\n    add_definitions(-DSSL_LIB=\"${CIVETWEB_SSL_SSL_LIB}\")\n  endif()\n  if(CIVETWEB_SSL_CRYPTO_LIB)\n    add_definitions(-DCRYPTO_LIB=\"${CIVETWEB_SSL_CRYPTO_LIB}\")\n  endif()\nendif()\n\nif(CIVETWEB_SSL_OPENSSL_API_1_0)\n  add_definitions(-DOPENSSL_API_1_0)\nendif()\nif(CIVETWEB_SSL_OPENSSL_API_1_1)\n  add_definitions(-DOPENSSL_API_1_1)\nendif()\nif(CIVETWEB_SSL_OPENSSL_API_3_0)\n  add_definitions(-DOPENSSL_API_3_0)\nendif()\nif(CIVETWEB_SSL_OPENSSL_API_1_0 AND CIVETWEB_SSL_OPENSSL_API_1_1)\n  message(FATAL_ERROR \"Multiple SSL API versions defined\")\nendif()\nif(CIVETWEB_SSL_OPENSSL_API_1_0 AND CIVETWEB_SSL_OPENSSL_API_3_0)\n  message(FATAL_ERROR \"Multiple SSL API versions defined\")\nendif()\nif(CIVETWEB_SSL_OPENSSL_API_1_1 AND CIVETWEB_SSL_OPENSSL_API_3_0)\n  message(FATAL_ERROR \"Multiple SSL API versions defined\")\nendif()\n\n\nadd_definitions(-DUSE_STACK_SIZE=${CIVETWEB_THREAD_STACK_SIZE})\n\n# Set 32 or 64 bit environment\nif (${CMAKE_ARCH} MATCHES \"[Xx]86\")\nadd_c_compiler_flag(-m32)\nendif()\nif (${CMAKE_ARCH} MATCHES \"[Xx]64\")\nadd_c_compiler_flag(-m64)\nendif()\n# TODO: add support for -march\n\nif (ZEPHYR)\n  return()\nendif()\n\n# Build the targets\nadd_subdirectory(src)\n\n# Enable the testing of the library/executable\ninclude(CTest)\nif (CIVETWEB_BUILD_TESTING)\n  # Check unit testing framework Version\n  set(CIVETWEB_CHECK_VERSION 0.11.0 CACHE STRING\n    \"The version of Check unit testing framework to build and include statically\")\n  set_property(CACHE CIVETWEB_CHECK_VERSION PROPERTY VALUE ${CIVETWEB_CHECK_VERSION})\n  message(STATUS \"Check Unit Testing Framework Version - ${CIVETWEB_CHECK_VERSION}\")\n  mark_as_advanced(CIVETWEB_CHECK_VERSION)\n\n  # Check unit testing framework Verification Hash\n  # Hash for Check 0.10.0: 67a34c40b5bc888737f4e5ae82e9939f\n  # Hash for Check 0.11.0: 1b14ee307dca8e954a8219c34484d7c4\n  set(CIVETWEB_CHECK_MD5_HASH 1b14ee307dca8e954a8219c34484d7c4 CACHE STRING\n    \"The hash of Check unit testing framework archive to be downloaded\")\n  set_property(CACHE CIVETWEB_CHECK_MD5_HASH PROPERTY VALUE ${CIVETWEB_CHECK_MD5_HASH})\n  mark_as_advanced(CIVETWEB_CHECK_MD5_HASH)\n\n  # Build the testing\n  add_subdirectory(unittest)\nendif()\n\n# cmake config file\n\ninclude(CMakePackageConfigHelpers)\n\ninstall(\n  EXPORT ${PROJECT_NAME}-targets\n  NAMESPACE ${PROJECT_NAME}::\n  FILE ${PROJECT_NAME}-targets.cmake\n  DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\"\n  COMPONENT civetweb-cmake-config\n)\n\nconfigure_package_config_file(\n  \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/${PROJECT_NAME}-config.cmake.in\"\n  ${PROJECT_NAME}-config.cmake\n  INSTALL_DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\"\n  NO_CHECK_REQUIRED_COMPONENTS_MACRO\n  PATH_VARS CMAKE_INSTALL_INCLUDEDIR CMAKE_INSTALL_LIBDIR CIVETWEB_ENABLE_CXX\n)\n\nconfigure_file(\n  cmake/${PROJECT_NAME}.pc.in\n  ${PROJECT_BINARY_DIR}/${PROJECT_NAME}.pc\n  @ONLY\n)\n\nconfigure_file(\n  cmake/${PROJECT_NAME}-cpp.pc.in\n  ${PROJECT_BINARY_DIR}/${PROJECT_NAME}-cpp.pc\n  @ONLY\n)\n\ninstall(\n  FILES\n    \"${PROJECT_BINARY_DIR}/${PROJECT_NAME}.pc\"\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\"\n)\n\ninstall(\n  FILES\n    \"${PROJECT_BINARY_DIR}/${PROJECT_NAME}-cpp.pc\"\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\"\n)\n\nwrite_basic_package_version_file(${PROJECT_NAME}-config-version.cmake\n  VERSION ${CIVETWEB_VERSION}\n  COMPATIBILITY AnyNewerVersion\n)\n\ninstall(\n  FILES\n    \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindLibDl.cmake\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindLibRt.cmake\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindWinSock.cmake\"\n  DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\"\n  COMPONENT civetweb-cmake-config\n)\n\n# Set up CPack\ninclude(InstallRequiredSystemLibraries)\nset(CPACK_PACKAGE_VENDOR \"civetweb Contributors\")\nset(CPACK_PACKAGE_CONTACT \"civetweb@users.noreply.github.com\")\nset(CPACK_PACKAGE_VERSION_MAJOR \"${CIVETWEB_VERSION_MAJOR}\")\nset(CPACK_PACKAGE_VERSION_MINOR \"${CIVETWEB_VERSION_MINOR}\")\nset(CPACK_PACKAGE_VERSION_PATCH \"${CIVETWEB_VERSION_PATCH}\")\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"A HTTP library and server\")\nset(CPACK_PACKAGE_DESCRIPTION_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/README.md\")\nset(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/LICENSE.md\")\nset(CPACK_STRIP_FILES TRUE)\nset(CPACK_PACKAGE_DEPENDS \"openssl\")\nif (CIVETWEB_ENABLE_LUA_SHARED)\n  set(CPACK_PACKAGE_DEPENDS \"lua, ${CPACK_PACKAGE_DEPENDS}\")\nendif()\n\n# RPM Packaging\nset(CPACK_RPM_PACKAGE_GROUP \"Development/Libraries\")\nset(CPACK_RPM_PACKAGE_LICENSE \"MIT\")\nset(CPACK_RPM_PACKAGE_ARCHITECTURE \"${CIVETWEB_ARCHITECTURE}\")\nset(CPACK_RPM_PACKAGE_REQUIRES \"${CPACK_PACKAGE_DEPENDS}\")\n\n# Debian Packaging\nset(CPACK_DEBIAN_PACKAGE_ARCHITECTURE \"${CIVETWEB_ARCHITECTURE}\")\nset(CPACK_DEBIAN_PACKAGE_HOMEPAGE \"https://github.com/civetweb/civetweb\")\nset(CPACK_DEBIAN_PACKAGE_DEPENDS \"${CPACK_PACKAGE_DEPENDS}\")\n\n# WiX Packaging\n# TODO: www.cmake.org/cmake/help/v3.0/module/CPackWIX.html\n\n# Finalize CPack settings\ninclude(CPack)\n"
        },
        {
          "name": "CREDITS.md",
          "type": "blob",
          "size": 4.4814453125,
          "content": "# Civetweb Contributors\n\n* Abhishek Lekshmanan\n* Abramo Bagnara\n* Adam Bailey\n* Adam Hunyadi\n* Adam Rowell\n* Alan Somers\n* Alberto Bignotti\n* Alex Kozlov\n* Alexander Kozhinov\n* AndreyArsov\n* Anton Te\n* beaver\n* bel2125\n* Ben M. Ward\n* Bernhard Lehner\n* BigJoe\n* Bjoern Petri\n* Braedy Kuzma\n* Breno Ramalho Lemes\n* brett\n* Brian Lambert\n* Brian Spratke\n* cdbishop\n* celeron55\n* Charles Olivi\n* Chen Yufei\n* Chris Han\n* Chris Jones\n* Chris Rehn\n* Christian Mauderer\n* Christopher Friedt\n* Christopher Galas\n* cjh\n* Colden Cullen\n* Colm Sloan\n* Cortronic\n* Daniel Oaks\n* Daniel Rempel\n* Danny Al-Gaaf\n* Dave Brower\n* daveelton\n* David Arnold\n* David Korczynski\n* David Loffredo\n* DavidKorczynski\n* dennis\n* Dialga\n* DL6ER\n* Domenico Di Iorio\n* dprandle\n* Drew Wells\n* drew-wells\n* duong2179\n* ehlertjd\n* Elan P. Kugelmass\n* Eric Tsau\n* Erick Vieyra\n* Erik Beran\n* Erik Partridge\n* eugene\n* extergnoto\n* F-Secure Corporation\n* Fabrice Fontaine\n* feneuilflo\n* Fernando G. Aranda\n* forworldm\n* Frank Hilliger\n* gajanak\n* Gerard Marull-Paretas\n* Girish Joshi\n* goodmenzy\n* Grahack\n* Gregor Jasny\n* grenclave\n* grunk\n* guangqing.chen\n* Guilherme Amadio\n* Gustavo Romero\n* Gábor Csárdi\n* hansipie\n* HariKamath Kamath\n* Henry Chang\n* Herumb Shandilya\n* Herve Codina\n* huangminhang\n* Iain Morton\n* ImgBotApp\n* Ivan Dlugos\n* IZI\n* Jack\n* Jacob Repp\n* Jacob Skillin\n* Jan Kowalewski\n* Jan Pohanka\n* Jan Willem Janssen\n* Jens Wallgren\n* Jeremy Lin\n* Jesse Williamson\n* Jim Evans\n* jmc-\n* Joakim L. Gilje\n* Jochen Scheib\n* Joe Mucchiello\n* Joel Gallant\n* Johan De Taeye\n* John Faith\n* Jonas Hahnfeld\n* Jonas Rembser\n* Jordan\n* Jordan Shelley\n* Joshua Boyd\n* Joshua D. Boyd\n* Justin Standring\n* k-mds\n* kakwa\n* kalphamon\n* Karol Mroz\n* Keith Holman\n* Keith Kyzivat\n* Ken Walters\n* Kevin Branigan\n* Kevin Wojniak\n* Khem Raj\n* Kimmo Mustonen\n* Kjeld Flarup\n* krpano\n* Krzysztof Kozlowski\n* Lammert Bies\n* Lars Immisch\n* Lawrence\n* Li Peng\n* Lianghui\n* Lorenzo Canepa\n* Luka Rahne\n* Lukas Martanovic\n* Maarten Fremouw\n* makrsmark\n* marco\n* Mario Trangoni\n* Mark Lakata\n* Martin Gaida\n* Mateusz Gralka\n* Matt Clarkson\n* Mellnik\n* MHU-valantic\n* Mike Crowe\n* mingodad\n* Morgan McGuire\n* mrdvlpr.xnu\n* Nat!\n* Neil Jensen\n* newsoft\n* nfrmtkr\n* Nick Hildebrant\n* Nigel Stewart\n* nihildeb\n* Niklas Fiekas\n* No Face Press\n* Olliver Schinagl\n* palortoff\n* Patrick Drechsler\n* Patrick Trinkle\n* Paul Sokolovsky\n* Paulo Brizolara\n* pavel.pimenov\n* PavelVozenilek\n* Perttu Ahola\n* Peter Foerster\n* Peter Huber\n* Philipp Friedenberger\n* Philipp Hasper\n* Pieter Cardoen\n* Piotr Zierhoffer\n* pkvamme\n* Ponnuvel Palaniyappan\n* qinch\n* qinchao\n* r-j-s\n* Radoslaw Zarzynski\n* Rajdeep Roy Chowdhury\n* Red54\n* Retallack Mark mark.retallack\n* Richard Screene\n* Rimas Misevi-ìius\n* Rinat Dobrokhotov\n* ryankopf\n* Sage Weil\n* Sangwhan Moon\n* Saumitra Vikram\n* sbruceheart\n* Scott Fennell\n* Scott Nations\n* Sebastien Jodogne\n* Sergey Linev\n* sgmesservey\n* shantanugadgil\n* Sherwyn Sen\n* shreyajaggi8\n* Silas Parker\n* silverches\n* Simon Hailes\n* slidertom\n* SpaceIm\n* SpaceLord\n* Stefan Codrescu\n* sunfch\n* suzukibitman\n* Símal Rasmussen\n* Tamotsu Kanoh\n* thewaterymoon\n* Thiago Macedo\n* THILMANT, Bernard\n* Thomas Davis\n* Thomas Klausner\n* Thorsten Horstmann\n* Tim Gates\n* Tim Hudson\n* tnoho\n* Tom Deblauwe\n* Tomas Andrle\n* Tomasz Gorochowik\n* Toni Wilk\n* Torben Jonas\n* Uilian Ries\n* Ulrich Hertlein\n* videofan3d\n* Walt Steverson\n* wangli28\n* webxer\n* William Greathouse\n* Wolfram Rösler\n* xeoshow\n* xtne6f\n* Yehuda Sadeh\n* Yury Z\n* zhen.wang\n* Zopolis4\n\nand others.\n\n# Mongoose Contributors\nCivetWeb is based on the Mongoose code.  The following users contributed to the original Mongoose release between 2010 and 2013.  This list was generated from the Mongoose GIT logs.  It does not contain contributions from the Mongoose mailing list.  There is no record for contributors prior to 2010.\n\n* Sergey Lyubka\n* Arnout Vandecappelle (Essensium/Mind)\n* Benoît Amiaux\n* Cody Hanson\n* Colin Leitner\n* Daniel Oaks\n* Eric Bakan\n* Erik Oomen\n* Filipp Kovalev\n* Ger Hobbelt\n* Hendrik Polczynski\n* Henrique Mendonça\n* Igor Okulist\n* Jay\n* Joe Mucchiello\n* John Safranek\n* Joseph Mainwaring\n* José Miguel Gonçalves\n* KIU Shueng Chuan\n* Katerina Blinova\n* Konstantin Sorokin\n* Marin Atanasov Nikolov\n* Matt Healy\n* Miguel Morales\n* Mikhail Nikalyukin\n* MikieMorales\n* Mitch Hendrickson\n* Nigel Stewart\n* Pavel\n* Pavel Khlebovich\n* Rogerz Zhang\n* Sebastian Reinhard\n* Stefan Doehla\n* Thileepan\n* abadc0de\n* arvidn\n* bick\n* ff.feng\n* jmucchiello\n* jwang\n* lsm\n* migal\n* mlamb\n* nullable.type\n* shantanugadgil\n* tayS\n* test\n* valenok\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.490234375,
          "content": "# ---------------------------------------------------\r\n# Build Stage\r\n# ---------------------------------------------------\r\n\r\n# Use Alpine Linux 3.18 as the base image for the build stage\r\nFROM alpine:3.18 AS build\r\n\r\n# Update package list and install build dependencies\r\nRUN apk update && \\\r\n    apk add --no-cache \\\r\n    build-base zlib-dev\r\n\r\n# Set the working directory inside the container\r\nWORKDIR /civetweb\r\n\r\n# Copy source code and other necessary files into the container\r\nCOPY src ./src/\r\nCOPY include ./include/\r\nCOPY Makefile ./\r\nCOPY resources ./resources/\r\nCOPY *.md ./\r\n\r\n# Build Civetweb with all features and install it into /app directory\r\nRUN make build && \\\r\n    make WITH_ALL=1 && \\\r\n    make install PREFIX=/app\r\n\r\n# ---------------------------------------------------\r\n# Image Stage\r\n# ---------------------------------------------------\r\n\r\n# Use Alpine Linux 3.18 as the base image for the final stage\r\nFROM alpine:3.18\r\n\r\n# Update package list and install runtime dependencies\r\nRUN apk update && \\\r\n    apk add --no-cache \\\r\n    libstdc++ zlib\r\n\r\n# Create a non-root user and group for running Civetweb\r\nRUN addgroup -S civetweb && adduser -S civetweb -G civetweb\r\n\r\n# Switch to the non-root user\r\nUSER civetweb\r\n\r\n# Copy the built application from the build stage into this stage\r\nCOPY --chown=civetweb:civetweb --from=build /app/ /app/\r\n\r\n# Expose port 8080 for the application\r\nEXPOSE 8080\r\n\r\n# Set the entry point for the container\r\nENTRYPOINT  [ \"/app/bin/civetweb\", \"/app/etc/civetweb.conf\" ]\r\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 9.90234375,
          "content": "ALL LICENSES\n=====\n\nThis document includes several copyright licenses for different\naspects of the software.  Not all licenses may apply depending\non the features chosen.\n\n\nCivetweb License\n-----\n\n### Included with all features.\n\n> Copyright (c) 2013-2021 The CivetWeb developers ([CREDITS.md](https://github.com/civetweb/civetweb/blob/master/CREDITS.md))\n>\n> Copyright (c) 2004-2013 Sergey Lyubka\n>\n> Copyright (c) 2013 No Face Press, LLC (Thomas Davis)\n>\n> Copyright (c) 2013 F-Secure Corporation\n>\n> Permission is hereby granted, free of charge, to any person obtaining a copy\n> of this software and associated documentation files (the \"Software\"), to deal\n> in the Software without restriction, including without limitation the rights\n> to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n> copies of the Software, and to permit persons to whom the Software is\n> furnished to do so, subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be included in\n> all copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n> FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n> AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n> LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n> OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n> THE SOFTWARE.\n\n\nLua License\n------\n\n### Included only if built with Lua support.\n\nhttp://www.lua.org/license.html\n\n> Copyright (C) 1994-2020 Lua.org, PUC-Rio.\n>\n> Permission is hereby granted, free of charge, to any person obtaining a copy\n> of this software and associated documentation files (the \"Software\"), to deal\n> in the Software without restriction, including without limitation the rights\n> to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n> copies of the Software, and to permit persons to whom the Software is\n> furnished to do so, subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be included in\n> all copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n> FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n> AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n> LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n> OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n> THE SOFTWARE.\n\n\nAdditional components Copyright (C) Lua.org, PUC-Rio, with MIT license: \nhttp://www.inf.puc-rio.br/~roberto/struct/\n\n\nSQLite3 License\n------\n\n### Included only if built with Lua and SQLite support.\n\nhttp://www.sqlite.org/copyright.html\n\n> 2001-09-15\n>\n> The author disclaims copyright to this source code.  In place of\n> a legal notice, here is a blessing:\n>\n>    May you do good and not evil.\n>    May you find forgiveness for yourself and forgive others.\n>    May you share freely, never taking more than you give.\n\n\nlsqlite3 License\n------\n\n### Included only if built with Lua and SQLite support.\n\n> Copyright (C) 2002-2016 Tiago Dionizio, Doug Currie\n> All rights reserved.\n> Author    : Tiago Dionizio <tiago.dionizio@ist.utl.pt>\n> Author    : Doug Currie <doug.currie@alum.mit.edu>\n> Library   : lsqlite3 - an SQLite 3 database binding for Lua 5\n>\n> Permission is hereby granted, free of charge, to any person obtaining a copy\n> of this software and associated documentation files (the \"Software\"), to deal\n> in the Software without restriction, including without limitation the rights\n> to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n> copies of the Software, and to permit persons to whom the Software is\n> furnished to do so, subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be included in\n> all copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n> FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n> AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n> LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n> OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n> THE SOFTWARE.\n\n\nLua File System License\n------\n\n### Included only if built with Lua support.\n\nhttps://github.com/keplerproject/luafilesystem/blob/master/LICENSE\n\n> Copyright © 2003-2020 Kepler Project.\n>\n> Permission is hereby granted, free of charge, to any person\n> obtaining a copy of this software and associated documentation\n> files (the \"Software\"), to deal in the Software without\n> restriction, including without limitation the rights to use, copy,\n> modify, merge, publish, distribute, sublicense, and/or sell copies\n> of the Software, and to permit persons to whom the Software is\n> furnished to do so, subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be\n> included in all copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n> EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n> MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n> NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n> BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n> ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n> CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n> SOFTWARE.\n\n\nLuaXML License\n------\n\n### Included only if built with Lua and LuaXML support.\n\nVersion 1.8.0 (Lua 5.2), 2013-06-10 by Gerald Franz, eludi.net\n\nModified and extended 2015 by Bernhard Nortmann, https://github.com/n1tehawk/LuaXML – version 2.0.x, compatible with Lua 5.1 to 5.3 and LuaJIT.\n\n\n> LuaXML License\n>\n> LuaXml is licensed under the terms of the MIT license reproduced below,\n> the same as Lua itself. This means that LuaXml is free software and can be\n> used for both academic and commercial purposes at absolutely no cost.\n>\n> Copyright (C) 2007-2013 Gerald Franz, eludi.net\n>\n> Permission is hereby granted, free of charge, to any person obtaining a copy\n> of this software and associated documentation files (the \"Software\"), to deal\n> in the Software without restriction, including without limitation the rights\n> to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n> copies of the Software, and to permit persons to whom the Software is\n> furnished to do so, subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be included in\n> all copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n> FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n> AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n> LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n> OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n> THE SOFTWARE.\n\n\nDuktape License\n------\n\n### Included only if built with Duktape support.\n\nhttps://github.com/svaarala/duktape/blob/master/LICENSE.txt\n\n> ===============\n> Duktape license\n> ===============\n>\n> (http://opensource.org/licenses/MIT)\n>\n> Copyright (c) 2013-2017 by Duktape authors (see AUTHORS.rst)\n>\n> Permission is hereby granted, free of charge, to any person obtaining a copy\n> of this software and associated documentation files (the \"Software\"), to deal\n> in the Software without restriction, including without limitation the rights\n> to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n> copies of the Software, and to permit persons to whom the Software is\n> furnished to do so, subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be included in\n> all copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n> FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n> AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n> LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n> OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n> THE SOFTWARE.\n\n\n\nzlib License\n------\n\n### Included only if built with zlib support.\n\nhttps://www.zlib.net/zlib_license.html\n\n> zlib.h -- interface of the 'zlib' general purpose compression library\n> version 1.2.11, January 15th, 2017\n>\n> Copyright (C) 1995-2017 Jean-loup Gailly and Mark Adler\n>\n> This software is provided 'as-is', without any express or implied\n> warranty.  In no event will the authors be held liable for any damages\n> arising from the use of this software.\n>\n> Permission is granted to anyone to use this software for any purpose,\n> including commercial applications, and to alter it and redistribute it\n> freely, subject to the following restrictions:\n>\n> 1. The origin of this software must not be misrepresented; you must not\n>    claim that you wrote the original software. If you use this software\n>    in a product, an acknowledgment in the product documentation would be\n>    appreciated but is not required.\n> 2. Altered source versions must be plainly marked as such, and must not be\n>    misrepresented as being the original software.\n> 3. This notice may not be removed or altered from any source distribution.\n>\n> Jean-loup Gailly        Mark Adler\n> jloup@gzip.org          madler@alumni.caltech.edu\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 13.04296875,
          "content": "#\n# Copyright (c) 2013 No Face Press, LLC\n# License http://opensource.org/licenses/mit-license.php MIT License\n#\n\n#\n# For help try, \"make help\"\n#\n\ninclude resources/Makefile.in-os\n\nCPROG = civetweb\n#CXXPROG = civetweb\nUNIT_TEST_PROG = civetweb_test\n\nBUILD_DIR = out\n\n# Installation directories by convention\n# http://www.gnu.org/prep/standards/html_node/Directory-Variables.html\nPREFIX ?= /usr/local\nEXEC_PREFIX = $(PREFIX)\nBINDIR = $(EXEC_PREFIX)/bin\nDATAROOTDIR = $(PREFIX)/share\nDOCDIR = $(DATAROOTDIR)/doc/$(CPROG)\nSYSCONFDIR ?= $(PREFIX)/etc\nHTMLDIR = $(DOCDIR)\nINCLUDEDIR = $(DESTDIR)$(PREFIX)/include\nLIBDIR = $(DESTDIR)$(EXEC_PREFIX)/lib\nPID_FILE ?= /var/run/$(CPROG).pid\n\n# build tools\nMKDIR = mkdir -p\nRMF = rm -f\nRMRF = rm -rf\n\n# desired configuration of the document root\n# never assume that the document_root actually\n# exists on the build machine.  When building\n# a chroot, PREFIX if just a directory which\n# later becomes /.\nDOCUMENT_ROOT = $(HTMLDIR)\nPORTS = 8080\nUSE_STACK_SIZE ?= 102400\n\nBUILD_DIRS = $(BUILD_DIR) $(BUILD_DIR)/src $(BUILD_DIR)/resources\n\nLIB_SOURCES = src/civetweb.c\nLIB_INLINE  = src/*.inl\nAPP_SOURCES = src/main.c\nWINDOWS_RESOURCES = resources/res.rc\nUNIT_TEST_SOURCES = test/unit_test.c\nSOURCE_DIRS =\n\nOBJECTS = $(LIB_SOURCES:.c=.o) $(APP_SOURCES:.c=.o)\nHEADERS = include/civetweb.h\nBUILD_RESOURCES =\n\n# The unit tests include the source files directly to get visibility to the\n# static functions.  So we clear OBJECTS so that we don't try to build or link\n# with any external object.  Later if we find WITH_LUA=1, we'll add lua objects\n# to this variable so we can run lua-specific unit tests.\nifeq ($(MAKECMDGOALS), unit_test)\nOBJECTS =\nBUILD_DIRS += $(BUILD_DIR)/test\nendif\n\n# only set main compile options if none were chosen\nCFLAGS += -Wall -Wextra -Wshadow -Wformat-security -Winit-self -Wmissing-prototypes -D$(TARGET_OS) -Iinclude $(COPT) -DUSE_STACK_SIZE=$(USE_STACK_SIZE)\n\nifdef WITH_CFLAGS\n  CFLAGS += $(WITH_CFLAGS)\nendif\n\nLIBS =\nifneq ($(TARGET_OS), RTEMS)\nLIBS += -lpthread\nendif\nLIBS += -lm $(LOPT)\n\nifdef WITH_DEBUG\n  CFLAGS += -g -DDEBUG\nelse ifdef TEST_ASAN\n  CFLAGS += -g -fsanitize=address\n  CC = clang\n  CXX = clang++\nelse ifdef TEST_FUZZ\n  CFLAGS += -g -fsanitize=address,fuzzer,undefined -O0 -g -ggdb3 -fno-omit-frame-pointer -fsanitize-address-use-after-scope -fno-sanitize-recover=undefined\n  CC = clang\n  CXX = clang++\n  BUILD_DIRS += $(BUILD_DIR)/fuzztest\n  APP_SOURCES = fuzztest/fuzzmain.c\n  OBJECTS = $(LIB_SOURCES:.c=.o) $(APP_SOURCES:.c=.o)\n  CFLAGS += -DTEST_FUZZ$(TEST_FUZZ)\nelse\n  CFLAGS += -O2 -DNDEBUG\nendif\n\nifdef NO_SSL\n  CFLAGS += -DNO_SSL\nelse ifdef WITH_GNUTLS\n  CFLAGS += -DUSE_GNUTLS\n  LIBS += -lgnutls -lhogweed -lgmp -lnettle\nelse ifdef WITH_MBEDTLS\n  CFLAGS += -DUSE_MBEDTLS\n  LIBS += -lmbedcrypto -lmbedtls -lmbedx509\nelse ifdef WITH_OPENSSL_API_1_0\n  CFLAGS += -DOPENSSL_API_1_0\nelse ifdef WITH_OPENSSL_API_1_1\n  CFLAGS += -DOPENSSL_API_1_1\nelse ifdef WITH_OPENSSL_API_3_0\n  CFLAGS += -DOPENSSL_API_3_0\nelse\n  #Use OpenSSL 1.1 API version as default\n  CFLAGS += -DOPENSSL_API_1_1\nendif\nifdef NO_CGI\n  CFLAGS += -DNO_CGI\nendif\nifdef NO_CACHING\n  CFLAGS += -DNO_CACHING\nendif\n\n\nifdef WITH_CPP\n  OBJECTS += src/CivetServer.o\n  HEADERS += include/CivetServer.h\n  LCC = $(CXX)\nelse\n  LCC = $(CC)\nendif\n\n\nifdef WITH_ALL\n  WITH_WEBSOCKET = 1\n  WITH_IPV6 = 1\n  WITH_LUA = 1\n  WITH_DUKTAPE = 1\n  WITH_SERVER_STATS = 1\n  WITH_ZLIB = 1\n  WITH_HTTP2 = 1\n  WITH_X_DOM_SOCKET = 1\n  WITH_EXPERIMENTAL = 1\n  #WITH_CPP is not defined, ALL means only real features, not wrappers\nendif\n\n# Use Lua?\nifdef WITH_LUA_VERSION\n  WITH_LUA = 1\nendif\n\nifdef WITH_LUA_SHARED\n  WITH_LUA = 1\nendif\n\nifdef WITH_LUAJIT_SHARED\n  WITH_LUA_SHARED = 1\n  WITH_LUA = 1\n  WITH_LUA_VERSION = 501\nendif\n\nifdef WITH_LUA\n  include resources/Makefile.in-lua\nendif\n\n# Use Duktape?\nifdef WITH_SSJS\n  WITH_DUKTAPE = 1\nendif\n\nifdef WITH_DUKTAPE_VERSION\n  WITH_DUKTAPE = 1\nendif\n\nifdef WITH_DUKTAPE_SHARED\n  WITH_DUKTAPE = 1\nendif\n\nifdef WITH_DUKTAPE\n  include resources/Makefile.in-duktape\nendif\n\n# Use zlib?\nifdef WITH_COMPRESSION\n  WITH_ZLIB = 1\nendif\n\nifdef WITH_ZLIB\nifneq ($(TARGET_OS), RTEMS)\n  LIBS += -lz\nendif\n  CFLAGS += -DUSE_ZLIB\nendif\n\nifdef WITH_HTTP2\n  CFLAGS += -DUSE_HTTP2\nendif\n\n# Other features\nifdef WITH_EXPERIMENTAL\n  CFLAGS += -DMG_EXPERIMENTAL_INTERFACES\nendif\n\nifdef WITH_IPV6\n  CFLAGS += -DUSE_IPV6\nendif\n\nifdef WITH_WEBSOCKET\n  CFLAGS += -DUSE_WEBSOCKET\nendif\nifdef WITH_WEBSOCKETS\n  CFLAGS += -DUSE_WEBSOCKET\nendif\nifdef WITH_X_DOM_SOCKET\n  CFLAGS += -DUSE_X_DOM_SOCKET\nendif\nifdef WITH_X_DOM_SOCKETS\n  CFLAGS += -DUSE_X_DOM_SOCKET\nendif\n\nifdef WITH_SERVER_STAT\n  CFLAGS += -DUSE_SERVER_STATS\nendif\nifdef WITH_SERVER_STATS\n  CFLAGS += -DUSE_SERVER_STATS\nendif\n\nifdef WITH_DAEMONIZE\n  CFLAGS += -DDAEMONIZE -DPID_FILE=\\\"$(PID_FILE)\\\"\nendif\n\n# File names\nifdef CONFIG_FILE\n  CFLAGS += -DCONFIG_FILE=\\\"$(CONFIG_FILE)\\\"\nendif\n\nifdef CONFIG_FILE2\n  CFLAGS += -DCONFIG_FILE2=\\\"$(CONFIG_FILE2)\\\"\nendif\n\nifdef SSL_LIB\n  CFLAGS += -DSSL_LIB=\\\"$(SSL_LIB)\\\"\nendif\n\nifdef CRYPTO_LIB\n  CFLAGS += -DCRYPTO_LIB=\\\"$(CRYPTO_LIB)\\\"\nendif\n\nBUILD_DIRS += $(addprefix $(BUILD_DIR)/, $(SOURCE_DIRS))\nBUILD_OBJECTS = $(addprefix $(BUILD_DIR)/, $(OBJECTS))\nMAIN_OBJECTS = $(addprefix $(BUILD_DIR)/, $(APP_SOURCES:.c=.o))\nLIB_OBJECTS = $(filter-out $(MAIN_OBJECTS), $(BUILD_OBJECTS))\n\nifeq ($(TARGET_OS),LINUX)\n  LIBS += -lrt -ldl\n  CAN_INSTALL = 1\nendif\n\nifeq ($(TARGET_OS),WIN32)\n  MKDIR = mkdir\n  RMF = del /q\n  RMRF = rmdir /s /q\nendif\n\nifdef WITH_LUAJIT_SHARED\n  LIBS += -lluajit-5.1\nelse\nifdef WITH_LUA_SHARED\n  LIBS += $(LUA_SHARED_LIB_FLAG)\nendif\nendif\n\nifneq (, $(findstring mingw32, $(shell $(CC) -dumpmachine)))\n  BUILD_RESOURCES = $(BUILD_DIR)/$(WINDOWS_RESOURCES:.rc=.o)\n  LIBS += -lws2_32 -mwindows\n  SHARED_LIB = dll\nelse\n  SHARED_LIB = so\nendif\n\nall: build\n\nhelp:\n\t@echo \"make help                show this message\"\n\t@echo \"make build               compile\"\n\t@echo \"make install             install on the system\"\n\t@echo \"make clean               clean up the mess\"\n\t@echo \"make install-headers     install headers\"\n\t@echo \"make lib                 build a static library\"\n\t@echo \"make install-lib         install the static library\"\n\t@echo \"make slib                build a shared library\"\n\t@echo \"make install-slib        install the shared library\"\n\t@echo \"make unit_test           (obsolete - unit tests use cmake now)\"\n\t@echo \"\"\n\t@echo \" Make Options\"\n\t@echo \"   WITH_LUA=1            build with Lua support; include Lua as static library\"\n\t@echo \"   WITH_LUA_SHARED=1     build with Lua support; use dynamic linking to liblua5.2.so\"\n\t@echo \"   WITH_LUA_VERSION=502  build with Lua 5.2.x (501 for Lua 5.1.x to 503 for 5.3.x)\"\n\t@echo \"   WITH_DUKTAPE=1        build with Duktape support; include as static library\"\n\t@echo \"   WITH_DUKTAPE_SHARED=1 build with Duktape support; use libduktape1.3.so\"\n\t@echo \"   WITH_DUKTAPE_VERSION=108 build with Duktape 1.8.x\"\n\t@echo \"   WITH_DEBUG=1          build with GDB debug support\"\n\t@echo \"   WITH_IPV6=1           with IPV6 support\"\n\t@echo \"   WITH_WEBSOCKET=1      build with web socket support\"\n\t@echo \"   WITH_SERVER_STATS=1   build includes support for server statistics\"\n\t@echo \"   WITH_ZLIB=1           build includes support for on-the-fly compression using zlib\"\n\t@echo \"   WITH_CPP=1            build library with c++ classes\"\n\t@echo \"   WITH_EXPERIMENTAL=1   build with experimental features\"\n\t@echo \"   WITH_DAEMONIZE=1      build with daemonize.\"\n\t@echo \"   WITH_GNUTLS=1         build with GnuTLS support.\"\n\t@echo \"   WITH_MBEDTLS=1        build with mbedTLS support.\"\n\t@echo \"   WITH_OPENSSL_API_1_0=1  build with OpenSSL 1.0.x support.\"\n\t@echo \"   WITH_OPENSSL_API_1_1=1  build with OpenSSL 1.1.x support.\"\n\t@echo \"   WITH_OPENSSL_API_3_0=1  build with OpenSSL 3.0.x support.\"\n\t@echo \"   NO_SSL=1              build without SSL support. Build will not need libcrypto/libssl.\"\n\t@echo \"   NO_CGI=1              build without CGI support.\"\n\t@echo \"   NO_CACHING=1          disable caching. Send no-cache/no-store headers.\"\n\t@echo \"   PID_FILE=/path        PID file path of daemon.\"\n\t@echo \"   CONFIG_FILE=file      use 'file' as the config file\"\n\t@echo \"   CONFIG_FILE2=file     use 'file' as the backup config file\"\n\t@echo \"   DOCUMENT_ROOT=/path   document root override when installing\"\n\t@echo \"   PORTS=8080            listening ports override when installing\"\n\t@echo \"   SSL_LIB=libssl.so.0   use versioned SSL library\"\n\t@echo \"   CRYPTO_LIB=libcrypto.so.0 system versioned CRYPTO library\"\n\t@echo \"   PREFIX=/usr/local     sets the install directory\"\n\t@echo \"   COPT='-DNO_SSL'       method to insert compile flags\"\n\t@echo \"   LOPT='-lxxx'          method to link xxx library\"\n\t@echo \"\"\n\t@echo \" Compile Flags\"\n\t@echo \"   NDEBUG                strip off all debug code\"\n\t@echo \"   DEBUG                 build debug version (very noisy)\"\n\t@echo \"   NO_CGI                disable CGI support\"\n\t@echo \"   NO_SSL                disable SSL functionality\"\n\t@echo \"   NO_SSL_DL             link against system libssl library\"\n\t@echo \"   NO_FILES              do not serve files from a directory\"\n\t@echo \"   NO_CACHING            disable caching (useful for systems without timegm())\"\n\t@echo \"\"\n\t@echo \" Variables\"\n\t@echo \"   TARGET_OS='$(TARGET_OS)'\"\n\t@echo \"   CFLAGS='$(CFLAGS)'\"\n\t@echo \"   CXXFLAGS='$(CXXFLAGS)'\"\n\t@echo \"   LDFLAGS='$(LDFLAGS)'\"\n\t@echo \"   CC='$(CC)'\"\n\t@echo \"   CXX='$(CXX)'\"\n\t@echo \"\"\n\nbuild: $(CPROG) $(CXXPROG)\n\nunit_test: $(UNIT_TEST_PROG)\n\nifeq ($(CAN_INSTALL),1)\ninstall: $(HTMLDIR)/index.html $(SYSCONFDIR)/civetweb.conf\n\tinstall -D -m 644 -t \"$(DOCDIR)/\" *.md\n\tinstall -D -m 755 -t \"$(BINDIR)/\" $(CPROG)\n\ninstall-headers:\n\tinstall -D -m 644 -t \"$(INCLUDEDIR)/\" $(HEADERS)\n\ninstall-lib: lib$(CPROG).a\n\tinstall -D -m 644 -t \"$(LIBDIR)/\" $<\n\ninstall-slib: lib$(CPROG).so\n\t$(eval version=$(shell grep -w \"define CIVETWEB_VERSION\" include/civetweb.h | sed 's|.*VERSION \"\\(.*\\)\"|\\1|g'))\n\t$(eval major=$(shell echo $(version) | cut -d'.' -f1))\n\tinstall -D -m 755 -t \"$(LIBDIR)\" $<.$(version).0\n\tcd \"$(LIBDIR)\" && ln -sfv $<.$(version).0 $<.$(major)\n\tcd \"$(LIBDIR)\" && ln -sfv $<.$(version).0 $<\n\n# Install target we do not want to overwrite\n# as it may be an upgrade\n$(HTMLDIR)/index.html:\n\tinstall -D -m 644 resources/itworks.html $(HTMLDIR)/index.html\n\tinstall -D -m 644 -t \"$(HTMLDIR)/\" resources/civetweb_64x64.png\n\n# Install target we do not want to overwrite\n# as it may be an upgrade\n$(SYSCONFDIR)/civetweb.conf:\n\tinstall -D -m 644 -t \"$(SYSCONFDIR)/\" resources/civetweb.conf\n\t@sed -i 's#^document_root.*$$#document_root $(DOCUMENT_ROOT)#' \"$(SYSCONFDIR)/civetweb.conf\"\n\t@sed -i 's#^listening_ports.*$$#listening_ports $(PORTS)#' \"$(SYSCONFDIR)/civetweb.conf\"\n\nelse\ninstall:\n\t@echo \"Target not flagged for installation.  Use CAN_INSTALL=1 to force\"\n\t@echo \"As a precaution only LINUX targets are set as installable.\"\n\t@echo \"If the target is linux-like, use CAN_INSTALL=1 option.\"\nendif\n\nlib: lib$(CPROG).a\n\nslib: lib$(CPROG).$(SHARED_LIB)\n\nclean:\n\t$(RMRF) $(BUILD_DIR)\n\t$(eval version=$(shell grep -w \"define CIVETWEB_VERSION\" include/civetweb.h | sed 's|.*VERSION \"\\(.*\\)\"|\\1|g'))\n\t$(eval major=$(shell echo $(version) | cut -d'.' -f1))\n\t$(RMRF) lib$(CPROG).a\n\t$(RMRF) lib$(CPROG).so\n\t$(RMRF) lib$(CPROG).so.$(major)\n\t$(RMRF) lib$(CPROG).so.$(version).0\n\t$(RMRF) $(CPROG)\n\t$(RMF) $(UNIT_TEST_PROG)\n\ndistclean: clean\n\t@$(RMRF) VS2012/Debug VS2012/*/Debug  VS2012/*/*/Debug\n\t@$(RMRF) VS2012/Release VS2012/*/Release  VS2012/*/*/Release\n\t$(RMF) $(CPROG) lib$(CPROG).so lib$(CPROG).a *.dmg *.msi *.exe lib$(CPROG).dll lib$(CPROG).dll.a\n\t$(RMF) $(UNIT_TEST_PROG)\n\n$(LIB_OBJECTS): CFLAGS += -fPIC\n\nlib$(CPROG).a: CFLAGS += -fPIC\nlib$(CPROG).a: $(LIB_OBJECTS)\n\t@$(RMF) $@\n\tar cq $@ $(LIB_OBJECTS)\n\nlib$(CPROG).so: CFLAGS += -fPIC\nlib$(CPROG).so: $(LIB_OBJECTS)\n\t$(eval version=$(shell grep -w \"define CIVETWEB_VERSION\" include/civetweb.h | sed 's|.*VERSION \"\\(.*\\)\"|\\1|g'))\n\t$(eval major=$(shell echo $(version) | cut -d'.' -f1))\n\t$(LCC) -shared -Wl,-soname,$@.$(major) -o $@.$(version).0 $(CFLAGS) $(LDFLAGS) $(LIB_OBJECTS) $(LIBS)\n\tln -s -f $@.$(major) $@\n\tln -s -f $@.$(version).0 $@.$(major)\n\nlib$(CPROG).dll: CFLAGS += -fPIC\nlib$(CPROG).dll: $(LIB_OBJECTS)\n\t$(LCC) -shared -o $@ $(CFLAGS) $(LDFLAGS) $(LIB_OBJECTS) $(LIBS) -Wl,--out-implib,lib$(CPROG).dll.a\n\n$(UNIT_TEST_PROG): CFLAGS += -Isrc -g\n$(UNIT_TEST_PROG): $(LIB_SOURCES) $(LIB_INLINE) $(UNIT_TEST_SOURCES) $(BUILD_OBJECTS)\n\t$(LCC) -o $@ $(CFLAGS) $(LDFLAGS) $(UNIT_TEST_SOURCES) $(BUILD_OBJECTS) $(LIBS)\n\n$(CPROG): $(BUILD_OBJECTS) $(BUILD_RESOURCES)\n\t$(LCC) -o $@ $(CFLAGS) $(LDFLAGS) $(BUILD_OBJECTS) $(BUILD_RESOURCES) $(LIBS)\n\n$(CXXPROG): $(BUILD_OBJECTS)\n\t$(CXX) -o $@ $(CFLAGS) $(LDFLAGS) $(BUILD_OBJECTS) $(LIBS)\n\n$(BUILD_OBJECTS): $(BUILD_DIRS)\n\n$(BUILD_DIRS):\n\t-@$(MKDIR) \"$@\"\n\n$(BUILD_DIR)/%.o : %.cpp\n\t$(CXX) -c $(CFLAGS) $(CXXFLAGS) $< -o $@\n\n$(BUILD_DIR)/%.o : %.c\n\t$(CC) -c $(CFLAGS) $< -o $@\n\n$(BUILD_RESOURCES) : $(WINDOWS_RESOURCES)\n\twindres $(WINDRES_FLAGS) $< $@\n\n# This rules is used to keep the code formatted in a reasonable manor\n# For this to work astyle must be installed and in the path\n# http://sourceforge.net/projects/astyle\nindent:\n\tastyle --suffix=none --style=linux --indent=spaces=4 --lineend=linux  include/*.h src/*.c src/*.cpp src/*.inl examples/*/*.c  examples/*/*.cpp\n\n.PHONY: all help build install clean lib so\n"
        },
        {
          "name": "Makefile.osx",
          "type": "blob",
          "size": 1.43359375,
          "content": "# \n# Copyright (c) 2013 No Face Press, LLC\n# License http://opensource.org/licenses/mit-license.php MIT License\n#\n\n# For codesign to work in non-interactive mode, unlock login keychain:\n# security unlock ~/Library/Keychains/login.keychain\n# See e.g. http://lists.apple.com/archives/apple-cdsa/2008/Jan/msg00027.html\n\n# Civetweb features\nWITH_LUA = 1\n\nPACKAGE = Civetweb\nBUILD_DIR = out\n\nCFLAGS += -DUSE_COCOA -DENABLE_CREATE_CONFIG_FILE -mmacosx-version-min=10.6 -ObjC -arch x86_64 -arch arm64\nLDFLAGS += -framework Cocoa\n\nDMG_DIR = $(BUILD_DIR)/dmg\nCONTENTS_DIR = $(DMG_DIR)/$(PACKAGE).app/Contents\nRESOURCES_DIR = $(CONTENTS_DIR)/Resources\nOSXBIN_DIR = $(CONTENTS_DIR)/MacOS\n\nCIVETWEB_VERSION = $(shell perl -lne '/define\\s+CIVETWEB_VERSION\\s+\"(\\S+)\"/ and print $$1' include/civetweb.h)\nZIPFILENAME = $(PACKAGE)-$(CIVETWEB_VERSION).zip\n\ninclude Makefile\n\npackage: build\n\t@rm -rf $(DMG_DIR)\n\tinstall -d -m 755 $(CONTENTS_DIR) $(RESOURCES_DIR) $(OSXBIN_DIR)\n\tinstall -m 644 resources/Info.plist $(CONTENTS_DIR)/\n\tinstall -m 644 resources/civetweb_*.png resources/civetweb.icns $(RESOURCES_DIR)/\n\tinstall -m 644 resources/itworks.html $(OSXBIN_DIR)/index.html\n\tinstall -m 644 resources/civetweb_64x64.png $(OSXBIN_DIR)/\n\tinstall -m 755 $(CPROG) $(OSXBIN_DIR)/$(PACKAGE)\n\tinstall -m 644 docs/Installing.md $(DMG_DIR)/Installing.txt\n\tinstall -m 644 LICENSE.md $(DMG_DIR)/License.txt\n\trm -rf $(ZIPFILENAME)\n\tcd $(DMG_DIR) && zip -r ../../$(ZIPFILENAME) .\n\n.PHONY: package\n"
        },
        {
          "name": "Qt",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.787109375,
          "content": "![CivetWeb](/resources/civetweb_64x64.png \"CivetWeb\") CivetWeb\n=======\n\n**The official home of CivetWeb is on GitHub [https://github.com/civetweb/civetweb](https://github.com/civetweb/civetweb)**\n\n[![License](https://img.shields.io/badge/license-MIT-brightgreen.svg)](https://opensource.org/licenses/MIT)\n[![GitHub contributors](https://img.shields.io/github/contributors/civetweb/civetweb.svg)](https://github.com/civetweb/civetweb/blob/master/CREDITS.md)\n[![Stargazers](https://img.shields.io/github/stars/civetweb/civetweb.svg)](https://github.com/civetweb/civetweb/stargazers)\n[![Forks](https://img.shields.io/github/forks/civetweb/civetweb.svg)](https://github.com/civetweb/civetweb/network/members)\n[![Latest Release](https://img.shields.io/github/v/release/civetweb/civetweb.svg)](https://github.com/civetweb/civetweb/releases)\n\nContinuous integration for Linux and macOS ([Travis CI](https://app.travis-ci.com/github/civetweb/civetweb)):\n\n[![Travis Build Status](https://api.travis-ci.com/civetweb/civetweb.svg?branch=master)](https://app.travis-ci.com/github/civetweb/civetweb)\n\nContinuous integration for Windows ([AppVeyor](https://ci.appveyor.com/project/civetweb/civetweb)):\n\n[![Appveyor Build Status](https://ci.appveyor.com/api/projects/status/github/civetweb/civetweb?svg=true)](https://ci.appveyor.com/project/civetweb/civetweb/branch/master)\n\nTest coverage check ([coveralls](https://coveralls.io/github/civetweb/civetweb), [codecov](https://codecov.io/gh/civetweb/civetweb/branch/master)) (using different tools/settings):\n\n[![Coveralls](https://img.shields.io/coveralls/civetweb/civetweb.svg?maxAge=3600)]()\n[![Coverage Status](https://coveralls.io/repos/github/civetweb/civetweb/badge.svg?branch=master)](https://coveralls.io/github/civetweb/civetweb?branch=master)\n[![codecov](https://codecov.io/gh/civetweb/civetweb/branch/master/graph/badge.svg)](https://codecov.io/gh/civetweb/civetweb)\n\nStatic source code analysis ([Coverity](https://scan.coverity.com/projects/5784)): [![Coverity Scan Build Status](https://scan.coverity.com/projects/5784/badge.svg)](https://scan.coverity.com/projects/5784)\n\nCodeQL semantic code analysis: [![CodeQL](https://github.com/civetweb/civetweb/workflows/CodeQL/badge.svg)](https://github.com/civetweb/civetweb/actions/workflows/codeql-analysis.yml)\n\n\nProject Mission\n-----------------\n\nProject mission is to provide easy to use, powerful, C (C/C++) embeddable web server with optional CGI, SSL and Lua support.\nCivetWeb has a MIT license so you can innovate without restrictions.\n\nCivetWeb can be used by developers as a library, to add web server functionality to an existing application.\n\nIt can also be used by end users as a stand-alone web server running on a Windows or Linux PC. It is available as single executable, no installation is required.\n\n\nWhere to find the official version?\n-----------------------------------\n\nEnd users can download CivetWeb binaries / releases from here on GitHub [https://github.com/civetweb/civetweb/releases](https://github.com/civetweb/civetweb/releases) or SourceForge\n[https://sourceforge.net/projects/civetweb/](https://sourceforge.net/projects/civetweb/)\n\nDevelopers can contribute to CivetWeb via GitHub\n[https://github.com/civetweb/civetweb](https://github.com/civetweb/civetweb)\n\nDue to a [bug in Git for Windows V2.24](https://github.com/git-for-windows/git/issues/2435)\nCivetWeb must be used with an earlier or later version (see also [here](https://github.com/civetweb/civetweb/issues/812)).\n\nBugs and requests should be filed on GitHub\n[https://github.com/civetweb/civetweb/issues](https://github.com/civetweb/civetweb/issues)\n\nNew releases are announced on Google Groups\n[https://groups.google.com/d/forum/civetweb](https://groups.google.com/d/forum/civetweb)\n\nFormerly some support question and discussion threads have been at [Google groups](https://groups.google.com/d/forum/civetweb).\nRecent questions and discussions use [GitHub issues](https://github.com/civetweb/civetweb/issues).\n\nSource releases can be found on GitHub\n[https://github.com/civetweb/civetweb/releases](https://github.com/civetweb/civetweb/releases)\n\nA very brief overview can be found on GitHub Pages\n[https://civetweb.github.io/civetweb/](https://civetweb.github.io/civetweb/)\n\n\nQuick start documentation\n--------------------------\n\n- [docs/Installing.md](https://github.com/civetweb/civetweb/blob/master/docs/Installing.md) - Install Guide (for end users using pre-built binaries)\n- [docs/UserManual.md](https://github.com/civetweb/civetweb/blob/master/docs/UserManual.md) - End User Guide\n- [docs/Building.md](https://github.com/civetweb/civetweb/blob/master/docs/Building.md) - Building the Server (quick start guide)\n- [docs/Embedding.md](https://github.com/civetweb/civetweb/blob/master/docs/Embedding.md) - Embedding (how to add HTTP support to an existing application)\n- [docs/OpenSSL.md](https://github.com/civetweb/civetweb/blob/master/docs/OpenSSL.md) - Adding HTTPS (SSL/TLS) support using OpenSSL.\n- [docs/Docker.md](https://github.com/civetweb/civetweb/blob/master/docs/Docker.md) - Use CivetWeb in a Docker container.\n- [API documentation](https://github.com/civetweb/civetweb/tree/master/docs/api) - Additional documentation on the civetweb application programming interface ([civetweb.h](https://github.com/civetweb/civetweb/blob/master/include/civetweb.h)).\n- [RELEASE_NOTES.md](https://github.com/civetweb/civetweb/blob/master/RELEASE_NOTES.md) - Release Notes\n- [SECURITY.md](https://github.com/civetweb/civetweb/blob/master/SECURITY.md) - Security Policy\n- [LICENSE.md](https://github.com/civetweb/civetweb/blob/master/LICENSE.md) - Copyright License\n\n\nOverview\n--------\n\nCivetWeb keeps the balance between functionality and\nsimplicity by a carefully selected list of features:\n\n- Forked from [Mongoose](https://code.google.com/p/mongoose/) in 2013, before\n  it changed the licence from MIT to commercial + GPL. A lot of enhancements\n  have been added since then, see\n  [RELEASE_NOTES.md](https://github.com/civetweb/civetweb/blob/master/RELEASE_NOTES.md).\n- Maintains the liberal, permissive, commercial-friendly,\n  [MIT license](https://en.wikipedia.org/wiki/MIT_License)\n- Project is free from copy-left licenses, like GPL, because you should innovate without\n  restrictions.\n- Works on Windows, Mac, Linux, UNIX, IOS, Android, Buildroot, and many\n  other platforms.\n- Scripting and database support (CGI, Lua Server Pages, Server side Lua scripts, Lua SQLite database,\n  Server side JavaScript).\n  This provides a ready to go, powerful web development platform in a one\n  single-click executable with **no dependencies**. 0\n- Support for CGI, SSI, HTTP digest (MD5) authorization, WebSocket, WebDAV.\n- Experimental HTTP/2 support.\n- HTTPS (SSL/TLS) support using [OpenSSL](https://www.openssl.org/).\n- Optional support for authentication using client side X.509 certificates.\n- Resumed download, URL rewrite, file blacklist, IP-based ACL.\n- Can run as a Windows service or systemd service.\n- Download speed limit based on client subnet or URI pattern.\n- Simple and clean embedding API.\n- The source is in single file for drop in compilation.\n- Embedding examples included.\n- HTTP client capable of sending arbitrary HTTP/HTTPS requests.\n- Websocket client functionality available (WS/WSS).\n\n\n### Optionally included software\n\n[![Lua](/resources/lua-logo.jpg \"Lua Logo\")](https://lua.org)\n[![LuaFileSystem](/resources/luafilesystem-logo.jpg \"LuaFileSystem Logo\")](https://keplerproject.github.io/luafilesystem/)\n[![LuaSQLite3](/resources/luasqlite-logo.jpg \"LuaSQLite3 Logo\")](https://lua.sqlite.org/index.cgi/index)\n[![Sqlite3](/resources/sqlite3-logo.jpg \"Sqlite3 Logo\")](https://sqlite.org)\n[![LuaXML](/resources/luaxml-logo.jpg \"LuaXML Logo\")](https://github.com/n1tehawk/LuaXML)\n[![Duktape](/resources/duktape-logo.png \"Duktape Logo\")](https://duktape.org)\n\n\n### Optional dependencies\n\n[zlib](https://zlib.net)\n\n[OpenSSL](https://www.openssl.org/)\n\n[Mbed TLS](https://github.com/ARMmbed/mbedtls)\n\n[GNU TLS](https://gnutls.org)\n\n\nSupport\n-------\n\nThis project is very easy to install and use.\nPlease read the [documentation](https://github.com/civetweb/civetweb/blob/master/docs/)\nand have a look at the [examples](https://github.com/civetweb/civetweb/blob/master/examples/).\n\nRecent questions and discussions usually use [GitHub issues](https://github.com/civetweb/civetweb/issues).\nSome old information may be found on the [mailing list](https://groups.google.com/d/forum/civetweb), \nbut this information may be outdated.\n\nFeel free to create a GitHub issue for bugs, feature requests, questions, suggestions or if you want to share tips and tricks.\nWhen creating an issues for a bug, add enough description to reproduce the issue - at least add CivetWeb version and operating system.\nPlease see also the guidelines for [Contributions](https://github.com/civetweb/civetweb/blob/master/docs/Contribution.md) and the [Security Policy](https://github.com/civetweb/civetweb/blob/master/SECURITY.md)\n\nNote: We do not take any liability or warranty for any linked contents.  Visit these pages and try the community support suggestions at your own risk.\nAny link provided in this project (including source and documentation) is provided in the hope that this information will be helpful.\nHowever, we cannot accept any responsibility for any content on an external page.\n\n\nContributions\n-------------\n\nContributions are welcome provided all contributions carry the MIT license.\n\nDO NOT APPLY fixes copied from Mongoose to this project to prevent GPL tainting.\nSince 2013, CivetWeb and Mongoose have been developed independently.\nBy now the code base differs, so patches cannot be safely transferred in either direction.\n\nSome guidelines can be found in [docs/Contribution.md](https://github.com/civetweb/civetweb/blob/master/docs/Contribution.md).\n\n\nAuthors\n-------\n\nCivetWeb was forked from the last MIT version of Mongoose in August 2013.\nSince then, CivetWeb has seen many improvements from various authors\n(Copyright (c) 2013-2021 the CivetWeb developers, MIT license).\n\nA list of authors can be found in [CREDITS.md](https://github.com/civetweb/civetweb/blob/master/CREDITS.md).\n\nCivetWeb is based on the [Mongoose project](https://github.com/cesanta/mongoose). The original author of Mongoose was\nSergey Lyubka(2004-2013) who released it under the MIT license.\nHowever, on August 16, 2013,\n[Mongoose was relicensed to a dual GPL V2 + commercial license](https://groups.google.com/forum/#!topic/mongoose-users/aafbOnHonkI)\nand CiwetWeb was created by Thomas Davis (sunsetbrew) as \"the MIT fork of mongoose\".\nThe license change and CivetWeb fork was mentioned on the Mongoose\n[Wikipedia](https://en.wikipedia.org/wiki/Mongoose_(web_server))\npage as well, but it's getting deleted (and added again) there every\nnow and then.\n\nUsing the CivetWeb project ensures the MIT licenses terms are applied and\nGPL cannot be imposed on any of this code, as long as it is sourced from\nhere. This code will remain free with the MIT license protection.\n"
        },
        {
          "name": "RELEASE_NOTES.md",
          "type": "blob",
          "size": 23.55859375,
          "content": "Release Notes v1.17 (work in progress)\n===\n### Objectives: *to be defined*\n\nChanges\n-------\n\n- Update version number\n\n\nRelease Notes v1.16\n===\n### Objectives: *bug fixes, documentation, WebDAV*\n\nChanges\n-------\n\n- Enable IPv6 as default when using CMake\n- Define error codes for mg_start2, mg_start_domain2, mg_connect_client2\n- Fixes for OpenSSL 3.0 support\n- Add support for Mbed TLS v3.0.0\n- WebDAV should understand Windows File Explorer (experimental)\n- Accept HTTP basic authentication\n- FreeBSD support, including CI and tests\n- Make pattern matching function availible in the public interface\n- Make base64 encoding and decoding functions available\n- Various fixes for HTTP/2 support\n- Additional examples\n- Fixes and updates to existing examples\n- Fix spelling errors in code and documentation\n- Remove Conan support\n- Update version number\n\nNote: A precompiled 32-bit executables for Windows is no longer provided, but only a 64 bit version.\nThe source code itself still supports 32-bit platforms.\n\nKnown Issues\n-----\n\n- The WebDAV support when using the Windows Explorer as client has various limitations when renaming or moving files and folders.\n- In particular file names in non-latin characters may break when using WebDAV with the Windows Explorer.\n\n\nRelease Notes v1.15\n===\n### Objectives: *bug fixes, remove legacy interfaces*\n\nChanges\n-------\n\n- New configuration for URL decoding\n- Sanitize filenames in handle form\n- Example \"embedded_c.c\": Do not overwrite files (possible security issue) \n- Remove obsolete examples\n- Remove \"experimental\" label for some features\n- Remove MG_LEGACY_INTERFACE that have been declared obsolete in 2017 or earlier\n- Modifications to build scripts, required due to changes in the test environment\n- Unix domain socket support fixed\n- Fixes for NO_SSL_DL\n- Fixes for some warnings / static code analysis\n- Update version number\n\n\nRelease Notes v1.14\n===\n### Objectives: *mbedTLS, Lua API enhancements, log filtering*\n\nChanges\n-------\n\n- Change SSL default setting to use TLS 1.2 as minimum (set config if you need an earlier version)\n- Add local_uri_raw field (not sanitized URI) to request_info\n- Additional API functions and a callback after closing connections\n- Allow mbedTLS as OpenSSL alternative (basic functionality)\n- Add OpenSSL 3.0 support (OpenSSL 3.0 Alpha 13)\n- Support UNIX/Linux domain sockets\n- Fuzz tests and ossfuzz integration\n- Compression for websockets\n- Restructure some source files\n- Improve documentation\n- Fix HTTP range requests\n- Add some functions for Lua scripts/LSP\n- Build system specific fixes (CMake, MinGW)\n- Update 3rd party components (Lua, lfs, sqlite)\n- Allow Lua background script to use timers, format and filter logs\n- Remove WinCE code\n- Update version number\n\n\nRelease Notes v1.13\n===\n### Objectives: *Various updates and fixes, additional API functions*\n\nChanges\n-------\n\n- Add arguments for CGI interpreters\n- Support multiple CGi interpreters\n- Buffering HTTP response headers, including API functions mg_response_header_* in C and Lua\n- Additional C API functions\n- Fix some memory leaks\n- Extended use of atomic operations (e.g., for server stats)\n- Add fuzz tests\n- Set OpenSSL 1.1 API as default (from 1.0)\n- Add Lua 5.4 support and deprecate Lua 5.1\n- Provide additional Lua API functions\n- Fix Lua websocket memory leak when closing the server\n- Remove obsolete \"file in memory\" implementation\n- Improvements and fixes in documentation\n- Fixes from static source code analysis\n- Additional unit tests\n- Various small bug fixes\n- Experimental support for some HTTP2 features (not ready for production)\n- Experimental support for websocket compression\n- Remove legacy interfaces declared obsolete since more than 3 years\n- Update version number\n\n\nRelease Notes v1.12\n===\n### Objectives: *Multiple improvements and extensions in various areas, including compatibility, Lua scripting, documentation*\n\nChanges\n-------\n\n- Updates/improvements for LuaXML\n- Updates and tests for JSON for Lua\n- BoringSSL support\n- Add Remark: Do not use Git for Windows V2.24 (but <= V2.23 or >= V2.25)\n- Format configuration dialogs for Windows\n- Add option \"hide_tray\" to start without Windows systray icon\n- URI checking according to \"remove_dot_segments\" algorithm from RFC\n- Experimental support for a new server and client start API\n- Additional callbacks to initialize external SSL context\n- More cache control options for static files\n- Trace function for Lua server pages\n- Access to client certificate data for Lua pages\n- Allow to configure SOMAXCONN (max. number of waiting connections)\n- Include some build options for Zephyr\n- Support for flawed CGI interpreters returning only <LF> instead of <CR><LF>\n- Add NO_FILESYSTEM flag for (embedded) system without any file system\n- Several fixes for server side Lua scripts\n- Disable SSL renegotiation for new OpenSSL version\n- Allow to force TLSv1.3 (disable TLSv1.2)\n- Prefer pre-compressed *.gz file, if it already exists\n- Fix some #include statements for various compilers / OS / SDK versions\n- Support for Linux Standard Base (LSB)\n- Fixes to mg_get_*_info() API functions\n- Fix some bugs/deficiencies in examples and tests\n- Fix some static source code analysis warnings\n- Add Conan package build\n- Fix include for Lua pages in \"Kepler Syntax\"\n- Replace some uses of deprecated Linux and OpenSSL API functions\n- Improved documentation and examples\n- Fixes for timeout handling\n- Fixes for the request queue (rare loss of requests)\n- Client side SNI\n- Update version number\n\n\nRelease Notes v1.11\n===\n### Objectives: *Support multiple domains and certificates, support websocket ping-pong, on-the-fly compression, additional API functions*\n\nChanges\n-------\n\n- Add API function to send file body for C and Lua\n- Fix several warnings from different compilers and static code analyzers\n- Drop Symbian support from the code\n- Improve examples\n- Timeout for CGI scripts\n- Fix for requests using IPv6 addresses as hostname\n- Shared data for Lua scripts and Lua server pages\n- Add API function for 30x redirect\n- Script for Linux bash auto-completion\n- Add HTTP JSON C callback example\n- Add helper function for HTTP 200 OK response\n- Allow Kepler Syntax for Lua Server pages\n- Update duktape to 2.2.0 and Lua to 5.3.4\n- Optional support for on-the-fly compression (if zlib is available and USE_ZLIB is set)\n- Add method to replace mg\\_cry and log\\_access by own implementation\n- Fixes for IPv6 support\n- Add server support for websocket ping pong protocol\n- Fix misspellings in source code and documentation\n- Add error msg to http_error callback\n- Move unit test to a new directory\n- Remove remote\\_ip request\\_info member (it has been legacy since several versions)\n- Use gmtime_r instead of gmtime, if available\n- Add some functions to C++ wrapper\n- Support multiple domains with different certificate files (TLS server name identification, SNI)\n- Provide client peer certificate (X509) in mg\\_client\\_cert structure\n- Add new callback (get\\_external\\_ssl\\_ctx) to provide pre-initialized TLS context\n- Improve unit tests\n- Fix ssl init for HTTPS clients\n- Update version number\n\n\nRelease Notes v1.10\n===\n### Objectives: *OpenSSL 1.1 support, add server statistics and diagnostic data*\n\nChanges\n-------\n\n- Add missing `mg_` or `MG_` to symbols in civetweb.h. Symbols without will be removed a future version.\n- Add HTTPS server configuration example\n- Lua Pages: mg.include should support absolute, relative and virtual path types\n- Add API function for HTTP digest authentication\n- Improved interface documentation\n- Support parameters for Lua background scripts\n- Use new connection queue implementation (previously ALTERNATIVE\\_QUEUE) as default\n- Add USE\\_SERVER\\_STATS define, so the server collects statistics data\n- Convert system\\_info text output and all other diagnostic strings to JSON format\n- Add experimental function to query the connection status (may be dropped again)\n- Add document on proposed future interface changes (for comments)\n- Officially drop Symbian support\n- Ignore leading blank lines in multipart messages (for Android upload service)\n- Rewrite some functions, in particular request parsing\n- CORS preflight directly in the server, with additional config options\n- Solve some warnings from different static source code analysis tools\n- Collect server status data\n- Allow hostname in listening\\_ports\n- Make maximum request size configurable\n- Allow multiple Sec-Websocket-Protocol\n- Add configuration option to send additional headers\n- Add configuration option for Strict-Transport-Security\n- Mark \"file in memory\" feature is a candidate for deletion\n- Improve examples\n- Fix timeout error when sending larger files\n- Add mg\\_send\\_chunk interface function\n- Allow to separate server private key and certificate chain in two different files\n- Support for multipart requests without quotes (for some C# clients)\n- Initialize SSL in mg\\_init\\_library, so https client functions can be used when no server is running\n- Allow \"REPORT\" HTTP method for REST calls to scripts\n- Allow to compile civetweb.c with a C++ compiler\n- Lua: Remove internal length limits of encode/decode functions\n- Allow sub-resources of index script files\n- Add config parameter allow\\_index\\_script\\_resource the aforementioned feature\n- Remove deprecated \"uri\" member of the request from the interface\n- Improve documentation\n- Make auth domain check optional (configuration)\n- Update unit test framework to check 0.11.0 (C89/C90 compilers still need a patched version)\n- Limit depth of mg.include for Lua server pages\n- Additional unit tests\n- OpenSSL 1.1 support\n- Update version number\n\n\nRelease Notes v1.9.1\n===\n### Objectives: *Bug fix*\n\nChanges\n-------\n\n- Add \"open website\" button for pre-built Windows binaries\n- Fix for connections closed prematurely\n- Update to a new check unit test framework and remove patches required for previous version\n- Update version number\n\n\nRelease Notes v1.9\n===\n### Objectives: *Read SSI client certificate information, improve windows usability, use non-blocking sockets, bug fixes*\n\nChanges\n-------\n\n- Add library init/exit functions (call is now optional, but will be required in V1.10)\n- Windows: Show system information from the tray icon\n- Windows: Bring overlaid windows to top from the tray icon\n- Add Lua background script, running independent from server state\n- Move obsolete examples into separated directory\n- Change name of CMake generated C++ library to civetweb-cpp\n- Add option to set linger timeout\n- Update Duktape and Lua (third-party code)\n- Add continuous integration tests\n- Add API documentation\n- Limit recursions in .htpasswd files\n- Fix SCRIPT_NAME for CGI directory index files (index.php)\n- Use non-blocking sockets\n- stdint.h is now required and no longer optional\n- Rewrite connection close handling\n- Rewrite mg_fopen/mg_stat\n- Enhanced tray icon menu for Windows\n- Add subprotocol management for websocket connections\n- Partially rewrite timeout handling\n- Add option keep_alive_timeout_ms\n- Improve support for absolute URIs\n- Allow some additional compiler checks (higher warning level)\n- Add option for case sensitive file names for Windows\n- Short notation for listening_ports option when using IPv4 and IPv6 ports\n- Make usage of Linux sendfile configurable\n- Optimize build matrix for Travis CI\n- Retry failing TLS/HTTPS read/write operations\n- Read client certificate information\n- Do not tolerate URIs with invalid characters\n- Fix mg_get_cookie to ignore substrings\n- Fix memory leak in form handling\n- Fix bug in timer logic (for Lua Websockets)\n- Updated version number\n\n\nRelease Notes v1.8\n===\n### Objectives: *CMake integration and continuous integration tests, Support client certificates, bug fixes*\n\nChanges\n-------\n\n- Replace mg_upload by mg_handle_form_request\n- CGI-scripts must receive EOF if all POST data is read\n- Add API function to handle all kinds of HTML form data\n- Do not allow short file names in Windows\n- Callback when a new thread is initialized\n- Support for short lived certificates\n- Add NO_CACHING compile option\n- Update Visual Studio project files to VS2015; rename directory VS2012 to VS\n- Sec-Wesocket-Protocol must only return one protocol\n- Mark some examples and tests as obsolete\n- Remove no longer maintained test utils\n- Add some default MIME types and the mg_send_mime_file API function.\n- Client API using SSL certificates\n- Send \"Cache-Control\" headers\n- Add alternative to mg_upload\n- Additional configuration options\n- Fix memory leaks\n- Add API function to check available features\n- Add new interface to get listening ports\n- Add websocket client interface and encode websocket data with a simple random number\n- Support SSL client certificates\n- Add configuration options for SSL client certificates\n- Stand-alone server: Add command line option -I to display information about the system\n- Redirect stderr of CGI process to error log\n- Support absolute URI; split uri in mg_request_info to request_uri and local_uri\n- Some source code refactoring, to improve maintainability\n- Use recursive mutex for Linux\n- Allow CGI environment to grow dynamically\n- Support build for Lua 5.1 (including LuaJIT), Lua 5.2 and Lua 5.3\n- Improve examples and documentation\n- Build option CIVETWEB_SERVE_NO_FILES to disable serving static files\n- Add Server side JavaScript support (Duktape library)\n- Created a \"civetweb\" organization at GitHub.\n- Repository moved from https://github.com/bel2125/civetweb to https://github.com/civetweb/civetweb\n- Improved continuous integration\n- CMake support, continuous integration with Travis CI and Appveyor\n- Adapt/port unit tests to CMake/Travis/Appveyor\n- Bug fixes, including issues from static code analysis\n- Add status badges to the GitHub project main page\n- Updated version number\n\n\nRelease Notes v1.7\n===\n### Objectives: *Examples, documentation, additional API functions, some functions rewritten, bug fixes and updates*\n\nChanges\n-------\n\n- Format source with clang_format\n- Use function 'sendfile' for Linux\n- Fix for CRAMFS in Linux\n- Fix for file modification times in Windows\n- Use SO_EXCLUSIVEADDRUSE instead of SO_REUSEADDR for Windows\n- Rewrite push/pull functions\n- Allow to use Lua as shared objects (WITH_LUA_SHARED)\n- Fixes for many warnings\n- URI specific callbacks and different timeouts for websockets\n- Add chunked transfer support\n- Update LuaFileSystem\n- Update Lua to 5.2.4\n- Fix build for MinGW-x64, TDM-GCC and clang\n- Update SQLite to 3.8.10.2\n- Fix CGI variables SCRIPT_NAME and PATH_TRANSLATED\n- Set TCP_USER_TIMEOUT to deal faster with broken connections\n- Add a Lua form handling example\n- Return more differentiated HTTP error codes\n- Add log_access callback\n- Rewrite and comment request handling function\n- Specify in detail and document return values of callback functions\n- Set names for all threads (unless NO_THREAD_NAME is defined)\n- New API functions for TCP/HTTP clients\n- Fix upload of huge files\n- Allow multiple SSL instances within one application\n- Improve API and user documentation\n- Allow to choose between static and dynamic Lua library\n- Improve unit test\n- Use temporary file name for partially uploaded files\n- Additional API functions exported to C++\n- Add a websocket client example\n- Add a websocket client API\n- Update websocket example\n- Make content length available in request_info\n- New API functions: access context, callback for create/delete, access user data\n- Upgraded Lua from 5.2.2 to 5.2.3 and finally 5.2.4\n- Integrate LuaXML (for testing purposes)\n- Fix compiler warnings\n- Updated version number\n\n\nRelease Notes v1.6\n===\n### Objectives: *Enhance Lua support, configuration dialog for windows, new examples, bug fixes and updates*\n\nChanges\n-------\n\n- Add examples of Lua pages, scripts and websockets to the test directory (bel)\n- Add dialog to change htpasswd files for the Windows standalone server (bel)\n- Fix compiler warnings and warnings from static code analysis (Danny Al-Gaaf, jmc-, Thomas, bel, ...)\n- Add new unit tests (bel)\n- Support includes in htpasswd files (bel)\n- Add a basic option check for the standalone executable (bel)\n- Support user defined error pages (bel)\n- Method to get POST request parameters via C++ interface (bel)\n- Re-Add unit tests for Linux and Windows (jmc-, bel)\n- Allow to specify title and tray icon for the Windows standalone server (bel)\n- Fix minor memory leaks (bel)\n- Redirect all memory allocation/deallocation through mg functions which may be overwritten (bel)\n- Support Cross-Origin Resource Sharing (CORS) for static files and scripts (bel)\n- Win32: Replace dll.def file by export macros in civetweb.h (CSTAJ)\n- Base64 encode and decode functions for Lua (bel)\n- Support pre-loaded files for the Lua environment (bel)\n- Server should check the nonce for http digest access authentication (bel)\n- Hide read-only flag in file dialogs opened by the Edit Settings dialog for the Windows executable (bel)\n- Add all functions to dll.def, that are in the header (bel)\n- Added Lua extensions: send_file, get_var, get_mime_type, get_cookie, url_decode, url_encode (bel)\n- mg_set_request_handler() mod to use pattern (bel, Patch from Toni Wilk)\n- Solved, tested and documented SSL support for Windows (bel)\n- Fixed: select for Linux needs the nfds parameter set correctly (bel)\n- Add methods for returning the ports civetweb is listening on (keithel)\n- Fixes for Lua Server Pages, as described within the google groups thread. (bel)\n- Added support for plain Lua Scripts, and an example script. (bel)\n- A completely new, and more illustrative websocket example for C. (bel)\n- Websocket for Lua (bel)\n- An optional websocket_root directory, including URL rewriting (bel)\n- Update of SQLite3 to 3.8.1. (bel)\n- Add \"date\" header field to replies, according to the requirements of RFC 2616 (the HTTP standard), Section 14.18 (bel)\n- Fix websocket long pull (celeron55)\n- Updated API documentation (Alex Kozlov)\n- Fixed Posix locking functions for Windows (bel2125)\n- Updated version number\n\n\nRelease Notes v1.5\n===\n### Objectives: *Bug fixes and updates, repository restoration*\n\nChanges\n-------\n\n- Corrected bad mask flag/opcode passing to websocket callback (William Greathouse)\n- Moved CIVETWEB_VERSION define into civetweb.h\n- Added new simple zip deployment build for Windows.\n- Removed windows install package build.\n- Fixes page violation in mod_lua.inl (apkbox)\n- Use C style comments to enable compiling most of civetweb with -ansi. (F-Secure Corporation)\n- Allow directories with non ASCII characters in Windows in UTF-8 encoded (bel2125)\n- Added Lua File System support (bel2125)\n- Added mongoose history back in repository thanks to (Paul Sokolovsky)\n- Fixed keep alive (bel2125)\n- Updated of MIME types (bel2125)\n- Updated lsqlite (bel2125)\n- Fixed master thread priority (bel2125)\n- Fixed IPV6 defines under Windowe (grenclave)\n- Fixed potential dead lock in connection_close() (Morgan McGuire)\n- Added WebSocket example using asynchronous server messages (William Greathouse)\n- Fixed the getcwd() warning (William Greathouse)\n- Implemented the connection_close() callback (William Greathouse)\n- Fixed support URL's in civetweb.c (Daniel Oaks)\n- Allow port number to be zero to use a random free port (F-Secure Corporation)\n- Wait for threads to finish when stopping for a clean shutdown (F-Secure Corporation)\n- More static analysis fixes against Coverity tool (F-Secure Corporation)\n- Travis automated build testing support added (Daniel Oaks)\n- Updated version numbers.\n- Added contributor credits file.\n\n\nRelease Notes v1.4\n===\n### Objectives: *New URI handler interface, feature enhancements, C++ extensions*\nThe main idea behind this release is to bring about API consistency. All changes\nare backward compatible and have been kept to a minimum.\n\nChanges\n-------\n\n- Added mg_set_request_handler() which provides a URI mapping for callbacks.\n   This is a new alternative to overriding callbacks.begin_request.\n- Externalized mg_url_encode()\n- Externalized mg_strncasecmp() for utiliy\n- Added CivetServer::getParam methods\n- Added CivetServer::urlDecode methods\n- Added CivetServer::urlEncode methods\n- Dealt with compiler warnings and some static analysis hits.\n- Added mg_get_var2() to parse repeated query variables\n- Externalized logging function cry() as mg_cry()\n- Added CivetServer::getCookie method (Hariprasad Kamath)\n- Added CivetServer::getHeader method (Hariprasad Kamath)\n- Added new basic C embedding example\n- Conformed source files to UNIX line endings for consistency.\n- Unified the coding style to improve reability.\n\n\nRelease Notes v1.3\n===\n### Objectives: *Buildroot Integration*\n\nChanges\n-------\n\n- Made option to put initial HTMLDIR in a different place\n- Validated build without SQLITE3 large file support\n- Updated documentation\n- Updated Buildroot config example\n\n\nRelease Notes v1.2\n===\n### Objectives: *Installation Improvements, buildroot, cross compile support*\nThe objective of this release is to make installation seamless.\n\nChanges\n-------\n\n- Create an installation guide\n- Created both 32 and 64 bit windows installations\n- Added install for windows distribution\n- Added 64 bit build profiles for VS 2012.\n- Created a buildroot patch\n- Updated makefile to better support buildroot\n- Made doc root and ports configurable during the make install.\n- Updated Linux Install\n- Updated OS X Package\n- Improved install scheme with welcome web page\n\nKnown Issues\n-----\n\n- The prebuilt Window's version requires [Visual C++ Redistributable for Visual Studio 2012](http://www.microsoft.com/en-us/download/details.aspx?id=30679)\n\n\nRelease Notes v1.1\n===\n### Objectives: *Build, Documentation, License Improvements*\nThe objective of this release is to establish a maintable code base, ensure MIT license rights and improve usability and documentation.\n\nChanges\n-------\n\n- Reorangized build directories to make them more intuitive\n- Added new build rules for lib and slib with option to include C++ class\n- Upgraded Lua from 5.2.1 to 5.2.2\n- Added fallback configuration file path for Linux systems.\n    + Good for having a system wide default configuration /usr/local/etc/civetweb.conf\n- Added new C++ abstraction class CivetServer\n- Added thread safety for and fixed websocket defects (Morgan McGuire)\n- Created PKGBUILD to use Arch distribution (Daniel Oaks)\n- Created new documentation on Embedding, Building and yaSSL (see docs/).\n- Updated License file to include all licenses.\n- Replaced MD5 implementation due to questionable license.\n     + This requires new source file md5.inl\n- Changed UNIX/OSX build to conform to common practices.\n     + Supports build, install and clean rules.\n     + Supports cross compiling\n     + Features can be chosen in make options\n- Moved Cocoa/OSX build and packaging to a separate file.\n     + This actually a second build variant for OSX.\n     + Removed yaSSL from the OSX build, not needed.\n- Added new Visual Studio projects for Windows builds.\n     + Removed Windows support from Makefiles\n     + Provided additional, examples with Lua, and another with yaSSL.\n- Changed Zombie Reaping policy to not ignore SIGCHLD.\n     + The previous method caused trouble in applciations that spawn children.\n\nKnown Issues\n-----\n\n- Build support for VS6 and some other has been deprecated.\n    + This does not impact embedded programs, just the stand-alone build.\n    + The old Makefile was renamed to Makefile.deprecated.\n    + This is partcially do to lack of testing.\n    + Need to find out what is actually in demand.\n- Build changes may impact current users.\n    + As with any change of this type, changes may impact some users.\n\n\nRelease Notes v1.0\n===\n\n### Objectives: *MIT License Preservation, Rebranding*\nThe objective of this release is to establish a version of the Mongoose software distribution that still retains the MIT license.\n\nChanges\n-------\n\n- Renamed Mongoose to Civetweb in the code and documentation.\n- Replaced copyrighted images with new images\n- Created a new code repository at https://github.com/civetweb/civetweb\n- Created a distribution site at https://sourceforge.net/projects/civetweb/\n- Basic build testing\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 2.22265625,
          "content": "# Security Policy\n\n## Supported Versions\n\nThe current \"head\" version (\"master\" branch) undergoes some automatic tests, but may have defects and vulnerabilities.\nAll development branches may be in an intermediate, untested state.\n\nFor released versions, additional tests are performed, including manual tests, static source code analysis and fuzz testing.\nExcept for features marked as \"experimental\". Experimental features are deactivated in the default configuration.\n\nDefects will be fixed in the current head version.\nSelected, critical defects are fixed in the latest release as well.\n\nNote that different security policies apply to different files/folders in this project:\n- The core components are include/civetweb.h, src/civetweb.c and src/*.inl.  These files are part of every server instance in production. Therefore they have to undergo the most intensive security tests and reviews.\n- The src/main.c file is used by the standalone server. It is used in various tests in combination with the aforementioned core components. Applications embedding civetweb will not use main.c and, thus, do not suffer from any vulnerabilities therein.\n- The example folders contain different usage examples in different maintenance state. This is explained in detail in the README file there.\n- The content of all test folders (test, unittest, fuzztest) is used to test the server functionality. These tests are not designed with security in mind - on the contrary, some tests contain scripts or settings that even introduce security leaks on purpose. All tests are only meant to be run in a test environment. You should not use the content of any test folder in production. Also certificates in \"resources/cert\" are only meant to be used in test environments and must never be used in production.\n\n\n## Reporting a Vulnerability\n\nPlease send vulnerability reports by email to bel2125 at gmail com.\nVulnerability with low severity can be sent directly by email.\n\nFor high severity vulnerabilities, you can get an individual gpg key to encrypt your detailed description of vulnerabilities you want to report.\n\nIf you do not get any response within one week, your email might have been lost (e.g., deleted as false positive by a spam filter). In this case, please open a GitHub issue.\n\n"
        },
        {
          "name": "VisualStudio",
          "type": "tree",
          "content": null
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.0263671875,
          "content": "theme: jekyll-theme-tactile"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 16.1875,
          "content": "version: '{build}'\r\n\r\n\r\nbuild:\r\n# no automatic build in script mode\r\n\r\n\r\nskip_commits:\r\n  # Builds just testing something on Travis CI don't need to be\r\n  # done on AppVeyor\r\n  message: /\\[Travis\\]/\r\n  # Dont build, if only documentation was changed\r\n  files:\r\n  - '**/*.md'\r\n\r\nenvironment:\r\n  enable_cxx: NO\r\n  enable_ssl_dynamic_loading: YES\r\n  enable_lua: NO\r\n  enable_lua_shared: NO\r\n  c_standard: auto\r\n  cxx_standard: auto\r\n  matrix:\r\n    # Use default values\r\n    - id: Default-x86\r\n      compiler: msvc-19-seh\r\n      build_shared: NO\r\n      no_files: NO\r\n      enable_ipv6: NO\r\n      enable_ssl: YES\r\n      enable_websockets: NO\r\n      no_cgi: NO\r\n      no_caching: NO\r\n      enable_stats: NO\r\n      configuration: Release\r\n      platform: x86\r\n    - id: Default-x64\r\n      compiler: msvc-19-seh\r\n      build_shared: NO\r\n      no_files: NO\r\n      enable_ipv6: NO\r\n      enable_ssl: YES\r\n      enable_websockets: NO\r\n      no_cgi: NO\r\n      no_caching: NO\r\n      enable_stats: NO\r\n      configuration: Release\r\n      platform: x64\r\n    # Use default values\r\n    - id: Full-x86\r\n      compiler: msvc-19-seh\r\n      build_shared: NO\r\n      no_files: NO\r\n      enable_ipv6: YES\r\n      enable_ssl: YES\r\n      enable_websockets: YES\r\n      no_cgi: NO\r\n      no_caching: NO\r\n      enable_stats: YES\r\n      configuration: Release\r\n      platform: x86\r\n    - id: Full-x64\r\n      compiler: msvc-19-seh\r\n      build_shared: NO\r\n      no_files: NO\r\n      enable_ipv6: YES\r\n      enable_ssl: YES\r\n      enable_websockets: YES\r\n      no_cgi: NO\r\n      no_caching: NO\r\n      enable_stats: YES\r\n      configuration: Release\r\n      platform: x64\r\n    # Debug builds\r\n    - id: Full-x86-Debug\r\n      compiler: msvc-19-seh\r\n      build_shared: NO\r\n      no_files: NO\r\n      enable_ipv6: YES\r\n      enable_ssl: YES\r\n      enable_websockets: YES\r\n      no_cgi: NO\r\n      no_caching: NO\r\n      enable_stats: YES\r\n      configuration: Debug\r\n      platform: x86\r\n    - id: Full-x64-Debug\r\n      compiler: msvc-19-seh\r\n      build_shared: NO\r\n      no_files: NO\r\n      enable_ipv6: YES\r\n      enable_ssl: YES\r\n      enable_websockets: YES\r\n      no_cgi: NO\r\n      no_caching: NO\r\n      enable_stats: YES\r\n      configuration: Debug\r\n      platform: x64\r\n    # Minimum settings\r\n    - id: Minimal-x86\r\n      compiler: msvc-19-seh\r\n      build_shared: NO\r\n      no_files: YES\r\n      enable_ipv6: NO\r\n      enable_ssl: NO\r\n      enable_websockets: NO\r\n      no_cgi: YES\r\n      no_caching: YES\r\n      enable_stats: NO\r\n      configuration: Release\r\n      platform: x86\r\n    - id: Minimal-x64\r\n      compiler: msvc-19-seh\r\n      build_shared: NO\r\n      no_files: YES\r\n      enable_ipv6: NO\r\n      enable_ssl: NO\r\n      enable_websockets: NO\r\n      no_cgi: YES\r\n      no_caching: YeS\r\n      enable_stats: NO\r\n      configuration: Release\r\n      platform: x64\r\n    # Test shared and debug build\r\n    - id: Shared-default-x86\r\n      compiler: msvc-19-seh\r\n      build_shared: YES\r\n      no_files: NO\r\n      enable_ipv6: NO\r\n      enable_ssl: YES\r\n      enable_websockets: NO\r\n      no_cgi: NO\r\n      no_caching: NO\r\n      enable_stats: NO\r\n      configuration: Release\r\n      platform: x86\r\n    - id: Shared-default-x64\r\n      compiler: msvc-19-seh\r\n      build_shared: YES\r\n      no_files: NO\r\n      enable_ipv6: NO\r\n      enable_ssl: YES\r\n      enable_websockets: NO\r\n      no_cgi: NO\r\n      no_caching: NO\r\n      enable_stats: NO\r\n      configuration: Release\r\n      platform: x64\r\n    # MinGW\r\n    - id: Full-GCC-x64\r\n      compiler: gcc-5.1.0-posix\r\n      build_shared: NO\r\n      no_files: NO\r\n      enable_ipv6: YES\r\n      enable_ssl: YES\r\n      enable_websockets: YES\r\n      no_cgi: NO\r\n      no_caching: NO\r\n      enable_stats: YES\r\n      configuration: Release\r\n      platform: x64\r\n    # Visual Studio 2010\r\n    - id: Full-VS2010-x86\r\n      compiler: msvc-16-seh\r\n      build_shared: NO\r\n      no_files: NO\r\n      enable_ipv6: YES\r\n      enable_ssl: YES\r\n      enable_websockets: YES\r\n      no_cgi: NO\r\n      no_caching: NO\r\n      enable_stats: YES\r\n      configuration: Release\r\n      platform: x86\r\n    # Visual Studio 2012\r\n    - id: Full-VS2012-x86\r\n      compiler: msvc-17-seh\r\n      build_shared: NO\r\n      no_files: NO\r\n      enable_ipv6: YES\r\n      enable_ssl: YES\r\n      enable_websockets: YES\r\n      no_cgi: NO\r\n      no_caching: NO\r\n      enable_stats: YES\r\n      configuration: Release\r\n      platform: x86\r\n    # Visual Studio 2013\r\n    - id: Full-VS2013-x86\r\n      compiler: msvc-18-seh\r\n      build_shared: NO\r\n      no_files: NO\r\n      enable_ipv6: YES\r\n      enable_ssl: YES\r\n      enable_websockets: YES\r\n      no_cgi: NO\r\n      no_caching: NO\r\n      enable_stats: YES\r\n      configuration: Release\r\n      platform: x86\r\n      image: Visual Studio 2013\r\n    - id: Full-VS2013-x64\r\n      compiler: msvc-18-seh\r\n      build_shared: NO\r\n      no_files: NO\r\n      enable_ipv6: YES\r\n      enable_ssl: YES\r\n      enable_websockets: YES\r\n      no_cgi: NO\r\n      no_caching: NO\r\n      enable_stats: YES\r\n      configuration: Release\r\n      platform: x64\r\n      image: Visual Studio 2013\r\n    # Visual Studio 2015\r\n    - id: Full-VS2015-x86\r\n      compiler: msvc-19-seh\r\n      build_shared: NO\r\n      no_files: NO\r\n      enable_ipv6: YES\r\n      enable_ssl: YES\r\n      enable_websockets: YES\r\n      no_cgi: NO\r\n      no_caching: NO\r\n      enable_stats: YES\r\n      configuration: Release\r\n      platform: x86\r\n      image: Visual Studio 2015\r\n    - id: Full-VS2015-x64\r\n      compiler: msvc-19-seh\r\n      build_shared: NO\r\n      no_files: NO\r\n      enable_ipv6: YES\r\n      enable_ssl: YES\r\n      enable_websockets: YES\r\n      no_cgi: NO\r\n      no_caching: NO\r\n      enable_stats: YES\r\n      configuration: Release\r\n      platform: x64\r\n      image: Visual Studio 2015\r\n    # Visual Studio 2017\r\n    - id: Full-VS2017-x86\r\n      compiler: msvc-20-seh\r\n      build_shared: NO\r\n      no_files: NO\r\n      enable_ipv6: YES\r\n      enable_ssl: YES\r\n      enable_websockets: YES\r\n      no_cgi: NO\r\n      no_caching: NO\r\n      enable_stats: YES\r\n      configuration: Release\r\n      platform: x86\r\n      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\r\n    - id: Full-VS2017-x64\r\n      compiler: msvc-20-seh\r\n      build_shared: NO\r\n      no_files: NO\r\n      enable_ipv6: YES\r\n      enable_ssl: YES\r\n      enable_websockets: YES\r\n      no_cgi: NO\r\n      no_caching: NO\r\n      enable_stats: YES\r\n      configuration: Release\r\n      platform: x64\r\n      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017\r\n    # Visual Studio 2019\r\n    - id: Full-VS2019-x64\r\n      compiler: msvc-21-seh\r\n      build_shared: NO\r\n      no_files: NO\r\n      enable_ipv6: YES\r\n      enable_ssl: YES\r\n      enable_websockets: YES\r\n      no_cgi: NO\r\n      no_caching: NO\r\n      enable_stats: YES\r\n      configuration: Release\r\n      platform: x64\r\n      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019\r\n    # Ubuntu\r\n    - id: Ubuntu1604-GCC-x64\r\n      compiler: gcc-5.1.0-posix\r\n      build_shared: NO\r\n      no_files: NO\r\n      enable_ipv6: YES\r\n      enable_ssl: YES\r\n      enable_websockets: YES\r\n      no_cgi: NO\r\n      no_caching: NO\r\n      enable_stats: YES\r\n      configuration: Release\r\n      platform: x64\r\n      image: Ubuntu1604\r\n    - id: Ubuntu1804-GCC-x64\r\n      compiler: gcc-5.1.0-posix\r\n      build_shared: NO\r\n      no_files: NO\r\n      enable_ipv6: YES\r\n      enable_ssl: YES\r\n      enable_websockets: YES\r\n      no_cgi: NO\r\n      no_caching: NO\r\n      enable_stats: YES\r\n      configuration: Release\r\n      platform: x64\r\n      image: Ubuntu1804\r\n    - id: Ubuntu2004-GCC-x64\r\n      compiler: gcc-5.1.0-posix\r\n      build_shared: NO\r\n      no_files: NO\r\n      enable_ipv6: YES\r\n      enable_ssl: YES\r\n      enable_websockets: YES\r\n      no_cgi: NO\r\n      no_caching: NO\r\n      enable_stats: YES\r\n      configuration: Release\r\n      platform: x64\r\n      image: Ubuntu2004\r\n\r\ninstall:\r\n  # Derive some extra information\r\n  - set build_type=%configuration%\r\n  - for /f \"tokens=1-3 delims=-\" %%a in (\"%compiler%\") do (@set \"compiler_name=%%a\")\r\n  - for /f \"tokens=1-3 delims=-\" %%a in (\"%compiler%\") do (@set \"compiler_version=%%b\")\r\n  - for /f \"tokens=1-3 delims=-\" %%a in (\"%compiler%\") do (@set \"compiler_threading=%%c\")\r\n  - if \"%platform%\"==\"x64\" (set arch=x86_64)\r\n  - if \"%platform%\"==\"x86\" (set arch=i686)\r\n  # Download the specific version of MinGW\r\n  - if \"%compiler_name%\"==\"gcc\" (@set \"mingw_output_folder=C:\\mingw-builds\")\r\n  - if \"%compiler_name%\"==\"gcc\" (\r\n      @for /f %%a in (\r\n        'call mingw.cmd\r\n          /version \"%compiler_version%\"\r\n          /arch \"%arch%\"\r\n          /threading \"%compiler_threading%\"\r\n          \"%mingw_output_folder%\"'\r\n      ) do @set \"compiler_path=%%a\"\r\n    )\r\n  - if \"%compiler_name%\"==\"gcc\" (@set \"mingw_log_folder=%mingw_output_folder%\\logs\")\r\n  - if exist \"%mingw_log_folder%\" @for /f %%f in ('dir /b /oD /tc \"%mingw_log_folder%\"') do @set \"mingw_log_file=%mingw_log_folder%\\%%f\"\r\n  - if exist \"%mingw_log_file%\" powershell Push-AppveyorArtifact \"%mingw_log_file%\" -FileName mingw-download.log\r\n  # Get OpenSSL\r\n  #\r\n  # OpenSSL should already be installed, according to\r\n  # - http://help.appveyor.com/discussions/questions/1132-openssl-installation-issues\r\n  # - https://github.com/appveyor/ci/issues/576\r\n  #\r\n  - cmd: set PATH=%PATH%;C:\\OpenSSL-Win32;C:\\OpenSSL-Win64\r\n  - dir C:\\OpenSSL-Win32\r\n  - dir C:\\OpenSSL-Win64\r\n  - path\r\n\r\n\r\nbefore_build:\r\n  # Remove sh.exe from the path otherwise CMake will complain:\r\n  # \"sh.exe was found in your PATH, here: C:/Program Files/Git/usr/bin/sh.exe\"\r\n  # and the MinGW build will not work (the Visual Studio build does not care).\r\n  # See http://help.appveyor.com/discussions/problems/3193-cmake-building-for-mingw-issue-with-git-shexe\r\n  # The entire directory containing sh.exe could be removed from the PATH environment:\r\n  # - set PATH=%PATH:C:\\Program Files\\Git\\usr\\bin;=%\r\n  # However, this will also remove all other programs in this directory from the PATH.\r\n  # In particular \"patch\" is still required.\r\n  # So, just rename sh.exe:\r\n  - ren \"C:\\Program Files\\Git\\usr\\bin\\sh.exe\" _sh.exe\r\n  # Set up mingw commands\r\n  - if \"%compiler_name%\"==\"gcc\" (set \"generator=MinGW Makefiles\")\r\n  - if \"%compiler_name%\"==\"gcc\" (set \"build=mingw32-make -j4\")\r\n  - if \"%compiler_name%\"==\"gcc\" (set \"test=mingw32-make test\")\r\n  # MSVC specific commands\r\n  # Note: The minimum version officially supported for CivetWeb is VS2010. Older ones might work or not.\r\n  - if \"%compiler_version%\"==\"14\" (set \"vs_version=8\" & set \"vs_year=2005\")\r\n  - if \"%compiler_version%\"==\"15\" (set \"vs_version=9\" & set \"vs_year=2008\")\r\n  - if \"%compiler_version%\"==\"16\" (set \"vs_version=10\" & set \"vs_year=2010\")\r\n  - if \"%compiler_version%\"==\"17\" (set \"vs_version=11\" & set \"vs_year=2012\")\r\n  - if \"%compiler_version%\"==\"18\" (set \"vs_version=12\" & set \"vs_year=2013\")\r\n  - if \"%compiler_version%\"==\"19\" (set \"vs_version=14\" & set \"vs_year=2015\")\r\n  - if \"%compiler_version%\"==\"20\" (set \"vs_version=15\" & set \"vs_year=2017\")\r\n  - if \"%compiler_version%\"==\"21\" (set \"vs_version=16\" & set \"vs_year=2019\")\r\n  - if \"%compiler_name%\"==\"msvc\" (set \"generator=Visual Studio %vs_version% %vs_year%\")\r\n  - set \"arch_arg= \"\r\n  - if \"%compiler_name%\"==\"msvc\" (\r\n      if \"%compiler_version%\"==\"21\" (\r\n          set \"arch_arg= -A x64 \"\r\n      )\r\n    )\r\n  - if \"%compiler_name%\"==\"msvc\" (\r\n      if not \"%compiler_version%\"==\"21\" (\r\n        if \"%platform%\"==\"x64\" (\r\n          set \"generator=%generator% Win64\"\r\n        )\r\n      )\r\n    )\r\n  - if %compiler_version% gtr 9 (set platform=%platform:x86=Win32%)\r\n  - if \"%compiler_name%\"==\"msvc\" (set \"msbuild_opts=/clp:OnlyErrors;OnlyWarnings /nologo /m /v:m\")\r\n  - if \"%compiler_name%\"==\"msvc\" (set \"build=msbuild %msbuild_opts% /p:Configuration=%configuration% /p:Platform=%platform% civetweb.sln\")\r\n  - if \"%compiler_name%\"==\"msvc\" (set \"test=msbuild %msbuild_opts% RUN_TESTS.vcxproj\")\r\n  # Add the compiler path if needed\r\n  - if not \"%compiler_path%\"==\"\" (set \"PATH=%PATH%;%compiler_path%\")\r\n  # git bash conflicts with MinGW makefiles\r\n  - if \"%generator%\"==\"MinGW Makefiles\" (set \"PATH=%PATH:C:\\Program Files (x86)\\Git\\bin=%\")\r\n  # Useful locations\r\n  - set \"source_path=%cd%\"\r\n  - set \"output_path=%source_path%\\output\"\r\n  - set \"build_path=%output_path%\\build\"\r\n  - set \"install_path=%output_path%\\install\"\r\n  - set \"third_party_dir=C:\\third-party\"\r\n  # Check some settings of the build server\r\n  - ver\r\n  - cd\r\n  - dir\r\n  - ipconfig /all\r\n  # Generate the build scripts with CMake\r\n  - mkdir \"%build_path%\"\r\n  - cd \"%build_path%\"\r\n  - cmake --version\r\n  - echo %generator%\r\n  - echo %arch_arg%\r\n  - appveyor AddMessage -Category Information \"Generating '%generator%'\"\r\n  - echo cmake\r\n    -G \"%generator%\" %arch_arg%\r\n    -DCMAKE_BUILD_TYPE=%build_type%\r\n    -DBUILD_SHARED_LIBS=%build_shared%\r\n    -DCIVETWEB_SERVE_NO_FILES=%no_files%\r\n    \"-DCIVETWEB_THIRD_PARTY_DIR=%third_party_dir:\\=\\\\%\"\r\n    -DCIVETWEB_ENABLE_THIRD_PARTY_OUTPUT=YES\r\n    -DCIVETWEB_ENABLE_SSL=%enable_ssl%\r\n    -DCIVETWEB_DISABLE_CGI=%no_cgi%\r\n    -DCIVETWEB_ENABLE_SSL_DYNAMIC_LOADING=%enable_ssl_dynamic_loading%\r\n    -DCIVETWEB_ENABLE_WEBSOCKETS=%enable_websockets%\r\n    -DCIVETWEB_ENABLE_CXX=%enable_cxx%\r\n    -DCIVETWEB_ENABLE_LUA=%enable_lua%\r\n    -DCIVETWEB_ENABLE_LUA_SHARED=%enable_lua_shared%\r\n    -DCIVETWEB_ENABLE_SERVER_STATS=%enable_stats%\r\n    -DCIVETWEB_DISABLE_CACHING=%no_caching%\r\n    -DCIVETWEB_C_STANDARD=%c_standard%\r\n    -DCIVETWEB_CXX_STANDARD=%cxx_standard%\r\n    -DCIVETWEB_SSL_OPENSSL_API_1_0=NO\r\n    -DCIVETWEB_SSL_OPENSSL_API_1_1=YES\r\n    -DCIVETWEB_SSL_OPENSSL_API_3_0=NO\r\n    \"%source_path%\"\r\n  - cmake\r\n    -G \"%generator%\" %arch_arg%\r\n    -DCMAKE_BUILD_TYPE=%build_type%\r\n    -DBUILD_SHARED_LIBS=%build_shared%\r\n    -DCIVETWEB_SERVE_NO_FILES=%no_files%\r\n    \"-DCIVETWEB_THIRD_PARTY_DIR=%third_party_dir:\\=\\\\%\"\r\n    -DCIVETWEB_ENABLE_THIRD_PARTY_OUTPUT=YES\r\n    -DCIVETWEB_ENABLE_SSL=%enable_ssl%\r\n    -DCIVETWEB_DISABLE_CGI=%no_cgi%\r\n    -DCIVETWEB_ENABLE_SSL_DYNAMIC_LOADING=%enable_ssl_dynamic_loading%\r\n    -DCIVETWEB_ENABLE_WEBSOCKETS=%enable_websockets%\r\n    -DCIVETWEB_ENABLE_CXX=%enable_cxx%\r\n    -DCIVETWEB_ENABLE_LUA=%enable_lua%\r\n    -DCIVETWEB_ENABLE_LUA_SHARED=%enable_lua_shared%\r\n    -DCIVETWEB_ENABLE_SERVER_STATS=%enable_stats%\r\n    -DCIVETWEB_DISABLE_CACHING=%no_caching%\r\n    -DCIVETWEB_C_STANDARD=%c_standard%\r\n    -DCIVETWEB_CXX_STANDARD=%cxx_standard%\r\n    -DCIVETWEB_SSL_OPENSSL_API_1_0=NO\r\n    -DCIVETWEB_SSL_OPENSSL_API_1_1=YES\r\n    -DCIVETWEB_SSL_OPENSSL_API_3_0=NO\r\n    \"%source_path%\"\r\n  - powershell Push-AppveyorArtifact CMakeCache.txt\r\n  - cd \"%source_path%\"\r\n\r\nbuild_script:\r\n  - cd\r\n  - cd \"%build_path%\"\r\n  - appveyor AddMessage -Category Information \"Build command '%build%'\"\r\n  - cmd /c \"%build%\"\r\n  - cd \"%source_path%\"\r\n\r\ntest_script:\r\n  - cd \"%build_path%\"\r\n  - appveyor AddMessage -Category Information \"Test command '%build%'\"\r\n  - set CTEST_OUTPUT_ON_FAILURE=1\r\n  - cmd /c \"%test%\" & set \"test_ret=%ERRORLEVEL%\"\r\n  - echo \"Test returned %test_ret%\"\r\n  - dir \"%source_path%\\output\\build\\unittest\\\"\r\n  - echo \"Show all test logs:\"\r\n  - for /r %%i in (\"%source_path%\\output\\build\\unittest\\test-*.log\") do (\r\n      echo %%i\r\n      type %%i\r\n    )\r\n  - for /r %%i in (\"%source_path%\\output\\build\\unittest\\test-*.xml\") do (\r\n      echo %%i\r\n      type %%i\r\n    )\r\n  - cd \"%source_path%\"\r\n  - set \"output_path=%source_path%\\output\"\r\n  - set \"build_path=%output_path%\\build\"\r\n  - set \"install_path=%output_path%\\install\"\r\n  - set \"third_party_dir=C:\\third-party\"\r\n  - exit /B %ERRORLEVEL%\r\n  - echo \"Test script DONE\"\r\n\r\nafter_test:\r\n  - echo \"Current directory:\"\r\n  - cd\r\n  - dir\r\n  - md dist\r\n  - if \"%build_type%\"==\"Release\" (cmake \"-DCMAKE_INSTALL_PREFIX=%install_path%\" -P \"%build_path%/cmake_install.cmake\")\r\n  - dir dist\\\r\n  - echo \"Output directory:\"\r\n  - dir %output_path%\r\n  - echo \"Build directory:\"\r\n  - dir %build_path%\r\n  - if \"%build_type%\"==\"Release\" (echo \"Install directory:\")\r\n  - if \"%build_type%\"==\"Release\" (dir %install_path%)\r\n  - if \"%build_type%\"==\"Release\" (dir %install_path%\\bin)\r\n  - if \"%build_type%\"==\"Release\" (dir %install_path%\\include)\r\n  - if \"%build_type%\"==\"Release\" (dir %install_path%\\lib)\r\n  - if \"%build_type%\"==\"Release\" (copy \"%install_path%\"\\include dist\\)\r\n  - if \"%build_type%\"==\"Release\" (copy \"%install_path%\"\\bin\\*.exe dist\\)\r\n  - echo \"Dist directory:\"\r\n  - dir dist\\\r\n\r\n\r\ncache:\r\n  - C:\\mingw-builds -> mingw.cmd\r\n  - C:\\third-party -> **\\CMakeLists.txt\r\n  - C:\\ssl\r\n\r\nartifacts:\r\n  - path: dist\\*\r\n\r\nfor:\r\n  -\r\n    matrix:\r\n      only:\r\n        - configuration: Release\r\n      fast_finish: false\r\n"
        },
        {
          "name": "build",
          "type": "blob",
          "size": 3.193359375,
          "content": "#!/usr/bin/env bash\nset -euo pipefail\nIFS=$'\\n\\t'\n\nstdout() {\n  cat <<< \"$@\"\n}\n\nstderr() {\n  cat <<< \"$@\" 1>&2\n}\n\nprereqs () {\n  local E_BADARGS=65\n  if [ $# -eq 0 ]; then\n    stderr \"Usage: $(basename $0) [prerequisite_program] [another_program...]\"\n    return $E_BADARGS\n  fi\n  for prog in $@; do\n    hash $prog 2>&-\n    if [ $? -ne 0 ]; then\n      return 1\n    fi\n  done\n}\n\nusage() {\n  if [ $# -ne 0 ]; then\n    stdout $@\n  fi\n  stdout \"Usage: $(basename $0) [options]\"\n  stdout\n  stdout \"A convenience script to quickly build the library with CMake.\"\n  stdout\n  stdout \"Options:\"\n  stdout \"  [--shared|(--static)]   Builds either a static or a shared library\"\n  stdout \"  [--debug|(--release)]   Builds a certain variant of the library\"\n  stdout \"  -g,--generator name     The CMake generator to use ('Unix Makefiles')\"\n  stdout \"  -o,--output folder      The place to output the build files (./output)\"\n  stdout\n  stdout \"Examples:\"\n  stdout \"  ./build\"\n  stdout \"  ./build --shared --debug\"\n  stdout \"  ./build --static --release -o ~/my-output-folder\"\n}\n\ncheck() {\n  local E_BADARGS=65\n  if [ $# -ne 1 ]; then\n    stderr \"Usage: check prerequisite_program\"\n    return $E_BADARGS\n  fi\n  prereqs $1\n  if [ $? -ne 0 ]; then\n    stderr \"Failed to find `$1` on the command line:\"\n    stderr \"Please install it with your package manager\"\n    return 1\n  fi\n}\n\nsanitize() {\n  local E_BADARGS=65\n  if [ $# -ne 1 ]; then\n    stderr \"Usage: sanitize string_to_clean\"\n    return $E_BADARGS\n  fi\n  echo $(echo \"$1\" | sed \"s|[^A-Za-z]\\+|-|g\" | tr '[:upper:]' '[:lower:]')\n  return 0\n}\n\nbuild () {\n  # Get the build locations\n  local src_dir=$(cd $(dirname $0); pwd -P)\n\n  # Arguments\n  local E_BADARGS=65\n  local generator=\"Unix Makefiles\"\n  local shared=NO\n  local build_type=Release\n  local output_dir=\"${src_dir}/output\"\n  while (( \"$#\" )); do\n    case \"$1\" in\n      --debug) build_type=Debug;;\n      --release) build_type=Release;;\n      --shared) shared=YES;;\n      --static) shared=NO;;\n      --output) shift; out=\"$1\";;\n      -o) shift; output_dir=\"$1\";;\n      --generator) shift; generator=\"$1\";;\n      -g) shift; generator=\"$1\";;\n      --help) usage; return 0;;\n      --) shift; break;;\n      -*) usage \"Bad argument $1\"; return ${E_BADARGS};;\n      *) break;;\n    esac\n    shift\n  done\n\n  # Update the build folder\n  local build_dir=${output_dir}/build\n  local install_dir=${output_dir}/install\n\n  # Create the build folder\n  mkdir -p ${build_dir}\n\n  # Enter the build folder\n  cd ${build_dir}\n  trap 'cd ${src_dir}' INT TERM EXIT\n\n  # Do the CMake configuration\n  check cmake\n  cmake -G ${generator} -DCMAKE_BUILD_TYPE=${build_type} -DBUILD_SHARED_LIBS:BOOL=${shared} ${src_dir}\n\n  # Do the build\n  if [ \"${generator}\" = \"Unix Makefiles\" ]; then\n    check make\n    make all test\n  else\n    stderr \"Unknown build system for ${generator}, go to ${build_dir} and run the correct build program\"\n  fi\n\n  # Do the install\n  cmake -DCMAKE_INSTALL_PREFIX=\"${install_dir}\" -P \"${build_dir}/cmake_install.cmake\"\n\n  # Return to the correct folder\n  trap - INT TERM EXIT\n  cd ${src_dir}\n\n  # Notify the user\n  stdout \"Built files are available at ${install_dir}\"\n}\n\n# If the script was not sourced we need to run the function\ncase \"$0\" in\n  *\"build\")\n    build \"$@\"\n    ;;\nesac\n"
        },
        {
          "name": "build.cmd",
          "type": "blob",
          "size": 24.0888671875,
          "content": ":: Make sure the extensions are enabled\n@verify other 2>nul\n@setlocal EnableDelayedExpansion\n@if errorlevel 1 (\n  call :print_usage \"Failed to enable extensions\"\n  exit /b 1\n)\n\n::Change the code page to unicode\n@chcp 65001 1>nul 2>nul\n@if errorlevel 1 (\n  call :print_usage \"Failed to change the code page to unicode\"\n  exit /b 1\n)\n\n:: Set up some global variables\n@set project=civetweb\n@set \"script_name=%~nx0\"\n@set \"script_folder=%~dp0\"\n@set \"script_folder=%script_folder:~0,-1%\"\n@set \"output_path=%script_folder%\\output\"\n@set \"build_path=%output_path%\\build\"\n@set \"install_path=%output_path%\\install\"\n@set build_shared=OFF\n@set build_type=Release\n@set dependency_path=%TEMP%\\%project%-build-dependencies\n\n:: Check the command line parameters\n@set logging_level=1\n@set \"options=%* \"\n@if not \"!options!\"==\"!options:/? =!\" set usage=\"Convenience script to build %project% with CMake\"\n@for %%a in (%options%) do @(\n  @set arg=%%~a\n  @set arg=!arg: =!\n  @set one=!arg:~0,1!\n  @set two=!arg:~0,2!\n  @if /i [!arg!] == [/q] set quiet=true\n  @if /i [!two!] == [/v] call :verbosity \"!arg!\"\n  @if /i [!arg!] == [/s] set build_shared=ON\n  @if /i [!arg!] == [/d] set build_type=Debug\n  @if /i not [!one!] == [/] (\n    if not defined generator (\n      set generator=!arg!\n    ) else (\n      set usage=\"Too many generators: !method! !arg!\" ^\n                \"There should only be one generator parameter\"\n    )\n  )\n)\n@if defined quiet (\n  set logging_level=0\n)\n@if not defined generator (\n  set generator=MSVC\n)\n@if /i not [%generator%] == [MinGW] (\n  if /i not [%generator%] == [MSVC] (\n    call :print_usage \"Invalid argument: %generator%\"\n    exit /b 1\n  )\n)\n\n:: Set up the logging\n@set log_folder=%output_path%\\logs\n@call :iso8601 timestamp\n@set log_path=%log_folder%\\%timestamp%.log\n@set log_keep=10\n\n:: Only keep a certain amount of logs\n@set /a \"log_keep=log_keep-1\"\n@if not exist %log_folder% @mkdir %log_folder%\n@for /f \"skip=%log_keep%\" %%f in ('dir /b /o-D /tc %log_folder%') do @(\n  call :log 4 \"Removing old log file %log_folder%\\%%f\"\n  del %log_folder%\\%%f\n)\n\n:: Set up some more global variables\n@call :architecture arch\n@call :windows_version win_ver win_ver_major win_ver_minor win_ver_rev\n@call :script_source script_source\n@if [%script_source%] == [explorer] (\n  set /a \"logging_level=logging_level+1\"\n)\n\n:: Print the usage or start the script\n@set exit_code=0\n@if defined usage (\n  call :print_usage %usage%\n) else (\n  call :main\n  @if errorlevel 1 (\n    @call :log 0 \"Failed to build the %project% project\"\n    @set exit_code=1\n  )\n)\n\n:: Tell the user where the built files are\n@call :log 5\n@call :log 0 \"The built files are available in %install_path%\"\n\n:: Stop the script if the user double clicked\n@if [%script_source%] == [explorer] (\n  pause\n)\n\n@exit /b %exit_code%\n@endlocal\n@goto :eof\n\n:: -------------------------- Functions start here ----------------------------\n\n:main - Main function that performs the build\n@setlocal\n@call :log 6\n@call :log 2 \"Welcome to the %project% build script\"\n@call :log 6 \"------------------------------------\"\n@call :log 6\n@call :log 2 \"This script builds the project using CMake\"\n@call :log 6\n@call :log 2 \"Generating %generator%...\"\n@call :log 6\n@set methods=dependencies ^\n             generate ^\n             build ^\n             install\n@for %%m in (%methods%) do @(\n  call :log 3 \"Executing the '%%m' method\"\n  call :log 8\n  call :%%~m\n  if errorlevel 1 (\n    call :log 0 \"Failed to complete the '%%~m' dependency routine\"\n    call :log 0 \"View the log at %log_path%\"\n    exit /b 1\n  )\n)\n@call :log 6 \"------------------------------------\"\n@call :log 2 \"Build complete\"\n@call :log 6\n@endlocal\n@goto :eof\n\n:print_usage - Prints the usage of the script\n:: %* - message to print, each argument on it's own line\n@setlocal\n@for %%a in (%*) do @echo.%%~a\n@echo.\n@echo.build [/?][/v[v...]^|/q][MinGW^|MSVC]\n@echo.\n@echo.  [MinGW^|(MSVC)]\n@echo.              Builds the library with one of the compilers\n@echo.  /s          Builds shared libraries\n@echo.  /d          Builds a debug variant of the project\n@echo.  /v          Sets the output to be more verbose\n@echo.  /v[v...]    Extra verbosity, /vv, /vvv, etc\n@echo.  /q          Quiets the output\n@echo.  /?          Shows this usage message\n@echo.\n@endlocal\n@goto :eof\n\n:dependencies - Installs any prerequisites for the build\n@setlocal EnableDelayedExpansion\n@if errorlevel 1 (\n  call :log 0 \"Failed to enable extensions\"\n  exit /b 1\n)\n@call :log 5\n@call :log 0 \"Installing dependencies for %generator%\"\n@if /i [%generator%] == [MinGW] (\n  call :mingw compiler_path\n  @if errorlevel 1 (\n    @call :log 5\n    @call :log 0 \"Failed to find MinGW\"\n    @exit /b 1\n  )\n  set \"PATH=!compiler_path!;%PATH%\"\n  @call :find_in_path gcc_executable gcc.exe\n  @if errorlevel 1 (\n    @call :log 5\n    @call :log 0 \"Failed to find gcc.exe\"\n    @exit /b 1\n  )\n)\n@if [%reboot_required%] equ [1] call :reboot\n@endlocal & set \"PATH=%PATH%\"\n@goto :eof\n\n:generate - Uses CMake to generate the build files\n@setlocal EnableDelayedExpansion\n@if errorlevel 1 (\n  call :log 0 \"Failed to enable extensions\"\n  exit /b 1\n)\n@call :log 5\n@call :log 0 \"Generating CMake files for %generator%\"\n@call :cmake cmake_executable\n@if errorlevel 1 (\n  @call :log 5\n  @call :log 0 \"Need CMake to create the build files\"\n  @exit /b 1\n)\n@if /i [%generator%] == [MinGW] @(\n  @set \"generator_var=-G \"MinGW Makefiles^\"\"\n)\n@if /i [%generator%] == [MSVC] @(\n  rem We could figure out the correct MSVS generator here\n)\n@call :iso8601 iso8601\n@set output=%temp%\\cmake-%iso8601%.log\n@if not exist %build_path% mkdir %build_path%\n@cd %build_path%\n@\"%cmake_executable%\" ^\n  !generator_var! ^\n  -DCMAKE_BUILD_TYPE=!build_type! ^\n  -DBUILD_SHARED_LIBS=!build_shared! ^\n  \"%script_folder%\" > \"%output%\"\n@if errorlevel 1 (\n  @call :log 5\n  @call :log 0 \"Failed to generate build files with CMake\"\n  @call :log_append \"%output%\"\n  @cd %script_folder%\n  @exit /b 1\n)\n@cd %script_folder%\n@endlocal\n@goto :eof\n\n:build - Builds the library\n@setlocal EnableDelayedExpansion\n@if errorlevel 1 (\n  call :log 0 \"Failed to enable extensions\"\n  exit /b 1\n)\n@call :log 5\n@call :log 0 \"Building %project% with %generator%\"\n@if /i [%generator%] == [MinGW] @(\n  @call :find_in_path mingw32_make_executable mingw32-make.exe\n  @if errorlevel 1 (\n    @call :log 5\n    @call :log 0 \"Failed to find mingw32-make\"\n    @exit /b 1\n  )\n  @set \"build_command=^\"!mingw32_make_executable!^\" all test\"\n)\n@if /i [%generator%] == [MSVC] @(\n  @call :msbuild msbuild_executable\n  @if errorlevel 1 (\n    @call :log 5\n    @call :log 0 \"Failed to find MSBuild\"\n    @exit /b 1\n  )\n  @set \"build_command=^\"!msbuild_executable!^\" /m:4 /p:Configuration=%build_type% %project%.sln\"\n)\n@if not defined build_command (\n  @call :log 5\n  @call :log 0 \"No build command for %generator%\"\n  @exit /b 1\n)\n@cd %build_path%\n@call :iso8601 iso8601\n@set output=%temp%\\build-%iso8601%.log\n@call :log 7\n@call :log 2 \"Build command: %build_command:\"=%\"\n@%build_command% > \"%output%\"\n@if errorlevel 1 (\n  @call :log_append \"%output%\"\n  @call :log 5\n  @call :log 0 \"Failed to complete the build\"\n  @exit /b 1\n)\n@call :log_append \"%output%\"\n@cd %script_folder%\n@endlocal\n@goto :eof\n\n:install - Installs the built files\n@setlocal\n@call :log 5\n@call :log 0 \"Installing built files\"\n@call :cmake cmake_executable\n@if errorlevel 1 (\n  @call :log 5\n  @call :log 0 \"Need CMake to install the built files\"\n  @exit /b 1\n)\n@call :iso8601 iso8601\n@set output=%temp%\\install-%iso8601%.log\n@\"%cmake_executable%\" ^\n  \"-DCMAKE_INSTALL_PREFIX=%install_path%\" ^\n  -P \"%build_path%/cmake_install.cmake\" ^\n  > \"%output%\"\n@if errorlevel 1 (\n  @call :log_append \"%output%\"\n  @call :log 5\n  @call :log 0 \"Failed to install the files\"\n  @exit /b 1\n)\n@call :log_append \"%output%\"\n@endlocal\n@goto :eof\n\n:script_source - Determines if the script was ran from the cli or explorer\n:: %1 - The return variable [cli|explorer]\n@verify other 2>nul\n@setlocal EnableDelayedExpansion\n@if errorlevel 1 (\n  call :log 0 \"Failed to enable extensions\"\n  exit /b 1\n)\n@call :log 3 \"Attempting to detect the script source\"\n@echo \"The invocation command was: '%cmdcmdline%'\" >> %log_path%\n@for /f \"tokens=1-3,*\" %%a in (\"%cmdcmdline%\") do @(\n  set cmd=%%~a\n  set arg1=%%~b\n  set arg2=%%~c\n  set rest=%%~d\n)\n@set quote=\"\n@if \"!arg2:~0,1!\" equ \"!quote!\" (\n  if \"!arg2:~-1!\" neq \"!quote!\" (\n    set \"arg2=!arg2:~1!\"\n  )\n)\n@call :log 4 \"cmd  = %cmd%\"\n@call :log 4 \"arg1 = %arg1%\"\n@call :log 4 \"arg2 = %arg2%\"\n@call :log 4 \"rest = %rest%\"\n@call :log 4 \"src  = %~f0\"\n@if /i \"%arg2%\" == \"call\" (\n  set script_source=cli\n) else (\n  @if /i \"%arg1%\" == \"/c\" (\n    set script_source=explorer\n  ) else (\n    set script_source=cli\n  )\n)\n@call :log 3 \"The script was invoked from %script_source%\"\n@endlocal & set \"%~1=%script_source%\"\n@goto :eof\n\n:architecture - Finds the system architecture\n:: %1 - The return variable [x86|x86_64]\n@setlocal\n@call :log 3 \"Determining the processor architecture\"\n@set \"key=HKLM\\System\\CurrentControlSet\\Control\\Session Manager\\Environment\"\n@set \"var=PROCESSOR_ARCHITECTURE\"\n@for /f \"skip=2 tokens=2,*\" %%a in ('reg query \"%key%\" /v \"%var%\"') do @set \"arch=%%b\"\n@if \"%arch%\" == \"AMD64\" set arch=x86_64\n@call :log 4 \"arch = %arch%\"\n@endlocal & set \"%~1=%arch%\"\n@goto :eof\n\n:md5 - Gets the MD5 checksum for a file\n:: %1 - The hash\n:: %2 - The file path\n@setlocal\n@set var=%~1\n@set file_path=%~2\n@if [%var%] == [] exit /b 1\n@if \"%file_path%\" == \"\" exit /b 1\n@if not exist \"%file_path%\" exit /b 1\n@for /f \"skip=3 tokens=1,*\" %%a in ('powershell Get-FileHash -Algorithm MD5 \"'%file_path%'\"') do @set hash=%%b\n@if not defined hash (\n  call :log 6\n  call :log 0 \"Failed to get MD5 hash for %file_path%\"\n  exit /b 1\n)\n@endlocal & set \"%var%=%hash: =%\"\n@goto :eof\n\n:windows_version - Checks the windows version\n:: %1 - The windows version\n:: %2 - The major version number return variable\n:: %3 - The minor version number return variable\n:: %4 - The revision version number return variable\n@setlocal\n@call :log 3 \"Retrieving the Windows version\"\n@for /f \"tokens=2 delims=[]\" %%x in ('ver') do @set win_ver=%%x\n@set win_ver=%win_ver:Version =%\n@set win_ver_major=%win_ver:~0,1%\n@set win_ver_minor=%win_ver:~2,1%\n@set win_ver_rev=%win_ver:~4%\n@call :log 4 \"win_ver = %win_ver%\"\n@endlocal & set \"%~1=%win_ver%\" ^\n          & set \"%~2=%win_ver_major%\" ^\n          & set \"%~3=%win_ver_minor%\" ^\n          & set \"%~4=%win_ver_rev%\"\n@goto :eof\n\n:find_in_path - Finds a program of file in the PATH\n@setlocal\n@set var=%~1\n@set file=%~2\n@if [%var%] == [] exit /b 1\n@if [%file%] == [] exit /b 1\n@call :log 3 \"Searching PATH for %file%\"\n@for %%x in (\"%file%\") do @set \"file_path=%%~f$PATH:x\"\n@if not defined file_path exit /b 1\n@endlocal & set \"%var%=%file_path%\"\n@goto :eof\n\n:administrator_check - Checks for administrator privileges\n@setlocal\n@call :log 2 \"Checking for administrator privileges\"\n@set \"key=HKLM\\Software\\VCA\\Tool Chain\\Admin Check\"\n@reg add \"%key%\" /v Elevated /t REG_DWORD /d 1 /f > nul 2>&1\n@if errorlevel 1 exit /b 1\n@reg delete \"%key%\" /va /f > nul 2>&1\n@endlocal\n@goto :eof\n\n:log_append - Appends another file into the current logging file\n:: %1 - the file_path to the file to concatenate\n@setlocal\n@set \"file_path=%~1\"\n@if [%file_path%] == [] exit /b 1\n@call :log 3 \"Appending to log: %file_path%\"\n@call :iso8601 iso8601\n@set \"temp_log=%temp%\\append-%iso8601%.log\"\n@call :log 4 \"Using temp file %temp_log%\"\n@type \"%log_path%\" \"%file_path%\" > \"%temp_log%\" 2>nul\n@move /y \"%temp_log%\" \"%log_path%\" 1>nul\n@del \"%file_path%\" 2>nul\n@del \"%temp_log%\" 2>nul\n@endlocal\n@goto :eof\n\n:iso8601 - Returns the current time in ISO8601 format\n:: %1 - the return variable\n:: %2 - format [extended|basic*]\n:: iso8601 - contains the resulting timestamp\n@setlocal\n@wmic Alias /? >NUL 2>&1 || @exit /b 1\n@set \"var=%~1\"\n@if \"%var%\" == \"\" @exit /b 1\n@set \"format=%~2\"\n@if \"%format%\" == \"\" set format=basic\n@for /F \"skip=1 tokens=1-6\" %%g IN ('wmic Path Win32_UTCTime Get Day^,Hour^,Minute^,Month^,Second^,Year /Format:table') do @(\n  @if \"%%~l\"==\"\" goto :iso8601_done\n  @set \"yyyy=%%l\"\n  @set \"mm=00%%j\"\n  @set \"dd=00%%g\"\n  @set \"hour=00%%h\"\n  @set \"minute=00%%i\"\n  @set \"seconds=00%%k\"\n)\n:iso8601_done\n@set mm=%mm:~-2%\n@set dd=%dd:~-2%\n@set hour=%hour:~-2%\n@set minute=%minute:~-2%\n@set seconds=%seconds:~-2%\n@if /i [%format%] == [extended] (\n  set iso8601=%yyyy%-%mm%-%dd%T%hour%:%minute%:%seconds%Z\n) else (\n  if /i [%format%] == [basic] (\n    set iso8601=%yyyy%%mm%%dd%T%hour%%minute%%seconds%Z\n  ) else (\n    @exit /b 1\n  )\n)\n@set iso8601=%iso8601: =0%\n@endlocal & set %var%=%iso8601%\n@goto :eof\n\n:verbosity - Processes the verbosity parameter '/v[v...]\n:: %1 - verbosity given on the command line\n:: logging_level - set to the number of v's\n@setlocal\n@set logging_level=0\n@set verbosity=%~1\n:verbosity_loop\n@set verbosity=%verbosity:~1%\n@if not [%verbosity%] == [] @(\n  set /a \"logging_level=logging_level+1\"\n  goto verbosity_loop\n)\n@endlocal & set logging_level=%logging_level%\n@goto :eof\n\n:log - Logs a message, depending on verbosity\n:: %1 - level\n::       [0-4] for CLI logging\n::       [5-9] for GUI logging\n:: %2 - message to print\n@setlocal\n@set \"level=%~1\"\n@set \"msg=%~2\"\n@if \"%log_folder%\" == \"\" (\n  echo Logging was used to early in the script, log_folder isn't set yet\n  goto :eof\n)\n@if \"%log_path%\" == \"\" (\n  echo Logging was used to early in the script, log_path isn't set yet\n  goto :eof\n)\n@if not exist \"%log_folder%\" mkdir \"%log_folder%\"\n@if not exist \"%log_path%\" echo. 1>nul 2>\"%log_path%\"\n@echo.%msg% >> \"%log_path%\"\n@if %level% geq 5 (\n  @if [%script_source%] == [explorer] (\n    set /a \"level=level-5\"\n  ) else (\n    @goto :eof\n  )\n)\n@if \"%logging_level%\" == \"\" (\n  echo Logging was used to early in the script, logging_level isn't set yet\n  goto :eof\n)\n@if %logging_level% geq %level% echo.%msg% 1>&2\n@endlocal\n@goto :eof\n\n\n:start_browser - Opens the default browser to a URL\n:: %1 - the url to open\n@setlocal\n@set url=%~1\n@call :log 4 \"Opening default browser: %url%\"\n@start %url%\n@endlocal\n@goto :eof\n\n:find_cmake - Finds cmake on the command line or in the registry\n:: %1 - the cmake file path\n@setlocal\n@set var=%~1\n@if [%var%] == [] exit /b 1\n@call :log 6\n@call :log 6 \"Finding CMake\"\n@call :log 6 \"--------------\"\n@call :find_in_path cmake_executable cmake.exe\n@if not errorlevel 1 goto found_cmake\n@for /l %%i in (5,-1,0) do @(\n@for /l %%j in (9,-1,0) do @(\n@for /l %%k in (9,-1,0) do @(\n@for %%l in (HKCU HKLM) do @(\n@for %%m in (SOFTWARE SOFTWARE\\Wow6432Node) do @(\n  @reg query \"%%l\\%%m\\Kitware\\CMake %%i.%%j.%%k\" /ve > nul 2>nul\n  @if not errorlevel 1 (\n    @for /f \"skip=2 tokens=2,*\" %%a in ('reg query \"%%l\\%%m\\Kitware\\CMake %%i.%%j.%%k\" /ve') do @(\n      @if exist \"%%b\\bin\\cmake.exe\" (\n        @set \"cmake_executable=%%b\\bin\\cmake.exe\"\n        goto found_cmake\n      )\n    )\n  )\n)))))\n@call :log 5\n@call :log 0 \"Failed to find cmake\"\n@exit /b 1\n:found_cmake\n@endlocal & set \"%var%=%cmake_executable%\"\n@goto :eof\n\n:cmake - Finds cmake and installs it if necessary\n:: %1 - the cmake file path\n@setlocal\n@set var=%~1\n@if [%var%] == [] exit /b 1\n@call :log 6\n@call :log 6 \"Checking for CMake\"\n@call :log 6 \"------------------\"\n@call :find_cmake cmake_executable cmake.exe\n@if not errorlevel 1 goto got_cmake\n@set checksum=C00267A3D3D9619A7A2E8FA4F46D7698\n@set version=3.2.2\n@call :install_nsis cmake http://www.cmake.org/files/v%version:~0,3%/cmake-%version%-win32-x86.exe %checksum%\n@if errorlevel 1 (\n  call :log 5\n  call :log 0 \"Failed to install cmake\"\n  @exit /b 1\n)\n@call :find_cmake cmake_executable cmake.exe\n@if not errorlevel 1 goto got_cmake\n@call :log 5\n@call :log 0 \"Failed to check for cmake\"\n@exit /b 1\n:got_cmake\n@endlocal & set \"%var%=%cmake_executable%\"\n@goto :eof\n\n:mingw - Finds MinGW, installing it if needed\n:: %1 - the compiler path that should be added to PATH\n@setlocal EnableDelayedExpansion\n@if errorlevel 1 (\n  @call :log 5\n  @call :log 0 \"Failed to enable extensions\"\n  @exit /b 1\n)\n@set var=%~1\n@if [%var%] == [] exit /b 1\n@call :log 6\n@call :log 6 \"Checking for MinGW\"\n@call :log 6 \"------------------\"\n@call :find_in_path gcc_executable gcc.exe\n@if not errorlevel 1 (\n  @for %%a in (\"%gcc_executable%\") do @set \"compiler_path=%%~dpa\"\n  goto got_mingw\n)\n@call :log 7\n@call :log 2 \"Downloading MinGW\"\n@if %logging_level% leq 1 set \"logging=/q\"\n@if %logging_level% gtr 1 set \"logging=/v\"\n@set output_path=\n@for /f %%a in ('call\n    \"%script_folder%\\mingw.cmd\"\n    %logging%\n    /arch \"%arch%\"\n    \"%dependency_path%\"'\n) do @set \"compiler_path=%%a\\\"\n@if not defined compiler_path (\n  @call :log_append \"%output%\"\n  @call :log 5\n  @call :log 0 \"Failed to download MinGW\"\n  @exit /b 1\n)\n:got_mingw\n@call :log 5\n@call :log 0 \"Found MinGW: %compiler_path%gcc.exe\"\n@endlocal & set \"%var%=%compiler_path%\"\n@goto :eof\n\n:msbuild - Finds MSBuild\n:: %1 - the path to MSBuild executable\n@setlocal\n@set var=%~1\n@if [%var%] == [] exit /b 1\n@call :find_in_path msbuild_executable msbuild.exe\n@if not errorlevel 1 goto got_msbuild\n@for /l %%i in (20,-1,4) do @(\n@for /l %%j in (9,-1,0) do @(\n@for %%k in (HKCU HKLM) do @(\n@for %%l in (SOFTWARE SOFTWARE\\Wow6432Node) do @(\n  @reg query \"%%k\\%%l\\Microsoft\\MSBuild\\%%i.%%j\" /v MSBuildOverrideTasksPath > nul 2>nul\n  @if not errorlevel 1 (\n    @for /f \"skip=2 tokens=2,*\" %%a in ('reg query \"%%k\\%%l\\Microsoft\\MSBuild\\%%i.%%j\" /v MSBuildOverrideTasksPath') do @(\n      @if exist \"%%bmsbuild.exe\" (\n        @set \"msbuild_executable=%%bmsbuild.exe\"\n        goto got_msbuild\n      )\n    )\n  )\n))))\n@call :log 5\n@call :log 0 \"Failed to check for MSBuild\"\n@exit /b 1\n:got_msbuild\n@endlocal & set \"%var%=%msbuild_executable%\"\n@goto :eof\n\n:download - Downloads a file from the internet\n:: %1 - the url of the file to download\n:: %2 - the file to download to\n:: %3 - the MD5 checksum of the file (optional)\n@setlocal EnableDelayedExpansion\n@if errorlevel 1 (\n  call :print_usage \"Failed to enable extensions\"\n  exit /b 1\n)\n@set url=%~1\n@set file_path=%~2\n@set checksum=%~3\n@for %%a in (%file_path%) do @set dir_path=%%~dpa\n@for %%a in (%file_path%) do @set file_name=%%~nxa\n@if [%url%] == [] exit /b 1\n@if [%file_path%] == [] exit /b 1\n@if [%dir_path%] == [] exit /b 1\n@if [%file_name%] == [] exit /b 1\n@if not exist \"%dir_path%\" mkdir \"%dir_path%\"\n@call :log 1 \"Downloading %url%\"\n@call :iso8601 iso8601\n@set temp_path=%temp%\\download-%iso8601%-%file_name%\n@call :log 3 \"Using temp file %temp_path%\"\n@powershell Invoke-WebRequest \"%url%\" -OutFile %temp_path%\n@if errorlevel 1 (\n  call :log 0 \"Failed to download %url%\"\n  exit /b 1\n)\n@if [%checksum%] neq [] (\n  @call :log 4 \"Checking %checksum% against %temp_path%\"\n  @call :md5 hash \"%temp_path%\"\n  if \"!hash!\" neq \"%checksum%\" (\n    call :log 0 \"Failed to match checksum: %temp_path%\"\n    call :log 0 \"Hash    : !hash!\"\n    call :log 0 \"Checksum: %checksum%\"\n    exit /b 1\n  ) else (\n    call :log 3 \"Checksum matched: %temp_path%\"\n    call :log 3 \"Hash    : !hash!\"\n    call :log 3 \"Checksum: %checksum%\"\n  )\n)\n@call :log 4 \"Renaming %temp_path% to %file_path%\"\n@move /y \"%temp_path%\" \"%file_path%\" 1>nul\n@endlocal\n@goto :eof\n\n:install_msi - Installs a dependency from an Microsoft Installer package (.msi)\n:: %1 - [string] name of the project to install\n:: %2 - The location of the .msi, a url must start with 'http://' or file_path\n:: %3 - The checksum of the msi (optional)\n@setlocal\n@set name=%~1\n@set file_path=%~2\n@set checksum=%~3\n@set msi=%~nx2\n@set msi_path=%dependency_path%\\%msi%\n@if [%name%] == [] exit /b 1\n@if [%file_path%] == [] exit /b 1\n@if [%msi%] == [] exit /b 1\n@if [%msi_path%] == [] exit /b 1\n@for %%x in (msiexec.exe) do @set \"msiexec_path=%%~f$PATH:x\"\n@if \"msiexec_path\" == \"\" (\n  call :log 0 \"Failed to find the Microsoft package installer (msiexec.exe)\"\n  call :log 6\n  call :log 0 \"Please install it from the Microsoft Download center\"\n  call :log 6\n  choice /C YN /T 60 /D N /M \"Would you like to go there now?\"\n  if !errorlevel! equ 1 call :start_browser ^\n    \"http://search.microsoft.com/DownloadResults.aspx?q=Windows+Installer\"\n  exit /b 1\n)\n@call :log 6\n@call :log 1 \"Installing the '%name%' dependency\"\n@call :log 6 \"-------------------------------------\"\n@call :administrator_check\n@if errorlevel 1 (\n  call :log 0 \"You must run %~nx0 in elevated mode to install '%name%'\"\n  call :log 5 \"Right-Click and select 'Run as Administrator'\n  call :log 0 \"Install the dependency manually by running %file_path%\"\n  @exit /b 740\n)\n@if [%file_path:~0,4%] == [http] (\n  if not exist \"%msi_path%\" (\n    call :download \"%file_path%\" \"%msi_path%\" %checksum%\n    if errorlevel 1 (\n      call :log 0 \"Failed to download the %name% dependency\"\n      exit /b 1\n    )\n  )\n) else (\n  call :log 2 \"Copying MSI %file_path% to %msi_path%\"\n  call :log 7\n  if not exist \"%msi_path%\" (\n    xcopy /q /y /z \"%file_path%\" \"%msi_path%\" 1>nul\n    if errorlevel 1 (\n      call :log 0 \"Failed to copy the Microsoft Installer\"\n      exit /b 1\n    )\n  )\n)\n@call :log 1 \"Running the %msi%\"\n@call :log 6\n@set msi_log=%temp%\\msiexec-%timestamp%.log\n@call :log 3 \"Logging to: %msi_log%\"\n@msiexec /i \"%msi_path%\" /passive /log \"%msi_log%\" ALLUSERS=1\n@set msi_errorlevel=%errorlevel%\n@call :log_append \"%msi_log%\"\n@if %msi_errorlevel% equ 0 goto install_msi_success\n@if %msi_errorlevel% equ 3010 goto install_msi_success_reboot\n@if %msi_errorlevel% equ 1641 goto install_msi_success_reboot\n@if %msi_errorlevel% equ 3015 goto install_msi_in_progress_reboot\n@if %msi_errorlevel% equ 1615 goto install_msi_in_progress_reboot\n@call :log 0 \"Microsoft Installer failed: %msi_errorlevel%\"\n@call :log 0 \"Install the dependency manually by running %msi_path%\"\n@exit /b 1\n:install_msi_in_progress_reboot\n@call :log 0 \"The installation requires a reboot to continue\"\n@call :log 5\n@call :reboot\n@exit /b 1\n:install_msi_success_reboot\n@call :log 3 \"The installation requires a reboot to be fully functional\"\n@set reboot_required=1\n:install_msi_success\n@call :log 2 \"Successfully installed %name%\"\n@call :log 7\n@endlocal & set reboot_required=%reboot_required%\n@goto :eof\n\n:install_nsis - Installs a dependency from an Nullsoft Installer package (.exe)\n:: %1 - [string] name of the project to install\n:: %2 - The location of the .exe, a url must start with 'http://' or file_path\n:: %3 - The checksum of the exe (optional)\n@setlocal\n@set name=%~1\n@set file_path=%~2\n@set checksum=%~3\n@set exe=%~nx2\n@set exe_path=%dependency_path%\\%exe%\n@if [%name%] == [] exit /b 1\n@if [%file_path%] == [] exit /b 1\n@if [%exe%] == [] exit /b 1\n@if [%exe_path%] == [] exit /b 1\n@call :log 6\n@call :log 1 \"Installing the '%name%' dependency\"\n@call :log 6 \"-------------------------------------\"\n@call :administrator_check\n@if errorlevel 1 (\n  call :log 0 \"You must run %~nx0 in elevated mode to install '%name%'\"\n  call :log 5 \"Right-Click and select 'Run as Administrator'\n  call :log 0 \"Install the dependency manually by running %file_path%\"\n  @exit /b 740\n)\n@if [%file_path:~0,4%] == [http] (\n  if not exist \"%exe_path%\" (\n    call :download \"%file_path%\" \"%exe_path%\" %checksum%\n    if errorlevel 1 (\n      call :log 0 \"Failed to download the %name% dependency\"\n      exit /b 1\n    )\n  )\n) else (\n  call :log 2 \"Copying installer %file_path% to %exe_path%\"\n  call :log 7\n  if not exist \"%exe_path%\" (\n    xcopy /q /y /z \"%file_path%\" \"%exe_path%\" 1>nul\n    if errorlevel 1 (\n      call :log 0 \"Failed to copy the Nullsoft Installer\"\n      exit /b 1\n    )\n  )\n)\n@call :log 1 \"Running the %exe%\"\n@call :log 6\n@\"%exe_path%\" /S\n@set nsis_errorlevel=%errorlevel%\n@if %nsis_errorlevel% equ 0 goto install_nsis_success\n@if %nsis_errorlevel% equ 3010 goto install_nsis_success_reboot\n@if %nsis_errorlevel% equ 1641 goto install_nsis_success_reboot\n@if %nsis_errorlevel% equ 3015 goto install_nsis_in_progress_reboot\n@if %nsis_errorlevel% equ 1615 goto install_nsis_in_progress_reboot\n@call :log 0 \"Nullsoft Installer failed: %nsis_errorlevel%\"\n@call :log 0 \"Install the dependency manually by running %exe_path%\"\n@exit /b 1\n:install_nsis_in_progress_reboot\n@call :log 0 \"The installation requires a reboot to continue\"\n@call :log 5\n@call :reboot\n@exit /b 1\n:install_nsis_success_reboot\n@call :log 3 \"The installation requires a reboot to be fully functional\"\n@set reboot_required=1\n:install_nsis_success\n@call :log 2 \"Successfully installed %name%\"\n@call :log 7\n@endlocal & set reboot_required=%reboot_required%\n@goto :eof\n\n:reboot - Asks the user if they would like to reboot then stops the script\n@setlocal\n@call :log 6 \"-------------------------------------------\"\n@choice /C YN /T 60 /D N /M \"The %method% requires a reboot, reboot now?\"\n@set ret=%errorlevel%\n@call :log 6\n@if %ret% equ 1 (\n  @shutdown /r\n) else (\n  @call :log 0 \"You will need to reboot to complete the %method%\"\n  @call :log 5\n)\n@endlocal\n@goto :eof\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.298828125,
          "content": "codecov:\n  require_ci_to_pass: yes\n\ncoverage:\n  precision: 2\n  round: nearest\n  range: \"70...100\"\n\nparsers:\n  gcov:\n    branch_detection:\n      conditional: yes\n      loop: yes\n      method: no\n      macro: no\n\ncomment:\n  layout: \"reach,diff,flags,files,footer\"\n  behavior: default\n  require_changes: no\n  "
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "distribution",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "format.bat",
          "type": "blob",
          "size": 1.517578125,
          "content": "#!/bin/sh\nclang-format -i src/civetweb.c\nclang-format -i src/main.c\nclang-format -i src/CivetServer.cpp\nclang-format -i src/civetweb_private_lua.h\nclang-format -i src/md5.inl\nclang-format -i src/sha1.inl\nclang-format -i src/sort.inl\nclang-format -i src/match.inl\nclang-format -i src/mod_lua.inl\nclang-format -i src/mod_lua_shared.inl\nclang-format -i src/mod_duktape.inl\nclang-format -i src/mod_zlib.inl\nclang-format -i src/openssl_dl.inl\nclang-format -i src/timer.inl\nclang-format -i src/handle_form.inl\nclang-format -i src/response.inl\nclang-format -i src/http2.inl\nclang-format -i src/mod_mbedtls.inl\nclang-format -i src/mod_gnutls.inl\n\nclang-format -i src/third_party/civetweb_lua.h\n\nclang-format -i include/civetweb.h\nclang-format -i include/CivetServer.h\n\nclang-format -i unittest/public_func.h\nclang-format -i unittest/public_func.c\nclang-format -i unittest/public_server.h\nclang-format -i unittest/public_server.c\nclang-format -i unittest/private.h\nclang-format -i unittest/private.c\nclang-format -i unittest/private_exe.h\nclang-format -i unittest/private_exe.c\nclang-format -i unittest/shared.h\nclang-format -i unittest/shared.c\nclang-format -i unittest/timertest.h\nclang-format -i unittest/timertest.c\nclang-format -i unittest/civetweb_check.h\nclang-format -i unittest/main.c\n\nclang-format -i fuzztest/fuzzmain.c\n\nclang-format -i examples/embedded_c/embedded_c.c\nclang-format -i examples/rest/rest.c\nclang-format -i examples/client/client.c\nclang-format -i examples/embed_certificate/ec_example.c\nclang-format -i examples/ws_server/ws_server.c\n\n"
        },
        {
          "name": "fuzztest",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "mingw.cmd",
          "type": "blob",
          "size": 25.9423828125,
          "content": ":: Make sure the extensions are enabled\n@verify other 2>nul\n@setlocal EnableExtensions EnableDelayedExpansion\n@if errorlevel 1 (\n  @call :print_usage \"Failed to enable extensions\"\n  @exit /b 1\n)\n\n::Change the code page to unicode\n@chcp 65001 1>nul 2>nul\n@if errorlevel 1 (\n  @call :print_usage \"Failed to change the code page to unicode\"\n  @exit /b 1\n)\n\n:: Set up some global variables\n@set \"script_name=%~nx0\"\n@set \"script_folder=%~dp0\"\n@set \"script_folder=%script_folder:~0,-1%\"\n@set \"dependency_path=%TEMP%\\mingw-build-dependencies\"\n\n:: Check the command line parameters\n@set logging_level=1\n:options_loop\n@if [%1] == [] goto :options_parsed\n@set \"arg=%~1\"\n@set one=%arg:~0,1%\n@set two=%arg:~0,2%\n@set three=%arg:~0,3%\n@if /i [%arg%] == [/?] (\n  @call :print_usage \"Downloads a specific version of MinGW\"\n  @exit /b 0\n)\n@if /i [%arg%] == [/q] set quiet=true\n@if /i [%two%] == [/v] @if /i not [%three%] == [/ve] @call :verbosity \"!arg!\"\n@if /i [%arg%] == [/version] set \"version=%~2\" & shift\n@if /i [%arg%] == [/arch] set \"arch=%~2\" & shift\n@if /i [%arg%] == [/exceptions] set \"exceptions=%~2\" & shift\n@if /i [%arg%] == [/threading] set \"threading=%~2\" & shift\n@if /i [%arg%] == [/revision] set \"revision=%~2\" & shift\n@if /i not [!one!] == [/] (\n  if not defined output_path (\n    set output_path=!arg!\n  ) else (\n    @call :print_usage \"Too many output locations: !output_path! !arg!\" ^\n                       \"There should only be one output location\"\n    @exit /b 1\n  )\n)\n@shift\n@goto :options_loop\n:options_parsed\n@if defined quiet set logging_level=0\n@if not defined output_path set \"output_path=%script_folder%\\mingw-builds\"\n@set \"output_path=%output_path:/=\\%\"\n\n:: Set up the logging\n@set \"log_folder=%output_path%\\logs\"\n@call :iso8601 timestamp\n@set \"log_path=%log_folder%\\%timestamp%.log\"\n@set log_keep=10\n\n:: Get default architecture\n@if not defined arch @call :architecture arch\n\n:: Only keep a certain amount of logs\n@set /a \"log_keep=log_keep-1\"\n@if not exist %log_folder% @mkdir %log_folder%\n@for /f \"skip=%log_keep%\" %%f in ('dir /b /o-D /tc %log_folder%') do @(\n  @call :log 4 \"Removing old log file %log_folder%\\%%f\"\n  del %log_folder%\\%%f\n)\n\n:: Set up some more global variables\n@call :windows_version win_ver win_ver_major win_ver_minor win_ver_rev\n@call :script_source script_source\n@if [%script_source%] == [explorer] (\n  set /a \"logging_level=logging_level+1\"\n)\n\n:: Execute the main function\n@call :main \"%arch%\" \"%version%\" \"%threading%\" \"%exceptions%\" \"%revision%\"\n@if errorlevel 1 (\n  @call :log 0 \"Failed to download MinGW\"\n  @call :log 0 \"View the log at %log_path%\"\n  @exit /b 1\n)\n\n:: Stop the script if the user double clicked\n@if [%script_source%] == [explorer] (\n  pause\n)\n\n@endlocal\n@goto :eof\n\n:: -------------------------- Functions start here ----------------------------\n\n:main - Main function that performs the download\n:: %1 - Target architecture\n:: %2 - Version of MinGW to get [optional]\n:: %3 - Threading model [optional]\n:: %4 - Exception model [optional]\n:: %5 - Package revision [optional]\n@setlocal\n@call :log 6\n@call :log 2 \"Welcome to the MinGW download script\"\n@call :log 6 \"------------------------------------\"\n@call :log 6\n@call :log 2 \"This script downloads a specific version of MinGW\"\n@set \"arch=%~1\"\n@if \"%arch%\" == \"\" @exit /b 1\n@set \"version=%~2\"\n@set \"threading=%~3\"\n@set \"exceptions=%~4\"\n@set \"revision=%~5\"\n@call :log 3 \"arch       = %arch%\"\n@call :log 3 \"version    = %version%\"\n@call :log 3 \"exceptions = %exceptions%\"\n@call :log 3 \"threading  = %threading%\"\n@call :log 3 \"revision   = %revision%\"\n@call :repository repo\n@if errorlevel 1 (\n  @call :log 0 \"Failed to get the MinGW-builds repository information\"\n  @exit /b 1\n)\n@call :resolve slug url \"%repo%\" \"%arch%\" \"%version%\" \"%threading%\" \"%exceptions%\" \"%revision%\"\n@if errorlevel 1 (\n  @call :log 0 \"Failed to resolve the correct URL of MinGW\"\n  @exit /b 1\n)\n@call :unpack compiler_path \"%url%\" \"%output_path%\\mingw\\%slug%\"\n@if errorlevel 1 (\n  @call :log 0 \"Failed to unpack the MinGW archive\"\n  @exit /b 1\n)\n@rmdir /s /q \"%dependency_path%\"\n@echo.%compiler_path%\n@endlocal\n@goto :eof\n\n:repository - Gets the MinGW-builds repository\n:: %1 - The return variable for the repository file path\n@verify other 2>nul\n@setlocal EnableDelayedExpansion\n@if errorlevel 1 (\n  @call :log 0 \"Failed to enable extensions\"\n  @exit /b 1\n)\n@set \"var=%~1\"\n@if \"%var%\" == \"\" @exit /b 1\n@call :log 7\n@call :log 2 \"Getting MinGW repository information\"\n@set \"url=http://downloads.sourceforge.net/project/mingw-w64/Toolchains targetting Win32/Personal Builds/mingw-builds/installer/repository.txt\"\n@call :log 6\n@call :log 1 \"Downloading MinGW repository\"\n@set \"file_path=%dependency_path%\\mingw-repository.txt\"\n@call :download \"%url%\" \"%file_path%\"\n@if errorlevel 1 (\n  @call :log 0 \"Failed to download the MinGW repository information\"\n  @exit /b 1\n)\n@set \"repository_path=%dependency_path%\\repository.txt\"\n@del \"%repository_path%\" 2>nul\n@for /f \"delims=| tokens=1-6,*\" %%a in (%file_path%) do @(\n  @set \"version=%%~a\"\n  @set \"version=!version: =!\"\n  @set \"arch=%%~b\"\n  @set \"arch=!arch: =!\"\n  @set \"threading=%%~c\"\n  @set \"threading=!threading: =!\"\n  @set \"exceptions=%%~d\"\n  @set \"exceptions=!exceptions: =!\"\n  @set \"revision=%%~e\"\n  @set \"revision=!revision: =!\"\n  @set \"revision=!revision:rev=!\"\n  @set \"url=%%~f\"\n  @set \"url=!url:%%20= !\"\n  @for /l %%a in (1,1,32) do @if \"!url:~-1!\" == \" \" set url=!url:~0,-1!\n  @echo !arch!^|!version!^|!threading!^|!exceptions!^|!revision!^|!url!>> \"%repository_path%\"\n)\n@del \"%file_path%\" 2>nul\n@endlocal & set \"%var%=%repository_path%\"\n@goto :eof\n\n:resolve - Gets the MinGW-builds repository\n:: %1 - The return variable for the MinGW slug\n:: %2 - The return variable for the MinGW URL\n:: %3 - The repository information to use\n:: %4 - Target architecture\n:: %5 - Version of MinGW to get [optional]\n:: %6 - Threading model [optional]\n:: %7 - Exception model [optional]\n:: %8 - Package revision [optional]\n@setlocal\n@set \"slug_var=%~1\"\n@if \"%slug_var%\" == \"\" @exit /b 1\n@set \"url_var=%~2\"\n@if \"%url_var%\" == \"\" @exit /b 1\n@set \"repository=%~3\"\n@if \"%repository%\" == \"\" @exit /b 1\n@set \"arch=%~4\"\n@if \"%arch%\" == \"\" @exit /b 1\n@call :resolve_version version \"%repository%\" \"%arch%\" \"%~5\"\n@if errorlevel 1 @exit /b 1\n@call :resolve_threading threading \"%repository%\" \"%arch%\" \"%version%\" \"%~6\"\n@if errorlevel 1 @exit /b 1\n@call :resolve_exceptions exceptions \"%repository%\" \"%arch%\" \"%version%\" \"%threading%\" \"%~7\"\n@if errorlevel 1 @exit /b 1\n@call :resolve_revision revision \"%repository%\" \"%arch%\" \"%version%\" \"%threading%\" \"%exceptions%\" \"%~8\"\n@if errorlevel 1 @exit /b 1\n@call :log 3 \"Finding URL\"\n@for /f \"delims=| tokens=1-6\" %%a in (%repository%) do @(\n  @if \"%arch%\" == \"%%a\" (\n    @if \"%version%\" == \"%%b\" (\n      @if \"%threading%\" == \"%%c\" (\n        @if \"%exceptions%\" == \"%%d\" (\n          @if \"%revision%\" == \"%%e\" (\n            @set \"url=%%f\"\n) ) ) ) ) )\n@if \"%url%\" == \"\" (\n  @call :log 0 \"Failed to resolve URL\"\n  @exit /b 1\n)\n@set slug=gcc-%version%-%arch%-%threading%-%exceptions%-rev%revision%\n@call :log 2 \"Resolved slug: %slug%\"\n@call :log 2 \"Resolved url: %url%\"\n@endlocal & set \"%slug_var%=%slug%\" & set \"%url_var%=%url%\"\n@goto :eof\n\n:unpack - Unpacks the MinGW archive\n:: %1 - The return variable name for the compiler path\n:: %2 - The filepath or URL of the archive\n:: %3 - The folder to unpack to\n@verify other 2>nul\n@setlocal EnableDelayedExpansion\n@if errorlevel 1 (\n  @call :log 0 \"Failed to enable extensions\"\n  @exit /b 1\n)\n@set \"var=%~1\"\n@if \"%var%\" == \"\" @exit /b 1\n@set \"archive_path=%~2\"\n@if \"%archive_path%\" == \"\" @exit /b 1\n@set \"folder_path=%~3\"\n@if \"%folder_path%\" == \"\" @exit /b 1\n@set \"compiler_path=%folder_path%\\bin\"\n@if exist \"%compiler_path%\" goto :unpack_done\n@call :log 7\n@call :log 2 \"Unpacking MinGW archive\"\n@set \"http=%archive_path:~0,4%\"\n@if \"%http%\" == \"http\" (\n  @set \"url=%archive_path%\"\n  @for /f %%a in (\"!url: =-!\") do @set \"file_name=%%~na\"\n  @for /f %%a in (\"!url: =-!\") do @set \"file_ext=%%~xa\"\n  @set \"archive_path=%dependency_path%\\!file_name!!file_ext!\"\n  @if not exist \"!archive_path!\" (\n    @call :log 6\n    @call :log 1 \"Downloading MinGW archive\"\n    @call :download \"!url!\" \"!archive_path!\"\n    @if errorlevel 1 (\n      @del \"!archive_path!\" 2>nul\n      @call :log 0 \"Failed to download: !file_name!!file_ext!\"\n      @exit /b 1\n    )\n  )\n)\n@if not exist \"%archive_path%\" (\n  @call :log 0 \"The archive did not exist to unpack: %archive_path%\"\n  @exit /b 1\n)\n@for /f %%a in (\"%archive_path: =-%\") do @set \"file_name=%%~na\"\n@for /f %%a in (\"%archive_path: =-%\") do @set \"file_ext=%%~xa\"\n@call :log 6\n@call :log 1 \"Unpacking MinGW %file_name%%file_ext%\"\n@call :find_sevenzip sevenzip_executable\n@if errorlevel 1 (\n  @call :log 0 \"Need 7zip to unpack the MinGW archive\"\n  @exit /b 1\n)\n@call :iso8601 iso8601\n@for /f %%a in (\"%folder_path%\") do @set \"tmp_path=%%~dpatmp-%iso8601%\"\n@\"%sevenzip_executable%\" x -y \"-o%tmp_path%\" \"%archive_path%\" > nul\n@if errorlevel 1 (\n  @rmdir /s /q \"%folder_path%\"\n  @call :log 0 \"Failed to unpack the MinGW archive\"\n  @exit /b 1\n)\n@set \"expected_path=%tmp_path%\\mingw64\"\n@if not exist \"%expected_path%\" (\n  @set \"expected_path=%tmp_path%\\mingw32\"\n)\n@move /y \"%expected_path%\" \"%folder_path%\" > nul\n@if errorlevel 1 (\n  @rmdir /s /q \"%tmp_path%\" 2>nul\n  @call :log 0 \"Failed to move MinGW folder\"\n  @call :log 0 \"%expected_path%\"\n  @call :log 0 \"%folder_path%\"\n  @exit /b 1\n)\n@rmdir /s /q %tmp_path%\n@set \"compiler_path=%folder_path%\\bin\"\n:unpack_done\n@if not exist \"%compiler_path%\\gcc.exe\" (\n  @call :log 0 \"Failed to find gcc: %compiler_path%\"\n  @exit /b 1\n)\n@endlocal & set \"%var%=%compiler_path%\"\n@goto :eof\n\n:find_sevenzip - Finds (or downloads) the 7zip executable\n:: %1 - The return variable for the 7zip executable path\n@setlocal\n@set \"var=%~1\"\n@if \"%var%\" == \"\" @exit /b 1\n@call :log 2 \"Finding 7zip\"\n@call :find_in_path sevenzip_executable 7z.exe\n@if not errorlevel 1 goto :find_sevenzip_done\n@call :find_in_path sevenzip_executable 7za.exe\n@if not errorlevel 1 goto :find_sevenzip_done\n@set checksum=2FAC454A90AE96021F4FFC607D4C00F8\n@set \"url=http://7-zip.org/a/7za920.zip\"\n@for /f %%a in (\"%url: =-%\") do @set \"file_name=%%~na\"\n@for /f %%a in (\"%url: =-%\") do @set \"file_ext=%%~xa\"\n@set \"archive_path=%dependency_path%\\%file_name%%file_ext%\"\n@if not exist \"%archive_path%\" (\n  @call :log 6\n  @call :log 1 \"Downloading 7zip archive\"\n  @call :download \"%url%\" \"%archive_path%\" %checksum%\n  @if errorlevel 1 (\n    @del \"%archive_path%\" 2>nul\n    @call :log 0 \"Failed to download: %file_name%%file_ext%\"\n    @exit /b 1\n  )\n)\n@set \"sevenzip_path=%dependency_path%\\sevenzip\"\n@if not exist \"%sevenzip_path%\" (\n  @call :unzip \"%archive_path%\" \"%sevenzip_path%\"\n  @if errorlevel 1 (\n    @call :log 0 \"Failed to unzip the7zip archive\"\n    @exit /b 1\n  )\n)\n@set \"sevenzip_executable=%sevenzip_path%\\7za.exe\"\n@if not exist \"%sevenzip_executable%\" (\n  @call :log 0 \"Failed to find unpacked 7zip: %sevenzip_executable%\"\n  @exit /b 1\n)\n:find_sevenzip_done\n@call :log 2 \"Found 7zip: %sevenzip_executable%\"\n@endlocal & set \"%var%=%sevenzip_executable%\"\n@goto :eof\n\n:unzip - Unzips a .zip archive\n:: %1 - The archive to unzip\n:: %2 - The location to unzip to\n@setlocal\n@set \"archive_path=%~1\"\n@if \"%archive_path%\" == \"\" @exit /b 1\n@set \"folder_path=%~2\"\n@if \"%folder_path%\" == \"\" @exit /b 1\n@for /f %%a in (\"%archive_path: =-%\") do @set \"file_name=%%~na\"\n@for /f %%a in (\"%archive_path: =-%\") do @set \"file_ext=%%~xa\"\n@call :log 2 \"Unzipping: %file_name%%file_ext%\"\n@call :iso8601 iso8601\n@set \"log_path=%temp%\\unzip-%iso8601%-%file_name%.log\"\n@powershell ^\n  Add-Type -assembly \"system.io.compression.filesystem\"; ^\n  [io.compression.zipfile]::ExtractToDirectory(^\n    '%archive_path%', '%folder_path%') 2>\"%log_path%\"\n@if errorlevel 1 (\n  @call :log 0 \"Failed to unzip: %file_name%%file_ext%\"\n  @call :log_append \"%log_path%\"\n  @exit /b 1\n)\n@endlocal\n@goto :eof\n\n:resolve_version - Gets the version of the MinGW compiler\n:: %1 - The return variable for the version\n:: %2 - The repository information to use\n:: %3 - The architecture of the compiler\n:: %4 - Version of MinGW to get [optional]\n@verify other 2>nul\n@setlocal EnableDelayedExpansion\n@if errorlevel 1 (\n  @call :log 0 \"Failed to enable extensions\"\n  @exit /b 1\n)\n@set \"var=%~1\"\n@if \"%var%\" == \"\" @exit /b 1\n@set \"repository=%~2\"\n@if \"%repository%\" == \"\" @exit /b 1\n@set \"arch=%~3\"\n@if \"%arch%\" == \"\" @exit /b 1\n@set \"version=%~4\"\n@if not \"%version%\" == \"\" goto :resolve_version_done\n:: Find the latest version\n@call :log 3 \"Finding latest version\"\n@set version=0.0.0\n@for /f \"delims=| tokens=1-6\" %%a in (%repository%) do @(\n  @if \"%arch%\" == \"%%a\" (\n    @call :version_compare result \"%version%\" \"%%b\"\n    @if errorlevel 1 (\n      @call :log 0 \"Failed to compare versions: %version% %%a\"\n      @exit /b 1\n    )\n    @if !result! lss 0 set version=%%b\n  )\n)\n:resolve_version_done\n@if \"%version%\" == \"\" (\n  @call :log 0 \"Failed to resolve latest version number\"\n  @exit /b 1\n)\n@call :log 2 \"Resolved version: %version%\"\n@endlocal & set \"%var%=%version%\"\n@goto :eof\n\n:resolve_threading - Gets the threading model of the MinGW compiler\n:: %1 - The return variable for the threading model\n:: %2 - The repository information to use\n:: %3 - The architecture of the compiler\n:: %4 - The version of the compiler\n:: %5 - threading model of MinGW to use [optional]\n@verify other 2>nul\n@setlocal EnableDelayedExpansion\n@if errorlevel 1 (\n  @call :log 0 \"Failed to enable extensions\"\n  @exit /b 1\n)\n@set \"var=%~1\"\n@if \"%var%\" == \"\" @exit /b 1\n@set \"repository=%~2\"\n@if \"%repository%\" == \"\" @exit /b 1\n@set \"arch=%~3\"\n@if \"%arch%\" == \"\" @exit /b 1\n@set \"version=%~4\"\n@if \"%version%\" == \"\" @exit /b 1\n@set \"threading=%~5\"\n@if not \"%threading%\" == \"\" goto :resolve_threading_done\n@call :log 3 \"Finding best threading model\"\n@for /f \"delims=| tokens=1-6\" %%a in (%repository%) do @(\n  @if \"%arch%\" == \"%%a\" (\n    @if \"%version%\" == \"%%b\" (\n      @if not defined threading (\n        @set \"threading=%%c\"\n      )\n      @if \"%%c\" == \"posix\" (\n        @set \"threading=%%c\"\n) ) ) )\n:resolve_threading_done\n@if \"%threading%\" == \"\" (\n  @call :log 0 \"Failed to resolve the best threading model\"\n  @exit /b 1\n)\n@call :log 2 \"Resolved threading model: %threading%\"\n@endlocal & set \"%var%=%threading%\"\n@goto :eof\n\n:resolve_exceptions - Gets the exception model of the MinGW compiler\n:: %1 - The return variable for the exception model\n:: %2 - The repository information to use\n:: %3 - The architecture of the compiler\n:: %4 - The version of the compiler\n:: %4 - The threading model of the compiler\n:: %5 - exception model of MinGW to use [optional]\n@verify other 2>nul\n@setlocal EnableDelayedExpansion\n@if errorlevel 1 (\n  @call :log 0 \"Failed to enable extensions\"\n  @exit /b 1\n)\n@set \"var=%~1\"\n@if \"%var%\" == \"\" @exit /b 1\n@set \"repository=%~2\"\n@if \"%repository%\" == \"\" @exit /b 1\n@set \"arch=%~3\"\n@if \"%arch%\" == \"\" @exit /b 1\n@set \"version=%~4\"\n@if \"%version%\" == \"\" @exit /b 1\n@set \"threading=%~5\"\n@if \"%threading%\" == \"\" @exit /b 1\n@set \"exceptions=%~6\"\n@if not \"%exceptions%\" == \"\" goto :resolve_exceptions_done\n@call :log 3 \"Finding best exception model\"\n@for /f \"delims=| tokens=1-6\" %%a in (%repository%) do @(\n  @if \"%arch%\" == \"%%a\" (\n    @if \"%version%\" == \"%%b\" (\n      @if \"%threading%\" == \"%%c\" (\n        @if not defined exceptions (\n          @set \"exceptions=%%d\"\n        )\n        @if \"%%d\" == \"dwarf\" (\n          @set \"exceptions=%%d\"\n        )\n        @if \"%%d\" == \"seh\" (\n          @set \"exceptions=%%d\"\n) ) ) ) )\n:resolve_exceptions_done\n@if \"%exceptions%\" == \"\" (\n  @call :log 0 \"Failed to resolve the best exception model\"\n  @exit /b 1\n)\n@call :log 2 \"Resolved exception model: %exceptions%\"\n@endlocal & set \"%var%=%exceptions%\"\n@goto :eof\n\n:resolve_revision - Gets the revision of the MinGW compiler\n:: %1 - The return variable for the revision\n:: %2 - The repository information to use\n:: %3 - The architecture of the compiler\n:: %4 - The version of the compiler\n:: %4 - The threading model of the compiler\n:: %4 - The exception model of the compiler\n:: %5 - revision of the MinGW package to use [optional]\n@verify other 2>nul\n@setlocal EnableDelayedExpansion\n@if errorlevel 1 (\n  @call :log 0 \"Failed to enable extensions\"\n  @exit /b 1\n)\n@set \"var=%~1\"\n@if \"%var%\" == \"\" @exit /b 1\n@set \"repository=%~2\"\n@if \"%repository%\" == \"\" @exit /b 1\n@set \"arch=%~3\"\n@if \"%arch%\" == \"\" @exit /b 1\n@set \"version=%~4\"\n@if \"%version%\" == \"\" @exit /b 1\n@set \"threading=%~5\"\n@if \"%threading%\" == \"\" @exit /b 1\n@set \"exceptions=%~6\"\n@if \"%exceptions%\" == \"\" @exit /b 1\n@set \"revision=%~7\"\n@if not \"%revision%\" == \"\" goto :resolve_revision_done\n@call :log 3 \"Finding latest revision\"\n@for /f \"delims=| tokens=1-6\" %%a in (%repository%) do @(\n  @if \"%arch%\" == \"%%a\" (\n    @if \"%version%\" == \"%%b\" (\n      @if \"%threading%\" == \"%%c\" (\n        @if \"%exceptions%\" == \"%%d\" (\n          @if \"%%e\" gtr \"%revision%\" (\n            @set \"revision=%%e\"\n) ) ) ) ) )\n:resolve_revision_done\n@if \"%revision%\" == \"\" (\n  @call :log 0 \"Failed to resolve latest revision\"\n  @exit /b 1\n)\n@call :log 2 \"Resolved revision: %revision%\"\n@endlocal & set \"%var%=%revision%\"\n@goto :eof\n\n:version_compare - Compares two semantic version numbers\n:: %1 - The return variable:\n::        - < 0 : if %2 < %3\n::        -   0 : if %2 == %3\n::        - > 0 : if %2 > %3\n:: %2 - The first version to compare\n:: %3 - The second version to compare\n@setlocal\n@set \"var=%~1\"\n@if \"%var%\" == \"\" @exit /b 1\n@set \"lhs=%~2\"\n@if \"%lhs%\" == \"\" @exit /b 1\n@set \"rhs=%~3\"\n@if \"%lhs%\" == \"\" @exit /b 1\n@set result=0\n@for /f \"delims=. tokens=1-6\" %%a in (\"%lhs%.%rhs%\") do @(\n  @if %%a lss %%d (\n    set result=-1\n    goto :version_compare_done\n  ) else (\n    @if %%a gtr %%d (\n      set result=1\n      goto :version_compare_done\n    ) else (\n      @if %%b lss %%e (\n        set result=-1\n        goto :version_compare_done\n      ) else (\n        @if %%b gtr %%e (\n          set result=1\n          goto :version_compare_done\n        ) else (\n          @if %%c lss %%f (\n            set result=-1\n            goto :version_compare_done\n          ) else (\n            @if %%c gtr %%f (\n              set result=1\n              goto :version_compare_done\n            )\n          )\n        )\n      )\n    )\n  )\n)\n:version_compare_done\n@endlocal & set \"%var%=%result%\"\n@goto :eof\n\n:print_usage - Prints the usage of the script\n:: %* - message to print, each argument on it's own line\n@setlocal\n@for %%a in (%*) do @echo.%%~a\n@echo.\n@echo.build [/?][/v[v...]^|/q][/version][/arch a][/threading t]\n@echo.      [/exceptions e][/revision r] location\n@echo.\n@echo.  /version v  The version of MinGW to download\n@echo.  /arch a     The target architecture [i686^|x86_64]\n@echo.  /threading t\n@echo.              Threading model to use [posix^|win32]\n@echo.  /exceptions e\n@echo.              Exception model to use [sjlj^|seh^|dwarf]\n@echo.  /revision e Revision of the release to use\n@echo.  /v          Sets the output to be more verbose\n@echo.  /v[v...]    Extra verbosity, /vv, /vvv, etc\n@echo.  /q          Quiets the output\n@echo.  /?          Shows this usage message\n@echo.\n@endlocal\n@goto :eof\n\n:script_source - Determines if the script was ran from the cli or explorer\n:: %1 - The return variable [cli|explorer]\n@verify other 2>nul\n@setlocal EnableDelayedExpansion\n@if errorlevel 1 (\n  @call :log 0 \"Failed to enable extensions\"\n  @exit /b 1\n)\n@call :log 3 \"Attempting to detect the script source\"\n@echo \"The invocation command was: '%cmdcmdline%'\" >> %log_path%\n@for /f \"tokens=1-3,*\" %%a in (\"%cmdcmdline%\") do @(\n  set cmd=%%~a\n  set arg1=%%~b\n  set arg2=%%~c\n  set rest=%%~d\n)\n@set quote=\"\n@if \"!arg2:~0,1!\" equ \"!quote!\" (\n  if \"!arg2:~-1!\" neq \"!quote!\" (\n    set \"arg2=!arg2:~1!\"\n  )\n)\n@call :log 4 \"cmd  = %cmd%\"\n@call :log 4 \"arg1 = %arg1%\"\n@call :log 4 \"arg2 = %arg2%\"\n@call :log 4 \"rest = %rest%\"\n@call :log 4 \"src  = %~f0\"\n@if /i \"%arg2%\" == \"call\" (\n  set script_source=cli\n) else (\n  @if /i \"%arg1%\" == \"/c\" (\n    set script_source=explorer\n  ) else (\n    set script_source=cli\n  )\n)\n@call :log 3 \"The script was invoked from %script_source%\"\n@endlocal & set \"%~1=%script_source%\"\n@goto :eof\n\n:architecture - Finds the system architecture\n:: %1 - The return variable [i686|x86_64]\n@setlocal\n@call :log 3 \"Determining the processor architecture\"\n@set \"key=HKLM\\System\\CurrentControlSet\\Control\\Session Manager\\Environment\"\n@set \"var=PROCESSOR_ARCHITECTURE\"\n@for /f \"skip=2 tokens=2,*\" %%a in ('reg query \"%key%\" /v \"%var%\"') do @set \"arch=%%b\"\n@if \"%arch%\" == \"AMD64\" set arch=x86_64\n@if \"%arch%\" == \"x64\" set arch=i686\n@call :log 4 \"arch = %arch%\"\n@endlocal & set \"%~1=%arch%\"\n@goto :eof\n\n:md5 - Gets the MD5 checksum for a file\n:: %1 - The hash\n:: %2 - The file path\n@setlocal\n@set \"var=%~1\"\n@set \"file_path=%~2\"\n@if \"%var%\" == \"\" @exit /b 1\n@if \"%file_path%\" == \"\" @exit /b 1\n@if not exist \"%file_path%\" @exit /b 1\n@for /f \"skip=3 tokens=1,*\" %%a in ('powershell Get-FileHash -Algorithm MD5 \"'%file_path%'\"') do @set hash=%%b\n@if not defined hash (\n  @call :log 6\n  @call :log 0 \"Failed to get MD5 hash for %file_path%\"\n  @exit /b 1\n)\n@endlocal & set \"%var%=%hash: =%\"\n@goto :eof\n\n:windows_version - Checks the windows version\n:: %1 - The windows version\n:: %2 - The major version number return variable\n:: %3 - The minor version number return variable\n:: %4 - The revision version number return variable\n@setlocal\n@call :log 3 \"Retrieving the Windows version\"\n@for /f \"tokens=2 delims=[]\" %%x in ('ver') do @set win_ver=%%x\n@set win_ver=%win_ver:Version =%\n@set win_ver_major=%win_ver:~0,1%\n@set win_ver_minor=%win_ver:~2,1%\n@set win_ver_rev=%win_ver:~4%\n@call :log 4 \"win_ver = %win_ver%\"\n@endlocal & set \"%~1=%win_ver%\" ^\n          & set \"%~2=%win_ver_major%\" ^\n          & set \"%~3=%win_ver_minor%\" ^\n          & set \"%~4=%win_ver_rev%\"\n@goto :eof\n\n:find_in_path - Finds a program of file in the PATH\n:: %1 - return variable of the file path\n@setlocal\n@set \"var=%~1\"\n@if \"%var%\" == \"\" @exit /b 1\n@set \"file=%~2\"\n@if \"%file%\" == \"\" @exit /b 1\n@call :log 3 \"Searching PATH for %file%\"\n@for %%x in (\"%file%\") do @set \"file_path=%%~f$PATH:x\"\n@if not defined file_path @exit /b 1\n@endlocal & set \"%var%=%file_path%\"\n@goto :eof\n\n:log_append - Appends another file into the current logging file\n:: %1 - the file_path to the file to concatenate\n@setlocal\n@set \"file_path=%~1\"\n@if \"%file_path%\" == \"\" @exit /b 1\n@call :log 3 \"Appending to log: %file_path%\"\n@call :iso8601 iso8601\n@set temp_log=%temp%\\append-%iso8601%.log\n@call :log 4 \"Using temp file %temp_log%\"\n@type \"%log_path%\" \"%file_path%\" > \"%temp_log%\" 2>nul\n@move /y \"%temp_log%\" \"%log_path%\" 1>nul\n@del \"%file_path% 2>nul\n@del \"%temp_log% 2>nul\n@endlocal\n@goto :eof\n\n:iso8601 - Returns the current time in ISO8601 format\n:: %1 - the return variable\n:: %2 - format [extended|basic*]\n:: iso8601 - contains the resulting timestamp\n@setlocal\n@wmic Alias /? >NUL 2>&1 || @exit /b 1\n@set \"var=%~1\"\n@if \"%var%\" == \"\" @exit /b 1\n@set \"format=%~2\"\n@if \"%format%\" == \"\" set format=basic\n@for /F \"skip=1 tokens=1-6\" %%g IN ('wmic Path Win32_UTCTime Get Day^,Hour^,Minute^,Month^,Second^,Year /Format:table') do @(\n  @if \"%%~l\"==\"\" goto :iso8601_done\n  @set \"yyyy=%%l\"\n  @set \"mm=00%%j\"\n  @set \"dd=00%%g\"\n  @set \"hour=00%%h\"\n  @set \"minute=00%%i\"\n  @set \"seconds=00%%k\"\n)\n:iso8601_done\n@set mm=%mm:~-2%\n@set dd=%dd:~-2%\n@set hour=%hour:~-2%\n@set minute=%minute:~-2%\n@set seconds=%seconds:~-2%\n@if /i [%format%] == [extended] (\n  set iso8601=%yyyy%-%mm%-%dd%T%hour%:%minute%:%seconds%Z\n) else (\n  if /i [%format%] == [basic] (\n    set iso8601=%yyyy%%mm%%dd%T%hour%%minute%%seconds%Z\n  ) else (\n    @exit /b 1\n  )\n)\n@set iso8601=%iso8601: =0%\n@endlocal & set %var%=%iso8601%\n@goto :eof\n\n:verbosity - Processes the verbosity parameter '/v[v...]\n:: %1 - verbosity given on the command line\n:: logging_level - set to the number of v's\n@setlocal\n@set logging_level=0\n@set verbosity=%~1\n:verbosity_loop\n@set verbosity=%verbosity:~1%\n@if not [%verbosity%] == [] @(\n  set /a \"logging_level=logging_level+1\"\n  goto verbosity_loop\n)\n@endlocal & set logging_level=%logging_level%\n@goto :eof\n\n:log - Logs a message, depending on verbosity\n:: %1 - level\n::       [0-4] for CLI logging\n::       [5-9] for GUI logging\n:: %2 - message to print\n@setlocal\n@set \"level=%~1\"\n@set \"msg=%~2\"\n@if \"%log_folder%\" == \"\" (\n  echo Logging was used to early in the script, log_folder isn't set yet\n  goto :eof\n)\n@if \"%log_path%\" == \"\" (\n  echo Logging was used to early in the script, log_path isn't set yet\n  goto :eof\n)\n@if not exist \"%log_folder%\" mkdir \"%log_folder%\"\n@if not exist \"%log_path%\" echo. 1>nul 2>\"%log_path%\"\n@echo.%msg% >> \"%log_path%\"\n@if %level% geq 5 (\n  @if [%script_source%] == [explorer] (\n    set /a \"level=level-5\"\n  ) else (\n    @goto :eof\n  )\n)\n@if \"%logging_level%\" == \"\" (\n  echo Logging was used to early in the script, logging_level isn't set yet\n  goto :eof\n)\n@if %logging_level% geq %level% echo.%msg% 1>&2\n@endlocal\n@goto :eof\n\n:download - Downloads a file from the internet\n:: %1 - the url of the file to download\n:: %2 - the file to download to\n:: %3 - the MD5 checksum of the file (optional)\n@setlocal EnableDelayedExpansion\n@if errorlevel 1 (\n  @call :print_usage \"Failed to enable extensions\"\n  @exit /b 1\n)\n@set \"url=%~1\"\n@set \"file_path=%~2\"\n@set \"checksum=%~3\"\n@for %%a in (%file_path%) do @set dir_path=%%~dpa\n@for %%a in (%file_path%) do @set file_name=%%~nxa\n@if \"%url%\" == \"\" @exit /b 1\n@if \"%file_path%\" == \"\" @exit /b 1\n@if \"%dir_path%\" == \"\" @exit /b 1\n@if \"%file_name%\" == \"\" @exit /b 1\n@if not exist \"%dir_path%\" mkdir \"%dir_path%\"\n@call :log 2 \"Downloading %url%\"\n@call :iso8601 iso8601\n@set \"temp_path=%temp%\\download-%iso8601%-%file_name%\"\n@set \"log_path=%temp%\\download-%iso8601%-log-%file_name%\"\n@call :log 4 \"Using temp file %temp_path%\"\n@powershell Invoke-WebRequest \"'%url%'\" ^\n  -OutFile \"'%temp_path%'\" ^\n  -UserAgent [Microsoft.PowerShell.Commands.PSUserAgent]::IE ^\n  1>nul 2>\"%log_path%\"\n@if errorlevel 1 (\n  @call :log 0 \"Failed to download %url%\"\n  @call :log_append \"%log_path%\"\n  @exit /b 1\n)\n@if [%checksum%] neq [] (\n  @call :log 4 \"Checking %checksum% against %temp_path%\"\n  @call :md5 hash \"%temp_path%\"\n  if \"!hash!\" neq \"%checksum%\" (\n    @call :log 0 \"Failed to match checksum: %temp_path%\"\n    @call :log 0 \"Hash    : !hash!\"\n    @call :log 0 \"Checksum: %checksum%\"\n    @exit /b 1\n  ) else (\n    @call :log 3 \"Checksum matched: %temp_path%\"\n    @call :log 3 \"Hash    : !hash!\"\n    @call :log 3 \"Checksum: %checksum%\"\n  )\n)\n@call :log 4 \"Renaming %temp_path% to %file_path%\"\n@move /y \"%temp_path%\" \"%file_path%\" 1>nul\n@endlocal\n@goto :eof\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "unittest",
          "type": "tree",
          "content": null
        },
        {
          "name": "zephyr",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}