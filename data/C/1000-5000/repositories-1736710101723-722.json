{
  "metadata": {
    "timestamp": 1736710101723,
    "page": 722,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjczMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ambrop72/badvpn",
      "stars": 1875,
      "defaultBranch": "master",
      "files": [
        {
          "name": "BUILD-WINDOWS-VisualStudio.md",
          "type": "blob",
          "size": 3.0615234375,
          "content": "# Windows build using Visual Studio\n\nThis document describes how to build on Windows using Visual Studio. Note that only\n32-bit build has been tested and is described here.\n\n## Prerequisites\n\n### Visual Studio\n\nYou need Visual Studio 2017.\n\n### CMake\n\nYou need CMake, it is best to get the latest version.\n\n### OpenSSL\n\nYou don't need this if you only need tun2socks or udpgw (but only for the VPN software).\n\nInstall ActivePerl if not already.\n\nDownload and extract the OpenSSL source code.\n\nOpen a Visual Studio x86 native tools command prompt (found under Programs -> Visual\nStudio 2017) and enter the OpenSSL source code directory. In this terminal, run the\nfollowing commands:\n\n```\nperl Configure VC-WIN32 no-asm --prefix=%cd%\\install-dir\nms\\do_ms\nnmake -f ms\\ntdll.mak install\n```\n\n### NSS\n\nYou don't need this if you only need tun2socks or udpgw (but only for the VPN software).\n\nInstall MozillaBuild (https://wiki.mozilla.org/MozillaBuild).\n\nDownload and extract the NSS source code that includes NSPR\n(`nss-VERSION-with-nspr-VERSION.tar.gz`).\n\nCopy the file `C:\\mozilla-build\\start-shell.bat` to\n`C:\\mozilla-build\\start-shell-fixed.bat`, and in the latter file REMOVE the following\nlines near the beginning:\n\n```\nSET INCLUDE=\nSET LIB=\nIF NOT DEFINED MOZ_NO_RESET_PATH (\n  SET PATH=%SystemRoot%\\System32;%SystemRoot%;%SystemRoot%\\System32\\Wbem\n)\n```\n\nOpen a Visual Studio x86 native tools command prompt. In this terminal, first run the\nfollowing command to enter the mozilla-build bash shell:\n\n```\nC:\\mozilla-build\\start-shell-fixed.bat\n```\n\nEnter the NSS source code directory and run the following commands:\n\n```\nmake -C nss nss_build_all OS_TARGET=WINNT BUILD_OPT=1\ncp -r dist/private/. dist/public/. dist/WINNT*.OBJ/include/\n```\n\n## Building BadVPN\n\nOpen a Visual Studio x86 native tools command prompt (found under Programs -> Visual\nStudio 2017) and enter the BadVPN source code directory.\n\nIf you needed to build OpenSSL and NSS, then specify the paths to the builds of these\nlibraries by setting the `CMAKE_PREFIX_PATH` environment variable as shown below;\nreplace `<openssl-source-dir>` and `<nss-source-dir>` with the correct paths. For NSS,\ncheck if the `.OBJ` directory name is correct, if not then adjust that as well.\n\n```\nset CMAKE_PREFIX_PATH=<openssl-source-dir>\\install-dir;<nss-source-dir>\\dist\\WINNT6.2_OPT.OBJ\n```\n\nRun the commands shown below. If you only need tun2socks and udpgw then also add\nthe following parameters to first `cmake` command:\n`-DBUILD_NOTHING_BY_DEFAULT=1 -DBUILD_TUN2SOCKS=1 -DBUILD_UDPGW=1`.\n\n```\nmkdir build\ncd build\ncmake .. -G \"Visual Studio 15 2017\" -DCMAKE_INSTALL_PREFIX=%cd%\\..\\install-dir\ncmake --build . --config Release --target install\n```\n\nIf you did need OpenSSL and NSS, then copy the needed DLL so that the programs will\nbe able to find them. You can use the following commands to do this (while still in\nthe `build` directory):\n\n```\ncopy <openssl-source-dir>\\install-dir\\bin\\libeay32.dll ..\\install-dir\\bin\\\ncopy <nss-source-dir>\\dist\\WINNT6.2_OPT.OBJ\\lib\\*.dll ..\\install-dir\\bin\\\n```\n\nThe build is now complete and is located in `<badvpn-source-dir>\\install-dir`.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 12.2294921875,
          "content": "cmake_minimum_required(VERSION 2.8)\nproject(BADVPN C)\n\nset(CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/cmake/modules\")\n\ninclude(GNUInstallDirs)\ninclude(TestBigEndian)\ninclude(CheckIncludeFiles)\ninclude(CheckSymbolExists)\ninclude(CheckTypeSize)\n\noption(WITH_PLUGIN_LIBS \"Build PIC versions of all libraries for use from plugins\" OFF)\n\nset(BUILD_COMPONENTS)\n\nmacro (build_switch name text default)\n    if (BUILD_NOTHING_BY_DEFAULT)\n        option(BUILD_${name} \"${text}\" OFF)\n    else ()\n        option(BUILD_${name} \"${text}\" \"${default}\")\n    endif ()\n    list(APPEND BUILD_COMPONENTS \"${name}\")\nendmacro ()\n\n# detect Emscripten\nif (CMAKE_C_COMPILER MATCHES \"/emcc$\")\n    set(EMSCRIPTEN ON)\nelse ()\n    set(EMSCRIPTEN OFF)\nendif ()\n\nif (EMSCRIPTEN)\n    set(ON_IF_NOT_EMSCRIPTEN OFF)\nelse ()\n    set(ON_IF_NOT_EMSCRIPTEN ON)\nendif()\n\nif (CMAKE_SYSTEM_NAME STREQUAL \"Linux\" AND NOT EMSCRIPTEN)\n    set(ON_IF_LINUX ON)\nelse ()\n    set(ON_IF_LINUX OFF)\nendif()\n\nif (CMAKE_SYSTEM_NAME STREQUAL \"Linux\" OR EMSCRIPTEN)\n    set(ON_IF_LINUX_OR_EMSCRIPTEN ON)\nelse ()\n    set(ON_IF_LINUX_OR_EMSCRIPTEN OFF)\nendif ()\n\n# define build defaults\nbuild_switch(EXAMPLES \"build example programs\" ON)\nbuild_switch(TESTS \"build some other example programs\" ON)\nbuild_switch(SERVER \"build badvpn-server\" ${ON_IF_NOT_EMSCRIPTEN})\nbuild_switch(CLIENT \"build badvpn-client\" ${ON_IF_NOT_EMSCRIPTEN})\nbuild_switch(FLOODER \"build badvpn-flooder\" ${ON_IF_NOT_EMSCRIPTEN})\nbuild_switch(TUN2SOCKS \"build badvpn-tun2socks\" ${ON_IF_NOT_EMSCRIPTEN})\nbuild_switch(UDPGW \"build badvpn-udpgw\" ${ON_IF_NOT_EMSCRIPTEN})\nbuild_switch(NCD \"build badvpn-ncd\" ${ON_IF_LINUX_OR_EMSCRIPTEN})\nbuild_switch(DOSTEST \"build dostest-server and dostest-attacker\" OFF)\n\nif (BUILD_NCD AND NOT (CMAKE_SYSTEM_NAME STREQUAL \"Linux\"))\n    message(FATAL_ERROR \"NCD is only available on Linux\")\nendif ()\n\nif (BUILD_CLIENT OR BUILD_SERVER)\n    find_package(OpenSSL REQUIRED)\n    set(LIBCRYPTO_INCLUDE_DIRS \"${OpenSSL_INCLUDE_DIRS}\")\n    set(LIBCRYPTO_LIBRARY_DIRS \"${OpenSSL_LIBRARY_DIRS}\")\n    set(LIBCRYPTO_LIBRARIES \"${OpenSSL_LIBRARIES}\")\nendif ()\n\nif (BUILD_SERVER OR BUILD_CLIENT OR BUILD_FLOODER)\n    find_package(NSPR REQUIRED)\n    find_package(NSS REQUIRED)\nendif ()\n\n# choose reactor\nif (DEFINED BREACTOR_BACKEND)\n    if (NOT (BREACTOR_BACKEND STREQUAL \"badvpn\" OR BREACTOR_BACKEND STREQUAL \"glib\"))\n        message(FATAL_ERROR \"unknown reactor backend specified\")\n    endif ()\nelse ()\n    if (EMSCRIPTEN)\n        set(BREACTOR_BACKEND \"emscripten\")\n    else ()\n        set(BREACTOR_BACKEND \"badvpn\")\n    endif ()\nendif ()\n\nif (BREACTOR_BACKEND STREQUAL \"badvpn\")\n    add_definitions(-DBADVPN_BREACTOR_BADVPN)\nelseif (BREACTOR_BACKEND STREQUAL \"glib\")\n    if (NOT (CMAKE_SYSTEM_NAME STREQUAL \"Linux\"))\n        message(FATAL_ERROR \"GLib reactor backend is only available on Linux\")\n    endif ()\n    find_package(GLIB2 REQUIRED)\n    add_definitions(-DBADVPN_BREACTOR_GLIB)\nelseif (BREACTOR_BACKEND STREQUAL \"emscripten\")\n    add_definitions(-DBADVPN_BREACTOR_EMSCRIPTEN)\nendif ()\n\ninclude_directories(\n    ${CMAKE_CURRENT_SOURCE_DIR}\n    ${LIBCRYPTO_INCLUDE_DIRS}\n    ${NSPR_INCLUDE_DIRS}\n    ${NSS_INCLUDE_DIRS}\n    ${GLIB2_INCLUDE_DIR}\n    lwip/custom\n    lwip/src/include\n    lwip/src/include/ipv4\n    lwip/src/include/ipv6\n)\n\nlink_directories(\n    ${LIBCRYPTO_LIBRARY_DIRS}\n    ${NSPR_LIBRARY_DIRS}\n    ${NSS_LIBRARY_DIRS}\n)\n\ntest_big_endian(BIG_ENDIAN)\n\ncheck_type_size(int INT_SIZE)\nif (NOT (INT_SIZE GREATER \"3\"))\n    message(FATAL_ERROR \"int must be at least 32 bits\")\nendif ()\n\ncheck_type_size(size_t SIZE_SIZE)\nif (NOT (SIZE_SIZE GREATER INT_SIZE OR SIZE_SIZE EQUAL INT_SIZE))\n    message(FATAL_ERROR \"size_t must be greater or equal than int\")\nendif ()\n\nif (MSVC)\n    add_definitions(-D_CRT_SECURE_NO_WARNINGS /wd4065 /wd4018 /wd4533 /wd4244 /wd4102 /wd4098 /wd4267 /wd4116)\n    add_definitions(-D_WINSOCK_DEPRECATED_NO_WARNINGS)\nelse ()\n    add_definitions(-std=gnu99 -Wall -Wno-unused-value -Wno-parentheses -Wno-switch -Wredundant-decls -Wshadow)\n\n    if (NOT CMAKE_C_COMPILER_ID STREQUAL \"PathScale\")\n        add_definitions(-Werror=implicit-function-declaration -Wno-switch-enum -Wno-unused-function\n                        -Wstrict-aliasing)\n    endif ()\n    \n    if (CMAKE_C_COMPILER_ID MATCHES \"^Clang\")\n        add_definitions(-Wno-initializer-overrides -Wno-tautological-constant-out-of-range-compare)\n    endif ()\nendif ()\n\n# platform-specific stuff\nif (WIN32)\n    add_definitions(-DBADVPN_USE_WINAPI -D_WIN32_WINNT=0x600 -DWIN32_LEAN_AND_MEAN)\n    add_definitions(-DBADVPN_THREAD_SAFE=0)\n\n    set(CMAKE_REQUIRED_DEFINITIONS \"-D_WIN32_WINNT=0x600\")\n    check_symbol_exists(WSAID_WSASENDMSG \"winsock2.h;mswsock.h\" HAVE_MSW_1)\n    check_symbol_exists(WSAID_WSARECVMSG \"winsock2.h;mswsock.h\" HAVE_MSW_2)\n    check_symbol_exists(WSAID_ACCEPTEX \"winsock2.h;mswsock.h\" HAVE_MSW_3)\n    check_symbol_exists(WSAID_GETACCEPTEXSOCKADDRS \"winsock2.h;mswsock.h\" HAVE_MSW_4)\n    check_symbol_exists(WSAID_CONNECTEX \"winsock2.h;mswsock.h\" HAVE_MSW_5)\n    set(CMAKE_REQUIRED_DEFINITIONS \"\")\n    if (NOT (HAVE_MSW_1 AND HAVE_MSW_2 AND HAVE_MSW_3 AND HAVE_MSW_4 AND HAVE_MSW_5))\n        add_definitions(-DBADVPN_USE_SHIPPED_MSWSOCK)\n        check_type_size(WSAMSG HAVE_WSAMSG)\n        if (NOT HAVE_WSAMSG)\n            add_definitions(-DBADVPN_SHIPPED_MSWSOCK_DECLARE_WSAMSG)\n        endif ()\n    endif ()\nelse ()\n    set(BADVPN_THREADWORK_USE_PTHREAD 1)\n    add_definitions(-DBADVPN_THREADWORK_USE_PTHREAD)\n    add_definitions(-DBADVPN_THREAD_SAFE=1)\n\n    link_libraries(rt pthread)\n\n    if (EMSCRIPTEN)\n        add_definitions(-DBADVPN_EMSCRIPTEN)\n        add_definitions(-DBADVPN_NO_PROCESS -DBADVPN_NO_UDEV -DBADVPN_NO_RANDOM)\n    elseif (CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n        add_definitions(-DBADVPN_LINUX)\n\n        check_include_files(sys/signalfd.h HAVE_SYS_SIGNALFD_H)\n        if (HAVE_SYS_SIGNALFD_H)\n            add_definitions(-DBADVPN_USE_SIGNALFD)\n        else ()\n            add_definitions(-DBADVPN_USE_SELFPIPE)\n        endif ()\n\n        check_include_files(sys/epoll.h HAVE_SYS_EPOLL_H)\n        if (HAVE_SYS_EPOLL_H)\n            add_definitions(-DBADVPN_USE_EPOLL)\n        else ()\n            add_definitions(-DBADVPN_USE_POLL)\n        endif ()\n\n        check_include_files(linux/rfkill.h HAVE_LINUX_RFKILL_H)\n        if (HAVE_LINUX_RFKILL_H)\n            add_definitions(-DBADVPN_USE_LINUX_RFKILL)\n            set(BADVPN_USE_LINUX_RFKILL 1)\n        endif ()\n\n        check_include_files(linux/input.h HAVE_LINUX_INPUT_H)\n        if (HAVE_LINUX_INPUT_H)\n            add_definitions(-DBADVPN_USE_LINUX_INPUT)\n            set(BADVPN_USE_LINUX_INPUT 1)\n        endif ()\n\n        check_include_files(sys/inotify.h HAVE_SYS_INOTIFY_H)\n        if (HAVE_SYS_INOTIFY_H)\n            add_definitions(-DBADVPN_USE_INOTIFY)\n            set(BADVPN_USE_INOTIFY 1)\n        endif ()\n    elseif (CMAKE_SYSTEM_NAME MATCHES \"FreeBSD\")\n        add_definitions(-DBADVPN_FREEBSD)\n\n        check_symbol_exists(kqueue \"sys/types.h;sys/event.h;sys/time.h\" HAVE_KQUEUE)\n        if (NOT HAVE_KQUEUE)\n            message(FATAL_ERROR \"kqueue is required\")\n        endif ()\n        add_definitions(-DBADVPN_USE_KEVENT)\n    endif ()\n\n    if (NOT DEFINED BADVPN_WITHOUT_CRYPTODEV)\n        check_include_files(crypto/cryptodev.h HAVE_CRYPTO_CRYPTODEV_H)\n        if (HAVE_CRYPTO_CRYPTODEV_H)\n            add_definitions(-DBADVPN_USE_CRYPTODEV)\n        elseif (DEFINED BADVPN_WITH_CRYPTODEV)\n            message(FATAL_ERROR \"crypto/cryptodev.h not found\")\n        endif ()\n    endif ()\nendif ()\n\n# check for syslog\ncheck_include_files(syslog.h HAVE_SYSLOG_H)\nif (HAVE_SYSLOG_H)\n    add_definitions(-DBADVPN_USE_SYSLOG)\nendif ()\n\n# add preprocessor definitions\nif (BIG_ENDIAN)\n    add_definitions(-DBADVPN_BIG_ENDIAN)\nelse ()\n    add_definitions(-DBADVPN_LITTLE_ENDIAN)\nendif ()\n\n# install man pages\ninstall(\n    FILES badvpn.7\n\tDESTINATION ${CMAKE_INSTALL_MANDIR}/man7\n)\n\n# reset variables indicating whether we're building various libraries,\n# and set them in the respective CMakeLists files. This is used to disable\n# building examples and tests which require libraries that are not available.\nset(BUILDING_SECURITY 0)\nset(BUILDING_DHCPCLIENT 0)\nset(BUILDING_ARPPROBE 0)\nset(BUILDING_BKIO 0)\nset(BUILDING_PREDICATE 0)\nset(BUILDING_UDEVMONITOR 0)\nset(BUILDING_THREADWORK 0)\nset(BUILDING_RANDOM 0)\n\n# Used to register an internal library.\n# This will also add a library with the -plugin suffix, which is useful\n# for use by dynamic libraries (e.g. NCD modules):\n# - If BUILD_SHARED_LIBS is off (default), the libraries ${LIB_NAME} and ${LIB_NAME}-plugin\n#   are built separately. Both are static libraries but the -plugin variant is build as position\n#   independent code, so it can be (statically) linked into dynamic libraries.\n# - If BUILD_SHARED_LIBS is on, only ${LIB_NAME} is built, as a shared library.\n#   The ${LIB_NAME}-plugin target is set up as an alias to ${LIB_NAME}.\nfunction(badvpn_add_library LIB_NAME LINK_BADVPN_LIBS LINK_SYS_LIBS LIB_SOURCES)\n    set(BADVPN_LIBS_EXEC)\n    set(BADVPN_LIBS_PLUGIN)\n    foreach(LIB ${LINK_BADVPN_LIBS})\n        list(APPEND BADVPN_LIBS_EXEC \"${LIB}\")\n        list(APPEND BADVPN_LIBS_PLUGIN \"${LIB}-plugin\")\n    endforeach()\n\n    add_library(\"${LIB_NAME}\" ${LIB_SOURCES})\n    target_link_libraries(\"${LIB_NAME}\" ${BADVPN_LIBS_EXEC} ${LINK_SYS_LIBS})\n    set_target_properties(\"${LIB_NAME}\" PROPERTIES OUTPUT_NAME \"badvpn-${LIB_NAME}\")\n\n    if(WITH_PLUGIN_LIBS)\n        if(BUILD_SHARED_LIBS)\n            add_library(\"${LIB_NAME}-plugin\" ALIAS \"${LIB_NAME}\")\n        else()\n            add_library(\"${LIB_NAME}-plugin\" STATIC ${LIB_SOURCES})\n            target_link_libraries(\"${LIB_NAME}-plugin\" ${BADVPN_LIBS_PLUGIN} ${LINK_SYS_LIBS})\n            set_target_properties(\"${LIB_NAME}-plugin\" PROPERTIES OUTPUT_NAME \"badvpn-${LIB_NAME}-plugin\")\n            set_target_properties(\"${LIB_NAME}-plugin\" PROPERTIES POSITION_INDEPENDENT_CODE YES)\n            set_target_properties(\"${LIB_NAME}-plugin\" PROPERTIES COMPILE_FLAGS \"-fvisibility=hidden -DBADVPN_PLUGIN\")\n        endif()\n    endif()\nendfunction()\n\n# internal libraries\nadd_subdirectory(base)\nadd_subdirectory(system)\nadd_subdirectory(flow)\nadd_subdirectory(flowextra)\nif (OpenSSL_FOUND)\n    set(BUILDING_SECURITY 1)\n    add_subdirectory(security)\nendif ()\nif (NSS_FOUND)\n    add_subdirectory(nspr_support)\nendif ()\nif (BUILD_CLIENT OR BUILDING_SECURITY)\n    set(BUILDING_THREADWORK 1)\n    add_subdirectory(threadwork)\nendif ()\nif (BUILD_CLIENT OR BUILD_TUN2SOCKS)\n    add_subdirectory(tuntap)\nendif ()\nif (BUILD_SERVER)\n    set(BUILDING_PREDICATE 1)\n    add_subdirectory(predicate)\nendif ()\nif (BUILD_CLIENT OR BUILD_FLOODER)\n    add_subdirectory(server_connection)\nendif ()\nif (BUILD_NCD AND NOT EMSCRIPTEN)\n    set(BUILDING_DHCPCLIENT 1)\n    set(BUILDING_ARPPROBE 1)\n    set(BUILDING_UDEVMONITOR 1)\n    set(BUILDING_RANDOM 1)\n    add_subdirectory(stringmap)\n    add_subdirectory(udevmonitor)\n    add_subdirectory(dhcpclient)\n    add_subdirectory(arpprobe)\n    add_subdirectory(random)\nendif ()\nif (BUILD_TUN2SOCKS)\n    add_subdirectory(socksclient)\n    add_subdirectory(udpgw_client)\n    add_subdirectory(socks_udp_client)\n    add_subdirectory(lwip)\nendif ()\n\n# example programs\nif (BUILD_EXAMPLES)\n    add_subdirectory(examples)\nendif ()\n\n# tests\nif (BUILD_TESTS)\n    add_subdirectory(tests)\nendif ()\n\n# server\nif (BUILD_SERVER)\n    add_subdirectory(server)\nendif ()\n\n# client\nif (BUILD_CLIENT)\n    add_subdirectory(client)\nendif ()\n\n# flooder\nif (BUILD_FLOODER)\n    add_subdirectory(flooder)\nendif ()\n\n# tun2socks\nif (BUILD_TUN2SOCKS)\n    add_subdirectory(tun2socks)\nendif ()\n\n# udpgw\nif (BUILD_UDPGW)\n    add_subdirectory(udpgw)\nendif ()\n\n# ncd\nif (BUILD_NCD)\n    add_subdirectory(ncd)\n    if (NOT EMSCRIPTEN)\n        add_subdirectory(ncd-request)\n    endif ()\nendif ()\n\n# dostest\nif (BUILD_DOSTEST)\n    add_subdirectory(dostest)\nendif ()\n\nmessage(STATUS \"Building components:\")\n\n# print what we're building and what not\nforeach (name ${BUILD_COMPONENTS})\n    # to lower name\n    string(TOLOWER \"${name}\" name_withspaces)\n\n    # append spaces to name\n    #while (TRUE)\n    #    string(LENGTH \"${name_withspaces}\" length)\n    #    if (NOT (length LESS 12))\n    #        break()\n    #    endif ()\n    #    set(name_withspaces \"${name_withspaces} \")\n    #endwhile ()\n    \n    # determine if we're building\n    if (BUILD_${name})\n        set(building \"yes\")\n    else ()\n        set(building \"no\")\n    endif ()\n    \n    message(STATUS \"    ${name_withspaces} ${building}\")\nendforeach ()\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.46875,
          "content": "Copyright (c) 2009, Ambroz Bizjak <ambrop7@gmail.com>\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of the author nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 10.751953125,
          "content": "Version 1.999.130:\n\n- Fix TUN/TAP operation with Linux kernel 3.19. See: https://bugzilla.kernel.org/show_bug.cgi?id=96381\n\n- ncd: modules/daemon: Implement custom retry time.\n\n- ncd: modules/daemon: Fix the \"daemon crashed\" log message to include module context.\n\n- ncd: modules: arithmetic: Don't fail immediately on arithmetic errors, expose their occurrence.\n\n- ncd: Add clock_get_ms function.\n\n- ncd: Implement a simple checksum function as used in the Sphereo blue tooth protocol.\n\n- ncd: socket: Implement support for opening serial ports.\n\n- ncd: Implement struct_decode.\n\n- ncd: Implement struct_encode function.\n\n- ncd: sys.evdev: Provide event code strings for EV_SYN if available.\n\n- ncd: modules: blocker: Implement initial_state argument.\n\n- ncd: modules: blocker: Expose the up-state as a variable.\n\n- ncd: Implement Do-Interrupt.\n\n- ncd: Implement Do.\n\n- ncd: Implement lazy evaluation in If clause.\n\n- ncd: Implement ifel function to support future lazy If.\n\n- ncd: Optimize value::append().\n\n- ncd: Implement backtrack_point::rgo.\n\n- ncd: modules: explode: Pass through external strings (avoid copy).\n\n- ncd: modules: explode: Implement compiling search strings.\n\n- ncd: modules: parse: Implement parse_hex_number.\n\n- ncd: Implement caret syntax sugar. ^a.b.c = {\"a\", \"b\", \"c\"}\n\n- ncd: Fix bugs with bad expectations of null-terminated strings.\n\n- ncd: Implement object reference infrastructure and objref module.\n\n- ncd: Remove ComposedString type along with the buffer module.\n\n- ncd: Implement Block syntax as syntax-sugar around inline_code().\n\n- ncd: modules: call: Implement inline_code calls.\n\n- ncd: modules: call: Fix bug in call_with_caller_target deinit.\n\n- ncd: modules: socket: close: Fix completion order vs closing. \n\n- ncd: Fix a bug that caused a bad assertion failure in file_write().\n\n- ncd: modules: socket: add read() eof variable\n\n- ncd: modules: socket: Implement _caller in client process.\n\n- ncd: Add --signal-exit-code option.\n\n- ncd: Implement syntax sugar @something = \"something\".\n\n- ncd: Fix crash with num_multiply(..., \"0\").\n\n- ncd: Infrastructure for built-in functions and implementation of many such functions.\n\n- ncd: Fix bad assertion regarding map values.\n\nVersion 1.999.129:\n\n- ncd: modules: file_open: Fix typo in assertion.\n\n- server: Fix bug forgetting to call BSSLConnection_ReleaseBuffers(). Unless threads are enabled, this is an assert failure if NDEBUG is not defined an a non-issue otherwise.\n\n- ncd: Look for various programs in PATH instead of hardcoded paths.\n\n- Add compile-udpgw.sh.\n\n- ncd: modules: net_dns: Implement net.dns.resolvconf() forspecification of arbitrary resolv.conf lines\n\nVersion 1.999.128:\n\n- tun2socks: add option --append-source-to-username to give the SOCKS server the source IP of the connection\n\n- tun2socks: IPv6 support, and updated to newer version of lwIP\n\n- tun2socks: fix some bugs/crashes\n\n- tun2socks, udpgw: transparent DNS forwarding, though no Windows support on udpgw side (contributed by Kerem Hadimli)\n\n- NCD: preliminary support for dynamically loading commands\n\nVersion 1.999.127:\n\n- client, server: implement experimental support for performing SSL operations in worker threads. Currently it's rather inefficient.\n\n- NCD: modules: value: implement value::append() for appending to a list\n\n- NCD: modules: net_iptables: add single-argument form of append and insert commands, allowing for generic use\n\n- NCD: modules: net_iptables: implement net.iptables.insert() and net.ebtables.insert()\n\n- NCD: modules: sys_start_process: implement options, including username, term_on_deinit and deinit_kill_time\n\n- NCD: modules: sys_request_server: implement _caller in request handler\n\n- NCD: modules: add getenv()\n\n- NCD: modules: daemon: implement options, including username option\n\n- NCD: modules: runonce: add new options format with a map, implement username option\n\n- NCD: modules: add buffer(), which exposes a buffer with efficient appending and removing from the beginning.\n\n- NCD: add a new internal string representation called ComposedString. This allows modules to expose the concatenation of multiple memroy buffers as a single string value, efficiently.\n\n- fix many, hopefully all, strict aliasing violations. In particular, this fixes a bug where the DHCP client integrated into NCD won't work correctly, subject to optimization flags.\n\n- NCD: modules: sleep: interpret empty string as no sleeping, add sleep(ms_start) with one argument\n\n- NCD: modules: add log(), log_r() and log_fr() commands for logging via the BLog system\n\nVersion 1.999.126:\n\n- NCD: modules: sleep: interpret empty string time as no sleeping, add sleep(ms_start) with one argument\n\n- NCD: modules: add log module for message logging using the BLog system\n\n- NCD: implement the \"include\" and \"include_guard\" directives, which allow separating reusable code into files\n\n- NCD: modules: call2: implement call_with_caller_target(), which makes it easier to write reusable code that calls back user-provided code\n\n- NCD: modules: call2: remove call2_if(), call2_ifelse(), embcall2(), embcall2_if(), embcall2_ifelse()\n\n- NCD: modules: add sys.start_process(), which implements starting and controlling external processes and reading/writing their stdout/stdin\n\n- tun2socks: implement SOCKS password authentication\n\n- NCD: track the depth of values and limit the maximum depth. This avoids stack overflow with very deeply nested values.\n\n- NCD: modules: add substr()\n\n- NCD: process_manager: add 2-argument start() method which doesn't take a process identifier\n\n- NCD: process_manager: allow process identifiers to be any value not just strings\n\n- NCD: multidepend, depend_scope: fix immediate effect order when a depend finishes backtracking\n\n- NCD: add depend_scope module to do exactly what the multidepend module does, but with separate non-global dependency name scopes\n\n- NCD: multidepend: allow dependency names to be any value not just strings\n\n- NCD: implement value::insert(what) for appending to a list\n\n- NCD: change the format of addresses in sys.request_server() and sys.request_client() to be the same as in the socket module\n\n- NCD: add socket module (sys.connect() and sys.listen())\n\n- NCD: fix bug where duplicate template/process names would not be detected and weird behaviour would result\n\n- NCD: add backtrack_point() for simple backtracking\n\n- NCD: add file_open() for more complete file I/O\n\n- NCD: implement parse_ipv6_addr() and parse_ipv6_cidr_addr()\n\n- NCD: port to Emscripten/Javascript, for the in-browser demo\n\n- NCD: many performance and memory usage improvements\n\n- NCD: add assert_false()\n\n- NCD: don't link to OpenSSL to for random number generator. Use /dev/urandom instead to generate XIDs for DHCP.\n\n- NCD: deprecate ip_in_network() and instead add net.ipv{4,6}.addr_in_network(), net.ipv{4,6}.ifnot_addr_in_network()\n\n- NCD: implement some IPv6 modules: net.ipv6.addr(), net.ipv6.route()\n\n- NCD: support CIDR style addr/prefix addresses in various modules\n\n- NCD: recognize Elif and Else with capital first letter to be consistent with other reserved keywords\n\nVersion 1.999.123:\n\n- NCD: performance improvements related to finding modules for statements\n\n- NCD: performance improvements related to resolving object names\n\n- NCD: performance improvements related to instantiating statement arguments\n\n- NCD: add value::replace_this() and value::replace_this_undo()\n\n- NCD: add value::reset()\n\n- NCD: add value::replace() and value::replace_undo()\n\n- Port to compile with MSVC for Windows.\n\n- NCD: add Foreach clause\n\n- NCD: implement _caller in spawn(), add spawn::join()\n\n- NCD: add explode()\n\n- NCD: add hard_reboot() and hard_poweroff()\n\n- NCD: add file_stat() and file_lstat()\n\n- NCD: fix regex_replace() semantics. It was very broken because it did a complete replacement pass for every regex on the list, so it would match parts that have already been replaced, producing unexpected results.\n\n- NCD: small performance improvement\n\nVersion 1.999.121:\n\n- NCD: improve error handling semantics; see http://code.google.com/p/badvpn/source/detail?r=1376\n\n- NCD: fix assertion failure in sys.evdev() if a device error occurs (e.g. device unplugged) while an event is being processed. Similar fix in some other modules, but these may not be reproducable.\n\n- NCD: some more performance improvements\n\n- NCD: some performance improvements (~30% faster interpretation of cpu-bound code)\n\n- NCD: implemented If..elif..else clause.\n\n- NCD: net.backend.wpa_supplicant: fix to work with wpa_supplicant>=1.0\n\nVersion 1.999.115:\n\n- NCD: Many improvements; new statements, including call(), alias(), foreach(), choose().\n\nVersion 1.999.113:\n\n- NCD: when starting child processes, make sure that file descriptors for standard\n  streams are always open in the child, by opening /dev/null if they are not.\n\n- Improve build system to allow selective building of components.\n  By default, everything is built, unless -DBUILD_NOTHING_BY_DEFAULT=1 is given.\n  Individual components can then be enabled or disabled using -DBUILD_COMPONENT=1\n  and -DBUILD_COMPONENT=0.\n\n- When starting any BadVPN program, make sure that file descriptors for standard\n  streams are always open in the child, by opening /dev/null if they are not.\n\n- NCD: net.backend.wpa_supplicant(): add 'bssid' and 'ssid' variables to allow\n  determining what wireless network wpa_supplicant connected to.\n\n- NCD: net.backend.wpa_supplicant(): do not require the user to start wpa_supplicant via\n  stdbuf, but do it automatically.\n\nVersion 1.999.111:\n\n- Improved protocol such that peers can use SSL when comminicating via the server. This\n  improves security, as compromising the server will not allow the attacker to see secret\n  data shared by peers (in particular, encryption keys and OTP seeds when in UDP mode).\n\n  Compatibility is preserved if an only if the following conditions are met:\n  - The server is using the latest version.\n  - If the network is using SSL, all clients using the new version are using the\n    \"--allow-peer-talk-without-ssl\" command line option.\n\n  Be aware, however, that using the \"--allow-peer-talk-without-ssl\" option negates the\n  security benefits of the new SSL support - not only between pairs of peers where one\n  peer is using the old version, but also between pairs where both peers are capable\n  of SSL. This is because the server can re-initialize the pair, telling them not to use\n  SSL.\n\nVersion 1.999.107:\n\n- Added Windows IOCP support, removing the limitation on ~64 connections. This is important\n  for tun2socks, which may have to handle several hundred connections.\n\nVersion 1.999.105.2:\n\n- Fixed an assertion failure in tun2socks related to sending data to SOCKS.\n\nVersion 1.999.101.3:\n\n- Fixed UDP transport on Windows 7 which didn't work (was only tested on XP).\n\nVersion 1.999.101:\n\n- Fixed a protocol issue present in versions <=1.999.100.3. Compatibility is preserved in\n  case of a new server and old clients, but it is not possible to connect to an old server\n  with a new client.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.9072265625,
          "content": "**This repository has been archived and is not being maintained by the author any longer.**\n\n# BadVPN\n\n## Introduction\n\nIn this project I host some of my open-source networking software.\nAll of the software is written in C and utilizes a custom-developed framework for event-driven programming.\nThe extensive code sharing is the reason all the software is packaged together.\nHowever, it is possible to compile only the required components to avoid extra dependencies.\n\n### NCD programming language\n\nNCD (Network Configuration Daemon) is a daemon and programming/scripting language for configuration of network interfaces and other aspects of the operating system.\nIt implements various functionalities as built-in modules, which may be used from an NCD program wherever and for whatever purpose the user needs them.\nThis modularity makes NCD extremely flexible and extensible. It does a very good job with hotplugging in various forms, like USB network interfaces and link detection for wired devices.\nNew features can be added by implementing statements as C-language modules using a straightforward interface.\n\n### Tun2socks network-layer proxifier\n\nThe tun2socks program \"socksifes\" TCP connections at the network layer.\nIt implements a TUN device which accepts all incoming TCP connections (regardless of destination IP), and forwards the connections through a SOCKS server.\nThis allows you to forward all connections through SOCKS, without any need for application support.\nIt can be used, for example, to forward connections through a remote SSH server.\n\n### Peer-to-peer VPN\n\nThe VPN part of this project implements a Layer 2 (Ethernet) network between the peers (VPN nodes).\nThe peers connect to a central server which acts as a communication proxy allowing the peers to establish direct connections between each other (data connections).\nThese connections are used for transferring network data (Ethernet frames), and can be secured with a multitude of mechanisms. Notable features are:\n\n- UDP and TCP transport\n- Converges very quickly after a new peer joins\n- IGMP snooping to deliver multicasts efficiently (e.g. for IPTV)\n- Double SSL: if SSL is enabled, not only do peers connect to the server with SSL, but they use an additional layer of SSL when exchanging messages through the server\n- Features related to the NAT problem:\n  - Can work with multiple layers of NAT (needs configuration)\n  - Local peers inside a NAT can communicate directly\n  - Relaying as a fallback (needs configuration)\n\n## Requirements\n\nNCD only works on Linux. Tun2socks works on Linux and Windows. The P2P VPN works on Linux, Windows and FreeBSD (not tested often).\n\n## Installation\n\nThe build system is based on CMake. On Linux, the following commands can be used to\nbuild:\n\n```\ncd <badvpn-source-dir>\nmkdir build\ncd build\ncmake .. -DCMAKE_INSTALL_PREFIX=<install-dir>\nmake install\n```\n\nIf you only need tun2socks or udpgw, then add the following arguments to the `cmake`\ncommand: `-DBUILD_NOTHING_BY_DEFAULT=1 -DBUILD_TUN2SOCKS=1 -DBUILD_UDPGW=1`.\nOtherwise (if you want the VPN software), you will first need to install the OpenSSL\nand NSS libraries and make sure that CMake can find them.\n\nWindows builds are not provided. You can build from source code using Visual Studio by\nfollowing the instructions in the file `BUILD-WINDOWS-VisualStudio.md`.\n\n## License\n\nThe BSD 3-clause license as shown below applies to most of the code.\n\n```\nCopyright (c) 2009, Ambroz Bizjak <ambrop7@gmail.com>\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n3. Neither the name of the author nor the\n   names of its contributors may be used to endorse or promote products\n   derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n\nList of third-party code included in the source:\n- lwIP - A Lightweight TCP/IP stack. License: `lwip/COPYING`\n"
        },
        {
          "name": "arpprobe",
          "type": "tree",
          "content": null
        },
        {
          "name": "badvpn-win32.nix",
          "type": "blob",
          "size": 1.6513671875,
          "content": "{ stdenv, cmake, pkgconfig, openssl, nspr, nss, zlib, sqlite, zip, debug ? false }:\n\nrec {\n    badvpn = (\n    let\n        compileFlags = \"-O3 ${stdenv.lib.optionalString (!debug) \"-DNDEBUG\"}\";\n    in\n    stdenv.mkDerivation {\n        name = \"badvpn\";\n        \n        src = stdenv.lib.cleanSource ./.;\n        \n        nativeBuildInputs = [ cmake pkgconfig ];\n        buildInputs = [ openssl nspr nss ];\n        \n        NIX_CFLAGS_COMPILE = \"-I${nspr.crossDrv.dev}/include/nspr -I${nss.crossDrv.dev}/include/nss -ggdb\";\n        NIX_CFLAGS_LINK = [\"-ggdb\"];\n        \n        preConfigure = ''\n            cmakeFlagsArray=( \"-DCMAKE_BUILD_TYPE=\" \"-DCMAKE_C_FLAGS=${compileFlags}\" \"-DCMAKE_SYSTEM_NAME=Windows\" );\n        '';\n        \n        postInstall = ''\n            for lib in eay32; do\n                cp ${openssl.crossDrv.bin}/bin/lib$lib.dll $out/bin/\n            done\n            for lib in nspr4 plc4 plds4; do\n                cp ${nspr.crossDrv.out}/lib/lib$lib.dll $out/bin/\n            done\n            for lib in nss3 nssutil3 smime3 ssl3 softokn3 freebl3; do\n                cp ${nss.crossDrv.out}/lib/$lib.dll $out/bin/\n            done\n            cp ${zlib.crossDrv.out}/bin/zlib1.dll $out/bin/\n            cp ${sqlite.crossDrv.out}/bin/libsqlite3-0.dll $out/bin/\n            _linkDLLs() { true; }\n        '';\n        \n        dontCrossStrip = true;\n    }).crossDrv;\n    \n    badvpnZip = stdenv.mkDerivation {\n        name = \"badvpn.zip\";\n        unpackPhase = \"true\";\n        nativeBuildInputs = [ zip ];\n        installPhase = ''\n            mkdir badvpn-win32\n            ln -s ${badvpn}/bin badvpn-win32/bin\n            zip -q -r $out badvpn-win32\n        '';\n    };\n}\n"
        },
        {
          "name": "badvpn.7",
          "type": "blob",
          "size": 13.5205078125,
          "content": ".TH badvpn 7 \"6 October 2010\"\n.SH NAME\nBadVPN - peer-to-peer VPN system\n.SH DESCRIPTION\n.P\nBadVPN is a peer-to-peer VPN system. It provides a Layer 2 (Ethernet) network between\nthe peers (VPN network nodes). The peers connect to a central server which acts as a chat\nserver for them to establish direct connections between each other (data connections).\nThese connections are used for transferring network data (Ethernet frames).\n.SS \"Features\"\n.P\n.B \"Data connections\"\n.P\nPeers can transfer network data either over UDP or TCP. For both there are ways of\nsecuring the data (see below).\n.P\n.B \"IPv6 support\"\n.P\nIPv6 can be used for both server connections and data connections, alongside with IPv4.\nAdditionally, both can be combined to allow gradual migration to IPv6.\n.P\n.B \"Address selection\"\n.P\nBecause NATs and firewalls are widespread, it is harder for peer-to-peer services to operate.\nIn general, for two computers to be able to communicate, one computer must\n.I bind\nto one of its addresses, and the other computer must\n.I connect\nto the computer that binded (both for TCP and UDP). In a network with point-to-point\nconnectivity, the connecting computer can connect to the same address as the binding computer\nbound to, so it is sufficient for the binding computer to send its address to the connecting\ncomputer. However, NATs and firewalls break point-to-point connectivity. When a network is\nbehind a NAT, it is, by default, impossible for computers outside of that network to connect\nto computers inside the network. This is because computers inside the network have no externally\nvisible IP address, and only communicate with the outside world through the external IP address\nof the NAT router. It is however possible to manually configure the NAT router to\n.I forward\na specific port number on its external IP address to a specific computer inside the network.\nThis makes it possible for a computer outside of the network to connect to a computer inside\na network, however, it must connect to the external address of the NAT router (rather than\nthe address the computer inside bound to, which is its internal address). So there needs\nto be some way for the connecting peer to know what address to connect to.\n.P\nBadVPN solves this problem with so-called\n.IR \"address scopes\" \".\"\nThe peer that binds must have a list of external addresses for each address it can bind to,\npossibly ordered from best to worst. Each external address has its scope name. A scope name\nrepresents part of a network from which an external address can be reached. On the other hand,\nthe peer that connects must have a list of scopes which it can reach. When a peer binds to an\naddress, it sends the other peer a list of external addresses along with scope names. That peer\nthan chooses the first external address whose scope it recognizes and attempts to connect to it\n(if there is one).\n.P\nBadVPN also allows a peer to have multiple addresses for binding to. It is possible to specify\nboth an IPv4 and an IPv6 address to work in a multi-protocol environment.\n.P\n.B \"Relaying\"\n.P\nBadVPN can be configured to allow pairs of peers that cannot communicate directly (i.e. because of\nNATs or firewalls) to relay network data through a third peer. Relaying is only attempted if\nnone of the two peers recognize any of the other peer's external addresses (or there are none).\nFor relaying to work, for each of the two peers (P1, other one P2) there must be at least one\nthird peer (R) that P1 it is allowed to relay through and can communicate directly with, and all\nsuch peers R must be able to communicate directly with P2.\n.P\n.B \"IGMP snooping\"\n.P\nBadVPN nodes perform IGMP snooping in order to efficiently deliver multicast frames. For example,\nthis makes it possible to use BadVPN as a tunnel into an IPTV network of an Internet Service Provider\nfor you to watch TV from wherever you want (given sufficient link quality).\n.P\n.B \"Code quality\"\n.P\nBadVPN has great focus on code quality and reliability. BadVPN is written in the C programming\nlanguage. It is a single-threaded event-driven program. This allows for low resource usage and\nfast response times. Even though C is a relatively low-level language, the programs are made of\nsmall, highly cohesive and loosely coupled modules that are combined into a complete program on\na high level. Modules are accesed and communicate through small, simple and to-the-point interfaces.\nIt utilizes a flow-based design which greatly simplifies processing of data and input and output\nof the programs.\n.SS \"Security features\"\n.P\nBadVPN contains many security features, all of which are optional. The included security\nfeatures are described here.\n.P\n.B TLS for client-server connections\n.P\nIt is possible for the peers to communicate with the chat server securely with TLS. It is\nhighly recommended that this feature is used if any security whatsoever is needed. Not\nusing it renders all other security features useless, since clients exchange keys\nunencrypted via the server. When enabled, the chat server requires each client to identify\nitself with a certificate.\n.P\nBadVPN uses Mozilla's NSS library for TLS support. This means that the required certificates\nand keys must be available in a NSS database. The database and certificates can be\ngenerated with the\n.B certutil\ncommand. See the examples section on how to generate and distribute the certificates.\n.P\n.B TLS for peer messaging\n.P\nIf TLS is being used for client-server connections, it will also be used between each pair of\npeers communicating via the server, on top of the TLS connections to the server. This secures\nthe messages from the server itself. It is important because the messages may include\nencryption keys and other private data.\n.P\n.B TLS for TCP data connections\n.P\nIf TCP is used for data connections between the peers, the data connections can be secured\nwith TLS. This requires using TLS for client-server connections. The clients need to trust\neach others' certificates to be able to connect. Additionally, each client must identify to\nits peers with the same certificates it used for connecting to the server.\n.P\n.B Encryption for UDP data connections\n.P\nIf UDP is used for data connections, it is possible for each pair of peers to encrypt their\nUDP packets with a symmetric block cipher. Note that the encryption keys are transmitted\nthrough the server unencrypted, so for this to be useful, server connections must be secured\nwith TLS. The encryption aims to prevent third parties from seeing the real contents of\nthe network data being transfered.\n.P\n.B Hashes for UDP data connections\n.P\nIf UDP is used for data connections, it is possible to include hashes in packets. Note that\nhashes are only useful together with encryption. If enabled, the hash is calculated on the\npacket with the hash field zeroed and then written to the hash field. Hashes are calculated\nand included before encryption (if enabled). Combined with encryption, hashes aim to prevent\nthird parties from tampering with the packets and injecting them into the network.\n.P\n.B One-time passwords for UDP data connections\n.P\nIf UDP is used for data connections, it is possible to include one-time passwords in packets.\nNote that for this to be useful, server connections must be secured with TLS.\nOne-time passwords are generated from a seed value by encrypting zero data with a block cipher.\nThe seed contains the encryption key for the block cipher and the initialization vector.\nOnly a fixed number of passwords are used from a single seed. The peers exchange seeds through\nthe server. One-time passwords aim to prevent replay attacks.\n.P\n.B Control over peer communication\n.P\nIt is possible to instruct the chat server to only allow certain peers to communicate. This\nwill break end-to-end connectivity in the virtual network. It is useful in certain cases\nto improve security, for example when the VPN is used only to allow clients to securely connect\nto a central service.\n.SH \"EXAMPLES\"\n.SS \"Setting up certificates\"\n.P\nIf you want to use TLS for server connections (recommended), the server and all the peers will\nneed certificates. This section explains how to generate and distribute the certificates using\nNSS command line tools.\n.P\n.B Setting up the Certificate Authority (CA)\n.P\nOn the system that will host the CA, create a NSS database for the CA and generate a CA certificate\nvalid for 24 months:\n.P\nvpnca $ certutil -d sql:/home/vpnca/nssdb -N\n.br\nvpnca $ certutil -d sql:/home/vpnca/nssdb -S -n \"vpnca\" -s \"CN=vpnca\" -t \"TC,,\" -x -2 -v 24\n.br\n> Is this a CA certificate [y/N]? y\n.br\n> Enter the path length constraint, enter to skip [<0 for unlimited path]: > -1\n.br\n> Is this a critical extension [y/N]? n\n.P\nExport the public CA certificate (this file is public):\n.P\nvpnca $ certutil -d sql:/home/vpnca/nssdb -L -n vpnca -a > ca.pem\n.P\n.B Setting up the server certificate\n.P\nOn the CA system, generate a certificate for the server valid for 24 months, with TLS server usage context:\n.P\nvpnca $ certutil -d sql:/home/vpnca/nssdb -S -n \"<insert_server_name>\" -s \"CN=<insert_server_name>\" -c \"vpnca\" -t \",,\" -2 -6 -v 24\n.br\n> 0\n.br\n> -1\n.br\n> Is this a critical extension [y/N]? n\n.br\n> Is this a CA certificate [y/N]? n\n.br\n> Enter the path length constraint, enter to skip [<0 for unlimited path]: >\n.br\n> Is this a critical extension [y/N]? n\n.P\nExport the server certificate to a PKCS#12 file (this file must be kept secret):\n.P\nvpnca $ pk12util -d sql:/home/vpnca/nssdb -o server.p12 -n \"<insert_server_name>\"\n.P\nOn the system that will run the server, create a NSS database and import the CA certificate\nand the server cerificate:\n.P\nvpnserver $ certutil -d sql:/home/vpnserver/nssdb -N\n.br\nvpnserver $ certutil -d sql:/home/vpnserver/nssdb -A -t \"CT,,\" -n \"vpnca\" -i /path/to/ca.pem\n.br\nvpnserver $ pk12util -d sql:/home/vpnserver/nssdb -i /path/to/server.p12\n.P\n.B Setting up peer certificates\n.P\nOn the CA system, generate a certificate for the peer valid for 24 months, with TLS client and\nTLS server usage contexts:\n.P\nvpnca $ certutil -d sql:/home/vpnca/nssdb -S -n \"peer-<insert_name>\" -s \"CN=peer-<insert_name>\" -c \"vpnca\" -t \",,\" -2 -6 -v 24\n.br\n> 0\n.br\n> 1\n.br\n> -1\n.br\n> Is this a critical extension [y/N]? n\n.br\n> Is this a CA certificate [y/N]? n\n.br\n> Enter the path length constraint, enter to skip [<0 for unlimited path]: >\n.br\n> Is this a critical extension [y/N]? n\n.P\nExport the peer certificate to a PKCS#12 file (this file must be kept secret):\n.P\nvpnca $ pk12util -d sql:/home/vpnca/nssdb -o peer-<insert_name>.p12 -n \"peer-<insert_name>\"\n.P\nOn the system that will run the VPN client, create a NSS database and import the CA certificate\nand the peer cerificate:\n.P\nvpnclient $ certutil -d sql:/home/vpnclient/nssdb -N\n.br\nvpnclient $ certutil -d sql:/home/vpnclient/nssdb -A -t \"CT,,\" -n \"vpnca\" -i /path/to/ca.pem\n.br\nvpnclient $ pk12util -d sql:/home/vpnclient/nssdb -i /path/to/peer-<insert_name>.p12\n.SS \"Setting up TAP devices\"\n.P\nYou need to create and configure TAP devices on all computers that will participate in the virtual network\n(i.e. run the client program). See\n.BR badvpn-client (8),\nsection `TAP DEVICE CONFIGURATION` for details.\n.SS \"Example: Local IPv4 network, UDP transport, zero security\"\n.P\n.B Starting the server:\n.P\nbadvpn-server --listen-addr 0.0.0.0:7000\n.P\n.B Starting the peers:\n.P\nbadvpn-client\n.RS\n--server-addr <insert_server_local_address>:7000\n.br\n--transport-mode udp --encryption-mode none --hash-mode none\n.br\n--scope local1\n.br\n--bind-addr 0.0.0.0:8000 --num-ports 30 --ext-addr {server_reported}:8000 local1\n.br\n--tapdev tap0\n.RE\n.SS \"Example: Adding TLS and UDP security\"\n.P\n.B Starting the server (other options as above):\n.P\nbadvpn-server ...\n.RS\n--ssl --nssdb sql:/home/vpnserver/nssdb --server-cert-name \"<insert_server_name>\"\n.RE\n.P\n.B Starting the peers (other options as above):\n.P\nbadvpn-client ...\n.RS\n--ssl --nssdb sql:/home/vpnclient/nssdb --client-cert-name \"peer-<insert_name>\"\n.br\n--encryption-mode blowfish --hash-mode md5 --otp blowfish 3000 2000\n.RE\n.SS \"Example: Multiple local networks behind NATs, all connected to the Internet\"\n.P\nFor each peer in the existing local network, configure the NAT router to forward its\nrange of ports to it (assuming their port ranges do not overlap). The clients also need\nto know the external IP address of the NAT router. If you don't have a static one,\nyou'll need to discover it before starting the clients. Also forward the server port to\nthe server.\n.P\n.B Starting the peers in the local network (other options as above):\n.P\nbadvpn-client\n.RS\n.RB \"...\"\n.br\n--scope internet\n.br\n.RB \"...\"\n.br\n--ext-addr <insert_NAT_routers_external_IP>:<insert_start_of_forwarded_port_range> internet\n.br\n.RB \"...\"\n.RE\n.P\nThe --ext-addr option applies to the previously specified --bind-addr option, and must come after\nthe first --ext-addr option which specifies a local address.\n.P\nNow perform a similar setup in some other local network behind a NAT. However:\n.br\n- Don't set up a new server, instead make the peers connect to the existing server in the first\nlocal network.\n.br\n- You can't use {server_reported} for the local address --ext-addr options, because the server\nwould report the NAT router's external address rather than the peer's internal address. Instead\neach peer has to know its internal IP address.\n.br\n- Use a different scope name for it, e.g. \"local2\" instead of \"local1\".\n.P\nIf setup correctly, all peers will be able to communicate: those in the same local network will\ncommunicate directly through local addresses, and those in different local networks will\ncommunicate through the Internet.\n.SH \"PROTOCOL\"\nThe protocols used in BadVPN are described in the source code in the protocol/ directory.\n.SH \"SEE ALSO\"\n.BR badvpn-server (8),\n.BR badvpn-client (8)\n.SH AUTHORS\nAmbroz Bizjak <ambrop7@gmail.com>\n"
        },
        {
          "name": "badvpn.nix",
          "type": "blob",
          "size": 0.419921875,
          "content": "{ stdenv, cmake, pkgconfig, openssl, nspr, nss, debug ? false }:\nlet\n    compileFlags = \"-O3 ${stdenv.lib.optionalString (!debug) \"-DNDEBUG\"}\";\nin\nstdenv.mkDerivation {\n    name = \"badvpn\";\n    nativeBuildInputs = [ cmake pkgconfig ];\n    buildInputs = [ openssl nspr nss ];\n    src = stdenv.lib.cleanSource ./.;\n    preConfigure = ''\n        cmakeFlagsArray=( \"-DCMAKE_BUILD_TYPE=\" \"-DCMAKE_C_FLAGS=${compileFlags}\" );\n    '';\n}\n"
        },
        {
          "name": "base",
          "type": "tree",
          "content": null
        },
        {
          "name": "blog_channels.txt",
          "type": "blob",
          "size": 2.2900390625,
          "content": "server 4\nclient 4\nflooder 4\ntun2socks 4\nncd 4\nncd_var 4\nncd_list 4\nncd_depend 4\nncd_multidepend 4\nncd_dynamic_depend 4\nncd_concat 4\nncd_if 4\nncd_strcmp 4\nncd_regex_match 4\nncd_logical 4\nncd_sleep 4\nncd_print 4\nncd_blocker 4\nncd_run 4\nncd_runonce 4\nncd_daemon 4\nncd_spawn 4\nncd_imperative 4\nncd_ref 4\nncd_index 4\nncd_alias 4\nncd_process_manager 4\nncd_ondemand 4\nncd_foreach 4\nncd_choose 4\nncd_net_backend_waitdevice 4\nncd_net_backend_waitlink 4\nncd_net_backend_badvpn 4\nncd_net_backend_wpa_supplicant 4\nncd_net_backend_rfkill 4\nncd_net_up 4\nncd_net_dns 4\nncd_net_iptables 4\nncd_net_ipv4_addr 4\nncd_net_ipv4_route 4\nncd_net_ipv4_dhcp 4\nncd_net_ipv4_arp_probe 4\nncd_net_watch_interfaces 4\nncd_sys_watch_input 4\nncd_sys_watch_usb 4\nncd_sys_evdev 4\nncd_sys_watch_directory 4\nStreamPeerIO 4\nDatagramPeerIO 4\nBReactor 3\nBSignal 3\nFragmentProtoAssembler 4\nBPredicate 3\nServerConnection 4\nListener 4\nDataProto 4\nFrameDecider 4\nBSocksClient 4\nBDHCPClientCore 4\nBDHCPClient 4\nNCDIfConfig 4\nBUnixSignal 4\nBProcess 4\nPRStreamSink 4\nPRStreamSource 4\nPacketProtoDecoder 4\nDPRelay 4\nBThreadWork 4\nDPReceive 4\nBInputProcess 4\nNCDUdevMonitorParser 4\nNCDUdevMonitor 4\nNCDUdevCache 4\nNCDUdevManager 4\nBTime 4\nBEncryption 4\nSPProtoDecoder 4\nLineBuffer 4\nBTap 4\nlwip 4\nNCDConfigTokenizer 4\nNCDConfigParser 4\nNCDValParser 4\nnsskey 4\naddr 4\nPasswordListener 4\nNCDInterfaceMonitor 4\nNCDRfkillMonitor 4\nudpgw 4\nUdpGwClient 4\nSocksUdpGwClient 4\nSocksUdpClient 4\nBNetwork 4\nBConnection 4\nBSSLConnection 4\nBDatagram 4\nPeerChat 4\nBArpProbe 4\nNCDModuleIndex 4\nNCDModuleProcess 4\nNCDValGenerator 4\nncd_from_string 4\nncd_to_string 4\nncd_value 4\nncd_try 4\nncd_sys_request_server 4\nNCDRequest 4\nncd_net_ipv6_wait_dynamic_addr 4\nNCDRequestClient 4\nncd_request 4\nncd_sys_request_client 4\nncd_exit 4\nncd_getargs 4\nncd_arithmetic 4\nncd_parse 4\nncd_valuemetic 4\nncd_file 4\nncd_netmask 4\nncd_implode 4\nncd_call2 4\nncd_assert 4\nncd_reboot 4\nncd_explode 4\nNCDPlaceholderDb 4\nNCDVal 4\nncd_net_ipv6_addr 4\nncd_net_ipv6_route 4\nncd_net_ipv4_addr_in_network 4\nncd_net_ipv6_addr_in_network 4\ndostest_server 4\ndostest_attacker 4\nncd_timer 4\nncd_file_open 4\nncd_backtrack 4\nncd_socket 4\nncd_depend_scope 4\nncd_substr 4\nncd_sys_start_process 4\nNCDBuildProgram 4\nncd_log 4\nncd_log_msg 4\nncd_buffer 4\nncd_getenv 4\nBThreadSignal 4\nBLockReactor 4\nncd_load_module 4\nncd_basic_functions 4\nncd_objref 4\n"
        },
        {
          "name": "blog_generator",
          "type": "tree",
          "content": null
        },
        {
          "name": "bproto",
          "type": "tree",
          "content": null
        },
        {
          "name": "bproto_generator",
          "type": "tree",
          "content": null
        },
        {
          "name": "build-win32.nix",
          "type": "blob",
          "size": 0.6025390625,
          "content": "# NOTE: Must be used with patched nixpkgs:\n# https://github.com/ambrop72/nixpkgs/tree/cross-mingw-nss\n\nlet\n    pkgsFun = import <nixpkgs>;\n    \n    crossSystem = {\n        config = \"i686-w64-mingw32\";\n        arch = \"x86\";\n        libc = \"msvcrt\";\n        platform = {};\n        openssl.system = \"mingw\";\n        is64bit = false;\n    };\n    \n    pkgs = pkgsFun {\n        inherit crossSystem;\n    };\n    \nin\nrec {\n    inherit pkgs;\n    \n    badvpnPkgsFunc = import ./badvpn-win32.nix;\n    \n    badvpnPkgs = pkgs.callPackage badvpnPkgsFunc {};\n    badvpnDebugPkgs = pkgs.callPackage badvpnPkgsFunc { debug = true; };\n}\n"
        },
        {
          "name": "build.nix",
          "type": "blob",
          "size": 0.1962890625,
          "content": "{ pkgs ? (import <nixpkgs> {}) }:\nwith pkgs;\nrec {\n    badvpnFunc = import ./badvpn.nix;\n    badvpn = pkgs.callPackage badvpnFunc {};\n    badvpnDebug = pkgs.callPackage badvpnFunc { debug = true; };\n}\n"
        },
        {
          "name": "client",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "compile-tun2socks.sh",
          "type": "blob",
          "size": 3.146484375,
          "content": "#!/usr/bin/env bash\n#\n# Compiles tun2socks for Linux.\n# Intended as a convenience if you don't want to deal with CMake.\n\n# Input environment vars:\n#   SRCDIR - BadVPN source code\n#   OUTDIR - tun2socks binary output file directory\n#   CC - compiler\n#   CFLAGS - compiler compile flags\n#   LDFLAGS - compiler link flags\n#   ENDIAN - \"little\" or \"big\"\n#   KERNEL - \"2.6\" or \"2.4\", default \"2.6\"\n#\n# Puts object files and the executable in the working directory.\n#\n\nif [[ -z $SRCDIR ]] || [[ ! -e $SRCDIR/CMakeLists.txt ]]; then\n    echo \"SRCDIR is wrong\"\n    exit 1\nfi\n\nif [[ ! -z $OUTDIR ]] && [[ ! -d $OUTDIR  ]]; then\n    echo \"OUTDIR is wrong\"\n    exit 1\nfi\n\nif ! \"${CC}\" --version &>/dev/null; then\n    echo \"CC is wrong\"\n    exit 1\nfi\n\nif [[ $ENDIAN != \"little\" ]] && [[ $ENDIAN != \"big\" ]]; then\n    echo \"ENDIAN is wrong\"\n    exit 1\nfi\n\nif [[ -z $KERNEL ]]; then\n    KERNEL=\"2.6\"\nelif [[ $KERNEL != \"2.6\" ]] && [[ $KERNEL != \"2.4\" ]]; then\n    echo \"KERNEL is wrong\"\n    exit 1\nfi\n\nCFLAGS=\"${CFLAGS} -std=gnu99\"\nINCLUDES=( \"-I${SRCDIR}\" \"-I${SRCDIR}/lwip/src/include/ipv4\" \"-I${SRCDIR}/lwip/src/include/ipv6\" \"-I${SRCDIR}/lwip/src/include\" \"-I${SRCDIR}/lwip/custom\" )\nDEFS=( -DBADVPN_THREAD_SAFE=0 -DBADVPN_LINUX -DBADVPN_BREACTOR_BADVPN -D_GNU_SOURCE )\n\n[[ $KERNEL = \"2.4\" ]] && DEFS=( \"${DEFS[@]}\" -DBADVPN_USE_SELFPIPE -DBADVPN_USE_POLL ) || DEFS=( \"${DEFS[@]}\" -DBADVPN_USE_SIGNALFD -DBADVPN_USE_EPOLL )\n\n[[ $ENDIAN = \"little\" ]] && DEFS=( \"${DEFS[@]}\" -DBADVPN_LITTLE_ENDIAN ) || DEFS=( \"${DEFS[@]}\" -DBADVPN_BIG_ENDIAN )\n\n[[ -z $OUTDIR ]] && OUTDIR=\".\"\n    \nSOURCES=\"\nbase/BLog_syslog.c\nsystem/BReactor_badvpn.c\nsystem/BSignal.c\nsystem/BConnection_unix.c\nsystem/BConnection_common.c\nsystem/BTime.c\nsystem/BUnixSignal.c\nsystem/BNetwork.c\nsystem/BDatagram_common.c\nsystem/BDatagram_unix.c\nflow/StreamRecvInterface.c\nflow/PacketRecvInterface.c\nflow/PacketPassInterface.c\nflow/StreamPassInterface.c\nflow/SinglePacketBuffer.c\nflow/BufferWriter.c\nflow/PacketBuffer.c\nflow/PacketStreamSender.c\nflow/PacketPassConnector.c\nflow/PacketProtoFlow.c\nflow/PacketPassFairQueue.c\nflow/PacketProtoEncoder.c\nflow/PacketProtoDecoder.c\nsocksclient/BSocksClient.c\ntuntap/BTap.c\nlwip/src/core/udp.c\nlwip/src/core/memp.c\nlwip/src/core/init.c\nlwip/src/core/pbuf.c\nlwip/src/core/tcp.c\nlwip/src/core/tcp_out.c\nlwip/src/core/sys.c\nlwip/src/core/netif.c\nlwip/src/core/def.c\nlwip/src/core/mem.c\nlwip/src/core/tcp_in.c\nlwip/src/core/stats.c\nlwip/src/core/ip.c\nlwip/src/core/timeouts.c\nlwip/src/core/inet_chksum.c\nlwip/src/core/ipv4/icmp.c\nlwip/src/core/ipv4/ip4.c\nlwip/src/core/ipv4/ip4_addr.c\nlwip/src/core/ipv4/ip4_frag.c\nlwip/src/core/ipv6/ip6.c\nlwip/src/core/ipv6/nd6.c\nlwip/src/core/ipv6/icmp6.c\nlwip/src/core/ipv6/ip6_addr.c\nlwip/src/core/ipv6/ip6_frag.c\nlwip/custom/sys.c\ntun2socks/tun2socks.c\nbase/DebugObject.c\nbase/BLog.c\nbase/BPending.c\nflowextra/PacketPassInactivityMonitor.c\ntun2socks/SocksUdpGwClient.c\nudpgw_client/UdpGwClient.c\nsocks_udp_client/SocksUdpClient.c\n\"\n\nset -e\nset -x\n\nOBJS=()\nfor f in $SOURCES; do\n    obj=${f//\\//_}.o\n    \"${CC}\" -c ${CFLAGS} \"${INCLUDES[@]}\" \"${DEFS[@]}\" \"${SRCDIR}/${f}\" -o \"${obj}\"\n    OBJS=( \"${OBJS[@]}\" \"${obj}\" )\ndone\n\n\"${CC}\" ${LDFLAGS} \"${OBJS[@]}\" -o $OUTDIR/tun2socks -lrt -lpthread\n"
        },
        {
          "name": "compile-udpgw.sh",
          "type": "blob",
          "size": 2.03515625,
          "content": "#!/usr/bin/env bash\n#\n# Compiles udpgw for Linux.\n# Intended as a convenience if you don't want to deal with CMake.\n\n# Input environment vars:\n#   SRCDIR - BadVPN source code\n#   CC - compiler\n#   CFLAGS - compiler compile flags\n#   LDFLAGS - compiler link flags\n#   ENDIAN - \"little\" or \"big\"\n#   KERNEL - \"2.6\" or \"2.4\", default \"2.6\"\n#\n# Puts object files and the executable in the working directory.\n#\n\nif [[ -z $SRCDIR ]] || [[ ! -e $SRCDIR/CMakeLists.txt ]]; then\n    echo \"SRCDIR is wrong\"\n    exit 1\nfi\n\nif ! \"${CC}\" --version &>/dev/null; then\n    echo \"CC is wrong\"\n    exit 1\nfi\n\nif [[ $ENDIAN != \"little\" ]] && [[ $ENDIAN != \"big\" ]]; then\n    echo \"ENDIAN is wrong\"\n    exit 1\nfi\n\nif [[ -z $KERNEL ]]; then\n    KERNEL=\"2.6\"\nelif [[ $KERNEL != \"2.6\" ]] && [[ $KERNEL != \"2.4\" ]]; then\n    echo \"KERNEL is wrong\"\n    exit 1\nfi\n\nCFLAGS=\"${CFLAGS} -std=gnu99\"\nINCLUDES=( \"-I${SRCDIR}\" )\nDEFS=( -DBADVPN_THREAD_SAFE=0 -DBADVPN_LINUX -DBADVPN_BREACTOR_BADVPN -D_GNU_SOURCE )\n\n[[ $KERNEL = \"2.4\" ]] && DEFS=( \"${DEFS[@]}\" -DBADVPN_USE_SELFPIPE -DBADVPN_USE_POLL ) || DEFS=( \"${DEFS[@]}\" -DBADVPN_USE_SIGNALFD -DBADVPN_USE_EPOLL )\n\n[[ $ENDIAN = \"little\" ]] && DEFS=( \"${DEFS[@]}\" -DBADVPN_LITTLE_ENDIAN ) || DEFS=( \"${DEFS[@]}\" -DBADVPN_BIG_ENDIAN )\n    \nSOURCES=\"\nbase/BLog_syslog.c\nsystem/BReactor_badvpn.c\nsystem/BSignal.c\nsystem/BConnection_unix.c\nsystem/BConnection_common.c\nsystem/BDatagram_unix.c\nsystem/BTime.c\nsystem/BUnixSignal.c\nsystem/BNetwork.c\nflow/StreamRecvInterface.c\nflow/PacketRecvInterface.c\nflow/PacketPassInterface.c\nflow/StreamPassInterface.c\nflow/SinglePacketBuffer.c\nflow/BufferWriter.c\nflow/PacketBuffer.c\nflow/PacketStreamSender.c\nflow/PacketProtoFlow.c\nflow/PacketPassFairQueue.c\nflow/PacketProtoEncoder.c\nflow/PacketProtoDecoder.c\nbase/DebugObject.c\nbase/BLog.c\nbase/BPending.c\nudpgw/udpgw.c\n\"\n\nset -e\nset -x\n\nOBJS=()\nfor f in $SOURCES; do\n    obj=$(basename \"${f}\").o\n    \"${CC}\" -c ${CFLAGS} \"${INCLUDES[@]}\" \"${DEFS[@]}\" \"${SRCDIR}/${f}\" -o \"${obj}\"\n    OBJS=( \"${OBJS[@]}\" \"${obj}\" )\ndone\n\n\"${CC}\" ${LDFLAGS} \"${OBJS[@]}\" -o udpgw -lrt -lpthread\n"
        },
        {
          "name": "dhcpclient",
          "type": "tree",
          "content": null
        },
        {
          "name": "dostest",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "fix_flex.php",
          "type": "blob",
          "size": 0.3671875,
          "content": "<?php\n\n$filename = $argv[1];\n$contents = file_get_contents($filename);\nif ($contents === FALSE) exit(1);\n$search = array(\"<inttypes.h>\", \"#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L\");\n$replace = array(\"<stdint.h>\", \"#if 1\");\n$contents = str_replace($search, $replace, $contents);\n$res = file_put_contents($filename, $contents);\nif ($res === FALSE) exit(1);\n"
        },
        {
          "name": "flooder",
          "type": "tree",
          "content": null
        },
        {
          "name": "flow",
          "type": "tree",
          "content": null
        },
        {
          "name": "flowextra",
          "type": "tree",
          "content": null
        },
        {
          "name": "generate_files",
          "type": "blob",
          "size": 1.2880859375,
          "content": "#!/bin/bash\n\nset -e\n\nPHP_CMD=( php )\nFLEX_CMD=( flex )\nBISON_CMD=( bison )\n\nOUT_DIR=\"generated/\"\n\nfunction bproto() {\n    local input=\"$1\"\n    local name=\"$2\"\n    \"${PHP_CMD[@]}\" bproto_generator/bproto.php --input-file \"${input}\" --output-dir \"${OUT_DIR}\" --name \"bproto_${name}\"\n}\n\nfunction do_flex() {\n    local input=\"$1\"\n    local name=\"$2\"\n    \"${FLEX_CMD[@]}\" -o \"${OUT_DIR}/flex_${name}.c\" --header-file=\"${OUT_DIR}/flex_${name}.h\" \"${input}\"\n    \"${PHP_CMD[@]}\" fix_flex.php \"${OUT_DIR}/flex_${name}.c\"\n    \"${PHP_CMD[@]}\" fix_flex.php \"${OUT_DIR}/flex_${name}.h\"\n}\n\nfunction do_bison() {\n    local input=\"$1\"\n    local name=\"$2\"\n    \"${BISON_CMD[@]}\" -d -o \"${OUT_DIR}/bison_${name}.c\" \"${input}\"\n}\n\nfunction do_lemon() {\n    local input=\"$1\"\n    local name=$(basename \"${input}\")\n    (\n        cd generated &&\n        rm -f \"${name}\" &&\n        cp ../\"${input}\" \"${name}\" &&\n        ../lemon/lemon \"${name}\"\n    )\n}\n\nmkdir -p generated\n\nbproto tests/bproto_test.bproto bproto_test\nbproto protocol/msgproto.bproto msgproto\nbproto protocol/addr.bproto addr\ndo_flex predicate/BPredicate.l BPredicate\ndo_bison predicate/BPredicate.y BPredicate\n\"${PHP_CMD[@]}\" blog_generator/blog.php --input-file blog_channels.txt --output-dir \"${OUT_DIR}\"\ndo_lemon ncd/NCDConfigParser_parse.y\ndo_lemon ncd/NCDValParser_parse.y\n"
        },
        {
          "name": "generated",
          "type": "tree",
          "content": null
        },
        {
          "name": "lemon",
          "type": "tree",
          "content": null
        },
        {
          "name": "lime",
          "type": "tree",
          "content": null
        },
        {
          "name": "lwip",
          "type": "tree",
          "content": null
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "ncd-request",
          "type": "tree",
          "content": null
        },
        {
          "name": "ncd",
          "type": "tree",
          "content": null
        },
        {
          "name": "nspr_support",
          "type": "tree",
          "content": null
        },
        {
          "name": "predicate",
          "type": "tree",
          "content": null
        },
        {
          "name": "protocol",
          "type": "tree",
          "content": null
        },
        {
          "name": "random",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "security",
          "type": "tree",
          "content": null
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        },
        {
          "name": "server_connection",
          "type": "tree",
          "content": null
        },
        {
          "name": "socks_udp_client",
          "type": "tree",
          "content": null
        },
        {
          "name": "socksclient",
          "type": "tree",
          "content": null
        },
        {
          "name": "stringmap",
          "type": "tree",
          "content": null
        },
        {
          "name": "structure",
          "type": "tree",
          "content": null
        },
        {
          "name": "system",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "threadwork",
          "type": "tree",
          "content": null
        },
        {
          "name": "tun2socks",
          "type": "tree",
          "content": null
        },
        {
          "name": "tuntap",
          "type": "tree",
          "content": null
        },
        {
          "name": "udevmonitor",
          "type": "tree",
          "content": null
        },
        {
          "name": "udpgw",
          "type": "tree",
          "content": null
        },
        {
          "name": "udpgw_client",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}