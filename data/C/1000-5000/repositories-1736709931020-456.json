{
  "metadata": {
    "timestamp": 1736709931020,
    "page": 456,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "GStreamer/gstreamer",
      "stars": 2454,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.41796875,
          "content": "root = true\n\n[*]\ncharset = utf-8\nend_of_line = lf\nindent_style = space\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_size = 2\nmax_line_length = 80\n\n# PEP 8\n[*.py]\nindent_size = 4\nmax_line_length = 79\n\n# rustfmt defaults\n[*.rs]\nindent_size = 4\nmax_line_length = 100\n\n# From gst-examples\n[*.js]\nindent_size = 4\nmax_line_length = 80\n\n[{Makefile,Makefile.am}]\nindent_style = tab\nindent_size = tab\ntab_width = 8\n"
        },
        {
          "name": ".git-blame-ignore-revs",
          "type": "blob",
          "size": 0.7568359375,
          "content": "# List of commits meant to be ignored by `git blame` like coding style changes.\n# Can be used with `git blame --ignore-revs-file .git-blame-ignore-revs`\n# or enabled on this repo using `git config blame.ignoreRevsFile .git-blame-ignore-revs`\n# See https://michaelheap.com/git-ignore-rev/\n\n# re-indent with GNU indent 2.2.12\n3ad412808483963a4ed5d912109c87d452abd3fb\n00ae689f7cbc1d41e98c70de30828e67e430a120\n4380d12d78b40cd698cbc6260c293ddd7610f374\nf9eb4c5862f69171c17863bd231de136148436ef\ne857259e8d24fda221303793ab65f8afb60fa16d\n2abf3e363d45e20d8166612c063cb0579ec0d3ac\n81716a1097efc3221b48f9a811fbf4026f7067ba\n29484f6f124fb906f7a6acd325f0c6005e2172d3\n0fc568c6b17356ec36f6cc2dd48e192142e9dc17\n8759b77a5000c9e362dd552cda5dc17139ba425b\n574e6b7994b793eefd417c1f79e667b7b214481c\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.046875,
          "content": "subprojects/packagefiles/*/*.patch  text eol=lf\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.4990234375,
          "content": "cscope.in.out\ncscope.out\ncscope.po.out\n__pycache__\nprefix/\n.gdbinit\n\n# Editor/IDE spcific\n.helix/\n.vscode/\n.vscode-server/\n\n# Symlinks\n/gstreamer\n/gst-plugins-base\n/gst-plugins-good\n/libnice\n/gst-plugins-bad\n/gst-plugins-ugly\n/gst-libav\n/gst-rtsp-server\n/gst-devtools\n/gst-integration-testsuites\n/gst-editing-services\n/gstreamer-vaapi\n/gstreamer-sharp\n/pygobject\n/gst-python\n/gst-examples\n/gst-plugins-rs\n\n# Automatic meson redirect wrap files\nsubprojects/gobject-introspection.wrap\nsubprojects/gtest.wrap\nsubprojects/gvdb.wrap\nsubprojects/libepoxy.wrap\nsubprojects/libsass.wrap\nsubprojects/libtiff.wrap\nsubprojects/sassc.wrap\nsubprojects/abseil-cpp.wrap\nsubprojects/sysprof.wrap\n\nsubprojects/*/\n!subprojects/gst-devtools\n!subprojects/gst-docs\n!subprojects/gst-editing-services\n!subprojects/gst-examples\n!subprojects/gst-integration-testsuites\n!subprojects/gst-libav\n!subprojects/gst-plugins-bad\n!subprojects/gst-plugins-base\n!subprojects/gst-plugins-good\n!subprojects/gst-plugins-ugly\n!subprojects/gst-python\n!subprojects/gstreamer\n!subprojects/gstreamer-sharp\n!subprojects/gstreamer-vaapi\n!subprojects/gst-rtsp-server\n!subprojects/macos-bison-binary\n!subprojects/win-flex-bison-binaries\n!subprojects/win-nasm\n!subprojects/packagefiles\n\n# VSCode integration\n# launch.json will be modified by users depending on the pipeline to test\n# We keep these files in the ignore list so they do not appear as modified\n.vscode/*\n\n# clangd integration\n.cache/*\n\n# apk files from CI (or following its commands)\n*.apk\n\n# Cache files (from emacs)\n*~\n"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 38.2451171875,
          "content": "include:\n  - project: 'freedesktop/ci-templates'\n    ref: \"3826695f80807d8a4d999f6b6efb3d405d708db9\"\n    file: '/templates/fedora.yml'\n  - project: 'freedesktop/ci-templates'\n    ref: \"3826695f80807d8a4d999f6b6efb3d405d708db9\"\n    file: '/templates/debian.yml'\n  ###\n  # IMPORTANT\n  # These are the version tags for the docker images the CI runs against.\n  # If you are hacking on them or need a them to rebuild, you need to change\n  # the appropriate version string in this file which will cause a rebuild.\n  ###\n  - local: '.gitlab-image-tags.yml'\n\nstages:\n  - 'preparation'\n  - 'build'\n  - 'test'\n  # Use the resulting binaries\n  - 'integrate'\n\nvariables:\n  GIT_DEPTH: 1\n\n  # Branch to track for modules that have no ref specified in the manifest\n  GST_UPSTREAM_BRANCH: 'main'\n\n  FDO_UPSTREAM_REPO: 'gstreamer/gstreamer'\n\n  MESON_COMMIT:\n    description: \"Overwrite the meson version installed on the CI images with the specified meson commit\"\n    value: \"\"\n\n  FEDORA_AMD64_SUFFIX: 'amd64/fedora'\n  DEBIAN_AMD64_SUFFIX: 'amd64/debian'\n  INDENT_AMD64_SUFFIX: 'amd64/gst-indent'\n  COMMITLINT_AMD64_SUFFIX: 'amd64/commitlint'\n  WINDOWS_AMD64_SUFFIX: 'amd64/windows'\n  ABI_CHECK_AMD64_SUFFIX: 'amd64/abi-check'\n\n  WINDOWS_IMAGE: \"$CI_REGISTRY_IMAGE/$WINDOWS_AMD64_SUFFIX:$WINDOWS_TAG-$GST_UPSTREAM_BRANCH\"\n  WINDOWS_UPSTREAM_IMAGE: \"$CI_REGISTRY/$FDO_UPSTREAM_REPO/$WINDOWS_AMD64_SUFFIX:$WINDOWS_TAG-$GST_UPSTREAM_BRANCH\"\n\n  DEFAULT_MESON_ARGS: >-\n    -Dlibnice:tests=disabled\n    -Dlibnice:examples=disabled\n    -Dlibnice:gupnp=disabled\n    -Dopenh264:tests=disabled\n    -Dgst-plugins-base:opus=enabled\n    -Dgst-plugins-good:soup-lookup-dep=true\n    -Dgst-plugins-good:vpx=enabled\n    -Dpygobject:tests=false\n    -Dpython=enabled\n    -Dlibav=enabled\n    -Dugly=enabled\n    -Dbad=enabled\n    -Ddevtools=enabled\n    -Dges=enabled\n    -Drtsp_server=enabled\n    -Dvaapi=enabled\n    -Dsharp=disabled\n    -Drs=disabled\n    -Dgpl=enabled\n    -Dintrospection=enabled\n    --force-fallback-for=soundtouch\n\n  SIMPLE_BUILD: >-\n    ${DEFAULT_MESON_ARGS}\n    -Dsharp=enabled\n    -Dgstreamer-sharp:werror=false\n    -Ddoc=disabled\n\n  FF_TIMESTAMPS: true\n\nworkflow:\n  # https://docs.gitlab.com/ee/ci/yaml/index.html#switch-between-branch-pipelines-and-merge-request-pipelines\n  rules:\n    - if: $CI_PIPELINE_SOURCE == \"schedule\"\n      variables:\n        GIT_FETCH_EXTRA_FLAGS: '--no-tags'\n    - if: '$CI_PIPELINE_SOURCE == \"merge_request_event\"'\n      variables:\n        GIT_FETCH_EXTRA_FLAGS: '--no-tags'\n    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == \"push\"\n      when: never\n    - if: '$CI_COMMIT_TAG'\n    - if: '$CI_COMMIT_BRANCH'\n      variables:\n        GIT_FETCH_EXTRA_FLAGS: '--no-tags'\n\n#\n# Global CI policy\n#\n# This can be used to configure global behaviour our our jobs.\n#\ndefault:\n  retry:\n    max: 2\n    when:\n      - 'runner_system_failure'\n      - 'stuck_or_timeout_failure'\n      - 'scheduler_failure'\n      - 'api_failure'\n  interruptible: true\n\n# This is an empty job that is used to trigger the pipeline.\ntrigger:\n  image: alpine:latest\n  stage: 'preparation'\n  variables:\n    GIT_STRATEGY: none\n  tags: [ 'placeholder-job' ]\n  script:\n    - echo \"Trigger job done, now running the pipeline.\"\n  rules:\n    # If this pipeline is triggered by a schedule, run automatically\n    - if: $CI_PIPELINE_SOURCE == \"schedule\"\n    # If the MR is assigned to the Merge bot, trigger the pipeline automatically\n    - if: '$CI_MERGE_REQUEST_ASSIGNEES == \"gstreamer-merge-bot\"'\n    # Require explicit action to trigger tests post merge, but we want to\n    # automatically trigger the integratation stage\n    - if: '$CI_PROJECT_NAMESPACE == \"gstreamer\" && $CI_COMMIT_BRANCH == $GST_UPSTREAM_BRANCH && $CI_JOB_STAGE != \"integrate\"'\n      when: 'manual'\n    # When the assignee isn't the merge bot, require an explicit action to trigger the pipeline\n    # to avoid wasting CI resources\n    - if: '$CI_MERGE_REQUEST_ASSIGNEES != \"gstreamer-merge-bot\"'\n      when: 'manual'\n      allow_failure: false\n\n.fedora image:\n  variables:\n    CCACHE_DIR: '/cache/gstreamer/gstreamer/ccache/'\n    FDO_DISTRIBUTION_VERSION: '40'\n    FDO_REPO_SUFFIX: \"$FEDORA_AMD64_SUFFIX\"\n    FDO_DISTRIBUTION_TAG: \"$FEDORA_TAG-$GST_UPSTREAM_BRANCH\"\n    FDO_DISTRIBUTION_EXEC: 'GIT_BRANCH=$CI_COMMIT_REF_NAME GIT_URL=$CI_REPOSITORY_URL bash ci/docker/fedora/prepare.sh'\n\n.fedora fluster image:\n  variables:\n    CCACHE_DIR: !reference [\".fedora image\", \"variables\", CCACHE_DIR]\n    FDO_DISTRIBUTION_VERSION: !reference [\".fedora image\", \"variables\", FDO_DISTRIBUTION_VERSION]\n    FDO_REPO_SUFFIX: !reference [\".fedora image\", \"variables\", FDO_REPO_SUFFIX]\n    FDO_DISTRIBUTION_TAG: \"fluster-$FEDORA_TAG-$GST_UPSTREAM_BRANCH\"\n    FDO_DISTRIBUTION_EXEC: \"bash ./ci/docker/fedora/virtme-fluster-setup.sh\"\n    # Base the fluster image on top of the main fedora build image\n    FDO_BASE_IMAGE: \"$CI_REGISTRY_IMAGE/$FDO_REPO_SUFFIX:$FEDORA_TAG-$GST_UPSTREAM_BRANCH\"\n\nfedora amd64 docker:\n  extends:\n    - '.fedora image'\n    - '.fdo.container-build@fedora'\n  stage: 'preparation'\n  needs: []\n  # Note: assumption is that placeholder jobs run on a packet runner\n  # (which has faster network connectivity to the registry).\n  tags: [ 'placeholder-job' ]\n\nfedora amd64 docker fluster:\n  extends:\n    - '.fedora fluster image'\n    - '.fdo.container-build@fedora'\n  stage: 'preparation'\n  needs: [\"fedora amd64 docker\"]\n  # Note: assumption is that placeholder jobs run on a packet runner\n  # (which has faster network connectivity to the registry).\n  tags: [ 'placeholder-job' ]\n\n# Build a toolbox specific image to workaround ci-templates\nfedora amd64 toolbox:\n  image: quay.io/freedesktop.org/ci-templates:container-build-base-2024-01-31.0\n  stage: 'preparation'\n  needs: [\"fedora amd64 docker\"]\n  # Note: assumption is that placeholder jobs run on a packet runner\n  # (which has faster network connectivity to the registry).\n  tags: [ 'placeholder-job' ]\n  variables:\n    GST_CI_IMAGE: !reference [\".build fedora x86_64\", \"variables\", FDO_DISTRIBUTION_IMAGE]\n    FDO_DISTRIBUTION_TAG: !reference [\".fedora image\", \"variables\", FDO_DISTRIBUTION_TAG]\n    FDO_REPO_SUFFIX: !reference [\".fedora image\", \"variables\", FDO_REPO_SUFFIX]\n  script:\n    - bash ci/scripts/build-toolbox-image.sh $GST_CI_IMAGE $FDO_DISTRIBUTION_TAG $GST_UPSTREAM_BRANCH\n\n.debian image:\n  variables:\n    CCACHE_DIR: '/cache/gstreamer/gstreamer/ccache_debian/'\n    FDO_BASE_IMAGE: \"quay.io/toolbx-images/debian-toolbox:12\"\n    FDO_DISTRIBUTION_VERSION: '12'\n    FDO_REPO_SUFFIX: \"$DEBIAN_AMD64_SUFFIX\"\n    FDO_DISTRIBUTION_TAG: \"$DEBIAN_TAG-$GST_UPSTREAM_BRANCH\"\n    FDO_DISTRIBUTION_EXEC: 'GIT_BRANCH=$CI_COMMIT_REF_NAME GIT_URL=$CI_REPOSITORY_URL bash ci/docker/debian/prepare.sh'\n\ndebian amd64 docker:\n  extends:\n    - '.debian image'\n    - '.fdo.container-build@debian'\n  stage: 'preparation'\n  needs: []\n  # Note: assumption is that placeholder jobs run on a packet runner\n  # (which has faster network connectivity to the registry).\n  tags: [ 'placeholder-job' ]\n\n.gst-indent image:\n  tags: [ 'placeholder-job' ]\n  variables:\n    FDO_DISTRIBUTION_VERSION: 'bookworm'\n    FDO_REPO_SUFFIX: \"$INDENT_AMD64_SUFFIX\"\n    FDO_DISTRIBUTION_TAG: \"$INDENT_TAG-$GST_UPSTREAM_BRANCH\"\n    FDO_DISTRIBUTION_PACKAGES: 'curl indent git findutils ca-certificates'\n    FDO_DISTRIBUTION_EXEC: 'ci/docker/indent/prepare.sh'\n\ngst-indent amd64 docker:\n  extends:\n    - '.gst-indent image'\n    - '.fdo.container-build@debian'\n  stage: 'preparation'\n  # Do not depend on the trigger, as we want to run indent always\n  needs: []\n\n.commitlint image:\n  tags: [ 'placeholder-job' ]\n  variables:\n    FDO_DISTRIBUTION_VERSION: '37'\n    FDO_REPO_SUFFIX: \"$COMMITLINT_AMD64_SUFFIX\"\n    FDO_DISTRIBUTION_TAG: \"$LINT_TAG-$GST_UPSTREAM_BRANCH\"\n    FDO_DISTRIBUTION_PACKAGES: 'python3-pip git'\n    FDO_DISTRIBUTION_EXEC: 'ci/docker/lint/prepare.sh'\n    FDO_USER: \"ciuser\"\n\ncommitlint docker:\n  extends:\n    - '.commitlint image'\n    - '.fdo.container-build@fedora'\n  stage: 'preparation'\n  # Do not depend on the trigger, as we want to run indent always\n  needs: []\n\nwindows amd64 docker:\n  stage: \"preparation\"\n  timeout: '3h'\n  variables:\n    # Unlike the buildah/linux jobs, this file\n    # needs to be relative to docker/windows/ subdir\n    # as it makes life easier in the powershell script\n    #\n    # We also don't need a CONTEXT_DIR var as its also\n    # hardcoded to be docker/windows/\n    DOCKERFILE: \"ci/docker/windows/Dockerfile\"\n  tags:\n    - windows\n    - shell\n    - \"2022\"\n  script:\n    # We need to pass an array and to resolve the env vars, so we can't use a variable:\n    - $DOCKER_BUILD_ARGS = @(`\n        \"--build-arg\", \"DEFAULT_BRANCH=$GST_UPSTREAM_BRANCH\", `\n        \"--build-arg\", \"CI_PROJECT_NAMESPACE=$CI_PROJECT_NAMESPACE\", `\n        \"--build-arg\", \"CI_COMMIT_REF_NAME=$CI_COMMIT_REF_NAME\" `\n      )\n    - ci/docker/windows/container.ps1 $CI_REGISTRY $CI_REGISTRY_USER $CI_REGISTRY_PASSWORD $WINDOWS_IMAGE $WINDOWS_UPSTREAM_IMAGE $DOCKERFILE\n\n.macos image:\n  image: \"registry.freedesktop.org/gstreamer/gstreamer/macos-arm64/15-sequoia:2024-10-28.0\"\n  tags:\n    - gst-mac-arm\n\n.abi-check image:\n  variables:\n    CCACHE_DIR: !reference [\".fedora image\", \"variables\", CCACHE_DIR]\n    FDO_DISTRIBUTION_VERSION: !reference [\".fedora image\", \"variables\", FDO_DISTRIBUTION_VERSION]\n    FDO_REPO_SUFFIX: !reference [\".fedora image\", \"variables\", FDO_REPO_SUFFIX]\n    FDO_BASE_IMAGE: '$CI_REGISTRY_IMAGE/$FDO_REPO_SUFFIX:$FEDORA_TAG-$GST_UPSTREAM_BRANCH'\n    FDO_DISTRIBUTION_TAG: \"abi-check-$ABI_CHECK_TAG-$GST_UPSTREAM_BRANCH\"\n    FDO_DISTRIBUTION_PACKAGES: 'libabigail'\n    FDO_DISTRIBUTION_EXEC: 'GIT_BRANCH=$CI_COMMIT_REF_NAME GIT_URL=$CI_REPOSITORY_URL bash ci/docker/abi-check/prepare.sh'\n    ABI_CHECK_CACHE: '/abi-check-cache'\n\nabi-check docker:\n  # placeholder-job has very minimal CPU available and may overrun the job\n  # timeout if an image rebuild (which builds GStreamer) needs to be performed.\n  #tags: [ 'placeholder-job' ]\n  stage: 'preparation'\n  extends:\n    - '.abi-check image'\n    - '.fdo.container-build@fedora'\n  needs:\n    - 'fedora amd64 docker'\n\n# ---- Preparation ----- #\n#\n# gst-indent!!\n#\ngst indent:\n  extends:\n    - '.gst-indent image'\n    - '.fdo.suffixed-image@debian'\n  stage: 'preparation'\n  needs:\n    - job: 'gst-indent amd64 docker'\n      artifacts: false\n  script:\n    - ./scripts/check-format-c\n    - ./scripts/format-csharp --check\n    # We want both wraps to use the same version, overkill to create a separate job for this\n    - cmp subprojects/gtk-sharp.wrap subprojects/gstreamer-sharp/subprojects/gtk-sharp.wrap\n  rules:\n    - !reference [.upstream-branch-rules, rules]\n    - if: '$CI_PROJECT_NAMESPACE != \"gstreamer\" || $CI_COMMIT_BRANCH != $GST_UPSTREAM_BRANCH'\n      when: 'always'\n\nrustfmt:\n  extends:\n    - '.fedora image'\n    - '.fdo.suffixed-image@fedora'\n  stage: 'preparation'\n  needs:\n    - \"fedora amd64 docker\"\n  tags: [ 'placeholder-job' ]\n  script:\n    - export RUSTUP_HOME=\"/usr/local/rustup\"\n    - export PATH=\"/usr/local/cargo/bin:$PATH\"\n    - ./scripts/format-rust --check\n  rules:\n    - changes:\n        compare_to: \"$GST_UPSTREAM_BRANCH\"\n        paths:\n          - .gitlab-ci.yml\n          - .gitlab-image-tags.yml\n          - subprojects/gstreamer/**/*.rs\n          - subprojects/gst-examples/**/*.rs\n          - ci/**/*\n          - ./scripts/format-rust\n\ncommitlint:\n  extends:\n    - '.commitlint image'\n    - '.fdo.suffixed-image@fedora'\n  stage: 'preparation'\n  variables:\n    GIT_STRATEGY: fetch\n    GIT_DEPTH: 100\n  needs:\n    - job: 'commitlint docker'\n      artifacts: false\n  before_script:\n    - git config --global --add safe.directory $CI_PROJECT_DIR\n  script:\n    - echo $CI_MERGE_REQUEST_DIFF_BASE_SHA\n    - gitlint --commits $CI_MERGE_REQUEST_DIFF_BASE_SHA..HEAD\n  rules:\n    # Only run on MR as we need CI_MERGE_REQUEST_DIFF_BASE_SHA to know\n    # what commits to check\n    - if: '$CI_PIPELINE_SOURCE == \"merge_request_event\"'\n\n.build_ccache_vars:\n  variables:\n    CCACHE_COMPILERCHECK: 'content'\n    CCACHE_COMPRESS: 'true'\n    CCACHE_BASEDIR: '/cache/gstreamer/gstreamer'\n    # shared across everything really\n    CCACHE_MAXSIZE: '10G'\n\n.base_modules_changes: &modules_changes\n  - .gitlab-ci.yml\n  - .gitlab-image-tags.yml\n  - gst-env.py\n  - ci/gitlab/*.py\n  - ci/scripts/**/*\n  - meson.build\n  - subprojects/*.wrap\n  - subprojects/gst-devtools/**/*\n  - subprojects/gst-editing-services/**/*\n  - subprojects/gst-integration-testsuites/**/*\n  - subprojects/gst-libav/**/*\n  - subprojects/gst-plugins-bad/**/*\n  - subprojects/gst-plugins-base/**/*\n  - subprojects/gst-plugins-good/**/*\n  - subprojects/gst-plugins-ugly/**/*\n  - subprojects/gst-python/**/*\n  - subprojects/gstreamer/**/*\n  - subprojects/gstreamer-sharp/**/*\n  - subprojects/gst-rtsp-server/**/*\n\n.upstream-branch-rules:\n  rules:\n    # If this matches, it means the pipeline is running against either the main\n    # or a stable branch, so make it manual\n    - if: '$CI_PROJECT_NAMESPACE == \"gstreamer\" && $CI_COMMIT_BRANCH == $GST_UPSTREAM_BRANCH'\n      when: manual\n\n# Check whether the gtk wrap had any changes, and if so, build it\n.gtk-build-rules:\n  rules:\n    - changes:\n        compare_to: \"$GST_UPSTREAM_BRANCH\"\n        paths:\n          - \".gitlab-ci.yml\"\n          - \"meson.build\"\n          - \"subprojects/*.wrap\"\n      variables:\n        GTK_ARGS: \"-Dgtk=enabled\"\n\n.build:\n  stage: 'build'\n  needs:\n    - \"trigger\"\n  # Taking into account the slowest shared runner + time needed to upload the binaries to artifacts\n  # Also need to take into account I/O of pulling docker images and uploading artifacts\n  timeout: '45min'\n  variables:\n    BUILD_GST_DEBUG: \"-Dgstreamer:gst_debug=true\"\n    GST_WERROR: \"true\"\n    MESON_ARGS: \"${DEFAULT_MESON_ARGS}\"\n    SUBPROJECTS_CACHE_DIR: \"/subprojects\"\n    # Avoid weird issue about cross-device links\n    # https://gitlab.freedesktop.org/gstreamer/gstreamer/-/issues/3197\n    GI_SCANNER_DISABLE_CACHE: \"1\"\n  script:\n    - $CI_PROJECT_DIR/ci/scripts/build.sh build/\n    - ./gst-env.py gst-inspect-1.0 --version\n    - ./gst-env.py gst-inspect-1.0\n  after_script:\n    - mv build/meson-logs/ meson-logs\n  artifacts:\n    expire_in: \"7 days\"\n    when: \"always\"\n    paths:\n      - 'meson-logs/'\n  rules:\n    - !reference [.upstream-branch-rules, rules]\n    - changes:\n        compare_to: \"$GST_UPSTREAM_BRANCH\"\n        paths:\n          *modules_changes\n    - changes:\n        compare_to: \"$GST_UPSTREAM_BRANCH\"\n        paths:\n          - \"subprojects/gstreamer-vaapi/**/*\"\n\n.build simple:\n  extends:\n    - '.build'\n    - '.build_ccache_vars'\n  variables:\n    GST_WERROR: \"true\"\n    MESON_ARGS: \"${SIMPLE_BUILD}\"\n    SUBPROJECTS_CACHE_DIR: \"/subprojects\"\n  script:\n    - $CI_PROJECT_DIR/ci/scripts/build.sh build/\n    - ./gst-env.py gst-inspect-1.0 --version\n    - ./gst-env.py gst-inspect-1.0\n    - G_DEBUG=fatal_criticals ./gst-env.py gst-inspect-1.0 --print-all --gst-disable-registry-fork > /dev/null\n    - meson install --destdir $CI_PROJECT_DIR/destdir -C build\n    - rm -rf $CI_PROJECT_DIR/destdir\n\n.build fedora x86_64:\n  extends:\n    - '.fedora image'\n    - '.fdo.suffixed-image@fedora'\n    - '.build simple'\n  needs:\n    - \"trigger\"\n    - \"fedora amd64 docker\"\n\n.build fedora fluster x86_64:\n  extends:\n    - '.fedora fluster image'\n    - '.fdo.suffixed-image@fedora'\n    - '.build simple'\n  needs:\n    - \"trigger\"\n    - \"fedora amd64 docker fluster\"\n\nbuild fedora gcc:\n  extends: '.build fedora x86_64'\n  variables:\n    CC: 'ccache gcc'\n    CXX: 'ccache g++'\n  parallel:\n    matrix:\n      - BUILD_TYPE: [ \"--default-library=shared\", \"--default-library=both\"]\n        BUILD_GST_DEBUG: [\"-Dgstreamer:gst_debug=true\", \"-Dgstreamer:gst_debug=false\"]\n\n      - BUILD_TYPE: [\"--default-library=static\"]\n        BUILD_GST_DEBUG: [\"-Dgstreamer:gst_debug=true\", \"-Dgstreamer:gst_debug=false\"]\n        # Passing Dpython=enabled prohibits us from -Dgst-editing-services:python=disabled which we\n        # currently need to statically build ges.\n        #\n        # subprojects/gst-editing-services/meson.build:153:4: ERROR: Problem encountered: Want to build python based modules but it is not supported while static building\n        # https://github.com/mesonbuild/meson/issues/5214\n        # https://gitlab.freedesktop.org/gstreamer/gstreamer/-/merge_requests/4281?commit_id=d1a687b61d8fbc5ae35b4bb62aa7fd1d091818f2#note_1875699\n        #\n        # VAAPI can't be build statically yet\n        # subprojects/gstreamer-vaapi/meson.build:8:2: ERROR: Problem encountered: GStreamer-VAAPI plugin not supported with `static` builds yet.\n        #\n        # Disabling gstreamer-sharp tests because they download things as part of configure with\n        # nuget which frequently fails on the CI (possibly because we're hammering the site)\n        #\n        # Disabling building both qt5 and qt6 when doing static builds since we can only link against one\n        MESON_ARGS: >-\n          ${DEFAULT_MESON_ARGS}\n          -Dvaapi=disabled\n          -Dpython=auto\n          -Dgst-editing-services:python=disabled\n          -Dintrospection=disabled\n          -Ddoc=disabled\n          -Dgstreamer-sharp:tests=disabled\n          -Dqt5=disabled -Dqt6=enabled\n\nbuild fedora clang:\n  extends: '.build fedora x86_64'\n  variables:\n    CC: 'ccache clang'\n    CXX: 'ccache clang++'\n  parallel:\n    matrix:\n      - BUILD_TYPE: [ \"--default-library=shared\", \"--default-library=both\"]\n        BUILD_GST_DEBUG: [\"-Dgstreamer:gst_debug=true\", \"-Dgstreamer:gst_debug=false\"]\n        MESON_ARGS: >-\n          ${SIMPLE_BUILD}\n\n      - BUILD_TYPE: [\"--default-library=static\"]\n        BUILD_GST_DEBUG: [\"-Dgstreamer:gst_debug=true\", \"-Dgstreamer:gst_debug=false\"]\n        # VAAPI can't be build statically yet\n        # subprojects/gstreamer-vaapi/meson.build:8:2: ERROR: Problem encountered: GStreamer-VAAPI plugin not supported with `static` builds yet.\n        #\n        # Disabling gstreamer-sharp tests because they download things as part of configure with\n        # nuget which frequently fails on the CI (possibly because we're hammering the site)\n        #\n        # Disabling building both qt5 and qt6 when doing static builds since we can only link against one\n        MESON_ARGS: >-\n          ${DEFAULT_MESON_ARGS}\n          -Dvaapi=disabled\n          -Dintrospection=disabled\n          -Dpython=disabled\n          -Ddoc=disabled\n          -Dgstreamer-sharp:tests=disabled\n          -Dqt5=disabled -Dqt6=enabled\n\nbuild debian x86_64:\n  extends:\n    - '.debian image'\n    - '.fdo.suffixed-image@debian'\n    - '.build simple'\n  needs:\n    - \"trigger\"\n    - \"debian amd64 docker\"\n  variables:\n    BUILD_TYPE: \"--default-library=shared\"\n    BUILD_GST_DEBUG: \"-Dgstreamer:gst_debug=true\"\n\n.build windows:\n  image: $WINDOWS_IMAGE\n  stage: 'build'\n  tags:\n    - 'docker'\n    - 'windows'\n    - '2022'\n  needs:\n    - \"trigger\"\n    - \"windows amd64 docker\"\n  timeout: '90m'\n  variables:\n    MESON_ARGS: >-\n      ${DEFAULT_MESON_ARGS}\n      -Dlibav=disabled\n      -Dvaapi=disabled\n      -Dgst-plugins-base:pango=enabled\n      -Dgst-plugins-good:cairo=enabled\n      -Dgst-plugins-good:soup=enabled\n      -Dgst-plugins-bad:d3d11-wgc=enabled\n  rules:\n    - !reference [.gtk-build-rules, rules]\n    - !reference [.upstream-branch-rules, rules]\n    - changes:\n        compare_to: \"$GST_UPSTREAM_BRANCH\"\n        paths:\n          *modules_changes\n    - changes:\n        compare_to: \"$GST_UPSTREAM_BRANCH\"\n        paths:\n          - \"subprojects/win-*/*\"\n  script:\n    # Make sure powershell exits on errors\n    # https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_preference_variables?view=powershell-6\n    - $ErrorActionPreference = \"Stop\"\n\n    # Set the code page to UTF-8\n    - chcp 65001\n    # Renormalize line endings\n    - git add --renormalize subprojects/packagefiles\n    - $env:PYTHONUNBUFFERED = '1'\n    - ci/scripts/handle-subprojects-cache.py --cache-dir /subprojects subprojects/\n    - $env:PYTHONUNBUFFERED = ''\n    - echo $env:MESON_ARGS $env:GTK_ARGS\n    # We do not pick up any deps with cmake, so speed up dependency checks\n    - $env:CMAKE = 'false'\n  artifacts:\n   expire_in: \"7 days\"\n   when: \"always\"\n   paths:\n     - 'build/meson-logs/'\n\nbuild vs2022 amd64:\n  extends: '.build windows'\n  script:\n    - !reference [\".build windows\", \"script\"]\n    - .\\ci\\run_retry.ps1 meson setup --vsenv build $env:MESON_ARGS $env:GTK_ARGS\n    - .\\ci\\run_retry.ps1 meson compile -C build --jobs $env:FDO_CI_CONCURRENT\n    - .\\gst-env.py gst-inspect-1.0.exe --version\n    - .\\gst-env.py gst-inspect-1.0.exe\n    - mkdir destdir\n    - meson install -C build --destdir installdir\n    - Remove-Item -Recurse -Force build\\installdir\n  variables:\n    # FIXME: https://github.com/mesonbuild/meson/pull/11007\n    PKG_CONFIG: ${CI_PROJECT_DIR}/subprojects/win-pkgconfig/pkg-config.exe\n\nbuild vs2022 amd64 full-static:\n  extends: \".build windows\"\n  script:\n    - !reference [\".build windows\", \"script\"]\n    - cmd.exe /C \"meson setup --vsenv build --default-library=static $env:MESON_ARGS\"\n    - .\\ci\\run_retry.ps1 meson compile -C build --jobs $env:FDO_CI_CONCURRENT\n    - .\\gst-env.py gst-inspect-1.0.exe --version\n    - .\\gst-env.py gst-inspect-1.0.exe\n  variables:\n    MESON_ARGS: >-\n      -Dintrospection=disabled\n      -Dpython=disabled\n      -Dlibav=disabled\n      -Ddoc=disabled\n      -Dgst-full-target-type=static_library\n\n.build windows cross:\n  extends: '.build windows'\n  script:\n    - !reference [\".build windows\", \"script\"]\n      # Setting up a cross build with MSVC is still non-trivial because\n      # the --vsenv argument cannot be used to set it up\n    - echo $env:MESON_CROSS_ARGS\n    - $env:JOB=\"meson setup build $env:MESON_ARGS $env:GTK_ARGS $env:MESON_CROSS_ARGS\"\n    - cmd.exe /C \"\"\"C:\\BuildTools\\VC\\Auxiliary\\Build\\vcvarsamd64_$env:ARCH.bat\"\"  && powershell.exe -ExecutionPolicy Bypass -File .\\ci\\run_retry.ps1\"\n    - $env:JOB=\"meson compile -C build --jobs $env:FDO_CI_CONCURRENT\"\n    - cmd.exe /C \"\"\"C:\\BuildTools\\VC\\Auxiliary\\Build\\vcvarsamd64_$env:ARCH.bat\"\" && powershell.exe -ExecutionPolicy Bypass -File .\\ci\\run_retry.ps1\"\n\nbuild vs2022 x86:\n  extends: '.build windows cross'\n  variables:\n    ARCH: 'x86'\n    # Installed python is 64 bits instead of 32 bits\n    MESON_CROSS_ARGS: >\n      -Dpython=disabled\n      -Dintrospection=disabled\n\nbuild vs2022 arm64:\n  extends: '.build windows cross'\n  rules:\n    - when: 'manual'\n      allow_failure: true\n  variables:\n    ARCH: 'arm64'\n    # pango pulls in cairo which pulls in pixman which doesn't build because of\n    # https://github.com/mesonbuild/meson/issues/9889\n    # libsoup requires glib-compile-resources, which isn't available in a cross\n    # build\n    MESON_CROSS_ARGS: >-\n      -Dgst-plugins-base:pango=disabled\n      -Dgst-plugins-good:cairo=disabled\n      -Dgst-devtools:cairo=disabled\n      -Dpython=disabled\n      -Dintrospection=disabled\n      --cross-file ci/meson/vs2022-paths.ini\n      --cross-file ci/meson/vs2022-arm64-cross.ini\n      --native-file ci/meson/vs2022-paths.ini\n      --native-file ci/meson/vs2022-x64-native.ini\n\nbuild msys2:\n  extends: '.build windows'\n  script:\n    - !reference [\".build windows\", \"script\"]\n    # Replace backslashes with forward so bash doesn't complain\n    - $env:CI_PROJECT_DIR = $env:CI_PROJECT_DIR.replace('\\','/')\n    # Windows Graphics Capture currently requires Visual Studio\n    - $env:MESON_ARGS = $env:MESON_ARGS.replace('-Dgst-plugins-bad:d3d11-wgc=enabled','') + ' -Dpython=disabled -Dintrospection=disabled'\n    # Configure MSYS2 to use the UCRT64 environment, start in the same directory\n    # and inherit PATH\n    - C:\\msys64\\msys2_shell.cmd -ucrt64 -defterm -no-start -here -use-full-path -lc \"meson setup build $env:MESON_ARGS $env:GTK_ARGS && meson compile -C build --jobs $env:FDO_CI_CONCURRENT\"\n\nbuild macos:\n  extends:\n   - '.build'\n   - '.macos image'\n  variables:\n    # gst-libav/ffmpeg throws Wundef errors\n    GST_WERROR: \"false\"\n    MESON_ARGS: \"${DEFAULT_MESON_ARGS}\"\n    SUBPROJECTS_CACHE_DIR: \"/Users/gst-ci/subprojects\"\n  rules:\n    - !reference [.gtk-build-rules, rules]\n    - !reference [.upstream-branch-rules, rules]\n    - changes:\n        compare_to: \"$GST_UPSTREAM_BRANCH\"\n        paths:\n          *modules_changes\n    - changes:\n        compare_to: \"$GST_UPSTREAM_BRANCH\"\n        paths:\n          - \"subprojects/macos-*/*\"\n  parallel:\n    matrix:\n      - BUILD_TYPE: [\"--default-library=both\"]\n        BUILD_GST_DEBUG: [\"-Dgstreamer:gst_debug=true\"]\n        # FIXME: We currently don't have pkg-config required by gobject-introspection/pygobject/sharp\n        # macos doesn't support vaapi\n        MESON_ARGS: >-\n          ${SIMPLE_BUILD}\n          -Dintrospection=disabled\n          -Dvaapi=disabled\n          -Dsharp=disabled\n          -Dpython=disabled\n          -Ddoc=disabled\n          -Dgst-plugins-base:pango=enabled\n          -Dgst-plugins-good:cairo=enabled\n          -Dgst-plugins-good:soup=enabled\n\nabi-check:\n  stage: 'build'\n  extends:\n    - '.abi-check image'\n    - '.fdo.suffixed-image@fedora'\n    - '.build'\n  needs:\n    - \"trigger\"\n    - 'abi-check docker'\n  script:\n    - $CI_PROJECT_DIR/ci/scripts/abi-check.sh build/\n  variables:\n    ABI_CHECK_DIR: 'abi-dumps'\n  artifacts:\n    expire_in: \"7 days\"\n    when: \"always\"\n    paths:\n      - 'meson-logs/'\n      - '$ABI_CHECK_DIR'\n\n# ---- Tests ----- #\n\n.test:\n  stage: 'test'\n  extends:\n    - '.build_ccache_vars'\n  needs:\n    - \"trigger\"\n  variables:\n    GST_WERROR: \"true\"\n    MESON_ARGS: \"${SIMPLE_BUILD}\"\n    SUBPROJECTS_CACHE_DIR: \"/subprojects\"\n\n    # Avoid weird issue about cross-device links\n    # https://gitlab.freedesktop.org/gstreamer/gstreamer/-/issues/3197\n    GI_SCANNER_DISABLE_CACHE: \"1\"\n\n    # Disable colored output to avoid weird rendering issues\n    GST_DEBUG_NO_COLOR: \"true\"\n    CI_ARTIFACTS_URL: \"${CI_PROJECT_URL}/-/jobs/${CI_JOB_ID}/artifacts/raw/validate-logs/\"\n    GST_VALIDATE_LAUNCHER_FORCE_COLORS: \"true\"\n    TIMEOUT_FACTOR: \"2\"\n    # Enable the fault handler so we get backtraces on segfaults.\n    # any non-empty string will do\n    PYTHONFAULTHANDLER: \"enabled\"\n  rules:\n    - changes:\n        compare_to: \"$GST_UPSTREAM_BRANCH\"\n        paths:\n          *modules_changes\n  script:\n    # Disable gdb debugdir safeload\n    # The CI will execute any code submitted to it anyway\n    - mkdir -p ~/.config/gdb\n    - echo \"set auto-load safe-path /\" >> ~/.config/gdb/gdbinit\n\n    - $CI_PROJECT_DIR/ci/scripts/build.sh build/\n    - $CI_PROJECT_DIR/ci/scripts/test.sh build/ $TEST_SUITE\n  after_script:\n    - mv build/meson-logs/ meson-logs\n  artifacts:\n    expire_in: '14 days'\n    when: always\n    paths:\n      - 'meson-logs/'\n      - \"$CI_PROJECT_DIR/validate-logs\"\n    reports:\n      junit:\n        - \"$CI_PROJECT_DIR/validate-logs/*.xml\"\n\n.test fedora x86_64:\n  extends:\n    - '.fedora image'\n    - '.fdo.suffixed-image@fedora'\n    - '.test'\n  needs:\n    - \"trigger\"\n    - \"fedora amd64 docker\"\n  tags: ['gstreamer']\n\ncheck fedora:\n  extends: '.test fedora x86_64'\n  variables:\n    TEST_SUITE: \"check.gst*\"\n  rules:\n    - changes:\n        compare_to: \"$GST_UPSTREAM_BRANCH\"\n        paths:\n          *modules_changes\n    - changes:\n        compare_to: \"$GST_UPSTREAM_BRANCH\"\n        paths:\n          - \"subprojects/gstreamer-vaapi/**/*\"\n\nintegration testsuites fedora:\n  extends: '.test fedora x86_64'\n  parallel: 8\n  variables:\n    MESON_ARGS: >-\n      ${SIMPLE_BUILD}\n      -Dsharp=disabled\n      -Dvaapi=disabled\n      -Dexamples=disabled\n      -Dgst-examples=disabled\n      -Dtests=disabled\n      -Dnls=disabled\n      -Dqt5=disabled\n      -Dgstreamer:benchmarks=disabled\n      -Dgst-plugins-good:gtk3=disabled\n      -Dgst-plugins-bad:microdns=disabled\n      -Dgst-plugins-bad:avtp=disabled\n      -Dgst-plugins-bad:opencv=disabled\n      -Dgst-plugins-bad:webrtc=disabled\n    EXTRA_VALIDATE_ARGS: \"--timeout-factor=2 --retry-on-failures --parts=${CI_NODE_TOTAL} --part-index=${CI_NODE_INDEX} --sync\"\n    TEST_SUITE: \"validate ges\"\n\ncheck video formats:\n  stage: 'test'\n  extends:\n    - '.fedora image'\n    - '.fdo.suffixed-image@fedora'\n    - '.build_ccache_vars'\n  needs:\n    - \"trigger\"\n    - \"fedora amd64 docker\"\n  tags: ['gstreamer']\n  variables:\n    MESON_ARGS: \"${SIMPLE_BUILD}\"\n    BUILD_GST_DEBUG: \"-Dgstreamer:gst_debug=true\"\n    GST_WERROR: \"true\"\n    SUBPROJECTS_CACHE_DIR: \"/subprojects\"\n    VIDEO_TOKEN: \"GST_VIDEO_FORMATS_ALL_STR\"\n    VIDEO_HEADER: \"subprojects/gst-plugins-base/gst-libs/gst/video/video-format.h\"\n    WL_TOKEN: \"GST_WL_VIDEO_FORMATS\"\n    WL_HEADER: \"subprojects/gst-plugins-bad/gst-libs/gst/wayland/gstwlvideoformat.h\"\n  script:\n    - $CI_PROJECT_DIR/ci/scripts/build.sh build/\n    - $CI_PROJECT_DIR/ci/scripts/check-video-formats.sh\n  rules:\n    - changes:\n        compare_to: \"$GST_UPSTREAM_BRANCH\"\n        paths:\n          - \"${VIDEO_HEADER}\"\n          - \"${WL_HEADER}\"\n\nplaybin3 integration:\n  extends: 'integration testsuites fedora'\n  variables:\n    USE_PLAYBIN3: 1\n  # Let's allow failures for now until we're 100% sure everything works\n  allow_failure: true\n\n# gstreamer-full:\ngstreamer-full static build:\n  extends: '.build fedora x86_64'\n  stage: 'build'\n  variables:\n    BUILD_TYPE: \"--default-library=static\"\n    # Disabling building both qt5 and qt6 when doing static builds since we can only link against one\n    MESON_ARGS: >-\n      -Ddoc=disabled\n      -Dqt5=disabled -Dqt6=enabled\n\n    SUBPROJECTS_CACHE_DIR: \"/subprojects\"\n  script:\n  - $CI_PROJECT_DIR/ci/scripts/build.sh build/\n  - meson test -C build -v test-gst-full\n\ngstreamer-full-minimal static build:\n  extends: 'gstreamer-full static build'\n  stage: 'build'\n  variables:\n    BUILD_GST_DEBUG: \"-Dgstreamer:gst_debug=false\"\n    GST_WERROR: \"true\"\n    BUILD_TYPE: \"--default-library=static\"\n    MESON_ARGS: >-\n      -Ddoc=disabled\n      -Dauto_features=disabled\n      -Dgst-full=enabled\n      -Dgstreamer:check=enabled\n      -Dtests=enabled\n      -Dgst-plugins-base:alsa=enabled\n      -Dgst-plugins-base:typefind=enabled\n      -Dgst-plugins-base:pbtypes=enabled\n      -Dgst-full-elements=coreelements:filesrc,fakesink,identity,input-selector\n      -Dgst-full-typefind-functions=typefindfunctions:wav,flv\n      -Dgst-full-device-providers=alsa:alsadeviceprovider\n      -Dgst-full-dynamic-types=pbtypes:video_multiview_flagset\n    SUBPROJECTS_CACHE_DIR: \"/subprojects\"\n\n  script:\n  - $CI_PROJECT_DIR/ci/scripts/build.sh build/\n  - meson test -C build -v test-gst-full\n  - meson test -C build test-gst-full-features --test-args \"-e filesrc,identity,fakesink -E filesink,capsfilter -t audio/x-wav -T video/vivo -d alsadeviceprovider -D v4l2deviceprovider -l GstVideoMultiviewFlagsSet\"\n  - strip build/libgstreamer-full-1.0.so\n  - ls -l build/libgstreamer-full-1.0.so\n\n# v4l2-stateless-decoders tests\nfluster v4l2-stateless on visl:\n  extends:\n    - '.build fedora fluster x86_64'\n  stage: 'test'\n  variables:\n    BUILD_GST_DEBUG: '-Dgstreamer:gst_debug=false'\n    GST_WERROR: \"true\"\n    BUILD_TYPE: \"--default-library=static\"\n    MESON_ARGS: >-\n      -Dvirtme_kernel_image=/opt/linux/bzImage\n      -Dauto_features=disabled\n      -Dgst-full=enabled\n      -Dgstreamer:check=enabled\n      -Ddoc=disabled\n      -Dtests=enabled\n      -Dtools=enabled\n      -Dbase=enabled\n      -Dbad=enabled\n      -Dugly=disabled\n      -Dlibav=disabled\n      -Drtsp_server=disabled\n      -Dges=disabled\n      -Dgst-plugins-bad:debugutils=enabled\n      -Dgst-plugins-bad:ivfparse=enabled\n      -Dgst-plugins-bad:v4l2codecs=enabled\n      -Dgst-plugins-bad:videoparsers=enabled\n      -Dgst-plugins-base:app=enabled\n      -Dgst-plugins-base:videoconvertscale=enabled\n      -Dgst-plugins-base:typefind=enabled\n      -Dgst-plugins-base:playback=enabled\n      -Dgst-plugins-good:matroska=enabled\n    SUBPROJECTS_CACHE_DIR: \"/subprojects\"\n  script:\n  - $CI_PROJECT_DIR/ci/scripts/build.sh build/\n  - meson test -C build -v --suite v4l2-stateless-decoders\n  artifacts:\n    reports:\n      junit: build/fluster-results-*.xml\n  rules:\n    - changes:\n        compare_to: \"$GST_UPSTREAM_BRANCH\"\n        paths:\n          - \".gitlab-ci.yml\"\n          - \".gitlab-image-tags.yml\"\n          - \"subprojects/gst-plugins-bad/sys/v4l2codecs/*\"\n          - \"subprojects/gst-plugins-bad/gst-libs/gst/codecparsers/*\"\n          - \"subprojects/gst-plugins-bad/gst-libs/gst/codecs/*\"\n          - \"subprojects/gst-plugins-bad/gst/videoparsers/*\"\n          - \"tests/virtme/*\"\n          - \"ci/scripts/build-linux.sh\"\n          - \"ci/docker/fedora/*\"\n\n# Valgrind\n.valgrind fedora x86_64:\n  extends: '.test fedora x86_64'\n  stage: 'test'\n  variables:\n    EXTRA_VALIDATE_ARGS: \"--valgrind\"\n  timeout: \"1h30m\"\n  rules:\n    - changes:\n        compare_to: \"$GST_UPSTREAM_BRANCH\"\n        paths:\n          *modules_changes\n    - changes:\n        compare_to: \"$GST_UPSTREAM_BRANCH\"\n        paths:\n          - \"subprojects/gstreamer-vaapi/**/*\"\n\nvalgrind core:\n  extends: '.valgrind fedora x86_64'\n  variables:\n    TEST_SUITE: \"check.gstreamer\\\\..*\"\n  rules:\n    - changes:\n        compare_to: \"$GST_UPSTREAM_BRANCH\"\n        paths:\n          - \"*\"\n          - \"scripts/*\"\n          - \"ci/**/*\"\n          - \"subprojects/gst-devtools/**/*\"\n          - \"subprojects/gstreamer/**/*\"\n\nvalgrind base:\n  extends: '.valgrind fedora x86_64'\n  variables:\n    TEST_SUITE: \"check.gst-plugins-base\\\\..*\"\n  rules:\n    - changes:\n        compare_to: \"$GST_UPSTREAM_BRANCH\"\n        paths:\n          - \"*\"\n          - \"scripts/*\"\n          - \"ci/**/*\"\n          - \"subprojects/gst-devtools/**/*\"\n          - \"subprojects/gstreamer/**/*\"\n          - \"subprojects/gst-plugins-base/**/*\"\n\nvalgrind good:\n  extends: '.valgrind fedora x86_64'\n  variables:\n    TEST_SUITE: \"check.gst-plugins-good\\\\..*\"\n    # take longer time due to splitmux unit test\n    TIMEOUT_FACTOR: \"4\"\n  rules:\n    - changes:\n        compare_to: \"$GST_UPSTREAM_BRANCH\"\n        paths:\n          - \"*\"\n          - \"scripts/*\"\n          - \"ci/**/*\"\n          - \"subprojects/gst-devtools/**/*\"\n          - \"subprojects/gstreamer/**/*\"\n          - \"subprojects/gst-plugins-base/**/*\"\n          - \"subprojects/gst-plugins-good/**/*\"\n\nvalgrind ugly:\n  extends: '.valgrind fedora x86_64'\n  variables:\n    TEST_SUITE: \"check.gst-plugins-ugly\\\\..*\"\n  rules:\n    - changes:\n        compare_to: \"$GST_UPSTREAM_BRANCH\"\n        paths:\n          - \"*\"\n          - \"scripts/*\"\n          - \"ci/**/*\"\n          - \"subprojects/gst-devtools/**/*\"\n          - \"subprojects/gstreamer/**/*\"\n          - \"subprojects/gst-plugins-base/**/*\"\n          - \"subprojects/gst-plugins-good/**/*\"\n          - \"subprojects/gst-plugins-ugly/**/*\"\n\nvalgrind bad:\n  extends: '.valgrind fedora x86_64'\n  variables:\n    TEST_SUITE: \"check.gst-plugins-bad\\\\..*\"\n  rules:\n    - changes:\n        compare_to: \"$GST_UPSTREAM_BRANCH\"\n        paths:\n          - \"*\"\n          - \"scripts/*\"\n          - \"ci/**/*\"\n          - \"subprojects/gst-devtools/**/*\"\n          - \"subprojects/gstreamer/**/*\"\n          - \"subprojects/gst-plugins-base/**/*\"\n          - \"subprojects/gst-plugins-good/**/*\"\n          - \"subprojects/gst-plugins-bad/**/*\"\n\nvalgrind ges:\n  extends: '.valgrind fedora x86_64'\n  variables:\n    TEST_SUITE: \"check.gst-editing-services\\\\..*\"\n  rules:\n    - changes:\n        compare_to: \"$GST_UPSTREAM_BRANCH\"\n        paths:\n          - \"*\"\n          - \"scripts/*\"\n          - \"ci/**/*\"\n          - \"subprojects/gst-devtools/**/*\"\n          - \"subprojects/gstreamer/**/*\"\n          - \"subprojects/gst-plugins-base/**/*\"\n          - \"subprojects/gst-plugins-good/**/*\"\n          - \"subprojects/gst-plugins-bad/**/*\"\n          - \"subprojects/gst-editing-services/**/*\"\n          - \"subprojects/gst-python/**/*\"\n  # valgrind ges jobs are racy across the board and simply fail too often.\n  # Someone needs to go through job logs and figure out which jobs to mark\n  # as flaky. Until then, just ignore failures.\n  allow_failure: true\n\n# ---- Integration ----- #\n\n.documentation:\n  extends: '.build fedora x86_64'\n  variables:\n    # Disable svthevcenc until the following MR is merged\n    # https://gitlab.freedesktop.org/gstreamer/gstreamer/-/merge_requests/5447\n    MESON_ARGS: >-\n      ${SIMPLE_BUILD}\n      -Ddoc=enabled\n      -Drs=enabled\n      -Dgst-docs:fatal_warnings=true\n      -Dgst-plugins-bad:svthevcenc=disabled\n    # Disable werror for the docs build, we don't need it\n    GST_WERROR: 'false'\n    SUBPROJECTS_CACHE_DIR: \"/subprojects\"\n    CI_ARTIFACTS_URL: \"${CI_PROJECT_URL}/-/jobs/${CI_JOB_ID}/artifacts/raw/\"\n  script:\n    - $CI_PROJECT_DIR/ci/scripts/build-docs.sh build/\n  artifacts:\n    when: always\n    expire_in: \"7 days\"\n    paths:\n    - documentation/\n    - diffs/\n\n#\n# This jobs runs in gstreamer namespace when after the merge into main branch.\n# The produced artifact is later used to automatically update the web page.\n#\ndocumentation:\n  stage: integrate\n  extends:\n    - '.documentation'\n  needs:\n    - \"fedora amd64 docker\"\n  rules:\n    - if: '$CI_PROJECT_NAMESPACE == \"gstreamer\" && $CI_COMMIT_BRANCH == \"main\"'\n\n#\n# This job is run in users namespace to validate documentation before merging\n# MR.\n#\nbuild documentation:\n  extends:\n    - '.documentation'\n  stage: build\n  needs:\n    - \"trigger\"\n    - \"fedora amd64 docker\"\n  rules:\n    # Never run post merge, we have the `documentation` always running for that\n    - if: '$CI_PROJECT_NAMESPACE == \"gstreamer\" && $CI_COMMIT_BRANCH == $GST_UPSTREAM_BRANCH'\n      when: never\n    - changes:\n        compare_to: \"$GST_UPSTREAM_BRANCH\"\n        paths:\n          - \".gitlab-ci.yml\"\n          - \".gitlab-image-tags.yml\"\n          - \"ci/gitlab/*.py\"\n          - \"subprojects/*.wrap\"\n          - \"subprojects/gst-docs/**/*\"\n          - \"subprojects/gst-devtools/**/*\"\n          - \"subprojects/gst-editing-services/**/*\"\n          - \"subprojects/gst-libav/**/*\"\n          - \"subprojects/gst-plugins-bad/**/*\"\n          - \"subprojects/gst-plugins-base/**/*\"\n          - \"subprojects/gst-plugins-good/**/*\"\n          - \"subprojects/gst-plugins-ugly/**/*\"\n          - \"subprojects/gstreamer/**/*\"\n          - \"subprojects/gstreamer-vaapi/**/*\"\n          - \"subprojects/gst-rtsp-server/**/*\"\n\n# FIXME: Using trigger: causes permission issues, workaround using old REST API.\n# https://gitlab.com/gitlab-org/gitlab/-/issues/341737\ncerbero trigger:\n  stage: build\n  timeout: '4h'\n  tags:\n    - placeholder-job\n  image: python:alpine\n  needs:\n    - \"trigger\"\n  script:\n    - pip install python-gitlab\n    - python ci/gitlab/trigger_cerbero_pipeline.py\n\n  rules:\n    - if: '$MESON_COMMIT'\n    # Never run post merge\n    - if: '$CI_PROJECT_NAMESPACE == \"gstreamer\" && $CI_COMMIT_BRANCH == $GST_UPSTREAM_BRANCH'\n      when: never\n    - changes:\n        compare_to: \"$GST_UPSTREAM_BRANCH\"\n        paths:\n          - \".gitlab-ci.yml\"\n          - \"ci/gitlab/*.py\"\n          - \"subprojects/gst-devtools/**/*\"\n          - \"subprojects/gst-editing-services/**/*\"\n          - \"subprojects/gst-libav/**/*\"\n          - \"subprojects/gst-plugins-bad/**/*\"\n          - \"subprojects/gst-plugins-base/**/*\"\n          - \"subprojects/gst-plugins-good/**/*\"\n          - \"subprojects/gst-plugins-ugly/**/*\"\n          - \"subprojects/gst-python/**/*\"\n          - \"subprojects/gstreamer/**/*\"\n          - \"subprojects/gst-rtsp-server/**/*\"\n          - \"subprojects/gst-examples/**/*\"\n"
        },
        {
          "name": ".gitlab-image-tags.yml",
          "type": "blob",
          "size": 0.4130859375,
          "content": "variables:\n  ###\n  # IMPORTANT\n  # These are the version tags for the docker images the CI runs against.\n  # If you are hacking on them or need a them to rebuild, its enough\n  # to change any part of the string of the image you want.\n  ###\n  FEDORA_TAG:  '2025-01-11.0'\n\n  DEBIAN_TAG:  '2025-01-11.0'\n\n  INDENT_TAG: '2024-05-28.0'\n\n  LINT_TAG: '2024-02-20.0'\n\n  ABI_CHECK_TAG: '2025-01-08.1'\n\n  WINDOWS_TAG: '2025-01-11.0'\n"
        },
        {
          "name": ".gitlab",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitlint",
          "type": "blob",
          "size": 0.3779296875,
          "content": "[title-max-length]\nline-length=100\n\n[general]\nignore=body-is-missing\nregex-style-search=True\n\n[body-max-line-length]\nline-length=120\n\n[body-min-length]\nmin-length=10\n\n# Ensure every title starts with a prefix\n[title-match-regex]\nregex=^[\\w]+[\\w, -\\\\/{}]*[\\w]+: .*\n\n# Ignore GDB backtraces\n[ignore-body-lines]\nregex=^ \\#\\d(.*):\\d+$\n\n[ignore-by-title]\nregex=^(Release|Back to development)\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1884765625,
          "content": "[submodule \"subprojects/gst-integration-testsuites/medias\"]\n\tpath = subprojects/gst-integration-testsuites/medias\n\turl = https://gitlab.freedesktop.org/gstreamer/gst-integration-testsuites.git\n"
        },
        {
          "name": ".indent_cpp_list",
          "type": "blob",
          "size": 0.8984375,
          "content": "subprojects/gst-plugins-bad/ext/nvcomp\nsubprojects/gst-plugins-bad/ext/nvdswrapper\nsubprojects/gst-plugins-bad/ext/qt6d3d11\nsubprojects/gst-plugins-bad/gst-libs/gst/cuda\nsubprojects/gst-plugins-bad/gst-libs/gst/d3d11\nsubprojects/gst-plugins-bad/gst-libs/gst/d3d12\nsubprojects/gst-plugins-bad/gst-libs/gst/dxva\nsubprojects/gst-plugins-bad/gst-libs/gst/va\nsubprojects/gst-plugins-bad/gst-libs/gst/winrt\nsubprojects/gst-plugins-bad/sys/amfcodec\nsubprojects/gst-plugins-bad/sys/d3d11\nsubprojects/gst-plugins-bad/sys/d3d12\nsubprojects/gst-plugins-bad/sys/dwrite\nsubprojects/gst-plugins-bad/sys/mediafoundation\nsubprojects/gst-plugins-bad/sys/nvcodec\n^(subprojects/gst-plugins-bad/sys/qsv/)+(\\w)+([^/])+(cpp$)\nsubprojects/gst-plugins-bad/sys/va\nsubprojects/gst-plugins-bad/sys/wasapi2\nsubprojects/gst-plugins-bad/sys/webview2\nsubprojects/gst-plugins-bad/sys/wic\n^(subprojects/gst-plugins-bad/sys/win32ipc/)+(\\w)+([^/])+(cpp$)\n"
        },
        {
          "name": ".indentignore",
          "type": "blob",
          "size": 0.2607421875,
          "content": "subprojects/gst-plugins-bad/ext/sctp/usrsctp/usrsctplib/\nsubprojects/gst-plugins-bad/sys/dwrite/libcaption/\nsubprojects/gstreamer-rs/\nsubprojects/gstreamer-rs-sys/\nsubprojects/gst-plugins-rs/\nsubprojects/gstreamer-sharp/\nsubprojects/gst-integration-testsuites/medias\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 25.8115234375,
          "content": "\t\t  GNU LESSER GENERAL PUBLIC LICENSE\n\t\t       Version 2.1, February 1999\n\n Copyright (C) 1991, 1999 Free Software Foundation, Inc.\n     51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts\n as the successor of the GNU Library Public License, version 2, hence\n the version number 2.1.]\n\n\t\t\t    Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicenses are intended to guarantee your freedom to share and change\nfree software--to make sure the software is free for all its users.\n\n  This license, the Lesser General Public License, applies to some\nspecially designated software packages--typically libraries--of the\nFree Software Foundation and other authors who decide to use it.  You\ncan use it too, but we suggest you first think carefully about whether\nthis license or the ordinary General Public License is the better\nstrategy to use in any particular case, based on the explanations below.\n\n  When we speak of free software, we are referring to freedom of use,\nnot price.  Our General Public Licenses are designed to make sure that\nyou have the freedom to distribute copies of free software (and charge\nfor this service if you wish); that you receive source code or can get\nit if you want it; that you can change the software and use pieces of\nit in new free programs; and that you are informed that you can do\nthese things.\n\n  To protect your rights, we need to make restrictions that forbid\ndistributors to deny you these rights or to ask you to surrender these\nrights.  These restrictions translate to certain responsibilities for\nyou if you distribute copies of the library or if you modify it.\n\n  For example, if you distribute copies of the library, whether gratis\nor for a fee, you must give the recipients all the rights that we gave\nyou.  You must make sure that they, too, receive or can get the source\ncode.  If you link other code with the library, you must provide\ncomplete object files to the recipients, so that they can relink them\nwith the library after making changes to the library and recompiling\nit.  And you must show them these terms so they know their rights.\n\n  We protect your rights with a two-step method: (1) we copyright the\nlibrary, and (2) we offer you this license, which gives you legal\npermission to copy, distribute and/or modify the library.\n\n  To protect each distributor, we want to make it very clear that\nthere is no warranty for the free library.  Also, if the library is\nmodified by someone else and passed on, the recipients should know\nthat what they have is not the original version, so that the original\nauthor's reputation will not be affected by problems that might be\nintroduced by others.\n\f\n  Finally, software patents pose a constant threat to the existence of\nany free program.  We wish to make sure that a company cannot\neffectively restrict the users of a free program by obtaining a\nrestrictive license from a patent holder.  Therefore, we insist that\nany patent license obtained for a version of the library must be\nconsistent with the full freedom of use specified in this license.\n\n  Most GNU software, including some libraries, is covered by the\nordinary GNU General Public License.  This license, the GNU Lesser\nGeneral Public License, applies to certain designated libraries, and\nis quite different from the ordinary General Public License.  We use\nthis license for certain libraries in order to permit linking those\nlibraries into non-free programs.\n\n  When a program is linked with a library, whether statically or using\na shared library, the combination of the two is legally speaking a\ncombined work, a derivative of the original library.  The ordinary\nGeneral Public License therefore permits such linking only if the\nentire combination fits its criteria of freedom.  The Lesser General\nPublic License permits more lax criteria for linking other code with\nthe library.\n\n  We call this license the \"Lesser\" General Public License because it\ndoes Less to protect the user's freedom than the ordinary General\nPublic License.  It also provides other free software developers Less\nof an advantage over competing non-free programs.  These disadvantages\nare the reason we use the ordinary General Public License for many\nlibraries.  However, the Lesser license provides advantages in certain\nspecial circumstances.\n\n  For example, on rare occasions, there may be a special need to\nencourage the widest possible use of a certain library, so that it becomes\na de-facto standard.  To achieve this, non-free programs must be\nallowed to use the library.  A more frequent case is that a free\nlibrary does the same job as widely used non-free libraries.  In this\ncase, there is little to gain by limiting the free library to free\nsoftware only, so we use the Lesser General Public License.\n\n  In other cases, permission to use a particular library in non-free\nprograms enables a greater number of people to use a large body of\nfree software.  For example, permission to use the GNU C Library in\nnon-free programs enables many more people to use the whole GNU\noperating system, as well as its variant, the GNU/Linux operating\nsystem.\n\n  Although the Lesser General Public License is Less protective of the\nusers' freedom, it does ensure that the user of a program that is\nlinked with the Library has the freedom and the wherewithal to run\nthat program using a modified version of the Library.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.  Pay close attention to the difference between a\n\"work based on the library\" and a \"work that uses the library\".  The\nformer contains code derived from the library, whereas the latter must\nbe combined with the library in order to run.\n\f\n\t\t  GNU LESSER GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any software library or other\nprogram which contains a notice placed by the copyright holder or\nother authorized party saying it may be distributed under the terms of\nthis Lesser General Public License (also called \"this License\").\nEach licensee is addressed as \"you\".\n\n  A \"library\" means a collection of software functions and/or data\nprepared so as to be conveniently linked with application programs\n(which use some of those functions and data) to form executables.\n\n  The \"Library\", below, refers to any such software library or work\nwhich has been distributed under these terms.  A \"work based on the\nLibrary\" means either the Library or any derivative work under\ncopyright law: that is to say, a work containing the Library or a\nportion of it, either verbatim or with modifications and/or translated\nstraightforwardly into another language.  (Hereinafter, translation is\nincluded without limitation in the term \"modification\".)\n\n  \"Source code\" for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control compilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning a program using the Library is not restricted, and output from\nsuch a program is covered only if its contents constitute a work based\non the Library (independent of the use of the Library in a tool for\nwriting it).  Whether that is true depends on what the Library does\nand what the program that uses the Library does.\n  \n  1. You may copy and distribute verbatim copies of the Library's\ncomplete source code as you receive it, in any medium, provided that\nyou conspicuously and appropriately publish on each copy an\nappropriate copyright notice and disclaimer of warranty; keep intact\nall the notices that refer to this License and to the absence of any\nwarranty; and distribute a copy of this License along with the\nLibrary.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\f\n  2. You may modify your copy or copies of the Library or any portion\nof it, thus forming a work based on the Library, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) The modified work must itself be a software library.\n\n    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n    table of data to be supplied by an application program that uses\n    the facility, other than as an argument passed when the facility\n    is invoked, then you must make a good faith effort to ensure that,\n    in the event an application does not supply such function or\n    table, the facility still operates, and performs whatever part of\n    its purpose remains meaningful.\n\n    (For example, a function in a library to compute square roots has\n    a purpose that is entirely well-defined independent of the\n    application.  Therefore, Subsection 2d requires that any\n    application-supplied function or table used by this function must\n    be optional: if the application does not supply it, the square\n    root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Library,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Library, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote\nit.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\nwith the Library (or with a work based on the Library) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may opt to apply the terms of the ordinary GNU General Public\nLicense instead of this License to a given copy of the Library.  To do\nthis, you must alter all the notices that refer to this License, so\nthat they refer to the ordinary GNU General Public License, version 2,\ninstead of to this License.  (If a newer version than version 2 of the\nordinary GNU General Public License has appeared, then you can specify\nthat version instead if you wish.)  Do not make any other change in\nthese notices.\n\f\n  Once this change is made in a given copy, it is irreversible for\nthat copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\nderivative of it, under Section 2) in object code or executable form\nunder the terms of Sections 1 and 2 above provided that you accompany\nit with the complete corresponding machine-readable source code, which\nmust be distributed under the terms of Sections 1 and 2 above on a\nmedium customarily used for software interchange.\n\n  If distribution of object code is made by offering access to copy\nfrom a designated place, then offering equivalent access to copy the\nsource code from the same place satisfies the requirement to\ndistribute the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  5. A program that contains no derivative of any portion of the\nLibrary, but is designed to work with the Library by being compiled or\nlinked with it, is called a \"work that uses the Library\".  Such a\nwork, in isolation, is not a derivative work of the Library, and\ntherefore falls outside the scope of this License.\n\n  However, linking a \"work that uses the Library\" with the Library\ncreates an executable that is a derivative of the Library (because it\ncontains portions of the Library), rather than a \"work that uses the\nlibrary\".  The executable is therefore covered by this License.\nSection 6 states terms for distribution of such executables.\n\n  When a \"work that uses the Library\" uses material from a header file\nthat is part of the Library, the object code for the work may be a\nderivative work of the Library even though the source code is not.\nWhether this is true is especially significant if the work can be\nlinked without the Library, or if the work is itself a library.  The\nthreshold for this to be true is not precisely defined by law.\n\n  If such an object file uses only numerical parameters, data\nstructure layouts and accessors, and small macros and small inline\nfunctions (ten lines or less in length), then the use of the object\nfile is unrestricted, regardless of whether it is legally a derivative\nwork.  (Executables containing this object code plus portions of the\nLibrary will still fall under Section 6.)\n\n  Otherwise, if the work is a derivative of the Library, you may\ndistribute the object code for the work under the terms of Section 6.\nAny executables containing that work also fall under Section 6,\nwhether or not they are linked directly with the Library itself.\n\f\n  6. As an exception to the Sections above, you may also combine or\nlink a \"work that uses the Library\" with the Library to produce a\nwork containing portions of the Library, and distribute that work\nunder terms of your choice, provided that the terms permit\nmodification of the work for the customer's own use and reverse\nengineering for debugging such modifications.\n\n  You must give prominent notice with each copy of the work that the\nLibrary is used in it and that the Library and its use are covered by\nthis License.  You must supply a copy of this License.  If the work\nduring execution displays copyright notices, you must include the\ncopyright notice for the Library among them, as well as a reference\ndirecting the user to the copy of this License.  Also, you must do one\nof these things:\n\n    a) Accompany the work with the complete corresponding\n    machine-readable source code for the Library including whatever\n    changes were used in the work (which must be distributed under\n    Sections 1 and 2 above); and, if the work is an executable linked\n    with the Library, with the complete machine-readable \"work that\n    uses the Library\", as object code and/or source code, so that the\n    user can modify the Library and then relink to produce a modified\n    executable containing the modified Library.  (It is understood\n    that the user who changes the contents of definitions files in the\n    Library will not necessarily be able to recompile the application\n    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n    the user installs one, as long as the modified version is\n    interface-compatible with the version that the work was made with.\n\n    c) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n    d) If distribution of the work is made by offering access to copy\n    from a designated place, offer equivalent access to copy the above\n    specified materials from the same place.\n\n    e) Verify that the user has already received a copy of these\n    materials or that you have already sent this user a copy.\n\n  For an executable, the required form of the \"work that uses the\nLibrary\" must include any data and utility programs needed for\nreproducing the executable from it.  However, as a special exception,\nthe materials to be distributed need not include anything that is\nnormally distributed (in either source or binary form) with the major\ncomponents (compiler, kernel, and so on) of the operating system on\nwhich the executable runs, unless that component itself accompanies\nthe executable.\n\n  It may happen that this requirement contradicts the license\nrestrictions of other proprietary libraries that do not normally\naccompany the operating system.  Such a contradiction means you cannot\nuse both them and the Library together in an executable that you\ndistribute.\n\f\n  7. You may place library facilities that are a work based on the\nLibrary side-by-side in a single library together with other library\nfacilities not covered by this License, and distribute such a combined\nlibrary, provided that the separate distribution of the work based on\nthe Library and of the other library facilities is otherwise\npermitted, and provided that you do these two things:\n\n    a) Accompany the combined library with a copy of the same work\n    based on the Library, uncombined with any other library\n    facilities.  This must be distributed under the terms of the\n    Sections above.\n\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\nattempt otherwise to copy, modify, sublicense, link with, or\ndistribute the Library is void, and will automatically terminate your\nrights under this License.  However, parties who have received copies,\nor rights, from you under this License will not have their licenses\nterminated so long as such parties remain in full compliance.\n\n  9. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Library or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Library (or any work based on the\nLibrary), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties with\nthis License.\n\f\n  11. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any\nparticular circumstance, the balance of the section is intended to apply,\nand the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  12. If the distribution and/or use of the Library is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Library under this License may add\nan explicit geographical distribution limitation excluding those countries,\nso that distribution is permitted only in or among countries not thus\nexcluded.  In such case, this License incorporates the limitation as if\nwritten in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Lesser General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Library\nspecifies a version number of this License which applies to it and\n\"any later version\", you have the option of following the terms and\nconditions either of that version or of any later version published by\nthe Free Software Foundation.  If the Library does not specify a\nlicense version number, you may choose any version ever published by\nthe Free Software Foundation.\n\f\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\nSoftware Foundation; we sometimes make exceptions for this.  Our\ndecision will be guided by the two goals of preserving the free status\nof all derivatives of our free software and of promoting the sharing\nand reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO\nWARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\nEXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\nOTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY\nKIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\nLIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\nTHE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\nWRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\nAND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU\nFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\nCONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\nLIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\nRENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\nSUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\f\n           How to Apply These Terms to Your New Libraries\n\n  If you develop a new library, and you want it to be of the greatest\npossible use to the public, we recommend making it free software that\neveryone can redistribute and change.  You can do so by permitting\nredistribution under these terms (or, alternatively, under the terms of the\nordinary General Public License).\n\n  To apply these terms, attach the following notices to the library.  It is\nsafest to attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the library's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n    License as published by the Free Software Foundation; either\n    version 2.1 of the License, or (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public\n    License along with this library; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the library, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n  <signature of Ty Coon>, 1 April 1990\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.1298828125,
          "content": "# GStreamer\n\nThis is GStreamer, a framework for streaming media.\n\n## Where to start\n\nWe have a website at\n\n  https://gstreamer.freedesktop.org\n\nOur documentation, including tutorials, API reference and FAQ can be found at\n\n  https://gstreamer.freedesktop.org/documentation/\n\nYou can ask questions on the GStreamer Discourse at\n\n  https://discourse.gstreamer.org/\n\nWe track bugs, feature requests and merge requests (patches) in GitLab at\n\n  https://gitlab.freedesktop.org/gstreamer/\n\nYou can join us on our Matrix room at\n\n  https://matrix.to/#/#gstreamer:gstreamer.org\n\nThis repository contains all official modules supported by the GStreamer\ncommunity which can be found in the `subprojects/` directory.\n\n## Getting started\n\n### Install git and python 3.8+\n\nIf you're on Linux, you probably already have these. On macOS, new versions of\nXcode ship Python 3 already. If you're on an older Xcode, you can use the\n[official Python installer](https://www.python.org/downloads/mac-osx/).\n\nYou can find [instructions for Windows below](#windows-prerequisites-setup).\n\n### Install meson and ninja\n\nMeson 1.1 or newer is required.\n\nOn Linux and macOS you can get meson through your package manager or using:\n\n```\n$ pip3 install --user meson\n```\n\nThis will install meson into `~/.local/bin` which may or may not be included\nautomatically in your PATH by default.\n\nYou should get `ninja` using your package manager or download the [official\nrelease](https://github.com/ninja-build/ninja/releases) and put the `ninja`\nbinary in your PATH.\n\nYou can find [instructions for Windows below](#windows-prerequisites-setup).\n\n\nIf you used the official Python installer on macOS instead of the Python\n3 shipped with Xcode, you might need to execute \"Install Certificates.command\"\nfrom the Python folder in the user Applications folder:\n\n```\n$ /Applications/Python\\ 3.*/Install\\ Certificates.command\n```\n\nOtherwise you will get this error when downloading meson wraps:\n\n```\nurllib.error.URLError: urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed\n```\n\n### Build GStreamer and its modules\n\nYou can get all GStreamer built running:\n\n```\nmeson setup builddir\nmeson compile -C builddir\n```\n\nThis will automatically create the `builddir` directory and build everything\ninside it.\n\nNOTE: On Windows, meson will automatically detect and use the latest Visual\nStudio if GCC, clang, etc are not available in `PATH`. Use the `--vsenv`\nargument to force the use of Visual Studio.\n\nNOTE: Meson will not update subprojects automatically once a subproject has\nbeen fetched. Remember to update subprojects if wrap files are updated.\n\n```\nmeson subprojects update\n```\n\n### External dependencies\n\nAll mandatory dependencies of GStreamer are included as [meson subprojects](https://mesonbuild.com/Subprojects.html):\nlibintl, zlib, libffi, glib. Some optional dependencies are also included as\nsubprojects, such as ffmpeg, x264, json-glib, graphene, openh264, orc, etc.\n\nMandatory dependencies will be automatically built if meson cannot find them on\nyour system using pkg-config. The same is true for optional dependencies that\nare included as subprojects. You can find a full list by looking at the\n`subprojects` directory.\n\nPlugins that need optional dependencies that aren't included can only be built\nif they are provided by the system. Instructions on how to build some common\nones such as Qt5/QML are listed below. If you do not know how to provide an\noptional dependency needed by a plugin, you should use [Cerbero](https://gitlab.freedesktop.org/gstreamer/cerbero/#description)\nwhich handles this for you automatically.\n\nPlugins will be automatically enabled if possible, but you can ensure that\na particular plugin (especially if it has external dependencies) is built by\nenabling the gstreamer repository that ships it and the plugin inside it. For\nexample, to enable the Qt5 plugin in the gst-plugins-good repository, you need\nto run meson as follows:\n\n```\nmeson -Dgood=enabled -Dgst-plugins-good:qt5=enabled builddir\n```\n\nThis will cause Meson to error out if the plugin could not be enabled. You can\nalso flip the default and disable all plugins except those explicitly enabled\nlike so:\n\n```\nmeson -Dauto_features=disabled -Dgstreamer:tools=enabled -Dbad=enabled -Dgst-plugins-bad:openh264=enabled\n```\n\nThis will disable all optional features and then enable the `openh264` plugin\nand the tools that ship with the core gstreamer repository: `gst-inspect-1.0`,\n`gst-launch-1.0`, etc. As usual, you can change these values on a builddir that\nhas already been setup with `meson configure -Doption=value`.\n\n### Building the Qt5 QML plugin\n\nIf `qmake` is not in `PATH` and pkgconfig files are not available, you can\npoint the `QMAKE` env var to the Qt5 installation of your choosing before\nrunning `meson` as shown above.\n\nThe plugin will be automatically enabled if possible, but you can ensure that\nit is built by passing `-Dgood=enabled -Dgst-plugins-good:qt5=enabled` to `meson`.\n\n### Building the Intel MSDK plugin\n\nOn Linux, you need to have development files for `libmfx` installed. On\nWindows, if you have the [Intel Media SDK](https://software.intel.com/en-us/media-sdk),\nit will set the `INTELMEDIASDKROOT` environment variable, which will be used by\nthe build files to find `libmfx`.\n\nThe plugin will be automatically enabled if possible, but you can ensure it by\npassing `-Dbad=enabled -Dgst-plugins-bad:msdk=enabled` to `meson`.\n\n### Building plugins with (A)GPL-licensed dependencies\n\nSome plugins have GPL- or AGPL-licensed dependencies and will only be built\nif you have explicitly opted in to allow (A)GPL-licensed dependencies by\npassing `-Dgpl=enabled` to Meson.\n\nList of plugins with (A)GPL-licensed dependencies (non-exhaustive) in gst-plugins-bad:\n - dts (DTS audio decoder plugin)\n - faad (Free AAC audio decoder plugin)\n - iqa (Image quality assessment plugin based on dssim-c)\n - mpeg2enc (MPEG-2 video encoder plugin)\n - mplex (audio/video multiplexer plugin)\n - ofa (Open Fingerprint Architecture library plugin)\n - resindvd (Resin DVD playback plugin)\n - x265 (HEVC/H.265 video encoder plugin)\n\nList of plugins with (A)GPL-licensed dependencies (non-exhaustive) in gst-plugins-ugly:\n - a52dec (Dolby Digital (AC-3) audio decoder plugin)\n - cdio (CD audio source plugin based on libcdio)\n - dvdread (DVD video source plugin based on libdvdread)\n - mpeg2dec (MPEG-2 video decoder plugin based on libmpeg2)\n - sidplay (Commodore 64 audio decoder plugin based on libsidplay)\n - x264 (H.264 video encoder plugin based on libx264)\n\n### Static build\n\nSince *1.18.0*, when doing a static build using `--default-library=static`,\na shared library `gstreamer-full-1.0`, in addition to a package config file,\nwill be produced and includes all enabled GStreamer plugins and libraries.\nA list of libraries that needs to be exposed in `gstreamer-full-1.0`\nABI can be set using `gst-full-libraries` option.\nglib-2.0, gobject-2.0 and gstreamer-1.0 are always included.\n\n```\nmeson setup --default-library=static -Dgst-full-libraries=gstreamer-app-1.0,gstreamer-video-1.0 builddir\n```\n\nGStreamer *1.18* requires applications using gstreamer-full-1.0 to initialize\nstatic plugins by calling `gst_init_static_plugins()` after `gst_init()`. That\nfunction is defined in `gst/gstinitstaticplugins.h` header file.\n\nSince *1.20.0*, `gst_init_static_plugins()` is called automatically by\n`gst_init()` and applications don't have to call it manually any more.\nThe header file has been removed from public API.\n\nOne can use the `gst-full-version-script` option to pass a\n[version script](https://www.gnu.org/software/gnulib/manual/html_node/LD-Version-Scripts.html)\nto the linker. This can be used to control the exact symbols that are exported by\nthe `gstreamer-full` library, allowing the linker to garbage collect unused code\nand so, reduce the total library size. A default script\n`gstreamer-full-default.map` declares only glib/gstreamer symbols as public.\n\nOne can use the `gst-full-plugins` option to pass a list of plugins to be\nregistered in the `gstreamer-full` library. The default value is '*'\nwhich means that all the plugins selected during the build process will be\nregistered statically.\nAn empty value will prevent any plugins to be registered.\n\nOne can select a specific set of features with `gst-full-elements`,\n`gst-full-typefind-functions`, `gst-full-device-providers`\nor `gst-full-dynamic-types` to select specific feature from a plugin.\nWhen a feature has been listed in one of those options, the other features from\nits plugin will no longer be automatically included, even if the plugin\nis listed in `gst-full-plugins`.\n\nThe user must insure that all selected plugins and features (element,\ntypefind, etc.) have been enabled during the build configuration.\n\nTo register features, the syntax is the following:\nplugins are separated by ';' and features from a plugin starts after ':'\nand are ',' separated.\n\nAs an example:\n\n * `-Dgst-full-plugins=coreelements;typefindfunctions;alsa;pbtypes`:\n Enable only `coreelements`, `typefindfunctions`, `alsa`, `pbtypes` plugins.\n * `-Dgst-full-elements=coreelements:filesrc,fakesink,identity;alsa:alsasrc`:\n Enable only `filesrc`, `identity` and `fakesink` elements from `coreelements`\n plugin and `alsasrc` element from `alsa` plugin.\n * `-Dgst-full-typefind-functions=typefindfunctions:wav,flv`:\n Enable only typefind func `wav` and `flv` from `typefindfunctions`\n * `-Dgst-full-device-providers=alsa:alsadeviceprovider`:\n Enable `alsadeviceprovider` from `alsa` plugin.\n * `-Dgst-full-dynamic-types=pbtypes:video_multiview_flagset`:\n Enable `video_multiview_flagset` from `pbtypes`.\n\nAll features from the `playback` plugin will be enabled and the other plugins\nwill be restricted to the specific features requested.\n\nAll the selected features will be registered into a dedicated `NULL`\nplugin name.\n\nThis will cause the features/plugins that are not registered to not be included\nin the final gstreamer-full library.\n\nThis is an experimental feature, backward incompatible changes could still be\nmade in the future.\nOnly linux-like platforms are currently well supported when Windows, MSVC\nand MinGW, should be considered as *experimental* as the symbols export\nis still under discussion.\n\nSince 1.24.7, it is possible to disable the `gstreamer-full` library by passing\n`-Dgst-full=disabled`. This can be useful in cases where you want a static\nbuild of gstreamer, but you do not want to use gst-full, since linking the\nstatic executables associated with it can be quite CPU/RAM intensive.\n\n\n#### Full-static build\n\nSince *1.24.0*, it is also possible to link an application with GStreamer\nstatically. It means that all the gstreamer libraries will be linked within\nyour library or application. However, it is important to note that even though\nthe `gstreamer-full` library can be statically built into the application,\nit does not contain all of the code (core libraries and plugins).\nInstead, it relies on all the other static libraries. Hence, while the\n`gstreamer-full` library provides a cohesive access point, the actual\nfunctionality is distributed across various static libraries.\nYou can enable this option using `-Dgst-full-target-type=static_library` which\nis by default set to `shared_library`. The buildsystem will produce a set of\narchives depending on your `gstreamer-full` configuration as explained above.\nYour application can now check the `gstreamer-full` dependency within meson or\nwith the package config file.\nIn both case, the application can rely on the `gstreamer-full-1.0.pc` file\ngenerated during the build process to retrieve all its dependencies.\nIn that configuration, the *features* selected during the build configuration\nwill be automatically registered during the call of `gst_init()`.\n\n\n### Building documentation\n\nDocumentation is not built by default because it is slow to generate. To build\nthe documentation, first ensure that `hotdoc` is installed and `doc` option is\nenabled. For API documentation, gobject introspection must also be enabled.\nThe special target `gst-doc` can then be used to (re)generate the documentation.\n\n```sh\n$ pip install hotdoc\n$ meson setup -Ddoc=enabled -Dintrospection=enabled builddir\n$ meson compile -C builddir gst-doc\n```\n\nNOTE: To visualize the documentation, `devhelp` can be run inside the development\nenvironment (see below).\n\n# Development environment\n\n## Development environment target\n\nGStreamer ships a script that drops you into a development environment where\nall the plugins, libraries, and tools you just built are available:\n\n```\n./gst-env.py\n```\n\nOr with a custom builddir (i.e., not `build`, `_build` or `builddir`):\n\n```\n./gst-env.py --builddir <BUILDDIR>\n```\n\nYou can also use `ninja devenv` inside your build directory to achieve the same\neffect. However, this may not work on Windows if meson has auto-detected the\nvisual studio environment.\n\nAlternatively, if you'd rather not start a shell in your workflow, you\ncan mutate the current environment into a suitable state like so:\n\n```\n./gst-env.py --only-environment\n```\n\nThis will print output suitable for an sh-compatible `eval` function,\njust like `ssh-agent -s`.\n\nAn external script can be run in development environment with:\n\n```\n./gst-env.py external_script.sh\n```\n\nNOTE: In the development environment, a fully usable prefix is also configured\nin `gstreamer/prefix` where you can install any extra dependency/project.\n\nFor more extensive documentation about the development environment go to [the\ndocumentation](https://gstreamer.freedesktop.org/documentation/installing/building-from-source-using-meson.html).\n\n## Custom subprojects\n\nWe also added a meson option, `custom_subprojects`, that allows the user\nto provide a comma-separated list of meson subprojects that should be built\nalongside the default ones.\n\nTo use it:\n\n```sh\n# Clone into the subprojects directory\n$ git -C subprojects clone my_subproject\n# Wipe dependency detection state, in case you have an existing build dir\n$ meson setup --wipe builddir -Dcustom_subprojects=my_subproject\n$ meson compile -C builddir\n```\n\n## Run tests\n\nYou can easily run the test of all the components:\n\n```\nmeson test -C builddir\n```\n\nTo list all available tests:\n\n```\nmeson test -C builddir --list\n```\n\nTo run all the tests of a specific component:\n\n```\nmeson test -C builddir --suite gst-plugins-base\n```\n\nOr to run a specific test file:\n\n```\nmeson test -C builddir --suite gstreamer gst_gstbuffer\n```\n\nRun a specific test from a specific test file:\n\n```\nGST_CHECKS=test_subbuffer meson test -C builddir --suite gstreamer gst_gstbuffer\n```\n\n## Optional Installation\n\nYou can also install everything that is built into a predetermined prefix like\nso:\n\n```\nmeson setup --prefix=/path/to/install/prefix builddir\nmeson compile -C builddir\nmeson install -C builddir\n```\n\nNote that the installed files have `RPATH` stripped, so you will need to set\n`LD_LIBRARY_PATH`, `DYLD_LIBRARY_PATH`, or `PATH` as appropriate for your\nplatform for things to work.\n\n\n## Add information about GStreamer development environment in your prompt line\n\n### Bash prompt\n\nWe automatically handle `bash` and set `$PS1` accordingly.\n\nIf the automatic `$PS1` override is not desired (maybe you have a fancy custom\nprompt), set the `$GST_BUILD_DISABLE_PS1_OVERRIDE` environment variable to\n`TRUE` and use `$GST_ENV` when setting the custom prompt, for example with a\nsnippet like the following:\n\n```bash\n...\nif [[ -n \"${GST_ENV-}\" ]];\nthen\n  PS1+=\"[ ${GST_ENV} ]\"\nfi\n...\n```\n\n### Using powerline\n\nIn your powerline theme configuration file (by default in\n`{POWERLINE INSTALLATION DIR}/config_files/themes/shell/default.json`)\nyou should add a new environment segment as follow:\n\n```\n{\n  \"function\": \"powerline.segments.common.env.environment\",\n  \"args\": { \"variable\": \"GST_ENV\" },\n  \"priority\": 50\n},\n```\n\n## Windows Prerequisites Setup\n\nOn Windows, some of the components may require special care.\n\n### Git for Windows\n\nUse the [Git for Windows](https://gitforwindows.org/) installer. It will\ninstall a `bash` prompt with basic shell utils and up-to-date git binaries.\n\nDuring installation, when prompted about `PATH`, you should select the\nfollowing option:\n\n![Select \"Git from the command line and also from 3rd-party software\"](/data/images/git-installer-PATH.png)\n\n### Python 3.8+ on Windows\n\nUse the [official Python installer](https://www.python.org/downloads/windows/).\nYou must ensure that Python is installed into `PATH`:\n\n![Enable Add Python to PATH, then click Customize Installation](/data/images/py-installer-page1.png)\n\nYou may also want to customize the installation and install it into\na system-wide location such as `C:\\PythonXY`, but this is not required.\n\n### Ninja on Windows\n\nIf you are using Visual Studio 2019 or newer, Ninja is already provided.\n\nIn other cases, the easiest way to install Ninja on Windows is with `pip3`,\nwhich will download the compiled binary and place it into the `Scripts`\ndirectory inside your Python installation:\n\n```\npip3 install ninja\n```\n\nYou can also download the [official release](https://github.com/ninja-build/ninja/releases)\nand place it into `PATH`, or use MSYS2.\n\n### Meson on Windows\n\n**IMPORTANT**: Do not use the Meson MSI installer since it is experimental and known to not\nwork with `GStreamer`.\n\nYou can use `pip3` to install Meson, same as Ninja above:\n\n```\npip3 install meson\n```\n\nNote that Meson is written entirely in Python, so you can also run it as-is\nfrom the [git repository](https://github.com/mesonbuild/meson/) if you want to\nuse the latest master branch for some reason.\n\n### Running Meson on Windows\n\nSince version 0.59.0, Meson automatically activates the Visual Studio\nenvironment on Windows if no other compilers (gcc, clang, etc) are found. To\nforce the use of Visual Studio in such cases, you can use:\n\n```\nmeson setup --vsenv builddir\n```\n\n### Setup a mingw/wine based development environment on linux\n\n#### Install wine and mingw\n\n##### On fedora x64\n\n``` sh\nsudo dnf install mingw64-gcc mingw64-gcc-c++ mingw64-pkg-config mingw64-winpthreads wine\n```\n\nFIXME: Figure out what needs to be installed on other distros\n\n#### Get meson from git\n\nThis simplifies the process and allows us to use the cross files\ndefined in meson itself.\n\n``` sh\ngit clone https://github.com/mesonbuild/meson.git\n```\n\n#### Build and install\n\n```\nBUILDDIR=$PWD/winebuild/\nexport WINEPREFIX=$BUILDDIR/wine-prefix/ && mkdir -p $WINEPREFIX\n# Setting the prefix is mandatory as it is used to setup symlinks within the development environment\nmeson/meson.py $BUILDDIR --cross-file meson/cross/linux-mingw-w64-64bit.txt -Dgst-plugins-bad:vulkan=disabled -Dorc:gtk_doc=disabled --prefix=$BUILDDIR/wininstall/ -Djson-glib:gtk_doc=disabled\nmeson/meson.py install -C $BUILDDIR/\n```\n\n> __NOTE__: You should use `meson install -C $BUILDDIR`  each time you make a change\n> instead of the usual `meson compile -C $BUILDDIR` as this is not in the\n> development environment.\n\nAlternatively, you can also use `mingw64-meson` on Fedora, which is a wrapper\nscript that sets things up to use Fedora's cross files and settings. However,\nthe wrapper script can be buggy in some cases.\n\n#### cross-mingw development environment\n\nYou can get into the development environment as usual with the gst-env.py\nscript:\n\n```\n./gst-env.py\n```\n\nSee [above](#development-environment) for more details.\n\nAfter setting up [binfmt] to use wine for windows binaries,\nyou can run GStreamer tools under wine by running:\n\n```\ngst-launch-1.0.exe videotestsrc ! glimagesink\n```\n\n[binfmt]: http://man7.org/linux/man-pages/man5/binfmt.d.5.html\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "girs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gst-env.py",
          "type": "blob",
          "size": 25.91015625,
          "content": "#!/usr/bin/env python3\n\nimport argparse\nimport glob\nimport json\nimport os\nimport platform\nimport re\nimport shlex\nimport shutil\nimport subprocess\nimport tempfile\nimport pathlib\nimport signal\nfrom functools import lru_cache\nfrom pathlib import PurePath, Path\nfrom sys import exit\n\nfrom typing import Any\n\nfrom scripts.common import get_meson\nfrom scripts.common import git\nfrom scripts.common import win32_get_short_path_name\nfrom scripts.common import get_wine_shortpath\n\nSCRIPTDIR = os.path.dirname(os.path.realpath(__file__))\nPREFIX_DIR = os.path.join(SCRIPTDIR, 'prefix')\n# Look for the following build dirs: `build` `_build` `builddir`\nDEFAULT_BUILDDIR = os.path.join(SCRIPTDIR, 'build')\nif not os.path.exists(DEFAULT_BUILDDIR):\n    DEFAULT_BUILDDIR = os.path.join(SCRIPTDIR, '_build')\nif not os.path.exists(DEFAULT_BUILDDIR):\n    DEFAULT_BUILDDIR = os.path.join(SCRIPTDIR, 'builddir')\n\nTYPELIB_REG = re.compile(r'.*\\.typelib$')\nSHAREDLIB_REG = re.compile(r'\\.so|\\.dylib|\\.dll')\n\n# libdir is expanded from option of the same name listed in the `meson\n# introspect --buildoptions` output.\nGSTPLUGIN_FILEPATH_REG_TEMPLATE = r'.*/{libdir}/gstreamer-1.0/[^/]+$'\nGSTPLUGIN_FILEPATH_REG = None\n\nBC_RC = '''\nBASH_COMPLETION_SCRIPTS=\"{bash_completions}\"\nBASH_COMPLETION_PATHS=\"{bash_completions_paths}\"\nfor p in $BASH_COMPLETION_PATHS; do\nfor f in $BASH_COMPLETION_SCRIPTS; do\n  [ -f \"$p/$f\" ] && . \"$p/$f\"\ndone\ndone\n'''\nBASH_COMPLETION_PATHS = [SCRIPTDIR + '/subprojects/gstreamer/data/bash-completion/completions']\nBASH_COMPLETION_PATHS += [SCRIPTDIR + '/subprojects/gst-devtools/validate/data/bash-completion/completions']\n\n\ndef str_to_bool(value: Any) -> bool:\n    \"\"\"Return whether the provided string (or any value really) represents true. Otherwise false.\n    Just like plugin server stringToBoolean.\n    \"\"\"\n    if not value:\n        return False\n    return str(value).lower() in (\"y\", \"yes\", \"t\", \"true\", \"on\", \"1\")\n\n\ndef listify(o):\n    if isinstance(o, str):\n        return [o]\n    if isinstance(o, list):\n        return o\n    raise AssertionError('Object {!r} must be a string or a list'.format(o))\n\n\ndef stringify(o):\n    if isinstance(o, str):\n        return o\n    if isinstance(o, list):\n        if len(o) == 1:\n            return o[0]\n        raise AssertionError('Did not expect object {!r} to have more than one element'.format(o))\n    raise AssertionError('Object {!r} must be a string or a list'.format(o))\n\n\ndef prepend_env_var(env, var, value, sysroot):\n    if var is None:\n        return\n    if value.startswith(sysroot):\n        value = value[len(sysroot):]\n    # Try not to exceed maximum length limits for env vars on Windows\n    if os.name == 'nt':\n        value = win32_get_short_path_name(value)\n    env_val = env.get(var, '')\n    val = os.pathsep + value + os.pathsep\n    # Don't add the same value twice\n    if val in env_val or env_val.startswith(value + os.pathsep):\n        return\n    env[var] = val + env_val\n    env[var] = env[var].replace(os.pathsep + os.pathsep, os.pathsep).strip(os.pathsep)\n\n\ndef get_target_install_filename(target, filename):\n    '''\n    Checks whether this file is one of the files installed by the target\n    '''\n    basename = os.path.basename(filename)\n    for install_filename in listify(target['install_filename']):\n        if install_filename.endswith(basename):\n            return install_filename\n    return None\n\n\ndef get_pkgconfig_variable_from_pcfile(pcfile, varname):\n    variables = {}\n    substre = re.compile(r'\\$\\{[^${}]+\\}')\n    with pcfile.open('r', encoding='utf-8') as f:\n        for line in f:\n            if '=' not in line:\n                continue\n            key, value = line[:-1].split('=', 1)\n            subst = {}\n            for each in substre.findall(value):\n                substkey = each[2:-1]\n                subst[each] = variables.get(substkey, '')\n            for k, v in subst.items():\n                value = value.replace(k, v)\n            variables[key] = value\n    return variables.get(varname, '')\n\n\n@lru_cache()\ndef get_pkgconfig_variable(builddir, pcname, varname):\n    '''\n    Parsing isn't perfect, but it's good enough.\n    '''\n    pcfile = Path(builddir) / 'meson-private' / (pcname + '.pc')\n    if pcfile.is_file():\n        return get_pkgconfig_variable_from_pcfile(pcfile, varname)\n    return subprocess.check_output(['pkg-config', pcname, '--variable=' + varname],\n                                   universal_newlines=True, encoding='utf-8')\n\n\ndef is_gio_module(target, filename, builddir):\n    if target['type'] != 'shared module':\n        return False\n    install_filename = get_target_install_filename(target, filename)\n    if not install_filename:\n        return False\n    giomoduledir = PurePath(get_pkgconfig_variable(builddir, 'gio-2.0', 'giomoduledir'))\n    fpath = PurePath(install_filename)\n    if fpath.parent != giomoduledir:\n        return False\n    return True\n\n\ndef is_library_target_and_not_plugin(target, filename):\n    '''\n    Don't add plugins to PATH/LD_LIBRARY_PATH because:\n    1. We don't need to\n    2. It causes us to exceed the PATH length limit on Windows and Wine\n    '''\n    if target['type'] != 'shared library':\n        return False\n    # Check if this output of that target is a shared library\n    if not SHAREDLIB_REG.search(filename):\n        return False\n    # Check if it's installed to the gstreamer plugin location\n    install_filename = get_target_install_filename(target, filename)\n    if not install_filename:\n        return False\n    global GSTPLUGIN_FILEPATH_REG\n    if GSTPLUGIN_FILEPATH_REG is None:\n        GSTPLUGIN_FILEPATH_REG = re.compile(GSTPLUGIN_FILEPATH_REG_TEMPLATE)\n    if GSTPLUGIN_FILEPATH_REG.search(install_filename.replace('\\\\', '/')):\n        return False\n    return True\n\n\ndef is_binary_target_and_in_path(target, filename, bindir):\n    if target['type'] != 'executable':\n        return False\n    # Check if this file installed by this target is installed to bindir\n    install_filename = get_target_install_filename(target, filename)\n    if not install_filename:\n        return False\n    fpath = PurePath(install_filename)\n    if fpath.parent != bindir:\n        return False\n    return True\n\n\ndef get_wine_subprocess_env(options, env):\n    with open(os.path.join(options.builddir, 'meson-info', 'intro-buildoptions.json')) as f:\n        buildoptions = json.load(f)\n\n    prefix, = [o for o in buildoptions if o['name'] == 'prefix']\n    path = os.path.normpath(os.path.join(prefix['value'], 'bin'))\n    prepend_env_var(env, \"PATH\", path, options.sysroot)\n    wine_path = get_wine_shortpath(\n        options.wine.split(' '),\n        [path] + env.get('WINEPATH', '').split(';')\n    )\n    if options.winepath:\n        wine_path += ';' + options.winepath\n    env['WINEPATH'] = wine_path\n    env['WINEDEBUG'] = 'fixme-all'\n\n    return env\n\n\ndef setup_gdb(options):\n    python_paths = set()\n\n    if not shutil.which('gdb'):\n        return python_paths\n\n    bdir = pathlib.Path(options.builddir).resolve()\n    for libpath, gdb_path in [\n            (os.path.join(\"subprojects\", \"gstreamer\", \"gst\"),\n             os.path.join(\"subprojects\", \"gstreamer\", \"libs\", \"gst\", \"helpers\")),\n            (os.path.join(\"subprojects\", \"glib\", \"gobject\"), None),\n            (os.path.join(\"subprojects\", \"glib\", \"glib\"), None)]:\n\n        if not gdb_path:\n            gdb_path = libpath\n\n        autoload_path = (pathlib.Path(bdir) / 'gdb-auto-load').joinpath(*bdir.parts[1:]) / libpath\n        autoload_path.mkdir(parents=True, exist_ok=True)\n        for gdb_helper in glob.glob(str(bdir / gdb_path / \"*-gdb.py\")):\n            python_paths.add(str(bdir / gdb_path))\n            python_paths.add(os.path.join(options.srcdir, gdb_path))\n            try:\n                if os.name == 'nt':\n                    shutil.copy(gdb_helper, str(autoload_path / os.path.basename(gdb_helper)))\n                else:\n                    os.symlink(gdb_helper, str(autoload_path / os.path.basename(gdb_helper)))\n            except (FileExistsError, shutil.SameFileError):\n                pass\n\n    gdbinit_line = 'add-auto-load-scripts-directory {}\\n'.format(bdir / 'gdb-auto-load')\n    try:\n        with open(os.path.join(options.srcdir, '.gdbinit'), 'r') as f:\n            if gdbinit_line in f.readlines():\n                return python_paths\n    except FileNotFoundError:\n        pass\n\n    with open(os.path.join(options.srcdir, '.gdbinit'), 'a') as f:\n        f.write(gdbinit_line)\n\n    return python_paths\n\n\ndef is_bash_completion_available(options):\n    return os.path.exists(os.path.join(options.builddir, 'subprojects/gstreamer/data/bash-completion/helpers/gst'))\n\n\ndef get_subprocess_env(options, gst_version):\n    env = os.environ.copy()\n\n    env[\"CURRENT_GST\"] = os.path.normpath(SCRIPTDIR)\n    env[\"GST_VERSION\"] = gst_version\n    prepend_env_var(env, \"GST_VALIDATE_SCENARIOS_PATH\", os.path.normpath(\n        \"%s/subprojects/gst-devtools/validate/data/scenarios\" % SCRIPTDIR),\n        options.sysroot)\n    env[\"GST_VALIDATE_PLUGIN_PATH\"] = os.path.normpath(\n        \"%s/subprojects/gst-devtools/validate/plugins\" % options.builddir)\n    prepend_env_var(env, \"GST_VALIDATE_APPS_DIR\", os.path.normpath(\n        \"%s/subprojects/gst-editing-services/tests/validate\" % SCRIPTDIR),\n        options.sysroot)\n    env[\"GST_ENV\"] = gst_version\n    env[\"GST_REGISTRY\"] = os.path.normpath(options.builddir + \"/registry.dat\")\n    prepend_env_var(env, \"PATH\", os.path.normpath(\n        \"%s/subprojects/gst-devtools/validate/tools\" % options.builddir),\n        options.sysroot)\n\n    prepend_env_var(env, \"GST_VALIDATE_SCENARIOS_PATH\", os.path.normpath(\n        \"%s/subprojects/gst-examples/webrtc/check/validate/scenarios\" %\n        SCRIPTDIR), options.sysroot)\n    prepend_env_var(env, \"GST_VALIDATE_APPS_DIR\", os.path.normpath(\n        \"%s/subprojects/gst-examples/webrtc/check/validate/apps\" %\n        SCRIPTDIR), options.sysroot)\n\n    if options.wine:\n        return get_wine_subprocess_env(options, env)\n\n    prepend_env_var(env, \"PATH\", os.path.join(SCRIPTDIR, 'meson'),\n        options.sysroot)\n\n    env[\"GST_PLUGIN_SYSTEM_PATH\"] = \"\"\n    env[\"GST_PLUGIN_SCANNER\"] = os.path.normpath(\n        \"%s/subprojects/gstreamer/libs/gst/helpers/gst-plugin-scanner\" % options.builddir)\n    env[\"GST_PTP_HELPER\"] = os.path.normpath(\n        \"%s/subprojects/gstreamer/libs/gst/helpers/ptp/gst-ptp-helper\" % options.builddir)\n\n    if os.name == 'nt':\n        lib_path_envvar = 'PATH'\n    elif platform.system() == 'Darwin':\n        # DYLD_LIBRARY_PATH is stripped when new shells are spawned and can\n        # cause issues with runtime linker resolution, so only set it when\n        # using --only-environment\n        lib_path_envvar = None\n        if options.only_environment:\n            lib_path_envvar = 'DYLD_LIBRARY_PATH'\n    else:\n        lib_path_envvar = 'LD_LIBRARY_PATH'\n\n    prepend_env_var(env, \"GST_PLUGIN_PATH\", os.path.join(SCRIPTDIR, 'subprojects',\n                                                        'gst-python', 'plugin'),\n                    options.sysroot)\n    prepend_env_var(env, \"GST_PLUGIN_PATH\", os.path.join(PREFIX_DIR, 'lib',\n                                                        'gstreamer-1.0'),\n                    options.sysroot)\n    prepend_env_var(env, \"GST_PLUGIN_PATH\", os.path.join(options.builddir, 'subprojects',\n                                                         'libnice', 'gst'),\n                    options.sysroot)\n    prepend_env_var(env, \"GST_VALIDATE_SCENARIOS_PATH\",\n                    os.path.join(PREFIX_DIR, 'share', 'gstreamer-1.0',\n                                 'validate', 'scenarios'),\n                    options.sysroot)\n    prepend_env_var(env, \"GI_TYPELIB_PATH\", os.path.join(PREFIX_DIR, 'lib',\n                                                         'lib', 'girepository-1.0'),\n                    options.sysroot)\n    prepend_env_var(env, \"PKG_CONFIG_PATH\", os.path.join(PREFIX_DIR, 'lib', 'pkgconfig'),\n                    options.sysroot)\n\n    # gst-indent\n    prepend_env_var(env, \"PATH\", os.path.join(SCRIPTDIR, 'scripts'),\n                    options.sysroot)\n\n    # tools: gst-launch-1.0, gst-inspect-1.0\n    prepend_env_var(env, \"PATH\", os.path.join(options.builddir, 'subprojects',\n                                              'gstreamer', 'tools'),\n                    options.sysroot)\n    # plugin scanner and generator\n    prepend_env_var(env, \"PATH\", os.path.join(options.builddir, 'subprojects',\n                                              'gstreamer', 'docs'),\n                    options.sysroot)\n    prepend_env_var(env, \"PATH\", os.path.join(options.builddir, 'subprojects',\n                                              'gst-plugins-base', 'tools'),\n                    options.sysroot)\n\n    # Library and binary search paths\n    prepend_env_var(env, \"PATH\", os.path.join(PREFIX_DIR, 'bin'),\n                    options.sysroot)\n    if lib_path_envvar != 'PATH':\n        prepend_env_var(env, lib_path_envvar, os.path.join(PREFIX_DIR, 'lib'),\n                        options.sysroot)\n        prepend_env_var(env, lib_path_envvar, os.path.join(PREFIX_DIR, 'lib64'),\n                        options.sysroot)\n    elif 'QMAKE' in os.environ:\n        # There's no RPATH on Windows, so we need to set PATH for the qt5 DLLs\n        prepend_env_var(env, 'PATH', os.path.dirname(os.environ['QMAKE']),\n                        options.sysroot)\n\n    meson = get_meson()\n    targets_s = subprocess.check_output(meson + ['introspect', options.builddir, '--targets'])\n    targets = json.loads(targets_s.decode())\n    paths = set()\n    mono_paths = set()\n    srcdir_path = pathlib.Path(options.srcdir)\n\n    build_options_s = subprocess.check_output(meson + ['introspect', options.builddir, '--buildoptions'])\n    build_options = json.loads(build_options_s.decode())\n    libdir, = [o['value'] for o in build_options if o['name'] == 'libdir']\n    libdir = PurePath(libdir)\n    prefix, = [o['value'] for o in build_options if o['name'] == 'prefix']\n    bindir, = [o['value'] for o in build_options if o['name'] == 'bindir']\n    prefix = PurePath(prefix)\n    bindir = prefix / bindir\n\n    global GSTPLUGIN_FILEPATH_REG_TEMPLATE\n    GSTPLUGIN_FILEPATH_REG_TEMPLATE = GSTPLUGIN_FILEPATH_REG_TEMPLATE.format(libdir=libdir.as_posix())\n\n    for target in targets:\n        filenames = listify(target['filename'])\n        if not target['installed']:\n            continue\n        for filename in filenames:\n            root = os.path.dirname(filename)\n            if srcdir_path / \"subprojects/gst-devtools/validate/plugins\" in (srcdir_path / root).parents:\n                continue\n            if filename.endswith('.dll'):\n                mono_paths.add(os.path.join(options.builddir, root))\n            if TYPELIB_REG.search(filename):\n                prepend_env_var(env, \"GI_TYPELIB_PATH\",\n                                os.path.join(options.builddir, root),\n                                options.sysroot)\n            elif is_library_target_and_not_plugin(target, filename):\n                prepend_env_var(env, lib_path_envvar,\n                                os.path.join(options.builddir, root),\n                                options.sysroot)\n            elif is_binary_target_and_in_path(target, filename, bindir):\n                paths.add(os.path.join(options.builddir, root))\n            elif is_gio_module(target, filename, options.builddir):\n                prepend_env_var(env, 'GIO_EXTRA_MODULES',\n                                os.path.join(options.builddir, root),\n                                options.sysroot)\n\n    # Search for the Plugin paths file either in the build directory root\n    # or check if gstreamer is a subproject of another project\n    for sub_directories in [[], ['subprojects', 'gstreamer']]:\n        plugin_paths = os.path.join(options.builddir, *sub_directories, 'GstPluginsPath.json')\n        if os.path.exists(plugin_paths):\n            with open(plugin_paths) as f:\n                for plugin_path in json.load(f):\n                    prepend_env_var(env, 'GST_PLUGIN_PATH', plugin_path,\n                                    options.sysroot)\n            break\n\n    # Sort to iterate in a consistent order (`set`s and `hash`es are randomized)\n    for p in sorted(paths):\n        prepend_env_var(env, 'PATH', p, options.sysroot)\n\n    if os.name != 'nt':\n        for p in sorted(mono_paths):\n            prepend_env_var(env, \"MONO_PATH\", p, options.sysroot)\n\n    presets = set()\n    encoding_targets = set()\n    python_dirs = setup_gdb(options)\n    overrides_dirs = set()\n    if '--installed' in subprocess.check_output(meson + ['introspect', '-h']).decode():\n        installed_s = subprocess.check_output(meson + ['introspect', options.builddir, '--installed'])\n        for path, installpath in json.loads(installed_s.decode()).items():\n            installpath_parts = pathlib.Path(installpath).parts\n\n            # We want to add all python modules to the PYTHONPATH\n            # in a manner consistent with the way they would be imported:\n            # For example if the source path /home/meh/foo/bar.py\n            # is to be installed in /usr/lib/python/site-packages/foo/bar.py,\n            # we want to add /home/meh to the PYTHONPATH.\n            # This will only work for projects where the paths to be installed\n            # mirror the installed directory layout, for example if the path\n            # is /home/meh/baz/bar.py and the install path is\n            # /usr/lib/site-packages/foo/bar.py , we will not add anything\n            # to PYTHONPATH, but the current approach works with pygobject\n            # and gst-python at least.\n            py_package = None\n            if 'site-packages' in installpath_parts:\n                py_package = 'site-packages'\n            elif 'dist-packages' in installpath_parts:\n                py_package = 'dist-packages'\n            if  py_package:\n                install_subpath = os.path.join(*installpath_parts[installpath_parts.index(py_package) + 1:])\n                if path.endswith(install_subpath):\n                    if os.path.commonprefix([\"gi/overrides\", install_subpath]):\n                        overrides_dirs.add(os.path.dirname(path))\n                    else:\n                        python_dirs.add(path[:len(install_subpath) * -1])\n\n            if path.endswith('.prs'):\n                presets.add(os.path.dirname(path))\n            elif path.endswith('.gep'):\n                encoding_targets.add(\n                    os.path.abspath(os.path.join(os.path.dirname(path), '..')))\n\n        for p in sorted(presets):\n            prepend_env_var(env, 'GST_PRESET_PATH', p, options.sysroot)\n\n        for t in sorted(encoding_targets):\n            prepend_env_var(env, 'GST_ENCODING_TARGET_PATH', t, options.sysroot)\n\n    # Check if meson has generated -uninstalled pkgconfig files\n    meson_uninstalled = pathlib.Path(options.builddir) / 'meson-uninstalled'\n    if meson_uninstalled.is_dir():\n        prepend_env_var(env, 'PKG_CONFIG_PATH', str(meson_uninstalled), options.sysroot)\n\n    for python_dir in sorted(python_dirs):\n        prepend_env_var(env, 'PYTHONPATH', python_dir, options.sysroot)\n\n    for python_dir in sorted(overrides_dirs):\n        prepend_env_var(env, '_GI_OVERRIDES_PATH', python_dir, options.sysroot)\n\n    mesonpath = os.path.join(SCRIPTDIR, \"meson\")\n    if os.path.join(mesonpath):\n        # Add meson/ into PYTHONPATH if we are using a local meson\n        prepend_env_var(env, 'PYTHONPATH', mesonpath, options.sysroot)\n\n    # Ensure that gst-python/gi is used first\n    prepend_env_var(env, \"PYTHONPATH\", os.path.join(SCRIPTDIR, 'subprojects', 'gst-python'),\n                    options.sysroot)\n\n    # For devhelp books\n    if 'XDG_DATA_DIRS' not in env or not env['XDG_DATA_DIRS']:\n        # Preserve default paths when empty\n        prepend_env_var(env, 'XDG_DATA_DIRS', '/usr/local/share/:/usr/share/', '')\n\n    prepend_env_var(env, 'XDG_DATA_DIRS', os.path.join(options.builddir,\n                                                       'subprojects',\n                                                       'gst-docs',\n                                                       'GStreamer-doc'),\n                    options.sysroot)\n\n    if 'XDG_CONFIG_DIRS' not in env or not env['XDG_CONFIG_DIRS']:\n        # Preserve default paths when empty\n        prepend_env_var(env, 'XDG_CONFIG_DIRS', '/etc/local/xdg:/etc/xdg', '')\n\n    prepend_env_var(env, \"XDG_CONFIG_DIRS\", os.path.join(PREFIX_DIR, 'etc', 'xdg'),\n                    options.sysroot)\n\n    return env\n\n\ndef get_windows_shell():\n    command = ['powershell.exe', '-noprofile', '-executionpolicy', 'bypass', '-file',\n        os.path.join(SCRIPTDIR, 'data', 'misc', 'cmd_or_ps.ps1')]\n    result = subprocess.check_output(command)\n    return result.decode().strip()\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(prog=\"gst-env\")\n\n    parser.add_argument(\"--builddir\",\n                        default=DEFAULT_BUILDDIR,\n                        help=\"The meson build directory\")\n    parser.add_argument(\"--srcdir\",\n                        default=SCRIPTDIR,\n                        help=\"The top level source directory\")\n    parser.add_argument(\"--sysroot\",\n                        default='',\n                        help=\"The sysroot path used during cross-compilation\")\n    parser.add_argument(\"--wine\",\n                        default='',\n                        help=\"Build a wine env based on specified wine command\")\n    parser.add_argument(\"--winepath\",\n                        default='',\n                        help=\"Extra path to set to WINEPATH.\")\n    parser.add_argument(\"--only-environment\",\n                        action='store_true',\n                        default=False,\n                        help=\"Do not start a shell, only print required environment.\")\n    options, args = parser.parse_known_args()\n\n    if not os.path.exists(options.builddir):\n        print(\"GStreamer not built in %s\\n\\nBuild it and try again\" %\n              options.builddir)\n        exit(1)\n    options.builddir = os.path.abspath(options.builddir)\n\n    if not os.path.exists(options.srcdir):\n        print(\"The specified source dir does not exist\" %\n              options.srcdir)\n        exit(1)\n\n    # The following incantation will retrieve the current branch name.\n    try:\n        gst_version = git(\"rev-parse\", \"--symbolic-full-name\", \"--abbrev-ref\", \"HEAD\",\n                          repository_path=options.srcdir).strip('\\n')\n    except subprocess.CalledProcessError:\n        gst_version = \"unknown\"\n\n    if options.wine:\n        gst_version += '-' + os.path.basename(options.wine)\n\n    env = get_subprocess_env(options, gst_version)\n    if os.name == 'nt':\n        shell = get_windows_shell()\n        if shell in ['powershell.exe', 'pwsh.exe']:\n            new_args = [shell, '-NoLogo']\n            if not args:\n                prompt = 'function global:prompt {  \"[' + gst_version + '\"+\"] PS \" + $PWD + \"> \"}'\n                new_args += ['-NoExit', '-Command', prompt]\n            else:\n                new_args += ['-NonInteractive', '-Command'] + args\n            args = new_args\n        else:\n            new_args = [os.environ.get(\"COMSPEC\", r\"C:\\WINDOWS\\system32\\cmd.exe\")]\n            if not args:\n                new_args += ['/k', 'prompt [{}] $P$G'.format(gst_version)]\n            else:\n                new_args += ['/c', 'start', '/b', '/wait'] + args\n            args = new_args\n    if not args:\n        if os.name != 'nt':\n            args = [os.environ.get(\"SHELL\", os.path.realpath(\"/bin/sh\"))]\n        prompt_export = f'export PS1=\"[{gst_version}] $PS1\"'\n        if args[0].endswith('bash') and not str_to_bool(os.environ.get(\"GST_BUILD_DISABLE_PS1_OVERRIDE\", r\"FALSE\")):\n            # Let the GC remove the tmp file\n            tmprc = tempfile.NamedTemporaryFile(mode='w')\n            bashrc = os.path.expanduser('~/.bashrc')\n            if os.path.exists(bashrc):\n                with open(bashrc, 'r') as src:\n                    shutil.copyfileobj(src, tmprc)\n            tmprc.write('\\n' + prompt_export)\n            tmprc.flush()\n            if is_bash_completion_available(options):\n                bash_completions_files = []\n                for p in BASH_COMPLETION_PATHS:\n                    if os.path.exists(p):\n                        bash_completions_files += os.listdir(path=p)\n                bc_rc = BC_RC.format(bash_completions=' '.join(bash_completions_files), bash_completions_paths=' '.join(BASH_COMPLETION_PATHS))\n                tmprc.write(bc_rc)\n                tmprc.flush()\n            args.append(\"--rcfile\")\n            args.append(tmprc.name)\n        elif args[0].endswith('fish'):\n            prompt_export = None  # FIXME\n            # Ignore SIGINT while using fish as the shell to make it behave\n            # like other shells such as bash and zsh.\n            # See: https://gitlab.freedesktop.org/gstreamer/gst-build/issues/18\n            signal.signal(signal.SIGINT, lambda x, y: True)\n            # Set the prompt\n            args.append('--init-command')\n            prompt_cmd = '''functions --copy fish_prompt original_fish_prompt\n            function fish_prompt\n                echo -n '[{}] '(original_fish_prompt)\n            end'''.format(gst_version)\n            args.append(prompt_cmd)\n        elif args[0].endswith('zsh'):\n            prompt_export = f'export PROMPT=\"[{gst_version}] $PROMPT\"'\n            tmpdir = tempfile.TemporaryDirectory()\n            # Let the GC remove the tmp file\n            tmprc = open(os.path.join(tmpdir.name, '.zshrc'), 'w')\n            zshrc = os.path.expanduser('~/.zshrc')\n            if os.path.exists(zshrc):\n                with open(zshrc, 'r') as src:\n                    shutil.copyfileobj(src, tmprc)\n            tmprc.write('\\n' + prompt_export)\n            tmprc.flush()\n            env['ZDOTDIR'] = tmpdir.name\n    try:\n        if options.only_environment:\n            for name, value in env.items():\n                print('{}={}'.format(name, shlex.quote(value)))\n                print('export {}'.format(name))\n            if prompt_export:\n                print(prompt_export)\n        else:\n            if os.environ.get(\"CI_PROJECT_NAME\"):\n                print(\"Ignoring SIGINT when running on the CI,\"\n                      \" as we get spurious sigint in there for some reason.\")\n                signal.signal(signal.SIGINT, signal.SIG_IGN)\n            exit(subprocess.call(args, close_fds=False, env=env))\n\n    except subprocess.CalledProcessError as e:\n        exit(e.returncode)\n"
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 24.9443359375,
          "content": "project('gstreamer-full', 'c',\n  version : '1.25.0.1',\n  meson_version : '>= 1.3',\n  default_options : ['buildtype=debugoptimized',\n                     # Needed due to https://github.com/mesonbuild/meson/issues/1889,\n                     # but this can cause problems in the future. Remove it\n                     # when it's no longer necessary.\n                     'cpp_std=c++14'])\n\napi_version = '1.0'\ngst_version = '>= @0@'.format(meson.project_version())\n\nhost_system = host_machine.system()\nbuild_system = build_machine.system()\ncc = meson.get_compiler('c')\n\nfs = import('fs')\ngnome = import('gnome')\npkgconfig = import('pkgconfig')\npython3 = import('python').find_installation()\n# Ensure that we're not being run from inside the development environment\n# because that will confuse meson, and it might find the already-built\n# gstreamer. It's fine if people run `ninja` as long as it doesn't run\n# reconfigure because ninja doesn't care about the env.\nensure_not_devenv = '''\nimport os\nassert('GST_ENV' not in os.environ)\n'''\ncmdres = run_command(python3, '-c', ensure_not_devenv, check: false)\nif cmdres.returncode() != 0\n  error('Do not run `ninja reconfigure` or `meson` for gst-build inside the development environment, you will run into problems')\nendif\n\n# Install gst-indent pre-commit hook\nrun_command(python3, '-c', 'import shutil; shutil.copy(\"scripts/git-hooks/multi-pre-commit.hook\", \".git/hooks/pre-commit\")', check: false)\n\ngitlint_req = '>= 0.18'\ngitlint = find_program('gitlint', version: gitlint_req, required: false)\nif gitlint.found()\n  run_command(gitlint, 'install-hook', check: false)\nelse\n  message('gitlint not found or too old, please install it with your package manager or `python3 -m pip install gitlint` to enable the commit message hook')\nendif\n\n# On macOS, you have to run \"Install Certificates.command\" otherwise Python\n# doesn't have access to the latest SSL CA Certificates, and Meson will fail to\n# download wrap files from websites that use, for example, Let's Encrypt.\n# We already recommend this in the README, but add a warning here as well.\n# Can't make this an error because the user might be using XCode's Python\n# 3 which doesn't have this script.\nif build_system == 'darwin'\n  python3_cacert_file = python3.get_path('data') / 'etc/openssl/cert.pem'\n  install_cert_cmd = '/Applications/Python @0@/Install Certificates.command'.format(python3.language_version())\n  if not fs.is_symlink(python3_cacert_file) and fs.is_file(install_cert_cmd)\n    warning('Please run \"@0@\" so that Python has access to the latest SSL certificates. Meson might fail to download some wraps without it.'.format(install_cert_cmd))\n  endif\nendif\n\ndocumented_projects = ''\n# Make it possible to use msys2 built zlib which fails\n# when not using the mingw toolchain as it uses unistd.h\nif not meson.is_subproject() and cc.get_id() == 'msvc'\n  uname = find_program('uname', required: false)\n  if uname.found()\n    ret = run_command(uname, '-o', check: false)\n    if ret.returncode() == 0 and ret.stdout().to_lower() == 'msys'\n      ret = run_command(uname, '-r', check: false)\n      # The kernel version returned by uname is actually the msys version\n      if ret.returncode() == 0 and ret.stdout().startswith('2')\n        # If a system zlib is found, disable UNIX features in zlib.h and zconf.h\n        if cc.find_library('z').found()\n          add_global_arguments('-DZ_SOLO', language: 'c')\n        endif\n      endif\n    endif\n  endif\nendif\n\n# Ensure that MSVC interprets all source code as UTF-8. Only do this when we're\n# not a subproject, because subprojects are not allowed to call\n# add_global_arguments().\nif not meson.is_subproject() and cc.get_id() == 'msvc'\n  add_global_arguments(\n      cc.get_supported_arguments(['/utf-8']), # set the input encoding to utf-8\n      language: ['c', 'cpp'])\nendif\n\nbuilding_full = get_option('default_library') == 'static' and not get_option('gst-full').disabled()\nbuilding_full_static = false\nbuilding_full_options = []\nif building_full\n  building_full_options = ['gstreamer-static-full=false']\n  building_full_static = get_option('gst-full-target-type') == 'static_library'\n  if building_full_static\n    building_full_options = ['gstreamer-static-full=true']\n  endif\nendif\n\nlibnice_options = []\nif get_option('webrtc').enabled()\n  libnice_options += ['gstreamer=enabled']\nendif\n\ngtk_options = [\n  'build-demos=false',\n  'build-examples=false',\n  'build-testsuite=false',\n  'build-tests=false',\n]\nif host_system == 'windows'\n  gtk_options += ['vulkan=disabled']\nelif host_system == 'darwin'\n  gtk_options += ['x11-backend=false']\nendif\n\n# Disable gst-python if we've disabled introspection\ngst_python_option = get_option('python').disable_if(get_option('introspection').disabled())\n\n# Ordered list of subprojects (dict has no ordering guarantees)\nsubprojects = [\n  ['gstreamer', {'build-hotdoc': true, 'subproject_options': building_full_options}],\n  ['gst-plugins-base', {'option': get_option('base'), 'build-hotdoc': true}],\n  ['gst-plugins-good', {'option': get_option('good'), 'build-hotdoc': true}],\n  ['libnice', { 'option': get_option('libnice'), 'match_gst_version': false, 'subproject_options': libnice_options}],\n  ['gst-plugins-bad', { 'option': get_option('bad'), 'build-hotdoc': true}],\n  ['gst-plugins-ugly', { 'option': get_option('ugly'), 'build-hotdoc': true}],\n  ['gst-libav', { 'option': get_option('libav'), 'build-hotdoc': true}],\n  ['gst-rtsp-server', { 'option': get_option('rtsp_server'), 'build-hotdoc': true}],\n  ['gst-devtools', { 'option': get_option('devtools'), 'build-hotdoc': true}],\n  ['gst-integration-testsuites', { 'option': get_option('devtools') }],\n  ['gst-editing-services', { 'option': get_option('ges'), 'build-hotdoc': true}],\n  ['gstreamer-vaapi', { 'option': get_option('vaapi'), 'build-hotdoc': true}],\n  ['gstreamer-sharp', { 'option': get_option('sharp') }],\n  ['pygobject', { 'option': get_option('python'), 'match_gst_version': false, 'sysdep': 'pygobject-3.0', 'sysdep_version': '>= 3.8' }],\n  ['gst-python', { 'option': gst_python_option}],\n  ['gst-examples', { 'option': get_option('gst-examples'), 'match_gst_versions': false}],\n  ['gtk', {'option': get_option('gtk'), 'match_gst_version': false, 'subproject_options': gtk_options}],\n  ['gst-plugins-rs', { 'option': get_option('rs'), 'build-hotdoc': true, 'match_gst_version': false}],\n]\n\nif get_option('build-tools-source') == 'subproject'\n  if build_system == 'windows'\n    subproject('win-flex-bison-binaries')\n    subproject('win-nasm')\n    subproject('win-pkgconfig')\n  elif build_system == 'darwin'\n    subproject('macos-bison-binary')\n    # Newer macOS provides /usr/lib/pkgconfig/libpcre2-8.pc which is broken\n    # because it says headers are in /usr/include but that directory doesn't\n    # exist. It can only be used to find the library, which only exists on\n    # newer macOS at /usr/lib/libpcre2-8.dylib, so it's also unusable.\n    #\n    # jit support requires macOS 11.0 or newer, so disable it by default\n    subproject('pcre2', default_options: ['default_library=static', 'jit=disabled'])\n  endif\nendif\n\norc_option = get_option('orc')\n# There is a check below to keep this in sync with subprojects/gst-plugins-base/meson.build\norc_req = '>= 0.4.24'\norc_source_option = get_option('orc-source')\norc_subproject = disabler()\nif orc_option.allowed()\n  if orc_source_option == 'subproject'\n    orc_subproject = subproject('orc', required: orc_option)\n  else\n    dependency('orc-0.4', version: orc_req, required: orc_option,\n               allow_fallback: orc_source_option == 'auto')\n  endif\nendif\n\nforeach custom_subproj: get_option('custom_subprojects').split(',')\n    if custom_subproj != ''\n        message ('Adding custom subproject ' + custom_subproj)\n        subprojects += [[custom_subproj, {'match_gst_version': false}]]\n    endif\nendforeach\n\n\nsubprojects_names = []\nplugins_doc_caches = []\norc_update_targets = []\nall_plugins = []\nall_tools = {}\nall_helpers = {}\ngst_tools = []\ngst_helpers = []\ngst_libraries =[]\n# Using a list and not a dict to keep the ordering to build the chain of `gir`\n# dependencies\nall_libraries = []\nforeach sp : subprojects\n  project_name = sp[0]\n  build_infos = sp[1]\n  is_required = build_infos.get('option', true)\n  sysdep = build_infos.get('sysdep', '')\n  sysdep_version = build_infos.get('sysdep_version', '')\n  match_gst_version = build_infos.get('match_gst_version', true)\n  default_options =  build_infos.get('subproject_options', [])\n\n  if match_gst_version\n    subproj = subproject(project_name, version: gst_version, required: is_required, default_options: default_options)\n  elif sysdep != ''\n    sysdep_dep = dependency(sysdep, version: sysdep_version, required: is_required, default_options: default_options)\n  else\n    subproj = subproject(project_name, required: is_required, default_options: default_options)\n  endif\n\n  if project_name == 'gst-plugins-base' and subproj.found()\n    gst_base_orc_req = subproj.get_variable('orc_req', '')\n    if gst_base_orc_req != orc_req\n      error('orc_req is \"@0@\" but it should be \"@1@\" from subprojects/gst-plugins-base/meson.build'\n            .format(orc_req, gst_base_orc_req))\n    endif\n  endif\n\n  if subproj.found()\n    plugins = subproj.get_variable('gst_plugins', [])\n    legacy_plugins = subproj.get_variable('plugins', [])\n    all_plugins += plugins\n    if plugins.length() == 0 and legacy_plugins.length() > 0\n      warning(f'DEPRECATED use of the `plugins` variable in @project_name@.')\n      warning('The variable should now be called `gst_plugins` and use:')\n      warning('`declare_dependency( link_with: <plugin_target>, variable: {\\'full_path\\': <plugin_target>.full_path()})` instead')\n      foreach plugin: legacy_plugins\n        all_plugins += [declare_dependency(link_with: plugin, variables: {'full_path': plugin.full_path()})]\n      endforeach\n    endif\n\n    all_libraries += subproj.get_variable('gst_libraries', [])\n    if not get_option('tools').disabled()\n      all_tools += subproj.get_variable('gst_tools', {})\n      all_helpers += subproj.get_variable('gst_helpers', {})\n    endif\n\n    orc_update_targets += subproj.get_variable('orc_update_targets', [])\n\n    subprojects_names += [project_name]\n\n    if not meson.is_cross_build() and build_infos.get('build-hotdoc', false) and get_option('doc').allowed()\n      plugins_doc_caches += [subproj.get_variable('gst_plugins_doc_dep', [])]\n      if documented_projects != ''\n        documented_projects += ','\n      endif\n      documented_projects  += project_name\n    endif\n  endif\nendforeach\n\n# Check if we need to also build glib-networking for TLS modules\ngiomodules = []\nglib_dep = dependency('glib-2.0')\nif glib_dep.type_name() == 'internal'\n  subp = subproject('glib-networking', required : get_option('tls'),\n             default_options: ['gnutls=auto', 'openssl=auto', 'libproxy=auto', 'gnome_proxy=auto'])\n  if subp.found()\n    giomodules += subp.get_variable('giomodules', [])\n  endif\nendif\n\nif get_option('doc').allowed()\n  gst_plugins_doc_dep = custom_target('plugins-doc-cache',\n    command: [python3, '-c', 'print(\"Built all doc caches\")'],\n    input: plugins_doc_caches,\n    output: 'plugins_doc_caches',\n    capture: true,\n  )\nelse\n  message('doc option is disabled, will not generate targets for building plugins doc caches')\nendif\n\ngir_files = []\ngir_targets = []\nforeach pkgname_library : all_libraries\n  lib_def = pkgname_library[1]\n  foreach gir_target: lib_def.get('gir_targets', [])\n    gir_files += [gir_target[0].full_path()]\n    gir_targets += gir_target\n  endforeach\nendforeach\n\ncustom_target('update_girs',\n  command: [find_program('scripts/update-girs.py'), meson.global_build_root()] + gir_files,\n  output: 'update_girs',\n  capture: true,\n  depends: gir_targets\n)\n\nif meson.is_cross_build() or build_machine.system() == 'windows'\n    if get_option('doc').enabled()\n        error('Documentation enabled but building the doc while cross building or building on windows is not supported yet.')\n    endif\n\n    documented_projects = ''\n    message('Documentation not built as building the documentation while cross building or building on windows is not supported yet.')\nelse\n  hotdoc_p = find_program('hotdoc', required : get_option('doc'))\n  if not hotdoc_p.found()\n    documented_projects = ''\n    message('Not building documentation as hotdoc was not found')\n  endif\nendif\n\nwrite_file_contents = '''\nimport os\nimport sys\n\nassert len(sys.argv) >= 3\nfname = sys.argv[1]\ncontents = sys.argv[2]\n\nwith open(fname, 'w') as f:\n    f.write(contents)\n'''\n\nconfigure_file(\n  output : 'GstDocumentedSubprojects',\n  command : [python3,\n             '-c', write_file_contents,\n             '@OUTPUT@',\n             documented_projects]\n)\n\nif documented_projects != ''\n  gst_doc = subproject('gst-docs', required: get_option('doc').enabled())\n  if gst_doc.found()\n    gst_doc_target = gst_doc.get_variable('gstreamer_doc')\n    alias_target('gst-doc', gst_doc_target)\n  endif\n  message('Gst docs subprojects: ' + documented_projects)\nendif\n\nall_plugins_paths = []\nall_plugins_dirs = []\nplugins_names = []\nforeach plugin: all_plugins\n  plugin_path = plugin.get_variable('full_path')\n  all_plugins_paths += plugin_path\n  all_plugins_dirs += fs.parent(plugin_path)\n  plugins_names += fs.name(plugin_path)\nendforeach\n\n# Work around meson bug: https://github.com/mesonbuild/meson/pull/6770\npathsep = host_machine.system() == 'windows' ? ';' : ':'\nall_plugins_paths = pathsep.join(all_plugins_paths)\n\ndevenv = environment()\nif not building_full\n  devenv.prepend('GST_PLUGIN_PATH', all_plugins_dirs)\nelse\n  # Make sure the current build directory is first in PATH so we prefer tools\n  # built here that links on gst-full instead instead of those built in\n  # subprojects.\n  devenv.prepend('PATH', meson.current_build_dir())\nendif\ndevenv.set('CURRENT_GST', meson.current_source_dir())\ndevenv.set('GST_VERSION', meson.project_version())\ndevenv.set('GST_ENV', 'gst-' + meson.project_version())\ndevenv.set('GST_REGISTRY', meson.current_build_dir() / 'registry.dat')\ndevenv.set('GST_PLUGIN_SYSTEM_PATH', '')\ndevenv.set('GST_PLUGIN_LOADING_WHITELIST', '*')\nmeson.add_devenv(devenv)\n\ngenerate_plugins_paths = find_program('scripts/generate_plugins_path.py')\nconfigure_file(\n  output : 'GstPluginsPath.json',\n  command : [generate_plugins_paths,\n             '@OUTPUT@',\n             all_plugins_paths]\n)\n\nif building_full\n  cdata = configuration_data()\n  cdata.set_quoted('GST_API_VERSION', api_version)\n  cdata.set_quoted('GETTEXT_PACKAGE', 'gstreamer-full-1.0')\n  cdata.set_quoted('PACKAGE_VERSION', meson.project_version())\n  cdata.set_quoted('GST_PACKAGE_ORIGIN', get_option('package-origin'))\n  cdata.set_quoted('GST_FULL_LICENSE', get_option('gstreamer-full-license'))\n  cdata.set_quoted('GST_PLUGIN_FULL_FEATURES_NAME', 'fullstaticfeatures')\n  configure_file(output : 'config.h', configuration : cdata)\n  configinc = include_directories('.')\n  gst_c_args = ['-DHAVE_CONFIG_H']\n\n  # Generate a .c file which declare and register all built plugins\n  static_plugins = get_option('gst-full-plugins')\n  plugins_to_be_initialized = []\n  if static_plugins == '*'\n    all_plugin_names = ';'.join(plugins_names)\n  else\n    missing_plugins = []\n    foreach plugin : static_plugins.split(';')\n      if plugins_names.contains(plugin)\n        plugins_to_be_initialized += [plugin]\n      else\n        missing_plugins += [plugin]\n      endif\n    endforeach\n    if missing_plugins.length() > 0\n      error('Some gstreamer-full plugins enabled via the \\'gst-full-plugins\\' option are not available, please enable the corresponding meson options: @0@'.format(', '.join(missing_plugins)))\n    endif\n    all_plugin_names = ';'.join(plugins_to_be_initialized)\n  endif\n  generate_init_static_plugins = find_program('scripts/generate_init_static_plugins.py')\n  init_static_plugins_c = configure_file(\n    output: 'gstinitstaticplugins.c',\n    command : [generate_init_static_plugins,\n               '-o ' + '@OUTPUT@',\n               '-p ' + all_plugin_names,\n               '-e ' + get_option('gst-full-elements'),\n               '-t ' + get_option('gst-full-typefind-functions'),\n               '-d ' + get_option('gst-full-device-providers'),\n               '-T ' + get_option('gst-full-dynamic-types'),\n               '--giomodules', ';'.join(giomodules),\n               ]\n  )\n\n  gstfull_link_args = cc.get_supported_link_arguments(['-Wl,-Bsymbolic-functions'])\n\n  # Get a list of libraries that needs to be exposed in the ABI.\n  exposed_libs = []\n  exposed_deps = []\n  exposed_girs = []\n  incdir_deps = []\n  wanted_libs = ['gstreamer-1.0'] + get_option('gst-full-libraries')\n  all_libs = '*' in wanted_libs\n\n  foreach pkgname_library : all_libraries\n    pkg_name = pkgname_library[0]\n    gst_libraries += pkg_name\n    lib_def = pkgname_library[1]\n\n    if pkg_name in wanted_libs or all_libs\n      if lib_def.has_key('lib')\n        exposed_deps += dependency(pkg_name)\n        incdir_deps += dependency(pkg_name).partial_dependency(includes: true, sources: true)\n        exposed_libs += [lib_def['lib']]\n      endif\n\n      if lib_def.has_key('gir')\n        exposed_girs += lib_def['gir']\n      endif\n    endif\n  endforeach\n\n  # glib and gobject are part of our public API. If we are using glib from the\n  # system then our pkg-config file must require it. If we built it as\n  # subproject then we need to link_whole it.\n  # Note that link_whole dependencies aren't exposed transitively in\n  # Windows/Cygwin, because symbols from static libraries must\n  # be manually marked as exported through a module definition file.\n  # See e.g. https://github.com/FFmpeg/FFmpeg/blob/3057ce797f6e1348b978f5ffe9e2afd2224544f0/configure#L5726\n  glib_deps = []\n  glib_dep = dependency('glib-2.0')\n  gobject_dep = dependency('gobject-2.0')\n  if gobject_dep.type_name() == 'internal'\n    glib_subproject = subproject('glib')\n    exposed_libs += glib_subproject.get_variable('libglib')\n    exposed_libs += glib_subproject.get_variable('libgobject')\n    incdir_deps += [\n      glib_dep.partial_dependency(includes: true),\n      gobject_dep.partial_dependency(includes: true),\n    ]\n  else\n    glib_deps = [glib_dep, gobject_dep]\n  endif\n\n  link_deps = []\n  if get_option('gst-full-version-script') != ''\n    symbol_map = meson.current_source_dir() / get_option('gst-full-version-script')\n    link_arg = '-Wl,--version-script=' + symbol_map\n    if cc.has_link_argument(link_arg)\n      gstfull_link_args += link_arg\n      link_deps += symbol_map\n    elif cc.get_id() == 'msvc'\n      warning('FIXME: Provide a def file to publish the public symbols')\n    else\n      warning('FIXME: Linker does not support the supplied version script (' + symbol_map + '), please disable the \"gst-full-version-script\" option')\n    endif\n  endif\n\n  giomodules_deps = []\n  foreach module : giomodules\n    giomodules_deps += dependency(module)\n  endforeach\n\n  # Build shared library\n  gstfull = build_target('gstreamer-full-1.0',\n    init_static_plugins_c,\n    c_args: ['-DBUILDING_GST'] + gst_c_args,\n    target_type: get_option('gst-full-target-type'),\n    link_args: gstfull_link_args,\n    link_whole : exposed_libs,\n    dependencies : [incdir_deps, glib_deps, all_plugins, giomodules_deps],\n    link_depends : link_deps,\n    install : true,\n  )\n  gst_full_c_flags =  ['-DGST_STATIC_COMPILATION']\n\n  gst_full_libs = [gstfull]\n\n  # See above re: symbol exports in Win32\n  if ['windows', 'cygwin'].contains(host_machine.system())\n    gst_full_libs += exposed_libs\n  endif\n\n  gst_full_dep = declare_dependency(link_with: gst_full_libs,\n    compile_args: gst_full_c_flags,\n    dependencies : incdir_deps + glib_deps,\n    include_directories: include_directories('.')\n  )\n\n  gst_full_libs_private = cc.get_supported_link_arguments(['-Wl,--undefined=gst_init_static_plugins'])\n  if gst_full_libs_private == []\n    warning('The compiler does not support `-Wl,--undefined` linker flag. The method `gst_init_static_plugins` might be dropped during the link stage of an application using libgstreamer-full-1.0.a, preventing plugins registration.')\n  endif\n\n  if building_full_static\n    warning('Introspection is enabled in gst-full static build mode but this is not supported by now. gir generation is now disabled.')\n  endif\n  # FIXME: gnome.generate_gir should link with not only gstfull in static gst-full but the whole gstreamer suite.\n  # tried dependencies without success.\n  if not get_option('introspection').disabled() and not building_full_static\n    built_girs = {}\n    foreach gir: exposed_girs\n      includes = []\n      foreach include: gir.get('includes', [])\n        includes += [built_girs.get(include, include)]\n      endforeach\n\n      gir += {\n        'includes': includes,\n        'extra_args': gir.get('extra_args', []) + ['--add-include-path=' + meson.current_build_dir()],\n        'install': true,\n      }\n      built_girs += {gir.get('namespace') + '-' + gir.get('nsversion'): gnome.generate_gir(gstfull, kwargs: gir)[0]}\n    endforeach\n  endif\n\n  pkgconfig.generate(gstfull,\n    requires: glib_deps,\n    libraries_private: gst_full_libs_private,\n    extra_cflags: gst_full_c_flags,\n    subdirs : 'gstreamer-1.0')\n  meson.override_dependency('gstreamer-full-1.0', gst_full_dep)\n\n  if not get_option('tools').disabled()\n    # Loop for tools\n    foreach tool, data: all_tools\n      gst_tools += tool\n      exe_name = '@0@-@1@'.format(tool, api_version)\n\n      deps = []\n      foreach d : data.get('deps', [])\n        if d not in exposed_deps\n          deps += d\n        endif\n      endforeach\n\n      exe = executable(exe_name,\n        data.get('files'),\n        install: data.get('install', true),\n        install_tag: data.get('install_tag', 'bin'),\n        install_dir: data.get('install_dir', get_option('bindir')),\n        include_directories : data.get('include_directories', [configinc]),\n        dependencies : [gst_full_dep] + deps,\n        c_args: data.get('extra_c_args', []) + gst_c_args + ['-DG_LOG_DOMAIN=\"@0@\"'.format(exe_name)],\n        cpp_args: data.get('extra_cpp_args', []),\n        objc_args: data.get('extra_objc_args', []),\n        override_options: data.get('override_options', []),\n      )\n\n      if(data.has_key('env'))\n        env = data.get('env')\n        value = env[1]\n        if env[1] == 'exe-full-path'\n          value = exe.full_path()\n        endif\n        meson.add_devenv({env[0]: value})\n      endif\n\n      if data.has_key('man_page')\n        install_man(data.get('man_page'))\n      endif\n\n    endforeach\n\n    # Loop for helpers tools\n    foreach helper, data: all_helpers\n      gst_helpers += helper\n      exe_name = '@0@'.format(helper)\n\n      deps = []\n      foreach d : data.get('deps', [])\n        if d not in exposed_deps\n          deps += d\n        endif\n      endforeach\n\n      exe = executable(exe_name,\n        data.get('files'),\n        install: data.get('install', true),\n        install_tag: data.get('install_tag', 'bin'),\n        install_dir: data.get('install_dir', get_option('bindir')),\n        include_directories : data.get('include_directories', [configinc]),\n        dependencies : [gst_full_dep] + deps,\n        c_args: data.get('extra_c_args', []) + gst_c_args + ['-DG_LOG_DOMAIN=\"@0@\"'.format(exe_name)],\n        cpp_args: data.get('extra_cpp_args', []),\n        objc_args: data.get('extra_objc_args', []),\n        override_options: data.get('override_options', []),\n      )\n\n      if(data.has_key('env'))\n        env = data.get('env')\n        value = env[1]\n        if env[1] == 'exe-full-path'\n          value = exe.full_path()\n        endif\n        meson.add_devenv({env[0]: value})\n      endif\n\n      if data.has_key('man_page')\n        install_man(data.get('man_page'))\n      endif\n\n    endforeach\n  endif\nelse # not gst_full\n  foreach tool, data: all_tools\n    gst_tools += tool\n  endforeach\n  foreach helper, data: all_helpers\n    gst_helpers += helper\n  endforeach\n  foreach library : all_libraries\n    gst_libraries = library[0]\n  endforeach\nendif\n\nmessage('Building subprojects: ' + ', '.join(subprojects_names))\n\nsetenv = find_program('gst-env.py')\n\ndevenv_cmd = [setenv, '--builddir=@0@'.format(meson.global_build_root()),\n              '--srcdir=@0@'.format(meson.global_source_root())]\n\nsubdir('tests')\nsubdir('ci/fuzzing')\n\nif meson.can_run_host_binaries() and build_machine.system() == 'linux' and host_machine.system() == 'windows'\n  # FIXME: Ideally we could get the wrapper directly from meson\n  devenv_cmd += ['--wine', host_machine.cpu_family() == 'x86_64' ? 'wine64' : 'wine32']\n  sysroot = meson.get_cross_property('sys_root')\n  if sysroot != ''\n    # Logic from meson\n    devenv_cmd += ['--winepath', 'Z:' + join_paths(sysroot, 'bin')]\n  endif\nendif\n\nrun_target('devenv', command : devenv_cmd)\n\nif orc_subproject.found() and orc_update_targets.length() > 0\n  alias_target('update-orc-dist', orc_update_targets)\nendif\n\nsubdir('scripts')\n\ndotnet_format = find_program('dotnet-format', required: false)\nif dotnet_format.found()\n    run_target('csharp_format_check',\n        command: [join_paths(meson.current_source_dir(), 'scripts', 'format-csharp'),\n            '--check'\n        ],\n    )\n    run_target('csharp_format_apply',\n        command: [join_paths(meson.current_source_dir(), 'scripts', 'format-csharp'),\n        ],\n    )\nendif\n\nsummary({\n  'gstreamer-full library': building_full,\n  'gstreamer-full target type': get_option('gst-full-target-type'),\n  'Tools': gst_tools,\n  'Helpers': gst_helpers,\n  'Libraries': gst_libraries,\n  'Tests and examples disabled': building_full,\n}, section: 'Build options', bool_yn: true, list_sep: '  ')\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 6.728515625,
          "content": "# GStreamer subprojects\noption('base', type : 'feature', value : 'enabled')\noption('good', type : 'feature', value : 'enabled')\noption('ugly', type : 'feature', value : 'enabled')\noption('bad', type : 'feature', value : 'enabled')\noption('libav', type : 'feature', value : 'auto')\noption('devtools', type : 'feature', value : 'auto')\noption('ges', type : 'feature', value : 'auto')\noption('rtsp_server', type : 'feature', value : 'auto')\noption('rs', type : 'feature', value : 'disabled')\noption('vaapi', type : 'feature', value : 'disabled')\noption('gst-examples', type : 'feature', value : 'auto', description : 'Build gst-examples subproject')\n# Bindings\noption('python', type : 'feature', value : 'auto')\noption('sharp', type : 'feature', value : 'disabled')\n# External subprojects\noption('tls', type : 'feature', value : 'auto', description : 'TLS support using glib-networking as a subproject')\noption('libnice', type : 'feature', value : 'auto', description: 'ICE support using libnice as a subproject')\noption('gtk', type: 'feature', value: 'disabled', description: 'Build GTK4 as a subproject')\n\n# Build for fuzzing\noption('oss_fuzz', type : 'feature', value : 'disabled',\n       description: 'Use fuzzing build environment')\n\n# Other options\noption('custom_subprojects', type : 'string', value : '', description : 'Comma-separated project names')\noption('gst-full', type: 'feature', value: 'auto', description: 'Enable the gstreamer-full library feature')\noption('gst-full-libraries', type : 'array', value : [],\n  description : '''List of libraries to expose in gstreamer-full's ABI. gstreamer, glib and gobject are always included.''')\noption('gst-full-version-script', type : 'string', value: 'data/misc/gstreamer-full-default.map',\n  description : 'path of the version script to be used by the linker, see https://www.gnu.org/software/gnulib/manual/html_node/LD-Version-Scripts.html')\noption('gst-full-plugins', type : 'string', value : '*',\n  description : '''List of plugins to expose in gstreamer-full's ABI with the syntax plugin1;plugin2. By default '*' will export all plugins enabled by the build process.''')\noption('gst-full-elements', type : 'string', value : '',\n  description : '''List of elements to expose in gstreamer-full's ABI with the syntax plugin1;plugin2:element1,element2. By default '' will export all element of the enabled plugin.''')\noption('gst-full-typefind-functions', type : 'string', value : '',\n  description : '''List of typefind functions to expose in gstreamer-full's ABI with the syntax plugin:func1,func2. By default '' will export all typefind functions of the enabled plugin.''')\noption('gst-full-device-providers', type : 'string', value : '',\n  description : '''List of device providers to expose in gstreamer-full's ABI with the syntax plugin1:dp1;plugin2:dp1:dp2. By default '' will export all device provider of the enabled plugin.''')\noption('gst-full-dynamic-types', type : 'string', value : '',\n  description : '''List of dynamic types to expose in gstreamer-full's ABI with the syntax plugin:dt1,dt2. By default '' will export all device provider of the enabled plugin.''')\noption('gst-full-target-type', type : 'combo', value : 'shared_library', choices: ['static_library', 'shared_library'],\n  description : '''The type of library of gstreamer-full-1.0.''')\noption('orc-source', type: 'combo', choices: ['system', 'subproject', 'auto'], value: 'subproject')\noption('build-tools-source', type: 'combo', choices: ['system', 'subproject'], value: 'subproject')\noption('virtme_kernel_image', type: 'string', value: '', description: 'Path to a Linux kernel image to be used for virtme testing')\n\n# License-related feature options\noption('gpl', type: 'feature', value: 'disabled',\n  description: 'Allow build of plugins that have (A)GPL-licensed dependencies')\noption('gstreamer-full-license', type : 'string', value : 'unknown',\n       description : 'gstreamer-full license (default unknown)')\n\n# Common options specific to GStreamer, automatically inherited by subprojects.\noption('package-origin', type : 'string', value : 'Unknown package origin', yield : true,\n       description : 'package origin URL to use in plugins')\noption('package-name', type : 'string', yield : true,\n       description : 'package name to use in plugins')\noption('extra-checks', type : 'feature', value : 'enabled', description : 'Enable extra runtime checks')\noption('benchmarks', type : 'feature', value : 'auto')\noption('tools', type : 'feature', value : 'auto', yield : true, description : 'Build command line tools')\noption('orc', type : 'feature', value : 'auto', description : 'Optimized Inner Loop Runtime Compiler (SIMD)')\noption('qt5', type : 'feature', value : 'auto', description : 'Qt5 toolkit support')\noption('qt6', type : 'feature', value : 'auto', description : 'Qt6 toolkit support')\noption('webrtc', type : 'feature', value : 'auto', description : 'WebRTC support')\n\n# Common options shared by other projects, automatically inherited by subprojects.\noption('glib_debug', type : 'feature', value : 'auto', yield : true, description : 'Enable GLib debug infrastructure (see docs/macros.txt)')\noption('glib_assert', type : 'boolean', value : true, yield : true, description : 'Enable GLib assertion (see docs/macros.txt)',\n  deprecated: {'enabled' : 'true', 'disabled' : 'false', 'auto' : 'false'},\n)\noption('glib_checks', type : 'boolean', value : true, yield : true, description : 'Enable GLib checks such as API guards (see docs/macros.txt)',\n  deprecated: {'enabled' : 'true', 'disabled' : 'false', 'auto' : 'false'},\n)\noption('tests', type : 'feature', value : 'auto', description : 'Build tests')\noption('examples', type : 'feature', value : 'auto', description : 'Build examples')\noption('introspection', type : 'feature', value : 'auto', description : 'Generate introspection data')\noption('nls', type : 'feature', value : 'auto', description : 'Native language support (translations)')\noption('doc', type : 'feature', value : 'disabled', description : 'Generate API documentation with hotdoc')\noption('gtk_doc', type : 'feature', value : 'disabled', description : 'Generate API documentation with gtk-doc')\n\n# Deprecated, kept for backward compat\noption('gobject-cast-checks', type : 'feature', value : 'auto', yield : true,\n       description: 'Enable run-time GObject cast checks (auto = enabled for development, disabled for stable releases)',\n       deprecated: 'glib_debug')\noption('glib-asserts', type : 'feature', value : 'enabled', yield : true,\n       description: 'Enable GLib assertion (auto = enabled for development, disabled for stable releases)',\n       deprecated: 'glib_assert')\noption('glib-checks', type : 'feature', value : 'enabled', yield : true,\n       description: 'Enable GLib checks such as API guards (auto = enabled for development, disabled for stable releases)',\n       deprecated: 'glib_checks')\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "security-advisories",
          "type": "tree",
          "content": null
        },
        {
          "name": "subprojects",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}