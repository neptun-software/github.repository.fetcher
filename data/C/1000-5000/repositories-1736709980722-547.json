{
  "metadata": {
    "timestamp": 1736709980722,
    "page": 547,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "yhzhang0128/egos-2000",
      "stars": 2235,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1181640625,
          "content": "# binary and image files\nmkfs\nmkrom\nbuild\n*.elf\n*.lst\n*.bin\n*.mcs\n*.img\n\n# clangd lsp files\n.cache\ncompile_commands.json\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1279296875,
          "content": "MIT License\n\nCopyright (C) 2022-2025 Yunhao Zhang, Robbert van Renesse, Yacqub Mohamed,\n                        Cornell University\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 3.2587890625,
          "content": "# (C) 2025, Cornell University\n# All rights reserved.\n\n# BOARD can be a7_35t or a7_100t\nBOARD       = a7_35t\nQEMU        = qemu-system-riscv32\n\n# TOOLCHAIN can be XPACK or GNU\nTOOLCHAIN   = XPACK\nifeq ($(TOOLCHAIN), XPACK)\n# Pre-compiled GNU toolchain binaries from xPack\n# https://github.com/xpack-dev-tools/riscv-none-elf-gcc-xpack/releases\nRISCV_CC    = riscv-none-elf-gcc\nOBJDUMP     = riscv-none-elf-objdump\nOBJCOPY     = riscv-none-elf-objcopy\nendif\n\nifeq ($(TOOLCHAIN), GNU)\n# The official GNU toolchain\n# https://github.com/riscv-collab/riscv-gnu-toolchain\nRISCV_CC    = riscv32-unknown-elf-gcc\nOBJDUMP     = riscv32-unknown-elf-objdump\nOBJCOPY     = riscv32-unknown-elf-objcopy\nendif\n\nDEBUG       = build/debug\nRELEASE     = build/release\n\nAPPS_DEPS   = apps/*.* library/egos.h library/*/* Makefile\nEGOS_DEPS   = earth/* grass/* library/egos.h library/*/* Makefile\n\nFILESYS     = 1\nLDFLAGS     = -nostdlib -lc -lgcc\nINCLUDE     = -Ilibrary -Ilibrary/elf -Ilibrary/file -Ilibrary/libc -Ilibrary/syscall\nCFLAGS      = -march=rv32ima_zicsr -mabi=ilp32 -Wl,--gc-sections -ffunction-sections -fdata-sections -fdiagnostics-show-option\nDEBUG_FLAGS = --source --all-headers --demangle --line-numbers --wide\n\nSYSAPP_ELFS = $(patsubst %.c, $(RELEASE)/%.elf, $(notdir $(wildcard apps/system/*.c)))\nUSRAPP_ELFS = $(patsubst %.c, $(RELEASE)/user/%.elf, $(notdir $(wildcard apps/user/*.c)))\n\negos: $(USRAPP_ELFS) $(SYSAPP_ELFS) $(RELEASE)/egos.elf\n\n$(RELEASE)/egos.elf: $(EGOS_DEPS)\n\t@echo \"$(YELLOW)-------- Compile EGOS --------$(END)\"\n\t$(RISCV_CC) $(CFLAGS) $(INCLUDE) -DKERNEL $(filter %.s, $(wildcard $^)) $(filter %.c, $(wildcard $^)) -Tlibrary/elf/egos.lds $(LDFLAGS) -o $@\n\t@$(OBJDUMP) $(DEBUG_FLAGS) $@ > $(DEBUG)/egos.lst\n\n$(SYSAPP_ELFS): $(RELEASE)/%.elf : apps/system/%.c $(APPS_DEPS)\n\t@echo \"Compile app$(CYAN)\" $(patsubst %.c, %, $(notdir $<)) \"$(END)=>\" $@\n\t@$(RISCV_CC) $(CFLAGS) $(INCLUDE) -DFILESYS=$(FILESYS) -DKERNEL -Iapps apps/app.s $(filter %.c, $(wildcard $^)) -Tlibrary/elf/app.lds $(LDFLAGS) -o $@\n\t@$(OBJDUMP) $(DEBUG_FLAGS) $@ > $(patsubst %.c, $(DEBUG)/%.lst, $(notdir $<))\n\n$(USRAPP_ELFS): $(RELEASE)/user/%.elf : apps/user/%.c $(APPS_DEPS)\n\t@mkdir -p $(DEBUG) $(RELEASE) $(RELEASE)/user\n\t@echo \"Compile app$(CYAN)\" $(patsubst %.c, %, $(notdir $<)) \"$(END)=>\" $@\n\t@$(RISCV_CC) $(CFLAGS) $(INCLUDE) -Iapps apps/app.s $(filter %.c, $(wildcard $^)) -Tlibrary/elf/app.lds $(LDFLAGS) -o $@\n\t@$(OBJDUMP) $(DEBUG_FLAGS) $@ > $(patsubst %.c, $(DEBUG)/%.lst, $(notdir $<))\n\ninstall: egos\n\t@echo \"$(GREEN)-------- Create the Disk & BootROM Image --------$(END)\"\n\t$(OBJCOPY) -O binary $(RELEASE)/egos.elf tools/qemu/egos.bin\n\t$(CC) tools/mkfs.c library/file/file$(FILESYS).c -DMKFS -DFILESYS=$(FILESYS) -DCPU_BIN_FILE=\"\\\"fpga/vexriscv/vexriscv_cpu_$(BOARD).bin\\\"\" $(INCLUDE) -o tools/mkfs\n\tcd tools; rm -f disk.img bootROM.bin; ./mkfs\n\nqemu: install\n\t@echo \"$(YELLOW)-------- Simulate on QEMU-RISCV --------$(END)\"\n\t$(QEMU) -nographic -readconfig tools/qemu/config.toml\n\nprogram: install\n\t@echo \"$(YELLOW)-------- Program the Arty $(BOARD) on-board ROM --------$(END)\"\n\tcd tools/fpga/openocd; time openocd -f 7series_$(BOARD).txt\n\nclean:\n\trm -rf build earth/kernel_entry.lds tools/mkfs tools/mkrom tools/qemu/egos.bin tools/disk.img tools/bootROM.bin\n\nGREEN = \\033[1;32m\nYELLOW = \\033[1;33m\nCYAN = \\033[1;36m\nEND = \\033[0m\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.2490234375,
          "content": "## Vision\n\nThis project's vision is to help **every** student read **all** the code of a teaching operating system.\n\nWith only **2000** lines of code, egos-2000 implements every component of an operating system for education. \nIt can run on RISC-V boards and the QEMU software emulator.\n\n![Fail to load an image of egos-2000.](tools/screenshots/egos-2000.jpg)\n\n```shell\n# The cloc utility is used to count the lines of code.\n> cloc egos-2000 --exclude-ext=md,txt,toml,json  # excluding text files\n...\ngithub.com/AlDanial/cloc v 1.94  T=0.05 s (949.3 files/s, 62349.4 lines/s)\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nC                               30            411            566           1599\nC/C++ Header                     9             61            104            253\nAssembly                         3             15             52             93\nmake                             1             16              7             55\n-------------------------------------------------------------------------------\nSUM:                            43            503            729           2000 (exactly!)\n-------------------------------------------------------------------------------\n```\n\n## Earth and Grass Operating System\n\nThe **egos** part of egos-2000 is named after its three-layer architecture.\n\n* The **earth layer** implements hardware-specific abstractions.\n    * tty and disk device interface\n    * timer and memory management interface\n* The **grass layer** implements hardware-independent abstractions.\n    * process control block and system call interface\n* The **application layer** implements file system, shell and user commands.\n\nThe definitions of `struct earth` and `struct grass` in header file [egos.h](library/egos.h) specify the layer interface.\nPlease read [USAGES.md](USAGES.md) for running egos-2000 and\nthe [instruction set manual](https://riscv.org/wp-content/uploads/2017/05/riscv-privileged-v1.10.pdf) for the RISC-V privileged ISA.\n\n## Acknowledgements\n\nMany thanks to Meta for a [Facebook fellowship](https://research.facebook.com/blog/2021/4/announcing-the-recipients-of-the-2021-facebook-fellowship-awards/).\nMany thanks to [Robbert van Renesse](https://www.cs.cornell.edu/home/rvr/), [Lorenzo Alvisi](https://www.cs.cornell.edu/lorenzo/), [Shan Lu](https://people.cs.uchicago.edu/~shanlu/), [Hakim Weatherspoon](https://www.cs.cornell.edu/~hweather/) and [Christopher Batten](https://www.csl.cornell.edu/~cbatten/) for their support.\nMany thanks to all the [CS5411/4411](https://www.cs.cornell.edu/courses/cs4411/2022fa/schedule/) students at Cornell University over the years for helping improve this course.\nMany thanks to [Cheng Tan](https://naizhengtan.github.io/) for providing valuable feedback and using egos-2000 in [CS6640 at Northeastern University](https://naizhengtan.github.io/23fall/).\nMany thanks to [Brandon Fusi](https://www.linkedin.com/in/brandon-cheo-fusi-b94b1a171/) for [porting to the Allwinner's D1 chip](https://github.com/cheofusi/egos-2000-d1) using Sipeed's Lichee RV64 compute module.\n\nFor any questions, please contact [Yunhao Zhang](https://dolobyte.net/).\n"
        },
        {
          "name": "USAGES.md",
          "type": "blob",
          "size": 5.361328125,
          "content": "# Compile and run egos-2000\n\nYou can use MacOS, Linux or Windows and here are the tutorial videos:\n[MacOS](https://youtu.be/VJgQFcKG0uc), [Linux](https://youtu.be/2FT7AN0wPlg) and [Windows](https://youtu.be/hCDMnGGyGqM).\nMacOS users can follow the same tutorial no matter you have an Apple chip or Intel CPU.\nYou can run egos-2000 on the QEMU emulator or RISC-V boards.\nRunning on QEMU is easier but if you wish to run it on the boards for fun, \nyou need to purchase the following hardware:\n* Arty [A7-35T](https://www.xilinx.com/products/boards-and-kits/arty.html) or [A7-100T](https://digilent.com/shop/arty-a7-100t-artix-7-fpga-development-board/) board\n* a microUSB cable (e.g., [microUSB-to-USB-C](https://www.amazon.com/dp/B0744BKDRD?psc=1&ref=ppx_yo2_dt_b_product_details))\n* a [microSD Pmod](https://digilent.com/reference/pmod/pmodmicrosd/start?redirect=1), a [microSD reader](https://www.amazon.com/dp/B07G5JV2B5?psc=1&ref=ppx_yo2_dt_b_product_details) and a microSD card\n\n\n## Step1: Setup the compiler and compile egos-2000\n\nSetup your working directory and name it as `$EGOS`.\n\n```shell\n> export EGOS=/home/yunhao/egos\n> cd $EGOS\n> git clone https://github.com/yhzhang0128/egos-2000.git\n```\nDownload the [pre-built binaries of the RISC-V GNU compiler toolchain](https://github.com/xpack-dev-tools/riscv-none-elf-gcc-xpack/releases/tag/v14.2.0-3) from xPack to `$EGOS` and compile egos-2000.\n\n```shell\n> cd $EGOS\n> tar -zxvf xpack-riscv-none-elf-gcc-14.2.0-3-{linux,darwin}-{x64,arm64}.tar.gz\n> export PATH=$PATH:$EGOS/xpack-riscv-none-elf-gcc-14.2.0-3/bin\n> cd $EGOS/egos-2000\n> make\n......\n```\n\n## Step2: Run egos-2000 on the QEMU emulator\n\nDownload the [pre-built binaries of QEMU](https://github.com/xpack-dev-tools/qemu-riscv-xpack/releases/tag/v7.2.5-1) from xPack.\n\n```shell\n> cd $EGOS\n> tar -zxvf xpack-qemu-riscv-8.2.2-1-xxxxxx.tar.gz\n> export PATH=$PATH:$EGOS/xpack-qemu-riscv-8.2.2-1-xxxxxx/bin\n> cd $EGOS/egos-2000\n> make qemu\n-------- Simulate on QEMU-RISCV --------\nqemu-system-riscv32 -nographic -readconfig tools/qemu/config.toml\n[CRITICAL] --- Booting on QEMU with core #4 ---\n[INFO] Set the CS pin to HIGH and toggle clock.\n[INFO] Set the CS pin to LOW and send cmd0 to SD card.\n[INFO] Check SD card type and voltage with cmd8\n[INFO] SD card replies cmd8 with status 0x01 and payload 0x000001aa\n[SUCCESS] Finished initializing the tty and disk devices\n[CRITICAL] Choose a memory translation mechanism:\nEnter 0: page tables\nEnter 1: software TLB\n```\n\n## Step3: Run egos-2000 on the Arty board\n\nYou can use the Arty A7-35t or A7-100t board\nand make sure to set the `BOARD` variable in `Makefile` correctly.\nTo use a microSD card on the board, you can program the microSD card with `disk.img` using tools like [balena Etcher](https://www.balena.io/etcher/).\n\n### Step3.1: MacOS or Linux\n\nDownload [xPack OpenOCD v0.11.0-1](https://github.com/xpack-dev-tools/openocd-xpack/releases/tag/v0.11.0-1) to `$EGOS`\nand program `bootROM.bin` to the on-board ROM.\n\n```shell\n> cd $EGOS\n> tar -zxvf xpack-openocd-0.11.0-1-xxx-xxx.tar.gz\n> export PATH=$PATH:$EGOS/xpack-openocd-0.11.0-1-xxx-xxx/bin\n> cd $EGOS/egos-2000\n> make program\n-------- Program the on-board ROM --------\ncd tools/openocd; time openocd -f 7series.txt\n......\nInfo : sector 190 took 229 ms\nInfo : sector 191 took 243 ms  # It will pause at this point for a while\nInfo : Found flash device 'micron n25q128' (ID 0x0018ba20)\n\nreal    1m37.926s\nuser    0m7.109s\nsys     0m20.089s\n\n```\n\nTo connect with the egos-2000 TTY:\n\n1. Press the `PROG` red button on the left-top corner of the Arty board\n2. To restart, press the `RESET` red button on the right-top corner\n3. For Linux users, type in your shell\n```shell\n> sudo chmod 666 /dev/ttyUSB1\n> screen /dev/ttyUSB1 115200\n......\n[INFO] LiteX + VexRiscv (vendorid: 666)\n[INFO] Press 'b' to enter BIOS instead of EGOS\n[INFO] Loading EGOS binary from 0x2040_0000 to 0x8000_0000\n[CRITICAL] --- Booting on Arty with core #0 ---\n......\n```\n4. For MacOS users, check your `/dev` directory for the TTY device name (e.g., `/dev/tty.usbserial-xxxxxx`)\n\n### Step3.2: Windows\n\nInstall Vivado Lab Edition which can be downloaded [here](https://www.xilinx.com/support/download.html).\nYou may need to register a Xilinx account, but the software is free.\n\n1. Open Vivado Lab Edition and click \"Open Hardware Manager\"\n2. Click \"Open target\" and \"Auto Connect\"; the Arty board should appear in the \"Hardware\" window\n3. In the \"Hardware\" window, right click `xc7a35t` and click \"Add Configuration Memory Device\"\n4. Choose memory device \"mt25ql128-spi-x1_x2_x4\" and click \"Program Configuration Memory Device\"\n5. In the \"Configuration file\" field, choose the `bootROM.bin` file created in step 2; Note that the [tutorial video](https://youtu.be/hCDMnGGyGqM) has shown how to generate this `bootROM.bin` file using Docker in Windows\n6. Click \"OK\" and wait for the program to finish\n\nIn **2**, if the Arty board doesn't appear, try to install [Digilent Adept](https://digilent.com/reference/software/adept/start) or reinstall the USB cable drivers following [this post](https://support.xilinx.com/s/article/59128?language=en_US).\n\nIn **4**, some Arty boards may use \"s25fl128sxxxxxx0\" or other memory device. If you choose the wrong one, **6** will tell you.\n\n![This is an image](tools/screenshots/vivado.png)\n\nLastly, to connect with the egos-2000 TTY, find your board in the \"Device Manager\" (e.g., COM6) and use `PuTTY` to connect:\n\n![This is an image](tools/screenshots/putty.png)\n"
        },
        {
          "name": "apps",
          "type": "tree",
          "content": null
        },
        {
          "name": "earth",
          "type": "tree",
          "content": null
        },
        {
          "name": "grass",
          "type": "tree",
          "content": null
        },
        {
          "name": "library",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}