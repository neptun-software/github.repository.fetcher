{
  "metadata": {
    "timestamp": 1736710235939,
    "page": 971,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "moretension/duti",
      "stars": 1562,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0869140625,
          "content": "Makefile\na.out\nautom4te.cache\n/config.h\nconfig.log\nconfig.status\nconfigure\nversion.c\n*.o\n"
        },
        {
          "name": "COPYRIGHT",
          "type": "blob",
          "size": 0.30859375,
          "content": "duti is free software released into the public domain by Andrew Mortensen, 2008.\nIt is provided as is without warranties of any kind.\n\nYou may do anything you like with this software. If you incorporate some or all\nof the source into a project, I'd appreciate a credit for the work I've done,\nbut that's all. Enjoy.\n"
        },
        {
          "name": "EXCLUDE",
          "type": "blob",
          "size": 0.0712890625,
          "content": ".cvsignore\n.gitignore\n.git\nCVS\nEXCLUDE\nMakefile\nconfig.log\nconfig.status\n"
        },
        {
          "name": "Makefile.in",
          "type": "blob",
          "size": 3.990234375,
          "content": "SHELL = /bin/sh\n\nsrcdir = @srcdir@\nVPATH = @srcdir@\n\nprefix=@prefix@\nexec_prefix=@exec_prefix@\ndatarootdir=@datarootdir@\ndatadir=@datadir@\nBINDIR=@bindir@\nMANDIR=@mandir@\n\nDUTI_BUILD_DATE=@build_date@\n\nCC=\t\t@CC@\nFRAMEWORKS=\t-framework ApplicationServices -framework CoreFoundation\nOPTOPTS=\t-isysroot @macosx_sdk@ \\\n\t\t\t@macosx_arches@ \\\n\t\t\t-mmacosx-version-min=@macosx_dep_target@ \\\n\t\t\t@OPTOPTS@\n\nLIBS=\t\t@LIBS@\nLDFLAGS=\t@LDFLAGS@ ${LIBS}\nCFLAGS=\t\t${OPTOPTS} @CFLAGS@\nINSTALL=\t@INSTALL@\n\nTARGETS=\tduti\nMAN1TARGETS=\tduti.1\nMANTARGETS=\t${MAN1TARGETS}\n\nDUTI_OBJ=\tversion.o util.o plist.o handler.o duti.o\n\nall : ${TARGETS}\n\nversion.o : version.c\n\t${CC} ${CFLAGS} -c ${srcdir}/version.c\n\nduti.o : duti.c\n\t${CC} ${CFLAGS} -c ${srcdir}/duti.c\n\nhandler.o : handler.c\n\t${CC} ${CFLAGS} -c ${srcdir}/handler.c\n\nplist.o : plist.c\n\t${CC} ${CFLAGS} -c ${srcdir}/plist.c\n\nutil.o : util.c\n\t${CC} ${CFLAGS} -c ${srcdir}/util.c\n\nduti : ${DUTI_OBJ}\n\t${CC} ${FRAMEWORKS} ${CFLAGS} -o duti ${DUTI_OBJ} ${LDFLAGS}\n\nVERSION=$(shell date +%Y%m%d)\nDISTDIR=duti-${VERSION}\n\ndist : distclean\n\tmkdir ../${DISTDIR}\n\ttar -h -c -f - -X EXCLUDE . | tar xpf - -C ../${DISTDIR}\n\techo ${VERSION} > ../${DISTDIR}/VERSION\n\tsed -e \"s@INTERNAL@${VERSION}@\" \\\n\t\t< configure.ac > ../${DISTDIR}/configure.ac\n\t(cd \"../${DISTDIR}\"; autoconf; rm -rf autom4te.cache)\n\tfor i in ${MANTARGETS}; do \\\n\t    sed -e 's@_DUTI_BUILD_DATE@${DUTI_BUILD_DATE}@g' \\\n\t\t    ../${DISTDIR}/$$i > ../${DISTDIR}/$$i.tmp; \\\n\t    mv -f ../${DISTDIR}/$$i.tmp ../${DISTDIR}/$$i; \\\n\tdone\n\t(cd .. && tar cvfz ${DISTDIR}.tar.gz ${DISTDIR})\n\tfor c in sha1 rmd160 md5; do \\\n\t    (cd .. && openssl $$c ${DISTDIR}.tar.gz); \\\n\tdone\n\ninstall : all\n\t-mkdir -p ${DESTDIR}${BINDIR}\n\t${INSTALL} -m 0755 -c ${TARGETS} ${DESTDIR}${BINDIR}/\n\t-mkdir -p ${DESTDIR}${MANDIR}/man1\n\t${INSTALL} -m 0644 -c ${MAN1TARGETS} ${DESTDIR}${MANDIR}/man1/\n\nPKGNAME=\tduti-${VERSION}\nPKGDIR=\t\ttmp/duti-installer\nPKGRSRC=\t$(wildcard pkg-resources/*.rtf)\nPKGINFODIR=\ttmp/Info\nPKGINFO=\tpkg-resources/Description.plist pkg-resources/Info.plist\nDEVUTILS=\t/Developer/Applications/Utilities\nPKGMKR=\t\t${DEVUTILS}/PackageMaker.app/Contents/MacOS/packagemaker\n\npackageroot : all\n\t-mkdir -p -m 0755 ${PKGDIR}/${BINDIR}\n\tfor i in ${TARGETS}; do \\\n\t    ${INSTALL} -m 0755 -c $$i ${PKGDIR}/${BINDIR}/; \\\n\tdone\n\t-mkdir -p -m 0755 ${PKGDIR}/${MANDIR}\n\t-mkdir -p -m 0755 ${PKGDIR}/${MANDIR}/man1\n\tfor i in ${MANTARGETS}; do \\\n\t    ${INSTALL} -m 0644 $$i ${PKGDIR}/${MANDIR}/man1/; \\\n\t    sed -e 's@_DUTI_BUILD_DATE@${DUTI_BUILD_DATE}@g' \\\n\t\t    ${PKGDIR}/${MANDIR}/man1/$$i > \\\n\t\t    ${PKGDIR}/${MANDIR}/man1/$$i.tmp; \\\n\t    mv -f ${PKGDIR}/${MANDIR}/man1/$$i.tmp \\\n\t\t    ${PKGDIR}/${MANDIR}/man1/$$i; \\\n\tdone\n\t-mkdir -p -m 0755 ${PKGINFODIR}\n\tfor i in ${PKGINFO}; do \\\n\t    sed -e 's@_DUTI_VERSION@${VERSION}@g' $$i \\\n\t\t\t> ${PKGINFODIR}/`basename $$i`; \\\n\tdone\n\tfor i in ${PKGRSRC}; do \\\n\t    ${INSTALL} -m 0644 -c $$i ${PKGINFODIR}/`basename $$i`; \\\n\tdone\n\tsudo chown -R root:wheel ${PKGDIR}\n\tsudo chgrp admin ${PKGDIR}\n\npkgmaker : packageroot\n\t${PKGMKR} -build -p ../${PKGNAME}.pkg \\\n\t    -f ${PKGDIR} -r ${PKGINFODIR} \\\n\t    -i ${PKGINFODIR}/Info.plist \\\n\t    -d ${PKGINFODIR}/Description.plist\n\t(cd .. && tar cvfz ${PKGNAME}.pkg.tar.gz ${PKGNAME}.pkg)\n\tsudo rm -rf tmp\n\tfor c in sha1 rmd160 md5; do \\\n\t    (cd ..; openssl $$c ${PKGNAME}.pkg.tar.gz); \\\n\tdone\n\npkgbld : packageroot\n\tpkgbuild --root ${PKGDIR} \\\n            --identifier public-domain.mortensen.duti-installer \\\n\t    --version ${VERSION} \\\n\t    ../${PKGNAME}.pkg\n\npkgbldsigned : pkgbld\n\t/bin/mv ../${PKGNAME}.pkg ../${PKGNAME}-unsigned.pkg\n\tproductsign --timestamp --sign \"${INST_KEY}\" ../${PKGNAME}-unsigned.pkg ../${PKGNAME}.pkg\n\npkgcln :\n\t(cd .. && tar cvfz ${PKGNAME}.pkg.tar.gz ${PKGNAME}.pkg)\n\tsudo rm -rf tmp\n\tfor c in sha1 rmd160 md5; do \\\n\t    (cd ..; openssl $$c ${PKGNAME}.pkg.tar.gz); \\\n\tdone\n\npkg : pkgbld pkgcln\n\npkgsigned : pkgbldsigned pkgcln\n\nclean :\n\trm -f *.o a.out core\n\trm -f ${TARGETS}\n\trm -rf tmp\n\ndistclean : clean\n\trm -f config.log config.status config.cache Makefile version.c\n\trm -rf autom4te.cache\n\trm -rf .#*\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.712890625,
          "content": "duti\n====\n\nduti is a command-line utility capable of setting default applications for\nvarious document types on [macOS](https://www.apple.com/macos/), using Apple's\n[Uniform Type\nIdentifiers](https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/understanding_utis/understand_utis_intro/understand_utis_intro.html)\n(UTI). A UTI is a unique string describing the format of a file's content. For\ninstance, a Microsoft Word document has a UTI of `com.microsoft.word.doc`. Using\n`duti`, the user can change which application acts as the default handler for a\ngiven UTI.\n\n\nCompiling\n---------\n\n    autoreconf -i\n    ./configure\n    make\n    sudo make install\n\n\nUsage\n-----\n\n`duti` can read settings from four different sources:\n\n1. standard input\n\n1. a settings file\n\n1. an XML [property list](https://en.wikipedia.org/wiki/Property_list) (plist)\n\n1. command-line arguments.\n\nA settings line, as read in cases 1 and 2, consists of an application's bundle\nID, a UTI, and a string describing what role the application handles for the\ngiven UTI. The process is similar when `duti` processes a plist. If the path\ngiven to `duti` on the command-line is a directory, `duti` will apply settings\nfrom all valid settings files in that directory, excluding files whose names\nbegin with `.` (single dot).\n\n`duti` can also print out the default application information for a given\nextension (`-x`). This feature is based on public domain source code posted\nby Keith Alperin on the heliumfoot.com blog.\n\nSee the man page for additional usage details.\n\n\nExamples\n--------\n\n* Set Safari as the default handler for HTML documents:\n\n    ```sh\n    duti -s com.apple.Safari public.html all\n    ```\n\n* Set TextEdit as the default handler for Word documents:\n\n    ```sh\n    echo 'com.apple.TextEdit   com.microsoft.word.doc all' | duti\n    ```\n\n* Set Finder as the default handler for ftp:// URLs:\n\n    ```sh\n    duti -s com.apple.Finder ftp\n    ```\n\n* Get default application information for .jpg files:\n\n    ```sh\n    duti -x jpg\n\n    # Output\n    Preview\n    /Applications/Preview.app\n    com.apple.Preview\n    ```\n\nSupport\n-------\n\n`duti` is unsupported. You can submit bug reports and feature requests at\nthe duti [GitHub project page](https://github.com/moretension).\n\nRelated\n-------\n[dutis](https://github.com/tsonglew/dutis) is a wrapper around duti, providing an\ninteractive interface to select default applications.\n\nLicense\n-------\n\n`duti` was originally released into the public domain by Andrew Mortensen\nin 2008. It's provided as is without warranties of any kind. You can do\nanything you want with it. If you incorporate some or all of the code into\nanother project, I'd appreciate credit for the work I've done, but that's all.\n\nAndrew Mortensen\nApril 2018\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0087890625,
          "content": "internal\n"
        },
        {
          "name": "aclocal.m4",
          "type": "blob",
          "size": 2.47265625,
          "content": "AC_DEFUN([DUTI_CHECK_SDK],\n[\n    AC_MSG_CHECKING(which SDK to use)\n    AC_ARG_WITH(macosx-sdk,\n\t    AC_HELP_STRING([--with-macosx-sdk=DIR], [path to SDK]),\n\t    macosx_sdk=\"$withval\")\n\n    sdk_path=\"/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs\"\n    macosx_arches=\"-arch i386 -arch x86_64\"\n\n    case \"${host_os}\" in\n\tdarwin8*)\n\t    sdk_path=\"/Developer/SDKs/MacOSX10.4u.sdk\"\n\t    macosx_arches=\"\"\n\t    ;;\n\n\tdarwin9*)\n\t    sdk_path=\"/Developer/SDKs/MacOSX10.5.sdk\"\n\t    ;;\n\n\tdarwin10*)\n\t    sdk_path=\"/Developer/SDKs/MacOSX10.6.sdk\"\n\t    ;;\n\n\tdarwin11*)\n\t    sdk_path=\"${sdk_path}/MacOSX10.7.sdk\"\n\t    ;;\n\n\tdarwin12*)\n\t    sdk_path=\"${sdk_path}/MacOSX10.8.sdk\"\n\t    ;;\n\n\tdarwin13*)\n\t    sdk_path=\"${sdk_path}/MacOSX10.9.sdk\"\n\t    macosx_arches=\"\"\n\t    ;;\n\n\tdarwin14*)\n\t    sdk_path=\"${sdk_path}/MacOSX10.10.sdk\"\n\t    macosx_arches=\"\"\n\t    ;;\n\n\tdarwin15*|darwin16*|darwin17*|darwin18*)\n\t    sdk_path=\"${sdk_path}/MacOSX.sdk\"\n\t    macosx_arches=\"\"\n\t    ;;\n\n\tdarwin19*)\n\t    sdk_path=\"${sdk_path}/MacOSX.sdk\"\n\t    macosx_arches=\"-arch x86_64\"\n\t    ;;\n\n\tdarwin20*|darwin21*|darwin22*)\n\t    sdk_path=\"${sdk_path}/MacOSX.sdk\"\n\t    macosx_arches=\"-arch x86_64 -arch arm64\"\n\t    ;;\n\n\t*)\n\t    AC_MSG_ERROR([${host_os} is not a supported system])\n    esac\n\n    if test -z \"$macosx_sdk\"; then\n\tmacosx_sdk=$sdk_path\n    fi\n\n    AC_SUBST(macosx_arches)\n    AC_SUBST(macosx_sdk)\n    AC_MSG_RESULT($macosx_sdk)\n])\n\nAC_DEFUN([DUTI_CHECK_DEPLOYMENT_TARGET],\n[\n    AC_MSG_CHECKING(Mac OS X deployment target)\n\n    AC_ARG_WITH(macosx-deployment-target,\n\t    AC_HELP_STRING([--with-macosx-deployment-target=VERSION],\n\t    [OS version]), macosx_dep_target=\"$withval\")\n\n    case \"${host_os}\" in\n\tdarwin8*)\n\t    dep_target=\"10.4\"\n\t    ;;\n\n\tdarwin9*)\n\t    dep_target=\"10.5\"\n\t    ;;\n\n\tdarwin10*)\n\t    dep_target=\"10.6\"\n\t    ;;\n\n\tdarwin11*)\n\t    dep_target=\"10.7\"\n\t    ;;\n\n\tdarwin12*)\n\t    dep_target=\"10.8\"\n\t    ;;\n\n\tdarwin13*)\n\t    dep_target=\"10.9\"\n\t    ;;\n\n\tdarwin14*)\n\t    dep_target=\"10.10\"\n\t    ;;\n\n\tdarwin15*)\n\t    dep_target=\"10.11\"\n\t    ;;\n\n\tdarwin16*)\n\t    dep_target=\"10.12\"\n\t    ;;\n\n\tdarwin17*)\n\t    dep_target=\"10.13\"\n\t    ;;\n\n\tdarwin18*)\n\t    dep_target=\"10.14\"\n\t    ;;\n\n\tdarwin19*)\n\t    dep_target=\"10.15\"\n\t    ;;\n\n\tdarwin20*)\n\t    dep_target=\"11\"\n\t    ;;\n\n\tdarwin21*)\n\t    dep_target=\"12\"\n\t    ;;\n\n\tdarwin22*)\n\t    dep_target=\"13\"\n\t    ;;\n\n    esac\n\n    if test -z \"$macosx_dep_target\"; then\n\tmacosx_dep_target=$dep_target\n    fi\n\n    AC_SUBST(macosx_dep_target)\n    AC_MSG_RESULT($macosx_dep_target)\n])\n"
        },
        {
          "name": "config.guess",
          "type": "blob",
          "size": 38.9873046875,
          "content": "#! /bin/sh\n# Attempt to guess a canonical system name.\n#   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n#   2000, 2001, 2002 Free Software Foundation, Inc.\n\ntimestamp='2002-10-21'\n\n# This file is free software; you can redistribute it and/or modify it\n# under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program that contains a\n# configuration script generated by Autoconf, you may include it under\n# the same distribution terms that you use for the rest of that program.\n\n# Originally written by Per Bothner <per@bothner.com>.\n# Please send patches to <config-patches@gnu.org>.  Submit a context\n# diff and a properly formatted ChangeLog entry.\n#\n# This script attempts to guess a canonical system name similar to\n# config.sub.  If it succeeds, it prints the system name on stdout, and\n# exits with 0.  Otherwise, it exits with 1.\n#\n# The plan is that this can be called by configure scripts if you\n# don't specify an explicit build system type.\n\nme=`echo \"$0\" | sed -e 's,.*/,,'`\n\nusage=\"\\\nUsage: $0 [OPTION]\n\nOutput the configuration name of the system \\`$me' is run on.\n\nOperation modes:\n  -h, --help         print this help, then exit\n  -t, --time-stamp   print date of last modification, then exit\n  -v, --version      print version number, then exit\n\nReport bugs and patches to <config-patches@gnu.org>.\"\n\nversion=\"\\\nGNU config.guess ($timestamp)\n\nOriginally written by Per Bothner.\nCopyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001\nFree Software Foundation, Inc.\n\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n\nhelp=\"\nTry \\`$me --help' for more information.\"\n\n# Parse command line\nwhile test $# -gt 0 ; do\n  case $1 in\n    --time-stamp | --time* | -t )\n       echo \"$timestamp\" ; exit 0 ;;\n    --version | -v )\n       echo \"$version\" ; exit 0 ;;\n    --help | --h* | -h )\n       echo \"$usage\"; exit 0 ;;\n    -- )     # Stop option processing\n       shift; break ;;\n    - )\t# Use stdin as input.\n       break ;;\n    -* )\n       echo \"$me: invalid option $1$help\" >&2\n       exit 1 ;;\n    * )\n       break ;;\n  esac\ndone\n\nif test $# != 0; then\n  echo \"$me: too many arguments$help\" >&2\n  exit 1\nfi\n\ntrap 'exit 1' 1 2 15\n\n# CC_FOR_BUILD -- compiler used by this script. Note that the use of a\n# compiler to aid in system detection is discouraged as it requires\n# temporary files to be created and, as you can see below, it is a\n# headache to deal with in a portable fashion.\n\n# Historically, `CC_FOR_BUILD' used to be named `HOST_CC'. We still\n# use `HOST_CC' if defined, but it is deprecated.\n\n# This shell variable is my proudest work .. or something. --bje\n\nset_cc_for_build='tmpdir=${TMPDIR-/tmp}/config-guess-$$ ;\n(old=`umask` && umask 077 && mkdir $tmpdir && umask $old && unset old)\n   || (echo \"$me: cannot create $tmpdir\" >&2 && exit 1) ;\ndummy=$tmpdir/dummy ;\nfiles=\"$dummy.c $dummy.o $dummy.rel $dummy\" ;\ntrap '\"'\"'rm -f $files; rmdir $tmpdir; exit 1'\"'\"' 1 2 15 ;\ncase $CC_FOR_BUILD,$HOST_CC,$CC in\n ,,)    echo \"int x;\" > $dummy.c ;\n\tfor c in cc gcc c89 c99 ; do\n\t  if ($c -c -o $dummy.o $dummy.c) >/dev/null 2>&1 ; then\n\t     CC_FOR_BUILD=\"$c\"; break ;\n\t  fi ;\n\tdone ;\n\trm -f $files ;\n\tif test x\"$CC_FOR_BUILD\" = x ; then\n\t  CC_FOR_BUILD=no_compiler_found ;\n\tfi\n\t;;\n ,,*)   CC_FOR_BUILD=$CC ;;\n ,*,*)  CC_FOR_BUILD=$HOST_CC ;;\nesac ;\nunset files'\n\n# This is needed to find uname on a Pyramid OSx when run in the BSD universe.\n# (ghazi@noc.rutgers.edu 1994-08-24)\nif (test -f /.attbin/uname) >/dev/null 2>&1 ; then\n\tPATH=$PATH:/.attbin ; export PATH\nfi\n\nUNAME_MACHINE=`(uname -m) 2>/dev/null` || UNAME_MACHINE=unknown\nUNAME_RELEASE=`(uname -r) 2>/dev/null` || UNAME_RELEASE=unknown\nUNAME_SYSTEM=`(uname -s) 2>/dev/null`  || UNAME_SYSTEM=unknown\nUNAME_VERSION=`(uname -v) 2>/dev/null` || UNAME_VERSION=unknown\n\n# Note: order is significant - the case branches are not exclusive.\n\ncase \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n    *:NetBSD:*:*)\n\t# NetBSD (nbsd) targets should (where applicable) match one or\n\t# more of the tupples: *-*-netbsdelf*, *-*-netbsdaout*,\n\t# *-*-netbsdecoff* and *-*-netbsd*.  For targets that recently\n\t# switched to ELF, *-*-netbsd* would select the old\n\t# object file format.  This provides both forward\n\t# compatibility and a consistent mechanism for selecting the\n\t# object file format.\n\t#\n\t# Note: NetBSD doesn't particularly care about the vendor\n\t# portion of the name.  We always set it to \"unknown\".\n\tsysctl=\"sysctl -n hw.machine_arch\"\n\tUNAME_MACHINE_ARCH=`(/sbin/$sysctl 2>/dev/null || \\\n\t    /usr/sbin/$sysctl 2>/dev/null || echo unknown)`\n\tcase \"${UNAME_MACHINE_ARCH}\" in\n\t    armeb) machine=armeb-unknown ;;\n\t    arm*) machine=arm-unknown ;;\n\t    sh3el) machine=shl-unknown ;;\n\t    sh3eb) machine=sh-unknown ;;\n\t    *) machine=${UNAME_MACHINE_ARCH}-unknown ;;\n\tesac\n\t# The Operating System including object format, if it has switched\n\t# to ELF recently, or will in the future.\n\tcase \"${UNAME_MACHINE_ARCH}\" in\n\t    arm*|i386|m68k|ns32k|sh3*|sparc|vax)\n\t\teval $set_cc_for_build\n\t\tif echo __ELF__ | $CC_FOR_BUILD -E - 2>/dev/null \\\n\t\t\t| grep __ELF__ >/dev/null\n\t\tthen\n\t\t    # Once all utilities can be ECOFF (netbsdecoff) or a.out (netbsdaout).\n\t\t    # Return netbsd for either.  FIX?\n\t\t    os=netbsd\n\t\telse\n\t\t    os=netbsdelf\n\t\tfi\n\t\t;;\n\t    *)\n\t        os=netbsd\n\t\t;;\n\tesac\n\t# The OS release\n\trelease=`echo ${UNAME_RELEASE}|sed -e 's/[-_].*/\\./'`\n\t# Since CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM:\n\t# contains redundant information, the shorter form:\n\t# CPU_TYPE-MANUFACTURER-OPERATING_SYSTEM is used.\n\techo \"${machine}-${os}${release}\"\n\texit 0 ;;\n    amiga:OpenBSD:*:*)\n\techo m68k-unknown-openbsd${UNAME_RELEASE}\n\texit 0 ;;\n    arc:OpenBSD:*:*)\n\techo mipsel-unknown-openbsd${UNAME_RELEASE}\n\texit 0 ;;\n    hp300:OpenBSD:*:*)\n\techo m68k-unknown-openbsd${UNAME_RELEASE}\n\texit 0 ;;\n    mac68k:OpenBSD:*:*)\n\techo m68k-unknown-openbsd${UNAME_RELEASE}\n\texit 0 ;;\n    macppc:OpenBSD:*:*)\n\techo powerpc-unknown-openbsd${UNAME_RELEASE}\n\texit 0 ;;\n    mvme68k:OpenBSD:*:*)\n\techo m68k-unknown-openbsd${UNAME_RELEASE}\n\texit 0 ;;\n    mvme88k:OpenBSD:*:*)\n\techo m88k-unknown-openbsd${UNAME_RELEASE}\n\texit 0 ;;\n    mvmeppc:OpenBSD:*:*)\n\techo powerpc-unknown-openbsd${UNAME_RELEASE}\n\texit 0 ;;\n    pmax:OpenBSD:*:*)\n\techo mipsel-unknown-openbsd${UNAME_RELEASE}\n\texit 0 ;;\n    sgi:OpenBSD:*:*)\n\techo mipseb-unknown-openbsd${UNAME_RELEASE}\n\texit 0 ;;\n    sun3:OpenBSD:*:*)\n\techo m68k-unknown-openbsd${UNAME_RELEASE}\n\texit 0 ;;\n    wgrisc:OpenBSD:*:*)\n\techo mipsel-unknown-openbsd${UNAME_RELEASE}\n\texit 0 ;;\n    *:OpenBSD:*:*)\n\techo ${UNAME_MACHINE}-unknown-openbsd${UNAME_RELEASE}\n\texit 0 ;;\n    alpha:OSF1:*:*)\n\tif test $UNAME_RELEASE = \"V4.0\"; then\n\t\tUNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $3}'`\n\tfi\n\t# A Vn.n version is a released version.\n\t# A Tn.n version is a released field test version.\n\t# A Xn.n version is an unreleased experimental baselevel.\n\t# 1.2 uses \"1.2\" for uname -r.\n\teval $set_cc_for_build\n\tcat <<EOF >$dummy.s\n\t.data\n\\$Lformat:\n\t.byte 37,100,45,37,120,10,0\t# \"%d-%x\\n\"\n\n\t.text\n\t.globl main\n\t.align 4\n\t.ent main\nmain:\n\t.frame \\$30,16,\\$26,0\n\tldgp \\$29,0(\\$27)\n\t.prologue 1\n\t.long 0x47e03d80 # implver \\$0\n\tlda \\$2,-1\n\t.long 0x47e20c21 # amask \\$2,\\$1\n\tlda \\$16,\\$Lformat\n\tmov \\$0,\\$17\n\tnot \\$1,\\$18\n\tjsr \\$26,printf\n\tldgp \\$29,0(\\$26)\n\tmov 0,\\$16\n\tjsr \\$26,exit\n\t.end main\nEOF\n\t$CC_FOR_BUILD -o $dummy $dummy.s 2>/dev/null\n\tif test \"$?\" = 0 ; then\n\t\tcase `$dummy` in\n\t\t\t0-0)\n\t\t\t\tUNAME_MACHINE=\"alpha\"\n\t\t\t\t;;\n\t\t\t1-0)\n\t\t\t\tUNAME_MACHINE=\"alphaev5\"\n\t\t\t\t;;\n\t\t\t1-1)\n\t\t\t\tUNAME_MACHINE=\"alphaev56\"\n\t\t\t\t;;\n\t\t\t1-101)\n\t\t\t\tUNAME_MACHINE=\"alphapca56\"\n\t\t\t\t;;\n\t\t\t2-303)\n\t\t\t\tUNAME_MACHINE=\"alphaev6\"\n\t\t\t\t;;\n\t\t\t2-307)\n\t\t\t\tUNAME_MACHINE=\"alphaev67\"\n\t\t\t\t;;\n\t\t\t2-1307)\n\t\t\t\tUNAME_MACHINE=\"alphaev68\"\n\t\t\t\t;;\n\t\t\t3-1307)\n\t\t\t\tUNAME_MACHINE=\"alphaev7\"\n\t\t\t\t;;\n\t\tesac\n\tfi\n\trm -f $dummy.s $dummy && rmdir $tmpdir\n\techo ${UNAME_MACHINE}-dec-osf`echo ${UNAME_RELEASE} | sed -e 's/^[VTX]//' | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n\texit 0 ;;\n    Alpha\\ *:Windows_NT*:*)\n\t# How do we know it's Interix rather than the generic POSIX subsystem?\n\t# Should we change UNAME_MACHINE based on the output of uname instead\n\t# of the specific Alpha model?\n\techo alpha-pc-interix\n\texit 0 ;;\n    21064:Windows_NT:50:3)\n\techo alpha-dec-winnt3.5\n\texit 0 ;;\n    Amiga*:UNIX_System_V:4.0:*)\n\techo m68k-unknown-sysv4\n\texit 0;;\n    *:[Aa]miga[Oo][Ss]:*:*)\n\techo ${UNAME_MACHINE}-unknown-amigaos\n\texit 0 ;;\n    *:[Mm]orph[Oo][Ss]:*:*)\n\techo ${UNAME_MACHINE}-unknown-morphos\n\texit 0 ;;\n    *:OS/390:*:*)\n\techo i370-ibm-openedition\n\texit 0 ;;\n    arm:RISC*:1.[012]*:*|arm:riscix:1.[012]*:*)\n\techo arm-acorn-riscix${UNAME_RELEASE}\n\texit 0;;\n    SR2?01:HI-UX/MPP:*:* | SR8000:HI-UX/MPP:*:*)\n\techo hppa1.1-hitachi-hiuxmpp\n\texit 0;;\n    Pyramid*:OSx*:*:* | MIS*:OSx*:*:* | MIS*:SMP_DC-OSx*:*:*)\n\t# akee@wpdis03.wpafb.af.mil (Earle F. Ake) contributed MIS and NILE.\n\tif test \"`(/bin/universe) 2>/dev/null`\" = att ; then\n\t\techo pyramid-pyramid-sysv3\n\telse\n\t\techo pyramid-pyramid-bsd\n\tfi\n\texit 0 ;;\n    NILE*:*:*:dcosx)\n\techo pyramid-pyramid-svr4\n\texit 0 ;;\n    DRS?6000:UNIX_SV:4.2*:7*)\n\tcase `/usr/bin/uname -p` in\n\t    sparc) echo sparc-icl-nx7 && exit 0 ;;\n\tesac ;;\n    sun4H:SunOS:5.*:*)\n\techo sparc-hal-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n\texit 0 ;;\n    sun4*:SunOS:5.*:* | tadpole*:SunOS:5.*:*)\n\techo sparc-sun-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n\texit 0 ;;\n    i86pc:SunOS:5.*:*)\n\techo i386-pc-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n\texit 0 ;;\n    sun4*:SunOS:6*:*)\n\t# According to config.sub, this is the proper way to canonicalize\n\t# SunOS6.  Hard to guess exactly what SunOS6 will be like, but\n\t# it's likely to be more like Solaris than SunOS4.\n\techo sparc-sun-solaris3`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n\texit 0 ;;\n    sun4*:SunOS:*:*)\n\tcase \"`/usr/bin/arch -k`\" in\n\t    Series*|S4*)\n\t\tUNAME_RELEASE=`uname -v`\n\t\t;;\n\tesac\n\t# Japanese Language versions have a version number like `4.1.3-JL'.\n\techo sparc-sun-sunos`echo ${UNAME_RELEASE}|sed -e 's/-/_/'`\n\texit 0 ;;\n    sun3*:SunOS:*:*)\n\techo m68k-sun-sunos${UNAME_RELEASE}\n\texit 0 ;;\n    sun*:*:4.2BSD:*)\n\tUNAME_RELEASE=`(sed 1q /etc/motd | awk '{print substr($5,1,3)}') 2>/dev/null`\n\ttest \"x${UNAME_RELEASE}\" = \"x\" && UNAME_RELEASE=3\n\tcase \"`/bin/arch`\" in\n\t    sun3)\n\t\techo m68k-sun-sunos${UNAME_RELEASE}\n\t\t;;\n\t    sun4)\n\t\techo sparc-sun-sunos${UNAME_RELEASE}\n\t\t;;\n\tesac\n\texit 0 ;;\n    aushp:SunOS:*:*)\n\techo sparc-auspex-sunos${UNAME_RELEASE}\n\texit 0 ;;\n    # The situation for MiNT is a little confusing.  The machine name\n    # can be virtually everything (everything which is not\n    # \"atarist\" or \"atariste\" at least should have a processor\n    # > m68000).  The system name ranges from \"MiNT\" over \"FreeMiNT\"\n    # to the lowercase version \"mint\" (or \"freemint\").  Finally\n    # the system name \"TOS\" denotes a system which is actually not\n    # MiNT.  But MiNT is downward compatible to TOS, so this should\n    # be no problem.\n    atarist[e]:*MiNT:*:* | atarist[e]:*mint:*:* | atarist[e]:*TOS:*:*)\n        echo m68k-atari-mint${UNAME_RELEASE}\n\texit 0 ;;\n    atari*:*MiNT:*:* | atari*:*mint:*:* | atarist[e]:*TOS:*:*)\n\techo m68k-atari-mint${UNAME_RELEASE}\n        exit 0 ;;\n    *falcon*:*MiNT:*:* | *falcon*:*mint:*:* | *falcon*:*TOS:*:*)\n        echo m68k-atari-mint${UNAME_RELEASE}\n\texit 0 ;;\n    milan*:*MiNT:*:* | milan*:*mint:*:* | *milan*:*TOS:*:*)\n        echo m68k-milan-mint${UNAME_RELEASE}\n        exit 0 ;;\n    hades*:*MiNT:*:* | hades*:*mint:*:* | *hades*:*TOS:*:*)\n        echo m68k-hades-mint${UNAME_RELEASE}\n        exit 0 ;;\n    *:*MiNT:*:* | *:*mint:*:* | *:*TOS:*:*)\n        echo m68k-unknown-mint${UNAME_RELEASE}\n        exit 0 ;;\n    powerpc:machten:*:*)\n\techo powerpc-apple-machten${UNAME_RELEASE}\n\texit 0 ;;\n    RISC*:Mach:*:*)\n\techo mips-dec-mach_bsd4.3\n\texit 0 ;;\n    RISC*:ULTRIX:*:*)\n\techo mips-dec-ultrix${UNAME_RELEASE}\n\texit 0 ;;\n    VAX*:ULTRIX*:*:*)\n\techo vax-dec-ultrix${UNAME_RELEASE}\n\texit 0 ;;\n    2020:CLIX:*:* | 2430:CLIX:*:*)\n\techo clipper-intergraph-clix${UNAME_RELEASE}\n\texit 0 ;;\n    mips:*:*:UMIPS | mips:*:*:RISCos)\n\teval $set_cc_for_build\n\tsed 's/^\t//' << EOF >$dummy.c\n#ifdef __cplusplus\n#include <stdio.h>  /* for printf() prototype */\n\tint main (int argc, char *argv[]) {\n#else\n\tint main (argc, argv) int argc; char *argv[]; {\n#endif\n\t#if defined (host_mips) && defined (MIPSEB)\n\t#if defined (SYSTYPE_SYSV)\n\t  printf (\"mips-mips-riscos%ssysv\\n\", argv[1]); exit (0);\n\t#endif\n\t#if defined (SYSTYPE_SVR4)\n\t  printf (\"mips-mips-riscos%ssvr4\\n\", argv[1]); exit (0);\n\t#endif\n\t#if defined (SYSTYPE_BSD43) || defined(SYSTYPE_BSD)\n\t  printf (\"mips-mips-riscos%sbsd\\n\", argv[1]); exit (0);\n\t#endif\n\t#endif\n\t  exit (-1);\n\t}\nEOF\n\t$CC_FOR_BUILD -o $dummy $dummy.c \\\n\t  && $dummy `echo \"${UNAME_RELEASE}\" | sed -n 's/\\([0-9]*\\).*/\\1/p'` \\\n\t  && rm -f $dummy.c $dummy && rmdir $tmpdir && exit 0\n\trm -f $dummy.c $dummy && rmdir $tmpdir\n\techo mips-mips-riscos${UNAME_RELEASE}\n\texit 0 ;;\n    Motorola:PowerMAX_OS:*:*)\n\techo powerpc-motorola-powermax\n\texit 0 ;;\n    Motorola:*:4.3:PL8-*)\n\techo powerpc-harris-powermax\n\texit 0 ;;\n    Night_Hawk:*:*:PowerMAX_OS)\n\techo powerpc-harris-powermax\n\texit 0 ;;\n    Night_Hawk:Power_UNIX:*:*)\n\techo powerpc-harris-powerunix\n\texit 0 ;;\n    m88k:CX/UX:7*:*)\n\techo m88k-harris-cxux7\n\texit 0 ;;\n    m88k:*:4*:R4*)\n\techo m88k-motorola-sysv4\n\texit 0 ;;\n    m88k:*:3*:R3*)\n\techo m88k-motorola-sysv3\n\texit 0 ;;\n    AViiON:dgux:*:*)\n        # DG/UX returns AViiON for all architectures\n        UNAME_PROCESSOR=`/usr/bin/uname -p`\n\tif [ $UNAME_PROCESSOR = mc88100 ] || [ $UNAME_PROCESSOR = mc88110 ]\n\tthen\n\t    if [ ${TARGET_BINARY_INTERFACE}x = m88kdguxelfx ] || \\\n\t       [ ${TARGET_BINARY_INTERFACE}x = x ]\n\t    then\n\t\techo m88k-dg-dgux${UNAME_RELEASE}\n\t    else\n\t\techo m88k-dg-dguxbcs${UNAME_RELEASE}\n\t    fi\n\telse\n\t    echo i586-dg-dgux${UNAME_RELEASE}\n\tfi\n \texit 0 ;;\n    M88*:DolphinOS:*:*)\t# DolphinOS (SVR3)\n\techo m88k-dolphin-sysv3\n\texit 0 ;;\n    M88*:*:R3*:*)\n\t# Delta 88k system running SVR3\n\techo m88k-motorola-sysv3\n\texit 0 ;;\n    XD88*:*:*:*) # Tektronix XD88 system running UTekV (SVR3)\n\techo m88k-tektronix-sysv3\n\texit 0 ;;\n    Tek43[0-9][0-9]:UTek:*:*) # Tektronix 4300 system running UTek (BSD)\n\techo m68k-tektronix-bsd\n\texit 0 ;;\n    *:IRIX*:*:*)\n\techo mips-sgi-irix`echo ${UNAME_RELEASE}|sed -e 's/-/_/g'`\n\texit 0 ;;\n    ????????:AIX?:[12].1:2)   # AIX 2.2.1 or AIX 2.1.1 is RT/PC AIX.\n\techo romp-ibm-aix      # uname -m gives an 8 hex-code CPU id\n\texit 0 ;;              # Note that: echo \"'`uname -s`'\" gives 'AIX '\n    i*86:AIX:*:*)\n\techo i386-ibm-aix\n\texit 0 ;;\n    ia64:AIX:*:*)\n\tif [ -x /usr/bin/oslevel ] ; then\n\t\tIBM_REV=`/usr/bin/oslevel`\n\telse\n\t\tIBM_REV=${UNAME_VERSION}.${UNAME_RELEASE}\n\tfi\n\techo ${UNAME_MACHINE}-ibm-aix${IBM_REV}\n\texit 0 ;;\n    *:AIX:2:3)\n\tif grep bos325 /usr/include/stdio.h >/dev/null 2>&1; then\n\t\teval $set_cc_for_build\n\t\tsed 's/^\t\t//' << EOF >$dummy.c\n\t\t#include <sys/systemcfg.h>\n\n\t\tmain()\n\t\t\t{\n\t\t\tif (!__power_pc())\n\t\t\t\texit(1);\n\t\t\tputs(\"powerpc-ibm-aix3.2.5\");\n\t\t\texit(0);\n\t\t\t}\nEOF\n\t\t$CC_FOR_BUILD -o $dummy $dummy.c && $dummy && rm -f $dummy.c $dummy && rmdir $tmpdir && exit 0\n\t\trm -f $dummy.c $dummy && rmdir $tmpdir\n\t\techo rs6000-ibm-aix3.2.5\n\telif grep bos324 /usr/include/stdio.h >/dev/null 2>&1; then\n\t\techo rs6000-ibm-aix3.2.4\n\telse\n\t\techo rs6000-ibm-aix3.2\n\tfi\n\texit 0 ;;\n    *:AIX:*:[45])\n\tIBM_CPU_ID=`/usr/sbin/lsdev -C -c processor -S available | sed 1q | awk '{ print $1 }'`\n\tif /usr/sbin/lsattr -El ${IBM_CPU_ID} | grep ' POWER' >/dev/null 2>&1; then\n\t\tIBM_ARCH=rs6000\n\telse\n\t\tIBM_ARCH=powerpc\n\tfi\n\tif [ -x /usr/bin/oslevel ] ; then\n\t\tIBM_REV=`/usr/bin/oslevel`\n\telse\n\t\tIBM_REV=${UNAME_VERSION}.${UNAME_RELEASE}\n\tfi\n\techo ${IBM_ARCH}-ibm-aix${IBM_REV}\n\texit 0 ;;\n    *:AIX:*:*)\n\techo rs6000-ibm-aix\n\texit 0 ;;\n    ibmrt:4.4BSD:*|romp-ibm:BSD:*)\n\techo romp-ibm-bsd4.4\n\texit 0 ;;\n    ibmrt:*BSD:*|romp-ibm:BSD:*)            # covers RT/PC BSD and\n\techo romp-ibm-bsd${UNAME_RELEASE}   # 4.3 with uname added to\n\texit 0 ;;                           # report: romp-ibm BSD 4.3\n    *:BOSX:*:*)\n\techo rs6000-bull-bosx\n\texit 0 ;;\n    DPX/2?00:B.O.S.:*:*)\n\techo m68k-bull-sysv3\n\texit 0 ;;\n    9000/[34]??:4.3bsd:1.*:*)\n\techo m68k-hp-bsd\n\texit 0 ;;\n    hp300:4.4BSD:*:* | 9000/[34]??:4.3bsd:2.*:*)\n\techo m68k-hp-bsd4.4\n\texit 0 ;;\n    9000/[34678]??:HP-UX:*:*)\n\tHPUX_REV=`echo ${UNAME_RELEASE}|sed -e 's/[^.]*.[0B]*//'`\n\tcase \"${UNAME_MACHINE}\" in\n\t    9000/31? )            HP_ARCH=m68000 ;;\n\t    9000/[34]?? )         HP_ARCH=m68k ;;\n\t    9000/[678][0-9][0-9])\n\t\tif [ -x /usr/bin/getconf ]; then\n\t\t    sc_cpu_version=`/usr/bin/getconf SC_CPU_VERSION 2>/dev/null`\n                    sc_kernel_bits=`/usr/bin/getconf SC_KERNEL_BITS 2>/dev/null`\n                    case \"${sc_cpu_version}\" in\n                      523) HP_ARCH=\"hppa1.0\" ;; # CPU_PA_RISC1_0\n                      528) HP_ARCH=\"hppa1.1\" ;; # CPU_PA_RISC1_1\n                      532)                      # CPU_PA_RISC2_0\n                        case \"${sc_kernel_bits}\" in\n                          32) HP_ARCH=\"hppa2.0n\" ;;\n                          64) HP_ARCH=\"hppa2.0w\" ;;\n\t\t\t  '') HP_ARCH=\"hppa2.0\" ;;   # HP-UX 10.20\n                        esac ;;\n                    esac\n\t\tfi\n\t\tif [ \"${HP_ARCH}\" = \"\" ]; then\n\t\t    eval $set_cc_for_build\n\t\t    sed 's/^              //' << EOF >$dummy.c\n\n              #define _HPUX_SOURCE\n              #include <stdlib.h>\n              #include <unistd.h>\n\n              int main ()\n              {\n              #if defined(_SC_KERNEL_BITS)\n                  long bits = sysconf(_SC_KERNEL_BITS);\n              #endif\n                  long cpu  = sysconf (_SC_CPU_VERSION);\n\n                  switch (cpu)\n              \t{\n              \tcase CPU_PA_RISC1_0: puts (\"hppa1.0\"); break;\n              \tcase CPU_PA_RISC1_1: puts (\"hppa1.1\"); break;\n              \tcase CPU_PA_RISC2_0:\n              #if defined(_SC_KERNEL_BITS)\n              \t    switch (bits)\n              \t\t{\n              \t\tcase 64: puts (\"hppa2.0w\"); break;\n              \t\tcase 32: puts (\"hppa2.0n\"); break;\n              \t\tdefault: puts (\"hppa2.0\"); break;\n              \t\t} break;\n              #else  /* !defined(_SC_KERNEL_BITS) */\n              \t    puts (\"hppa2.0\"); break;\n              #endif\n              \tdefault: puts (\"hppa1.0\"); break;\n              \t}\n                  exit (0);\n              }\nEOF\n\t\t    (CCOPTS= $CC_FOR_BUILD -o $dummy $dummy.c 2>/dev/null) && HP_ARCH=`$dummy`\n\t\t    if test -z \"$HP_ARCH\"; then HP_ARCH=hppa; fi\n\t\t    rm -f $dummy.c $dummy && rmdir $tmpdir\n\t\tfi ;;\n\tesac\n\techo ${HP_ARCH}-hp-hpux${HPUX_REV}\n\texit 0 ;;\n    ia64:HP-UX:*:*)\n\tHPUX_REV=`echo ${UNAME_RELEASE}|sed -e 's/[^.]*.[0B]*//'`\n\techo ia64-hp-hpux${HPUX_REV}\n\texit 0 ;;\n    3050*:HI-UX:*:*)\n\teval $set_cc_for_build\n\tsed 's/^\t//' << EOF >$dummy.c\n\t#include <unistd.h>\n\tint\n\tmain ()\n\t{\n\t  long cpu = sysconf (_SC_CPU_VERSION);\n\t  /* The order matters, because CPU_IS_HP_MC68K erroneously returns\n\t     true for CPU_PA_RISC1_0.  CPU_IS_PA_RISC returns correct\n\t     results, however.  */\n\t  if (CPU_IS_PA_RISC (cpu))\n\t    {\n\t      switch (cpu)\n\t\t{\n\t\t  case CPU_PA_RISC1_0: puts (\"hppa1.0-hitachi-hiuxwe2\"); break;\n\t\t  case CPU_PA_RISC1_1: puts (\"hppa1.1-hitachi-hiuxwe2\"); break;\n\t\t  case CPU_PA_RISC2_0: puts (\"hppa2.0-hitachi-hiuxwe2\"); break;\n\t\t  default: puts (\"hppa-hitachi-hiuxwe2\"); break;\n\t\t}\n\t    }\n\t  else if (CPU_IS_HP_MC68K (cpu))\n\t    puts (\"m68k-hitachi-hiuxwe2\");\n\t  else puts (\"unknown-hitachi-hiuxwe2\");\n\t  exit (0);\n\t}\nEOF\n\t$CC_FOR_BUILD -o $dummy $dummy.c && $dummy && rm -f $dummy.c $dummy && rmdir $tmpdir && exit 0\n\trm -f $dummy.c $dummy && rmdir $tmpdir\n\techo unknown-hitachi-hiuxwe2\n\texit 0 ;;\n    9000/7??:4.3bsd:*:* | 9000/8?[79]:4.3bsd:*:* )\n\techo hppa1.1-hp-bsd\n\texit 0 ;;\n    9000/8??:4.3bsd:*:*)\n\techo hppa1.0-hp-bsd\n\texit 0 ;;\n    *9??*:MPE/iX:*:* | *3000*:MPE/iX:*:*)\n\techo hppa1.0-hp-mpeix\n\texit 0 ;;\n    hp7??:OSF1:*:* | hp8?[79]:OSF1:*:* )\n\techo hppa1.1-hp-osf\n\texit 0 ;;\n    hp8??:OSF1:*:*)\n\techo hppa1.0-hp-osf\n\texit 0 ;;\n    i*86:OSF1:*:*)\n\tif [ -x /usr/sbin/sysversion ] ; then\n\t    echo ${UNAME_MACHINE}-unknown-osf1mk\n\telse\n\t    echo ${UNAME_MACHINE}-unknown-osf1\n\tfi\n\texit 0 ;;\n    parisc*:Lites*:*:*)\n\techo hppa1.1-hp-lites\n\texit 0 ;;\n    C1*:ConvexOS:*:* | convex:ConvexOS:C1*:*)\n\techo c1-convex-bsd\n        exit 0 ;;\n    C2*:ConvexOS:*:* | convex:ConvexOS:C2*:*)\n\tif getsysinfo -f scalar_acc\n\tthen echo c32-convex-bsd\n\telse echo c2-convex-bsd\n\tfi\n        exit 0 ;;\n    C34*:ConvexOS:*:* | convex:ConvexOS:C34*:*)\n\techo c34-convex-bsd\n        exit 0 ;;\n    C38*:ConvexOS:*:* | convex:ConvexOS:C38*:*)\n\techo c38-convex-bsd\n        exit 0 ;;\n    C4*:ConvexOS:*:* | convex:ConvexOS:C4*:*)\n\techo c4-convex-bsd\n        exit 0 ;;\n    CRAY*Y-MP:*:*:*)\n\techo ymp-cray-unicos${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n\texit 0 ;;\n    CRAY*[A-Z]90:*:*:*)\n\techo ${UNAME_MACHINE}-cray-unicos${UNAME_RELEASE} \\\n\t| sed -e 's/CRAY.*\\([A-Z]90\\)/\\1/' \\\n\t      -e y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/ \\\n\t      -e 's/\\.[^.]*$/.X/'\n\texit 0 ;;\n    CRAY*TS:*:*:*)\n\techo t90-cray-unicos${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n\texit 0 ;;\n    CRAY*T3D:*:*:*)\n\techo alpha-cray-unicosmk${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n\texit 0 ;;\n    CRAY*T3E:*:*:*)\n\techo alphaev5-cray-unicosmk${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n\texit 0 ;;\n    CRAY*SV1:*:*:*)\n\techo sv1-cray-unicos${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n\texit 0 ;;\n    F30[01]:UNIX_System_V:*:* | F700:UNIX_System_V:*:*)\n\tFUJITSU_PROC=`uname -m | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n        FUJITSU_SYS=`uname -p | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz' | sed -e 's/\\///'`\n        FUJITSU_REL=`echo ${UNAME_RELEASE} | sed -e 's/ /_/'`\n        echo \"${FUJITSU_PROC}-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\"\n        exit 0 ;;\n    i*86:BSD/386:*:* | i*86:BSD/OS:*:* | *:Ascend\\ Embedded/OS:*:*)\n\techo ${UNAME_MACHINE}-pc-bsdi${UNAME_RELEASE}\n\texit 0 ;;\n    sparc*:BSD/OS:*:*)\n\techo sparc-unknown-bsdi${UNAME_RELEASE}\n\texit 0 ;;\n    *:BSD/OS:*:*)\n\techo ${UNAME_MACHINE}-unknown-bsdi${UNAME_RELEASE}\n\texit 0 ;;\n    *:FreeBSD:*:*)\n\t# Determine whether the default compiler uses glibc.\n\teval $set_cc_for_build\n\tsed 's/^\t//' << EOF >$dummy.c\n\t#include <features.h>\n\t#if __GLIBC__ >= 2\n\tLIBC=gnu\n\t#else\n\tLIBC=\n\t#endif\nEOF\n\teval `$CC_FOR_BUILD -E $dummy.c 2>/dev/null | grep ^LIBC=`\n\trm -f $dummy.c && rmdir $tmpdir\n\techo ${UNAME_MACHINE}-unknown-freebsd`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`${LIBC:+-$LIBC}\n\texit 0 ;;\n    i*:CYGWIN*:*)\n\techo ${UNAME_MACHINE}-pc-cygwin\n\texit 0 ;;\n    i*:MINGW*:*)\n\techo ${UNAME_MACHINE}-pc-mingw32\n\texit 0 ;;\n    i*:PW*:*)\n\techo ${UNAME_MACHINE}-pc-pw32\n\texit 0 ;;\n    x86:Interix*:3*)\n\techo i386-pc-interix3\n\texit 0 ;;\n    i*:Windows_NT*:* | Pentium*:Windows_NT*:*)\n\t# How do we know it's Interix rather than the generic POSIX subsystem?\n\t# It also conflicts with pre-2.0 versions of AT&T UWIN. Should we\n\t# UNAME_MACHINE based on the output of uname instead of i386?\n\techo i386-pc-interix\n\texit 0 ;;\n    i*:UWIN*:*)\n\techo ${UNAME_MACHINE}-pc-uwin\n\texit 0 ;;\n    p*:CYGWIN*:*)\n\techo powerpcle-unknown-cygwin\n\texit 0 ;;\n    prep*:SunOS:5.*:*)\n\techo powerpcle-unknown-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n\texit 0 ;;\n    *:GNU:*:*)\n\techo `echo ${UNAME_MACHINE}|sed -e 's,[-/].*$,,'`-unknown-gnu`echo ${UNAME_RELEASE}|sed -e 's,/.*$,,'`\n\texit 0 ;;\n    i*86:Minix:*:*)\n\techo ${UNAME_MACHINE}-pc-minix\n\texit 0 ;;\n    arm*:Linux:*:*)\n\techo ${UNAME_MACHINE}-unknown-linux-gnu\n\texit 0 ;;\n    ia64:Linux:*:*)\n\techo ${UNAME_MACHINE}-unknown-linux-gnu\n\texit 0 ;;\n    m68*:Linux:*:*)\n\techo ${UNAME_MACHINE}-unknown-linux-gnu\n\texit 0 ;;\n    mips:Linux:*:*)\n\teval $set_cc_for_build\n\tsed 's/^\t//' << EOF >$dummy.c\n\t#undef CPU\n\t#undef mips\n\t#undef mipsel\n\t#if defined(__MIPSEL__) || defined(__MIPSEL) || defined(_MIPSEL) || defined(MIPSEL)\n\tCPU=mipsel\n\t#else\n\t#if defined(__MIPSEB__) || defined(__MIPSEB) || defined(_MIPSEB) || defined(MIPSEB)\n\tCPU=mips\n\t#else\n\tCPU=\n\t#endif\n\t#endif\nEOF\n\teval `$CC_FOR_BUILD -E $dummy.c 2>/dev/null | grep ^CPU=`\n\trm -f $dummy.c && rmdir $tmpdir\n\ttest x\"${CPU}\" != x && echo \"${CPU}-pc-linux-gnu\" && exit 0\n\t;;\n    ppc:Linux:*:*)\n\techo powerpc-unknown-linux-gnu\n\texit 0 ;;\n    ppc64:Linux:*:*)\n\techo powerpc64-unknown-linux-gnu\n\texit 0 ;;\n    alpha:Linux:*:*)\n\tcase `sed -n '/^cpu model/s/^.*: \\(.*\\)/\\1/p' < /proc/cpuinfo` in\n\t  EV5)   UNAME_MACHINE=alphaev5 ;;\n\t  EV56)  UNAME_MACHINE=alphaev56 ;;\n\t  PCA56) UNAME_MACHINE=alphapca56 ;;\n\t  PCA57) UNAME_MACHINE=alphapca56 ;;\n\t  EV6)   UNAME_MACHINE=alphaev6 ;;\n\t  EV67)  UNAME_MACHINE=alphaev67 ;;\n\t  EV68*) UNAME_MACHINE=alphaev68 ;;\n        esac\n\tobjdump --private-headers /bin/sh | grep ld.so.1 >/dev/null\n\tif test \"$?\" = 0 ; then LIBC=\"libc1\" ; else LIBC=\"\" ; fi\n\techo ${UNAME_MACHINE}-unknown-linux-gnu${LIBC}\n\texit 0 ;;\n    parisc:Linux:*:* | hppa:Linux:*:*)\n\t# Look for CPU level\n\tcase `grep '^cpu[^a-z]*:' /proc/cpuinfo 2>/dev/null | cut -d' ' -f2` in\n\t  PA7*) echo hppa1.1-unknown-linux-gnu ;;\n\t  PA8*) echo hppa2.0-unknown-linux-gnu ;;\n\t  *)    echo hppa-unknown-linux-gnu ;;\n\tesac\n\texit 0 ;;\n    parisc64:Linux:*:* | hppa64:Linux:*:*)\n\techo hppa64-unknown-linux-gnu\n\texit 0 ;;\n    s390:Linux:*:* | s390x:Linux:*:*)\n\techo ${UNAME_MACHINE}-ibm-linux\n\texit 0 ;;\n    sh*:Linux:*:*)\n\techo ${UNAME_MACHINE}-unknown-linux-gnu\n\texit 0 ;;\n    sparc:Linux:*:* | sparc64:Linux:*:*)\n\techo ${UNAME_MACHINE}-unknown-linux-gnu\n\texit 0 ;;\n    x86_64:Linux:*:*)\n\techo x86_64-unknown-linux-gnu\n\texit 0 ;;\n    i*86:Linux:*:*)\n\t# The BFD linker knows what the default object file format is, so\n\t# first see if it will tell us. cd to the root directory to prevent\n\t# problems with other programs or directories called `ld' in the path.\n\t# Set LC_ALL=C to ensure ld outputs messages in English.\n\tld_supported_targets=`cd /; LC_ALL=C ld --help 2>&1 \\\n\t\t\t | sed -ne '/supported targets:/!d\n\t\t\t\t    s/[ \t][ \t]*/ /g\n\t\t\t\t    s/.*supported targets: *//\n\t\t\t\t    s/ .*//\n\t\t\t\t    p'`\n        case \"$ld_supported_targets\" in\n\t  elf32-i386)\n\t\tTENTATIVE=\"${UNAME_MACHINE}-pc-linux-gnu\"\n\t\t;;\n\t  a.out-i386-linux)\n\t\techo \"${UNAME_MACHINE}-pc-linux-gnuaout\"\n\t\texit 0 ;;\n\t  coff-i386)\n\t\techo \"${UNAME_MACHINE}-pc-linux-gnucoff\"\n\t\texit 0 ;;\n\t  \"\")\n\t\t# Either a pre-BFD a.out linker (linux-gnuoldld) or\n\t\t# one that does not give us useful --help.\n\t\techo \"${UNAME_MACHINE}-pc-linux-gnuoldld\"\n\t\texit 0 ;;\n\tesac\n\t# Determine whether the default compiler is a.out or elf\n\teval $set_cc_for_build\n\tsed 's/^\t//' << EOF >$dummy.c\n\t#include <features.h>\n\t#ifdef __ELF__\n\t# ifdef __GLIBC__\n\t#  if __GLIBC__ >= 2\n\tLIBC=gnu\n\t#  else\n\tLIBC=gnulibc1\n\t#  endif\n\t# else\n\tLIBC=gnulibc1\n\t# endif\n\t#else\n\t#ifdef __INTEL_COMPILER\n\tLIBC=gnu\n\t#else\n\tLIBC=gnuaout\n\t#endif\n\t#endif\nEOF\n\teval `$CC_FOR_BUILD -E $dummy.c 2>/dev/null | grep ^LIBC=`\n\trm -f $dummy.c && rmdir $tmpdir\n\ttest x\"${LIBC}\" != x && echo \"${UNAME_MACHINE}-pc-linux-${LIBC}\" && exit 0\n\ttest x\"${TENTATIVE}\" != x && echo \"${TENTATIVE}\" && exit 0\n\t;;\n    i*86:DYNIX/ptx:4*:*)\n\t# ptx 4.0 does uname -s correctly, with DYNIX/ptx in there.\n\t# earlier versions are messed up and put the nodename in both\n\t# sysname and nodename.\n\techo i386-sequent-sysv4\n\texit 0 ;;\n    i*86:UNIX_SV:4.2MP:2.*)\n        # Unixware is an offshoot of SVR4, but it has its own version\n        # number series starting with 2...\n        # I am not positive that other SVR4 systems won't match this,\n\t# I just have to hope.  -- rms.\n        # Use sysv4.2uw... so that sysv4* matches it.\n\techo ${UNAME_MACHINE}-pc-sysv4.2uw${UNAME_VERSION}\n\texit 0 ;;\n    i*86:*:4.*:* | i*86:SYSTEM_V:4.*:*)\n\tUNAME_REL=`echo ${UNAME_RELEASE} | sed 's/\\/MP$//'`\n\tif grep Novell /usr/include/link.h >/dev/null 2>/dev/null; then\n\t\techo ${UNAME_MACHINE}-univel-sysv${UNAME_REL}\n\telse\n\t\techo ${UNAME_MACHINE}-pc-sysv${UNAME_REL}\n\tfi\n\texit 0 ;;\n    i*86:*:5:[78]*)\n\tcase `/bin/uname -X | grep \"^Machine\"` in\n\t    *486*)\t     UNAME_MACHINE=i486 ;;\n\t    *Pentium)\t     UNAME_MACHINE=i586 ;;\n\t    *Pent*|*Celeron) UNAME_MACHINE=i686 ;;\n\tesac\n\techo ${UNAME_MACHINE}-unknown-sysv${UNAME_RELEASE}${UNAME_SYSTEM}${UNAME_VERSION}\n\texit 0 ;;\n    i*86:*:3.2:*)\n\tif test -f /usr/options/cb.name; then\n\t\tUNAME_REL=`sed -n 's/.*Version //p' </usr/options/cb.name`\n\t\techo ${UNAME_MACHINE}-pc-isc$UNAME_REL\n\telif /bin/uname -X 2>/dev/null >/dev/null ; then\n\t\tUNAME_REL=`(/bin/uname -X|grep Release|sed -e 's/.*= //')`\n\t\t(/bin/uname -X|grep i80486 >/dev/null) && UNAME_MACHINE=i486\n\t\t(/bin/uname -X|grep '^Machine.*Pentium' >/dev/null) \\\n\t\t\t&& UNAME_MACHINE=i586\n\t\t(/bin/uname -X|grep '^Machine.*Pent *II' >/dev/null) \\\n\t\t\t&& UNAME_MACHINE=i686\n\t\t(/bin/uname -X|grep '^Machine.*Pentium Pro' >/dev/null) \\\n\t\t\t&& UNAME_MACHINE=i686\n\t\techo ${UNAME_MACHINE}-pc-sco$UNAME_REL\n\telse\n\t\techo ${UNAME_MACHINE}-pc-sysv32\n\tfi\n\texit 0 ;;\n    i*86:*DOS:*:*)\n\techo ${UNAME_MACHINE}-pc-msdosdjgpp\n\texit 0 ;;\n    pc:*:*:*)\n\t# Left here for compatibility:\n        # uname -m prints for DJGPP always 'pc', but it prints nothing about\n        # the processor, so we play safe by assuming i386.\n\techo i386-pc-msdosdjgpp\n        exit 0 ;;\n    Intel:Mach:3*:*)\n\techo i386-pc-mach3\n\texit 0 ;;\n    paragon:*:*:*)\n\techo i860-intel-osf1\n\texit 0 ;;\n    i860:*:4.*:*) # i860-SVR4\n\tif grep Stardent /usr/include/sys/uadmin.h >/dev/null 2>&1 ; then\n\t  echo i860-stardent-sysv${UNAME_RELEASE} # Stardent Vistra i860-SVR4\n\telse # Add other i860-SVR4 vendors below as they are discovered.\n\t  echo i860-unknown-sysv${UNAME_RELEASE}  # Unknown i860-SVR4\n\tfi\n\texit 0 ;;\n    mini*:CTIX:SYS*5:*)\n\t# \"miniframe\"\n\techo m68010-convergent-sysv\n\texit 0 ;;\n    mc68k:UNIX:SYSTEM5:3.51m)\n\techo m68k-convergent-sysv\n\texit 0 ;;\n    M68*:*:R3V[567]*:*)\n\ttest -r /sysV68 && echo 'm68k-motorola-sysv' && exit 0 ;;\n    3[34]??:*:4.0:3.0 | 3[34]??A:*:4.0:3.0 | 3[34]??,*:*:4.0:3.0 | 3[34]??/*:*:4.0:3.0 | 4400:*:4.0:3.0 | 4850:*:4.0:3.0 | SKA40:*:4.0:3.0)\n\tOS_REL=''\n\ttest -r /etc/.relid \\\n\t&& OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`\n\t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n\t  && echo i486-ncr-sysv4.3${OS_REL} && exit 0\n\t/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\\n\t  && echo i586-ncr-sysv4.3${OS_REL} && exit 0 ;;\n    3[34]??:*:4.0:* | 3[34]??,*:*:4.0:*)\n        /bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n          && echo i486-ncr-sysv4 && exit 0 ;;\n    m68*:LynxOS:2.*:* | m68*:LynxOS:3.0*:*)\n\techo m68k-unknown-lynxos${UNAME_RELEASE}\n\texit 0 ;;\n    mc68030:UNIX_System_V:4.*:*)\n\techo m68k-atari-sysv4\n\texit 0 ;;\n    i*86:LynxOS:2.*:* | i*86:LynxOS:3.[01]*:* | i*86:LynxOS:4.0*:*)\n\techo i386-unknown-lynxos${UNAME_RELEASE}\n\texit 0 ;;\n    TSUNAMI:LynxOS:2.*:*)\n\techo sparc-unknown-lynxos${UNAME_RELEASE}\n\texit 0 ;;\n    rs6000:LynxOS:2.*:*)\n\techo rs6000-unknown-lynxos${UNAME_RELEASE}\n\texit 0 ;;\n    PowerPC:LynxOS:2.*:* | PowerPC:LynxOS:3.[01]*:* | PowerPC:LynxOS:4.0*:*)\n\techo powerpc-unknown-lynxos${UNAME_RELEASE}\n\texit 0 ;;\n    SM[BE]S:UNIX_SV:*:*)\n\techo mips-dde-sysv${UNAME_RELEASE}\n\texit 0 ;;\n    RM*:ReliantUNIX-*:*:*)\n\techo mips-sni-sysv4\n\texit 0 ;;\n    RM*:SINIX-*:*:*)\n\techo mips-sni-sysv4\n\texit 0 ;;\n    *:SINIX-*:*:*)\n\tif uname -p 2>/dev/null >/dev/null ; then\n\t\tUNAME_MACHINE=`(uname -p) 2>/dev/null`\n\t\techo ${UNAME_MACHINE}-sni-sysv4\n\telse\n\t\techo ns32k-sni-sysv\n\tfi\n\texit 0 ;;\n    PENTIUM:*:4.0*:*) # Unisys `ClearPath HMP IX 4000' SVR4/MP effort\n                      # says <Richard.M.Bartel@ccMail.Census.GOV>\n        echo i586-unisys-sysv4\n        exit 0 ;;\n    *:UNIX_System_V:4*:FTX*)\n\t# From Gerald Hewes <hewes@openmarket.com>.\n\t# How about differentiating between stratus architectures? -djm\n\techo hppa1.1-stratus-sysv4\n\texit 0 ;;\n    *:*:*:FTX*)\n\t# From seanf@swdc.stratus.com.\n\techo i860-stratus-sysv4\n\texit 0 ;;\n    *:VOS:*:*)\n\t# From Paul.Green@stratus.com.\n\techo hppa1.1-stratus-vos\n\texit 0 ;;\n    mc68*:A/UX:*:*)\n\techo m68k-apple-aux${UNAME_RELEASE}\n\texit 0 ;;\n    news*:NEWS-OS:6*:*)\n\techo mips-sony-newsos6\n\texit 0 ;;\n    R[34]000:*System_V*:*:* | R4000:UNIX_SYSV:*:* | R*000:UNIX_SV:*:*)\n\tif [ -d /usr/nec ]; then\n\t        echo mips-nec-sysv${UNAME_RELEASE}\n\telse\n\t        echo mips-unknown-sysv${UNAME_RELEASE}\n\tfi\n        exit 0 ;;\n    BeBox:BeOS:*:*)\t# BeOS running on hardware made by Be, PPC only.\n\techo powerpc-be-beos\n\texit 0 ;;\n    BeMac:BeOS:*:*)\t# BeOS running on Mac or Mac clone, PPC only.\n\techo powerpc-apple-beos\n\texit 0 ;;\n    BePC:BeOS:*:*)\t# BeOS running on Intel PC compatible.\n\techo i586-pc-beos\n\texit 0 ;;\n    SX-4:SUPER-UX:*:*)\n\techo sx4-nec-superux${UNAME_RELEASE}\n\texit 0 ;;\n    SX-5:SUPER-UX:*:*)\n\techo sx5-nec-superux${UNAME_RELEASE}\n\texit 0 ;;\n    SX-6:SUPER-UX:*:*)\n\techo sx6-nec-superux${UNAME_RELEASE}\n\texit 0 ;;\n    Power*:Rhapsody:*:*)\n\techo powerpc-apple-rhapsody${UNAME_RELEASE}\n\texit 0 ;;\n    *:Rhapsody:*:*)\n\techo ${UNAME_MACHINE}-apple-rhapsody${UNAME_RELEASE}\n\texit 0 ;;\n    *:Darwin:*:*)\n\techo `uname -p`-apple-darwin${UNAME_RELEASE}\n\texit 0 ;;\n    *:procnto*:*:* | *:QNX:[0123456789]*:*)\n\tUNAME_PROCESSOR=`uname -p`\n\tif test \"$UNAME_PROCESSOR\" = \"x86\"; then\n\t\tUNAME_PROCESSOR=i386\n\t\tUNAME_MACHINE=pc\n\tfi\n\techo ${UNAME_PROCESSOR}-${UNAME_MACHINE}-nto-qnx${UNAME_RELEASE}\n\texit 0 ;;\n    *:QNX:*:4*)\n\techo i386-pc-qnx\n\texit 0 ;;\n    NSR-[DGKLNPTVW]:NONSTOP_KERNEL:*:*)\n\techo nsr-tandem-nsk${UNAME_RELEASE}\n\texit 0 ;;\n    *:NonStop-UX:*:*)\n\techo mips-compaq-nonstopux\n\texit 0 ;;\n    BS2000:POSIX*:*:*)\n\techo bs2000-siemens-sysv\n\texit 0 ;;\n    DS/*:UNIX_System_V:*:*)\n\techo ${UNAME_MACHINE}-${UNAME_SYSTEM}-${UNAME_RELEASE}\n\texit 0 ;;\n    *:Plan9:*:*)\n\t# \"uname -m\" is not consistent, so use $cputype instead. 386\n\t# is converted to i386 for consistency with other x86\n\t# operating systems.\n\tif test \"$cputype\" = \"386\"; then\n\t    UNAME_MACHINE=i386\n\telse\n\t    UNAME_MACHINE=\"$cputype\"\n\tfi\n\techo ${UNAME_MACHINE}-unknown-plan9\n\texit 0 ;;\n    i*86:OS/2:*:*)\n\t# If we were able to find `uname', then EMX Unix compatibility\n\t# is probably installed.\n\techo ${UNAME_MACHINE}-pc-os2-emx\n\texit 0 ;;\n    *:TOPS-10:*:*)\n\techo pdp10-unknown-tops10\n\texit 0 ;;\n    *:TENEX:*:*)\n\techo pdp10-unknown-tenex\n\texit 0 ;;\n    KS10:TOPS-20:*:* | KL10:TOPS-20:*:* | TYPE4:TOPS-20:*:*)\n\techo pdp10-dec-tops20\n\texit 0 ;;\n    XKL-1:TOPS-20:*:* | TYPE5:TOPS-20:*:*)\n\techo pdp10-xkl-tops20\n\texit 0 ;;\n    *:TOPS-20:*:*)\n\techo pdp10-unknown-tops20\n\texit 0 ;;\n    *:ITS:*:*)\n\techo pdp10-unknown-its\n\texit 0 ;;\n    i*86:XTS-300:*:STOP)\n\techo ${UNAME_MACHINE}-unknown-stop\n\texit 0 ;;\n    i*86:atheos:*:*)\n\techo ${UNAME_MACHINE}-unknown-atheos\n\texit 0 ;;\nesac\n\n#echo '(No uname command or uname output not recognized.)' 1>&2\n#echo \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" 1>&2\n\neval $set_cc_for_build\ncat >$dummy.c <<EOF\n#ifdef _SEQUENT_\n# include <sys/types.h>\n# include <sys/utsname.h>\n#endif\nmain ()\n{\n#if defined (sony)\n#if defined (MIPSEB)\n  /* BFD wants \"bsd\" instead of \"newsos\".  Perhaps BFD should be changed,\n     I don't know....  */\n  printf (\"mips-sony-bsd\\n\"); exit (0);\n#else\n#include <sys/param.h>\n  printf (\"m68k-sony-newsos%s\\n\",\n#ifdef NEWSOS4\n          \"4\"\n#else\n\t  \"\"\n#endif\n         ); exit (0);\n#endif\n#endif\n\n#if defined (__arm) && defined (__acorn) && defined (__unix)\n  printf (\"arm-acorn-riscix\"); exit (0);\n#endif\n\n#if defined (hp300) && !defined (hpux)\n  printf (\"m68k-hp-bsd\\n\"); exit (0);\n#endif\n\n#if defined (NeXT)\n#if !defined (__ARCHITECTURE__)\n#define __ARCHITECTURE__ \"m68k\"\n#endif\n  int version;\n  version=`(hostinfo | sed -n 's/.*NeXT Mach \\([0-9]*\\).*/\\1/p') 2>/dev/null`;\n  if (version < 4)\n    printf (\"%s-next-nextstep%d\\n\", __ARCHITECTURE__, version);\n  else\n    printf (\"%s-next-openstep%d\\n\", __ARCHITECTURE__, version);\n  exit (0);\n#endif\n\n#if defined (MULTIMAX) || defined (n16)\n#if defined (UMAXV)\n  printf (\"ns32k-encore-sysv\\n\"); exit (0);\n#else\n#if defined (CMU)\n  printf (\"ns32k-encore-mach\\n\"); exit (0);\n#else\n  printf (\"ns32k-encore-bsd\\n\"); exit (0);\n#endif\n#endif\n#endif\n\n#if defined (__386BSD__)\n  printf (\"i386-pc-bsd\\n\"); exit (0);\n#endif\n\n#if defined (sequent)\n#if defined (i386)\n  printf (\"i386-sequent-dynix\\n\"); exit (0);\n#endif\n#if defined (ns32000)\n  printf (\"ns32k-sequent-dynix\\n\"); exit (0);\n#endif\n#endif\n\n#if defined (_SEQUENT_)\n    struct utsname un;\n\n    uname(&un);\n\n    if (strncmp(un.version, \"V2\", 2) == 0) {\n\tprintf (\"i386-sequent-ptx2\\n\"); exit (0);\n    }\n    if (strncmp(un.version, \"V1\", 2) == 0) { /* XXX is V1 correct? */\n\tprintf (\"i386-sequent-ptx1\\n\"); exit (0);\n    }\n    printf (\"i386-sequent-ptx\\n\"); exit (0);\n\n#endif\n\n#if defined (vax)\n# if !defined (ultrix)\n#  include <sys/param.h>\n#  if defined (BSD)\n#   if BSD == 43\n      printf (\"vax-dec-bsd4.3\\n\"); exit (0);\n#   else\n#    if BSD == 199006\n      printf (\"vax-dec-bsd4.3reno\\n\"); exit (0);\n#    else\n      printf (\"vax-dec-bsd\\n\"); exit (0);\n#    endif\n#   endif\n#  else\n    printf (\"vax-dec-bsd\\n\"); exit (0);\n#  endif\n# else\n    printf (\"vax-dec-ultrix\\n\"); exit (0);\n# endif\n#endif\n\n#if defined (alliant) && defined (i860)\n  printf (\"i860-alliant-bsd\\n\"); exit (0);\n#endif\n\n  exit (1);\n}\nEOF\n\n$CC_FOR_BUILD -o $dummy $dummy.c 2>/dev/null && $dummy && rm -f $dummy.c $dummy && rmdir $tmpdir && exit 0\nrm -f $dummy.c $dummy && rmdir $tmpdir\n\n# Apollos put the system type in the environment.\n\ntest -d /usr/apollo && { echo ${ISP}-apollo-${SYSTYPE}; exit 0; }\n\n# Convex versions that predate uname can use getsysinfo(1)\n\nif [ -x /usr/convex/getsysinfo ]\nthen\n    case `getsysinfo -f cpu_type` in\n    c1*)\n\techo c1-convex-bsd\n\texit 0 ;;\n    c2*)\n\tif getsysinfo -f scalar_acc\n\tthen echo c32-convex-bsd\n\telse echo c2-convex-bsd\n\tfi\n\texit 0 ;;\n    c34*)\n\techo c34-convex-bsd\n\texit 0 ;;\n    c38*)\n\techo c38-convex-bsd\n\texit 0 ;;\n    c4*)\n\techo c4-convex-bsd\n\texit 0 ;;\n    esac\nfi\n\ncat >&2 <<EOF\n$0: unable to guess system type\n\nThis script, last modified $timestamp, has failed to recognize\nthe operating system you are using. It is advised that you\ndownload the most up to date version of the config scripts from\n\n    ftp://ftp.gnu.org/pub/gnu/config/\n\nIf the version you run ($0) is already up to date, please\nsend the following data and any information you think might be\npertinent to <config-patches@gnu.org> in order to provide the needed\ninformation to handle your system.\n\nconfig.guess timestamp = $timestamp\n\nuname -m = `(uname -m) 2>/dev/null || echo unknown`\nuname -r = `(uname -r) 2>/dev/null || echo unknown`\nuname -s = `(uname -s) 2>/dev/null || echo unknown`\nuname -v = `(uname -v) 2>/dev/null || echo unknown`\n\n/usr/bin/uname -p = `(/usr/bin/uname -p) 2>/dev/null`\n/bin/uname -X     = `(/bin/uname -X) 2>/dev/null`\n\nhostinfo               = `(hostinfo) 2>/dev/null`\n/bin/universe          = `(/bin/universe) 2>/dev/null`\n/usr/bin/arch -k       = `(/usr/bin/arch -k) 2>/dev/null`\n/bin/arch              = `(/bin/arch) 2>/dev/null`\n/usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null`\n/usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null`\n\nUNAME_MACHINE = ${UNAME_MACHINE}\nUNAME_RELEASE = ${UNAME_RELEASE}\nUNAME_SYSTEM  = ${UNAME_SYSTEM}\nUNAME_VERSION = ${UNAME_VERSION}\nEOF\n\nexit 1\n\n# Local variables:\n# eval: (add-hook 'write-file-hooks 'time-stamp)\n# time-stamp-start: \"timestamp='\"\n# time-stamp-format: \"%:y-%02m-%02d\"\n# time-stamp-end: \"'\"\n# End:\n"
        },
        {
          "name": "config.sub",
          "type": "blob",
          "size": 28.93359375,
          "content": "#! /bin/sh\n# Configuration validation subroutine script.\n#   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n#   2000, 2001, 2002 Free Software Foundation, Inc.\n\ntimestamp='2002-09-05'\n\n# This file is (in principle) common to ALL GNU software.\n# The presence of a machine in this file suggests that SOME GNU software\n# can handle that machine.  It does not imply ALL GNU software can.\n#\n# This file is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 59 Temple Place - Suite 330,\n# Boston, MA 02111-1307, USA.\n\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program that contains a\n# configuration script generated by Autoconf, you may include it under\n# the same distribution terms that you use for the rest of that program.\n\n# Please send patches to <config-patches@gnu.org>.  Submit a context\n# diff and a properly formatted ChangeLog entry.\n#\n# Configuration subroutine to validate and canonicalize a configuration type.\n# Supply the specified configuration type as an argument.\n# If it is invalid, we print an error message on stderr and exit with code 1.\n# Otherwise, we print the canonical config type on stdout and succeed.\n\n# This file is supposed to be the same for all GNU packages\n# and recognize all the CPU types, system types and aliases\n# that are meaningful with *any* GNU software.\n# Each package is responsible for reporting which valid configurations\n# it does not support.  The user should be able to distinguish\n# a failure to support a valid configuration from a meaningless\n# configuration.\n\n# The goal of this file is to map all the various variations of a given\n# machine specification into a single specification in the form:\n#\tCPU_TYPE-MANUFACTURER-OPERATING_SYSTEM\n# or in some cases, the newer four-part form:\n#\tCPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM\n# It is wrong to echo any other type of specification.\n\nme=`echo \"$0\" | sed -e 's,.*/,,'`\n\nusage=\"\\\nUsage: $0 [OPTION] CPU-MFR-OPSYS\n       $0 [OPTION] ALIAS\n\nCanonicalize a configuration name.\n\nOperation modes:\n  -h, --help         print this help, then exit\n  -t, --time-stamp   print date of last modification, then exit\n  -v, --version      print version number, then exit\n\nReport bugs and patches to <config-patches@gnu.org>.\"\n\nversion=\"\\\nGNU config.sub ($timestamp)\n\nCopyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001\nFree Software Foundation, Inc.\n\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n\nhelp=\"\nTry \\`$me --help' for more information.\"\n\n# Parse command line\nwhile test $# -gt 0 ; do\n  case $1 in\n    --time-stamp | --time* | -t )\n       echo \"$timestamp\" ; exit 0 ;;\n    --version | -v )\n       echo \"$version\" ; exit 0 ;;\n    --help | --h* | -h )\n       echo \"$usage\"; exit 0 ;;\n    -- )     # Stop option processing\n       shift; break ;;\n    - )\t# Use stdin as input.\n       break ;;\n    -* )\n       echo \"$me: invalid option $1$help\"\n       exit 1 ;;\n\n    *local*)\n       # First pass through any local machine types.\n       echo $1\n       exit 0;;\n\n    * )\n       break ;;\n  esac\ndone\n\ncase $# in\n 0) echo \"$me: missing argument$help\" >&2\n    exit 1;;\n 1) ;;\n *) echo \"$me: too many arguments$help\" >&2\n    exit 1;;\nesac\n\n# Separate what the user gave into CPU-COMPANY and OS or KERNEL-OS (if any).\n# Here we must recognize all the valid KERNEL-OS combinations.\nmaybe_os=`echo $1 | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\2/'`\ncase $maybe_os in\n  nto-qnx* | linux-gnu* | freebsd*-gnu* | storm-chaos* | os2-emx* | windows32-* | rtmk-nova*)\n    os=-$maybe_os\n    basic_machine=`echo $1 | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\1/'`\n    ;;\n  *)\n    basic_machine=`echo $1 | sed 's/-[^-]*$//'`\n    if [ $basic_machine != $1 ]\n    then os=`echo $1 | sed 's/.*-/-/'`\n    else os=; fi\n    ;;\nesac\n\n### Let's recognize common machines as not being operating systems so\n### that things like config.sub decstation-3100 work.  We also\n### recognize some manufacturers as not being operating systems, so we\n### can provide default operating systems below.\ncase $os in\n\t-sun*os*)\n\t\t# Prevent following clause from handling this invalid input.\n\t\t;;\n\t-dec* | -mips* | -sequent* | -encore* | -pc532* | -sgi* | -sony* | \\\n\t-att* | -7300* | -3300* | -delta* | -motorola* | -sun[234]* | \\\n\t-unicom* | -ibm* | -next | -hp | -isi* | -apollo | -altos* | \\\n\t-convergent* | -ncr* | -news | -32* | -3600* | -3100* | -hitachi* |\\\n\t-c[123]* | -convex* | -sun | -crds | -omron* | -dg | -ultra | -tti* | \\\n\t-harris | -dolphin | -highlevel | -gould | -cbm | -ns | -masscomp | \\\n\t-apple | -axis)\n\t\tos=\n\t\tbasic_machine=$1\n\t\t;;\n\t-sim | -cisco | -oki | -wec | -winbond)\n\t\tos=\n\t\tbasic_machine=$1\n\t\t;;\n\t-scout)\n\t\t;;\n\t-wrs)\n\t\tos=-vxworks\n\t\tbasic_machine=$1\n\t\t;;\n\t-chorusos*)\n\t\tos=-chorusos\n\t\tbasic_machine=$1\n\t\t;;\n \t-chorusrdb)\n \t\tos=-chorusrdb\n\t\tbasic_machine=$1\n \t\t;;\n\t-hiux*)\n\t\tos=-hiuxwe2\n\t\t;;\n\t-sco5)\n\t\tos=-sco3.2v5\n\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n\t\t;;\n\t-sco4)\n\t\tos=-sco3.2v4\n\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n\t\t;;\n\t-sco3.2.[4-9]*)\n\t\tos=`echo $os | sed -e 's/sco3.2./sco3.2v/'`\n\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n\t\t;;\n\t-sco3.2v[4-9]*)\n\t\t# Don't forget version if it is 3.2v4 or newer.\n\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n\t\t;;\n\t-sco*)\n\t\tos=-sco3.2v2\n\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n\t\t;;\n\t-udk*)\n\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n\t\t;;\n\t-isc)\n\t\tos=-isc2.2\n\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n\t\t;;\n\t-clix*)\n\t\tbasic_machine=clipper-intergraph\n\t\t;;\n\t-isc*)\n\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n\t\t;;\n\t-lynx*)\n\t\tos=-lynxos\n\t\t;;\n\t-ptx*)\n\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-sequent/'`\n\t\t;;\n\t-windowsnt*)\n\t\tos=`echo $os | sed -e 's/windowsnt/winnt/'`\n\t\t;;\n\t-psos*)\n\t\tos=-psos\n\t\t;;\n\t-mint | -mint[0-9]*)\n\t\tbasic_machine=m68k-atari\n\t\tos=-mint\n\t\t;;\nesac\n\n# Decode aliases for certain CPU-COMPANY combinations.\ncase $basic_machine in\n\t# Recognize the basic CPU types without company name.\n\t# Some are omitted here because they have special meanings below.\n\t1750a | 580 \\\n\t| a29k \\\n\t| alpha | alphaev[4-8] | alphaev56 | alphaev6[78] | alphapca5[67] \\\n\t| alpha64 | alpha64ev[4-8] | alpha64ev56 | alpha64ev6[78] | alpha64pca5[67] \\\n\t| arc | arm | arm[bl]e | arme[lb] | armv[2345] | armv[345][lb] | avr \\\n\t| clipper \\\n\t| d10v | d30v | dlx | dsp16xx \\\n\t| fr30 | frv \\\n\t| h8300 | h8500 | hppa | hppa1.[01] | hppa2.0 | hppa2.0[nw] | hppa64 \\\n\t| i370 | i860 | i960 | ia64 \\\n\t| ip2k \\\n\t| m32r | m68000 | m68k | m88k | mcore \\\n\t| mips | mipsbe | mipseb | mipsel | mipsle \\\n\t| mips16 \\\n\t| mips64 | mips64el \\\n\t| mips64vr | mips64vrel \\\n\t| mips64orion | mips64orionel \\\n\t| mips64vr4100 | mips64vr4100el \\\n\t| mips64vr4300 | mips64vr4300el \\\n\t| mips64vr5000 | mips64vr5000el \\\n\t| mipsisa32 | mipsisa32el \\\n\t| mipsisa64 | mipsisa64el \\\n\t| mipsisa64sb1 | mipsisa64sb1el \\\n\t| mipsisa64sr71k | mipsisa64sr71kel \\\n\t| mipstx39 | mipstx39el \\\n\t| mn10200 | mn10300 \\\n\t| ns16k | ns32k \\\n\t| openrisc | or32 \\\n\t| pdp10 | pdp11 | pj | pjl \\\n\t| powerpc | powerpc64 | powerpc64le | powerpcle | ppcbe \\\n\t| pyramid \\\n\t| sh | sh[1234] | sh3e | sh[34]eb | shbe | shle | sh[1234]le | sh3ele \\\n\t| sh64 | sh64le \\\n\t| sparc | sparc64 | sparc86x | sparclet | sparclite | sparcv9 | sparcv9b \\\n\t| strongarm \\\n\t| tahoe | thumb | tic80 | tron \\\n\t| v850 | v850e \\\n\t| we32k \\\n\t| x86 | xscale | xstormy16 | xtensa \\\n\t| z8k)\n\t\tbasic_machine=$basic_machine-unknown\n\t\t;;\n\tm6811 | m68hc11 | m6812 | m68hc12)\n\t\t# Motorola 68HC11/12.\n\t\tbasic_machine=$basic_machine-unknown\n\t\tos=-none\n\t\t;;\n\tm88110 | m680[12346]0 | m683?2 | m68360 | m5200 | v70 | w65 | z8k)\n\t\t;;\n\n\t# We use `pc' rather than `unknown'\n\t# because (1) that's what they normally are, and\n\t# (2) the word \"unknown\" tends to confuse beginning users.\n\ti*86 | x86_64)\n\t  basic_machine=$basic_machine-pc\n\t  ;;\n\t# Object if more than one company name word.\n\t*-*-*)\n\t\techo Invalid configuration \\`$1\\': machine \\`$basic_machine\\' not recognized 1>&2\n\t\texit 1\n\t\t;;\n\t# Recognize the basic CPU types with company name.\n\t580-* \\\n\t| a29k-* \\\n\t| alpha-* | alphaev[4-8]-* | alphaev56-* | alphaev6[78]-* \\\n\t| alpha64-* | alpha64ev[4-8]-* | alpha64ev56-* | alpha64ev6[78]-* \\\n\t| alphapca5[67]-* | alpha64pca5[67]-* | arc-* \\\n\t| arm-*  | armbe-* | armle-* | armeb-* | armv*-* \\\n\t| avr-* \\\n\t| bs2000-* \\\n\t| c[123]* | c30-* | [cjt]90-* | c4x-* | c54x-* \\\n\t| clipper-* | cydra-* \\\n\t| d10v-* | d30v-* | dlx-* \\\n\t| elxsi-* \\\n\t| f30[01]-* | f700-* | fr30-* | frv-* | fx80-* \\\n\t| h8300-* | h8500-* \\\n\t| hppa-* | hppa1.[01]-* | hppa2.0-* | hppa2.0[nw]-* | hppa64-* \\\n\t| i*86-* | i860-* | i960-* | ia64-* \\\n\t| ip2k-* \\\n\t| m32r-* \\\n\t| m68000-* | m680[012346]0-* | m68360-* | m683?2-* | m68k-* \\\n\t| m88110-* | m88k-* | mcore-* \\\n\t| mips-* | mipsbe-* | mipseb-* | mipsel-* | mipsle-* \\\n\t| mips16-* \\\n\t| mips64-* | mips64el-* \\\n\t| mips64vr-* | mips64vrel-* \\\n\t| mips64orion-* | mips64orionel-* \\\n\t| mips64vr4100-* | mips64vr4100el-* \\\n\t| mips64vr4300-* | mips64vr4300el-* \\\n\t| mips64vr5000-* | mips64vr5000el-* \\\n\t| mipsisa32-* | mipsisa32el-* \\\n\t| mipsisa64-* | mipsisa64el-* \\\n\t| mipsisa64sb1-* | mipsisa64sb1el-* \\\n\t| mipsisa64sr71k-* | mipsisa64sr71kel-* \\\n\t| mipstx39 | mipstx39el \\\n\t| none-* | np1-* | ns16k-* | ns32k-* \\\n\t| orion-* \\\n\t| pdp10-* | pdp11-* | pj-* | pjl-* | pn-* | power-* \\\n\t| powerpc-* | powerpc64-* | powerpc64le-* | powerpcle-* | ppcbe-* \\\n\t| pyramid-* \\\n\t| romp-* | rs6000-* \\\n\t| sh-* | sh[1234]-* | sh3e-* | sh[34]eb-* | shbe-* \\\n\t| shle-* | sh[1234]le-* | sh3ele-* | sh64-* | sh64le-* \\\n\t| sparc-* | sparc64-* | sparc86x-* | sparclet-* | sparclite-* \\\n\t| sparcv9-* | sparcv9b-* | strongarm-* | sv1-* | sx?-* \\\n\t| tahoe-* | thumb-* | tic30-* | tic4x-* | tic54x-* | tic80-* | tron-* \\\n\t| v850-* | v850e-* | vax-* \\\n\t| we32k-* \\\n\t| x86-* | x86_64-* | xps100-* | xscale-* | xstormy16-* \\\n\t| xtensa-* \\\n\t| ymp-* \\\n\t| z8k-*)\n\t\t;;\n\t# Recognize the various machine names and aliases which stand\n\t# for a CPU type and a company and sometimes even an OS.\n\t386bsd)\n\t\tbasic_machine=i386-unknown\n\t\tos=-bsd\n\t\t;;\n\t3b1 | 7300 | 7300-att | att-7300 | pc7300 | safari | unixpc)\n\t\tbasic_machine=m68000-att\n\t\t;;\n\t3b*)\n\t\tbasic_machine=we32k-att\n\t\t;;\n\ta29khif)\n\t\tbasic_machine=a29k-amd\n\t\tos=-udi\n\t\t;;\n\tadobe68k)\n\t\tbasic_machine=m68010-adobe\n\t\tos=-scout\n\t\t;;\n\talliant | fx80)\n\t\tbasic_machine=fx80-alliant\n\t\t;;\n\taltos | altos3068)\n\t\tbasic_machine=m68k-altos\n\t\t;;\n\tam29k)\n\t\tbasic_machine=a29k-none\n\t\tos=-bsd\n\t\t;;\n\tamdahl)\n\t\tbasic_machine=580-amdahl\n\t\tos=-sysv\n\t\t;;\n\tamiga | amiga-*)\n\t\tbasic_machine=m68k-unknown\n\t\t;;\n\tamigaos | amigados)\n\t\tbasic_machine=m68k-unknown\n\t\tos=-amigaos\n\t\t;;\n\tamigaunix | amix)\n\t\tbasic_machine=m68k-unknown\n\t\tos=-sysv4\n\t\t;;\n\tapollo68)\n\t\tbasic_machine=m68k-apollo\n\t\tos=-sysv\n\t\t;;\n\tapollo68bsd)\n\t\tbasic_machine=m68k-apollo\n\t\tos=-bsd\n\t\t;;\n\taux)\n\t\tbasic_machine=m68k-apple\n\t\tos=-aux\n\t\t;;\n\tbalance)\n\t\tbasic_machine=ns32k-sequent\n\t\tos=-dynix\n\t\t;;\n\tc90)\n\t\tbasic_machine=c90-cray\n\t\tos=-unicos\n\t\t;;\n\tconvex-c1)\n\t\tbasic_machine=c1-convex\n\t\tos=-bsd\n\t\t;;\n\tconvex-c2)\n\t\tbasic_machine=c2-convex\n\t\tos=-bsd\n\t\t;;\n\tconvex-c32)\n\t\tbasic_machine=c32-convex\n\t\tos=-bsd\n\t\t;;\n\tconvex-c34)\n\t\tbasic_machine=c34-convex\n\t\tos=-bsd\n\t\t;;\n\tconvex-c38)\n\t\tbasic_machine=c38-convex\n\t\tos=-bsd\n\t\t;;\n\tcray | j90)\n\t\tbasic_machine=j90-cray\n\t\tos=-unicos\n\t\t;;\n\tcrds | unos)\n\t\tbasic_machine=m68k-crds\n\t\t;;\n\tcris | cris-* | etrax*)\n\t\tbasic_machine=cris-axis\n\t\t;;\n\tda30 | da30-*)\n\t\tbasic_machine=m68k-da30\n\t\t;;\n\tdecstation | decstation-3100 | pmax | pmax-* | pmin | dec3100 | decstatn)\n\t\tbasic_machine=mips-dec\n\t\t;;\n\tdecsystem10* | dec10*)\n\t\tbasic_machine=pdp10-dec\n\t\tos=-tops10\n\t\t;;\n\tdecsystem20* | dec20*)\n\t\tbasic_machine=pdp10-dec\n\t\tos=-tops20\n\t\t;;\n\tdelta | 3300 | motorola-3300 | motorola-delta \\\n\t      | 3300-motorola | delta-motorola)\n\t\tbasic_machine=m68k-motorola\n\t\t;;\n\tdelta88)\n\t\tbasic_machine=m88k-motorola\n\t\tos=-sysv3\n\t\t;;\n\tdpx20 | dpx20-*)\n\t\tbasic_machine=rs6000-bull\n\t\tos=-bosx\n\t\t;;\n\tdpx2* | dpx2*-bull)\n\t\tbasic_machine=m68k-bull\n\t\tos=-sysv3\n\t\t;;\n\tebmon29k)\n\t\tbasic_machine=a29k-amd\n\t\tos=-ebmon\n\t\t;;\n\telxsi)\n\t\tbasic_machine=elxsi-elxsi\n\t\tos=-bsd\n\t\t;;\n\tencore | umax | mmax)\n\t\tbasic_machine=ns32k-encore\n\t\t;;\n\tes1800 | OSE68k | ose68k | ose | OSE)\n\t\tbasic_machine=m68k-ericsson\n\t\tos=-ose\n\t\t;;\n\tfx2800)\n\t\tbasic_machine=i860-alliant\n\t\t;;\n\tgenix)\n\t\tbasic_machine=ns32k-ns\n\t\t;;\n\tgmicro)\n\t\tbasic_machine=tron-gmicro\n\t\tos=-sysv\n\t\t;;\n\tgo32)\n\t\tbasic_machine=i386-pc\n\t\tos=-go32\n\t\t;;\n\th3050r* | hiux*)\n\t\tbasic_machine=hppa1.1-hitachi\n\t\tos=-hiuxwe2\n\t\t;;\n\th8300hms)\n\t\tbasic_machine=h8300-hitachi\n\t\tos=-hms\n\t\t;;\n\th8300xray)\n\t\tbasic_machine=h8300-hitachi\n\t\tos=-xray\n\t\t;;\n\th8500hms)\n\t\tbasic_machine=h8500-hitachi\n\t\tos=-hms\n\t\t;;\n\tharris)\n\t\tbasic_machine=m88k-harris\n\t\tos=-sysv3\n\t\t;;\n\thp300-*)\n\t\tbasic_machine=m68k-hp\n\t\t;;\n\thp300bsd)\n\t\tbasic_machine=m68k-hp\n\t\tos=-bsd\n\t\t;;\n\thp300hpux)\n\t\tbasic_machine=m68k-hp\n\t\tos=-hpux\n\t\t;;\n\thp3k9[0-9][0-9] | hp9[0-9][0-9])\n\t\tbasic_machine=hppa1.0-hp\n\t\t;;\n\thp9k2[0-9][0-9] | hp9k31[0-9])\n\t\tbasic_machine=m68000-hp\n\t\t;;\n\thp9k3[2-9][0-9])\n\t\tbasic_machine=m68k-hp\n\t\t;;\n\thp9k6[0-9][0-9] | hp6[0-9][0-9])\n\t\tbasic_machine=hppa1.0-hp\n\t\t;;\n\thp9k7[0-79][0-9] | hp7[0-79][0-9])\n\t\tbasic_machine=hppa1.1-hp\n\t\t;;\n\thp9k78[0-9] | hp78[0-9])\n\t\t# FIXME: really hppa2.0-hp\n\t\tbasic_machine=hppa1.1-hp\n\t\t;;\n\thp9k8[67]1 | hp8[67]1 | hp9k80[24] | hp80[24] | hp9k8[78]9 | hp8[78]9 | hp9k893 | hp893)\n\t\t# FIXME: really hppa2.0-hp\n\t\tbasic_machine=hppa1.1-hp\n\t\t;;\n\thp9k8[0-9][13679] | hp8[0-9][13679])\n\t\tbasic_machine=hppa1.1-hp\n\t\t;;\n\thp9k8[0-9][0-9] | hp8[0-9][0-9])\n\t\tbasic_machine=hppa1.0-hp\n\t\t;;\n\thppa-next)\n\t\tos=-nextstep3\n\t\t;;\n\thppaosf)\n\t\tbasic_machine=hppa1.1-hp\n\t\tos=-osf\n\t\t;;\n\thppro)\n\t\tbasic_machine=hppa1.1-hp\n\t\tos=-proelf\n\t\t;;\n\ti370-ibm* | ibm*)\n\t\tbasic_machine=i370-ibm\n\t\t;;\n# I'm not sure what \"Sysv32\" means.  Should this be sysv3.2?\n\ti*86v32)\n\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n\t\tos=-sysv32\n\t\t;;\n\ti*86v4*)\n\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n\t\tos=-sysv4\n\t\t;;\n\ti*86v)\n\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n\t\tos=-sysv\n\t\t;;\n\ti*86sol2)\n\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n\t\tos=-solaris2\n\t\t;;\n\ti386mach)\n\t\tbasic_machine=i386-mach\n\t\tos=-mach\n\t\t;;\n\ti386-vsta | vsta)\n\t\tbasic_machine=i386-unknown\n\t\tos=-vsta\n\t\t;;\n\tiris | iris4d)\n\t\tbasic_machine=mips-sgi\n\t\tcase $os in\n\t\t    -irix*)\n\t\t\t;;\n\t\t    *)\n\t\t\tos=-irix4\n\t\t\t;;\n\t\tesac\n\t\t;;\n\tisi68 | isi)\n\t\tbasic_machine=m68k-isi\n\t\tos=-sysv\n\t\t;;\n\tm88k-omron*)\n\t\tbasic_machine=m88k-omron\n\t\t;;\n\tmagnum | m3230)\n\t\tbasic_machine=mips-mips\n\t\tos=-sysv\n\t\t;;\n\tmerlin)\n\t\tbasic_machine=ns32k-utek\n\t\tos=-sysv\n\t\t;;\n\tmingw32)\n\t\tbasic_machine=i386-pc\n\t\tos=-mingw32\n\t\t;;\n\tminiframe)\n\t\tbasic_machine=m68000-convergent\n\t\t;;\n\t*mint | -mint[0-9]* | *MiNT | *MiNT[0-9]*)\n\t\tbasic_machine=m68k-atari\n\t\tos=-mint\n\t\t;;\n\tmips3*-*)\n\t\tbasic_machine=`echo $basic_machine | sed -e 's/mips3/mips64/'`\n\t\t;;\n\tmips3*)\n\t\tbasic_machine=`echo $basic_machine | sed -e 's/mips3/mips64/'`-unknown\n\t\t;;\n\tmmix*)\n\t\tbasic_machine=mmix-knuth\n\t\tos=-mmixware\n\t\t;;\n\tmonitor)\n\t\tbasic_machine=m68k-rom68k\n\t\tos=-coff\n\t\t;;\n\tmorphos)\n\t\tbasic_machine=powerpc-unknown\n\t\tos=-morphos\n\t\t;;\n\tmsdos)\n\t\tbasic_machine=i386-pc\n\t\tos=-msdos\n\t\t;;\n\tmvs)\n\t\tbasic_machine=i370-ibm\n\t\tos=-mvs\n\t\t;;\n\tncr3000)\n\t\tbasic_machine=i486-ncr\n\t\tos=-sysv4\n\t\t;;\n\tnetbsd386)\n\t\tbasic_machine=i386-unknown\n\t\tos=-netbsd\n\t\t;;\n\tnetwinder)\n\t\tbasic_machine=armv4l-rebel\n\t\tos=-linux\n\t\t;;\n\tnews | news700 | news800 | news900)\n\t\tbasic_machine=m68k-sony\n\t\tos=-newsos\n\t\t;;\n\tnews1000)\n\t\tbasic_machine=m68030-sony\n\t\tos=-newsos\n\t\t;;\n\tnews-3600 | risc-news)\n\t\tbasic_machine=mips-sony\n\t\tos=-newsos\n\t\t;;\n\tnecv70)\n\t\tbasic_machine=v70-nec\n\t\tos=-sysv\n\t\t;;\n\tnext | m*-next )\n\t\tbasic_machine=m68k-next\n\t\tcase $os in\n\t\t    -nextstep* )\n\t\t\t;;\n\t\t    -ns2*)\n\t\t      os=-nextstep2\n\t\t\t;;\n\t\t    *)\n\t\t      os=-nextstep3\n\t\t\t;;\n\t\tesac\n\t\t;;\n\tnh3000)\n\t\tbasic_machine=m68k-harris\n\t\tos=-cxux\n\t\t;;\n\tnh[45]000)\n\t\tbasic_machine=m88k-harris\n\t\tos=-cxux\n\t\t;;\n\tnindy960)\n\t\tbasic_machine=i960-intel\n\t\tos=-nindy\n\t\t;;\n\tmon960)\n\t\tbasic_machine=i960-intel\n\t\tos=-mon960\n\t\t;;\n\tnonstopux)\n\t\tbasic_machine=mips-compaq\n\t\tos=-nonstopux\n\t\t;;\n\tnp1)\n\t\tbasic_machine=np1-gould\n\t\t;;\n\tnsr-tandem)\n\t\tbasic_machine=nsr-tandem\n\t\t;;\n\top50n-* | op60c-*)\n\t\tbasic_machine=hppa1.1-oki\n\t\tos=-proelf\n\t\t;;\n\tor32 | or32-*)\n\t\tbasic_machine=or32-unknown\n\t\tos=-coff\n\t\t;;\n\tOSE68000 | ose68000)\n\t\tbasic_machine=m68000-ericsson\n\t\tos=-ose\n\t\t;;\n\tos68k)\n\t\tbasic_machine=m68k-none\n\t\tos=-os68k\n\t\t;;\n\tpa-hitachi)\n\t\tbasic_machine=hppa1.1-hitachi\n\t\tos=-hiuxwe2\n\t\t;;\n\tparagon)\n\t\tbasic_machine=i860-intel\n\t\tos=-osf\n\t\t;;\n\tpbd)\n\t\tbasic_machine=sparc-tti\n\t\t;;\n\tpbb)\n\t\tbasic_machine=m68k-tti\n\t\t;;\n\tpc532 | pc532-*)\n\t\tbasic_machine=ns32k-pc532\n\t\t;;\n\tpentium | p5 | k5 | k6 | nexgen | viac3)\n\t\tbasic_machine=i586-pc\n\t\t;;\n\tpentiumpro | p6 | 6x86 | athlon | athlon_*)\n\t\tbasic_machine=i686-pc\n\t\t;;\n\tpentiumii | pentium2)\n\t\tbasic_machine=i686-pc\n\t\t;;\n\tpentium-* | p5-* | k5-* | k6-* | nexgen-* | viac3-*)\n\t\tbasic_machine=i586-`echo $basic_machine | sed 's/^[^-]*-//'`\n\t\t;;\n\tpentiumpro-* | p6-* | 6x86-* | athlon-*)\n\t\tbasic_machine=i686-`echo $basic_machine | sed 's/^[^-]*-//'`\n\t\t;;\n\tpentiumii-* | pentium2-*)\n\t\tbasic_machine=i686-`echo $basic_machine | sed 's/^[^-]*-//'`\n\t\t;;\n\tpn)\n\t\tbasic_machine=pn-gould\n\t\t;;\n\tpower)\tbasic_machine=power-ibm\n\t\t;;\n\tppc)\tbasic_machine=powerpc-unknown\n\t\t;;\n\tppc-*)\tbasic_machine=powerpc-`echo $basic_machine | sed 's/^[^-]*-//'`\n\t\t;;\n\tppcle | powerpclittle | ppc-le | powerpc-little)\n\t\tbasic_machine=powerpcle-unknown\n\t\t;;\n\tppcle-* | powerpclittle-*)\n\t\tbasic_machine=powerpcle-`echo $basic_machine | sed 's/^[^-]*-//'`\n\t\t;;\n\tppc64)\tbasic_machine=powerpc64-unknown\n\t\t;;\n\tppc64-*) basic_machine=powerpc64-`echo $basic_machine | sed 's/^[^-]*-//'`\n\t\t;;\n\tppc64le | powerpc64little | ppc64-le | powerpc64-little)\n\t\tbasic_machine=powerpc64le-unknown\n\t\t;;\n\tppc64le-* | powerpc64little-*)\n\t\tbasic_machine=powerpc64le-`echo $basic_machine | sed 's/^[^-]*-//'`\n\t\t;;\n\tps2)\n\t\tbasic_machine=i386-ibm\n\t\t;;\n\tpw32)\n\t\tbasic_machine=i586-unknown\n\t\tos=-pw32\n\t\t;;\n\trom68k)\n\t\tbasic_machine=m68k-rom68k\n\t\tos=-coff\n\t\t;;\n\trm[46]00)\n\t\tbasic_machine=mips-siemens\n\t\t;;\n\trtpc | rtpc-*)\n\t\tbasic_machine=romp-ibm\n\t\t;;\n\ts390 | s390-*)\n\t\tbasic_machine=s390-ibm\n\t\t;;\n\ts390x | s390x-*)\n\t\tbasic_machine=s390x-ibm\n\t\t;;\n\tsa29200)\n\t\tbasic_machine=a29k-amd\n\t\tos=-udi\n\t\t;;\n\tsb1)\n\t\tbasic_machine=mipsisa64sb1-unknown\n\t\t;;\n\tsb1el)\n\t\tbasic_machine=mipsisa64sb1el-unknown\n\t\t;;\n\tsequent)\n\t\tbasic_machine=i386-sequent\n\t\t;;\n\tsh)\n\t\tbasic_machine=sh-hitachi\n\t\tos=-hms\n\t\t;;\n\tsparclite-wrs | simso-wrs)\n\t\tbasic_machine=sparclite-wrs\n\t\tos=-vxworks\n\t\t;;\n\tsps7)\n\t\tbasic_machine=m68k-bull\n\t\tos=-sysv2\n\t\t;;\n\tspur)\n\t\tbasic_machine=spur-unknown\n\t\t;;\n\tst2000)\n\t\tbasic_machine=m68k-tandem\n\t\t;;\n\tstratus)\n\t\tbasic_machine=i860-stratus\n\t\tos=-sysv4\n\t\t;;\n\tsun2)\n\t\tbasic_machine=m68000-sun\n\t\t;;\n\tsun2os3)\n\t\tbasic_machine=m68000-sun\n\t\tos=-sunos3\n\t\t;;\n\tsun2os4)\n\t\tbasic_machine=m68000-sun\n\t\tos=-sunos4\n\t\t;;\n\tsun3os3)\n\t\tbasic_machine=m68k-sun\n\t\tos=-sunos3\n\t\t;;\n\tsun3os4)\n\t\tbasic_machine=m68k-sun\n\t\tos=-sunos4\n\t\t;;\n\tsun4os3)\n\t\tbasic_machine=sparc-sun\n\t\tos=-sunos3\n\t\t;;\n\tsun4os4)\n\t\tbasic_machine=sparc-sun\n\t\tos=-sunos4\n\t\t;;\n\tsun4sol2)\n\t\tbasic_machine=sparc-sun\n\t\tos=-solaris2\n\t\t;;\n\tsun3 | sun3-*)\n\t\tbasic_machine=m68k-sun\n\t\t;;\n\tsun4)\n\t\tbasic_machine=sparc-sun\n\t\t;;\n\tsun386 | sun386i | roadrunner)\n\t\tbasic_machine=i386-sun\n\t\t;;\n\tsv1)\n\t\tbasic_machine=sv1-cray\n\t\tos=-unicos\n\t\t;;\n\tsymmetry)\n\t\tbasic_machine=i386-sequent\n\t\tos=-dynix\n\t\t;;\n\tt3d)\n\t\tbasic_machine=alpha-cray\n\t\tos=-unicos\n\t\t;;\n\tt3e)\n\t\tbasic_machine=alphaev5-cray\n\t\tos=-unicos\n\t\t;;\n\tt90)\n\t\tbasic_machine=t90-cray\n\t\tos=-unicos\n\t\t;;\n        tic4x | c4x*)\n\t\tbasic_machine=tic4x-unknown\n\t\tos=-coff\n\t\t;;\n\ttic54x | c54x*)\n\t\tbasic_machine=tic54x-unknown\n\t\tos=-coff\n\t\t;;\n\ttx39)\n\t\tbasic_machine=mipstx39-unknown\n\t\t;;\n\ttx39el)\n\t\tbasic_machine=mipstx39el-unknown\n\t\t;;\n\ttoad1)\n\t\tbasic_machine=pdp10-xkl\n\t\tos=-tops20\n\t\t;;\n\ttower | tower-32)\n\t\tbasic_machine=m68k-ncr\n\t\t;;\n\tudi29k)\n\t\tbasic_machine=a29k-amd\n\t\tos=-udi\n\t\t;;\n\tultra3)\n\t\tbasic_machine=a29k-nyu\n\t\tos=-sym1\n\t\t;;\n\tv810 | necv810)\n\t\tbasic_machine=v810-nec\n\t\tos=-none\n\t\t;;\n\tvaxv)\n\t\tbasic_machine=vax-dec\n\t\tos=-sysv\n\t\t;;\n\tvms)\n\t\tbasic_machine=vax-dec\n\t\tos=-vms\n\t\t;;\n\tvpp*|vx|vx-*)\n\t\tbasic_machine=f301-fujitsu\n\t\t;;\n\tvxworks960)\n\t\tbasic_machine=i960-wrs\n\t\tos=-vxworks\n\t\t;;\n\tvxworks68)\n\t\tbasic_machine=m68k-wrs\n\t\tos=-vxworks\n\t\t;;\n\tvxworks29k)\n\t\tbasic_machine=a29k-wrs\n\t\tos=-vxworks\n\t\t;;\n\tw65*)\n\t\tbasic_machine=w65-wdc\n\t\tos=-none\n\t\t;;\n\tw89k-*)\n\t\tbasic_machine=hppa1.1-winbond\n\t\tos=-proelf\n\t\t;;\n\twindows32)\n\t\tbasic_machine=i386-pc\n\t\tos=-windows32-msvcrt\n\t\t;;\n\txps | xps100)\n\t\tbasic_machine=xps100-honeywell\n\t\t;;\n\tymp)\n\t\tbasic_machine=ymp-cray\n\t\tos=-unicos\n\t\t;;\n\tz8k-*-coff)\n\t\tbasic_machine=z8k-unknown\n\t\tos=-sim\n\t\t;;\n\tnone)\n\t\tbasic_machine=none-none\n\t\tos=-none\n\t\t;;\n\n# Here we handle the default manufacturer of certain CPU types.  It is in\n# some cases the only manufacturer, in others, it is the most popular.\n\tw89k)\n\t\tbasic_machine=hppa1.1-winbond\n\t\t;;\n\top50n)\n\t\tbasic_machine=hppa1.1-oki\n\t\t;;\n\top60c)\n\t\tbasic_machine=hppa1.1-oki\n\t\t;;\n\tromp)\n\t\tbasic_machine=romp-ibm\n\t\t;;\n\trs6000)\n\t\tbasic_machine=rs6000-ibm\n\t\t;;\n\tvax)\n\t\tbasic_machine=vax-dec\n\t\t;;\n\tpdp10)\n\t\t# there are many clones, so DEC is not a safe bet\n\t\tbasic_machine=pdp10-unknown\n\t\t;;\n\tpdp11)\n\t\tbasic_machine=pdp11-dec\n\t\t;;\n\twe32k)\n\t\tbasic_machine=we32k-att\n\t\t;;\n\tsh3 | sh4 | sh3eb | sh4eb | sh[1234]le | sh3ele)\n\t\tbasic_machine=sh-unknown\n\t\t;;\n\tsh64)\n\t\tbasic_machine=sh64-unknown\n\t\t;;\n\tsparc | sparcv9 | sparcv9b)\n\t\tbasic_machine=sparc-sun\n\t\t;;\n\tcydra)\n\t\tbasic_machine=cydra-cydrome\n\t\t;;\n\torion)\n\t\tbasic_machine=orion-highlevel\n\t\t;;\n\torion105)\n\t\tbasic_machine=clipper-highlevel\n\t\t;;\n\tmac | mpw | mac-mpw)\n\t\tbasic_machine=m68k-apple\n\t\t;;\n\tpmac | pmac-mpw)\n\t\tbasic_machine=powerpc-apple\n\t\t;;\n\t*-unknown)\n\t\t# Make sure to match an already-canonicalized machine name.\n\t\t;;\n\t*)\n\t\techo Invalid configuration \\`$1\\': machine \\`$basic_machine\\' not recognized 1>&2\n\t\texit 1\n\t\t;;\nesac\n\n# Here we canonicalize certain aliases for manufacturers.\ncase $basic_machine in\n\t*-digital*)\n\t\tbasic_machine=`echo $basic_machine | sed 's/digital.*/dec/'`\n\t\t;;\n\t*-commodore*)\n\t\tbasic_machine=`echo $basic_machine | sed 's/commodore.*/cbm/'`\n\t\t;;\n\t*)\n\t\t;;\nesac\n\n# Decode manufacturer-specific aliases for certain operating systems.\n\nif [ x\"$os\" != x\"\" ]\nthen\ncase $os in\n        # First match some system type aliases\n        # that might get confused with valid system types.\n\t# -solaris* is a basic system type, with this one exception.\n\t-solaris1 | -solaris1.*)\n\t\tos=`echo $os | sed -e 's|solaris1|sunos4|'`\n\t\t;;\n\t-solaris)\n\t\tos=-solaris2\n\t\t;;\n\t-svr4*)\n\t\tos=-sysv4\n\t\t;;\n\t-unixware*)\n\t\tos=-sysv4.2uw\n\t\t;;\n\t-gnu/linux*)\n\t\tos=`echo $os | sed -e 's|gnu/linux|linux-gnu|'`\n\t\t;;\n\t# First accept the basic system types.\n\t# The portable systems comes first.\n\t# Each alternative MUST END IN A *, to match a version number.\n\t# -sysv* is not here because it comes later, after sysvr4.\n\t-gnu* | -bsd* | -mach* | -minix* | -genix* | -ultrix* | -irix* \\\n\t      | -*vms* | -sco* | -esix* | -isc* | -aix* | -sunos | -sunos[34]*\\\n\t      | -hpux* | -unos* | -osf* | -luna* | -dgux* | -solaris* | -sym* \\\n\t      | -amigaos* | -amigados* | -msdos* | -newsos* | -unicos* | -aof* \\\n\t      | -aos* \\\n\t      | -nindy* | -vxsim* | -vxworks* | -ebmon* | -hms* | -mvs* \\\n\t      | -clix* | -riscos* | -uniplus* | -iris* | -rtu* | -xenix* \\\n\t      | -hiux* | -386bsd* | -netbsd* | -openbsd* | -freebsd* | -riscix* \\\n\t      | -lynxos* | -bosx* | -nextstep* | -cxux* | -aout* | -elf* | -oabi* \\\n\t      | -ptx* | -coff* | -ecoff* | -winnt* | -domain* | -vsta* \\\n\t      | -udi* | -eabi* | -lites* | -ieee* | -go32* | -aux* \\\n\t      | -chorusos* | -chorusrdb* \\\n\t      | -cygwin* | -pe* | -psos* | -moss* | -proelf* | -rtems* \\\n\t      | -mingw32* | -linux-gnu* | -uxpv* | -beos* | -mpeix* | -udk* \\\n\t      | -interix* | -uwin* | -rhapsody* | -darwin* | -opened* \\\n\t      | -openstep* | -oskit* | -conix* | -pw32* | -nonstopux* \\\n\t      | -storm-chaos* | -tops10* | -tenex* | -tops20* | -its* \\\n\t      | -os2* | -vos* | -palmos* | -uclinux* | -nucleus* \\\n\t      | -morphos* | -superux* | -rtmk* | -rtmk-nova* | -windiss* | -powermax*)\n\t# Remember, each alternative MUST END IN *, to match a version number.\n\t\t;;\n\t-qnx*)\n\t\tcase $basic_machine in\n\t\t    x86-* | i*86-*)\n\t\t\t;;\n\t\t    *)\n\t\t\tos=-nto$os\n\t\t\t;;\n\t\tesac\n\t\t;;\n\t-nto*)\n\t\tos=-nto-qnx\n\t\t;;\n\t-sim | -es1800* | -hms* | -xray | -os68k* | -none* | -v88r* \\\n\t      | -windows* | -osx | -abug | -netware* | -os9* | -beos* \\\n\t      | -macos* | -mpw* | -magic* | -mmixware* | -mon960* | -lnews*)\n\t\t;;\n\t-mac*)\n\t\tos=`echo $os | sed -e 's|mac|macos|'`\n\t\t;;\n\t-linux*)\n\t\tos=`echo $os | sed -e 's|linux|linux-gnu|'`\n\t\t;;\n\t-sunos5*)\n\t\tos=`echo $os | sed -e 's|sunos5|solaris2|'`\n\t\t;;\n\t-sunos6*)\n\t\tos=`echo $os | sed -e 's|sunos6|solaris3|'`\n\t\t;;\n\t-opened*)\n\t\tos=-openedition\n\t\t;;\n\t-wince*)\n\t\tos=-wince\n\t\t;;\n\t-osfrose*)\n\t\tos=-osfrose\n\t\t;;\n\t-osf*)\n\t\tos=-osf\n\t\t;;\n\t-utek*)\n\t\tos=-bsd\n\t\t;;\n\t-dynix*)\n\t\tos=-bsd\n\t\t;;\n\t-acis*)\n\t\tos=-aos\n\t\t;;\n\t-atheos*)\n\t\tos=-atheos\n\t\t;;\n\t-386bsd)\n\t\tos=-bsd\n\t\t;;\n\t-ctix* | -uts*)\n\t\tos=-sysv\n\t\t;;\n\t-nova*)\n\t\tos=-rtmk-nova\n\t\t;;\n\t-ns2 )\n\t\tos=-nextstep2\n\t\t;;\n\t-nsk*)\n\t\tos=-nsk\n\t\t;;\n\t# Preserve the version number of sinix5.\n\t-sinix5.*)\n\t\tos=`echo $os | sed -e 's|sinix|sysv|'`\n\t\t;;\n\t-sinix*)\n\t\tos=-sysv4\n\t\t;;\n\t-triton*)\n\t\tos=-sysv3\n\t\t;;\n\t-oss*)\n\t\tos=-sysv3\n\t\t;;\n\t-svr4)\n\t\tos=-sysv4\n\t\t;;\n\t-svr3)\n\t\tos=-sysv3\n\t\t;;\n\t-sysvr4)\n\t\tos=-sysv4\n\t\t;;\n\t# This must come after -sysvr4.\n\t-sysv*)\n\t\t;;\n\t-ose*)\n\t\tos=-ose\n\t\t;;\n\t-es1800*)\n\t\tos=-ose\n\t\t;;\n\t-xenix)\n\t\tos=-xenix\n\t\t;;\n\t-*mint | -mint[0-9]* | -*MiNT | -MiNT[0-9]*)\n\t\tos=-mint\n\t\t;;\n\t-none)\n\t\t;;\n\t*)\n\t\t# Get rid of the `-' at the beginning of $os.\n\t\tos=`echo $os | sed 's/[^-]*-//'`\n\t\techo Invalid configuration \\`$1\\': system \\`$os\\' not recognized 1>&2\n\t\texit 1\n\t\t;;\nesac\nelse\n\n# Here we handle the default operating systems that come with various machines.\n# The value should be what the vendor currently ships out the door with their\n# machine or put another way, the most popular os provided with the machine.\n\n# Note that if you're going to try to match \"-MANUFACTURER\" here (say,\n# \"-sun\"), then you have to tell the case statement up towards the top\n# that MANUFACTURER isn't an operating system.  Otherwise, code above\n# will signal an error saying that MANUFACTURER isn't an operating\n# system, and we'll never get to this point.\n\ncase $basic_machine in\n\t*-acorn)\n\t\tos=-riscix1.2\n\t\t;;\n\tarm*-rebel)\n\t\tos=-linux\n\t\t;;\n\tarm*-semi)\n\t\tos=-aout\n\t\t;;\n\t# This must come before the *-dec entry.\n\tpdp10-*)\n\t\tos=-tops20\n\t\t;;\n\tpdp11-*)\n\t\tos=-none\n\t\t;;\n\t*-dec | vax-*)\n\t\tos=-ultrix4.2\n\t\t;;\n\tm68*-apollo)\n\t\tos=-domain\n\t\t;;\n\ti386-sun)\n\t\tos=-sunos4.0.2\n\t\t;;\n\tm68000-sun)\n\t\tos=-sunos3\n\t\t# This also exists in the configure program, but was not the\n\t\t# default.\n\t\t# os=-sunos4\n\t\t;;\n\tm68*-cisco)\n\t\tos=-aout\n\t\t;;\n\tmips*-cisco)\n\t\tos=-elf\n\t\t;;\n\tmips*-*)\n\t\tos=-elf\n\t\t;;\n\tor32-*)\n\t\tos=-coff\n\t\t;;\n\t*-tti)\t# must be before sparc entry or we get the wrong os.\n\t\tos=-sysv3\n\t\t;;\n\tsparc-* | *-sun)\n\t\tos=-sunos4.1.1\n\t\t;;\n\t*-be)\n\t\tos=-beos\n\t\t;;\n\t*-ibm)\n\t\tos=-aix\n\t\t;;\n\t*-wec)\n\t\tos=-proelf\n\t\t;;\n\t*-winbond)\n\t\tos=-proelf\n\t\t;;\n\t*-oki)\n\t\tos=-proelf\n\t\t;;\n\t*-hp)\n\t\tos=-hpux\n\t\t;;\n\t*-hitachi)\n\t\tos=-hiux\n\t\t;;\n\ti860-* | *-att | *-ncr | *-altos | *-motorola | *-convergent)\n\t\tos=-sysv\n\t\t;;\n\t*-cbm)\n\t\tos=-amigaos\n\t\t;;\n\t*-dg)\n\t\tos=-dgux\n\t\t;;\n\t*-dolphin)\n\t\tos=-sysv3\n\t\t;;\n\tm68k-ccur)\n\t\tos=-rtu\n\t\t;;\n\tm88k-omron*)\n\t\tos=-luna\n\t\t;;\n\t*-next )\n\t\tos=-nextstep\n\t\t;;\n\t*-sequent)\n\t\tos=-ptx\n\t\t;;\n\t*-crds)\n\t\tos=-unos\n\t\t;;\n\t*-ns)\n\t\tos=-genix\n\t\t;;\n\ti370-*)\n\t\tos=-mvs\n\t\t;;\n\t*-next)\n\t\tos=-nextstep3\n\t\t;;\n\t*-gould)\n\t\tos=-sysv\n\t\t;;\n\t*-highlevel)\n\t\tos=-bsd\n\t\t;;\n\t*-encore)\n\t\tos=-bsd\n\t\t;;\n\t*-sgi)\n\t\tos=-irix\n\t\t;;\n\t*-siemens)\n\t\tos=-sysv4\n\t\t;;\n\t*-masscomp)\n\t\tos=-rtu\n\t\t;;\n\tf30[01]-fujitsu | f700-fujitsu)\n\t\tos=-uxpv\n\t\t;;\n\t*-rom68k)\n\t\tos=-coff\n\t\t;;\n\t*-*bug)\n\t\tos=-coff\n\t\t;;\n\t*-apple)\n\t\tos=-macos\n\t\t;;\n\t*-atari*)\n\t\tos=-mint\n\t\t;;\n\t*)\n\t\tos=-none\n\t\t;;\nesac\nfi\n\n# Here we handle the case where we know the os, and the CPU type, but not the\n# manufacturer.  We pick the logical manufacturer.\nvendor=unknown\ncase $basic_machine in\n\t*-unknown)\n\t\tcase $os in\n\t\t\t-riscix*)\n\t\t\t\tvendor=acorn\n\t\t\t\t;;\n\t\t\t-sunos*)\n\t\t\t\tvendor=sun\n\t\t\t\t;;\n\t\t\t-aix*)\n\t\t\t\tvendor=ibm\n\t\t\t\t;;\n\t\t\t-beos*)\n\t\t\t\tvendor=be\n\t\t\t\t;;\n\t\t\t-hpux*)\n\t\t\t\tvendor=hp\n\t\t\t\t;;\n\t\t\t-mpeix*)\n\t\t\t\tvendor=hp\n\t\t\t\t;;\n\t\t\t-hiux*)\n\t\t\t\tvendor=hitachi\n\t\t\t\t;;\n\t\t\t-unos*)\n\t\t\t\tvendor=crds\n\t\t\t\t;;\n\t\t\t-dgux*)\n\t\t\t\tvendor=dg\n\t\t\t\t;;\n\t\t\t-luna*)\n\t\t\t\tvendor=omron\n\t\t\t\t;;\n\t\t\t-genix*)\n\t\t\t\tvendor=ns\n\t\t\t\t;;\n\t\t\t-mvs* | -opened*)\n\t\t\t\tvendor=ibm\n\t\t\t\t;;\n\t\t\t-ptx*)\n\t\t\t\tvendor=sequent\n\t\t\t\t;;\n\t\t\t-vxsim* | -vxworks* | -windiss*)\n\t\t\t\tvendor=wrs\n\t\t\t\t;;\n\t\t\t-aux*)\n\t\t\t\tvendor=apple\n\t\t\t\t;;\n\t\t\t-hms*)\n\t\t\t\tvendor=hitachi\n\t\t\t\t;;\n\t\t\t-mpw* | -macos*)\n\t\t\t\tvendor=apple\n\t\t\t\t;;\n\t\t\t-*mint | -mint[0-9]* | -*MiNT | -MiNT[0-9]*)\n\t\t\t\tvendor=atari\n\t\t\t\t;;\n\t\t\t-vos*)\n\t\t\t\tvendor=stratus\n\t\t\t\t;;\n\t\tesac\n\t\tbasic_machine=`echo $basic_machine | sed \"s/unknown/$vendor/\"`\n\t\t;;\nesac\n\necho $basic_machine$os\nexit 0\n\n# Local variables:\n# eval: (add-hook 'write-file-hooks 'time-stamp)\n# time-stamp-start: \"timestamp='\"\n# time-stamp-format: \"%:y-%02m-%02d\"\n# time-stamp-end: \"'\"\n# End:\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 0.72265625,
          "content": "\n# Process with autoconf to create configure script\n\nAC_INIT(dh, INTERNAL, nosupport@all)\nAC_PREREQ(2.52)\nAC_COPYRIGHT([Copyright released into the public domain by Andrew Mortensen, January 2008.])\nAC_CONFIG_SRCDIR([duti.c])\n\nbuild_date=`date \"+%B %d, %Y\"`\nAC_SUBST(build_date)\n\n# program checks\nAC_PROG_AWK\nAC_PROG_CC\nAC_PROG_INSTALL\n\nAC_CANONICAL_SYSTEM\nDUTI_CHECK_SDK\nDUTI_CHECK_DEPLOYMENT_TARGET\n\n# function checks\nAC_CHECK_FUNC(strlcpy,have_strlcpy=yes,)\nif test x_$have_strlcpy = x_; then\n    AC_ERROR([required function strlcpy not found.])\nfi\n\nif test x_$OPTOPTS = x_; then\n    if test x_$GCC = x_yes; then\n\tOPTOPTS=\"$OPTOPTS -Wall -Wmissing-prototypes\"\n    fi\nfi\nAC_SUBST(OPTOPTS)\n\nAC_CONFIG_FILES([Makefile version.c])\nAC_OUTPUT\n"
        },
        {
          "name": "duti.1",
          "type": "blob",
          "size": 6.1982421875,
          "content": ".TH duti \"1\" \"_DUTI_BUILD_DATE\" \"Andrew Mortensen\" \"User Commands\"\n.SH NAME\n.B duti\n\\- set default document and URL handlers\n.SH SYNOPSIS\n.B duti\n[\n.BI \\-hVv\n] [\n.BI \\-d\\  uti\n] [\n.BI \\-l\\  uti\n] [\n.I settings_path\n]\n.sp\n.B duti\n.BI \\-s\n.I bundle_id\n{\n.I uti\n|\n.I url_scheme\n|\n.I extension\n|\n.I MIME_type\n}\n[\n.I role\n]\n.sp\n.B duti\n.BI \\-x\\  extension\n.sp\n.SH DESCRIPTION\n.B duti\nsets applications as default handlers for Apple's Uniform Type Identifiers,\nfor URL schemes, filename extensions, and MIME types.\nIf\n.I settings_path\nis not given on the command line,\n.B duti\nreads settings lines from stdin. If\n.I settings_path\nis a directory,\n.B duti\napplies settings from the files in\n.IR settings_path .\n.sp\nThe\n.BI \\-s\nflag tells\n.B duti\nto set a handler based on arguments from the command line. Two arguments\nfollowing\n.BI \\-s\nmeans that\n.B duti\nwill set the handler for a URL scheme. Three arguments means\n.B duti\nwill set the handler for a UTI, an extension or a MIME type, depending on\nthe formatting of the second argument.\n.B duti\ntreats an argument beginning with a dot as an extension. If the argument\ncontains no dots,\n.B duti\nalso considers the argument a filename extension, unless it contains a slash,\nin which case\n.B duti\ntreats the argument as a MIME type. In all other cases,\n.B duti\ntreats the second argument as a UTI.\n.sp\n.B duti\n.BI \\-x\nretrieves and prints out information describing the default application\nfor files with the extension\n.IR extension .\n.sp\nSee\n.B EXAMPLES\nbelow for usage cases.\n.sp\n.SH SETTINGS FILE\nA settings file is made up of lines with the following format:\n.sp\n.br\n\tapp_id    UTI    role\n.br\n.sp\nThe\n.I app_id\nis a bundle ID representing the application that will act as the\nhandler for documents associated with\n.IR UTI .\nFor example:\n.sp\n.br\n\tcom.apple.Safari\tpublic.html\tall\n.br\n.sp\nwould cause\n.B duti\nto set Safari as the default handler in all situations for HTML documents.\nA settings file can also contain lines with this format:\n.sp\n.br\n\tapp_id    url_scheme\n.br\n.sp\nIn this case,\n.I app_id\nis again a bundle ID, this time for the application that will act as the\ndefault handler for\n.IR url_scheme .\nFor example:\n.sp\n.br\n\torg.mozilla.Firefox     ftp\n.br\n.sp\nwould cause\n.B duti\nto set Firefox as the handler for \"ftp://\" URLs.\n.SH SETTINGS PLIST\nIf the extension of the file given to\n.B duti\nis\n.IR \\.plist ,\n.B duti\ntreats the file as an XML property list (plist).\nThe plist must contain a key-value pair, in which the key is \"DUTISettings\"\nand the value is an array of dictionaries. Each dictionary in the array\ncontains three key-value pairs representing the application's bundle ID,\nthe UTI and the role, respectively. Alternatively, a dictionary in the array\nmay contain two key-value pairs representing the application's bundle ID,\nand the URL scheme. A simple plist designed to set Safari as the default\nhandler of HTML files, and Firefox as the default handler for \"ftp://\" URLs,\nwould look like this:\n.sp\n.br\n\t<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n.br\n\t<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n.br\n\t<plist version=\"1.0\">\n.br\n\t<dict>\n.br\n\t\t<key>DUTISettings</key>\n.br\n\t\t<array>\n.br\n\t\t\t<dict>\n.br\n\t\t\t\t<key>DUTIBundleIdentifier</key>\n.br\n\t\t\t\t<string>com.apple.Safari</string>\n.br\n\t\t\t\t<key>DUTIUniformTypeIdentifier</key>\n.br\n\t\t\t\t<string>public.html</string>\n.br\n\t\t\t\t<key>DUTIRole</key>\n.br\n\t\t\t\t<string>all</string>\n.br\n\t\t\t</dict>\n.br\n\t\t\t<dict>\n.br\n\t\t\t\t<key>DUTIBundleIdentifier</key>\n.br\n\t\t\t\t<string>org.mozilla.Firefox</string>\n.br\n\t\t\t\t<key>DUTIURLScheme</key>\n.br\n\t\t\t\t<string>ftp</string>\n.br\n\t\t\t</dict>\n.br\n\t\t</array>\n.br\n\t</dict>\n.br\n\t</plist>\n.br\n.sp\n.SH ROLES\nValid roles are defined as follows:\n.sp\n.TP 19\n.B all\napplication handles all roles for the given UTI.\n.TP 19\n.B viewer\napplication handles reading and displaying documents with the given UTI.\n.TP 19\n.B editor\napplication can manipulate and save the item. Implies viewer.\n.TP 19\n.B shell\napplication can execute the item.\n.TP 19\n.B none\napplication cannot open the item, but provides an icon for the given UTI.\n.SH EXAMPLES\nRunning\n.B duti\nwith\n.BI \\-s\n:\n.sp\n.br\n\t# Set Safari as the default handler for HTML documents\n.br\n\tduti -s com.apple.Safari public.html all\n.br\n.sp\n\t# Set Finder as the default handler for the ftp:// URL scheme\n.br\n\tduti -s com.apple.Finder ftp\n.sp\n\nRetrieving default application information for an extension:\n.sp\n.br\n\t# default application information for .html files\n.br\n\t% duti -x html\n.br\n\tSafari\n.br\n\t/Applications/Safari.app\n.br\n\tcom.apple.Safari\n.br\n.sp\n\nThe following examples can be used by passing them to\n.B duti\non stdin or as lines in a .duti file.\n.sp\nSet TextEdit as the default viewer for Microsoft Word documents:\n.sp\n.br\n\tcom.apple.TextEdit    com.microsoft.word.doc    viewer\n.br\n.sp\nSet VLC as the default viewer for files with .m4v extensions:\n.sp\n.br\n\torg.videolan.vlc   m4v\tviewer\n.br\n.sp\nSet iHook as the default executor of shell scripts:\n.sp\n.br\n\tedu.umich.iHook    public.shell-script    shell\n.br\n.sp\nSet Xcode as the default editor for C source files:\n.sp\n.br\n\tcom.apple.Xcode    public.c-source    editor\n.br\n.sp\n.SH OPTIONS\n.TP 19\n.BI \\-d\\  uti\ndisplay the default handler for\n.I uti\nand exit.\n.TP 19\n.B \\-h\nprint usage and exit.\n.TP 19\n.BI \\-l\\  uti\ndisplay all handlers for\n.I uti\nand exit.\n.TP 19\n.BI \\-s\nset the handler from data provided on the command line.\n.TP 19\n.B \\-V\nprint version number and exit.\n.TP 19\n.B \\-v\nverbose output.\n.TP 19\n.BI \\-x\\  ext\nprint information describing the default application for extension\n.IR ext .\n.sp\n.SH EXIT STATUS\n.TP 5\n0\nAll settings applied or displayed successfully.\n.TP 5\n1\nSettings could not be applied, or the UTI has no handler.\n.TP 5\n>1\nError.\n.sp\n.SH MORE INFO\nmacOS ships with a number of UTIs already defined. Most third-party\nsoftware is responsible for defining its own UTIs. Apple documents UTIs\nin the Apple Developer Documentation Archive at:\n.sp\n.br\n\thttps://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/understanding_utis/understand_utis_intro/understand_utis_intro.html\n.br\n.sp\nTo get a list of UTIs on your system, you can use the following command line:\n.sp\n.br\n\t$(mdfind -name lsregister) -dump | grep -E '^uti:' \\\\\n.br\n\t\t| awk '{ print $2 }' | sort | uniq\n.sp\n.SH SEE ALSO\nplutil(1), plist(5)\n"
        },
        {
          "name": "duti.c",
          "type": "blob",
          "size": 3.125,
          "content": "/* duti: set default handlers for document types based on a settings file. */\n\n#include <ApplicationServices/ApplicationServices.h>\n#include <CoreFoundation/CoreFoundation.h>\n\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <stdio.h>\n#include <string.h>\n#include <unistd.h>\n\n#include \"handler.h\"\n\nextern char\t\t*duti_version;\nextern int\t\tnroles;\nint\t\t\tverbose = 0;\n\nstruct roles\t\trtm[] = {\n    { \"none\",   kLSRolesNone },\n    { \"viewer\", kLSRolesViewer },\n    { \"editor\", kLSRolesEditor },\n    { \"shell\",  kLSRolesShell },\n    { \"all\",    kLSRolesAll },\n};\n\n    int\nmain( int ac, char *av[] )\n{\n    struct stat\t\tst;\n    int\t\t\tc, err = 0;\n    int\t\t\tset = 0;\n    int\t\t\t( *handler_f )( char * );\n    char\t\t*path = NULL;\n    char\t\t*p;\n\n    extern int\t\toptind;\n    extern char\t\t*optarg;\n\n    while (( c = getopt( ac, av, \"d:e:l:hsu:Vvx:\" )) != -1 ) {\n\tswitch ( c ) {\n\tcase 'd':\t/* show default handler for UTI */\n\t    return( uti_handler_show( optarg, 0 ));\n\n\tcase 'e':\t/* UTI declarations for extension */\n\t\treturn( duti_utis_for_extension( optarg ));\n\n\tcase 'h':\t/* help */\n\tdefault:\n\t    err++;\n\t    break;\n\n\tcase 'l':\t/* list all handlers for UTI */\n\t    return( uti_handler_show( optarg, 1 ));\n\n\tcase 's':\t/* set handler */\n\t    set = 1;\n\t    break;\n\n\tcase 'u':\t/* UTI declarations */\n\t\treturn( duti_utis( optarg ));\n\n\tcase 'V':\t/* version */\n\t    printf( \"%s\\n\", duti_version );\n\t    exit( 0 );\n\n\tcase 'v':\t/* verbose */\n\t    verbose = 1;\n\t    break;\n\n\tcase 'x':\t/* info for extension */\n\t    return( duti_default_app_for_extension( optarg ));\n\t}\n    }\n\n    nroles = sizeof( rtm ) / sizeof( rtm[ 0 ] );\n\n    switch (( ac - optind )) {\n    case 0 :\t/* read from stdin */\n\tif ( set ) {\n\t    err++;\n\t}\n\tbreak;\n\n    case 1 :\t/* read from file or directory */\n\tif ( set ) {\n\t    err++;\n\t}\n\tpath = av[ optind ];\n\tbreak;\n\n    case 2 :\t/* set URI handler */\n\tif ( set ) {\n\t    return( duti_handler_set( av[ optind ],\n\t\t    av[ optind + 1 ], NULL ));\n\t}\n\t/* this fallthrough works because set == 0 */\n\t\n    case 3 :\t/* set UTI handler */\n\tif ( set ) {\n\t    return( duti_handler_set( av[ optind ],\n\t\t    av[ optind + 1 ], av[ optind + 2 ] ));\n\t}\n\t/* fallthrough to error */\n    \n    default :\t/* error */\n\terr++;\n\tbreak;\n    }\n\n    if ( err ) {\n\tfprintf( stderr, \"usage: %s [ -hvV ] [ -d uti ] [ -l uti ] \"\n\t\t\t \"[ settings_path ]\\n\", av[ 0 ] );\n\tfprintf( stderr, \"usage: %s -s bundle_id { uti | url_scheme } \"\n\t\t\t \"[ role ]\\n\", av[ 0 ] );\n\tfprintf( stderr, \"usage: %s -x extension\\n\", av[ 0 ] );\n\texit( 1 );\n    }\n\n    /* by default, read from a FILE stream */\n    handler_f = fsethandler;\n\n    if ( path ) {\n\tif ( stat( path, &st ) != 0 ) {\n\t    fprintf( stderr, \"stat %s: %s\\n\", path, strerror( errno ));\n\t    exit( 2 );\n\t}\n\tswitch ( st.st_mode & S_IFMT ) {\n\tcase S_IFDIR:\t/* directory of settings files */\n\t    handler_f = dirsethandler;\n\t    break;\n\n\tcase S_IFREG:\t/* settings file or plist */\n\t    if (( p = strrchr( path, '.' )) != NULL ) {\n\t\tp++;\n\t\tif ( strcmp( p, \"plist\" ) == 0 ) {\n\t\t    handler_f = psethandler;\n\t\t}\n\t    }\n\t    break;\n\n\tdefault:\n\t    fprintf( stderr, \"%s: not a supported settings path\\n\", path );\n\t    exit( 1 );\n\t}\n    }\n\n    return( handler_f( path ));\n}\n"
        },
        {
          "name": "handler.c",
          "type": "blob",
          "size": 18.5791015625,
          "content": "#include <ApplicationServices/ApplicationServices.h>\n#include <CoreFoundation/CoreFoundation.h>\n\n#include <sys/types.h>\n#include <sys/param.h>\n#include <sys/stat.h>\n#include <dirent.h>\n#include <errno.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include \"handler.h\"\n#include \"plist.h\"\n#include \"util.h\"\n\nextern int\t\tverbose;\nextern struct roles\trtm[];\nint\t\t\tnroles;\n\nstatic void dump_cf_array( const void *value, void *context );\nstatic void dump_cf_dictionary( const void *key, const void *value, void *context );\n\n\n    int\nduti_is_conformant_uti( CFStringRef uti )\n{\n    /*\n     * this is gross, but the kUTType CFStringRefs aren't constant, so\n     * there's no convenient way to make a simple CFStringRef array (not\n     * a CFArrayRef) with the base types we're checking. creating a\n     * CFArrayRef with the kUTType CFStringRefs would be worthwhile if\n     * we weren't running as a one-shot utility.\n     */\n\n    if ( UTTypeConformsTo( uti, kUTTypeItem ) ||\n                UTTypeConformsTo( uti, kUTTypeContent ) ||\n                UTTypeConformsTo( uti, kUTTypeMessage ) ||\n                UTTypeConformsTo( uti, kUTTypeContact ) ||\n                UTTypeConformsTo( uti, kUTTypeArchive )) {\n        return( 1 );\n    }\n\n    return( 0 );\n}\n\n    int\nset_uti_handler( CFStringRef bid, CFStringRef type, LSRolesMask mask )\n{\n    OSStatus\t\trc;\n    char\t\tcb[ MAXPATHLEN ];\n    char\t\tct[ MAXPATHLEN ];\n\n    /* get C strings to use in output. CFShow is inadequate. */\n    if ( cf2c( bid, cb, sizeof( cb )) != 0 ) {\n\t/* something reasonable on error */\n\tstrlcpy( cb, \"bundle_id\", sizeof( cb ));\n    }\n    if ( cf2c( type, ct, sizeof( ct )) != 0 ) {\n\tstrlcpy( ct, \"UTI\", sizeof( ct ));\n    }\n\n    \n    if ( !duti_is_conformant_uti( type )) {\n\tfprintf( stderr, \"%s does not conform to any UTI hierarchy\\n\", ct );\n\treturn( 1 );\n    }\n\n    if ( verbose ) {\n\tprintf( \"setting %s as handler for %s\\n\", cb, ct );\n    }\n\n    rc = LSSetDefaultRoleHandlerForContentType( type, mask, bid );\n    if ( rc != noErr ) {\n\tfprintf( stderr, \"failed to set %s as handler \"\n\t\t\"for %s (error %d)\\n\", cb, ct, ( int )rc );\n    }\n\n    return(( int )rc );\n}\n\n    int\nset_url_handler( CFStringRef bid, CFStringRef url_scheme )\n{\n    OSStatus\t\trc;\n    char\t\tcb[ MAXPATHLEN ];\n    char\t\tcu[ MAXPATHLEN ];\n\n    if ( cf2c( bid, cb, sizeof( cb )) != 0 ) {\n\tstrlcpy( cb, \"bundle_id\", sizeof( cb ));\n    }\n    if ( cf2c( url_scheme, cu, sizeof( cu )) != 0 ) {\n\tstrlcpy( cu, \"url_scheme\", sizeof( cu ));\n    }\n\n    if ( verbose ) {\n\tprintf( \"setting %s as handler for %s:// URLs\\n\", cb, cu );\n    }\n\n    rc = LSSetDefaultHandlerForURLScheme( url_scheme, bid );\n    if ( rc != noErr ) {\n\tfprintf( stderr, \"failed to set %s as handler \"\n\t\t \"for %s:// (error %d)\\n\", cb, cu, ( int )rc );\n    }\n\n    return(( int )rc );\n}\n\n    int\nfsethandler( char *spath )\n{\n    FILE\t*f = NULL;\n    char\tline[ MAXPATHLEN * 2 ];\n    char\t*handler, *type, *role;\n    char\t**lineav = NULL;\n    int\t\tlinenum = 0, rc = 0;\n    int\t\tlen, htype;\n\n    if ( spath != NULL ) {\n\tif (( f = fopen( spath, \"r\" )) == NULL ) {\n\t    fprintf( stderr, \"fopen %s: %s\\n\", spath, strerror( errno ));\n\t    return( 1 );\n\t}\n    } else {\n\tf = stdin;\n    }\n\n    while ( fgets( line, sizeof( line ), f ) != NULL ) {\n\tlinenum++;\n\n\tlen = strlen( line );\n\tif ( line[ len - 1 ] != '\\n' ) {\n\t    fprintf( stderr, \"line %d: line too long\\n\", linenum );\n\t    exit( 2 );\n\t}\n\tline[ len - 1 ] = '\\0';\n\n\t/* skip blanks and comments */\n\tif ( *line == '\\0' || *line == '#' ) {\n\t    continue;\n\t}\n\t\n\thtype = parseline( line, &lineav );\n\tswitch ( htype ) {\n\tcase DUTI_TYPE_UTI_HANDLER:\n\t    handler = lineav[ 0 ];\n\t    type = lineav[ 1 ];\n\t    role = lineav[ 2 ];\n\t    break;\n\n\tcase DUTI_TYPE_URL_HANDLER:\n\t    handler = lineav[ 0 ];\n\t    type = lineav[ 1 ];\n\t    break;\n\n\tdefault:\n\t    fprintf( stderr, \"line %d: parsing failed\\n\", linenum );\n\t    rc = 1;\n\t    continue;\n\t}\n\n\tif ( htype == DUTI_TYPE_UTI_HANDLER ) {\n\t    duti_handler_set( handler, type, role );\n\t} else if ( htype == DUTI_TYPE_URL_HANDLER ) {\n\t    duti_handler_set( handler, type, NULL );\n\t}\n    }\n    if ( ferror( f )) {\n\tperror( \"fgets\" );\n\trc = 1;\n    }\n    if ( fclose( f ) != 0 ) {\n\tperror( \"fclose\" );\n\trc = 1;\n    }\n\n    return( rc );\n}\n\n    int\npsethandler( char *spath )\n{\n    CFDictionaryRef\tplist;\n    CFArrayRef\t\tdharray;\n    CFDictionaryRef\tdhentry;\n    CFStringRef\t\tbid, uti, role, url_scheme;\n    CFIndex\t\tcount, index;\n\n    int\t\t\trc = 0;\n    int\t\t\thtype = DUTI_TYPE_UTI_HANDLER;\n    char\t\thandler[ MAXPATHLEN ], type[ MAXPATHLEN ];\n    char\t\tcrole[ 255 ];\n\n    if ( !spath ) {\n\tfprintf( stderr, \"%s: invalid argument supplied\\n\", __FUNCTION__ );\n\treturn( 1 );\n    }\n\n    if ( read_plist( spath, &plist ) != 0 ) {\n\tfprintf( stderr, \"%s: failed to read plist\\n\", __FUNCTION__ );\n\treturn( 1 );\n    }\n\n    if ( !plist ) {\n\tfprintf( stderr, \"%s: Invalid plist\\n\", __FUNCTION__ );\n\treturn( 1 );\n    }\n\n    if (( dharray = CFDictionaryGetValue( plist,\n\t\t\tDUTI_KEY_SETTINGS )) == NULL ) {\n\tfprintf( stderr, \"%s is missing the settings array\\n\", spath );\n\tCFRelease( plist );\n\treturn( 1 );\n    }\n\n    count = CFArrayGetCount( dharray );\n    for ( index = 0; index < count; index++ ) {\n\tdhentry = CFArrayGetValueAtIndex( dharray, index );\n\n\tif (( bid = CFDictionaryGetValue( dhentry,\n\t\t\tDUTI_KEY_BUNDLEID )) == NULL ) {\n\t    fprintf( stderr, \"Entry %d missing bundle ID\\n\", ( int )index );\n\t    rc = 1;\n\t    continue;\n\t}\n\tif (( url_scheme = CFDictionaryGetValue( dhentry,\n\t\t\t\tDUTI_KEY_URLSCHEME )) != NULL ) {\n\t    htype = DUTI_TYPE_URL_HANDLER;\n\t} else if (( uti = CFDictionaryGetValue( dhentry,\n\t\t\t\tDUTI_KEY_UTI )) != NULL ) {\n\t    if (( role = CFDictionaryGetValue( dhentry,\n\t\t\t\tDUTI_KEY_ROLE )) == NULL ) {\n\t\tfprintf( stderr, \"Entry %d missing role\\n\", ( int )index );\n\t\trc = 1;\n\t\tcontinue;\n\t    }\n\t    htype = DUTI_TYPE_UTI_HANDLER;\n\t} else {\n\t    fprintf( stderr, \"Entry %d invalid\\n\", ( int )index );\n\t    rc = 1;\n\t    continue;\n\t}\n\n\tif ( htype == DUTI_TYPE_UTI_HANDLER ) {\n\t    if ( cf2c( bid, handler, sizeof( handler )) != 0 ) {\n\t\trc = 1;\n\t\tcontinue;\n\t    }\n\t    if ( cf2c( uti, type, sizeof( type )) != 0 ) {\n\t\trc = 1;\n\t\tcontinue;\n\t    }\n\t    if ( cf2c( role, crole, sizeof( crole )) != 0 ) {\n\t\trc = 1;\n\t\tcontinue;\n\t    }\n\t    if ( duti_handler_set( handler, type, crole ) != 0 ) {\n\t\trc = 1;\n\t    }\n\t} else if ( htype == DUTI_TYPE_URL_HANDLER ) {\n\t    if ( cf2c( bid, handler, sizeof( handler )) != 0 ) {\n\t\trc = 1;\n\t\tcontinue;\n\t    }\n\t    if ( cf2c( url_scheme, type, sizeof( type )) != 0 ) {\n\t\trc = 1;\n\t\tcontinue;\n\t    }\n\t    if ( duti_handler_set( handler, type, NULL ) != 0 ) {\n\t\trc = 1;\n\t    }\n\t}\n    }\n\n    if ( plist != NULL ) {\n\tCFRelease( plist );\n    }\n\n    return( rc );\n}\n\n    int\ndirsethandler( char *dirpath )\n{\n    DIR\t\t\t*d = NULL;\n    struct dirent\t*de;\n    struct ll\t\t*head = NULL;\n    struct ll\t\t*cur, *tmp;\n    struct stat\t\tst;\n    char\t\tpath[ MAXPATHLEN ];\n    char\t\t*p;\n    int\t\t\trc = 0;\n    int\t\t\t( *dhandler_f )( char * );\n\n    if (( d = opendir( dirpath )) == NULL ) {\n\tfprintf( stderr, \"opendir %s: %s\\n\", dirpath, strerror( errno ));\n\texit( 2 );\n    }\n\n    while (( de = readdir( d )) != NULL ) {\n\tif ( de->d_name[ 0 ] == '.' ) {\n\t    continue;\n\t}\n\n\tif ( snprintf( path, MAXPATHLEN, \"%s/%s\",\n\t\tdirpath, de->d_name ) >= MAXPATHLEN ) {\n\t    fprintf( stderr, \"%s/%s: path too long\\n\", dirpath, de->d_name );\n\t    continue;\n\t}\n\n\t/* skip anything that isn't a file or does not resolve to a file. */\n\tif ( stat( path, &st ) != 0 ) {\n\t    fprintf( stderr, \"stat %s: %s\\n\", path, strerror( errno ));\n\t    continue;\n\t}\n\tif ( !S_ISREG( st.st_mode )) {\n\t    continue;\n\t}\n\t\n\t/*\n\t * build a sorted list of files in the directory\n\t * so the admin can dictate in what order they'll\n\t * be processed, allowing handler precedence.\n\t *\n\t * HFS+ appears to store files in lexical order\n\t * on disk, but we can't count on an HFS+ volume.\n\t */\n\tlladd( path, &head );\n    }\n    if ( closedir( d ) != 0 ) {\n\tfprintf( stderr, \"closedir: %s\\n\", strerror( errno ));\n\trc = 1;\n    }\n\n    for ( cur = head; cur != NULL; cur = tmp ) {\n\tdhandler_f = fsethandler;\n\tif (( p = strrchr( cur->l_path, '.' )) != NULL ) {\n\t    p++;\n\t    if ( strcmp( p, \"plist\" ) == 0 ) {\n\t\tdhandler_f = psethandler;\n\t    }\n\t}\n\n\tif ( verbose ) {\n\t    printf( \"Applying settings from %s\\n\", cur->l_path );\n\t}\n\tif ( dhandler_f( cur->l_path ) != 0 ) {\n\t    rc = 1;\n\t}\n\n\ttmp = cur->l_next;\n\tfree( cur->l_path );\n\tfree( cur );\n    }\n\n    return( rc );\n}\n\n    int\nuti_handler_show( char *uti, int showall )\n{\n    CFArrayRef\t\tcfhandlers = NULL;\n    CFStringRef\t\tcfuti = NULL;\n    CFStringRef\t\tcfhandler = NULL;\n    char\t\tdh[ MAXPATHLEN ];\n    int\t\t\trc = 0;\n    int\t\t\tcount, i;\n\n    if ( uti == NULL ) {\n\tfprintf( stderr, \"Invalid UTI.\\n\" );\n\treturn( 2 );\n    }\n\n    if ( c2cf( uti, &cfuti ) != 0 ) {\n\treturn( 2 );\n    }\n\n    if ( showall ) {\n\tif (( cfhandlers = LSCopyAllRoleHandlersForContentType(\n\t\t\t\tcfuti, kLSRolesAll )) == NULL ) {\n\t    if (( cfhandlers = LSCopyAllHandlersForURLScheme(\n\t\t\t\t\tcfuti )) == NULL ) {\n\t\tfprintf( stderr, \"%s: no handlers\\n\", uti );\n\t\trc = 1;\n\t\tgoto uti_show_done;\n\t    }\n\t}\n\n\tif ( verbose ) {\n\t    printf( \"All handlers for %s:\\n\", uti );\n\t}\n\n\tcount = CFArrayGetCount( cfhandlers );\n\tfor ( i = 0; i < count; i++ ) {\n\t    cfhandler = CFArrayGetValueAtIndex( cfhandlers, i );\n\t    if ( cf2c( cfhandler, dh, sizeof( dh )) != 0 ) {\n\t\trc = 2;\n\t\tcontinue;\n\t    }\n\t    printf( \"%s\\n\", dh );\n\t    memset( dh, 0, sizeof( dh ));\n\t}\n\t\n\tcfhandler = NULL;\n    } else {\n\tif (( cfhandler = LSCopyDefaultRoleHandlerForContentType(\n\t\t\t\tcfuti, kLSRolesAll )) == NULL ) {\n\t    if (( cfhandler = LSCopyDefaultHandlerForURLScheme(\n\t\t\t\t\tcfuti )) == NULL ) {\n\t\tfprintf( stderr, \"%s: no default handler\\n\", uti );\n\t\trc = 1;\n\t\tgoto uti_show_done;\n\t    }\n\t}\n\n\tif ( cf2c( cfhandler, dh, MAXPATHLEN ) != 0 ) {\n\t    rc = 2;\n\t    goto uti_show_done;\n\t}\n\n\tif ( verbose ) {\n\t    printf( \"Default handler for %s: \", uti );\n\t}\n\tprintf( \"%s\\n\", dh );\n    }\n\nuti_show_done:\n    if ( cfhandlers ) {\n\tCFRelease( cfhandlers );\n    }\n    if ( cfuti ) {\n\tCFRelease( cfuti );\n    }\n    if ( cfhandler ) {\n\tCFRelease( cfhandler );\n    }\n\n    return( rc );\n}\n\n    int\nduti_handler_set( char *bid, char *type, char *role )\n{\n    CFStringRef\t\tcf_bid = NULL;\n    CFStringRef\t\tcf_type = NULL;\n    CFStringRef\t\ttagClass = NULL, preferredUTI = NULL;\n    int\t\t\trc = 0;\n    int\t\t\ti = 0;\n\n    if ( role != NULL ) {\n\tfor ( i = 0; i < nroles; i++ ) {\n\t    if ( strcasecmp( role, rtm[ i ].r_role ) == 0 ) {\n\t\tbreak;\n\t    }\n\t}\n\tif ( i >= nroles ) {\n\t    fprintf( stderr, \"role \\\"%s\\\" unrecognized\\n\", role );\n\t    return( 2 );\n\t}\n    }\n\n    if ( role != NULL ) {\n\tif ( *type == '.' ) {\n\t    type++;\n\t    if ( *type == '\\0' ) {\n\t\tfprintf( stderr, \"duti_handler_set: invalid empty type\" );\n\t\trc = 2;\n\t\tgoto duti_set_cleanup;\n\t    }\n\t    tagClass = kUTTagClassFilenameExtension;\n\t} else {\n\t    if ( strchr( type, '/' ) != NULL ) {\n\t\ttagClass = kUTTagClassMIMEType;\n\t    } else if ( strchr( type, '.' ) == NULL ) {\n\t\ttagClass = kUTTagClassFilenameExtension;\n\t    }\n\t}\n\tif ( tagClass != NULL ) {\n\t    /*\n\t     * if no UTI defined for the extension, the system creates a\n\t     * dynamic local UTI with a \"dyn.\" prefix & an encoded value.\n\t     */\n\t    if ( c2cf( type, &cf_type ) != 0 ) {\n\t\trc = 2;\n\t\tgoto duti_set_cleanup;\n\t    }\n\n\t    preferredUTI = UTTypeCreatePreferredIdentifierForTag(\n\t\t\t\ttagClass, cf_type, kUTTypeContent );\n\t    CFRelease( cf_type );\n\t    cf_type = NULL;\n\n\t    if ( preferredUTI == NULL ) {\n\t\tfprintf( stderr, \"failed to create preferred \"\n\t\t\t\t \"identifier for type %s\", type );\n\t\trc = 2;\n\t\tgoto duti_set_cleanup;\n\t    }\n\t}\n    }\n    if ( c2cf( bid, &cf_bid ) != 0 ) {\n\trc = 2;\n\tgoto duti_set_cleanup;\n    }\n    if ( preferredUTI != NULL ) {\n\tif (( cf_type = CFStringCreateCopy( kCFAllocatorDefault,\n\t\t\t    preferredUTI )) == NULL ) {\n\t    fprintf( stderr, \"failed to copy preferred UTI\" );\n\t    rc = 2;\n\t    goto duti_set_cleanup;\n\t}\n    } else {\n\tif ( c2cf( type, &cf_type ) != 0 ) {\n\t    rc = 1;\n\t    goto duti_set_cleanup;\n\t}\n    }\n\n    if ( role != NULL ) {\n\t/* set UTI handler */\n\tif (( rc = set_uti_handler( cf_bid, cf_type,\n\t\t\t\t\trtm[ i ].r_mask )) != 0 ) {\n\t    rc = 2;\n\t}\n    } else {\n\t/* set URL scheme handler */\n\tif (( rc = set_url_handler( cf_bid, cf_type )) != 0 ) {\n\t    rc = 2;\n\t}\n    }\n\nduti_set_cleanup:\n    if ( cf_bid != NULL ) {\n\tCFRelease( cf_bid );\n    }\n    if ( cf_type != NULL ) {\n\tCFRelease( cf_type );\n    }\n    if ( preferredUTI != NULL ) {\n\tCFRelease( preferredUTI );\n    }\n\n    return( rc );\n}\n\n/*\n * print default app info for a given extension. based on\n * public domain source posted on the heliumfoot.com blog\n * by Keith Alperin.\n *\n * http://www.heliumfoot.com/blog/77\n */\n    int\nduti_default_app_for_extension( char *ext )\n{\n    CFDictionaryRef\tcf_info_dict = NULL;\n    CFStringRef\t\tcf_ext = NULL;\n    CFStringRef\t\tcf_app_bundle_id = NULL;\n    CFStringRef\t\tcf_app_name = NULL;\n    CFURLRef\t\tcf_app_url = NULL;\n    OSStatus\t\terr;\n    char\t\t*rext;\n    char\t\ttmp[ MAXPATHLEN ];\n    int\t\t\trc = 2;\n\n    if (( rext = strrchr( ext, '.' )) == NULL ) {\n\trext = ext;\n    } else {\n\trext++;\n\tif ( *rext == '\\0' ) {\n\t    fprintf( stderr, \"no extension provided\\n\" );\n\t    return( rc );\n\t}\n    }\n    if ( c2cf( rext, &cf_ext ) != 0 ) {\n\treturn( rc );\n    }\n\n    err = LSGetApplicationForInfo( kLSUnknownType, kLSUnknownCreator, cf_ext,\n\t\t\t\t\tkLSRolesAll, NULL, &cf_app_url );\n    if ( err != noErr ) {\n\tfprintf( stderr, \"Failed to get default application for \"\n\t\t\t \"extension \\'%s\\'\\n\", rext );\n\tgoto duti_extension_cleanup;\n    }\n\n    err = LSCopyDisplayNameForURL( cf_app_url, &cf_app_name );\n    if ( err != noErr ) {\n\tfprintf( stderr, \"Failed to get display name\\n\" );\n\tgoto duti_extension_cleanup;\n    }\n    if ( cf2c( cf_app_name, tmp, sizeof( tmp )) != 0 ) {\n\tgoto duti_extension_cleanup;\n    }\n    printf( \"%s\\n\", tmp );\n\n    if ( cfurl2path( cf_app_url, tmp, sizeof( tmp )) != 0 ) {\n\tgoto duti_extension_cleanup;\n    }\n    printf( \"%s\\n\", tmp );\n\n    cf_info_dict = CFBundleCopyInfoDictionaryInDirectory( cf_app_url );\n    if ( cf_info_dict == NULL ) {\n\tfprintf( stderr, \"Failed to copy info dictionary from %s\\n\", tmp );\n\tgoto duti_extension_cleanup;\n    }\n\n    cf_app_bundle_id = CFDictionaryGetValue( cf_info_dict,\n\t\t\t\t\t     kCFBundleIdentifierKey );\n    if ( cf_app_bundle_id == NULL ) {\n\tfprintf( stderr, \"Failed to get bundle identifier for %s\\n\", tmp );\n\tgoto duti_extension_cleanup;\n    }\n\n    if ( cf2c( cf_app_bundle_id, tmp, sizeof( tmp )) != 0 ) { \n\tgoto duti_extension_cleanup;\n    }\n    printf( \"%s\\n\", tmp );\n\n    /* success */\n    rc = 0;\n\nduti_extension_cleanup:\n    if ( cf_ext != NULL ) {\n\tCFRelease( cf_ext );\n    }\n    if ( cf_app_url != NULL ) {\n\tCFRelease( cf_app_url );\n    }\n    if ( cf_info_dict != NULL ) {\n\tCFRelease( cf_info_dict );\n    }\n    if ( cf_app_name != NULL ) {\n\tCFRelease( cf_app_name );\n    }\n\n    return( rc );\n}\n\nint\nduti_utis( char * uti ) {\n\tCFStringRef\t\tcf_uti_identifier = NULL;\n\tCFStringRef\t\tcf_uti_description = NULL;\n\tCFDictionaryRef\tcf_uti_declaration = NULL;\n    char\t\ttmp[ MAXPATHLEN ];\n    int\t\t\trc = 2;\n\n    if ( uti == NULL ) {\n\tfprintf( stderr, \"Invalid UTI.\\n\" );\n\treturn( rc );\n    }\n\n    if ( c2cf( uti, &cf_uti_identifier ) != 0 ) {\n\treturn( rc );\n    }\n\n\tcf_uti_description = UTTypeCopyDescription(cf_uti_identifier);\n\tif ( cf2c( cf_uti_description, tmp, sizeof( tmp )) != 0 ) {\n\t\tgoto duti_utis_cleanup;\n\t}\n\tCFRelease(cf_uti_description); cf_uti_description = NULL;\n\tprintf( \"description: %s\\n\", tmp );\n\t\n\tcf_uti_declaration = UTTypeCopyDeclaration(cf_uti_identifier);\n\tprintf( \"declaration: {\\n\" );\n\tCFDictionaryApplyFunction(cf_uti_declaration, dump_cf_dictionary, \"\\t\");\n\tCFRelease(cf_uti_declaration); cf_uti_declaration = NULL;\n\tprintf( \"}\\n\" );\n\n\t/* success */\n    rc = 0;\n\nduti_utis_cleanup:\n    if ( cf_uti_identifier ) {\n\tCFRelease( cf_uti_identifier );\n    }\n    if ( cf_uti_description != NULL ) {\n\tCFRelease( cf_uti_description );\n    }\n    if ( cf_uti_declaration != NULL ) {\n\tCFRelease( cf_uti_declaration );\n    }\n\n\treturn rc;\n}\n\nint\nduti_utis_for_extension(char* ext) {\n    CFStringRef\t\tcf_ext = NULL;\n\tCFArrayRef\t\tcf_array = NULL;\n\tCFStringRef\t\tcf_uti_description = NULL;\n\tCFDictionaryRef\tcf_uti_declaration = NULL;\n\tCFIndex\t\t\tindex;\n\tCFIndex\t\t\tcount;\n    char\t\t*rext;\n    char\t\ttmp[ MAXPATHLEN ];\n    int\t\t\trc = 2;\n\n    if (( rext = strrchr( ext, '.' )) == NULL ) {\n\trext = ext;\n    } else {\n\trext++;\n\tif ( *rext == '\\0' ) {\n\t    fprintf( stderr, \"no extension provided\\n\" );\n\t    return( rc );\n\t}\n    }\n    if ( c2cf( rext, &cf_ext ) != 0 ) {\n\treturn( rc );\n    }\n\n\tcf_array = UTTypeCreateAllIdentifiersForTag(kUTTagClassFilenameExtension, cf_ext, nil);\n\tfor (index = 0, count = CFArrayGetCount(cf_array); index < count; index++) {\n\t\tCFStringRef cf_uti_identifier = CFArrayGetValueAtIndex(cf_array, index);\n\t\tif ( cf2c( cf_uti_identifier, tmp, sizeof( tmp )) != 0 ) {\n\t\tgoto duti_utis_cleanup;\n\t\t}\n\t\tprintf( \"identifier: %s\\n\", tmp );\n\n\t\tcf_uti_description = UTTypeCopyDescription(cf_uti_identifier);\n\t\tif ( cf2c( cf_uti_description, tmp, sizeof( tmp )) != 0 ) {\n\t\tgoto duti_utis_cleanup;\n\t\t}\n\t\tCFRelease(cf_uti_description); cf_uti_description = NULL;\n\t\tprintf( \"description: %s\\n\", tmp );\n\n\t\tcf_uti_declaration = UTTypeCopyDeclaration(cf_uti_identifier);\n\t\tprintf( \"declaration: {\\n\" );\n\t\tCFDictionaryApplyFunction(cf_uti_declaration, dump_cf_dictionary, \"\\t\");\n\t\tCFRelease(cf_uti_declaration); cf_uti_declaration = NULL;\n\t\tprintf( \"}\\n\" );\n\t}\n\n    /* success */\n    rc = 0;\n\nduti_utis_cleanup:\n    if ( cf_ext != NULL ) {\n\tCFRelease( cf_ext );\n    }\n    if ( cf_array != NULL ) {\n\tCFRelease( cf_array );\n    }\n    if ( cf_uti_description != NULL ) {\n\tCFRelease( cf_uti_description );\n    }\n    if ( cf_uti_declaration != NULL ) {\n\tCFRelease( cf_uti_declaration );\n    }\n\n    return( rc );\n}\n\nstatic void\ndump_cf_array( const void *value, void *context ) {\n\tCFTypeID\ttypeID;\n    char\t\ttmp[ MAXPATHLEN ];\n\n\ttypeID = CFGetTypeID( value );\n\tif (typeID == CFStringGetTypeID()) {\n\t\tif ( cf2c( value, tmp, sizeof( tmp )) != 0 ) {\n\t\treturn;\n\t\t}\n\t\tprintf( \"%s%s\\n\", (char *) context, tmp );\n\t} else {\n\t\tprintf( \"%sunhandled value\\n\", (char *) context );\n\t}\n}\n\nstatic void\ndump_cf_dictionary( const void *key, const void *value, void *context ) {\n\tCFTypeID\ttypeID;\n    char\t\ttmp[ MAXPATHLEN ];\n\n\tif ( cf2c( key, tmp, sizeof( tmp )) != 0 ) {\n\treturn;\n\t}\n\tprintf( \"%s%s = \", (char *) context, tmp );\n\n\ttypeID = CFGetTypeID( value );\n\tif (typeID == CFStringGetTypeID()) {\n\t\tif ( cf2c( value, tmp, sizeof( tmp )) != 0 ) {\n\t\treturn;\n\t\t}\n\t\tprintf( \"%s\\n\", tmp );\n\t} else if (typeID == CFArrayGetTypeID()) {\n\t\tprintf( \"[\\n\" );\n\t\tsprintf(tmp, \"%s\\t\", (char *) context );\n\t\tCFArrayApplyFunction(value, CFRangeMake( 0, CFArrayGetCount( value )), dump_cf_array, tmp);\n\t\tprintf( \"%s]\\n\", (char *) context );\n\t} else if (typeID == CFDictionaryGetTypeID()) {\n\t\tprintf( \"{\\n\" );\n\t\tsprintf(tmp, \"%s\\t\", (char *) context );\n\t\tCFDictionaryApplyFunction(value, dump_cf_dictionary, tmp);\n\t\tprintf( \"%s}\\n\", (char *) context );\n\t} else {\n\t\tprintf( \"unhandled key\\n\");\n\t}\n}\n"
        },
        {
          "name": "handler.h",
          "type": "blob",
          "size": 0.6396484375,
          "content": "struct roles {\n    const char\t\t*r_role;\n    LSRolesMask\t\tr_mask;\n};\n\nextern int\t\tnroles;\n\n#define DUTI_TYPE_URL_HANDLER\t\t2\n#define DUTI_TYPE_UTI_HANDLER\t\t3\n\nint\t\tset_uti_handler( CFStringRef, CFStringRef, LSRolesMask );\nint\t\tset_url_handler( CFStringRef, CFStringRef );\nint\t\tfsethandler( char * );\nint\t\tpsethandler( char * );\nint\t\tdirsethandler( char * );\n\nint\t\tuti_handler_show( char *uti, int showall );\nint\t\turl_handler_show( char *url_scheme );\nint\t\tduti_handler_set( char *, char *, char * );\nint\t\tduti_default_app_for_extension( char * );\nint\t\tduti_is_conformant_uti( CFStringRef );\nint\t\tduti_utis( char * );\nint\t\tduti_utis_for_extension( char * );\n"
        },
        {
          "name": "install-sh",
          "type": "blob",
          "size": 5.4306640625,
          "content": "#!/bin/sh\n#\n# install - install a program, script, or datafile\n# This comes from X11R5 (mit/util/scripts/install.sh).\n#\n# Copyright 1991 by the Massachusetts Institute of Technology\n#\n# Permission to use, copy, modify, distribute, and sell this software and its\n# documentation for any purpose is hereby granted without fee, provided that\n# the above copyright notice appear in all copies and that both that\n# copyright notice and this permission notice appear in supporting\n# documentation, and that the name of M.I.T. not be used in advertising or\n# publicity pertaining to distribution of the software without specific,\n# written prior permission.  M.I.T. makes no representations about the\n# suitability of this software for any purpose.  It is provided \"as is\"\n# without express or implied warranty.\n#\n# Calling this script install-sh is preferred over install.sh, to prevent\n# `make' implicit rules from creating a file called install from it\n# when there is no Makefile.\n#\n# This script is compatible with the BSD install script, but was written\n# from scratch.  It can only install one file at a time, a restriction\n# shared with many OS's install programs.\n\n\n# set DOITPROG to echo to test this script\n\n# Don't use :- since 4.3BSD and earlier shells don't like it.\ndoit=\"${DOITPROG-}\"\n\n\n# put in absolute paths if you don't have them in your path; or use env. vars.\n\nmvprog=\"${MVPROG-mv}\"\ncpprog=\"${CPPROG-cp}\"\nchmodprog=\"${CHMODPROG-chmod}\"\nchownprog=\"${CHOWNPROG-chown}\"\nchgrpprog=\"${CHGRPPROG-chgrp}\"\nstripprog=\"${STRIPPROG-strip}\"\nrmprog=\"${RMPROG-rm}\"\nmkdirprog=\"${MKDIRPROG-mkdir}\"\n\ntransformbasename=\"\"\ntransform_arg=\"\"\ninstcmd=\"$mvprog\"\nchmodcmd=\"$chmodprog 0755\"\nchowncmd=\"\"\nchgrpcmd=\"\"\nstripcmd=\"\"\nrmcmd=\"$rmprog -f\"\nmvcmd=\"$mvprog\"\nsrc=\"\"\ndst=\"\"\ndir_arg=\"\"\n\nwhile [ x\"$1\" != x ]; do\n    case $1 in\n\t-c) instcmd=\"$cpprog\"\n\t    shift\n\t    continue;;\n\n\t-d) dir_arg=true\n\t    shift\n\t    continue;;\n\n\t-m) chmodcmd=\"$chmodprog $2\"\n\t    shift\n\t    shift\n\t    continue;;\n\n\t-o) chowncmd=\"$chownprog $2\"\n\t    shift\n\t    shift\n\t    continue;;\n\n\t-g) chgrpcmd=\"$chgrpprog $2\"\n\t    shift\n\t    shift\n\t    continue;;\n\n\t-s) stripcmd=\"$stripprog\"\n\t    shift\n\t    continue;;\n\n\t-t=*) transformarg=`echo $1 | sed 's/-t=//'`\n\t    shift\n\t    continue;;\n\n\t-b=*) transformbasename=`echo $1 | sed 's/-b=//'`\n\t    shift\n\t    continue;;\n\n\t*)  if [ x\"$src\" = x ]\n\t    then\n\t\tsrc=$1\n\t    else\n\t\t# this colon is to work around a 386BSD /bin/sh bug\n\t\t:\n\t\tdst=$1\n\t    fi\n\t    shift\n\t    continue;;\n    esac\ndone\n\nif [ x\"$src\" = x ]\nthen\n\techo \"install:\tno input file specified\"\n\texit 1\nelse\n\t:\nfi\n\nif [ x\"$dir_arg\" != x ]; then\n\tdst=$src\n\tsrc=\"\"\n\t\n\tif [ -d $dst ]; then\n\t\tinstcmd=:\n\t\tchmodcmd=\"\"\n\telse\n\t\tinstcmd=$mkdirprog\n\tfi\nelse\n\n# Waiting for this to be detected by the \"$instcmd $src $dsttmp\" command\n# might cause directories to be created, which would be especially bad \n# if $src (and thus $dsttmp) contains '*'.\n\n\tif [ -f $src -o -d $src ]\n\tthen\n\t\t:\n\telse\n\t\techo \"install:  $src does not exist\"\n\t\texit 1\n\tfi\n\t\n\tif [ x\"$dst\" = x ]\n\tthen\n\t\techo \"install:\tno destination specified\"\n\t\texit 1\n\telse\n\t\t:\n\tfi\n\n# If destination is a directory, append the input filename; if your system\n# does not like double slashes in filenames, you may need to add some logic\n\n\tif [ -d $dst ]\n\tthen\n\t\tdst=\"$dst\"/`basename $src`\n\telse\n\t\t:\n\tfi\nfi\n\n## this sed command emulates the dirname command\ndstdir=`echo $dst | sed -e 's,[^/]*$,,;s,/$,,;s,^$,.,'`\n\n# Make sure that the destination directory exists.\n#  this part is taken from Noah Friedman's mkinstalldirs script\n\n# Skip lots of stat calls in the usual case.\nif [ ! -d \"$dstdir\" ]; then\ndefaultIFS='\n\t'\nIFS=\"${IFS-${defaultIFS}}\"\n\noIFS=\"${IFS}\"\n# Some sh's can't handle IFS=/ for some reason.\nIFS='%'\nset - `echo ${dstdir} | sed -e 's@/@%@g' -e 's@^%@/@'`\nIFS=\"${oIFS}\"\n\npathcomp=''\n\nwhile [ $# -ne 0 ] ; do\n\tpathcomp=\"${pathcomp}${1}\"\n\tshift\n\n\tif [ ! -d \"${pathcomp}\" ] ;\n        then\n\t\t$mkdirprog \"${pathcomp}\"\n\telse\n\t\t:\n\tfi\n\n\tpathcomp=\"${pathcomp}/\"\ndone\nfi\n\nif [ x\"$dir_arg\" != x ]\nthen\n\t$doit $instcmd $dst &&\n\n\tif [ x\"$chowncmd\" != x ]; then $doit $chowncmd $dst; else : ; fi &&\n\tif [ x\"$chgrpcmd\" != x ]; then $doit $chgrpcmd $dst; else : ; fi &&\n\tif [ x\"$stripcmd\" != x ]; then $doit $stripcmd $dst; else : ; fi &&\n\tif [ x\"$chmodcmd\" != x ]; then $doit $chmodcmd $dst; else : ; fi\nelse\n\n# If we're going to rename the final executable, determine the name now.\n\n\tif [ x\"$transformarg\" = x ] \n\tthen\n\t\tdstfile=`basename $dst`\n\telse\n\t\tdstfile=`basename $dst $transformbasename | \n\t\t\tsed $transformarg`$transformbasename\n\tfi\n\n# don't allow the sed command to completely eliminate the filename\n\n\tif [ x\"$dstfile\" = x ] \n\tthen\n\t\tdstfile=`basename $dst`\n\telse\n\t\t:\n\tfi\n\n# Make a temp file name in the proper directory.\n\n\tdsttmp=$dstdir/#inst.$$#\n\n# Move or copy the file name to the temp name\n\n\t$doit $instcmd $src $dsttmp &&\n\n\ttrap \"rm -f ${dsttmp}\" 0 &&\n\n# and set any options; do chmod last to preserve setuid bits\n\n# If any of these fail, we abort the whole thing.  If we want to\n# ignore errors from any of these, just make sure not to ignore\n# errors from the above \"$doit $instcmd $src $dsttmp\" command.\n\n\tif [ x\"$chowncmd\" != x ]; then $doit $chowncmd $dsttmp; else :;fi &&\n\tif [ x\"$chgrpcmd\" != x ]; then $doit $chgrpcmd $dsttmp; else :;fi &&\n\tif [ x\"$stripcmd\" != x ]; then $doit $stripcmd $dsttmp; else :;fi &&\n\tif [ x\"$chmodcmd\" != x ]; then $doit $chmodcmd $dsttmp; else :;fi &&\n\n# Now rename the file to the real destination.\n\n\t$doit $rmcmd -f $dstdir/$dstfile &&\n\t$doit $mvcmd $dsttmp $dstdir/$dstfile \n\nfi &&\n\n\nexit 0\n"
        },
        {
          "name": "pkg-resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "plist.c",
          "type": "blob",
          "size": 2.2626953125,
          "content": "#include <CoreFoundation/CoreFoundation.h>\n\n#include <sys/types.h>\n#include <sys/param.h>\n#include <errno.h>\n#include <string.h>\n\n#include \"plist.h\"\n\n    int\nread_plist( char *plpath, CFDictionaryRef *dr )\n{\n    CFURLRef\t\tcfurl = NULL;\n    CFReadStreamRef\tcfrs = NULL;\n    CFDictionaryRef\tcfdict = NULL;\n    CFPropertyListFormat\tfmt = kCFPropertyListXMLFormat_v1_0;\n    CFStreamError\terr;\n\n    int\t\t\trc = 0;\n    char\t\trespath[ MAXPATHLEN ];\n    \n    if ( plpath == NULL ) {\n\tfprintf( stderr, \"%s: Invalid plist path\\n\", __FUNCTION__ );\n\treturn( -1 );\n    }\n\n    if ( realpath( plpath, respath ) == NULL ) {\n\tfprintf( stderr, \"%s: realpath failed: %s\\n\",\n\t\t__FUNCTION__, strerror( errno ));\n\treturn( -1 );\n    }\n\n    /*\n     * must convert C string path to CFURL to read the plist\n     * from disk. no convenience methods here like Cocoa's\n     * -dictionaryWithContentsOfFile:\n     */\n    if (( cfurl = CFURLCreateFromFileSystemRepresentation(\n\t\t\tkCFAllocatorDefault, ( const UInt8 * )respath,\n\t\t\t( CFIndex )strlen( respath ), false )) == NULL ) {\n\tfprintf( stderr, \"%s: failed to create URL for %s\\n\",\n\t\t\t__FUNCTION__, respath );\n\treturn( -1 );\n    }\n\n    if (( cfrs = CFReadStreamCreateWithFile( kCFAllocatorDefault,\n\t\t\tcfurl )) == NULL ) {\n\tfprintf( stderr, \"%s: failed to create read stream\\n\", __FUNCTION__ );\n\trc = -1;\n\tgoto cleanup;\n    }\n    if ( CFReadStreamOpen( cfrs ) == false ) {\n\terr = CFReadStreamGetError( cfrs );\n\tfprintf( stderr, \"%s: failed to open read stream\\n\", __FUNCTION__ );\n\tif ( err.domain == kCFStreamErrorDomainPOSIX ) {\n\t    fprintf( stderr, \"%s: %s\\n\", plpath, strerror( errno ));\n\t} else {\n\t    fprintf( stderr, \"domain %d, error %d\\n\",\n\t\t\t( int )err.domain, ( int )err.error );\n\t}\n\trc = -1;\n\tgoto cleanup;\n    }\n\n    if (( cfdict = CFPropertyListCreateFromStream( kCFAllocatorDefault, cfrs,\n\t\t\t0, kCFPropertyListImmutable, &fmt, NULL )) == NULL ) {\n\tfprintf( stderr, \"%s: failed to read plist\\n\", __FUNCTION__ );\n\trc = -1;\n\tgoto cleanup;\n    }\n\n    if ( !CFPropertyListIsValid( cfdict, fmt )) {\n\tfprintf( stderr, \"%s: invalid plist\\n\", plpath );\n\tCFRelease( cfdict );\n\tcfdict = NULL;\n\trc = -1;\n    }\n\ncleanup:\n    if ( cfurl != NULL ) {\n\tCFRelease( cfurl );\n    }\n    if ( cfrs != NULL ) {\n\tCFReadStreamClose( cfrs );\n\tCFRelease( cfrs );\n    }\n\n    *dr = cfdict;\n\n    return( rc );\n}\n"
        },
        {
          "name": "plist.h",
          "type": "blob",
          "size": 0.318359375,
          "content": "int\t\tread_plist( char *, CFDictionaryRef * );\n\n/* plist keys */\n#define DUTI_KEY_SETTINGS\tCFSTR( \"DUTISettings\" )\n#define DUTI_KEY_BUNDLEID\tCFSTR( \"DUTIBundleIdentifier\" )\n#define DUTI_KEY_UTI\t\tCFSTR( \"DUTIUniformTypeIdentifier\" )\n#define DUTI_KEY_ROLE\t\tCFSTR( \"DUTIRole\" )\n#define DUTI_KEY_URLSCHEME\tCFSTR( \"DUTIURLScheme\" )\n"
        },
        {
          "name": "util.c",
          "type": "blob",
          "size": 3.46875,
          "content": "#include <CoreFoundation/CoreFoundation.h>\n#include <ctype.h>\n#include <errno.h>\n#include <stdio.h>\n#include <stdlib.h>\n\n#include \"util.h\"\n\n/*\n * parseline: a simple argument parser.\n *\n * parameters:\n *\tline: buffer containing string to parse. Modified.\n *\tlineav: argv resulting from parsing.\n *\n * return value:\n *\t 0: success, line broken into vector of 3 arguments\n *\t-1: failed\n *\n */\n    int\nparseline( char *line, char ***lineav )\n{\n    static char\t\t**pav = NULL;\n    int\t\t\ti; \n\n    if ( pav == NULL ) {\n\tif (( pav = ( char ** )malloc( 5 * sizeof( char * ))) == NULL ) {\n\t    perror( \"malloc\" );\n\t    exit( 2 );\n\t}\n    }\n\n    pav[ 0 ] = line;\n\n    for ( i = 1; i < 3; i++ ) {\n\twhile ( isspace( *line )) line++;\n\twhile ( *line != '\\0' && !isspace( *line )) line++;\n\t*line++ = '\\0';\n\twhile ( isspace( *line )) line++;\n\n\tpav[ i ] = line;\n\tif ( *pav[ i ] == '\\0' ) {\n\t    break;\n\t}\n    }\n\n    *lineav = pav;\n\n    return( i );\n}\n\n/*\n * c2cf: convert a C string to CFStringRef\n *\n * parameters:\n *\tcstr: the C string to convert\n *\tcfstr: will point to result of conversion. must be CFRelease'd.\n *\n * return value:\n *\t 0: success\n *\t-1: failure\n */\n    int\nc2cf( char *cstr, CFStringRef *cfstr )\n{\n    CFStringRef\t\tcftmp;\n\n    if ( cstr == NULL ) {\n\tfprintf( stderr, \"%s: null C String\\n\", __FUNCTION__ );\n\treturn( -1 );\n    }\n\n    if (( cftmp = CFStringCreateWithBytes( kCFAllocatorDefault,\n\t\t\t( UInt8 * )cstr, ( CFIndex )strlen( cstr ),\n\t\t\tkCFStringEncodingUTF8, false )) == NULL ) {\n\tfprintf( stderr, \"Failed to convert C string to CFStringRef\\n\" );\n\treturn( -1 );\n    }\n\n    *cfstr = cftmp;\n\n    return( 0 );\n}\n\n/*\n * cf2c: convert a CFStringRef to a C string\n *\n * parameters:\n *\tcfstr: CFStringRef to convert to C string\n *\tcstr: char buffer that will contain result of conversion\n *\tlen: size of cstr buffer\n *\n * return value:\n *\t-1: conversion failed\n *\t 0: success\n */\n    int\ncf2c( CFStringRef cfstr, char *cstr, int len )\n{\n    if ( cfstr == NULL ) {\n\tfprintf( stderr, \"%s: null CFStringRef\\n\", __FUNCTION__ );\n\treturn( -1 );\n    }\n\n    if ( CFStringGetCString( cfstr, cstr, ( CFIndex )len,\n\t\tkCFStringEncodingUTF8 ) == false ) {\n\tfprintf( stderr, \"Failed to convert CFStringRef to C String\\n\" );\n\treturn( -1 );\n    }\n\n    return( 0 );\n}\n\n/*\n * cfurl2path: convert a CFURLRef to a POSIX C string path\n *\n * parameters:\n *\tcfurl: CFURLRef to convert to C string path\n *\tcstr: char buffer that will contain result of conversion\n *\tlen: size of cstr buffer\n *\n * return value:\n *\t-1: conversion failed\n *\t 0: success\n */\n    int\ncfurl2path( CFURLRef cfurl, char *cstr, int len )\n{\n    if ( cfurl == NULL ) {\n\tfprintf( stderr, \"Cannot convert a null CFURLRef\\n\" );\n\treturn( -1 );\n    }\n\n    if ( !CFURLGetFileSystemRepresentation( cfurl, false, (UInt8 *)cstr, len)) {\n\tfprintf( stderr, \"Failed to convert CFURLRef to C path\\n\" );\n\treturn( -1 );\n    }\n\n    return( 0 );\n}\n\n/*\n * lladd: insert a path into a sorted linked list.\n *\n * parameters:\n *\tpath: char buffer containing path to insert\n *\thead: pointer to pointer at head of linked list. May be modified.\n */\n    void\nlladd( char *path, struct ll **head )\n{\n    struct ll\t\t*new;\n    struct ll\t\t**cur;\n\n    if (( new = ( struct ll * )malloc( sizeof( struct ll ))) == NULL ) {\n\tperror( \"malloc\" );\n\texit( 2 );\n    }\n    if (( new->l_path = strdup( path )) == NULL ) {\n\tperror( \"strdup\" );\n\texit( 2 );\n    }\n\n    for ( cur = head; *cur != NULL; cur = &( *cur )->l_next ) {\n\tif ( strcmp(( *cur )->l_path, new->l_path ) > 0 ) {\n\t    break;\n\t}\n    }\n\n    new->l_next = *cur;\n    *cur = new;\n}\n"
        },
        {
          "name": "util.h",
          "type": "blob",
          "size": 0.2412109375,
          "content": "struct ll {\n    char\t*l_path;\n    struct ll\t*l_next;\n};\n\nint\t\tparseline( char *, char *** );\nint\t\tc2cf( char *, CFStringRef * );\nint\t\tcf2c( CFStringRef, char *, int );\nint\t\tcfurl2path( CFURLRef, char *, int );\nvoid\t\tlladd( char *, struct ll ** );\n"
        },
        {
          "name": "version.c.in",
          "type": "blob",
          "size": 0.0478515625,
          "content": "const char\t\t*duti_version = \"@PACKAGE_VERSION@\";\n"
        }
      ]
    }
  ]
}