{
  "metadata": {
    "timestamp": 1736709916969,
    "page": 431,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "altdesktop/playerctl",
      "stars": 2529,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.328125,
          "content": "BasedOnStyle: google\nAllowShortIfStatementsOnASingleLine: false\nAllowShortLoopsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: None\nAllowShortBlocksOnASingleLine: false\nAlwaysBreakBeforeMultilineStrings: false\nIndentWidth: 4\nPointerBindsToType: false\nColumnLimit: 100\nSpaceBeforeParens: ControlStatements\nIndentCaseLabels: false\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0380859375,
          "content": "/build\n**/__pycache__\n**/.pytest_cache\n"
        },
        {
          "name": ".flake8",
          "type": "blob",
          "size": 0.2333984375,
          "content": "[flake8]\nignore=\n    E501\n    E126\n    E402\n    F722\n\n# F821 is still relevant, but causes too many false positives in tests and\n# examples\nper-file-ignores=\n    test/*:F821\n    test/util.py:F401\n    examples/*:F821\n    */__init__.py:F401\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0830078125,
          "content": "tags\n.clang_complete\n/build\n/mesonbuild\n/playerctl-fpm\n*.swp\n*.swo\n*.swn\n*.snap\n/env\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.1591796875,
          "content": "language: minimal\nsudo: required\ndist: xenial\nservices:\n  - docker\nbefore_install:\n  - docker build -t playerctl-test .\nscript:\n  - docker run -it playerctl-test\n\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 9.4921875,
          "content": "# Changelog\n\n## Version 2.4.1\n\nVersion 2.4.1 contains bugfixes and new features.\n\n* Fix a crash in playerctld when players use TrackList and Playlists interfaces (#215)\n* Add the `trunc()` template function (#224)\n* Allow to use playerctl as a subproject and cpp linking (#228)\n* bugfix: subscribe to all signals when multiple template functions are used (#235)\n* bugfix: workaround for players that use uint64 values in the formatter (#234)\n\n## Version 2.3.1\n\nVersion 2.3.1 contains bugfixes and new features.\n\n* Add option to toggle shuffle (#197)\n* Add `-s`, quiet flag to supress some messages from stderr (#108, #193)\n* Add math operations to the formatter (#149, 119d0a5)\n* Change instance delimiter to \".\" (#198, d0a59e2)\n* Use playerctld to get players in order of activation when it is running (#192, bfed117)\n* Remove warning message when the system bus isn't found (a1cfd4a)\n* Add zsh shell completions (#127, #201, #202)\n* playerctld: add `daemon` activation command (1266063)\n* playerctld: add `unshift` command (#204)\n* bugfix: improve property setter reliability (c617911)\n\n## Version 2.2.1\n\nVersion 2.2.1 contains some bugfixes and new features.\n\n* Fix a crash when the `emoji()` template function is used (#167)\n* Add a `shift` command to `playerctld` to shift the active player (#173)\n* Fix a crash when system players are present (#175)\n\n## Version 2.1.1\n\nVersion 2.1.1 contains some bugfixes and new features.\n\nPlayerctl now has a test suite that covers most features of the CLI.\n\n**playerctld**\n\n* Add `playerctld`: an activatable DBus service for selecting the most recently active player (#161, #164, #128)\n\n**CLI**\n\n* Add the `markup_escape()` formatter function (#133)\n* Mark the `emoji()` formatter function as no longer experimental\n* Add the `default()` formatter function (#142, fd0b4ab)\n* Add the special `%any` player token for prioritizing player selection (#143)\n* Add bash completions (#153)\n* Add debug logging (#152)\n* Rewrite and expand manpage with `mdoc(7)` (#130)\n* Attempt to autostart `playerctld` if it is present in players\n* bugfix: incorrect error message for shuffle command (#158)\n* bugfix: don't crash if no system bus is present (2330b64f)\n* bugfix: don't crash if given a nonexistent format function (#162)\n\n**Build**\n\n* Required meson version is now `0.50.0`.\n\n## Version 2.0.2\n\nVersion 2.0.2 contains some minor bugfixes for the CLI and build system.\n\nThe author would like to inform you as part of my effort to improve media player integration on the Linux Desktop, I have fixed many bugs in Electron based media players that should be available soon (see #40, #81, #35 which were closed recently).\n\n**CLI**\n\n* Regression: exit 1 when no players are found (#126, #119)\n* Regression: fix sort order for `--player` command (#112)\n* Handle nonfile uris in the `open` command (#122)\n\n**Build**\n\n* Fix documentation of the `--follow` flag (#117)\n* Update manpage release date at build time (#118)\n* fix gir build on cross compilation (#120)\n\n## Version 2.0.1\n\nVersion 2.0.1 includes new major features and breaking changes to the library and CLI.\n\n**CLI**\n\n* Add `--ignore-player` flag to ignore specific players (#2)\n* Add `--follow` flag to block and print updated values when they change (#37, #98, #101)\n* The `--player` command acts on the first player without `--all-players` (breaking) (#54)\n* Accept multiple keys for `metadata [key]` command (#68)\n* `metadata` command has tabular output. (breaking) (#72)\n* Add `--format [fmt]` for metadata formatting (#73)\n* Add `duration()` template formatter for formatting durations (#75)\n* Print player name and instance with format strings (#90)\n* Add command to get and set `shuffle` status (#92)\n* Add a command to get and set `loop` status (#99)\n* Add the `open` command to open a URI with the player (#79)\n* Fix some errors with utf8 printing (#80)\n* Skip players from selection when they don't support a command (determined by the `can-*` properties)\n* Select all player instances with the `--player` and `--ignore-player` command\n* Print help information to stdout (not stderr) when no arguments are passed\n\n**Library**\n\n* add `playerctl_list_players()` to public api for listing players (#47)\n* Implement the \"seeked\" signal on the player (#94)\n* Add the \"volume\" signal on the player (#95)\n* Deprecate the \"play\", \"pause\", and \"stopped\" signal for a single \"status\" signal (#96)\n* Add the `PlayerctlPlayerManager()` class (#100)\n* Cache and compute the position property (#102)\n* Remove chaining abilities from the library (breaking)\n* Library query functions return `NULL` instead of empty string when properties aren't found (breaking)\n* Deprecate `status` property in favor of the `playback-status` property as an enum\n* Add library functions for `shuffle` and `loop` status (#92, #99)\n* Deprecate setting volume via the object properties interface\n* Fix the \"exit\" signal\n* Add properties \"can-control\", \"can-play\", \"can-pause\", \"can-seek\", \"can-go-next\", \"can-go-previous\"\n* Add the \"source\" property to determine the source of the player (session or system bus)\n* Change first keyword arg for `playerctl_player_new()` from `name` to `player_name` (breaking)\n* Add `playerctl_player_new_for_source()` to select players based on the source (session or system bus)\n* Add `playerctl_player_new_from_name()` to create a player from a PlayerManager name\n* `playerctl_player_new()` selects an instance of the `player_name` if found\n* Add documentation for the entire public library API\n\n**Build**\n\n* Remove autotools and switch to the meson build system (breaking) (#57)\n* Fix various compiler warnings (#97)\n* Remove library version from pkg-config name and add it to the so in the standard way (new pkg-config name is just `playerctl`).\n\n## Version 0.6.1\n\nVersion 0.6.1 includes bug fixes and some minor features.\n\n* Bugfix: unref of a null player when no players are present\n* Playerctl now searches the system bus for players\n* Parse trackid as a string as a workaround for noncompliant players\n* Various meson fixes\n\n## Version 0.6.0\n\nVersion 0.6.0 includes bug fixes and new features.\n\n* control multiple players at once by putting commas between the names\n* add the --all-players option to control all players at once\n* lib: better cache invalidation strategy for getting properties\n* bugfix: Set position in fractional seconds\n* Fix various memory leaks and errors\n\nNOTE: This will be the last minor release that uses autotools. Playerctl will switch to the meson build system as of the next minor release.\n\nGithub releases will have a debian package and an rpm, but these will soon be deprecated as package maintainers create official packages for distros.\n\n## Version 0.5.0\n\nVersion 0.5.0 includes some new features.\n\nNew features:\n\n- Add workaround for Spotify to get metadata\n- Add `position` cli command to query and set position\n- Add `position` property to Player and method to set position to\n  library\n\n## Version 0.4.2\n\nVersion 0.4.2 includes several important bug fixes.\n\n- Send `Play` directly instead of a `PlayPause` message depending on player status. This was an exception for Spotify that is no longer needed.\n- Fix memory errors when an initialization error occurs.\n\n## Version 0.4.1\n\nThis version includes a fix to support unicode characters when printing metadata.\n\n## Version 0.4.0\n\nThis version adds the following features and bugfixes\n\n- List players with cli `-l` option.\n- Fix a bug in the build for some platforms\n- Remove claim of mplayer support\n\n## Version 0.3.0\n\nThis release includes some major bugfixes and some new features mostly for the library for use in applications.\n\n- Add the \"stop\" library and cli command\n- Add the \"exit\" signal - emitted when the player exits\n- Implement player class memory management\n- Add version macros\n\nThe following quirks have been corrected (should not be breaking)\n\n- Player \"player_name\" property getter returns the player name and not the DBus name\n- Player \"stop\" event correctly emits \"stop\" and not \"pause\"\n- Add include guards so only `<playerctl/playerctl.h>` can be included directly\n\nAdditional packages available by request\n\n## Version 0.2.1\n\nThis minor release adds a pkg-config file and relicenses the code under the LGPL.\n\n## Version 0.2.0\n\nThis release adds convenient metadata accessors and improves error handling\n\n- Add get_artist method to player\n- Add get_title method to player\n- Add get_album method to player\n- Add get_metadata_prop to player\n- Add [KEY] option to metadata cli\n- Bugfix: gracefully handle property access when connection to dbus fails by returning empty properties\n\n## Version 0.1.0\n\nThis release adds some new player commands and improves error handling\n\n- Add the \"next\" CLI command and player method used to switch to the next track\n- Add the \"previous\" CLI command and player method used to switch to the previous track\n- Print an error message when no players are found in the CLI and propagate an error on initialization in this case in the library\n- Print an error message when a command fails in the CLI and propagate an error in this case in the library\n\n# Version 0.0.1\n\nPlayerctl is a command-line utility and library for controlling media players that implement the [MPRIS](http://specifications.freedesktop.org/mpris-spec/latest/) D-Bus Interface Specification. Playerctl makes it easy to bind player actions, such as play and pause, to media keys.\n\nFor more advanced users, Playerctl provides an [introspectable](https://wiki.gnome.org/action/show/Projects/GObjectIntrospection) library available in your favorite scripting language that allows more detailed control like the ability to subscribe to media player events or get metadata such as artist and title for the playing track.\n"
        },
        {
          "name": "CONTRIBUTORS",
          "type": "blob",
          "size": 0.2998046875,
          "content": "A list of contributors to playerctl, sorted alphabetically on last names.\nPlease keep this list sorted when adding yourself.\n\nPedro Alves <pta2002@pta2002.com>\nTony Crisci <tony@dubstepdish.com>\nJente Hidskes <hjdskes@gmail.com>\nNick Morrott <knowledgejunkie@gmail.com>\nRasmus Thomsen <cogitri@exherbo.org>\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 7.4716796875,
          "content": "                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.89453125,
          "content": "FROM ubuntu:20.04\n\nWORKDIR /app\n\nRUN export DEBIAN_FRONTEND=noninteractive; \\\n    export DEBCONF_NONINTERACTIVE_SEEN=true; \\\n    echo 'tzdata tzdata/Areas select Etc' | debconf-set-selections; \\\n    echo 'tzdata tzdata/Zones/Etc select UTC' | debconf-set-selections; \\\n    apt update && apt install -y --no-install-recommends \\\n    python3-pip \\\n    ninja-build \\\n    build-essential \\\n    libglib2.0-dev \\\n    libgirepository1.0-dev \\\n    gtk-doc-tools \\\n    dbus-x11\n\nCOPY requirements.txt .\nRUN pip3 install -r requirements.txt\n\nADD . /app\n\nCOPY test/data/dbus-system.conf /etc/dbus-1/system.d/test-dbus-system.conf\n\nRUN meson --prefix=/usr build && \\\n    ninja -C build && ninja -C build install\nRUN mkdir -p /run/dbus\nENV PYTHONASYNCIODEBUG=1\nENV DBUS_SYSTEM_BUS_ADDRESS=unix:path=/var/run/dbus/system_bus_socket\nCMD [\"bash\", \"-c\", \"dbus-daemon --nopidfile --system && dbus-run-session python3 -m pytest -vvs\"]\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.5244140625,
          "content": ".PHONY: test docker-test format all\n.DEFAULT_GOAL := all\n\nFORMAT_C_SOURCE = $(shell find playerctl | grep \\.[ch]$)\nEXECUTABLES = clang-format python3 docker yapf dbus-run-session\nK := $(foreach exec,$(EXECUTABLES),\\\n        $(if $(shell which $(exec)),some string,$(error \"No $(exec) in PATH\")))\n\ntest:\n\tdbus-run-session python3 -m pytest -sq\n\ndocker-test:\n\tdocker build -t playerctl-test .\n\tdocker run -it playerctl-test\n\nformat:\n\tyapf -rip test examples\n\tclang-format -i ${FORMAT_C_SOURCE}\n\nlint:\n\tflake8 test\n\nall: format docker-test\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.1220703125,
          "content": "# Playerctl\n\nFor true players only: vlc, mpv, RhythmBox, web browsers, cmus, mpd, spotify and others.\n\n[Chat](https://discord.gg/UdbXHVX)\n\n## About\n\nPlayerctl is a command-line utility and library for controlling media players that implement the [MPRIS](http://specifications.freedesktop.org/mpris-spec/latest/) D-Bus Interface Specification. Playerctl makes it easy to bind player actions, such as play and pause, to media keys. You can also get metadata about the playing track such as the artist and title for integration into statusline generators or other command-line tools.\n\nPlayerctl also comes with a daemon that allows it to act on the currently active media player called `playerctld`.\n\n## Using the CLI\n\n```\nplayerctl [--version] [--list-all] [--all-players] [--player=NAME] [--ignore-player=IGNORE] [--format=FORMAT] [--no-messages] COMMAND\n```\n\nHere is a list of available commands:\n\n| Command                      | Description                                                                                            |\n|:----------------------------:| ------------------------------------------------------------------------------------------------------ |\n| **`play`**                   | Command the player to play.                                                                            |\n| **`pause`**                  | Command the player to pause                                                                            |\n| **`play-pause`**             | Command the player to toggle between play/pause.                                                       |\n| **`stop`**                   | Command the player to stop.                                                                            |\n| **`next`**                   | Command the player to skip to the next track.                                                          |\n| **`previous`**               | Command the player to skip to the previous track.                                                      |\n| **`position [OFFSET][+/-]`** | Command the player to go to the position or seek forward or backward OFFSET in seconds.                |\n| **`volume [LEVEL][+/-]`**    | Print or set the volume to LEVEL from 0.0 to 1.0.                                                      |\n| **`status`**                 | Get the play status of the player. Either \"Playing\", \"Paused\", or \"Stopped\".                           |\n| **`metadata [KEY...]`**      | Print the metadata for the current track. If KEY is passed, print only those values from the metadata. |\n| **`open [URI]`**             | Command for the player to open a given URI. Can be either a file path or a remote URL.                 |\n| **`loop [STATUS]`**          | Print or set the loop status. Either \"None\", \"Track\", or \"Playlist\".                                   |\n| **`shuffle [STATUS]`**       | Print or set the shuffle status. Either \"On\", \"Off\".                                                   |\n\n### Selecting Players to Control\n\nWithout specifying any players to control, Playerctl will act on the first player it can find.\n\nPlayerctl comes with a service called `playerctld` that monitors the activity of media players in the background. If `playerctld` is running, Playerctl will act on players in order of their last activity. To start `playerctld`, add the following command to your system startup script:\n\n```\nplayerctld daemon\n```\n\nYou can list the names of players that are available to control that are running on the system with `playerctl --list-all`.\n\nIf you'd only like to control certain players, you can pass the names of those players separated by commas with the `--player` flag. Playerctl will select the first instance of a player in that list that supports the command. To control all players in the list, you can use the `--all-players` flag.\n\nSimilarly, you can ignore players by passing their names with the `--ignore-player` flag.\n\nThe special player name `%any` can be used in the list of selected players once to match any player not in the list. This can be used to prioritize or deprioritize players.\n\nExamples:\n\n```bash\n# Command the first instance of VLC to play\nplayerctl --player=vlc play\n\n# Command all players to stop\nplayerctl --all-players stop\n\n# Command VLC to go to the next track if it's running. If it's not, send the\n# command to Spotify.\nplayerctl --player=vlc,spotify next\n\n# Get the status of the first player that is not Gwenview.\nplayerctl --ignore-player=Gwenview status\n\n# Command any player to play, but select Chromium last\nplayerctl --player=%any,chromium play\n\n# Command any player to play, but select VLC first\nplayerctl --player=vlc,%any play\n```\n\n### Printing Properties and Metadata\n\nYou can pass a format string with the `--format` argument to print properties in a specific format. Pass the variable you want to print in the format string between double braces like `{{ VARIABLE }}`. The variables available are either the name of the query command, or anything in the metadata map which can be viewed with `playerctl metadata`. You can use this to integrate playerctl into a statusline generator.\n\nFor a simple \"now playing\" banner:\n\n```bash\nplayerctl metadata --format \"Now playing: {{ artist }} - {{ album }} - {{ title }}\"\n# prints 'Now playing: Lana Del Rey - Born To Die - Video Games'\n```\n\nIncluded in the template language are some built-in variables and helper functions for common formatting that you can call on template variables. It can also do basic math operations on numbers.\n\n```bash\n# Prints 'Total length: 3:23'\nplayerctl metadata --format \"Total length: {{ duration(mpris:length) }}\"\n\n# Prints 'At position: 1:16'\nplayerctl position --format \"At position: {{ duration(position) }}\"\n\n# Prints 'Artist in lowercase: lana del rey'\nplayerctl metadata --format \"Artist in lowercase: {{ lc(artist) }}\"\n\n# Prints 'STATUS: PLAYING'\nplayerctl status --format \"STATUS: {{ uc(status) }}\"\n\n# Prints the time remaining in the track (e.g, 'Time remaining: 2:07')\nplayerctl metadata --format \"Time remaining: {{ duration(mpris:length - position) }}\"\n\n# Prints volume from 0 - 100\nplayerctl metadata --format \"Volume: {{ volume * 100 }}\"\n```\n\n| Function        | Argument         | Description                                                        |\n| --------------- | ---------------  | ------------------------------------------------------------------ |\n| `lc`            | string           | Convert the string to lowercase.                                   |\n| `uc`            | string           | Convert the string to uppercase.                                   |\n| `duration`      | int              | Convert the duration to hh:mm:ss format.                           |\n| `markup_escape` | string           | Escape XML markup characters in the string.                        |\n| `default`       | any, any         | Print the first value if it is present, or else print the second.  |\n| `emoji`         | status or volume | Try to convert the variable to an emoji representation.            |\n| `trunc`         | string, int      | Truncate string to a maximum length.                               |\n\n| Variable     | Description                                       |\n| ------------ | ------------------------------------------------- |\n| `playerName` | The name of the current player.                   |\n| `position`   | The position of the current track in microseconds |\n| `status`     | The playback status of the current player         |\n| `volume`     | The volume from 0.0 to 1.0                        |\n| `album`      | The album of the current track.                   |\n| `artist`     | The artist of the current track.                  |\n| `title`      | The title of the current track.                   |\n\n### Following changes\n\nYou can pass the `--follow` flag to query commands to block, wait for players to connect, and print the query whenever it changes. If players are passed with `--player`, players earlier in the list will be preferred in the order they appear unless `--all-players` is passed. When no player can support the query, such as when all the players exit, a newline will be printed. For example, to be notified of information about the latest currently playing track for your media players, use:\n\n```bash\nplayerctl metadata --format '{{ playerName }}: {{ artist }} - {{ title }} {{ duration(position) }}|{{ duration(mpris:length) }}' --follow\n```\n\n### Changing the position of the track\n\nYou can seek to a position in the track or skip forward and back.\n\n```bash\n# Go back 30 seconds\nplayerctl position 30-\n\n# Go forward 30 seconds\nplayerctl position 30+\n\n# Seek to the position at 30 seconds\nplayerctl position 30\n```\n\n## Troubleshooting\n\n### Debug Logging\n\nTo enable debug logging, set the environment variable `G_MESSAGES_DEBUG=playerctl`. It's helpful to include a debug log when you report issues.\n\n### No Players Found\n\nSome players like Spotify require certain DBus environment variables to be set which are normally set within the session manager. If you're not using a session manager or it does not set these variables automatically (like `xinit`), launch your desktop environment wrapped in a `dbus-launch` command. For example, in your `.xinitrc` file, use this to start your WM:\n\n```\nexec dbus-launch --autolaunch=$(cat /var/lib/dbus/machine-id) i3\n```\n\nSome players may require installation of a plugin or other configuration.\n\nIn Quod Libet open the window File -> Plugins and select the plugin called *MPRIS D-Bus Support*.\n\n### Playerctld Autostart Issues\n\nIf `playerctld` does not autostart and you use `xinit` and systemd, you might need this fix to enable DBus activation to work correctly:\n\n```\nsystemctl --user import-environment DISPLAY XAUTHORITY\n\nif which dbus-update-activation-environment >/dev/null 2>&1; then\n        dbus-update-activation-environment DISPLAY XAUTHORITY\nfi\n```\n\n## Installing\n\nFirst, check and see if Playerctl is available from your package manager (if it is not, get someone to host a package for you) and also check the [releases](https://github.com/altdesktop/playerctl/releases) page on github.\n\n### Fedora\n\n`playerctl` is available for Fedora 28 or later:\n\n```\nsudo dnf install playerctl\n```\n\n### Mageia, openSUSE\n\n`playerctl` is available for Mageia and openSUSE via [this COPR repository](https://copr.fedorainfracloud.org/coprs/jflory7/playerctl/). First, install the repository file for your distribution from COPR. Then, install `playerctl` with your package manager of choice.\n\n### Guix\n\n`playerctl` is available as a [Guix](https://guix.gnu.org) package which can be installed on any Linux distribution after [installing Guix](https://guix.gnu.org/manual/en/html_node/Installation.html):\n\n```\nguix install playerctl\n```\n\n### Compile from source\n\nUsing the cli and library requires [GLib](https://developer.gnome.org/glib/) (which is a dependency of almost all of these players as well, so you probably already have it). You can use the library in almost any programming language with the associated [introspection binding library](https://wiki.gnome.org/Projects/GObjectIntrospection/Users).\n\nAdditionally, you also need the following build dependencies:\n\n[gobject-introspection](https://wiki.gnome.org/action/show/Projects/GObjectIntrospection) for building introspection data (configurable with the `introspection` meson option)\n\n[gtk-doc](http://www.gtk.org/gtk-doc/) for building documentation (configurable with the `gtk-doc` meson option)\n\nFedora users also need to install `redhat-rpm-config`\n\nTo generate and build the project to contribute to development and install playerctl to `/`:\n\n```\nmeson mesonbuild\nsudo ninja -C mesonbuild install\n```\n\nNote that you need `meson` installed. In case your distro only has an older version of meson in its repository you can install the newest version via pip:\n\n```\npip3 install meson\n```\n\nAlso keep in mind that gtk-doc and gobject-introspection are enabled by default, you can disable them with `-Dintrospection=false` and `-Dgtk-doc=false`.\n\nIf you don't want to install playerctl to `/` you can install it elsewhere by exporting `DESTDIR` before invoking ninja, e.g.:\n\n```\nexport PREFIX=\"/usr/local\"\nmeson --prefix=\"${PREFIX}\" --libdir=\"${PREFIX}/lib\" mesonbuild\nexport DESTDIR=\"$(pwd)/install\"\nninja -C mesonbuild install\n```\n\nYou can use it later on by exporting the following variables:\n\n```\nexport LD_LIBRARY_PATH=\"$DESTDIR/${PREFIX}/lib/:$LD_LIBRARY_PATH\"\nexport GI_TYPELIB_PATH=\"$DESTDIR/${PREFIX}/lib/:$GI_TYPELIB_PATH\"\nexport PATH=\"$DESTDIR/${PREFIX}/bin:$PATH\"\n```\n\n## Using the Library\n\nTo use a scripting library, find your favorite language from [this list](https://wiki.gnome.org/Projects/GObjectIntrospection/Users) and install the bindings library. Documentation for the library is hosted [here](https://dubstepdish.com/playerctl). For examples on how to use the library, see the [examples](https://github.com/acrisci/playerctl/blob/master/examples) folder.\n\n### Example Python Script\n\nFor more advanced users, Playerctl provides an [introspectable](https://wiki.gnome.org/action/show/Projects/GObjectIntrospection) library available in your favorite scripting language that allows more detailed control like the ability to subscribe to media player events or get metadata such as artist and title for the playing track. This example uses the [Python bindings](https://wiki.gnome.org/action/show/Projects/PyGObject).\n\n```python\n#!/usr/bin/env python3\n\nfrom gi.repository import Playerctl, GLib\n\nplayer = Playerctl.Player('vlc')\n\n\ndef on_metadata(player, metadata):\n    if 'xesam:artist' in metadata.keys() and 'xesam:title' in metadata.keys():\n        print('Now playing:')\n        print('{artist} - {title}'.format(\n            artist=metadata['xesam:artist'][0], title=metadata['xesam:title']))\n\n\ndef on_play(player, status):\n    print('Playing at volume {}'.format(player.props.volume))\n\n\ndef on_pause(player, status):\n    print('Paused the song: {}'.format(player.get_title()))\n\n\nplayer.connect('playback-status::playing', on_play)\nplayer.connect('playback-status::paused', on_pause)\nplayer.connect('metadata', on_metadata)\n\n# start playing some music\nplayer.play()\n\nif player.get_artist() == 'Lana Del Rey':\n    # I meant some good music!\n    player.next()\n\n# wait for events\nmain = GLib.MainLoop()\nmain.run()\n```\n\nFor a more complete example which is capable of listening to when players start and exit, see [player-manager.py](https://github.com/acrisci/playerctl/blob/master/examples/player-manager.py) from the official examples.\n\n## Resources\n\nCheck out the following articles about Playerctl:\n\n* [2 new apps for music tweakers on Fedora Workstation - Fedora Magazine](https://fedoramagazine.org/2-new-apps-for-music-tweakers-on-fedora-workstation/ \"2 new apps for music tweakers on Fedora Workstation\")\n* [Playerctl at Version 2.0](https://dubstepdish.com/index.php/2018/10/21/playerctl-at-version-2-0/)\n\nRelated projects from the maker of Playerctl:\n\n* [altdesktop/python-dbus-next](https://github.com/altdesktop/python-dbus-next) - The DBus library used in the Playerctl test suite.\n* [altdesktop/playerbm](https://github.com/altdesktop/playerbm) - A CLI bookmark utility for audiobooks and podcasts.\n* [dbusjs/mpris-service](https://github.com/dbusjs/mpris-service) - MPRIS implementation for JavaScript targeting Electron apps.\n\n## License\n\nThis work is available under the GNU Lesser General Public License (See COPYING).\n\nCopyright © 2014, Tony Crisci\n"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "fpm-packages.sh",
          "type": "blob",
          "size": 2.2353515625,
          "content": "#!/bin/sh\n\nset -e\n\nPROJECT_ROOT=${PWD}\nFPM_DIR=${PWD}/playerctl-fpm\nDEB_DIR=${FPM_DIR}/deb\nRPM_DIR=${FPM_DIR}/rpm\nMESON_DIR=${FPM_DIR}/build\n\n# sanity check\nif [[ ! -f playerctl/playerctl.h ]]; then\n    echo 'You must run this from the playerctl project directory'\n    exit 1\nfi\n\npackages=(fpm rpm dpkg)\nfor pkg in ${packages[@]}; do\n    if ! hash ${pkg}; then\n        echo \"you need ${pkg} to package playerctl\"\n        exit 127\n    fi\ndone\n\nrm -rf ${FPM_DIR}\nmkdir -p ${FPM_DIR}\n\nfpm_deb() {\n    cd ${PROJECT_ROOT}\n    meson ${DEB_DIR}/build --prefix=/usr --libdir=/usr/lib\n    DESTDIR=${DEB_DIR}/install ninja -C ${DEB_DIR}/build install\n\tVERSION=`LD_LIBRARY_PATH=${DEB_DIR}/install/usr/lib ${DEB_DIR}/install/usr/bin/playerctl -v | sed s/^v// | sed s/-.*//`\n\n    cd ${DEB_DIR}/install\n\n    fpm -s dir -t deb -n playerctl -v ${VERSION} \\\n        -p playerctl-VERSION_ARCH.deb \\\n        -d \"libglib2.0-0\" \\\n        usr/include usr/lib usr/bin usr/share\n\n    echo -e \"\\nDEBIAN PACKAGE CONTENTS\"\n    echo -e \"-----------------------\"\n    dpkg -c ${DEB_DIR}/install/playerctl-${VERSION}_amd64.deb\n\n    mv ${DEB_DIR}/install/playerctl-${VERSION}_amd64.deb ${FPM_DIR}\n\n\tcd - &> /dev/null\n}\n\nfpm_rpm() {\n    cd ${PROJECT_ROOT}\n    meson ${RPM_DIR}/build --prefix=/usr --libdir=/usr/lib64\n    DESTDIR=${RPM_DIR}/install ninja -C ${RPM_DIR}/build install\n\tVERSION=`LD_LIBRARY_PATH=${RPM_DIR}/install/usr/lib64 ${RPM_DIR}/install/usr/bin/playerctl -v | sed s/^v// | sed s/-.*//`\n\n    cd ${RPM_DIR}/install\n\n    fpm -s dir -t rpm -n playerctl -v ${VERSION} \\\n        -p playerctl-VERSION_ARCH.rpm \\\n        -d \"glib2\" \\\n        usr/include usr/lib64 usr/bin usr/share\n\n    echo -e \"\\nRPM PACKAGE CONTENTS\"\n    echo -e \"--------------------\"\n    rpm -qlp ${RPM_DIR}/install/playerctl-${VERSION}_x86_64.rpm\n\n    mv ${RPM_DIR}/install/playerctl-${VERSION}_x86_64.rpm ${FPM_DIR}\n\n    cd - &> /dev/null\n}\n\ndo_dist() {\n    local DIST_DIR=${FPM_DIR}/dist\n    meson ${DIST_DIR}\n    ninja -C ${DIST_DIR}\n    local version=$(${DIST_DIR}/playerctl/playerctl --version | sed s/^v//)\n    local archive_path=\"${FPM_DIR}/playerctl-${version}.tar.gz\"\n    git archive --prefix=\"playerctl-${version}/\" -o ${archive_path} \"v${version}\"\n    gpg --sign --armor --detach-sign ${archive_path}\n}\n\nfpm_deb\nfpm_rpm\ndo_dist\n"
        },
        {
          "name": "letter-to-spotify-support.md",
          "type": "blob",
          "size": 1.06640625,
          "content": "<!--\nThis is a friendly letter template you can use to contact Spotify customer\nsupport to request support of the full MPRIS interface specification.\n-->\n\nDear Spotify Customer Support,\n\nThank you for supporting the Linux Desktop environment. Linux support is an\nimportant part of my Spotify user experience. Part of that experience is\nintegration of the media player into my desktop environment. This includes\nmaking the keyboard media keys work correctly and getting basic information\nabout a playing track for display in external desktop applications. Please\ncontinue supporting these features.\n\nThere are some features right now that could use better support. This includes\ncomplete track metadata, getting and setting the position of the playing track,\nand getting and setting the volume of the player.\n\nOn Linux, these features are specified in the MPRIS D-Bus Interface\nSpecification. If Spotify were to completely implement this interface, it would\ngreatly increase my satisfaction with your product. Please allocate some time\nfor your developers to implement these features.\n\nThanks\n"
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 1.04296875,
          "content": "project(\n  'playerctl',\n  'c',\n  version: '2.4.1',\n  meson_version: '>=0.56.0'\n)\n\nrelease_date = 'September 21, 2021'\n\ngnome = import('gnome')\npkgconfig = import('pkgconfig')\n\ndatadir = get_option('datadir')\nbindir = get_option('bindir')\nprefix = get_option('prefix')\n\nversion_conf = configuration_data()\n\nplayerctl_version = meson.project_version().split('-')[0]\nversion_array = playerctl_version.split('.')\nplayerctl_major_version = version_array[0]\n\nversion_conf.set(\n  'PLAYERCTL_VERSION',\n  meson.project_version(),\n)\nversion_conf.set(\n  'PLAYERCTL_MAJOR_VERSION',\n  playerctl_major_version.to_int(),\n)\nversion_conf.set(\n  'PLAYERCTL_MINOR_VERSION',\n  version_array[1].to_int(),\n)\nversion_conf.set(\n  'PLAYERCTL_MICRO_VERSION',\n  version_array[2].to_int(),\n)\nversion_conf.set(\n  'PLAYERCTL_RELEASE_DATE',\n  release_date,\n)\n\ngobject_dep = dependency('gobject-2.0', version: '>=2.38')\ngio_dep = dependency('gio-unix-2.0')\nglib_dep = dependency('glib-2.0')\nbash_comp = dependency('bash-completion', required: false)\n\nsubdir('playerctl')\nsubdir('data')\nsubdir('doc')\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 0.361328125,
          "content": "option('gtk-doc', type: 'boolean', value: true, description: 'build docs')\noption('introspection', type: 'boolean', value: true, description: 'build gir data')\noption('bash-completions', type: 'boolean', value: false, description: 'Install bash shell completions.')\noption('zsh-completions', type: 'boolean', value: false, description: 'Install zsh shell completions.')\n"
        },
        {
          "name": "playerctl",
          "type": "tree",
          "content": null
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.0205078125,
          "content": "[pytest]\ntimeout = 5\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0517578125,
          "content": "dbus-next\nmeson\npytest\npytest-timeout\npytest-asyncio\n"
        },
        {
          "name": "snap",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}