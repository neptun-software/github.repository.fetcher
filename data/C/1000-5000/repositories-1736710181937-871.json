{
  "metadata": {
    "timestamp": 1736710181937,
    "page": 871,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ardera/flutter-pi",
      "stars": 1674,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 4.734375,
          "content": "# SPDX-License-Identifier: MIT\n#\n# For more information, see:\n#\n#   Documentation/process/clang-format.rst\n#   https://clang.llvm.org/docs/ClangFormat.html\n#   https://clang.llvm.org/docs/ClangFormatStyleOptions.html\n#\n---\nAccessModifierOffset: -4\nAlignAfterOpenBracket: BlockIndent\n#AlignArrayOfStructures: Right\nAlignConsecutiveAssignments: false\n#AlignConsecutiveBitFields: false\nAlignConsecutiveDeclarations: false\nAlignConsecutiveMacros: false\nAlignEscapedNewlines: Left\nAlignOperands: true\nAlignTrailingComments: false\nAllowAllArgumentsOnNextLine: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: true\n#AllowShortEnumsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: None\nAllowShortIfStatementsOnASingleLine: Never\n#AllowShortLambdasOnASingleLine: None\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: None\nAlwaysBreakAfterReturnType: None\nAlwaysBreakTemplateDeclarations: false\nAttributeMacros:\n  - 'MAYBE_UNUSED'\n  - 'ATTR_MALLOC'\n  - 'NONNULL'\n  - 'ATTR_PURE'\n  - 'ATTR_CONST'\n\nBinPackArguments: false\nBinPackParameters: false\nBraceWrapping:\n  AfterClass: false\n  AfterControlStatement: false\n  AfterEnum: false\n  AfterFunction: true\n  AfterNamespace: true\n  AfterObjCDeclaration: false\n  AfterStruct: true\n  AfterUnion: true\n  AfterExternBlock: false\n  BeforeCatch: false\n  BeforeElse: false\n  IndentBraces: false\n  SplitEmptyFunction: true\n  SplitEmptyRecord: true\n  SplitEmptyNamespace: true\nBreakBeforeBinaryOperators: None\nBreakBeforeBraces: Attach\nBreakBeforeInheritanceComma: false\nBreakBeforeTernaryOperators: false\nBreakConstructorInitializersBeforeComma: false\nBreakConstructorInitializers: BeforeComma\nBreakAfterJavaFieldAnnotations: false\nBreakStringLiterals: true\nAlwaysBreakBeforeMultilineStrings: true\nColumnLimit: 140\nCommentPragmas: '^ IWYU pragma:'\nCompactNamespaces: false\nConstructorInitializerAllOnOneLineOrOnePerLine: false\nConstructorInitializerIndentWidth: 8\nContinuationIndentWidth: 4\nCpp11BracedListStyle: false\nDerivePointerAlignment: false\nDisableFormat: false\n#ExperimentalAutoDetectBinPacking: true\nFixNamespaceComments: false\nForEachMacros:\n  - 'for_each_pointer_in_pset'\n  - 'for_each_pointer_in_cpset'\n  - 'for_each_connector_in_drmdev'\n  - 'for_each_encoder_in_drmdev'\n  - 'for_each_crtc_in_drmdev'\n  - 'for_each_plane_in_drmdev'\n  - 'for_each_mode_in_connector'\n  - 'for_each_unreserved_plane_in_atomic_req'\n\nIncludeBlocks: Regroup\nIncludeCategories:\n  # C standard library headers\n  - Regex: '^<(assert|complex|ctype|errno|fenv|float|inttypes|iso646|limits|locale|math|setjmp|signal|stdalign|stdarg|stdatomic|stdbool|stddef|stdint|stdio|stdlib|stdnoreturn|string|tgmath|threads|time|uchar|wchar|wctype)\\.h>$'\n    Priority: 1\n  # POSIX headers\n  - Regex: '^<(ctype|dlfcn|fcntl|glob|limits|locale|poll|pthread|regex|semaphore|unistd|sys/mman|sys/stat|sys/types|sys/select)\\.h>$'\n    Priority: 2\n  # all <> includes\n  - Regex: '^<[^>]*>$'\n    Priority: 3\n  # config header should go last\n  - Regex: '^\"config\\.h\"$'\n    Priority: 5\n  # all \"\" includes\n  - Regex: '^\"[^\"]*\"$'\n    Priority: 4\n  # all other includes\n  - Regex: '^.*$'\n    Priority: 4\n\nIncludeIsMainRegex: '(_test)?$'\nIndentCaseLabels: true\nIndentGotoLabels: false\nIndentPPDirectives: BeforeHash\nIndentWidth: 4\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\nKeepEmptyLinesAtTheStartOfBlocks: false\nMacroBlockBegin: ''\nMacroBlockEnd: ''\nMaxEmptyLinesToKeep: 1\nNamespaceIndentation: None\nObjCBinPackProtocolList: Auto\nObjCBlockIndentWidth: 8\nObjCSpaceAfterProperty: true\nObjCSpaceBeforeProtocolList: true\n\nPenaltyBreakAssignment: 60\nPenaltyBreakBeforeFirstCallParameter: 0\nPenaltyBreakComment: 10\nPenaltyBreakFirstLessLess: 0\nPenaltyBreakOpenParenthesis: 0\nPenaltyBreakString: 0\nPenaltyExcessCharacter: 100\nPenaltyReturnTypeOnItsOwnLine: 60\n\nPointerAlignment: Right\nReflowComments: false\nSortIncludes: CaseInsensitive\nSortUsingDeclarations: false\nSpaceAfterCStyleCast: true\nSpaceAfterTemplateKeyword: true\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCtorInitializerColon: true\nSpaceBeforeInheritanceColon: true\nSpaceBeforeParens: ControlStatementsExceptForEachMacros\nSpaceBeforeRangeBasedForLoopColon: true\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 2\nSpacesInAngles: false\nSpacesInContainerLiterals: false\nSpacesInCStyleCastParentheses: false\nSpacesInLineCommentPrefix:\n  Minimum: 1\n  Maximum: -1\nSpacesInParentheses: false\nSpacesInSquareBrackets: false\nStandard: Cpp03\nStatementMacros:\n  - 'DECLARE_REF_OPS'\n  - 'DEFINE_REF_OPS'\n  - 'DEFINE_STATIC_REF_OPS'\n  - 'DECLARE_LOCK_OPS'\n  - 'DEFINE_LOCK_OPS'\n  - 'DEFINE_STATIC_LOCK_OPS'\n  - 'DEFINE_INLINE_LOCK_OPS'\n  - 'UUID'\n  - 'CONST_UUID'\nTabWidth: 4\nTypenameMacros:\n  - 'BMAP_ELEMENT_TYPE'\n  - 'MAX_ALIGNMENT'\nUseTab: Never\n"
        },
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.212890625,
          "content": "/.vscode\n/build\n/out\n\n# CMake docs says it should not be checked in.\nCMakeUserPresets.json\n\n# cmake: https://github.com/github/gitignore/blob/main/CMake.gitignore\nCMakeLists.txt.user\nCMakeCache.txt\nCMakeFiles\nCMakeScripts\nTesting\nMakefile\ncmake_install.cmake\ninstall_manifest.txt\ncompile_commands.json\nCTestTestfile.cmake\n_deps\n\n# C: https://github.com/github/gitignore/blob/main/C.gitignore\n# Prerequisites\n*.d\n\n# Object files\n*.o\n*.ko\n*.obj\n*.elf\n\n# Linker output\n*.ilk\n*.map\n*.exp\n\n# Precompiled Headers\n*.gch\n*.pch\n\n# Libraries\n*.lib\n*.a\n*.la\n*.lo\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n*.i*86\n*.x86_64\n*.hex\n\n# Debug files\n*.dSYM/\n*.su\n*.idb\n*.pdb\n\n# Kernel Module Compile Results\n*.mod*\n*.cmd\n.tmp_versions/\nmodules.order\nModule.symvers\nMkfile.old\ndkms.conf\n\n# MacOS gitignores\n# General\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.2236328125,
          "content": "[submodule \"third_party/Unity\"]\n\tpath = third_party/Unity\n\turl = https://github.com/ThrowTheSwitch/Unity\n[submodule \"third_party/sentry-native\"]\n\tpath = third_party/sentry-native\n\turl = https://github.com/getsentry/sentry-native\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.484375,
          "content": "repos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v2.3.0\n    hooks:\n      - id: check-yaml\n      - id: end-of-file-fixer\n      - id: trailing-whitespace\n        exclude_types: ['markdown']\n      - id: forbid-new-submodules\n      - id: mixed-line-ending\n        args: ['--fix=lf']\n        description: Forces to replace line ending by the UNIX 'lf' character.\n  - repo: https://github.com/pre-commit/mirrors-clang-format\n    rev: v16.0.0\n    hooks:\n      - id: clang-format\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 22.2373046875,
          "content": "#\n# MIT License\n#\n# Original work Copyright (c) 2020 Joel Winarske\n# Modified work Copyright     2021 Hannes Winkler\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n#\n\ncmake_minimum_required(VERSION 3.10.0)\n\n# configure options\noption(BUILD_TEXT_INPUT_PLUGIN \"Include the text input plugin in the finished binary. Enables text input (to flutter text fields, for example) via attached keyboards.\" ON)\noption(BUILD_RAW_KEYBOARD_PLUGIN \"Include the raw keyboard plugin in the finished binary. Enables raw keycode listening in flutter via the flutter RawKeyboard interface.\" ON)\noption(BUILD_TEST_PLUGIN \"Include the test plugin in the finished binary. Allows testing platform channel communication.\" OFF)\n\noption(BUILD_GSTREAMER_VIDEO_PLAYER_PLUGIN \"Include the gstreamer based video plugins in the finished binary. Allows for more stable, hardware accelerated video playback in flutter using gstreamer.\" ON)\noption(TRY_BUILD_GSTREAMER_VIDEO_PLAYER_PLUGIN \"Don't throw an error if the gstreamer libs aren't found, instead just don't build the gstreamer video player plugin in that case.\" ON)\n\noption(BUILD_GSTREAMER_AUDIO_PLAYER_PLUGIN \"Include the gstreamer based audio plugins in the finished binary.\" ON)\noption(TRY_BUILD_GSTREAMER_AUDIO_PLAYER_PLUGIN \"Don't throw an error if the gstreamer libs aren't found, instead just don't build gstreamer audio plugin.\" ON)\n\noption(BUILD_SENTRY_PLUGIN \"Include the sentry plugin in the finished binary. Allows for crash reporting to sentry.io.\" OFF)\n\noption(BUILD_CHARSET_CONVERTER_PLUGIN \"Include the charset converter plugin in the finished binary.\" OFF)\noption(ENABLE_OPENGL \"Build with EGL/OpenGL rendering support.\" ON)\noption(TRY_ENABLE_OPENGL \"Don't throw an error if EGL/OpenGL aren't found, instead just build without EGL/OpenGL support in that case.\" ON)\noption(ENABLE_VULKAN \"Build with Vulkan rendering support.\" OFF)\noption(TRY_ENABLE_VULKAN \"Don't throw an error if vulkan isn't found, instead just build without vulkan support in that case.\" OFF)\nset(VULKAN_DEBUG \"AUTO\" CACHE STRING \"Enable vulkan validation layers and verbose vulkan logging. (ON/OFF/AUTO)\")\nset_property(CACHE VULKAN_DEBUG PROPERTY STRINGS ON OFF AUTO)\noption(ENABLE_SOFTWARE \"Build with software rendering support.\" ON)\noption(DUMP_ENGINE_LAYERS \"True if flutter-pi should dump the list of rendering layers that the flutter engine sends to flutter-pi on each draw.\" OFF)\noption(WARN_MISSING_FIELD_INITIALIZERS \"True of the compiler should be instructed to warn about missing field initializers. This needs some hacky workarounds in the code so gcc won't report spurious warnings, so this should only be enabled if the warnings are explicitly required.\" OFF)\noption(ENABLE_TSAN \"True to build & link with -fsanitize=thread\" OFF)\noption(ENABLE_ASAN \"True to build & link with -fsanitize=address\" OFF)\noption(ENABLE_UBSAN \"True to build & link with -fsanitize=undefined\" OFF)\noption(ENABLE_MTRACE \"True if flutter-pi should call GNU mtrace() on startup.\" OFF)\noption(ENABLE_TESTS \"True if tests should be built. Requires Unity to be checked out at third_party/Unity.\" OFF)\noption(ENABLE_SESSION_SWITCHING \"True if flutter-pi should be built with session switching support. Requires libseat-dev to be installed.\" ON)\noption(TRY_ENABLE_SESSION_SWITCHING \"Don't throw an error if libseat isn't found, instead just build without session switching support in that case.\" ON)\noption(LTO \"Check for IPO/LTO support and enable, if supported. May require gold/lld when building with clang. (Either using `-fuse-ld` in CMAKE_C_FLAGS or by setting as the default system linker.) Only applies to Release or RelWithDebInfo build types.\" ON)\noption(LINT_EGL_HEADERS \"Set an define that'll make the egl.h only export the extension definitions, prototypes that are explicitly marked as required.\" OFF)\noption(DEBUG_DRM_PLANE_ALLOCATIONS \"Add logging in modesetting.c for debugging the process of choosing a fitting DRM plane for a framebuffer layer.\" OFF)\noption(USE_LEGACY_KMS \"Force the use of legacy KMS.\" OFF)\n\n# This is a CMake recognized variable, but we set it to off by default here.\noption(CMAKE_POSITION_INDEPENDENT_CODE \"Enable/Disable Position Independent Code\" OFF)\n\nset(FILESYSTEM_LAYOUTS default meta-flutter)\nset(FILESYSTEM_LAYOUT \"default\" CACHE STRING \"Where to look for the icudtl.dat, app.so/libapp.so, flutter asset bundle.\")\nset_property(CACHE FILESYSTEM_LAYOUT PROPERTY STRINGS ${FILESYSTEM_LAYOUTS})\n\nset(SENTRY_BACKEND \"crashpad\" CACHE STRING \"What sentry backend to use, when the sentry plugin is built. Allowed values are inproc, crashpad and breakpad.\")\noption(SENTRY_PLUGIN_BUNDLE_CRASHPAD_HANDLER \"Bundle the crashpad_handler with the flutter-pi executable.\" ON)\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nif(NOT CMAKE_BUILD_TYPE)\n    set(CMAKE_BUILD_TYPE \"Release\" CACHE STRING \"Choose the type of build, options are: Debug, Release, or MinSizeRel.\" FORCE)\n    message(STATUS \"CMAKE_BUILD_TYPE not set, defaulting to Release.\")\nendif()\n\nif (BUILD_SENTRY_PLUGIN)\n  set(flutterpi_languages C CXX ASM)\nelse()\n  set(flutterpi_languages C ASM)\nendif()\n\nproject(flutter-pi LANGUAGES ${flutterpi_languages} VERSION \"1.0.0\")\n\nmessage(STATUS \"Generator .............. ${CMAKE_GENERATOR}\")\nmessage(STATUS \"Build Type ............. ${CMAKE_BUILD_TYPE}\")\n\ninclude(CheckCCompilerFlag)\n\n# Those libraries we definitely need.\ninclude(FindPkgConfig)\npkg_check_modules(DRM REQUIRED IMPORTED_TARGET libdrm)\npkg_check_modules(GBM REQUIRED IMPORTED_TARGET gbm)\npkg_check_modules(LIBSYSTEMD REQUIRED IMPORTED_TARGET libsystemd)\npkg_check_modules(LIBINPUT REQUIRED IMPORTED_TARGET libinput)\npkg_check_modules(LIBXKBCOMMON REQUIRED IMPORTED_TARGET xkbcommon)\npkg_check_modules(LIBUDEV REQUIRED IMPORTED_TARGET libudev)\n\n# find pthreads\nset(THREADS_PREFER_PTHREAD_FLAG ON)\nfind_package(Threads REQUIRED)\n\nif(POLICY CMP0083)\n  cmake_policy(SET CMP0083 NEW)\n\n  include(CheckPIESupported)\n  check_pie_supported()\nendif()\n\nmessage(STATUS \"PIE .................... ${CMAKE_POSITION_INDEPENDENT_CODE}\")\n\n# flutter-pi executable\nadd_executable(\n  flutter-pi\n  src/main.c\n)\n\n# flutterpi_module\n# We separate the actual flutter-pi code into a separate object library\n# so we can link against it in the tests.\nadd_library(\n  flutterpi_module OBJECT\n  src/flutter-pi.c\n  src/platformchannel.c\n  src/pluginregistry.c\n  src/texture_registry.c\n  src/modesetting.c\n  src/util/collection.c\n  src/util/bitscan.c\n  src/util/vector.c\n  src/cursor.c\n  src/keyboard.c\n  src/user_input.c\n  src/locales.c\n  src/notifier_listener.c\n  src/pixel_format.c\n  src/filesystem_layout.c\n  src/compositor_ng.c\n  src/surface.c\n  src/render_surface.c\n  src/tracer.c\n  src/dmabuf_surface.c\n  src/frame_scheduler.c\n  src/window.c\n  src/dummy_render_surface.c\n  src/plugins/services.c\n)\n\ntarget_link_libraries(flutterpi_module PUBLIC\n  PkgConfig::DRM\n  PkgConfig::GBM\n  PkgConfig::LIBSYSTEMD\n  PkgConfig::LIBINPUT\n  PkgConfig::LIBXKBCOMMON\n  PkgConfig::LIBUDEV\n  Threads::Threads\n  ${CMAKE_DL_LIBS}\n  rt m atomic\n)\n\ntarget_include_directories(flutterpi_module PUBLIC\n  ${CMAKE_SOURCE_DIR}/third_party/flutter_embedder_header/include\n  ${CMAKE_SOURCE_DIR}/src\n  ${CMAKE_BINARY_DIR}\n)\n\ntarget_compile_options(flutterpi_module PUBLIC\n  $<$<CONFIG:Debug>:-O0 -Wall -Wextra -Wno-sign-compare -Werror -ggdb -U_FORTIFY_SOURCE -DDEBUG>\n  $<$<CONFIG:RelWithDebInfo>:-O3 -Wall -Wextra -Wno-sign-compare -ggdb -DNDEBUG>\n  $<$<CONFIG:Release>:-O3 -Wall -Wextra -Wno-sign-compare -DNDEBUG>\n)\n\n# GCC prior to 11.3 reports false positives for missing-field-initializers warning.\nif (CMAKE_C_COMPILER_ID STREQUAL \"GNU\")\n  if (CMAKE_C_COMPILER_VERSION VERSION_LESS \"11.3\")\n    target_compile_options(flutterpi_module PUBLIC -Wno-missing-field-initializers)\n  endif()\n  target_link_options(flutter-pi PUBLIC LINKER:--build-id)\nelseif (CMAKE_C_COMPILER_ID STREQUAL \"Clang\")\n  target_link_options(flutter-pi PUBLIC LINKER:--build-id=sha1)\nendif()\n\n# libinput stuff\n# There's no other way to query the libinput version (in code) somehow.\n# So we need to roll our own libinput version macro\nstring(REPLACE \".\" \";\" LIBINPUT_VERSION_AS_LIST ${LIBINPUT_VERSION})\nlist(GET LIBINPUT_VERSION_AS_LIST 0 LIBINPUT_VERSION_MAJOR)\nlist(GET LIBINPUT_VERSION_AS_LIST 1 LIBINPUT_VERSION_MINOR)\nlist(GET LIBINPUT_VERSION_AS_LIST 2 LIBINPUT_VERSION_PATCH)\n\n# TODO: Just unconditionally define those, make them optional later\nset(HAVE_KMS ON)\nset(HAVE_GBM ON)\nset(HAVE_FBDEV ON)\n\n# OpenGL support\nset(HAVE_EGL OFF)\nset(HAVE_GLES2 OFF)\nset(HAVE_EGL_GLES2 OFF)\n\npkg_check_modules(EGL IMPORTED_TARGET egl)\npkg_check_modules(GLES2 IMPORTED_TARGET glesv2)\nif (ENABLE_OPENGL)\n  if (EGL_FOUND AND GLES2_FOUND)\n    target_sources(flutterpi_module PRIVATE\n      src/egl_gbm_render_surface.c\n      src/gl_renderer.c\n    )\n    target_link_libraries(flutterpi_module PUBLIC\n      PkgConfig::EGL\n      PkgConfig::GLES2\n    )\n\n    set(HAVE_EGL ON)\n    set(HAVE_GLES2 ON)\n    set(HAVE_EGL_GLES2 ON)\n  elseif (TRY_ENABLE_OPENGL)\n    message(\"EGL and/or OpenGL was not found. Flutter-pi will build without EGL/OpenGL rendering support.\")\n  else()\n    message(SEND_ERROR \"EGL and/or OpenGL was not found. Try building with `-DTRY_ENABLE_OPENGL=On` if you want to just disable EGL/OpenGL support in that case.\")\n  endif()\nendif()\n\nmessage(STATUS \"EGL/GLES support ....... ${HAVE_EGL_GLES2}\")\n\nmessage(STATUS \"Lint EGL headers ....... ${LINT_EGL_HEADERS}\")\n\n# Vulkan support\nset(HAVE_VULKAN OFF)\n\npkg_check_modules(VULKAN IMPORTED_TARGET vulkan)\nif (ENABLE_VULKAN)\n  if (VULKAN_FOUND)\n    target_sources(flutterpi_module PRIVATE\n      src/vk_gbm_render_surface.c\n      src/vk_renderer.c\n    )\n    target_link_libraries(flutterpi_module PUBLIC\n      PkgConfig::VULKAN\n    )\n\n    set(HAVE_VULKAN ON)\n  elseif (TRY_ENABLE_VULKAN)\n    message(\"Vulkan was not found. Flutter-pi will build without vulkan rendering support.\")\n  else()\n    message(SEND_ERROR \"Vulkan was not found. Try building with `-DTRY_ENABLE_VULKAN=On` if you want to just disable vulkan support in that case.\")\n  endif()\nendif()\n\nmessage(STATUS \"Vulkan support ......... ${HAVE_VULKAN}\")\n\n# We need at least one renderer\nif (NOT HAVE_VULKAN AND NOT HAVE_EGL_GLES2)\n  message(SEND_ERROR \"At least one of the EGL/GLES2 and Vulkan backends must be enabled.\")\nendif()\n\n# Filesystem Layout\n# meta-flutter or normal flutter-pi.\n# see src/filesystem_layout.c for details.\nif(NOT FILESYSTEM_LAYOUT IN_LIST FILESYSTEM_LAYOUTS)\n  message(FATAL_ERROR \"FILESYSTEM_LAYOUT must be one of ${FILESYSTEM_LAYOUTS}\")\nendif()\n\nmessage(STATUS \"Filesystem Layout ...... ${FILESYSTEM_LAYOUT}\")\n\n# config.h takes the defines in form of #cmakedefine FILESYSTEM_LAYOUT_DEFAULT, ...\nif(FILESYSTEM_LAYOUT STREQUAL default)\n  set(FILESYSTEM_LAYOUT_DEFAULT ON)\nelseif(FILESYSTEM_LAYOUT STREQUAL meta-flutter)\n  set(FILESYSTEM_LAYOUT_METAFLUTTER ON)\nendif()\n\n# Session switching support (using libseat)\nset(HAVE_LIBSEAT OFF)\n\nif (ENABLE_SESSION_SWITCHING)\n  if (TRY_ENABLE_SESSION_SWITCHING)\n    pkg_check_modules(LIBSEAT IMPORTED_TARGET libseat)\n  else()\n    pkg_check_modules(LIBSEAT REQUIRED IMPORTED_TARGET libseat)\n  endif()\n\n  if (LIBSEAT_FOUND)\n    target_link_libraries(flutterpi_module PUBLIC PkgConfig::LIBSEAT)\n    set(HAVE_LIBSEAT ON)\n  else()\n    message(\"libseat was not found. flutter-pi will be built without session switching support.\")\n  endif()\nendif()\n\nmessage(STATUS \"Session switching ...... ${HAVE_LIBSEAT}\")\n\n# TODO: We actually don't need the compile definitions anymore, except for\n# text input and raw keyboard plugin (because those have special treatment\n# in flutter-pi.c)\nif (BUILD_TEXT_INPUT_PLUGIN)\n  target_sources(flutterpi_module PRIVATE src/plugins/text_input.c)\nendif()\nif (BUILD_RAW_KEYBOARD_PLUGIN)\n  target_sources(flutterpi_module PRIVATE src/plugins/raw_keyboard.c)\nendif()\nif (BUILD_TEST_PLUGIN)\n  target_sources(flutterpi_module PRIVATE src/plugins/testplugin.c)\nendif()\nif (BUILD_GSTREAMER_VIDEO_PLAYER_PLUGIN)\n  if (NOT HAVE_EGL_GLES2)\n    message(NOTICE \"EGL and OpenGL ES2 are required for gstreamer video player. Gstreamer video player plugin won't be build.\")\n  else()\n    if (TRY_BUILD_GSTREAMER_VIDEO_PLAYER_PLUGIN)\n      pkg_check_modules(LIBGSTREAMER IMPORTED_TARGET gstreamer-1.0)\n      pkg_check_modules(LIBGSTREAMER_PLUGINS_BASE IMPORTED_TARGET gstreamer-plugins-base-1.0)\n      pkg_check_modules(LIBGSTREAMER_APP IMPORTED_TARGET gstreamer-app-1.0)\n      pkg_check_modules(LIBGSTREAMER_ALLOCATORS IMPORTED_TARGET gstreamer-allocators-1.0)\n      pkg_check_modules(LIBGSTREAMER_VIDEO IMPORTED_TARGET gstreamer-video-1.0)\n    else()\n      pkg_check_modules(LIBGSTREAMER REQUIRED IMPORTED_TARGET gstreamer-1.0)\n      pkg_check_modules(LIBGSTREAMER_PLUGINS_BASE REQUIRED IMPORTED_TARGET gstreamer-plugins-base-1.0)\n      pkg_check_modules(LIBGSTREAMER_APP REQUIRED IMPORTED_TARGET gstreamer-app-1.0)\n      pkg_check_modules(LIBGSTREAMER_ALLOCATORS REQUIRED IMPORTED_TARGET gstreamer-allocators-1.0)\n      pkg_check_modules(LIBGSTREAMER_VIDEO REQUIRED IMPORTED_TARGET gstreamer-video-1.0)\n    endif()\n\n    if (LIBGSTREAMER_FOUND AND LIBGSTREAMER_PLUGINS_BASE_FOUND AND LIBGSTREAMER_APP_FOUND AND LIBGSTREAMER_ALLOCATORS_FOUND AND LIBGSTREAMER_VIDEO_FOUND)\n      # There's no other way to query the libinput version (in code) somehow.\n      # So we need to roll our own libinput version macro\n      string(REPLACE \".\" \";\" LIBGSTREAMER_VERSION_AS_LIST ${LIBGSTREAMER_VERSION})\n      list(GET LIBGSTREAMER_VERSION_AS_LIST 0 LIBGSTREAMER_VERSION_MAJOR)\n      list(GET LIBGSTREAMER_VERSION_AS_LIST 1 LIBGSTREAMER_VERSION_MINOR)\n      list(GET LIBGSTREAMER_VERSION_AS_LIST 2 LIBGSTREAMER_VERSION_PATCH)\n\n      target_sources(flutterpi_module PRIVATE\n        src/plugins/gstreamer_video_player/plugin.c\n        src/plugins/gstreamer_video_player/player.c\n        src/plugins/gstreamer_video_player/frame.c\n      )\n      target_link_libraries(flutterpi_module PUBLIC\n        PkgConfig::LIBGSTREAMER\n        PkgConfig::LIBGSTREAMER_PLUGINS_BASE\n        PkgConfig::LIBGSTREAMER_APP\n        PkgConfig::LIBGSTREAMER_ALLOCATORS\n        PkgConfig::LIBGSTREAMER_VIDEO\n      )\n    else()\n      message(NOTICE \"Couldn't find gstreamer libraries. Gstreamer video player plugin won't be build.\")\n    endif()\n  endif()\nendif()\n\nif (BUILD_GSTREAMER_AUDIO_PLAYER_PLUGIN)\n  if (TRY_BUILD_GSTREAMER_AUDIO_PLAYER_PLUGIN)\n    pkg_check_modules(LIBGSTREAMER IMPORTED_TARGET gstreamer-1.0)\n    pkg_check_modules(LIBGSTREAMER_APP IMPORTED_TARGET gstreamer-app-1.0)\n    pkg_check_modules(LIBGSTREAMER_AUDIO IMPORTED_TARGET gstreamer-audio-1.0)\n  else()\n    pkg_check_modules(LIBGSTREAMER REQUIRED IMPORTED_TARGET gstreamer-1.0)\n    pkg_check_modules(LIBGSTREAMER_APP REQUIRED IMPORTED_TARGET gstreamer-app-1.0)\n    pkg_check_modules(LIBGSTREAMER_AUDIO REQUIRED IMPORTED_TARGET gstreamer-audio-1.0)\n  endif()\n\n  if (LIBGSTREAMER_FOUND AND LIBGSTREAMER_APP_FOUND AND LIBGSTREAMER_AUDIO_FOUND)\n    target_sources(flutterpi_module PRIVATE\n      src/plugins/audioplayers/plugin.c\n      src/plugins/audioplayers/player.c\n    )\n    target_link_libraries(flutterpi_module PUBLIC\n      PkgConfig::LIBGSTREAMER\n      PkgConfig::LIBGSTREAMER_APP\n      PkgConfig::LIBGSTREAMER_AUDIO\n    )\n  else()\n    message(NOTICE \"Couldn't find gstreamer libraries. Gstreamer audio player plugin won't be build.\")\n  endif()\nendif()\n\nif (BUILD_CHARSET_CONVERTER_PLUGIN)\n  target_sources(flutterpi_module PRIVATE src/plugins/charset_converter.c)\nendif()\n\n# Sentry Plugin\nset(HAVE_BUNDLED_CRASHPAD_HANDLER OFF)\nif (BUILD_SENTRY_PLUGIN)\n  set(SENTRY_PIC ${CMAKE_POSITION_INDEPENDENT_CODE} CACHE BOOL \"\")\n  add_subdirectory(third_party/sentry-native)\n\n  target_sources(flutterpi_module PRIVATE src/plugins/sentry/sentry.c)\n  target_link_libraries(flutterpi_module PUBLIC sentry::sentry)\n\n  if (SENTRY_BACKEND STREQUAL \"crashpad\" AND SENTRY_PLUGIN_BUNDLE_CRASHPAD_HANDLER)\n    set(HAVE_BUNDLED_CRASHPAD_HANDLER ON)\n  \n    target_sources(flutter-pi PRIVATE src/crashpad_handler_trampoline.cc)\n    # link against the same libraries the crashpad_handler uses\n    \n    get_target_property(handler_deps crashpad_handler INTERFACE_LINK_LIBRARIES)\n    target_link_libraries(flutter-pi PUBLIC ${handler_deps})\n  endif()\nendif()\nmessage(STATUS \"Sentry plugin .......... ${BUILD_SENTRY_PLUGIN}\")\nmessage(STATUS \"Bundle crashpad_handler  ${HAVE_BUNDLED_CRASHPAD_HANDLER}\")\n\n# Needed so dart VM can actually resolve symbols in the same\n# executable. (For dart:ffi DynamicLibrary.executable / DynamicLibrary.process)\ntarget_link_options(flutterpi_module PUBLIC -rdynamic)\n\n# Define VULKAN_DEBUG if it was set to On, or if it was set to AUTO and we're using debug mode.\nif (VULKAN_DEBUG MATCHES AUTO)\n  if (CMAKE_BUILD_TYPE MATCHES DEBUG)\n    set(VULKAN_DEBUG ON)\n  else()\n    set(VULKAN_DEBUG OFF)\n  endif()\nelseif (VULKAN_DEBUG MATCHES \"OFF\")\n  set(VULKAN_DEBUG OFF)\nelseif (VULKAN_DEBUG MATCHES \"ON\")\n  set(VULKAN_DEBUG ON)\nendif()\n\n# Some sanitizer configs.\nif (ENABLE_TSAN)\n  target_link_options(flutterpi_module PUBLIC -fsanitize=thread)\n  target_compile_options(flutterpi_module PUBLIC -fsanitize=thread)\nendif()\nif (ENABLE_ASAN)\n  # when we use asan, we need to force linking against the C++ stdlib.\n  # If we don't link against it, and load a dynamic library that's linked against the C++ stdlib (like the flutter engine),\n  # and something in the dynamically loaded library triggers asan, it'll throw an error because it hasn't\n  # intercepted stdc++ yet.\n  # Also disable --as-needed so we _actually_ link against c++, even though we don't use any symbols from it.\n  target_link_libraries(flutterpi_module PUBLIC stdc++)\n  target_link_options(flutterpi_module PUBLIC -fsanitize=address -fno-omit-frame-pointer -Wl,--no-as-needed)\n  target_compile_options(flutterpi_module PUBLIC -fsanitize=address)\n\n  check_c_compiler_flag(-static-libasan HAVE_STATIC_LIBASAN)\n  if (HAVE_STATIC_LIBASAN)\n    target_link_options(flutterpi_module PUBLIC -static-libasan)\n  endif()\nendif()\nif (ENABLE_UBSAN)\n  target_link_options(flutterpi_module PUBLIC -fsanitize=undefined)\n  target_compile_options(flutterpi_module PUBLIC -fsanitize=undefined)\nendif()\n\nconfigure_file(config.h.in config.h @ONLY)\n\n# TODO: make mapping portable\n# is mapping `../src/` to `` always gonna work?\ncheck_c_compiler_flag(-fmacro-prefix-map=.=. COMPILER_SUPPORTS_MACRO_PREFIX_MAP)\nif (COMPILER_SUPPORTS_MACRO_PREFIX_MAP)\n  target_compile_options(flutterpi_module PRIVATE \"-fmacro-prefix-map=../src/=\")\n  target_compile_options(flutterpi_module PRIVATE \"-fmacro-prefix-map=${CMAKE_CURRENT_SOURCE_DIR}/src/=\")\nendif()\n\n# Actual flutter-pi executable.\ntarget_link_libraries(\n  flutter-pi PUBLIC\n  flutterpi_module\n)\ninstall(TARGETS flutter-pi RUNTIME DESTINATION bin)\n\n# Enable lto if supported.\ncmake_policy(SET CMP0069 NEW)\ninclude(CheckIPOSupported)\n# include(CheckLinkerFlag)\n\nset(USE_LTO OFF)\n# set(NEEDS_GOLD OFF)\n# set(NEEDS_LLD OFF)\nif(LTO AND (CMAKE_BUILD_TYPE STREQUAL Release OR CMAKE_BUILD_TYPE STREQUAL RelWithDebInfo))\n  # So people can specify `-fuse-ld=lld` in the CMAKE_C_FLAGS.\n  # Otherwise check_ipo_supported will not use CMAKE_C_FLAGS.\n  if (POLICY CMP0138)\n    cmake_policy(SET CMP0138 NEW)\n  endif()\n\n  check_ipo_supported(RESULT IPO_SUPPORTED OUTPUT IPO_SUPPORT_OUTPUT)\n  if (NOT IPO_SUPPORTED)\n    message(WARNING \"IPO/LTO was requested in the configure options, but is not supported by the toolchain. Check CMakeFiles/CMakeError.log for details.\")\n  endif()\n\n  # Try to enable IPO with gold and lld.\n  # Needs CMP0138.\n  # (untested because CMP0138 required CMake 3.24, that's why it's commented out)\n  # if (NOT IPO_SUPPORTED)\n  #   check_linker_flag(C \"-fuse-ld=gold\" SUPPORTS_GOLD)\n  #   if (SUPPORTS_GOLD)\n  #     set(OLD_CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n  #\n  #     set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fuse-ld=gold\")\n  #     try_compile()\n  #     check_ipo_supported(RESULT IPO_SUPPORTED_WITH_GOLD OUTPUT IPO_SUPPORT_OUTPUT)\n  #     if (IPO_SUPPORTED_WITH_GOLD)\n  #       set(IPO_SUPPORTED ON)\n  #       set(NEEDS_GOLD ON)\n  #     endif()\n  #\n  #     set(CMAKE_C_FLAGS \"${OLD_CMAKE_C_FLAGS}\")\n  #   endif()\n  #\n  #   check_linker_flag(C \"-fuse-ld=lld\" SUPPORTS_LLD)\n  #   if (SUPPORTS_LLD)\n  #     set(OLD_CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n  #\n  #     set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fuse-ld=lld\")\n  #     check_ipo_supported(RESULT IPO_SUPPORTED_WITH_LLD OUTPUT IPO_SUPPORT_OUTPUT)\n  #     if (IPO_SUPPORTED_WITH_LLD)\n  #       set(IPO_SUPPORTED ON)\n  #       set(NEEDS_LLD ON)\n  #     endif()\n  #\n  #     set(CMAKE_C_FLAGS \"${OLD_CMAKE_C_FLAGS}\")\n  #   endif()\n  # endif()\n\n  # clang doesn't support LTO when using GNU ld.\n  if(IPO_SUPPORTED AND (\"${CMAKE_C_COMPILER_ID}\" STREQUAL \"Clang\"))\n    execute_process(COMMAND ${CMAKE_C_COMPILER} -Wl,--version OUTPUT_VARIABLE LINKER_VERSION_OUTPUT ERROR_QUIET)\n    if(\"${LINKER_VERSION_OUTPUT}\" MATCHES \"GNU ld\")\n      message(WARNING \"IPO/LTO was requested, but is not supported when using clang with GNU ld as the linker. Try setting gold or lld as the system linker.\")\n      set(IPO_SUPPORTED OFF)\n    endif()\n  endif()\n\n  if (IPO_SUPPORTED)\n    set(USE_LTO ON)\n  endif()\nendif()\n\nmessage(STATUS \"IPO/LTO ................ ${USE_LTO}\")\nif (USE_LTO)\n  set_property(TARGET flutterpi_module PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)\n  set_property(TARGET flutter-pi PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)\n  # if (NEEDS_GOLD)\n  #   Technically specifying only for one would suffice.\n  #   target_link_options(flutterpi_module PUBLIC \"-fuse-ld=gold\")\n  #   target_link_options(flutter-pi PUBLIC \"-fuse-ld=gold\")\n  # elseif (NEEDS_LLD)\n  #   target_link_options(flutterpi_module PUBLIC \"-fuse-ld=lld\")\n  #   target_link_options(flutter-pi PUBLIC \"-fuse-ld=lld\")\n  # endif()\nendif()\n\nif(ENABLE_TESTS)\n  include(CTest)\n\n  add_subdirectory(third_party)\n  add_subdirectory(test)\nendif()\n"
        },
        {
          "name": "CMakePresets.json",
          "type": "blob",
          "size": 1.6357421875,
          "content": "{\n    \"version\": 2,\n    \"configurePresets\": [\n        {\n            \"name\": \"default\",\n            \"displayName\": \"Default OpenGL host build\",\n            \"description\": \"Sets Ninja generator, build and install directory\",\n            \"generator\": \"Ninja\",\n            \"binaryDir\": \"${sourceDir}/out/build/${presetName}\",\n            \"cacheVariables\": {\n                \"CMAKE_BUILD_TYPE\": \"Debug\",\n                \"CMAKE_INSTALL_PREFIX\": \"${sourceDir}/out/install/${presetName}\",\n                \"ENABLE_OPENGL\": true,\n                \"BUILD_GSTREAMER_AUDIO_PLAYER_PLUGIN\": true,\n                \"BUILD_SENTRY_PLUGIN\": true,\n                \"ENABLE_TESTS\": true\n            }\n        },\n        {\n            \"name\": \"cross-aarch64-default\",\n            \"displayName\": \"OpenGL AArch64 cross-build\",\n            \"description\": \"Sets Ninja generator, build and install directory\",\n            \"generator\": \"Ninja\",\n            \"binaryDir\": \"${sourceDir}/out/build/${presetName}\",\n            \"inherits\": \"default\",\n            \"cacheVariables\": {\n                \"CMAKE_C_COMPILER\": \"clang\",\n                \"CMAKE_C_COMPILER_TARGET\": \"aarch64-linux-gnu\"\n            }\n        },\n        {\n            \"name\": \"cross-armhf-default\",\n            \"displayName\": \"OpenGL armhf cross-build\",\n            \"description\": \"Sets Ninja generator, build and install directory\",\n            \"generator\": \"Ninja\",\n            \"binaryDir\": \"${sourceDir}/out/build/${presetName}\",\n            \"inherits\": \"default\",\n            \"cacheVariables\": {\n                \"CMAKE_C_COMPILER\": \"clang\",\n                \"CMAKE_C_COMPILER_TARGET\": \"arm-linux-gnueabihf\"\n            }\n        }\n    ]\n}\n"
        },
        {
          "name": "GETTING_STARTED.md",
          "type": "blob",
          "size": 4.40625,
          "content": "# Getting Started with flutter-pi\n\nThese instructions summarize the information in the [README.md](README.md) file. See that file for more details.\nIn each step below with Bash commands, the commands start with a set of `export` commands that you should update appropriately.\n\n1. Build a Raspberry Pi with a touchscreen. This will be your target.\n\n2. Prepare your target for flutter-pi (see \"Configuring your Raspberry Pi\" in the README for details):\n   ```bash\n   export APPNAME=hello_pi # change this to the name of your application\n   \n   # one-time setup\n   sudo usermod -a -G render $USER\n   sudo apt --yes install libgl1-mesa-dev libgles2-mesa-dev libegl-mesa0 libdrm-dev libgbm-dev\n   sudo apt --yes install libsystemd-dev libinput-dev libudev-dev libxkbcommon-dev\n   sudo apt --yes install ttf-mscorefonts-installer fontconfig\n   sudo fc-cache\n   if [ `uname -m` == 'armv7l' ]; then export ARM=arm; else export ARM=arm64; fi\n   mkdir -p ~/dev\n   pushd ~/dev\n   git clone --depth 1 https://github.com/ardera/flutter-engine-binaries-for-arm engine-binaries\n   sudo ./engine-binaries/install.sh\n   git clone https://github.com/ardera/flutter-pi.git\n   cd flutter-pi\n   mkdir build && cd build\n   cmake ..\n   make -j`nproc`\n   # per-application setup\n   mkdir -p ~/dev/$APPNAME\n   popd\n   echo You will need to set ARM to: $ARM\n   ```\n   \n   Take a note of the last line of output. It should say you need \"arm\" or \"arm64\". This is used to set ARM below.\n   \n   Take a note of which version of Flutter the binaries were compiled for. This is used to set VERSION below. It should be clear from the commit messages of the latest commit to the repo: https://github.com/ardera/flutter-engine-binaries-for-arm\n\n3. Configure your target. Run `sudo raspi-config`, and configure the system as follows:\n   1. Select `System Options` -> `Boot / Auto Login` -> `Console` (or `Console (Autologin)`).\n   2. Select `Advanced Options` -> `GL Driver` -> `GL (Fake-KMS)`.\n   3. Select `Performance Options` -> `GPU Memory` and set it to `64`.\n   4. Exit `raspi-config` and reboot when offered.\n\n4. Download, install, and configure Flutter on a host machine (not the Raspberry Pi), then create an application, compile it, and run it.\n   These instructions will put the version of Flutter you will use for the Raspberry Pi into the `~/dev/flutter-for-pi` directory so as to not interfere with your normal Flutter installation.\n   For the purposes of these instructions we'll assume this is an x64 Linux workstation.\n   ```bash\n   export VERSION=... # set this to the version determined above, e.g. 1.22.4\n   export ARM=... # set this to \"arm\" or \"arm64\" as determined above\n   export TARGET=... # set this to your Raspberry Pi's hostname\n   export APPNAME=hello_pi # same as what you used earlier\n   export TARGETUSER=pi # set this to your username on the raspberry pi, e.g. \"pi\" or $USER if it's the same as on the host\n   \n   mkdir -p ~/dev\n   pushd ~/dev\n   # one-time setup\n   git clone --branch $VERSION https://github.com/flutter/flutter.git flutter-for-pi\n   ~/dev/flutter-for-pi/bin/flutter precache\n   git clone --depth 1 https://github.com/ardera/flutter-engine-binaries-for-arm engine-binaries\n   chmod +x engine-binaries/$ARM/gen_snapshot_linux_x64_release\n   # create the application\n   flutter-for-pi/bin/flutter create $APPNAME\n   # compile the application\n   cd $APPNAME\n   ../flutter-for-pi/bin/flutter packages get # this might not be necessary\n   ../flutter-for-pi/bin/flutter build bundle --no-tree-shake-icons --precompiled\n   ../flutter-for-pi/bin/cache/dart-sdk/bin/dart \\\n     ../flutter-for-pi/bin/cache/dart-sdk/bin/snapshots/frontend_server.dart.snapshot \\\n     --sdk-root ~/dev/flutter-for-pi/bin/cache/artifacts/engine/common/flutter_patched_sdk_product \\\n     --target=flutter \\\n     --aot --tfa -Ddart.vm.product=true \\\n     --packages .dart_tool\\package_config.json --output-dill build/kernel_snapshot.dill --depfile build/kernel_snapshot.d \\\n     package:$APPNAME/main.dart\n   ../engine-binaries/$ARM/gen_snapshot_linux_x64_release \\\n     --deterministic --snapshot_kind=app-aot-elf \\\n     --strip --sim-use-hardfp \\\n     --elf=build/flutter_assets/app.so build/kernel_snapshot.dill\n   # upload the application\n   rsync --recursive ~/dev/$APPNAME/build/flutter_assets/ $TARGETUSER@$TARGET:dev/$APPNAME\n   # run the application\n   ssh $TARGETUSER@$TARGET \"killall\" \"flutter-pi\"\t\n   ssh $TARGETUSER@$TARGET \"dev/flutter-pi/build/flutter-pi\" \"--release\" \"~/dev/$APPNAME\"\n   popd\n   ```\n\nThat's it!\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2019 Hannes Winkler\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 25.3115234375,
          "content": "## 📰 NEWS\n- Added a (not complete) sentry plugin, see: https://github.com/ardera/flutter-pi/wiki/Sentry-Support\n- There's now flutterpi tool to make building the app easier: https://pub.dev/packages/flutterpi_tool\n\n# flutter-pi\nA light-weight Flutter Engine Embedder for Raspberry Pi. Inspired by https://github.com/chinmaygarde/flutter_from_scratch.\nFlutter-pi also runs without X11, so you don't need to boot into Raspbian Desktop & have X11 and LXDE load up; just boot into the command-line.\n\nYou can now **theoretically** run every flutter app you want using flutter-pi, including apps using packages & plugins, just that you'd have to build the platform side of the plugins you'd like to use yourself.\n\n_The difference between packages and plugins is that packages don't include any native code, they are just pure Dart. Plugins (like the [shared_preferences plugin](https://github.com/flutter/plugins/tree/main/packages/shared_preferences)) include platform-specific code._\n\n## 🖥️ Supported Platforms\nAlthough flutter-pi is only tested on a Rasberry Pi 4 2GB, it should work fine on other linux platforms, with the following conditions:\n\n- support for hardware 3D acceleration. more precisely support for kernel-modesetting (KMS) and the direct rendering infrastructure (DRI) \n- CPU architecture is one of ARMv7, ARMv8, x86 or x86 64bit.\n\nThis means flutter-pi won't work on a Pi Zero (only the first one) or Pi 1.\n\nKnown working boards:\n\n- Pi 2, 3 and 4 (even the 512MB models)\n- Pi Zero 2 (W)\n\nIf you encounter issues running flutter-pi on any of the supported platforms listed above, please report them to me and I'll fix them.\n\n## 📑 Contents\n\n1. **[Building flutter-pi on the Raspberry Pi](#-building-flutter-pi-on-the-raspberry-pi)**  \n1.1 [Dependencies](#dependencies)  \n1.2 [Compiling](#compiling)  \n2. **[Running your App on the Raspberry Pi](#-running-your-app-on-the-raspberry-pi)**  \n2.1 [Configuring your Raspberry Pi](#configuring-your-raspberry-pi)  \n2.2 [Building the App](#building-the-app-new-method-linux-only)  \n2.3 [Running your App with flutter-pi](#running-your-app-with-flutter-pi)  \n2.4 [gstreamer video player](#gstreamer-video-player)  \n2.5 [audioplayers](#audioplayers)\n3. **[Performance](#-performance)**  \n3.1 [Graphics Performance](#graphics-performance)  \n3.2 [Touchscreen latency](#touchscreen-latency)\n4. **[Useful Dart Packages](#-useful-dart-packages)**\n5. **[Discord](#-discord)**\n\n## 🛠 Building flutter-pi on the Raspberry Pi\n- If you want to update flutter-pi, you check out the latest commit using `git pull && git checkout origin/master` and continue with [compiling](#compiling), step 2.\n\n### Dependencies\n\n1. ~~Install the engine-binaries~~ (not required anymore, except when using the old method to build the app bundle, see below)\n\n    <details>\n\n    <summary>Instructions</summary>\n\n    - Follow the instructions [in the _flutter-engine-binaries-for-arm_ repo.](https://github.com/ardera/flutter-engine-binaries-for-arm).\n\n      <details>\n      <summary>More Info</summary>\n    \n      flutter-pi needs flutters `icudtl.dat` and `libflutter_engine.so.{debug,profile,release}` at runtime, depending on the runtime mode used.\n      You actually have two options here:\n\n      - you build the engine yourself. takes a lot of time, and it most probably won't work on the first try. But once you have it set up, you have unlimited freedom on which engine version you want to use. You can find some rough guidelines [here](https://medium.com/flutter/flutter-on-raspberry-pi-mostly-from-scratch-2824c5e7dcb1).\n      - you can use the pre-built engine binaries I am providing [in the _flutter-engine-binaries-for-arm_ repo.](https://github.com/ardera/flutter-engine-binaries-for-arm). I will only provide binaries for some engine versions though (most likely the stable ones).\n\n      </details>\n\n    \n    </details>\n\n3. Install cmake, graphics, system libraries and fonts:\n    ```shell\n    sudo apt install cmake libgl1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev libdrm-dev libgbm-dev ttf-mscorefonts-installer fontconfig libsystemd-dev libinput-dev libudev-dev  libxkbcommon-dev\n    ```\n\n    If you want to use the [gstreamer video player](#gstreamer-video-player), install these too:\n    ```shell\n    sudo apt install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-ugly gstreamer1.0-plugins-bad gstreamer1.0-libav gstreamer1.0-alsa\n    ```\n    <details>\n      <summary>More Info</summary>\n      \n      - flutter-pi needs the mesa OpenGL ES and EGL implementation and libdrm & libgbm. It may work with non-mesa implementations too, but that's untested.\n      - The flutter engine depends on the _Arial_ font. Since that doesn't come included with Raspbian, you need to install it.\n      - `libsystemd` is not systemd, it's just an utility library. It provides the event loop and dbus support for flutter-pi.\n      - `libinput-dev`, `libudev-dev` and `libxkbcommon-dev` are needed for (touch, mouse, raw keyboard and text) input support.\n      - `libudev-dev` is required, but actual udev is not. Flutter-pi will just open all `event` devices inside `/dev/input` (unless overwritten using `-i`) if udev is not present.\n      - `gpiod` and `libgpiod-dev` where required in the past, but aren't anymore since the `flutter_gpiod` plugin will directly access the kernel interface.\n    </details>\n    \n4. Update the system fonts.\n    ```bash\n    sudo fc-cache\n    ```\n\n### Compiling\n1. Clone flutter-pi and cd into the cloned directory:\n    ```bash\n    git clone --recursive https://github.com/ardera/flutter-pi\n    cd flutter-pi\n    ```\n2. Compile:\n    ```bash\n    mkdir build && cd build\n    cmake ..\n    make -j`nproc`\n    ```\n3. Install:\n    ```bash\n    sudo make install\n    ```\n\n## 🚀 Running your App on the Raspberry Pi\n### Configuring your Raspberry Pi\n1. Open raspi-config:\n    ```bash\n    sudo raspi-config\n    ```\n    \n2. Switch to console mode:\n   `System Options -> Boot / Auto Login` and select `Console` or `Console (Autologin)`.\n\n3. *You can skip this if you're on Raspberry Pi 4 with Raspbian Bullseye*  \n    Enable the V3D graphics driver:  \n   `Advanced Options -> GL Driver -> GL (Fake KMS)`\n\n4. Configure the GPU memory\n   `Performance Options -> GPU Memory` and enter `64`.\n\n5. Leave `raspi-config`.\n\n6. Give the `pi` permission to use 3D acceleration. (**NOTE:** potential security hazard. If you don't want to do this, launch `flutter-pi` using `sudo` instead.)\n    ```bash\n    usermod -a -G render pi\n    ```\n\n7. Finish and reboot.\n\n<details>\n  <summary>More information</summary>\n  \n  - flutter-pi requires that no other process, like a X11- or wayland-server, is using the video output. So to disable the desktop environment, we boot into console instead.\n  - The old broadcom-proprietary GL driver was bugged and not working with flutter, so we have to use the Fake KMS driver.\n  - Actually, you can also configure 16MB of GPU memory if you want to. 64MB are needed when you want to use the [`omxplayer_video_player`](https://pub.dev/packages/omxplayer_video_player) plugin.\n  - `pi` isn't allowed to directly access the GPU because IIRC this has some privilege escalation bugs. Raspberry Pi has quite a lot of system-critical, not graphics-related stuff running on the GPU. I read somewhere it's easily possible to gain control of the GPU by writing malicious shaders. From there you can gain control of the CPU and thus the linux kernel. So basically the `pi` user could escalate privileges and become `root` just by directly accessing the GPU. But maybe this has already been fixed, I'm not sure.\n</details>\n\n### Building the App (New Method, Linux-only)\nThe app must be built on your development machine. Note that you can't use a Raspberry Pi as your development machine.\n\n_One-time setup:_\n1. Make sure you've installed the flutter SDK. Only flutter SDK >= 3.10.5 is supported for the new method at the moment.\n2. Install the [flutterpi_tool](https://pub.dev/packages/flutterpi_tool):\n   Run `flutter pub global activate flutterpi_tool` (One time only)\n3. If running `flutterpi_tool` directly doesn't work, follow https://dart.dev/tools/pub/cmd/pub-global#running-a-script-from-your-path\n   to add the dart global bin directory to your path.  \n   Alternatively, you can launch the tool via:\n   `flutter pub global run flutterpi_tool ...`\n\n_Building the app bundle:_\n1. Open terminal or commandline and `cd` into your app directory.\n2. Run `flutterpi_tool build` to build the app.\n    - This will build the app for ARM 32-bit debug mode.\n    - `flutterpi_tool build --help` gives more usage information.\n    - For example, to build for 64-bit ARM, release mode, with a Raspberry Pi 4 tuned engine, use:  \n       `flutterpi_tool build --arch=arm64 --cpu=pi4 --release`\n3. Deploy the bundle to the Raspberry Pi using `rsync` or `scp`:\n    - Using `rsync` (available on linux and macOS or on Windows when using [WSL](https://docs.microsoft.com/de-de/windows/wsl/install-win10))\n       ```bash\n       rsync -a --info=progress2 ./build/flutter_assets/ pi@raspberrypi:/home/pi/my_apps_flutter_assets\n       ```\n     - Using `scp` (available on linux, macOS and Windows)\n       ```bash\n       scp -r ./build/flutter_assets/ pi@raspberrypi:/home/pi/my_apps_flutter_assets\n       ```\n\n_Example:_\n1. We'll build the asset bundle for `flutter_gallery` and deploy it using `rsync` to a Raspberry Pi 4 in this example.\n```bash\ngit clone https://github.com/flutter/gallery.git flutter_gallery\ncd flutter_gallery\ngit checkout d77920b4ced4a105ad35659fbe3958800d418fb9\nflutter pub get\nflutterpi_tool build --release --cpu=pi4\nrsync -a ./build/flutter_assets/ pi@raspberrypi:/home/pi/flutter_gallery/\n```\n\n2. On Raspberry Pi, run `sudo apt-get install xdg-user-dirs` to install the runtime requirement of flutter_gallery. (otherwise it may [throw exception](https://github.com/flutter/gallery/issues/979#issuecomment-1693361972))\n\n3. Done. You can now run this app in release mode using `flutter-pi --release /home/pi/flutter_gallery`.\n\n### Building the App (old method, linux or windows)\n\n<details>\n\n<summary>Instructions</summary>\n    \n1. Make sure you've installed the flutter SDK. **You must** use a flutter SDK that's compatible to the installed engine binaries.\n   - for the flutter SDK, use flutter stable and keep it up to date.  \n   - always use the latest available [engine binaries](https://github.com/ardera/flutter-engine-binaries-for-arm)  \n   \n   If you encounter error messages like `Invalid kernel binary format version`, `Invalid SDK hash` or `Invalid engine hash`:\n   1. Make sure your flutter SDK is on `stable` and up to date and your engine binaries are up to date.\n   2. If you made sure that's the case and the error still happens, create a new issue.\n   \n2. Open terminal or commandline and `cd` into your app directory.\n\n3. `flutter build bundle`\n\n4. Deploy the asset bundle to the Raspberry Pi using `rsync` or `scp`.\n   - Using `rsync` (available on linux and macOS or on Windows when using [WSL](https://docs.microsoft.com/de-de/windows/wsl/install-win10))\n       ```bash\n       rsync -a --info=progress2 ./build/flutter_assets/ pi@raspberrypi:/home/pi/my_apps_flutter_assets\n       ```\n   - Using `scp` (available on linux, macOS and Windows)\n       ```bash\n       scp -r ./build/flutter_assets/ pi@raspberrypi:/home/pi/my_apps_flutter_assets\n       ```\n       \n#### Example\n1. We'll build the asset bundle for `flutter_gallery` and deploy it using `rsync` in this example.\n```bash\ngit clone https://github.com/flutter/gallery.git flutter_gallery\ncd flutter_gallery\ngit checkout d77920b4ced4a105ad35659fbe3958800d418fb9\nflutter build bundle\nrsync -a ./build/flutter_assets/ pi@raspberrypi:/home/pi/flutter_gallery/\n```\n3. Done. You can now run this app in debug-mode using `flutter-pi /home/pi/flutter_gallery`.\n\n<details>\n  <summary>More information</summary>\n    \n  - flutter_gallery is developed against flutter master. `d77920b4ced4a105ad35659fbe3958800d418fb9` is currently the latest flutter gallery\n    commit working with flutter stable.\n</details>\n\n### Building the `app.so` (for running your app in Release/Profile mode)\n- This is done entirely on your development machine as well.\n\n1. Find out the path to your flutter SDK. For me it's `C:\\flutter`. (I'm on Windows)\n2. Open terminal or commandline and `cd` into your app directory.\n3. Build the asset bundle.\n   ```\n   flutter build bundle\n   ```\n4. Build the kernel snapshot. (Replace `my_app_name` with the name of your app)\n    ```cmd\n    C:\\flutter\\bin\\cache\\dart-sdk\\bin\\dart.exe ^\n      C:\\flutter\\bin\\cache\\dart-sdk\\bin\\snapshots\\frontend_server.dart.snapshot ^\n      --sdk-root C:\\flutter\\bin\\cache\\artifacts\\engine\\common\\flutter_patched_sdk_product ^\n      --target=flutter ^\n      --aot ^\n      --tfa ^\n      -Ddart.vm.product=true ^\n      --packages .dart_tool\\package_config.json ^\n      --output-dill build\\kernel_snapshot.dill ^\n      --verbose ^\n      --depfile build\\kernel_snapshot.d ^\n      package:my_app_name/main.dart\n    ```\n\n<details>\n  <summary>More information</summary>\n\n  - In versions prior to Flutter 3.3.0 the `--packages` argument should be set to `.packages`. In versions greater than or equal to 3.3.0 the `--packages` argument should be set to `.dart_tool\\package_config.json`.\n</details>\n\n5. Fetch the latest `gen_snapshot_linux_x64_release` I provide in the [engine binaries repo](https://github.com/ardera/flutter-engine-binaries-for-arm).\n6. The following steps must be executed on a linux x64 machine. If you're on windows, you can use [WSL](https://docs.microsoft.com/de-de/windows/wsl/install-win10). If you're on macOS, you can use a linux VM.\n7. Build the `app.so`. If you're building for _arm64_, you need to omit the `--sim-use-hardfp` flag.\n    ```bash\n    gen_snapshot_linux_x64_release \\\n      --deterministic \\\n      --snapshot_kind=app-aot-elf \\\n      --elf=build/flutter_assets/app.so \\\n      --strip \\\n      --sim-use-hardfp \\\n      build/kernel_snapshot.dill\n    ```\n8. Now you can switch to your normal OS again.\n9. Upload the asset bundle and the `app.so` to your Raspberry Pi.\n    ```bash\n    rsync -a --info=progress2 ./build/flutter_assets/ pi@raspberrypi:/home/pi/my_app\n    ```\n    or\n    ```\n    scp -r ./build/flutter_assets/ pi@raspberrypi:/home/pi/my_app\n    ```\n10. You can now launch the app in release mode using `flutter-pi --release /home/pi/my_app`\n\n#### Complete example on Windows\n1. We'll build the asset bundle for `flutter_gallery` and deploy it using `rsync` in this example.\n    ```bash\n    git clone https://github.com/flutter/gallery.git flutter_gallery\n    git clone --depth 1 https://github.com/ardera/flutter-engine-binaries-for-arm.git engine-binaries\n    cd flutter_gallery\n    git checkout d77920b4ced4a105ad35659fbe3958800d418fb9\n    flutter build bundle\n    C:\\flutter\\bin\\cache\\dart-sdk\\bin\\dart.exe ^\n      C:\\flutter\\bin\\cache\\dart-sdk\\bin\\snapshots\\frontend_server.dart.snapshot ^\n      --sdk-root C:\\flutter\\bin\\cache\\artifacts\\engine\\common\\flutter_patched_sdk_product ^\n      --target=flutter ^\n      --aot ^\n      --tfa ^\n      -Ddart.vm.product=true ^\n      --packages .dart_tool\\package_config.json ^\n      --output-dill build\\kernel_snapshot.dill ^\n      --verbose ^\n      --depfile build\\kernel_snapshot.d ^\n      package:gallery/main.dart\n    wsl\n    ../engine-binaries/arm/gen_snapshot_linux_x64_release \\\n      --deterministic \\\n      --snapshot_kind=app-aot-elf \\\n      --elf=build/flutter_assets/app.so \\\n      --strip \\\n      --sim-use-hardfp \\\n      build/kernel_snapshot.dill\n    rsync -a --info=progress2 ./build/flutter_assets/ pi@raspberrypi:/home/pi/flutter_gallery/\n    exit\n    ```\n3. Done. You can now run this app in release mode using `flutter-pi --release /home/pi/flutter_gallery`.\n\n</details>\n\n### Running your App with flutter-pi\n```txt\npi@hpi4:~ $ flutter-pi --help\nflutter-pi - run flutter apps on your Raspberry Pi.\n\nUSAGE:\n  flutter-pi [options] <bundle path> [flutter engine options]\n\nOPTIONS:\n  --release                  Run the app in release mode. The AOT snapshot\n                             of the app must be located inside the bundle directory.\n                             This also requires a libflutter_engine.so that was\n                             built with --runtime-mode=release.\n\n  --profile                  Run the app in profile mode. The AOT snapshot\n                             of the app must be located inside the bundle directory.\n                             This also requires a libflutter_engine.so that was\n                             built with --runtime-mode=profile.\n\n  --vulkan                   Use vulkan for rendering.\n\n  -o, --orientation <orientation>  Start the app in this orientation. Valid\n                             for <orientation> are: portrait_up, landscape_left,\n                             portrait_down, landscape_right.\n                             For more information about this orientation, see\n                             the flutter docs for the \"DeviceOrientation\"\n                             enum.\n                             Only one of the --orientation and --rotation\n                             options can be specified.\n\n  -r, --rotation <degrees>   Start the app with this rotation. This is just an\n                             alternative, more intuitive way to specify the\n                             startup orientation. The angle is in degrees and\n                             clock-wise.\n                             Valid values are 0, 90, 180 and 270.\n\n  -d, --dimensions \"width_mm,height_mm\" The width & height of your display in\n                             millimeters. Useful if your GPU doesn't provide\n                             valid physical dimensions for your display.\n                             The physical dimensions of your display are used\n                             to calculate the flutter device-pixel-ratio, which\n                             in turn basically \"scales\" the UI.\n\n  --pixelformat <format>     Selects the pixel format to use for the framebuffers.\n                             If this is not specified, a good pixel format will\n                             be selected automatically.\n                             Available pixel formats: RGB565, ARGB4444, XRGB4444, ARGB1555, XRGB1555, ARGB8888, XRGB8888, BGRA8888, BGRX8888, RGBA8888, RGBX8888, \n  --videomode widthxheight\n  --videomode widthxheight@hz  Uses an output videomode that satisfies the argument.\n                             If no hz value is given, the highest possible refreshrate\n                             will be used.\n\n  --dummy-display            Simulate a display. Useful for running apps\n                             without a display attached.\n  --dummy-display-size \"width,height\" The width & height of the dummy display\n                             in pixels.\n\n  -h, --help                 Show this help and exit.\n\nEXAMPLES:\n  flutter-pi ~/hello_world_app\n  flutter-pi --release ~/hello_world_app\n  flutter-pi -o portrait_up ./my_app\n  flutter-pi -r 90 ./my_app\n  flutter-pi -d \"155, 86\" ./my_app\n  flutter-pi --videomode 1920x1080 ./my_app\n  flutter-pi --videomode 1280x720@60 ./my_app\n\nSEE ALSO:\n  Author:  Hannes Winkler, a.k.a ardera\n  Source:  https://github.com/ardera/flutter-pi\n  License: MIT\n\n  For instructions on how to build an asset bundle or an AOT snapshot\n    of your app, please see the linked github repository.\n  For a list of options you can pass to the flutter engine, look here:\n    https://github.com/flutter/engine/blob/main/shell/common/switches.h\n```\n\n`<asset bundle path>` is the path of the flutter asset bundle directory (i.e. the directory containing `kernel_blob.bin`)\nof the flutter app you're trying to run.\n\n`[flutter engine options...]` will be passed as commandline arguments to the flutter engine. You can find a list of commandline options for the flutter engine [Here](https://github.com/flutter/engine/blob/master/shell/common/switches.h).\n\n### gstreamer video player\nGstreamer video player is a newer video player based on gstreamer.\n\nTo use the gstreamer video player, just rebuild flutter-pi (delete your build folder and reconfigure) and make sure the necessary gstreamer packages are installed. (See [dependencies](#dependencies))\n\nAnd then, just use the stuff in the official [video_player](https://pub.dev/packages/video_player) package. (`VideoPlayer`, `VideoPlayerController`, etc, there's nothing specific you need to do on the dart-side)\n\n### audioplayers\nAs of current moment flutter-pi implements plugin for `audioplayers: ^5.0.0`.\nThere are several things you need to keep in mind:\n- As flutter-pi is intended for use on constrained systems like raspberry pi, you should avoid creating multiple temporary instances and instead prefer to use one global instance of `AudioPlayer`. There is limit you can easily hit if you're going to spam multiple instances of `AudioPlayer`\n- Plugin was tested to work with ALSA and `pulseaudio` might prevent the plugin from playing audio correctly:\n    - Hence please make sure you delete `pulseaudio` package from your system.\n    - Make sure you have `gstreamer1.0-alsa` package installed in addition to packages needed for gstreamer video player.\n    - Make sure you can list audio devices using command: `aplay -L`\n        - If there is error, please investigate why and fix it before using audio\n        - One of the common reasons is outdated ALSA config in which case you should delete existing config and replace it with up to date one\n- Finally, if you want to verify your audio setup is good, you can use `gst-launch` command to invoke `playbin` on audio file directly.\n\n## 📊 Performance\n### Graphics Performance\nGraphics performance is actually pretty good. With most of the apps inside the `flutter SDK -> examples -> catalog` directory I get smooth 50-60fps on the Pi 4 2GB and Pi 3 A+.\n\n### Touchscreen Latency\nDue to the way the touchscreen driver works in raspbian, there's some delta between an actual touch of the touchscreen and a touch event arriving at userspace. The touchscreen driver in the raspbian kernel actually just repeatedly polls some buffer shared with the firmware running on the VideoCore, and the videocore repeatedly polls the touchscreen. (both at 60Hz) So on average, there's a delay of 17ms (minimum 0ms, maximum 34ms). Actually, the firmware is polling correctly at ~60Hz, but the linux driver is not because there's a bug. The linux side actually polls at 25Hz, which makes touch applications look terrible. (When you drag something in a touch application, but the application only gets new touch data at 25Hz, it'll look like the application itself is _redrawing_ at 25Hz, making it look very laggy) The github issue for this raspberry pi kernel bug is [here](https://github.com/raspberrypi/linux/issues/3777). Leave a like on the issue if you'd like to see this fixed in the kernel.\n\nThis is why I created my own (userspace) touchscreen driver, for improved latency & polling rate. See [this repo](https://github.com/ardera/raspberrypi-fast-ts) for details. The driver is very easy to use and the difference is noticeable, flutter apps look and feel a lot better with this driver.\n\n## 📦 Useful Dart Packages\n\n| Package | Category    | Author | Description |\n| - | - | - | - |\n| flutterpi_tool ([package](https://pub.dev/packages/flutterpi_tool/)) ([repo](https://github.com/ardera/flutterpi_tool)) | 🔧 tooling | Hannes Winkler (me) | Tool to make developing & distributing apps for flutter-pi easier. |\n| flutter_gpiod ([package](https://pub.dev/packages/flutter_gpiod/)) ([repo](https://github.com/ardera/flutter_packages/tree/main/packages/flutter_gpiod)) | 🖨 peripherals | Hannes Winkler | GPIO control support for dart/flutter, uses kernel interfaces directly for more performance. |\n| linux_serial ([package](https://pub.dev/packages/linux_serial/)) ([repo](https://github.com/ardera/flutter_packages/tree/main/packages/linux_serial)) | 🖨 peripherals | Hannes Winkler | Serial Port support for dart/flutter, uses kernel interfaces directly for more performance. |\n| linux_spidev ([package](https://pub.dev/packages/linux_spidev/)) ([repo](https://github.com/ardera/flutter_packages/tree/main/packages/linux_spidev)) | 🖨 peripherals | Hannes Winkler | SPI bus support for dart/flutter, uses kernel interfaces directly for more performance. |\n| dart_periphery ([package](https://pub.dev/packages/dart_periphery)) ([repo](https://github.com/pezi/dart_periphery)) | 🖨 peripherals | [Peter Sauer](https://github.com/pezi/) | All-in-one package GPIO, I2C, SPI, Serial, PWM, Led, MMIO support using c-periphery. |\n| flutterpi_gstreamer_video_player ([package](https://pub.dev/packages/flutterpi_gstreamer_video_player)) ([repo](https://github.com/ardera/flutter_packages/tree/main/packages/flutterpi_gstreamer_video_player)) | ⏯️ multimedia | Hannes Winkler | Official video player implementation for flutter-pi. See [GStreamer video player](#gstreamer-video-player) section above. |\n| charset_converter ([package](https://pub.dev/packages/charset_converter)) ([repo](https://github.com/pr0gramista/charset_converter)) | 🗚 encoding | Bartosz Wiśniewski | Encode and decode charsets using platform built-in converter. |\n| sentry_flutter ([package](https://pub.dev/packages/sentry_flutter)) ([repo](https://github.com/getsentry/sentry-dart))|  📊 Monitoring | sentry.io | See https://github.com/ardera/flutter-pi/wiki/Sentry-Support for instructions. |\n\n## 💬 Discord\nThere a `#custom-embedders` channel on the [flutter discord](https://github.com/flutter/flutter/wiki/Chat) which you can use if you have any questions regarding flutter-pi or generally, anything related to embedding the engine for which you don't want to open issue about or write an email.\n"
        },
        {
          "name": "config.h.in",
          "type": "blob",
          "size": 0.97265625,
          "content": "#ifndef _FLUTTERPI_CONFIG_H\n#define _FLUTTERPI_CONFIG_H\n\n#define LIBINPUT_VERSION_MAJOR @LIBINPUT_VERSION_MAJOR@\n#define LIBINPUT_VERSION_MINOR @LIBINPUT_VERSION_MINOR@\n#define LIBINPUT_VERSION_PATCH @LIBINPUT_VERSION_PATCH@\n#cmakedefine HAVE_KMS\n#cmakedefine HAVE_GBM\n#cmakedefine HAVE_FBDEV\n#cmakedefine HAVE_EGL\n#cmakedefine HAVE_GLES2\n#cmakedefine HAVE_EGL_GLES2\n#cmakedefine LINT_EGL_HEADERS\n#cmakedefine HAVE_VULKAN\n#cmakedefine FILESYSTEM_LAYOUT_DEFAULT\n#cmakedefine FILESYSTEM_LAYOUT_METAFLUTTER\n#cmakedefine HAVE_LIBSEAT\n#cmakedefine DEBUG_DRM_PLANE_ALLOCATIONS\n#cmakedefine USE_LEGACY_KMS\n#cmakedefine BUILD_TEXT_INPUT_PLUGIN\n#cmakedefine BUILD_RAW_KEYBOARD_PLUGIN\n#define LIBGSTREAMER_VERSION_MAJOR @LIBGSTREAMER_VERSION_MAJOR@\n#define LIBGSTREAMER_VERSION_MINOR @LIBGSTREAMER_VERSION_MINOR@\n#define LIBGSTREAMER_VERSION_PATCH @LIBGSTREAMER_VERSION_PATCH@\n#cmakedefine VULKAN_DEBUG\n#cmakedefine ENABLE_MTRACE\n#cmakedefine ENABLE_ASAN\n#cmakedefine HAVE_BUNDLED_CRASHPAD_HANDLER\n\n#endif\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}