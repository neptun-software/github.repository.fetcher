{
  "metadata": {
    "timestamp": 1736709893852,
    "page": 389,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "IoLanguage/io",
      "stars": 2681,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.076171875,
          "content": "BasedOnStyle: LLVM\nIndentWidth: 4\nIncludeBlocks: Preserve\nSortIncludes: false\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.09375,
          "content": "projects/*/*.xcodeproj/* -diff -merge\n*.pbxproj -crlf -diff -merge\n*.pbxuser -crlf -diff -merge\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.3447265625,
          "content": "*.lib\n*.dll\n*.manifest\n*.obj\n*.exp\n*.ilk\n._*\n*.pdb\n*.hi\n*.o\n*.so\n*.dylib\n*.cmd\n.mod.c*\n*.tmp_versions\n*CVS\n*RCS\n*IoVMCode.c*\n*Io*Init.c*\n~*\n*_darcs\n*_build\n*_ioCodeProcessed\n*errors\n*.bak*\n*.BAK*\n*.orig*\n*vssver.scc*\n*.swp*\n*MT\n*\\{arch\\}\n*.arch-ids\n*,\n*.class*\n*.prof*\n*.DS_Store*\n*.FBCLockFolder\n*BitKeeper\n*ChangeSet\n*.svn\n.cvsignore*\n.gdb_history*\n*Thumbs.db*\n.DS_Store\n.libs\n.deps*\n*.la\n*.lo\n*.so\n*.dylib\n*.exe\n*.Po\n*.Tlo\n*.Plo\n_objs\n_includes\n*_libs\n*Io.*Code.c*\nio2c\n*Io.*Init.c*\n*pngtest*\n*steve.model*\n*skipdbtest*\n*config.log*\n*config.status*\n.rej*\n*autom4te.cache*\n*.cache\n*.user\n*_include\n*tags*\n./addons/SGML/source/libsgml/Makefile*\n./addons/SGML/source/libsgml/examples/Makefile*\n./addons/SGML/source/libsgml/src/Makefile*\ntools/editlib_test/editlib_test\nextras/IoPlayers/MSWindows/ioplayer/ioplayer.ncb\nextras/IoPlayers/MSWindows/ioplayer/ioplayer.suo\nextras/IoPlayers/MSWindows/ioplayer/ioplayer/Debug\nextras/IoPlayers/MSWindows/ioplayer/ioplayer/Release\nextras/IoPlayers/MSWindows/ioplayer/ioplayer/ioplayer.vcproj.CUSTOMER2007.Customer.user\nextras/IoPlayers/MSWindows/ioplayer/pingme.txt\nextras/IoPlayers/MSWindows/ioplayer/smysrv\nlibs/iovm/docs/docs.txt\naddons/*/docs/docs.txt\n*.mode1\n*.pbxuser\n*.mode1v3\nextras/osxvm/build\nextras/osxmain/build\n*~\nCMakeFiles\nCMakeCache.txt\ncmake_install.cmake\ninstall_manifest.txt\nMakefile\nIoInstallPrefix.h\nxcuserdata\nbuild"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1669921875,
          "content": "[submodule \"deps/parson\"]\n\tpath = deps/parson\n\turl = https://github.com/kgabis/parson.git\n[submodule \"eerie\"]\n\tpath = eerie\n\turl = https://github.com/IoLanguage/eerie.git\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.55859375,
          "content": "dist: trusty\nsudo: required\n\nlanguage: c\n\nos:\n  - linux\n  - osx\n\ncompiler:\n  - gcc\n  - clang\n\ninstall:\n - 'if [ \"${TRAVIS_OS_NAME}\" == \"linux\" ]; then\n        sudo apt-get install libyajl-dev;\n        sudo apt-get install libev-libevent-dev;\n        sudo apt-get install libpcre3-dev;\n    fi'\n - 'if [ \"${TRAVIS_OS_NAME}\" == \"osx\" ]; then\n        brew install yajl;\n        brew install libevent;\n        brew install pcre;\n    fi'\n\n\nbefore_script:\n  - mkdir build\n  - cd build\n\nscript:\n  - cmake ..\n  - make\n  - ./_build/binaries/io ../libs/iovm/tests/correctness/run.io\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 8.552734375,
          "content": "# Base Io build system\n# Written by Jeremy Tregunna <jeremy.tregunna@me.com>\n#\n# This file is the top level CMakeLists.txt and all the items defined in this\n# file are inherited by CMakeLists.txt throughout the rest of the system, if\n# they can be traced back through subdirectories to this file.\n#\n# This is an experimental build system, and it should be treated as such. It\n# is being developed on a Mac OS X system, and tested as well on a FreeBSD\n# system. I have no access to other platforms to test there. If this notice\n# goes away, then it can be said that this system works on at least three\n# major platforms:\n#   1. Mac OS X\n#   2. Linux\n#   3. Windows\n#\n# If you find a bug for a particular platform, please feel free to fix it, or\n# contact the iolanguage mailing list, file a bug report, or contact Jeremy\n# Tregunna directly, at the e-mail address above. Please follow that order.\n\n# Require CMake 2.8. I know for sure that this will not work with CMake 2.6\n# due to the use of the FILE command we use when creating the bundle\n# hierarchy.\ncmake_minimum_required(VERSION 2.8.12)\n\n# Mac OS X: Setting policy CMP0042 to the new behavior generates dylibs with\n# RPATH-relative install name that is better suited for Mac OS X applications\n# embedding Io in their bundle.\nif(POLICY CMP0042)\n\tcmake_policy(SET CMP0042 NEW)\nendif()\n\t\n# Project name, this gets prefixed to a bunch of stuff under the hood. No\n# spaces, or anything silly like that please.\nproject(IoLanguage C)\n\n# Default config when building with gcc variants\nIF(CMAKE_COMPILER_IS_GNUCC OR (CMAKE_C_COMPILER_ID MATCHES \"Clang\"))\n\tSET(CMAKE_BUILD_TYPE_DebugFast)\n\tSET(CMAKE_CXX_FLAGS_DEBUGFAST \"-g -O0\")\n\tSET(CMAKE_C_FLAGS_DEBUGFAST \"-g -O0\")\n\tSET(CMAKE_C_FLAGS \"-msse2\")\n\tif(NOT CMAKE_BUILD_TYPE)\n\t        SET(CMAKE_BUILD_TYPE \"DebugFast\")\n\tendif(NOT CMAKE_BUILD_TYPE)\nENDIF(CMAKE_COMPILER_IS_GNUCC OR (CMAKE_C_COMPILER_ID MATCHES \"Clang\"))\n\nMESSAGE(STATUS \"Configuration set to: ${CMAKE_BUILD_TYPE}\")\n\n# Don't want a coloured Makefile. On some platforms, the blue that is used is\n# so dark it's illegible.\nset(CMAKE_COLOR_MAKEFILE off)\n\n# We want our binaries to go here\nset(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/_build/binaries)\n\n# Macro to create the _build directory hierarchy.\n# Note: I'm not sure we need lib/ or objs/ in there. But I'll leave them in\n# anyway, I'm just not going to do anything with them unless it breaks doing\n# nothing breaks something.\nmacro(make_build_bundle NAME)\n\tfile(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/${NAME}/binaries ${CMAKE_CURRENT_BINARY_DIR}/${NAME}/objs ${CMAKE_CURRENT_BINARY_DIR}/${NAME}/headers ${CMAKE_CURRENT_BINARY_DIR}/${NAME}/lib ${CMAKE_CURRENT_BINARY_DIR}/${NAME}/dll)\nendmacro(make_build_bundle)\n\n# Generic macro to copy files mattching GLOBPAT in the current source\n# directory into another directory.\nmacro(copy_files NAME GLOBPAT DSTDIR)\n\t# Get a list of the filenames mattching the pattern GLOBPAT\n\tfile(GLOB ${NAME} ${GLOBPAT})\n\n\t# Create a custom copy target and display a message\n\tadd_custom_target(copy_${NAME} ALL COMMENT \"Copying files: ${CMAKE_CURRENT_SOURCE_DIR}/${GLOBPAT} to ${DSTDIR}\")\n\n\tforeach(FILENAME ${${NAME}})\n\t\t# Finally, copy the files.\n\t\tadd_custom_command(\n\t\t\tTARGET copy_${NAME}\n\t\t\tCOMMAND ${CMAKE_COMMAND} -E copy ${FILENAME} ${DSTDIR}\n\t\t)\n\tendforeach(FILENAME)\nendmacro(copy_files)\n\n# Binary suffix is used to append things like .exe to binary names, for\n# windows support.\nif(${CMAKE_SYSTEM_NAME} MATCHES \"Windows\")\n\tset(BINARY_SUFFIX \".exe\")\n\tset(CMAKE_STATIC_LIBRARY_PREFIX \"lib\")\n\tset(CMAKE_SHARED_LIBRARY_PREFIX \"lib\")\n\tset(CMAKE_IMPORT_LIBRARY_PREFIX \"lib\")\nelse()\n\tset(BINARY_SUFFIX \"\")\nendif(${CMAKE_SYSTEM_NAME} MATCHES \"Windows\")\n\n# Definitions on where we can find headers and whatnot. Convenience definitions.\nset(COROUTINE_SOURCE_DIR ${PROJECT_SOURCE_DIR}/libs/coroutine/source)\nset(BASEKIT_SOURCE_DIR ${PROJECT_SOURCE_DIR}/libs/basekit/source)\nset(GARBAGECOLLECTOR_SOURCE_DIR ${PROJECT_SOURCE_DIR}/libs/garbagecollector/source)\nset(IOVM_SOURCE_DIR ${PROJECT_SOURCE_DIR}/libs/iovm/source)\n\n# Subdirectories. These directories should have their own CMakeLists.txt.\nadd_subdirectory(libs)\nadd_subdirectory(tools)\n\n# Ensure the _build hierarchy is created top-level, this is where our\n# binaries go.\nmake_build_bundle(_build)\n\n# Next we NEED to copy all the libs headers into one single dir in the bundle.\ncopy_files(coroutine_headers ${PROJECT_SOURCE_DIR}/libs/coroutine/source/*.h ${CMAKE_CURRENT_BINARY_DIR}/_build/headers)\ncopy_files(basekit_headers ${PROJECT_SOURCE_DIR}/libs/basekit/source/*.h ${CMAKE_CURRENT_BINARY_DIR}/_build/headers)\ncopy_files(garbagecollector_headers ${PROJECT_SOURCE_DIR}/libs/garbagecollector/source/*.h ${CMAKE_CURRENT_BINARY_DIR}/_build/headers)\ncopy_files(iovm_headers ${PROJECT_SOURCE_DIR}/libs/iovm/source/*.h ${CMAKE_CURRENT_BINARY_DIR}/_build/headers)\n\n# Packaging stuff\n\n#Modified from: http://www.mail-archive.com/cmake@cmake.org/msg32916.html\nMACRO (TODAY RESULT)\n    IF (WIN32)\n        EXECUTE_PROCESS(COMMAND \"cmd\" \" /C date /T\" OUTPUT_VARIABLE ${RESULT})\n        string(REGEX REPLACE \"(..)/(..)/(....).*\" \"\\\\1.\\\\2.\\\\3\" ${RESULT} \n${${RESULT}})\n    ELSEIF(UNIX)\n        EXECUTE_PROCESS(COMMAND \"date\" \"+%d/%m/%Y\" OUTPUT_VARIABLE ${RESULT})\n        string(REGEX REPLACE \"(..)/(..)/(....).*\" \"\\\\1.\\\\2.\\\\3\" ${RESULT} \n${${RESULT}})\n    ELSE (WIN32)\n        MESSAGE(SEND_ERROR \"date not implemented\")\n        SET(${RESULT} 00.00.0000)\n    ENDIF (WIN32)\nENDMACRO (TODAY)\n\nTODAY(CMD_DATE)\nSTRING(SUBSTRING ${CMD_DATE} 0 2 CMD_DATE_DAY)\nSTRING(SUBSTRING ${CMD_DATE} 3 2 CMD_DATE_MON)\nSTRING(SUBSTRING ${CMD_DATE} 6 4 CMD_DATE_YEAR)\nSET(CMD_DATE \"${CMD_DATE_YEAR}.${CMD_DATE_MON}.${CMD_DATE_DAY}\")\n\n# If source tree is not a git repository this will not work\n#IF(WIN32 AND NOT CYGWIN)\n#\texecute_process(COMMAND \"cmd\" \" /C git rev-parse --short HEAD\" OUTPUT_VARIABLE IO_GIT_REV)\n#ELSE(WIN32 AND NOT CYGWIN)\n#\texecute_process(COMMAND git rev-parse --short HEAD OUTPUT_VARIABLE IO_GIT_REV)\n#ENDIF(WIN32 AND NOT CYGWIN)\n#string(REGEX REPLACE \"(.......).\" \"\\\\1\" IO_GIT_REV ${IO_GIT_REV})\n\nSET(CPACK_PACKAGE_NAME ${PROJECT_NAME})\nSET(CPACK_PACKAGE_VENDOR \"iolanguage.com\")\nSET(CPACK_PACKAGE_CONTACT \"iolanguage@yahoogroups.com\")\nSET(CPACK_RESOURCE_FILE_LICENSE ${PROJECT_SOURCE_DIR}/LICENSE.txt)\nSET(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"Io Language\")\nSET(CPACK_PACKAGE_VERSION \"${CMD_DATE}\")\nSET(CPACK_PACKAGE_VERSION_MAJOR ${CMD_DATE_YEAR})\nSET(CPACK_PACKAGE_VERSION_MINOR ${CMD_DATE_MON})\nSET(CPACK_PACKAGE_VERSION_PATCH ${CMD_DATE_DAY})\nSET(CPACK_PACKAGE_INSTALL_DIRECTORY ${CPACK_PACKAGE_NAME})\n\nIF(WIN32)\n\t# It's not very clear whether redist files for MSVC build are in the path bellow...\n\t# The semi-hardcoded path bellow is for Visual Studio 2008 Express.\n\t# Anyway, we have to distinguish between Debug and Release redist files as well.\n\tIF(MSVC)\n\t\tSTRING(REGEX REPLACE \"\\\\\\\\\" \"\\\\\\\\\\\\\\\\\" VC_INSTALL_PATH \"$ENV{VCINSTALLDIR}\")\n\t\tSET(VC_RUNTIME_REDIST_FILES \"File '${VC_INSTALL_PATH}\\\\\\\\redist\\\\\\\\Debug_NonRedist\\\\\\\\x86\\\\\\\\Microsoft.VC90.DebugCRT\\\\\\\\*.*'\")\n\tENDIF(MSVC)\n\t\n\tSET(CPACK_SET_DESTDIR \"OFF\")\n\tSET(CPACK_NSIS_URL_INFO_ABOUT \"http://www.iolanguage.com\")\n\tSET(CPACK_NSIS_HELP_LINK \"http://www.iolanguage.com\")\n\tSET(CPACK_NSIS_MODIFY_PATH \"ON\")\n\tSET(CPACK_NSIS_EXTRA_INSTALL_COMMANDS \"\n\t\tWriteIniStr '\\$INSTDIR\\\\\\\\IoLanguageWebSite.url' 'InternetShortcut' 'URL' '${CPACK_NSIS_URL_INFO_ABOUT}'\n\t\tSetOutPath '\\$INSTDIR\\\\\\\\lib'\n\t\tSetOverwrite try\n\t\t${VC_RUNTIME_REDIST_FILES}\n\t\")\n\tSET(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS \"\n\t\tDelete '\\$INSTDIR\\\\\\\\IoLanguageWebSite.url'\n\t\tDelete '\\$INSTDIR\\\\\\\\lib\\\\\\\\*.*'\n\t\")\n\n\tSET(CPACK_NSIS_CREATE_ICONS \"\n\t\tCreateShortCut '\\$SMPROGRAMS\\\\\\\\$STARTMENU_FOLDER\\\\\\\\Io CLI.lnk' '$INSTDIR\\\\\\\\bin\\\\\\\\io.exe'\n\t\tCreateShortCut '\\$SMPROGRAMS\\\\\\\\$STARTMENU_FOLDER\\\\\\\\IoLanguage Web Site.lnk' '\\$INSTDIR\\\\\\\\IoLanguageWebSite.url'\n\t\")\n\tSET(CPACK_NSIS_CREATE_ICONS_EXTRA \"CreateShortCut '\\$DESKTOP\\\\\\\\Io CLI.lnk' '$INSTDIR\\\\\\\\bin\\\\\\\\io.exe'\")\n\tSET(CPACK_NSIS_DELETE_ICONS \"\n\t\tDelete '\\$SMPROGRAMS\\\\\\\\$MUI_TEMP\\\\\\\\Io CLI.lnk'\n\t\tDelete '\\$SMPROGRAMS\\\\\\\\$MUI_TEMP\\\\\\\\IoLanguage Web Site.lnk'\n\t\")\n\tSET(CPACK_NSIS_DELETE_ICONS_EXTRA \"Delete '\\$DESKTOP\\\\\\\\Io CLI.lnk'\")\nENDIF(WIN32)\n\nIF(${CMAKE_SYSTEM_NAME} MATCHES \"Linux\")\n\tSET(CPACK_SET_DESTDIR \"ON\")\n\n\tFIND_PROGRAM(DPKG_CMD dpkg)\n\tIF(DPKG_CMD)\n\t\tSET(CPACK_GENERATOR ${CPACK_GENERATOR} DEB)\n\tELSE(DPKG_CMD)\n\t\tMESSAGE( STATUS \"dpkg binary not found, not building debian package\" )\n\tENDIF(DPKG_CMD)\n\n\tFIND_PROGRAM(RPMBUILD_CMD rpmbuild)\n\tIF(RPMBUILD_CMD)\n\t\tSET( CPACK_GENERATOR ${CPACK_GENERATOR} RPM )\n\tELSE(RPMBUILD_CMD)\n\t\tMESSAGE( STATUS \"rpmbuild binary not found, not building rpm package\" )\n\tENDIF(RPMBUILD_CMD)\nENDIF(${CMAKE_SYSTEM_NAME} MATCHES \"Linux\")\n\ninclude(CPack)\n\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.4912109375,
          "content": "(This is the 3-clause BSD License)\n\nCopyright (c) 2002, 2003 Steve Dekorte\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.2568359375,
          "content": "# The Io Language\n\n_Note: This document is intended to be used as a reference for setting up and configuring Io. For a guide on how to use the language itself, please visit the website at <http://iolanguage.org/guide/guide.html>._\n\n# Table of Contents\n\n* [Table of Contents](#table-of-contents)\n* [What is Io?](#what-is-io)\n\t* [Example Code](#example-code)\n\t* [Quick Links](#quick-links)\n* [Installing](#installing)\n\t* [From a Package Manager](#from-a-package-manager)\n\t* [From Source](#from-source)\n\t\t* [Linux Build Instructions](#linux-build-instructions)\n\t\t* [macOS Build Instructions](#macOS-build-instructions)\n\t\t* [Windows Build Instructions](#windows-build-instructions)\n\t\t\t* [Building with MinGW-W64](#building-with-mingw-w64)\n\t\t\t* [Building with MinGW](#building-with-mingw-recommended)\n\t\t\t* [Building with MSVC](#building-with-msvc)\n\t\t\t* [Building with Cygwin](#building-with-cygwin)\n* [Running Tests](#running-tests)\n* [Installing Addons](#installing-addons)\n\nWhat is Io?\n=====\n\nIo is a dynamic prototype-based programming language in the same realm as\nSmalltalk and Self. It revolves around the idea of message passing from object\nto object.\n\nFor further information, the programming guide and reference manual can be found\nin the docs folder.\n\n\nExample Code\n---\nBasic Math\n\n```Io\nIo> 1 + 1\n==> 2\n\nIo> 2 sqrt\n==> 1.4142135623730951\n```\n\nLists\n\n```Io\nIo> d := List clone append(30, 10, 5, 20)\n==> list(30, 10, 5, 20)\n\nIo> d := d sort\n==> list(5, 10, 20, 30)\n\nIo> d select (>10)\n==> list(20, 30)\n```\n\nObjects\n\n```Io\nIo> Contact := Object clone\n==>  Contact_0x7fbc3bc8a6d0:\n  type = \"Contact\"\n\nIo> Contact name ::= nil\n==> nil\n\nIo> Contact address ::= nil\n==> nil\n\nIo> Contact city ::= nil\n==> nil\n\nIo> holmes := Contact clone setName(\"Holmes\") setAddress(\"221B Baker St\") setCity(\"London\")\n==>  Contact_0x7fbc3be2b470:\n  address          = \"221B Baker St\"\n  city             = \"London\"\n  name             = \"Holmes\"\n\nIo> Contact fullAddress := method(list(name, address, city) join(\"\\n\"))\n==> method(\n    list(name, address, city) join(\"\\n\")\n)\n\nIo> holmes fullAddress\n==> Holmes\n221B Baker St\nLondon\n```\n\n\n\n\nQuick Links\n---\n* The Wikipedia page for Io has a good overview and shows a few interesting\n  examples of the language:\n  <https://en.wikipedia.org/wiki/Io_(programming_language)>.\n* The entry on the c2 wiki has good discussion about the merits of the language:\n  <http://wiki.c2.com/?IoLanguage>.\n\n\nInstalling\n==========\n\nFrom a Package Manager\n---\n\nIo is currently only packaged for OS X. To install it, open a terminal and type:\n\n```\nbrew install io\n```\n\nNote that this package may not be as updated as the version from the source\nrepository.\n\nTo install via Homebrew on an M1 Mac, first install Homebrew under x86_64, into /usr/local:\n\n```\narch -x86_64 /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n```\n\nThen install io with this installation of Homebrew:\n\n```\narch -x86_64 /usr/local/Homebrew/bin/brew install io\n```\n\nFollowing that, you can run io under Rosetta 2 with:\n\n```\narch -x86_64 io\n```\n\nFrom Source\n---\n\nFirst, make sure that this repo and all of its submodules have been cloned to\nyour computer by running `git clone` with the `--recursive` flag:\n\n```\ngit clone --recursive https://github.com/IoLanguage/io.git\n```\n\nIo uses the [CMake build system](https://cmake.org/) and supports all of the\nnormal flags and features provided by CMake. \n\nIn a production environment, pass the flag `-DCMAKE_BUILD_TYPE=release` to the\n`cmake` command to ensure that the C compiler does the proper optimizations.\nWithout this flag, Io is built in debug mode without standard C optimizations.\n\nTo install to a specific folder, pass the flag\n`-DCMAKE_INSTALL_PREFIX=/path/to/your/folder/` to the `cmake` command.\n\n### Linux Build Instructions\n\nTo prepare the project for building, run the following commands:\n\n```\ncd io/           # To get into the cloned folder\nmkdir build      # To contain the CMake data\ncd build/\ncmake ..         # This populates the build folder with a Makefile and all of the related things necessary to begin building\n```\n\nIn a production environment, pass the flag `-DCMAKE_BUILD_TYPE=release` to the\n`cmake` command to ensure that the C compiler does the proper optimizations.\nWithout this flag, Io is built in debug mode without standard C optimizations.\n\nTo install to a different folder than `/usr/local/bin/`, pass the flag\n`-DCMAKE_INSTALL_PREFIX=/path/to/your/folder/` to the `cmake` command.\n\nTo build without Eerie, the Io package manager, pass the flag\n`-DWITHOUT_EERIE=1` to the `cmake` command.\n\nOnce CMake has finished preparing the build environment, ensure you are inside\nthe build folder, and run:\n\n```\nmake\nsudo make install\n```\n\nFinally, install [Eerie](https://github.com/IoLanguage/eerie), the Io package\nmanager (see Eerie [repo](https://github.com/IoLanguage/eerie) for installation\noptions):\n\n```\nexport PATH=$PATH:_build/binaries/; . ./install_unix.sh\n```\n\nIo can then be run with the `io` command and Eerie can be run with the `eerie`\ncommand.\n\n\n### macOS Build Instructions\n\nSee the [Linux build instructions](#linux-build-instructions).\n\nNote: Building Io for arm64-based macOS machines is unsupported. To build and run\non an M1 or newer, build Io for x86_64 by adding\n`-DCMAKE_OSX_ARCHITECTURES=\"x86_64\"` to your CMake invocation.\n\n### Windows Build Instructions\n\nYou need CMake or CMake Cygwin (at least v2.8), depending on the building method\nyou choose.\n\nFor the `make install` command, if you are on Windows 7/Vista you will need to\nrun your command prompts as Administrator: right-click on the command prompt\nlauncher->\"Run as administrator\" or something similar.\n\nYou will also need to add `<install_drive>:\\<install_directory>\\bin` and\n`<install_drive>:\\<install_directory>\\lib` to your `PATH` environment variable.\n\n\n#### Building with MinGW-W64 (Recommended)\n\nWe use this method in our CI, so this should be considered an official/supported\nmethod of building on Windows.\n\n1. `cd` to your Io root folder\n2. We want to do an out-of-source build, so: `mkdir buildroot` and `cd buildroot`\n3. a) `cmake -G\"MinGW Makefiles\" ..`\n\n\tor\n\n\tb) `cmake -G\"MinGW Makefiles\" -DCMAKE_INSTALL_PREFIX=<install_drive>:/<install_directory> ..` (eg: `cmake -G\"MinGW Makefiles\" -DCMAKE_INSTALL_PREFIX=C:/Io ..`)\n4. `mingw32-make`\n5. `mingw32-make install` (if you use cmd.exe, you should run it as\n   Administrator)\n6. Install [Eerie](https://github.com/IoLanguage/eerie), the Io package manager\n   (see Eerie [repo](https://github.com/IoLanguage/eerie) for installation\n   options): `_build\\binaries\\io_static setup.io`.\n\n\n#### Building with MinGW\n\nFor automatic MinGW install:\n<http://sourceforge.net/projects/mingw/files/Automated%20MinGW%20Installer>\n\nFor non-automatic MinGW install and detailed instructions refer to:\n<http://www.mingw.org/wiki/InstallationHOWTOforMinGW>\n\n1. `cd` to your Io root folder\n2. We want to do an out-of-source build, so: `mkdir buildroot` and `cd buildroot`\n3. a) `cmake -G\"MSYS Makefiles\" ..`\n\n\tor\n\n\tb) `cmake -G\"MSYS Makefiles\" -DCMAKE_INSTALL_PREFIX=<install_drive>:/<install_directory> ..` (eg: `cmake -G\"MSYS Makefiles\" -DCMAKE_INSTALL_PREFIX=C:/Io ..`)\n4. `make`\n5. `make install`\n6. Install [Eerie](https://github.com/IoLanguage/eerie), the Io package manager\n   (see Eerie [repo](https://github.com/IoLanguage/eerie) for installation\n   options): `./_build/binaries/io_static setup.io`.\n   \n   \n#### Building with MSVC\n\n1. Install Microsoft Visual C++ 2008 Express (should work with other versions).\n2. Install Microsoft Windows SDK 7.0 (or newer).\n3. Install CMake (v2.8 at least)\n4. Run \"Visual Studio 2008 Command Prompt\" from the \"Microsoft Visual Studio\n   2008\" start menu.\n5. `cd` to `<install_drive>:\\Microsoft SDKs\\Windows\\v7.0\\Setup` then run:\n   `WindowsSdkVer.exe -version:v7.0`\n6. Close the command prompt window and run step 4 again\n7. Ensure CMake bin path is in the `PATH` environment variable (eg: `echo\n   %PATH%` and see that the folder is there) if not you will have to add it to\n   your `PATH`.\n8. `cd` to your Io root folder\n9. We want to do an out-of-source build, so: `mkdir buildroot` and `cd buildroot`\n10. a) `cmake ..`\n\n\tor\n\n\tb) `cmake -DCMAKE_INSTALL_PREFIX=<install_drive>:\\<install_directory> ..` (eg: `cmake -DCMAKE_INSTALL_PREFIX=C:\\Io ..`)\n11. `nmake`\n12. `nmake install`\n13. Install [Eerie](https://github.com/IoLanguage/eerie), the Io package manager\n    (see Eerie [repo](https://github.com/IoLanguage/eerie) for installation\n    options): `./_build/binaries/io_static setup.io`.\n\n\n#### Building with Cygwin\n\nInstall Cygwin from: <http://www.cygwin.com/>\n\n1. `cd` to your Io root folder\n2. We want to do an out-of-source build, so: `mkdir buildroot` and `cd buildroot`\n3. a) `cmake ..`\n\n\tor\n\n    b) `cmake -DCMAKE_INSTALL_PREFIX=<install_drive>:/<install_directory> ..`\n    (eg: `cmake -DCMAKE_INSTALL_PREFIX=C:/Io ..`)\n4. `make`\n5. `make install`\n6. Install [Eerie](https://github.com/IoLanguage/eerie), the Io package manager\n    (see Eerie [repo](https://github.com/IoLanguage/eerie) for installation\n    options): `./_build/binaries/io_static setup.io`.\n\nNote: If you also have CMake 2.8 for Windows installed (apart from CMake for\nCygwin) check your `PATH` environment variable so you won't be running CMake for\nWindows instead of Cygwin version.\n\n\nRunning Tests\n===\n\nYou should be inside your out-of-source build dir. The vm tests can be run with\nthe command:\n\n\tio ../libs/iovm/tests/correctness/run.io\n\nInstalling Addons\n===\n\nMany of the common features provided by the Io language aren't prepackaged in\nthe Io core. Instead, these features are contained in addons that get loaded\nwhen launching the Io VM. In the past, these addons were automatically installed\nby the build process, but now they must be installed through\n[Eerie](https://github.com/IoLanguage/eerie), the Io package manager.\n\nMost of these addons are housed under the IoLanguage group on GitHub:\nhttps://github.com/IoLanguage.\n\nTo install an addon, ensure both Io and Eerie are installed correctly, then run:\n\n```\neerie install <link to the git repository>\n```\n\nFor example, to build and install the `Range` addon, run the command:\n\n```\neerie install https://github.com/IoLanguage/Range.git\n```\n\nTo ensure that an addon installed correctly, pull up an Io interpreter and type\nthe name of the object provided by the addon. It should load dynamically and\nautomatically into the interpreter session, populating a slot in `Lobby Protos\nAddons`.\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 0.978515625,
          "content": "#!/bin/sh\n# Build script for Steve\n\nINSTALL_PREFIX=\"${INSTALL_PREFIX:-/usr/local}\"\n\nif [ X\"$1\" = X\"linkInstall\" ]; then\n\trm -rf $INSTALL_PREFIX/lib/io $INSTALL_PREFIX/bin/io\n\tfor i in $PWD/build/_build/dll/*; do ln -s $i $INSTALL_PREFIX/lib/`basename $i`; done\n\tmkdir $INSTALL_PREFIX/lib/io\n\tln -s $PWD/addons $INSTALL_PREFIX/lib/io/\nelif [ X\"$1\" = X\"install\" ]; then\n\tcd build\n\tmake install\nelif [ X\"$1\" = X\"help\" ]; then\n\techo \"Io build and installation\"\n\techo \"Usage: $0 [help|install|linkInstall|clean]\"\n\techo -e \"help\\n\\tThis message\"\n\techo -e \"install\\n\\tInstalls Io (must have built it first)\"\n\techo -e \"linkInstall\\n\\tLike above, but creates links into this hierarchy\"\n\techo -e \"clean\\n\\tRemoves all build files. This will break a linkInstall.\"\n\techo -e \"Any other arguments, or lack thereof will build Io.\"\nelif [ X\"$1\" = X\"clean\" ]; then\n\t[ -d build ] && rm -rf build || echo \"Nothing to clean.\"\nelse\n\tmkdir -p build\n\tcd build\n\tcmake -DCMAKE_INSTALL_PREFIX=\"$INSTALL_PREFIX\" ..\n\tmake all\nfi\n\n"
        },
        {
          "name": "deps",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "eerie",
          "type": "commit",
          "content": null
        },
        {
          "name": "extras",
          "type": "tree",
          "content": null
        },
        {
          "name": "libs",
          "type": "tree",
          "content": null
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}