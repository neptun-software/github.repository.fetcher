{
  "metadata": {
    "timestamp": 1736709963037,
    "page": 512,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vivien/i3blocks",
      "stars": 2315,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1396484375,
          "content": "*.o\ni3blocks\n.deps/\nMakefile\nMakefile.in\naclocal.m4\nautom4te.cache/\nbuild-aux/\nconfig.log\nconfig.status\nconfigure\ni3blocks-config.h*\nstamp-h1\n\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 34.3232421875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 0.6591796875,
          "content": "DEFS += \\\n\t-DSYSCONFDIR=\\\"$(sysconfdir)\\\"\n\nbin_PROGRAMS = i3blocks\ni3blocks_SOURCES = \\\n\tbar.c \\\n\tbar.h \\\n\tblock.c \\\n\tblock.h \\\n\tconfig.c \\\n\tconfig.h \\\n\ti3bar.c \\\n\tini.c \\\n\tini.h \\\n\tjson.c \\\n\tjson.h \\\n\tline.c \\\n\tline.h \\\n\tlog.h \\\n\tmain.c \\\n\tmap.c \\\n\tmap.h \\\n\tsys.c \\\n\tsys.h \\\n\tterm.h\n\ndist_man1_MANS = \\\n\tdocs/i3blocks.1\n\ndist_sysconf_DATA = \\\n\ti3blocks.conf\n\nif ENABLE_BASH_COMPLETION\nbashcompletiondir = $(BASH_COMPLETION_DIR)\nbashcompletion_DATA = bash-completion\n\ninstall-data-local: install-bashcompletionDATA\n\t( cd '$(DESTDIR)$(BASH_COMPLETION_DIR)' && mv bash-completion i3blocks )\n\nuninstall-local:\n\t( cd '$(DESTDIR)$(BASH_COMPLETION_DIR)' && rm -rf i3blocks )\nendif\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 0.0263671875,
          "content": "#! /bin/sh\nautoreconf -fiv\n"
        },
        {
          "name": "bar.c",
          "type": "blob",
          "size": 8.2021484375,
          "content": "/*\n * bar.c - status line handling functions\n * Copyright (C) 2014-2019  Vivien Didelot\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n#include <signal.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n\n#include \"bar.h\"\n#include \"block.h\"\n#include \"config.h\"\n#include \"json.h\"\n#include \"line.h\"\n#include \"log.h\"\n#include \"map.h\"\n#include \"sched.h\"\n#include \"sys.h\"\n#include \"term.h\"\n\nstatic void bar_read(struct bar *bar)\n{\n\tint err;\n\n\terr = i3bar_click(bar);\n\tif (err)\n\t\tbar_error(bar, \"failed to read bar\");\n}\n\nstatic void bar_print(struct bar *bar)\n{\n\tint err;\n\n\terr = i3bar_print(bar);\n\tif (err)\n\t\tfatal(\"failed to print bar!\");\n}\n\nstatic int bar_start(struct bar *bar)\n{\n\tint err;\n\n\terr = i3bar_start(bar);\n\tif (err)\n\t\treturn err;\n\n\tdebug(\"bar started\");\n\n\treturn 0;\n}\n\nstatic void bar_stop(struct bar *bar)\n{\n\ti3bar_stop(bar);\n\n\tdebug(\"bar stopped\");\n}\n\nstatic void bar_poll_timed(struct bar *bar)\n{\n\tstruct block *block = bar->blocks;\n\n\twhile (block) {\n\t\t/* spawn unless it is only meant for click or signal */\n\t\tif (block->interval != 0) {\n\t\t\tblock_spawn(block);\n\t\t\tblock_touch(block);\n\t\t}\n\n\t\tblock = block->next;\n\t}\n}\n\nstatic void bar_poll_expired(struct bar *bar)\n{\n\tstruct block *block = bar->blocks;\n\n\twhile (block) {\n\t\tif (block->interval > 0) {\n\t\t\tconst unsigned long next_update = block->timestamp + block->interval;\n\t\t\tunsigned long now;\n\t\t\tint err;\n\n\t\t\terr = sys_gettime(&now);\n\t\t\tif (err)\n\t\t\t\treturn;\n\n\t\t\tif (((long) (next_update - now)) <= 0) {\n\t\t\t\tblock_debug(block, \"expired\");\n\t\t\t\tblock_spawn(block);\n\t\t\t\tblock_touch(block);\n\t\t\t}\n\t\t}\n\n\t\tblock = block->next;\n\t}\n}\n\nstatic void bar_poll_signaled(struct bar *bar, int sig)\n{\n\tstruct block *block = bar->blocks;\n\n\twhile (block) {\n\t\tif (block->signal == sig) {\n\t\t\tblock_debug(block, \"signaled\");\n\t\t\tblock_spawn(block);\n\t\t\tblock_touch(block);\n\t\t}\n\n\t\tblock = block->next;\n\t}\n}\n\nstatic void bar_poll_exited(struct bar *bar)\n{\n\tstruct block *block;\n\tpid_t pid;\n\tint err;\n\n\tfor (;;) {\n\t\terr = sys_waitid(&pid);\n\t\tif (err)\n\t\t\tbreak;\n\n\t\t/* Find the dead process */\n\t\tblock = bar->blocks;\n\t\twhile (block) {\n\t\t\tif (block->pid == pid)\n\t\t\t\tbreak;\n\n\t\t\tblock = block->next;\n\t\t}\n\n\t\tif (block) {\n\t\t\tblock_debug(block, \"exited\");\n\t\t\tblock_reap(block);\n\t\t\tif (block->interval == INTERVAL_PERSIST) {\n\t\t\t\tblock_debug(block, \"unexpected exit?\");\n\t\t\t} else {\n\t\t\t\tblock_update(block);\n\t\t\t}\n\t\t\tblock_close(block);\n\t\t\tif (block->interval == INTERVAL_REPEAT) {\n\t\t\t\tblock_spawn(block);\n\t\t\t\tblock_touch(block);\n\t\t\t}\n\t\t} else {\n\t\t\terror(\"unknown child process %d\", pid);\n\t\t\terr = sys_waitpid(pid, NULL);\n\t\t\tif (err)\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nstatic void bar_poll_readable(struct bar *bar, const int fd)\n{\n\tstruct block *block = bar->blocks;\n\n\twhile (block) {\n\t\tif (block->out[0] == fd) {\n\t\t\tblock_debug(block, \"readable\");\n\t\t\tblock_update(block);\n\t\t\tbreak;\n\t\t}\n\n\t\tblock = block->next;\n\t}\n}\n\nstatic int gcd(int a, int b)\n{\n\twhile (b != 0)\n\t\ta %= b, a ^= b, b ^= a, a ^= b;\n\n\treturn a;\n}\n\nstatic int bar_setup(struct bar *bar)\n{\n\tstruct block *block = bar->blocks;\n\tsigset_t *set = &bar->sigset;\n\tunsigned long sleeptime = 0;\n\tint sig;\n\tint err;\n\n\twhile (block) {\n\t\terr = block_setup(block);\n\t\tif (err)\n\t\t\treturn err;\n\n\t\t/* The maximum sleep time is actually the GCD\n\t\t * between all positive block intervals.\n\t\t */\n\t\tif (block->interval > 0) {\n\t\t\tif (sleeptime > 0)\n\t\t\t\tsleeptime = gcd(sleeptime, block->interval);\n\t\t\telse\n\t\t\t\tsleeptime = block->interval;\n\t\t}\n\n\t\tblock = block->next;\n\t}\n\n\terr = sys_sigemptyset(set);\n\tif (err)\n\t\treturn err;\n\n\t/* Control signals */\n\terr = sys_sigaddset(set, SIGTERM);\n\tif (err)\n\t\treturn err;\n\n\terr = sys_sigaddset(set, SIGINT);\n\tif (err)\n\t\treturn err;\n\n\t/* Timer signal */\n\terr = sys_sigaddset(set, SIGALRM);\n\tif (err)\n\t\treturn err;\n\n\t/* Block updates (forks) */\n\terr = sys_sigaddset(set, SIGCHLD);\n\tif (err)\n\t\treturn err;\n\n\t/* Deprecated signals */\n\terr = sys_sigaddset(set, SIGUSR1);\n\tif (err)\n\t\treturn err;\n\n\terr = sys_sigaddset(set, SIGUSR2);\n\tif (err)\n\t\treturn err;\n\n\t/* Click signal */\n\terr = sys_sigaddset(set, SIGIO);\n\tif (err)\n\t\treturn err;\n\n\t/* I/O Possible signal for persistent blocks */\n\terr = sys_sigaddset(set, SIGRTMIN);\n\tif (err)\n\t\treturn err;\n\n\t/* Real-time signals for blocks */\n\tfor (sig = SIGRTMIN + 1; sig <= SIGRTMAX; sig++) {\n\t\terr = sys_sigaddset(set, sig);\n\t\tif (err)\n\t\t\treturn err;\n\t}\n\n\t/* Block signals for which we are interested in waiting */\n\terr = sys_sigsetmask(set);\n\tif (err)\n\t\treturn err;\n\n\tif (sleeptime) {\n\t\terr = sys_setitimer(sleeptime);\n\t\tif (err)\n\t\t\treturn err;\n\t}\n\n\terr = sys_cloexec(STDIN_FILENO);\n\tif (err)\n\t\treturn err;\n\n\t/* Setup event I/O for stdin (clicks) */\n\terr = sys_async(STDIN_FILENO, SIGIO);\n\tif (err)\n\t\treturn err;\n\n\tdebug(\"bar set up\");\n\n\treturn 0;\n}\n\nstatic void bar_teardown(struct bar *bar)\n{\n\tstruct block *block = bar->blocks;\n\tint err;\n\n\t/* Disable event I/O for blocks (persistent) */\n\twhile (block) {\n\t\tif (block->interval == INTERVAL_PERSIST) {\n\t\t\terr = sys_async(block->out[0], 0);\n\t\t\tif (err)\n\t\t\t\tblock_error(block, \"failed to disable event I/O\");\n\t\t}\n\n\t\tblock = block->next;\n\t}\n\n\t/* Disable event I/O for stdin (clicks) */\n\terr = sys_async(STDIN_FILENO, 0);\n\tif (err)\n\t\terror(\"failed to disable event I/O on stdin\");\n\n\t/*\n\t * Unblock signals (so subsequent syscall can be interrupted)\n\t * and wait for child processes termination.\n\t */\n\terr = sys_sigunblock(&bar->sigset);\n\tif (err)\n\t\terror(\"failed to unblock signals\");\n\n\terr = sys_waitanychild();\n\tif (err)\n\t\terror(\"failed to wait for any child\");\n\n\tdebug(\"bar tear down\");\n}\n\nstatic int bar_poll(struct bar *bar)\n{\n\tint sig, fd;\n\tint err;\n\n\terr = bar_setup(bar);\n\tif (err)\n\t\treturn err;\n\n\t/* Initial display (for static blocks and loading labels) */\n\tbar_print(bar);\n\n\t/* First forks (for commands with an interval) */\n\tbar_poll_timed(bar);\n\n\twhile (1) {\n\t\terr = sys_sigwaitinfo(&bar->sigset, &sig, &fd);\n\t\tif (err) {\n\t\t\t/* Hiding the bar may interrupt this system call */\n\t\t\tif (err == -EINTR)\n\t\t\t\tcontinue;\n\t\t\tbreak;\n\t\t}\n\n\t\tif (sig == SIGTERM || sig == SIGINT)\n\t\t\tbreak;\n\n\t\tif (sig == SIGALRM) {\n\t\t\tbar_poll_expired(bar);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (sig == SIGCHLD) {\n\t\t\tbar_poll_exited(bar);\n\t\t\tbar_print(bar);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (sig == SIGIO) {\n\t\t\tbar_read(bar);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (sig == SIGRTMIN) {\n\t\t\tbar_poll_readable(bar, fd);\n\t\t\tbar_print(bar);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (sig > SIGRTMIN && sig <= SIGRTMAX) {\n\t\t\tbar_poll_signaled(bar, sig - SIGRTMIN);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (sig == SIGUSR1 || sig == SIGUSR2) {\n\t\t\terror(\"SIGUSR{1,2} are deprecated, ignoring.\");\n\t\t\tcontinue;\n\t\t}\n\n\t\tdebug(\"unhandled signal %d\", sig);\n\t}\n\n\tbar_teardown(bar);\n\n\treturn err;\n}\n\nstatic void bar_destroy(struct bar *bar)\n{\n\tstruct block *block = bar->blocks;\n\tstruct block *next;\n\n\tbar_stop(bar);\n\n\twhile (block) {\n\t\tnext = block->next;\n\t\tblock_destroy(block);\n\t\tblock = next;\n\t}\n\n\tfree(bar);\n}\n\nstatic struct bar *bar_create(bool term)\n{\n\tstruct bar *bar;\n\tint err;\n\n\tbar = calloc(1, sizeof(struct bar));\n\tif (!bar)\n\t\treturn NULL;\n\n\tbar->term = term;\n\n\terr = bar_start(bar);\n\tif (err) {\n\t\tbar_destroy(bar);\n\t\treturn NULL;\n\t}\n\n\treturn bar;\n}\n\nstatic int bar_config_cb(const struct map *map, void *data)\n{\n\tstruct bar *bar = data;\n\tstruct block *block;\n\tstruct block *prev;\n\n\tblock = block_create(bar, map);\n\tif (!block)\n\t\treturn -ENOMEM;\n\n\tif (bar->blocks) {\n\t\tprev = bar->blocks;\n\t\twhile (prev->next)\n\t\t\tprev = prev->next;\n\t\tprev->next = block;\n\t} else {\n\t\tbar->blocks = block;\n\t}\n\n\treturn 0;\n}\n\nstatic void bar_load(struct bar *bar, const char *path)\n{\n\tint err;\n\n\terr = config_load(path, bar_config_cb, bar);\n\tif (err)\n\t\tbar_fatal(bar, \"Failed to load configuration file %s\", path);\n}\n\nint bar_init(bool term, const char *path)\n{\n\tstruct bar *bar;\n\tint err;\n\n\tbar = bar_create(term);\n\tif (!bar)\n\t\treturn -ENOMEM;\n\n\tbar_load(bar, path);\n\n\terr = bar_poll(bar);\n\n\tbar_destroy(bar);\n\n\treturn err;\n}\n"
        },
        {
          "name": "bar.h",
          "type": "blob",
          "size": 2.017578125,
          "content": "/*\n * bar.h - definition of a status line handling functions\n * Copyright (C) 2014-2019  Vivien Didelot\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n#ifndef BAR_H\n#define BAR_H\n\n#include <stdbool.h>\n\n#include \"block.h\"\n#include \"sys.h\"\n\nstruct bar {\n\tstruct block *blocks;\n\tsigset_t sigset;\n\tbool term;\n};\n\n#define bar_printf(bar, lvl, fmt, ...) \\\n\tblock_printf(bar->blocks, lvl, \"%s\" fmt, bar->term ? \"TTY \" : \"\", ##__VA_ARGS__)\n\n#define bar_fatal(bar, fmt, ...) \\\n\tdo { \\\n\t\tfatal(fmt, ##__VA_ARGS__); \\\n\t\tbar_printf(bar, LOG_FATAL, \"Oops! \" fmt \". Increase log level for details.\", ##__VA_ARGS__); \\\n\t} while (0)\n\n#define bar_error(bar, fmt, ...) \\\n\tdo { \\\n\t\terror(fmt, ##__VA_ARGS__); \\\n\t\tbar_printf(bar, LOG_ERROR, \"Error: \" fmt, ##__VA_ARGS__); \\\n\t} while (0)\n\n#define bar_trace(bar, fmt, ...) \\\n\tdo { \\\n\t\ttrace(fmt, ##__VA_ARGS__); \\\n\t\tbar_printf(bar, LOG_TRACE, \"Trace: \" fmt, ##__VA_ARGS__); \\\n\t} while (0)\n\n#define bar_debug(bar, fmt, ...) \\\n\tdo { \\\n\t\tdebug(fmt, ##__VA_ARGS__); \\\n\t\tbar_printf(bar, LOG_DEBUG, \"Debug: \" fmt, ##__VA_ARGS__); \\\n\t} while (0)\n\nint bar_init(bool term, const char *path);\n\nstruct map;\n\n/* i3bar.c */\nint i3bar_read(int fd, size_t count, struct map *map);\nint i3bar_click(struct bar *bar);\nint i3bar_print(const struct bar *bar);\nint i3bar_printf(struct block *block, int lvl, const char *msg);\nint i3bar_setup(struct block *block);\nint i3bar_start(struct bar *bar);\nvoid i3bar_stop(struct bar *bar);\n\n#endif /* BAR_H */\n"
        },
        {
          "name": "bash-completion",
          "type": "blob",
          "size": 1.0009765625,
          "content": "#\n# bash-completion - bash completion script for i3blocks\n# Copyright (C) 2019  Gaël Portay\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n\n_i3blocks()\n{\n\tlocal cur prev words cword\n\t_init_completion || return\n\n\tcase $prev in\n\t-c)\n\t\t_filedir\n\t\treturn\n\t\t;;\n\t-o)\n\t\tCOMPREPLY=( $( compgen -W \"term\" -- \"$cur\" ) )\n\t\treturn\n\t\t;;\n\tesac\n\n\tCOMPREPLY=( $( compgen -W \"-c -o -v -h -V\" -- \"$cur\" ) )\n\treturn\n} &&\ncomplete -F _i3blocks i3blocks\n"
        },
        {
          "name": "block.c",
          "type": "blob",
          "size": 10.8193359375,
          "content": "/*\n * block.c - update of a single status line block\n * Copyright (C) 2014-2019  Vivien Didelot\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n#include <ctype.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include \"bar.h\"\n#include \"block.h\"\n#include \"json.h\"\n#include \"line.h\"\n#include \"log.h\"\n#include \"sys.h\"\n\nconst char *block_get(const struct block *block, const char *key)\n{\n\treturn map_get(block->env, key);\n}\n\nint block_set(struct block *block, const char *key, const char *value)\n{\n\treturn map_set(block->env, key, value);\n}\n\nint block_reset(struct block *block)\n{\n\tmap_clear(block->env);\n\n\treturn map_copy(block->env, block->config);\n}\n\nint block_for_each(const struct block *block,\n\t\t   int (*func)(const char *key, const char *value, void *data),\n\t\t   void *data)\n{\n\treturn map_for_each(block->env, func, data);\n}\n\nstatic bool block_is_spawned(struct block *block)\n{\n\treturn block->pid > 0;\n}\n\nstatic int block_setenv(const char *name, const char *value, void *data)\n{\n\tint err;\n\n\tif (!value)\n\t\tvalue = \"\";\n\n\terr = sys_setenv(name, value);\n\tif (err)\n\t\treturn err;\n\n\t/* Legacy env variables */\n\tif (strcmp(name, \"name\") == 0)\n\t\treturn sys_setenv(\"BLOCK_NAME\", value);\n\tif (strcmp(name, \"instance\") == 0)\n\t\treturn sys_setenv(\"BLOCK_INSTANCE\", value);\n\tif (strcmp(name, \"interval\") == 0)\n\t\treturn sys_setenv(\"BLOCK_INTERVAL\", value);\n\tif (strcmp(name, \"button\") == 0)\n\t\treturn sys_setenv(\"BLOCK_BUTTON\", value);\n\tif (strcmp(name, \"x\") == 0)\n\t\treturn sys_setenv(\"BLOCK_X\", value);\n\tif (strcmp(name, \"y\") == 0)\n\t\treturn sys_setenv(\"BLOCK_Y\", value);\n\n\treturn 0;\n}\n\nstatic int block_child_env(struct block *block)\n{\n\treturn block_for_each(block, block_setenv, NULL);\n}\n\nstatic int block_stdout(struct block *block)\n{\n\tconst char *label, *full_text;\n\tint out = block->out[0];\n\tchar buf[BUFSIZ];\n\tsize_t count;\n\tint err;\n\n\tif (block->interval == INTERVAL_PERSIST)\n\t\tcount = 1;\n\telse\n\t\tcount = -1; /* SIZE_MAX */\n\n\tif (block->format == FORMAT_JSON)\n\t\terr = json_read(out, count, block->env);\n\telse\n\t\terr = i3bar_read(out, count, block->env);\n\n\tif (err && err != -EAGAIN)\n\t\treturn err;\n\n\t/* Deprecated label */\n\tlabel = block_get(block, \"label\");\n\tfull_text = block_get(block, \"full_text\");\n\tif (label && full_text) {\n\t\tsnprintf(buf, sizeof(buf), \"%s%s\", label, full_text);\n\t\terr = block_set(block, \"full_text\", buf);\n\t\tif (err)\n\t\t\treturn err;\n\t}\n\n\treturn 0;\n}\n\nint block_update(struct block *block)\n{\n\tint err;\n\n\t/* Reset properties to default before updating from output */\n\terr = block_reset(block);\n\tif (err)\n\t\treturn err;\n\n\terr = block_stdout(block);\n\tif (err)\n\t\treturn err;\n\n\t/* Exit code takes precedence over the output */\n\tif (block->code == EXIT_URGENT) {\n\t\terr = block_set(block, \"urgent\", \"true\");\n\t\tif (err)\n\t\t\treturn err;\n\t}\n\n\tblock_debug(block, \"updated successfully\");\n\n\treturn 0;\n}\n\nstatic int block_send_key(const char *key, const char *value, void *data)\n{\n\tstruct block *block = data;\n\tchar buf[BUFSIZ];\n\tint err;\n\n\tif (!json_is_valid(value)) {\n\t\terr = json_escape(value, buf, sizeof(buf));\n\t\tif (err)\n\t\t\treturn err;\n\n\t\tvalue = buf;\n\t}\n\n\tdprintf(block->in[1], \",\\\"%s\\\":%s\", key, value);\n\n\treturn 0;\n}\n\nstatic int block_send_json(struct block *block)\n{\n\tint err;\n\n\tdprintf(block->in[1], \"{\\\"\\\":\\\"\\\"\");\n\terr = block_for_each(block, block_send_key, block);\n\tdprintf(block->in[1], \"}\\n\");\n\n\treturn err;\n}\n\n/* Push data to forked process through the open stdin pipe */\nstatic int block_send(struct block *block)\n{\n\tconst char *button = block_get(block, \"button\");\n\n\tif (!button) {\n\t\tblock_error(block, \"no click data to send\");\n\t\treturn -EINVAL;\n\t}\n\n\tif (!block_is_spawned(block)) {\n\t\tblock_error(block, \"persistent block not spawned\");\n\t\treturn 0;\n\t}\n\n\tif (block->format == FORMAT_JSON)\n\t\treturn block_send_json(block);\n\n\tdprintf(block->in[1], \"%s\\n\", button);\n\n\treturn 0;\n}\n\nint block_click(struct block *block)\n{\n\tblock_debug(block, \"clicked\");\n\n\tif (block->interval == INTERVAL_PERSIST)\n\t\treturn block_send(block);\n\n\treturn block_spawn(block);\n}\n\nvoid block_touch(struct block *block)\n{\n\tunsigned long now;\n\tint err;\n\n\terr = sys_gettime(&now);\n\tif (err) {\n\t\tblock_error(block, \"failed to touch block\");\n\t\treturn;\n\t}\n\n\tif (block->timestamp == now) {\n\t\tblock_debug(block, \"looping too fast\");\n\t\treturn;\n\t}\n\n\tblock->timestamp = now;\n}\n\nstatic int block_child_sig(struct block *block)\n{\n\tsigset_t set;\n\tint err;\n\n\t/* It'd be safe to assume that all signals are unblocked by default */\n\terr = sys_sigfillset(&set);\n\tif (err)\n\t\treturn err;\n\n\treturn sys_sigunblock(&set);\n}\n\nstatic int block_child_stdin(struct block *block)\n{\n\tint err;\n\n\tif (block->interval == INTERVAL_PERSIST) {\n\t\terr = sys_close(block->in[1]);\n\t\tif (err)\n\t\t\treturn err;\n\t} else {\n\t\terr = sys_open(\"/dev/null\", &block->in[0]);\n\t\tif (err)\n\t\t\treturn err;\n\t}\n\n\terr = sys_dup(block->in[0], STDIN_FILENO);\n\tif (err)\n\t\treturn err;\n\n\treturn sys_close(block->in[0]);\n}\n\nstatic int block_child_stdout(struct block *block)\n{\n\tint err;\n\n\terr = sys_close(block->out[0]);\n\tif (err)\n\t\treturn err;\n\n\terr = sys_dup(block->out[1], STDOUT_FILENO);\n\tif (err)\n\t\treturn err;\n\n\treturn sys_close(block->out[1]);\n}\n\nstatic int block_child_exec(struct block *block)\n{\n\treturn sys_execsh(block->command);\n}\n\nstatic int block_child(struct block *block)\n{\n\tint err;\n\n\terr = block_child_env(block);\n\tif (err)\n\t\treturn err;\n\n\terr = block_child_sig(block);\n\tif (err)\n\t\treturn err;\n\n\terr = block_child_stdin(block);\n\tif (err)\n\t\treturn err;\n\n\terr = block_child_stdout(block);\n\tif (err)\n\t\treturn err;\n\n\treturn block_child_exec(block);\n}\n\nstatic int block_parent_stdin(struct block *block)\n{\n\t/* Close read end of stdin pipe */\n\tif (block->interval == INTERVAL_PERSIST)\n\t\treturn sys_close(block->in[0]);\n\n\treturn 0;\n}\n\nstatic int block_parent_stdout(struct block *block)\n{\n\tint err;\n\n\t/* Close write end of stdout pipe */\n\terr = sys_close(block->out[1]);\n\tif (err)\n\t\treturn err;\n\n\tif (block->interval == INTERVAL_PERSIST)\n\t\treturn sys_async(block->out[0], SIGRTMIN);\n\n\treturn 0;\n}\n\nstatic int block_parent(struct block *block)\n{\n\tint err;\n\n\terr = block_parent_stdin(block);\n\tif (err)\n\t\treturn err;\n\n\terr = block_parent_stdout(block);\n\tif (err)\n\t\treturn err;\n\n\tblock_debug(block, \"forked child %d\", block->pid);\n\n\treturn 0;\n}\n\nstatic int block_fork(struct block *block)\n{\n\tint err;\n\n\terr = sys_fork(&block->pid);\n\tif (err)\n\t\treturn err;\n\n\tif (block->pid == 0) {\n\t\terr = block_child(block);\n\t\tif (err)\n\t\t\tsys_exit(EXIT_ERR_INTERNAL);\n\t}\n\n\treturn block_parent(block);\n}\n\nstatic int block_open(struct block *block)\n{\n\tint err;\n\n\terr = sys_pipe(block->out);\n\tif (err)\n\t\treturn err;\n\n\tif (block->interval == INTERVAL_PERSIST)\n\t\treturn sys_pipe(block->in);\n\n\treturn 0;\n}\n\nint block_spawn(struct block *block)\n{\n\tint err;\n\n\tif (!block->command) {\n\t\tblock_debug(block, \"no command, skipping\");\n\t\treturn 0;\n\t}\n\n\tif (block_is_spawned(block)) {\n\t\tblock_debug(block, \"process already spawned\");\n\t\treturn 0;\n\t}\n\n\terr = block_open(block);\n\tif (err)\n\t\treturn err;\n\n\treturn block_fork(block);\n}\n\nstatic int block_wait(struct block *block)\n{\n\tint err;\n\n\tif (block->pid <= 0) {\n\t\tblock_debug(block, \"not spawned yet\");\n\t\treturn -EAGAIN;\n\t}\n\n\terr = sys_waitpid(block->pid, &block->code);\n\tif (err)\n\t\treturn err;\n\n\tblock_debug(block, \"process %d exited with %d\", block->pid, block->code);\n\n\t/* Process successfully reaped, reset the block PID */\n\tblock->pid = 0;\n\n\tif (block->code == EXIT_ERR_INTERNAL)\n\t\treturn -ECHILD;\n\n\treturn 0;\n}\n\nvoid block_close(struct block *block)\n{\n\tint err;\n\n\t/* Invalidate descriptors to avoid misdetection after reassignment */\n\tif (block->interval == INTERVAL_PERSIST) {\n\t\terr = sys_close(block->in[1]);\n\t\tif (err)\n\t\t\tblock_error(block, \"failed to close stdin\");\n\n\t\tblock->in[1] = -1;\n\t}\n\n\terr = sys_close(block->out[0]);\n\tif (err)\n\t\tblock_error(block, \"failed to close stdout\");\n\n\tblock->out[0] = -1;\n}\n\nint block_reap(struct block *block)\n{\n\tint err;\n\n\terr = block_wait(block);\n\tif (err) {\n\t\tif (err == -EAGAIN)\n\t\t\treturn 0;\n\n\t\tblock_error(block, \"Internal error\");\n\t\treturn err;\n\t}\n\n\tswitch (block->code) {\n\tcase 0:\n\tcase EXIT_URGENT:\n\t\tbreak;\n\tcase 126:\n\t\tblock_error(block, \"Command '%s' not executable\",\n\t\t\t    block->command);\n\t\tbreak;\n\tcase 127:\n\t\tblock_error(block, \"Command '%s' not found or missing dependency\",\n\t\t\t    block->command);\n\t\tbreak;\n\tdefault:\n\t\tblock_error(block, \"Command '%s' exited unexpectedly with code %d\",\n\t\t\t    block->command, block->code);\n\t\tbreak;\n\t}\n\n\treturn 0;\n}\n\nstatic int i3blocks_setup(struct block *block)\n{\n\tconst char *value;\n\n\tvalue = map_get(block->config, \"command\");\n\tif (value && *value != '\\0')\n\t\tblock->command = value;\n\n\tvalue = map_get(block->config, \"interval\");\n\tif (!value)\n\t\tblock->interval = 0;\n\telse if (strcmp(value, \"once\") == 0)\n\t\tblock->interval = INTERVAL_ONCE;\n\telse if (strcmp(value, \"repeat\") == 0)\n\t\tblock->interval = INTERVAL_REPEAT;\n\telse if (strcmp(value, \"persist\") == 0)\n\t\tblock->interval = INTERVAL_PERSIST;\n\telse\n\t\tblock->interval = atoi(value);\n\n\tvalue = map_get(block->config, \"format\");\n\tif (value && strcmp(value, \"json\") == 0)\n\t\tblock->format = FORMAT_JSON;\n\telse\n\t\tblock->format = FORMAT_RAW;\n\n\tvalue = map_get(block->config, \"signal\");\n\tif (!value)\n\t\tblock->signal = 0;\n\telse\n\t\tblock->signal = atoi(value);\n\n\treturn 0;\n}\n\nint block_setup(struct block *block)\n{\n\tint err;\n\n\terr = i3bar_setup(block);\n\tif (err)\n\t\treturn err;\n\n\terr = i3blocks_setup(block);\n\tif (err)\n\t\treturn err;\n\n\terr = block_reset(block);\n\tif (err)\n\t\treturn err;\n\n\tblock_debug(block, \"new block\");\n\n\treturn 0;\n}\n\nvoid block_destroy(struct block *block)\n{\n\tif (block->config)\n\t\tmap_destroy(block->config);\n\tif (block->env)\n\t\tmap_destroy(block->env);\n\tif (block->name)\n\t\tfree(block->name);\n\tfree(block);\n}\n\nstruct block *block_create(struct bar *bar, const struct map *config)\n{\n\tstruct block *block;\n\tint err;\n\n\tblock = calloc(1, sizeof(struct block));\n\tif (!block)\n\t\treturn NULL;\n\n\tblock->bar = bar;\n\n\tblock->config = map_create();\n\tif (!block->config) {\n\t\tblock_destroy(block);\n\t\treturn NULL;\n\t}\n\n\tif (config) {\n\t\terr = map_copy(block->config, config);\n\t\tif (err) {\n\t\t\tblock_destroy(block);\n\t\t\treturn NULL;\n\t\t}\n\t}\n\n\tblock->env = map_create();\n\tif (!block->env) {\n\t\tblock_destroy(block);\n\t\treturn NULL;\n\t}\n\n\treturn block;\n}\n\nvoid block_printf(struct block *block, int lvl, const char *fmt, ...)\n{\n\tchar buf[BUFSIZ];\n\tva_list ap;\n\tint err;\n\n\tif (lvl > log_level)\n\t\treturn;\n\n\tva_start(ap, fmt);\n\tvsnprintf(buf, sizeof(buf), fmt, ap);\n\tva_end(ap);\n\n\terr = i3bar_printf(block, lvl, buf);\n\tif (err)\n\t\tfatal(\"failed to format message for block %s: %s\", block->name, buf);\n}\n"
        },
        {
          "name": "block.h",
          "type": "blob",
          "size": 2.8291015625,
          "content": "/*\n * block.h - definition of a block\n * Copyright (C) 2014-2019  Vivien Didelot\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n#ifndef BLOCK_H\n#define BLOCK_H\n\n#include <sys/types.h>\n\n#include \"bar.h\"\n#include \"log.h\"\n#include \"map.h\"\n\n#define INTERVAL_ONCE\t\t-1\n#define INTERVAL_REPEAT\t\t-2\n#define INTERVAL_PERSIST\t-3\n\n#define FORMAT_RAW\t0\n#define FORMAT_JSON\t1\n\n/* Block command exit codes */\n#define EXIT_URGENT\t'!' /* 33 */\n#define EXIT_ERR_INTERNAL\t66\n\nstruct block {\n\tconst struct bar *bar;\n\n\tstruct map *config;\n\tstruct map *env;\n\n\tbool tainted;\n\n\t/* Pretty name for log messages */\n\tchar *name;\n\n\t/* Shortcuts */\n\tconst char *command;\n\tint interval;\n\tint signal;\n\tunsigned format;\n\n\t/* Runtime info */\n\tunsigned long timestamp;\n\tint in[2];\n\tint out[2];\n\tint code;\n\tpid_t pid;\n\n\tstruct block *next;\n};\n\nstruct block *block_create(struct bar *bar, const struct map *config);\nvoid block_destroy(struct block *block);\n\nint block_reset(struct block *block);\n\nconst char *block_get(const struct block *block, const char *key);\nint block_set(struct block *block, const char *key, const char *value);\n\nint block_for_each(const struct block *block,\n\t\t   int (*func)(const char *key, const char *value, void *data),\n\t\t   void *data);\n\nvoid block_printf(struct block *block, int lvl, const char *fmt, ...);\n\n#define block_fatal(block, fmt, ...) \\\n\tdo { \\\n\t\tfatal(\"[%s] \" fmt, block->name, ##__VA_ARGS__); \\\n\t\tblock_printf(block, LOG_FATAL, \"Oops! \" fmt, ##__VA_ARGS__); \\\n\t} while (0)\n\n#define block_error(block, fmt, ...) \\\n\tdo { \\\n\t\terror(\"[%s] \" fmt, block->name, ##__VA_ARGS__); \\\n\t\tblock_printf(block, LOG_ERROR, \"Error: \" fmt, ##__VA_ARGS__); \\\n\t} while (0)\n\n#define block_trace(block, fmt, ...) \\\n\tdo { \\\n\t\ttrace(\"[%s] \" fmt, block->name, ##__VA_ARGS__); \\\n\t\tblock_printf(block, LOG_TRACE, fmt, ##__VA_ARGS__); \\\n\t} while (0)\n\n#define block_debug(block, fmt, ...) \\\n\tdo { \\\n\t\tdebug(\"[%s] \" fmt, block->name, ##__VA_ARGS__); \\\n\t\tblock_printf(block, LOG_DEBUG, fmt, ##__VA_ARGS__); \\\n\t} while (0)\n\nint block_setup(struct block *block);\nint block_click(struct block *block);\nint block_spawn(struct block *block);\nvoid block_touch(struct block *block);\nint block_reap(struct block *block);\nint block_update(struct block *block);\nvoid block_close(struct block *block);\n\n#endif /* BLOCK_H */\n"
        },
        {
          "name": "config.c",
          "type": "blob",
          "size": 3.9375,
          "content": "/*\n * config.c - parsing of the configuration file\n * Copyright (C) 2014-2019  Vivien Didelot\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n#include <libgen.h>\n#include <limits.h>\n#include <stdbool.h>\n#include <stdlib.h>\n\n#include \"config.h\"\n#include \"ini.h\"\n#include \"log.h\"\n#include \"map.h\"\n#include \"sys.h\"\n\n#ifndef SYSCONFDIR\n#define SYSCONFDIR \"/etc\"\n#endif\n\nstruct config {\n\tstruct map *section;\n\tstruct map *global;\n\tconfig_cb_t *cb;\n\tvoid *data;\n};\n\nstatic int config_finalize(struct config *conf)\n{\n\tint err;\n\n\tif (conf->section) {\n\t\tif (conf->cb) {\n\t\t\terr = conf->cb(conf->section, conf->data);\n\t\t\tif (err)\n\t\t\t\treturn err;\n\t\t}\n\n\t\tconf->section = NULL;\n\t}\n\n\treturn 0;\n}\n\nstatic int config_reset(struct config *conf)\n{\n\tconf->section = map_create();\n\tif (!conf->section)\n\t\treturn -ENOMEM;\n\n\tif (conf->global)\n\t\treturn map_copy(conf->section, conf->global);\n\n\treturn 0;\n}\n\nstatic int config_set(struct config *conf, const char *key, const char *value)\n{\n\tstruct map *map = conf->section;\n\n\tif (!map) {\n\t\tif (!conf->global) {\n\t\t\tconf->global = map_create();\n\t\t\tif (!conf->global)\n\t\t\t\treturn -ENOMEM;\n\t\t}\n\n\t\tmap = conf->global;\n\t}\n\n\treturn map_set(map, key, value);\n}\n\nstatic int config_ini_section_cb(char *section, void *data)\n{\n\tint err;\n\n\terr = config_finalize(data);\n\tif (err)\n\t\treturn err;\n\n\terr = config_reset(data);\n\tif (err)\n\t\treturn err;\n\n\treturn config_set(data, \"name\", section);\n}\n\nstatic int config_ini_property_cb(char *key, char *value, void *data)\n{\n\treturn config_set(data, key, value);\n}\n\nstatic int config_read(struct config *conf, int fd)\n{\n\tint err;\n\n\terr = ini_read(fd, -1, config_ini_section_cb, config_ini_property_cb,\n\t\t       conf);\n\tif (err && err != -EAGAIN)\n\t\treturn err;\n\n\treturn config_finalize(conf);\n}\n\nstatic int config_open(struct config *conf, const char *path)\n{\n\tsize_t plen = strlen(path);\n\tchar pname[plen + 1];\n\tchar *dname;\n\tint err;\n\tint fd;\n\n\tdebug(\"try file %s\", path);\n\n\terr = sys_open(path, &fd);\n\tif (err)\n\t\treturn err;\n\n\tstrcpy(pname, path);\n\tdname = dirname(pname);\n\terr = sys_chdir(dname);\n\tif (err) {\n\t\terror(\"failed to change directory to %s\", dname);\n\t\treturn err;\n\t}\n\n\tdebug(\"changed directory to %s\", dname);\n\n\terr = config_read(conf, fd);\n\tsys_close(fd);\n\n\tif (conf->global)\n\t\tmap_destroy(conf->global);\n\n\treturn err;\n}\n\nint config_load(const char *path, config_cb_t *cb, void *data)\n{\n\tconst char * const home = sys_getenv(\"HOME\");\n\tconst char * const xdg_home = sys_getenv(\"XDG_CONFIG_HOME\");\n\tconst char * const xdg_dirs = sys_getenv(\"XDG_CONFIG_DIRS\");\n\tstruct config conf = {\n\t\t.data = data,\n\t\t.cb = cb,\n\t};\n\tchar buf[PATH_MAX];\n\tint err;\n\n\n\t/* command line config file? */\n\tif (path)\n\t\treturn config_open(&conf, path);\n\n\t/* user config file? */\n\tif (home) {\n\t\tif (xdg_home)\n\t\t\tsnprintf(buf, sizeof(buf), \"%s/i3blocks/config\", xdg_home);\n\t\telse\n\t\t\tsnprintf(buf, sizeof(buf), \"%s/.config/i3blocks/config\", home);\n\t\terr = config_open(&conf, buf);\n\t\tif (err != -ENOENT)\n\t\t\treturn err;\n\n\t\tsnprintf(buf, sizeof(buf), \"%s/.i3blocks.conf\", home);\n\t\terr = config_open(&conf, buf);\n\t\tif (err != -ENOENT)\n\t\t\treturn err;\n\t}\n\n\t/* system config file? */\n\tif (xdg_dirs)\n\t\tsnprintf(buf, sizeof(buf), \"%s/i3blocks/config\", xdg_dirs);\n\telse\n\t\tsnprintf(buf, sizeof(buf), \"%s/xdg/i3blocks/config\", SYSCONFDIR);\n\terr = config_open(&conf, buf);\n\tif (err != -ENOENT)\n\t\treturn err;\n\n\tsnprintf(buf, sizeof(buf), \"%s/i3blocks.conf\", SYSCONFDIR);\n\treturn config_open(&conf, buf);\n}\n"
        },
        {
          "name": "config.h",
          "type": "blob",
          "size": 0.91796875,
          "content": "/*\n * config.h - configuration file header\n * Copyright (C) 2014-2019  Vivien Didelot\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n#ifndef CONFIG_H\n#define CONFIG_H\n\n#include \"map.h\"\n\ntypedef int config_cb_t(const struct map *map, void *data);\nint config_load(const char *path, config_cb_t *cb, void *data);\n\n#endif /* CONFIG_H */\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 0.4833984375,
          "content": "AC_INIT([i3blocks], 1.5)\nAC_CONFIG_AUX_DIR([build-aux])\nAM_INIT_AUTOMAKE(foreign)\nAC_PROG_CC\nAC_CONFIG_HEADERS([i3blocks-config.h])\nPKG_CHECK_MODULES([BASH_COMPLETION], [bash-completion >= 2.0],\n  [BASH_COMPLETION_DIR=\"$(pkg-config --variable=completionsdir bash-completion)\"],\n  [BASH_COMPLETION_DIR=\"$datadir/bash-completion/completions\"]\n)\nAC_SUBST([BASH_COMPLETION_DIR])\nAM_CONDITIONAL([ENABLE_BASH_COMPLETION],[test \"xBASH_COMPLETION_DIR\" != \"x\"])\nAC_CONFIG_FILES([\n  Makefile\n])\nAC_OUTPUT\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "i3bar.c",
          "type": "blob",
          "size": 6.69921875,
          "content": "/*\n * i3bar.c - i3bar (plus i3-gaps and sway) protocol support\n * Copyright (C) 2014-2019  Vivien Didelot\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n#include \"bar.h\"\n#include \"block.h\"\n#include \"json.h\"\n#include \"line.h\"\n#include \"log.h\"\n#include \"map.h\"\n#include \"term.h\"\n\n/* See https://i3wm.org/docs/i3bar-protocol.html for details */\n\nstatic struct {\n\tconst char * const key;\n\tbool string;\n} i3bar_keys[] = {\n\t{ \"\", false }, /* unknown key */\n\n\t/* Standard keys */\n\t{ \"full_text\", true },\n\t{ \"short_text\", true },\n\t{ \"color\", true },\n\t{ \"background\", true },\n\t{ \"border\", true },\n\t{ \"min_width\", false }, /* can also be a number */\n\t{ \"align\", true },\n\t{ \"name\", true },\n\t{ \"instance\", true },\n\t{ \"urgent\", false },\n\t{ \"separator\", false },\n\t{ \"separator_block_width\", false },\n\t{ \"markup\", true },\n\n\t/* i3-gaps features */\n\t{ \"border_top\", false },\n\t{ \"border_bottom\", false },\n\t{ \"border_left\", false },\n\t{ \"border_right\", false },\n};\n\nstatic unsigned int i3bar_indexof(const char *key)\n{\n\tunsigned int i;\n\n\tfor (i = 0; i < sizeof(i3bar_keys) / sizeof(i3bar_keys[0]); i++)\n\t\tif (strcmp(i3bar_keys[i].key, key) == 0)\n\t\t\treturn i;\n\n\treturn 0;\n}\n\nstatic int i3bar_line_cb(char *line, size_t num, void *data)\n{\n\tunsigned int index = num + 1;\n\tstruct map *map = data;\n\tconst char *key;\n\n\tif (index >= sizeof(i3bar_keys) / sizeof(i3bar_keys[0])) {\n\t\tdebug(\"ignoring excess line %d: %s\", num, line);\n\t\treturn 0;\n\t}\n\n\tkey = i3bar_keys[index].key;\n\n\treturn map_set(map, key, line);\n}\n\nint i3bar_read(int fd, size_t count, struct map *map)\n{\n\treturn line_read(fd, count, i3bar_line_cb, map);\n}\n\nstatic void i3bar_print_term(const struct bar *bar)\n{\n\tstruct block *block = bar->blocks;\n\tconst char *full_text;\n\n\tterm_restore_cursor();\n\n\twhile (block) {\n\t\tfull_text = map_get(block->env, \"full_text\");\n\t\tif (full_text)\n\t\t\tfprintf(stdout, \"%s \", full_text);\n\n\t\tblock = block->next;\n\t}\n\n\tfflush(stdout);\n}\n\nstatic int i3bar_print_pair(const char *key, const char *value, void *data)\n{\n\tunsigned int index = i3bar_indexof(key);\n\tbool string = i3bar_keys[index].string;\n\tunsigned int *pcount = data;\n\tchar buf[BUFSIZ];\n\tbool escape;\n\tint err;\n\n\t/* Skip unknown keys */\n\tif (!index)\n\t\treturn 0;\n\n\tif (!value)\n\t\tvalue = \"null\";\n\n\tif (string) {\n\t\tif (json_is_string(value))\n\t\t\tescape = false; /* Expected string already quoted */\n\t\telse\n\t\t\tescape = true; /* Enforce the string type */\n\t} else {\n\t\tif (json_is_valid(value))\n\t\t\tescape = false; /* Already valid JSON */\n\t\telse\n\t\t\tescape = true; /* Unquoted string */\n\t}\n\n\tif (escape) {\n\t\terr = json_escape(value, buf, sizeof(buf));\n\t\tif (err)\n\t\t\treturn err;\n\n\t\tvalue = buf;\n\t}\n\n\tif ((*pcount)++)\n\t\tfprintf(stdout, \",\");\n\n\tfprintf(stdout, \"\\\"%s\\\":%s\", key, value);\n\n\treturn 0;\n}\n\nstatic int i3bar_print_block(struct block *block, void *data)\n{\n\tconst char *full_text = map_get(block->env, \"full_text\");\n\tunsigned int *mcount = data;\n\tunsigned int pcount = 0;\n\tint err;\n\n\t/* \"full_text\" is the only mandatory key */\n\tif (!full_text) {\n\t\tblock_debug(block, \"no text to display, skipping\");\n\t\treturn 0;\n\t}\n\n\tif ((*mcount)++)\n\t\tfprintf(stdout, \",\");\n\n\tfprintf(stdout, \"{\");\n\terr = map_for_each(block->env, i3bar_print_pair, &pcount);\n\tfprintf(stdout, \"}\");\n\n\treturn err;\n}\n\n int i3bar_print(const struct bar *bar)\n{\n\tstruct block *block = bar->blocks;\n\tunsigned int mcount = 0;\n\tint err;\n\n\tif (bar->term) {\n\t\ti3bar_print_term(bar);\n\t\treturn 0;\n\t}\n\n\tfprintf(stdout, \",[\");\n\twhile (block) {\n\t\terr = i3bar_print_block(block, &mcount);\n\t\tif (err)\n\t\t\tbreak;\n\n\t\tblock = block->next;\n\t}\n\tfprintf(stdout, \"]\\n\");\n\tfflush(stdout);\n\n\treturn err;\n}\n\nint i3bar_printf(struct block *block, int lvl, const char *msg)\n{\n\tconst struct bar *bar = block->bar;\n\tstruct map *map = block->env;\n\tint err;\n\n\tif (bar->term || lvl > LOG_ERROR)\n\t\treturn 0;\n\n\tblock->tainted = true;\n\n\terr = map_set(map, \"full_text\", msg);\n\tif (err)\n\t\treturn err;\n\n\tif (lvl <= LOG_ERROR) {\n\t\terr = map_set(map, \"urgent\", \"true\");\n\t\tif (err)\n\t\t\treturn err;\n\t}\n\n\treturn i3bar_print(bar);\n}\n\nint i3bar_start(struct bar *bar)\n{\n\tif (bar->term) {\n\t\tterm_save_cursor();\n\t\tterm_restore_cursor();\n\t} else {\n\t\tfprintf(stdout, \"{\\\"version\\\":1,\\\"click_events\\\":true}\\n[[]\\n\");\n\t\tfflush(stdout);\n\t}\n\n\treturn 0;\n}\n\nvoid i3bar_stop(struct bar *bar)\n{\n\tif (bar->term) {\n\t\tterm_reset_cursor();\n\t} else {\n\t\tfprintf(stdout, \"]\\n\");\n\t\tfflush(stdout);\n\t}\n}\n\nstatic struct block *i3bar_find(struct bar *bar, const struct map *map)\n{\n\tconst char *block_name, *block_instance;\n\tconst char *map_name, *map_instance;\n\tstruct block *block = bar->blocks;\n\n\t/* \"name\" and \"instance\" are the only identifiers provided by i3bar */\n\tmap_name = map_get(map, \"name\") ? : \"\";\n\tmap_instance = map_get(map, \"instance\") ? : \"\";\n\n\twhile (block) {\n\t\tblock_name = block_get(block, \"name\") ? : \"\";\n\t\tblock_instance = block_get(block, \"instance\") ? : \"\";\n\n\t\tif (strcmp(block_name, map_name) == 0 &&\n\t\t    strcmp(block_instance, map_instance) == 0)\n\t\t\treturn block;\n\n\t\tblock = block->next;\n\t}\n\n\treturn NULL;\n}\n\nint i3bar_click(struct bar *bar)\n{\n\tstruct block *block;\n\tstruct map *click;\n\tint err;\n\n\tclick = map_create();\n\tif (!click)\n\t\treturn -ENOMEM;\n\n\tfor (;;) {\n\t\t/* Each click is one JSON object per line */\n\t\terr = json_read(STDIN_FILENO, 1, click);\n\t\tif (err) {\n\t\t\tif (err == -EAGAIN)\n\t\t\t\terr = 0;\n\n\t\t\tbreak;\n\t\t}\n\n\t\t/* Look for the corresponding block */\n\t\tblock = i3bar_find(bar, click);\n\t\tif (block) {\n\t\t\tif (block->tainted) {\n\t\t\t\terr = block_reset(block);\n\t\t\t\tif (err)\n\t\t\t\t\tbreak;\n\n\t\t\t\tblock->tainted = false;\n\n\t\t\t\terr = i3bar_print(bar);\n\t\t\t\tif (err)\n\t\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\terr = map_copy(block->env, click);\n\t\t\t\tif (err)\n\t\t\t\t\tbreak;\n\n\t\t\t\terr = block_click(block);\n\t\t\t\tif (err)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tmap_clear(click);\n\t}\n\n\tmap_destroy(click);\n\n\treturn err;\n}\n\nint i3bar_setup(struct block *block)\n{\n\tconst char *instance = map_get(block->config, \"instance\");\n\tconst char *name = map_get(block->config, \"name\");\n\tchar buf[BUFSIZ];\n\tint err;\n\n\t/* A block needs a name to be clickable */\n\tif (!name) {\n\t\tname = \"foo\";\n\t\terr = map_set(block->config, \"name\", name);\n\t\tif (err)\n\t\t\treturn err;\n\t}\n\n\tif (instance)\n\t\tsnprintf(buf, sizeof(buf), \"%s:%s\", name, instance);\n\telse\n\t\tsnprintf(buf, sizeof(buf), \"%s\", name);\n\n\tblock->name = strdup(buf);\n\tif (!block->name)\n\t\treturn -ENOMEM;\n\n\treturn 0;\n}\n"
        },
        {
          "name": "i3blocks.conf",
          "type": "blob",
          "size": 0.478515625,
          "content": "# i3blocks configuration file\n#\n# The i3blocks man page describes the usage of the binary,\n# and its website describes the configuration:\n#\n#     https://vivien.github.io/i3blocks\n\n\n# Global properties\nseparator=true\nseparator_block_width=15\n\n[documentation]\nfull_text=Documentation\nwebsite=https://vivien.github.io/i3blocks\ncommand=xdg-open \"$website\"\ncolor=#f12711\n\n[greetings]\ncolor=#f5af19\ncommand=echo \"Hello, $USER!\"\ninterval=once\n\n[time]\ncommand=date '+%Y-%m-%d %H:%M:%S'\ninterval=1\n"
        },
        {
          "name": "ini.c",
          "type": "blob",
          "size": 2.2734375,
          "content": "/*\n * ini.c - generic INI parser\n * Copyright (C) 2017-2019  Vivien Didelot\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n#include <ctype.h>\n#include <string.h>\n\n#include \"ini.h\"\n#include \"line.h\"\n#include \"log.h\"\n\nstruct ini {\n\tini_sec_cb_t *sec_cb;\n\tini_prop_cb_t *prop_cb;\n\tvoid *data;\n};\n\nstatic int ini_section(struct ini *ini, char *section)\n{\n\tif (!ini->sec_cb)\n\t\treturn 0;\n\n\treturn ini->sec_cb(section, ini->data);\n}\n\nstatic int ini_property(struct ini *ini, char *key, char *value)\n{\n\tif (!ini->prop_cb)\n\t\treturn 0;\n\n\treturn ini->prop_cb(key, value, ini->data);\n}\n\nstatic int ini_parse_line(char *line, size_t num, void *data)\n{\n\t/* comment or empty line? */\n\tif (*line == '\\0' || *line == '#')\n\t\treturn 0;\n\n\t/* section? */\n\tif (*line == '[') {\n\t\tchar *closing, *section;\n\n\t\tclosing = strchr(line, ']');\n\t\tif (!closing) {\n\t\t\terror(\"malformated section \\\"%s\\\"\", line);\n\t\t\treturn -EINVAL;\n\t\t}\n\n\t\tif (*(closing + 1) != '\\0') {\n\t\t\terror(\"trailing characters \\\"%s\\\"\", closing);\n\t\t\treturn -EINVAL;\n\t\t}\n\n\t\tsection = line + 1;\n\t\t*closing = '\\0';\n\n\t\treturn ini_section(data, section);\n\t}\n\n\t/* property? */\n\tif (isalpha(*line) || *line == '_') {\n\t\tchar *equals, *key, *value;\n\n\t\tequals = strchr(line, '=');\n\t\tif (!equals) {\n\t\t\terror(\"malformated property, should be a key=value pair\");\n\t\t\treturn -EINVAL;\n\t\t}\n\n\t\t*equals = '\\0';\n\t\tkey = line;\n\t\tvalue = equals + 1;\n\n\t\treturn ini_property(data, key, value);\n\t}\n\n\terror(\"invalid INI syntax for line: \\\"%s\\\"\", line);\n\treturn -EINVAL;\n}\n\nint ini_read(int fd, size_t count, ini_sec_cb_t *sec_cb, ini_prop_cb_t *prop_cb,\n\t     void *data)\n{\n\tstruct ini ini = {\n\t\t.sec_cb = sec_cb,\n\t\t.prop_cb = prop_cb,\n\t\t.data = data,\n\t};\n\n\treturn line_read(fd, count, ini_parse_line, &ini);\n}\n"
        },
        {
          "name": "ini.h",
          "type": "blob",
          "size": 0.986328125,
          "content": "/*\n * ini.h - generic INI format parsing header\n * Copyright (C) 2017-2019  Vivien Didelot\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n#ifndef INI_H\n#define INI_H\n\ntypedef int ini_sec_cb_t(char *section, void *data);\ntypedef int ini_prop_cb_t(char *key, char *value, void *data);\nint ini_read(int fd, size_t count, ini_sec_cb_t *sec_cb, ini_prop_cb_t *prop_cb,\n\t     void *data);\n\n#endif /* INI_H */\n"
        },
        {
          "name": "json.c",
          "type": "blob",
          "size": 8.24609375,
          "content": "/*\n * json.c - flat JSON parsing\n * Copyright (C) 2014-2019  Vivien Didelot\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n#include <ctype.h>\n#include <stdbool.h>\n#include <stdint.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include \"json.h\"\n#include \"line.h\"\n#include \"log.h\"\n#include \"map.h\"\n#include \"sys.h\"\n\n/* Return the number of UTF-8 bytes on success, 0 if it is invalid */\nstatic size_t json_parse_codepoint(const char *str, char *buf, size_t size)\n{\n\tuint16_t codepoint = 0;\n\tchar utf8[3];\n\tsize_t len;\n\tint hex;\n\tchar c;\n\tint i;\n\n\tfor (i = 0; i < 4; i++) {\n\t\tc = str[i];\n\n\t\tif (!isxdigit(c))\n\t\t\treturn 0;\n\n\t\tif (c >= '0' && c <= '9')\n\t\t\thex = c - '0';\n\t\telse if (c >= 'a' && c <= 'f')\n\t\t\thex = c - 'a' + 10;\n\t\telse\n\t\t\thex = c - 'A' + 10;\n\n\t\tcodepoint |= hex << (12 - i * 4);\n\t}\n\n\t/* Support Only a single surrogate at the moment */\n\tif (codepoint <= 0x7f) {\n\t\tlen = 1;\n\t\tutf8[0] = codepoint;\n\t} else if (codepoint <= 0x7ff) {\n\t\tlen = 2;\n\t\tutf8[0] = 0xc0 | (codepoint >> 6);\n\t\tutf8[1] = 0x80 | (codepoint & 0x3f);\n\t} else {\n\t\tlen = 3;\n\t\tutf8[0] = (0xe0 | (codepoint >> 12));\n\t\tutf8[1] = (0x80 | ((codepoint >> 6) & 0x3f));\n\t\tutf8[2] = (0x80 | (codepoint & 0x3f));\n\t}\n\n\tif (buf) {\n\t\tif (size < len)\n\t\t\treturn 0;\n\n\t\tmemcpy(buf, utf8, len);\n\t}\n\n\treturn len;\n}\n\n/* Return the length of the parsed string, 0 if it is invalid */\nstatic size_t json_parse_string(const char *str, char *buf, size_t size)\n{\n\tconst char *end = str;\n\tsize_t len;\n\tchar c;\n\n\tif (*end != '\"')\n\t\treturn 0;\n\n\tdo {\n\t\tlen = 0;\n\n\t\tswitch (*++end) {\n\t\tcase '\\0':\n\t\t\treturn 0;\n\t\tcase '\"':\n\t\t\tc = '\\0';\n\t\t\tbreak;\n\t\tcase '\\\\':\n\t\t\tswitch (*++end) {\n\t\t\tcase '\"':\n\t\t\t\tc = '\"';\n\t\t\t\tbreak;\n\t\t\tcase '\\\\':\n\t\t\t\tc = '\\\\';\n\t\t\t\tbreak;\n\t\t\tcase '/':\n\t\t\t\tc = '/';\n\t\t\t\tbreak;\n\t\t\tcase 'b':\n\t\t\t\tc = '\\b';\n\t\t\t\tbreak;\n\t\t\tcase 'f':\n\t\t\t\tc = '\\f';\n\t\t\t\tbreak;\n\t\t\tcase 'n':\n\t\t\t\tc = '\\n';\n\t\t\t\tbreak;\n\t\t\tcase 'r':\n\t\t\t\tc = '\\r';\n\t\t\t\tbreak;\n\t\t\tcase 't':\n\t\t\t\tc = '\\t';\n\t\t\t\tbreak;\n\t\t\tcase 'u':\n\t\t\t\tlen = json_parse_codepoint(++end, buf, size);\n\t\t\t\tif (!len)\n\t\t\t\t\treturn 0;\n\n\t\t\t\tend += 3; /* jump to last hex digit */\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (iscntrl(*end))\n\t\t\t\treturn 0;\n\n\t\t\tc = *end;\n\t\t\tbreak;\n\t\t}\n\n\t\tif (buf) {\n\t\t\tif (!len) {\n\t\t\t\tif (size < 1)\n\t\t\t\t\treturn 0;\n\n\t\t\t\t*buf = c;\n\t\t\t\tlen = 1;\n\t\t\t}\n\n\t\t\tbuf += len;\n\t\t\tsize -= len;\n\t\t}\n\t} while (c);\n\n\treturn ++end - str;\n}\n\n/* Return the length of the parsed non scalar (with open/close delimiter), 0 if it is invalid */\nstatic size_t json_parse_nested_struct(const char *str, char open, char close,\n\t\t\t\t       char *buf, size_t size)\n{\n\tconst char *end = str;\n\tsize_t len;\n\tint nested;\n\n\tif (*str != open)\n\t\treturn 0;\n\n\tnested = 1;\n\twhile (nested) {\n\t\t++end;\n\n\t\t/* control character or end-of-line? */\n\t\tif (iscntrl(*end) || *end == '\\0')\n\t\t\treturn 0;\n\n\t\tif (*end == open)\n\t\t\tnested++;\n\t\telse if (*end == close)\n\t\t\tnested--;\n\t}\n\n\tlen = ++end - str;\n\tif (!len)\n\t\treturn 0;\n\n\tif (buf) {\n\t\tif (size <= len)\n\t\t\treturn 0;\n\n\t\tstrncpy(buf, str, len);\n\t\tbuf[len] = '\\0';\n\t}\n\n\treturn len;\n}\n\n/* Return the length of the parsed array, 0 if it is invalid */\nstatic size_t json_parse_nested_array(const char *str, char *buf, size_t size)\n{\n\treturn json_parse_nested_struct(str, '[', ']', buf, size);\n}\n\n/* Return the length of the parsed object, 0 if it is invalid */\nstatic size_t json_parse_nested_object(const char *str, char *buf, size_t size)\n{\n\treturn json_parse_nested_struct(str, '{', '}', buf, size);\n}\n\n/* Return the length of the parsed number, 0 if it is invalid */\nstatic size_t json_parse_number(const char *str, char *buf, size_t size)\n{\n\tsize_t len;\n\tchar *end;\n\n\tstrtoul(str, &end, 10);\n\n\tlen = end - str;\n\tif (!len)\n\t\treturn 0;\n\n\tif (buf) {\n\t\tif (size <= len)\n\t\t\treturn 0;\n\n\t\tstrncpy(buf, str, len);\n\t\tbuf[len] = '\\0';\n\t}\n\n\treturn len;\n}\n\n/* Return the length of the parsed literal, 0 if it is invalid */\nstatic size_t json_parse_literal(const char *str, const char *literal,\n\t\t\t\t char *buf, size_t size)\n{\n\tconst size_t len = strlen(literal);\n\n\tif (strncmp(str, literal, len) != 0)\n\t\treturn 0;\n\n\tif (buf) {\n\t\tstrncpy(buf, literal, size);\n\t\tif (buf[size - 1] != '\\0')\n\t\t\treturn 0;\n\t}\n\n\treturn len;\n}\n\n/* A value can be a string, number, object, array, true, false, or null */\nstatic size_t json_parse_value(const char *str, char *buf, size_t size)\n{\n\tsize_t len;\n\n\tlen = json_parse_string(str, buf, size);\n\tif (len)\n\t\treturn len;\n\n\tlen = json_parse_number(str, buf, size);\n\tif (len)\n\t\treturn len;\n\n\tlen = json_parse_nested_object(str, buf, size);\n\tif (len)\n\t\treturn len;\n\n\tlen = json_parse_nested_array(str, buf, size);\n\tif (len)\n\t\treturn len;\n\n\tlen = json_parse_literal(str, \"true\", buf, size);\n\tif (len)\n\t\treturn len;\n\n\tlen = json_parse_literal(str, \"false\", buf, size);\n\tif (len)\n\t\treturn len;\n\n\tlen = json_parse_literal(str, \"null\", buf, size);\n\tif (len)\n\t\treturn len;\n\n\treturn 0;\n}\n\n/* Return the length of a separator optionally enclosed by whitespaces, 0 otherwise */\nstatic size_t json_parse_sep(const char *str, char sep)\n{\n\tsize_t len = 0;\n\n\twhile (isspace(*str))\n\t\tstr++, len++;\n\n\tif (*str != sep)\n\t\treturn 0;\n\n\tstr++;\n\tlen++;\n\n\twhile (isspace(*str))\n\t\tstr++, len++;\n\n\treturn len;\n}\n\n/* Parse an inline [\"name\"][\\s+:\\s+][value] name-value pair */\nstatic size_t json_parse_pair(const char *str, char *name, size_t namesiz,\n\t\t\t      char *val, size_t valsiz)\n{\n\tsize_t pair_len = 0;\n\tsize_t len;\n\n\tlen = json_parse_string(str, name, namesiz);\n\tif (!len)\n\t\treturn 0;\n\n\tpair_len += len;\n\tstr += len;\n\n\tlen = json_parse_sep(str, ':');\n\tif (!len)\n\t\treturn 0;\n\n\tpair_len += len;\n\tstr += len;\n\n\tlen = json_parse_value(str, val, valsiz);\n\tif (!len)\n\t\treturn 0;\n\n\tpair_len += len;\n\n\treturn pair_len;\n}\n\nstatic int json_line_cb(char *line, size_t num, void *data)\n{\n\tstruct map *map = data;\n\tchar name[BUFSIZ];\n\tchar val[BUFSIZ];\n\tsize_t len;\n\tint err;\n\n\tfor (;;) {\n\t\t/* Only support inline flattened structures at the moment */\n\t\twhile (*line == '[' || *line == ']' || *line == ',' ||\n\t\t       *line == '{' || *line == '}' || isspace(*line))\n\t\t\tline++;\n\n\t\tif (*line == '\\0')\n\t\t\tbreak;\n\n\t\tmemset(name, 0, sizeof(name));\n\t\tmemset(val, 0, sizeof(val));\n\n\t\tlen = json_parse_pair(line, name, sizeof(name), val,\n\t\t\t\t      sizeof(val));\n\t\tif (!len)\n\t\t\treturn -EINVAL;\n\n\t\tline += len;\n\n\t\t/* valid delimiters after a pair */\n\t\tif (*line != ',' && *line != '}' && *line != '\\0' &&\n\t\t    !isspace(*line))\n\t\t\treturn -EINVAL;\n\n\t\tif (*line != '\\0')\n\t\t\tline++;\n\n\t\tif (map) {\n\t\t\terr = map_set(map, name, val);\n\t\t\tif (err)\n\t\t\t\treturn err;\n\t\t}\n\t}\n\n\treturn 0;\n}\n\nint json_read(int fd, size_t count, struct map *map)\n{\n\treturn line_read(fd, count, json_line_cb, map);\n}\n\nbool json_is_string(const char *str)\n{\n\tsize_t len;\n\n\tlen = strlen(str);\n\tif (!len)\n\t\treturn false;\n\n\treturn json_parse_string(str, NULL, 0) == len;\n}\n\nbool json_is_valid(const char *str)\n{\n\tsize_t len;\n\n\tlen = strlen(str);\n\tif (!len)\n\t\treturn false;\n\n\treturn json_parse_value(str, NULL, 0) == len;\n}\n\nint json_escape(const char *str, char *buf, size_t size)\n{\n\tsize_t null = strlen(str) + 1;\n\tchar c = '\\0';\n\tint len;\n\n\tdo {\n\t\tswitch (c) {\n\t\tcase '\\0':\n\t\t\tlen = snprintf(buf, size, \"\\\"\");\n\t\t\tbreak;\n\t\tcase '\\b':\n\t\t\tlen = snprintf(buf, size, \"\\\\b\");\n\t\t\tbreak;\n\t\tcase '\\f':\n\t\t\tlen = snprintf(buf, size, \"\\\\f\");\n\t\t\tbreak;\n\t\tcase '\\n':\n\t\t\tlen = snprintf(buf, size, \"\\\\n\");\n\t\t\tbreak;\n\t\tcase '\\r':\n\t\t\tlen = snprintf(buf, size, \"\\\\r\");\n\t\t\tbreak;\n\t\tcase '\\t':\n\t\t\tlen = snprintf(buf, size, \"\\\\t\");\n\t\t\tbreak;\n\t\tcase '\\\\':\n\t\t\tlen = snprintf(buf, size, \"\\\\\\\\\");\n\t\t\tbreak;\n\t\tcase '\"':\n\t\t\tlen = snprintf(buf, size, \"\\\\\\\"\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (iscntrl(c))\n\t\t\t\tlen = snprintf(buf, size, \"\\\\u%04x\", c);\n\t\t\telse\n\t\t\t\tlen = snprintf(buf, size, \"%c\", c);\n\t\t\tbreak;\n\t\t}\n\n\t\t/* Ensure the result was not truncated */\n\t\tif (len < 0 || len >= size)\n\t\t\treturn -ENOSPC;\n\n\t\tsize -= len;\n\t\tbuf += len;\n\n\t\tc = *str;\n\t\tif (c)\n\t\t\tstr++;\n\t} while (null--);\n\n\treturn 0;\n}\n"
        },
        {
          "name": "json.h",
          "type": "blob",
          "size": 0.9892578125,
          "content": "/*\n * json.h - JSON manipulation header\n * Copyright (C) 2014-2019  Vivien Didelot\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n#ifndef JSON_H\n#define JSON_H\n\n#include <stdbool.h>\n\nstruct map;\n\nint json_read(int fd, size_t count, struct map *map);\n\nbool json_is_string(const char *str);\nbool json_is_valid(const char *str);\nint json_escape(const char *str, char *buf, size_t size);\n\n#endif /* JSON_H */\n\n"
        },
        {
          "name": "line.c",
          "type": "blob",
          "size": 1.94140625,
          "content": "/*\n * line.c - generic line parser\n * Copyright (C) 2015-2019  Vivien Didelot\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n#include \"line.h\"\n#include \"log.h\"\n#include \"sys.h\"\n\n/* Read a single character and return a negative error code if none was read */\nstatic int line_getc(int fd, char *c)\n{\n\treturn sys_read(fd, c, 1, NULL);\n}\n\n/* Read a line including the newline character and return its positive length */\nstatic ssize_t line_gets(int fd, char *buf, size_t size)\n{\n\tsize_t len = 0;\n\tint err;\n\n\tfor (;;) {\n\t\tif (len == size)\n\t\t\treturn -ENOSPC;\n\n\t\terr = line_getc(fd, buf + len);\n\t\tif (err)\n\t\t\treturn err;\n\n\t\tif (buf[len++] == '\\n')\n\t\t\tbreak;\n\t}\n\n\t/* at least 1 */\n\treturn len;\n}\n\n/* Read a line excluding the newline character */\nstatic int line_parse(int fd, line_cb_t *cb, size_t num, void *data)\n{\n\tchar buf[BUFSIZ];\n\tssize_t len;\n\tint err;\n\n\tlen = line_gets(fd, buf, sizeof(buf));\n\tif (len < 0)\n\t\treturn len;\n\n\t/* replace newline with terminating null byte */\n\tbuf[len - 1] = '\\0';\n\n\tdebug(\"&%d:%.3d: %s\", fd, num, buf);\n\n\tif (cb) {\n\t\terr = cb(buf, num, data);\n\t\tif (err)\n\t\t\treturn err;\n\t}\n\n\treturn 0;\n}\n\n/* Read up to count lines excluding their newline character */\nint line_read(int fd, size_t count, line_cb_t *cb, void *data)\n{\n\tsize_t lines = 0;\n\tint err;\n\n\twhile (count--) {\n\t\terr = line_parse(fd, cb, lines++, data);\n\t\tif (err)\n\t\t\treturn err;\n\t}\n\n\treturn 0;\n}\n"
        },
        {
          "name": "line.h",
          "type": "blob",
          "size": 0.908203125,
          "content": "/*\n * line.h - generic line parsing header\n * Copyright (C) 2015-2019  Vivien Didelot\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n#ifndef IO_H\n#define IO_H\n\n#include <unistd.h>\n\ntypedef int line_cb_t(char *line, size_t num, void *data);\nint line_read(int fd, size_t count, line_cb_t *cb, void *data);\n\n#endif /* IO_H */\n"
        },
        {
          "name": "log.h",
          "type": "blob",
          "size": 1.6220703125,
          "content": "/*\n * log.h - syslog friendly error and debug printing macros\n * Copyright (C) 2014-2019  Vivien Didelot\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n#ifndef LOG_H\n#define LOG_H\n\n#include <errno.h>\n#include <stdarg.h>\n#include <stdio.h>\n#include <string.h>\n\n#define SYSLOG_CRIT\t\"<2>\"\n#define SYSLOG_ERR\t\"<3>\"\n#define SYSLOG_NOTICE\t\"<5>\"\n#define SYSLOG_DEBUG\t\"<7>\"\n\nextern enum {\n\tLOG_FATAL,\n\tLOG_ERROR,\n\tLOG_TRACE,\n\tLOG_DEBUG,\n} log_level;\n\nstatic inline void log_printf(int lvl, const char *fmt, ...)\n{\n\tva_list ap;\n\n\tif (lvl <= LOG_ERROR || lvl <= log_level) {\n\t\tva_start(ap, fmt);\n\t\tvfprintf(stderr, fmt, ap);\n\t\tva_end(ap);\n\t}\n}\n\n#define fatal(fmt, ...) \\\n\tlog_printf(LOG_FATAL, SYSLOG_CRIT fmt \"\\n\", ##__VA_ARGS__)\n\n#define error(fmt, ...) \\\n\tlog_printf(LOG_ERROR, SYSLOG_ERR fmt \"\\n\", ##__VA_ARGS__)\n\n#define trace(fmt, ...) \\\n\tlog_printf(LOG_TRACE, SYSLOG_NOTICE fmt \"\\n\", ##__VA_ARGS__)\n\n#define debug(fmt, ...) \\\n\tlog_printf(LOG_DEBUG, SYSLOG_DEBUG \"%s:%s:%d: \" fmt \"\\n\", \\\n\t\t   __FILE__, __func__, __LINE__, ##__VA_ARGS__)\n\n#endif /* LOG_H */\n"
        },
        {
          "name": "main.c",
          "type": "blob",
          "size": 1.66015625,
          "content": "/*\n * main.c - main entry point\n * Copyright (C) 2014-2019  Vivien Didelot\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n#ifdef HAVE_CONFIG_H\n#include \"i3blocks-config.h\"\n#endif\n\n#include <getopt.h>\n#include <stdio.h>\n#include <stdlib.h>\n\n#include \"bar.h\"\n#include \"log.h\"\n#include \"sys.h\"\n\nunsigned int log_level;\n\nint main(int argc, char *argv[])\n{\n\tchar *output = NULL;\n\tchar *path = NULL;\n\tbool term;\n\tint c;\n\n\twhile (c = getopt(argc, argv, \"c:o:vhV\"), c != -1) {\n\t\tswitch (c) {\n\t\tcase 'c':\n\t\t\tpath = optarg;\n\t\t\tbreak;\n\t\tcase 'o':\n\t\t\toutput = optarg;\n\t\t\tbreak;\n\t\tcase 'v':\n\t\t\tlog_level++;\n\t\t\tbreak;\n\t\tcase 'h':\n\t\t\tprintf(\"Usage: %s [-c <configfile>] [-o <output>] [-v] [-h] [-V]\\n\", argv[0]);\n\t\t\treturn EXIT_SUCCESS;\n\t\tcase 'V':\n\t\t\tprintf(PACKAGE_STRING \" © 2014-2019 Vivien Didelot and contributors\\n\");\n\t\t\treturn EXIT_SUCCESS;\n\t\tdefault:\n\t\t\terror(\"Try '%s -h' for more information.\", argv[0]);\n\t\t\treturn EXIT_FAILURE;\n\t\t}\n\t}\n\n\tterm = !sys_isatty(STDOUT_FILENO);\n\tif (output)\n\t\tterm = !strcmp(output, \"term\");\n\n\tif (bar_init(term, path))\n\t\treturn EXIT_FAILURE;\n\n\treturn EXIT_SUCCESS;\n}\n"
        },
        {
          "name": "map.c",
          "type": "blob",
          "size": 3.7939453125,
          "content": "/*\n * map.c - implementation of an associative array\n * Copyright (C) 2017-2019  Vivien Didelot\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n#include <errno.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include \"map.h\"\n\nstruct pair {\n\tchar *key;\n\tchar *value;\n\n\tstruct pair *next;\n};\n\nstruct map {\n\tstruct pair *head;\n};\n\nstatic struct pair *map_head(const struct map *map)\n{\n\treturn map->head;\n}\n\n/* Return previous pair if key is found, last pair otherwise */\nstatic struct pair *map_prev(const struct map *map, const char *key)\n{\n\tstruct pair *prev = map_head(map);\n\tstruct pair *next = prev->next;\n\n\twhile (next) {\n\t\tif (strcmp(next->key, key) == 0)\n\t\t\tbreak;\n\n\t\tprev = next;\n\t\tnext = next->next;\n\t}\n\n\treturn prev;\n}\n\n/* Update the value of a pair */\nstatic int map_reassign(struct pair *pair, const char *value)\n{\n\tfree(pair->value);\n\tpair->value = NULL;\n\n\tif (value) {\n\t\tpair->value = strdup(value);\n\t\tif (!pair->value)\n\t\t\treturn -ENOMEM;\n\t}\n\n\treturn 0;\n}\n\n/* Create a new key-value pair */\nstatic struct pair *map_pair(const char *key, const char *value)\n{\n\tstruct pair *pair;\n\tint err;\n\n\tpair = calloc(1, sizeof(struct pair));\n\tif (!pair)\n\t\treturn NULL;\n\n\tpair->key = strdup(key);\n\tif (!pair->key) {\n\t\tfree(pair);\n\t\treturn NULL;\n\t}\n\n\terr = map_reassign(pair, value);\n\tif (err) {\n\t\tfree(pair->key);\n\t\tfree(pair);\n\t\treturn NULL;\n\t}\n\n\treturn pair;\n}\n\n/* Destroy a new key-value pair */\nvoid map_unpair(struct pair *pair)\n{\n\tmap_reassign(pair, NULL);\n\tfree(pair->key);\n\tfree(pair);\n}\n\n/* Insert a key-value pair after a given pair */\nstatic int map_insert(struct pair *prev, const char *key, const char *value)\n{\n\tstruct pair *pair;\n\n\tpair = map_pair(key, value);\n\tif (!pair)\n\t\treturn -ENOMEM;\n\n\tpair->next = prev->next;\n\tprev->next = pair;\n\n\treturn 0;\n}\n\n/* Delete the key-value pair after a given pair */\nstatic void map_delete(struct pair *prev)\n{\n\tstruct pair *pair = prev->next;\n\n\tprev->next = pair->next;\n\tmap_unpair(pair);\n}\n\nconst char *map_get(const struct map *map, const char *key)\n{\n\tstruct pair *prev = map_prev(map, key);\n\tstruct pair *next = prev->next;\n\n\tif (next)\n\t\treturn next->value;\n\telse\n\t\treturn NULL;\n}\n\nint map_set(struct map *map, const char *key, const char *value)\n{\n\tstruct pair *prev = map_prev(map, key);\n\tstruct pair *next = prev->next;\n\n\tif (next)\n\t\treturn map_reassign(next, value);\n\telse\n\t\treturn map_insert(prev, key, value);\n}\n\nint map_for_each(const struct map *map, map_func_t *func, void *data)\n{\n\tstruct pair *pair = map_head(map);\n\tint err;\n\n\twhile (pair->next) {\n\t\tpair = pair->next;\n\t\terr = func(pair->key, pair->value, data);\n\t\tif (err)\n\t\t\treturn err;\n\t}\n\n\treturn 0;\n}\n\nvoid map_clear(struct map *map)\n{\n\tstruct pair *pair = map_head(map);\n\n\twhile (pair->next)\n\t\tmap_delete(pair);\n}\n\nstatic int map_dup(const char *key, const char *value, void *data)\n{\n\tstruct map *map = data;\n\n\treturn map_set(map, key, value);\n}\n\nint map_copy(struct map *map, const struct map *base)\n{\n\treturn map_for_each(base, map_dup, map);\n}\n\nvoid map_destroy(struct map *map)\n{\n\tmap_clear(map);\n\tfree(map->head);\n\tfree(map);\n}\n\nstruct map *map_create(void)\n{\n\tstruct map *map;\n\n\tmap = calloc(1, sizeof(struct map));\n\tif (!map)\n\t\treturn NULL;\n\n\tmap->head = calloc(1, sizeof(struct pair));\n\tif (!map->head) {\n\t\tfree(map);\n\t\treturn NULL;\n\t}\n\n\treturn map;\n}\n"
        },
        {
          "name": "map.h",
          "type": "blob",
          "size": 1.2060546875,
          "content": "/*\n * map.h - definition of an associative array\n * Copyright (C) 2017-2019  Vivien Didelot\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n#ifndef MAP_H\n#define MAP_H\n\nstruct map;\n\nstruct map *map_create(void);\nvoid map_destroy(struct map *map);\n\nint map_copy(struct map *map, const struct map *base);\n\nvoid map_clear(struct map *map);\n\nint map_set(struct map *map, const char *key, const char *value);\nconst char *map_get(const struct map *map, const char *key);\n\ntypedef int map_func_t(const char *key, const char *value, void *data);\nint map_for_each(const struct map *map, map_func_t *func, void *data);\n\n#endif /* MAP_H */\n"
        },
        {
          "name": "sys.c",
          "type": "blob",
          "size": 7.599609375,
          "content": "/*\n * sys.c - system calls\n * Copyright (C) 2017-2019  Vivien Didelot\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n#define _GNU_SOURCE /* for F_SETSIG */\n\n#include <errno.h>\n#include <fcntl.h>\n#include <signal.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <sys/time.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <time.h>\n#include <unistd.h>\n\n#include \"log.h\"\n\n#define sys_errno(msg, ...) \\\n\ttrace(msg \": %s\", ##__VA_ARGS__, strerror(errno))\n\nint sys_chdir(const char *path)\n{\n\tint rc;\n\n\trc = chdir(path);\n\tif (rc == -1) {\n\t\tsys_errno(\"chdir(%s)\", path);\n\t\trc = -errno;\n\t\treturn rc;\n\t}\n\n\treturn 0;\n}\n\nint sys_gettime(unsigned long *interval)\n{\n\tstruct timespec ts;\n\tint rc;\n\n\trc = clock_gettime(CLOCK_MONOTONIC, &ts);\n\tif (rc == -1) {\n\t\tsys_errno(\"clock_gettime(CLOCK_MONOTONIC)\");\n\t\trc = -errno;\n\t\treturn rc;\n\t}\n\n\t*interval = ts.tv_sec;\n\n\treturn 0;\n}\n\nint sys_setitimer(unsigned long interval)\n{\n\tstruct itimerval itv = {\n\t\t.it_value.tv_sec = interval,\n\t\t.it_interval.tv_sec = interval,\n\t};\n\tint rc;\n\n\trc = setitimer(ITIMER_REAL, &itv, NULL);\n\tif (rc == -1) {\n\t\tsys_errno(\"setitimer(ITIMER_REAL, %ld)\", interval);\n\t\trc = -errno;\n\t\treturn rc;\n\t}\n\n\treturn 0;\n}\n\nint sys_waitid(pid_t *pid)\n{\n\tsiginfo_t infop;\n\tint rc;\n\n\t/* Non-blocking check for dead child(ren) */\n\trc = waitid(P_ALL, 0, &infop, WEXITED | WNOHANG | WNOWAIT);\n\tif (rc == -1) {\n\t\tsys_errno(\"waitid()\");\n\t\trc = -errno;\n\t\treturn rc;\n\t}\n\n\tif (infop.si_pid == 0)\n\t\treturn -ECHILD;\n\n\t*pid = infop.si_pid;\n\n\treturn 0;\n}\n\nint sys_waitpid(pid_t pid, int *code)\n{\n\tint status;\n\tpid_t w;\n\tint rc;\n\n\tw = waitpid(pid, &status, 0);\n\tif (w == -1) {\n\t\tsys_errno(\"waitpid(%d)\", pid);\n\t\trc = -errno;\n\t\treturn rc;\n\t}\n\n\tif (w == 0)\n\t\treturn -ECHILD;\n\n\tif (code)\n\t\t*code = WEXITSTATUS(status);\n\n\treturn 0;\n}\n\nint sys_waitanychild(void)\n{\n\tint err;\n\n\tfor (;;) {\n\t\terr = sys_waitpid(-1, NULL);\n\t\tif (err) {\n\t\t\tif (err == -ECHILD)\n\t\t\t\tbreak;\n\t\t\treturn err;\n\t\t}\n\t}\n\n\treturn 0;\n}\n\nint sys_setenv(const char *name, const char *value)\n{\n\tint rc;\n\n\trc = setenv(name, value, 1);\n\tif (rc == -1) {\n\t\tsys_errno(\"setenv(%s=%s)\", name, value);\n\t\trc = -errno;\n\t\treturn rc;\n\t}\n\n\treturn 0;\n}\n\nconst char *sys_getenv(const char *name)\n{\n\treturn getenv(name);\n}\n\nint sys_sigemptyset(sigset_t *set)\n{\n\tint rc;\n\n\trc = sigemptyset(set);\n\tif (rc == -1) {\n\t\tsys_errno(\"sigemptyset()\");\n\t\trc = -errno;\n\t\treturn rc;\n\t}\n\n\treturn 0;\n}\n\nint sys_sigfillset(sigset_t *set)\n{\n\tint rc;\n\n\trc = sigfillset(set);\n\tif (rc == -1) {\n\t\tsys_errno(\"sigfillset()\");\n\t\trc = -errno;\n\t\treturn rc;\n\t}\n\n\treturn 0;\n}\n\nint sys_sigaddset(sigset_t *set, int sig)\n{\n\tint rc;\n\n\trc = sigaddset(set, sig);\n\tif (rc == -1) {\n\t\tsys_errno(\"sigaddset(%d (%s))\", sig, strsignal(sig));\n\t\trc = -errno;\n\t\treturn rc;\n\t}\n\n\treturn 0;\n}\n\nstatic int sys_sigprocmask(const sigset_t *set, int how)\n{\n\tint rc;\n\n\trc = sigprocmask(how, set, NULL);\n\tif (rc == -1) {\n\t\tsys_errno(\"sigprocmask()\");\n\t\trc = -errno;\n\t\treturn rc;\n\t}\n\n\treturn 0;\n}\n\nint sys_sigunblock(const sigset_t *set)\n{\n\treturn sys_sigprocmask(set, SIG_UNBLOCK);\n}\n\nint sys_sigsetmask(const sigset_t *set)\n{\n\treturn sys_sigprocmask(set, SIG_SETMASK);\n}\n\nint sys_sigwaitinfo(sigset_t *set, int *sig, int *fd)\n{\n\tsiginfo_t siginfo;\n\tint rc;\n\n\trc = sigwaitinfo(set, &siginfo);\n\tif (rc == -1) {\n\t\tsys_errno(\"sigwaitinfo()\");\n\t\trc = -errno;\n\t\treturn rc;\n\t}\n\n\t*sig = rc;\n\t*fd = siginfo.si_fd;\n\n\treturn 0;\n}\n\nint sys_open(const char *path, int *fd)\n{\n\tint rc;\n\n\trc = open(path, O_RDONLY | O_NONBLOCK);\n\tif (rc == -1) {\n\t\tsys_errno(\"open(%s)\", path);\n\t\trc = -errno;\n\t\treturn rc;\n\t}\n\n\t*fd = rc;\n\n\treturn 0;\n}\n\nint sys_close(int fd)\n{\n\tint rc;\n\n\trc = close(fd);\n\tif (rc == -1) {\n\t\tsys_errno(\"close(%d)\", fd);\n\t\trc = -errno;\n\t\treturn rc;\n\t}\n\n\treturn 0;\n}\n\n/* Read up to size bytes and store the positive count on success */\nint sys_read(int fd, void *buf, size_t size, size_t *count)\n{\n\tssize_t rc;\n\n\trc = read(fd, buf, size);\n\tif (rc == -1) {\n\t\tsys_errno(\"read(%d, %ld)\", fd, size);\n\t\trc = -errno;\n\t\tif (rc == -EWOULDBLOCK)\n\t\t\trc = -EAGAIN;\n\t\treturn rc;\n\t}\n\n\t/* End of file or pipe */\n\tif (rc == 0)\n\t\treturn -EAGAIN;\n\n\tif (count)\n\t\t*count = rc;\n\n\treturn 0;\n}\n\nint sys_dup(int fd1, int fd2)\n{\n\tint rc;\n\n\t/* Defensive check */\n\tif (fd1 == fd2)\n\t\treturn 0;\n\n\t/* Close fd2, and reopen bound to fd1 */\n\trc = dup2(fd1, fd2);\n\tif (rc == -1) {\n\t\tsys_errno(\"dup2(%d, %d)\", fd1, fd2);\n\t\trc = -errno;\n\t\treturn rc;\n\t}\n\n\treturn 0;\n}\n\nstatic int sys_setsig(int fd, int sig)\n{\n\tint rc;\n\n\trc = fcntl(fd, F_SETSIG, sig);\n\tif (rc == -1) {\n\t\tsys_errno(\"fcntl(%d, F_SETSIG, %d (%s))\", fd, sig,\n\t\t\t  strsignal(sig));\n\t\trc = -errno;\n\t\treturn rc;\n\t}\n\n\treturn 0;\n}\n\nstatic int sys_setown(int fd, pid_t pid)\n{\n\tint rc;\n\n\trc = fcntl(fd, F_SETOWN, pid);\n\tif (rc == -1) {\n\t\tsys_errno(\"fcntl(%d, F_SETOWN, %d)\", fd, pid);\n\t\trc = -errno;\n\t\treturn rc;\n\t}\n\n\treturn 0;\n}\n\nstatic int sys_getfd(int fd, int *flags)\n{\n\tint rc;\n\n\trc = fcntl(fd, F_GETFD);\n\tif (rc == -1) {\n\t\tsys_errno(\"fcntl(%d, F_GETFD)\", fd);\n\t\trc = -errno;\n\t\treturn rc;\n\t}\n\n\t*flags = rc;\n\n\treturn 0;\n}\n\nstatic int sys_setfd(int fd, int flags)\n{\n\tint rc;\n\n\trc = fcntl(fd, F_SETFD, flags);\n\tif (rc == -1) {\n\t\tsys_errno(\"fcntl(%d, F_SETFD, %d)\", fd, flags);\n\t\trc = -errno;\n\t\treturn rc;\n\t}\n\n\treturn 0;\n}\n\nstatic int sys_getfl(int fd, int *flags)\n{\n\tint rc;\n\n\trc = fcntl(fd, F_GETFL);\n\tif (rc == -1) {\n\t\tsys_errno(\"fcntl(%d, F_GETFL)\", fd);\n\t\trc = -errno;\n\t\treturn rc;\n\t}\n\n\t*flags = rc;\n\n\treturn 0;\n}\n\nstatic int sys_setfl(int fd, int flags)\n{\n\tint rc;\n\n\trc = fcntl(fd, F_SETFL, flags);\n\tif (rc == -1) {\n\t\tsys_errno(\"fcntl(%d, F_SETFL, %d)\", fd, flags);\n\t\trc = -errno;\n\t\treturn rc;\n\t}\n\n\treturn 0;\n}\n\nint sys_cloexec(int fd)\n{\n\tint flags;\n\tint err;\n\n\terr = sys_getfd(fd, &flags);\n\tif (err)\n\t\treturn err;\n\n\treturn sys_setfd(fd, flags | FD_CLOEXEC);\n}\n\n/* Enable signal-driven I/O, formerly known as asynchronous I/O */\nint sys_async(int fd, int sig)\n{\n\tpid_t pid;\n\tint flags;\n\tint err;\n\n\terr = sys_getfl(fd, &flags);\n\tif (err)\n\t\treturn err;\n\n\tif (sig) {\n    \t\tpid = getpid();\n\t\tflags |= (O_ASYNC | O_NONBLOCK);\n\t} else {\n    \t\tpid = 0;\n\t\tflags &= ~(O_ASYNC | O_NONBLOCK);\n\t}\n\n\t/* Establish a handler for the signal */\n\terr = sys_setsig(fd, sig);\n\tif (err)\n\t\treturn err;\n\n\t/* Set calling process as owner, that is to receive the signal */\n\terr = sys_setown(fd, pid);\n\tif (err)\n\t\treturn err;\n\n\t/* Enable/disable nonblocking I/O and signal-driven I/O */\n\treturn sys_setfl(fd, flags);\n}\n\nint sys_pipe(int *fds)\n{\n\tint rc;\n\n\trc = pipe(fds);\n\tif (rc == -1) {\n\t\tsys_errno(\"pipe()\");\n\t\trc = -errno;\n\t\treturn rc;\n\t}\n\n\treturn 0;\n}\n\nint sys_fork(pid_t *pid)\n{\n\tint rc;\n\n\trc = fork();\n\tif (rc == -1) {\n\t\tsys_errno(\"fork()\");\n\t\trc = -errno;\n\t\treturn rc;\n\t}\n\n\t*pid = rc;\n\n\treturn 0;\n}\n\nvoid sys_exit(int status)\n{\n\t_exit(status);\n}\n\nint sys_execsh(const char *command)\n{\n\tint rc;\n\n\tstatic const char * const shell = \"/bin/sh\";\n\n\trc = execl(shell, shell, \"-c\", command, (char *) NULL);\n\tif (rc == -1) {\n\t\tsys_errno(\"execl(%s -c \\\"%s\\\")\", shell, command);\n\t\trc = -errno;\n\t\treturn rc;\n\t}\n\n\t/* Unreachable */\n\treturn 0;\n}\n\nint sys_isatty(int fd)\n{\n\tint rc;\n\n\trc = isatty(fd);\n\tif (rc == 0) {\n\t\tsys_errno(\"isatty(%d)\", fd);\n\t\trc = -errno;\n\t\tif (rc == -EINVAL)\n\t\t\trc = -ENOTTY;\n\t\treturn rc;\n\t}\n\n\treturn 0;\n}\n"
        },
        {
          "name": "sys.h",
          "type": "blob",
          "size": 1.6904296875,
          "content": "/*\n * sys.h - system calls\n * Copyright (C) 2017-2019  Vivien Didelot\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n#ifndef SYS_H\n#define SYS_H\n\n#include <signal.h>\n#include <unistd.h>\n\nint sys_chdir(const char *path);\n\nint sys_gettime(unsigned long *interval);\nint sys_setitimer(unsigned long interval);\n\nint sys_waitid(pid_t *pid);\nint sys_waitpid(pid_t pid, int *code);\nint sys_waitanychild(void);\n\nint sys_setenv(const char *name, const char *value);\nconst char *sys_getenv(const char *name);\n\nint sys_sigemptyset(sigset_t *set);\nint sys_sigfillset(sigset_t *set);\nint sys_sigaddset(sigset_t *set, int sig);\nint sys_sigunblock(const sigset_t *set);\nint sys_sigsetmask(const sigset_t *set);\nint sys_sigwaitinfo(sigset_t *set, int *sig, int *fd);\n\nint sys_open(const char *path, int *fd);\nint sys_close(int fd);\nint sys_read(int fd, void *buf, size_t size, size_t *count);\nint sys_dup(int fd1, int fd2);\nint sys_cloexec(int fd);\nint sys_async(int fd, int sig);\n\nint sys_pipe(int *fds);\nint sys_fork(pid_t *pid);\nvoid sys_exit(int status);\nint sys_execsh(const char *command);\n\nint sys_isatty(int fd);\n\n#endif /* SYS_H */\n"
        },
        {
          "name": "term.h",
          "type": "blob",
          "size": 1.0400390625,
          "content": "/*\n * term.h - terminal output handling functions\n * Copyright (C) 2014-2019  Vivien Didelot\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n#ifndef TERM_H\n#define TERM_H\n\n#include <stdio.h>\n\nstatic inline void term_save_cursor(void)\n{\n\tfprintf(stdout, \"\\033[s\\033[?25l\");\n}\n\nstatic inline void term_restore_cursor(void)\n{\n\tfprintf(stdout, \"\\033[u\\033[K\");\n}\n\nstatic inline void term_reset_cursor(void)\n{\n\tfprintf(stdout, \"\\033[?25h\");\n}\n\n#endif /* TERM_H */\n"
        }
      ]
    }
  ]
}