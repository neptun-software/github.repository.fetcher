{
  "metadata": {
    "timestamp": 1736710214472,
    "page": 930,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "espressif/esp-adf",
      "stars": 1609,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.5810546875,
          "content": "# EditorConfig helps developers define and maintain consistent\n# coding styles between different editors and IDEs\n# http://editorconfig.org\n\nroot = true\n\n[*]\nindent_style = space\nindent_size = 4\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[{*.md,*.rst}]\ntrim_trailing_whitespace = false\n\n[{Makefile,*.mk,*.bat}]\nindent_style = tab\nindent_size = 2\n\n[*/freertos/**]\nindent_style = tab\nindent_size = 4\n\n[{*/freertos/**.S,**/FreeRTOSConfig.h}]\nindent_style = space\nindent_size = 4\n\n[*.pem]\ninsert_final_newline = false\n\n[*.py]\nmax_line_length = 119\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.693359375,
          "content": ".config\n*.o\n*.pyc\n\n# gtags\nGTAGS\nGRTAGS\nGPATH\n\n# emacs\n.dir-locals.el\n\n# emacs temp file suffixes\n*~\n.#*\n\\#*#\n# MacOS directory files\n.DS_Store\n\n# eclipse setting\n.settings\n\n# Example project files\nexamples/**/sdkconfig\nexamples/**/sdkconfig.old\nexamples/**/build\nexamples/**/managed_components\nexamples/**/dependencies.lock\n\n# Doc build artifacts\ndocs/_build/\ndocs/*/_build/\ndocs/*/doxygen-warning-log.txt\ndocs/*/sphinx-warning-log.txt\ndocs/*/sphinx-warning-log-sanitized.txt\ndocs/*/xml/\ndocs/*/xml_in/\ndocs/*/man/\ndocs/*/doxygen_sqlite3.db\n\n# Downloaded font files\ndocs/_static/DejaVuSans.ttf\ndocs/_static/NotoSansSC-Regular.otf\n\n# gcov coverage reports\n*.gcda\n*.gcno\ncoverage.info\ncoverage_report/\n\n.vscode\n"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 2.5693359375,
          "content": "stages:\n  - pre_check\n  - build\n  - target_test\n  - test_deploy\n  - deploy\n  - post_deploy\n\nvariables:\n  # System environment\n  # Common parameters for the 'make' during CI tests\n  MAKEFLAGS: \"-j5 --no-keep-going\"\n  # more attempts for more robust\n  GET_SOURCES_ATTEMPTS: \"10\"\n  ARTIFACT_DOWNLOAD_ATTEMPTS: \"10\"\n  GIT_STRATEGY: clone\n  GIT_SUBMODULE_STRATEGY: none\n  ADF_PATH: \"$CI_PROJECT_DIR\"\n  IDF_PATH: \"$CI_PROJECT_DIR/esp-idf\"\n  ADF_TEST_PACKAGE_PATH: \"${ADF_PATH}/tools/adf_test_package\"\n  CI_TARGET_UT_TEST_CONFIG_FILE: \"$CI_PROJECT_DIR/.gitlab/ci/target-ut-test.yml\"\n  CI_TARGET_TEST_CONFIG_FILE: \"$CI_PROJECT_DIR/.gitlab/ci/target-test.yml\"\n  IDF_SKIP_CHECK_SUBMODULES: 1\n  GIT_DEPTH: 1\n\n.execute_submodules: &execute_submodules |\n  if [[ \"$DEEP_CLONE\" == \"true\" ]]; then\n    git submodule update --init;\n  else\n    git -c submodule.\"esp-idf\".update=none submodule update --init;\n    git submodule | grep esp-idf;\n    export ORIG_HEAD=`git submodule | grep \"esp-idf\" | sed -r 's/-(.*) esp-idf/\\1/g' | awk '{print $1}'`;\n    echo ${ORIG_HEAD};\n    rm esp-idf -rf; mkdir esp-idf;\n    cd esp-idf; git init;\n    git remote add origin ${GITLAB_SSH_SERVER}/idf/esp-idf.git;\n    git fetch origin ${ORIG_HEAD}:${ORIG_HEAD} --depth 1;\n    git checkout ${ORIG_HEAD};\n    cd -;\n  fi\n\nbefore_script:\n  - source $ADF_PATH/tools/ci/utils.sh\n  - add_gitlab_ssh_keys\n  # replace submodule to internal repository to speedup cloning\n  - update_submodule_remote\n  - *execute_submodules\n  # To disable set -e for automatic error detection, due to the switch_branch.sh use $? check return value\n  - source $ADF_PATH/tools/ci/switch_branch.sh\n  # - source esp-idf/tools/ci/configure_ci_environment.sh\n\npush_to_github:\n  stage: deploy\n  rules:\n    - if:\n        '($CI_COMMIT_REF_NAME == \"master\" ||\n        $CI_COMMIT_BRANCH =~ /^release\\/v/ ||\n        $CI_COMMIT_TAG =~ /^v\\d+\\.\\d+(\\.\\d+)?($|-)/) &&\n        $CI_PIPELINE_SOURCE != \"schedule\"'\n  when: on_success\n  image: $CI_DOCKER_REGISTRY/esp32-ci-env\n  variables:\n    GIT_STRATEGY: clone\n  before_script:\n    - echo \"skip default before_script\"\n  script:\n    - source $ADF_PATH/tools/ci/utils.sh\n    - add_github_ssh_keys\n    - git fetch --unshallow\n    - git remote remove github &>/dev/null || true\n    - git remote add github git@github.com:espressif/esp-adf.git\n    - tools/ci/push_to_github.sh\n\ninclude:\n  - '.gitlab/ci/rules.yml'\n  - '.gitlab/ci/docs.yml'\n  - '.gitlab/ci/pre-check.yml'\n  - '.gitlab/ci/build-ut.yml'\n  - '.gitlab/ci/build-examples-v5-x.yml'\n  - '.gitlab/ci/build-micropython-adf.yml'\n  - '.gitlab/ci/target-ut-test.yml'\n  - '.gitlab/ci/target-examples-test-v5-x.yml'\n"
        },
        {
          "name": ".gitlab",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.298828125,
          "content": "[submodule \"esp-idf\"]\n\tpath = esp-idf\n\turl = https://github.com/espressif/esp-idf\n[submodule \"components/esp-adf-libs\"]\n\tpath = components/esp-adf-libs\n\turl = https://github.com/espressif/esp-adf-libs\n[submodule \"components/esp-sr\"]\n\tpath = components/esp-sr\n\turl = https://github.com/espressif/esp-sr.git\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 0.4033203125,
          "content": "execute_process(COMMAND git describe --always --tags --dirty\n                OUTPUT_VARIABLE ADF_VER\n                OUTPUT_STRIP_TRAILING_WHITESPACE\n                WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR})\nadd_definitions(-DADF_VER=\\\"${ADF_VER}\\\")\n\nif(NOT DEFINED ENV{IDF_PATH})\nset(ENV{IDF_PATH} \"$ENV{ADF_PATH}/esp-idf/\")\nendif()\nset(EXTRA_COMPONENT_DIRS ${EXTRA_COMPONENT_DIRS} $ENV{ADF_PATH}/components)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1640625,
          "content": "\n ESPRESSIF MIT License\n \n Copyright (c) 2018 <ESPRESSIF SYSTEMS (SHANGHAI) PTE LTD>\n \n Permission is hereby granted for use on all ESPRESSIF SYSTEMS products, in which case,\n it is free of charge, to any person obtaining a copy of this software and associated\n documentation files (the \"Software\"), to deal in the Software without restriction, including\n without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\n and/or sell copies of the Software, and to permit persons to whom the Software is furnished\n to do so, subject to the following conditions:\n \n The above copyright notice and this permission notice shall be included in all copies or\n substantial portions of the Software.\n \n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n \n "
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.560546875,
          "content": "# Espressif Audio Development Framework\n\n[![Documentation Status](./docs/_static/doc_latest.svg)](https://docs.espressif.com/projects/esp-adf/en/latest/?badge=latest)\n\nEspressif Systems Audio Development Framework (ESP-ADF) is the official audio development framework for the [ESP32](https://espressif.com/en/products/hardware/esp32/overview), [ESP32-S2](https://www.espressif.com/en/products/socs/esp32-s2), [ESP32-C3](https://www.espressif.com/en/products/socs/esp32-c3), [ESP32-C6](https://www.espressif.com/en/products/socs/esp32-c6), [ESP32-S3](https://www.espressif.com/en/products/socs/esp32-s3), and [ESP32-P4](https://www.espressif.com/en/products/socs/esp32-p4) SoCs.\n\n## Overview\n\nESP-ADF supports development of audio applications for the Espressif Systems SoCs in the most comprehensive way. With ESP-ADF, you can easily add features, develop audio and video applications from simple to complex:\n\n- Music player or recorder supports audio formats such as MP3, AAC, FLAC, WAV, OGG, OPUS, AMR, TS, EQ, Downmixer, Sonic, ALC, G.711 and etc.\n- Play music from sources: HTTP, HLS (HTTP Live Streaming), SPIFFS, SDCARD, A2DP-Source, A2DP-Sink, HFP and etc.\n- Integrate media protocols, such as: DLNA, VoIP, RMTP, ESP-RTC (SIP, RTSP, and RTCP), etc.\n- Video call, video recording and video live streaming\n- Internet Radio\n- Voice recognition and integration with online services such as Alexa, DuerOS and etc.\n\nAs a general, the ESP-ADF features will be supported as shown below:\n\n<div align=\"center\"><img src=\"docs/_static/adf_block_diagram.png\" alt =\"ADF Block Diagram\" align=\"center\" /></div>\n\n## Developing with the ESP-ADF\n\n### IDF Version\n\nThe following table shows the ESP-IDF versions supported by ESP-ADF at the current time. The label ![alt text](docs/_static/yes-checkm.png \"supported\") means supported, and the label ![alt text](docs/_static/no-icon.png) means not supported.\n\nThe ESP-IDF master branch is marked as not supported because the major feature changes it has introduced may cause conflicts with ESP-ADF. Yet, the ADF examples not affected by those feature changes can still run correctly on the IDF master branch.\n\nEnd of Life IDF branches are removed. See [IDF Supported Periods](https://docs.espressif.com/projects/esp-idf/en/latest/esp32/versions.html#support-periods) for details.\n\n\n|                       | ESP-IDF <br> [Release/v5.0](https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.0/esp32/versions.html) | ESP-IDF <br> [Release/v5.1](https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/versions.html) |  ESP-IDF <br> [Release/v5.2](https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.2/esp32/versions.html) |  ESP-IDF <br> [Release/v5.3](https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.3/esp32/versions.html) | ESP-IDF <br> [Master](https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/versions.html) |\n|:----------- | :---------------------:|:---------------------: | :---------------------:| :---------------------:| :---------------------:|\n| ESP-ADF <br> Master | ![alt text](docs/_static/yes-checkm.png \"supported\") | ![alt text](docs/_static/yes-checkm.png \"supported\") | ![alt text](docs/_static/yes-checkm.png \"supported\") | ![alt text](docs/_static/yes-checkm.png \"supported\") | ![alt text](docs/_static/no-icon.png \"not supported\") |\n| ESP-ADF <br> Release/v2.7  | ![alt text](docs/_static/yes-checkm.png \"supported\") | ![alt text](docs/_static/yes-checkm.png \"supported\") | ![alt text](docs/_static/yes-checkm.png \"supported\") | ![alt text](docs/_static/yes-checkm.png \"supported\") | ![alt text](docs/_static/no-icon.png \"not supported\") |\n| ESP-ADF <br> Release/v2.6  | ![alt text](docs/_static/yes-checkm.png \"supported\")| ![alt text](docs/_static/yes-checkm.png \"supported\") |![alt text](docs/_static/no-icon.png \"not supported\") | ![alt text](docs/_static/no-icon.png \"not supported\") | ![alt text](docs/_static/no-icon.png \"not supported\") |\n\n\n\n### Quick Start\n\nYou need one of ESP-IDF versions described in [ESP-ADF Releases](https://github.com/espressif/esp-adf/releases), one of audio boards below and headphones.\n\n**Note:**  If this is your first exposure to ESP-IDF, proceed to **Getting Started** documentation specific for [ESP32](https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/index.html), [ESP32-S2](https://docs.espressif.com/projects/esp-idf/en/latest/esp32s2/get-started/index.html),  [ESP32-S3](https://docs.espressif.com/projects/esp-idf/en/latest/esp32s3/index.html) or [ESP32-P4](https://docs.espressif.com/projects/esp-idf/en/latest/esp32p4/index.html) SoCs.\n\nClick on one of the audio boards shown below to set up and use the ESP-ADF [getting-started](https://docs.espressif.com/projects/esp-adf/en/latest/get-started/index.html) guide.\n\n### Hardware\n\nEspressif Systems has released a number of boards for ESP-ADF to develop audio applications. Click the links below to learn more information on each board.\n\nIt is recommended to use the ESP-ADF master branch, as it has the latest bugfixes and the new features.\n\n|                       | [ESP32-LyraT-Mini](https://docs.espressif.com/projects/esp-adf/en/latest/design-guide/dev-boards/get-started-esp32-lyrat-mini.html) |[ESP32-S3-Korvo-2](https://docs.espressif.com/projects/esp-adf/en/latest/design-guide/dev-boards/user-guide-esp32-s3-korvo-2.html)|[ESP32-C3-Lyra](https://docs.espressif.com/projects/esp-adf/en/latest/design-guide/dev-boards/user-guide-esp32-c3-lyra.html)| [ESP32-S3-Box Series](https://github.com/espressif/esp-box/tree/master)| [ESP32-P4-Function-EV-Board](https://docs.espressif.com/projects/esp-dev-kits/en/latest/esp32p4/esp32-p4-function-ev-board/index.html)|\n|:----------- | :---------------------:| :---------------------:| :---------------------:| :---------------------:| :---------------------:|\n|  |  [<img src=\"docs/_static/esp32-lyrat-mini-v1.2.png\" width=\"110\" alt =\"ESP32-LyraT-Mini Development Board\" align=\"center\" />](https://docs.espressif.com/projects/esp-adf/en/latest/get-started/get-started-esp32-lyrat-mini.html)  |  [<img src=\"docs/_static/esp32-s3-korvo-2-v3.0-overview.png\" width=\"120\" alt =\"ESP32-S3-Korvo-2 Development Board\" align=\"center\" />](https://docs.espressif.com/projects/esp-adf/en/latest/get-started/user-guide-esp32-s3-korvo-2.html)  |  [<img src=\"docs/_static/esp32-c3-lyra-v2.0-small.png\" width=\"120\" alt =\"ESP32-C3-Lyra Development Board\" align=\"center\" />](https://docs.espressif.com/projects/esp-adf/en/latest/design-guide/dev-boards/user-guide-esp32-c3-lyra.html) |  [<img src=\"docs/_static/esp32_s3_box_3.jpg\" width=\"100\" alt =\"ESP32-S3-Box Development Board\" align=\"center\" />](https://github.com/espressif/esp-box/tree/master) | [<img src=\"docs/_static/esp32-p4-function-ev-board.jpg\" width=\"100\" alt =\"\" align=\"center\" />](https://docs.espressif.com/projects/esp-dev-kits/en/latest/esp32p4/esp32-p4-function-ev-board/index.html) |\n| ESP-ADF Master        | ![alt text](docs/_static/yes-checkm.png) | ![alt text](docs/_static/yes-checkm.png) | ![alt text](docs/_static/yes-checkm.png) | ![alt text](docs/_static/yes-checkm.png) <sup> **1** </sup> | ![alt text](docs/_static/yes-checkm.png) |\n| ESP-ADF Release/v2.7  | ![alt text](docs/_static/yes-checkm.png) | ![alt text](docs/_static/yes-checkm.png) | ![alt text](docs/_static/yes-checkm.png) | ![alt text](docs/_static/yes-checkm.png) <sup> **1** </sup> | ![alt text](docs/_static/yes-checkm.png) |\n| ESP-ADF Release/v2.6  | ![alt text](docs/_static/yes-checkm.png) | ![alt text](docs/_static/yes-checkm.png) | ![alt text](docs/_static/yes-checkm.png) | ![alt text](docs/_static/yes-checkm.png) <sup> **1** </sup> | ![alt text](docs/_static/no-icon.png) |\n\n**Note 1:** For the development board of [esp-box series](https://github.com/espressif/esp-box), only [esp32-s3-box](https://github.com/espressif/esp-box/blob/master/docs/hardware_overview/esp32_s3_box/hardware_overview_for_box.md) and [esp32-s3-box-lite](https://github.com/espressif/esp-box/blob/master/docs/hardware_overview/esp32_s3_box_lite/hardware_overview_for_lite.md) are supported in *ESP-ADF*.\n\nThe following boards have reached their **end of life**.\n| [ESP32-LyraT](https://docs.espressif.com/projects/esp-adf/en/latest/design-guide/dev-boards/get-started-esp32-lyrat.html) | [ESP32-LyraTD-MSC](https://docs.espressif.com/projects/esp-adf/en/latest/design-guide/dev-boards/get-started-esp32-lyratd-msc.html) | [ESP32-Korvo-DU1906](https://docs.espressif.com/projects/esp-adf/en/latest/design-guide/dev-boards/get-started-esp32-korvo-du1906.html) | [ESP32-S2-Kaluga-1 Kit](https://docs.espressif.com/projects/esp-idf/en/latest/esp32s2/hw-reference/esp32s2/user-guide-esp32-s2-kaluga-1-kit.html)|\n|:---------------------: | :---------------------:| :---------------------:|:---------------------: |\n|  [<img src=\"docs/_static/esp32-lyrat-v4.2-side.jpg\" width=\"120\" alt =\"ESP32-LyraT Development Board\" align=\"center\" />](https://docs.espressif.com/projects/esp-adf/en/latest/get-started/get-started-esp32-lyrat.html) |  [<img src=\"docs/_static/esp32-lyratd-msc-v2.2.jpg\" width=\"120\" alt =\"ESP32-LyraTD-MSC Development Board\" align=\"center\" />](https://docs.espressif.com/projects/esp-adf/en/latest/get-started/get-started-esp32-lyratd-msc.html) |  [<img src=\"docs/_static/esp32-korvo-du1906-v1.1.png\" width=\"110\" alt =\"ESP32-Korvo-DU1906 Development Board\" align=\"center\" />](https://docs.espressif.com/projects/esp-adf/en/latest/get-started/get-started-esp32-korvo-du1906.html) |  [<img src=\"docs/_static/esp32-s2-kaluga-1-kit.png\" width=\"100\" alt =\"ESP32-LyraT-Mini Development Board\" align=\"center\" />](https://docs.espressif.com/projects/esp-idf/en/latest/esp32s2/hw-reference/esp32s2/user-guide-esp32-s2-kaluga-1-kit.html) |\n\n\n[supported]: https://img.shields.io/badge/-supported-green \"supported\"\n[not supported]: https://img.shields.io/badge/-not%20supported-orange \"not supported\"\n\n\n\n#### Examples\n\nCheck folder [examples](examples) that contains sample applications to demonstrate API features of the ESP-ADF.\n\n# Resources\n\n* [Documentation](https://docs.espressif.com/projects/esp-adf/en/latest/index.html) for the latest version of https://docs.espressif.com/projects/esp-adf/. This documentation is built from the [docs directory](docs) of this repository.\n* The [esp32.com forum](https://esp32.com/) is a place to ask questions and find community resources. On the forum there is a [section dedicated to ESP-ADF](https://esp32.com/viewforum.php?f=20) users.\n* [Check the Issues section on github](https://github.com/espressif/esp-adf/issues) if you find a bug or have a feature request. Please check existing Issues before opening a new one.\n* If you're interested in contributing to ESP-ADF, please check the [Contributions Guide](https://esp-idf.readthedocs.io/en/latest/contribute/index.html).\n"
        },
        {
          "name": "components",
          "type": "tree",
          "content": null
        },
        {
          "name": "conftest.py",
          "type": "blob",
          "size": 11.8681640625,
          "content": "# SPDX-FileCopyrightText: 2022-2023 Espressif Systems (Shanghai) CO LTD\n#\n# SPDX-License-Identifier: Apache-2.0\n\nimport logging\nimport os\nimport pathlib\nimport re\nimport sys\nfrom datetime import datetime\nfrom typing import Callable, List, Optional, Tuple\n\nimport pytest\nfrom _pytest.nodes import Item\nfrom pytest import Config, FixtureRequest, Function, Session\nfrom pytest_embedded.plugin import multi_dut_argument, multi_dut_fixture\n\nIDF_VERSION = os.environ.get('IDF_VERSION')\nPYTEST_ROOT_DIR = str(pathlib.Path(__file__).parent)\nlogging.info(f'Pytest root dir: {PYTEST_ROOT_DIR}')\n\n\nSUPPORTED_TARGETS = ['esp32', 'esp32s2', 'esp32c3', 'esp32s3', 'esp32c2', 'esp32c6', 'esp32h2']\nPREVIEW_TARGETS: List[str] = []  # this PREVIEW_TARGETS excludes 'linux' target\nDEFAULT_SDKCONFIG = 'default'\n\nTARGET_MARKERS = {\n    'esp32': 'support esp32 target',\n    'esp32s2': 'support esp32s2 target',\n    'esp32s3': 'support esp32s3 target',\n    'esp32c3': 'support esp32c3 target',\n    'esp32c2': 'support esp32c2 target',\n    'esp32c6': 'support esp32c6 target',\n    'esp32h2': 'support esp32h2 target',\n    'linux': 'support linux target',\n}\n\nSPECIAL_MARKERS = {\n    'supported_targets': \"support all officially announced supported targets ('esp32', 'esp32s2', 'esp32c3', 'esp32s3', 'esp32c2', 'esp32c6')\",\n    'preview_targets': \"support all preview targets ('none')\",\n    'all_targets': 'support all targets, including supported ones and preview ones',\n    'temp_skip_ci': 'temp skip tests for specified targets only in ci',\n    'temp_skip': 'temp skip tests for specified targets both in ci and locally',\n    'nightly_run': 'tests should be executed as part of the nightly trigger pipeline',\n    'host_test': 'tests which should not be built at the build stage, and instead built in host_test stage',\n    'qemu': 'build and test using qemu-system-xtensa, not real target',\n}\n\nENV_MARKERS = {\n    'ADF_EXAMPLE_GENERIC': 'Tests should be run on ADF_EXAMPLE_GENERIC runners.',\n    'UT_T1_AUDIO': 'Tests should be run on UT_T1_AUDIO runners.',\n    'UT_T1_AUDIO_L1': 'Tests should be run on UT_T1_AUDIO_L1 runners.',\n    'UT_T1_AUDIO_L2': 'Tests should be run on UT_T1_AUDIO_L2 runners.',\n    'UT_T1_AUDIO_L3': 'Tests should be run on UT_T1_AUDIO_L3 runners.',\n    'UT_T1_AUDIO_L4': 'Tests should be run on UT_T1_AUDIO_L4 runners.',\n    'UT_T1_AUDIO_L5': 'Tests should be run on UT_T1_AUDIO_L5 runners.',\n    'UT_T1_AUDIO_E6': 'Tests should be run on UT_T1_AUDIO_E6 runners.',\n}\n\n##################\n# Help Functions #\n##################\ndef format_case_id(target: Optional[str], config: Optional[str], case: str) -> str:\n    return f'{target}.{config}.{case}'\n\n\ndef item_marker_names(item: Item) -> List[str]:\n    return [marker.name for marker in item.iter_markers()]\n\n\ndef item_skip_targets(item: Item) -> List[str]:\n    def _get_temp_markers_disabled_targets(marker_name: str) -> List[str]:\n        temp_marker = item.get_closest_marker(marker_name)\n\n        if not temp_marker:\n            return []\n\n        # temp markers should always use keyword arguments `targets` and `reason`\n        if not temp_marker.kwargs.get('targets') or not temp_marker.kwargs.get('reason'):\n            raise ValueError(\n                f'`{marker_name}` should always use keyword arguments `targets` and `reason`. '\n                f'For example: '\n                f'`@pytest.mark.{marker_name}(targets=[\"esp32\"], reason=\"IDF-xxxx, will fix it ASAP\")`'\n            )\n\n        return to_list(temp_marker.kwargs['targets'])  # type: ignore\n\n    temp_skip_ci_targets = _get_temp_markers_disabled_targets('temp_skip_ci')\n    temp_skip_targets = _get_temp_markers_disabled_targets('temp_skip')\n\n    # in CI we skip the union of `temp_skip` and `temp_skip_ci`\n    if os.getenv('CI_JOB_ID'):\n        skip_targets = list(set(temp_skip_ci_targets).union(set(temp_skip_targets)))\n    else:  # we use `temp_skip` locally\n        skip_targets = temp_skip_targets\n\n    return skip_targets\n\n\n@pytest.fixture(scope='session', autouse=True)\ndef idf_version() -> str:\n    if os.environ.get('IDF_VERSION'):\n        return os.environ.get('IDF_VERSION')\n    idf_path = os.environ.get('IDF_PATH')\n    if not idf_path:\n        logging.warning('Failed to get IDF_VERSION!')\n        return ''\n    version_path = os.path.join(os.environ['IDF_PATH'], 'tools/cmake/version.cmake')\n    regex = re.compile(r'^\\s*set\\s*\\(\\s*IDF_VERSION_([A-Z]{5})\\s+(\\d+)')\n    ver = {}\n    with open(version_path) as f:\n        for line in f:\n            m = regex.match(line)\n            if m:\n                ver[m.group(1)] = m.group(2)\n    return '{}.{}'.format(int(ver['MAJOR']), int(ver['MINOR']))\n\n\n@pytest.fixture(scope='session', autouse=True)\ndef session_tempdir() -> str:\n    _tmpdir = os.path.join(\n        os.path.dirname(__file__),\n        'pytest_log',\n        datetime.now().strftime('%Y-%m-%d_%H-%M-%S'),\n    )\n    os.makedirs(_tmpdir, exist_ok=True)\n    return _tmpdir\n\n\n@pytest.fixture\n@multi_dut_argument\ndef config(request: FixtureRequest) -> str:\n    config_marker = list(request.node.iter_markers(name='config'))\n    return config_marker[0].args[0] if config_marker else 'default'\n\n\n@pytest.fixture\n@multi_dut_argument\ndef app_path(request: FixtureRequest, test_file_path: str) -> str:\n    config_marker = list(request.node.iter_markers(name='app_path'))\n    if config_marker:\n        return config_marker[0].args[0]\n    else:\n        # compatible with old pytest-embedded parametrize --app_path\n        return request.config.getoption('app_path', None) or os.path.dirname(test_file_path)\n\n\n@pytest.fixture\ndef test_case_name(request: FixtureRequest, target: str, config: str) -> str:\n    if not isinstance(target, str):\n        target = '|'.join(sorted(list(set(target))))\n    if not isinstance(config, str):\n        config = '|'.join(sorted(list(config)))\n    return f'{target}.{config}.{request.node.originalname}'\n\n\n@pytest.fixture\n@multi_dut_fixture\ndef build_dir(\n    app_path: str,\n    target: Optional[str],\n    config: Optional[str],\n    idf_version: str\n) -> Optional[str]:\n    \"\"\"\n    Check local build dir with the following priority:\n\n    1. <app_path>/${IDF_VERSION}/build_<target>_<config>\n    2. <app_path>/${IDF_VERSION}/build_<target>\n    3. <app_path>/build_<target>_<config>\n    4. <app_path>/build\n    5. <app_path>\n\n    Args:\n        app_path: app path\n        target: target\n        config: config\n\n    Returns:\n        valid build directory\n    \"\"\"\n\n    assert target\n    assert config\n    check_dirs = []\n    if idf_version:\n        check_dirs.append(os.path.join(idf_version, f'build_{target}_{config}'))\n        check_dirs.append(os.path.join(idf_version, f'build_{target}'))\n    check_dirs.append(f'build_{target}_{config}')\n    check_dirs.append(f'build_{target}_{config}s')\n    check_dirs.append('build')\n    check_dirs.append('.')\n    for check_dir in check_dirs:\n        binary_path = os.path.join(app_path, check_dir)\n        if os.path.isdir(binary_path):\n            logging.info(f'find valid binary path: {binary_path}')\n            return check_dir\n\n        logging.warning(\n            f'checking binary path: {binary_path} ... missing ... try another place')\n\n    logging.error(\n        f'no build dir. Please build the binary \"python tools/build_apps.py {app_path}\" and run pytest again')\n    sys.exit(1)\n\n\n@pytest.fixture(autouse=True)\n@multi_dut_fixture\ndef junit_properties(\n    test_case_name: str, record_xml_attribute: Callable[[str, object], None]\n) -> None:\n    \"\"\"\n    This fixture is autoused and will modify the junit report test case name to <target>.<config>.<case_name>\n    \"\"\"\n    record_xml_attribute('name', test_case_name)\n\n\n##################\n# Hook functions #\n##################\n_idf_pytest_embedded_key = pytest.StashKey['IdfPytestEmbedded']\n\n\ndef pytest_addoption(parser: pytest.Parser) -> None:\n    base_group = parser.getgroup('idf')\n    base_group.addoption(\n        '--env',\n        help='only run tests matching the environment NAME.',\n    )\n\n\ndef pytest_configure(config: Config) -> None:\n    # Require cli option \"--target\"\n    help_commands = ['--help', '--fixtures', '--markers', '--version']\n    for cmd in help_commands:\n        if cmd in config.invocation_params.args:\n            target = 'unneeded'\n            break\n        else:\n            target = config.getoption('target')\n    if not target:\n        raise ValueError('Please specify one target marker via \"--target [TARGET]\"')\n\n    config.stash[_idf_pytest_embedded_key] = IdfPytestEmbedded(\n        target=target,\n        env_name=config.getoption('env'),\n    )\n    config.pluginmanager.register(config.stash[_idf_pytest_embedded_key])\n\n    for name, description in {**TARGET_MARKERS, **ENV_MARKERS, **SPECIAL_MARKERS}.items():\n        config.addinivalue_line('markers', f'{name}: {description}')\n\ndef pytest_unconfigure(config: Config) -> None:\n    _pytest_embedded = config.stash.get(_idf_pytest_embedded_key, None)\n    if _pytest_embedded:\n        del config.stash[_idf_pytest_embedded_key]\n        config.pluginmanager.unregister(_pytest_embedded)\n\n\nclass IdfPytestEmbedded:\n    def __init__(\n        self,\n        target: Optional[str] = None,\n        env_name: Optional[str] = None,\n    ):\n        # CLI options to filter the test cases\n        self.target = target\n        self.env_name = env_name\n\n        self._failed_cases: List[\n            Tuple[str, bool, bool]\n        ] = []  # (test_case_name, is_known_failure_cases, is_xfail)\n\n    @pytest.hookimpl(tryfirst=True)\n    def pytest_sessionstart(self, session: Session) -> None:\n        if self.target:\n            self.target = self.target.lower()\n            session.config.option.target = self.target\n\n    @pytest.hookimpl(tryfirst=True)\n    def pytest_collection_modifyitems(self, items: List[Function]) -> None:\n        # sort by file path and callspec.config\n        # implement like this since this is a limitation of pytest, couldn't get fixture values while collecting\n        # https://github.com/pytest-dev/pytest/discussions/9689\n        # after sort the test apps, the test may use the app cache to reduce the flash times.\n        def _get_param_config(_item: Function) -> str:\n            if hasattr(_item, 'callspec'):\n                return _item.callspec.params.get('config', DEFAULT_SDKCONFIG)  # type: ignore\n            return DEFAULT_SDKCONFIG\n\n        items.sort(key=lambda x: (os.path.dirname(x.path), _get_param_config(x)))\n\n        # set default timeout 10 minutes for each case\n        for item in items:\n            if 'timeout' not in item.keywords:\n                item.add_marker(pytest.mark.timeout(10 * 60))\n\n        # add markers for special markers\n        for item in items:\n            if 'supported_targets' in item.keywords:\n                for _target in SUPPORTED_TARGETS:\n                    item.add_marker(_target)\n            if 'preview_targets' in item.keywords:\n                for _target in PREVIEW_TARGETS:\n                    item.add_marker(_target)\n            if 'all_targets' in item.keywords:\n                for _target in [*SUPPORTED_TARGETS, *PREVIEW_TARGETS]:\n                    item.add_marker(_target)\n\n            # add 'xtal_40mhz' tag as a default tag for esp32c2 target\n            # only add this marker for esp32c2 cases\n            if (\n                self.target == 'esp32c2'\n                and 'esp32c2' in item_marker_names(item)\n                and 'xtal_26mhz' not in item_marker_names(item)\n            ):\n                item.add_marker('xtal_40mhz')\n\n        # filter all the test cases with \"nightly_run\" marker\n        if os.getenv('INCLUDE_NIGHTLY_RUN') == '1':\n            # Do not filter nightly_run cases\n            pass\n        elif os.getenv('NIGHTLY_RUN') == '1':\n            items[:] = [item for item in items if 'nightly_run' in item_marker_names(item)]\n        else:\n            items[:] = [item for item in items if 'nightly_run' not in item_marker_names(item)]\n\n        # filter all the test cases with target and skip_targets\n        items[:] = [\n            item\n            for item in items\n            if self.target in item_marker_names(item) and self.target not in item_skip_targets(item)\n        ]\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "esp-idf",
          "type": "commit",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "export.bat",
          "type": "blob",
          "size": 0.8251953125,
          "content": "@echo off\n\nset \"ORIG_PATH=%cd%\"\nset ADF_PATH=%~dp0\nset ADF_PATH=%ADF_PATH:~0,-1%\n\n:: Check IDF_PATH\nif not defined IDF_PATH (\n   set IDF_PATH=%ADF_PATH%\\esp-idf\n)\n\necho ADF_PATH: %ADF_PATH%\necho IDF_PATH: %IDF_PATH%\n\ncall %IDF_PATH%\\export.bat\nif %errorlevel% neq 0 (goto :ErrorHandling)\npython.exe \"%ADF_PATH%\\tools\\adf_install_patches.py\" apply-patch\nif %errorlevel% neq 0 (goto :ErrorHandling)\n\necho.\necho The following command can be executed now to view detailed usage:\necho.\necho   idf.py --help\necho.\necho Compilation example (The commands highlighted in yellow below are optional: Configure the chip and project settings separately)\necho.\necho   cd %ADF_PATH%\\examples\\cli\necho   \u001b[33midf.py set-target esp32\u001b[0m\necho   \u001b[33midf.py menuconfig\u001b[0m\necho   idf.py build\necho.\n\n:ErrorHandling\necho The script encountered an error.\ngoto :eof\n"
        },
        {
          "name": "export.sh",
          "type": "blob",
          "size": 0.8154296875,
          "content": "#!/bin/bash\n\nif [ -z \"$ADF_PATH\" ]; then\n    basedir=$(dirname \"$0\")\n    export ADF_PATH=$(cd \"${basedir}\"; pwd)\nfi\nif [ -z \"$IDF_PATH\" ]; then\n    export IDF_PATH=$ADF_PATH/esp-idf\nfi\n\necho \"ADF_PATH: $ADF_PATH\"\necho \"IDF_PATH: $IDF_PATH\"\n\nsource ${IDF_PATH}/export.sh || return $?\nsource \"${IDF_PATH}/tools/detect_python.sh\"\n\"${ESP_PYTHON}\" \"${ADF_PATH}/tools/adf_install_patches.py\" apply-patch\n\necho -e \"\\nThe following command can be executed now to view detailed usage:\"\necho -e \"\"\necho -e \"  idf.py --help\"\necho -e \"\\nCompilation example (The commands highlighted in yellow below are optional: Configure the chip and project settings separately)\"\necho -e \"\"\necho -e \"  cd $ADF_PATH/examples/cli\"\necho -e \"  \\033[33midf.py set-target esp32\\033[0m\"\necho -e \"  \\033[33midf.py menuconfig\\033[0m\"\necho -e \"  idf.py build\"\necho -e \"\"\n"
        },
        {
          "name": "idf_patches",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.bat",
          "type": "blob",
          "size": 0.3486328125,
          "content": "@echo off\n\n:: Infer ADF_PATH from script location\nset \"ORIG_PATH=%cd%\"\nset ADF_PATH=%~dp0\nset ADF_PATH=%ADF_PATH:~0,-1%\n\n:: Check IDF_PATH\nif not defined IDF_PATH (\n   set IDF_PATH=%ADF_PATH%\\esp-idf\n)\n\necho ADF_PATH: %ADF_PATH%\necho IDF_PATH: %IDF_PATH%\n\npushd %IDF_PATH% > nul\ngit submodule update --init --recursive --depth 1\ncall install.bat\npopd > nul\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 0.3251953125,
          "content": "#!/bin/bash\n\nbasedir=$(dirname \"$0\")\nADF_PATH=$(cd \"${basedir}\"; pwd)\nexport ADF_PATH\n\nif [ -z \"$IDF_PATH\" ]; then\n    export IDF_PATH=$ADF_PATH/esp-idf\nfi\n\necho \"ADF_PATH: $ADF_PATH\"\necho \"IDF_PATH: $IDF_PATH\"\n\npushd $IDF_PATH > /dev/null\ngit submodule update --init --recursive --depth 1\n./install.sh || return $?\npopd > /dev/null\n"
        },
        {
          "name": "micropython_adf",
          "type": "tree",
          "content": null
        },
        {
          "name": "project.mk",
          "type": "blob",
          "size": 0.2451171875,
          "content": "ADF_VER := $(shell cd ${ADF_PATH} && git describe --always --tags --dirty)\nifndef IDF_PATH\nIDF_PATH := $(ADF_PATH)/esp-idf\nendif\nEXTRA_COMPONENT_DIRS += $(ADF_PATH)/components/\nCPPFLAGS := -D ADF_VER=\\\"$(ADF_VER)\\\"\ninclude $(IDF_PATH)/make/project.mk\n"
        },
        {
          "name": "pytest.ini",
          "type": "blob",
          "size": 0.771484375,
          "content": "[pytest]\n# exclude examples/ota/simple_ota_example/pytest_simple_ota.py\nnorecursedirs = examples/ota/*\n# only the files with prefix `pytest_` would be recognized as pytest test scripts.\npython_files = pytest_*.py\n\n# set traceback to \"short\" to prevent the overwhelming tracebacks\naddopts =\n  -s\n  --embedded-services esp,idf\n  --tb short\n  --skip-check-coredump y\n\n# ignore PytestExperimentalApiWarning for record_xml_attribute\nfilterwarnings =\n  ignore::_pytest.warning_types.PytestExperimentalApiWarning\n\n# log related\nlog_cli = True\nlog_cli_level = INFO\nlog_cli_format = %(asctime)s %(levelname)s %(message)s\nlog_cli_date_format = %Y-%m-%d %H:%M:%S\n\n# junit related\njunit_family = xunit1\n\n\n## log all to `system-out` when case fail\njunit_logging = stdout\njunit_log_passing_tests = False\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}