{
  "metadata": {
    "timestamp": 1736710178919,
    "page": 864,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "glmcdona/Process-Dump",
      "stars": 1678,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 5.9375,
          "content": "<<<<<<< HEAD\n## Ignore Visual Studio temporary files, build results, and\r\n## files generated by popular Visual Studio add-ons.\r\n\r\n# User-specific files\r\n*.suo\r\n*.user\r\n*.userosscache\r\n*.sln.docstates\r\n\r\n# User-specific files (MonoDevelop/Xamarin Studio)\r\n*.userprefs\r\n\r\n# Build results\r\n[Dd]ebug/\r\n[Dd]ebugPublic/\r\n[Rr]elease/\r\n[Rr]eleases/\r\nx64/\r\nx86/\r\nbuild/\r\nbld/\r\n[Bb]in/\r\n[Oo]bj/\r\n\r\n# Visual Studo 2015 cache/options directory\r\n.vs/\r\n\r\n# MSTest test Results\r\n[Tt]est[Rr]esult*/\r\n[Bb]uild[Ll]og.*\r\n\r\n# NUNIT\r\n*.VisualState.xml\r\nTestResult.xml\r\n\r\n# Build Results of an ATL Project\r\n[Dd]ebugPS/\r\n[Rr]eleasePS/\r\ndlldata.c\r\n\r\n*_i.c\r\n*_p.c\r\n*_i.h\r\n*.ilk\r\n*.meta\r\n*.obj\r\n*.pch\r\n*.pdb\r\n*.pgc\r\n*.pgd\r\n*.rsp\r\n*.sbr\r\n*.tlb\r\n*.tli\r\n*.tlh\r\n*.tmp\r\n*.tmp_proj\r\n*.log\r\n*.vspscc\r\n*.vssscc\r\n.builds\r\n*.pidb\r\n*.svclog\r\n*.scc\r\n\r\n# Chutzpah Test files\r\n_Chutzpah*\r\n\r\n# Visual C++ cache files\r\nipch/\r\n*.aps\r\n*.ncb\r\n*.opensdf\r\n*.sdf\r\n*.cachefile\r\n\r\n# Visual Studio profiler\r\n*.psess\r\n*.vsp\r\n*.vspx\r\n\r\n# TFS 2012 Local Workspace\r\n$tf/\r\n\r\n# Guidance Automation Toolkit\r\n*.gpState\r\n\r\n# ReSharper is a .NET coding add-in\r\n_ReSharper*/\r\n*.[Rr]e[Ss]harper\r\n*.DotSettings.user\r\n\r\n# JustCode is a .NET coding addin-in\r\n.JustCode\r\n\r\n# TeamCity is a build add-in\r\n_TeamCity*\r\n\r\n# DotCover is a Code Coverage Tool\r\n*.dotCover\r\n\r\n# NCrunch\r\n_NCrunch_*\r\n.*crunch*.local.xml\r\n\r\n# MightyMoose\r\n*.mm.*\r\nAutoTest.Net/\r\n\r\n# Web workbench (sass)\r\n.sass-cache/\r\n\r\n# Installshield output folder\r\n[Ee]xpress/\r\n\r\n# DocProject is a documentation generator add-in\r\nDocProject/buildhelp/\r\nDocProject/Help/*.HxT\r\nDocProject/Help/*.HxC\r\nDocProject/Help/*.hhc\r\nDocProject/Help/*.hhk\r\nDocProject/Help/*.hhp\r\nDocProject/Help/Html2\r\nDocProject/Help/html\r\n\r\n# Click-Once directory\r\npublish/\r\n\r\n# Publish Web Output\r\n*.[Pp]ublish.xml\r\n*.azurePubxml\r\n# TODO: Comment the next line if you want to checkin your web deploy settings \r\n# but database connection strings (with potential passwords) will be unencrypted\r\n*.pubxml\r\n*.publishproj\r\n\r\n# NuGet Packages\r\n*.nupkg\r\n# The packages folder can be ignored because of Package Restore\r\n**/packages/*\r\n# except build/, which is used as an MSBuild target.\r\n!**/packages/build/\r\n# Uncomment if necessary however generally it will be regenerated when needed\r\n#!**/packages/repositories.config\r\n\r\n# Windows Azure Build Output\r\ncsx/\r\n*.build.csdef\r\n\r\n# Windows Store app package directory\r\nAppPackages/\r\n\r\n# Others\r\n*.[Cc]ache\r\nClientBin/\r\n[Ss]tyle[Cc]op.*\r\n~$*\r\n*~\r\n*.dbmdl\r\n*.dbproj.schemaview\r\n*.pfx\r\n*.publishsettings\r\nnode_modules/\r\nbower_components/\r\n\r\n# RIA/Silverlight projects\r\nGenerated_Code/\r\n\r\n# Backup & report files from converting an old project file\r\n# to a newer Visual Studio version. Backup files are not needed,\r\n# because we have git ;-)\r\n_UpgradeReport_Files/\r\nBackup*/\r\nUpgradeLog*.XML\r\nUpgradeLog*.htm\r\n\r\n# SQL Server files\r\n*.mdf\r\n*.ldf\r\n\r\n# Business Intelligence projects\r\n*.rdl.data\r\n*.bim.layout\r\n*.bim_*.settings\r\n\r\n# Microsoft Fakes\r\nFakesAssemblies/\r\n\r\n# Node.js Tools for Visual Studio\r\n.ntvs_analysis.dat\r\n\r\n# Visual Studio 6 build log\r\n*.plg\r\n\r\n# Visual Studio 6 workspace options file\r\n*.opt\r\n\r\n=======\n## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbuild/\nbld/\n[Bb]in/\n[Oo]bj/\n\n# Visual Studo 2015 cache/options directory\n.vs/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.pch\n*.pdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opensdf\n*.sdf\n*.cachefile\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding addin-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# TODO: Comment the next line if you want to checkin your web deploy settings \n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/packages/*\n# except build/, which is used as an MSBuild target.\n!**/packages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/packages/repositories.config\n\n# Windows Azure Build Output\ncsx/\n*.build.csdef\n\n# Windows Store app package directory\nAppPackages/\n\n# Others\n*.[Cc]ache\nClientBin/\n[Ss]tyle[Cc]op.*\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.pfx\n*.publishsettings\nnode_modules/\nbower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\n\n# SQL Server files\n*.mdf\n*.ldf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n>>>>>>> d26ace875aaef086a6992374a3169ca5c6db031d\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.056640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Geoff McDonald\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.7568359375,
          "content": "# Process Dump\nProcess Dump is a Windows reverse-engineering command-line tool to dump malware memory components back to disk for analysis. Often malware files are packed and obfuscated before they are executed in order to avoid AV scanners, however when these files are executed they will often unpack or inject a clean version of the malware code in memory. A common task for malware researchers when analyzing malware is to dump this unpacked code back from memory to disk for scanning with AV products or for analysis with static analysis tools such as IDA.\n\nProcess Dump works for Windows 32 and 64 bit operating systems and can dump memory components from specific processes or from all processes currently running. Process Dump supports creation and use of a clean-hash database, so that dumping of all the clean files such as kernel32.dll can be skipped. It's main features include:\n* Dumps code from a specific process or all processes.\n* Finds and dumps hidden modules that are not properly loaded in processes.\n* Finds and dumps loose code chunks even if they aren't associated with a PE file. It builds a PE header and import table for the chunks.\n* Reconstructs imports using an aggressive approach.\n* Can run in close dump monitor mode ('-closemon'), where processes will be paused and dumped just before they terminate.\n* Multi-threaded, so when you are dumping all running processes it will go pretty quickly.\n* Can generate a clean hash database. Generate this before a machine is infected with malware so Process Dump will only dump the new malicious malware components.\n\nI'm maintaining an official compiled release on my website here:\n  https://split-code.com/processdump.html\n\n# Installation\nYou can download the latest compiled release of Process Dump here:\n* https://github.com/glmcdona/Process-Dump/releases\n\n# Compiling source code\nThis is designed for Visual Studio 2019 and works with the free Community edition. Just open the project file with VS2019 and compile, it should be that easy!\n\n# Command-line arguments\nProcess dump can be used to dump all unknown code from memory ('-system' flag), dump specific processes, or run in a monitoring mode that dumps all processes just before they terminate.\n\nBefore first usage of this tool, when on the clean workstation the clean excluding hash database can be generated by either:\n* pd -db genquick\n* pd -db gen\n\nExample Usage:\n* pd -system\n* pd -pid 419\n* pd -pid 0x1a3\n* pd -pid 0x1a3 -a 0x401000 -o c:\\dump\\ -c c:\\dump\\test\\clean.db\n* pd -p chrome.exe\n* pd -p \"(?i).\\*chrome.\\*\"\n* pd -closemon\n\nThe command-line arguments can be grouped as follows:\n\n**General Dumping Options**\n\n| Option | Description |\n|--------|-------------|\n| -system | Dumps all modules not matching the clean hash database from all accessible processes into the working directory. |\n| -pid \\<pid\\> | Dumps all modules not matching the clean hash database from the specified PID into the current working directory. Use a '0x' prefix to specify a hex PID. |\n| -closemon | Runs in monitor mode. When any processes are terminating, process dump will first dump the process. |\n| -p \\<regex process name\\> | Dumps all modules not matching the clean hash database from the process name found to match the filter into specified PID into the current working directory. |\n| -a \\<module base address\\> | Dumps a module at the specified base address from the process. |\n| -o \\<path\\> | Sets the default output root folder for dumped components. |\n\n**Clean Hash Database Options**\n\n| Option | Description |\n|--------|-------------|\n| -db gen | Automatically processes a few common folders as well as all the currently running processes and adds the found module hashes to the clean hash database. It will add all files recursively in: `%WINDIR%`, `%HOMEPATH%`, `C:\\Program Files\\`, `C:\\Program Files (x86)\\`, as well as all modules in all running processes. These clean hashes will be added to the file `clean.hashes` in the application directory. During future process dumping commands, these known modules will not be dumped. It is recommended to run this command one time on a clean system prior to using the tool that way not too many modules will be dumped from memory.|\n| -db genquick | Same as above, but only adds the hashes from all modules in all processes to the clean hash database. This is a much faster way to build the clean hash database, but it will be less complete. |\n| -db add \\<dir\\> | Adds all the files in the specified directory recursively to the clean hash database. |\n| -db rem \\<dir\\> | Removes all the files in the specified directory recursively from the clean hash database. |\n| -nr | Disable recursion on hash database directory add or remove commands. |\n| -db clean | Clears the clean hash database. |\n| -db ignore | Ignores the clean hash database when dumping a process this time. All modules will be dumped even if a match is found. |\n| -cdb \\<filepath\\> | Full filepath to the clean hash database to use for this run if you'd like to override the default of `clean.hashes`. |\n| -edb \\<filepath\\> | Full filepath to the entrypoint hash database to use for this run. |\n| -esdb \\<filepath\\> | Full filepath to the entrypoint short hash database to use for this run. |\n\n**Output Options**\n\n| Option | Description |\n|--------|-------------|\n| -v | Verbose mode where more details will be printed for debugging. |\n| -nh | No header is printed in the output. |\n\n**Advanced Options**\n\n| Option | Description |\n|--------|-------------|\n| -g | Forces generation of PE headers from scratch, ignoring existing headers. |\n| -eprec | Force the entry point to be reconstructed, even if a valid one appears to exist. |\n| -ni | Disable import reconstruction. |\n| -nc | Disable dumping of loose code regions. |\n| -nt | Disable multithreading. |\n| -nep | Disable entry point hashing. |\n| -t \\<thread count\\> | Sets the number of threads to use (default 16). |\n\n# Usage Examples\n\n| Command | Description |\n| ------- | ----------- |\n| `pd64.exe -db genquick` | Quickly build clean module database based on currently running processes. Process Dump in later tasks will only dump unrecognized modules. |\n| `pd64.exe -system` | Dump all modules and hidden chunks from all processes while ignoring clean modules. |\n| `pd64.exe -closemon` | Run in terminate monitor mode. This will dump all processes when they attempt to terminate. |\n| `pd64.exe -pid 0x18A` | Dump modules and hidden chunks from a specific process ID. |\n| `pd64.exe -p .\\*chrome.\\*` | Dump modules and hidden chunks by process name. |\n| `pd64.exe -db gen` | Build a clean-hash database of known modules. This is used to avoid dumping known good modules in later tasks. |\n| `pd64.exe -pid 0x1a3 -a 0xffb4000` | Dump code from a specific address in PID. This will generate two files for analysis, with reconstructed 32bit and 64bit PE headers: `notepad_exe_x64_hidden_FFB40000.exe` and `notepad_exe_x86_hidden_FFB40000.exe`. |\n\nSure, here's a more streamlined version of the information:\n\n## Sandbox Usage\n\nWhen using Process Dump in an automated sandbox or for manual anti-malware research, the following steps can be useful. Make sure to run all commands as an Administrator in a clean environment.\n\n- **Build the Clean Hash Database:** Run `pd64.exe -db gen` or for a faster less complete process, use `pd64.exe -db genquick`. Depending on your situation, you may want to snapshot your VM after creating this clean hash database that way it doesn't need to be repeated each time.\n\n- **Start the Process Dump Terminate Monitor:** Keep `pd64.exe -closemon` running in the background. It will dump all intermediate processes used by the malware.\n\n- **Execute the Malware File:** Monitor the malware installation. `pd64.exe` will automatically dump any process that tries to close.\n\n- **Dump the Running Malware from Memory:** When ready, use `pd64.exe -system` to dump all processes.\n\nThe dumped components will be found in the working directory of `pd64.exe`. To change the output path, use the `-o` flag.\n\n# Notes on the naming convention of dumped modules:\n* 'hiddemodule' in the filename instead of the module name indicates the module was not properly registered in the process.\n* 'codechunk' in the filename means that it is a reconstructed dump from a loose executable region. This can be for example injected code that did not have a PE header. Codechunks will be dumped twice, once with a reconstructed x86 and again with a reconstructed x64 header.\n\nExample filenames of dumped files\n* notepad_exe_PID2990_hiddenmodule_16B8ABB0000_x86.dll\n* notepad_exe_PID3b5c_notepad.exe_7FF6E6630000_x64.exe\n* notepad_exe_PID2c54_codechunk_17BD0000_x86.dll\n* notepad_exe_PID2c54_codechunk_17BD0000_x64.dll\n\n\n# Version history\n\n## Version 2.1 (February 12th, 2017)\n* Fixed a bug where the last section in some cases would instead be filled with zeros. Thanks to megastupidmonkey for reporting this issue.\n* Fixed a bug where 64-bit base addresses would be truncated to a 32-bit address. It now properly keeps the full 64-bit module base address. Thanks to megastupidmonkey for reporting this issue.\n* Addressed an issue where the processes dump close monitor would crash csrss.exe.\n* Stopped Process Dump from hooking it's own process in close monitor mode. \n\n## Version 2.0 (September 18th, 2016)\n* Added new flag '-closemon' which runs Process Dump in a monitoring\n   mode. It will pause and dump any process just as it closes. This is designed\n   to work well with malware analysis sandboxes, to be sure to dump\n   malware from memory before the malicious process closes.\n*  Upgraded Process Dump to be multi-threaded. Commands that dump or get\n   hashes from multiple processes will run separate threads per operation.\n   Default number of threads is 16, which speeds up the general Process\n   Dump dumping processing significantly.\n*  Upgraded Process Dump to dump unattached code chunks found in memory.\n   These are identified as executable regions in memory which are not\n   attached to a module and do not have a PE header. It also requires that\n   the codechunk refer to at least 2 imports to be considered valid in\n   order to reduce noise. When dumped, a PE header is recreated along with\n   an import table. Code chunks are fully supported by the clean hash database.\n*  Added flags to control the filepath to the clean hash database as well\n   as the output folder for dumped files.\n*  Fix to generating clean hash database from user path that was causing a\n   crash.\n*  Fix to the flag '-g' that forces generation of PE headers. Before even\n   if this flag was set, system dumps (-system), would ignore this flag\n   when dumping a process.\n* Various performance improvements.\n* Upgraded project to VS2015.\n\n## Version 1.5 (November 21st, 2015)\n* Fixed bug where very large memory regions would cause Process Dump to hang.\n* Fixed bug where some modules at high addresses would not be found under 64-bit Windows.\n* More debug information now outputted under Verbose mode.\n\n## Version 1.4 (April 18th, 2015)\n* Added new aggressive import reconstruction approach. Now patches up all DWORDs and QWORDs in the module to the corresponding export match.\n* Added '-a (address to dump)' flag to dump a specific address. It will generate PE headers and build an import table for the address.\n* Added '-ni' flag to skip new import reconstruction algorithm.\n* Added '-g' flag to force generation of new PE header even if there exists one when dumping a module. This is good if the PE header is malformed for example.\n* Various bug fixes.\n\n## Version 1.3 (October 10th, 2013)\n* Improved handling of PE headers with sections that specify invalid virtual sizes and addresses.\n* Better module dumping methodology for dumping virtual sections down to disk sections.\n\n## Version 1.1 (April 8th, 2013)\n* Fixed a compatibility issue with Windows XP.\n* Corrected bug where process dump would print it is dumping a module but not actually dump it.\n* Implemented the '-pid ' dump flag.\n\n## Version 1.0 (April 2nd, 2013)\n* Initial release.\n"
        },
        {
          "name": "pd.sln",
          "type": "blob",
          "size": 1.7353515625,
          "content": "﻿\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio Version 16\r\nVisualStudioVersion = 16.0.32002.261\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"pd\", \"pd\\pd.vcxproj\", \"{49B0E81A-D38E-426E-AB76-CC8463EC0003}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Win32 = Debug|Win32\r\n\t\tDebug|x64 = Debug|x64\r\n\t\tRelease|Win32 = Release|Win32\r\n\t\tRelease|x64 = Release|x64\r\n\t\tx64|Win32 = x64|Win32\r\n\t\tx64|x64 = x64|x64\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{49B0E81A-D38E-426E-AB76-CC8463EC0003}.Debug|Win32.ActiveCfg = Debug|Win32\r\n\t\t{49B0E81A-D38E-426E-AB76-CC8463EC0003}.Debug|Win32.Build.0 = Debug|Win32\r\n\t\t{49B0E81A-D38E-426E-AB76-CC8463EC0003}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{49B0E81A-D38E-426E-AB76-CC8463EC0003}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{49B0E81A-D38E-426E-AB76-CC8463EC0003}.Release|Win32.ActiveCfg = Release|Win32\r\n\t\t{49B0E81A-D38E-426E-AB76-CC8463EC0003}.Release|Win32.Build.0 = Release|Win32\r\n\t\t{49B0E81A-D38E-426E-AB76-CC8463EC0003}.Release|x64.ActiveCfg = Release|x64\r\n\t\t{49B0E81A-D38E-426E-AB76-CC8463EC0003}.Release|x64.Build.0 = Release|x64\r\n\t\t{49B0E81A-D38E-426E-AB76-CC8463EC0003}.x64|Win32.ActiveCfg = Debug|Win32\r\n\t\t{49B0E81A-D38E-426E-AB76-CC8463EC0003}.x64|Win32.Build.0 = Debug|Win32\r\n\t\t{49B0E81A-D38E-426E-AB76-CC8463EC0003}.x64|x64.ActiveCfg = x64|x64\r\n\t\t{49B0E81A-D38E-426E-AB76-CC8463EC0003}.x64|x64.Build.0 = x64|x64\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(ExtensibilityGlobals) = postSolution\r\n\t\tSolutionGuid = {F0554F35-5E45-4F1C-9AA9-5C93793CC37D}\r\n\tEndGlobalSection\r\nEndGlobal\r\n"
        },
        {
          "name": "pd",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}