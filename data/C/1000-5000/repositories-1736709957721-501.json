{
  "metadata": {
    "timestamp": 1736709957721,
    "page": 501,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "strongswan/strongswan",
      "stars": 2345,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".appveyor.yml",
          "type": "blob",
          "size": 1.2509765625,
          "content": "clone_depth: 50\n\nimage:\n  - Visual Studio 2015\n  - Visual Studio 2017\n  - Visual Studio 2019\n\nenvironment:\n  global:\n    TESTS_REDUCED_KEYLENGTHS: yes\n    LEAK_DETECTIVE: no\n    MONOLITHIC: yes\n    TZ: Europe/Zurich\n  matrix:\n    - arch: x86_64\n      bits: 64\n    # no 32-bit build as 32-bit msys is not installed\n    #- arch: i686\n    #  bits: 32\n\ninstall:\n  - tzutil /s \"Central European Standard Time\"\n  - set MSYS_SH=C:\\msys%BITS%\\usr\\bin\\sh.exe\n  - set MSYSTEM=MINGW%BITS%\n  - set TEST=win%BITS%\n  - |\n      set IMG=%APPVEYOR_BUILD_WORKER_IMAGE:~-4%\n      set OPENSSL=OpenSSL\n      IF \"%IMG%\" == \"2017\" set OPENSSL=OpenSSL-v11\n      IF \"%IMG%\" == \"2019\" set OPENSSL=OpenSSL-v111\n      set OPENSSL_DIR=/c/%OPENSSL%-%TEST%\n      C:\\%OPENSSL%-%TEST%\\bin\\openssl.exe version -a\n  # newer versions of msys2 don't provide autotools or gperf via base-devel anymore\n  - IF \"%IMG%\" == \"2019\" %MSYS_SH% --login -c \". /etc/profile && pacman --noconfirm -S --needed autotools gperf\"\n\nbuild_script:\n  - '%MSYS_SH% --login -c \". /etc/profile && cd $APPVEYOR_BUILD_FOLDER && ./scripts/test.sh deps\"'\n\ntest_script:\n  - '%MSYS_SH% --login -c \". /etc/profile && touch /$MSYSTEM/etc/strongswan.conf\"'\n  - '%MSYS_SH% --login -c \". /etc/profile && cd $APPVEYOR_BUILD_FOLDER && ./scripts/test.sh\"'\n"
        },
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 0.6357421875,
          "content": "freebsd_task:\n  matrix:\n    - name: FreeBSD 14.1\n      freebsd_instance:\n        image_family: freebsd-14-1\n    - name: FreeBSD 13.3\n      freebsd_instance:\n        image_family: freebsd-13-3\n\n  env:\n    TESTS_REDUCED_KEYLENGTHS: yes\n    LEAK_DETECTIVE: no\n    MONOLITHIC: no\n    TEST: freebsd\n    OS_NAME: freebsd\n\n  install_script: ./scripts/test.sh deps\n  script: ./scripts/test.sh\n\nalpine_task:\n  container:\n    image: alpine:latest\n\n  env:\n    TESTS_REDUCED_KEYLENGTHS: yes\n    TESTS_NO_IPV6: yes\n    LEAK_DETECTIVE: no\n    MONOLITHIC: no\n    TEST: alpine\n    OS_NAME: alpine\n\n  install_script: ./scripts/test.sh deps\n  script: ./scripts/test.sh\n"
        },
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.0400390625,
          "content": "ignore:\n  - \"**/suites/\"\n  - \"**/tests/\"\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 1.1796875,
          "content": "# http://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\n# for alignment reasons the last tab may be replaced with < indent_size spaces,\n# which we currently can't configure here\nindent_style = tab\nindent_size = 4\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\nblock_comment_start = /*\nblock_comment = *\nblock_comment_end = */\n\n# don't change these files\n[{doc/**,src/include/{linux,sys}/**,testing/{hosts,tests}/**,AUTHORS,COPYING}]\ncharset = unset\nindent_style = unset\nindent_size = unset\nend_of_line = unset\ninsert_final_newline = unset\ntrim_trailing_whitespace = unset\n\n# never trim whitespace in patches, everything else should not be changed\n[*.patch]\ntrim_trailing_whitespace = false\ncharset = unset\nindent_style = unset\nindent_size = unset\nend_of_line = unset\ninsert_final_newline = unset\n\n[{.*,NEWS,README,INSTALL,*.{gemspec.in,pod,rb,ui}}]\nindent_style = space\nindent_size = 2\n\n[*.{gpr,adb,ads}]\nindent_style = space\nindent_size = 3\nline_comment = --\n\n[{*.{md,gradle,xml},HACKING}]\nindent_style = space\nindent_size = 4\n\n[src/libcharon/plugins/vici/README.md]\nindent_style = tab\n\n[src/libcharon/plugins/vici/**/*.{rst,PL,pm,py}]\nindent_style = space\nindent_size = 4\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5693359375,
          "content": "/Android.common.mk\nMakefile\nMakefile.in\naclocal.m4\nautom4te.cache\ncompile\nconfig.guess\nconfig.sub\nconfigure\nconfig.h.in\nconfig.h\nstamp-h1\ndepcomp\ninstall-sh\nltmain.sh\nmissing\nylwrap\n.libs\n.deps\nconfig.log\nconfig.status\nlibtool\n.dirstamp\n*.l[ao]\n*.[ao]\n*.exe\ny.tab.[ch]\nlex.yy.c\n*keywords.c\n!proposal_keywords.c\nplugin_constructors.c\nDoxyfile\napidoc/\nfuzzing-corpora/\n*~\n*.orig\n*.patch\n*.diff\n*.tar.bz2\n*.tar.gz\n.DS_Store\n._.DS_Store\ncoverage/\n*.gcno\n*.gcda\n*.gcov\n.cproject\n.project\n.metadata/\n.settings/\n/*.config\n/*.creator\n/*.creator.*\n/*.files\n/*.includes\ntest-driver\nnbproject/\n"
        },
        {
          "name": ".lsan.suppressions",
          "type": "blob",
          "size": 0.203125,
          "content": "leak:EVP_CIPHER_fetch\nleak:EVP_KEYEXCH_fetch\nleak:EVP_KEYMGMT_fetch\nleak:EVP_RAND_fetch\nleak:OSSL_DECODER_do_all_provided\nleak:OSSL_ENCODER_do_all_provided\nleak:OSSL_PROVIDER_load\nleak:OSSL_PROVIDER_try_load\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "Android.common.mk.in",
          "type": "blob",
          "size": 1.1376953125,
          "content": "# some common definitions used by the main and the NDK-specific Android.mk\n# include this after strongswan_PLUGINS has been defined\n\n# helper macros to only add source files for plugins included in the list above\n# source files are relative to the android.mk that called the macro\nplugin_enabled = $(filter $(1), $(strongswan_PLUGINS))\nadd_plugin = $(if $(call plugin_enabled,$(1)), \\\n               $(patsubst $(LOCAL_PATH)/%,%, \\\n                 $(wildcard \\\n                   $(subst %,$(subst -,_,$(strip $(1))), \\\n                     $(LOCAL_PATH)/plugins/%/%*.c \\\n                    ) \\\n                  ) \\\n                ) \\\n              )\nadd_plugin_subdirs = $(if $(call plugin_enabled,$(1)), \\\n               $(patsubst $(LOCAL_PATH)/%,%, \\\n                 $(wildcard \\\n                   $(subst %,$(subst -,_,$(strip $(1))), \\\n                     $(addprefix $(LOCAL_PATH)/plugins/%/,$(addsuffix /*.c, \\\n                       $(strip $(2)) \\\n                      )) \\\n                    ) \\\n                  ) \\\n                ) \\\n              )\n\n# strongSwan version, replaced by top Makefile\nstrongswan_VERSION := \"@PACKAGE_VERSION@\"\n\n"
        },
        {
          "name": "Android.mk",
          "type": "blob",
          "size": 2.7255859375,
          "content": "LOCAL_PATH := $(call my-dir)\ninclude $(CLEAR_VARS)\n\n# the executables that should be installed on the final system have to be added\n# to PRODUCT_PACKAGES in\n#   build/target/product/core.mk\n# possible executables are\n#   starter - allows to control and configure the daemon from the command line\n#   charon - the IKE daemon\n\n# if you enable starter (see above) uncomment the following line\n# strongswan_BUILD_STARTER := true\n\n# this is the list of plugins that are built into libstrongswan and charon\n# also these plugins are loaded by default (if not changed in strongswan.conf)\nstrongswan_CHARON_PLUGINS := android-log openssl fips-prf random nonce pubkey \\\n\tpkcs1 pkcs8 pem xcbc hmac kdf kernel-netlink socket-default android-dns \\\n\tstroke eap-identity eap-mschapv2 eap-md5 eap-gtc\n\n# list of all plugins - used to enable them with the function below\nstrongswan_PLUGINS := $(sort $(strongswan_CHARON_PLUGINS))\n\ninclude $(LOCAL_PATH)/Android.common.mk\n\n# includes\nstrongswan_PATH := $(LOCAL_PATH)\nlibcurl_PATH := external/strongswan-support/libcurl/include\nlibgmp_PATH := external/strongswan-support/gmp\nopenssl_PATH := external/openssl/include\n\n# some definitions\nstrongswan_DIR := \"/system/bin\"\nstrongswan_SBINDIR := \"/system/bin\"\nstrongswan_PIDDIR := \"/data/misc/vpn\"\nstrongswan_PLUGINDIR := \"$(strongswan_IPSEC_DIR)/ipsec\"\nstrongswan_CONFDIR := \"/system/etc\"\nstrongswan_STRONGSWAN_CONF := \"$(strongswan_CONFDIR)/strongswan.conf\"\n\n# CFLAGS (partially from a configure run using droid-gcc)\nstrongswan_CFLAGS := \\\n\t-Wno-format \\\n\t-Wno-pointer-sign \\\n\t-Wno-pointer-arith \\\n\t-Wno-sign-compare \\\n\t-Wno-strict-aliasing \\\n\t-DHAVE___BOOL \\\n\t-DHAVE_STDBOOL_H \\\n\t-DHAVE_ALLOCA_H \\\n\t-DHAVE_ALLOCA \\\n\t-DHAVE_CLOCK_GETTIME \\\n\t-DHAVE_DLADDR \\\n\t-DHAVE_PRCTL \\\n\t-DHAVE_LINUX_UDP_H \\\n\t-DHAVE_STRUCT_SADB_X_POLICY_SADB_X_POLICY_PRIORITY \\\n\t-DHAVE_IPSEC_MODE_BEET \\\n\t-DHAVE_IPSEC_DIR_FWD \\\n\t-DOPENSSL_NO_ENGINE \\\n\t-DCONFIG_H_INCLUDED \\\n\t-DCAPABILITIES \\\n\t-DCAPABILITIES_NATIVE \\\n\t-DMONOLITHIC \\\n\t-DUSE_IKEV1 \\\n\t-DUSE_IKEV2 \\\n\t-DUSE_BUILTIN_PRINTF \\\n\t-DDEBUG \\\n\t-DROUTING_TABLE=0 \\\n\t-DROUTING_TABLE_PRIO=220 \\\n\t-DVERSION=\\\"$(strongswan_VERSION)\\\" \\\n\t-DPLUGINDIR=\\\"$(strongswan_PLUGINDIR)\\\" \\\n\t-DIPSEC_DIR=\\\"$(strongswan_DIR)\\\" \\\n\t-DIPSEC_PIDDIR=\\\"$(strongswan_PIDDIR)\\\" \\\n\t-DIPSEC_CONFDIR=\\\"$(strongswan_CONFDIR)\\\" \\\n\t-DSTRONGSWAN_CONF=\\\"$(strongswan_STRONGSWAN_CONF)\\\" \\\n\t-DDEV_RANDOM=\\\"/dev/random\\\" \\\n\t-DDEV_URANDOM=\\\"/dev/urandom\\\"\n\n# only for Android 2.0+\nstrongswan_CFLAGS += \\\n\t-DHAVE_IN6ADDR_ANY\n\nstrongswan_BUILD := \\\n\tcharon \\\n\tlibcharon \\\n\tlibstrongswan \\\n\tlibtncif \\\n\tlibtnccs \\\n\tlibimcv \\\n\tlibtpmtss\n\nifneq ($(strongswan_BUILD_STARTER),)\nstrongswan_BUILD += \\\n\tstarter \\\n\tstroke \\\n\tipsec\nendif\n\ninclude $(addprefix $(LOCAL_PATH)/src/,$(addsuffix /Android.mk, \\\n\t\t$(sort $(strongswan_BUILD))))\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.25,
          "content": "Please refer to the [developer documentation](https://docs.strongswan.org/docs/5.9/devs/devs.html)\nin our documentation for details regarding **code style** and\n[**contribution requirements**](https://docs.strongswan.org/docs/5.9/devs/contributions.html).\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 17.66796875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 0.2763671875,
          "content": "A summary of changes is available in the NEWS file. For a more\ndetailed changelog, refer to the releases on GitHub\n(https://github.com/strongswan/strongswan/releases) or use the Git repository\n(see HACKING) or its web interface available at\nhttps://github.com/strongswan/strongswan.\n"
        },
        {
          "name": "Doxyfile.in",
          "type": "blob",
          "size": 123.59765625,
          "content": "# Doxyfile 1.9.8\n\n# This file describes the settings to be used by the documentation system\n# doxygen (www.doxygen.org) for a project.\n#\n# All text after a double hash (##) is considered a comment and is placed in\n# front of the TAG it is preceding.\n#\n# All text after a single hash (#) is considered a comment and will be ignored.\n# The format is:\n# TAG = value [value, ...]\n# For lists, items can also be appended using:\n# TAG += value [value, ...]\n# Values that contain spaces should be placed between quotes (\\\" \\\").\n#\n# Note:\n#\n# Use doxygen to compare the used configuration file with the template\n# configuration file:\n# doxygen -x [configFile]\n# Use doxygen to compare the used configuration file with the template\n# configuration file without replacing the environment variables or CMake type\n# replacement variables:\n# doxygen -x_noenv [configFile]\n\n#---------------------------------------------------------------------------\n# Project related configuration options\n#---------------------------------------------------------------------------\n\n# This tag specifies the encoding used for all characters in the configuration\n# file that follow. The default is UTF-8 which is also the encoding used for all\n# text before the first occurrence of this tag. Doxygen uses libiconv (or the\n# iconv built into libc) for the transcoding. See\n# https://www.gnu.org/software/libiconv/ for the list of possible encodings.\n# The default value is: UTF-8.\n\nDOXYFILE_ENCODING      = UTF-8\n\n# The PROJECT_NAME tag is a single word (or a sequence of words surrounded by\n# double-quotes, unless you are using Doxywizard) that should identify the\n# project for which the documentation is generated. This name is used in the\n# title of most generated pages and in a few other places.\n# The default value is: My Project.\n\nPROJECT_NAME           = @PACKAGE_NAME@\n\n# The PROJECT_NUMBER tag can be used to enter a project or revision number. This\n# could be handy for archiving the generated documentation or if some version\n# control system is used.\n\nPROJECT_NUMBER         = @PACKAGE_VERSION@\n\n# Using the PROJECT_BRIEF tag one can provide an optional one line description\n# for a project that appears at the top of each page and should give viewer a\n# quick idea about the purpose of the project. Keep the description short.\n\nPROJECT_BRIEF          =\n\n# With the PROJECT_LOGO tag one can specify a logo or an icon that is included\n# in the documentation. The maximum height of the logo should not exceed 55\n# pixels and the maximum width should not exceed 200 pixels. Doxygen will copy\n# the logo to the output directory.\n\nPROJECT_LOGO           =\n\n# The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute) path\n# into which the generated documentation will be written. If a relative path is\n# entered, it will be relative to the location where doxygen was started. If\n# left blank the current directory will be used.\n\nOUTPUT_DIRECTORY       = apidoc\n\n# If the CREATE_SUBDIRS tag is set to YES then doxygen will create up to 4096\n# sub-directories (in 2 levels) under the output directory of each output format\n# and will distribute the generated files over these directories. Enabling this\n# option can be useful when feeding doxygen a huge amount of source files, where\n# putting all generated files in the same directory would otherwise causes\n# performance problems for the file system. Adapt CREATE_SUBDIRS_LEVEL to\n# control the number of sub-directories.\n# The default value is: NO.\n\nCREATE_SUBDIRS         = NO\n\n# Controls the number of sub-directories that will be created when\n# CREATE_SUBDIRS tag is set to YES. Level 0 represents 16 directories, and every\n# level increment doubles the number of directories, resulting in 4096\n# directories at level 8 which is the default and also the maximum value. The\n# sub-directories are organized in 2 levels, the first level always has a fixed\n# number of 16 directories.\n# Minimum value: 0, maximum value: 8, default value: 8.\n# This tag requires that the tag CREATE_SUBDIRS is set to YES.\n\nCREATE_SUBDIRS_LEVEL   = 8\n\n# If the ALLOW_UNICODE_NAMES tag is set to YES, doxygen will allow non-ASCII\n# characters to appear in the names of generated files. If set to NO, non-ASCII\n# characters will be escaped, for example _xE3_x81_x84 will be used for Unicode\n# U+3044.\n# The default value is: NO.\n\nALLOW_UNICODE_NAMES    = NO\n\n# The OUTPUT_LANGUAGE tag is used to specify the language in which all\n# documentation generated by doxygen is written. Doxygen will use this\n# information to generate all constant output in the proper language.\n# Possible values are: Afrikaans, Arabic, Armenian, Brazilian, Bulgarian,\n# Catalan, Chinese, Chinese-Traditional, Croatian, Czech, Danish, Dutch, English\n# (United States), Esperanto, Farsi (Persian), Finnish, French, German, Greek,\n# Hindi, Hungarian, Indonesian, Italian, Japanese, Japanese-en (Japanese with\n# English messages), Korean, Korean-en (Korean with English messages), Latvian,\n# Lithuanian, Macedonian, Norwegian, Persian (Farsi), Polish, Portuguese,\n# Romanian, Russian, Serbian, Serbian-Cyrillic, Slovak, Slovene, Spanish,\n# Swedish, Turkish, Ukrainian and Vietnamese.\n# The default value is: English.\n\nOUTPUT_LANGUAGE        = English\n\n# If the BRIEF_MEMBER_DESC tag is set to YES, doxygen will include brief member\n# descriptions after the members that are listed in the file and class\n# documentation (similar to Javadoc). Set to NO to disable this.\n# The default value is: YES.\n\nBRIEF_MEMBER_DESC      = YES\n\n# If the REPEAT_BRIEF tag is set to YES, doxygen will prepend the brief\n# description of a member or function before the detailed description\n#\n# Note: If both HIDE_UNDOC_MEMBERS and BRIEF_MEMBER_DESC are set to NO, the\n# brief descriptions will be completely suppressed.\n# The default value is: YES.\n\nREPEAT_BRIEF           = YES\n\n# This tag implements a quasi-intelligent brief description abbreviator that is\n# used to form the text in various listings. Each string in this list, if found\n# as the leading text of the brief description, will be stripped from the text\n# and the result, after processing the whole list, is used as the annotated\n# text. Otherwise, the brief description is used as-is. If left blank, the\n# following values are used ($name is automatically replaced with the name of\n# the entity):The $name class, The $name widget, The $name file, is, provides,\n# specifies, contains, represents, a, an and the.\n\nABBREVIATE_BRIEF       =\n\n# If the ALWAYS_DETAILED_SEC and REPEAT_BRIEF tags are both set to YES then\n# doxygen will generate a detailed section even if there is only a brief\n# description.\n# The default value is: NO.\n\nALWAYS_DETAILED_SEC    = NO\n\n# If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all\n# inherited members of a class in the documentation of that class as if those\n# members were ordinary class members. Constructors, destructors and assignment\n# operators of the base classes will not be shown.\n# The default value is: NO.\n\nINLINE_INHERITED_MEMB  = NO\n\n# If the FULL_PATH_NAMES tag is set to YES, doxygen will prepend the full path\n# before files name in the file list and in the header files. If set to NO the\n# shortest path that makes the file name unique will be used\n# The default value is: YES.\n\nFULL_PATH_NAMES        = YES\n\n# The STRIP_FROM_PATH tag can be used to strip a user-defined part of the path.\n# Stripping is only done if one of the specified strings matches the left-hand\n# part of the path. The tag can be used to show relative paths in the file list.\n# If left blank the directory from which doxygen is run is used as the path to\n# strip.\n#\n# Note that you can specify absolute paths here, but also relative paths, which\n# will be relative from the directory where doxygen is started.\n# This tag requires that the tag FULL_PATH_NAMES is set to YES.\n\nSTRIP_FROM_PATH        =\n\n# The STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of the\n# path mentioned in the documentation of a class, which tells the reader which\n# header file to include in order to use a class. If left blank only the name of\n# the header file containing the class definition is used. Otherwise one should\n# specify the list of include paths that are normally passed to the compiler\n# using the -I flag.\n\nSTRIP_FROM_INC_PATH    =\n\n# If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter (but\n# less readable) file names. This can be useful is your file systems doesn't\n# support long names like on DOS, Mac, or CD-ROM.\n# The default value is: NO.\n\nSHORT_NAMES            = NO\n\n# If the JAVADOC_AUTOBRIEF tag is set to YES then doxygen will interpret the\n# first line (until the first dot) of a Javadoc-style comment as the brief\n# description. If set to NO, the Javadoc-style will behave just like regular Qt-\n# style comments (thus requiring an explicit @brief command for a brief\n# description.)\n# The default value is: NO.\n\nJAVADOC_AUTOBRIEF      = YES\n\n# If the JAVADOC_BANNER tag is set to YES then doxygen will interpret a line\n# such as\n# /***************\n# as being the beginning of a Javadoc-style comment \"banner\". If set to NO, the\n# Javadoc-style will behave just like regular comments and it will not be\n# interpreted by doxygen.\n# The default value is: NO.\n\nJAVADOC_BANNER         = NO\n\n# If the QT_AUTOBRIEF tag is set to YES then doxygen will interpret the first\n# line (until the first dot) of a Qt-style comment as the brief description. If\n# set to NO, the Qt-style will behave just like regular Qt-style comments (thus\n# requiring an explicit \\brief command for a brief description.)\n# The default value is: NO.\n\nQT_AUTOBRIEF           = NO\n\n# The MULTILINE_CPP_IS_BRIEF tag can be set to YES to make doxygen treat a\n# multi-line C++ special comment block (i.e. a block of //! or /// comments) as\n# a brief description. This used to be the default behavior. The new default is\n# to treat a multi-line C++ comment block as a detailed description. Set this\n# tag to YES if you prefer the old behavior instead.\n#\n# Note that setting this tag to YES also means that rational rose comments are\n# not recognized any more.\n# The default value is: NO.\n\nMULTILINE_CPP_IS_BRIEF = NO\n\n# By default Python docstrings are displayed as preformatted text and doxygen's\n# special commands cannot be used. By setting PYTHON_DOCSTRING to NO the\n# doxygen's special commands can be used and the contents of the docstring\n# documentation blocks is shown as doxygen documentation.\n# The default value is: YES.\n\nPYTHON_DOCSTRING       = YES\n\n# If the INHERIT_DOCS tag is set to YES then an undocumented member inherits the\n# documentation from any documented member that it re-implements.\n# The default value is: YES.\n\nINHERIT_DOCS           = YES\n\n# If the SEPARATE_MEMBER_PAGES tag is set to YES then doxygen will produce a new\n# page for each member. If set to NO, the documentation of a member will be part\n# of the file/class/namespace that contains it.\n# The default value is: NO.\n\nSEPARATE_MEMBER_PAGES  = NO\n\n# The TAB_SIZE tag can be used to set the number of spaces in a tab. Doxygen\n# uses this value to replace tabs by spaces in code fragments.\n# Minimum value: 1, maximum value: 16, default value: 4.\n\nTAB_SIZE               = 4\n\n# This tag can be used to specify a number of aliases that act as commands in\n# the documentation. An alias has the form:\n# name=value\n# For example adding\n# \"sideeffect=@par Side Effects:^^\"\n# will allow you to put the command \\sideeffect (or @sideeffect) in the\n# documentation, which will result in a user-defined paragraph with heading\n# \"Side Effects:\". Note that you cannot put \\n's in the value part of an alias\n# to insert newlines (in the resulting output). You can put ^^ in the value part\n# of an alias to insert a newline as if a physical newline was in the original\n# file. When you need a literal { or } or , in the value part of an alias you\n# have to escape them by means of a backslash (\\), this can lead to conflicts\n# with the commands \\{ and \\} for these it is advised to use the version @{ and\n# @} or use a double escape (\\\\{ and \\\\})\n\nALIASES                =\n\n# Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C sources\n# only. Doxygen will then generate output that is more tailored for C. For\n# instance, some of the names that are used will be different. The list of all\n# members will be omitted, etc.\n# The default value is: NO.\n\nOPTIMIZE_OUTPUT_FOR_C  = NO\n\n# Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of Java or\n# Python sources only. Doxygen will then generate output that is more tailored\n# for that language. For instance, namespaces will be presented as packages,\n# qualified scopes will look different, etc.\n# The default value is: NO.\n\nOPTIMIZE_OUTPUT_JAVA   = NO\n\n# Set the OPTIMIZE_FOR_FORTRAN tag to YES if your project consists of Fortran\n# sources. Doxygen will then generate output that is tailored for Fortran.\n# The default value is: NO.\n\nOPTIMIZE_FOR_FORTRAN   = NO\n\n# Set the OPTIMIZE_OUTPUT_VHDL tag to YES if your project consists of VHDL\n# sources. Doxygen will then generate output that is tailored for VHDL.\n# The default value is: NO.\n\nOPTIMIZE_OUTPUT_VHDL   = NO\n\n# Set the OPTIMIZE_OUTPUT_SLICE tag to YES if your project consists of Slice\n# sources only. Doxygen will then generate output that is more tailored for that\n# language. For instance, namespaces will be presented as modules, types will be\n# separated into more groups, etc.\n# The default value is: NO.\n\nOPTIMIZE_OUTPUT_SLICE  = NO\n\n# Doxygen selects the parser to use depending on the extension of the files it\n# parses. With this tag you can assign which parser to use for a given\n# extension. Doxygen has a built-in mapping, but you can override or extend it\n# using this tag. The format is ext=language, where ext is a file extension, and\n# language is one of the parsers supported by doxygen: IDL, Java, JavaScript,\n# Csharp (C#), C, C++, Lex, D, PHP, md (Markdown), Objective-C, Python, Slice,\n# VHDL, Fortran (fixed format Fortran: FortranFixed, free formatted Fortran:\n# FortranFree, unknown formatted Fortran: Fortran. In the later case the parser\n# tries to guess whether the code is fixed or free formatted code, this is the\n# default for Fortran type files). For instance to make doxygen treat .inc files\n# as Fortran files (default is PHP), and .f files as C (default is Fortran),\n# use: inc=Fortran f=C.\n#\n# Note: For files without extension you can use no_extension as a placeholder.\n#\n# Note that for custom extensions you also need to set FILE_PATTERNS otherwise\n# the files are not read by doxygen. When specifying no_extension you should add\n# * to the FILE_PATTERNS.\n#\n# Note see also the list of default file extension mappings.\n\nEXTENSION_MAPPING      =\n\n# If the MARKDOWN_SUPPORT tag is enabled then doxygen pre-processes all comments\n# according to the Markdown format, which allows for more readable\n# documentation. See https://daringfireball.net/projects/markdown/ for details.\n# The output of markdown processing is further processed by doxygen, so you can\n# mix doxygen, HTML, and XML commands with Markdown formatting. Disable only in\n# case of backward compatibilities issues.\n# The default value is: YES.\n\nMARKDOWN_SUPPORT       = YES\n\n# When the TOC_INCLUDE_HEADINGS tag is set to a non-zero value, all headings up\n# to that level are automatically included in the table of contents, even if\n# they do not have an id attribute.\n# Note: This feature currently applies only to Markdown headings.\n# Minimum value: 0, maximum value: 99, default value: 5.\n# This tag requires that the tag MARKDOWN_SUPPORT is set to YES.\n\nTOC_INCLUDE_HEADINGS   = 5\n\n# The MARKDOWN_ID_STYLE tag can be used to specify the algorithm used to\n# generate identifiers for the Markdown headings. Note: Every identifier is\n# unique.\n# Possible values are: DOXYGEN use a fixed 'autotoc_md' string followed by a\n# sequence number starting at 0 and GITHUB use the lower case version of title\n# with any whitespace replaced by '-' and punctuation characters removed.\n# The default value is: DOXYGEN.\n# This tag requires that the tag MARKDOWN_SUPPORT is set to YES.\n\nMARKDOWN_ID_STYLE      = DOXYGEN\n\n# When enabled doxygen tries to link words that correspond to documented\n# classes, or namespaces to their corresponding documentation. Such a link can\n# be prevented in individual cases by putting a % sign in front of the word or\n# globally by setting AUTOLINK_SUPPORT to NO.\n# The default value is: YES.\n\nAUTOLINK_SUPPORT       = YES\n\n# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want\n# to include (a tag file for) the STL sources as input, then you should set this\n# tag to YES in order to let doxygen match functions declarations and\n# definitions whose arguments contain STL classes (e.g. func(std::string);\n# versus func(std::string) {}). This also make the inheritance and collaboration\n# diagrams that involve STL classes more complete and accurate.\n# The default value is: NO.\n\nBUILTIN_STL_SUPPORT    = NO\n\n# If you use Microsoft's C++/CLI language, you should set this option to YES to\n# enable parsing support.\n# The default value is: NO.\n\nCPP_CLI_SUPPORT        = NO\n\n# Set the SIP_SUPPORT tag to YES if your project consists of sip (see:\n# https://www.riverbankcomputing.com/software/sip/intro) sources only. Doxygen\n# will parse them like normal C++ but will assume all classes use public instead\n# of private inheritance when no explicit protection keyword is present.\n# The default value is: NO.\n\nSIP_SUPPORT            = NO\n\n# For Microsoft's IDL there are propget and propput attributes to indicate\n# getter and setter methods for a property. Setting this option to YES will make\n# doxygen to replace the get and set methods by a property in the documentation.\n# This will only work if the methods are indeed getting or setting a simple\n# type. If this is not the case, or you want to show the methods anyway, you\n# should set this option to NO.\n# The default value is: YES.\n\nIDL_PROPERTY_SUPPORT   = YES\n\n# If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC\n# tag is set to YES then doxygen will reuse the documentation of the first\n# member in the group (if any) for the other members of the group. By default\n# all members of a group must be documented explicitly.\n# The default value is: NO.\n\nDISTRIBUTE_GROUP_DOC   = NO\n\n# If one adds a struct or class to a group and this option is enabled, then also\n# any nested class or struct is added to the same group. By default this option\n# is disabled and one has to add nested compounds explicitly via \\ingroup.\n# The default value is: NO.\n\nGROUP_NESTED_COMPOUNDS = NO\n\n# Set the SUBGROUPING tag to YES to allow class member groups of the same type\n# (for instance a group of public functions) to be put as a subgroup of that\n# type (e.g. under the Public Functions section). Set it to NO to prevent\n# subgrouping. Alternatively, this can be done per class using the\n# \\nosubgrouping command.\n# The default value is: YES.\n\nSUBGROUPING            = YES\n\n# When the INLINE_GROUPED_CLASSES tag is set to YES, classes, structs and unions\n# are shown inside the group in which they are included (e.g. using \\ingroup)\n# instead of on a separate page (for HTML and Man pages) or section (for LaTeX\n# and RTF).\n#\n# Note that this feature does not work in combination with\n# SEPARATE_MEMBER_PAGES.\n# The default value is: NO.\n\nINLINE_GROUPED_CLASSES = NO\n\n# When the INLINE_SIMPLE_STRUCTS tag is set to YES, structs, classes, and unions\n# with only public data fields or simple typedef fields will be shown inline in\n# the documentation of the scope in which they are defined (i.e. file,\n# namespace, or group documentation), provided this scope is documented. If set\n# to NO, structs, classes, and unions are shown on a separate page (for HTML and\n# Man pages) or section (for LaTeX and RTF).\n# The default value is: NO.\n\nINLINE_SIMPLE_STRUCTS  = NO\n\n# When TYPEDEF_HIDES_STRUCT tag is enabled, a typedef of a struct, union, or\n# enum is documented as struct, union, or enum with the name of the typedef. So\n# typedef struct TypeS {} TypeT, will appear in the documentation as a struct\n# with name TypeT. When disabled the typedef will appear as a member of a file,\n# namespace, or class. And the struct will be named TypeS. This can typically be\n# useful for C code in case the coding convention dictates that all compound\n# types are typedef'ed and only the typedef is referenced, never the tag name.\n# The default value is: NO.\n\nTYPEDEF_HIDES_STRUCT   = YES\n\n# The size of the symbol lookup cache can be set using LOOKUP_CACHE_SIZE. This\n# cache is used to resolve symbols given their name and scope. Since this can be\n# an expensive process and often the same symbol appears multiple times in the\n# code, doxygen keeps a cache of pre-resolved symbols. If the cache is too small\n# doxygen will become slower. If the cache is too large, memory is wasted. The\n# cache size is given by this formula: 2^(16+LOOKUP_CACHE_SIZE). The valid range\n# is 0..9, the default is 0, corresponding to a cache size of 2^16=65536\n# symbols. At the end of a run doxygen will report the cache usage and suggest\n# the optimal cache size from a speed point of view.\n# Minimum value: 0, maximum value: 9, default value: 0.\n\nLOOKUP_CACHE_SIZE      = 0\n\n# The NUM_PROC_THREADS specifies the number of threads doxygen is allowed to use\n# during processing. When set to 0 doxygen will based this on the number of\n# cores available in the system. You can set it explicitly to a value larger\n# than 0 to get more control over the balance between CPU load and processing\n# speed. At this moment only the input processing can be done using multiple\n# threads. Since this is still an experimental feature the default is set to 1,\n# which effectively disables parallel processing. Please report any issues you\n# encounter. Generating dot graphs in parallel is controlled by the\n# DOT_NUM_THREADS setting.\n# Minimum value: 0, maximum value: 32, default value: 1.\n\nNUM_PROC_THREADS       = 1\n\n# If the TIMESTAMP tag is set different from NO then each generated page will\n# contain the date or date and time when the page was generated. Setting this to\n# NO can help when comparing the output of multiple runs.\n# Possible values are: YES, NO, DATETIME and DATE.\n# The default value is: NO.\n\nTIMESTAMP              = NO\n\n#---------------------------------------------------------------------------\n# Build related configuration options\n#---------------------------------------------------------------------------\n\n# If the EXTRACT_ALL tag is set to YES, doxygen will assume all entities in\n# documentation are documented, even if no documentation was available. Private\n# class members and static file members will be hidden unless the\n# EXTRACT_PRIVATE respectively EXTRACT_STATIC tags are set to YES.\n# Note: This will also disable the warnings about undocumented members that are\n# normally produced when WARNINGS is set to YES.\n# The default value is: NO.\n\nEXTRACT_ALL            = NO\n\n# If the EXTRACT_PRIVATE tag is set to YES, all private members of a class will\n# be included in the documentation.\n# The default value is: NO.\n\nEXTRACT_PRIVATE        = NO\n\n# If the EXTRACT_PRIV_VIRTUAL tag is set to YES, documented private virtual\n# methods of a class will be included in the documentation.\n# The default value is: NO.\n\nEXTRACT_PRIV_VIRTUAL   = NO\n\n# If the EXTRACT_PACKAGE tag is set to YES, all members with package or internal\n# scope will be included in the documentation.\n# The default value is: NO.\n\nEXTRACT_PACKAGE        = NO\n\n# If the EXTRACT_STATIC tag is set to YES, all static members of a file will be\n# included in the documentation.\n# The default value is: NO.\n\nEXTRACT_STATIC         = YES\n\n# If the EXTRACT_LOCAL_CLASSES tag is set to YES, classes (and structs) defined\n# locally in source files will be included in the documentation. If set to NO,\n# only classes defined in header files are included. Does not have any effect\n# for Java sources.\n# The default value is: YES.\n\nEXTRACT_LOCAL_CLASSES  = NO\n\n# This flag is only useful for Objective-C code. If set to YES, local methods,\n# which are defined in the implementation section but not in the interface are\n# included in the documentation. If set to NO, only methods in the interface are\n# included.\n# The default value is: NO.\n\nEXTRACT_LOCAL_METHODS  = NO\n\n# If this flag is set to YES, the members of anonymous namespaces will be\n# extracted and appear in the documentation as a namespace called\n# 'anonymous_namespace{file}', where file will be replaced with the base name of\n# the file that contains the anonymous namespace. By default anonymous namespace\n# are hidden.\n# The default value is: NO.\n\nEXTRACT_ANON_NSPACES   = NO\n\n# If this flag is set to YES, the name of an unnamed parameter in a declaration\n# will be determined by the corresponding definition. By default unnamed\n# parameters remain unnamed in the output.\n# The default value is: YES.\n\nRESOLVE_UNNAMED_PARAMS = YES\n\n# If the HIDE_UNDOC_MEMBERS tag is set to YES, doxygen will hide all\n# undocumented members inside documented classes or files. If set to NO these\n# members will be included in the various overviews, but no documentation\n# section is generated. This option has no effect if EXTRACT_ALL is enabled.\n# The default value is: NO.\n\nHIDE_UNDOC_MEMBERS     = NO\n\n# If the HIDE_UNDOC_CLASSES tag is set to YES, doxygen will hide all\n# undocumented classes that are normally visible in the class hierarchy. If set\n# to NO, these classes will be included in the various overviews. This option\n# will also hide undocumented C++ concepts if enabled. This option has no effect\n# if EXTRACT_ALL is enabled.\n# The default value is: NO.\n\nHIDE_UNDOC_CLASSES     = NO\n\n# If the HIDE_FRIEND_COMPOUNDS tag is set to YES, doxygen will hide all friend\n# declarations. If set to NO, these declarations will be included in the\n# documentation.\n# The default value is: NO.\n\nHIDE_FRIEND_COMPOUNDS  = NO\n\n# If the HIDE_IN_BODY_DOCS tag is set to YES, doxygen will hide any\n# documentation blocks found inside the body of a function. If set to NO, these\n# blocks will be appended to the function's detailed documentation block.\n# The default value is: NO.\n\nHIDE_IN_BODY_DOCS      = NO\n\n# The INTERNAL_DOCS tag determines if documentation that is typed after a\n# \\internal command is included. If the tag is set to NO then the documentation\n# will be excluded. Set it to YES to include the internal documentation.\n# The default value is: NO.\n\nINTERNAL_DOCS          = NO\n\n# With the correct setting of option CASE_SENSE_NAMES doxygen will better be\n# able to match the capabilities of the underlying filesystem. In case the\n# filesystem is case sensitive (i.e. it supports files in the same directory\n# whose names only differ in casing), the option must be set to YES to properly\n# deal with such files in case they appear in the input. For filesystems that\n# are not case sensitive the option should be set to NO to properly deal with\n# output files written for symbols that only differ in casing, such as for two\n# classes, one named CLASS and the other named Class, and to also support\n# references to files without having to specify the exact matching casing. On\n# Windows (including Cygwin) and MacOS, users should typically set this option\n# to NO, whereas on Linux or other Unix flavors it should typically be set to\n# YES.\n# Possible values are: SYSTEM, NO and YES.\n# The default value is: SYSTEM.\n\nCASE_SENSE_NAMES       = YES\n\n# If the HIDE_SCOPE_NAMES tag is set to NO then doxygen will show members with\n# their full class and namespace scopes in the documentation. If set to YES, the\n# scope will be hidden.\n# The default value is: NO.\n\nHIDE_SCOPE_NAMES       = NO\n\n# If the HIDE_COMPOUND_REFERENCE tag is set to NO (default) then doxygen will\n# append additional text to a page's title, such as Class Reference. If set to\n# YES the compound reference will be hidden.\n# The default value is: NO.\n\nHIDE_COMPOUND_REFERENCE= NO\n\n# If the SHOW_HEADERFILE tag is set to YES then the documentation for a class\n# will show which file needs to be included to use the class.\n# The default value is: YES.\n\nSHOW_HEADERFILE        = YES\n\n# If the SHOW_INCLUDE_FILES tag is set to YES then doxygen will put a list of\n# the files that are included by a file in the documentation of that file.\n# The default value is: YES.\n\nSHOW_INCLUDE_FILES     = NO\n\n# If the SHOW_GROUPED_MEMB_INC tag is set to YES then Doxygen will add for each\n# grouped member an include statement to the documentation, telling the reader\n# which file to include in order to use the member.\n# The default value is: NO.\n\nSHOW_GROUPED_MEMB_INC  = NO\n\n# If the FORCE_LOCAL_INCLUDES tag is set to YES then doxygen will list include\n# files with double quotes in the documentation rather than with sharp brackets.\n# The default value is: NO.\n\nFORCE_LOCAL_INCLUDES   = NO\n\n# If the INLINE_INFO tag is set to YES then a tag [inline] is inserted in the\n# documentation for inline members.\n# The default value is: YES.\n\nINLINE_INFO            = YES\n\n# If the SORT_MEMBER_DOCS tag is set to YES then doxygen will sort the\n# (detailed) documentation of file and class members alphabetically by member\n# name. If set to NO, the members will appear in declaration order.\n# The default value is: YES.\n\nSORT_MEMBER_DOCS       = NO\n\n# If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the brief\n# descriptions of file, namespace and class members alphabetically by member\n# name. If set to NO, the members will appear in declaration order. Note that\n# this will also influence the order of the classes in the class list.\n# The default value is: NO.\n\nSORT_BRIEF_DOCS        = NO\n\n# If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen will sort the\n# (brief and detailed) documentation of class members so that constructors and\n# destructors are listed first. If set to NO the constructors will appear in the\n# respective orders defined by SORT_BRIEF_DOCS and SORT_MEMBER_DOCS.\n# Note: If SORT_BRIEF_DOCS is set to NO this option is ignored for sorting brief\n# member documentation.\n# Note: If SORT_MEMBER_DOCS is set to NO this option is ignored for sorting\n# detailed member documentation.\n# The default value is: NO.\n\nSORT_MEMBERS_CTORS_1ST = NO\n\n# If the SORT_GROUP_NAMES tag is set to YES then doxygen will sort the hierarchy\n# of group names into alphabetical order. If set to NO the group names will\n# appear in their defined order.\n# The default value is: NO.\n\nSORT_GROUP_NAMES       = YES\n\n# If the SORT_BY_SCOPE_NAME tag is set to YES, the class list will be sorted by\n# fully-qualified names, including namespaces. If set to NO, the class list will\n# be sorted only by class name, not including the namespace part.\n# Note: This option is not very useful if HIDE_SCOPE_NAMES is set to YES.\n# Note: This option applies only to the class list, not to the alphabetical\n# list.\n# The default value is: NO.\n\nSORT_BY_SCOPE_NAME     = NO\n\n# If the STRICT_PROTO_MATCHING option is enabled and doxygen fails to do proper\n# type resolution of all parameters of a function it will reject a match between\n# the prototype and the implementation of a member function even if there is\n# only one candidate or it is obvious which candidate to choose by doing a\n# simple string match. By disabling STRICT_PROTO_MATCHING doxygen will still\n# accept a match between prototype and implementation in such cases.\n# The default value is: NO.\n\nSTRICT_PROTO_MATCHING  = NO\n\n# The GENERATE_TODOLIST tag can be used to enable (YES) or disable (NO) the todo\n# list. This list is created by putting \\todo commands in the documentation.\n# The default value is: YES.\n\nGENERATE_TODOLIST      = NO\n\n# The GENERATE_TESTLIST tag can be used to enable (YES) or disable (NO) the test\n# list. This list is created by putting \\test commands in the documentation.\n# The default value is: YES.\n\nGENERATE_TESTLIST      = NO\n\n# The GENERATE_BUGLIST tag can be used to enable (YES) or disable (NO) the bug\n# list. This list is created by putting \\bug commands in the documentation.\n# The default value is: YES.\n\nGENERATE_BUGLIST       = NO\n\n# The GENERATE_DEPRECATEDLIST tag can be used to enable (YES) or disable (NO)\n# the deprecated list. This list is created by putting \\deprecated commands in\n# the documentation.\n# The default value is: YES.\n\nGENERATE_DEPRECATEDLIST= NO\n\n# The ENABLED_SECTIONS tag can be used to enable conditional documentation\n# sections, marked by \\if <section_label> ... \\endif and \\cond <section_label>\n# ... \\endcond blocks.\n\nENABLED_SECTIONS       =\n\n# The MAX_INITIALIZER_LINES tag determines the maximum number of lines that the\n# initial value of a variable or macro / define can have for it to appear in the\n# documentation. If the initializer consists of more lines than specified here\n# it will be hidden. Use a value of 0 to hide initializers completely. The\n# appearance of the value of individual variables and macros / defines can be\n# controlled using \\showinitializer or \\hideinitializer command in the\n# documentation regardless of this setting.\n# Minimum value: 0, maximum value: 10000, default value: 30.\n\nMAX_INITIALIZER_LINES  = 30\n\n# Set the SHOW_USED_FILES tag to NO to disable the list of files generated at\n# the bottom of the documentation of classes and structs. If set to YES, the\n# list will mention the files that were used to generate the documentation.\n# The default value is: YES.\n\nSHOW_USED_FILES        = NO\n\n# Set the SHOW_FILES tag to NO to disable the generation of the Files page. This\n# will remove the Files entry from the Quick Index and from the Folder Tree View\n# (if specified).\n# The default value is: YES.\n\nSHOW_FILES             = YES\n\n# Set the SHOW_NAMESPACES tag to NO to disable the generation of the Namespaces\n# page. This will remove the Namespaces entry from the Quick Index and from the\n# Folder Tree View (if specified).\n# The default value is: YES.\n\nSHOW_NAMESPACES        = YES\n\n# The FILE_VERSION_FILTER tag can be used to specify a program or script that\n# doxygen should invoke to get the current version for each file (typically from\n# the version control system). Doxygen will invoke the program by executing (via\n# popen()) the command command input-file, where command is the value of the\n# FILE_VERSION_FILTER tag, and input-file is the name of an input file provided\n# by doxygen. Whatever the program writes to standard output is used as the file\n# version. For an example see the documentation.\n\nFILE_VERSION_FILTER    =\n\n# The LAYOUT_FILE tag can be used to specify a layout file which will be parsed\n# by doxygen. The layout file controls the global structure of the generated\n# output files in an output format independent way. To create the layout file\n# that represents doxygen's defaults, run doxygen with the -l option. You can\n# optionally specify a file name after the option, if omitted DoxygenLayout.xml\n# will be used as the name of the layout file. See also section \"Changing the\n# layout of pages\" for information.\n#\n# Note that if you run doxygen from a directory containing a file called\n# DoxygenLayout.xml, doxygen will parse it automatically even if the LAYOUT_FILE\n# tag is left empty.\n\nLAYOUT_FILE            =\n\n# The CITE_BIB_FILES tag can be used to specify one or more bib files containing\n# the reference definitions. This must be a list of .bib files. The .bib\n# extension is automatically appended if omitted. This requires the bibtex tool\n# to be installed. See also https://en.wikipedia.org/wiki/BibTeX for more info.\n# For LaTeX the style of the bibliography can be controlled using\n# LATEX_BIB_STYLE. To use this feature you need bibtex and perl available in the\n# search path. See also \\cite for info how to create references.\n\nCITE_BIB_FILES         =\n\n#---------------------------------------------------------------------------\n# Configuration options related to warning and progress messages\n#---------------------------------------------------------------------------\n\n# The QUIET tag can be used to turn on/off the messages that are generated to\n# standard output by doxygen. If QUIET is set to YES this implies that the\n# messages are off.\n# The default value is: NO.\n\nQUIET                  = YES\n\n# The WARNINGS tag can be used to turn on/off the warning messages that are\n# generated to standard error (stderr) by doxygen. If WARNINGS is set to YES\n# this implies that the warnings are on.\n#\n# Tip: Turn warnings on while writing the documentation.\n# The default value is: YES.\n\nWARNINGS               = YES\n\n# If the WARN_IF_UNDOCUMENTED tag is set to YES then doxygen will generate\n# warnings for undocumented members. If EXTRACT_ALL is set to YES then this flag\n# will automatically be disabled.\n# The default value is: YES.\n\nWARN_IF_UNDOCUMENTED   = NO\n\n# If the WARN_IF_DOC_ERROR tag is set to YES, doxygen will generate warnings for\n# potential errors in the documentation, such as documenting some parameters in\n# a documented function twice, or documenting parameters that don't exist or\n# using markup commands wrongly.\n# The default value is: YES.\n\nWARN_IF_DOC_ERROR      = YES\n\n# If WARN_IF_INCOMPLETE_DOC is set to YES, doxygen will warn about incomplete\n# function parameter documentation. If set to NO, doxygen will accept that some\n# parameters have no documentation without warning.\n# The default value is: YES.\n\nWARN_IF_INCOMPLETE_DOC = YES\n\n# This WARN_NO_PARAMDOC option can be enabled to get warnings for functions that\n# are documented, but have no documentation for their parameters or return\n# value. If set to NO, doxygen will only warn about wrong parameter\n# documentation, but not about the absence of documentation. If EXTRACT_ALL is\n# set to YES then this flag will automatically be disabled. See also\n# WARN_IF_INCOMPLETE_DOC\n# The default value is: NO.\n\nWARN_NO_PARAMDOC       = YES\n\n# If WARN_IF_UNDOC_ENUM_VAL option is set to YES, doxygen will warn about\n# undocumented enumeration values. If set to NO, doxygen will accept\n# undocumented enumeration values. If EXTRACT_ALL is set to YES then this flag\n# will automatically be disabled.\n# The default value is: NO.\n\nWARN_IF_UNDOC_ENUM_VAL = NO\n\n# If the WARN_AS_ERROR tag is set to YES then doxygen will immediately stop when\n# a warning is encountered. If the WARN_AS_ERROR tag is set to FAIL_ON_WARNINGS\n# then doxygen will continue running as if WARN_AS_ERROR tag is set to NO, but\n# at the end of the doxygen process doxygen will return with a non-zero status.\n# If the WARN_AS_ERROR tag is set to FAIL_ON_WARNINGS_PRINT then doxygen behaves\n# like FAIL_ON_WARNINGS but in case no WARN_LOGFILE is defined doxygen will not\n# write the warning messages in between other messages but write them at the end\n# of a run, in case a WARN_LOGFILE is defined the warning messages will be\n# besides being in the defined file also be shown at the end of a run, unless\n# the WARN_LOGFILE is defined as - i.e. standard output (stdout) in that case\n# the behavior will remain as with the setting FAIL_ON_WARNINGS.\n# Possible values are: NO, YES, FAIL_ON_WARNINGS and FAIL_ON_WARNINGS_PRINT.\n# The default value is: NO.\n\nWARN_AS_ERROR          = NO\n\n# The WARN_FORMAT tag determines the format of the warning messages that doxygen\n# can produce. The string should contain the $file, $line, and $text tags, which\n# will be replaced by the file and line number from which the warning originated\n# and the warning text. Optionally the format may contain $version, which will\n# be replaced by the version of the file (if it could be obtained via\n# FILE_VERSION_FILTER)\n# See also: WARN_LINE_FORMAT\n# The default value is: $file:$line: $text.\n\nWARN_FORMAT            = \"$file:$line: $text\"\n\n# In the $text part of the WARN_FORMAT command it is possible that a reference\n# to a more specific place is given. To make it easier to jump to this place\n# (outside of doxygen) the user can define a custom \"cut\" / \"paste\" string.\n# Example:\n# WARN_LINE_FORMAT = \"'vi $file +$line'\"\n# See also: WARN_FORMAT\n# The default value is: at line $line of file $file.\n\nWARN_LINE_FORMAT       = \"at line $line of file $file\"\n\n# The WARN_LOGFILE tag can be used to specify a file to which warning and error\n# messages should be written. If left blank the output is written to standard\n# error (stderr). In case the file specified cannot be opened for writing the\n# warning and error messages are written to standard error. When as file - is\n# specified the warning and error messages are written to standard output\n# (stdout).\n\nWARN_LOGFILE           =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the input files\n#---------------------------------------------------------------------------\n\n# The INPUT tag is used to specify the files and/or directories that contain\n# documented source files. You may enter file names like myfile.cpp or\n# directories like /usr/src/myproject. Separate the files or directories with\n# spaces. See also FILE_PATTERNS and EXTENSION_MAPPING\n# Note: If this tag is empty the current directory is searched.\n\nINPUT                  = @SRC_DIR@/README.md \\\n                         @SRC_DIR@/README_LEGACY.md \\\n                         @SRC_DIR@/src\n\n# This tag can be used to specify the character encoding of the source files\n# that doxygen parses. Internally doxygen uses the UTF-8 encoding. Doxygen uses\n# libiconv (or the iconv built into libc) for the transcoding. See the libiconv\n# documentation (see:\n# https://www.gnu.org/software/libiconv/) for the list of possible encodings.\n# See also: INPUT_FILE_ENCODING\n# The default value is: UTF-8.\n\nINPUT_ENCODING         = UTF-8\n\n# This tag can be used to specify the character encoding of the source files\n# that doxygen parses The INPUT_FILE_ENCODING tag can be used to specify\n# character encoding on a per file pattern basis. Doxygen will compare the file\n# name with each pattern and apply the encoding instead of the default\n# INPUT_ENCODING) if there is a match. The character encodings are a list of the\n# form: pattern=encoding (like *.php=ISO-8859-1). See cfg_input_encoding\n# \"INPUT_ENCODING\" for further information on supported encodings.\n\nINPUT_FILE_ENCODING    =\n\n# If the value of the INPUT tag contains directories, you can use the\n# FILE_PATTERNS tag to specify one or more wildcard patterns (like *.cpp and\n# *.h) to filter out the source-files in the directories.\n#\n# Note that for custom extensions or not directly supported extensions you also\n# need to set EXTENSION_MAPPING for the extension otherwise the files are not\n# read by doxygen.\n#\n# Note the list of default checked file patterns might differ from the list of\n# default file extension mappings.\n#\n# If left blank the following patterns are tested:*.c, *.cc, *.cxx, *.cxxm,\n# *.cpp, *.cppm, *.c++, *.c++m, *.java, *.ii, *.ixx, *.ipp, *.i++, *.inl, *.idl,\n# *.ddl, *.odl, *.h, *.hh, *.hxx, *.hpp, *.h++, *.ixx, *.l, *.cs, *.d, *.php,\n# *.php4, *.php5, *.phtml, *.inc, *.m, *.markdown, *.md, *.mm, *.dox (to be\n# provided as doxygen C comment), *.py, *.pyw, *.f90, *.f95, *.f03, *.f08,\n# *.f18, *.f, *.for, *.vhd, *.vhdl, *.ucf, *.qsf and *.ice.\n\nFILE_PATTERNS          = *.h \\\n                         *.md\n\n# The RECURSIVE tag can be used to specify whether or not subdirectories should\n# be searched for input files as well.\n# The default value is: NO.\n\nRECURSIVE              = YES\n\n# The EXCLUDE tag can be used to specify files and/or directories that should be\n# excluded from the INPUT source files. This way you can easily exclude a\n# subdirectory from a directory tree whose root is specified with the INPUT tag.\n#\n# Note that relative paths are relative to the directory from which doxygen is\n# run.\n\nEXCLUDE                = @SRC_DIR@/src/include\n\n# The EXCLUDE_SYMLINKS tag can be used to select whether or not files or\n# directories that are symbolic links (a Unix file system feature) are excluded\n# from the input.\n# The default value is: NO.\n\nEXCLUDE_SYMLINKS       = YES\n\n# If the value of the INPUT tag contains directories, you can use the\n# EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude\n# certain files from those directories.\n#\n# Note that the wildcards are matched against the file with absolute path, so to\n# exclude all test directories for example use the pattern */test/*\n\nEXCLUDE_PATTERNS       = */.git/*\n\n# The EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names\n# (namespaces, classes, functions, etc.) that should be excluded from the\n# output. The symbol name can be a fully qualified name, a word, or if the\n# wildcard * is used, a substring. Examples: ANamespace, AClass,\n# ANamespace::AClass, ANamespace::*Test\n\nEXCLUDE_SYMBOLS        =\n\n# The EXAMPLE_PATH tag can be used to specify one or more files or directories\n# that contain example code fragments that are included (see the \\include\n# command).\n\nEXAMPLE_PATH           =\n\n# If the value of the EXAMPLE_PATH tag contains directories, you can use the\n# EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp and\n# *.h) to filter out the source-files in the directories. If left blank all\n# files are included.\n\nEXAMPLE_PATTERNS       =\n\n# If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be\n# searched for input files to be used with the \\include or \\dontinclude commands\n# irrespective of the value of the RECURSIVE tag.\n# The default value is: NO.\n\nEXAMPLE_RECURSIVE      = NO\n\n# The IMAGE_PATH tag can be used to specify one or more files or directories\n# that contain images that are to be included in the documentation (see the\n# \\image command).\n\nIMAGE_PATH             =\n\n# The INPUT_FILTER tag can be used to specify a program that doxygen should\n# invoke to filter for each input file. Doxygen will invoke the filter program\n# by executing (via popen()) the command:\n#\n# <filter> <input-file>\n#\n# where <filter> is the value of the INPUT_FILTER tag, and <input-file> is the\n# name of an input file. Doxygen will then use the output that the filter\n# program writes to standard output. If FILTER_PATTERNS is specified, this tag\n# will be ignored.\n#\n# Note that the filter must not add or remove lines; it is applied before the\n# code is scanned, but not when the output code is generated. If lines are added\n# or removed, the anchors will not be placed correctly.\n#\n# Note that doxygen will use the data processed and written to standard output\n# for further processing, therefore nothing else, like debug statements or used\n# commands (so in case of a Windows batch file always use @echo OFF), should be\n# written to standard output.\n#\n# Note that for custom extensions or not directly supported extensions you also\n# need to set EXTENSION_MAPPING for the extension otherwise the files are not\n# properly processed by doxygen.\n\nINPUT_FILTER           =\n\n# The FILTER_PATTERNS tag can be used to specify filters on a per file pattern\n# basis. Doxygen will compare the file name with each pattern and apply the\n# filter if there is a match. The filters are a list of the form: pattern=filter\n# (like *.cpp=my_cpp_filter). See INPUT_FILTER for further information on how\n# filters are used. If the FILTER_PATTERNS tag is empty or if none of the\n# patterns match the file name, INPUT_FILTER is applied.\n#\n# Note that for custom extensions or not directly supported extensions you also\n# need to set EXTENSION_MAPPING for the extension otherwise the files are not\n# properly processed by doxygen.\n\nFILTER_PATTERNS        =\n\n# If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using\n# INPUT_FILTER) will also be used to filter the input files that are used for\n# producing the source files to browse (i.e. when SOURCE_BROWSER is set to YES).\n# The default value is: NO.\n\nFILTER_SOURCE_FILES    = NO\n\n# The FILTER_SOURCE_PATTERNS tag can be used to specify source filters per file\n# pattern. A pattern will override the setting for FILTER_PATTERN (if any) and\n# it is also possible to disable source filtering for a specific pattern using\n# *.ext= (so without naming a filter).\n# This tag requires that the tag FILTER_SOURCE_FILES is set to YES.\n\nFILTER_SOURCE_PATTERNS =\n\n# If the USE_MDFILE_AS_MAINPAGE tag refers to the name of a markdown file that\n# is part of the input, its contents will be placed on the main page\n# (index.html). This can be useful if you have a project on for instance GitHub\n# and want to reuse the introduction page also for the doxygen output.\n\nUSE_MDFILE_AS_MAINPAGE =\n\n# The Fortran standard specifies that for fixed formatted Fortran code all\n# characters from position 72 are to be considered as comment. A common\n# extension is to allow longer lines before the automatic comment starts. The\n# setting FORTRAN_COMMENT_AFTER will also make it possible that longer lines can\n# be processed before the automatic comment starts.\n# Minimum value: 7, maximum value: 10000, default value: 72.\n\nFORTRAN_COMMENT_AFTER  = 72\n\n#---------------------------------------------------------------------------\n# Configuration options related to source browsing\n#---------------------------------------------------------------------------\n\n# If the SOURCE_BROWSER tag is set to YES then a list of source files will be\n# generated. Documented entities will be cross-referenced with these sources.\n#\n# Note: To get rid of all source code in the generated output, make sure that\n# also VERBATIM_HEADERS is set to NO.\n# The default value is: NO.\n\nSOURCE_BROWSER         = YES\n\n# Setting the INLINE_SOURCES tag to YES will include the body of functions,\n# classes and enums directly into the documentation.\n# The default value is: NO.\n\nINLINE_SOURCES         = NO\n\n# Setting the STRIP_CODE_COMMENTS tag to YES will instruct doxygen to hide any\n# special comment blocks from generated source code fragments. Normal C, C++ and\n# Fortran comments will always remain visible.\n# The default value is: YES.\n\nSTRIP_CODE_COMMENTS    = NO\n\n# If the REFERENCED_BY_RELATION tag is set to YES then for each documented\n# entity all documented functions referencing it will be listed.\n# The default value is: NO.\n\nREFERENCED_BY_RELATION = NO\n\n# If the REFERENCES_RELATION tag is set to YES then for each documented function\n# all documented entities called/used by that function will be listed.\n# The default value is: NO.\n\nREFERENCES_RELATION    = NO\n\n# If the REFERENCES_LINK_SOURCE tag is set to YES and SOURCE_BROWSER tag is set\n# to YES then the hyperlinks from functions in REFERENCES_RELATION and\n# REFERENCED_BY_RELATION lists will link to the source code. Otherwise they will\n# link to the documentation.\n# The default value is: YES.\n\nREFERENCES_LINK_SOURCE = YES\n\n# If SOURCE_TOOLTIPS is enabled (the default) then hovering a hyperlink in the\n# source code will show a tooltip with additional information such as prototype,\n# brief description and links to the definition and documentation. Since this\n# will make the HTML file larger and loading of large files a bit slower, you\n# can opt to disable this feature.\n# The default value is: YES.\n# This tag requires that the tag SOURCE_BROWSER is set to YES.\n\nSOURCE_TOOLTIPS        = YES\n\n# If the USE_HTAGS tag is set to YES then the references to source code will\n# point to the HTML generated by the htags(1) tool instead of doxygen built-in\n# source browser. The htags tool is part of GNU's global source tagging system\n# (see https://www.gnu.org/software/global/global.html). You will need version\n# 4.8.6 or higher.\n#\n# To use it do the following:\n# - Install the latest version of global\n# - Enable SOURCE_BROWSER and USE_HTAGS in the configuration file\n# - Make sure the INPUT points to the root of the source tree\n# - Run doxygen as normal\n#\n# Doxygen will invoke htags (and that will in turn invoke gtags), so these\n# tools must be available from the command line (i.e. in the search path).\n#\n# The result: instead of the source browser generated by doxygen, the links to\n# source code will now point to the output of htags.\n# The default value is: NO.\n# This tag requires that the tag SOURCE_BROWSER is set to YES.\n\nUSE_HTAGS              = NO\n\n# If the VERBATIM_HEADERS tag is set the YES then doxygen will generate a\n# verbatim copy of the header file for each class for which an include is\n# specified. Set to NO to disable this.\n# See also: Section \\class.\n# The default value is: YES.\n\nVERBATIM_HEADERS       = YES\n\n# If the CLANG_ASSISTED_PARSING tag is set to YES then doxygen will use the\n# clang parser (see:\n# http://clang.llvm.org/) for more accurate parsing at the cost of reduced\n# performance. This can be particularly helpful with template rich C++ code for\n# which doxygen's built-in parser lacks the necessary type information.\n# Note: The availability of this option depends on whether or not doxygen was\n# generated with the -Duse_libclang=ON option for CMake.\n# The default value is: NO.\n\nCLANG_ASSISTED_PARSING = NO\n\n# If the CLANG_ASSISTED_PARSING tag is set to YES and the CLANG_ADD_INC_PATHS\n# tag is set to YES then doxygen will add the directory of each input to the\n# include path.\n# The default value is: YES.\n# This tag requires that the tag CLANG_ASSISTED_PARSING is set to YES.\n\nCLANG_ADD_INC_PATHS    = YES\n\n# If clang assisted parsing is enabled you can provide the compiler with command\n# line options that you would normally use when invoking the compiler. Note that\n# the include paths will already be set by doxygen for the files and directories\n# specified with INPUT and INCLUDE_PATH.\n# This tag requires that the tag CLANG_ASSISTED_PARSING is set to YES.\n\nCLANG_OPTIONS          =\n\n# If clang assisted parsing is enabled you can provide the clang parser with the\n# path to the directory containing a file called compile_commands.json. This\n# file is the compilation database (see:\n# http://clang.llvm.org/docs/HowToSetupToolingForLLVM.html) containing the\n# options used when the source files were built. This is equivalent to\n# specifying the -p option to a clang tool, such as clang-check. These options\n# will then be passed to the parser. Any options specified with CLANG_OPTIONS\n# will be added as well.\n# Note: The availability of this option depends on whether or not doxygen was\n# generated with the -Duse_libclang=ON option for CMake.\n\nCLANG_DATABASE_PATH    =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the alphabetical class index\n#---------------------------------------------------------------------------\n\n# If the ALPHABETICAL_INDEX tag is set to YES, an alphabetical index of all\n# compounds will be generated. Enable this if the project contains a lot of\n# classes, structs, unions or interfaces.\n# The default value is: YES.\n\nALPHABETICAL_INDEX     = YES\n\n# The IGNORE_PREFIX tag can be used to specify a prefix (or a list of prefixes)\n# that should be ignored while generating the index headers. The IGNORE_PREFIX\n# tag works for classes, function and member names. The entity will be placed in\n# the alphabetical list under the first letter of the entity name that remains\n# after removing the prefix.\n# This tag requires that the tag ALPHABETICAL_INDEX is set to YES.\n\nIGNORE_PREFIX          =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the HTML output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_HTML tag is set to YES, doxygen will generate HTML output\n# The default value is: YES.\n\nGENERATE_HTML          = YES\n\n# The HTML_OUTPUT tag is used to specify where the HTML docs will be put. If a\n# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of\n# it.\n# The default directory is: html.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_OUTPUT            = .\n\n# The HTML_FILE_EXTENSION tag can be used to specify the file extension for each\n# generated HTML page (for example: .htm, .php, .asp).\n# The default value is: .html.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_FILE_EXTENSION    = .html\n\n# The HTML_HEADER tag can be used to specify a user-defined HTML header file for\n# each generated HTML page. If the tag is left blank doxygen will generate a\n# standard header.\n#\n# To get valid HTML the header file that includes any scripts and style sheets\n# that doxygen needs, which is dependent on the configuration options used (e.g.\n# the setting GENERATE_TREEVIEW). It is highly recommended to start with a\n# default header using\n# doxygen -w html new_header.html new_footer.html new_stylesheet.css\n# YourConfigFile\n# and then modify the file new_header.html. See also section \"Doxygen usage\"\n# for information on how to generate the default header that doxygen normally\n# uses.\n# Note: The header is subject to change so you typically have to regenerate the\n# default header when upgrading to a newer version of doxygen. For a description\n# of the possible markers and block names see the documentation.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_HEADER            =\n\n# The HTML_FOOTER tag can be used to specify a user-defined HTML footer for each\n# generated HTML page. If the tag is left blank doxygen will generate a standard\n# footer. See HTML_HEADER for more information on how to generate a default\n# footer and what special commands can be used inside the footer. See also\n# section \"Doxygen usage\" for information on how to generate the default footer\n# that doxygen normally uses.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_FOOTER            =\n\n# The HTML_STYLESHEET tag can be used to specify a user-defined cascading style\n# sheet that is used by each HTML page. It can be used to fine-tune the look of\n# the HTML output. If left blank doxygen will generate a default style sheet.\n# See also section \"Doxygen usage\" for information on how to generate the style\n# sheet that doxygen normally uses.\n# Note: It is recommended to use HTML_EXTRA_STYLESHEET instead of this tag, as\n# it is more robust and this tag (HTML_STYLESHEET) will in the future become\n# obsolete.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_STYLESHEET        =\n\n# The HTML_EXTRA_STYLESHEET tag can be used to specify additional user-defined\n# cascading style sheets that are included after the standard style sheets\n# created by doxygen. Using this option one can overrule certain style aspects.\n# This is preferred over using HTML_STYLESHEET since it does not replace the\n# standard style sheet and is therefore more robust against future updates.\n# Doxygen will copy the style sheet files to the output directory.\n# Note: The order of the extra style sheet files is of importance (e.g. the last\n# style sheet in the list overrules the setting of the previous ones in the\n# list).\n# Note: Since the styling of scrollbars can currently not be overruled in\n# Webkit/Chromium, the styling will be left out of the default doxygen.css if\n# one or more extra stylesheets have been specified. So if scrollbar\n# customization is desired it has to be added explicitly. For an example see the\n# documentation.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_EXTRA_STYLESHEET  =\n\n# The HTML_EXTRA_FILES tag can be used to specify one or more extra images or\n# other source files which should be copied to the HTML output directory. Note\n# that these files will be copied to the base HTML output directory. Use the\n# $relpath^ marker in the HTML_HEADER and/or HTML_FOOTER files to load these\n# files. In the HTML_STYLESHEET file, use the file name only. Also note that the\n# files will be copied as-is; there are no commands or markers available.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_EXTRA_FILES       =\n\n# The HTML_COLORSTYLE tag can be used to specify if the generated HTML output\n# should be rendered with a dark or light theme.\n# Possible values are: LIGHT always generate light mode output, DARK always\n# generate dark mode output, AUTO_LIGHT automatically set the mode according to\n# the user preference, use light mode if no preference is set (the default),\n# AUTO_DARK automatically set the mode according to the user preference, use\n# dark mode if no preference is set and TOGGLE allow to user to switch between\n# light and dark mode via a button.\n# The default value is: AUTO_LIGHT.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_COLORSTYLE        = AUTO_LIGHT\n\n# The HTML_COLORSTYLE_HUE tag controls the color of the HTML output. Doxygen\n# will adjust the colors in the style sheet and background images according to\n# this color. Hue is specified as an angle on a color-wheel, see\n# https://en.wikipedia.org/wiki/Hue for more information. For instance the value\n# 0 represents red, 60 is yellow, 120 is green, 180 is cyan, 240 is blue, 300\n# purple, and 360 is red again.\n# Minimum value: 0, maximum value: 359, default value: 220.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_COLORSTYLE_HUE    = 220\n\n# The HTML_COLORSTYLE_SAT tag controls the purity (or saturation) of the colors\n# in the HTML output. For a value of 0 the output will use gray-scales only. A\n# value of 255 will produce the most vivid colors.\n# Minimum value: 0, maximum value: 255, default value: 100.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_COLORSTYLE_SAT    = 100\n\n# The HTML_COLORSTYLE_GAMMA tag controls the gamma correction applied to the\n# luminance component of the colors in the HTML output. Values below 100\n# gradually make the output lighter, whereas values above 100 make the output\n# darker. The value divided by 100 is the actual gamma applied, so 80 represents\n# a gamma of 0.8, The value 220 represents a gamma of 2.2, and 100 does not\n# change the gamma.\n# Minimum value: 40, maximum value: 240, default value: 80.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_COLORSTYLE_GAMMA  = 80\n\n# If the HTML_DYNAMIC_MENUS tag is set to YES then the generated HTML\n# documentation will contain a main index with vertical navigation menus that\n# are dynamically created via JavaScript. If disabled, the navigation index will\n# consists of multiple levels of tabs that are statically embedded in every HTML\n# page. Disable this option to support browsers that do not have JavaScript,\n# like the Qt help browser.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_DYNAMIC_MENUS     = YES\n\n# If the HTML_DYNAMIC_SECTIONS tag is set to YES then the generated HTML\n# documentation will contain sections that can be hidden and shown after the\n# page has loaded.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_DYNAMIC_SECTIONS  = YES\n\n# If the HTML_CODE_FOLDING tag is set to YES then classes and functions can be\n# dynamically folded and expanded in the generated HTML source code.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_CODE_FOLDING      = YES\n\n# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of entries\n# shown in the various tree structured indices initially; the user can expand\n# and collapse entries dynamically later on. Doxygen will expand the tree to\n# such a level that at most the specified number of entries are visible (unless\n# a fully collapsed tree already exceeds this amount). So setting the number of\n# entries 1 will produce a full collapsed tree by default. 0 is a special value\n# representing an infinite number of entries and will result in a full expanded\n# tree by default.\n# Minimum value: 0, maximum value: 9999, default value: 100.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_INDEX_NUM_ENTRIES = 100\n\n# If the GENERATE_DOCSET tag is set to YES, additional index files will be\n# generated that can be used as input for Apple's Xcode 3 integrated development\n# environment (see:\n# https://developer.apple.com/xcode/), introduced with OSX 10.5 (Leopard). To\n# create a documentation set, doxygen will generate a Makefile in the HTML\n# output directory. Running make will produce the docset in that directory and\n# running make install will install the docset in\n# ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find it at\n# startup. See https://developer.apple.com/library/archive/featuredarticles/Doxy\n# genXcode/_index.html for more information.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nGENERATE_DOCSET        = NO\n\n# This tag determines the name of the docset feed. A documentation feed provides\n# an umbrella under which multiple documentation sets from a single provider\n# (such as a company or product suite) can be grouped.\n# The default value is: Doxygen generated docs.\n# This tag requires that the tag GENERATE_DOCSET is set to YES.\n\nDOCSET_FEEDNAME        = \"Doxygen generated docs\"\n\n# This tag determines the URL of the docset feed. A documentation feed provides\n# an umbrella under which multiple documentation sets from a single provider\n# (such as a company or product suite) can be grouped.\n# This tag requires that the tag GENERATE_DOCSET is set to YES.\n\nDOCSET_FEEDURL         =\n\n# This tag specifies a string that should uniquely identify the documentation\n# set bundle. This should be a reverse domain-name style string, e.g.\n# com.mycompany.MyDocSet. Doxygen will append .docset to the name.\n# The default value is: org.doxygen.Project.\n# This tag requires that the tag GENERATE_DOCSET is set to YES.\n\nDOCSET_BUNDLE_ID       = org.doxygen.Project\n\n# The DOCSET_PUBLISHER_ID tag specifies a string that should uniquely identify\n# the documentation publisher. This should be a reverse domain-name style\n# string, e.g. com.mycompany.MyDocSet.documentation.\n# The default value is: org.doxygen.Publisher.\n# This tag requires that the tag GENERATE_DOCSET is set to YES.\n\nDOCSET_PUBLISHER_ID    = org.doxygen.Publisher\n\n# The DOCSET_PUBLISHER_NAME tag identifies the documentation publisher.\n# The default value is: Publisher.\n# This tag requires that the tag GENERATE_DOCSET is set to YES.\n\nDOCSET_PUBLISHER_NAME  = Publisher\n\n# If the GENERATE_HTMLHELP tag is set to YES then doxygen generates three\n# additional HTML index files: index.hhp, index.hhc, and index.hhk. The\n# index.hhp is a project file that can be read by Microsoft's HTML Help Workshop\n# on Windows. In the beginning of 2021 Microsoft took the original page, with\n# a.o. the download links, offline the HTML help workshop was already many years\n# in maintenance mode). You can download the HTML help workshop from the web\n# archives at Installation executable (see:\n# http://web.archive.org/web/20160201063255/http://download.microsoft.com/downlo\n# ad/0/A/9/0A939EF6-E31C-430F-A3DF-DFAE7960D564/htmlhelp.exe).\n#\n# The HTML Help Workshop contains a compiler that can convert all HTML output\n# generated by doxygen into a single compiled HTML file (.chm). Compiled HTML\n# files are now used as the Windows 98 help format, and will replace the old\n# Windows help format (.hlp) on all Windows platforms in the future. Compressed\n# HTML files also contain an index, a table of contents, and you can search for\n# words in the documentation. The HTML workshop also contains a viewer for\n# compressed HTML files.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nGENERATE_HTMLHELP      = NO\n\n# The CHM_FILE tag can be used to specify the file name of the resulting .chm\n# file. You can add a path in front of the file if the result should not be\n# written to the html output directory.\n# This tag requires that the tag GENERATE_HTMLHELP is set to YES.\n\nCHM_FILE               =\n\n# The HHC_LOCATION tag can be used to specify the location (absolute path\n# including file name) of the HTML help compiler (hhc.exe). If non-empty,\n# doxygen will try to run the HTML help compiler on the generated index.hhp.\n# The file has to be specified with full path.\n# This tag requires that the tag GENERATE_HTMLHELP is set to YES.\n\nHHC_LOCATION           =\n\n# The GENERATE_CHI flag controls if a separate .chi index file is generated\n# (YES) or that it should be included in the main .chm file (NO).\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTMLHELP is set to YES.\n\nGENERATE_CHI           = NO\n\n# The CHM_INDEX_ENCODING is used to encode HtmlHelp index (hhk), content (hhc)\n# and project file content.\n# This tag requires that the tag GENERATE_HTMLHELP is set to YES.\n\nCHM_INDEX_ENCODING     =\n\n# The BINARY_TOC flag controls whether a binary table of contents is generated\n# (YES) or a normal table of contents (NO) in the .chm file. Furthermore it\n# enables the Previous and Next buttons.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTMLHELP is set to YES.\n\nBINARY_TOC             = NO\n\n# The TOC_EXPAND flag can be set to YES to add extra items for group members to\n# the table of contents of the HTML help documentation and to the tree view.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTMLHELP is set to YES.\n\nTOC_EXPAND             = NO\n\n# The SITEMAP_URL tag is used to specify the full URL of the place where the\n# generated documentation will be placed on the server by the user during the\n# deployment of the documentation. The generated sitemap is called sitemap.xml\n# and placed on the directory specified by HTML_OUTPUT. In case no SITEMAP_URL\n# is specified no sitemap is generated. For information about the sitemap\n# protocol see https://www.sitemaps.org\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nSITEMAP_URL            =\n\n# If the GENERATE_QHP tag is set to YES and both QHP_NAMESPACE and\n# QHP_VIRTUAL_FOLDER are set, an additional index file will be generated that\n# can be used as input for Qt's qhelpgenerator to generate a Qt Compressed Help\n# (.qch) of the generated HTML documentation.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nGENERATE_QHP           = NO\n\n# If the QHG_LOCATION tag is specified, the QCH_FILE tag can be used to specify\n# the file name of the resulting .qch file. The path specified is relative to\n# the HTML output folder.\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQCH_FILE               =\n\n# The QHP_NAMESPACE tag specifies the namespace to use when generating Qt Help\n# Project output. For more information please see Qt Help Project / Namespace\n# (see:\n# https://doc.qt.io/archives/qt-4.8/qthelpproject.html#namespace).\n# The default value is: org.doxygen.Project.\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQHP_NAMESPACE          = org.doxygen.Project\n\n# The QHP_VIRTUAL_FOLDER tag specifies the namespace to use when generating Qt\n# Help Project output. For more information please see Qt Help Project / Virtual\n# Folders (see:\n# https://doc.qt.io/archives/qt-4.8/qthelpproject.html#virtual-folders).\n# The default value is: doc.\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQHP_VIRTUAL_FOLDER     = doc\n\n# If the QHP_CUST_FILTER_NAME tag is set, it specifies the name of a custom\n# filter to add. For more information please see Qt Help Project / Custom\n# Filters (see:\n# https://doc.qt.io/archives/qt-4.8/qthelpproject.html#custom-filters).\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQHP_CUST_FILTER_NAME   =\n\n# The QHP_CUST_FILTER_ATTRS tag specifies the list of the attributes of the\n# custom filter to add. For more information please see Qt Help Project / Custom\n# Filters (see:\n# https://doc.qt.io/archives/qt-4.8/qthelpproject.html#custom-filters).\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQHP_CUST_FILTER_ATTRS  =\n\n# The QHP_SECT_FILTER_ATTRS tag specifies the list of the attributes this\n# project's filter section matches. Qt Help Project / Filter Attributes (see:\n# https://doc.qt.io/archives/qt-4.8/qthelpproject.html#filter-attributes).\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQHP_SECT_FILTER_ATTRS  =\n\n# The QHG_LOCATION tag can be used to specify the location (absolute path\n# including file name) of Qt's qhelpgenerator. If non-empty doxygen will try to\n# run qhelpgenerator on the generated .qhp file.\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQHG_LOCATION           =\n\n# If the GENERATE_ECLIPSEHELP tag is set to YES, additional index files will be\n# generated, together with the HTML files, they form an Eclipse help plugin. To\n# install this plugin and make it available under the help contents menu in\n# Eclipse, the contents of the directory containing the HTML and XML files needs\n# to be copied into the plugins directory of eclipse. The name of the directory\n# within the plugins directory should be the same as the ECLIPSE_DOC_ID value.\n# After copying Eclipse needs to be restarted before the help appears.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nGENERATE_ECLIPSEHELP   = NO\n\n# A unique identifier for the Eclipse help plugin. When installing the plugin\n# the directory name containing the HTML and XML files should also have this\n# name. Each documentation set should have its own identifier.\n# The default value is: org.doxygen.Project.\n# This tag requires that the tag GENERATE_ECLIPSEHELP is set to YES.\n\nECLIPSE_DOC_ID         = org.doxygen.Project\n\n# If you want full control over the layout of the generated HTML pages it might\n# be necessary to disable the index and replace it with your own. The\n# DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs) at top\n# of each HTML page. A value of NO enables the index and the value YES disables\n# it. Since the tabs in the index contain the same information as the navigation\n# tree, you can set this option to YES if you also set GENERATE_TREEVIEW to YES.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nDISABLE_INDEX          = NO\n\n# The GENERATE_TREEVIEW tag is used to specify whether a tree-like index\n# structure should be generated to display hierarchical information. If the tag\n# value is set to YES, a side panel will be generated containing a tree-like\n# index structure (just like the one that is generated for HTML Help). For this\n# to work a browser that supports JavaScript, DHTML, CSS and frames is required\n# (i.e. any modern browser). Windows users are probably better off using the\n# HTML help feature. Via custom style sheets (see HTML_EXTRA_STYLESHEET) one can\n# further fine tune the look of the index (see \"Fine-tuning the output\"). As an\n# example, the default style sheet generated by doxygen has an example that\n# shows how to put an image at the root of the tree instead of the PROJECT_NAME.\n# Since the tree basically has the same information as the tab index, you could\n# consider setting DISABLE_INDEX to YES when enabling this option.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nGENERATE_TREEVIEW      = YES\n\n# When both GENERATE_TREEVIEW and DISABLE_INDEX are set to YES, then the\n# FULL_SIDEBAR option determines if the side bar is limited to only the treeview\n# area (value NO) or if it should extend to the full height of the window (value\n# YES). Setting this to YES gives a layout similar to\n# https://docs.readthedocs.io with more room for contents, but less room for the\n# project logo, title, and description. If either GENERATE_TREEVIEW or\n# DISABLE_INDEX is set to NO, this option has no effect.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nFULL_SIDEBAR           = NO\n\n# The ENUM_VALUES_PER_LINE tag can be used to set the number of enum values that\n# doxygen will group on one line in the generated HTML documentation.\n#\n# Note that a value of 0 will completely suppress the enum values from appearing\n# in the overview section.\n# Minimum value: 0, maximum value: 20, default value: 4.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nENUM_VALUES_PER_LINE   = 1\n\n# If the treeview is enabled (see GENERATE_TREEVIEW) then this tag can be used\n# to set the initial width (in pixels) of the frame in which the tree is shown.\n# Minimum value: 0, maximum value: 1500, default value: 250.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nTREEVIEW_WIDTH         = 250\n\n# If the EXT_LINKS_IN_WINDOW option is set to YES, doxygen will open links to\n# external symbols imported via tag files in a separate window.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nEXT_LINKS_IN_WINDOW    = NO\n\n# If the OBFUSCATE_EMAILS tag is set to YES, doxygen will obfuscate email\n# addresses.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nOBFUSCATE_EMAILS       = YES\n\n# If the HTML_FORMULA_FORMAT option is set to svg, doxygen will use the pdf2svg\n# tool (see https://github.com/dawbarton/pdf2svg) or inkscape (see\n# https://inkscape.org) to generate formulas as SVG images instead of PNGs for\n# the HTML output. These images will generally look nicer at scaled resolutions.\n# Possible values are: png (the default) and svg (looks nicer but requires the\n# pdf2svg or inkscape tool).\n# The default value is: png.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_FORMULA_FORMAT    = png\n\n# Use this tag to change the font size of LaTeX formulas included as images in\n# the HTML documentation. When you change the font size after a successful\n# doxygen run you need to manually remove any form_*.png images from the HTML\n# output directory to force them to be regenerated.\n# Minimum value: 8, maximum value: 50, default value: 10.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nFORMULA_FONTSIZE       = 10\n\n# The FORMULA_MACROFILE can contain LaTeX \\newcommand and \\renewcommand commands\n# to create new LaTeX commands to be used in formulas as building blocks. See\n# the section \"Including formulas\" for details.\n\nFORMULA_MACROFILE      =\n\n# Enable the USE_MATHJAX option to render LaTeX formulas using MathJax (see\n# https://www.mathjax.org) which uses client side JavaScript for the rendering\n# instead of using pre-rendered bitmaps. Use this if you do not have LaTeX\n# installed or if you want to formulas look prettier in the HTML output. When\n# enabled you may also need to install MathJax separately and configure the path\n# to it using the MATHJAX_RELPATH option.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nUSE_MATHJAX            = NO\n\n# With MATHJAX_VERSION it is possible to specify the MathJax version to be used.\n# Note that the different versions of MathJax have different requirements with\n# regards to the different settings, so it is possible that also other MathJax\n# settings have to be changed when switching between the different MathJax\n# versions.\n# Possible values are: MathJax_2 and MathJax_3.\n# The default value is: MathJax_2.\n# This tag requires that the tag USE_MATHJAX is set to YES.\n\nMATHJAX_VERSION        = MathJax_2\n\n# When MathJax is enabled you can set the default output format to be used for\n# the MathJax output. For more details about the output format see MathJax\n# version 2 (see:\n# http://docs.mathjax.org/en/v2.7-latest/output.html) and MathJax version 3\n# (see:\n# http://docs.mathjax.org/en/latest/web/components/output.html).\n# Possible values are: HTML-CSS (which is slower, but has the best\n# compatibility. This is the name for Mathjax version 2, for MathJax version 3\n# this will be translated into chtml), NativeMML (i.e. MathML. Only supported\n# for NathJax 2. For MathJax version 3 chtml will be used instead.), chtml (This\n# is the name for Mathjax version 3, for MathJax version 2 this will be\n# translated into HTML-CSS) and SVG.\n# The default value is: HTML-CSS.\n# This tag requires that the tag USE_MATHJAX is set to YES.\n\nMATHJAX_FORMAT         = HTML-CSS\n\n# When MathJax is enabled you need to specify the location relative to the HTML\n# output directory using the MATHJAX_RELPATH option. The destination directory\n# should contain the MathJax.js script. For instance, if the mathjax directory\n# is located at the same level as the HTML output directory, then\n# MATHJAX_RELPATH should be ../mathjax. The default value points to the MathJax\n# Content Delivery Network so you can quickly see the result without installing\n# MathJax. However, it is strongly recommended to install a local copy of\n# MathJax from https://www.mathjax.org before deployment. The default value is:\n# - in case of MathJax version 2: https://cdn.jsdelivr.net/npm/mathjax@2\n# - in case of MathJax version 3: https://cdn.jsdelivr.net/npm/mathjax@3\n# This tag requires that the tag USE_MATHJAX is set to YES.\n\nMATHJAX_RELPATH        = http://cdn.mathjax.org/mathjax/latest\n\n# The MATHJAX_EXTENSIONS tag can be used to specify one or more MathJax\n# extension names that should be enabled during MathJax rendering. For example\n# for MathJax version 2 (see\n# https://docs.mathjax.org/en/v2.7-latest/tex.html#tex-and-latex-extensions):\n# MATHJAX_EXTENSIONS = TeX/AMSmath TeX/AMSsymbols\n# For example for MathJax version 3 (see\n# http://docs.mathjax.org/en/latest/input/tex/extensions/index.html):\n# MATHJAX_EXTENSIONS = ams\n# This tag requires that the tag USE_MATHJAX is set to YES.\n\nMATHJAX_EXTENSIONS     =\n\n# The MATHJAX_CODEFILE tag can be used to specify a file with javascript pieces\n# of code that will be used on startup of the MathJax code. See the MathJax site\n# (see:\n# http://docs.mathjax.org/en/v2.7-latest/output.html) for more details. For an\n# example see the documentation.\n# This tag requires that the tag USE_MATHJAX is set to YES.\n\nMATHJAX_CODEFILE       =\n\n# When the SEARCHENGINE tag is enabled doxygen will generate a search box for\n# the HTML output. The underlying search engine uses javascript and DHTML and\n# should work on any modern browser. Note that when using HTML help\n# (GENERATE_HTMLHELP), Qt help (GENERATE_QHP), or docsets (GENERATE_DOCSET)\n# there is already a search function so this one should typically be disabled.\n# For large projects the javascript based search engine can be slow, then\n# enabling SERVER_BASED_SEARCH may provide a better solution. It is possible to\n# search using the keyboard; to jump to the search box use <access key> + S\n# (what the <access key> is depends on the OS and browser, but it is typically\n# <CTRL>, <ALT>/<option>, or both). Inside the search box use the <cursor down\n# key> to jump into the search results window, the results can be navigated\n# using the <cursor keys>. Press <Enter> to select an item or <escape> to cancel\n# the search. The filter options can be selected when the cursor is inside the\n# search box by pressing <Shift>+<cursor down>. Also here use the <cursor keys>\n# to select a filter and <Enter> or <escape> to activate or cancel the filter\n# option.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nSEARCHENGINE           = YES\n\n# When the SERVER_BASED_SEARCH tag is enabled the search engine will be\n# implemented using a web server instead of a web client using JavaScript. There\n# are two flavors of web server based searching depending on the EXTERNAL_SEARCH\n# setting. When disabled, doxygen will generate a PHP script for searching and\n# an index file used by the script. When EXTERNAL_SEARCH is enabled the indexing\n# and searching needs to be provided by external tools. See the section\n# \"External Indexing and Searching\" for details.\n# The default value is: NO.\n# This tag requires that the tag SEARCHENGINE is set to YES.\n\nSERVER_BASED_SEARCH    = NO\n\n# When EXTERNAL_SEARCH tag is enabled doxygen will no longer generate the PHP\n# script for searching. Instead the search results are written to an XML file\n# which needs to be processed by an external indexer. Doxygen will invoke an\n# external search engine pointed to by the SEARCHENGINE_URL option to obtain the\n# search results.\n#\n# Doxygen ships with an example indexer (doxyindexer) and search engine\n# (doxysearch.cgi) which are based on the open source search engine library\n# Xapian (see:\n# https://xapian.org/).\n#\n# See the section \"External Indexing and Searching\" for details.\n# The default value is: NO.\n# This tag requires that the tag SEARCHENGINE is set to YES.\n\nEXTERNAL_SEARCH        = NO\n\n# The SEARCHENGINE_URL should point to a search engine hosted by a web server\n# which will return the search results when EXTERNAL_SEARCH is enabled.\n#\n# Doxygen ships with an example indexer (doxyindexer) and search engine\n# (doxysearch.cgi) which are based on the open source search engine library\n# Xapian (see:\n# https://xapian.org/). See the section \"External Indexing and Searching\" for\n# details.\n# This tag requires that the tag SEARCHENGINE is set to YES.\n\nSEARCHENGINE_URL       =\n\n# When SERVER_BASED_SEARCH and EXTERNAL_SEARCH are both enabled the unindexed\n# search data is written to a file for indexing by an external tool. With the\n# SEARCHDATA_FILE tag the name of this file can be specified.\n# The default file is: searchdata.xml.\n# This tag requires that the tag SEARCHENGINE is set to YES.\n\nSEARCHDATA_FILE        = searchdata.xml\n\n# When SERVER_BASED_SEARCH and EXTERNAL_SEARCH are both enabled the\n# EXTERNAL_SEARCH_ID tag can be used as an identifier for the project. This is\n# useful in combination with EXTRA_SEARCH_MAPPINGS to search through multiple\n# projects and redirect the results back to the right project.\n# This tag requires that the tag SEARCHENGINE is set to YES.\n\nEXTERNAL_SEARCH_ID     =\n\n# The EXTRA_SEARCH_MAPPINGS tag can be used to enable searching through doxygen\n# projects other than the one defined by this configuration file, but that are\n# all added to the same external search index. Each project needs to have a\n# unique id set via EXTERNAL_SEARCH_ID. The search mapping then maps the id of\n# to a relative location where the documentation can be found. The format is:\n# EXTRA_SEARCH_MAPPINGS = tagname1=loc1 tagname2=loc2 ...\n# This tag requires that the tag SEARCHENGINE is set to YES.\n\nEXTRA_SEARCH_MAPPINGS  =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the LaTeX output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_LATEX tag is set to YES, doxygen will generate LaTeX output.\n# The default value is: YES.\n\nGENERATE_LATEX         = NO\n\n# The LATEX_OUTPUT tag is used to specify where the LaTeX docs will be put. If a\n# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of\n# it.\n# The default directory is: latex.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_OUTPUT           = latex\n\n# The LATEX_CMD_NAME tag can be used to specify the LaTeX command name to be\n# invoked.\n#\n# Note that when not enabling USE_PDFLATEX the default is latex when enabling\n# USE_PDFLATEX the default is pdflatex and when in the later case latex is\n# chosen this is overwritten by pdflatex. For specific output languages the\n# default can have been set differently, this depends on the implementation of\n# the output language.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_CMD_NAME         = latex\n\n# The MAKEINDEX_CMD_NAME tag can be used to specify the command name to generate\n# index for LaTeX.\n# Note: This tag is used in the Makefile / make.bat.\n# See also: LATEX_MAKEINDEX_CMD for the part in the generated output file\n# (.tex).\n# The default file is: makeindex.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nMAKEINDEX_CMD_NAME     = makeindex\n\n# The LATEX_MAKEINDEX_CMD tag can be used to specify the command name to\n# generate index for LaTeX. In case there is no backslash (\\) as first character\n# it will be automatically added in the LaTeX code.\n# Note: This tag is used in the generated output file (.tex).\n# See also: MAKEINDEX_CMD_NAME for the part in the Makefile / make.bat.\n# The default value is: makeindex.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_MAKEINDEX_CMD    = makeindex\n\n# If the COMPACT_LATEX tag is set to YES, doxygen generates more compact LaTeX\n# documents. This may be useful for small projects and may help to save some\n# trees in general.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nCOMPACT_LATEX          = NO\n\n# The PAPER_TYPE tag can be used to set the paper type that is used by the\n# printer.\n# Possible values are: a4 (210 x 297 mm), letter (8.5 x 11 inches), legal (8.5 x\n# 14 inches) and executive (7.25 x 10.5 inches).\n# The default value is: a4.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nPAPER_TYPE             = a4\n\n# The EXTRA_PACKAGES tag can be used to specify one or more LaTeX package names\n# that should be included in the LaTeX output. The package can be specified just\n# by its name or with the correct syntax as to be used with the LaTeX\n# \\usepackage command. To get the times font for instance you can specify :\n# EXTRA_PACKAGES=times or EXTRA_PACKAGES={times}\n# To use the option intlimits with the amsmath package you can specify:\n# EXTRA_PACKAGES=[intlimits]{amsmath}\n# If left blank no extra packages will be included.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nEXTRA_PACKAGES         =\n\n# The LATEX_HEADER tag can be used to specify a user-defined LaTeX header for\n# the generated LaTeX document. The header should contain everything until the\n# first chapter. If it is left blank doxygen will generate a standard header. It\n# is highly recommended to start with a default header using\n# doxygen -w latex new_header.tex new_footer.tex new_stylesheet.sty\n# and then modify the file new_header.tex. See also section \"Doxygen usage\" for\n# information on how to generate the default header that doxygen normally uses.\n#\n# Note: Only use a user-defined header if you know what you are doing!\n# Note: The header is subject to change so you typically have to regenerate the\n# default header when upgrading to a newer version of doxygen. The following\n# commands have a special meaning inside the header (and footer): For a\n# description of the possible markers and block names see the documentation.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_HEADER           =\n\n# The LATEX_FOOTER tag can be used to specify a user-defined LaTeX footer for\n# the generated LaTeX document. The footer should contain everything after the\n# last chapter. If it is left blank doxygen will generate a standard footer. See\n# LATEX_HEADER for more information on how to generate a default footer and what\n# special commands can be used inside the footer. See also section \"Doxygen\n# usage\" for information on how to generate the default footer that doxygen\n# normally uses. Note: Only use a user-defined footer if you know what you are\n# doing!\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_FOOTER           =\n\n# The LATEX_EXTRA_STYLESHEET tag can be used to specify additional user-defined\n# LaTeX style sheets that are included after the standard style sheets created\n# by doxygen. Using this option one can overrule certain style aspects. Doxygen\n# will copy the style sheet files to the output directory.\n# Note: The order of the extra style sheet files is of importance (e.g. the last\n# style sheet in the list overrules the setting of the previous ones in the\n# list).\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_EXTRA_STYLESHEET =\n\n# The LATEX_EXTRA_FILES tag can be used to specify one or more extra images or\n# other source files which should be copied to the LATEX_OUTPUT output\n# directory. Note that the files will be copied as-is; there are no commands or\n# markers available.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_EXTRA_FILES      =\n\n# If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated is\n# prepared for conversion to PDF (using ps2pdf or pdflatex). The PDF file will\n# contain links (just like the HTML output) instead of page references. This\n# makes the output suitable for online browsing using a PDF viewer.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nPDF_HYPERLINKS         = NO\n\n# If the USE_PDFLATEX tag is set to YES, doxygen will use the engine as\n# specified with LATEX_CMD_NAME to generate the PDF file directly from the LaTeX\n# files. Set this option to YES, to get a higher quality PDF documentation.\n#\n# See also section LATEX_CMD_NAME for selecting the engine.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nUSE_PDFLATEX           = NO\n\n# The LATEX_BATCHMODE tag signals the behavior of LaTeX in case of an error.\n# Possible values are: NO same as ERROR_STOP, YES same as BATCH, BATCH In batch\n# mode nothing is printed on the terminal, errors are scrolled as if <return> is\n# hit at every error; missing files that TeX tries to input or request from\n# keyboard input (\\read on a not open input stream) cause the job to abort,\n# NON_STOP In nonstop mode the diagnostic message will appear on the terminal,\n# but there is no possibility of user interaction just like in batch mode,\n# SCROLL In scroll mode, TeX will stop only for missing files to input or if\n# keyboard input is necessary and ERROR_STOP In errorstop mode, TeX will stop at\n# each error, asking for user intervention.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_BATCHMODE        = NO\n\n# If the LATEX_HIDE_INDICES tag is set to YES then doxygen will not include the\n# index chapters (such as File Index, Compound Index, etc.) in the output.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_HIDE_INDICES     = NO\n\n# The LATEX_BIB_STYLE tag can be used to specify the style to use for the\n# bibliography, e.g. plainnat, or ieeetr. See\n# https://en.wikipedia.org/wiki/BibTeX and \\cite for more info.\n# The default value is: plain.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_BIB_STYLE        = plain\n\n# The LATEX_EMOJI_DIRECTORY tag is used to specify the (relative or absolute)\n# path from which the emoji images will be read. If a relative path is entered,\n# it will be relative to the LATEX_OUTPUT directory. If left blank the\n# LATEX_OUTPUT directory will be used.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_EMOJI_DIRECTORY  =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the RTF output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_RTF tag is set to YES, doxygen will generate RTF output. The\n# RTF output is optimized for Word 97 and may not look too pretty with other RTF\n# readers/editors.\n# The default value is: NO.\n\nGENERATE_RTF           = NO\n\n# The RTF_OUTPUT tag is used to specify where the RTF docs will be put. If a\n# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of\n# it.\n# The default directory is: rtf.\n# This tag requires that the tag GENERATE_RTF is set to YES.\n\nRTF_OUTPUT             = rtf\n\n# If the COMPACT_RTF tag is set to YES, doxygen generates more compact RTF\n# documents. This may be useful for small projects and may help to save some\n# trees in general.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_RTF is set to YES.\n\nCOMPACT_RTF            = NO\n\n# If the RTF_HYPERLINKS tag is set to YES, the RTF that is generated will\n# contain hyperlink fields. The RTF file will contain links (just like the HTML\n# output) instead of page references. This makes the output suitable for online\n# browsing using Word or some other Word compatible readers that support those\n# fields.\n#\n# Note: WordPad (write) and others do not support links.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_RTF is set to YES.\n\nRTF_HYPERLINKS         = NO\n\n# Load stylesheet definitions from file. Syntax is similar to doxygen's\n# configuration file, i.e. a series of assignments. You only have to provide\n# replacements, missing definitions are set to their default value.\n#\n# See also section \"Doxygen usage\" for information on how to generate the\n# default style sheet that doxygen normally uses.\n# This tag requires that the tag GENERATE_RTF is set to YES.\n\nRTF_STYLESHEET_FILE    =\n\n# Set optional variables used in the generation of an RTF document. Syntax is\n# similar to doxygen's configuration file. A template extensions file can be\n# generated using doxygen -e rtf extensionFile.\n# This tag requires that the tag GENERATE_RTF is set to YES.\n\nRTF_EXTENSIONS_FILE    =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the man page output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_MAN tag is set to YES, doxygen will generate man pages for\n# classes and files.\n# The default value is: NO.\n\nGENERATE_MAN           = NO\n\n# The MAN_OUTPUT tag is used to specify where the man pages will be put. If a\n# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of\n# it. A directory man3 will be created inside the directory specified by\n# MAN_OUTPUT.\n# The default directory is: man.\n# This tag requires that the tag GENERATE_MAN is set to YES.\n\nMAN_OUTPUT             = man\n\n# The MAN_EXTENSION tag determines the extension that is added to the generated\n# man pages. In case the manual section does not start with a number, the number\n# 3 is prepended. The dot (.) at the beginning of the MAN_EXTENSION tag is\n# optional.\n# The default value is: .3.\n# This tag requires that the tag GENERATE_MAN is set to YES.\n\nMAN_EXTENSION          = .3\n\n# The MAN_SUBDIR tag determines the name of the directory created within\n# MAN_OUTPUT in which the man pages are placed. If defaults to man followed by\n# MAN_EXTENSION with the initial . removed.\n# This tag requires that the tag GENERATE_MAN is set to YES.\n\nMAN_SUBDIR             =\n\n# If the MAN_LINKS tag is set to YES and doxygen generates man output, then it\n# will generate one additional man file for each entity documented in the real\n# man page(s). These additional files only source the real man page, but without\n# them the man command would be unable to find the correct page.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_MAN is set to YES.\n\nMAN_LINKS              = YES\n\n#---------------------------------------------------------------------------\n# Configuration options related to the XML output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_XML tag is set to YES, doxygen will generate an XML file that\n# captures the structure of the code including all documentation.\n# The default value is: NO.\n\nGENERATE_XML           = NO\n\n# The XML_OUTPUT tag is used to specify where the XML pages will be put. If a\n# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of\n# it.\n# The default directory is: xml.\n# This tag requires that the tag GENERATE_XML is set to YES.\n\nXML_OUTPUT             = xml\n\n# If the XML_PROGRAMLISTING tag is set to YES, doxygen will dump the program\n# listings (including syntax highlighting and cross-referencing information) to\n# the XML output. Note that enabling this will significantly increase the size\n# of the XML output.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_XML is set to YES.\n\nXML_PROGRAMLISTING     = YES\n\n# If the XML_NS_MEMB_FILE_SCOPE tag is set to YES, doxygen will include\n# namespace members in file scope as well, matching the HTML output.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_XML is set to YES.\n\nXML_NS_MEMB_FILE_SCOPE = NO\n\n#---------------------------------------------------------------------------\n# Configuration options related to the DOCBOOK output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_DOCBOOK tag is set to YES, doxygen will generate Docbook files\n# that can be used to generate PDF.\n# The default value is: NO.\n\nGENERATE_DOCBOOK       = NO\n\n# The DOCBOOK_OUTPUT tag is used to specify where the Docbook pages will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be put in\n# front of it.\n# The default directory is: docbook.\n# This tag requires that the tag GENERATE_DOCBOOK is set to YES.\n\nDOCBOOK_OUTPUT         = docbook\n\n#---------------------------------------------------------------------------\n# Configuration options for the AutoGen Definitions output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_AUTOGEN_DEF tag is set to YES, doxygen will generate an\n# AutoGen Definitions (see https://autogen.sourceforge.net/) file that captures\n# the structure of the code including all documentation. Note that this feature\n# is still experimental and incomplete at the moment.\n# The default value is: NO.\n\nGENERATE_AUTOGEN_DEF   = NO\n\n#---------------------------------------------------------------------------\n# Configuration options related to Sqlite3 output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_SQLITE3 tag is set to YES doxygen will generate a Sqlite3\n# database with symbols found by doxygen stored in tables.\n# The default value is: NO.\n\nGENERATE_SQLITE3       = NO\n\n# The SQLITE3_OUTPUT tag is used to specify where the Sqlite3 database will be\n# put. If a relative path is entered the value of OUTPUT_DIRECTORY will be put\n# in front of it.\n# The default directory is: sqlite3.\n# This tag requires that the tag GENERATE_SQLITE3 is set to YES.\n\nSQLITE3_OUTPUT         = sqlite3\n\n# The SQLITE3_OVERWRITE_DB tag is set to YES, the existing doxygen_sqlite3.db\n# database file will be recreated with each doxygen run. If set to NO, doxygen\n# will warn if an a database file is already found and not modify it.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_SQLITE3 is set to YES.\n\nSQLITE3_RECREATE_DB    = YES\n\n#---------------------------------------------------------------------------\n# Configuration options related to the Perl module output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_PERLMOD tag is set to YES, doxygen will generate a Perl module\n# file that captures the structure of the code including all documentation.\n#\n# Note that this feature is still experimental and incomplete at the moment.\n# The default value is: NO.\n\nGENERATE_PERLMOD       = NO\n\n# If the PERLMOD_LATEX tag is set to YES, doxygen will generate the necessary\n# Makefile rules, Perl scripts and LaTeX code to be able to generate PDF and DVI\n# output from the Perl module output.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_PERLMOD is set to YES.\n\nPERLMOD_LATEX          = NO\n\n# If the PERLMOD_PRETTY tag is set to YES, the Perl module output will be nicely\n# formatted so it can be parsed by a human reader. This is useful if you want to\n# understand what is going on. On the other hand, if this tag is set to NO, the\n# size of the Perl module output will be much smaller and Perl will parse it\n# just the same.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_PERLMOD is set to YES.\n\nPERLMOD_PRETTY         = YES\n\n# The names of the make variables in the generated doxyrules.make file are\n# prefixed with the string contained in PERLMOD_MAKEVAR_PREFIX. This is useful\n# so different doxyrules.make files included by the same Makefile don't\n# overwrite each other's variables.\n# This tag requires that the tag GENERATE_PERLMOD is set to YES.\n\nPERLMOD_MAKEVAR_PREFIX =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the preprocessor\n#---------------------------------------------------------------------------\n\n# If the ENABLE_PREPROCESSING tag is set to YES, doxygen will evaluate all\n# C-preprocessor directives found in the sources and include files.\n# The default value is: YES.\n\nENABLE_PREPROCESSING   = YES\n\n# If the MACRO_EXPANSION tag is set to YES, doxygen will expand all macro names\n# in the source code. If set to NO, only conditional compilation will be\n# performed. Macro expansion can be done in a controlled way by setting\n# EXPAND_ONLY_PREDEF to YES.\n# The default value is: NO.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nMACRO_EXPANSION        = YES\n\n# If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES then\n# the macro expansion is limited to the macros specified with the PREDEFINED and\n# EXPAND_AS_DEFINED tags.\n# The default value is: NO.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nEXPAND_ONLY_PREDEF     = NO\n\n# If the SEARCH_INCLUDES tag is set to YES, the include files in the\n# INCLUDE_PATH will be searched if a #include is found.\n# The default value is: YES.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nSEARCH_INCLUDES        = YES\n\n# The INCLUDE_PATH tag can be used to specify one or more directories that\n# contain include files that are not input files but should be processed by the\n# preprocessor. Note that the INCLUDE_PATH is not recursive, so the setting of\n# RECURSIVE has no effect here.\n# This tag requires that the tag SEARCH_INCLUDES is set to YES.\n\nINCLUDE_PATH           =\n\n# You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard\n# patterns (like *.h and *.hpp) to filter out the header-files in the\n# directories. If left blank, the patterns specified with FILE_PATTERNS will be\n# used.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nINCLUDE_FILE_PATTERNS  =\n\n# The PREDEFINED tag can be used to specify one or more macro names that are\n# defined before the preprocessor is started (similar to the -D option of e.g.\n# gcc). The argument of the tag is a list of macros of the form: name or\n# name=definition (no spaces). If the definition and the \"=\" are omitted, \"=1\"\n# is assumed. To prevent a macro definition from being undefined via #undef or\n# recursively expanded use the := operator instead of the = operator.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nPREDEFINED             = LEAK_DETECTIVE \\\n                         __attribute__(x)=\n\n# If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then this\n# tag can be used to specify a list of macro names that should be expanded. The\n# macro definition that is found in the sources will be used. Use the PREDEFINED\n# tag if you want to use a different macro definition that overrules the\n# definition found in the source code.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nEXPAND_AS_DEFINED      =\n\n# If the SKIP_FUNCTION_MACROS tag is set to YES then doxygen's preprocessor will\n# remove all references to function-like macros that are alone on a line, have\n# an all uppercase name, and do not end with a semicolon. Such function macros\n# are typically used for boiler-plate code, and will confuse the parser if not\n# removed.\n# The default value is: YES.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nSKIP_FUNCTION_MACROS   = YES\n\n#---------------------------------------------------------------------------\n# Configuration options related to external references\n#---------------------------------------------------------------------------\n\n# The TAGFILES tag can be used to specify one or more tag files. For each tag\n# file the location of the external documentation should be added. The format of\n# a tag file without this location is as follows:\n# TAGFILES = file1 file2 ...\n# Adding location for the tag files is done as follows:\n# TAGFILES = file1=loc1 \"file2 = loc2\" ...\n# where loc1 and loc2 can be relative or absolute paths or URLs. See the\n# section \"Linking to external documentation\" for more information about the use\n# of tag files.\n# Note: Each tag file must have a unique name (where the name does NOT include\n# the path). If a tag file is not located in the directory in which doxygen is\n# run, you must also specify the path to the tagfile here.\n\nTAGFILES               =\n\n# When a file name is specified after GENERATE_TAGFILE, doxygen will create a\n# tag file that is based on the input files it reads. See section \"Linking to\n# external documentation\" for more information about the usage of tag files.\n\nGENERATE_TAGFILE       =\n\n# If the ALLEXTERNALS tag is set to YES, all external classes and namespaces\n# will be listed in the class and namespace index. If set to NO, only the\n# inherited external classes will be listed.\n# The default value is: NO.\n\nALLEXTERNALS           = NO\n\n# If the EXTERNAL_GROUPS tag is set to YES, all external groups will be listed\n# in the topic index. If set to NO, only the current project's groups will be\n# listed.\n# The default value is: YES.\n\nEXTERNAL_GROUPS        = YES\n\n# If the EXTERNAL_PAGES tag is set to YES, all external pages will be listed in\n# the related pages index. If set to NO, only the current project's pages will\n# be listed.\n# The default value is: YES.\n\nEXTERNAL_PAGES         = YES\n\n#---------------------------------------------------------------------------\n# Configuration options related to diagram generator tools\n#---------------------------------------------------------------------------\n\n# If set to YES the inheritance and collaboration graphs will hide inheritance\n# and usage relations if the target is undocumented or is not a class.\n# The default value is: YES.\n\nHIDE_UNDOC_RELATIONS   = YES\n\n# If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is\n# available from the path. This tool is part of Graphviz (see:\n# https://www.graphviz.org/), a graph visualization toolkit from AT&T and Lucent\n# Bell Labs. The other options in this section have no effect if this option is\n# set to NO\n# The default value is: YES.\n\nHAVE_DOT               = NO\n\n# The DOT_NUM_THREADS specifies the number of dot invocations doxygen is allowed\n# to run in parallel. When set to 0 doxygen will base this on the number of\n# processors available in the system. You can set it explicitly to a value\n# larger than 0 to get control over the balance between CPU load and processing\n# speed.\n# Minimum value: 0, maximum value: 32, default value: 0.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_NUM_THREADS        = 0\n\n# DOT_COMMON_ATTR is common attributes for nodes, edges and labels of\n# subgraphs. When you want a differently looking font in the dot files that\n# doxygen generates you can specify fontname, fontcolor and fontsize attributes.\n# For details please see <a href=https://graphviz.org/doc/info/attrs.html>Node,\n# Edge and Graph Attributes specification</a> You need to make sure dot is able\n# to find the font, which can be done by putting it in a standard location or by\n# setting the DOTFONTPATH environment variable or by setting DOT_FONTPATH to the\n# directory containing the font. Default graphviz fontsize is 14.\n# The default value is: fontname=Helvetica,fontsize=10.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_COMMON_ATTR        = \"fontname=Helvetica,fontsize=10\"\n\n# DOT_EDGE_ATTR is concatenated with DOT_COMMON_ATTR. For elegant style you can\n# add 'arrowhead=open, arrowtail=open, arrowsize=0.5'. <a\n# href=https://graphviz.org/doc/info/arrows.html>Complete documentation about\n# arrows shapes.</a>\n# The default value is: labelfontname=Helvetica,labelfontsize=10.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_EDGE_ATTR          = \"labelfontname=Helvetica,labelfontsize=10\"\n\n# DOT_NODE_ATTR is concatenated with DOT_COMMON_ATTR. For view without boxes\n# around nodes set 'shape=plain' or 'shape=plaintext' <a\n# href=https://www.graphviz.org/doc/info/shapes.html>Shapes specification</a>\n# The default value is: shape=box,height=0.2,width=0.4.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_NODE_ATTR          = \"shape=box,height=0.2,width=0.4\"\n\n# You can set the path where dot can find font specified with fontname in\n# DOT_COMMON_ATTR and others dot attributes.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_FONTPATH           =\n\n# If the CLASS_GRAPH tag is set to YES or GRAPH or BUILTIN then doxygen will\n# generate a graph for each documented class showing the direct and indirect\n# inheritance relations. In case the CLASS_GRAPH tag is set to YES or GRAPH and\n# HAVE_DOT is enabled as well, then dot will be used to draw the graph. In case\n# the CLASS_GRAPH tag is set to YES and HAVE_DOT is disabled or if the\n# CLASS_GRAPH tag is set to BUILTIN, then the built-in generator will be used.\n# If the CLASS_GRAPH tag is set to TEXT the direct and indirect inheritance\n# relations will be shown as texts / links.\n# Possible values are: NO, YES, TEXT, GRAPH and BUILTIN.\n# The default value is: YES.\n\nCLASS_GRAPH            = YES\n\n# If the COLLABORATION_GRAPH tag is set to YES then doxygen will generate a\n# graph for each documented class showing the direct and indirect implementation\n# dependencies (inheritance, containment, and class references variables) of the\n# class with other documented classes. Explicit enabling a collaboration graph,\n# when COLLABORATION_GRAPH is set to NO, can be accomplished by means of the\n# command \\collaborationgraph. Disabling a collaboration graph can be\n# accomplished by means of the command \\hidecollaborationgraph.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nCOLLABORATION_GRAPH    = YES\n\n# If the GROUP_GRAPHS tag is set to YES then doxygen will generate a graph for\n# groups, showing the direct groups dependencies. Explicit enabling a group\n# dependency graph, when GROUP_GRAPHS is set to NO, can be accomplished by means\n# of the command \\groupgraph. Disabling a directory graph can be accomplished by\n# means of the command \\hidegroupgraph. See also the chapter Grouping in the\n# manual.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nGROUP_GRAPHS           = YES\n\n# If the UML_LOOK tag is set to YES, doxygen will generate inheritance and\n# collaboration diagrams in a style similar to the OMG's Unified Modeling\n# Language.\n# The default value is: NO.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nUML_LOOK               = NO\n\n# If the UML_LOOK tag is enabled, the fields and methods are shown inside the\n# class node. If there are many fields or methods and many nodes the graph may\n# become too big to be useful. The UML_LIMIT_NUM_FIELDS threshold limits the\n# number of items for each type to make the size more manageable. Set this to 0\n# for no limit. Note that the threshold may be exceeded by 50% before the limit\n# is enforced. So when you set the threshold to 10, up to 15 fields may appear,\n# but if the number exceeds 15, the total amount of fields shown is limited to\n# 10.\n# Minimum value: 0, maximum value: 100, default value: 10.\n# This tag requires that the tag UML_LOOK is set to YES.\n\nUML_LIMIT_NUM_FIELDS   = 10\n\n# If the DOT_UML_DETAILS tag is set to NO, doxygen will show attributes and\n# methods without types and arguments in the UML graphs. If the DOT_UML_DETAILS\n# tag is set to YES, doxygen will add type and arguments for attributes and\n# methods in the UML graphs. If the DOT_UML_DETAILS tag is set to NONE, doxygen\n# will not generate fields with class member information in the UML graphs. The\n# class diagrams will look similar to the default class diagrams but using UML\n# notation for the relationships.\n# Possible values are: NO, YES and NONE.\n# The default value is: NO.\n# This tag requires that the tag UML_LOOK is set to YES.\n\nDOT_UML_DETAILS        = NO\n\n# The DOT_WRAP_THRESHOLD tag can be used to set the maximum number of characters\n# to display on a single line. If the actual line length exceeds this threshold\n# significantly it will wrapped across multiple lines. Some heuristics are apply\n# to avoid ugly line breaks.\n# Minimum value: 0, maximum value: 1000, default value: 17.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_WRAP_THRESHOLD     = 17\n\n# If the TEMPLATE_RELATIONS tag is set to YES then the inheritance and\n# collaboration graphs will show the relations between templates and their\n# instances.\n# The default value is: NO.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nTEMPLATE_RELATIONS     = NO\n\n# If the INCLUDE_GRAPH, ENABLE_PREPROCESSING and SEARCH_INCLUDES tags are set to\n# YES then doxygen will generate a graph for each documented file showing the\n# direct and indirect include dependencies of the file with other documented\n# files. Explicit enabling an include graph, when INCLUDE_GRAPH is is set to NO,\n# can be accomplished by means of the command \\includegraph. Disabling an\n# include graph can be accomplished by means of the command \\hideincludegraph.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nINCLUDE_GRAPH          = YES\n\n# If the INCLUDED_BY_GRAPH, ENABLE_PREPROCESSING and SEARCH_INCLUDES tags are\n# set to YES then doxygen will generate a graph for each documented file showing\n# the direct and indirect include dependencies of the file with other documented\n# files. Explicit enabling an included by graph, when INCLUDED_BY_GRAPH is set\n# to NO, can be accomplished by means of the command \\includedbygraph. Disabling\n# an included by graph can be accomplished by means of the command\n# \\hideincludedbygraph.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nINCLUDED_BY_GRAPH      = YES\n\n# If the CALL_GRAPH tag is set to YES then doxygen will generate a call\n# dependency graph for every global function or class method.\n#\n# Note that enabling this option will significantly increase the time of a run.\n# So in most cases it will be better to enable call graphs for selected\n# functions only using the \\callgraph command. Disabling a call graph can be\n# accomplished by means of the command \\hidecallgraph.\n# The default value is: NO.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nCALL_GRAPH             = NO\n\n# If the CALLER_GRAPH tag is set to YES then doxygen will generate a caller\n# dependency graph for every global function or class method.\n#\n# Note that enabling this option will significantly increase the time of a run.\n# So in most cases it will be better to enable caller graphs for selected\n# functions only using the \\callergraph command. Disabling a caller graph can be\n# accomplished by means of the command \\hidecallergraph.\n# The default value is: NO.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nCALLER_GRAPH           = NO\n\n# If the GRAPHICAL_HIERARCHY tag is set to YES then doxygen will graphical\n# hierarchy of all classes instead of a textual one.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nGRAPHICAL_HIERARCHY    = YES\n\n# If the DIRECTORY_GRAPH tag is set to YES then doxygen will show the\n# dependencies a directory has on other directories in a graphical way. The\n# dependency relations are determined by the #include relations between the\n# files in the directories. Explicit enabling a directory graph, when\n# DIRECTORY_GRAPH is set to NO, can be accomplished by means of the command\n# \\directorygraph. Disabling a directory graph can be accomplished by means of\n# the command \\hidedirectorygraph.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDIRECTORY_GRAPH        = YES\n\n# The DIR_GRAPH_MAX_DEPTH tag can be used to limit the maximum number of levels\n# of child directories generated in directory dependency graphs by dot.\n# Minimum value: 1, maximum value: 25, default value: 1.\n# This tag requires that the tag DIRECTORY_GRAPH is set to YES.\n\nDIR_GRAPH_MAX_DEPTH    = 1\n\n# The DOT_IMAGE_FORMAT tag can be used to set the image format of the images\n# generated by dot. For an explanation of the image formats see the section\n# output formats in the documentation of the dot tool (Graphviz (see:\n# https://www.graphviz.org/)).\n# Note: If you choose svg you need to set HTML_FILE_EXTENSION to xhtml in order\n# to make the SVG files visible in IE 9+ (other browsers do not have this\n# requirement).\n# Possible values are: png, jpg, jpg:cairo, jpg:cairo:gd, jpg:gd, jpg:gd:gd,\n# gif, gif:cairo, gif:cairo:gd, gif:gd, gif:gd:gd, svg, png:gd, png:gd:gd,\n# png:cairo, png:cairo:gd, png:cairo:cairo, png:cairo:gdiplus, png:gdiplus and\n# png:gdiplus:gdiplus.\n# The default value is: png.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_IMAGE_FORMAT       = png\n\n# If DOT_IMAGE_FORMAT is set to svg, then this option can be set to YES to\n# enable generation of interactive SVG images that allow zooming and panning.\n#\n# Note that this requires a modern browser other than Internet Explorer. Tested\n# and working are Firefox, Chrome, Safari, and Opera.\n# Note: For IE 9+ you need to set HTML_FILE_EXTENSION to xhtml in order to make\n# the SVG files visible. Older versions of IE do not have SVG support.\n# The default value is: NO.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nINTERACTIVE_SVG        = NO\n\n# The DOT_PATH tag can be used to specify the path where the dot tool can be\n# found. If left blank, it is assumed the dot tool can be found in the path.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_PATH               =\n\n# The DOTFILE_DIRS tag can be used to specify one or more directories that\n# contain dot files that are included in the documentation (see the \\dotfile\n# command).\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOTFILE_DIRS           =\n\n# You can include diagrams made with dia in doxygen documentation. Doxygen will\n# then run dia to produce the diagram and insert it in the documentation. The\n# DIA_PATH tag allows you to specify the directory where the dia binary resides.\n# If left empty dia is assumed to be found in the default search path.\n\nDIA_PATH               =\n\n# The DIAFILE_DIRS tag can be used to specify one or more directories that\n# contain dia files that are included in the documentation (see the \\diafile\n# command).\n\nDIAFILE_DIRS           =\n\n# When using plantuml, the PLANTUML_JAR_PATH tag should be used to specify the\n# path where java can find the plantuml.jar file or to the filename of jar file\n# to be used. If left blank, it is assumed PlantUML is not used or called during\n# a preprocessing step. Doxygen will generate a warning when it encounters a\n# \\startuml command in this case and will not generate output for the diagram.\n\nPLANTUML_JAR_PATH      =\n\n# When using plantuml, the PLANTUML_CFG_FILE tag can be used to specify a\n# configuration file for plantuml.\n\nPLANTUML_CFG_FILE      =\n\n# When using plantuml, the specified paths are searched for files specified by\n# the !include statement in a plantuml block.\n\nPLANTUML_INCLUDE_PATH  =\n\n# The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of nodes\n# that will be shown in the graph. If the number of nodes in a graph becomes\n# larger than this value, doxygen will truncate the graph, which is visualized\n# by representing a node as a red box. Note that doxygen if the number of direct\n# children of the root node in a graph is already larger than\n# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note that\n# the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.\n# Minimum value: 0, maximum value: 10000, default value: 50.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_GRAPH_MAX_NODES    = 50\n\n# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the graphs\n# generated by dot. A depth value of 3 means that only nodes reachable from the\n# root by following a path via at most 3 edges will be shown. Nodes that lay\n# further from the root node will be omitted. Note that setting this option to 1\n# or 2 may greatly reduce the computation time needed for large code bases. Also\n# note that the size of a graph can be further restricted by\n# DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.\n# Minimum value: 0, maximum value: 1000, default value: 0.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nMAX_DOT_GRAPH_DEPTH    = 0\n\n# Set the DOT_MULTI_TARGETS tag to YES to allow dot to generate multiple output\n# files in one run (i.e. multiple -o and -T options on the command line). This\n# makes dot run faster, but since only newer versions of dot (>1.8.10) support\n# this, this feature is disabled by default.\n# The default value is: NO.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_MULTI_TARGETS      = NO\n\n# If the GENERATE_LEGEND tag is set to YES doxygen will generate a legend page\n# explaining the meaning of the various boxes and arrows in the dot generated\n# graphs.\n# Note: This tag requires that UML_LOOK isn't set, i.e. the doxygen internal\n# graphical representation for inheritance and collaboration diagrams is used.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nGENERATE_LEGEND        = YES\n\n# If the DOT_CLEANUP tag is set to YES, doxygen will remove the intermediate\n# files that are used to generate the various graphs.\n#\n# Note: This setting is not only used for dot files but also for msc temporary\n# files.\n# The default value is: YES.\n\nDOT_CLEANUP            = YES\n\n# You can define message sequence charts within doxygen comments using the \\msc\n# command. If the MSCGEN_TOOL tag is left empty (the default), then doxygen will\n# use a built-in version of mscgen tool to produce the charts. Alternatively,\n# the MSCGEN_TOOL tag can also specify the name an external tool. For instance,\n# specifying prog as the value, doxygen will call the tool as prog -T\n# <outfile_format> -o <outputfile> <inputfile>. The external tool should support\n# output file formats \"png\", \"eps\", \"svg\", and \"ismap\".\n\nMSCGEN_TOOL            =\n\n# The MSCFILE_DIRS tag can be used to specify one or more directories that\n# contain msc files that are included in the documentation (see the \\mscfile\n# command).\n\nMSCFILE_DIRS           =\n"
        },
        {
          "name": "HACKING",
          "type": "blob",
          "size": 1.111328125,
          "content": "                ------------------------\n                strongSwan - Development\n                ------------------------\n\nGit repository\n--------------\n\nFor interested developers, we have a public repository. To check out and compile\nthe code, you need the following tools:\n\n    - Git\n    - gcc/clang\n    - automake\n    - autoconf\n    - libtool\n    - pkg-config\n    - gettext\n    - perl\n    - python\n    - lex/flex\n    - yacc/bison\n    - gperf\n\n    Optionally:\n    - lcov/genhtml\n    - Doxygen\n\nCheck out the repository:\n\n    git clone https://github.com/strongswan/strongswan.git\n\nAfter a successful check out, run autotools to generate configure etc.:\n\n    cd strongswan/\n    ./autogen.sh\n\nFinally, start the build as usual:\n\n    ./configure [options]\n    make\n    make install\n\n\nAPI documentation\n-----------------\n\nAll header files contain inline code documentation. These comments can be\nextracted using Doxygen via 'make apidoc', which creates an 'apidoc' folder\ncontaining the HTML files.\n\nstrongSwan Documentation\n------------------------\n\nDocumentation for users and developers is available at\n\n    https://docs.strongswan.org\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 4.18359375,
          "content": "                -------------------------\n                strongSwan - Installation\n                -------------------------\n\n\nContents\n--------\n\n    1.   Overview\n    2.   Required packages\n    3.   Optional packages\n    3.1   HTTP fetcher\n    3.2   LDAP\n    3.3   Other pluggable modules\n    4.   Kernel configuration\n\n1.  Overview\n    --------\n\n    Since version 4.x strongSwan uses the GNU build system (Autotools).\n    This simplifies the build process and package maintenance. First, check for\n    the availability of required packages on your system (section 2.). You may\n    want to include support for additional features, which require other\n    packages to be installed (section 3.).\n\n    To compile an extracted tarball, run the ./configure script first:\n\n      ./configure\n\n    You may want to specify some arguments listed in section 3., or see the\n    available options of the script using \"./configure --help\".\n\n    After a successful run of the script, run\n\n      make\n\n    followed by\n\n      make install\n\n    in the usual manner.\n\n    To check if your kernel fulfills the requirements, see section 4.\n\n    Refer to README for configuration examples.\n\n\n2.  Required packages\n    -----------------\n\n    In order to be able to build strongSwan you'll need one of the following\n    cryptographic libraries:\n\n      * The OpenSSL Cryptographic Library (libcrypto)\n        https://www.openssl.org\n      * The wolfSSL Embedded TLS Library (libwolfssl)\n        https://www.wolfssl.com\n      * The Botan Crypto Library (libbotan)\n        https://botan.randombit.net\n      * The GNU Multiprecision Arithmetic Library (GMP, libgmp)\n        https://gmplib.org\n      * The GNU Cryptographic Library (libgcrypt)\n        https://www.gnupg.org\n\n    If no other options are specified during ./configure libgmp will be used.\n\n    The libraries and the corresponding header files are usually included in\n    the form of one or two packages in the major Linux distributions (for GMP on\n    Debian: libgmp3 and libgmp3-dev).\n\n\n3.  Optional packages\n    -----------------\n\n3.1 HTTP Fetcher\n    ------------\n\n    If you intend to dynamically fetch Certificate Revocation Lists (CRLs)\n    from an HTTP server or as an alternative want to use the Online\n    Certificate Status Protocol (OCSP) then you will need the either of the\n    following libraries:\n\n      * The cURL library (libcurl)\n        https://curl.se/libcurl/\n      * The LibSoup library (libsoup)\n        https://live.gnome.org/LibSoup\n\n    In order to activate the use of either of these libraries in strongSwan you\n    must enable the appropriate ./configure switch.\n\n\n3.2 LDAP\n    ----\n\n    If you intend to dynamically fetch Certificate Revocation Lists (CRLs)\n    from an LDAP server then you will need the libldap library available\n    from https://www.openldap.org/.\n\n    OpenLDAP is usually included  with your Linux distribution. You will need\n    both the run-time and development environments (SuSE: openldap2,\n    openldap2-devel).\n\n    In order to activate the use of the libldap library in strongSwan you must\n    enable the ./configure switch:\n\n      ./configure [...] --enable-ldap\n\n    LDAP Protocol version 2 is not supported anymore, --enable-ldap uses always\n    version 3 of the LDAP protocol\n\n\n3.3 Other pluggable modules\n    -----------------------\n\n    There are many other optional plugins that, for instance, provide support\n    for PKCS#11 or SQL databases.\n    For a more detailed description of these refer to our documentation:\n\n      * https://docs.strongswan.org\n\n\n4.  Kernel configuration\n    --------------------\n\n    Please make sure that the following IPsec-related Linux kernel modules are\n    available:\n\n      * esp4\n      * esp6\n      * xfrm_user\n\n    And for older kernels, mode-specific modules such as:\n\n      * xfrm4_tunnel\n      * xfrm4_mode_tunnel\n\n    These may be built into the kernel or as modules. Modules should get loaded\n    automatically if necessary.\n\n    The built-in kernel Cryptoapi modules with selected encryption and\n    hash algorithms should also be available.\n\n    Support for multiple routing tables is also recommended.\n\n    For a more up-to-date list of recommended modules refer to:\n\n      * https://docs.strongswan.org/docs/5.9/install/kernelModules.html\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 2.384765625,
          "content": "Except for code in the blowfish, des, md4 and md5 plugins (see below) the\nfollowing terms apply:\n\nFor copyright information see the headers of individual source files.\n\nThis program is free software; you can redistribute it and/or modify it under\nthe terms of the GNU General Public License as published by the Free Software\nFoundation; either version 2 of the License, or (at your option) any later\nversion.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY\nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\nPARTICULAR PURPOSE. See the GNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along with\nthis program; if not, see <http://www.gnu.org/licenses>.\n\nLinking strongSwan statically or dynamically with other modules is making a\ncombined work based on strongSwan. Thus, the terms and conditions of the GNU\nGeneral Public License cover the whole combination.\n\nIn addition, as a special exception, the copyright holders of strongSwan give\nyou permission to combine strongSwan with free software programs or libraries\nthat are released under the GNU LGPL and with code included in the standard\nrelease of the OpenSSL project's OpenSSL library under the OpenSSL or SSLeay\nlicenses (or modified versions of such code, with unchanged license). You may\ncopy and distribute such a system following the terms of the GNU GPL for\nstrongSwan and the licenses of the other code concerned, provided that you\ninclude the source code of that other code when and as the GNU GPL requires\ndistribution of source code.\n\nNote that people who make modified versions of strongSwan are not obligated to\ngrant this special exception for their modified versions; it is their choice\nwhether to do so. The GNU General Public License gives permission to release a\nmodified version without this exception; this exception also makes it possible\nto release a modified version which carries forward this exception.\n\n\nThe DES implementation in the des plugin and the Blowfish implementation in the\nblowfish plugin are under a BSD style license (see source files for details).\nNote that these parts have an advertising clause in it.\n\nThe MD4 and MD5 implementations in the md4 and md5 plugins are from RSA Data\nSecurity Inc., so this package must include the following phrase:\n\"derived from the RSA Data Security, Inc. MD5 Message-Digest Algorithm\".\n\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 2.611328125,
          "content": "SUBDIRS = src man conf init testing\n\nif USE_FUZZING\n  SUBDIRS += fuzz\nendif\n\nif USE_SCRIPTS\n  SUBDIRS += scripts\nendif\n\nif USE_SILENT_RULES\n  AM_MAKEFLAGS = -s\nendif\n\nACLOCAL_AMFLAGS = -I m4/config\n\nEXTRA_DIST = Doxyfile.in LICENSE Android.common.mk.in Android.common.mk Android.mk\nCLEANFILES = Doxyfile\nBUILT_SOURCES = Android.common.mk\nMAINTAINERCLEANFILES = Android.common.mk\n\nif USE_DEV_HEADERS\nconfig_includedir = $(ipseclibdir)/include\nnodist_config_include_HEADERS = config.h\nendif\n\n# we can't (and shouldn't) install/uninstall system files during make distcheck,\n# so override the autodetected path for systemd units\nAM_DISTCHECK_CONFIGURE_FLAGS = \\\n\t--with-systemdsystemunitdir='$$(prefix)/lib/systemd/system'\n\n# we leave config files behind intentionally so prevent distcheck from complaining\ndistuninstallcheck_listfiles = find . -type f \\! -name '*.conf' \\! -name '*.secrets' -print\n\nAndroid.common.mk :\tAndroid.common.mk.in configure.ac\n\t\t$(AM_V_GEN) \\\n\t\tsed \\\n\t\t-e \"s:\\@PACKAGE_VERSION\\@:$(PACKAGE_VERSION):\" \\\n\t\t$(srcdir)/$@.in > $@\n\ndist-hook:\n\t\t@echo $(GIT_VERSION) > $(distdir)/.tarball-git-version\n\nDoxyfile :\tDoxyfile.in\n\t\t$(AM_V_GEN) \\\n\t\tsed \\\n\t\t-e \"s:\\@PACKAGE_VERSION\\@:$(PACKAGE_VERSION):\" \\\n\t\t-e \"s:\\@PACKAGE_NAME\\@:$(PACKAGE_NAME):\" \\\n\t\t-e \"s:\\@SRC_DIR\\@:$(srcdir):g\" \\\n\t\t$(srcdir)/$@.in > $@\n\napidoc :\tDoxyfile\n\t\t@test -d apidoc || doxygen\n\t\t@! find Doxyfile $(top_srcdir)/src/ \\( -name '*.h' -o -name '*.md' \\) -newer apidoc | \\\n\t\t\tgrep -q '' || doxygen && touch apidoc\n\ncov-reset-common:\n\t\t@rm -rf $(top_builddir)/coverage\n\t\t@find $(top_builddir)/src $(top_builddir)/scripts -name \"*.gcda\" -delete\n\nif COVERAGE\ncov-reset: cov-reset-common\n\t\t@lcov --zerocounters --directory $(top_builddir)\n\ncov-report:\n\t\t@mkdir $(top_builddir)/coverage\n\t\tlcov -c -o $(top_builddir)/coverage/coverage.info -d $(top_builddir) \\\n\t\t\t --rc lcov_branch_coverage=1\n\t\tlcov -r $(top_builddir)/coverage/coverage.info '*/tests/*' '*/suites/*' '/usr*' \\\n\t\t\t -o $(abs_top_builddir)/coverage/coverage.cleaned.info \\\n\t\t\t --rc lcov_branch_coverage=1\n\t\tgenhtml --num-spaces 4 --legend --branch-coverage --ignore-errors source \\\n\t\t\t\t-t \"$(PACKAGE_STRING)\" \\\n\t\t\t\t-o $(top_builddir)/coverage/html \\\n\t\t\t\t-p `readlink -m $(abs_top_srcdir)`/src \\\n\t\t\t\t$(top_builddir)/coverage/coverage.cleaned.info\n\t\t@echo \"Coverage Report at $(top_builddir)/coverage/html\" >&2\n\ncoverage:\n\t\t@$(MAKE) cov-reset\n\t\t@$(MAKE) check\n\t\t@$(MAKE) cov-report\nelse\ncoverage:\n\t\t@echo \"reconfigure with --enable-coverage\"\nendif\n\nclean-local: cov-reset-common\n\t\t@find $(top_builddir)/src $(top_builddir)/scripts -name \"*.gcno\" -delete\n\t\t@rm -rf apidoc\n\n.PHONY: cov-reset-common cov-reset cov-report coverage apidoc\n"
        },
        {
          "name": "NEWS",
          "type": "blob",
          "size": 179.03125,
          "content": "strongswan-6.0.0\n----------------\n\n- Support of multiple post-quantum (and classic) key exchanges using the\n  IKE_INTERMEDIATE exchange (RFC 9242) and the Additional Key Exchange\n  transform types 1..7 (RFC 9370).\n\n- ML-KEM is provided by the botan, wolfssl, openssl (only via AWS-LC) and the\n  new ml plugins.\n\n- Handling of CHILD_SA rekey collisions has been improved, which makes CHILD_SAs\n  properly trackable via chiled_rekey() hook.\n\n- The behavior when reloading or unloading connections that include `start` in\n  their `start_action` has been improved.\n\n- The default identity is now the subject DN instead of the IP address if a\n  certificate is available.\n\n- The file logger supports logging as JSON objects and can add timestamps\n  in microseconds.\n\n- The cert-enroll script now supports three generations of CA certificates.\n\n- charon-nm uses a different routing table than the regular IKE daemon to avoid\n  conflicts if both are running.\n\n- AF_VSOCK sockets are supported on Linux to communicate with a daemon that runs\n  in a VM.\n\n- TUN devices can properly handle IPv6 addresses.\n\n- For compatibility with older SCEP implementations, challenge passwords in\n  PKCS#10 containers are again encoded as PrintableString if possible.\n\n- The legacy stroke plugin is no longer enabled by default.\n\n- The openssl plugin is now enabled by default, while the following crypto\n  plugins are no longer enabled by default: aes, curve25519, des, fips-prf, gmp,\n  hmac, md5, pkcs12, rc2, sha1, sha2.\n\n- The following deprecated plugins have been removed: bliss, newhope, ntru.\n\n- charon.make_before_break is now enabled by default.\n\n\nstrongswan-5.9.14\n-----------------\n\n- Support for the IKEv2 OCSP extensions (RFC 4806) has been added, which allows\n  peers to request and send OCSP responses directly in IKEv2.\n\n- Validation of X.509 name constraints in the constraints plugin has been\n  refactored to align with RFC 5280.\n\n- The dhcp plugin has been ported to FreeBSD/macOS.\n\n- The openssl plugin is now compatible with AWS-LC.\n\n- Overflows of unique identifiers (e.g. Netlink sequence numbers or reqids) are\n  now handled gracefully.\n\n- Updated the pkcs11.h header based on the latest OpenSC version in order to\n  include new algorithm and struct definitions for the pkcs11 plugin.\n  Added support for PSS padding in smartcard-based RSA signatures using either\n  on-chip or external data hashing.\n\n- Added keyid and certid handles in the pki --ocsp command so that keys and/or\n  certificates can be stored on a smartcard or in a TPM 2.0 device.\n\n- Fail SA installation on Linux if replay protection is disabled while ESN is\n  enabled, which the kernel currently doesn't support.\n\n\nstrongswan-5.9.13\n-----------------\n\n- Fixes a regression with handling OCSP error responses and adds a new\n  option to specify the length of nonces in OCSP requests.  Also adds some\n  other improvements for OCSP handling and fuzzers for OCSP\n  requests/responses.\n\n\nstrongswan-5.9.12\n-----------------\n\n- Fixed a vulnerability in charon-tkm related to processing DH public values\n  that can lead to a buffer overflow and potentially remote code execution.\n  This vulnerability has been registered as CVE-2023-41913.\n\n- The new `pki --ocsp` command produces OCSP responses based on certificate\n  status information provided by plugins.\n\n  Two sources are currently available, the openxpki plugin that directly\n  accesses the OpenXPKI database and the `--index` argument, which reads\n  certificate status information from OpenSSL-style index.txt files.\n\n- The cert-enroll script handles the initial enrollment of an X.509 host\n  certificate with a PKI server via the EST or SCEP protocols.\n\n  Run as a systemd timer or via a crontab entry the script daily checks the\n  expiration date of the host certificate. When a given deadline is reached,\n  the host certificate is automatically renewed via EST or SCEP re-enrollment\n  based on the possession of the old private key and the matching certificate.\n\n- The --priv argument for charon-cmd allows using any type of private key.\n\n- Support for nameConstraints of type iPAddress has been added (the openssl\n  plugin previously didn't support nameConstraints at all).\n\n- SANs of type uniformResourceIdentifier can now be encoded in certificates.\n\n- Password-less PKCS#12 and PKCS#8 files are supported.\n\n- A new global option allows preventing peers from authenticating with trusted\n  end-entity certificates (i.e. local certificates).\n\n- ECDSA public keys that encode curve parameters explicitly are now rejected by\n  all plugins that support ECDSA.\n\n- charon-nm now actually uses the XFRM interfaces added with 5.9.10, it can\n  also use the name in connection.interface-name.\n\n- The resolve plugin tries to maintain the order of installed DNS servers.\n\n- The kernel-libipsec plugin always installs routes even if no address is found\n  in the local traffic selectors.\n\n- Increased the default receive buffer size for Netlink sockets to 8 MiB and\n  simplified its configuration.\n\n- Copy the issuer's subjectKeyIdentifier as authorityKeyIdentifier instead of\n  always generating a hash of the subjectPublicKey.\n\n- Fixed issues while reestablishing multiple CHILD_SAs (e.g. after a DPD\n  timeout) that could cause a reqid to get assigned to multiple CHILD_SAs with\n  unrelated traffic selectors.\n\n- Fixed a possible infinite loop issue in watcher_t and removed WATCHER_EXCEPT,\n  instead callbacks are always invoked even if only errors are signaled.\n\n- Fixed a regression in the IKE_SA_INIT tracking code added with 5.9.6 when\n  handling invalid messages.\n\n- Fixed adding the XFRMA_REPLAY_ESN_VAL attribute twice when updating SAs.\n\n- Correctly encode SPI from REKEY_SA notify in CHILD_SA_NOT_FOUND notify if\n  CHILD_SA is not found during rekeying.\n\n- The testing environment is now based on Debian 12 (bookworm), by default.\n\n\nstrongswan-5.9.11\n-----------------\n\n- A deadlock in the vici plugin has been fixed that could get triggered when\n  multiple connections were initiated/terminated concurrently and control-log\n  events were raised by the watcher_t component.\n\n- CRLs have to be signed by a certificate that has the cRLSign keyUsage bit\n  encoded (even if it's a CA), or a CA certificate without keyUsage extension.\n\n- Optional CA labels in EST server URIs are supported by `pki --est/estca`.\n\n- CMS-style signatures in PKCS#7 containers are supported by the pkcs7 and\n  openssl plugins, which allows verifying RSA-PSS and ECDSA signatures.\n\n- Fixed a regression in the server implementation of EAP-TLS with TLS 1.2 or\n  earlier that was introduced with 5.9.10.\n\n- Ensure the TLS handshake is complete in the EAP-TLS client with TLS <= 1.2.\n\n- kernel-libipsec can process raw ESP packets on Linux (disabled by default) and\n  gained support for trap policies.\n\n- The dhcp plugin uses an alternate method to determine the source address\n  for unicast DHCP requests that's not affected by interface filtering.\n\n- Certificate and trust chain selection as initiator has been improved in case\n  the local trust chain is incomplete and an unrelated certreq is received.\n\n- ECDSA and EdDSA keys in IPSECKEY RRs are supported by the ipseckey plugin.\n\n- To bypass tunnel mode SAs/policies, the kernel-wfp plugin installs bypass\n  policies also on the FWPM_SUBLAYER_IPSEC_TUNNEL sublayer.\n\n- Stale OCSP responses are now replace in-place in the certificate cache.\n\n- Fixed parsing of SCEP server capabilities by `pki --scep/scepca`.\n\n\nstrongswan-5.9.10\n-----------------\n\n- Fixed a vulnerability related to certificate verification in TLS-based EAP\n  methods that leads to an authentication bypass followed by an expired pointer\n  dereference that results in a denial of service and possibly even remote code\n  execution.\n  This vulnerability has been registered as CVE-2023-26463.\n\n- Added support for full packet hardware offload for IPsec SAs and policies with\n  Linux 6.2 kernels to the kernel-netlink plugin.\n\n- TLS-based EAP methods now use the standardized key derivation when used\n  with TLS 1.3.\n\n- The eap-tls plugin properly supports TLS 1.3 according to RFC 9190, by\n  implementing the \"protected success indication\".\n\n- With the `prefer` value for the `childless` setting, initiators will create\n  a childless IKE_SA if the responder supports the extension.\n\n- Routes via XFRM interfaces can optionally be installed automatically by\n  enabling the `install_routes_xfrmi` option of the kernel-netlink plugin.\n\n- charon-nm now uses XFRM interfaces instead of dummy TUN devices to avoid\n  issues with name resolution if they are supported by the kernel.\n\n- The `pki --req` command can encode extendedKeyUsage (EKU) flags in the\n  PKCS#10 certificate signing request.\n\n- The `pki --issue` command adopts EKU flags from CSRs but allows modifying them\n  (replace them completely, or adding/removing specific flags).\n\n- On Linux 6.2 kernels, the last use times of CHILD_SAs are determined via the\n  IPsec SAs instead of the policies.\n\n- For libcurl with MultiSSL support, the curl plugin provides an option to\n  select the SSL/TLS backend.\n\n\nstrongswan-5.9.9\n----------------\n\n- The charon.reqid_base setting allows specifying the first reqid that's\n  automatically assigned to a CHILD_SA.\n\n- The path/command for resolvconf(8) used by the resolve plugin is now\n  configurable.\n\n- The resolve plugin doesn't generate unique interface names for name servers\n  anymore. Instead, all available name servers are associated with a single,\n  configurable interface name.\n\n- Serial numbers of certificates and CRLs are now always returned in canonical\n  form (i.e. without leading zeros).\n\n- The kernel-netlink plugin now logs extended ACK error/warning messages.\n\n\nstrongswan-5.9.8\n----------------\n\n- Fixed a vulnerability related to accessing untrusted OCSP URIs and CDPs in\n  certificates that could lead to a denial-of-service attack.\n  This vulnerability has been registered as CVE-2022-40617.\n\n- The pki --scep|--scepca commands support the HTTP-based \"Simple Certificate\n  Enrollment Protocol\" (RFC 8894 SCEP) replacing the old and long deprecated\n  scepclient that has been removed.\n\n- The pki --est|estca commands support the HTTPS-based \"Enrollment over Secure\n  Transport\" (RFC 7030 EST) protocol.\n\n- The pki --req command can create a certificate request based on an existing\n  PKCS#10 template by replacing the public key and re-generating the signature\n  with the new private key.\n\n- For IKEv2, the ike_updown() \"up\" event and the state change to IKE_ESTABLISHED\n  are now triggered after all IKE-related tasks are done.\n\n- The ike_cfg_t object is now always replaced together with the peer_cfg_t\n  object that's set on an IKE_SA during authentication.\n\n- The gcm plugin has been enabled by default, so that the TLS 1.3 unit tests\n  can be completed successfully with just the default plugins.\n\n- The socket plugins don't set the SO_REUSEADDR option anymore on the IKE UDP\n  sockets, so an error is triggered if e.g. two daemons (e.g. charon and\n  charon-systemd) are running concurrently using the same ports.\n\n- The charon.rsa_pss_trailerfield setting generates an algorithmIdentifier with\n  explicit trailerField.\n\n\nstrongswan-5.9.7\n----------------\n\n- The IKEv2 key derivation is now delayed until the keys are actually needed for\n  the next message. Instead of deriving the keys while processing an IKE_SA_INIT\n  request, it's delayed until the corresponding IKE_AUTH request is received.\n  DH implementations now must do costly public key validation and the key\n  derivation in get_shared_secret().\n\n- Inbound IKEv2 messages are not parsed immediately anymore, instead we first\n  check a request's MID and compare its hash to that of the previous request to\n  decide if it's a valid retransmit (for fragmented message we only keep track\n  of the first fragment, so we don't have to wait for all fragments and\n  reconstruct the message, which we did before).\n\n- The retransmission logic in the dhcp plugin has been fixed so that four\n  retransmits are sent per DHCP request over a total of 15 seconds (previously,\n  it could happen that all were sent within the same second without any time\n  to actually wait for a response).\n\n- The connmark plugin now considers configured masks in installed firewall\n  rules, which allows using the upper parts of the mark value for other\n  purposes.  Just consider that the daemon might have to be restarted regularly\n  to reset the global unique mark counter as that's unaware of any masks.\n\n- Child config selection has been improved as responder in cases where multiple\n  children use transport mode traffic selectors.\n\n- The outbound SA/policy is now also removed after IKEv1 CHILD_SA rekeyings.\n\n- The openssl plugin supports AES and Camellia in CTR mode.\n\n\nstrongswan-5.9.6\n----------------\n\n- The IKEv2 key derivation, in particular prf+, has been modularized to simplify\n  certification (e.g. FIPS-140) via an already certified third-party library.\n  The botan, openssl and wolfssl plugins implement the key derivation for\n  HMAC-based PRFs via their respective HKDF implementation.  A generic\n  implementation is provided by the new kdf plugin.\n\n- Labeled IPsec with IKEv2 is supported in an SELinux and a proprietary simple\n  mode.  In SELinux mode, traffic that matches a trap policy with generic\n  context (e.g. system_u:object_r:ipsec_spd_t:s0) triggers the negotiation of\n  CHILD_SAs with a specific label.  With the simple mode, labels are not set on\n  SAs/policies but can be used as identifier to select specific child configs.\n\n- DoS protection has been improved:  COOKIE secrets are now switched based on a\n  time limit (2 min.), a new per-IP threshold (default 3) is used to trigger\n  them, and unprocessed IKE_SA_INITs are already counted as half-open IKE_SAs.\n\n- Initiating duplicate CHILD_SAs within the same IKE_SA is largely prevented.\n\n- Immediately initiating a CHILD_SA with trap policies is now possible via\n  `start_action=trap|start`.\n\n- If the source address is unknown when initiating an IKEv2 SA, a NAT situation\n  is now forced for IPv4 (for IPv6, NAT-T is disabled) to avoid causing\n  asymmetric enabling of UDP-encapsulation.\n\n- Installing unnecessary exclude routes for VPN servers on FreeBSD is avoided.\n\n- The new `map_level` option for syslog loggers allows mapping log levels\n  to syslog levels starting at the specified number.\n\n- The addrblock plugin allows limiting the validation depth of issuer addrblock\n  extensions.\n\n- The default AEAD ESP proposal (sent since 5.9.0) now includes `noesn` to make\n  it standards-compliant.\n\n- Individual CHILD_SAs can be queried via the `list-sas` vici command (or\n  `swanctl --list-sas ), either by unique ID or name.\n\n- Compatibility with OpenSSL 3.0 has been improved.\n\n\nstrongswan-5.9.5\n----------------\n\n- Fixed a vulnerability in the EAP client implementation that was caused by\n  incorrectly handling early EAP-Success messages. It may allow to bypass the\n  client and in some scenarios even the server authentication, or could lead to\n  a denial-of-service attack.\n  This vulnerability has been registered as CVE-2021-45079.\n\n- Using the trusted RSA or ECC Endorsement Key of the TPM 2.0, libtpmtss may now\n  establish a secure session via RSA encryption or an ephemeral ECDH key\n  exchange, respectively. The session allows HMAC-based authenticated\n  communication with the TPM 2.0 and the exchanged parameters can be encrypted\n  where necessary to guarantee confidentiality (e.g. when using the TPM as RNG).\n\n- Basic support for OpenSSL 3.0 has been added, in particular, the new\n  load_legacy option (enabled by default) allows loading the \"legacy\" provider\n  for algorithms like MD4 and DES (both required for EAP-MSCHAPv2), and the\n  existing fips_mode option allows explicitly loading the \"fips\" provider e.g.\n  if it's not activated in OpenSSL's fipsmodule.cnf.\n\n- The MTU of TUN devices created by the kernel-pfroute plugin on macOS and\n  FreeBSD is now configurable and reduced to 1400 bytes, by default.  This also\n  fixes an issue on macOS 12 that prevented the detection of virtual IPs\n  installed on such TUN devices.\n\n- When rekeying CHILD_SAs, the old outbound SA is now uninstalled shortly after\n  the new SA has been installed on the initiator/winner. This is useful for\n  IPsec implementations where the ordering of SAs is unpredictable and we can't\n  set the SPI on the outbound policy to switch to the new SA while both are\n  installed.\n\n- The sw-collector utility may now iterate through APT history logs processed\n  by logrotate.\n\n- The openssl plugin now only announces the ECDH groups actually supported by\n  OpenSSL (determined via EC_get_builtin_curves()).\n\n\nstrongswan-5.9.4\n----------------\n\n- Fixed a denial-of-service vulnerability in the gmp plugin that was caused by\n  an integer overflow when processing RSASSA-PSS signatures with very large\n  salt lengths.\n  This vulnerability has been registered as CVE-2021-41990.\n\n- Fixed a denial-of-service vulnerability in the in-memory certificate cache\n  if certificates are replaced and a very large random value caused an integer\n  overflow.\n  This vulnerability has been registered as CVE-2021-41991.\n\n- Fixed a related flaw that caused the daemon to accept an infinite number of\n  versions of a valid certificate by modifying the parameters in the\n  signatureAlgorithm field of the outer X.509 Certificate structure.\n\n- AUTH_LIFETIME notifies are now only sent by a responder if it can't\n  reauthenticate the IKE_SA itself due to asymmetric authentication (i.e. EAP)\n  or the use of virtual IPs.\n\n- Serial number generation in several pki sub-commands has been fixed so they\n  don't start with an unintended zero byte.\n\n- Initialize libtpmtss in all programs and library that use it.\n\n- Migrated testing scripts to Python 3.\n\n\nstrongswan-5.9.3\n----------------\n\n- Added AES_ECB, SHA-3 and SHAKE-256 support to wolfssl plugin.\n\n- Added AES_CCM and SHA-3 signature support to openssl plugin.\n\n- The x509 and openssl plugins now consider the authorityKeyIdentifier, if\n  available, before verifying signatures, which avoids unnecessary signature\n  verifications after a CA key rollover if both certificates are loaded.\n\n- The pkcs11 plugin better handles optional attributes like CKA_TRUSTED, which\n  previously depended on a version check.\n\n- charon-nm now supports using SANs as client identities, not only full DNs.\n\n- charon-tkm now handles IKE encryption.\n\n- A MOBIKE update is sent again if a a change in the NAT mappings is detected\n  but the endpoints stay the same.\n\n- Converted most of the test case scenarios to the vici interface\n\n\nstrongswan-5.9.2\n----------------\n\n- Together with a Linux 5.8 kernel supporting the IMA measurement of the GRUB\n  bootloader and the Linux kernel, the strongSwan Attestation IMC allows to do\n  remote attestation of the complete boot phase. A recent TPM 2.0 device with a\n  SHA-256 PCR bank is required, so that both BIOS and IMA file measurements are\n  based on SHA-256 hashes.\n\n- Our own TLS library (libtls) that we use for TLS-based EAP methods and PT-TLS\n  gained experimental support for TLS 1.3.  Thanks to Méline Sieber (client) and\n  Pascal Knecht (client and server) for their work on this.\n  Because the use of TLS 1.3 with these EAP methods is not yet standardized (two\n  Internet-Drafts are being worked on), the default maximum version is currently\n  set to TLS 1.2, which is now also the default minimum version. However the TNC\n  test scenarios using PT-TLS transport already use TLS 1.3.\n\n- Other improvements for libtls also affect older TLS versions. For instance, we\n  added support for ECDH with Curve25519/448 (DH groups may also be configured\n  now), for EdDSA keys and certificates and for RSA-PSS signatures. Support for\n  old and weak cipher suites has been removed (e.g. with 3DES and MD5) as well\n  as signature schemes with SHA-1.\n\n- The listener_t::ike_update event is now also called for MOBIKE updates. Its\n  signature has changed so we only have to call it once if both addresses/ports\n  have changed (e.g. for an address family switch).  The event is now also\n  exposed via vici.\n\n- The farp plugin has been ported to macOS and FreeBSD. Thanks to Dan James for\n  working on this.\n\n- To fix DNS server installation with systemd-resolved, charon-nm now creates a\n  dummy TUN device again (was removed with 5.5.1).\n\n- The botan plugin can use rng_t implementations provided by other plugins when\n  generating keys etc. if the Botan library supports it.\n\n- charon-tkm now supports multiple CAs and is configured via vici/swanctl.\n\n- Simple glob patterns (e.g. include conf.d/*.conf) now also work on Windows.\n  Handling of forward slashes in paths on Windows has also been improved.\n\n- The abbreviations for the 'surname' and 'serial number' RDNs in ASN.1 DNs have\n  been changed to align with RFC 4519: The abbreviation for 'surname' is now\n  \"SN\" (was \"S\" before), which was previously used for 'serial number' that can\n  now be specified as \"serialNumber\" only.\n\n- An issue with Windows clients requesting previous IPv6 but not IPv4 virtual\n  IP addresses has been fixed.\n\n- ike_sa_manager_t:  Checking out IKE_SAs by config is now atomic (e.g. when\n  acquires for different children of the same connection arrive concurrently).\n  The checkout_new() method has been renamed to create_new(). A new\n  checkout_new() method allows registering a new IKE_SA with the manager before\n  checking it in, so jobs can be queued without losing them as they can block\n  on checking out the new SA.\n\n\nstrongswan-5.9.1\n----------------\n\n- Remote attestation via TNC supports the SHA-256 based TPM 2.0 BIOS/EFI\n  measurements introduced with the Linux 5.4 kernel.\n\n- Nonces in OCSP responses are not enforced anymore and only validated if a\n  nonce is actually contained.\n\n- Fixed an issue when only some fragments of a retransmitted IKEv2 message were\n  received, which prevented processing a following fragmented message.\n\n- All queued vici messages are now sent to subscribed clients during shutdown,\n  which includes ike/child-updown events triggered when all SAs are deleted.\n\n- CHILD_SA IP addresses are updated before installation to allow MOBIKE updates\n  while retransmitting a CREATE_CHILD_SA request.\n\n- When looking for a route to the peer, the kernel-netlink plugin ignores the\n  current source address if it's deprecated.\n\n- The file and syslog loggers support logging the log level of each message\n  after the subsystem (e.g. [IKE2]).\n\n- charon-nm is now properly terminated during system shutdown.\n\n- Improved support for EdDSA keys in vici/swanctl, in particular, encrypted\n  keys are now supported.\n\n- A new global strongswan.conf option allows sending the Cisco FlexVPN vendor ID\n  to prevent Cisco devices from narrowing a 0.0.0.0/0 traffic selector.\n\n- The openssl plugin accepts CRLs issued by non-CA certificates if they contain\n  the cRLSign keyUsage flag (the x509 plugin already does this since 4.5.1).\n\n- Attributes in PKCS#7 containers, as used in SCEP, are now properly\n  DER-encoded, i.e. sorted.\n\n- The load-tester plugin now supports virtual IPv6 addresses and IPv6 source\n  address pools.\n\n\nstrongswan-5.9.0\n----------------\n\n- We prefer AEAD algorithms for ESP and therefore put AES-GCM in a default AEAD\n  proposal in front of the previous default proposal.\n\n- The NM backend now clears cached credentials when disconnecting, has DPD and\n  and close action set to restart, and supports custom remote TS via 'remote-ts'\n  option (no GUI support).\n\n- The pkcs11 plugin falls back to software hashing for PKCS#1v1.5 RSA signatures\n  if mechanisms with hashing (e.g. CKM_SHA256_RSA_PKCS) are not supported.\n\n- The owner/group of log files is now set so the daemon can reopen them if the\n  config is reloaded and it doesn't run as root.\n\n- The wolfssl plugin (with wolfSSL 4.4.0+) supports x448 DH and Ed448 keys.\n\n- The vici plugin stores all CA certificates in one location, which avoids\n  issues with unloading authority sections or clearing all credentials.\n\n- When unloading a vici connection with start_action=start, any related IKE_SAs\n  without children are now terminated (including those in CONNECTING state).\n\n- The hashtable implementation has been changed so it maintains insertion order.\n  This was mainly done so the vici plugin can store its connections in a\n  hashtable, which makes managing high numbers of connections faster.\n\n- The default maximum size for vici messages (512 KiB) can now be changed via\n  VICI_MESSAGE_SIZE_MAX compile option.\n\n- The charon.check_current_path option allows forcing a DPD exchange to check if\n  the current path still works whenever interface/address-changes are detected.\n\n- It's possible to use clocks other than CLOCK_MONOTONIC (e.g. CLOCK_BOOTTIME)\n  via TIME_CLOCK_ID compile option if clock_gettime() is available and\n  pthread_condattr_setclock() supports that clock.\n\n- Test cases and functions can now be filtered when running the unit tests.\n\n\nstrongswan-5.8.4\n----------------\n\n- In IKEv1 Quick Mode make sure that a proposal exists before determining\n  lifetimes (fixes crash due to null pointer exception).\n\n- OpenSSL currently doesn't support squeezing bytes out of a SHAKE128/256\n  XOF (eXtended Output Function) multiple times.  Unfortunately,\n  EVP_DigestFinalXOF() completely resets the context and later calls not\n  simply fail, they cause a null-pointer dereference in libcrypto. This\n  fixes the crash at the cost of repeating initializing the whole state\n  and allocating too much data for subsequent calls.\n\n\nstrongswan-5.8.3\n----------------\n\n- Updates for the NM backend (and plugin), among others: EAP-TLS authentication,\n  configurable local and remote IKE identities, custom server port, redirection\n  and reauthentication support.\n\n- Previously used reqids are now reallocated to workaround an issue on FreeBSD\n  where the daemon can't use reqids > 16383.\n\n- On Linux, throw type routes are installed for passthrough policies. They act\n  as fallbacks on routes in other tables and require less information, so they\n  can be installed earlier and are not affected by updates.\n\n- For IKEv1, the lifetimes of the selected transform are returned to the\n  initiator, which is an issue with peers that propose different lifetimes in\n  different transforms.  We also return the correct transform and proposal IDs.\n\n- IKE_SAs are not re-established anymore if a deletion has been queued.\n\n- Added support for Ed448 keys and certificates via openssl plugin and pki tool.\n  The openssl plugin also supports SHA-3 and SHAKE128/256.\n\n- The use of algorithm IDs from the private use ranges can now be enabled\n  globally, to use them even if no strongSwan vendor ID was exchanged.\n\n\nstrongswan-5.8.2\n----------------\n\n- Identity-based CA constraints are supported via vici/swanctl.conf. They\n  enforce that the remote's certificate chain contains a CA certificate with a\n  specific identity. While similar to the existing CA constraints, they don't\n  require that the CA certificate is locally installed such as intermediate CA\n  certificates received from peers. Compared to wildcard identity matching (e.g.\n  \"..., OU=Research, CN=*\") this requires less trust in the intermediate CAs (to\n  only issue certificates with legitimate subject DNs) as long as path length\n  basic constraints prevent them from issuing further intermediate CAs.\n\n- Intermediate CA certificates may now be sent in hash-and-URL encoding by\n  configuring a base URL for the parent CA.\n\n- Implemented NIST SP-800-90A Deterministic Random Bit Generator (DRBG)\n  based on AES-CTR and SHA2-HMAC modes. Currently used by gmp and ntru plugins.\n\n- Random nonces sent in an OCSP requests are now expected in the corresponding\n  OCSP responses.\n\n- The kernel-netlink plugin ignores deprecated IPv6 addresses for MOBIKE.\n  Whether temporary or permanent IPv6 addresses are included depends on the\n  charon.prefer_temporary_addrs setting.\n\n- Extended Sequence Numbers (ESN) are configured via PF_KEY if supported by the\n  kernel.\n\n- Unique section names are used for CHILD_SAs in vici child-updown events and\n  more information (e.g. statistics) are included for individually deleted\n  CHILD_SAs (in particular for IKEv1).\n\n- So fallbacks to other plugins work properly, creating HMACs via openssl plugin\n  now fails instantly if the underlying hash algorithm isn't supported (e.g.\n  MD5 in FIPS-mode).\n\n- Exponents of RSA keys read from TPM 2.0 via SAPI are now correctly converted.\n\n- Routing table IDs > 255 are supported for custom routes on Linux.\n\n- The D-Bus config file for charon-nm is now installed in\n  $(datadir)/dbus-1/system.d instead of $(sysconfdir)/dbus-1/system.d.\n\n- INVALID_MAJOR_VERSION notifies are now correctly sent in messages of the same\n  exchange type and using the same message ID as the request.\n\n- IKEv2 SAs are immediately destroyed when sending or receiving INVALID_SYNTAX\n  notifies in authenticated messages.\n\n\nstrongswan-5.8.1\n----------------\n\n- RDNs in Distinguished Names can now optionally be matched less strict. The\n  global option charon.rdn_matching takes two alternative values that cause the\n  matching algorithm to either ignore the order of matched RDNs or additionally\n  accept DNs that contain more RDNs than configured (unmatched RDNs are treated\n  like wildcard matches).\n\n- The updown plugin now passes the same interface to the script that is also\n  used for the automatically installed routes, i.e. the interface over which the\n  peer is reached instead of the interface on which the local address is found.\n\n- TPM 2.0 contexts are now protected by a mutex to prevent issues if multiple\n  IKE_SAs use the same private key concurrently.\n\n\nstrongswan-5.8.0\n----------------\n\n- The systemd service units have been renamed. The modern unit, which was called\n  strongswan-swanctl, is now called strongswan (the previous name is configured\n  as alias). The legacy unit is now called strongswan-starter.\n\n- Support for XFRM interfaces (available since Linux 4.19) has been added.\n  Configuration is possible via swanctl.conf.  Interfaces may be created\n  dynamically via updown/vici scripts, or statically before or after\n  establishing the SAs. Routes must be added manually as needed (the daemon will\n  not install any routes for outbound policies with an interface ID).\n\n- Initiation of childless IKE_SAs is supported (RFC 6023). If enabled and\n  supported by the responder, no CHILD_SA is established during IKE_AUTH. This\n  allows using a separate DH exchange even for the first CHILD_SA, which is\n  otherwise created with keys derived from the IKE_SA's key material.\n\n- The NetworkManager backend and plugin support IPv6.\n\n- The new wolfssl plugin is a wrapper around the wolfSSL crypto library. Thanks\n  to Sean Parkinson of wolfSSL Inc. for the initial patch.\n\n- IKE SPIs may optionally be labeled via the charon.spi_mask|label options. This\n  feature was extracted from charon-tkm, however, now applies the mask/label in\n  network order.\n\n- The openssl plugin supports ChaCha20-Poly1305 when built with OpenSSL 1.1.0.\n\n- The PB-TNC finite state machine according to section 3.2 of RFC 5793 was not\n  correctly implemented when sending either a CRETRY or SRETRY batch. These\n  batches can only be sent in the \"Decided\" state and a CRETRY batch can\n  immediately carry all messages usually transported by a CDATA batch. It is\n  currently not possible to send a SRETRY batch since full-duplex mode for\n  PT-TLS transport is not supported.\n\n- Instead of marking virtual IPv6 addresses as deprecated, the kernel-netlink\n  plugin uses address labels to avoid their use for non-VPN traffic.\n\n- The agent plugin creates sockets to the ssh/gpg-agent dynamically and does not\n  keep them open, which otherwise can prevent the agent from getting terminated.\n\n- To avoid broadcast loops the forecast plugin now only reinjects packets that\n  are marked or received from the configured interface.\n\n- UTF-8 encoded passwords are supported via EAP-MSCHAPv2, which internally uses\n  an UTF-16LE encoding to calculate the NT hash.\n\n- Adds the build-certs script to generate the keys and certificates used for\n  regression tests dynamically.  They are built with the pki version installed\n  in the KVM root image so it's not necessary to have an up-to-date version with\n  all required plugins installed on the host system.\n\n\nstrongswan-5.7.2\n----------------\n\n- Private key implementations may optionally provide a list of supported\n  signature schemes, which is used by the tpm plugin because for each key on a\n  TPM 2.0 the hash algorithm and for RSA also the padding scheme is predefined.\n\n- For RSA with PSS padding, the TPM 2.0 specification mandates the maximum salt\n  length (as defined by the length of the key and hash).  However, if the TPM is\n  FIPS-168-4 compliant, the salt length equals the hash length.  This is assumed\n  for FIPS-140-2 compliant TPMs, but if that's not the case, it might be\n  necessary to manually enable charon.plugins.tpm.fips_186_4 if the TPM doesn't\n  use the maximum salt length.\n\n- swanctl now accesses directories for credentials relative to swanctl.conf, in\n  particular, when it's loaded from a custom location via --file argument.  The\n  base directory that's used if --file is not given is configurable at runtime\n  via SWANCTL_DIR environment variable.\n\n- With RADIUS Accounting enabled, the eap-radius plugin adds the session ID to\n  Access-Request messages, simplifying associating database entries for IP\n  leases and accounting with sessions.\n\n- IPs assigned by RADIUS servers are included in Accounting-Stop even if clients\n  don't claim them, allowing releasing them early on connection errors.\n\n- Selectors installed on transport mode SAs by the kernel-netlink plugin are\n  updated on IP address changes (e.g. via MOBIKE).\n\n- Added support for RSA signatures with SHA-256 and SHA-512 to the agent plugin.\n  For older versions of ssh/gpg-agent that only support SHA-1, IKEv2 signature\n  authentication has to be disabled via charon.signature_authentication.\n\n- The sshkey and agent plugins support Ed25519/Ed448 SSH keys and signatures.\n\n- The openssl plugin supports X25519/X448 Diffie-Hellman and Ed25519/Ed448 keys\n  and signatures when built against OpenSSL 1.1.1.\n\n- Ed25519, ChaCha20/Poly1305, SHA-3 and AES-CCM were added to the botan plugin.\n\n- The mysql plugin now properly handles database connections with transactions\n  under heavy load.\n\n- IP addresses in HA pools are now distributed evenly among all segments.\n\n- On newer FreeBSD kernels, the kernel-pfkey plugin reads the reqid directly\n  from SADB_ACQUIRE messages, i.e. not requiring previous policy installation by\n  the plugin, e.g. for compatibility with if_ipsec(4) VTIs.\n\n\nstrongswan-5.7.1\n----------------\n\n- Fixes a vulnerability in the gmp plugin triggered by crafted certificates with\n  RSA keys with very small moduli.  When verifying signatures with such keys,\n  the code patched with the fix for CVE-2018-16151/2 caused an integer underflow\n  and subsequent heap buffer overflow that results in a crash of the daemon.\n  The vulnerability has been registered as CVE-2018-17540.\n\n\nstrongswan-5.7.0\n----------------\n\n- Fixes a potential authorization bypass vulnerability in the gmp plugin that\n  was caused by a too lenient verification of PKCS#1 v1.5 signatures.  Several\n  flaws could be exploited by a Bleichenbacher-style attack to forge signatures\n  for low-exponent keys (i.e. with e=3).  CVE-2018-16151 has been assigned to\n  the problem of accepting random bytes after the OID of the hash function in\n  such signatures, and CVE-2018-16152 has been assigned to the issue of not\n  verifying that the parameters in the ASN.1 algorithmIdentifier structure is\n  empty.  Other flaws that don't lead to a vulnerability directly (e.g. not\n  checking for at least 8 bytes of padding) have no separate CVE assigned.\n\n- Dots are not allowed anymore in section names in swanctl.conf and\n  strongswan.conf. This mainly affects the configuration of file loggers. If the\n  path for such a log file contains dots it now has to be configured in the new\n  `path` setting within the arbitrarily renamed subsection in the `filelog`\n  section.\n\n- Sections in swanctl.conf and strongswan.conf may now reference other sections.\n  All settings and subsections from such a section are inherited. This allows\n  to simplify configs as redundant information has only to be specified once\n  and may then be included in other sections (refer to the example in the man\n  page for strongswan.conf).\n\n- The originally selected IKE config (based on the IPs and IKE version) can now\n  change if no matching algorithm proposal is found.  This way the order\n  of the configs doesn't matter that much anymore and it's easily possible to\n  specify separate configs for clients that require weak algorithms (instead\n  of having to also add them in other configs that might be selected).\n\n- Support for Postquantum Preshared Keys for IKEv2 (draft-ietf-ipsecme-qr-ikev2)\n  has been added.\n\n- The new botan plugin is a wrapper around the Botan C++ crypto library. It\n  requires a fairly recent build from Botan's master branch (or the upcoming\n  2.8.0 release). Thanks to René Korthaus and his team from Rohde & Schwarz\n  Cybersecurity for the initial patch.\n\n- The pki tool accepts a xmppAddr otherName as a subjectAlternativeName using\n  the syntax --san xmppaddr:<jid>.\n\n- Implementation of RFC 8412 \"Software Inventory Message and Attributes (SWIMA)\n  for PA-TNC\". SWIMA subscription option sets CLOSE_WRITE trigger on apt\n  history.log file resulting in a ClientRetry PB-TNC batch to initialize\n  a new measurement cycle.\n\n- Added support for fuzzing the PA-TNC (RFC 5792) and PB-TNC (RFC 5793) NEA\n  protocols on Google's OSS-Fuzz infrastructure.\n\n- Support for version 2 of Intel's TPM2-TSS TGC Software Stack. The presence of\n  the in-kernel /dev/tpmrm0 resource manager is automatically detected.\n\n- Marks the in- and/or outbound SA should apply to packets after processing may\n  be configured in swanctl.conf on Linux.  For outbound SAs this requires at\n  least a 4.14 kernel.  Setting a mask and configuring a mark/mask for inbound\n  SAs will be added with the upcoming 4.19 kernel.\n\n- New options in swanctl.conf allow configuring how/whether DF, ECN and DS\n  fields in the IP headers are copied during IPsec processing. Controlling this\n  is currently only possible on Linux.\n\n- To avoid conflicts, the dhcp plugin now only uses the DHCP server port if\n  explicitly configured.\n\n\nstrongswan-5.6.3\n----------------\n\n- Fixed a DoS vulnerability in the IKEv2 key derivation if the openssl plugin is\n  used in FIPS mode and HMAC-MD5 is negotiated as PRF.\n  This vulnerability has been registered as CVE-2018-10811.\n\n- Fixed a vulnerability in the stroke plugin, which did not check the received\n  length before reading a message from the socket. Unless a group is configured,\n  root privileges are required to access that socket, so in the default\n  configuration this shouldn't be an issue.\n  This vulnerability has been registered as CVE-2018-5388.\n\n⁻ CRLs that are not yet valid are now ignored to avoid problems in scenarios\n  where expired certificates are removed from CRLs and the clock on the host\n  doing the revocation check is trailing behind that of the host issuing CRLs.\n\n- The issuer of fetched CRLs is now compared to the issuer of the checked\n  certificate.\n\n- CRL validation results other than revocation (e.g. a skipped check because\n  the CRL couldn't be fetched) are now stored also for intermediate CA\n  certificates and not only for end-entity certificates, so a strict CRL policy\n  can be enforced in such cases.\n\n- In compliance with RFC 4945, section 5.1.3.2, certificates used for IKE must\n  now either not contain a keyUsage extension (like the ones generated by pki)\n  or have at least one of the digitalSignature or nonRepudiation bits set.\n\n- New options for vici/swanctl allow forcing the local termination of an IKE_SA.\n  This might be useful in situations where it's known the other end is not\n  reachable anymore, or that it already removed the IKE_SA, so retransmitting a\n  DELETE and waiting for a response would be pointless.  Waiting only a certain\n  amount of time for a response before destroying the IKE_SA is also possible\n  by additionally specifying a timeout.\n\n- When removing routes, the kernel-netlink plugin now checks if it tracks other\n  routes for the same destination and replaces the installed route instead of\n  just removing it.  Same during installation, where existing routes previously\n  weren't replaced.  This should allow using traps with virtual IPs on Linux.\n\n- The dhcp plugin only sends the client identifier option if identity_lease is\n  enabled.  It can also send identities of up to 255 bytes length, instead of\n  the previous 64 bytes.  If a server address is configured, DHCP requests are\n  now sent from port 67 instead of 68 to avoid ICMP port unreachables.\n\n- Roam events are now completely ignored for IKEv1 SAs.\n\n- ChaCha20/Poly1305 is now correctly proposed without key length. For\n  compatibility with older releases the chacha20poly1305compat keyword may be\n  included in proposals to also propose the algorithm with a key length.\n\n- Configuration of hardware offload of IPsec SAs is now more flexible and allows\n  a new mode, which automatically uses it if the kernel and device support it.\n\n- SHA-2 based PRFs are supported in PKCS#8 files as generated by OpenSSL 1.1.\n\n- The pki --verify tool may load CA certificates and CRLs from directories.\n\n- Fixed an issue with DNS servers passed to NetworkManager in charon-nm.\n\n\nstrongswan-5.6.2\n----------------\n\n- Fixed a DoS vulnerability in the parser for PKCS#1 RSASSA-PSS signatures that\n  was caused by insufficient input validation.  One of the configurable\n  parameters in algorithm identifier structures for RSASSA-PSS signatures is the\n  mask generation function (MGF).  Only MGF1 is currently specified for this\n  purpose.  However, this in turn takes itself a parameter that specifies the\n  underlying hash function.  strongSwan's parser did not correctly handle the\n  case of this parameter being absent, causing an undefined data read.\n  This vulnerability has been registered as CVE-2018-6459.\n\n- The previously negotiated DH group is reused when rekeying an SA, instead of\n  using the first group in the configured proposals, which avoids an additional\n  exchange if the peer selected a different group via INVALID_KE_PAYLOAD when\n  the SA was created initially.\n  The selected DH group is also moved to the front of all sent proposals that\n  contain it and all proposals that don't are moved to the back in order to\n  convey the preference for this group to the peer.\n\n- Handling of MOBIKE task queuing has been improved. In particular, the response\n  to an address update is not ignored anymore if only an address list update or\n  DPD is queued.\n\n- The fallback drop policies installed to avoid traffic leaks when replacing\n  addresses in installed policies are now replaced by temporary drop policies,\n  which also prevent acquires because we currently delete and reinstall IPsec\n  SAs to update their addresses.\n\n- Access X.509 certificates held in non-volatile storage of a TPM 2.0\n  referenced via the NV index.\n\n- Adding the --keyid parameter to pki --print allows to print private keys\n  or certificates stored in a smartcard or a TPM 2.0.\n\n- Fixed proposal selection if a peer incorrectly sends DH groups in the ESP\n  proposals during IKE_AUTH and also if a DH group is configured in the local\n  ESP proposal and charon.prefer_configured_proposals is disabled.\n\n- MSKs received via RADIUS are now padded to 64 bytes to avoid compatibility\n  issues with EAP-MSCHAPv2 and PRFs that have a block size < 64 bytes (e.g.\n  AES-XCBC-PRF-128).\n\n- The tpm_extendpcr command line tool extends a digest into a TPM PCR.\n\n- Ported the NetworkManager backend from the deprecated libnm-glib to libnm.\n\n- The save-keys debugging/development plugin saves IKE and/or ESP keys to files\n  compatible with Wireshark.\n\n\nstrongswan-5.6.1\n----------------\n\n- In compliance with RFCs 8221 and 8247 several algorithms were removed from the\n  default ESP/AH and IKEv2 proposals, respectively (3DES, Blowfish and MD5 from\n  ESP/AH, MD5 and MODP-1024 from IKEv2).  These algorithms may still be used in\n  custom proposals.\n\n- Added support for RSASSA-PSS signatures.  For backwards compatibility they are\n  not used automatically by default, enable charon.rsa_pss to change that.  To\n  explicitly use or require such signatures with IKEv2 signature authentication\n  (RFC 7427), regardless of whether that option is enabled, use ike:rsa/pss...\n  authentication constraints.\n\n- The pki tool can optionally sign certificates/CRLs with RSASSA-PSS via the\n  `--rsa-padding pss` option.\n\n- The sec-updater tool checks for security updates in dpkg-based repositories\n  (e.g. Debian/Ubuntu) and sets the security flags in the IMV policy database\n  accordingly. Additionally for each new package version a SWID tag for the\n  given OS and HW architecture is created and stored in the database.\n  Using the sec-updater.sh script template the lookup can be automated\n  (e.g. via an hourly cron job).\n\n- The introduction of file versions in the IMV database scheme broke file\n  reference hash measurements. This has been fixed by creating generic product\n  versions having an empty package name.\n\n- A new timeout option for the systime-fix plugin stops periodic system time\n  checks after a while and enforces a certificate verification, closing or\n  reauthenticating all SAs with invalid certificates.\n\n- The IKE event counters, previously only available via ipsec listcounters, may\n  now be queried/reset via vici and the new swanctl --counters command. They are\n  provided by the new optional counters plugin.\n\n- Class attributes received in RADIUS Access-Accept messages may optionally be\n  added to RADIUS accounting messages.\n\n- Inbound marks may optionally be installed on the SA again (was removed with\n  5.5.2) by enabling the mark_in_sa option in swanctl.conf.\n\n\nstrongswan-5.6.0\n----------------\n\n- Fixed a DoS vulnerability in the gmp plugin that was caused by insufficient\n  input validation when verifying RSA signatures, which requires decryption\n  with the operation m^e mod n, where m is the signature, and e and n are the\n  exponent and modulus of the public key.  The value m is an integer between\n  0 and n-1, however, the gmp plugin did not verify this.  So if m equals n the\n  calculation results in 0, in which case mpz_export() returns NULL.  This\n  result wasn't handled properly causing a null-pointer dereference.\n  This vulnerability has been registered as CVE-2017-11185.\n\n- New SWIMA IMC/IMV pair implements the \"draft-ietf-sacm-nea-swima-patnc\"\n  Internet Draft and has been demonstrated at the IETF 99 Prague Hackathon.\n\n- The IMV database template has been adapted to achieve full compliance\n  with the ISO 19770-2:2015 SWID tag standard.\n\n- The sw-collector tool extracts software events from apt history logs\n  and stores them in an SQLite database to be used by the SWIMA IMC.\n  The tool can also generate SWID tags both for installed and removed\n  package versions.\n\n- The pt-tls-client can attach and use TPM 2.0 protected private keys\n  via the --keyid parameter.\n\n- libtpmtss supports Intel's TSS2 Architecture Broker and Resource\n  Manager interface (tcti-tabrmd).\n\n- The new eap-aka-3gpp plugin implements the 3GPP MILENAGE algorithms\n  in software.  K (optionally concatenated with OPc) may be configured as\n  binary EAP secret.\n\n- CHILD_SA rekeying was fixed in charon-tkm and was slightly changed: The\n  switch to the new outbound IPsec SA now happens via SPI on the outbound\n  policy on Linux, and in case of lost rekey collisions no outbound SA/policy\n  is temporarily installed for the redundant CHILD_SA.\n\n- The new %unique-dir value for mark* settings allocates separate unique marks\n  for each CHILD_SA direction (in/out).\n\n\nstrongswan-5.5.3\n----------------\n\n- Fixed a DoS vulnerability in the gmp plugin that was caused by insufficient\n  input validation when verifying RSA signatures.  More specifically,\n  mpz_powm_sec() has two requirements regarding the passed exponent and modulus\n  that the plugin did not enforce, if these are not met the calculation will\n  result in a floating point exception that crashes the whole process.\n  This vulnerability has been registered as CVE-2017-9022.\n\n- Fixed a DoS vulnerability in the x509 plugin that was caused because the ASN.1\n  parser didn't handle ASN.1 CHOICE types properly, which could result in an\n  infinite loop when parsing X.509 extensions that use such types.\n  This vulnerability has been registered as CVE-2017-9023.\n\n- The behavior during IKEv2 CHILD_SA rekeying has been changed in order to avoid\n  traffic loss. The responder now only installs the new inbound SA and delays\n  installing the outbound SA until it receives the DELETE for the replaced\n  CHILD_SA.  Similarly, the inbound SA of the replaced CHILD_SA is not removed\n  for a configurable amount of seconds (charon.delete_rekeyed_delay) after the\n  DELETE has been processed to reduce the chance of dropping delayed packets.\n\n- The code base has been ported to Apple's ARM64 iOS platform, whose calling\n  conventions for variadic and regular functions are different.  This means\n  assigning non-variadic functions to variadic function pointers does not work.\n  To avoid this issue the enumerator_t interface has been changed and the\n  signatures of the callback functions for enumerator_create_filter(), and the\n  invoke_function() and find_first() methods on linked_list_t have been changed.\n  The return type of find_first() also changed from status_t to bool.\n\n- Added support for fuzzing the certificate parser provided by the default\n  plugins (x509, pem, gmp etc.) on Google's OSS-Fuzz infrastructure. Several\n  issues found while fuzzing these plugins were fixed.\n\n- Two new options have been added to charon's retransmission settings:\n  retransmit_limit and retransmit_jitter.  The former adds an upper limit to the\n  calculated retransmission timeout, the latter randomly reduces it.\n\n- A bug in swanctl's --load-creds command was fixed that caused unencrypted\n  private keys to get unloaded if the command was called multiple times. The\n  load-key VICI command now returns the key ID of the loaded key on success.\n\n- The credential manager now enumerates local credential sets before global\n  ones. This means certificates supplied by the peer will now be preferred over\n  certificates with the same identity that may be locally stored (e.g. in the\n  certificate cache).\n\n- Added support for hardware offload of IPsec SAs as introduced by Linux 4.11\n  for hardware that supports this.\n\n- When building the libraries monolithically and statically the plugin\n  constructors are now hard-coded in each library so the plugin code is not\n  removed by the linker because it thinks none of their symbols are ever\n  referenced.\n\n- The pki tool loads the curve25519 plugin by default.\n\n\nstrongswan-5.5.2\n----------------\n\n- Support of Diffie-Hellman group 31 using Curve25519 for IKE as defined\n  by RFC 8031.\n\n- Support of Ed25519 digital signature algorithm for IKEv2 as defined by\n  draft-ietf-ipsecme-eddsa. Ed25519-based public key pairs, X.509 certificates\n  and CRLs can be generated and printed by the pki tool.\n\n- The new \"tpm\" libtpmtss plugin allows to use persistent private RSA and ECDSA\n  keys bound to a TPM 2.0 for both IKE and TLS authentication. Using the\n  TPM 2.0 object handle as keyid parameter, the pki --pub tool can extract\n  the public key from the TPM thereby replacing the aikpub2 tool. In a similar\n  fashion pki --req can generate a PKCS#10 certificate request signed with\n  the TPM private key.\n\n- The pki tool gained support for generating certificates with the RFC 3779\n  addrblock extension. The charon addrblock plugin now dynamically narrows\n  traffic selectors based on the certificate addrblocks instead of rejecting\n  non-matching selectors completely. This allows generic connections, where\n  the allowed selectors are defined by the used certificates only.\n\n- In-place update of cached base and delta CRLs does not leave dozens\n  of stale copies in cache memory.\n\n- Several new features for the VICI interface and the swanctl utility: Querying\n  specific pools, enumerating and unloading keys and shared secrets, loading\n  keys and certificates from PKCS#11 tokens, the ability to initiate, install\n  and uninstall connections and policies by their exact name (if multiple child\n  sections in different connections share the same name), a command to initiate\n  the rekeying of IKE and IPsec SAs, support for settings previously only\n  supported by the old config files (plain pubkeys, dscp, certificate policies,\n  IPv6 Transport Proxy Mode, NT Hash secrets, mediation extension).\n\n  Important:  Due to issues with VICI bindings that map sub-sections to\n  dictionaries the CHILD_SA sections returned via list-sas now have a unique\n  name, the original name of a CHILD_SA is returned in the \"name\" key of its\n  section.\n\n\nstrongswan-5.5.1\n----------------\n\n- The newhope plugin implements the post-quantum NewHope key exchange algorithm\n  proposed in their 2015 paper by Erdem Alkim, Léo Ducas, Thomas Pöppelmann and\n  Peter Schwabe.\n\n- The libstrongswan crypto factory now offers the registration of Extended\n  Output Functions (XOFs). Currently supported XOFs are SHAKE128 and SHAKE256\n  implemented by the sha3 plugin, ChaCHa20 implemented by the chapoly plugin\n  and the more traditional MGF1 Mask Generation Functions based on the SHA-1,\n  SHA-256 and SHA-512 hash algorithms implemented by the new mgf1 plugin.\n\n- The pki tool, with help of the pkcs1 or openssl plugins, can parse private\n  keys in any of the supported formats without having to know the exact type.\n  So instead of having to specify rsa or ecdsa explicitly the keyword priv may\n  be used to indicate a private key of any type. Similarly, swanctl can load\n  any type of private key from the swanctl/private directory.\n\n- The pki tool can handle RSASSA-PKCS1v1.5-with-SHA-3 signatures using the\n  sha3 and gmp plugins.\n\n- The VICI flush-certs command flushes certificates from the volatile\n  certificate cache. Optionally the type of the certificates to be\n  flushed  (e.g. type = x509_crl) can be specified.\n\n- Setting cache_crls = yes in strongswan.conf the vici plugin saves regular,\n  base and delta CRLs to disk.\n\n- IKE fragmentation is now enabled by default with the default fragment size\n  set to 1280 bytes for both IP address families.\n\n- libtpmtss: In the TSS2 API the function TeardownSocketTcti() was replaced by\n  tss2_tcti_finalize().\n\n\nstrongswan-5.5.0\n----------------\n\n- The new libtpmtss library offers support for both TPM 1.2 and TPM 2.0\n  Trusted Platform Modules. This allows the Attestation IMC/IMV pair to\n  do TPM 2.0 based attestation.\n\n- The behavior during IKEv2 exchange collisions has been improved/fixed in\n  several corner cases and support for TEMPORARY_FAILURE and CHILD_SA_NOT_FOUND\n  notifies, as defined by RFC 7296, has been added.\n\n- IPsec policy priorities can be set manually (e.g. for high-priority drop\n  policies) and outbound policies may be restricted to a network interface.\n\n- The scheme for the automatically calculated default priorities has been\n  changed and now also considers port masks, which were added with 5.4.0.\n\n- FWD policies are now installed in both directions in regards to the traffic\n  selectors.  Because such \"outbound\" FWD policies could conflict with \"inbound\"\n  FWD policies of other SAs they are installed with a lower priority and don't\n  have a reqid set, which allows kernel plugins to distinguish between the two\n  and prefer those with a reqid.\n\n- For outbound IPsec SAs no replay window is configured anymore.\n\n- Enhanced the functionality of the swanctl --list-conns command by listing\n  IKE_SA and CHILD_SA reauthentication and rekeying settings, and EAP/XAuth\n  identities and EAP types.\n\n- DNS servers installed by the resolve plugin are now refcounted, which should\n  fix its use with make-before-break reauthentication.  Any output written to\n  stderr/stdout by resolvconf is now logged.\n\n- The methods in the kernel interfaces have been changed to take structs instead\n  of long lists of arguments.  Similarly the constructors for peer_cfg_t and\n  child_cfg_t now take structs.\n\n\nstrongswan-5.4.0\n----------------\n\n- Support for IKEv2 redirection (RFC 5685) has been added.  Plugins may\n  implement the redirect_provider_t interface to decide if and when to redirect\n  connecting clients.  It is also possible to redirect established IKE_SAs based\n  on different selectors via VICI/swanctl.  Unless disabled in strongswan.conf\n  the charon daemon will follow redirect requests received from servers.\n\n- The ike: prefix enables the explicit configuration of signature scheme\n  constraints against IKEv2 authentication in rightauth, which allows the use\n  of different signature schemes for trustchain verification and authentication.\n\n- The initiator of an IKEv2 make-before-break reauthentication now suspends\n  online certificate revocation checks (OCSP, CRLs) until the new IKE_SA and all\n  CHILD_SAs are established.  This is required if the checks are done over the\n  CHILD_SA established with the new IKE_SA.  This is not possible until the\n  initiator installs this SA and that only happens after the authentication is\n  completed successfully.  So we suspend the checks during the reauthentication\n  and do them afterwards, if they fail the IKE_SA is closed.  This change has no\n  effect on the behavior during the authentication of the initial IKE_SA.\n\n- For the vici plugin a Vici:Session Perl CPAN module has been added to allow\n  Perl applications to control and/or monitor the IKE daemon using the VICI\n  interface, similar to the existing Python egg or Ruby gem.\n\n- Traffic selectors with port ranges can now be configured in the Linux kernel:\n  e.g. remote_ts = 10.1.0.0/16[tcp/20-23] local_ts = dynamic[tcp/32768-65535].\n  The port range must map to a port mask, though since the kernel does not\n  support arbitrary ranges.\n\n- The vici plugin allows the configuration of IPv4 and IPv6 address ranges\n  in local and remote traffic selectors. Since both the Linux kernel and\n  iptables cannot handle arbitrary ranges, address ranges are mapped to the next\n  larger CIDR subnet by the kernel-netlink and updown plugins, respectively.\n\n- Implemented IKEv1 IPv4/IPv6 address subnet and range identities that can be\n  used as owners of shared secrets.\n\n\nstrongswan-5.3.5\n----------------\n\n- Properly handle potential EINTR errors in sigwaitinfo(2) calls that replaced\n  sigwait(3) calls with 5.3.4.\n\n- RADIUS retransmission timeouts are now configurable, courtesy of Thom Troy.\n\n\nstrongswan-5.3.4\n----------------\n\n- Fixed an authentication bypass vulnerability in the eap-mschapv2 plugin that\n  was caused by insufficient verification of the internal state when handling\n  MSCHAPv2 Success messages received by the client.\n  This vulnerability has been registered as CVE-2015-8023.\n\n- The sha3 plugin implements the SHA3 Keccak-F1600 hash algorithm family.\n  Within the strongSwan framework SHA3 is currently used for BLISS signatures\n  only because the OIDs for other signature algorithms haven't been defined\n  yet. Also the use of SHA3 for IKEv2 has not been standardized yet.\n\n\nstrongswan-5.3.3\n----------------\n\n- Added support for the ChaCha20/Poly1305 AEAD cipher specified in RFC 7539 and\n  RFC 7634 using the chacha20poly1305 ike/esp proposal keyword. The new chapoly\n  plugin implements the cipher, if possible SSE-accelerated on x86/x64\n  architectures. It is usable both in IKEv2 and the strongSwan libipsec ESP\n  backend. On Linux 4.2 or newer the kernel-netlink plugin can configure the\n  cipher for ESP SAs.\n\n- The vici interface now supports the configuration of auxiliary certification\n  authority information as CRL and OCSP URIs.\n\n- In the bliss plugin the c_indices derivation using a SHA-512 based random\n  oracle has been fixed, generalized and standardized by employing the MGF1 mask\n  generation function with SHA-512. As a consequence BLISS signatures using the\n  improved oracle are not compatible with the earlier implementation.\n\n- Support for auto=route with right=%any for transport mode connections has\n  been added (the ikev2/trap-any scenario provides examples).\n\n- The starter daemon does not flush IPsec policies and SAs anymore when it is\n  stopped.  Already existing duplicate policies are now overwritten by the IKE\n  daemon when it installs its policies.\n\n- Init limits (like charon.init_limit_half_open) can now optionally be enforced\n  when initiating SAs via VICI. For this, IKE_SAs initiated by the daemon are\n  now also counted as half-open SAs, which, as a side-effect, fixes the status\n  output while connecting (e.g. in ipsec status).\n\n- Symmetric configuration of EAP methods in left|rightauth is now possible when\n  mutual EAP-only authentication is used (previously, the client had to\n  configure rightauth=eap or rightauth=any, which prevented it from using this\n  same config as responder).\n\n- The initiator flag in the IKEv2 header is compared again (wasn't the case\n  since 5.0.0) and packets that have the flag set incorrectly are again ignored.\n\n- Implemented a demo Hardcopy Device IMC/IMV pair based on the \"Hardcopy\n  Device Health Assessment Trusted Network Connect Binding\" (HCD-TNC)\n  document drafted by the IEEE Printer Working Group (PWG).\n\n- Fixed IF-M segmentation which failed in the presence of multiple small\n  attributes in front of a huge attribute to be segmented.\n\n\nstrongswan-5.3.2\n----------------\n\n- Fixed a vulnerability that allowed rogue servers with a valid certificate\n  accepted by the client to trick it into disclosing its username and even\n  password (if the client accepts EAP-GTC).  This was caused because constraints\n  against the responder's authentication were enforced too late.\n  This vulnerability has been registered as CVE-2015-4171.\n\n\nstrongswan-5.3.1\n----------------\n\n- Fixed a denial-of-service and potential remote code execution vulnerability\n  triggered by IKEv1/IKEv2 messages that contain payloads for the respective\n  other IKE version. Such payload are treated specially since 5.2.2 but because\n  they were still identified by their original payload type they were used as\n  such in some places causing invalid function pointer dereferences.\n  The vulnerability has been registered as CVE-2015-3991.\n\n- The new aesni plugin provides CBC, CTR, XCBC, CMAC, CCM and GCM crypto\n  primitives for AES-128/192/256. The plugin requires AES-NI and PCLMULQDQ\n  instructions and works on both x86 and x64 architectures. It provides\n  superior crypto performance in userland without any external libraries.\n\n\nstrongswan-5.3.0\n----------------\n\n- Added support for IKEv2 make-before-break reauthentication. By using a global\n  CHILD_SA reqid allocation mechanism, charon supports overlapping CHILD_SAs.\n  This allows the use of make-before-break instead of the previously supported\n  break-before-make reauthentication, avoiding connectivity gaps during that\n  procedure. As the new mechanism may fail with peers not supporting it (such\n  as any previous strongSwan release) it must be explicitly enabled using\n  the charon.make_before_break strongswan.conf option.\n\n- Support for \"Signature Authentication in IKEv2\" (RFC 7427) has been added.\n  This allows the use of stronger hash algorithms for public key authentication.\n  By default, signature schemes are chosen based on the strength of the\n  signature key, but specific hash algorithms may be configured in leftauth.\n\n- Key types and hash algorithms specified in rightauth are now also checked\n  against IKEv2 signature schemes.  If such constraints are used for certificate\n  chain validation in existing configurations, in particular with peers that\n  don't support RFC 7427, it may be necessary to disable this feature with the\n  charon.signature_authentication_constraints setting, because the signature\n  scheme used in classic IKEv2 public key authentication may not be strong\n  enough.\n\n- The new connmark plugin allows a host to bind conntrack flows to a specific\n  CHILD_SA by applying and restoring the SA mark to conntrack entries. This\n  allows a peer to handle multiple transport mode connections coming over the\n  same NAT device for client-initiated flows. A common use case is to protect\n  L2TP/IPsec, as supported by some systems.\n\n- The forecast plugin can forward broadcast and multicast messages between\n  connected clients and a LAN. For CHILD_SA using unique marks, it sets up\n  the required Netfilter rules and uses a multicast/broadcast listener that\n  forwards such messages to all connected clients. This plugin is designed for\n  Windows 7 IKEv2 clients, which announces its services over the tunnel if the\n  negotiated IPsec policy allows it.\n\n- For the vici plugin a Python Egg has been added to allow Python applications\n  to control or monitor the IKE daemon using the VICI interface, similar to the\n  existing ruby gem. The Python library has been contributed by Björn Schuberg.\n\n- EAP server methods now can fulfill public key constraints, such as rightcert\n  or rightca. Additionally, public key and signature constraints can be\n  specified for EAP methods in the rightauth keyword. Currently the EAP-TLS and\n  EAP-TTLS methods provide verification details to constraints checking.\n\n- Upgrade of the BLISS post-quantum signature algorithm to the improved BLISS-B\n  variant. Can be used in conjunction with the SHA256, SHA384 and SHA512 hash\n  algorithms with SHA512 being the default.\n\n- The IF-IMV 1.4 interface now makes the IP address of the TNC access requestor\n  as seen by the TNC server available to all IMVs. This information can be\n  forwarded to policy enforcement points (e.g. firewalls or routers).\n\n- The new mutual tnccs-20 plugin parameter activates mutual TNC measurements\n  in PB-TNC half-duplex mode between two endpoints over either a PT-EAP or\n  PT-TLS transport medium.\n\n\nstrongswan-5.2.2\n----------------\n\n- Fixed a denial-of-service vulnerability triggered by an IKEv2 Key Exchange\n  payload that contains the Diffie-Hellman group 1025.  This identifier was\n  used internally for DH groups with custom generator and prime.  Because\n  these arguments are missing when creating DH objects based on the KE payload\n  an invalid pointer dereference occurred.  This allowed an attacker to crash\n  the IKE daemon with a single IKE_SA_INIT message containing such a KE\n  payload.  The vulnerability has been registered as CVE-2014-9221.\n\n- The left/rightid options in ipsec.conf, or any other identity in strongSwan,\n  now accept prefixes to enforce an explicit type, such as email: or fqdn:.\n  Note that no conversion is done for the remaining string, refer to\n  ipsec.conf(5) for details.\n\n- The post-quantum Bimodal Lattice Signature Scheme (BLISS) can be used as\n  an IKEv2 public key authentication method. The pki tool offers full support\n  for the generation of BLISS key pairs and certificates.\n\n- Fixed mapping of integrity algorithms negotiated for AH via IKEv1. This could\n  cause interoperability issues when connecting to older versions of charon.\n\n\nstrongswan-5.2.1\n----------------\n\n- The new charon-systemd IKE daemon implements an IKE daemon tailored for use\n  with systemd. It avoids the dependency on ipsec starter and uses swanctl\n  as configuration backend, building a simple and lightweight solution. It\n  supports native systemd journal logging.\n\n- Support for IKEv2 fragmentation as per RFC 7383 has been added.  Like IKEv1\n  fragmentation it can be enabled by setting fragmentation=yes in ipsec.conf.\n\n- Support of the TCG TNC IF-M Attribute Segmentation specification proposal.\n  All attributes can be segmented. Additionally TCG/SWID Tag, TCG/SWID Tag ID\n  and IETF/Installed Packages attributes can be processed incrementally on a\n  per segment basis.\n\n- The new ext-auth plugin calls an external script to implement custom IKE_SA\n  authorization logic, courtesy of Vyronas Tsingaras.\n\n- For the vici plugin a ruby gem has been added to allow ruby applications\n  to control or monitor the IKE daemon. The vici documentation has been updated\n  to include a description of the available operations and some simple examples\n  using both the libvici C interface and the ruby gem.\n\n\nstrongswan-5.2.0\n----------------\n\n- strongSwan has been ported to the Windows platform. Using a MinGW toolchain,\n  many parts of the strongSwan codebase run natively on Windows 7 / 2008 R2\n  and newer releases. charon-svc implements a Windows IKE service based on\n  libcharon, the kernel-iph and kernel-wfp plugins act as networking and IPsec\n  backend on the Windows platform. socket-win provides a native IKE socket\n  implementation, while winhttp fetches CRL and OCSP information using the\n  WinHTTP API.\n\n- The new vici plugin provides a Versatile IKE Configuration Interface for\n  charon. Using the stable IPC interface, external applications can configure,\n  control and monitor the IKE daemon. Instead of scripting the ipsec tool\n  and generating ipsec.conf, third party applications can use the new interface\n  for more control and better reliability.\n\n- Built upon the libvici client library, swanctl implements the first user of\n  the VICI interface. Together with a swanctl.conf configuration file,\n  connections can be defined, loaded and managed. swanctl provides a portable,\n  complete IKE configuration and control interface for the command line.\n  The first six swanctl example scenarios have been added.\n\n- The SWID IMV implements a JSON-based REST API which allows the exchange\n  of SWID tags and Software IDs with the strongTNC policy manager.\n\n- The SWID IMC can extract all installed packages from the dpkg (Debian,\n  Ubuntu, Linux Mint etc.), rpm (Fedora, RedHat, OpenSUSE, etc.), or\n  pacman (Arch Linux, Manjaro, etc.) package managers, respectively, using the\n  swidGenerator (https://github.com/strongswan/swidGenerator) which generates\n  SWID tags according to the new ISO/IEC 19770-2:2014 standard.\n\n- All IMVs now share the access requestor ID, device ID and product info\n  of an access requestor via a common imv_session object.\n\n- The Attestation IMC/IMV pair supports the IMA-NG measurement format\n  introduced with the Linux 3.13 kernel.\n\n- The aikgen tool generates an Attestation Identity Key bound to a TPM.\n\n- Implemented the PT-EAP transport protocol (RFC 7171) for Trusted Network\n  Connect.\n\n- The ipsec.conf replay_window option defines connection specific IPsec replay\n  windows. Original patch courtesy of Zheng Zhong and Christophe Gouault from\n  6Wind.\n\n\nstrongswan-5.1.3\n----------------\n\n- Fixed an authentication bypass vulnerability triggered by rekeying an\n  unestablished IKEv2 SA while it gets actively initiated.  This allowed an\n  attacker to trick a peer's IKE_SA state to established, without the need to\n  provide any valid authentication credentials.  The vulnerability has been\n  registered as CVE-2014-2338.\n\n- The acert plugin evaluates X.509 Attribute Certificates. Group membership\n  information encoded as strings can be used to fulfill authorization checks\n  defined with the rightgroups option. Attribute Certificates can be loaded\n  locally or get exchanged in IKEv2 certificate payloads.\n\n- The pki command gained support to generate X.509 Attribute Certificates\n  using the --acert subcommand, while the --print command supports the ac type.\n  The openac utility has been removed in favor of the new pki functionality.\n\n- The libtls TLS 1.2 implementation as used by EAP-(T)TLS and other protocols\n  has been extended by AEAD mode support, currently limited to AES-GCM.\n\n\nstrongswan-5.1.2\n----------------\n\n- A new default configuration file layout is introduced.  The new default\n  strongswan.conf file mainly includes config snippets from the strongswan.d\n  and strongswan.d/charon directories (the latter containing snippets for all\n  plugins).  The snippets, with commented defaults, are automatically\n  generated and installed, if they don't exist yet.  They are also installed\n  in $prefix/share/strongswan/templates so existing files can be compared to\n  the current defaults.\n\n- As an alternative to the non-extensible charon.load setting, the plugins\n  to load in charon (and optionally other applications) can now be determined\n  via the charon.plugins.<name>.load setting for each plugin (enabled in the\n  new default strongswan.conf file via the charon.load_modular option).\n  The load setting optionally takes a numeric priority value that allows\n  reordering the plugins (otherwise the default plugin order is preserved).\n\n- All strongswan.conf settings that were formerly defined in library specific\n  \"global\" sections are now application specific (e.g. settings for plugins in\n  libstrongswan.plugins can now be set only for charon in charon.plugins).\n  The old options are still supported, which now allows to define defaults for\n  all applications in the libstrongswan section.\n\n- The ntru libstrongswan plugin supports NTRUEncrypt as a post-quantum\n  computer IKE key exchange mechanism. The implementation is based on the\n  ntru-crypto library from the NTRUOpenSourceProject. The supported security\n  strengths are ntru112, ntru128, ntru192, and ntru256. Since the private DH\n  group IDs 1030..1033 have been assigned, the strongSwan Vendor ID must be\n  sent (charon.send_vendor_id = yes) in order to use NTRU.\n\n- Defined a TPMRA remote attestation workitem and added support for it to the\n  Attestation IMV.\n\n- Compatibility issues between IPComp (compress=yes) and leftfirewall=yes as\n  well as multiple subnets in left|rightsubnet have been fixed.\n\n- When enabling its \"session\" strongswan.conf option, the xauth-pam plugin opens\n  and closes a PAM session for each established IKE_SA. Patch courtesy of\n  Andrea Bonomi.\n\n- The strongSwan unit testing framework has been rewritten without the \"check\"\n  dependency for improved flexibility and portability. It now properly supports\n  multi-threaded and memory leak testing and brings a bunch of new test cases.\n\n\nstrongswan-5.1.1\n----------------\n\n- Fixed a denial-of-service vulnerability and potential authorization bypass\n  triggered by a crafted ID_DER_ASN1_DN ID payload. The cause is an insufficient\n  length check when comparing such identities. The vulnerability has been\n  registered as CVE-2013-6075.\n\n- Fixed a denial-of-service vulnerability triggered by a crafted IKEv1\n  fragmentation payload. The cause is a NULL pointer dereference. The\n  vulnerability has been registered as CVE-2013-6076.\n\n- The lean stand-alone pt-tls-client can set up a RFC 6876 PT-TLS session\n  with a strongSwan policy enforcement point which uses the tnc-pdp charon\n  plugin.\n\n- The new TCG TNC SWID IMC/IMV pair supports targeted SWID requests for either\n  full SWID Tag or concise SWID Tag ID inventories.\n\n- The XAuth backend in eap-radius now supports multiple XAuth exchanges for\n  different credential types and display messages. All user input gets\n  concatenated and verified with a single User-Password RADIUS attribute on\n  the AAA. With an AAA supporting it, one for example can implement\n  Password+Token authentication with proper dialogs on iOS and OS X clients.\n\n- charon supports IKEv1 Mode Config exchange in push mode. The ipsec.conf\n  modeconfig=push option enables it for both client and server, the same way\n  as pluto used it.\n\n- Using the \"ah\" ipsec.conf keyword on both IKEv1 and IKEv2 connections,\n  charon can negotiate and install Security Associations integrity-protected by\n  the Authentication Header protocol. Supported are plain AH(+IPComp) SAs only,\n  but not the deprecated RFC2401 style ESP+AH bundles.\n\n- The generation of initialization vectors for IKE and ESP (when using libipsec)\n  is now modularized and IVs for e.g. AES-GCM are now correctly allocated\n  sequentially, while other algorithms like AES-CBC still use random IVs.\n\n- The left and right options in ipsec.conf can take multiple address ranges\n  and subnets. This allows connection matching against a larger set of\n  addresses, for example to use a different connection for clients connecting\n  from a internal network.\n\n- For all those who have a queasy feeling about the NIST elliptic curve set,\n  the Brainpool curves introduced for use with IKE by RFC 6932 might be a\n  more trustworthy alternative.\n\n- The kernel-libipsec userland IPsec backend now supports usage statistics,\n  volume based rekeying and accepts ESPv3 style TFC padded packets.\n\n- With two new strongswan.conf options fwmarks can be used to implement\n  host-to-host tunnels with kernel-libipsec.\n\n- load-tester supports transport mode connections and more complex traffic\n  selectors, including such using unique ports for each tunnel.\n\n- The new dnscert plugin provides support for authentication via CERT RRs that\n  are protected via DNSSEC.  The plugin was created by Ruslan N. Marchenko.\n\n- The eap-radius plugin supports forwarding of several Cisco Unity specific\n  RADIUS attributes in corresponding configuration payloads.\n\n- Database transactions are now abstracted and implemented by the two backends.\n  If you use MySQL make sure all tables use the InnoDB engine.\n\n- libstrongswan now can provide an experimental custom implementation of the\n  printf family functions based on klibc if neither Vstr nor glibc style printf\n  hooks are available. This can avoid the Vstr dependency on some systems at\n  the cost of slower and less complete printf functions.\n\n\nstrongswan-5.1.0\n----------------\n\n- Fixed a denial-of-service vulnerability triggered by specific XAuth usernames\n  and EAP identities (since 5.0.3), and PEM files (since 4.1.11).  The crash\n  was caused by insufficient error handling in the is_asn1() function.\n  The vulnerability has been registered as CVE-2013-5018.\n\n- The new charon-cmd command line IKE client can establish road warrior\n  connections using IKEv1 or IKEv2 with different authentication profiles.\n  It does not depend on any configuration files and can be configured using a\n  few simple command line options.\n\n- The kernel-pfroute networking backend has been greatly improved. It now\n  can install virtual IPs on TUN devices on OS X and FreeBSD, allowing these\n  systems to act as a client in common road warrior scenarios.\n\n- The new kernel-libipsec plugin uses TUN devices and libipsec to provide IPsec\n  processing in userland on Linux, FreeBSD and Mac OS X.\n\n- The eap-radius plugin can now serve as an XAuth backend called xauth-radius,\n  directly verifying XAuth credentials using RADIUS User-Name/User-Password\n  attributes. This is more efficient than the existing xauth-eap+eap-radius\n  combination, and allows RADIUS servers without EAP support to act as AAA\n  backend for IKEv1.\n\n- The new osx-attr plugin installs configuration attributes (currently DNS\n  servers) via SystemConfiguration on Mac OS X. The keychain plugin provides\n  certificates from the OS X keychain service.\n\n- The sshkey plugin parses SSH public keys, which, together with the --agent\n  option for charon-cmd, allows the use of ssh-agent for authentication.\n  To configure SSH keys in ipsec.conf the left|rightrsasigkey options are\n  replaced with left|rightsigkey, which now take public keys in one of three\n  formats: SSH (RFC 4253, ssh: prefix), DNSKEY (RFC 3110, dns: prefix), and\n  PKCS#1 (the default, no prefix).\n\n- Extraction of certificates and private keys from PKCS#12 files is now provided\n  by the new pkcs12 plugin or the openssl plugin.  charon-cmd (--p12) as well\n  as charon (via P12 token in ipsec.secrets) can make use of this.\n\n- IKEv2 can now negotiate transport mode and IPComp in NAT situations.\n\n- IKEv2 exchange initiators now properly close an established IKE or CHILD_SA\n  on error conditions using an additional exchange, keeping state in sync\n  between peers.\n\n- Using a SQL database interface a Trusted Network Connect (TNC) Policy Manager\n  can  generate specific measurement workitems for an arbitrary number of\n  Integrity Measurement Verifiers (IMVs) based on the history of the VPN user\n  and/or device.\n\n- Several core classes in libstrongswan are now tested with unit tests.  These\n  can be enabled with --enable-unit-tests and run with 'make check'.  Coverage\n  reports can be generated with --enable-coverage and 'make coverage' (this\n  disables any optimization, so it should not be enabled when building\n  production releases).\n\n- The leak-detective developer tool has been greatly improved. It works much\n  faster/stabler with multiple threads, does not use deprecated malloc hooks\n  anymore and has been ported to OS X.\n\n- chunk_hash() is now based on SipHash-2-4 with a random key.  This provides\n  better distribution and prevents hash flooding attacks when used with\n  hashtables.\n\n- All default plugins implement the get_features() method to define features\n  and their dependencies.  The plugin loader has been improved, so that plugins\n  in a custom load statement can be ordered freely or to express preferences\n  without being affected by dependencies between plugin features.\n\n- A centralized thread can take care for watching multiple file descriptors\n  concurrently. This removes the need for a dedicated listener threads in\n  various plugins. The number of \"reserved\" threads for such tasks has been\n  reduced to about five, depending on the plugin configuration.\n\n- Plugins that can be controlled by a UNIX socket IPC mechanism gained network\n  transparency. Third party applications querying these plugins now can use\n  TCP connections from a different host.\n\n- libipsec now supports AES-GCM.\n\n\nstrongswan-5.0.4\n----------------\n\n- Fixed a security vulnerability in the openssl plugin which was reported by\n  Kevin Wojtysiak. The vulnerability has been registered as CVE-2013-2944.\n  Before the fix, if the openssl plugin's ECDSA signature verification was used,\n  due to a misinterpretation of the error code returned by the OpenSSL\n  ECDSA_verify() function, an empty or zeroed signature was accepted as a\n  legitimate one.\n\n- The handling of a couple of other non-security relevant openssl return codes\n  was fixed as well.\n\n- The tnc_ifmap plugin now publishes virtual IPv4 and IPv6 addresses via its\n  TCG TNC IF-MAP 2.1 interface.\n\n- The charon.initiator_only option causes charon to ignore IKE initiation\n  requests.\n\n- The openssl plugin can now use the openssl-fips library.\n\n\nstrongswan-5.0.3\n----------------\n\n- The new ipseckey plugin enables authentication based on trustworthy public\n  keys stored as IPSECKEY resource records in the DNS and protected by DNSSEC.\n  To do so it uses a DNSSEC enabled resolver, like the one provided by the new\n  unbound plugin, which is based on libldns and libunbound.  Both plugins were\n  created by Reto Guadagnini.\n\n- Implemented the TCG TNC IF-IMV 1.4 draft making access requestor identities\n  available to an IMV. The OS IMV stores the AR identity together with the\n  device ID in the attest database.\n\n- The openssl plugin now uses the AES-NI accelerated version of AES-GCM\n  if the hardware supports it.\n\n- The eap-radius plugin can now assign virtual IPs to IKE clients using the\n  Framed-IP-Address attribute by using the \"%radius\" named pool in the\n  rightsourceip ipsec.conf option. Cisco Banner attributes are forwarded to\n  Unity-capable IKEv1 clients during mode config. charon now sends Interim\n  Accounting updates if requested by the RADIUS server, reports\n  sent/received packets in Accounting messages, and adds a Terminate-Cause\n  to Accounting-Stops.\n\n- The recently introduced \"ipsec listcounters\" command can report connection\n  specific counters by passing a connection name, and global or connection\n  counters can be reset by the \"ipsec resetcounters\" command.\n\n- The strongSwan libpttls library provides an experimental implementation of\n  PT-TLS (RFC 6876), a Posture Transport Protocol over TLS.\n\n- The charon systime-fix plugin can disable certificate lifetime checks on\n  embedded systems if the system time is obviously out of sync after boot-up.\n  Certificates lifetimes get checked once the system time gets sane, closing\n  or reauthenticating connections using expired certificates.\n\n- The \"ikedscp\" ipsec.conf option can set DiffServ code points on outgoing\n  IKE packets.\n\n- The new xauth-noauth plugin allows to use basic RSA or PSK authentication with\n  clients that cannot be configured without XAuth authentication.  The plugin\n  simply concludes the XAuth exchange successfully without actually performing\n  any authentication.  Therefore, to use this backend it has to be selected\n  explicitly with rightauth2=xauth-noauth.\n\n- The new charon-tkm IKEv2 daemon delegates security critical operations to a\n  separate process. This has the benefit that the network facing daemon has no\n  knowledge of keying material used to protect child SAs. Thus subverting\n  charon-tkm does not result in the compromise of cryptographic keys.\n  The extracted functionality has been implemented from scratch in a minimal TCB\n  (trusted computing base) in the Ada programming language. Further information\n  can be found at https://www.codelabs.ch/tkm/.\n\nstrongswan-5.0.2\n----------------\n\n- Implemented all IETF Standard PA-TNC attributes and an OS IMC/IMV\n  pair using them to transfer operating system information.\n\n- The new \"ipsec listcounters\" command prints a list of global counter values\n  about received and sent IKE messages and rekeyings.\n\n- A new lookip plugin can perform fast lookup of tunnel information using a\n  clients virtual IP and can send notifications about established or deleted\n  tunnels. The \"ipsec lookip\" command can be used to query such information\n  or receive notifications.\n\n- The new error-notify plugin catches some common error conditions and allows\n  an external application to receive notifications for them over a UNIX socket.\n\n- IKE proposals can now use a PRF algorithm different to that defined for\n  integrity protection. If an algorithm with a \"prf\" prefix is defined\n  explicitly (such as prfsha1 or prfsha256), no implicit PRF algorithm based on\n  the integrity algorithm is added to the proposal.\n\n- The pkcs11 plugin can now load leftcert certificates from a smartcard for a\n  specific ipsec.conf conn section and cacert CA certificates for a specific ca\n  section.\n\n- The load-tester plugin gained additional options for certificate generation\n  and can load keys and multiple CA certificates from external files. It can\n  install a dedicated outer IP address for each tunnel and tunnel initiation\n  batches can be triggered and monitored externally using the\n  \"ipsec load-tester\" tool.\n\n- PKCS#7 container parsing has been modularized, and the openssl plugin\n  gained an alternative implementation to decrypt and verify such files.\n  In contrast to our own DER parser, OpenSSL can handle BER files, which is\n  required for interoperability of our scepclient with EJBCA.\n\n- Support for the proprietary IKEv1 fragmentation extension has been added.\n  Fragments are always handled on receipt but only sent if supported by the peer\n  and if enabled with the new fragmentation ipsec.conf option.\n\n- IKEv1 in charon can now parse certificates received in PKCS#7 containers and\n  supports NAT traversal as used by Windows clients. Patches courtesy of\n  Volker Rümelin.\n\n- The new rdrand plugin provides a high quality / high performance random\n  source using the Intel rdrand instruction found on Ivy Bridge processors.\n\n- The integration test environment was updated and now uses KVM and reproducible\n  guest images based on Debian.\n\n\nstrongswan-5.0.1\n----------------\n\n- Introduced the sending of the standard IETF Assessment Result\n  PA-TNC attribute by all strongSwan Integrity Measurement Verifiers.\n\n- Extended PTS Attestation IMC/IMV pair to provide full evidence of\n  the Linux IMA measurement process. All pertinent file information\n  of a Linux OS can be collected and stored in an SQL database.\n\n- The PA-TNC and PB-TNC protocols can now process huge data payloads\n  >64 kB by distributing PA-TNC attributes over multiple PA-TNC messages\n  and these messages over several PB-TNC batches. As long as no\n  consolidated recommendation from all IMVs can be obtained, the TNC\n  server requests more client data by sending an empty SDATA batch.\n\n- The rightgroups2 ipsec.conf option can require group membership during\n  a second authentication round, for example during XAuth authentication\n  against a RADIUS server.\n\n- The xauth-pam backend can authenticate IKEv1 XAuth and Hybrid authenticated\n  clients against any PAM service. The IKEv2 eap-gtc plugin does not use\n  PAM directly anymore, but can use any XAuth backend to verify credentials,\n  including xauth-pam.\n\n- The new unity plugin brings support for some parts of the IKEv1 Cisco Unity\n  Extension. As client, charon narrows traffic selectors to the received\n  Split-Include attributes and automatically installs IPsec bypass policies\n  for received Local-LAN attributes. As server, charon sends Split-Include\n  attributes for leftsubnet definitions containing multiple subnets to Unity-\n  aware clients.\n\n- An EAP-Nak payload is returned by clients if the gateway requests an EAP\n  method that the client does not support.  Clients can also request a specific\n  EAP method by configuring that method with leftauth.\n\n- The eap-dynamic plugin handles EAP-Nak payloads returned by clients and uses\n  these to select a different EAP method supported/requested by the client.\n  The plugin initially requests the first registered method or the first method\n  configured with charon.plugins.eap-dynamic.preferred.\n\n- The new left/rightdns options specify connection specific DNS servers to\n  request/respond in IKEv2 configuration payloads or IKEv2 mode config. leftdns\n  can be any (comma separated) combination of %config4 and %config6 to request\n  multiple servers, both for IPv4 and IPv6. rightdns takes a list of DNS server\n  IP addresses to return.\n\n- The left/rightsourceip options now accept multiple addresses or pools.\n  leftsourceip can be any (comma separated) combination of %config4, %config6\n  or fixed IP addresses to request. rightsourceip accepts multiple explicitly\n  specified or referenced named pools.\n\n- Multiple connections can now share a single address pool when they use the\n  same definition in one of the rightsourceip pools.\n\n- The options charon.interfaces_ignore and charon.interfaces_use allow one to\n  configure the network interfaces used by the daemon.\n\n- The kernel-netlink plugin supports the charon.install_virtual_ip_on option,\n  which specifies the interface on which virtual IP addresses will be installed.\n  If it is not specified the current behavior of using the outbound interface\n  is preserved.\n\n- The kernel-netlink plugin tries to keep the current source address when\n  looking for valid routes to reach other hosts.\n\n- The autotools build has been migrated to use a config.h header. strongSwan\n  development headers will get installed during \"make install\" if\n  --with-dev-headers has been passed to ./configure.\n\n- All crypto primitives gained return values for most operations, allowing\n  crypto backends to fail, for example when using hardware accelerators.\n\n\nstrongswan-5.0.0\n----------------\n\n- The charon IKE daemon gained experimental support for the IKEv1 protocol.\n  Pluto has been removed from the 5.x series, and unless strongSwan is\n  configured with --disable-ikev1 or --disable-ikev2, charon handles both\n  keying protocols. The feature-set of IKEv1 in charon is almost on par with\n  pluto, but currently does not support AH or bundled AH+ESP SAs. Beside\n  RSA/ECDSA, PSK and XAuth, charon also supports the Hybrid authentication\n  mode.\n\n- Charon's bus_t has been refactored so that loggers and other listeners are\n  now handled separately.  The single lock was previously cause for deadlocks\n  if extensive listeners, such as the one provided by the updown plugin, wanted\n  to acquire locks that were held by other threads which in turn tried to log\n  messages, and thus were waiting to acquire the same lock currently held by\n  the thread calling the listener.\n  The implemented changes also allow the use of a read/write-lock for the\n  loggers which increases performance if multiple loggers are registered.\n  Besides several interface changes this last bit also changes the semantics\n  for loggers as these may now be called by multiple threads at the same time.\n\n- Source routes are reinstalled if interfaces are reactivated or IP addresses\n  reappear.\n\n- The thread pool (processor_t) now has more control over the lifecycle of\n  a job (see job.h for details).  In particular, it now controls the destruction\n  of jobs after execution and the cancellation of jobs during shutdown.  Due to\n  these changes the requeueing feature, previously available to callback_job_t\n  only, is now available to all jobs (in addition to a new rescheduling\n  feature).\n\n- In addition to trustchain key strength definitions for different public key\n  systems, the rightauth option now takes a list of signature hash algorithms\n  considered save for trustchain validation. For example, the setting\n  rightauth=rsa-2048-ecdsa-256-sha256-sha384-sha512 requires a trustchain\n  that uses at least RSA-2048 or ECDSA-256 keys and certificate signatures\n  using SHA-256 or better.\n\n\nstrongswan-4.6.4\n----------------\n\n- Fixed a security vulnerability in the gmp plugin.  If this plugin was used\n  for RSA signature verification an empty or zeroed signature was handled as\n  a legitimate one.\n\n- Fixed several issues with reauthentication and address updates.\n\n\nstrongswan-4.6.3\n----------------\n\n- The tnc-pdp plugin implements a RADIUS server interface allowing\n  a strongSwan TNC server to act as a Policy Decision Point.\n\n- The eap-radius authentication backend enforces Session-Timeout attributes\n  using RFC4478 repeated authentication and acts upon RADIUS Dynamic\n  Authorization extensions, RFC 5176. Currently supported are disconnect\n  requests and CoA messages containing a Session-Timeout.\n\n- The eap-radius plugin can forward arbitrary RADIUS attributes from and to\n  clients using custom IKEv2 notify payloads. The new radattr plugin reads\n  attributes to include from files and prints received attributes to the\n  console.\n\n- Added support for untruncated MD5 and SHA1 HMACs in ESP as used in\n  RFC 4595.\n\n- The cmac plugin implements the AES-CMAC-96 and AES-CMAC-PRF-128 algorithms\n  as defined in RFC 4494 and RFC 4615, respectively.\n\n- The resolve plugin automatically installs nameservers via resolvconf(8),\n  if it is installed, instead of modifying /etc/resolv.conf directly.\n\n- The IKEv2 charon daemon supports now raw RSA public keys in RFC 3110\n  DNSKEY and PKCS#1 file format.\n\n\nstrongswan-4.6.2\n----------------\n\n- Upgraded the TCG IF-IMC and IF-IMV C API to the upcoming version 1.3\n  which supports IF-TNCCS 2.0 long message types, the exclusive flags\n  and multiple IMC/IMV IDs. Both the TNC Client and Server as well as\n  the \"Test\", \"Scanner\", and \"Attestation\" IMC/IMV pairs were updated.\n\n- Fully implemented the \"TCG Attestation PTS Protocol: Binding to IF-M\"\n  standard (TLV-based messages only). TPM-based remote attestation of\n  Linux IMA (Integrity Measurement Architecture) possible. Measurement\n  reference values are automatically stored in an SQLite database.\n\n- The EAP-RADIUS authentication backend supports RADIUS accounting. It sends\n  start/stop messages containing Username, Framed-IP and Input/Output-Octets\n  attributes and has been tested against FreeRADIUS and Microsoft NPS.\n\n- Added support for PKCS#8 encoded private keys via the libstrongswan\n  pkcs8 plugin.  This is the default format used by some OpenSSL tools since\n  version 1.0.0 (e.g. openssl req with -keyout).\n\n- Added session resumption support to the strongSwan TLS stack.\n\n\nstrongswan-4.6.1\n----------------\n\n- Because of changing checksums before and after installation which caused\n  the integrity tests to fail we avoided directly linking libsimaka, libtls and\n  libtnccs to those libcharon plugins which make use of these dynamic libraries.\n  Instead we linked the libraries to the charon daemon. Unfortunately Ubuntu\n  11.10 activated the --as-needed ld option which discards explicit links\n  to dynamic libraries that are not actually used by the charon daemon itself,\n  thus causing failures during the loading of the plugins which depend on these\n  libraries for resolving external symbols.\n\n- Therefore our approach of computing  integrity checksums for plugins had to be\n  changed radically by moving the hash generation from the compilation to the\n  post-installation phase.\n\n\nstrongswan-4.6.0\n----------------\n\n- The new libstrongswan certexpire plugin collects expiration information of\n  all used certificates and exports them to CSV files. It either directly\n  exports them or uses cron style scheduling for batch exports.\n\n- starter passes unresolved hostnames to charon, allowing it to do name\n  resolution not before the connection attempt. This is especially useful with\n  connections between hosts using dynamic IP addresses. Thanks to Mirko Parthey\n  for the initial patch.\n\n- The android plugin can now be used without the Android frontend patch and\n  provides DNS server registration and logging to logcat.\n\n- Pluto and starter (plus stroke and whack) have been ported to Android.\n\n- Support for ECDSA private and public key operations has been added to the\n  pkcs11 plugin.  The plugin now also provides DH and ECDH via PKCS#11 and can\n  use tokens as random number generators (RNG).  By default only private key\n  operations are enabled, more advanced features have to be enabled by their\n  option in strongswan.conf.  This also applies to public key operations (even\n  for keys not stored on the token) which were enabled by default before.\n\n- The libstrongswan plugin system now supports detailed plugin dependencies.\n  Many plugins have been extended to export its capabilities and requirements.\n  This allows the plugin loader to resolve plugin loading order automatically,\n  and in future releases, to dynamically load the required features on demand.\n  Existing third party plugins are source (but not binary) compatible if they\n  properly initialize the new get_features() plugin function to NULL.\n\n- The tnc-ifmap plugin implements a TNC IF-MAP 2.0 client which can deliver\n  metadata about IKE_SAs via a SOAP interface to a MAP server. The tnc-ifmap\n  plugin requires the Apache Axis2/C library.\n\n\nstrongswan-4.5.3\n----------------\n\n- Our private libraries (e.g. libstrongswan) are not installed directly in\n  prefix/lib anymore.  Instead a subdirectory is used (prefix/lib/ipsec/ by\n  default).  The plugins directory is also moved from libexec/ipsec/ to that\n  directory.\n\n- The dynamic IMC/IMV libraries were moved from the plugins directory to\n  a new imcvs directory in the prefix/lib/ipsec/ subdirectory.\n\n- Job priorities were introduced to prevent thread starvation caused by too\n  many threads handling blocking operations (such as CRL fetching).  Refer to\n  strongswan.conf(5) for details.\n\n- Two new strongswan.conf options allow to fine-tune performance on IKEv2\n  gateways by dropping IKE_SA_INIT requests on high load.\n\n- IKEv2 charon daemon supports start PASS and DROP shunt policies\n  preventing traffic to go through IPsec connections. Installation of the\n  shunt policies either via the XFRM netfilter or PFKEYv2 IPsec kernel\n  interfaces.\n\n- The history of policies installed in the kernel is now tracked so that e.g.\n  trap policies are correctly updated when reauthenticated SAs are terminated.\n\n- IMC/IMV Scanner pair implementing the RFC 5792 PA-TNC (IF-M) protocol.\n  Using \"netstat -l\" the IMC scans open listening ports on the TNC client\n  and sends a port list to the IMV which based on a port policy decides if\n  the client is admitted to the network.\n  (--enable-imc-scanner/--enable-imv-scanner).\n\n- IMC/IMV Test pair implementing the RFC 5792 PA-TNC (IF-M) protocol.\n  (--enable-imc-test/--enable-imv-test).\n\n- The IKEv2 close action does not use the same value as the ipsec.conf dpdaction\n  setting, but the value defined by its own closeaction keyword. The action\n  is triggered if the remote peer closes a CHILD_SA unexpectedly.\n\n\nstrongswan-4.5.2\n----------------\n\n- The whitelist plugin for the IKEv2 daemon maintains an in-memory identity\n  whitelist. Any connection attempt of peers not whitelisted will get rejected.\n  The 'ipsec whitelist' utility provides a simple command line frontend for\n  whitelist administration.\n\n- The duplicheck plugin provides a specialized form of duplicate checking,\n  doing a liveness check on the old SA and optionally notify a third party\n  application about detected duplicates.\n\n- The coupling plugin permanently couples two or more devices by limiting\n  authentication to previously used certificates.\n\n- In the case that the peer config and child config don't have the same name\n  (usually in SQL database defined connections), ipsec up|route <peer config>\n  starts|routes all associated child configs and ipsec up|route <child config>\n  only starts|routes the specific child config.\n\n- fixed the encoding and parsing of X.509 certificate policy statements (CPS).\n\n- Duncan Salerno contributed the eap-sim-pcsc plugin implementing a\n  pcsc-lite based SIM card backend.\n\n- The eap-peap plugin implements the EAP PEAP protocol. Interoperates\n  successfully with a FreeRADIUS server and Windows 7 Agile VPN clients.\n\n- The IKEv2 daemon charon rereads strongswan.conf on SIGHUP and instructs\n  all plugins to reload. Currently only the eap-radius and the attr plugins\n  support configuration reloading.\n\n- Added userland support to the IKEv2 daemon for Extended Sequence Numbers\n  support coming with Linux 2.6.39. To enable ESN on a connection, add\n  the 'esn' keyword to the proposal. The default proposal uses 32-bit sequence\n  numbers only ('noesn'), and the same value is used if no ESN mode is\n  specified. To negotiate ESN support with the peer, include both, e.g.\n  esp=aes128-sha1-esn-noesn.\n\n- In addition to ESN, Linux 2.6.39 gained support for replay windows larger\n  than 32 packets. The new global strongswan.conf option 'charon.replay_window'\n  configures the size of the replay window, in packets.\n\n\nstrongswan-4.5.1\n----------------\n\n- Sansar Choinyambuu implemented the RFC 5793 Posture Broker Protocol (BP)\n  compatible with Trusted Network Connect (TNC). The TNCCS 2.0 protocol\n  requires the tnccs_20, tnc_imc and tnc_imv plugins but does not depend\n  on the libtnc library. Any available IMV/IMC pairs conforming to the\n  Trusted Computing Group's TNC-IF-IMV/IMC 1.2 interface specification\n  can be loaded via /etc/tnc_config.\n\n- Re-implemented the TNCCS 1.1 protocol by using the tnc_imc and tnc_imv\n  in place of the external libtnc library.\n\n- The tnccs_dynamic plugin loaded on a TNC server in addition to the\n  tnccs_11 and tnccs_20 plugins, dynamically detects the IF-TNCCS\n  protocol version used by a TNC client and invokes an instance of\n  the corresponding protocol stack.\n\n- IKE and ESP proposals can now be stored in an SQL database using a\n  new proposals table. The start_action field in the child_configs\n  tables allows the automatic starting or routing of connections stored\n  in an SQL database.\n\n- The new certificate_authorities and certificate_distribution_points\n  tables make it possible to store CRL and OCSP Certificate Distribution\n  points in an SQL database.\n\n- The new 'include' statement allows to recursively include other files in\n  strongswan.conf.  Existing sections and values are thereby extended and\n  replaced, respectively.\n\n- Due to the changes in the parser for strongswan.conf, the configuration\n  syntax for the attr plugin has changed.  Previously, it was possible to\n  specify multiple values of a specific attribute type by adding multiple\n  key/value pairs with the same key (e.g. dns) to the plugins.attr section.\n  Because values with the same key now replace previously defined values\n  this is not possible anymore.  As an alternative, multiple values can be\n  specified by separating them with a comma (e.g. dns = 1.2.3.4, 2.3.4.5).\n\n- ipsec listalgs now appends (set in square brackets) to each crypto\n  algorithm listed the plugin that registered the function.\n\n- Traffic Flow Confidentiality padding supported with Linux 2.6.38 can be used\n  by the IKEv2 daemon. The ipsec.conf 'tfc' keyword pads all packets to a given\n  boundary, the special value '%mtu' pads all packets to the path MTU.\n\n- The new af-alg plugin can use various crypto primitives of the Linux Crypto\n  API using the AF_ALG interface introduced with 2.6.38. This removes the need\n  for additional userland implementations of symmetric cipher, hash, hmac and\n  xcbc algorithms.\n\n- The IKEv2 daemon supports the INITIAL_CONTACT notify as initiator and\n  responder. The notify is sent when initiating configurations with a unique\n  policy, set in ipsec.conf via the global 'uniqueids' option.\n\n- The conftest conformance testing framework enables the IKEv2 stack to perform\n  many tests using a distinct tool and configuration frontend. Various hooks\n  can alter reserved bits, flags, add custom notifies and proposals, reorder\n  or drop messages and much more. It is enabled using the --enable-conftest\n  ./configure switch.\n\n- The new libstrongswan constraints plugin provides advanced X.509 constraint\n  checking. In addition to X.509 pathLen constraints, the plugin checks for\n  nameConstraints and certificatePolicies, including policyMappings and\n  policyConstraints. The x509 certificate plugin and the pki tool have been\n  enhanced to support these extensions. The new left/rightcertpolicy ipsec.conf\n  connection keywords take OIDs a peer certificate must have.\n\n- The left/rightauth ipsec.conf keywords accept values with a minimum strength\n  for trustchain public keys in bits, such as rsa-2048 or ecdsa-256.\n\n- The revocation and x509 libstrongswan plugins and the pki tool gained basic\n  support for delta CRLs.\n\n\nstrongswan-4.5.0\n----------------\n\n- IMPORTANT: the default keyexchange mode 'ike' is changing with release 4.5\n  from 'ikev1' to 'ikev2', thus commemorating the five year anniversary of the\n  IKEv2 RFC 4306 and its mature successor RFC 5996. The time has definitively\n  come for IKEv1 to go into retirement and to cede its place to the much more\n  robust, powerful and versatile IKEv2 protocol!\n\n- Added new ctr, ccm and gcm plugins providing Counter, Counter with CBC-MAC\n  and Galois/Counter Modes based on existing CBC implementations. These\n  new plugins bring support for AES and Camellia Counter and CCM algorithms\n  and the AES GCM algorithms for use in IKEv2.\n\n- The new pkcs11 plugin brings full Smartcard support to the IKEv2 daemon and\n  the pki utility using one or more PKCS#11 libraries. It currently supports\n  RSA private and public key operations and loads X.509 certificates from\n  tokens.\n\n- Implemented a general purpose TLS stack based on crypto and credential\n  primitives of libstrongswan. libtls supports TLS versions 1.0, 1.1 and 1.2,\n  ECDHE-ECDSA/RSA, DHE-RSA and RSA key exchange algorithms and RSA/ECDSA based\n  client authentication.\n\n- Based on libtls, the eap-tls plugin brings certificate based EAP\n  authentication for client and server. It is compatible to Windows 7 IKEv2\n  Smartcard authentication and the OpenSSL based FreeRADIUS EAP-TLS backend.\n\n- Implemented the TNCCS 1.1 Trusted Network Connect protocol using the\n  libtnc library on the strongSwan client and server side via the tnccs_11\n  plugin and optionally connecting to a TNC@FHH-enhanced FreeRADIUS AAA server.\n  Depending on the resulting TNC Recommendation, strongSwan clients are granted\n  access to a network behind a strongSwan gateway (allow), are put into a\n  remediation zone (isolate) or are blocked (none), respectively. Any number\n  of Integrity Measurement Collector/Verifier pairs can be attached\n  via the tnc-imc and tnc-imv charon plugins.\n\n- The IKEv1 daemon pluto now uses the same kernel interfaces as the IKEv2\n  daemon charon. As a result of this, pluto now supports xfrm marks which\n  were introduced in charon with 4.4.1.\n\n- Applets for Maemo 5 (Nokia) allow to easily configure and control IKEv2\n  based VPN connections with EAP authentication on supported devices.\n\n- The RADIUS plugin eap-radius now supports multiple RADIUS servers for\n  redundant setups. Servers are selected by a defined priority, server load and\n  availability.\n\n- The simple led plugin controls hardware LEDs through the Linux LED subsystem.\n  It currently shows activity of the IKE daemon and is a good example how to\n  implement a simple event listener.\n\n- Improved MOBIKE behavior in several corner cases, for instance, if the\n  initial responder moves to a different address.\n\n- Fixed left-/rightnexthop option, which was broken since 4.4.0.\n\n- Fixed a bug not releasing a virtual IP address to a pool if the XAUTH\n  identity was different from the IKE identity.\n\n- Fixed the alignment of ModeConfig messages on 4-byte boundaries in the\n  case where the attributes are not a multiple of 4 bytes (e.g. Cisco's\n  UNITY_BANNER).\n\n- Fixed the interoperability of the socket_raw and socket_default\n  charon plugins.\n\n- Added man page for strongswan.conf\n\n\nstrongswan-4.4.1\n----------------\n\n- Support of xfrm marks in IPsec SAs and IPsec policies introduced\n  with the Linux 2.6.34 kernel. For details see the example scenarios\n  ikev2/nat-two-rw-mark, ikev2/rw-nat-mark-in-out and ikev2/net2net-psk-dscp.\n\n- The PLUTO_MARK_IN and PLUTO_ESP_ENC environment variables can be used\n  in a user-specific updown script to set marks on inbound ESP or\n  ESP_IN_UDP packets.\n\n- The openssl plugin now supports X.509 certificate and CRL functions.\n\n- OCSP/CRL checking in IKEv2 has been moved to the revocation plugin, enabled\n  by default. Please update manual load directives in strongswan.conf.\n\n- RFC3779 ipAddrBlock constraint checking has been moved to the addrblock\n  plugin, disabled by default. Enable it and update manual load directives\n  in strongswan.conf, if required.\n\n- The pki utility supports CRL generation using the --signcrl command.\n\n- The ipsec pki --self, --issue and --req commands now support output in\n  PEM format using the --outform pem option.\n\n- The major refactoring of the IKEv1 Mode Config functionality now allows\n  the transport and handling of any Mode Config attribute.\n\n- The RADIUS proxy plugin eap-radius now supports multiple servers. Configured\n  servers are chosen randomly, with the option to prefer a specific server.\n  Non-responding servers are degraded by the selection process.\n\n- The ipsec pool tool manages arbitrary configuration attributes stored\n  in an SQL database. ipsec pool --help gives the details.\n\n- The new eap-simaka-sql plugin acts as a backend for EAP-SIM and EAP-AKA,\n  reading triplets/quintuplets from an SQL database.\n\n- The High Availability plugin now supports a HA enabled in-memory address\n  pool and Node reintegration without IKE_SA rekeying. The latter allows\n  clients without IKE_SA rekeying support to keep connected during\n  reintegration. Additionally, many other issues have been fixed in the ha\n  plugin.\n\n- Fixed a potential remote code execution vulnerability resulting from\n  the misuse of snprintf(). The vulnerability is exploitable by\n  unauthenticated users.\n\n\nstrongswan-4.4.0\n----------------\n\n- The IKEv2 High Availability plugin has been integrated. It provides\n  load sharing and failover capabilities in a cluster of currently two nodes,\n  based on an extend ClusterIP kernel module.\n  The development of the High Availability functionality was sponsored by\n  secunet Security Networks AG.\n\n- Added IKEv1 and IKEv2 configuration support for the AES-GMAC\n  authentication-only ESP cipher. Our aes_gmac kernel patch or a Linux\n  2.6.34 kernel is required to make AES-GMAC available via the XFRM\n  kernel interface.\n\n- Added support for Diffie-Hellman groups 22, 23 and 24 to the gmp, gcrypt\n  and openssl plugins, usable by both pluto and charon. The new proposal\n  keywords are modp1024s160, modp2048s224 and modp2048s256. Thanks to Joy Latten\n  from IBM for his contribution.\n\n- The IKEv1 pluto daemon supports RAM-based virtual IP pools using\n  the rightsourceip directive with a subnet from which addresses\n  are allocated.\n\n- The ipsec pki --gen and --pub commands now allow the output of\n  private and public keys in PEM format using the --outform pem\n  command line option.\n\n- The new DHCP plugin queries virtual IP addresses for clients from a DHCP\n  server using broadcasts, or a defined server using the\n  charon.plugins.dhcp.server strongswan.conf option. DNS/WINS server information\n  is additionally served to clients if the DHCP server provides such\n  information. The plugin is used in ipsec.conf configurations having\n  rightsourceip set to %dhcp.\n\n- A new plugin called farp fakes ARP responses for virtual IP addresses\n  handed out to clients from the IKEv2 daemon charon. The plugin lets a\n  road-warrior act as a client on the local LAN if it uses a virtual IP\n  from the responders subnet, e.g. acquired using the DHCP plugin.\n\n- The existing IKEv2 socket implementations have been migrated to the\n  socket-default and the socket-raw plugins. The new socket-dynamic plugin\n  binds sockets dynamically to ports configured via the left-/rightikeport\n  ipsec.conf connection parameters.\n\n- The android charon plugin stores received DNS server information as \"net.dns\"\n  system properties, as used by the Android platform.\n\n\nstrongswan-4.3.6\n----------------\n\n- The IKEv2 daemon supports RFC 3779 IP address block constraints\n  carried as a critical X.509v3 extension in the peer certificate.\n\n- The ipsec pool --add|del dns|nbns command manages DNS and NBNS name\n  server entries that are sent via the IKEv1 Mode Config or IKEv2\n  Configuration Payload to remote clients.\n\n- The Camellia cipher can be used as an IKEv1 encryption algorithm.\n\n- The IKEv1 and IKEV2 daemons now check certificate path length constraints.\n\n- The new ipsec.conf conn option \"inactivity\" closes a CHILD_SA if no traffic\n  was sent or received within the given interval. To close the complete IKE_SA\n  if its only CHILD_SA was inactive, set the global strongswan.conf option\n  \"charon.inactivity_close_ike\" to yes.\n\n- More detailed IKEv2 EAP payload information in debug output\n\n- IKEv2 EAP-SIM and EAP-AKA share joint libsimaka library\n\n- Added required userland changes for proper SHA256 and SHA384/512 in ESP that\n  will be introduced with Linux 2.6.33. The \"sha256\"/\"sha2_256\" keyword now\n  configures the kernel with 128 bit truncation, not the non-standard 96\n  bit truncation used by previous releases. To use the old 96 bit truncation\n  scheme, the new \"sha256_96\" proposal keyword has been introduced.\n\n- Fixed IPComp in tunnel mode, stripping out the duplicated outer header. This\n  change makes IPcomp tunnel mode connections incompatible with previous\n  releases; disable compression on such tunnels.\n\n- Fixed BEET mode connections on recent kernels by installing SAs with\n  appropriate traffic selectors, based on a patch by Michael Rossberg.\n\n- Using extensions (such as BEET mode) and crypto algorithms (such as twofish,\n  serpent, sha256_96) allocated in the private use space now require that we\n  know its meaning, i.e. we are talking to strongSwan. Use the new\n  \"charon.send_vendor_id\" option in strongswan.conf to let the remote peer know\n  this is the case.\n\n- Experimental support for draft-eronen-ipsec-ikev2-eap-auth, where the\n  responder omits public key authentication in favor of a mutual authentication\n  method. To enable EAP-only authentication, set rightauth=eap on the responder\n  to rely only on the MSK constructed AUTH payload. This not-yet standardized\n  extension requires the strongSwan vendor ID introduced above.\n\n- The IKEv1 daemon ignores the Juniper SRX notification type 40001, thus\n  allowing interoperability.\n\n\nstrongswan-4.3.5\n----------------\n\n- The IKEv1 pluto daemon can now use SQL-based address pools to deal out\n  virtual IP addresses as a Mode Config server. The pool capability has been\n  migrated from charon's sql plugin to a new attr-sql plugin which is loaded\n  by libstrongswan and which can be used by both daemons either with a SQLite\n  or MySQL database and the corresponding plugin.\n\n- Plugin names have been streamlined: EAP plugins now have a dash after eap\n  (e.g. eap-sim), as it is used with the --enable-eap-sim ./configure option.\n  Plugin configuration sections in strongswan.conf now use the same name as the\n  plugin itself (i.e. with a dash). Make sure to update \"load\" directives and\n  the affected plugin sections in existing strongswan.conf files.\n\n- The private/public key parsing and encoding has been split up into\n  separate pkcs1, pgp, pem and dnskey plugins. The public key implementation\n  plugins gmp, gcrypt and openssl can all make use of them.\n\n- The EAP-AKA plugin can use different backends for USIM/quintuplet\n  calculations, very similar to the EAP-SIM plugin. The existing 3GPP2 software\n  implementation has been migrated to a separate plugin.\n\n- The IKEv2 daemon charon gained basic PGP support. It can use locally installed\n  peer certificates and can issue signatures based on RSA private keys.\n\n- The new 'ipsec pki' tool provides a set of commands to maintain a public\n  key infrastructure. It currently supports operations to create RSA and ECDSA\n  private/public keys, calculate fingerprints and issue or verify certificates.\n\n- Charon uses a monotonic time source for statistics and job queueing, behaving\n  correctly if the system time changes (e.g. when using NTP).\n\n- In addition to time based rekeying, charon supports IPsec SA lifetimes based\n  on processed volume or number of packets. They new ipsec.conf parameters\n  'lifetime' (an alias to 'keylife'), 'lifebytes' and 'lifepackets' handle\n  SA timeouts, while the parameters 'margintime' (an alias to rekeymargin),\n  'marginbytes' and 'marginpackets' trigger the rekeying before a SA expires.\n  The existing parameter 'rekeyfuzz' affects all margins.\n\n- If no CA/Gateway certificate is specified in the NetworkManager plugin,\n  charon uses a set of trusted root certificates preinstalled by distributions.\n  The directory containing CA certificates can be specified using the\n  --with-nm-ca-dir=path configure option.\n\n- Fixed the encoding of the Email relative distinguished name in left|rightid\n  statements.\n\n- Fixed the broken parsing of PKCS#7 wrapped certificates by the pluto daemon.\n\n- Fixed smartcard-based authentication in the pluto daemon which was broken by\n  the ECDSA support introduced with the 4.3.2 release.\n\n- A patch contributed by Heiko Hund fixes mixed IPv6 in IPv4 and vice versa\n  tunnels established with the IKEv1 pluto daemon.\n\n- The pluto daemon now uses the libstrongswan x509 plugin for certificates and\n  CRls and the struct id type was replaced by identification_t used by charon\n  and the libstrongswan library.\n\n\nstrongswan-4.3.4\n----------------\n\n- IKEv2 charon daemon ported to FreeBSD and Mac OS X. Installation details can\n  be found in the documentation.\n\n- ipsec statusall shows the number of bytes transmitted and received over\n  ESP connections configured by the IKEv2 charon daemon.\n\n- The IKEv2 charon daemon supports include files in ipsec.secrets.\n\n\nstrongswan-4.3.3\n----------------\n\n- The configuration option --enable-integrity-test plus the strongswan.conf\n  option libstrongswan.integrity_test = yes activate integrity tests\n  of the IKE daemons charon and pluto, libstrongswan and all loaded\n  plugins. Thus dynamic library misconfigurations and non-malicious file\n  manipulations can be reliably detected.\n\n- The new default setting libstrongswan.ecp_x_coordinate_only=yes allows\n  IKEv1 interoperability with MS Windows using the ECP DH groups 19 and 20.\n\n- The IKEv1 pluto daemon now supports the AES-CCM and AES-GCM ESP\n  authenticated encryption algorithms.\n\n- The IKEv1 pluto daemon now supports V4 OpenPGP keys.\n\n- The RDN parser vulnerability discovered by Orange Labs research team\n  was not completely fixed in version 4.3.2. Some more modifications\n  had to be applied to the asn1_length() function to make it robust.\n\n\nstrongswan-4.3.2\n----------------\n\n- The new gcrypt plugin provides symmetric cipher, hasher, RNG, Diffie-Hellman\n  and RSA crypto primitives using the LGPL licensed GNU gcrypt library.\n\n- libstrongswan features an integrated crypto selftest framework for registered\n  algorithms. The test-vector plugin provides a first set of test vectors and\n  allows pluto and charon to rely on tested crypto algorithms.\n\n- pluto can now use all libstrongswan plugins with the exception of x509 and xcbc.\n  Thanks to the openssl plugin, the ECP Diffie-Hellman groups 19, 20, 21, 25, and\n  26 as well as ECDSA-256, ECDSA-384, and ECDSA-521 authentication can be used\n  with IKEv1.\n\n- Applying their fuzzing tool, the Orange Labs vulnerability research team found\n  another two DoS vulnerabilities, one in the rather old ASN.1 parser of Relative\n  Distinguished Names (RDNs) and a second one in the conversion of ASN.1 UTCTIME\n  and GENERALIZEDTIME strings to a time_t value.\n\n\nstrongswan-4.3.1\n----------------\n\n- The nm plugin now passes DNS/NBNS server information to NetworkManager,\n  allowing a gateway administrator to set DNS/NBNS configuration on clients\n  dynamically.\n\n- The nm plugin also accepts CA certificates for gateway authentication. If\n  a CA certificate is configured, strongSwan uses the entered gateway address\n  as its identity, requiring the gateways certificate to contain the same as\n  subjectAltName. This allows a gateway administrator to deploy the same\n  certificates to Windows 7 and NetworkManager clients.\n\n- The command ipsec purgeike deletes IKEv2 SAs that don't have a CHILD SA.\n  The command ipsec down <conn>{n} deletes CHILD SA instance n of connection\n  <conn> whereas ipsec down <conn>{*} deletes all CHILD SA instances.\n  The command ipsec down <conn>[n] deletes IKE SA instance n of connection\n  <conn> plus dependent CHILD SAs whereas ipsec down <conn>[*] deletes all\n  IKE SA instances of connection <conn>.\n\n- Fixed a regression introduced in 4.3.0 where EAP authentication calculated\n  the AUTH payload incorrectly. Further, the EAP-MSCHAPv2 MSK key derivation\n  has been updated to be compatible with the Windows 7 Release Candidate.\n\n- Refactored installation of triggering policies. Routed policies are handled\n  outside of IKE_SAs to keep them installed in any case. A tunnel gets\n  established only once, even if initiation is delayed due network outages.\n\n- Improved the handling of multiple acquire signals triggered by the kernel.\n\n- Fixed two DoS vulnerabilities in the charon daemon that were discovered by\n  fuzzing techniques: 1) Sending a malformed IKE_SA_INIT request leaved an\n  incomplete state which caused a null pointer dereference if a subsequent\n  CREATE_CHILD_SA request was sent. 2) Sending an IKE_AUTH request with either\n  a missing TSi or TSr payload caused a null pointer dereference because the\n  checks for TSi and TSr were interchanged. The IKEv2 fuzzer used was\n  developed by the Orange Labs vulnerability research team. The tool was\n  initially written by Gabriel Campana and is now maintained by Laurent Butti.\n\n- Added support for AES counter mode in ESP in IKEv2 using the proposal\n  keywords aes128ctr, aes192ctr and aes256ctr.\n\n- Further progress in refactoring pluto: Use of the curl and ldap plugins\n  for fetching crls and OCSP. Use of the random plugin to get keying material\n  from /dev/random or /dev/urandom. Use of the openssl plugin as an alternative\n  to the aes, des, sha1, sha2, and md5 plugins. The blowfish, twofish, and\n  serpent encryption plugins are now optional and are not enabled by default.\n\n\nstrongswan-4.3.0\n----------------\n\n- Support for the IKEv2 Multiple Authentication Exchanges extension (RFC4739).\n  Initiators and responders can use several authentication rounds (e.g. RSA\n  followed by EAP) to authenticate. The new ipsec.conf leftauth/rightauth and\n  leftauth2/rightauth2 parameters define own authentication rounds or setup\n  constraints for the remote peer. See the ipsec.conf man page for more details.\n\n- If glibc printf hooks (register_printf_function) are not available,\n  strongSwan can use the vstr string library to run on non-glibc systems.\n\n- The IKEv2 charon daemon can now configure the ESP CAMELLIA-CBC cipher\n  (esp=camellia128|192|256).\n\n- Refactored the pluto and scepclient code to use basic functions (memory\n  allocation, leak detective, chunk handling, printf_hooks, strongswan.conf\n  attributes, ASN.1 parser, etc.) from the libstrongswan library.\n\n- Up to two DNS and WINS servers to be sent via IKEv1 ModeConfig can be\n  configured in the pluto section of strongswan.conf.\n\n\nstrongswan-4.2.14\n-----------------\n\n- The new server-side EAP RADIUS plugin (--enable-eap-radius)\n  relays EAP messages to and from a RADIUS server. Successfully\n  tested with with a freeradius server using EAP-MD5 and EAP-SIM.\n\n- A vulnerability in the Dead Peer Detection (RFC 3706) code was found by\n  Gerd v. Egidy <gerd.von.egidy@intra2net.com> of Intra2net AG affecting\n  all Openswan and strongSwan releases. A malicious (or expired ISAKMP)\n  R_U_THERE or R_U_THERE_ACK Dead Peer Detection packet can cause the\n  pluto IKE daemon to crash and restart. No authentication or encryption\n  is required to trigger this bug. One spoofed UDP packet can cause the\n  pluto IKE daemon to restart and be unresponsive for a few seconds while\n  restarting. This DPD null state vulnerability has been officially\n  registered as CVE-2009-0790 and is fixed by this release.\n\n- ASN.1 to time_t conversion caused a time wrap-around for\n  dates after Jan 18 03:14:07 UTC 2038 on 32-bit platforms.\n  As a workaround such dates are set to the maximum representable\n  time, i.e. Jan 19 03:14:07 UTC 2038.\n\n- Distinguished Names containing wildcards (*) are not sent in the\n  IDr payload anymore.\n\n\nstrongswan-4.2.13\n-----------------\n\n- Fixed a use-after-free bug in the DPD timeout section of the\n  IKEv1 pluto daemon which sporadically caused a segfault.\n\n- Fixed a crash in the IKEv2 charon daemon occurring with\n  mixed RAM-based and SQL-based virtual IP address pools.\n\n- Fixed ASN.1 parsing of algorithmIdentifier objects where the\n  parameters field is optional.\n\n- Ported nm plugin to NetworkManager 7.1.\n\n\nstrongswan-4.2.12\n-----------------\n\n- Support of the EAP-MSCHAPv2 protocol enabled by the option\n  --enable-eap-mschapv2. Requires the MD4 hash algorithm enabled\n  either by --enable-md4 or --enable-openssl.\n\n- Assignment of up to two DNS and up to two WINS servers to peers via\n  the IKEv2 Configuration Payload (CP). The IPv4 or IPv6 nameserver\n  addresses are defined in strongswan.conf.\n\n- The strongSwan applet for the Gnome NetworkManager is now built and\n  distributed as a separate tarball under the name NetworkManager-strongswan.\n\n\nstrongswan-4.2.11\n-----------------\n\n- Fixed ESP NULL encryption broken by the refactoring of keymat.c.\n  Also introduced proper initialization and disposal of keying material.\n\n- Fixed the missing listing of connection definitions in ipsec statusall\n  broken by an unfortunate local variable overload.\n\n\nstrongswan-4.2.10\n-----------------\n\n- Several performance improvements to handle thousands of tunnels with almost\n  linear upscaling. All relevant data structures have been replaced by faster\n  counterparts with better lookup times.\n\n- Better parallelization to run charon on multiple cores. Due to improved\n  resource locking and other optimizations the daemon can take full\n  advantage of 16 or even more cores.\n\n- The load-tester plugin can use a NULL Diffie-Hellman group and simulate\n  unique identities and certificates by signing peer certificates using a CA\n  on the fly.\n\n- The redesigned stroke in-memory IP pool handles leases. The \"ipsec leases\"\n  command queries assigned leases.\n\n- Added support for smartcards in charon by using the ENGINE API provided by\n  OpenSSL, based on patches by Michael Roßberg.\n\n- The Padlock plugin supports the hardware RNG found on VIA CPUs to provide a\n  reliable source of randomness.\n\nstrongswan-4.2.9\n----------------\n\n- Flexible configuration of logging subsystem allowing to log to multiple\n  syslog facilities or to files using fine-grained log levels for each target.\n\n- Load testing plugin to do stress testing of the IKEv2 daemon against self\n  or another host. Found and fixed issues during tests in the multi-threaded\n  use of the OpenSSL plugin.\n\n- Added profiling code to synchronization primitives to find bottlenecks if\n  running on multiple cores. Found and fixed an issue where parts of the\n  Diffie-Hellman calculation acquired an exclusive lock. This greatly improves\n  parallelization to multiple cores.\n\n- updown script invocation has been separated into a plugin of its own to\n  further slim down the daemon core.\n\n- Separated IKE_SA/CHILD_SA key derivation process into a closed system,\n  allowing future implementations to use a secured environment in e.g. kernel\n  memory or hardware.\n\n- The kernel interface of charon has been modularized. XFRM NETLINK (default)\n  and PFKEY (--enable-kernel-pfkey) interface plugins for the native IPsec\n  stack of the Linux 2.6 kernel as well as a PFKEY interface for the KLIPS\n  IPsec stack (--enable-kernel-klips) are provided.\n\n- Basic Mobile IPv6 support has been introduced, securing Binding Update\n  messages as well as tunneled traffic between Mobile Node and Home Agent.\n  The installpolicy=no option allows peaceful cooperation with a dominant\n  mip6d daemon and the new type=transport_proxy implements the special MIPv6\n  IPsec transport proxy mode where the IKEv2 daemon uses the Care-of-Address\n  but the IPsec SA is set up for the Home Address.\n\n- Implemented migration of Mobile IPv6 connections using the KMADDRESS\n  field contained in XFRM_MSG_MIGRATE messages sent by the mip6d daemon\n  via the Linux 2.6.28 (or appropriately patched) kernel.\n\n\nstrongswan-4.2.8\n----------------\n\n- IKEv2 charon daemon supports authentication based on raw public keys\n  stored in the SQL database backend. The ipsec listpubkeys command\n  lists the available raw public keys via the stroke interface.\n\n- Several MOBIKE improvements: Detect changes in NAT mappings in DPD exchanges,\n  handle events if kernel detects NAT mapping changes in UDP-encapsulated\n  ESP packets (requires kernel patch), reuse old addresses in MOBIKE updates as\n  long as possible and other fixes.\n\n- Fixed a bug in addr_in_subnet() which caused insertion of wrong source\n  routes for destination subnets having netwmasks not being a multiple of 8 bits.\n  Thanks go to Wolfgang Steudel, TU Ilmenau for reporting this bug.\n\n\nstrongswan-4.2.7\n----------------\n\n- Fixed a Denial-of-Service vulnerability where an IKE_SA_INIT message with\n  a KE payload containing zeroes only can cause a crash of the IKEv2 charon\n  daemon due to a NULL pointer returned by the mpz_export() function of the\n  GNU Multiprecision Library (GMP). Thanks go to Mu Dynamics Research Labs\n  for making us aware of this problem.\n\n- The new agent plugin provides a private key implementation on top of an\n  ssh-agent.\n\n- The NetworkManager plugin has been extended to support certificate client\n  authentication using RSA keys loaded from a file or using ssh-agent.\n\n- Daemon capability dropping has been ported to libcap and must be enabled\n  explicitly --with-capabilities=libcap. Future version will support the\n  newer libcap2 library.\n\n- ipsec listalgs lists the IKEv2 cryptografic algorithms registered with the\n  charon keying daemon.\n\n\nstrongswan-4.2.6\n----------------\n\n- A NetworkManager plugin allows GUI-based configuration of road-warrior\n  clients in a simple way. It features X509 based gateway authentication\n  and EAP client authentication, tunnel setup/teardown and storing passwords\n  in the Gnome Keyring.\n\n- A new EAP-GTC plugin implements draft-sheffer-ikev2-gtc-00.txt and allows\n  username/password authentication against any PAM service on the gateway.\n  The new EAP method interacts nicely with the NetworkManager plugin and allows\n  client authentication against e.g. LDAP.\n\n- Improved support for the EAP-Identity method. The new ipsec.conf eap_identity\n  parameter defines an additional identity to pass to the server in EAP\n  authentication.\n\n- The \"ipsec statusall\" command now lists CA restrictions, EAP\n  authentication types and EAP identities.\n\n- Fixed two multithreading deadlocks occurring when starting up\n  several hundred tunnels concurrently.\n\n- Fixed the --enable-integrity-test configure option which\n  computes a SHA-1 checksum over the libstrongswan library.\n\n\nstrongswan-4.2.5\n----------------\n\n- Consistent logging of IKE and CHILD SAs at the audit (AUD) level.\n\n- Improved the performance of the SQL-based virtual IP address pool\n  by introducing an additional addresses table. The leases table\n  storing only history information has become optional and can be\n  disabled by setting charon.plugins.sql.lease_history = no in\n  strongswan.conf.\n\n- The XFRM_STATE_AF_UNSPEC flag added to xfrm.h allows IPv4-over-IPv6\n  and IPv6-over-IPv4 tunnels with the 2.6.26 and later Linux kernels.\n\n- management of different virtual IP pools for different\n  network interfaces have become possible.\n\n- fixed a bug which prevented the assignment of more than 256\n  virtual IP addresses from a pool managed by an sql database.\n\n- fixed a bug which did not delete own IPCOMP SAs in the kernel.\n\n\nstrongswan-4.2.4\n----------------\n\n- Added statistics functions to ipsec pool --status and ipsec pool --leases\n  and input validation checks to various ipsec pool commands.\n\n- ipsec statusall now lists all loaded charon plugins and displays\n  the negotiated IKEv2 cipher suite proposals.\n\n- The openssl plugin supports the elliptic curve Diffie-Hellman groups\n  19, 20, 21, 25, and 26.\n\n- The openssl plugin supports ECDSA authentication using elliptic curve\n  X.509 certificates.\n\n- Fixed a bug in stroke which caused multiple charon threads to close\n  the file descriptors during packet transfers over the stroke socket.\n\n- ESP sequence numbers are now migrated in IPsec SA updates handled by\n  MOBIKE. Works only with Linux kernels >= 2.6.17.\n\n\nstrongswan-4.2.3\n----------------\n\n- Fixed the strongswan.conf path configuration problem that occurred when\n  --sysconfig was not set explicitly in ./configure.\n\n- Fixed a number of minor bugs that where discovered during the 4th\n  IKEv2 interoperability workshop in San Antonio, TX.\n\n\nstrongswan-4.2.2\n----------------\n\n- Plugins for libstrongswan and charon can optionally be loaded according\n  to a configuration in strongswan.conf. Most components provide a\n  \"load = \" option followed by a space separated list of plugins to load.\n  This allows e.g. the fallback from a hardware crypto accelerator to\n  to software-based crypto plugins.\n\n- Charons SQL plugin has been extended by a virtual IP address pool.\n  Configurations with a rightsourceip=%poolname setting query a SQLite or\n  MySQL database for leases. The \"ipsec pool\" command helps in administrating\n  the pool database. See ipsec pool --help for the available options\n\n- The Authenticated Encryption Algorithms AES-CCM-8/12/16 and AES-GCM-8/12/16\n  for ESP are now supported starting with the Linux 2.6.25 kernel. The\n  syntax is e.g. esp=aes128ccm12 or esp=aes256gcm16.\n\n\nstrongswan-4.2.1\n----------------\n\n- Support for \"Hash and URL\" encoded certificate payloads has been implemented\n  in the IKEv2 daemon charon. Using the \"certuribase\" option of a CA section\n  allows to assign a base URL to all certificates issued by the specified CA.\n  The final URL is then built by concatenating that base and the hex encoded\n  SHA1 hash of the DER encoded certificate. Note that this feature is disabled\n  by default and must be enabled using the option \"charon.hash_and_url\".\n\n- The IKEv2 daemon charon now supports the \"uniqueids\" option to close multiple\n  IKE_SAs with the same peer. The option value \"keep\" prefers existing\n  connection setups over new ones, where the value \"replace\" replaces existing\n  connections.\n\n- The crypto factory in libstrongswan additionally supports random number\n  generators, plugins may provide other sources of randomness. The default\n  plugin reads raw random data from /dev/(u)random.\n\n- Extended the credential framework by a caching option to allow plugins\n  persistent caching of fetched credentials. The \"cachecrl\" option has been\n  re-implemented.\n\n- The new trustchain verification introduced in 4.2.0 has been parallelized.\n  Threads fetching CRL or OCSP information no longer block other threads.\n\n- A new IKEv2 configuration attribute framework has been introduced allowing\n  plugins to provide virtual IP addresses, and in the future, other\n  configuration attribute services (e.g. DNS/WINS servers).\n\n- The stroke plugin has been extended to provide virtual IP addresses from\n  a pool defined in ipsec.conf. The \"rightsourceip\" parameter now accepts\n  address pools in CIDR notation (e.g. 10.1.1.0/24). The parameter also accepts\n  the value \"%poolname\", where \"poolname\" identifies a pool provided by a\n  separate plugin.\n\n- Fixed compilation on uClibc and a couple of other minor bugs.\n\n- Set DPD defaults in ipsec starter to dpd_delay=30s and dpd_timeout=150s.\n\n- The IKEv1 pluto daemon now supports the ESP encryption algorithm CAMELLIA\n  with key lengths of 128, 192, and 256 bits, as well as the authentication\n  algorithm AES_XCBC_MAC. Configuration example: esp=camellia192-aesxcbc.\n\n\nstrongswan-4.2.0\n----------------\n\n- libstrongswan has been modularized to attach crypto algorithms,\n  credential implementations (keys, certificates) and fetchers dynamically\n  through plugins. Existing code has been ported to plugins:\n    - RSA/Diffie-Hellman implementation using the GNU Multi Precision library\n    - X509 certificate system supporting CRLs, OCSP and attribute certificates\n    - Multiple plugins providing crypto algorithms in software\n    - CURL and OpenLDAP fetcher\n\n- libstrongswan gained a relational database API which uses pluggable database\n  providers. Plugins for MySQL and SQLite are available.\n\n- The IKEv2 keying daemon charon is more extensible. Generic plugins may provide\n  connection configuration, credentials and EAP methods or control the daemon.\n  Existing code has been ported to plugins:\n    - EAP-AKA, EAP-SIM, EAP-MD5 and EAP-Identity\n    - stroke configuration, credential and control (compatible to pluto)\n    - XML bases management protocol to control and query the daemon\n  The following new plugins are available:\n    - An experimental SQL configuration, credential and logging plugin on\n      top of either MySQL or SQLite\n    - A unit testing plugin to run tests at daemon startup\n\n- The authentication and credential framework in charon has been heavily\n  refactored to support modular credential providers, proper\n  CERTREQ/CERT payload exchanges and extensible authorization rules.\n\n- The framework of strongSwan Manager has evolved to the web application\n  framework libfast (FastCGI Application Server w/ Templates) and is usable\n  by other applications.\n\n\nstrongswan-4.1.11\n-----------------\n\n- IKE rekeying in NAT situations did not inherit the NAT conditions\n  to the rekeyed IKE_SA so that the UDP encapsulation was lost with\n  the next CHILD_SA rekeying.\n\n- Wrong type definition of the next_payload variable in id_payload.c\n  caused an INVALID_SYNTAX error on PowerPC platforms.\n\n- Implemented IKEv2 EAP-SIM server and client test modules that use\n  triplets stored in a file. For details on the configuration see\n  the scenario 'ikev2/rw-eap-sim-rsa'.\n\n\nstrongswan-4.1.10\n-----------------\n\n- Fixed error in the ordering of the certinfo_t records in the ocsp cache that\n  caused multiple entries of the same serial number to be created.\n\n- Implementation of a simple EAP-MD5 module which provides CHAP\n  authentication. This may be interesting in conjunction with certificate\n  based server authentication, as weak passwords can't be brute forced\n  (in contradiction to traditional IKEv2 PSK).\n\n- A complete software based implementation of EAP-AKA, using algorithms\n  specified in 3GPP2 (S.S0055). This implementation does not use an USIM,\n  but reads the secrets from ipsec.secrets. Make sure to read eap_aka.h\n  before using it.\n\n- Support for vendor specific EAP methods using Expanded EAP types. The\n  interface to EAP modules has been slightly changed, so make sure to\n  check the changes if you're already rolling your own modules.\n\n\nstrongswan-4.1.9\n----------------\n\n- The default _updown script now dynamically inserts and removes ip6tables\n  firewall rules if leftfirewall=yes is set in IPv6 connections. New IPv6\n  net-net and roadwarrior (PSK/RSA) scenarios for both IKEv1 and IKEV2 were\n  added.\n\n- Implemented RFC4478 repeated authentication to force EAP/Virtual-IP clients\n  to reestablish an IKE_SA within a given timeframe.\n\n- strongSwan Manager supports configuration listing, initiation and termination\n  of IKE and CHILD_SAs.\n\n- Fixes and improvements to multithreading code.\n\n- IKEv2 plugins have been renamed to libcharon-* to avoid naming conflicts.\n  Make sure to remove the old plugins in $libexecdir/ipsec, otherwise they get\n  loaded twice.\n\n\nstrongswan-4.1.8\n----------------\n\n- Removed recursive pthread mutexes since uClibc doesn't support them.\n\n\nstrongswan-4.1.7\n----------------\n\n- In NAT traversal situations and multiple queued Quick Modes,\n  those pending connections inserted by auto=start after the\n  port floating from 500 to 4500 were erroneously deleted.\n\n- Added a \"forceencaps\" connection parameter to enforce UDP encapsulation\n  to surmount restrictive firewalls. NAT detection payloads are faked to\n  simulate a NAT situation and trick the other peer into NAT mode (IKEv2 only).\n\n- Preview of strongSwan Manager, a web based configuration and monitoring\n  application. It uses a new XML control interface to query the IKEv2 daemon.\n\n- Experimental SQLite configuration backend which will provide the configuration\n  interface for strongSwan Manager in future releases.\n\n- Further improvements to MOBIKE support.\n\n\nstrongswan-4.1.6\n----------------\n\n- Since some third party IKEv2 implementations run into\n  problems with strongSwan announcing MOBIKE capability per\n  default, MOBIKE can be disabled on a per-connection-basis\n  using the mobike=no option. Whereas mobike=no disables the\n  sending of the MOBIKE_SUPPORTED notification and the floating\n  to UDP port 4500 with the IKE_AUTH request even if no NAT\n  situation has been detected, strongSwan will still support\n  MOBIKE acting as a responder.\n\n- the default ipsec routing table plus its corresponding priority\n  used for inserting source routes has been changed from 100 to 220.\n  It can be configured using the --with-ipsec-routing-table and\n  --with-ipsec-routing-table-prio options.\n\n- the --enable-integrity-test configure option tests the\n  integrity of the libstrongswan crypto code during the charon\n  startup.\n\n- the --disable-xauth-vid configure option disables the sending\n  of the XAUTH vendor ID. This can be used as a workaround when\n  interoperating with some Windows VPN clients that get into\n  trouble upon reception of an XAUTH VID without eXtended\n  AUTHentication having been configured.\n\n- ipsec stroke now supports the rereadsecrets, rereadaacerts,\n  rereadacerts, and listacerts options.\n\n\nstrongswan-4.1.5\n----------------\n\n- If a DNS lookup failure occurs when resolving right=%<FQDN>\n  or right=<FQDN> combined with rightallowany=yes then the\n  connection is not updated by ipsec starter thus preventing\n  the disruption of an active IPsec connection. Only if the DNS\n  lookup successfully returns with a changed IP address the\n  corresponding connection definition is updated.\n\n- Routes installed by the keying daemons are now in a separate\n  routing table with the ID 100 to avoid conflicts with the main\n  table. Route lookup for IKEv2 traffic is done in userspace to ignore\n  routes installed for IPsec, as IKE traffic shouldn't get encapsulated.\n\n\nstrongswan-4.1.4\n----------------\n\n- The pluto IKEv1 daemon now exhibits the same behavior as its\n  IKEv2 companion charon by inserting an explicit route via the\n  _updown script only if a sourceip exists. This is admissible\n  since routing through the IPsec tunnel is handled automatically\n  by NETKEY's IPsec policies. As a consequence the left|rightnexthop\n  parameter is not required any more.\n\n- The new IKEv1 parameter right|leftallowany parameters helps to handle\n  the case where both peers possess dynamic IP addresses that are\n  usually resolved using DynDNS or a similar service. The configuration\n\n    right=peer.foo.bar\n    rightallowany=yes\n\n  can be used by the initiator to start up a connection to a peer\n  by resolving peer.foo.bar into the currently allocated IP address.\n  Thanks to the rightallowany flag the connection behaves later on\n  as\n\n    right=%any\n\n  so that the peer can rekey the connection as an initiator when his\n  IP address changes. An alternative notation is\n\n    right=%peer.foo.bar\n\n  which will implicitly set rightallowany=yes.\n\n- ipsec starter now fails more gracefully in the presence of parsing\n  errors. Flawed ca and conn section are discarded and pluto is started\n  if non-fatal errors only were encountered. If right=%peer.foo.bar\n  cannot be resolved by DNS then right=%any will be used so that passive\n  connections as a responder are still possible.\n\n- The new pkcs11initargs parameter that can be placed in the\n  setup config section of /etc/ipsec.conf allows the definition\n  of an argument string that is used with the PKCS#11 C_Initialize()\n  function. This non-standard feature is required by the NSS softoken\n  library. This patch was contributed by Robert Varga.\n\n- Fixed a bug in ipsec starter introduced by strongswan-2.8.5\n  which caused a segmentation fault in the presence of unknown\n  or misspelt keywords in ipsec.conf. This bug fix was contributed\n  by Robert Varga.\n\n- Partial support for MOBIKE in IKEv2. The initiator acts on interface/\n  address configuration changes and updates IKE and IPsec SAs dynamically.\n\n\nstrongswan-4.1.3\n----------------\n\n- IKEv2 peer configuration selection now can be based on a given\n  certification authority using the rightca= statement.\n\n- IKEv2 authentication based on RSA signatures now can handle multiple\n  certificates issued for a given peer ID. This allows a smooth transition\n  in the case of a peer certificate renewal.\n\n- IKEv2: Support for requesting a specific virtual IP using leftsourceip on the\n  client and returning requested virtual IPs using rightsourceip=%config\n  on the server. If the server does not support configuration payloads, the\n  client enforces its leftsourceip parameter.\n\n- The ./configure options --with-uid/--with-gid allow pluto and charon\n  to drop their privileges to a minimum and change to an other UID/GID. This\n  improves the systems security, as a possible intruder may only get the\n  CAP_NET_ADMIN capability.\n\n- Further modularization of charon: Pluggable control interface and\n  configuration backend modules provide extensibility. The control interface\n  for stroke is included, and further interfaces using DBUS (NetworkManager)\n  or XML are on the way. A backend for storing configurations in the daemon\n  is provided and more advanced backends (using e.g. a database) are trivial\n  to implement.\n\n- Fixed a compilation failure in libfreeswan occurring with Linux kernel\n  headers > 2.6.17.\n\n\nstrongswan-4.1.2\n----------------\n\n- Support for an additional Diffie-Hellman exchange when creating/rekeying\n  a CHILD_SA in IKEv2 (PFS). PFS is enabled when the proposal contains a\n  DH group (e.g. \"esp=aes128-sha1-modp1536\"). Further, DH group negotiation\n  is implemented properly for rekeying.\n\n- Support for the AES-XCBC-96 MAC algorithm for IPsec SAs when using IKEv2\n  (requires linux >= 2.6.20). It is enabled using e.g. \"esp=aes256-aesxcbc\".\n\n- Working IPv4-in-IPv6 and IPv6-in-IPv4 tunnels for linux >= 2.6.21.\n\n- Added support for EAP modules which do not establish an MSK.\n\n- Removed the dependencies from the /usr/include/linux/ headers by\n  including xfrm.h, ipsec.h, and pfkeyv2.h in the distribution.\n\n- crlNumber is now listed by ipsec listcrls\n\n- The xauth_modules.verify_secret() function now passes the\n  connection name.\n\n\nstrongswan-4.1.1\n----------------\n\n- Server side cookie support. If to may IKE_SAs are in CONNECTING state,\n  cookies are enabled and protect against DoS attacks with faked source\n  addresses. Number of IKE_SAs in CONNECTING state is also limited per\n  peer address to avoid resource exhaustion. IKE_SA_INIT messages are\n  compared to properly detect retransmissions and incoming retransmits are\n  detected even if the IKE_SA is blocked (e.g. doing OCSP fetches).\n\n- The IKEv2 daemon charon now supports dynamic http- and ldap-based CRL\n  fetching enabled by crlcheckinterval > 0 and caching fetched CRLs\n  enabled by cachecrls=yes.\n\n- Added the configuration options --enable-nat-transport which enables\n  the potentially insecure NAT traversal for IPsec transport mode and\n  --disable-vendor-id which disables the sending of the strongSwan\n  vendor ID.\n\n- Fixed a long-standing bug in the pluto IKEv1 daemon which caused\n  a segmentation fault if a malformed payload was detected in the\n  IKE MR2 message and pluto tried to send an encrypted notification\n  message.\n\n- Added the NATT_IETF_02_N Vendor ID in order to support IKEv1 connections\n  with Windows 2003 Server which uses a wrong VID hash.\n\n\nstrongswan-4.1.0\n----------------\n\n- Support of SHA2_384 hash function for protecting IKEv1\n  negotiations and support of SHA2 signatures in X.509 certificates.\n\n- Fixed a serious bug in the computation of the SHA2-512 HMAC\n  function. Introduced automatic self-test of all IKEv1 hash\n  and hmac functions during pluto startup. Failure of a self-test\n  currently issues a warning only but does not exit pluto [yet].\n\n- Support for SHA2-256/384/512 PRF and HMAC functions in IKEv2.\n\n- Full support of CA information sections. ipsec listcainfos\n  now shows all collected crlDistributionPoints and OCSP\n  accessLocations.\n\n- Support of the Online Certificate Status Protocol (OCSP) for IKEv2.\n  This feature requires the HTTP fetching capabilities of the libcurl\n  library which must be enabled by setting the --enable-http configure\n  option.\n\n- Refactored core of the IKEv2 message processing code, allowing better\n  code reuse and separation.\n\n- Virtual IP support in IKEv2 using INTERNAL_IP4/6_ADDRESS configuration\n  payload. Additionally, the INTERNAL_IP4/6_DNS attribute is interpreted\n  by the requestor and installed in a resolv.conf file.\n\n- The IKEv2 daemon charon installs a route for each IPsec policy to use\n  the correct source address even if an application does not explicitly\n  specify it.\n\n- Integrated the EAP framework into charon which loads pluggable EAP library\n  modules. The ipsec.conf parameter authby=eap initiates EAP authentication\n  on the client side, while the \"eap\" parameter on the server side defines\n  the EAP method to use for client authentication.\n  A generic client side EAP-Identity module and an EAP-SIM authentication\n  module using a third party card reader implementation are included.\n\n- Added client side support for cookies.\n\n- Integrated the fixes done at the IKEv2 interoperability bakeoff, including\n  strict payload order, correct INVALID_KE_PAYLOAD rejection and other minor\n  fixes to enhance interoperability with other implementations.\n\n\nstrongswan-4.0.7\n----------------\n\n- strongSwan now interoperates with the NCP Secure Entry Client,\n  the Shrew Soft VPN Client, and the Cisco VPN client, doing both\n  XAUTH and Mode Config.\n\n- UNITY attributes are now recognized and UNITY_BANNER is set\n  to a default string.\n\n\nstrongswan-4.0.6\n----------------\n\n- IKEv1: Support for extended authentication (XAUTH) in combination\n  with ISAKMP Main Mode RSA or PSK authentication. Both client and\n  server side were implemented. Handling of user credentials can\n  be done by a run-time loadable XAUTH module. By default user\n  credentials are stored in ipsec.secrets.\n\n- IKEv2: Support for reauthentication when rekeying\n\n- IKEv2: Support for transport mode\n\n- fixed a lot of bugs related to byte order\n\n- various other bugfixes\n\n\nstrongswan-4.0.5\n----------------\n\n- IKEv1: Implementation of ModeConfig push mode via the new connection\n  keyword modeconfig=push allows interoperability with Cisco VPN gateways.\n\n- IKEv1: The command ipsec statusall now shows \"DPD active\" for all\n  ISAKMP SAs that are under active Dead Peer Detection control.\n\n- IKEv2: Charon's logging and debugging framework has been completely rewritten.\n  Instead of logger, special printf() functions are used to directly\n  print objects like hosts (%H) identifications (%D), certificates (%Q),\n  etc. The number of debugging levels have been reduced to:\n\n    0 (audit), 1 (control), 2 (controlmore),  3 (raw), 4 (private)\n\n  The debugging levels can either be specified statically in ipsec.conf as\n\n    config setup\n        charondebug=\"lib 1, cfg 3, net 2\"\n\n  or changed at runtime via stroke as\n\n    ipsec stroke loglevel cfg 2\n\n\nstrongswan-4.0.4\n----------------\n\n- Implemented full support for IPv6-in-IPv6 tunnels.\n\n- Added configuration options for dead peer detection in IKEv2. dpd_action\n  types \"clear\", \"hold\" and \"restart\" are supported. The dpd_timeout\n  value is not used, as the normal retransmission policy applies to\n  detect dead peers. The dpd_delay parameter enables sending of empty\n  informational message to detect dead peers in case of inactivity.\n\n- Added support for preshared keys in IKEv2. PSK keys configured in\n  ipsec.secrets are loaded. The authby parameter specifies the authentication\n  method to authenticate ourself, the other peer may use PSK or RSA.\n\n- Changed retransmission policy to respect the keyingtries parameter.\n\n- Added private key decryption. PEM keys encrypted with AES-128/192/256\n  or 3DES are supported.\n\n- Implemented DES/3DES algorithms in libstrongswan. 3DES can be used to\n  encrypt IKE traffic.\n\n- Implemented SHA-256/384/512 in libstrongswan, allows usage of certificates\n  signed with such a hash algorithm.\n\n- Added initial support for updown scripts. The actions up-host/client and\n  down-host/client are executed. The leftfirewall=yes parameter\n  uses the default updown script to insert dynamic firewall rules, a custom\n  updown script may be specified with the leftupdown parameter.\n\n\nstrongswan-4.0.3\n----------------\n\n- Added support for the auto=route ipsec.conf parameter and the\n  ipsec route/unroute commands for IKEv2. This allows to set up IKE_SAs and\n  CHILD_SAs dynamically on demand when traffic is detected by the\n  kernel.\n\n- Added support for rekeying IKE_SAs in IKEv2 using the ikelifetime parameter.\n  As specified in IKEv2, no reauthentication is done (unlike in IKEv1), only\n  new keys are generated using perfect forward secrecy. An optional flag\n  which enforces reauthentication will be implemented later.\n\n- \"sha\" and \"sha1\" are now treated as synonyms in the ike= and esp=\n  algorithm configuration statements.\n\n\nstrongswan-4.0.2\n----------------\n\n- Full X.509 certificate trust chain verification has been implemented.\n  End entity certificates can be exchanged via CERT payloads. The current\n  default is leftsendcert=always, since CERTREQ payloads are not supported\n  yet. Optional CRLs must be imported locally into /etc/ipsec.d/crls.\n\n- Added support for leftprotoport/rightprotoport parameters in IKEv2. IKEv2\n  would offer more possibilities for traffic selection, but the Linux kernel\n  currently does not support it. That's why we stick with these simple\n  ipsec.conf rules for now.\n\n- Added Dead Peer Detection (DPD) which checks liveliness of remote peer if no\n  IKE or ESP traffic is received. DPD is currently hardcoded (dpdaction=clear,\n  dpddelay=60s).\n\n- Initial NAT traversal support in IKEv2. Charon includes NAT detection\n  notify payloads to detect NAT routers between the peers. It switches\n  to port 4500, uses UDP encapsulated ESP packets, handles peer address\n  changes gracefully and sends keep alive message periodically.\n\n- Reimplemented IKE_SA state machine for charon, which allows simultaneous\n  rekeying, more shared code, cleaner design, proper retransmission\n  and a more extensible code base.\n\n- The mixed PSK/RSA roadwarrior detection capability introduced by the\n  strongswan-2.7.0 release necessitated the pre-parsing of the IKE proposal\n  payloads by the responder right before any defined IKE Main Mode state had\n  been established. Although any form of bad proposal syntax was being correctly\n  detected by the payload parser, the subsequent error handler didn't check\n  the state pointer before logging current state information, causing an\n  immediate crash of the pluto keying daemon due to a NULL pointer.\n\n\nstrongswan-4.0.1\n----------------\n\n- Added algorithm selection to charon: New default algorithms for\n  ike=aes128-sha-modp2048, as both daemons support it. The default\n  for IPsec SAs is now esp=aes128-sha,3des-md5. charon handles\n  the ike/esp parameter the same way as pluto. As this syntax does\n  not allow specification of a pseudo random function, the same\n  algorithm as for integrity is used (currently sha/md5). Supported\n  algorithms for IKE:\n    Encryption: aes128, aes192, aes256\n    Integrity/PRF: md5, sha (using hmac)\n    DH-Groups: modp768, 1024, 1536, 2048, 4096, 8192\n  and for ESP:\n    Encryption: aes128, aes192, aes256, 3des, blowfish128,\n                blowfish192, blowfish256\n    Integrity: md5, sha1\n  More IKE encryption algorithms will come after porting libcrypto into\n  libstrongswan.\n\n- initial support for rekeying CHILD_SAs using IKEv2. Currently no\n  perfect forward secrecy is used. The rekeying parameters rekey,\n  rekeymargin, rekeyfuzz and keylife from ipsec.conf are now supported\n  when using IKEv2. WARNING: charon currently is unable to handle\n  simultaneous rekeying. To avoid such a situation, use a large\n  rekeyfuzz, or even better, set rekey=no on one peer.\n\n- support for host2host, net2net, host2net (roadwarrior) tunnels\n  using predefined RSA certificates (see uml scenarios for\n  configuration examples).\n\n- new build environment featuring autotools. Features such\n  as HTTP, LDAP and smartcard support may be enabled using\n  the ./configure script. Changing install directories\n  is possible, too. See ./configure --help for more details.\n\n- better integration of charon with ipsec starter, which allows\n  (almost) transparent operation with both daemons. charon\n  handles ipsec commands up, down, status, statusall, listall,\n  listcerts and allows proper load, reload and delete of connections\n  via ipsec starter.\n\n\nstrongswan-4.0.0\n----------------\n\n- initial support of the IKEv2 protocol. Connections in\n  ipsec.conf designated by keyexchange=ikev2 are negotiated\n  by the new IKEv2 charon keying daemon whereas those marked\n  by keyexchange=ikev1 or the default keyexchange=ike are\n  handled thy the IKEv1 pluto keying daemon. Currently only\n  a limited subset of functions are available with IKEv2\n  (Default AES encryption, authentication based on locally\n  imported X.509 certificates, unencrypted private RSA keys\n  in PKCS#1 file format, limited functionality of the ipsec\n  status command).\n\n\nstrongswan-2.7.0\n----------------\n\n- the dynamic iptables rules from the _updown_x509 template\n  for KLIPS and the _updown_policy template for NETKEY have\n  been merged into the default _updown script. The existing\n  left|rightfirewall keyword causes the automatic insertion\n  and deletion of ACCEPT rules for tunneled traffic upon\n  the successful setup and teardown of an IPsec SA, respectively.\n  left|rightfirewall can be used with KLIPS under any Linux 2.4\n  kernel or with NETKEY under a Linux kernel version >= 2.6.16\n  in conjunction with iptables >= 1.3.5. For NETKEY under a Linux\n  kernel version < 2.6.16 which does not support IPsec policy\n  matching yet, please continue to use a copy of the _updown_espmark\n  template loaded via the left|rightupdown keyword.\n\n- a new left|righthostaccess keyword has been introduced which\n  can be used in conjunction with left|rightfirewall and the\n  default _updown script. By default leftfirewall=yes inserts\n  a bi-directional iptables FORWARD rule for a local client network\n  with a netmask different from 255.255.255.255 (single host).\n  This does not allow to access the VPN gateway host via its\n  internal network interface which is part of the client subnet\n  because an iptables INPUT and OUTPUT rule would be required.\n  lefthostaccess=yes will cause this additional ACCEPT rules to\n  be inserted.\n\n- mixed PSK|RSA roadwarriors are now supported. The ISAKMP proposal\n  payload is preparsed in order to find out whether the roadwarrior\n  requests PSK or RSA so that a matching connection candidate can\n  be found.\n\n\nstrongswan-2.6.4\n----------------\n\n- the new _updown_policy template allows ipsec policy based\n  iptables firewall rules. Required are iptables version\n  >= 1.3.5 and linux kernel >= 2.6.16. This script obsoletes\n  the _updown_espmark template, so that no INPUT mangle rules\n  are required any more.\n\n- added support of DPD restart mode\n\n- ipsec starter now allows the use of wildcards in include\n  statements as e.g. in \"include /etc/my_ipsec/*.conf\".\n  Patch courtesy of Matthias Haas.\n\n- the Netscape OID 'employeeNumber' is now recognized and can be\n  used as a Relative Distinguished Name in certificates.\n\n\nstrongswan-2.6.3\n----------------\n\n- /etc/init.d/ipsec or /etc/rc.d/ipsec is now a copy of the ipsec\n  command and not of ipsec setup any more.\n\n- ipsec starter now supports AH authentication in conjunction with\n  ESP encryption. AH authentication is configured in ipsec.conf\n  via the auth=ah parameter.\n\n- The command ipsec scencrypt|scdecrypt <args> is now an alias for\n  ipsec whack --scencrypt|scdecrypt <args>.\n\n- get_sa_info() now determines for the native netkey IPsec stack\n  the exact time of the last use of an active eroute. This information\n  is used by the Dead Peer Detection algorithm and is also displayed by\n  the ipsec status command.\n\n\nstrongswan-2.6.2\n----------------\n\n- running under the native Linux 2.6 IPsec stack, the function\n  get_sa_info() is called by ipsec auto --status to display the current\n  number of transmitted bytes per IPsec SA.\n\n- get_sa_info() is also used  by the Dead Peer Detection process to detect\n  recent ESP activity. If ESP traffic was received from the peer within\n  the last dpd_delay interval then no R_Y_THERE notification must be sent.\n\n- strongSwan now supports the Relative Distinguished Name \"unstructuredName\"\n  in ID_DER_ASN1_DN identities. The following notations are possible:\n\n    rightid=\"unstructuredName=John Doe\"\n    rightid=\"UN=John Doe\"\n\n- fixed a long-standing bug which caused PSK-based roadwarrior connections\n  to segfault in the function id.c:same_id() called by keys.c:get_secret()\n  if an FQDN, USER_FQDN, or Key ID was defined, as in the following example.\n\n  conn rw\n      right=%any\n      rightid=@foo.bar\n      authby=secret\n\n- the ipsec command now supports most ipsec auto commands (e.g. ipsec listall).\n\n- ipsec starter didn't set host_addr and client.addr ports in whack msg.\n\n- in order to guarantee backwards-compatibility with the script-based\n  auto function (e.g. auto --replace), the ipsec starter scripts stores\n  the defaultroute information in the temporary file /var/run/ipsec.info.\n\n- The compile-time option USE_XAUTH_VID enables the sending of the XAUTH\n  Vendor ID which is expected by Cisco PIX 7 boxes that act as IKE Mode Config\n  servers.\n\n- the ipsec starter now also recognizes the parameters authby=never and\n  type=passthrough|pass|drop|reject.\n\n\nstrongswan-2.6.1\n----------------\n\n- ipsec starter now supports the also parameter which allows\n  a modular structure of the connection definitions. Thus\n  \"ipsec start\" is now ready to replace \"ipsec setup\".\n\n\nstrongswan-2.6.0\n----------------\n\n- Mathieu Lafon's popular ipsec starter tool has been added to the\n  strongSwan distribution. Many thanks go to Stephan Scholz from astaro\n  for his integration work. ipsec starter is a C program which is going\n  to replace the various shell and awk starter scripts (setup, _plutoload,\n  _plutostart, _realsetup, _startklips, _confread, and auto). Since\n  ipsec.conf is now parsed only once, the starting of multiple tunnels is\n  accelerated tremendously.\n\n- Added support of %defaultroute to the ipsec starter. If the IP address\n  changes, a HUP signal to the ipsec starter will automatically\n  reload pluto's connections.\n\n- moved most compile time configurations from pluto/Makefile to\n  Makefile.inc by defining the options USE_LIBCURL, USE_LDAP,\n  USE_SMARTCARD, and USE_NAT_TRAVERSAL_TRANSPORT_MODE.\n\n- removed the ipsec verify and ipsec newhostkey commands\n\n- fixed some 64-bit issues in formatted print statements\n\n- The scepclient functionality implementing the Simple Certificate\n  Enrollment Protocol (SCEP) is nearly complete but hasn't been\n  documented yet.\n\n\nstrongswan-2.5.7\n----------------\n\n- CA certificates are now automatically loaded from a smartcard\n  or USB crypto token and appear in the ipsec auto --listcacerts\n  listing.\n\n\nstrongswan-2.5.6\n----------------\n\n- when using \"ipsec whack --scencrypt <data>\" with  a PKCS#11\n  library that does not support the C_Encrypt() Cryptoki\n  function (e.g. OpenSC), the RSA encryption is done in\n  software using the public key fetched from the smartcard.\n\n- The scepclient function now allows to define the\n  validity of a self-signed certificate using the --days,\n  --startdate, and --enddate options. The default validity\n  has been changed from one year to five years.\n\n\nstrongswan-2.5.5\n----------------\n\n- the config setup parameter pkcs11proxy=yes opens pluto's PKCS#11\n  interface to other applications for RSA encryption and decryption\n  via the whack interface. Notation:\n\n  ipsec whack --scencrypt <data>\n             [--inbase  16|hex|64|base64|256|text|ascii]\n             [--outbase 16|hex|64|base64|256|text|ascii]\n             [--keyid <keyid>]\n\n  ipsec whack --scdecrypt <data>\n             [--inbase  16|hex|64|base64|256|text|ascii]\n             [--outbase 16|hex|64|base64|256|text|ascii]\n             [--keyid <keyid>]\n\n  The default setting for inbase and outbase is hex.\n\n  The new proxy interface can be used for securing symmetric\n  encryption keys required by the cryptoloop or dm-crypt\n  disk encryption schemes, especially in the case when\n  pkcs11keepstate=yes causes pluto to lock the pkcs11 slot\n  permanently.\n\n- if the file /etc/ipsec.secrets is lacking during the startup of\n  pluto then the root-readable file /etc/ipsec.d/private/myKey.der\n  containing a 2048 bit RSA private key and a matching self-signed\n  certificate stored in the file /etc/ipsec.d/certs/selfCert.der\n  is automatically generated by calling the function\n\n  ipsec scepclient --out pkcs1 --out cert-self\n\n  scepclient was written by Jan Hutter and Martin Willi, students\n  at the University of Applied Sciences in Rapperswil, Switzerland.\n\n\nstrongswan-2.5.4\n----------------\n\n- the current extension of the PKCS#7 framework introduced\n  a parsing error in PKCS#7 wrapped X.509 certificates that are\n  e.g. transmitted by Windows XP when multi-level CAs are used.\n  the parsing syntax has been fixed.\n\n- added a patch by Gerald Richter which tolerates multiple occurrences\n  of the ipsec0 interface when using KLIPS.\n\n\nstrongswan-2.5.3\n----------------\n\n- with gawk-3.1.4 the word \"default2 has become a protected\n  keyword for use in switch statements and cannot be used any\n  more in the strongSwan scripts. This problem has been\n  solved by renaming \"default\" to \"defaults\" and \"setdefault\"\n  in the scripts _confread and auto, respectively.\n\n- introduced the parameter leftsendcert with the values\n\n  always|yes (the default, always send a cert)\n  ifasked    (send the cert only upon a cert request)\n  never|no   (never send a cert, used for raw RSA keys and\n              self-signed certs)\n\n- fixed the initialization of the ESP key length to a default of\n  128 bits in the case that the peer does not send a key length\n  attribute for AES encryption.\n\n- applied Herbert Xu's uniqueIDs patch\n\n- applied Herbert Xu's CLOEXEC patches\n\n\nstrongswan-2.5.2\n----------------\n\n- CRLs can now be cached also in the case when the issuer's\n  certificate does not contain a subjectKeyIdentifier field.\n  In that case the subjectKeyIdentifier is computed by pluto as the\n  160 bit SHA-1 hash of the issuer's public key in compliance\n  with section 4.2.1.2 of RFC 3280.\n\n- Fixed a bug introduced by strongswan-2.5.1 which eliminated\n  not only multiple Quick Modes of a given connection but also\n  multiple connections between two security gateways.\n\n\nstrongswan-2.5.1\n----------------\n\n- Under the native IPsec of the Linux 2.6 kernel, a %trap eroute\n  installed either by setting auto=route in ipsec.conf or by\n  a connection put into hold, generates an XFRM_ACQUIRE event\n  for each packet that wants to use the not-yet existing\n  tunnel. Up to now each XFRM_ACQUIRE event led to an entry in\n  the Quick Mode queue, causing multiple IPsec SA to be\n  established in rapid succession. Starting with strongswan-2.5.1\n  only a single IPsec SA is established per host-pair connection.\n\n- Right after loading the PKCS#11 module, all smartcard slots are\n  searched for certificates. The result can be viewed using\n  the command\n\n    ipsec auto --listcards\n\n  The certificate objects found in the slots are numbered\n  starting with #1, #2, etc. This position number can be used to address\n  certificates (leftcert=%smartcard) and keys (: PIN %smartcard)\n  in ipsec.conf and ipsec.secrets, respectively:\n\n    %smartcard      (selects object #1)\n    %smartcard#1    (selects object #1)\n    %smartcard#3    (selects object #3)\n\n  As an alternative the existing retrieval scheme can be used:\n\n    %smartcard:45   (selects object with id=45)\n    %smartcard0     (selects first object in slot 0)\n    %smartcard4:45  (selects object in slot 4 with id=45)\n\n- Depending on the settings of CKA_SIGN and CKA_DECRYPT\n  private key flags either C_Sign() or C_Decrypt() is used\n  to generate a signature.\n\n- The output buffer length parameter siglen in C_Sign()\n  is now initialized to the actual size of the output\n  buffer prior to the function call. This fixes the\n  CKR_BUFFER_TOO_SMALL error that could occur when using\n  the OpenSC PKCS#11 module.\n\n- Changed the initialization of the PKCS#11 CK_MECHANISM in\n  C_SignInit() to mech  = { CKM_RSA_PKCS, NULL_PTR, 0 }.\n\n- Refactored the RSA public/private key code and transferred it\n  from keys.c to the new pkcs1.c file as a preparatory step\n  towards the release of the SCEP client.\n\n\nstrongswan-2.5.0\n----------------\n\n- The loading of a PKCS#11 smartcard library module during\n  runtime does not require OpenSC library functions any more\n  because the corresponding code has been integrated into\n  smartcard.c. Also the RSAREF pkcs11 header files have been\n  included in a newly created pluto/rsaref directory so that\n  no external include path has to be defined any longer.\n\n- A long-awaited feature has been implemented at last:\n  The local caching of CRLs fetched via HTTP or LDAP, activated\n  by the parameter cachecrls=yes in the config setup section\n  of ipsec.conf. The dynamically fetched CRLs are stored under\n  a unique file name containing the issuer's subjectKeyID\n  in /etc/ipsec.d/crls.\n\n- Applied a one-line patch courtesy of Michael Richardson\n  from the Openswan project which fixes the kernel-oops\n  in KLIPS when an snmp daemon is running on the same box.\n\n\nstrongswan-2.4.4\n----------------\n\n- Eliminated null length CRL distribution point strings.\n\n- Fixed a trust path evaluation bug introduced with 2.4.3\n\n\nstrongswan-2.4.3\n----------------\n\n- Improved the joint OCSP / CRL revocation policy.\n  OCSP responses have precedence over CRL entries.\n\n- Introduced support of CRLv2 reason codes.\n\n- Fixed a bug with key-pad equipped readers which caused\n  pluto to prompt for the pin via the console when the first\n  occasion to enter the pin via the key-pad was missed.\n\n- When pluto is built with LDAP_V3 enabled, the library\n  liblber required by newer versions of openldap is now\n  included.\n\n\nstrongswan-2.4.2\n----------------\n\n- Added the _updown_espmark template which requires all\n  incoming ESP traffic to be marked with a default mark\n  value of 50.\n\n- Introduced the pkcs11keepstate parameter in the config setup\n  section of ipsec.conf. With pkcs11keepstate=yes the PKCS#11\n  session and login states are kept as long as possible during\n  the lifetime of pluto. This means that a PIN entry via a key\n  pad has to be done only once.\n\n- Introduced the pkcs11module parameter in the config setup\n  section of ipsec.conf which specifies the PKCS#11 module\n  to be used with smart cards. Example:\n\n    pkcs11module=/usr/lib/pkcs11/opensc-pkcs11.lo\n\n- Added support of smartcard readers equipped with a PIN pad.\n\n- Added patch by Jay Pfeifer which detects when netkey\n  modules have been statically built into the Linux 2.6 kernel.\n\n- Added two patches by Herbert Xu. The first uses ip xfrm\n  instead of setkey to flush the IPsec policy database. The\n  second sets the optional flag in inbound IPComp SAs only.\n\n- Applied Ulrich Weber's patch which fixes an interoperability\n  problem between native IPsec and KLIPS systems caused by\n  setting the replay window to 32 instead of 0 for ipcomp.\n\n\nstrongswan-2.4.1\n----------------\n\n- Fixed a bug which caused an unwanted Mode Config request\n  to be initiated in the case where \"right\" was used to denote\n  the local side in ipsec.conf and \"left\" the remote side,\n  contrary to the recommendation that \"right\" be remote and\n  \"left\" be\"local\".\n\n\nstrongswan-2.4.0a\n-----------------\n\n- updated Vendor ID to strongSwan-2.4.0\n\n- updated copyright statement to include David Buechi and\n  Michael Meier\n\n\nstrongswan-2.4.0\n----------------\n\n- strongSwan now communicates with attached smartcards and\n  USB crypto tokens via the standardized PKCS #11 interface.\n  By default the OpenSC library from www.opensc.org is used\n  but any other PKCS#11 library could be dynamically linked.\n  strongSwan's PKCS#11 API was implemented by David Buechi\n  and Michael Meier, both graduates of the Zurich University\n  of Applied Sciences in Winterthur, Switzerland.\n\n- When a %trap eroute is triggered by an outgoing IP packet\n  then the native IPsec stack of the Linux 2.6 kernel [often/\n  always?] returns an XFRM_ACQUIRE message with an undefined\n  protocol family field and the connection setup fails.\n  As a workaround IPv4 (AF_INET) is now assumed.\n\n- the results of the UML test scenarios are now enhanced\n  with block diagrams of the virtual network topology used\n  in a particular test.\n\n\nstrongswan-2.3.2\n----------------\n\n- fixed IV used to decrypt informational messages.\n  This bug was introduced with Mode Config functionality.\n\n- fixed NCP Vendor ID.\n\n- undid one of Ulrich Weber's maximum udp size patches\n  because it caused a segmentation fault with NAT-ed\n  Delete SA messages.\n\n- added UML scenarios wildcards and attr-cert which\n  demonstrate the implementation of IPsec policies based\n  on wildcard parameters contained in Distinguished Names and\n  on X.509 attribute certificates, respectively.\n\n\nstrongswan-2.3.1\n----------------\n\n- Added basic Mode Config functionality\n\n- Added Mathieu Lafon's patch which upgrades the status of\n  the NAT-Traversal implementation to RFC 3947.\n\n- The _startklips script now also loads the xfrm4_tunnel\n  module.\n\n- Added Ulrich Weber's netlink replay window size and\n  maximum udp size patches.\n\n- UML testing now uses the Linux 2.6.10 UML kernel by default.\n\n\nstrongswan-2.3.0\n----------------\n\n- Eric Marchionni and Patrik Rayo, both recent graduates from\n  the Zuercher Hochschule Winterthur in Switzerland, created a\n  User-Mode-Linux test setup for strongSwan. For more details\n  please read the INSTALL and README documents in the testing\n  subdirectory.\n\n- Full support of group attributes based on X.509 attribute\n  certificates. Attribute certificates can be generated\n  using the openac facility. For more details see\n\n  man ipsec_openac.\n\n  The group attributes can be used in connection definitions\n  in order to give IPsec access to specific user groups.\n  This is done with the new parameter left|rightgroups as in\n\n  rightgroups=\"Research, Sales\"\n\n  giving access to users possessing the group attributes\n  Research or Sales, only.\n\n- In Quick Mode clients with subnet mask /32 are now\n  coded as IP_V4_ADDRESS or IP_V6_ADDRESS. This should\n  fix rekeying problems with the SafeNet/SoftRemote and NCP\n  Secure Entry Clients.\n\n- Changed the defaults of the ikelifetime and keylife parameters\n  to 3h and 1h, respectively. The maximum allowable values are\n  now both set to 24 h.\n\n- Suppressed notification wars between two IPsec peers that\n  could e.g. be triggered by incorrect ISAKMP encryption.\n\n- Public RSA keys can now have identical IDs if either the\n  issuing CA or the serial number is different. The serial\n  number of a certificate is now shown by the command\n\n  ipsec auto --listpubkeys\n\n\nstrongswan-2.2.2\n----------------\n\n- Added Tuomo Soini's sourceip feature which allows a strongSwan\n  roadwarrior to use a fixed Virtual IP (see README section 2.6)\n  and reduces the well-known four tunnel case on VPN gateways to\n  a single tunnel definition (see README section 2.4).\n\n- Fixed a bug occurring with NAT-Traversal enabled when the responder\n  suddenly turns initiator and the initiator cannot find a matching\n  connection because of the floated IKE port 4500.\n\n- Removed misleading ipsec verify command from barf.\n\n- Running under the native IP stack, ipsec --version now shows\n  the Linux kernel version (courtesy to the Openswan project).\n\n\nstrongswan-2.2.1\n----------------\n\n- Introduced the ipsec auto --listalgs monitoring command which lists\n  all currently registered IKE and ESP algorithms.\n\n- Fixed a bug in the ESP algorithm selection occurring when the strict flag\n  is set and the first proposed transform does not match.\n\n- Fixed another deadlock in the use of the lock_certs_and_keys() mutex,\n  occurring when a smartcard is present.\n\n- Prevented that a superseded Phase1 state can trigger a DPD_TIMEOUT event.\n\n- Fixed the printing of the notification names (null)\n\n- Applied another of Herbert Xu's Netlink patches.\n\n\nstrongswan-2.2.0\n----------------\n\n- Support of Dead Peer Detection. The connection parameter\n\n    dpdaction=clear|hold\n\n  activates DPD for the given connection.\n\n- The default Opportunistic Encryption (OE) policy groups are not\n  automatically included anymore. Those wishing to activate OE can include\n  the policy group with the following statement in ipsec.conf:\n\n    include /etc/ipsec.d/examples/oe.conf\n\n  The default for [right|left]rsasigkey is now set to %cert.\n\n- strongSwan now has a Vendor ID of its own which can be activated\n  using the compile option VENDORID\n\n- Applied Herbert Xu's patch which sets the compression algorithm correctly.\n\n- Applied Herbert Xu's patch fixing an ESPINUDP problem\n\n- Applied Herbert Xu's patch setting source/destination port numbers.\n\n- Reapplied one of Herbert Xu's NAT-Traversal patches which got\n  lost during the migration from SuperFreeS/WAN.\n\n- Fixed a deadlock in the use of the lock_certs_and_keys() mutex.\n\n- Fixed the unsharing of alg parameters when instantiating group\n  connection.\n\n\nstrongswan-2.1.5\n----------------\n\n- Thomas Walpuski made me aware of a potential DoS attack via\n  a PKCS#7-wrapped certificate bundle which could overwrite valid CA\n  certificates in Pluto's authority certificate store. This vulnerability\n  was fixed by establishing trust in CA candidate certificates up to a\n  trusted root CA prior to insertion into Pluto's chained list.\n\n- replaced the --assign option by the -v option in the auto awk script\n  in order to make it run with mawk under debian/woody.\n\n\nstrongswan-2.1.4\n----------------\n\n- Split of the status information between ipsec auto  --status (concise)\n  and ipsec auto --statusall (verbose). Both commands can be used with\n  an optional connection selector:\n\n    ipsec auto --status[all] <connection_name>\n\n- Added the description of X.509 related features to the ipsec_auto(8)\n  man page.\n\n- Hardened the ASN.1 parser in debug mode, especially the printing\n  of malformed distinguished names.\n\n- The size of an RSA public key received in a certificate is now restricted to\n\n    512 bits <= modulus length <= 8192 bits.\n\n- Fixed the debug mode enumeration.\n\n\nstrongswan-2.1.3\n----------------\n\n- Fixed another PKCS#7 vulnerability which could lead to an\n  endless loop while following the X.509 trust chain.\n\n\nstrongswan-2.1.2\n----------------\n\n- Fixed the PKCS#7 vulnerability discovered by Thomas Walpuski\n  that accepted end certificates having identical issuer and subject\n  distinguished names in a multi-tier X.509 trust chain.\n\n\nstrongswan-2.1.1\n----------------\n\n- Removed all remaining references to ipsec_netlink.h in KLIPS.\n\n\nstrongswan-2.1.0\n----------------\n\n- The new \"ca\" section allows to define the following parameters:\n\n  ca kool\n      cacert=koolCA.pem                   # cacert of kool CA\n      ocspuri=http://ocsp.kool.net:8001   # ocsp server\n      ldapserver=ldap.kool.net            # default ldap server\n      crluri=http://www.kool.net/kool.crl # crl distribution point\n      crluri2=\"ldap:///O=Kool, C= ..\"     # crl distribution point #2\n      auto=add                            # add, ignore\n\n  The ca definitions can be monitored via the command\n\n    ipsec auto --listcainfos\n\n- Fixed cosmetic corruption of /proc filesystem by integrating\n  D. Hugh Redelmeier's freeswan-2.06 kernel fixes.\n\n\nstrongswan-2.0.2\n----------------\n\n- Added support for the 818043 NAT-Traversal update of Microsoft's\n  Windows 2000/XP IPsec client which sends an ID_FQDN during Quick Mode.\n\n- A symbolic link to libcrypto is now added in the kernel sources\n  during kernel compilation\n\n- Fixed a couple of 64 bit issues (mostly casts to int).\n  Thanks to Ken Bantoft who checked my sources on a 64 bit platform.\n\n- Replaced s[n]printf() statements in the kernel by ipsec_snprintf().\n  Credits go to D. Hugh Redelmeier, Michael Richardson, and Sam Sgro\n  of the FreeS/WAN team who solved this problem with the 2.4.25 kernel.\n\n\nstrongswan-2.0.1\n----------------\n\n- an empty ASN.1 SEQUENCE OF or SET OF object (e.g. a subjectAltName\n  certificate extension which contains no generalName item)  can cause\n  a pluto crash. This bug has been fixed. Additionally the ASN.1 parser has\n  been hardened to make it more robust against malformed ASN.1 objects.\n\n- applied Herbert Xu's NAT-T patches which fixes NAT-T under the native\n  Linux 2.6 IPsec stack.\n\n\nstrongswan-2.0.0\n----------------\n\n- based on freeswan-2.04, x509-1.5.3, nat-0.6c, alg-0.8.1rc12\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 0.0087890625,
          "content": "README.md"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 21.0888671875,
          "content": "# strongSwan Configuration #\n\n## Overview ##\n\nstrongSwan is an OpenSource IPsec-based VPN solution.\n\nThis document is just a short introduction of the strongSwan **swanctl** command\nwhich uses the modern [**vici**](src/libcharon/plugins/vici/README.md) *Versatile\nIKE Configuration Interface*. The deprecated **ipsec** command using the legacy\n**stroke** configuration interface is described [**here**](README_LEGACY.md).\nFor more detailed information consult the man pages, our new\n[**documentation site**](https://docs.strongswan.org) and the legacy\n[**wiki**](https://wiki.strongswan.org).\n\n\n## Quickstart ##\n\nCertificates for users, hosts and gateways are issued by a fictitious\nstrongSwan CA. In our example scenarios the CA certificate `strongswanCert.pem`\nmust be present on all VPN endpoints in order to be able to authenticate the\npeers. For your particular VPN application you can either use certificates from\nany third-party CA or generate the needed private keys and certificates yourself\nwith the strongSwan **pki** tool, the use of which will be explained in one of\nthe sections following below.\n\n\n### Site-to-Site Case ###\n\nIn this scenario two security gateways _moon_ and _sun_ will connect the\ntwo subnets _moon-net_ and _sun-net_ with each other through a VPN tunnel\nset up between the two gateways:\n\n    10.1.0.0/16 -- | 192.168.0.1 | === | 192.168.0.2 | -- 10.2.0.0/16\n      moon-net          moon                 sun           sun-net\n\nConfiguration on gateway _moon_:\n\n    /etc/swanctl/x509ca/strongswanCert.pem\n    /etc/swanctl/x509/moonCert.pem\n    /etc/swanctl/private/moonKey.pem\n\n    /etc/swanctl/swanctl.conf:\n\n        connections {\n            net-net {\n                remote_addrs = 192.168.0.2\n\n                local {\n                    auth = pubkey\n                    certs = moonCert.pem\n                }\n                remote {\n                    auth = pubkey\n                    id = \"C=CH, O=strongSwan, CN=sun.strongswan.org\"\n                }\n                children {\n                    net-net {\n                        local_ts  = 10.1.0.0/16\n                        remote_ts = 10.2.0.0/16\n                        start_action = trap\n                    }\n                }\n            }\n        }\n\nConfiguration on gateway _sun_:\n\n    /etc/swanctl/x509ca/strongswanCert.pem\n    /etc/swanctl/x509/sunCert.pem\n    /etc/swanctl/private/sunKey.pem\n\n    /etc/swanctl/swanctl.conf:\n\n        connections {\n            net-net {\n                remote_addrs = 192.168.0.1\n\n                local {\n                    auth = pubkey\n                    certs = sunCert.pem\n                }\n                remote {\n                    auth = pubkey\n                    id = \"C=CH, O=strongSwan, CN=moon.strongswan.org\"\n                }\n                children {\n                    net-net {\n                        local_ts  = 10.2.0.0/16\n                        remote_ts = 10.1.0.0/16\n                        start_action = trap\n                    }\n                }\n            }\n        }\n\nThe local and remote identities used in this scenario are the\n*subjectDistinguishedNames* contained in the end entity certificates.\nThe certificates and private keys are loaded into the **charon** daemon with\nthe command\n\n    swanctl --load-creds\n\nwhereas\n\n    swanctl --load-conns\n\nloads the connections defined in `swanctl.conf`. With `start_action = trap` the\nIPsec connection is automatically set up with the first plaintext payload IP\npacket wanting to go through the tunnel.\n\n### Host-to-Host Case ###\n\nThis is a setup between two single hosts which don't have a subnet behind\nthem.  Although IPsec transport mode would be sufficient for host-to-host\nconnections we will use the default IPsec tunnel mode.\n\n    | 192.168.0.1 | === | 192.168.0.2 |\n         moon                sun\n\nConfiguration on host _moon_:\n\n    /etc/swanctl/x509ca/strongswanCert.pem\n    /etc/swanctl/x509/moonCert.pem\n    /etc/swanctl/private/moonKey.pem\n\n    /etc/swanctl/swanctl.conf:\n\n        connections {\n            host-host {\n                remote_addrs = 192.168.0.2\n\n                local {\n                    auth=pubkey\n                    certs = moonCert.pem\n                }\n                remote {\n                    auth = pubkey\n                    id = \"C=CH, O=strongSwan, CN=sun.strongswan.org\"\n                }\n                children {\n                    net-net {\n                        start_action = trap\n                    }\n                }\n            }\n        }\n\nConfiguration on host _sun_:\n\n    /etc/swanctl/x509ca/strongswanCert.pem\n    /etc/swanctl/x509/sunCert.pem\n    /etc/swanctl/private/sunKey.pem\n\n    /etc/swanctl/swanctl.conf:\n\n        connections {\n            host-host {\n                remote_addrs = 192.168.0.1\n\n                local {\n                    auth = pubkey\n                    certs = sunCert.pem\n                }\n                remote {\n                    auth = pubkey\n                    id = \"C=CH, O=strongSwan, CN=moon.strongswan.org\"\n                }\n                children {\n                    host-host {\n                        start_action = trap\n                    }\n                }\n            }\n        }\n\n\n### Roadwarrior Case ###\n\nThis is a very common case where a strongSwan gateway serves an arbitrary\nnumber of remote VPN clients usually having dynamic IP addresses.\n\n    10.1.0.0/16 -- | 192.168.0.1 | === | x.x.x.x |\n      moon-net          moon              carol\n\nConfiguration on gateway _moon_:\n\n    /etc/swanctl/x509ca/strongswanCert.pem\n    /etc/swanctl/x509/moonCert.pem\n    /etc/swanctl/private/moonKey.pem\n\n    /etc/swanctl/swanctl.conf:\n\n        connections {\n            rw {\n                local {\n                    auth = pubkey\n                    certs = moonCert.pem\n                    id = moon.strongswan.org\n                }\n                remote {\n                    auth = pubkey\n                }\n                children {\n                    net-net {\n                        local_ts  = 10.1.0.0/16\n                    }\n                }\n            }\n        }\n\nConfiguration on roadwarrior _carol_:\n\n    /etc/swanctl/x509ca/strongswanCert.pem\n    /etc/swanctl/x509/carolCert.pem\n    /etc/swanctl/private/carolKey.pem\n\n    /etc/swanctl/swanctl.conf:\n\n        connections {\n            home {\n                remote_addrs = moon.strongswan.org\n\n                local {\n                    auth = pubkey\n                    certs = carolCert.pem\n                    id = carol@strongswan.org\n                }\n                remote {\n                    auth = pubkey\n                    id = moon.strongswan.org\n                }\n                children {\n                    home {\n                        local_ts  = 10.1.0.0/16\n                        start_action = start\n                    }\n                }\n            }\n        }\n\nFor `remote_addrs` the hostname `moon.strongswan.org` was chosen which will be\nresolved by DNS at runtime into the corresponding IP destination address.\nIn this scenario the identity of the roadwarrior `carol` is the email address\n`carol@strongswan.org` which must be included as a *subjectAlternativeName* in\nthe roadwarrior certificate `carolCert.pem`.\n\n\n### Roadwarrior Case with Virtual IP ###\n\nRoadwarriors usually have dynamic IP addresses assigned by the ISP they are\ncurrently attached to.  In order to simplify the routing from _moon-net_ back\nto the remote access client _carol_ it would be desirable if the roadwarrior had\nan inner IP address chosen from a pre-defined pool.\n\n    10.1.0.0/16 -- | 192.168.0.1 | === | x.x.x.x | -- 10.3.0.1\n      moon-net          moon              carol       virtual IP\n\nIn our example the virtual IP address is chosen from the address pool\n`10.3.0.0/16` which can be configured by adding the section\n\n    pools {\n        rw_pool {\n            addrs = 10.3.0.0/16\n        }\n    }\n\nto the gateway's `swanctl.conf` from where they are loaded into the **charon**\ndaemon using the command\n\n    swanctl --load-pools\n\nTo request an IP address from this pool a roadwarrior can use IKEv1 mode config\nor IKEv2 configuration payloads. The configuration for both is the same\n\n    vips = 0.0.0.0\n\nConfiguration on gateway _moon_:\n\n    /etc/swanctl/x509ca/strongswanCert.pem\n    /etc/swanctl/x509/moonCert.pem\n    /etc/swanctl/private/moonKey.pem\n\n    /etc/swanctl/swanctl.conf:\n\n        connections {\n            rw {\n                pools = rw_pool\n\n                local {\n                    auth = pubkey\n                    certs = moonCert.pem\n                    id = moon.strongswan.org\n                }\n                remote {\n                    auth = pubkey\n                }\n                children {\n                    net-net {\n                        local_ts  = 10.1.0.0/16\n                    }\n                }\n            }\n        }\n\n        pools {\n            rw_pool {\n                addrs = 10.30.0.0/16\n            }\n        }\n\nConfiguration on roadwarrior _carol_:\n\n    /etc/swanctl/x509ca/strongswanCert.pem\n    /etc/swanctl/x509/carolCert.pem\n    /etc/swanctl/private/carolKey.pem\n\n    /etc/swanctl/swanctl.conf:\n\n        connections {\n            home {\n                remote_addrs = moon.strongswan.org\n                vips = 0.0.0.0\n\n                local {\n                    auth = pubkey\n                    certs = carolCert.pem\n                    id = carol@strongswan.org\n                }\n                remote {\n                    auth = pubkey\n                    id = moon.strongswan.org\n                }\n                children {\n                    home {\n                        local_ts  = 10.1.0.0/16\n                        start_action = start\n                    }\n                }\n            }\n        }\n\n\n### Roadwarrior Case with EAP Authentication ###\n\nThis is a very common case where a strongSwan gateway serves an arbitrary\nnumber of remote VPN clients which authenticate themselves via a password\nbased *Extended Authentication Protocol* as e.g. *EAP-MD5* or *EAP-MSCHAPv2*.\n\n    10.1.0.0/16 -- | 192.168.0.1 | === | x.x.x.x |\n      moon-net          moon              carol\n\nConfiguration on gateway _moon_:\n\n    /etc/swanctl/x509ca/strongswanCert.pem\n    /etc/swanctl/x509/moonCert.pem\n    /etc/swanctl/private/moonKey.pem\n\n    /etc/swanctl/swanctl.conf:\n\n        connections {\n            rw {\n                local {\n                    auth = pubkey\n                    certs = moonCert.pem\n                    id = moon.strongswan.org\n                }\n                remote {\n                    auth = eap-md5\n                }\n                children {\n                    net-net {\n                        local_ts  = 10.1.0.0/16\n                    }\n                }\n                send_certreq = no\n            }\n        }\n\nThe  `swanctl.conf` file additionally contains a `secrets` section defining all\nclient credentials\n\n        secrets {\n            eap-carol {\n                id = carol@strongswan.org\n                secret = Ar3etTnp\n            }\n            eap-dave {\n                id = dave@strongswan.org\n                secret = W7R0g3do\n            }\n        }\n\nConfiguration on roadwarrior _carol_:\n\n    /etc/swanctl/x509ca/strongswanCert.pem\n\n    /etc/swanctl/swanctl.conf:\n\n        connections {\n            home {\n                remote_addrs = moon.strongswan.org\n\n                local {\n                    auth = eap\n                    id = carol@strongswan.org\n                }\n                remote {\n                    auth = pubkey\n                    id = moon.strongswan.org\n                }\n                children {\n                    home {\n                        local_ts  = 10.1.0.0/16\n                        start_action = start\n                    }\n                }\n            }\n        }\n\n        secrets {\n            eap-carol {\n                id = carol@strongswan.org\n                secret = Ar3etTnp\n            }\n        }\n\n\n### Roadwarrior Case with EAP Identity ###\n\nOften a client EAP identity is exchanged via EAP which differs from the\nexternal IKEv2 identity. In this example the IKEv2 identity defaults to\nthe IPv4 address of the client.\n\n    10.1.0.0/16 -- | 192.168.0.1 | === | x.x.x.x |\n      moon-net          moon              carol\n\nConfiguration on gateway _moon_:\n\n    /etc/swanctl/x509ca/strongswanCert.pem\n    /etc/swanctl/x509/moonCert.pem\n    /etc/swanctl/private/moonKey.pem\n\n    /etc/swanctl/swanctl.conf:\n\n        connections {\n            rw {\n                local {\n                    auth = pubkey\n                    certs = moonCert.pem\n                    id = moon.strongswan.org\n                }\n                remote {\n                    auth = eap-md5\n                    eap_id = %any\n                }\n                children {\n                    net-net {\n                        local_ts  = 10.1.0.0/16\n                    }\n                }\n                send_certreq = no\n            }\n        }\n\n        secrets {\n            eap-carol {\n                id = carol\n                secret = Ar3etTnp\n            }\n            eap-dave {\n                id = dave\n                secret = W7R0g3do\n            }\n        }\n\nConfiguration on roadwarrior _carol_:\n\n    /etc/swanctl/x509ca/strongswanCert.pem\n\n    /etc/swanctl/swanctl.conf:\n\n        connections {\n            home {\n                remote_addrs = moon.strongswan.org\n\n                local {\n                    auth = eap\n                    eap_id = carol\n                }\n                remote {\n                    auth = pubkey\n                    id = moon.strongswan.org\n                }\n                children {\n                    home {\n                        local_ts  = 10.1.0.0/16\n                        start_action = start\n                    }\n                }\n            }\n        }\n\n        secrets {\n            eap-carol {\n                id = carol\n                secret = Ar3etTnp\n            }\n        }\n\n\n## Generating Certificates and CRLs ##\n\nThis section is not a full-blown tutorial on how to use the strongSwan **pki**\ntool. It just lists a few points that are relevant if you want to generate your\nown certificates and CRLs for use with strongSwan.\n\n\n### Generating a CA Certificate ###\n\nThe pki statement\n\n    pki --gen --type ed25519 --outform pem > strongswanKey.pem\n\ngenerates an elliptic Edwards-Curve key with a cryptographic strength of 128\nbits. The corresponding public key is packed into a self-signed CA certificate\nwith a lifetime of 10 years (3652 days)\n\n    pki --self --ca --lifetime 3652 --in strongswanKey.pem \\\n               --dn \"C=CH, O=strongSwan, CN=strongSwan Root CA\" \\\n               --outform pem > strongswanCert.pem\n\nwhich can be listed with the command\n\n    pki --print --in strongswanCert.pem\n\n    subject:  \"C=CH, O=strongSwan, CN=strongSwan Root CA\"\n    issuer:   \"C=CH, O=strongSwan, CN=strongSwan Root CA\"\n    validity:  not before May 18 08:32:06 2017, ok\n               not after  May 18 08:32:06 2027, ok (expires in 3651 days)\n    serial:    57:e0:6b:3a:9a:eb:c6:e0\n    flags:     CA CRLSign self-signed\n    subjkeyId: 2b:95:14:5b:c3:22:87:de:d1:42:91:88:63:b3:d5:c1:92:7a:0f:5d\n    pubkey:    ED25519 256 bits\n    keyid:     a7:e1:6a:3f:e7:6f:08:9d:89:ec:23:92:a9:a1:14:3c:78:a8:7a:f7\n    subjkey:   2b:95:14:5b:c3:22:87:de:d1:42:91:88:63:b3:d5:c1:92:7a:0f:5d\n\nIf you prefer the CA private key and X.509 certificate to be in binary DER format\nthen just omit the `--outform pem` option. The directory `/etc/swanctl/x509ca`\ncontains all required CA certificates either in binary DER or in Base64 PEM\nformat. Irrespective of the file suffix the correct format will be determined\nby strongSwan automagically.\n\n\n### Generating a Host or User End Entity Certificate ###\n\nAgain we are using the command\n\n    pki --gen --type ed25519 --outform pem > moonKey.pem\n\nto generate an Ed25519 private key for the host `moon`. Alternatively you could\ntype\n\n    pki --gen --type rsa --size 3072 > moonKey.der\n\nto generate a traditional 3072 bit RSA key and store it in binary DER format.\nAs an alternative a **TPM 2.0** *Trusted Platform Module* available on every\nrecent Intel platform could be used as a virtual smartcard to securely store an\nRSA or ECDSA private key. For details, refer to the TPM 2.0\n[HOWTO](https://docs.strongswan.org/docs/5.9/tpm/tpm2.html).\n\nIn a next step the command\n\n    pki --req --type priv --in moonKey.pem \\\n              --dn \"C=CH, O=strongswan, CN=moon.strongswan.org\" \\\n              --san moon.strongswan.org --outform pem > moonReq.pem\n\ncreates a PKCS#10 certificate request that has to be signed by the CA.\nThrough the [multiple] use of the `--san` parameter any number of desired\n*subjectAlternativeNames* can be added to the request. These can be of the\nform\n\n    --san sun.strongswan.org     # fully qualified host name\n    --san carol@strongswan.org   # RFC822 user email address\n    --san 192.168.0.1            # IPv4 address\n    --san fec0::1                # IPv6 address\n\nBased on the certificate request the CA issues a signed end entity certificate\nwith the following command\n\n    pki --issue --cacert strongswanCert.pem --cakey strongswanKey.pem \\\n                --type pkcs10 --in moonReq.pem --serial 01 --lifetime 1826 \\\n                --outform pem > moonCert.pem\n\nIf the `--serial` parameter with a hexadecimal argument is omitted then a random\nserial number is generated. Some third party VPN clients require that a VPN\ngateway certificate contains the *TLS Server Authentication* Extended Key Usage\n(EKU) flag which can be included with the following option\n\n    --flag serverAuth\n\nIf you want to use the dynamic CRL fetching feature described in one of the\nfollowing sections then you may include one or several *crlDistributionPoints*\nin your end entity certificates using the `--crl` parameter\n\n    --crl  http://crl.strongswan.org/strongswan.crl\n    --crl \"ldap://ldap.strongswan.org/cn=strongSwan Root CA, o=strongSwan,c=CH?certificateRevocationList\"\n\nThe issued host certificate can be listed with\n\n    pki --print --in moonCert.pem\n\n    subject:  \"C=CH, O=strongSwan, CN=moon.strongswan.org\"\n    issuer:   \"C=CH, O=strongSwan, CN=strongSwan Root CA\"\n    validity:  not before May 19 10:28:19 2017, ok\n               not after  May 19 10:28:19 2022, ok (expires in 1825 days)\n    serial:    01\n    altNames:  moon.strongswan.org\n    flags:     serverAuth\n    CRL URIs:  http://crl.strongswan.org/strongswan.crl\n    authkeyId: 2b:95:14:5b:c3:22:87:de:d1:42:91:88:63:b3:d5:c1:92:7a:0f:5d\n    subjkeyId: 60:9d:de:30:a6:ca:b9:8e:87:bb:33:23:61:19:18:b8:c4:7e:23:8f\n    pubkey:    ED25519 256 bits\n    keyid:     39:1b:b3:c2:34:72:1a:01:08:40:ce:97:75:b8:be:ce:24:30:26:29\n    subjkey:   60:9d:de:30:a6:ca:b9:8e:87:bb:33:23:61:19:18:b8:c4:7e:23:8f\n\nUsually, a Windows, OSX, Android or iOS based VPN client needs its private key,\nits host or user certificate and the CA certificate.  The most convenient way\nto load this information is to put everything into a PKCS#12 container:\n\n    openssl pkcs12 -export -inkey carolKey.pem \\\n                   -in carolCert.pem -name \"carol\" \\\n                   -certfile strongswanCert.pem -caname \"strongSwan Root CA\" \\\n                   -out carolCert.p12\n\nThe strongSwan **pki** tool currently is not able to create PKCS#12 containers\nso that **openssl** must be used.\n\n\n### Generating a CRL ###\n\nAn empty CRL that is signed by the CA can be generated with the command\n\n    pki --signcrl --cacert strongswanCert.pem --cakey strongswanKey.pem \\\n                  --lifetime 30 > strongswan.crl\n\nIf you omit the `--lifetime` option then the default value of 15 days is used.\nCRLs can either be uploaded to a HTTP or LDAP server or put in binary DER or\nBase64 PEM format into the `/etc/swanctl/x509crl` directory from where they are\nloaded into the **charon** daemon with the command\n\n    swanctl --load-creds\n\n\n### Revoking a Certificate ###\n\nA specific end entity certificate is revoked with the command\n\n    pki --signcrl --cacert strongswanCert.pem --cakey strongswanKey.pem \\\n                  --lifetime 30 --lastcrl strongswan.crl \\\n                  --reason key-compromise --cert moonCert.pem > new.crl\n\nInstead of the certificate file (in our example moonCert.pem), the serial number\nof the certificate to be revoked can be indicated using the `--serial`\nparameter. The `pki --signcrl --help` command documents all possible revocation\nreasons but the `--reason` parameter can also be omitted. The content of the new\nCRL file can be listed with the command\n\n    pki --print --type crl --in new.crl\n\n    issuer:   \"C=CH, O=strongSwan, CN=strongSwan Root CA\"\n    update:    this on May 19 11:13:01 2017, ok\n               next on Jun 18 11:13:01 2017, ok (expires in 29 days)\n    serial:    02\n    authKeyId: 2b:95:14:5b:c3:22:87:de:d1:42:91:88:63:b3:d5:c1:92:7a:0f:5d\n    1 revoked certificate:\n      01: May 19 11:13:01 2017, key compromise\n\n\n### Local Caching of CRLs ###\n\nThe `strongswan.conf` option\n\n    charon {\n        cache_crls = yes\n    }\n\nactivates the local caching of CRLs that were dynamically fetched from an\nHTTP or LDAP server.  Cached copies are stored in `/etc/swanctl/x509crl` using a\nunique filename formed from the issuer's *subjectKeyIdentifier* and the\nsuffix `.crl`.\n\nWith the cached copy the CRL is immediately available after startup.  When the\nlocal copy has become stale, an updated CRL is automatically fetched from one of\nthe defined CRL distribution points during the next IKEv2 authentication.\n"
        },
        {
          "name": "README_LEGACY.md",
          "type": "blob",
          "size": 47.0634765625,
          "content": "# Legacy strongSwan Configuration #\n\n## Overview ##\n\nstrongSwan is an OpenSource IPsec-based VPN solution.\n\nThis document is just a short introduction of the **ipsec** command which uses\nthe legacy **stroke** configuration interface. The current **swanctl** command\nusing the modern [**vici**](src/libcharon/plugins/vici/README.md) *Versatile IKE\nConfiguration Interface* is described [**here**](README.md). For more detailed\ninformation consult the man pages and [**our wiki**](https://wiki.strongswan.org).\n\n\n## Quickstart ##\n\nIn the following examples we assume, for reasons of clarity, that **left**\ndesignates the **local** host and that **right** is the **remote** host.\n\nCertificates for users, hosts and gateways are issued by a fictitious\nstrongSwan CA.  How to generate private keys and certificates using OpenSSL or\nthe strongSwan PKI tool will be explained in one of the sections below.\nThe CA certificate `strongswanCert.pem` must be present on all VPN endpoints\nin order to be able to authenticate the peers.\n\n\n### Site-to-site case ###\n\nIn this scenario two security gateways _moon_ and _sun_ will connect the\ntwo subnets _moon-net_ and _sun-net_ with each other through a VPN tunnel\nset up between the two gateways:\n\n    10.1.0.0/16 -- | 192.168.0.1 | === | 192.168.0.2 | -- 10.2.0.0/16\n      moon-net          moon                 sun           sun-net\n\nConfiguration on gateway _moon_:\n\n    /etc/ipsec.d/cacerts/strongswanCert.pem\n\n    /etc/ipsec.d/certs/moonCert.pem\n\n    /etc/ipsec.secrets:\n\n        : RSA moonKey.pem \"<optional passphrase>\"\n\n    /etc/ipsec.conf:\n\n        conn net-net\n            leftsubnet=10.1.0.0/16\n            leftcert=moonCert.pem\n            right=192.168.0.2\n            rightsubnet=10.2.0.0/16\n            rightid=\"C=CH, O=strongSwan, CN=sun.strongswan.org\"\n            auto=start\n\nConfiguration on gateway _sun_:\n\n    /etc/ipsec.d/cacerts/strongswanCert.pem\n\n    /etc/ipsec.d/certs/sunCert.pem\n\n    /etc/ipsec.secrets:\n\n        : RSA sunKey.pem \"<optional passphrase>\"\n\n    /etc/ipsec.conf:\n\n        conn net-net\n            leftsubnet=10.2.0.0/16\n            leftcert=sunCert.pem\n            right=192.168.0.1\n            rightsubnet=10.1.0.0/16\n            rightid=\"C=CH, O=strongSwan, CN=moon.strongswan.org\"\n            auto=start\n\n\n### Host-to-host case ###\n\nThis is a setup between two single hosts which don't have a subnet behind\nthem.  Although IPsec transport mode would be sufficient for host-to-host\nconnections we will use the default IPsec tunnel mode.\n\n    | 192.168.0.1 | === | 192.168.0.2 |\n         moon                sun\n\nConfiguration on host _moon_:\n\n    /etc/ipsec.d/cacerts/strongswanCert.pem\n\n    /etc/ipsec.d/certs/moonCert.pem\n\n    /etc/ipsec.secrets:\n\n        : RSA moonKey.pem \"<optional passphrase>\"\n\n    /etc/ipsec.conf:\n\n        conn host-host\n            leftcert=moonCert.pem\n            right=192.168.0.2\n            rightid=\"C=CH, O=strongSwan, CN=sun.strongswan.org\"\n            auto=start\n\nConfiguration on host _sun_:\n\n    /etc/ipsec.d/cacerts/strongswanCert.pem\n\n    /etc/ipsec.d/certs/sunCert.pem\n\n    /etc/ipsec.secrets:\n\n        : RSA sunKey.pem \"<optional passphrase>\"\n\n    /etc/ipsec.conf:\n\n        conn host-host\n            leftcert=sunCert.pem\n            right=192.168.0.1\n            rightid=\"C=CH, O=strongSwan, CN=moon.strongswan.org\"\n            auto=start\n\n\n### Roadwarrior case ###\n\nThis is a very common case where a strongSwan gateway serves an arbitrary\nnumber of remote VPN clients usually having dynamic IP addresses.\n\n    10.1.0.0/16 -- | 192.168.0.1 | === | x.x.x.x |\n      moon-net          moon              carol\n\nConfiguration on gateway _moon_:\n\n    /etc/ipsec.d/cacerts/strongswanCert.pem\n\n    /etc/ipsec.d/certs/moonCert.pem\n\n    /etc/ipsec.secrets:\n\n        : RSA moonKey.pem \"<optional passphrase>\"\n\n    /etc/ipsec.conf:\n\n        conn rw\n            leftsubnet=10.1.0.0/16\n            leftcert=moonCert.pem\n            right=%any\n            auto=add\n\nConfiguration on roadwarrior _carol_:\n\n    /etc/ipsec.d/cacerts/strongswanCert.pem\n\n    /etc/ipsec.d/certs/carolCert.pem\n\n    /etc/ipsec.secrets:\n\n        : RSA carolKey.pem \"<optional passphrase>\"\n\n    /etc/ipsec.conf:\n\n        conn home\n            leftcert=carolCert.pem\n            right=192.168.0.1\n            rightsubnet=10.1.0.0/16\n            rightid=\"C=CH, O=strongSwan, CN=moon.strongswan.org\"\n            auto=start\n\n\n### Roadwarrior case with virtual IP ###\n\nRoadwarriors usually have dynamic IP addresses assigned by the ISP they are\ncurrently attached to.  In order to simplify the routing from _moon-net_ back\nto the remote access client _carol_ it would be desirable if the roadwarrior had\nan inner IP address chosen from a pre-defined pool.\n\n    10.1.0.0/16 -- | 192.168.0.1 | === | x.x.x.x | -- 10.3.0.1\n      moon-net          moon              carol       virtual IP\n\nIn our example the virtual IP address is chosen from the address pool\n`10.3.0.0/16` which can be configured by adding the parameter\n\n    rightsourceip=10.3.0.0/16\n\nto the gateway's `ipsec.conf`.  To request an IP address from this pool a\nroadwarrior can use IKEv1 mode config or IKEv2 configuration payloads.\nThe configuration for both is the same\n\n    leftsourceip=%config\n\nConfiguration on gateway _moon_:\n\n    /etc/ipsec.d/cacerts/strongswanCert.pem\n\n    /etc/ipsec.d/certs/moonCert.pem\n\n    /etc/ipsec.secrets:\n\n        : RSA moonKey.pem \"<optional passphrase>\"\n\n    /etc/ipsec.conf:\n\n        conn rw\n            leftsubnet=10.1.0.0/16\n            leftcert=moonCert.pem\n            right=%any\n            rightsourceip=10.3.0.0/16\n            auto=add\n\nConfiguration on roadwarrior _carol_:\n\n    /etc/ipsec.d/cacerts/strongswanCert.pem\n\n    /etc/ipsec.d/certs/carolCert.pem\n\n    /etc/ipsec.secrets:\n\n        : RSA carolKey.pem \"<optional passphrase>\"\n\n    /etc/ipsec.conf:\n\n        conn home\n            leftsourceip=%config\n            leftcert=carolCert.pem\n            right=192.168.0.1\n            rightsubnet=10.1.0.0/16\n            rightid=\"C=CH, O=strongSwan, CN=moon.strongswan.org\"\n            auto=start\n\n\n## Generating certificates and CRLs ##\n\nThis section is not a full-blown tutorial on how to use OpenSSL or the\nstrongSwan PKI tool.  It just lists a few points that are relevant if you want\nto generate your own certificates and CRLs for use with strongSwan.\n\n\n### Generating a CA certificate ###\n\nThe OpenSSL statement\n\n    openssl req -x509 -days 1460 -newkey rsa:4096 \\\n                -keyout strongswanKey.pem -out strongswanCert.pem\n\ncreates a 4096 bit RSA private key `strongswanKey.pem` and a self-signed CA\ncertificate `strongswanCert.pem` with a validity of 4 years (1460 days).\n\n    openssl x509 -in cert.pem -noout -text\n\nlists the properties of  a X.509 certificate `cert.pem`. It allows you to verify\nwhether the configuration defaults in `openssl.cnf` have been inserted\ncorrectly.\n\nIf you prefer the CA certificate to be in binary DER format then the following\ncommand achieves this transformation:\n\n    openssl x509 -in strongswanCert.pem -outform DER -out strongswanCert.der\n\nThe statements\n\n    ipsec pki --gen -s 4096 > strongswanKey.der\n    ipsec pki --self --ca --lifetime 1460 --in strongswanKey.der \\\n              --dn \"C=CH, O=strongSwan, CN=strongSwan Root CA\" \\\n              > strongswanCert.der\n    ipsec pki --print --in strongswanCert.der\n\nachieve about the same with the strongSwan PKI tool.  Unlike OpenSSL the tool\nstores keys and certificates in the binary DER format by default.\nThe `--outform` option may be used to write PEM encoded files.\n\nThe directory `/etc/ipsec.d/cacerts` contains all required CA certificates\neither in binary DER or in Base64 PEM format, irrespective of the file suffix\nthe correct format will be determined.\n\n\n### Generating a host or user certificate ###\n\nThe OpenSSL statement\n\n    openssl req -newkey rsa:2048 -keyout hostKey.pem \\\n                -out hostReq.pem\n\ngenerates a 2048 bit RSA private key `hostKey.pem` and a certificate request\n`hostReq.pem` which has to be signed by the CA.\n\nIf you want to add a _subjectAltName_ field to the host certificate you must\nedit the OpenSSL configuration file `openssl.cnf` and add the following line in\nthe `[ usr_cert ]` section:\n\n    subjectAltName=DNS:moon.strongswan.org\n\nif you want to identify the host by its Fully Qualified Domain Name (FQDN), or\n\n    subjectAltName=IP:192.168.0.1\n\nif you want the ID to be of type _IPV4_ADDR_. Of course you could include both\nID types with\n\n    subjectAltName=DNS:moon.strongswan.org,IP:192.168.0.1\n\nbut the use of an IP address for the identification of a host should be\ndiscouraged anyway.\n\nFor user certificates the appropriate ID type is _RFC822_ADDR_ which can be\nspecified as\n\n    subjectAltName=email:carol@strongswan.org\n\nor if the user's e-mail address is part of the subject's distinguished name\n\n    subjectAltName=email:copy\n\nNow the certificate request can be signed by the CA with the command\n\n    openssl ca -in hostReq.pem -days 730 -out hostCert.pem -notext\n\nIf you omit the `-days` option then the `default_days` value (365 days)\nspecified in `openssl.cnf` is used.  The `-notext` option avoids that a human\nreadable listing of the certificate is prepended to the Base64 encoded\ncertificate body.\n\nIf you want to use the dynamic CRL fetching feature described in one of the\nfollowing sections then you may include one or several _crlDistributionPoints_\nin your end certificates.  This can be done in the `[ usr_cert ]` section of the\n`openssl.cnf` configuration file:\n\n    crlDistributionPoints=@crl_dp\n\n    [ crl_dp ]\n\n    URI.1=\"http://crl.strongswan.org/strongswan.crl\"\n    URI.2=\"ldap://ldap.strongswan.org/cn=strongSwan Root CA, o=strongSwan,\n           c=CH?certificateRevocationList\"\n\nIf you have only a single HTTP distribution point then the short form\n\n    crlDistributionPoints=\"URI:http://crl.strongswan.org/strongswan.crl\"\n\nalso works.\n\nAgain the statements\n\n    ipsec pki --gen > moonKey.der\n    ipsec pki --pub --in moonKey.der | ipsec pki --issue --lifetime 730 \\\n              --cacert strongswanCert.der --cakey strongswanKey.der \\\n              --dn \"C=CH, O=strongSwan, CN=moon.strongswan.org\" \\\n              --san moon.strongswan.org --san 192.168.0.1 \\\n              --crl http://crl.strongswan.org/strongswan.crl > moonCert.der\n\ndo something similar using the strongSwan PKI tool.\n\nUsually, a Windows or Mac OS X (or iOS) based VPN client needs its private key,\nits host or user certificate, and the CA certificate.  The most convenient way\nto load this information is to put everything into a PKCS#12 container:\n\n    openssl pkcs12 -export -inkey carolKey.pem \\\n                   -in carolCert.pem -name \"carol\" \\\n                   -certfile strongswanCert.pem -caname \"strongSwan Root CA\" \\\n                   -out carolCert.p12\n\n\n### Generating a CRL ###\n\nAn empty CRL that is signed by the CA can be generated with the command\n\n    openssl ca -gencrl -crldays 15 -out crl.pem\n\nIf you omit the `-crldays` option then the `default_crl_days` value (30 days)\nspecified in `openssl.cnf` is used.\n\nIf you prefer the CRL to be in binary DER format then this conversion\ncan be achieved with\n\n    openssl crl -in crl.pem -outform DER -out cert.crl\n\nThe strongSwan PKI tool provides the `--signcrl` command to sign CRLs.\n\nThe directory `/etc/ipsec.d/crls` contains all CRLs either in binary DER\nor in Base64 PEM format, irrespective of the file suffix the correct format\nwill be determined.\n\n\n### Revoking a certificate ###\n\nA specific host certificate stored in the file `host.pem` is revoked with the\ncommand\n\n    openssl ca -revoke host.pem\n\nNext the CRL file must be updated\n\n    openssl ca -gencrl -crldays 60 -out crl.pem\n\nThe content of the CRL file can be listed with the command\n\n    openssl crl -in crl.pem -noout -text\n\nin the case of a Base64 CRL, or alternatively for a CRL in DER format\n\n    openssl crl -inform DER -in cert.crl -noout -text\n\nAgain the `--signcrl` command of the strongSwan PKI tool may also be used to\ncreate new CRLs containing additional certificates.\n\n\n## Configuring the connections - ipsec.conf ##\n\n### Configuring my side ###\n\nUsually the **local** side is the same for all connections.  Therefore it makes\nsense to put the definitions characterizing the strongSwan security gateway into\nthe `conn %default` section of the configuration file `/etc/ipsec.conf`.  If we\nassume throughout this document that the strongSwan security gateway is **left**\nand the peer is **right** then we can write\n\n    conn %default\n        leftcert=moonCert.pem\n        # load connection definitions automatically\n        auto=add\n\nThe X.509 certificate by which the strongSwan security gateway will authenticate\nitself by sending it in binary form to its peers as part of the Internet Key\nExchange (IKE) is specified in the line\n\n    leftcert=moonCert.pem\n\nThe certificate can either be stored in Base64 PEM-format or in the binary\nDER-format. Irrespective of the file suffix the correct format will be\ndetermined.  Therefore `leftcert=moonCert.der` or `leftcert=moonCert.cer`\nwould also be valid alternatives.\n\nWhen using relative pathnames as in the examples above, the certificate files\nmust be stored in in the directory `/etc/ipsec.d/certs`.  In order to\ndistinguish strongSwan's own certificates from locally stored trusted peer\ncertificates (see below for details), they could also be stored in a\nsubdirectory below `/etc/ipsec.d/certs` as e.g. in\n\n    leftcert=mycerts/moonCert.pem\n\nAbsolute pathnames are also possible as in\n\n    leftcert=/usr/ssl/certs/moonCert.pem\n\nAs an ID for the VPN gateway we recommend the use of a Fully Qualified Domain\nName (FQDN) of the form\n\n    conn rw\n        right=%any\n        leftid=moon.strongswan.org\n\n**Important**: When a FQDN identifier is used it must be explicitly included as\na so called _subjectAltName_ of type _dnsName_ (`DNS:`) in the certificate\nindicated by `leftcert`.  For details on how to generate certificates with\n_subjectAltNames_, please refer to the sections above.\n\nIf you don't want to mess with _subjectAltNames_, you can use the certificate's\nDistinguished Name (DN) instead, which is an identifier of type _DER_ASN1_DN_\nand which can be written e.g. in the LDAP-type format\n\n    conn rw\n        right=%any\n        leftid=\"C=CH, O=strongSwan, CN=moon.strongswan.org\"\n\nSince the subject's DN is part of the certificate, the `leftid` does not have to\nbe declared explicitly. Thus the entry\n\n    conn rw\n        right=%any\n\nautomatically assumes the subject DN of `leftcert` to be the host ID.\n\n\n### Multiple certificates ###\n\nstrongSwan supports multiple local host certificates and corresponding\nRSA private keys:\n\n    conn rw1\n        right=%any\n        rightid=peer1.domain1\n        leftcert=myCert1.pem\n        # leftid is DN of myCert1\n\n    conn rw2\n        right=%any\n        rightid=peer2.domain2\n        leftcert=myCert2.pem\n        # leftid is DN of myCert2\n\nWhen _peer1_ initiates a connection then strongSwan will send _myCert1_ and will\nsign with _myKey1_ defined in `/etc/ipsec.secrets` (see below) whereas\n_myCert2_ and _myKey2_ will be used in a connection setup started from _peer2_.\n\n\n### Configuring the peer side using CA certificates ###\n\nNow we can proceed to define our connections.  In many applications we might\nhave dozens of road warriors connecting to a central strongSwan security\ngateway. The following most simple statement:\n\n    conn rw\n        right=%any\n\ndefines the general roadwarrior case.  The line `right=%any` literally means\nthat any IPsec peer is accepted, regardless of its current IP source address and\nits ID, as long as the peer presents a valid X.509 certificate signed by a CA\nthe strongSwan security gateway puts explicit trust in.  Additionally, the\nsignature during IKE gives proof that the peer is in possession of the private\nkey matching the public key contained in the transmitted certificate.\n\nThe ID by which a peer is identifying itself during IKE can by any of the ID\ntypes _IPV[46]_ADDR_, _FQDN_, _RFC822_ADDR_ or _DER_ASN1_DN_.  If one of the\nfirst three ID types is used, then the accompanying X.509 certificate of the\npeer must contain a matching _subjectAltName_ field of the type _ipAddress_\n(`IP:`), _dnsName_ (`DNS:`) or _rfc822Name_ (`email:`), respectively.  With the\nfourth type, _DER_ASN1_DN_, the identifier must completely match the subject\nfield of the peer's certificate.  One of the two possible representations of a\nDistinguished Name (DN) is the LDAP-type format\n\n    rightid=\"C=CH, O=strongSwan IPsec, CN=sun.strongswan.org\"\n\nAdditional whitespace can be added everywhere as desired since it will be\nautomatically eliminated by the parser.  An exception is the single whitespace\nbetween individual words, like e.g. in `strongSwan IPsec`, which is preserved.\n\nThe Relative Distinguished Names (RDNs) can alternatively be separated by a\nslash `/` instead of a comma `,`\n\n    rightid=\"/C=CH/O=strongSwan IPsec/CN=sun.strongswan.org\"\n\nThis is the representation extracted from the certificate by the OpenSSL\n`-subject` command line option\n\n    openssl x509 -in sunCert.pem -noout -subject\n\nThe following RDNs are supported by strongSwan\n\n| Name               | Description                      |\n|--------------------|----------------------------------|\n| DC                 | Domain Component                 |\n| C                  | Country                          |\n| ST                 | State or province                |\n| L                  | Locality or town                 |\n| O                  | Organization                     |\n| OU                 | Organizational Unit              |\n| CN                 | Common Name                      |\n| ND                 | NameDistinguisher, used with CN  |\n| N                  | Name                             |\n| G                  | Given name                       |\n| S                  | Surname                          |\n| I                  | Initials                         |\n| T                  | Personal title                   |\n| E                  | E-mail                           |\n| Email              | E-mail                           |\n| emailAddress       | E-mail                           |\n| SN                 | Serial number                    |\n| serialNumber       | Serial number                    |\n| D                  | Description                      |\n| ID                 | X.500 Unique Identifier          |\n| UID                | User ID                          |\n| TCGID              | [Siemens] Trust Center Global ID |\n| UN                 | Unstructured Name                |\n| unstructuredName   | Unstructured Name                |\n| UA                 | Unstructured Address             |\n| unstructuredAddress| Unstructured Address             |\n| EN                 | Employee Number                  |\n| employeeNumber     | Employee Number                  |\n| dnQualifier        | DN Qualifier                     |\n\nWith the roadwarrior connection definition listed above, an IPsec SA for\nthe strongSwan security gateway `moon.strongswan.org` itself can be established.\nIf the roadwarriors should be able to reach e.g. the two subnets `10.1.0.0/24`\nand `10.1.3.0/24` behind the security gateway then the following connection\ndefinitions will make this possible\n\n    conn rw1\n        right=%any\n        leftsubnet=10.1.0.0/24\n\n    conn rw3\n        right=%any\n        leftsubnet=10.1.3.0/24\n\nFor IKEv2 connections this can even be simplified by using\n\n    leftsubnet=10.1.0.0/24,10.1.3.0/24\n\nIf not all peers in possession of a X.509 certificate signed by a specific\ncertificate authority shall be given access to the Linux security gateway,\nthen either a subset of them can be barred by listing the serial numbers of\ntheir certificates in a certificate revocation list (CRL) or as an alternative,\naccess can be controlled by explicitly putting a roadwarrior entry for each\neligible peer into `ipsec.conf`:\n\n    conn sun\n        right=%any\n        rightid=sun.strongswan.org\n\n    conn carol\n        right=%any\n        rightid=carol@strongswan.org\n\n    conn dave\n        right=%any\n        rightid=\"C=CH, O=strongSwan, CN=dave@strongswan.org\"\n\nWhen the IP address of a peer is known to be stable, it can be specified as\nwell.  This entry is mandatory when the strongSwan host wants to act as the\ninitiator of an IPsec connection.\n\n    conn sun\n        right=192.168.0.2\n        rightid=sun.strongswan.org\n\n    conn carol\n        right=192.168.0.100\n        rightid=carol@strongswan.org\n\n    conn dave\n        right=192.168.0.200\n        rightid=\"C=CH, O=strongSwan, CN=dave@strongswan.org\"\n\n    conn venus\n        right=192.168.0.50\n\nIn the last example the ID types _FQDN_, _RFC822_ADDR_, _DER_ASN1_DN_ and\n_IPV4_ADDR_, respectively, were used.  Of course all connection definitions\npresented so far have included the lines in the `conn %defaults` section,\ncomprising among other a `leftcert` entry.\n\n\n### Handling Virtual IPs and narrowing ###\n\nOften roadwarriors are behind NAT-boxes, which causes the inner IP source\naddress of an IPsec tunnel to be different from the outer IP source address\nusually assigned dynamically by the ISP.  Whereas the varying outer IP address\ncan be handled by the `right=%any` construct, the inner IP address or subnet\nmust always be declared in a connection definition. Therefore for the three\nroadwarriors _rw1_ to _rw3_ connecting to a strongSwan security gateway the\nfollowing entries are required in `/etc/ipsec.conf`:\n\n    conn rw1\n        right=%any\n        rightsubnet=10.4.0.5/32\n\n    conn rw2\n        right=%any\n        rightsubnet=10.4.0.47/32\n\n    conn rw3\n        right=%any\n        rightsubnet=10.4.0.128/28\n\nBecause the charon daemon uses narrowing (even for IKEv1) these three entries\ncan be reduced to the single connection definition\n\n    conn rw\n        right=%any\n        rightsubnet=10.4.0.0/24\n\nAny host will be accepted (of course after successful authentication based on\nthe peer's X.509 certificate only) if it declares a client subnet lying totally\nwithin the boundaries defined by the subnet definition (in our example\n`10.4.0.0/24`).\n\nThis strongSwan feature can also be helpful with VPN clients getting a\ndynamically assigned inner IP from a DHCP server located on the NAT router box.\n\nSince the private IP address of roadwarriors will often not be known they are\nusually assigned virtual IPs from a predefined pool.  This also makes routing\ntraffic back to the roadwarriors easier. For example, to assign each client an\nIP address from the `10.5.0.0/24` subnet `conn rw` can be defined as\n\n    conn rw\n        right=%any\n        rightsourceip=10.5.0.0/24\n\n\n### Protocol and Port Selectors ###\n\nstrongSwan offers the possibility to restrict the protocol and optionally the\nports in an IPsec SA using the `rightprotoport` and `leftprotoport` parameters.\nFor IKEv2 multiple such restrictions can also be configured in\n`leftsubnet` and `rightsubnet`.\n\nSome examples:\n\n    conn icmp\n        right=%any\n        rightprotoport=icmp\n        leftid=moon.strongswan.org\n        leftprotoport=icmp\n\n    conn http\n        right=%any\n        rightprotoport=6\n        leftid=moon.strongswan.org\n        leftprotoport=6/80\n\n    conn l2tp\n        right=%any\n        # with port wildcard for interoperability with certain L2TP clients\n        rightprotoport=17/%any\n        leftid=moon.strongswan.org\n        leftprotoport=17/1701\n\n    conn dhcp\n        right=%any\n        rightprotoport=udp/bootpc\n        leftid=moon.strongswan.org\n        leftsubnet=0.0.0.0/0  #allows DHCP discovery broadcast\n        leftprotoport=udp/bootps\n\nProtocols and ports can be designated either by their numerical values\nor by their acronyms defined in `/etc/services`.\n\nBased on the protocol and port selectors appropriate policies will be set\nup, so that only the specified payload types will pass through the IPsec\ntunnel.\n\n\n### IPsec policies based on wildcards ###\n\nIn large VPN-based remote access networks there is often a requirement that\naccess to the various parts of an internal network must be granted selectively,\ne.g. depending on the group membership of the remote access user.  strongSwan\nmakes this possible by applying wildcard filtering on the VPN user's\ndistinguished name (_ID_DER_ASN1_DN_).\n\nLet's make a practical example:\n\nAn organization has a sales department (_OU=Sales_) and a research group\n(_OU=Research_).  In the company intranet there are separate subnets for Sales\n(`10.0.0.0/24`) and Research (`10.0.1.0/24`) but both groups share a common web\nserver (`10.0.2.100`).  The VPN clients use Virtual IP addresses that are either\nassigned statically or from a dynamic pool.  The sales and research departments\nuse IP addresses from separate address pools (`10.1.0.0/24`) and\n(`10.1.1.0/24`), respectively.  An X.509 certificate is issued to each employee,\ncontaining in its subject distinguished name the country (_C=CH_), the company\n(_O=ACME_), the group membership (_OU=Sales_ or _OU=Research_) and the common\nname (e.g. _CN=Bart Simpson_).\n\nThe IPsec policy defined above can now be enforced with the following three\nIPsec security associations:\n\n    conn sales\n        right=%any\n        rightid=\"C=CH, O=ACME, OU=Sales, CN=*\"\n        rightsourceip=10.1.0.0/24       # Sales IP range\n        leftsubnet=10.0.0.0/24          # Sales subnet\n\n    conn research\n        right=%any\n        rightid=\"C=CH, O=ACME, OU=Research, CN=*\"\n        rightsourceip=10.1.1.0/24       # Research IP range\n        leftsubnet=10.0.1.0/24          # Research subnet\n\n    conn web\n        right=%any\n        rightid=\"C=CH, O=ACME, OU=*, CN=*\"\n        rightsubnet=10.1.0.0/23         # Remote access IP range\n        leftsubnet=10.0.2.100/32        # Web server\n        rightprotoport=tcp              # TCP protocol only\n        leftprotoport=tcp/http          # TCP port 80 only\n\nThe `*` character is used as a wildcard in relative distinguished names (RDNs).\nIn order to match a wildcard template, the _ID_DER_ASN1_DN_ of a peer must\ncontain the same number of RDNs (selected from the list given earlier) appearing\nin the exact order defined by the template.\n\n    \"C=CH, O=ACME, OU=Research, OU=Special Effects, CN=Bart Simpson\"\n\nmatches the templates\n\n    \"C=CH, O=ACME, OU=Research, OU=*, CN=*\"\n    \"C=CH, O=ACME, OU=*, OU=Special Effects, CN=*\"\n    \"C=CH, O=ACME, OU=*, OU=*, CN=*\"\n\nbut not the template\n\n    \"C=CH, O=ACME, OU=*, CN=*\"\n\nwhich doesn't have the same number of RDNs.\n\n\n### IPsec policies based on CA certificates ###\n\nAs an alternative to the wildcard based IPsec policies described above, access\nto specific client host and subnets can be controlled on the basis of the CA\nthat issued the peer certificate\n\n    conn sales\n        right=%any\n        rightca=\"C=CH, O=ACME, OU=Sales, CN=Sales CA\"\n        rightsourceip=10.1.0.0/24       # Sales IP range\n        leftsubnet=10.0.0.0/24          # Sales subnet\n\n    conn research\n        right=%any\n        rightca=\"C=CH, O=ACME, OU=Research, CN=Research CA\"\n        rightsourceip=10.1.1.0/24       # Research IP range\n        leftsubnet=10.0.1.0/24          # Research subnet\n\n    conn web\n        right=%any\n        rightca=\"C=CH, O=ACME, CN=ACME Root CA\"\n        rightsubnet=10.1.0.0/23         # Remote access IP range\n        leftsubnet=10.0.2.100/32        # Web server\n        rightprotoport=tcp              # TCP protocol only\n        leftprotoport=tcp/http          # TCP port 80 only\n\nIn the example above, the connection _sales_ can be used by peers\npresenting certificates issued by the Sales CA, only.  In the same way,\nthe use of the connection _research_ is restricted to owners of certificates\nissued by the Research CA.  The connection _web_ is open to both \"Sales\" and\n\"Research\" peers because the required _ACME Root CA_ is the issuer of the\nResearch and Sales intermediate CAs.  If no `rightca` parameter is present\nthen any valid certificate issued by one of the trusted CAs in\n`/etc/ipsec.d/cacerts` can be used by the peer.\n\nThe `leftca` parameter usually doesn't have to be set explicitly because\nby default it is set to the issuer field of the certificate loaded via\n`leftcert`.  The statement\n\n    rightca=%same\n\nsets the CA requested from the peer to the CA used by the left side itself\nas e.g. in\n\n    conn sales\n        right=%any\n        rightca=%same\n        leftcert=mySalesCert.pem\n\n\n## Configuring certificates and CRLs ##\n\n\n### Installing the CA certificates ###\n\nX.509 certificates received by strongSwan during the IKE protocol are\nautomatically authenticated by going up the trust chain until a self-signed\nroot CA certificate is reached.  Usually host certificates are directly signed\nby a root CA, but strongSwan also supports multi-level hierarchies with\nintermediate CAs in between.  All CA certificates belonging to a trust chain\nmust be copied in either binary DER or Base64 PEM format into the directory\n\n    /etc/ipsec.d/cacerts/\n\n\n### Installing optional certificate revocation lists (CRLs) ###\n\nBy copying a CA certificate into `/etc/ipsec.d/cacerts/`, automatically all user\nor host certificates issued by this CA are declared valid.  Unfortunately,\nprivate keys might get compromised inadvertently or intentionally, personal\ncertificates of users leaving a company have to be blocked immediately, etc.\nTo this purpose certificate revocation lists (CRLs) have been created.  CRLs\ncontain the serial numbers of all user or host certificates that have been\nrevoked due to various reasons.\n\nAfter successful verification of the X.509 trust chain, strongSwan searches its\nlist of CRLs, either obtained by loading them from the `/etc/ipsec.d/crls/`\ndirectory, or fetching them dynamically from a HTTP or LDAP server, for the\npresence of a CRL issued by the CA that has signed the certificate.\n\nIf the serial number of the certificate is found in the CRL then the public key\ncontained in the certificate is declared invalid and the IKE SA will not be\nestablished.  If no CRL is found or if the deadline defined in the _nextUpdate_\nfield of the CRL has been reached, a warning is issued but the public key will\nnevertheless be accepted (this behavior can be changed, see below).  CRLs must\nbe stored either in binary DER or Base64 PEM format in the `crls` directory.\n\n\n### Dynamic update of certificates and CRLs ###\n\nstrongSwan reads certificates and CRLs from their respective files during system\nstartup and keeps them in memory.  X.509 certificates have a finite life span\ndefined by their validity field.  Therefore it must be possible to replace CA or\nOCSP certificates kept in system memory without disturbing established IKE SAs.\nCertificate revocation lists should also be updated in the regular intervals\nindicated by the _nextUpdate_ field in the CRL body.  The following interactive\ncommands allow the manual replacement of the various files:\n\n\n| Command                 | Action                                          |\n|-------------------------|-------------------------------------------------|\n| ipsec rereadaacerts     | reload all files in `/etc/ipsec.d/aacerts/`     |\n| ipsec rereadacerts      | reload all files in `/etc/ipsec.d/acerts/`      |\n| ipsec rereadcacerts     | reload all files in `/etc/ipsec.d/cacerts/`     |\n| ipsec rereadcrls        | reload all files in `/etc/ipsec.d/crls/`        |\n| ipsec rereadocspcerts   | reload all files in `/etc/ipsec.d/ocspcerts/`   |\n| ipsec rereadsecrets     | reload `/etc/ipsec.secrets` and configured keys |\n| ipsec rereadall         | all the commands above combined                 |\n| ipsec purgecerts        | purge all cached certificates                   |\n| ipsec purgecrl          | purge all cached CRLs                           |\n| ipsec purgeocsp         | purge the OCSP cache                            |\n\n\nCRLs can also be automatically fetched from an HTTP or LDAP server by using\nthe CRL distribution points contained in X.509 certificates.\n\n\n### Local caching of CRLs ###\n\nThe `ipsec.conf` option\n\n    config setup\n        cachecrls=yes\n\nactivates the local caching of CRLs that were dynamically fetched from an\nHTTP or LDAP server.  Cached copies are stored in `/etc/ipsec.d/crls` using a\nunique filename formed from the issuer's _subjectKeyIdentifier_ and the\nsuffix `.crl`.\n\nWith the cached copy the CRL is immediately available after startup.  When the\nlocal copy is about to expire it is automatically replaced with an updated CRL\nfetched from one of the defined CRL distribution points.\n\n\n### Online Certificate Status Protocol (OCSP) ###\n\nThe _Online Certificate Status Protocol_ is defined by RFC 2560.  It can be\nused to query an OCSP server about the current status of an X.509 certificate\nand is often used as a more dynamic alternative to a static Certificate\nRevocation List (CRL).  Both the OCSP request sent by the client and the OCSP\nresponse messages returned by the server are transported via a standard\nTCP/HTTP connection.\n\nIn the simplest OCSP setup, a default URI under which the OCSP server for a\ngiven CA can be accessed is defined in `ipsec.conf`:\n\n    ca strongswan\n        cacert=strongswanCert.pem\n        ocspuri=http://ocsp.strongswan.org:8880\n        auto=add\n\nThe HTTP port can be freely chosen.\n\nOpenSSL implements an OCSP server that can be used in conjunction with an\nOpenSSL-based Public Key Infrastructure.  The OCSP server is started with the\nfollowing command:\n\n    openssl ocsp -index index.txt -CA strongswanCert.pem -port 8880 \\\n                 -rkey ocspKey.pem -rsigner ocspCert.pem \\\n                 -resp_no_certs -nmin 60 -text\n\nThe command consists of the parameters\n\n    -index   index.txt is a copy of the OpenSSL index file containing the list\n             of all issued certificates.  The certificate status in index.txt\n             is designated either by V for valid or R for revoked.  If a new\n             certificate is added or if a certificate is revoked using the\n             openssl ca command, the OCSP server must be restarted in order for\n             the changes in index.txt to take effect.\n\n    -CA      the CA certificate\n\n    -port    the HTTP port the OCSP server is listening on.\n\n    -rkey    the private key used to sign the OCSP response.  The use of the\n             sensitive CA private key is not recommended since this could\n             jeopardize the security of your production PKI if the OCSP\n             server is hacked.  It is much better to generate a special\n             RSA private key just for OCSP signing use instead.\n\n    -rsigner the certificate of the OCSP server containing a public key which\n             matches the private key defined by -rkey and which can be used by\n             the client to check the trustworthiness of the signed OCSP\n             response.\n\n    -resp_no_certs  With this option the OCSP signer certificate defined by\n                    -rsigner is not included in the OCSP response.\n\n    -nmin    the validity interval of an OCSP response given in minutes.\n\n    -text    this option activates a verbose logging output, showing the\n             contents of both the received OCSP request and sent OCSP response.\n\n\nThe OCSP signer certificate can either be put into the default directory\n\n    /etc/ipsec.d/ocspcerts\n\nor alternatively strongSwan can receive it as part of the OCSP response from the\nremote OCSP server.  In order to verify that the server is indeed authorized by\na CA to deal out certificate status information an extended key usage attribute\nmust be included in the OCSP server certificate.  Just insert the parameter\n\n    extendedKeyUsage=OCSPSigner\n\nin the `[ usr_cert ]` section of your `openssl.cnf` configuration file before\nthe CA signs the OCSP server certificate.\n\nFor a given CA the corresponding _ca_ section in `ipsec.conf` (see below) allows\nto define the URI of a single OCSP server.  As an alternative an OCSP URI can be\nembedded into each host and user certificate by putting the line\n\n    authorityInfoAccess = OCSP;URI:http://ocsp.strongswan.org:8880\n\ninto the `[ usr_cert ]` section of your `openssl.cnf` configuration file.\nIf an OCSP _authorityInfoAccess_ extension is present in a certificate then this\nrecord overrides the default URI defined by the ca section.\n\n\n### CRL Policy ###\n\nBy default strongSwan is quite tolerant concerning the handling of CRLs. It is\nnot mandatory for a CRL to be present in `/etc/ipsec.d/crls` and if the\nexpiration date defined by the _nextUpdate_ field of a CRL has been reached just\na warning is issued but a peer certificate will always be accepted if it has not\nbeen revoked.\n\nIf you want to enforce a stricter CRL policy then you can do this by setting\nthe `strictcrlpolicy` option.  This is done in the `config setup` section\nof the `ipsec.conf` file:\n\n    config setup\n        strictcrlpolicy=yes\n        ...\n\nA certificate received from a peer will not be accepted if no corresponding\nCRL or OCSP response is available.  And if an IKE SA re-negotiation takes\nplace after the _nextUpdate_ deadline has been reached, the peer certificate\nwill be declared invalid and the cached public key will be deleted, causing\nthe connection in question to fail.  Therefore if you are going to use the\n`strictcrlpolicy=yes` option, make sure that the CRLs will always be updated\nin time.  Otherwise a total standstill might ensue.\n\nAs mentioned earlier the default setting is `strictcrlpolicy=no`.\n\n\n### Configuring the peer side using locally stored certificates ###\n\nIf you don't want to use trust chains based on CA certificates as proposed above\nyou can alternatively import trusted peer certificates directly.\n\nWith the `conn %default` section defined above and the use of the `rightcert`\nkeyword for the peer side, the connection definitions presented earlier can\nalternatively be written as\n\n    conn sun\n        right=%any\n        rightid=sun.strongswan.org\n        rightcert=sunCert.cer\n\n    conn carol\n        right=192.168.0.100\n        rightcert=carolCert.der\n\nIf the peer certificates are loaded locally then there is no need to send any\ncertificates to the other end via the IKE protocol.  Especially if self-signed\ncertificates are used which wouldn't be accepted anyway by the other side.\nIn these cases it is recommended to add\n\n    leftsendcert=never\n\nto the connection definition(s) in order to avoid the sending of the host's\nown certificate.  The default value is\n\n    leftsendcert=ifasked\n\nwhich causes certificates to only be sent if a certificate request is received.\nIf a peer does not send a certificate request then the setting\n\n    leftsendcert=always\n\nmay be used to force sending of the certificate to the other peer.\n\nIf a peer certificate contains a _subjectAltName_ extension, then an alternative\n`rightid` type can be used, as the example `conn sun` shows.  If no `rightid`\nentry is present then the subject distinguished name contained in the\ncertificate is taken as the ID.\n\nUsing the same rules concerning pathnames that apply to the gateway's own\ncertificates, the following two definitions are also valid for trusted peer\ncertificates:\n\n    rightcert=peercerts/carolCert.der\n\nor\n\n    rightcert=/usr/ssl/certs/carolCert.der\n\n\n## Configuring the private keys - ipsec.secrets ##\n\n\n### Loading private key files ###\n\nstrongSwan is able to load RSA (or ECDSA) private keys in the PKCS#1 or PKCS#8\nfile formats, or from PKCS#12 containers. The key files can optionally be\nsecured with a passphrase.\n\nRSA private key files are declared in `/etc/ipsec.secrets` using the syntax\n\n    : RSA <my keyfile> \"<optional passphrase>\"\n\nThe key file can be either in Base64 PEM-format or binary DER-format.  The\nactual coding is detected automatically.  The example\n\n    : RSA moonKey.pem\n\nuses a pathname relative to the default directory\n\n    /etc/ipsec.d/private\n\nAs an alternative an absolute pathname can be given as in\n\n    : RSA /usr/ssl/private/moonKey.pem\n\nIn both cases make sure that the key files are root readable only.\n\nOften a private key must be transported from the Certification Authority\nwhere it was generated to the target security gateway where it is going\nto be used.  In order to protect the key it can be encrypted with a symmetric\ncipher using a transport key derived from a cryptographically strong\npassphrase.\n\nOnce on the security gateway the private key can either be permanently\nunlocked so that it can be used by the IKE daemon without having to know a\npassphrase\n\n    openssl rsa -in moonKey.pem -out moonKey.pem\n\nor as an option the key file can remain secured.  In this case the passphrase\nunlocking the private key must be added after the pathname in\n`/etc/ipsec.secrets`\n\n    : RSA moonKey.pem \"This is my passphrase\"\n\nSome CAs distribute private keys embedded in a PKCS#12 file. strongSwan can read\nprivate keys directly from such a file (end-entity and CA certificates are\nalso extracted):\n\n    : P12 moonCert.p12 \"This is my passphrase\"\n\n\n### Entering passphrases interactively ###\n\nOn a VPN gateway you would want to put the passphrase protecting the private\nkey file right into `/etc/ipsec.secrets` as described in the previous section,\nso that the gateway can be booted in unattended mode.  The risk of keeping\nunencrypted secrets on a server can be minimized by putting the box into a\nlocked room.  As long as no one can get root access on the machine the private\nkeys are safe.\n\nOn a mobile laptop computer the situation is quite different.  The computer can\nbe stolen or the user may leave it unattended so that unauthorized persons\ncan get access to it.  In these cases it would be preferable not to keep any\npassphrases openly in `/etc/ipsec.secrets` but to prompt for them interactively\ninstead.  This is easily done by defining\n\n    : RSA moonKey.pem %prompt\n\nSince strongSwan is usually started during the boot process, usually no\ninteractive console windows is available which can be used to prompt for\nthe passphrase.  This must be initiated by the user by typing\n\n    ipsec secrets\n\nwhich actually is an alias for the existing command\n\n    ipsec rereadsecrets\n\nand which causes a passphrase prompt to appear.  To abort entering a passphrase\nenter just a carriage return.\n\n\n## Configuring CA properties - ipsec.conf ##\n\nBesides the definition of IPsec connections the `ipsec.conf` file can also\nbe used to configure a few properties of the certification authorities\nneeded to establish the X.509 trust chains.  The following example shows\nsome of the parameters that are currently available:\n\n    ca strongswan\n        cacert=strongswanCert.pem\n        ocspuri=http://ocsp.strongswan.org:8880\n        crluri=http://crl.strongswan.org/strongswan.crl'\n        crluri2=\"ldap://ldap.strongswan.org/O=strongSwan, C=CH?certificateRevocationList\"\n        auto=add\n\nIn a similar way as `conn` sections are used for connection definitions, an\narbitrary number of optional `ca` sections define the basic properties of CAs.\n\nEach ca section is named with a unique label\n\n    ca strongswan\n\nThe only mandatory parameter is\n\n    cacert=strongswanCert.pem\n\nwhich points to the CA certificate which usually resides in the default\ndirectory `/etc/ipsec.d/cacerts/` but could also be retrieved via an absolute\npath name.\n\nThe OCSP URI\n\n    ocspuri=http://ocsp.strongswan.org:8880\n\nallows to define an individual OCSP server per CA.  Also up to two additional\nCRL distribution points (CDPs) can be defined\n\n    crluri=http://crl.strongswan.org/strongswan.crl'\n    crluri2=\"ldap://ldap.strongswan.org/O=strongSwan, C=CH?certificateRevocationList\"\n\nwhich are added to any CDPs already present in the received certificates\nthemselves.\n\nWith the `auto=add` statement the `ca` definition is automatically loaded during\nstartup.  Setting `auto=ignore` will ignore the `ca` section.\n\nAny parameters which appear in several ca definitions can be put in\na common `ca %default` section\n\n    ca %default\n        crluri=http://crl.strongswan.org/strongswan.crl'\n\n\n## Monitoring functions ##\n\nstrongSwan offers the following monitoring functions:\n\n| Command             | Action                                            |\n|---------------------|---------------------------------------------------|\n| ipsec listaacerts   | list all Authorization Authority certificates loaded from `/etc/ipsec.d/aacerts/` |\n| ipsec listacerts    | list all X.509 attribute certificates loaded from `/etc/ipsec.d/acerts/` |\n| ipsec listalgs      | list cryptographic algorithms for IKE             |\n| ipsec listcacerts   | list all CA certificates loaded from `/etc/ipsec.d/cacerts/` or received via IKE |\n| ipsec listcainfos   | list all properties defined in `ca` sections in `ipsec.conf` |\n| ipsec listcerts     | list all certificates loaded via `leftcert` and `rightcert` |\n| ipsec listcounters  | list global or connection specific counter values |\n| ipsec listcrls      | list all CLRs loaded from `/etc/ipsec.d/crls/`    |\n| ipsec listocsp      | list contents of the OCSP response cache          |\n| ipsec listocspcerts | list all OCSP signer certificates loaded from `/etc/ipsec.d/ocspcerts/` or received in OCSP responses |\n| ipsec listplugins   | list all loaded plugin features                   |\n| ipsec listpubkeys   | list all raw public keys e.g. loaded via `leftsigkey` and `rightsigkey` |\n| ipsec listall       | all the above commands combined                   |\n| ipsec status        | list concise status information on established connections |\n| ipsec statusall     | list detailed status information on connections |\n\n\n## Firewall support functions ##\n\n\n### Environment variables in the updown script ###\n\nstrongSwan makes the following environment variables available\nin the _updown_ script indicated by the `leftupdown` option:\n\n| Variable              | Example                   | Comment         |\n|-----------------------|---------------------------|-----------------|\n| $PLUTO_PEER_ID        | carol@strongswan.org      | RFC822_ADDR (1) |\n| $PLUTO_PEER_PROTOCOL  | 17                        | udp         (2) |\n| $PLUTO_PEER_PORT      | 68                        | bootpc      (3) |\n| $PLUTO_MY_ID          | moon.strongswan.org       | FQDN        (1) |\n| $PLUTO_MY_PROTOCOL    | 17                        | udp         (2) |\n| $PLUTO_MY_PORT        | 67                        | bootps      (3) |\n\n(1) $PLUTO_PEER_ID/$PLUTO_MY_ID contain the IDs of the two ends\n    of an established connection. In our examples these\n    correspond to the strings defined by `rightid` and `leftid`,\n    respectively.\n\n(2) $PLUTO_PEER_PROTOCOL/$PLUTO_MY_PROTOCOL contain the protocol\n    defined by the `rightprotoport` and `leftprotoport` options,\n    respectively. Both variables contain the same protocol value.\n    The variables take on the value '0' if no protocol has been defined.\n\n(3) $PLUTO_PEER_PORT/$PLUTO_MY_PORT contain the ports defined by\n    the `rightprotoport` and `leftprotoport` options, respectively.\n    The variables take on the value '0' if no port has been defined.\n\nThere are several more, refer to the provided default script for a documentation\nof them.\n\n\n### Automatic insertion and deletion of iptables firewall rules ###\n\nThe default `_updown` script automatically inserts and deletes dynamic\n`iptables` firewall rules upon the establishment or teardown, respectively, of\nan IPsec security association.  This feature is activated with the line\n\n    leftfirewall=yes\n\nIf you define a `leftsubnet` with a netmask larger than `/32` then the\nautomatically inserted _FORWARD_ `iptables` rules will not allow clients to\naccess the internal IP address of the gateway even if it is part of that subnet\ndefinition.  If you want additional _INPUT_ and _OUTPUT_ `iptables` rules to be\ninserted, so that the host itself can be accessed then add the following line:\n\n    lefthostaccess=yes\n\nThe `_updown` script also features a logging facility which will register the\ncreation (+) and the expiration (-) of each successfully established VPN\nconnection in a special syslog file in the following concise and easily\nreadable format:\n\n    Jul 19 18:58:38 moon vpn:\n        + carol.strongswan.org  192.168.0.100 -- 192.168.0.1 == 10.1.0.0/16\n    Jul 19 22:15:17 moon vpn:\n        - carol.strongswan.org  192.168.0.100 -- 192.168.0.1 == 10.1.0.0/16\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.8134765625,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nPlease report any security-relevant flaw to security@strongswan.org. Whenever\npossible encrypt your email with the [PGP key](https://download.strongswan.org/STRONGSWAN-SECURITY-PGP-KEY)\nwith key ID 0x1EB41ECF25A536E4.\n\n## Severity Classification\n\n* **High Severity Flaw**\n\n    * Allows remote access to the VPN with improper, missing, or invalid\n      credentials\n    * Allows local escalation of privileges on the server\n    * Plain text traffic on the secure interface\n    * Key generation and crypto flaws that reduce the difficulty in decrypting\n      secure traffic\n\n* **Medium Severity Flaw**\n\n    * Remotely crashing the strongSwan daemon, which would allow DoS attacks on\n      the VPN service\n\n* **Low Severity Flaw**\n\n    * All other minor issues not directly compromising security or availability\n      of the strongSwan daemon or the host the daemon is running on\n\n## Action Taken\n\nFor **high** and **medium** severity vulnerabilities we are generally going to\napply for a [CVE Identifier](https://cve.mitre.org/cve/identifiers/) first.\nNext we notify all known strongSwan customers and the major Linux\ndistributions, giving them a time of about three weeks to patch their software\nrelease. On a predetermined date, we officially issue an advisory and a patch\nfor the vulnerability and usually a new stable strongSwan release containing\nthe security fix.\n\nMinor vulnerabilities of **low** severity usually will be fixed immediately\nin our repository and released with the next stable release.\n\n## List of Reported and Fixed Security Flaws\n\nA list of all reported strongSwan high and medium security flaws may be\nfound in the [CVE database](https://nvd.nist.gov/vuln/search/results?query=strongswan).\n\nThe corresponding security patches are published on https://download.strongswan.org/security/.\n"
        },
        {
          "name": "TODO",
          "type": "blob",
          "size": 0.1943359375,
          "content": "                 ----------------------\n                  strongSwan - TODO\n                 ----------------------\n\nPlease refer to our project on GitHub (https://github.com/strongswan/strongswan).\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 0.0244140625,
          "content": "#!/bin/sh\n\nautoreconf -i\n"
        },
        {
          "name": "conf",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 87.51171875,
          "content": "#\n# Copyright (C) 2007-2022 Tobias Brunner\n# Copyright (C) 2006-2022 Andreas Steffen\n# Copyright (C) 2006-2014 Martin Willi\n#\n# Copyright (C) secunet Security Networks AG\n#\n# This program is free software; you can redistribute it and/or modify it\n# under the terms of the GNU General Public License as published by the\n# Free Software Foundation; either version 2 of the License, or (at your\n# option) any later version.  See <http://www.fsf.org/copyleft/gpl.txt>.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n# for more details.\n#\n\n# ============================\n#  initialize & set some vars\n# ============================\n\nAC_INIT([strongSwan],[6.0.0])\nAM_INIT_AUTOMAKE(m4_esyscmd([\n\techo tar-ustar\n\techo subdir-objects\n\tcase `automake --version | head -n 1` in\n\t\t*\" 1.9\"*);;\n\t\t*\" 1.10\"*);;\n\t\t*\" 1.11\"*);;\n\t\t# don't use parallel test harness in 1.12 and up\n\t\t*) echo serial-tests;;\n\tesac\n]))\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES])\nAC_CONFIG_MACRO_DIR([m4/config])\nAC_CONFIG_HEADERS([config.h])\nAC_DEFINE([CONFIG_H_INCLUDED], [], [defined if config.h included])\nAC_DISABLE_STATIC\nPKG_PROG_PKG_CONFIG\n\nm4_include(m4/macros/split-package-version.m4)\nSPLIT_PACKAGE_VERSION\n\n# =================================\n#  check --enable-xxx & --with-xxx\n# =================================\n\nm4_include(m4/macros/with.m4)\n\nARG_WITH_SUBST([random-device],      [/dev/random], [set the device to read real random data from])\nARG_WITH_SUBST([urandom-device],     [/dev/urandom], [set the device to read pseudo random data from])\nARG_WITH_SUBST([strongswan-conf],    [${sysconfdir}/strongswan.conf], [set the strongswan.conf file location])\nARG_WITH_SUBST([resolv-conf],        [${sysconfdir}/resolv.conf], [set the file to use in DNS handler plugin])\nARG_WITH_SUBST([piddir],             [/var/run], [set path for PID and UNIX socket files])\nARG_WITH_SUBST([ipsecdir],           [${libexecdir%/}/ipsec], [set installation path for ipsec tools])\nARG_WITH_SUBST([ipseclibdir],        [${libdir%/}/ipsec], [set installation path for ipsec libraries])\nARG_WITH_SUBST([plugindir],          [${ipseclibdir%/}/plugins], [set the installation path of plugins])\nARG_WITH_SUBST([imcvdir],            [${ipseclibdir%/}/imcvs], [set the installation path of IMC and IMV dynamic libraries])\nARG_WITH_SUBST([nm-ca-dir],          [/usr/share/ca-certificates], [directory the NM backend uses to look up trusted root certificates])\nARG_WITH_SUBST([swanctldir],         [${sysconfdir}/swanctl], [base directory for swanctl configuration files and credentials])\nARG_WITH_SUBST([linux-headers],      [\\${top_srcdir}/src/include], [set directory of linux header files to use])\nARG_WITH_SUBST([routing-table],      [220], [set routing table to use for IPsec routes])\nARG_WITH_SUBST([routing-table-prio], [220], [set priority for IPsec routing table])\nARG_WITH_SUBST([ipsec-script],       [ipsec], [change the name of the ipsec script])\nARG_WITH_SUBST([fips-mode],          [0], [set openssl FIPS mode: disabled(0), enabled(1), Suite B enabled(2)])\nARG_WITH_SUBST([libfuzzer],          [], [-fsanitize=fuzzer or path to libFuzzer.a, a local driver is used if not specified])\nARG_WITH_SET([capabilities],         [no], [set capability dropping library. Currently supported values are \"libcap\" and \"native\"])\nARG_WITH_SET([mpz_powm_sec],         [yes], [use the more side-channel resistant mpz_powm_sec in libgmp, if available])\nARG_WITH_SET([dev-headers],          [no], [install strongSwan development headers to directory.])\nARG_WITH_SET([printf-hooks],         [auto], [force the use of a specific printf hook implementation (auto, builtin, glibc, vstr).])\nARG_WITH_SET([rubygemdir],           [\"gem environment gemdir\"], [path to install ruby gems to])\n\nif test -n \"$PKG_CONFIG\"; then\n\tsystemdsystemunitdir_default=$($PKG_CONFIG --variable=systemdsystemunitdir systemd)\nfi\nARG_WITH_SET([systemdsystemunitdir], [$systemdsystemunitdir_default], [directory for systemd service files])\nAC_SUBST(systemdsystemunitdir)\n\nAC_ARG_WITH(\n\t[dbuspolicydir],\n\tAS_HELP_STRING([--with-dbuspolicydir=arg],[directory for D-Bus policies (default: ${dbusdatadir|datarootdir}/dbus-1/system.d)]),\n\t[dbuspolicydir=\"$withval\"],\n\t[PKG_CHECK_VAR([dbusdatadir], [dbus-1], [datadir], , [dbusdatadir=\"${datarootdir}\"])\n\t dbuspolicydir=\"${dbusdatadir}/dbus-1/system.d\"]\n)\nAC_SUBST(dbuspolicydir)\n\nAC_ARG_WITH(\n\t[user],\n\tAS_HELP_STRING([--with-user=user],[change user of the daemons to \"user\" after startup (default is \"root\").]),\n\t[AC_DEFINE_UNQUOTED([IPSEC_USER], \"$withval\", [username to run daemon with])\n\t AC_SUBST(ipsecuser, \"$withval\")],\n\t[AC_SUBST(ipsecuser, \"root\")]\n)\n\nAC_ARG_WITH(\n\t[group],\n\tAS_HELP_STRING([--with-group=group],[change group of the daemons to \"group\" after startup (default is \"root\").]),\n\t[AC_DEFINE_UNQUOTED(IPSEC_GROUP, \"$withval\", [groupname to run daemon with])\n\t AC_SUBST(ipsecgroup, \"$withval\")],\n\t[AC_SUBST(ipsecgroup, \"root\")]\n)\n\nAC_ARG_WITH(\n\t[charon-udp-port],\n\tAS_HELP_STRING([--with-charon-udp-port=port],[UDP port used by charon locally (default 500). Set to 0 to allocate randomly.]),\n\t[AC_DEFINE_UNQUOTED(CHARON_UDP_PORT, [$withval], [UDP port used by charon locally])\n\t AC_SUBST(charon_udp_port, [$withval])],\n\t[AC_SUBST(charon_udp_port, 500)]\n)\n\nAC_ARG_WITH(\n\t[charon-natt-port],\n\tAS_HELP_STRING([--with-charon-natt-port=port],[UDP port used by charon locally in case a NAT is detected (must be different from charon-udp-port, default 4500). Set to 0 to allocate randomly.]),\n\t[AC_DEFINE_UNQUOTED(CHARON_NATT_PORT, [$withval], [UDP post used by charon locally in case a NAT is detected])\n\t AC_SUBST(charon_natt_port, [$withval])],\n\t[AC_SUBST(charon_natt_port, 4500)]\n)\n\nAC_MSG_CHECKING([configured UDP ports ($charon_udp_port, $charon_natt_port)])\nif test x$charon_udp_port != x0 -a x$charon_udp_port = x$charon_natt_port; then\n\tAC_MSG_ERROR(the ports have to be different)\nelse\n\tAC_MSG_RESULT(ok)\nfi\n\n# convert script name to uppercase\nAC_SUBST(ipsec_script_upper, [`echo -n \"$ipsec_script\" | tr a-z A-Z`])\n\nm4_include(m4/macros/enable-disable.m4)\n\n# crypto plugins\nARG_ENABL_SET([aes],            [enable AES software implementation plugin.])\nARG_ENABL_SET([af-alg],         [enable AF_ALG crypto interface to Linux Crypto API.])\nARG_ENABL_SET([blowfish],       [enable Blowfish software implementation plugin.])\nARG_ENABL_SET([botan],          [enables the Botan crypto plugin.])\nARG_ENABL_SET([ccm],            [enables the CCM AEAD wrapper crypto plugin.])\nARG_ENABL_SET([chapoly],        [enables the ChaCha20/Poly1305 AEAD plugin.])\nARG_DISBL_SET([cmac],           [disable CMAC crypto implementation plugin.])\nARG_ENABL_SET([ctr],            [enables the Counter Mode wrapper crypto plugin.])\nARG_ENABL_SET([des],            [enable DES/3DES software implementation plugin.])\nARG_DISBL_SET([drbg],           [disable the NIST Deterministic Random Bit Generator plugin.])\nARG_ENABL_SET([fips-prf],       [enable FIPS PRF software implementation plugin.])\nARG_ENABL_SET([gcm],            [enable the GCM AEAD wrapper crypto plugin.])\nARG_ENABL_SET([gcrypt],         [enables the libgcrypt plugin.])\nARG_ENABL_SET([gmp],            [enable GNU MP (libgmp) based crypto implementation plugin.])\nARG_ENABL_SET([curve25519],     [enable Curve25519 Diffie-Hellman plugin.])\nARG_ENABL_SET([hmac],           [enable HMAC crypto implementation plugin.])\nARG_DISBL_SET([kdf],            [disable KDF (prf+) implementation plugin.])\nARG_ENABL_SET([md4],            [enable MD4 software implementation plugin.])\nARG_ENABL_SET([md5],            [enable MD5 software implementation plugin.])\nARG_ENABL_SET([mgf1],           [enable the MGF1 software implementation plugin.])\nARG_ENABL_SET([ml],             [enable Module-Lattice-based crypto (ML-KEM) plugin.])\nARG_DISBL_SET([nonce],          [disable nonce generation plugin.])\nARG_DISBL_SET([openssl],        [disable the OpenSSL crypto plugin.])\nARG_ENABL_SET([wolfssl],        [enables the wolfSSL crypto plugin.])\nARG_ENABL_SET([padlock],        [enables VIA Padlock crypto plugin.])\nARG_DISBL_SET([random],         [disable RNG implementation on top of /dev/(u)random.])\nARG_ENABL_SET([rc2],            [enable RC2 software implementation plugin.])\nARG_ENABL_SET([rdrand],         [enable Intel RDRAND random generator plugin.])\nARG_ENABL_SET([aesni],          [enable Intel AES-NI crypto plugin.])\nARG_ENABL_SET([sha1],           [enable SHA1 software implementation plugin.])\nARG_ENABL_SET([sha2],           [enable SHA256/SHA384/SHA512 software implementation plugin.])\nARG_ENABL_SET([sha3],           [enable SHA3_224/SHA3_256/SHA3_384/SHA3_512 software implementation plugin.])\nARG_DISBL_SET([xcbc],           [disable xcbc crypto implementation plugin.])\n# encoding/decoding plugins\nARG_DISBL_SET([dnskey],         [disable DNS RR key decoding plugin.])\nARG_DISBL_SET([pem],            [disable PEM decoding plugin.])\nARG_DISBL_SET([pgp],            [disable PGP key decoding plugin.])\nARG_DISBL_SET([pkcs1],          [disable PKCS1 key decoding plugin.])\nARG_DISBL_SET([pkcs7],          [disable PKCS7 container support plugin.])\nARG_DISBL_SET([pkcs8],          [disable PKCS8 private key decoding plugin.])\nARG_ENABL_SET([pkcs12],         [enable PKCS12 container support plugin.])\nARG_DISBL_SET([pubkey],         [disable RAW public key support plugin.])\nARG_DISBL_SET([sshkey],         [disable SSH key decoding plugin.])\nARG_DISBL_SET([x509],           [disable X509 certificate implementation plugin.])\nARG_ENABL_SET([openxpki],       [enable OCSP responder accessing OpenXPKI certificate database.])\n# fetcher/resolver plugins\nARG_ENABL_SET([curl],           [enable CURL fetcher plugin to fetch files via libcurl. Requires libcurl.])\nARG_ENABL_SET([files],          [enable simple file:// URI fetcher.])\nARG_ENABL_SET([ldap],           [enable LDAP fetching plugin to fetch files via libldap. Requires openLDAP.])\nARG_ENABL_SET([soup],           [enable soup fetcher plugin to fetch from HTTP via libsoup. Requires libsoup.])\nARG_ENABL_SET([unbound],        [enable UNBOUND resolver plugin to perform DNS queries via libunbound. Requires libldns and libunbound.])\nARG_ENABL_SET([winhttp],        [enable WinHTTP based HTTP/HTTPS fetching plugin.])\n# database plugins\nARG_ENABL_SET([mysql],          [enable MySQL database support. Requires libmysqlclient_r.])\nARG_ENABL_SET([sqlite],         [enable SQLite database support. Requires libsqlite3.])\n# authentication/credential plugins\nARG_ENABL_SET([addrblock],      [enables RFC 3779 address block constraint support.])\nARG_ENABL_SET([acert],          [enable X509 attribute certificate checking plugin.])\nARG_ENABL_SET([agent],          [enables the ssh-agent signing plugin.])\nARG_DISBL_SET([constraints],    [disable advanced X509 constraint checking plugin.])\nARG_ENABL_SET([coupling],       [enable IKEv2 plugin to couple peer certificates permanently to authentication.])\nARG_ENABL_SET([dnscert],        [enable DNSCERT authentication plugin.])\nARG_ENABL_SET([eap-sim],        [enable SIM authentication module for EAP.])\nARG_ENABL_SET([eap-sim-file],   [enable EAP-SIM backend based on a triplet file.])\nARG_ENABL_SET([eap-sim-pcsc],   [enable EAP-SIM backend based on a smartcard reader. Requires libpcsclite.])\nARG_ENABL_SET([eap-aka],        [enable EAP AKA authentication module.])\nARG_ENABL_SET([eap-aka-3gpp],   [enable EAP AKA backend implementing 3GPP MILENAGE algorithms in software.])\nARG_ENABL_SET([eap-aka-3gpp2],  [enable EAP AKA backend implementing 3GPP2 algorithms in software. Requires libgmp.])\nARG_ENABL_SET([eap-simaka-sql], [enable EAP-SIM/AKA backend based on a triplet/quintuplet SQL database.])\nARG_ENABL_SET([eap-simaka-pseudonym], [enable EAP-SIM/AKA pseudonym storage plugin.])\nARG_ENABL_SET([eap-simaka-reauth],    [enable EAP-SIM/AKA reauthentication data storage plugin.])\nARG_ENABL_SET([eap-identity],   [enable EAP module providing EAP-Identity helper.])\nARG_ENABL_SET([eap-md5],        [enable EAP MD5 (CHAP) authentication module.])\nARG_ENABL_SET([eap-gtc],        [enable EAP GTC authentication module.])\nARG_ENABL_SET([eap-mschapv2],   [enable EAP MS-CHAPv2 authentication module.])\nARG_ENABL_SET([eap-tls],        [enable EAP TLS authentication module.])\nARG_ENABL_SET([eap-ttls],       [enable EAP TTLS authentication module.])\nARG_ENABL_SET([eap-peap],       [enable EAP PEAP authentication module.])\nARG_ENABL_SET([eap-tnc],        [enable EAP TNC trusted network connect module.])\nARG_ENABL_SET([eap-dynamic],    [enable dynamic EAP proxy module.])\nARG_ENABL_SET([eap-radius],     [enable RADIUS proxy authentication module.])\nARG_ENABL_SET([ext-auth],       [enable plugin calling an external authorization script.])\nARG_ENABL_SET([ipseckey],       [enable IPSECKEY authentication plugin.])\nARG_ENABL_SET([keychain],       [enables OS X Keychain Services credential set.])\nARG_ENABL_SET([pkcs11],         [enables the PKCS11 token support plugin.])\nARG_ENABL_SET([tpm],            [enables the TPM plugin to access private keys and certificates bound to a TPM 2.0.])\nARG_DISBL_SET([revocation],     [disable X509 CRL/OCSP revocation check plugin.])\nARG_ENABL_SET([whitelist],      [enable peer identity whitelisting plugin.])\nARG_DISBL_SET([xauth-generic],  [disable generic XAuth backend.])\nARG_ENABL_SET([xauth-eap],      [enable XAuth backend using EAP methods to verify passwords.])\nARG_ENABL_SET([xauth-pam],      [enable XAuth backend using PAM to verify passwords.])\nARG_ENABL_SET([xauth-noauth],   [enable XAuth pseudo-backend that does not actually verify or even request any credentials.])\n# kernel interfaces / sockets\nARG_DISBL_SET([kernel-netlink], [disable the netlink kernel interface.])\nARG_ENABL_SET([kernel-pfkey],   [enable the PF_KEY kernel interface.])\nARG_ENABL_SET([kernel-pfroute], [enable the PF_ROUTE kernel interface.])\nARG_ENABL_SET([kernel-iph],     [enable the Windows IP Helper based networking backend.])\nARG_ENABL_SET([kernel-libipsec],[enable the libipsec kernel interface.])\nARG_ENABL_SET([kernel-wfp],     [enable the Windows Filtering Platform IPsec backend.])\nARG_DISBL_SET([socket-default], [disable default socket implementation for charon.])\nARG_ENABL_SET([socket-dynamic], [enable dynamic socket implementation for charon])\nARG_ENABL_SET([socket-win],     [enable Winsock2 based socket implementation for charon])\n# configuration/control plugins\nARG_ENABL_SET([stroke],         [enable the stroke configuration backend.])\nARG_ENABL_SET([smp],            [enable SMP configuration and control interface. Requires libxml.])\nARG_ENABL_SET([sql],            [enable SQL database configuration backend.])\nARG_ENABL_SET([uci],            [enable OpenWRT UCI configuration plugin.])\nARG_DISBL_SET([vici],           [disable strongSwan IKE generic IPC interface plugin.])\n# attribute provider/consumer plugins\nARG_ENABL_SET([android-dns],    [enable Android specific DNS handler.])\nARG_DISBL_SET([attr],           [disable strongswan.conf based configuration attribute plugin.])\nARG_ENABL_SET([attr-sql],       [enable SQL based configuration attribute plugin.])\nARG_ENABL_SET([dhcp],           [enable DHCP based attribute provider plugin.])\nARG_ENABL_SET([osx-attr],       [enable OS X SystemConfiguration attribute handler.])\nARG_ENABL_SET([p-cscf],         [enable plugin to request P-CSCF server addresses from an ePDG.])\nARG_DISBL_SET([resolve],        [disable resolve DNS handler plugin.])\nARG_ENABL_SET([unity],          [enables Cisco Unity extension plugin.])\n# TNC modules/plugins\nARG_ENABL_SET([imc-test],       [enable IMC test module.])\nARG_ENABL_SET([imv-test],       [enable IMV test module.])\nARG_ENABL_SET([imc-scanner],    [enable IMC port scanner module.])\nARG_ENABL_SET([imv-scanner],    [enable IMV port scanner module.])\nARG_ENABL_SET([imc-os],         [enable IMC operating system module.])\nARG_ENABL_SET([imv-os],         [enable IMV operating system module.])\nARG_ENABL_SET([imc-attestation],[enable IMC attestation module.])\nARG_ENABL_SET([imv-attestation],[enable IMV attestation module.])\nARG_ENABL_SET([imc-swima],      [enable IMC swima module.])\nARG_ENABL_SET([imv-swima],      [enable IMV swima module.])\nARG_ENABL_SET([imc-hcd],        [enable IMC hcd module.])\nARG_ENABL_SET([imv-hcd],        [enable IMV hcd module.])\nARG_ENABL_SET([tnc-ifmap],      [enable TNC IF-MAP module. Requires libxml])\nARG_ENABL_SET([tnc-imc],        [enable TNC IMC module.])\nARG_ENABL_SET([tnc-imv],        [enable TNC IMV module.])\nARG_ENABL_SET([tnc-pdp],        [enable TNC policy decision point module.])\nARG_ENABL_SET([tnccs-11],       [enable TNCCS 1.1 protocol module. Requires libxml])\nARG_ENABL_SET([tnccs-20],       [enable TNCCS 2.0 protocol module.])\nARG_ENABL_SET([tnccs-dynamic],  [enable dynamic TNCCS protocol discovery module.])\n# misc plugins\nARG_ENABL_SET([android-log],    [enable Android specific logger plugin.])\nARG_ENABL_SET([bypass-lan],     [enable plugin to install bypass policies for local subnets.])\nARG_ENABL_SET([certexpire],     [enable CSV export of expiration dates of used certificates.])\nARG_ENABL_SET([connmark],       [enable connmark plugin using conntrack based marks to select return path SA.])\nARG_ENABL_SET([counters],       [enable plugin that collects several performance counters.])\nARG_ENABL_SET([forecast],       [enable forecast plugin forwarding broadcast/multicast messages.])\nARG_ENABL_SET([duplicheck],     [advanced duplicate checking plugin using liveness checks.])\nARG_ENABL_SET([error-notify],   [enable error notification plugin.])\nARG_ENABL_SET([farp],           [enable ARP faking plugin that responds to ARP requests to peers virtual IP])\nARG_ENABL_SET([ha],             [enable high availability cluster plugin.])\nARG_ENABL_SET([led],            [enable plugin to control LEDs on IKEv2 activity using the Linux kernel LED subsystem.])\nARG_ENABL_SET([load-tester],    [enable load testing plugin for IKEv2 daemon.])\nARG_ENABL_SET([lookip],         [enable fast virtual IP lookup and notification plugin.])\nARG_ENABL_SET([radattr],        [enable plugin to inject and process custom RADIUS attributes as IKEv2 client.])\nARG_ENABL_SET([save-keys],      [enable development/debugging plugin that saves IKE and ESP keys in Wireshark format.])\nARG_ENABL_SET([systime-fix],    [enable plugin to handle cert lifetimes with invalid system time gracefully.])\nARG_ENABL_SET([test-vectors],   [enable plugin providing crypto test vectors.])\nARG_DISBL_SET([updown],         [disable updown firewall script plugin.])\n# programs/components\nARG_ENABL_SET([aikgen],         [enable AIK generator for TPM 1.2.])\nARG_DISBL_SET([charon],         [disable the IKEv1/IKEv2 keying daemon charon.])\nARG_ENABL_SET([cmd],            [enable the command line IKE client charon-cmd.])\nARG_ENABL_SET([conftest],       [enforce Suite B conformance test framework.])\nARG_ENABL_SET([fast],           [enable libfast (FastCGI Application Server w/ templates.])\nARG_ENABL_SET([fuzzing],        [enable fuzzing scripts (found in directory fuzz).])\nARG_ENABL_SET([libipsec],       [enable user space IPsec implementation.])\nARG_ENABL_SET([manager],        [enable web management console (proof of concept).])\nARG_ENABL_SET([medcli],         [enable mediation client configuration database plugin.])\nARG_ENABL_SET([medsrv],         [enable mediation server web frontend and daemon plugin.])\nARG_ENABL_SET([nm],             [enable NetworkManager backend.])\nARG_DISBL_SET([pki],            [disable pki certificate utility.])\nARG_DISBL_SET([scripts],        [disable additional utilities (found in directory scripts).])\nARG_ENABL_SET([svc],            [enable charon Windows service.])\nARG_ENABL_SET([systemd],        [enable systemd specific IKE daemon charon-systemd.])\nARG_DISBL_SET([swanctl],        [disable swanctl configuration and control tool.])\nARG_ENABL_SET([tkm],            [enable Trusted Key Manager support.])\nARG_ENABL_SET([cert-enroll],    [enable automatic certificate enrollment via EST or SCEP.])\n# optional features\nARG_ENABL_SET([bfd-backtraces], [use binutils libbfd to resolve backtraces for memory leaks and segfaults.])\nARG_ENABL_SET([dbghelp-backtraces],[use dbghlp.dll on Windows to create and print backtraces for memory leaks and segfaults.])\nARG_DISBL_SET([ikev1],          [disable IKEv1 protocol support in charon.])\nARG_DISBL_SET([ikev2],          [disable IKEv2 protocol support in charon.])\nARG_ENABL_SET([integrity-test], [enable integrity testing of libstrongswan and plugins.])\nARG_DISBL_SET([load-warning],   [disable the charon plugin load option warning in starter.])\nARG_ENABL_SET([mediation],      [enable IKEv2 Mediation Extension.])\nARG_ENABL_SET([unwind-backtraces],[use libunwind to create backtraces for memory leaks and segfaults.])\nARG_ENABL_SET([ruby-gems],      [enable build of provided ruby gems.])\nARG_ENABL_SET([ruby-gems-install],[enable installation of provided ruby gems.])\nARG_ENABL_SET([python-wheels],  [enable build of provided python wheels.])\nARG_ENABL_SET([python-eggs],    [legacy alias for --enable-python-wheels.])\nARG_ENABL_SET([perl-cpan],      [enable build of provided perl CPAN module.])\nARG_ENABL_SET([perl-cpan-install],[enable installation of provided CPAN module.])\nARG_ENABL_SET([selinux],        [enable SELinux support for labeled IPsec.])\nARG_ENABL_SET([tss-trousers],   [enable the use of the TrouSerS Trusted Software Stack])\nARG_ENABL_SET([tss-tss2],       [enable the use of the TSS 2.0 Trusted Software Stack])\nARG_ENABL_SET([cert-enroll-timer],[enable installation of cert-enroll as a systemd timer.])\n\n# compile options\nARG_ENABL_SET([asan],           [enable build with AddressSanitizer (ASan).])\nARG_ENABL_SET([coverage],       [enable lcov coverage report generation.])\nARG_ENABL_SET([git-version],    [use output of 'git describe' as version information in executables.])\nARG_ENABL_SET([leak-detective], [enable malloc hooks to find memory leaks.])\nARG_ENABL_SET([lock-profiler],  [enable lock/mutex profiling code.])\nARG_ENABL_SET([log-thread-ids], [use thread ID, if available, instead of an incremented value starting from 1, to identify threads.])\nARG_ENABL_SET([monolithic],     [build monolithic version of libstrongswan that includes all enabled plugins. Similarly, the plugins of charon are assembled in libcharon.])\nARG_ENABL_SET([warnings],       [enable extended compiler warnings and -Werror (auto-enabled when building from the repository).])\n\n# ===================================\n#  option to disable default options\n# ===================================\n\nARG_DISBL_SET([defaults],       [disable all default plugins (they can be enabled with their respective --enable options)])\n\nif test x$defaults = xfalse; then\n\tfor option in $enabled_by_default; do\n\t\teval test x\\${${option}_given} = xtrue && continue\n\t\teval $option=false\n\tdone\nfi\n\n# ==============================\n#  option to enable all options\n# ==============================\n\nARG_ENABL_SET([all],            [enable all plugins and features (they can be disabled with their respective --disable options). Mainly for testing.])\n\nif test x$all_given = xtrue; then\n\tfor option in $disabled_by_default; do\n\t\teval test x\\${${option}_given} = xtrue && continue\n\t\teval $option=true\n\tdone\nfi\n\n# ===========================\n#  set up compiler and flags\n# ===========================\n\nif test -z \"$CFLAGS\"; then\n\tCFLAGS=\"-g -O2\"\nfi\nAC_SUBST(PLUGIN_CFLAGS)\nAC_PROG_CC\nAM_PROG_CC_C_O\n\nAC_LIB_PREFIX\nAC_C_BIGENDIAN\n\n# =========================\n#  check required programs\n# =========================\n\nLT_INIT\nAC_PROG_INSTALL\nAC_PROG_EGREP\nAC_PROG_AWK\nAC_PROG_LEX(noyywrap)\nAC_PROG_YACC\nAM_PATH_PYTHON(,,[:])\nAC_PATH_PROG([PERL], [perl], [], [$PATH:/bin:/usr/bin:/usr/local/bin])\nAC_ARG_VAR([PERL], [the Perl interpreter])\nAC_PATH_PROG([GPERF], [gperf], [], [$PATH:/bin:/usr/bin:/usr/local/bin])\nAC_ARG_VAR([GPERF], [the GNU gperf program])\n\n# because gperf is not needed by end-users we only abort if generated files don't exist\nAC_MSG_CHECKING([gperf len type])\nif test -x \"$GPERF\"; then\n\tGPERF_OUTPUT=\"`echo foo | ${GPERF}`\"\n\tAC_COMPILE_IFELSE(\n\t\t[AC_LANG_PROGRAM(\n\t\t\t[[#include <string.h>\n\t\t\t  const char *in_word_set(const char*, size_t); $GPERF_OUTPUT]])],\n\t\t[GPERF_LEN_TYPE=size_t],\n\t\t[AC_COMPILE_IFELSE(\n\t\t\t[AC_LANG_PROGRAM(\n\t\t\t\t[[#include <string.h>\n\t\t\t\t  const char *in_word_set(const char*, unsigned); $GPERF_OUTPUT]])],\n\t\t\t[GPERF_LEN_TYPE=unsigned],\n\t\t\t[AC_MSG_ERROR([unable to determine gperf len type])]\n\t\t)]\n\t)\n\tAC_SUBST(GPERF_LEN_TYPE)\n\tAC_MSG_RESULT([$GPERF_LEN_TYPE])\nelse\n\tAC_MSG_RESULT([not found])\n\tGPERF_TEST_FILE=\"$srcdir/src/libstrongswan/crypto/proposal/proposal_keywords_static.c\"\n\tif test ! -f \"$GPERF_TEST_FILE\"; then\n\t\tAC_MSG_ERROR([GNU gperf required to generate e.g. $GPERF_TEST_FILE])\n\tfi\nfi\n\n# ========================\n#  dependency calculation\n# ========================\n\nif test x$xauth_generic_given = xfalse -a x$ikev1 = xfalse; then\n\txauth_generic=false;\nfi\n\nif test x$kernel_libipsec = xtrue; then\n\tlibipsec=true;\nfi\n\nif test x$eap_aka_3gpp2 = xtrue; then\n\tgmp=true;\nfi\n\nif test x$eap_aka = xtrue; then\n\tfips_prf=true;\n\tsimaka=true;\nfi\n\nif test x$eap_sim = xtrue; then\n\tfips_prf=true;\n\tsimaka=true;\nfi\n\nif test x$eap_radius = xtrue -o x$radattr = xtrue -o x$tnc_pdp = xtrue; then\n\tradius=true;\nfi\n\nif test x$tnc_imc = xtrue -o x$tnc_imv = xtrue -o x$tnccs_11 = xtrue -o x$tnccs_20 = xtrue -o x$tnccs_dynamic = xtrue -o x$eap_tnc = xtrue; then\n\ttnc_tnccs=true;\nfi\n\nif test x$eap_tls = xtrue -o x$eap_ttls = xtrue -o x$eap_peap = xtrue -o x$tnc_tnccs = xtrue -o x$pki = xtrue; then\n\ttls=true;\nfi\n\nif test x$imc_test = xtrue -o x$imv_test = xtrue -o x$imc_scanner = xtrue -o x$imv_scanner = xtrue -o x$imc_os = xtrue -o x$imv_os = xtrue -o x$imc_attestation = xtrue -o x$imv_attestation = xtrue -o x$imc_swima = xtrue -o x$imv_swima = xtrue -o x$imc_hcd = xtrue -o x$imv_hcd = xtrue; then\n\timcv=true;\nfi\n\nif test x$fips_prf = xtrue; then\n\tif test x$openssl = xfalse -a x$wolfssl = xfalse; then\n\t\tsha1=true;\n\tfi\nfi\n\nif test x$pkcs12 = xtrue; then\n\trc2=true;\nfi\n\nif test x$swanctl = xtrue; then\n\tvici=true\nfi\n\nif test x$smp = xtrue -o x$tnccs_11 = xtrue -o x$tnc_ifmap = xtrue; then\n\txml=true\nfi\n\nif test x$manager = xtrue; then\n\tfast=true\nfi\n\nif test x$medsrv = xtrue; then\n\tmediation=true\n\tfast=true\nfi\n\nif test x$medcli = xtrue; then\n\tmediation=true\nfi\n\nif test x$ruby_gems_install = xtrue; then\n\truby_gems=true\nfi\n\nif test x$python_eggs = xtrue; then\n\tpython_wheels=true\nfi\n\nif test x$perl_cpan_install = xtrue; then\n\tperl_cpan=true\nfi\n\nif test x$aikgen = xtrue; then\n\ttss_trousers=true\nfi\n\nif test x$tpm = xtrue; then\n\ttss_tss2=true\nfi\n\nif test x$gmp = xtrue; then\n\tmgf1=true\nfi\n\nif test x$stroke = xtrue -o x$vici = xtrue; then\n\tcounters=true\nfi\n\nif test x$cert_enroll = xtrue; then\n\tpki=true\nfi\n\nif test x$kdf = xfalse; then\n\tif test x$aesni = xtrue -o x$cmac = xtrue -o x$xcbc = xtrue; then\n\t\tAC_MSG_WARN(m4_normalize([\n\t\t\tkdf plugin is required for possible use of PRF_AES128_XCBC/CMAC\n\t\t\tby one of these plugins: aesni, cmac, xcbc]))\n\t\tkdf=true\n\telif test x$botan = xfalse -a x$openssl = xfalse -a x$wolfssl = xfalse; then\n\t\tAC_MSG_WARN(m4_normalize([\n\t\t\tkdf plugin is required because none of the following plugins is\n\t\t\tenabled: botan, openssl, wolfssl]))\n\t\tkdf=true\n\tfi\nfi\n\n# enable warnings and -Werror by default when building from the repo (check with\n# -e as .git is a file in worktrees)\nif test x$warnings_given = xfalse -a -e \"$srcdir\"/.git; then\n\twarnings=true\nfi\n\n# ===========================================\n#  check required libraries and header files\n# ===========================================\n\nAC_HEADER_STDBOOL\nAC_FUNC_ALLOCA\nAC_FUNC_STRERROR_R\n\n#  libraries needed on some platforms but not on others\n# ------------------------------------------------------\nsaved_LIBS=$LIBS\n\n# FreeBSD and Mac OS X have dlopen integrated in libc, Linux needs libdl\nLIBS=\"\"\nAC_SEARCH_LIBS(dlopen, dl, [DLLIB=$LIBS])\nAC_SUBST(DLLIB)\n\n# glibc's backtrace() can be replicated on FreeBSD with libexecinfo\nLIBS=\"\"\nAC_SEARCH_LIBS(backtrace, execinfo, [BTLIB=$LIBS])\nAC_CHECK_FUNCS(backtrace)\nAC_SUBST(BTLIB)\n\n# OpenSolaris needs libsocket and libnsl for socket()\nLIBS=\"\"\nAC_SEARCH_LIBS(socket, socket, [SOCKLIB=$LIBS],\n\t[AC_CHECK_LIB(nsl, socket, [SOCKLIB=\"-lsocket -lnsl\"], [], [-lsocket])]\n)\nAC_SUBST(SOCKLIB)\n\n# Android has pthread_* functions in bionic (libc), others need libpthread\nLIBS=$DLLIB\nAC_SEARCH_LIBS(pthread_create, pthread, [PTHREADLIB=$LIBS])\nAC_SUBST(PTHREADLIB)\n\n# Some architectures require explicit -latomic for __atomic_* operations\n# AC_SEARCH_LIBS() does not work when checking built-ins due to conflicting types\nLIBS=\"\"\nAC_MSG_CHECKING(for library containing __atomic_and_fetch)\nAC_LINK_IFELSE(\n\t[AC_LANG_PROGRAM([[]], [[int x; __atomic_and_fetch(&x, 1, __ATOMIC_RELAXED);]])],\n\t[AC_MSG_RESULT([none required])],\n\t[LIBS=\"-latomic\";\n\t AC_LINK_IFELSE(\n\t\t[AC_LANG_PROGRAM([[]], [[int x; __atomic_and_fetch(&x, 1, __ATOMIC_RELAXED);]])],\n\t\t[AC_MSG_RESULT([-latomic]); ATOMICLIB=$LIBS],\n\t\t[AC_MSG_RESULT([no])])\n\t]\n)\nAC_SUBST(ATOMICLIB)\n\nLIBS=$saved_LIBS\n# ------------------------------------------------------\n\nAC_MSG_CHECKING(for dladdr)\nAC_COMPILE_IFELSE(\n\t[AC_LANG_PROGRAM(\n\t\t[[#define _GNU_SOURCE\n\t\t  #include <dlfcn.h>]],\n\t\t[[Dl_info* info = 0;\n\t\t  dladdr(0, info);]])],\n\t[AC_MSG_RESULT([yes]); AC_DEFINE([HAVE_DLADDR], [], [have dladdr()])],\n\t[AC_MSG_RESULT([no])]\n)\n\n# check if pthread_condattr_setclock(CLOCK_MONOTONIC) is supported\nsaved_LIBS=$LIBS\nLIBS=$PTHREADLIB\nAC_MSG_CHECKING([for pthread_condattr_setclock(CLOCK_MONOTONIC)])\nAC_RUN_IFELSE(\n\t[AC_LANG_SOURCE(\n\t\t[[#include <pthread.h>\n\t\t  int main() { pthread_condattr_t attr;\n\t\t\tpthread_condattr_init(&attr);\n\t\t\treturn pthread_condattr_setclock(&attr, CLOCK_MONOTONIC);}]])],\n\t[AC_MSG_RESULT([yes]);\n\t AC_DEFINE([HAVE_CONDATTR_CLOCK_MONOTONIC], [],\n\t\t\t   [pthread_condattr_setclock supports CLOCK_MONOTONIC])],\n\t[AC_MSG_RESULT([no])],\n\t# Check existence of pthread_condattr_setclock if cross-compiling\n\t[AC_MSG_RESULT([unknown]);\n\t AC_CHECK_FUNCS(pthread_condattr_setclock,\n\t\t[AC_DEFINE([HAVE_CONDATTR_CLOCK_MONOTONIC], [],\n\t\t\t\t   [have pthread_condattr_setclock()])]\n\t)]\n)\n# check if we actually are able to configure attributes on cond vars\nAC_CHECK_FUNCS(pthread_condattr_init)\n# instead of pthread_condattr_setclock Android has this function\nAC_CHECK_FUNCS(pthread_cond_timedwait_monotonic)\n# check if we can cancel threads\nAC_CHECK_FUNCS(pthread_cancel)\n# check if native rwlocks are available\nAC_CHECK_FUNCS(pthread_rwlock_init)\n# check if pthread spinlocks are available\nAC_CHECK_FUNCS(pthread_spin_init)\n# check if we have POSIX semaphore functions, including timed-wait\nAC_CHECK_FUNCS(sem_timedwait)\nLIBS=$saved_LIBS\n\nAC_CHECK_FUNC(\n\t[gettid],\n\t[AC_DEFINE([HAVE_GETTID], [], [have gettid()])],\n\t[AC_MSG_CHECKING([for SYS_gettid])\n\t AC_COMPILE_IFELSE(\n\t\t[AC_LANG_PROGRAM(\n\t\t\t[[#define _GNU_SOURCE\n\t\t\t  #include <unistd.h>\n\t\t\t  #include <sys/syscall.h>]],\n\t\t\t[[int main() {\n\t\t\t  return syscall(SYS_gettid);}]])],\n\t\t[AC_MSG_RESULT([yes]);\n\t\t AC_DEFINE([HAVE_GETTID], [], [have gettid()])\n\t\t AC_DEFINE([HAVE_SYS_GETTID], [], [have syscall(SYS_gettid)])],\n\t\t[AC_MSG_RESULT([no])]\n\t)]\n)\n\nAC_CHECK_FUNC(\n\t[qsort_r],\n\t[\n\t\tAC_DEFINE([HAVE_QSORT_R], [], [have qsort_r()])\n\t\t# set -Werror so that we get an error for \"argument ... has\n\t\t# incompatible pointer type\" warnings\n\t\tsave_CFLAGS=\"$CFLAGS\"\n\t\tCFLAGS=\"$CFLAGS -Werror -Wno-unused-parameter\"\n\t\tAC_MSG_CHECKING([for GNU-style qsort_r])\n\t\tAC_COMPILE_IFELSE(\n\t\t\t[AC_LANG_PROGRAM(\n\t\t\t\t[[#define _GNU_SOURCE\n\t\t\t\t  #include <stdlib.h>\n\t\t\t\t  int cmp (const void *a, const void *b, void *x) { return 0; }]],\n\t\t\t\t[[int arr[] = { 0, 1 };\n\t\t\t\t  qsort_r(arr, 2, sizeof(int), cmp, arr);]])],\n\t\t[AC_MSG_RESULT([yes]);\n\t\t AC_DEFINE([HAVE_QSORT_R_GNU], [], [have GNU-style qsort_r()])],\n\t\t[\n\t\t\tAC_MSG_RESULT([no]);\n\t\t\tAC_MSG_CHECKING([for BSD-style qsort_r])\n\t\t\tAC_COMPILE_IFELSE(\n\t\t\t\t[AC_LANG_PROGRAM(\n\t\t\t\t\t[[#include <stdlib.h>\n\t\t\t\t\t  int cmp (void *x, const void *a, const void *b) { return 0; }]],\n\t\t\t\t\t[[int arr[] = { 0, 1 };\n\t\t\t\t\t  qsort_r(arr, 2, sizeof(int), arr, cmp);]])],\n\t\t\t[AC_MSG_RESULT([yes]);\n\t\t\t AC_DEFINE([HAVE_QSORT_R_BSD], [], [have BSD-style qsort_r()])],\n\t\t\t[AC_MSG_RESULT([no]);\n\t\t\t AC_MSG_FAILURE([qsort_r has unknown semantics])])\n\t\t])\n\t\tCFLAGS=\"$save_CFLAGS\"\n\t]\n)\n\nAC_CHECK_FUNCS(prctl mallinfo mallinfo2 getpass closefrom getpwnam_r getgrnam_r getpwuid_r chown)\nAC_CHECK_FUNCS(fmemopen funopen mmap memrchr setlinebuf strptime dirfd sigwaitinfo explicit_bzero)\n\nAC_CHECK_FUNC([syslog], [\n\tAC_DEFINE([HAVE_SYSLOG], [], [have syslog(3) and friends])\n\tsyslog=true\n])\nAM_CONDITIONAL(USE_SYSLOG, [test \"x$syslog\" = xtrue])\n\nAC_CHECK_HEADERS(sys/sockio.h sys/syscall.h sys/param.h glob.h net/if_tun.h)\nAC_CHECK_HEADERS(net/pfkeyv2.h netipsec/ipsec.h netinet6/ipsec.h linux/udp.h)\nAC_CHECK_HEADERS([netinet/ip6.h linux/fib_rules.h], [], [],\n[\n\t#include <sys/types.h>\n\t#include <netinet/in.h>\n])\nAC_CHECK_HEADERS([linux/vm_sockets.h], [have_vm_sockets=true], [],\n[\n\t#include <sys/socket.h>\n])\nAM_CONDITIONAL(USE_VM_SOCKETS, [test \"x$have_vm_sockets\" = xtrue])\n\nAC_CHECK_MEMBERS([struct sockaddr.sa_len], [], [],\n[\n\t#include <sys/types.h>\n\t#include <sys/socket.h>\n])\n\nAC_CHECK_MEMBERS([struct sadb_x_policy.sadb_x_policy_priority], [], [],\n[\n\t#include <sys/types.h>\n\t#ifdef HAVE_NET_PFKEYV2_H\n\t#include <net/pfkeyv2.h>\n\t#else\n\t#include <stdint.h>\n\t#include <linux/pfkeyv2.h>\n\t#endif\n])\n\nAC_MSG_CHECKING([for in6addr_any])\nAC_COMPILE_IFELSE(\n\t[AC_LANG_PROGRAM(\n\t\t[[#include <sys/types.h>\n\t\t  #include <sys/socket.h>\n\t\t  #include <netinet/in.h>]],\n\t\t[[struct in6_addr in6 __attribute__((unused));\n\t\t  in6 = in6addr_any;]])],\n\t[AC_MSG_RESULT([yes]);\n\t AC_DEFINE([HAVE_IN6ADDR_ANY], [], [have struct in6_addr in6addr_any])],\n\t[AC_MSG_RESULT([no])]\n)\n\nAC_MSG_CHECKING([for in6_pktinfo])\nAC_COMPILE_IFELSE(\n\t[AC_LANG_PROGRAM(\n\t\t[[#define _GNU_SOURCE\n\t\t  #include <sys/types.h>\n\t\t  #include <sys/socket.h>\n\t\t  #include <netinet/in.h>]],\n\t\t[[struct in6_pktinfo pi = {};\n\t\t  if (pi.ipi6_ifindex)\n\t\t  {\n\t\t    return 0;\n\t\t  }]])],\n\t[AC_MSG_RESULT([yes]);\n\t AC_DEFINE([HAVE_IN6_PKTINFO], [], [have struct in6_pktinfo.ipi6_ifindex])],\n\t[AC_MSG_RESULT([no])]\n)\n\nAC_MSG_CHECKING([for RTM_IFANNOUNCE])\nAC_COMPILE_IFELSE(\n\t[AC_LANG_PROGRAM(\n\t\t[[#include <sys/socket.h>\n\t\t  #include <net/if.h>\n\t\t  #include <net/route.h>]],\n\t\t[[return RTM_IFANNOUNCE;]])],\n\t[AC_MSG_RESULT([yes]);\n\t AC_DEFINE([HAVE_RTM_IFANNOUNCE], [], [have PF_ROUTE RTM_IFANNOUNCE defined])],\n\t[AC_MSG_RESULT([no])]\n)\n\nAC_MSG_CHECKING([for IPSEC_MODE_BEET])\nAC_COMPILE_IFELSE(\n\t[AC_LANG_PROGRAM(\n\t\t[[#include <sys/types.h>\n\t\t  #ifdef HAVE_NETIPSEC_IPSEC_H\n\t\t  #include <netipsec/ipsec.h>\n\t\t  #elif defined(HAVE_NETINET6_IPSEC_H)\n\t\t  #include <netinet6/ipsec.h>\n\t\t  #else\n\t\t  #include <stdint.h>\n\t\t  #include <linux/ipsec.h>\n\t\t  #endif]],\n\t\t[[int mode = IPSEC_MODE_BEET;\n\t\t  return mode;]])],\n\t[AC_MSG_RESULT([yes]);\n\t AC_DEFINE([HAVE_IPSEC_MODE_BEET], [], [have IPSEC_MODE_BEET defined])],\n\t[AC_MSG_RESULT([no])]\n)\n\nAC_MSG_CHECKING([for IPSEC_DIR_FWD])\nAC_COMPILE_IFELSE(\n\t[AC_LANG_PROGRAM(\n\t\t[[#include <sys/types.h>\n\t\t  #ifdef HAVE_NETIPSEC_IPSEC_H\n\t\t  #include <netipsec/ipsec.h>\n\t\t  #elif defined(HAVE_NETINET6_IPSEC_H)\n\t\t  #include <netinet6/ipsec.h>\n\t\t  #else\n\t\t  #include <stdint.h>\n\t\t  #include <linux/ipsec.h>\n\t\t  #endif]],\n\t\t[[int dir = IPSEC_DIR_FWD;\n\t\t  return dir;]])],\n\t[AC_MSG_RESULT([yes]);\n\t AC_DEFINE([HAVE_IPSEC_DIR_FWD], [], [have IPSEC_DIR_FWD defined])],\n\t[AC_MSG_RESULT([no])]\n)\n\nAC_MSG_CHECKING([for RTA_TABLE])\nAC_COMPILE_IFELSE(\n\t[AC_LANG_PROGRAM(\n\t\t[[#include <sys/socket.h>\n\t\t  #include <linux/netlink.h>\n\t\t  #include <linux/rtnetlink.h>]],\n\t\t[[int rta_type = RTA_TABLE;\n\t\t  return rta_type;]])],\n\t[AC_MSG_RESULT([yes]);\n\t AC_DEFINE([HAVE_RTA_TABLE], [], [have netlink RTA_TABLE defined])],\n\t[AC_MSG_RESULT([no])]\n)\n\nAC_MSG_CHECKING([for __int128])\nAC_COMPILE_IFELSE(\n\t[AC_LANG_PROGRAM(\n\t\t[[#include <sys/types.h>]],\n\t\t[[__int128 x = 0;\n\t\t  return x;]])],\n\t[AC_MSG_RESULT([yes]);\n\t AC_DEFINE([HAVE_INT128], [], [have __int128 type support])],\n\t[AC_MSG_RESULT([no])]\n)\n\nAC_MSG_CHECKING([for GCC __sync operations])\nAC_RUN_IFELSE([AC_LANG_SOURCE(\n\t[[\n\t\t\tint main() {\n\t\t\tint ref = 1;\n\t\t\t__sync_fetch_and_add (&ref, 1);\n\t\t\t__sync_sub_and_fetch (&ref, 1);\n\t\t\t__sync_val_compare_and_swap(&ref, 1, 0);\n\t\t\treturn ref;\n\t\t}\n\t]])],\n\t[AC_MSG_RESULT([yes]);\n\t AC_DEFINE([HAVE_GCC_SYNC_OPERATIONS], [],\n\t\t   [have GCC __sync_* operations])],\n\t[AC_MSG_RESULT([no])],\n\t[AC_MSG_RESULT([no])]\n)\n\ncase \"$printf_hooks\" in\nauto|builtin|glibc|vstr)\n\t;;\n*)\n\tAC_MSG_NOTICE([invalid printf hook implementation, defaulting to 'auto'])\n\tprintf_hooks=auto\n\t;;\nesac\n\nif test x$printf_hooks = xauto -o x$printf_hooks = xglibc; then\n\t# check for the new register_printf_specifier function with len argument,\n\t# or the deprecated register_printf_function without\n\tAC_CHECK_FUNC(\n\t\t[register_printf_specifier],\n\t\t[AC_DEFINE([HAVE_PRINTF_SPECIFIER], [], [have register_printf_specifier()])],\n\t\t[AC_CHECK_FUNC(\n\t\t\t[register_printf_function],\n\t\t\t[AC_DEFINE([HAVE_PRINTF_FUNCTION], [], [have register_printf_function()])],\n\t\t\t[\n\t\t\t\tAC_MSG_NOTICE([printf(3) does not support custom format specifiers!])\n\t\t\t\tif test x$printf_hooks = xglibc; then\n\t\t\t\t\tAC_MSG_ERROR([please select a different printf hook implementation])\n\t\t\t\telse\n\t\t\t\t\t# fallback to builtin printf hook implementation\n\t\t\t\t\tprintf_hooks=builtin\n\t\t\t\tfi\n\t\t\t]\n\t\t)]\n\t)\nfi\n\nAC_MSG_CHECKING([for Windows target])\nAC_COMPILE_IFELSE(\n\t[AC_LANG_PROGRAM(\n\t\t[[#include <windows.h>]],\n\t\t[[#ifndef WIN32\n\t\t  # error WIN32 undefined\n\t\t  #endif\n\t\t]])],\n\t[\n\t\tAC_MSG_RESULT([yes])\n\t\twindows=true\n\n\t\tAC_SUBST(PTHREADLIB, \"\")\n\t\t# explicitly disable ms-bitfields, as it breaks __attribute__((packed))\n\t\tcase \"$CFLAGS\" in\n\t\t\t*ms-bitfields*) ;;\n\t\t\t*) CFLAGS=\"$CFLAGS -mno-ms-bitfields\" ;;\n\t\tesac\n\t],\n\t[\n\t\tAC_MSG_RESULT([no])\n\n\t\t# check for clock_gettime() on non-Windows only. Otherwise this\n\t\t# check might find clock_gettime() in libwinpthread, but we don't want\n\t\t# to link against it.\n\t\tsaved_LIBS=$LIBS\n\t\t# FreeBSD has clock_gettime in libc, Linux needs librt\n\t\tLIBS=\"\"\n\t\tAC_SEARCH_LIBS(clock_gettime, rt, [RTLIB=$LIBS])\n\t\tAC_CHECK_FUNCS(clock_gettime)\n\t\tAC_SUBST(RTLIB)\n\t\tLIBS=$saved_LIBS\n\t]\n)\nAM_CONDITIONAL(USE_WINDOWS, [test \"x$windows\" = xtrue])\n\nAC_MSG_CHECKING([for working __attribute__((packed))])\nAC_COMPILE_IFELSE(\n\t[AC_LANG_PROGRAM([], [[\n\t\tstruct test { char a; short b; } __attribute__((packed));\n\t\tchar x[sizeof(struct test) == sizeof(char) + sizeof(short) ? 1 : -1]\n\t\t\t__attribute__((unused));\n\t\treturn 0;\n\t]])],\n\t[AC_MSG_RESULT([yes])],\n\t[AC_MSG_RESULT([no]); AC_MSG_ERROR([__attribute__((packed)) does not work])]\n)\n\nAC_MSG_CHECKING([clang])\nAC_COMPILE_IFELSE(\n\t[AC_LANG_PROGRAM(\n\t\t[], [[\n\t\t #ifndef __clang__\n\t\t # error not using LLVM clang\n\t\t #endif\n\t\t]])],\n\t[\n\t\tAC_MSG_RESULT([yes])\n\t],\n\t[\n\t\tAC_MSG_RESULT([no])\n\t\t# GCC, but not MinGW requires -rdynamic for plugins\n\t\tif test x$windows != xtrue; then\n\t\t\tPLUGIN_CFLAGS=\"$PLUGIN_CFLAGS -rdynamic\"\n\t\tfi\n\t]\n)\n\nAC_MSG_CHECKING([x86/x64 target])\nAC_COMPILE_IFELSE(\n\t[AC_LANG_PROGRAM(\n\t\t[], [[\n\t\t #if !defined(__i386__) && !defined(__x86_64__)\n\t\t # error not on x86/x64\n\t\t #endif\n\t\t]])],\n\t[\n\t\tx86x64=true\n\t\tAC_MSG_RESULT([yes])\n\t],\n\t[AC_MSG_RESULT([no])]\n)\nAM_CONDITIONAL(USE_X86X64, [test \"x$x86x64\" = xtrue])\n\nif test x$printf_hooks = xvstr; then\n\tAC_CHECK_LIB([vstr],[vstr_init],[LIBS=\"$LIBS\"],[AC_MSG_ERROR([Vstr string library not found])],[])\n\tAC_DEFINE([USE_VSTR], [], [use Vstr string library for printf hooks])\nfi\n\nif test x$printf_hooks = xbuiltin; then\n\tAC_DEFINE([USE_BUILTIN_PRINTF], [], [using builtin printf for printf hooks])\nfi\n\nif test x$gmp = xtrue; then\n\tsaved_LIBS=$LIBS\n\tAC_CHECK_LIB([gmp],[__gmpz_init],[],[AC_MSG_ERROR([GNU Multi Precision library gmp not found])],[])\n\tAC_MSG_CHECKING([mpz_powm_sec])\n\tif test x$mpz_powm_sec = xyes; then\n\t\tAC_COMPILE_IFELSE(\n\t\t\t[AC_LANG_PROGRAM(\n\t\t\t\t[[#include \"gmp.h\"]],\n\t\t\t\t[[void *x  __attribute__((unused)); x = mpz_powm_sec;]])],\n\t\t\t[AC_MSG_RESULT([yes]);\n\t\t\t AC_DEFINE([HAVE_MPZ_POWM_SEC], [], [have mpz_powm_sec()])],\n\t\t\t[AC_MSG_RESULT([no])]\n\t\t)\n\telse\n\t\tAC_MSG_RESULT([disabled])\n\tfi\n\tLIBS=$saved_LIBS\n\tAC_MSG_CHECKING([gmp.h version >= 4.1.4])\n\tAC_COMPILE_IFELSE(\n\t\t[AC_LANG_PROGRAM(\n\t\t\t[[#include \"gmp.h\"]],\n\t\t\t[[\n\t\t\t\t#if (__GNU_MP_VERSION*100 +  __GNU_MP_VERSION_MINOR*10 + __GNU_MP_VERSION_PATCHLEVEL) < 414\n\t\t\t\t\t#error bad gmp\n\t\t\t\t#endif]])],\n\t\t[AC_MSG_RESULT([yes])],\n\t\t[AC_MSG_RESULT([no]); AC_MSG_ERROR([No usable gmp.h found!])]\n\t)\nfi\n\nif test x$ldap = xtrue; then\n\tAC_CHECK_LIB([ldap],[ldap_init],[LIBS=\"$LIBS\"],[AC_MSG_ERROR([LDAP library ldap not found])],[])\n\tAC_CHECK_LIB([lber],[ber_free],[LIBS=\"$LIBS\"],[AC_MSG_ERROR([LDAP library lber not found])],[])\n\tAC_CHECK_HEADER([ldap.h],,[AC_MSG_ERROR([LDAP header ldap.h not found!])])\nfi\n\nif test x$curl = xtrue; then\n\tAC_CHECK_LIB([curl],[curl_global_init],[LIBS=\"$LIBS\"],[AC_MSG_ERROR([CURL library curl not found])],[])\n\tAC_CHECK_HEADER([curl/curl.h],,[AC_MSG_ERROR([CURL header curl/curl.h not found!])])\nfi\n\nif test x$unbound = xtrue; then\n\tAC_CHECK_LIB([ldns],[ldns_rr_get_type],[LIBS=\"$LIBS\"],[AC_MSG_ERROR([UNBOUND library ldns not found])],[])\n\tAC_CHECK_HEADER([ldns/ldns.h],,[AC_MSG_ERROR([UNBOUND header ldns/ldns.h not found!])])\n\tAC_CHECK_LIB([unbound],[ub_ctx_create],[LIBS=\"$LIBS\"],[AC_MSG_ERROR([UNBOUND library libunbound not found])],[])\n\tAC_CHECK_HEADER([unbound.h],,[AC_MSG_ERROR([UNBOUND header unbound.h not found!])])\nfi\n\nif test x$soup = xtrue; then\n\tPKG_CHECK_MODULES(soup, [libsoup-2.4])\n\tAC_SUBST(soup_CFLAGS)\n\tAC_SUBST(soup_LIBS)\nfi\n\nif test x$xml = xtrue; then\n\tPKG_CHECK_MODULES(xml, [libxml-2.0])\n\tAC_SUBST(xml_CFLAGS)\n\tAC_SUBST(xml_LIBS)\nfi\n\nif test x$systemd = xtrue -o x$cert_enroll_timer = xtrue; then\n\tAC_MSG_CHECKING([for systemd system unit directory])\n\tif test -n \"$systemdsystemunitdir\" -a \"x$systemdsystemunitdir\" != xno; then\n\t\tAC_MSG_RESULT([$systemdsystemunitdir])\n\telse\n\t\tAC_MSG_ERROR([not found (try --with-systemdsystemunitdir)])\n\tfi\nfi\n\nif test x$systemd = xtrue; then\n\tPKG_CHECK_MODULES(systemd, [libsystemd >= 209],\n\t\t[AC_SUBST(systemd_CFLAGS)\n\t\t AC_SUBST(systemd_LIBS)],\n\t\t[PKG_CHECK_MODULES(systemd_daemon, [libsystemd-daemon])\n\t\t AC_SUBST(systemd_daemon_CFLAGS)\n\t\t AC_SUBST(systemd_daemon_LIBS)\n\t\t PKG_CHECK_MODULES(systemd_journal, [libsystemd-journal])\n\t\t AC_SUBST(systemd_journal_CFLAGS)\n\t\t AC_SUBST(systemd_journal_LIBS)]\n\t)\n\tsaved_LIBS=$LIBS\n\tLIBS=\"$systemd_LIBS $systemd_daemon_LIBS\"\n\tAC_CHECK_FUNCS(sd_listen_fds_with_names)\n\tLIBS=$saved_LIBS\nfi\n\nif test x$tss_trousers = xtrue; then\n\tAC_CHECK_LIB([tspi],[Tspi_Context_Create],[LIBS=\"$LIBS\"],[AC_MSG_ERROR([TrouSerS library libtspi not found])],[])\n\tAC_CHECK_HEADER([trousers/tss.h],,[AC_MSG_ERROR([TrouSerS header trousers/tss.h not found!])])\n\tAC_DEFINE([TSS_TROUSERS], [], [use TrouSerS library libtspi])\nfi\n\nif test x$tss_tss2 = xtrue; then\n\tPKG_CHECK_MODULES(tss2_sys, [tss2-sys],\n\t\t[tss2_sys=true; AC_DEFINE([TSS2_SYS], [], [use TSS2 v2 System API])],\n\t\t[tss2_sys=false])\n\tPKG_CHECK_MODULES(tss2_esys, [tss2-esys],\n\t\t[tss2_esys=true; AC_DEFINE([TSS2_ESYS], [], [use TSS2 v2 Extended System API])],\n\t\t[tss2_esys=false])\n\tif test x$tss2_sys = xtrue; then\n\t\tAC_DEFINE([TSS_TSS2_V2], [], [use TSS 2.0 v2 libraries])\n\t\tAC_SUBST(tss2_CFLAGS, \"$tss2_sys_CFLAGS\")\n\t\tAC_SUBST(tss2_LIBS, \"$tss2_sys_LIBS\")\n\telse\n\t\tPKG_CHECK_MODULES(tss2_tabrmd, [tcti-tabrmd],\n\t\t\t[tss2_tabrmd=true; AC_DEFINE([TSS2_TCTI_TABRMD], [], [use TCTI Access Broker and Resource Manager])],\n\t\t\t[tss2_tabrmd=false])\n\t\tPKG_CHECK_MODULES(tss2_socket, [tcti-socket],\n\t\t\t[tss2_socket=true; AC_DEFINE([TSS2_TCTI_SOCKET], [], [use TCTI Sockets])],\n\t\t\t[tss2_socket=false])\n\t\tif test x$tss2_tabrmd = xtrue -o x$tss2_socket = xtrue; then\n\t\t\tAC_DEFINE([TSS_TSS2_V1], [], [use TSS 2.0 v1 libraries])\n\t\t\tAC_SUBST(tss2_CFLAGS, \"$tss2_tabrmd_CFLAGS $tss2_socket_CFLAGS\")\n\t\t\tAC_SUBST(tss2_LIBS, \"$tss2_tabrmd_LIBS $tss2_socket_LIBS\")\n\t\telse\n\t\t\tAC_MSG_FAILURE([no TSS2 TCTI or SAPI libraries detected])\n\t\tfi\n\tfi\nfi\n\nif test x$imc_swima = xtrue -o x$imv_swima = xtrue; then\n\tPKG_CHECK_MODULES(json, [json-c], [],\n\t\t[PKG_CHECK_MODULES(json, [json])])\n\tAC_SUBST(json_CFLAGS)\n\tAC_SUBST(json_LIBS)\nfi\n\nif test x$fast = xtrue; then\n\tAC_CHECK_LIB([neo_utl],[hdf_init],[LIBS=\"$LIBS\"],[AC_MSG_ERROR([ClearSilver library neo_utl not found!])],[])\n\tAC_MSG_CHECKING([for -lneo_cgi and dependencies])\n\tsaved_CFLAGS=$CFLAGS\n\tsaved_LIBS=$LIBS\n\tLIBS=\"-lneo_cgi -lneo_cs -lneo_utl\"\n\tCFLAGS=\"-I/usr/include/ClearSilver\"\n\tAC_LINK_IFELSE(\n\t\t[AC_LANG_PROGRAM(\n\t\t\t[[#include <cgi/cgi.h>]],\n\t\t\t[[NEOERR *err = cgi_display(NULL, NULL);]])],\n\t\t[AC_MSG_RESULT([yes])],\n\t\t[LIBS=\"$LIBS -lz\";\n\t\t AC_LINK_IFELSE(\n\t\t\t[AC_LANG_PROGRAM(\n\t\t\t\t[[#include <cgi/cgi.h>]],\n\t\t\t\t[[NEOERR *err = cgi_display(NULL, NULL);]])],\n\t\t\t[AC_MSG_RESULT([yes, zlib required])],\n\t\t\t[AC_MSG_ERROR([not found])]\n\t\t )]\n\t)\n\tclearsilver_LIBS=\"$LIBS\"\n\tAC_SUBST(clearsilver_LIBS)\n\tLIBS=$saved_LIBS\n\tCFLAGS=$saved_CFLAGS\n\n\tAC_CHECK_LIB([fcgi],[FCGX_Init],[LIBS=\"$LIBS\"],[AC_MSG_ERROR([FastCGI library fcgi not found!])],[])\n\tAC_CHECK_HEADER([fcgiapp.h],,[AC_MSG_ERROR([FastCGI header file fcgiapp.h not found!])])\nfi\n\nif test x$mysql = xtrue; then\n\tif test \"x$windows\" = xtrue; then\n\t\tAC_CHECK_HEADER([mysql.h],,[AC_MSG_ERROR([MySQL header file mysql.h not found!])])\n\t\tAC_CHECK_LIB([mysql],[mysql_database_init],[LIBS=\"$LIBS\"],[AC_MSG_ERROR([MySQL library not found!])],[])\n\t\tAC_SUBST(MYSQLLIB, -lmysql)\n\telse\n\t\tAC_PATH_PROG([MYSQLCONFIG], [mysql_config], [], [$PATH:/bin:/usr/bin:/usr/local/bin])\n\t\tif test x$MYSQLCONFIG = x; then\n\t\t\tAC_MSG_ERROR([mysql_config not found!])\n\t\tfi\n\t\tAC_SUBST(MYSQLLIB, `$MYSQLCONFIG --libs_r`)\n\t\tAC_SUBST(MYSQLCFLAG, `$MYSQLCONFIG --cflags`)\n\tfi\nfi\n\nif test x$sqlite = xtrue; then\n\tAC_CHECK_LIB([sqlite3],[sqlite3_open],[LIBS=\"$LIBS\"],[AC_MSG_ERROR([SQLite library sqlite3 not found])],[])\n\tAC_CHECK_HEADER([sqlite3.h],,[AC_MSG_ERROR([SQLite header sqlite3.h not found!])])\n\tAC_MSG_CHECKING([sqlite3_prepare_v2])\n\tAC_COMPILE_IFELSE(\n\t\t[AC_LANG_PROGRAM(\n\t\t\t[[#include <sqlite3.h>]],\n\t\t\t[[void *test = sqlite3_prepare_v2;]])],\n\t\t[AC_MSG_RESULT([yes]);\n\t\t AC_DEFINE([HAVE_SQLITE3_PREPARE_V2], [], [have sqlite3_prepare_v2()])],\n\t\t[AC_MSG_RESULT([no])]\n\t)\n\tAC_MSG_CHECKING([sqlite3.h version >= 3.3.1])\n\tAC_COMPILE_IFELSE(\n\t\t[AC_LANG_PROGRAM(\n\t\t\t[[#include <sqlite3.h>]],\n\t\t\t[[\n\t\t\t\t#if SQLITE_VERSION_NUMBER < 3003001\n\t\t\t\t\t#error bad sqlite\n\t\t\t\t#endif]])],\n\t\t[AC_MSG_RESULT([yes])],\n\t\t[AC_MSG_RESULT([no]); AC_MSG_ERROR([SQLite version >= 3.3.1 required!])]\n\t)\nfi\n\nif test x$openssl = xtrue; then\n\tif test \"x$windows\" = xtrue; then\n\t\topenssl_lib=eay32\n\t\tAC_CHECK_LIB([$openssl_lib],[EVP_CIPHER_CTX_new],[LIBS=\"$LIBS\"],\n\t\t\t[openssl_lib=\"\"],[$DLLIB])\n\tfi\n\tif test -z \"$openssl_lib\"; then\n\t\topenssl_lib=crypto\n\t\tAC_CHECK_LIB([$openssl_lib],[EVP_CIPHER_CTX_new],[LIBS=\"$LIBS\"],\n\t\t\t[AC_MSG_ERROR([OpenSSL lib$openssl_lib not found])],[$DLLIB])\n\tfi\n\tAC_SUBST(OPENSSL_LIB, [-l$openssl_lib])\n\tAC_CHECK_HEADER([openssl/evp.h],,[AC_MSG_ERROR([OpenSSL header openssl/evp.h not found!])])\nfi\n\nif test x$wolfssl = xtrue; then\n\tPKG_CHECK_MODULES(wolfssl, [wolfssl])\n\tAC_SUBST(wolfssl_CFLAGS)\n\tAC_SUBST(wolfssl_LIBS)\nfi\n\nif test x$gcrypt = xtrue; then\n\tAC_CHECK_LIB([gcrypt],[gcry_control],[LIBS=\"$LIBS\"],[AC_MSG_ERROR([gcrypt library not found])],[-lgpg-error])\n\tAC_CHECK_HEADER([gcrypt.h],,[AC_MSG_ERROR([gcrypt header gcrypt.h not found!])])\n\tAC_MSG_CHECKING([gcrypt CAMELLIA cipher])\n\tAC_COMPILE_IFELSE(\n\t\t[AC_LANG_PROGRAM(\n\t\t\t[[#include <gcrypt.h>]],\n\t\t\t[[enum gcry_cipher_algos alg = GCRY_CIPHER_CAMELLIA128;]])],\n\t\t[AC_MSG_RESULT([yes]);\n\t\t AC_DEFINE([HAVE_GCRY_CIPHER_CAMELLIA], [], [have GCRY_CIPHER_CAMELLIA128])],\n\t\t[AC_MSG_RESULT([no])]\n\t)\nfi\n\nif test x$botan = xtrue; then\n\tPKG_CHECK_MODULES(botan, [botan-3], [],\n\t\t[PKG_CHECK_MODULES(botan, [botan-2])])\n\tAC_SUBST(botan_CFLAGS)\n\tAC_SUBST(botan_LIBS)\n\tsaved_LIBS=$LIBS\n\tLIBS=\"$botan_LIBS\"\n\tAC_CHECK_FUNCS(botan_rng_init_custom botan_pubkey_ecc_key_used_explicit_encoding)\n\tLIBS=$saved_LIBS\nfi\n\nif test x$uci = xtrue; then\n\tAC_CHECK_LIB([uci],[uci_alloc_context],[LIBS=\"$LIBS\"],[AC_MSG_ERROR([UCI library libuci not found])],[])\n\tAC_CHECK_HEADER([uci.h],,[AC_MSG_ERROR([UCI header uci.h not found!])])\nfi\n\nif test x$android_dns = xtrue; then\n\tAC_CHECK_LIB([cutils],[property_get],[LIBS=\"$LIBS\"],[AC_MSG_ERROR([Android library libcutils not found])],[])\n\tAC_CHECK_HEADER([cutils/properties.h],,[AC_MSG_ERROR([Android header cutils/properties.h not found!])])\n\t# we have to force the use of libdl here because the autodetection\n\t# above does not work correctly when cross-compiling for android.\n\tDLLIB=\"-ldl\"\n\tAC_SUBST(DLLIB)\nfi\n\nif test x$eap_sim_pcsc = xtrue; then\n\tPKG_CHECK_MODULES(pcsclite, [libpcsclite])\n\tAC_SUBST(pcsclite_CFLAGS)\n\tAC_SUBST(pcsclite_LIBS)\nfi\n\nif test x$nm = xtrue; then\n\tPKG_CHECK_MODULES(nm, [gthread-2.0 libnm])\n\tAC_SUBST(nm_CFLAGS)\n\tAC_SUBST(nm_LIBS)\n\n\tAC_MSG_CHECKING([for D-Bus policy directory])\n\tif test -n \"$dbuspolicydir\" -a \"x$dbuspolicydir\" != xno; then\n\t\tAC_MSG_RESULT([$dbuspolicydir])\n\telse\n\t\tAC_MSG_ERROR([not found (try --with-dbuspolicydir)])\n\tfi\nfi\n\nif test x$xauth_pam = xtrue; then\n\tAC_CHECK_LIB([pam],[pam_start],[LIBS=\"$LIBS\"],[AC_MSG_ERROR([PAM library not found])],[])\n\tAC_CHECK_HEADER([security/pam_appl.h],,[AC_MSG_ERROR([PAM header security/pam_appl.h not found!])])\nfi\n\nif test x$connmark = xtrue -o x$forecast = xtrue; then\n\tPKG_CHECK_MODULES(libiptc, [libip4tc])\n\tAC_SUBST(libiptc_CFLAGS)\n\tAC_SUBST(libiptc_LIBS)\nfi\n\nif test x$capabilities = xnative; then\n\tAC_MSG_NOTICE([Usage of the native Linux capabilities interface is deprecated, use libcap instead])\n\t# Linux requires the following for capset(), Android does not have it,\n\t# but defines capset() in unistd.h instead.\n\tAC_CHECK_HEADERS([sys/capability.h])\n\tAC_CHECK_FUNC(capset,,[AC_MSG_ERROR([capset() not found!])])\n\tAC_DEFINE([CAPABILITIES_NATIVE], [], [have native linux capset()])\nfi\n\nif test x$capabilities = xlibcap; then\n\tAC_CHECK_LIB([cap],[cap_init],[LIBS=\"$LIBS\"],[AC_MSG_ERROR([libcap library not found])],[])\n\tAC_CHECK_HEADER([sys/capability.h],\n\t\t[AC_DEFINE([HAVE_SYS_CAPABILITY_H], [], [have sys/capability.h])],\n\t\t[AC_MSG_ERROR([libcap header sys/capability.h not found!])])\n\tAC_DEFINE([CAPABILITIES_LIBCAP], [], [have libpcap library])\nfi\n\nif test x$selinux = xtrue; then\n\tPKG_CHECK_MODULES(selinux, [libselinux])\n\tAC_SUBST(selinux_CFLAGS)\n\tAC_SUBST(selinux_LIBS)\n\tAC_DEFINE([USE_SELINUX], [], [build with support for SELinux])\nfi\n\nif test x$integrity_test = xtrue; then\n\tAC_MSG_CHECKING([for dladdr()])\n\tAC_COMPILE_IFELSE(\n\t\t[AC_LANG_PROGRAM(\n\t\t\t[[#define _GNU_SOURCE\n\t\t\t  #include <dlfcn.h>]],\n\t\t\t[[Dl_info info; dladdr(main, &info);]])],\n\t\t[AC_MSG_RESULT([yes])],\n\t\t[AC_MSG_RESULT([no]);\n\t\t AC_MSG_ERROR([dladdr() not supported, required by integrity-test!])]\n\t)\n\tAC_MSG_CHECKING([for dl_iterate_phdr()])\n\tAC_COMPILE_IFELSE(\n\t\t[AC_LANG_PROGRAM(\n\t\t\t[[#define _GNU_SOURCE\n\t\t\t  #include <link.h>]],\n\t\t\t[[dl_iterate_phdr((void*)0, (void*)0);]])],\n\t\t[AC_MSG_RESULT([yes])],\n\t\t[AC_MSG_RESULT([no]);\n\t\t AC_MSG_ERROR([dl_iterate_phdr() not supported, required by integrity-test!])]\n\t)\nfi\n\nif test x$bfd_backtraces = xtrue; then\n\tAC_CHECK_LIB([bfd],[bfd_init],[LIBS=\"$LIBS\"],[AC_MSG_ERROR([binutils libbfd not found!])],[])\n\tAC_CHECK_HEADER([bfd.h],[AC_DEFINE([HAVE_BFD_H],,[have binutils bfd.h])],\n\t\t[AC_MSG_ERROR([binutils bfd.h header not found!])])\n\tAC_CHECK_DECLS(\n\t\t[bfd_section_flags, bfd_get_section_flags,\n\t\t bfd_section_vma, bfd_get_section_vma,\n\t\t bfd_section_size, bfd_get_section_size], [], [],\n\t\t[[#include <bfd.h>]])\n\tBFDLIB=\"-lbfd\"\n\tAC_SUBST(BFDLIB)\nfi\n\nif test x$unwind_backtraces = xtrue; then\n\tAC_CHECK_LIB([unwind],[unw_backtrace],[LIBS=\"$LIBS\"],[AC_MSG_ERROR([libunwind not found!])],[])\n\tAC_CHECK_HEADER([libunwind.h],[AC_DEFINE([HAVE_LIBUNWIND_H],,[have libunwind.h])],\n\t\t[AC_MSG_ERROR([libunwind.h header not found!])])\n\tUNWINDLIB=\"-lunwind\"\n\tAC_SUBST(UNWINDLIB)\nfi\n\nAM_CONDITIONAL(USE_DEV_HEADERS, [test \"x$dev_headers\" != xno])\nif test x$dev_headers = xyes; then\n\tdev_headers=\"$includedir/strongswan\"\nfi\nAC_SUBST(dev_headers)\n\nif test x$tkm = xtrue; then\n\tAC_PATH_PROG([GPRBUILD], [gprbuild], [], [$PATH:/bin:/usr/bin:/usr/local/bin])\n\tif test x$GPRBUILD = x; then\n\t\tAC_MSG_ERROR([gprbuild not found])\n\tfi\nfi\n\nif test x$coverage = xtrue; then\n\tAC_PATH_PROG([LCOV], [lcov], [], [$PATH:/bin:/usr/bin:/usr/local/bin])\n\tif test x$LCOV = x; then\n\t\tAC_MSG_ERROR([lcov not found])\n\tfi\n\tAC_PATH_PROG([GENHTML], [genhtml], [], [$PATH:/bin:/usr/bin:/usr/local/bin])\n\tif test x$GENHTML = x; then\n\t\tAC_MSG_ERROR([genhtml not found])\n\tfi\n\n\tCOVERAGE_CFLAGS=\"-fprofile-arcs -ftest-coverage\"\n\tCOVERAGE_LDFLAGS=\"-fprofile-arcs\"\n\tAC_SUBST(COVERAGE_CFLAGS)\n\tAC_SUBST(COVERAGE_LDFLAGS)\n\tPLUGIN_CFLAGS=\"$PLUGIN_CFLAGS $COVERAGE_CFLAGS\"\n\n\tAC_MSG_NOTICE([coverage enabled, adding \"-g -O0\" to CFLAGS])\n\tCFLAGS=\"${CFLAGS} -g -O0\"\nfi\n\nif test x$fuzzing = xtrue; then\n\tcase \"$libfuzzer\" in\n\t\"\")\n\t\tAC_MSG_NOTICE([fuzz targets enabled without libFuzzer, using local driver])\n\t\tCFLAGS=\"${CFLAGS} -fsanitize=address\"\n\t\tlibfuzzer=\"libFuzzerLocal.a\"\n\t\t;;\n\t\"-fsanitize=fuzzer\")\n\t\tlibfuzzer=\"\"\n\t\tFUZZING_CFLAGS=\"-fsanitize=fuzzer\"\n\t\tAC_SUBST(FUZZING_CFLAGS)\n\t\t;;\n\t*)\n\t\t# required for libFuzzer\n\t\tFUZZING_LDFLAGS=\"-stdlib=libc++ -lstdc++\"\n\t\tif test \"$SANITIZER\" = \"coverage\"; then\n\t\t\tFUZZING_LDFLAGS=\"$FUZZING_LDFLAGS -lm\"\n\t\tfi\n\t\tAC_SUBST(FUZZING_LDFLAGS)\n\t\t;;\n\tesac\nfi\n\nif test x$asan = xtrue; then\n\t# adding this here and not earlier or passed to the script avoids issues\n\t# e.g. with libpthread (libasan provides stubs for its functions but no full\n\t# implementation so configure does not detect that -lpthread is required\n\t# when GCC is used, clang always adds -lpthread)\n\tCFLAGS=\"$CFLAGS -fsanitize=address -fno-omit-frame-pointer\"\n\t# this is necessary so AddressSanitizer can resolve symbols e.g. for\n\t# C++ exceptions that are used in libbotan\n\tif test x$botan = xtrue; then\n\t\tLDFLAGS=\"$LDFLAGS -lstdc++\"\n\tfi\n\tif test x$openssl = xtrue; then\n\t\t# we need to suppress some leaks with OpenSSL 3 as we don't deinitialze\n\t\t# it properly\n\t\tAC_SUBST(LSAN_OPTIONS, [suppressions=\\${abs_top_srcdir}/.lsan.suppressions])\n\t\t# use this instead of AM_TESTS_ENVIRONMENT as we don't use the parallel\n\t\t# test harness\n\t\tAC_SUBST(TESTS_ENVIRONMENT, ['export LSAN_OPTIONS=\"$(LSAN_OPTIONS)\";'])\n\tfi\nfi\n\nif test x$ruby_gems = xtrue; then\n\tAC_PATH_PROG([GEM], [gem], [], [$PATH:/bin:/usr/bin:/usr/local/bin])\n\tif test x$GEM = x; then\n\t\tAC_MSG_ERROR(RubyGems package manager not found)\n\tfi\n\tif test \"x$rubygemdir\" = \"xgem environment gemdir\"; then\n\t\trubygemdir=$($GEM environment gemdir)\n\tfi\n\tAC_SUBST(RUBYGEMDIR, \"$rubygemdir\")\nfi\nAM_CONDITIONAL(RUBY_GEMS_INSTALL, [test \"x$ruby_gems_install\" = xtrue])\n\nif test x$python_wheels = xtrue; then\n\tPYTHON_PACKAGE_VERSION=`echo \"$PACKAGE_VERSION\" | $SED 's/dr/.dev/'`\n\tAC_SUBST([PYTHON_PACKAGE_VERSION])\n\tAC_PATH_PROG([TOX], [tox], [], [$PATH:/bin:/usr/bin:/usr/local/bin])\n\tAC_PATH_PROG([PY_TEST], [py.test], [], [$PATH:/bin:/usr/bin:/usr/local/bin])\nfi\n\nAM_CONDITIONAL(PERL_CPAN_INSTALL, [test \"x$perl_cpan_install\" = xtrue])\n\nAC_CACHE_CHECK(\n\t[if plugin constructors should be resolved statically],\n\t[ss_cv_static_plugin_constructors],\n\t[if test x$monolithic = xtrue -a x$enable_static = xyes; then\n\t\tss_cv_static_plugin_constructors=yes\n\t else\n\t\tss_cv_static_plugin_constructors=\"no (enabled for static, monolithic builds)\"\n\t fi]\n)\nif test \"x$ss_cv_static_plugin_constructors\" = xyes; then\n\tstatic_plugin_constructors=true\n\tif test \"$PYTHON\" = \":\"; then\n\t\tAC_MSG_FAILURE([Python is required to resolve plugin constructors statically])\n\tfi\nfi\n\nAC_MSG_CHECKING([version from Git repository])\nAC_SUBST(GIT_VERSION, [$($srcdir/scripts/git-version \"$srcdir\")])\ncase \"$GIT_VERSION\" in\n\t\"$PACKAGE_VERSION\"*)\n\t\tAC_MSG_RESULT([$GIT_VERSION])\n\t\t;;\n\tUNKNOWN)\n\t\tAC_MSG_RESULT([$GIT_VERSION (could be due to insufficient clone depth)])\n\t\t;;\n\t*)\n\t\tAC_MSG_ERROR([$PACKAGE_VERSION is not a prefix of $GIT_VERSION, tag missing?])\n\t\t;;\nesac\n\nif test x$git_version = xtrue -a \"$GIT_VERSION\" != \"UNKNOWN\"; then\n\tAC_DEFINE_UNQUOTED(VERSION, [\"$GIT_VERSION\"])\nfi\n\n# modify CFLAGS as needed, do this late so we don't affect configure checks\nCFLAGS=\"$CFLAGS -include $(pwd)/config.h\"\n\nAC_MSG_CHECKING([for use of -Werror and additional warnings])\nWARN_CFLAGS=\nif test x$warnings = xtrue; then\n\tWARN_CFLAGS=\"-Werror -Wall -Wextra\"\n\tAC_MSG_RESULT([yes])\nelse\n\tAC_MSG_RESULT([no])\nfi\n# disable some warnings, whether explicitly enabled above or by default\n# these are not compatible with our custom printf specifiers\nWARN_CFLAGS=\"$WARN_CFLAGS -Wno-format\"\nWARN_CFLAGS=\"$WARN_CFLAGS -Wno-format-security\"\n# we generally use comments, but GCC doesn't seem to recognize many of them\nWARN_CFLAGS=\"$WARN_CFLAGS -Wno-implicit-fallthrough\"\n# we often omit fields when initializing structs (e.g. when using INIT)\nWARN_CFLAGS=\"$WARN_CFLAGS -Wno-missing-field-initializers\"\n# allow assigning char* to u_char* (e.g. in chunk_create())\nWARN_CFLAGS=\"$WARN_CFLAGS -Wno-pointer-sign\"\n# allow comparing e.g. int with chunk_t::len or countof(...)\nWARN_CFLAGS=\"$WARN_CFLAGS -Wno-sign-compare\"\n# allow defensive checks like e.g. unsigned_var < CONST(= currently 0)\nWARN_CFLAGS=\"$WARN_CFLAGS -Wno-type-limits\"\n# we often don't use function parameters when implementing interfaces\nWARN_CFLAGS=\"$WARN_CFLAGS -Wno-unused-parameter\"\n# add the flags before existing CFLAGS so warning flags can be overridden\nCFLAGS=\"$WARN_CFLAGS $CFLAGS\"\n\n# ===============================================\n#  collect plugin list for strongSwan components\n# ===============================================\n\nm4_include(m4/macros/add-plugin.m4)\n\n# plugin lists for all components\ncharon_plugins=\npool_plugins=\nattest_plugins=\npki_plugins=\nscripts_plugins=\nfuzz_plugins=\nmanager_plugins=\nmedsrv_plugins=\nnm_plugins=\ncmd_plugins=\naikgen_plugins=\n\n# location specific lists for checksumming,\n# for src/libcharon, src/libstrongswan, src/libtnccs and src/libtpmtss\nc_plugins=\ns_plugins=\nt_plugins=\np_plugins=\n\nADD_PLUGIN([test-vectors],         [s charon pki])\nADD_PLUGIN([unbound],              [s charon scripts])\nADD_PLUGIN([ldap],                 [s charon scripts nm cmd])\nADD_PLUGIN([pkcs11],               [s charon pki nm cmd])\nADD_PLUGIN([tpm],                  [p charon pki nm cmd])\nADD_PLUGIN([aesni],                [s charon pki scripts medsrv attest nm cmd aikgen])\nADD_PLUGIN([aes],                  [s charon pki scripts nm cmd])\nADD_PLUGIN([des],                  [s charon pki scripts nm cmd])\nADD_PLUGIN([blowfish],             [s charon pki scripts nm cmd])\nADD_PLUGIN([rc2],                  [s charon pki scripts nm cmd])\nADD_PLUGIN([sha2],                 [s charon pki scripts medsrv attest nm cmd aikgen fuzz])\nADD_PLUGIN([sha3],                 [s charon pki scripts medsrv attest nm cmd aikgen fuzz])\nADD_PLUGIN([sha1],                 [s charon pki scripts manager medsrv attest nm cmd aikgen fuzz])\nADD_PLUGIN([md4],                  [s charon pki nm cmd])\nADD_PLUGIN([md5],                  [s charon pki scripts attest nm cmd aikgen])\nADD_PLUGIN([mgf1],                 [s charon pki scripts medsrv attest nm cmd aikgen])\nADD_PLUGIN([rdrand],               [s charon pki scripts medsrv attest nm cmd aikgen])\nADD_PLUGIN([random],               [s charon pki scripts manager medsrv attest nm cmd aikgen])\nADD_PLUGIN([nonce],                [s charon nm cmd aikgen])\nADD_PLUGIN([x509],                 [s charon pki scripts attest nm cmd aikgen fuzz])\nADD_PLUGIN([revocation],           [s charon pki nm cmd])\nADD_PLUGIN([constraints],          [s charon pki nm cmd])\nADD_PLUGIN([acert],                [s charon])\nADD_PLUGIN([pubkey],               [s charon pki cmd aikgen])\nADD_PLUGIN([pkcs1],                [s charon pki scripts manager medsrv attest nm cmd aikgen fuzz])\nADD_PLUGIN([pkcs7],                [s charon pki scripts nm cmd])\nADD_PLUGIN([pkcs12],               [s charon pki scripts cmd])\nADD_PLUGIN([pgp],                  [s charon])\nADD_PLUGIN([dnskey],               [s charon pki])\nADD_PLUGIN([sshkey],               [s charon pki nm cmd])\nADD_PLUGIN([dnscert],              [c charon])\nADD_PLUGIN([ipseckey],             [c charon])\nADD_PLUGIN([pem],                  [s charon pki scripts manager medsrv attest nm cmd aikgen fuzz])\nADD_PLUGIN([padlock],              [s charon])\nADD_PLUGIN([openssl],              [s charon pki scripts manager medsrv attest nm cmd aikgen])\nADD_PLUGIN([wolfssl],              [s charon pki scripts manager medsrv attest nm cmd aikgen])\nADD_PLUGIN([gcrypt],               [s charon pki scripts manager medsrv attest nm cmd aikgen])\nADD_PLUGIN([botan],                [s charon pki scripts manager medsrv attest nm cmd aikgen])\nADD_PLUGIN([pkcs8],                [s charon pki scripts manager medsrv attest nm cmd])\nADD_PLUGIN([af-alg],               [s charon pki scripts medsrv attest nm cmd aikgen])\nADD_PLUGIN([fips-prf],             [s charon nm cmd])\nADD_PLUGIN([gmp],                  [s charon pki scripts manager medsrv attest nm cmd aikgen fuzz])\nADD_PLUGIN([curve25519],           [s charon pki scripts nm cmd])\nADD_PLUGIN([agent],                [s charon nm cmd])\nADD_PLUGIN([keychain],             [s charon cmd])\nADD_PLUGIN([chapoly],              [s charon scripts nm cmd])\nADD_PLUGIN([xcbc],                 [s charon nm cmd])\nADD_PLUGIN([cmac],                 [s charon nm cmd])\nADD_PLUGIN([hmac],                 [s charon pki scripts nm cmd])\nADD_PLUGIN([kdf],                  [s charon pki scripts nm cmd])\nADD_PLUGIN([ctr],                  [s charon scripts nm cmd])\nADD_PLUGIN([ccm],                  [s charon scripts nm cmd])\nADD_PLUGIN([gcm],                  [s charon scripts nm cmd])\nADD_PLUGIN([ml],                   [s charon scripts nm cmd])\nADD_PLUGIN([drbg],                 [s charon pki scripts nm cmd])\nADD_PLUGIN([curl],                 [s charon pki scripts nm cmd])\nADD_PLUGIN([files],                [s charon pki scripts nm cmd])\nADD_PLUGIN([winhttp],              [s charon pki scripts])\nADD_PLUGIN([soup],                 [s charon pki scripts nm cmd])\nADD_PLUGIN([mysql],                [s charon pki pool manager medsrv attest])\nADD_PLUGIN([sqlite],               [s charon pki pool manager medsrv attest])\nADD_PLUGIN([openxpki],             [s pki])\nADD_PLUGIN([attr],                 [c charon])\nADD_PLUGIN([attr-sql],             [c charon])\nADD_PLUGIN([load-tester],          [c charon])\nADD_PLUGIN([kernel-libipsec],      [c charon cmd])\nADD_PLUGIN([kernel-wfp],           [c charon])\nADD_PLUGIN([kernel-iph],           [c charon])\nADD_PLUGIN([kernel-pfkey],         [c charon nm cmd])\nADD_PLUGIN([kernel-pfroute],       [c charon nm cmd])\nADD_PLUGIN([kernel-netlink],       [c charon nm cmd])\nADD_PLUGIN([selinux],              [c charon nm cmd])\nADD_PLUGIN([resolve],              [c charon cmd])\nADD_PLUGIN([save-keys],            [c])\nADD_PLUGIN([socket-default],       [c charon nm cmd])\nADD_PLUGIN([socket-dynamic],       [c charon cmd])\nADD_PLUGIN([socket-win],           [c charon])\nADD_PLUGIN([bypass-lan],           [c charon nm cmd])\nADD_PLUGIN([connmark],             [c charon])\nADD_PLUGIN([forecast],             [c charon])\nADD_PLUGIN([farp],                 [c charon])\nADD_PLUGIN([stroke],               [c charon])\nADD_PLUGIN([vici],                 [c charon])\nADD_PLUGIN([smp],                  [c charon])\nADD_PLUGIN([sql],                  [c charon])\nADD_PLUGIN([updown],               [c charon])\nADD_PLUGIN([eap-identity],         [c charon nm cmd])\nADD_PLUGIN([eap-sim],              [c charon])\nADD_PLUGIN([eap-sim-file],         [c charon])\nADD_PLUGIN([eap-sim-pcsc],         [c charon])\nADD_PLUGIN([eap-aka],              [c charon])\nADD_PLUGIN([eap-aka-3gpp],         [c charon])\nADD_PLUGIN([eap-aka-3gpp2],        [c charon])\nADD_PLUGIN([eap-simaka-sql],       [c charon])\nADD_PLUGIN([eap-simaka-pseudonym], [c charon])\nADD_PLUGIN([eap-simaka-reauth],    [c charon])\nADD_PLUGIN([eap-md5],              [c charon nm cmd])\nADD_PLUGIN([eap-gtc],              [c charon nm cmd])\nADD_PLUGIN([eap-mschapv2],         [c charon nm cmd])\nADD_PLUGIN([eap-dynamic],          [c charon])\nADD_PLUGIN([eap-radius],           [c charon])\nADD_PLUGIN([eap-tls],              [c charon nm cmd])\nADD_PLUGIN([eap-ttls],             [c charon nm cmd])\nADD_PLUGIN([eap-peap],             [c charon nm cmd])\nADD_PLUGIN([eap-tnc],              [c charon])\nADD_PLUGIN([xauth-generic],        [c charon cmd])\nADD_PLUGIN([xauth-eap],            [c charon])\nADD_PLUGIN([xauth-pam],            [c charon])\nADD_PLUGIN([xauth-noauth],         [c charon])\nADD_PLUGIN([tnc-ifmap],            [c charon])\nADD_PLUGIN([tnc-pdp],              [c charon])\nADD_PLUGIN([tnc-imc],              [t charon])\nADD_PLUGIN([tnc-imv],              [t charon])\nADD_PLUGIN([tnc-tnccs],            [t charon])\nADD_PLUGIN([tnccs-20],             [t charon])\nADD_PLUGIN([tnccs-11],             [t charon])\nADD_PLUGIN([tnccs-dynamic],        [t charon])\nADD_PLUGIN([medsrv],               [c charon])\nADD_PLUGIN([medcli],               [c charon])\nADD_PLUGIN([dhcp],                 [c charon])\nADD_PLUGIN([osx-attr],             [c charon cmd])\nADD_PLUGIN([p-cscf],               [c charon cmd])\nADD_PLUGIN([android-dns],          [c charon])\nADD_PLUGIN([android-log],          [c charon])\nADD_PLUGIN([ha],                   [c charon])\nADD_PLUGIN([whitelist],            [c charon])\nADD_PLUGIN([ext-auth],             [c charon])\nADD_PLUGIN([lookip],               [c charon])\nADD_PLUGIN([error-notify],         [c charon])\nADD_PLUGIN([certexpire],           [c charon])\nADD_PLUGIN([systime-fix],          [c charon])\nADD_PLUGIN([led],                  [c charon])\nADD_PLUGIN([duplicheck],           [c charon])\nADD_PLUGIN([coupling],             [c charon])\nADD_PLUGIN([radattr],              [c charon])\nADD_PLUGIN([uci],                  [c charon])\nADD_PLUGIN([addrblock],            [c charon])\nADD_PLUGIN([unity],                [c charon])\nADD_PLUGIN([counters],             [c charon])\n\nAC_SUBST(charon_plugins)\nAC_SUBST(pool_plugins)\nAC_SUBST(attest_plugins)\nAC_SUBST(pki_plugins)\nAC_SUBST(scripts_plugins)\nAC_SUBST(fuzz_plugins)\nAC_SUBST(manager_plugins)\nAC_SUBST(medsrv_plugins)\nAC_SUBST(nm_plugins)\nAC_SUBST(cmd_plugins)\nAC_SUBST(aikgen_plugins)\n\nAC_SUBST(c_plugins)\nAC_SUBST(p_plugins)\nAC_SUBST(s_plugins)\nAC_SUBST(t_plugins)\n\n# ======================\n#  set Makefile.am vars\n# ======================\n\n#  libstrongswan plugins\n# -----------------------\nAM_CONDITIONAL(USE_TEST_VECTORS, test x$test_vectors = xtrue)\nAM_CONDITIONAL(USE_CURL, test x$curl = xtrue)\nAM_CONDITIONAL(USE_FILES, test x$files = xtrue)\nAM_CONDITIONAL(USE_WINHTTP, test x$winhttp = xtrue)\nAM_CONDITIONAL(USE_UNBOUND, test x$unbound = xtrue)\nAM_CONDITIONAL(USE_SOUP, test x$soup = xtrue)\nAM_CONDITIONAL(USE_LDAP, test x$ldap = xtrue)\nAM_CONDITIONAL(USE_AES, test x$aes = xtrue)\nAM_CONDITIONAL(USE_DES, test x$des = xtrue)\nAM_CONDITIONAL(USE_BLOWFISH, test x$blowfish = xtrue)\nAM_CONDITIONAL(USE_RC2, test x$rc2 = xtrue)\nAM_CONDITIONAL(USE_MD4, test x$md4 = xtrue)\nAM_CONDITIONAL(USE_MD5, test x$md5 = xtrue)\nAM_CONDITIONAL(USE_SHA1, test x$sha1 = xtrue)\nAM_CONDITIONAL(USE_SHA2, test x$sha2 = xtrue)\nAM_CONDITIONAL(USE_SHA3, test x$sha3 = xtrue)\nAM_CONDITIONAL(USE_MGF1, test x$mgf1 = xtrue)\nAM_CONDITIONAL(USE_FIPS_PRF, test x$fips_prf = xtrue)\nAM_CONDITIONAL(USE_GMP, test x$gmp = xtrue)\nAM_CONDITIONAL(USE_CURVE25519, test x$curve25519 = xtrue)\nAM_CONDITIONAL(USE_RDRAND, test x$rdrand = xtrue)\nAM_CONDITIONAL(USE_AESNI, test x$aesni = xtrue)\nAM_CONDITIONAL(USE_RANDOM, test x$random = xtrue)\nAM_CONDITIONAL(USE_NONCE, test x$nonce = xtrue)\nAM_CONDITIONAL(USE_X509, test x$x509 = xtrue)\nAM_CONDITIONAL(USE_REVOCATION, test x$revocation = xtrue)\nAM_CONDITIONAL(USE_CONSTRAINTS, test x$constraints = xtrue)\nAM_CONDITIONAL(USE_ACERT, test x$acert = xtrue)\nAM_CONDITIONAL(USE_PUBKEY, test x$pubkey = xtrue)\nAM_CONDITIONAL(USE_PKCS1, test x$pkcs1 = xtrue)\nAM_CONDITIONAL(USE_PKCS7, test x$pkcs7 = xtrue)\nAM_CONDITIONAL(USE_PKCS8, test x$pkcs8 = xtrue)\nAM_CONDITIONAL(USE_PKCS12, test x$pkcs12 = xtrue)\nAM_CONDITIONAL(USE_OPENXPKI, test x$openxpki = xtrue)\nAM_CONDITIONAL(USE_PGP, test x$pgp = xtrue)\nAM_CONDITIONAL(USE_DNSKEY, test x$dnskey = xtrue)\nAM_CONDITIONAL(USE_SSHKEY, test x$sshkey = xtrue)\nAM_CONDITIONAL(USE_PEM, test x$pem = xtrue)\nAM_CONDITIONAL(USE_HMAC, test x$hmac = xtrue)\nAM_CONDITIONAL(USE_KDF, test x$kdf = xtrue)\nAM_CONDITIONAL(USE_CMAC, test x$cmac = xtrue)\nAM_CONDITIONAL(USE_XCBC, test x$xcbc = xtrue)\nAM_CONDITIONAL(USE_MYSQL, test x$mysql = xtrue)\nAM_CONDITIONAL(USE_SQLITE, test x$sqlite = xtrue)\nAM_CONDITIONAL(USE_PADLOCK, test x$padlock = xtrue)\nAM_CONDITIONAL(USE_OPENSSL, test x$openssl = xtrue)\nAM_CONDITIONAL(USE_WOLFSSL, test x$wolfssl = xtrue)\nAM_CONDITIONAL(USE_GCRYPT, test x$gcrypt = xtrue)\nAM_CONDITIONAL(USE_BOTAN, test x$botan = xtrue)\nAM_CONDITIONAL(USE_AGENT, test x$agent = xtrue)\nAM_CONDITIONAL(USE_KEYCHAIN, test x$keychain = xtrue)\nAM_CONDITIONAL(USE_PKCS11, test x$pkcs11 = xtrue)\nAM_CONDITIONAL(USE_TPM, test x$tpm = xtrue)\nAM_CONDITIONAL(USE_CHAPOLY, test x$chapoly = xtrue)\nAM_CONDITIONAL(USE_CTR, test x$ctr = xtrue)\nAM_CONDITIONAL(USE_CCM, test x$ccm = xtrue)\nAM_CONDITIONAL(USE_GCM, test x$gcm = xtrue)\nAM_CONDITIONAL(USE_AF_ALG, test x$af_alg = xtrue)\nAM_CONDITIONAL(USE_DRBG, test x$drbg = xtrue)\nAM_CONDITIONAL(USE_ML, test x$ml = xtrue)\n\n#  charon plugins\n# ----------------\nAM_CONDITIONAL(USE_STROKE, test x$stroke = xtrue)\nAM_CONDITIONAL(USE_VICI, test x$vici = xtrue)\nAM_CONDITIONAL(USE_MEDSRV, test x$medsrv = xtrue)\nAM_CONDITIONAL(USE_MEDCLI, test x$medcli = xtrue)\nAM_CONDITIONAL(USE_UCI, test x$uci = xtrue)\nAM_CONDITIONAL(USE_OSX_ATTR, test x$osx_attr = xtrue)\nAM_CONDITIONAL(USE_P_CSCF, test x$p_cscf = xtrue)\nAM_CONDITIONAL(USE_ANDROID_DNS, test x$android_dns = xtrue)\nAM_CONDITIONAL(USE_ANDROID_LOG, test x$android_log = xtrue)\nAM_CONDITIONAL(USE_SMP, test x$smp = xtrue)\nAM_CONDITIONAL(USE_SQL, test x$sql = xtrue)\nAM_CONDITIONAL(USE_DNSCERT, test x$dnscert = xtrue)\nAM_CONDITIONAL(USE_IPSECKEY, test x$ipseckey = xtrue)\nAM_CONDITIONAL(USE_UPDOWN, test x$updown = xtrue)\nAM_CONDITIONAL(USE_DHCP, test x$dhcp = xtrue)\nAM_CONDITIONAL(USE_LOAD_TESTER, test x$load_tester = xtrue)\nAM_CONDITIONAL(USE_HA, test x$ha = xtrue)\nAM_CONDITIONAL(USE_KERNEL_NETLINK, test x$kernel_netlink = xtrue)\nAM_CONDITIONAL(USE_KERNEL_PFKEY, test x$kernel_pfkey = xtrue)\nAM_CONDITIONAL(USE_KERNEL_PFROUTE, test x$kernel_pfroute = xtrue)\nAM_CONDITIONAL(USE_KERNEL_LIBIPSEC, test x$kernel_libipsec = xtrue)\nAM_CONDITIONAL(USE_KERNEL_WFP, test x$kernel_wfp = xtrue)\nAM_CONDITIONAL(USE_KERNEL_IPH, test x$kernel_iph = xtrue)\nAM_CONDITIONAL(USE_WHITELIST, test x$whitelist = xtrue)\nAM_CONDITIONAL(USE_EXT_AUTH, test x$ext_auth = xtrue)\nAM_CONDITIONAL(USE_LOOKIP, test x$lookip = xtrue)\nAM_CONDITIONAL(USE_ERROR_NOTIFY, test x$error_notify = xtrue)\nAM_CONDITIONAL(USE_CERTEXPIRE, test x$certexpire = xtrue)\nAM_CONDITIONAL(USE_SYSTIME_FIX, test x$systime_fix = xtrue)\nAM_CONDITIONAL(USE_LED, test x$led = xtrue)\nAM_CONDITIONAL(USE_DUPLICHECK, test x$duplicheck = xtrue)\nAM_CONDITIONAL(USE_COUPLING, test x$coupling = xtrue)\nAM_CONDITIONAL(USE_RADATTR, test x$radattr = xtrue)\nAM_CONDITIONAL(USE_EAP_SIM, test x$eap_sim = xtrue)\nAM_CONDITIONAL(USE_EAP_SIM_FILE, test x$eap_sim_file = xtrue)\nAM_CONDITIONAL(USE_EAP_SIM_PCSC, test x$eap_sim_pcsc = xtrue)\nAM_CONDITIONAL(USE_EAP_SIMAKA_SQL, test x$eap_simaka_sql = xtrue)\nAM_CONDITIONAL(USE_EAP_SIMAKA_PSEUDONYM, test x$eap_simaka_pseudonym = xtrue)\nAM_CONDITIONAL(USE_EAP_SIMAKA_REAUTH, test x$eap_simaka_reauth = xtrue)\nAM_CONDITIONAL(USE_EAP_IDENTITY, test x$eap_identity = xtrue)\nAM_CONDITIONAL(USE_EAP_MD5, test x$eap_md5 = xtrue)\nAM_CONDITIONAL(USE_EAP_GTC, test x$eap_gtc = xtrue)\nAM_CONDITIONAL(USE_EAP_AKA, test x$eap_aka = xtrue)\nAM_CONDITIONAL(USE_EAP_AKA_3GPP, test x$eap_aka_3gpp = xtrue)\nAM_CONDITIONAL(USE_EAP_AKA_3GPP2, test x$eap_aka_3gpp2 = xtrue)\nAM_CONDITIONAL(USE_EAP_MSCHAPV2, test x$eap_mschapv2 = xtrue)\nAM_CONDITIONAL(USE_EAP_TLS, test x$eap_tls = xtrue)\nAM_CONDITIONAL(USE_EAP_TTLS, test x$eap_ttls = xtrue)\nAM_CONDITIONAL(USE_EAP_PEAP, test x$eap_peap = xtrue)\nAM_CONDITIONAL(USE_EAP_TNC, test x$eap_tnc = xtrue)\nAM_CONDITIONAL(USE_EAP_DYNAMIC, test x$eap_dynamic = xtrue)\nAM_CONDITIONAL(USE_EAP_RADIUS, test x$eap_radius = xtrue)\nAM_CONDITIONAL(USE_XAUTH_GENERIC, test x$xauth_generic = xtrue)\nAM_CONDITIONAL(USE_XAUTH_EAP, test x$xauth_eap = xtrue)\nAM_CONDITIONAL(USE_XAUTH_PAM, test x$xauth_pam = xtrue)\nAM_CONDITIONAL(USE_XAUTH_NOAUTH, test x$xauth_noauth = xtrue)\nAM_CONDITIONAL(USE_TNC_IFMAP, test x$tnc_ifmap = xtrue)\nAM_CONDITIONAL(USE_TNC_PDP, test x$tnc_pdp = xtrue)\nAM_CONDITIONAL(USE_TNC_IMC, test x$tnc_imc = xtrue)\nAM_CONDITIONAL(USE_TNC_IMV, test x$tnc_imv = xtrue)\nAM_CONDITIONAL(USE_TNC_TNCCS, test x$tnc_tnccs = xtrue)\nAM_CONDITIONAL(USE_TNCCS_11, test x$tnccs_11 = xtrue)\nAM_CONDITIONAL(USE_TNCCS_20, test x$tnccs_20 = xtrue)\nAM_CONDITIONAL(USE_TNCCS_DYNAMIC, test x$tnccs_dynamic = xtrue)\nAM_CONDITIONAL(USE_IMC_TEST, test x$imc_test = xtrue)\nAM_CONDITIONAL(USE_IMV_TEST, test x$imv_test = xtrue)\nAM_CONDITIONAL(USE_IMC_SCANNER, test x$imc_scanner = xtrue)\nAM_CONDITIONAL(USE_IMV_SCANNER, test x$imv_scanner = xtrue)\nAM_CONDITIONAL(USE_IMC_OS, test x$imc_os = xtrue)\nAM_CONDITIONAL(USE_IMV_OS, test x$imv_os = xtrue)\nAM_CONDITIONAL(USE_IMC_ATTESTATION, test x$imc_attestation = xtrue)\nAM_CONDITIONAL(USE_IMV_ATTESTATION, test x$imv_attestation = xtrue)\nAM_CONDITIONAL(USE_IMC_SWIMA, test x$imc_swima = xtrue)\nAM_CONDITIONAL(USE_IMV_SWIMA, test x$imv_swima = xtrue)\nAM_CONDITIONAL(USE_IMC_HCD, test x$imc_hcd = xtrue)\nAM_CONDITIONAL(USE_IMV_HCD, test x$imv_hcd = xtrue)\nAM_CONDITIONAL(USE_SAVE_KEYS, test x$save_keys = xtrue)\nAM_CONDITIONAL(USE_SOCKET_DEFAULT, test x$socket_default = xtrue)\nAM_CONDITIONAL(USE_SOCKET_DYNAMIC, test x$socket_dynamic = xtrue)\nAM_CONDITIONAL(USE_SOCKET_WIN, test x$socket_win = xtrue)\nAM_CONDITIONAL(USE_BYPASS_LAN, test x$bypass_lan = xtrue)\nAM_CONDITIONAL(USE_CONNMARK, test x$connmark = xtrue)\nAM_CONDITIONAL(USE_FORECAST, test x$forecast = xtrue)\nAM_CONDITIONAL(USE_FARP, test x$farp = xtrue)\nAM_CONDITIONAL(USE_ADDRBLOCK, test x$addrblock = xtrue)\nAM_CONDITIONAL(USE_UNITY, test x$unity = xtrue)\nAM_CONDITIONAL(USE_RESOLVE, test x$resolve = xtrue)\nAM_CONDITIONAL(USE_ATTR, test x$attr = xtrue)\nAM_CONDITIONAL(USE_ATTR_SQL, test x$attr_sql = xtrue)\nAM_CONDITIONAL(USE_COUNTERS, test x$counters = xtrue)\nAM_CONDITIONAL(USE_SELINUX, test x$selinux = xtrue)\nAM_CONDITIONAL(USE_PF_HANDLER, test x$dhcp = xtrue -o x$farp = xtrue)\n\n#  other options\n# ---------------\nAM_CONDITIONAL(USE_LEAK_DETECTIVE, test x$leak_detective = xtrue)\nAM_CONDITIONAL(USE_LOCK_PROFILER, test x$lock_profiler = xtrue)\nAM_CONDITIONAL(USE_FAST, test x$fast = xtrue)\nAM_CONDITIONAL(USE_MANAGER, test x$manager = xtrue)\nAM_CONDITIONAL(USE_ME, test x$mediation = xtrue)\nAM_CONDITIONAL(USE_INTEGRITY_TEST, test x$integrity_test = xtrue)\nAM_CONDITIONAL(USE_LOAD_WARNING, test x$load_warning = xtrue)\nAM_CONDITIONAL(USE_IKEV1, test x$ikev1 = xtrue)\nAM_CONDITIONAL(USE_IKEV2, test x$ikev2 = xtrue)\nAM_CONDITIONAL(USE_THREADS, test x$threads = xtrue)\nAM_CONDITIONAL(USE_ADNS, test x$adns = xtrue)\nAM_CONDITIONAL(USE_CHARON, test x$charon = xtrue)\nAM_CONDITIONAL(USE_NM, test x$nm = xtrue)\nAM_CONDITIONAL(USE_PKI, test x$pki = xtrue)\nAM_CONDITIONAL(USE_SCRIPTS, test x$scripts = xtrue)\nAM_CONDITIONAL(USE_FUZZING, test x$fuzzing = xtrue)\nAM_CONDITIONAL(USE_CONFTEST, test x$conftest = xtrue)\nAM_CONDITIONAL(USE_LIBSTRONGSWAN, test x$charon = xtrue -o x$pki = xtrue -o x$conftest = xtrue -o x$fast = xtrue -o x$imcv = xtrue -o x$nm = xtrue -o x$tkm = xtrue -o x$cmd = xtrue -o x$tls = xtrue -o x$tnc_tnccs = xtrue -o x$aikgen = xtrue -o x$svc = xtrue -o x$systemd = xtrue)\nAM_CONDITIONAL(USE_LIBCHARON, test x$charon = xtrue -o x$conftest = xtrue -o x$nm = xtrue -o x$tkm = xtrue -o x$cmd = xtrue -o x$svc = xtrue -o x$systemd = xtrue)\nAM_CONDITIONAL(USE_LIBIPSEC, test x$libipsec = xtrue)\nAM_CONDITIONAL(USE_LIBTNCIF, test x$tnc_tnccs = xtrue -o x$imcv = xtrue)\nAM_CONDITIONAL(USE_LIBTNCCS, test x$tnc_tnccs = xtrue)\nAM_CONDITIONAL(USE_LIBPTTLS, test x$tnc_tnccs = xtrue)\nAM_CONDITIONAL(USE_LIBTPMTSS, test x$tss_trousers = xtrue -o x$tss_tss2 = xtrue -o x$tpm = xtrue -o x$aikgen = xtrue -o x$imcv = xtrue)\nAM_CONDITIONAL(USE_FILE_CONFIG, test x$stroke = xtrue)\nAM_CONDITIONAL(USE_IPSEC_SCRIPT, test x$stroke = xtrue -o x$conftest = xtrue)\nAM_CONDITIONAL(USE_LIBCAP, test x$capabilities = xlibcap)\nAM_CONDITIONAL(USE_VSTR, test x$printf_hooks = xvstr)\nAM_CONDITIONAL(USE_BUILTIN_PRINTF, test x$printf_hooks = xbuiltin)\nAM_CONDITIONAL(USE_SIMAKA, test x$simaka = xtrue)\nAM_CONDITIONAL(USE_TLS, test x$tls = xtrue)\nAM_CONDITIONAL(USE_RADIUS, test x$radius = xtrue)\nAM_CONDITIONAL(USE_IMCV, test x$imcv = xtrue)\nAM_CONDITIONAL(USE_TROUSERS, test x$tss_trousers = xtrue)\nAM_CONDITIONAL(USE_TSS2, test x$tss_tss2 = xtrue)\nAM_CONDITIONAL(MONOLITHIC, test x$monolithic = xtrue)\nAM_CONDITIONAL(STATIC_PLUGIN_CONSTRUCTORS, test x$static_plugin_constructors = xtrue)\nAM_CONDITIONAL(USE_SILENT_RULES, test x$enable_silent_rules = xyes)\nAM_CONDITIONAL(COVERAGE, test x$coverage = xtrue)\nAM_CONDITIONAL(USE_DBGHELP, test x$dbghelp_backtraces = xtrue)\nAM_CONDITIONAL(USE_TKM, test x$tkm = xtrue)\nAM_CONDITIONAL(USE_CMD, test x$cmd = xtrue)\nAM_CONDITIONAL(USE_AIKGEN, test x$aikgen = xtrue)\nAM_CONDITIONAL(USE_SWANCTL, test x$swanctl = xtrue)\nAM_CONDITIONAL(USE_SVC, test x$svc = xtrue)\nAM_CONDITIONAL(USE_SYSTEMD, test x$systemd = xtrue)\nAM_CONDITIONAL(USE_LEGACY_SYSTEMD, test -n \"$systemdsystemunitdir\" -a \"x$systemdsystemunitdir\" != xno)\nAM_CONDITIONAL(USE_CERT_ENROLL, test x$cert_enroll = xtrue)\nAM_CONDITIONAL(USE_CERT_ENROLL_TIMER, test x$cert_enroll_timer = xtrue)\nAM_CONDITIONAL(USE_RUBY_GEMS, test x$ruby_gems = xtrue)\nAM_CONDITIONAL(USE_PYTHON_WHEELS, test x$python_wheels = xtrue)\nAM_CONDITIONAL(USE_PERL_CPAN, test x$perl_cpan = xtrue)\nAM_CONDITIONAL(USE_TOX, test \"x$TOX\" != x)\nAM_CONDITIONAL(USE_PY_TEST, test \"x$PY_TEST\" != x -a \"x$TOX\" = x)\n\n# ========================\n#  set global definitions\n# ========================\n\nif test x$mediation = xtrue; then\n\tAC_DEFINE([ME], [], [mediation extension support])\nfi\nif test x$capabilities = xlibcap -o x$capabilities = xnative; then\n\tAC_DEFINE([CAPABILITIES], [], [capability dropping support])\nfi\nif test x$log_thread_ids = xtrue; then\n\tAC_DEFINE([USE_THREAD_IDS], [], [use thread ID for thread identification, if available])\nfi\nif test x$monolithic = xtrue; then\n\tAC_DEFINE([MONOLITHIC], [], [monolithic build embedding plugins])\nfi\nif test x$static_plugin_constructors = xtrue; then\n\tAC_DEFINE([STATIC_PLUGIN_CONSTRUCTORS], [], [static plugin constructors])\nfi\nif test x$ikev1 = xtrue; then\n\tAC_DEFINE([USE_IKEV1], [], [support for IKEv1 protocol])\nfi\nif test x$ikev2 = xtrue; then\n\tAC_DEFINE([USE_IKEV2], [], [support for IKEv2 protocol])\nfi\nif test x$fuzzing = xtrue; then\n\tAC_DEFINE([USE_FUZZING], [], [build code for fuzzing])\nfi\nif test x$imc_swima = xtrue -o x$imv_swima = xtrue; then\n\tAC_DEFINE([USE_JSON], [], [build code for JSON])\nfi\n\n# ====================================================\n#  options for enabled modules (see conf/Makefile.am)\n# ====================================================\n\nstrongswan_options=\n\nAM_COND_IF([USE_AIKGEN], [strongswan_options=${strongswan_options}\" aikgen\"])\nAM_COND_IF([USE_ATTR_SQL], [strongswan_options=${strongswan_options}\" pool\"])\nAM_COND_IF([USE_CHARON], [strongswan_options=${strongswan_options}\" charon charon-logging\"])\nAM_COND_IF([USE_FILE_CONFIG], [strongswan_options=${strongswan_options}\" starter\"])\nAM_COND_IF([USE_IMV_ATTESTATION], [strongswan_options=${strongswan_options}\" attest\"])\nAM_COND_IF([USE_IMCV], [strongswan_options=${strongswan_options}\" imcv\"])\nAM_COND_IF([USE_IMV_SWIMA], [strongswan_options=${strongswan_options}\" sec-updater\"])\nAM_COND_IF([USE_LIBTNCCS], [strongswan_options=${strongswan_options}\" tnc\"])\nAM_COND_IF([USE_MANAGER], [strongswan_options=${strongswan_options}\" manager\"])\nAM_COND_IF([USE_MEDSRV], [strongswan_options=${strongswan_options}\" medsrv\"])\nAM_COND_IF([USE_PKI], [strongswan_options=${strongswan_options}\" pki\"])\nAM_COND_IF([USE_SWANCTL], [strongswan_options=${strongswan_options}\" swanctl\"])\nAM_COND_IF([USE_SYSTEMD], [strongswan_options=${strongswan_options}\" charon-systemd\"])\n\nAC_SUBST(strongswan_options)\n\n# =================\n#  build Makefiles\n# =================\n\nAC_CONFIG_FILES([\n\tMakefile\n\tconf/Makefile\n\tfuzz/Makefile\n\tman/Makefile\n\tinit/Makefile\n\tinit/systemd/Makefile\n\tinit/systemd-starter/Makefile\n\tsrc/Makefile\n\tsrc/include/Makefile\n\tsrc/libstrongswan/Makefile\n\tsrc/libstrongswan/plugins/aes/Makefile\n\tsrc/libstrongswan/plugins/cmac/Makefile\n\tsrc/libstrongswan/plugins/des/Makefile\n\tsrc/libstrongswan/plugins/blowfish/Makefile\n\tsrc/libstrongswan/plugins/rc2/Makefile\n\tsrc/libstrongswan/plugins/md4/Makefile\n\tsrc/libstrongswan/plugins/md5/Makefile\n\tsrc/libstrongswan/plugins/sha1/Makefile\n\tsrc/libstrongswan/plugins/sha2/Makefile\n\tsrc/libstrongswan/plugins/sha3/Makefile\n\tsrc/libstrongswan/plugins/mgf1/Makefile\n\tsrc/libstrongswan/plugins/fips_prf/Makefile\n\tsrc/libstrongswan/plugins/gmp/Makefile\n\tsrc/libstrongswan/plugins/curve25519/Makefile\n\tsrc/libstrongswan/plugins/rdrand/Makefile\n\tsrc/libstrongswan/plugins/aesni/Makefile\n\tsrc/libstrongswan/plugins/random/Makefile\n\tsrc/libstrongswan/plugins/nonce/Makefile\n\tsrc/libstrongswan/plugins/hmac/Makefile\n\tsrc/libstrongswan/plugins/kdf/Makefile\n\tsrc/libstrongswan/plugins/xcbc/Makefile\n\tsrc/libstrongswan/plugins/x509/Makefile\n\tsrc/libstrongswan/plugins/revocation/Makefile\n\tsrc/libstrongswan/plugins/constraints/Makefile\n\tsrc/libstrongswan/plugins/acert/Makefile\n\tsrc/libstrongswan/plugins/pubkey/Makefile\n\tsrc/libstrongswan/plugins/pkcs1/Makefile\n\tsrc/libstrongswan/plugins/pkcs7/Makefile\n\tsrc/libstrongswan/plugins/pkcs8/Makefile\n\tsrc/libstrongswan/plugins/pkcs12/Makefile\n\tsrc/libstrongswan/plugins/openxpki/Makefile\n\tsrc/libstrongswan/plugins/pgp/Makefile\n\tsrc/libstrongswan/plugins/dnskey/Makefile\n\tsrc/libstrongswan/plugins/sshkey/Makefile\n\tsrc/libstrongswan/plugins/pem/Makefile\n\tsrc/libstrongswan/plugins/curl/Makefile\n\tsrc/libstrongswan/plugins/files/Makefile\n\tsrc/libstrongswan/plugins/winhttp/Makefile\n\tsrc/libstrongswan/plugins/unbound/Makefile\n\tsrc/libstrongswan/plugins/soup/Makefile\n\tsrc/libstrongswan/plugins/ldap/Makefile\n\tsrc/libstrongswan/plugins/mysql/Makefile\n\tsrc/libstrongswan/plugins/sqlite/Makefile\n\tsrc/libstrongswan/plugins/padlock/Makefile\n\tsrc/libstrongswan/plugins/openssl/Makefile\n\tsrc/libstrongswan/plugins/wolfssl/Makefile\n\tsrc/libstrongswan/plugins/gcrypt/Makefile\n\tsrc/libstrongswan/plugins/botan/Makefile\n\tsrc/libstrongswan/plugins/agent/Makefile\n\tsrc/libstrongswan/plugins/keychain/Makefile\n\tsrc/libstrongswan/plugins/pkcs11/Makefile\n\tsrc/libstrongswan/plugins/chapoly/Makefile\n\tsrc/libstrongswan/plugins/ctr/Makefile\n\tsrc/libstrongswan/plugins/ccm/Makefile\n\tsrc/libstrongswan/plugins/gcm/Makefile\n\tsrc/libstrongswan/plugins/af_alg/Makefile\n\tsrc/libstrongswan/plugins/drbg/Makefile\n\tsrc/libstrongswan/plugins/ml/Makefile\n\tsrc/libstrongswan/plugins/test_vectors/Makefile\n\tsrc/libstrongswan/tests/Makefile\n\tsrc/libipsec/Makefile\n\tsrc/libipsec/tests/Makefile\n\tsrc/libsimaka/Makefile\n\tsrc/libtls/Makefile\n\tsrc/libtls/tests/Makefile\n\tsrc/libradius/Makefile\n\tsrc/libtncif/Makefile\n\tsrc/libtnccs/Makefile\n\tsrc/libtnccs/plugins/tnc_tnccs/Makefile\n\tsrc/libtnccs/plugins/tnc_imc/Makefile\n\tsrc/libtnccs/plugins/tnc_imv/Makefile\n\tsrc/libtnccs/plugins/tnccs_11/Makefile\n\tsrc/libtnccs/plugins/tnccs_20/Makefile\n\tsrc/libtnccs/plugins/tnccs_dynamic/Makefile\n\tsrc/libpttls/Makefile\n\tsrc/libimcv/Makefile\n\tsrc/libimcv/plugins/imc_test/Makefile\n\tsrc/libimcv/plugins/imv_test/Makefile\n\tsrc/libimcv/plugins/imc_scanner/Makefile\n\tsrc/libimcv/plugins/imv_scanner/Makefile\n\tsrc/libimcv/plugins/imc_os/Makefile\n\tsrc/libimcv/plugins/imv_os/Makefile\n\tsrc/libimcv/plugins/imc_attestation/Makefile\n\tsrc/libimcv/plugins/imv_attestation/Makefile\n\tsrc/libimcv/plugins/imc_swima/Makefile\n\tsrc/libimcv/plugins/imv_swima/Makefile\n\tsrc/libimcv/plugins/imc_hcd/Makefile\n\tsrc/libimcv/plugins/imv_hcd/Makefile\n\tsrc/charon/Makefile\n\tsrc/charon-nm/Makefile\n\tsrc/charon-tkm/Makefile\n\tsrc/charon-cmd/Makefile\n\tsrc/charon-svc/Makefile\n\tsrc/charon-systemd/Makefile\n\tsrc/libcharon/Makefile\n\tsrc/libcharon/plugins/eap_aka/Makefile\n\tsrc/libcharon/plugins/eap_aka_3gpp/Makefile\n\tsrc/libcharon/plugins/eap_aka_3gpp/tests/Makefile\n\tsrc/libcharon/plugins/eap_aka_3gpp2/Makefile\n\tsrc/libcharon/plugins/eap_dynamic/Makefile\n\tsrc/libcharon/plugins/eap_identity/Makefile\n\tsrc/libcharon/plugins/eap_md5/Makefile\n\tsrc/libcharon/plugins/eap_gtc/Makefile\n\tsrc/libcharon/plugins/eap_sim/Makefile\n\tsrc/libcharon/plugins/eap_sim_file/Makefile\n\tsrc/libcharon/plugins/eap_sim_pcsc/Makefile\n\tsrc/libcharon/plugins/eap_simaka_sql/Makefile\n\tsrc/libcharon/plugins/eap_simaka_pseudonym/Makefile\n\tsrc/libcharon/plugins/eap_simaka_reauth/Makefile\n\tsrc/libcharon/plugins/eap_mschapv2/Makefile\n\tsrc/libcharon/plugins/eap_tls/Makefile\n\tsrc/libcharon/plugins/eap_ttls/Makefile\n\tsrc/libcharon/plugins/eap_peap/Makefile\n\tsrc/libcharon/plugins/eap_tnc/Makefile\n\tsrc/libcharon/plugins/eap_radius/Makefile\n\tsrc/libcharon/plugins/xauth_generic/Makefile\n\tsrc/libcharon/plugins/xauth_eap/Makefile\n\tsrc/libcharon/plugins/xauth_pam/Makefile\n\tsrc/libcharon/plugins/xauth_noauth/Makefile\n\tsrc/libcharon/plugins/tnc_ifmap/Makefile\n\tsrc/libcharon/plugins/tnc_pdp/Makefile\n\tsrc/libcharon/plugins/save_keys/Makefile\n\tsrc/libcharon/plugins/socket_default/Makefile\n\tsrc/libcharon/plugins/socket_dynamic/Makefile\n\tsrc/libcharon/plugins/socket_win/Makefile\n\tsrc/libcharon/plugins/bypass_lan/Makefile\n\tsrc/libcharon/plugins/connmark/Makefile\n\tsrc/libcharon/plugins/counters/Makefile\n\tsrc/libcharon/plugins/forecast/Makefile\n\tsrc/libcharon/plugins/farp/Makefile\n\tsrc/libcharon/plugins/smp/Makefile\n\tsrc/libcharon/plugins/sql/Makefile\n\tsrc/libcharon/plugins/dnscert/Makefile\n\tsrc/libcharon/plugins/ipseckey/Makefile\n\tsrc/libcharon/plugins/medsrv/Makefile\n\tsrc/libcharon/plugins/medcli/Makefile\n\tsrc/libcharon/plugins/addrblock/Makefile\n\tsrc/libcharon/plugins/unity/Makefile\n\tsrc/libcharon/plugins/uci/Makefile\n\tsrc/libcharon/plugins/ha/Makefile\n\tsrc/libcharon/plugins/kernel_netlink/Makefile\n\tsrc/libcharon/plugins/kernel_pfkey/Makefile\n\tsrc/libcharon/plugins/kernel_pfroute/Makefile\n\tsrc/libcharon/plugins/kernel_libipsec/Makefile\n\tsrc/libcharon/plugins/kernel_wfp/Makefile\n\tsrc/libcharon/plugins/kernel_iph/Makefile\n\tsrc/libcharon/plugins/whitelist/Makefile\n\tsrc/libcharon/plugins/ext_auth/Makefile\n\tsrc/libcharon/plugins/lookip/Makefile\n\tsrc/libcharon/plugins/error_notify/Makefile\n\tsrc/libcharon/plugins/certexpire/Makefile\n\tsrc/libcharon/plugins/systime_fix/Makefile\n\tsrc/libcharon/plugins/led/Makefile\n\tsrc/libcharon/plugins/duplicheck/Makefile\n\tsrc/libcharon/plugins/coupling/Makefile\n\tsrc/libcharon/plugins/radattr/Makefile\n\tsrc/libcharon/plugins/osx_attr/Makefile\n\tsrc/libcharon/plugins/p_cscf/Makefile\n\tsrc/libcharon/plugins/android_dns/Makefile\n\tsrc/libcharon/plugins/android_log/Makefile\n\tsrc/libcharon/plugins/stroke/Makefile\n\tsrc/libcharon/plugins/vici/Makefile\n\tsrc/libcharon/plugins/vici/ruby/Makefile\n\tsrc/libcharon/plugins/vici/perl/Makefile\n\tsrc/libcharon/plugins/vici/python/Makefile\n\tsrc/libcharon/plugins/updown/Makefile\n\tsrc/libcharon/plugins/dhcp/Makefile\n\tsrc/libcharon/plugins/load_tester/Makefile\n\tsrc/libcharon/plugins/resolve/Makefile\n\tsrc/libcharon/plugins/attr/Makefile\n\tsrc/libcharon/plugins/attr_sql/Makefile\n\tsrc/libcharon/plugins/selinux/Makefile\n\tsrc/libcharon/tests/Makefile\n\tsrc/libtpmtss/Makefile\n\tsrc/libtpmtss/plugins/tpm/Makefile\n\tsrc/stroke/Makefile\n\tsrc/ipsec/Makefile\n\tsrc/starter/Makefile\n\tsrc/starter/tests/Makefile\n\tsrc/_updown/Makefile\n\tsrc/aikgen/Makefile\n\tsrc/tpm_extendpcr/Makefile\n\tsrc/pki/Makefile\n\tsrc/pki/man/Makefile\n\tsrc/pool/Makefile\n\tsrc/libfast/Makefile\n\tsrc/manager/Makefile\n\tsrc/medsrv/Makefile\n\tsrc/checksum/Makefile\n\tsrc/conftest/Makefile\n\tsrc/pt-tls-client/Makefile\n\tsrc/sw-collector/Makefile\n\tsrc/sec-updater/Makefile\n\tsrc/swanctl/Makefile\n\tsrc/cert-enroll/Makefile\n\tsrc/xfrmi/Makefile\n\tscripts/Makefile\n\ttesting/Makefile\n])\n\n# =================\n#  build man pages\n# =================\n\nAC_CONFIG_FILES([\n\tconf/strongswan.conf.5.head\n\tconf/strongswan.conf.5.tail\n\tman/ipsec.conf.5\n\tman/ipsec.secrets.5\n\tsrc/charon-cmd/charon-cmd.8\n\tsrc/pki/man/pki.1\n\tsrc/pki/man/pki---acert.1\n\tsrc/pki/man/pki---dn.1\n\tsrc/pki/man/pki---est.1\n\tsrc/pki/man/pki---estca.1\n\tsrc/pki/man/pki---gen.1\n\tsrc/pki/man/pki---issue.1\n\tsrc/pki/man/pki---keyid.1\n\tsrc/pki/man/pki---ocsp.1\n\tsrc/pki/man/pki---pkcs12.1\n\tsrc/pki/man/pki---pkcs7.1\n\tsrc/pki/man/pki---print.1\n\tsrc/pki/man/pki---pub.1\n\tsrc/pki/man/pki---req.1\n\tsrc/pki/man/pki---scep.1\n\tsrc/pki/man/pki---scepca.1\n\tsrc/pki/man/pki---self.1\n\tsrc/pki/man/pki---signcrl.1\n\tsrc/pki/man/pki---verify.1\n\tsrc/swanctl/swanctl.8\n\tsrc/swanctl/swanctl.conf.5.head\n\tsrc/swanctl/swanctl.conf.5.tail\n\tsrc/pt-tls-client/pt-tls-client.1\n\tsrc/sw-collector/sw-collector.8\n\tsrc/sec-updater/sec-updater.8\n\tsrc/cert-enroll/cert-enroll.8\n])\n\nAC_OUTPUT\n\n# ========================\n#  report enabled plugins\n# ========================\n\nAC_MSG_RESULT([])\nAC_MSG_RESULT([ strongSwan will be built with the following plugins])\nAC_MSG_RESULT([-----------------------------------------------------])\n\nAC_MSG_RESULT([libstrongswan:$s_plugins])\nAC_MSG_RESULT([libcharon:    $c_plugins])\nAC_MSG_RESULT([libtnccs:     $t_plugins])\nAC_MSG_RESULT([libtpmtss:    $p_plugins])\nAC_MSG_RESULT([])\n"
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "init",
          "type": "tree",
          "content": null
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "sonar-project.properties",
          "type": "blob",
          "size": 1.6005859375,
          "content": "# exclude these files completely\nsonar.exclusions=\\\n\tsrc/manager/templates/static/jquery.js, \\\n\tsrc/include/linux/**, \\\n\tsrc/frontends/**, \\\n\t**/data.sql, \\\n\t**/test.sql, \\\n\t**/tables.sql, \\\n\t**/ipsec.sql\n\n# don't report duplications in these files\nsonar.cpd.exclusions=\\\n\tsrc/libstrongswan/crypto/proposal/proposal_keywords_static.c, \\\n\tsrc/libstrongswan/settings/settings_parser.*, \\\n\tsrc/libstrongswan/settings/settings_lexer.c, \\\n\tsrc/starter/keywords.c, \\\n\tsrc/starter/parser/parser.*, \\\n\tsrc/starter/parser/lexer.c, \\\n\tsrc/stroke/stroke_keywords.c, \\\n\t**/suites/test_*.c, \\\n\t**/data.sql\n\n# the following settings are officially only available via UI\n\n# ignore issues in these generated files\nsonar.issue.ignore.allfile=a1,a2,a3\nsonar.issue.ignore.allfile.a1.fileRegexp=generated by flex\nsonar.issue.ignore.allfile.a2.fileRegexp=made by GNU Bison\nsonar.issue.ignore.allfile.a3.fileRegexp=produced by gperf\n\n# ignore some rules\nsonar.issue.ignore.multicriteria=m1,m2,m3,m4,m5,m6\nsonar.issue.ignore.multicriteria.m1.ruleKey=c:S1659\nsonar.issue.ignore.multicriteria.m1.resourceKey=**/*\nsonar.issue.ignore.multicriteria.m2.ruleKey=c:S923\nsonar.issue.ignore.multicriteria.m2.resourceKey=**/*\nsonar.issue.ignore.multicriteria.m3.ruleKey=c:S936\nsonar.issue.ignore.multicriteria.m3.resourceKey=**/*\nsonar.issue.ignore.multicriteria.m4.ruleKey=c:S1172\nsonar.issue.ignore.multicriteria.m4.resourceKey=**/*\nsonar.issue.ignore.multicriteria.m5.ruleKey=plsql:SingleLineCommentsSyntaxCheck\nsonar.issue.ignore.multicriteria.m5.resourceKey=**/*\nsonar.issue.ignore.multicriteria.m6.ruleKey=c:S5270\nsonar.issue.ignore.multicriteria.m6.resourceKey=**/*\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "testing",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}