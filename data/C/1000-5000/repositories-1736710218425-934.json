{
  "metadata": {
    "timestamp": 1736710218425,
    "page": 934,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "scanmem/scanmem",
      "stars": 1608,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.7353515625,
          "content": "# Compiled program\n/scanmem\n\n# Auto-generated files\n*.o\n*.lo\n*.la\n.deps\n.libs\nm4\nautom4te.cache\nconfig.h*\nconfigure\nMakefile\nMakefile.in\naclocal.m4\ncompile\nconfig.guess\nconfig.log\nconfig.status\nconfig.sub\ndepcomp\ninstall-sh\nlibtool\nltmain.sh\nmissing\npy-compile\nstamp-h1\ntags\ntest-driver\n\n# GameConqueror\ngui/org.scanmem.gameconqueror.metainfo.xml\ngui/org.scanmem.gameconqueror.desktop\ngui/consts.py\ngui/*.pyc\ngui/*.pyo\ngui/__pycache__\ngui/gameconqueror\ngui/org.freedesktop.gameconqueror.policy\ngui/org.freedesktop.gameconqueror.policy.in\n\n# Translations\npo/.intltool-merge-cache\npo/GameConqueror.pot\npo/Makefile.in.in\npo/POTFILES\npo/*.gmo\npo/stamp-it\n\n# Android builds\n# libreadline and ncurses downloads and links\nreadline-*\nncurses-*\nreadline\nncurses\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.6923828125,
          "content": "## Release 0.17\n\n# Author list from `git shortlog -sen --no-merges`\n# Duplicates removed and Tavis put manually on top.\n\nTavis Ormandy           <taviso(a)sdf.lonestar.org>\nLu Wang                 <coolwanglu(a)gmail.com>\nAndrea Stacchiotti      <andreastacchiotti(a)gmail.com>\nSebastian Parschauer    <s.parschauer(a)gmx.de>\nIgor Gnatenko           <i.gnatenko.brain(a)gmail.com>\nMattias MÃ¼nster         <mattiasmun(a)gmail.com>\nJonathan Pelletier      <funmungus(a)gmail.com>\nBijan Kazemi-Shirkadeh  <bkazemi(a)users.sf.net>\nEli Dupree              <elidupree(a)charter.net> \n\n\n# Current maintainers:\n\nAndrea Stacchiotti      <andreastacchiotti(a)gmail.com>\nSebastian Parschauer    <s.parschauer(a)gmx.de>\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 34.3232421875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 7.6845703125,
          "content": "2016-04-28 Sebastian Parschauer <s.parschauer@gmx.de>\n\t* See https://github.com/scanmem/scanmem/releases for new releases\n\n2012-03-26 WANG Lu <coolwanglu(a)gmail.com>\n\t* Fix for '!=' as 'not equal to'\n\t* Typo\t\n\t* Option 'dump_with_ascii' added (Thanks to sec)\n\n2011-12-16 WANG Lu <coolwanglu(a)gmail.com>\n\t* Support wildcards when writing bytearrays\n\t[Thanks to Incarus6]\n\t* Delete an item upon DELETE key is pressed\n\t* Copy address & cheatlist reorderable\n\n2011-08-16 WANG Lu <coolwanglu(a)gmail.com>\n\t* Fix freeze after switching the target process\n\n2011-08-15 WANG Lu <coolwanglu(a)gmail.com>\n\t* Improve the process selection dialog\n\t* Make tooltip for the 'Value' label more obvious \n\n2011-08-02 WANG Lu <coolwanglu(a)gmail.com>\n\t* Fix memory browser\n\n2011-07-08 WANG Lu <coolwanglu(a)gmail.com>\n\t* Fix manpage\n\t* Fix process list displaying (Issue 26)\n\n2011-03-14 WANG Lu <coolwanglu(a)gmail.com>\n\t* Ignore empty input at cheatlist\n\t* Process list dialog is resizable\n\n2011-01-13 WANG Lu <coolwanglu(a)gmail.com>\n\t* Run as root\n\t* Skip when readlink on /proc/pid/exe fails\n\t* Added a script for building packages for PPA\n\n2011-01-12 WANG Lu <coolwanglu(a)gmail.com>\n\t* Using pager when showing help messages\n\n2011-01-11 WANG Lu <coolwanglu(a)gmail.com>\n\t* Check version of scanmem right after GameConqueror starts\n\t\n2010-09-19 WANG Lu <coolwanglu(a)gmail.com>\n\t* Fixed memory leak\n\t* Set monospace font to the lists\n\t* Fixed value parsing for strings\n\n2010-05-22 Wang Lu <coolwanglu(a)gmail.com>\n\t* Fixed `set' command\n\n2010-05-16 Wang Lu <coolwanglu(a)gmail.com>\n\t* Fixed build on FreeBSD\n\t* Bug fixed: freezing when scanning multiple variables\n\n2010-04-28 Wang Lu <coolwanglu(a)gmail.com>\n\t* Bug fixed: dump_to_file\n\t[Thanks to Bryan Cain]\n\t* Manually add a cheat entry\n\t* Update values in the lists\n\n2010-01-19 WANG Lu <coolwanglu(a)gmail.com>\n\t* Bug fixed: read /proc/<pid>/mem on 32bit machines\n\t* Bug fixed: scan for double variables on 32bit machines\n\t* a little improvement on peekbuf\n\t* Better communication, replace readline with printf when running as\n      backend\n\t* `scan for address` supported\n\n2010-01-16 WANG Lu <coolwanglu(a)gmail.com>\n\t* Memory Editor\n\t* Fix copyright strings (again)\n\t* new 'dump' command\n\n2010-01-12 WANG Lu <coolwanglu(a)gmail.com>\n\t* Bugs fixed\n \t* Better DEFAULT_LONGDOC\n\t* Better GUI\n\t* Better communication between GUI & backend\n\t* Progress bar in GUI\n\t* Several other UI improvement\n\n2010-01-10 WANG Lu <coolwanglu(a)gmail.com>\n\t* STRING supported\n\t* Fixed a bug relacted to match_flag, now match_flags seems to be\n      `dangerous` since I made it a union now.\n\t* Fixed a memory bug in target_memory_info_array.c\n\n2010-01-09 WANG Lu <coolwanglu(a)gmail.com>\n    * BYTEARRAY supported, oh yeah\n\n2010-01-07 WANG Lu <coolwanglu(a)gmail.com>\n\t* Added uservalue_t and clean up some value_t, this make it more flexible,\n\t  and make it possible to support more data types and even user-specific\n\t  scan routine\n\t* in scan routines old_value and user_value are both provided\n\t* clean up MATCHES_AND_VALUES stuff, since currently we don't use MATCHES\n\t  or VALUES\n\t* removed snapshot and use MATCHANY instead, such that this can be used to\n      filter out data types\n\t* now user can provide float numbers\n\t* INCREASEDBY and DECREASEDBY support\n    \n2010-01-06 WANG Lu <coolwanglu(a)gmail.com>\n    * Fixed detection of reverse change, but it's now working partially, see\n\t  comments in `help option`\n\t* MATCHANY can be used to filter out types now\n\t* GREATERTHAN & LESSTHAN supported\n\n2010-01-03 WANG Lu <coolwanglu(a)gmail.com>\n    * better GUI\n\t* support scanning for a speicific type of data\n\t* autotools-ized gui\n\t* added an option to determine which regions to be searched\n\n2009-12-20 WANG Lu <coolwanglu(a)gmail.com>\n\t* basic float/double support\n\t* fixed a peek buffer bug, that the buffer is not shifted correctly\n    * change format of some commands for the front-end\n\t* added a new 'write' command\n\t* fixed a data overwritten issue (Issue 1)\n\nxxxx-xx-xx Tavis Ormandy <taviso@sdf.lonestar.org>\n    * fixed infinite loop if a command was just leading whitespace.\n    * add message to configure script about `libreadline-dev` package.\n    * correct some typos reported by debian.\n\n2007-06-07 Tavis Ormandy <taviso@sdf.lonestar.org>\n    * make license clearer, added gpl notice to all source files, and added a show command.\n        - eg, show copying, show warranty, etc.\n    * handle unspecified value in set properly, eg set /4\n    * autotooled the build process.\n    * fixed bug where unaligned variables might be missed at end of region.\n    * begin testsuite using dejagnu, to help prevent any regressions in future.\n    * use /proc/pid/mem if available.\n\n2007-04-08 Tavis Ormandy <taviso@sdf.lonestar.org>\n    * corrected lots of lint errors.\n    * include copy of GPL in COPYING file.\n    * use more EXPECT().\n    * fixed two memory leaks (very small).\n    * much more scalable commandline parsing, simple switch/case was getting too unwieldy.\n    * deprecated cont command, and re-wrote set to make it much more powerful.\n        - use set x/y instead of cont, cont will print a warning if you try to use it.\n    * preliminary support for float type (WARNING: experimental)\n    * implemented simple custom completer for readline, so tab completion now works for commands.\n        - arguments will work with completion in next version.\n    * massive improvements to online help, each command can register its own documentation.\n        - example : `help set` will now print detailed usage information.\n    * added quick shell escape support (shell command).\n    * added interrupt support to commands that continue until stopped.\n    * changed the format of list output, which now has a set of flags that represent\n      the possible formats that this variable could be, eg 'CSi' means could be a char\n       or a short, but cant be an int.\n    * new command `watch` that monitors how a variable changes.\n    * updated manual\n    \n2007-03-04 Tavis Ormandy <taviso@sdf.lonestar.org>\n    * buffered overlapping peeks to improve scan performance.\n    * automatically support chars, shorts and ints.\n        - removed width command\n    * pid command can change target.\n    * = command, to accompany < and > to indicate variable has not changed.\n    * snapshot command to enhance <, > and =. WARNING: experimental, very inefficient.\n        - snapshot will use a more efficient format next version, right now it\n          should not be used on large programs, or will eat all your free memory.\n\n2007-01-11 Tavis Ormandy <taviso@sdf.lonestar.org>\n    * cleaned up some lintian errors\n    * used __builtin_expect() to try to improve performance in some areas\n    * minor UI tweaks, give region counts during scan.\n    * start using readline(), should implement completion at some point.\n    * fixed memory leak.\n\n2006-11-16 Tavis Ormandy <taviso@sdf.lonestar.org>\n    * Made buffer management more intelligent.\n    * Add commands to list and delete regions (lregions, dregion).\n    * Add commands to indicate variable has increased or decreased (<, >).\n    * Improved usability of set, cont, list, etc.\n    * Add progress meter, large programs can take a long time for initial scan.\n    * Testing support for variable width targets, signedness not currenlty handled.\n    * delete command to eliminate matches.\n    * list command now shows where a variable is located.\n    * General code cleanup.\n    * Eliminate useless command line options, use interactive versions instead.\n    * Improved documentation.\n\n2006-11-14 Tavis Ormandy <taviso@sdf.lonestar.org>\n    * Applied patch from Brian Lewis <bsl04 (at) uark.edu>\n    * Install signal handler to detach from target on sigint/sighup/sigquit.\n    * Improved Makefile\n    * Added initial man page\n\n2006-11-13 Tavis Ormandy <taviso@sdf.lonestar.org>\n    * Initial version\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 1.3232421875,
          "content": "ACLOCAL_AMFLAGS = -I m4\n\nSUBDIRS = test\n\nif ENABLE_GUI\n  SUBDIRS += po gui\nendif\n\n# '-O2 -g' are added by `configure`, unless the user overrides CFLAGS\nAM_CFLAGS = -std=gnu99 -Wall\n\n# Utilities library, statically linked in sm and libsm\nnoinst_LTLIBRARIES = libutil.la\nlibutil_la_SOURCES = common.h \\\n    common.c \\\n    show_message.c\n\n# libscanmem\nlib_LTLIBRARIES = libscanmem.la\n\nlibscanmem_la_includedir = $(includedir)/scanmem\n\nlibscanmem_la_include_HEADERS = commands.h \\\n    list.h \\\n    maps.h \\\n    scanmem.h \\\n    scanroutines.h \\\n    show_message.h \\\n    targetmem.h \\\n    value.h\n\nlibscanmem_la_SOURCES = commands.c \\\n    ptrace.c \\\n    handlers.h \\\n    handlers.c \\\n    interrupt.h \\\n    interrupt.c \\\n    licence.h \\\n    maps.c \\\n    scanmem.c \\\n    scanroutines.c \\\n    sets.h \\\n    sets.c \\\n    targetmem.c \\\n    value.c \n\nif !HAVE_GETLINE\n  libscanmem_la_SOURCES += getline.h \\\n      getline.c\nendif\n\nlibscanmem_la_LIBADD = libutil.la\n\nlibscanmem_la_LDFLAGS = -version-info 1:0:0 \\\n                        -export-symbols-regex '^sm_'\n\n# scanmem CLI\nbin_PROGRAMS = scanmem\n\nscanmem_SOURCES = menu.h \\\n    menu.c \\\n    main.c\n\nif !WITH_READLINE\n  scanmem_SOURCES += readline.h \\\n      readline.c\nendif\n\nscanmem_LDADD = libutil.la libscanmem.la\n\n# Misc\ndist_man_MANS = scanmem.1\ndist_doc_DATA = README\n\nEXTRA_DIST = gpl-3.0.txt lgpl-3.0.txt\n"
        },
        {
          "name": "NEWS",
          "type": "blob",
          "size": 0.056640625,
          "content": "See https://github.com/scanmem/scanmem/releases for news.\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 0.0087890625,
          "content": "README.md"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.2392578125,
          "content": "# ![](https://raw.githubusercontent.com/scanmem/scanmem/main/gui/GameConqueror_72x72.png)scanmem & GameConqueror\n\n[![Build Status](https://travis-ci.org/scanmem/scanmem.svg?branch=main)](https://travis-ci.org/scanmem/scanmem)\n[![Coverity Status](https://scan.coverity.com/projects/8565/badge.svg?flat=1\")](https://scan.coverity.com/projects/scanmem)\n\nscanmem is a debugging utility designed to isolate the address of an arbitrary\nvariable in an executing process. scanmem simply needs to be told the pid of\nthe process and the value of the variable at several different times.\n\nAfter several scans of the process, scanmem isolates the position of the\nvariable and allows you to modify its value.\n\n## GUI\n\nGameConqueror is a GUI front-end for scanmem, providing more features, such as:\n  * Flexible syntax for searching\n  * Easier and multiple variable locking\n  * Better process finder\n  * Memory browser/editor\n\nSee [gui/README.md](gui/README.md) for more details.\n\n## Requirements\n\nscanmem requires libreadline to read commands interactively, and `/proc` must be\nmounted. GameConqueror requirements are documented in [gui/README.md](gui/README.md).\n\n## Documentation\n\nTo read documentation:\n  * `man scanmem`\n  * `man gameconqueror`\n  * `scanmem --help`\n  * enter `help` at the scanmem prompt\n  * use the interactive help of GameConqueror\n\n## Build Requirements\n\nThe build requires autotools-dev, libtool, libreadline-dev, intltool, and python.\n\n## Build and Install\n\nTo generate files required for the build:\n\n    ./autogen.sh\n\nTo build with GUI:\n\n    ./configure --prefix=/usr --enable-gui && make\n    sudo make install\n\nTo build without GUI:\n\n    ./configure --prefix=/usr && make\n    sudo make install\n\nscanmem and GameConqueror use static paths to libscanmem. So executing\n`ldconfig` is not required. Consider setting `--libdir=/usr/lib/scanmem` or\n`--libdir=/usr/lib64/scanmem` to avoid that libscanmem is in a library\nsearch path.\n\nRun `./configure --help` for more details.\n\n## Android Build\n\nYou need a\n[standalone toolchain of Android NDK](https://developer.android.com/ndk/guides/standalone_toolchain.html#itc)\n(Advanced method) to build interactive capabilities for Android.\nFor more information, run:\n\n    ./build_for_android.sh help\n\n## License: \n\nGPLv3, LGPLv3 for libscanmem\n"
        },
        {
          "name": "TODO",
          "type": "blob",
          "size": 0.4560546875,
          "content": "Current\n=======\n* option: whether to search in readonly regions\n* reduce memory consumption (e.g. OVaMI padding)\n\n* see: https://github.com/scanmem/scanmem/issues for further TODOs\n\nFuture\n======\n* use PT_IO on freebsd, instead of PT_READ/WRITE_D\n* add working freebsd support\n* in targetmem.c, check return value of allocate_enough_to_reach everywhere\n* search for values in files? (eg saved state)\n* macro support\n* automatically support zero and one based values.\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 0.8759765625,
          "content": "#!/bin/sh\n\nLIBTOOLIZE=libtoolize\nif [ \"$(uname -s)\" = \"Darwin\" ]; then\n    LIBTOOLIZE=glibtoolize  # install via brew\nfi\n\necho \"+ running $LIBTOOLIZE ...\"\n$LIBTOOLIZE -c || {\n    echo\n    echo \"$LIBTOOLIZE failed - check that it is present on system\"\n    exit 1\n}\necho \"+ running aclocal ...\"\naclocal -I m4 || {\n    echo\n    echo \"aclocal failed - check that all needed development files\"\\\n         \"are present on system\"\n    exit 1\n}\necho \"+ running autoheader ... \"\nautoheader || {\n    echo\n    echo \"autoheader failed\"\n    exit 1\n}\necho \"+ running autoconf ... \"\nautoconf || {\n    echo\n    echo \"autoconf failed\"\n    exit 1\n}\necho \"+ running intltoolize ...\"\nintltoolize -f -c --automake || {\n    echo\n    echo \"intltoolize failed - check that it is present on system\"\n    exit 1\n}\necho \"+ running automake ... \"\nautomake -c --add-missing || {\n    echo\n    echo \"automake failed\"\n    exit 1\n}\n"
        },
        {
          "name": "build_for_android.sh",
          "type": "blob",
          "size": 5.28125,
          "content": "#!/bin/sh\n\nif [ \"x$1\" = \"x--help\" ] || [ \"x$1\" = \"xhelp\" ] || [ \"x$1\" = \"x-h\" ]; then\n    echo \"\n  ## Before building:\n      # Run autogen.sh if \\\"./configure\\\" does not exist.\n      # From scanmem source directory\n      ./autogen.sh\n\n  ## For libreadline support:\n      # HOST is the compiler architecture for your toolchain and Android\n      # device. (e.g. arm-linux-androideabi)\n      # NDK_STANDALONE_TOOLCHAIN is the directory of your NDK standalone\n      # toolchain.\n\n      # Install libreadline to your NDK sysroot.\n      # From libreadline source directory, execute:\n      export PATH=\\\"\\$NDK_STANDALONE_TOOLCHAIN/bin:\\$PATH\\\"\n      bash_cv_wcwidth_broken=false ./configure --host=\\\"\\$HOST\\\" \\\\\n          --disable-shared --enable-static \\\\\n          --prefix=\\\"\\$NDK_STANDALONE_TOOLCHAIN/sysroot/usr\\\"\n      make\n      make install\n\n      # Install ncurses to your NDK sysgen.\n      # From ncurses source directory, execute:\n      export PATH=\\\"\\$NDK_STANDALONE_TOOLCHAIN/bin:\\$PATH\\\"\n      ac_cv_header_locale_h=no ./configure --host=\\\"\\$HOST\\\" \\\\\n          --disable-shared --enable-static \\\\\n          --prefix=\\\"\\$NDK_STANDALONE_TOOLCHAIN/sysroot/usr\\\"\n      make\n      make install\n\n  ## Building for Android 5.0 and above requires exporting PIE flags, such as:\n      export CFLAGS=\"-fPIE\" LDFLAGS=\"-pie\"\n\n  ## To build with standalone toolchain:\n      export NDK_STANDALONE_TOOLCHAIN=\\\"/your/toolchain/path\\\"\n      export HOST=\\\"your-androideabi\\\" # Default arm-linux-androideabi\n      ./build_for_android.sh\n\n  ## Advanced features and Environment variables that may be set...\n  NDK_STANDALONE_TOOLCHAIN - A standalone toolchain is required to build full\n      capabilities.\n  HOST                     - Compiler architecture that will be used for\n      cross-compiling, default is arm-linux-androideabi\n  SCANMEM_HOME             - Path which has scanmem sources, and will be used\n      to build scanmem.  Default current directory\n  LIBREADLINE_DIR          - Path which has libreadline sources to build\n      automatically.  Default is to download sources\n  NCURSES_DIR              - Path which has ncurses sources to build\n      automatically.  Default is to download sources\n\"\n  exit 0\nfi\n\n# Resolve ndk toolchain or other\nif [ \"x${NDK_STANDALONE_TOOLCHAIN}\" = \"x\" ]; then\n  echo \"NDK_STANDALONE_TOOLCHAIN was not found.\nPlease enter the toolchain path:\"\n  read NDK_STANDALONE_TOOLCHAIN\n  # Nothing entered\n  if [ \"x${NDK_STANDALONE_TOOLCHAIN}\" = \"x\" ]; then\n    echo \"Error: Please set \\$NDK_STANDALONE_TOOLCHAIN env variable.\" 1>&2\n    exit 1\n  fi\nfi\nexport SYSROOT=\"${NDK_STANDALONE_TOOLCHAIN}/sysroot\"\nexport PATH=\"${NDK_STANDALONE_TOOLCHAIN}/bin:${PATH}\"\n\n# Host architecture\nif [ \"x${HOST}\" = \"x\" ]; then\n  HOST=arm-linux-androideabi\n  echo \"Env variable \\$HOST, host architecture, is not specified.\nDefaulting to ${HOST}\"\nfi\n\n# Build and return directory\nif [ \"x${SCANMEM_HOME}\" = \"x\" ]; then\n  export SCANMEM_HOME=\"$(pwd)\"\nelse\n  cd \"${SCANMEM_HOME}\"\nfi\n\n# Processor count for make instructions\nprocnum=\"$(getconf _NPROCESSORS_ONLN)\"\nif [ \"x${procnum}\" = \"x\" ] || [ $procnum -eq 0 ]; then\n  procnum=1\nfi\n\n# Do not fail for source downloads, workarounds may be found for broken links\nif [ ! -f \"${SYSROOT}/usr/lib/libreadline.a\" ]; then\n  # Build libreadline for android\n  if [ \"x${LIBREADLINE_DIR}\" = \"x\" ]; then\n    echo \"LIBREADLINE_DIR was not found.  Please enter the path where\nlibreadline source is located, or press enter to try a source download:\"\n    read LIBREADLINE_DIR\n    if [ \"x${LIBREADLINE_DIR}\" = \"x\" ]; then\n      echo \"Downloading libreadline...\"\n      if [ ! -f readline-6.3.tar.gz ]; then\n        wget -c ftp://ftp.gnu.org/gnu/readline/readline-6.3.tar.gz\n      fi\n      tar xvf readline-6.3.tar.gz\n      export LIBREADLINE_DIR=\"$(pwd)/readline-6.3\"\n    fi\n  fi\n  cd \"${LIBREADLINE_DIR}\"\n  bash_cv_wcwidth_broken=false ./configure --host=\"${HOST}\" \\\n      --disable-shared --enable-static --prefix=\"${SYSROOT}/usr\"\n  make -j ${procnum}\n  make install\n  cd \"${SCANMEM_HOME}\"\n  # To make sure headers can be found\n  if [ ! -f readline ]; then\n    ln -s \"${LIBREADLINE_DIR}\" readline\n  fi\nfi\n\n# ncurses, same logic as libreadline\nif [ ! -f \"${SYSROOT}/usr/lib/libncurses.a\" ]; then\n  # Build libncurses for android (needed by libreadline)\n  if [ \"x${NCURSES_DIR}\" = \"x\" ]; then\n    echo \"NCURSES_DIR was not found.  Please enter the path where\nncurses source is located, or press enter to try a source download:\"\n    read NCURSES_DIR\n    if [ \"x${NCURSES_DIR}\" = \"x\" ]; then\n      echo \"Downloading ncurses...\"\n      if [ ! -f ncurses-6.0.tar.gz ]; then\n        wget -c http://invisible-mirror.net/archives/ncurses/ncurses-6.0.tar.gz\n      fi\n      tar xvf ncurses-6.0.tar.gz\n      export NCURSES_DIR=\"$(pwd)/ncurses-6.0\"\n    fi\n  fi\n  cd \"${NCURSES_DIR}\"\n  ac_cv_header_locale_h=no ./configure --host=\"${HOST}\" \\\n      --disable-shared --enable-static --prefix=\"${SYSROOT}/usr\"\n  make -j ${procnum}\n  make install\n  cd \"${SCANMEM_HOME}\"\n  # To make sure headers can be found\n  if [ ! -f ncurses ]; then\n    ln -s \"${NCURSES_DIR}\" ncurses\n  fi\nfi\n\n# Build scanmem for android\nif [ \"$(uname -s)\" = \"Darwin\" ]; then\n  PATH=/usr/local/opt/gettext/bin:${PATH} # brew install gettext\nfi\nLIBS=\"-lncurses -lm\" ./configure --host=\"${HOST}\" --prefix=\"${SYSROOT}/usr\" \\\n    --enable-static --disable-shared\n[ \"$?\" != \"0\" ] && exit 1\nmake -j ${procnum} && make install\n"
        },
        {
          "name": "commands.c",
          "type": "blob",
          "size": 7.5634765625,
          "content": "/*\n    Registration and general execution of commands.\n\n    Copyright (C) 2006,2007,2009 Tavis Ormandy <taviso@sdf.lonestar.org>\n    Copyright (C) 2009           Eli Dupree <elidupree@charter.net>\n    Copyright (C) 2009,2010      WANG Lu <coolwanglu@gmail.com>\n    Copyright (C) 2018           Sebastian Parschauer <s.parschauer@gmx.de>\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#ifndef _GNU_SOURCE\n# define _GNU_SOURCE\n#endif\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <getopt.h>\n#include <assert.h>\n#include <strings.h>\n#include <string.h>\n#include <stdbool.h>\n#include <ctype.h>\n\n#include \"commands.h\"\n#include \"common.h\"\n#include \"show_message.h\"\n\nstatic void free_completions(list_t *list)\n{\n    element_t *np = list->head;\n    completion_t *compl = NULL;\n\n    while (np) {\n        compl = np->data;\n        np = np->next;\n        if (!compl)\n            continue;\n        if (compl->list) {\n            free_completions(compl->list);\n            l_destroy(compl->list);\n            compl->list = NULL;\n        }\n        if (compl->word) {\n            free(compl->word);\n            compl->word = NULL;\n        }\n    }\n}\n\nvoid sm_free_all_completions(list_t *commands)\n{\n    element_t *np = commands->head;\n    command_t *command = NULL;\n\n    while (np) {\n        command = np->data;\n        np = np->next;\n        if (command && command->completions) {\n            free_completions(command->completions);\n            l_destroy(command->completions);\n        }\n    }\n}\n\nstatic bool add_completion(list_t *wlist, char **start, size_t wlen)\n{\n    char *word = NULL;\n    completion_t *compl = NULL;\n\n    word = malloc(wlen + 1);\n    if (!word)\n        goto err;\n    compl = calloc(1, sizeof(completion_t));\n    if (!compl)\n        goto err_free;\n    memcpy(word, *start, wlen);\n    word[wlen] = '\\0';\n    *start += wlen + 1;\n    compl->word = word;\n    if (l_append(wlist, NULL, compl) == -1)\n        goto err_free;\n\n    return true;\nerr_free:\n    if (compl)\n        free(compl);\n    if (word)\n        free(word);\nerr:\n    return false;\n}\n\nstatic list_t *init_subcmdlist(command_t *command, const char *complstr)\n{\n    char *cpos, *bopos = NULL, *bcpos = NULL;\n    char *start = (char *)complstr;\n    bool in_sublist = false;\n    list_t *wlist = NULL, *list;\n    completion_t *compl = NULL;\n\n    wlist = l_init();\n    if (!wlist)\n        return NULL;\n    list = wlist;\n\n    bopos = strchr(start, '{');\n    while ((cpos = strchr(start, ','))) {\n        if (in_sublist) {\n            bcpos = strchr(start, '}');\n            if (bcpos && cpos > bcpos) {\n                if (cpos != bcpos + 1)\n                    goto err;\n                cpos = bcpos;\n                in_sublist = false;\n                bopos = strchr(start, '{');\n            }\n        } else if (bopos && cpos > bopos) {\n            cpos = bopos;\n            in_sublist = true;\n            bopos = NULL;\n        }\n        if (!add_completion(list, &start, cpos - start))\n            goto err;\n        if (list == wlist && in_sublist && list->head->data) {\n            compl = list->head->data;\n            compl->list = l_init();\n            list = compl->list;\n        } else if (list != wlist && !in_sublist) {\n            list = wlist;\n            if (bcpos && cpos && cpos == bcpos)\n                start++;\n            bcpos = NULL;\n        }\n    }\n    if (in_sublist) {\n        bcpos = strchr(start, '}');\n        if (!bcpos)\n            goto err;\n        if (!add_completion(list, &start, strlen(start) - 1))\n            goto err;\n    } else {\n        if (!add_completion(wlist, &start, strlen(start)))\n            goto err;\n    }\n\n    command->completions = wlist;\n    return wlist;\n\nerr:\n    free_completions(wlist);\n    l_destroy(wlist);\n    return NULL;\n}\n\n/*\n * sm_registercommand - add the command and a pointer to its handler to the commands list.\n *\n * So that free(data) works when destroying the list, I just concatenate the string\n * with the command structure. I could have used a static vector of commands, but this\n * way I can add aliases and macros at runtime (planned in future).\n *\n */\n\nbool sm_registercommand(const char *command, handler_ptr handler, list_t *commands,\n                        char *shortdoc, char *longdoc, const char *complstr)\n{\n    command_t *data;\n\n    assert(commands != NULL);\n\n    if (command != NULL) {\n        if ((data = malloc(sizeof(command_t) + strlen(command) + 1)) == NULL) {\n            show_error(\"sorry, there was a memory allocation problem.\\n\");\n            return false;\n        }\n        data->command = (char *) data + sizeof(*data);\n\n        /* command points to the extra space allocated after data */\n        strcpy(data->command, command);\n    } else {\n        if ((data = malloc(sizeof(command_t))) == NULL) {\n            show_error(\"sorry, there was a memory allocation problem.\\n\");\n            return false;\n        }\n        data->command = NULL;\n    }\n\n    data->handler = handler;\n    data->shortdoc = shortdoc;\n    data->longdoc = longdoc;\n    data->completions = (complstr) ? init_subcmdlist(data, complstr) : NULL;\n    data->complidx = 0;\n\n    /* add new command to list */\n    if (l_append(commands, NULL, data) == -1) {\n        free(data);\n        return false;\n    }\n\n    return true;\n}\n\nbool sm_execcommand(globals_t *vars, const char *commandline)\n{\n    unsigned argc;\n    char *str = NULL, *tok = NULL;\n    char **argv = NULL;\n    command_t *err = NULL;\n    bool ret = false;\n    list_t *commands = vars->commands;\n    element_t *np = NULL;\n\n    assert(commandline != NULL);\n    assert(commands != NULL);\n\n    vars->current_cmdline = commandline;\n\n    np = commands->head;\n\n    str = tok = strdupa(commandline);\n\n    /* tokenize command line into an argument vector */\n    for (argc = 0; tok; argc++, str = NULL) {\n\n        /* make enough size for another pointer (+1 for NULL at end) */\n        if ((argv = realloc(argv, (argc + 1) * sizeof(char *))) == NULL) {\n            show_error(\"sorry there was a memory allocation error.\\n\");\n            return false;\n        }\n\n        /* insert next token */\n        argv[argc] = tok = strtok(str, \" \\t\");\n    }\n\n    assert(argc >= 1);\n    assert(argv != NULL);\n\n    /* just leading whitespace? */\n    if (argv[0] == NULL) {\n        free(argv);\n        \n        /* legal I guess, just don't do anything */\n        return true;\n    }\n    \n    /* search commands list for appropriate handler */\n    while (np) {\n        command_t *command = np->data;\n\n        /* check if this command matches */\n\n        if (command->command == NULL) {\n            /* the default handler has a NULL command */\n            err = command;\n        } else if (strcasecmp(argv[0], command->command) == 0) {\n\n            /* match found, execute handler */\n            ret = command->handler(vars, argv, argc - 1);\n\n            free(argv);\n            return ret;\n        }\n\n        np = np->next;\n    }\n\n    /* no match, if there was a default handler found, run it now */\n    if (err != NULL) {\n        ret = err->handler(vars, argv, argc - 1);\n    }\n\n    free(argv);\n\n    return ret;\n}\n"
        },
        {
          "name": "commands.h",
          "type": "blob",
          "size": 1.462890625,
          "content": "/*\n    Registration and general execution of commands.\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#ifndef COMMANDS_H\n#define COMMANDS_H\n\n#include <stdbool.h>\n\n#include \"scanmem.h\"\n#include \"list.h\"\n\n\ntypedef bool (*handler_ptr)(globals_t *vars, char **argv, unsigned argc);\n\ntypedef struct {\n    char *word;\n    list_t *list;\n    unsigned index;\n} completion_t;\n\ntypedef struct {\n    handler_ptr handler;\n    char *command;\n    char *shortdoc;\n    char *longdoc;\n    list_t *completions;\n    unsigned complidx;\n} command_t;\n\n\nbool sm_registercommand(const char *command, handler_ptr handler, list_t *commands,\n                        char *shortdoc, char *longdoc, const char *complstr);\nbool sm_execcommand(globals_t *vars, const char *commandline);\n\nvoid sm_free_all_completions(list_t *commands);\n\n#endif /* COMMANDS_H */\n"
        },
        {
          "name": "common.c",
          "type": "blob",
          "size": 2.4619140625,
          "content": "/*\n    Common helper and utility functions\n\n    Copyright (C) 2018        Sebastian Parschauer  <s.parschauer(a)gmx.de>\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#include <errno.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n\n#include \"common.h\"\n\n/* states returned by check_process() */\nenum pstate {\n    PROC_RUNNING,\n    PROC_ERR,  /* error during detection */\n    PROC_DEAD,\n    PROC_ZOMBIE\n};\n\n/*\n * We check if a process is running in /proc directly.\n * Also zombies are detected.\n *\n * Requirements: Linux kernel, mounted /proc\n * Assumption: (pid > 0)  --> Please check your PID before!\n */\nstatic enum pstate check_process(pid_t pid)\n{\n    FILE *fp = NULL;\n    char *line = NULL;\n    size_t alloc_len = 0;\n    char status = '\\0';\n    char path_str[128] = \"/proc/\";\n    int pr_len, path_len = sizeof(\"/proc/\") - 1;\n\n    /* append $pid/status and check if file exists */\n    pr_len = sprintf((path_str + path_len), \"%d/status\", pid);\n    if (pr_len <= 0)\n        goto err;\n    path_len += pr_len;\n\n    fp = fopen(path_str, \"r\");\n    if (!fp) {\n        if (errno != ENOENT)\n            goto err;\n        else\n            return PROC_DEAD;\n    }\n\n    /* read process status */\n    while (getline(&line, &alloc_len, fp) != -1) {\n        if (alloc_len <= sizeof(\"State:\\t\"))\n            continue;\n        if (strncmp(line, \"State:\\t\", sizeof(\"State:\\t\") - 1) == 0) {\n            status = line[sizeof(\"State:\\t\") - 1];\n            break;\n        }\n    }\n    if (line)\n        free(line);\n    fclose(fp);\n\n    if (status < 'A' || status > 'Z')\n       goto err;\n\n    /* zombies are not running - parent doesn't wait */\n    if (status == 'Z' || status == 'X')\n        return PROC_ZOMBIE;\n    return PROC_RUNNING;\nerr:\n    return PROC_ERR;\n}\n\nbool sm_process_is_dead(pid_t pid)\n{\n    return (check_process(pid) != PROC_RUNNING);\n}\n"
        },
        {
          "name": "common.h",
          "type": "blob",
          "size": 2.6708984375,
          "content": "/*\n    Common macros and helpers.\n\n    Copyright (C) 2017 Andrea Stacchiotti  <andreastacchiotti(a)gmail.com>\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#ifndef COMMON_H\n#define COMMON_H\n\n#include <stdbool.h>\n#include <sys/types.h>\n\n#ifndef MIN\n# define MIN(a,b) ((a) < (b) ? (a) : (b))\n#endif\n\n/* From `include/linux/compiler.h`, in the linux kernel:\n * Offers a simple interface to the expect builtin */\n#ifdef __GNUC__\n# define LIKELY(x)     __builtin_expect(!!(x), 1)\n# define UNLIKELY(x)   __builtin_expect(!!(x), 0)\n#else\n# define LIKELY(x)     (x)\n# define UNLIKELY(x)   (x)\n#endif\n\n/* from string.h in glibc for Android/BSD */\n#ifndef strdupa\n# include <alloca.h>\n# include <string.h>\n# define strdupa(s)                                                           \\\n    ({                                                                        \\\n      const char *__old = (s);                                                \\\n      size_t __len = strlen(__old) + 1;                                       \\\n      char *__new = (char *) alloca(__len);                                   \\\n      (char *) memcpy(__new, __old, __len);                                   \\\n    })\n#endif\n\n#ifndef strndupa\n# include <alloca.h>\n# include <string.h>\n# define strndupa(s, n)                                                       \\\n    ({                                                                        \\\n      const char *__old = (s);                                                \\\n      size_t __len = strnlen(__old, (n));                                     \\\n      char *__new = (char *) alloca(__len + 1);                               \\\n      __new[__len] = '\\0';                                                    \\\n      (char *) memcpy(__new, __old, __len);                                   \\\n    })\n#endif\n\n/* Use the best `getenv()` implementation we have */\n#if HAVE_SECURE_GETENV\n# define util_getenv secure_getenv\n#else\n# define util_getenv getenv\n#endif\n\n/* Function declarations */\nbool sm_process_is_dead(pid_t pid);\n\n#endif /* COMMON_H */\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 4.8388671875,
          "content": "AC_INIT([scanmem],[0.18~dev],[https://github.com/scanmem/scanmem])\nAC_CONFIG_MACRO_DIR([m4])\nAM_INIT_AUTOMAKE([-Wall -Werror -Wno-extra-portability foreign])\nAC_CONFIG_SRCDIR([main.c])\nAC_CONFIG_HEADER([config.h])\nAC_USE_SYSTEM_EXTENSIONS\nAC_HEADER_STDBOOL\n\nLT_INIT\n\nIT_PROG_INTLTOOL\nAM_PROG_CC_C_O\n\nAC_CHECK_FUNCS(getline secure_getenv)\n\nif test \"x$ac_cv_func_getline\" = \"xno\"; then\n  AC_CHECK_FUNCS(fgetln)\n  if test \"x$ac_cv_func_fgetln\" = \"xno\"; then\n    AC_MSG_ERROR([Cannot build without working getline().])\n  else\n    AC_MSG_NOTICE([Using the fgetln()-based getline() replacement.])\n  fi\nfi\nAM_CONDITIONAL([HAVE_GETLINE], [test \"x$ac_cv_func_getline\" != \"xno\"])\n\nAC_CHECK_HEADERS(fcntl.h limits.h stddef.h sys/ioctl.h sys/time.h)\n\nAC_FUNC_ALLOCA\nAC_FUNC_STRTOD\n\nAC_TYPE_INT8_T\nAC_TYPE_INT16_T\nAC_TYPE_INT32_T\nAC_TYPE_INT64_T\nAC_TYPE_UINT8_T\nAC_TYPE_UINT16_T\nAC_TYPE_UINT32_T\nAC_TYPE_UINT64_T\nAC_TYPE_OFF_T\nAC_TYPE_PID_T\nAC_TYPE_SIZE_T\nAC_TYPE_SSIZE_T\n\nAC_C_BIGENDIAN\n\n# Detect the host OS\nandroid=\"no\"\nAC_CANONICAL_HOST\ncase \"$host_os\" in\n  *android*)\n    android=\"yes\"\n    AC_MSG_NOTICE([Android detected])\n    ;;\n  linux*)\n    AC_MSG_NOTICE([Linux detected])\n    ;;\n  *)\n    AC_MSG_NOTICE([Your platform is not currently supported])\n    ;;\nesac\n\n# Allows disabling procmem support\nAC_ARG_ENABLE(procmem, [AS_HELP_STRING([--disable-procmem],\n                         [forcefully disable proc/pid/mem support])])\nAS_IF([test \"x$enable_procmem\" = \"xno\"], [\n  AC_DEFINE(HAVE_PROCMEM, [0], [Enable /proc/pid/mem support])\n])\n\nAS_IF([test \"x$android\" = \"xno\"], [\n  AS_IF([test \"x$enable_procmem\" != \"xno\"], [\n    # also need to check if the file is zero'ed (some hardened systems)\n    AC_CHECK_FILE([/proc/self/maps], [], [\n      echo \"This system does not seem to have /proc/pid/maps files.\"\n      exit 1\n    ])\n\n    # also need to check this file works\n    AC_CHECK_FILE([/proc/self/mem], [\n      # LARGEFILE support required for this to work\n      AC_SYS_LARGEFILE\n      AC_DEFINE(HAVE_PROCMEM, [1], [Enable /proc/pid/mem support])\n    ],[\n      # This will hurt performance.\n      echo \"This system does not seem to have /proc/pid/mem files.\"\n      echo \"Falling back to ptrace() only support.\"\n      AC_DEFINE(HAVE_PROCMEM, [0], [Enable /proc/pid/mem support])\n    ])\n  ])\n    # malloc optimizations without Android\n    AC_FUNC_MALLOC\n    AC_FUNC_REALLOC\n], [\n  # supported on Android\n  AC_SYS_LARGEFILE\n  # /proc/pid/mem is there but reading interesting data fails\n  AC_DEFINE(HAVE_PROCMEM, [0], [Enable /proc/pid/mem support])\n])\n\n\n# Check for termcap and readline or bypass checking for the libraries.\nAC_ARG_WITH([readline], [AS_HELP_STRING([--without-readline],\n                            [build without readline])])\nAM_CONDITIONAL([WITH_READLINE], [test \"x$with_readline\" != \"xno\"])\nAS_IF([test \"x$with_readline\" != \"xno\"], [\n  # termcap is sometimes required by readline\n  AC_CHECK_LIB([termcap], [tgetent], [], [])\n  AC_CHECK_LIB([readline], [readline], [], [\n    echo \"libreadline could not be found, which is required to continue.\"\n    echo \"The libreadline-dev package may be required.\"\n    exit 1\n  ])\n])\n\nGETTEXT_PACKAGE=GameConqueror\nAC_SUBST(GETTEXT_PACKAGE)\nAC_DEFINE_UNQUOTED([GETTEXT_PACKAGE], [\"$GETTEXT_PACKAGE\"],\n                   [The domain to use with gettext])\n\nAC_CONFIG_FILES([\n  Makefile\n  test/Makefile\n  po/Makefile.in\n])\n\n\n# copied from ubuntu-tweak\n\ndnl AS_AC_EXPAND(VAR, CONFIGURE_VAR)\ndnl\ndnl example\ndnl AS_AC_EXPAND(SYSCONFDIR, $sysconfdir)\ndnl will set SYSCONFDIR to /usr/local/etc if prefix=/usr/local\n\nAC_DEFUN([AS_AC_EXPAND],\n[\n  EXP_VAR=[$1]\n  FROM_VAR=[$2]\n\n  dnl first expand prefix and exec_prefix if necessary\n  prefix_save=$prefix\n  exec_prefix_save=$exec_prefix\n\n  dnl if no prefix given, then use /usr/local, the default prefix\n  if test \"x$prefix\" = \"xNONE\"; then\n    prefix=$ac_default_prefix\n  fi\n  dnl if no exec_prefix given, then use prefix\n  if test \"x$exec_prefix\" = \"xNONE\"; then\n    exec_prefix=$prefix\n  fi\n\n  full_var=\"$FROM_VAR\"\n  dnl loop until it doesn't change anymore\n  while true; do\n    new_full_var=\"`eval echo $full_var`\"\n    if test \"x$new_full_var\" = \"x$full_var\"; then break; fi\n    full_var=$new_full_var\n  done\n\n  dnl clean up\n  full_var=$new_full_var\n  AC_SUBST([$1], \"$full_var\")\n\n  dnl restore prefix and exec_prefix\n  prefix=$prefix_save\n  exec_prefix=$exec_prefix_save\n])\n# end copy\n\n\n# GameConqueror configuration\n\nAC_ARG_ENABLE(gui, [AS_HELP_STRING([--enable-gui],\n                            [enable gameconqueror, the gui front-end of scanmem])])\nAM_CONDITIONAL([ENABLE_GUI], [test \"x$enable_gui\" = \"xyes\"])\nAS_IF([test \"x$enable_gui\" = \"xyes\"], [\n  AS_AC_EXPAND(PKGDATADIR, $datadir/gameconqueror)\n  AS_AC_EXPAND(LOCALEDIR, $localedir)\n  AS_AC_EXPAND(LIBDIR, $libdir)\n\n  AM_PATH_PYTHON([2.7])\n  AC_CONFIG_FILES([\n    gui/Makefile\n    gui/icons/Makefile\n    gui/consts.py\n    gui/gameconqueror\n    gui/org.freedesktop.gameconqueror.policy.in\n  ])\n])\n\nAC_OUTPUT\n"
        },
        {
          "name": "endianness.h",
          "type": "blob",
          "size": 2.78125,
          "content": "/*\n    Endianness conversion.\n\n    Copyright (C) 2014 Hraban Luyat\n    Copyright (C) 2015 Sebastian Parschauer <s.parschauer@gmx.de>\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\n#ifndef ENDIANNESS_H\n#define ENDIANNESS_H\n\n#include \"config.h\"\n\n#include <assert.h>\n#include <stdint.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include \"value.h\"\n\n/* true if host is big endian */\n#ifdef WORDS_BIGENDIAN\nstatic const bool big_endian = true;\n#else\nstatic const bool big_endian = false;\n#endif\n\nstatic inline uint8_t swap_bytes8(uint8_t i)\n{\n    return i;\n}\n\nstatic inline uint16_t swap_bytes16(uint16_t i)\n{\n    uint16_t res = i & 0xff;\n    res <<= 8;\n    res |= i >> 8;\n    return res;\n}\n\nstatic inline uint32_t swap_bytes32(uint32_t i)\n{\n    uint32_t res = swap_bytes16(i);\n    res <<= 16;\n    res |= swap_bytes16(i >> 16);\n    return res;\n}\n\nstatic inline uint64_t swap_bytes64(uint64_t i)\n{\n    uint64_t res = swap_bytes32(i);\n    res <<= 32;\n    res |= swap_bytes32(i >> 32);\n    return res;\n}\n\n// swap endianness of 2, 4 or 8 byte word in-place.\nstatic inline void swap_bytes_var(void *p, size_t num)\n{\n    switch (num) {\n    case sizeof(uint16_t): ; // empty statement to cheat the compiler\n        uint16_t i16 = swap_bytes16(*((uint16_t *)p));\n        memcpy(p, &i16, sizeof(uint16_t));\n        return;\n    case sizeof(uint32_t): ;\n        uint32_t i32 = swap_bytes32(*((uint32_t *)p));\n        memcpy(p, &i32, sizeof(uint32_t));\n        return;\n    case sizeof(uint64_t): ;\n        uint64_t i64 = swap_bytes64(*((uint64_t *)p));\n        memcpy(p, &i64, sizeof(uint64_t));\n        return;\n    }\n    assert(false);\n    return;\n}\n\nstatic inline void fix_endianness(value_t *data_value, bool reverse_endianness)\n{\n    if (!reverse_endianness) {\n        return;\n    }\n    if (data_value->flags & flags_64b) {\n        data_value->uint64_value = swap_bytes64(data_value->uint64_value);\n    } else if (data_value->flags & flags_32b) {\n        data_value->uint32_value = swap_bytes32(data_value->uint32_value);\n    } else if (data_value->flags & flags_16b) {\n        data_value->uint16_value = swap_bytes16(data_value->uint16_value);\n    }\n    return;\n}\n\n#endif /* ENDIANNESS_H */\n"
        },
        {
          "name": "getline.c",
          "type": "blob",
          "size": 2.169921875,
          "content": "/*\n    Replace getline() with BSD specific fgetln().\n\n    Copyright (C) 2015 JianXiong Zhou <zhoujianxiong2@gmail.com>\n    Copyright (C) 2015 Jonathan Pelletier <funmungus(a)gmail.com>\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#include \"getline.h\"\n\n#if !defined(HAVE_GETLINE) && defined(HAVE_FGETLN)\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n\n/*\n * Avoid frequent malloc()/free() calls\n * (determined by getline() test on Linux)\n */\n#define BUF_MIN 120\n\nssize_t getline(char **lineptr, size_t *n, FILE *stream)\n{\n    char *lptr;\n    size_t len = 0;\n\n    /* check for invalid arguments */\n    if (lineptr == NULL || n == NULL) {\n        errno = EINVAL;\n        return -1;\n    }\n\n    lptr = fgetln(stream, &len);\n    if (lptr == NULL) {\n        /* invalid stream */\n        errno = EINVAL;\n        return -1;\n    }\n\n    /*\n     * getline() returns a null byte ('\\0') terminated C string,\n     * but fgetln() returns characters without '\\0' termination\n     */\n    if (*lineptr == NULL) {\n        *n = BUF_MIN;\n        goto alloc_buf;\n    }\n\n    /* realloc the original pointer */\n    if (*n < len + 1) {\n        free(*lineptr);\n\n        *n = len + 1;\nalloc_buf:\n        *lineptr = malloc(*n);\n        if (*lineptr == NULL) {\n            *n = 0;\n            return -1;\n        }\n    }\n\n    /* copy over the string */\n    memcpy(*lineptr, lptr, len);\n    (*lineptr)[len] = '\\0';\n\n    /*\n     * getline() and fgetln() both return len including the\n     * delimiter but without the null byte at the end\n     */\n    return len;\n}\n\n#endif\n"
        },
        {
          "name": "getline.h",
          "type": "blob",
          "size": 1.0634765625,
          "content": "/*\n    Replace getline() with BSD specific fgetln().\n\n    Copyright (C) 2015 JianXiong Zhou <zhoujianxiong2@gmail.com>\n    Copyright (C) 2015 Jonathan Pelletier <funmungus(a)gmail.com>\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#ifndef GETLINE_H\n#define GETLINE_H\n\n#include \"config.h\"\n\n#ifndef HAVE_GETLINE\n#include <stdio.h>\n\nssize_t getline(char **lineptr, size_t *n, FILE *stream);\n#endif\n\n#endif /* GETLINE_H */\n"
        },
        {
          "name": "gpl-3.0.txt",
          "type": "blob",
          "size": 34.3232421875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "gui",
          "type": "tree",
          "content": null
        },
        {
          "name": "handlers.c",
          "type": "blob",
          "size": 50.6064453125,
          "content": "/*\n    Specific command handling.\n\n    Copyright (C) 2006,2007,2009 Tavis Ormandy <taviso@sdf.lonestar.org>\n    Copyright (C) 2009           Eli Dupree <elidupree@charter.net>\n    Copyright (C) 2009,2010      WANG Lu <coolwanglu@gmail.com>\n    Copyright (C) 2014-2016      Sebastian Parschauer <s.parschauer@gmx.de>\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#ifndef _GNU_SOURCE\n# define _GNU_SOURCE\n#endif\n\n#include \"config.h\"\n\n#include <stdio.h>\n#include <sys/types.h>\n#include <sys/ioctl.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <getopt.h>\n#include <assert.h>\n#include <setjmp.h>\n#include <alloca.h>\n#include <strings.h>\n#include <string.h>\n#include <stdbool.h>\n#include <time.h>\n#include <sys/time.h>\n#include <limits.h>            /* to determine the word width */\n#include <errno.h>\n#include <inttypes.h>\n#include <ctype.h>\n\n#include \"common.h\"\n#include \"commands.h\"\n#include \"endianness.h\"\n#include \"handlers.h\"\n#include \"interrupt.h\"\n#include \"scanmem.h\"\n#include \"scanroutines.h\"\n#include \"sets.h\"\n#include \"show_message.h\"\n\n#define USEPARAMS() ((void) vars, (void) argv, (void) argc)     /* macro to hide gcc unused warnings */\n\n/*\n * This file defines all the command handlers used, each one is registered using\n * registercommand(). When a matching command is entered, the commandline is\n * tokenized and parsed into an argv/argc.\n * \n * argv[0] will contain the command entered, so one handler can handle multiple\n * commands by checking what's in there. You still need seperate documentation\n * for each command when you register it.\n *\n * Most commands will also need some documentation, see handlers.h for the format.\n *\n * Commands are allowed to read and modify settings in the vars structure.\n *\n */\n\n#define calloca(x,y) (memset(alloca((x) * (y)), 0x00, (x) * (y)))\n\n/* try to determine the size of a pointer */\n#ifndef ULONG_MAX\n#warning ULONG_MAX is not defined!\n#endif\n#if ULONG_MAX == 4294967295UL\n#define POINTER_FMT \"%8lx\"\n#elif ULONG_MAX == 18446744073709551615UL\n#define POINTER_FMT \"%12lx\"\n#else\n#define POINTER_FMT \"%12lx\"\n#endif\n\nbool handler__set(globals_t * vars, char **argv, unsigned argc)\n{\n    unsigned block, seconds = 1;\n    char *delay = NULL;\n    bool cont = false;\n    struct setting {\n        char *matchids;\n        char *value;\n        unsigned seconds;\n    } *settings = NULL;\n\n    assert(argc != 0);\n    assert(argv != NULL);\n    assert(vars != NULL);\n\n\n    if (argc < 2) {\n        show_error(\"expected an argument, type `help set` for details.\\n\");\n        return false;\n    }\n\n    /* supporting `set` for bytearray will cause annoying syntax problems... */\n    if ((vars->options.scan_data_type == BYTEARRAY)\n       ||(vars->options.scan_data_type == STRING))\n    {\n        show_error(\"`set` is not supported for bytearray or string, use `write` instead.\\n\");\n        return false;\n    }\n\n    /* check if there are any matches */\n    if (vars->num_matches == 0) {\n        show_error(\"no matches are known.\\n\");\n        return false;\n    }\n\n    /* --- parse arguments into settings structs --- */\n\n    settings = calloca(argc - 1, sizeof(struct setting));\n\n    /* parse every block into a settings struct */\n    for (block = 0; block < argc - 1; block++) {\n\n        /* first separate the block into matches and value, which are separated by '=' */\n        if ((settings[block].value = strchr(argv[block + 1], '=')) == NULL) {\n\n            /* no '=' found, whole string must be the value */\n            settings[block].value = argv[block + 1];\n        } else {\n            /* there is a '=', value+1 points to value string. */\n\n            /* use strndupa() to copy the matchids into a new buffer */\n            settings[block].matchids =\n                strndupa(argv[block + 1],\n                         (size_t) (settings[block].value++ - argv[block + 1]));\n        }\n\n        /* value points to the value string, possibly with a delay suffix */\n\n        /* matchids points to the match-ids (possibly multiple) or NULL */\n\n        /* now check for a delay suffix (meaning continuous mode), eg 0xff/10 */\n        if ((delay = strchr(settings[block].value, '/')) != NULL) {\n            char *end = NULL;\n\n            /* parse delay count */\n            settings[block].seconds = strtoul(delay + 1, &end, 10);\n\n            if (*(delay + 1) == '\\0') {\n                /* empty delay count, eg: 12=32/ */\n                show_error(\"you specified an empty delay count, `%s`, see `help set`.\\n\", settings[block].value);\n                return false;\n            } else if (*end != '\\0') {\n                /* parse failed before end, probably trailing garbage, eg 34=9/16foo */\n                show_error(\"trailing garbage after delay count, `%s`.\\n\", settings[block].value);\n                return false;\n            } else if (settings[block].seconds == 0) {\n                /* 10=24/0 disables continuous mode */\n                show_info(\"you specified a zero delay, disabling continuous mode.\\n\");\n            } else {\n                /* valid delay count seen and understood */\n                show_info(\"setting %s every %u seconds until interrupted...\\n\", settings[block].matchids ? settings[block].  matchids : \"all\", settings[block].seconds);\n\n                /* continuous mode on */\n                cont = true;\n            }\n\n            /* remove any delay suffix from the value */\n            settings[block].value =\n                strndupa(settings[block].value,\n                         (size_t) (delay - settings[block].value));\n        }                       /* if (strchr('/')) */\n    }                           /* for(block...) */\n\n    /* --- setup a longjmp to handle interrupt --- */\n    if (INTERRUPTABLE()) {\n        \n        /* control returns here when interrupted */\n// settings is allocated with alloca, do not free it\n//        free(settings);\n        sm_detach(vars->target);\n        ENDINTERRUPTABLE();\n        return true;\n    }\n\n    /* --- execute the parsed setting structs --- */\n\n    while (true) {\n        uservalue_t userval;\n\n        /* for every settings struct */\n        for (block = 0; block < argc - 1; block++) {\n\n            /* check if this block has anything to do in this iteration */\n            if (seconds != 1) {\n                /* not the first iteration (all blocks get executed first iteration) */\n\n                /* if settings.seconds is zero, then this block is only executed once */\n                /* if seconds % settings.seconds is zero, then this block must be executed */\n                if (settings[block].seconds == 0\n                    || (seconds % settings[block].seconds) != 0)\n                    continue;\n            }\n\n            /* convert value */\n            if (!parse_uservalue_number(settings[block].value, &userval)) {\n                show_error(\"bad number `%s` provided\\n\", settings[block].value);\n                goto fail;\n            }\n\n            /* check if specific match(s) were specified */\n            if (settings[block].matchids != NULL) {\n                struct set match_set;\n                match_location loc;\n\n                if (parse_uintset(settings[block].matchids, &match_set, vars->num_matches)\n                        == false) {\n                    show_error(\"failed to parse the set, try `help set`.\\n\");\n                    goto fail;\n                }\n\n                foreach_set_fw(i, &match_set) {\n                    loc = nth_match(vars->matches, match_set.buf[i]);\n                    if (loc.swath) {\n                        value_t v;\n                        void *address = remote_address_of_nth_element(loc.swath, loc.index);\n\n                        v = data_to_val(loc.swath, loc.index);\n                        /* copy userval onto v */\n                        /* XXX: valcmp? make sure the sizes match */\n                        uservalue2value(&v, &userval);\n                        \n                        show_info(\"setting *%p to %#\"PRIx64\"...\\n\", address, v.int64_value);\n\n                        /* set the value specified */\n                        fix_endianness(&v, vars->options.reverse_endianness);\n                        if (sm_setaddr(vars->target, address, &v) == false) {\n                            show_error(\"failed to set a value.\\n\");\n                            set_cleanup(&match_set);\n                            goto fail;\n                        }\n                    } else {\n                        show_error(\"BUG: set: id <%zu> match failure\\n\", match_set.buf[i]);\n                        set_cleanup(&match_set);\n                        goto fail;\n                    }\n                }\n                set_cleanup(&match_set);\n            } else {\n                matches_and_old_values_swath *reading_swath_index = vars->matches->swaths;\n                size_t reading_iterator = 0;\n\n                /* user wants to set all matches */\n                while (reading_swath_index->first_byte_in_child) {\n\n                    /* only actual matches are considered */\n                    if (reading_swath_index->data[reading_iterator].match_info != flags_empty)\n                    {\n                        void *address = remote_address_of_nth_element(reading_swath_index, reading_iterator);\n                        value_t v;\n\n                        v = data_to_val(reading_swath_index, reading_iterator);\n                        /* XXX: as above : make sure the sizes match */\n                        uservalue2value(&v, &userval);\n\n                        show_info(\"setting *%p to %#\"PRIx64\"...\\n\", address, v.int64_value);\n\n                        fix_endianness(&v, vars->options.reverse_endianness);\n                        if (sm_setaddr(vars->target, address, &v) == false) {\n                            show_error(\"failed to set a value.\\n\");\n                            goto fail;\n                        }\n                    }\n                     \n                     /* go on to the next one... */\n                    ++reading_iterator;\n                    if (reading_iterator >= reading_swath_index->number_of_bytes)\n                    {\n                        reading_swath_index = local_address_beyond_last_element(reading_swath_index);\n                        reading_iterator = 0;\n                    }\n                }\n            }                   /* if (matchid != NULL) else ... */\n        }                       /* for(block) */\n\n        if (cont) {\n            sleep(1);\n            if (sm_process_is_dead(vars->target)) {\n                vars->target = 0;\n                show_info(\"target process died, interrupting set operation.\\n\");\n                break;\n            }\n        } else {\n            break;\n        }\n\n        seconds++;\n    }                           /* while(true) */\n\n    ENDINTERRUPTABLE();\n    return true;\n\nfail:\n    ENDINTERRUPTABLE();\n    return false;\n    \n}\n\n/* Accepts a numerical argument to print up to N matches, defaults to 10k\n * FORMAT (don't change, front-end depends on this):\n * [#no] addr, value, [possible types (separated by space)]\n */\nbool handler__list(globals_t *vars, char **argv, unsigned argc)\n{\n    unsigned long num = 0;\n    size_t buf_len = 128; /* will be realloc'd later if necessary */\n    element_t *np = NULL;\n    char *v = NULL;\n    const char *bytearray_suffix = \", [bytearray]\";\n    const char *string_suffix = \", [string]\";\n    FILE *pager = stdout;\n\n    unsigned long max_to_print = 10000;\n    if (argc > 1) {\n        max_to_print = strtoul(argv[1], NULL, 0x00);\n\n        if (max_to_print == 0) {\n            show_error(\"`%s` is not a valid positive integer.\\n\", argv[1]);\n            return false;\n        }\n    }\n\n    if (vars->num_matches == 0)\n        return false;\n\n    if ((v = malloc(buf_len)) == NULL)\n    {\n        show_error(\"memory allocation failed.\\n\");\n        return false;\n    }\n\n    if (vars->regions)\n        np = vars->regions->head;\n\n    matches_and_old_values_swath *reading_swath_index = vars->matches->swaths;\n    size_t reading_iterator = 0;\n\n    if (isatty(STDOUT_FILENO)) {\n        struct winsize w;\n\n        if (ioctl(STDOUT_FILENO, TIOCGWINSZ, &w) == -1) {\n            show_warn(\"handler__list(): couldn't get terminal size.\\n\");\n            pager = get_pager(stdout);\n        } else {\n            /* check if the output fits in the terminal window */\n            if (w.ws_row <= MIN(max_to_print, vars->num_matches))\n                pager = get_pager(stdout);\n        }\n    }\n\n    /* list all known matches */\n    while (reading_swath_index->first_byte_in_child) {\n        if (num == max_to_print) {\n            if (num < vars->num_matches && !vars->options.backend)\n                fprintf(pager, \"[...]\\n\");\n            break;\n        }\n\n        match_flags flags = reading_swath_index->data[reading_iterator].match_info;\n\n        /* only actual matches are considered */\n        if (flags != flags_empty)\n        {\n            switch(vars->options.scan_data_type)\n            {\n            case BYTEARRAY:\n                buf_len = flags * 3 + 32;\n                v = realloc(v, buf_len); /* for each byte and the suffix, this should be enough */\n\n                if (v == NULL)\n                {\n                    show_error(\"memory allocation failed.\\n\");\n                    goto fail;\n                }\n                data_to_bytearray_text(v, buf_len, reading_swath_index, reading_iterator, flags);\n                assert(strlen(v) + strlen(bytearray_suffix) + 1 <= buf_len); /* or maybe realloc is better? */\n                strcat(v, bytearray_suffix);\n                break;\n            case STRING:\n                buf_len = flags + strlen(string_suffix) + 32; /* for the string and suffix, this should be enough */\n                v = realloc(v, buf_len);\n                if (v == NULL)\n                {\n                    show_error(\"memory allocation failed.\\n\");\n                    goto fail;\n                }\n                data_to_printable_string(v, buf_len, reading_swath_index, reading_iterator, flags);\n                assert(strlen(v) + strlen(string_suffix) + 1 <= buf_len); /* or maybe realloc is better? */\n                strcat(v, string_suffix);\n                break;\n            default: /* numbers */\n                ; /* cheat gcc */\n                value_t val = data_to_val(reading_swath_index, reading_iterator);\n\n                valtostr(&val, v, buf_len);\n                break;\n            }\n\n            void *address = remote_address_of_nth_element(reading_swath_index, reading_iterator);\n            unsigned long address_ul = (unsigned long)address;\n            unsigned int region_id = 99;\n            unsigned long match_off = 0;\n            const char *region_type = \"??\";\n            /* get region info belonging to the match -\n             * note: we assume the regions list and matches are sorted\n             */\n            while (np) {\n                region_t *region = np->data;\n                unsigned long region_start = (unsigned long)region->start;\n                if (address_ul < region_start + region->size &&\n                  address_ul >= region_start) {\n                    region_id = region->id;\n                    match_off = address_ul - region->load_addr;\n                    region_type = region_type_names[region->type];\n                    break;\n                }\n                np = np->next;\n            }\n            fprintf(pager, \"[%2lu] \"POINTER_FMT\", %2u + \"POINTER_FMT\", %5s, %s\\n\",\n                   num++, address_ul, region_id, match_off, region_type, v);\n        }\n\n        /* go on to the next one... */\n        ++reading_iterator;\n        if (reading_iterator >= reading_swath_index->number_of_bytes)\n        {\n            reading_swath_index = local_address_beyond_last_element(reading_swath_index);\n            reading_iterator = 0;\n        }\n    }\n\n    free(v);\n    close_pager(pager);\n    return true;\nfail:\n    free(v);\n    close_pager(pager);\n    return false;\n}\n\nbool handler__delete(globals_t * vars, char **argv, unsigned argc)\n{\n    struct set del_set;\n\n    if (argc != 2) {\n        show_error(\"was expecting one argument, see `help delete`.\\n\");\n        return false;\n    }\n\n    if (vars->num_matches == 0) {\n        show_error(\"nothing to delete.\\n\");\n        return false;\n    }\n\n    if (!parse_uintset(argv[1], &del_set, (size_t)vars->num_matches)) {\n        show_error(\"failed to parse the set, try `help delete`.\\n\");\n        return false;\n    }\n\n    size_t match_counter = 0;\n    size_t set_idx = 0;\n\n    matches_and_old_values_swath *reading_swath_index = vars->matches->swaths;\n\n    size_t reading_iterator = 0;\n\n    while (reading_swath_index->first_byte_in_child) {\n        /* only actual matches are considered */\n        if (reading_swath_index->data[reading_iterator].match_info != flags_empty) {\n\n            if (match_counter++ == del_set.buf[set_idx]) {\n                /* It is not reasonable to check if the matches array can be\n                 * downsized after the deletion.\n                 * So just zero its flags, to mark it as not a REAL match */\n                reading_swath_index->data[reading_iterator].match_info = flags_empty;\n                vars->num_matches--;\n\n                if (set_idx++ == del_set.size - 1) {\n                    set_cleanup(&del_set);\n                    return true;\n                }\n            }\n        }\n\n        /* go on to the next one... */\n        ++reading_iterator;\n        if (reading_iterator >= reading_swath_index->number_of_bytes) {\n            reading_swath_index =\n                local_address_beyond_last_element(reading_swath_index);\n\n            reading_iterator = 0;\n        }\n    }\n\n    show_error(\"BUG: delete: id <%zu> match failure\\n\", del_set.buf[set_idx]);\n    set_cleanup(&del_set);\n    return false;\n}\n\nbool handler__reset(globals_t * vars, char **argv, unsigned argc)\n{\n    USEPARAMS();\n\n    /* reset scan progress */\n    vars->scan_progress = 0;\n\n    if (vars->matches) { free(vars->matches); vars->matches = NULL; vars->num_matches = 0; }\n\n    /* refresh list of regions */\n    l_destroy(vars->regions);\n\n    /* create a new linked list of regions */\n    if ((vars->regions = l_init()) == NULL) {\n        show_error(\"sorry, there was a problem allocating memory.\\n\");\n        return false;\n    }\n\n    /* read in maps if a pid is known */\n    if (vars->target && sm_readmaps(vars->target, vars->regions, vars->options.region_scan_level) != true) {\n        show_error(\"sorry, there was a problem getting a list of regions to search.\\n\");\n        show_warn(\"the pid may be invalid, or you don't have permission.\\n\");\n        vars->target = 0;\n        return false;\n    }\n\n    return true;\n}\n\nbool handler__pid(globals_t * vars, char **argv, unsigned argc)\n{\n    char *resetargv[] = { \"reset\", NULL };\n    char *end = NULL;\n\n    if (argc == 2) {\n        vars->target = (pid_t) strtoul(argv[1], &end, 0x00);\n\n        if (vars->target == 0) {\n            show_error(\"`%s` does not look like a valid pid.\\n\", argv[1]);\n            return false;\n        }\n    } else if (vars->target) {\n        /* print the pid of the target program */\n        show_info(\"target pid is %u.\\n\", vars->target);\n        return true;\n    } else {\n        show_info(\"no target is currently set.\\n\");\n        return false;\n    }\n\n    return handler__reset(vars, resetargv, 1);\n}\n\nbool handler__snapshot(globals_t *vars, char **argv, unsigned argc)\n{\n    USEPARAMS();\n    \n\n    /* check that a pid has been specified */\n    if (vars->target == 0) {\n        show_error(\"no target set, type `help pid`.\\n\");\n        return false;\n    }\n\n    /* remove any existing matches */\n    if (vars->matches) { free(vars->matches); vars->matches = NULL; vars->num_matches = 0; }\n\n    if (sm_searchregions(vars, MATCHANY, NULL) != true) {\n        show_error(\"failed to save target address space.\\n\");\n        return false;\n    }\n\n    return true;\n}\n\n/* dregion <region-id set> */\nbool handler__dregion(globals_t *vars, char **argv, unsigned argc)\n{\n    struct set reg_set;\n\n    /* need an argument */\n    if (argc < 2) {\n        show_error(\"expected an argument, see `help dregion`.\\n\");\n        return false;\n    }\n\n    /* check that there is a process known */\n    if (vars->target == 0) {\n        show_error(\"no target specified, see `help pid`\\n\");\n        return false;\n    }\n\n    /* check if there are any regions at all */\n    if (vars->regions->size == 0) {\n        show_error(\"no regions are known.\\n\");\n        return false;\n    }\n\n    size_t last_region_id = ((region_t*)(vars->regions->tail->data))->id;\n\n    if (!parse_uintset(argv[1], &reg_set, last_region_id + 1)) {\n        show_error(\"failed to parse the set, try `help dregion`.\\n\");\n        return false;\n    }\n\n    /* loop for every reg_id in the set */\n    for (size_t set_idx = 0; set_idx < reg_set.size; set_idx++) {\n        size_t reg_id = reg_set.buf[set_idx];\n        \n        /* initialize list pointers */\n        element_t *np = vars->regions->head;\n        element_t *pp = NULL;\n        \n        /* find the correct region node */\n        while (np) {\n            region_t *r = np->data;\n            \n            /* compare the node id to the id the user specified */\n            if (r->id == reg_id)\n                break;\n            \n            pp = np; /* keep track of prev for l_remove() */\n            np = np->next;\n        }\n\n        /* check if a match was found */\n        if (np == NULL) {\n            show_warn(\"no region matching %lu, or already removed.\\n\", reg_id);\n            continue;\n        }\n        \n        /* check for any affected matches before removing it */\n        if(vars->num_matches > 0)\n        {\n            region_t *reg_to_delete = np->data;\n\n            void *start_address = reg_to_delete->start;\n            void *end_address = reg_to_delete->start + reg_to_delete->size;\n            vars->matches = delete_in_address_range(vars->matches, &vars->num_matches,\n                                                    start_address, end_address);\n            if (vars->matches == NULL)\n            {\n                show_error(\"memory allocation error while deleting matches\\n\");\n            }\n        }\n\n        l_remove(vars->regions, pp, NULL);\n    }\n\n    return true;\n}\n\nbool handler__lregions(globals_t * vars, char **argv, unsigned argc)\n{\n    element_t *np = vars->regions->head;\n\n    USEPARAMS();\n\n    if (vars->target == 0) {\n        show_error(\"no target has been specified, see `help pid`.\\n\");\n        return false;\n    }\n\n    if (vars->regions->size == 0) {\n        show_info(\"no regions are known.\\n\");\n    }\n    \n    /* print a list of regions that have been searched */\n    while (np) {\n        region_t *region = np->data;\n\n        fprintf(stdout, \"[%2u] \"POINTER_FMT\", %7lu bytes, %5s, \"POINTER_FMT\", %c%c%c, %s\\n\",\n                region->id,\n                (unsigned long)region->start, region->size,\n                region_type_names[region->type], region->load_addr,\n                region->flags.read ? 'r' : '-',\n                region->flags.write ? 'w' : '-',\n                region->flags.exec ? 'x' : '-',\n                region->filename[0] ? region->filename : \"unassociated\");\n        np = np->next;\n    }\n\n    return true;\n}\n\n/* handles every scan that starts with an operator */\nbool handler__operators(globals_t * vars, char **argv, unsigned argc)\n{\n    uservalue_t val;\n    scan_match_type_t m;\n\n    if (argc == 1)\n    {\n        zero_uservalue(&val);\n    }\n    else if (argc > 2)\n    {\n        show_error(\"too many values specified, see `help %s`\", argv[0]);\n        return false;\n    }\n    else\n    {\n        if (!parse_uservalue_number(argv[1], &val)) {\n            show_error(\"bad value specified, see `help %s`\", argv[0]);\n            return false;\n        }\n    }\n\n\n    if (strcmp(argv[0], \"=\") == 0)\n    {\n        m = (argc == 1) ? MATCHNOTCHANGED : MATCHEQUALTO;\n    }\n    else if (strcmp(argv[0], \"!=\") == 0)\n    {\n        m = (argc == 1) ? MATCHCHANGED : MATCHNOTEQUALTO;\n    }\n    else if (strcmp(argv[0], \"<\") == 0)\n    {\n        m = (argc == 1) ? MATCHDECREASED : MATCHLESSTHAN;\n    }\n    else if (strcmp(argv[0], \">\") == 0)\n    {\n        m = (argc == 1) ? MATCHINCREASED : MATCHGREATERTHAN;\n    }\n    else if (strcmp(argv[0], \"+\") == 0)\n    {\n        m = (argc == 1) ? MATCHINCREASED : MATCHINCREASEDBY;\n    }\n    else if (strcmp(argv[0], \"-\") == 0)\n    {\n        m = (argc == 1) ? MATCHDECREASED : MATCHDECREASEDBY;\n    }\n    else\n    {\n        show_error(\"unrecognized operator seen at handler_operators: \\\"%s\\\".\\n\", argv[0]);\n        return false;\n    }\n\n    if (vars->matches) {\n        if (vars->num_matches == 0) {\n            show_error(\"there are currently no matches.\\n\");\n            return false;\n        }\n        if (sm_checkmatches(vars, m, &val) == false) {\n            show_error(\"failed to search target address space.\\n\");\n            return false;\n        }\n    } else {\n        /* Cannot be used on first scan:\n         *   =, !=, <, >, +, + N, -, - N\n         * Can be used on first scan:\n         *   = N, != N, < N, > N\n         */\n        if (m == MATCHNOTCHANGED  ||\n            m == MATCHCHANGED     ||\n            m == MATCHDECREASED   ||\n            m == MATCHINCREASED   ||\n            m == MATCHDECREASEDBY ||\n            m == MATCHINCREASEDBY )\n        {\n            show_error(\"cannot use that search without matches\\n\");\n            return false;\n        }\n        else\n        {\n            if (sm_searchregions(vars, m, &val) != true) {\n                show_error(\"failed to search target address space.\\n\");\n                return false;\n            }\n        }\n    }\n\n    if (vars->num_matches == 1) {\n        show_info(\"match identified, use \\\"set\\\" to modify value.\\n\");\n        show_info(\"enter \\\"help\\\" for other commands.\\n\");\n    }\n\n    return true;\n}\n\nbool handler__version(globals_t *vars, char **argv, unsigned argc)\n{\n    USEPARAMS();\n\n    vars->printversion(stderr);\n    return true;\n}\n\nbool handler__string(globals_t * vars, char **argv, unsigned argc)\n{\n    USEPARAMS();\n\n    /* test scan_data_type */\n    if (vars->options.scan_data_type != STRING)\n    {\n        show_error(\"scan_data_type is not string, see `help option`.\\n\");\n        return false;\n    }\n\n    /* test the length */\n    size_t cmdline_length = strlen(vars->current_cmdline);\n    if (cmdline_length < 3) /* cmdline too short */\n    {\n        show_error(\"please specify a string\\n\");\n        return false;\n    }\n    size_t string_length = cmdline_length-2;\n    if (string_length > (uint16_t)(-1)) /* string too long */\n    {\n        show_error(\"String length is limited to %u\\n\", (uint16_t)(-1));\n        return false;\n    }\n\n    /* Allocate a copy of the target string. While it would be possible to reuse\n     * the incoming string, truncating the first 2 chars means it is aligned\n     * at most at a 2 bytes boundary, which will generate unaligned accesses\n     * when the string will be read as a sequence of int64 during a scan.\n     * `malloc()` instead ensures enough alignment for any type.\n     */\n    char *string_value = malloc((string_length+1)*sizeof(char));\n    if (string_value == NULL)\n    {\n        show_error(\"memory allocation for string failed.\\n\");\n        return false;\n    }\n    strcpy(string_value, vars->current_cmdline+2);\n\n    uservalue_t val;\n    val.string_value = string_value;\n    val.flags = string_length;\n \n    /* need a pid for the rest of this to work */\n    if (vars->target == 0) {\n        goto fail;\n    }\n\n    /* user has specified an exact value of the variable to find */\n    if (vars->matches) {\n        if (vars->num_matches == 0) {\n            show_error(\"there are currently no matches.\\n\");\n            return false;\n        }\n        /* already know some matches */\n        if (sm_checkmatches(vars, MATCHEQUALTO, &val) != true) {\n            show_error(\"failed to search target address space.\\n\");\n            goto fail;\n        }\n    } else {\n        /* initial search */\n        if (sm_searchregions(vars, MATCHEQUALTO, &val) != true) {\n            show_error(\"failed to search target address space.\\n\");\n            goto fail;\n        }\n    }\n\n    /* check if we now know the only possible candidate */\n    if (vars->num_matches == 1) {\n        show_info(\"match identified, use \\\"set\\\" to modify value.\\n\");\n        show_info(\"enter \\\"help\\\" for other commands.\\n\");\n    }\n\n    free(string_value);\n    return true;\n\nfail:\n    free(string_value);\n    return false;\n}\n\nstatic inline bool parse_uservalue_default(const char *str, uservalue_t *val)\n{\n    bool ret = true;\n\n    if (!parse_uservalue_number(str, val)) {\n        show_error(\"unable to parse number `%s`\\n\", str);\n        ret = false;\n    }\n    return ret;\n}\n\nbool handler__default(globals_t * vars, char **argv, unsigned argc)\n{\n    uservalue_t vals[2];\n    uservalue_t *val = &vals[0];\n    scan_match_type_t m = MATCHEQUALTO;\n    char *ustr = argv[0];\n    char *pos;\n    bool ret = false;\n\n    zero_uservalue(val);\n\n    switch(vars->options.scan_data_type)\n    {\n    case ANYNUMBER:\n    case ANYINTEGER:\n    case ANYFLOAT:\n    case INTEGER8:\n    case INTEGER16:\n    case INTEGER32:\n    case INTEGER64:\n    case FLOAT32:\n    case FLOAT64:\n        /* attempt to parse command as a number */\n        if (argc != 1)\n        {\n            show_error(\"unknown command\\n\");\n            goto retl;\n        }\n        /* detect a range */\n        pos = strstr(ustr, \"..\");\n        if (pos) {\n            *pos = '\\0';\n            if (!parse_uservalue_default(ustr, &vals[0]))\n                goto retl;\n            ustr = pos + 2;\n            if (!parse_uservalue_default(ustr, &vals[1]))\n                goto retl;\n\n            /* Check that the range is nonempty */\n            if (vals[0].float64_value > vals[1].float64_value) {\n                show_error(\"Empty range\\n\");\n                goto retl;\n            }\n\n            /* Store the bitwise AND of both flags in the first value,\n             * so that range scanroutines need only one flag testing. */\n            vals[0].flags &= vals[1].flags;\n            m = MATCHRANGE;\n        }\n        else {\n            if (!parse_uservalue_default(ustr, val))\n                goto retl;\n        }\n        break;\n    case BYTEARRAY:\n        /* attempt to parse command as a bytearray */\n        if (!parse_uservalue_bytearray(argv, argc, val)) {\n            show_error(\"unable to parse command `%s`\\n\", ustr);\n            goto retl;\n        }\n        break;\n    case STRING:\n        show_error(\"unable to parse command `%s`\\nIf you want to scan\"\n                   \" for a string, use command `\\\"`.\\n\", ustr);\n        goto retl;\n        break;\n    default:\n        assert(false);\n        break;\n    }\n\n    /* need a pid for the rest of this to work */\n    if (vars->target == 0) {\n        goto retl;\n    }\n\n    /* user has specified an exact value of the variable to find */\n    if (vars->matches) {\n        if (vars->num_matches == 0) {\n            show_error(\"there are currently no matches.\\n\");\n            goto retl;\n        }\n        /* already know some matches */\n        if (sm_checkmatches(vars, m, val) != true) {\n            show_error(\"failed to search target address space.\\n\");\n            goto retl;\n        }\n    } else {\n        /* initial search */\n        if (sm_searchregions(vars, m, val) != true) {\n            show_error(\"failed to search target address space.\\n\");\n            goto retl;\n        }\n    }\n\n    /* check if we now know the only possible candidate */\n    if (vars->num_matches == 1) {\n        show_info(\"match identified, use \\\"set\\\" to modify value.\\n\");\n        show_info(\"enter \\\"help\\\" for other commands.\\n\");\n    }\n\n    ret = true;\n\nretl:\n    free_uservalue(val);\n\n    return ret;\n}\n\nbool handler__update(globals_t *vars, char **argv, unsigned argc)\n{\n\n    USEPARAMS();\n    if (vars->num_matches) {\n        if (sm_checkmatches(vars, MATCHUPDATE, NULL) == false) {\n            show_error(\"failed to scan target address space.\\n\");\n            return false;\n        }\n    } else {\n        show_error(\"cannot use that command without matches\\n\");\n        return false;\n    }\n\n    return true;\n}\n\nbool handler__exit(globals_t *vars, char **argv, unsigned argc)\n{\n    USEPARAMS();\n\n    vars->exit = 1;\n    return true;\n}\n\n#define DOC_COLUMN  11           /* which column descriptions start on with the help command */\n\nbool handler__help(globals_t *vars, char **argv, unsigned argc)\n{\n    bool ret = false;\n    list_t *commands = vars->commands;\n    element_t *np = NULL;\n    command_t *def = NULL;\n    FILE *pager = NULL;\n\n    assert(commands != NULL);\n    assert(argc >= 1);\n\n    np = commands->head;\n\n    if (argc > 2) {\n        show_error(\"too many arguments.\\n\");\n        goto retl;\n    }\n\n    /* generic help requested */\n    if (argc == 1) {\n        pager = get_pager(stderr);\n        vars->printversion(pager);\n        fprintf(pager, \"\\n\");\n        while (np) {\n            command_t *command = np->data;\n\n            /* remember the default command */\n            if (command->command == NULL)\n                def = command;\n\n            /* NULL shortdoc means don't print in the help listing */\n            if (command->shortdoc == NULL) {\n                np = np->next;\n                continue;\n            }\n\n            /* print out command name */\n            fprintf(pager, \"%-*s%s\\n\", DOC_COLUMN, command->command ? command->command : \"default\",\n                    command->shortdoc);\n\n            np = np->next;\n        }\n        if (def)\n            fprintf(pager, \"\\n%s\\n\", def->longdoc ? def->longdoc : \"\");\n    } else {\n        /* detailed information requested about specific command */\n        while (np) {\n            command_t *command = np->data;\n\n            if (command->command\n                && strcasecmp(argv[1], command->command) == 0) {\n                pager = get_pager(stderr);\n                fprintf(pager, \"%s\\n\", command->longdoc ? command-> longdoc : \"missing documentation\");\n                ret = true;\n                goto retl;\n            }\n\n            np = np->next;\n        }\n\n        /* couldn't find requested command */\n        show_error(\"unknown command `%s`\\n\", argv[1]);\n        ret = false;\n        goto retl;\n    }\n\n    ret = true;\n\nretl:\n    close_pager(pager);\n\n    return ret;\n}\n\nbool handler__eof(globals_t * vars, char **argv, unsigned argc)\n{\n    show_user(\"exit\\n\");\n    return handler__exit(vars, argv, argc);\n}\n\n/* XXX: handle !ls style escapes */\nbool handler__shell(globals_t * vars, char **argv, unsigned argc)\n{\n    size_t len = argc;\n    unsigned i;\n    char *command;\n\n    USEPARAMS();\n\n    if (argc < 2) {\n        show_error(\"shell command requires an argument, see `help shell`.\\n\");\n        return false;\n    }\n\n    /* convert arg vector into single string, first calculate length */\n    for (i = 1; i < argc; i++)\n        len += strlen(argv[i]);\n\n    /* allocate space */\n    command = calloca(len, 1);\n\n    /* concatenate strings */\n    for (i = 1; i < argc; i++) {\n        strcat(command, argv[i]);\n        strcat(command, \" \");\n    }\n\n    /* finally execute command */\n    if (system(command) == -1) {\n// command is allocated with alloca, do not free it\n//        free(command);\n        show_error(\"system() failed, command was not executed.\\n\");\n        return false;\n    }\n\n// command is allocated with alloca, do not free it\n//    free(command);\n    return true;\n}\n\nbool handler__watch(globals_t * vars, char **argv, unsigned argc)\n{\n    size_t id;\n    char *end = NULL, buf[128], timestamp[64];\n    time_t t;\n    match_location loc;\n    value_t val;\n    void *address;\n    scan_data_type_t data_type = vars->options.scan_data_type;\n    scan_routine_t valuecmp_routine;\n\n    if (argc != 2) {\n        show_error(\"was expecting one argument, see `help watch`.\\n\");\n        return false;\n    }\n    if ((data_type == BYTEARRAY) || (data_type == STRING)) {\n        show_error(\"`watch` is not supported for bytearray or string.\\n\");\n        return false;\n    }\n\n    /* parse argument */\n    id = strtoul(argv[1], &end, 0x00);\n\n    /* check that strtoul() worked */\n    if (argv[1][0] == '\\0' || *end != '\\0') {\n        show_error(\"sorry, couldn't parse `%s`, try `help watch`\\n\",\n                argv[1]);\n        return false;\n    }\n    \n    loc = nth_match(vars->matches, id);\n\n    /* check that this is a valid match-id */\n    if (!loc.swath) {\n        show_error(\"you specified a non-existent match `%lu`.\\n\", id);\n        show_info(\"use \\\"list\\\" to list matches, or \\\"help\\\" for other commands.\\n\");\n        return false;\n    }\n    \n    address = remote_address_of_nth_element(loc.swath, loc.index);\n    \n    val = data_to_val(loc.swath, loc.index);\n\n    if (INTERRUPTABLE()) {\n        (void) sm_detach(vars->target);\n        ENDINTERRUPTABLE();\n        return true;\n    }\n\n    /* every entry is timestamped */\n    t = time(NULL);\n    strftime(timestamp, sizeof(timestamp), \"[%T]\", localtime(&t));\n\n    show_info(\"%s monitoring %10p for changes until interrupted...\\n\", timestamp, address);\n\n    valuecmp_routine = sm_get_scanroutine(ANYNUMBER, MATCHCHANGED, flags_empty, vars->options.reverse_endianness);\n    while (true) {\n        const mem64_t *memory_ptr;\n        size_t memlength;\n\n        if (sm_attach(vars->target) == false)\n            return false;\n\n        if (sm_peekdata(address, sizeof(uint64_t), &memory_ptr, &memlength) == false)\n            return false;\n\n        /* check if the new value is different */\n        match_flags tmpflags = flags_empty;\n        if ((*valuecmp_routine)(memory_ptr, memlength, &val, NULL, &tmpflags)) {\n\n            memcpy(val.bytes, memory_ptr, memlength);\n\n            valtostr(&val, buf, sizeof(buf));\n\n            /* fetch new timestamp */\n            t = time(NULL);\n            strftime(timestamp, sizeof(timestamp), \"[%T]\", localtime(&t));\n\n            show_info(\"%s %10p -> %s\\n\", timestamp, address, buf);\n        }\n\n        /* detach after valuecmp_routine, since it may read more data (e.g. bytearray) */\n        sm_detach(vars->target);\n\n        (void) sleep(1);\n    }\n}\n\n#include \"licence.h\"\n\nbool handler__show(globals_t * vars, char **argv, unsigned argc)\n{\n    USEPARAMS();\n    \n    if (argv[1] == NULL) {\n        show_error(\"expecting an argument.\\n\");\n        return false;\n    }\n    \n    if (strcmp(argv[1], \"copying\") == 0)\n        show_user(SM_COPYING);\n    else if (strcmp(argv[1], \"warranty\") == 0)\n        show_user(SM_WARRANTY);\n    else if (strcmp(argv[1], \"version\") == 0)\n        vars->printversion(stderr);\n    else {\n        show_error(\"unrecognized show command `%s`\\n\", argv[1]);\n        return false;\n    }\n    \n    return true;\n}\n\nbool handler__dump(globals_t * vars, char **argv, unsigned argc)\n{\n    void *addr;\n    char *endptr;\n    char *buf = NULL;\n    size_t len;\n    bool dump_to_file = false;\n    FILE *dump_f = NULL;\n\n    if (argc < 3 || argc > 4)\n    {\n        show_error(\"bad argument, see `help dump`.\\n\");\n        return false;\n    }\n    \n    /* check address */\n    errno = 0;\n    addr = (void *)(strtoll(argv[1], &endptr, 16));\n    if ((errno != 0) || (*endptr != '\\0'))\n    {\n        show_error(\"bad address, see `help dump`.\\n\");\n        return false;\n    }\n\n    /* check length */\n    errno = 0;\n    len = strtoul(argv[2], &endptr, 0);\n    if ((errno != 0) || (*endptr != '\\0'))\n    {\n        show_error(\"bad length, see `help dump`.\\n\");\n        return false;\n    }\n\n    /* check filename */\n    if (argc == 4)\n    {\n        if((dump_f = fopen(argv[3], \"wb\")) == NULL)\n        {\n            show_error(\"failed to open file\\n\");\n            return false;\n        }\n        dump_to_file = true;\n    }\n\n    buf = malloc(len + sizeof(long));\n    if (buf == NULL)\n    {\n        if (dump_f)\n            fclose(dump_f);\n        show_error(\"memory allocation failed.\\n\");\n        return false;\n    }\n\n    if (!sm_read_array(vars->target, addr, buf, len))\n    {\n        if (dump_f)\n            fclose(dump_f);\n        show_error(\"read memory failed.\\n\");\n        free(buf);\n        return false;\n    }\n\n    if(dump_to_file)\n    {\n        size_t s = fwrite(buf,1,len,dump_f);\n        fclose(dump_f);\n        if (s != len)\n        {\n            show_error(\"write to file failed.\\n\");\n            free(buf);\n            return false;\n        }  \n    }\n    else\n    {\n        if (vars->options.backend == 1)\n        {\n            /* dump raw memory to stdout, the front-end will handle it */\n            fwrite(buf, sizeof(char), len, stdout);\n        }\n        else\n        {\n            /* print it out nicely */\n            unsigned int i,j;\n            int buf_idx = 0;\n            for (i = 0; i + 16 < len; i += 16)\n            {\n                printf(\"%p: \", addr+i);\n                for (j = 0; j < 16; ++j)\n                {\n                    printf(\"%02X \", (unsigned char)(buf[buf_idx++]));\n                }\n                if(vars->options.dump_with_ascii == 1)\n                {\n                    for (j = 0; j < 16; ++j)\n                    {\n                        char c = buf[i+j];\n                        printf(\"%c\", isprint(c) ? c : '.');\n                    }\n                }\n                printf(\"\\n\");\n            }\n            if (i < len)\n            {\n                printf(\"%p: \", addr+i);\n                for (j = i; j < len; ++j)\n                {\n                    printf(\"%02X \", (unsigned char)(buf[buf_idx++]));\n                }\n                if(vars->options.dump_with_ascii == 1)\n                {\n                    while(j%16 !=0) // skip \"empty\" numbers\n                    {\n                        printf(\"   \");\n                        ++j;\n                    }\n                    for (j = 0; i+j < len; ++j)\n                    {\n                        char c = buf[i+j];\n                        printf(\"%c\", isprint(c) ? c : '.');\n                    }\n                }\n                printf(\"\\n\");\n            }\n        }\n    }\n\n    free(buf);\n    return true;\n}\n\n/* Returns (scan_data_type_t)(-1) on parse failure */\nstatic inline scan_data_type_t parse_scan_data_type(const char *str)\n{\n    /* Anytypes */\n    if ((strcasecmp(str, \"number\") == 0)  || (strcasecmp(str, \"anynumber\") == 0))\n        return ANYNUMBER;\n    if ((strcasecmp(str, \"int\") == 0)     || (strcasecmp(str, \"anyint\") == 0) ||\n        (strcasecmp(str, \"integer\") == 0) || (strcasecmp(str, \"anyinteger\") == 0))\n        return ANYINTEGER;\n    if ((strcasecmp(str, \"float\") == 0)   || (strcasecmp(str, \"anyfloat\") == 0))\n        return ANYFLOAT;\n\n    /* Ints */\n    if ((strcasecmp(str, \"i8\") == 0)  || (strcasecmp(str, \"int8\") == 0)  ||\n        (strcasecmp(str, \"integer8\") == 0))\n        return INTEGER8;\n    if ((strcasecmp(str, \"i16\") == 0) || (strcasecmp(str, \"int16\") == 0) ||\n        (strcasecmp(str, \"integer16\") == 0))\n        return INTEGER16;\n    if ((strcasecmp(str, \"i32\") == 0) || (strcasecmp(str, \"int32\") == 0) ||\n        (strcasecmp(str, \"integer32\") == 0))\n        return INTEGER32;\n    if ((strcasecmp(str, \"i64\") == 0) || (strcasecmp(str, \"int64\") == 0) ||\n        (strcasecmp(str, \"integer64\") == 0))\n        return INTEGER64;\n\n    /* Floats */\n    if ((strcasecmp(str, \"f32\") == 0) || (strcasecmp(str, \"float32\") == 0))\n        return FLOAT32;\n    if ((strcasecmp(str, \"f64\") == 0) || (strcasecmp(str, \"float64\") == 0) ||\n        (strcasecmp(str, \"double\") == 0))\n        return FLOAT64;\n\n    /* VLT */\n    if (strcasecmp(str, \"bytearray\") == 0) return BYTEARRAY;\n    if (strcasecmp(str, \"string\") == 0)    return STRING;\n\n    /* Not a valid type */\n    return (scan_data_type_t)(-1);\n}\n\n/* write value_type address value */\nbool handler__write(globals_t * vars, char **argv, unsigned argc)\n{\n    int data_width = 0;\n    const char *fmt = NULL;\n    void *addr;\n    char *buf = NULL;\n    char *endptr;\n    int datatype; /* 0 for numbers, 1 for bytearray, 2 for string */\n    bool ret;\n    const char *string_parameter = NULL; /* used by string type */\n\n    if (argc < 4)\n    {\n        show_error(\"bad arguments, see `help write`.\\n\");\n        ret = false;\n        goto retl;\n    }\n\n    scan_data_type_t st = parse_scan_data_type(argv[1]);\n\n    /* try int first */\n    if (st == INTEGER8)\n    {\n        data_width = 1;\n        datatype = 0;\n        fmt = \"%\"PRId8;\n    }\n    else if (st == INTEGER16)\n    {\n        data_width = 2;\n        datatype = 0;\n        fmt = \"%\"PRId16;\n    }\n    else if (st == INTEGER32)\n    {\n        data_width = 4;\n        datatype = 0;\n        fmt = \"%\"PRId32;\n    }\n    else if (st == INTEGER64)\n    {\n        data_width = 8;\n        datatype = 0;\n        fmt = \"%\"PRId64;\n    }\n    else if (st == FLOAT32)\n    {\n        data_width = 4;\n        datatype = 0;\n        fmt = \"%f\";\n    }\n    else if (st == FLOAT64)\n    {\n        data_width = 8;\n        datatype = 0;\n        fmt = \"%lf\";\n    }\n    else if (st == BYTEARRAY)\n    {\n        data_width = argc - 3;\n        datatype = 1;\n    }\n    else if (st == STRING)\n    {\n        /* locate the string parameter, say locate the beginning of the 4th parameter (2 characters after the end of the 3rd paramter)*/\n        int i;\n        string_parameter = vars->current_cmdline;\n        for(i = 0; i < 3; ++i)\n        {\n            while(isspace(*string_parameter))\n                ++ string_parameter;\n            while(!isspace(*string_parameter))\n                ++ string_parameter;\n        }\n        ++ string_parameter;\n        data_width = strlen(string_parameter);\n        datatype = 2;\n    }\n    /* may support more types here */\n    else\n    {\n        show_error(\"bad data_type, see `help write`.\\n\");\n        ret = false;\n        goto retl;\n    }\n\n    /* check argc again */\n    if ((datatype == 0) && (argc != 4))\n    {\n        show_error(\"bad arguments, see `help write`.\\n\");\n        ret = false;\n        goto retl;\n    }\n\n    /* check address */\n    errno = 0;\n    addr = (void *)strtoll(argv[2], &endptr, 16);\n    if ((errno != 0) || (*endptr != '\\0'))\n    {\n        show_error(\"bad address, see `help write`.\\n\");\n        ret = false;\n        goto retl;\n    }\n\n    buf = malloc(data_width + 8); /* allocate a little bit more, just in case */\n    if (buf == NULL)\n    {\n        show_error(\"memory allocation failed.\\n\");\n        ret = false;\n        goto retl;\n    }\n\n    /* load value into buffer */\n    switch(datatype)\n    {\n    case 0: // numbers\n        if(sscanf(argv[3], fmt, buf) < 1) /* should be OK even for max uint64 */\n        {\n            show_error(\"bad value, see `help write`.\\n\");\n            ret = false;\n            goto retl;\n        }\n        if (1 < data_width && vars->options.reverse_endianness) {\n            swap_bytes_var(buf, data_width);\n        }\n        break;\n    case 1: // bytearray\n        ; /* cheat gcc */\n        /* call parse_uservalue_bytearray */\n        uservalue_t val_buf;\n        if(!parse_uservalue_bytearray(argv+3, argc-3, &val_buf))\n        {\n            show_error(\"bad byte array specified.\\n\");\n            free_uservalue(&val_buf);\n            ret = false;\n            goto retl;\n        }\n        int i;\n\n        {\n            // if wildcard is provided in the bytearray, we need the original data.\n            bool wildcard_used = false;\n            for(i = 0; i < data_width; ++i)\n            {\n                if(val_buf.wildcard_value[i] == WILDCARD)\n                {\n                    wildcard_used = true;\n                    break;\n                }\n            }\n            if (wildcard_used)\n            {\n                if(!sm_read_array(vars->target, addr, buf, data_width))\n                {\n                    show_error(\"read memory failed.\\n\");\n                    free_uservalue(&val_buf);\n                    ret = false;\n                    goto retl;\n                }\n            }\n        }\n\n        for(i = 0; i < data_width; ++i)\n        {\n            if(val_buf.wildcard_value[i] == FIXED)\n            {\n                buf[i] = val_buf.bytearray_value[i];\n            }\n        }\n        free_uservalue(&val_buf);\n        break;\n    case 2: //string\n        strncpy(buf, string_parameter, data_width);\n        break;\n    default:\n        assert(false);\n    }\n\n    /* write into memory */\n    ret = sm_write_array(vars->target, addr, buf, data_width);\n\nretl:\n    if(buf)\n        free(buf);\n    return ret;\n}\n\nbool handler__option(globals_t * vars, char **argv, unsigned argc)\n{\n    /* this might need to change */\n    if (argc != 3)\n    {\n        show_error(\"bad arguments, see `help option`.\\n\");\n        return false;\n    }\n\n    if (strcasecmp(argv[1], \"scan_data_type\") == 0)\n    {\n        scan_data_type_t st = parse_scan_data_type(argv[2]);\n        if (st != (scan_data_type_t)(-1)) {\n            vars->options.scan_data_type = st;\n        }\n        else\n        {\n            show_error(\"bad value for scan_data_type, see `help option`.\\n\");\n            return false;\n        }\n    }\n    else if (strcasecmp(argv[1], \"region_scan_level\") == 0)\n    {\n        if (strcmp(argv[2], \"1\") == 0) {vars->options.region_scan_level = REGION_HEAP_STACK_EXECUTABLE; }\n        else if (strcmp(argv[2], \"2\") == 0) {vars->options.region_scan_level = REGION_HEAP_STACK_EXECUTABLE_BSS; }\n        else if (strcmp(argv[2], \"3\") == 0) {vars->options.region_scan_level = REGION_ALL_RW; }\n        else if (strcmp(argv[2], \"4\") == 0) {vars->options.region_scan_level = REGION_ALL; }\n        else\n        {\n            show_error(\"bad value for region_scan_level, see `help option`.\\n\");\n            return false;\n        }\n    }\n    else if (strcasecmp(argv[1], \"dump_with_ascii\") == 0)\n    {\n        if (strcmp(argv[2], \"0\") == 0) {vars->options.dump_with_ascii = 0; }\n        else if (strcmp(argv[2], \"1\") == 0) {vars->options.dump_with_ascii = 1; }\n        else\n        {\n            show_error(\"bad value for dump_with_ascii, see `help option`.\\n\");\n            return false;\n        }\n    }\n    else if (strcasecmp(argv[1], \"endianness\") == 0)\n    {\n        // data is host endian: don't swap\n        if (strcmp(argv[2], \"0\") == 0) {vars->options.reverse_endianness = 0; }\n        // data is little endian: swap if host is big endian\n        else if (strcmp(argv[2], \"1\") == 0) {vars->options.reverse_endianness = big_endian; }\n        // data is big endian: swap if host is little endian\n        else if (strcmp(argv[2], \"2\") == 0) {vars->options.reverse_endianness = !big_endian; }\n        else\n        {\n            show_error(\"bad value for endianness, see `help option`.\\n\");\n            return false;\n        }\n    }\n    else if (strcasecmp(argv[1], \"noptrace\") == 0)\n    {\n#if HAVE_PROCMEM\n        if (strcmp(argv[2], \"0\") == 0) {vars->options.no_ptrace = 0; }\n        else if (strcmp(argv[2], \"1\") == 0) {vars->options.no_ptrace = 1; }\n        else\n        {\n            show_error(\"bad value for noptrace, see `help option`.\\n\");\n            return false;\n        }\n#else\n        show_error(\"\\nThe option noptrace is not supported on your system.\\n\"\n                   \"You might need to upgrade or reconfigure your kernel\"\n                   \" to support reading and writing to /proc/pid/mem.\\n\");\n        return false;\n#endif\n    }\n    else\n    {\n        show_error(\"unknown option specified, see `help option`.\\n\");\n        return false;\n    }\n    return true;\n}\n"
        },
        {
          "name": "handlers.h",
          "type": "blob",
          "size": 20.2294921875,
          "content": "/*\n    Specific command handling with help texts.\n\n    Copyright (C) 2006,2007,2009 Tavis Ormandy <taviso@sdf.lonestar.org>\n    Copyright (C) 2009           Eli Dupree <elidupree@charter.net>\n    Copyright (C) 2009,2010      WANG Lu <coolwanglu@gmail.com>\n    Copyright (C) 2014-2016      Sebastian Parschauer <s.parschauer@gmx.de>\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#ifndef HANDLERS_H\n#define HANDLERS_H\n\n#include <stdbool.h>\n\n#include \"scanmem.h\"\n\n/* Common documentations */\n\n#define SET_FORMAT_DOC \\\n    \"The Set Format:\\n\" \\\n    \"[!][..a](,b..c | d, ...)[e..]\\n\" \\\n    \"An optional `!` at the beginning inverts the defined set.\\n\" \\\n    \"The beginning and end of the set may include an optional \\\"open-ended\\\" range:\\n\" \\\n    \"`..a` means a range starting at `0` to `a`.\\n\" \\\n    \"`e..` means a range starting at `e` to the last valid value.\\n\" \\\n    \"The rest is the same as the standard format.\\n\\n\"\n\n/*\n * SHRTDOC's are one line descriptions of the supported command (shown with `help`).\n * LONGDOC's are detailed descriptions (shown with `help command`) (wrap them before column 80).\n * \n * The DOC's are passed to the registercommand() routine, and are read by the help\n * command. You can define SHRTDOC as NULL and help will not print it.\n * However, a NULL longdoc will print \"missing documentation\" if specific help is requested.\n * If you really don't want it to print anything, use \"\".\n *\n * Each handler is passed an argv and argc, argv[0] being the command called. Also passed is\n * a pointer to the global settings structure, which contains various settings and lists\n * that handlers are allowed to change. One handler can handle multiple commands, but\n * you need register each command with its own documentation.\n */\n\n#define SET_SHRTDOC \"change known matches to specified value\"\n#define SET_LONGDOC \"usage: set <[match-id set=]n [...]>\\n\" \\\n               \"Inject the value `n` into all the matches in `match-id set`, or if just `n` is\\n\" \\\n               \"specified, all known matches. `n` can be specified in standard C language\\n\" \\\n               \"notation, a leading 0x for hexadecimal, leading 0 for octal, and everything\\n\" \\\n               \"else is assumed to be decimal. All known matches, along with their match-ids\\n\" \\\n               \"can be displayed with the `list` command. Multiple match-ids can be specified,\\n\" \\\n               \"as a set data-type, terminated with a '=' sign. See below for a description of\\n\" \\\n               \"the set data-type.\\n\" \\\n               \"To set a value continually, for example to prevent a counter from decreasing,\\n\" \\\n               \"suffix the command with '/', followed by the number of seconds to wait between\\n\" \\\n               \"sets. Interrupt scanmem with ^C to stop the setting.\\n\\n\" \\\n               \"Note that this command cannot work for bytearray or string.\\n\\n\" \\\n               SET_FORMAT_DOC \\\n               \"Examples:\\n\" \\\n               \"\\tset 10 - set all known matches to 10\\n\" \\\n               \"\\tset 0=0x03 - set match 0 to 0x03.\\n\" \\\n               \"\\tset ..7=0x32 - set matches 0 through 7 to 0x32\\n\" \\\n               \"\\tset 0,3=42/8 - set matches 0 and 3 to 42 every 8 seconds\\n\" \\\n               \"\\tset !4..12=5 - set all matches except 4 through 12 to 5\\n\" \\\n               \"\\tset 12,13,14=0x23/2 19..23=0/8 6=4 0 - complex example, can be combined\" \\\n\nbool handler__set(globals_t *vars, char **argv, unsigned argc);\n\n#define LIST_SHRTDOC \"list currently known matches\"\n#define LIST_LONGDOC \"usage: list [max_to_print]\\n\" \\\n               \"Print currently known matches, along with details about the match:\\n\" \\\n               \"[match-id] address, region id + offset, region type, value, flags\\n\" \\\n               \"The left column is the `match-id`, this can be passed to other commands\\n\" \\\n               \"such as `set`, `delete`, etc.\\n\" \\\n               \"By default `list` prints up to 10k matches, a numerical parameter\\n\" \\\n               \"can be given to change this limit.\\n\" \\\n               \"The flags displayed indicate the possible types of the variable.\\n\" \\\n               \"Also the region id, an offset and the region type belonging to a match\\n\" \\\n               \"are displayed. The offset is used from the code load address or region start.\\n\" \\\n               \"This helps bypassing address space layout randomization (ASLR).\\n\"\n\nbool handler__list(globals_t *vars, char **argv, unsigned argc);\n\n#define DELETE_SHRTDOC \"delete known matches by match-id\"\n#define DELETE_LONGDOC \"usage: delete <match-id set>\\n\" \\\n                \"Remove a set of match-id's from the match list. The set format\\n\" \\\n                \"is described below. The list of match-id's can\\n\" \\\n                \"be found using the `list` command. To delete all matches, see\\n\" \\\n                \"the `reset` command.\\n\" \\\n                \"To delete all matches associated with a particular library, see the\\n\" \\\n                \"`dregion` command, which will also remove any associated matches.\\n\\n\" \\\n                SET_FORMAT_DOC \\\n                \"Examples:\\n\" \\\n                \"\\tdelete ..5,10..15  - delete matches 0 through 5 and 10 through 15\\n\" \\\n                \"\\tdelete ..5,14,20.. - delete matches 0 through 5, 14, and 20 through the last match\\n\" \\\n                \"\\tdelete !4..8,11    - delete all matches except for 4 through 8 and 11\\n\\n\" \\\n                \"NOTE: Match-ids may be recalculated after matches are removed or added. However, the set\\n\" \\\n                \"      of matches is guaranteed to be deleted properly.\"\n\n\nbool handler__delete(globals_t *vars, char **argv, unsigned argc);\n\n#define RESET_SHRTDOC \"forget all matches, and reinitialise regions\"\n#define RESET_LONGDOC \"usage: reset\\n\" \\\n                \"Forget all matches and regions, and reread regions from the relevant\\n\" \\\n                \"maps file. Useful if you have made an error, or want to find a new\\n\" \\\n                \"variable.\\n\"\n\nbool handler__reset(globals_t *vars, char **argv, unsigned argc);\n\n#define PID_SHRTDOC \"print current pid, or attach to a new process\"\n#define PID_LONGDOC \"usage: pid [pid]\\n\" \\\n                \"If `pid` is specified, reset current session and then attach to new\\n\" \\\n                \"process `pid`. If `pid` is not specified, print information about\\n\" \\\n                \"current process.\"\n\nbool handler__pid(globals_t *vars, char **argv, unsigned argc);\n\n#define SNAPSHOT_SHRTDOC \"take a snapshot of the current process state\"\n#define SNAPSHOT_LONGDOC \"usage: snapshot\\n\" \\\n                \"Take a snapshot of the entire process in its current state. This is useful\\n\" \\\n                \"if you don't know the exact value of the variable you are searching for, but\\n\" \\\n                \"can describe it in terms of higher, lower or equal (see commands `>`,`<` and\\n\" \\\n                \"`=`).\\n\\n\" \\\n                \"NOTE: This can use a lot of memory with large processes.\"\n\nbool handler__snapshot(globals_t *vars, char **argv, unsigned argc);\n\n#define DREGION_SHRTDOC \"delete a known region by region-id\"\n#define DREGION_LONGDOC \"usage: dregion <region-id set>\\n\" \\\n                \"Remove a set of region-id from the regions list,\\n\" \\\n                \"along with any matches affected from the match list.\\n\" \\\n                \"The `region-id` can be found using the `lregions` command.\\n\\n\" \\\n                SET_FORMAT_DOC\n\nbool handler__dregion(globals_t *vars, char **argv, unsigned argc);\n\n#define LREGIONS_SHRTDOC \"list all known regions\"\n#define LREGIONS_LONGDOC \"usage: lregions\\n\" \\\n                \"Print all the currently known regions, along with details such as the\\n\" \\\n                \"start address, size, region type, load address, permissions and associated\\n\" \\\n                \"filename. The number in the left column is the `region-id`, this can be\\n\" \\\n                \"passed to other commands that process regions, such as `dregion`.\\n\" \\\n                \"The load address is the start of the .text region for the executable\\n\" \\\n                \"or libraries. Otherwise, it is the region start.\\n\"\n\nbool handler__lregions(globals_t *vars, char **argv, unsigned argc);\n\n#define GREATERTHAN_SHRTDOC \"match values that have increased or greater than some number\"\n#define LESSTHAN_SHRTDOC    \"match values that have decreased or less than some number\"\n#define NOTCHANGED_SHRTDOC  \"match values that have not changed or equal to some number\"\n#define CHANGED_SHRTDOC     \"match values that have changed or different from some number\"\n#define INCREASED_SHRTDOC   \"match values that have increased at all or by some number\"\n#define DECREASED_SHRTDOC   \"match values that have decreased at all or by some number\"\n\n#define GREATERTHAN_LONGDOC \"usage: > [n]\\n\" \\\n                \"If n is given, match values that are greater than n.\\n\" \\\n                \"Otherwise match all values that have increased. (same as `+`)\\n\" \\\n                \"You can use this in conjunction with `snapshot` if you never know its value.\"\n#define LESSTHAN_LONGDOC \"usage: < [n]\\n\" \\\n                \"If n is given, match values that are less than n.\\n\" \\\n                \"Otherwise match all values that have decreased. (same as `-`)\\n\" \\\n                \"You can use this in conjunction with `snapshot` if you never know its value.\"\n\n#define NOTCHANGED_LONGDOC \"usage: = [n]\\n\" \\\n                \"If n is given, match values that are equal to n. (same as `n`)\\n\" \\\n                \"Otherwise match all values that have not changed since the last scan.\\n\" \\\n                \"You can use this in conjunction with `snapshot` if you never know its value.\"\n#define CHANGED_LONGDOC \"usage: != [n]\\n\" \\\n                \"If n is given, match values that are different from n.\\n\" \\\n                \"Otherwise match all values that have changed since the last scan.\\n\" \\\n                \"You can use this in conjunction with `snapshot` if you never know its value.\"\n\n#define INCREASED_LONGDOC \"usage: + [n]\\n\" \\\n                \"If n is given, match values that have been increased by n\\n\" \\\n                \"Otherwise match all values that have increased. (same as `>`)\\n\" \\\n                \"You can use this in conjunction with `snapshot` if you never know its value.\"\n\n#define DECREASED_LONGDOC \"usage: - [n]\\n\" \\\n                \"If n is given, match values that have been decreased by n\\n\" \\\n                \"Otherwise match all values that have decreased. (same as `<`)\\n\" \\\n                \"You can use this in conjunction with `snapshot` if you never know its value.\"\n\n\nbool handler__operators(globals_t *vars, char **argv, unsigned argc);\n\n#define VERSION_SHRTDOC \"print current version\"\n#define VERSION_LONGDOC \"usage: version\\n\" \\\n                \"Display the current version of scanmem in use.\"\n\nbool handler__version(globals_t *vars, char **argv, unsigned argc);\n\n#define EXIT_SHRTDOC \"exit the program immediately\"\n#define EXIT_LONGDOC \"usage: exit\\n\" \\\n                \"Exit scanmem immediately, zero will be returned.\"\n\nbool handler__exit(globals_t *vars, char **argv, unsigned argc);\n\n/*\n * Completion string syntax:\n * Separate words in the first level of the sub-command list with ',' without\n * any spaces in between. Example: \"word1,word2,word3\".\n *\n * Add another list right behind a word in the first level surrounded by\n * '{' and '}'. Place the ',' to mark the end of the first level completion\n * word right behind '}'. More levels than two are currently not supported.\n * Example: \"word1{word1.1,word1.2},word2{word2.1,word2.2}\"\n *\n * Special words are surrounded by '<' and '>'. The completer reacts on them\n * by filling in the requested data. Currently, only \"<command>\" is supported\n * to fill in the commands as a parameter for the \"help\" command. No further\n * sub-commands are allowed for this. For the help command it is actually\n * easier to compare the command name with \"help\" to do this trick.\n */\n#define HELP_COMPLETE \"<command>\"\n#define HELP_SHRTDOC \"access online documentation, use `help command` for specific help\"\n#define HELP_LONGDOC \"usage: help [command]\\n\" \\\n                \"If `command` is specified, print detailed information about command `command`\\n\" \\\n                \"including options and usage summary. If `command` is not specified, print a\\n\" \\\n                \"one line description of each command supported.\"\n\nbool handler__help(globals_t *vars, char **argv, unsigned argc);\n\n#define DEFAULT_SHRTDOC NULL\n#define DEFAULT_LONGDOC \"When searching for a number, use any notation in standard C language (leading 0x for\\n\" \\\n                \"hexadecimal, leading 0 for octal, everything else is assumed to be decimal).\\n\" \\\n                \"Float numbers are also acceptable, but will be rounded if scanning integers.\\n\" \\\n                \"Use \\'..\\' for a range, e.g. \\'1..3\\' searches between 1 and 3 inclusive.\\n\" \\\n                \"\\n\" \\\n                \"When searching for an array of byte, use 2-byte hexadecimal notation, \\n\" \\\n                \"separated by spaces, wildcard '?\\?' is also supported. E.g. FF ?\\? EE ?\\? 02 01\\n\" \\\n                \"\\n\" \\\n                \"When searching for strings, use the \\\" command\\n\" \\\n                \"\\n\" \\\n                \"Scan the current process for variables with given value.\\n\" \\\n                \"By entering the value of the variable as it changes multiple times, scanmem can\\n\" \\\n                \"eliminate matches, eventually identifying where the variable is located.\\n\" \\\n                \"Once the variable is found, use `set` to change its value.\\n\"\n\nbool handler__default(globals_t *vars, char **argv, unsigned argc);\n\n#define STRING_SHRTDOC \"match a given string\"\n#define STRING_LONGDOC \"usage \\\" <text>\\n\" \\\n                \"<text> is counted since the 2nd character following the leading \\\"\\n\" \\\n                \"This can only be used when scan_data_type is set to be string\\n\" \\\n                \"Example:\\n\" \\\n                \"\\t\\\" Scan for string, spaces and ' \\\" are all acceptable.\\n\"\n\nbool handler__string(globals_t *vars, char **argv, unsigned argc);\n\n#define UPDATE_SHRTDOC \"update match values without culling list\"\n#define UPDATE_LONGDOC \"usage: update\\n\" \\\n                \"Scans the current process, getting the current values of all matches.\\n\" \\\n                \"These values can be viewed with `list`, and are also the old values that\\n\" \\\n                \"scanmem compares to when using `>`, `<`, or `=`. This command is equivalent\\n\" \\\n                \"to a search command that all current results match.\\n\"\n\nbool handler__update(globals_t *vars, char **argv, unsigned argc);\n\nbool handler__eof(globals_t *vars, char **argv, unsigned argc);\n\n#define SHELL_SHRTDOC \"execute a shell command without leaving scanmem\"\n#define SHELL_LONGDOC \"usage: ! | shell [shell-command]\\n\" \\\n                \"Execute `shell-command` using /bin/sh then return, useful for reading man\\n\" \\\n                \"pages, checking top, or making notes with an external editor.\\n\" \\\n                \"Examples:\\n\" \\\n                \"\\t! vi notes.txt\\n\" \\\n                \"\\tshell man scanmem\\n\" \\\n                \"\\tshell cat > notes.txt\\n\"\n\nbool handler__shell(globals_t *vars, char **argv, unsigned argc);\n\n#define WATCH_SHRTDOC \"monitor the value of a memory location as it changes\"\n#define WATCH_LONGDOC \"usage: watch [match-id]\\n\" \\\n                \"Monitors the match `match-id`, by testing its value every second. When the\\n\" \\\n                \"value changes, its new value is printed along with an timestamp. Interrupt\\n\" \\\n                \"with ^C to stop monitoring.\\n\" \\\n                \"Examples:\\n\" \\\n                \"\\twatch 12 - watch match 12 for any changes.\\n\"\n\nbool handler__watch(globals_t *vars, char **argv, unsigned argc);\n\n/*XXX: improve this */\n#define SHOW_COMPLETE \"copying,warranty,version\"\n#define SHOW_SHRTDOC \"display information about scanmem.\"\n#define SHOW_LONGDOC \"usage: show <info>\\n\" \\\n                \"Display information relating to <info>.\\n\" \\\n                \"Possible <info> values: `copying`, `warranty` or `version`\\n\"\n\nbool handler__show(globals_t *vars, char **argv, unsigned argc);\n\n#define DUMP_SHRTDOC \"dump a memory region to screen or a file\" \n#define DUMP_LONGDOC \"usage: dump <address> <length> [<filename>]\\n\" \\\n                \"\\n\" \\\n                \"If <filename> is given, save the region of memory to the file \\n\" \\\n                \"Otherwise display it in a human-readable format.\\n\"\n    \nbool handler__dump(globals_t *vars, char **argv, unsigned argc);\n\n#define VALUE_TYPES \"int8,int16,int32,int64,float32,float64,bytearray,string\"\n#define WRITE_COMPLETE VALUE_TYPES\n#define WRITE_SHRTDOC \"change the value of a specific memory location\"\n#define WRITE_LONGDOC \"usage: write <value_type> <address> <value>\\n\" \\\n                \"\\n\" \\\n                \"Write <value> into <address>\\n\" \\\n                \"<value_type> should be one of:\\n\" \\\n                \"\\tint{8|16|32|64} (or i{8|16|32|64} for short)\\n\" \\\n                \"\\tfloat{32|64} (or f{32|64} for short)\\n\" \\\n                \"\\tbytearray\\n\" \\\n                \"\\tstring\\n\" \\\n                \"\\n\" \\\n                \"Example:\\n\" \\\n                \"\\twrite i16 60103e 0\\n\" \\\n                \"\\twrite float32 60103e 0\\n\" \\\n                \"\\twrite bytearray 60103e ff 01 32\\n\" \\\n                \"\\twrite string 60103e cheating\\n\"\n\nbool handler__write(globals_t *vars, char **argv, unsigned argc);\n\n#define OPTION_COMPLETE \"scan_data_type{number,int,float,\" VALUE_TYPES \\\n    \"},region_scan_level{1,2,3,4},dump_with_ascii{0,1},endianness{0,1,2},\" \\\n    \"noptrace{0,1}\"\n#define OPTION_SHRTDOC \"set runtime options of scanmem, see `help option`\"\n#define OPTION_LONGDOC \"usage: option <option_name> <option_value>\\n\" \\\n                 \"\\n\" \\\n                 \"Here are all options and their possible values\\n\" \\\n                 \"\\n\" \\\n                 \"scan_data_type\\t\\tspecify what type of data should be considered\\n\" \\\n                 \"\\t\\t\\tDefault:int\\n\" \\\n                 \"\\tMOST OF TIME YOU MUST EXECUTE `reset' IMMEDIATELY AFTER CHANGING scan_data_type\\n\" \\\n                 \"\\n\" \\\n                 \"\\tPossible Values:\\n\" \\\n                 \"\\tnumber:\\t\\t\\tinteger or float\\n\" \\\n                 \"\\tint:\\t\\t\\tinteger of any width\\n\" \\\n                 \"\\tfloat:\\t\\t\\tfloat of any width\\n\" \\\n                 \"\\tint{8|16|32|64}:\\tinteger of given width\\n\" \\\n                 \"\\tfloat{32|64}:\\t\\tfloat of given width\\n\" \\\n                 \"\\tbytearray:\\t\\tan array of bytes\\n\" \\\n                 \"\\tstring:\\t\\t\\tstring\\n\" \\\n                 \"\\n\" \\\n                 \"region_scan_level\\tspecify which regions should be scanned\\n\" \\\n                 \"\\t\\t\\tDefault:2\\n\" \\\n                 \"\\n\" \\\n                 \"\\tPossible Values:\\n\" \\\n                 \"\\t1:\\theap, stack and executable only\\n\" \\\n                 \"\\t2:\\theap, stack executable and bss only\\n\" \\\n                 \"\\t3:\\tall writable memory (including other libs)\\n\" \\\n                 \"\\t4:\\teverything\\n\" \\\n                 \"\\n\" \\\n                 \"dump_with_ascii\\twhether to print ascii characters with a memory dump\\n\" \\\n                 \"\\t\\t\\tDefault:1\\n\" \\\n                 \"\\n\" \\\n                 \"\\tpossible values:\\n\" \\\n                 \"\\t0:\\tdisabled\\n\" \\\n                 \"\\t1:\\tenabled\\n\" \\\n                 \"\\n\" \\\n                 \"endianness\\tendianness of data (used by: set, write and comparisons)\\n\" \\\n                 \"\\t\\t\\tDefault:0\\n\" \\\n                 \"\\n\" \\\n                 \"\\tpossible values:\\n\" \\\n                 \"\\t0:\\thost endian\\n\" \\\n                 \"\\t1:\\tlittle endian\\n\" \\\n                 \"\\t2:\\tbig endian\\n\" \\\n                 \"\\n\" \\\n                 \"noptrace\\tread/write without ptrace using /proc/pid/mem or using ptrace\\n\" \\\n                 \"\\t\\t\\tDefault:0\\n\" \\\n                 \"\\tpossibles values:\\n\"\\\n                 \"\\t0:\\tuse ptrace\\n\" \\\n                 \"\\t1:\\tno ptrace\\n\" \\\n                 \"\\n\" \\\n                 \"Example:\\n\" \\\n                 \"\\toption scan_data_type int32\\n\"\n\nbool handler__option(globals_t *vars, char **argv, unsigned argc);\n\n#endif /* HANDLERS_H */\n"
        },
        {
          "name": "interrupt.c",
          "type": "blob",
          "size": 1.3017578125,
          "content": "/*\n    Interrupt handling.\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#ifndef _GNU_SOURCE\n# define _GNU_SOURCE    /* for sighandler_t */\n#endif\n\n#include <setjmp.h>\n#include <signal.h>\n\n#include \"scanmem.h\"\n#include \"interrupt.h\"\n\nsigjmp_buf jmpbuf;       /* used when aborting a command due to an interrupt */\nsighandler_t oldsig;     /* reinstalled before longjmp */\nunsigned intr_used;\n\n/* signal handler used to handle an interrupt during commands */\nvoid interrupted(int n)\n{\n    (void) n;\n    siglongjmp(jmpbuf, 1);\n}\n\n/* signal handler used to handle an interrupt during scans */\nvoid interrupt_scan(int n)\n{\n    (void) n;\n    sm_set_stop_flag(true);\n}\n"
        },
        {
          "name": "interrupt.h",
          "type": "blob",
          "size": 1.5419921875,
          "content": "/*\n    Interrupt handling.\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#ifndef INTERRUPT_H\n#define INTERRUPT_H\n\n#ifndef _GNU_SOURCE\n# define _GNU_SOURCE    /* for sighandler_t */\n#endif\n\n#include <setjmp.h>\n#include <signal.h>\n\nextern sigjmp_buf jmpbuf;       /* used when aborting a command due to an interrupt */\nextern sighandler_t oldsig;     /* reinstalled before longjmp */\nextern unsigned intr_used;\n\n/* signal handler used to handle an interrupt during commands */\nvoid interrupted(int);\n\n/* signal handler used to handle an interrupt during scans */\nvoid interrupt_scan(int);\n\n#define INTERRUPTABLE() ((oldsig = signal(SIGINT, interrupted)), intr_used = 1, sigsetjmp(jmpbuf, 1))\n#define INTERRUPTABLESCAN() ((oldsig = signal(SIGINT, interrupt_scan)), intr_used = 1)\n#define ENDINTERRUPTABLE() (intr_used ? ((void) signal(SIGINT, oldsig), intr_used = 0) : (intr_used = 0))\n\n#endif /* INTERRUPT_H */\n"
        },
        {
          "name": "lgpl-3.0.txt",
          "type": "blob",
          "size": 7.4716796875,
          "content": "                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
        },
        {
          "name": "licence.h",
          "type": "blob",
          "size": 3.052734375,
          "content": "/*\n    Just some license texts.\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#ifndef LICENCE_H\n#define LICENCE_H\n\n#define SM_WARRANTY \\\n        \"15. Disclaimer of Warranty.\\n\\n\" \\\n        \"THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\\n\" \\\n        \"APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\\n\" \\\n        \"HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \\\"AS IS\\\" WITHOUT WARRANTY\\n\" \\\n        \"OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\\n\" \\\n        \"THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\\n\" \\\n        \"PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\\n\" \\\n        \"IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\\n\" \\\n        \"ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\\n\" \\\n        \"\\n\" \\\n        \"16. Limitation of Liability.\\n\\n\" \\\n        \"IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\\n\" \\\n        \"WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\\n\" \\\n        \"THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\\n\" \\\n        \"GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\\n\" \\\n        \"USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\\n\" \\\n        \"DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\\n\" \\\n        \"PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\\n\" \\\n        \"EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\\n\" \\\n        \"SUCH DAMAGES.\\n\"\n\n\n#define SM_COPYING \\\n        \"This program is free software; you can redistribute it and/or modify\\n\" \\\n        \"it under the terms of the GNU General Public License as published by\\n\" \\\n        \"the Free Software Foundation; either version 3 of the License, or\\n\" \\\n        \"(at your option) any later version.\\n\" \\\n        \"\\n\" \\\n        \"This program is distributed in the hope that it will be useful,\\n\" \\\n        \"but WITHOUT ANY WARRANTY; without even the implied warranty of\\n\" \\\n        \"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n\" \\\n        \"GNU General Public License for more details.\\n\" \\\n        \"\\n\" \\\n        \"You should have received a copy of the GNU General Public License\\n\" \\\n        \"along with this program; if not, see <http://www.gnu.org/licenses/>.\\n\" \n\n#endif /* LICENCE_H */\n"
        },
        {
          "name": "list.h",
          "type": "blob",
          "size": 3.400390625,
          "content": "/*\n    A very simple linked list implementation.\n\n    Copyright (C) 2006,2007,2009 Tavis Ormandy <taviso@sdf.lonestar.org>\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#ifndef LIST_H\n#define LIST_H\n\n#include <stdlib.h>\n\ntypedef struct element {\n    void *data;\n    struct element *next;\n} element_t;\n\ntypedef struct {\n    size_t size;\n    element_t *head;\n    element_t *tail;\n} list_t;\n\n/* create a new list */\nstatic inline list_t *l_init(void)\n{\n    return calloc(1, sizeof(list_t));\n}\n\n/* add a new element to the list */\nstatic inline int l_append(list_t *list, element_t *element, void *data)\n{\n    element_t *n = calloc(1, sizeof(element_t));\n\n    if (n == NULL)\n        return -1;\n\n    n->data = data;\n\n    /* insert at head or tail */\n    if (element == NULL) {\n        if (list->size == 0) {\n            list->tail = n;\n        }\n\n        n->next = list->head;\n        list->head = n;\n    } else {\n\n        /* insertion at the middle of a list */\n        if (element->next == NULL) {\n            list->tail = n;\n        }\n\n        n->next = element->next;\n        element->next = n;\n    }\n\n    list->size++;\n\n    return 0;\n}\n\n/* remove the element at element->next */\nstatic inline void l_remove(list_t *list, element_t *element, void **data)\n{\n    element_t *o;\n\n    /* remove from head */\n    if (element == NULL) {\n        if (data) {\n            *data = list->head->data;\n        }\n\n        o = list->head;\n\n        list->head = o->next;\n\n        if (list->size == 1) {\n            list->tail = NULL;\n        }\n    } else {\n        if (data) {\n            *data = element->next->data;\n        }\n\n        o = element->next;\n\n\n        if ((element->next = element->next->next) == NULL) {\n            list->tail = element;\n        }\n    }\n\n    if (data == NULL)\n        free(o->data);\n\n    free(o);\n\n    list->size--;\n\n    return;\n}\n\n/* remove the nth element from head */\nstatic inline void l_remove_nth(list_t *list, size_t n, void **data)\n{\n    element_t *np = list->head;\n\n    /* traverse to correct element */\n    while (n--) {\n        if ((np = np->next) == NULL)\n            /* return */ abort();\n    }\n\n    l_remove(list, np, data);\n}\n\n/* destroy the whole list */\nstatic inline void l_destroy(list_t *list)\n{\n    void *data;\n\n    if (list == NULL)\n        return;\n\n    /* remove every element */\n    while (list->size) {\n        l_remove(list, NULL, &data);\n        free(data);\n    }\n\n    free(list);\n}\n\n/* concatenate list src with list dst */\nstatic inline int l_concat(list_t *dst, list_t **src)\n{\n    void *data;\n    element_t *n;\n\n    n = (*src)->head;\n\n    while (n) {\n        l_remove(*src, NULL, &data);\n        if (l_append(dst, NULL, data) == -1)\n            return -1;\n\n        n = (*src)->head;\n    }\n\n    l_destroy(*src);\n\n    *src = NULL;\n\n    return 0;\n}\n\n#endif /* LIST_H */\n"
        },
        {
          "name": "main.c",
          "type": "blob",
          "size": 10.0849609375,
          "content": "/*\n    Scanmem main function, option parsing and help text.\n\n    Copyright (C) 2006,2007,2009 Tavis Ormandy <taviso@sdf.lonestar.org>\n    Copyright (C) 2009           Eli Dupree <elidupree@charter.net>\n    Copyright (C) 2009-2013      WANG Lu <coolwanglu@gmail.com>\n    Copyright (C) 2016           Sebastian Parschauer <s.parschauer@gmx.de>\n\n    This file is part of scanmem.\n \n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#ifndef _GNU_SOURCE\n#define _GNU_SOURCE\n#endif\n\n#include \"config.h\"\n\n#include <errno.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <getopt.h>\n#include <stdbool.h>\n\n#include <pwd.h>\n#include <unistd.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n#if HAVE_LIBREADLINE\n# include <readline/history.h>\n#else\n# include \"readline.h\"\n#endif\n\n#include \"common.h\"\n#include \"scanmem.h\"\n#include \"commands.h\"\n#include \"show_message.h\"\n\n#include \"menu.h\"\n\n\nstatic const char copy_text[] =\n\"Copyright (C) 2006-2017 Scanmem authors\\n\"\n\"See https://github.com/scanmem/scanmem/blob/main/AUTHORS for a full author list\\n\"\n\"\\n\"\n\"scanmem comes with ABSOLUTELY NO WARRANTY; for details type `show warranty'.\\n\"\n\"This is free software, and you are welcome to redistribute it\\n\"\n\"under certain conditions; type `show copying' for details.\\n\\n\";\n\n/* print scanmem and libscanmem version */\nstatic void printversion(FILE *outfd)\n{\n    fprintf(outfd, \"scanmem version %s\\n\", PACKAGE_VERSION);\n    sm_printversion(outfd);\n}\n\n/* print scanmem version and copyright info */\nstatic void printcopyright(FILE *outfd)\n{\n    printversion(outfd);\n    fprintf(outfd, \"\\n%s\", copy_text);\n}\n\nstatic const char help_text[] =\n\"Usage: scanmem [OPTION]... [PID]\\n\"\n\"Interactively locate and modify variables in an executing process.\\n\"\n\"\\n\"\n\"-p, --pid=pid\\t\\tset the target process pid\\n\"\n\"-c, --command\\t\\trun given commands (separated by `;`)\\n\"\n\"-h, --help\\t\\tprint this message\\n\"\n\"-v, --version\\t\\tprint version information\\n\"\n\"\\n\"\n\"scanmem is an interactive debugging utility, enter `help` at the prompt\\n\"\n\"for further assistance.\\n\"\n\"\\n\"\n\"Report bugs to <\" PACKAGE_BUGREPORT \">.\\n\";\n\n/* print quick usage message to stderr */\nstatic void printhelp(void)\n{\n    printcopyright(stderr);\n\n    show_user(\"%s\", help_text);\n    return;\n}\n\nstatic inline void show_user_quick_help(pid_t target)\n{\n    if (target == 0) {\n        show_user(\"Enter the pid of the process to search using the \\\"pid\\\" command.\\n\");\n        show_user(\"Enter \\\"help\\\" for other commands.\\n\");\n    } else {\n        show_user(\"Please enter current value, or \\\"help\\\" for other commands.\\n\");\n    }\n}\n\nstatic inline char *get_config_dir(void)\n{\n    /*\n     * Try to find our config folder in order:\n     * - XDG config dir\n     * - $HOME/.config\n     * - <system-given home>/.config\n     *\n     * In normal cases the dir will end up being: $HOME/.config/scanmem\n     */\n\n    char *sm_config_dir;\n\n    const char *config_dir = util_getenv(\"XDG_CONFIG_HOME\");\n    if (config_dir == NULL) {\n        const char *home_dir = util_getenv(\"HOME\");\n        if (home_dir == NULL) {\n            home_dir = getpwuid(getuid())->pw_dir;\n        }\n\n        size_t sm_config_dir_len = strlen(home_dir) + strlen(\"/.config/scanmem\") + 1;\n        sm_config_dir = malloc(sm_config_dir_len * sizeof(char));\n        if (sm_config_dir == NULL)\n            return NULL;\n        snprintf(sm_config_dir, sm_config_dir_len, \"%s/.config/scanmem\", home_dir);\n    }\n    else {\n        size_t sm_config_dir_len = strlen(config_dir) + strlen(\"/scanmem\") + 1;\n        sm_config_dir = malloc(sm_config_dir_len * sizeof(char));\n        if (sm_config_dir == NULL)\n            return NULL;\n        snprintf(sm_config_dir, sm_config_dir_len, \"%s/scanmem\", config_dir);\n    }\n\n    return sm_config_dir;\n}\n\n/* Recursive `mkdir()` implementation, from\n * https://stackoverflow.com/a/9210960/3288954\n * Takes a full file path as input */\nstatic inline int mkpath(const char *file_path, mode_t mode)\n{\n    assert(file_path != NULL);\n    char* p;\n    for (p = strchr(file_path + 1, '/'); p != NULL; p = strchr(p + 1, '/')) {\n        *p = '\\0';\n        if (mkdir(file_path, mode) == -1 && errno != EEXIST) {\n            *p='/';\n            return -1;\n        }\n        *p = '/';\n    }\n    return 0;\n}\n\nstatic void parse_parameters(int argc, char **argv, char **initial_commands, bool *exit_on_error)\n{\n    struct option longopts[] = {\n        {\"pid\",     1, NULL, 'p'},      /* target pid */\n        {\"command\", 1, NULL, 'c'},      /* commands to run at the beginning */\n        {\"version\", 0, NULL, 'v'},      /* print version */\n        {\"help\",    0, NULL, 'h'},      /* print help summary */\n        {\"debug\",   0, NULL, 'd'},      /* enable debug mode */\n        {\"errexit\", 0, NULL, 'e'},      /* exit on initial command failure */\n        {NULL, 0, NULL, 0},\n    };\n    char *end;\n    int optindex;\n    bool done = false;\n    globals_t *vars = &sm_globals;\n\n    /* process command line */\n    while (!done) {\n        switch (getopt_long(argc, argv, \"vhdep:c:\", longopts, &optindex)) {\n            case 'p':\n                vars->target = (pid_t) strtoul(optarg, &end, 0);\n\n                /* check if that parsed correctly */\n                if (*end != '\\0' || *optarg == '\\0' || vars->target == 0) {\n                    show_error(\"invalid pid specified.\\n\");\n                    exit(EXIT_FAILURE);\n                }\n                break;\n            case 'c':\n                *initial_commands = optarg;\n                break;\n            case 'v':\n                printversion(stderr);\n                exit(EXIT_FAILURE);\n            case 'h':\n                printhelp();\n                exit(EXIT_FAILURE);\n            case 'd':\n                vars->options.debug = 1;\n                break;\n            case 'e':\n                *exit_on_error = true;\n                break;\n            case -1:\n                done = true;\n                break;\n            default:\n                printhelp();\n                exit(EXIT_FAILURE);\n        }\n    }\n    /* parse any pid specified after arguments */\n    if (optind <= argc && argv[optind]) {\n        vars->target = (pid_t) strtoul(argv[optind], &end, 0);\n\n        /* check if that parsed correctly */\n        if (*end != '\\0' || argv[optind][0] == '\\0' || vars->target == 0) {\n            show_error(\"invalid pid specified.\\n\");\n            exit(EXIT_FAILURE);\n        }\n    }\n}\n\nint main(int argc, char **argv)\n{\n    char *initial_commands = NULL;\n    bool exit_on_error = false;\n    parse_parameters(argc, argv, &initial_commands, &exit_on_error);\n\n    int ret = EXIT_SUCCESS;\n    globals_t *vars = &sm_globals;\n\n    printcopyright(stderr);\n    vars->printversion = printversion;\n\n    if (!sm_init()) {\n        show_error(\"Initialization failed.\\n\");\n        ret = EXIT_FAILURE;\n        goto end;\n    }\n\n    if (getuid() != 0) {\n        show_warn(\"Run scanmem as root if memory regions are missing. \"\n                  \"See scanmem man page.\\n\\n\");\n    }\n\n    /* this will initialize matches and regions */\n    if (sm_execcommand(vars, \"reset\") == false) {\n        vars->target = 0;\n    }\n\n    /* check if there is a target already specified */\n    show_user_quick_help(vars->target);\n\n    /* execute commands passed by `-c`, if any */\n    if (initial_commands) {\n        char *saveptr = NULL;\n        const char sep[] = \";\\n\";\n        for (char *line = strtok_r(initial_commands, sep, &saveptr);\n             line != NULL; line = strtok_r(NULL, sep, &saveptr))\n        {\n            if (vars->matches) {\n                show_user(\"%ld> %s\\n\", vars->num_matches, line);\n            } else {\n                show_user(\"> %s\\n\", line);\n            }\n\n            if (sm_execcommand(vars, line) == false) {\n                if (exit_on_error) goto end;\n                show_user_quick_help(vars->target);\n            }\n\n            fflush(stdout);\n            fflush(stderr);\n        }\n    }\n    if (vars->exit)\n        goto end;\n\n    /* Start of interactive mode: recover history from history file */\n    const unsigned int hist_max_size = 1000;\n    char *sm_config_dir = get_config_dir();\n    if (sm_config_dir == NULL) {\n        show_error(\"Couldn't allocate memory\");\n        goto end;\n    }\n\n    size_t hist_file_len = strlen(sm_config_dir) + strlen(\"/history\") + 1;\n    char * hist_file = malloc(hist_file_len * sizeof(char));\n    if (hist_file == NULL) {\n        show_error(\"Couldn't allocate memory\");\n        goto end;\n    }\n    snprintf(hist_file, hist_file_len, \"%s/history\", sm_config_dir);\n    free(sm_config_dir);\n\n    read_history(hist_file);\n\n    /* main loop, read input and process commands */\n    while (true) {\n        char *line;\n\n        /* reads in a commandline from the user and returns a pointer to it in *line */\n        if (getcommand(vars, &line) == false) {\n            show_error(\"failed to read in a command.\\n\");\n            ret = EXIT_FAILURE;\n            break;\n        }\n\n        /* sm_execcommand() returning failure is not fatal, it just means the command could not complete. */\n        if (sm_execcommand(vars, line) == false) {\n            show_user_quick_help(vars->target);\n        }\n\n        free(line);\n\n        fflush(stdout);\n        fflush(stderr);\n\n        if (vars->exit) {\n            /* write history: create directory if needed.\n             * Permissions used are mandated by the FD spec:\n             * https://standards.freedesktop.org/basedir-spec/latest/ar01s04.html\n             */\n            if (mkpath(hist_file, 0700) == 0) {\n                write_history(hist_file);\n                history_truncate_file(hist_file, hist_max_size);\n            }\n            free(hist_file);\n            break;\n        }\n    }\n\nend:\n    sm_cleanup();\n    return ret;\n}\n"
        },
        {
          "name": "maps.c",
          "type": "blob",
          "size": 10.1376953125,
          "content": "/*\n    Reading the data from /proc/pid/maps into a regions list.\n\n    Copyright (C) 2006,2007,2009 Tavis Ormandy <taviso@sdf.lonestar.org>\n    Copyright (C) 2009           Eli Dupree <elidupree@charter.net>\n    Copyright (C) 2009,2010      WANG Lu <coolwanglu@gmail.com>\n    Copyright (C) 2014-2016      Sebastian Parschauer <s.parschauer@gmx.de>\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#ifndef _GNU_SOURCE\n# define _GNU_SOURCE\n#endif\n\n#include <stdio.h>\n#include <sys/types.h>\n#include <stddef.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n#include <unistd.h>\n\n#include \"list.h\"\n#include \"maps.h\"\n#include \"getline.h\"\n#include \"show_message.h\"\n\nconst char *region_type_names[] = REGION_TYPE_NAMES;\n\nbool sm_readmaps(pid_t target, list_t *regions, region_scan_level_t region_scan_level)\n{\n    FILE *maps;\n    char name[128], *line = NULL;\n    char exelink[128];\n    size_t len = 0;\n    unsigned int code_regions = 0, exe_regions = 0;\n    unsigned long prev_end = 0, load_addr = 0, exe_load = 0;\n    bool is_exe = false;\n\n#define MAX_LINKBUF_SIZE 256\n    char linkbuf[MAX_LINKBUF_SIZE], *exename = linkbuf;\n    int linkbuf_size;\n    char binname[MAX_LINKBUF_SIZE];\n\n    /* check if target is valid */\n    if (target == 0)\n        return false;\n\n    /* construct the maps filename */\n    snprintf(name, sizeof(name), \"/proc/%u/maps\", target);\n\n    /* attempt to open the maps file */\n    if ((maps = fopen(name, \"r\")) == NULL) {\n        show_error(\"failed to open maps file %s.\\n\", name);\n        return false;\n    }\n\n    show_info(\"maps file located at %s opened.\\n\", name);\n\n    /* get executable name */\n    snprintf(exelink, sizeof(exelink), \"/proc/%u/exe\", target);\n    linkbuf_size = readlink(exelink, exename, MAX_LINKBUF_SIZE - 1);\n    if (linkbuf_size > 0)\n    {\n        exename[linkbuf_size] = 0;\n    } else {\n        /* readlink may fail for special processes, just treat as empty in\n           order not to miss those regions */\n        exename[0] = 0;\n    }\n\n    /* read every line of the maps file */\n    while (getline(&line, &len, maps) != -1) {\n        unsigned long start, end;\n        region_t *map = NULL;\n        char read, write, exec, cow;\n        int offset, dev_major, dev_minor, inode;\n        region_type_t type = REGION_TYPE_MISC;\n\n        /* slight overallocation */\n        char filename[len];\n\n        /* initialise to zero */\n        memset(filename, '\\0', len);\n\n        /* parse each line */\n        if (sscanf(line, \"%lx-%lx %c%c%c%c %x %x:%x %u %[^\\n]\", &start, &end, &read,\n                &write, &exec, &cow, &offset, &dev_major, &dev_minor, &inode, filename) >= 6) {\n            /*\n             * get the load address for regions of the same ELF file\n             *\n             * When the ELF loader loads an executable or a library into\n             * memory, there is one region per ELF segment created:\n             * .text (r-x), .rodata (r--), .data (rw-) and .bss (rw-). The\n             * 'x' permission of .text is used to detect the load address\n             * (region start) and the end of the ELF file in memory. All\n             * these regions have the same filename. The only exception\n             * is the .bss region. Its filename is empty and it is\n             * consecutive with the .data region. But the regions .bss and\n             * .rodata may not be present with some ELF files. This is why\n             * we can't rely on other regions to be consecutive in memory.\n             * There should never be more than these four regions.\n             * The data regions use their variables relative to the load\n             * address. So determining it makes sense as we can get the\n             * variable address used within the ELF file with it.\n             * But for the executable there is the special case that there\n             * is a gap between .text and .rodata. Other regions might be\n             * loaded via mmap() to it. So we have to count the number of\n             * regions belonging to the exe separately to handle that.\n             * References:\n             * http://en.wikipedia.org/wiki/Executable_and_Linkable_Format\n             * http://wiki.osdev.org/ELF\n             * http://lwn.net/Articles/531148/\n             */\n\n            /* detect further regions of the same ELF file and its end */\n            if (code_regions > 0) {\n                if (exec == 'x' || (strncmp(filename, binname,\n                  MAX_LINKBUF_SIZE) != 0 && (filename[0] != '\\0' ||\n                  start != prev_end)) || code_regions >= 4) {\n                    code_regions = 0;\n                    is_exe = false;\n                    /* exe with .text and without .data is impossible */\n                    if (exe_regions > 1)\n                        exe_regions = 0;\n                } else {\n                    code_regions++;\n                    if (is_exe)\n                        exe_regions++;\n                }\n            }\n            if (code_regions == 0) {\n                /* detect the first region belonging to an ELF file */\n                if (exec == 'x' && filename[0] != '\\0') {\n                    code_regions++;\n                    if (strncmp(filename, exename, MAX_LINKBUF_SIZE) == 0) {\n                        exe_regions = 1;\n                        exe_load = start;\n                        is_exe = true;\n                    }\n                    strncpy(binname, filename, MAX_LINKBUF_SIZE);\n                    binname[MAX_LINKBUF_SIZE - 1] = '\\0';  /* just to be sure */\n                /* detect the second region of the exe after skipping regions */\n                } else if (exe_regions == 1 && filename[0] != '\\0' &&\n                  strncmp(filename, exename, MAX_LINKBUF_SIZE) == 0) {\n                    code_regions = ++exe_regions;\n                    load_addr = exe_load;\n                    is_exe = true;\n                    strncpy(binname, filename, MAX_LINKBUF_SIZE);\n                    binname[MAX_LINKBUF_SIZE - 1] = '\\0';  /* just to be sure */\n                }\n                if (exe_regions < 2)\n                    load_addr = start;\n            }\n            prev_end = end;\n\n            /* must have permissions to read and be non-zero size */\n            if ((read == 'r') && ((end - start) > 0)) {\n                bool useful = false;\n\n                /* determine region type */\n                if (is_exe)\n                    type = REGION_TYPE_EXE;\n                else if (code_regions > 0)\n                    type = REGION_TYPE_CODE;\n                else if (!strcmp(filename, \"[heap]\"))\n                    type = REGION_TYPE_HEAP;\n                else if (!strcmp(filename, \"[stack]\"))\n                    type = REGION_TYPE_STACK;\n\n                if (region_scan_level != REGION_ALL && write != 'w') {\n                    /* Only REGION_ALL scans non-writable memory regions */\n                    continue;\n                }\n\n                /* determine if this region is useful */\n                switch (region_scan_level)\n                {\n                    case REGION_ALL:\n                        useful = true;\n                        break;\n                    case REGION_ALL_RW:\n                        useful = true;\n                        break;\n                    case REGION_HEAP_STACK_EXECUTABLE_BSS:\n                        if (filename[0] == '\\0')\n                        {\n                            useful = true;\n                            break;\n                        }\n                        /* fall through */\n                    case REGION_HEAP_STACK_EXECUTABLE:\n                        if (type == REGION_TYPE_HEAP || type == REGION_TYPE_STACK)\n                        {\n                            useful = true;\n                            break;\n                        }\n                        /* test if the region is mapped to the executable */\n                        if (type == REGION_TYPE_EXE ||\n                          strncmp(filename, exename, MAX_LINKBUF_SIZE) == 0)\n                            useful = true;\n                    break;\n                }\n\n                if (!useful)\n                    continue;\n\n                /* allocate a new region structure */\n                if ((map = calloc(1, sizeof(region_t) + strlen(filename))) == NULL) {\n                    show_error(\"failed to allocate memory for region.\\n\");\n                    goto error;\n                }\n\n                /* initialize this region */\n                map->flags.read = true;\n                map->flags.write = (write == 'w');\n                map->start = (void *) start;\n                map->size = (unsigned long) (end - start);\n                map->type = type;\n                map->load_addr = load_addr;\n\n                /* setup other permissions */\n                map->flags.exec = (exec == 'x');\n                map->flags.shared = (cow == 's');\n                map->flags.private = (cow == 'p');\n\n                /* save pathname */\n                if (strlen(filename) != 0) {\n                    /* the pathname is concatenated with the structure */\n                    strcpy(map->filename, filename);\n                }\n\n                /* add a unique identifier */\n                map->id = regions->size;\n\n                /* okay, add this guy to our list */\n                if (l_append(regions, regions->tail, map) == -1) {\n                    show_error(\"failed to save region.\\n\");\n                    goto error;\n                }\n            }\n        }\n    }\n\n    show_info(\"%lu suitable regions found.\\n\", regions->size);\n\n    /* release memory allocated */\n    free(line);\n    fclose(maps);\n\n    return true;\n\nerror:\n    free(line);\n    fclose(maps);\n\n    return false;\n}\n"
        },
        {
          "name": "maps.h",
          "type": "blob",
          "size": 2.55078125,
          "content": "/*\n    Reading the data from /proc/pid/maps into a regions list.\n\n    Copyright (C) 2006,2007,2009 Tavis Ormandy <taviso@sdf.lonestar.org>\n    Copyright (C) 2009           Eli Dupree <elidupree@charter.net>\n    Copyright (C) 2009,2010      WANG Lu <coolwanglu@gmail.com>\n    Copyright (C) 2014-2016      Sebastian Parschauer <s.parschauer@gmx.de>\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#ifndef MAPS_H\n#define MAPS_H\n\n#include <stdbool.h>\n#include <sys/types.h>\n\n#include \"list.h\"\n\n/* determine which regions we need */\ntypedef enum {\n    REGION_ALL,                            /* All regions, including non-writable regions */\n    REGION_ALL_RW,                         /* each of them */\n    REGION_HEAP_STACK_EXECUTABLE,          /* heap, stack, executable */\n    REGION_HEAP_STACK_EXECUTABLE_BSS       /* heap, stack, executable, bss */\n} region_scan_level_t;\n\ntypedef enum {\n    REGION_TYPE_MISC,\n    REGION_TYPE_CODE,\n    REGION_TYPE_EXE,\n    REGION_TYPE_HEAP,\n    REGION_TYPE_STACK\n} region_type_t;\n\n#define REGION_TYPE_NAMES { \"misc\", \"code\", \"exe\", \"heap\", \"stack\" }\nextern const char *region_type_names[];\n\n/* a region obtained from /proc/pid/maps, these are searched for matches */\ntypedef struct {\n    void *start;             /* Start address. Hack: If HAVE_PROCMEM is defined, this is actually an (unsigned long) offset into /proc/{pid}/mem */\n    unsigned long size;              /* size */\n    region_type_t type;\n    unsigned long load_addr;         /* e.g. load address of the executable */\n    struct __attribute__((packed)) {\n        unsigned read:1;\n        unsigned write:1;\n        unsigned exec:1;\n        unsigned shared:1;\n        unsigned private:1;\n    } flags;\n    unsigned id;                /* unique identifier */\n    char filename[1];           /* associated file, must be last */\n} region_t;\n\nbool sm_readmaps(pid_t target, list_t *regions, region_scan_level_t region_scan_level);\n\n#endif /* MAPS_H */\n"
        },
        {
          "name": "menu.c",
          "type": "blob",
          "size": 5.8427734375,
          "content": "/*\n    Prompt and command completion.\n\n    Copyright (C) 2006,2007,2009 Tavis Ormandy <taviso@sdf.lonestar.org>\n    Copyright (C) 2010,2011      Lu Wang <coolwanglu@gmail.com>\n    Copyright (C) 2018           Sebastian Parschauer <s.parschauer@gmx.de>\n\n    This file is part of scanmem.\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#ifndef _GNU_SOURCE\n# define _GNU_SOURCE\n#endif\n\n#include \"config.h\"\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n#include <string.h>\n#include <stdbool.h>\n\n#if HAVE_LIBREADLINE\n#include <readline/readline.h>\n#include <readline/history.h>\n#else\n#include \"readline.h\"\n#endif\n\n#include \"menu.h\"\n#include \"list.h\"\n#include \"getline.h\"\n#include \"scanmem.h\"\n#include \"commands.h\"\n#include \"show_message.h\"\n\n/* sub-command generator for readline completion */\nstatic char *subcommandgenerator(char *start, int state, list_t *list,\n                                 unsigned *index)\n{\n    unsigned i;\n    element_t *np;\n    size_t len;\n    char *spos = strchr(start, ' ');\n\n    len = strlen(start);\n    if (spos)\n        len = spos - start;\n\n    /* reset generator if state == 0, otherwise continue from last time */\n    *index = (state && !spos) ? *index : 0;\n\n    np = list->head;\n\n    /* skip to the last node checked */\n    for (i = 0; np && i < *index; i++)\n        np = np->next;\n\n    /* traverse the completion list, checking for matches */\n    while (np) {\n        completion_t *compl = np->data;\n\n        np = np->next;\n\n        /* record progress */\n        (*index)++;\n\n        if (compl == NULL || compl->word == NULL)\n            continue;\n\n        /* check if we have a match */\n        if (strncmp(start, compl->word, len) == 0) {\n            if (!spos)\n                return strdup(compl->word);\n            if (!compl->list)\n                return NULL;\n            while (*spos == ' ')\n                spos++;\n            return subcommandgenerator(spos, state, compl->list, &compl->index);\n        }\n    }\n\n    return NULL;\n}\n\nstatic char *find_command(const char *start, int state, unsigned *index,\n                          bool is_subcmd)\n{\n    unsigned i;\n    size_t len;\n    element_t *np;\n    globals_t *vars = &sm_globals;\n    char *spos = strchr(start, ' ');\n\n    /* reset generator if state == 0, otherwise continue from last time */\n    *index = (state && !spos) ? *index : 0;\n\n    np = vars->commands ? vars->commands->head : NULL;\n\n    len = strlen(start);\n    if (spos)\n        len = spos - start;\n\n    /* skip to the last node checked */\n    for (i = 0; np && i < *index; i++)\n        np = np->next;\n\n    /* traverse the commands list, checking for matches */\n    while (np) {\n        command_t *command = np->data;\n\n        np = np->next;\n\n        /* record progress */\n        (*index)++;\n\n        /* if shortdoc is NULL, this is not supposed to be user visible */\n        if (command == NULL || command->command == NULL\n            || command->shortdoc == NULL)\n            continue;\n\n        /* check if we have a match */\n        if (strncmp(start, command->command, len) == 0) {\n            if (!spos)\n                return strdup(command->command);\n            if (!command->completions || is_subcmd)\n                return NULL;\n            while (*spos == ' ')\n                spos++;\n            if (strncmp(command->command, \"help\", sizeof(\"help\") - 1) == 0)\n                return find_command(spos, state, &command->complidx, true);\n            return subcommandgenerator(spos, state, command->completions,\n                                       &command->complidx);\n        }\n    }\n\n    return NULL;\n}\n\n/* command generator for readline completion */\nstatic char *commandgenerator(const char *text, int state)\n{\n    char *start = rl_line_buffer;\n    static unsigned index = 0;\n\n    while (*start == ' ')\n        start++;\n    return find_command(start, state, &index, false);\n}\n\n/* custom completor program for readline */\nstatic char **commandcompletion(const char *text, int start, int end)\n{\n    (void) end;\n\n    /* never use default completer (filenames), even if I dont generate any matches */\n    rl_attempted_completion_over = 1;\n\n    /* complete everything */\n    return rl_completion_matches(text, commandgenerator);\n}\n\n\n/*\n * getcommand() reads in a command using readline and places a pointer to\n * the read string into *line, which must be free'd by caller.\n * returns true on success, or false on error.\n */\n\nbool getcommand(globals_t *vars, char **line)\n{\n    char prompt[64];\n    bool success = true;\n\n    assert(vars != NULL);\n\n    if (vars->matches) {\n        snprintf(prompt, sizeof(prompt), \"%ld> \", vars->num_matches);\n    } else {\n        snprintf(prompt, sizeof(prompt), \"> \");\n    }\n\n    rl_readline_name = \"scanmem\";\n    rl_attempted_completion_function = commandcompletion;\n\n    while (true) {\n\n        success = ((*line = readline(prompt)) != NULL);\n        if (!success) {\n            /* EOF */\n            if ((*line = strdup(\"__eof\")) == NULL) {\n                show_error(\"sorry, there was a memory allocation error.\\n\");\n                return false;\n            }\n            return true; /* exit immediately to not commit `__eof` to history */\n        }\n\n        if (strlen(*line)) {\n            break;\n        }\n\n        free(*line);\n    }\n\n    /* record this line to readline history */\n    add_history(*line);\n    return true;\n}\n"
        },
        {
          "name": "menu.h",
          "type": "blob",
          "size": 1.1162109375,
          "content": "/*\n    Prompt and command completion.\n\n    Copyright (C) 2017 Andrea Stacchiotti  <andreastacchiotti(a)gmail.com>\n\n    This file is part of scanmem.\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#ifndef MENU_H\n#define MENU_H\n\n#include <stdbool.h>\n\n#include \"scanmem.h\"\n\n/*\n * getcommand() reads in a command using readline, and places a pointer to\n * the read string into *line, _which must be free'd by caller_.\n * returns true on success, or false on error.\n */\nbool getcommand(globals_t *vars, char **line);\n\n#endif /* MENU_H */\n"
        },
        {
          "name": "po",
          "type": "tree",
          "content": null
        },
        {
          "name": "ptrace.c",
          "type": "blob",
          "size": 27.6640625,
          "content": "/*\n    Functions to access the memory of the target process.\n \n    Copyright (C) 2006,2007,2009 Tavis Ormandy <taviso@sdf.lonestar.org>\n    Copyright (C) 2009           Eli Dupree <elidupree@charter.net>\n    Copyright (C) 2009,2010      WANG Lu <coolwanglu@gmail.com>\n    Copyright (C) 2015           Sebastian Parschauer <s.parschauer@gmx.de>\n    Copyright (C) 2017-2018      Andrea Stacchiotti <andreastacchiotti(a)gmail.com>\n \n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#include \"config.h\"\n\n/* for pread */\n# ifdef _XOPEN_SOURCE\n#  undef _XOPEN_SOURCE\n# endif\n# define _XOPEN_SOURCE 500\n\n#include <time.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <sys/ptrace.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <unistd.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <errno.h>\n#include <stdbool.h>\n#include <limits.h>\n#include <fcntl.h>\n\n// dirty hack for FreeBSD\n#if defined(__FreeBSD__) || defined(__FreeBSD_kernel__)\n#define PTRACE_ATTACH PT_ATTACH\n#define PTRACE_DETACH PT_DETACH\n#define PTRACE_PEEKDATA PT_READ_D\n#define PTRACE_POKEDATA PT_WRITE_D\n#endif\n\n#include \"common.h\"\n#include \"value.h\"\n#include \"scanroutines.h\"\n#include \"scanmem.h\"\n#include \"show_message.h\"\n#include \"targetmem.h\"\n#include \"interrupt.h\"\n\n/* progress handling */\n#define NUM_DOTS (10)\n#define NUM_SAMPLES (100)\n#define MAX_PROGRESS (1.0)  /* 100% */\n#if (!NUM_DOTS || !NUM_SAMPLES || NUM_SAMPLES % NUM_DOTS != 0)\n#error Invalid NUM_DOTS to NUM_SAMPLES proportion!\n#endif\n#define SAMPLES_PER_DOT (NUM_SAMPLES / NUM_DOTS)\n#define PROGRESS_PER_SAMPLE (MAX_PROGRESS / NUM_SAMPLES)\n\n/* ptrace peek buffer, used by peekdata() as a mirror of the process memory.\n * Max size is the maximum allowed rounded VLT scan length, aka UINT16_MAX,\n * plus a `PEEKDATA_CHUNK`, to store a full extra chunk for maneuverability */\n#if HAVE_PROCMEM\n# define PEEKDATA_CHUNK 2048\n#else\n# define PEEKDATA_CHUNK sizeof(long)\n#endif\n#define MAX_PEEKBUF_SIZE ((1<<16) + PEEKDATA_CHUNK)\nstatic struct {\n    uint8_t cache[MAX_PEEKBUF_SIZE];  /* read from ptrace()  */\n    unsigned size;              /* amount of valid memory stored (in bytes) */\n    const char *base;           /* base address of cached region */\n#if HAVE_PROCMEM\n    int procmem_fd;             /* file descriptor of the opened `/proc/<pid>/mem` file */\n#else\n    pid_t pid;                  /* pid of scanned process */\n#endif\n} peekbuf;\n\n\nbool sm_attach(pid_t target)\n{\n    if (!sm_globals.options.no_ptrace)\n    {\n        int status;\n\n        /* attach to the target application, which should cause a SIGSTOP */\n        if (ptrace(PTRACE_ATTACH, target, NULL, NULL) == -1L) {\n            show_error(\"failed to attach to %d, %s\\n\", target, strerror(errno));\n            return false;\n        }\n\n        /* wait for the SIGSTOP to take place. */\n        if (waitpid(target, &status, 0) == -1 || !WIFSTOPPED(status)) {\n            show_error(\"there was an error waiting for the target to stop.\\n\");\n            show_info(\"%s\\n\", strerror(errno));\n            return false;\n        }\n    }\n\n    /* reset the peek buffer */\n    peekbuf.size = 0;\n    peekbuf.base = NULL;\n\n#if HAVE_PROCMEM\n    { /* open the `/proc/<pid>/mem` file */\n        char mem[32];\n        int fd;\n\n        /* print the path to mem file */\n        snprintf(mem, sizeof(mem), \"/proc/%d/mem\", target);\n\n        /* attempt to open the file */\n        if ((fd = open(mem, O_RDWR)) == -1) {\n            show_error(\"unable to open %s.\\n\", mem);\n            return false;\n        }\n        peekbuf.procmem_fd = fd;\n    }\n#else\n    peekbuf.pid = target;\n#endif\n\n    /* everything looks okay */\n    return true;\n\n}\n\nbool sm_detach(pid_t target)\n{\n#if HAVE_PROCMEM\n    /* close the mem file before detaching */\n    close(peekbuf.procmem_fd);\n#endif\n\n    if (!sm_globals.options.no_ptrace)\n    {\n        /* addr is ignored on Linux, but should be 1 on FreeBSD in order to let\n        * the child process continue execution where it had been interrupted */\n        return ptrace(PTRACE_DETACH, target, 1, 0) == 0;\n    }\n    else\n    {\n        return true;\n    }\n}\n\n\n/* Reads data from the target process, and places it on the `dest_buffer`\n * using either `ptrace` or `pread` on `/proc/pid/mem`.\n * The target process is not passed, but read from the static peekbuf.\n * `sm_attach()` MUST be called before this function. */\nstatic inline size_t readmemory(uint8_t *dest_buffer, const char *target_address, size_t size)\n{\n    size_t nread = 0;\n\n#if HAVE_PROCMEM\n    do {\n        ssize_t ret = pread(peekbuf.procmem_fd, dest_buffer + nread,\n                            size - nread, (unsigned long)(target_address + nread));\n        if (ret == -1) {\n            /* we can't read further, report what was read */\n            return nread;\n        }\n        else {\n            /* some data was read */\n            nread += ret;\n        }\n    } while (nread < size);\n#else\n    /* Read the memory with `ptrace()`: the API specifies that `ptrace()` returns a `long`, which\n     * is the size of a word for the current architecture, so this section will deal in `long`s */\n    assert(size % sizeof(long) == 0);\n    errno = 0;\n    for (nread = 0; nread < size; nread += sizeof(long)) {\n        const char *ptrace_address = target_address + nread;\n        long ptraced_long = ptrace(PTRACE_PEEKDATA, peekbuf.pid, ptrace_address, NULL);\n\n        /* check if ptrace() succeeded */\n        if (UNLIKELY(ptraced_long == -1L && errno != 0)) {\n            /* it's possible i'm trying to read partially oob */\n            if (errno == EIO || errno == EFAULT) {\n                int j;\n                /* read backwards until we get a good read, then shift out the right value */\n                for (j = 1, errno = 0; j < sizeof(long); j++, errno = 0) {\n                    /* try for a shifted ptrace - 'continue' (i.e. try an increased shift) if it fails */\n                    ptraced_long = ptrace(PTRACE_PEEKDATA, peekbuf.pid, ptrace_address - j, NULL);\n                    if ((ptraced_long == -1L) && (errno == EIO || errno == EFAULT))\n                        continue;\n\n                    /* store it with the appropriate offset */\n                    uint8_t* new_memory_ptr = (uint8_t*)(&ptraced_long) + j;\n                    memcpy(dest_buffer + nread, new_memory_ptr, sizeof(long) - j);\n                    nread += sizeof(long) - j;\n\n                    /* interrupt the partial gathering process */\n                    break;\n                }\n            }\n            /* interrupt the gathering process */\n            break;\n        }\n        /* otherwise, ptrace() worked - store the data */\n        memcpy(dest_buffer + nread, &ptraced_long, sizeof(long));\n    }\n#endif\n    return nread;\n}\n\n/*\n * sm_peekdata - fills the peekbuf cache with memory from the process\n * \n * This routine calls either `ptrace(PEEKDATA, ...)` or `pread(...)`,\n * and fills the peekbuf cache, to make a local mirror of the process memory we're interested in.\n * `sm_attach()` MUST be called before this function.\n */\n\nextern inline bool sm_peekdata(const void *addr, uint16_t length, const mem64_t **result_ptr, size_t *memlength)\n{\n    const char *reqaddr = addr;\n    unsigned int i;\n    unsigned int missing_bytes;\n\n    assert(peekbuf.size <= MAX_PEEKBUF_SIZE);\n    assert(result_ptr != NULL);\n    assert(memlength != NULL);\n\n    /* check if we have a full cache hit */\n    if (peekbuf.base != NULL &&\n        reqaddr >= peekbuf.base &&\n        (unsigned long) (reqaddr + length - peekbuf.base) <= peekbuf.size)\n    {\n        *result_ptr = (mem64_t*)&peekbuf.cache[reqaddr - peekbuf.base];\n        *memlength = peekbuf.base - reqaddr + peekbuf.size;\n        return true;\n    }\n    else if (peekbuf.base != NULL &&\n             reqaddr >= peekbuf.base &&\n             (unsigned long) (reqaddr - peekbuf.base) < peekbuf.size)\n    {\n        assert(peekbuf.size != 0);\n\n        /* partial hit, we have some of the data but not all, so remove old entries - shift the frame by as far as is necessary */\n        missing_bytes = (reqaddr + length) - (peekbuf.base + peekbuf.size);\n        /* round up to the nearest PEEKDATA_CHUNK multiple, that is what could\n         * potentially be read and we have to fit it all */\n        missing_bytes = PEEKDATA_CHUNK * (1 + (missing_bytes-1) / PEEKDATA_CHUNK);\n\n        /* head shift if necessary */\n        if (peekbuf.size + missing_bytes > MAX_PEEKBUF_SIZE)\n        {\n            unsigned int shift_size = reqaddr - peekbuf.base;\n            shift_size = PEEKDATA_CHUNK * (shift_size / PEEKDATA_CHUNK);\n\n            memmove(peekbuf.cache, &peekbuf.cache[shift_size], peekbuf.size-shift_size);\n\n            peekbuf.size -= shift_size;\n            peekbuf.base += shift_size;\n        }\n    }\n    else {\n        /* cache miss, invalidate the cache */\n        missing_bytes = length;\n        peekbuf.size = 0;\n        peekbuf.base = reqaddr;\n    }\n\n    /* we need to retrieve memory to complete the request */\n    for (i = 0; i < missing_bytes; i += PEEKDATA_CHUNK)\n    {\n        const char *target_address = peekbuf.base + peekbuf.size;\n        size_t len = readmemory(&peekbuf.cache[peekbuf.size], target_address, PEEKDATA_CHUNK);\n\n        /* check if the read succeeded */\n        if (UNLIKELY(len < PEEKDATA_CHUNK)) {\n            if (len == 0) {\n                /* hard failure to retrieve memory */\n                *result_ptr = NULL;\n                *memlength = 0;\n                return false;\n            }\n            /* go ahead with the partial read and stop the gathering process */\n            peekbuf.size += len;\n            break;\n        }\n        \n        /* otherwise, the read worked */\n        peekbuf.size += PEEKDATA_CHUNK;\n    }\n\n    /* return result to caller */\n    *result_ptr = (mem64_t*)&peekbuf.cache[reqaddr - peekbuf.base];\n    *memlength = peekbuf.base - reqaddr + peekbuf.size;\n    return true;\n}\n\nstatic inline void print_a_dot(void)\n{\n    fprintf(stderr, \".\");\n    fflush(stderr);\n}\n\nstatic inline uint16_t flags_to_memlength(scan_data_type_t scan_data_type, match_flags flags)\n{\n    switch(scan_data_type)\n    {\n        case BYTEARRAY:\n        case STRING:\n            return flags;\n            break;\n        default: /* numbers */\n                 if (flags & flags_64b) return 8;\n            else if (flags & flags_32b) return 4;\n            else if (flags & flags_16b) return 2;\n            else if (flags & flags_8b ) return 1;\n            else    /* it can't be a variable of any size */ return 0;\n            break;\n    }\n}\n\n/* This is the function that handles when you enter a value (or >, <, =) for the second or later time (i.e. when there's already a list of matches);\n * it reduces the list to those that still match. It returns false on failure to attach, detach, or reallocate memory, otherwise true. */\nbool sm_checkmatches(globals_t *vars,\n                     scan_match_type_t match_type,\n                     const uservalue_t *uservalue)\n{\n    matches_and_old_values_swath *reading_swath_index = vars->matches->swaths;\n    matches_and_old_values_swath reading_swath = *reading_swath_index;\n\n    unsigned long bytes_scanned = 0;\n    unsigned long total_scan_bytes = 0;\n    matches_and_old_values_swath *tmp_swath_index = reading_swath_index;\n    unsigned int samples_remaining = NUM_SAMPLES;\n    unsigned int samples_to_dot = SAMPLES_PER_DOT;\n    size_t bytes_at_next_sample;\n    size_t bytes_per_sample;\n\n    if (sm_choose_scanroutine(vars->options.scan_data_type, match_type, uservalue, vars->options.reverse_endianness) == false)\n    {\n        show_error(\"unsupported scan for current data type.\\n\");\n        return false;\n    }\n\n    assert(sm_scan_routine);\n\n    while(tmp_swath_index->number_of_bytes)\n    {\n        total_scan_bytes += tmp_swath_index->number_of_bytes;\n        tmp_swath_index = (matches_and_old_values_swath *)(&tmp_swath_index->data[tmp_swath_index->number_of_bytes]);\n    }\n    bytes_per_sample = total_scan_bytes / NUM_SAMPLES;\n    bytes_at_next_sample = bytes_per_sample;\n    /* for user, just print the first dot */\n    print_a_dot();\n\n    size_t reading_iterator = 0;\n    matches_and_old_values_swath *writing_swath_index = vars->matches->swaths;\n    writing_swath_index->first_byte_in_child = NULL;\n    writing_swath_index->number_of_bytes = 0;\n\n    int required_extra_bytes_to_record = 0;\n    vars->num_matches = 0;\n    vars->scan_progress = 0.0;\n    vars->stop_flag = false;\n\n    /* stop and attach to the target */\n    if (sm_attach(vars->target) == false)\n        return false;\n\n    INTERRUPTABLESCAN();\n\n    while (reading_swath.first_byte_in_child) {\n        unsigned int match_length = 0;\n        const mem64_t *memory_ptr;\n        size_t memlength;\n        match_flags checkflags;\n\n        match_flags old_flags = reading_swath_index->data[reading_iterator].match_info;\n        unsigned int old_length = flags_to_memlength(vars->options.scan_data_type, old_flags);\n        void *address = reading_swath.first_byte_in_child + reading_iterator;\n\n        /* read value from this address */\n        if (UNLIKELY(sm_peekdata(address, old_length, &memory_ptr, &memlength) == false))\n        {\n            /* If we can't look at the data here, just abort the whole recording, something bad happened */\n            required_extra_bytes_to_record = 0;\n        }\n        else if (old_flags != flags_empty) /* Test only valid old matches */\n        {\n            value_t old_val = data_to_val_aux(reading_swath_index, reading_iterator, reading_swath.number_of_bytes);\n            memlength = old_length < memlength ? old_length : memlength;\n\n            checkflags = flags_empty;\n\n            match_length = (*sm_scan_routine)(memory_ptr, memlength, &old_val, uservalue, &checkflags);\n        }\n\n        if (match_length > 0)\n        {\n            assert(match_length <= memlength);\n\n            /* Still a candidate. Write data.\n               - We can get away with overwriting in the same array because it is guaranteed to take up the same number of bytes or fewer,\n                 and because we copied out the reading swath metadata already.\n               - We can get away with assuming that the pointers will stay valid,\n                 because as we never add more data to the array than there was before, it will not reallocate. */\n\n            writing_swath_index = add_element(&(vars->matches), writing_swath_index, address,\n                                              get_u8b(memory_ptr), checkflags);\n\n            ++vars->num_matches;\n\n            required_extra_bytes_to_record = match_length - 1;\n        }\n        else if (required_extra_bytes_to_record)\n        {\n            writing_swath_index = add_element(&(vars->matches), writing_swath_index, address,\n                                              get_u8b(memory_ptr), flags_empty);\n            --required_extra_bytes_to_record;\n        }\n\n        if (UNLIKELY(bytes_scanned >= bytes_at_next_sample)) {\n            bytes_at_next_sample += bytes_per_sample;\n            /* handle rounding */\n            if (LIKELY(--samples_remaining > 0)) {\n                /* for front-end, update percentage */\n                vars->scan_progress += PROGRESS_PER_SAMPLE;\n                if (UNLIKELY(--samples_to_dot == 0)) {\n                    samples_to_dot = SAMPLES_PER_DOT;\n                    /* for user, just print a dot */\n                    print_a_dot();\n                }\n                /* stop scanning if asked to */\n                if (vars->stop_flag) {\n                    printf(\"\\n\");\n                    break;\n                }\n            }\n        }\n        ++bytes_scanned;\n        \n        /* go on to the next one... */\n        ++reading_iterator;\n        if (reading_iterator >= reading_swath.number_of_bytes)\n        {\n            reading_swath_index = (matches_and_old_values_swath *)\n                (&reading_swath_index->data[reading_swath.number_of_bytes]);\n            reading_swath = *reading_swath_index;\n            reading_iterator = 0;\n            required_extra_bytes_to_record = 0; /* just in case */\n        }\n    }\n\n    ENDINTERRUPTABLE();\n\n    if (!(vars->matches = null_terminate(vars->matches, writing_swath_index)))\n    {\n        show_error(\"memory allocation error while reducing matches-array size\\n\");\n        return false;\n    }\n\n    show_user(\"ok\\n\");\n\n    /* tell front-end we've done */\n    vars->scan_progress = MAX_PROGRESS;\n\n    show_info(\"we currently have %ld matches.\\n\", vars->num_matches);\n\n    /* okay, detach */\n    return sm_detach(vars->target);\n}\n\n\n/* sm_searchregions() performs an initial search of the process for values matching `uservalue` */\nbool sm_searchregions(globals_t *vars, scan_match_type_t match_type, const uservalue_t *uservalue)\n{\n    matches_and_old_values_swath *writing_swath_index;\n    int required_extra_bytes_to_record = 0;\n    unsigned long total_size = 0;\n    unsigned long regnum = 0;\n    element_t *n = vars->regions->head;\n    region_t *r;\n    unsigned long total_scan_bytes = 0;\n    unsigned char *data = NULL;\n\n    if (sm_choose_scanroutine(vars->options.scan_data_type, match_type, uservalue, vars->options.reverse_endianness) == false)\n    {\n        show_error(\"unsupported scan for current data type.\\n\"); \n        return false;\n    }\n\n    assert(sm_scan_routine);\n\n    /* stop and attach to the target */\n    if (sm_attach(vars->target) == false)\n        return false;\n\n   \n    /* make sure we have some regions to search */\n    if (vars->regions->size == 0) {\n        show_warn(\"no regions defined, perhaps you deleted them all?\\n\");\n        show_info(\"use the \\\"reset\\\" command to refresh regions.\\n\");\n        return sm_detach(vars->target);\n    }\n\n    INTERRUPTABLESCAN();\n    \n    total_size = sizeof(matches_and_old_values_array);\n\n    while (n) {\n        total_size += ((region_t *)(n->data))->size * sizeof(old_value_and_match_info) + sizeof(matches_and_old_values_swath);\n        n = n->next;\n    }\n    \n    total_size += sizeof(matches_and_old_values_swath); /* for null terminate */\n    \n    show_debug(\"allocate array, max size %ld\\n\", total_size);\n\n    if (!(vars->matches = allocate_array(vars->matches, total_size)))\n    {\n        show_error(\"could not allocate match array\\n\");\n        return false;\n    }\n    \n    writing_swath_index = vars->matches->swaths;\n    \n    writing_swath_index->first_byte_in_child = NULL;\n    writing_swath_index->number_of_bytes = 0;\n    \n    /* get total number of bytes */\n    for(n = vars->regions->head; n; n = n->next)\n        total_scan_bytes += ((region_t *)n->data)->size;\n\n    vars->scan_progress = 0.0;\n    vars->stop_flag = false;\n    n = vars->regions->head;\n\n    /* check every memory region */\n    while (n) {\n        size_t bytes_remaining;\n        size_t bytes_per_dot;\n        double progress_per_dot;\n\n        /* load the next region */\n        r = n->data;\n        bytes_per_dot = r->size / NUM_DOTS;\n        bytes_remaining = bytes_per_dot * NUM_DOTS;\n        progress_per_dot = (double)bytes_per_dot / total_scan_bytes;\n\n/* The maximum logical size is a comfortable 1MiB (increasing it does not help).\n * The actual allocation is that plus the rounded size of the maximum possible VLT.\n * This is needed because the last byte might be scanned as max size VLT,\n * thus need (2^16 - 2) extra bytes after it */\n#define MAX_BUFFER_SIZE (1<<20)\n#define MAX_ALLOC_SIZE  (MAX_BUFFER_SIZE + (1<<16))\n\n        /* allocate data array */\n        size_t alloc_size = MIN(r->size, MAX_ALLOC_SIZE);\n        if ((data = malloc(alloc_size * sizeof(char))) == NULL) {\n            show_error(\"sorry, there was a memory allocation error.\\n\");\n            return false;\n        }\n\n        /* print a progress meter so user knows we haven't crashed */\n        show_user(\"%02lu/%02lu searching %#10lx - %#10lx\", ++regnum,\n                vars->regions->size, (unsigned long)r->start, (unsigned long)r->start + r->size);\n        fflush(stderr);\n\n        /* For every offset, check if we have a match. */\n        size_t memlength = r->size;\n        size_t buffer_size = 0;\n        void *reg_pos = r->start;\n        const uint8_t *buf_pos = NULL;\n        for ( ; ; memlength--, buffer_size--, reg_pos++, buf_pos++) {\n\n            /* check if the buffer is finished (or we just started) */\n            if (UNLIKELY(buffer_size == 0)) {\n\n                /* print a simple progress meter */\n                for ( ; memlength < bytes_remaining; bytes_remaining -= bytes_per_dot) {\n                    /* for user, just print a dot */\n                    print_a_dot();\n                    /* for front-end, update percentage */\n                    vars->scan_progress += progress_per_dot;\n                }\n\n                /* the whole region is finished */\n                if (memlength == 0) break;\n\n                /* stop scanning if asked to */\n                if (vars->stop_flag) break;\n\n                /* load the next buffer block */\n                size_t read_size = MIN(memlength, MAX_ALLOC_SIZE);\n                size_t nread = readmemory(data, reg_pos, read_size);\n                if (nread < read_size) {\n                    /* the region ends here, update `memlength` */\n                    memlength = nread;\n                    if ((nread == 0) && (reg_pos == r->start)) {\n                        /* Failed on first read, which means region not exist. */\n                        show_warn(\"reading region %02u failed.\\n\", regnum);\n                        break;\n                    }\n                }\n                /* If less than `MAX_ALLOC_SIZE` bytes remain, we have all of them\n                 * in the buffer, so go all the way.\n                 * Otherwise we need to stop at `MAX_BUFFER_SIZE`, so that\n                 * the last byte we look at has a full VLT after it */\n                buffer_size = memlength <= MAX_ALLOC_SIZE ? memlength : MAX_BUFFER_SIZE;\n                buf_pos = data;\n            }\n\n            const mem64_t* memory_ptr = (mem64_t*)buf_pos;\n            unsigned int match_length;\n            match_flags checkflags;\n\n            /* initialize checkflags */\n            checkflags = flags_empty;\n\n            /* check if we have a match */\n            match_length = (*sm_scan_routine)(memory_ptr, memlength, NULL, uservalue, &checkflags);\n            if (UNLIKELY(match_length > 0))\n            {\n                assert(match_length <= memlength);\n                writing_swath_index = add_element(&(vars->matches), writing_swath_index, reg_pos,\n                                                  get_u8b(memory_ptr), checkflags);\n                \n                ++vars->num_matches;\n                \n                required_extra_bytes_to_record = match_length - 1;\n            }\n            else if (required_extra_bytes_to_record)\n            {\n                writing_swath_index = add_element(&(vars->matches), writing_swath_index, reg_pos,\n                                                  get_u8b(memory_ptr), flags_empty);\n                --required_extra_bytes_to_record;\n            }\n\n        }\n\n        free(data);\n\n        /* stop scanning if asked to */\n        if (vars->stop_flag) {\n            printf(\"\\n\");\n            break;\n        }\n        n = n->next;\n        show_user(\"ok\\n\");\n    }\n\n    ENDINTERRUPTABLE();\n\n    /* tell front-end we've finished */\n    vars->scan_progress = MAX_PROGRESS;\n    \n    if (!(vars->matches = null_terminate(vars->matches, writing_swath_index)))\n    {\n        show_error(\"memory allocation error while reducing matches-array size\\n\");\n        return false;\n    }\n\n    show_info(\"we currently have %ld matches.\\n\", vars->num_matches);\n\n    /* okay, detach */\n    return sm_detach(vars->target);\n}\n\n/* Needs to support only ANYNUMBER types */\nbool sm_setaddr(pid_t target, void *addr, const value_t *to)\n{\n    unsigned int i;\n    uint8_t memarray[sizeof(uint64_t)] = {0};\n    size_t memlength;\n\n    if (sm_attach(target) == false) {\n        return false;\n    }\n\n    memlength = readmemory(memarray, addr, sizeof(uint64_t));\n    if (memlength == 0) {\n        show_error(\"couldn't access the target address %10p\\n\", addr);\n        return false;\n    }\n\n    unsigned int val_length = flags_to_memlength(ANYNUMBER, to->flags);\n    if (val_length > 0) {\n        /* Basically, overwrite as much of the data as makes sense, and no more. */\n        memcpy(memarray, to->bytes, val_length);\n    }\n    else {\n        show_error(\"could not determine type to poke.\\n\");\n        return false;\n    }\n\n    if (sm_globals.options.no_ptrace)\n    {\n#if HAVE_PROCMEM\n        if (pwrite(peekbuf.procmem_fd, memarray, sizeof(uint64_t), (long)addr) == -1)\n        {\n            return false;\n        }\n#else\n        return false;\n#endif\n    }\n    else\n    {\n        /* Assume `sizeof(uint64_t)` is a multiple of `sizeof(long)` */\n        for (i = 0; i < sizeof(uint64_t); i += sizeof(long))\n        {\n            if (ptrace(PTRACE_POKEDATA, target, addr + i, *(long*)(memarray + i)) == -1L) {\n                return false;\n            }\n        }\n    }\n\n    return sm_detach(target);\n}\n\nbool sm_read_array(pid_t target, const void *addr, void *buf, size_t len)\n{\n    if (sm_attach(target) == false) {\n        return false;\n    }\n\n    size_t nread = readmemory(buf, addr, len);\n    if (nread < len)\n    {\n        sm_detach(target);\n        return false;\n    }\n\n    return sm_detach(target);\n}\n\n/* TODO: may use /proc/<pid>/mem here */\nbool sm_write_array(pid_t target, void *addr, const void *data, size_t len)\n{\n    unsigned int i,j;\n    long peek_value;\n\n    if (sm_attach(target) == false) {\n        return false;\n    }\n\n    if (sm_globals.options.no_ptrace)\n    {\n#if HAVE_PROCMEM\n        if (pwrite(peekbuf.procmem_fd, data, len, (long)addr) == -1)\n        {\n            return false;\n        }\n#else\n        return false;\n#endif\n    }\n    else\n    {\n        for (i = 0; i + sizeof(long) < len; i += sizeof(long))\n        {\n            if (ptrace(PTRACE_POKEDATA, target, addr + i, *(long *)(data + i)) == -1L) {\n                return false;\n            }\n        }\n\n        if (len - i > 0) /* something left (shorter than a long) */\n        {\n            if (len > sizeof(long)) /* rewrite last sizeof(long) bytes of the buffer */\n            {\n                if (ptrace(PTRACE_POKEDATA, target, addr + len - sizeof(long), *(long *)(data + len - sizeof(long))) == -1L) {\n                    return false;\n                }\n            }\n            else /* we have to play with bits... */\n            {\n                /* try all possible shifting read and write */\n                for(j = 0; j <= sizeof(long) - (len - i); ++j)\n                {\n                    errno = 0;\n                    if(((peek_value = ptrace(PTRACE_PEEKDATA, target, addr - j, NULL)) == -1L) && (errno != 0))\n                    {\n                        if (errno == EIO || errno == EFAULT) /* may try next shift */\n                            continue;\n                        else\n                        {\n                            show_error(\"%s failed.\\n\", __func__);\n                            return false;\n                        }\n                    }\n                    else /* peek success */\n                    {\n                        /* write back */\n                        memcpy(((int8_t*)&peek_value)+j, data+i, len-i);\n\n                        if (ptrace(PTRACE_POKEDATA, target, addr - j, peek_value) == -1L)\n                        {\n                            show_error(\"%s failed.\\n\", __func__);\n                            return false;\n                        }\n\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    return sm_detach(target);\n}\n"
        },
        {
          "name": "readline.c",
          "type": "blob",
          "size": 1.8154296875,
          "content": "/*\n    Replace libreadline.\n\n    Copyright (C) 2015 Jonathan Pelletier <funmungus(a)gmail.com>\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#include <stdio.h>\n\n#include \"readline.h\"\n#include \"getline.h\"\n\nint rl_attempted_completion_over = 0;\nconst char *rl_readline_name = \"scanmem\";\nrl_completion_func_t *rl_attempted_completion_function = NULL;\n\n/* always return NULL to show that there are no completions */\nchar **rl_completion_matches(const char *text, rl_compentry_func_t\n                             *entry_function)\n{\n    return NULL;\n}\n\n/* show the prompt, then allocate, read and\n   return a line with getline() */\nchar *readline(const char *prompt)\n{\n    char *line = NULL;\n    size_t n = 0;\n    ssize_t bytes_read;\n\n    printf(\"%s\", prompt);\n    fflush(stdout);\n    bytes_read = getline(&line, &n, stdin);\n    if (bytes_read > 0)\n        line[bytes_read - 1] = '\\0';  /* remove the trailing newline */\n\n    return line;\n}\n\n/* don't maintain a history */\nvoid add_history(const char *line) {}\nint read_history (const char *filename) { return 0; }\nint write_history (const char *filename) { return 0; }\nint history_truncate_file (const char *filename, int nlines) { return 0; }\n"
        },
        {
          "name": "readline.h",
          "type": "blob",
          "size": 1.4970703125,
          "content": "/*\n    Replace libreadline.\n\n    Copyright (C) 2015 Jonathan Pelletier <funmungus(a)gmail.com>\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#ifndef READLINE_H\n#define READLINE_H\n\ntypedef char *rl_compentry_func_t(const char *, int);\ntypedef char **rl_completion_func_t(const char *, int, int);\n\nstatic char *rl_line_buffer = \"\";\n\nextern int rl_attempted_completion_over;\nextern const char *rl_readline_name;\nextern rl_completion_func_t *rl_attempted_completion_function;\n\nchar **rl_completion_matches(const char *text, rl_compentry_func_t\n                             *entry_function);\nchar *readline(const char *prompt);\n\n/* History, all doing nothing */\nvoid add_history(const char *line);\nint read_history (const char *filename);\nint write_history (const char *filename);\nint history_truncate_file (const char *filename, int nlines);\n\n#endif /* READLINE_H */\n"
        },
        {
          "name": "scanmem.1",
          "type": "blob",
          "size": 17.3662109375,
          "content": ".TH scanmem 1 \"2018-06-13\" \"scanmem-0.18\"\n.SH NAME\nscanmem \\- locate and modify variables in an executing process.\n\n.SH SYNOPSIS\n.B scanmem\n.RB [options]\n.IR [target-program-pid]\n\n\n.SH DESCRIPTION\n.B scanmem\nis an interactive debugging utility that can be used to isolate the address of a variable\nin an executing process by successively scanning the process' address space looking for\nmatching values.\n.br\n.RB \"By informing \" scanmem\nhow the value of the variable changes over time, it can determine the actual location (or\nlocations) of the variable by successively eliminating non-matches.\n.br\n.BR scanmem \" determines where to look by searching for mappings with\n.IR read \"/\" write\npermission, these are referred to as regions. Users can eliminate regions they believe are\nlikely unrelated to the target variable (for example, located in a shared library unrelated to\nthe variable in question), this will improve the speed of the scan, which can initially be quite\nslow in large programs.\n\nOnce a variable has been found,\n.B scanmem\ncan monitor the variable, or change it to a user specified value, either once, or continually\nover a period of time.\n\n.B scanmem\n.RI \"works similarly to the \\(dq\" pokefinders \"\\(dq once commonly used to cheat at video games,\"\nthis function is a good demonstration of how to use\n.BR scanmem \", and is used in the documentation.\"\n\n.SH USAGE\n.B scanmem\nshould be invoked with the process id of the program you wish to debug as an argument.\n.RB \"Once started, \" scanmem \" accepts interactive commands.\nThese are described below, however entering\n.BR help \" at the\n.BR > \" prompt will allow you to access\n.BR scanmem \"'s online documentation.\n\n.RI The \" target-program-pid\ncan be specified in decimal, hexadecimal, or octal using the standard C language notation\n(leading 0x for hexadecimal, leading 0 for octal, anything else is assumed to be decimal).\n\n.TP\n.BI \"\\-p, \\-\\-pid=\" pid\nSet the\n.IR \"target-program-pid\".\n\n.TP\n.BI \"\\-c, \\-\\-command=\" cmd1[;cmd2][;...]\nRun given commands (separated by \";\") before starting the interactive shell.\n\n.TP\n.B \"\\-v, \\-\\-version\"\nPrint version and exit.\n\n.TP\n.B \"\\-h, \\-\\-help\"\nPrint a short description of command line options then exit.\n\n.TP\n.B \"\\-d, \\-\\-debug\"\nRun in debug mode, more information will be outputted.\n\n.TP\n.B \"\\-e, \\-\\-errexit\"\nExit on initial commands error, ignored during interactive mode.\n\n.SH COMMANDS\n\nWhile in interactive mode,\n.BR scanmem \" prints a decimal number followed by \" > \", the number is the current number of\"\npossible candidates for the target variable that are known. The absence of said number\nindicates that no possible variables have been eliminated yet.\n.br\nThe default scan data type is \"int\".\n.RB \"It can be changed with the \" option \" command.\"\n\n.TP\n.B n\nWhere\n.B n\nrepresents any number in decimal, octal or hexadecimal, this command tells\n.B scanmem\nthat the current value of the target variable is exactly\n.BR n \".\"\n.B scanmem\nwill begin a search of the entire address space, or the existing known matches (if any),\neliminating any variable that does not have this value.\n\n.TP\n.B n..m\nThis is like the\n.B n\ncommand but\n.B scanmem\nsearches for a range of numbers between\n.B n\nand\n.B m\ninclusive instead.\n\n.TP\n.BR \">\", \" <\", \" +\", \" -\", \" =\", \" !=\"\nThe following commands are extremely useful for locating a variable whose\nexact value we cannot see, but we can see how it changes over time, e.g. an health bar.\nThese commands usually cannot be used for the first scan but there are some exceptions:\n.BR \"> \" n, \" < \" n, \" = \" \"n and\" \" != \" n.\n\n.RS\n.TP\n.BI \"> \" [n]\n.RI \"If \" n \" is given, match values that are greater than \" n \".\"\n.RB \"Otherwise match all values that have increased.\"\n\n.TP\n.BI \"< \" [n]\n.RI \"If \" n \" is given, match values that are less than \" n \".\"\n.RB \"Otherwise match all values that have decreased.\"\n\n.TP\n.BI \"+ \" [n]\n.RI \"If \" n \" is given, match values that have been increased by \" n \".\"\n.RB \"Otherwise match all values that have increased (same as \" > \").\"\n\n.TP\n.BI \"- \" [n]\n.RI \"If \" n \" is given, match values that have been decreased by \" n \".\"\n.RB \"Otherwise match all values that have decreased (same as \" < \").\"\n\n.TP\n.BI \"= \" [n]\n.RI \"If \" n \" is given, match values that are equal to \" n \"\n.RB \"(same as \" n \"). Otherwise match all values that have not changed.\"\n\n.TP\n.BI \"!= \" [n]\n.RI \"If \" n \" is given, match values that are different from \" n \".\"\n.RB \"Otherwise match all values that have changed.\"\n.RE\n\n.TP\n.B snapshot\nMatch any value. This is useful when an initial value or range is not known for\nsubsequent scans with\n.BR > \", \" < \", \" + \", \" - \", \" = \", and \" != \".\"\n\n.TP\n.BI \"\\(dq \" text\nSearch for the provided\n.I text\nin memory if the scan data type is set to \"string\".\n\n.TP\n.B update\nScans the current process, getting the current values of all matches. These values can be viewed with\n.BR list \", and are also the old values that \" scanmem \" compares to when using\"\n.BR > \", \" < \", or \" = \".\"\nThis command is equivalent to a search command that all current results match.\n\n.TP\n.BI list \" [max_to_print]\n.RI \"List up to \" max_to_print \" (default: \" 10k \") possible candidates currently known,\nincluding their address, region id, match offset, region type, last known value and possible value types.\nThe value in the first column is the match id, and can be used in conjunction with the\n.B delete\ncommand to eliminate matches.\n\nThe match offset is determined by subtracting the load address of the associated\nELF file or region from the address. It can be used to bypass Address Space Layout Randomization\n(ASLR).\n\n.TP\n.BI delete \" match-id_set\n.RI \"Delete matches in the \" match-id_set \".\n.RI \"The \" match-ids \" can be found from the output of the\n.BR list \" command.\n.RI \"Set notation: \" \"[!][..a](,b..c | d, ...)[e..]\".\n.br\n.RB \"To delete all known matches, see the \" reset \" command.\n.br\nTo delete all the matches associated with a particular library, see the\n.BR dregion \" command, which also removes any associated matches.\n.br\nPlease note that match-ids may be recalculated after matches are removed or added.\n\n.TP\n.BI watch \" match-id\nMonitor the value of\n.IR match-id \", and print its value as it changes. Every change is printed along with a timestamp,\"\nyou can interrupt this command with ^C to stop monitoring.\n\n.TP\n.BI set \" [match-id_set=]value[/delay] [...]\n.RI \"Set the value \" value \" into the match numbers specified in \" match-id_set \",\n.RI \"or if just \" value \" is specified, all known matches.\"\n.IR value \" can be specified in standard C language notation.\nAll known matches, along with their match-id's can be displayed using the\n.BR list \" command.\n.RI Multiple \" match-id_set\" \"s can be specified, terminated with an \" = \" sign.\n.RI \"Set notation: \" \"[!][..a](,b..c | d, ...)[e..]\".\n.br\n.RI \"To set a value continually, suffix the command with \" /\nfollowed by the number of seconds to wait between sets. You can interrupt the set command\nwith ^C to return to the\n.BR scanmem \" prompt.\nThis can be used to sustain the value of a variable which decreases over time, for\nexample a timer that is decremented every second can be set to 100 every 10 seconds to\nprevent some property from ever changing.\n\nThis command is used to change the value of the variable(s) once found by elimination.\nPlease note, some applications will store values in multiple locations.\n\n.TP\n.BI write \" value_type address value\nManually set the value of the variable at the specified address.\n.br\n.RI \"Names of \" value_type\nare subject to change in different versions of\n.BR scanmem \",\"\nsee more info using the `help write` command.\n\n.TP\n.BI dump \" address length [filename]\n.RI \"Dump the memory region starting from \" address \" of length \" length\nin a human-readable format.\n\n.RI \"If \" filename \" is given,\ndata will be saved into the file, otherwise data will be displayed on stdout.\n\n.TP\n.BI pid \" [new-pid]\nPrint out the process id of the current target program, or change the target to\n.IR new-pid \", which will reset existing regions and matches.\"\n\n.TP\n.B reset\nForget all known regions and matches and start again.\n\n.TP\n.B lregions\nList all the known regions, this can be used in combination with the\n.B dregion\ncommand to eliminate regions that the user believes are not related to the variable in question,\nthus reducing the address space required to search in. The value in the first column is the\n.I region-id\nwhich must be passed to the\n.B dregion\ncommand. Besides the start address, the size and path (if applicable) are also printed. This can be\nused to eliminate regions located in shared libraries that are unlikely to be relevant to the\nvariable required.\n\nFor experts: Also the region type and the load address are displayed. The types are \"exe\" (executable)\n\"code\" (library), \"heap\", \"stack\" or \"misc\" (everything else). The load address is the memory location\nwhere an ELF file (exe/lib) has been loaded to. This helps to convert between the addresses in memory\nand in the associated ELF file. If the region does not belong to an ELF file, then it is the same as\nthe start address.\n\n.TP\n.BI dregion \" region-id_set\n.RI \"Delete the regions in \" region-id_set \", along with any matches from the match list.\n.RI \"Set notation: \" \"[!][..a](,b..c | d, ...)[e..]\".\n.br\n.RI \"The \" region-id \"'s can be found in the output of the\n.BR lregions \" command.\n\n.TP\n.BI option \" name value\nChange options at runtime. E.g. the scan data type can be changed.\nSee `help option` for all possible names/values.\n\n.TP\n.BI shell \" shell-command\n.RI \"Execute \" shell-command \" using /bin/sh, then return.\n\n.TP\n.BI show \" info\nDisplay information relating to\n.I info\n- see `help show` for details.\n\n.TP\n.B version\nPrint the version of\n.B scanmem\nin use.\n\n.TP\n.B help\nPrint a short summary of available commands.\n\n.TP\n.B exit\nDetach from the target program and exit immediately.\n\n.SH HISTORY\n.RB \"In interactive mode \" scanmem \" will retrieve the previous commands history\nat startup and update it at closure.\n.RI \"The file used by default is \" $XDG_CONFIG_HOME/scanmem/history \" , which\n.RI \"will be \" ~/.config/scanmem/history \" under normal configurations.\n.br\nThe maximum size of the history is currently 1000 lines.\n\n.SH EXAMPLES\nCheat at nethack, on systems where nethack is not installed sgid.\n\n.B ATTENTION: scanmem\nusually requires root privileges. See\n.B KNOWN ISSUES\nfor details.\n\n.nf\n$ sudo scanmem `pgrep nethack`\ninfo: maps file located at /proc/14658/maps opened.\ninfo: 9 suitable regions found.\nPlease enter current value, or \"help\" for other commands.\n>\n.fi\n\nI enter how much gold I currently have (58 pieces) and let\n.B scanmem\nfind the potential candidates.\n\n\n.nf\n> 58\n01/09 searching   0x79f000 -   0x7b0000..........ok\n02/09 searching   0x7b0000 -   0x7cc000..........ok\n03/09 searching  0x24d2000 -  0x24f3000..........ok\n04/09 searching 0x7fcc04baa000 - 0x7fcc04bae000..........ok\n05/09 searching 0x7fcc04de1000 - 0x7fcc04de2000..........ok\n06/09 searching 0x7fcc051f7000 - 0x7fcc051fb000..........ok\n07/09 searching 0x7fcc05227000 - 0x7fcc0522a000..........ok\n08/09 searching 0x7fcc0522c000 - 0x7fcc0522d000..........ok\n09/09 searching 0x7ffc8c113000 - 0x7ffc8c134000..........ok\ninfo: we currently have 16 matches.\n16> list\n[ 0]       7b09e0,  1 +       3b09e0,   exe, 58, [I64 I32 I16 I8 ]\n[ 1]       7b907a,  1 +       3b907a,   exe, 58, [I8 ]\n[ 2]      24d4b6c,  2 +         2b6c,  heap, 58, [I16 I8 ]\n[ 3]      24d567e,  2 +         367e,  heap, 58, [I16 I8 ]\n[ 4]      24d5740,  2 +         3740,  heap, 58, [I8 ]\n[ 5] 7fcc05229951,  6 +         2951,  misc, 58, [I8 ]\n[ 6] 7ffc8c12ee28,  8 +        1be28, stack, 58, [I16 I8 ]\n[ 7] 7ffc8c132381,  8 +        1f381, stack, 58, [I8 ]\n[ 8] 7ffc8c132389,  8 +        1f389, stack, 58, [I8 ]\n[ 9] 7ffc8c132391,  8 +        1f391, stack, 58, [I8 ]\n[10] 7ffc8c132399,  8 +        1f399, stack, 58, [I8 ]\n[11] 7ffc8c1323a1,  8 +        1f3a1, stack, 58, [I8 ]\n[12] 7ffc8c1323a9,  8 +        1f3a9, stack, 58, [I8 ]\n[13] 7ffc8c1331a3,  8 +        201a3, stack, 58, [I8 ]\n[14] 7ffc8c13325f,  8 +        2025f, stack, 58, [I8 ]\n[15] 7ffc8c133264,  8 +        20264, stack, 58, [I8 ]\n16>\n.fi\n\n16 potential matches were found. This is also displayed in the prompt.\nMany of them are quite unrelated, as they are part of the stack, belong to libraries\nor miscellaneous memory-mapped files. Even the heap is unlikely for a very old command\nline game. We could make\n.B scanmem\neliminate these manually using the\n.B delete\ncommand, however just waiting until the amount of gold changes and telling\n.B scanmem\nthe new value should be enough. I find some more gold, and tell\n.B scanmem\nthe new value, 83.\n\n.nf\n16> 83\n\\[char46].........info: we currently have 1 matches.\ninfo: match identified, use \"set\" to modify value.\ninfo: enter \"help\" for other commands.\n1> list\n[ 0]       7b09e0,  1 +       3b09e0,   exe, 83, [I64 I32 I16 I8 ]\n.fi\n\nOnly one of the 16 original candidates now has the value 83, so this must be where the\namount of gold is stored. I'll try setting it to 10,000 pieces.\n\n.nf\n1> set 10000\ninfo: setting *0x7b09e0 to 0x2710...\n1> \n.fi\n\nThe resulting nethack status:\n\n.nf\nDlvl:1  $:10000 HP:15(15) Pw:2(2) AC:7  Exp:1\n.fi\n\nConclusion: We've found and modified the gold value as I32 in static memory of the executable\nat virtual memory address 0x7b09e0. This address belongs to the region with id 1.\n\nNow it is important to know if this is a position-independent executable (PIE). We list the\nregions for this and check the load address of the executable.\n\n.nf\n1> lregions\n[ 0]       79f000,   69632 bytes,   exe,       400000, rw-, /usr/lib/nethack/nethack.tty\n[ 1]       7b0000,  114688 bytes,   exe,       400000, rw-, unassociated\n[ 2]      24d2000,  135168 bytes,  heap,      24d2000, rw-, [heap]\n[ 3] 7fcc04baa000,   16384 bytes,  misc, 7fcc04baa000, rw-, unassociated\n[ 4] 7fcc04de1000,    4096 bytes,  misc, 7fcc04de1000, rw-, unassociated\n[ 5] 7fcc051f7000,   16384 bytes,  misc, 7fcc051f7000, rw-, unassociated\n[ 6] 7fcc05227000,   12288 bytes,  misc, 7fcc05227000, rw-, unassociated\n[ 7] 7fcc0522c000,    4096 bytes,  misc, 7fcc0522c000, rw-, unassociated\n[ 8] 7ffc8c113000,  135168 bytes, stack, 7ffc8c113000, rw-, [stack]\n.fi\n\nWe are on x86_64 and 0x400000 is the static load address for executables there. This means\nthat this is not a PIE and the gold is always stored at 0x7b09e0. This makes it easy to\nuse a game trainer like GameConqueror which refills the gold value periodically.\n\nWith a PIE we have to use the match offset (0x3b09e0 here) instead and an advanced game trainer\nwith PIE support has to determine and add the current load address to it to get the current\nmemory address of the gold value of the current game run.\n\n.SH NOTES\n\n.B scanmem\nhas been tested on multiple large programs, including the 3d shoot-em-up quake3 linux.\n.B scanmem\nis also tested on ARM platforms and comes with Android support since version 0.16.\n\nObviously,\n.B scanmem\ncan crash your program if used incorrectly.\n\nSome programs store values in multiple locations, this is why\n.B set\nwill change all known matches.\n\nAddress Space Layout Randomization (ASLR) together with position-independent executables\n(PIE), position-independent code (PIC) or dynamic memory on the heap causes variables to\nbe loaded to different memory addresses at every game start. Advanced game trainers like\nugtrain are required to periodically refill variables is such memory regions.\n\n.SH KNOWN ISSUES\n\n.B scanmem\nusually requires root privileges for\n.BR ptrace (2)\nbecause security modules control ptrace() capabilities. On x86 and x86_64 there is usually\nthe\n.B Yama\nsecurity module providing the file\n.IR /proc/sys/kernel/yama/ptrace_scope \".\"\nIt is available since Linux 3.4. If this file contains \"1\", then only parents may ptrace()\ntheir children without root privileges. This means that\n.B scanmem\nwould have to run the game. This is not possible as this would require major design\nchanges. So we run\n.B scanmem\nas root.\n\nThe first scan can be very slow on large programs, this is not a problem for subsequent \nscans as huge portions of the address space are usually eliminated. This could be improved\nin future, perhaps by assuming all integers are aligned by default. Suggestions welcome.\n\nThe\n.B snapshot\ncommand uses memory inefficiently, and should probably not be used on large programs.\n\nThe option\n.B noptrace\nwhich uses /proc/pid/mem could be replaced by process_vm_readv/process_vm_writev system calls instead.\n.TP\n.br\n.B For more informations to this noptrace option:\n.br\n \n.br\nFor now it runs by reading/writing only to /proc/pid/mem if available without having ptrace attached to the process.\n.br\nThis is useful if you want to have a debugger attached to the targeted process and scanmem behind.\n.br\nYou must have a recent kernel (Linux >= 3.2.2) to run with this option,\n.br\nin order to have permissions to read/write to /proc/pid/mem.\n.br\n \n.br\n.B Here is the details for the linux kernel if you want to know why:\n.RS\n.IP\n\n.br\nFor linux kernel under versions 3.2.2,\n.br\nthere was a check inside for the function(s) mem_read/mem_write,\n.br\ncalled previously check_mem_permission inside fs/proc/base.c,\n.br\nwhich needed ptrace permissions (process being attached to the targeted process).\n.br\nThis has been removed after this version, and supported modifications to /proc/pid/mem directly with root.\n.RE\n\n.SH HOMEPAGE\n\nhttps://github.com/scanmem/scanmem\n\n.SH AUTHORS\n\nTavis Ormandy <taviso(a)sdf.lonestar.org> http://taviso.decsystem.org/\n.br\nEli   Dupree  <elidupree(a)charter.net> \n.br \nWANG  Lu      <coolwanglu(a)gmail.com>\n.br\nSebastian Parschauer <s.parschauer(a)gmx.de>\n.br\nAndrea Stacchiotti <andreastacchiotti(a)gmail.com>\n\nAll bug reports, suggestions or feedback welcome.\n\n.SH SEE ALSO\ngameconqueror(1)\nptrace(2)\nproc(5)\nnethack(6)\npidof(8)\n"
        },
        {
          "name": "scanmem.c",
          "type": "blob",
          "size": 8.93359375,
          "content": "/*\n    Provide interfaces for front-ends.\n\n    Copyright (C) 2006,2007,2009 Tavis Ormandy <taviso@sdf.lonestar.org>\n    Copyright (C) 2009           Eli Dupree <elidupree@charter.net>\n    Copyright (C) 2009-2013      WANG Lu <coolwanglu@gmail.com>\n    Copyright (C) 2016           Sebastian Parschauer <s.parschauer@gmx.de>\n \n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#ifndef _GNU_SOURCE\n#define _GNU_SOURCE\n#endif\n\n#include \"config.h\"\n\n#include <unistd.h>\n#include <stdio.h>\n#include <sys/types.h>\n#include <stdlib.h>\n#include <signal.h>\n#include <stdbool.h>\n\n#include \"scanmem.h\"\n#include \"commands.h\"\n#include \"handlers.h\"\n#include \"show_message.h\"\n\n\nvoid sm_printversion(FILE *outfd)\n{\n    fprintf(outfd, \"libscanmem version %s\\n\", PACKAGE_VERSION);\n}\n\n/* global settings */\nglobals_t sm_globals = {\n    0,                          /* exit flag */\n    0,                          /* pid target */\n    NULL,                       /* matches */\n    0,                          /* match count */\n    0,                          /* scan progress */\n    false,                      /* stop flag */\n    NULL,                       /* regions */\n    NULL,                       /* commands */\n    NULL,                       /* current_cmdline */\n    sm_printversion,            /* printversion() pointer */\n    /* options */\n    {\n        1,                      /* alignment */\n        0,                      /* debug */\n        0,                      /* backend */\n        ANYINTEGER,             /* scan_data_type */\n        REGION_HEAP_STACK_EXECUTABLE_BSS, /* region_detail_level */\n        1,                      /* dump_with_ascii */\n        0,                      /* reverse_endianness */\n        0,                      /* no_ptrace */\n    }\n};\n\n/* signal handler - use async-signal safe functions ONLY! */\nstatic void sighandler(int n)\n{\n    const char err_msg[] = \"error: \\nKilled by signal \";\n    const char msg_end[] = \".\\n\";\n    char num_str[4] = {0};\n    ssize_t num_size;\n    ssize_t wbytes;\n\n    wbytes = write(STDERR_FILENO, err_msg, sizeof(err_msg) - 1);\n    if (wbytes != sizeof(err_msg) - 1)\n        goto out;\n    /* manual int to str conversion */\n    if (n < 10) {\n        num_str[0] = (char) (0x30 + n);\n        num_size = 1;\n    } else if (n >= 100) {\n        goto out;\n    } else {\n        num_str[0] = (char) (0x30 + n / 10);\n        num_str[1] = (char) (0x30 + n % 10);\n        num_size = 2;\n    }\n    wbytes = write(STDERR_FILENO, num_str, num_size);\n    if (wbytes != num_size)\n        goto out;\n    wbytes = write(STDERR_FILENO, msg_end, sizeof(msg_end) - 1);\n    if (wbytes != sizeof(msg_end) - 1)\n        goto out;\nout:\n    _exit(EXIT_FAILURE);   /* also detaches from tracee */\n}\n\n\nbool sm_init(void)\n{\n    globals_t *vars = &sm_globals;\n\n    /* before attaching to target, install signal handler to detach on error */\n    if (vars->options.debug == 0) /* in debug mode, let it crash and see the core dump */\n    {\n        (void) signal(SIGHUP, sighandler);\n        (void) signal(SIGINT, sighandler);\n        (void) signal(SIGSEGV, sighandler);\n        (void) signal(SIGABRT, sighandler);\n        (void) signal(SIGILL, sighandler);\n        (void) signal(SIGFPE, sighandler);\n        (void) signal(SIGTERM, sighandler);\n    }\n\n    /* linked list of commands and function pointers to their handlers */\n    if ((vars->commands = l_init()) == NULL) {\n        show_error(\"sorry, there was a memory allocation error.\\n\");\n        return false;\n    }\n\n    /* NULL shortdoc means don't display this command in `help` listing */\n    sm_registercommand(\"set\", handler__set, vars->commands, SET_SHRTDOC,\n                       SET_LONGDOC, NULL);\n    sm_registercommand(\"list\", handler__list, vars->commands, LIST_SHRTDOC,\n                       LIST_LONGDOC, NULL);\n    sm_registercommand(\"delete\", handler__delete, vars->commands, DELETE_SHRTDOC,\n                       DELETE_LONGDOC, NULL);\n    sm_registercommand(\"reset\", handler__reset, vars->commands, RESET_SHRTDOC,\n                       RESET_LONGDOC, NULL);\n    sm_registercommand(\"pid\", handler__pid, vars->commands, PID_SHRTDOC,\n                       PID_LONGDOC, NULL);\n    sm_registercommand(\"snapshot\", handler__snapshot, vars->commands,\n                       SNAPSHOT_SHRTDOC, SNAPSHOT_LONGDOC, NULL);\n    sm_registercommand(\"dregion\", handler__dregion, vars->commands,\n                       DREGION_SHRTDOC, DREGION_LONGDOC, NULL);\n    sm_registercommand(\"dregions\", handler__dregion, vars->commands,\n                       NULL, DREGION_LONGDOC, NULL);\n    sm_registercommand(\"lregions\", handler__lregions, vars->commands,\n                       LREGIONS_SHRTDOC, LREGIONS_LONGDOC, NULL);\n    sm_registercommand(\"version\", handler__version, vars->commands,\n                       VERSION_SHRTDOC, VERSION_LONGDOC, NULL);\n    sm_registercommand(\"=\", handler__operators, vars->commands, NOTCHANGED_SHRTDOC,\n                       NOTCHANGED_LONGDOC, NULL);\n    sm_registercommand(\"!=\", handler__operators, vars->commands, CHANGED_SHRTDOC,\n                       CHANGED_LONGDOC, NULL);\n    sm_registercommand(\"<\", handler__operators, vars->commands, LESSTHAN_SHRTDOC,\n                       LESSTHAN_LONGDOC, NULL);\n    sm_registercommand(\">\", handler__operators, vars->commands, GREATERTHAN_SHRTDOC,\n                       GREATERTHAN_LONGDOC, NULL);\n    sm_registercommand(\"+\", handler__operators, vars->commands, INCREASED_SHRTDOC,\n                       INCREASED_LONGDOC, NULL);\n    sm_registercommand(\"-\", handler__operators, vars->commands, DECREASED_SHRTDOC,\n                       DECREASED_LONGDOC, NULL);\n    sm_registercommand(\"\\\"\", handler__string, vars->commands, STRING_SHRTDOC,\n                       STRING_LONGDOC, NULL);\n    sm_registercommand(\"update\", handler__update, vars->commands, UPDATE_SHRTDOC,\n                       UPDATE_LONGDOC, NULL);\n    sm_registercommand(\"exit\", handler__exit, vars->commands, EXIT_SHRTDOC,\n                       EXIT_LONGDOC, NULL);\n    sm_registercommand(\"quit\", handler__exit, vars->commands, NULL,\n                       EXIT_LONGDOC, NULL);\n    sm_registercommand(\"q\", handler__exit, vars->commands, NULL,\n                       EXIT_LONGDOC, NULL);\n    sm_registercommand(\"help\", handler__help, vars->commands, HELP_SHRTDOC,\n                       HELP_LONGDOC, HELP_COMPLETE);\n    sm_registercommand(\"shell\", handler__shell, vars->commands, SHELL_SHRTDOC,\n                       SHELL_LONGDOC, NULL);\n    sm_registercommand(\"!\", handler__shell, vars->commands, NULL, SHELL_LONGDOC,\n                       NULL);\n    sm_registercommand(\"watch\", handler__watch, vars->commands, WATCH_SHRTDOC,\n                       WATCH_LONGDOC, NULL);\n    sm_registercommand(\"show\", handler__show, vars->commands, SHOW_SHRTDOC,\n                       SHOW_LONGDOC, SHOW_COMPLETE);\n    sm_registercommand(\"dump\", handler__dump, vars->commands, DUMP_SHRTDOC,\n                       DUMP_LONGDOC, NULL);\n    sm_registercommand(\"write\", handler__write, vars->commands, WRITE_SHRTDOC,\n                       WRITE_LONGDOC, WRITE_COMPLETE);\n    sm_registercommand(\"option\", handler__option, vars->commands, OPTION_SHRTDOC,\n                       OPTION_LONGDOC, OPTION_COMPLETE);\n\n    /* commands beginning with __ have special meaning */\n    sm_registercommand(\"__eof\", handler__eof, vars->commands, NULL, NULL, NULL);\n\n    /* special value NULL means no other matches */\n    sm_registercommand(NULL, handler__default, vars->commands, DEFAULT_SHRTDOC,\n                       DEFAULT_LONGDOC, NULL);\n\n    return true;\n}\n\nvoid sm_cleanup(void)\n{\n    /* free any allocated memory used */\n    l_destroy(sm_globals.regions);\n    if (sm_globals.commands)\n        sm_free_all_completions(sm_globals.commands);\n    l_destroy(sm_globals.commands);\n\n    /* free matches array */\n    if (sm_globals.matches)\n        free(sm_globals.matches);\n\n    /* attempt to detach just in case */\n    sm_detach(sm_globals.target);\n}\n\n/* for front-ends */\nvoid sm_set_backend(void)\n{\n    sm_globals.options.backend = 1;\n}\n\nvoid sm_backend_exec_cmd(const char *commandline)\n{\n    sm_execcommand(&sm_globals, commandline);\n    fflush(stdout);\n    fflush(stderr);\n}\n\nunsigned long sm_get_num_matches(void)\n{\n    return sm_globals.num_matches;\n}\n\nconst char *sm_get_version(void)\n{\n    return PACKAGE_VERSION;\n}\n\ndouble sm_get_scan_progress(void)\n{\n    return sm_globals.scan_progress;\n}\n\nvoid sm_set_stop_flag(bool stop_flag)\n{\n    sm_globals.stop_flag = stop_flag;\n}\n"
        },
        {
          "name": "scanmem.h",
          "type": "blob",
          "size": 3.123046875,
          "content": "/*\n    Provide interfaces for front-ends.\n\n    Copyright (C) 2006,2007,2009 Tavis Ormandy <taviso@sdf.lonestar.org>\n    Copyright (C) 2009           Eli Dupree <elidupree@charter.net>\n    Copyright (C) 2009-2013      WANG Lu <coolwanglu@gmail.com>\n    Copyright (C) 2016           Sebastian Parschauer <s.parschauer@gmx.de>\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#ifndef SCANMEM_H\n#define SCANMEM_H\n\n#include <stdbool.h>\n#include <stdio.h>\n#include <stdint.h>\n#include <sys/types.h>\n\n#include \"scanroutines.h\"\n#include \"list.h\"\n#include \"maps.h\"\n#include \"value.h\"\n#include \"targetmem.h\"\n\n\n/* global settings */\ntypedef struct {\n    unsigned exit:1;\n    pid_t target;\n    matches_and_old_values_array *matches;\n    unsigned long num_matches;\n    double scan_progress;\n    volatile bool stop_flag;\n    list_t *regions;\n    list_t *commands;              /* command handlers */\n    const char *current_cmdline;   /* the command being executed */\n    void (*printversion)(FILE *outfd);\n    struct {\n        unsigned short alignment;\n        unsigned short debug;\n        unsigned short backend;    /* if 1, scanmem will work as a backend and\n                                      output will be more machine-readable */\n\n        /* options that can be changed during runtime */\n        scan_data_type_t scan_data_type;\n        region_scan_level_t region_scan_level;\n        unsigned short dump_with_ascii;\n        unsigned short reverse_endianness;\n        unsigned short no_ptrace;\n    } options;\n} globals_t;\n\n/* global settings */\nextern globals_t sm_globals;\n\nbool sm_init(void);\nvoid sm_cleanup(void);\nvoid sm_printversion(FILE *outfd);\nvoid sm_set_backend(void);\nvoid sm_backend_exec_cmd(const char *commandline);\nunsigned long sm_get_num_matches(void);\nconst char *sm_get_version(void);\ndouble sm_get_scan_progress(void);\nvoid sm_set_stop_flag(bool stop_flag);\n\n/* ptrace.c */\nbool sm_detach(pid_t target);\nbool sm_setaddr(pid_t target, void *addr, const value_t *to);\nbool sm_checkmatches(globals_t *vars, scan_match_type_t match_type,\n                     const uservalue_t *uservalue);\nbool sm_searchregions(globals_t *vars, scan_match_type_t match_type,\n                      const uservalue_t *uservalue);\nbool sm_peekdata(const void *addr, uint16_t length, const mem64_t **result_ptr, size_t *memlength);\nbool sm_attach(pid_t target);\nbool sm_read_array(pid_t target, const void *addr, void *buf, size_t len);\nbool sm_write_array(pid_t target, void *addr, const void *data, size_t len);\n\n#endif /* SCANMEM_H */\n"
        },
        {
          "name": "scanroutines.c",
          "type": "blob",
          "size": 28.146484375,
          "content": "/*\n    Scanning routines for different data types.\n\n    Copyright (C) 2009,2010 WANG Lu  <coolwanglu(a)gmail.com>\n    Copyright (C) 2017 Andrea Stacchiotti  <andreastacchiotti(a)gmail.com>\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#include <assert.h>\n#include <stdbool.h>\n\n#include \"scanroutines.h\"\n#include \"common.h\"\n#include \"endianness.h\"\n#include \"value.h\"\n\n\n/* for convenience */\n#define SCAN_ROUTINE_ARGUMENTS (const mem64_t *memory_ptr, size_t memlength, const value_t *old_value, const uservalue_t *user_value, match_flags *saveflags)\nunsigned int (*sm_scan_routine) SCAN_ROUTINE_ARGUMENTS;\n\n#define MEMORY_COMP(value,field,op)  (((value)->flags & flag_##field) && (get_##field(memory_ptr) op get_##field(value)))\n#define GET_FLAG(valptr, field)      ((valptr)->flags & flag_##field)\n#define SET_FLAG(flagsptr, field)    ((*(flagsptr)) |= flag_##field)\n\n\n/********************/\n/* Integer specific */\n/********************/\n\n/* for MATCHANY */\n#define DEFINE_INTEGER_MATCHANY_ROUTINE(DATAWIDTH) \\\n    extern inline unsigned int scan_routine_INTEGER##DATAWIDTH##_ANY SCAN_ROUTINE_ARGUMENTS \\\n    { \\\n        if (memlength >= (DATAWIDTH)/8) { \\\n            SET_FLAG(saveflags, s##DATAWIDTH##b); \\\n            SET_FLAG(saveflags, u##DATAWIDTH##b); \\\n            return (DATAWIDTH)/8; \\\n        } \\\n        else { \\\n            return 0; \\\n        } \\\n    }\n\nDEFINE_INTEGER_MATCHANY_ROUTINE( 8)\nDEFINE_INTEGER_MATCHANY_ROUTINE(16)\nDEFINE_INTEGER_MATCHANY_ROUTINE(32)\nDEFINE_INTEGER_MATCHANY_ROUTINE(64)\n\n\n#define DEFINE_INTEGER_MATCHUPDATE_ROUTINE(DATAWIDTH) \\\n    extern inline unsigned int scan_routine_INTEGER##DATAWIDTH##_UPDATE SCAN_ROUTINE_ARGUMENTS \\\n    { \\\n        if (memlength < (DATAWIDTH)/8) return 0; \\\n        int ret = 0; \\\n        if (GET_FLAG(old_value, s##DATAWIDTH##b)) { ret = (DATAWIDTH)/8; SET_FLAG(saveflags, s##DATAWIDTH##b); } \\\n        if (GET_FLAG(old_value, u##DATAWIDTH##b)) { ret = (DATAWIDTH)/8; SET_FLAG(saveflags, u##DATAWIDTH##b); } \\\n        return ret; \\\n    }\n\nDEFINE_INTEGER_MATCHUPDATE_ROUTINE( 8)\nDEFINE_INTEGER_MATCHUPDATE_ROUTINE(16)\nDEFINE_INTEGER_MATCHUPDATE_ROUTINE(32)\nDEFINE_INTEGER_MATCHUPDATE_ROUTINE(64)\n\n\n#define DEFINE_INTEGER_ROUTINE(DATAWIDTH, MATCHTYPENAME, MATCHTYPE, VALUE_TO_COMPARE_WITH, REVENDIAN, REVEND_STR) \\\n    extern inline unsigned int scan_routine_INTEGER##DATAWIDTH##_##MATCHTYPENAME##REVEND_STR SCAN_ROUTINE_ARGUMENTS \\\n    { \\\n        if (memlength < (DATAWIDTH)/8) return 0; \\\n        int ret = 0; \\\n        mem64_t val; \\\n        if (REVENDIAN) { \\\n            val.uint##DATAWIDTH##_value = swap_bytes##DATAWIDTH (memory_ptr->uint##DATAWIDTH##_value); \\\n            memory_ptr = &val; \\\n        } \\\n        if (MEMORY_COMP(VALUE_TO_COMPARE_WITH, s##DATAWIDTH##b, MATCHTYPE)) { \\\n            SET_FLAG(saveflags, s##DATAWIDTH##b); \\\n            ret = (DATAWIDTH)/8; \\\n        } \\\n        if (MEMORY_COMP(VALUE_TO_COMPARE_WITH, u##DATAWIDTH##b, MATCHTYPE)) { \\\n            SET_FLAG(saveflags, u##DATAWIDTH##b); \\\n            ret = (DATAWIDTH)/8; \\\n        } \\\n        return ret; \\\n    }\n\n#define DEFINE_INTEGER_ROUTINE_FOR_ALL_INTEGER_TYPES(MATCHTYPENAME, MATCHTYPE, VALUE_TO_COMPARE_WITH) \\\n    DEFINE_INTEGER_ROUTINE( 8, MATCHTYPENAME, MATCHTYPE, VALUE_TO_COMPARE_WITH, 0, ) \\\n    DEFINE_INTEGER_ROUTINE(16, MATCHTYPENAME, MATCHTYPE, VALUE_TO_COMPARE_WITH, 0, ) \\\n    DEFINE_INTEGER_ROUTINE(32, MATCHTYPENAME, MATCHTYPE, VALUE_TO_COMPARE_WITH, 0, ) \\\n    DEFINE_INTEGER_ROUTINE(64, MATCHTYPENAME, MATCHTYPE, VALUE_TO_COMPARE_WITH, 0, )\n\n#define DEFINE_INTEGER_ROUTINE_FOR_ALL_INTEGER_TYPES_AND_ENDIANS(MATCHTYPENAME, MATCHTYPE, VALUE_TO_COMPARE_WITH) \\\n    DEFINE_INTEGER_ROUTINE( 8, MATCHTYPENAME, MATCHTYPE, VALUE_TO_COMPARE_WITH, 0, ) \\\n    DEFINE_INTEGER_ROUTINE(16, MATCHTYPENAME, MATCHTYPE, VALUE_TO_COMPARE_WITH, 0, ) \\\n    DEFINE_INTEGER_ROUTINE(32, MATCHTYPENAME, MATCHTYPE, VALUE_TO_COMPARE_WITH, 0, ) \\\n    DEFINE_INTEGER_ROUTINE(64, MATCHTYPENAME, MATCHTYPE, VALUE_TO_COMPARE_WITH, 0, ) \\\n    DEFINE_INTEGER_ROUTINE(16, MATCHTYPENAME, MATCHTYPE, VALUE_TO_COMPARE_WITH, 1, _REVENDIAN) \\\n    DEFINE_INTEGER_ROUTINE(32, MATCHTYPENAME, MATCHTYPE, VALUE_TO_COMPARE_WITH, 1, _REVENDIAN) \\\n    DEFINE_INTEGER_ROUTINE(64, MATCHTYPENAME, MATCHTYPE, VALUE_TO_COMPARE_WITH, 1, _REVENDIAN)\n\nDEFINE_INTEGER_ROUTINE_FOR_ALL_INTEGER_TYPES_AND_ENDIANS(EQUALTO, ==, user_value)\nDEFINE_INTEGER_ROUTINE_FOR_ALL_INTEGER_TYPES_AND_ENDIANS(NOTEQUALTO, !=, user_value)\nDEFINE_INTEGER_ROUTINE_FOR_ALL_INTEGER_TYPES_AND_ENDIANS(GREATERTHAN, >, user_value)\nDEFINE_INTEGER_ROUTINE_FOR_ALL_INTEGER_TYPES_AND_ENDIANS(LESSTHAN, <, user_value)\nDEFINE_INTEGER_ROUTINE_FOR_ALL_INTEGER_TYPES(NOTCHANGED, ==, old_value)\nDEFINE_INTEGER_ROUTINE_FOR_ALL_INTEGER_TYPES(CHANGED, !=, old_value)\nDEFINE_INTEGER_ROUTINE_FOR_ALL_INTEGER_TYPES(INCREASED, >, old_value)\nDEFINE_INTEGER_ROUTINE_FOR_ALL_INTEGER_TYPES(DECREASED, <, old_value)\n\n/******************/\n/* Float specific */\n/******************/\n\n/* for MATCHANY */\n#define DEFINE_FLOAT_MATCHANY_ROUTINE(DATAWIDTH) \\\n    extern inline unsigned int scan_routine_FLOAT##DATAWIDTH##_ANY SCAN_ROUTINE_ARGUMENTS \\\n    { \\\n        if (memlength >= (DATAWIDTH)/8) { \\\n            SET_FLAG(saveflags, f##DATAWIDTH##b); \\\n            return (DATAWIDTH)/8; \\\n        } \\\n        else { \\\n            return 0; \\\n        } \\\n    }\n\nDEFINE_FLOAT_MATCHANY_ROUTINE(32)\nDEFINE_FLOAT_MATCHANY_ROUTINE(64)\n\n\n#define DEFINE_FLOAT_MATCHUPDATE_ROUTINE(DATAWIDTH) \\\n    extern inline unsigned int scan_routine_FLOAT##DATAWIDTH##_UPDATE SCAN_ROUTINE_ARGUMENTS \\\n    { \\\n        if (memlength < (DATAWIDTH)/8) return 0; \\\n        int ret = 0; \\\n        if (GET_FLAG(old_value, f##DATAWIDTH##b)) { ret = (DATAWIDTH)/8; SET_FLAG(saveflags, f##DATAWIDTH##b); } \\\n        return ret; \\\n    }\n\nDEFINE_FLOAT_MATCHUPDATE_ROUTINE(32)\nDEFINE_FLOAT_MATCHUPDATE_ROUTINE(64)\n\n\n#define DEFINE_FLOAT_ROUTINE(DATAWIDTH, MATCHTYPENAME, MATCHTYPE, VALUE_TO_COMPARE_WITH, REVENDIAN, REVEND_STR) \\\n    extern inline unsigned int scan_routine_FLOAT##DATAWIDTH##_##MATCHTYPENAME##REVEND_STR SCAN_ROUTINE_ARGUMENTS \\\n    { \\\n        if (memlength < (DATAWIDTH)/8) return 0; \\\n        int ret = 0; \\\n        mem64_t val; \\\n        if (REVENDIAN) { \\\n            val.uint##DATAWIDTH##_value = swap_bytes##DATAWIDTH (memory_ptr->uint##DATAWIDTH##_value); \\\n            memory_ptr = &val; \\\n        } \\\n        if (MEMORY_COMP(VALUE_TO_COMPARE_WITH, f##DATAWIDTH##b, MATCHTYPE)) { \\\n            SET_FLAG(saveflags,f##DATAWIDTH##b); \\\n            ret = (DATAWIDTH)/8; \\\n        } \\\n        return ret; \\\n    }\n\n#define DEFINE_FLOAT_ROUTINE_FOR_ALL_FLOAT_TYPES(MATCHTYPENAME, MATCHTYPE, VALUE_TO_COMPARE_WITH, REVENDIAN, REVEND_STR) \\\n    DEFINE_FLOAT_ROUTINE(32, MATCHTYPENAME, MATCHTYPE, VALUE_TO_COMPARE_WITH, REVENDIAN, REVEND_STR) \\\n    DEFINE_FLOAT_ROUTINE(64, MATCHTYPENAME, MATCHTYPE, VALUE_TO_COMPARE_WITH, REVENDIAN, REVEND_STR)\n\n#define DEFINE_FLOAT_ROUTINE_FOR_ALL_FLOAT_TYPES_AND_ENDIANS(MATCHTYPENAME, MATCHTYPE, VALUE_TO_COMPARE_WITH) \\\n    DEFINE_FLOAT_ROUTINE_FOR_ALL_FLOAT_TYPES(MATCHTYPENAME, MATCHTYPE, VALUE_TO_COMPARE_WITH, 0, ) \\\n    DEFINE_FLOAT_ROUTINE_FOR_ALL_FLOAT_TYPES(MATCHTYPENAME, MATCHTYPE, VALUE_TO_COMPARE_WITH, 1, _REVENDIAN)\n\nDEFINE_FLOAT_ROUTINE_FOR_ALL_FLOAT_TYPES_AND_ENDIANS(EQUALTO, ==, user_value)\nDEFINE_FLOAT_ROUTINE_FOR_ALL_FLOAT_TYPES_AND_ENDIANS(NOTEQUALTO, !=, user_value)\nDEFINE_FLOAT_ROUTINE_FOR_ALL_FLOAT_TYPES_AND_ENDIANS(GREATERTHAN, >, user_value)\nDEFINE_FLOAT_ROUTINE_FOR_ALL_FLOAT_TYPES_AND_ENDIANS(LESSTHAN, <, user_value)\nDEFINE_FLOAT_ROUTINE_FOR_ALL_FLOAT_TYPES(NOTCHANGED, ==, old_value, 0, )\nDEFINE_FLOAT_ROUTINE_FOR_ALL_FLOAT_TYPES(CHANGED, !=, old_value, 0, )\nDEFINE_FLOAT_ROUTINE_FOR_ALL_FLOAT_TYPES(INCREASED, >, old_value, 0, )\nDEFINE_FLOAT_ROUTINE_FOR_ALL_FLOAT_TYPES(DECREASED, <, old_value, 0, )\n\n/********************/\n/* Special routines */\n/********************/\n\n/*---------------------------------*/\n/* for INCREASEDBY and DECREASEDBY */\n/*---------------------------------*/\n#define DEFINE_INTEGER_OPERATIONBY_ROUTINE(DATAWIDTH, NAME, OP) \\\n    extern inline unsigned int scan_routine_INTEGER##DATAWIDTH##_##NAME SCAN_ROUTINE_ARGUMENTS \\\n    { \\\n        if (memlength < (DATAWIDTH)/8) return 0; \\\n        int ret = 0; \\\n        if ((GET_FLAG(old_value, s##DATAWIDTH##b)) && (GET_FLAG(user_value, s##DATAWIDTH##b)) && \\\n            (get_s##DATAWIDTH##b(memory_ptr) == get_s##DATAWIDTH##b(old_value) OP get_s##DATAWIDTH##b(user_value))) \\\n            { ret = (DATAWIDTH)/8; SET_FLAG(saveflags, s##DATAWIDTH##b); } \\\n        if ((GET_FLAG(old_value, u##DATAWIDTH##b)) && (GET_FLAG(user_value, u##DATAWIDTH##b)) && \\\n            (get_u##DATAWIDTH##b(memory_ptr) == get_u##DATAWIDTH##b(old_value) OP get_u##DATAWIDTH##b(user_value))) \\\n            { ret = (DATAWIDTH)/8; SET_FLAG(saveflags, u##DATAWIDTH##b); } \\\n        return ret; \\\n    }\n\n#define DEFINE_INTEGER_INCREASEDBY_DECREASEDBY_ROUTINE(DATAWIDTH) \\\n    DEFINE_INTEGER_OPERATIONBY_ROUTINE(DATAWIDTH, INCREASEDBY, +) \\\n    DEFINE_INTEGER_OPERATIONBY_ROUTINE(DATAWIDTH, DECREASEDBY, -)\n\nDEFINE_INTEGER_INCREASEDBY_DECREASEDBY_ROUTINE( 8)\nDEFINE_INTEGER_INCREASEDBY_DECREASEDBY_ROUTINE(16)\nDEFINE_INTEGER_INCREASEDBY_DECREASEDBY_ROUTINE(32)\nDEFINE_INTEGER_INCREASEDBY_DECREASEDBY_ROUTINE(64)\n\n#define DEFINE_FLOAT_OPERATIONBY_ROUTINE(DATAWIDTH, NAME, OP) \\\n    extern inline unsigned int scan_routine_FLOAT##DATAWIDTH##_##NAME SCAN_ROUTINE_ARGUMENTS \\\n    { \\\n        if (memlength < (DATAWIDTH)/8) return 0; \\\n        int ret = 0; \\\n        if ((GET_FLAG(old_value, f##DATAWIDTH##b)) && (GET_FLAG(user_value, f##DATAWIDTH##b)) && \\\n            (get_f##DATAWIDTH##b(memory_ptr) == get_f##DATAWIDTH##b(old_value) OP get_f##DATAWIDTH##b(user_value))) \\\n            { ret = (DATAWIDTH)/8; SET_FLAG(saveflags, f##DATAWIDTH##b); } \\\n        return ret; \\\n    }\n\n#define DEFINE_FLOAT_INCREASEDBY_DECREASEDBY_ROUTINE(DATAWIDTH) \\\n    DEFINE_FLOAT_OPERATIONBY_ROUTINE(DATAWIDTH, INCREASEDBY, +) \\\n    DEFINE_FLOAT_OPERATIONBY_ROUTINE(DATAWIDTH, DECREASEDBY, -)\n\nDEFINE_FLOAT_INCREASEDBY_DECREASEDBY_ROUTINE(32)\nDEFINE_FLOAT_INCREASEDBY_DECREASEDBY_ROUTINE(64)\n\n/*-----------*/\n/* for RANGE */\n/*-----------*/\n\n#define DEFINE_INTEGER_RANGE_ROUTINE(DATAWIDTH, REVENDIAN, REVEND_STR) \\\n    extern inline unsigned int scan_routine_INTEGER##DATAWIDTH##_RANGE##REVEND_STR SCAN_ROUTINE_ARGUMENTS \\\n    { \\\n        int ret = 0; \\\n        mem64_t val; \\\n        if (REVENDIAN) { \\\n            val.uint##DATAWIDTH##_value = swap_bytes##DATAWIDTH (memory_ptr->uint##DATAWIDTH##_value); \\\n            memory_ptr = &val; \\\n        } \\\n        if ((memlength >= (DATAWIDTH)/8) \\\n                && (user_value[0].flags & flag_s##DATAWIDTH##b) \\\n                && (get_s##DATAWIDTH##b(memory_ptr) >= get_s##DATAWIDTH##b(&user_value[0])) \\\n                && (get_s##DATAWIDTH##b(memory_ptr) <= get_s##DATAWIDTH##b(&user_value[1]))) \\\n            { ret = (DATAWIDTH)/8; SET_FLAG(saveflags, s##DATAWIDTH##b); } \\\n        if ((memlength >= (DATAWIDTH)/8) \\\n                && (user_value[0].flags & flag_u##DATAWIDTH##b) \\\n                && (get_u##DATAWIDTH##b(memory_ptr) >= get_u##DATAWIDTH##b(&user_value[0])) \\\n                && (get_u##DATAWIDTH##b(memory_ptr) <= get_u##DATAWIDTH##b(&user_value[1]))) \\\n            { ret = (DATAWIDTH)/8; SET_FLAG(saveflags, u##DATAWIDTH##b); } \\\n        return ret; \\\n    }\n\nDEFINE_INTEGER_RANGE_ROUTINE( 8, 0, )\nDEFINE_INTEGER_RANGE_ROUTINE(16, 0, )\nDEFINE_INTEGER_RANGE_ROUTINE(16, 1, _REVENDIAN)\nDEFINE_INTEGER_RANGE_ROUTINE(32, 0, )\nDEFINE_INTEGER_RANGE_ROUTINE(32, 1, _REVENDIAN)\nDEFINE_INTEGER_RANGE_ROUTINE(64, 0, )\nDEFINE_INTEGER_RANGE_ROUTINE(64, 1, _REVENDIAN)\n\n#define DEFINE_FLOAT_RANGE_ROUTINE(DATAWIDTH, REVENDIAN, REVEND_STR) \\\n    extern inline unsigned int scan_routine_FLOAT##DATAWIDTH##_RANGE##REVEND_STR SCAN_ROUTINE_ARGUMENTS \\\n    { \\\n        int ret = 0; \\\n        mem64_t val; \\\n        if (REVENDIAN) { \\\n            val.uint##DATAWIDTH##_value = swap_bytes##DATAWIDTH (memory_ptr->uint##DATAWIDTH##_value); \\\n            memory_ptr = &val; \\\n        } \\\n        if ((memlength >= (DATAWIDTH)/8) \\\n                && (user_value[0].flags & flag_f##DATAWIDTH##b) \\\n                && (get_f##DATAWIDTH##b(memory_ptr) >= get_f##DATAWIDTH##b(&user_value[0])) \\\n                && (get_f##DATAWIDTH##b(memory_ptr) <= get_f##DATAWIDTH##b(&user_value[1]))) \\\n            { ret = (DATAWIDTH)/8; SET_FLAG(saveflags, f##DATAWIDTH##b); } \\\n        return ret; \\\n    }\n\nDEFINE_FLOAT_RANGE_ROUTINE(32, 0, )\nDEFINE_FLOAT_RANGE_ROUTINE(32, 1, _REVENDIAN)\nDEFINE_FLOAT_RANGE_ROUTINE(64, 0, )\nDEFINE_FLOAT_RANGE_ROUTINE(64, 1, _REVENDIAN)\n\n\n/*------------------------*/\n/* Any-xxx types specific */\n/*------------------------*/\n/* this is for anynumber, anyinteger, anyfloat */\n#define DEFINE_ANYTYPE_ROUTINE(MATCHTYPENAME, REVEND_STR) \\\n    extern inline unsigned int scan_routine_ANYINTEGER_##MATCHTYPENAME##REVEND_STR SCAN_ROUTINE_ARGUMENTS \\\n    { \\\n        int ret = scan_routine_INTEGER8_##MATCHTYPENAME (memory_ptr, memlength, old_value, user_value, saveflags); \\\n        int tmp_ret; \\\n        if ((tmp_ret = scan_routine_INTEGER16_##MATCHTYPENAME##REVEND_STR (memory_ptr, memlength, old_value, user_value, saveflags)) > ret) { ret = tmp_ret; } \\\n        if ((tmp_ret = scan_routine_INTEGER32_##MATCHTYPENAME##REVEND_STR (memory_ptr, memlength, old_value, user_value, saveflags)) > ret) { ret = tmp_ret; } \\\n        if ((tmp_ret = scan_routine_INTEGER64_##MATCHTYPENAME##REVEND_STR (memory_ptr, memlength, old_value, user_value, saveflags)) > ret) { ret = tmp_ret; } \\\n        return ret; \\\n    } \\\n    extern inline unsigned int scan_routine_ANYFLOAT_##MATCHTYPENAME##REVEND_STR SCAN_ROUTINE_ARGUMENTS \\\n    { \\\n        int ret = scan_routine_FLOAT32_##MATCHTYPENAME##REVEND_STR (memory_ptr, memlength, old_value, user_value, saveflags); \\\n        int tmp_ret; \\\n        if ((tmp_ret = scan_routine_FLOAT64_##MATCHTYPENAME##REVEND_STR (memory_ptr, memlength, old_value, user_value, saveflags)) > ret) { ret = tmp_ret; } \\\n        return ret; \\\n    } \\\n    extern inline unsigned int scan_routine_ANYNUMBER_##MATCHTYPENAME##REVEND_STR SCAN_ROUTINE_ARGUMENTS \\\n    { \\\n        int ret1 = scan_routine_ANYINTEGER_##MATCHTYPENAME##REVEND_STR (memory_ptr, memlength, old_value, user_value, saveflags); \\\n        int ret2 = scan_routine_ANYFLOAT_##MATCHTYPENAME##REVEND_STR (memory_ptr, memlength, old_value, user_value, saveflags); \\\n        return (ret1 > ret2 ? ret1 : ret2); \\\n    } \\\n\nDEFINE_ANYTYPE_ROUTINE(ANY, )\nDEFINE_ANYTYPE_ROUTINE(UPDATE, )\n\nDEFINE_ANYTYPE_ROUTINE(EQUALTO, )\nDEFINE_ANYTYPE_ROUTINE(NOTEQUALTO, )\nDEFINE_ANYTYPE_ROUTINE(CHANGED, )\nDEFINE_ANYTYPE_ROUTINE(NOTCHANGED, )\nDEFINE_ANYTYPE_ROUTINE(INCREASED, )\nDEFINE_ANYTYPE_ROUTINE(DECREASED, )\nDEFINE_ANYTYPE_ROUTINE(GREATERTHAN, )\nDEFINE_ANYTYPE_ROUTINE(LESSTHAN, )\nDEFINE_ANYTYPE_ROUTINE(INCREASEDBY, )\nDEFINE_ANYTYPE_ROUTINE(DECREASEDBY, )\nDEFINE_ANYTYPE_ROUTINE(RANGE, )\n\nDEFINE_ANYTYPE_ROUTINE(EQUALTO, _REVENDIAN)\nDEFINE_ANYTYPE_ROUTINE(NOTEQUALTO, _REVENDIAN)\nDEFINE_ANYTYPE_ROUTINE(GREATERTHAN, _REVENDIAN)\nDEFINE_ANYTYPE_ROUTINE(LESSTHAN, _REVENDIAN)\nDEFINE_ANYTYPE_ROUTINE(RANGE, _REVENDIAN)\n\n/*----------------------------------------*/\n/* for generic VLT (Variable Length Type) */\n/*----------------------------------------*/\n\nextern inline unsigned int scan_routine_VLT_ANY SCAN_ROUTINE_ARGUMENTS\n{\n   return *saveflags = MIN(memlength, (uint16_t)(-1));\n}\n\nextern inline unsigned int scan_routine_VLT_UPDATE SCAN_ROUTINE_ARGUMENTS\n{\n    /* memlength here is already MIN(memlength, old_value->flags.length) */\n   return *saveflags = memlength;\n}\n\n/*---------------*/\n/* for BYTEARRAY */\n/*---------------*/\n\n/* Used only for length>8 */\nextern inline unsigned int scan_routine_BYTEARRAY_EQUALTO SCAN_ROUTINE_ARGUMENTS\n{\n    const uint8_t *bytes_array = user_value->bytearray_value;\n    const wildcard_t *wildcards_array = user_value->wildcard_value;\n    unsigned int length = user_value->flags;\n    if (memlength < length ||\n        *((uint64_t*)bytes_array) != (memory_ptr->uint64_value & *((uint64_t*)wildcards_array)))\n    {\n        /* not matched */\n        return 0;\n    }\n\n    unsigned int i, j;\n    for(i = sizeof(uint64_t); i + sizeof(uint64_t) <= length; i += sizeof(uint64_t))\n    {\n        if (*((uint64_t*)(bytes_array+i)) != (((mem64_t*)(memory_ptr->bytes+i))->uint64_value & *((uint64_t*)(wildcards_array+i))))\n        {\n            /* not matched */\n            return 0;\n        }\n\n    }\n\n    /* match bytes left */\n    if (i < length)\n    {\n        for(j = 0; j < length - i; ++j)\n        {\n            if ((bytes_array+i)[j] != (((mem64_t*)(memory_ptr->bytes+i))->bytes[j] & (wildcards_array+i)[j]))\n            {\n                /* not matched */\n                return 0;\n            }\n        }\n    }\n\n    /* matched */\n    *saveflags = length;\n\n    return length;\n}\n\n/* optimized routines for small lengths\n   careful: WIDTH = 8*LENGTH */\n\n#define DEFINE_BYTEARRAY_POW2_EQUALTO_ROUTINE(WIDTH) \\\n    extern inline unsigned int scan_routine_BYTEARRAY##WIDTH##_EQUALTO SCAN_ROUTINE_ARGUMENTS \\\n    { \\\n        if (memlength >= (WIDTH)/8 && \\\n            ((get_u##WIDTH##b(memory_ptr) & *(uint##WIDTH##_t*)user_value->wildcard_value) \\\n              == *(uint##WIDTH##_t*)(user_value->bytearray_value))) \\\n        { \\\n            /* matched */ \\\n            *saveflags = (WIDTH)/8; \\\n            return (WIDTH)/8; \\\n        } \\\n        else \\\n        { \\\n            /* not matched */ \\\n            return 0; \\\n        } \\\n    }\n\nDEFINE_BYTEARRAY_POW2_EQUALTO_ROUTINE(8)\nDEFINE_BYTEARRAY_POW2_EQUALTO_ROUTINE(16)\nDEFINE_BYTEARRAY_POW2_EQUALTO_ROUTINE(32)\nDEFINE_BYTEARRAY_POW2_EQUALTO_ROUTINE(64)\n\n#define DEFINE_BYTEARRAY_SMALLOOP_EQUALTO_ROUTINE(WIDTH) \\\n    extern inline unsigned int scan_routine_BYTEARRAY##WIDTH##_EQUALTO SCAN_ROUTINE_ARGUMENTS \\\n    { \\\n        if (memlength < (WIDTH)/8) \\\n        { \\\n            /* new_value is not actually a valid bytearray */ \\\n            return 0; \\\n        } \\\n        const uint8_t *bytes_array = user_value->bytearray_value; \\\n        const wildcard_t *wildcards_array = user_value->wildcard_value; \\\n        int i; \\\n        for(i = 0; i < (WIDTH)/8; ++i) \\\n        { \\\n            if(bytes_array[i] != (memory_ptr->bytes[i] & wildcards_array[i])) \\\n            { \\\n                /* not matched */ \\\n                return 0; \\\n            } \\\n        } \\\n        /* matched */ \\\n        *saveflags = (WIDTH)/8; \\\n        return (WIDTH)/8; \\\n    }\n\nDEFINE_BYTEARRAY_SMALLOOP_EQUALTO_ROUTINE(24)\nDEFINE_BYTEARRAY_SMALLOOP_EQUALTO_ROUTINE(40)\nDEFINE_BYTEARRAY_SMALLOOP_EQUALTO_ROUTINE(48)\nDEFINE_BYTEARRAY_SMALLOOP_EQUALTO_ROUTINE(56)\n\n/*------------*/\n/* for STRING */\n/*------------*/\n\n/* Used only for length>8 */\nextern inline unsigned int scan_routine_STRING_EQUALTO SCAN_ROUTINE_ARGUMENTS\n{\n    const char *scan_string = user_value->string_value;\n    unsigned int length = user_value->flags;\n    if(memlength < length ||\n       memory_ptr->int64_value != *((int64_t*)scan_string))\n    {\n        /* not matched */\n        return 0;\n    }\n\n    unsigned int i, j;\n    for(i = sizeof(int64_t); i + sizeof(int64_t) <= length; i += sizeof(int64_t))\n    {\n        if(((mem64_t*)(memory_ptr->chars+i))->int64_value != *((int64_t*)(scan_string+i)))\n        {\n            /* not matched */\n            return 0;\n        }\n    }\n\n    /* match bytes left */\n    if (i < length)\n    {\n        for(j = 0; j < length - i; ++j)\n        {\n            if(((mem64_t*)(memory_ptr->chars+i))->chars[j] != (scan_string+i)[j])\n            {\n                /* not matched */\n                return 0;\n            }\n        }\n    }\n    \n    /* matched */\n    *saveflags = length;\n\n    return length;\n}\n\n/* optimized routines for small strings\n   careful: WIDTH = 8*LENGTH */\n\n#define DEFINE_STRING_POW2_EQUALTO_ROUTINE(WIDTH) \\\n    extern inline unsigned int scan_routine_STRING##WIDTH##_EQUALTO SCAN_ROUTINE_ARGUMENTS \\\n    { \\\n        if (memlength >= (WIDTH)/8 && \\\n            (get_s##WIDTH##b(memory_ptr) == *(int##WIDTH##_t*)(user_value->string_value))) \\\n        { \\\n            /* matched */ \\\n            *saveflags = (WIDTH)/8; \\\n            return (WIDTH)/8; \\\n        } \\\n        else \\\n        { \\\n            /* not matched */ \\\n            return 0; \\\n        } \\\n    }\n\nDEFINE_STRING_POW2_EQUALTO_ROUTINE(8)\nDEFINE_STRING_POW2_EQUALTO_ROUTINE(16)\nDEFINE_STRING_POW2_EQUALTO_ROUTINE(32)\nDEFINE_STRING_POW2_EQUALTO_ROUTINE(64)\n\n#define DEFINE_STRING_SMALLOOP_EQUALTO_ROUTINE(WIDTH) \\\n    extern inline unsigned int scan_routine_STRING##WIDTH##_EQUALTO SCAN_ROUTINE_ARGUMENTS \\\n    { \\\n        if (memlength < (WIDTH)/8) \\\n        { \\\n            /* new_value is not actually a valid string */ \\\n            return 0; \\\n        } \\\n        const char *scan_string = user_value->string_value; \\\n        int i; \\\n        for(i = 0; i < (WIDTH)/8; ++i) \\\n        { \\\n            if(memory_ptr->chars[i] != scan_string[i]) \\\n            { \\\n                /* not matched */ \\\n                return 0; \\\n            } \\\n        } \\\n        /* matched */ \\\n        *saveflags = (WIDTH)/8; \\\n        return (WIDTH)/8; \\\n    }\n\nDEFINE_STRING_SMALLOOP_EQUALTO_ROUTINE(24)\nDEFINE_STRING_SMALLOOP_EQUALTO_ROUTINE(40)\nDEFINE_STRING_SMALLOOP_EQUALTO_ROUTINE(48)\nDEFINE_STRING_SMALLOOP_EQUALTO_ROUTINE(56)\n\n\n/***************************************************************/\n/* choose a routine according to scan_data_type and match_type */\n/***************************************************************/\n\n\n#define CHOOSE_ROUTINE(SCANDATATYPE, ROUTINEDATATYPENAME, SCANMATCHTYPE, ROUTINEMATCHTYPENAME) \\\n    if ((dt == SCANDATATYPE) && (mt == SCANMATCHTYPE)) \\\n    { \\\n        return &scan_routine_##ROUTINEDATATYPENAME##_##ROUTINEMATCHTYPENAME; \\\n    }\n\n#define CHOOSE_ROUTINE_FOR_BOTH_ENDIANS(SCANDATATYPE, ROUTINEDATATYPENAME, SCANMATCHTYPE, ROUTINEMATCHTYPENAME) \\\n    if ((dt == SCANDATATYPE) && (mt == SCANMATCHTYPE)) { \\\n        if (reverse_endianness) { \\\n            return &scan_routine_##ROUTINEDATATYPENAME##_##ROUTINEMATCHTYPENAME##_REVENDIAN; \\\n        } \\\n        else { \\\n            return &scan_routine_##ROUTINEDATATYPENAME##_##ROUTINEMATCHTYPENAME; \\\n        } \\\n    }\n\n#define CHOOSE_ROUTINE_FOR_ALL_NUMBER_TYPES(SCANMATCHTYPE, ROUTINEMATCHTYPENAME) \\\n    CHOOSE_ROUTINE(INTEGER8,   INTEGER8,   SCANMATCHTYPE, ROUTINEMATCHTYPENAME) \\\n    CHOOSE_ROUTINE(INTEGER16,  INTEGER16,  SCANMATCHTYPE, ROUTINEMATCHTYPENAME) \\\n    CHOOSE_ROUTINE(INTEGER32,  INTEGER32,  SCANMATCHTYPE, ROUTINEMATCHTYPENAME) \\\n    CHOOSE_ROUTINE(INTEGER64,  INTEGER64,  SCANMATCHTYPE, ROUTINEMATCHTYPENAME) \\\n    CHOOSE_ROUTINE(FLOAT32,    FLOAT32,    SCANMATCHTYPE, ROUTINEMATCHTYPENAME) \\\n    CHOOSE_ROUTINE(FLOAT64,    FLOAT64,    SCANMATCHTYPE, ROUTINEMATCHTYPENAME) \\\n    CHOOSE_ROUTINE(ANYINTEGER, ANYINTEGER, SCANMATCHTYPE, ROUTINEMATCHTYPENAME) \\\n    CHOOSE_ROUTINE(ANYFLOAT,   ANYFLOAT,   SCANMATCHTYPE, ROUTINEMATCHTYPENAME) \\\n    CHOOSE_ROUTINE(ANYNUMBER,  ANYNUMBER,  SCANMATCHTYPE, ROUTINEMATCHTYPENAME)\n\n#define CHOOSE_ROUTINE_FOR_ALL_NUMBER_TYPES_AND_ENDIANS(SCANMATCHTYPE, ROUTINEMATCHTYPENAME) \\\n    CHOOSE_ROUTINE(INTEGER8, INTEGER8, SCANMATCHTYPE, ROUTINEMATCHTYPENAME) \\\n    CHOOSE_ROUTINE_FOR_BOTH_ENDIANS(INTEGER16,  INTEGER16,  SCANMATCHTYPE, ROUTINEMATCHTYPENAME) \\\n    CHOOSE_ROUTINE_FOR_BOTH_ENDIANS(INTEGER32,  INTEGER32,  SCANMATCHTYPE, ROUTINEMATCHTYPENAME) \\\n    CHOOSE_ROUTINE_FOR_BOTH_ENDIANS(INTEGER64,  INTEGER64,  SCANMATCHTYPE, ROUTINEMATCHTYPENAME) \\\n    CHOOSE_ROUTINE_FOR_BOTH_ENDIANS(FLOAT32,    FLOAT32,    SCANMATCHTYPE, ROUTINEMATCHTYPENAME) \\\n    CHOOSE_ROUTINE_FOR_BOTH_ENDIANS(FLOAT64,    FLOAT64,    SCANMATCHTYPE, ROUTINEMATCHTYPENAME) \\\n    CHOOSE_ROUTINE_FOR_BOTH_ENDIANS(ANYINTEGER, ANYINTEGER, SCANMATCHTYPE, ROUTINEMATCHTYPENAME) \\\n    CHOOSE_ROUTINE_FOR_BOTH_ENDIANS(ANYFLOAT,   ANYFLOAT,   SCANMATCHTYPE, ROUTINEMATCHTYPENAME) \\\n    CHOOSE_ROUTINE_FOR_BOTH_ENDIANS(ANYNUMBER,  ANYNUMBER,  SCANMATCHTYPE, ROUTINEMATCHTYPENAME)\n\n#define SELECTION_CASE(ROUTINEDATATYPENAME, WIDTH, ROUTINEMATCHTYPENAME) \\\n    case (WIDTH): \\\n        return &scan_routine_##ROUTINEDATATYPENAME##WIDTH##_##ROUTINEMATCHTYPENAME; \\\n        break; \\\n\n#define CHOOSE_ROUTINE_VLT(SCANDATATYPE, ROUTINEDATATYPENAME, SCANMATCHTYPE, ROUTINEMATCHTYPENAME, WIDTH) \\\n    if ((dt == SCANDATATYPE) && (mt == SCANMATCHTYPE)) \\\n    { \\\n        switch (WIDTH) \\\n        { \\\n            case 0: \\\n                assert(false); \\\n                break; \\\n            SELECTION_CASE(ROUTINEDATATYPENAME,  8, ROUTINEMATCHTYPENAME) \\\n            SELECTION_CASE(ROUTINEDATATYPENAME, 16, ROUTINEMATCHTYPENAME) \\\n            SELECTION_CASE(ROUTINEDATATYPENAME, 24, ROUTINEMATCHTYPENAME) \\\n            SELECTION_CASE(ROUTINEDATATYPENAME, 32, ROUTINEMATCHTYPENAME) \\\n            SELECTION_CASE(ROUTINEDATATYPENAME, 40, ROUTINEMATCHTYPENAME) \\\n            SELECTION_CASE(ROUTINEDATATYPENAME, 48, ROUTINEMATCHTYPENAME) \\\n            SELECTION_CASE(ROUTINEDATATYPENAME, 56, ROUTINEMATCHTYPENAME) \\\n            SELECTION_CASE(ROUTINEDATATYPENAME, 64, ROUTINEMATCHTYPENAME) \\\n            default: \\\n                return &scan_routine_##ROUTINEDATATYPENAME##_##ROUTINEMATCHTYPENAME; \\\n                break; \\\n        } \\\n    }\n\n\nscan_routine_t sm_get_scanroutine(scan_data_type_t dt, scan_match_type_t mt, match_flags uflags, bool reverse_endianness)\n{\n    CHOOSE_ROUTINE_FOR_ALL_NUMBER_TYPES(MATCHANY, ANY)\n    CHOOSE_ROUTINE_FOR_ALL_NUMBER_TYPES(MATCHUPDATE, UPDATE)\n    CHOOSE_ROUTINE_FOR_ALL_NUMBER_TYPES_AND_ENDIANS(MATCHEQUALTO, EQUALTO)\n    CHOOSE_ROUTINE_FOR_ALL_NUMBER_TYPES_AND_ENDIANS(MATCHNOTEQUALTO, NOTEQUALTO)\n    CHOOSE_ROUTINE_FOR_ALL_NUMBER_TYPES_AND_ENDIANS(MATCHGREATERTHAN, GREATERTHAN)\n    CHOOSE_ROUTINE_FOR_ALL_NUMBER_TYPES_AND_ENDIANS(MATCHLESSTHAN, LESSTHAN)\n    CHOOSE_ROUTINE_FOR_ALL_NUMBER_TYPES(MATCHCHANGED, CHANGED)\n    CHOOSE_ROUTINE_FOR_ALL_NUMBER_TYPES(MATCHNOTCHANGED, NOTCHANGED)\n    CHOOSE_ROUTINE_FOR_ALL_NUMBER_TYPES(MATCHINCREASED, INCREASED)\n    CHOOSE_ROUTINE_FOR_ALL_NUMBER_TYPES(MATCHDECREASED, DECREASED)\n    CHOOSE_ROUTINE_FOR_ALL_NUMBER_TYPES(MATCHINCREASEDBY, INCREASEDBY)\n    CHOOSE_ROUTINE_FOR_ALL_NUMBER_TYPES(MATCHDECREASEDBY, DECREASEDBY)\n    CHOOSE_ROUTINE_FOR_ALL_NUMBER_TYPES_AND_ENDIANS(MATCHRANGE, RANGE)\n\n    CHOOSE_ROUTINE(BYTEARRAY, VLT, MATCHANY, ANY)\n    CHOOSE_ROUTINE(BYTEARRAY, VLT, MATCHUPDATE, UPDATE)\n    CHOOSE_ROUTINE_VLT(BYTEARRAY, BYTEARRAY, MATCHEQUALTO, EQUALTO, uflags*8)\n\n    CHOOSE_ROUTINE(STRING, VLT, MATCHANY, ANY)\n    CHOOSE_ROUTINE(STRING, VLT, MATCHUPDATE, UPDATE)\n    CHOOSE_ROUTINE_VLT(STRING, STRING, MATCHEQUALTO, EQUALTO, uflags*8)\n\n    return NULL;\n}\n\n/* Possible flags per scan data type: if an incoming uservalue has none of the\n * listed flags we're sure it's not going to be matched by the scan,\n * so we reject it without even trying */\nstatic match_flags possible_flags_for_scan_data_type[] = {\n    [ANYNUMBER]  = flags_all,\n    [ANYINTEGER] = flags_integer,\n    [ANYFLOAT]   = flags_float,\n    [INTEGER8]   = flags_i8b,\n    [INTEGER16]  = flags_i16b,\n    [INTEGER32]  = flags_i32b,\n    [INTEGER64]  = flags_i64b,\n    [FLOAT32]    = flag_f32b,\n    [FLOAT64]    = flag_f64b,\n    [BYTEARRAY]  = flags_max,\n    [STRING]     = flags_max\n};\n\nbool sm_choose_scanroutine(scan_data_type_t dt, scan_match_type_t mt, const uservalue_t* uval, bool reverse_endianness)\n{\n    match_flags uflags = uval ? uval->flags : flags_empty;\n\n    /* Check scans that need an uservalue */\n    if (mt == MATCHEQUALTO     ||\n        mt == MATCHNOTEQUALTO  ||\n        mt == MATCHGREATERTHAN ||\n        mt == MATCHLESSTHAN    ||\n        mt == MATCHRANGE       ||\n        mt == MATCHINCREASEDBY ||\n        mt == MATCHDECREASEDBY)\n    {\n        match_flags possible_flags = possible_flags_for_scan_data_type[dt];\n        if ((possible_flags & uflags) == flags_empty) {\n            /* There's no possibility to have a match, just abort */\n            sm_scan_routine = NULL;\n            return false;\n        }\n    }\n\n    sm_scan_routine = sm_get_scanroutine(dt, mt, uflags, reverse_endianness);\n    return (sm_scan_routine != NULL);\n}\n"
        },
        {
          "name": "scanroutines.h",
          "type": "blob",
          "size": 2.779296875,
          "content": "/*\n    Definition of routines of scanning for different data types.\n\n    Copyright (C) 2009,2010 WANG Lu  <coolwanglu(a)gmail.com>\n    Copyright (C) 2015      Vyacheslav Shegai <v.shegai(a)netris.ru>\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#ifndef SCANROUTINES_H\n#define SCANROUTINES_H\n\n#include <stdbool.h>\n\n#include \"value.h\"\n\ntypedef enum {\n    ANYNUMBER,              /* ANYINTEGER or ANYFLOAT */\n    ANYINTEGER,             /* INTEGER of whatever width */\n    ANYFLOAT,               /* FLOAT of whatever width */\n    INTEGER8,\n    INTEGER16,\n    INTEGER32,\n    INTEGER64,\n    FLOAT32,\n    FLOAT64,\n    BYTEARRAY,\n    STRING\n} scan_data_type_t;\n\ntypedef enum {\n    MATCHANY,                /* for snapshot */\n    /* following: compare with a given value */\n    MATCHEQUALTO,\n    MATCHNOTEQUALTO,\n    MATCHGREATERTHAN,\n    MATCHLESSTHAN,\n    MATCHRANGE,\n    /* following: compare with the old value */\n    MATCHUPDATE,\n    MATCHNOTCHANGED,\n    MATCHCHANGED,\n    MATCHINCREASED,\n    MATCHDECREASED,\n    /* following: compare with both given value and old value */\n    MATCHINCREASEDBY,\n    MATCHDECREASEDBY\n} scan_match_type_t;\n\n\n/* Matches a memory area given by `memory_ptr` and `memlength` against `user_value` or `old_value`\n * (or both, depending on the matching type), stores the result into saveflags.\n * NOTE: saveflags must be set to 0, since only useful bits are set, but extra bits are not cleared!\n * Returns the number of bytes needed to store said match, 0 for not matched\n */\ntypedef unsigned int (*scan_routine_t)(const mem64_t *memory_ptr, size_t memlength,\n                                       const value_t *old_value, const uservalue_t *user_value, match_flags *saveflags);\nextern scan_routine_t sm_scan_routine;\n\n/* \n * Choose the global scanroutine according to the given parameters, sm_scan_routine will be set.\n * Returns whether a proper routine has been found.\n */\nbool sm_choose_scanroutine(scan_data_type_t dt, scan_match_type_t mt, const uservalue_t* uval, bool reverse_endianness);\n\nscan_routine_t sm_get_scanroutine(scan_data_type_t dt, scan_match_type_t mt, match_flags uflags, bool reverse_endianness);\n\n#endif /* SCANROUTINES_H */\n"
        },
        {
          "name": "sets.c",
          "type": "blob",
          "size": 10.52734375,
          "content": "/*\n    Create sets.\n\n    Copyright (C) 2016-2017 Bijan Kazemi <bkazemi@users.sf.net>\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n#include <sys/types.h>\n#include <ctype.h>\n#include <assert.h>\n#include <errno.h>\n\n#include \"show_message.h\"\n#include \"sets.h\"\n\n#define DEFAULT_UINTLS_SZ (64)\n\n/*\n * -= The Set Data-Type =-\n *\n * A 'set' is a type similar in vein to the mathematical definition of a set.\n * See: https://foldoc.org/set\n *\n * Sets support ranges. See the `delete` longdoc for more information.\n *\n * Restrictions of our set data-type:\n * - No infinite sets.\n * - No empty sets.\n * - No duplicate elements.\n * - All the elements must be of the same type.\n */\n\n/*\n * Used with `qsort()`.\n *\n * This function uses the less elegant branching solution\n * to deal with possible overflow.\n */\nstatic int _size_t_cmp(const void *_i1, const void *_i2)\n{\n    const size_t i1 = *(const size_t *)_i1, i2 = *(const size_t *)_i2;\n\n    if      (i1 <  i2) return -1;\n    else if (i1 == i2) return  0;\n    else               return  1;\n}\n\n/*\n * Function used to grow the set array.\n *\n * We must use a separate pointer with realloc(), in case it fails. When that\n * happens and we re-assign valarr, valarr is _not_ free()'d by realloc(), and\n * valarr is then assigned to NULL, leaving the original valarr address lost.\n */\nstatic inline bool inc_arr_sz(size_t **valarr, size_t *arr_maxsz, size_t maxsz)\n{\n    size_t *valarr_tmpptr;\n\n    if (*arr_maxsz > maxsz / 2)\n        *arr_maxsz = maxsz;\n    else\n        *arr_maxsz *= 2;\n\n    if ((valarr_tmpptr = realloc(*valarr, *arr_maxsz * sizeof(size_t))) == NULL)\n        return false;\n\n    *valarr = valarr_tmpptr;\n\n    return true;\n}\n\nbool parse_uintset(const char *lptr, struct set *set, size_t maxsz)\n{\n    const char        *tok, *tmpnum = NULL, *tmpnum_end;\n    char              *tmpnum_endptr = NULL, *fail_reason = \"BUG\";\n    bool               got_num, is_hex = false, invert = false;\n    size_t             last_num = 0, arr_szfilled, arr_maxsz;\n    size_t            *valarr;\n    size_t             vaidx = 0;\n    unsigned long long toknum;\n\n    assert(lptr && set);\n\n    /* ensure set is initialized */\n    memset(set, 0, sizeof(*set));\n\n    enum {\n        NIL = -1,\n        NUMBER_TOK,\n        RANGE_TOK,\n        COMMA_TOK,\n    } last_type = NIL;\n\n    /* allocate space for value pointers */\n    if ((valarr = malloc(DEFAULT_UINTLS_SZ * sizeof(size_t))) == NULL) {\n        show_error(\"%s(): OOM (Out Of Memory)\\n\", __func__);\n        return false;\n    }\n\n    arr_szfilled = 0;\n    arr_maxsz    = DEFAULT_UINTLS_SZ;\n    got_num      = false;\n\n    for (tok = lptr; *tok; tok++) {\n        /* skip spaces */\n        while (tok && isspace(*tok))\n            tok++;\n\n        /* check if we just went over trailing space */\n        if (!tok || !*tok)\n            break;\n\n        assert(arr_szfilled <= arr_maxsz); // should never fail\n        if (arr_szfilled == arr_maxsz)\n            if (!inc_arr_sz(&valarr, &arr_maxsz, maxsz)) {\n                fail_reason = \"OOM (Out Of Memory)\";\n                goto error;\n            }\n\n        switch (*tok) {\n        case '!':\n            if (last_type != NIL) {\n                fail_reason = \"inversion only allowed at beginning of set\";\n                goto error;\n            }\n            invert = true;\n            continue;\n        case ',':\n            if (last_type == RANGE_TOK) {\n                fail_reason = \"invalid range\";\n                goto error;\n            }\n            last_type = COMMA_TOK;\n            continue;\n        case '.':\n            if (last_type == COMMA_TOK || last_type == RANGE_TOK) {\n                fail_reason = \"invalid range\";\n                goto error;\n            }\n            /* check for consecutive `..` */\n            if (tok[1] != '.') {\n                fail_reason = \"bad token\";\n                goto error;\n            }\n            last_type = RANGE_TOK;\n            tok++;\n            continue;\n        }\n\n        if (isdigit(*tok)) {\n            /* check for 0x hex prefix */\n            if (*tok == '0' && tolower(tok[1]) == 'x') {\n                if (!isxdigit(tok[2]))\n                    continue;\n                is_hex = true;\n                tok   += 2;\n            }\n\n            /* find the end of this number in string */\n            tmpnum_end = tok;\n            for ( ; isxdigit(*tmpnum_end); tmpnum_end++)\n                ;\n            tmpnum = strndup(tok, tmpnum_end - tok);\n\n            errno  = 0;\n            toknum = strtoull(tmpnum, &tmpnum_endptr, is_hex ? 16 : 10);\n            if (is_hex)\n                is_hex = false;\n            if (errno || *tmpnum_endptr != '\\0') {\n                fail_reason = \"strtoull() failed\";\n                goto error;\n            }\n\n            free((void *)tmpnum);\n            tmpnum = NULL;\n\n            if (last_type == RANGE_TOK) {\n                if (!got_num) {\n                    /* we've got a {0 .. n} range */\n                    last_num  = toknum;\n                    last_type = NUMBER_TOK;\n                    got_num   = true;\n                    /* move token position to last number found (needed for 2+ digit nums */\n                    tok = tmpnum_end-1;\n                    /* bounds check */\n                    if (last_num >= maxsz) {\n                        fail_reason = \"0..n range OOB (Out Of Bounds)\";\n                        goto error;\n                    }\n                    /* pre-set the new size filled and grow array if necessary */\n                    if ((arr_szfilled += last_num+1) > arr_maxsz) // +1 for `0`\n                        while (arr_szfilled > arr_maxsz) {\n                            if (!inc_arr_sz(&valarr, &arr_maxsz, maxsz)) {\n                                fail_reason = \"OOM (Out Of Memory)\";\n                                goto error;\n                            }\n                        }\n                    /* fill up array with range */\n                    for (size_t i = 0; i <= last_num; i++)\n                        valarr[vaidx++] = i;\n                    continue;\n                }\n                if (toknum <= last_num || toknum >= maxsz) {\n                    fail_reason = \"invalid range\";\n                    goto error;\n                }\n\n                /* pre-set the new size filled and grow array if necessary */\n                if ((arr_szfilled += (toknum - last_num)) > arr_maxsz)\n                    while (arr_szfilled > arr_maxsz) {\n                        if (!inc_arr_sz(&valarr, &arr_maxsz, maxsz)) {\n                            fail_reason = \"OOM (Out Of Memory)\";\n                            goto error;\n                        }\n                    }\n\n                /* fill up array with range */\n                for (size_t i = last_num+1; i <= toknum; i++)\n                    valarr[vaidx++] = i;\n            } else if (last_type == NUMBER_TOK) {\n                /* sanity check */\n                fail_reason = \"impossible condition (last_type == NUMBER_TOK)\";\n                goto error;\n            } else {\n                valarr[vaidx++] = toknum;\n                arr_szfilled++;\n            }\n            last_num  = toknum;\n            last_type = NUMBER_TOK;\n            if (!got_num)\n                got_num = true;\n            /* move token position to last number found (needed for 2+ digit nums) */\n            tok = tmpnum_end-1;\n        } else {\n            fail_reason = \"bad token\";\n            goto error;\n        }\n    }\n\n    /* check for {n .. end} range */\n    if (last_type == RANGE_TOK) {\n        if (!got_num) {\n            fail_reason = \"invalid range\";\n            goto error;\n        }\n        if (last_num >= maxsz) {\n            fail_reason = \"n..end range OOB (Out Of Bounds)\";\n            goto error;\n        }\n        if ((arr_szfilled += (maxsz-1 - last_num)) > arr_maxsz)\n            while (arr_szfilled > arr_maxsz) {\n                if (!inc_arr_sz(&valarr, &arr_maxsz, maxsz)) {\n                    fail_reason = \"OOM (Out Of Memory)\";\n                    goto error;\n                }\n            }\n        /* fill up array with range */\n        for (size_t i = last_num+1; i < maxsz; i++)\n            valarr[vaidx++] = i;\n    }\n\n    /* consider empty sets invalid */\n    if (arr_szfilled == 0) {\n        fail_reason = \"empty set\";\n        goto error;\n    }\n\n    /* sort the value array */\n    qsort(valarr, arr_szfilled, sizeof(valarr[0]), _size_t_cmp);\n\n    /* check if there are any duplicates */\n    for (size_t i = 0; i+1 < arr_szfilled; i++)\n        if (valarr[i] == valarr[i+1]) {\n            fail_reason = \"duplicate element\";\n            goto error;\n        }\n\n    /* check range (for individual entries, faster than checking each one) */\n    if (valarr[arr_szfilled-1] >= maxsz) {\n        fail_reason = \"OOB (Out Of Bounds) element(s)\";\n        goto error;\n    }\n\n    /* handle inverted sets */\n    if (invert) {\n        size_t *inv_valarr;\n        if (arr_szfilled == maxsz) {\n            fail_reason = \"cannot invert the entire set!\";\n            goto error;\n        }\n        if ((inv_valarr = malloc((maxsz - arr_szfilled) * sizeof(size_t))) == NULL) {\n            fail_reason = \"OOM (Out Of Memory)\";\n            goto error;\n        }\n        for (size_t matchid = 0, va_idx = 0, inv_idx = 0; matchid < maxsz; matchid++) {\n            if (va_idx == arr_szfilled || valarr[va_idx] > matchid)\n                inv_valarr[inv_idx++] = matchid;\n            else\n                va_idx++;\n        }\n        free(valarr);\n        valarr       = inv_valarr;\n        arr_szfilled = maxsz - arr_szfilled;\n    } else {\n        size_t *tmp_vaptr;\n        if ((tmp_vaptr = realloc(valarr, arr_szfilled * sizeof(size_t))) == NULL) {\n            fail_reason = \"couldn't deallocate possibly unused end of the buffer\";\n            goto error;\n        }\n        valarr = tmp_vaptr;\n    }\n\n    set->buf  = valarr;\n    set->size = arr_szfilled;\n    return true;\n\nerror:\n    show_error(\"%s(): %s\\n\", __func__, fail_reason);\n    free((void *)tmpnum);\n    free(valarr);\n    set_cleanup(set);\n    return false;\n}\n"
        },
        {
          "name": "sets.h",
          "type": "blob",
          "size": 1.65625,
          "content": "/*\n    Create sets.\n\n    Copyright (C) 2016-2017 Bijan Kazemi <bkazemi@users.sf.net>\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#ifndef SETS_H\n#define SETS_H\n\n#include <stdlib.h>\n\nstruct set {\n    size_t  size; /* size of set (used) */\n    size_t *buf;  /* value buffer       */\n};\n\nstatic inline void set_cleanup(struct set *set)\n{\n    if (set)\n        free(set->buf);\n}\n\n/* iterate over set from front (forwards) */\n#define foreach_set_fw(i, set) \\\n    for (size_t i = 0; i < (set)->size; i++)\n\n/*\n * iterate over set from back (backwards)\n *\n * NOTE: `_reserved_for_set_iteration_zzaw2_df_` is reserved, named randomly to avoid namespace crash\n */\n#define foreach_set_bw(i, set)                                                \\\n    for (size_t _reserved_for_set_iteration_zzaw2_df_ = 0, i = (set)->size-1; \\\n         _reserved_for_set_iteration_zzaw2_df_ < (set)->size;                 \\\n         _reserved_for_set_iteration_zzaw2_df_++, i--)\n\nbool parse_uintset(const char *, struct set *, size_t);\n#endif /* SETS_H */\n"
        },
        {
          "name": "show_message.c",
          "type": "blob",
          "size": 5.0537109375,
          "content": "/*\n    Message printing helper functions.\n\n    Copyright (C) 2010 WANG Lu  <coolwanglu(a)gmail.com>\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#ifndef _GNU_SOURCE\n# define _GNU_SOURCE\n#endif\n\n#include \"config.h\"\n\n#include <stdio.h>\n#include <stdarg.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <string.h>\n#include <signal.h>\n#include <fcntl.h>\n\n#include \"common.h\"\n#include \"show_message.h\"\n#include \"scanmem.h\"\n\nvoid show_info(const char *fmt, ...)\n{\n    va_list args;\n    va_start (args, fmt);\n    fprintf(stderr, \"info: \");\n    vfprintf(stderr, fmt, args);\n    va_end (args);\n}\n\nvoid show_error(const char *fmt, ...)\n{\n    va_list args;\n    va_start (args, fmt);\n    fprintf(stderr, \"error: \");\n    vfprintf(stderr, fmt, args);\n    va_end (args);\n}\n\nvoid show_warn(const char *fmt, ...)\n{\n    va_list args;\n    va_start (args, fmt);\n    fprintf(stderr, \"warn: \");\n    vfprintf(stderr, fmt, args);\n    va_end (args);\n}\n\nvoid show_user(const char *fmt, ...)\n{\n    va_list args;\n    va_start (args, fmt);\n    if (!(sm_globals.options.backend))\n    {\n        vfprintf(stderr, fmt, args);\n    }\n    va_end (args);\n}\n\nvoid show_debug(const char *fmt, ...)\n{\n    va_list args;\n    va_start (args, fmt);\n    if (sm_globals.options.debug)\n    {\n        fprintf(stderr, \"debug: \");\n        vfprintf(stderr, fmt, args);\n    }\n    va_end (args);\n}\n\nFILE *get_pager(FILE *fallback_output)\n{\n    const char *pager;\n    pid_t pgpid;\n    int pgret;\n    int pgpipe[2];\n    bool pgcmdfail = false;\n    FILE *retfd = NULL;\n    char *const emptyvec[1] = { NULL };\n\n    assert(fallback_output != NULL && fileno(fallback_output) != -1);\n\n    if (sm_globals.options.backend || !isatty(fileno(fallback_output)))\n        return fallback_output;\n\n    if ((pager = util_getenv(\"PAGER\")) == NULL || *pager == '\\0') {\n        show_warn(\"get_pager(): couldn't get $PAGER, falling back to `more`\\n\");\n        pager = \"more\";\n    }\n\n    if (pipe2(pgpipe, O_NONBLOCK) == -1) {\n        show_error(\"get_pager(): pipe2() error `%s`. falling back to normal output\\n\", strerror(errno));\n        return fallback_output;\n    }\n    /*\n     * we write here to ensure we will always\n     * have something to read() into pgcmdfail.\n     */\n    write(pgpipe[1], \"\", 1);\n\n    /* XXX: is $PATH modified prior? */\nretry:\n    switch ((pgpid = fork())) {\n    case -1:\n        show_warn(\"get_pager(): fork() failed. falling back to normal output\\n\");\n        return fallback_output;\n    case 0:\n        execvp(pager, emptyvec);\n        /*\n         * if we got here, it means execvp() failed.\n         * errno contains the error, so pass it back\n         * up to parent. we use a pipe here to let\n         * the parent know that we are indeed returning\n         * the return value of the failed execvp().\n         */\n        char nullbuf;\n        /* read() to empty pipe */\n        read(pgpipe[0], &nullbuf, 1);\n        write(pgpipe[1], \"1\", 2);\n        exit(errno);\n        /* NOTREACHED */\n    default:\n        if (waitpid(pgpid, &pgret, 0) == -1) {\n            show_debug(\"pager: waitpid() error `%s`\\n\", strerror(errno));\n            show_warn(\"pager: waitpid() error. falling back to normal output\\n\");\n            return fallback_output;\n        } else {\n            pgret = WEXITSTATUS(pgret);\n            if (read(pgpipe[0], &pgcmdfail, 1) == -1) {\n                show_error(\"pager: pipe read() error `%s`. falling back to normal output\\n\", strerror(errno));\n                return fallback_output;\n            }\n            if (pgcmdfail) {\n                show_debug(\"pager: execvp(pg=%s) ret -> %d (%s)\\n\", pager, pgret, strerror(pgret));\n                if (!strcmp(pager, \"more\")) {\n                    show_warn(\"pager: sh failed to execute more. falling back to normal output\\n\");\n                    return fallback_output;\n                } else {\n                    show_warn(\"pager: sh failed to execute `%s`. trying `more`...\\n\", pager);\n                    pager = \"more\";\n                    goto retry;\n                }\n            }\n        }\n    }\n\n    if ((retfd = popen(pager, \"w\")) == NULL) {\n        show_warn(\"pager: couldn't popen() pager, falling back to normal output\\n\");\n        return fallback_output;\n    }\n\n    /*\n     * we need to ignore SIGPIPE in case the pager exits wihout draining the\n     * pipe (less seems to do this if you exit a large listing without\n     *       scrolling down)\n     */\n    signal(SIGPIPE, SIG_IGN);\n\n    assert(retfd != NULL);\n\n    return retfd;\n}\n"
        },
        {
          "name": "show_message.h",
          "type": "blob",
          "size": 2.353515625,
          "content": "/*\n    Message printing helper functions.\n\n    Copyright (C) 2010 WANG Lu  <coolwanglu(a)gmail.com>\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/*\n * This file declares all types of output functions, in order to provide well-formatted messages that a front-end can understand.\n *\n * Basically, all data goes through stdout, and all messages (to user or front-end) go through stderr.\n *\n * In stderr:\n *  all messages prefixed with 'error:' will be considered a fatal error; front-end may notify user to restart backend\n *  all messages prefixed with 'warn:' will be considered a nonfatal error.\n *  all messages prefixed with 'info:' will be ignored (by the front-end)\n *\n *  To display messages to user only, use show_user; nothing will be prepended, and the message will be ignored if scanmem is running as a backend.\n */\n\n#ifndef SHOW_MESSAGE_H\n#define SHOW_MESSAGE_H\n\n#include <stdio.h>\n#include <string.h>\n#include <signal.h>\n#include <errno.h>\n\n/* prepend 'info: ', output to stderr */\nvoid show_info(const char *fmt, ...);\n/* prepend 'error: ', output to stderr */\nvoid show_error(const char *fmt, ...);\n/* prepend 'warn: ', output to stderr */\nvoid show_warn(const char *fmt, ...);\n\n/* display message only when in debug mode */\nvoid show_debug(const char *fmt, ...);\n\n/* display message only when not running as a backend */\nvoid show_user(const char *fmt, ...);\n\n/* pager support routines */\nFILE *get_pager(FILE *fallback_output);\n\nstatic inline void close_pager(FILE *pager)\n{\n    if (pager != NULL && pager != stdout && pager != stderr) {\n        if (pclose(pager) == -1 && errno != EPIPE)\n            show_warn(\"pclose() error: %s\\n\", strerror(errno));\n        signal(SIGPIPE, SIG_DFL);\n    }\n}\n\n#endif /* SHOW_MESSAGE_H */\n"
        },
        {
          "name": "targetmem.c",
          "type": "blob",
          "size": 6.8798828125,
          "content": "/*\n    The target memory information array (storage of matches).\n\n    Copyright (C) 2009 Eli Dupree  <elidupree(a)charter.net>\n    Copyright (C) 2010 WANG Lu  <coolwanglu(a)gmail.com>\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#include <string.h>\n#include <stdbool.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <ctype.h>\n\n#include \"targetmem.h\"\n#include \"value.h\"\n\n\nmatches_and_old_values_array *\nallocate_array (matches_and_old_values_array *array, size_t max_bytes)\n{\n    /* make enough space for the array header and a null first swath */\n    size_t bytes_to_allocate =\n        sizeof(matches_and_old_values_array) +\n        sizeof(matches_and_old_values_swath);\n\n    if (!(array = realloc(array, bytes_to_allocate)))\n        return NULL;\n\n    array->bytes_allocated = bytes_to_allocate;\n    array->max_needed_bytes = max_bytes;\n\n    return array;\n}\n\nmatches_and_old_values_array *\nnull_terminate (matches_and_old_values_array *array,\n                matches_and_old_values_swath *swath)\n{\n    size_t bytes_needed;\n\n    if (swath->number_of_bytes == 0) {\n        assert(swath->first_byte_in_child == NULL);\n\n    } else {\n        swath = local_address_beyond_last_element(swath );\n        array = allocate_enough_to_reach(array, ((void *)swath) +\n                                         sizeof(matches_and_old_values_swath),\n                                         &swath);\n        swath->first_byte_in_child = NULL;\n        swath->number_of_bytes = 0;\n    }\n\n    bytes_needed = ((void *)swath + sizeof(matches_and_old_values_swath) -\n                    (void *)array);\n\n    if (bytes_needed < array->bytes_allocated) {\n        /* reduce array to its final size */\n        if (!(array = realloc(array, bytes_needed)))\n            return NULL;\n\n        array->bytes_allocated = bytes_needed;\n    }\n\n    return array;\n}\n\nvoid data_to_printable_string (char *buf, int buf_length,\n                               matches_and_old_values_swath *swath,\n                               size_t index, int string_length)\n{\n    long swath_length = swath->number_of_bytes - index;\n    /* TODO: what if length is too large ? */\n    long max_length = (swath_length >= string_length) ? string_length : swath_length;\n    int i;\n\n    for (i = 0; i < max_length; ++i) {\n        uint8_t byte = swath->data[index+i].old_value;\n        buf[i] = isprint(byte) ? byte : '.';\n    }\n    buf[i] = 0; /* null-terminate */\n}\n\nvoid data_to_bytearray_text (char *buf, int buf_length,\n                             matches_and_old_values_swath *swath,\n                             size_t index, int bytearray_length)\n{\n    int i;\n    int bytes_used = 0;\n    long swath_length = swath->number_of_bytes - index;\n\n    /* TODO: what if length is too large ? */\n    long max_length = (swath_length >= bytearray_length) ?\n                       bytearray_length : swath_length;\n\n    for (i = 0; i < max_length; ++i) {\n        uint8_t byte = swath->data[index+i].old_value;\n\n        /* TODO: check error here */\n        snprintf(buf+bytes_used, buf_length-bytes_used,\n                 (i<max_length-1) ? \"%02x \" : \"%02x\", byte);\n        bytes_used += 3;\n    }\n}\n\nmatch_location\nnth_match (matches_and_old_values_array *matches, size_t n)\n{\n    size_t i = 0;\n    matches_and_old_values_swath *reading_swath_index;\n    size_t reading_iterator = 0;\n\n    assert(matches);\n    reading_swath_index = matches->swaths;\n\n    while (reading_swath_index->first_byte_in_child) {\n        /* only actual matches are considered */\n        if (reading_swath_index->data[reading_iterator].match_info != flags_empty) {\n\n            if (i == n)\n                return (match_location){reading_swath_index, reading_iterator};\n\n            ++i;\n        }\n\n        /* go on to the next one... */\n        ++reading_iterator;\n        if (reading_iterator >= reading_swath_index->number_of_bytes) {\n            reading_swath_index =\n                local_address_beyond_last_element(reading_swath_index);\n\n            reading_iterator = 0;\n        }\n    }\n\n    /* I guess this is not a valid match-id */\n    return (match_location){ NULL, 0 };\n}\n\n/* deletes matches in [start, end) and resizes the matches array */\nmatches_and_old_values_array *\ndelete_in_address_range (matches_and_old_values_array *array,\n                         unsigned long *num_matches,\n                         void *start_address, void *end_address)\n{\n    assert(array);\n\n    size_t reading_iterator = 0;\n    matches_and_old_values_swath *reading_swath_index = array->swaths;\n\n    matches_and_old_values_swath reading_swath = *reading_swath_index;\n\n    matches_and_old_values_swath *writing_swath_index = array->swaths;\n\n    writing_swath_index->first_byte_in_child = NULL;\n    writing_swath_index->number_of_bytes = 0;\n\n    *num_matches = 0;\n\n    while (reading_swath.first_byte_in_child) {\n        void *address = reading_swath.first_byte_in_child + reading_iterator;\n\n        if (address < start_address || address >= end_address) {\n            old_value_and_match_info old_byte;\n\n            old_byte = reading_swath_index->data[reading_iterator];\n\n            /* Still a candidate. Write data.\n                (We can get away with overwriting in the same array because\n                 it is guaranteed to take up the same number of bytes or fewer,\n                 and because we copied out the reading swath metadata already.)\n                (We can get away with assuming that the pointers will stay\n                 valid, because as we never add more data to the array than\n                 there was before, it will not reallocate.) */\n            writing_swath_index = add_element(&array,\n                                      writing_swath_index, address,\n                                      old_byte.old_value, old_byte.match_info);\n\n            /* actual matches are recorded */\n            if (old_byte.match_info != flags_empty)\n                ++(*num_matches);\n        }\n\n        /* go on to the next one... */\n        ++reading_iterator;\n        if (reading_iterator >= reading_swath.number_of_bytes) {\n\n            reading_swath_index = (matches_and_old_values_swath *)\n                (&reading_swath_index->data[reading_swath.number_of_bytes]);\n\n            reading_swath = *reading_swath_index;\n\n            reading_iterator = 0;\n        }\n    }\n\n    return null_terminate(array, writing_swath_index);\n}\n"
        },
        {
          "name": "targetmem.h",
          "type": "blob",
          "size": 10.205078125,
          "content": "/*\n    The target memory information array (storage of matches).\n\n    Copyright (C) 2009 Eli Dupree  <elidupree(a)charter.net>\n    Copyright (C) 2010 WANG Lu  <coolwanglu(a)gmail.com>\n    Copyright (C) 2015 Sebastian Parschauer <s.parschauer@gmx.de>\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#ifndef TARGETMEM_H\n#define TARGETMEM_H\n\n#include <assert.h>\n#include <string.h>\n#include <stdlib.h>\n#include <inttypes.h>\n#include <stdbool.h>\n\n#include \"value.h\"\n#include \"show_message.h\"\n\n/* Public structs */\n\n/* Single match struct */\ntypedef struct {\n    uint8_t old_value;\n    match_flags match_info;\n} old_value_and_match_info;\n\n/* Array that contains a consecutive (in memory) sequence of matches (= swath).\n   - the first_byte_in_child pointer refers to locations in the child,\n     it cannot be followed except using ptrace()\n   - the number_of_bytes refers to the number of bytes in the child\n     process's memory that are covered, not the number of bytes the struct\n     takes up. It's the length of data. */\ntypedef struct __attribute__((packed,aligned(sizeof(old_value_and_match_info)))) {\n    void *first_byte_in_child;\n    size_t number_of_bytes;\n    old_value_and_match_info data[0];\n} matches_and_old_values_swath;\n\n/* Master matches array, smartly resized, contains swaths.\n   Both `bytes` values refer to real struct bytes this time. */\ntypedef struct {\n    size_t bytes_allocated;\n    size_t max_needed_bytes;\n    matches_and_old_values_swath swaths[0];\n} matches_and_old_values_array;\n\n/* Location of a match in a matches_and_old_values_array */\ntypedef struct {\n    matches_and_old_values_swath *swath;\n    size_t index;\n} match_location;\n\n\n/* Public functions */\n\nmatches_and_old_values_array *allocate_array (matches_and_old_values_array *array,\n                                              size_t max_bytes);\n\nmatches_and_old_values_array *null_terminate (matches_and_old_values_array *array,\n                                              matches_and_old_values_swath *swath);\n\n/* for printable text representation */\nvoid data_to_printable_string (char *buf, int buf_length,\n                               matches_and_old_values_swath *swath,\n                               size_t index, int string_length);\n\n/* for bytearray representation */\nvoid data_to_bytearray_text (char *buf, int buf_length,\n                             matches_and_old_values_swath *swath,\n                             size_t index, int bytearray_length);\n\nmatch_location nth_match (matches_and_old_values_array *matches, size_t n);\n\n/* deletes matches in [start, end) and resizes the matches array */\nmatches_and_old_values_array *\ndelete_in_address_range (matches_and_old_values_array *array,\n                         unsigned long *num_matches,\n                         void *start_address, void *end_address);\n\n/* The following functions are called in the hot scanning path and were moved\n   to this header from the .c file so that they could be inlined */\n\nstatic inline size_t\nindex_of_last_element (matches_and_old_values_swath *swath)\n{\n    return swath->number_of_bytes - 1;\n}\n\nstatic inline void *\nremote_address_of_nth_element (matches_and_old_values_swath *swath, size_t n)\n{\n    return swath->first_byte_in_child + n;\n}\n\nstatic inline void *\nremote_address_of_last_element (matches_and_old_values_swath *swath)\n{\n    return (remote_address_of_nth_element(swath, index_of_last_element(swath)));\n}\n\nstatic inline void *\nlocal_address_beyond_nth_element (matches_and_old_values_swath *swath, size_t n)\n{\n    return &(swath->data[n + 1]);\n}\n\nstatic inline void *\nlocal_address_beyond_last_element (matches_and_old_values_swath *swath)\n{\n    return (local_address_beyond_nth_element(swath, index_of_last_element(swath)));\n}\n\nstatic inline matches_and_old_values_array *\nallocate_enough_to_reach (matches_and_old_values_array *array,\n                          void *last_byte_to_reach_plus_one,\n                          matches_and_old_values_swath **swath_pointer_to_correct)\n{\n    size_t bytes_needed = last_byte_to_reach_plus_one - (void *)array;\n\n    if (bytes_needed <= array->bytes_allocated) {\n        return array;\n\n    } else {\n        matches_and_old_values_array *original_location = array;\n\n        /* allocate twice as much each time,\n           so we don't have to do it too often */\n        size_t bytes_to_allocate = array->bytes_allocated;\n        while (bytes_to_allocate < bytes_needed)\n            bytes_to_allocate *= 2;\n\n        show_debug(\"to_allocate %ld, max %ld\\n\", bytes_to_allocate,\n                   array->max_needed_bytes);\n\n        /* sometimes we know an absolute max that we will need */\n        if (array->max_needed_bytes < bytes_to_allocate) {\n            assert(array->max_needed_bytes >= bytes_needed);\n            bytes_to_allocate = array->max_needed_bytes;\n        }\n\n        if (!(array = realloc(array, bytes_to_allocate)))\n            return NULL;\n\n        array->bytes_allocated = bytes_to_allocate;\n\n        /* Put the swath pointer back where it should be, if needed.\n           We cast everything to void pointers in this line to make\n           sure the math works out. */\n        if (swath_pointer_to_correct) {\n            (*swath_pointer_to_correct) = (matches_and_old_values_swath *)\n                (((void *)(*swath_pointer_to_correct)) +\n                 ((void *)array - (void *)original_location));\n        }\n\n        return array;\n    }\n}\n\n/* returns a pointer to the swath to which the element was added -\n   i.e. the last swath in the array after the operation */\nstatic inline matches_and_old_values_swath *\nadd_element (matches_and_old_values_array **array,\n             matches_and_old_values_swath *swath,\n             void *remote_address,\n             uint8_t new_byte,\n             match_flags new_flags)\n{\n    if (swath->number_of_bytes == 0) {\n        assert(swath->first_byte_in_child == NULL);\n\n        /* we have to overwrite this as a new swath */\n        *array = allocate_enough_to_reach(*array, (void *)swath +\n            sizeof(matches_and_old_values_swath) +\n            sizeof(old_value_and_match_info), &swath);\n\n        swath->first_byte_in_child = remote_address;\n\n    } else {\n        size_t local_index_excess =\n            remote_address - remote_address_of_last_element(swath);\n\n        size_t local_address_excess =\n            local_index_excess * sizeof(old_value_and_match_info);\n\n        size_t needed_size_for_a_new_swath =\n            sizeof(matches_and_old_values_swath) +\n            sizeof(old_value_and_match_info);\n\n        if (local_address_excess >= needed_size_for_a_new_swath) {\n            /* It is more memory-efficient to start a new swath.\n             * The equal case is decided for a new swath, so that\n             * later we don't needlessly iterate through a bunch\n             * of empty values */\n            *array = allocate_enough_to_reach(*array,\n                local_address_beyond_last_element(swath) +\n                needed_size_for_a_new_swath, &swath);\n\n            swath = local_address_beyond_last_element(swath);\n            swath->first_byte_in_child = remote_address;\n            swath->number_of_bytes = 0;\n\n        } else {\n            /* It is more memory-efficient to write over the intervening\n               space with null values */\n            *array = allocate_enough_to_reach(*array,\n                local_address_beyond_last_element(swath) +\n                local_address_excess, &swath);\n\n            switch (local_index_excess) {\n            case 1:\n                /* do nothing, the new value is right after the old */\n                break;\n            case 2:\n                memset(local_address_beyond_last_element(swath), 0,\n                       sizeof(old_value_and_match_info));\n                break;\n            default:\n                /* slow due to unknown size to be zeroed */\n                memset(local_address_beyond_last_element(swath), 0,\n                       local_address_excess - sizeof(old_value_and_match_info));\n                break;\n            }\n            swath->number_of_bytes += local_index_excess - 1;\n        }\n    }\n\n    /* add me */\n    old_value_and_match_info *dataptr = local_address_beyond_last_element(swath);\n    dataptr->old_value = new_byte;\n    dataptr->match_info = new_flags;\n    ++swath->number_of_bytes;\n\n    return swath;\n}\n\n/* only at most sizeof(int64_t) bytes will be read,\n   if more bytes are needed (e.g. bytearray),\n   read them separately (for performance) */\nstatic inline value_t\ndata_to_val_aux (const matches_and_old_values_swath *swath,\n                 size_t index, size_t swath_length)\n{\n    unsigned int i;\n    value_t val;\n    size_t max_bytes = swath_length - index;\n\n    /* Init all possible flags in a single go.\n     * Also init length to the maximum possible value */\n    val.flags = 0xffffu;\n\n    /* NOTE: This does the right thing for VLT because the flags are in\n     * the same order as the number representation (for both endians), so\n     * that the zeroing of a flag does not change useful bits of `length`. */\n    if (max_bytes > 8) max_bytes = 8;\n    if (max_bytes < 8) val.flags &= ~flags_64b;\n    if (max_bytes < 4) val.flags &= ~flags_32b;\n    if (max_bytes < 2) val.flags &= ~flags_16b;\n    if (max_bytes < 1) val.flags = flags_empty;\n\n    for (i = 0; i < max_bytes; ++i) {\n        /* Both uint8_t, no explicit casting needed */\n        val.bytes[i] = swath->data[index + i].old_value;\n    }\n\n    /* Truncate to the old flags, which are stored with the first matched byte */\n    val.flags &= swath->data[index].match_info;\n\n    return val;\n}\n\nstatic inline value_t\ndata_to_val (const matches_and_old_values_swath *swath, size_t index)\n{\n    return data_to_val_aux(swath, index, swath->number_of_bytes);\n}\n\n#endif /* TARGETMEM_H */\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "value.c",
          "type": "blob",
          "size": 9.7119140625,
          "content": "/*\n    Simple routines for working with the value_t data structure.\n\n    Copyright (C) 2006,2007,2009 Tavis Ormandy <taviso@sdf.lonestar.org>\n    Copyright (C) 2009           Eli Dupree <elidupree@charter.net>\n    Copyright (C) 2009,2010      WANG Lu <coolwanglu@gmail.com>\n    Copyright (C) 2015           Sebastian Parschauer <s.parschauer@gmx.de>\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#include <stdio.h>\n#include <ctype.h>\n#include <stdlib.h>\n#include <limits.h>\n#include <assert.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stdint.h>\n#include <errno.h>\n#include <inttypes.h> /* for fixed-width formatters */\n\n#include \"value.h\"\n#include \"show_message.h\"\n\nvoid valtostr(const value_t *val, char *str, size_t n)\n{\n    char buf[128];\n    int np = 0;\n\n#define FLAG_MACRO(bytes, string) \\\n    (val->flags & flag_u##bytes##b && val->flags & flag_s##bytes##b) ? (string \" \") : \\\n        (val->flags & flag_u##bytes##b) ? (string \"u \") : \\\n            (val->flags & flag_s##bytes##b) ? (string \"s \") : \"\"\n    \n    /* set the flags */\n    np = snprintf(buf, sizeof(buf), \"[%s%s%s%s%s%s]\",\n         FLAG_MACRO(64, \"I64\"),\n         FLAG_MACRO(32, \"I32\"),\n         FLAG_MACRO(16, \"I16\"),\n         FLAG_MACRO(8,  \"I8\"),\n         (val->flags & flag_f64b) ? \"F64 \" : \"\",\n         (val->flags & flag_f32b) ? \"F32 \" : \"\");\n    /* handle having no type at all */\n    if (np <= 2) {\n        show_debug(\"BUG: No type\\n\");\n        goto err;\n    }\n\n         if (val->flags & flag_u64b) np = snprintf(str, n, \"%\" PRIu64 \", %s\", get_u64b(val), buf);\n    else if (val->flags & flag_s64b) np = snprintf(str, n, \"%\" PRId64 \", %s\", get_s64b(val), buf);\n    else if (val->flags & flag_u32b) np = snprintf(str, n, \"%\" PRIu32 \", %s\", get_u32b(val), buf);\n    else if (val->flags & flag_s32b) np = snprintf(str, n, \"%\" PRId32 \", %s\", get_s32b(val), buf);\n    else if (val->flags & flag_u16b) np = snprintf(str, n, \"%\" PRIu16 \", %s\", get_u16b(val), buf);\n    else if (val->flags & flag_s16b) np = snprintf(str, n, \"%\" PRId16 \", %s\", get_s16b(val), buf);\n    else if (val->flags & flag_u8b)  np = snprintf(str, n, \"%\" PRIu8 \", %s\",  get_u8b(val),  buf);\n    else if (val->flags & flag_s8b)  np = snprintf(str, n, \"%\" PRId8 \", %s\",  get_s8b(val),  buf);\n    else if (val->flags & flag_f64b) np = snprintf(str, n, \"%lg, %s\", get_f64b(val), buf);\n    else if (val->flags & flag_f32b) np = snprintf(str, n, \"%g, %s\", get_f32b(val), buf);\n    else {\n        show_debug(\"BUG: No formatting found\\n\");\n        goto err;\n    }\n    if (np <= 0 || (size_t)np >= (n - 1))\n        goto err;\n\n    return;\nerr:\n    /* always print a value and a type to not crash front-ends */\n    strncpy(str, \"unknown, [unknown]\", n);\n}\n\nvoid valcpy(value_t * dst, const value_t * src)\n{\n    memcpy(dst, src, sizeof(value_t));\n    return;\n}\n\n/* dst.flags must be set beforehand. Prefer setting floats to ints */\nvoid uservalue2value(value_t *dst, const uservalue_t *src)\n{\n    /* Zero whole value union, in case high bytes won't be set */\n    dst->uint64_value = 0;\n\n         if (dst->flags & flag_f64b) set_f64b(dst, get_f64b(src));\n    else if (dst->flags & flag_u64b) set_u64b(dst, get_u64b(src));\n    else if (dst->flags & flag_s64b) set_s64b(dst, get_s64b(src));\n\n    else if (dst->flags & flag_f32b) set_f32b(dst, get_f32b(src));\n    else if (dst->flags & flag_u32b) set_u32b(dst, get_u32b(src));\n    else if (dst->flags & flag_s32b) set_s32b(dst, get_s32b(src));\n\n    else if (dst->flags & flag_u16b) set_u16b(dst, get_u16b(src));\n    else if (dst->flags & flag_s16b) set_s16b(dst, get_s16b(src));\n\n    else if (dst->flags & flag_u8b)  set_u8b (dst, get_u8b(src));\n    else if (dst->flags & flag_s8b)  set_s8b (dst, get_s8b(src));\n\n    else assert(false);\n}\n\n/* parse bytearray, it will allocate the arrays itself, then needs to be free'd by `free_uservalue()` */\nbool parse_uservalue_bytearray(char *const *argv, unsigned argc, uservalue_t *val)\n{\n    unsigned int i,j;\n    uint8_t *bytes_array = malloc(argc*sizeof(uint8_t));\n    wildcard_t *wildcards_array = malloc(argc*sizeof(wildcard_t));\n\n    if (bytes_array == NULL || wildcards_array == NULL)\n    {\n        show_error(\"memory allocation for bytearray failed.\\n\");\n        goto err;\n    }\n\n    const char *cur_str;\n    char *endptr;\n\n    for(i = 0; i < argc; ++i)\n    {\n        /* get current string */\n        cur_str = argv[i];\n        /* test its length */\n        for(j = 0; (j < 3) && (cur_str[j]); ++j) {}\n        if (j != 2) /* length is not 2 */\n            goto err;\n\n        if (strcmp(cur_str, \"??\") == 0)\n        {\n            wildcards_array[i] = WILDCARD;\n            bytes_array[i] = 0x00;\n        }\n        else\n        {\n            /* parse as hex integer */\n            uint8_t cur_byte = (uint8_t)strtoul(cur_str, &endptr, 16);\n            if (*endptr != '\\0')\n                goto err;\n\n            wildcards_array[i] = FIXED;\n            bytes_array[i] = cur_byte;\n        }\n    }\n\n    /* everything is ok */\n    val->bytearray_value = bytes_array;\n    val->wildcard_value = wildcards_array;\n    val->flags = argc;\n    return true;\n\nerr:\n    if (bytes_array) free(bytes_array);\n    if (wildcards_array) free(wildcards_array);\n    zero_uservalue(val);\n    return false;\n}\n\nbool parse_uservalue_number(const char *nptr, uservalue_t * val)\n{\n    if (parse_uservalue_int(nptr, val))\n    {\n        val->flags |= flags_float;\n        if (val->flags & flag_s64b) {\n            val->float32_value = (float) val->int64_value;\n            val->float64_value = (double) val->int64_value;\n        }\n        else {\n            val->float32_value = (float) val->uint64_value;\n            val->float64_value = (double) val->uint64_value;\n        }\n        return true;\n    }\n    else if(parse_uservalue_float(nptr, val))\n    {\n        double num = val->float64_value;\n        if (num >=         0 && num <=  UINT8_MAX) { val->flags |= flag_u8b;  set_u8b(val,   (uint8_t)num); }\n        if (num >=  INT8_MIN && num <=   INT8_MAX) { val->flags |= flag_s8b;  set_s8b(val,    (int8_t)num); }\n        if (num >=         0 && num <= UINT16_MAX) { val->flags |= flag_u16b; set_u16b(val, (uint16_t)num); }\n        if (num >= INT16_MIN && num <=  INT16_MAX) { val->flags |= flag_s16b; set_s16b(val,  (int16_t)num); }\n        if (num >=         0 && num <= UINT32_MAX) { val->flags |= flag_u32b; set_u32b(val, (uint32_t)num); }\n        if (num >= INT32_MIN && num <=  INT32_MAX) { val->flags |= flag_s32b; set_s32b(val,  (int32_t)num); }\n        if (num >=         0 && num <= UINT64_MAX) { val->flags |= flag_u64b; set_u64b(val, (uint64_t)num); }\n        if (num >= INT64_MIN && num <=  INT64_MAX) { val->flags |= flag_s64b; set_s64b(val,  (int64_t)num); }\n        return true;\n    }\n\n    return false;\n}\n\nbool parse_uservalue_int(const char *nptr, uservalue_t * val)\n{\n    int64_t snum;\n    bool valid_sint;\n    uint64_t unum;\n    bool valid_uint;\n    char *endptr;\n\n    assert(nptr != NULL);\n    assert(val != NULL);\n\n    zero_uservalue(val);\n\n    /* skip past any whitespace */\n    while (isspace(*nptr))\n        ++nptr;\n\n    /* parse it as signed int */\n    errno = 0;\n    snum = strtoll(nptr, &endptr, 0);\n    valid_sint = (errno == 0) && (*endptr == '\\0');\n\n    /* parse it as unsigned int */\n    errno = 0;\n    unum = strtoull(nptr, &endptr, 0);\n    valid_uint = (*nptr != '-') && (errno == 0) && (*endptr == '\\0');\n\n    if (!valid_sint && !valid_uint)\n        return false;\n\n    /* determine correct flags */\n    if (valid_uint &&                      unum <=  UINT8_MAX) { val->flags |= flag_u8b;  set_u8b(val,   (uint8_t)unum); }\n    if (valid_sint && snum >=  INT8_MIN && snum <=   INT8_MAX) { val->flags |= flag_s8b;  set_s8b(val,    (int8_t)snum); }\n    if (valid_uint &&                      unum <= UINT16_MAX) { val->flags |= flag_u16b; set_u16b(val, (uint16_t)unum); }\n    if (valid_sint && snum >= INT16_MIN && snum <=  INT16_MAX) { val->flags |= flag_s16b; set_s16b(val,  (int16_t)snum); }\n    if (valid_uint &&                      unum <= UINT32_MAX) { val->flags |= flag_u32b; set_u32b(val, (uint32_t)unum); }\n    if (valid_sint && snum >= INT32_MIN && snum <=  INT32_MAX) { val->flags |= flag_s32b; set_s32b(val,  (int32_t)snum); }\n    if (valid_uint &&                      unum <= UINT64_MAX) { val->flags |= flag_u64b; set_u64b(val, (uint64_t)unum); }\n    if (valid_sint && snum >= INT64_MIN && snum <=  INT64_MAX) { val->flags |= flag_s64b; set_s64b(val,  (int64_t)snum); }\n\n    return true;\n}\n\nbool parse_uservalue_float(const char *nptr, uservalue_t * val)\n{\n    double num;\n    char *endptr;\n    assert(nptr);\n    assert(val);\n\n    zero_uservalue(val);\n    while (isspace(*nptr))\n        ++nptr;\n\n    errno = 0;\n    num = strtod(nptr, &endptr);\n    if ((errno != 0) || (*endptr != '\\0'))\n        return false;\n    \n    /* I'm not sure how to distinguish between float and double, but I guess it's not necessary here */\n    val->flags |= flags_float;\n    val->float32_value = (float) num;\n    val->float64_value =  num;   \n    return true;\n}\n\nvoid free_uservalue(uservalue_t *uval)\n{\n    /* bytearray arrays are dynamically allocated and have to be freed, strings are not */\n    if (uval->bytearray_value)\n        free((void*)uval->bytearray_value);\n    if (uval->wildcard_value)\n        free((void*)uval->wildcard_value);\n}\n"
        },
        {
          "name": "value.h",
          "type": "blob",
          "size": 7.400390625,
          "content": "/*\n    Simple routines for working with the value_t data structure.\n\n    Copyright (C) 2006,2007,2009 Tavis Ormandy <taviso@sdf.lonestar.org>\n    Copyright (C) 2009           Eli Dupree <elidupree@charter.net>\n    Copyright (C) 2009,2010      WANG Lu <coolwanglu@gmail.com>\n    Copyright (C) 2015           Sebastian Parschauer <s.parschauer@gmx.de>\n    Copyright (C) 2017           Andrea Stacchiotti <andreastacchiotti(a)gmail.com>\n\n    This file is part of libscanmem.\n\n    This library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published\n    by the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with this library.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\n#ifndef VALUE_H\n#define VALUE_H\n\n#include <string.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <assert.h>\n#include <stdbool.h>\n\n/* some routines for working with value_t structures */\n\n/* match_flags: they MUST be implemented as an `uint16_t`, the `__packed__` ensures so.\n * They are reinterpreted as a normal integer when scanning for VLT, which is\n * valid for both endians, as the flags are ordered from smaller to bigger.\n * NAMING: Primitive, single-bit flags are called `flag_*`, while aggregates,\n * defined for convenience, are called `flags_*`*/\ntypedef enum __attribute__((__packed__)) {\n    flags_empty = 0,\n\n    flag_u8b  = 1 << 0,  /* could be an unsigned  8-bit variable (e.g. unsigned char)      */\n    flag_s8b  = 1 << 1,  /* could be a    signed  8-bit variable (e.g. signed char)        */\n    flag_u16b = 1 << 2,  /* could be an unsigned 16-bit variable (e.g. unsigned short)     */\n    flag_s16b = 1 << 3,  /* could be a    signed 16-bit variable (e.g. short)              */\n    flag_u32b = 1 << 4,  /* could be an unsigned 32-bit variable (e.g. unsigned int)       */\n    flag_s32b = 1 << 5,  /* could be a    signed 32-bit variable (e.g. int)                */\n    flag_u64b = 1 << 6,  /* could be an unsigned 64-bit variable (e.g. unsigned long long) */\n    flag_s64b = 1 << 7,  /* could be a    signed 64-bit variable (e.g. long long)          */\n\n    flag_f32b = 1 << 8,  /* could be a 32-bit floating point variable (i.e. float)         */\n    flag_f64b = 1 << 9,  /* could be a 64-bit floating point variable (i.e. double)        */\n\n    flags_i8b  = flag_u8b  | flag_s8b,\n    flags_i16b = flag_u16b | flag_s16b,\n    flags_i32b = flag_u32b | flag_s32b,\n    flags_i64b = flag_u64b | flag_s64b,\n\n    flags_integer = flags_i8b | flags_i16b | flags_i32b | flags_i64b,\n    flags_float = flag_f32b | flag_f64b,\n    flags_all = flags_integer | flags_float,\n\n    flags_8b   = flags_i8b,\n    flags_16b  = flags_i16b,\n    flags_32b  = flags_i32b | flag_f32b,\n    flags_64b  = flags_i64b | flag_f64b,\n\n    flags_max = 0xffffU /* ensures we're using an uint16_t */\n} match_flags;\n\n/* this struct describes matched values */\ntypedef struct {\n    union {\n        int8_t int8_value;\n        uint8_t uint8_value;\n        int16_t int16_value;\n        uint16_t uint16_value;\n        int32_t int32_value;\n        uint32_t uint32_value;\n        int64_t int64_value;  \n        uint64_t uint64_value;  \n        float float32_value;\n        double float64_value;\n        uint8_t bytes[sizeof(int64_t)];\n        char chars[sizeof(int64_t)];\n    };\n    \n    match_flags flags;\n} value_t;\n\n/* This union describes 8 bytes retrieved from target memory.\n * Pointers to this union are the only ones that are allowed to be unaligned:\n * to avoid performance degradation/crashes on arches that don't support unaligned access\n * (e.g. ARM) we access unaligned memory only through the attributes of this packed union.\n * As described in http://www.alfonsobeato.net/arm/how-to-access-safely-unaligned-data/ ,\n * a packed structure forces the compiler to write general access methods to its members\n * that don't depend on alignment.\n * So NEVER EVER dereference a mem64_t*, but use its accessors to obtain the needed type.\n */\ntypedef union __attribute__((packed)) {\n    int8_t int8_value;\n    uint8_t uint8_value;\n    int16_t int16_value;\n    uint16_t uint16_value;\n    int32_t int32_value;\n    uint32_t uint32_value;\n    int64_t int64_value;\n    uint64_t uint64_value;\n    float float32_value;\n    double float64_value;\n    uint8_t bytes[sizeof(int64_t)];\n    char chars[sizeof(int64_t)];\n} mem64_t;\n\n/* bytearray wildcards: they must be uint8_t. They are ANDed with the incoming\n * memory before the comparison, so that '??' wildcards always return true\n * It's possible to extend them to fully granular wildcard-ing, if needed */\ntypedef enum __attribute__ ((__packed__)) {\n    FIXED = 0xffu,\n    WILDCARD = 0x00u,\n} wildcard_t;\n\n/* this struct describes values provided by users */\ntypedef struct {\n    int8_t int8_value;\n    uint8_t uint8_value;\n    int16_t int16_value;\n    uint16_t uint16_value;\n    int32_t int32_value;\n    uint32_t uint32_value;\n    int64_t int64_value;\n    uint64_t uint64_value;\n    float float32_value;\n    double float64_value;\n\n    const uint8_t *bytearray_value;\n    const wildcard_t *wildcard_value;\n\n    const char *string_value;\n\n    match_flags flags;\n} uservalue_t;\n\n/* used when outputting values to user */\n/* only works for numbers */\nvoid valtostr(const value_t *val, char *str, size_t n);\n/* parse bytearray, it will allocate the arrays itself, then needs to be free'd by `free_uservalue()` */\nbool parse_uservalue_bytearray(char *const *argv, unsigned argc, uservalue_t *val);\nbool parse_uservalue_number(const char *nptr, uservalue_t * val); /* parse int or float */\nbool parse_uservalue_int(const char *nptr, uservalue_t * val);\nbool parse_uservalue_float(const char *nptr, uservalue_t * val);\nvoid free_uservalue(uservalue_t *uval);\nvoid valcpy(value_t * dst, const value_t * src);\nvoid uservalue2value(value_t * dst, const uservalue_t * src); /* dst.flags must be set beforehand */\n\n#define get_s8b(val) ((val)->int8_value)\n#define get_u8b(val) ((val)->uint8_value)\n#define get_s16b(val) ((val)->int16_value)\n#define get_u16b(val) ((val)->uint16_value)\n#define get_s32b(val) ((val)->int32_value)\n#define get_u32b(val) ((val)->uint32_value)\n#define get_s64b(val) ((val)->int64_value)\n#define get_u64b(val) ((val)->uint64_value)\n#define get_f32b(val) ((val)->float32_value)\n#define get_f64b(val) ((val)->float64_value)\n\n#define set_s8b(val, v) (((val)->int8_value) = v)\n#define set_u8b(val, v) (((val)->uint8_value) = v)\n#define set_s16b(val, v) (((val)->int16_value) = v)\n#define set_u16b(val, v) (((val)->uint16_value) = v)\n#define set_s32b(val, v) (((val)->int32_value) = v)\n#define set_u32b(val, v) (((val)->uint32_value) = v)\n#define set_s64b(val, v) (((val)->int64_value) = v)\n#define set_u64b(val, v) (((val)->uint64_value) = v)\n#define set_f32b(val, v) (((val)->float32_value) = v)\n#define set_f64b(val, v) (((val)->float64_value) = v)\n\nstatic inline void zero_value(value_t *val)\n{\n    /* zero components separately -\n       10 bytes memset() is too slow */\n    val->int64_value = 0;               /* zero the whole union */\n    val->flags = flags_empty;\n}\n\nstatic inline void zero_uservalue(uservalue_t *val)\n{\n    memset(val, 0, sizeof(*val));\n}\n\n#endif /* VALUE_H */\n"
        }
      ]
    }
  ]
}