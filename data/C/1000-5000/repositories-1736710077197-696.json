{
  "metadata": {
    "timestamp": 1736710077197,
    "page": 696,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "jgaeddert/liquid-dsp",
      "stars": 1921,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.5859375,
          "content": "# For more configuration details:\n# https://docs.codecov.io/docs/codecov-yaml\n\n# Check if this file is valid by running in bash:\n# curl -X POST --data-binary @.codecov.yml https://codecov.io/validate\n\n# coverage configuration\ncoverage:\n  range: 70..90\n  round: down\n  precision: 3\n  status:\n    project:\n      default:\n        target: 75\n        threshold: 5\n\nignore:\n  - autotest/*\n  - examples/*\n  - sandbox/*\n  - scripts/*\n  - src/*/bench/*\n  - src/*/tests/*\n\n# parse coverage reports\nparsers:\n  gcov:\n    branch_detection:\n      conditional: yes\n      loop: yes\n      method: no\n      macro: no\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6728515625,
          "content": "# ignore all object files\n*.a\n*.ar\n*.d\n*.dylib\n*.dSYM\n*.gcda\n*.gcno\n*.o\n*.so\n*~\n\n# ignore swap files for vim editing\n*.swp\n\n# build objects \nautom4te.cache\naclocal.m4\n\n# ignore all auto-generated targets\nautotest_include.h\nbenchmark\nbenchmark_include.h\nbench/fftbench\nconfigure\nconfig.h\nconfig.h.in\nconfig.h.in~\nconfig.log\nconfig.status\nmakefile\nxautotest\n*.m\nautotest.json\nautotest/logs/*.bin\nautotest/logs/*.gnu\nreadme.*\n\n# miscellany\noctave-core\n*.tar\n*.gz\n.DS_Store\n\n# gentab programs\nsrc/fec/gentab/*_gentab\nsrc/utility/gentab/*_gentab\n\n# gentab output sources\nsrc/fec/gentab/reverse_byte.c\nsrc/utility/gentab/count_ones.c\n\n# sandbox\nsandbox/*_test\nsandbox/*_example\nsandbox/*_gentab\n"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 2.02734375,
          "content": "# base configuration\nimage: debian\nstages: [build, test]\nbefore_script:\n  - apt-get -qq update\n  - apt-get -qq install -y --no-install-recommends automake autoconf gcc g++ gcovr make valgrind time curl\n\n# build from scratch\ncompile:\n  stage: build\n  script:\n    - ./bootstrap.sh\n    - ./configure\n    - make -j4\n  artifacts: # save output objects for test stages\n    paths: [makefile, configure, config.h, config.h.in]\n\n# test installation and linking appropriately\ninstall:\n  stage: test\n  script:\n    - make -j4\n    - make install\n    - ldconfig\n    - make check-link\n\n# compile and run benchmark program\nbench:\n  stage: test\n  script:\n    - make -j4 bench\n  artifacts:\n    paths: [benchmark.json]\n\n# run all test programs\ncheck:\n  stage: test\n  script:\n    - ./configure\n    - make -j4 check\n  artifacts:\n    paths: [autotest.json]\n\n# compile and run documenation checks (e.g. example code in README.md)\ncheck-doc:\n  stage: test\n  script:\n    - make check-doc\n\n# compile and run all example programs, timing how long each takes to run\nexamples:\n  stage: test\n  script:\n    - make -j4 examples\n    - echo '' > time.txt\n    - ls examples/*_example | sed -E \"s#(.*)#echo '\\1' >> time.txt; { time -p ./\\1 ; } 2>> time.txt#g\" > run_examples.sh\n    - /bin/sh run_examples.sh\n  artifacts:\n    paths: [run_examples.sh, time.txt]\n\n# compile and run all autotest programs with valgrind\nautotest-memcheck:\n  stage: test\n  script:\n    - make -j4 xautotest\n    - mkdir valgrind\n    - ./scripts/valgrind_eval.py -output valgrind -test 881\n  artifacts:\n    paths: [valgrind/*]\n\n# build from scratch\ncoverage:\n  stage: test\n  script:\n    - apt-get -qq install -y --no-install-recommends virtualenv\n    - virtualenv codecov\n    - source codecov/bin/activate\n    - pip install codecov-cli\n    - make distclean\n    - ./bootstrap.sh\n    - ./configure --enable-coverage\n    - make -j4 coverage\n    - codecovcli --version\n    - codecovcli upload-process -t $CODECOV_TOKEN --git-service gitlab --slug jgaeddert/liquid-dsp\n\n  coverage: '/lines: \\d+\\.\\d+%/'\n  artifacts:\n    paths: [coverage.out]\n\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.728515625,
          "content": "language: C\n\nmatrix:\n    include:\n        - os: linux\n          compiler: gcc\n          env: BUILD_CXX=off\n        - os: osx\n          compiler: clang\n          env: BUILD_CXX=off\n\nscript:\n    - git clone https://github.com/quiet/libcorrect.git\n    - cd libcorrect\n    - mkdir build\n    - cd build\n    - set -e\n    - cmake -DCMAKE_BUILD_TYPE=Release .. && make && make shim\n    - sudo make install\n    - set +e\n    - if [[ \"$TRAVIS_OS_NAME\" == \"linux\" ]]; then sudo ldconfig; fi\n    - cd ../..\n    - set -e\n    - ./bootstrap.sh\n    - ./configure\n    - make\n    - make examples\n    - make benchmark\n    - make xautotest\n    - ./xautotest -R 0 # execute with a specific random seed\n    - ./xautotest      # execute with a random seed based on time\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 16.9345703125,
          "content": "# Changelog\n\n## Unreleased\n\n## 1.6.0 - 2023-06-19\n\nVersion 1.6.0 includes a new qdsync object to greatly simplify the frame\nsynchronization process in liquid, allowing for both detection and channel\nimpairment correction with a simplified interface. Additionally, code\ncoverage has been increased to 85% across the entire project, with numerous\nbug fixes, stability improvements, and massive testing enhancements. From\nan \"architectural\" standpoint, objects have been migrated to use standard\nmethods for consistency.\n\n  * build\n    - increased code coverage to 85% globally across entire project. This\n      is the single largest effort included in this version and touches\n      most modules in some way, most particularly the framing objects\n    - cleaning build to remove compiler warnings (e.g. unused variables)\n    - stripped version number off archive\n  * dotprod\n    - added support for AVX512-F (thanks, @vankxr!)\n  * framing\n    - added numerous tests to increase coverage to 84%\n    - framesync64: using new qdsync object for simplified operation\n    - qdsync: new frame detector and synchronizer to much more easily\n      support frame processing. The object not only detects the frame, but\n      also provides an initial carrier frequency, phase, and timign offset,\n      and also corrects for these impairments, passing the results to the\n      user in a clean callback function.\n  * modem\n    - cpfskmod: increasing phase stability for long runs\n  * multichannel\n    - added numerous tests to increase coverage to 88%\n  * optim\n    - added numerous tests to increase coverage to 92%\n  * sequence\n    - msequence: extended support for state variables up to m=31, reversed\n      order for generator polynomial and internal state definition to be\n      more consistent with literature and readily-available genpolys\n\n## 1.5.0 - 2022-11-20\n\nThis release includes substantially improved testing coverage, deep copy()\nmethods for nearly all objects, improved speed, and resolves a number of\nissues and pull requests.\n\n  * build\n    - added support for PlatformIO (https://platformio.org) for embeedded\n      development (thanks, @jcw!)\n    - incorporated recursive copy() methods to objects to facilitate c++ copy\n      constructors for bindings; now all objects can be deep copied to a new\n      object with their entire memory and state preserved\n    - added convenience method to malloc and copy memory arrays\n    - improved support for error codes across objects and methods\n    - cleaned up spelling errors across project (thanks, @nowls!)\n    - scrubbed function argument variable names to avoid underscore followed\n      by a capital letter, causing trouble with pre-compiler processing\n    - added basic test to check linking to installed library, incorporating\n      into CI/CD pipelines\n    - added more example programs\n  * autotest\n    - increased coverage testing (81% across entire project)\n    - added the ability to \"hammer\" a particular test by running repeatedly on\n      incremental seeds to assess specific edge cases (e.g. with random data)\n    - added timer to show execution time for each test and identify areas for\n      speed improvements\n    - added methods for testing spectral response of various fields\n    - added special directory for storing output logs: autotest/logs/\n  * benchmark\n    - replacing old C-based benchmark comparison with simpler python version\n  * dotprod\n    - added support for AVX SIMD in vector dot products (thanks, @vankxr!)\n  * fft\n    - adding macro to allow for aligned memory allocation if FFTW is used\n      (thanks, @nowls!)\n  * filter\n    - added new halfband filter design using Parks-McClellan algorithm and\n      qs1dsearch method to provide as exact a specification as possible\n    - added method to retrieve filter response from coefficients array\n    - dds: adding methods to get/set scale\n    - firhilb, iirhilb: added block processing method\n    - msresamp, resamp: adding method to provide the exact number of output\n      samples with provided input size\n    - msresamp2, resamp2: using better halfband filter design for exact user\n      specifications\n    - resamp: adding methods to get/set scale, fixing filter bank resolution\n      (was hard-coded, now respects user configuration)\n  * framing\n    - framesync64: added methods to set callback and userdata (context)\n      fields, adding support for exporting debugging files for post-analysis\n      as well as python script for processing, adding better estimate of\n      error vector magnitude\n    - msource: added convenience method to recall number of samples generated\n      by each source\n    - ofdmflexframesync: added methods to set callback and userdata (context)\n      fields\n    - qpacketmodem: returning much better estimate of error vector magnitude\n    - qsource: fixed issue with carrier frequency adjustment\n  * optim\n    - added qs1dsearch object to perform quad-section 1-dimensional search:\n      similar to bisection search, but to find potentially non-continuous\n      minimum/maximum of function\n\n## 1.4.0 - 2022-02-03\n\n  * autotest\n    - automated code coverage testing (72%)\n  * build\n    - incorporated error handling in most methods with integer-based return value\n  * agc\n    - added interface to check if AGC is locked or not\n  * buffer\n    - cbuffer: added method to check if buffer is empty\n  * dotprod\n    - included methods to create/recreate object in reverse order\n  * equalization\n    - eqlms: added convenience methods for copying coefficients and running as\n      a decimator\n  * fft\n    - spgram: adding convenience methods for getting/setting properties\n    - spwaterfall: adding convenience methods for getting/setting properties\n  * filter\n    - new direct digital synthesis (DDS) family of objects which allows\n      cascaded half-band interpolation/decimation with arbitrary frequency\n      translation\n    - new fractional delay (fdelay) family of objects which allow for\n      adjustable large fractional delays\n    - firdecim: adding convenience method to get decimation rate\n    - firfilt: adding convenience methods to get/copy coefficients as well as\n      create object using firdespm algorithm\n    - firinterp: adding convenience methods for new ways to create object as\n      well as getting object properties\n    - firpfb: adding convenience methods to create default object, write\n      samples\n    - resamp2: adding methods to get/set output scale\n    - rresamp: adding methods to operate with block execution\n  * framing\n    - new arbitrary rate symstreamr object (derived from symstream family)\n    - framesync64: adding methods for getting/resetting frame data statistics\n      as well as getting/setting detection threshold\n    - gmskframegen/gmskframesync: extending methods to support easier\n      operation, getting/resetting frame data statistics, more control over\n      parameters in create methods\n    - ofdmflexframesync: adding methods to get/reset frame data statistics\n    - qdetector: adding method to get threshold\n    - qpilotsync: adding method to get error vector magnitude\n    - symstream: adding convenience methods for getting properties\n    - symtrack: adding convenience methods for getting/setting properties\n  * math\n    - adding `liquid_` prefix to winodowing functions while supporting backwards\n      compatibility with older methods\n    - adding `liquid_` prefix to internal polynomial functions, using\n      common double-precision method for finding polynomial roots\n  * multichannel\n    - firpfbch2: adding convenience methods to get object properties\n  * modem\n    - modem: adding type extension for more consistency: `modem` -> `modemcf`,\n      supporting backwards compatibility with API shim\n\n## 1.3.1 - 2019-07-28\n\n  * autotest\n    - runs with random seeds (based on time) for diveristy\n    - output .json file for post-analysis\n  * build\n    - cleaned up compiler warnings across most platforms\n    - incorporated continuous integration script\n    - compact header APIs across all interfaces in liquid.h\n    - consistent build across Linux and macOS\n  * agc\n    - added more convenience methods, improved autotest stability\n  * fft\n    - spwaterfall less verbose with more convenience methods\n  * filter\n    - new rresamp family of objects to implement rational rate\n      resampling; very useful for fixed buffer sizes\n    - resamp now uses fixed-point phase for faster computation\n    - fixed issues with msresamp2 ordering to have expected roll-off\n      performance\n    - added notch filter design option for firfilt (with autotest)\n  * framing\n    - completely reworked msource family of objects to use firpfbch2\n      family of objects for computationally efficient\n    - added preliminary fskframe generator and synchronizer objects\n  * math\n    - improved functions for speed, is_prime()\n    - improved stability and consistency of root-finding algorithms\n  * multichannel\n    - added new firpfbchr family of objects for arbitrarily setting\n      number of channels and down-sampling rates\n  * modem\n    - refactored objects for amplitude modulation/demodulation to use\n      Hilbert transform, added autotest scripts\n  * nco\n    - improving consistency across platforms\n\n## 1.3.1 - 2017-10-23\n\n  * improved selection of SSE/MMX extension flags for gcc\n  * agc\n    - adding squelch functionality back into gain control object\n  * filter\n    - adding callback function for Parks-McClellan algorithm to allow generic \n      filter prototyping\n    - fixed double-free bug in iirfilt\n  * fft\n    - adding new spwaterfall family of objects for generating waterfall plot\n      and automatically down-size as input sample size grows\n  * sequence\n    - fixed issue with order of operations causing inconsistent behavior across\n      different platforms\n\n## 1.3.0 - 2016-12-30\n\n  * New MIT/X11 license (https://opensource.org/licenses/MIT)\n  * agc (automatic gain control)\n    - major code scrub, improved reliability, simplified interface\n    - block-level operation\n  * buffer\n    - new cbuffer objects for dynamic-sized circular buffering\n  * channel\n    - new module to define certain channel emulation objects\n    - new functionality includes carrier frequency/phase offsets,\n      (time-varying) multi-path, shadowing, and additive noise\n  * dotprod\n    - adding method to compute x^T * x of a vector (sum of squares)\n  * equalization\n    - improved interface for LMS and RLS equalizers\n    - simplified methods to support blind operation\n  * fec (forward error correctino)\n    - interleaver and packetizer moved from the framing to the fec module\n    - packetizer now includes data whitening\n  * fft (fast Fourier transform)\n    - general speed improvements for one-dimensional FFTs\n    - completely reimplemented spgram (spectral periodogram) objects to\n      include both complex and real-values amples with simpler interface\n    - reimplemented asgram (ASCII spectral periodogram) objects\n  * filter\n    - additional prototype create methods, block execution\n    - added new fftfilt family of objects to realize linear filter\n      with fast Fourier transforms\n    - interp family renamed to firinterp, new iirinterp family\n    - decim family renamed to firdecim, new iirdecim family\n    - add linear interpolation for arbitrary resamp output\n    - new multi-stage half-band resampler family\n    - symsync: improved stability, added rate adjustment to help pull in\n      sample rate offsets\n    - added autotests for validating performance of both the\n      resamp and msresamp objects\n  * framing\n    - added `framedatastats` object for counting statistics across different\n      framing objects (e.g. number of total bytes received)\n    - adding generic callback function definition for all framing\n      structures\n    - qpacketmodem: new object to easily combine modulating and encoding;\n      buffer of data in, modulated and encoded samples out\n    - qpilotgen/qpilotsync: new objects to add and synchronize pilot symbols\n      to modulated symbols to recover carrier frequency/phase, and gain\n    - framing objects: frame64, flexframe now use qpacketmodem, qpilotgen, and\n      qpilotsync objects for unified interface and vastly improved performance\n    - flexframe: vastly simplified interface\n    - qdetector: new family for pre-demodulator synchronizion and detection\n    - moved interleaver and packetizer objects to `fec` module\n    - symstream: new family for generating random stream of modulated samples\n    - msource: new family for generating multiple signals for a single source,\n      including tones, noise, modulated symbols\n    - symtrack: new family for tracking a stream of symbols and recovering\n      signal level, timing, carrier frequency/phase without pilots\n  * math\n    - new windowing methods (e.g. 7-term Blackman-harris window)\n  * matrix\n    - adding smatrix family of objects (sparse matrices)\n    - improving linear solver methods (roughly doubled speed)\n  * modem\n    - re-organizing internal linear modem code (no interface change)\n    - freqmod/freqdem: new interface, block-level execution for analog FM\n    - cpfskmod/cpfskdem: new family for generic non-linear continuous-phase\n      frequency-shift modulation (e.g. minimum-shift keying)\n    - fskmod/fskdem: new family for non-coherent frequency-shift keying\n      modulation, often with many samples per symbol (e.g. 256-FSK)\n  * multicarrier\n    - adding OFDM framing option for window tapering\n    - simplfying OFDM framing for generating preamble symbols (all\n      generated OFDM symbols are the same length)\n    - adding run-time option for debugging ofdmframesync\n    - adding method for initializing subcarriers with frequency range\n  * nco (numerically-controlled oscillator)\n    - general performance improvements, adding block-level execution\n  * optim\n    - gradsearch (gradient search) uses internal linesearch for\n      significant speed increase and better reliability\n    - gradsearch interface greatly simplified\n  * utility\n    - build no longer auto-generates tables at compile time (helps with cross\n      compilation)\n  * vector\n    - new module to simplify basic vector operations\n  * miscellany\n    - documentation moved from core repository to website\n    - global header file (`liquid.h`) include more structured source\n    - consistent naming of reset() methods for most objects\n\n## 1.2.0 - 2012-04-26\n\n  * dotprod\n    - leveraging SIMD extensions for vector operations (SSE2, SSE3)\n  * fft\n    - completely re-structured internal transform strategy including\n      Cooley-Tukey mixed-radix algorithm, Rader algorithm for FFTs of\n      prime length, and specific codelets for small-size transforms.\n  * math\n    - new modular arithmetic methods (prime factor, totient, etc.)\n  * modem\n    - new API creates linear modem objects with one argument, e.g.\n      LIQUID_MODEM_QAM16\n    - new type definitions for analog modems\n\n## 1.1.0 - 2011-12-23\n\n  * build\n    - simplifying build environment by explicitly defining object\n      dependencies (no longer auto-generated; much faster now)\n  * documentation\n    - new tutorials (ofdmflexframe)\n    - sections on new objects/methods (msresamp, gmsk filter design,\n      soft-decision demodulation)\n    - adding useful figures (polyfit-lagrange, symsync)\n    - adding BER performance plots for new FEC schemes\n    - adding BER performance plots for sqam32 and sqam128\n  * agc\n    - fixing scaling issues\n    - improving computation speed\n    - simplifying interface with a single, unified design model\n  * equalization\n    - adding support for decision-directed equalizers\n  * fec\n    - adding soft decoding (when available) for forward error-correction\n      schemes; generally improves performance by about 2 dB Eb/N0\n    - adding half-rate Golay(24,12) code\n    - adding SEC-DED codes: (22,16), (39,32), (72,64)\n  * filter\n    - firdes: adding Nyquist prototyping design method\n    - firdes: adding new GMSK receive filter design method\n    - interp: porting to efficient polyphase filterbank implementation,\n      adding prototype create() method\n    - adding multi-stage resampler for efficient decimation and\n      interpolation\n  * framing\n    - adding ofdmflexframe family of objects capable of defining which\n      subcarriers are nulls/pilots/data, and easily loading data into\n      frames. Very similar to 'flexframe' in usage.\n    - supporting soft packet decoding (interleaving, etc.)\n    - adding gmskframe generator and synchronizer object; simple,\n      reliable\n  * matrix\n    - adding Cholesky factorization A = R^T * R (for positive definite\n      matrices)\n    - adding conjugate gradient solver (for positive definite matrices)\n  * modem\n    - adding simple on/off keying (OOK) type\n    - adding 256-APSK type (6,18,32,36,46,54,64)\n    - adding 'square' (cross) 32-, 128-QAM types\n    - adding 'optimal' 64-, 128-, and 256-QAM constellations\n    - improved speed of most schemes' modulate/demodulate\n      implementations\n    - adding soft-decision (log-likelihood ratio) demodulation\n    - adding GMSK modulation/demodulation with improved filter design\n  * multicarrier\n    - ofdmframe: improving synchronization and reliability in\n      interference environments, enabling squelch, improving\n      equalization\n  * optim\n    - simplified interface to gradient search\n\n## [1.0.0] - 2011-04-29\n\n_First release._\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0419921875,
          "content": "Copyright (c) 2007 - 2016 Joseph Gaeddert\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.4677734375,
          "content": "\nliquid-dsp\n==========\n\nSoftware-Defined Radio Digital Signal Processing Library -\n[https://liquidsdr.org](https://liquidsdr.org)\n\n[![Core CI](https://github.com/jgaeddert/liquid-dsp/actions/workflows/core.yml/badge.svg)](https://github.com/jgaeddert/liquid-dsp/actions/workflows/core.yml)\n[![codecov](https://codecov.io/gh/jgaeddert/liquid-dsp/branch/master/graph/badge.svg?token=ht8VIhp302)](https://codecov.io/gh/jgaeddert/liquid-dsp)\n[![MIT License](https://img.shields.io/badge/license-MIT-blue.svg?style=flat)](https://choosealicense.com/licenses/mit/)\n[![Packaging status](https://repology.org/badge/tiny-repos/liquid-dsp.svg)](https://repology.org/project/liquid-dsp/versions)\n\nliquid-dsp is a free and open-source digital signal processing (DSP)\nlibrary designed specifically for software-defined radios on embedded\nplatforms. The aim is to provide a lightweight DSP library that does not\nrely on a myriad of external dependencies or proprietary and otherwise\ncumbersome frameworks. All signal processing elements are designed to be\nflexible, scalable, and dynamic, including filters, filter design,\noscillators, modems, synchronizers, complex mathematical operations, and\nmuch more.\n\n```c\n// get in, manipulate data, get out\n#include <liquid/liquid.h>\nint main() {\n    unsigned int M  = 4;     // interpolation factor\n    unsigned int m  = 12;    // filter delay [symbols]\n    float        As = 60.0f; // filter stop-band attenuation [dB]\n\n    // create interpolator from prototype\n    firinterp_crcf interp = firinterp_crcf_create_kaiser(M,m,As);\n    float complex x = 1.0f;  // input sample\n    float complex y[M];      // interpolated output buffer\n\n    // repeat on input sample data as needed\n    {\n        firinterp_crcf_execute(interp, x, y);\n    }\n\n    // destroy interpolator object\n    firinterp_crcf_destroy(interp);\n    return 0;\n}\n```\n\nFor more information, please refer to the\n[documentation](https://liquidsdr.org/doc) online.\n\n## Installation and Dependencies ##\n\nliquid-dsp only relies on `libc` and `libm` (standard C and math)\nlibraries to run; however liquid will take advantage of other libraries\n(such as [FFTW](http://www.fftw.org)) if they are available.\n\nIf you build from the Git repository you will also need to install autotools\nfor generating the `configure.sh` script (e.g.\n`brew install autoconf automake` on macOS,\n`sudo apt-get install automake autoconf` on Debian variants).\n\n### Installation ###\n\nThe recommended way to obtain the source code is to clone the entire\n[repository](https://github.com/jgaeddert/liquid-dsp) from\n[GitHub](https://github.com):\n\n    git clone git://github.com/jgaeddert/liquid-dsp.git\n\nBuilding and installing the main library is a simple as\n\n    ./bootstrap.sh\n    ./configure\n    make\n    sudo make install\n\nIf you are installing on Linux for the first time, you will also need\nto rebind your dynamic libraries with `sudo ldconfig` to make the\nshared object available.\nThis is not necessary on macOS.\n\nIf you decide that you want to remove the installed DSP library, simply\nrun\n\n    sudo make uninstall\n\nSeriously, I won't be offended.\n\n### Run all test scripts ###\n\nSource code validation is a critical step in any software library,\nparticularly for verifying the portability of code to different\nprocessors and platforms. Packaged with liquid-dsp are a number of\nautomatic test scripts to validate the correctness of the source code.\nThe test scripts are located under each module's `tests/` directory and\ntake the form of a C source file. liquid includes a framework for\ncompiling, linking, and running the tests, and can be invoked with the\nmake target `check`, viz.\n\n    make check\n\nThere are currently more than 110,000 checks to verify functional correctness.\nDrop me a line if these aren't running on your platform.\n\n### Testing Code Coverage ###\n\nIn addition to the full test suite, you can configure `gcc` to export symbol\nfiles to check for code coverage and then use `gcovr` to generate a full\nreport of precisely which lines are covered in the autotests. These symbol\nfiles aren't generated by default and need to be enabled at compile-time\nthrough a configure flag:\n\n    ./configure --enable-coverage\n\nRunning the tests and generating the report through `gcovr` can be invoked\nwith the `coverage` make target:\n\n    make coverage\n\n### Examples ###\n\nNearly all signal processing elements have a corresponding example in\nthe `examples/` directory.  Most example scripts generate an output\n`.m` file for plotting with [GNU octave](https://www.gnu.org/software/octave/)\nAll examples are built as stand-alone programs and can be compiled with\nthe make target `examples`:\n\n    make examples\n\nSometimes, however, it is useful to build one example individually.\nThis can be accomplished by directly targeting its binary\n(e.g. `make examples/modem_example`). The example then can be run at the\ncommand line, viz. `./examples/modem_example`.\n\n### Benchmarking tool ###\n\nPackaged with liquid are benchmarks to determine the speed each signal\nprocessing element can run on your machine. Initially the tool provides\nan estimate of the processor's clock frequency and will then estimate\nthe number of trials so that each benchmark will take between 50 and\n500 ms to run. You can build and run the benchmark program with the\nfollowing command:\n\n    make bench\n\n### C++\n\nCompiling and linking to C++ programs is straightforward.\nJust include `<complex>` before `<liquid/liquid.h>` and use \n`std::complex<float>` in favor of `float complex`.\nHere is the same example as the one above but in C++ instead of C:\n\n```c++\n// get in, manipulate data, get out\n#include <complex>\n#include <liquid/liquid.h>\nint main() {\n    unsigned int M  = 4;     // interpolation factor\n    unsigned int m  = 12;    // filter delay [symbols]\n    float        As = 60.0f; // filter stop-band attenuation [dB]\n\n    // create interpolator from prototype\n    firinterp_crcf interp = firinterp_crcf_create_kaiser(M,m,As);\n    std::complex<float> x = 1.0f;   // input sample\n    std::complex<float> y[M];       // interpolated output buffer\n\n    // repeat on input sample data as needed\n    {\n        firinterp_crcf_execute(interp, x, y);\n    }\n\n    // destroy interpolator object\n    firinterp_crcf_destroy(interp);\n    return 0;\n}\n```\n\n### PlatformIO ###\n\nInstall [platformio](https://platformio.org)\n(`brew install platformio` on macOS,\n`sudo -H python3 -m pip install -U platformio` on Linux).\nAdd `liquid-dsp` to your `platform.io` list of dependencies:\n\n```ini\n[env:native]\nplatform = native\nlib_deps = https://github.com/jgaeddert/liquid-dsp.git\n```\n\n## Available Modules ##\n\n  * _agc_: automatic gain control, received signal strength\n  * _audio_: source audio encoders/decoders: cvsd, filterbanks\n  * _buffer_: internal buffering, circular/static, ports (threaded)\n  * _channel_: additive noise, multi-path fading, carrier phase/frequency\n        offsets, timing phase/rate offsets\n  * _dotprod_: inner dot products (real, complex), vector sum of squares\n  * _equalization_: adaptive equalizers: least mean-squares, recursive\n        least squares, semi-blind\n  * _fec_: basic forward error correction codes including several\n        Hamming codes, single error correction/double error detection,\n        Golay block code, as well as several checksums and cyclic\n        redundancy checks, interleaving, soft decoding\n  * _fft_: fast Fourier transforms (arbitrary length), discrete sin/cos\n        transforms\n  * _filter_: finite/infinite impulse response, polyphase, hilbert,\n        interpolation, decimation, filter design, resampling, symbol\n        timing recovery\n  * _framing_: flexible framing structures for amazingly easy packet\n        software radio; dynamically adjust modulation and coding on the\n        fly with single- and multi-carrier framing structures\n  * _math_: transcendental functions not in the C standard library\n        (gamma, besseli, etc.), polynomial operations (curve-fitting,\n        root-finding, etc.)\n  * _matrix_: basic math, LU/QR/Cholesky factorization, inversion,\n        Gauss elimination, Gram-Schmidt decomposition, linear solver,\n        sparse matrix representation\n  * _modem_: modulate, demodulate, PSK, differential PSK, QAM, optimal\n        QAM, as well as analog and non-linear digital modulations GMSK)\n  * _multichannel_: filterbank channelizers, OFDM\n  * _nco_: numerically-controlled oscillator: mixing, frequency\n        synthesis, phase-locked loops\n  * _optim_: (non-linear optimization) Newton-Raphson, evoluationary\n        algorithms, gradient descent, line search\n  * _quantization_: analog/digital converters, compression/expansion\n  * _random_: (random number generators) uniform, exponential, gamma,\n        Nakagami-m, Gauss, Rice-K, Weibull\n  * _sequence_: linear feedback shift registers, complementary codes,\n        maximal-length sequences\n  * _utility_: useful miscellany, mostly bit manipulation (shifting,\n        packing, and unpacking of arrays)\n  * _vector_: generic vector operations\n\n### License ###\n\nliquid projects are released under the X11/MIT license.\nBy default, this project will try to link to [FFTW](http://www.fftw.org) if it\nis available on your build platform.\nBecause FFTW starting with version 1.3 is\n[licensed](http://www.fftw.org/faq/section1.html)\nunder the [GNU General Public License v2](http://www.fftw.org/doc/License-and-Copyright.html)\nthis unfortunately means that (and I'm clearly not a lawyer, here)\nyou cannot distribute `liquid-dsp` without also distributing the source code\nif you link to FFTW.\nThis is a similar situation with the classic\n[libfec](https://github.com/quiet/libfec)\nwhich uses the\n[GNU Lesser GPL](https://www.gnu.org/licenses/licenses.html#LGPL).\nFinally, `liquid-dsp` makes extensive use of GNU\n[autoconf](https://www.gnu.org/software/autoconf/),\n[automake](https://www.gnu.org/software/automake/),\nand related tools.\nThese are fantastic libraires with amazing functionality and their authors\nshould be lauded for their efforts.\nIn a similar vain, much the software I write for a living I give away for\nfree;\nhowever I believe in more permissive licenses to allow individuals the\nflexibility to use software with fewer limitations.\nIf these restrictions are not acceptible, `liquid-dsp` can be compiled and run\nwithout use of these external libraries, albeit a bit slower and with limited\nfunctionality.\n\nShort version: this code is copyrighted to me (Joseph D. Gaeddert),\nI give you full permission to do whatever you want with it except remove my\nname from the credits.\nSeriously, go nuts! but take caution when linking to other libraries with\ndifferent licenses.\nSee the [license](https://opensource.org/licenses/MIT) for specific terms.\n\n"
        },
        {
          "name": "TROUBLESHOOTING",
          "type": "blob",
          "size": 3.427734375,
          "content": "=========================================================================\n Troubleshooting\n=========================================================================\n\nHere is a list of common problems and potential solutions.\n\n=========================================================================\n Q1     When I try to compile I get an error like\n        \"internal compiler error: in gimplify_expr, at gimplify.c:7153\"\n\n A1(a)  This is a bug with gcc v4.5.1 and v4.5.2 dealing with complex\n        data type, e.g. \"float complex\"\n        (see: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=47150).\n        The best option is to update your compiler to a more recent\n        version, revert to an older version, or apply a patch.\n      \n A1(b)  Alternatively, if you are observing this error with ellip.c you\n        can probably comment out the offending lines; however this will\n        render the elliptic filter generator in liquid-dsp useless. This\n        is probably the fastest solution if you aren't concerned with\n        generating elliptic filters.\n\n=========================================================================\n Q2     When compiling I get linker errors:\n        /liquid-dsp/src/fec/src/fec_conv.c:210: undefined reference to `create_viterbi27'\n        /liquid-dsp/src/fec/src/fec_conv.c:210: undefined reference to `init_viterbi27'\n        /liquid-dsp/src/fec/src/fec_conv.c:210: undefined reference to `update_viterbi27_blk'\n        ...\n\n NOTE   Issue should be resolved after version 1.2.0 (commit 2f6ed1c9d39f4)\n\n A2     This is because the linker cannot find the libfec library.\n        The 'configure' script checks to make sure that the fec library\n        is available before compiling. If found the additional forward\n        error-correction codecs (e.g. convolutional) will be built and\n        used. If the headers and library are not found, then the\n        liquid-dsp build environment will ignore these. However if, for\n        example, the fec headers are found but the libfec is not, the\n        build script it will try to build the additional forward error-\n        correction codecs without linking to the proper libraries. This\n        is a bug with the current version of liquid-dsp. The quick fix\n        is to run \"./configure\" and then edit \"config.h\" to ignore the\n        fec headers.\n\n        Open \"config.h\" and change the line (approx. 13) from\n          #define HAVE_FEC_H 1\n        to\n          /* #undef HAVE_FEC_H */\n        This will disable building the additional FEC codecs (such as\n        convolutional) but will still build the internal codes (such as\n        the Hamming codes). Now run \"make\" as normal.\n\n=========================================================================\nQ3      When I try compiling on OS 10.9 I get the following error when trying\n        to run \"./configure\":\n\n        configure: error: Need standard c library!\n\n        or \n\n        configure: error: Could not use standard c library!\n\nA3      This is likely a result of using Apple's default build of gcc (LLVM\n        version 5.0) which by default uses extremely strict checking for\n        compiling. Because the script generated by configure is pretty sloppy,\n        LLVM coughs when trying to build it. The simple fix is to update the\n        repository and specify a different compiler by setting your\n        environment variable CC, viz\n\n        $ export CC=\"/usr/local/bin/gcc-4.8\"\n\n        I know this is a work-around; I'm working on a permanent fix.\n\n"
        },
        {
          "name": "autotest",
          "type": "tree",
          "content": null
        },
        {
          "name": "bench",
          "type": "tree",
          "content": null
        },
        {
          "name": "bootstrap.sh",
          "type": "blob",
          "size": 1.3095703125,
          "content": "#!/bin/sh\n# Copyright (c) 2007 - 2016 Joseph Gaeddert\n# \n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n# \n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n# \n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n\n# \n# bootstrap.sh\n#\n# This is the bootstrapping script to auto-generate a configure\n# script for checking build environments, etc.\n#\n\nrm -f config.cache aclocal.m4\naclocal\nautoconf\nautoheader\n#automake --foreign --add-missing\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 11.8974609375,
          "content": "# Copyright (c) 2007 - 2023 Joseph Gaeddert\n# \n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n# \n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n# \n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n\n# \n# liquid-dsp library configure\n# Process with autoconf to generate configure script\n#\n\nAC_INIT([liquid-dsp],[1.6],[joseph@liquidsdr.org])\nAC_CONFIG_SRCDIR([src/libliquid.c])\nAC_CONFIG_MACRO_DIR([scripts])\n\n# permit auxiliary scripts directory (e.g. config.sub, config.guess, install-sh)\nAC_CONFIG_AUX_DIR(scripts/)\n\n# Specify 'C' language\nAC_LANG(C)\n\n# uncomment the following line to reset \"CFLAGS\" variable; it defaults to '-g -O2'\n#: ${CFLAGS=\"\"}\n\n# Autoheader\nAH_TEMPLATE([LIQUID_FFTOVERRIDE],  [Force internal FFT even if libfftw is available])\nAH_TEMPLATE([LIQUID_SIMDOVERRIDE], [Force overriding of SIMD (use portable C code)])\nAH_TEMPLATE([LIQUID_SUPPRESS_ERROR_OUTPUT],[Suppress printing errors to stderr])\nAH_TEMPLATE([LIQUID_STRICT_EXIT],  [Enable strict program exit on error])\n\nAC_CONFIG_HEADERS([config.h])\nAH_TOP([\n#ifndef __LIQUID_CONFIG_H__\n#define __LIQUID_CONFIG_H__\n])\nAH_BOTTOM([\n#endif // __LIQUID_CONFIG_H__\n])\n\n# Configure options\n\nAC_ARG_ENABLE(debug-messages,\n    AS_HELP_STRING([--enable-debug-messages],[enable verbose debug messages (-DDEBUG)]),\n    [DEBUG_MSG_OPTION=\"-DDEBUG\"],\n    [DEBUG_MSG_OPTION=\"\"]\n)\n\nAC_ARG_ENABLE(simdoverride,\n    AS_HELP_STRING([--enable-simdoverride],[use portable C code for dotprod, etc. even if SIMD extensions are available]),\n    [AC_DEFINE(LIQUID_SIMDOVERRIDE)],\n    [],\n)\n\nAC_ARG_ENABLE(fftoverride,\n    AS_HELP_STRING([--enable-fftoverride],[use internal fft even if libfftw is available]),\n    [AC_DEFINE(LIQUID_FFTOVERRIDE)],\n    [],\n)\n\n# code coverage\nAC_ARG_ENABLE(coverage,\n    AS_HELP_STRING([--enable-coverage],[enable flags to test code coverage]),\n    [   # check that gcovr program is installed\n        AC_CHECK_PROG(HAVE_GCOVR,gcovr,yes)\n        AS_IF([test x\"$HAVE_GCOVR\" != x\"yes\"],\n              [AC_MSG_ERROR(Need gcovr with coverage option)],\n              [COVERAGE_OPTION=\"--coverage\"])],\n    [COVERAGE_OPTION=\"\"]\n)\n\nAC_ARG_ENABLE(suppress-errors,\n    AS_HELP_STRING([--enable-suppress-errors],[suppress printing errors to stderr]),\n    [AC_DEFINE(LIQUID_SUPPRESS_ERROR_OUTPUT)],\n    [],\n)\n\nAC_ARG_ENABLE(strict,\n    AS_HELP_STRING([--enable-strict],[use strict error handling at runtime]),\n    [AC_DEFINE(LIQUID_STRICT_EXIT)],\n    [],\n)\n\n# Check for necessary programs\nAC_PROG_CC\nAC_PROG_SED\nAC_PROG_GREP\nAC_PROG_INSTALL\nAC_PROG_RANLIB\n\n# Check for necessary libraries, library functions\nAC_FUNC_ERROR_AT_LINE\nAC_FUNC_MALLOC\nAC_FUNC_REALLOC\n\n# AC_CHECK_LIB (library, function, [action-if-found], [action-if-not-found], [other-libraries])\nAC_CHECK_LIB([c],[main],[],[AC_MSG_ERROR(Could not use standard C library)],   [])\nAC_CHECK_LIB([m],[main],[],[AC_MSG_ERROR(Could not use standard math library)],[])\n\n# AC_CHECK_FUNC(function, [action-if-found], [action-if-not-found])\nAC_CHECK_FUNCS([malloc realloc free memset memmove],[],\n               [AC_MSG_ERROR(Could not use memory allocation functions)])\nAC_CHECK_FUNCS([sinf cosf expf cargf cexpf crealf cimagf sqrtf],[],\n               [AC_MSG_ERROR(Could not use special math functions)],)\n\n# Check for necessary header files\nAC_CHECK_HEADERS([stdio.h stdlib.h complex.h string.h getopt.h sys/resource.h float.h inttypes.h limits.h stdlib.h string.h unistd.h],[],\n                 [AC_MSG_ERROR(Could not use standard headers)])\n\n# Check for optional header files, libraries, programs\nAC_CHECK_HEADERS(fec.h fftw3.h)\nAC_CHECK_LIB([fftw3f], [fftwf_plan_dft_1d], [],\n             [AC_MSG_WARN(fftw3 library useful but not required)],\n             [])\nAC_CHECK_LIB([fec], [create_viterbi27], [],\n             [AC_MSG_WARN(fec library useful but not required)],\n             [])\n\n# Checks for typedefs, structures, and compiler characteristics.\nAC_C_INLINE\nAC_TYPE_SIZE_T\nAC_TYPE_UINT32_T\nAC_TYPE_UINT8_T\n\n# Check size of certain variables\nAC_CHECK_SIZEOF(short int)\nAC_CHECK_SIZEOF(int)\nAC_CHECK_SIZEOF(long int)\nAC_CHECK_SIZEOF(long long int)\n\n# AX_GCC_ARCHFLAG([PORTABLE?], [ACTION-SUCCESS], [ACTION-FAILURE])\n# Try to guess the \"native\" architecture of the target to use with gcc's\n# -march or -mtune flags. Default success action adds $ax_cv_gcc_archflag to\n# $CFLAGS (sets to \"unknown\" on failure).\n#AX_GCC_ARCHFLAG([no],[],[])\n\n# get canonical target architecture\nAC_CANONICAL_TARGET\n\n# override SIMD\nif test \"${enable_simdoverride+set}\" = set; then\n    # portable C version\n    MLIBS_DOTPROD=\"src/dotprod/src/dotprod_cccf.o \\\n                   src/dotprod/src/dotprod_crcf.o \\\n                   src/dotprod/src/dotprod_rrrf.o \\\n                   src/dotprod/src/sumsq.o\"\n    ARCH_OPTION=\"\"\nelse\n    # Check canonical system\n    case $target_cpu in\n    i386|i486|i586|i686|x86|x86_64)\n        # check for MMX/SSE/AVX CPU extensions and intrinsics headers\n        #   MMX     :   mmintrin.h\n        #   SSE     :   xmmintrin.h\n        #   SSE2    :   emmintrin.h\n        #   SSE3    :   pmmintrin.h\n        #   SSSE3   :   tmmintrin.h\n        #   SSE4.1/2:   smmintrin.h\n        #   AVX     :   immintrin.h\n        #   AVX2    :   immintrin.h\n        #   AVX512  :   immintrin.h\n        AX_EXT\n\n        if [ test \"$ax_cv_have_avx512f_ext\" = yes ]; then\n            # AVX512 extensions\n            MLIBS_DOTPROD=\"src/dotprod/src/dotprod_cccf.avx512f.o \\\n                           src/dotprod/src/dotprod_crcf.avx512f.o \\\n                           src/dotprod/src/dotprod_rrrf.avx512f.o \\\n                           src/dotprod/src/sumsq.avx512f.o\"\n            ARCH_OPTION='-mavx512f'\n        elif [ test \"$ax_cv_have_avx2_ext\" = yes ]; then\n            # AVX2 extensions\n            MLIBS_DOTPROD=\"src/dotprod/src/dotprod_cccf.avx.o \\\n                           src/dotprod/src/dotprod_crcf.avx.o \\\n                           src/dotprod/src/dotprod_rrrf.avx.o \\\n                           src/dotprod/src/sumsq.avx.o\"\n            ARCH_OPTION='-mavx2'\n        elif [ test \"$ax_cv_have_avx_ext\" = yes ]; then\n            # AVX extensions\n            MLIBS_DOTPROD=\"src/dotprod/src/dotprod_cccf.avx.o \\\n                           src/dotprod/src/dotprod_crcf.avx.o \\\n                           src/dotprod/src/dotprod_rrrf.avx.o \\\n                           src/dotprod/src/sumsq.avx.o\"\n            ARCH_OPTION='-mavx'\n        elif [ test \"$ax_cv_have_sse41_ext\" = yes ]; then\n            # SSE4.1/2 extensions\n            MLIBS_DOTPROD=\"src/dotprod/src/dotprod_cccf.sse.o \\\n                           src/dotprod/src/dotprod_crcf.sse.o \\\n                           src/dotprod/src/dotprod_rrrf.sse.o \\\n                           src/dotprod/src/sumsq.sse.o\"\n            ARCH_OPTION='-msse4.1'\n        elif [ test \"$ax_cv_have_sse3_ext\" = yes ]; then\n            # SSE3 extensions\n            MLIBS_DOTPROD=\"src/dotprod/src/dotprod_cccf.sse.o \\\n                           src/dotprod/src/dotprod_crcf.sse.o \\\n                           src/dotprod/src/dotprod_rrrf.sse.o \\\n                           src/dotprod/src/sumsq.sse.o\"\n            ARCH_OPTION='-msse3'\n        elif [ test \"$ax_cv_have_sse2_ext\" = yes ]; then\n            # SSE2 extensions\n            MLIBS_DOTPROD=\"src/dotprod/src/dotprod_cccf.sse.o \\\n                           src/dotprod/src/dotprod_crcf.sse.o \\\n                           src/dotprod/src/dotprod_rrrf.sse.o \\\n                           src/dotprod/src/sumsq.sse.o\"\n            ARCH_OPTION='-msse2'\n        else\n            # portable C version\n            MLIBS_DOTPROD=\"src/dotprod/src/dotprod_cccf.o \\\n                           src/dotprod/src/dotprod_crcf.o \\\n                           src/dotprod/src/dotprod_rrrf.o \\\n                           src/dotprod/src/sumsq.o\"\n        fi;;\n    powerpc*)\n        MLIBS_DOTPROD=\"src/dotprod/src/dotprod_cccf.o \\\n                       src/dotprod/src/dotprod_rrrf.av.o \\\n                       src/dotprod/src/dotprod_crcf.av.o \\\n                       src/dotprod/src/sumsq.o\"\n        ARCH_OPTION=\"-fno-common -faltivec\";;\n    armv1*|armv2*|armv3*|armv4*|armv5*|armv6*)\n        # assume neon instructions are NOT available\n        MLIBS_DOTPROD=\"src/dotprod/src/dotprod_cccf.o \\\n                       src/dotprod/src/dotprod_crcf.o \\\n                       src/dotprod/src/dotprod_rrrf.o \\\n                       src/dotprod/src/sumsq.o\"\n        ARCH_OPTION=\"-ffast-math\";;\n    arm|armv7*|armv8*)\n        # assume neon instructions are available\n        # TODO: check for Neon availability\n\n        # ARM architecture : use neon extensions\n        MLIBS_DOTPROD=\"src/dotprod/src/dotprod_cccf.neon.o \\\n                       src/dotprod/src/dotprod_crcf.neon.o \\\n                       src/dotprod/src/dotprod_rrrf.neon.o \\\n                       src/dotprod/src/sumsq.o\"\n        case $target_os in\n        darwin*)\n            # M1 mac, ARM architecture : use neon extensions\n            ARCH_OPTION=\"-ffast-math\";;\n        *)\n            # TODO: check these flags\n            #ARCH_OPTION=\"-ffast-math -mcpu=cortex-a8 -mfloat-abi=softfp -mfpu=neon\";;\n            ARCH_OPTION=\"-ffast-math -mcpu=cortex-a7 -mfloat-abi=hard -mfpu=neon-vfpv4\";;\n        esac;;\n    *)\n        # unknown architecture : use portable C version\n        MLIBS_DOTPROD=\"src/dotprod/src/dotprod_cccf.o \\\n                       src/dotprod/src/dotprod_crcf.o \\\n                       src/dotprod/src/dotprod_rrrf.o \\\n                       src/dotprod/src/sumsq.o\"\n        ARCH_OPTION=\"\";;\n    esac\nfi\n\n\n# for now all vector operations are portable C versions\nMLIBS_VECTOR=\"src/vector/src/vectorf_add.port.o   \\\n              src/vector/src/vectorf_norm.port.o  \\\n              src/vector/src/vectorf_mul.port.o   \\\n              src/vector/src/vectorf_trig.port.o  \\\n              src/vector/src/vectorcf_add.port.o  \\\n              src/vector/src/vectorcf_norm.port.o \\\n              src/vector/src/vectorcf_mul.port.o  \\\n              src/vector/src/vectorcf_trig.port.o\"\n\ncase $target_os in\ndarwin*)\n    AN_MAKEVAR([LIBTOOL], [AC_PROG_LIBTOOL])\n    AN_PROGRAM([libtool], [AC_PROG_LIBTOOL])\n    AC_DEFUN([AC_PROG_LIBTOOL], [AC_CHECK_TOOL(LIBTOOL, libtool, :)])\n    AC_PROG_LIBTOOL\n\n    AR_LIB=ar\t    # archive extension\n    SH_LIB=dylib    # shared library extension\n    REBIND=\"\"\n    ;;\n*)\n    AN_MAKEVAR([AR], [AC_PROG_AR])\n    AN_PROGRAM([ar], [AC_PROG_AR])\n    AC_DEFUN([AC_PROG_AR], [AC_CHECK_TOOL(AR, ar, :)])\n    AC_PROG_AR\n\n    AR_LIB=a\t    # archive extension\n    SH_LIB=so\t    # shared library extension\n    REBIND=ldconfig\n    ;;\nesac\n\n#\n# autoconf variable substitutions\n#\nAC_SUBST(LIBS)                      # shared libraries (-lc, -lm, etc.)\nAC_SUBST(MLIBS_DOTPROD)             # \nAC_SUBST(MLIBS_VECTOR)              #\n\nAC_SUBST(AR_LIB)                    # archive library\nAC_SUBST(SH_LIB)                    # output shared library target\nAC_SUBST(REBIND)                    # rebinding tool (e.g. ldconfig)\nAC_SUBST(ARCH_OPTION)               # compiler architecture option\n\nAC_SUBST(DEBUG_MSG_OPTION)          # debug messages option (.e.g -DDEBUG)\nAC_SUBST(COVERAGE_OPTION)           # source code coverage option (e.g. -fprofile-arcs -ftest-coverage)\nAC_SUBST(CLIB)                      # C library linkage (e.g. '-lc')\n\nAC_CONFIG_FILES([makefile])\nAC_OUTPUT\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "library.json",
          "type": "blob",
          "size": 1.11328125,
          "content": "{\n  \"name\": \"liquid-dsp\",\n  \"version\": \"1.6.0\",\n  \"description\": \"Software-defined radio digital signal processing library\",\n  \"homepage\": \"https://liquidsdr.org\",\n  \"keywords\":\n  [\n      \"digital signal processing\",\"DSP\",\n      \"software-defined radio\", \"SDR\",\n      \"Fourier transform,\",\"FFT\",\n      \"filter\",\"resample\",\"interpolate\",\"decimate\",\n      \"error correction\",\"modulation\"\n  ],\n  \"repository\":\n  {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/jgaeddert/liquid-dsp.git\"\n  },\n  \"authors\":\n  {\n    \"name\": \"Joseph D. Gaeddert\",\n    \"email\": \"joseph@liquidsdr.org\",\n    \"url\": \"https://liquidsdr.org/colophon\",\n    \"maintainer\": true\n  },\n  \"license\": \"MIT\",\n  \"build\":\n  {\n    \"extraScript\": \"scripts/generate_headers.py\",\n    \"flags\":\n    [\n        \"-I.\",\n        \"-Wno-deprecated-declarations\"\n    ],\n    \"srcFilter\":\n    [\n        \"+<*.c>\",\n        \"+<*/src/*.c>\",\n        \"-<.git/>\",\n        \"-<*/src/*.proto.c>\",\n        \"-<*/src/*.av.c>\",\n        \"-<*/src/*.neon.c>\",\n        \"-<*/src/*.sse.c>\",\n        \"-<*/src/*.avx.c>\",\n        \"-<*/src/*.avx512f.c>\",\n        \"-<*/src/*.x86.s>\"\n    ]\n  },\n  \"headers\":\"liquid.h\"\n}\n"
        },
        {
          "name": "makefile.in",
          "type": "blob",
          "size": 60.42578125,
          "content": "# Copyright (c) 2007 - 2024 Joseph Gaeddert\n# \n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n# \n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n# \n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n\n# \n# Makefile for liquid-dsp libraries\n#\n# Targets:\n#    all            : dynamic shared-library object (e.g. libliquid.so)\n#    install        : install the dynamic shared library object and headers\n#    uninstall      : uninstall the library and header file(s)\n#    clean          : clean all targets (bench, check, examples, etc)\n#    distclean      : removes everything except the originally distributed files\n#    check          : build and run autotest program\n#    bench          : build and run benchmarking program\n#    examples       : build all examples\n#    sandbox        : build all sandbox examples\n#    programs       : build all programs, but don't run anything\n#    world          : build absolutely everything (but don't install)\n#\n#    clean-modules  : clean all modules\n#    clean-examples : clean examples programs\n#    clean-sandbox  : clean sandbox programs\n#    clean-check    : clean autotest program\n#    clean-bench    : clean benchmark program\n#\n\n# autoconf initialization macros\nNAME\t\t:= @PACKAGE_NAME@\nVERSION\t\t:= @PACKAGE_VERSION@\nBUGREPORT\t:= @PACKAGE_BUGREPORT@\nAR_LIB\t\t:= @AR_LIB@\nSH_LIB\t\t:= @SH_LIB@\nSOVERSION\t:= 1\n\n# paths\nprefix\t\t:= @prefix@\nexec_prefix\t:= @exec_prefix@\nVPATH\t\t:= @srcdir@\nsrcdir\t\t:= @srcdir@\nlibdir\t\t:= @libdir@\ninclude_dirs\t:= . ./include\n\n# programs\nCC\t\t:= @CC@\nCXX\t\t:= g++\nMV\t\t:= mv -f\nRM\t\t:= rm -f\nSED\t\t:= @SED@\nGREP\t\t:= @GREP@\nAR\t\t:= @AR@\nLIBTOOL\t\t:= @LIBTOOL@\nRANLIB\t\t:= @RANLIB@\n\n# flags\nINCLUDE_CFLAGS\t= $(addprefix -I,$(include_dirs))\nCOVERAGE_FLAGS  = @COVERAGE_OPTION@ # dynamic library linker needs separate flag\nCONFIG_CFLAGS\t= @CFLAGS@ @DEBUG_MSG_OPTION@ @ARCH_OPTION@ ${COVERAGE_FLAGS}\nCPPFLAGS\t= @CPPFLAGS@ $(INCLUDE_CFLAGS)\nCFLAGS\t\t= $(CONFIG_CFLAGS) -Wall -fPIC -Wno-deprecated -Wno-deprecated-declarations\nCXXFLAGS\t= $(CFLAGS) -std=c++14 -Wno-return-type-c-linkage\nLDFLAGS\t\t= @LDFLAGS@\nLIBS\t\t= @LIBS@\nPATHSEP\t\t= /\n\n# \n# liquid headers\n#\nheaders_install\t:= liquid.h\nheaders\t\t:= $(headers_install) liquid.internal.h\ninclude_headers\t:= $(addprefix include/,$(headers))\n\n\n## \n## liquid-dsp modules\n##\n\nall:\n\n# additional targets to clean\nextra_clean :=\n\n# additional autotest objects\nautotest_extra_obj :=\n\n# additional benchmark objects\nbenchmark_extra_obj :=\n\n#\n# MODULE : agc - automatic gain control\n#\n\n# object files\nagc_objects =\t\t\t\t\t\t\t\\\n\tsrc/agc/src/agc_crcf.o\t\t\t\t\t\\\n\tsrc/agc/src/agc_rrrf.o\t\t\t\t\t\\\n\nagc_prototypes :=\t\t\t\t\t\t\\\n\tsrc/agc/src/agc.proto.c\t\t\t\t\t\\\n\n# explicit targets and dependencies\nsrc/agc/src/agc_crcf.o : %.o : %.c $(include_headers) $(agc_prototypes)\nsrc/agc/src/agc_rrrf.o : %.o : %.c $(include_headers) $(agc_prototypes)\n\n# autotests\nagc_autotests :=\t\t\t\t\t\t\\\n\tsrc/agc/tests/agc_crcf_autotest.c\t\t\t\\\n\n# benchmarks\nagc_benchmarks :=\t\t\t\t\t\t\\\n\tsrc/agc/bench/agc_crcf_benchmark.c\t\t\t\\\n\n#\n# MODULE : audio\n#\n\n# described below\naudio_objects :=\t\t\t\t\t\t\\\n\tsrc/audio/src/cvsd.o\t\t\t\t\t\\\n\nsrc/cvsd/src/cvsd.o : %.o : %.c $(include_headers)\n\n\naudio_autotests :=\t\t\t\t\t\t\\\n\tsrc/audio/tests/cvsd_autotest.c\t\t\t\t\\\n\naudio_benchmarks :=\t\t\t\t\t\t\\\n\tsrc/audio/bench/cvsd_benchmark.c\t\t\t\\\n\n\n# \n# MODULE : buffer\n# \n\nbuffer_objects :=\t\t\t\t\t\t\\\n\tsrc/buffer/src/bufferf.o\t\t\t\t\\\n\tsrc/buffer/src/buffercf.o\t\t\t\t\\\n\n# src/buffer/src/buffer.proto.c\nbuffer_prototypes :=\t\t\t\t\t\t\\\n\tsrc/buffer/src/cbuffer.proto.c\t\t\t\t\\\n\tsrc/buffer/src/wdelay.proto.c\t\t\t\t\\\n\tsrc/buffer/src/window.proto.c\t\t\t\t\\\n\nsrc/buffer/src/bufferf.o  : %.o : %.c $(include_headers) $(buffer_prototypes)\nsrc/buffer/src/buffercf.o : %.o : %.c $(include_headers) $(buffer_prototypes)\n\n\nbuffer_autotests :=\t\t\t\t\t\t\\\n\tsrc/buffer/tests/cbuffer_autotest.c\t\t\t\\\n\tsrc/buffer/tests/wdelay_autotest.c\t\t\t\\\n\tsrc/buffer/tests/buffer_window_autotest.c\t\t\t\\\n\nbuffer_benchmarks :=\t\t\t\t\t\t\\\n\tsrc/buffer/bench/cbuffercf_benchmark.c\t\t\t\\\n\tsrc/buffer/bench/window_push_benchmark.c\t\t\\\n\tsrc/buffer/bench/window_read_benchmark.c\t\t\\\n\n# \n# MODULE : channel\n#\n\nchannel_objects :=\t\t\t\t\t\t\\\n\tsrc/channel/src/channel_cccf.o\t\t\t\t\\\n\nchannel_prototypes :=\t\t\t\t\t\t\\\n\tsrc/channel/src/channel.proto.c\t\t\t\t\\\n\tsrc/channel/src/tvmpch.proto.c\t\t\t\t\\\n\nsrc/channel/src/channel_cccf.o : %.o : %.c $(include_headers) $(channel_prototypes)\n\nchannel_autotests :=\t\t\t\t\t\t\\\n\tsrc/channel/tests/channel_copy_autotest.c\t\t\\\n\tsrc/channel/tests/tvmpch_copy_autotest.c\t\t\\\n\t\n#src/channel/tests/channel_cccf_autotest.c\n\nchannel_benchmarks :=\t\t\t\t\t\t\\\n\n#src/channel/bench/channel_cccf_benchmark.c\n\n# \n# MODULE : dotprod\n#\ndotprod_objects :=\t\t\t\t\t\t\\\n\t@MLIBS_DOTPROD@\t\t\t\t\t\t\\\n\nsrc/dotprod/src/dotprod_cccf.o : %.o : %.c $(include_headers) src/dotprod/src/dotprod.proto.c\nsrc/dotprod/src/dotprod_crcf.o : %.o : %.c $(include_headers) src/dotprod/src/dotprod.proto.c\nsrc/dotprod/src/dotprod_rrrf.o : %.o : %.c $(include_headers) src/dotprod/src/dotprod.proto.c\nsrc/dotprod/src/sumsq.o : %.o : %.c $(include_headers)\n\n# specific machine architectures\n\n# AltiVec\nsrc/dotprod/src/dotprod_rrrf.av.o : %.o : %.c $(include_headers)\n\n# MMX/SSE2\nsrc/dotprod/src/dotprod_rrrf.mmx.o : %.o : %.c $(include_headers)\nsrc/dotprod/src/dotprod_crcf.mmx.o : %.o : %.c $(include_headers)\nsrc/dotprod/src/dotprod_cccf.mmx.o : %.o : %.c $(include_headers)\n\nsrc/dotprod/src/sumsq.mmx.o : %.o : %.c $(include_headers)\n\n# SSE4.1/2\nsrc/dotprod/src/dotprod_rrrf.sse4.o : %.o : %.c $(include_headers)\n\n# AVX\nsrc/dotprod/src/sumsq.avx.o : %.o : %.c $(include_headers)\n\n# ARM Neon\nsrc/dotprod/src/dotprod_rrrf.neon.o : %.o : %.c $(include_headers)\nsrc/dotprod/src/dotprod_crcf.neon.o : %.o : %.c $(include_headers)\nsrc/dotprod/src/dotprod_cccf.neon.o : %.o : %.c $(include_headers)\n\ndotprod_autotests :=\t\t\t\t\t\t\\\n\tsrc/dotprod/tests/dotprod_rrrf_autotest.c\t\t\\\n\tsrc/dotprod/tests/dotprod_crcf_autotest.c\t\t\\\n\tsrc/dotprod/tests/dotprod_cccf_autotest.c\t\t\\\n\tsrc/dotprod/tests/sumsqf_autotest.c\t\t\t\\\n\tsrc/dotprod/tests/sumsqcf_autotest.c\t\t\t\\\n\ndotprod_benchmarks :=\t\t\t\t\t\t\\\n\tsrc/dotprod/bench/dotprod_cccf_benchmark.c\t\t\\\n\tsrc/dotprod/bench/dotprod_crcf_benchmark.c\t\t\\\n\tsrc/dotprod/bench/dotprod_rrrf_benchmark.c\t\t\\\n\tsrc/dotprod/bench/sumsqf_benchmark.c\t\t\t\\\n\tsrc/dotprod/bench/sumsqcf_benchmark.c\t\t\t\\\n\n# \n# MODULE : equalization\n#\nequalization_objects :=\t\t\t\t\t\t\\\n\tsrc/equalization/src/equalizer_cccf.o\t\t\t\\\n\tsrc/equalization/src/equalizer_rrrf.o\t\t\t\\\n\nequalization_prototypes :=\t\t\t\t\t\\\n\tsrc/equalization/src/eqlms.proto.c\t\t\t\\\n\tsrc/equalization/src/eqrls.proto.c\t\t\t\\\n\n$(equalization_objects) : %.o : %.c $(include_headers) $(equalization_prototypes)\n\n\n# autotests\nequalization_autotests :=\t\t\t\t\t\\\n\tsrc/equalization/tests/eqlms_cccf_autotest.c\t\t\\\n\tsrc/equalization/tests/eqrls_rrrf_autotest.c\t\t\\\n\n\n# benchmarks\nequalization_benchmarks :=\t\t\t\t\t\\\n\tsrc/equalization/bench/eqlms_cccf_benchmark.c\t\t\\\n\tsrc/equalization/bench/eqrls_cccf_benchmark.c\t\t\\\n\n# \n# MODULE : fec - forward error-correction\n#\nfec_objects :=\t\t\t\t\t\t\t\\\n\tsrc/fec/src/crc.o\t\t\t\t\t\\\n\tsrc/fec/src/fec.o\t\t\t\t\t\\\n\tsrc/fec/src/fec_conv.o\t\t\t\t\t\\\n\tsrc/fec/src/fec_conv_poly.o\t\t\t\t\\\n\tsrc/fec/src/fec_conv_pmatrix.o\t\t\t\t\\\n\tsrc/fec/src/fec_conv_punctured.o\t\t\t\\\n\tsrc/fec/src/fec_golay2412.o\t\t\t\t\\\n\tsrc/fec/src/fec_hamming74.o\t\t\t\t\\\n\tsrc/fec/src/fec_hamming84.o\t\t\t\t\\\n\tsrc/fec/src/fec_hamming128.o\t\t\t\t\\\n\tsrc/fec/src/fec_hamming1511.o\t\t\t\t\\\n\tsrc/fec/src/fec_hamming3126.o\t\t\t\t\\\n\tsrc/fec/src/fec_hamming128_gentab.o\t\t\t\\\n\tsrc/fec/src/fec_pass.o\t\t\t\t\t\\\n\tsrc/fec/src/fec_rep3.o\t\t\t\t\t\\\n\tsrc/fec/src/fec_rep5.o\t\t\t\t\t\\\n\tsrc/fec/src/fec_rs.o\t\t\t\t\t\\\n\tsrc/fec/src/fec_secded2216.o\t\t\t\t\\\n\tsrc/fec/src/fec_secded3932.o\t\t\t\t\\\n\tsrc/fec/src/fec_secded7264.o\t\t\t\t\\\n\tsrc/fec/src/interleaver.o\t\t\t\t\\\n\tsrc/fec/src/packetizer.o\t\t\t\t\\\n\tsrc/fec/src/sumproduct.o\t\t\t\t\\\n\n\n# list explicit targets and dependencies here\n$(fec_objects) : %.o : %.c $(include_headers)\n\n# autotests\nfec_autotests :=\t\t\t\t\t\t\\\n\tsrc/fec/tests/crc_autotest.c\t\t\t\t\\\n\tsrc/fec/tests/fec_autotest.c\t\t\t\t\\\n\tsrc/fec/tests/fec_config_autotest.c\t\t\t\\\n\tsrc/fec/tests/fec_copy_autotest.c\t\t\t\\\n\tsrc/fec/tests/fec_soft_autotest.c\t\t\t\\\n\tsrc/fec/tests/fec_golay2412_autotest.c\t\t\t\\\n\tsrc/fec/tests/fec_hamming74_autotest.c\t\t\t\\\n\tsrc/fec/tests/fec_hamming84_autotest.c\t\t\t\\\n\tsrc/fec/tests/fec_hamming128_autotest.c\t\t\t\\\n\tsrc/fec/tests/fec_hamming1511_autotest.c\t\t\\\n\tsrc/fec/tests/fec_hamming3126_autotest.c\t\t\\\n\tsrc/fec/tests/fec_reedsolomon_autotest.c\t\t\\\n\tsrc/fec/tests/fec_rep3_autotest.c\t\t\t\\\n\tsrc/fec/tests/fec_rep5_autotest.c\t\t\t\\\n\tsrc/fec/tests/fec_secded2216_autotest.c\t\t\t\\\n\tsrc/fec/tests/fec_secded3932_autotest.c\t\t\t\\\n\tsrc/fec/tests/fec_secded7264_autotest.c\t\t\t\\\n\tsrc/fec/tests/interleaver_autotest.c\t\t\t\\\n\tsrc/fec/tests/packetizer_copy_autotest.c\t\t\\\n\tsrc/fec/tests/packetizer_autotest.c\t\t\t\\\n\n\n# benchmarks\nfec_benchmarks :=\t\t\t\t\t\t\\\n\tsrc/fec/bench/crc_benchmark.c\t\t\t\t\\\n\tsrc/fec/bench/fec_encode_benchmark.c\t\t\t\\\n\tsrc/fec/bench/fec_decode_benchmark.c\t\t\t\\\n\tsrc/fec/bench/fecsoft_decode_benchmark.c\t\t\\\n\tsrc/fec/bench/sumproduct_benchmark.c\t\t\t\\\n\tsrc/fec/bench/interleaver_benchmark.c\t\t\t\\\n\tsrc/fec/bench/packetizer_decode_benchmark.c\t\t\\\n\n# \n# MODULE : fft - fast Fourier transforms, discrete sine/cosine transforms, etc.\n#\n\nfft_objects :=\t\t\t\t\t\t\t\\\n\tsrc/fft/src/fftf.o\t\t\t\t\t\\\n\tsrc/fft/src/spgramcf.o\t\t\t\t\t\\\n\tsrc/fft/src/spgramf.o\t\t\t\t\t\\\n\tsrc/fft/src/fft_utilities.o\t\t\t\t\\\n\n# explicit targets and dependencies\nfft_prototypes :=\t\t\t\t\t\t\\\n\tsrc/fft/src/fft_common.proto.c\t\t\t\t\\\n\tsrc/fft/src/fft_dft.proto.c\t\t\t\t\\\n\tsrc/fft/src/fft_radix2.proto.c\t\t\t\t\\\n\tsrc/fft/src/fft_mixed_radix.proto.c\t\t\t\\\n\tsrc/fft/src/fft_rader.proto.c\t\t\t\t\\\n\tsrc/fft/src/fft_rader2.proto.c\t\t\t\t\\\n\tsrc/fft/src/fft_r2r_1d.proto.c\t\t\t\t\\\n\nsrc/fft/src/fftf.o          : %.o : %.c $(include_headers) $(fft_prototypes)\nsrc/fft/src/asgram.o        : %.o : %.c $(include_headers)\nsrc/fft/src/dct.o           : %.o : %.c $(include_headers)\nsrc/fft/src/fftf.o          : %.o : %.c $(include_headers)\nsrc/fft/src/fft_utilities.o : %.o : %.c $(include_headers)\nsrc/fft/src/mdct.o          : %.o : %.c $(include_headers)\nsrc/fft/src/spgramcf.o      : %.o : %.c $(include_headers) src/fft/src/asgram.proto.c src/fft/src/spgram.proto.c src/fft/src/spwaterfall.proto.c\nsrc/fft/src/spgramf.o       : %.o : %.c $(include_headers) src/fft/src/asgram.proto.c src/fft/src/spgram.proto.c src/fft/src/spwaterfall.proto.c\n\n# fft autotest scripts\nfft_autotests :=\t\t\t\t\t\t\\\n\tsrc/fft/tests/asgram_autotest.c\t\t\t\t\\\n\tsrc/fft/tests/fft_small_autotest.c\t\t\t\\\n\tsrc/fft/tests/fft_radix2_autotest.c\t\t\t\\\n\tsrc/fft/tests/fft_composite_autotest.c\t\t\t\\\n\tsrc/fft/tests/fft_prime_autotest.c\t\t\t\\\n\tsrc/fft/tests/fft_r2r_autotest.c\t\t\t\\\n\tsrc/fft/tests/fft_shift_autotest.c\t\t\t\\\n\tsrc/fft/tests/spgram_autotest.c\t\t\t\t\\\n\tsrc/fft/tests/spwaterfall_autotest.c\t\t\t\\\n\n# additional autotest objects\nautotest_extra_obj +=\t\t\t\t\t\t\\\n\tsrc/fft/tests/fft_runtest.o\t\t\t\t\\\n\tsrc/fft/tests/data/fft_data_2.o\t\t\t\t\\\n\tsrc/fft/tests/data/fft_data_3.o\t\t\t\t\\\n\tsrc/fft/tests/data/fft_data_4.o\t\t\t\t\\\n\tsrc/fft/tests/data/fft_data_5.o\t\t\t\t\\\n\tsrc/fft/tests/data/fft_data_6.o\t\t\t\t\\\n\tsrc/fft/tests/data/fft_data_7.o\t\t\t\t\\\n\tsrc/fft/tests/data/fft_data_8.o\t\t\t\t\\\n\tsrc/fft/tests/data/fft_data_9.o\t\t\t\t\\\n\tsrc/fft/tests/data/fft_data_10.o\t\t\t\\\n\tsrc/fft/tests/data/fft_data_16.o\t\t\t\\\n\tsrc/fft/tests/data/fft_data_17.o\t\t\t\\\n\tsrc/fft/tests/data/fft_data_20.o\t\t\t\\\n\tsrc/fft/tests/data/fft_data_21.o\t\t\t\\\n\tsrc/fft/tests/data/fft_data_22.o\t\t\t\\\n\tsrc/fft/tests/data/fft_data_24.o\t\t\t\\\n\tsrc/fft/tests/data/fft_data_26.o\t\t\t\\\n\tsrc/fft/tests/data/fft_data_30.o\t\t\t\\\n\tsrc/fft/tests/data/fft_data_32.o\t\t\t\\\n\tsrc/fft/tests/data/fft_data_35.o\t\t\t\\\n\tsrc/fft/tests/data/fft_data_36.o\t\t\t\\\n\tsrc/fft/tests/data/fft_data_43.o\t\t\t\\\n\tsrc/fft/tests/data/fft_data_48.o\t\t\t\\\n\tsrc/fft/tests/data/fft_data_63.o\t\t\t\\\n\tsrc/fft/tests/data/fft_data_64.o\t\t\t\\\n\tsrc/fft/tests/data/fft_data_79.o\t\t\t\\\n\tsrc/fft/tests/data/fft_data_92.o\t\t\t\\\n\tsrc/fft/tests/data/fft_data_96.o\t\t\t\\\n\tsrc/fft/tests/data/fft_data_120.o\t\t\t\\\n\tsrc/fft/tests/data/fft_data_130.o\t\t\t\\\n\tsrc/fft/tests/data/fft_data_157.o\t\t\t\\\n\tsrc/fft/tests/data/fft_data_192.o\t\t\t\\\n\tsrc/fft/tests/data/fft_data_317.o\t\t\t\\\n\tsrc/fft/tests/data/fft_data_509.o\t\t\t\\\n\tsrc/fft/tests/data/fft_r2rdata_8.o\t\t\t\\\n\tsrc/fft/tests/data/fft_r2rdata_27.o\t\t\t\\\n\tsrc/fft/tests/data/fft_r2rdata_32.o\t\t\t\\\n\n# fft benchmark scripts\nfft_benchmarks :=\t\t\t\t\t\t\\\n\tsrc/fft/bench/fft_composite_benchmark.c\t\t\t\\\n\tsrc/fft/bench/fft_prime_benchmark.c\t\t\t\\\n\tsrc/fft/bench/fft_radix2_benchmark.c\t\t\t\\\n\tsrc/fft/bench/fft_r2r_benchmark.c\t\t\t\\\n\tsrc/fft/bench/spgramcf_benchmark.c\t\t\t\\\n\n# additional benchmark objects\nbenchmark_extra_obj :=\t\t\t\t\t\t\\\n\tsrc/fft/bench/fft_runbench.o\t\t\t\t\\\n\n#\n# MODULE : filter\n#\n\nfilter_objects :=\t\t\t\t\t\t\\\n\tsrc/filter/src/bessel.o\t\t\t\t\t\\\n\tsrc/filter/src/butter.o\t\t\t\t\t\\\n\tsrc/filter/src/cheby1.o\t\t\t\t\t\\\n\tsrc/filter/src/cheby2.o\t\t\t\t\t\\\n\tsrc/filter/src/ellip.o\t\t\t\t\t\\\n\tsrc/filter/src/filter_rrrf.o\t\t\t\t\\\n\tsrc/filter/src/filter_crcf.o\t\t\t\t\\\n\tsrc/filter/src/filter_cccf.o\t\t\t\t\\\n\tsrc/filter/src/firdes.o\t\t\t\t\t\\\n\tsrc/filter/src/firdespm.o\t\t\t\t\\\n\tsrc/filter/src/firdespm_halfband.o\t\t\t\\\n\tsrc/filter/src/fnyquist.o\t\t\t\t\\\n\tsrc/filter/src/gmsk.o\t\t\t\t\t\\\n\tsrc/filter/src/group_delay.o\t\t\t\t\\\n\tsrc/filter/src/hM3.o\t\t\t\t\t\\\n\tsrc/filter/src/iirdes.pll.o\t\t\t\t\\\n\tsrc/filter/src/iirdes.o\t\t\t\t\t\\\n\tsrc/filter/src/lpc.o\t\t\t\t\t\\\n\tsrc/filter/src/rcos.o\t\t\t\t\t\\\n\tsrc/filter/src/rkaiser.o\t\t\t\t\\\n\tsrc/filter/src/rrcos.o\t\t\t\t\t\\\n\n\n# list explicit targets and dependencies here\nfilter_prototypes :=\t\t\t\t\t\t\\\n\tsrc/filter/src/autocorr.proto.c\t\t\t\t\\\n\tsrc/filter/src/dds.proto.c\t\t\t\t\\\n\tsrc/filter/src/fdelay.proto.c\t\t\t\t\\\n\tsrc/filter/src/fftfilt.proto.c\t\t\t\t\\\n\tsrc/filter/src/firdecim.proto.c\t\t\t\t\\\n\tsrc/filter/src/firfarrow.proto.c\t\t\t\\\n\tsrc/filter/src/firfilt.proto.c\t\t\t\t\\\n\tsrc/filter/src/firhilb.proto.c\t\t\t\t\\\n\tsrc/filter/src/firinterp.proto.c\t\t\t\\\n\tsrc/filter/src/firpfb.proto.c\t\t\t\t\\\n\tsrc/filter/src/iirdecim.proto.c\t\t\t\t\\\n\tsrc/filter/src/iirfilt.proto.c\t\t\t\t\\\n\tsrc/filter/src/iirfiltsos.proto.c\t\t\t\\\n\tsrc/filter/src/iirhilb.proto.c\t\t\t\t\\\n\tsrc/filter/src/iirinterp.proto.c\t\t\t\\\n\tsrc/filter/src/msresamp.proto.c\t\t\t\t\\\n\tsrc/filter/src/msresamp2.proto.c\t\t\t\\\n\tsrc/filter/src/ordfilt.proto.c\t\t\t\t\\\n\tsrc/filter/src/rresamp.proto.c\t\t\t\t\\\n\tsrc/filter/src/resamp.fixed.proto.c\t\t\t\\\n\tsrc/filter/src/resamp2.proto.c\t\t\t\t\\\n\tsrc/filter/src/symsync.proto.c\t\t\t\t\\\n\nsrc/filter/src/bessel.o      : %.o : %.c $(include_headers)\nsrc/filter/src/bessel.o      : %.o : %.c $(include_headers)\nsrc/filter/src/butter.o      : %.o : %.c $(include_headers)\nsrc/filter/src/cheby1.o      : %.o : %.c $(include_headers)\nsrc/filter/src/cheby2.o      : %.o : %.c $(include_headers)\nsrc/filter/src/ellip.o       : %.o : %.c $(include_headers)\nsrc/filter/src/filter_rrrf.o : %.o : %.c $(include_headers) $(filter_prototypes)\nsrc/filter/src/filter_crcf.o : %.o : %.c $(include_headers) $(filter_prototypes)\nsrc/filter/src/filter_cccf.o : %.o : %.c $(include_headers) $(filter_prototypes)\nsrc/filter/src/firdes.o      : %.o : %.c $(include_headers)\nsrc/filter/src/firdespm.o    : %.o : %.c $(include_headers)\nsrc/filter/src/group_delay.o : %.o : %.c $(include_headers)\nsrc/filter/src/hM3.o         : %.o : %.c $(include_headers)\nsrc/filter/src/iirdes.pll.o  : %.o : %.c $(include_headers)\nsrc/filter/src/iirdes.o      : %.o : %.c $(include_headers)\nsrc/filter/src/lpc.o         : %.o : %.c $(include_headers)\nsrc/filter/src/rcos.o        : %.o : %.c $(include_headers)\nsrc/filter/src/rkaiser.o     : %.o : %.c $(include_headers)\nsrc/filter/src/rrcos.o       : %.o : %.c $(include_headers)\n\n\nfilter_autotests :=\t\t\t\t\t\t\\\n\tsrc/filter/tests/dds_cccf_autotest.c\t\t\t\\\n\tsrc/filter/tests/fdelay_rrrf_autotest.c\t\t\t\\\n\tsrc/filter/tests/fftfilt_xxxf_autotest.c\t\t\\\n\tsrc/filter/tests/filter_crosscorr_autotest.c\t\t\\\n\tsrc/filter/tests/firdecim_autotest.c\t\t\t\\\n\tsrc/filter/tests/firdecim_xxxf_autotest.c\t\t\\\n\tsrc/filter/tests/firdes_autotest.c\t\t\t\\\n\tsrc/filter/tests/firdespm_autotest.c\t\t\t\\\n\tsrc/filter/tests/firfilt_autotest.c\t\t\t\\\n\tsrc/filter/tests/firfilt_cccf_notch_autotest.c\t\t\\\n\tsrc/filter/tests/firfilt_coefficients_autotest.c\t\\\n\tsrc/filter/tests/firfilt_rnyquist_autotest.c\t\t\\\n\tsrc/filter/tests/firfilt_xxxf_autotest.c\t\t\\\n\tsrc/filter/tests/firfilt_copy_autotest.c\t\t\\\n\tsrc/filter/tests/firhilb_autotest.c\t\t\t\\\n\tsrc/filter/tests/firinterp_autotest.c\t\t\t\\\n\tsrc/filter/tests/firpfb_autotest.c\t\t\t\\\n\tsrc/filter/tests/groupdelay_autotest.c\t\t\t\\\n\tsrc/filter/tests/iirdecim_autotest.c\t\t\t\\\n\tsrc/filter/tests/iirdes_autotest.c\t\t\t\\\n\tsrc/filter/tests/iirdes_support_autotest.c\t\t\\\n\tsrc/filter/tests/iirfilt_autotest.c\t\t\t\\\n\tsrc/filter/tests/iirfilt_xxxf_autotest.c\t\t\\\n\tsrc/filter/tests/iirfiltsos_autotest.c\t\t\t\\\n\tsrc/filter/tests/iirhilb_autotest.c\t\t\t\\\n\tsrc/filter/tests/iirinterp_autotest.c\t\t\t\\\n\tsrc/filter/tests/lpc_autotest.c\t\t\t\t\\\n\tsrc/filter/tests/msresamp_crcf_autotest.c\t\t\\\n\tsrc/filter/tests/msresamp2_crcf_autotest.c\t\t\\\n\tsrc/filter/tests/ordfilt_autotest.c\t\t\t\\\n\tsrc/filter/tests/rresamp_crcf_autotest.c\t\t\\\n\tsrc/filter/tests/rresamp_crcf_partition_autotest.c\t\\\n\tsrc/filter/tests/resamp_crcf_autotest.c\t\t\t\\\n\tsrc/filter/tests/resamp2_crcf_autotest.c\t\t\\\n\tsrc/filter/tests/rkaiser_autotest.c\t\t\t\\\n\tsrc/filter/tests/symsync_copy_autotest.c\t\t\\\n\tsrc/filter/tests/symsync_crcf_autotest.c\t\t\\\n\tsrc/filter/tests/symsync_rrrf_autotest.c\t\t\\\n\n# additional autotest objects\nautotest_extra_obj +=\t\t\t\t\t\t\\\n\tsrc/filter/tests/fftfilt_runtest.o\t\t\t\\\n\t\t\t\t\t\t\t\t\\\n\tsrc/filter/tests/data/fftfilt_rrrf_data_h4x256.o\t\\\n\tsrc/filter/tests/data/fftfilt_crcf_data_h4x256.o\t\\\n\tsrc/filter/tests/data/fftfilt_cccf_data_h4x256.o\t\\\n\t\t\t\t\t\t\t\t\\\n\tsrc/filter/tests/data/fftfilt_rrrf_data_h7x256.o\t\\\n\tsrc/filter/tests/data/fftfilt_crcf_data_h7x256.o\t\\\n\tsrc/filter/tests/data/fftfilt_cccf_data_h7x256.o\t\\\n\t\t\t\t\t\t\t\t\\\n\tsrc/filter/tests/data/fftfilt_rrrf_data_h13x256.o\t\\\n\tsrc/filter/tests/data/fftfilt_crcf_data_h13x256.o\t\\\n\tsrc/filter/tests/data/fftfilt_cccf_data_h13x256.o\t\\\n\t\t\t\t\t\t\t\t\\\n\tsrc/filter/tests/data/fftfilt_rrrf_data_h23x256.o\t\\\n\tsrc/filter/tests/data/fftfilt_crcf_data_h23x256.o\t\\\n\tsrc/filter/tests/data/fftfilt_cccf_data_h23x256.o\t\\\n\t\t\t\t\t\t\t\t\\\n\tsrc/filter/tests/firdecim_runtest.o\t\t\t\\\n\t\t\t\t\t\t\t\t\\\n\tsrc/filter/tests/data/firdecim_rrrf_data_M2h4x20.o\t\\\n\tsrc/filter/tests/data/firdecim_crcf_data_M2h4x20.o\t\\\n\tsrc/filter/tests/data/firdecim_cccf_data_M2h4x20.o\t\\\n\t\t\t\t\t\t\t\t\\\n\tsrc/filter/tests/data/firdecim_rrrf_data_M3h7x30.o\t\\\n\tsrc/filter/tests/data/firdecim_crcf_data_M3h7x30.o\t\\\n\tsrc/filter/tests/data/firdecim_cccf_data_M3h7x30.o\t\\\n\t\t\t\t\t\t\t\t\\\n\tsrc/filter/tests/data/firdecim_rrrf_data_M4h13x40.o\t\\\n\tsrc/filter/tests/data/firdecim_crcf_data_M4h13x40.o\t\\\n\tsrc/filter/tests/data/firdecim_cccf_data_M4h13x40.o\t\\\n\t\t\t\t\t\t\t\t\\\n\tsrc/filter/tests/data/firdecim_rrrf_data_M5h23x50.o\t\\\n\tsrc/filter/tests/data/firdecim_crcf_data_M5h23x50.o\t\\\n\tsrc/filter/tests/data/firdecim_cccf_data_M5h23x50.o\t\\\n\t\t\t\t\t\t\t\t\\\n\tsrc/filter/tests/firfilt_runtest.o\t\t\t\\\n\t\t\t\t\t\t\t\t\\\n\tsrc/filter/tests/data/firfilt_rrrf_data_h4x8.o\t\t\\\n\tsrc/filter/tests/data/firfilt_crcf_data_h4x8.o\t\t\\\n\tsrc/filter/tests/data/firfilt_cccf_data_h4x8.o\t\t\\\n\t\t\t\t\t\t\t\t\\\n\tsrc/filter/tests/data/firfilt_rrrf_data_h7x16.o\t\t\\\n\tsrc/filter/tests/data/firfilt_crcf_data_h7x16.o\t\t\\\n\tsrc/filter/tests/data/firfilt_cccf_data_h7x16.o\t\t\\\n\t\t\t\t\t\t\t\t\\\n\tsrc/filter/tests/data/firfilt_rrrf_data_h13x32.o\t\\\n\tsrc/filter/tests/data/firfilt_crcf_data_h13x32.o\t\\\n\tsrc/filter/tests/data/firfilt_cccf_data_h13x32.o\t\\\n\t\t\t\t\t\t\t\t\\\n\tsrc/filter/tests/data/firfilt_rrrf_data_h23x64.o\t\\\n\tsrc/filter/tests/data/firfilt_crcf_data_h23x64.o\t\\\n\tsrc/filter/tests/data/firfilt_cccf_data_h23x64.o\t\\\n\t\t\t\t\t\t\t\t\\\n\tsrc/filter/tests/iirfilt_runtest.o\t\t\t\\\n\t\t\t\t\t\t\t\t\\\n\tsrc/filter/tests/data/iirfilt_rrrf_data_h3x64.o\t\t\\\n\tsrc/filter/tests/data/iirfilt_crcf_data_h3x64.o\t\t\\\n\tsrc/filter/tests/data/iirfilt_cccf_data_h3x64.o\t\t\\\n\t\t\t\t\t\t\t\t\\\n\tsrc/filter/tests/data/iirfilt_rrrf_data_h5x64.o\t\t\\\n\tsrc/filter/tests/data/iirfilt_crcf_data_h5x64.o\t\t\\\n\tsrc/filter/tests/data/iirfilt_cccf_data_h5x64.o\t\t\\\n\t\t\t\t\t\t\t\t\\\n\tsrc/filter/tests/data/iirfilt_rrrf_data_h7x64.o\t\t\\\n\tsrc/filter/tests/data/iirfilt_crcf_data_h7x64.o\t\t\\\n\tsrc/filter/tests/data/iirfilt_cccf_data_h7x64.o\t\t\\\n\nfilter_benchmarks :=\t\t\t\t\t\t\\\n\tsrc/filter/bench/fftfilt_crcf_benchmark.c\t\t\\\n\tsrc/filter/bench/firdecim_crcf_benchmark.c\t\t\\\n\tsrc/filter/bench/firhilb_benchmark.c\t\t\t\\\n\tsrc/filter/bench/firinterp_crcf_benchmark.c\t\t\\\n\tsrc/filter/bench/firfilt_crcf_benchmark.c\t\t\\\n\tsrc/filter/bench/iirdecim_crcf_benchmark.c\t\t\\\n\tsrc/filter/bench/iirfilt_crcf_benchmark.c\t\t\\\n\tsrc/filter/bench/iirinterp_crcf_benchmark.c\t\t\\\n\tsrc/filter/bench/rresamp_crcf_benchmark.c\t\t\\\n\tsrc/filter/bench/resamp_crcf_benchmark.c\t\t\\\n\tsrc/filter/bench/resamp2_crcf_benchmark.c\t\t\\\n\tsrc/filter/bench/symsync_crcf_benchmark.c\t\t\\\n\n# \n# MODULE : framing\n#\n\nframing_objects :=\t\t\t\t\t\t\\\n\tsrc/framing/src/bpacketgen.o\t\t\t\t\\\n\tsrc/framing/src/bpacketsync.o\t\t\t\t\\\n\tsrc/framing/src/detector_cccf.o\t\t\t\t\\\n\tsrc/framing/src/dsssframe64gen.o\t\t\t\\\n\tsrc/framing/src/dsssframe64sync.o\t\t\t\\\n\tsrc/framing/src/dsssframegen.o\t\t\t\t\\\n\tsrc/framing/src/dsssframesync.o\t\t\t\t\\\n\tsrc/framing/src/framedatastats.o\t\t\t\\\n\tsrc/framing/src/framesyncstats.o\t\t\t\\\n\tsrc/framing/src/framegen64.o\t\t\t\t\\\n\tsrc/framing/src/framesync64.o\t\t\t\t\\\n\tsrc/framing/src/framingcf.o\t\t\t\t\\\n\tsrc/framing/src/framing_rrrf.o\t\t\t\t\\\n\tsrc/framing/src/framing_crcf.o\t\t\t\t\\\n\tsrc/framing/src/framing_cccf.o\t\t\t\t\\\n\tsrc/framing/src/flexframegen.o\t\t\t\t\\\n\tsrc/framing/src/flexframesync.o\t\t\t\t\\\n\tsrc/framing/src/fskframegen.o\t\t\t\t\\\n\tsrc/framing/src/fskframesync.o\t\t\t\t\\\n\tsrc/framing/src/gmskframegen.o\t\t\t\t\\\n\tsrc/framing/src/gmskframesync.o\t\t\t\t\\\n\tsrc/framing/src/ofdmflexframegen.o\t\t\t\\\n\tsrc/framing/src/ofdmflexframesync.o\t\t\t\\\n\tsrc/framing/src/qpilotgen.o\t\t\t\t\\\n\tsrc/framing/src/qpilotsync.o\t\t\t\t\\\n\n\n# list explicit targets and dependencies here\n\nframing_prototypes_gen :=\t\t\t\t\t\\\n\tsrc/framing/src/msource.proto.c\t\t\t\t\\\n\tsrc/framing/src/qpacketmodem.proto.c\t\t\t\\\n\tsrc/framing/src/qsource.proto.c\t\t\t\t\\\n\tsrc/framing/src/symstream.proto.c\t\t\t\\\n\tsrc/framing/src/symstreamr.proto.c\t\t\t\\\n\nframing_prototypes_sync :=\t\t\t\t\t\\\n\tsrc/framing/src/bpresync.proto.c\t\t\t\\\n\tsrc/framing/src/bsync.proto.c\t\t\t\t\\\n\tsrc/framing/src/presync.proto.c\t\t\t\t\\\n\tsrc/framing/src/qdetector.proto.c\t\t\t\\\n\tsrc/framing/src/qdsync.proto.c\t\t\t\t\\\n\tsrc/framing/src/symtrack.proto.c\t\t\t\\\n\nsrc/framing/src/framingcf.o         : %.o : %.c $(include_headers) ${framing_prototypes_gen}\nsrc/framing/src/framing_rrrf.o      : %.o : %.c $(include_headers) ${framing_prototypes_sync}\nsrc/framing/src/framing_crcf.o      : %.o : %.c $(include_headers) ${framing_prototypes_sync}\nsrc/framing/src/framing_cccf.o      : %.o : %.c $(include_headers) ${framing_prototypes_sync}\n\nframing_autotests :=\t\t\t\t\t\t\\\n\tsrc/framing/tests/bpacketsync_autotest.c\t\t\\\n\tsrc/framing/tests/bsync_autotest.c\t\t\t\\\n\tsrc/framing/tests/detector_autotest.c\t\t\t\\\n\tsrc/framing/tests/dsssframe64_autotest.c\t\t\\\n\tsrc/framing/tests/dsssframesync_autotest.c\t\t\\\n\tsrc/framing/tests/flexframesync_autotest.c\t\t\\\n\tsrc/framing/tests/framesync64_autotest.c\t\t\\\n\tsrc/framing/tests/fskframesync_autotest.c\t\t\\\n\tsrc/framing/tests/gmskframe_autotest.c\t\t\t\\\n\tsrc/framing/tests/msource_autotest.c\t\t\t\\\n\tsrc/framing/tests/ofdmflexframe_autotest.c\t\t\\\n\tsrc/framing/tests/qdetector_cccf_autotest.c\t\t\\\n\tsrc/framing/tests/qdetector_cccf_copy_autotest.c\t\\\n\tsrc/framing/tests/qdsync_cccf_autotest.c\t\t\\\n\tsrc/framing/tests/qpacketmodem_autotest.c\t\t\\\n\tsrc/framing/tests/qpilotsync_autotest.c\t\t\t\\\n\tsrc/framing/tests/qsource_autotest.c\t\t\t\\\n\tsrc/framing/tests/symstreamcf_autotest.c\t\t\\\n\tsrc/framing/tests/symstreamcf_delay_autotest.c\t\t\\\n\tsrc/framing/tests/symstreamrcf_autotest.c\t\t\\\n\tsrc/framing/tests/symstreamrcf_delay_autotest.c\t\t\\\n\tsrc/framing/tests/symtrack_cccf_autotest.c\t\t\\\n\n\nframing_benchmarks :=\t\t\t\t\t\t\\\n\tsrc/framing/bench/presync_benchmark.c\t\t\t\\\n\tsrc/framing/bench/bpacketsync_benchmark.c\t\t\\\n\tsrc/framing/bench/bpresync_benchmark.c\t\t\t\\\n\tsrc/framing/bench/bsync_benchmark.c\t\t\t\\\n\tsrc/framing/bench/detector_benchmark.c\t\t\t\\\n\tsrc/framing/bench/flexframesync_benchmark.c\t\t\\\n\tsrc/framing/bench/framesync64_benchmark.c\t\t\\\n\tsrc/framing/bench/gmskframesync_benchmark.c\t\t\\\n\tsrc/framing/bench/qdetector_benchmark.c\t\t\t\\\n\n\n# \n# MODULE : math\n#\n\nmath_objects :=\t\t\t\t\t\t\t\\\n\tsrc/math/src/poly.o\t\t\t\t\t\\\n\tsrc/math/src/polyc.o\t\t\t\t\t\\\n\tsrc/math/src/polyf.o\t\t\t\t\t\\\n\tsrc/math/src/polycf.o\t\t\t\t\t\\\n\tsrc/math/src/math.o\t\t\t\t\t\\\n\tsrc/math/src/math.bessel.o\t\t\t\t\\\n\tsrc/math/src/math.gamma.o\t\t\t\t\\\n\tsrc/math/src/math.complex.o\t\t\t\t\\\n\tsrc/math/src/math.trig.o\t\t\t\t\\\n\tsrc/math/src/modular_arithmetic.o\t\t\t\\\n\tsrc/math/src/poly.findroots.o\t\t\t\t\\\n\tsrc/math/src/windows.o\t\t\t\t\t\\\n\n\npoly_prototypes :=\t\t\t\t\t\t\\\n\tsrc/math/src/poly.common.proto.c\t\t\t\\\n\tsrc/math/src/poly.expand.proto.c\t\t\t\\\n\tsrc/math/src/poly.lagrange.proto.c\t\t\t\\\n\nsrc/math/src/poly.o               : %.o : %.c $(include_headers) $(poly_prototypes)\nsrc/math/src/polyc.o              : %.o : %.c $(include_headers) $(poly_prototypes)\nsrc/math/src/polyf.o              : %.o : %.c $(include_headers) $(poly_prototypes)\nsrc/math/src/polycf.o             : %.o : %.c $(include_headers) $(poly_prototypes)\nsrc/math/src/math.o               : %.o : %.c $(include_headers)\nsrc/math/src/math.bessel.o        : %.o : %.c $(include_headers)\nsrc/math/src/math.gamma.o         : %.o : %.c $(include_headers)\nsrc/math/src/math.complex.o       : %.o : %.c $(include_headers)\nsrc/math/src/math.trig.o          : %.o : %.c $(include_headers)\nsrc/math/src/modular_arithmetic.o : %.o : %.c $(include_headers)\nsrc/math/src/windows.o            : %.o : %.c $(include_headers)\n\n\nmath_autotests :=\t\t\t\t\t\t\\\n\tsrc/math/tests/gcd_autotest.c\t\t\t\t\\\n\tsrc/math/tests/math_window_autotest.c\t\t\t\\\n\tsrc/math/tests/math_autotest.c\t\t\t\t\\\n\tsrc/math/tests/math_bessel_autotest.c\t\t\t\\\n\tsrc/math/tests/math_gamma_autotest.c\t\t\t\\\n\tsrc/math/tests/math_complex_autotest.c\t\t\t\\\n\tsrc/math/tests/polynomial_autotest.c\t\t\t\\\n\tsrc/math/tests/polynomial_findroots_autotest.c\t\t\\\n\tsrc/math/tests/prime_autotest.c\t\t\t\t\\\n\n\nmath_benchmarks :=\t\t\t\t\t\t\\\n\tsrc/math/bench/polyfit_benchmark.c\t\t\t\\\n\n\n#\n# MODULE : matrix\n#\n\nmatrix_objects :=\t\t\t\t\t\t\\\n\tsrc/matrix/src/matrix.o\t\t\t\t\t\\\n\tsrc/matrix/src/matrixf.o\t\t\t\t\\\n\tsrc/matrix/src/matrixc.o\t\t\t\t\\\n\tsrc/matrix/src/matrixcf.o\t\t\t\t\\\n\tsrc/matrix/src/smatrix.common.o\t\t\t\t\\\n\tsrc/matrix/src/smatrixb.o\t\t\t\t\\\n\tsrc/matrix/src/smatrixf.o\t\t\t\t\\\n\tsrc/matrix/src/smatrixi.o\t\t\t\t\\\n\n\nmatrix_prototypes :=\t\t\t\t\t\t\\\n\tsrc/matrix/src/matrix.base.proto.c\t\t\t\\\n\tsrc/matrix/src/matrix.cgsolve.proto.c\t\t\t\\\n\tsrc/matrix/src/matrix.chol.proto.c\t\t\t\\\n\tsrc/matrix/src/matrix.gramschmidt.proto.c\t\t\\\n\tsrc/matrix/src/matrix.inv.proto.c\t\t\t\\\n\tsrc/matrix/src/matrix.linsolve.proto.c\t\t\t\\\n\tsrc/matrix/src/matrix.ludecomp.proto.c\t\t\t\\\n\tsrc/matrix/src/matrix.qrdecomp.proto.c\t\t\t\\\n\tsrc/matrix/src/matrix.math.proto.c\t\t\t\\\n\nsrc/matrix/src/matrix.o   : %.o : %.c $(include_headers) $(matrix_prototypes)\nsrc/matrix/src/matrixc.o  : %.o : %.c $(include_headers) $(matrix_prototypes)\nsrc/matrix/src/matrixf.o  : %.o : %.c $(include_headers) $(matrix_prototypes)\nsrc/matrix/src/matrixcf.o : %.o : %.c $(include_headers) $(matrix_prototypes)\nsrc/matrix/src/smatrixb.o : %.o : %.c $(include_headers) src/matrix/src/smatrix.proto.c\nsrc/matrix/src/smatrixf.o : %.o : %.c $(include_headers) src/matrix/src/smatrix.proto.c\nsrc/matrix/src/smatrixi.o : %.o : %.c $(include_headers) src/matrix/src/smatrix.proto.c\n\n\n# matrix autotest scripts\nmatrix_autotests :=\t\t\t\t\t\t\\\n\tsrc/matrix/tests/matrixcf_autotest.c\t\t\t\\\n\tsrc/matrix/tests/matrixf_autotest.c\t\t\t\\\n\tsrc/matrix/tests/smatrixb_autotest.c\t\t\t\\\n\tsrc/matrix/tests/smatrixf_autotest.c\t\t\t\\\n\tsrc/matrix/tests/smatrixi_autotest.c\t\t\t\\\n\n# additional autotest objects\nautotest_extra_obj +=\t\t\t\t\t\t\\\n\tsrc/matrix/tests/data/matrixf_data_add.o\t\t\\\n\tsrc/matrix/tests/data/matrixf_data_aug.o\t\t\\\n\tsrc/matrix/tests/data/matrixf_data_cgsolve.o\t\t\\\n\tsrc/matrix/tests/data/matrixf_data_chol.o\t\t\\\n\tsrc/matrix/tests/data/matrixf_data_gramschmidt.o\t\\\n\tsrc/matrix/tests/data/matrixf_data_inv.o\t\t\\\n\tsrc/matrix/tests/data/matrixf_data_linsolve.o\t\t\\\n\tsrc/matrix/tests/data/matrixf_data_ludecomp.o\t\t\\\n\tsrc/matrix/tests/data/matrixf_data_mul.o\t\t\\\n\tsrc/matrix/tests/data/matrixf_data_qrdecomp.o\t\t\\\n\tsrc/matrix/tests/data/matrixf_data_transmul.o\t\t\\\n\t\t\t\t\t\t\t\t\\\n\tsrc/matrix/tests/data/matrixcf_data_add.o\t\t\\\n\tsrc/matrix/tests/data/matrixcf_data_aug.o\t\t\\\n\tsrc/matrix/tests/data/matrixcf_data_chol.o\t\t\\\n\tsrc/matrix/tests/data/matrixcf_data_inv.o\t\t\\\n\tsrc/matrix/tests/data/matrixcf_data_linsolve.o\t\t\\\n\tsrc/matrix/tests/data/matrixcf_data_ludecomp.o\t\t\\\n\tsrc/matrix/tests/data/matrixcf_data_mul.o\t\t\\\n\tsrc/matrix/tests/data/matrixcf_data_qrdecomp.o\t\t\\\n\tsrc/matrix/tests/data/matrixcf_data_transmul.o\t\t\\\n\nmatrix_benchmarks :=\t\t\t\t\t\t\\\n\tsrc/matrix/bench/matrixf_inv_benchmark.c\t\t\\\n\tsrc/matrix/bench/matrixf_linsolve_benchmark.c\t\t\\\n\tsrc/matrix/bench/matrixf_mul_benchmark.c\t\t\\\n\tsrc/matrix/bench/smatrixf_mul_benchmark.c\t\t\\\n\n\n# \n# MODULE : modem\n#\n\nmodem_objects :=\t\t\t\t\t\t\\\n\tsrc/modem/src/ampmodem.o\t\t\t\t\\\n\tsrc/modem/src/fskdem.o\t\t\t\t\t\\\n\tsrc/modem/src/fskmod.o\t\t\t\t\t\\\n\tsrc/modem/src/gmskdem.o\t\t\t\t\t\\\n\tsrc/modem/src/gmskmod.o\t\t\t\t\t\\\n\tsrc/modem/src/modem.shim.o\t\t\t\t\\\n\tsrc/modem/src/modemcf.o\t\t\t\t\t\\\n\tsrc/modem/src/modem_utilities.o\t\t\t\t\\\n\tsrc/modem/src/modem_apsk_const.o\t\t\t\\\n\tsrc/modem/src/modem_arb_const.o\t\t\t\t\\\n\n# explicit targets and dependencies\nmodem_prototypes :=\t\t\t\t\t\t\\\n\tsrc/modem/src/cpfskdem.proto.c\t\t\t\t\\\n\tsrc/modem/src/cpfskmod.proto.c\t\t\t\t\\\n\tsrc/modem/src/freqdem.proto.c\t\t\t\t\\\n\tsrc/modem/src/freqmod.proto.c\t\t\t\t\\\n\tsrc/modem/src/modem_common.proto.c\t\t\t\\\n\tsrc/modem/src/modem_psk.proto.c\t\t\t\t\\\n\tsrc/modem/src/modem_dpsk.proto.c\t\t\t\\\n\tsrc/modem/src/modem_ask.proto.c\t\t\t\t\\\n\tsrc/modem/src/modem_qam.proto.c\t\t\t\t\\\n\tsrc/modem/src/modem_apsk.proto.c\t\t\t\\\n\tsrc/modem/src/modem_bpsk.proto.c\t\t\t\\\n\tsrc/modem/src/modem_qpsk.proto.c\t\t\t\\\n\tsrc/modem/src/modem_ook.proto.c\t\t\t\t\\\n\tsrc/modem/src/modem_pi4dqpsk.proto.c\t\t\t\\\n\tsrc/modem/src/modem_sqam32.proto.c\t\t\t\\\n\tsrc/modem/src/modem_sqam128.proto.c\t\t\t\\\n\tsrc/modem/src/modem_arb.proto.c\t\t\t\t\\\n\t\n#src/modem/src/modem_demod_soft_const.c\n\nsrc/modem/src/modemcf.o          : %.o : %.c $(include_headers) $(modem_prototypes)\nsrc/modem/src/modem.shim.o       : %.o : %.c $(include_headers)\nsrc/modem/src/gmskmod.o          : %.o : %.c $(include_headers)\nsrc/modem/src/gmskdem.o          : %.o : %.c $(include_headers)\nsrc/modem/src/ampmodem.o         : %.o : %.c $(include_headers)\nsrc/modem/src/freqmodem.o        : %.o : %.c $(include_headers)\nsrc/modem/src/modem_utilities.o  : %.o : %.c $(include_headers)\nsrc/modem/src/modem_apsk_const.o : %.o : %.c $(include_headers)\nsrc/modem/src/modem_arb_const.o  : %.o : %.c $(include_headers)\n\n\nmodem_autotests :=\t\t\t\t\t\t\\\n\tsrc/modem/tests/ampmodem_autotest.c\t\t\t\\\n\tsrc/modem/tests/cpfskmodem_autotest.c\t\t\t\\\n\tsrc/modem/tests/freqmodem_autotest.c\t\t\t\\\n\tsrc/modem/tests/fskmodem_autotest.c\t\t\t\\\n\tsrc/modem/tests/gmskmodem_autotest.c\t\t\t\\\n\tsrc/modem/tests/modem_autotest.c\t\t\t\\\n\tsrc/modem/tests/modem_config_autotest.c\t\t\t\\\n\tsrc/modem/tests/modem_demodsoft_autotest.c\t\t\\\n\tsrc/modem/tests/modem_demodstats_autotest.c\t\t\\\n\tsrc/modem/tests/modem_utilities_autotest.c\t\t\\\n\n\nmodem_benchmarks :=\t\t\t\t\t\t\\\n\tsrc/modem/bench/freqdem_benchmark.c\t\t\t\\\n\tsrc/modem/bench/freqmod_benchmark.c\t\t\t\\\n\tsrc/modem/bench/fskdem_benchmark.c\t\t\t\\\n\tsrc/modem/bench/fskmod_benchmark.c\t\t\t\\\n\tsrc/modem/bench/gmskmodem_benchmark.c\t\t\t\\\n\tsrc/modem/bench/modem_modulate_benchmark.c\t\t\\\n\tsrc/modem/bench/modem_demodulate_benchmark.c\t\t\\\n\tsrc/modem/bench/modem_demodsoft_benchmark.c\t\t\\\n\n# \n# MODULE : multichannel\n#\n\nmultichannel_objects :=\t\t\t\t\t\t\\\n\tsrc/multichannel/src/firpfbch_crcf.o\t\t\t\\\n\tsrc/multichannel/src/firpfbch_cccf.o\t\t\t\\\n\tsrc/multichannel/src/ofdmframe.common.o\t\t\t\\\n\tsrc/multichannel/src/ofdmframegen.o\t\t\t\\\n\tsrc/multichannel/src/ofdmframesync.o\t\t\t\\\n\n$(multichannel_objects) : %.o : %.c $(include_headers)\n\n# list explicit targets and dependencies here\nmultichannel_prototypes :=\t\t\t\t\t\\\n\tsrc/multichannel/src/firpfbch.proto.c\t\t\t\\\n\tsrc/multichannel/src/firpfbch2.proto.c\t\t\t\\\n\tsrc/multichannel/src/firpfbchr.proto.c\t\t\t\\\n\nsrc/multichannel/src/firpfbch_crcf.o : %.o : %.c $(include_headers) $(multichannel_prototypes)\nsrc/multichannel/src/firpfbch_cccf.o : %.o : %.c $(include_headers) $(multichannel_prototypes)\n\n# autotests\nmultichannel_autotests :=\t\t\t\t\t\\\n\tsrc/multichannel/tests/firpfbch_crcf_synthesizer_autotest.c\t\\\n\tsrc/multichannel/tests/firpfbch_crcf_analyzer_autotest.c\t\\\n\tsrc/multichannel/tests/firpfbch_crcf_autotest.c\t\t\\\n\tsrc/multichannel/tests/firpfbch2_crcf_autotest.c\t\\\n\tsrc/multichannel/tests/firpfbchr_crcf_autotest.c\t\\\n\tsrc/multichannel/tests/ofdmframe_autotest.c\t\t\\\n\n# benchmarks\nmultichannel_benchmarks :=\t\t\t\t\t\\\n\tsrc/multichannel/bench/firpfbch_crcf_benchmark.c\t\\\n\tsrc/multichannel/bench/firpfbch2_crcf_benchmark.c\t\\\n\tsrc/multichannel/bench/firpfbchr_crcf_benchmark.c\t\\\n\tsrc/multichannel/bench/ofdmframesync_acquire_benchmark.c\t\\\n\tsrc/multichannel/bench/ofdmframesync_rxsymbol_benchmark.c\t\\\n\n# \n# MODULE : nco - numerically-controlled oscillator\n#\n\nnco_objects :=\t\t\t\t\t\t\t\\\n\tsrc/nco/src/nco_crcf.o\t\t\t\t\t\\\n\tsrc/nco/src/nco.utilities.o\t\t\t\t\\\n\nnco_prototypes :=\t\t\t\t\t\t\\\n\tsrc/nco/src/nco.proto.c\t\t\t\t\t\\\n\tsrc/nco/src/synth.proto.c\t\t\t\t\\\n\nsrc/nco/src/nco_crcf.o      : %.o : %.c $(include_headers) $(nco_prototypes)\nsrc/nco/src/nco.utilities.o : %.o : %.c $(include_headers)\n\n\n# autotests\nnco_autotests :=\t\t\t\t\t\t\\\n\tsrc/nco/tests/nco_crcf_autotest.c\t\t\t\\\n\tsrc/nco/tests/nco_crcf_frequency_autotest.c\t\t\\\n\tsrc/nco/tests/nco_crcf_mix_autotest.c\t\t\t\\\n\tsrc/nco/tests/nco_crcf_phase_autotest.c\t\t\t\\\n\tsrc/nco/tests/nco_crcf_pll_autotest.c\t\t\t\\\n\tsrc/nco/tests/nco_crcf_spectrum_autotest.c\t\t\\\n\tsrc/nco/tests/unwrap_phase_autotest.c\t\t\t\\\n\n# additional autotest objects\nautotest_extra_obj +=\t\t\t\t\t\t\\\n\tsrc/nco/tests/data/nco_sincos_fsqrt1_2.o\t\t\\\n\tsrc/nco/tests/data/nco_sincos_fsqrt1_3.o\t\t\\\n\tsrc/nco/tests/data/nco_sincos_fsqrt1_5.o\t\t\\\n\tsrc/nco/tests/data/nco_sincos_fsqrt1_7.o\t\t\\\n\n# benchmarks\nnco_benchmarks :=\t\t\t\t\t\t\\\n\tsrc/nco/bench/nco_benchmark.c\t\t\t\t\\\n\tsrc/nco/bench/vco_benchmark.c\t\t\t\t\\\n\n# \n# MODULE : optim - optimization\n#\n\noptim_objects :=\t\t\t\t\t\t\\\n\tsrc/optim/src/chromosome.o\t\t\t\t\\\n\tsrc/optim/src/gasearch.o\t\t\t\t\\\n\tsrc/optim/src/gradsearch.o\t\t\t\t\\\n\tsrc/optim/src/optim.common.o\t\t\t\t\\\n\tsrc/optim/src/qnsearch.o\t\t\t\t\\\n\tsrc/optim/src/qs1dsearch.o\t\t\t\t\\\n\tsrc/optim/src/utilities.o\t\t\t\t\\\n\n$(optim_objects) : %.o : %.c $(include_headers)\n\n# autotests\noptim_autotests :=\t\t\t\t\t\t\\\n\tsrc/optim/tests/gasearch_autotest.c\t\t\t\\\n\tsrc/optim/tests/gradsearch_autotest.c\t\t\t\\\n\tsrc/optim/tests/qnsearch_autotest.c\t\t\t\\\n\tsrc/optim/tests/qs1dsearch_autotest.c\t\t\t\\\n\tsrc/optim/tests/utility_autotest.c\t\t\t\\\n\n# benchmarks\noptim_benchmarks :=\n\n\n# \n# MODULE : quantization\n#\n\nquantization_objects :=\t\t\t\t\t\t\\\n\tsrc/quantization/src/compand.o\t\t\t\t\\\n\tsrc/quantization/src/quantizercf.o\t\t\t\\\n\tsrc/quantization/src/quantizerf.o\t\t\t\\\n\tsrc/quantization/src/quantizer.inline.o\t\t\t\\\n\nquantization_prototypes :=\t\t\t\t\t\\\n\tsrc/quantization/src/quantizer.proto.c\t\t\t\\\n\nsrc/quantization/src/compand.o          : %.o : %.c $(include_headers)\nsrc/quantization/src/quantizercf.o      : %.o : %.c $(include_headers) $(quantization_prototypes)\nsrc/quantization/src/quantizerf.o       : %.o : %.c $(include_headers) $(quantization_prototypes)\nsrc/quantization/src/quantizer.inline.o : %.o : %.c $(include_headers)\n\n\n# autotests\nquantization_autotests :=\t\t\t\t\t\\\n\tsrc/quantization/tests/compand_autotest.c\t\t\\\n\tsrc/quantization/tests/quantize_autotest.c\t\t\\\n\n\n# benchmarks\nquantization_benchmarks :=\t\t\t\t\t\\\n\tsrc/quantization/bench/quantizer_benchmark.c\t\t\\\n\tsrc/quantization/bench/compander_benchmark.c\t\t\\\n\n# \n# MODULE : random\n#\n\nrandom_objects :=\t\t\t\t\t\t\\\n\tsrc/random/src/rand.o\t\t\t\t\t\\\n\tsrc/random/src/randn.o\t\t\t\t\t\\\n\tsrc/random/src/randexp.o\t\t\t\t\\\n\tsrc/random/src/randweib.o\t\t\t\t\\\n\tsrc/random/src/randgamma.o\t\t\t\t\\\n\tsrc/random/src/randnakm.o\t\t\t\t\\\n\tsrc/random/src/randricek.o\t\t\t\t\\\n\tsrc/random/src/scramble.o\t\t\t\t\\\n\n\n$(random_objects) : %.o : %.c $(include_headers)\n\n# autotests\nrandom_autotests :=\t\t\t\t\t\t\\\n\tsrc/random/tests/scramble_autotest.c\t\t\t\\\n\tsrc/random/tests/random_autotest.c\t\t\t\\\n\tsrc/random/tests/random_distributions_autotest.c\t\\\n\n\n# benchmarks\nrandom_benchmarks :=\t\t\t\t\t\t\\\n\tsrc/random/bench/random_benchmark.c\t\t\t\\\n\n\n# \n# MODULE : sequence\n#\n\nsequence_objects :=\t\t\t\t\t\t\\\n\tsrc/sequence/src/bsequence.o\t\t\t\t\\\n\tsrc/sequence/src/msequence.o\t\t\t\t\\\n\n\n$(sequence_objects) : %.o : %.c $(include_headers)\n\n\n# autotests\nsequence_autotests :=\t\t\t\t\t\t\\\n\tsrc/sequence/tests/bsequence_autotest.c\t\t\t\\\n\tsrc/sequence/tests/complementary_codes_autotest.c\t\\\n\tsrc/sequence/tests/msequence_autotest.c\t\t\t\\\n\n# benchmarks\nsequence_benchmarks :=\t\t\t\t\t\t\\\n\tsrc/sequence/bench/bsequence_benchmark.c\t\t\\\n\n# \n# MODULE : utility\n#\n\nutility_objects :=\t\t\t\t\t\t\\\n\tsrc/utility/src/bshift_array.o\t\t\t\t\\\n\tsrc/utility/src/byte_utilities.o\t\t\t\\\n\tsrc/utility/src/memory.o\t\t\t\t\\\n\tsrc/utility/src/msb_index.o\t\t\t\t\\\n\tsrc/utility/src/pack_bytes.o\t\t\t\t\\\n\tsrc/utility/src/shift_array.o\t\t\t\t\\\n\tsrc/utility/src/utility.o\t\t\t\t\\\n\n$(utility_objects) : %.o : %.c $(include_headers)\n\n# autotests\nutility_autotests :=\t\t\t\t\t\t\\\n\tsrc/utility/tests/bshift_array_autotest.c\t\t\\\n\tsrc/utility/tests/count_bits_autotest.c\t\t\t\\\n\tsrc/utility/tests/pack_bytes_autotest.c\t\t\t\\\n\tsrc/utility/tests/shift_array_autotest.c\t\t\\\n\n# benchmarks\nutility_benchmarks :=\t\t\t\t\t\t\\\n\tsrc/utility/bench/byte_utilities_benchmark.c\t\t\\\n\n\n#\n# MODULE : vector\n#\n\n# main objects list\nvector_objects :=\t\t\t\t\t\t\\\n\t@MLIBS_VECTOR@\t\t\t\t\t\t\\\n\n# portable builds\nsrc/vector/src/vectorf_add.port.o   : %.o : %.c $(include_headers) src/vector/src/vector_add.proto.c\nsrc/vector/src/vectorf_norm.port.o  : %.o : %.c $(include_headers) src/vector/src/vector_norm.proto.c\nsrc/vector/src/vectorf_mul.port.o   : %.o : %.c $(include_headers) src/vector/src/vector_mul.proto.c\nsrc/vector/src/vectorf_trig.port.o  : %.o : %.c $(include_headers) src/vector/src/vector_trig.proto.c\nsrc/vector/src/vectorcf_add.port.o  : %.o : %.c $(include_headers) src/vector/src/vector_add.proto.c\nsrc/vector/src/vectorcf_norm.port.o : %.o : %.c $(include_headers) src/vector/src/vector_norm.proto.c\nsrc/vector/src/vectorcf_mul.port.o  : %.o : %.c $(include_headers) src/vector/src/vector_mul.proto.c\nsrc/vector/src/vectorcf_trig.port.o : %.o : %.c $(include_headers) src/vector/src/vector_trig.proto.c\n\n# builds for specific architectures\n# ...\n\n# vector autotest scripts\nvector_autotests :=\n\n# additional autotest objects\nautotest_extra_obj +=\n\n# vector benchmark scripts\nvector_benchmarks :=\n\n\n\n# Target collection\n#\n# Information about targets for each module is collected\n# in these variables\nobjects :=\t\t\t\t\t\t\t\\\n\tsrc/libliquid.o\t\t\t\t\t\t\\\n\t$(agc_objects)\t\t\t\t\t\t\\\n\t$(audio_objects)\t\t\t\t\t\\\n\t$(buffer_objects)\t\t\t\t\t\\\n\t$(channel_objects)\t\t\t\t\t\\\n\t$(dotprod_objects)\t\t\t\t\t\\\n\t$(equalization_objects)\t\t\t\t\t\\\n\t$(fec_objects)\t\t\t\t\t\t\\\n\t$(fft_objects)\t\t\t\t\t\t\\\n\t$(filter_objects)\t\t\t\t\t\\\n\t$(framing_objects)\t\t\t\t\t\\\n\t$(math_objects)\t\t\t\t\t\t\\\n\t$(matrix_objects)\t\t\t\t\t\\\n\t$(modem_objects)\t\t\t\t\t\\\n\t$(multichannel_objects)\t\t\t\t\t\\\n\t$(nco_objects)\t\t\t\t\t\t\\\n\t$(optim_objects)\t\t\t\t\t\\\n\t$(quantization_objects)\t\t\t\t\t\\\n\t$(random_objects)\t\t\t\t\t\\\n\t$(sequence_objects)\t\t\t\t\t\\\n\t$(utility_objects)\t\t\t\t\t\\\n\t$(vector_objects)\t\t\t\t\t\\\n\n$(objects) : %.o : %.c $(include_headers)\n\nautotest_sources :=\t\t\t\t\t\t\\\n\tautotest/null_autotest.c\t\t\t\t\\\n\tautotest/libliquid_autotest.c\t\t\t\t\\\n\t$(agc_autotests)\t\t\t\t\t\\\n\t$(audio_autotests)\t\t\t\t\t\\\n\t$(buffer_autotests)\t\t\t\t\t\\\n\t$(channel_autotests)\t\t\t\t\t\\\n\t$(dotprod_autotests)\t\t\t\t\t\\\n\t$(equalization_autotests)\t\t\t\t\\\n\t$(fec_autotests)\t\t\t\t\t\\\n\t$(fft_autotests)\t\t\t\t\t\\\n\t$(filter_autotests)\t\t\t\t\t\\\n\t$(framing_autotests)\t\t\t\t\t\\\n\t$(math_autotests)\t\t\t\t\t\\\n\t$(matrix_autotests)\t\t\t\t\t\\\n\t$(modem_autotests)\t\t\t\t\t\\\n\t$(multichannel_autotests)\t\t\t\t\\\n\t$(nco_autotests)\t\t\t\t\t\\\n\t$(optim_autotests)\t\t\t\t\t\\\n\t$(quantization_autotests)\t\t\t\t\\\n\t$(random_autotests)\t\t\t\t\t\\\n\t$(sequence_autotests)\t\t\t\t\t\\\n\t$(utility_autotests)\t\t\t\t\t\\\n\t$(vector_autotests)\t\t\t\t\t\\\n\t\n\nbenchmark_sources :=\t\t\t\t\t\t\\\n\tbench/null_benchmark.c\t\t\t\t\t\\\n\t$(agc_benchmarks)\t\t\t\t\t\\\n\t$(audio_benchmarks)\t\t\t\t\t\\\n\t$(buffer_benchmarks)\t\t\t\t\t\\\n\t$(channel_benchmarks)\t\t\t\t\t\\\n\t$(dotprod_benchmarks)\t\t\t\t\t\\\n\t$(equalization_benchmarks)\t\t\t\t\\\n\t$(fec_benchmarks)\t\t\t\t\t\\\n\t$(fft_benchmarks)\t\t\t\t\t\\\n\t$(filter_benchmarks)\t\t\t\t\t\\\n\t$(framing_benchmarks)\t\t\t\t\t\\\n\t$(math_benchmarks)\t\t\t\t\t\\\n\t$(matrix_benchmarks)\t\t\t\t\t\\\n\t$(modem_benchmarks)\t\t\t\t\t\\\n\t$(multichannel_benchmarks)\t\t\t\t\\\n\t$(nco_benchmarks)\t\t\t\t\t\\\n\t$(optim_benchmarks)\t\t\t\t\t\\\n\t$(quantization_benchmarks)\t\t\t\t\\\n\t$(random_benchmarks)\t\t\t\t\t\\\n\t$(sequence_benchmarks)\t\t\t\t\t\\\n\t$(utility_benchmarks)\t\t\t\t\t\\\n\t$(vector_benchmarks)\t\t\t\t\t\\\n\n\n##\n## TARGET : all       - build shared library (default)\n##\n.PHONY: all\n\n# Shared library targets\nARCHIVE_LIB\t= libliquid.${AR_LIB}\nSHARED_LIB\t= libliquid.${SH_LIB}\n\n#\n# darwin\n#\nlibliquid.ar : $(objects)\n\t${LIBTOOL} -static -o $@ $^\n\n# gcc -dynamiclib -install_name libliquid.dylib -o libliquid.dylib libmodem.a libutility.a \nlibliquid.dylib : $(objects)\n\t$(CC) -dynamiclib ${COVERAGE_FLAGS} -install_name $@ -o $@ $^ $(LDFLAGS) $(LIBS)\n\n#\n# linux, et al\n#\nlibliquid.a : $(objects)\n\t${AR} r $@ $^\n\t${RANLIB} $@\n\nlibliquid.so : libliquid.a\n\t$(CC) $(CFLAGS) $(LDFLAGS) -shared -Xlinker -soname=libliquid.so.$(SOVERSION) -o $@ -Wl,-whole-archive $^ -Wl,-no-whole-archive $(LIBS)\n\n# static archive and library objects\nall: ${ARCHIVE_LIB} ${SHARED_LIB}\n\n##\n## TARGET : help      - print list of targets\n##\n\n# look for all occurrences of '## TARGET : ' and print rest of line to screen\nhelp:\n\t@echo \"Targets for liquid-dsp makefile:\"\n\t@$(GREP) -E \"^## TARGET : \" [Mm]akefile | $(SED) 's/## TARGET : /  /'\n\n## \n## TARGET : install   - installs the libraries and header files in the host system\n##\n\ninstall: all\n\t@echo \"installing...\"\n\t@echo \"\"\n\tmkdir -p $(DESTDIR)$(prefix)/include/liquid\n\tmkdir -p $(DESTDIR)$(libdir)\n\tinstall -m 644 -p libliquid.${AR_LIB} $(DESTDIR)$(libdir)/libliquid.${AR_LIB}\n\tinstall -m 644 -p libliquid.${SH_LIB} $(DESTDIR)$(libdir)/libliquid.${SH_LIB}.${VERSION}\n\tinstall -m 644 -p include/liquid.h $(DESTDIR)$(prefix)/include/liquid/liquid.h\n\tln -sf libliquid.${SH_LIB}.${VERSION} $(DESTDIR)$(libdir)/libliquid.${SH_LIB}\n\tln -sf libliquid.${SH_LIB}.${VERSION} $(DESTDIR)$(libdir)/libliquid.${SH_LIB}.${SOVERSION}\n\t@echo \"\"\n\t@echo \"---------------------------------------------------------\"\n\t@echo \"  liquid-dsp was successfully installed.     \"\n\t@echo \"\"\n\t@echo \"  On some machines (e.g. Linux) you should rebind your\"\n\t@echo \"  libraries by running 'ldconfig' to make the shared\"\n\t@echo \"  object available.  You might also need to modify your\"\n\t@echo \"  LD_LIBRARY_PATH environment variable to include the\"\n\t@echo \"  directory $(DESTDIR)$(exec_prefix)\"\n\t@echo \"\"\n\t@echo \"  Please report bugs to $(BUGREPORT)\"\n\t@echo \"---------------------------------------------------------\"\n\t@echo \"\"\n\n## \n## TARGET : uninstall - uninstalls the libraries and header files in the host system\n##\n\n#$(RM) $(addprefix $(DESTDIR)$(prefix)/include/liquid/, $(headers_install))\nuninstall:\n\t@echo \"uninstalling...\"\n\t$(RM) $(DESTDIR)$(prefix)/include/liquid/liquid.h\n\t$(RM) $(DESTDIR)$(libdir)/libliquid.${AR_LIB}\n\t$(RM) $(DESTDIR)$(libdir)/libliquid.${SH_LIB}.${VERSION}\n\t$(RM) $(DESTDIR)$(libdir)/libliquid.${SH_LIB}.${SOVERSION}\n\t$(RM) $(DESTDIR)$(libdir)/libliquid.${SH_LIB}\n\t@echo \"done.\"\n\n##\n## autoscript\n##\n\nautoscript : scripts/autoscript\n\nscripts/autoscript.o scripts/main.o : %.o : %.c\n\t$(CC) $(CPPFLAGS) $(CFLAGS) -c -o $@ $<\n\nscripts/autoscript : scripts/autoscript.o scripts/main.o\n\t$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $^ $(LIBS)\n\nclean-autoscript :\n\t$(RM) scripts/autoscript.o scripts/main.o scripts/autoscript\n\n\n##\n## TARGET : check     - build and run autotest scripts\n##\n\n# Autotests are used to check the validity and accuracy of the\n# DSP libraries.\n\n.PHONY: autotest\nautotest_prog = xautotest\n\n# run the autotest generator script to create autotest_include.h\nautotest_include.h : scripts/autoscript $(autotest_sources) $(include_headers)\n\t./scripts/autoscript $(PATHSEP) autotest $(autotest_sources) > $@\n\n# autotest objects\n# NOTE: by default, gcc compiles any file with a '.h' extension as a 'pre-compiled\n#       header' so we need to explicitly tell it to compile as a c source file with\n#       the '-x c' flag\nautotest_obj = $(patsubst %.c,%.o,$(autotest_sources))\n$(autotest_obj) $(autotest_extra_obj) autotest/autotest.o : %.o : %.c $(include_headers) autotest/autotest.h\n\t$(CC) $(CPPFLAGS) $(CFLAGS) $< -c -o $@\n\n# compile the autotest program without linking\n$(autotest_prog).o : autotest/xautotest.c autotest/autotest.h autotest_include.h\n\t$(CC) $(CPPFLAGS) $(CFLAGS) $< -c -o $@\n\n# link the autotest program with the objects\n# NOTE: linked libraries must come _after_ the target program\n$(autotest_prog): $(autotest_prog).o $(autotest_obj) $(autotest_extra_obj) autotest/autotest.o ${ARCHIVE_LIB}\n\t$(CC) $(CFLAGS) $(LDFLAGS) $^ -o $@ $(LIBS)\n\n# run the autotest program\ncheck: $(autotest_prog)\n\t./$(autotest_prog) -v -o autotest.json\n\n# let 'make test' be an alias for 'make check'\ntest: check\n\n# clean the generated files\nclean-check:\n\t$(RM) autotest_include.h $(autotest_prog).o $(autotest_prog)\n\t$(RM) $(autotest_obj)\n\t$(RM) $(autotest_extra_obj)\n\t$(RM) autotest/autotest.o\n\t$(RM) autotest.json\n\t$(RM) autotest/logs/*.m autotest/logs/*.dat\n\t$(RM) autotest/logs/*.bin autotest/logs/*.gnu autotest/logs/*.png\n\n##\n## TARGET : check-doc - build and run basic documentation checks\n##\n\nreadme.c.example.c : README.md\n\t${SED} -n '23,43p' $< | ${SED} \"s/<liquid\\/liquid.h>/\\\"liquid.h\\\"/g\" > $@\n\nreadme.c.example.o : %.o : %.c ${include_headers}\n\t${CC} ${CPPFLAGS} ${CFLAGS} $< -c -o $@\n\nreadme.c.example : % : %.o ${ARCHIVE_LIB}\n\t${CC} ${CFLAGS} ${LDFLAGS} $^ -o $@ ${LIBS}\n\nreadme.cc.example.cc : README.md\n\t${SED} -n '152,173p' $< | ${SED} \"s/<liquid\\/liquid.h>/\\\"liquid.h\\\"/g\" > $@\n\nreadme.cc.example.o : %.o : %.cc ${include_headers}\n\t${CXX} ${CPPFLAGS} ${CXXFLAGS} $< -c -o $@\n\nreadme.cc.example : % : %.o ${ARCHIVE_LIB}\n\t${CXX} ${CXXFLAGS} ${LDFLAGS} $^ -o $@ ${LIBS}\n\ncheck-doc-c : readme.c.example ; ./readme.c.example\n\ncheck-doc-cc : readme.cc.example ; ./readme.cc.example\n\ncheck-doc : check-doc-c check-doc-cc\n\nclean-check-doc:\n\t${RM} readme.*.example*\n\n##\n## TARGET : coverage  - run coverage test and produce report\n##\ncoverage: coverage.out\n\ttail -n5 $<\n\n${autotest_prog}.gcda : %.gcda : %\n\t./${autotest_prog}\n\ncoverage.out : ${autotest_prog}.gcda\n\tgcovr --root=src --exclude-directories=src/.*/tests --print-summary > $@\n\nclean-coverage:\n\t$(RM) src/*.gcda src/*/src/*.gcda src/*/tests/*.gcda src/*/tests/data/*.gcda autotest/*.gcda scripts/*.gcda\n\t$(RM) src/*.gcno src/*/src/*.gcno src/*/tests/*.gcno src/*/tests/data/*.gcno autotest/*.gcno scripts/*.gcno\n\t$(RM) autotest/*.gcda bench/*.gcda examples/*.gcda sandbox/*.gcda\n\t$(RM) autotest/*.gcno bench/*.gcno examples/*.gcno sandbox/*.gcno\n\t$(RM) *.gcda *.gcno coverage.out\n\n\n##\n## TARGET : bench     - build and run all benchmarks\n##\n\n# Benchmarks measure the relative speed of the DSP algorithms running\n# on the target platform.\n.PHONY: bench\nbench_prog\t= benchmark\nBENCH_CPPFLAGS\t= $(CPPFLAGS)\nBENCH_CFLAGS\t= -Wall $(CFLAGS)\nBENCH_LDFLAGS\t= $(LDFLAGS)\nBENCH_LIBS\t= $(LIBS)\n\n# run the benchmark generator script to create benchmark_include.h\nbenchmark_include.h : scripts/autoscript $(benchmark_sources) $(include_headers)\n\t./scripts/autoscript $(PATHSEP) benchmark $(benchmark_sources) > $@\n\n# benchmark objects\n# NOTE: by default, gcc compiles any file with a '.h' extension as a 'pre-compiled\n#       header' so we need to explicitly tell it to compile as a c source file with\n#       the '-x c' flag\nbenchmark_obj = $(patsubst %.c,%.o,$(benchmark_sources))\n$(benchmark_obj) : %.o : %.c $(include_headers)\n\t$(CC) $(BENCH_CPPFLAGS) $(BENCH_CFLAGS) $< -c -o $@\n\n# additional benchmark objects\n$(benchmark_extra_obj) : %.o : %.c $(include_headers)\n\n# compile the benchmark program without linking\n$(bench_prog).o: bench/bench.c benchmark_include.h bench/bench.c\n\t$(CC) $(BENCH_CPPFLAGS) $(BENCH_CFLAGS) $< -c -o $(bench_prog).o\n\n# link the benchmark program with the library objects\n# NOTE: linked libraries must come _after_ the target program\n$(bench_prog): $(bench_prog).o $(benchmark_obj) $(benchmark_extra_obj) ${ARCHIVE_LIB}\n\t$(CC) $(BENCH_CFLAGS) $(BENCH_LDFLAGS) $^ -o $(bench_prog) $(BENCH_LIBS)\n\n# run the benchmark program\nbench: $(bench_prog)\n\t./$(bench_prog) -o benchmark.json\n\n# fftbench program\nbench/fftbench.o : %.o : %.c\n\t$(CC) $(BENCH_CPPFLAGS) $(BENCH_CFLAGS) $< -c -o $@\n\nbench/fftbench : % : %.o ${ARCHIVE_LIB}\n\t$(CC) $(BENCH_CFLAGS) $(BENCH_LDFLAGS) $^ -o $@ $(BENCH_LIBS)\n\n# clean up the generated files\nclean-bench:\n\t$(RM) benchmark_include.h $(bench_prog).o $(bench_prog)\n\t$(RM) $(benchmark_obj)\n\t$(RM) $(benchmark_extra_obj)\n\t$(RM) bench/fftbench.o\n\t$(RM) bench/fftbench\n\n\n## \n## TARGET : examples  - build all examples binaries\n##\n.PHONY: examples\nexample_programs :=\t\t\t\t\t\t\\\n\texamples/agc_crcf_example\t\t\t\t\\\n\texamples/agc_crcf_squelch_example\t\t\t\\\n\texamples/agc_crcf_qpsk_example\t\t\t\t\\\n\texamples/agc_rrrf_example\t\t\t\t\\\n\texamples/ampmodem_example\t\t\t\t\\\n\texamples/asgramcf_example\t\t\t\t\\\n\texamples/asgramf_example\t\t\t\t\\\n\texamples/autocorr_cccf_example\t\t\t\t\\\n\texamples/bpacketsync_example\t\t\t\t\\\n\texamples/bpresync_example\t\t\t\t\\\n\texamples/bsequence_example\t\t\t\t\\\n\texamples/cbufferf_example\t\t\t\t\\\n\texamples/cgsolve_example\t\t\t\t\\\n\texamples/channel_cccf_example\t\t\t\t\\\n\texamples/compand_example\t\t\t\t\\\n\texamples/compand_cf_example\t\t\t\t\\\n\texamples/complementary_codes_example\t\t\t\\\n\texamples/conversion_example\t\t\t\t\\\n\texamples/crc_example\t\t\t\t\t\\\n\texamples/cpfskmodem_example\t\t\t\t\\\n\texamples/cpfskmodem_psd_example\t\t\t\t\\\n\texamples/cvsd_example\t\t\t\t\t\\\n\texamples/detector_cccf_example\t\t\t\t\\\n\texamples/dds_cccf_example\t\t\t\t\\\n\texamples/dsssframe64sync_performance_example\t\t\\\n\texamples/dsssframe64sync_example\t\t\t\\\n\texamples/dsssframesync_example\t\t\t\t\\\n\texamples/dotprod_rrrf_example\t\t\t\t\\\n\texamples/dotprod_cccf_example\t\t\t\t\\\n\texamples/eqlms_cccf_block_example\t\t\t\\\n\texamples/eqlms_cccf_blind_example\t\t\t\\\n\texamples/eqlms_cccf_decisiondirected_example\t\t\\\n\texamples/eqlms_cccf_example\t\t\t\t\\\n\texamples/eqrls_cccf_example\t\t\t\t\\\n\texamples/error_handling_example\t\t\t\t\\\n\texamples/fec_example\t\t\t\t\t\\\n\texamples/fec_soft_example\t\t\t\t\\\n\texamples/fdelay_rrrf_example\t\t\t\t\\\n\texamples/fft_example\t\t\t\t\t\\\n\texamples/fftfilt_crcf_example\t\t\t\t\\\n\texamples/firdecim_crcf_example\t\t\t\t\\\n\texamples/firfarrow_rrrf_example\t\t\t\t\\\n\texamples/firfilt_cccf_example\t\t\t\t\\\n\texamples/firfilt_cccf_notch_example\t\t\t\\\n\texamples/firfilt_crcf_copy_example\t\t\t\\\n\texamples/firfilt_crcf_example\t\t\t\t\\\n\texamples/firfilt_crcf_dcblocker_example\t\t\t\\\n\texamples/firfilt_rrrf_example\t\t\t\t\\\n\texamples/firdes_doppler_example\t\t\t\t\\\n\texamples/firdes_kaiser_example\t\t\t\t\\\n\texamples/firdespm_callback_example\t\t\t\\\n\texamples/firdespm_halfband_example\t\t\t\\\n\texamples/firdespm_example\t\t\t\t\\\n\texamples/firdespm_lowpass_example\t\t\t\\\n\texamples/firhilb_example\t\t\t\t\\\n\texamples/firhilb_decim_example\t\t\t\t\\\n\texamples/firhilb_filter_example\t\t\t\t\\\n\texamples/firhilb_interp_example\t\t\t\t\\\n\texamples/firpfb_rrrf_example\t\t\t\t\\\n\texamples/firpfbch2_crcf_example\t\t\t\t\\\n\texamples/firpfbch2_crcf_reconstruct_example\t\t\\\n\texamples/firpfbchr_crcf_example\t\t\t\t\\\n\texamples/firinterp_crcf_example\t\t\t\t\\\n\texamples/firinterp_firdecim_crcf_example\t\t\\\n\texamples/firinterp_rrrf_linear_example\t\t\t\\\n\texamples/firinterp_rrrf_window_example\t\t\t\\\n\texamples/firpfbch_crcf_example\t\t\t\t\\\n\texamples/firpfbch_crcf_analysis_example\t\t\t\\\n\texamples/firpfbch_crcf_msource_example\t\t\t\\\n\texamples/firpfbch_crcf_synthesis_example\t\t\\\n\texamples/flexframesync_debug_example\t\t\t\\\n\texamples/flexframesync_example\t\t\t\t\\\n\texamples/flexframesync_reconfig_example\t\t\t\\\n\texamples/framesync64_example\t\t\t\t\\\n\texamples/framesync64_performance_example\t\t\\\n\texamples/freqmodem_example\t\t\t\t\\\n\texamples/fskframesync_example\t\t\t\t\\\n\texamples/fskmodem_example\t\t\t\t\\\n\texamples/fskmodem_waterfall_example\t\t\t\\\n\texamples/gasearch_example\t\t\t\t\\\n\texamples/gasearch_knapsack_example\t\t\t\\\n\texamples/gmskframesync_example\t\t\t\t\\\n\texamples/gmskmodem_example\t\t\t\t\\\n\texamples/gmskmodem_ber_example\t\t\t\t\\\n\texamples/gmsk_eqlms_example\t\t\t\t\\\n\texamples/gmsk_tracking_example\t\t\t\t\\\n\texamples/gradsearch_datafit_example\t\t\t\\\n\texamples/gradsearch_example\t\t\t\t\\\n\texamples/interleaver_example\t\t\t\t\\\n\texamples/interleaver_soft_example\t\t\t\\\n\texamples/interleaver_scatterplot_example\t\t\\\n\texamples/iirdes_example\t\t\t\t\t\\\n\texamples/iirdes_analog_example\t\t\t\t\\\n\texamples/iirdes_pll_example\t\t\t\t\\\n\texamples/iirdecim_crcf_example\t\t\t\t\\\n\texamples/iirfilt_cccf_example\t\t\t\t\\\n\texamples/iirfilt_crcf_example\t\t\t\t\\\n\texamples/iirfilt_crcf_dcblocker_example\t\t\t\\\n\texamples/iirfilt_rrrf_integrator_example\t\t\\\n\texamples/iirhilb_example\t\t\t\t\\\n\texamples/iirhilb_filter_example\t\t\t\t\\\n\texamples/iirinterp_crcf_example\t\t\t\t\\\n\texamples/kaiser_window_example\t\t\t\t\\\n\texamples/kbd_window_example\t\t\t\t\\\n\texamples/lpc_example\t\t\t\t\t\\\n\texamples/libliquid_example\t\t\t\t\\\n\texamples/matched_filter_example\t\t\t\t\\\n\texamples/math_lngamma_example\t\t\t\t\\\n\texamples/math_primitive_root_example\t\t\t\\\n\texamples/modem_arb_example\t\t\t\t\\\n\texamples/modem_ber_example\t\t\t\t\\\n\texamples/modem_example\t\t\t\t\t\\\n\texamples/modem_pi4dqpsk_example\t\t\t\t\\\n\texamples/modem_soft_example\t\t\t\t\\\n\texamples/modular_arithmetic_example\t\t\t\\\n\texamples/msequence_autocorr_example\t\t\t\\\n\texamples/msequence_example\t\t\t\t\\\n\texamples/msequence_generator_example\t\t\t\\\n\texamples/msourcecf_example\t\t\t\t\\\n\texamples/msresamp_crcf_example\t\t\t\t\\\n\texamples/msresamp_crcf_noise_example\t\t\t\\\n\texamples/msresamp2_crcf_example\t\t\t\t\\\n\texamples/nco_crcf_mix_example\t\t\t\t\\\n\texamples/nco_crcf_tone_example\t\t\t\t\\\n\texamples/nco_example\t\t\t\t\t\\\n\texamples/nco_pll_example\t\t\t\t\\\n\texamples/nco_pll_real_example\t\t\t\t\\\n\texamples/nco_pll_modem_example\t\t\t\t\\\n\texamples/nyquist_filter_example\t\t\t\t\\\n\texamples/ofdmflexframesync_example\t\t\t\\\n\texamples/ofdmframesync_example\t\t\t\t\\\n\texamples/ordfilt_rrrf_example\t\t\t\t\\\n\texamples/packetizer_example\t\t\t\t\\\n\texamples/packetizer_soft_example\t\t\t\\\n\texamples/pll_example\t\t\t\t\t\\\n\texamples/polyfit_comparison_example\t\t\t\\\n\texamples/polyfit_example\t\t\t\t\\\n\texamples/polyfit_lagrange_example\t\t\t\\\n\texamples/poly_findroots_example\t\t\t\t\\\n\texamples/qdetector_cccf_example\t\t\t\t\\\n\texamples/qdsync_cccf_example\t\t\t\t\\\n\texamples/qdsync_cccf_performance_example\t\t\\\n\texamples/qpacketmodem_performance_example\t\t\\\n\texamples/qpacketmodem_example\t\t\t\t\\\n\texamples/qpilotsync_example\t\t\t\t\\\n\texamples/qnsearch_example\t\t\t\t\\\n\texamples/qs1dsearch_example\t\t\t\t\\\n\texamples/quantize_example\t\t\t\t\\\n\texamples/random_histogram_example\t\t\t\\\n\texamples/repack_bytes_example\t\t\t\t\\\n\texamples/rresamp_crcf_example\t\t\t\t\\\n\texamples/rresamp_crcf_partition_example\t\t\t\\\n\texamples/rresamp_crcf_rnyquist_example\t\t\t\\\n\texamples/rresamp_rrrf_example\t\t\t\t\\\n\texamples/resamp_crcf_example\t\t\t\t\\\n\texamples/resamp_crcf_noise_example\t\t\t\\\n\texamples/resamp_crcf_rate_match_example\t\t\t\\\n\texamples/resamp2_cccf_example\t\t\t\t\\\n\texamples/resamp2_crcf_example\t\t\t\t\\\n\texamples/resamp2_crcf_decim_example\t\t\t\\\n\texamples/resamp2_crcf_filter_example\t\t\t\\\n\texamples/resamp2_crcf_interp_example\t\t\t\\\n\texamples/ricek_channel_example\t\t\t\t\\\n\texamples/scramble_example\t\t\t\t\\\n\texamples/smatrix_example\t\t\t\t\\\n\texamples/spgramcf_example\t\t\t\t\\\n\texamples/spgramf_example\t\t\t\t\\\n\texamples/spwaterfallcf_example\t\t\t\t\\\n\texamples/symsync_crcf_example\t\t\t\t\\\n\texamples/symsync_crcf_full_example\t\t\t\\\n\texamples/symsync_crcf_kaiser_example\t\t\t\\\n\texamples/symstreamcf_delay_example\t\t\t\\\n\texamples/symstreamcf_example\t\t\t\t\\\n\texamples/symstreamrcf_delay_example\t\t\t\\\n\texamples/symstreamrcf_example\t\t\t\t\\\n\texamples/symtrack_cccf_example\t\t\t\t\\\n\texamples/wdelayf_example\t\t\t\t\\\n\texamples/windowf_example\t\t\t\t\\\n\texamples/window_enbw_example\t\t\t\t\\\n\texamples/windowing_example\t\t\t\t\\\n\n#\texamples/metadata_example\n#\texamples/ofdmframegen_example\n#\texamples/gmskframe_example\n#\texamples/fading_generator_example\n\nexample_objects\t= $(patsubst %,%.o,$(example_programs))\nexamples: $(example_programs)\n\n# NOTE: linked libraries must come _after_ the target program\n$(example_objects): %.o : %.c\n\n$(example_programs): % : %.o ${ARCHIVE_LIB}\n\t$(CC) $(CFLAGS) $(LDFLAGS) $^ -o $@ $(LIBS)\n\n# clean examples\nclean-examples:\n\t$(RM) examples/*.o\n\t$(RM) $(example_programs)\n\n## \n## TARGET : sandbox   - build all sandbox binaries\n##\n\n# NOTE: sandbox _requires_ fftw3 to build\n.PHONY: sandbox\nsandbox_programs =\t\t\t\t\t\t\\\n\tsandbox/am_demod_dsb_peak_detect_test\t\t\t\\\n\tsandbox/am_demod_dsb_pll_carrier_test\t\t\t\\\n\tsandbox/am_demod_dsb_pll_costas_test\t\t\t\\\n\tsandbox/am_demod_ssb_pll_carrier_test\t\t\t\\\n\tsandbox/bpresync_test\t\t\t\t\t\\\n\tsandbox/chromosome_test\t\t\t\t\t\\\n\tsandbox/cpmodem_test\t\t\t\t\t\\\n\tsandbox/count_ones_gentab\t\t\t\t\\\n\tsandbox/crc_gentab\t\t\t\t\t\\\n\tsandbox/ellip_func_test\t\t\t\t\t\\\n\tsandbox/ellip_test\t\t\t\t\t\\\n\tsandbox/eqlms_cccf_test\t\t\t\t\t\\\n\tsandbox/fecsoft_ber_test\t\t\t\t\\\n\tsandbox/fec_g2412product_test\t\t\t\t\\\n\tsandbox/fec_golay2412_test\t\t\t\t\\\n\tsandbox/fec_golay_test\t\t\t\t\t\\\n\tsandbox/fec_hamming3126_example\t\t\t\t\\\n\tsandbox/fec_hamming128_test\t\t\t\t\\\n\tsandbox/fec_hamming128_gentab\t\t\t\t\\\n\tsandbox/fec_hamming128_example\t\t\t\t\\\n\tsandbox/fec_hamming74_gentab\t\t\t\t\\\n\tsandbox/fec_hamming84_gentab\t\t\t\t\\\n\tsandbox/fec_hamming_test\t\t\t\t\\\n\tsandbox/fec_ldpc_test\t\t\t\t\t\\\n\tsandbox/fec_rep3_test\t\t\t\t\t\\\n\tsandbox/fec_rep5_test\t\t\t\t\t\\\n\tsandbox/fec_secded2216_test\t\t\t\t\\\n\tsandbox/fec_secded3932_test\t\t\t\t\\\n\tsandbox/fec_secded7264_test\t\t\t\t\\\n\tsandbox/fec_spc2216_test\t\t\t\t\\\n\tsandbox/fec_secded_punctured_test\t\t\t\\\n\tsandbox/fecsoft_conv_test\t\t\t\t\\\n\tsandbox/fecsoft_hamming128_gentab\t\t\t\\\n\tsandbox/fecsoft_ldpc_test\t\t\t\t\\\n\tsandbox/fec_sumproduct_test\t\t\t\t\\\n\tsandbox/fskcorr_test\t\t\t\t\t\\\n\tsandbox/fskmodem_test\t\t\t\t\t\\\n\tsandbox/fft_dual_radix_test\t\t\t\t\\\n\tsandbox/fft_mixed_radix_test\t\t\t\t\\\n\tsandbox/fft_recursive_plan_test\t\t\t\t\\\n\tsandbox/fft_recursive_test\t\t\t\t\\\n\tsandbox/fft_rader_prime_test\t\t\t\t\\\n\tsandbox/fft_rader_prime_radix2_test\t\t\t\\\n\tsandbox/fft_r2r_test\t\t\t\t\t\\\n\tsandbox/firdes_energy_test\t\t\t\t\\\n\tsandbox/firdes_fexp_test\t\t\t\t\\\n\tsandbox/firdes_gmskrx_test\t\t\t\t\\\n\tsandbox/firdes_group_delay_test\t\t\t\t\\\n\tsandbox/firdes_length_test\t\t\t\t\\\n\tsandbox/firdespm_halfband_test\t\t\t\t\\\n\tsandbox/firfarrow_rrrf_test\t\t\t\t\\\n\tsandbox/firfilt_dcblocker_test\t\t\t\t\\\n\tsandbox/firpfbch_analysis_alignment_test\t\t\\\n\tsandbox/firpfbch2_analysis_equivalence_test\t\t\\\n\tsandbox/firpfbch2_test\t\t\t\t\t\\\n\tsandbox/firpfbch2_flatness_test\t\t\t\t\\\n\tsandbox/firpfbch_analysis_equivalence_test\t\t\\\n\tsandbox/firpfbch_synthesis_equivalence_test\t\t\\\n\tsandbox/gmskmodem_test\t\t\t\t\t\\\n\tsandbox/gmskmodem_coherent_test\t\t\t\t\\\n\tsandbox/gmskmodem_equalizer_test\t\t\t\\\n\tsandbox/gmskmodem_psd_filter_compare_test\t\t\\\n\tsandbox/householder_test\t\t\t\t\\\n\tsandbox/iirdes_test\t\t\t\t\t\\\n\tsandbox/iirdes_gradsearch_test\t\t\t\t\\\n\tsandbox/iirfilt_intdiff_test\t\t\t\t\\\n\tsandbox/levinson_test\t\t\t\t\t\\\n\tsandbox/matched_filter_test\t\t\t\t\\\n\tsandbox/matched_filter_cfo_test\t\t\t\t\\\n\tsandbox/math_lngamma_test\t\t\t\t\\\n\tsandbox/math_cacosf_test\t\t\t\t\\\n\tsandbox/math_casinf_test\t\t\t\t\\\n\tsandbox/math_catanf_test\t\t\t\t\\\n\tsandbox/math_cexpf_test\t\t\t\t\t\\\n\tsandbox/math_clogf_test\t\t\t\t\t\\\n\tsandbox/math_csqrtf_test\t\t\t\t\\\n\tsandbox/matrix_test\t\t\t\t\t\\\n\tsandbox/minsearch_test\t\t\t\t\t\\\n\tsandbox/minsearch2_test\t\t\t\t\t\\\n\tsandbox/matrix_eig_test\t\t\t\t\t\\\n\tsandbox/modem_demodulate_arb_gentab\t\t\t\\\n\tsandbox/modem_demodulate_soft_test\t\t\t\\\n\tsandbox/modem_demodulate_soft_gentab\t\t\t\\\n\tsandbox/mskmodem_test\t\t\t\t\t\\\n\tsandbox/msresamp_crcf_test\t\t\t\t\\\n\tsandbox/ofdmoqam_firpfbch_test\t\t\t\t\\\n\tsandbox/ofdm_ber_test\t\t\t\t\t\\\n\tsandbox/ofdmframe_papr_test\t\t\t\t\\\n\tsandbox/ofdmframesync_cfo_test\t\t\t\t\\\n\tsandbox/pll_3rd_order_test\t\t\t\t\\\n\tsandbox/pll_design_test\t\t\t\t\t\\\n\tsandbox/predemod_sync_test\t\t\t\t\\\n\tsandbox/quasinewton_test\t\t\t\t\\\n\tsandbox/recursive_qpsk_test\t\t\t\t\\\n\tsandbox/resamp2_crcf_filterbank_test\t\t\t\\\n\tsandbox/resamp2_crcf_interp_recreate_test\t\t\\\n\tsandbox/reverse_byte_gentab\t\t\t\t\\\n\tsandbox/rhamming_test\t\t\t\t\t\\\n\tsandbox/rkaiser2_test\t\t\t\t\t\\\n\tsandbox/shadowing_test\t\t\t\t\t\\\n\tsandbox/simplex_test\t\t\t\t\t\\\n\tsandbox/symsync_crcf_test\t\t\t\t\\\n\tsandbox/symsync_eqlms_test\t\t\t\t\\\n\tsandbox/svd_test\t\t\t\t\t\\\n\tsandbox/thiran_allpass_iir_test\t\t\t\t\\\n\tsandbox/vectorcf_test\t\t\t\t\t\\\n\n#\tsandbox/packetizer_persistent_ber_test\n#\tfirpfbch_analysis_test\n#\tsandbox/ofdmoqam_firpfbch_cfo_test\n#\tsandbox/mdct_test\n#\tsandbox/fct_test\n#\tsandbox/throttle_test # needs -lrt for certain gcc versions, rpi3\n\n\nsandbox_objects\t= $(patsubst %,%.o,$(sandbox_programs))\nsandbox: $(sandbox_programs)\nSANDBOX_LDFLAGS = $(LDFLAGS) -lfftw3f\n\n# NOTE: linked libraries must come _after_ the target program\n$(sandbox_objects): %.o : %.c\n\n$(sandbox_programs): % : %.o ${ARCHIVE_LIB}\n\t$(CC) $(CFLAGS) $^ -o $@ $(LDFLAGS) $(LIBS)\n\n# clean sandbox\nclean-sandbox:\n\t$(RM) sandbox/*.o\n\t$(RM) $(sandbox_programs)\n\n##\n## TARGET : check-link- test linking to installed library\n##\n\n# run program, ensuring proper error code\ncheck-link: scripts/liquid_linker_test ; ./$<\n\n# use subset of compiler flags so we don't try to build or link against\n# local files\nscripts/liquid_linker_test.o : %.o : %.c\n\t$(CC) -c -Wall -O2 -o $@ $<\n\nscripts/liquid_linker_test : % : %.o\n\t$(CC) -Wall -O2 -o $@ $< -L/usr/local/lib ${LIBS} -lliquid\n\nextra_clean += scripts/liquid_linker_test.o scripts/liquid_linker_test\n\n##\n## TARGET : programs  - build all programs, but don't run anything\n##\nprograms: all xautotest benchmark examples sandbox\n\n##\n## TARGET : world     - build absolutely everything\n##\nworld : all bench check check-doc examples sandbox\n\n##\n## TARGET : clean     - clean build (objects, dependencies, libraries, etc.)\n##\n\n.PHONY: clean\n\nclean-modules:\n\t@echo \"cleaning modules...\"\n\t$(RM) src/*/src/*.o src/*/bench/*.o src/*/tests/*.o\n\t$(RM) src/libliquid.o\n\nclean: clean-modules clean-autoscript clean-check clean-coverage clean-bench clean-examples clean-sandbox clean-check-doc\n\t$(RM) ${ARCHIVE_LIB} ${SHARED_LIB} $(extra_clean)\n\n##\n## TARGET : distclean - removes everything except the originally distributed files\n##\n\ndistclean: clean\n\t@echo \"cleaning distribution...\"\n\t$(RM) octave-core *_example.m\n\t$(RM) configure config.h config.h.in config.h.in~ config.log config.status\n\t$(RM) -r autom4te.cache\n\t$(RM) aclocal.m4\n\t$(RM) makefile\n\n"
        },
        {
          "name": "sandbox",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}