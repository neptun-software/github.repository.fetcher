{
  "metadata": {
    "timestamp": 1736710244785,
    "page": 988,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjk5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "SuperHouse/esp-open-rtos",
      "stars": 1545,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dir-locals.el",
          "type": "blob",
          "size": 0.7568359375,
          "content": "(\n (nil\n  )\n (c-mode\n  (indent-tabs-mode . nil)\n  (c-file-style . \"bsd\")\n  (c-basic-offset . 4)\n  )\n (asm-mode\n  (indent-tabs-mode . nil)\n  ; this is basically a hack so asm-mode indents with spaces not tabs\n  ; taken from http://stackoverflow.com/questions/2668563/emacs-indentation-in-asm-mode\n  ; (moving to gas-mode may be a better choice)\n  (tab-stop-list (quote (4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100 104 108 112 116 120)))\n  (asm-comment-char . \"#\")\n  )\n )\n\n; IMPORTANT: If you want to write assembly and have indenting to not be infuriating,\n; you probably also want this in your .emacs file:\n;\n; (add-hook 'asm-mode-hook '(lambda () (setq indent-line-function 'indent-relative)))\n;\n; This is not safe to set as a local variable.\n\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.08984375,
          "content": "*~\n*#\n.#*\nGPATH\nGRTAGS\nGTAGS\nbuild\nfirmware\n.gdb_history\nlocal.mk\nlocal.h\nscreenlog.*\n*.swp\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 1.720703125,
          "content": "[submodule \"lwip/lwip\"]\n\tpath = lwip/lwip\n\turl = https://github.com/ourairquality/lwip.git\n[submodule \"extras/mbedtls/mbedtls\"]\n\tpath = extras/mbedtls/mbedtls\n\turl = https://github.com/ARMmbed/mbedtls.git\n[submodule \"extras/jsmn/jsmn\"]\n\tpath = extras/jsmn/jsmn\n\turl = https://github.com/zserge/jsmn.git\n[submodule \"bootloader/rboot\"]\n\tpath = bootloader/rboot\n\turl = https://github.com/raburton/rboot.git\n[submodule \"extras/spiffs/spiffs\"]\n\tpath = extras/spiffs/spiffs\n\turl = https://github.com/pellepl/spiffs.git\n[submodule \"tests/unity\"]\n\tpath = tests/unity\n\turl = https://github.com/ThrowTheSwitch/Unity.git\n[submodule \"tests/fs-test\"]\n\tpath = tests/fs-test\n\turl = https://github.com/sheinz/fs-test\n[submodule \"extras/bearssl/BearSSL\"]\n\tpath = extras/bearssl/BearSSL\n\turl = https://www.bearssl.org/git/BearSSL\n[submodule \"extras/http-parser/http-parser\"]\n\tpath = extras/http-parser/http-parser\n\turl = https://github.com/nodejs/http-parser\n[submodule \"extras/crc_generic/crc_lib\"]\n\tpath = extras/crc_generic/crc_lib\n\turl = https://github.com/Zaltora/crc_generic_lib.git\n[submodule \"extras/libesphttpd/libesphttpd\"]\n\tpath = extras/libesphttpd/libesphttpd\n\turl = https://github.com/nochkin/libesphttpd\n[submodule \"extras/libesphttpd/libesphttpd/lib/heatshrink\"]\n\tpath = extras/libesphttpd/libesphttpd/lib/heatshrink\n\turl = https://github.com/atomicobject/heatshrink\n[submodule \"extras/multipwm\"]\n\tpath = extras/multipwm\n\turl = https://github.com/nochkin/multipwm\n[submodule \"lvgl/lvgl\"]\n\tpath = lvgl/lvgl\n\turl = https://github.com/littlevgl/lvgl.git\n[submodule \"lvgl/lv_drivers\"]\n\tpath = lvgl/lv_drivers\n\turl = https://github.com/littlevgl/lv_drivers.git\n[submodule \"lvgl/lv_examples\"]\n\tpath = lvgl/lv_examples\n\turl = https://github.com/littlevgl/lv_examples.git\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.1484375,
          "content": "language: c\nsudo: false\nenv:\n  # Target commit for https://github.com/pfalcon/esp-open-sdk/\n  OPENSDK_COMMIT=b069537\n  CROSS_ROOT=\"${HOME}/toolchain-${OPENSDK_COMMIT}\"\n  CROSS_BINDIR=\"${CROSS_ROOT}/bin\"\n  CROSS=\"ccache xtensa-lx106-elf-\"\n  MAKE_CMD=\"make WARNINGS_AS_ERRORS=1 -C examples/ build-examples\"\n  PATH=${PATH}:${CROSS_BINDIR}\ncache:\n  directories:\n    - ${CROSS_ROOT}\naddons:\n  apt:\n    packages:\n    - make\n    - unrar\n    - autoconf\n    - automake\n    - libtool\n    - gcc\n    - g++\n    - gperf\n    - flex\n    - bison\n    - texinfo\n    - gawk\n    - libncurses5-dev\n    - libexpat1-dev\n    - python\n    - python-pip\n    - sed\n    - git\n    - help2man\n    - vim-common\n    - zlib1g-dev\n\nbefore_install:\n  - pip install --user pyserial\n  - travis_wait 30 utils/travis_build/install_toolchain.sh\n\nscript:\n  - cd ${TRAVIS_BUILD_DIR}\n  # Remove ssid_config requirement for examples\n  - echo -e '#define WIFI_SSID \"mywifissid\"\\n#define WIFI_PASS \"my secret password\"\\n' > include/private_ssid_config.h\n  # Don't verbose-build all examples (too much output), only verbose-build errors\n  - ( ${MAKE_CMD} ) || ( ${MAKE_CMD} V=1 )\n  # build bootloader\n  - make -C bootloader/\n"
        },
        {
          "name": "FreeRTOS",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.46484375,
          "content": "Copyright (c) 2015, SuperHouse Automation Pty Ltd\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.744140625,
          "content": "# esp-open-rtos\n\nA community developed open source [FreeRTOS](http://www.freertos.org/)-based framework for ESP8266 WiFi-enabled microcontrollers. Intended for use in both commercial and open source projects.\n\nOriginally based on, but substantially different from, the [Espressif IOT RTOS SDK](https://github.com/espressif/ESP8266_RTOS_SDK).\n\n## Resources\n\n[![Build Status](https://travis-ci.org/SuperHouse/esp-open-rtos.svg?branch=master)](https://travis-ci.org/SuperHouse/esp-open-rtos)\n\nEmail discussion list: https://groups.google.com/d/forum/esp-open-rtos\n\nIRC channel: #esp-open-rtos on Freenode ([Web Chat Link](http://webchat.freenode.net/?channels=%23esp-open-rtos&uio=d4)).\n\nGithub issues list/bugtracker: https://github.com/superhouse/esp-open-rtos/issues\n\nPlease note that this project is released with a [Contributor Code of Conduct](https://github.com/SuperHouse/esp-open-rtos/blob/master/code_of_conduct.md). By participating in this project you agree to abide by its terms.\n\n## Quick Start\n\n* Install [esp-open-sdk](https://github.com/pfalcon/esp-open-sdk/), build it with `make toolchain esptool libhal STANDALONE=n`, then edit your PATH and add the generated toolchain `bin` directory. The path will be something like `/path/to/esp-open-sdk/xtensa-lx106-elf/bin`. (Despite the similar name esp-open-sdk has different maintainers - but we think it's fantastic!)\n\n    (Other toolchains may also work, as long as a gcc cross-compiler is available on the PATH and libhal (and libhal headers) are compiled and available to gcc. The proprietary Tensilica \"xcc\" compiler will probably not work.)\n\n* Install [esptool.py](https://github.com/themadinventor/esptool) and make it available on your PATH. If you used esp-open-sdk then this is done already.\n\n* The esp-open-rtos build process uses `GNU Make`, and the utilities `sed` and `grep`. If you built esp-open-sdk then you have these already.\n\n* Use git to clone the esp-open-rtos project (note the `--recursive`):\n\n```\ngit clone --recursive https://github.com/Superhouse/esp-open-rtos.git\ncd esp-open-rtos\n```\n\n* To build any examples that use WiFi, create `include/private_ssid_config.h` defining the two macro defines:\n\n```c\n#define WIFI_SSID \"mywifissid\"\n#define WIFI_PASS \"my secret password\"\n```\n\n* Build an example project (found in the 'examples' directory) and flash it to a serial port:\n\n```\nmake flash -j4 -C examples/http_get ESPPORT=/dev/ttyUSB0\n```\n\nRun `make help -C examples/http_get` for a summary of other Make targets.\n\n(Note: the `-C` option to make is the same as changing to that directory, then running make.)\n\nThe [Build Process wiki page](https://github.com/SuperHouse/esp-open-rtos/wiki/Build-Process) has in-depth details of the build process.\n\n## Goals\n\n* Provide professional-quality framework for WiFi-enabled RTOS projects on ESP8266.\n* Open source code for all layers above the MAC layer, ideally lower layers if possible (this is a work in progress, see [Issues list](https://github.com/superhouse/esp-open-rtos/issues).\n* Leave upstream source clean, for easy interaction with upstream projects.\n* Flexible build and compilation settings.\n\nCurrent status is alpha quality, actively developed. AP STATION mode (ie wifi client mode) and UDP/TCP client modes are tested. Other functionality should work. Contributors and testers are welcome!\n\n## Code Structure\n\n* `examples` contains a range of example projects (one per subdirectory). Check them out!\n* `include` contains header files from Espressif RTOS SDK, relating to the binary libraries & Xtensa core.\n* `core` contains source & headers for low-level ESP8266 functions & peripherals. `core/include/esp` contains useful headers for peripheral access, etc. Minimal to no FreeRTOS dependencies.\n* `extras` is a directory that contains optional components that can be added to your project. Most 'extras' components will have a corresponding example in the `examples` directory. Extras include:\n   - mbedtls - [mbedTLS](https://tls.mbed.org/) is a TLS/SSL library providing up to date secure connectivity and encryption support.\n   - i2c - software i2c driver ([upstream project](https://github.com/kanflo/esp-open-rtos-driver-i2c))\n   - rboot-ota - OTA support (over-the-air updates) including a TFTP server for receiving updates ([for rboot by @raburton](http://richard.burtons.org/2015/05/18/rboot-a-new-boot-loader-for-esp8266/))\n   - bmp180 driver for digital pressure sensor ([upstream project](https://github.com/Angus71/esp-open-rtos-driver-bmp180))\n* `FreeRTOS` contains FreeRTOS implementation, subdirectory structure is the standard FreeRTOS structure. `FreeRTOS/source/portable/esp8266/` contains the ESP8266 port.\n* `lwip` contains the lwIP TCP/IP library. See [Third Party Libraries](https://github.com/SuperHouse/esp-open-rtos/wiki/Third-Party-Libraries) wiki page for details.\n* `libc` contains the newlib libc. [Libc details here](https://github.com/SuperHouse/esp-open-rtos/wiki/libc-configuration).\n\n## Open Source Components\n\n* [FreeRTOS](http://www.freertos.org/) V10.2.0\n* [lwIP](http://lwip.wikia.com/wiki/LwIP_Wiki) v2.0.3, with [some modifications](https://github.com/ourairquality/lwip/).\n* [newlib](https://github.com/ourairquality/newlib) v3.0.0, with patches for xtensa support and locking stubs for thread-safe operation on FreeRTOS.\n\nFor details of how third party libraries are integrated, [see the wiki page](https://github.com/SuperHouse/esp-open-rtos/wiki/Third-Party-Libraries).\n\n## Binary Components\n\nBinary libraries (inside the `lib` dir) are all supplied by Espressif as part of their RTOS SDK. These parts were MIT Licensed.\n\nAs part of the esp-open-rtos build process, all binary SDK symbols are prefixed with `sdk_`. This makes it easier to differentiate binary & open source code, and also prevents namespace conflicts.\n\nEspressif's RTOS SDK provided a \"libssl\" based on axTLS. This has been replaced with the more up to date mbedTLS library (see below).\n\nSome binary libraries appear to contain unattributed open source code:\n\n* libnet80211.a & libwpa.a appear to be based on FreeBSD net80211/wpa, or forks of them. ([See this issue](https://github.com/SuperHouse/esp-open-rtos/issues/4)).\n* libudhcp has been removed from esp-open-rtos. It was released with the Espressif RTOS SDK but udhcp is GPL licensed.\n\n## Licensing\n\n* BSD license (as described in LICENSE) applies to original source files, [lwIP](http://lwip.wikia.com/wiki/LwIP_Wiki). lwIP is Copyright (C) Swedish Institute of Computer Science.\n\n* FreeRTOS (since v10) is provided under the MIT license. License details in files under FreeRTOS dir. FreeRTOS is Copyright (C) Amazon.\n\n* Source & binary components from the [Espressif IOT RTOS SDK](https://github.com/espressif/esp_iot_rtos_sdk) were released under the MIT license. Source code components are relicensed here under the BSD license. The original parts are Copyright (C) Espressif Systems.\n\n* Newlib is covered by several copyrights and licenses, as per the files in the `libc` directory.\n\n* [mbedTLS](https://tls.mbed.org/) is provided under the Apache 2.0 license as described in the file extras/mbedtls/mbedtls/apache-2.0.txt. mbedTLS is Copyright (C) ARM Limited.\n\nComponents under `extras/` may contain different licenses, please see those directories for details.\n\n## Contributions\n\nContributions are very welcome!\n\n* If you find a bug, [please raise an issue to report it](https://github.com/superhouse/esp-open-rtos/issues).\n\n* If you have feature additions or bug fixes then please send a pull request.\n\n* There is a list of outstanding 'enhancements' in the [issues list](https://github.com/superhouse/esp-open-rtos/issues). Contributions to these, as well as other improvements, are very welcome.\n\nIf you are contributing code, *please ensure that it can be licensed under the BSD open source license*. Specifically:\n\n* Code from Espressif IoT SDK cannot be merged, as it is provided under either the \"Espressif General Public License\" or the \"Espressif MIT License\", which are not compatible with the BSD license.\n\n* Recent releases of the Espressif IoT RTOS SDK cannot be merged, as they changed from MIT License to the \"Espressif MIT License\" which is not BSD compatible. The Espressif binaries used in esp-open-rtos were taken from [revision ec75c85, as this was the last MIT Licensed revision](https://github.com/espressif/ESP8266_RTOS_SDK/commit/43585fa74550054076bdf4bfe185e808ad0da83e).\n\nFor code submissions based on reverse engineered binary functionality, please either reverse engineer functionality from MIT Licensed Espressif releases or make sure that the reverse engineered code does not directly copy the code structure of the binaries - it cannot be a \"derivative work\" of an incompatible binary.\n\nThe best way to write suitable code is to first add documentation somewhere like the [esp8266 reverse engineering wiki](http://esp8266-re.foogod.com/) describing factual information gained from reverse engineering - such as register addresses, bit masks, orders of register writes, etc. Then write new functions referring to that documentation as reference material.\n\n## Coding Style\n\nFor new contributions in C, please use BSD style and indent using 4 spaces.\n\nFor assembly, please use the following:\n* Instructions indented using 8 spaces.\n* Inline comments use `#` as a comment delimiter.\n* Comments on their own line(s) use `/*`..`*/`.\n* First operand of each instruction should be vertically aligned where possible.\n* For xtensa special registers, prefer `wsr aX, SR` over `wsr.SR aX`\n\nIf you're an emacs user then there is a .dir-locals.el file in the root which configures cc-mode and asm-mode (you will need to approve some variable values as safe). See also\nthe additional comments in .dir-locals.el, if you're editing assembly code.\n\nUpstream code is left with the indentation and style of the upstream project.\n\n## Sponsors\n\nWork on parts of esp-open-rtos has been sponsored by [SuperHouse Automation](http://superhouse.tv/).\n"
        },
        {
          "name": "bootloader",
          "type": "tree",
          "content": null
        },
        {
          "name": "code_of_conduct.md",
          "type": "blob",
          "size": 1.9345703125,
          "content": "# Contributor Code of Conduct\n\nAs contributors and maintainers of this project, and in the interest of fostering an open and welcoming community, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities.\n\nWe are committed to making participation in this project a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, or nationality.\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery\n* Personal attacks\n* Trolling or insulting/derogatory comments\n* Public or private harassment\n* Publishing other's private information, such as physical or electronic addresses, without explicit permission\n* Other unethical or unprofessional conduct.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct. By adopting this Code of Conduct, project maintainers commit themselves to fairly and consistently applying these principles to every aspect of managing this project. Project maintainers who do not follow or enforce the Code of Conduct may be permanently removed from the project team.\n\nThis code of conduct applies both within project spaces and in public spaces when an individual is representing the project or its community.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by opening an issue or contacting one or more of the project maintainers.\n\nThis Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.2.0, available at [http://contributor-covenant.org/version/1/2/0/](http://contributor-covenant.org/version/1/2/0/)\n"
        },
        {
          "name": "common.mk",
          "type": "blob",
          "size": 11.423828125,
          "content": "# esp-open-rtos common Makefile\n#\n# ******************************************************************\n# Run 'make help' in any example subdirectory to see a usage summary\n# (or skip to the bottom of this file!)\n#\n# For example, from the top level run:\n# make help -C examples/http_get\n# ******************************************************************\n#\n# In-depth documentation is at https://github.com/SuperHouse/esp-open-rtos/wiki/Build-Process\n#\n# Most sections Copyright 2015 Superhouse Automation Pty Ltd\n# BSD Licensed as described in the file LICENSE at top level.\n#\n# This makefile is adapted from the esp-mqtt makefile by @tuanpmt\n# https://github.com/tuanpmt/esp_mqtt, but it has changed very significantly\n# since then.\n\n# assume the 'root' directory (ie top of the tree) is the directory common.mk is in\nROOT := $(dir $(lastword $(MAKEFILE_LIST)))\n\ninclude $(ROOT)parameters.mk\n\nifndef PROGRAM\n$(error \"Set the PROGRAM environment variable in your Makefile before including common.mk\")\nendif\n\n# hacky way to get a single space value\nempty :=\nspace := $(empty) $(empty)\n\n# GNU Make lowercase function, bit of a horrorshow but works (courtesy http://stackoverflow.com/a/665045)\nlc = $(subst A,a,$(subst B,b,$(subst C,c,$(subst D,d,$(subst E,e,$(subst F,f,$(subst G,g,$(subst H,h,$(subst I,i,$(subst J,j,$(subst K,k,$(subst L,l,$(subst M,m,$(subst N,n,$(subst O,o,$(subst P,p,$(subst Q,q,$(subst R,r,$(subst S,s,$(subst T,t,$(subst U,u,$(subst V,v,$(subst W,w,$(subst X,x,$(subst Y,y,$(subst Z,z,$1))))))))))))))))))))))))))\n\n# assume the program dir is the directory the top-level makefile was run in\nPROGRAM_DIR := $(dir $(firstword $(MAKEFILE_LIST)))\n\n# derive various parts of compiler/linker arguments\nSDK_LIB_ARGS  = $(addprefix -l,$(SDK_LIBS))\nLIB_ARGS      = $(addprefix -l,$(LIBS))\nPROGRAM_OUT   = $(BUILD_DIR)$(PROGRAM).out\nLDFLAGS      += $(addprefix -T,$(LINKER_SCRIPTS))\n\nFW_FILE = $(addprefix $(FIRMWARE_DIR),$(PROGRAM).bin)\n\n# Common include directories, shared across all \"components\"\n# components will add their include directories to this argument\n#\n# Placing $(PROGRAM_DIR) and $(PROGRAM_DIR)include first allows\n# programs to have their own copies of header config files for components\n# , which is useful for overriding things.\nINC_DIRS      = $(PROGRAM_DIR) $(PROGRAM_DIR)include $(ROOT)include\n\nifeq ($(OWN_LIBC),1)\n    INC_DIRS += $(ROOT)libc/xtensa-lx106-elf/include\n    LDFLAGS += -L$(ROOT)libc/xtensa-lx106-elf/lib\n   ifeq ($(PRINTF_SCANF_FLOAT_SUPPORT),1)\n     LDFLAGS += -u _printf_float -u _scanf_float\n   endif\nendif\n\nifeq (\"$(V)\",\"1\")\nQ :=\nvecho := @true\nelse\nQ := @\nvecho := @echo\nendif\n\n.PHONY: all clean flash erase_flash test size rebuild\n\nall: $(PROGRAM_OUT) $(FW_FILE_1) $(FW_FILE_2) $(FW_FILE)\n\n# component_compile_rules: Produces compilation rules for a given\n# component\n#\n# For user-facing documentation, see:\n# https://github.com/SuperHouse/esp-open-rtos/wiki/Build-Process#adding-a-new-component\n#\n# Call arguments are:\n# $(1) - component name\n#\n# Expects that the following component-specific variables are defined:\n#\n# $(1)_ROOT    = Top-level dir containing component. Can be in-tree or out-of-tree.\n#                (if this variable isn't defined, directory containing component.mk is used)\n# $(1)_SRC_DIR = List of source directories for the component. All must be under $(1)_ROOT\n# $(1)_INC_DIR = List of include directories specific for the component\n#\n#\n# Each call appends to COMPONENT_ARS or WHOLE_ARCHIVES which are lists of archive files for compiled components\nCOMPONENT_ARS =\nWHOLE_ARCHIVES =\ndefine component_compile_rules\n$(1)_DEFAULT_ROOT := $(dir $(lastword $(MAKEFILE_LIST)))\n$(1)_ROOT ?= $$($(1)_DEFAULT_ROOT)\n$(1)_OBJ_DIR   = $(call lc,$(BUILD_DIR)$(1)/)\n### determine source files and object files ###\n$(1)_SRC_FILES ?= $$(foreach sdir,$$($(1)_SRC_DIR), \t\t\t\t\\\n\t\t\t$$(wildcard $$(sdir)/*.c) $$(wildcard $$(sdir)/*.S) \t\\\n\t\t\t$$(wildcard $$(sdir)/*.cpp)) \t\t\t\t\\\n\t\t\t$$($(1)_EXTRA_SRC_FILES)\n$(1)_REAL_SRC_FILES = $$(foreach sfile,$$($(1)_SRC_FILES),$$(realpath $$(sfile)))\n$(1)_REAL_ROOT = $$(realpath $$($(1)_ROOT))\n# patsubst here substitutes real component root path for the relative OBJ_DIR path, making things short again\n$(1)_OBJ_FILES_CXX = $$(patsubst $$($(1)_REAL_ROOT)%.cpp,$$($(1)_OBJ_DIR)%.o,$$($(1)_REAL_SRC_FILES))\n$(1)_OBJ_FILES_C = $$(patsubst $$($(1)_REAL_ROOT)%.c,$$($(1)_OBJ_DIR)%.o,$$($(1)_OBJ_FILES_CXX))\n$(1)_OBJ_FILES = $$(patsubst $$($(1)_REAL_ROOT)%.S,$$($(1)_OBJ_DIR)%.o,$$($(1)_OBJ_FILES_C))\n# the last included makefile is our component's component.mk makefile (rebuild the component if it changes)\n$(1)_MAKEFILE ?= $(lastword $(MAKEFILE_LIST))\n\n### determine compiler arguments ###\n$(1)_CPPFLAGS ?= $(CPPFLAGS)\n$(1)_CFLAGS ?= $(CFLAGS)\n$(1)_CXXFLAGS ?= $(CXXFLAGS)\n$(1)_CC_BASE = $(Q) $(CC) $$(addprefix -I,$$(INC_DIRS)) $$(addprefix -I,$$($(1)_INC_DIR)) $$($(1)_CPPFLAGS)\n$(1)_AR = $(call lc,$(BUILD_DIR)$(1).a)\n\n$$($(1)_OBJ_DIR)%.o: $$($(1)_REAL_ROOT)%.c $$($(1)_MAKEFILE) $(wildcard $(ROOT)*.mk) | $$($(1)_SRC_DIR)\n\t$(vecho) \"CC $$<\"\n\t$(Q) mkdir -p $$(dir $$@)\n\t$$($(1)_CC_BASE) $$($(1)_CFLAGS) -c $$< -o $$@\n\t$$($(1)_CC_BASE) $$($(1)_CFLAGS) -MM -MT $$@ -MF $$(@:.o=.d) $$<\n\n$$($(1)_OBJ_DIR)%.o: $$($(1)_REAL_ROOT)%.cpp $$($(1)_MAKEFILE) $(wildcard $(ROOT)*.mk) | $$($(1)_SRC_DIR)\n\t$(vecho) \"C++ $$<\"\n\t$(Q) mkdir -p $$(dir $$@)\n\t$$($(1)_CC_BASE) $$($(1)_CXXFLAGS) -c $$< -o $$@\n\t$$($(1)_CC_BASE) $$($(1)_CXXFLAGS) -MM -MT $$@ -MF $$(@:.o=.d) $$<\n\n$$($(1)_OBJ_DIR)%.o: $$($(1)_REAL_ROOT)%.S $$($(1)_MAKEFILE) $(wildcard $(ROOT)*.mk) | $$($(1)_SRC_DIR)\n\t$(vecho) \"AS $$<\"\n\t$(Q) mkdir -p $$(dir $$@)\n\t$$($(1)_CC_BASE) -c $$< -o $$@\n\t$$($(1)_CC_BASE) -MM -MT $$@ -MF $$(@:.o=.d) $$<\n\n$(1)_AR_IN_FILES = $$($(1)_OBJ_FILES)\n\n# The component is shown to depend on both obj and source files so we get\n# a meaningful error message for missing explicitly named source files.\n# But do not include source files into a static library because when adding this\n# library with '--whole-archive' linker gives error that archive contains\n# unknown objects (source files)\nifndef $(1)_WHOLE_ARCHIVE\n   $(1)_AR_IN_FILES += $$($(1)_SRC_FILES)\nendif\n\n$$($(1)_AR): $$($(1)_AR_IN_FILES)\n\t$(vecho) \"AR $$@\"\n\t$(Q) mkdir -p $$(dir $$@)\n\t$(Q) $(AR) cru $$@ $$^\n\nifdef $(1)_WHOLE_ARCHIVE\n   WHOLE_ARCHIVES += $$($(1)_AR)\nelse\n   COMPONENT_ARS += $$($(1)_AR)\nendif\n\n-include $$($(1)_OBJ_FILES:.o=.d)\nendef\n\n# Remove comment lines from libgcc.remove file\n$(BUILD_DIR)libgcc.remove: $(ROOT)lib/libgcc.remove | $(BUILD_DIR)\n\t$(Q) grep -v \"^#\" $< | cat > $@\n\n# Remove unwanted object files listed in libgcc.remove\n$(BUILD_DIR)libgcc.a: $(ROOT)lib/libgcc.a $(BUILD_DIR)libgcc.remove | $(BUILD_DIR)\n\t@echo \"Removing unwanted objects from $<\"\n\t$(Q) cat $< > $@\n\t$(Q) $(AR) d $@ @$(word 2,$^)\n\n# Remove comment lines from libc.remove file\n$(BUILD_DIR)libc.remove: $(ROOT)libc/libc.remove | $(BUILD_DIR)\n\t$(Q) grep -v \"^#\" $< | cat > $@\n\n# Remove unwanted object files listed in libgcc.remove\n$(BUILD_DIR)libc.a: $(ROOT)libc/xtensa-lx106-elf/lib/libc.a $(BUILD_DIR)libc.remove | $(BUILD_DIR)\n\t@echo \"Removing unwanted objects from $<\"\n\t$(Q) cat $< > $@\n\t$(Q) $(AR) d $@ @$(word 2,$^)\n\n## Linking rules for SDK libraries\n## SDK libraries are preprocessed to:\n# - remove object files named in <libname>.remove\n# - prefix all defined symbols with 'sdk_'\n# - weaken all global symbols so they can be overriden from the open SDK side\n#\n# SDK binary libraries are preprocessed into $(BUILD_DIR)/sdklib\nSDK_PROCESSED_LIBS = $(addsuffix .a,$(addprefix $(BUILD_DIR)sdklib/lib,$(SDK_LIBS)))\n\n# Make rules for preprocessing each SDK library\n\n# hacky, but prevents confusing error messages if one of these files disappears\n$(ROOT)lib/%.remove:\n\ttouch $@\n\n# Remove comment lines from <libname>.remove files\n$(BUILD_DIR)sdklib/%.remove: $(ROOT)lib/%.remove | $(BUILD_DIR)sdklib\n\t$(Q) grep -v \"^#\" $< | cat > $@\n\n# Stage 1: remove unwanted object files listed in <libname>.remove alongside each library\n$(BUILD_DIR)sdklib/%_stage1.a: $(ROOT)lib/%.a $(BUILD_DIR)sdklib/%.remove | $(BUILD_DIR)sdklib\n\t@echo \"SDK processing stage 1: Removing unwanted objects from $<\"\n\t$(Q) cat $< > $@\n\t$(Q) $(AR) d $@ @$(word 2,$^)\n\n# Stage 2: Redefine all SDK symbols as sdk_, weaken all symbols.\n$(BUILD_DIR)sdklib/%.a: $(BUILD_DIR)sdklib/%_stage1.a $(ROOT)lib/allsymbols.rename\n\t@echo \"SDK processing stage 2: Renaming symbols in SDK library $< -> $@\"\n\t$(Q) $(OBJCOPY) --redefine-syms $(word 2,$^) --weaken $< $@\n\n# include \"dummy component\" for the 'program' object files, defined in the Makefile\nPROGRAM_SRC_DIR ?= $(PROGRAM_DIR)\nPROGRAM_ROOT ?= $(PROGRAM_DIR)\nPROGRAM_MAKEFILE = $(firstword $(MAKEFILE_LIST))\n$(eval $(call component_compile_rules,PROGRAM))\n\n## Include other components (this is where the actual compiler sections are generated)\n##\n## if component directory exists relative to $(ROOT), use that.\n## otherwise try to resolve it as an absolute path\n$(foreach component,$(COMPONENTS), \t\t\t\t\t\\\n\t$(if $(wildcard $(ROOT)$(component)),\t\t\t\t\\\n\t\t$(eval include $(ROOT)$(component)/component.mk), \t\\\n\t\t$(eval include $(component)/component.mk)\t\t\\\n\t)\t\t\t\t\t\t\t\t\\\n)\n\n# final linking step to produce .elf\n$(PROGRAM_OUT): $(WHOLE_ARCHIVES) $(COMPONENT_ARS) $(BUILD_DIR)libgcc.a $(BUILD_DIR)libc.a $(SDK_PROCESSED_LIBS) $(LINKER_SCRIPTS)\n\t$(vecho) \"LD $@\"\n\t$(Q) $(LD) $(LDFLAGS) -Wl,--whole-archive $(WHOLE_ARCHIVES) -Wl,--no-whole-archive -Wl,--start-group $(COMPONENT_ARS) $(BUILD_DIR)libgcc.a $(BUILD_DIR)libc.a $(LIB_ARGS) $(SDK_LIB_ARGS) -Wl,--end-group -o $@\n\n$(BUILD_DIR) $(FIRMWARE_DIR) $(BUILD_DIR)sdklib:\n\t$(Q) mkdir -p $@\n\n$(FW_FILE_1) $(FW_FILE_2): $(PROGRAM_OUT) $(FIRMWARE_DIR)\n\t$(vecho) \"FW $@\"\n\t$(Q) $(ESPTOOL) elf2image $(ESPTOOL_ARGS) $< -o $(FIRMWARE_DIR)\n\n$(FW_FILE): $(PROGRAM_OUT) $(FIRMWARE_DIR)\n\t$(vecho) \"FW $@\"\n\t$(Q) $(ESPTOOL) elf2image --version=2 $(ESPTOOL_ARGS) $< -o $(FW_FILE)\n\nflash: all\n\t$(if will_flash, $(call will_flash, \"flash\"))\n\t$(ESPTOOL) -p $(ESPPORT) --baud $(ESPBAUD) write_flash $(ESPTOOL_ARGS) \\\n\t\t$(RBOOT_ARGS) 0x2000 $(FW_FILE) $(SPIFFS_ESPTOOL_ARGS)\n\t$(if did_flash, $(call did_flash, \"flash\"))\n\nerase_flash:\n\t$(if will_flash, $(call will_flash, \"erase\"))\n\t$(ESPTOOL) -p $(ESPPORT) --baud $(ESPBAUD) erase_flash\n\t$(if did_flash, $(call did_flash, \"erase\"))\n\nsize: $(PROGRAM_OUT)\n\t$(Q) $(CROSS)size --format=sysv $(PROGRAM_OUT)\n\ntest: flash\n\t$(FILTEROUTPUT) --port $(ESPPORT) --baud 115200 --elf $(PROGRAM_OUT)\n\n# the rebuild target is written like this so it can be run in a parallel build\n# environment without causing weird side effects\nrebuild:\n\t$(MAKE) clean\n\t$(MAKE) all\n\nclean:\n\t$(Q) rm -rf $(BUILD_DIR)\n\t$(Q) rm -rf $(FIRMWARE_DIR)\n\n# prevent \"intermediate\" files from being deleted\n.SECONDARY:\n\n# print some useful help stuff\nhelp:\n\t@echo \"esp-open-rtos make\"\n\t@echo \"\"\n\t@echo \"Other targets:\"\n\t@echo \"\"\n\t@echo \"all\"\n\t@echo \"Default target. Will build firmware including any changed source files.\"\n\t@echo\n\t@echo \"clean\"\n\t@echo \"Delete all build output.\"\n\t@echo \"\"\n\t@echo \"rebuild\"\n\t@echo \"Build everything fresh from scratch.\"\n\t@echo \"\"\n\t@echo \"flash\"\n\t@echo \"Build then upload firmware to MCU. Set ESPPORT & ESPBAUD to override port/baud rate.\"\n\t@echo \"\"\n\t@echo \"test\"\n\t@echo \"'flash', then start a GNU Screen session on the same serial port to see serial output.\"\n\t@echo \"\"\n\t@echo \"size\"\n\t@echo \"Build, then print a summary of built firmware size.\"\n\t@echo \"\"\n\t@echo \"TIPS:\"\n\t@echo \"* You can use -jN for parallel builds. Much faster! Use 'make rebuild' instead of 'make clean all' for parallel builds.\"\n\t@echo \"* You can create a local.mk file to create local overrides of variables like ESPPORT & ESPBAUD.\"\n\t@echo \"\"\n\t@echo \"SAMPLE COMMAND LINE:\"\n\t@echo \"make -j2 test ESPPORT=/dev/ttyUSB0\"\n\t@echo \"\"\n\n\n"
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "extras",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "ld",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "libc",
          "type": "tree",
          "content": null
        },
        {
          "name": "lvgl",
          "type": "tree",
          "content": null
        },
        {
          "name": "lwip",
          "type": "tree",
          "content": null
        },
        {
          "name": "open_esplibs",
          "type": "tree",
          "content": null
        },
        {
          "name": "parameters.mk",
          "type": "blob",
          "size": 4.646484375,
          "content": "# Parameters for the esp-open-rtos make process\n#\n# You can edit this file to change parameters, but a better option is\n# to create a local.mk file and add overrides there. The local.mk file\n# can be in the root directory, or the program directory alongside the\n# Makefile, or both.\n#\n-include $(ROOT)local.mk\n-include local.mk\n\n# Flash size in megabits\n# Valid values are same as for esptool.py - 2,4,8,16,32\nFLASH_SIZE ?= 16\n\n# Flash mode, valid values are same as for esptool.py - qio,qout,dio.dout\nFLASH_MODE ?= qio\n\n# Flash speed in MHz, valid values are same as for esptool.py - 80, 40, 26, 20\nFLASH_SPEED ?= 40\n\n# Output directories to store intermediate compiled files\n# relative to the program directory\nBUILD_DIR ?= $(PROGRAM_DIR)build/\nFIRMWARE_DIR ?= $(PROGRAM_DIR)firmware/\n\n# esptool.py from https://github.com/themadinventor/esptool\nESPTOOL ?= esptool.py\n# serial port settings for esptool.py\nESPPORT ?= /dev/ttyUSB0\nESPBAUD ?= 115200\n\n# firmware tool arguments\nESPTOOL_ARGS=-fs $(FLASH_SIZE)m -fm $(FLASH_MODE) -ff $(FLASH_SPEED)m\n\n\n# set this to 0 if you don't need floating point support in printf/scanf\n# this will save approx 14.5KB flash space and 448 bytes of statically allocated\n# data RAM\n#\n# NB: Setting the value to 0 requires a recent esptool.py (Feb 2016 / commit ebf02c9)\nPRINTF_SCANF_FLOAT_SUPPORT ?= 1\n\nFLAVOR ?= release # or debug\n\n# Compiler names, etc. assume gdb\nCROSS ?= xtensa-lx106-elf-\n\n# Path to the filteroutput.py tool\nFILTEROUTPUT ?= $(ROOT)/utils/filteroutput.py\n\nAR = $(CROSS)ar\nCC = $(CROSS)gcc\nCPP = $(CROSS)cpp\nLD = $(CROSS)gcc\nNM = $(CROSS)nm\nC++ = $(CROSS)g++\nSIZE = $(CROSS)size\nOBJCOPY = $(CROSS)objcopy\nOBJDUMP = $(CROSS)objdump\n\n# Source components to compile and link. Each of these are subdirectories\n# of the root, with a 'component.mk' file.\nCOMPONENTS     ?= $(EXTRA_COMPONENTS) FreeRTOS lwip core open_esplibs\n\n# binary esp-iot-rtos SDK libraries to link. These are pre-processed prior to linking.\nSDK_LIBS\t\t?= main net80211 phy pp wpa\n\n# open source libraries linked in\nLIBS ?= hal\n\n# set to 0 if you want to use the toolchain libc instead of esp-open-rtos newlib\nOWN_LIBC ?= 1\n\n# Note: you will need a recent esp\nENTRY_SYMBOL ?= call_user_start\n\n# Set this to zero if you don't want individual function & data sections\n# (some code may be slightly slower, linking will be slighty slower,\n# but compiled code size will come down a small amount.)\nSPLIT_SECTIONS ?= 1\n\n# Set this to 1 to have all compiler warnings treated as errors (and stop the\n# build).  This is recommended whenever you are working on code which will be\n# submitted back to the main project, as all submitted code will be expected to\n# compile without warnings to be accepted.\nWARNINGS_AS_ERRORS ?= 0\n\n# Common flags for both C & C++_\nC_CXX_FLAGS ?= -Wall -Wl,-EL -nostdlib $(EXTRA_C_CXX_FLAGS)\n# Flags for C only\nCFLAGS\t\t?= $(C_CXX_FLAGS) -std=gnu99 $(EXTRA_CFLAGS)\n# Flags for C++ only\nCXXFLAGS\t?= $(C_CXX_FLAGS) -std=c++0x -fno-exceptions -fno-rtti $(EXTRA_CXXFLAGS)\n\n# these aren't all technically preprocesor args, but used by all 3 of C, C++, assembler\nCPPFLAGS\t+= -mlongcalls -mtext-section-literals\n\nLDFLAGS\t\t= -nostdlib -Wl,--no-check-sections -L$(BUILD_DIR)sdklib -L$(ROOT)lib -u $(ENTRY_SYMBOL) -Wl,-static -Wl,-Map=$(BUILD_DIR)$(PROGRAM).map $(EXTRA_LDFLAGS)\n\nifeq ($(WARNINGS_AS_ERRORS),1)\n    C_CXX_FLAGS += -Werror\nendif\n\nifeq ($(SPLIT_SECTIONS),1)\n  C_CXX_FLAGS += -ffunction-sections -fdata-sections\n  LDFLAGS += -Wl,-gc-sections\nendif\n\nifeq ($(FLAVOR),debug)\n    C_CXX_FLAGS += -g -O0\n    LDFLAGS += -g -O0\nelse ifeq ($(FLAVOR),sdklike)\n    # These are flags intended to produce object code as similar as possible to\n    # the output of the compiler used to build the SDK libs (for comparison of\n    # disassemblies when coding replacement routines).  It is not normally\n    # intended to be used otherwise.\n    CFLAGS += -O2 -Os -fno-inline -fno-ipa-cp -fno-toplevel-reorder -fno-caller-saves -fconserve-stack\n    LDFLAGS += -O2\nelse\n    C_CXX_FLAGS += -g -O2\n    LDFLAGS += -g -O2\nendif\n\nGITSHORTREV=\\\"$(shell cd $(ROOT); git rev-parse --short -q HEAD 2> /dev/null)\\\"\nifeq ($(GITSHORTREV),\\\"\\\")\n  GITSHORTREV=\"\\\"(nogit)\\\"\" # (same length as a short git hash)\nendif\nCPPFLAGS += -DGITSHORTREV=$(GITSHORTREV)\n\nLINKER_SCRIPTS += $(ROOT)ld/program.ld $(ROOT)ld/rom.ld\n\n# rboot firmware binary paths for flashing\nRBOOT_ARGS ?= 0x0 $(RBOOT_BIN) 0x1000 $(RBOOT_CONF)\nRBOOT_BIN = $(ROOT)bootloader/firmware/rboot.bin\nRBOOT_PREBUILT_BIN = $(ROOT)bootloader/firmware_prebuilt/rboot.bin\nRBOOT_CONF = $(ROOT)bootloader/firmware_prebuilt/blank_config.bin\n\n# if a custom bootloader hasn't been compiled, use the\n# prebuilt binary from the source tree\nifeq (,$(wildcard $(RBOOT_BIN)))\nRBOOT_BIN=$(RBOOT_PREBUILT_BIN)\nendif\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}