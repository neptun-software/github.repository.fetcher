{
  "metadata": {
    "timestamp": 1736710056206,
    "page": 671,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "0voice/algorithm-structure",
      "stars": 1968,
      "defaultBranch": "master",
      "files": [
        {
          "name": "2-3-4树算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "B*树算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "B+树算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "B树算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "KMP算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "LSM树算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 49.140625,
          "content": "<div align=left>\n\n# 2021年最新总结500个常用数据结构，算法，算法导论，面试常用，经典游戏，大厂高级工程师总结\n\n</div>\n<!--\n<div align=center>\n<img src=\"https://i.giphy.com/media/ly5Tyr9gHtPgdVkh44/giphy.gif\" width=\"320\" alt=\"小鸟\">\n</div>\n\n<br/>\n\n<!--\n> [数据结构和算法](#nav_01)\n>> [线性结构](#nav_01_01)\n>>>* 数组行优先顺序\n>>>* 数组列优先顺序\n>>>* 对称矩阵\n>>>* 三角矩阵\n>>>* 对角矩阵\n>>>* 稀疏矩阵\n>>>* 广义表\n>>>* 单向链表\n>>>* 双向链表\n>>>* 循环链表\n>>>* 静态栈\n>>>* 动态栈\n>>>* 顺序队列\n>>>* 循环队列\n>>>* 链式队列\n>>>\n>> [树形结构](#nav_01_02)\n>>>* 二叉树\n>>>* 平衡二叉树（AVL树）\n>>>* 二叉查找树（BST）\n>>>* 完全二叉树\n>>>* 伸展树\n>>>* LSM 树\n>>>* 哈夫曼树\n>>>* 红黑树\n>>>* B树\n>>>* B+树\n>>>* B\\*树\n>>>* 并查集\n>>>\n-->\n\n> [🦈 数据结构和算法](#nav_01)\n>> [〽 线性结构](#nav_01_01)\n>> \n>> [🌴 树形结构](#nav_01_02)\n>> \n>> [❄ 堆](#nav_01_03)\n>> \n>> [📊 图](#nav_01_04)\n>> \n>> [⚜ 排序算法](#nav_01_05)\n>> \n>> [💫 查找算法](#nav_01_06)\n>> \n>> [⭕ 搜寻算法](#nav_01_07)\n>> \n>> [🔱 推荐算法](#nav_01_08)\n>> \n>> [❇ 矩阵](#nav_01_09)\n>> \n>> [➰ 项目中常用算法](#nav_01_10)\n>> \n>> [➿ 大厂必会算法](#nav_01_11)\n>> \n> [🎡 C++项目](#nav_02)\n>> [💧 经典算法](#nav_02_01)\n>> \n>> [💤 实战项目](#nav_02_02)\n>>\n>> [🏮 经典项目](#nav_02_03)\n>> \n>> [🧲 经典游戏](#nav_02_04)\n>> \n>> [💿 视频讲解游戏](#nav_02_05)\n\n> [📒 附录](#nav_03)\n>> [📃 附录1](#nav_03_01)\n\n<br/>\n\n<!--\n##### [单向链表：初始化，添加，长度，判空，清空，获取结点，插入结点，删除结点](https://github.com/0voice/algorithm-structure/tree/master/单链表算法)\n\n##### [双向链表：初始化，获得头结点，获得尾结点， 插入结点，删除结点](https://github.com/0voice/algorithm-structure/blob/master/双向链表算法)\n\n##### [二叉树：创建二叉树，插入树结点，前序遍历，中序遍历，后续遍历，二叉树深度，叶结点个数](https://github.com/0voice/algorithm-structure/tree/master/二叉树算法)\n\n##### [红黑树：左旋，右旋，添加结点，删除结点，后继结点，查找](https://github.com/0voice/algorithm-structure/tree/master/红黑树算法)\n\n##### [B+树：创建b+树，插入结点，删除结点，合并结点，分裂结点，查询，遍历](https://github.com/0voice/algorithm-structure/tree/master/B+树算法)\n-->\n\n## <h3 id=\"nav_00_01\">[1800道数据结构和算法题(含答案)](https://github.com/0voice/algorithm-structure/blob/master/资料/数据结构1800题（含详解答案）.pdf) </h3>\n\n<br/>\n\n## <h2 id=\"nav_01\">🦈 数据结构和算法</h2>\n\n### <h3 id=\"nav_01_01\">〽 线性结构</h3> \n\n![image](https://user-images.githubusercontent.com/87458342/128833067-a42135c2-3ace-45f4-92a6-a954b71446e2.png)\n\n##### [数组行优先顺序](https://github.com/0voice/algorithm-structure/blob/master/数组行优先顺序/行优先.c)\n\n##### [数组列优先顺序](https://github.com/0voice/algorithm-structure/blob/master/数组列优先顺序/列优先.c)\n\n##### [广义表](https://github.com/0voice/algorithm-structure/blob/master/广义表/广义表.c)\n<!--\n![image](https://user-images.githubusercontent.com/87458342/129170160-43b37b0e-3f67-4984-a9b6-533f45177ce7.png)\n-->\n\n##### [单向链表：初始化，添加，长度，判空，清空，获取结点，插入结点，删除结点](https://github.com/0voice/algorithm-structure/tree/master/单链表算法)\n\n##### [双向链表：初始化，获得头结点，获得尾结点， 插入结点，删除结点](https://github.com/0voice/algorithm-structure/tree/master/双向链表算法)\n\n##### [循环链表](https://github.com/0voice/algorithm-structure/blob/master/循环链表算法/list_xzy.c)\n\n##### [静态栈：初始化，进栈，出栈](https://github.com/0voice/algorithm-structure/blob/master/静态栈/静态栈.c)\n\n##### [动态栈：初始化，进栈，出栈](https://github.com/0voice/algorithm-structure/blob/master/动态栈/动态栈.c)\n\n##### [顺序队列](https://github.com/0voice/algorithm-structure/blob/master/顺序队列/顺序队列.c)\n<!--\n![image](https://user-images.githubusercontent.com/87458342/129168275-74c13616-2c17-4e4b-b2fa-01c9c3af887e.png)\n-->\n\n##### [循环队列](https://github.com/0voice/algorithm-structure/blob/master/循环队列/循环队列.c)\n<!--\n![image](https://user-images.githubusercontent.com/87458342/129166726-69ec0a21-680b-4ed9-8ac6-5f8ed4b5ed0f.png)\n-->\n\n##### [链式队列](https://github.com/0voice/algorithm-structure/blob/master/链式队列/链式队列.c)\n<!--\n![image](https://img-blog.csdnimg.cn/20191220192454210.gif)\n\n![image](https://img-blog.csdnimg.cn/20191220192817457.gif)\n-->\n<br/>\n\n### <h3 id=\"nav_01_02\">🌴 树形结构</h3>\n\n![image](https://user-images.githubusercontent.com/87458342/129315486-3ce4ee38-4043-43aa-9e4f-cb405c3fb6fe.png)\n\n##### [二叉树：创建二叉树，插入树结点，前序遍历，中序遍历，后续遍历，二叉树深度，叶结点个数](https://github.com/0voice/algorithm-structure/tree/master/二叉树算法)\n\n##### [平衡二叉树（AVL树）](https://github.com/0voice/algorithm-structure/blob/master/平衡二叉树算法/AVLtree.c)\n\n##### [二叉查找树（BST）](https://github.com/0voice/algorithm-structure/blob/master/二叉查找树算法/BST.c)\n\n##### [完全二叉树](https://github.com/0voice/algorithm-structure/blob/master/完全二叉树算法/CBT.c)\n\n##### [伸展树](https://github.com/0voice/algorithm-structure/blob/master/伸展树算法)\n\n##### [LSM 树](https://github.com/0voice/algorithm-structure/blob/master/LSM树算法/LSM.c)\n\n##### [哈夫曼树](https://github.com/0voice/algorithm-structure/blob/master/哈夫曼树算法/huffman_tree.c)\n\n##### [2-3-4树](https://github.com/0voice/algorithm-structure/blob/master/2-3-4树算法/2-3-4.c)\n\n##### [红黑树：左旋，右旋，添加结点，删除结点，后继结点，查找](https://github.com/0voice/algorithm-structure/tree/master/红黑树算法)\n\n##### [B树](https://github.com/0voice/algorithm-structure/blob/master/B树算法/b_tree.c)\n\n##### [B+树：创建b+树，插入结点，删除结点，合并结点，分裂结点，查询，遍历](https://github.com/0voice/algorithm-structure/tree/master/B+树算法)\n\n##### [B\\*树](https://github.com/0voice/algorithm-structure/blob/master/B*树算法)\n\n##### [决策树](https://github.com/0voice/algorithm-structure/blob/master/决策树) \n\n##### [并查集](https://github.com/0voice/algorithm-structure/blob/master/并查集)\n\n<br/>\n\n### <h3 id=\"nav_01_03\">❄ 堆</h3>\n\n![image](https://user-images.githubusercontent.com/87458342/128842022-228783af-ddca-45b3-afba-cd0b41f4076c.png)\n\n##### [二叉堆](https://github.com/0voice/algorithm-structure/blob/master/二叉堆)\n##### [左倾堆](https://github.com/0voice/algorithm-structure/blob/master/左倾堆/)\n##### [斜堆](https://github.com/0voice/algorithm-structure/blob/master/斜堆)\n##### [二项堆](https://github.com/0voice/algorithm-structure/blob/master/二项堆)\n##### [斐波那契堆](https://github.com/0voice/algorithm-structure/blob/master/斐波那契堆)\n\n<br/>\n\n### <h3 id=\"nav_01_04\">📊 图</h3>\n\n![image](https://user-images.githubusercontent.com/87458342/128847587-8e909dda-6d2f-4e2c-9d17-acf0defa0d3b.png)\n\n##### [有向图](https://github.com/0voice/algorithm-structure/blob/master/图/有向图/有向图.c)\n<!--\n* 如果边是有方向的则称为有向图\n* ![image](https://user-images.githubusercontent.com/87458342/129164620-81651b53-6209-4aaa-bf28-ef45bd297a78.png)\n-->\n\n##### [无向图](https://github.com/0voice/algorithm-structure/blob/master/图/无向图/无向图.c)\n<!--\n* 如果边没有方向则称为无向图\n* ![image](https://user-images.githubusercontent.com/87458342/129164658-f21f198c-30e8-4660-83d9-1425a8ebb882.png)\n-->\n\n\n##### [无权图](https://github.com/0voice/algorithm-structure/blob/master/图/无权图/无权图.c)\n##### [带权图](https://github.com/0voice/algorithm-structure/blob/master/图/带权图/带权图.c)\n##### [完全图](https://github.com/0voice/algorithm-structure/blob/master/图/完全图/完全图.c)\n\n##### [深度优先搜索](https://github.com/0voice/algorithm-structure/blob/master/深度优先搜索/深度优先搜索.c)\n\n##### [广度优先搜索](https://github.com/0voice/algorithm-structure/blob/master/广度优先搜索/广度优先搜索.c)\n\n##### [迭代加深搜索（ID搜索）](https://github.com/0voice/algorithm-structure/blob/master/迭代加深搜索/迭代加深搜索.cpp)\n\n##### [约束满足搜索](https://github.com/0voice/algorithm-structure/blob/master/约束满足搜索/约束满足搜索.c)\n\n##### [爬山算法](https://github.com/0voice/algorithm-structure/blob/master/爬山算法/爬山算法.c)\n\n##### [模拟退火算法](https://github.com/0voice/algorithm-structure/blob/master/模拟退火算法/模拟退火算法.c)\n\n<br/>\n\n### <h3 id=\"nav_01_05\">⚜ 排序算法</h3>\n\n![image](https://user-images.githubusercontent.com/87458342/128860525-097f4434-0632-4e57-ad34-5bd773799c45.png)\n\n#### 算法复杂度\n\n排序算法   | 平均情况  |最好情况   |最坏情况   |空间复杂度  |稳定与否\n:---------|:---------|:----------|:---------|:----------|:-------\n冒泡排序   |O(n2)     |O(n2)      |O(n2)     |1          |稳定\n选择排序   |O(n2)     |O(n2)      |O(n2)     |1          |不稳定\n插入排序   |O(n2)     |O(n)       |O(n)      |1          |稳定\n希尔排序   |O(nlogn)  |依赖增量序列|依赖增量序列|1         |不稳定\n快速排列   |O(nlogn)  |O(nlogn)   |O(n2)     |O(logn)    |不稳定\n归并排序   |O(nlogn)  |O(nlogn)   |O(nlogn)  |O(n)       |稳定\n二叉树排序 |O(nlogn)  |O(nlogn)   |O(n2)     |O(n)       |稳定\n计数排序   |O(n+k)    |O(n+k)     |O(n+k)    |O(n+k)     |稳定\n桶排序     |O(n+k)    |O(n2)      |O(n)      |O(n+k)     |稳定\n堆排序     |O(nlogn)  |O(nlogn)   |O(nlogn)  |1          |不稳定\n拓扑排序   |O(N+E)    |-          |-         |O(n)       |-\n\n#### 算法动图演示\n\n算法动图演示请看 [📃 附录1](https://github.com/0voice/algorithm-structure#nav_03_01)\n\n\n##### [冒泡排序](https://github.com/0voice/algorithm-structure/blob/master/冒泡排序算法/BubbleSortMain.c)\n<!--\n![image](https://img-blog.csdnimg.cn/20190517142259572.gif)\n-->\n\n##### [插入排序](https://github.com/0voice/algorithm-structure/blob/master/插入排序算法/InsertSort.c)\n<!--\n![image](https://img-blog.csdnimg.cn/20190517142521855.gif)\n-->\n\n##### [希尔排序](https://github.com/0voice/algorithm-structure/blob/master/希尔排序算法/ShellSort.c)\n<!--\n![image](https://img-blog.csdnimg.cn/20190517142611755.gif)\n-->\n\n##### [选择排序](https://github.com/0voice/algorithm-structure/blob/master/选择排序算法/selectsort.c)\n<!--\n![image](https://img-blog.csdnimg.cn/20190517142411197.gif)\n-->\n\n##### [堆排序](https://github.com/0voice/algorithm-structure/blob/master/堆排序算法/heap_sort.c)\n<!--\n![image](https://img-blog.csdnimg.cn/20190517142825891.gif)\n-->\n\n##### [归并排序](https://github.com/0voice/algorithm-structure/blob/master/归并排序算法/mergesort.c)\n<!--\n![image](https://img-blog.csdnimg.cn/20190517142701685.gif)\n-->\n\n##### [桶排序](https://github.com/0voice/algorithm-structure/blob/master/桶排序/bin_sort_main.c)\n<!--![image](https://user-images.githubusercontent.com/87458342/128964956-08109273-3a90-463e-aec8-fe9c6adfbb0a.png)-->\n<!--\n![image](https://www.weixiuzhan.cn/file/upload/2020/5/7fqQNr.gif)\n-->\n\n##### [基数排序](https://github.com/0voice/algorithm-structure/blob/master/基数排序算法/DigitSort.c)\n<!--\n![image](https://img-blog.csdnimg.cn/20190517143109965.gif)\n-->\n\n##### [二叉树排序](https://github.com/0voice/algorithm-structure/tree/master/二叉树排序/binary_tree_sort.c)\n\n\n##### [计数排序](https://github.com/0voice/algorithm-structure/blob/master/计数排序算法/CountSort.c)\n<!--\n![image](https://img-blog.csdnimg.cn/20190517142910579.gif)\n-->\n\n##### [快速排序1](https://github.com/0voice/algorithm-structure/blob/master/快速排序算法/quick_sort.c)\n\n##### [快速排序2](https://github.com/0voice/algorithm-structure/blob/master/快速排序2/快速排序法(2).c)\n\n##### [快速排序3](https://github.com/0voice/algorithm-structure/blob/master/快速排序3/快速排序法(3).c)\n<!--\n![image](https://img-blog.csdnimg.cn/20190517142745730.gif)\n-->\n\n##### [拓扑排序](https://github.com/0voice/algorithm-structure/blob/master/拓扑排序算法/拓扑排序.c)\n<!--\n拓扑排序步骤：\n1. 删除1或2输出\n  ![image](https://user-images.githubusercontent.com/87458342/128965579-98f47154-f21d-4d49-a45b-cc1a3e59f182.png)\n2. 删除2或3以及对应边\n  ![image](https://user-images.githubusercontent.com/87458342/128965682-9d91ced1-29be-4caa-87b0-85eb02695160.png)\n3. 删除3或者4以及对应边\n  ![image](https://user-images.githubusercontent.com/87458342/128965721-6e7246ea-2f10-42c9-8599-1c3086519f68.png)\n4. 重复以上规则步骤\n  ![image](https://user-images.githubusercontent.com/87458342/128965777-e76c8231-6998-477c-987b-1dfe240be6df.png)\n-->\n\n<br/>\n\n### <h3 id=\"nav_01_06\">💫 查找算法</h3>\n\n![image](https://user-images.githubusercontent.com/87458342/128861307-8ed4884a-d42c-486d-8c0d-746008381033.png)\n\n##### [线性查找](https://github.com/0voice/algorithm-structure/blob/master/线性查找/线性查找.c)\n##### [顺序查找](https://github.com/0voice/algorithm-structure/blob/master/顺序查找/顺序查找.c)\n##### [二分查找](https://github.com/0voice/algorithm-structure/blob/master/二分查找算法/BinarySearch.c)\n##### [插值查找](https://github.com/0voice/algorithm-structure/blob/master/插值查找/插值查找.c)\n##### [斐波那契查找](https://github.com/0voice/algorithm-structure/blob/master/斐波那契查找/斐波那契查找.c)\n##### [树表查找](https://github.com/0voice/algorithm-structure/blob/master/树表查找)\n##### [分块查找](https://github.com/0voice/algorithm-structure/blob/master/分块查找/分块查找.c)\n##### [哈希查找](https://github.com/0voice/algorithm-structure/blob/master/哈希查找/哈希查找.c)\n\n<br/>\n\n### <h3 id=\"nav_01_07\">⭕ 搜寻算法</h3>\n\n![image](https://user-images.githubusercontent.com/87458342/128861753-a0420755-268f-4e9b-8174-10d17980f66a.png)\n\n##### [二分搜寻法](https://github.com/0voice/algorithm-structure/blob/master/二分搜寻法/二分搜寻法.c)\n##### [循序搜寻法](https://github.com/0voice/algorithm-structure/blob/master/循序搜寻法/循序搜寻法.c)\n##### [插补搜寻法](https://github.com/0voice/algorithm-structure/blob/master/插补搜寻法/插补搜寻法.c)\n##### [费氏搜寻法](https://github.com/0voice/algorithm-structure/blob/master/费氏搜寻法/费氏搜寻法.c)\n\n<br/>\n\n### <h3 id=\"nav_01_08\">🔱 推荐算法</h3>\n\n![image](https://user-images.githubusercontent.com/87458342/128861904-39a82f9a-b156-43f5-8ae4-4559b975f8b6.png)\n\n##### [协同过滤推荐算法](https://github.com/0voice/algorithm-structure/tree/master/推荐算法/协同过滤推荐算法)\n##### [基于内容的推荐算法](https://github.com/0voice/algorithm-structure/tree/master/推荐算法/基于内容的推荐算法)\n##### [混合推荐算法](https://github.com/0voice/algorithm-structure/tree/master/推荐算法/混合推荐算法)\n##### [流行度推荐算法](https://github.com/0voice/algorithm-structure/tree/master/推荐算法/流行度推荐算法)\n\n<br/>\n\n### <h3 id=\"nav_01_09\">❇ 矩阵</h3>\n\n![image](https://user-images.githubusercontent.com/87458342/128863100-a48df994-82a4-494c-9331-584850a64669.png)\n\n##### [对称矩阵](https://github.com/0voice/algorithm-structure/blob/master/对称矩阵/对称矩阵.c)\n##### [对角矩阵](https://github.com/0voice/algorithm-structure/blob/master/对角矩阵/对角矩阵.c)\n##### [稀疏矩阵](https://github.com/0voice/algorithm-structure/blob/master/稀疏矩阵/稀疏矩阵.c)\n##### [邻接矩阵](https://github.com/0voice/algorithm-structure/blob/master/邻接矩阵/邻接矩阵.c)\n##### [稠密矩阵](https://github.com/0voice/algorithm-structure/blob/master/稠密矩阵/稠密矩阵.c)\n##### [三角矩阵](https://github.com/0voice/algorithm-structure/blob/master/三角矩阵/三角矩阵.c)\n##### [多维矩阵转一维矩阵](https://github.com/0voice/algorithm-structure/blob/master/多维矩阵转一维矩阵/多维矩阵转一维矩阵.c)\n##### [矩阵连乘 动态规划迭代实现](https://github.com/0voice/algorithm-structure/blob/master/矩阵连乘/动态规划迭代实现.java)\n##### [矩阵连乘 备忘录递归实现](https://github.com/0voice/algorithm-structure/blob/master/矩阵连乘/备忘录递归实现.c)\n<br/>\n\n### <h3 id=\"nav_01_10\">➰ 项目中常用算法</h3>\n\n![image](https://user-images.githubusercontent.com/87458342/128868194-ffb5db50-e9d4-40b7-b76d-9566be4a1f6b.png)\n\n##### [产生可能的集合](https://github.com/0voice/algorithm-structure/blob/master/产生可能的集合/产生可能的集合.c)\n##### [后序式](https://github.com/0voice/algorithm-structure/blob/master/后序式/后序式.c)\n##### [格雷码](https://github.com/0voice/algorithm-structure/blob/master/格雷码/格雷码.c)\n##### [完美数](https://github.com/0voice/algorithm-structure/blob/master/完美数/完美数.c)\n##### [得分排行](https://github.com/0voice/algorithm-structure/blob/master/得分排行/得分排行.c)\n##### [数字拆解](https://github.com/0voice/algorithm-structure/blob/master/数字拆解/数字拆解.c)\n##### [筛选求质数](https://github.com/0voice/algorithm-structure/blob/master/筛选求质数/Eratosthenes.c)\n##### [阿姆斯壮数](https://github.com/0voice/algorithm-structure/blob/master/阿姆斯壮数/阿姆斯壮数.c)\n##### [重叠子问题的递归最优解](https://github.com/0voice/algorithm-structure/blob/master/重叠子问题的递归最优解/重叠子问题的递归最优解.c)\n##### [长PI](https://github.com/0voice/algorithm-structure/blob/master/长PI/长PI.c)\n##### [大数运算](https://github.com/0voice/algorithm-structure/blob/master/大数运算/大数运算.c)\n##### [最大m子段问题](https://github.com/0voice/algorithm-structure/blob/master/最大m子段问题/最大m子段问题.c)\n##### [最大子段和问题的简单算法](https://github.com/0voice/algorithm-structure/blob/master/最大子段和问题的简单算法/最大子段和问题的简单算法.c)\n##### [最大访客数](https://github.com/0voice/algorithm-structure/blob/master/最大访客数/最大访客数.c)\n##### [最长公共子序列问题](https://github.com/0voice/algorithm-structure/blob/master/最长公共子序列问题/最长公共子序列问题.c)\n##### [最小生成树](https://github.com/0voice/algorithm-structure/tree/master/最小生成树)\n##### [最短路径算法](https://github.com/0voice/algorithm-structure/blob/master/最短路径算法/最短路径算法.c)\n\n<br/>\n\n### <h3 id=\"nav_01_11\">➿ 大厂必会算法</h3>\n\n![image](https://user-images.githubusercontent.com/87458342/128874206-11b868eb-020b-4fa2-a523-09d3352955df.png)\n\n##### [排列组合](https://github.com/0voice/algorithm-structure/blob/master/排列组合/排列组合.c)\n##### [乱数排列](https://github.com/0voice/algorithm-structure/blob/master/乱数排列/乱数排列.c)\n##### [费列数列](https://github.com/0voice/algorithm-structure/blob/master/费列数列/Fibonacci.c)\n##### [布隆过滤器](https://github.com/0voice/algorithm-structure/blob/master/布隆过滤器/bloom.c)\n##### [RSA加密算法](https://github.com/0voice/algorithm-structure/blob/master/RSA加密算法/rsa.c)\n##### [回溯算法](https://github.com/0voice/algorithm-structure/blob/master/回溯算法/回溯算法.cpp)\n##### [递归算法](https://github.com/0voice/algorithm-structure/blob/master/递归算法/递归算法.c)\n##### [分治算法](https://github.com/0voice/algorithm-structure/blob/master/分治算法/分治算法.c)\n##### [贪心算法](https://github.com/0voice/algorithm-structure/blob/master/贪心算法/greedy.c)\n##### [KMP算法](https://github.com/0voice/algorithm-structure/blob/master/KMP算法/kmp.c)\n##### [剪枝算法](https://github.com/0voice/algorithm-structure/blob/master/剪枝算法/剪枝算法.c)\n##### [滑动窗口算法](https://github.com/0voice/algorithm-structure/blob/master/滑动窗口算法/滑动窗口.c)\n##### [朴素贝叶斯算法](https://github.com/0voice/algorithm-structure/blob/master/朴素贝叶斯算法/贝叶斯.c)\n##### [动态规划算法](https://github.com/0voice/algorithm-structure/blob/master/动态规划算法/最大子段和问题的动态规划算法.c)\n\n<br/>\n<br/>\n\n## <h2 id=\"nav_02\">🎡 C++项目</h2>\n\n### <h3 id=\"nav_02_01\">💧 经典算法</h3>\n\n![image](https://user-images.githubusercontent.com/87458342/128875066-bd5babf7-e0ab-41a7-8e71-0a1b925aa9f2.png)\n\n##### [背包问题](https://github.com/0voice/algorithm-structure/blob/master/背包问题/Knapsack%20Problem.c)\n##### [河内之塔](https://github.com/0voice/algorithm-structure/blob/master/河内之塔/Hanoi.c)\n##### [生命游戏](https://github.com/0voice/algorithm-structure/blob/master/生命游戏/生命游戏.c)\n##### [八枚银币](https://github.com/0voice/algorithm-structure/blob/master/八枚银币/八枚银币.c)\n##### [八皇后](https://github.com/0voice/algorithm-structure/blob/master/八皇后/八皇后.c)\n##### [三色棋](https://github.com/0voice/algorithm-structure/blob/master/三色棋/hree-Color_Flag.c)\n##### [骑士走棋盘](https://github.com/0voice/algorithm-structure/blob/master/骑士走棋盘/Knight_tour.c)\n##### [老鼠走迷宫1](https://github.com/0voice/algorithm-structure/blob/master/老鼠走迷宫1/老鼠走迷官(1).c)\n##### [老鼠走迷宫2](https://github.com/0voice/algorithm-structure/blob/master/老鼠走迷宫2/老鼠走迷官(2).c)\n##### [魔方阵1](https://github.com/0voice/algorithm-structure/blob/master/魔方阵1/魔方阵(1).c)\n##### [魔方阵2](https://github.com/0voice/algorithm-structure/blob/master/魔方阵2/魔方阵(2).c)\n##### [魔方阵3](https://github.com/0voice/algorithm-structure/blob/master/魔方阵3/魔方阵(3).c)\n\n<br/>\n\n### <h3 id=\"nav_02_02\">💤 实战项目</h3>\n##### [实现太阳系行星系统](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [实现运动目标的追踪](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [实现银行排队服务模拟](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [1小时入门增强现实技术](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [代码实现线程池](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [开发 Web 服务框架](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [打造 Markdown 解析器](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [实现高性能内存池](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [实现简易 Docker 容器](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [实现内存泄露检查器](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [使用 Crypto++ 库实现常用的加密算法](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [实现高性能 RTTI 库](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [操作 redis 实现异步订阅和发布](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [实现基数树 radix tree](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [基于OpenCV实现实时监控和运动检测记录](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n\n<br/>\n\n### <h3 id=\"nav_02_03\">🏮 经典项目 </h3>\n\n##### [递归解决分鱼问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/递归解决分鱼问题.c)\n##### [递归解决年龄问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/递归解决年龄问题.c)\n##### [马踏棋盘](https://github.com/0voice/algorithm-structure/blob/master/经典项目/马踏棋盘.c)\n##### [在字符串的指定位置插入字符](https://github.com/0voice/algorithm-structure/blob/master/经典项目/在字符串的指定位置插入字符.c)\n##### [删除星号](https://github.com/0voice/algorithm-structure/blob/master/经典项目/删除星号.c)\n##### [魔方阵](https://github.com/0voice/algorithm-structure/blob/master/经典项目/魔方阵.c)\n##### [矩阵转置](https://github.com/0voice/algorithm-structure/blob/master/经典项目/矩阵转置.c)\n##### [农夫过河](https://github.com/0voice/algorithm-structure/blob/master/经典项目/农夫过河.c)\n##### [平分7筐鱼](https://github.com/0voice/algorithm-structure/blob/master/经典项目/平分7筐鱼.c)\n##### [邮票组合](https://github.com/0voice/algorithm-structure/blob/master/经典项目/邮票组合.c)\n##### [选美比赛](https://github.com/0voice/algorithm-structure/blob/master/经典项目/选美比赛.c)\n##### [掷骰子游戏](https://github.com/0voice/algorithm-structure/blob/master/经典项目/掷骰子游戏.c)\n##### [狼追兔子问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/狼追兔子.c)\n##### [24点问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/24点问题.c)\n##### [常胜将军问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/常胜将军问题.c)\n\n##### [自动发牌程序](https://github.com/0voice/algorithm-structure/blob/master/经典项目/自动发牌程序.c)\n##### [黑白子交换](https://github.com/0voice/algorithm-structure/blob/master/经典项目/黑白子交换.c)\n##### [“抢30”游戏](https://github.com/0voice/algorithm-structure/blob/master/经典项目/“抢30”游戏.c)\n##### [搬山游戏](https://github.com/0voice/algorithm-structure/blob/master/经典项目/搬山游戏.c)\n##### [人机猜数问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/人机猜数问题.c)\n##### [谜语博士的难题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/谜语博士的难题.c)\n##### [黑与白问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/黑与白问题.c)\n##### [谁是窃贼问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/谁是窃贼问题.c)\n##### [旅客国籍问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/旅客国籍问题.c)\n##### [委派任务问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/委派任务问题.c)\n##### [谁在说谎问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/谁在说谎问题.c)\n##### [新良和新娘问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/新郎和新娘问题.c)\n##### [谁家孩子跑的最慢问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/谁家孩子跑的最慢问题.c)\n##### [求梅森素数](https://github.com/0voice/algorithm-structure/blob/master/经典项目/求梅森素数.c)\n##### [求孪生素数](https://github.com/0voice/algorithm-structure/blob/master/经典项目/求孪生素数.c)\n\n##### [求回文素数](https://github.com/0voice/algorithm-structure/blob/master/经典项目/求回文素数.c)\n##### [要发就发(1898)问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/要发就发(1898)问题.c)\n##### [验证哥德巴赫猜想](https://github.com/0voice/algorithm-structure/blob/master/经典项目/验证哥德巴赫猜想.c)\n##### [求给定范围内的所有素数](https://github.com/0voice/algorithm-structure/blob/master/经典项目/求给定范围内的所有素数.c)\n##### [计算分数的精确值](https://github.com/0voice/algorithm-structure/blob/master/经典项目/计算分数的精确值.c)\n##### [求多项式之和](https://github.com/0voice/algorithm-structure/blob/master/经典项目/求多项式之和.c)\n##### [比较两个分数的大小](https://github.com/0voice/algorithm-structure/blob/master/经典项目/比较两个分数的大小.c)\n##### [将真分数分解为埃及分数](https://github.com/0voice/algorithm-structure/blob/master/经典项目/将真分数分解为埃及分数.c)\n##### [求最小公倍数](https://github.com/0voice/algorithm-structure/blob/master/经典项目/求最小公倍数.c)\n##### [歌星大奖赛](https://github.com/0voice/algorithm-structure/blob/master/经典项目/歌星大奖赛.c)\n##### [列出真分数序列](https://github.com/0voice/algorithm-structure/blob/master/经典项目/列出真分数序列.c)\n##### [求最大公约数](https://github.com/0voice/algorithm-structure/blob/master/经典项目/求最大公约数.c)\n##### [求不重复的3位数](https://github.com/0voice/algorithm-structure/blob/master/经典项目/求不重复的3位数.c)\n##### [求勾股数](https://github.com/0voice/algorithm-structure/blob/master/经典项目/求勾股数.c)\n##### [求黑洞数](https://github.com/0voice/algorithm-structure/blob/master/经典项目/求黑洞数.c)\n\n##### [求高次方数的尾数](https://github.com/0voice/algorithm-structure/blob/master/经典项目/求高次方数的尾数.c)\n##### [求回文数](https://github.com/0voice/algorithm-structure/blob/master/经典项目/求回文数.c)\n##### [水仙花数](https://github.com/0voice/algorithm-structure/blob/master/经典项目/水仙花数.c)\n##### [求自守数](https://github.com/0voice/algorithm-structure/blob/master/经典项目/求自守数.c)\n##### [求亲密数](https://github.com/0voice/algorithm-structure/blob/master/经典项目/求亲密数.c)\n##### [求完数](https://github.com/0voice/algorithm-structure/blob/master/经典项目/求完数.c)\n##### [换分币问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/换分币问题.c)\n##### [马克思手稿中的数学题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/马克思手稿中的数学题.c)\n##### [舍罕王的失算](https://github.com/0voice/algorithm-structure/blob/master/经典项目/舍罕王的失算.c)\n##### [猜牌术](https://github.com/0voice/algorithm-structure/blob/master/经典项目/猜牌术.c)\n##### [爱因斯坦的数学题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/爱因斯坦的数学题.c)\n##### [求车速](https://github.com/0voice/algorithm-structure/blob/master/经典项目/求车速.c)\n##### [出售金鱼问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/出售金鱼问题.c)\n##### [三色球问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/三色球问题.c)\n##### [分糖果问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/分糖果问题.c)\n\n##### [数制转换](https://github.com/0voice/algorithm-structure/blob/master/经典项目/数制转换.c)\n##### [存钱问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/存钱问题.c)\n##### [个人所得税问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/个人所得税问题.c)\n##### [最佳存款方案](https://github.com/0voice/algorithm-structure/blob/master/经典项目/最佳存款方案.c)\n##### [牛顿失代法求方程根](https://github.com/0voice/algorithm-structure/blob/master/经典项目/牛顿迭代法求方程根.c)\n##### [兔子产子问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/兔子产子问题.c)\n##### [抓交通肇事犯问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/抓交通肇事犯问题.c)\n##### [打鱼还是晒网问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/打鱼还是晒网问题.c)\n##### [借书方案知多少](https://github.com/0voice/algorithm-structure/blob/master/经典项目/借书方案知多少.c)\n##### [百钱百鸡问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/百钱百鸡问题.c)\n##### [动态数组的实现](https://github.com/0voice/algorithm-structure/blob/master/经典项目/动态数组的实现.c)\n##### [实现的猜拳游戏(剪子锤子布)](https://github.com/0voice/algorithm-structure/blob/master/经典项目/实现的猜拳游戏(剪子锤子布).c)\n##### [定时关机程序](https://github.com/0voice/algorithm-structure/blob/master/经典项目/定时关机程序.c)\n\n##### [统计文件中的字符数、单词数以及总行数](https://github.com/0voice/algorithm-structure/blob/master/经典项目/统计文件中的字符数、单词数以及总行数.c)\n##### [统计输入的字符串的长度](https://github.com/0voice/algorithm-structure/blob/master/经典项目/统计输入的字符串的长度.c)\n##### [输出菱形](https://github.com/0voice/algorithm-structure/blob/master/经典项目/输出菱形.c)\n##### [统计英文字母、空格、数字和其它字符的数目](https://github.com/0voice/algorithm-structure/blob/master/经典项目/统计英文字母、空格、数字和其它字符的数目.c)\n##### [将一个正整数分解质因数](https://github.com/0voice/algorithm-structure/blob/master/经典项目/将一个正整数分解质因数.c)\n##### [统计文件中单词的个数](https://github.com/0voice/algorithm-structure/blob/master/经典项目/统计文件中单词的个数.c)\n##### [向文件写入内容并读取显示](https://github.com/0voice/algorithm-structure/blob/master/经典项目/向文件写入内容并读取显示.c)\n##### [判断一个数是否是素数](https://github.com/0voice/algorithm-structure/blob/master/经典项目/判断一个数是否是素数.c)\n##### [输出2的N次幂](https://github.com/0voice/algorithm-structure/blob/master/经典项目/输出2的N次幂.c)\n##### [猴子吃桃问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/猴子吃桃问题.c)\n##### [求某一年的某一月有多少天问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/求某一年的某一月有多少天问题.c)\n##### [求nt的值(3种方法)](https://github.com/0voice/algorithm-structure/blob/master/经典项目/求nt的值(3种方法).c)\n##### [删除字符数组中特定的字符](https://github.com/0voice/algorithm-structure/blob/master/经典项目/删除字符数组中特定的字符.c)\n##### [判断回文字符串](https://github.com/0voice/algorithm-structure/blob/master/经典项目/判断回文字符串.c)\n##### [打印杨辉三角](https://github.com/0voice/algorithm-structure/blob/master/经典项目/打印杨辉三角.c)\n\n##### [数组旋转问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/数组旋转问题.c)\n##### [新娘和新郎问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/新娘和新郎问题.c)\n##### [兔子生兔子的问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/兔子生兔子的问题.c)\n##### [获取开机时间](https://github.com/0voice/algorithm-structure/blob/master/经典项目/获取开机时间.c)\n##### [分别用递归法和迭代法求阶乘](https://github.com/0voice/algorithm-structure/blob/master/经典项目/分别用递归法和迭代法求阶乘.c)\n##### [奶牛生子的问题](https://github.com/0voice/algorithm-structure/blob/master/经典项目/奶牛生子的问题.c)\n##### [计算用1分钱、2分钱、5分钱组成1元钱的方式](https://github.com/0voice/algorithm-structure/blob/master/经典项目/计算用1分钱、2分钱、5分钱组成1元钱的方式.c)\n##### [将字符串转换为整数](https://github.com/0voice/algorithm-structure/blob/master/经典项目/将字符串转换为整数.c)\n##### [计算厄密多项式](https://github.com/0voice/algorithm-structure/blob/master/经典项目/计算厄密多项式.c)\n##### [计算一个数的平方根](https://github.com/0voice/algorithm-structure/blob/master/经典项目/计算一个数的平方根.c)\n##### [实现动态数组，克服静态数组大小固定的缺陷](https://github.com/0voice/algorithm-structure/blob/master/经典项目/实现动态数组，克服静态数组大小固定的缺陷.c)\n##### [实现文本搜索，类似软件中常用的搜索功能](https://github.com/0voice/algorithm-structure/blob/master/经典项目/实现文本搜索，类似软件中常用的搜索功能.c)\n##### [动态分配数组大小](https://github.com/0voice/algorithm-structure/blob/master/经典项目/动态分配数组大小.c)\n##### [定时关机小程序](https://github.com/0voice/algorithm-structure/blob/master/经典项目/定时关机小程序.c)\n##### [文本文件复制代码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/文本文件复制代码.c)\n##### [线性同余法产生随机数](https://github.com/0voice/algorithm-structure/blob/master/经典项目/线性同余法产生随机数.c)\n##### [计算你收藏的硬币值多少钱](https://github.com/0voice/algorithm-structure/blob/master/经典项目/计算你收藏的硬币值多少钱.c)\n##### [找到一个数的所有真因子](https://github.com/0voice/algorithm-structure/blob/master/经典项目/找到一个数的所有真因子.c)\n\n<br/>\n\n##### [UDP传输系统源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [万年历源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [五子棋源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [做的一个任务管理器](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [做的播放器源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [做的绘图板系统](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [别踩白块儿（双人版)源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [力学相关的流体源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [华容道源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [吃逗游戏源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [商品销售系统源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [图书借阅系统源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [图书管理系统源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [地空对战游戏](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [坑爹大冒险](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [坦克游戏源代码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [大丰收游戏源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [奔跑的火柴人游戏源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [学生信息系统](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [学生成绩管理系统](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [学生成绩管理系统源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [实现图片转化为 ASCII 图](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [实现如果cmd中的ping](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [实现数字雨](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [实现水波纹显示效果](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [实现的汉诺塔演示程序](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [实现的象棋源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [实现的超级玛丽游戏源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [实现类似弹力球效果](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [实现非常漂亮祝福烟花效果](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [对对碰游戏源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [对自己电脑系统测试](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [情人节的红玫瑰](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [打字母游戏源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [打字游戏代码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [扔香蕉的大猩猩](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [拼图游戏源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [支持自己创建迷宫，并求解最短路径](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [教工工资管理系统](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [文本编辑器系统源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [涂格子游戏源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [火车票订票管理源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [电子时钟程序](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [盒子接球游戏源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [矿井逃生](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [种地要浇水游戏源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [自创军旗游戏源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [自创推箱子游戏改版](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [贪吃蛇游戏的双人对战版](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [超市管理系统](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [连连看游戏源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [通讯录管理系统源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [配有图片和音乐的打字母游戏](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [青蛙过河小游戏](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [黑白棋ai游戏源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n##### [迷宫源码](https://github.com/0voice/algorithm-structure/blob/master/经典项目/README.md)\n\n<br/>\n\n### <h3 id=\"nav_02_04\">🧲 经典游戏 </h3>\n##### [MiGo开源掌机](https://github.com/0voice/algorithm-structure/tree/master/开源项目/MiGo开源掌机)\n##### [2048游戏](https://github.com/0voice/algorithm-structure/tree/master/开源项目/2048游戏)\n##### [21点游戏](https://github.com/0voice/algorithm-structure/tree/master/开源项目/21点游戏)\n##### [game-of-life](https://github.com/0voice/algorithm-structure/tree/master/开源项目/game-of-life)\n##### [snake_game](https://github.com/0voice/algorithm-structure/tree/master/开源项目/snake_game)\n##### [中国象棋](https://github.com/0voice/algorithm-structure/tree/master/开源项目/中国象棋)\n##### [五子棋](https://github.com/0voice/algorithm-structure/tree/master/开源项目/五子棋)\n##### [井字棋](https://github.com/0voice/algorithm-structure/tree/master/开源项目/井字棋)\n##### [俄罗斯方块](https://github.com/0voice/algorithm-structure/tree/master/开源项目/俄罗斯方块)\n##### [弹弹乐](https://github.com/0voice/algorithm-structure/tree/master/开源项目/弹弹乐)\n##### [弹球游戏](https://github.com/0voice/algorithm-structure/tree/master/开源项目/弹球游戏)\n##### [成语接龙](https://github.com/0voice/algorithm-structure/tree/master/开源项目/成语接龙)\n##### [打砖块游戏](https://github.com/0voice/algorithm-structure/tree/master/开源项目/打砖块游戏)\n##### [打飞机游戏](https://github.com/0voice/algorithm-structure/tree/master/开源项目/打飞机游戏)\n##### [扫雷游戏](https://github.com/0voice/algorithm-structure/tree/master/开源项目/扫雷游戏)\n##### [推箱子](https://github.com/0voice/algorithm-structure/tree/master/开源项目/推箱子)\n##### [文字冒险游戏](https://github.com/0voice/algorithm-structure/tree/master/开源项目/文字冒险游戏)\n##### [猜拳游戏](https://github.com/0voice/algorithm-structure/tree/master/开源项目/猜拳游戏)\n##### [猜数游戏](https://github.com/0voice/algorithm-structure/tree/master/开源项目/猜数游戏)\n##### [皇帝和后宫](https://github.com/0voice/algorithm-structure/tree/master/开源项目/皇帝和后宫)\n##### [老虎机游戏](https://github.com/0voice/algorithm-structure/tree/master/开源项目/老虎机游戏)\n##### [记忆游戏](https://github.com/0voice/algorithm-structure/tree/master/开源项目/记忆游戏)\n##### [贪吃蛇(穿墙)](https://github.com/0voice/algorithm-structure/tree/master/开源项目/贪吃蛇(穿墙))\n##### [贪吃蛇](https://github.com/0voice/algorithm-structure/tree/master/开源项目/贪吃蛇)\n\n<br/>\n\n### <h3 id=\"nav_02_05\">💿 视频讲解游戏 </h3>\n##### [火柴人试炼之地](https://github.com/0voice/algorithm-structure/tree/master/视频讲解游戏/火柴人试炼之地)\n##### [雷霆战机](https://github.com/0voice/algorithm-structure/tree/master/视频讲解游戏/雷霆战机)\n##### [奇怪大冒险](https://github.com/0voice/algorithm-structure/tree/master/视频讲解游戏/奇怪大冒险)\n##### [气球塔防](https://github.com/0voice/algorithm-structure/tree/master/视频讲解游戏/气球塔防)\n##### [太空大战](https://github.com/0voice/algorithm-structure/tree/master/视频讲解游戏/太空大战)\n\n<br/>\n<br/>\n\n## <h3 id=\"nav_03\">📒 附录 </h3>\n\n### <h3 id=\"nav_03_01\">📃 附录1</h3>\n\n#### 算法动图显示\n\n##### [冒泡排序](#appendix_01_01)\n![image](https://img-blog.csdnimg.cn/20190517142259572.gif)\n\n##### [插入排序](#appendix_01_02)\n![image](https://img-blog.csdnimg.cn/20190517142521855.gif)\n\n##### [希尔排序](#appendix_01_03)\n![image](https://img-blog.csdnimg.cn/20190517142611755.gif)\n\n##### [选择排序](#appendix_01_04)\n![image](https://img-blog.csdnimg.cn/20190517142411197.gif)\n\n##### [堆排序](#appendix_01_05)\n![image](https://img-blog.csdnimg.cn/20190517142825891.gif)\n\n##### [归并排序](#appendix_01_06)\n![image](https://img-blog.csdnimg.cn/20190517142701685.gif)\n\n##### [桶排序](#appendix_01_07)\n![image](https://www.weixiuzhan.cn/file/upload/2020/5/7fqQNr.gif)\n\n##### [基数排序](#appendix_01_08)\n![image](https://img-blog.csdnimg.cn/20190517143109965.gif)\n\n##### [计数排序](#appendix_01_09)\n![image](https://img-blog.csdnimg.cn/20190517142910579.gif)\n\n##### [快速排序](#appendix_01_10)\n![image](https://img-blog.csdnimg.cn/20190517142745730.gif)\n\n##### [拓扑排序](#appendix_01_11)\n拓扑排序步骤：\n1. 删除1或2输出\n  ![image](https://user-images.githubusercontent.com/87458342/128965579-98f47154-f21d-4d49-a45b-cc1a3e59f182.png)\n2. 删除2或3以及对应边\n  ![image](https://user-images.githubusercontent.com/87458342/128965682-9d91ced1-29be-4caa-87b0-85eb02695160.png)\n3. 删除3或者4以及对应边\n  ![image](https://user-images.githubusercontent.com/87458342/128965721-6e7246ea-2f10-42c9-8599-1c3086519f68.png)\n4. 重复以上规则步骤\n  ![image](https://user-images.githubusercontent.com/87458342/128965777-e76c8231-6998-477c-987b-1dfe240be6df.png)\n\n\n<br/>\n<br/>\n<br/>\n<br/>\n<br/>\n\n<h2 id=\"nav_03_01\">🤝 鸣谢</h2>\n\n##### 为了让我们的repo内容更加的丰富，更加的专业。欢迎大家贡献patch，希望大家在issue里面出谋划策，我们期待你的加入。\n\n<a href=\"https://github.com/wangbojing\">\n    <img src=\"https://avatars.githubusercontent.com/u/18027560?v=4\" width=\"40px\">\n</a> \n\n<a href=\"https://github.com/ls-Brynn\">\n    <img src=\"https://avatars.githubusercontent.com/u/87458342?v=4\" width=\"40px\">\n</a> \n<br/>\n<br/>\n<h3 >零领工作</h3> \n\n---\n\n##### 实时提供，每周发布北京，上海，广州，深圳，杭州，南京，合肥，武汉，长沙，重庆，成都，西安，厦门的c/c++，golang方向的招聘岗位信息。 包含校招，社招，实习岗位， 面经，八股，简历\n\n<img src=\"https://img.0voice.com/public/0e59910091576beaebe20f303357edf7.jpg\" alt=\"零领工作\" style=\"width:300px;height:300px;\">\n\n<br/>\n<br/>\n"
        },
        {
          "name": "RSA加密算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "三色棋",
          "type": "tree",
          "content": null
        },
        {
          "name": "三角矩阵",
          "type": "tree",
          "content": null
        },
        {
          "name": "乱数排列",
          "type": "tree",
          "content": null
        },
        {
          "name": "二分搜寻法",
          "type": "tree",
          "content": null
        },
        {
          "name": "二分查找算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "二叉堆",
          "type": "tree",
          "content": null
        },
        {
          "name": "二叉查找树算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "二叉树排序",
          "type": "tree",
          "content": null
        },
        {
          "name": "二叉树算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "二项堆",
          "type": "tree",
          "content": null
        },
        {
          "name": "产生可能的集合",
          "type": "tree",
          "content": null
        },
        {
          "name": "伸展树算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "八枚银币",
          "type": "tree",
          "content": null
        },
        {
          "name": "八皇后",
          "type": "tree",
          "content": null
        },
        {
          "name": "冒泡排序算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "决策树",
          "type": "tree",
          "content": null
        },
        {
          "name": "分块查找",
          "type": "tree",
          "content": null
        },
        {
          "name": "分治算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "剪枝算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "动态栈",
          "type": "tree",
          "content": null
        },
        {
          "name": "动态规划算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "单链表算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "双向链表算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "后序式",
          "type": "tree",
          "content": null
        },
        {
          "name": "哈夫曼树算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "哈希查找",
          "type": "tree",
          "content": null
        },
        {
          "name": "回溯算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "图",
          "type": "tree",
          "content": null
        },
        {
          "name": "基数排序算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "堆排序算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "多维矩阵转一维矩阵",
          "type": "tree",
          "content": null
        },
        {
          "name": "大数运算",
          "type": "tree",
          "content": null
        },
        {
          "name": "完全二叉树算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "完美数",
          "type": "tree",
          "content": null
        },
        {
          "name": "宽度优先搜索",
          "type": "tree",
          "content": null
        },
        {
          "name": "对称矩阵",
          "type": "tree",
          "content": null
        },
        {
          "name": "对角矩阵",
          "type": "tree",
          "content": null
        },
        {
          "name": "左倾堆",
          "type": "tree",
          "content": null
        },
        {
          "name": "布隆过滤器",
          "type": "tree",
          "content": null
        },
        {
          "name": "希尔排序算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "平衡二叉树算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "并查集",
          "type": "tree",
          "content": null
        },
        {
          "name": "广义表",
          "type": "tree",
          "content": null
        },
        {
          "name": "广度优先搜索",
          "type": "tree",
          "content": null
        },
        {
          "name": "开源项目",
          "type": "tree",
          "content": null
        },
        {
          "name": "归并排序算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "得分排行",
          "type": "tree",
          "content": null
        },
        {
          "name": "循序搜寻法",
          "type": "tree",
          "content": null
        },
        {
          "name": "循环搜寻法",
          "type": "tree",
          "content": null
        },
        {
          "name": "循环链表算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "循环队列",
          "type": "tree",
          "content": null
        },
        {
          "name": "快速排序2",
          "type": "tree",
          "content": null
        },
        {
          "name": "快速排序3",
          "type": "tree",
          "content": null
        },
        {
          "name": "快速排序算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "拓扑排序算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "排列组合",
          "type": "tree",
          "content": null
        },
        {
          "name": "推荐算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "插值查找",
          "type": "tree",
          "content": null
        },
        {
          "name": "插入排序算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "插补搜寻法",
          "type": "tree",
          "content": null
        },
        {
          "name": "数字拆解",
          "type": "tree",
          "content": null
        },
        {
          "name": "数组列优先顺序",
          "type": "tree",
          "content": null
        },
        {
          "name": "数组行优先顺序",
          "type": "tree",
          "content": null
        },
        {
          "name": "斐波那契堆",
          "type": "tree",
          "content": null
        },
        {
          "name": "斐波那契查找",
          "type": "tree",
          "content": null
        },
        {
          "name": "斜堆",
          "type": "tree",
          "content": null
        },
        {
          "name": "最大m子段问题",
          "type": "tree",
          "content": null
        },
        {
          "name": "最大子段和问题的简单算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "最大访客数",
          "type": "tree",
          "content": null
        },
        {
          "name": "最小生成树",
          "type": "tree",
          "content": null
        },
        {
          "name": "最短路径算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "最长公共子序列问题",
          "type": "tree",
          "content": null
        },
        {
          "name": "朴素贝叶斯算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "树表查找",
          "type": "tree",
          "content": null
        },
        {
          "name": "格雷码",
          "type": "tree",
          "content": null
        },
        {
          "name": "桶排序",
          "type": "tree",
          "content": null
        },
        {
          "name": "模拟退火算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "河内之塔",
          "type": "tree",
          "content": null
        },
        {
          "name": "深度优先搜索",
          "type": "tree",
          "content": null
        },
        {
          "name": "游戏",
          "type": "tree",
          "content": null
        },
        {
          "name": "滑动窗口算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "爬山算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "生命游戏",
          "type": "tree",
          "content": null
        },
        {
          "name": "矩阵连乘",
          "type": "tree",
          "content": null
        },
        {
          "name": "稀疏矩阵",
          "type": "tree",
          "content": null
        },
        {
          "name": "筛选求质数",
          "type": "tree",
          "content": null
        },
        {
          "name": "红黑树算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "约束满足搜索",
          "type": "tree",
          "content": null
        },
        {
          "name": "线性查找",
          "type": "tree",
          "content": null
        },
        {
          "name": "经典项目",
          "type": "tree",
          "content": null
        },
        {
          "name": "老鼠走迷宫1",
          "type": "tree",
          "content": null
        },
        {
          "name": "老鼠走迷宫2",
          "type": "tree",
          "content": null
        },
        {
          "name": "背包问题",
          "type": "tree",
          "content": null
        },
        {
          "name": "视频讲解游戏",
          "type": "tree",
          "content": null
        },
        {
          "name": "计数排序算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "贪心算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "费列数列",
          "type": "tree",
          "content": null
        },
        {
          "name": "费氏搜寻法",
          "type": "tree",
          "content": null
        },
        {
          "name": "资料",
          "type": "tree",
          "content": null
        },
        {
          "name": "迭代加深搜索",
          "type": "tree",
          "content": null
        },
        {
          "name": "选择排序算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "递归算法",
          "type": "tree",
          "content": null
        },
        {
          "name": "邻接矩阵",
          "type": "tree",
          "content": null
        },
        {
          "name": "重叠子问题的递归最优解",
          "type": "tree",
          "content": null
        },
        {
          "name": "链式队列",
          "type": "tree",
          "content": null
        },
        {
          "name": "长PI",
          "type": "tree",
          "content": null
        },
        {
          "name": "阿姆斯壮数",
          "type": "tree",
          "content": null
        },
        {
          "name": "静态栈",
          "type": "tree",
          "content": null
        },
        {
          "name": "顺序查找",
          "type": "tree",
          "content": null
        },
        {
          "name": "顺序队列",
          "type": "tree",
          "content": null
        },
        {
          "name": "骑士走棋盘",
          "type": "tree",
          "content": null
        },
        {
          "name": "魔方阵1",
          "type": "tree",
          "content": null
        },
        {
          "name": "魔方阵2",
          "type": "tree",
          "content": null
        },
        {
          "name": "魔方阵3",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}