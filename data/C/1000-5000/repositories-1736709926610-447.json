{
  "metadata": {
    "timestamp": 1736709926610,
    "page": 447,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "DynamoRIO/drmemory",
      "stars": 2488,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.2333984375,
          "content": "[submodule \"dynamorio\"]\n        path = dynamorio\n        url = https://github.com/DynamoRIO/dynamorio.git\n[submodule \"third_party/googletest\"]\n        path = third_party/googletest\n        url = https://github.com/DynamoRIO/googletest.git\n"
        },
        {
          "name": "ACKNOWLEDGEMENTS",
          "type": "blob",
          "size": 1.259765625,
          "content": "===========================================================================\nACKNOWLEDGEMENTS / AUTHORS OF DR. MEMORY\n\nThe following is a partial list of the people who have contributed to\nDr. Memory, in alphabetical order.  Many others have provided invaluable\ninsights, suggestions, and constructive criticism.\n\n  * Derek Bruening\n  * Bharath Chandramohan\n  * Shawn Denbow\n  * Timur Iskhodzhanov\n  * Reid Kleckner\n  * Maxim Shudrak\n  * Dimitrios Tatsis\n  * Qin Zhao\n\nDr. Memory was originally developed by Derek Bruening for Windows.  Derek later\nported Dr. Memory to Linux.\n\nReid Kleckner and Qin Zhao contributed to many different features on both\nWindows and Linux.\nShawn Denbow contributed to Windows system call handling.\nMaxim Shudrak contributed to Dr. Strace and the Windows system call database.\nDimitrios Tatsis contributed to Linux system call handling.\nTimur Iskhodzhanov contributed to error suppression and testing.\nBharath Chandramohan contributed to an ESXi port of Dr. Memory.\n\nDr. Memory leverages the dynamic instrumentation tool platform DynamoRIO.\nSee http://dynamorio.org for more information about DynamoRIO.\n\nDr. Memory's feature set bears some similiarities to Valgrind's Memcheck\ntool.\n\n===========================================================================\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 98.66015625,
          "content": "# **********************************************************\n# Copyright (c) 2010-2024 Google, Inc.  All rights reserved.\n# Copyright (c) 2009-2010 VMware, Inc.  All rights reserved.\n# **********************************************************\n\n# Dr. Memory: the memory debugger\n#\n# This library is free software; you can redistribute it and/or\n# modify it under the terms of the GNU Lesser General Public\n# License as published by the Free Software Foundation;\n# version 2.1 of the License, and no later version.\n#\n# This library is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n# Library General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public\n# License along with this library; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\n# DR requires 3.7 which means we must also.\ncmake_minimum_required(VERSION 3.7)\n\ninclude(make/policies.cmake NO_POLICY_SCOPE)\n\n# like DR, we collapse VS generator into one config since\n# we don't have enough control over output dirs\n# in build rules (until cmake 2.8.4).\n# this must be prior to the project() command.\nif (\"${CMAKE_GENERATOR}\" MATCHES \"Visual Studio\")\n  if (\"${CMAKE_BUILD_TYPE}\" MATCHES \"Debug\")\n    set(CMAKE_CONFIGURATION_TYPES \"Debug\" CACHE STRING \"\" FORCE)\n  else ()\n    set(CMAKE_CONFIGURATION_TYPES \"RelWithDebInfo\" CACHE STRING \"\" FORCE)\n  endif ()\n  # we want to use the _LOCATION_<config> property\n  string(TOUPPER \"${CMAKE_CONFIGURATION_TYPES}\" upper)\n  set(location_suffix \"_${upper}\")\nelse (\"${CMAKE_GENERATOR}\" MATCHES \"Visual Studio\")\n  set(location_suffix \"\")\nendif (\"${CMAKE_GENERATOR}\" MATCHES \"Visual Studio\")\n\n# I want to override the default CMAKE_INSTALL_PREFIX, but allow it to\n# be set (as the same var name, so CPack and other standard tools\n# work) externally.  The best solution is to check whether defined BEFORE\n# the project() command.\n# If we didn't use standard tools we could set CMAKE_INSTALL_PREFIX\n# to be CACHE INTERNAL FORCE to INSTALL_PREFIX.\nif (NOT DEFINED CMAKE_INSTALL_PREFIX)\n  set(install_override ON)\nelse (NOT DEFINED CMAKE_INSTALL_PREFIX)\n  set(install_override OFF)\nendif (NOT DEFINED CMAKE_INSTALL_PREFIX)\n\nproject(DrMemory NONE)\nif (DEFINED GENERATE_PDBS AND NOT GENERATE_PDBS)\n  # support building over cygwin ssh where we cannot build pdbs.\n  # using the same solution as DynamoRIO i#310.\n  # To prevent cmake's try-compile for its working compiler test and\n  # its ABI determination test we request a Release build config\n  # via a custom Plaform/Windows-cl.cmake in our make/ dir.\n  set(CMAKE_MODULE_PATH \"${PROJECT_SOURCE_DIR}/make\")\nendif ()\nenable_language(C)\nenable_language(CXX)\n\ninclude(CheckCCompilerFlag)\n\n# The target OS:\nif (APPLE)\n  set(MACOS 1)\nelseif (UNIX)\n  set(LINUX 1)\nendif (APPLE)\n\nif (CMAKE_SYSTEM_NAME MATCHES \"^Android\")\n  set(ANDROID 1)\n  set(DEFINES ${DEFINES} -DANDROID)\n  set(DRM_DEVICE_BASEDIR \"/data/local/tmp\" CACHE STRING \"base dir for Android binaries\")\n  option(DRM_COPY_TO_DEVICE \"copy cross-compiled binaries to DRM_DEVICE_BASEDIR\" OFF)\n  if (DRM_COPY_TO_DEVICE)\n    find_program(ADB adb DOC \"adb Android utility\")\n    if (NOT ADB)\n      message(FATAL_ERROR \"Unable to find adb for DRM_COPY_TO_DEVICE\")\n    else ()\n      execute_process(COMMAND ${ADB} get-state\n        RESULT_VARIABLE adb_result\n        ERROR_VARIABLE adb_err\n        OUTPUT_VARIABLE adb_out OUTPUT_STRIP_TRAILING_WHITESPACE)\n      if (adb_result OR NOT adb_out STREQUAL \"device\")\n        message(FATAL_ERROR \"Android device not connected for DRM_COPY_TO_DEVICE\")\n      endif ()\n      message(STATUS \"Binaries will be copied to the attached Android device\")\n    endif ()\n  endif ()\nendif ()\n\n# The target arch:\nif (CMAKE_SYSTEM_PROCESSOR MATCHES \"^arm\")\n  set(ARM 1)\nelse ()\n  set(X86 1)\nendif ()\n\nif (UNIX)\n  set(DEFINES ${DEFINES} -DUNIX)\nendif (UNIX)\n\noption(VMKERNEL \"target vmkernel\")\nif (VMKERNEL)\n  # if we get enough of these, should use a configure.h, but would need to\n  # pull the ops out like DR core does to pass to options_perl below\n  set(DEFINES ${DEFINES} -DVMX86_SERVER)\nendif (VMKERNEL)\n\noption(TOOL_DR_HEAPSTAT \"build Dr. Heapstat instead of Dr. Memory\")\noption(USE_MD5 \"use md5 instead of crc32 for callstack hashes for Dr. Heapstat\")\nif (USE_MD5)\n  set(DEFINES ${DEFINES} -DUSE_MD5)\nendif (USE_MD5)\noption(CHECK_WITH_MD5 \"use crc32 for callstack hashes but check for collisions with md5\")\nif (CHECK_WITH_MD5)\n  set(DEFINES ${DEFINES} -DCHECK_WITH_MD5)\nendif (CHECK_WITH_MD5)\noption(STATIC_DRSYMS \"use static drsyms library\" ON)\nif (UNIX AND NOT STATIC_DRSYMS)\n  # we could support dynamic but we'd have to copy libdrsym.so\n  message(FATAL_ERROR \"non-static drsyms not supported for Linux\")\nendif ()\n\noption(TEST_SUITE \"we are running a series of builds for official purposes\")\n\nif (TOOL_DR_HEAPSTAT)\n  # Dr. Heapstat\n  set(TOOL_DR_MEMORY OFF)\n  set(toolname drheapstat)\n  set(tooldir ${toolname})\n  set(toolname_cap DrHeapstat)\n  set(toolname_cap_spc \"Dr. Heapstat\")\n  set(DEFINES ${DEFINES} -DTOOL_DR_HEAPSTAT)\n\n  # Dr. Heapstat uses drsyms only to avoid false neg on leaks (i#762, i#292).\n  # XXX: use drsyms for leak reports (i#926) and usage (i#282).\nelse (TOOL_DR_HEAPSTAT)\n  # Dr. Memory\n  set(TOOL_DR_MEMORY ON)\n  set(toolname drmemory)\n  set(tooldir ${toolname})\n  set(toolname_cap DrMemory)\n  set(toolname_cap_spc \"Dr. Memory\")\n  set(DEFINES ${DEFINES} -DTOOL_DR_MEMORY)\n\nendif (TOOL_DR_HEAPSTAT)\n\n# We use a monotonically increasing integer that's larger than any bugfix\n# release version as the patchlevel ver# to distinguish\n# We used to use the svn revision (i#83) and we leave that code in place\n# (for now at least) for anyone building an old checkout.\n# For git, we follow DRi#1565 and use a date.\nset(VERSION_NUMBER_PATCHLEVEL 0)\nif (EXISTS \"${PROJECT_SOURCE_DIR}/.svn\")\n  find_program(SVN svn DOC \"subversion client\")\n  if (SVN)\n    execute_process(COMMAND ${SVN} info\n      WORKING_DIRECTORY \"${PROJECT_SOURCE_DIR}\"\n      RESULT_VARIABLE svn_result\n      ERROR_VARIABLE svn_err\n      OUTPUT_VARIABLE svn_out)\n    if (svn_result OR svn_err)\n      message(FATAL_ERROR \"*** ${SVN} info failed: ***\\n${svn_result} ${svn_err}\")\n    endif (svn_result OR svn_err)\n    string(REGEX MATCH \"Revision: [0-9]+\" svn_out \"${svn_out}\")\n    string(REGEX REPLACE \"Revision: \" \"\" svn_out \"${svn_out}\")\n    set(VERSION_NUMBER_PATCHLEVEL \"${svn_out}\")\n  endif (SVN)\nelse (EXISTS \"${PROJECT_SOURCE_DIR}/.svn\")\n  if (EXISTS \"${PROJECT_SOURCE_DIR}/.git\")\n    find_program(GIT git DOC \"git client\")\n    if (GIT)\n      # We want the committer date (not author date) (xref DRi#1565).  We request\n      # UNIX timestamp format and then divide down to days to get a small enough\n      # number for the Windows resource limits.\n      execute_process(COMMAND ${GIT} log -n 1 --format=%ct\n        WORKING_DIRECTORY \"${PROJECT_SOURCE_DIR}\"\n        RESULT_VARIABLE git_result\n        ERROR_VARIABLE git_err\n        OUTPUT_VARIABLE git_out)\n      if (git_result OR git_err)\n        message(\"*** ${GIT} log failed: ***\\n${git_err}\")\n      else (git_result OR git_err)\n        math(EXPR daycount \"${git_out} / (60*60*24)\")\n      endif (git_result OR git_err)\n    endif (GIT)\n    if (NOT daycount)\n      # XXX DRi#1565: to support building when not in a git repo (e.g., from a source\n      # tarball) we use date to get current time for timestamp.\n      # This is not ideal as it confuses the build timestamp with the commit\n      # timestamp.  We should add support for a local file holding the version.\n      find_program(DATE date DOC \"system date\")\n      if (DATE)\n        execute_process(COMMAND ${DATE} +%s\n          RESULT_VARIABLE date_result\n          ERROR_VARIABLE date_err\n          OUTPUT_VARIABLE date_out)\n        if (date_result OR date_err)\n          message(\"*** ${DATE} failed: ***\\n${date_err}\")\n        else (date_result OR date_err)\n          math(EXPR daycount \"${date_out} / (60*60*24)\")\n        endif (date_result OR date_err)\n      endif (DATE)\n    endif (NOT daycount)\n    if (NOT daycount)\n      # set a much further date in the future to avoid confusing\n      # this fake date with the real date from git log\n      set(daycount 33333)\n    endif (NOT daycount)\n    set(VERSION_NUMBER_PATCHLEVEL \"${daycount}\")\n  endif (EXISTS \"${PROJECT_SOURCE_DIR}/.git\")\nendif (EXISTS \"${PROJECT_SOURCE_DIR}/.svn\")\n\nif (APPLE)\n  # clang linker disallows any but major # being >= 256 (1024 for x64) so we do\n  # mod 200 (we assume we'll never confuse versions 200 apart) and add 56 (to\n  # distinguish from real releases).\n  # If we change this we need to also update .github/workflows/ci-package.yml.\n  math(EXPR VERSION_NUMBER_PATCHLEVEL \"(${VERSION_NUMBER_PATCHLEVEL} % 200) + 56\")\nendif (APPLE)\n\n# N.B.: When updating this, update all instances in .github/workflows/ci-package.yml.\n# We should find a way to share (xref DRi#1565).\nset(VERSION_NUMBER_DEFAULT \"2.6.${VERSION_NUMBER_PATCHLEVEL}\")\n# Do not store the default TOOL_VERSION_NUMBER in the cache to prevent a stale one\n# from preventing future version updates in a pre-existing build dir.\n# Avoid \"VERSION_NUMBER\" name since conflics w/ DR's var.\nset(TOOL_VERSION_NUMBER \"\" CACHE STRING \"Version number: leave empty for default\")\nif (\"${TOOL_VERSION_NUMBER}\" STREQUAL \"\")\n  set(TOOL_VERSION_NUMBER ${VERSION_NUMBER_DEFAULT})\nendif()\nmessage(STATUS \"Dr. Memory version number: ${TOOL_VERSION_NUMBER}\")\n\n# Avoid \"BUILD_NUMBER\" name since conflics w/ DR's var\nset(TOOL_BUILD_NUMBER \"1\" CACHE STRING \"Build number (must be <64K)\")\n# However, we do want to set it to avoid \"custom build\" in messages\n# from embedded DR when run alone (i#1717's dr_set_client_version_string() has\n# already solved this for messages for DrMem on DR).  To make it easy to\n# correlate, we set it to a formula computed from the DrMem ver.\nstring(REPLACE \".\" \";\" ver_list ${TOOL_VERSION_NUMBER})\nlist(GET ver_list 0 TOOL_VERSION_MAJOR)\nlist(GET ver_list 1 TOOL_VERSION_MINOR)\nmath(EXPR BUILD_NUMBER\n  \"${TOOL_VERSION_MAJOR}*100 + ${TOOL_VERSION_MINOR}*10 + ${VERSION_NUMBER_PATCHLEVEL}\")\n\nstring(REGEX REPLACE \"\\\\.\" \",\" TOOL_VERSION_COMMAS \"${TOOL_VERSION_NUMBER}\")\n\nset(DEFINES ${DEFINES}\n  -DBUILD_NUMBER=${TOOL_BUILD_NUMBER}\n  -DVERSION_NUMBER=${TOOL_VERSION_NUMBER}\n  -DVERSION_STRING=\"${TOOL_VERSION_NUMBER}\"\n  -DVERSION_COMMAS=${TOOL_VERSION_COMMAS})\n\nif (CMAKE_C_SIZEOF_DATA_PTR EQUAL 8 OR CMAKE_CXX_SIZEOF_DATA_PTR EQUAL 8)\n  set(X64 ON)\n  set(LIB_ARCH \"lib64\")\n  set(BIN_ARCH \"bin64\")\n  set(DEFINES ${DEFINES} -DX64)\nelse()\n  set(X64 OFF)\n  set(LIB_ARCH \"lib32\")\n  set(BIN_ARCH \"bin32\")\nendif ()\n\nif (\"${CMAKE_BUILD_TYPE}\" MATCHES \"Debug\")\n  # FIXME: use a configure.h\n  set(DEFINES ${DEFINES} -DDEBUG -DSTATISTICS)\n  set(DEBUG_BUILD ON) # \"DEBUG\" conflicts w/ DR\nelse ()\n  # We want Windows pdb and Unix line #s for release build.\n  # We make separate debug info for Unix, and are fine shipping it to users\n  # in any case as we're open-source.\n  set(CMAKE_BUILD_TYPE \"RelWithDebInfo\")\n  set(DEBUG_BUILD OFF)\nendif ()\n\nstring(TOUPPER \"${CMAKE_BUILD_TYPE}\" CMAKE_BUILD_TYPE_UPPER)\n\n# i#1781: cmake 2.8.12+ fails to create static lib pdb by default\n# XXX: we should share this with DR's copy\nmacro(add_static_lib_debug_info target dest_dir)\n  if (WIN32)\n    if (\"${CMAKE_VERSION}\" VERSION_EQUAL \"3.1\" OR\n        \"${CMAKE_VERSION}\" VERSION_GREATER \"3.1\")\n      append_property_string(TARGET ${target}\n        COMPILE_PDB_NAME${location_suffix} \"${target}\"\n        COMPILE_PDB_OUTPUT_DIRECTORY{location_suffix} \"${dest_dir}\")\n    else ()\n      # We just don't support it for < 3.1\n    endif ()\n  endif ()\nendmacro()\n\nif (UNIX)\n  # there's no cmake warning control so we hardcode it\n  # disabling strict aliasing since giving weird warning I'm not sure how to fix:\n  #   alloc.c:716: warning: dereferencing type-punned pointer will break strict-aliasing rules\n  set(WARN \"-Wall -Werror -Wno-strict-aliasing\")\n  # Disabling format-truncation due to too many warnings about string construction\n  # where truncating added strings is fine if the final doesn't fit anyway.\n  CHECK_C_COMPILER_FLAG(\"-Wno-format-truncation\" have_format_truncation_warning)\n  if (have_format_truncation_warning)\n    set(WARN \"${WARN} -Wno-format-truncation\")\n  endif ()\n  # Disable string compare warning in clang about our assert on defval for\n  # bool options from optionsx.h expansion.\n  CHECK_C_COMPILER_FLAG(\"-Wno-string-compare\" have_str_cmp_warning)\n  if (have_str_cmp_warning)\n    set(WARN \"${WARN} -Wno-string-compare\")\n  endif ()\n  if (CMAKE_C_COMPILER MATCHES \"/build/toolchain\")\n    # needed for linux/ipmi.h (PR 531644)\n    set(EXTRA_FLAGS \"-idirafter /build/toolchain/lin32/glibc-2007q3-51/usr/include\")\n  else ()\n    if (APPLE AND NOT CMAKE_COMPILER_IS_GNUCC)\n      # Ensure our binaries can run on older OSX\n      set(EXTRA_FLAGS \"-mmacosx-version-min=10.9\")\n    else ()\n      set(EXTRA_FLAGS \"\")\n    endif ()\n  endif ()\n  if (ARM)\n    set(EXTRA_FLAGS \"${EXTRA_FLAGS} -mthumb -march=armv7-a\")\n    if (ANDROID OR CMAKE_C_LIBRARY_ARCHITECTURE MATCHES \"gnueabi$\")\n      set(EXTRA_FLAGS \"${EXTRA_FLAGS} -mfloat-abi=softfp\")\n      # Android requires PIE.  We export symbols to match our test assumptions.\n      set(CMAKE_EXE_LINKER_FLAGS\n        \"${CMAKE_EXE_LINKER_FLAGS} -fPIE -pie -Wl,--export-dynamic\")\n    endif ()\n  endif ()\n  if (APPLE)\n    # TODO i#2485: Add DWARF-5 support to Mac.\n    CHECK_C_COMPILER_FLAG(\"-gdwarf-5\" have_dwarf5)\n    if (have_dwarf5)\n      set(EXTRA_FLAGS \"${EXTRA_FLAGS} -gdwarf-4\")\n    endif ()\n  endif ()\n  # We use C++11.\n  set(EXTRA_CXXFLAGS \"-std=c++11\")\n  set(CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}\n    \"${CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}} ${ARCH_CFLAGS} ${WARN} ${EXTRA_FLAGS}\")\n  set(CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}\n    \"${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}} ${ARCH_CFLAGS} ${WARN} ${EXTRA_FLAGS} ${EXTRA_CXXFLAGS}\")\nelse (UNIX)\n  # FIXME i#1204: fix warnings and up to /W4\n  set(WARN \"/W2 /WX\")\n  # update flags for our types and Debug (tests always use Debug).\n  # ok to double-update b/c these are are regex-replace.\n  foreach (config ${CMAKE_BUILD_TYPE} ${CMAKE_CONFIGURATION_TYPES} Debug)\n    string(TOUPPER \"${config}\" config_upper)\n    foreach (var CMAKE_C_FLAGS;CMAKE_CXX_FLAGS;\n        CMAKE_C_FLAGS_${config_upper};\n        CMAKE_CXX_FLAGS_${config_upper})\n      # default from cmake has /W3 so remove to avoid warning about overriding\n      string(REGEX REPLACE \"/W[0-9]\" \"\" ${var} \"${${var}}\")\n      # /GZ requires RTC runtime support which we don't want (i#925)\n      string(REGEX REPLACE \"/GZ\" \"\" ${var} \"${${var}}\")\n      # avoid warnings (i#925)\n      string(REGEX REPLACE \"/GX\" \"/EHsc\" ${var} \"${${var}}\")\n      if (NOT DEBUG_BUILD)\n        # RelWithDebInfo asks for /Ob1 but we want full inlining\n        string(REGEX REPLACE \"/Ob1\" \"/Ob2\" ${var} \"${${var}}\")\n      endif ()\n    endforeach ()\n  endforeach ()\n  # disable stack protection: \"unresolved external symbol ___security_cookie\"\n  set(CL_CFLAGS \"/GS-\")\n  # build in parallel, always.\n  # note that /MP is not officially supported on VS 2005 and others\n  # have seen occasional problems: we'll risk it.  we could check for\n  # \"MSVC10 OR MSVC90\".\n  set(CL_CFLAGS \"${CL_CFLAGS} /MP\")\n  if (NOT CMAKE_C_COMPILER_VERSION VERSION_LESS 18.0)\n    # i#1376: VS2013 requires /FS w/ multiple cl.exe in parallel (which Ninja\n    # uses).  While /MP is supposed to enable it, it doesn't seem to.\n    # This is recommended after /Fd but it seems to work here.\n    set(CL_CFLAGS \"${CL_CFLAGS} /FS\")\n  endif()\n  set(CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER} \"${CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}} ${WARN} ${CL_CFLAGS}\")\nendif (UNIX)\nset(CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER} \"${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}} ${ARCH_CFLAGS} ${WARN}\")\nstring(STRIP \"${CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}}\"\n  CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER})\nstring(STRIP \"${CMAKE_CXX_FLAGS}\" CMAKE_CXX_FLAGS)\n\nif (WIN32)\n  # DRi#1424: target the oldest possible platform we can\n  if (X64)\n    set(os_target \"5.02\") # Win2003x64/WinXPx64\n  else (X64)\n    if (CMAKE_C_COMPILER_VERSION VERSION_LESS 17.0) # up to and including VS2010\n      set(os_target \"5.00\") # Win2K\n    else () # VS2012, VS2013\n      set(os_target \"5.01\") # WinXP\n    endif ()\n  endif (X64)\n  foreach (lflags CMAKE_EXE_LINKER_FLAGS\n      CMAKE_MODULE_LINKER_FLAGS\n      CMAKE_SHARED_LINKER_FLAGS)\n    set(${lflags} \"${${lflags}} /subsystem:console,${os_target}\")\n  endforeach()\n  message(STATUS \"Targeting subsystem ${os_target}\")\nendif (WIN32)\n\nif (UNIX)\n  include(CheckIncludeFiles)\n  check_include_files(\"asm-i386/stat.h\" HAVE_ASM_I386)\n  if (HAVE_ASM_I386)\n    # see comments above about adding configure.h\n    set(DEFINES ${DEFINES} -DHAVE_ASM_I386)\n  endif (HAVE_ASM_I386)\n  if (LINUX)\n    check_include_files(\"libunwind.h\" HAVE_LIBUNWIND_H)\n    if (HAVE_LIBUNWIND_H)\n      set(DEFINES ${DEFINES} -DHAVE_LIBUNWIND_H)\n    endif ()\n  else ()\n    set(HAVE_LIBUNWIND_H OFF)\n  endif ()\nendif (UNIX)\n\nif (UNIX)\n  # We don't want our instrument_init() pre-empted by debug-internal DynamoRIO\n  # that has visible internal routines.\n  CHECK_C_COMPILER_FLAG(\"-fvisibility=internal\" HAVE_FVISIBILITY_INTERNAL)\n  CHECK_C_COMPILER_FLAG(\"-fvisibility=hidden\" HAVE_FVISIBILITY_HIDDEN)\n  # Mac accepts internal but warns about it so we avoid it there.\n  if (HAVE_FVISIBILITY_INTERNAL AND NOT APPLE)\n    set(VISIBILITY \"internal\")\n  elseif (HAVE_FVISIBILITY_HIDDEN)\n    set(VISIBILITY \"hidden\")\n  else ()\n    message(\"${CMAKE_C_COMPILER} missing flag -fvisibility, using linker \"\n            \"script instead\")\n    set(VISIBILITY \" \")\n  endif ()\n  if (HAVE_FVISIBILITY_INTERNAL OR HAVE_FVISIBILITY_HIDDEN)\n    set(CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}\n      \"${CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}} -fvisibility=${VISIBILITY}\")\n  endif ()\n\n  if (APPLE)\n    # Incredibly, for both clang and g++, while a single compile-and-link\n    # invocation will create an executable.dSYM/ dir with debug info,\n    # with separate compilation the final link does NOT create the\n    # dSYM dir.\n    # The \"dsymutil\" program will create the dSYM dir for us.\n    # Strangely it takes in the executable and not the object\n    # files even though it's the latter that contain the debug info.\n    # Thus it will only work if the object files are still sitting around.\n    find_program(DSYMUTIL_PROGRAM dsymutil)\n    if (DSYMUTIL_PROGRAM)\n      set(CMAKE_C_LINK_EXECUTABLE\n        \"${CMAKE_C_LINK_EXECUTABLE}\"\n        \"${DSYMUTIL_PROGRAM} <TARGET>\")\n      set(CMAKE_C_CREATE_SHARED_LIBRARY\n        \"${CMAKE_C_CREATE_SHARED_LIBRARY}\"\n        \"${DSYMUTIL_PROGRAM} <TARGET>\")\n      set(CMAKE_CXX_LINK_EXECUTABLE\n        \"${CMAKE_CXX_LINK_EXECUTABLE}\"\n        \"${DSYMUTIL_PROGRAM} <TARGET>\")\n      set(CMAKE_CXX_CREATE_SHARED_LIBRARY\n        \"${CMAKE_CXX_CREATE_SHARED_LIBRARY}\"\n        \"${DSYMUTIL_PROGRAM} <TARGET>\")\n    endif ()\n  endif ()\nendif (UNIX)\n\nif (WIN32)\n  # Ensure that _AMD64_ or _X86_ are defined on Microsoft Windows, as otherwise\n  # um/winnt.h provided since Windows 10.0.22000 will error.\n  if (X64)\n    add_definitions(-D_AMD64_)\n  else (X64)\n    add_definitions(-D_X86_)\n  endif (X64)\n\n  # Use convention of DynamoRIO sources: DDKROOT env var (or DDK_ROOT cmake var).\n  # We don't require the DDK as dbghelp and symsrv are in the SDK as well, and\n  # we get ntdll_imports.lib from DR.\n  set(DDK_ROOT \"$ENV{DDKROOT}\" CACHE PATH \"Path to DDK or WDK.\")\n  if (\"${DDK_ROOT}\" STREQUAL \"\")\n    # Check default install path\n    if (EXISTS \"$ENV{SYSTEMDRIVE}/WINDDK/3790.1830/\")\n      set(DDK_ROOT \"$ENV{SYSTEMDRIVE}/WINDDK/3790.1830/\")\n    elseif (EXISTS \"$ENV{SYSTEMDRIVE}/WINDDK/6000/\")\n      set(DDK_ROOT \"$ENV{SYSTEMDRIVE}/WINDDK/6000/\")\n    elseif (EXISTS \"$ENV{SYSTEMDRIVE}/WINDDK/7600.16385.1/\")\n      set(DDK_ROOT \"$ENV{SYSTEMDRIVE}/WINDDK/7600.16385.1/\")\n    endif ()\n  endif (\"${DDK_ROOT}\" STREQUAL \"\")\n\n  # We can't include directly from DDK b/c the DDK include dir and VS include\n  # dirs are incompatible, so we have our own copies of the headers we need.\n  include_directories(wininc/psdk wininc/dxsdk)\n\n  # We need a newer version of dbghelp.dll than is in system32/ on 2K or XP.\n  # The versions that come with Debugging Tools for Windows are redistributable:\n  # \"you can distribute the DLL with your application\".\n  # The dbghelp.dll that comes in system32/ is not redistributable.\n  # We want 6.3+ for full drsyms features.\n  # 5.2 does not work (it's not just slower w/o SymSearch: it fails).\n  # Haven't tested in between.\n  # WINDDK/3790.1830/bin/x86/dbghelp.dll is 6.3.\n  # Older CMake binaries are 32-bit but newer ones can be 64-bit so we\n  # cannot rely on one or the other.\n  if (\"$ENV{PROGRAMW6432}\" STREQUAL \"\")\n    if (X64)\n      message(FATAL_ERROR \"On 32-bit Windows: 64-bit build not supported\")\n    endif ()\n    set(PROGFILES \"$ENV{PROGRAMFILES}\")\n    set(PROGFILES32 \"$ENV{PROGRAMFILES}\")\n    set(ARCH_SFX \"x86\")\n    set(DDK_SFX \"i386\")\n  else ()\n    set(PROGFILES \"$ENV{PROGRAMW6432}\")\n    set(PROGFILES32 \"$ENV{PROGRAMFILES\\(x86\\)}\")\n    if (\"${PROGFILES32}\" STREQUAL \"\")\n      set(PROGFILES32 \"$ENV{PROGRAMFILES}\")\n    endif ()\n    if (X64)\n      set(ARCH_SFX \"x64\")\n      set(DDK_SFX \"amd64\")\n    else (X64)\n      set(ARCH_SFX \"x86\")\n      set(DDK_SFX \"i386\")\n    endif (X64)\n  endif ()\n  # Allow packaging to specify a glob for a prefered path for x86 and x64.\n  set(DBGHELP_GLOB \"\" CACHE STRING\n    \"Preferred path for dbghelp.dll with wildcard expansion\")\n  # Even the VS2005 copy is 6.5 (despite its headers being < 6.3) so we can\n  # use those as well as the later SDK and standalone DTFW versions.\n  set(dbghelp_paths\n    \"${DBGHELP_GLOB}\"\n    \"${DDK_ROOT}/bin/${ARCH_SFX}/dbghelp.dll\"\n    \"${DDK_ROOT}/tools/tracing/${DDK_SFX}/dbghelp.dll\"\n    \"${PROGFILES32}/Windows Kits/*/Debuggers/${ARCH_SFX}/dbghelp.dll\"\n    # In case if SDK is not installed and we have Visual Studio, dbghelp.dll may be found in the\n    # Visual Studio's directory in subfolders Remote Debugger/x86 or Remote Debugger/x64 (xref i#1956).\n    # We look in both paths (Program Files and Program Files (x86)) because some versions of\n    # Visual Studio put dbghelp.dll in progfiles (especially 2008) and some in progfiles32.\n    \"${PROGFILES}/Microsoft Visual Studio */Common7/IDE/Remote Debugger/${ARCH_SFX}/dbghelp.dll\"\n    \"${PROGFILES32}/Microsoft Visual Studio */Common7/IDE/Remote Debugger/${ARCH_SFX}/dbghelp.dll\"\n    \"${PROGFILES32}/Microsoft Visual Studio */Common7/Packages/Debugger/${ARCH_SFX}/dbghelp.dll\"\n    \"${PROGFILES32}/Microsoft Visual Studio/*/Professional/Common7/IDE/Remote Debugger/${ARCH_SFX}/dbghelp.dll\")\n\n  if (X64)\n    set(dbghelp_paths ${dbghelp_paths}\n      # For older versions of windbg, x64 dbghelp.dll resides here.\n      \"${PROGFILES}/Debugging Tools for Windows (x64)/dbghelp.dll\")\n  else (X64)\n    set(dbghelp_paths ${dbghelp_paths}\n      \"${PROGFILES}/Microsoft Visual Studio */Common7/IDE/dbghelp.dll\"\n      # Putting this last mainly b/c only older versions (like my 6.3) are here.\n      \"${PROGFILES}/Debugging Tools for Windows/dbghelp.dll\")\n  endif (X64)\n  file(GLOB dbghelp_hint ${dbghelp_paths})\n  # XXX i#908: it seems cmake has trouble to lookup dbghelp.dll in\n  # 64-bit directory, so we just explicitly check several possible locations.\n  # Plus, we don't want system32, but NO_SYSTEM_ENVIRONMENT_PATH also\n  # excludes Program Files, so we avoid find_file() in general.\n  if (dbghelp_hint)\n    # DRi#1219: exclude VS2005 x64 dbghelp as it is buggy\n    list(LENGTH dbghelp_hint dbghelp_max)\n    math(EXPR dbghelp_max \"${dbghelp_max} - 1\")\n    set(dbghelp_index 0)\n    list(GET dbghelp_hint 0 dbghelp_default)\n    while (${dbghelp_index} LESS ${dbghelp_max})\n      if (X64 AND dbghelp_default MATCHES \"Visual Studio 8\")\n        # Keep looking.\n      elseif (X64 AND dbghelp_default MATCHES \"/x86/\")\n        # Keep looking.\n      elseif (NOT X64 AND dbghelp_default MATCHES \"/x64/\")\n        # Keep looking.\n      elseif (NOT X64 AND dbghelp_default MATCHES \"/amd64/\")\n        # Keep looking.\n      else ()\n        break ()\n      endif ()\n      math(EXPR dbghelp_index \"${dbghelp_index} + 1\")\n      list(GET dbghelp_hint ${dbghelp_index} dbghelp_default)\n    endwhile()\n    if (X64 AND dbghelp_default MATCHES \"Visual Studio 8\")\n      message(STATUS \"Unable to find non-VS2005 dbghelp.dll\")\n      set(dbghelp_default \"DBGHELP_DLL-NOTFOUND\")\n    endif ()\n  else ()\n    set(dbghelp_default \"DBGHELP_DLL-NOTFOUND\")\n  endif ()\n  set(DBGHELP_DLL \"\" CACHE STRING\n    \"location of dbghelp.dll from recent Debugging Tools for Windows\")\n  if (\"${DBGHELP_DLL}\" STREQUAL \"\")\n    set(DBGHELP_DLL ${dbghelp_default})\n  endif()\n  if (DBGHELP_DLL-NOTFOUND OR NOT EXISTS \"${DBGHELP_DLL}\")\n    message(FATAL_ERROR \"dbghelp.dll required and not found\")\n  else ()\n    message(STATUS \"Using ${DBGHELP_DLL}\")\n  endif ()\n  # Allow packaging to specify a glob for a prefered path for x86 and x64.\n  set(SYMSRV_GLOB \"\" CACHE STRING\n    \"Preferred path for dbghelp.dll with wildcard expansion\")\n  set(symsrv_paths\n    \"${SYMSRV_GLOB}\"\n    \"${PROGFILES32}/Windows Kits/*/Debuggers/${ARCH_SFX}/symsrv.dll\"\n    # In case if SDK is not installed and we have Visual Studio, symsrv.dll may be found in the\n    # same place as dbghelp.dll (see comment for dbghelp.dll) (xref i#1956).\n    \"${PROGFILES}/Microsoft Visual Studio */Common7/IDE/Remote Debugger/${ARCH_SFX}/symsrv.dll\"\n    \"${PROGFILES32}/Microsoft Visual Studio */Common7/IDE/Remote Debugger/${ARCH_SFX}/symsrv.dll\"\n    \"${PROGFILES32}/Microsoft Visual Studio */Common7/Packages/Debugger/${ARCH_SFX}/symsrv.dll\")\n\n  if (X64)\n    set(symsrv_paths ${symsrv_paths}\n      # For older versions of windbg, x64 symsrv.dll resides here.\n      \"${PROGFILES}/Debugging Tools for Windows (x64)/symsrv.dll\")\n  else (X64)\n    set(symsrv_paths ${symsrv_paths}\n      \"${PROGFILES}/Microsoft Visual Studio */Common7/IDE/symsrv.dll\"\n      # Putting this last mainly b/c only older versions (like my 6.3) are here.\n      \"${PROGFILES}/Debugging Tools for Windows/symsrv.dll\")\n  endif (X64)\n  file(GLOB symsrv_hint ${symsrv_paths})\n  if (symsrv_hint)\n    list(GET symsrv_hint 0 symsrv_default)\n    list(LENGTH symsrv_hint symsrv_max)\n    math(EXPR symsrv_max \"${symsrv_max} - 1\")\n    set(symsrv_index 0)\n    while (${symsrv_index} LESS ${symsrv_max})\n      if (X64 AND symsrv_default MATCHES \"/x86/\")\n        # Keep looking.\n      elseif (NOT X64 AND symsrv_default MATCHES \"/x64/\")\n        # Keep looking.\n      elseif (NOT X64 AND symsrv_default MATCHES \"/amd64/\")\n        # Keep looking.\n      else ()\n        break ()\n      endif ()\n      math(EXPR symsrv_index \"${symsrv_index} + 1\")\n      list(GET symsrv_hint ${symsrv_index} symsrv_default)\n    endwhile()\n  else ()\n    set(symsrv_default \"SYMSRV_DLL-NOTFOUND\")\n  endif ()\n  set(SYMSRV_DLL \"\" CACHE STRING\n    \"location of symsrv.dll from recent Debugging Tools for Windows\")\n  if (\"${SYMSRV_DLL}\" STREQUAL \"\")\n    set(SYMSRV_DLL ${symsrv_default})\n  endif()\n  if (SYMSRV_DLL-NOTFOUND OR NOT EXISTS \"${SYMSRV_DLL}\")\n    message(FATAL_ERROR \"symsrv.dll required and not found\")\n  else ()\n    message(STATUS \"Using ${SYMSRV_DLL}\")\n  endif ()\n\nendif (WIN32)\n\nif (BUILDING_SUB_PACKAGE)\n  set(INSTALL_PREFIX \"drmemory/\")\nelse ()\n  set(INSTALL_PREFIX \"\")\nendif()\n\n# To run out of build dir we put libs and scripts in dirs that match install layout\n# except minus the toolname prefix dir.\n# The CPack NSIS interface requires a bin/ dir, so for the Windows package\n# we prefix bin/\n# XXX: should clean all this up and normalize across platforms now\n# that we have drsyms on Linux and once we're sure we don't need to\n# support the old layout.\nif (WIN32 AND TOOL_DR_MEMORY)\n  set(INSTALL_BIN_PREFIX \"${INSTALL_PREFIX}.\")\n  set(BUILD_BIN_PREFIX \".\")\nelse ()\n  # Unified layout: match Windows since we're moving toward C-based frontends\n  # that won't have auxiliary scripts we want to hide.\n  set(INSTALL_BIN_PREFIX \"${INSTALL_PREFIX}.\")\n  set(BUILD_BIN_PREFIX \".\")\nendif ()\n# For NSIS we have everything in top-level bin/\n# Once we have x64 we'll need to address: fix CPack?\nif (X64)\n  set(INSTALL_BIN \"${INSTALL_BIN_PREFIX}/bin64\")\n  set(BUILD_BIN \"${BUILD_BIN_PREFIX}/bin64\")\nelse (X64)\n  set(INSTALL_BIN \"${INSTALL_BIN_PREFIX}/bin\")\n  set(BUILD_BIN \"${BUILD_BIN_PREFIX}/bin\")\nendif (X64)\nif (DEBUG_BUILD)\n  set(build_type \"debug\")\nelse (DEBUG_BUILD)\n  set(build_type \"release\")\nendif (DEBUG_BUILD)\nset(INSTALL_LIB \"${INSTALL_BIN}/${build_type}\")\nset(BUILD_LIB \"${BUILD_BIN}/${build_type}\")\n\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}/${BUILD_LIB}\")\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_LIBRARY_OUTPUT_DIRECTORY}\")\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}/${BUILD_BIN}\")\nif (\"${CMAKE_GENERATOR}\" MATCHES \"Visual Studio\")\n  # we don't support the Debug and Release subdirs\n  foreach (config ${CMAKE_CONFIGURATION_TYPES})\n    string(TOUPPER \"${config}\" config_upper)\n    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${config_upper}\n      \"${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\")\n    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${config_upper}\n      \"${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}\")\n    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${config_upper}\n      \"${CMAKE_LIBRARY_OUTPUT_DIRECTORY}\")\n  endforeach ()\nendif ()\n\n##################################################\n# option sharing (PR 478146)\n\nset(CPP_IGNORE_EMPTY \"\")\nif (UNIX)\n  if (APPLE)\n    # /usr/bin/cpp is broken and won't honor -B flags\n    set(CMAKE_CPP_FOR_OPS ${CMAKE_C_COMPILER})\n    set(CPP_INC -Wp,-I,)\n    # Avoid clang warning on perl ''\n    set(CPP_IGNORE_EMPTY -Wno-invalid-pp-token)\n  else (APPLE)\n    # \"gcc -E\" on a non-.c-extension file gives message:\n    #   \"linker input file unused because linking not done\"\n    # and doesn't produce any output, so we must use cpp for our .asm files.\n    # we assume it's in the same dir.\n    get_filename_component(compiler_path ${CMAKE_C_COMPILER} PATH)\n    find_program(CMAKE_CPP_FOR_OPS cpp HINTS \"${compiler_path}\"\n      DOC \"path to C preprocessor\")\n    if (cpp-NOTFOUND OR NOT EXISTS \"${CMAKE_CPP_FOR_OPS}\")\n      message(FATAL_ERROR \"cpp is required to build\")\n    endif (cpp-NOTFOUND OR NOT EXISTS \"${CMAKE_CPP_FOR_OPS}\")\n    mark_as_advanced(CMAKE_CPP_FOR_OPS)\n    set(CPP_INC -I)\n  endif (APPLE)\n  set(CPP_NO_LINENUM -P)\nelse (UNIX)\n  set(CMAKE_CPP_FOR_OPS ${CMAKE_C_COMPILER})\n  set(CPP_NO_LINENUM /EP)\n  set(CPP_INC /I)\nendif (UNIX)\n\n# options_for_docs is built in docs/CMakeLists.txt since custom commands\n# are directory-local\n\n##################################################\n# utility functions\n\nfunction (append_property_string type target name value)\n  # XXX: if we require cmake 2.8.6 we can simply use APPEND_STRING\n  get_property(cur ${type} ${target} PROPERTY ${name})\n  if (cur)\n    set(value \"${cur} ${value}\")\n  endif (cur)\n  set_property(${type} ${target} PROPERTY ${name} \"${value}\")\nendfunction (append_property_string)\n\nfunction (set_output_dirs dir)\n  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${dir}\" PARENT_SCOPE)\n  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${dir}\" PARENT_SCOPE)\n  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${dir}\" PARENT_SCOPE)\n  if (\"${CMAKE_GENERATOR}\" MATCHES \"Visual Studio\")\n    # we don't support the Debug and Release subdirs\n    foreach (config ${CMAKE_CONFIGURATION_TYPES})\n      string(TOUPPER \"${config}\" config_upper)\n      set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${config_upper}\n        \"${dir}\" PARENT_SCOPE)\n      set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${config_upper}\n        \"${dir}\" PARENT_SCOPE)\n      set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${config_upper}\n        \"${dir}\" PARENT_SCOPE)\n    endforeach ()\n  endif ()\nendfunction (set_output_dirs)\n\n##################################################\n# find DynamoRIO so tests has its path, but don't include it or run\n# its configure commands to avoid changing cflags:\n\n# DR clobbers the global cflags, so we save and then restore them for\n# our tests (and ourselves for non-pre-built DR).\n# configure_DynamoRIO_client() also does so we do this even for pre-built DR\n# for tests.\nforeach (config \"\" ${CMAKE_BUILD_TYPE} ${CMAKE_CONFIGURATION_TYPES})\n  if (\"${config}\" STREQUAL \"\")\n    set(config_upper \"\")\n  else (\"${config}\" STREQUAL \"\")\n    string(TOUPPER \"_${config}\" config_upper)\n  endif (\"${config}\" STREQUAL \"\")\n  foreach (var CMAKE_C_FLAGS${config_upper};CMAKE_CXX_FLAGS${config_upper})\n    set(SAVE_${var} \"${${var}}\")\n  endforeach (var)\nendforeach (config)\n\n# we write DynamoRIO_DIR to the cache, so on re-interpreting the file later\n# we can't tell whether the user set a value or not. we could\n# use a differently-named var for the user but instead we check vs\n# the local build path to avoid breaking existing scripts.\nset(LOCAL_DynamoRIO_DIR \"${PROJECT_BINARY_DIR}/dynamorio/cmake\")\nif (DEFINED DynamoRIO_DIR AND NOT \"${DynamoRIO_DIR}\" STREQUAL \"${LOCAL_DynamoRIO_DIR}\")\n  set(USER_SPECIFIED_DynamoRIO_DIR ON)\nelse ()\n  set(USER_SPECIFIED_DynamoRIO_DIR OFF)\nendif ()\n\n# when updating this, also update the git submodule\nset(DynamoRIO_VERSION_REQUIRED \"10.0.0\")\n\nset(DR_install_dir \"dynamorio\")\n\nset(DynamoRIO_PAGE_SIZE_COMPATIBILITY ON)\n\nset(DynamoRIO_LOG_COMPATIBILITY ON)\n\nif (USER_SPECIFIED_DynamoRIO_DIR)\n  # i#67: relative dirs are not really supported in find_package: they're\n  # relative to source dir not build dir, so we change that here.\n  # we can't do get_filename_component(... ABSOLUTE) b/c it's relative to\n  # source dir as well.\n  if (\"${DynamoRIO_DIR}\" MATCHES \"^\\\\.\\\\.\")\n    get_filename_component(DynamoRIO_DIR \"${PROJECT_BINARY_DIR}/${DynamoRIO_DIR}\" ABSOLUTE)\n  endif ()\n  # exit if it doesn't exist since very misleading if find_package() goes\n  # and finds some other version from what was requested\n  if (NOT EXISTS \"${DynamoRIO_DIR}/DynamoRIOConfig.cmake\")\n    message(FATAL_ERROR \"${DynamoRIO_DIR}/DynamoRIOConfig.cmake does not exist: invalid DynamoRIO_DIR\")\n  endif ()\n\n  if (BUILDING_SUB_PACKAGE)\n    message(FATAL_ERROR \"Sub-package not supported with pre-built DR\")\n  endif ()\n\n  message(STATUS \"Attempting to use pre-built DynamoRIO: ${DynamoRIO_DIR}\")\n  find_package(DynamoRIO ${DynamoRIO_VERSION_REQUIRED})\n  if (NOT DynamoRIO_FOUND)\n    message(FATAL_ERROR \"DynamoRIO package required to build\")\n  endif(NOT DynamoRIO_FOUND)\n  # from here on use what was found, not what was passed in\n  get_filename_component(DynamoRIO_DIR \"${DynamoRIO_CONFIG}\" PATH)\n  # preserve real value in the cache so it's easy to tell\n  set(DynamoRIO_DIR \"${DynamoRIO_DIR}\" CACHE PATH \"Path to DynamoRIO.\")\n  message(STATUS \"DynamoRIO that matches: ${DynamoRIO_VERSION} in ${DynamoRIO_DIR}\")\nelse (USER_SPECIFIED_DynamoRIO_DIR)\n  # Build from our local copy of the sources, coming from a git submodule: i#74.\n  set(DynamoRIO_DIR \"${LOCAL_DynamoRIO_DIR}\" CACHE PATH \"Path to DynamoRIO.\")\n  message(STATUS \"Building DynamoRIO from local sources ${DynamoRIO_DIR}\")\n\n  # We include DynamoRIO as a subdir here to make it easy to use the\n  # DynamoRIOConfig.cmake at configure time: however, that also means we have\n  # potential conflicts in CMake's global option and target space.\n  # Ideally, DynamoRIO would prefix all its options and targets with \"DR_\"\n  # or something.  For now we live w/ the ugliness.\n  # (An alternative would be to use the ExternalProject feature: but\n  # then we don't have DynamoRIOConfig.cmake at config time and we'd\n  # either need a parent build project or to hack our find_package().)\n\n  # it seems that we must set these in the cache for the subproj to see them:\n  set(BUILD_DOCS OFF CACHE BOOL \"DynamoRIO option: build client samples\")\n  set(BUILD_SAMPLES OFF CACHE BOOL \"DynamoRIO option: build documentation\")\n  # our local DR build matches our own build type\n  if (\"${CMAKE_BUILD_TYPE}\" MATCHES \"Debug\")\n    set(DEBUG ON CACHE BOOL \"DynamoRIO option: debug build\")\n    set(INTERNAL ON CACHE BOOL \"DynamoRIO option: internal build\")\n  endif (\"${CMAKE_BUILD_TYPE}\" MATCHES \"Debug\")\n  if (DRM_COPY_TO_DEVICE)\n    set(DR_COPY_TO_DEVICE ON CACHE BOOL \"DynamoRIO option: copy to Android\")\n    get_filename_component(builddir ${PROJECT_BINARY_DIR} NAME)\n    set(DR_DEVICE_BASEDIR \"${DRM_DEVICE_BASEDIR}/${builddir}\" CACHE STRING\n      \"DynamoRIO option: Android path\")\n  endif ()\n  # We do not want DR install, except for the targets we need for our\n  # multi-export-set install of the DRMF.  We need those targets\n  # even for BUILDING_SUB_PACKAGE.\n  set(DO_DR_INSTALL OFF)\n  set(DO_DR_INSTALL_TARGETS ON)\n  # Stick the binaries somewhere outside of the install dir.\n  # However, NSIS won't allow an absolute path (i#1099).\n  # So for an automated package.cmake build via cpack, we use .. which\n  # is fine in the package dir structure.  We don't want .. for a\n  # user-specified destination of course.  We simply don't\n  # support creating a package manually outside of package.cmake.\n  if (BUILDING_PACKAGE)\n    set(DR_INSTALL_TARGETS_DEST ../ignored-installs)\n  else ()\n    set(DR_INSTALL_TARGETS_DEST ${PROJECT_BINARY_DIR}/dynamorio/installs)\n  endif ()\n  # i#1449: we need cmake to remove the absolute path from the LC_LOAD_DYLIB\n  # entries, which only happens on install.  We can't easily do a two-step\n  # install b/c subdirs go after the main dir -- so we have DR cooperation.\n  set(DR_INSTALL_DEPLOY_BIN_DEST ${DR_install_dir}/${BIN_ARCH})\n\n  add_subdirectory(dynamorio)\n\n  # don't show DR options in drmem cmake list\n  # to really hide we should mark as INTERNAL but not worth it since would\n  # have to do for all of DR's many options.\n  # see comment above about DR prefixing its options.\n  mark_as_advanced(BUILD_CORE BUILD_DOCS BUILD_SAMPLES BUILD_EXT BUILD_TESTS\n      BUILD_TOOLS DEBUG INTERNAL)\n\n  # do not import dynamorio lib target: we'd end up w/ duplicate\n  # dynamorio targets\n  set(DynamoRIO_INTERNAL ON)\n  # our included DynamoRIO project will set DynamoRIO_SOURCE_DIR in cache\n  # for us so we'll get proper include dirs for extensions.\n\n  find_package(DynamoRIO ${DynamoRIO_VERSION_REQUIRED})\n  if (NOT DynamoRIO_FOUND OR\n      # make sure it didn't go find some other pre-built version after\n      # seeing that the local one is somehow not suitable\n      NOT \"${DynamoRIO_CONFIG}\" STREQUAL \"${DynamoRIO_DIR}/DynamoRIOConfig.cmake\")\n    message(FATAL_ERROR \"Local DynamoRIO mis-configured\")\n  endif ()\n\n  # Restore global flags\n  foreach (config \"\" ${CMAKE_BUILD_TYPE} ${CMAKE_CONFIGURATION_TYPES})\n    if (\"${config}\" STREQUAL \"\")\n      set(config_upper \"\")\n    else (\"${config}\" STREQUAL \"\")\n      string(TOUPPER \"_${config}\" config_upper)\n    endif (\"${config}\" STREQUAL \"\")\n    foreach (var CMAKE_C_FLAGS${config_upper};CMAKE_CXX_FLAGS${config_upper})\n      set(${var} \"${SAVE_${var}}\")\n    endforeach (var)\n  endforeach (config)\nendif (USER_SPECIFIED_DynamoRIO_DIR)\n\nif (USER_SPECIFIED_DynamoRIO_DIR)\n  # if we're building from our own DR, DR adds this option for us\n  option(GENERATE_PDBS \"generate Windows debug information\" ON)\n  mark_as_advanced(GENERATE_PDBS)\nendif (USER_SPECIFIED_DynamoRIO_DIR)\n\n# This must be before any add_library() or add_executable()\n# but that means for local DR sources we haven't yet included\n# DR's option(), so we check whether defined.\nif (DEFINED GENERATE_PDBS AND NOT GENERATE_PDBS)\n  # Default from cmake in DEBUG and RELWITHDEBINFO has /debug\n  foreach (var CMAKE_C_FLAGS;CMAKE_CXX_FLAGS;\n      CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER};\n      CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER};\n      # tests are always built as Debug\n      CMAKE_C_FLAGS_DEBUG;CMAKE_CXX_FLAGS_DEBUG)\n    string(REGEX REPLACE \"/Zi\" \"\" ${var} \"${${var}}\")\n  endforeach ()\n  foreach (var CMAKE_EXE_LINKER_FLAGS_${CMAKE_BUILD_TYPE_UPPER};\n      CMAKE_MODULE_LINKER_FLAGS_${CMAKE_BUILD_TYPE_UPPER};\n      CMAKE_SHARED_LINKER_FLAGS_${CMAKE_BUILD_TYPE_UPPER};\n      # tests are always built as Debug\n      CMAKE_EXE_LINKER_FLAGS_DEBUG;\n      CMAKE_MODULE_LINKER_FLAGS_DEBUG;\n      CMAKE_SHARED_LINKER_FLAGS_DEBUG)\n    string(REGEX REPLACE \"/debug\" \"\" ${var} \"${${var}}\")\n  endforeach ()\nendif (DEFINED GENERATE_PDBS AND NOT GENERATE_PDBS)\n\n# Shrink binaries and pdbs (/Gy should already be there)\nif (WIN32)\n  foreach (var CMAKE_EXE_LINKER_FLAGS_${CMAKE_BUILD_TYPE_UPPER};\n      CMAKE_MODULE_LINKER_FLAGS_${CMAKE_BUILD_TYPE_UPPER};\n      CMAKE_SHARED_LINKER_FLAGS_${CMAKE_BUILD_TYPE_UPPER})\n    set(${var} \"${${var}} /opt:ref /opt:icf /pdbcompress\")\n  endforeach ()\nendif ()\n\nif (APPLE)\n  # install_name_tool needs write access (i#1372)\n  set(owner_access OWNER_READ OWNER_WRITE)\nelse (APPLE)\n  set(owner_access OWNER_READ)\nendif (APPLE)\n\n##################################################\n# now that we have ${DynamoRIO_DIR} we can configure docs\n\nfind_package(Doxygen)\nif (NOT DOXYGEN_FOUND)\n  # We'd like to require doxygen for Windows pre-commit suite but it's not\n  # installed on our bots so we live with just Linux catching docs errors.\n  # Ditto for Mac.\n  if (TEST_SUITE AND UNIX AND NOT APPLE)\n    message(FATAL_ERROR \"doxygen is required to build the documentation\")\n  else ()\n    # Non-fatal for a single, un-official build, or on Windows\n    message(WARNING \"doxygen not found: documentation will NOT be built\")\n  endif ()\nelse ()\n  add_subdirectory(docs)\nendif ()\n\n##################################################\n# assembly support\n\n# set up assembly support and CMAKE_CPP\nset(old_debug ${DEBUG})\nset(DEBUG ON) # ensure we get debug info\ninclude(${DynamoRIO_DIR}/cpp2asm_support.cmake)\nset(DEBUG ${old_debug})\n\nif (UNIX)\n  if (NOT CMAKE_ASM_SUPPORTS_INTEL_SYNTAX)\n    message(FATAL_ERROR \"${CMAKE_ASM_COMPILER} does not support required flags\")\n  endif (NOT CMAKE_ASM_SUPPORTS_INTEL_SYNTAX)\nendif (UNIX)\n# for cpp2asm_defines.h\ninclude_directories(${DynamoRIO_DIR})\n\n# XXX: even if we went to a configure.h, we wouldn't have the DR platform\n# defines there unless we duplicated them.\nif (UNIX)\n  if (APPLE)\n    set(DEFINES ${DEFINES} -DASSEMBLE_WITH_NASM)\n  else (APPLE)\n    set(DEFINES ${DEFINES} -DASSEMBLE_WITH_GAS)\n  endif (APPLE)\nelse (UNIX)\n  set(DEFINES ${DEFINES} -DASSEMBLE_WITH_MASM)\nendif (UNIX)\nget_DynamoRIO_defines(DR_DEFINES OFF)\n# We need defines to be a list to pass as separate args to custom command.\n# We assume none have spaces inside them which seems reasonable.\nstring(REPLACE \" \" \";\" DR_DEFINES \"${DR_DEFINES}\")\nset(asm_defs ${DR_DEFINES} ${DEFINES} -I \"${DynamoRIO_DIR}\")\n\nset(asm_deps \"${DynamoRIO_DIR}/cpp2asm_defines.h\")\n\nif (ARM)\n  set(asm_file \"asm_utils_arm.asm\")\nelse ()\n  set(asm_file \"asm_utils_x86.asm\")\nendif ()\nadd_asm_target(common/${asm_file} asm_utils_src asm_utils_tgt \"\"\n  \"${asm_defs}\" \"${asm_deps}\")\n\n##################################################\n\nset(DrMemory_INTERNAL ON) # Do not import exported targets.\n\nif (ANDROID)\n  # We cache this for us in sub-projects like framework/samples/\n  set(TOP_BINARY_DIR ${PROJECT_BINARY_DIR})\n  get_filename_component(builddir ${TOP_BINARY_DIR} NAME)\n  set(DRM_DEVICE_BINARY_DIR ${DRM_DEVICE_BASEDIR}/${builddir})\nendif ()\n\nfunction (copy_target_to_device target)\n  if (DRM_COPY_TO_DEVICE)\n    DynamoRIO_copy_target_to_device(${target} ${DRM_DEVICE_BASEDIR} \"${_DR_location_suffix}\")\n  endif ()\nendfunction (copy_target_to_device)\n\nfunction (copy_file_to_device local_path)\n  if (DRM_COPY_TO_DEVICE)\n    file(RELATIVE_PATH relpath \"${TOP_BINARY_DIR}\" \"${local_path}\")\n    execute_process(\n      COMMAND ${ADB} push ${local_path} ${DRM_DEVICE_BINARY_DIR}/${relpath}\n      RESULT_VARIABLE adb_result ERROR_VARIABLE adb_err OUTPUT_QUIET)\n    if (adb_result)\n      message(FATAL_ERROR \"*** Failed to adb push ${local_path}: ${adb_err} ***\\n\")\n    endif ()\n  endif ()\nendfunction (copy_file_to_device)\n\nfunction (get_target_path_for_execution out target)\n  if (ANDROID)\n    DynamoRIO_get_target_path_for_execution(local ${target} ${DRM_DEVICE_BASEDIR} \"${_DR_location_suffix}\")\n  else ()\n    DynamoRIO_get_target_path_for_execution(local ${target} \"\" \"${_DR_location_suffix}\")\n  endif ()\n  set(${out} ${local} PARENT_SCOPE)\nendfunction (get_target_path_for_execution)\n\nfunction (convert_local_path_to_device_path out local_path)\n  if (ANDROID)\n    file(RELATIVE_PATH relpath \"${TOP_BINARY_DIR}\" \"${local_path}\")\n    set(local ${DRM_DEVICE_BINARY_DIR}/${relpath})\n  else ()\n    set(local ${local_path})\n  endif ()\n  set(${out} ${local} PARENT_SCOPE)\nendfunction (convert_local_path_to_device_path)\n\nfunction (prefix_cmd_if_necessary cmd_out use_ats cmd_in)\n  DynamoRIO_prefix_cmd_if_necessary(local ${use_ats} ${cmd_in} ${ARGN})\n  set(${cmd_out} ${local} PARENT_SCOPE)\nendfunction (prefix_cmd_if_necessary)\n\nfunction (copy_and_adjust_drpaths basedir target)\n  if (ANDROID AND DRM_COPY_TO_DEVICE)\n    file(GLOB drpaths ${target}/*${target}*.drpath)\n    foreach(drpath ${drpaths}) # we only expect one though\n      file(READ ${drpath} contents)\n      string(REPLACE \"${PROJECT_BINARY_DIR}\" \"${DRM_DEVICE_BINARY_DIR}\"\n        contents ${contents})\n      file(WRITE ${drpath} ${contents})\n      copy_file_to_device(${drpath})\n    endforeach ()\n  endif ()\nendfunction ()\n\nif (WIN32)\n  set(FLAG_DISABLE_FPO \"/Oy-\")\nelse (WIN32)\n  set(FLAG_DISABLE_FPO \"-fno-omit-frame-pointer\")\nendif (WIN32)\n\nfunction(append_src_compile_flags srcfile new_flags)\n  get_source_file_property(cur_flags ${srcfile} COMPILE_FLAGS)\n  # XXX: if we require cmake 2.8.6 we can simply use APPEND_STRING\n  if (NOT cur_flags)\n    set(cur_flags \"\")\n  endif (NOT cur_flags)\n  set_source_files_properties(${srcfile} PROPERTIES\n    COMPILE_FLAGS \"${cur_flags} ${new_flags}\")\nendfunction(append_src_compile_flags)\n\n# new set_property() doesn't want -D but our cpp invocation above does\nstring(REGEX REPLACE \"-D\" \"\" DEFINES_NO_D \"${DEFINES}\")\nstring(REGEX REPLACE \"-D\" \"\" DR_DEFINES_NO_D \"${DR_DEFINES}\")\n\noption(BUILD_TOOL_TESTS \"build Dr. Memory/Dr. Heapstat tests\" ON)\n\nif (TOOL_DR_HEAPSTAT)\n  # Dr. Heapstat\n  set(srcs\n    drheapstat/drheapstat.c\n    drheapstat/staleness.c\n    common/alloc.c\n    common/alloc_unopt.c\n    common/alloc_replace.c\n    common/heap.c\n    common/callstack.c\n    common/utils.c\n    common/utils_shared.c\n    ${asm_utils_src}\n    common/redblack.c\n    common/crypto.c\n    # For leak checking we need stack.c but it pulls in the inter-dependent\n    # slowpath, fastpath, and shadow: we'll want those for staleness anyway.\n    # Looking more and more like Dr. Memory!\n    drmemory/annotations.c\n    drmemory/leak.c\n    drmemory/options.c\n    drmemory/stack.c\n    drmemory/instru.c\n    drmemory/spill.c\n    drmemory/slowpath.c\n    drmemory/fastpath.c\n    drmemory/shadow.c\n    drmemory/perturb.c)\nelse (TOOL_DR_HEAPSTAT)\n  # Dr. Memory\n  set(srcs\n    drmemory/annotations.c\n    drmemory/drmemory.c\n    drmemory/instru.c\n    drmemory/spill.c\n    drmemory/slowpath.c\n    drmemory/fastpath.c\n    drmemory/stack.c\n    drmemory/shadow.c\n    drmemory/options.c\n    drmemory/pattern.c\n    common/alloc.c\n    common/alloc_unopt.c\n    common/alloc_replace.c\n    common/heap.c\n    common/callstack.c\n    drmemory/alloc_drmem.c\n    drmemory/syscall.c\n    drmemory/report.c\n    drmemory/replace.c\n    drmemory/leak.c\n    drmemory/memlayout.c\n    drmemory/perturb.c\n    common/utils.c\n    common/utils_shared.c\n    ${asm_utils_src}\n    common/redblack.c\n    common/crypto.c\n    drmemory/fuzzer.c)\n  if (UNIX)\n    if (APPLE)\n      set(srcs ${srcs} drmemory/syscall_macos.c)\n    else (APPLE)\n      set(srcs ${srcs} drmemory/syscall_linux.c)\n    endif (APPLE)\n  else (UNIX)\n    set(srcs ${srcs} drmemory/syscall_windows.c)\n    set(srcs ${srcs} drmemory/syscall_wingdi.c)\n    set(srcs ${srcs} drmemory/gdicheck.c)\n    set(srcs ${srcs} drmemory/handlecheck.c)\n  endif (UNIX)\n  set(scripts ${toolname}.pl)\nendif (TOOL_DR_HEAPSTAT)\n\nif (X86)\n  set(srcs ${srcs} drmemory/slowpath_x86.c)\n  set(srcs ${srcs} drmemory/stack_x86.c)\n  set(srcs ${srcs} drmemory/fastpath_x86.c)\nelse ()\n  set(srcs ${srcs} drmemory/slowpath_arm.c)\n  set(srcs ${srcs} drmemory/stack_arm.c)\n  set(srcs ${srcs} drmemory/fastpath_arm.c)\nendif ()\n\nif (WIN32)\n  set(srcs ${srcs} make/resources.rc)\nendif ()\n\n# front-end needs to be named ${toolname}.exe and thus has ${toolsname}.pdb, so\n# we rename client lib (plus cmake best w/o same-name targets)\nset(client_target \"${toolname}lib\")\nif (TOOL_DR_MEMORY)\n  set(frontend_srcs drmemory/frontend.c drmemory/options.c)\nelse (TOOL_DR_MEMORY)\n  set(frontend_srcs drheapstat/drheapstat_frontend.c)\nendif (TOOL_DR_MEMORY)\nif (WIN32)\n  set(frontend_srcs ${frontend_srcs} make/resources.rc)\nendif ()\nadd_executable(${toolname} ${frontend_srcs})\nif (ANDROID AND TOOL_DR_MEMORY)\n  # There's no DT_RPATH support so we have a script set the load path.\n  # To avoid confusion we rename the exe.\n  set(frontend_name \"launcher\")\n  set_target_properties(${toolname} PROPERTIES OUTPUT_NAME \"${frontend_name}\")\n  configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/${tooldir}/launcher_android.sh\"\n    \"${PROJECT_BINARY_DIR}/${BUILD_BIN}/${toolname}\" @ONLY)\n  copy_file_to_device(\"${PROJECT_BINARY_DIR}/${BUILD_BIN}/${toolname}\")\nendif ()\nif (WIN32)\n  target_link_libraries(${toolname} dbghelp)\nendif (WIN32)\ncopy_target_to_device(${toolname})\n\nmacro(set_library_version target number)\n  # We only set the version/soversion on Windows to avoid many\n  # negatives (DRi#1374, DRi#2127, Android \"adb push\" not supporting\n  # symlinks, etc.) and very few positives on UNIX platforms.  DR's\n  # loader and the DRMF init code perform their own version checks for\n  # client compatibility.\n  if (WINDOWS)\n    set_target_properties(${target} PROPERTIES VERSION ${number})\n  endif ()\nendmacro()\n\nadd_library(${client_target} SHARED ${srcs})\nset_library_version(${client_target} ${TOOL_VERSION_NUMBER})\n_DR_append_property_list(TARGET ${client_target} COMPILE_DEFINITIONS\n  # If we end up wanting this for other DEFINES uses above we'll have to set\n  # client_target earlier.  For now we only need for the C code.\n  \"${DEFINES_NO_D};CLIENT_LIBNAME=${client_target};RC_IS_TOOLLIB\")\nif (\"${CMAKE_GENERATOR}\" MATCHES \"Visual Studio\")\n  # ensure race-free parallel builds\n  add_dependencies(${client_target} ${asm_utils_tgt})\nendif (\"${CMAKE_GENERATOR}\" MATCHES \"Visual Studio\")\ncopy_target_to_device(${client_target})\n\n# We require frames in our replacement routines in order to reliably include\n# the allocator routines in the callstack for i#639.  Xref i#958.\nappend_src_compile_flags(common/alloc_replace.c ${FLAG_DISABLE_FPO})\n\nif (WIN32)\n  # our addr2line for Windows\n  add_executable(winsyms tools/winsyms.c make/resources.rc)\n  target_link_libraries(winsyms dbghelp)\n  _DR_append_property_list(TARGET winsyms COMPILE_DEFINITIONS\n    # We need full defines to get version values for resources\n    \"${DEFINES_NO_D};RC_IS_WINSYMS\")\n  # configure_DynamoRIO_client clears global flags so add as additional\n  # request static libc to avoid manifest files and libc portability issues\n  string(REGEX REPLACE \"/MD\" \"/MT\" CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}\n    \"${CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}}\")\n  set_source_files_properties(tools/winsyms.c PROPERTIES\n    COMPILE_FLAGS \"${CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}}\")\n\n  # Helper tool to ensure we have version info in our binaries:\n  add_executable(verinfo tools/verinfo.c make/resources.rc)\n  target_link_libraries(verinfo version)\n  _DR_append_property_list(TARGET verinfo COMPILE_DEFINITIONS\n    \"${DEFINES_NO_D};RC_IS_VERINFO\")\n\n  # i#1009c#4: auto-register Dr. Memory as a Visual Studio External Tool\n  add_executable(vs_external_tool tools/vs_external_tool.c make/resources.rc)\n  _DR_append_property_list(TARGET vs_external_tool COMPILE_DEFINITIONS\n    \"${DEFINES_NO_D};RC_IS_VS_EXTERNAL_TOOL\")\nendif (WIN32)\n\n# we want a preferred base to avoid patching pcaches\nset(DynamoRIO_SET_PREFERRED_BASE ON)\nif (ANDROID)\n  # i#1881: 0x73800000 seems to conflict w/ hardcoded Android mmaps.\n  set(PREFERRED_BASE 0x17000000)\nelse ()\n  set(PREFERRED_BASE 0x73800000)\nendif ()\n\n# we can handle being tied to a particular DR version (we already are)\nset(DynamoRIO_FAST_IR ON)\n\nset(DynamoRIO_REG_COMPATIBILITY ON)\nif (NOT STATIC_DRSYMS)\n  set(DynamoRIO_USE_LIBC OFF)\nendif (NOT STATIC_DRSYMS)\nconfigure_DynamoRIO_client(${client_target})\n# i#277/PR 540817: features split into DynamoRIO Extensions\nuse_DynamoRIO_extension(${client_target} drcontainers)\n# For efficiency, we use the static versions of DR's extensions.  We have the same\n# LGPL license as drutil and drwrap so it works out.\nuse_DynamoRIO_extension(${client_target} drmgr_static)\nuse_DynamoRIO_extension(${client_target} drx_static)\nuse_DynamoRIO_extension(${client_target} drutil_static)\nuse_DynamoRIO_extension(${client_target} drwrap_static)\nuse_DynamoRIO_extension(${client_target} drreg_static)\nif (HAVE_LIBUNWIND_H)\n  use_DynamoRIO_extension(${client_target} drcallstack_static)\nendif ()\n# DRi#1829: we discussed invoking drcov as a separate client, which would require using\n# all shared ext libs.  We ended up making drcovlib.\nuse_DynamoRIO_extension(${client_target} drcovlib_static)\nset_target_properties(${client_target} PROPERTIES\n  # dlls are put in runtime dir but we want lib dir\n  RUNTIME_OUTPUT_DIRECTORY${location_suffix} \"${CMAKE_LIBRARY_OUTPUT_DIRECTORY}\")\nif (WIN32)\n  # annoying to have ASLR and not on module list\n  # plus, now we require the same base for pcache\n  set(new_flags \"/dynamicbase:no\")\n\n  # This flag is added by VS generators so we may as well add for Ninja\n  set(new_flags \"/nxcompat\")\n\n  # i#1805: avoid strtol dup symbol errors (libucrtd vs ntdll_imports).\n  set(new_flags \"${new_flags} /force:multiple\")\n\n  # Reduce size by stripping out unused code (we don't seem to need /Gy for this,\n  # and VS generators seem to set it already, so we add here for Ninja).\n  # XXX: DRi#2167 is adding this for all clients so we can remove this once\n  # we update to a recent DR.\n  set(new_flags \"${new_flags} /opt:ref\")\n  if (NOT DEBUG_BUILD)\n    # Match DR's settings, though again it's not clear the benefit w/o /Gy.\n    set(new_flags \"${new_flags} /opt:icf\")\n  endif()\n\n  if (NOT DEFINED GENERATE_PDBS OR GENERATE_PDBS)\n    set(new_flags \"${new_flags} /debug\")\n  endif ()\n  get_target_property(cur_flags ${client_target} LINK_FLAGS)\n  if (NOT cur_flags)\n    set(cur_flags \"\")\n  endif (NOT cur_flags)\n  set_target_properties(${client_target} PROPERTIES\n    LINK_FLAGS \"${cur_flags} ${new_flags}\")\nendif (WIN32)\n\nif (DEFINED DynamoRIO_RPATH)\n  set(old_rpath ${DynamoRIO_RPATH})\nelse ()\n  set(old_rpath OFF)\nendif ()\nset(DynamoRIO_RPATH ON)\nconfigure_DynamoRIO_standalone(${toolname})\nset(DynamoRIO_RPATH ${old_rpath})\ntarget_link_libraries(${toolname} drinjectlib drconfiglib drfrontendlib\n  drsyscall_static)\nif (WIN32)\n  set_target_properties(${toolname} PROPERTIES\n    VERSION ${TOOL_VERSION_NUMBER})\n  _DR_append_property_list(TARGET ${toolname}\n    COMPILE_DEFINITIONS \"${DEFINES_NO_D};RC_IS_FRONTEND\")\nelse (WIN32)\n  DynamoRIO_add_rel_rpaths(${toolname} drinjectlib)\n  DynamoRIO_add_rel_rpaths(${toolname} drconfiglib)\n  _DR_append_property_list(TARGET ${toolname} COMPILE_DEFINITIONS \"${DEFINES_NO_D}\")\nendif (WIN32)\nif (STATIC_DRSYMS)\n  use_DynamoRIO_extension(${client_target} drsyms_static)\nelse ()\n  # N.B.: static drsyms gives us kernel32 imports from elftoolchain\n  # libc use.  If we end up needing late kernel32 use for early\n  # injection we may want to go back to dynamic drsyms (and delayed\n  # dr_enable_console_printing()).\n  use_DynamoRIO_extension(${client_target} drsyms)\nendif ()\n\nif (WIN32)\n  # We need to link with ntdll.lib and dbghelp.lib which we get from DR\n  if (USER_SPECIFIED_DynamoRIO_DIR)\n    # XXX i#1651: Replace this LOCATION with a generator expression.\n    # This is the only one left.\n    # We may want to drop support for USER_SPECIFIED_DynamoRIO_DIR in any case\n    # which is why no effort was put in to clean this up earlier.\n    cmake_policy(SET CMP0026 OLD)\n    get_target_property(libbase drinjectlib LOCATION)\n    get_filename_component(libpath ${libbase} PATH)\n    set(ntimp_lib \"${libpath}/ntdll_imports.lib\")\n    set(dbghelp_lib \"${libpath}/dbghelp_imports.lib\")\n  else ()\n    # DR now has ntdll_imports as a normal lib target\n    set(ntimp_lib ntdll_imports)\n    # XXX: This relies on knowing where DR puts it.\n    # One option is ExternalProject to install the local DR first: xref i#1061.\n    set(dbghelp_lib \"${PROJECT_BINARY_DIR}/dynamorio/ext/drsyms/dbghelp_imports.lib\")\n    if (\"${CMAKE_GENERATOR}\" MATCHES \"Visual Studio\")\n      # for parallel build correctness we need a target dependence\n      add_dependencies(${client_target} ntdll_imports)\n      if (TOOL_DR_MEMORY)\n        add_dependencies(${toolname} dbghelp_tgt)\n      endif ()\n    endif ()\n  endif ()\n\n  # Front-end uses dbghelp routines not in VS2005 so we link w/ DR's import lib.\n  target_link_libraries(${toolname} ${dbghelp_lib})\n\n  # we have to link with ntdll AFTER any libcmt.lib from configure_DynamoRIO_client\n  # or use_DynamoRIO_extension (w/ static libs)\n  target_link_libraries(${client_target} ${ntimp_lib})\n  # we used to statically link with msvcrt.lib for vc /O2's use of __aulldvrm,\n  # and it didn't add any dynamic dependence on libc, except now that we\n  # use static extension libraries it does add msvcr*.dll imports!\n  # so I removed \"msvcrt\" from target_link_libraries() and so far haven't\n  # hit the __aulldvrm issue.\nendif (WIN32)\n\n# Build Qt Visualizer\nif (TOOL_DR_HEAPSTAT)\n  find_package(Qt5Widgets QUIET)\n  if (NOT Qt5Widgets_FOUND)\n    message(STATUS \"Could NOT find Qt 5: Dr. Heapstat visualizer will not be built\")\n    message(STATUS\n      \"Point CMake variable Qt5Widgets_DIR at the Qt5WidgetsConfig.cmake directory\")\n  else (NOT Qt5Widgets_FOUND)\n    message(STATUS \"Found Qt 5: Dr. Heapstat visualizer will be built\")\n    add_subdirectory(drheapstat/visualizer)\n  endif (NOT Qt5Widgets_FOUND)\nendif (TOOL_DR_HEAPSTAT)\n\n#\n##################################################\n\n# must be AFTER DR local build since affects subdirs\ninclude_directories(common ${tooldir} \"third_party/valgrind\")\n\nif (UNIX)\n  set(DISABLE_OPTS \"-O0\")\nelse (UNIX)\n  set(DISABLE_OPTS \"/Od\")\nendif (UNIX)\nappend_src_compile_flags(common/alloc_unopt.c \"${DISABLE_OPTS}\")\nif (UNIX)\n  # i#1776: avoid an infinite loop in replace_memset.\n  # We have no per-function optimization so we apply to the whole file.\n  append_src_compile_flags(drmemory/replace.c \"${DISABLE_OPTS}\")\nendif ()\n\n# symbol query tool\nset(symquery_srcs tools/symquery.c)\nif (WIN32)\n  set(symquery_srcs ${symquery_srcs} make/resources.rc)\nendif ()\nadd_executable(symquery ${symquery_srcs})\nif (DEFINED DynamoRIO_RPATH)\n  set(old_rpath ${DynamoRIO_RPATH})\nelse ()\n  set(old_rpath OFF)\nendif ()\nset(DynamoRIO_RPATH ON)\nconfigure_DynamoRIO_standalone(symquery)\nuse_DynamoRIO_extension(symquery drsyms_static)\nset(DynamoRIO_RPATH ${old_rpath})\n# drfrontendlib depends on drinjectlib, DR-i#1409 should be the solution\ntarget_link_libraries(symquery drinjectlib drfrontendlib)\nif (WIN32)\n  set_target_properties(symquery PROPERTIES VERSION ${TOOL_VERSION_NUMBER})\n  _DR_append_property_list(TARGET symquery COMPILE_DEFINITIONS\n    # We need full defines to get version values for resources\n    \"${DEFINES_NO_D};RC_IS_SYMQUERY\")\nelse (WIN32)\n  DynamoRIO_add_rel_rpaths(symquery drinjectlib)\nendif (WIN32)\n\n# support running out of build dir\nfile(MAKE_DIRECTORY \"${PROJECT_BINARY_DIR}/logs\")\nfile(MAKE_DIRECTORY \"${PROJECT_BINARY_DIR}/logs/codecache\")\nfile(MAKE_DIRECTORY \"${PROJECT_BINARY_DIR}/logs/dynamorio\")\nfile(WRITE \"${PROJECT_BINARY_DIR}/logs/README\" \"Directory for logs\") # for adb push\ncopy_file_to_device(\"${PROJECT_BINARY_DIR}/logs\")\nif (WIN32)\n  # copy for winsyms and symquery\n  configure_file(\"${DBGHELP_DLL}\"\n    \"${PROJECT_BINARY_DIR}/${BUILD_BIN}/dbghelp.dll\" COPYONLY)\n  # Copy symsrv.dll so we can fetch files from the frontend.\n  configure_file(\"${SYMSRV_DLL}\"\n    \"${PROJECT_BINARY_DIR}/${BUILD_BIN}/symsrv.dll\" COPYONLY)\n  # Create symsrv.yes to avoid the EULA dialog.\n  file(WRITE \"${PROJECT_BINARY_DIR}/${BUILD_BIN}/symsrv.yes\" \"\")\n  if (USER_SPECIFIED_DynamoRIO_DIR)\n    # already built so we can copy at config time\n    configure_file(\"${DynamoRIO_DIR}/../${LIB_ARCH}/drconfiglib.dll\"\n      \"${PROJECT_BINARY_DIR}/${BUILD_BIN}/drconfiglib.dll\" COPYONLY)\n    configure_file(\"${DynamoRIO_DIR}/../${LIB_ARCH}/drinjectlib.dll\"\n      \"${PROJECT_BINARY_DIR}/${BUILD_BIN}/drinjectlib.dll\" COPYONLY)\n    configure_file(\"${DynamoRIO_DIR}/../${BIN_ARCH}/drconfig.exe\"\n      \"${PROJECT_BINARY_DIR}/${BUILD_BIN}/drconfig.exe\" COPYONLY)\n    if (NOT STATIC_DRSYMS AND TOOL_DR_MEMORY)\n      # symquery needs drsyms.dll in same dir\n      configure_file(\"${DynamoRIO_DIR}/../ext/${LIB_ARCH}/${build_type}/drsyms.dll\"\n        \"${PROJECT_BINARY_DIR}/${BUILD_BIN}/drsyms.dll\" COPYONLY)\n    endif (NOT STATIC_DRSYMS AND TOOL_DR_MEMORY)\n    # symquery needs dynamorio.dll in same dir\n    # frontend now imports from DR (i#885)\n    configure_file(\"${DynamoRIO_DIR}/../${LIB_ARCH}/${build_type}/dynamorio.dll\"\n      \"${PROJECT_BINARY_DIR}/${BUILD_BIN}/dynamorio.dll\" COPYONLY)\n  else (USER_SPECIFIED_DynamoRIO_DIR)\n    # XXX: I can't get \"TARGET drconfiglib POST_BUILD\" to work, maybe b/c\n    # the target is in a subdir?\n    set(drconfiglib_copy \"${PROJECT_BINARY_DIR}/${BUILD_BIN}/drconfiglib.dll\")\n    add_custom_target(drconfiglib_copy_tgt ALL DEPENDS \"${drconfiglib_copy}\")\n    add_custom_command(OUTPUT \"${drconfiglib_copy}\" DEPENDS drconfiglib\n      COMMAND ${CMAKE_COMMAND}\n      ARGS -E copy \"${DynamoRIO_DIR}/../${LIB_ARCH}/drconfiglib.dll\"\n      \"${drconfiglib_copy}\" VERBATIM)\n    set(drinjectlib_copy \"${PROJECT_BINARY_DIR}/${BUILD_BIN}/drinjectlib.dll\")\n    add_custom_target(drinjectlib_copy_tgt ALL DEPENDS \"${drinjectlib_copy}\")\n    add_custom_command(OUTPUT \"${drinjectlib_copy}\" DEPENDS drinjectlib\n      COMMAND ${CMAKE_COMMAND}\n      ARGS -E copy \"${DynamoRIO_DIR}/../${LIB_ARCH}/drinjectlib.dll\"\n      \"${drinjectlib_copy}\" VERBATIM)\n    set(drconfigexe_copy \"${PROJECT_BINARY_DIR}/${BUILD_BIN}/drconfig.exe\")\n    add_custom_target(drconfigexe_copy_tgt ALL DEPENDS \"${drconfigexe_copy}\")\n    add_custom_command(OUTPUT \"${drconfigexe_copy}\" DEPENDS drconfig\n      COMMAND ${CMAKE_COMMAND}\n      ARGS -E copy \"${DynamoRIO_DIR}/../${BIN_ARCH}/drconfig.exe\"\n      \"${drconfigexe_copy}\" VERBATIM)\n    if (NOT STATIC_DRSYMS AND TOOL_DR_MEMORY)\n      # symquery needs drsyms.dll in same dir\n      set(drsymsdll_copy \"${PROJECT_BINARY_DIR}/${BUILD_BIN}/drsyms.dll\")\n      add_custom_target(drsymsdll_copy_tgt ALL DEPENDS \"${drsymsdll_copy}\")\n      add_custom_command(OUTPUT \"${drsymsdll_copy}\" DEPENDS drsyms\n        COMMAND ${CMAKE_COMMAND}\n        ARGS -E copy \"${DynamoRIO_DIR}/../ext/${LIB_ARCH}/${build_type}/drsyms.dll\"\n      \"${drsymsdll_copy}\" VERBATIM)\n    endif (NOT STATIC_DRSYMS AND TOOL_DR_MEMORY)\n    # symquery needs dynamorio.dll in same dir\n    # frontend now imports from DR (i#885)\n    set(drdll_copy \"${PROJECT_BINARY_DIR}/${BUILD_BIN}/dynamorio.dll\")\n    add_custom_target(drdll_copy_tgt ALL DEPENDS \"${drdll_copy}\")\n    add_custom_command(OUTPUT \"${drdll_copy}\" DEPENDS dynamorio\n      COMMAND ${CMAKE_COMMAND}\n      ARGS -E copy \"${DynamoRIO_DIR}/../${LIB_ARCH}/${build_type}/dynamorio.dll\"\n      \"${drdll_copy}\" VERBATIM)\n  endif (USER_SPECIFIED_DynamoRIO_DIR)\n  # above copy is for winsyms and symquery, this is for drmemorylib\n  configure_file(\"${DBGHELP_DLL}\"\n    \"${PROJECT_BINARY_DIR}/${BUILD_LIB}/dbghelp.dll\" COPYONLY)\n  # We don't need to copy symsrv.dll because only the frontend uses it.\nelse (WIN32)\n  if (USER_SPECIFIED_DynamoRIO_DIR)\n    # already built so we can copy at config time\n    configure_file(\"${DynamoRIO_DIR}/../${BIN_ARCH}/drconfig\"\n      \"${PROJECT_BINARY_DIR}/${BUILD_BIN}/drconfig\" COPYONLY)\n  else (USER_SPECIFIED_DynamoRIO_DIR)\n    set(drconfig_copy \"${PROJECT_BINARY_DIR}/${BUILD_BIN}/drconfig\")\n    add_custom_target(drconfig_copy_tgt ALL DEPENDS \"${drconfig_copy}\")\n    add_custom_command(OUTPUT \"${drconfig_copy}\"\n      DEPENDS drconfig\n      COMMAND ${CMAKE_COMMAND}\n      ARGS -E copy \"${DynamoRIO_DIR}/../${BIN_ARCH}/drconfig\"\n      \"${drconfig_copy}\" VERBATIM)\n  endif (USER_SPECIFIED_DynamoRIO_DIR)\n  if (TOOL_DR_MEMORY)\n    configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/tools/valgrind2drmemory.pl\"\n      \"${PROJECT_BINARY_DIR}/${BUILD_BIN}/valgrind2drmemory.pl\" COPYONLY)\n  endif (TOOL_DR_MEMORY)\nendif (WIN32)\nset(script_aux \"\")\nif (TOOL_DR_HEAPSTAT)\n  # we need a copy of Dr. Memory's postprocess for leaks (PR 536878)\n  configure_file(\"${CMAKE_CURRENT_SOURCE_DIR}/drmemory/postprocess.pl\"\n    \"${PROJECT_BINARY_DIR}/${BUILD_BIN}/postleaks.pl\" COPYONLY)\n  set(script_aux ${script_aux} \"${PROJECT_BINARY_DIR}/${BUILD_BIN}/postleaks.pl\")\nendif (TOOL_DR_HEAPSTAT)\n\n# Dr. Memory and Dr. Heapstat use Dr. Memory's default suppressions\nset(defsupp_out \"${PROJECT_BINARY_DIR}/${BUILD_BIN}/suppress-default.txt\")\nif (WIN32)\n  set(defsupp_in \"${CMAKE_CURRENT_SOURCE_DIR}/drmemory/suppress-default.win.txt\")\n  configure_file(\"${defsupp_in}\" \"${defsupp_out}\" COPYONLY)\nelse (WIN32)\n  if (APPLE)\n    set(defsupp_in \"${CMAKE_CURRENT_SOURCE_DIR}/drmemory/suppress-default.mac.txt\")\n  else (APPLE)\n    set(defsupp_in \"${CMAKE_CURRENT_SOURCE_DIR}/drmemory/suppress-default.lin.txt\")\n  endif (APPLE)\n  file(READ \"${defsupp_in}\" txt)\n  file(WRITE \"${defsupp_out}\" \"${txt}\")\nendif (WIN32)\ncopy_file_to_device(\"${defsupp_out}\")\n\n###########################################################################\n# Dr. Memory Framework (DRMF) setup needed for tests\n\nset(DRMF_BASEDIR \"drmf\")\nset(DRMF_BINBASE \"${LIB_ARCH}/${build_type}\")\nset(DRMF_INSTALL \"${INSTALL_PREFIX}${DRMF_BASEDIR}\")\nset(DRMF_INSTALL_BIN \"${DRMF_INSTALL}/${DRMF_BINBASE}\")\nset(DRMF_INSTALL_INC \"${DRMF_INSTALL}/include\")\nset(framework_dir \"${PROJECT_BINARY_DIR}/${DRMF_BASEDIR}\")\nset(framework_incdir \"${framework_dir}/include\")\nset(framework_bindir \"${framework_dir}/${DRMF_BINBASE}\")\n\n# Versioning: we use separate versioning for DRMF from the tool versioning.\n# This is major*100 + minor.\nset(DRMF_VERSION_DEFAULT \"1.0.${VERSION_NUMBER_PATCHLEVEL}\")\nset(DRMF_VERSION \"\" CACHE STRING \"DRMF version number: leave empty for default\")\nif (\"${DRMF_VERSION}\" STREQUAL \"\")\n  set(DRMF_VERSION ${DRMF_VERSION_DEFAULT})\nendif()\nmessage(STATUS \"DRMF version number: ${DRMF_VERSION}\")\nstring(REGEX REPLACE \"^([0-9]+)\\\\..*\" \"\\\\1\" DRMF_VERSION_MAJOR \"${DRMF_VERSION}\")\nstring(REGEX REPLACE \"^[0-9]+\\\\.([0-9]+)\\\\..*\" \"\\\\1\" DRMF_VERSION_MINOR \"${DRMF_VERSION}\")\n# We use just major.minor for .so versioning (and no, SOVERSION is not sufficient\n# here: we have to set VERSION to control the file name and import dependence).\nstring(REGEX REPLACE \"^([0-9]+\\\\.[0-9]+)\\\\..*\" \"\\\\1\"\n  DRMF_VERSION_MAJOR_MINOR \"${DRMF_VERSION}\")\nmath(EXPR DRMF_VERSION_INTEGER \"${DRMF_VERSION_MAJOR}*100 + ${DRMF_VERSION_MINOR}\")\nset(DRMF_VERSION_COMPAT 9)                # Oldest compatible version\nset(DRMF_VERSION_CUR ${DRMF_VERSION_INTEGER}) # Current version\n\nconfigure_file(framework/public.h\n  ${framework_incdir}/drmemory_framework.h)\n# TODO DRi#1672: Port DR's annotation infrastructure to AArchXX.\nif (X86)\n  configure_file(drmemory/annotations_public.h\n    ${framework_incdir}/drmemory_annotations.h)\n  configure_file(${DynamoRIO_DIR}/../include/annotations/dr_annotations_asm.h\n    ${framework_incdir}/dr_annotations_asm.h)\n  configure_file(${DynamoRIO_DIR}/../include/annotations/dr_annotations.h\n    ${framework_incdir}/dr_annotations.h)\nendif ()\ninclude_directories(${framework_incdir})\n\nif (NOT X86)\n  # TODO DRi#1672: Port DR's annotation infrastructure to AArchXX.\n  set(DR_ANNOTATIONS_SUPPORTED OFF)\nelse ()\n  # Annotation support using DR's infrastructure (non-Valgrind-style).\n  if (UNIX)\n    set(annot_cflags \"-O0 -Wno-unused-variable -Wno-return-type\")\n  else ()\n    set(annot_cflags \"/Od /Ob0 /GL- /wd4715\")\n  endif ()\n  if (UNIX)\n    # DRi#1799: clang prior to 9.0 does not support \"asm goto\" which is used by\n    # the DR annotation infrastructure.  But, we can't just do a version check\n    # because Apple's clang has a completely separate version number.\n    try_compile(DR_ANNOTATIONS_SUPPORTED ${PROJECT_BINARY_DIR}/try_annot\n      SOURCES ${PROJECT_SOURCE_DIR}/tests/memlayout.cpp\n      ${PROJECT_SOURCE_DIR}/drmemory/annotations_public.c CMAKE_FLAGS\n      -DINCLUDE_DIRECTORIES=${framework_incdir}\n      -DCMAKE_C_FLAGS:STRING=\"${annot_cflags}\"\n      OUTPUT_VARIABLE try_output)\n    if (DR_ANNOTATIONS_SUPPORTED)\n      message(STATUS \"DR annotations are supported\")\n    else ()\n      message(STATUS \"DR annotations are NOT supported: probably this is clang<9.0: |${try_output}|\")\n    endif ()\n  else ()\n    set(DR_ANNOTATIONS_SUPPORTED ON)\n  endif ()\nendif ()\n\n###########################################################################\n# Tests\n\n# We need to add_subdirectory after we know where ntdll_imports.lib is.\n# That means we've messed with global things like include dirs already,\n# for configure_DynamoRIO_client(), but having the extension include\n# dirs in there should be harmless to the tests.\nif (BUILD_TOOL_TESTS)\n  enable_testing()\n  add_subdirectory(tests)\nendif (BUILD_TOOL_TESTS)\n\n###########################################################################\n# Create tool config files for running with \"drrun -t\"\n\nset(DRRUN_DIR \"${PROJECT_BINARY_DIR}/drrun\")\nfile(MAKE_DIRECTORY \"${DRRUN_DIR}\")\n\nif (X64)\n  set(BIT_SFX \"64\")\nelse ()\n  set(BIT_SFX \"32\")\nendif ()\nset(DRRUN_SFX \".drrun${BIT_SFX}\")\nif (BUILDING_SUB_PACKAGE)\n  set(DRRUN_INSTALL \"tools/\")\nelse ()\n  set(DRRUN_INSTALL \"${DR_install_dir}/tools/\")\nendif ()\n\nfunction (create_drrun_file frontend file_out name) # option list follows name\n  if (ANDROID AND TOOL_DR_MEMORY)\n    set(frontend_name ${toolname}) # point at script, not launcher\n  endif ()\n  if (BUILDING_SUB_PACKAGE)\n    set(DRRUN_TOP \"FRONTEND_REL=${INSTALL_PREFIX}/${BUILD_BIN}\")\n  else ()\n    set(DRRUN_TOP \"FRONTEND_REL=../${BUILD_BIN}\")\n  endif ()\n  set(DRRUN_FILE \"${DRRUN_DIR}/${name}${DRRUN_SFX}\")\n  set(DRRUN_CONTENTS \"# Dr. Memory tool config file\\n\")\n  if (ANDROID AND TOOL_DR_MEMORY)\n    # Point at script, not launcher.\n    set(DRRUN_CONTENTS \"${DRRUN_CONTENTS}${DRRUN_TOP}/${frontend}>\\n\")\n  else ()\n    set(DRRUN_CONTENTS \"${DRRUN_CONTENTS}${DRRUN_TOP}/$<TARGET_FILE_NAME:${frontend}>\\n\")\n  endif ()\n  set(DRRUN_CONTENTS \"${DRRUN_CONTENTS}TOOL_OP=-dr\\n\")\n  set(DRRUN_CONTENTS \"${DRRUN_CONTENTS}TOOL_OP_DR_PATH\\n\")\n  set(DRRUN_CONTENTS \"${DRRUN_CONTENTS}TOOL_OP_DR_BUNDLE=-dr_ops\\n\")\n  foreach (op ${ARGN})\n    set(DRRUN_CONTENTS \"${DRRUN_CONTENTS}TOOL_OP=${op}\\n\")\n  endforeach ()\n  file(GENERATE OUTPUT ${DRRUN_FILE} CONTENT \"${DRRUN_CONTENTS}\")\n  install(FILES \"${DRRUN_FILE}\" DESTINATION \"${DRRUN_INSTALL}/\")\n  set(${file_out} ${DRRUN_FILE} PARENT_SCOPE)\n\n  # DRi#1509: generate a list of tools for drrun usage messages\n  if (NOT DEBUG_BUILD) # avoid dups\n    install(CODE \"file(APPEND \\\"\\${CMAKE_INSTALL_PREFIX}/tools/list${BIT_SFX}\\\" \\\"${name}\\\\n\\\")\")\n  endif ()\nendfunction (create_drrun_file)\n\ncreate_drrun_file(${toolname} unused \"drmemory\")\nif (NOT X64)\n  create_drrun_file(${toolname} unused \"drmemory_light\" \"-light\")\nendif ()\nif (WIN32)\n  create_drrun_file(${toolname} unused \"handle_leaks\" \"-handle_leaks_only\")\nendif ()\n\n###########################################################################\n# Dr. Memory Framework (DRMF)\n\n# We decided against putting the extension inside frameworks/, so\n# framework-shared code goes here.  Things that should be global we\n# put into functions for invocation inside extension subdirs.\n\nconfigure_file(framework/drmf.cmake.in\n  ${framework_dir}/DrMemoryFrameworkConfig.cmake\n  @ONLY)\nforeach (ext drsyscall umbra drfuzz)\n  file(APPEND ${framework_dir}/DrMemoryFrameworkConfig.cmake \"\nset(DynamoRIO_EXT_${ext}_INC \\${drmf_cwd}/include)\n\")\nendforeach (ext)\nconfigure_file(framework/drmf_version.cmake.in\n  ${framework_dir}/DrMemoryFrameworkConfigVersion.cmake\n  @ONLY)\n\n# Export extensions for importing by clients.\nif (X64)\n  set(exported_targets_name \"DRMFTarget64\")\nelse (X64)\n  set(exported_targets_name \"DRMFTarget32\")\nendif (X64)\n\n# DRi#948: we need to map Release and RelMinSize to RelWithDebInfo\nfile(WRITE ${framework_dir}/${exported_targets_name}.cmake \"\")\nset(exported_targets_append \"\")\nmacro(export_target)\n  if (\"${CMAKE_VERSION}\" VERSION_EQUAL \"3.0\" OR\n      \"${CMAKE_VERSION}\" VERSION_GREATER \"3.0\")\n    set(tgt_args \"\")\n  else ()\n    # We use a prefix primarily to make it easy to test the imported targets,\n    # and to give a better \"bundled extensions\" feel.\n    set(tgt_args NAMESPACE drmf_)\n  endif ()\n  export(TARGETS ${ARGV} ${tgt_args} FILE ${framework_dir}/${exported_targets_name}.cmake\n    APPEND)\n  set(toadd \"\nSET_PROPERTY(TARGET ${ARGV0} PROPERTY MAP_IMPORTED_CONFIG_RELEASE RelWithDebInfo)\nSET_PROPERTY(TARGET ${ARGV0} PROPERTY MAP_IMPORTED_CONFIG_RELMINSIZE RelWithDebInfo)\n\")\n  if (NOT DEBUG_BUILD)\n    file(APPEND ${framework_dir}/${exported_targets_name}.cmake ${toadd})\n  endif (NOT DEBUG_BUILD)\n  # For install we want both debug and release:\n  set(exported_targets_append \"${exported_targets_append}${toadd}\")\n  # Hack to avoid \"no parent scope\" complaint.\n  if (NOT \"${ARGV}\" MATCHES \"drmemory_annotations\")\n    set(exported_targets_append \"${exported_targets_append}\" PARENT_SCOPE)\n  endif ()\nendmacro(export_target)\n\nif (DR_ANNOTATIONS_SUPPORTED)\n  add_library(drmemory_annotations STATIC drmemory/annotations_public.c)\n  # TODO i#2266: Provide a CMake function like use_DynamoRIO_annotations.\n  # We would both use it here and export it.\n  # For now we make a library, which is actually a little easier than the\n  # user having to compile our source file with special flags.\n  # So the CMake function would just set up the include path and link to the lib.\n  _DR_append_property_string(SOURCE drmemory/annotations_public.c\n    COMPILE_FLAGS \"${annot_cflags}\")\n  export_target(drmemory_annotations)\n  install(TARGETS drmemory_annotations EXPORT ${exported_targets_name}\n    DESTINATION ${DRMF_INSTALL_BIN})\nendif ()\n\n# Included prior to add_subdirectory() for building version.c which\n# includes utils.h which includes drsyscall.h.\ninclude_directories(drsyscall)\n\nadd_subdirectory(drsyscall)\n\n# XXX: change this and include_directories above to\n# find_package() + use_DynamoRIO_extension(drsyscall)\ntarget_link_libraries(${client_target} drsyscall_int)\n\nadd_subdirectory(drsymcache)\ninclude_directories(drsymcache)\ntarget_link_libraries(${client_target} drsymcache_int)\n\n# Add Umbra\nadd_subdirectory(umbra)\n\n# XXX: change this to find_package() + use_DynamoRIO_extension(umbra)\ninclude_directories(umbra)\ntarget_link_libraries(${client_target} umbra_int)\n\n# Add drfuzz\nadd_subdirectory(drfuzz)\n\n# XXX: change this to find_package() + use_DynamoRIO_extension(drfuzz)\ninclude_directories(drfuzz)\nif (TOOL_DR_MEMORY)\n  target_link_libraries(${client_target} drfuzz_int)\nendif (TOOL_DR_MEMORY)\n\nif (BUILD_TOOL_TESTS)\n  add_subdirectory(tests/framework)\n\n  # Test using our exported config.\n  if (DEBUG)\n    set(debug_cfg -DCMAKE_BUILD_TYPE=Debug)\n  else ()\n    set(debug_cfg -DCMAKE_BUILD_TYPE=RelWithDebInfo)\n  endif ()\n  set(drmf_bindir \"${PROJECT_BINARY_DIR}/framework/samples\")\n  file(COPY \"${PROJECT_SOURCE_DIR}/framework/samples/strace.c\"\n    DESTINATION \"${drmf_bindir}\")\n  add_test(drmf_proj ${CMAKE_CTEST_COMMAND}\n    --build-and-test \"${drmf_bindir}\"\n    \"${PROJECT_BINARY_DIR}/tests/drmf_proj\"\n    --build-generator ${CMAKE_GENERATOR}\n    --build-project DRMF_samples # Needed for VS generators.\n    --build-makeprogram ${CMAKE_MAKE_PROGRAM}\n    --build-options ${debug_cfg} -DDrMemoryFramework_DIR:PATH=${framework_dir}\n    -DDynamoRIO_DIR:PATH=${DynamoRIO_DIR})\n  if (UNIX AND X86 AND NOT X64)\n    set_tests_properties(drmf_proj PROPERTIES ENVIRONMENT\n      \"CFLAGS=-m32;CXXFLAGS=-m32\")\n  endif ()\n\n  if (TOOL_DR_MEMORY)\n    # unit tests\n    add_executable(unit_tests ${srcs})\n    _DR_append_property_list(TARGET unit_tests COMPILE_DEFINITIONS\n      \"${DEFINES_NO_D};BUILD_UNIT_TESTS;RC_IS_UNITTESTS\")\n    if (WIN32)\n      # i#1805: avoid strtol dup symbol errors (libucrtd vs ntdll_imports).\n      append_property_string(TARGET unit_tests LINK_FLAGS \"/force:multiple\")\n    endif ()\n    if (\"${CMAKE_GENERATOR}\" MATCHES \"Visual Studio\")\n      # ensure race-free parallel builds\n      add_dependencies(unit_tests ${asm_utils_tgt})\n    endif (\"${CMAKE_GENERATOR}\" MATCHES \"Visual Studio\")\n    if (DEFINED DynamoRIO_RPATH)\n      set(old_rpath ${DynamoRIO_RPATH})\n    else ()\n      set(old_rpath OFF)\n    endif ()\n    set(DynamoRIO_RPATH ON)\n    configure_DynamoRIO_standalone(unit_tests)\n    use_DynamoRIO_extension(unit_tests drmgr_static)\n    use_DynamoRIO_extension(unit_tests drcontainers)\n    use_DynamoRIO_extension(unit_tests drmgr_static)\n    use_DynamoRIO_extension(unit_tests drx_static)\n    use_DynamoRIO_extension(unit_tests drutil_static)\n    use_DynamoRIO_extension(unit_tests drwrap_static)\n    use_DynamoRIO_extension(unit_tests drsyms_static)\n    if (HAVE_LIBUNWIND_H)\n      use_DynamoRIO_extension(unit_tests drcallstack_static)\n    endif ()\n    use_DynamoRIO_extension(unit_tests drcovlib_static)\n    target_link_libraries(unit_tests drsyscall_int)\n    target_link_libraries(unit_tests umbra_int)\n    target_link_libraries(unit_tests drsymcache_int)\n    target_link_libraries(unit_tests drfuzz_int)\n    set(DynamoRIO_RPATH ${old_rpath})\n    get_target_path_for_execution(unit_relpath unit_tests)\n    prefix_cmd_if_necessary(unit_relpath OFF ${unit_relpath})\n    if (NOT ANDROID) # FIXME i#: not working on Android\n      add_test(unit_tests ${unit_relpath})\n    endif ()\n    copy_target_to_device(unit_tests)\n  endif (TOOL_DR_MEMORY)\n\nendif (BUILD_TOOL_TESTS)\n\n# XXX i#1497, i#1498: the drstrace front-end now uses drfrontendlib\n# but there's a bunch of work getting the client to be cross-platform.\nif (TOOL_DR_MEMORY AND WIN32)\n  # We only build for Dr. Memory b/c we'd need extra work to deal w/\n  # drheapstat's bin/bin32 different subdir.\n  add_subdirectory(drstrace)\nendif (TOOL_DR_MEMORY AND WIN32)\n\n# FIXME i#1987: enable support of drltrace under MacOS\nif (NOT APPLE)\n  add_subdirectory(drltrace)\nendif()\n\nadd_subdirectory(framework/samples)\n\n###########################################################################\n# installation\n\nif (install_override)\n  if (X64)\n    set(EXP_DIR exports64)\n  else (X64)\n    set(EXP_DIR exports32)\n  endif (X64)\n  set(CMAKE_INSTALL_PREFIX \"${PROJECT_BINARY_DIR}/../${EXP_DIR}\"\n    CACHE PATH \"install path\" FORCE)\nendif (install_override)\n\ninstall(TARGETS ${client_target}\n  RUNTIME DESTINATION \"${INSTALL_LIB}\" # dll\n  LIBRARY DESTINATION \"${INSTALL_LIB}\" # .so\n  PERMISSIONS ${owner_access} OWNER_EXECUTE GROUP_READ GROUP_EXECUTE\n  WORLD_READ WORLD_EXECUTE)\ninstall(TARGETS symquery DESTINATION \"${INSTALL_BIN}\"\n  PERMISSIONS ${owner_access} OWNER_EXECUTE GROUP_READ GROUP_EXECUTE\n  WORLD_READ WORLD_EXECUTE)\nif (WIN32)\n  # XXX i#926: remove winsyms once we remove postleaks.pl.\n  # Also removed its pdb below via: PATTERN \"winsyms.pdb\" EXCLUDE\n  install(TARGETS winsyms DESTINATION \"${INSTALL_BIN}\"\n    PERMISSIONS ${owner_access} OWNER_EXECUTE GROUP_READ GROUP_EXECUTE\n    WORLD_READ WORLD_EXECUTE)\n  install(FILES\n    ${PROJECT_BINARY_DIR}/${BUILD_BIN}/dbghelp.dll\n    ${PROJECT_BINARY_DIR}/${BUILD_BIN}/symsrv.dll\n    DESTINATION \"${INSTALL_BIN}\"\n    PERMISSIONS ${owner_access} OWNER_EXECUTE GROUP_READ GROUP_EXECUTE\n    WORLD_READ WORLD_EXECUTE)\n  install(FILES\n    ${PROJECT_BINARY_DIR}/${BUILD_BIN}/symsrv.yes\n    DESTINATION \"${INSTALL_BIN}\")\n  install(FILES\n    ${PROJECT_BINARY_DIR}/${BUILD_BIN}/dbghelp.dll\n    DESTINATION \"${INSTALL_LIB}\"\n    PERMISSIONS ${owner_access} OWNER_EXECUTE GROUP_READ GROUP_EXECUTE\n    WORLD_READ WORLD_EXECUTE)\n  install(FILES\n    ${PROJECT_BINARY_DIR}/${BUILD_BIN}/drconfiglib.dll\n    ${PROJECT_BINARY_DIR}/${BUILD_BIN}/drinjectlib.dll\n    # frontend now imports from DR (i#885)\n    ${PROJECT_BINARY_DIR}/${BUILD_BIN}/dynamorio.dll\n    ${PROJECT_BINARY_DIR}/${BUILD_BIN}/drconfig.exe\n    DESTINATION \"${INSTALL_BIN}\"\n    PERMISSIONS ${owner_access} OWNER_EXECUTE GROUP_READ GROUP_EXECUTE\n    WORLD_READ WORLD_EXECUTE)\n  # We want carriage returns for nice viewing in Notepad, etc.:\n  file(READ ${CMAKE_CURRENT_SOURCE_DIR}/README readme_content)\n  string(REPLACE \"\\n\" \"\\r\\n\" readme_content ${readme_content})\n  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/README.txt ${readme_content})\n   install(FILES\n    ${CMAKE_CURRENT_BINARY_DIR}/README.txt\n    DESTINATION \"${INSTALL_PREFIX}.\")\nelse (WIN32)\n  install(FILES\n    ${CMAKE_CURRENT_SOURCE_DIR}/README\n    DESTINATION \"${INSTALL_PREFIX}.\")\nendif (WIN32)\ninstall(FILES\n  ${CMAKE_CURRENT_SOURCE_DIR}/license.txt\n  DESTINATION \"${INSTALL_PREFIX}.\")\ninstall(TARGETS ${toolname} DESTINATION \"${INSTALL_BIN}\"\n  PERMISSIONS ${owner_access} OWNER_EXECUTE GROUP_READ GROUP_EXECUTE\n  WORLD_READ WORLD_EXECUTE)\n# We put \"helper\" files inside ${BIN_ARCH}/ so only top-level script is visible\nif (NOT \"${script_aux}\" STREQUAL \"\")\n  install(FILES\n    ${script_aux}\n    DESTINATION \"${INSTALL_BIN}\"\n    PERMISSIONS ${owner_access} OWNER_EXECUTE GROUP_READ GROUP_EXECUTE\n    WORLD_READ WORLD_EXECUTE)\nendif ()\nif (ANDROID AND TOOL_DR_MEMORY)\n  install(FILES\n    \"${PROJECT_BINARY_DIR}/${BUILD_BIN}/${toolname}\"\n    DESTINATION \"${INSTALL_BIN}\"\n    PERMISSIONS ${owner_access} OWNER_EXECUTE GROUP_READ GROUP_EXECUTE\n    WORLD_READ WORLD_EXECUTE)\nendif ()\n\nif (TOOL_DR_MEMORY)\n  install(FILES\n    ${PROJECT_BINARY_DIR}/${BUILD_BIN}/suppress-default.txt\n    DESTINATION \"${INSTALL_BIN}\"\n    PERMISSIONS ${owner_access} GROUP_READ WORLD_READ)\n  if (UNIX)\n    install(FILES\n      ${PROJECT_BINARY_DIR}/${BUILD_BIN}/valgrind2drmemory.pl\n      DESTINATION \"${INSTALL_PREFIX}bin\"\n      PERMISSIONS ${owner_access} OWNER_EXECUTE GROUP_READ GROUP_EXECUTE\n      WORLD_READ WORLD_EXECUTE)\n  endif (UNIX)\nendif (TOOL_DR_MEMORY)\n\nset(install_pdb_exclude\n  # We don't want unit test pdb's, or internal tool pdb's.\n  # XXX: it would be better to exclude these in the subdirs that own them,\n  # which will be much easier once cmake supports auto-installing pdb's.\n  PATTERN verinfo.pdb EXCLUDE\n  PATTERN unit_tests.pdb EXCLUDE\n  # symfetch is a fake dll so don't imply it's more by supplying a pdb.\n  PATTERN symfetch.pdb EXCLUDE\n  PATTERN drstrace_unit_tests.pdb EXCLUDE)\nif (X64)\n  install(CODE \"file(WRITE \\\"\\${CMAKE_INSTALL_PREFIX}/${INSTALL_BIN}/README.txt\\\" \\\"Dr. Memory has preliminary 64-bit support that does not yet include detecting uninitialized reads.  The drstrace tool and the Dr. Syscall and Umbra libraries are fully supported for 64-bit.\\n\\\")\")\nendif (X64)\ninstall(DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/\n  DESTINATION \"${INSTALL_LIB}\"\n  FILE_PERMISSIONS ${owner_access} OWNER_EXECUTE GROUP_READ GROUP_EXECUTE\n  WORLD_READ WORLD_EXECUTE\n  FILES_MATCHING\n  PATTERN \"*.debug\"\n  PATTERN \"*.pdb\"\n  REGEX \".*.dSYM/.*DWARF/.*\" # too painful to get right # of backslash for literal .\n  ${install_pdb_exclude}\n  )\n\ninstall(DIRECTORY ${PROJECT_BINARY_DIR}/${BUILD_BIN}/\n  DESTINATION \"${INSTALL_BIN}\"\n  FILE_PERMISSIONS ${owner_access} OWNER_EXECUTE\n  GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE\n  FILES_MATCHING\n  PATTERN \"*.debug\"\n  PATTERN \"*.pdb\"\n  REGEX \".*.dSYM/.*DWARF/.*\" # too painful to get right # of backslash for literal .\n  ${install_pdb_exclude}\n  )\n\n# create empty logs dir for release package\n# be sure to escape \",$ since evaluated at install time not configure time\ninstall(CODE \"file(MAKE_DIRECTORY \\\"\\${CMAKE_INSTALL_PREFIX}/${INSTALL_PREFIX}${toolname}/logs\\\")\")\n# CPack seems to ignore empty dirs so add a README file\ninstall(CODE \"file(WRITE \\\"\\${CMAKE_INSTALL_PREFIX}/${INSTALL_PREFIX}${toolname}/logs/README.txt\\\" \\\"Default destination for log files.\\n\\\")\")\n# ditto for pcaches\ninstall(CODE \"file(MAKE_DIRECTORY \\\"\\${CMAKE_INSTALL_PREFIX}/${INSTALL_PREFIX}${toolname}/logs/codecache\\\")\")\ninstall(CODE \"file(WRITE \\\"\\${CMAKE_INSTALL_PREFIX}/${INSTALL_PREFIX}${toolname}/logs/codecache/README.txt\\\" \\\"Default destination for code cache files.\\n\\\")\")\n# ditto for DR logdir\ninstall(CODE \"file(MAKE_DIRECTORY \\\"\\${CMAKE_INSTALL_PREFIX}/${INSTALL_PREFIX}${toolname}/logs/dynamorio\\\")\")\ninstall(CODE \"file(WRITE \\\"\\${CMAKE_INSTALL_PREFIX}/${INSTALL_PREFIX}${toolname}/logs/codecache/README.txt\\\" \\\"Default destination for DynamoRIO log files (for diagnostics only).\\n\\\")\")\n\nif (UNIX)\n  if (APPLE)\n    set(LIB_SFX \".dylib\")\n  else (APPLE)\n    set(LIB_SFX \".so\")\n  endif (APPLE)\nendif (UNIX)\n\nif (BUILDING_SUB_PACKAGE)\n  # We're being included in another package (DR's).\n  # Our rpaths assumed we had a dynamorio/ subdir, but now that's the upper dir.\n  # Easier to add a symlink than to change rpaths.\n  # XXX i#1855: this symlink makes \"adb push\" of our tarball's contents not work,\n  # but presumably most users will untar on the Android device.\n  # Fixing would require changing the script and the frontend binary.\n  install(CODE \"execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink .. dynamorio WORKING_DIRECTORY \\${CMAKE_INSTALL_PREFIX}/${INSTALL_PREFIX})\")\n\n  # Add a docs link in the top-level docs/ dir\n  install(CODE \"file(WRITE \\\"\\${CMAKE_INSTALL_PREFIX}/docs/DrMemory.html\\\" \\\"<html>\\n<head>\\n<meta http-equiv=\\\\\\\"refresh\\\\\\\" content=\\\\\\\"0; URL=../drmemory/drmemory/docs/html/index.html\\\\\\\">\\n</head><body></body>\\\")\")\n\nelse (BUILDING_SUB_PACKAGE)\n  # Include DR so user doesn't have to download separately (PR 457417).\n  # We don't need docs/ or include/.\n  install(CODE \"file(MAKE_DIRECTORY \\\"\\${CMAKE_INSTALL_PREFIX}/${DR_install_dir}\\\")\")\n\n  if (UNIX)\n    # CPACK_INSTALLED_DIRECTORIES since 2.8.3 now properly preserves symlinks\n    # (http://www.itk.org/Bug/view.php?id=10096) so we can just copy the dir.\n    install(DIRECTORY ${DynamoRIO_DIR}/../${LIB_ARCH}/${build_type}\n      DESTINATION ${INSTALL_PREFIX}${DR_install_dir}/${LIB_ARCH}\n      FILE_PERMISSIONS ${owner_access} OWNER_EXECUTE GROUP_READ GROUP_EXECUTE\n      WORLD_READ WORLD_EXECUTE\n      PATTERN \"libdrdecode*\" EXCLUDE\n      # Static DR is large and we do not need it.\n      PATTERN \"libdynamorio_static*\" EXCLUDE)\n    # ext dir is currently empty but we need it to avoid drrun error (i#427)\n    install(CODE \"file(MAKE_DIRECTORY \\\"\\${CMAKE_INSTALL_PREFIX}/${DR_install_dir}/ext/${LIB_ARCH}/${build_type}\\\")\")\n    # CPack seems to ignore empty dirs so add a README file\n    install(CODE \"file(WRITE \\\"\\${CMAKE_INSTALL_PREFIX}/${DR_install_dir}/ext/${LIB_ARCH}/${build_type}/README.txt\\\" \\\"Currently empty.\\n\\\")\")\n  endif (UNIX)\n\n  # can't find way to package external individual files (can do whole dir)\n  # and we don't need entire DR docs/, include/, etc. so we do these\n  # files individually\n  if (EXISTS \"${DynamoRIO_SOURCE_DIR}/License.txt\")\n    set(DR_LICENSE_DIR \"${DynamoRIO_SOURCE_DIR}\")\n  else ()\n    set(DR_LICENSE_DIR \"${DynamoRIO_DIR}/..\")\n  endif ()\n  install(CODE \"configure_file(\\\"${DR_LICENSE_DIR}/License.txt\\\" \\\"\\${CMAKE_INSTALL_PREFIX}/${DR_install_dir}/License.txt\\\" COPYONLY)\")\n  install(CODE \"configure_file(\\\"${DR_LICENSE_DIR}/ACKNOWLEDGEMENTS\\\" \\\"\\${CMAKE_INSTALL_PREFIX}/${DR_install_dir}/ACKNOWLEDGEMENTS\\\" COPYONLY)\")\n  # rather whan whole README, which talks about running samples, etc.:\n  install(CODE \"file(WRITE \\\"\\${CMAKE_INSTALL_PREFIX}/${DR_install_dir}/README.txt\\\" \\\"This is a copy of the parts of DynamoRIO needed to run ${toolname_cap_spc}.  See http://dynamorio.org for more information.\\n\\\")\")\n  # on Windows we don't need all the ${BIN_ARCH}/ tools, and they take up space\n  install(CODE \"file(MAKE_DIRECTORY \\\"\\${CMAKE_INSTALL_PREFIX}/${DR_install_dir}/${BIN_ARCH}\\\")\")\n  if (UNIX)\n    if (USER_SPECIFIED_DynamoRIO_DIR) # else DR installs straight there (i#1449)\n      install(CODE \"configure_file(\\\"${DynamoRIO_DIR}/../${BIN_ARCH}/drrun\\\" \\\"\\${CMAKE_INSTALL_PREFIX}/${DR_install_dir}/${BIN_ARCH}/drrun\\\" COPYONLY)\")\n    endif ()\n    if (NOT APPLE) # FIXME DRi#1286: no nudge support yet on MacOS\n      install(CODE \"configure_file(\\\"${DynamoRIO_DIR}/../${BIN_ARCH}/nudgeunix\\\" \\\"\\${CMAKE_INSTALL_PREFIX}/${DR_install_dir}/${BIN_ARCH}/nudgeunix\\\" COPYONLY)\")\n    endif (NOT APPLE)\n    # drconfiglib and drinjectlib are now static libs so no need to install\n  else (UNIX)\n    if (TOOL_DR_HEAPSTAT)\n      install(CODE \"configure_file(\\\"${DynamoRIO_DIR}/../${BIN_ARCH}/drconfig.exe\\\" \\\"\\${CMAKE_INSTALL_PREFIX}/${DR_install_dir}/${BIN_ARCH}/drconfig.exe\\\" COPYONLY)\")\n      install(CODE \"configure_file(\\\"${DynamoRIO_DIR}/../${BIN_ARCH}/drinject.exe\\\" \\\"\\${CMAKE_INSTALL_PREFIX}/${DR_install_dir}/${BIN_ARCH}/drinject.exe\\\" COPYONLY)\")\n      install(CODE \"configure_file(\\\"${DynamoRIO_DIR}/../${BIN_ARCH}/drrun.exe\\\" \\\"\\${CMAKE_INSTALL_PREFIX}/${DR_install_dir}/${BIN_ARCH}/drrun.exe\\\" COPYONLY)\")\n    endif ()\n    install(CODE \"configure_file(\\\"${DynamoRIO_DIR}/../${BIN_ARCH}/drconfiglib.dll\\\" \\\"\\${CMAKE_INSTALL_PREFIX}/${DR_install_dir}/${BIN_ARCH}/drconfiglib.dll\\\" COPYONLY)\")\n    install(CODE \"configure_file(\\\"${DynamoRIO_DIR}/../${BIN_ARCH}/drinjectlib.dll\\\" \\\"\\${CMAKE_INSTALL_PREFIX}/${DR_install_dir}/${BIN_ARCH}/drinjectlib.dll\\\" COPYONLY)\")\n    install(CODE \"configure_file(\\\"${DynamoRIO_DIR}/../${BIN_ARCH}/DRcontrol.exe\\\" \\\"\\${CMAKE_INSTALL_PREFIX}/${DR_install_dir}/${BIN_ARCH}/DRcontrol.exe\\\" COPYONLY)\")\n    install(CODE \"configure_file(\\\"${DynamoRIO_DIR}/../${BIN_ARCH}/DRview.exe\\\" \\\"\\${CMAKE_INSTALL_PREFIX}/${DR_install_dir}/${BIN_ARCH}/DRview.exe\\\" COPYONLY)\")\n  endif (UNIX)\n\n  if (TOOL_DR_MEMORY)\n    # For the new -coverage feature, we include a copy of drcov2lcov.\n    # We keep it inside the dynamorio/ subdir so its rpath will still work.\n    # XXX: a debug build of drmem pointing at an external DR will pull in a\n    # release-build drcov2lcov whose rpath will point at a release DR yet\n    # we only copy debug DR so it will fail -- we just live with this though\n    # as a full RC package will work fine.\n    if (USER_SPECIFIED_DynamoRIO_DIR)\n      set(covdir tools)\n    else ()\n      set(covdir clients)\n    endif ()\n    if (UNIX)\n      # We can't use get_target_property() for USER_SPECIFIED_DynamoRIO_DIR\n      set(covhelper drcov2lcov)\n    else ()\n      set(covhelper drcov2lcov.exe)\n    endif ()\n    install(CODE \"configure_file(\\\"${DynamoRIO_DIR}/../${covdir}/${BIN_ARCH}/${covhelper}\\\" \\\"\\${CMAKE_INSTALL_PREFIX}/${DR_install_dir}/tools/${BIN_ARCH}/${covhelper}\\\" COPYONLY)\")\n    if (WIN32)\n      install(CODE \"configure_file(\\\"${DynamoRIO_DIR}/../${LIB_ARCH}/${build_type}/dynamorio.dll\\\" \\\"\\${CMAKE_INSTALL_PREFIX}/${DR_install_dir}/tools/${BIN_ARCH}/dynamorio.dll\\\" COPYONLY)\")\n    endif ()\n  endif ()\nendif (BUILDING_SUB_PACKAGE)\n\n# DRMF install rules\ninstall(FILES\n  ${framework_incdir}/drmemory_framework.h\n  DESTINATION ${DRMF_INSTALL_INC})\nif (DR_ANNOTATIONS_SUPPORTED)\n  install(FILES\n    ${framework_incdir}/drmemory_annotations.h\n    ${framework_incdir}/dr_annotations.h\n    ${framework_incdir}/dr_annotations_asm.h\n    DESTINATION ${DRMF_INSTALL_INC})\nendif ()\ninstall(FILES ${framework_dir}/DrMemoryFrameworkConfigVersion.cmake\n  ${framework_dir}/DrMemoryFrameworkConfig.cmake\n  DESTINATION ${DRMF_INSTALL})\n# These cover all subdirs\ninstall(DIRECTORY ${framework_bindir}/\n  DESTINATION ${DRMF_INSTALL_BIN}\n  FILE_PERMISSIONS ${owner_access} OWNER_EXECUTE GROUP_READ GROUP_EXECUTE\n  WORLD_READ WORLD_EXECUTE\n  FILES_MATCHING\n  PATTERN \"*.debug\"\n  PATTERN \"*.pdb\"\n  REGEX \".*.dSYM/.*DWARF/.*\" # too painful to get right # of backslash for literal .\n  PATTERN \"*_int.pdb\" EXCLUDE\n  )\n\n# We must append to this file to avoid cmake_install.cmake's diff from thinking\n# the exports have changed and thus clobbering the other config's files.\ninstall(CODE \"file(APPEND \\\"${PROJECT_BINARY_DIR}/CMakeFiles/Export/cmake/${exported_targets_name}.cmake\\\" \\\"${exported_targets_append}\\\")\")\n# Create the exported targets file\n# Note that we do not use the drmf_ NAMESPACE here: it's only needed for\n# internal tests.\ninstall(EXPORT ${exported_targets_name} DESTINATION ${DRMF_INSTALL})\n\n# Check that we have version resources in all our binaries.\n# We do this at install time once we have all binaries built, as it's a pain\n# to individually add post-build commands.\nif (WIN32)\n  install(CODE \"include(\\\"${PROJECT_SOURCE_DIR}/make/rccheck.cmake\\\")\")\n  # We'd need cmake 3.14+ and CMP0087=NEW for a generator expression to work\n  # directly in install(CODE).  We instead have to make a file.\n  set(verinfo_locator \"verinfo_locator.cmake\")\n  file(GENERATE OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/${verinfo_locator}\" CONTENT\n\"set(VERINFO \\\"$<TARGET_FILE:verinfo>\\\")\\n\")\n  install(CODE \"include(\\\"${CMAKE_CURRENT_BINARY_DIR}/${verinfo_locator}\\\")\")\n  install(CODE \"check_version_resources(\\\"${PROJECT_BINARY_DIR}\\\" \\\"\\${VERINFO}\\\")\")\nendif ()\n\n###########################################################################\n# packaging\n\n# \"make package package_source\"\n\nif (USER_SPECIFIED_DynamoRIO_DIR)\n  set(favicon_path \"${DynamoRIO_DIR}/../docs/html/favicon.ico\")\nelse (USER_SPECIFIED_DynamoRIO_DIR)\n  set(favicon_path \"${DynamoRIO_SOURCE_DIR}/api/docs/images/favicon.ico\")\nendif (USER_SPECIFIED_DynamoRIO_DIR)\n\nif (UNIX)\n  # not bothering with TZ or TBZ2 or STGZ (.sh)\n  set(CPACK_GENERATOR \"TGZ\")\n  set(CPACK_SOURCE_GENERATOR \"TGZ\")\n  # We've already split out our separate .debug files and stripped the\n  # originals in our build rules\n  set(CPACK_STRIP_FILES OFF)\n  if (VMKERNEL)\n    set(CPACK_SYSTEM_NAME \"ESXi\")\n  else (VMKERNEL)\n    if (APPLE)\n      set(CPACK_SYSTEM_NAME \"MacOS\")\n    else (APPLE)\n      set(CPACK_SYSTEM_NAME \"Linux\")\n    endif (APPLE)\n  endif (VMKERNEL)\nelse (UNIX)\n  # We don't require NSIS or WIX since we do \"make package\" as part of test suite\n  set(WIX \"WIX-NOTFOUND\")\n  set(NSIS \"NSIS-NOTFOUND\")\n  # Our WIX config requires recent features\n  if (\"${CMAKE_VERSION}\" VERSION_EQUAL \"3.3\" OR\n      \"${CMAKE_VERSION}\" VERSION_GREATER \"3.3\")\n    # WIX's candle.exe must be on the path for cpack to run it, so hints don't help\n    find_program(WIX candle DOC \"WIX for creating installer\")\n  endif ()\n  # Prefer WIX\n  if (NOT WIX)\n    find_program(NSIS nsis HINT \"$ENV{PROGRAMFILES}/NSIS\" DOC\n      \"NSIS for creating installer\")\n  endif ()\n  if (NSIS)\n    message(STATUS \"NSIS found: will build NSIS-based installer\")\n    set(CPACK_GENERATOR \"ZIP;NSIS\")\n    # Ensure we have the NSIS with an 8192 PATH limit (i#1029)\n    get_filename_component(nsis_path \"${NSIS}\" PATH)\n    if (NOT EXISTS \"${nsis_path}/makensis.exe\")\n      message(FATAL_ERROR \"NSIS check needs to be updated\")\n    endif ()\n    # we may have already run find_program on strings up above\n    if (NOT strings)\n      find_program(strings strings)\n    endif ()\n    if (strings)\n      execute_process(COMMAND ${strings} \"${nsis_path}/makensis.exe\"\n        RESULT_VARIABLE strings_result\n        ERROR_QUIET\n        OUTPUT_VARIABLE strings_out)\n      if (strings_result)\n        message(FATAL_ERROR \"*** ${strings} failed to run ***\\n\")\n      endif (strings_result)\n      # The default has \"NSIS_MAX_STRLEN\\n1024\": make sure we have 8192.\n      string(REGEX MATCH \"NSIS_MAX_STRLEN\\n8192\" big_limit \"${strings_out}\")\n      if (big_limit)\n        message(STATUS \"NSIS has larger 8192 path limit\")\n      else ()\n        message(FATAL_ERROR \"Installed NSIS has a too-small path limit.  See i#1029.\")\n      endif ()\n    endif (strings)\n  elseif (WIX)\n    message(STATUS \"WIX found: will build WIX-based .msi installer\")\n    # Make sure to specify BUILDING_PACKAGE. See i#1099 about absolute path.\n    set(CPACK_GENERATOR \"ZIP;WIX\")\n    # Variables below are set to allow for upgrade but prevent\n    # reinstalling the same version. See i#1620.\n    set(CPACK_WIX_UPGRADE_GUID 1A8D7CEE-2ABA-4462-B0D6-86F26715128E)\n    set(CPACK_WIX_PRODUCT_GUID 67675AD6-1FB0-4DE1-9ECF-84997515025E)\n    set(CPACK_WIX_PATCH_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/make/WIX.patches.in\")\n    set(CPACK_WIX_EXTRA_SOURCES \"${CMAKE_CURRENT_SOURCE_DIR}/make/WIX.extra.in\")\n    # This is required for the util:InternetShortcut in WIX.extra.in\n    set(CPACK_WIX_EXTENSIONS \"WiXUtilExtension\")\n    # This should show up in Add/Remove Programs:\n    set(CPACK_WIX_PROPERTY_ARPURLINFOABOUT \"http://drmemory.org\")\n    set(CPACK_WIX_PRODUCT_ICON \"${favicon_path}\")\n  else ()\n    message(STATUS \"Neither NSIS nor WIX found (please install and add to path if desired).  Creating only a zip package.\")\n    set(CPACK_GENERATOR \"ZIP\")\n  endif ()\n  set(CPACK_SOURCE_GENERATOR \"ZIP\")\n  set(CPACK_SYSTEM_NAME \"Windows\")\nendif (UNIX)\n\nset(CPACK_PACKAGE_NAME \"${toolname_cap_spc}\")\nset(CPACK_PACKAGE_VENDOR \"Google\")\nset(CPACK_PACKAGE_DESCRIPTION_FILE \"${PROJECT_SOURCE_DIR}/README\")\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"${toolname_cap_spc} Memory Debugging Tool\")\nset(CPACK_RESOURCE_FILE_LICENSE \"${PROJECT_SOURCE_DIR}/license.txt\")\nset(CPACK_RESOURCE_FILE_README \"${PROJECT_SOURCE_DIR}/README\")\n\nset(CPACK_SOURCE_IGNORE_FILES \"~$\" \"/.svn\" \"/.git\")\n\nset(CPACK_PACKAGE_VERSION \"${TOOL_VERSION_NUMBER}\")\nstring(REGEX REPLACE\n  \"^([0-9]+)\\\\..*\" \"\\\\1\" CPACK_PACKAGE_VERSION_MAJOR \"${TOOL_VERSION_NUMBER}\")\nstring(REGEX REPLACE\n  \"^[0-9]+\\\\.([0-9]+)\\\\..*\" \"\\\\1\" CPACK_PACKAGE_VERSION_MINOR \"${TOOL_VERSION_NUMBER}\")\nstring(REGEX REPLACE\n  \"^[0-9]+\\\\.[0-9]+\\\\.([0-9]+)\" \"\\\\1\" CPACK_PACKAGE_VERSION_PATCH \"${TOOL_VERSION_NUMBER}\")\n\nif (WIN32 AND NOT BUILDING_SUB_PACKAGE)\n  # Include DR so user doesn't have to download separately (PR 457417).\n  # For Unix we do this file-by-file above b/c here we'd get duplicate\n  # files due to cpack not preserving symlinks (filed as\n  # http://www.itk.org/Bug/view.php?id=10096)\n  # We don't need docs/, include/, or 64-bit.\n  # We do include the debug lib (and default DR log dir) for\n  # debugging in the field: it does take space but we'd probably regret\n  # not supplying it.\n  if (NOT USER_SPECIFIED_DynamoRIO_DIR)\n    # install to drmemory exports dir\n    install(DIRECTORY \"${DynamoRIO_DIR}/../${LIB_ARCH}\"\n      DESTINATION \"${DR_install_dir}\"\n      # Static DR is large and we do not need it.\n      PATTERN \"dynamorio_static*\" EXCLUDE)\n    # we don't need ext/ at all b/c we use static libs\n  else (NOT USER_SPECIFIED_DynamoRIO_DIR)\n    # don't take time and space copying: user can pass same dr to frontend,\n    # so we only copy for package target\n    if (DEBUG_BUILD)\n      set(CPACK_INSTALLED_DIRECTORIES\n        \"${DynamoRIO_DIR}/../${LIB_ARCH};${DR_install_dir}/${LIB_ARCH}\"\n        \"${DynamoRIO_DIR}/../ext/${LIB_ARCH};${DR_install_dir}/ext/${LIB_ARCH}\")\n    else (DEBUG_BUILD)\n      set(CPACK_INSTALLED_DIRECTORIES\n        \"${DynamoRIO_DIR}/../${LIB_ARCH}/release;${DR_install_dir}/${LIB_ARCH}/release\"\n        \"${DynamoRIO_DIR}/../ext/${LIB_ARCH}/release;${DR_install_dir}/ext/${LIB_ARCH}/release\")\n    endif (DEBUG_BUILD)\n  endif (NOT USER_SPECIFIED_DynamoRIO_DIR)\nendif (WIN32 AND NOT BUILDING_SUB_PACKAGE)\n\n# CPack tarballs do not allow setting a different name for the base\n# directory and the file: I tried a ton of CPack variables for \"install\n# dir\" and looked at the source code.  Most of the variables are for the\n# other installers (rpm, nsis).  I can hack it via\n# CPACK_TEMPORARY_PACKAGE_FILE_NAME if I hardcode the exentsion: but maybe\n# having the full version in the base dir is a good thing, though I'm not\n# sure about the caps.\n# We omit the -NN suffix for the build number if it is zero.\nif (\"${TOOL_BUILD_NUMBER}\" STREQUAL \"0\")\n  set(PACKAGE_SUFFIX \"\")\nelse ()\n  set(PACKAGE_SUFFIX \"-${TOOL_BUILD_NUMBER}\")\nendif ()\nset(CPACK_PACKAGE_FILE_NAME\n  \"${toolname_cap}-${CPACK_SYSTEM_NAME}-${CPACK_PACKAGE_VERSION}${PACKAGE_SUFFIX}\")\nset(CPACK_SOURCE_PACKAGE_FILE_NAME\n  \"${toolname_cap}-${CPACK_PACKAGE_VERSION}-${TOOL_BUILD_NUMBER}-Source\")\n\n# NSIS settings\nset(CPACK_PACKAGE_INSTALL_DIRECTORY \"${toolname_cap_spc}\")\nset(CPACK_PACKAGE_INSTALL_REGISTRY_KEY \"${toolname_cap_spc}\")\nset(CPACK_PACKAGE_RELOCATABLE \"true\")\nset(CPACK_NSIS_MODIFY_PATH ON)\nif (WIN32 AND TOOL_DR_MEMORY)\n  # CMake hardcodes bin/ for desktop links (CMake bug #7828) so\n  # we rearranged our dirs since we really need one.\n  set(CPACK_PACKAGE_EXECUTABLES \"${toolname}\" \"${toolname_cap_spc} (drag your app here)\")\n  set(CPACK_CREATE_DESKTOP_LINKS \"${toolname}\")\nendif ()\nset(CPACK_NSIS_MENU_LINKS\n  # We automatically get an entry for ${toolname}.exe since it's in the\n  # CPACK_PACKAGE_EXECUTABLES list, even though we don't want one.\n  \"bin/\" \"Explore ${toolname_cap_spc} (drag your app onto ${toolname}.exe)\"\n  \"${toolname}/docs/html/index.html\" \"${toolname_cap_spc} documentation\"\n  \"http://drmemory.org/\" \"${toolname_cap_spc} web page\")\nset(CPACK_NSIS_MUI_ICON \"${favicon_path}\")\n# XXX: CPACK_PACKAGE_ICON: need a .bmp\n\n# i#1009c#4: auto-register Dr. Memory as a Visual Studio External Tool\nif (WIN32)\n  install(TARGETS vs_external_tool DESTINATION \"${INSTALL_BIN}\"\n    PERMISSIONS ${owner_access}\n    OWNER_EXECUTE GROUP_READ GROUP_EXECUTE  WORLD_READ WORLD_EXECUTE)\n  set(CPACK_NSIS_EXTRA_INSTALL_COMMANDS \"ExecWait  '\\\\\\\"$INSTDIR\\\\\\\\bin\\\\\\\\vs_external_tool.exe\\\\\\\" \\\\\\\"$INSTDIR\\\\\\\\bin\\\\\\\\drmemory.exe'\")\n  set(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS \"ExecWait  '\\\\\\\"$INSTDIR\\\\\\\\bin\\\\\\\\vs_external_tool.exe\\\\\\\" -uninstall'\")\nendif (WIN32)\n\n# Let external build file override all settings, but before CPack reads them\nset(AUX_MAKEFILE \"\" CACHE FILEPATH \"Path to an auxiliary CMakeLists.txt file.\")\nif (AUX_MAKEFILE)\n  include(\"${AUX_MAKEFILE}\")\nendif (AUX_MAKEFILE)\n\ninclude(CPack)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.955078125,
          "content": "# Contributing to Dr. Memory\n\nWe welcome contributions to Dr. Memory.  See our [list of project ideas for\ncontributors](http://drmemory.org/projects.html).\n\n[Our web site](https://drmemory.org/page_contribute.html)\ncontains further information on policies, how to check out the\ncode, and how to add new code.\n\n## Reporting issues\n\nTo report issues in Dr. Memory, please fill in the body of the issue with\nthis template:\n\n```\nWhat steps will reproduce the problem?\n1.\n2.\n3.\n\nWhat is the expected output? What do you see instead?\n\n\nWhat version of the product are you using? On what operating system?\n\n\nDoes the problem go away when running in light mode (pass \"-light\" to Dr.\nMemory)?  What about when running with the options \"-leaks_only\n-no_count_leaks -no_track_allocs\"?\n\nDoes the problem go away when using the most recent build from\nhttps://drmemory.org/Latest-Build?\n\nTry the debug version of Dr. Memory and of its underlying engine DynamoRIO\nby passing \"-debug -dr_debug -pause_at_assert\" to drmemory.exe. Are any\nmessages reported?\n\nPlease provide any additional information below.  Please also see the\n\"Narrowing Down the Source of the Problem\" section\nof https://drmemory.org/Debugging.\n```\n\n### Including code in issues\n\nThe text in an issue is interpreted as Markdown.  To include any kind of\nraw output or code that contains Markdown symbols, place it between lines\nthat consist solely of three backtics:\n<pre>\n```\n</pre>\n\n### Attaching images or files to issues\n\nPlace the attachment on Google Drive or some other location and include a\nlink to it in the issue text.\n\n## Filing feature requests\n\nBefore filing a feature request, check the documentation to ensure it is\nnot already provided.\n\nPlease provide the following information in an issue filed as a feature\nrequest:\n\n```\nWhat is the goal of the new feature?\n\nIf there is a current method of accomplishing this goal, describe the\nproblems or shortcomings of that method and how the proposed feature would\nimprove the situation.\n```\n"
        },
        {
          "name": "CTestConfig.cmake",
          "type": "blob",
          "size": 3.6513671875,
          "content": "# **********************************************************\n# Copyright (c) 2010-2020 Google, Inc.  All rights reserved.\n# Copyright (c) 2009 VMware, Inc.  All rights reserved.\n# **********************************************************\n\n# Dr. Memory: the memory debugger\n#\n# This library is free software; you can redistribute it and/or\n# modify it under the terms of the GNU Lesser General Public\n# License as published by the Free Software Foundation;\n# version 2.1 of the License, and no later version.\n#\n# This library is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n# Library General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public\n# License along with this library; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\n# **********************************************************\n# Copyright (c) 2009 VMware, Inc.    All rights reserved.\n# **********************************************************\n\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# * Redistributions of source code must retain the above copyright notice,\n#   this list of conditions and the following disclaimer.\n#\n# * Redistributions in binary form must reproduce the above copyright notice,\n#   this list of conditions and the following disclaimer in the documentation\n#   and/or other materials provided with the distribution.\n#\n# * Neither the name of VMware, Inc. nor the names of its contributors may be\n#   used to endorse or promote products derived from this software without\n#   specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n# ARE DISCLAIMED. IN NO EVENT SHALL VMWARE, INC. OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH\n# DAMAGE.\n\n# Where to submit CTest results\nset(CTEST_PROJECT_NAME \"DrMemory\") # must match project() name\n\nif (SUBMIT_LOCAL)\n  # There is no longer support for \"cp\" or \"scp methods in cmake 3.14+: there is no\n  # way to copy locally using ctest_submit().  We copy ourselves manually.\n  set(CTEST_SUBMIT_URL \"none\")\n  set(CTEST_DROP_METHOD \"none\")\n  set(CTEST_TRIGGER_SITE \"\")\n  set(CTEST_DROP_SITE_USER \"\")\n  # CTest does \"scp file ${CTEST_DROP_SITE}:${CTEST_DROP_LOCATION}\" so for\n  # local copy w/o needing sshd on localhost we arrange to have : in the\n  # absolute filepath (when absolute, scp interprets as local even if : later)\n  if (NOT EXISTS \"${CTEST_DROP_SITE}:${CTEST_DROP_LOCATION}\")\n    message(FATAL_ERROR\n      \"must set ${CTEST_DROP_SITE}:${CTEST_DROP_LOCATION} to an existing directory\")\n  endif ()\nelse (SUBMIT_LOCAL)\n  # Nightly runs will use sources as of this time\n  set(CTEST_NIGHTLY_START_TIME \"04:00:00 EST\")\n  set(CTEST_DROP_METHOD \"http\")\n  set(CTEST_DROP_SITE \"dynamorio.org\")\n  set(CTEST_DROP_LOCATION \"/CDash/submit.php?project=DrMemory\")\n  set(CTEST_DROP_SITE_CDASH TRUE)\nendif (SUBMIT_LOCAL)\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 3.787109375,
          "content": "# **********************************************************\n# Copyright (c) 2010-2021 Google, Inc.  All rights reserved.\n# Copyright (c) 2008-2009 VMware, Inc.  All rights reserved.\n# **********************************************************\n\n# Dr. Memory: the memory debugger\n#\n# This library is free software; you can redistribute it and/or\n# modify it under the terms of the GNU Lesser General Public\n# License as published by the Free Software Foundation;\n# version 2.1 of the License, and no later version.\n#\n# This library is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n# Library General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public\n# License along with this library; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\n===========================================================================\n                     D O C T O R   M E M O R Y\n===========================================================================\n\n===========================================================================\nWhat is Dr. Memory?\n\nDr. Memory is a memory monitoring tool capable of identifying\nmemory-related programming errors such as accesses of uninitialized memory,\naccesses to unaddressable memory (including outside of allocated heap units\nand heap underflow and overflow), accesses to freed memory, double frees,\nmemory leaks, and (on Windows) handle leaks, GDI API usage errors, and\naccesses to un-reserved thread local storage slots.\n\nDr. Memory is based on the DynamoRIO binary translation engine.  Dr. Memory\nhas full support for Windows (XP and higher) and Linux, with preliminary\nMac OSX, Linux/ARM, and Android/ARM support (32-bit only for those three)\navailable as a Beta release.\n\nDr. Memory also includes a system call tracing tool for Windows and a\nsymbol query utility.\n\n===========================================================================\nHow do I use Dr. Memory?\n\nBuild your application with debug information and then run it under\nDr. Memory.  Errors found are printed to the screen, and a summary is shown\nat the end of the run.\n\n--------------------------------------------------\nQuick start for Linux:\n\n1) g++ -m32 -g -fno-inline -fno-omit-frame-pointer *.cpp -o myapp\n2) bin/drmemory -- ./myapp args_to_myapp\n\n--------------------------------------------------\nQuick start for Windows:\n\nIf you used the installer, it added Dr. Memory to the current user's PATH,\nand a fresh shell should find the \"drmemory\" command:\n\n1) cl /Zi /MT /EHsc /Oy- /Ob0 /Femyapp.exe *.cpp\n2) drmemory -- myapp.exe args_to_my_app\n\n--------------------------------------------------\nQuick start for Mac:\n\n1) c++ -m32 -g -fno-inline -fno-omit-frame-pointer *.cpp -o myapp\n2) bin/drmemory -- ./myapp args_to_myapp\n\n===========================================================================\nFull Documentation\n\nIf you are viewing this file, you have already successfully unpacked the\nDr. Memory distribution archive.  To view the documention, point your web\nbrowser at the drmemory/docs/html/index.html file, or online at\nhttp://drmemory.org/.\n\n===========================================================================\nContact\n\nThis project is provided as-is, with no official support.  Use\nthe Dr. Memory Users group at\nhttp://groups.google.com/group/drmemory-users/ to ask questions and seek\nhelp on using Dr. Memory.\n\nDr. Memory's source code and issue tracker live at\nhttps://github.com/DynamoRIO/drmemory\n\nWe welcome contributions to Dr. Memory.  Please see our\ninstructions for contributing at https://drmemory.org/page_contribute.html.\n\n===========================================================================\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.9560546875,
          "content": "# Dr. Memory: the memory debugger\n\n## About Dr. Memory\n\nDr. Memory is a memory monitoring tool capable of identifying\nmemory-related programming errors such as accesses of uninitialized memory,\naccesses to unaddressable memory (including outside of allocated heap units\nand heap underflow and overflow), accesses to freed memory, double frees,\nmemory leaks, and (on Windows) handle leaks, GDI API usage errors, and\naccesses to un-reserved thread local storage slots.\n\nDr. Memory operates on unmodified application binaries running on Windows,\nLinux, Mac, or Android on commodity IA-32, AMD64, and ARM hardware.\n\nDr. Memory is released under an LGPL license and binary packages are\n[available for download](https://drmemory.org/page_download.html).\n\nDr. Memory is built on the [DynamoRIO dynamic instrumentation tool\nplaform](http://dynamorio.org).\n\n![Dr. Memory logo](http://www.burningcutlery.com/images/dynamorio/DrMemory-logo.png)\n\n## Dr. Memory Performance\n\nDr. Memory is faster than comparable tools, including Valgrind, as shown in\nour [CGO 2011](http://www.cgo.org) paper [Practical Memory Checking with\nDr. Memory](http://www.burningcutlery.com/derek/docs/drmem-CGO11.pdf),\nwhere we compare the two tools on Linux on the SPECCPU 2006 benchmark\nsuite:\n\n![Performance chart](http://burningcutlery.com/images/dynamorio/drmem-spec2k6-sm.png)\n\n(Valgrind is unable to run 434.zeusmp and 447.dealII).\n\n## Documentation\n\nDocumentation is included in the release package.  We also maintain a copy\nfor [online browsing](http://drmemory.org/).\n\n## System call tracer for Windows\n\nThe Dr. Memory package includes [an \"strace for Windows\" tool called\n`drstrace`](https://drmemory.org/page_drstrace.html).\n\n## Obtaining help\n\nDr. Memory has its own [discussion\nlist](http://groups.google.com/group/DrMemory-Users).\n\nTo report a bug, use the [issue\ntracker](https://github.com/DynamoRIO/drmemory/issues).\n\nSee also [the Dr. Memory home page](http://drmemory.org/): [http://drmemory.org/](http://drmemory.org/)\n"
        },
        {
          "name": "codereview.cmake",
          "type": "blob",
          "size": 18.56640625,
          "content": "# **********************************************************\n# Copyright (c) 2010 VMware, Inc.  All rights reserved.\n# **********************************************************\n\n# Dr. Memory: the memory debugger\n#\n# This library is free software; you can redistribute it and/or\n# modify it under the terms of the GNU Lesser General Public\n# License as published by the Free Software Foundation;\n# version 2.1 of the License, and no later version.\n#\n# This library is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n# Library General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public\n# License along with this library; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\n# **********************************************************\n# Copyright (c) 2009-2010 VMware, Inc.    All rights reserved.\n# **********************************************************\n\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# * Redistributions of source code must retain the above copyright notice,\n#   this list of conditions and the following disclaimer.\n#\n# * Redistributions in binary form must reproduce the above copyright notice,\n#   this list of conditions and the following disclaimer in the documentation\n#   and/or other materials provided with the distribution.\n#\n# * Neither the name of VMware, Inc. nor the names of its contributors may be\n#   used to endorse or promote products derived from this software without\n#   specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n# ARE DISCLAIMED. IN NO EVENT SHALL VMWARE, INC. OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH\n# DAMAGE.\n\n###########################################################################\n# Code Review Automation\n# Based on DynamoRIO's script of the same name\n#\n# See CodeReviews.wiki for full discussion of our code review process.\n# To summarize: reviewer commits to /reviews/<user>/<year>/i###-descr.diff\n#   with a commit log that auto-opens an Issue\n# Inline comments for a regular patch diff should be the norm for now\n# FIXME: we should also produce web diffs for quick reviews\n# FIXME: xref discussion on using Google Code's post-commit review options\n#\n# Usage: prepare a notes file with comments for the reviewer after a line\n# beginning \"toreview:\", and point to it w/ the NOTES variable\n# (defult is ./diff.notes)\n#\n# Since we no longer invoke \"make\" from the soure dir (due to cmake: i#19, i#64),\n# we have to invoke this explicitly \"cmake -P ./codereview.cmake\".\n#\n# Parameter list:\n#\n#   REVIEWS:PATH    = Checkout of https://drmemory.googlecode.com/svn/reviews\n#   NOTES:FILEPATH  = File containing notes for this review.\n#                     It must contain the string label \"toreview:\".\n#                     Content prior to the label is discarded (private notes).\n#                     Content after the label is included in the review request.\n#   LABEL:STRING    = Name for review.  Should follow \"i###-descr\" format where\n#                     ### is the Issue number.  For example: \"i64-cmake-review\".\n#   AUTHOR:STRING   = Username on https://drmemory.googlecode.com/svn\n#   REVIEWER:STRING = Username on https://drmemory.googlecode.com/svn\n#   REVERT:BOOL     = Set to ON to revert locally-added files\n#   COMMIT:BOOL     = Set to ON to officially commit the review request\n#                     (the default is to simply create and locally add the\n#                     .diff and .notes files)\n#\n# Examples:\n#\n# Dry run to ensure diff and notes file are as desired:\n#   > cmake -DAUTHOR:STRING=derek.bruening -DREVIEWER:STRING=qin.zhao -DLABEL:STRING=i64-cmake-review -P ./codereview.cmake\n#   -- notes file is \"diff.notes\"\n#   -- destination is \"../reviews/derek.bruening/2009/i64-cmake-review.{diff,notes}\"\n#   -- svn: A         ../reviews/derek.bruening/2009/i64-cmake-review.diff\n#   -- svn: A         ../reviews/derek.bruening/2009/i64-cmake-review.notes\n#   -- ready to commit\n#\n# Want to abort (maybe decided to change LABEL) so undoing local svn add:\n#   > cmake -DAUTHOR:STRING=derek.bruening -DREVIEWER:STRING=qin.zhao -DLABEL:STRING=i64-cmake-review -DREVERT:BOOL=ON -P ./codereview.cmake\n#   -- notes file is \"diff.notes\"\n#   -- destination is \"../reviews/derek.bruening/2009/i64-cmake-review.{diff,notes}\"\n#   -- svn: D         ../reviews/derek.bruening/2009/i64-cmake-review.diff\n#   -- svn: D         ../reviews/derek.bruening/2009/i64-cmake-review.notes\n#   -- revert complete\n#\n# Ready to commit:\n#   > cmake -DAUTHOR:STRING=derek.bruening -DREVIEWER:STRING=qin.zhao -DLABEL:STRING=i64-cmake-review -DCOMMIT:BOOL=ON -P ./codereview.cmake\n#   -- notes file is \"diff.notes\"\n#   -- destination is \"../reviews/derek.bruening/2009/i64-cmake-review.{diff,notes}\"\n#   -- svn: A         ../reviews/derek.bruening/2009/i64-cmake-review.diff\n#   -- svn: A         ../reviews/derek.bruening/2009/i64-cmake-review.notes\n#   -- svn: Sending        derek.bruening/2009/i64-cmake-review.diff\n#   -- svn: Sending        derek.bruening/2009/i64-cmake-review.notes\n#   -- svn: Transmitting file data .\n#   -- svn: Committed revision 75.\n#   -- committed\n#\n# Note that you can make a cmake script that sets common variables and point at it\n# with the -C parameter to cmake.\n\n# FIXME i#66: should include pre-commit regression test suite results here\n\nif (NOT DEFINED LABEL)\n  message(FATAL_ERROR \"must set LABEL variable\")\nendif (NOT DEFINED LABEL)\n\nif (NOT DEFINED AUTHOR)\n  message(FATAL_ERROR \"must set AUTHOR variable\")\nendif (NOT DEFINED AUTHOR)\n\nif (NOT DEFINED REVIEWER)\n  message(FATAL_ERROR \"must set REVIEWER variable\")\nendif (NOT DEFINED REVIEWER)\n\nif (NOT DEFINED NOTES)\n  set(NOTES diff.notes)\nendif (NOT DEFINED NOTES)\nif (NOT EXISTS ${NOTES})\n  message(FATAL_ERROR \"cannot find NOTES=\\\"${NOTES}\\\"\")\nendif (NOT EXISTS ${NOTES})\nmessage(STATUS \"notes file is \\\"${NOTES}\\\"\")\n\nif (NOT DEFINED REVIEWS)\n  set(REVIEWS ../reviews)\nendif (NOT DEFINED REVIEWS)\nif (NOT EXISTS ${REVIEWS})\n  message(FATAL_ERROR \"cannot find REVIEWS=\\\"${REVIEWS}\\\"\")\nendif (NOT EXISTS ${REVIEWS})\n\nfind_program(SVN svn DOC \"subversion client\")\nif (NOT SVN)\n  message(FATAL_ERROR \"svn not found\")\nendif (NOT SVN)\n# we run svn in the review checkout\nfunction(run_svn)\n  execute_process(COMMAND ${SVN} ${ARGV}\n    WORKING_DIRECTORY ${REVIEWS}\n    RESULT_VARIABLE svn_result\n    ERROR_VARIABLE svn_err\n    OUTPUT_VARIABLE svn_out)\n  if (svn_result OR svn_err)\n    message(FATAL_ERROR \"*** ${SVN} ${ARGV} failed: ***\\n${svn_err}\")\n  endif (svn_result OR svn_err)\n  string(STRIP \"${svn_out}\" svn_out)\n  string(REGEX REPLACE \"\\r?\\n\" \"\\n-- svn: \" svn_out \"${svn_out}\")\n  message(STATUS \"svn: ${svn_out}\")\nendfunction(run_svn)\n\nfind_program(DIFFSTAT diffstat DOC \"diff statistics displayer\")\nif (NOT DIFFSTAT)\n  message(STATUS \"diffstat not found: will not have diff statistics\")\nendif (NOT DIFFSTAT)\n\n# get the year\nif (UNIX)\n  find_program(DATE date DOC \"unix date\")\n  if (NOT DATE)\n    message(FATAL_ERROR \"date not found\")\n  endif (NOT DATE)\n  execute_process(COMMAND ${DATE} +%Y\n    RESULT_VARIABLE date_result\n    ERROR_VARIABLE date_err\n    OUTPUT_VARIABLE year)\n  if (date_result OR date_err)\n    message(FATAL_ERROR \"*** ${DATE} failed: ***\\n${date_err}\")\n  endif (date_result OR date_err)\n  string(STRIP \"${year}\" year)\nelse (UNIX)\n  find_program(CMD cmd DOC \"cmd shell\")\n  if (NOT CMD)\n    message(FATAL_ERROR \"cmd not found\")\n  endif (NOT CMD)\n  # If use forward slashes => \"The syntax of the command is incorrect.\"\n  file(TO_NATIVE_PATH \"${CMD}\" CMD)\n  execute_process(COMMAND ${CMD} /c date /T\n    RESULT_VARIABLE date_result\n    ERROR_VARIABLE date_err\n    OUTPUT_VARIABLE date_out)\n  if (date_result OR date_err)\n    message(FATAL_ERROR \"*** ${CMD} /c date /T failed: ***\\n${date_err}\")\n  endif (date_result OR date_err)\n  string(STRIP \"${date_out}\" date_out)\n  # result should be like this: \"Fri 03/06/2009\"\n  # cmake regexp doesn't have {N}\n  string(REGEX REPLACE \"^....../../([0-9][0-9][0-9][0-9])\" \"\\\\1\" year \"${date_out}\")\nendif (UNIX)\n\n# we run from the REVIEWS dir so no need to include it here\nset(DEST_BASE \"${AUTHOR}/${year}\")\nset(DEST \"${DEST_BASE}/${LABEL}\")\nmessage(STATUS \"destination is \\\"${REVIEWS}/${DEST}.{diff,notes}\\\"\")\n\nif (REVERT)\n\n  execute_process(COMMAND ${SVN} status ${DEST}.diff\n    WORKING_DIRECTORY ${REVIEWS}\n    RESULT_VARIABLE svn_result\n    ERROR_VARIABLE svn_err\n    OUTPUT_VARIABLE svn_out)\n  if (svn_result OR svn_err)\n    message(FATAL_ERROR \"*** ${SVN} status failed: ***\\n${svn_err}\")\n  endif (svn_result OR svn_err)\n  if (\"${svn_out}\" MATCHES \"^\\\\A\")\n    # svn revert doesn't delete local copy if new => svn delete\n    # FIXME: if AUTHOR was mistyped should we remove the directories too?\n    run_svn(\"delete;--force;${DEST}.diff;${DEST}.notes\")\n  else (\"${svn_out}\" MATCHES \"^\\\\A\")\n    run_svn(\"revert;${DEST}.diff;${DEST}.notes\")\n  endif (\"${svn_out}\" MATCHES \"^\\\\A\")\n\n  message(STATUS \"revert complete\")\n\nelse (REVERT)\n\n  if (NOT EXISTS \"${REVIEWS}/${DEST_BASE}\")\n    if (NOT EXISTS \"${REVIEWS}/${AUTHOR}\")\n      run_svn(\"mkdir;${AUTHOR}\")\n    endif (NOT EXISTS \"${REVIEWS}/${AUTHOR}\")\n    run_svn(\"mkdir;${DEST_BASE}\")\n  endif (NOT EXISTS \"${REVIEWS}/${DEST_BASE}\")\n\n  set(NOTES_LOCAL \"${DEST}.notes\")\n  set(DIFF_LOCAL \"${DEST}.diff\")\n  set(NOTES_FILE \"${REVIEWS}/${NOTES_LOCAL}\")\n  set(DIFF_FILE \"${REVIEWS}/${DIFF_LOCAL}\")\n\n  # If someone manually created these files then this script\n  # will fail: we assume not already there if haven't been\n  # added to svn yet.\n  if (NOT EXISTS \"${DIFF_FILE}\")\n    file(WRITE \"${DIFF_FILE}\" \"\")\n    run_svn(\"add;${DIFF_LOCAL}\")\n  endif (NOT EXISTS \"${DIFF_FILE}\")\n  if (NOT EXISTS \"${NOTES_FILE}\")\n    file(WRITE \"${NOTES_FILE}\" \"\")\n    run_svn(\"add;${NOTES_LOCAL}\")\n  endif (NOT EXISTS \"${NOTES_FILE}\")\n\n  # We want context diffs with procedure names for better readability\n  # svn diff does show new files for us but we pass -N just in case\n  execute_process(COMMAND ${SVN} diff --diff-cmd diff -x \"-c -p -N\"\n    RESULT_VARIABLE svn_result\n    ERROR_VARIABLE svn_err\n    OUTPUT_FILE \"${DIFF_FILE}\")\n  if (svn_result OR svn_err)\n    message(FATAL_ERROR \"*** ${SVN} diff failed: ***\\n${svn_err}\")\n  endif (svn_result OR svn_err)\n\n  file(READ ${NOTES} string)\n  string(REGEX REPLACE \"^.*\\ntoreview:\\r?\\n\" \"\" pubnotes \"${string}\")\n  string(REGEX REPLACE \"^toreview:\\r?\\n\" \"\" pubnotes \"${pubnotes}\")\n  if (\"${string}\" STREQUAL \"${pubnotes}\")\n    message(FATAL_ERROR \"${NOTES} is missing \\\"toreview:\\\" marker\")\n  endif (\"${string}\" STREQUAL \"${pubnotes}\")\n\n  # Do \"wc -l\" ourselves\n  file(READ \"${DIFF_FILE}\" string)\n  string(REGEX MATCHALL \"\\n\" newlines \"${string}\")\n  list(LENGTH newlines lines )\n\n  ##################################################\n  # i#78: coding style checks\n  #\n  # Since these are on the diff, not the code, remember that there\n  # are two extra columns at the start of the line!\n  set(ugly \"*** STYLE VIOLATION:\")\n\n  # the old \"make ugly\" rules\n  # to make the regexps simpler I'm assuming no non-alphanums run up\n  # against keywords: assuming spaces delimit\n  string(REGEX MATCH \"(TRACELOG\\\\([^l]|NOCHECKIN)\" bad \"${string}\")\n  if (bad)\n    message(\"${ugly} remove debugging facilities: \\\"${bad}\\\"\")\n  endif (bad)\n  string(REGEX MATCH \"DO_ONCE\\\\( *{? *SYSLOG_INTERNAL\" bad \"${string}\")\n  if (bad)\n    message(\"${ugly} use SYSLOG_INTERNAL_*_ONCE, not DO_ONCE(SYSLOG_: \\\"${bad}\\\"\")\n  endif (bad)\n  # note that ASSERT_NOT_TESTED is already DO_ONCE so shouldn't see DO_ONCE on any ASSERT\n  string(REGEX MATCH \"ONCE\\\\( *{? *ASSERT\" bad \"${string}\")\n  if (bad)\n    message(\"${ugly} use ASSERT_CURIOSITY_ONCE, not DO_ONCE(ASSERT: \\\"${bad}\\\"\")\n  endif (bad)\n  string(REGEX MATCH \"\\n[^-\\\\*][^\\n]*\\t\" bad \"${string}\")\n  if (bad)\n    message(\"${ugly} clean TABs w/ M-x untabify (cat -T | grep \\\"\\^I\\\" to see)\")\n  endif (bad)\n  string(REGEX MATCH \" *(if|while) *[^{\\n]*\\r?\\n[^;\\n]*\\r?\\n\" bad \"${string}\")\n  if (bad)\n    message(\"${ugly} use {} for multi-line body: \\\"${bad}\\\"\")\n  endif (bad)\n  string(REGEX MATCH \" if *\\\\([^\\n]*;\" bad \"${string}\")\n  if (bad)\n    message(\"${ugly} put if body on separate line: \\\"${bad}\\\"\")\n  endif (bad)\n  # loop bodies\n  string(REGEX MATCH \"\\n[^}]* while *\\\\([^\\n]*;\" bad \"${string}\")\n  if (bad)\n    message(\"${ugly} put loop body on separate line: \\\"${bad}\\\"\")\n  endif (bad)\n  string(REGEX MATCH \"\\n[^ ]+} *while *\\\\([^\\n]*;\" bad \"${string}\")\n  if (bad)\n    message(\"${ugly} put loop body on separate line: \\\"${bad}\\\"\")\n  endif (bad)\n  string(REGEX MATCH \" do *{[^\\n]*;\" bad \"${string}\")\n  if (bad)\n    message(\"${ugly} put loop body on separate line: \\\"${bad}\\\"\")\n  endif (bad)\n  string(REGEX MATCH \" for *([^\\n]*;[^\\n]*;[^\\n]*)[^\\n]*;\" bad \"${string}\")\n  if (bad)\n    message(\"${ugly} put loop body on separate line: \\\"${bad}\\\"\")\n  endif (bad)\n  string(REGEX MATCH \"\\\\( *([0-9]+|NULL) *== *[^0-9]\" bad \"${string}\")\n  if (bad)\n    message(\"${ugly} (1 == var) vs. (var == 1): \\\"${bad}\\\"\")\n  endif (bad)\n  # check that empty param list is declared void\n  # FIXME: should we only require for decls by only running on header files?\n  # But we do want to catch static decls.\n  string(REGEX MATCH \"\\n.. *[A-Za-z0-9][A-Za-z0-9_\\\\* ]+\\\\(\\\\);\" bad \"${string}\")\n  if (bad)\n    message(\"${ugly} empty param list should be (void) not (): \\\"${bad}\\\"\")\n  endif (bad)\n\n  # the old \"make pretty_ugly\"\n  # since we're only checking the diff and not the existing core we\n  # go ahead and apply all the rules\n  # Rules that should pass (and almost do, all have only a few violations left and\n  # no false positives). FIXME - should be cleaned up and moved to ugly xref 8806.\n  string(REGEX MATCH \" (do|if|while|for|else|switch)\\\\(\" bad \"${string}\")\n  if (bad)\n    message(\"${ugly} spacing, if( or if  ( vs if (: \\\"${bad}\\\"\")\n  endif (bad)\n  string(REGEX MATCH \"[}\\\\);](  +)?(do|if|while|for|else|switch)[ \\n]\" bad \"${string}\")\n  if (bad)\n    message(\"${ugly} spacing, }else or }  else vs } else: \\\"${bad}\\\"\")\n  endif (bad)\n\n  # The old \"really_ugly\": see comments above.\n  # Rules that don't pass at all, either because of excessive violations in the\n  # codebase or because of false positives. FIXME - for rules with few or no false\n  # positives but numerous violations we could use a count or something to try and\n  # keep things from getting worse xref case 8806.\n\n  # no false positives, but numerous violations\n  # that's right, cmake regexp has no {N} so we do it the hard way\n  string(REGEX MATCH \"\\n[^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n][^\\n]\" bad \"${string}\")\n  if (bad)\n    message(\"${ugly} line is too long: \\\"${bad}\\\"\")\n  endif (bad)\n\n  # FIXME: not bothering to try and catch multiple statements on one line\n  # at this time: look at old core/Makefile if interested.  Keeping comment below\n  # for all the issues:\n  #\n  # With all the exemptions very few false positives, but still many violations\n  # (and prob. some false negatives). The first grep looks for lines with two ; not\n  # within quotes. 2nd, 3rd and 4th greps subtract out lines where the extra\n  # semicolon is prob. part of a comment. NOTE, for some reason   doesn't\n  # work for matching before the * in the 3rd grep. 5th grep subtracts out for (;;)\n  # loop usage and 6th grep subtracts out the very common 'case: foo; break;' motif\n  # (even though it technically breaks the rule). Final grep subtracts out certain\n  # common macros whose usage often breaks the rule.\n\n  # only a few false positives, but numerous violations\n  string(REGEX MATCH \"[A-Za-z0-9]\\\\*[^A-Za-z0-9/\\\\)\\\\(]\" bad \"${string}\")\n  if (bad)\n    message(\"${ugly} instr_t* foo vs. instr_t *foo, etc.: \\\"${bad}\\\"\")\n  endif (bad)\n  # only a few false positives, but numerous violations (even allowing for usage\n  # inside /* */ comments)\n  string(REGEX MATCH \"//\" bad \"${string}\")\n  if (bad)\n    message(\"${ugly} use C style comments: \\\"${bad}\\\"\")\n  endif (bad)\n  # mostly false positives (we're too grammatical ;) due to using ; in comments\n  string(REGEX MATCH \"/\\\\*[^\\\\*].*;[^\\\\*]\\\\*/\" bad \"${string}\")\n  if (bad)\n    message(\"${ugly} no commented-out code: \\\"${bad}\\\"\")\n  endif (bad)\n  # some false positives and numerous violations\n  string(REGEX MATCH \"\\n[^\\\\*\\n]*long \" bad \"${string}\")\n  if (bad)\n    message(\"${ugly} use int/uint instead of long/ulong: \\\"${bad}\\\"\")\n  endif (bad)\n  # Only a few false positives and not that many violations (for the \"( \" rule at\n  # least). FIXME - these could probably be moved to pretty_ugly at some point.\n  string(REGEX MATCH \"\\\\( +[^\\\\ ]+\" bad \"${string}\")\n  if (bad)\n    message(\"${ugly} spacing, ( foo, bar ) vs. (foo, bar): \\\"${bad}\\\"\")\n  endif (bad)\n  string(REGEX MATCH \" \\\\)\" bad \"${string}\")\n  if (bad)\n    message(\"${ugly} spacing, ( foo, bar ) vs. (foo, bar): \\\"${bad}\\\"\")\n  endif (bad)\n  # no real false positives, but tons of violations (even ignoring asm listings)\n  string(REGEX MATCH \"\\n[^\\\\*-][^\\n]*,[^ \\r\\n]\" bad \"${string}\")\n  if (bad)\n    message(\"${ugly} put spaces after commas: \\\"${bad}\\\"\")\n  endif (bad)\n\n  #\n  ##################################################\n\n  # We commit the diff to review/ using special syntax to auto-generate\n  # an Issue that covers performing the review\n  file(WRITE \"${NOTES_FILE}\"\n    \"new review:\\nowner: ${REVIEWER}\\nsummary: ${AUTHOR}/${year}/${LABEL}.diff\\n\")\n  file(APPEND \"${NOTES_FILE}\" \"${pubnotes}\")\n  file(APPEND \"${NOTES_FILE}\" \"\\nstats: ${lines} diff lines\\n\")\n  if (EXISTS \"${DIFFSTAT}\")\n    execute_process(COMMAND ${DIFFSTAT} \"${DIFF_FILE}\"\n      ERROR_QUIET OUTPUT_VARIABLE diffstat_out)\n    file(APPEND \"${NOTES_FILE}\" \"${diffstat_out}\")\n  endif (EXISTS \"${DIFFSTAT}\")\n  message(STATUS \"ready to commit\")\n\n  if (COMMIT)\n    run_svn(\"commit;--force-log;-F;${NOTES_LOCAL}\")\n    message(STATUS \"committed\")\n  endif (COMMIT)\n\nendif (REVERT)\n"
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "drfuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "drheapstat",
          "type": "tree",
          "content": null
        },
        {
          "name": "drltrace",
          "type": "tree",
          "content": null
        },
        {
          "name": "drmemory",
          "type": "tree",
          "content": null
        },
        {
          "name": "drstrace",
          "type": "tree",
          "content": null
        },
        {
          "name": "drsymcache",
          "type": "tree",
          "content": null
        },
        {
          "name": "drsyscall",
          "type": "tree",
          "content": null
        },
        {
          "name": "dynamorio",
          "type": "commit",
          "content": null
        },
        {
          "name": "framework",
          "type": "tree",
          "content": null
        },
        {
          "name": "lgpl-2.1.txt",
          "type": "blob",
          "size": 23.818359375,
          "content": "\t\t  GNU LESSER GENERAL PUBLIC LICENSE\n\t\t       Version 2.1, February 1999\n\n Copyright (C) 1991, 1999 Free Software Foundation, Inc.\n 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts\n as the successor of the GNU Library Public License, version 2, hence\n the version number 2.1.]\n\n\t\t\t    Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicenses are intended to guarantee your freedom to share and change\nfree software--to make sure the software is free for all its users.\n\n  This license, the Lesser General Public License, applies to some\nspecially designated software packages--typically libraries--of the\nFree Software Foundation and other authors who decide to use it.  You\ncan use it too, but we suggest you first think carefully about whether\nthis license or the ordinary General Public License is the better\nstrategy to use in any particular case, based on the explanations below.\n\n  When we speak of free software, we are referring to freedom of use,\nnot price.  Our General Public Licenses are designed to make sure that\nyou have the freedom to distribute copies of free software (and charge\nfor this service if you wish); that you receive source code or can get\nit if you want it; that you can change the software and use pieces of\nit in new free programs; and that you are informed that you can do\nthese things.\n\n  To protect your rights, we need to make restrictions that forbid\ndistributors to deny you these rights or to ask you to surrender these\nrights.  These restrictions translate to certain responsibilities for\nyou if you distribute copies of the library or if you modify it.\n\n  For example, if you distribute copies of the library, whether gratis\nor for a fee, you must give the recipients all the rights that we gave\nyou.  You must make sure that they, too, receive or can get the source\ncode.  If you link other code with the library, you must provide\ncomplete object files to the recipients, so that they can relink them\nwith the library after making changes to the library and recompiling\nit.  And you must show them these terms so they know their rights.\n\n  We protect your rights with a two-step method: (1) we copyright the\nlibrary, and (2) we offer you this license, which gives you legal\npermission to copy, distribute and/or modify the library.\n\n  To protect each distributor, we want to make it very clear that\nthere is no warranty for the free library.  Also, if the library is\nmodified by someone else and passed on, the recipients should know\nthat what they have is not the original version, so that the original\nauthor's reputation will not be affected by problems that might be\nintroduced by others.\n\f\n  Finally, software patents pose a constant threat to the existence of\nany free program.  We wish to make sure that a company cannot\neffectively restrict the users of a free program by obtaining a\nrestrictive license from a patent holder.  Therefore, we insist that\nany patent license obtained for a version of the library must be\nconsistent with the full freedom of use specified in this license.\n\n  Most GNU software, including some libraries, is covered by the\nordinary GNU General Public License.  This license, the GNU Lesser\nGeneral Public License, applies to certain designated libraries, and\nis quite different from the ordinary General Public License.  We use\nthis license for certain libraries in order to permit linking those\nlibraries into non-free programs.\n\n  When a program is linked with a library, whether statically or using\na shared library, the combination of the two is legally speaking a\ncombined work, a derivative of the original library.  The ordinary\nGeneral Public License therefore permits such linking only if the\nentire combination fits its criteria of freedom.  The Lesser General\nPublic License permits more lax criteria for linking other code with\nthe library.\n\n  We call this license the \"Lesser\" General Public License because it\ndoes Less to protect the user's freedom than the ordinary General\nPublic License.  It also provides other free software developers Less\nof an advantage over competing non-free programs.  These disadvantages\nare the reason we use the ordinary General Public License for many\nlibraries.  However, the Lesser license provides advantages in certain\nspecial circumstances.\n\n  For example, on rare occasions, there may be a special need to\nencourage the widest possible use of a certain library, so that it becomes\na de-facto standard.  To achieve this, non-free programs must be\nallowed to use the library.  A more frequent case is that a free\nlibrary does the same job as widely used non-free libraries.  In this\ncase, there is little to gain by limiting the free library to free\nsoftware only, so we use the Lesser General Public License.\n\n  In other cases, permission to use a particular library in non-free\nprograms enables a greater number of people to use a large body of\nfree software.  For example, permission to use the GNU C Library in\nnon-free programs enables many more people to use the whole GNU\noperating system, as well as its variant, the GNU/Linux operating\nsystem.\n\n  Although the Lesser General Public License is Less protective of the\nusers' freedom, it does ensure that the user of a program that is\nlinked with the Library has the freedom and the wherewithal to run\nthat program using a modified version of the Library.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.  Pay close attention to the difference between a\n\"work based on the library\" and a \"work that uses the library\".  The\nformer contains code derived from the library, whereas the latter must\nbe combined with the library in order to run.\n\f\n\t\t  GNU LESSER GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any software library or other\nprogram which contains a notice placed by the copyright holder or\nother authorized party saying it may be distributed under the terms of\nthis Lesser General Public License (also called \"this License\").\nEach licensee is addressed as \"you\".\n\n  A \"library\" means a collection of software functions and/or data\nprepared so as to be conveniently linked with application programs\n(which use some of those functions and data) to form executables.\n\n  The \"Library\", below, refers to any such software library or work\nwhich has been distributed under these terms.  A \"work based on the\nLibrary\" means either the Library or any derivative work under\ncopyright law: that is to say, a work containing the Library or a\nportion of it, either verbatim or with modifications and/or translated\nstraightforwardly into another language.  (Hereinafter, translation is\nincluded without limitation in the term \"modification\".)\n\n  \"Source code\" for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control compilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning a program using the Library is not restricted, and output from\nsuch a program is covered only if its contents constitute a work based\non the Library (independent of the use of the Library in a tool for\nwriting it).  Whether that is true depends on what the Library does\nand what the program that uses the Library does.\n\n  1. You may copy and distribute verbatim copies of the Library's\ncomplete source code as you receive it, in any medium, provided that\nyou conspicuously and appropriately publish on each copy an\nappropriate copyright notice and disclaimer of warranty; keep intact\nall the notices that refer to this License and to the absence of any\nwarranty; and distribute a copy of this License along with the\nLibrary.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\f\n  2. You may modify your copy or copies of the Library or any portion\nof it, thus forming a work based on the Library, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) The modified work must itself be a software library.\n\n    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n    table of data to be supplied by an application program that uses\n    the facility, other than as an argument passed when the facility\n    is invoked, then you must make a good faith effort to ensure that,\n    in the event an application does not supply such function or\n    table, the facility still operates, and performs whatever part of\n    its purpose remains meaningful.\n\n    (For example, a function in a library to compute square roots has\n    a purpose that is entirely well-defined independent of the\n    application.  Therefore, Subsection 2d requires that any\n    application-supplied function or table used by this function must\n    be optional: if the application does not supply it, the square\n    root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Library,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Library, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote\nit.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\nwith the Library (or with a work based on the Library) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may opt to apply the terms of the ordinary GNU General Public\nLicense instead of this License to a given copy of the Library.  To do\nthis, you must alter all the notices that refer to this License, so\nthat they refer to the ordinary GNU General Public License, version 2,\ninstead of to this License.  (If a newer version than version 2 of the\nordinary GNU General Public License has appeared, then you can specify\nthat version instead if you wish.)  Do not make any other change in\nthese notices.\n\f\n  Once this change is made in a given copy, it is irreversible for\nthat copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\nderivative of it, under Section 2) in object code or executable form\nunder the terms of Sections 1 and 2 above provided that you accompany\nit with the complete corresponding machine-readable source code, which\nmust be distributed under the terms of Sections 1 and 2 above on a\nmedium customarily used for software interchange.\n\n  If distribution of object code is made by offering access to copy\nfrom a designated place, then offering equivalent access to copy the\nsource code from the same place satisfies the requirement to\ndistribute the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  5. A program that contains no derivative of any portion of the\nLibrary, but is designed to work with the Library by being compiled or\nlinked with it, is called a \"work that uses the Library\".  Such a\nwork, in isolation, is not a derivative work of the Library, and\ntherefore falls outside the scope of this License.\n\n  However, linking a \"work that uses the Library\" with the Library\ncreates an executable that is a derivative of the Library (because it\ncontains portions of the Library), rather than a \"work that uses the\nlibrary\".  The executable is therefore covered by this License.\nSection 6 states terms for distribution of such executables.\n\n  When a \"work that uses the Library\" uses material from a header file\nthat is part of the Library, the object code for the work may be a\nderivative work of the Library even though the source code is not.\nWhether this is true is especially significant if the work can be\nlinked without the Library, or if the work is itself a library.  The\nthreshold for this to be true is not precisely defined by law.\n\n  If such an object file uses only numerical parameters, data\nstructure layouts and accessors, and small macros and small inline\nfunctions (ten lines or less in length), then the use of the object\nfile is unrestricted, regardless of whether it is legally a derivative\nwork.  (Executables containing this object code plus portions of the\nLibrary will still fall under Section 6.)\n\n  Otherwise, if the work is a derivative of the Library, you may\ndistribute the object code for the work under the terms of Section 6.\nAny executables containing that work also fall under Section 6,\nwhether or not they are linked directly with the Library itself.\n\f\n  6. As an exception to the Sections above, you may also combine or\nlink a \"work that uses the Library\" with the Library to produce a\nwork containing portions of the Library, and distribute that work\nunder terms of your choice, provided that the terms permit\nmodification of the work for the customer's own use and reverse\nengineering for debugging such modifications.\n\n  You must give prominent notice with each copy of the work that the\nLibrary is used in it and that the Library and its use are covered by\nthis License.  You must supply a copy of this License.  If the work\nduring execution displays copyright notices, you must include the\ncopyright notice for the Library among them, as well as a reference\ndirecting the user to the copy of this License.  Also, you must do one\nof these things:\n\n    a) Accompany the work with the complete corresponding\n    machine-readable source code for the Library including whatever\n    changes were used in the work (which must be distributed under\n    Sections 1 and 2 above); and, if the work is an executable linked\n    with the Library, with the complete machine-readable \"work that\n    uses the Library\", as object code and/or source code, so that the\n    user can modify the Library and then relink to produce a modified\n    executable containing the modified Library.  (It is understood\n    that the user who changes the contents of definitions files in the\n    Library will not necessarily be able to recompile the application\n    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n    the user installs one, as long as the modified version is\n    interface-compatible with the version that the work was made with.\n\n    c) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n    d) If distribution of the work is made by offering access to copy\n    from a designated place, offer equivalent access to copy the above\n    specified materials from the same place.\n\n    e) Verify that the user has already received a copy of these\n    materials or that you have already sent this user a copy.\n\n  For an executable, the required form of the \"work that uses the\nLibrary\" must include any data and utility programs needed for\nreproducing the executable from it.  However, as a special exception,\nthe materials to be distributed need not include anything that is\nnormally distributed (in either source or binary form) with the major\ncomponents (compiler, kernel, and so on) of the operating system on\nwhich the executable runs, unless that component itself accompanies\nthe executable.\n\n  It may happen that this requirement contradicts the license\nrestrictions of other proprietary libraries that do not normally\naccompany the operating system.  Such a contradiction means you cannot\nuse both them and the Library together in an executable that you\ndistribute.\n\f\n  7. You may place library facilities that are a work based on the\nLibrary side-by-side in a single library together with other library\nfacilities not covered by this License, and distribute such a combined\nlibrary, provided that the separate distribution of the work based on\nthe Library and of the other library facilities is otherwise\npermitted, and provided that you do these two things:\n\n    a) Accompany the combined library with a copy of the same work\n    based on the Library, uncombined with any other library\n    facilities.  This must be distributed under the terms of the\n    Sections above.\n\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\nattempt otherwise to copy, modify, sublicense, link with, or\ndistribute the Library is void, and will automatically terminate your\nrights under this License.  However, parties who have received copies,\nor rights, from you under this License will not have their licenses\nterminated so long as such parties remain in full compliance.\n\n  9. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Library or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Library (or any work based on the\nLibrary), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties with\nthis License.\n\f\n  11. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any\nparticular circumstance, the balance of the section is intended to apply,\nand the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  12. If the distribution and/or use of the Library is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Library under this License may add\nan explicit geographical distribution limitation excluding those countries,\nso that distribution is permitted only in or among countries not thus\nexcluded.  In such case, this License incorporates the limitation as if\nwritten in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Lesser General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Library\nspecifies a version number of this License which applies to it and\n\"any later version\", you have the option of following the terms and\nconditions either of that version or of any later version published by\nthe Free Software Foundation.  If the Library does not specify a\nlicense version number, you may choose any version ever published by\nthe Free Software Foundation.\n\f\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\nSoftware Foundation; we sometimes make exceptions for this.  Our\ndecision will be guided by the two goals of preserving the free status\nof all derivatives of our free software and of promoting the sharing\nand reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO\nWARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\nEXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\nOTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY\nKIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\nLIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\nTHE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\nWRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\nAND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU\nFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\nCONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\nLIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\nRENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\nSUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\f\n"
        },
        {
          "name": "license.txt",
          "type": "blob",
          "size": 26.40625,
          "content": "Dr. Memory: the memory debugger\n\n===========================================================================\nPrimary license: LGPL\n\nAll of Dr. Memory except certain portions called out in subsequent\nsections on this page is licensed under the following LGPL license:\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation;\nversion 2.1 of the License, and no later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\nLibrary General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\n\n\t\t  GNU LESSER GENERAL PUBLIC LICENSE\n\t\t       Version 2.1, February 1999\n\n Copyright (C) 1991, 1999 Free Software Foundation, Inc.\n 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts\n as the successor of the GNU Library Public License, version 2, hence\n the version number 2.1.]\n\n\t\t\t    Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicenses are intended to guarantee your freedom to share and change\nfree software--to make sure the software is free for all its users.\n\n  This license, the Lesser General Public License, applies to some\nspecially designated software packages--typically libraries--of the\nFree Software Foundation and other authors who decide to use it.  You\ncan use it too, but we suggest you first think carefully about whether\nthis license or the ordinary General Public License is the better\nstrategy to use in any particular case, based on the explanations below.\n\n  When we speak of free software, we are referring to freedom of use,\nnot price.  Our General Public Licenses are designed to make sure that\nyou have the freedom to distribute copies of free software (and charge\nfor this service if you wish); that you receive source code or can get\nit if you want it; that you can change the software and use pieces of\nit in new free programs; and that you are informed that you can do\nthese things.\n\n  To protect your rights, we need to make restrictions that forbid\ndistributors to deny you these rights or to ask you to surrender these\nrights.  These restrictions translate to certain responsibilities for\nyou if you distribute copies of the library or if you modify it.\n\n  For example, if you distribute copies of the library, whether gratis\nor for a fee, you must give the recipients all the rights that we gave\nyou.  You must make sure that they, too, receive or can get the source\ncode.  If you link other code with the library, you must provide\ncomplete object files to the recipients, so that they can relink them\nwith the library after making changes to the library and recompiling\nit.  And you must show them these terms so they know their rights.\n\n  We protect your rights with a two-step method: (1) we copyright the\nlibrary, and (2) we offer you this license, which gives you legal\npermission to copy, distribute and/or modify the library.\n\n  To protect each distributor, we want to make it very clear that\nthere is no warranty for the free library.  Also, if the library is\nmodified by someone else and passed on, the recipients should know\nthat what they have is not the original version, so that the original\nauthor's reputation will not be affected by problems that might be\nintroduced by others.\n\f\n  Finally, software patents pose a constant threat to the existence of\nany free program.  We wish to make sure that a company cannot\neffectively restrict the users of a free program by obtaining a\nrestrictive license from a patent holder.  Therefore, we insist that\nany patent license obtained for a version of the library must be\nconsistent with the full freedom of use specified in this license.\n\n  Most GNU software, including some libraries, is covered by the\nordinary GNU General Public License.  This license, the GNU Lesser\nGeneral Public License, applies to certain designated libraries, and\nis quite different from the ordinary General Public License.  We use\nthis license for certain libraries in order to permit linking those\nlibraries into non-free programs.\n\n  When a program is linked with a library, whether statically or using\na shared library, the combination of the two is legally speaking a\ncombined work, a derivative of the original library.  The ordinary\nGeneral Public License therefore permits such linking only if the\nentire combination fits its criteria of freedom.  The Lesser General\nPublic License permits more lax criteria for linking other code with\nthe library.\n\n  We call this license the \"Lesser\" General Public License because it\ndoes Less to protect the user's freedom than the ordinary General\nPublic License.  It also provides other free software developers Less\nof an advantage over competing non-free programs.  These disadvantages\nare the reason we use the ordinary General Public License for many\nlibraries.  However, the Lesser license provides advantages in certain\nspecial circumstances.\n\n  For example, on rare occasions, there may be a special need to\nencourage the widest possible use of a certain library, so that it becomes\na de-facto standard.  To achieve this, non-free programs must be\nallowed to use the library.  A more frequent case is that a free\nlibrary does the same job as widely used non-free libraries.  In this\ncase, there is little to gain by limiting the free library to free\nsoftware only, so we use the Lesser General Public License.\n\n  In other cases, permission to use a particular library in non-free\nprograms enables a greater number of people to use a large body of\nfree software.  For example, permission to use the GNU C Library in\nnon-free programs enables many more people to use the whole GNU\noperating system, as well as its variant, the GNU/Linux operating\nsystem.\n\n  Although the Lesser General Public License is Less protective of the\nusers' freedom, it does ensure that the user of a program that is\nlinked with the Library has the freedom and the wherewithal to run\nthat program using a modified version of the Library.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.  Pay close attention to the difference between a\n\"work based on the library\" and a \"work that uses the library\".  The\nformer contains code derived from the library, whereas the latter must\nbe combined with the library in order to run.\n\f\n\t\t  GNU LESSER GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any software library or other\nprogram which contains a notice placed by the copyright holder or\nother authorized party saying it may be distributed under the terms of\nthis Lesser General Public License (also called \"this License\").\nEach licensee is addressed as \"you\".\n\n  A \"library\" means a collection of software functions and/or data\nprepared so as to be conveniently linked with application programs\n(which use some of those functions and data) to form executables.\n\n  The \"Library\", below, refers to any such software library or work\nwhich has been distributed under these terms.  A \"work based on the\nLibrary\" means either the Library or any derivative work under\ncopyright law: that is to say, a work containing the Library or a\nportion of it, either verbatim or with modifications and/or translated\nstraightforwardly into another language.  (Hereinafter, translation is\nincluded without limitation in the term \"modification\".)\n\n  \"Source code\" for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control compilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning a program using the Library is not restricted, and output from\nsuch a program is covered only if its contents constitute a work based\non the Library (independent of the use of the Library in a tool for\nwriting it).  Whether that is true depends on what the Library does\nand what the program that uses the Library does.\n\n  1. You may copy and distribute verbatim copies of the Library's\ncomplete source code as you receive it, in any medium, provided that\nyou conspicuously and appropriately publish on each copy an\nappropriate copyright notice and disclaimer of warranty; keep intact\nall the notices that refer to this License and to the absence of any\nwarranty; and distribute a copy of this License along with the\nLibrary.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\f\n  2. You may modify your copy or copies of the Library or any portion\nof it, thus forming a work based on the Library, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) The modified work must itself be a software library.\n\n    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n    table of data to be supplied by an application program that uses\n    the facility, other than as an argument passed when the facility\n    is invoked, then you must make a good faith effort to ensure that,\n    in the event an application does not supply such function or\n    table, the facility still operates, and performs whatever part of\n    its purpose remains meaningful.\n\n    (For example, a function in a library to compute square roots has\n    a purpose that is entirely well-defined independent of the\n    application.  Therefore, Subsection 2d requires that any\n    application-supplied function or table used by this function must\n    be optional: if the application does not supply it, the square\n    root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Library,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Library, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote\nit.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\nwith the Library (or with a work based on the Library) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may opt to apply the terms of the ordinary GNU General Public\nLicense instead of this License to a given copy of the Library.  To do\nthis, you must alter all the notices that refer to this License, so\nthat they refer to the ordinary GNU General Public License, version 2,\ninstead of to this License.  (If a newer version than version 2 of the\nordinary GNU General Public License has appeared, then you can specify\nthat version instead if you wish.)  Do not make any other change in\nthese notices.\n\f\n  Once this change is made in a given copy, it is irreversible for\nthat copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\nderivative of it, under Section 2) in object code or executable form\nunder the terms of Sections 1 and 2 above provided that you accompany\nit with the complete corresponding machine-readable source code, which\nmust be distributed under the terms of Sections 1 and 2 above on a\nmedium customarily used for software interchange.\n\n  If distribution of object code is made by offering access to copy\nfrom a designated place, then offering equivalent access to copy the\nsource code from the same place satisfies the requirement to\ndistribute the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  5. A program that contains no derivative of any portion of the\nLibrary, but is designed to work with the Library by being compiled or\nlinked with it, is called a \"work that uses the Library\".  Such a\nwork, in isolation, is not a derivative work of the Library, and\ntherefore falls outside the scope of this License.\n\n  However, linking a \"work that uses the Library\" with the Library\ncreates an executable that is a derivative of the Library (because it\ncontains portions of the Library), rather than a \"work that uses the\nlibrary\".  The executable is therefore covered by this License.\nSection 6 states terms for distribution of such executables.\n\n  When a \"work that uses the Library\" uses material from a header file\nthat is part of the Library, the object code for the work may be a\nderivative work of the Library even though the source code is not.\nWhether this is true is especially significant if the work can be\nlinked without the Library, or if the work is itself a library.  The\nthreshold for this to be true is not precisely defined by law.\n\n  If such an object file uses only numerical parameters, data\nstructure layouts and accessors, and small macros and small inline\nfunctions (ten lines or less in length), then the use of the object\nfile is unrestricted, regardless of whether it is legally a derivative\nwork.  (Executables containing this object code plus portions of the\nLibrary will still fall under Section 6.)\n\n  Otherwise, if the work is a derivative of the Library, you may\ndistribute the object code for the work under the terms of Section 6.\nAny executables containing that work also fall under Section 6,\nwhether or not they are linked directly with the Library itself.\n\f\n  6. As an exception to the Sections above, you may also combine or\nlink a \"work that uses the Library\" with the Library to produce a\nwork containing portions of the Library, and distribute that work\nunder terms of your choice, provided that the terms permit\nmodification of the work for the customer's own use and reverse\nengineering for debugging such modifications.\n\n  You must give prominent notice with each copy of the work that the\nLibrary is used in it and that the Library and its use are covered by\nthis License.  You must supply a copy of this License.  If the work\nduring execution displays copyright notices, you must include the\ncopyright notice for the Library among them, as well as a reference\ndirecting the user to the copy of this License.  Also, you must do one\nof these things:\n\n    a) Accompany the work with the complete corresponding\n    machine-readable source code for the Library including whatever\n    changes were used in the work (which must be distributed under\n    Sections 1 and 2 above); and, if the work is an executable linked\n    with the Library, with the complete machine-readable \"work that\n    uses the Library\", as object code and/or source code, so that the\n    user can modify the Library and then relink to produce a modified\n    executable containing the modified Library.  (It is understood\n    that the user who changes the contents of definitions files in the\n    Library will not necessarily be able to recompile the application\n    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n    the user installs one, as long as the modified version is\n    interface-compatible with the version that the work was made with.\n\n    c) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n    d) If distribution of the work is made by offering access to copy\n    from a designated place, offer equivalent access to copy the above\n    specified materials from the same place.\n\n    e) Verify that the user has already received a copy of these\n    materials or that you have already sent this user a copy.\n\n  For an executable, the required form of the \"work that uses the\nLibrary\" must include any data and utility programs needed for\nreproducing the executable from it.  However, as a special exception,\nthe materials to be distributed need not include anything that is\nnormally distributed (in either source or binary form) with the major\ncomponents (compiler, kernel, and so on) of the operating system on\nwhich the executable runs, unless that component itself accompanies\nthe executable.\n\n  It may happen that this requirement contradicts the license\nrestrictions of other proprietary libraries that do not normally\naccompany the operating system.  Such a contradiction means you cannot\nuse both them and the Library together in an executable that you\ndistribute.\n\f\n  7. You may place library facilities that are a work based on the\nLibrary side-by-side in a single library together with other library\nfacilities not covered by this License, and distribute such a combined\nlibrary, provided that the separate distribution of the work based on\nthe Library and of the other library facilities is otherwise\npermitted, and provided that you do these two things:\n\n    a) Accompany the combined library with a copy of the same work\n    based on the Library, uncombined with any other library\n    facilities.  This must be distributed under the terms of the\n    Sections above.\n\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\nattempt otherwise to copy, modify, sublicense, link with, or\ndistribute the Library is void, and will automatically terminate your\nrights under this License.  However, parties who have received copies,\nor rights, from you under this License will not have their licenses\nterminated so long as such parties remain in full compliance.\n\n  9. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Library or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Library (or any work based on the\nLibrary), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties with\nthis License.\n\f\n  11. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any\nparticular circumstance, the balance of the section is intended to apply,\nand the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  12. If the distribution and/or use of the Library is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Library under this License may add\nan explicit geographical distribution limitation excluding those countries,\nso that distribution is permitted only in or among countries not thus\nexcluded.  In such case, this License incorporates the limitation as if\nwritten in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Lesser General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Library\nspecifies a version number of this License which applies to it and\n\"any later version\", you have the option of following the terms and\nconditions either of that version or of any later version published by\nthe Free Software Foundation.  If the Library does not specify a\nlicense version number, you may choose any version ever published by\nthe Free Software Foundation.\n\f\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\nSoftware Foundation; we sometimes make exceptions for this.  Our\ndecision will be guided by the two goals of preserving the free status\nof all derivatives of our free software and of promoting the sharing\nand reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO\nWARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\nEXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\nOTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY\nKIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\nLIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\nTHE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\nWRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\nAND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU\nFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\nCONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\nLIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\nRENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\nSUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\f\n\n===========================================================================\nBSD License\n\nThe drfuzz and drltrace modules are separately licensed under the following BSD license:\n\nCopyright (c) 2015-2017 Google, Inc. licensed under the terms of the BSD. All other rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice,\n  this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of VMware, Inc. nor the names of its contributors may be\n  used to endorse or promote products derived from this software without\n  specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL VMWARE, INC. OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGE.\n"
        },
        {
          "name": "make",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.cmake",
          "type": "blob",
          "size": 9.7607421875,
          "content": "# **********************************************************\n# Copyright (c) 2010-2024 Google, Inc.  All rights reserved.\n# Copyright (c) 2009-2010 VMware, Inc.  All rights reserved.\n# **********************************************************\n\n# Dr. Memory: the memory debugger\n#\n# This library is free software; you can redistribute it and/or\n# modify it under the terms of the GNU Lesser General Public\n# License as published by the Free Software Foundation;\n# version 2.1 of the License, and no later version.\n#\n# This library is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n# Library General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public\n# License along with this library; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\n# Combines debug and release DrMemory builds into a single package.\n# Uses ctest command mode.\n#\n# Uses same base as DynamoRIO's make/package.cmake.\n#\n# Invoke like this: \"ctest -S package.cmake,dr=<path-to-DynamoRIO>\\;build=<build#>\"\n\ncmake_minimum_required(VERSION 3.7)\n\n# set from an including package script\nif (NOT DEFINED arg_sub_package)\n  set(arg_sub_package OFF) # build DrMem as a sub-package of containing script\n  set(arg_sub_script \"\")   # path to this script file\nendif ()\n\n# arguments are a ;-separated list (must escape as \\; from ctest_run_script())\nset(arg_build \"\")      # build #\nset(arg_DR_dir \"\")     # DynamoRIO dir: else builds from local sources\n# optional args:\nset(arg_ubuild \"\")     # unique build #\nset(arg_version \"\")    # version #\nset(arg_outdir \".\")    # directory in which to place deliverables\nset(arg_cacheappend \"\")# string to append to every build's cache\nset(arg_drmem_only OFF) # do not include Dr. Heapstat\n# also takes args parsed by runsuite_common_pre.cmake, in particular:\nset(arg_preload \"\")    # cmake file to include prior to each 32-bit build\nset(arg_preload64 \"\")  # cmake file to include prior to each 64-bit build\nset(arg_use_nmake OFF) # use nmake even if gnu make is present\nset(arg_cpackappend \"\")# string to append to CPackConfig.cmake before packaging\nset(arg_travis OFF)\nset(arg_copy_docs OFF)\n\nforeach (arg ${CTEST_SCRIPT_ARG})\n  if (${arg} MATCHES \"^build=\")\n    string(REGEX REPLACE \"^build=\" \"\" arg_build \"${arg}\")\n  endif ()\n  # alternate name to distinguish from containing DR build #\n  if (${arg} MATCHES \"^tool_build=\")\n    string(REGEX REPLACE \"^tool_build=\" \"\" arg_build \"${arg}\")\n  endif ()\n  if (${arg} MATCHES \"^ubuild=\")\n    string(REGEX REPLACE \"^ubuild=\" \"\" arg_ubuild \"${arg}\")\n  endif ()\n  if (${arg} MATCHES \"^dr=\")\n    string(REGEX REPLACE \"^dr=\" \"\" arg_DR_dir \"${arg}\")\n  endif ()\n  if (${arg} MATCHES \"^DR=\") # support both caps and lowercase\n    string(REGEX REPLACE \"^DR=\" \"\" arg_DR_dir \"${arg}\")\n  endif ()\n  if (${arg} MATCHES \"^version=\")\n    string(REGEX REPLACE \"^version=\" \"\" arg_version \"${arg}\")\n  endif ()\n  if (${arg} MATCHES \"^outdir=\")\n    string(REGEX REPLACE \"^outdir=\" \"\" arg_outdir \"${arg}\")\n  endif ()\n  if (${arg} MATCHES \"^cacheappend=\")\n    # support multiple, appending each time\n    string(REGEX REPLACE \"^cacheappend=\" \"\" entry \"${arg}\")\n    set(arg_cacheappend \"${arg_cacheappend}\\n${entry}\")\n  endif ()\n  if (${arg} MATCHES \"^cpackappend=\")\n    string(REGEX REPLACE \"^cpackappend=\" \"\" arg_cpackappend \"${arg}\")\n  endif ()\n  if (${arg} MATCHES \"^drmem_only\" OR\n      ${arg} MATCHES \"^drmemory_only\")\n    set(arg_drmem_only ON)\n  endif ()\n  if (${arg} STREQUAL \"travis\")\n    set(arg_travis ON)\n  endif ()\n  if (${arg} MATCHES \"^copy_docs\")\n    set(arg_copy_docs ON)\n  endif ()\nendforeach (arg)\n\nif (\"${arg_build}\" STREQUAL \"\")\n  message(FATAL_ERROR \"build number not set: pass as build= arg\")\nendif()\nif (\"${arg_ubuild}\" STREQUAL \"\")\n  set(arg_ubuild \"${arg_build}\")\nendif()\nif (NOT \"${arg_DR_dir}\" STREQUAL \"\")\n  if (NOT EXISTS \"${arg_DR_dir}\")\n    message(FATAL_ERROR \"invalid DynamoRIO dr= arg\")\n  endif ()\n  set(DR_entry \"DynamoRIO_DIR:PATH=${arg_DR_dir}\")\n  set(runsuite_include_path \"${arg_DR_dir}\")\nelse ()\n  set(DR_entry \"\")\n  # include from source instead of exports dir\n  set(runsuite_include_path \"${CTEST_SCRIPT_DIRECTORY}/dynamorio/suite\")\nendif()\n\nif (arg_sub_package)\n  set(sub_entry \"BUILDING_SUB_PACKAGE:BOOL=ON\")\n  get_filename_component(CTEST_SOURCE_DIRECTORY \"${arg_sub_script}\" PATH)\nelse ()\n  set(sub_entry \"\")\n  set(CTEST_PROJECT_NAME \"DrMemory\")\n  set(cpack_project_name \"DrMemory\")\n  set(run_tests OFF)\n  set(CTEST_SOURCE_DIRECTORY \"${CTEST_SCRIPT_DIRECTORY}\")\n  include(\"${runsuite_include_path}/runsuite_common_pre.cmake\")\nendif ()\n\nif (APPLE)\n  # Macs no longer support 32-bit at all.\n  set(arg_64_only ON)\nendif ()\n\n# i#1099: be sure to set BUILDING_PACKAGE\nset(base_cache \"\n  ${DR_entry}\n  TOOL_BUILD_NUMBER:STRING=${arg_build}\n  UNIQUE_BUILD_NUMBER:STRING=${arg_ubuild}\n  BUILD_TOOL_TESTS:BOOL=OFF\n  BUILDING_PACKAGE:BOOL=ON\n  DISABLE_ZLIB:BOOL=ON\n  ${sub_entry}\n  ${arg_cacheappend}\n  ${base_cache}\n  \")\n\n# version is optional\nif (arg_version)\n  set(base_cache \"${base_cache}\n    TOOL_VERSION_NUMBER:STRING=${arg_version}\")\nendif (arg_version)\n\n# the build dir names here must match those in tests/runsuite.cmake to\n# support running ctest using gobuild-packaged builds (PR 518715, PR 544430).\n# perhaps the two scripts should be further merged.\nif (\"${arg_cacheappend}\" MATCHES \"VMKERNEL:BOOL=ON\")\n  set(name_sfx \"vmk-\")\nelse ()\n  set(name_sfx \"\")\nendif ()\n\nif (NOT arg_drmem_only)\n  if (NOT arg_64_only)\n    testbuild_ex(\"drheapstat-${name_sfx}release-32\" OFF \"\n      TOOL_DR_HEAPSTAT:BOOL=ON\n      CMAKE_BUILD_TYPE:STRING=Release\n      \" OFF ON \"\")\n    testbuild_ex(\"drheapstat-${name_sfx}debug-32\" OFF \"\n      TOOL_DR_HEAPSTAT:BOOL=ON\n      CMAKE_BUILD_TYPE:STRING=Debug\n      \" OFF ON \"\")\n  endif ()\n  testbuild_ex(\"drheapstat-${name_sfx}release-64\" ON \"\n    TOOL_DR_HEAPSTAT:BOOL=ON\n    CMAKE_BUILD_TYPE:STRING=Release\n    \" OFF ON \"\")\n  testbuild_ex(\"drheapstat-${name_sfx}debug-64\" ON \"\n    TOOL_DR_HEAPSTAT:BOOL=ON\n    CMAKE_BUILD_TYPE:STRING=Debug\n    \" OFF ON \"\")\nendif (NOT arg_drmem_only)\nif (NOT arg_32_only)\n  testbuild_ex(\"drmemory-${name_sfx}release-64\" ON \"\n    CMAKE_BUILD_TYPE:STRING=Release\n    \" OFF ON \"\")\n  testbuild_ex(\"drmemory-${name_sfx}debug-64\" ON \"\n    CMAKE_BUILD_TYPE:STRING=Debug\n    \" OFF ON \"\")\nendif (NOT arg_32_only)\nif (NOT arg_64_only)\n  # 32-bit last, to match DR for embedded packaging\n  testbuild_ex(\"drmemory-${name_sfx}release-32\" OFF \"\n    CMAKE_BUILD_TYPE:STRING=Release\n    \" OFF ON \"\")\n  testbuild_ex(\"drmemory-${name_sfx}debug-32\" OFF \"\n    CMAKE_BUILD_TYPE:STRING=Debug\n    \" OFF ON \"\")\nendif ()\n\nif (arg_cpackappend)\n  # ${last_package_build_dir} is a global var set in parent scope by\n  # testbuild_ex to communicate with runsuite_common_post.  We use it to access\n  # the CPackConfig.cmake file.\n  file(APPEND \"${last_package_build_dir}/CPackConfig.cmake\"\n    \"\\n${arg_cpackappend}\\n\")\nendif ()\n\nif (NOT arg_sub_package)\n  set(build_package ON)\n  # Some packagers request an official source tarball, so we create one (i#1287).\n  # However, this fails on Appveyor for as-yet-undiagnosed reasons (i#2255),\n  # and Github supplies its own source tarball, so we disable there.\n  if (NOT arg_travis)\n    set(build_source_package ON)\n  endif ()\n  include(\"${runsuite_include_path}/runsuite_common_post.cmake\")\n\n  # copy the final archive into cur dir\n  # \"cmake -E copy\" only takes one file so use 'z' => .tar.gz or .zip\n  file(GLOB results ${last_build_dir}/DrMemory-*)\n  foreach (f ${results})\n    execute_process(COMMAND ${CMAKE_COMMAND} -E copy ${f} \"${arg_outdir}\")\n  endforeach (f)\n\n  if (arg_copy_docs)\n    # Prepare for copying the documentation to our Github Pages site by placing it\n    # in a single fixed-name location with a .nojekyll file.\n    message(\"Copying standalone documentation into ${arg_outdir}/html\")\n    message(\"Looking for ${last_package_build_dir}/_CPack_Packages/*/*/DrMemory-*/drmemory/docs/html\")\n    file(GLOB allhtml \"${last_package_build_dir}/_CPack_Packages/*/*/DrMemory-*/drmemory/docs/html\")\n    if (NOT allhtml)\n      message(FATAL_ERROR \"failed to find html docs dir\")\n    endif ()\n    # If there's a source package we'll have multiple.  Just take the first one.\n    list(GET allhtml 0 html)\n    if (EXISTS \"${html}\")\n      execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory \"${arg_outdir}/html\")\n      execute_process(COMMAND\n        ${CMAKE_COMMAND} -E copy_directory ${html} \"${arg_outdir}/html\")\n      # Create a .nojekyll file so Github Pages will display this as raw html.\n      execute_process(COMMAND ${CMAKE_COMMAND} -E touch \"${arg_outdir}/html/.nojekyll\")\n      message(\"Successully copied standalone docs\")\n    else ()\n      message(FATAL_ERROR \"failed to find html docs\")\n    endif ()\n\n    message(\"Copying embedded documentation into ${arg_outdir}/html_embed\")\n    message(\"Looking for ${last_package_build_dir}/_CPack_Packages/*/*/DrMemory-*/drmemory/docs_embed/html\")\n    file(GLOB allhtml \"${last_package_build_dir}/_CPack_Packages/*/*/DrMemory-*/drmemory/docs_embed/html\")\n    if (NOT allhtml)\n      message(FATAL_ERROR \"failed to find embedded html docs dir\")\n    endif ()\n    # If there's a source package we'll have multiple.  Just take the first one.\n    list(GET allhtml 0 html)\n    if (EXISTS \"${html}\")\n      execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory\n        \"${arg_outdir}/html_embed\")\n      execute_process(COMMAND\n        ${CMAKE_COMMAND} -E copy_directory ${html} \"${arg_outdir}/html_embed\")\n      # Create a .nojekyll file so Github Pages will display this as raw html.\n      execute_process(COMMAND ${CMAKE_COMMAND} -E touch\n        \"${arg_outdir}/html_embed/.nojekyll\")\n      message(\"Successully copied embedded docs\")\n    else ()\n      message(FATAL_ERROR \"failed to find embedded html docs\")\n    endif ()\n  endif ()\nendif ()\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "umbra",
          "type": "tree",
          "content": null
        },
        {
          "name": "wininc",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}