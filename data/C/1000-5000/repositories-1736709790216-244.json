{
  "metadata": {
    "timestamp": 1736709790216,
    "page": 244,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ibireme/yyjson",
      "stars": 3193,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0234375,
          "content": "doc/** linguist-vendored"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0791015625,
          "content": "# CMake\n/build\nCMakeLists.txt.user\nCMakeCache.txt\nCMakeFiles\nCMakeScripts\nTesting\nMakefile\ncmake_install.cmake\ninstall_manifest.txt\ncompile_commands.json\nCTestTestfile.cmake\n_deps\n\n# GCC coverage testing tool files\n*.gcno\n*.gcda\n*.gcov\n\n# VSCode\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n!.vscode/extensions.json\n.cache\n\n# JetBrains\n.idea\n\n# CLion\ncmake-build-*/\n\n# Xcode\n/xcode\n.build/\nxcuserdata/\n*.xcscmblueprint\n*.xccheckout\nDerivedData/\n*.moved-aside\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\n*.hmap\n*.ipa\n*.dSYM.zip\n*.dSYM\nCarthage/Build/\nfastlane/report.xml\nfastlane/Preview.html\nfastlane/screenshots/**/*.png\nfastlane/test_output\niOSInjectionProject/\n\n# Prerequisites\n*.d\n\n# Object files\n*.o\n*.ko\n*.obj\n*.elf\n\n# Linker output\n*.ilk\n*.map\n*.exp\n\n# Libraries\n*.lib\n*.a\n*.la\n*.lo\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n*.i*86\n*.x86_64\n*.hex\n\n# Debug files\n*.dSYM/\n*.su\n*.idb\n*.pdb\n\n# OS\n.DS_Store\n.Spotlight-V100\n.Trashes\nThumbs.db\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 6.8056640625,
          "content": "# Changelog\nAll notable changes to this project will be documented in this file.\n\n\n## Unreleased\n#### Added\n- Add `YYJSON_WRITE_FP_TO_FLOAT` flag to write real numbers using single-precison.\n- Add `YYJSON_WRITE_FP_TO_FIXED(prec)` flag to write real numbers using fix-point notation.\n- Add `set_fp_to_float()` and `set_fp_to_fixed()` functions to control the output format of a specific number.\n- Add `set_str_noesc()` function to skip escaping for a specific string during writing.\n\n#### Changed\n- Rewrite the floating-point number to string functions using faster algorithm.\n\n#### Fixed\n- Fix some warnings when directly including yyjson.c: #177\n- Fix missing indent for `YYJSON_TYPE_RAW` in prettify function: #178\n\n\n## 0.10.0 (2024-07-09)\n#### Added\n- Add `yyjson_locate_pos()` function to locate the line and column number for error position: #166\n\n#### Changed\n- Improve error messages for JSON reader: #168\n\n#### Fixed\n- Fix `YYJSON_READ_NUMBER_AS_RAW` not overriding `YYJSON_READ_BIGNUM_AS_RAW` as per documentation: #170\n\n\n## 0.9.0 (2024-04-08)\n#### Added\n- Add `YYJSON_WRITE_NEWLINE_AT_END` flag for JSON writer: #147\n\n#### Changed\n- Add auto-type conversion (uint<->sint) to `yyjson_ptr_get_uint/sint()`: #152\n\n#### Fixed\n- Fix incorrect output in environments lacking native `bool` type support: #161\n\n\n## 0.8.0 (2023-09-13)\n#### Added\n- Add `YYJSON_SUBTYPE_NOESC` subtype to mark strings that do not need to be escaped.\n- Add `YYJSON_DISABLE_UTF8_VALIDATION` flag to allow disable UTF-8 validation at compile-time.\n- Add dynamic allocator API: `yyjson_alc_dyn_new()`, `yyjson_alc_dyn_free()`.\n- Add the missing `yyjson_mut_obj_add_arr/obj()` API: #140\n\n#### Changed\n- Improve the write performance of strings with `YYJSON_SUBTYPE_NOESC`.\n\n#### Fixed\n- Fix clang-16 valgrind fail: #134\n- Fix compile break when both `FAST_FP` and `READER` are disabled\n\n\n## 0.7.0 (2023-05-25)\n#### Added\n- Add `YYJSON_WRITE_PRETTY_TWO_SPACES` option to allow 2 spaces instead of 4 spaces when writing pretty JSON: #99\n- Add `YYJSON_READ_BIGNUM_AS_RAW` option to read big numbers as raw strings: #124\n- Add `yyjson_get_num()` function to convert and return any number value as `double`: #108\n- Add support for Loongarch: #112\n- Add functions to get type-specific values specified by JSON Pointer: #116\n- Add functions to read/write JSON with file pointer `FILE *`: #122\n- Add functions to support modifying memory pool size of `yyjson_mut_doc`.\n- Add convenience functions `iter_with()` for creating iterator.\n- Add functions to modify JSON using JSON Pointer, such as `ptr_set()` and `ptr_remove()`.\n- Add support for JSON Patch (RFC 6902).\n\n#### Changed\n- **BREAKING CHANGE:** Change the allocator's realloc function signature, add `old_size` parameter for custom allocator: #100\n- **BREAKING CHANGE:** Change `yyjson_read_number()` function, add `alc` parameter.\n- **DEPRECATED:** Deprecate `get_pointer()` functions, rename to `ptr_get()`.\n- Improve performance of `yyjson_mut_write()` function.\n\n#### Fixed\n- Fix inaccurate error code for truncated JSON: #103\n\n\n## 0.6.0 (2022-12-12)\n#### Added\n- Add functions to modify the content of a JSON value, such as `yyjson_set_int(yyjson_val *val, int num)`.\n- Add functions to copy from mutable doc to immutable doc.\n- Add functions to support renaming an object's key.\n- Add the `yyjson_read_number()` function to parse numeric strings.\n- Add a placeholder allocator if `yyjson_alc_pool_init()` fails.\n\n#### Fixed\n- Fix quite NaN on MIPS and HPPA arch.\n- Fixed compile error before `GCC 4.5`, which doesn't support empty optional extended asm label.\n- When the built-in floating point conversion is disabled, the `sprintf()` output for floating point numbers is missing a decimal point, for example 123 should be 123.0.\n\n\n## 0.5.1 (2022-06-17)\n#### Fixed\n- Fix run-time error when compiling as cpp and 32-bit (g++-5 -m32 -fPIC) #85\n- Fix incurrect output number format, remove unnecessary digits (e.g. 2.0e34 -> 2e34).\n\n\n## 0.5.0 (2022-05-25)\n#### Added\n- Add LibFuzzer support.\n- Add Doxygen support.\n- Add functions to support serializing a single JSON value.\n- Add `yyjson_mut_doc_mut_copy()`, `yyjson_mut_val_mut_copy()`, `yyjson_mut_merge_patch()` functions for mutable input.\n- Add `yyjson_equals()` and `yyjson_mut_equals()` functions to compare two values.\n- Add `yyjson_mut_obj_remove_key()` and `yyjson_mut_obj_remove_keyn()` functions to simplify key removal.\n- Add `YYJSON_READ_NUMBER_AS_RAW` option and `RAW` type support.\n- Add `YYJSON_READ_ALLOW_INVALID_UNICODE` and `YYJSON_WRITE_ALLOW_INVALID_UNICODE` options to allow invalid unicode.\n\n#### Changed\n- Change `yyjson_mut_obj_remove()` return type from `bool` to `yyjson_mut_val *`.\n- Rewrite string serialization function, validate unicode encoding by default.\n- Rewrite the JSON Pointer implementation, remove internal malloc() calls.\n\n#### Fixed\n- Make the code work correctly with `setlocale()` function and `-ffast-math` flag: #54\n- Fix negative infinity literals read error: #64\n- Fix non null-terminated string write error.\n- Fix incorrect behavior of `YYJSON_DISABLE_NON_STANDARD` flag: #80\n\n\n## 0.4.0 (2021-12-12)\n#### Added\n- Add `YYJSON_WRITE_INF_AND_NAN_AS_NULL` flag for JSON writer.\n- Add `yyjson_merge_patch()` function for JSON Merge-Path API (RFC 7386).\n- Add `yyjson_mut_obj_replace()` and `yyjson_mut_obj_insert()` functions for object modification.\n- Add `yyjson_obj_iter_get()` and `yyjson_mut_obj_iter_get()` functions for faster object search.\n- Add `yyjson_version()` function.\n\n#### Changed\n- Replace `YYJSON_DISABLE_COMMENT_READER` and `YYJSON_DISABLE_INF_AND_NAN_READER` with `YYJSON_DISABLE_NON_STANDARD` compile-time flag.\n- Replace `YYJSON_DISABLE_FP_READER` and `YYJSON_DISABLE_FP_WRITER` with `YYJSON_DISABLE_FAST_FP_CONV` compile-time flag.\n\n#### Fixed\n- Fix compiler warning with `-Wconversion`\n- Fix compiler error for GCC 4.4 (#53) and MSVC 6.0 (#55)\n\n\n## 0.3.0 (2021-05-25)\n#### Added\n- Add `JSON Pointer` support.\n- Add CMake install target.\n\n#### Changed\n- Improve performance for some architectures that don't support unaligned memory access.\n\n#### Fixed\n- Fix some compiler warnings for GCC and Clang.\n- Fix MSVC build error on UWP (uninitialized local variable).\n- Fix stream file reading error on some platforms.\n\n\n## 0.2.0 (2020-12-12)\n#### Added\n- Add swift package manager support.\n\n#### Changed\n- Improve JSON reader performance for gcc.\n- Improve double number reader performance with a fast path.\n- Rewrite double number writer with Schubfach algorithm: #4.\n- Strict UTF-8 validation for JSON reader.\n\n#### Removed\n- Remove `YYJSON_READ_FASTFP` compile-time flag.\n\n#### Fixed\n- Fix a compile error for old version gcc on linux: #7.\n\n\n## 0.1.0 (2020-10-26)\n#### Added\n- Initial release.\n- Add the basic JSON reader and writer (RFC 8259).\n- Add CMake support.\n- Add GitHub CI workflow.\n- Add test code and test data.\n- Add `sanitizer` and `valgrind` memory checker.\n- Add `API` and `DataStructure` documentation.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 20.29296875,
          "content": "# Copyright (C) 2019 Yaoyuan <ibireme@gmail.com>.\n# Released under the MIT License:\n# https://github.com/ibireme/yyjson/blob/master/LICENSE\n\ncmake_minimum_required(VERSION 3.5)\nproject(yyjson VERSION 0.10.0 LANGUAGES C)\nset(YYJSON_SOVERSION 0)\n\n\n\n# ------------------------------------------------------------------------------\n# Build Type\nif (CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)\n    if(NOT CMAKE_BUILD_TYPE)\n        message(STATUS \"No build type selected, default to: Release\")\n        set(CMAKE_BUILD_TYPE Release)\n    endif()\nendif()\n\n\n\n# ------------------------------------------------------------------------------\n# Build Options for tests and docs\noption(YYJSON_BUILD_TESTS \"Build all tests\" OFF)\noption(YYJSON_BUILD_FUZZER \"Build fuzzer\" OFF)\noption(YYJSON_BUILD_MISC \"Build misc\" OFF)\noption(YYJSON_BUILD_DOC \"Build documentation with doxygen\" OFF)\noption(YYJSON_ENABLE_COVERAGE \"Enable code coverage for tests\" OFF)\noption(YYJSON_ENABLE_VALGRIND \"Enable valgrind memory checker for tests\" OFF)\noption(YYJSON_ENABLE_SANITIZE \"Enable sanitizer for tests\" OFF)\noption(YYJSON_ENABLE_FASTMATH \"Enable fast-math for tests\" OFF)\noption(YYJSON_FORCE_32_BIT \"Force 32-bit for tests\" OFF)\n\n\n\n# ------------------------------------------------------------------------------\n# Compilation options, see yyjson.h for more explanation\noption(YYJSON_DISABLE_READER \"Disable JSON reader\" OFF)\noption(YYJSON_DISABLE_WRITER \"Disable JSON writer\" OFF)\noption(YYJSON_DISABLE_UTILS \"Disable JSON Pointer, JSON Patch, JSON Merge Patch\" OFF)\noption(YYJSON_DISABLE_FAST_FP_CONV \"Disable custom floating-point number conversion\" OFF)\noption(YYJSON_DISABLE_NON_STANDARD \"Disable non-standard JSON support\" OFF)\noption(YYJSON_DISABLE_UTF8_VALIDATION \"Disable UTF-8 validation\" OFF)\noption(YYJSON_DISABLE_UNALIGNED_MEMORY_ACCESS \"Disable unaligned memory access explicit\" OFF)\n\nif(YYJSON_DISABLE_READER)\n    add_definitions(-DYYJSON_DISABLE_READER)\nendif()\nif(YYJSON_DISABLE_WRITER)\n    add_definitions(-DYYJSON_DISABLE_WRITER)\nendif()\nif(YYJSON_DISABLE_UTILS)\n    add_definitions(-DYYJSON_DISABLE_UTILS)\nendif()\nif(YYJSON_DISABLE_FAST_FP_CONV)\n    add_definitions(-DYYJSON_DISABLE_FAST_FP_CONV)\nendif()\nif(YYJSON_DISABLE_NON_STANDARD)\n    add_definitions(-DYYJSON_DISABLE_NON_STANDARD)\nendif()\nif(YYJSON_DISABLE_UTF8_VALIDATION)\n    add_definitions(-DYYJSON_DISABLE_UTF8_VALIDATION)\nendif()\nif(YYJSON_DISABLE_UNALIGNED_MEMORY_ACCESS)\n    add_definitions(-DYYJSON_DISABLE_UNALIGNED_MEMORY_ACCESS)\nendif()\n\n\n\n# ------------------------------------------------------------------------------\n# Library\nadd_library(yyjson src/yyjson.h src/yyjson.c)\ntarget_include_directories(yyjson PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>)\nset_target_properties(yyjson PROPERTIES VERSION ${PROJECT_VERSION} SOVERSION ${YYJSON_SOVERSION})\n\n\n\n# ------------------------------------------------------------------------------\n# Project Config\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\")\ninclude(XcodeProperty)\n\nif(XCODE)\n    # Flag string for Xcode property\n    set(YYJSON_FLAGS \"-Wall -Wextra -Werror -pedantic -pedantic-errors\")\n    if(YYJSON_ENABLE_FASTMATH)\n        set(YYJSON_FLAGS \"${YYJSON_FLAGS} -ffast-math\")\n    endif()\n    \n    set_default_xcode_property(yyjson)\n    set_xcode_deployment_version(yyjson \"10.13\" \"12.0\" \"12.0\" \"4.0\")\n\n    set_xcode_property(yyjson GCC_C_LANGUAGE_STANDARD \"c89\")\n    set_xcode_property(yyjson CLANG_CXX_LANGUAGE_STANDARD \"c++98\")\n    \n    set_xcode_property(yyjson OTHER_CFLAGS[variant=Debug] ${YYJSON_FLAGS})\n    set_xcode_property(yyjson OTHER_CFLAGS[variant=MinSizeRel] ${YYJSON_FLAGS})\n    set_xcode_property(yyjson OTHER_CFLAGS[variant=RelWithDebInfo] ${YYJSON_FLAGS})\n    set_xcode_property(yyjson OTHER_CFLAGS[variant=Release] ${YYJSON_FLAGS})\n    \nelseif(MSVC)\n    # Flag list for MSVC\n    set(YYJSON_FLAGS \"/utf-8\")\n    if(YYJSON_ENABLE_FASTMATH)\n        list(APPEND YYJSON_FLAGS \"/fp:fast\")\n    endif()\n    \n    target_compile_options(yyjson PRIVATE $<$<C_COMPILER_ID:MSVC>:${YYJSON_FLAGS}>)\n    target_compile_options(yyjson PRIVATE $<$<CXX_COMPILER_ID:MSVC>:${YYJSON_FLAGS}>)\n    \nelseif(CMAKE_C_COMPILER_ID MATCHES \"GNU|Clang|Intel\")\n    # Flag list for GCC like compilers\n    set(YYJSON_FLAGS)\n    if(YYJSON_ENABLE_FASTMATH)\n        list(APPEND YYJSON_FLAGS \"-ffast-math\")\n    endif()\n    \n    target_compile_options(yyjson PRIVATE $<$<COMPILE_LANGUAGE:C>:${YYJSON_FLAGS}>)\n    target_compile_options(yyjson PRIVATE $<$<COMPILE_LANGUAGE:CXX>:${YYJSON_FLAGS}>)\n    \n    if(YYJSON_FORCE_32_BIT)\n        set(CMAKE_C_FLAGS -m32)\n        set(CMAKE_CXX_FLAGS -m32)\n    endif()\n\nendif()\n\ninclude(CheckIncludeFile)\ncheck_include_file(stdint.h YYJSON_HAS_STDINT_H)\ncheck_include_file(stdbool.h YYJSON_HAS_STDBOOL_H)\n\nif(BUILD_SHARED_LIBS)\n    if(WIN32)\n        target_compile_definitions(yyjson PUBLIC\n            $<BUILD_INTERFACE:YYJSON_EXPORTS>\n            $<INSTALL_INTERFACE:YYJSON_IMPORTS>)\n    endif()\nendif()\n\n\n\n# ------------------------------------------------------------------------------\n# Install\ninclude(GNUInstallDirs)\n\ninstall(TARGETS yyjson\n        EXPORT yyjson-targets\n        ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n        LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n        RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n        INCLUDES DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\")\ninstall(EXPORT yyjson-targets\n        FILE yyjson-config.cmake\n        NAMESPACE yyjson::\n        DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/yyjson\")\ninstall(FILES src/yyjson.h DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\")\n\nconfigure_file(yyjson.pc.in ${CMAKE_BINARY_DIR}/yyjson.pc @ONLY)\ninstall(FILES ${CMAKE_BINARY_DIR}/yyjson.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)\n\n\n# ------------------------------------------------------------------------------\n# Testing\nif(YYJSON_BUILD_TESTS)\n    enable_testing()\n\n    # Check C++ compiler\n    include(CheckLanguage)\n    check_language(CXX)\n    if(CMAKE_CXX_COMPILER)\n        enable_language(CXX)\n    endif()\n    \n    if(XCODE)\n        # Config XCTest\n        find_package(XCTest REQUIRED)\n        set(CMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED \"NO\")\n        set(CMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_REQUIRED \"NO\")\n        set(CMAKE_XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY \"\")\n        set(YYJSON_TEST_DATA ${CMAKE_CURRENT_SOURCE_DIR}/test/data)\n        \n        # Add all test cases to XCTest: c files prefixed with 'test_'\n        file(GLOB YYJSON_TEST_SOURCE\n            \"test/test_*.c\"\n        )\n        set(YYJSON_TEST_LINES \"\")\n        foreach(SRC_FILE ${YYJSON_TEST_SOURCE})\n            string(REGEX REPLACE \"(^.*/|\\\\.[^.]*$)\" \"\" SRC_NAME ${SRC_FILE})\n            set(YYJSON_TEST_LINES \"${YYJSON_TEST_LINES}- (void)${SRC_NAME} {\\n\")\n            set(YYJSON_TEST_LINES \"${YYJSON_TEST_LINES}    extern void ${SRC_NAME}(void);\\n\")\n            set(YYJSON_TEST_LINES \"${YYJSON_TEST_LINES}    ${SRC_NAME}();\\n\")\n            set(YYJSON_TEST_LINES \"${YYJSON_TEST_LINES}}\\n\\n\")\n        endforeach()\n        configure_file(\n            \"${CMAKE_CURRENT_SOURCE_DIR}/test/xctest/yy_xctest.m.in\"\n            \"${CMAKE_CURRENT_SOURCE_DIR}/test/xctest/yy_xctest.m\"\n            @ONLY\n        )\n        unset(YYJSON_TEST_LINES)\n        \n        # Add source files and search path to XCTest\n        file(GLOB YYJSON_TEST_SOURCE\n            \"test/test_*.c\"\n            \"test/util/*.h\"\n            \"test/util/*.c\"\n            \"test/xctest/*\"\n        )\n        xctest_add_bundle(yyjson_tests yyjson\n            ${YYJSON_TEST_SOURCE}\n            ${YYJSON_TEST_DATA}\n        )\n        set_target_properties(yyjson_tests PROPERTIES\n            MACOSX_BUNDLE_INFO_PLIST ${CMAKE_CURRENT_SOURCE_DIR}/test/xctest/Info.plist\n            RESOURCE ${YYJSON_TEST_DATA}\n        )\n        target_include_directories(yyjson_tests PRIVATE\n            ${CMAKE_CURRENT_SOURCE_DIR}/test/util\n            ${CMAKE_CURRENT_SOURCE_DIR}/test/xctest\n        )\n        xctest_add_test(XCTest.yyjson yyjson_tests)\n        \n        set_default_xcode_property(yyjson_tests)\n        set_xcode_deployment_version(yyjson_tests \"10.13\" \"12.0\" \"12.0\" \"4.0\")\n        \n    else()\n        # Check valgrind command\n        if (YYJSON_ENABLE_VALGRIND)\n            find_program(MEMORYCHECK_COMMAND valgrind)\n            if (\"${MEMORYCHECK_COMMAND}\" MATCHES \"MEMORYCHECK_COMMAND-NOTFOUND\")\n                message(WARNING \"Valgrind not found\")\n                unset(MEMORYCHECK_COMMAND)\n            else()\n                message(STATUS \"Valgrind found\")\n                set(MEMORYCHECK_COMMAND_OPTIONS\n                    --tool=memcheck\n                    --leak-check=full\n                    --trace-children=yes\n                    --error-exitcode=1\n                )\n            endif()\n        endif()\n        \n        # Copy test data\n        file(COPY \"${CMAKE_CURRENT_SOURCE_DIR}/test/data\" DESTINATION \"${CMAKE_CURRENT_BINARY_DIR}\")\n        add_definitions(-DYYJSON_TEST_DATA_PATH=\"${CMAKE_CURRENT_BINARY_DIR}\")\n        \n        # Add dependency\n        add_library(yyjson_test_utils\n            test/util/yy_test_utils.c\n            test/util/goo_double_conv.c\n        )\n        target_include_directories(yyjson_test_utils PUBLIC test/util)\n        if(CMAKE_C_COMPILER_ID MATCHES \"GNU|Clang\")\n            target_compile_options(yyjson_test_utils PRIVATE $<$<COMPILE_LANGUAGE:C>:-std=c99>)\n        endif()\n        \n        # Add all test cases: c files prefixed with 'test_'\n        file(GLOB YYJSON_TEST_SOURCE\n            \"test/test_*.c\"\n        )\n        foreach(SRC_FILE ${YYJSON_TEST_SOURCE})\n            string(REGEX REPLACE \"(^.*/|\\\\.[^.]*$)\" \"\" SRC_NAME ${SRC_FILE})\n            add_executable(${SRC_NAME} ${SRC_FILE})\n            target_link_libraries(${SRC_NAME} PRIVATE yyjson yyjson_test_utils)\n            \n            if(MSVC)\n                target_compile_options(${SRC_NAME} PRIVATE $<$<C_COMPILER_ID:MSVC>:/utf-8>)\n                target_compile_options(${SRC_NAME} PRIVATE $<$<CXX_COMPILER_ID:MSVC>:/utf-8>)\n            endif()\n            \n            if(CMAKE_C_COMPILER_ID MATCHES \"GNU|Clang\")\n                target_compile_options(${SRC_NAME} PRIVATE $<$<COMPILE_LANGUAGE:C>:-std=c99>)\n            endif()\n            \n            if(MEMORYCHECK_COMMAND)\n                add_test(NAME ${SRC_NAME}\n                         COMMAND \"${MEMORYCHECK_COMMAND}\" ${MEMORYCHECK_COMMAND_OPTIONS} \"${CMAKE_CURRENT_BINARY_DIR}/${SRC_NAME}\")\n            else()\n                add_test(${SRC_NAME} ${SRC_NAME})\n            endif()\n            \n            set_tests_properties(${SRC_NAME} PROPERTIES TIMEOUT 600)\n            message(STATUS \"Add test: ${SRC_NAME}\")\n        endforeach()\n        \n        # Add code coverage and sanitize\n        if(CMAKE_C_COMPILER_ID MATCHES \"GNU|Clang\")\n            if (YYJSON_ENABLE_COVERAGE)\n                if(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n                    set(COMPILE_FLAGS -fprofile-instr-generate -fcoverage-mapping)\n                else()\n                    set(COMPILE_FLAGS --coverage)\n                endif()\n                target_compile_options(yyjson PRIVATE ${COMPILE_FLAGS})\n                target_link_libraries(yyjson INTERFACE ${COMPILE_FLAGS})\n                foreach(SRC_FILE ${YYJSON_TEST_SOURCE})\n                    string(REGEX REPLACE \"(^.*/|\\\\.[^.]*$)\" \"\" SRC_NAME ${SRC_FILE})\n                    target_compile_options(${SRC_NAME} PRIVATE ${COMPILE_FLAGS})\n                endforeach()\n            endif()\n            if (YYJSON_ENABLE_SANITIZE)\n                set(COMPILE_FLAGS\n                    -fsanitize=address\n                    -fsanitize=undefined\n                    -fsanitize=leak\n                    -fsanitize-recover=all\n                    -fno-omit-frame-pointer\n                    -fno-optimize-sibling-calls\n                    -O1\n                    -g\n                )\n                target_compile_options(yyjson PRIVATE ${COMPILE_FLAGS})\n                target_link_libraries(yyjson INTERFACE ${COMPILE_FLAGS})\n            endif()\n        endif()\n\n    endif()\n    \n    \n    # Test compatibility\n    if(MSVC)\n        add_executable(test_compile_ansi_c test/compile_ansi.c)\n        target_include_directories(test_compile_ansi_c PRIVATE src)\n        add_executable(test_compile_ansi_cpp test/compile_ansi.cpp)\n        target_include_directories(test_compile_ansi_cpp PRIVATE src)\n        \n        # set warning level 4, treat warnings as errors\n        set(YYJSON_STRICT_FLAGS /W4 /WX)\n        target_compile_options(test_compile_ansi_c PRIVATE\n            $<$<COMPILE_LANGUAGE:C>:${YYJSON_STRICT_FLAGS}>)\n        target_compile_options(test_compile_ansi_cpp PRIVATE\n            $<$<COMPILE_LANGUAGE:CXX>:${YYJSON_STRICT_FLAGS}>)\n        \n        # add tests\n        add_test(test_compile_ansi_c test_compile_ansi_c)\n        message(STATUS \"Add test: test_compile_ansi_c\")\n        add_test(test_compile_ansi_cpp test_compile_ansi_cpp)\n        message(STATUS \"Add test: test_compile_ansi_cpp\")\n        \n    elseif(CMAKE_C_COMPILER_ID MATCHES \"GNU|Clang\")\n        \n        # Compiler flag check\n        include(CheckCCompilerFlag)\n        include(CheckCXXCompilerFlag)\n        \n        # Flags to check ANSI C/C++ standard strictly, treat warnings as errors\n        set(YYJSON_STRICT_C_FLAGS \"\")\n        set(YYJSON_STRICT_CXX_FLAGS \"\")\n        \n        # Base flags\n        set(YYJSON_BASE_FLAGS\n            -pedantic\n            -pedantic-errors\n            -Werror\n            -Wall\n            -Wextra\n            -Wconversion\n            -Wundef\n            -Wcast-qual\n            -Wfloat-equal\n            -Wredundant-decls\n            -Wpointer-arith\n        )\n        # Extra flags supported by different compilers\n        if(CMAKE_C_COMPILER_ID MATCHES \"GNU\")\n            set(YYJSON_EXTRA_FLAGS\n                -Wmissing-prototypes    # C only\n                -Wstrict-prototypes     # C only\n                -Wlogical-op            # GCC 4.3\n                -Wdouble-promotion      # GCC 4.6\n                -Wduplicated-cond       # GCC 6.0\n                -Wduplicated-branches   # GCC 7.0\n                -Wcast-align=strict     # GCC 8.0\n                -Wshadow=global         # GCC 7.0\n            )\n        else()\n            set(YYJSON_EXTRA_FLAGS\n                -Wmissing-prototypes    # C only\n                -Wstrict-prototypes     # C only\n                -Wdouble-promotion      # Clang\n                -Wcast-align            # Clang\n                -Wcomma                 # Clang\n                -Wdeprecated            # Clang\n                -Wdocumentation         # Clang\n                -Wnewline-eof           # Clang\n                -Wshadow-all            # Clang\n                -Wunaligned-access      # Clang\n                -Wunreachable-code      # Clang\n                -Wextra-semi            # Clang\n                -Wextra-semi-stmt       # Clang\n                # used for finding potential issues, but too noisy for regular testing:\n                # -Weverything                        # enable all warnings\n                # -Wno-reserved-macro-identifier      # disable for stdbool define\n                # -Wno-padded                         # disable for some structs\n                # -Wno-old-style-cast                 # disable for C++\n                # -Wno-zero-as-null-pointer-constant  # disable for C++\n            )\n        endif()\n        \n        # Combine all available flags\n        list(APPEND YYJSON_STRICT_C_FLAGS ${YYJSON_BASE_FLAGS})\n        list(APPEND YYJSON_STRICT_CXX_FLAGS ${YYJSON_BASE_FLAGS})\n        foreach(flag ${YYJSON_EXTRA_FLAGS})\n            string(REGEX REPLACE \"[-.+/:=]\" \"_\" flag_name \"${flag}\")\n            \n            check_c_compiler_flag(${flag} COMPILER_SUPPORT_C_FLAG${flag_name})\n            if(COMPILER_SUPPORT_C_FLAG${flag_name})\n                list(APPEND YYJSON_STRICT_C_FLAGS ${flag})\n            endif()\n            \n            if(CMAKE_CXX_COMPILER)\n                check_cxx_compiler_flag(${flag} COMPILER_SUPPORT_CXX_FLAG${flag_name})\n                if(COMPILER_SUPPORT_CXX_FLAG${flag_name})\n                    list(APPEND YYJSON_STRICT_CXX_FLAGS ${flag})\n                endif()\n            endif()\n            \n        endforeach()\n        \n        # Check ANSI C\n        check_c_compiler_flag(\"-ansi\" COMPILER_SUPPORTS_ANSI_C)\n        if(COMPILER_SUPPORTS_ANSI_C)\n            add_executable(test_compile_ansi_c test/compile_ansi.c)\n            target_include_directories(test_compile_ansi_c PRIVATE src)\n            target_compile_options(test_compile_ansi_c PRIVATE\n                $<$<COMPILE_LANGUAGE:C>:-ansi ${YYJSON_STRICT_C_FLAGS}>)\n        endif()\n        \n        # Check modern C\n        check_c_compiler_flag(\"-std=c11\" COMPILER_SUPPORTS_C11)\n        if(COMPILER_SUPPORTS_C11)\n            add_executable(test_compile_c11 test/compile_ansi.c)\n            target_include_directories(test_compile_c11 PRIVATE src)\n            target_compile_options(test_compile_c11 PRIVATE\n                $<$<COMPILE_LANGUAGE:C>:-std=c11 ${YYJSON_STRICT_C_FLAGS}>)\n        endif()\n        \n        if(CMAKE_CXX_COMPILER)\n            \n            # Check ANSI C++\n            check_cxx_compiler_flag(\"-ansi\" COMPILER_SUPPORTS_ANSI_CXX)\n            if(COMPILER_SUPPORTS_ANSI_CXX)\n                add_executable(test_compile_ansi_cxx test/compile_ansi.cpp)\n                target_include_directories(test_compile_ansi_cxx PRIVATE src)\n                target_compile_options(test_compile_ansi_cxx PRIVATE\n                    $<$<COMPILE_LANGUAGE:CXX>:-ansi ${YYJSON_STRICT_CXX_FLAGS}>)\n            endif()\n            \n            # Check modern C++\n            check_cxx_compiler_flag(\"-std=c++17\" COMPILER_SUPPORTS_CXX17)\n            if(COMPILER_SUPPORTS_CXX17)\n                add_executable(test_compile_cxx17 test/compile_ansi.cpp)\n                target_include_directories(test_compile_cxx17 PRIVATE src)\n                target_compile_options(test_compile_cxx17 PRIVATE\n                    $<$<COMPILE_LANGUAGE:CXX>:-std=c++17 ${YYJSON_STRICT_CXX_FLAGS}>)\n            endif()\n            \n        endif()\n        \n    endif()\n    \nendif()\n\n\n\n# ------------------------------------------------------------------------------\n# Fuzzing\nif (YYJSON_BUILD_FUZZER)\n    if(CMAKE_C_COMPILER_ID STREQUAL \"Clang\")\n        enable_testing()\n        file(COPY \"${CMAKE_CURRENT_SOURCE_DIR}/fuzz/fuzzer.dict\" DESTINATION \"${CMAKE_CURRENT_BINARY_DIR}\")\n        file(GLOB YYJSON_FILES \"${CMAKE_CURRENT_SOURCE_DIR}/test/data/json/**/*.json\")\n        file(COPY ${YYJSON_FILES} DESTINATION \"${CMAKE_CURRENT_BINARY_DIR}/corpus\")\n        \n        set(COMPILE_FLAGS -fsanitize=fuzzer,address -O1 -g)\n        target_compile_options(yyjson PRIVATE ${COMPILE_FLAGS})\n        target_link_libraries(yyjson INTERFACE ${COMPILE_FLAGS})\n\n        add_executable(fuzzer \"fuzz/fuzzer.c\")\n        target_link_libraries(fuzzer yyjson)\n        add_test(test_fuzzer ${CMAKE_CURRENT_BINARY_DIR}/fuzzer -dict=fuzzer.dict -max_total_time=300 ${CMAKE_CURRENT_BINARY_DIR}/corpus)\n        set_tests_properties(test_fuzzer PROPERTIES TIMEOUT 600)\n    else()\n        message(WARNING \"LibFuzzer requires LLVM Clang as compiler\")\n    endif()\nendif()\n\n\n\n# ------------------------------------------------------------------------------\n# Miscellaneous\nif(YYJSON_BUILD_MISC)\n    # jsoninfo\n    add_executable(jsoninfo \"misc/jsoninfo.c\")\n    target_link_libraries(jsoninfo PRIVATE yyjson)\n    if(XCODE)\n        set_default_xcode_property(jsoninfo)\n    endif()\n\n    # make tables\n    find_package(GMP REQUIRED)\n    find_package(MPFR REQUIRED)\n    add_executable(make_tables \"misc/make_tables.c\")\n    target_include_directories(make_tables PRIVATE\n        ${GMP_INCLUDE_DIR}\n        ${MPFR_INCLUDES}\n    )\n    target_link_libraries(make_tables PRIVATE\n        ${GMP_LIBRARIES}\n        ${MPFR_LIBRARIES}\n    )\n    if(XCODE)\n        set_default_xcode_property(make_tables)\n    endif()\nendif()\n\n\n\n# ------------------------------------------------------------------------------\n# Doxygen\nif(YYJSON_BUILD_DOC)\n    find_package(Doxygen)\n    if(DOXYGEN_FOUND)\n        message(STATUS \"Doxygen found\")\n        \n        set(DOXYGEN_IN \"${CMAKE_CURRENT_SOURCE_DIR}/doc/doxygen/Doxyfile.in\")\n        set(DOXYGEN_OUT \"${CMAKE_CURRENT_BINARY_DIR}/Doxyfile\")\n        configure_file(${DOXYGEN_IN} ${DOXYGEN_OUT} @ONLY)\n        message(STATUS \"Doxygen will output to ${CMAKE_CURRENT_BINARY_DIR}/doxygen/html\")\n        \n        add_custom_target(yyjson_doc ALL\n            COMMAND ${DOXYGEN_EXECUTABLE} \"${CMAKE_CURRENT_BINARY_DIR}/Doxyfile\"\n            WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n            COMMENT \"Generating documentation with Doxygen\"\n            VERBATIM)\n    else()\n        message(WARNING \"Doxygen not found\")\n    endif()\nendif()\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05859375,
          "content": "MIT License\n\nCopyright (c) 2020 YaoYuan <ibireme@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Package.swift",
          "type": "blob",
          "size": 0.791015625,
          "content": "// swift-tools-version:5.0\n// The swift-tools-version declares the minimum version of Swift required to build this package.\n\nimport PackageDescription\n\nlet package = Package(\n    name: \"yyjson\",\n    products: [\n        // Products define the executables and libraries a package produces, and make them visible to other packages.\n        .library(\n            name: \"yyjson\",\n            targets: [\"yyjson\"]),\n    ],\n    targets: [\n        // Targets are the basic building blocks of a package. A target can define a module or a test suite.\n        // Targets can depend on other targets in this package, and on products in packages this package depends on.\n        .target(\n            name: \"yyjson\",\n            path: \".\",\n            sources: [\"src\"],\n            publicHeadersPath: \"src\"\n        )\n    ]\n)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.2783203125,
          "content": "\n# Introduction\n\n[![Build](https://img.shields.io/github/actions/workflow/status/ibireme/yyjson/cmake.yml?branch=master&style=flat-square)](https://github.com/ibireme/yyjson/actions/workflows/cmake.yml)\n[![Codecov](https://img.shields.io/codecov/c/github/ibireme/yyjson/master?style=flat-square)](https://codecov.io/gh/ibireme/yyjson)\n[![License](https://img.shields.io/github/license/ibireme/yyjson?color=blue&style=flat-square)](https://github.com/ibireme/yyjson/blob/master/LICENSE)\n[![Version](https://img.shields.io/github/v/release/ibireme/yyjson?color=orange&style=flat-square)](https://github.com/ibireme/yyjson/releases)\n[![Packaging status](https://img.shields.io/repology/repositories/yyjson.svg?style=flat-square)](https://repology.org/project/yyjson/versions)\n\nA high performance JSON library written in ANSI C.\n\n# Features\n- **Fast**: can read or write gigabytes per second JSON data on modern CPUs.\n- **Portable**: complies with ANSI C (C89) for cross-platform compatibility.\n- **Strict**: complies with [RFC 8259](https://datatracker.ietf.org/doc/html/rfc8259) JSON standard, ensuring strict number format and UTF-8 validation.\n- **Extendable**: offers options to allow comments, trailing commas, NaN/Inf, and custom memory allocator.\n- **Accuracy**: can accurately read and write `int64`, `uint64`, and `double` numbers.\n- **Flexible**: supports unlimited JSON nesting levels, `\\u0000` characters, and non null-terminated strings.\n- **Manipulation**: supports querying and modifying using [JSON Pointer](https://datatracker.ietf.org/doc/html/rfc6901), [JSON Patch](https://datatracker.ietf.org/doc/html/rfc6902) and [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386).\n- **Developer-Friendly**: easy integration with only one `h` and one `c` file.\n\n# Limitations\n- An array or object is stored as a [data structure](https://ibireme.github.io/yyjson/doc/doxygen/html/md_doc__data_structure.html) such as linked list, which makes accessing elements by index or key slower than using an iterator.\n- Duplicate keys are allowed in an object, and the order of the keys is preserved.\n- JSON parsing result is immutable, requiring a `mutable copy` for modification.\n\n# Performance\nBenchmark project and dataset: [yyjson_benchmark](https://github.com/ibireme/yyjson_benchmark)\n\nThe simdjson's new `On Demand` API is faster if most JSON fields are known at compile-time.\nThis benchmark project only checks the DOM API, a new benchmark will be added later.\n\n#### AWS EC2 (AMD EPYC 7R32, gcc 9.3)\n![ec2_chart](doc/images/perf_reader_ec2.svg)\n\n|twitter.json|parse (GB/s)|stringify (GB/s)|\n|---|---|---|\n|yyjson(insitu)|1.80|1.51|\n|yyjson|1.72|1.42|\n|simdjson|1.52|0.61|\n|sajson|1.16|   |\n|rapidjson(insitu)|0.77|   |\n|rapidjson(utf8)|0.26|0.39|\n|cjson|0.32|0.17|\n|jansson|0.05|0.11|\n\n\n#### iPhone (Apple A14, clang 12)\n![a14_chart](doc/images/perf_reader_a14.svg)\n\n|twitter.json|parse (GB/s)|stringify (GB/s)|\n|---|---|---|\n|yyjson(insitu)|3.51|2.41|\n|yyjson|2.39|2.01|\n|simdjson|2.19|0.80|\n|sajson|1.74||\n|rapidjson(insitu)|0.75| |\n|rapidjson(utf8)|0.30|0.58|\n|cjson|0.48|0.33|\n|jansson|0.09|0.24|\n\nMore benchmark reports with interactive charts (update 2020-12-12)\n\n|Platform|CPU|Compiler|OS|Report|\n|---|---|---|---|---|\n|Intel NUC 8i5|Core i5-8259U|msvc 2019|Windows 10 2004|[Charts](https://ibireme.github.io/yyjson_benchmark/reports/Intel_NUC_8i5_msvc_2019.html)|\n|Intel NUC 8i5|Core i5-8259U|clang 10.0|Ubuntu 20.04|[Charts](https://ibireme.github.io/yyjson_benchmark/reports/Intel_NUC_8i5_clang_10.html)|\n|Intel NUC 8i5|Core i5-8259U|gcc 9.3|Ubuntu 20.04|[Charts](https://ibireme.github.io/yyjson_benchmark/reports/Intel_NUC_8i5_gcc_9.html)|\n|AWS EC2 c5a.large|AMD EPYC 7R32|gcc 9.3|Ubuntu 20.04|[Charts](https://ibireme.github.io/yyjson_benchmark/reports/EC2_c5a.large_gcc_9.html)|\n|AWS EC2 t4g.medium|Graviton2 (ARM64)|gcc 9.3|Ubuntu 20.04|[Charts](https://ibireme.github.io/yyjson_benchmark/reports/EC2_t4g.medium_gcc_9.html)|\n|Apple iPhone 12 Pro|A14 (ARM64)|clang 12.0|iOS 14|[Charts](https://ibireme.github.io/yyjson_benchmark/reports/Apple_A14_clang_12.html)|\n\n### For better performance, yyjson prefers:\n* A modern processor with:\n    * high instruction level parallelism\n    * excellent branch predictor\n    * low penalty for misaligned memory access\n* A modern compiler with good optimizer (e.g. clang)\n\n\n# Sample Code\n\n### Read JSON string\n```c\nconst char *json = \"{\\\"name\\\":\\\"Mash\\\",\\\"star\\\":4,\\\"hits\\\":[2,2,1,3]}\";\n\n// Read JSON and get root\nyyjson_doc *doc = yyjson_read(json, strlen(json), 0);\nyyjson_val *root = yyjson_doc_get_root(doc);\n\n// Get root[\"name\"]\nyyjson_val *name = yyjson_obj_get(root, \"name\");\nprintf(\"name: %s\\n\", yyjson_get_str(name));\nprintf(\"name length:%d\\n\", (int)yyjson_get_len(name));\n\n// Get root[\"star\"]\nyyjson_val *star = yyjson_obj_get(root, \"star\");\nprintf(\"star: %d\\n\", (int)yyjson_get_int(star));\n\n// Get root[\"hits\"], iterate over the array\nyyjson_val *hits = yyjson_obj_get(root, \"hits\");\nsize_t idx, max;\nyyjson_val *hit;\nyyjson_arr_foreach(hits, idx, max, hit) {\n    printf(\"hit%d: %d\\n\", (int)idx, (int)yyjson_get_int(hit));\n}\n\n// Free the doc\nyyjson_doc_free(doc);\n\n// All functions accept NULL input, and return NULL on error.\n```\n\n### Write JSON string\n```c\n// Create a mutable doc\nyyjson_mut_doc *doc = yyjson_mut_doc_new(NULL);\nyyjson_mut_val *root = yyjson_mut_obj(doc);\nyyjson_mut_doc_set_root(doc, root);\n\n// Set root[\"name\"] and root[\"star\"]\nyyjson_mut_obj_add_str(doc, root, \"name\", \"Mash\");\nyyjson_mut_obj_add_int(doc, root, \"star\", 4);\n\n// Set root[\"hits\"] with an array\nint hits_arr[] = {2, 2, 1, 3};\nyyjson_mut_val *hits = yyjson_mut_arr_with_sint32(doc, hits_arr, 4);\nyyjson_mut_obj_add_val(doc, root, \"hits\", hits);\n\n// To string, minified\nconst char *json = yyjson_mut_write(doc, 0, NULL);\nif (json) {\n    printf(\"json: %s\\n\", json); // {\"name\":\"Mash\",\"star\":4,\"hits\":[2,2,1,3]}\n    free((void *)json);\n}\n\n// Free the doc\nyyjson_mut_doc_free(doc);\n```\n\n### Read JSON file with options\n```c\n// Read JSON file, allowing comments and trailing commas\nyyjson_read_flag flg = YYJSON_READ_ALLOW_COMMENTS | YYJSON_READ_ALLOW_TRAILING_COMMAS;\nyyjson_read_err err;\nyyjson_doc *doc = yyjson_read_file(\"/tmp/config.json\", flg, NULL, &err);\n\n// Iterate over the root object\nif (doc) {\n    yyjson_val *obj = yyjson_doc_get_root(doc);\n    yyjson_obj_iter iter;\n    yyjson_obj_iter_init(obj, &iter);\n    yyjson_val *key, *val;\n    while ((key = yyjson_obj_iter_next(&iter))) {\n        val = yyjson_obj_iter_get_val(key);\n        printf(\"%s: %s\\n\", yyjson_get_str(key), yyjson_get_type_desc(val));\n    }\n} else {\n    printf(\"read error (%u): %s at position: %ld\\n\", err.code, err.msg, err.pos);\n}\n\n// Free the doc\nyyjson_doc_free(doc);\n```\n\n### Write JSON file with options\n```c\n// Read the JSON file as a mutable doc\nyyjson_doc *idoc = yyjson_read_file(\"/tmp/config.json\", 0, NULL, NULL);\nyyjson_mut_doc *doc = yyjson_doc_mut_copy(idoc, NULL);\nyyjson_mut_val *obj = yyjson_mut_doc_get_root(doc);\n\n// Remove null values in root object\nyyjson_mut_obj_iter iter;\nyyjson_mut_obj_iter_init(obj, &iter);\nyyjson_mut_val *key, *val;\nwhile ((key = yyjson_mut_obj_iter_next(&iter))) {\n    val = yyjson_mut_obj_iter_get_val(key);\n    if (yyjson_mut_is_null(val)) {\n        yyjson_mut_obj_iter_remove(&iter);\n    }\n}\n\n// Write the json pretty, escape unicode\nyyjson_write_flag flg = YYJSON_WRITE_PRETTY | YYJSON_WRITE_ESCAPE_UNICODE;\nyyjson_write_err err;\nyyjson_mut_write_file(\"/tmp/config.json\", doc, flg, NULL, &err);\nif (err.code) {\n    printf(\"write error (%u): %s\\n\", err.code, err.msg);\n}\n\n// Free the doc\nyyjson_doc_free(idoc);\nyyjson_mut_doc_free(doc);\n```\n\n# Documentation\nThe latest (unreleased) documentation can be accessed in the [doc](https://github.com/ibireme/yyjson/tree/master/doc) directory.\nThe pre-generated Doxygen HTML for the release version can be viewed here:\n* [Home Page](https://ibireme.github.io/yyjson/doc/doxygen/html/)\n    * [Build and test](https://ibireme.github.io/yyjson/doc/doxygen/html/md_doc__build_and_test.html)\n    * [API and sample code](https://ibireme.github.io/yyjson/doc/doxygen/html/md_doc__a_p_i.html)\n    * [Data structure](https://ibireme.github.io/yyjson/doc/doxygen/html/md_doc__data_structure.html)\n    * [Changelog](https://ibireme.github.io/yyjson/doc/doxygen/html/md__c_h_a_n_g_e_l_o_g.html)\n\n# Packaging status\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/yyjson.svg)](https://repology.org/project/yyjson/versions)\n\n# Built With yyjson\n\nA non-exhaustive list of projects that expose yyjson to other languages or\nuse yyjson internally for a major feature. If you have a project that uses\nyyjson, feel free to open a PR to add it to this list.\n\n| Project         | Language | Description                                                                              |\n|-----------------|----------|------------------------------------------------------------------------------------------|\n| [py_yyjson][]   | Python   | Python bindings for yyjson                                                               |\n| [orjson][]      | Python   | JSON library for Python with an optional yyjson backend                                  |\n| [cpp-yyjson][]  | C++      | C++ JSON library with a yyjson backend                                                   |\n| [reflect-cpp][] | C++      | C++ library for serialization through automated field name retrieval from structs        |\n| [yyjsonr][]     | R        | R binding for yyjson                                                                     |\n| [Ananda][]      | Swift    | JSON model decoding based on yyjson                                                      |\n| [duckdb][]      | C++      | DuckDB is an in-process SQL OLAP Database Management System                              |\n| [fastfetch][]   | C        | A neofetch-like tool for fetching system information and displaying them in a pretty way |\n| [Zrythm][]      | C        | Digital Audio Workstation that uses yyjson to serialize JSON project files               |\n| [bemorehuman][] | C        | Recommendation engine with a focus on uniqueness of the person receiving the rec         |\n| [mruby-yyjson][]| mruby    | Efficient JSON parsing and serialization library for mruby using yyjson                  |\n| [YYJSON.jl][]   | Julia    | Julia bindings for yyjson                                                                |\n\n# TODO for v1.0\n* [x] Add documentation page.\n* [x] Add GitHub workflow for CI and codecov.\n* [x] Add more tests: valgrind, sanitizer, fuzzing.\n* [x] Support JSON Pointer to query and modify JSON.\n* [x] Add `RAW` type for JSON reader and writer.\n* [x] Add option to limit real number output precision.\n* [ ] Add option to support JSON5 (if feasible).\n* [ ] Add functions to diff two JSON documents.\n* [ ] Add documentation on performance optimizations.\n* [ ] Ensure ABI stability.\n\n# License\nThis project is released under the MIT license.\n\n[py_yyjson]: https://github.com/tktech/py_yyjson\n[orjson]: https://github.com/ijl/orjson\n[cpp-yyjson]: https://github.com/yosh-matsuda/cpp-yyjson\n[reflect-cpp]: https://github.com/getml/reflect-cpp\n[yyjsonr]: https://github.com/coolbutuseless/yyjsonr\n[Ananda]: https://github.com/nixzhu/Ananda\n[duckdb]: https://github.com/duckdb/duckdb\n[fastfetch]: https://github.com/fastfetch-cli/fastfetch\n[Zrythm]: https://github.com/zrythm/zrythm\n[bemorehuman]: https://github.com/BeMoreHumanOrg/bemorehuman\n[mruby-yyjson]: https://github.com/buty4649/mruby-yyjson\n[YYJSON.jl]: https://github.com/bhftbootcamp/YYJSON.jl\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "yyjson.pc.in",
          "type": "blob",
          "size": 0.302734375,
          "content": "prefix=@CMAKE_INSTALL_PREFIX@\nexec_prefix=@CMAKE_INSTALL_PREFIX@\nlibdir=@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_LIBDIR@\nincludedir=@CMAKE_INSTALL_PREFIX@/@CMAKE_INSTALL_INCLUDEDIR@\n\nName: yyjson\nDescription: Fastest JSON library in C\nVersion: @PROJECT_VERSION@\nLibs: -L${libdir} -lyyjson\nCflags: -I${includedir}\n"
        }
      ]
    }
  ]
}