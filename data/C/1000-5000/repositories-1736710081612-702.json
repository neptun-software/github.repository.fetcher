{
  "metadata": {
    "timestamp": 1736710081612,
    "page": 702,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "liballeg/allegro5",
      "stars": 1910,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.203125,
          "content": "root = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\ncharset = utf-8\ntrim_trailing_whitespace = true\nindent_style = space\nindent_size = 3\n\n[CMakeLists.txt]\nindent_size = 4\n\n[*.cmake]\nindent_size = 4\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.25,
          "content": "\n# ignore the build/ directory\nbuild/\nbuild_android_arm/\nbuild_android_arm64-v8a/\nbuild_android_armeabi-v7a/\nbuild_android_mips64/\nbuild_android_mips/\nbuild_android_x86/\nbuild_android_x86_64/\n\n# build dependencies optionally go in deps/, ignore them\ndeps/\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 41.578125,
          "content": "#\n#\n# TODO:\n#\n# - some documentation targets still missing\n# - installing documentation\n#\ncmake_minimum_required(VERSION 3.0)\nif(COMMAND cmake_policy)\n    cmake_policy(SET CMP0003 NEW)\n    if(POLICY CMP0026)\n        cmake_policy(SET CMP0026 NEW)\n    endif()\n    if(POLICY CMP0072)\n        cmake_policy(SET CMP0072 NEW)\n    endif()\n    if(POLICY CMP0060)\n        cmake_policy(SET CMP0060 NEW)\n    endif()\n    if(POLICY CMP0075)\n        cmake_policy(SET CMP0075 NEW)\n    endif()\nendif(COMMAND cmake_policy)\n\n\n#-----------------------------------------------------------------------------#\n#\n#   Version\n#\n#-----------------------------------------------------------------------------#\n\nset(ALLEGRO_VERSION_REGEX_PATTERN \"#define ALLEGRO_VERSION_STR[ ]+\\\"([0-9]+\\\\.[0-9]+\\\\.[0-9]+).*\\\"\")\nfile(STRINGS \"${CMAKE_CURRENT_LIST_DIR}/include/allegro5/base.h\" ALLEGRO_VERSION_MATCH\n    REGEX ${ALLEGRO_VERSION_REGEX_PATTERN}\n    LIMIT_COUNT 1\n)\nstring(REGEX REPLACE ${ALLEGRO_VERSION_REGEX_PATTERN} \"\\\\1\" ALLEGRO_VERSION \"${ALLEGRO_VERSION_MATCH}\")\nif(\"${ALLEGRO_VERSION}\" VERSION_GREATER_EQUAL 5.0.0)\n    message(STATUS \"[Allegro] Allegro Version: [${ALLEGRO_VERSION}]\")\nelse()\n    message(FATAL_ERROR \"[Allegro] Invalid Allegro Version: [${ALLEGRO_VERSION}]\")\nendif()\n\n\n#-----------------------------------------------------------------------------#\n#\n#   Project\n#\n#-----------------------------------------------------------------------------#\n\n# Allow generating custom project name via command-line arguments (#1174)\nset(ALLEGRO_PROJECT_NAME \"ALLEGRO\" CACHE STRING \"Project default name\")\nset(ALLEGRO_PROJECT_SUFFIX \"\" CACHE STRING \"Project suffix\")\n\nproject(${ALLEGRO_PROJECT_NAME}${ALLEGRO_PROJECT_SUFFIX}\n    VERSION ${ALLEGRO_VERSION}\n    LANGUAGES C CXX\n    DESCRIPTION \"Allegro project\"\n    HOMEPAGE_URL \"https://github.com/liballeg/allegro5\"\n)\n\nset(ALLEGRO_SOVERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR})\n\nif(NOT CMAKE_BUILD_TYPE)\n  set(CMAKE_BUILD_TYPE RelWithDebInfo CACHE STRING\n      \"Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel Profile.\"\n      FORCE)\nendif()\n# Restrict configuration types to the selected build type.\n# Note: This needs to be done before the project command\nset(CMAKE_CONFIGURATION_TYPES \"${CMAKE_BUILD_TYPE}\" CACHE INTERNAL \"internal\")\n\nif(ANDROID)\n    option(WANT_ANDROID_LEGACY \"Build for Android 4 (1.6)\" OFF)\n    set(ANDROID_TARGET \"android-12\" CACHE STRING \"What Android target to compile for.\")\nendif(ANDROID)\noption(ALLEGRO_SDL \"Build using the SDL backend (experimental)\" OFF)\noption(WANT_STATIC_RUNTIME \"Whether or not to link the C and C++ runtimes statically (currently only implemented on Windows)\" OFF)\n\n# Search in the `cmake' directory for additional CMake modules.\nlist(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)\n\n# Reject in-source builds\ninclude(PreventInSourceBuilds)\n\n# Search in `deps' directories for dependency files.\nfile(GLOB deps_subdirs\n    \"${PROJECT_SOURCE_DIR}/deps\"\n    \"${PROJECT_SOURCE_DIR}/deps/*\"\n    \"${PROJECT_BINARY_DIR}/deps\"\n    \"${PROJECT_BINARY_DIR}/deps/*\"\n    )\nforeach(subdir ${deps_subdirs})\n    if(EXISTS \"${subdir}/include\" OR EXISTS \"${subdir}/lib\")\n        if(CMAKE_FIND_ROOT_PATH)\n            message(STATUS \"Adding ${subdir} to CMAKE_FIND_ROOT_PATH\")\n            list(APPEND CMAKE_FIND_ROOT_PATH \"${subdir}\")\n        else()\n            message(STATUS \"Adding ${subdir} to CMAKE_PREFIX_PATH\")\n            list(APPEND CMAKE_PREFIX_PATH \"${subdir}\")\n        endif()\n    endif()\nendforeach(subdir)\n\n# Search for C header files in these directories.\ninclude_directories(\n    ${PROJECT_SOURCE_DIR}/include\n    ${PROJECT_BINARY_DIR}/include\n    )\n\n# Put libraries into `lib'.\nset(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)\n\n# Lists of all the source files.\ninclude(FileList)\n\n# Our own CMake macros and functions.\ninclude(Common)\n\n#-----------------------------------------------------------------------------#\n#\n#   Build options\n#\n#-----------------------------------------------------------------------------#\n\nif(NOT IPHONE)\n    option(SHARED \"Build shared libraries\" on)\n    set(BUILD_SHARED_LIBS ${SHARED})    # actual CMake variable\nendif(NOT IPHONE)\n\n# On some 64-bit platforms, libraries should be installed into `lib64'\n# instead of `lib'.  Set this to 64 to do that.\nset(LIB_SUFFIX \"\" CACHE STRING \"Suffix for 'lib' directories, e.g. '64'\")\n\noption(WANT_FRAMEWORKS \"Want frameworks on Mac OS X\" off)\noption(WANT_EMBED\n    \"Make frameworks embeddable in application bundles (Mac OS X)\" on)\n\nset(FRAMEWORK_INSTALL_PREFIX \"/Library/Frameworks\" CACHE STRING\n    \"Directory in which to install Mac OS X frameworks\")\n\noption(PREFER_STATIC_DEPS \"Whether to prefer static dependencies.\" off)\n\n#\n# Platforms and drivers.\n#\n\noption(WANT_X11 \"X11 support\" on)\noption(WANT_X11_XF86VIDMODE \"X11 XF86VidMode Extension support\" on)\noption(WANT_X11_XINERAMA \"X11 Xinerama Extension support\" on)\noption(WANT_X11_XRANDR \"X11 XRandR Extension support\" on)\noption(WANT_X11_XSCREENSAVER \"X11 XScreenSaver Extension support\" on)\noption(WANT_D3D \"Enable Direct3D graphics driver (Windows)\" on)\noption(WANT_D3D9EX \"Enable Direct3D 9Ex extensions (Vista)\" off)\noption(WANT_OPENGL \"Enable OpenGL graphics driver (Windows, X11, OS X))\" on)\noption(WANT_SHADERS_GL \"Build GLSL shader support (OpenGL)\" on)\noption(WANT_SHADERS_D3D \"Build HLSL shader support (Direct3D)\" on)\n\nset(GL_BUILD_TYPE \"auto\" CACHE STRING \"OpenGL profile to build Allegro against\")\nset_property(CACHE GL_BUILD_TYPE PROPERTY STRINGS \"auto;gl;gles1;gles2+\")\nset(GL_AUTO_BUILD_TYPE \"gl\")\noption(WANT_GLES3 \"Use GLES3-only features in a GLES2+ build\" off)\n\n#\n# Addons.\n#\n\noption(WANT_FONT \"Enable bitmap font add-on\" on)\noption(WANT_AUDIO \"Enable allegro_audio engine\" on)\noption(WANT_IMAGE \"Enable image load/save addon\" on)\n\nif (NOT IPHONE)\n    option(WANT_IMAGE_JPG \"Enable JPEG support in image addon\" on)\n    option(WANT_IMAGE_PNG \"Enable PNG support in image addon\" on)\n    option(WANT_IMAGE_FREEIMAGE \"Enable FreeImage support in image addon\" on)\nendif (NOT IPHONE)\noption(WANT_IMAGE_WEBP \"Enable WebP support in image addon\" on)\n\noption(WANT_TTF \"Enable TTF addon\" on)\noption(WANT_COLOR \"Enable color addon\" on)\noption(WANT_MEMFILE \"Enable memfile addon\" on)\noption(WANT_PHYSFS \"Enable PhysicsFS addon\" on)\noption(WANT_PRIMITIVES \"Enable primitives addon\" on)\noption(WANT_NATIVE_DIALOG \"Enable native dialog addon\" on)\noption(WANT_VIDEO \"Enable video player addon\" on)\n\noption(WANT_MONOLITH \"Include all addons in the main library\" off)\n\n#\n# Wrappers.\n#\n\noption(WANT_PYTHON_WRAPPER \"Enable generation of the Python wrapper\" off)\noption(WANT_LUAJIT \"Enable generation of the Luajit wrapper\" off)\n\n#\n# Documentation.\n#\n\noption(WANT_DOCS \"Generate documentation\" on)\noption(WANT_DOCS_HTML \"Generate HTML documentation\" on)\noption(WANT_DOCS_MAN \"Generate man pages\" on)\noption(WANT_DOCS_INFO \"Generate Info document\" off)\noption(WANT_DOCS_PDF \"Generate PDF document (requires pdflatex)\" off)\noption(WANT_DOCS_PDF_PAPER \"Whether PDF output is destined for paper\" off)\n\n#\n# For developers.\n#\n\noption(STRICT_WARN \"Halt at warnings\" off)\noption(WANT_MUDFLAP \"Enable gcc mudflap (requires gcc 4.0+)\" off)\noption(WANT_RELEASE_LOGGING \"Enable logging even in release mode\" on)\n\nif(WANT_RELEASE_LOGGING)\n    set(ALLEGRO_CFG_RELEASE_LOGGING 1)\nendif()\n\n#\n# Minor options.\n#\n\nif(NOT IPHONE)\n    option(WANT_ALLOW_SSE \"Allow compiler to use SSE instructions (x86)\" on)\nendif(NOT IPHONE)\n\noption(NO_FPU \"No floating point unit\" off)\noption(WANT_DLL_TLS \"Force use of DllMain for TLS (Windows)\" off)\noption(WANT_DEMO \"Build demo programs\" on)\noption(WANT_EXAMPLES \"Build example programs\" on)\noption(WANT_POPUP_EXAMPLES \"Use popups instead of printf for fatal errors\" on)\noption(WANT_TESTS \"Build test programs\" on)\n\noption(WANT_WAIT_EVENT_SLEEP \"Use sleep instead of threads in al_wait_for_event (only useful for emscripten without web workers)\" off)\n\nif(WANT_WAIT_EVENT_SLEEP)\n    set(ALLEGRO_WAIT_EVENT_SLEEP 1)\nendif()\n\n#-----------------------------------------------------------------------------#\n#\n#   Set up compilers\n#\n#-----------------------------------------------------------------------------#\n\ninclude(CheckCSourceCompiles)\ninclude(CheckCXXSourceCompiles)\n\nif(CMAKE_COMPILER_IS_GNUCC)\n    set(COMPILER_GCC 1)\n    set(COMPILER_GCC_OR_CLANG 1)\nendif()\nif(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n    set(COMPILER_GCC_OR_CLANG 1)\nendif()\n\nif(WIN32)\n    if(WANT_DLL_TLS AND SHARED)\n        set(ALLEGRO_CFG_DLL_TLS 1)\n    endif(WANT_DLL_TLS AND SHARED)\nendif(WIN32)\n\nif(MSVC)\n    set(COMPILER_MSVC 1)\n    set(ALLEGRO_MSVC 1)\n\n    # Guess VCINSTALLDIR from the value of CMAKE_C_COMPILER if it's not set.\n    # XXX CMAKE_C_COMPILER will often be simply \"cl\" so this won't work.\n    if(\"$ENV{VCINSTALLDIR}\" STREQUAL \"\")\n        string(REGEX REPLACE \"/bin/[^/]*$\" \"\" VCINSTALLDIR \"${CMAKE_C_COMPILER}\")\n        message(STATUS \"Guessed MSVC directory: ${VCINSTALLDIR}\")\n    else(\"$ENV{VCINSTALLDIR}\" STREQUAL \"\")\n        file(TO_CMAKE_PATH \"$ENV{VCINSTALLDIR}\" VCINSTALLDIR)\n        message(STATUS \"Using VCINSTALLDIR: ${VCINSTALLDIR}\")\n    endif(\"$ENV{VCINSTALLDIR}\" STREQUAL \"\")\n\n    # Install in VCINSTALLDIR by default\n    if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n        set(CMAKE_INSTALL_PREFIX ${VCINSTALLDIR}\n            CACHE PATH \"Install path prefix, prepended onto install directories.\"\n            FORCE)\n    endif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n\n    set(EXECUTABLE_TYPE \"WIN32\")\nendif(MSVC)\n\nif(MINGW)\n    # For alplatf.h\n    set(ALLEGRO_MINGW32 1)\n\n    # Guess MINGDIR from the value of CMAKE_C_COMPILER if it's not set.\n    if(\"$ENV{MINGDIR}\" STREQUAL \"\")\n        string(REGEX REPLACE \"/bin/[^/]*$\" \"\" MINGDIR \"${CMAKE_C_COMPILER}\")\n        message(STATUS \"Guessed MinGW directory: ${MINGDIR}\")\n    else(\"$ENV{MINGDIR}\" STREQUAL \"\")\n        file(TO_CMAKE_PATH \"$ENV{MINGDIR}\" MINGDIR)\n        message(STATUS \"Using MINGDIR: ${MINGDIR}\")\n    endif(\"$ENV{MINGDIR}\" STREQUAL \"\")\n\n    # Search in MINGDIR for headers and libraries.\n    if(CMAKE_FIND_ROOT_PATH)\n        list(APPEND CMAKE_FIND_ROOT_PATH \"${MINGDIR}\")\n    else()\n        list(APPEND CMAKE_PREFIX_PATH \"${MINGDIR}\")\n    endif()\n\n    # Install to MINGDIR\n    if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n        set(CMAKE_INSTALL_PREFIX ${MINGDIR}\n            CACHE PATH \"Install path prefix, prepended onto install directories.\"\n            FORCE)\n    endif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n\n    # Check for a common problem (at the time of writing).\n    run_c_compile_test(\"\n        #include <windows.h>\n        int main(void)\n        {\n            int x = DM_POSITION;\n            return 0;\n        }\"\n        HAVE_DM_POSITION)\n    if(NOT HAVE_DM_POSITION)\n        message(FATAL_ERROR\n            \"Missing DM_POSITION. Please update your MinGW \"\n            \"w32api package, delete CMakeCache.txt and try again.\")\n    endif(NOT HAVE_DM_POSITION)\nendif(MINGW)\n\nif(UNIX AND NOT APPLE AND NOT ANDROID)\n    set(ALLEGRO_UNIX 1)\nendif(UNIX AND NOT APPLE AND NOT ANDROID)\n\nif(APPLE AND NOT IPHONE)\n    set(MACOSX 1)\nendif(APPLE AND NOT IPHONE)\n\nif(MACOSX)\n    set(ALLEGRO_MACOSX 1)\n    set(ALLEGRO_CFG_PTHREADS_TLS 1)\n    set(ALLEGRO_UNIX 0)\n    set(WANT_X11 off)\n\n    # This flag is required on some versions of Mac OS X to avoid linker\n    # problems with global variables which are not explicitly initialised.\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fno-common\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-common\")\nendif(MACOSX)\n\nif(IPHONE)\n    set(ALLEGRO_CFG_PTHREADS_TLS 1)\n    set(ALLEGRO_IPHONE 1)\n    set(ALLEGRO_UNIX 0)\n    set(ALLEGRO_LITTLE_ENDIAN 1)\n    set(WANT_X11 off)\n    set(GL_AUTO_BUILD_TYPE \"gles2+\")\n    set(WANT_GLES3 yes)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -std=gnu99\")\n    set(CMAKE_EXE_LINKER_FLAGS \"-framework CoreGraphics -framework QuartzCore -framework UIKit -framework Foundation -framework CoreFoundation -framework MobileCoreServices\")\nendif(IPHONE)\n\nif(BORLAND)\n    set(ALLEGRO_BCC32 1)\nendif(BORLAND)\n\nif(ANDROID)\n   set(ALLEGRO_ANDROID 1)\n   set(ALLEGRO_CFG_PTHREADS_TLS 1)\n   set(WANT_X11 off)\n   set(GL_AUTO_BUILD_TYPE \"gles2+\")\nendif(ANDROID)\n\nif(ALLEGRO_RASPBERRYPI)\n   set(ALLEGRO_CFG_PTHREADS_TLS 1)\n   set(GL_AUTO_BUILD_TYPE \"gles2+\")\n   set(ALLEGRO_EXCLUDE_GLX 1)\nendif(ALLEGRO_RASPBERRYPI)\n\nif(EMSCRIPTEN)\n   set(GL_AUTO_BUILD_TYPE \"gles2+\")\n   set(ALLEGRO_LITTLE_ENDIAN 1)\n   if (NOT ALLEGRO_SDL)\n      message(FATAL_ERROR\n         \"Emscripten support currently requires the SDL backend (set ALLEGRO_SDL)\")\n   endif(NOT ALLEGRO_SDL)\nendif()\n\nif(ALLEGRO_SDL)\n   set(ALLEGRO_UNIX 0)\n   set(ALLEGRO_MACOSX 0)\n   set(WANT_X11 off)\n   include(FindSDL2)\nendif(ALLEGRO_SDL)\n\n# Tell the compiler it can use SSE instructions on x86 architectures.\n# If compatibility with Pentium 2's and below is required then the user\n# should switch WANT_ALLOW_SSE off.\n\n# Workaround for a possible bug in CMake.  Even if we set this variable in\n# the toolchain file when cross-compiling, as we should, it is empty.\nif(NOT CMAKE_SYSTEM_PROCESSOR AND CMAKE_SYSTEM_NAME MATCHES \"Windows\")\n    set(CMAKE_SYSTEM_PROCESSOR i686)\nendif()\n\nif(CMAKE_SYSTEM_PROCESSOR MATCHES \"i.86\")\n    set(ARCH_X86 1)\nendif()\n# CMake reports \"x86\" on my Windows Vista machine\nif(CMAKE_SYSTEM_PROCESSOR MATCHES \"x86\")\n    set(ARCH_X86 1)\nendif()\n\nif(ARCH_X86 AND WANT_ALLOW_SSE)\n    if(COMPILER_GCC_OR_CLANG)\n        message(STATUS \"Allowing GCC/Clang to use SSE instructions\")\n        set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -msse\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -msse\")\n    endif(COMPILER_GCC_OR_CLANG)\n\n    # Flags for other compilers should be added here.\n\n    if(COMPILER_MSVC)\n        message(STATUS \"Allowing MSVC to use SSE instructions\")\n        set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /arch:SSE\")\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /arch:SSE\")\n    endif(COMPILER_MSVC)\nendif()\n\n#-----------------------------------------------------------------------------#\n#\n#   Build types\n#\n#-----------------------------------------------------------------------------#\n\n# Warnings.\n\nif(COMPILER_GCC_OR_CLANG)\n    set(WFLAGS \"-W -Wall -Wpointer-arith\")\n    set(WFLAGS_C_ONLY \"-Wmissing-declarations -Wstrict-prototypes\")\n    if(ALLEGRO_UNIX)\n        # Unfortunately we can't use this flag when magic main is used,\n        # the mangled_main won't have a forward declaration.\n        set(WFLAGS_C_ONLY \"${WFLAGS_C_ONLY} -Wmissing-prototypes\")\n    endif(ALLEGRO_UNIX)\n    if(STRICT_WARN)\n        set(WFLAGS \"${WFLAGS} -Werror\")\n    endif()\nendif()\nif(COMPILER_MSVC)\n    set(WFLAGS \"/W3 -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE\")\n    if(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n        # Clang is more strict than MSVC's compiler here.\n        set(WFLAGS \"${WFLAGS} -Wno-c++11-narrowing\")\n    endif()\nendif(COMPILER_MSVC)\n\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${WFLAGS} ${WFLAGS_C_ONLY}\")\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${WFLAGS}\")\n\nif(WANT_MUDFLAP AND COMPILER_GCC)\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fmudflapth\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fmudflapth\")\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fmudflapth -lmudflapth\")\nendif(WANT_MUDFLAP AND COMPILER_GCC)\n\n# Debugging.\n\nset(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -DDEBUGMODE=1 -DD3D_DEBUG_INFO\")\nset(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -DDEBUGMODE=1 -DD3D_DEBUG_INFO\")\n\n# Profiling.\n\nlist(APPEND CMAKE_BUILD_CONFIGURATIONS Profile)\nif(COMPILER_GCC_OR_CLANG)\n    set(CMAKE_C_FLAGS_PROFILE \"-pg\"\n        CACHE STRING \"profiling flags\")\n    set(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_C_FLAGS_PROFILE}\"\n        CACHE STRING \"profiling flags\")\n    set(CMAKE_EXE_LINKER_FLAGS_PROFILE \"-pg\"\n        CACHE STRING \"profiling flags\")\n    set(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"-pg\"\n        CACHE STRING \"profiling flags\")\n    mark_as_advanced(\n        CMAKE_C_FLAGS_PROFILE\n        CMAKE_CXX_FLAGS_PROFILE\n        CMAKE_EXE_LINKER_FLAGS_PROFILE\n        CMAKE_SHARED_LINKER_FLAGS_PROFILE\n        )\nendif(COMPILER_GCC_OR_CLANG)\n\n#-----------------------------------------------------------------------------#\n#\n#   Begin tests\n#\n#-----------------------------------------------------------------------------#\n\ninclude(CheckFunctionExists)\ninclude(CheckIncludeFiles)\ninclude(CheckLibraryExists)\ninclude(CheckSymbolExists)\ninclude(CheckTypeSize)\ninclude(FindPkgConfig)\n\ninclude(TestBigEndian)\n\nif(NOT ALLEGRO_BIG_ENDIAN AND NOT ALLEGRO_LITTLE_ENDIAN)\n    test_big_endian(ALLEGRO_BIG_ENDIAN)\n    if(NOT ALLEGRO_BIG_ENDIAN)\n        set(ALLEGRO_LITTLE_ENDIAN 1)\n    endif(NOT ALLEGRO_BIG_ENDIAN)\nendif(NOT ALLEGRO_BIG_ENDIAN AND NOT ALLEGRO_LITTLE_ENDIAN)\n\ncheck_include_files(dirent.h ALLEGRO_HAVE_DIRENT_H)\ncheck_include_files(inttypes.h ALLEGRO_HAVE_INTTYPES_H)\ncheck_include_files(linux/input.h ALLEGRO_HAVE_LINUX_INPUT_H)\ncheck_include_files(stdbool.h ALLEGRO_HAVE_STDBOOL_H)\ncheck_include_files(stdint.h ALLEGRO_HAVE_STDINT_H)\ncheck_include_files(sys/io.h ALLEGRO_HAVE_SYS_IO_H)\ncheck_include_files(sys/stat.h ALLEGRO_HAVE_SYS_STAT_H)\ncheck_include_files(sys/time.h ALLEGRO_HAVE_SYS_TIME_H)\ncheck_include_files(time.h ALLEGRO_HAVE_TIME_H)\ncheck_include_files(sys/utsname.h ALLEGRO_HAVE_SYS_UTSNAME_H)\ncheck_include_files(sys/types.h ALLEGRO_HAVE_SYS_TYPES_H)\ncheck_include_files(soundcard.h ALLEGRO_HAVE_SOUNDCARD_H)\ncheck_include_files(sys/soundcard.h ALLEGRO_HAVE_SYS_SOUNDCARD_H)\ncheck_include_files(machine/soundcard.h ALLEGRO_HAVE_MACHINE_SOUNDCARD_H)\ncheck_include_files(linux/soundcard.h ALLEGRO_HAVE_LINUX_SOUNDCARD_H)\ncheck_include_files(libkern/OSAtomic.h ALLEGRO_HAVE_OSATOMIC_H)\ncheck_include_files(sys/inotify.h ALLEGRO_HAVE_SYS_INOTIFY_H)\ncheck_include_files(sal.h ALLEGRO_HAVE_SAL_H)\n\ncheck_function_exists(getexecname ALLEGRO_HAVE_GETEXECNAME)\ncheck_function_exists(mkstemp ALLEGRO_HAVE_MKSTEMP)\ncheck_function_exists(mmap ALLEGRO_HAVE_MMAP)\ncheck_function_exists(mprotect ALLEGRO_HAVE_MPROTECT)\ncheck_function_exists(sched_yield ALLEGRO_HAVE_SCHED_YIELD)\ncheck_function_exists(sysconf ALLEGRO_HAVE_SYSCONF)\ncheck_function_exists(fseeko ALLEGRO_HAVE_FSEEKO)\ncheck_function_exists(ftello ALLEGRO_HAVE_FTELLO)\ncheck_function_exists(strerror_r ALLEGRO_HAVE_STRERROR_R)\ncheck_function_exists(strerror_s ALLEGRO_HAVE_STRERROR_S)\nif(WIN32)\n    check_function_exists(_ftelli64 ALLEGRO_HAVE_FTELLI64)\n    check_function_exists(_fseeki64 ALLEGRO_HAVE_FSEEKI64)\nendif()\n\ncheck_type_size(\"_Bool\" ALLEGRO_HAVE__BOOL)\n\nrun_c_compile_test(\"\n    #include <sys/procfs.h>\n    int main(void) {\n        struct prpsinfo psinfo;\n        psinfo.pr_argc = 0;\n        return 0;\n    }\"\n    ALLEGRO_HAVE_PROCFS_ARGCV\n    )\n\nrun_c_compile_test(\"\n    #include <sys/procfs.h>\n    #include <sys/ioctl.h>\n    int main(void) {\n        struct prpsinfo psinfo;\n        ioctl(0, PIOCPSINFO, &psinfo);\n        return 0;\n    }\"\n    ALLEGRO_HAVE_SV_PROCFS_H\n    )\n\nrun_c_compile_test(\"\n    #include <stdarg.h>\n    int main(void) {\n        va_list a, b;\n        va_copy(a, b);\n        return 0;\n    }\"\n    ALLEGRO_HAVE_VA_COPY\n    )\n\n#-----------------------------------------------------------------------------#\n#\n#   Driver configuration\n#\n#-----------------------------------------------------------------------------#\n\n#\n# These are the conventions for this CMakeFile.\n#\n# The WANT_* variables indicate whether the user wants to have an optional\n# feature enabled, i.e. whether they have selected something in the CMake UI.\n#\n# The CAN_* variables indicate whether a feature *can* be enabled on this\n# system/platform.  As these variable values are cached, CAN_ variables could\n# be set even though the user has turned a corresponding WANT_* variable\n# off---it might have been tested and set in a previous run.\n#\n# The SUPPORT_* variables are the conjunction of WANT_FEATURE and CAN_FEATURE,\n# i.e. the user wants it and the system can support it.\n#\n# Those variables are internal to the CMake build.  Allegro header files use\n# preprocessor constants with names like ALLEGRO_WITH_* and ALLEGRO_HAVE_*.\n# Sometimes we make use of those variables in this CMakeFile as well, but\n# generally that's just due to sloppiness.\n#\n\n\nset(SPACER \"===========================\")\nset(CONFIGURATION_SUMMARY \"Configuration summary\\n${SPACER}\\n\")\n\nif(PREFER_STATIC_DEPS)\n   set(CMAKE_FIND_LIBRARY_SUFFIXES \"${CMAKE_STATIC_LIBRARY_SUFFIX}\"\n                                   \"${CMAKE_SHARED_LIBRARY_SUFFIX}\"\n                                   \"${CMAKE_SHARED_MODULE_SUFFIX}\")\nendif()\n\nset(OPENGL_SUMMARY \"- OpenGL: NO\")\nif(WANT_OPENGL)\n    find_package(OpenGL)\n\n    if(GL_BUILD_TYPE MATCHES \"auto\")\n        set(GL_REAL_BUILD_TYPE ${GL_AUTO_BUILD_TYPE})\n    else()\n        set(GL_REAL_BUILD_TYPE ${GL_BUILD_TYPE})\n    endif()\n\n    if(GL_REAL_BUILD_TYPE MATCHES \"gl$\")\n        if(OPENGL_FOUND AND OPENGL_GLU_FOUND)\n            set(SUPPORT_OPENGL 1)\n            set(ALLEGRO_CFG_OPENGL 1)\n            set(ALLEGRO_CFG_OPENGL_FIXED_FUNCTION 1)\n            # We assume that the OpenGL library is not very old.\n            set(ALLEGRO_CFG_OPENGL_PROGRAMMABLE_PIPELINE 1)\n            if(OPENGL_opengl_LIBRARY) # prefer GLVND if available\n                set(OPENGL_LIBRARIES ${OPENGL_opengl_LIBRARY} ${OPENGL_glu_LIBRARY})\n            endif()\n            include_directories(SYSTEM ${OPENGL_INCLUDE_DIR})\n            set(OPENGL_SUMMARY \"- OpenGL: Desktop\")\n        else(OPENGL_FOUND)\n            if(GL_BUILD_TYPE MATCHES \"auto\")\n                set(GL_REAL_BUILD_TYPE \"gles2+\")\n            endif()\n        endif()\n    endif()\n\n    if(GL_REAL_BUILD_TYPE MATCHES \"gles2\")\n\n        # on cmake 2.8.1 OpenGL ES is not found in the iphone case\n        # XXX incorporate IPHONE case into FindOpenGLES/2\n        if(IPHONE)\n            set(OPENGLES2_FOUND 1)\n            set(OPENGLES2_LIBRARIES \"-framework OpenGLES\")\n        elseif(EMSCRIPTEN)\n            set(OPENGLES2_FOUND 1)\n        else()\n            find_package(OpenGLES2)\n        endif()\n\n        if(OPENGLES2_FOUND)\n            set(SUPPORT_OPENGL 1)\n            set(SUPPORT_OPENGLES 1)\n            set(SUPPORT_OPENGLES2 1)\n            set(ALLEGRO_CFG_OPENGL 1)\n            set(ALLEGRO_CFG_OPENGLES 1)\n            set(ALLEGRO_CFG_OPENGLES2 1)\n            set(ALLEGRO_CFG_OPENGL_PROGRAMMABLE_PIPELINE 1)\n            set(OPENGL_LIBRARIES ${OPENGLES2_LIBRARIES})\n            set(OPENGLES_INCLUDE_DIR ${OPENGLES2_INCLUDE_DIR})\n            set(OPENGL_SUMMARY \"- OpenGL: ES 2.0\")\n\n            if(WANT_GLES3 AND NOT ANDROID)\n                set(SUPPORT_OPENGLES3 1)\n                set(ALLEGRO_CFG_OPENGLES3 1)\n                set(OPENGL_SUMMARY \"- OpenGL: ES 3.0\")\n            elseif(WANT_GLES3 AND ANDROID)\n                find_package(OpenGLES3)\n                if(OPENGLES3_FOUND)\n                    set(SUPPORT_OPENGLES3 1)\n                    set(ALLEGRO_CFG_OPENGLES3 1)\n                    set(OPENGL_LIBRARIES ${OPENGLES3_LIBRARIES})\n                    list(APPEND OPENGLES_INCLUDE_DIR ${OPENGLES3_INCLUDE_DIR})\n                    set(OPENGL_SUMMARY \"- OpenGL: ES 3.0\")\n                endif(OPENGLES3_FOUND)\n            endif()\n\n            if(NOT IPHONE)\n                include_directories(SYSTEM ${OPENGLES_INCLUDE_DIR})\n            endif()\n        else(OPENGLES2_FOUND)\n            if(GL_BUILD_TYPE MATCHES \"auto\")\n                set(GL_REAL_BUILD_TYPE \"gles1\")\n            endif()\n        endif(OPENGLES2_FOUND)\n    endif()\n\n    if(GL_REAL_BUILD_TYPE MATCHES \"gles1\")\n\n        # on cmake 2.8.1 OpenGL ES is not found in the iphone case\n        # XXX incorporate IPHONE case into FindOpenGLES/2\n        if(IPHONE)\n            set(OPENGLES1_FOUND 1)\n            set(OPENGLES1_LIBRARIES \"-framework OpenGLES\")\n        else()\n            find_package(OpenGLES1)\n        endif()\n\n        if(OPENGLES1_FOUND)\n            set(SUPPORT_OPENGL 1)\n            set(SUPPORT_OPENGLES 1)\n            set(SUPPORT_OPENGLES1 1)\n            set(ALLEGRO_CFG_OPENGL 1)\n            set(ALLEGRO_CFG_OPENGLES 1)\n            set(ALLEGRO_CFG_OPENGLES1 1)\n            set(ALLEGRO_CFG_OPENGL_FIXED_FUNCTION 1)\n            set(OPENGL_SUMMARY \"- OpenGL: ES 1.1\")\n            set(OPENGL_LIBRARIES ${OPENGLES1_LIBRARIES})\n            if(NOT IPHONE)\n                include_directories(SYSTEM ${OPENGLES1_INCLUDE_DIR})\n            endif()\n        endif(OPENGLES1_FOUND)\n\n    endif()\n\nendif(WANT_OPENGL)\n\nset(CONFIGURATION_SUMMARY \"${CONFIGURATION_SUMMARY}${OPENGL_SUMMARY}\\n\")\n\n#\n# Unix-specific\n#\n\nif(UNIX) # includes MACOSX\n    if(NOT IPHONE AND NOT ANDROID)\n        find_package(Threads)\n        if(NOT CMAKE_USE_PTHREADS_INIT)\n            message(FATAL_ERROR\n                \"Unix port requires pthreads support, not detected.\")\n        endif(NOT CMAKE_USE_PTHREADS_INIT)\n    endif()\nendif(UNIX)\n\n#\n# SDL\n#\n\nif(ALLEGRO_SDL AND NOT SUPPORT_OPENGL)\n    message(FATAL_ERROR \"SDL support currently requires OpenGL or OpenGL ES support.\")\nendif(ALLEGRO_SDL AND NOT SUPPORT_OPENGL)\n\n#\n# X Window System\n#\n\nif(WANT_X11)\n    find_package(X11)\n    if(X11_FOUND)\n        set(SUPPORT_X11 1)\n        set(ALLEGRO_WITH_XWINDOWS 1)\n    endif(X11_FOUND)\nendif(WANT_X11)\n\nif(ALLEGRO_UNIX AND NOT SUPPORT_X11 AND WANT_X11) # not MACOSX\n    message(FATAL_ERROR\n        \"X11 not found. You may need to install X11 development libraries.\")\nendif(ALLEGRO_UNIX AND NOT SUPPORT_X11 AND WANT_X11)\n\nif(SUPPORT_X11 AND NOT SUPPORT_OPENGL)\n    message(FATAL_ERROR \"X11 support currently requires OpenGL or OpenGL ES support.\")\nendif(SUPPORT_X11 AND NOT SUPPORT_OPENGL)\n\nif(SUPPORT_X11)\n    set(CMAKE_REQUIRED_LIBRARIES ${X11_LIBRARIES})\n\n    if (OpenGL_GLX_FOUND)\n        set(OPENGL_LIBRARIES \"${OPENGL_LIBRARIES}\" \"${OPENGL_glx_LIBRARY}\")\n    endif()\n\n    if (NOT OPENGL_LIBRARIES MATCHES \"(libGL\\\\.|libGLX\\\\.)\" AND NOT ALLEGRO_EXCLUDE_GLX)\n       message(FATAL_ERROR \"X11 support currently requires GLX (set OPENGL_glx_LIBRARY and OpenGL_GLX_FOUND).\")\n    endif()\n\n    check_library_exists(Xcursor XcursorImageCreate \"\" CAN_XCURSOR)\n    if(CAN_XCURSOR)\n        set(ALLEGRO_XWINDOWS_WITH_XCURSOR 1)\n        find_library(XCURSOR_LIB \"Xcursor\")\n        list(APPEND X11_LIBRARIES \"${XCURSOR_LIB}\")\n    else(CAN_XCURSOR)\n        message(FATAL_ERROR \"X11 support requires Xcursor library.\")\n    endif(CAN_XCURSOR)\n\n    check_include_file(\"X11/extensions/XInput2.h\" CAN_XINPUT2)\n    run_c_compile_test(\"\n        #include <X11/extensions/XInput2.h>\n        int main(void) { (void)XI_TouchBegin; return 0; }\"\n        XINPUT2_COMPILES\n    )\n    if(CAN_XINPUT2 AND XINPUT2_COMPILES)\n        list(APPEND X11_LIBRARIES \"Xi\")\n        set(ALLEGRO_XWINDOWS_WITH_XINPUT2 1)\n    else()\n        message(\"XInput2 library version 2.2 or higher not found, disabling touch support.\")\n    endif()\n\n    if(WANT_X11_XF86VIDMODE)\n        check_include_file(\"X11/extensions/xf86vmode.h\" HAVE_XF86VIDMODE_H)\n        check_library_exists(Xxf86vm XF86VidModeQueryExtension \"\" CAN_XF86VIDMODE)\n        if(CAN_XF86VIDMODE AND HAVE_XF86VIDMODE_H)\n            set(ALLEGRO_XWINDOWS_WITH_XF86VIDMODE 1)\n            list(APPEND X11_LIBRARIES \"Xxf86vm\")\n        endif()\n    endif(WANT_X11_XF86VIDMODE)\n\n    if(WANT_X11_XINERAMA)\n        check_include_file(\"X11/extensions/Xinerama.h\" HAVE_XINERAMA_H)\n        check_library_exists(Xinerama XineramaQueryExtension \"\" CAN_XINERAMA)\n        if(CAN_XINERAMA AND HAVE_XINERAMA_H)\n            set(ALLEGRO_XWINDOWS_WITH_XINERAMA 1)\n            find_library(XINERAMA_LIB \"Xinerama\")\n            list(APPEND X11_LIBRARIES \"${XINERAMA_LIB}\")\n        endif()\n    endif(WANT_X11_XINERAMA)\n\n    if(WANT_X11_XRANDR)\n        check_include_file(\"X11/extensions/Xrandr.h\" HAVE_XRANDR_H)\n        check_library_exists(Xrandr XRRQueryExtension \"\" CAN_XRANDR)\n        if(CAN_XRANDR AND HAVE_XRANDR_H)\n            set(ALLEGRO_XWINDOWS_WITH_XRANDR 1)\n            find_library(XRANDR_LIB \"Xrandr\")\n            list(APPEND X11_LIBRARIES \"${XRANDR_LIB}\")\n        endif()\n    endif(WANT_X11_XRANDR)\n\n    if(WANT_X11_XSCREENSAVER)\n        check_include_file(\"X11/extensions/scrnsaver.h\" HAVE_XSCREENSAVER_H)\n        check_library_exists(Xss XScreenSaverQueryExtension \"\" CAN_XSCREENSAVER)\n        if(CAN_XSCREENSAVER AND HAVE_XSCREENSAVER_H)\n            set(ALLEGRO_XWINDOWS_WITH_XSCREENSAVER 1)\n            find_library(XSCREENSAVER_LIB \"Xss\")\n            list(APPEND X11_LIBRARIES \"${XSCREENSAVER_LIB}\")\n        endif()\n    endif(WANT_X11_XSCREENSAVER)\n\n    if(NOT ALLEGRO_RASPBERRYPI)\n        check_library_exists(X11 XOpenIM \"\" CAN_XIM)\n        if(CAN_XIM)\n            set(ALLEGRO_XWINDOWS_WITH_XIM 1)\n        endif(CAN_XIM)\n    endif(NOT ALLEGRO_RASPBERRYPI)\n\n    set(CMAKE_REQUIRED_LIBRARIES)\nendif(SUPPORT_X11)\n\n#\n# Windows\n#\n\nif(WIN32)\n    find_package(DirectX)\n\n    if(DINPUT_FOUND)\n        # At least some copies of dinput.h redefine some types multiple times.\n        # We must add the directory as a system directory so that the compiler\n        # will suppress such errors.\n        include_directories(${DINPUT_INCLUDE_DIR})\n    else(DINPUT_FOUND)\n        message(FATAL_ERROR\n            \"Windows port requires DirectInput (not found).\")\n    endif(DINPUT_FOUND)\n\n    # Xinput support for xbox compatible controllers.\n    if(XINPUT_FOUND)\n        run_c_compile_test(\"\n            #include <xinput.h>\n            XINPUT_CAPABILITIES_EX x;\n            int main(void) { return 0; }\"\n            HAVE_XINPUT_CAPABILITIES_EX\n        )\n        if(HAVE_XINPUT_CAPABILITIES_EX)\n            set(ALLEGRO_CFG_HAVE_XINPUT_CAPABILITIES_EX 1)\n        endif()\n        set(SUPPORT_XINPUT 1)\n        set(ALLEGRO_CFG_XINPUT 1)\n    endif(XINPUT_FOUND)\n\n    if(WANT_D3D)\n        if(D3D9_FOUND)\n            set(SUPPORT_D3D 1)\n            set(ALLEGRO_CFG_D3D 1)\n        endif(D3D9_FOUND)\n    endif(WANT_D3D)\n\n    if(SUPPORT_D3D)\n        if(D3DX9_FOUND)\n            include_directories(BEFORE ${D3DX9_INCLUDE_DIR})\n            set(ALLEGRO_CFG_D3DX9 1)\n        else()\n            message(\"D3DX9 not found. You will not be able to compress or \"\n                    \"decompress textures on the GPU.\")\n        endif()\n    endif(SUPPORT_D3D)\n\n    if(WANT_D3D9EX AND SUPPORT_D3D)\n        set(ALLEGRO_CFG_D3D9EX 1)\n    endif(WANT_D3D9EX AND SUPPORT_D3D)\n\nendif(WIN32)\n\n#-----------------------------------------------------------------------------#\n#\n#   Main library\n#\n#-----------------------------------------------------------------------------#\n\nif(WIN32 AND SHARED)\n    if(NOT SUPPORT_D3D OR NOT SUPPORT_OPENGL)\n        message(\"WARNING: \"\n            \"Both D3D and OpenGL should be present for the SHARED build \"\n            \" to ensure maximum DLL compatibility.\")\n    endif(NOT SUPPORT_D3D OR NOT SUPPORT_OPENGL)\nendif(WIN32 AND SHARED)\n\n# List of source files need to compile Allegro in this configuration on\n# this platform.\nset(LIBRARY_SOURCES\n    ${ALLEGRO_SRC_FILES}\n    )\n\n# Libraries that we always need to link against on this platform.\nset(PLATFORM_LIBS)\n\nif(ALLEGRO_UNIX) # not MACOSX\n    list(APPEND LIBRARY_SOURCES ${ALLEGRO_SRC_UNIX_FILES})\n    list(APPEND PLATFORM_LIBS m ${CMAKE_THREAD_LIBS_INIT})\nendif(ALLEGRO_UNIX)\n\nif(SUPPORT_X11 AND NOT ALLEGRO_RASPBERRYPI)\n    list(APPEND LIBRARY_SOURCES ${ALLEGRO_SRC_X_FILES})\n    list(APPEND PLATFORM_LIBS ${X11_LIBRARIES})\nendif(SUPPORT_X11 AND NOT ALLEGRO_RASPBERRYPI)\n\nif(WIN32)\n    list(APPEND LIBRARY_SOURCES ${ALLEGRO_SRC_WIN_FILES})\n    list(APPEND PLATFORM_LIBS\n        user32 gdi32 comdlg32 ole32 winmm kernel32 psapi shlwapi\n        )\n    if(SUPPORT_D3D)\n        list(APPEND LIBRARY_SOURCES ${ALLEGRO_SRC_D3D_FILES})\n        list(APPEND PLATFORM_LIBS ${D3D9_LIBRARIES})\n    endif(SUPPORT_D3D)\n\n    list(APPEND PLATFORM_LIBS ${DINPUT_LIBRARIES})\n    if(MINGW AND NOT SHARED)\n        list(APPEND PLATFORM_LIBS stdc++)\n    endif(MINGW AND NOT SHARED)\nendif(WIN32)\n\nif(ALLEGRO_MACOSX)\n    list(APPEND LIBRARY_SOURCES ${ALLEGRO_SRC_MACOSX_FILES})\n    find_library(APPKIT_LIBRARY AppKit)\n    find_library(IOKIT_LIBRARY IOKit)\n    find_library(COREVIDEO_LIBRARY CoreVideo)\n    list(APPEND PLATFORM_LIBS ${APPKIT_LIBRARY})\n    list(APPEND PLATFORM_LIBS ${IOKIT_LIBRARY})\n    list(APPEND PLATFORM_LIBS ${COREVIDEO_LIBRARY})\nendif(ALLEGRO_MACOSX)\n\nif(IPHONE)\n    list(APPEND LIBRARY_SOURCES ${ALLEGRO_SRC_IPHONE_FILES})\nendif(IPHONE)\n\nif(ANDROID)\n    list(APPEND LIBRARY_SOURCES ${ALLEGRO_SRC_ANDROID_FILES})\n    list(APPEND PLATFORM_LIBS m log)\nendif(ANDROID)\n\nif(ALLEGRO_RASPBERRYPI)\n    list(APPEND LIBRARY_SOURCES ${ALLEGRO_SRC_RASPBERRYPI_FILES})\n    list(APPEND PLATFORM_LIBS ${X11_LIBRARIES})\nendif(ALLEGRO_RASPBERRYPI)\n\nif(SUPPORT_OPENGL)\n    list(APPEND LIBRARY_SOURCES ${ALLEGRO_SRC_OPENGL_FILES})\n    if(WIN32)\n        list(APPEND LIBRARY_SOURCES ${ALLEGRO_SRC_WGL_FILES})\n    endif(WIN32)\n    list(APPEND PLATFORM_LIBS ${OPENGL_LIBRARIES})\nendif(SUPPORT_OPENGL)\n\nif(SUPPORT_OPENGL AND WANT_SHADERS_GL AND NOT ALLEGRO_CFG_OPENGLES1)\n    set(ALLEGRO_CFG_SHADER_GLSL 1)\nendif()\n\nif(SUPPORT_D3D AND WANT_SHADERS_D3D AND D3DX9_FOUND)\n    set(ALLEGRO_CFG_SHADER_HLSL 1)\nendif()\n\n# Header files that we need to install.\nset(ALLEGRO_PUBLIC_HEADERS\n    ${ALLEGRO_INCLUDE_ALLEGRO_FILES}\n    ${ALLEGRO_INCLUDE_ALLEGRO_INLINE_FILES}\n    ${ALLEGRO_INCLUDE_ALLEGRO_INTERNAL_FILES}\n    ${ALLEGRO_INCLUDE_ALLEGRO_PLATFORM_FILES}\n    )\nif(WIN32)\n    list(APPEND ALLEGRO_PUBLIC_HEADERS\n        ${ALLEGRO_INCLUDE_ALLEGRO_WINDOWS_FILES}\n        )\nendif(WIN32)\nif(MACOSX)\n    list(APPEND ALLEGRO_PUBLIC_HEADERS\n        ${ALLEGRO_INCLUDE_ALLEGRO_MACOSX_FILES}\n        )\nendif(MACOSX)\nif(IPHONE)\n    list(APPEND ALLEGRO_PUBLIC_HEADERS\n        ${ALLEGRO_INCLUDE_ALLEGRO_IPHONE_FILES}\n        )\nendif(IPHONE)\nif(SUPPORT_X11 AND NOT ALLEGRO_RASPBERRYPI)\n    list(APPEND ALLEGRO_PUBLIC_HEADERS\n        ${ALLEGRO_INCLUDE_ALLEGRO_X_FILES}\n        )\nendif(SUPPORT_X11 AND NOT ALLEGRO_RASPBERRYPI)\nif(ANDROID)\n    list(APPEND ALLEGRO_PUBLIC_HEADERS ${ALLEGRO_INCLUDE_ALLEGRO_ANDROID_FILES})\nendif(ANDROID)\nif(SUPPORT_OPENGL)\n    list(APPEND ALLEGRO_PUBLIC_HEADERS\n        ${ALLEGRO_INCLUDE_ALLEGRO_OPENGL_FILES}\n        ${ALLEGRO_INCLUDE_ALLEGRO_OPENGL_GLEXT_FILES}\n        )\nendif(SUPPORT_OPENGL)\n\nforeach(genfile ${ALLEGRO_INCLUDE_ALLEGRO_PLATFORM_FILES_GENERATED})\n    list(APPEND ALLEGRO_PUBLIC_HEADERS\n        ${CMAKE_CURRENT_BINARY_DIR}/${genfile}\n        )\nendforeach(genfile)\n\nif(ALLEGRO_SDL)\n    list(APPEND LIBRARY_SOURCES ${ALLEGRO_SRC_SDL_FILES})\n    list(APPEND PLATFORM_LIBS ${SDL2_LIBRARY} m)\n    include_directories(${SDL2_INCLUDE_DIR})\nendif(ALLEGRO_SDL)\n\nset_our_header_properties(${ALLEGRO_PUBLIC_HEADERS})\nunset(ALLEGRO_TARGETS CACHE)\n\nif(NOT WANT_MONOLITH)\n    # ALLEGRO_LIB_BUILD is defined for all Allegro sources (core and addon)\n    # ALLEGRO_SRC is defined only while compiling the core sources (its use is\n    # to get the DLL #defines right under Windows for creating DLL export\n    # functions when it is defined or import DLL functions when it is not).\n    add_our_library(allegro\n        Allegro-${ALLEGRO_SOVERSION}\n        \"${LIBRARY_SOURCES};${ALLEGRO_PUBLIC_HEADERS}\"\n        \"${LIBRARY_CFLAGS} -DALLEGRO_SRC\"\n        \"${PLATFORM_LIBS}\"\n        )\nendif(NOT WANT_MONOLITH)\n\n# Addons and examples should link with this target.\nset(ALLEGRO_LINK_WITH allegro)\n\ninstall_our_headers(${ALLEGRO_PUBLIC_HEADERS})\n\n#-----------------------------------------------------------------------------#\n#\n# Add-ons\n#\n#-----------------------------------------------------------------------------#\n\nset(MONOLITH_SOURCES ${LIBRARY_SOURCES})\n\nadd_subdirectory(addons)\n\nif(WANT_MONOLITH)\n    include_directories(${MONOLITH_INCLUDE_DIRECTORIES})\n\n    # For OSX, we need to set the header location inside the framework for each\n    # file (relative to the current directory, so for example when the\n    # AllegroImage framework is built we need to set the path for\n    # allegro5/allegro_image.h but when the AllegroMonolith framework is built\n    # we need to set the path for addons/image/allegro5/allegro_image.h -\n    # otherwise the header is silently missing).\n    set_our_header_properties(${MONOLITH_HEADERS})\n\n    link_directories(${MONOLITH_LINK_DIRECTORIES})\n    add_our_library(allegro_monolith\n        AllegroMonolith-${ALLEGRO_SOVERSION}\n        \"${MONOLITH_SOURCES};${ALLEGRO_PUBLIC_HEADERS}\"\n        \"${LIBRARY_CFLAGS} -DALLEGRO_SRC ${MONOLITH_DEFINES}\"\n        \"${PLATFORM_LIBS};${MONOLITH_LIBRARIES}\"\n        )\n\n    set(ALLEGRO_MONOLITH_LINK_WITH allegro_monolith)\nendif(WANT_MONOLITH)\n\n#-----------------------------------------------------------------------------#\n#\n#   Produce configuration file\n#\n#-----------------------------------------------------------------------------#\n\nif(NO_FPU)\n    set(ALLEGRO_CFG_NO_FPU 1)\nendif(NO_FPU)\n\n# All relevant variables must be set before here.\nconfigure_file(\n    include/allegro5/platform/alplatf.h.cmake\n    ${PROJECT_BINARY_DIR}/include/allegro5/platform/alplatf.h\n    )\n\n#-----------------------------------------------------------------------------#\n#\n#   Android\n#\n#-----------------------------------------------------------------------------#\n\nif(ANDROID)\n    include(AndroidApp)\n    add_subdirectory(android)\nendif(ANDROID)\n\n#-----------------------------------------------------------------------------#\n#\n# Demo\n#\n#-----------------------------------------------------------------------------#\n\nif(NOT MSVC80 AND WANT_DEMO) # XXX disabled because it breaks MSVC's intellisense for some reason\n    add_subdirectory(demos/cosmic_protector)\n    add_subdirectory(demos/speed)\n    add_subdirectory(demos/skater)\n    add_subdirectory(demos/shooter)\nendif(NOT MSVC80 AND WANT_DEMO)\n\n#-----------------------------------------------------------------------------#\n#\n# Examples\n#\n#-----------------------------------------------------------------------------#\n\nif(WANT_EXAMPLES)\n    add_subdirectory(examples)\nendif(WANT_EXAMPLES)\n\n#-----------------------------------------------------------------------------#\n#\n# Tests\n#\n#-----------------------------------------------------------------------------#\n\nif(WANT_TESTS)\n    add_subdirectory(tests)\nendif(WANT_TESTS)\n\n#-----------------------------------------------------------------------------#\n#\n# Example data\n#\n#-----------------------------------------------------------------------------#\n\ncopy_data_dir_to_build(copy_example_data\n    \"${CMAKE_CURRENT_SOURCE_DIR}/examples/data\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/examples/data\"\n    )\n\n#-----------------------------------------------------------------------------#\n#\n# contrib/Luajit\n#\n#-----------------------------------------------------------------------------#\n\nif(WANT_LUAJIT)\n    add_subdirectory(contrib/luajit)\nendif(WANT_LUAJIT)\n\n#-----------------------------------------------------------------------------#\n#\n#   pkg-config files\n#\n#-----------------------------------------------------------------------------#\n\nset(prefix \"${CMAKE_INSTALL_PREFIX}\")\nset(INCLUDE_PREFIX \"\\${prefix}\")\n# XXX these should be configurable separately\nset(bindir \"\\${exec_prefix}/bin\")\nset(includedir \"\\${prefix}/include\")\nset(libdir \"\\${exec_prefix}/lib${LIB_SUFFIX}\")\n\nif(WANT_MONOLITH)\n    set(PKG_CONFIG_FILES allegro_monolith)\nelse()\n    set(PKG_CONFIG_FILES allegro ${ADDON_PKG_CONFIG_FILES})\nendif(WANT_MONOLITH)\n\n# Install pkg-config files on Unix, and when cross-compiling on Unix.\n\nif(UNIX AND NOT WANT_FRAMEWORKS AND NOT IPHONE)\n    set(INSTALL_PKG_CONFIG_FILES true)\nendif()\nif(CMAKE_CROSSCOMPILING AND CMAKE_HOST_UNIX)\n    set(INSTALL_PKG_CONFIG_FILES true)\nendif()\n\nif(INSTALL_PKG_CONFIG_FILES)\n    append_lib_type_suffix(lib_type)\n    append_lib_linkage_suffix(lib_linkage)\n\n    # Our pkg-config files are now named allegro*-5.pc, which will\n    # work across branches. Allegro 5.0.8 and prior used the names\n    # allegro*-5.0.pc so on the 5.0 branch we will continue to install\n    # those files, for backwards compatibility.\n    foreach(versuffix 5)\n        foreach(name ${PKG_CONFIG_FILES})\n            if (SHARED)\n                set(outname ${name}${lib_type}-${versuffix}.pc)\n            else (SHARED)\n                # For static linking: get extra libraries to link with.\n                get_target_property(link_with ${name} static_link_with)\n                set(outname ${name}${lib_type}-static-${versuffix}.pc)\n            endif (SHARED)\n            configure_file(\n                misc/${name}.pc.in\n                ${LIBRARY_OUTPUT_PATH}/pkgconfig/${outname}\n                @ONLY\n                )\n            install(FILES ${LIBRARY_OUTPUT_PATH}/pkgconfig/${outname}\n                DESTINATION \"lib${LIB_SUFFIX}/pkgconfig\"\n                )\n        endforeach(name)\n    endforeach(versuffix)\nendif(INSTALL_PKG_CONFIG_FILES)\n\n# Generate CMake package-config files\ninclude(CMakePackageConfigHelpers)\ninclude(GNUInstallDirs)\n\nset(PKG_NAME \"Allegro\")\nstring(TOLOWER ${PKG_NAME} PKG_NAME_LOWER)\n\nset(PKG_CONFIG_INSTALL_DIR \"${CMAKE_INSTALL_LIBDIR}/cmake/${PKG_NAME_LOWER}\")\nset(PKG_GENERATED_DIR \"${CMAKE_CURRENT_BINARY_DIR}/generated\")\nset(PKG_TARGETS_NAME \"${PKG_NAME}Targets\")\nset(PKG_CONFIG_FILE \"${PKG_GENERATED_DIR}/${PKG_NAME}Config.cmake\")\nset(PKG_VERSION_FILE \"${PKG_GENERATED_DIR}/${PKG_NAME}ConfigVersion.cmake\")\n\nconfigure_package_config_file(\n  \"${CMAKE_CURRENT_LIST_DIR}/cmake/${PKG_NAME}Config.cmake.in\"\n  ${PKG_CONFIG_FILE}\n  INSTALL_DESTINATION ${PKG_CONFIG_INSTALL_DIR}\n  NO_SET_AND_CHECK_MACRO\n  NO_CHECK_REQUIRED_COMPONENTS_MACRO\n)\nwrite_basic_package_version_file(${PKG_VERSION_FILE}\n  VERSION ${ALLEGRO_VERSION}\n  COMPATIBILITY AnyNewerVersion\n)\ninstall(\n  TARGETS ${ALLEGRO_TARGETS}\n  EXPORT ${PKG_TARGETS_NAME}\n)\ninstall(\n  EXPORT ${PKG_TARGETS_NAME}\n  NAMESPACE ${PKG_NAME}::\n  DESTINATION ${PKG_CONFIG_INSTALL_DIR}\n)\ninstall(\n  FILES ${PKG_CONFIG_FILE} ${PKG_VERSION_FILE}\n  DESTINATION ${PKG_CONFIG_INSTALL_DIR}\n)\n\n\n#-----------------------------------------------------------------------------#\n#\n#   Documentation\n#\n#-----------------------------------------------------------------------------#\n\nif(WANT_DOCS)\n    add_subdirectory(docs)\nendif(WANT_DOCS)\n\n#-----------------------------------------------------------------------------#\n#\n#   Wrappers\n#\n#-----------------------------------------------------------------------------#\n\nif(WANT_PYTHON_WRAPPER)\n    add_subdirectory(python)\nendif(WANT_PYTHON_WRAPPER)\n\n#-----------------------------------------------------------------------------#\n#\n#   Configuration summary\n#\n#-----------------------------------------------------------------------------#\n\n# Output a report string showing what features are supported.\nmessage(NOTICE \"${SPACER}\\n${CONFIGURATION_SUMMARY}${SPACER}\\n\")\n\n\n#-----------------------------------------------------------------------------#\n# vim: set sts=4 sw=4 et:\n"
        },
        {
          "name": "CONTRIBUTORS.txt",
          "type": "blob",
          "size": 1.3984375,
          "content": "People who have contributed code to Allegro 5:\n\nAaron Bolyard\nAldo Nunez\nAldrik Ramaekers\nAndreas Rönnquist\nAngelo Mottola\nArves100\nBQ\nBen Davis\nBeoran\nBoris Carvajal\nBruce Pascoe\nBruno Félix Rezende Ribeiro\nChris Robinson\nChristian Mauduit (ufoot)\nDaniel Johnson\nDavid Capello\nDennis Busch\nDennis Gooden\nDoug Thompson\nDouglas Mencken\nEdgar Reynaldo\nElectricSolstice\nElias Pschernig\nEric Botcazou\nErich Erstu\nEvert Glebbeek\nFirat Salgur\nGabriel Queiroz\nGeorge Foot\nGrzegorz Adam Hankiewicz\nHenrik Stokseth\nHyena\nIsaac Cruz\nJavier González Garcés\nJeff Bernard\nJohn-Kim Murphy\nJonathan Lilliemarck\nJonathan Seeley\nJordan Woehr\nJulian Smythe\nMarcus Calhoun-Lopez\nMark Oates\nMarkus Henschel\nMartijn van Iersel\nMatt Smith\nMatthew Leverton\nMax Savenkov\nMichael Bukin\nMichael Swiger\nMichał Cichoń\nMiguel A. Gavidia\nMilan Mimica\nNick Black\nNick Trout\nPeter Hull\nPeter Wang\nPolybios\nReuben Bell\nRobert MacGregor\nRobert Ohannessian\nRodolfo Lam\nRyan Dickie\nRyan Gumbs\nRyan Patterson\nRyan Roden-Corrent\nSebastian Krzyszkowiak\nSiegeLord\nSimon Naarmann\nsleepywind\nSteven Wallace\nSven Sandberg\nThomas Fjellstrom\nTobias Hansen\nTobias Scheuer\nTodd Cope\nTom Bass\nTrent Gamblin\nVitaliy V. Tokarev\n[bk]door.maus\nbeoran\ngameovera\njmasterx\njuvinious\nkazzmir\nkoro\npedro-w\npkrcel\nsimast\nsleepywind\ntorhu\ntwobit\nverderten\nvkensou\n\nPlease let us know if we left anyone out.\n\nWe must also thank everyone who contributed to previous versions of Allegro!\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 4.3740234375,
          "content": "Copyright (c) 2004-2024 the Allegro 5 Development Team\n\nThis software is provided 'as-is', without any express or implied\nwarranty. In no event will the authors be held liable for any damages\narising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n\n    1. The origin of this software must not be misrepresented; you must not\n    claim that you wrote the original software. If you use this software\n    in a product, an acknowledgment in the product documentation would be\n    appreciated but is not required.\n\n    2. Altered source versions must be plainly marked as such, and must not be\n    misrepresented as being the original software.\n\n    3. This notice may not be removed or altered from any source\n    distribution.\n\n-------------------------------------------------------------------------------\n\nAllegro includes some files from bstrlib under the following terms.\n<http://bstring.sourceforge.net/>\n\nCopyright (c) 2002-2008 Paul Hsieh\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n    Redistributions of source code must retain the above copyright notice,\n    this list of conditions and the following disclaimer.\n\n    Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\n    Neither the name of bstrlib nor the names of its contributors may be used\n    to endorse or promote products derived from this software without\n    specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n\n-------------------------------------------------------------------------------\n\nAllegro includes the following files originally based on SDL 2.0.0:\n\n- src/macosx/osxclipboard.c\n- src/win/wclipboard.c\n- src/x/xclipboard.c\n\nThese files are licensed under the under the following terms:\n\n  Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>\n\n  This software is provided 'as-is', without any express or implied\n  warranty.  In no event will the authors be held liable for any damages\n  arising from the use of this software.\n\n  Permission is granted to anyone to use this software for any purpose,\n  including commercial applications, and to alter it and redistribute it\n  freely, subject to the following restrictions:\n\n  1. The origin of this software must not be misrepresented; you must not\n     claim that you wrote the original software. If you use this software\n     in a product, an acknowledgment in the product documentation would be\n     appreciated but is not required.\n  2. Altered source versions must be plainly marked as such, and must not be\n     misrepresented as being the original software.\n  3. This notice may not be removed or altered from any source distribution.\n\n-------------------------------------------------------------------------------\n\nSome Allegro examples use a font from DejaVu fonts, their license can\nbe found here:\n<http://dejavu-fonts.org/wiki/index.php?title=License>\n\nSome Allegro examples use a font from NotoColorEmoji fonts, their license can\nbe found here:\n<https://fonts.google.com/noto/specimen/Noto+Color+Emoji/license>\n\n-------------------------------------------------------------------------------\n\nThe Cosmic Protector demo game graphics were made by Tony Huisman, and are\nincluded under a Creative Commons BY Attribution license. The music in Cosmic\nProtector was purchased from a royalty free website and should not be used\noutside the game.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.009765625,
          "content": "README.txt"
        },
        {
          "name": "README.txt",
          "type": "blob",
          "size": 6.650390625,
          "content": "Welcome to Allegro!\n===================\n\nAllegro is a cross-platform library mainly aimed at video game and\nmultimedia programming. It handles common, low-level tasks such as\ncreating windows, accepting user input, loading data, drawing images,\nplaying sounds, etc. and generally abstracting away the underlying\nplatform. However, Allegro is not a game engine: you are free to design\nand structure your program as you like.\n\nAllegro 5 has the following additional features:\n\n- Supported on Windows, Linux, Mac OSX, iPhone and Android\n- User-friendly, intuitive C API usable from C++ and many other programming languages\n- Hardware accelerated bitmap and graphical primitive drawing support (via OpenGL or Direct3D)\n- Audio recording support\n- Font loading and drawing\n- Video playback\n- Abstractions over shaders and low-level polygon drawing\n- And more!\n\nThis readme contains general information which applies to all platforms\nthat Allegro builds on.\n\nREADME_cmake.txt discusses some build options for cmake.\n\nREADME_msvc.txt discusses compilation on Windows with Microsoft Visual C/C++.\n\nREADME_make.txt discusses compilation with GNU make.  This applies to Unix-like\noperating systems such as Linux, MacOS X and MinGW on Windows.\n\nREADME_macosx.txt has a few additional notes for MacOS X.\n\nREADME_iphone.txt discusses iPhone operating systems.\n\n\n\nRequirements\n============\n\nWe assume you have C and C++ compilers installed and functioning.\nWe support gcc, clang and MSVC.\n\nAllegro also requires CMake 3.0 or later to build.\nYou may download it from <http://www.cmake.org/>\n\n\n\nLibrary dependencies\n====================\n\nAllegro is divided into a core library and a number of addon libraries.\nThe core library depends on certain libraries to function.  If you don't have\nthose, nothing will work.  These are required for the core library:\n\n- DirectX SDK (Windows only)\n\n  You can get this for MSVC from the Microsoft web site (large download).\n\n  Alternatively, smaller downloads for MSVC and MinGW are available\n  here: <http://liballeg.org/download.html#miscellaneous-files>. Some\n  MinGW distributions come with sufficient DirectX SDK to support\n  compiling Allegro.\n\n- X11 development libraries (Linux/Unix only)\n  The libraries will be part of your Linux distribution, but you may have to\n  install them explicitly.\n\n- OpenGL development libraries (optional only on Windows)\n\nThe addons, too, may require additional libraries.  Since the addons are\nstrictly optional, they are not required to build Allegro, but a lot of\nfunctionality may be disabled if they are not present.\n\nWindows users may find some precompiled binaries for the additional libraries\nfrom <http://gnuwin32.sourceforge.net/>.  You need to get the `bin` and `lib`\npackages.  The `bin` packages contain DLLs, and the `lib` packages contain the\nheaders and import libraries.\n\nMac users may find some dependencies in Homebrew, Fink or MacPorts.\n<http://brew.sh/>, <http://www.finkproject.org/> and\n<http://www.macports.org/>\n\nLinux users likely have all the dependencies already, except PhysicsFS\nand DUMB. If your distribution uses separate development packages, they\nwill need to be installed.  The packages are probably named *-dev or *-devel.\n\nThese are the dependencies required for the addons:\n\n- libpng and zlib, for PNG image support (Unix and older MinGW only)\n  Home page: <http://www.libpng.org/pub/png/>\n  Windows binaries: <http://gnuwin32.sourceforge.net/packages/libpng.htm>\n\n  On Windows/Mac OS X/iPhone/Android, PNG image support is available by\n  using the native facilities on the respective operating systems, so\n  libpng is not required.\n\n- libjpeg, for JPEG image support (Unix and older MinGW only)\n  Home page: <http://www.ijg.org/>\n  Windows binaries: <http://gnuwin32.sourceforge.net/packages/jpeg.htm>\n\n  On Windows/Mac OS X/iPhone/Android, JPEG image support is available\n  by using the native facilities on the respective operating systems,\n  so libjpeg is not required.\n\n- libwebp, for WebP image support\n  Home page: <https://developers.google.com/speed/webp/>\n\n  On Android, WebP image support is available by using the native\n  facilities of the operating system, so libwebp is not required.\n\n- FreeType, for TrueType font support.\n  Home page: <http://freetype.sourceforge.net/>\n  Windows binaries: <http://gnuwin32.sourceforge.net/packages/freetype.htm>\n\n- Ogg Vorbis, a free lossy audio format. (libogg, libvorbis, libvorbisfile)\n  Home page: <http://www.vorbis.com/>\n\n- Opus, a free lossy audio codec. (libogg, libopus, libopusfile)\n  Home page: <http://www.opus-codec.org/>\n\n- FLAC, a free lossless audio codec. (libFLAC, libogg)\n  Home page: <http://flac.sourceforge.net/>\n\n- DUMB, an IT, XM, S3M and MOD player library. (libdumb)\n  Home page: <http://dumb.sourceforge.net/>\n\n- OpenAL, a 3D audio API.\n  The audio addon can use OpenAL, although the 3D capabilities aren't used.\n  <http://kcat.strangesoft.net/openal.html>\n\n  On Mac OS X, OpenAL is *required* but should come with the OS anyway.\n\n  On Linux and Windows, OpenAL will only be used if you request it, hence there\n  is no reason to install it specifically.\n\n- PhysicsFS, provides access to archives, e.g. .zip files.\n  Home page: <http://icculus.org/physfs/>\n\nOn Windows it may be a pain to place all these libraries such that they can be\nfound.  Please see the README_cmake.txt section on the \"deps subdirectory\"\nwhen the time comes.\n\n\n\nAPI documentation\n=================\n\nTo build the documentation you will need Pandoc.\nPandoc's home page is <http://johnmacfarlane.net/pandoc/>\n\nInstalling Pandoc from source can be challenging, but you can build Allegro\nwithout building the documentation.\n\nOnline documentation is available on the Allegro web site:\n<http://docs.liballeg.org/>\n\n\n\nBuilding with CMake\n===================\n\nBuilding with CMake is a two step process.  During the _configuration_ step,\ncmake will detect your compiler setup and find the libraries which are\ninstalled on your system.  At the same time, you may select options to\ncustomise your build.  If you are unsure of what you are doing, leave all the\noptions at the defaults.\n\nYou must configure Allegro with a separate build directory. For example,\n\n    mkdir build\n    cd build\n    cmake ..\n\nIf you configure Allegro to build in the source directory (i.e. `cmake .`)\nyou will get an error message. Delete `CMakeCache.txt` and the `CMakeFiles`\ndirectory and re-configure as described above.\n\nOnce the configuration step is successful, you will invoke another tool to\nbuild Allegro.  The tool depends on your compiler, but is usually either\n`make`, or your IDE.\n\nTo avoid problems, unpack Allegro into a directory *without spaces or other\n\"weird\" characters in the path*.  This is a known problem.\n\nNow read README_msvc.txt, README_make.txt or README_macosx.txt.\n\n"
        },
        {
          "name": "README_android.txt",
          "type": "blob",
          "size": 12.5771484375,
          "content": "Android\n=======\n\nThis port should support Android 3.1 (Honeycomb, API level 13) and above.\n\n\nDependencies\n============\n\nThis port depends on having CMake, the Android SDK, the Android NDK and\na Java JDK.\n\nWe assume you are building on Linux or otherwise a Unix-like system,\nincluding MSYS.\n\n\nInstall the SDK\n===============\n\n\nThe most simple way is to install Android Studio which by default will\nplace a copy of the SDK into ~/Android/Sdk.\n\nAlternatively you can also download the command-line SDK tools. In that\ncase you will have to accept the licenses, for example like this:\n\n    ~/Android/Sdk/tools/bin/sdkmanager --licenses\n\n\nInstall the NDK\n===============\n\n\nThe most simple way is again to use Android Studio. Create a new project\nwith C++ support and it will ask you if you want to install the NDK and\nwill then proceed to place it into ~/Android/Sdk/ndk-bundle.\n\nAlternatively you can download the NDK and place anywhere you like.\n\n\nJava\n====\n\n\nAndroid Studio comes with a java runtime environment. To use it for\nbuilding Android libraries set the evironment variable JAVA_HOME like\nthis:\n\nexport JAVA_HOME=~/android-studio/jre\n\n\n\nBuild dependencies for Allegro\n==============================\n\nNow you should build the dependencies for the Allegro addons that you want\n(you can skip this if just want to try out some simple examples). Most of\nthe libraries use the standard GNU build system, and follow the same pattern.\nFor example, to build libpng:\n\n    tar zxf libpng-1.6.37.tar.xz\n    cd libpng-1.6.37\n    # see https://developer.android.com/ndk/guides/other_build_systems\n    export ABI=armeabi-v7a\n    export HOST=arm-linux-androideabi\n    export CHOST=armv7a-linux-androideabi\n    export SDK=21\n    export HOST_TAG=linux-x86_64\n    export PREFIX=$HOME/allegro/build/deps\n    export NDK=$HOME/Android/Sdk/ndk-bundle\n    export TOOLCHAIN=$NDK/toolchains/llvm/prebuilt/$HOST_TAG\n    export AR=$TOOLCHAIN/bin/$HOST-ar\n    export AS=$TOOLCHAIN/bin/$HOST-as\n    export CC=$TOOLCHAIN/bin/$CHOST$SDK-clang\n    export CXX=$TOOLCHAIN/bin/$CHOST$SDK-clang++\n    export LD=$TOOLCHAIN/bin/$HOST-ld\n    export RANLIB=$TOOLCHAIN/bin/$HOST-ranlib\n    export STRIP=$TOOLCHAIN/bin/$HOST-strip\n    ./configure --host $HOST --prefix $PREFIX\n    make\n    make install\n\nFor HOST_TAG you will want:\n    linux-x86_64 if you are using Linux\n    darwin-x86_64 in OSX\n    windows in 32-bit Windows\n    windows-x86_64 in 64-bit Windows\n\nFor ABI and HOST you will generally use the following (use a separate build folder for each):\n\n    if ABI == \"x86\" then HOST = \"i686-linux-android\"\n    if ABI == \"x86_64\" then HOST = \"x86_64-linux-android\"\n    if ABI == \"armeabi-v7\" then HOST = \"arm-linux-androideabi\"\n    if ABI == \"arm64-v8a\" then HOST = \"aarch64-linux-android\"\n\nCHOST is HOST, except if ABI is armeabi-v7 then CHOST = \"armv7a-linux-android\".\n\nThe above commands will usually install both static and shared libraries into\nthe `deps` directory where it can be found by CMake, next.  If you want only\nstatic or shared libraries, you can usually pass `--disable-static` or\n`--disable-shared` to configure.\n\nThe static libraries should be easier to use (though I often had problems with\nunresolved symbols when it came to run the programs, to investigate later).\n\nIf you wish to use shared libraries, be aware that shared objects must be\nnamed like \"libFOO.so\", despite standard practice.  Most libraries you build\nwill have version suffixes by default, e.g. libpng16.so.1.6.  Renaming the\nfile after it is produced will not work as the versions are embedded as the\nsoname.  For libraries built using libtool, you can avoid the version suffixes\nas follows:\n\n    make LDFLAGS=-avoid-version\n    make LDFLAGS=-avoid-version install\n\nthough you may want to edit the Makefiles instead to avoid overriding\nimportant flags in LDFLAGS.\n\nYou need to ensure that CMake finds the the library file that matches the\nsoname.  Either delete the symlinks (e.g. libpng.so -> libpng16.so)\nor modify the paths in CMake variables manually.\n\n\nBuilding Allegro\n================\n\nThe following steps will build Allegro for Android. It uses the cmake\ntoolchain provided by the Android NDK. (Adjust the path if yours is not\nunder ~/Android/Sdk/ndk-bundle.)\n\n    mkdir build_android_armeabi-v7a\n    cd build_android_armeabi-v7a\n    cmake .. -DCMAKE_TOOLCHAIN_FILE=~/Android/Sdk/ndk-bundle/build/cmake/android.toolchain.cmake\n        -DANDROID_ABI=armeabi-v7a\n        -DCMAKE_BUILD_TYPE=RelWithDebInfo\n        -DWANT_EXAMPLES=ON\n        -DCMAKE_INSTALL_PREFIX=~/allegro/build/deps\n\nYou can also use all the normal cmake options supported by Allegro or\nrun cmake (or cmake-gui) to modify them.\n\n    Finally run:\n\n    make\n    make install\n\nChange ANDROID_ABI to whichever architecture you are building for.\nThe recognized architectures are:\n\n    -DANDROID_ABI=\"armeabi\"\n    -DANDROID_ABI=\"armeabi-v7a\"\n    -DANDROID_ABI=\"armeabi-v7a with NEON\"\n    -DANDROID_ABI=\"arm64-v8a\"\n    -DANDROID_ABI=\"x86\"\n    -DANDROID_ABI=\"x86_64\"\n\nSee here for more information: https://developer.android.com/ndk/guides/abis.html\n\nThis produces the normal Allegro native libraries (liballegro-*.so) as\nwell as allegro-release.aar.\n\nYou may want to add -DWANT_MONOLITH=ON if you prefer a single Allegro library\ninstead of one for each addon.\n\n\nRunning examples\n================\n\nYou need the adb tool (the Android Debug Bridge) set up, and USB debugging\nenabled on your device or emulator. This can be quite involved, so please\nrefer to the Android tool documentation.\n\nThere are makefile targets named \"run_FOO\", so you can install and run\nexamples easily by typing, e.g.\n\n    make run_speed\n\nMany demos and examples do work, minimally, but most do not support touch\ninput or react to orientation changes, etc. Good examples to try are\nex_draw_bitmap and ex_touch_input.\n\nIf you want to build just the .apk for an example, there are targets\nfor that as well:\n\n    make ex_draw_bitmap_apk\n    adb -d install -r ./examples/ex_draw_bitmap.project/app/build/outputs/apk/debug/app-debug.apk\n    adb -d shell 'am start -n org.liballeg.ex_draw_bitmap/org.liballeg.app.MainActivity'\n\n\nHow startup works on Android\n============================\n\nThe startup process begins with your application's MainActivity class.\nIn the static initialiser for the Activity, you must manually load the\nshared libraries that you require, i.e. Allegro and its addons,\nwith dependencies loaded first.  For a C++ program, you may need to load\nthe shared library of your chosen STL implementation.\n\nAfter that the onCreate method of the AllegroActivity will be executed, which\ndoes some Allegro initialisation.  Allegro will then load your application\nfrom another shared library.  The library name can be specified by overriding\nthe constructor in your Activity class, otherwise the default is \"libapp.so\".\nAfter loading, the `main` function in the library is finally called.\n\nPoking around in the android/example directory may help.\n\n\nUsing Allegro in your game\n==========================\n\nIf you build with examples or demos, look into your build folder for\nany of them, for example\n\nbuild/demos/speed\n\nIt will have a folder called speed.project which is a gradle project\nready to compile for Android. You can use it as a template for your\nown game code. (Either by opening it in Android Studio or by using\ncommandline gradle to compile.)\n\nRead the next section if you would like to create an Android project\nusing Allegro from scratch.\n\n\nUsing Allegro in a new project\n==============================\n\nStart Android Studio.\n\nNote: Android Studio is not strictly required, you can edit the files mentioned\nbelow with any text editor instead of in Android Studio and run ./gradlew instead\nof rebuilding from within the IDE.\nAndroid Studio just is usually more convenient to use when porting a game to Android.\n\nOn the welcome dialog, select \"Start a new Android Studio project\".\n\nOn the \"Create Android Project\" screen, make sure to check the\n\"Include C++ support\" checkbox and click Next.\n\nOn the \"Target Android Devices\" screen leave everything at the defaults\nand click Next.\n\nOn the \"Add an Activity to Mobile\" screen pick \"Empty Activity\".\n\nOn the \"Configure Activity\" screen leave the defaults and click Next.\n\nOn the \"Customize C++ Support\" screen leave everything at defaults\nand click Finish.\n\nYou should be able to click the green arrow at the top and run your\napplication. If not make sure to fix any problems in your Android\nStudio setup - usually it will prompt you to download any missing\ncomponents like the NDK or (the special Android) CMake. After that you\nshould be able to run your new Android app, either in an emulator or on\na real device.\n\nThe program we now have already shows how to mix native code and Java\ncode, it just does not use Allegro yet.\n\nFind MainActivity.java and adapt it to look like this (do not\nmodify your package line at the top though):\n\nimport org.liballeg.android.AllegroActivity;\npublic class MainActivity extends AllegroActivity {\n    static {\n        System.loadLibrary(\"allegro\");\n        System.loadLibrary(\"allegro_primitives\");\n        System.loadLibrary(\"allegro_image\");\n        System.loadLibrary(\"allegro_font\");\n        System.loadLibrary(\"allegro_ttf\");\n        System.loadLibrary(\"allegro_audio\");\n        System.loadLibrary(\"allegro_acodec\");\n        System.loadLibrary(\"allegro_color\");\n    }\n    public MainActivity() {\n        super(\"libnative-lib.so\");\n    }\n}\n\nIf you used the monolith library, you only need a single\nSystem.loadLibrary for that.\n\nThe \"import org.liballeg.android.AllegroActivity\" line will be red.\nLet's fix that. Find the allegro-release.aar from build/lib, where\nbuild is the build folder you used when building Allegro. Open your\nProject-level build.gradle and make your \"allprojects\" section look\nlike this:\n\nallprojects {\n    repositories {\n        google()\n        jcenter()\n        flatDir { dirs 'libs' }\n    }\n}\n\nThen copy allegro-release.aar into the app/libs folder of your Android\nStudio project. For example I did the following:\n\ncp ~/allegro-build/lib/allegro-release.aar ~/AndroidStudioProjects/MyApplication/app/libs/\n\nNow open your app-level build.gradle and add this line inside of the\ndependencies section:\n\nimplementation \"org.liballeg.android:allegro-release:1.0@aar\"\n\nOn older versions of Android studio use this instead:\n\ncompile \"org.liballeg.android:allegro-release:1.0@aar\"\n\nNext hit the \"Sync Now\" link that should have appeared at the top of\nAndroid Studio. If you look back at MainActivity.java, nothing should\nbe red any longer.\n\nNow run your app again.\n\nIt will open but crash right away. That is because we are still using\nthe sample C++ code. Let's instead use some Allegro code. Find the\nnative-lib.cpp and replace its code with this:\n\n#include <allegro5/allegro5.h>\n\n int main(int argc, char **argv) {\n     al_init();\n     auto display = al_create_display(0, 0);\n     auto queue = al_create_event_queue();\n     auto timer = al_create_timer(1 / 60.0);\n     auto redraw = true;\n     al_register_event_source(queue, al_get_display_event_source(display));\n     al_register_event_source(queue, al_get_timer_event_source(timer));\n     al_start_timer(timer);\n     while (true) {\n         if (redraw) {\n             al_clear_to_color(al_map_rgb_f(1, al_get_time() - (int)(al_get_time()), 0));\n             al_flip_display();\n             redraw = false;\n         }\n         ALLEGRO_EVENT event;\n         al_wait_for_event(queue, &event);\n         if (event.type == ALLEGRO_EVENT_TIMER) {\n             redraw = true;\n         }\n     }\n     return 0;\n }\n\nThe #include <allegro5/allegro5.h> will be red. Oh no. Again, let's fix\nit. Find CMakeLists.txt under External Build Files and add a line like\nthis:\n\ninclude_directories(${ANDROID_NDK_TOOLCHAIN_ROOT}/user/{ARCH}/include)\n\nWhere ${ANDROID_NDK_TOOLCHAIN_ROOT}/user/{ARCH} should be the path where\nthe Allegro headers were installed during Allegro's \"make install\", for\nexample:\n\ninclude_directories($HOME/android-toolchain-arm/user/arm/include)\n\nThen add a line like this:\n\ntarget_link_libraries(native-lib ${ANDROID_NDK_TOOLCHAIN_ROOT}/user/{ARCH}/lib/liballegro.so)\n\nFor example:\n\ntarget_link_libraries(native-lib $HOME/android-toolchain-arm/user/arm/lib/liballegro.so)\n\nFinally, create these folders in your project:\n\napp/src/main/jniLibs/armeabi-v7a\napp/src/main/jniLibs/arm64-v8a\napp/src/main/jniLibs/x86\napp/src/main/jniLibs/x86_64\napp/src/main/jniLibs/mips\napp/src/main/jniLibs/mips64\n\nAnd copy the .so files in the corresponding folder for its architecture.\n\nYou may have to use \"Build->Refresh Linked C++ Projects\" for Android\nStudio to pick up the CMakeLists.txt changes.\n\nRun the app again. If it worked, congratulations! You just ran your\nfirst Allegro program on Android!\n\n(The sample code will just flash your screen yellow and red with no way to quit, so you will have to force quit it.)\n"
        },
        {
          "name": "README_cmake.txt",
          "type": "blob",
          "size": 1.17578125,
          "content": "CMake options\n-------------\n\nOur build system supports many options.  Here are some of them:\n\nThe option `CMAKE_BUILD_TYPE` selects release, debug or profiling\nconfigurations.  Valid values are: Release, Debug, RelWithDebInfo, MinSizeRel,\nProfile.\n\nThe option `SHARED` controls whether libraries are built as shared libraries\nor static libraries.  Shared libraries are built by default.\n\n*Note:* For MinGW with gcc < 4, you cannot build a static library because\nTLS (thread local storage, using __thread) support was not introduced\nuntil version 4.\n\nThere are many options named WANT_*.  Unselecting these will prevent the\nassociated addon or feature from being built.\n\nHTML and man page documentation will be built by default, but Info and PDF\n(through pdfLaTeX) can also be selected from the CMake options.\n\n\n\ndeps subdirectory\n-----------------\n\nAs a convenience, you may create a subdirectory called \"deps\" in the main\nAllegro directory, or in the build directory.  Inside you can place header and\nlibrary files for dependencies that Allegro will search for.  Allegro will\nsearch in these locations:\n\n        deps/include\n        deps/lib\n        deps/<anything>/include\n        deps/<anything>/lib\n\n"
        },
        {
          "name": "README_iphone.txt",
          "type": "blob",
          "size": 2.7490234375,
          "content": "iPhone\n======\n\nCan use either OpenGL ES 1 or 2 for graphics, by default OpenGL ES 1 is\nused.\n\nThe accelerometer axes are reported as joystick axes.\n\nDependencies\n------------\n\nThe download section on liballeg.org has some pre-compiled iPhone\nversions of Freetype (.ttf support), Tremor (.ogg support) and\nPhysfs (.zip) support.\n\nMake a directory in the root allegro5 directory called deps. Off of that\nmake an include directory and put your headers there. The structure should\nlook like:\n\nallegro5\n    deps\n        include\n            allegro5\n                <copy this from misc/Allegro 5 iOS>\n            freetype2\n                <ft2build.h etc here>\n            physfs.h\n\nBuilding using CMake\n--------------------\n\nTo build for the iOS simulator, run these commands from the build directory:\n\n    cmake -DCMAKE_TOOLCHAIN_FILE=../cmake/Toolchain-iphone.cmake -G Xcode \\\n    -DIOS_PLATFORM=\"iphonesimulator\" ..\n    xcodebuild\n\nThis will generate the static libraries inside the lib/RelWithDebInfo directory\nby default. Note that cmake will occasionally pick up the OSX dependencies,\nrather than the iPhone dependencies. If that happens, you may want to disable\nthe system you don't want via cmake (e.g. -DWANT_PHYSFS=no).\n\nYou can also open the XCode project (named ALLEGRO.xcodeproj) and run the\nexamples.\n\nTo build for the iOS device, the procedure is similar. It is easiest to disable\nthe building of demos, examples and tests as those currently require manual\nmodification of the generated XCode project (to enable code signing).\n\n    cmake -DCMAKE_TOOLCHAIN_FILE=../cmake/Toolchain-iphone.cmake -G Xcode \\\n    -DIOS_PLATFORM=\"iphoneos\" -DWANT_EXAMPLES=off -DWANT_DEMO=off -DWANT_TESTS=off ..\n    xcodebuild\n\nThis should generate some ARM libraries in the same location. You might need to\nmanually modify the generated XCode project to enable more architectures.\n\nBuilding using a pre-built XCode project\n----------------------------------------\n\nIf the above doesn't work for you, you can try the pre-built XCode project.\n\nUse the Xcode project in misc/Allegro 5 iOS. By default it will build for the\nsimulator. You will have to change the target to build for an iOS device. The\nproject builds armv7/armv7s/arm64 fat binaries. The project is compiled into\na single static library (monolith).\n\nYou can find the resulting library in ~/Library/Developer/Xcode/DerivedData.\n\nThe Xcode project currently does not build the audio, acodec or video\naddons. To build them, add the source files, add addons/audio etc to\nyour header search path and put the dependency includes in\ndeps/include.\n\nTo install you'll have to copy the library (in DerivedData/*) and the headers\nmanually. The headers you need are the ones you copied to deps, plus the\nones in allegro5/include plus <addon>/allegro5 for each of the addons.\n"
        },
        {
          "name": "README_macosx.txt",
          "type": "blob",
          "size": 2.4228515625,
          "content": "Mac OS X-specific notes\n=======================\n\nBuilding Allegro on Mac OS X is the same as on other Unix-like operating systems.\nSee README_make.txt.\n\nBuilding with Xcode\n-------------------\n\nYou may also use Xcode to build Allegro. This works similar to the instructions\nin README_make.txt, except add the parameter -GXcode when invoking cmake.\n\nInstead of creating a makefile this will create an Xcode project which you can\ndouble click and open in Xcode and then hit the arrow button to compile.\n\nUsing the Clang compiler (OS X 10.6+)\n-------------------------------------\n\nIt is possible to build Allegro using the Clang compiler that ships with OS\nX 10.6 (Snow Leopard). Clang is installed in /Developer/usr/bin.\nTo use it, you have to tell Cmake to use Clang instead of gcc. From the\nterminal, this is most easily accomplished by the commands\n\n        export PATH=/Developer/usr/bin:$PATH\n        export CC=clang\n\nbefore you run Cmake. If you use the graphical version of Cmake, you will\nbe given the option of selecting the C compiler to use. Simply select\n/Developer/usr/bin/clang.\nThe installation otherwise continues as usual.\n\nRetina display support (OS X 10.7+)\n-----------------------------------\n\nAllegro has an option to support high DPI displays by treating them as a regular\nhigh-resolution display. To do so, use XCode to set the NSHighResolutionCapable\nproperty in the Info.plist of your bundled app to YES. Alternatively, add these\ntwo lines to the Info.plist using a text editor:\n\n    <key>NSHighResolutionCapable</key>\n    <true/>\n\nIf you are making an unbundled app this feature appears to be enabled by\ndefault, but it is not recommended to rely on this working: make a bundled\napp for the most predictable behavior.\n\nAllegro uses a pixel-based coordinate system, meaning that high-DPI displays\nwill be larger than is reported by the OS. When changing the display DPI or\nmoving the window between two displays with different DPIs, Allegro displays\nbehave in the following way:\n\n- If the ALLEGRO_DISPLAY was created with the ALLEGRO_RESIZABLE flag it will\n  send an ALLEGRO_DISPLAY_RESIZE event. This will have the effect of your app's\n  window remaining visually the same, while the display size in pixels will\n  increase or decrease. This is the recommended situation.\n\n- If the ALLEGRO_DISPLAY was not created with the ALLEGRO_RESIZABLE flag, then\n  the display size in pixels will remain the same, but the app's window will\n  appear to grow or shrink.\n"
        },
        {
          "name": "README_make.txt",
          "type": "blob",
          "size": 1.7353515625,
          "content": "Building Allegro with make\n==========================\n\nThis document discusses building Allegro using CMake and GNU make from a\nterminal window.  This document applies to Unix-like operating systems such as\nLinux, and also Mac OS X and MinGW.\n\n1. Unpack Allegro.\n\n2. Create a build directory under the Allegro directory and go there.\n\n        cd /path/to/allegro\n        mkdir build\n        cd build\n\n3. Run `cmake` with whatever options you want.  See README_cmake.txt\nfor details about options you can set.\n\n        cmake ..\n\nHere \"..\" is the path to the Allegro directory.\n\nAlternatively, you can use `ccmake` (Unix) or `cmake-gui` (Windows) to bring up\nan interactive option selector. e.g. `ccmake ..` or `cmake-gui ..`.\n\nYou may need to tell CMake which \"generator\" to use; cmake -h will tell you\nwhich generators are available.  We recommend using the Makefile generator\n(default everywhere except Windows).  On MinGW you will have a choice between\n\"MinGW Makefiles\" or \"MSYS Makefiles\".  If `sh.exe` is on your PATH then you\nmust use \"MSYS Makefiles\", otherwise use \"MinGW Makefiles\".\n\nMore examples:\n\n        cmake .. -G \"MinGW Makefiles\"\n\n        cmake .. -G \"MSYS Makefiles\"\n\n4. Now, if that step was successful you can run `make` to build Allegro.\nOn MinGW your make might actually be called `mingw32-make`.\n\n        make\n\nSince multicore processors are common now, you might wish to speed that up by\npassing a \"-j<n>\" option, where <n> is the number of parallel jobs to spawn.\n\n\n5. You may optionally install Allegro into your system path with the install\ntarget.\n\n        make install\n\nMinGW users might need to set the MINGDIR environment variable first.\n\nThe DESTDIR variable is supported for staged installs.\n\n        make install DESTDIR=/tmp/allegro-package\n\n"
        },
        {
          "name": "README_msvc.txt",
          "type": "blob",
          "size": 3.607421875,
          "content": "Building Allegro with MSVC\n==========================\n\nThere are a lot of variations to the build process, but we will just stick with\none to keep things simple.  If you know what you are doing, you can do\nsomething else.\n\n1. Unpack Allegro into a directory *without spaces or other \"weird\" characters\nin the path*.  This is a known problem.\n\n2. Create a build directory under the Allegro directory.  Optionally, create a\ndeps directory and place the headers and libraries of third party dependencies\nin there.  See README_cmake.txt about this.\n\n3. Start the Microsoft Visual Studio IDE, then bring up a command prompt by\nclicking \"Tools > Visual Studio 20xx Command Prompt\".\n\n4. Make sure cmake is in your PATH.  Typing \"cmake\" should display the help\nmessage.  If it doesn't, you can set the PATH manually by typing\n\"SET PATH=C:\\cmake\\bin\\;%PATH%\" or similar.\nMake sure the MSVC compiler cl.exe and lib.exe also run correctly.\n\n5. Go to the Allegro build directory:\n\n        cd \\allegro\\Build\n\n6. Run CMake to configure everything.  We will use the CMake GUI.\n\n        cmake-gui ..\n\n7. Press \"Configure\".  Watch for messages about missing headers and libraries.\nIf anything is missing, you can give CMake a helping hand by setting\n_INCLUDE_DIR and _LIBRARY options manually, e.g. if ZLIB is not found you\nwould set ZLIB_INCLUDE_DIR and ZLIB_LIBRARY.\nYou may have to switch to \"Advanced View\" in order to see the variables.\nOnce done, press \"Configure\" again.\n\n8. Press \"Generate\".  CMake will now generate a project solution.\n\n*Note:*\nAs of the time this is written, CMake has a bug that causes the DLLs in\nMSVC 10 to be named incorrectly. To work around this, generate MSVC 9 projects\ninstead.  You may need to uncomment the line \"#define ALLEGRO_HAVE_STDINT_H\"\nin alplatf.h.  Alternatively, use nmake instead of project files.\n\n9. Open up the project solution with the MSVC IDE and start building.\n\n\n\nRunning the examples\n====================\n\nIf you build Allegro as a shared library (the default), the example programs\nwill probably not run as-is, because they cannot find the Allegro DLLs.\nYou may:\n\n- manually copy the Allegro DLLs into the Build/examples directory where they\n  will be found when the example is run; or\n\n- build the INSTALL project, which copies the library files into the MSVC\n  search path (%VCINSTALLDIR%\\bin).  You may not want to make a mess in there.\n\n- The most drastic solution is to copy them into your C:\\WINDOWS\\SYSTEM32\n  directory, but most people prefer not to make a mess in that directory.\n\nBy default, Allegro will load FLAC and Ogg Vorbis DLLs at runtime.  If it\ncannot find them, FLAC and Vorbis file format support will be disabled.\nAgain, the solution is to copy those DLLs where they can be found.\n\n\n\nHints on setting up Visual C++ 2005 Express Edition\n===================================================\n\nAfter installing Visual C++, you need to install the Platform SDK (or Windows\nSDK), otherwise CMake will fail at a linking step.  You can do a web install to\navoid downloading a massive file.  For me, installation seemed to take an\ninordinately long (half an hour or more), but eventually it completed.\nDon't be too quick to hit Cancel.\n\nYou also need to install the DirectX SDK.  This is a big download, which I\ndon't know how to avoid.\n\nNext, you'll need to tell VC++ about the Platform SDK.  Start the IDE.  Under\n\"Tools > Options > Projects and Solutions > VC++ Directories\", add the Platform\nSDK executable (bin), include and lib directories to the respective lists.\nThe DirectX SDK seems to add itself when it's installed.\n\nFor debugging, use the DirectX control panel applet to switch to the debugging\nruntime.  It's really useful.\n\n"
        },
        {
          "name": "README_packaging.txt",
          "type": "blob",
          "size": 0.3701171875,
          "content": "Note to packagers (e.g. for Linux distributions)\n------------------------------------------------\n\nAllegro 5.x is *not* source compatible with Allegro 4.2.x or 4.4.x.\nWhen packaging Allegro 5, please make it possible for users to install\nAllegro 4.x and 5.x simultaneously.  For example, if you already have\nan 'allegro' package, then you might name the new package 'allegro5'.\n\n"
        },
        {
          "name": "README_pkgconfig.txt",
          "type": "blob",
          "size": 2.12890625,
          "content": "Using pkg-config with Allegro\n=============================\n\nOn Unix-like operating systems, we use the pkg-config tool to simplify the\nprocess of linking with Allegro.\n\nTo print the list of Allegro libraries installed, you can run:\n\n    pkg-config --list-all | grep allegro\n\nYou may need to set the PKG_CONFIG_PATH environment variable appropriately if\n/usr/local/lib/pkgconfig is not hardcoded for your version of pkg-config or\nif you installed to a non-standard location. For example:\n\n    export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig\n\nTo print the command line options required to link with the core Allegro\nlibrary and the image addon, you would run:\n\n    pkg-config --libs allegro-5 allegro_image-5\n\nwhich outputs something like:\n\n    -L/usr/lib -lallegro_image -lallegro\n\nIf you use static libraries, you need to add the --static option:\n\n    pkg-config --libs --static allegro-static-5 allegro_image-static-5\n\nwhich will include additional libraries needed for static linking.\n\nThis can be combined with shell command substitution:\n\n    gcc mygame.c -o mygame $(pkg-config --libs allegro-5 allegro_image-5)\n\nIf Allegro is installed to a non-standard location, the compiler will need\ncommand line options to find the header files.  The pkg-config `--cflags`\noption provides that information.  You can combine it with `--libs` as well:\n\n    pkg-config --cflags --libs allegro-5 allegro_image-5\n\nMost build systems will allow you to call pkg-config in a similar way to the\nshell.  For example, a very basic Makefile might look like this:\n\n    ALLEGRO_LIBRARIES := allegro-5 allegro_image-5\n    ALLEGRO_FLAGS := $(shell pkg-config --cflags --libs $(ALLEGRO_LIBRARIES))\n\n    mygame: mygame.c\n            $(CC) -o $@ $^ $(ALLEGRO_FLAGS)\n\n\nHistorical note\n---------------\n\nPrior to Allegro 5.0.9 the .pc files were named allegro-5.0.pc and so on.\nTo ease transitioning to future versions of Allegro the minor version\nnumber was dropped, leaving allegro-5.pc and so on.  The old names are\ndeprecated but will remain available in 5.0.x releases.\nConfiguration scripts should look for Allegro using the new pkg-config\nnames first, then the old names, for greater compatibility.\n\n"
        },
        {
          "name": "README_raspberrypi.txt",
          "type": "blob",
          "size": 0.9296875,
          "content": "Building\n--------\n\nmkdir build\ncd build\ncmake .. -DCMAKE_TOOLCHAIN_FILE=../cmake/Toolchain-raspberrypi.cmake\nmake\n\nVirtual machine\n---------------\n\nBuilding with a cross compiler is not yet documented. Building directly\non a Raspberry Pi or in a Raspberry Pi VM is very similar to building on\n\"regular\" Linux. apt-get install the -dev packages you need, run cmake and\nmake sure everything you need is found.\n\nFor example, you can use an image from:\n\n    http://www.raspberrypi.org/downloads\n\nand a kernel:\n\n    http://xecdesign.com/downloads/linux-qemu/kernel-qemu\n\nWith a qemu command line like:\n\n    qemu-system-arm -kernel kernel-qemu -cpu arm1176 -m 256 -M versatilepb \\\n        -no-reboot -serial stdio -append \"root=/dev/sda2 panic=1\" \\\n        -hda 2012-12-16-wheezy-raspbian.img \\\n        -redir tcp:2222::22 -net nic -net user\n\nYou can ssh into the VM with:\n\n    ssh -p 2222 pi@127.0.0.1\n\nWithin the guest you can access the host at 10.0.2.2.\n"
        },
        {
          "name": "README_releasing.txt",
          "type": "blob",
          "size": 2.84765625,
          "content": "How to Make a Release\n---------------------\n\nThis guide explains how to make an Allegro release. This all assumes that we're\non Linux.\n\n1.  Starting with the master branch, pick a commit which you want to be the base of\n    the release branch. Typically this will be HEAD, but if there are some\n    unbaked commits there, you may want to use an earlier commit. Call this\n    branch with the new release name (e.g. 5.2.2 in this case):\n\n        git branch 5.2.2 master\n\n    From now on, aside from changing the version numbers, all commits on this\n    release branch should be cherry-picked from the master branch. For all\n    cherry-picks, prefer using the -x switch, like so:\n\n        git cherry-pick -x badf00d\n\n2.  On the master branch, bump the version to the next release in\n    `include/allegro5/base.h` by using the `misc/fixver.sh` script. Commit this\n    change. For example:\n\n        misc/fixver.sh 5 2 3 GIT\n\n3.  Write a changelog file. This is located in docs/src/changes-5.2.txt.\n\n    Typically you will want to look through the commits made since the last\n    release, e.g. using `git log <last_release>..<this_release>` (e.g. `git log\n    5.2.1..5.2.2`). Follow the format of the previous changelogs. It's up to\n    you how to determine who are the 'main developers'. For the 5.1.9+ release,\n    I've abitrarily determined it to be developers who've committed 95% of the\n    lines of code (this isn't very important). You probably will want to have\n    other developers check it over in case something is wrong/missing. Commit\n    this change.\n\n4.  We are now done with the master branch. You can push these changes to\n    github. Check out the release branch now.\n\n5.  Cherry-pick the commit with the changelog onto this branch.\n\n6.  Remove the \"GIT\" suffix and increase the version by 1. This can be done via\n    `misc/fixver.sh` script. Commit this change. For example:\n\n       misc/fixver.sh 5 2 2 0\n\n7.  Tag the previous commit with the same version number and the release number\n    (e.g. \"5.2.2.0\" if you're releasing 5.2.2. An example command would be:\n\n        git tag -a -m \"Tag 5.2.2.0\" 5.2.2.0\n\n8.  Create the source archives by running `misc/create_release_archives.sh` and\n    passing in the release version. This will create 3 source archives (.tar.gz,\n    .7z and .zip) in the current directory. And example invocation would be:\n\n        ./misc/create_release_archives.sh 5.2.2.0\n\n10. At this point you could do some additional checks (like making binaries).\n\n11.  Upload the source archives to github. Go to the releases tab, and make a\n    new release with the tag you just created.\n\n12. Build the docs, including the pdf. Add these to the website via the\n    liballeg.github.io repository.\n\n13. Make an announcement on the website. This involves making a news item,\n    changing the download area and copy-pasting the change list.\n\n14. Make an announcement on Discord. You're done!\n"
        },
        {
          "name": "README_sdl.txt",
          "type": "blob",
          "size": 2.8369140625,
          "content": "SDL\n===\n\nThis is an experimental port which uses SDL2 to create the Allegro\nwindow and OpenGL context.\n\n\nDependencies\n------------\n\nSDL2 is required.\n\n\nBuilding\n--------\n\nPass -D ALLEGRO_SDL=on to cmake to enable building for SDL2.\n\n\nLimitations\n-----------\n\nSDL2 requires calling SDL_PumpEvents() from the main thread regularly to\ngenerate events. Currently Allegro5 makes those calls from the timer\nsubsystem - so as long as you have any timers running things will work\nfine. If your Allegro 5 program uses no timers it may get stuck because\nno SDL2 events can be received.\n\n\nEmscripten\n----------\n\nOne reason the SDL2 port is useful is that it allows running Allegro on\nplatforms not supported directly by Allegro, such as Emscripten. This is\neven more experimental but here are some example steps that will compile\nmost of the examples for running in a web browser:\n\n1. Make sure to set up the emscripten environment by running the\n\nemsdk_env.sh\n\nor equivalent as provided by emscripten.\n\n2. Create a build folder.\n\nmkdir build_emscripten\ncd build_emscripten\n\nIf you're going to build a demo, you will need to manually create a file:\n\nmkdir -p demos/speed/data\ntouch demos/speed/data/nothing.txt\n\n3. Configure CMake, using emcmake.\n\n```\nUSE_FLAGS=(\n    -s USE_FREETYPE=1\n    -s USE_VORBIS=1\n    -s USE_OGG=1\n    -s USE_LIBJPEG=1\n    -s USE_SDL=2\n    -s USE_LIBPNG=1\n    -s FULL_ES2=1\n    -s ASYNCIFY\n    -s TOTAL_MEMORY=2147418112\n    -O3\n    )\n\n# You may need to set this yourself.\nEM_CACHE=path-to-emsdk/upstream/emscripten/cache\n\nemcmake cmake .. \\\n    -D CMAKE_BUILD_TYPE=Release \\\n    -D ALLEGRO_SDL=ON \\\n    -D SHARED=OFF \\\n    -D WANT_MONOLITH=ON \\\n    -D WANT_ALLOW_SSE=OFF \\\n    -D WANT_DOCS=OFF \\\n    -D WANT_TESTS=OFF \\\n    -D WANT_OPENAL=OFF \\\n    -D ALLEGRO_WAIT_EVENT_SLEEP=ON \\\n    -D SDL2_INCLUDE_DIR=$EM_CACHE/sysroot/include \\\n    -D CMAKE_C_FLAGS=\"${USE_FLAGS[*]}\" \\\n    -D CMAKE_CXX_FLAGS=\"${USE_FLAGS[*]}\" \\\n    -D CMAKE_EXE_LINKER_FLAGS=\"${USE_FLAGS[*]} --preload-file data\" \\\n    -D CMAKE_EXECUTABLE_SUFFIX_CXX=\".html\"\n```\n\nEmscripten will take care of downloading the dependencies mentioned above via\nits ports system.\n\nTo compile your own game adjust as necessary. You can use the\nlib/liballegro_monolith-static.a library.\n\n4. Compile the library and examples.\n\nmake\n\nSince that can take awhile (a lot slower than regular compilation speed), you\nmay want to compile individual examples, e.g.\n\nmake ex_draw_bitmap\n\nNote: If you make any changes to any data/ files, you will need to manually delete the generated .html\nfile in <build dir>/examples to force emscripten to regenerate the .data file.\n\n5. To run the examples, navigate to the examples folder. At this point it is\neasiest to start a local webserver, and then navigate to the examples using a\nweb browser. E.g. you could use the Python's web server module which prints out\na URL you can open:\n\npython3 -m http.server\n"
        },
        {
          "name": "README_windows.txt",
          "type": "blob",
          "size": 1.32421875,
          "content": "Windows-specific notes\n======================\n\nDPI Awareness\n-------------\n\nBy default, apps created with Allegro are marked as DPI aware, and are not\nscaled by the OS. This is mostly transparent on your end, the only complication\ncomes when the DPI changes on the fly (e.g. your app's window gets moved\nbetween displays with different DPIs):\n\n- If the ALLEGRO_DISPLAY was created with the ALLEGRO_RESIZABLE flag it will\n  send an ALLEGRO_DISPLAY_RESIZE event. This will have the effect of your app's\n  window remaining visually the same, while the display size in pixels will\n  increase or decrease. This is the recommended situation.\n\n- If the ALLEGRO_DISPLAY was not created with the ALLEGRO_RESIZABLE flag, then\n  the display size in pixels will remain the same, but the app's window will\n  appear to grow or shrink.\n\nIf you for some reason want to opt out of DPI-awareness, utilize the\napplication manifests to specify that your app is not DPI-aware.\n\nRuntime DLL Loading\n-------------------\n\nFor some of its features, Allegro will look for certain DLLs on the\nsystem it runs on, but will not explicitly depend them at build time.\nThese are as follows:\n\n- msftedit.dll or riched20.dll or riched32.dll - For the native dialog addon.\n\n- d3dx9_${version}.dll - Shader support for the Direct3D backend.\n\n- xinput1_${version}.dll - XInput-based joysticks.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.73046875,
          "content": "# Security Policy\n\n## Report a security issue\n\nThe Allegro project team welcomes security reports and is committed to\nproviding prompt attention to security issues. Security issues should be\nreported privately by sending an email to\n<allegro-security@lists.liballeg.org>.\n\n## Version support\n\n| Version | Supported          |\n| ------- | ------------------ |\n| >= 5.2.x| Yes                |\n| < 5.2   | No                 |\n\n## Security advisories\n\nRemediation of security vulnerabilities is prioritized by the project team\nbased on the overall impact. The project team is committed to transparency in\nthe disclosure process. The Allegro team announces security issues Allegro\nRelease notes, as well as the Allegro website on a best-effort basis.\n"
        },
        {
          "name": "addons",
          "type": "tree",
          "content": null
        },
        {
          "name": "allegro5.cfg",
          "type": "blob",
          "size": 8.392578125,
          "content": "#\n#  Configuration file for the Allegro 5 library.\n#\n#  This file should be either in the same directory as your program.\n#\n#  On Unix, this file may also be stored as ~/.allegro5rc or /etc/allegro5rc.\n#  If multiple files exist, they will be merged, with values from more specific\n#  files overriding the less specific files.\n\n[graphics]\n\n# Graphics driver.\n# Can be 'default', 'opengl' or 'direct3d' (Windows only).\ndriver=default\n\n# Display configuration selection mode.\n#\n# Under Linux, it can be used to force the old GLX 1.2 way of choosing\n# display settings or the new FBConfig method introduced with GLX 1.3.\n#\n# Under Windows, when using the OpenGL driver, setting it to old will\n# use DescribePixelFormat and new will use wglGetPixelFormatAttribivARB\n# (provided by WGL_ARB_pixel_format extension).\n#\n# Can be 'old' and 'new'. Default is 'new'.\nconfig_selection=new\n\n# What method to use to detect legacy cards for the Direct3D backend of the\n# primitives addon. Can be 'default', which means it'll check that the pixel\n# shader version supported is below some value. 'force_legacy' will force it to\n# detect as a legacy card. 'force_modern' will force it to detect is as a modern\n# card.\nprim_d3d_legacy_detection=default\n\n# For compatibility reasons, video bitmaps smaller than this size are\n# backed by textures with this size. This is often no longer necessary\n# on more modern systems, and should be set to < 16 if you're creating\n# bitmaps smaller than this size. Note that on Android, this is ignored\n# if smaller than 32.\nmin_bitmap_size=16\n\n[audio]\n\n# Driver can be 'default', 'openal', 'alsa', 'oss', 'pulseaudio' or 'directsound'\n# depending on platform.\ndriver=default\n\n# Mixer quality can be 'linear' (default), 'cubic' (best), or 'point' (bad).\n# default_mixer_quality=linear\n\n# The frequency to use for the default voice/mixer. Default: 44100.\n# primary_voice_frequency=44100\n# primary_mixer_frequency=44100\n\n# Can be 'int16', otherwise defaults to float32.\n# primary_voice_depth=float32\n# primary_mixer_depth=float32\n\n[oss]\n\n# You can skip probing for OSS4 driver by setting this option to 'yes'.\n# Default is 'no'.\nforce_ver3=no\n\n# When OSS3 is used, you can choose a sound device here.\n# Default is '/dev/dsp'.\ndevice=/dev/dsp\n\n[alsa]\n\n# Set the ALSA sound device.\n# Default is 'default'.\ndevice=default\n\n# Set the ALSA capture device, e.g. hw:0,0\n# Default is 'default'.\ncapture_device=default\n\n# Set the period size (in samples)\n# Note that this is erroneously called 'buffer_size' for backwards\n# compatibility.\nbuffer_size=32\n\n# Set the buffer size (in samples)\nbuffer_size2=2048\n\n[pulseaudio]\n\n# Set the buffer size (in samples)\nbuffer_size=1024\n\n[directsound]\n\n# Set the DirectSound buffer size (in samples)\nbuffer_size = 8192\n\n# Which window to attach the device to. Can be 'desktop', or 'foreground'. Try\n# flipping this if there are issues initializing audio.\nwindow = desktop\n\n[opengl]\n\n# If you want to support old OpenGL versions, you can make Allegro\n# believe an older version than what you actually have is used with\n# this key. This is only for testing/debugging purposes.\n\n# force_opengl_version = 1.2\n\n[opengl_disabled_extensions]\n\n# Any OpenGL extensions can be listed here to make Allegro report them\n# as not available. The extensions used by Allegro itself if available\n# are shown below - uncommenting them would disable them:\n\n# GL_ARB_texture_non_power_of_two=0\n# GL_EXT_framebuffer_object=0\n\n[image]\n\n# Gamma handling of PNG files.\n# A value of 0.0 means: Don't do any gamma correction.\n# A value of -1.0 means: Use the value from the environment variable\n# SCREEN_GAMMA (if available), otherwise fallback to a value of 2.2\n# (a good guess for PC monitors, and the value for sRGB colourspace).\n# Otherwise, the value is taken as-is.\npng_screen_gamma = -1.0\n\n# Compression level for PNG files. Possible values: 0-9, \"best\", \"fastest\",\n# \"none\" or \"default\" (a sane compromise between size and speed).\npng_compression_level = default\n\n# Quality level for JPEG files. Possible values: 0-100\njpeg_quality_level = 75\n\n# Quality level for WebP files. Possible values: 0-100 or \"lossless\"\nwebp_quality_level = lossless\n\n[joystick]\n\n# Linux: Allegro normally searches for joystick device N at /dev/input/jsN.\n# You can override the device file path on a per-device basis, like this.\n\n# device0=/dev/input/by-id/usb-blahblah-joystick\n\n# Windows: You can choose between the XINPUT or DIRECTINPUT driver for\n# joysticks and force feedback joysticks. Xinput is the more modern\n# system, but DirectInput has more force feedback capabilities for older\n# joysticks.\ndriver=XINPUT\n\n# Windows: Use this to force an XInput DLL version, example \"3\" forces\n# xinput1_3.dll. By default, the latest version is used.\n\n# force_xinput_version = 3\n\n[keyboard]\n\n# You can trap/untrap the mouse cursor within a window with a key combination\n# of your choice, e.g. \"Ctrl-G\", \"Shift-Ctrl-G\", \"Ctrl-LShift\", \"RWin\".\n# This feature currently only works on X11 and Windows.\n\n# toggle_mouse_grab_key = ScrollLock\n\n# By default, you can press Ctrl-Alt-Delete or Ctrl-Alt-End to quit Allegro\n# programs. Set this to false to disable this feature. This only works on\n# Linux.\n\n# enable_three_finger_exit = true\n\n# By default, pressing the LED toggling keys (e.g. CapsLock) will also toggle\n# the LED on the keyboard. Setting this to false disable that connection.\n# This can only be controled on non-X11 Linux.\n\n# enable_key_led_toggle = true\n\n\n[trace]\n# Comma-separated list of channels to log. Default is \"all\" which\n# disables channel filtering. Some possible channels are:\n# system,display,keyboard,opengl\n# Channel names can be prefixed with - to exclude only those channels.\n# Each addon and source-file can define additional channels though so\n# there are more.\nchannels=all\n\n# Log-level. Can be one of debug, info, warn, error, none or empty.\n# In debug builds if it is empty or unset, then the level is set to debug.\n# In release builds if it is empty or unset, then the level is set to none.\n# If not none, Allegro will write out the logs to an allegro.log file next to\n# the binary. Use ALLEGRO_TRACE environment variable to control that file\n# location. A special filename of - (dash) means logging to stdout.\n# You can override this value via the ALLEGRO_TRACE_LEVEL environment variable.\nlevel=\n\n# Set to 0 to disable line numbers in log files.\nlines=1\n\n# Set to 0 to disable timestamps in log files.\ntimestamps=1\n\n# Set to 0 to disable function names in log files.\nfunctions=1\n\n# Send logs to the debug output as well.\nwin_use_output_debug_string = false\n\n[x11]\n# Can be fullscreen_only, always, never\nbypass_compositor = fullscreen_only\n\n[xkeymap]\n# Override X11 keycode. The below example maps X11 code 52 (Y) to Allegro\n# code 26 (Z) and X11 code 29 (Z) to Allegro code 25 (Y).\n# 52=26\n# 29=25\n\n\n[shader]\n# If you want to support override version of the d3dx9_xx.dll library\n# define this value.\n# By default, latest installed version is used.\n\n# force_d3dx9_version = 36\n\n[ttf]\n\n# Set these to something other than 0 to override the default page sizes for TTF\n# glyphs.\nmin_page_size = 0\nmax_page_size = 0\n\n# This entry contains characters that will be pre-catched during font loading.\n# cache_text = a bcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\n\n# Uncomment if you want only the characters in the cache_text entry to ever be drawn\n# skip_cache_misses = true\n\n[osx]\n\n# If set to false, then Allegro will send ALLEGRO_EVENT_DISPLAY_HALT_DRAWING\n# and ALLEGRO_EVENT_DISPLAY_RESUME_DRAWING events when the user resizes a\n# window. Drawing while resizing (\"live resizing\") has historically been buggy,\n# so setting this to false allows you to opt out of this behavior and detect\n# when the resize happens.\nallow_live_resize = true\n\n[compatibility]\n\n# Prior to 5.2.4 on Windows you had to manually resize the display when\n# showing the menu using the dialog addon. After 5.2.4 this is done\n# automatically, but may break old code that handled this eventuality.\n# Set this to false for such code.\nautomatic_menu_display_resize = true\n\n# On OSX outside an app bundle, on system init allegro manually promotes the process\n# to a graphical application. This may be undesirable for console applications. Set\n# this to false to disable this behavior.\nosx_tell_dock_outside_bundle = true\n\n# To restore behavior of older code versions, specify this value to the\n# Allegro version that had the desired old behavior.\n# joystick_version = 5.2.9\n# keyboard_version = 5.2.9\n\n# Prefer using DUMB rather than OpenMPT to decode module files.\nacodec_prefer_dumb = false\n"
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.513671875,
          "content": "version: \"{branch}-ci-{build}\"\nclone_depth: 5\n\ninstall:\n  - mkdir deps\n  - mkdir deps\\include\n  - mkdir deps\\lib\n  - nuget install AllegroDeps -Version 1.5.0 -OutputDirectory deps -ExcludeVersion\n  - ps: move deps\\AllegroDeps\\build\\native\\include\\* deps\\include -force\n  - ps: move deps\\AllegroDeps\\build\\native\\v140\\win32\\deps\\lib\\* deps\\lib -force\n\nbuild_script:\n  - mkdir build\n  - cd build\n  - cmake .. -G \"Visual Studio 14 2015\" -DWANT_ACODEC_DYNAMIC_LOAD=off -DFLAC_STATIC=on\n  - cmake --build . --config RelWithDebInfo\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "demos",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "indent.pro",
          "type": "blob",
          "size": 0.099609375,
          "content": "-kr -nce -ss -ncs -i3 -cli3 -nut -bls -l80\n-T ALLEGRO_BITMAP\n-T PACKFILE\n-T BMPINFOHEADER\n-T PalEntry\n"
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}