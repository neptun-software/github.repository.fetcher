{
  "metadata": {
    "timestamp": 1736709953739,
    "page": 496,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cc65/cc65",
      "stars": 2361,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3310546875,
          "content": "root = true\n\n[*]\ncharset = utf-8\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nguidelines = 80, 120\n\n[*.{c,h}]\ncpp_new_line_before_open_brace_block=same_line\ncpp_new_line_before_open_brace_function=new_line\ncpp_space_before_function_open_parenthesis=insert\ncpp_new_line_before_else=false\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.01171875,
          "content": "* text=auto\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.10546875,
          "content": "/bin/\n/html/\n/info/\n/lib/\n/libwrk/\n/target/\n/testwrk/\n/wrk/\n/cc65.zip\n/util/atari/*.exe\n/util/gamate/*.exe\n\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.625,
          "content": "language: c\n\njobs:\n  include:\n\n  - os: linux\n    name: Linux\n    install:\n      - sudo apt-get update\n      - sudo apt-get install linuxdoc-tools linuxdoc-tools-info binutils-mingw-w64-i686 gcc-mingw-w64-i686 sshpass\n    script:\n      - make -j2 bin USER_CFLAGS=-Werror\n      - make -j2 lib QUIET=1\n      - make test QUIET=1\n      - make -j2 samples\n      - make -C src clean\n      - make -j2 bin USER_CFLAGS=-Werror CROSS_COMPILE=i686-w64-mingw32-\n      - make -C samples clean\n      - make -j2 doc zip\n    after_success:\n      - make -f Makefile.travis\n\n  - os: windows\n    name: Windows\n    script:\n      - src/msbuild.cmd src\\\\cc65.sln\n"
        },
        {
          "name": "Contributing.md",
          "type": "blob",
          "size": 12.1875,
          "content": "Contributing to cc65\n====================\n\nThis document contains all kinds of information that you\nshould know if you want to contribute to the cc65 project.\nBefore you start, please read all of it.  If something is not\nclear to you, please ask - this document is an ongoing effort\nand may well be incomplete. \n\nAlso, before you put a lot of work into implementing\nsomething you want to contribute, please get in touch with\none of the developers and ask if what you are going to do is\nactually wanted and has a chance of being merged.  Perhaps\nsomeone else is already working on it, or perhaps what you\nhave in mind is not how we'd expect it to be - talking to us\nbefore you start might save you a lot of work in those cases.\n\n(''Note:'' The word \"must\" indicates a requirement.  The word\n \"should\" indicates a recomendation.)\n\n*this is work in progress and is constantly updated - if in\ndoubt, please ask*\n\n# Generally\n\n* You must obey these rules when contributing new code or\n  documentation to cc65. We are well aware that not all\n  existing code may respect all rules outlined here - but this\n  is no reason for you not to respect them.\n* One commit/patch/PR per issue. Do not mix several things\n  unless they are very closely related.\n* Sometimes when you make a PR, it may break completely\n  unrelated tests. However, any PR is expected to merge\n  cleanly with no failures.  That means in practise that you\n  are expected to fix/update the failing tests if required -\n  for example this might be needed if you make changes to the\n  compiler that changes the format of error- or warning\n  messages.  In that case you might have to update some\n  reference files in the testbench.  Obviously still check if\n  that is actually the right thing to do. ;)\n\n# Codestyle rules\n\n## All sources\n\n### Line endings\n\nAll files must only contain Unix style 'LF' line endings.\nPlease configure your editors accordingly.\n\n### TABs and spaces\n\nThis is an ongoing controversial topic - everyone knows\nthat.  However, the following is how we do it :)\n\n* TAB characters must be expanded to spaces.\n* 4 spaces per indention level (rather than 8) are\n  preferred, especially if there are many different levels.\n* No extra spaces at the end of lines.\n* All text files must end with new-line characters.  Don't\n  leave the last line \"dangling\".\n\nThe (bash) scripts used to check the above rules can be\nfound in ```.github/check```.  You can also run all checks\nusing ```make check```.\n\n### Identifiers and symbol names\n\nThe C Standard defines certain identifiers and symbol names,\nwhich we can not use in our code.  Since it is not always\nobvious which parts of the library code will actually end up\nin a linked program, the following applies to ALL of the\nlibrary.\n\nAny non standard identifier/symbol/function that is exported\nfrom source files, or appears in header files:\n\n* must not be in the \"_symbol\" form in C, or \"__symbol\" form\n  in assembly,\n* must start with (at least) two (C Code) or three (assembly\n  code) underscores, unless the symbol appears in a non\n  standard header file.\n\nThis is likely more than the standard dictates us to do -\nbut it is certainly standard compliant - and easy to\nremember.\n\nAlso see the discussion in\nhttps://github.com/cc65/cc65/issues/1796\n\n### Miscellaneous\n\n* 80 characters is the desired maximum width of files.  But,\n  it isn't a \"strong\" rule; sometimes, you will want to type\n  longer lines, in order to keep the parts of expressions or\n  comments together on the same line.\n* You should avoid typing non-ASCII characters.\n* If you change \"normal\" source code into comments, then you\n  must add a comment about why that code is a comment.\n* When you want to create a comment from several lines of\n  code, you should use preprocessor lines, instead of ```/*\n  */``` or \"```;```\".  Example:\n\n~~~C\n#if 0\n  one (); two ();\n  three = two () + one ();\n#endif\n~~~\n\n* You should type upper case characters for hex values.\n* When you type zero-page addresses in hexadecimal, you\n  should type two hex characters (after the hex prefix).\n  When you type non-zero-page addresses in hex, you should\n  type four hex characters.\n* When you type lists of addresses, it is a good idea to\n  sort them in ascending numerical order.  That makes it\n  easier for readers to build mental pictures of where things\n  are in an address space.  And, it is easier to see how big\n  the variables and buffers are.  Example:\n\n~~~asm\nxCoord := $0703\nyCoord := $0705 ; (this address implies that xCoord is 16 bits)\ncmdbuf := $0706 ; (this address implies that yCoord is 8 bits)\ncmdlen := $0786 ; (this address implies that cmdbuf is 128 bytes)\ncolor  := $0787\n~~~\n\n## C sources\n\nThe following is still very incomplete - if in doubt please\nlook at existing sourcefiles and adapt to the existing style.\n\nYour files should generally obey the C89 standard, with a\nfew C99 things (this is a bit similar to what cc65 itself\nsupports). The exceptions are:\n\n* Use stdint.h for variables that require a certain bit size\n* In printf-style functions use the PRIX64 (and similar)\n  macros to deal with 64bit values (from inttypes.h) This\n  list is not necessarily complete - if in doubt, please ask.\n* We generally have a \"no warnings\" policy\n* Warnings must not be hidden by using typecasts - fix the\n  code instead\n* The normal indentation width should be four spaces.\n* You must use ANSI C comments (```/* */```); you must not\n  use C++ comments (```//```).\n* When you add functions to an existing file, you should\n  separate them by the same number of blank lines that\n  separate the functions that already are in that file.\n* All function declarations must be followed by a comment\n  block that tells at least briefly what the function does,\n  what the parameters are, and what is returned. This comment\n  must sit between the declaration and the function body, like\n  this:\n\n~~~C\nint foo(int bar)\n/* Add 1 to bar, takes bar and returns the result */\n{\n    return bar + 1;\n}\n~~~\n\n* When a function's argument list wraps around to a next\n  line, you should indent that next line by either the\n  normal width or enough spaces to align it with the arguments\n  on the previous line.\n* All declarations in a block must be at the beginning of\n  that block.\n* You should put a blank line between a list of local\n  variable declarations and the first line of code.\n* Always use curly braces even for single statements after\n  ```if```, and the single statement should go into a new\n  line.\n* Use \"cuddling\" braces, ie the opening brace goes in the\n  same line as the ```if```:\n\n~~~C\nif (foo > 42) {\n    bar = 23;\n}\n~~~\n\n* Should the ```if``` statement be followed by an empty\n  conditional block, there should be a comment telling why\n  this is the case:\n\n~~~C\nif (check()) { /* nothing happened, do nothing */ }\n~~~\n\n* You must separate function names and parameter/argument\n  lists by one space.\n* When declaring/defining pointers, you must put the\n  asterisk (```*```) next to the data type, with a space\n  between it and the variable's name.  Examples:\n\n~~~C\nint* namedPtr[5];\nchar* nextLine (FILE* f);\n~~~\n\n### Header files\n\n* All Headers should start with a copyright/license banner\n* Function prototypes must be a single line, not contain the redundant\n  \"extern\" keyword, and followed by a brief comment that explains what\n  the function does, and separated from the next prototype by a blank\n  line:\n\n~~~C\nvoid __fastcall__ cclear (unsigned char length);\n/* Clear part of a line (write length spaces). */\n\n~~~\n\nHeaders that belong to the standard library (libc) must\nconform with the C standard. That means:\n\n* All non standard functions, or functions that only exist\n  in a certain standard, should be in #ifdefs\n* The same is true for macros or typedefs.\n  You can refer to Annex B of the ISO C99 standard\n  ([here](https://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf)\n  is the draft).  Example:\n\n~~~C\n#if __CC65_STD__ == __CC65_STD_C99__ /* stuff that only exists in C99 here */\n#endif\n#if __CC65_STD__ == __CC65_STD_CC65__ /* non standard stuff here */\n#endif </pre>\n~~~\n\n## Assembly sources\n\n* Opcode mnemonics must have lower-case letters.  The names\n  of instruction macroes may have upper-case letters.\n* Opcodes must use their official and commonly used\n  mnemonics, ie 'bcc' and 'bcs' and not 'bgt' and 'blt'.\n* Hexadecimal number constants should be used except where\n  decimal or binary numbers make much more sense in that\n  constant's context.\n* Hexadecimal letters should be upper-case.\n* When you set two registers or two memory locations to an\n  immediate 16-bit zero, you should use the expressions\n  ```#<$0000``` and ```#>$0000``` (they make it obvious where\n  you are putting the lower and upper bytes).\n* If a function is declared to return a char-sized value, it\n  actually must return an integer-sized value.  (When cc65\n  promotes a returned value, it sometimes assumes that the value\n  already is an integer.)\n  This must be done in one of the following ways:\n\n~~~asm\n    lda #RETURN_VALUE\n    ldx #0 ; Promote char return value\n\n    ; If the value is 0, you can use:\n    lda #RETURN_VALUE\n    .assert RETURN_VALUE = 0\n    tax\n\n    ; Sometimes jumping to 'return 0' could save a byte:\n    .assert RETURN_VALUE = 0\n    jmp return 0\n~~~\n\n* Functions, that are intended for a platform's system\n  library, should be optimized as much as possible.\n* Sometimes, there must be a trade-off between size and\n  speed.  If you think that a library function won't be used\n  often, then you should make it small.  Otherwise, you should\n  make it fast.\n* Comments that are put on the right side of instructions\n  must be aligned (start in the same character columns).\n* Assembly source fields (label, operation, operand,\n  comment) should start ''after'' character columns that are\n  multiples of eight (such as 1, 9, 17, 33, and 41).\n  \n## LinuxDoc sources\n\n* TAB characters must be expanded to spaces.\n* All text files must end with new-line characters.  Don't\n  leave the last line \"dangling\".\n* 80 characters is the desired maximum width of files.\n* You should avoid typing non-ASCII characters.\n\n* You should put blank lines between LinuxDoc sections:\n* Three blank lines between ```<sect>``` sections.\n* Two blank lines between ```<sect1>``` sections.\n* One blank line between other sections.\n\n# Library implementation rules\n\n* By default the toolchain must output a \"standard\" binary\n  for the platform, no emulator formats, no extra headers\n  used by tools.  If the resulting binaries can not be run as\n  is on emulators or eg flash cartridges, the process of\n  converting them to something that can be used with these\n  should be documented in the user manual.\n* Generally every function should live in a seperate source\n  file - unless the functions are so closely related that\n  splitting makes no sense.\n* Source files should not contain commented out code - if\n  they do, there should be a comment that explains why that\n  commented out code exists.\n\n# Makefile rules\n\n* Makefiles must generally work on both *nix (ba)sh and\n  windows cmd.exe.\n* Makefiles must not use external tools that are not\n  provided by the cc65 toolchain itself.\n\nThe only exception to the above are actions that are exclusive\nto the github actions - those may rely on bash and/or linux tools.\n\n# Documentation rules\n\n## User manual (LinuxDoc)\n\n* This is the primary documentation.\n\n## Wiki\n\n* The Wiki is strictly for additional information that does\n  not fit into the regular user manual (LinuxDoc).  The wiki\n  must not duplicate any information that is present in the\n  user manual.\n\n# Roadmap / TODOs / open ends\n\n## Documentation\n\n* The printf() family of functions does not completely\n  implement all printf() modifiers and does not behave as\n  expected in some cases - all this should be documented in\n  detail.\n\n## Compiler\n\n* We need a way that makes it possible to feed arbitrary\n  assembler code into the optimzer, so we can have proper\n  tests for it.\n\n### Floating point support\n\nThe first step is implementing the datatype \"float\" as IEEE\n754 floats.  Help welcomed!\n\n* WIP compiler/library changes are here:\n  https://github.com/cc65/cc65/pull/1777\n\n## Library\n\nSome name clashes need to be resolved.  Please see the\n[detailed list of name clashes](libsrc/NameClashes.md).\n\n## Test suite\n\n* Specific tests to check the optimizer (rather than the code\n  generator) are needed.\n* We need more specific tests to check standard conformance\n  of the library headers.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.7890625,
          "content": "This software is provided 'as-is', without any express or implied warranty.\nIn no event will the authors be held liable for any damages arising from\nthe use of this software.\n\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n\n1. The origin of this software must not be misrepresented; you must not\nclaim that you wrote the original software. If you use this software in\na product, an acknowledgment in the product documentation would be\nappreciated but is not required.\n\n2. Altered source versions must be plainly marked as such, and must not\nbe misrepresented as being the original software.\n\n3. This notice may not be removed or altered from any source distribution.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.54296875,
          "content": ".PHONY: all mostlyclean clean install zip avail unavail bin lib doc html info samples test util checkstyle check\n\n.SUFFIXES:\n\nall install zip:\n\t@$(MAKE) -C src     --no-print-directory $@\n\t@$(MAKE) -C libsrc  --no-print-directory $@\n\t@$(MAKE) -C doc     --no-print-directory $@\n\t@$(MAKE) -C util    --no-print-directory $@\n\t@$(MAKE) -C samples --no-print-directory $@\n\nmostlyclean clean:\n\t@$(MAKE) -C src        --no-print-directory $@\n\t@$(MAKE) -C libsrc     --no-print-directory $@\n\t@$(MAKE) -C doc        --no-print-directory $@\n\t@$(MAKE) -C util       --no-print-directory $@\n\t@$(MAKE) -C samples    --no-print-directory $@\n\t@$(MAKE) -C test       --no-print-directory $@\n\t@$(MAKE) -C targettest --no-print-directory $@\n\navail unavail bin:\n\t@$(MAKE) -C src     --no-print-directory $@\n\nlib libtest:\n\t@$(MAKE) -C libsrc  --no-print-directory $@\n\ndoc html info:\n\t@$(MAKE) -C doc     --no-print-directory $@\n\nsamples:\n\t@$(MAKE) -C samples --no-print-directory $@\n\nutil:\n\t@$(MAKE) -C util    --no-print-directory $@\n\n%65:\n\t@$(MAKE) -C src     --no-print-directory $@\n\n%:\n\t@$(MAKE) -C libsrc  --no-print-directory $@\n\n# check the code style\ncheckstyle:\n\t@$(MAKE) -C .github/checks       --no-print-directory $@\n\n# runs regression tests, requires libtest target libraries\ntest:\n\t@$(MAKE) -C test                 --no-print-directory $@\n\n# GNU \"check\" target, which runs all tests\ncheck:\n\t@$(MAKE) -C .github/checks checkstyle --no-print-directory\n\t@$(MAKE) test\n\t@$(MAKE) -C targettest platforms      --no-print-directory\n\t@$(MAKE) -C samples platforms         --no-print-directory\n"
        },
        {
          "name": "Makefile.travis",
          "type": "blob",
          "size": 1.0400390625,
          "content": ".PHONY: all gh-pages sf-files\n\n.SUFFIXES:\n\nall: gh-pages sf-files\n\nGH_NAME = Oliver Schmidt\nGH_MAIL = ol.sc@web.de\nGH_PATH = ../doc\n\ngh-pages:\nifdef GH_TOKEN\n\t@echo 'git clone https://$$(GH_TOKEN)@github.com/cc65/doc.git $(GH_PATH)'\n\t@git clone https://$(GH_TOKEN)@github.com/cc65/doc.git $(GH_PATH)\n\tcd $(GH_PATH) && git config user.name \"$(GH_NAME)\"\n\tcd $(GH_PATH) && git config user.email \"$(GH_MAIL)\"\n\tcd $(GH_PATH) && git config push.default simple\n\t$(RM) $(GH_PATH)/*.*\n\tcp html/*.* $(GH_PATH)\n\tcd $(GH_PATH) && git add -A\n\t-cd $(GH_PATH) && git commit -m \"Updated from commit $(TRAVIS_COMMIT).\"\n\tcd $(GH_PATH) && git push -q\nendif\n\nSF_USER = oliverschmidt\nSF_HOST = frs.sourceforge.net\nSF_FILE = /home/frs/project/cc65/cc65-snapshot-win32.zip\n\nSCPFLAGS = -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -q\n\nsf-files:\nifdef SF_PASS\n\techo $(TRAVIS_COMMIT) | zip -z cc65\n\t@echo 'sshpass -p $$(SF_PASS) scp $(SCPFLAGS) cc65.zip $(SF_USER)@$(SF_HOST):$(SF_FILE)'\n\t@sshpass -p $(SF_PASS) scp $(SCPFLAGS) cc65.zip $(SF_USER)@$(SF_HOST):$(SF_FILE)\nendif\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.263671875,
          "content": "The cc65 cross-compiler suite\n=============================\n\ncc65 is a complete cross-development package for 65(C)02 systems,\nincluding a powerful macro assembler, a C compiler, linker, archiver,\nsimulator and several other tools.  cc65 has C and runtime library\nsupport for many of the old 6502 machines.  For details look at\nthe [cc65 web site](https://cc65.github.io):\n\n| Company / People        | Machine / Environment               |\n|-------------------------|-------------------------------------|\n| Apple                   | Apple II                            |\n|                         | Apple IIe enhanced                  |\n| Atari                   | Atari 400/800                       |\n|                         | Atari 2600                          |\n|                         | Atari 5200                          |\n|                         | Atari 7800                          |\n|                         | Atari XL                            |\n|                         | Lynx                                |\n| Tangerine               | Oric Atmos                          |\n| Eureka                  | Oric Telestrat                      |\n| Acorn                   | BBC series                          |\n| Commodore               | C128                                |\n|                         | C16                                 |\n|                         | C64                                 |\n|                         | CBM 510/610                         |\n|                         | PET                                 |\n|                         | Plus/4                              |\n|                         | VIC-20                              |\n| VTech                   | CreatiVision                        |\n| Commander X16 Community | Commander X16                       |\n| Bit Corporation         | Gamate                              |\n| Berkeley Softworks      | GEOS (Apple/CBM)                    |\n| LUnix Team              | LUnix (C64)                         |\n| Nintendo                | Nintendo Entertainment System (NES) |\n| Ohio Scientific         | OSI C1P                             |\n| MOS Technology, Inc.    | KIM-1                               |\n| NEC                     | PC Engine (PCE)                     |\n| Dr. Jozo Dujmović       | Picocomputer (RP6502)               |\n| Watara                  | Watura/QuickShot Supervision        |\n| Synertek                | SYM-1                               |\n\nA generic configuration to adapt cc65 to new targets is also around.\n\n## People\n\ncc65 is originally based on the \"Small C\" compiler by Ron Cain and\nenhanced by James E. Hendrix.\n\n### Project founders\n\n* John R. Dunning: [original implementation](https://public.websites.umich.edu/~archive/atari/8bit/Languages/Cc65/)\n  of the C compiler and runtime library, Atari hosted.\n* Ullrich von Bassewitz:\n  * moved Dunning's code to modern systems,\n  * rewrote most parts of the compiler,\n  * rewrote all of the runtime library.\n\n### Core team members\n\n* [Christian Groessler](https://github.com/groessler): Atari, Atari5200, and CreatiVision library Maintainer\n* [dqh](https://github.com/dqh-au): GHA help\n* [Greg King](https://github.com/greg-king5): all around hackery\n* [groepaz](https://github.com/mrdudz): CBM library, Project Maintainer\n* [Oliver Schmidt](https://github.com/oliverschmidt): Apple II library Maintainer\n\n### External contributors\n\n* [acqn](https://github.com/acqn): various compiler fixes\n* [jedeoric](https://github.com/jedeoric): Telestrat target\n* [jmr](https://github.com/jmr): compiler fixes\n* [karrika](https://github.com/karrika): Atari 7800 target\n* [Stephan Mühlstrasser](https://github.com/smuehlst): osic1p target\n* [Wayne Parham](https://github.com/WayneParham): Sym-1 target\n* [Dave Plummer](https://github.com/davepl): KIM-1 target\n* [rumbledethumps](https://github.com/rumbledethumps): Picocomputer target\n\n*(The above list is incomplete, if you feel left out - please speak up or add yourself in a PR)*\n\nFor a complete list look at the [full team list](https://github.com/orgs/cc65/teams)\nor the list of [all contributors](https://github.com/cc65/cc65/graphs/contributors).\n\n# Contact\n\nFor general discussion, questions, etc subscribe to the\n[mailing list](https://cc65.github.io/mailing-lists.html)\nor use the [github discussions](https://github.com/cc65/cc65/discussions).\n\nSome of us may also be around on IRC [#cc65](https://web.libera.chat/#cc65) on libera.chat.\n\n# Documentation\n\n* The main [Documentation](https://cc65.github.io/doc) for users and\n  developers.\n* Info on [Contributing](Contributing.md) to the CC65 project. Please\n  read this before working on something you want to contribute, and\n  before reporting bugs.\n* The [Wiki](https://github.com/cc65/wiki/wiki) contains some extra info\n  that does not fit into the regular documentation.\n\n# Downloads\n\n* [Windows 64bit Snapshot](https://sourceforge.net/projects/cc65/files/cc65-snapshot-win64.zip)\n* [Windows 32bit Snapshot](https://sourceforge.net/projects/cc65/files/cc65-snapshot-win32.zip)\n* [Linux Snapshot DEB and RPM](https://software.opensuse.org/download.html?project=home%3Astrik&package=cc65)\n\n[![Snapshot Build](https://github.com/cc65/cc65/actions/workflows/snapshot-on-push-master.yml/badge.svg?branch=master)](https://github.com/cc65/cc65/actions/workflows/snapshot-on-push-master.yml)\n"
        },
        {
          "name": "asminc",
          "type": "tree",
          "content": null
        },
        {
          "name": "cfg",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "libsrc",
          "type": "tree",
          "content": null
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "targettest",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}