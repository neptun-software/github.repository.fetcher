{
  "metadata": {
    "timestamp": 1736709722973,
    "page": 113,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "canonical/dqlite",
      "stars": 3937,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.2529296875,
          "content": "BasedOnStyle: Chromium\nBreakBeforeBraces: Custom\nBraceWrapping:\n AfterFunction: true\n AfterStruct: false\nCpp11BracedListStyle: false\nIndentWidth: 8\nUseTab: ForContinuationAndIndentation\nPointerAlignment: Right\nAllowAllParametersOfDeclarationOnNextLine: false\n"
        },
        {
          "name": ".clang-tidy",
          "type": "blob",
          "size": 0.3837890625,
          "content": "Checks: '-*,readability-identifier-naming'\nHeaderFilterRegex: '.*'\nWarningsAsErrors: '*'\nCheckOptions:\n  - key: readability-identifier-naming.StructCase\n    value: lower_case\n  - key: readability-identifier-naming.UnionCase\n    value: lower_case\n  - key: readability-identifier-naming.FunctionCase\n    value: lower_case\n  - key: readability-identifier-naming.TypedefCase\n    value: lower_case\n"
        },
        {
          "name": ".dir-locals.el",
          "type": "blob",
          "size": 0.177734375,
          "content": "((nil . ((fill-column . 80)))\n (c-mode . ((c-file-style . \"linux-tabs-only\")\n\t    (flycheck-gcc-definitions . (\"_GNU_SOURCE\"))\n\t    (flycheck-clang-definitions . (\"_GNU_SOURCE\")))))\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3935546875,
          "content": "*.a\n*.gcda\n*.gcno\n*.la\n*.lo\n*.log\n*.o\n*.so\n*.trs\n.deps\n.dirstamp\n.libs\nMakefile\nMakefile.in\naclocal.m4\naminclude_static.am\nautom4te*.cache\nconfdefs.h\nconfig.status\nconfigure\ncoverage/\ncoverage.info\nunit-test\nintegration-test\ndqlite.pc\nlibtool\nstamp-h*\nsqlite3.c\nraft-core-fuzzy-test\nraft-core-integration-test\nraft-core-unit-test\nraft-uv-integration-test\nraft-uv-unit-test\n.cache/\ncompile_commands.json\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.234375,
          "content": "Unless mentioned otherwise in a specific file's header, all code in this\nproject is released under the LGPL v3 license.\n\nThe list of authors and contributors can be retrieved from the git\ncommit history and in some cases, the file headers.\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.1103515625,
          "content": "dqlite has adopted the [Ubuntu Code of Conduct](coc).\n\n[coc]: https://ubuntu.com/community/ethos/code-of-conduct\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.4140625,
          "content": "# Contributing to dqlite\n\nThe dqlite team welcomes contributions via GitHub pull requests. To get your PR\nmerged, you need to sign [Canonical's contributor license agreement\n(CLA)][cla]. This is straightforward to do once you have an account on\n[Launchpad][lp]; if you don't, you can create one [here][signup].\n\n[cla]: https://ubuntu.com/legal/contributors\n[lp]: https://launchpad.net\n[signup]: https://launchpad.net/+login\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.4921875,
          "content": "# FROM debian:buster-slim as dqlite-lib-builder \nFROM ubuntu as dqlite-lib-builder \nARG DEBIAN_FRONTEND=\"noninteractive\"\nENV TZ=Europe/London\nENV LD_LIBRARY_PATH=/usr/local/lib\nENV GOROOT=/usr/local/go\nENV GOPATH=/go\nENV PATH=$GOPATH/bin:$GOROOT/bin:$PATH\n\nRUN apt-get update && apt-get install -y git build-essential dh-autoreconf pkg-config libuv1-dev libsqlite3-dev liblz4-dev tcl8.6 wget\n\nWORKDIR /opt\n\nRUN git clone https://github.com/canonical/raft.git && \\\n    git clone https://github.com/canonical/go-dqlite.git && \\\n    wget -c https://golang.org/dl/go1.15.2.linux-amd64.tar.gz -O - | tar -xzf - -C /usr/local\n\nWORKDIR /opt/raft\n\nRUN autoreconf -i && ./configure && make && make install\n\nWORKDIR /opt/dqlite\n\nCOPY . .\n\nRUN autoreconf -i && ./configure && make && make install\n\nWORKDIR /opt/go-dqlite\n\nRUN go get -d -v ./... && \\\n    go install -tags libsqlite3 ./cmd/dqlite-demo && \\\n    go install -tags libsqlite3 ./cmd/dqlite\n\n# FROM debian:buster-slim \nFROM ubuntu\nARG DEBIAN_FRONTEND=\"noninteractive\"\nENV TZ=Europe/London\nENV LD_LIBRARY_PATH=/usr/local/lib\nENV PATH=/opt:$PATH\n\nCOPY --from=dqlite-lib-builder /go/bin /opt/\nCOPY --from=dqlite-lib-builder /usr/local/lib /usr/local/lib\nCOPY --from=dqlite-lib-builder \\\n    /usr/lib/x86_64-linux-gnu/libuv.so \\\n    /usr/lib/x86_64-linux-gnu/libuv.so.1\\\n    /usr/lib/x86_64-linux-gnu/libuv.so.1.0.0\\\n    /usr/lib/\n\nCOPY --from=dqlite-lib-builder \\\n    /lib/x86_64-linux-gnu/libsqlite3.so \\\n    /lib/x86_64-linux-gnu/libsqlite3.so.0 \\\n    /usr/lib/x86_64-linux-gnu/  \n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 8.818359375,
          "content": "All files in this repository are licensed as follows. If you contribute\nto this repository, it is assumed that you license your contribution\nunder the same license unless you state otherwise.\n\nAll files Copyright (C) 2017-2019 Canonical Ltd. unless otherwise specified in\nthe file.\n\nThis software is licensed under the LGPLv3, included below.\n\nAs a special exception to the GNU Lesser General Public License version 3\n(\"LGPL3\"), the copyright holders of this Library give you permission to\nconvey to a third party a Combined Work that links statically or dynamically\nto this Library without providing any Minimal Corresponding Source or\nMinimal Application Code as set out in 4d or providing the installation\ninformation set out in section 4e, provided that you comply with the other\nprovisions of LGPL3 and provided that you meet, for the Application the\nterms and conditions of the license(s) which apply to the Application.\n\nExcept as stated in this special exception, the provisions of LGPL3 will\ncontinue to comply in full to this Library. If you modify this Library, you\nmay apply this exception to your version of this Library, but you are not\nobliged to do so. If you do not wish to do so, delete this exception\nstatement from your version. This exception does not (and cannot) modify any\nlicense terms which apply to the Application, with which you must still\ncomply.\n\n\n                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 10.19140625,
          "content": "ACLOCAL_AMFLAGS = -I m4\n\nAM_CFLAGS += $(CODE_COVERAGE_CFLAGS)\nAM_CFLAGS += $(SQLITE_CFLAGS) $(UV_CFLAGS) $(PTHREAD_CFLAGS)\n\nif WITH_STATIC_DEPS\nAM_CFLAGS += -DDQLITE_STATIC_LIBC\nstatic = -all-static\nelse\nstatic =\nendif\n\nAM_LDFLAGS = $(static)\nAM_LDFLAGS += $(UV_LIBS) $(PTHREAD_LIBS)\n\nif DEBUG_ENABLED\nAM_CFLAGS += -O0\nelse\nAM_CFLAGS += -O2\nendif\n\nif SANITIZE_ENABLED\nAM_CFLAGS += -fsanitize=address\nendif\n\nif BACKTRACE_ENABLED\nAM_CFLAGS += -DDQLITE_ASSERT_WITH_BACKTRACE -DRAFT_ASSERT_WITH_BACKTRACE\nAM_LDFLAGS += -lbacktrace\nendif\n\ninclude_HEADERS = include/dqlite.h\n\nbasic_dqlite_sources = \\\n  src/bind.c \\\n  src/client/protocol.c \\\n  src/command.c \\\n  src/conn.c \\\n  src/db.c \\\n  src/dqlite.c \\\n  src/error.c \\\n  src/format.c \\\n  src/fsm.c \\\n  src/gateway.c \\\n  src/leader.c \\\n  src/lib/addr.c \\\n  src/lib/buffer.c \\\n  src/lib/fs.c \\\n  src/lib/sm.c \\\n  src/lib/threadpool.c \\\n  src/lib/transport.c \\\n  src/logger.c \\\n  src/message.c \\\n  src/metrics.c \\\n  src/config.c \\\n  src/query.c \\\n  src/registry.c \\\n  src/request.c \\\n  src/response.c \\\n  src/roles.c \\\n  src/server.c \\\n  src/stmt.c \\\n  src/tracing.c \\\n  src/transport.c \\\n  src/translate.c \\\n  src/tuple.c \\\n  src/vfs.c \\\n  src/vfs2.c\n\nlib_LTLIBRARIES = libdqlite.la\nlibdqlite_la_CFLAGS = $(AM_CFLAGS) -fvisibility=hidden -DRAFT_API=''\nlibdqlite_la_LDFLAGS = $(AM_LDFLAGS) -version-info 0:1:0\nlibdqlite_la_SOURCES = $(basic_dqlite_sources)\n\nlibraft_la_SOURCES = \\\n  src/raft/byte.c \\\n  src/raft/callbacks.c \\\n  src/raft/client.c \\\n  src/raft/compress.c \\\n  src/raft/configuration.c \\\n  src/raft/convert.c \\\n  src/raft/election.c \\\n  src/raft/entry.c \\\n  src/raft/err.c \\\n  src/raft/fixture.c \\\n  src/raft/flags.c \\\n  src/raft/heap.c \\\n  src/raft/log.c \\\n  src/raft/membership.c \\\n  src/raft/progress.c \\\n  src/raft/raft.c \\\n  src/raft/recv.c \\\n  src/raft/recv_append_entries.c \\\n  src/raft/recv_append_entries_result.c \\\n  src/raft/recv_request_vote.c \\\n  src/raft/recv_request_vote_result.c \\\n  src/raft/recv_install_snapshot.c \\\n  src/raft/recv_timeout_now.c \\\n  src/raft/replication.c \\\n  src/raft/snapshot.c \\\n  src/raft/start.c \\\n  src/raft/state.c \\\n  src/raft/syscall.c \\\n  src/raft/tick.c \\\n  src/raft/uv.c \\\n  src/raft/uv_append.c \\\n  src/raft/uv_encoding.c \\\n  src/raft/uv_finalize.c \\\n  src/raft/uv_fs.c \\\n  src/raft/uv_ip.c \\\n  src/raft/uv_list.c \\\n  src/raft/uv_metadata.c \\\n  src/raft/uv_os.c \\\n  src/raft/uv_prepare.c \\\n  src/raft/uv_recv.c \\\n  src/raft/uv_segment.c \\\n  src/raft/uv_send.c \\\n  src/raft/uv_snapshot.c \\\n  src/raft/uv_tcp.c \\\n  src/raft/uv_tcp_listen.c \\\n  src/raft/uv_tcp_connect.c \\\n  src/raft/uv_truncate.c \\\n  src/raft/uv_work.c \\\n  src/raft/uv_writer.c\n\nlibdqlite_la_SOURCES += $(libraft_la_SOURCES)\n\ncheck_PROGRAMS = unit-test integration-test\n\ncheck_LTLIBRARIES = libtest.la\n\nlibtest_la_CFLAGS = $(AM_CFLAGS) -DMUNIT_TEST_NAME_LEN=60 -Wno-unknown-warning-option -Wno-unused-result -Wno-conversion -Wno-uninitialized -Wno-maybe-uninitialized -Wno-strict-prototypes -Wno-old-style-definition\nlibtest_la_SOURCES = \\\n  test/lib/endpoint.c \\\n  test/lib/fault.c \\\n  test/lib/fs.c \\\n  test/lib/heap.c \\\n  test/lib/logger.c \\\n  test/lib/munit.c \\\n  test/lib/raft_heap.c \\\n  test/lib/server.c \\\n  test/lib/sqlite.c \\\n  test/lib/uv.c\n\nunit_test_SOURCES = $(basic_dqlite_sources)\nunit_test_SOURCES += \\\n  test/test_error.c \\\n  test/test_integration.c \\\n  test/unit/ext/test_uv.c \\\n  test/unit/ext/test_uv_pool.c \\\n  test/unit/lib/test_addr.c \\\n  test/unit/lib/test_buffer.c \\\n  test/unit/lib/test_byte.c \\\n  test/unit/lib/test_registry.c \\\n  test/unit/lib/test_serialize.c \\\n  test/unit/lib/test_transport.c \\\n  test/unit/test_command.c \\\n  test/unit/test_conn.c \\\n  test/unit/test_gateway.c \\\n  test/unit/test_concurrency.c \\\n  test/unit/test_registry.c \\\n  test/unit/test_replication.c \\\n  test/unit/test_request.c \\\n  test/unit/test_role_management.c \\\n  test/unit/test_sm.c \\\n  test/unit/test_tuple.c \\\n  test/unit/test_vfs.c \\\n  test/unit/test_vfs_extra.c \\\n  test/unit/test_vfs2.c \\\n  test/unit/main.c\nunit_test_CFLAGS = $(AM_CFLAGS) -Wno-unknown-warning-option -Wno-uninitialized -Wno-maybe-uninitialized -Wno-float-equal -Wno-conversion\nunit_test_LDFLAGS = $(AM_LDFLAGS)\nunit_test_LDADD = libtest.la\n\nunit_test_LDADD += libraft.la\n\nintegration_test_SOURCES = \\\n  test/integration/test_client.c \\\n  test/integration/test_cluster.c \\\n  test/integration/test_fsm.c \\\n  test/integration/test_membership.c \\\n  test/integration/test_node.c \\\n  test/integration/test_role_management.c \\\n  test/integration/test_server.c \\\n  test/integration/main.c\nintegration_test_CFLAGS = $(AM_CFLAGS) -Wno-conversion\nintegration_test_LDFLAGS = $(AM_LDFLAGS) -no-install\nintegration_test_LDADD = libtest.la libdqlite.la\n\ncheck_LTLIBRARIES += libraft.la\n\ncheck_PROGRAMS += \\\n  raft-core-unit-test \\\n  raft-core-integration-test \\\n  raft-uv-unit-test \\\n  raft-uv-integration-test \\\n  raft-core-fuzzy-test\n\nlibtest_la_SOURCES += \\\n  test/raft/lib/addrinfo.c \\\n  test/raft/lib/fault.c \\\n  test/raft/lib/fsm.c \\\n  test/raft/lib/heap.c \\\n  test/raft/lib/munit.c \\\n  test/raft/lib/tcp.c \\\n  test/raft/lib/cluster.c \\\n  test/raft/lib/aio.c \\\n  test/raft/lib/dir.c \\\n  test/raft/lib/tcp.c \\\n  test/raft/lib/loop.c\n\nlibraft_la_CFLAGS = $(AM_CFLAGS)\nlibraft_la_LDFLAGS = $(static) $(UV_LIBS)\n\nraft_core_unit_test_SOURCES = \\\n  $(libraft_la_SOURCES) \\\n  src/lib/sm.c \\\n  src/lib/threadpool.c \\\n  src/tracing.c \\\n  test/raft/unit/main_core.c \\\n  test/raft/unit/test_byte.c \\\n  test/raft/unit/test_compress.c \\\n  test/raft/unit/test_configuration.c \\\n  test/raft/unit/test_err.c \\\n  test/raft/unit/test_flags.c \\\n  test/raft/unit/test_log.c \\\n  test/raft/unit/test_queue.c \\\n  test/raft/unit/test_snapshot.c\n\nraft_core_unit_test_CFLAGS = $(AM_CFLAGS) -Wno-conversion\nraft_core_unit_test_LDADD = libtest.la\n\nraft_core_integration_test_SOURCES = \\\n  src/tracing.c \\\n  src/lib/sm.c \\\n  src/lib/threadpool.c \\\n  test/raft/integration/main_core.c \\\n  test/raft/integration/test_apply.c \\\n  test/raft/integration/test_assign.c \\\n  test/raft/integration/test_barrier.c \\\n  test/raft/integration/test_bootstrap.c \\\n  test/raft/integration/test_digest.c \\\n  test/raft/integration/test_election.c \\\n  test/raft/integration/test_fixture.c \\\n  test/raft/integration/test_heap.c \\\n  test/raft/integration/test_init.c \\\n  test/raft/integration/test_membership.c \\\n  test/raft/integration/test_recover.c \\\n  test/raft/integration/test_replication.c \\\n  test/raft/integration/test_snapshot.c \\\n  test/raft/integration/test_start.c \\\n  test/raft/integration/test_strerror.c \\\n  test/raft/integration/test_tick.c \\\n  test/raft/integration/test_transfer.c \\\n  test/raft/integration/test_voter_contacts.c\nraft_core_integration_test_CFLAGS = $(AM_CFLAGS) -Wno-conversion\nraft_core_integration_test_LDFLAGS = $(static) -no-install\nraft_core_integration_test_LDADD = libtest.la libraft.la\n\nraft_core_fuzzy_test_SOURCES = \\\n  src/lib/sm.c \\\n  src/lib/threadpool.c \\\n  src/tracing.c \\\n  test/raft/fuzzy/main_core.c \\\n  test/raft/fuzzy/test_election.c \\\n  test/raft/fuzzy/test_liveness.c \\\n  test/raft/fuzzy/test_membership.c \\\n  test/raft/fuzzy/test_replication.c\nraft_core_fuzzy_test_CFLAGS = $(AM_CFLAGS) -Wno-conversion\nraft_core_fuzzy_test_LDFLAGS = $(static) -no-install\nraft_core_fuzzy_test_LDADD = libtest.la libraft.la\n\nraft_uv_unit_test_SOURCES = \\\n  src/tracing.c \\\n  src/raft/err.c \\\n  src/raft/heap.c \\\n  src/raft/syscall.c \\\n  src/raft/uv_fs.c \\\n  src/raft/uv_os.c \\\n  src/raft/uv_writer.c \\\n  test/raft/unit/main_uv.c \\\n  test/raft/unit/test_uv_fs.c \\\n  test/raft/unit/test_uv_os.c \\\n  test/raft/unit/test_uv_writer.c\nraft_uv_unit_test_CFLAGS = $(AM_CFLAGS) -Wno-conversion\nraft_uv_unit_test_LDADD = libtest.la $(UV_LIBS)\n\n# The integration/uv test is not linked to libraft, but built\n# directly against the libraft sources in order to test some\n# non-visible, non-API functions.\nraft_uv_integration_test_SOURCES = \\\n  $(libraft_la_SOURCES) \\\n  src/tracing.c \\\n  src/lib/sm.c \\\n  src/lib/threadpool.c \\\n  test/raft/integration/main_uv.c \\\n  test/raft/integration/test_uv_init.c \\\n  test/raft/integration/test_uv_append.c \\\n  test/raft/integration/test_uv_bootstrap.c \\\n  test/raft/integration/test_uv_load.c \\\n  test/raft/integration/test_uv_recover.c \\\n  test/raft/integration/test_uv_recv.c \\\n  test/raft/integration/test_uv_send.c \\\n  test/raft/integration/test_uv_set_term.c \\\n  test/raft/integration/test_uv_tcp_connect.c \\\n  test/raft/integration/test_uv_tcp_listen.c \\\n  test/raft/integration/test_uv_snapshot_put.c \\\n  test/raft/integration/test_uv_truncate.c \\\n  test/raft/integration/test_uv_truncate_snapshot.c \\\n  test/raft/integration/test_uv_work.c\nraft_uv_integration_test_CFLAGS = $(AM_CFLAGS) -Wno-type-limits -Wno-conversion\nraft_uv_integration_test_LDFLAGS = $(static) -no-install\nraft_uv_integration_test_LDADD = libtest.la $(UV_LIBS)\n\nif LZ4_AVAILABLE\nlibdqlite_la_CFLAGS += -DLZ4_AVAILABLE $(LZ4_CFLAGS)\nlibdqlite_la_LDFLAGS += $(LZ4_LIBS)\nraft_core_unit_test_CFLAGS += -DLZ4_AVAILABLE $(LZ4_CFLAGS)\nraft_core_unit_test_LDFLAGS = $(static) $(LZ4_LIBS)\nlibraft_la_CFLAGS += -DLZ4_AVAILABLE $(LZ4_CFLAGS)\nlibraft_la_LDFLAGS += $(LZ4_LIBS)\nraft_uv_integration_test_CFLAGS += -DLZ4_AVAILABLE\nraft_uv_integration_test_LDFLAGS += $(LZ4_LIBS)\nendif\n\nif LZ4_ENABLED\nlibdqlite_la_CFLAGS += -DLZ4_ENABLED\nraft_uv_integration_test_CFLAGS += -DLZ4_ENABLED\nraft_core_unit_test_CFLAGS += -DLZ4_ENABLED\nlibraft_la_CFLAGS += -DLZ4_ENABLED\nendif\n\nif BUILD_SQLITE_ENABLED\nnoinst_LTLIBRARIES = libsqlite3.la\nlibsqlite3_la_SOURCES = sqlite3.c\nlibsqlite3_la_CFLAGS = -g3\n\nunit_test_LDADD += libsqlite3.la\nlibdqlite_la_LIBADD = libsqlite3.la\nelse\nAM_LDFLAGS += $(SQLITE_LIBS)\nendif\n\nTESTS = $(check_PROGRAMS)\n\ncheck-norun: $(TESTS)\n\n# Sometimes we want to run the test binaries manually. This target allows us to\n# get the list of binaries out of the build system for that use-case,\n# maintaining a single source of truth.\nprint-test-programs:\n\t@echo '$(TESTS)'\n\nif CODE_COVERAGE_ENABLED\n\ninclude $(top_srcdir)/aminclude_static.am\n\nCODE_COVERAGE_DIRECTORY=./src\nCODE_COVERAGE_OUTPUT_DIRECTORY=coverage\nCODE_COVERAGE_OUTPUT_FILE=coverage.info\nCODE_COVERAGE_IGNORE_PATTERN=\"/usr/include/*\"\nCODE_COVERAGE_BRANCH_COVERAGE=1\nCODE_COVERAGE_LCOV_OPTIONS=$(CODE_COVERAGE_LCOV_OPTIONS_DEFAULT) --rc lcov_excl_br_line=\"assert\\(\"\n\nclean-local: code-coverage-clean\ndistclean-local: code-coverage-dist-clean\n\nendif # CODE_COVERAGE_ENABLED\n\npkgconfigdir = $(libdir)/pkgconfig\npkgconfig_DATA = dqlite.pc\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.79296875,
          "content": "dqlite [![CI Tests](https://github.com/canonical/dqlite/actions/workflows/build-and-test.yml/badge.svg)](https://github.com/canonical/dqlite/actions/workflows/build-and-test.yml) [![codecov](https://codecov.io/gh/canonical/dqlite/branch/master/graph/badge.svg)](https://codecov.io/gh/canonical/dqlite)\n======\n\n[English](./README.md)|[简体中文](./README_CH.md)\n\n[dqlite](https://dqlite.io) is a C library that implements an embeddable and\nreplicated SQL database engine with high availability and automatic failover.\n\nThe acronym \"dqlite\" stands for \"distributed SQLite\", meaning that dqlite\nextends [SQLite](https://sqlite.org/) with a network protocol that can connect\ntogether various instances of your application and have them act as a\nhighly-available cluster, with no dependency on external databases.\n\nDesign highlights\n----------------\n\n* Asynchronous single-threaded implementation using [libuv](https://libuv.org/)\n  as event loop.\n* Custom wire protocol optimized for SQLite primitives and data types.\n* Data replication based on the [Raft](https://raft.github.io/) algorithm.\n\nLicense\n-------\n\nThe dqlite library is released under a slightly modified version of LGPLv3,\nthat includes a copyright exception allowing users to statically link the\nlibrary code in their project and release the final work under their own terms.\nSee the full [license](https://github.com/canonical/dqlite/blob/master/LICENSE)\ntext.\n\nCompatibility\n-------------\n\ndqlite runs on Linux and requires a kernel with support for [native async\nI/O](https://man7.org/linux/man-pages/man2/io_setup.2.html) (not to be confused\nwith [POSIX AIO](https://man7.org/linux/man-pages/man7/aio.7.html)).\n\nTry it\n-------\n\nThe simplest way to see dqlite in action is to use the demo program that comes\nwith the Go dqlite bindings. Please see the [relevant\ndocumentation](https://github.com/canonical/go-dqlite#demo) in that project.\n\nMedia\n-----\n\nA talk about dqlite was given at FOSDEM 2020, you can watch it\n[here](https://fosdem.org/2020/schedule/event/dqlite/).\n\n[Here](https://gcore.com/blog/comparing-litestream-rqlite-dqlite/) is a blog\npost from 2022 comparing dqlite with rqlite and Litestream, other replication\nsoftware for SQLite.\n\nWire protocol\n-------------\n\nIf you wish to write a client, please refer to the [wire\nprotocol](https://dqlite.io/docs/protocol) documentation.\n\nInstall\n-------\n\nIf you are on a Debian-based system, you can get the latest development release\nfrom dqlite's [dev PPA](https://launchpad.net/~dqlite/+archive/ubuntu/dev):\n\n```\nsudo add-apt-repository ppa:dqlite/dev\nsudo apt update\nsudo apt install libdqlite-dev\n```\n\nContributing\n------------\n\nSee [CONTRIBUTING.md](./CONTRIBUTING.md).\n\nBuild\n-----\n\nTo build libdqlite from source you'll need:\n\n* Build dependencies: pkg-config and GNU Autoconf, Automake, libtool, and make\n* A reasonably recent version of [libuv](https://libuv.org/) (v1.8.0 or later), with headers.\n* A reasonably recent version of [SQLite](https://sqlite.org/) (v3.22.0 or later), with headers.\n* Optionally, a reasonably recent version of [LZ4](https://lz4.org/) (v1.7.1 or later), with headers.\n\nYour distribution should already provide you with these dependencies. For\nexample, on Debian-based distros:\n\n```\nsudo apt install pkg-config autoconf automake libtool make libuv1-dev libsqlite3-dev liblz4-dev\n```\n\nWith these dependencies installed, you can build and install the dqlite shared\nlibrary and headers as follows:\n\n```\n$ autoreconf -i\n$ ./configure\n$ make\n$ sudo make install\n```\n\nThe default installation prefix is `/usr/local`; you may need to run\n\n```\n$ sudo ldconfig\n```\n\nto enable the linker to find `libdqlite.so`. To install to a different prefix,\nreplace the configure step with something like\n\n```\n$ ./configure --prefix=/usr\n```\n\nBuilding for static linking\n---------------------------\n\nIf you're building dqlite for eventual use in a statically-linked\nbinary, there are some additional considerations. You should pass\n`--with-static-deps` to the configure script; this disables code that\nrelies on dependencies being dynamically linked. (Currently it only\naffects the test suite, but you should use it even when building\n`libdqlite.a` only for future compatibility.)\n\nWhen linking libdqlite with musl libc, it's recommended to increase\nthe default stack size, which is otherwise too low for dqlite's\nneeds:\n\n```\nLDFLAGS=\"-Wl,-z,stack-size=1048576\"\n```\n\nThe `contrib/build-static.sh` script demonstrates building and\ntesting dqlite with all dependencies (including libc) statically\nlinked.\n\nUsage notes\n-----------\n\nDetailed tracing will be enabled when the environment variable\n`LIBDQLITE_TRACE` is set before startup.  The value of it can be in `[0..5]`\nrange and represents a tracing level, where `0` means \"no traces\" emitted, `5`\nenables minimum (FATAL records only), and `1` enables maximum verbosity (all:\nDEBUG, INFO, WARN, ERROR, FATAL records).\n"
        },
        {
          "name": "README_CH.md",
          "type": "blob",
          "size": 3.3525390625,
          "content": "\n# dqlite \n\n[![CI Tests](https://github.com/canonical/dqlite/actions/workflows/build-and-test.yml/badge.svg)](https://github.com/canonical/dqlite/actions/workflows/build-and-test.yml) [![codecov](https://codecov.io/gh/canonical/dqlite/branch/master/graph/badge.svg)](https://codecov.io/gh/canonical/dqlite)\n\n**注意**：中文文档有可能未及时更新，请以最新的英文[readme](./README.md)为准。\n\n[dqlite](https://dqlite.io)是一个用C语言开发的可嵌入的，支持流复制的数据库引擎，具备高可用性和自动故障转移功能。\n\n“dqlite”是“distributed SQLite”的简写，即分布式SQLite。意味着dqlite通过网络协议扩展SQLite，将应用程序的各个实例连接在一起，让它们作为一个高可用的集群，而不依赖外部数据库。\n\n## 设计亮点\n\n- 使用[libuv](https://libuv.org/)实现异步单线程的事件循环机制\n\n- 针对SQLite 原始数据类型优化的自定义网络协议\n\n- 基于[Raft](https://raft.github.io/)算法的数据复制及其高效[C-raft](https://github.com/canonical/raft)实现 \n\n## license\n\ndqlite库是在略微修改的 LGPLv3 版本下发布的，其中包括一个版权例外，允许用户在他们的项目中静态链接这个库的代码并按照自己的条款发布最终作品。如有需要，请查看完整[license](https://github.com/canonical/dqlite/blob/master/LICENSE)文件。\n\n## 兼容性\n\ndqlite 在 Linux 上运行，由于C-raft 的 libuv 后端的实现，需要一个支持 [native async\nI/O](https://man7.org/linux/man-pages/man2/io_setup.2.html) 的内核(注意不要和[POSIX AIO](https://man7.org/linux/man-pages/man7/aio.7.html)混淆)。\n\n## 尝试使用\n\n查看和了解dqlite的最简单方式是使用绑定了Go dqlite的demo样例程序，Go dqlite的使用可以参考它的项目文档[relevant\ndocumentation](https://github.com/canonical/go-dqlite#demo)。\n\n## 视频\n\n在 FOSDEM 2020 上有一个关于dqlite的演讲视频，您可以在[此处](https://fosdem.org/2020/schedule/event/dqlite/)观看。\n\n## 网络协议\n\n如果您想编写客户端，请参阅[网络协议](https://dqlite.io/docs/protocol)文档。\n\n## 下载\n\n如果您使用的是基于 Debian 的系统，您可以从 dqlite 的[dev PPA](https://launchpad.net/~dqlite/+archive/ubuntu/dev) 获得最新的开发版本：\n\n```bash\nsudo add-apt-repository ppa:dqlite/dev\nsudo apt-get update\nsudo apt-get install libdqlite-dev\n```\n\n## 源码构建\n\n为了编译构建libdqlite，您需要准备：\n\n- 较新版本的libuv（v1.18.0或之后的版本）\n\n- 较新版本的sqlite3-dev\n\n- 构建好的[C-raft](https://github.com/canonical/raft)库\n\n您的linux发行版应该已经为您提供了预构建的 libuv 共享库和 libsqlite3-dev,就不需要在下载了，否则还需要下载这两个依赖。\n\n对于基于 Debian 的 Linux 发行版，您可以使用以下命令安装构建依赖项：\n\n```\nsudo apt install autoconf libuv1-dev liblz4-dev libtool pkg-config build-essential libsqlite3-dev\n```\n\n编译raft库运行如下命令：\n\n```bash\ngit clone https://github.com/canonical/raft.git\ncd raft\nautoreconf -i\n./configure\nmake\nsudo make install\ncd ..\n```\n\n所有依赖的库都下载好后，运行如下命令手动编译dqlite库：\n\n```bash\nautoreconf -i\n./configure\nmake\nsudo make install\n```\n\n## 注意事项\n\n当环境变量LIBRAFT_TRACE在启动时被设置，将启用详细跟踪。"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.935546875,
          "content": "# How to report a security issue with dqlite\n\nIf you find a security issue with dqlite, the best way to report it is using\nGitHub's private vulnerability reporting. [Here][advisory] is the form to\nsubmit a report, and [here][docs] is the detailed documentation for the GitHub\nfeature.\n\nOnce you submit a report, the dqlite team will work with you to figure out\nwhether there is a security issue. If so, we will develop a fix, get a CVE\nassigned, and coordinating the release of the fix. The [Ubuntu Security\ndisclosure and embargo policy][policy] contains more information about what you\ncan expect during this phase, and what we expect from you.\n\n[advisory]: https://github.com/canonical/dqlite/security/advisories/new\n[docs]: https://docs.github.com/en/code-security/security-advisories/guidance-on-reporting-and-writing-information-about-vulnerabilities/privately-reporting-a-security-vulnerability\n[policy]: https://ubuntu.com/security/disclosure-policy\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0048828125,
          "content": "0.1.0"
        },
        {
          "name": "ac",
          "type": "tree",
          "content": null
        },
        {
          "name": "bt",
          "type": "tree",
          "content": null
        },
        {
          "name": "clang-tidy-diff.py",
          "type": "blob",
          "size": 11.9755859375,
          "content": "#!/usr/bin/env python3\n#\n# ===- clang-tidy-diff.py - ClangTidy Diff Checker -----------*- python -*--===#\n#\n# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.\n# See https://llvm.org/LICENSE.txt for license information.\n# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n#\n# ===-----------------------------------------------------------------------===#\n\nr\"\"\"\nClangTidy Diff Checker\n======================\n\nThis script reads input from a unified diff, runs clang-tidy on all changed\nfiles and outputs clang-tidy warnings in changed lines only. This is useful to\ndetect clang-tidy regressions in the lines touched by a specific patch.\nExample usage for git/svn users:\n\n  git diff -U0 HEAD^ | clang-tidy-diff.py -p1\n  svn diff --diff-cmd=diff -x-U0 | \\\n      clang-tidy-diff.py -fix -checks=-*,modernize-use-override\n\n\"\"\"\n\nimport argparse\nimport glob\nimport json\nimport multiprocessing\nimport os\nimport re\nimport shutil\nimport subprocess\nimport sys\nimport tempfile\nimport threading\nimport traceback\n\ntry:\n    import yaml\nexcept ImportError:\n    yaml = None\n\nis_py2 = sys.version[0] == \"2\"\n\nif is_py2:\n    import Queue as queue\nelse:\n    import queue as queue\n\n\ndef run_tidy(task_queue, lock, timeout, failed_files):\n    watchdog = None\n    while True:\n        command = task_queue.get()\n        try:\n            proc = subprocess.Popen(\n                command, stdout=subprocess.PIPE, stderr=subprocess.PIPE\n            )\n\n            if timeout is not None:\n                watchdog = threading.Timer(timeout, proc.kill)\n                watchdog.start()\n\n            stdout, stderr = proc.communicate()\n            if proc.returncode != 0:\n                if proc.returncode < 0:\n                    msg = \"Terminated by signal %d : %s\\n\" % (\n                        -proc.returncode,\n                        \" \".join(command),\n                    )\n                    stderr += msg.encode(\"utf-8\")\n                failed_files.append(command)\n\n            with lock:\n                sys.stdout.write(stdout.decode(\"utf-8\") + \"\\n\")\n                sys.stdout.flush()\n                if stderr:\n                    sys.stderr.write(stderr.decode(\"utf-8\") + \"\\n\")\n                    sys.stderr.flush()\n        except Exception as e:\n            with lock:\n                sys.stderr.write(\"Failed: \" + str(e) + \": \".join(command) + \"\\n\")\n        finally:\n            with lock:\n                if not (timeout is None or watchdog is None):\n                    if not watchdog.is_alive():\n                        sys.stderr.write(\n                            \"Terminated by timeout: \" + \" \".join(command) + \"\\n\"\n                        )\n                    watchdog.cancel()\n            task_queue.task_done()\n\n\ndef start_workers(max_tasks, tidy_caller, arguments):\n    for _ in range(max_tasks):\n        t = threading.Thread(target=tidy_caller, args=arguments)\n        t.daemon = True\n        t.start()\n\n\ndef merge_replacement_files(tmpdir, mergefile):\n    \"\"\"Merge all replacement files in a directory into a single file\"\"\"\n    # The fixes suggested by clang-tidy >= 4.0.0 are given under\n    # the top level key 'Diagnostics' in the output yaml files\n    mergekey = \"Diagnostics\"\n    merged = []\n    for replacefile in glob.iglob(os.path.join(tmpdir, \"*.yaml\")):\n        content = yaml.safe_load(open(replacefile, \"r\"))\n        if not content:\n            continue  # Skip empty files.\n        merged.extend(content.get(mergekey, []))\n\n    if merged:\n        # MainSourceFile: The key is required by the definition inside\n        # include/clang/Tooling/ReplacementsYaml.h, but the value\n        # is actually never used inside clang-apply-replacements,\n        # so we set it to '' here.\n        output = {\"MainSourceFile\": \"\", mergekey: merged}\n        with open(mergefile, \"w\") as out:\n            yaml.safe_dump(output, out)\n    else:\n        # Empty the file:\n        open(mergefile, \"w\").close()\n\n\ndef main():\n    parser = argparse.ArgumentParser(\n        description=\"Run clang-tidy against changed files, and \"\n        \"output diagnostics only for modified \"\n        \"lines.\"\n    )\n    parser.add_argument(\n        \"-clang-tidy-binary\",\n        metavar=\"PATH\",\n        default=\"clang-tidy\",\n        help=\"path to clang-tidy binary\",\n    )\n    parser.add_argument(\n        \"-p\",\n        metavar=\"NUM\",\n        default=0,\n        help=\"strip the smallest prefix containing P slashes\",\n    )\n    parser.add_argument(\n        \"-regex\",\n        metavar=\"PATTERN\",\n        default=None,\n        help=\"custom pattern selecting file paths to check \"\n        \"(case sensitive, overrides -iregex)\",\n    )\n    parser.add_argument(\n        \"-iregex\",\n        metavar=\"PATTERN\",\n        default=r\".*\\.(cpp|cc|c\\+\\+|cxx|c|cl|h|hpp|m|mm|inc)\",\n        help=\"custom pattern selecting file paths to check \"\n        \"(case insensitive, overridden by -regex)\",\n    )\n    parser.add_argument(\n        \"-j\",\n        type=int,\n        default=1,\n        help=\"number of tidy instances to be run in parallel.\",\n    )\n    parser.add_argument(\n        \"-timeout\", type=int, default=None, help=\"timeout per each file in seconds.\"\n    )\n    parser.add_argument(\n        \"-fix\", action=\"store_true\", default=False, help=\"apply suggested fixes\"\n    )\n    parser.add_argument(\n        \"-checks\",\n        help=\"checks filter, when not specified, use clang-tidy \" \"default\",\n        default=\"\",\n    )\n    parser.add_argument(\n        \"-config-file\",\n        dest=\"config_file\",\n        help=\"Specify the path of .clang-tidy or custom config file\",\n        default=\"\",\n    )\n    parser.add_argument(\"-use-color\", action=\"store_true\", help=\"Use colors in output\")\n    parser.add_argument(\n        \"-path\", dest=\"build_path\", help=\"Path used to read a compile command database.\"\n    )\n    if yaml:\n        parser.add_argument(\n            \"-export-fixes\",\n            metavar=\"FILE_OR_DIRECTORY\",\n            dest=\"export_fixes\",\n            help=\"A directory or a yaml file to store suggested fixes in, \"\n            \"which can be applied with clang-apply-replacements. If the \"\n            \"parameter is a directory, the fixes of each compilation unit are \"\n            \"stored in individual yaml files in the directory.\",\n        )\n    else:\n        parser.add_argument(\n            \"-export-fixes\",\n            metavar=\"DIRECTORY\",\n            dest=\"export_fixes\",\n            help=\"A directory to store suggested fixes in, which can be applied \"\n            \"with clang-apply-replacements. The fixes of each compilation unit are \"\n            \"stored in individual yaml files in the directory.\",\n        )\n    parser.add_argument(\n        \"-extra-arg\",\n        dest=\"extra_arg\",\n        action=\"append\",\n        default=[],\n        help=\"Additional argument to append to the compiler \" \"command line.\",\n    )\n    parser.add_argument(\n        \"-extra-arg-before\",\n        dest=\"extra_arg_before\",\n        action=\"append\",\n        default=[],\n        help=\"Additional argument to prepend to the compiler \" \"command line.\",\n    )\n    parser.add_argument(\n        \"-quiet\",\n        action=\"store_true\",\n        default=False,\n        help=\"Run clang-tidy in quiet mode\",\n    )\n    parser.add_argument(\n        \"-load\",\n        dest=\"plugins\",\n        action=\"append\",\n        default=[],\n        help=\"Load the specified plugin in clang-tidy.\",\n    )\n\n    clang_tidy_args = []\n    argv = sys.argv[1:]\n    if \"--\" in argv:\n        clang_tidy_args.extend(argv[argv.index(\"--\") :])\n        argv = argv[: argv.index(\"--\")]\n\n    args = parser.parse_args(argv)\n\n    # Extract changed lines for each file.\n    filename = None\n    lines_by_file = {}\n    for line in sys.stdin:\n        match = re.search('^\\+\\+\\+\\ \"?(.*?/){%s}([^ \\t\\n\"]*)' % args.p, line)\n        if match:\n            filename = match.group(2)\n        if filename is None:\n            continue\n\n        if args.regex is not None:\n            if not re.match(\"^%s$\" % args.regex, filename):\n                continue\n        else:\n            if not re.match(\"^%s$\" % args.iregex, filename, re.IGNORECASE):\n                continue\n\n        match = re.search(\"^@@.*\\+(\\d+)(,(\\d+))?\", line)\n        if match:\n            start_line = int(match.group(1))\n            line_count = 1\n            if match.group(3):\n                line_count = int(match.group(3))\n            if line_count == 0:\n                continue\n            end_line = start_line + line_count - 1\n            lines_by_file.setdefault(filename, []).append([start_line, end_line])\n\n    if not any(lines_by_file):\n        print(\"No relevant changes found.\")\n        sys.exit(0)\n\n    max_task_count = args.j\n    if max_task_count == 0:\n        max_task_count = multiprocessing.cpu_count()\n    max_task_count = min(len(lines_by_file), max_task_count)\n\n    combine_fixes = False\n    export_fixes_dir = None\n    delete_fixes_dir = False\n    if args.export_fixes is not None:\n        # if a directory is given, create it if it does not exist\n        if args.export_fixes.endswith(os.path.sep) and not os.path.isdir(\n            args.export_fixes\n        ):\n            os.makedirs(args.export_fixes)\n\n        if not os.path.isdir(args.export_fixes):\n            if not yaml:\n                raise RuntimeError(\n                    \"Cannot combine fixes in one yaml file. Either install PyYAML or specify an output directory.\"\n                )\n\n            combine_fixes = True\n\n        if os.path.isdir(args.export_fixes):\n            export_fixes_dir = args.export_fixes\n\n    if combine_fixes:\n        export_fixes_dir = tempfile.mkdtemp()\n        delete_fixes_dir = True\n\n    # Tasks for clang-tidy.\n    task_queue = queue.Queue(max_task_count)\n    # A lock for console output.\n    lock = threading.Lock()\n\n    # List of files with a non-zero return code.\n    failed_files = []\n\n    # Run a pool of clang-tidy workers.\n    start_workers(\n        max_task_count, run_tidy, (task_queue, lock, args.timeout, failed_files)\n    )\n\n    # Form the common args list.\n    common_clang_tidy_args = []\n    if args.fix:\n        common_clang_tidy_args.append(\"-fix\")\n    if args.checks != \"\":\n        common_clang_tidy_args.append(\"-checks=\" + args.checks)\n    if args.config_file != \"\":\n        common_clang_tidy_args.append(\"-config-file=\" + args.config_file)\n    if args.quiet:\n        common_clang_tidy_args.append(\"-quiet\")\n    if args.build_path is not None:\n        common_clang_tidy_args.append(\"-p=%s\" % args.build_path)\n    if args.use_color:\n        common_clang_tidy_args.append(\"--use-color\")\n    for arg in args.extra_arg:\n        common_clang_tidy_args.append(\"-extra-arg=%s\" % arg)\n    for arg in args.extra_arg_before:\n        common_clang_tidy_args.append(\"-extra-arg-before=%s\" % arg)\n    for plugin in args.plugins:\n        common_clang_tidy_args.append(\"-load=%s\" % plugin)\n\n    for name in lines_by_file:\n        line_filter_json = json.dumps(\n            [{\"name\": name, \"lines\": lines_by_file[name]}], separators=(\",\", \":\")\n        )\n\n        # Run clang-tidy on files containing changes.\n        command = [args.clang_tidy_binary]\n        command.append(\"-line-filter=\" + line_filter_json)\n        if args.export_fixes is not None:\n            # Get a temporary file. We immediately close the handle so clang-tidy can\n            # overwrite it.\n            (handle, tmp_name) = tempfile.mkstemp(suffix=\".yaml\", dir=export_fixes_dir)\n            os.close(handle)\n            command.append(\"-export-fixes=\" + tmp_name)\n        command.extend(common_clang_tidy_args)\n        command.append(name)\n        command.extend(clang_tidy_args)\n\n        task_queue.put(command)\n\n    # Application return code\n    return_code = 0\n\n    # Wait for all threads to be done.\n    task_queue.join()\n    # Application return code\n    return_code = 0\n    if failed_files:\n        return_code = 1\n\n    if combine_fixes:\n        print(\"Writing fixes to \" + args.export_fixes + \" ...\")\n        try:\n            merge_replacement_files(export_fixes_dir, args.export_fixes)\n        except:\n            sys.stderr.write(\"Error exporting fixes.\\n\")\n            traceback.print_exc()\n            return_code = 1\n\n    if delete_fixes_dir:\n        shutil.rmtree(export_fixes_dir)\n    sys.exit(return_code)\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 4.0732421875,
          "content": "AC_PREREQ(2.60)\nAC_INIT([libdqlite], [1.18.0], [https://github.com/canonical/dqlite])\nAC_CONFIG_MACRO_DIR([m4])\nAC_CONFIG_AUX_DIR([ac])\n\nAM_INIT_AUTOMAKE([subdir-objects -Wall -Werror -Wno-portability foreign])\nAM_SILENT_RULES([yes])\n\nAC_SUBST(AM_CFLAGS)\nAC_PROG_CC\nAC_USE_SYSTEM_EXTENSIONS\n\nAX_PTHREAD\n\nLT_INIT\n\n# TODO: eventually enable this\n# AX_CHECK_COMPILE_FLAG([-Weverything], AM_CFLAGS+=\" -Weverything\")\n\n# Whether to enable debugging code.\nAC_ARG_ENABLE(debug, AS_HELP_STRING([--enable-debug[=ARG]], [enable debugging [default=no]]))\nAM_CONDITIONAL(DEBUG_ENABLED, test \"x$enable_debug\" = \"xyes\")\n\n# Whether to enable memory sanitizer.\nAC_ARG_ENABLE(sanitize, AS_HELP_STRING([--enable-sanitize[=ARG]], [enable code sanitizers [default=no]]))\nAM_CONDITIONAL(SANITIZE_ENABLED, test x\"$enable_sanitize\" = x\"yes\")\nAM_COND_IF(SANITIZE_ENABLED,\n  AX_CHECK_COMPILE_FLAG([-fsanitize=address],\n   [true],\n   [AC_MSG_ERROR([address sanitizer not supported])]))\n\nAC_ARG_ENABLE(backtrace, AS_HELP_STRING([--enable-backtrace[=ARG]], [print backtrace on assertion failure [default=no]]))\nAM_CONDITIONAL(BACKTRACE_ENABLED, test \"x$enable_backtrace\" = \"xyes\")\n\nAC_ARG_ENABLE(build-sqlite, AS_HELP_STRING([--enable-build-sqlite[=ARG]], [build libsqlite3 from sqlite3.c in the build root [default=no]]))\nAM_CONDITIONAL(BUILD_SQLITE_ENABLED, test \"x$enable_build_sqlite\" = \"xyes\")\n\nAC_ARG_ENABLE([build-raft],\n  [AS_HELP_STRING([--enable-build-raft[=ARG]],\n\t\t  [use the bundled raft sources instead of linking libraft (default is yes, required)])],\n  [enable_build_raft=$enableval],\n  [enable_build_raft=yes])\nAS_IF([test \"x$enable_build_raft\" != \"xyes\"],\n      AC_MSG_ERROR([linking to a separately-built libraft is no longer supported]),\n      [])\n\nAC_ARG_WITH(static-deps,\n\t    AS_HELP_STRING([--with-static-deps[=ARG]],\n\t\t\t   [skip building a shared library and link test binaries statically]))\nAM_CONDITIONAL(WITH_STATIC_DEPS, test \"x$with_static_deps\" = \"xyes\")\n\n# Whether to enable code coverage.\nAX_CODE_COVERAGE\n\n# Checks for header files.\nAC_CHECK_HEADERS([linux/io_uring.h linux/aio_abi.h])\n\n# Checks for library functions and definitions.\nAC_CHECK_DECLS(RWF_NOWAIT, [], [AC_MSG_ERROR(Linux kernel >= 4.14 required.)], [#include <linux/aio_abi.h>])\n\n# Enable large file support. This is mandatory in order to interoperate with\n# libuv, which enables large file support by default, making the size of 'off_t'\n# on 32-bit architecture be 8 bytes instead of the normal 4.\nAC_SYS_LARGEFILE\n\n# Checks for libraries\nPKG_CHECK_MODULES(SQLITE, [sqlite3 >= 3.22.0], [], [])\nPKG_CHECK_MODULES(UV, [libuv >= 1.34.0], [], [])\n\n# Allow not linking to liblz4 even if it's present.\nAC_ARG_WITH([lz4], AS_HELP_STRING([--without-lz4], [never link to liblz4]))\nAS_IF([test \"x$with_lz4\" != \"xno\"],\n     [PKG_CHECK_MODULES(LZ4, [liblz4 >= 1.7.1], [have_lz4=yes], [have_lz4=no])],\n     [have_lz4=no])\nAS_IF([test \"x$with_lz4\" = \"xyes\" -a \"x$have_lz4\" = \"xno\"],\n     [AC_MSG_ERROR([liblz4 required but not found])],\n     [])\n\nAM_CONDITIONAL(LZ4_AVAILABLE, test \"x$have_lz4\" = \"xyes\")\n\nAC_ARG_ENABLE(lz4, AS_HELP_STRING([--disable-lz4], [when building with lz4, do not compress snapshots by default]))\nAS_IF([test \"x$enable_lz4\" != \"x\" -a \"x$have_lz4\" = \"xno\"],\n      [AC_MSG_ERROR([snapshot compression (either by default or not) requires liblz4])],\n      [])\nAM_CONDITIONAL(LZ4_ENABLED, test \"x$enable_lz4\" != \"xno\" -a \"x$have_lz4\" = \"xyes\")\n\nCC_CHECK_FLAGS_APPEND([AM_CFLAGS],[CFLAGS],[ \\\n  -std=c11 \\\n  -g3 \\\n  --mcet \\\n  -fcf-protection \\\n  --param=ssp-buffer-size=4 \\\n  -pipe \\\n  -fno-strict-aliasing \\\n  -fdiagnostics-color \\\n  -fstack-clash-protection \\\n  -fstack-protector-strong \\\n  -fdiagnostics-show-option \\\n  -Wall \\\n  -Wextra \\\n  -Wimplicit-fallthrough=5 \\\n  -Wcast-align \\\n  -Wstrict-prototypes \\\n  -Wlogical-op \\\n  -Wmissing-include-dirs \\\n  -Wold-style-definition \\\n  -Winit-self \\\n  -Wfloat-equal \\\n  -Wsuggest-attribute=noreturn \\\n  -Wformat=2 \\\n  -Wshadow \\\n  -Wendif-labels \\\n  -Wdate-time \\\n  -Wnested-externs \\\n  -Wconversion \\\n  -Wno-format-nonliteral \\\n  -Werror \\\n])\n# To enable:\n#\n#  -Wpedantic \\\nAC_SUBST(AM_CFLAGS)\n\nAC_CONFIG_FILES([dqlite.pc Makefile])\nAC_OUTPUT\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "dqlite.pc.in",
          "type": "blob",
          "size": 0.2578125,
          "content": "prefix=@prefix@\nexec_prefix=@exec_prefix@\nlibdir=@libdir@\nincludedir=@includedir@\n\nName: dqlite\nDescription: Distributed SQLite engine\nVersion:  @PACKAGE_VERSION@\nLibs: -L${libdir} -ldqlite\nLibs.private: @SQLITE_LIBS@ @UV_LIBS@ @RAFT_LIBS@\nCflags: -I${includedir}\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}