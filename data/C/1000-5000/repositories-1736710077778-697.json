{
  "metadata": {
    "timestamp": 1736710077778,
    "page": 697,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/XNNPACK",
      "stars": 1920,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".bazelrc",
          "type": "blob",
          "size": 1.8779296875,
          "content": "# Common settings\ncommon --enable_bzlmod\nbuild --enable_bzlmod\n\n# Basic build settings\nbuild --jobs 128\nbuild --cxxopt='-std=gnu++14'\n\n# Sets the default Apple platform to macOS.\nbuild --apple_platform_type=macos\n\n# Android configs.\nbuild:android --crosstool_top=//external:android/crosstool\nbuild:android --host_crosstool_top=@bazel_tools//tools/cpp:toolchain\nbuild:android --linkopt=-ldl\nbuild:android --linkopt=-Wl,--gc-sections\n\nbuild:android_arm --config=android\nbuild:android_arm --cpu=armeabi-v7a\nbuild:android_arm --fat_apk_cpu=armeabi-v7a\n\nbuild:android_arm64 --config=android\nbuild:android_arm64 --cpu=arm64-v8a\nbuild:android_arm64 --fat_apk_cpu=arm64-v8a\n\n# iOS configs.\nbuild:ios --apple_platform_type=ios\n\nbuild:ios_i386 --config=ios\nbuild:ios_i386 --cpu=ios_i386\nbuild:ios_i386 --watchos_cpus=i386\n\nbuild:ios_x86_64 --config=ios\nbuild:ios_x86_64 --cpu=ios_x86_64\nbuild:ios_x86_64 --watchos_cpus=i386\n\nbuild:ios_armv7 --config=ios\nbuild:ios_armv7 --cpu=ios_armv7\nbuild:ios_armv7 --watchos_cpus=armv7k\n\nbuild:ios_arm64 --config=ios\nbuild:ios_arm64 --cpu=ios_arm64\nbuild:ios_arm64 --watchos_cpus=armv7k\n\nbuild:ios_arm64e --config=ios\nbuild:ios_arm64e --cpu=ios_arm64e\nbuild:ios_arm64e --watchos_cpus=armv7k\n\nbuild:ios_sim_arm64 --config=ios\nbuild:ios_sim_arm64 --cpu=ios_sim_arm64\nbuild:ios_sim_arm64 --watchos_cpus=armv7k\n\nbuild:ios_fat --config=ios\nbuild:ios_fat --ios_multi_cpus=armv7,arm64\nbuild:ios_fat --watchos_cpus=armv7k\n\n# macOS configs.\nbuild:macos --apple_platform_type=macos\n\nbuild:macos_arm64 --config=macos\nbuild:macos_arm64 --cpu=darwin_arm64\n\n# Disable Bzlmod for every Bazel command\ncommon --enable_bzlmod=false\n\n# Disable some warnings to allow a warning-free build\nbuild --cxxopt='-Wno-sign-compare'\nbuild --cxxopt='-Wno-comment'\nbuild --cxxopt='-Wno-psabi'\nbuild --cxxopt='-Wno-unused-but-set-variable'\nbuild --cxxopt='-Wno-unused-const-variable'\nbuild --copt='-Wno-unused-but-set-variable'\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 1.13671875,
          "content": "AllowShortFunctionsOnASingleLine: Inline\nPackConstructorInitializers: Never\nColumnLimit: 120\nAlignAfterOpenBracket: AlwaysBreak\nBinPackParameters: false\nAllowAllParametersOfDeclarationOnNextLine: true\nBreakBeforeBraces: Stroustrup\nSpaceAfterCStyleCast: true\nPointerAlignment: Left\nForEachMacros: ['XNN_UNPREDICTABLE', 'XNN_LIKELY', 'XNN_UNLIKELY']\nIfMacros: ['IF']\nIndentCaseLabels: true\nContinuationIndentWidth: 2\nSpaceBeforeParens: Custom\nSpaceBeforeParensOptions:\n  AfterControlStatements: true\n  AfterIfMacros: true\n  AfterForeachMacros: false\nSpacesBeforeTrailingComments: 2\nIncludeBlocks: Regroup\nIncludeCategories:\n  - Regex: '<xnnpack[./][[:alnum:].-]+>' # match XNNPack includes first\n    Priority: 5\n  - Regex: 'benchmark.h' # includes used in benchmarks\n    Priority: 3\n  - Regex: 'bench/' # includes used in benchmarks\n    Priority: 3\n  - Regex: 'gtest.h' # includes used in tests\n    Priority: 3\n  - Regex: 'gmock.h' # includes used in tests\n    Priority: 3\n  - Regex: '<[[:alnum:].]+>' # system headers\n    Priority: 2 # lower priority to keep it sorted first before XNNPack includes\nMaxEmptyLinesToKeep: 2 # used to separate includes from functions\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4873046875,
          "content": "# Copyright (c) Facebook, Inc. and its affiliates.\n# All rights reserved.\n#\n# Copyright 2019 Google LLC\n#\n# This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree.\n\n# Build objects and artifacts\nbazel-bin\nbazel-genfiles\nbazel-out\nbazel-testlogs\nbazel-XNNPACK\nbin/\nbuild/\nbuild-*/\ndeps/\nlib/\nlibs/\nobj/\nout/\n*.pyc\n*.pyo\n*.log\n\n# System files\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nehthumbs.db\nThumbs.db\n*.swp\n.vscode\n"
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 56.1337890625,
          "content": "# Copyright 2020 Google LLC\n#\n# This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree.\n#\n# Description:\n#   XNNPACK - optimized floating-point neural network operators library\n\nload(\"@bazel_skylib//:bzl_library.bzl\", \"bzl_library\")\nload(\"@bazel_skylib//lib:selects.bzl\", \"selects\")  # buildifier: disable=out-of-order-load\nload(\"@rules_python//python:py_binary.bzl\", \"py_binary\")\nload(\n    \":build_defs.bzl\",\n    \"xnnpack_cc_library\",\n    \"xnnpack_cxx_library\",\n    \"xnnpack_if_kleidiai_enabled\",\n    \"xnnpack_min_size_copts\",\n    \"xnnpack_slinky_deps\",\n    \"xnnpack_source_list_file\",\n    \"xnnpack_transitive_source_list\",\n    \"xnnpack_visibility\",\n)\nload(\n    \":build_params.bzl\",\n    \"xnnpack_archs\",\n    \"xnnpack_cc_library_for_arch\",\n    \"xnnpack_cond_for_arch\",\n    \"xnnpack_configurable_defines\",\n    \"xnnpack_list_sum\",\n    \"xnnpack_select_if\",\n    \"xnnpack_simd_f16_archs\",\n    \"xnnpack_simd_f32_archs\",\n    \"xnnpack_simd_s16_archs\",\n    \"xnnpack_simd_s32_archs\",\n    \"xnnpack_simd_s8_archs\",\n)\nload(\n    \"//gen:microkernels.bzl\",\n    \"all_srcs_for_arch\",\n    \"non_prod_asm_srcs_for_arch\",\n    \"non_prod_c_srcs_for_arch\",\n    \"prod_asm_srcs_for_arch\",\n    \"prod_c_srcs_for_arch\",\n)\nload(\n    \":build_srcs.bzl\",\n    \"LOGGING_SRCS\",\n    \"OPERATOR_SRCS\",\n    \"SUBGRAPH_SRCS\",\n    \"TABLE_SRCS\",\n    \"XNNPACK_SRCS\",\n)\n\nlicenses([\"notice\"])\n\nexports_files([\"LICENSE\"])\n\nexports_files([\"preamble.js.lds\"])\n\nMICROKERNEL_DEFS = [\n    \"src/f16-avgpool/f16-avgpool-minmax.h\",\n    \"src/f16-dwconv/f16-dwconv-minmax-multipass.h\",\n    \"src/f16-dwconv/f16-dwconv-minmax-unipass.h\",\n    \"src/f16-f32-vcvt/f16-f32-vcvt.h\",\n    \"src/f16-maxpool/f16-maxpool-minmax.h\",\n    \"src/f16-pavgpool/f16-pavgpool-minmax.h\",\n    \"src/f16-qu8-vcvt/f16-qu8-vcvt.h\",\n    \"src/f16-qs8-vcvt/f16-qs8-vcvt.h\",\n    \"src/f16-vabs/f16-vabs.h\",\n    \"src/f16-vbinary/f16-vadd.h\",\n    \"src/f16-vbinary/f16-vaddc.h\",\n    \"src/f16-vbinary/f16-vcmul.h\",\n    \"src/f16-vbinary/f16-vdiv.h\",\n    \"src/f16-vbinary/f16-vdivc.h\",\n    \"src/f16-vbinary/f16-vmax.h\",\n    \"src/f16-vbinary/f16-vmaxc.h\",\n    \"src/f16-vbinary/f16-vmin.h\",\n    \"src/f16-vbinary/f16-vminc.h\",\n    \"src/f16-vbinary/f16-vmul.h\",\n    \"src/f16-vbinary/f16-vmulc.h\",\n    \"src/f16-vbinary/f16-vprelu.h\",\n    \"src/f16-vbinary/f16-vpreluc.h\",\n    \"src/f16-vbinary/f16-vrdivc.h\",\n    \"src/f16-vbinary/f16-vrpreluc.h\",\n    \"src/f16-vbinary/f16-vrsubc.h\",\n    \"src/f16-vbinary/f16-vsqrdiff.h\",\n    \"src/f16-vbinary/f16-vsqrdiffc.h\",\n    \"src/f16-vbinary/f16-vsub.h\",\n    \"src/f16-vbinary/f16-vsubc.h\",\n    \"src/f16-vclamp/f16-vclamp.h\",\n    \"src/f16-velu/f16-velu.h\",\n    \"src/f16-vhswish/f16-vhswish.h\",\n    \"src/f16-vlrelu/f16-vlrelu.h\",\n    \"src/f16-vmulcaddc/f16-vmulcaddc.h\",\n    \"src/f16-vneg/f16-vneg.h\",\n    \"src/f16-vrnd/f16-vrndd.h\",\n    \"src/f16-vrnd/f16-vrndne.h\",\n    \"src/f16-vrnd/f16-vrndu.h\",\n    \"src/f16-vrnd/f16-vrndz.h\",\n    \"src/f16-vrsqrt/f16-vrsqrt.h\",\n    \"src/f16-vsigmoid/f16-vsigmoid.h\",\n    \"src/f16-vsqr/f16-vsqr.h\",\n    \"src/f16-vsqrt/f16-vsqrt.h\",\n    \"src/f16-vtanh/f16-vtanh.h\",\n    \"src/f32-avgpool/f32-avgpool-minmax.h\",\n    \"src/f32-dwconv/f32-dwconv-minmax-multipass.h\",\n    \"src/f32-dwconv/f32-dwconv-minmax-unipass.h\",\n    \"src/f32-dwconv/f32-dwconv-multipass.h\",\n    \"src/f32-dwconv/f32-dwconv-unipass.h\",\n    \"src/f32-f16-vcvt/f32-f16-vcvt.h\",\n    \"src/f32-maxpool/f32-maxpool-minmax.h\",\n    \"src/f32-pavgpool/f32-pavgpool-minmax.h\",\n    \"src/f32-qs8-vcvt/f32-qs8-vcvt.h\",\n    \"src/f32-qu8-vcvt/f32-qu8-vcvt.h\",\n    \"src/f32-raddextexp/f32-raddextexp.h\",\n    \"src/f32-vabs/f32-vabs.h\",\n    \"src/f32-vbinary/f32-vadd.h\",\n    \"src/f32-vbinary/f32-vaddc.h\",\n    \"src/f32-vbinary/f32-vcmul.h\",\n    \"src/f32-vbinary/f32-vcopysign.h\",\n    \"src/f32-vbinary/f32-vcopysignc.h\",\n    \"src/f32-vbinary/f32-vdiv.h\",\n    \"src/f32-vbinary/f32-vdivc.h\",\n    \"src/f32-vbinary/f32-vmax.h\",\n    \"src/f32-vbinary/f32-vmaxc.h\",\n    \"src/f32-vbinary/f32-vmin.h\",\n    \"src/f32-vbinary/f32-vminc.h\",\n    \"src/f32-vbinary/f32-vmul.h\",\n    \"src/f32-vbinary/f32-vmulc.h\",\n    \"src/f32-vbinary/f32-vprelu.h\",\n    \"src/f32-vbinary/f32-vpreluc.h\",\n    \"src/f32-vbinary/f32-vrcopysignc.h\",\n    \"src/f32-vbinary/f32-vrdivc.h\",\n    \"src/f32-vbinary/f32-vrpreluc.h\",\n    \"src/f32-vbinary/f32-vrsubc.h\",\n    \"src/f32-vbinary/f32-vsqrdiff.h\",\n    \"src/f32-vbinary/f32-vsqrdiffc.h\",\n    \"src/f32-vbinary/f32-vsub.h\",\n    \"src/f32-vbinary/f32-vsubc.h\",\n    \"src/f32-vclamp/f32-vclamp.h\",\n    \"src/f32-velu/f32-velu.h\",\n    \"src/f32-vexp/f32-vexp.h\",\n    \"src/f32-vgelu/f32-vgelu.h\",\n    \"src/f32-vhswish/f32-vhswish.h\",\n    \"src/f32-vlog/f32-vlog.h\",\n    \"src/f32-vlrelu/f32-vlrelu.h\",\n    \"src/f32-vmulcaddc/f32-vmulcaddc.h\",\n    \"src/f32-vneg/f32-vneg.h\",\n    \"src/f32-vrelu/f32-vrelu.h\",\n    \"src/f32-vrnd/f32-vrndd.h\",\n    \"src/f32-vrnd/f32-vrndne.h\",\n    \"src/f32-vrnd/f32-vrndu.h\",\n    \"src/f32-vrnd/f32-vrndz.h\",\n    \"src/f32-vrsqrt/f32-vrsqrt.h\",\n    \"src/f32-vscaleexpminusmax/f32-vscaleexpminusmax.h\",\n    \"src/f32-vscaleextexp/f32-vscaleextexp.h\",\n    \"src/f32-vsigmoid/f32-vsigmoid.h\",\n    \"src/f32-vsqr/f32-vsqr.h\",\n    \"src/f32-vsqrt/f32-vsqrt.h\",\n    \"src/f32-vtanh/f32-vtanh.h\",\n    \"src/qs8-dwconv/qs8-dwconv-minmax-multipass-fp32.h\",\n    \"src/qs8-dwconv/qs8-dwconv-minmax-multipass-rndnu.h\",\n    \"src/qs8-dwconv/qs8-dwconv-minmax-unipass-fp32.h\",\n    \"src/qs8-dwconv/qs8-dwconv-minmax-unipass-rndnu.h\",\n    \"src/qs8-f16-vcvt/qs8-f16-vcvt.h\",\n    \"src/qs8-f32-vcvt/qs8-f32-vcvt.h\",\n    \"src/qs8-packw/qs8-packw.h\",\n    \"src/qs8-qc4w-packw/qs8-qc4w-packw.h\",\n    \"src/qs8-qc8w-dwconv/qs8-qc8w-dwconv-minmax-multipass-fp32.h\",\n    \"src/qs8-qc8w-dwconv/qs8-qc8w-dwconv-minmax-unipass-fp32.h\",\n    \"src/qs8-vadd/qs8-vadd-minmax.h\",\n    \"src/qs8-vaddc/qs8-vaddc-minmax.h\",\n    \"src/qs8-vcvt/qs8-vcvt.h\",\n    \"src/qs8-vlrelu/qs8-vlrelu.h\",\n    \"src/qs8-vmul/qs8-vmul-minmax-fp32.h\",\n    \"src/qs8-vmul/qs8-vmul-minmax-rndnu.h\",\n    \"src/qs8-vmulc/qs8-vmulc-minmax-fp32.h\",\n    \"src/qs8-vmulc/qs8-vmulc-minmax-rndnu.h\",\n    \"src/qu8-avgpool/qu8-avgpool-minmax.h\",\n    \"src/qu8-dwconv/qu8-dwconv-minmax-multipass-fp32.h\",\n    \"src/qu8-dwconv/qu8-dwconv-minmax-multipass-rndnu.h\",\n    \"src/qu8-dwconv/qu8-dwconv-minmax-unipass-fp32.h\",\n    \"src/qu8-dwconv/qu8-dwconv-minmax-unipass-rndnu.h\",\n    \"src/qu8-f32-vcvt/qu8-f32-vcvt.h\",\n    \"src/qu8-vadd/qu8-vadd-minmax.h\",\n    \"src/qu8-vaddc/qu8-vaddc-minmax.h\",\n    \"src/qu8-vcvt/qu8-vcvt.h\",\n    \"src/qu8-vlrelu/qu8-vlrelu.h\",\n    \"src/qu8-vmul/qu8-vmul-minmax-fp32.h\",\n    \"src/qu8-vmul/qu8-vmul-minmax-rndnu.h\",\n    \"src/qu8-vmulc/qu8-vmulc-minmax-fp32.h\",\n    \"src/qu8-vmulc/qu8-vmulc-minmax-rndnu.h\",\n    \"src/s8-maxpool/s8-maxpool-minmax.h\",\n    \"src/s8-vclamp/s8-vclamp.h\",\n    \"src/u8-maxpool/u8-maxpool-minmax.h\",\n    \"src/u8-vclamp/u8-vclamp.h\",\n    \"src/xx-fill/xx-fill.h\",\n    \"src/xx-pad/xx-pad.h\",\n    \"src/xx-transposev/xx-transposev.h\",\n    \"src/x8-packq/x8-packq.h\",\n    \"src/x8-packw/x8-packw.h\",\n    \"src/x8-transposec/x8-transposec.h\",\n    \"src/x16-pack-lh/x16-pack-lh.h\",\n    \"src/x16-packw/x16-packw.h\",\n    \"src/x16-transposec/x16-transposec.h\",\n    \"src/x24-transposec/x24-transposec.h\",\n    \"src/x32-packb/x32-packb.h\",\n    \"src/x32-pack-lh/x32-pack-lh.h\",\n    \"src/x32-packw/x32-packw.h\",\n    \"src/x32-packx/x32-packx.h\",\n    \"src/x32-transposec/x32-transposec.h\",\n    \"src/x32-zerob/x32-zerob.h\",\n    \"src/x64-transposec/x64-transposec.h\",\n]\n\nMICROKERNEL_HDRS = [\n    \"src/xnnpack/argmaxpool.h\",\n    \"src/xnnpack/avgpool.h\",\n    \"src/xnnpack/conv.h\",\n    \"src/xnnpack/dwconv.h\",\n    \"src/xnnpack/fill.h\",\n    \"src/xnnpack/gemm.h\",\n    \"src/xnnpack/ibilinear.h\",\n    \"src/xnnpack/igemm.h\",\n    \"src/xnnpack/lut.h\",\n    \"src/xnnpack/maxpool.h\",\n    \"src/xnnpack/packb.h\",\n    \"src/xnnpack/packq.h\",\n    \"src/xnnpack/packw.h\",\n    \"src/xnnpack/packx.h\",\n    \"src/xnnpack/pad.h\",\n    \"src/xnnpack/pack-lh.h\",\n    \"src/xnnpack/pavgpool.h\",\n    \"src/xnnpack/ppmm.h\",\n    \"src/xnnpack/quantization.h\",\n    \"src/xnnpack/raddexpminusmax.h\",\n    \"src/xnnpack/raddextexp.h\",\n    \"src/xnnpack/raddstoreexpminusmax.h\",\n    \"src/xnnpack/reduce.h\",\n    \"src/xnnpack/spmm.h\",\n    \"src/xnnpack/transpose.h\",\n    \"src/xnnpack/unpool.h\",\n    \"src/xnnpack/vbinary.h\",\n    \"src/xnnpack/vcvt.h\",\n    \"src/xnnpack/vmulcaddc.h\",\n    \"src/xnnpack/vscaleexpminusmax.h\",\n    \"src/xnnpack/vscaleextexp.h\",\n    \"src/xnnpack/vunary.h\",\n    \"src/xnnpack/zerob.h\",\n    \"src/xnnpack/zip.h\",\n] + MICROKERNEL_DEFS\n\nMICROKERNEL_DEPS = [\n    \":assembly\",\n    \":common\",\n    \":hardware_config\",\n    \":math\",\n    \":microkernels_h\",\n    \":microparams\",\n    \":prefetch\",\n    \":tables\",\n    \":unaligned\",\n]\n\nSIMD_HEADERS = [\n    \"src/xnnpack/simd/f32-avx-base.h\",\n    \"src/xnnpack/simd/f32-generic-functions.h\",\n] + [\n    \"src/xnnpack/simd/f32-\" + arch + \".h\"\n    for arch in xnnpack_simd_f32_archs()\n] + [\n    \"src/xnnpack/simd/f16-\" + arch + \".h\"\n    for arch in xnnpack_simd_f16_archs()\n] + [\n    \"src/xnnpack/simd/s16-\" + arch + \".h\"\n    for arch in xnnpack_simd_s16_archs()\n] + [\n    \"src/xnnpack/simd/s32-\" + arch + \".h\"\n    for arch in xnnpack_simd_s32_archs()\n] + [\n    \"src/xnnpack/simd/s8-\" + arch + \".h\"\n    for arch in xnnpack_simd_s8_archs()\n]\n\nexports_files(SIMD_HEADERS)\n\nINTERNAL_MICROKERNEL_HDRS = MICROKERNEL_HDRS + SIMD_HEADERS + [\n    \"src/xnnpack/cache.h\",\n    \"src/xnnpack/intrinsics-polyfill.h\",\n    \"src/xnnpack/requantization-stubs.h\",\n    \"src/xnnpack/unaligned.h\",\n]\n\nALL_MICROKERNEL_SRCS = xnnpack_list_sum(\n    [all_srcs_for_arch(arch) for arch in xnnpack_archs()],\n    [],\n)\n\nfilegroup(\n    name = \"microkernel_source_files\",\n    data = ALL_MICROKERNEL_SRCS + [\"src/microparams-init.c\"],\n    visibility = xnnpack_visibility(),\n)\n\nfilegroup(\n    name = \"microkernel_header_files\",\n    data = MICROKERNEL_HDRS + [\"src/xnnpack/microparams.h\"],\n    visibility = xnnpack_visibility(),\n)\n\n# Collection of internal microkernel related headers that declares all the microkernel functions.\nxnnpack_cc_library(\n    name = \"microkernels_h\",\n    hdrs = INTERNAL_MICROKERNEL_HDRS,\n    deps = [\n        \":common\",\n        \":config_hdrs\",\n        \":fp16\",\n        \":math\",\n        \":memory\",\n        \":microparams\",\n        \":mutex\",\n        \":xnnpack_h\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"xnnpack_h\",\n    hdrs = [\"include/xnnpack.h\"],\n    deps = [\n        \"@pthreadpool\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"experiments_config\",\n    srcs = [\"src/configs/experiments-config.c\"],\n    hdrs = [\"include/experiments-config.h\"],\n    visibility = xnnpack_visibility(),\n)\n\nxnnpack_cc_library(\n    name = \"common\",\n    hdrs = [\"src/xnnpack/common.h\"],\n)\n\nxnnpack_cc_library(\n    name = \"init_once\",\n    hdrs = [\"src/xnnpack/init-once.h\"],\n    deps = [\n        \":common\",\n        \":xnnpack_h\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"microparams\",\n    hdrs = [\n        \"src/xnnpack/microparams.h\",\n    ],\n    deps = [\n        \":common\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"hardware_config\",\n    srcs = [\"src/configs/hardware-config.c\"],\n    hdrs = [\n        \"src/xnnpack/hardware-config.h\",\n        \"src/xnnpack/microfnptr.h\",\n        \"src/xnnpack/microparams.h\",\n    ],\n    defines = xnnpack_configurable_defines(),\n    deps = [\n        \":common\",\n        \":init_once\",\n        \":logging\",\n    ] + select({\n        \":cpuinfo_enabled\": [\"@cpuinfo\"],\n        \"//conditions:default\": [],\n    }),\n)\n\nxnnpack_cc_library(\n    name = \"config_hdrs\",\n    hdrs = [\n        \"src/xnnpack/config.h\",\n        \"src/xnnpack/config-types.h\",\n    ],\n    deps = [\n        \":hardware_config\",\n        \":params\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"microkernel_configs\",\n    srcs = XNNPACK_SRCS,\n    hdrs = [\n        \"src/xnnpack/config.h\",\n        \"src/xnnpack/config-types.h\",\n        \"src/xnnpack/microfnptr.h\",\n        \"src/xnnpack/microparams.h\",\n    ],\n    copts = select({\n        \":cpuinfo_enabled\": [\"-DXNN_ENABLE_CPUINFO=1\"],\n        \"//conditions:default\": [\"-DXNN_ENABLE_CPUINFO=0\"],\n    }),\n    defines = xnnpack_configurable_defines(),\n    deps = [\n        \":common\",\n        \":config_hdrs\",\n        \":experiments_config\",\n        \":hardware_config\",\n        \":init_once\",\n        \":logging\",\n        \":math\",\n        \":microkernels_h\",\n        \":microparams_init\",\n        \":packing\",\n        \":prod_microkernels\",\n        \":xnnpack_h\",\n    ] + select({\n        \":cpuinfo_enabled\": [\"@cpuinfo\"],\n        \"//conditions:default\": [],\n    }),\n)\n\nxnnpack_cc_library(\n    name = \"params\",\n    srcs = [\"src/params.c\"],\n    hdrs = [\n        \"src/xnnpack/microfnptr.h\",\n        \"src/xnnpack/params.h\",\n    ],\n    deps = [\n        \":common\",\n        \":microparams\",\n        \":xnnpack_h\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"fp16\",\n    hdrs = [\"src/xnnpack/fp16.h\"],\n    compatible_with = [],\n)\n\nxnnpack_cc_library(\n    name = \"math\",\n    hdrs = [\"src/xnnpack/math.h\"],\n    deps = [\n        \":common\",\n        \":config_hdrs\",\n        \":fp16\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"prefetch\",\n    hdrs = [\"src/xnnpack/prefetch.h\"],\n    deps = [\n        \":common\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"unaligned\",\n    hdrs = [\"src/xnnpack/unaligned.h\"],\n    deps = [\n        \":common\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"microparams_init\",\n    srcs = [\"src/microparams-init.c\"],\n    hdrs = [\"src/xnnpack/microparams-init.h\"],\n    deps = [\n        \":common\",\n        \":math\",\n        \":microparams\",\n        \":requantization\",\n        \":unaligned\",\n        \":xnnpack_h\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"node_type\",\n    hdrs = [\n        \"src/xnnpack/node-type.h\",\n        \"src/xnnpack/node-type-defs.h\",\n    ],\n    deps = [\n        \":common\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"allocation_type\",\n    hdrs = [\n        \"src/xnnpack/allocation-type.h\",\n        \"src/xnnpack/allocation-type-defs.h\",\n    ],\n    deps = [\n        \":common\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"operator_type\",\n    hdrs = [\n        \"src/xnnpack/operator-type.h\",\n        \"src/xnnpack/operator-type-defs.h\",\n    ],\n    deps = [\n        \":common\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"microkernel_type\",\n    hdrs = [\n        \"src/xnnpack/microkernel-type.h\",\n        \"src/xnnpack/microkernel-type-defs.h\",\n    ],\n    deps = [\n        \":common\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"internal\",\n    hdrs = [\"src/xnnpack/internal.h\"],\n    deps = [\n        \":xnnpack_h\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"allocator\",\n    srcs = [\n        \"src/allocator.c\",\n    ],\n    hdrs = [\"src/xnnpack/allocator.h\"],\n    deps = [\n        \":common\",\n        \":logging\",\n        \":math\",\n        \":params\",\n        \":xnnpack_h\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"aligned_allocator\",\n    hdrs = [\n        \"src/xnnpack/aligned-allocator.h\",\n    ],\n)\n\nxnnpack_cxx_library(\n    name = \"buffer\",\n    hdrs = [\"src/xnnpack/buffer.h\"],\n    deps = [\":datatype\"],\n)\n\nxnnpack_cc_library(\n    name = \"isa_checks\",\n    hdrs = [\n        \"src/xnnpack/isa-checks.h\",\n    ],\n    deps = [\n        \":common\",\n        \":hardware_config\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"memory\",\n    srcs = [\n        \"src/memory.c\",\n    ],\n    hdrs = [\"src/xnnpack/memory.h\"],\n    # Override using xnnpack_gcc_std_copts, as it defines -std=c99, which then makes MAP_ANONYMOUS\n    # undefined\n    gcc_copts = [],\n    deps = [\n        \":common\",\n        \":logging\",\n        \":math\",\n        \":xnnpack_h\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"quantization\",\n    hdrs = [\"src/xnnpack/quantization.h\"],\n    deps = [\n        \":common\",\n        \":math\",\n        \":microparams\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"requantization\",\n    hdrs = [\"src/xnnpack/requantization.h\"],\n    deps = [\n        \":common\",\n        \":math\",\n        \":microparams\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"requantization_stubs\",\n    hdrs = [\"src/xnnpack/requantization-stubs.h\"],\n)\n\nxnnpack_cc_library(\n    name = \"tables\",\n    srcs = TABLE_SRCS,\n    deps = [\n        \":common\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"assembly\",\n    hdrs = [\"src/xnnpack/assembly.h\"],\n    compatible_with = [],\n)\n\ngenrule(\n    name = \"generated_microkernel_lists\",\n    srcs = glob([\n        \"**/*.c\",\n        \"**/*.cc\",\n        \"**/*.S\",\n    ]),\n    outs = ([\n                \"testdata/gen/microkernels.bzl\",\n                \"testdata/cmake/gen/microkernels.cmake\",\n            ] + [\"testdata/gen/\" + arch + \"_microkernels.bzl\" for arch in xnnpack_archs()] +\n            [\"testdata/cmake/gen/\" + arch + \"_microkernels.cmake\" for arch in xnnpack_archs()]),\n    cmd = (\"$(location //tools:update_microkernels) \" +\n           \"--output $(RULEDIR)/testdata \" +\n           \"--root_dir %s\" % (package_name() if package_name() else \".\")),\n    compatible_with = [],\n    tools = [\"//tools:update_microkernels\"],\n    visibility = [\"//:__subpackages__\"],\n)\n\nfilegroup(\n    name = \"cmake_microkernel_lists\",\n    srcs = glob([\n        \"cmake/gen/*.cmake\",\n    ]),\n    visibility = [\"//:__subpackages__\"],\n)\n\n# Generate the prod/all microkernel libraries for each architecture.\n[\n    [\n        xnnpack_cc_library_for_arch(\n            name = arch + \"_prod_microkernels\",\n            srcs = prod_asm_srcs_for_arch(arch) + prod_c_srcs_for_arch(arch),\n            arch = arch,\n            compatible_with = [],\n            defines = xnnpack_configurable_defines(),\n            # Internal build flag.\n            tags = [\"nobuilder\"],\n            deps = MICROKERNEL_DEPS,\n        ),\n        xnnpack_cc_library_for_arch(\n            name = arch + \"_all_microkernels\",\n            srcs = non_prod_asm_srcs_for_arch(arch) + non_prod_c_srcs_for_arch(arch),\n            arch = arch,\n            compatible_with = [],\n            defines = xnnpack_configurable_defines(),\n            tags = [\"nobuilder\"],\n            deps = MICROKERNEL_DEPS + [\":\" + arch + \"_prod_microkernels\"],\n        ),\n    ]\n    for arch in xnnpack_archs()\n]\n\nxnnpack_cc_library(\n    name = \"log_level_default\",\n    defines = select({\n        # No logging in optimized mode\n        \":optimized_build\": [\"XNN_LOG_LEVEL=0\"],\n        # Info logging in debug mode.  Use `--define=xnn_log_level=debug` for full logging.\n        \":debug_build\": [\"XNN_LOG_LEVEL=4\"],\n        # Error-only logging in default (fastbuild) mode\n        \"//conditions:default\": [\"XNN_LOG_LEVEL=2\"],\n    }),\n)\n\nxnnpack_cc_library(\n    name = \"logging\",\n    srcs = LOGGING_SRCS,\n    hdrs = [\"src/xnnpack/log.h\"],\n    copts = select({\n        \":debug_build\": [],\n        \"//conditions:default\": xnnpack_min_size_copts(),\n    }) + select({\n        \":xnn_log_to_stdio_explicit_true\": [\"-DXNN_LOG_TO_STDIO=1\"],\n        \"//conditions:default\": [],\n    }),\n    defines = select({\n        \":xnn_log_level_explicit_none\": [\"XNN_LOG_LEVEL=0\"],\n        \":xnn_log_level_explicit_fatal\": [\"XNN_LOG_LEVEL=1\"],\n        \":xnn_log_level_explicit_error\": [\"XNN_LOG_LEVEL=2\"],\n        \":xnn_log_level_explicit_warning\": [\"XNN_LOG_LEVEL=3\"],\n        \":xnn_log_level_explicit_info\": [\"XNN_LOG_LEVEL=4\"],\n        \":xnn_log_level_explicit_debug\": [\"XNN_LOG_LEVEL=5\"],\n        \"//conditions:default\": [],\n    }),\n    visibility = xnnpack_visibility(),\n    deps = select({\n        \":xnn_log_level_explicit_none\": [],\n        \":xnn_log_level_explicit_fatal\": [],\n        \":xnn_log_level_explicit_error\": [],\n        \":xnn_log_level_explicit_warning\": [],\n        \":xnn_log_level_explicit_info\": [],\n        \":xnn_log_level_explicit_debug\": [],\n        \"//conditions:default\": [\":log_level_default\"],\n    }) + [\n        \":allocation_type\",\n        \":common\",\n        \":microkernel_type\",\n        \":node_type\",\n        \":operator_type\",\n        \":xnnpack_h\",\n    ],\n)\n\n[\n    cc_library(\n        name = lib + \"_microkernels\",\n        compatible_with = [],\n        defines = xnnpack_configurable_defines(),\n        hdrs_check = \"strict\",\n        linkstatic = True,\n        visibility = [\"//:__subpackages__\"],\n        deps = xnnpack_list_sum(\n            [\n                xnnpack_select_if(\n                    xnnpack_cond_for_arch(arch),\n                    [\":\" + arch + \"_\" + lib + \"_microkernels\"],\n                )\n                for arch in xnnpack_archs()\n            ],\n            [],\n        ),\n    )\n    for lib in (\"prod\", \"all\")\n]\n\nxnnpack_cc_library(\n    name = \"im2col\",\n    srcs = [\"src/im2col.c\"],\n    hdrs = [\n        \"src/xnnpack/im2col.h\",\n    ],\n    deps = [\":common\"],\n)\n\nxnnpack_cc_library(\n    name = \"indirection\",\n    srcs = [\"src/indirection.c\"],\n    hdrs = [\"src/xnnpack/indirection.h\"],\n    deps = [\n        \":common\",\n        \":math\",\n        \":microparams\",\n        \":operator_h\",\n        \":xnnpack_h\",\n        \"@FXdiv\",\n    ],\n)\n\nxnnpack_cxx_library(\n    name = \"packing\",\n    srcs = [\"src/reference/packing.cc\"],\n    hdrs = [\"src/xnnpack/pack.h\"],\n    defines = xnnpack_configurable_defines(),\n    deps = [\n        \":common\",\n        \":config_hdrs\",\n        \":logging\",\n        \":math\",\n        \":microparams\",\n        \":params\",\n        \":unaligned\",\n        \":xnnpack_h\",\n    ] + xnnpack_if_kleidiai_enabled([\n        \"@KleidiAI//kai/ukernels/matmul\",\n    ]),\n)\n\npy_binary(\n    name = \"generate_build_identifier_py\",\n    srcs = [\"scripts/generate-build-identifier.py\"],\n    main = \"scripts/generate-build-identifier.py\",\n    tags = [\"notap\"],  # This should only be built as part of the related genrule.\n    target_compatible_with = select({\n        \"//build_config:emscripten\": [\"@platforms//:incompatible\"],\n        \"//conditions:default\": [],\n    }),\n)\n\n# This target gathers the transitive sources from its deps and adds them to the\n# srcs attribute.\nxnnpack_transitive_source_list(\n    name = \"build_identifier_ukernel_srcs\",\n    srcs = [\"src/reference/packing.cc\"],\n    deps = [\":prod_microkernels\"],\n)\n\n# Windows builds fail on the generate_build_identifier genrule because the\n# command line is too long when expanding the source file paths to feed to the\n# Python generation script. To work around this, we write those files to a\n# single file that we.\n#\n# This is what the below command does. It ONLY exposes the list file as an output.\n#\n# See the next genrule comment for the rest of the explanation.\nxnnpack_source_list_file(\n    name = \"build_identifier_ukernel_srcs_list\",\n    srcs = [\":build_identifier_ukernel_srcs\"],\n    compatible_with = [],\n)\n\n# When the python script gets executed, the files it has access to are limited\n# to what is explicitely requested in the `srcs` attribute. We add the \"list\"\n# and the source paths to the sources to make them available to the Python\n# script and only expand the list file path to keep the command line short\n# enough to avoid having Windows break down.\n#\n# I have not found a way to transitively pull the source files from the \"list\"\n# target and make them available from the Python script without adding them to\n# the `srcs` attribute (making them expanded in the \"$(SRCS)\" variable), thus\n# the repetition.\ngenrule(\n    name = \"generate_build_identifier\",\n    srcs = [\n        \":build_identifier_ukernel_srcs_list\",\n        \":build_identifier_ukernel_srcs\",\n    ],\n    outs = [\"src/build_identifier.c\"],\n    cmd = \"$(location generate_build_identifier_py) --output $@ --input_file_list $(location :build_identifier_ukernel_srcs_list)\",\n    tools = [\":generate_build_identifier_py\"],\n)\n\nxnnpack_cc_library(\n    name = \"build_identifier\",\n    srcs = [\"src/build_identifier.c\"],\n)\n\nxnnpack_cc_library(\n    name = \"cache\",\n    srcs = [\"src/cache.c\"],\n    hdrs = [\"src/xnnpack/cache.h\"],\n    deps = [\n        \":allocator\",\n        \":common\",\n        \":logging\",\n        \":math\",\n        \":memory\",\n        \":mutex\",\n        \":xnnpack_h\",\n    ],\n)\n\n# Define a library with just the header to remove circular dependencies:\n# operator-run (compute) <-> operators.\nxnnpack_cc_library(\n    name = \"compute_h\",\n    hdrs = [\n        \"src/xnnpack/compute.h\",\n    ],\n    deps = [\n        \":common\",\n        \":math\",\n        \":params\",\n        \":xnnpack_h\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"microkernel_utils\",\n    srcs = [\"src/microkernel-utils.c\"],\n    hdrs = [\"src/xnnpack/microkernel-utils.h\"],\n    deps = [\n        \":common\",\n        \":math\",\n    ],\n)\n\n# Define a library with just the header to remove circular dependencies:\n# indirection <-> operators.\nxnnpack_cc_library(\n    name = \"operator_h\",\n    hdrs = [\n        \"src/xnnpack/operator.h\",\n    ],\n    deps = [\n        \":allocator\",\n        \":cache\",\n        \":compute_h\",\n        \":microkernel_type\",\n        \":operator_type\",\n        \":params\",\n        \"@pthreadpool\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"operator_utils\",\n    srcs = [\"src/operator-utils.c\"],\n    hdrs = [\"src/xnnpack/operator-utils.h\"],\n    deps = [\n        \":allocator\",\n        \":common\",\n        \":logging\",\n        \":math\",\n        \":operator_h\",\n        \":operator_type\",\n        \":params\",\n        \":xnnpack_h\",\n    ],\n)\n\nxnnpack_cxx_library(\n    name = \"reference_ukernels\",\n    srcs = [\n        \"src/reference/binary-elementwise.cc\",\n        \"src/reference/unary-elementwise.cc\",\n    ],\n    hdrs = [\n        \"src/xnnpack/reference-config.h\",\n        \"src/xnnpack/reference-utils.h\",\n    ],\n    compatible_with = [],\n    defines = xnnpack_configurable_defines(),\n    deps = [\n        \":common\",\n        \":config_hdrs\",\n        \":datatype\",\n        \":hardware_config\",\n        \":math\",\n        \":xnnpack_h\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"datatype\",\n    srcs = [\"src/datatype.c\"],\n    hdrs = [\"src/xnnpack/datatype.h\"],\n    compatible_with = [],\n    deps = [\n        \":common\",\n        \":math\",\n        \":xnnpack_h\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"operators\",\n    srcs = OPERATOR_SRCS,\n    hdrs = [\n        \"src/xnnpack/compute.h\",\n        \"src/xnnpack/operator.h\",\n    ],\n    copts = select({\n        \":debug_build\": [],\n        \"//conditions:default\": xnnpack_min_size_copts(),\n    }) + select({\n        \":xnn_enable_hmp_explicit_false\": [\"-DXNN_MAX_UARCH_TYPES=1\"],\n        \"//conditions:default\": [],\n    }),\n    defines = xnnpack_configurable_defines(),\n    deps = [\n        \":allocator\",\n        \":cache\",\n        \":common\",\n        \":datatype\",\n        \":fp16\",\n        \":indirection\",\n        \":internal\",\n        \":logging\",\n        \":math\",\n        \":microkernel_configs\",\n        \":microkernel_type\",\n        \":microkernel_utils\",\n        \":microkernels_h\",\n        \":microparams_init\",\n        \":node_type\",\n        \":normalization\",\n        \":operator_type\",\n        \":operator_utils\",\n        \":packing\",\n        \":params\",\n        \":quantization\",\n        \":reference_ukernels\",\n        \":xnnpack_h\",\n        \"@pthreadpool\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"subgraph_h\",\n    hdrs = [\n        \"src/xnnpack/subgraph.h\",\n    ],\n    compatible_with = [],\n)\n\nxnnpack_cc_library(\n    name = \"subgraph\",\n    srcs = SUBGRAPH_SRCS,\n    hdrs = [\n        \"src/xnnpack/memory-planner.h\",\n        \"src/xnnpack/reshape-helpers.h\",\n        \"src/xnnpack/subgraph.h\",\n        \"src/xnnpack/subgraph-validation.h\",\n    ],\n    defines = xnnpack_configurable_defines(),\n    deps = [\n        \":allocation_type\",\n        \":allocator\",\n        \":cache\",\n        \":common\",\n        \":config_hdrs\",\n        \":datatype\",\n        \":fp16\",\n        \":hardware_config\",\n        \":internal\",\n        \":logging\",\n        \":math\",\n        \":memory\",\n        \":microkernel_type\",\n        \":microkernels_h\",\n        \":node_type\",\n        \":operator_type\",\n        \":operator_utils\",\n        \":operators\",\n        \":params\",\n        \":requantization\",\n        \":subgraph_h\",\n        \":xnnpack_h\",\n        \"@pthreadpool\",\n    ] + xnnpack_slinky_deps(),\n)\n\nxnnpack_cc_library(\n    name = \"mutex\",\n    srcs = [\n        \"src/mutex.c\",\n    ],\n    hdrs = [\n        \"src/xnnpack/mutex.h\",\n    ],\n    deps = [\n        \":common\",\n        \":logging\",\n        \":xnnpack_h\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"normalization\",\n    srcs = [\"src/normalization.c\"],\n    hdrs = [\n        \"src/xnnpack/normalization.h\",\n    ],\n    deps = [\n        \":common\",\n        \":math\",\n        \":xnnpack_h\",\n    ],\n)\n\nxnnpack_cc_library(\n    name = \"XNNPACK\",\n    srcs = [\n        \"src/init.c\",\n    ],\n    hdrs = [\n        \"include/xnnpack.h\",\n    ],\n    copts = select({\n        \":debug_build\": [],\n        \"//conditions:default\": xnnpack_min_size_copts(),\n    }) + select({\n        \":xnn_enable_hmp_explicit_false\": [\"-DXNN_MAX_UARCH_TYPES=1\"],\n        \"//conditions:default\": [],\n    }),\n    visibility = xnnpack_visibility(),\n    deps = [\n        \":allocator\",\n        \":build_identifier\",\n        \":common\",\n        \":config_hdrs\",\n        \":hardware_config\",\n        \":init_once\",\n        \":logging\",\n        \":math\",\n        \":microkernels_h\",\n        \":microparams\",\n        \":microparams_init\",\n        \":operators\",\n        \":params\",\n        \":subgraph\",\n        \"@pthreadpool\",\n    ],\n)\n\n# Specialized XNNPACK version for TensorFlow Lite. Excludes operators currently\n# not used by the TensorFlow Lite XNNPACK delegate to minimize code size.\nxnnpack_cc_library(\n    name = \"xnnpack_for_tflite\",\n    srcs = [\n        \"src/init.c\",\n    ],\n    hdrs = [\"include/xnnpack.h\"],\n    copts = select({\n        \":debug_build\": [],\n        \"//conditions:default\": xnnpack_min_size_copts(),\n    }) + select({\n        \":xnn_enable_hmp_explicit_false\": [\"-DXNN_MAX_UARCH_TYPES=1\"],\n        \"//conditions:default\": [],\n    }),\n    visibility = xnnpack_visibility(),\n    deps = [\n        \":allocator\",\n        \":hardware_config\",\n        \":init_once\",\n        \":logging\",\n        \":params\",\n        \"@pthreadpool\",\n    ],\n)\n\n# Specialized XNNPACK version for TensorFlow.js. Excludes operators currently\n# not used by the TensorFlow.js WebAssembly backend to minimize code size.\nxnnpack_cc_library(\n    name = \"xnnpack_for_tfjs\",\n    srcs = [\n        \"src/init.c\",\n    ],\n    hdrs = [\"include/xnnpack.h\"],\n    copts = select({\n        \":debug_build\": [],\n        \"//conditions:default\": xnnpack_min_size_copts(),\n    }) + select({\n        \":xnn_enable_hmp_explicit_false\": [\"-DXNN_MAX_UARCH_TYPES=1\"],\n        \"//conditions:default\": [],\n    }),\n    visibility = xnnpack_visibility(),\n    deps = [\n        \":allocator\",\n        \":hardware_config\",\n        \":init_once\",\n        \":logging\",\n        \":params\",\n        \"@pthreadpool\",\n    ],\n)\n\n############################# Build configurations #############################\n\n# Enables usage of ARM FP16 (FP16 arithmetics) scalar kernels.\nconfig_setting(\n    name = \"xnn_enable_arm_fp16_scalar_explicit_true\",\n    define_values = {\"xnn_enable_arm_fp16_scalar\": \"true\"},\n)\n\n# Disables usage of ARM FP16 (FP16 arithmetics) scalar kernels.\nconfig_setting(\n    name = \"xnn_enable_arm_fp16_scalar_explicit_false\",\n    define_values = {\"xnn_enable_arm_fp16_scalar\": \"false\"},\n)\n\n# Enables usage of ARM FP16 (FP16 arithmetics) vector kernels.\nconfig_setting(\n    name = \"xnn_enable_arm_fp16_vector_explicit_true\",\n    define_values = {\"xnn_enable_arm_fp16_vector\": \"true\"},\n)\n\n# Disables usage of ARM FP16 (FP16 arithmetics) vector kernels.\nconfig_setting(\n    name = \"xnn_enable_arm_fp16_vector_explicit_false\",\n    define_values = {\"xnn_enable_arm_fp16_vector\": \"false\"},\n)\n\n# Enables usage of ARM BF16 (BF16 arithmetics) kernels.\nconfig_setting(\n    name = \"xnn_enable_arm_bf16_explicit_true\",\n    define_values = {\"xnn_enable_arm_bf16\": \"true\"},\n)\n\n# Disables usage of ARM BF16 (BF16 arithmetics) kernels.\nconfig_setting(\n    name = \"xnn_enable_arm_bf16_explicit_false\",\n    define_values = {\"xnn_enable_arm_bf16\": \"false\"},\n)\n\n# Enables usage of ARM DotProd (integer dot product) kernels.\nconfig_setting(\n    name = \"xnn_enable_arm_dotprod_explicit_true\",\n    define_values = {\"xnn_enable_arm_dotprod\": \"true\"},\n)\n\n# Disables usage of ARM DotProd (integer dot product) kernels.\nconfig_setting(\n    name = \"xnn_enable_arm_dotprod_explicit_false\",\n    define_values = {\"xnn_enable_arm_dotprod\": \"false\"},\n)\n\n# Enables usage of ARM I8MM (8-bit integer matrix multiply accumulate) kernels.\nconfig_setting(\n    name = \"xnn_enable_arm_i8mm_explicit_true\",\n    define_values = {\"xnn_enable_arm_i8mm\": \"true\"},\n)\n\n# Disables usage of ARM I8MM (8-bit integer matrix multiply accumulate) kernels.\nconfig_setting(\n    name = \"xnn_enable_arm_i8mm_explicit_false\",\n    define_values = {\"xnn_enable_arm_i8mm\": \"false\"},\n)\n\n# Enables usage of ARM SME kernels.\nconfig_setting(\n    name = \"xnn_enable_arm_sme_explicit_true\",\n    define_values = {\"xnn_enable_arm_sme\": \"true\"},\n)\n\n# Disables usage of ARM SME kernels.\nconfig_setting(\n    name = \"xnn_enable_arm_sme_explicit_false\",\n    define_values = {\"xnn_enable_arm_sme\": \"false\"},\n)\n\n# Enables usage of ARM SME2 kernels.\nconfig_setting(\n    name = \"xnn_enable_arm_sme2_explicit_true\",\n    define_values = {\"xnn_enable_arm_sme2\": \"true\"},\n)\n\n# Disables usage of ARM SME2 kernels.\nconfig_setting(\n    name = \"xnn_enable_arm_sme2_explicit_false\",\n    define_values = {\"xnn_enable_arm_sme2\": \"false\"},\n)\n\n# Enables usage of Intel AVX512F (evex512) kernels.\nconfig_setting(\n    name = \"xnn_enable_avx512f_explicit_true\",\n    define_values = {\"xnn_enable_avx512f\": \"true\"},\n)\n\n# Disables usage of Intel AVX512F (evex512) kernels.\nconfig_setting(\n    name = \"xnn_enable_avx512f_explicit_false\",\n    define_values = {\"xnn_enable_avx512f\": \"false\"},\n)\n\n# Enables usage of Intel AVX512SKX (evex512) kernels.\nconfig_setting(\n    name = \"xnn_enable_avx512skx_explicit_true\",\n    define_values = {\"xnn_enable_avx512skx\": \"true\"},\n)\n\n# Disables usage of Intel AVX512SKX (evex512) kernels.\nconfig_setting(\n    name = \"xnn_enable_avx512skx_explicit_false\",\n    define_values = {\"xnn_enable_avx512skx\": \"false\"},\n)\n\n# Enables usage of Intel AVX512VBMI (evex512) kernels.\nconfig_setting(\n    name = \"xnn_enable_avx512vbmi_explicit_true\",\n    define_values = {\"xnn_enable_avx512vbmi\": \"true\"},\n)\n\n# Disables usage of Intel AVX512VBMI (evex512) kernels.\nconfig_setting(\n    name = \"xnn_enable_avx512vbmi_explicit_false\",\n    define_values = {\"xnn_enable_avx512vbmi\": \"false\"},\n)\n\n# Enables usage of Intel AVX512VNNI (evex512) kernels.\nconfig_setting(\n    name = \"xnn_enable_avx512vnni_explicit_true\",\n    define_values = {\"xnn_enable_avx512vnni\": \"true\"},\n)\n\n# Disables usage of Intel AVX512VNNI (evex512) kernels.\nconfig_setting(\n    name = \"xnn_enable_avx512vnni_explicit_false\",\n    define_values = {\"xnn_enable_avx512vnni\": \"false\"},\n)\n\n# Enables usage of Intel AVX512VNNIGFNI (evex512) kernels.\nconfig_setting(\n    name = \"xnn_enable_avx512vnnigfni_explicit_true\",\n    define_values = {\"xnn_enable_avx512vnnigfni\": \"true\"},\n)\n\n# Disables usage of Intel AVX512VNNIGFNI (evex512) kernels.\nconfig_setting(\n    name = \"xnn_enable_avx512vnnigfni_explicit_false\",\n    define_values = {\"xnn_enable_avx512vnnigfni\": \"false\"},\n)\n\n# Enables usage of Intel AVX512-AMX (integer matrix multiply) kernels.\nconfig_setting(\n    name = \"xnn_enable_avx512amx_explicit_true\",\n    define_values = {\"xnn_enable_avx512amx\": \"true\"},\n)\n\n# Disables usage of Intel AVX512-AMX (integer matrix multiply) kernels.\nconfig_setting(\n    name = \"xnn_enable_avx512amx_explicit_false\",\n    define_values = {\"xnn_enable_avx512amx\": \"false\"},\n)\n\n# Enables usage of Intel AVX512-FP16 (fp16 arithmetic) kernels.\nconfig_setting(\n    name = \"xnn_enable_avx512fp16_explicit_true\",\n    define_values = {\"xnn_enable_avx512fp16\": \"true\"},\n)\n\n# Disables usage of Intel AVX512-FP16 (fp16 arithmetic) kernels.\nconfig_setting(\n    name = \"xnn_enable_avx512fp16_explicit_false\",\n    define_values = {\"xnn_enable_avx512fp16\": \"false\"},\n)\n\n# Enables usage of Intel AVX-VNNI (integer dot product) kernels.\nconfig_setting(\n    name = \"xnn_enable_avxvnni_explicit_true\",\n    define_values = {\"xnn_enable_avxvnni\": \"true\"},\n)\n\n# Disables usage of Intel AVX-VNNI (integer dot product) kernels.\nconfig_setting(\n    name = \"xnn_enable_avxvnni_explicit_false\",\n    define_values = {\"xnn_enable_avxvnni\": \"false\"},\n)\n\n# Enables usage of Intel AVX-VNNI-INT8 (integer dot product) kernels.\nconfig_setting(\n    name = \"xnn_enable_avxvnniint8_explicit_true\",\n    define_values = {\"xnn_enable_avxvnniint8\": \"true\"},\n)\n\n# Disables usage of Intel AVX-VNNI-INT8 (integer dot product) kernels.\nconfig_setting(\n    name = \"xnn_enable_avxvnniint8_explicit_false\",\n    define_values = {\"xnn_enable_avxvnniint8\": \"false\"},\n)\n\n# Enables usage of Intel AVX256SKX (evex256) kernels.\nconfig_setting(\n    name = \"xnn_enable_avx256skx_explicit_true\",\n    define_values = {\"xnn_enable_avx256skx\": \"true\"},\n)\n\n# Disables usage of Intel AVX256SKX (evex256) kernels.\nconfig_setting(\n    name = \"xnn_enable_avx256skx_explicit_false\",\n    define_values = {\"xnn_enable_avx256skx\": \"false\"},\n)\n\n# Enables usage of Intel AVX256VNNI (evex256) kernels.\nconfig_setting(\n    name = \"xnn_enable_avx256vnni_explicit_true\",\n    define_values = {\"xnn_enable_avx256vnni\": \"true\"},\n)\n\n# Disables usage of Intel AVX256VNNI (evex256) kernels.\nconfig_setting(\n    name = \"xnn_enable_avx256vnni_explicit_false\",\n    define_values = {\"xnn_enable_avx256vnni\": \"false\"},\n)\n\n# Enables usage of Intel AVX256VNNIGFNI (evex256) kernels.\nconfig_setting(\n    name = \"xnn_enable_avx256vnnigfni_explicit_true\",\n    define_values = {\"xnn_enable_avx256vnnigfni\": \"true\"},\n)\n\n# Disables usage of Intel AVX256VNNIGFNI (evex256) kernels.\nconfig_setting(\n    name = \"xnn_enable_avx256vnnigfni_explicit_false\",\n    define_values = {\"xnn_enable_avx256vnnigfni\": \"false\"},\n)\n\n# Enables usage of Hexagon HVX kernels.\nconfig_setting(\n    name = \"xnn_enable_hvx_explicit_true\",\n    define_values = {\"xnn_enable_hvx\": \"true\"},\n)\n\n# Disables usage of Hexagon HVX kernels.\nconfig_setting(\n    name = \"xnn_enable_hvx_explicit_false\",\n    define_values = {\"xnn_enable_hvx\": \"false\"},\n)\n\n# Enables usage of RISC-V Vector kernels.\nconfig_setting(\n    name = \"xnn_enable_riscv_vector_explicit_true\",\n    define_values = {\"xnn_enable_riscv_vector\": \"true\"},\n)\n\n# Disables usage of RISC-V Vector kernels.\nconfig_setting(\n    name = \"xnn_enable_riscv_vector_explicit_false\",\n    define_values = {\"xnn_enable_riscv_vector\": \"false\"},\n)\n\n# Enables usage of RISC-V FP16 (FP16 arithmetics) vector kernels.\nconfig_setting(\n    name = \"xnn_enable_riscv_fp16_vector_explicit_true\",\n    define_values = {\"xnn_enable_riscv_fp16_vector\": \"true\"},\n)\n\n# Disables usage of RISC-V FP16 (FP16 arithmetics) vector kernels.\nconfig_setting(\n    name = \"xnn_enable_riscv_fp16_vector_explicit_false\",\n    define_values = {\"xnn_enable_riscv_fp16_vector\": \"false\"},\n)\n\n# Enables usage of cpuinfo library.\nconfig_setting(\n    name = \"xnn_enable_cpuinfo_explicit_true\",\n    define_values = {\"xnn_enable_cpuinfo\": \"true\"},\n)\n\n# Disables usage of cpuinfo library.\nconfig_setting(\n    name = \"xnn_enable_cpuinfo_explicit_false\",\n    define_values = {\"xnn_enable_cpuinfo\": \"false\"},\n)\n\n# Enables usage of the KleidiAI library.\nconfig_setting(\n    name = \"xnn_enable_kleidiai_explicit_true\",\n    define_values = {\"xnn_enable_kleidiai\": \"true\"},\n)\n\n# Disables usage of the KleidiAI library.\nconfig_setting(\n    name = \"xnn_enable_kleidiai_explicit_false\",\n    define_values = {\"xnn_enable_kleidiai\": \"false\"},\n)\n\n# Enables usage of assembly kernels.\nconfig_setting(\n    name = \"xnn_enable_assembly_explicit_true\",\n    define_values = {\"xnn_enable_assembly\": \"true\"},\n)\n\n# Disables usage of assembly kernels.\nconfig_setting(\n    name = \"xnn_enable_assembly_explicit_false\",\n    define_values = {\"xnn_enable_assembly\": \"false\"},\n)\n\n# Enables usage of sparse inference.\nconfig_setting(\n    name = \"xnn_enable_sparse_explicit_true\",\n    define_values = {\"xnn_enable_sparse\": \"true\"},\n)\n\n# Disables usage of sparse inference.\nconfig_setting(\n    name = \"xnn_enable_sparse_explicit_false\",\n    define_values = {\"xnn_enable_sparse\": \"false\"},\n)\n\n# Disables usage of HMP-aware optimizations.\nconfig_setting(\n    name = \"xnn_enable_hmp_explicit_false\",\n    define_values = {\"xnn_enable_hmp\": \"false\"},\n)\n\n# Enable usage of optimized memory allocation\nconfig_setting(\n    name = \"xnn_enable_memopt_explicit_true\",\n    define_values = {\"xnn_enable_memopt\": \"true\"},\n)\n\n# Disable usage of optimized memory allocation\nconfig_setting(\n    name = \"xnn_enable_memopt_explicit_false\",\n    define_values = {\"xnn_enable_memopt\": \"false\"},\n)\n\n# Enables usage of slinky locality optimizations\nconfig_setting(\n    name = \"slinky_enabled\",\n    define_values = {\"xnn_use_slinky\": \"true\"},\n)\n\n# Enables usage of mr heuristic to select microkernels.\nconfig_setting(\n    name = \"xnn_enable_gemm_m_specialization_explicit_true\",\n    define_values = {\"xnn_enable_gemm_m_specialization\": \"true\"},\n)\n\n# Disables usage of mr heuristic to select microkernels.\nconfig_setting(\n    name = \"xnn_enable_gemm_m_specialization_explicit_false\",\n    define_values = {\"xnn_enable_gemm_m_specialization\": \"false\"},\n)\n\n# Enables usage of DWCONV multipass kernels.\nconfig_setting(\n    name = \"xnn_enable_dwconv_multipass_explicit_true\",\n    define_values = {\"xnn_enable_dwconv_multipass\": \"true\"},\n)\n\n# Disables usage of DWCONV multipass kernels.\nconfig_setting(\n    name = \"xnn_enable_dwconv_multipass_explicit_false\",\n    define_values = {\"xnn_enable_dwconv_multipass\": \"false\"},\n)\n\n# Enables usage of WASM SIMD AVX-256 revectorization kernels.\nconfig_setting(\n    name = \"xnn_enable_wasm_revectorize_explicit_true\",\n    define_values = {\"xnn_enable_wasm_revectorize\": \"true\"},\n)\n\n# Disables usage of WASM SIMD AVX-256 revectorization kernels.\nconfig_setting(\n    name = \"xnn_enable_wasm_revectorize_explicit_false\",\n    define_values = {\"xnn_enable_wasm_revectorize\": \"false\"},\n)\n\n# Force logging to stderr/stdout\nconfig_setting(\n    name = \"xnn_log_to_stdio_explicit_true\",\n    define_values = {\"xnn_log_to_stdio\": \"true\"},\n)\n\n# Fully disable logging\nconfig_setting(\n    name = \"xnn_log_level_explicit_none\",\n    define_values = {\"xnn_log_level\": \"none\"},\n)\n\n# Log fatal errors only\nconfig_setting(\n    name = \"xnn_log_level_explicit_fatal\",\n    define_values = {\"xnn_log_level\": \"fatal\"},\n)\n\n# Log fatal and non-fatal errors\nconfig_setting(\n    name = \"xnn_log_level_explicit_error\",\n    define_values = {\"xnn_log_level\": \"error\"},\n)\n\n# Log warnings and errors\nconfig_setting(\n    name = \"xnn_log_level_explicit_warning\",\n    define_values = {\"xnn_log_level\": \"warning\"},\n)\n\n# Log information messages, warnings and errors\nconfig_setting(\n    name = \"xnn_log_level_explicit_info\",\n    define_values = {\"xnn_log_level\": \"info\"},\n)\n\n# Log all messages, including debug messages\nconfig_setting(\n    name = \"xnn_log_level_explicit_debug\",\n    define_values = {\"xnn_log_level\": \"debug\"},\n)\n\n# Builds with -c dbg\nconfig_setting(\n    name = \"debug_build\",\n    values = {\n        \"compilation_mode\": \"dbg\",\n    },\n)\n\n# Builds with -c opt\nconfig_setting(\n    name = \"optimized_build\",\n    values = {\n        \"compilation_mode\": \"opt\",\n    },\n)\n\n######################## Composite build configurations #######################\n\nselects.config_setting_group(\n    name = \"arm_fp16_scalar_enabled_by_default\",\n    match_any = [\n        \"//build_config:aarch32\",\n        \"//build_config:aarch64\",\n    ],\n)\n\nalias(\n    name = \"arm_fp16_scalar_enabled\",\n    actual = select({\n        \":xnn_enable_arm_fp16_scalar_explicit_true\": \":xnn_enable_arm_fp16_scalar_explicit_true\",\n        \":xnn_enable_arm_fp16_scalar_explicit_false\": \":xnn_enable_arm_fp16_scalar_explicit_true\",\n        \"//conditions:default\": \":arm_fp16_scalar_enabled_by_default\",\n    }),\n)\n\nselects.config_setting_group(\n    name = \"arm_fp16_vector_enabled_by_default\",\n    match_any = [\n        \"//build_config:aarch32\",\n        \"//build_config:aarch64\",\n    ],\n)\n\nselects.config_setting_group(\n    name = \"arm_neondotfp16_enabled\",\n    match_all = [\n        \":arm_fp16_vector_enabled\",\n        \":arm_dotprod_enabled\",\n    ],\n)\n\nalias(\n    name = \"arm_fp16_vector_enabled\",\n    actual = select({\n        \":xnn_enable_arm_fp16_vector_explicit_true\": \":xnn_enable_arm_fp16_vector_explicit_true\",\n        \":xnn_enable_arm_fp16_vector_explicit_false\": \":xnn_enable_arm_fp16_vector_explicit_true\",\n        \"//conditions:default\": \":arm_fp16_vector_enabled_by_default\",\n    }),\n)\n\nselects.config_setting_group(\n    name = \"arm_aarch64_fp16_vector_enabled\",\n    match_all = [\n        \":arm_fp16_vector_enabled\",\n        \"//build_config:aarch64\",\n    ],\n)\n\nselects.config_setting_group(\n    name = \"arm_bf16_enabled_by_default\",\n    match_any = [\n        \"//build_config:aarch64\",\n    ],\n)\n\nalias(\n    name = \"arm_bf16_enabled\",\n    actual = select({\n        \":xnn_enable_arm_bf16_explicit_true\": \":xnn_enable_arm_bf16_explicit_true\",\n        \":xnn_enable_arm_bf16_explicit_false\": \":xnn_enable_arm_bf16_explicit_true\",\n        \"//conditions:default\": \":arm_bf16_enabled_by_default\",\n    }),\n)\n\nselects.config_setting_group(\n    name = \"arm_dotprod_enabled_by_default\",\n    match_any = [\n        \"//build_config:aarch32\",\n        \"//build_config:aarch64\",\n    ],\n)\n\nalias(\n    name = \"arm_dotprod_enabled\",\n    actual = select({\n        \":xnn_enable_arm_dotprod_explicit_true\": \":xnn_enable_arm_dotprod_explicit_true\",\n        \":xnn_enable_arm_dotprod_explicit_false\": \":xnn_enable_arm_dotprod_explicit_true\",\n        \"//conditions:default\": \":arm_dotprod_enabled_by_default\",\n    }),\n)\n\nselects.config_setting_group(\n    name = \"arm_aarch64_dotprod_enabled\",\n    match_all = [\n        \":arm_dotprod_enabled\",\n        \"//build_config:aarch64\",\n    ],\n)\n\nselects.config_setting_group(\n    name = \"arm_i8mm_enabled_by_default\",\n    match_any = [\n        \"//build_config:aarch64\",\n    ],\n)\n\nalias(\n    name = \"arm_i8mm_enabled\",\n    actual = select({\n        \":xnn_enable_arm_i8mm_explicit_true\": \":xnn_enable_arm_i8mm_explicit_true\",\n        \":xnn_enable_arm_i8mm_explicit_false\": \":xnn_enable_arm_i8mm_explicit_true\",\n        \"//conditions:default\": \":arm_i8mm_enabled_by_default\",\n    }),\n)\n\nalias(\n    name = \"arm_sme_enabled\",\n    actual = select({\n        \":xnn_enable_arm_sme_explicit_true\": \":xnn_enable_arm_sme_explicit_true\",\n        \":xnn_enable_arm_sme_explicit_false\": \":xnn_enable_arm_sme_explicit_true\",\n        \"//conditions:default\": \":xnn_enable_arm_sme_explicit_true\",\n    }),\n)\n\nalias(\n    name = \"arm_sme2_enabled\",\n    actual = select({\n        \":xnn_enable_arm_sme2_explicit_true\": \":xnn_enable_arm_sme2_explicit_true\",\n        \":xnn_enable_arm_sme2_explicit_false\": \":xnn_enable_arm_sme2_explicit_true\",\n        \"//conditions:default\": \":xnn_enable_arm_sme2_explicit_true\",\n    }),\n)\n\nselects.config_setting_group(\n    name = \"avx512f_enabled_by_default\",\n    match_any = [\n        \"//build_config:x86\",\n    ],\n)\n\nalias(\n    name = \"avx512f_enabled\",\n    actual = select({\n        \":xnn_enable_avx512f_explicit_true\": \":xnn_enable_avx512f_explicit_true\",\n        \":xnn_enable_avx512f_explicit_false\": \":xnn_enable_avx512f_explicit_true\",\n        \"//conditions:default\": \":avx512f_enabled_by_default\",\n    }),\n)\n\nselects.config_setting_group(\n    name = \"avx512skx_enabled_by_default\",\n    match_any = [\n        \"//build_config:x86\",\n    ],\n)\n\nalias(\n    name = \"avx512skx_enabled\",\n    actual = select({\n        \":xnn_enable_avx512skx_explicit_true\": \":xnn_enable_avx512skx_explicit_true\",\n        \":xnn_enable_avx512skx_explicit_false\": \":xnn_enable_avx512skx_explicit_true\",\n        \"//conditions:default\": \":avx512skx_enabled_by_default\",\n    }),\n)\n\nselects.config_setting_group(\n    name = \"avx512vbmi_enabled_by_default\",\n    match_any = [\n        \"//build_config:x86\",\n    ],\n)\n\nalias(\n    name = \"avx512vbmi_enabled\",\n    actual = select({\n        \":xnn_enable_avx512vbmi_explicit_true\": \":xnn_enable_avx512vbmi_explicit_true\",\n        \":xnn_enable_avx512vbmi_explicit_false\": \":xnn_enable_avx512vbmi_explicit_true\",\n        \"//conditions:default\": \":avx512vbmi_enabled_by_default\",\n    }),\n)\n\nselects.config_setting_group(\n    name = \"avx512vnni_enabled_by_default\",\n    match_any = [\n        \"//build_config:x86\",\n    ],\n)\n\nalias(\n    name = \"avx512vnni_enabled\",\n    actual = select({\n        \":xnn_enable_avx512vnni_explicit_true\": \":xnn_enable_avx512vnni_explicit_true\",\n        \":xnn_enable_avx512vnni_explicit_false\": \":xnn_enable_avx512vnni_explicit_true\",\n        \"//conditions:default\": \":avx512vnni_enabled_by_default\",\n    }),\n)\n\nselects.config_setting_group(\n    name = \"avx512vnnigfni_enabled_by_default\",\n    match_any = [\n        \"//build_config:x86\",\n    ],\n)\n\nalias(\n    name = \"avx512vnnigfni_enabled\",\n    actual = select({\n        \":xnn_enable_avx512vnnigfni_explicit_true\": \":xnn_enable_avx512vnnigfni_explicit_true\",\n        \":xnn_enable_avx512vnnigfni_explicit_false\": \":xnn_enable_avx512vnnigfni_explicit_true\",\n        \"//conditions:default\": \":avx512vnnigfni_enabled_by_default\",\n    }),\n)\n\nselects.config_setting_group(\n    name = \"avx512amx_enabled_by_default\",\n    match_any = [\n        \"//build_config:x86\",\n    ],\n)\n\nalias(\n    name = \"avx512amx_enabled\",\n    actual = select({\n        \":xnn_enable_avx512amx_explicit_true\": \":xnn_enable_avx512amx_explicit_true\",\n        \":xnn_enable_avx512amx_explicit_false\": \":xnn_enable_avx512amx_explicit_true\",\n        \"//build_config:windows_lexan\": \":xnn_enable_avx512amx_explicit_true\",\n        \"//conditions:default\": \":avx512amx_enabled_by_default\",\n    }),\n)\n\nselects.config_setting_group(\n    name = \"avx512fp16_enabled_by_default\",\n    match_any = [\n        \"//build_config:x86\",\n    ],\n)\n\nalias(\n    name = \"avx512fp16_enabled\",\n    actual = select({\n        \":xnn_enable_avx512fp16_explicit_true\": \":xnn_enable_avx512fp16_explicit_true\",\n        \":xnn_enable_avx512fp16_explicit_false\": \":xnn_enable_avx512fp16_explicit_true\",\n        \"//build_config:windows_lexan\": \":xnn_enable_avx512fp16_explicit_true\",\n        \"//conditions:default\": \":avx512fp16_enabled_by_default\",\n    }),\n)\n\nselects.config_setting_group(\n    name = \"avxvnni_enabled_by_default\",\n    match_any = [\n        \"//build_config:x86\",\n    ],\n)\n\nalias(\n    name = \"avxvnni_enabled\",\n    actual = select({\n        \":xnn_enable_avxvnni_explicit_true\": \":xnn_enable_avxvnni_explicit_true\",\n        \":xnn_enable_avxvnni_explicit_false\": \":xnn_enable_avxvnni_explicit_true\",\n        \"//conditions:default\": \":avxvnni_enabled_by_default\",\n    }),\n)\n\nselects.config_setting_group(\n    name = \"avxvnniint8_enabled_by_default\",\n    match_any = [\n        \"//build_config:x86\",\n    ],\n)\n\nalias(\n    name = \"avxvnniint8_enabled\",\n    actual = select({\n        \":xnn_enable_avxvnniint8_explicit_true\": \":xnn_enable_avxvnniint8_explicit_true\",\n        \":xnn_enable_avxvnniint8_explicit_false\": \":xnn_enable_avxvnniint8_explicit_true\",\n        \"//build_config:ios_x86_64\": \":xnn_enable_avxvnniint8_explicit_true\",\n        \"//build_config:ios\": \":xnn_enable_avxvnniint8_explicit_true\",\n        \"//conditions:default\": \":avxvnniint8_enabled_by_default\",\n    }),\n)\n\nselects.config_setting_group(\n    name = \"avx256skx_enabled_by_default\",\n    match_any = [\n        \"//build_config:x86\",\n    ],\n)\n\nalias(\n    name = \"avx256skx_enabled\",\n    actual = select({\n        \":xnn_enable_avx256skx_explicit_true\": \":xnn_enable_avx256skx_explicit_true\",\n        \":xnn_enable_avx256skx_explicit_false\": \":xnn_enable_avx256skx_explicit_true\",\n        \"//conditions:default\": \":avx256skx_enabled_by_default\",\n    }),\n)\n\nselects.config_setting_group(\n    name = \"avx256vnni_enabled_by_default\",\n    match_any = [\n        \"//build_config:x86\",\n    ],\n)\n\nalias(\n    name = \"avx256vnni_enabled\",\n    actual = select({\n        \":xnn_enable_avx256vnni_explicit_true\": \":xnn_enable_avx256vnni_explicit_true\",\n        \":xnn_enable_avx256vnni_explicit_false\": \":xnn_enable_avx256vnni_explicit_true\",\n        \"//conditions:default\": \":avx256vnni_enabled_by_default\",\n    }),\n)\n\nselects.config_setting_group(\n    name = \"avx256vnnigfni_enabled_by_default\",\n    match_any = [\n        \"//build_config:x86\",\n    ],\n)\n\nalias(\n    name = \"avx256vnnigfni_enabled\",\n    actual = select({\n        \":xnn_enable_avx256vnnigfni_explicit_true\": \":xnn_enable_avx256vnnigfni_explicit_true\",\n        \":xnn_enable_avx256vnnigfni_explicit_false\": \":xnn_enable_avx256vnnigfni_explicit_true\",\n        \"//conditions:default\": \":avx256vnnigfni_enabled_by_default\",\n    }),\n)\n\nselects.config_setting_group(\n    name = \"hvx_enabled_by_default\",\n    match_any = [\n        \"//build_config:hexagon\",\n    ],\n)\n\nalias(\n    name = \"hvx_enabled\",\n    actual = select({\n        \":xnn_enable_hvx_explicit_true\": \":xnn_enable_hvx_explicit_true\",\n        \":xnn_enable_hvx_explicit_false\": \":xnn_enable_hvx_explicit_true\",\n        \"//conditions:default\": \":hvx_enabled_by_default\",\n    }),\n)\n\nselects.config_setting_group(\n    name = \"riscv_vector_enabled_by_default\",\n    match_any = [\n        \"//build_config:riscv\",\n    ],\n)\n\nalias(\n    name = \"riscv_vector_enabled\",\n    actual = select({\n        \":xnn_enable_riscv_vector_explicit_true\": \":xnn_enable_riscv_vector_explicit_true\",\n        \":xnn_enable_riscv_vector_explicit_false\": \":xnn_enable_riscv_vector_explicit_true\",\n        \"//conditions:default\": \":riscv_vector_enabled_by_default\",\n    }),\n)\n\nselects.config_setting_group(\n    name = \"riscv_fp16_vector_enabled_by_default\",\n    match_any = [\n        \"//build_config:riscv\",\n    ],\n)\n\n# Temporary disable fp16 vectors on Android\nalias(\n    name = \"riscv_fp16_vector_enabled\",\n    actual = select({\n        \":xnn_enable_riscv_fp16_vector_explicit_true\": \":xnn_enable_riscv_fp16_vector_explicit_true\",\n        \":xnn_enable_riscv_fp16_vector_explicit_false\": \":xnn_enable_riscv_fp16_vector_explicit_true\",\n        \"//build_config:android\": \":xnn_enable_riscv_fp16_vector_explicit_false\",\n        \"//conditions:default\": \":riscv_fp16_vector_enabled_by_default\",\n    }),\n)\n\nselects.config_setting_group(\n    name = \"cpuinfo_enabled_by_default\",\n    match_any = [\n        \"//build_config:aarch32\",\n        \"//build_config:aarch64\",\n        \"//build_config:x86\",\n    ],\n)\n\nalias(\n    name = \"cpuinfo_enabled\",\n    actual = select({\n        \":xnn_enable_cpuinfo_explicit_true\": \":xnn_enable_cpuinfo_explicit_true\",\n        \":xnn_enable_cpuinfo_explicit_false\": \":xnn_enable_cpuinfo_explicit_true\",\n        \"//conditions:default\": \":cpuinfo_enabled_by_default\",\n    }),\n)\n\nselects.config_setting_group(\n    name = \"kleidiai_enabled_by_default\",\n    match_all = [\n        \"//build_config:aarch64\",\n        \":arm_i8mm_enabled\",\n    ],\n)\n\nalias(\n    name = \"kleidiai_enabled\",\n    actual = select({\n        \":xnn_enable_kleidiai_explicit_true\": \":xnn_enable_kleidiai_explicit_true\",\n        \":xnn_enable_kleidiai_explicit_false\": \":xnn_enable_kleidiai_explicit_true\",\n        \"//conditions:default\": \":kleidiai_enabled_by_default\",\n    }),\n)\n\nselects.config_setting_group(\n    name = \"assembly_enabled_by_default\",\n    match_any = [\n        \"//conditions:default\",\n    ],\n)\n\nalias(\n    name = \"assembly_enabled\",\n    actual = select({\n        \":xnn_enable_assembly_explicit_true\": \":xnn_enable_assembly_explicit_true\",\n        \":xnn_enable_assembly_explicit_false\": \":xnn_enable_assembly_explicit_true\",\n        \"//conditions:default\": \":assembly_enabled_by_default\",\n    }),\n)\n\nselects.config_setting_group(\n    name = \"sparse_enabled_by_default\",\n    match_any = [\n        \"//conditions:default\",\n    ],\n)\n\nalias(\n    name = \"sparse_enabled\",\n    actual = select({\n        \":xnn_enable_sparse_explicit_true\": \":xnn_enable_sparse_explicit_true\",\n        \":xnn_enable_sparse_explicit_false\": \":xnn_enable_sparse_explicit_true\",\n        \"//conditions:default\": \":sparse_enabled_by_default\",\n    }),\n)\n\nselects.config_setting_group(\n    name = \"memopt_enabled_by_default\",\n    match_any = [\n        \"//conditions:default\",\n    ],\n)\n\nalias(\n    name = \"memopt_enabled\",\n    actual = select({\n        \":xnn_enable_memopt_explicit_true\": \":xnn_enable_memopt_explicit_true\",\n        \":xnn_enable_memopt_explicit_false\": \":xnn_enable_memopt_explicit_true\",\n        \"//conditions:default\": \":memopt_enabled_by_default\",\n    }),\n)\n\nselects.config_setting_group(\n    name = \"gemm_m_specialization_enabled_by_default\",\n    match_any = [\n        \"//conditions:default\",\n    ],\n)\n\nalias(\n    name = \"gemm_m_specialization_enabled\",\n    actual = select({\n        \":xnn_enable_gemm_m_specialization_explicit_true\": \":xnn_enable_gemm_m_specialization_explicit_true\",\n        \":xnn_enable_gemm_m_specialization_explicit_false\": \":xnn_enable_gemm_m_specialization_explicit_true\",\n        \"//conditions:default\": \":gemm_m_specialization_enabled_by_default\",\n    }),\n)\n\nselects.config_setting_group(\n    name = \"dwconv_multipass_enabled_by_default\",\n    match_any = [\n        \"//conditions:default\",\n    ],\n)\n\nalias(\n    name = \"dwconv_multipass_enabled\",\n    actual = select({\n        \":xnn_enable_dwconv_multipass_explicit_true\": \":xnn_enable_dwconv_multipass_explicit_true\",\n        \":xnn_enable_dwconv_multipass_explicit_false\": \":xnn_enable_dwconv_multipass_explicit_true\",\n        \"//conditions:default\": \":dwconv_multipass_enabled_by_default\",\n    }),\n)\n\nselects.config_setting_group(\n    name = \"wasm_revectorize_enabled_by_default\",\n    match_any = [\n        \"//build_config:emscripten_wasmsimd\",\n        \"//build_config:emscripten_wasmrelaxedsimd\",\n    ],\n)\n\nalias(\n    name = \"wasm_revectorize_enabled\",\n    actual = select({\n        \":xnn_enable_wasm_revectorize_explicit_true\": \":xnn_enable_wasm_revectorize_explicit_true\",\n        \":xnn_enable_wasm_revectorize_explicit_false\": \":xnn_enable_wasm_revectorize_explicit_true\",\n        \"//conditions:default\": \":wasm_revectorize_enabled_by_default\",\n    }),\n)\n\nbzl_library(\n    name = \"build_defs_bzl\",\n    srcs = [\"build_defs.bzl\"],\n    visibility = [\"//visibility:private\"],\n)\n\nbzl_library(\n    name = \"build_params_bzl\",\n    srcs = [\"build_params.bzl\"],\n    visibility = [\"//visibility:private\"],\n)\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 87.5009765625,
          "content": "# Copyright (c) Facebook, Inc. and its affiliates.\n# All rights reserved.\n#\n# Copyright 2019 Google LLC\n#\n# This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree.\n\nCMAKE_MINIMUM_REQUIRED(VERSION 3.15 FATAL_ERROR)\n\n# Allow specifying -D<PackageName>_ROOT.\nCMAKE_POLICY(SET CMP0074 NEW)\n\n# MSVC runtime library flags are selected by an abstraction.\nCMAKE_POLICY(SET CMP0091 NEW)\n\n# ---[ Project and semantic versioning.\nPROJECT(XNNPACK C CXX ASM)\n\n# --[ Use ccache if available\nFIND_PROGRAM(CCACHE_BINARY \"ccache\")\nIF(CCACHE_BINARY)\n  MESSAGE(STATUS \"Using ccache: ${CCACHE_BINARY}\")\n  SET(CMAKE_CXX_COMPILER_LAUNCHER \"${CCACHE_BINARY}\" CACHE STRING \"CXX compiler launcher\" FORCE)\n  SET(CMAKE_C_COMPILER_LAUNCHER \"${CCACHE_BINARY}\" CACHE STRING \"C compiler launcher\" FORCE)\n  IF(CMAKE_C_COMPILER_ID STREQUAL \"MSVC\")\n    STRING(REPLACE \"/Zi\" \"/Z7\" CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG}\")\n    STRING(REPLACE \"/Zi\" \"/Z7\" CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG}\")\n    STRING(REPLACE \"/Zi\" \"/Z7\" CMAKE_C_FLAGS_RELWITHDEBINFO \"${CMAKE_C_FLAGS_RELWITHDEBINFO}\")\n    STRING(REPLACE \"/Zi\" \"/Z7\" CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO}\")\n    STRING(REPLACE \"/Zi\" \"/Z7\" CMAKE_C_FLAGS_DEBUG_INIT \"${CMAKE_C_FLAGS_DEBU_INITG}\")\n    STRING(REPLACE \"/Zi\" \"/Z7\" CMAKE_CXX_FLAGS_DEBUG_INIT \"${CMAKE_CXX_FLAGS_DEBUG_INIT}\")\n    STRING(REPLACE \"/Zi\" \"/Z7\" CMAKE_C_FLAGS_RELWITHDEBINFO_INIT \"${CMAKE_C_FLAGS_RELWITHDEBINFO_INIT}\")\n    STRING(REPLACE \"/Zi\" \"/Z7\" CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT}\")\n  ENDIF()\nENDIF()\n\nSET(CMAKE_C_STANDARD 99)\nSET(CMAKE_C_EXTENSIONS NO)\nSET(CMAKE_CXX_STANDARD 14)\nSET(CMAKE_CXX_STANDARD_REQUIRED YES)\nSET(CMAKE_CXX_EXTENSIONS NO)\n\n# ---[ Options.\nSET(XNNPACK_LIBRARY_TYPE \"default\" CACHE STRING \"Type of library (shared, static, or default) to build\")\nSET_PROPERTY(CACHE XNNPACK_LIBRARY_TYPE PROPERTY STRINGS default static shared)\nIF(CMAKE_C_COMPILER_ID STREQUAL \"MSVC\")\n  # Disable assembly when using MSVC until support is added.\n  OPTION(XNNPACK_ENABLE_ASSEMBLY \"Build XNNPACK with assembly micro-kernels\" OFF)\nELSE()\n  OPTION(XNNPACK_ENABLE_ASSEMBLY \"Build XNNPACK with assembly micro-kernels\" ON)\nENDIF()\nOPTION(XNNPACK_ENABLE_MEMOPT \"Build XNNPACK with optimized memory allocation scheme\" ON)\nOPTION(XNNPACK_ENABLE_SPARSE \"Build XNNPACK with graph rewriting for sparse inference\" ON)\nOPTION(XNNPACK_ENABLE_GEMM_M_SPECIALIZATION \"Build XNNPACK with support for selecting microkernel with different MR\" ON)\nOPTION(XNNPACK_ENABLE_DWCONV_MULTIPASS \"Build XNNPACK with DWCONV multipass microkernels enabled\" OFF)\nOPTION(XNNPACK_BUILD_LIBRARY \"Build XNNPACK library\" ON)\nOPTION(XNNPACK_BUILD_TESTS \"Build XNNPACK unit tests\" ON)\nOPTION(XNNPACK_BUILD_ALL_MICROKERNELS \"Builds all XNNPACK Microkernels\" ON)\nOPTION(XNNPACK_BUILD_BENCHMARKS \"Build XNNPACK benchmarks\" ON)\nOPTION(XNNPACK_BUILD_WITH_LIBM \"Build XNNPACK with libm, can turn off on Windows to avoid mutiple math functions issue.\" ON)\nOPTION(XNNPACK_USE_SYSTEM_LIBS \"Use system-provided dependency libraries\" OFF)\nOPTION(USE_GNU_SOURCE \"Use _GNU_SOURCE macro\" OFF)\nIF(XNNPACK_BUILD_BENCHMARKS OR XNNPACK_BUILD_TESTS)\n  SET(XNNPACK_BUILD_ALL_MICROKERNELS ON)\nENDIF()\n\n# --- [ Determine target processor\nIF(CMAKE_OSX_ARCHITECTURES)\n  LIST(LENGTH CMAKE_OSX_ARCHITECTURES CMAKE_OSX_ARCHITECTURES_COUNT)\n  IF(CMAKE_OSX_ARCHITECTURES_COUNT GREATER 1)\n    MESSAGE(FATAL_ERROR \"Unsupported XNNPACK build with multiple OSX architectures (${CMAKE_OSX_ARCHITECTURES}). \"\n      \"Specify a single architecture in CMAKE_OSX_ARCHITECTURES and re-configure. \")\n  ENDIF()\n  IF(NOT CMAKE_OSX_ARCHITECTURES MATCHES \"^(x86_64|arm64|arm64e|arm64_32)$\")\n    MESSAGE(FATAL_ERROR \"Unrecognized CMAKE_OSX_ARCHITECTURES value \\\"${CMAKE_OSX_ARCHITECTURES}\\\"\")\n  ENDIF()\n  SET(XNNPACK_TARGET_PROCESSOR \"${CMAKE_OSX_ARCHITECTURES}\")\n  ADD_COMPILE_OPTIONS(\"-Wno-shorten-64-to-32\")\nELSEIF(CMAKE_GENERATOR MATCHES \"^Visual Studio \" AND CMAKE_GENERATOR_PLATFORM)\n  IF(CMAKE_GENERATOR_PLATFORM STREQUAL \"Win32\")\n    SET(XNNPACK_TARGET_PROCESSOR \"x86\")\n  ELSEIF(CMAKE_GENERATOR_PLATFORM STREQUAL \"x64\")\n    SET(XNNPACK_TARGET_PROCESSOR \"x86_64\")\n  ELSEIF(CMAKE_GENERATOR_PLATFORM STREQUAL \"ARM64\")\n    SET(XNNPACK_TARGET_PROCESSOR \"arm64\")\n  ELSEIF(CMAKE_GENERATOR_PLATFORM STREQUAL \"ARM64EC\")\n    SET(XNNPACK_TARGET_PROCESSOR \"arm64\")\n  ELSE()\n    MESSAGE(FATAL_ERROR \"Unsupported Visual Studio architecture \\\"${CMAKE_GENERATOR_PLATFORM}\\\"\")\n  ENDIF()\nELSEIF(CMAKE_SYSTEM_PROCESSOR MATCHES \"^i[3-7]86$\")\n  SET(XNNPACK_TARGET_PROCESSOR \"x86\")\nELSEIF(CMAKE_SYSTEM_PROCESSOR STREQUAL \"AMD64\")\n  SET(XNNPACK_TARGET_PROCESSOR \"x86_64\")\nELSEIF(CMAKE_SYSTEM_PROCESSOR MATCHES \"^armv[5-8]\")\n  SET(XNNPACK_TARGET_PROCESSOR \"arm\")\nELSEIF(CMAKE_SYSTEM_PROCESSOR STREQUAL \"aarch64\")\n  SET(XNNPACK_TARGET_PROCESSOR \"arm64\")\nELSEIF(CMAKE_SYSTEM_PROCESSOR STREQUAL \"ppc64le\")\n  SET(XNNPACK_TARGET_PROCESSOR \"ppc64\")\nELSEIF(NOT XNNPACK_TARGET_PROCESSOR MATCHES \"^(x86(_64)?|arm64|riscv(32|64|128)|Hexagon|ppc64)$\")\n  SET(XNNPACK_TARGET_PROCESSOR \"${CMAKE_SYSTEM_PROCESSOR}\")\nELSE()\n  MESSAGE(FATAL_ERROR \"Unrecognized CMAKE_SYSTEM_PROCESSOR value \\\"${CMAKE_SYSTEM_PROCESSOR}\\\"\")\nENDIF()\nMESSAGE(STATUS \"Building for XNNPACK_TARGET_PROCESSOR: ${XNNPACK_TARGET_PROCESSOR}\")\n\n# --- [ Processor-specific options\nOPTION(XNNPACK_ENABLE_ARM_FP16_SCALAR \"Build XNNPACK with ARM FP16 (FP16 data processing) scalar micro-kernels\" ON)\nOPTION(XNNPACK_ENABLE_ARM_FP16_VECTOR \"Build XNNPACK with ARM FP16 (FP16 data processing) vector micro-kernels\" ON)\nOPTION(XNNPACK_ENABLE_ARM_BF16 \"Build XNNPACK with ARM BF16 (BFLOAT16) micro-kernels\" ON)\nOPTION(XNNPACK_ENABLE_ARM_DOTPROD \"Build XNNPACK with ARM DotProd (integer dot product) micro-kernels\" ON)\nOPTION(XNNPACK_ENABLE_ARM_I8MM \"Build XNNPACK with ARM I8MM (8-bit integer matrix multiply accumulate) micro-kernels\" ON)\nOPTION(XNNPACK_ENABLE_ARM_SME \"Build XNNPACK with ARM SME micro-kernels\" ON)\nOPTION(XNNPACK_ENABLE_ARM_SME2 \"Build XNNPACK with ARM SME2 micro-kernels\" ON)\nIF(NOT XNNPACK_TARGET_PROCESSOR MATCHES \"arm(64)?\")\n  SET(XNNPACK_ENABLE_ARM_FP16_SCALAR OFF)\n  SET(XNNPACK_ENABLE_ARM_FP16_VECTOR OFF)\n  SET(XNNPACK_ENABLE_ARM_BF16 OFF)\n  SET(XNNPACK_ENABLE_ARM_DOTPROD OFF)\nENDIF()\nIF(NOT XNNPACK_TARGET_PROCESSOR STREQUAL \"arm64\")\n  SET(XNNPACK_ENABLE_ARM_I8MM OFF)\n  SET(XNNPACK_ENABLE_ARM_SME OFF)\n  SET(XNNPACK_ENABLE_ARM_SME2 OFF)\nELSEIF(CMAKE_C_COMPILER_ID STREQUAL \"Clang\" AND CMAKE_C_COMPILER_VERSION VERSION_LESS \"11\")\n  SET(XNNPACK_ENABLE_ARM_I8MM OFF)\n  SET(XNNPACK_ENABLE_ARM_SME OFF)\n  SET(XNNPACK_ENABLE_ARM_SME2 OFF)\nELSEIF(CMAKE_C_COMPILER_ID STREQUAL \"Clang\" AND CMAKE_C_COMPILER_VERSION VERSION_LESS \"18\")\n  SET(XNNPACK_ENABLE_ARM_SME OFF)\n  SET(XNNPACK_ENABLE_ARM_SME2 OFF)\nELSEIF(CMAKE_C_COMPILER_ID STREQUAL \"GNU\" AND CMAKE_C_COMPILER_VERSION VERSION_LESS \"10\")\n  SET(XNNPACK_ENABLE_ARM_SME OFF)\n  SET(XNNPACK_ENABLE_ARM_SME2 OFF)\nENDIF()\nOPTION(XNNPACK_ENABLE_RISCV_VECTOR \"Build XNNPACK with RISC-V Vector micro-kernels\" ON)\nOPTION(XNNPACK_ENABLE_VSX \"Build XNNPACK with VSX Vector micro-kernels for Power\" ON)\nOPTION(XNNPACK_ENABLE_AVXVNNI \"Build XNNPACK with AVX-VNNI micro-kernels\" ON)\nIF(CMAKE_C_COMPILER_ID STREQUAL \"GNU\")\n  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS \"11\")\n    SET(XNNPACK_ENABLE_AVXVNNI OFF)\n  ENDIF()\nELSEIF(CMAKE_C_COMPILER_ID STREQUAL \"Clang\")\n  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS \"15\")\n    SET(XNNPACK_ENABLE_AVXVNNI OFF)\n  ENDIF()\nENDIF()\nOPTION(XNNPACK_ENABLE_AVXVNNIINT8 \"Build XNNPACK with AVX-VNNI-INT8 micro-kernels\" ON)\nIF(CMAKE_SYSTEM_NAME MATCHES \"^(Android|Darwin|iOS)$\")\n  SET(XNNPACK_ENABLE_AVXVNNIINT8 OFF)\nENDIF()\nIF(CMAKE_C_COMPILER_ID STREQUAL \"GNU\")\n  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS \"17\")\n    SET(XNNPACK_ENABLE_AVXVNNIINT8 OFF)\n  ENDIF()\nELSEIF(CMAKE_C_COMPILER_ID STREQUAL \"Clang\")\n  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS \"17\")\n    SET(XNNPACK_ENABLE_AVXVNNIINT8 OFF)\n  ENDIF()\nENDIF()\nOPTION(XNNPACK_ENABLE_AVX256SKX \"Build XNNPACK with AVX256SKX micro-kernels\" ON)\nIF(CMAKE_C_COMPILER_ID STREQUAL \"GNU\")\n  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS \"11\")\n    SET(XNNPACK_ENABLE_AVX256SKX OFF)\n  ENDIF()\nELSEIF(CMAKE_C_COMPILER_ID STREQUAL \"Clang\")\n  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS \"15\")\n    SET(XNNPACK_ENABLE_AVX256SKX OFF)\n  ENDIF()\nENDIF()\nOPTION(XNNPACK_ENABLE_AVX256VNNI \"Build XNNPACK with AVX256VNNI micro-kernels\" ON)\nIF(CMAKE_C_COMPILER_ID STREQUAL \"GNU\")\n  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS \"11\")\n    SET(XNNPACK_ENABLE_AVX256VNNI OFF)\n  ENDIF()\nELSEIF(CMAKE_C_COMPILER_ID STREQUAL \"Clang\")\n  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS \"15\")\n    SET(XNNPACK_ENABLE_AVX256VNNI OFF)\n  ENDIF()\nENDIF()\nOPTION(XNNPACK_ENABLE_AVX256VNNIGFNI \"Build XNNPACK with AVX256VNNIGFNI micro-kernels\" ON)\nIF(CMAKE_C_COMPILER_ID STREQUAL \"GNU\")\n  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS \"11\")\n    SET(XNNPACK_ENABLE_AVX256VNNIGFNI OFF)\n  ENDIF()\nELSEIF(CMAKE_C_COMPILER_ID STREQUAL \"Clang\")\n  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS \"15\")\n    SET(XNNPACK_ENABLE_AVX256VNNIGFNI OFF)\n  ENDIF()\nENDIF()\nOPTION(XNNPACK_ENABLE_AVX512F \"Build XNNPACK with AVX512F micro-kernels\" ON)\nIF(CMAKE_C_COMPILER_ID STREQUAL \"GNU\")\n  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS \"8\")\n    SET(XNNPACK_ENABLE_AVX512F OFF)\n  ENDIF()\nELSEIF(CMAKE_C_COMPILER_ID STREQUAL \"Clang\")\n  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS \"6\")\n    SET(XNNPACK_ENABLE_AVX512F OFF)\n  ENDIF()\nENDIF()\nOPTION(XNNPACK_ENABLE_AVX512SKX \"Build XNNPACK with AVX512SKX micro-kernels\" ON)\nIF(CMAKE_C_COMPILER_ID STREQUAL \"GNU\")\n  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS \"8\")\n    SET(XNNPACK_ENABLE_AVX512SKX OFF)\n  ENDIF()\nELSEIF(CMAKE_C_COMPILER_ID STREQUAL \"Clang\")\n  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS \"6\")\n    SET(XNNPACK_ENABLE_AVX512SKX OFF)\n  ENDIF()\nENDIF()\nOPTION(XNNPACK_ENABLE_AVX512VBMI \"Build XNNPACK with AVX512VBMI micro-kernels\" ON)\nIF(CMAKE_C_COMPILER_ID STREQUAL \"GNU\")\n  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS \"8\")\n    SET(XNNPACK_ENABLE_AVX512VBMI OFF)\n  ENDIF()\nELSEIF(CMAKE_C_COMPILER_ID STREQUAL \"Clang\")\n  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS \"6\")\n    SET(XNNPACK_ENABLE_AVX512VBMI OFF)\n  ENDIF()\nENDIF()\nOPTION(XNNPACK_ENABLE_AVX512VNNI \"Build XNNPACK with AVX512VNNI micro-kernels\" ON)\nIF(CMAKE_C_COMPILER_ID STREQUAL \"GNU\")\n  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS \"8\")\n    SET(XNNPACK_ENABLE_AVX512VNNI OFF)\n  ENDIF()\nELSEIF(CMAKE_C_COMPILER_ID STREQUAL \"Clang\")\n  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS \"6\")\n    SET(XNNPACK_ENABLE_AVX512VNNI OFF)\n  ENDIF()\nENDIF()\nOPTION(XNNPACK_ENABLE_AVX512VNNIGFNI \"Build XNNPACK with AVX512VNNIGFNI micro-kernels\" ON)\nIF(CMAKE_C_COMPILER_ID STREQUAL \"GNU\")\n  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS \"8\")\n    SET(XNNPACK_ENABLE_AVX512VNNIGFNI OFF)\n  ENDIF()\nELSEIF(CMAKE_C_COMPILER_ID STREQUAL \"Clang\")\n  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS \"6\")\n    SET(XNNPACK_ENABLE_AVX512VNNIGFNI OFF)\n  ENDIF()\nENDIF()\nOPTION(XNNPACK_ENABLE_AVX512AMX \"Build XNNPACK with AVX512-AMX micro-kernels\" ON)\nIF(CMAKE_C_COMPILER_ID STREQUAL \"GNU\")\n  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS \"13\")\n    SET(XNNPACK_ENABLE_AVX512AMX OFF)\n  ENDIF()\nELSEIF(CMAKE_C_COMPILER_ID STREQUAL \"Clang\")\n  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS \"15\")\n    SET(XNNPACK_ENABLE_AVX512AMX OFF)\n  ENDIF()\nELSEIF(CMAKE_C_COMPILER_ID STREQUAL \"MSVC\")\n  SET(XNNPACK_ENABLE_AVX512AMX OFF)\nENDIF()\nIF(XNNPACK_TARGET_PROCESSOR STREQUAL \"x86\")\n  SET(XNNPACK_ENABLE_AVX512AMX OFF)\nENDIF()\nOPTION(XNNPACK_ENABLE_AVX512FP16 \"Build XNNPACK with AVX512-FP16 micro-kernels\" ON)\nIF(CMAKE_C_COMPILER_ID STREQUAL \"GNU\")\n  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS \"13\")\n    SET(XNNPACK_ENABLE_AVX512FP16 OFF)\n  ENDIF()\nELSEIF(CMAKE_C_COMPILER_ID STREQUAL \"Clang\")\n  IF(CMAKE_C_COMPILER_VERSION VERSION_LESS \"15\")\n    SET(XNNPACK_ENABLE_AVX512FP16 OFF)\n  ENDIF()\nENDIF()\nOPTION(XNNPACK_ENABLE_HVX \"Build XNNPACK with Hexagon HVX micro-kernels\" ON)\nOPTION(XNNPACK_ENABLE_KLEIDIAI \"Use KleidiAI GEMM microkernels for Arm\" ON)\nIF(XNNPACK_TARGET_PROCESSOR STREQUAL \"arm64\" AND XNNPACK_ENABLE_ARM_I8MM AND NOT CMAKE_C_COMPILER_ID STREQUAL \"MSVC\")\n  IF (XNNPACK_ENABLE_KLEIDIAI)\n    MESSAGE(STATUS \"Enabling KleidiAI for Arm64\")\n  ENDIF()\nELSE()\n  SET(XNNPACK_ENABLE_KLEIDIAI OFF)\nENDIF()\n\n# ---[ CMake options\nINCLUDE(GNUInstallDirs)\n\nIF(XNNPACK_BUILD_TESTS)\n  ENABLE_TESTING()\nENDIF()\n\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_ARM_FP16_VECTOR=$<BOOL:${XNNPACK_ENABLE_ARM_FP16_VECTOR}>\")\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_ARM_FP16_SCALAR=$<BOOL:${XNNPACK_ENABLE_ARM_FP16_SCALAR}>\")\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_ARM_BF16=$<BOOL:${XNNPACK_ENABLE_ARM_BF16}>\")\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_ARM_DOTPROD=$<BOOL:${XNNPACK_ENABLE_ARM_DOTPROD}>\")\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_ARM_I8MM=$<BOOL:${XNNPACK_ENABLE_ARM_I8MM}>\")\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_ARM_SME=$<BOOL:${XNNPACK_ENABLE_ARM_SME}>\")\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_ARM_SME2=$<BOOL:${XNNPACK_ENABLE_ARM_SME2}>\")\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_RISCV_VECTOR=$<BOOL:${XNNPACK_ENABLE_RISCV_VECTOR}>\")\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_AVXVNNI=$<BOOL:${XNNPACK_ENABLE_AVXVNNI}>\")\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_AVXVNNIINT8=$<BOOL:${XNNPACK_ENABLE_AVXVNNIINT8}>\")\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_AVX256SKX=$<BOOL:${XNNPACK_ENABLE_AVX256SKX}>\")\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_AVX256VNNI=$<BOOL:${XNNPACK_ENABLE_AVX256VNNI}>\")\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_AVX256VNNIGFNI=$<BOOL:${XNNPACK_ENABLE_AVX256VNNIGFNI}>\")\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_AVX512F=$<BOOL:${XNNPACK_ENABLE_AVX512F}>\")\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_AVX512SKX=$<BOOL:${XNNPACK_ENABLE_AVX512SKX}>\")\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_AVX512VBMI=$<BOOL:${XNNPACK_ENABLE_AVX512VBMI}>\")\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_AVX512VNNI=$<BOOL:${XNNPACK_ENABLE_AVX512VNNI}>\")\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_AVX512VNNIGFNI=$<BOOL:${XNNPACK_ENABLE_AVX512VNNIGFNI}>\")\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_AVX512AMX=$<BOOL:${XNNPACK_ENABLE_AVX512AMX}>\")\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_AVX512FP16=$<BOOL:${XNNPACK_ENABLE_AVX512FP16}>\")\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_VSX=$<BOOL:${XNNPACK_ENABLE_VSX}>\")\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_ASSEMBLY=$<BOOL:${XNNPACK_ENABLE_ASSEMBLY}>\")\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_MEMOPT=$<BOOL:${XNNPACK_ENABLE_MEMOPT}>\")\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_SPARSE=$<BOOL:${XNNPACK_ENABLE_SPARSE}>\")\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_GEMM_M_SPECIALIZATION=$<BOOL:${XNNPACK_ENABLE_GEMM_M_SPECIALIZATION}>\")\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_DWCONV_MULTIPASS=$<BOOL:${XNNPACK_ENABLE_DWCONV_MULTIPASS}>\")\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_HVX=$<BOOL:${XNNPACK_ENABLE_HVX}>\")\nADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_KLEIDIAI=$<BOOL:${XNNPACK_ENABLE_KLEIDIAI}>\")\n\nIF(XNNPACK_TARGET_PROCESSOR MATCHES \"Hexagon\")\n  ADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_CPUINFO=0\")\nELSE()\n  ADD_COMPILE_DEFINITIONS(\"XNN_ENABLE_CPUINFO=1\")\nENDIF()\n\nIF(USE_GNU_SOURCE)\n  ADD_COMPILE_DEFINITIONS(_GNU_SOURCE)\nENDIF()\n\nIF(CMAKE_C_COMPILER_ID STREQUAL \"MSVC\")\n  # Disable \"unary minus operator applied to unsigned type, result still unsigned\" warning\n  ADD_COMPILE_OPTIONS(\"/wd4146\")\n  # Test files have many sections, increase the limit. See\n  # https://learn.microsoft.com/en-us/cpp/build/reference/bigobj-increase-number-of-sections-in-dot-obj-file.\n  ADD_COMPILE_OPTIONS(\"/bigobj\")\nENDIF()\n\nIF(CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n  # Disable \"note: parameter passing for argument of type ... changed/will change in ...\"\n  ADD_COMPILE_OPTIONS(\"-Wno-psabi\")\nENDIF()\n\n# ---[ Build flags\nIF(NOT CMAKE_SYSTEM_NAME)\n  MESSAGE(FATAL_ERROR \"CMAKE_SYSTEM_NAME not defined\")\nELSEIF(NOT CMAKE_SYSTEM_NAME MATCHES \"^(Android|Darwin|iOS|Linux|Windows|CYGWIN|MSYS|QURT)$\")\n  MESSAGE(FATAL_ERROR \"Unrecognized CMAKE_SYSTEM_NAME value \\\"${CMAKE_SYSTEM_NAME}\\\"\")\nENDIF()\nIF(CMAKE_SYSTEM_NAME MATCHES \"Windows\")\n  # Disable min/max macros as they break std::min/max and std::numeric_limits<T>min/max.\n  ADD_COMPILE_DEFINITIONS(\"NOMINMAX\")\nENDIF()\n\n# ---[ Download deps\nIF(NOT XNNPACK_USE_SYSTEM_LIBS)\n  IF(NOT DEFINED CPUINFO_SOURCE_DIR)\n    MESSAGE(STATUS \"Downloading cpuinfo to ${CMAKE_BINARY_DIR}/cpuinfo-source (define CPUINFO_SOURCE_DIR to avoid it)\")\n    CONFIGURE_FILE(cmake/DownloadCpuinfo.cmake \"${CMAKE_BINARY_DIR}/cpuinfo-download/CMakeLists.txt\")\n    EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" -G \"${CMAKE_GENERATOR}\" .\n      WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}/cpuinfo-download\")\n    EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" --build .\n      WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}/cpuinfo-download\")\n    SET(CPUINFO_SOURCE_DIR \"${CMAKE_BINARY_DIR}/cpuinfo-source\" CACHE STRING \"cpuinfo source directory\")\n  ENDIF()\n\n  IF(NOT DEFINED FXDIV_SOURCE_DIR)\n    MESSAGE(STATUS \"Downloading FXdiv to ${CMAKE_BINARY_DIR}/FXdiv-source (define FXDIV_SOURCE_DIR to avoid it)\")\n    CONFIGURE_FILE(cmake/DownloadFXdiv.cmake \"${CMAKE_BINARY_DIR}/FXdiv-download/CMakeLists.txt\")\n    EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" -G \"${CMAKE_GENERATOR}\" .\n      WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}/FXdiv-download\")\n    EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" --build .\n      WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}/FXdiv-download\")\n    SET(FXDIV_SOURCE_DIR \"${CMAKE_BINARY_DIR}/FXdiv-source\" CACHE STRING \"FXdiv source directory\")\n  ENDIF()\n\n  IF(NOT DEFINED PTHREADPOOL_SOURCE_DIR)\n    MESSAGE(STATUS \"Downloading pthreadpool to ${CMAKE_BINARY_DIR}/pthreadpool-source (define PTHREADPOOL_SOURCE_DIR to avoid it)\")\n    CONFIGURE_FILE(cmake/DownloadPThreadPool.cmake \"${CMAKE_BINARY_DIR}/pthreadpool-download/CMakeLists.txt\")\n    EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" -G \"${CMAKE_GENERATOR}\" .\n      WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}/pthreadpool-download\")\n    EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" --build .\n      WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}/pthreadpool-download\")\n    SET(PTHREADPOOL_SOURCE_DIR \"${CMAKE_BINARY_DIR}/pthreadpool-source\" CACHE STRING \"pthreadpool source directory\")\n  ENDIF()\n\n  IF(XNNPACK_BUILD_TESTS AND NOT DEFINED GOOGLETEST_SOURCE_DIR)\n    MESSAGE(STATUS \"Downloading Google Test to ${CMAKE_BINARY_DIR}/googletest-source (define GOOGLETEST_SOURCE_DIR to avoid it)\")\n    CONFIGURE_FILE(cmake/DownloadGoogleTest.cmake \"${CMAKE_BINARY_DIR}/googletest-download/CMakeLists.txt\")\n    EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" -G \"${CMAKE_GENERATOR}\" .\n      WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}/googletest-download\")\n    EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" --build .\n      WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}/googletest-download\")\n    SET(GOOGLETEST_SOURCE_DIR \"${CMAKE_BINARY_DIR}/googletest-source\" CACHE STRING \"Google Test source directory\")\n  ENDIF()\n\n  IF(XNNPACK_BUILD_BENCHMARKS AND NOT DEFINED GOOGLEBENCHMARK_SOURCE_DIR)\n    MESSAGE(STATUS \"Downloading Google Benchmark to ${CMAKE_BINARY_DIR}/googlebenchmark-source (define GOOGLEBENCHMARK_SOURCE_DIR to avoid it)\")\n    CONFIGURE_FILE(cmake/DownloadGoogleBenchmark.cmake \"${CMAKE_BINARY_DIR}/googlebenchmark-download/CMakeLists.txt\")\n    EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" -G \"${CMAKE_GENERATOR}\" .\n      WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}/googlebenchmark-download\")\n    EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" --build .\n      WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}/googlebenchmark-download\")\n    SET(GOOGLEBENCHMARK_SOURCE_DIR \"${CMAKE_BINARY_DIR}/googlebenchmark-source\" CACHE STRING \"Google Benchmark source directory\")\n  ENDIF()\n\n  IF(XNNPACK_ENABLE_KLEIDIAI AND NOT DEFINED KLEIDIAI_SOURCE_DIR)\n    MESSAGE(STATUS \"Downloading KleidiAI to ${CMAKE_BINARY_DIR}/kleidiai-source (define KLEIDIAI_SOURCE_DIR to avoid it)\")\n    CONFIGURE_FILE(cmake/DownloadKleidiAI.cmake \"${CMAKE_BINARY_DIR}/kleidiai-download/CMakeLists.txt\")\n    EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" -G \"${CMAKE_GENERATOR}\" .\n      WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}/kleidiai-download\")\n    EXECUTE_PROCESS(COMMAND \"${CMAKE_COMMAND}\" --build .\n      WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}/kleidiai-download\")\n    SET(KLEIDIAI_SOURCE_DIR \"${CMAKE_BINARY_DIR}/kleidiai-source\" CACHE STRING \"kleidiai source directory\")\n  ENDIF()\nENDIF()\n\n# ---[ XNNPACK library\n\nIF (NOT DEFINED Python_EXECUTABLE)\n  find_package(Python COMPONENTS Interpreter)\n\n  IF(NOT Python_FOUND)\n    SET(PYTHON_EXECUTABLE \"python3\")\n  ENDIF()\nENDIF()\n\n# Generate and load the micorkernels.cmake files.\nMESSAGE(STATUS \"Generating microkernels.cmake\")\nEXECUTE_PROCESS(\n  COMMAND \"${Python_EXECUTABLE}\" \"${PROJECT_SOURCE_DIR}/tools/update-microkernels.py\" --output \"${PROJECT_BINARY_DIR}\"\n  RESULT_VARIABLE UPDATE_MICROKERNELS_RESULT\n)\nIF(NOT UPDATE_MICROKERNELS_RESULT EQUAL 0)\n  MESSAGE(FATAL_ERROR \"Failed to generate \\\"microkernels.cmake\\\".\")\nENDIF()\nINCLUDE(\"${PROJECT_BINARY_DIR}/cmake/gen/microkernels.cmake\")\n\nSET(OPERATOR_SRCS\n  src/operator-delete.c\n  src/operators/argmax-pooling-nhwc.c\n  src/operators/average-pooling-nhwc.c\n  src/operators/batch-matrix-multiply-nc.c\n  src/operators/binary-elementwise-nd.c\n  src/operators/constant-pad-nd.c\n  src/operators/convolution-nchw.c\n  src/operators/convolution-nhwc.c\n  src/operators/deconvolution-nhwc.c\n  src/operators/dynamic-fully-connected-nc.c\n  src/operators/fully-connected-nc.c\n  src/operators/max-pooling-nhwc.c\n  src/operators/pack-lh.c\n  src/operators/reduce-nd.c\n  src/operators/resize-bilinear-nchw.c\n  src/operators/resize-bilinear-nhwc.c\n  src/operators/rope-nthc.c\n  src/operators/scaled-dot-product-attention-nhtc.c\n  src/operators/slice-nd.c\n  src/operators/softmax-nc.c\n  src/operators/transpose-nd.c\n  src/operators/unary-elementwise-nc.c\n  src/operators/unpooling-nhwc.c)\n\nSET(REFERENCE_SRCS\n  src/reference/unary-elementwise.cc\n  src/reference/binary-elementwise.cc)\n\nSET(SUBGRAPH_SRCS\n  src/memory-planner.c\n  src/runtime.c\n  src/subgraph.c\n  src/subgraph/argmax-pooling-2d.c\n  src/subgraph/average-pooling-2d.c\n  src/subgraph/batch-matrix-multiply.c\n  src/subgraph/binary.c\n  src/subgraph/concatenate.c\n  src/subgraph/convolution-2d.c\n  src/subgraph/copy.c\n  src/subgraph/deconvolution-2d.c\n  src/subgraph/deprecated.c\n  src/subgraph/depth-to-space-2d.c\n  src/subgraph/depthwise-convolution-2d.c\n  src/subgraph/even-split.c\n  src/subgraph/fully-connected-sparse.c\n  src/subgraph/fully-connected.c\n  src/subgraph/max-pooling-2d.c\n  src/subgraph/pack-lh.c\n  src/subgraph/reshape-helpers.c\n  src/subgraph/scaled-dot-product-attention.c\n  src/subgraph/softmax.c\n  src/subgraph/space-to-depth-2d.c\n  src/subgraph/static-constant-pad.c\n  src/subgraph/static-reduce.c\n  src/subgraph/static-resize-bilinear-2d.c\n  src/subgraph/static-slice.c\n  src/subgraph/static-transpose.c\n  src/subgraph/unpooling-2d.c\n  src/subgraph/unary.c\n  src/subgraph/validation.c\n  src/tensor.c)\n\nSET(LOGGING_SRCS\n  src/enums/allocation-type.c\n  src/enums/datatype-strings.c\n  src/enums/microkernel-type.c\n  src/enums/node-type.c\n  src/enums/operator-type.c\n  src/log.c)\n\nSET(XNNPACK_SRCS\n  src/configs/argmaxpool-config.c\n  src/configs/avgpool-config.c\n  src/configs/binary-elementwise-config.c\n  src/configs/cmul-config.c\n  src/configs/conv-hwc2chw-config.c\n  src/configs/dwconv-config.c\n  src/configs/dwconv2d-chw-config.c\n  src/configs/experiments-config.c\n  src/configs/gemm-config.c\n  src/configs/ibilinear-chw-config.c\n  src/configs/ibilinear-config.c\n  src/configs/lut32norm-config.c\n  src/configs/maxpool-config.c\n  src/configs/pavgpool-config.c\n  src/configs/pack-lh-config.c\n  src/configs/raddstoreexpminusmax-config.c\n  src/configs/reduce-config.c\n  src/configs/rmax-config.c\n  src/configs/spmm-config.c\n  src/configs/transpose-config.c\n  src/configs/unary-elementwise-config.c\n  src/configs/unpool-config.c\n  src/configs/vmulcaddc-config.c\n  src/configs/xx-fill-config.c\n  src/configs/xx-pad-config.c\n  src/configs/x8-lut-config.c\n  src/init.c\n  src/params.c\n  \"${PROJECT_BINARY_DIR}/build_identifier.c\")\n\nSET(TABLE_SRCS\n  src/tables/exp2-k-over-64.c\n  src/tables/exp2-k-over-2048.c\n  src/tables/exp2minus-k-over-4.c\n  src/tables/exp2minus-k-over-8.c\n  src/tables/exp2minus-k-over-16.c\n  src/tables/exp2minus-k-over-32.c\n  src/tables/exp2minus-k-over-64.c\n  src/tables/exp2minus-k-over-2048.c\n  src/tables/vlog.c)\n\nSET(PROD_MICROKERNEL_SRCS ${PROD_SCALAR_MICROKERNEL_SRCS})\nSET(NON_PROD_MICROKERNEL_SRCS ${NON_PROD_SCALAR_MICROKERNEL_SRCS})\nIF(XNNPACK_TARGET_PROCESSOR STREQUAL \"arm\")\n  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_ARMSIMD32_MICROKERNEL_SRCS})\n  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEON_MICROKERNEL_SRCS})\n  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONFP16_MICROKERNEL_SRCS})\n  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONFMA_MICROKERNEL_SRCS})\n  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONV8_MICROKERNEL_SRCS})\n  IF(XNNPACK_ENABLE_ARM_FP16_SCALAR)\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_FP16ARITH_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_ARM_FP16_VECTOR)\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONFP16ARITH_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_ARM_DOTPROD)\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONDOT_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_ARM_DOTPROD AND XNNPACK_ENABLE_ARM_FP16_VECTOR)\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONDOTFP16ARITH_MICROKERNEL_SRCS})\n  ENDIF()\n  LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_ARMSIMD32_MICROKERNEL_SRCS})\n  LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_NEON_MICROKERNEL_SRCS})\n  LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_NEONFP16_MICROKERNEL_SRCS})\n  LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_NEONFMA_MICROKERNEL_SRCS})\n  LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_NEONV8_MICROKERNEL_SRCS})\n  IF(XNNPACK_ENABLE_ARM_FP16_SCALAR)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_FP16ARITH_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_ARM_FP16_VECTOR AND XNNPACK_ENABLE_ARM_DOTPROD)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_NEONDOTFP16ARITH_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_ARM_FP16_VECTOR)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_NEONFP16ARITH_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_ARM_BF16)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_NEONBF16_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_ARM_DOTPROD)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_NEONDOT_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_ASSEMBLY)\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AARCH32_ASM_MICROKERNEL_SRCS})\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_AARCH32_ASM_MICROKERNEL_SRCS})\n  ENDIF()\nENDIF()\nIF(XNNPACK_TARGET_PROCESSOR MATCHES \"^arm64\")\n  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEON_MICROKERNEL_SRCS})\n  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONFP16_MICROKERNEL_SRCS})\n  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONFMA_MICROKERNEL_SRCS})\n  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONV8_MICROKERNEL_SRCS})\n  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEON_AARCH64_MICROKERNEL_SRCS})\n  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONFMA_AARCH64_MICROKERNEL_SRCS})\n  IF(XNNPACK_ENABLE_ARM_FP16_SCALAR)\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_FP16ARITH_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_ARM_FP16_VECTOR)\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONFP16ARITH_MICROKERNEL_SRCS})\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONFP16ARITH_AARCH64_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_ARM_DOTPROD)\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONDOT_MICROKERNEL_SRCS})\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONDOT_AARCH64_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_ARM_DOTPROD AND XNNPACK_ENABLE_ARM_FP16_VECTOR)\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONDOTFP16ARITH_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_ARM_I8MM)\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONI8MM_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_ARM_SME)\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONSME_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_ARM_SME2)\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_NEONSME2_MICROKERNEL_SRCS})\n  ENDIF()\n  LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_NEON_MICROKERNEL_SRCS})\n  LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_NEONFP16_MICROKERNEL_SRCS})\n  LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_NEONFMA_MICROKERNEL_SRCS})\n  LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_NEONV8_MICROKERNEL_SRCS})\n  LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_NEON_AARCH64_MICROKERNEL_SRCS})\n  LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_NEONFMA_AARCH64_MICROKERNEL_SRCS})\n  IF(XNNPACK_ENABLE_ARM_FP16_SCALAR)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_FP16ARITH_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_ARM_FP16_VECTOR AND XNNPACK_ENABLE_ARM_DOTPROD)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_NEONDOTFP16ARITH_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_ARM_FP16_VECTOR)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_NEONFP16ARITH_MICROKERNEL_SRCS})\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_NEONFP16ARITH_AARCH64_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_ARM_BF16)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_NEONBF16_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_ARM_DOTPROD)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_NEONDOT_MICROKERNEL_SRCS})\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_NEONDOT_AARCH64_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_ARM_I8MM)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_NEONI8MM_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_ARM_SME)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_NEONSME_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_ARM_SME2)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_NEONSME2_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_ASSEMBLY)\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AARCH64_ASM_MICROKERNEL_SRCS})\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_AARCH64_ASM_MICROKERNEL_SRCS})\n  ENDIF()\nENDIF()\nIF(XNNPACK_TARGET_PROCESSOR MATCHES \"^x86(_64)?$\")\n  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_SSE_MICROKERNEL_SRCS})\n  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_SSE2_MICROKERNEL_SRCS})\n  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_SSSE3_MICROKERNEL_SRCS})\n  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_SSE41_MICROKERNEL_SRCS})\n  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVX_MICROKERNEL_SRCS})\n  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_F16C_MICROKERNEL_SRCS})\n  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_FMA3_MICROKERNEL_SRCS})\n  LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVX2_MICROKERNEL_SRCS})\n  IF(XNNPACK_ENABLE_ASSEMBLY AND XNNPACK_TARGET_PROCESSOR MATCHES \"x86_64\")\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AMD64_ASM_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_AVX512AMX)\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVX512AMX_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_AVX512FP16)\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVX512FP16_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_AVXVNNI)\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVXVNNI_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_AVXVNNIINT8)\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVXVNNIINT8_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_AVX256SKX)\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVX256SKX_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_AVX256VNNI)\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVX256VNNI_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_AVX256VNNIGFNI)\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVX256VNNIGFNI_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_AVX512F)\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVX512F_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_AVX512SKX)\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVX512SKX_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_AVX512VBMI)\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVX512VBMI_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_AVX512VNNI)\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVX512VNNI_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_AVX512VNNIGFNI)\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVX512VNNIGFNI_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_AVX512VNNIGFNI)\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_AVX512VNNIGFNI_MICROKERNEL_SRCS})\n  ENDIF()\n  LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_SSE_MICROKERNEL_SRCS})\n  LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_SSE2_MICROKERNEL_SRCS})\n  LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_SSSE3_MICROKERNEL_SRCS})\n  LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_SSE41_MICROKERNEL_SRCS})\n  LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_AVX_MICROKERNEL_SRCS})\n  LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_F16C_MICROKERNEL_SRCS})\n  LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_FMA3_MICROKERNEL_SRCS})\n  LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_AVX2_MICROKERNEL_SRCS})\n  IF(XNNPACK_ENABLE_ASSEMBLY AND XNNPACK_TARGET_PROCESSOR MATCHES \"x86_64\")\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_AMD64_ASM_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_AVX512AMX)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_AVX512AMX_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_AVX512FP16)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_AVX512FP16_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_AVXVNNI)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_AVXVNNI_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_AVXVNNIINT8)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_AVXVNNIINT8_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_AVX256SKX)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_AVX256SKX_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_AVX256VNNI)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_AVX256VNNI_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_AVX256VNNIGFNI)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_AVX256VNNIGFNI_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_AVX512F)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_AVX512F_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_AVX512SKX)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_AVX512SKX_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_AVX512VBMI)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_AVX512VBMI_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_AVX512VNNI)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_AVX512VNNI_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_AVX512VNNIGFNI)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_AVX512VNNIGFNI_MICROKERNEL_SRCS})\n  ENDIF()\nENDIF()\nIF(XNNPACK_TARGET_PROCESSOR MATCHES \"Hexagon\")\n  LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_HEXAGON_MICROKERNEL_SRCS})\n  IF(XNNPACK_ENABLE_HVX)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_HVX_MICROKERNEL_SRCS})\n  ENDIF()\nENDIF()\nIF(XNNPACK_TARGET_PROCESSOR MATCHES \"^ppc64\")\n  IF(XNNPACK_ENABLE_VSX)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_PPC64_MICROKERNEL_SRCS})\n  ENDIF()\nENDIF()\nIF(XNNPACK_TARGET_PROCESSOR MATCHES \"^riscv\")\n  LIST(APPEND PROD_MICROKERNEL_SRCS)\n  IF(XNNPACK_ENABLE_RISCV_VECTOR)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_RVV_MICROKERNEL_SRCS})\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_RVV_MICROKERNEL_SRCS})\n  ENDIF()\n  IF(XNNPACK_ENABLE_RISCV_FP16_VECTOR)\n    LIST(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_RVVFP16ARITH_MICROKERNEL_SRCS})\n    LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_RVVFP16ARITH_MICROKERNEL_SRCS})\n  ENDIF()\nENDIF()\n\nSET(ALL_MICROKERNEL_SRCS ${PROD_MICROKERNEL_SRCS} ${NON_PROD_MICROKERNEL_SRCS})\n\nLIST(SORT PROD_MICROKERNEL_SRCS)\nSTRING(REPLACE \";\" \"\\n\" PROD_MICROKERNEL_SRCS_WITH_NEWLINES \"${PROD_MICROKERNEL_SRCS}\")\nFILE(GENERATE OUTPUT \"${PROJECT_BINARY_DIR}/prod_microkernel_srcs.txt\" CONTENT \"${PROD_MICROKERNEL_SRCS_WITH_NEWLINES}\")\nADD_CUSTOM_COMMAND(\n  OUTPUT \"${PROJECT_BINARY_DIR}/build_identifier.c\"\n  COMMAND \"${Python_EXECUTABLE}\" \"scripts/generate-build-identifier.py\" --output \"${PROJECT_BINARY_DIR}/build_identifier.c\" --input_file_list \"${PROJECT_BINARY_DIR}/prod_microkernel_srcs.txt\"\n  DEPENDS \"${PROJECT_BINARY_DIR}/prod_microkernel_srcs.txt\"\n  WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n)\n\n# Create a dummy library that contains shared dependencies and definitions for\n# all other XNNPACK targets.\nADD_LIBRARY(xnnpack-base INTERFACE)\n\nADD_LIBRARY(microkernels-prod STATIC ${PROD_MICROKERNEL_SRCS} ${TABLE_SRCS})\nIF(XNNPACK_BUILD_ALL_MICROKERNELS)\n  ADD_LIBRARY(microkernels-all STATIC ${NON_PROD_MICROKERNEL_SRCS})\n  TARGET_LINK_LIBRARIES(microkernels-all PUBLIC microkernels-prod)\nENDIF()\nADD_LIBRARY(hardware-config OBJECT src/configs/hardware-config.c)\nADD_LIBRARY(indirection OBJECT src/indirection.c)\nADD_LIBRARY(logging OBJECT ${LOGGING_SRCS})\nADD_LIBRARY(microparams-init OBJECT src/microparams-init.c)\nADD_LIBRARY(normalization OBJECT src/normalization.c)\nADD_LIBRARY(packing OBJECT src/reference/packing.cc)\nTARGET_LINK_LIBRARIES(hardware-config PRIVATE xnnpack-base logging)\nTARGET_LINK_LIBRARIES(indirection PRIVATE xnnpack-base)\nTARGET_LINK_LIBRARIES(logging PRIVATE xnnpack-base)\nIF(XNNPACK_BUILD_ALL_MICROKERNELS)\n  TARGET_LINK_LIBRARIES(microkernels-all PRIVATE xnnpack-base)\nENDIF()\nTARGET_LINK_LIBRARIES(microkernels-prod PRIVATE xnnpack-base)\nTARGET_LINK_LIBRARIES(microparams-init PRIVATE xnnpack-base)\nTARGET_LINK_LIBRARIES(normalization PRIVATE xnnpack-base)\nTARGET_LINK_LIBRARIES(packing PRIVATE xnnpack-base logging)\nIF(XNNPACK_BUILD_LIBRARY)\n  ADD_LIBRARY(allocator OBJECT src/allocator.c)\n  ADD_LIBRARY(cache OBJECT src/cache.c)\n  ADD_LIBRARY(datatype OBJECT src/datatype.c)\n  ADD_LIBRARY(memory OBJECT src/memory.c)\n  ADD_LIBRARY(microkernel-utils OBJECT src/microkernel-utils.c)\n  ADD_LIBRARY(mutex OBJECT src/mutex.c)\n  ADD_LIBRARY(operators OBJECT ${OPERATOR_SRCS})\n  ADD_LIBRARY(operator-run OBJECT src/operator-run.c)\n  ADD_LIBRARY(operator-utils OBJECT src/operator-utils.c)\n  ADD_LIBRARY(reference-ukernels OBJECT ${REFERENCE_SRCS})\n  ADD_LIBRARY(subgraph OBJECT ${SUBGRAPH_SRCS})\n  # Need C_EXTENSIONS to get constants for mmap (MAP_ANONYMOUS).\n  SET_TARGET_PROPERTIES(memory PROPERTIES C_EXTENSIONS YES)\n  IF(XNNPACK_LIBRARY_TYPE STREQUAL \"default\")\n    ADD_LIBRARY(XNNPACK ${XNNPACK_SRCS})\n  ELSEIF(XNNPACK_LIBRARY_TYPE STREQUAL \"shared\")\n    ADD_LIBRARY(XNNPACK SHARED ${XNNPACK_SRCS})\n  ELSEIF(XNNPACK_LIBRARY_TYPE STREQUAL \"static\")\n    ADD_LIBRARY(XNNPACK STATIC ${XNNPACK_SRCS})\n  ELSE()\n    MESSAGE(FATAL_ERROR \"Unsupported XNNPACK library type \\\"${XNNPACK_LIBRARY_TYPE}\\\". Must be \\\"static\\\", \\\"shared\\\", or \\\"default\\\"\")\n  ENDIF()\n\n  TARGET_LINK_LIBRARIES(allocator PRIVATE xnnpack-base logging)\n  TARGET_LINK_LIBRARIES(cache PRIVATE xnnpack-base logging)\n  TARGET_LINK_LIBRARIES(datatype PRIVATE xnnpack-base)\n  TARGET_LINK_LIBRARIES(memory PRIVATE xnnpack-base logging)\n  TARGET_LINK_LIBRARIES(microkernel-utils PRIVATE xnnpack-base logging)\n  TARGET_LINK_LIBRARIES(mutex PRIVATE xnnpack-base logging)\n  TARGET_LINK_LIBRARIES(operators PRIVATE xnnpack-base allocator indirection logging microkernel-utils normalization operator-utils packing reference-ukernels datatype)\n  TARGET_LINK_LIBRARIES(operator-run PRIVATE xnnpack-base logging)\n  TARGET_LINK_LIBRARIES(operator-utils PRIVATE xnnpack-base logging)\n  TARGET_LINK_LIBRARIES(reference-ukernels PRIVATE xnnpack-base)\n  TARGET_LINK_LIBRARIES(subgraph PRIVATE xnnpack-base allocator logging memory mutex operators operator-run datatype)\n  TARGET_LINK_LIBRARIES(XNNPACK PRIVATE xnnpack-base allocator cache hardware-config indirection memory microkernel-utils microparams-init mutex normalization operators operator-run operator-utils packing microkernels-prod subgraph datatype reference-ukernels)\n  TARGET_LINK_LIBRARIES(XNNPACK PUBLIC pthreadpool logging)\n  SET_TARGET_PROPERTIES(XNNPACK PROPERTIES C_EXTENSIONS YES)\nENDIF()\nIF(NOT MSVC)\n  SET_PROPERTY(SOURCE ${ALL_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -fno-math-errno \")\nENDIF()\nIF(XNNPACK_TARGET_PROCESSOR STREQUAL \"arm\")\n  SET_PROPERTY(SOURCE ${ALL_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -marm \")\n  SET_PROPERTY(SOURCE ${ALL_ARMSIMD32_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -march=armv6 -mfpu=vfp -munaligned-access \")\n  SET_PROPERTY(SOURCE ${ALL_NEON_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -march=armv7-a -mfpu=neon \")\n  SET_PROPERTY(SOURCE ${ALL_NEONFP16_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -march=armv7-a -mfpu=neon-fp16 \")\n  # GCC requires -mfp16-format=ieee to define __fp16 type, but Clang doesn't support this option at all.\n  IF(CMAKE_C_COMPILER_ID STREQUAL \"GNU\")\n    SET_PROPERTY(SOURCE ${ALL_NEONFP16_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -mfp16-format=ieee \")\n    SET_PROPERTY(SOURCE ${ALL_FP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -mfp16-format=ieee \")\n    SET_PROPERTY(SOURCE ${ALL_NEONDOTFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -mfp16-format=ieee \")\n    SET_PROPERTY(SOURCE ${ALL_NEONFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -mfp16-format=ieee \")\n  ENDIF()\n  SET_PROPERTY(SOURCE ${ALL_NEONFMA_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -march=armv7-a -mfpu=neon-vfpv4 \")\n  SET_PROPERTY(SOURCE ${ALL_NEONV8_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -march=armv8-a -mfpu=neon-fp-armv8 \")\n  # -mfpu=fp-armv8 should suffice for FP16ARITH microkernels, if not for GCC emitting wrong directives for assembler\n  # -fno-math-errno for the vsqrth_f16 polyfill using sqrtf\n  # -ffinite-math-only for the vminnmh_f16/vmaxnmh_f16 polyfills using compare + select\n  SET_PROPERTY(SOURCE ${ALL_FP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -march=armv8.2-a+fp16 -mfpu=neon-fp-armv8 -fno-math-errno -ffinite-math-only \")\n  SET_PROPERTY(SOURCE ${ALL_NEONDOTFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -march=armv8.2-a+dotprod+fp16 -mfpu=neon-fp-armv8 -fno-math-errno -ffinite-math-only \")\n  SET_PROPERTY(SOURCE ${ALL_NEONFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -march=armv8.2-a+fp16 -mfpu=neon-fp-armv8 \")\n  SET_PROPERTY(SOURCE ${ALL_NEONBF16_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -march=armv8.2-a+bf16 -mfpu=neon-fp-armv8 \")\n  SET_PROPERTY(SOURCE ${ALL_NEONDOT_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -march=armv8.2-a+dotprod -mfpu=neon-fp-armv8 \")\n  SET_PROPERTY(SOURCE ${ALL_AARCH32_ASM_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -march=armv8.2-a+dotprod+fp16 -mfpu=neon-fp-armv8 \")\n  # Workground the neon detection bug in ARM v8\n  # Related links:\n  #   https://github.com/android/ndk/issues/910\n  #   https://reviews.llvm.org/D58477\n  IF(ANDROID_NDK_MAJOR AND ANDROID_NDK_MAJOR LESS 21)\n    SET_PROPERTY(SOURCE ${ALL_NEONV8_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -mfloat-abi=softfp \")\n    SET_PROPERTY(SOURCE ${ALL_FP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -mfloat-abi=softfp \")\n    SET_PROPERTY(SOURCE ${ALL_NEONDOTFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -mfloat-abi=softfp \")\n    SET_PROPERTY(SOURCE ${ALL_NEONFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -mfloat-abi=softfp \")\n    SET_PROPERTY(SOURCE ${ALL_NEONBF16_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -mfloat-abi=softfp \")\n    SET_PROPERTY(SOURCE ${ALL_NEONDOT_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -mfloat-abi=softfp \")\n    SET_PROPERTY(SOURCE ${ALL_AARCH32_ASM_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -mfloat-abi=softfp \")\n  ENDIF()\nENDIF()\nIF(XNNPACK_TARGET_PROCESSOR MATCHES \"^arm64\" AND NOT MSVC)\n  SET_PROPERTY(SOURCE ${ALL_FP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -march=armv8.2-a+fp16 \")\n  SET_PROPERTY(SOURCE ${ALL_NEONFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -march=armv8.2-a+fp16 \")\n  SET_PROPERTY(SOURCE ${ALL_NEONDOTFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -march=armv8.2-a+dotprod+fp16 \")\n  SET_PROPERTY(SOURCE ${ALL_NEONFP16ARITH_AARCH64_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -march=armv8.2-a+fp16 \")\n  SET_PROPERTY(SOURCE ${ALL_NEONBF16_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -march=armv8.2-a+bf16 \")\n  SET_PROPERTY(SOURCE ${ALL_NEONDOT_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -march=armv8.2-a+dotprod \")\n  SET_PROPERTY(SOURCE ${ALL_NEONDOT_AARCH64_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -march=armv8.2-a+dotprod \")\n  SET_PROPERTY(SOURCE ${ALL_NEONI8MM_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -march=armv8.2-a+i8mm+fp16 \")\n  SET_PROPERTY(SOURCE ${ALL_NEONSME_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -march=armv8.2-a+sve+sve2 \")\n  SET_PROPERTY(SOURCE ${ALL_NEONSME2_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -march=armv8.2-a+sve+sve2 \")\n  SET_PROPERTY(SOURCE ${ALL_AARCH64_ASM_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -march=armv8.2-a+fp16+dotprod \")\nENDIF()\nIF(XNNPACK_TARGET_PROCESSOR MATCHES \"^ppc64\")\n  IF(XNNPACK_ENABLE_VSX)\n    SET_PROPERTY(SOURCE ${ALL_PPC_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -mvsx \")\n  ENDIF()\nENDIF()\nIF(XNNPACK_TARGET_PROCESSOR MATCHES \"^riscv\")\n  IF(XNNPACK_ENABLE_RISCV_VECTOR)\n    SET_PROPERTY(SOURCE ${ALL_RVV_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -march=rv64gcv -mabi=lp64d \")\n  ENDIF()\n  SET_PROPERTY(SOURCE ${ALL_RVVFP16ARITH_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -march=rv64gc_zvfh -mabi=lp64d \")\nENDIF()\nIF(XNNPACK_TARGET_PROCESSOR MATCHES \"^x86(_64)?$\")\n  IF(MSVC)\n    IF(XNNPACK_TARGET_PROCESSOR STREQUAL \"x86\" OR CMAKE_SIZEOF_VOID_P EQUAL 4)\n      SET_PROPERTY(SOURCE ${ALL_SSE_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" /arch:SSE \")\n      SET_PROPERTY(SOURCE ${ALL_SSE2_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" /arch:SSE2 \")\n      SET_PROPERTY(SOURCE ${ALL_SSSE3_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" /arch:SSE2 \")\n      SET_PROPERTY(SOURCE ${ALL_SSE41_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" /arch:SSE2 \")\n    ENDIF()\n    SET_PROPERTY(SOURCE ${ALL_AVX_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" /arch:AVX \")\n    SET_PROPERTY(SOURCE ${ALL_F16C_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" /arch:AVX \")\n    SET_PROPERTY(SOURCE ${ALL_FMA3_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" /arch:AVX \")\n    SET_PROPERTY(SOURCE ${ALL_AVX2_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" /arch:AVX2 \")\n    SET_PROPERTY(SOURCE ${ALL_AVX512F_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" /arch:AVX512 \")\n    SET_PROPERTY(SOURCE ${ALL_AVX512SKX_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" /arch:AVX512 \")\n    SET_PROPERTY(SOURCE ${ALL_AVX512VBMI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" /arch:AVX512 \")\n    SET_PROPERTY(SOURCE ${ALL_AVX512VNNI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" /arch:AVX512 \")\n    SET_PROPERTY(SOURCE ${ALL_AVXVNNI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" /arch:AVX2 \")\n    SET_PROPERTY(SOURCE ${ALL_AVXVNNIINT8_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" /arch:AVX2 \")\n    SET_PROPERTY(SOURCE ${ALL_AVX256SKX_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" /arch:AVX512 \")\n    SET_PROPERTY(SOURCE ${ALL_AVX256VNNI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" /arch:AVX512 \")\n    SET_PROPERTY(SOURCE ${ALL_AVX256VNNIGFNI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" /arch:AVX512 \")\n    IF(CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\")\n      SET_PROPERTY(SOURCE ${ALL_SSE_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -clang:-msse -clang:-mno-sse2 \")\n      SET_PROPERTY(SOURCE ${ALL_SSE2_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -clang:-msse2 -clang:-mno-sse3 \")\n      SET_PROPERTY(SOURCE ${ALL_SSSE3_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -clang:-mssse3 -clang:-mno-sse4.1 \")\n      SET_PROPERTY(SOURCE ${ALL_SSE41_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -clang:-msse4.1 -clang:-mno-sse4.2 \")\n      SET_PROPERTY(SOURCE ${ALL_AVX_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -clang:-mavx -clang:-mno-avx2 -clang:-mno-fma -clang:-mno-f16c \")\n      SET_PROPERTY(SOURCE ${ALL_F16C_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -clang:-mf16c -clang:-mno-avx2 -clang:-mno-fma \")\n      SET_PROPERTY(SOURCE ${ALL_FMA3_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -clang:-mf16c -clang:-mfma -clang:-mno-avx2 \")\n      SET_PROPERTY(SOURCE ${ALL_AVX2_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -clang:-mf16c -clang:-mfma -clang:-mavx2 \")\n      SET_PROPERTY(SOURCE ${ALL_AVXVNNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS \" -clang:-mf16c -clang:-mfma -clang:-mavx2 -clang:-mavxvnni \")\n      SET_PROPERTY(SOURCE ${ALL_AVXVNNIINT8_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS \" -clang:-mf16c -clang:-mfma -clang:-mavx2 -clang:-mavxvnniint8 \")\n      SET_PROPERTY(SOURCE ${ALL_AVX256SKX_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS \" -clang:-mf16c -clang:-mfma -clang:-mavx512f -clang:-mavx512cd -clang:-mavx512bw -clang:-mavx512dq -clang:-mavx512vl \")\n      SET_PROPERTY(SOURCE ${ALL_AVX256VNNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS \" -clang:-mf16c -clang:-mfma -clang:-mavx512f -clang:-mavx512cd -clang:-mavx512bw -clang:-mavx512dq -clang:-mavx512vl -clang:-mavx512vnni \")\n      SET_PROPERTY(SOURCE ${ALL_AVX256VNNIGFNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS \" -clang:-mf16c -clang:-mfma -clang:-mavx512f -clang:-mavx512cd -clang:-mavx512bw -clang:-mavx512dq -clang:-mavx512vl -clang:-mavx512vnni -clang:-mgfni \")\n      SET_PROPERTY(SOURCE ${ALL_AVX512F_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -clang:-mavx512f \")\n      SET_PROPERTY(SOURCE ${ALL_AVX512SKX_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS \" -clang:-mf16c -clang:-mfma -clang:-mavx512f -clang:-mavx512cd -clang:-mavx512bw -clang:-mavx512dq -clang:-mavx512vl \")\n      SET_PROPERTY(SOURCE ${ALL_AVX512VBMI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS \" -clang:-mf16c -clang:-mfma -clang:-mavx512f -clang:-mavx512cd -clang:-mavx512bw -clang:-mavx512dq -clang:-mavx512vl -clang:-mavx512vbmi \")\n      SET_PROPERTY(SOURCE ${ALL_AVX512VNNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS \" -clang:-mf16c -clang:-mfma -clang:-mavx512f -clang:-mavx512cd -clang:-mavx512bw -clang:-mavx512dq -clang:-mavx512vl -clang:-mavx512vnni \")\n      SET_PROPERTY(SOURCE ${ALL_AVX512VNNIGFNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS \" -clang:-mf16c -clang:-mfma -clang:-mavx512f -clang:-mavx512cd -clang:-mavx512bw -clang:-mavx512dq -clang:-mavx512vl -clang:-mavx512vnni -clang:-mgfni \")\n      SET_PROPERTY(SOURCE ${ALL_AVX512FP16_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS \" -clang:-mf16c -clang:-mfma -clang:-mavx512f -clang:-mavx512cd -clang:-mavx512bw -clang:-mavx512dq -clang:-mavx512vl -clang:-mavx512vnni -clang:-mgfni -clang:-mavx512fp16 \")\n      SET_PROPERTY(SOURCE ${ALL_AVX512AMX_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS \" -clang:-mf16c -clang:-mfma -clang:-mavx512f -clang:-mavx512cd -clang:-mavx512bw -clang:-mavx512dq -clang:-mavx512vl -clang:-mavx512vnni -clang:-mgfni -clang:-mamx-tile -clang:-mamx-int8 \")\n    ENDIF()\n  ELSE()\n    SET_PROPERTY(SOURCE ${ALL_SSE_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -msse -mno-sse2 \")\n    SET_PROPERTY(SOURCE ${ALL_SSE2_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -msse2 -mno-sse3 \")\n    SET_PROPERTY(SOURCE ${ALL_SSSE3_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -mssse3 -mno-sse4.1 \")\n    SET_PROPERTY(SOURCE ${ALL_SSE41_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -msse4.1 -mno-sse4.2 \")\n    SET_PROPERTY(SOURCE ${ALL_AVX_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -mavx -mno-avx2 -mno-fma -mno-f16c \")\n    SET_PROPERTY(SOURCE ${ALL_F16C_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -mf16c -mno-avx2 -mno-fma \")\n    SET_PROPERTY(SOURCE ${ALL_FMA3_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -mf16c -mfma -mno-avx2 \")\n    SET_PROPERTY(SOURCE ${ALL_AVX2_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -mf16c -mfma -mavx2 \")\n    SET_PROPERTY(SOURCE ${ALL_AVXVNNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS \" -mf16c -mfma -mavx2 -mavxvnni \")\n    SET_PROPERTY(SOURCE ${ALL_AVXVNNIINT8_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS \" -mf16c -mfma -mavx2 -mavxvnniint8 \")\n    SET_PROPERTY(SOURCE ${ALL_AVX256SKX_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS \" -mf16c -mfma -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl \")\n    SET_PROPERTY(SOURCE ${ALL_AVX256VNNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS \" -mf16c -mfma -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl -mavx512vnni \")\n    SET_PROPERTY(SOURCE ${ALL_AVX256VNNIGFNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS \" -mf16c -mfma -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl -mavx512vnni -mgfni \")\n    SET_PROPERTY(SOURCE ${ALL_AVX512F_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -mavx512f \")\n    SET_PROPERTY(SOURCE ${ALL_AVX512SKX_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS \" -mf16c -mfma -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl \")\n    SET_PROPERTY(SOURCE ${ALL_AVX512VBMI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS \" -mf16c -mfma -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl -mavx512vbmi \")\n    SET_PROPERTY(SOURCE ${ALL_AVX512VNNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS \" -mf16c -mfma -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl -mavx512vnni \")\n    SET_PROPERTY(SOURCE ${ALL_AVX512VNNIGFNI_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS \" -mf16c -mfma -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl -mavx512vnni -mgfni \")\n    SET_PROPERTY(SOURCE ${ALL_AVX512FP16_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS \" -mf16c -mfma -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl -mavx512vnni -mgfni -mavx512fp16 \")\n    SET_PROPERTY(SOURCE ${ALL_AVX512AMX_MICROKERNEL_SRCS} APPEND_STRIDE PROPERTY COMPILE_FLAGS \" -mf16c -mfma -mavx512f -mavx512cd -mavx512bw -mavx512dq -mavx512vl -mavx512vnni -mgfni -mamx-tile -mamx-int8 \")\n    IF(MINGW OR CMAKE_SYSTEM_NAME MATCHES \"^(CYGWIN|MSYS)$\")\n      # Work-around for https://gcc.gnu.org/bugzilla/show_bug.cgi?id=65782\n      SET_PROPERTY(SOURCE ${ALL_AVX512F_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -fno-asynchronous-unwind-tables \")\n      SET_PROPERTY(SOURCE ${ALL_AVX512SKX_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -fno-asynchronous-unwind-tables \")\n      SET_PROPERTY(SOURCE ${ALL_AVX512VBMI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -fno-asynchronous-unwind-tables \")\n      SET_PROPERTY(SOURCE ${ALL_AVX512VNNI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -fno-asynchronous-unwind-tables \")\n      SET_PROPERTY(SOURCE ${ALL_AVXVNNI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -fno-asynchronous-unwind-tables \")\n      SET_PROPERTY(SOURCE ${ALL_AVXVNNIINT8_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -fno-asynchronous-unwind-tables \")\n      SET_PROPERTY(SOURCE ${ALL_AVX256SKX_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -fno-asynchronous-unwind-tables \")\n      SET_PROPERTY(SOURCE ${ALL_AVX256VNNI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -fno-asynchronous-unwind-tables \")\n      SET_PROPERTY(SOURCE ${ALL_AVX256VNNIGFNI_MICROKERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS \" -fno-asynchronous-unwind-tables \")\n    ENDIF()\n  ENDIF()\nENDIF()\n\n# Set `XNN_LOG_LEVEL` transitively for all targets that depend on `logging`.\nTARGET_COMPILE_DEFINITIONS(logging PUBLIC \"XNN_LOG_LEVEL=$<$<CONFIG:Debug>:5>$<$<NOT:$<CONFIG:Debug>>:0>\")\n\nIF(MSVC)\n  # Even though MSVC has __restrict, it can't be used in all the same contexts as the C99 restrict keyword\n  TARGET_COMPILE_DEFINITIONS(xnnpack-base INTERFACE \"restrict=\")\n\n  IF(XNNPACK_BUILD_ALL_MICROKERNELS)\n    TARGET_COMPILE_OPTIONS(microkernels-all PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:/O2>\")\n  ENDIF()\n  TARGET_COMPILE_OPTIONS(microkernels-prod PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:/O2>\")\n  TARGET_COMPILE_OPTIONS(hardware-config PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:/O2>\")\n  TARGET_COMPILE_OPTIONS(indirection PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:/O2>\")\n  TARGET_COMPILE_OPTIONS(microparams-init PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:/O2>\")\n  TARGET_COMPILE_OPTIONS(normalization PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:/O1>\")\n  TARGET_COMPILE_OPTIONS(packing PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:/O2>\")\n  IF(XNNPACK_BUILD_LIBRARY)\n    TARGET_COMPILE_OPTIONS(microkernel-utils PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:/O2>\")\n    TARGET_COMPILE_OPTIONS(operator-run PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:/O2>\")\n    TARGET_COMPILE_OPTIONS(operator-utils PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:/O2>\")\n    TARGET_COMPILE_OPTIONS(cache PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:/O1>\")\n    TARGET_COMPILE_OPTIONS(mutex PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:/O1>\")\n    TARGET_COMPILE_OPTIONS(subgraph PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:/O1>\")\n    TARGET_COMPILE_OPTIONS(operators PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:/O1>\")\n    TARGET_COMPILE_OPTIONS(XNNPACK PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:/O1>\")\n  ENDIF()\nELSE()\n  TARGET_COMPILE_OPTIONS(xnnpack-base INTERFACE \"$<$<NOT:$<CONFIG:Debug>>:-O2>\")\n  IF(XNNPACK_BUILD_ALL_MICROKERNELS)\n    TARGET_COMPILE_OPTIONS(microkernels-all PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O2>\")\n  ENDIF()\n  TARGET_COMPILE_OPTIONS(microkernels-prod PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O2>\")\n  TARGET_COMPILE_OPTIONS(hardware-config PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O2>\")\n  TARGET_COMPILE_OPTIONS(indirection PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O2>\")\n  TARGET_COMPILE_OPTIONS(microparams-init PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O2>\")\n  TARGET_COMPILE_OPTIONS(normalization PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-Os>\")\n  TARGET_COMPILE_OPTIONS(packing PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O2>\")\n  IF(XNNPACK_BUILD_LIBRARY)\n    TARGET_COMPILE_OPTIONS(microkernel-utils PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O2>\")\n    TARGET_COMPILE_OPTIONS(operator-run PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O2>\")\n    TARGET_COMPILE_OPTIONS(operator-utils PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O2>\")\n    TARGET_COMPILE_OPTIONS(cache PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-Os>\")\n    TARGET_COMPILE_OPTIONS(mutex PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-Os>\")\n    TARGET_COMPILE_OPTIONS(subgraph PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-Os>\")\n    TARGET_COMPILE_OPTIONS(operators PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-Os>\")\n    TARGET_COMPILE_OPTIONS(XNNPACK PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-Os>\")\n  ENDIF()\nENDIF()\n\nIF(XNNPACK_BUILD_ALL_MICROKERNELS)\n  TARGET_INCLUDE_DIRECTORIES(microkernels-all PRIVATE include src)\nENDIF()\nTARGET_INCLUDE_DIRECTORIES(datatype PRIVATE include src)\nTARGET_INCLUDE_DIRECTORIES(microkernels-prod PRIVATE include src)\nTARGET_INCLUDE_DIRECTORIES(hardware-config PRIVATE include src ${CPUINFO_SOURCE_DIR}/include)\nTARGET_INCLUDE_DIRECTORIES(indirection PRIVATE include src)\nTARGET_INCLUDE_DIRECTORIES(microparams-init PRIVATE include src)\nTARGET_INCLUDE_DIRECTORIES(normalization PRIVATE include src)\nTARGET_INCLUDE_DIRECTORIES(packing PRIVATE include src)\nTARGET_INCLUDE_DIRECTORIES(logging PRIVATE include src)\nIF(XNNPACK_BUILD_LIBRARY)\n  TARGET_INCLUDE_DIRECTORIES(XNNPACK PUBLIC include)\n  TARGET_INCLUDE_DIRECTORIES(XNNPACK PRIVATE src)\n  TARGET_INCLUDE_DIRECTORIES(allocator PRIVATE include src)\n  TARGET_INCLUDE_DIRECTORIES(cache PRIVATE include src)\n  TARGET_INCLUDE_DIRECTORIES(microkernel-utils PRIVATE include src)\n  TARGET_INCLUDE_DIRECTORIES(subgraph PRIVATE include src)\n  TARGET_INCLUDE_DIRECTORIES(operators PRIVATE include src)\n  TARGET_INCLUDE_DIRECTORIES(operator-run PRIVATE include src)\n  TARGET_INCLUDE_DIRECTORIES(operator-utils PRIVATE include src)\n  TARGET_INCLUDE_DIRECTORIES(reference-ukernels PRIVATE include src)\n  TARGET_INCLUDE_DIRECTORIES(memory PRIVATE include src)\n  TARGET_INCLUDE_DIRECTORIES(mutex PRIVATE include src)\n  IF(WIN32)\n    # Target Windows 7+ API\n    TARGET_COMPILE_DEFINITIONS(XNNPACK PRIVATE _WIN32_WINNT=0x0601)\n    TARGET_COMPILE_DEFINITIONS(mutex PRIVATE _WIN32_WINNT=0x0601)\n  ENDIF()\n  SET_PROPERTY(TARGET XNNPACK PROPERTY PUBLIC_HEADER include/xnnpack.h include/experiments-config.h)\nENDIF()\n\n# ---[ Find libm\nIF(XNNPACK_BUILD_WITH_LIBM)\n  FIND_LIBRARY(LIBM m)\n  IF(LIBM)\n    IF(XNNPACK_BUILD_ALL_MICROKERNELS)\n      TARGET_LINK_LIBRARIES(microkernels-all PRIVATE ${LIBM})\n    ENDIF()\n    TARGET_LINK_LIBRARIES(microkernels-prod PRIVATE ${LIBM})\n    TARGET_LINK_LIBRARIES(hardware-config PRIVATE ${LIBM})\n    TARGET_LINK_LIBRARIES(indirection PRIVATE ${LIBM})\n    TARGET_LINK_LIBRARIES(subgraph PRIVATE ${LIBM})\n    IF(XNNPACK_BUILD_LIBRARY)\n      TARGET_LINK_LIBRARIES(XNNPACK PRIVATE ${LIBM})\n    ENDIF()\n  ENDIF()\nENDIF()\n\n# ---[ Configure cpuinfo\nIF(NOT TARGET cpuinfo)\n  IF(NOT XNNPACK_USE_SYSTEM_LIBS)\n    SET(CPUINFO_BUILD_TOOLS OFF CACHE BOOL \"\")\n    SET(CPUINFO_BUILD_UNIT_TESTS OFF CACHE BOOL \"\")\n    SET(CPUINFO_BUILD_MOCK_TESTS OFF CACHE BOOL \"\")\n    SET(CPUINFO_BUILD_BENCHMARKS OFF CACHE BOOL \"\")\n    ADD_SUBDIRECTORY(\n      \"${CPUINFO_SOURCE_DIR}\"\n      \"${CMAKE_BINARY_DIR}/cpuinfo\")\n  ELSE()\n    ADD_LIBRARY(cpuinfo SHARED IMPORTED)\n    FIND_LIBRARY(CPUINFO_LIBRARY cpuinfo PATHS \"${CPUINFO_SOURCE_DIR}/lib\")\n    IF(NOT CPUINFO_LIBRARY)\n      MESSAGE(FATAL_ERROR \"Cannot find cpuinfo\")\n    ENDIF()\n    TARGET_INCLUDE_DIRECTORIES(cpuinfo INTERFACE \"${CPUINFO_SOURCE_DIR}/include\")\n    SET_PROPERTY(TARGET cpuinfo PROPERTY IMPORTED_LOCATION \"${CPUINFO_LIBRARY}\")\n    SET_PROPERTY(TARGET cpuinfo PROPERTY IMPORTED_IMPLIB \"${CPUINFO_LIBRARY}\")\n  ENDIF()\nENDIF()\nIF(XNNPACK_BUILD_LIBRARY)\n  TARGET_LINK_LIBRARIES(hardware-config PRIVATE cpuinfo)\n  TARGET_LINK_LIBRARIES(XNNPACK PRIVATE cpuinfo)\nENDIF()\n\n# ---[ Configure pthreadpool\nIF(NOT TARGET pthreadpool)\n  IF(NOT XNNPACK_USE_SYSTEM_LIBS)\n    SET(PTHREADPOOL_BUILD_TESTS OFF CACHE BOOL \"\")\n    SET(PTHREADPOOL_BUILD_BENCHMARKS OFF CACHE BOOL \"\")\n    SET(PTHREADPOOL_ALLOW_DEPRECATED_API OFF CACHE BOOL \"\")\n    ADD_SUBDIRECTORY(\n      \"${PTHREADPOOL_SOURCE_DIR}\"\n      \"${CMAKE_BINARY_DIR}/pthreadpool\")\n  ELSE()\n    ADD_LIBRARY(pthreadpool SHARED IMPORTED)\n    FIND_LIBRARY(PTHREADPOOL_LIBRARY pthreadpool PATHS \"${PTHREADPOOL_SOURCE_DIR}/lib\")\n    IF(NOT PTHREADPOOL_LIBRARY)\n      MESSAGE(FATAL_ERROR \"Cannot find pthreadpool\")\n    ENDIF()\n    FIND_PACKAGE(Threads REQUIRED)\n    TARGET_INCLUDE_DIRECTORIES(pthreadpool INTERFACE \"${PTHREADPOOL_SOURCE_DIR}/include\")\n    TARGET_LINK_LIBRARIES(pthreadpool INTERFACE Threads::Threads)\n    SET_PROPERTY(TARGET pthreadpool PROPERTY IMPORTED_LOCATION \"${PTHREADPOOL_LIBRARY}\")\n    SET_PROPERTY(TARGET pthreadpool PROPERTY IMPORTED_IMPLIB \"${PTHREADPOOL_LIBRARY}\")\n  ENDIF()\nENDIF()\nTARGET_LINK_LIBRARIES(xnnpack-base INTERFACE pthreadpool)\n\n# ---[ Configure FXdiv\nIF(NOT TARGET fxdiv)\n  IF(NOT XNNPACK_USE_SYSTEM_LIBS)\n    SET(FXDIV_BUILD_TESTS OFF CACHE BOOL \"\")\n    SET(FXDIV_BUILD_BENCHMARKS OFF CACHE BOOL \"\")\n    ADD_SUBDIRECTORY(\n      \"${FXDIV_SOURCE_DIR}\"\n      \"${CMAKE_BINARY_DIR}/FXdiv\")\n  ELSE()\n    FIND_FILE(FXDIV_HDR fxdiv.h PATH_SUFFIXES include PATHS \"${FXDIV_SOURCE_DIR}\")\n    IF(NOT FXDIV_HDR)\n      MESSAGE(FATAL_ERROR \"Cannot find fxdiv\")\n    ENDIF()\n    ADD_LIBRARY(fxdiv STATIC \"${FXDIV_HDR}\")\n    TARGET_INCLUDE_DIRECTORIES(fxdiv INTERFACE \"${FXDIV_SOURCE_DIR}/include\")\n    SET_PROPERTY(TARGET fxdiv PROPERTY LINKER_LANGUAGE C)\n  ENDIF()\nENDIF()\nIF(XNNPACK_BUILD_ALL_MICROKERNELS)\n  TARGET_LINK_LIBRARIES(microkernels-all PRIVATE fxdiv)\nENDIF()\nTARGET_LINK_LIBRARIES(microkernels-prod PRIVATE fxdiv)\nTARGET_LINK_LIBRARIES(indirection PRIVATE fxdiv)\nIF(XNNPACK_BUILD_LIBRARY)\n  TARGET_LINK_LIBRARIES(XNNPACK PRIVATE fxdiv)\nENDIF()\n\nIF(XNNPACK_BUILD_LIBRARY)\n  INSTALL(TARGETS XNNPACK microkernels-prod\n      LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n      PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})\nENDIF()\n\n# ---[ Configure KleidiAI\nIF(XNNPACK_ENABLE_KLEIDIAI)\n  IF(NOT TARGET kleidiai)\n    IF(NOT XNNPACK_USE_SYSTEM_LIBS)\n      SET(KLEIDIAI_BUILD_TESTS OFF CACHE BOOL \"\")\n      ADD_SUBDIRECTORY(\n        \"${KLEIDIAI_SOURCE_DIR}\"\n        \"${CMAKE_BINARY_DIR}/kleidiai\")\n    ELSE()\n      ADD_LIBRARY(kleidiai SHARED IMPORTED)\n      FIND_LIBRARY(KLEIDIAI_LIBRARY kleidiai PATHS \"${KLEIDIAI_SOURCE_DIR}/lib\")\n      IF(NOT KLEIDIAI_LIBRARY)\n        MESSAGE(FATAL_ERROR \"Cannot find KleidiAI\")\n      ENDIF()\n      TARGET_INCLUDE_DIRECTORIES(kleidiai INTERFACE \"${KLEIDIAI_SOURCE_DIR}\")\n      SET_PROPERTY(TARGET kleidiai PROPERTY IMPORTED_LOCATION \"${KLEIDIAI_LIBRARY}\")\n      SET_PROPERTY(TARGET kleidiai PROPERTY IMPORTED_IMPLIB \"${KLEIDIAI_LIBRARY}\")\n    ENDIF()\n  ENDIF()\n  TARGET_LINK_LIBRARIES(xnnpack-base INTERFACE kleidiai)\nENDIF()\n\n# ---[ XNNPACK unit tests\nIF(XNNPACK_BUILD_TESTS)\n  # ---[ Macro to shard a test.\n  MACRO(ADD_SHARDED_TEST TEST_NAME NUM_SHARDS)\n    math(EXPR NUM_SHARDS_MINUS_ONE \"${NUM_SHARDS} - 1\")\n    FOREACH(SHARD RANGE 0 ${NUM_SHARDS_MINUS_ONE})\n      ADD_TEST(NAME ${TEST_NAME}-${SHARD} COMMAND ${TEST_NAME})\n      SET_PROPERTY(\n          TEST ${TEST_NAME}-${SHARD}\n            APPEND\n            PROPERTY ENVIRONMENT \"GTEST_TOTAL_SHARDS=${NUM_SHARDS};\"\n                    \"GTEST_SHARD_INDEX=${SHARD}\")\n    ENDFOREACH()\n  ENDMACRO()\n\n  # ---[ Build google test\n  IF(NOT TARGET gtest)\n    IF(XNNPACK_USE_SYSTEM_LIBS)\n      FIND_PACKAGE(GTest REQUIRED)\n    ELSE()\n      SET(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n      ADD_SUBDIRECTORY(\n        \"${GOOGLETEST_SOURCE_DIR}\"\n        \"${CMAKE_BINARY_DIR}/googletest\")\n    ENDIF()\n  ENDIF()\n\n  # Helper libraries\n  ADD_LIBRARY(next-prime STATIC test/next_prime.cc)\n  ADD_LIBRARY(runtime-flags STATIC test/runtime-flags.cc)\n  TARGET_LINK_LIBRARIES(runtime-flags PRIVATE GTest::gtest)\n\n  ADD_LIBRARY(gemm-microkernel-tester STATIC test/gemm-microkernel-tester.cc)\n  TARGET_INCLUDE_DIRECTORIES(gemm-microkernel-tester PRIVATE include src test)\n  TARGET_LINK_LIBRARIES(gemm-microkernel-tester PRIVATE xnnpack-base pthreadpool GTest::gtest)\n  TARGET_LINK_LIBRARIES(gemm-microkernel-tester PRIVATE packing)\n  IF(XNNPACK_ENABLE_KLEIDIAI)\n    TARGET_LINK_LIBRARIES(gemm-microkernel-tester PRIVATE kleidiai)\n  ENDIF()\n  TARGET_LINK_LIBRARIES(gemm-microkernel-tester PUBLIC next-prime)\n\n  ADD_LIBRARY(dwconv-microkernel-tester STATIC test/dwconv-microkernel-tester.cc)\n  TARGET_INCLUDE_DIRECTORIES(dwconv-microkernel-tester PRIVATE include src test)\n  TARGET_LINK_LIBRARIES(dwconv-microkernel-tester PRIVATE XNNPACK pthreadpool GTest::gtest)\n  TARGET_LINK_LIBRARIES(dwconv-microkernel-tester PUBLIC next-prime)\n\n  ADD_LIBRARY(vbinary-microkernel-tester STATIC test/vbinary-microkernel-tester.cc)\n  SET_TARGET_PROPERTIES(vbinary-microkernel-tester PROPERTIES CXX_EXTENSIONS YES)\n  TARGET_INCLUDE_DIRECTORIES(vbinary-microkernel-tester PRIVATE include src test)\n  TARGET_LINK_LIBRARIES(vbinary-microkernel-tester PRIVATE XNNPACK pthreadpool GTest::gtest)\n\n  ADD_LIBRARY(unary-ops STATIC test/unary-ops.cc)\n  TARGET_INCLUDE_DIRECTORIES(unary-ops PRIVATE include src test)\n  TARGET_LINK_LIBRARIES(unary-ops PRIVATE XNNPACK)\n\n  ADD_LIBRARY(convolution-test-helpers OBJECT test/convolution-test-helpers.cc)\n  TARGET_INCLUDE_DIRECTORIES(convolution-test-helpers PRIVATE include src)\n  TARGET_LINK_LIBRARIES(convolution-test-helpers PRIVATE xnnpack-base)\n\n  ADD_LIBRARY(packq-microkernel-tester STATIC test/packq-microkernel-tester.cc)\n  TARGET_INCLUDE_DIRECTORIES(packq-microkernel-tester PRIVATE include src test)\n  TARGET_LINK_LIBRARIES(packq-microkernel-tester PRIVATE XNNPACK pthreadpool  GTest::gtest)\n  IF(XNNPACK_ENABLE_KLEIDIAI)\n    TARGET_LINK_LIBRARIES(packq-microkernel-tester PRIVATE kleidiai)\n  ENDIF()\n\n  # ---[ Launch heavy tests first.\n  # Tests added to this list will be automatically removed from other lists.\n  SET(SHARDED_TESTS\n    fully-connected-nc\n    avgpool-minmax\n    maxpool-minmax)\n  IF(XNNPACK_TARGET_PROCESSOR MATCHES \"^riscv\")\n    LIST(APPEND SHARDED_TESTS\n      f16-qs8-vcvt\n      f16-qu8-vcvt\n      f32-argmaxpool\n      f32-qs8-vcvt\n      f32-qu8-vcvt\n      f32-rdsum\n      f32-vclamp\n      f32-velu\n      f32-vlrelu\n      qs8-f32-vcvt\n      qs8-vcvt\n      qs8-vlrelu\n      qu8-f32-vcvt\n      qu8-vcvt\n      qu8-vlrelu\n      s8-vclamp\n      u8-vclamp)\n  ENDIF()\n  FOREACH(TEST ${SHARDED_TESTS})\n    ADD_EXECUTABLE(${TEST}-test test/${TEST}.cc)\n    TARGET_INCLUDE_DIRECTORIES(${TEST}-test PRIVATE include src test)\n    TARGET_LINK_LIBRARIES(${TEST}-test PRIVATE\n      GTest::gtest\n      GTest::gtest_main\n      hardware-config\n      logging\n      microkernels-all\n      microparams-init\n      next-prime\n      pthreadpool\n      runtime-flags\n      XNNPACK)\n    ADD_SHARDED_TEST(${TEST}-test 10)\n  ENDFOREACH()\n\n  IF(XNNPACK_BUILD_LIBRARY)\n    # ---[ Launch heavy tests first.\n    # Tests added to this list will be automatically removed from other lists.\n    SET(LIBRARY_SHARDED_TESTS\n      batch-matrix-multiply-nc\n      batch-matrix-multiply\n      deconvolution-nhwc\n      fully-connected\n      scaled-dot-product-attention\n      binary-elementwise-nd\n    )\n    FOREACH(TEST ${LIBRARY_SHARDED_TESTS})\n      ADD_EXECUTABLE(${TEST}-test test/${TEST}.cc)\n      TARGET_INCLUDE_DIRECTORIES(${TEST}-test PRIVATE src test)\n      TARGET_LINK_LIBRARIES(${TEST}-test PRIVATE\n        GTest::gmock\n        GTest::gtest\n        GTest::gtest_main\n        runtime-flags\n        XNNPACK)\n      ADD_SHARDED_TEST(${TEST}-test 10)\n    ENDFOREACH()\n\n    # ---[ Build size tests\n    ADD_EXECUTABLE(subgraph-size-test test/subgraph-size.c)\n    TARGET_LINK_LIBRARIES(subgraph-size-test PRIVATE XNNPACK)\n\n    # ---[ Build operator-level unit tests\n    ADD_EXECUTABLE(unary-elementwise-nc-test test/unary-elementwise-nc.cc)\n    TARGET_INCLUDE_DIRECTORIES(unary-elementwise-nc-test PRIVATE src test)\n    TARGET_LINK_LIBRARIES(unary-elementwise-nc-test PRIVATE\n      GTest::gtest\n      GTest::gtest_main\n      datatype\n      runtime-flags\n      unary-ops\n      XNNPACK)\n    ADD_TEST(NAME unary-elementwise-nc-test COMMAND unary-elementwise-nc-test)\n\n    # ---[ Build subgraph optimizations unit tests\n    SET(LIBRARY_SUBGRAPH_OPTIMIZATION_TESTS\n        fusion\n        memory-planner\n        subgraph-fp16\n        subgraph\n        runtime\n        subgraph-nchw\n        workspace)\n    LIST(REMOVE_ITEM LIBRARY_SUBGRAPH_OPTIMIZATION_TESTS ${LIBRARY_SHARDED_TESTS})\n    FOREACH(TEST ${LIBRARY_SUBGRAPH_OPTIMIZATION_TESTS})\n      ADD_EXECUTABLE(${TEST}-test test/${TEST}.cc)\n      TARGET_INCLUDE_DIRECTORIES(${TEST}-test PRIVATE src test)\n      TARGET_LINK_LIBRARIES(${TEST}-test PRIVATE\n        GTest::gmock\n        GTest::gtest\n        GTest::gtest_main\n        runtime-flags\n        XNNPACK)\n      ADD_TEST(NAME ${TEST}-test COMMAND ${TEST}-test)\n    ENDFOREACH()\n\n    # ---[ Build subgraph-level unit tests\n    SET(LIBRARY_SUBGRAPH_UNIT_TESTS\n        argmax-pooling-2d\n        average-pooling-2d\n        average-pooling-2d-reshape\n        binary\n        concatenate2\n        concatenate3\n        concatenate4\n        concatenate5\n        copy\n        depth-to-space-2d\n        even-split2\n        even-split3\n        even-split4\n        global-average-pooling-1d\n        global-average-pooling-2d\n        global-sum-pooling-1d\n        global-sum-pooling-2d\n        max-pooling-2d\n        reshape-helpers\n        static-slice\n        softmax\n        space-to-depth-2d\n        static-constant-pad\n        static-reduce\n        static-reshape\n        static-resize-bilinear-2d\n        static-transpose\n        transpose-reshape\n        unary\n        unpooling-2d)\n    LIST(REMOVE_ITEM LIBRARY_SUBGRAPH_UNIT_TESTS ${LIBRARY_SHARDED_TESTS})\n    FOREACH(TEST ${LIBRARY_SUBGRAPH_UNIT_TESTS})\n      ADD_EXECUTABLE(${TEST}-test test/${TEST}.cc)\n      TARGET_INCLUDE_DIRECTORIES(${TEST}-test PRIVATE src test)\n      TARGET_LINK_LIBRARIES(${TEST}-test PRIVATE\n        GTest::gmock\n        GTest::gtest\n        GTest::gtest_main\n        datatype\n        subgraph\n        logging\n        runtime-flags\n        unary-ops\n        XNNPACK)\n      ADD_TEST(NAME ${TEST}-test COMMAND ${TEST}-test)\n      SET_TARGET_PROPERTIES(${TEST}-test PROPERTIES CXX_EXTENSIONS YES)\n    ENDFOREACH()\n\n    SET(LIBRARY_SUBGRAPH_CONVOLUTION_UNIT_TESTS\n        convolution-2d\n        deconvolution-2d\n        depthwise-convolution-2d)\n    LIST(REMOVE_ITEM LIBRARY_SUBGRAPH_CONVOLUTION_UNIT_TESTS ${LIBRARY_SHARDED_TESTS})\n    FOREACH(TEST ${LIBRARY_SUBGRAPH_CONVOLUTION_UNIT_TESTS})\n      ADD_EXECUTABLE(${TEST}-test test/${TEST}.cc)\n      TARGET_INCLUDE_DIRECTORIES(${TEST}-test PRIVATE src test)\n      TARGET_LINK_LIBRARIES(${TEST}-test PRIVATE\n        convolution-test-helpers\n        GTest::gmock\n        GTest::gtest\n        GTest::gtest_main\n        runtime-flags\n        subgraph\n        XNNPACK)\n      ADD_TEST(NAME ${TEST}-test COMMAND ${TEST}-test)\n      SET_TARGET_PROPERTIES(${TEST}-test PROPERTIES CXX_EXTENSIONS YES)\n    ENDFOREACH()\n  ENDIF()\n\n  # ---[ Normalization unit tests\n  SET(NORMALIZATION_UNIT_TESTS\n      slice-normalization\n      reduce-normalization\n      transpose-normalization)\n  FOREACH(TEST ${NORMALIZATION_UNIT_TESTS})\n    ADD_EXECUTABLE(${TEST}-test test/${TEST}.cc)\n    TARGET_INCLUDE_DIRECTORIES(${TEST}-test PRIVATE include src test)\n    TARGET_LINK_LIBRARIES(${TEST}-test PRIVATE GTest::gtest GTest::gtest_main pthreadpool normalization)\n    ADD_TEST(NAME ${TEST}-test COMMAND ${TEST}-test)\n  ENDFOREACH()\n\n  # ---[ Build microkernel-level unit tests\n  SET(MICROKERNEL_UNIT_TESTS\n      f16-conv-hwc2chw\n      f16-f32acc-rdsum\n      f16-f32acc-rsum\n      f16-ibilinear\n      f16-ibilinear-chw\n      f16-raddstoreexpminusmax\n      f16-rmax\n      f16-rsum\n      f16-spmm-minmax\n      f16-vcmul\n      f16-vmulcaddc-minmax\n      f32-argmaxpool\n      f32-conv-hwc\n      f32-conv-hwc2chw\n      f32-ibilinear\n      f32-ibilinear-chw\n      f32-raddexpminusmax\n      f32-raddextexp\n      f32-raddstoreexpminusmax\n      f32-rdsum\n      f32-rmax\n      f32-rmin\n      f32-rminmax\n      f32-rsum\n      f32-spmm-minmax\n      f32-vcmul\n      f32-vmulcaddc-minmax\n      f32-vscaleexpminusmax\n      f32-vscaleextexp\n      indirection\n      packing\n      qs8-packw\n      qs8-qc4w-packw\n      qs8-rdsum-minmax-fp32\n      qs8-rsum\n      qu8-rdsum\n      qu8-rsum\n      qu8-vlrelu\n      s8-ibilinear\n      u8-ibilinear\n      u8-lut32norm\n      u8-rmax\n      x16-packw\n      x32-packb\n      x32-packw\n      x32-packx\n      x32-unpool\n      x8-lut\n      x8-packw\n      xN-transpose\n      xx-fill\n      xx-pad)\n  LIST(REMOVE_ITEM MICROKERNEL_UNIT_TESTS ${SHARDED_TESTS})\n  FOREACH(TEST ${MICROKERNEL_UNIT_TESTS})\n    ADD_EXECUTABLE(${TEST}-test test/${TEST}.cc)\n    TARGET_INCLUDE_DIRECTORIES(${TEST}-test PRIVATE include src test)\n    TARGET_LINK_LIBRARIES(${TEST}-test PRIVATE\n        GTest::gmock\n        GTest::gtest\n        GTest::gtest_main\n        hardware-config\n        indirection\n        logging\n        microkernels-all\n        microkernel-utils\n        microparams-init\n        next-prime\n        packing\n        pthreadpool\n        XNNPACK\n    )\n    ADD_TEST(NAME ${TEST}-test COMMAND ${TEST}-test)\n    SET_TARGET_PROPERTIES(${TEST}-test PROPERTIES CXX_EXTENSIONS YES)\n  ENDFOREACH()\n\n  SET(MICROKERNEL_DWCONV_UNIT_TESTS\n      f16-dwconv-minmax-multipass\n      f16-dwconv-minmax-unipass\n      f16-dwconv2d-chw\n      f32-dwconv-minmax-multipass\n      f32-dwconv-minmax-unipass\n      f32-dwconv-multipass\n      f32-dwconv-unipass\n      f32-dwconv2d-chw\n      qs8-dwconv-minmax-multipass-fp32\n      qs8-dwconv-minmax-multipass-rndnu\n      qs8-dwconv-minmax-unipass-fp32\n      qs8-dwconv-minmax-unipass-rndnu\n      qs8-qc8w-dwconv-minmax-multipass-fp32\n      qs8-qc8w-dwconv-minmax-unipass-fp32\n      qu8-dwconv-minmax-multipass-fp32\n      qu8-dwconv-minmax-multipass-rndnu\n      qu8-dwconv-minmax-unipass-fp32\n      qu8-dwconv-minmax-unipass-rndnu)\n  LIST(REMOVE_ITEM MICROKERNEL_DWCONV_UNIT_TESTS ${SHARDED_TESTS})\n  FOREACH(TEST ${MICROKERNEL_DWCONV_UNIT_TESTS})\n    ADD_EXECUTABLE(${TEST}-test test/${TEST}.cc)\n    TARGET_INCLUDE_DIRECTORIES(${TEST}-test PRIVATE include src test)\n    TARGET_LINK_LIBRARIES(${TEST}-test PRIVATE\n        dwconv-microkernel-tester\n        GTest::gmock\n        GTest::gtest\n        GTest::gtest_main\n        hardware-config\n        logging\n        microkernels-all\n        microparams-init\n        pthreadpool\n    )\n    ADD_TEST(NAME ${TEST}-test COMMAND ${TEST}-test)\n    SET_TARGET_PROPERTIES(${TEST}-test PROPERTIES CXX_EXTENSIONS YES)\n  ENDFOREACH()\n\n  SET(MICROKERNEL_GEMM_UNIT_TESTS\n      bf16-gemm-minmax\n      f16-f32acc-gemm-minmax\n      f16-f32acc-igemm-minmax\n      f16-gemm-minmax\n      f16-igemm-minmax\n      f32-gemm\n      f32-gemm-goi-minmax\n      f32-gemm-minmax\n      f32-gemm-relu\n      f32-gemminc-minmax\n      f32-igemm\n      f32-igemm-minmax\n      f32-igemm-relu\n      f32-ppmm-minmax\n      f32-qc4w-gemm-minmax\n      f32-qc8w-gemm\n      f32-qc8w-gemm-minmax\n      f32-qc8w-gemm-relu\n      qd8-f16-qb4w-gemm-minmax\n      qd8-f16-qc4w-gemm-minmax\n      qd8-f16-qc8w-gemm-minmax\n      qd8-f32-qb4w-gemm-minmax\n      qd8-f32-qc4w-gemm-minmax\n      qd8-f32-qc8w-gemm-minmax\n      qd8-f32-qc8w-igemm-minmax\n      qp8-f32-qb4w-gemm-minmax\n      qp8-f32-qc4w-gemm-minmax\n      qp8-f32-qc8w-gemm-minmax\n      qs8-qc8w-gemm-minmax-fp32\n      qs8-qc8w-igemm-minmax-fp32\n      qu8-gemm-minmax-fp32\n      qu8-gemm-minmax-rndnu\n      qu8-igemm-minmax-fp32\n      qu8-igemm-minmax-rndnu)\n  LIST(REMOVE_ITEM MICROKERNEL_GEMM_UNIT_TESTS ${SHARDED_TESTS})\n  FOREACH(TEST ${MICROKERNEL_GEMM_UNIT_TESTS})\n    FILE(GLOB TEST_SOURCES \"test/${TEST}*.cc\")\n    IF(TEST_SOURCES)\n        ADD_EXECUTABLE(${TEST}-test ${TEST_SOURCES})\n        TARGET_INCLUDE_DIRECTORIES(${TEST}-test PRIVATE include src test)\n        TARGET_LINK_LIBRARIES(${TEST}-test PRIVATE\n            gemm-microkernel-tester\n            GTest::gmock\n            GTest::gtest\n            GTest::gtest_main\n            hardware-config\n            logging\n            microkernels-all\n            microparams-init\n            pthreadpool\n        )\n        ADD_TEST(NAME ${TEST}-test COMMAND ${TEST}-test)\n        SET_TARGET_PROPERTIES(${TEST}-test PROPERTIES CXX_EXTENSIONS YES)\n    ENDIF()\n  ENDFOREACH()\n\n  SET(MICROKERNEL_PACKQ_UNIT_TESTS\n      x8-packq)\n  LIST(REMOVE_ITEM MICROKERNEL_PACKQ_UNIT_TESTS ${SHARDED_TESTS})\n  FOREACH(TEST ${MICROKERNEL_PACKQ_UNIT_TESTS})\n    ADD_EXECUTABLE(${TEST}-test test/${TEST}.cc)\n    TARGET_INCLUDE_DIRECTORIES(${TEST}-test PRIVATE include src test)\n    TARGET_LINK_LIBRARIES(${TEST}-test PRIVATE\n        packq-microkernel-tester\n        GTest::gmock\n        GTest::gtest\n        GTest::gtest_main\n        hardware-config\n        logging\n        microkernels-all\n        microparams-init\n        pthreadpool\n    )\n    ADD_TEST(NAME ${TEST}-test COMMAND ${TEST}-test)\n    SET_TARGET_PROPERTIES(${TEST}-test PROPERTIES CXX_EXTENSIONS YES)\n  ENDFOREACH()\n\n  SET(MICROKERNEL_VBINARY_UNIT_TESTS\n      f16-vadd\n      f16-vaddc\n      f16-vdiv\n      f16-vdivc\n      f16-vmax\n      f16-vmaxc\n      f16-vmin\n      f16-vminc\n      f16-vmul\n      f16-vmulc\n      f16-vprelu\n      f16-vpreluc\n      f16-vrpreluc\n      f16-vrdivc\n      f16-vrsubc\n      f16-vsqrdiff\n      f16-vsqrdiffc\n      f16-vsub\n      f16-vsubc\n      f32-vadd\n      f32-vaddc\n      f32-vcopysign\n      f32-vcopysignc\n      f32-vdiv\n      f32-vdivc\n      f32-vmax\n      f32-vmaxc\n      f32-vmin\n      f32-vminc\n      f32-vmul\n      f32-vmulc\n      f32-vprelu\n      f32-vpreluc\n      f32-vrpreluc\n      f32-vrcopysignc\n      f32-vrdivc\n      f32-vrsubc\n      f32-vsqrdiff\n      f32-vsqrdiffc\n      f32-vsub\n      f32-vsubc\n      qs8-vadd-minmax\n      qs8-vaddc-minmax\n      qs8-vmul-minmax-fp32\n      qs8-vmulc-minmax-fp32\n      qu8-vadd-minmax\n      qu8-vaddc-minmax\n      qu8-vmul-minmax-fp32\n      qu8-vmul-minmax-rndnu\n      qu8-vmulc-minmax-fp32\n      qu8-vmulc-minmax-rndnu)\n  LIST(REMOVE_ITEM MICROKERNEL_VBINARY_UNIT_TESTS ${SHARDED_TESTS})\n  FOREACH(TEST ${MICROKERNEL_VBINARY_UNIT_TESTS})\n    ADD_EXECUTABLE(${TEST}-test test/${TEST}.cc)\n    TARGET_INCLUDE_DIRECTORIES(${TEST}-test PRIVATE include src test)\n    TARGET_LINK_LIBRARIES(${TEST}-test PRIVATE\n        vbinary-microkernel-tester\n        GTest::gmock\n        GTest::gtest\n        GTest::gtest_main\n        hardware-config\n        logging\n        microkernels-all\n        microparams-init\n        pthreadpool\n    )\n    ADD_TEST(NAME ${TEST}-test COMMAND ${TEST}-test)\n    SET_TARGET_PROPERTIES(${TEST}-test PROPERTIES CXX_EXTENSIONS YES)\n  ENDFOREACH()\n\n  SET(MICROKERNEL_VCVT_TESTS\n      f16-f32-vcvt\n      f16-qs8-vcvt\n      f16-qu8-vcvt\n      f32-f16-vcvt\n      f32-qs8-vcvt\n      f32-qu8-vcvt\n      qs8-f16-vcvt\n      qs8-f32-vcvt\n      qs8-vcvt\n      qu8-f32-vcvt\n      qu8-vcvt)\n  LIST(REMOVE_ITEM MICROKERNEL_VCVT_TESTS ${SHARDED_TESTS})\n  FOREACH(TEST ${MICROKERNEL_VCVT_TESTS})\n    ADD_EXECUTABLE(${TEST}-test test/${TEST}.cc)\n    TARGET_INCLUDE_DIRECTORIES(${TEST}-test PRIVATE include src test)\n    TARGET_LINK_LIBRARIES(${TEST}-test PRIVATE\n        GTest::gmock\n        GTest::gtest\n        GTest::gtest_main\n        hardware-config\n        logging\n        microkernels-all\n        microparams-init\n        pthreadpool\n    )\n    ADD_TEST(NAME ${TEST}-test COMMAND ${TEST}-test)\n    SET_TARGET_PROPERTIES(${TEST}-test PROPERTIES CXX_EXTENSIONS YES)\n  ENDFOREACH()\n\n  SET(MICROKERNEL_VUNARY_TESTS\n      f16-vabs\n      f16-vclamp\n      f16-velu\n      f16-vhswish\n      f16-vlrelu\n      f16-vneg\n      f16-vrndd\n      f16-vrndne\n      f16-vrndu\n      f16-vrndz\n      f16-vrsqrt\n      f16-vsigmoid\n      f16-vsqr\n      f16-vsqrt\n      f16-vtanh\n      f32-vabs\n      f32-vclamp\n      f32-velu\n      f32-vexp\n      f32-vgelu\n      f32-vhswish\n      f32-vlog\n      f32-vlrelu\n      f32-vneg\n      f32-vrelu\n      f32-vrndd\n      f32-vrndne\n      f32-vrndu\n      f32-vrndz\n      f32-vrsqrt\n      f32-vsigmoid\n      f32-vsqr\n      f32-vsqrt\n      f32-vtanh\n      qs8-vlrelu\n      s8-vclamp\n      u8-vclamp)\n  LIST(REMOVE_ITEM MICROKERNEL_VUNARY_TESTS ${SHARDED_TESTS})\n  FOREACH(TEST ${MICROKERNEL_VUNARY_TESTS})\n    ADD_EXECUTABLE(${TEST}-test test/${TEST}.cc)\n    TARGET_INCLUDE_DIRECTORIES(${TEST}-test PRIVATE include src test)\n    TARGET_LINK_LIBRARIES(${TEST}-test PRIVATE\n        GTest::gmock\n        GTest::gtest\n        GTest::gtest_main\n        hardware-config\n        logging\n        microkernels-all\n        microparams-init\n        pthreadpool\n        next-prime\n    )\n    ADD_TEST(NAME ${TEST}-test COMMAND ${TEST}-test)\n    SET_TARGET_PROPERTIES(${TEST}-test PROPERTIES CXX_EXTENSIONS YES)\n  ENDFOREACH()\n\n  # Special-case\n  IF(XNNPACK_ENABLE_KLEIDIAI)\n    TARGET_LINK_LIBRARIES(x8-packq-test PRIVATE kleidiai)\n  ENDIF()\n\n  IF(XNNPACK_BUILD_LIBRARY)\n    ADD_EXECUTABLE(weights-cache-test test/weights-cache.cc)\n    TARGET_INCLUDE_DIRECTORIES(weights-cache-test PRIVATE include src)\n    TARGET_LINK_LIBRARIES(weights-cache-test PRIVATE XNNPACK pthreadpool GTest::gtest GTest::gtest_main)\n\n    ADD_EXECUTABLE(mutex-test test/mutex.cc)\n    TARGET_INCLUDE_DIRECTORIES(mutex-test PRIVATE include src)\n    TARGET_LINK_LIBRARIES(mutex-test PRIVATE GTest::gtest GTest::gtest_main pthreadpool)\n    TARGET_LINK_LIBRARIES(mutex-test PRIVATE logging mutex)\n\n    ADD_EXECUTABLE(microkernel-utils-test test/microkernel-utils.cc)\n    TARGET_INCLUDE_DIRECTORIES(microkernel-utils-test PRIVATE include src)\n    TARGET_LINK_LIBRARIES(microkernel-utils-test PRIVATE microkernel-utils GTest::gtest GTest::gtest_main pthreadpool)\n\n    ADD_EXECUTABLE(operator-utils-test test/operator-utils.cc)\n    TARGET_INCLUDE_DIRECTORIES(operator-utils-test PRIVATE include src)\n    TARGET_LINK_LIBRARIES(operator-utils-test PRIVATE XNNPACK GTest::gtest GTest::gtest_main pthreadpool)\n  ENDIF()\n\n\n  # ---[ Mark the operator tests as such.\n  MACRO(get_all_test_targets_recursive test_targets dir)\n    GET_PROPERTY(subdirectories DIRECTORY ${dir} PROPERTY SUBDIRECTORIES)\n    FOREACH(subdir ${subdirectories})\n      get_all_test_targets_recursive(${test_targets} ${subdir})\n    ENDFOREACH()\n\n    GET_PROPERTY(current_test_targets DIRECTORY ${dir} PROPERTY TESTS)\n    LIST(APPEND ${test_targets} ${current_test_targets})\n  ENDMACRO()\n\n  FUNCTION(get_all_test_targets var)\n    SET(test_targets)\n    get_all_test_targets_recursive(test_targets ${CMAKE_CURRENT_SOURCE_DIR})\n    SET(${var} ${test_targets} PARENT_SCOPE)\n  ENDFUNCTION()\n\n  get_all_test_targets(test_targets)\n  LIST(FILTER test_targets INCLUDE REGEX \"-(nc|nd|nd-eager|ncw|nhwc|nhtc|nchw|nwc)-test(-[0-9]+)?$\")\n  MESSAGE(STATUS \"Inferred operator tests: ${test_targets}\")\n  SET_TESTS_PROPERTIES(${test_targets} PROPERTIES LABELS \"operator\")\n\nENDIF()\n\n# ---[ XNNPACK microbenchmarks\nIF(XNNPACK_BUILD_BENCHMARKS)\n  # ---[ Build google benchmark\n  IF(NOT TARGET benchmark)\n    IF(XNNPACK_USE_SYSTEM_LIBS)\n      FIND_PACKAGE(benchmark REQUIRED)\n    ELSE()\n      SET(BENCHMARK_ENABLE_TESTING OFF CACHE BOOL \"\")\n      ADD_SUBDIRECTORY(\n        \"${GOOGLEBENCHMARK_SOURCE_DIR}\"\n        \"${CONFU_DEPENDENCIES_BINARY_DIR}/googlebenchmark\")\n    ENDIF()\n  ENDIF()\n\n  ADD_LIBRARY(bench-utils STATIC bench/utils.cc)\n  TARGET_INCLUDE_DIRECTORIES(bench-utils PUBLIC include src)\n  TARGET_LINK_LIBRARIES(bench-utils PRIVATE benchmark::benchmark cpuinfo pthreadpool)\n  TARGET_LINK_LIBRARIES(bench-utils PRIVATE xnnpack-base hardware-config)\n  IF(XNNPACK_BUILD_LIBRARY)\n    TARGET_LINK_LIBRARIES(bench-utils PRIVATE logging memory)\n  ENDIF()\n\n  # Helper libraries\n  ADD_LIBRARY(packq-benchmark STATIC bench/packq-benchmark.cc)\n  TARGET_INCLUDE_DIRECTORIES(packq-benchmark PRIVATE include src bench)\n  TARGET_LINK_LIBRARIES(packq-benchmark PRIVATE XNNPACK benchmark::benchmark bench-utils)\n  IF(XNNPACK_ENABLE_KLEIDIAI)\n    TARGET_LINK_LIBRARIES(packq-benchmark PRIVATE kleidiai)\n  ENDIF()\n\n  ADD_LIBRARY(gemm-benchmark STATIC bench/gemm-benchmark.cc)\n  TARGET_INCLUDE_DIRECTORIES(gemm-benchmark PRIVATE include src bench)\n  TARGET_LINK_LIBRARIES(gemm-benchmark PRIVATE XNNPACK benchmark::benchmark bench-utils)\n  IF(XNNPACK_ENABLE_KLEIDIAI)\n    TARGET_LINK_LIBRARIES(gemm-benchmark PUBLIC kleidiai)\n  ENDIF()\n\n  ADD_LIBRARY(im2col STATIC src/im2col.c)\n  TARGET_INCLUDE_DIRECTORIES(im2col PRIVATE src)\n\n  IF(XNNPACK_BUILD_LIBRARY)\n    # ---[ Build end-to-end microbenchmarks\n    ADD_LIBRARY(models STATIC\n      bench/models/fp32-attention.cc\n      bench/models/fp32-mobilenet-v1.cc\n      bench/models/fp32-mobilenet-v2.cc\n      bench/models/fp32-mobilenet-v3-large.cc\n      bench/models/fp32-mobilenet-v3-small.cc\n      bench/models/qd8-attention.cc\n      bench/models/qs8-mobilenet-v2.cc)\n    SET_TARGET_PROPERTIES(models PROPERTIES CXX_EXTENSIONS YES)\n    TARGET_LINK_LIBRARIES(models PRIVATE XNNPACK)\n\n    ADD_EXECUTABLE(bench-models bench/models/benchmark.cc)\n    TARGET_INCLUDE_DIRECTORIES(bench-models PRIVATE bench)\n    TARGET_LINK_LIBRARIES(bench-models PRIVATE\n      bench-utils\n      benchmark::benchmark\n      models\n      XNNPACK)\n\n    # ---[ Build operator-level microbenchmarks\n    SET(LIBRARY_OPERATOR_BENCHMARKS\n        average-pooling\n        convolution\n        deconvolution\n        max-pooling\n        softmax\n        unary)\n    FOREACH(BENCH ${LIBRARY_OPERATOR_BENCHMARKS})\n      ADD_EXECUTABLE(${BENCH}-bench bench/${BENCH}.cc)\n      TARGET_LINK_LIBRARIES(${BENCH}-bench PRIVATE\n        bench-utils\n        benchmark::benchmark\n        datatype\n        XNNPACK\n      )\n    ENDFOREACH()\n  ENDIF()\n\n  # ---[ Build microkernel-level microbenchmarks\n  SET(MICROKERNEL_BENCHMARKS\n      bf16-gemm\n      f16-conv-hwc2chw\n      f16-dwconv\n      f16-dwconv2d-chw\n      f16-f32acc-gemm\n      f16-f32acc-igemm\n      f16-f32acc-rdsum\n      f16-f32acc-rsum\n      f16-gemm\n      f16-gemm-minmax\n      f16-igemm\n      f16-raddstoreexpminusmax\n      f16-rmax\n      f16-rmin\n      f16-rminmax\n      f16-rsum\n      f16-spmm\n      f32-bgemm\n      f32-conv-hwc\n      f32-conv-hwc2chw\n      f32-dwconv\n      f32-dwconv2d-chw\n      f32-gemm\n      f32-gemm-goi-minmax\n      f32-gemm-minmax\n      f32-igemm\n      f32-im2col-gemm\n      f32-qc4w-gemm\n      f32-qc8w-gemm\n      f32-raddexpminusmax\n      f32-raddextexp\n      f32-raddstoreexpminusmax\n      f32-rdsum\n      f32-rmax\n      f32-rmin\n      f32-rminmax\n      f32-rsum\n      f32-softmax\n      f32-spmm\n      f16-vcmul\n      f32-vcmul\n      f32-vscaleexpminusmax\n      f32-vscaleextexp\n      qd8-f16-qb4w-gemm\n      qd8-f16-qc4w-gemm\n      qd8-f16-qc8w-gemm\n      qd8-f32-qb4w-gemm\n      qd8-f32-qc4w-gemm\n      qd8-f32-qc8w-gemm\n      qp8-f32-qc4w-gemm\n      qp8-f32-qc8w-gemm\n      qp8-f32-qb4w-gemm\n      qs8-dwconv\n      qs8-gemm\n      qs8-qc8w-gemm-fp32\n      qu8-rdsum\n      qs8-rsum\n      qu8-rsum\n      qu8-gemm\n      qu8-gemm-fp32\n      qu8-gemm-rndnu\n      x16-packw\n      x32-packw\n      x8-lut\n      x8-packq\n      x8-packw\n      vunary\n      vbinary\n      xN-transposec\n      xx-transposev)\n  FOREACH(BENCH ${MICROKERNEL_BENCHMARKS})\n    ADD_EXECUTABLE(${BENCH}-bench bench/${BENCH}.cc)\n    TARGET_INCLUDE_DIRECTORIES(${BENCH}-bench PRIVATE include src)\n    TARGET_LINK_LIBRARIES(${BENCH}-bench PRIVATE\n      bench-utils\n      benchmark::benchmark\n      gemm-benchmark\n      hardware-config\n      im2col\n      indirection\n      logging\n      microkernels-all\n      microparams-init\n      packing\n      packq-benchmark\n      pthreadpool)\n    SET_TARGET_PROPERTIES(${BENCH}-bench PROPERTIES CXX_EXTENSIONS YES)\n  ENDFOREACH()\n\n  # Special-case\n  IF(XNNPACK_ENABLE_KLEIDIAI)\n    TARGET_LINK_LIBRARIES(x8-packq-bench PRIVATE kleidiai)\n  ENDIF()\nENDIF()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.0751953125,
          "content": "# How to Contribute\n\nWe'd love to accept your patches and contributions to this project. There are\njust a few small guidelines you need to follow.\n\n## Contributor License Agreement\n\nContributions to this project must be accompanied by a Contributor License\nAgreement. You (or your employer) retain the copyright to your contribution;\nthis simply gives us permission to use and redistribute your contributions as\npart of the project. Head over to <https://cla.developers.google.com/> to see\nyour current agreements on file or to sign a new one.\n\nYou generally only need to submit a CLA once, so if you've already submitted one\n(even if it was for a different project), you probably don't need to do it\nagain.\n\n## Code reviews\n\nAll submissions, including submissions by project members, require review. We\nuse GitHub pull requests for this purpose. Consult\n[GitHub Help](https://help.github.com/articles/about-pull-requests/) for more\ninformation on using pull requests.\n\n## Community Guidelines\n\nThis project follows [Google's Open Source Community\nGuidelines](https://opensource.google.com/conduct/).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.5234375,
          "content": "BSD License\n\nFor XNNPACK software\n\nCopyright (c) Facebook, Inc. and its affiliates. All rights reserved.\nCopyright 2019 Google LLC\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n * Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n * Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n * Neither the name Facebook nor the names of its contributors may be used to\n   endorse or promote products derived from this software without specific\n   prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "MODULE.bazel",
          "type": "blob",
          "size": 3.966796875,
          "content": "## MODULE.bazel\nmodule(\n    name = \"xnnpack\",\n)\n\n# Bazel rule definitions\nbazel_dep(name = \"rules_cc\", version = \"0.1.0\")\nbazel_dep(name = \"rules_python\", version = \"1.0.0\")\n\npip = use_extension(\"@rules_python//python/extensions:pip.bzl\", \"pip\")\npip.parse(\n    hub_name = \"pip\",\n    python_version = \"3.11\",\n    requirements_lock = \"//:requirements_lock.txt\",\n)\nuse_repo(pip, \"pip\")\n\n# Bazel Skylib.\nbazel_dep(name = \"bazel_skylib\", version = \"1.7.1\")\n\n# Bazel Platforms\nbazel_dep(name = \"platforms\", version = \"0.0.10\")\n\n# TODO: some (most? all?) of the http_archive() calls below could become bazel_dep() calls,\n# but it would require verifying that the semver provided by the Bazel registry matches the hash\n# that we expect in CMake; it's not clear that it is a big win to do so given the modest\n# complexity of our deps, so I'm leaving it like this for now to ensure that the Bazel and CMake\n# builds are using identical dependencies.\n\nhttp_archive = use_repo_rule(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\n\n# LINT.IfChange(googletest)\n# Google Test framework, used by most unit-tests.\nhttp_archive(\n    name = \"com_google_googletest\",\n    sha256 = \"648b9430fca63acc68c59ee98f624dcbcd9c24ea6b278c306ab6b7f49f62034a\",\n    strip_prefix = \"googletest-d144031940543e15423a25ae5a8a74141044862f\",\n    urls = [\"https://github.com/google/googletest/archive/d144031940543e15423a25ae5a8a74141044862f.zip\"],\n)\n# LINT.ThenChange(cmake/DownloadGoogleTest.cmake)\n\n# LINT.IfChange(benchmark)\n# Google Benchmark library, used in micro-benchmarks.\nhttp_archive(\n    name = \"com_google_benchmark\",\n    sha256 = \"1ba14374fddcd9623f126b1a60945e4deac4cdc4fb25a5f25e7f779e36f2db52\",\n    strip_prefix = \"benchmark-d2a8a4ee41b923876c034afb939c4fc03598e622\",\n    urls = [\"https://github.com/google/benchmark/archive/d2a8a4ee41b923876c034afb939c4fc03598e622.zip\"],\n)\n# LINT.ThenChange(cmake/DownloadGoogleBenchmark.cmake)\n\n# LINT.IfChange(FXdiv)\n# FXdiv library, used for repeated integer division by the same factor\nhttp_archive(\n    name = \"FXdiv\",\n    sha256 = \"ab7dfb08829bee33dca38405d647868fb214ac685e379ec7ef2bebcd234cd44d\",\n    strip_prefix = \"FXdiv-b408327ac2a15ec3e43352421954f5b1967701d1\",\n    urls = [\"https://github.com/Maratyszcza/FXdiv/archive/b408327ac2a15ec3e43352421954f5b1967701d1.zip\"],\n)\n# LINT.ThenChange(cmake/DownloadFXdiv.cmake)\n\n# LINT.IfChange(pthreadpool)\n# pthreadpool library, used for parallelization\nhttp_archive(\n    name = \"pthreadpool\",\n    sha256 = \"9f1baba9e97df8abc792eeaa2a8f0e0d29e507db1b4c1a8210868c889eb449b5\",\n    strip_prefix = \"pthreadpool-39df650e19d4f6382e246c29d6819b1ce6ee0b24\",\n    urls = [\"https://github.com/google/pthreadpool/archive/39df650e19d4f6382e246c29d6819b1ce6ee0b24.zip\"],\n)\n# LINT.ThenChange(cmake/DownloadPThreadPool.cmake)\n\n# LINT.IfChange(cpuinfo)\n# cpuinfo library, used for detecting processor characteristics\nhttp_archive(\n    name = \"cpuinfo\",\n    sha256 = \"0edef1777a2cc6c43524cbabd7b631c34fcf8b7d9df96ec31785c029e9cec8ff\",\n    strip_prefix = \"cpuinfo-ca156f7bc9109c552973414a63d310f76ef0cbf8\",\n    urls = [\n        \"https://github.com/pytorch/cpuinfo/archive/ca156f7bc9109c552973414a63d310f76ef0cbf8.zip\",\n    ],\n)\n# LINT.ThenChange(cmake/DownloadCpuinfo.cmake)\n\n# LINT.IfChange(kleidiai)\n# KleidiAI library, used for ARM microkernels.\nhttp_archive(\n    name = \"KleidiAI\",\n    sha256 = \"8ba8cdb9f945941174d34d10eb4ad158ad1cbc1aef259de5ad992b0bbe85861f\",\n    strip_prefix = \"kleidiai-7e8c4baf953227fa447a2f345e5d6491a504aa56\",\n    urls = [\n        \"https://gitlab.arm.com/kleidi/kleidiai/-/archive/7e8c4baf953227fa447a2f345e5d6491a504aa56/kleidiai-7e8c4baf953227fa447a2f345e5d6491a504aa56.zip\",\n    ],\n)\n# LINT.ThenChange(cmake/DownloadKleidiAI.cmake)\n\n# Ruy library, used to benchmark against\nhttp_archive(\n    name = \"ruy\",\n    sha256 = \"fe8345f521bb378745ebdd0f8c5937414849936851d2ec2609774eb2d7098e54\",\n    strip_prefix = \"ruy-9f53ba413e6fc879236dcaa3e008915973d67a4f\",\n    urls = [\n        \"https://github.com/google/ruy/archive/9f53ba413e6fc879236dcaa3e008915973d67a4f.zip\",\n    ],\n)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.1484375,
          "content": "# XNNPACK\n\nXNNPACK is a highly optimized solution for neural network inference on ARM, x86, WebAssembly, and RISC-V platforms. XNNPACK is not intended for direct use by deep learning practitioners and researchers; instead it provides low-level performance primitives for accelerating high-level machine learning frameworks, such as [TensorFlow Lite](https://www.tensorflow.org/lite), [TensorFlow.js](https://www.tensorflow.org/js), [PyTorch](https://pytorch.org/), [ONNX Runtime](https://onnxruntime.ai), and [MediaPipe](https://mediapipe.dev).\n\n## Supported Architectures\n\n- ARM64 on Android, iOS, macOS, Linux, and Windows\n- ARMv7 (with NEON) on Android\n- ARMv6 (with VFPv2) on Linux\n- x86 and x86-64 (up to AVX512) on Windows, Linux, macOS, Android, and iOS simulator\n- WebAssembly MVP\n- WebAssembly SIMD\n- [WebAssembly Relaxed SIMD](https://github.com/WebAssembly/relaxed-simd) (experimental)\n- RISC-V (RV32GC and RV64GC)\n\n## Operator Coverage\n\nXNNPACK implements the following neural network operators:\n\n- 2D Convolution (including grouped and depthwise)\n- 2D Deconvolution (AKA Transposed Convolution)\n- 2D Average Pooling\n- 2D Max Pooling\n- 2D ArgMax Pooling (Max Pooling + indices)\n- 2D Unpooling\n- 2D Bilinear Resize\n- 2D Depth-to-Space (AKA Pixel Shuffle)\n- Add (including broadcasting, two inputs only)\n- Subtract (including broadcasting)\n- Divide (including broadcasting)\n- Maximum (including broadcasting)\n- Minimum (including broadcasting)\n- Multiply (including broadcasting)\n- Squared Difference (including broadcasting)\n- Global Average Pooling\n- Channel Shuffle\n- Fully Connected\n- Abs (absolute value)\n- Bankers' Rounding (rounding to nearest, ties to even)\n- Ceiling (rounding to integer above)\n- Clamp (includes ReLU and ReLU6)\n- Convert (includes fixed-point and half-precision quantization and\n  dequantization)\n- Copy\n- ELU\n- Floor (rounding to integer below)\n- HardSwish\n- Leaky ReLU\n- Negate\n- Sigmoid\n- Softmax\n- Square\n- Tanh\n- Transpose\n- Truncation (rounding to integer towards zero)\n- PReLU\n\nAll operators in XNNPACK support NHWC layout, but additionally allow custom stride along the **C**hannel dimension. Thus, operators can consume a subset of channels in the input tensor, and produce a subset of channels in the output tensor, providing a zero-cost Channel Split and Channel Concatenation operations.\n\n## Performance\n\n### Mobile phones\n\nThe table below presents **single-threaded** performance of XNNPACK library on three generations of MobileNet models and three generations of Pixel phones.\n\n| Model                   | Pixel, ms | Pixel 2, ms | Pixel 3a, ms |\n| ----------------------- | :-------: | :---------: | :----------: |\n| FP32 MobileNet v1 1.0X  |    82     |      86     |      88      |\n| FP32 MobileNet v2 1.0X  |    49     |      53     |      55      |\n| FP32 MobileNet v3 Large |    39     |      42     |      44      |\n| FP32 MobileNet v3 Small |    12     |      14     |      14      |\n\nThe following table presents **multi-threaded** (using as many threads as there are big cores) performance of XNNPACK library on three generations of MobileNet models and three generations of Pixel phones.\n\n| Model                   | Pixel, ms | Pixel 2, ms | Pixel 3a, ms |\n| ----------------------- | :-------: | :---------: | :----------: |\n| FP32 MobileNet v1 1.0X  |    43     |      27     |      46      |\n| FP32 MobileNet v2 1.0X  |    26     |      18     |      28      |\n| FP32 MobileNet v3 Large |    22     |      16     |      24      |\n| FP32 MobileNet v3 Small |     7     |       6     |       8      |\n\nBenchmarked on March 27, 2020 with `end2end_bench --benchmark_min_time=5` on an Android/ARM64 build with Android NDK r21 (`bazel build -c opt --config android_arm64 :end2end_bench`) and neural network models with randomized weights and inputs.\n\n### Raspberry Pi\n\nThe table below presents **multi-threaded** performance of XNNPACK library on three generations of MobileNet models and three generations of Raspberry Pi boards.\n\n| Model                   | RPi Zero W (BCM2835), ms | RPi 2 (BCM2836), ms | RPi 3+ (BCM2837B0), ms | RPi 4 (BCM2711), ms | RPi 4 (BCM2711, ARM64), ms |\n| ----------------------- | :----------------------: | :-----------------: | :--------------------: | :-----------------: | :------------------------: |\n| FP32 MobileNet v1 1.0X  |          3919            |         302         |          114           |          72         |             77             |\n| FP32 MobileNet v2 1.0X  |          1987            |         191         |           79           |          41         |             46             |\n| FP32 MobileNet v3 Large |          1658            |         161         |           67           |          38         |             40             |\n| FP32 MobileNet v3 Small |           474            |          50         |           22           |          13         |             15             |\n| INT8 MobileNet v1 1.0X  |          2589            |         128         |           46           |          29         |             24             |\n| INT8 MobileNet v2 1.0X  |          1495            |          82         |           30           |          20         |             17             |\n\nBenchmarked on Feb 8, 2022 with `end2end-bench --benchmark_min_time=5` on a Raspbian Buster build with CMake (`./scripts/build-local.sh`) and neural network models with randomized weights and inputs. INT8 inference was evaluated on per-channel quantization schema.\n\n## Minimum build requirements\n\n- C11\n- C++14\n- Python 3\n\n## Publications\n\n- Marat Dukhan \"The Indirect Convolution Algorithm\". Presented on [Efficient Deep Learning for Compute Vision (ECV) 2019](https://sites.google.com/corp/view/ecv2019/) workshop ([slides](https://drive.google.com/file/d/1ZayB3By5ZxxQIRtN7UDq_JvPg1IYd3Ac/view), [paper on ArXiv](https://arxiv.org/abs/1907.02129)).\n- Erich Elsen, Marat Dukhan, Trevor Gale, Karen Simonyan \"Fast Sparse ConvNets\".\n  [Paper on ArXiv](https://arxiv.org/abs/1911.09723), [pre-trained sparse\n  models](https://github.com/google-research/google-research/tree/master/fastconvnets).\n- Marat Dukhan, Artsiom Ablavatski \"The Two-Pass Softmax Algorithm\".\n  [Paper on ArXiv](https://arxiv.org/abs/2001.04438).\n- Yury Pisarchyk, Juhyun Lee \"Efficient Memory Management for Deep Neural Net Inference\".\n  [Paper on ArXiv](https://arxiv.org/abs/2001.03288).\n\n## Ecosystem\n\n### Machine Learning Frameworks\n\n- [TensorFlow Lite](https://blog.tensorflow.org/2020/07/accelerating-tensorflow-lite-xnnpack-integration.html).\n- [TensorFlow.js WebAssembly backend](https://blog.tensorflow.org/2020/03/introducing-webassembly-backend-for-tensorflow-js.html).\n- [PyTorch Mobile](https://pytorch.org/mobile).\n- [ONNX Runtime Mobile](https://onnxruntime.ai/docs/execution-providers/Xnnpack-ExecutionProvider.html)\n- [MediaPipe for the Web](https://developers.googleblog.com/2020/01/mediapipe-on-web.html).\n- [Alibaba HALO (Heterogeneity-Aware Lowering and Optimization)](https://github.com/alibaba/heterogeneity-aware-lowering-and-optimization)\n- [Samsung ONE (On-device Neural Engine)](https://github.com/Samsung/ONE)\n\n## Acknowledgements\n\nXNNPACK is a based on [QNNPACK](https://github.com/pytorch/QNNPACK) library. Over time its codebase diverged a lot, and XNNPACK API is no longer compatible with QNNPACK.\n"
        },
        {
          "name": "bench",
          "type": "tree",
          "content": null
        },
        {
          "name": "build_config",
          "type": "tree",
          "content": null
        },
        {
          "name": "build_defs.bzl",
          "type": "blob",
          "size": 16.744140625,
          "content": "\"\"\"Build definitions and rules for XNNPACK.\"\"\"\n\nload(\"//:emscripten.bzl\", \"xnnpack_emscripten_benchmark_linkopts\", \"xnnpack_emscripten_deps\", \"xnnpack_emscripten_minimal_linkopts\", \"xnnpack_emscripten_test_linkopts\")\n\ndef xnnpack_visibility():\n    \"\"\"Visibility of :XNNPACK target.\n\n    All other targets have private visibility, and can not have external\n    dependencies.\n    \"\"\"\n    return [\"//visibility:public\"]\n\ndef xnnpack_min_size_copts():\n    \"\"\"Compiler flags for size-optimized builds.\"\"\"\n    return [\"-Os\"]\n\ndef xnnpack_gcc_std_copts():\n    \"\"\"GCC-like compiler flags to specify language standard for C sources.\"\"\"\n    return [\"-std=c99\"]\n\ndef xnnpack_msvc_std_copts():\n    \"\"\"MSVC compiler flags to specify language standard for C sources.\"\"\"\n    return [\"/Drestrict=\"]\n\ndef xnnpack_std_cxxopts():\n    \"\"\"Compiler flags to specify language standard for C++ sources.\"\"\"\n    return [\"-std=gnu++14\"]\n\ndef xnnpack_test_deps_for_library():\n    \"\"\"Depencies needed for a library to use gunit.\"\"\"\n    return [\"@com_google_googletest//:gtest_main\"]\n\ndef xnnpack_optional_ruy_copts():\n    \"\"\"Compiler flags to optionally enable Ruy benchmarks.\"\"\"\n    return []\n\ndef xnnpack_optional_gemmlowp_copts():\n    \"\"\"Compiler flags to optionally enable Gemmlowp benchmarks.\"\"\"\n    return []\n\ndef xnnpack_optional_tflite_copts():\n    \"\"\"Compiler flags to optionally enable TensorFlow Lite benchmarks.\"\"\"\n    return []\n\ndef xnnpack_optional_dnnl_copts():\n    \"\"\"Compiler flags to optionally enable Intel DNNL benchmarks.\"\"\"\n    return []\n\ndef xnnpack_optional_ruy_deps():\n    \"\"\"Optional Ruy dependencies.\"\"\"\n    return []\n\ndef xnnpack_optional_gemmlowp_deps():\n    \"\"\"Optional Gemmlowp dependencies.\"\"\"\n    return []\n\ndef xnnpack_optional_tflite_deps():\n    \"\"\"Optional TensorFlow Lite dependencies.\"\"\"\n    return []\n\ndef xnnpack_optional_dnnl_deps():\n    \"\"\"Optional Intel DNNL dependencies.\"\"\"\n    return []\n\ndef xnnpack_slinky_deps():\n    return []\n\ndef xnnpack_slinky_defines():\n    return []\n\ndef xnnpack_if_kleidiai_enabled(enabled = [], not_enabled = []):\n    return select({\n        \"//:kleidiai_enabled\": enabled,\n        \"//conditions:default\": not_enabled,\n    })\n\ndef xnnpack_kleidiai_defines():\n    return xnnpack_if_kleidiai_enabled(\n        enabled = [\"XNN_ENABLE_KLEIDIAI=1\"],\n        not_enabled = [\"XNN_ENABLE_KLEIDIAI=0\"],\n    )\n\ndef xnnpack_slow_benchmark_tags():\n    return [\"manual\"]\n\ndef xnnpack_cc_library(\n        name,\n        srcs = [],\n        x86_srcs = [],\n        aarch32_srcs = [],\n        aarch64_srcs = [],\n        hexagon_srcs = [],\n        riscv_srcs = [],\n        wasm_srcs = [],\n        wasmsimd_srcs = [],\n        wasmrelaxedsimd_srcs = [],\n        linkopts = [],\n        copts = [],\n        gcc_copts = xnnpack_gcc_std_copts(),\n        msvc_copts = xnnpack_msvc_std_copts(),\n        mingw_copts = [],\n        msys_copts = [],\n        gcc_x86_copts = [],\n        msvc_x86_32_copts = [],\n        msvc_x86_64_copts = [],\n        aarch32_copts = [],\n        aarch64_copts = [],\n        hexagon_copts = [],\n        riscv_copts = [],\n        wasm_copts = [],\n        wasmsimd_copts = [],\n        wasmrelaxedsimd_copts = [],\n        optimized_copts = [\"-O2\"],\n        hdrs = [],\n        defines = [],\n        includes = [],\n        deps = [],\n        visibility = [\":__subpackages__\"],\n        testonly = False,\n        **kwargs):\n    \"\"\"C/C++/assembly library with architecture-specific configuration.\n\n    Define a static library with architecture- and instruction-specific\n    source files and/or compiler flags.\n\n    Args:\n      name: The name of the library target to define.\n      srcs: The list of architecture-independent source files.\n      x86_srcs: The list of x86-specific source files.\n      aarch32_srcs: The list of AArch32-specific source files.\n      aarch64_srcs: The list of AArch64-specific source files.\n      hexagon_srcs: The list of Hexagon-specific source files.\n      riscv_srcs: The list of RISC-V-specific source files.\n      wasm_srcs: The list of WebAssembly 1.0-specific source files.\n      wasmsimd_srcs: The list of WebAssembly SIMD-specific source files.\n      wasmrelaxedsimd_srcs: The list of WebAssembly Relaxed SIMD-specific\n                            source files.\n      copts: The list of compiler flags to use in all builds. -I flags for\n             include/ and src/ directories of XNNPACK are always prepended\n             before these user-specified flags.\n      gcc_copts: The list of compiler flags to use with GCC-like compilers.\n      msvc_copts: The list of compiler flags to use with MSVC compiler.\n      mingw_copts: The list of compiler flags to use with MinGW GCC compilers.\n      msys_copts: The list of compiler flags to use with MSYS (Cygwin) GCC\n                  compilers.\n      gcc_x86_copts: The list of GCC-like compiler flags to use in x86 (32-bit\n                     and 64-bit) builds.\n      msvc_x86_32_copts: The list of MSVC compiler flags to use in x86 (32-bit)\n                         builds.\n      msvc_x86_64_copts: The list of MSVC compiler flags to use in x86 (64-bit)\n                         builds.\n      aarch32_copts: The list of compiler flags to use in AArch32 builds.\n      aarch64_copts: The list of compiler flags to use in AArch64 builds.\n      hexagon_copts: The list of compiler flags to use in hexagon builds.\n      riscv_copts: The list of compiler flags to use in RISC-V builds.\n      wasm_copts: The list of compiler flags to use in WebAssembly 1.0 builds.\n      wasmsimd_copts: The list of compiler flags to use in WebAssembly SIMD\n                      builds.\n      wasmrelaxedsimd_copts: The list of compiler flags to use in WebAssembly\n                             Relaxed SIMD builds.\n      optimized_copts: The list of compiler flags to use in optimized builds.\n                       Defaults to -O2.\n      hdrs: The list of header files published by this library to be textually\n            included by sources in dependent rules.\n      defines: List of predefines macros to be added to the compile line.\n      includes: List of include dirs to be added to the compile line.\n      deps: The list of other libraries to be linked.\n      visibility: The list of packages that can depend on this target.\n      testonly: If True only testonly targets (such as tests) can depend on this.\n      **kwargs: Other arguments to pass to the cc_library rule.\n    \"\"\"\n    native.cc_library(\n        name = name,\n        srcs = srcs + select({\n            \"//build_config:aarch32\": aarch32_srcs,\n            \"//build_config:aarch64\": aarch64_srcs,\n            \"//build_config:riscv\": riscv_srcs,\n            \"//build_config:x86\": x86_srcs,\n            \"//build_config:emscripten_wasm\": wasm_srcs,\n            \"//build_config:emscripten_wasmsimd\": wasmsimd_srcs,\n            \"//build_config:emscripten_wasmrelaxedsimd\": wasmrelaxedsimd_srcs,\n            \"//conditions:default\": [],\n        }),\n        copts = [\n            \"-Iinclude\",\n            \"-Isrc\",\n        ] + copts + select({\n            \"//build_config:linux_k8\": gcc_x86_copts,\n            \"//build_config:linux_arm\": aarch32_copts,\n            \"//build_config:linux_armeabi\": aarch32_copts,\n            \"//build_config:linux_armhf\": aarch32_copts,\n            \"//build_config:linux_armv7a\": aarch32_copts,\n            \"//build_config:linux_arm64\": aarch64_copts,\n            \"//build_config:macos_x86_64\": gcc_x86_copts,\n            \"//build_config:macos_x86_64_legacy\": gcc_x86_copts,\n            \"//build_config:macos_arm64\": aarch64_copts,\n            \"//build_config:windows_x86_64_clang\": [\"/clang:\" + opt for opt in gcc_x86_copts],\n            \"//build_config:windows_x86_64_mingw\": mingw_copts + gcc_x86_copts,\n            \"//build_config:windows_x86_64_msys\": msys_copts + gcc_x86_copts,\n            \"//build_config:windows_x86_64\": msvc_x86_64_copts,\n            \"//build_config:android_armv7\": aarch32_copts,\n            \"//build_config:android_arm64\": aarch64_copts,\n            \"//build_config:android_x86\": gcc_x86_copts,\n            \"//build_config:android_x86_64\": gcc_x86_copts,\n            \"//build_config:ios_arm64\": aarch64_copts,\n            \"//build_config:ios_arm64e\": aarch64_copts,\n            \"//build_config:ios_sim_arm64\": aarch64_copts,\n            \"//build_config:ios_x86_64\": gcc_x86_copts,\n            \"//build_config:watchos_arm64_32\": aarch64_copts,\n            \"//build_config:watchos_x86_64\": gcc_x86_copts,\n            \"//build_config:tvos_arm64\": aarch64_copts,\n            \"//build_config:tvos_x86_64\": gcc_x86_copts,\n            \"//build_config:emscripten_wasm\": wasm_copts,\n            \"//build_config:emscripten_wasmsimd\": wasmsimd_copts,\n            \"//build_config:emscripten_wasmrelaxedsimd\": wasmrelaxedsimd_copts,\n            \"//conditions:default\": [],\n        }) + select({\n            \"//build_config:windows_x86_64_clang\": [\"/clang:\" + opt for opt in gcc_copts],\n            \"//build_config:windows_x86_64_mingw\": gcc_copts,\n            \"//build_config:windows_x86_64_msys\": gcc_copts,\n            \"//build_config:windows_x86_64\": msvc_copts,\n            \"//conditions:default\": gcc_copts,\n        }) + select({\n            \"//:optimized_build\": optimized_copts,\n            \"//conditions:default\": [],\n        }),\n        defines = defines,\n        deps = deps,\n        includes = [\"include\", \"src\"] + includes,\n        linkstatic = True,\n        linkopts = select({\n            \"//build_config:linux_k8\": [\"-lpthread\"],\n            \"//build_config:linux_arm\": [\"-lpthread\"],\n            \"//build_config:linux_armeabi\": [\"-lpthread\"],\n            \"//build_config:linux_armhf\": [\"-lpthread\"],\n            \"//build_config:linux_armv7a\": [\"-lpthread\"],\n            \"//build_config:linux_arm64\": [\"-lpthread\"],\n            \"//build_config:android\": [\"-lm\"],\n            \"//conditions:default\": [],\n        }),\n        textual_hdrs = hdrs,\n        visibility = visibility,\n        testonly = testonly,\n        **kwargs,\n    )\n\ndef xnnpack_cxx_library(name, copts = xnnpack_std_cxxopts(), gcc_copts = [], msvc_copts = [], **kwargs):\n    xnnpack_cc_library(\n        name,\n        copts = copts,\n        gcc_copts = gcc_copts,\n        msvc_copts = msvc_copts,\n        **kwargs\n    )\n\ndef xnnpack_unit_test(name, srcs, copts = [], mingw_copts = [], msys_copts = [], deps = [], tags = [], linkopts = [], defines = [], timeout = \"short\", shard_count = 1, **kwargs):\n    \"\"\"Unit test binary based on Google Test.\n\n    Args:\n      name: The name of the test target to define.\n      srcs: The list of source and header files.\n      copts: The list of additional compiler flags for the target. -I flags\n             for include/ and src/ directories of XNNPACK are always prepended\n             before these user-specified flags.\n      mingw_copts: The list of compiler flags to use with MinGW GCC compilers.\n      msys_copts: The list of compiler flags to use with MSYS (Cygwin) GCC compilers.\n      deps: The list of additional libraries to be linked. Google Test library\n            (with main() function) is always added as a dependency and does not\n            need to be explicitly specified.\n      linkopts: The list of linking options\n      defines: List of predefines macros to be added to the compile line.\n      tags: List of arbitrary text tags.\n      timeout: How long the test is expected to run before returning.\n      shard_count: Specifies the number of parallel shards to use to run the test.\n      **kwargs: Other arguments to pass to the cc_test rule.\n    \"\"\"\n\n    native.cc_test(\n        name = name,\n        srcs = srcs,\n        copts = xnnpack_std_cxxopts() + [\n            \"-Iinclude\",\n            \"-Isrc\",\n        ] + select({\n            \"//build_config:windows_x86_64_mingw\": mingw_copts,\n            \"//build_config:windows_x86_64_msys\": msys_copts,\n            \"//conditions:default\": [],\n        }) + select({\n            \"//build_config:windows_x86_64_clang\": [\"/clang:-Wno-unused-function\"],\n            \"//build_config:windows_x86_64_mingw\": [\"-Wno-unused-function\"],\n            \"//build_config:windows_x86_64_msys\": [\"-Wno-unused-function\"],\n            \"//build_config:windows_x86_64\": [],\n            \"//conditions:default\": [\"-Wno-unused-function\"],\n        }) + copts,\n        linkopts = select({\n            \"//build_config:emscripten\": xnnpack_emscripten_test_linkopts(),\n            \"//conditions:default\": [],\n        }) + linkopts,\n        linkstatic = True,\n        defines = defines,\n        deps = [\n            \"@com_google_googletest//:gtest_main\",\n        ] + deps + select({\n            \"//build_config:emscripten\": xnnpack_emscripten_deps(),\n            \"//conditions:default\": [],\n        }),\n        tags = tags,\n        timeout = timeout,\n        shard_count = shard_count,\n        **kwargs,\n    )\n\ndef xnnpack_binary(name, srcs, copts = [], deps = [], linkopts = []):\n    \"\"\"Minimal binary\n\n    Args:\n      name: The name of the binary target to define.\n      srcs: The list of source and header files.\n      copts: The list of additional compiler flags for the target. -I flags\n             for include/ and src/ directories of XNNPACK are always prepended\n             before these user-specified flags.\n      deps: The list of libraries to be linked.\n      linkopts: The list of additional linker options\n    \"\"\"\n    native.cc_binary(\n        name = name,\n        srcs = srcs,\n        copts = [\n            \"-Iinclude\",\n            \"-Isrc\",\n        ] + copts,\n        linkopts = select({\n            \"//build_config:emscripten\": xnnpack_emscripten_minimal_linkopts(),\n            \"//conditions:default\": [],\n        }) + linkopts,\n        linkstatic = True,\n        deps = deps,\n    )\n\ndef xnnpack_benchmark(name, srcs, copts = [], deps = [], tags = [], defines = []):\n    \"\"\"Microbenchmark binary based on Google Benchmark\n\n    Args:\n      name: The name of the binary target to define.\n      srcs: The list of source and header files.\n      copts: The list of additional compiler flags for the target. -I flags\n             for include/ and src/ directories of XNNPACK are always prepended\n             before these user-specified flags.\n      deps: The list of additional libraries to be linked. Google Benchmark\n            library is always added as a dependency and does not need to be\n            explicitly specified.\n      tags: The list of arbitrary text tags.\n      defines: The list of arbitrary defines tags.\n    \"\"\"\n    native.cc_test(\n        name = name,\n        srcs = srcs,\n        copts = xnnpack_std_cxxopts() + [\n            \"-Iinclude\",\n            \"-Isrc\",\n        ] + select({\n            \"//build_config:windows_x86_64_clang\": [\"/clang:-Wno-unused-function\"],\n            \"//build_config:windows_x86_64_mingw\": [\"-Wno-unused-function\"],\n            \"//build_config:windows_x86_64_msys\": [\"-Wno-unused-function\"],\n            \"//build_config:windows_x86_64\": [],\n            \"//conditions:default\": [\"-Wno-unused-function\"],\n        }) + copts,\n        linkopts = select({\n            \"//build_config:emscripten\": xnnpack_emscripten_benchmark_linkopts(),\n            \"//build_config:windows_x86_64_mingw\": [\"-lshlwapi\"],\n            \"//build_config:windows_x86_64_msys\": [\"-lshlwapi\"],\n            \"//conditions:default\": [],\n        }),\n        linkstatic = True,\n        deps = [\n            \"@com_google_benchmark//:benchmark\",\n        ] + deps + select({\n            \"//build_config:emscripten\": xnnpack_emscripten_deps(),\n            \"//conditions:default\": [],\n        }),\n        tags = tags,\n        defines = defines,\n        args = [\"--benchmark_min_time=1x\"],\n    )\n\nSrcListInfo = provider(\"A list of source files.\", fields = {\"srcs\": \"sources\"})\n\ndef _source_list_aspect_impl(_target, ctx):\n    srcs = []\n    if hasattr(ctx.rule.attr, \"srcs\"):\n        srcs += [s for src in ctx.rule.attr.srcs for s in src.files.to_list()]\n    transitive = [dep[SrcListInfo].srcs for dep in ctx.rule.attr.deps]\n    return [SrcListInfo(srcs = depset(srcs, transitive = transitive))]\n\nsource_list_aspect = aspect(\n    implementation = _source_list_aspect_impl,\n    attr_aspects = [\"deps\"],\n)\n\ndef _transitive_source_list_rule_impl(ctx):\n    get_repo_name = lambda x: getattr(x, \"repo_name\", getattr(x, \"workspace_name\"))\n    files = [p for dep in ctx.attr.deps for p in dep[SrcListInfo].srcs.to_list() if get_repo_name(p.owner) == get_repo_name(ctx.label) and p.owner.package.startswith(ctx.label.package)]\n    return [DefaultInfo(files = depset(files + ctx.files.srcs))]\n\nxnnpack_transitive_source_list = rule(\n    implementation = _transitive_source_list_rule_impl,\n    attrs = {\n        \"deps\": attr.label_list(aspects = [source_list_aspect]),\n        \"srcs\": attr.label_list(allow_files = True),\n    },\n)\n\ndef _source_list_file_rule_impl(ctx):\n    output_file = ctx.actions.declare_file(ctx.label.name + \".list\")\n    ctx.actions.write(\n        output = output_file,\n        content = \"\\n\".join([s.path for s in ctx.files.srcs]),\n    )\n    return [DefaultInfo(files = depset([output_file]))]\n\nxnnpack_source_list_file = rule(\n    implementation = _source_list_file_rule_impl,\n    attrs = {\n        \"srcs\": attr.label_list(allow_files = True),\n    },\n)\n"
        },
        {
          "name": "build_params.bzl",
          "type": "blob",
          "size": 23.4306640625,
          "content": "\"\"\"Build parameters for XNNPACK.\n\nArch-specific build parameters and utility functions.\n\"\"\"\n\nload(\n    \":build_defs.bzl\",\n    \"xnnpack_cc_library\",\n    \"xnnpack_if_kleidiai_enabled\",\n    \"xnnpack_slinky_defines\",\n)\n\n# buildifier: disable=out-of-order-load\ndef register_extension_info(**kwargs):\n    pass\n\ndef xnnpack_src_to_target_name(src):\n    src = src.split(\"/\")[-1]\n    src = src.split(\".\")[0]\n    return src.replace(\"-\", \"_\")\n\ndef xnnpack_list_sum(values, initial = 0):\n    result = initial\n    for value in values:\n        result += value\n    return result\n\ndef xnnpack_select_if(cond = None, val_true = [], val_false = []):\n    if cond != None:\n        return select({\n            cond: val_true,\n            \"//conditions:default\": val_false,\n        })\n    else:\n        return val_true\n\ndef xnnpack_configurable_defines():\n    return xnnpack_select_if(\n        \":cpuinfo_enabled\",\n        [\"XNN_ENABLE_CPUINFO=1\"],\n        [\"XNN_ENABLE_CPUINFO=0\"],\n    ) + xnnpack_select_if(\n        \":memopt_enabled\",\n        [\"XNN_ENABLE_MEMOPT=1\"],\n        [\"XNN_ENABLE_MEMOPT=1\"],\n    ) + xnnpack_select_if(\n        \":dwconv_multipass_enabled\",\n        [\"XNN_ENABLE_DWCONV_MULTIPASS=1\"],\n        [\"XNN_ENABLE_DWCONV_MULTIPASS=0\"],\n    ) + xnnpack_select_if(\n        \":gemm_m_specialization_enabled\",\n        [\"XNN_ENABLE_GEMM_M_SPECIALIZATION=1\"],\n        [\"XNN_ENABLE_GEMM_M_SPECIALIZATION=0\"],\n    ) + xnnpack_select_if(\n        \":sparse_enabled\",\n        [\"XNN_ENABLE_SPARSE=1\"],\n        [\"XNN_ENABLE_SPARSE=0\"],\n    ) + xnnpack_select_if(\n        \":assembly_enabled\",\n        [\"XNN_ENABLE_ASSEMBLY=1\"],\n        [\"XNN_ENABLE_ASSEMBLY=0\"],\n    ) + xnnpack_select_if(\n        \":arm_fp16_scalar_enabled\",\n        [\"XNN_ENABLE_ARM_FP16_SCALAR=1\"],\n        [\"XNN_ENABLE_ARM_FP16_SCALAR=0\"],\n    ) + xnnpack_select_if(\n        \":arm_fp16_vector_enabled\",\n        [\"XNN_ENABLE_ARM_FP16_VECTOR=1\"],\n        [\"XNN_ENABLE_ARM_FP16_VECTOR=0\"],\n    ) + xnnpack_select_if(\n        \":arm_bf16_enabled\",\n        [\"XNN_ENABLE_ARM_BF16=1\"],\n        [\"XNN_ENABLE_ARM_BF16=0\"],\n    ) + xnnpack_select_if(\n        \":arm_dotprod_enabled\",\n        [\"XNN_ENABLE_ARM_DOTPROD=1\"],\n        [\"XNN_ENABLE_ARM_DOTPROD=0\"],\n    ) + xnnpack_select_if(\n        \":arm_i8mm_enabled\",\n        [\"XNN_ENABLE_ARM_I8MM=1\"],\n        [\"XNN_ENABLE_ARM_I8MM=0\"],\n    ) + xnnpack_select_if(\n        \":riscv_fp16_vector_enabled\",\n        [\"XNN_ENABLE_RISCV_FP16_VECTOR=1\"],\n        [\"XNN_ENABLE_RISCV_FP16_VECTOR=0\"],\n    ) + xnnpack_select_if(\n        \":avx512amx_enabled\",\n        [\"XNN_ENABLE_AVX512AMX=1\"],\n        [\"XNN_ENABLE_AVX512AMX=0\"],\n    ) + xnnpack_select_if(\n        \":avx512fp16_enabled\",\n        [\"XNN_ENABLE_AVX512FP16=1\"],\n        [\"XNN_ENABLE_AVX512FP16=0\"],\n    ) + xnnpack_select_if(\n        \":avxvnni_enabled\",\n        [\"XNN_ENABLE_AVXVNNI=1\"],\n        [\"XNN_ENABLE_AVXVNNI=0\"],\n    ) + xnnpack_select_if(\n        \":avxvnniint8_enabled\",\n        [\"XNN_ENABLE_AVXVNNIINT8=1\"],\n        [\"XNN_ENABLE_AVXVNNIINT8=0\"],\n    ) + xnnpack_select_if(\n        \":avx512f_enabled\",\n        [\"XNN_ENABLE_AVX512F=1\"],\n        [\"XNN_ENABLE_AVX512F=0\"],\n    ) + xnnpack_select_if(\n        \":avx256skx_enabled\",\n        [\"XNN_ENABLE_AVX256SKX=1\"],\n        [\"XNN_ENABLE_AVX256SKX=0\"],\n    ) + xnnpack_select_if(\n        \":avx256vnni_enabled\",\n        [\"XNN_ENABLE_AVX256VNNI=1\"],\n        [\"XNN_ENABLE_AVX256VNNI=0\"],\n    ) + xnnpack_select_if(\n        \":avx256vnnigfni_enabled\",\n        [\"XNN_ENABLE_AVX256VNNIGFNI=1\"],\n        [\"XNN_ENABLE_AVX256VNNIGFNI=0\"],\n    ) + xnnpack_select_if(\n        \":avx512skx_enabled\",\n        [\"XNN_ENABLE_AVX512SKX=1\"],\n        [\"XNN_ENABLE_AVX512SKX=0\"],\n    ) + xnnpack_select_if(\n        \":avx512vbmi_enabled\",\n        [\"XNN_ENABLE_AVX512VBMI=1\"],\n        [\"XNN_ENABLE_AVX512VBMI=0\"],\n    ) + xnnpack_select_if(\n        \":avx512vnni_enabled\",\n        [\"XNN_ENABLE_AVX512VNNI=1\"],\n        [\"XNN_ENABLE_AVX512VNNI=0\"],\n    ) + xnnpack_select_if(\n        \":avx512vnnigfni_enabled\",\n        [\"XNN_ENABLE_AVX512VNNIGFNI=1\"],\n        [\"XNN_ENABLE_AVX512VNNIGFNI=0\"],\n    ) + xnnpack_select_if(\n        \":hvx_enabled\",\n        [\"XNN_ENABLE_HVX=1\"],\n        [\"XNN_ENABLE_HVX=0\"],\n    ) + xnnpack_select_if(\n        \":kleidiai_enabled\",\n        [\"XNN_ENABLE_KLEIDIAI=1\"],\n        [\"XNN_ENABLE_KLEIDIAI=0\"],\n    ) + xnnpack_select_if(\n        \":arm_sme_enabled\",\n        [\"XNN_ENABLE_ARM_SME=1\"],\n        [\"XNN_ENABLE_SRM_SME=0\"],\n    ) + xnnpack_select_if(\n        \":arm_sme2_enabled\",\n        [\"XNN_ENABLE_ARM_SME2=1\"],\n        [\"XNN_ENABLE_ARM_SME2=0\"],\n    ) + xnnpack_select_if(\n        \":wasm_revectorize_enabled\",\n        [\"XNN_ENABLE_WASM_REVECTORIZE=1\"],\n        [\"XNN_ENABLE_WASM_REVECTORIZE=0\"],\n    ) + xnnpack_slinky_defines()\n\ndef _create_params(\n        cond = None,\n        extra_deps = None,\n        **kwargs):\n    # Set defaults for unspecified parameters.\n    extra_deps = extra_deps or []\n\n    return struct(\n        cond = cond,\n        extra_deps = extra_deps,\n        extra_kwargs = kwargs,\n    )\n\ndef xnnpack_copts_for_arch(arch):\n    params = XNNPACK_PARAMS_FOR_ARCH[arch]\n    kwargs = params.extra_kwargs\n    return (kwargs.get(\"copts\", []) +\n            xnnpack_select_if(\n                \"//build_config:x86\",\n                kwargs.get(\"gcc_x86_copts\", []),\n            ))\n\ndef xnnpack_target_compatible_with_for_arch(arch):\n    params = XNNPACK_PARAMS_FOR_ARCH[arch]\n    return xnnpack_select_if(\n        cond = params.cond,\n        val_false = [\"@platforms//:incompatible\"],\n        val_true = [],\n    )\n\ndef xnnpack_cond_for_arch(arch):\n    return XNNPACK_PARAMS_FOR_ARCH[arch].cond\n\ndef xnnpack_cc_library_for_arch(arch, name, deps = None, **kwargs):\n    \"\"\"Creates an xnnpack_cc_library target for the given `arch` name.\n\n    Args:\n      arch: The name of the architecture to create the target for.\n      name: The name of the target to create.\n      deps: The list of dependencies to add to the target.\n      **kwargs: Other arguments to pass to the xnnpack_cc_library target.\n    \"\"\"\n\n    # Get the params for the given arch.\n    params = XNNPACK_PARAMS_FOR_ARCH[arch]\n\n    # Set defaults for unspecified parameters.\n    deps = (deps or []) + params.extra_deps\n\n    # Merge the kwargs with the extra args from the params.\n    for key, val in params.extra_kwargs.items():\n        if key in kwargs:\n            kwargs[key] += val\n        else:\n            kwargs[key] = val\n\n    xnnpack_cc_library(\n        name = name,\n        target_compatible_with = xnnpack_select_if(\n            cond = params.cond,\n            val_false = [\"@platforms//:incompatible\"],\n            val_true = [],\n        ),\n        deps = deps,\n        **kwargs\n    )\n\nregister_extension_info(\n    extension = xnnpack_cc_library_for_arch,\n    label_regex_for_dep = \"{extension_name}\",\n)\n\n_XNNPACK_SIMD_ARCH_COPT_MAPPING = {\n    \"avx\": xnnpack_select_if(\"//build_config:x86\", [\"-mavx\"]),\n    \"avx2\": xnnpack_select_if(\"//build_config:x86\", [\"-mavx2\"]),\n    \"avx512f\": xnnpack_select_if(\"//build_config:x86\", [\"-mavx512f\"]),\n    \"avx512skx\": xnnpack_select_if(\n        \"//build_config:x86\",\n        [\n            \"-mf16c\",\n            \"-mfma\",\n            \"-mavx512f\",\n            \"-mavx512cd\",\n            \"-mavx512bw\",\n            \"-mavx512dq\",\n            \"-mavx512vl\",\n        ],\n    ),\n    \"fma3\": xnnpack_select_if(\"//build_config:x86\", [\"-mfma\"]),\n    \"hvx\": xnnpack_select_if(\"//build_config:hexagon\", [\"-mhvx-ieee-fp\"]),\n    \"neon\": select({\n        \"//build_config:aarch32\": [\n            \"-marm\",\n            \"-march=armv7-a\",\n            \"-mfpu=neon\",\n        ],\n        \"//conditions:default\": [],\n    }),\n    \"scalar\": [],\n    \"sse2\": xnnpack_select_if(\"//build_config:x86\", [\"-msse2\"]),\n    \"sse41\": xnnpack_select_if(\"//build_config:x86\", [\"-msse4.1\"]),\n    \"wasmsimd\": [],\n}\n\ndef xnnpack_simd_copts_for_arch(arch):\n    return _XNNPACK_SIMD_ARCH_COPT_MAPPING[arch]\n\ndef xnnpack_simd_f32_archs():\n    return [\"avx\", \"avx2\", \"avx512f\", \"fma3\", \"hvx\", \"neon\", \"scalar\", \"sse2\", \"wasmsimd\"]\n\ndef xnnpack_simd_f16_archs():\n    return [\"scalar\"]\n\ndef xnnpack_simd_s16_archs():\n    return [\"avx2\", \"avx512skx\", \"neon\", \"scalar\", \"sse41\", \"wasmsimd\"]\n\ndef xnnpack_simd_s32_archs():\n    return [\"avx2\", \"avx512f\", \"neon\", \"scalar\", \"sse41\", \"hvx\", \"wasmsimd\"]\n\ndef xnnpack_simd_s8_archs():\n    return [\"scalar\"]\n\ndef xnnpack_archs():\n    return XNNPACK_PARAMS_FOR_ARCH.keys()\n\nXNNPACK_PARAMS_FOR_ARCH = {\n    # Scalar.\n    \"scalar\": _create_params(\n        copts = xnnpack_select_if(\n            \"//build_config:aarch32\",\n            [\"-marm\"],\n        ) + [\n            \"-fno-fast-math\",\n            \"-fno-math-errno\",\n            \"-ffp-contract=off\",\n        ],\n        extra_deps = [\n            \"//:config_hdrs\",\n            \"@FXdiv\",\n        ],\n    ),\n\n    # Emscripten.\n    \"wasm\": _create_params(\n        cond = \"//build_config:emscripten_wasm\",\n        copts = [\n            \"-fno-fast-math\",\n            \"-fno-math-errno\",\n        ],\n    ),\n    \"wasmsimd\": _create_params(\n        cond = \"//build_config:emscripten_wasmsimd\",\n        copts = [\n            \"-fno-fast-math\",\n            \"-fno-math-errno\",\n        ],\n    ),\n    \"wasmrelaxedsimd\": _create_params(\n        cond = \"//build_config:emscripten_wasmrelaxedsimd\",\n        copts = [\n            \"-fno-fast-math\",\n            \"-fno-math-errno\",\n        ],\n    ),\n    \"wasm32\": _create_params(\n        cond = \"//build_config:emscripten_wasm\",\n    ),\n    \"wasmsimd32\": _create_params(\n        cond = \"//build_config:emscripten_wasmsimd\",\n    ),\n    \"wasmrelaxedsimd32\": _create_params(\n        cond = \"//build_config:emscripten_wasmrelaxedsimd\",\n    ),\n\n    # ARM.\n    \"armsimd32\": _create_params(\n        cond = \"//build_config:aarch32\",\n        copts = [\n            \"-marm\",\n            \"-march=armv6\",\n            \"-mfpu=vfp\",\n            \"-munaligned-access\",\n            \"-fno-fast-math\",\n            \"-fno-math-errno\",\n        ],\n    ),\n    \"fp16arith\": _create_params(\n        cond = \"//:arm_fp16_scalar_enabled\",\n        copts = select({\n            \"//build_config:aarch32\": [\n                \"-marm\",\n                \"-march=armv8.2-a+fp16\",\n                # GCC emits wrong directives for assembler with -mfpu=fp-armv8\n                \"-mfpu=neon-fp-armv8\",\n                # For vsqrth_f16 polyfill using sqrtf\n                \"-fno-math-errno\",\n                # For vminh_f16/vmaxh_f16 polyfills using compare + select\n                \"-ffinite-math-only\",\n            ],\n            \"//build_config:aarch64\": [\"-march=armv8.2-a+fp16\"],\n            \"//conditions:default\": [],\n        }),\n        extra_deps = xnnpack_if_kleidiai_enabled([\n            \"@KleidiAI//kai/ukernels/matmul\",\n        ]),\n    ),\n    \"neon\": _create_params(\n        cond = \"//build_config:arm\",\n        copts = xnnpack_select_if(\n            \"//build_config:aarch32\",\n            [\n                \"-marm\",\n                \"-march=armv7-a\",\n                \"-mfpu=neon\",\n            ],\n        ),\n        extra_deps = xnnpack_if_kleidiai_enabled([\n            \"@KleidiAI//kai/ukernels/matmul\",\n        ]),\n    ),\n    \"neon_aarch64\": _create_params(\n        cond = \"//build_config:aarch64\",\n        extra_deps = xnnpack_if_kleidiai_enabled([\n            \"@KleidiAI//kai/ukernels/matmul\",\n        ]),\n    ),\n    \"neonfp16\": _create_params(\n        cond = \"//build_config:arm\",\n        copts = xnnpack_select_if(\n            \"//build_config:aarch32\",\n            [\n                \"-marm\",\n                \"-march=armv7-a\",\n                \"-mfpu=neon-fp16\",\n            ],\n        ),\n    ),\n    \"neonfma\": _create_params(\n        cond = \"//build_config:arm\",\n        copts = xnnpack_select_if(\n            \"//build_config:aarch32\",\n            [\n                \"-marm\",\n                \"-march=armv7-a\",\n                \"-mfpu=neon-vfpv4\",\n            ],\n        ),\n    ),\n    \"neonfma_aarch64\": _create_params(\n        cond = \"//build_config:aarch64\",\n    ),\n    \"neonv8\": _create_params(\n        cond = \"//build_config:arm\",\n        copts = xnnpack_select_if(\n            \"//build_config:aarch32\",\n            [\n                \"-marm\",\n                \"-march=armv8-a\",\n                \"-mfpu=neon-fp-armv8\",\n            ],\n        ),\n    ),\n    \"neonfp16arith\": _create_params(\n        cond = \"//:arm_fp16_vector_enabled\",\n        copts = select({\n            \"//build_config:aarch32\": [\n                \"-marm\",\n                \"-march=armv8.2-a+fp16\",\n                \"-mfpu=neon-fp-armv8\",\n            ],\n            \"//build_config:aarch64\": [\"-march=armv8.2-a+fp16\"],\n            \"//conditions:default\": [],\n        }),\n    ),\n    \"neonfp16arith_aarch64\": _create_params(\n        cond = \"//:arm_aarch64_fp16_vector_enabled\",\n        copts = [\"-march=armv8.2-a+fp16\"],\n    ),\n    \"neonbf16\": _create_params(\n        cond = \"//build_config:aarch64\",\n        copts = [\"-march=armv8.2-a+bf16\"],\n    ),\n    \"neondotfp16arith\": _create_params(\n        cond = \"//:arm_neondotfp16_enabled\",\n        copts = select({\n            \"//build_config:aarch32\": [\n                \"-marm\",\n                \"-march=armv8.2-a+dotprod+fp16\",\n                \"-mfpu=neon-fp-armv8\",\n            ],\n            \"//build_config:aarch64\": [\"-march=armv8.2-a+dotprod+fp16\"],\n            \"//conditions:default\": [],\n        }),\n    ),\n    \"neondot\": _create_params(\n        cond = \"//:arm_dotprod_enabled\",\n        copts = select({\n            \"//build_config:aarch32\": [\n                \"-marm\",\n                \"-march=armv8.2-a+dotprod\",\n                \"-mfpu=neon-fp-armv8\",\n            ],\n            \"//build_config:aarch64\": [\"-march=armv8.2-a+dotprod\"],\n            \"//conditions:default\": [],\n        }),\n    ),\n    \"neondot_aarch64\": _create_params(\n        cond = \"//:arm_aarch64_dotprod_enabled\",\n        copts = [\"-march=armv8.2-a+dotprod\"],\n        extra_deps = xnnpack_if_kleidiai_enabled([\n            \"@KleidiAI//kai/ukernels/matmul:matmul\",\n        ]),\n    ),\n    \"neoni8mm\": _create_params(\n        cond = \"//:arm_i8mm_enabled\",\n        copts = [\"-march=armv8.2-a+i8mm+fp16\"],\n        extra_deps = xnnpack_if_kleidiai_enabled([\n            \"@KleidiAI//kai/ukernels/matmul:matmul\",\n        ]),\n    ),\n    \"neonsme\": _create_params(\n        cond = \"//:arm_sme_enabled\",\n        copts = [\"-march=armv8.2-a+sve+sve2\"],\n    ),\n    \"neonsme2\": _create_params(\n        cond = \"//:arm_sme2_enabled\",\n        copts = [\"-march=armv8.2-a+sve+sve2\"],\n        extra_deps = xnnpack_if_kleidiai_enabled([\n            \"@KleidiAI//kai/ukernels/matmul:matmul\",\n        ]),\n    ),\n    \"aarch32\": _create_params(\n        cond = \"//build_config:aarch32\",\n        copts = [\n            \"-marm\",\n            \"-march=armv8.2-a+dotprod+fp16\",\n            \"-mfpu=neon-fp-armv8\",\n        ],\n    ),\n    \"aarch64\": _create_params(\n        cond = \"//build_config:aarch64\",\n        copts = [\"-march=armv8.2-a+fp16+dotprod\"],\n    ),\n\n    # X86.\n    \"sse\": _create_params(\n        cond = \"//build_config:x86\",\n        gcc_x86_copts = [\n            \"-msse\",\n            \"-mno-sse2\",\n        ],\n        msvc_x86_32_copts = [\"/arch:SSE\"],\n        msvc_x86_64_copts = [\"/arch:SSE\"],\n    ),\n    \"sse2\": _create_params(\n        cond = \"//build_config:x86\",\n        gcc_x86_copts = [\n            \"-msse2\",\n            \"-mno-sse3\",\n        ],\n        msvc_x86_32_copts = [\"/arch:SSE2\"],\n        msvc_x86_64_copts = [\"/arch:SSE2\"],\n    ),\n    \"ssse3\": _create_params(\n        cond = \"//build_config:x86\",\n        gcc_x86_copts = [\n            \"-mssse3\",\n            \"-mno-sse4.1\",\n        ],\n        msvc_x86_32_copts = [\"/arch:SSE2\"],\n        msvc_x86_64_copts = [\"/arch:SSE2\"],\n    ),\n    \"sse41\": _create_params(\n        cond = \"//build_config:x86\",\n        gcc_x86_copts = [\n            \"-msse4.1\",\n            \"-mno-sse4.2\",\n        ],\n        extra_deps = [\n        ],\n        msvc_x86_32_copts = [\"/arch:SSE2\"],\n        msvc_x86_64_copts = [\"/arch:SSE2\"],\n    ),\n    \"avx\": _create_params(\n        cond = \"//build_config:x86\",\n        gcc_x86_copts = [\n            \"-mavx\",\n            \"-mno-avx2\",\n            \"-mno-f16c\",\n            \"-mno-fma\",\n        ],\n        msvc_x86_32_copts = [\"/arch:AVX\"],\n        msvc_x86_64_copts = [\"/arch:AVX\"],\n    ),\n    \"avxvnni\": _create_params(\n        cond = \"//:avxvnni_enabled\",\n        gcc_x86_copts = [\n            \"-mavx2\",\n            \"-mavxvnni\",\n            \"-mf16c\",\n            \"-mfma\",\n        ],\n        msvc_x86_32_copts = [\"/arch:AVX\"],\n        msvc_x86_64_copts = [\"/arch:AVX\"],\n    ),\n    \"avxvnniint8\": _create_params(\n        cond = \"//:avxvnniint8_enabled\",\n        gcc_x86_copts = [\n            \"-mavx2\",\n            \"-mavxvnniint8\",\n            \"-mf16c\",\n            \"-mfma\",\n        ],\n        msvc_x86_32_copts = [\"/arch:AVX\"],\n        msvc_x86_64_copts = [\"/arch:AVX\"],\n    ),\n    \"f16c\": _create_params(\n        cond = \"//build_config:x86\",\n        gcc_x86_copts = [\n            \"-mf16c\",\n            \"-mno-avx2\",\n            \"-mno-fma\",\n        ],\n        msvc_x86_32_copts = [\"/arch:AVX\"],\n        msvc_x86_64_copts = [\"/arch:AVX\"],\n    ),\n    \"fma3\": _create_params(\n        cond = \"//build_config:x86\",\n        gcc_x86_copts = [\n            \"-mf16c\",\n            \"-mfma\",\n            \"-mno-avx2\",\n        ],\n        msvc_x86_32_copts = [\"/arch:AVX\"],\n        msvc_x86_64_copts = [\"/arch:AVX\"],\n    ),\n    \"avx2\": _create_params(\n        cond = \"//build_config:x86\",\n        gcc_x86_copts = [\n            \"-mf16c\",\n            \"-mfma\",\n            \"-mavx2\",\n        ],\n        msvc_x86_32_copts = [\"/arch:AVX2\"],\n        msvc_x86_64_copts = [\"/arch:AVX2\"],\n    ),\n    \"avx512f\": _create_params(\n        cond = \"//:avx512f_enabled\",\n        gcc_x86_copts = [\n            \"-mavx512f\",\n        ],\n        msvc_x86_32_copts = [\"/arch:AVX512\"],\n        msvc_x86_64_copts = [\"/arch:AVX512\"],\n        mingw_copts = [\"-fno-asynchronous-unwind-tables\"],\n        msys_copts = [\"-fno-asynchronous-unwind-tables\"],\n    ),\n    \"avx512skx\": _create_params(\n        cond = \"//:avx512skx_enabled\",\n        gcc_x86_copts = [\n            \"-mf16c\",\n            \"-mfma\",\n            \"-mavx512f\",\n            \"-mavx512cd\",\n            \"-mavx512bw\",\n            \"-mavx512dq\",\n            \"-mavx512vl\",\n        ],\n        msvc_x86_32_copts = [\"/arch:AVX512\"],\n        msvc_x86_64_copts = [\"/arch:AVX512\"],\n        mingw_copts = [\"-fno-asynchronous-unwind-tables\"],\n        msys_copts = [\"-fno-asynchronous-unwind-tables\"],\n    ),\n    \"avx256skx\": _create_params(\n        cond = \"//:avx256skx_enabled\",\n        gcc_x86_copts = [\n            \"-mf16c\",\n            \"-mfma\",\n            \"-mavx512f\",\n            \"-mavx512cd\",\n            \"-mavx512bw\",\n            \"-mavx512dq\",\n            \"-mavx512vl\",\n        ],\n        msvc_x86_32_copts = [\"/arch:AVX512\"],\n        msvc_x86_64_copts = [\"/arch:AVX512\"],\n        mingw_copts = [\"-fno-asynchronous-unwind-tables\"],\n        msys_copts = [\"-fno-asynchronous-unwind-tables\"],\n    ),\n    \"avx512vbmi\": _create_params(\n        cond = \"//:avx512vbmi_enabled\",\n        gcc_x86_copts = [\n            \"-mf16c\",\n            \"-mfma\",\n            \"-mavx512f\",\n            \"-mavx512cd\",\n            \"-mavx512bw\",\n            \"-mavx512dq\",\n            \"-mavx512vl\",\n            \"-mavx512vbmi\",\n        ],\n        msvc_x86_32_copts = [\"/arch:AVX512\"],\n        msvc_x86_64_copts = [\"/arch:AVX512\"],\n        mingw_copts = [\"-fno-asynchronous-unwind-tables\"],\n        msys_copts = [\"-fno-asynchronous-unwind-tables\"],\n    ),\n    \"avx512vnni\": _create_params(\n        cond = \"//:avx512vnni_enabled\",\n        gcc_x86_copts = [\n            \"-mf16c\",\n            \"-mfma\",\n            \"-mavx512f\",\n            \"-mavx512cd\",\n            \"-mavx512bw\",\n            \"-mavx512dq\",\n            \"-mavx512vl\",\n            \"-mavx512vnni\",\n        ],\n        msvc_x86_32_copts = [\"/arch:AVX512\"],\n        msvc_x86_64_copts = [\"/arch:AVX512\"],\n        mingw_copts = [\"-fno-asynchronous-unwind-tables\"],\n        msys_copts = [\"-fno-asynchronous-unwind-tables\"],\n    ),\n    \"avx256vnni\": _create_params(\n        cond = \"//:avx256vnni_enabled\",\n        gcc_x86_copts = [\n            \"-mf16c\",\n            \"-mfma\",\n            \"-mavx512f\",\n            \"-mavx512cd\",\n            \"-mavx512bw\",\n            \"-mavx512dq\",\n            \"-mavx512vl\",\n            \"-mavx512vnni\",\n        ],\n        msvc_x86_32_copts = [\"/arch:AVX512\"],\n        msvc_x86_64_copts = [\"/arch:AVX512\"],\n        mingw_copts = [\"-fno-asynchronous-unwind-tables\"],\n        msys_copts = [\"-fno-asynchronous-unwind-tables\"],\n    ),\n    \"avx512vnnigfni\": _create_params(\n        cond = \"//:avx512vnnigfni_enabled\",\n        gcc_x86_copts = [\n            \"-mf16c\",\n            \"-mfma\",\n            \"-mavx512f\",\n            \"-mavx512cd\",\n            \"-mavx512bw\",\n            \"-mavx512dq\",\n            \"-mavx512vl\",\n            \"-mavx512vnni\",\n            \"-mgfni\",\n        ],\n        msvc_x86_32_copts = [\"/arch:AVX512\"],\n        msvc_x86_64_copts = [\"/arch:AVX512\"],\n        mingw_copts = [\"-fno-asynchronous-unwind-tables\"],\n        msys_copts = [\"-fno-asynchronous-unwind-tables\"],\n    ),\n    \"avx256vnnigfni\": _create_params(\n        cond = \"//:avx256vnnigfni_enabled\",\n        gcc_x86_copts = [\n            \"-mf16c\",\n            \"-mfma\",\n            \"-mavx512f\",\n            \"-mavx512cd\",\n            \"-mavx512bw\",\n            \"-mavx512dq\",\n            \"-mavx512vl\",\n            \"-mavx512vnni\",\n            \"-mgfni\",\n        ],\n        msvc_x86_32_copts = [\"/arch:AVX512\"],\n        msvc_x86_64_copts = [\"/arch:AVX512\"],\n        mingw_copts = [\"-fno-asynchronous-unwind-tables\"],\n        msys_copts = [\"-fno-asynchronous-unwind-tables\"],\n    ),\n    \"avx512amx\": _create_params(\n        cond = \"//:avx512amx_enabled\",\n        gcc_x86_copts = [\n            \"-mf16c\",\n            \"-mfma\",\n            \"-mavx512f\",\n            \"-mavx512cd\",\n            \"-mavx512bw\",\n            \"-mavx512dq\",\n            \"-mavx512vl\",\n            \"-mavx512vnni\",\n            \"-mgfni\",\n            \"-mamx-tile\",\n            \"-mamx-int8\",\n        ],\n        msvc_x86_32_copts = [\"/arch:AVX512\"],\n        msvc_x86_64_copts = [\"/arch:AVX512\"],\n        mingw_copts = [\"-fno-asynchronous-unwind-tables\"],\n        msys_copts = [\"-fno-asynchronous-unwind-tables\"],\n    ),\n    \"avx512fp16\": _create_params(\n        cond = \"//:avx512fp16_enabled\",\n        gcc_x86_copts = [\n            \"-mf16c\",\n            \"-mfma\",\n            \"-mavx512f\",\n            \"-mavx512cd\",\n            \"-mavx512bw\",\n            \"-mavx512dq\",\n            \"-mavx512vl\",\n            \"-mavx512vnni\",\n            \"-mgfni\",\n            \"-mavx512fp16\",\n        ],\n        msvc_x86_32_copts = [\"/arch:AVX512\"],\n        msvc_x86_64_copts = [\"/arch:AVX512\"],\n        mingw_copts = [\"-fno-asynchronous-unwind-tables\"],\n        msys_copts = [\"-fno-asynchronous-unwind-tables\"],\n    ),\n\n    # RISC-V.\n    \"rvv\": _create_params(\n        cond = \"//:riscv_vector_enabled\",\n        copts = [\n            \"-march=rv64gcv\",\n            \"-mabi=lp64d\",\n        ],\n    ),\n    \"rvvfp16arith\": _create_params(\n        cond = \"//:riscv_fp16_vector_enabled\",\n        copts = [\n            \"-march=rv64gc_zvfh\",\n            \"-mabi=lp64d\",\n        ],\n    ),\n\n    # Hexagon.\n    \"hexagon\": _create_params(\n        cond = \"//:hvx_enabled\",\n        copts = [\n            \"-mhvx-ieee-fp\",\n        ],\n        extra_deps = [],  # Extra deps for hexagon.\n    ),\n    \"hvx\": _create_params(\n        cond = \"//:hvx_enabled\",\n        copts = [\n            \"-mhvx-ieee-fp\",\n        ],\n        extra_deps = [],  # Extra deps for hexagon.\n    ),\n    \"amd64\": _create_params(\n        cond = \"//build_config:x86_64\",\n        gcc_x86_copts = [\n            \"-mf16c\",\n            \"-mfma\",\n            \"-mavx512f\",\n            \"-mavx512cd\",\n            \"-mavx512bw\",\n            \"-mavx512dq\",\n            \"-mavx512vl\",\n            \"-mavx512vnni\",\n            \"-mgfni\",\n        ],\n        msvc_x86_64_copts = [\"/arch:AVX512\"],\n        mingw_copts = [\"-fno-asynchronous-unwind-tables\"],\n        msys_copts = [\"-fno-asynchronous-unwind-tables\"],\n    ),\n}\n"
        },
        {
          "name": "build_srcs.bzl",
          "type": "blob",
          "size": 3.845703125,
          "content": "# Copyright 2024 Google LLC\n#\n# This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree.\n#\n# Description:\n#   XNNPACK - optimized floating-point neural network operators library\n\nOPERATOR_SRCS = [\n    \"src/operator-delete.c\",\n    \"src/operator-run.c\",\n    \"src/operators/argmax-pooling-nhwc.c\",\n    \"src/operators/average-pooling-nhwc.c\",\n    \"src/operators/batch-matrix-multiply-nc.c\",\n    \"src/operators/binary-elementwise-nd.c\",\n    \"src/operators/constant-pad-nd.c\",\n    \"src/operators/convolution-nchw.c\",\n    \"src/operators/convolution-nhwc.c\",\n    \"src/operators/deconvolution-nhwc.c\",\n    \"src/operators/dynamic-fully-connected-nc.c\",\n    \"src/operators/fully-connected-nc.c\",\n    \"src/operators/max-pooling-nhwc.c\",\n    \"src/operators/pack-lh.c\",\n    \"src/operators/reduce-nd.c\",\n    \"src/operators/resize-bilinear-nchw.c\",\n    \"src/operators/resize-bilinear-nhwc.c\",\n    \"src/operators/rope-nthc.c\",\n    \"src/operators/scaled-dot-product-attention-nhtc.c\",\n    \"src/operators/slice-nd.c\",\n    \"src/operators/softmax-nc.c\",\n    \"src/operators/transpose-nd.c\",\n    \"src/operators/unary-elementwise-nc.c\",\n    \"src/operators/unpooling-nhwc.c\",\n]\n\nSUBGRAPH_SRCS = [\n    \"src/memory-planner.c\",\n    \"src/runtime.c\",\n    \"src/subgraph.c\",\n    \"src/subgraph/argmax-pooling-2d.c\",\n    \"src/subgraph/average-pooling-2d.c\",\n    \"src/subgraph/batch-matrix-multiply.c\",\n    \"src/subgraph/binary.c\",\n    \"src/subgraph/concatenate.c\",\n    \"src/subgraph/convolution-2d.c\",\n    \"src/subgraph/copy.c\",\n    \"src/subgraph/deconvolution-2d.c\",\n    \"src/subgraph/deprecated.c\",\n    \"src/subgraph/depth-to-space-2d.c\",\n    \"src/subgraph/depthwise-convolution-2d.c\",\n    \"src/subgraph/even-split.c\",\n    \"src/subgraph/fully-connected-sparse.c\",\n    \"src/subgraph/fully-connected.c\",\n    \"src/subgraph/max-pooling-2d.c\",\n    \"src/subgraph/pack-lh.c\",\n    \"src/subgraph/reshape-helpers.c\",\n    \"src/subgraph/rope.c\",\n    \"src/subgraph/scaled-dot-product-attention.c\",\n    \"src/subgraph/softmax.c\",\n    \"src/subgraph/space-to-depth-2d.c\",\n    \"src/subgraph/static-constant-pad.c\",\n    \"src/subgraph/static-reduce.c\",\n    \"src/subgraph/static-resize-bilinear-2d.c\",\n    \"src/subgraph/static-slice.c\",\n    \"src/subgraph/static-transpose.c\",\n    \"src/subgraph/unary.c\",\n    \"src/subgraph/unpooling-2d.c\",\n    \"src/subgraph/validation.c\",\n    \"src/tensor.c\",\n]\n\nTABLE_SRCS = [\n    \"src/tables/exp2-k-over-64.c\",\n    \"src/tables/exp2-k-over-2048.c\",\n    \"src/tables/exp2minus-k-over-4.c\",\n    \"src/tables/exp2minus-k-over-8.c\",\n    \"src/tables/exp2minus-k-over-16.c\",\n    \"src/tables/exp2minus-k-over-32.c\",\n    \"src/tables/exp2minus-k-over-64.c\",\n    \"src/tables/exp2minus-k-over-2048.c\",\n    \"src/tables/vlog.c\",\n]\n\nXNNPACK_SRCS = [\n    \"src/configs/argmaxpool-config.c\",\n    \"src/configs/avgpool-config.c\",\n    \"src/configs/binary-elementwise-config.c\",\n    \"src/configs/cmul-config.c\",\n    \"src/configs/conv-hwc2chw-config.c\",\n    \"src/configs/dwconv-config.c\",\n    \"src/configs/dwconv2d-chw-config.c\",\n    \"src/configs/gemm-config.c\",\n    \"src/configs/ibilinear-chw-config.c\",\n    \"src/configs/ibilinear-config.c\",\n    \"src/configs/lut32norm-config.c\",\n    \"src/configs/maxpool-config.c\",\n    \"src/configs/pavgpool-config.c\",\n    \"src/configs/pack-lh-config.c\",\n    \"src/configs/raddstoreexpminusmax-config.c\",\n    \"src/configs/reduce-config.c\",\n    \"src/configs/rmax-config.c\",\n    \"src/configs/spmm-config.c\",\n    \"src/configs/transpose-config.c\",\n    \"src/configs/unary-elementwise-config.c\",\n    \"src/configs/unpool-config.c\",\n    \"src/configs/vmulcaddc-config.c\",\n    \"src/configs/x8-lut-config.c\",\n    \"src/configs/xx-fill-config.c\",\n    \"src/configs/xx-pad-config.c\",\n]\n\nLOGGING_SRCS = [\n    \"src/enums/allocation-type.c\",\n    \"src/enums/datatype-strings.c\",\n    \"src/enums/microkernel-type.c\",\n    \"src/enums/node-type.c\",\n    \"src/enums/operator-type.c\",\n    \"src/log.c\",\n]\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "emscripten.bzl",
          "type": "blob",
          "size": 1.28515625,
          "content": "\"\"\"Emscripten-specific build definitions for XNNPACK.\"\"\"\n\ndef xnnpack_emscripten_minimal_linkopts():\n    \"\"\"Minimal Emscripten-specific linkopts for binaries.\"\"\"\n    return [\n        \"-s ASSERTIONS=0\",\n        \"-s ENVIRONMENT=node,shell,web\",\n        \"-s ERROR_ON_UNDEFINED_SYMBOLS=1\",\n        \"-s EXIT_RUNTIME=1\",\n    ]\n\ndef xnnpack_emscripten_test_linkopts():\n    \"\"\"Emscripten-specific linkopts for unit tests.\"\"\"\n    return [\n        \"-s ALLOW_MEMORY_GROWTH=1\",\n        \"-s ASSERTIONS=2\",\n        \"-s ENVIRONMENT=node,shell,web\",\n        \"-s ERROR_ON_UNDEFINED_SYMBOLS=1\",\n        \"-s EXIT_RUNTIME=1\",\n        \"-s STACK_SIZE=5MB\",\n        \"-s TEXTDECODER=1\",\n        \"--pre-js $(location //:preamble.js.lds)\",\n    ]\n\ndef xnnpack_emscripten_benchmark_linkopts():\n    \"\"\"Emscripten-specific linkopts for benchmarks.\"\"\"\n    return [\n        \"-s ASSERTIONS=1\",\n        \"-s ENVIRONMENT=node,shell,web\",\n        \"-s ERROR_ON_UNDEFINED_SYMBOLS=1\",\n        \"-s EXIT_RUNTIME=1\",\n        \"-s ALLOW_MEMORY_GROWTH=1\",\n        \"-s INITIAL_MEMORY=1gb\",\n        \"-s MAXIMUM_MEMORY=4gb\",\n        \"-s TEXTDECODER=1\",\n        \"--pre-js $(location //:preamble.js.lds)\",\n    ]\n\ndef xnnpack_emscripten_deps():\n    \"\"\"Emscripten-specific dependencies for unit tests and benchmarks.\"\"\"\n    return [\n        \"//:preamble.js.lds\",\n    ]\n"
        },
        {
          "name": "gemm_compiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "gen",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "preamble.js.lds",
          "type": "blob",
          "size": 0.462890625,
          "content": "/*\n * Copyright 2019 Google LLC\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* mock crypto module for benchmarks and unit tests or std::random_device fails at runtime */\nvar crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };\nif (typeof performance === 'undefined') { var performance = { now: Date.now, } }\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}