{
  "metadata": {
    "timestamp": 1736710137349,
    "page": 789,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lzfse/lzfse",
      "stars": 1781,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.05859375,
          "content": "*~\n.DS_Store\n**/project.xcworkspace/\n**/xcuserdata/\nbuild/\n\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 3.4365234375,
          "content": "language: c\nsudo: false\nmatrix:\n  include:\n    ###\n    ## Linux builds using various versions of GCC.\n    ###\n    - os: linux\n      env: C_COMPILER=gcc-6\n      addons:\n        apt:\n          sources:\n          - ubuntu-toolchain-r-test\n          packages:\n          - gcc-6\n    - os: linux\n      env: C_COMPILER=gcc-5\n      addons:\n        apt:\n          sources:\n          - ubuntu-toolchain-r-test\n          packages:\n          - gcc-5\n    - os: linux\n      env: C_COMPILER=gcc-4.9\n      addons:\n        apt:\n          sources:\n          - ubuntu-toolchain-r-test\n          packages:\n          - gcc-4.9\n    - os: linux\n      env: C_COMPILER=gcc-4.8\n      addons:\n        apt:\n          sources:\n          - ubuntu-toolchain-r-test\n          packages:\n          - gcc-4.8\n    - os: linux\n      env: C_COMPILER=gcc-4.7\n      addons:\n        apt:\n          sources:\n          - ubuntu-toolchain-r-test\n          packages:\n          - gcc-4.7\n    - os: linux\n      env: C_COMPILER=gcc-4.6\n      addons:\n        apt:\n          sources:\n          - ubuntu-toolchain-r-test\n          packages:\n          - gcc-4.6\n    - os: linux\n      env: C_COMPILER=gcc-4.5\n      addons:\n        apt:\n          sources:\n          - ubuntu-toolchain-r-test\n          packages:\n          - gcc-4.5\n    - os: linux\n      env: C_COMPILER=gcc-4.4\n      addons:\n        apt:\n          sources:\n          - ubuntu-toolchain-r-test\n          packages:\n          - gcc-4.4\n\n    ###\n    ## clang on Linux\n    ###\n    - os: linux\n      env: C_COMPILER=clang-3.8\n      addons:\n        apt:\n          sources:\n          - llvm-toolchain-precise-3.8\n          - ubuntu-toolchain-r-test\n          packages:\n          - clang-3.8\n    - os: linux\n      env: C_COMPILER=clang-3.7\n      addons:\n        apt:\n          sources:\n          - llvm-toolchain-precise-3.7\n          - ubuntu-toolchain-r-test\n          packages:\n          - clang-3.7\n    - os: linux\n      env: C_COMPILER=clang-3.6\n      addons:\n        apt:\n          sources:\n          - llvm-toolchain-precise-3.6\n          - ubuntu-toolchain-r-test\n          packages:\n          - clang-3.6\n    - os: linux\n      env: C_COMPILER=clang-3.5\n      addons:\n        apt:\n          sources:\n          - llvm-toolchain-precise-3.5\n          - ubuntu-toolchain-r-test\n          packages:\n          - clang-3.5\n\n    ###\n    ## Sanitizers\n    ###\n    - os: linux\n      env: C_COMPILER=clang-3.8 SANITIZER=address\n      addons:\n        apt:\n          sources:\n          - ubuntu-toolchain-r-test\n          - llvm-toolchain-precise-3.8\n          packages:\n          - clang-3.8\n    - os: linux\n      env: C_COMPILER=clang-3.8 SANITIZER=thread\n      addons:\n        apt:\n          sources:\n          - ubuntu-toolchain-r-test\n          - llvm-toolchain-precise-3.8\n          packages:\n          - clang-3.8\n    - os: linux\n      env: C_COMPILER=clang-3.8 SANITIZER=undefined CFLAGS=\"-fno-sanitize-recover=undefined,integer\"\n      addons:\n        apt:\n          sources:\n          - ubuntu-toolchain-r-test\n          - llvm-toolchain-precise-3.8\n          packages:\n          - clang-3.8\n\nbefore_install:\n###\n## If we use the matrix to set CC/CXX Travis, overwrites the values,\n## so instead we use C/CXX_COMPILER, then copy the values to CC/CXX\n## here (after Travis has set CC/CXX).\n###\n- if [ -n \"${C_COMPILER}\" ]; then export CC=\"${C_COMPILER}\"; fi\n- mkdir build\n- cd build\n\nscript:\n- cmake --version\n- cmake .. -DCMAKE_C_FLAGS=\"${CFLAGS}\" -DENABLE_SANITIZER=\"${SANITIZER}\"\n- make VERBOSE=1\n- ctest -V\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 4.1318359375,
          "content": "project(lzfse C)\ncmake_minimum_required(VERSION 2.8.6)\n\ninclude(CheckCCompilerFlag)\n\n# If LZFSE is being bundled in another project, we don't want to\n# install anything.  However, we want to let people override this, so\n# we'll use the LZFSE_BUNDLE_MODE variable to let them do that; just\n# set it to OFF in your project before you add_subdirectory(lzfse).\nget_directory_property(LZFSE_PARENT_DIRECTORY PARENT_DIRECTORY)\nif(\"${LZFSE_BUNDLE_MODE}\" STREQUAL \"\")\n  # Bundled mode hasn't been set one way or the other, set the default\n  # depending on whether or not we are the top-level project.\n  if(LZFSE_PARENT_DIRECTORY)\n    set(LZFSE_BUNDLE_MODE ON)\n  else()\n    set(LZFSE_BUNDLE_MODE OFF)\n  endif(LZFSE_PARENT_DIRECTORY)\nendif()\nmark_as_advanced(LZFSE_BUNDLE_MODE)\n\nif(NOT LZFSE_BUNDLE_MODE)\n  option(BUILD_SHARED_LIBS \"Build shared libraries\" ON)\nelse()\n  set(BUILD_SHARED_LIBS OFF)\nendif()\n\nif (CMAKE_VERSION VERSION_GREATER 3.2)\n  cmake_policy (SET CMP0063 NEW)\nendif ()\n\n# Compiler flags\nfunction(lzfse_add_compiler_flags target)\n  set (flags ${ARGV})\n  list (REMOVE_AT flags 0)\n\n  foreach (FLAG ${flags})\n    if(CMAKE_C_COMPILER_ID STREQUAL GNU)\n      # Because https://gcc.gnu.org/wiki/FAQ#wnowarning\n      string(REGEX REPLACE \"\\\\-Wno\\\\-(.+)\" \"-W\\\\1\" flag_to_test \"${FLAG}\")\n    else()\n      set (flag_to_test ${FLAG})\n    endif()\n\n    string(REGEX REPLACE \"[^a-zA-Z0-9]+\" \"_\" test_name \"CFLAG_${flag_to_test}\")\n\n    check_c_compiler_flag(\"${flag_to_test}\" \"${test_name}\")\n    if(${${test_name}})\n      set_property(TARGET \"${target}\" APPEND_STRING PROPERTY COMPILE_FLAGS \" ${FLAG}\")\n    endif()\n  endforeach()\nendfunction()\n\nif (ENABLE_SANITIZER)\n  set(CMAKE_C_FLAGS \" ${CMAKE_C_FLAGS} -fsanitize=${ENABLE_SANITIZER}\")\n  set(CMAKE_CXX_FLAGS \" ${CMAKE_CXX_FLAGS} -fsanitize=${ENABLE_SANITIZER}\")\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fsanitize=${ENABLE_SANITIZER}\")\nendif ()\n\nadd_library(lzfse\n  src/lzfse_decode.c\n  src/lzfse_decode_base.c\n  src/lzfse_encode.c\n  src/lzfse_encode_base.c\n  src/lzfse_fse.c\n  src/lzvn_decode_base.c\n  src/lzvn_encode_base.c)\nlzfse_add_compiler_flags(lzfse -Wall -Wno-unknown-pragmas -Wno-unused-variable)\n\nadd_executable(lzfse_cli\n  src/lzfse_main.c)\ntarget_link_libraries(lzfse_cli lzfse)\nset_target_properties(lzfse_cli PROPERTIES OUTPUT_NAME lzfse)\nlzfse_add_compiler_flags(lzfse_cli -Wall -Wno-unknown-pragmas -Wno-unused-variable)\n\nif(CMAKE_VERSION VERSION_LESS 3.1 OR CMAKE_C_COMPLIER_ID STREQUAL \"Intel\")\n  lzfse_add_compiler_flags(lzfse -std=c99)\n  lzfse_add_compiler_flags(lzfse_cli -std=c99)\nelse()\n  set_property(TARGET lzfse PROPERTY C_STANDARD 99)\n  set_property(TARGET lzfse_cli PROPERTY C_STANDARD 99)\nendif()\n\nset_target_properties(lzfse PROPERTIES\n  POSITION_INDEPENDENT_CODE TRUE\n  C_VISIBILITY_PRESET hidden\n  INTERPROCEDURAL_OPTIMIZATION TRUE)\n\nif(BUILD_SHARED_LIBS)\n  set_property(TARGET lzfse APPEND PROPERTY COMPILE_DEFINITIONS LZFSE_DLL LZFSE_DLL_EXPORTS)\n  set_property(TARGET lzfse APPEND PROPERTY INTERFACE_COMPILE_DEFINITIONS LZFSE_DLL)\nendif()\n\n# Installation\nif(NOT LZFSE_BUNDLE_MODE)\n  include(GNUInstallDirs)\n\n  install(TARGETS lzfse lzfse_cli\n    RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n    LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n    ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\")\n  install(FILES src/lzfse.h DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\")\nendif()\n\n# Tests\n\n# If we're targeting Windows but not running on Windows, we need Wine\n# to run the tests...\nif(NOT LZFSE_DISABLE_TESTS)\n  if(WIN32 AND NOT CMAKE_HOST_WIN32)\n    find_program(LZFSE_WINE NAMES wine)\n\n    if(NOT LZFSE_WINE)\n      message(STATUS \"wine not found, disabling tests\")\n      set(LZFSE_DISABLE_TESTS TRUE)\n    endif()\n  endif()\nendif()\n\nif(NOT LZFSE_DISABLE_TESTS)\n  include(CTest)\n  enable_testing()\n\n  file(GLOB_RECURSE\n    ROUNDTRIP_INPUTS\n    RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}\n    src/*)\n\n  foreach(INPUT ${ROUNDTRIP_INPUTS})\n    add_test(NAME \"${LZFSE_TEST_PREFIX}roundtrip/${INPUT}\"\n      COMMAND \"${CMAKE_COMMAND}\"\n        -DLZFSE_WRAPPER=${LZFSE_WINE}\n        -DLZFSE_CLI=$<TARGET_FILE:lzfse_cli>\n        -DINPUT=${CMAKE_CURRENT_SOURCE_DIR}/${INPUT}\n        -P ${CMAKE_CURRENT_SOURCE_DIR}/tests/round-trip.cmake)\n  endforeach()\nendif()\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.478515625,
          "content": "Copyright (c) 2015-2016, Apple Inc. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:  \n\n1.  Redistributions of source code must retain the above copyright notice,\n    this list of conditions and the following disclaimer.\n\n2.  Redistributions in binary form must reproduce the above copyright notice,\n    this list of conditions and the following disclaimer in the documentation\n    and/or other materials provided with the distribution.\n\n3.  Neither the name of the copyright holder(s) nor the names of any contributors\n    may be used to endorse or promote products derived from this software without\n    specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\nOF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT\nSHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\nTO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR\nBUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\nIN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\nOF SUCH DAMAGE.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.951171875,
          "content": "# Copyright (c) 2015-2016, Apple Inc. All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without modification,\n# are permitted provided that the following conditions are met:  \n#\n# 1.  Redistributions of source code must retain the above copyright notice,\n#     this list of conditions and the following disclaimer.\n#\n# 2.  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the\n#     following disclaimer in the documentation and/or other materials provided with the distribution.\n#\n# 3.  Neither the name of the copyright holder(s) nor the names of any contributors may be used to endorse or\n#     promote products derived from this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE\n# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nINSTALL_PREFIX ?= /usr/local\n\nBUILD_DIR := ./build\nBIN_DIR := $(BUILD_DIR)/bin\nOBJ_DIR := $(BUILD_DIR)/obj\n\nLZFSE_LIB := $(BIN_DIR)/liblzfse.a\nLZFSE_CMD := $(BIN_DIR)/lzfse\nLIB_OBJS := $(OBJ_DIR)/lzfse_encode.o  $(OBJ_DIR)/lzfse_decode.o \\\n            $(OBJ_DIR)/lzfse_encode_base.o $(OBJ_DIR)/lzfse_decode_base.o \\\n            $(OBJ_DIR)/lzvn_encode_base.o $(OBJ_DIR)/lzvn_decode_base.o \\\n            $(OBJ_DIR)/lzfse_fse.o\nCMD_OBJS := $(OBJ_DIR)/lzfse_main.o\nOBJS := $(LIB_OBJS) $(CMD_OBJS)\n\nCFLAGS := -Os -Wall -Wno-unknown-pragmas -Wno-unused-variable -DNDEBUG -D_POSIX_C_SOURCE -std=c99 -fvisibility=hidden\n\nall: $(LZFSE_LIB) $(LZFSE_CMD) $(OBJS)\n\ninstall: $(LZFSE_LIB) $(LZFSE_CMD)\n\t@[ -d $(INSTALL_PREFIX)/include ] || mkdir -p $(INSTALL_PREFIX)/include\n\t@[ -d $(INSTALL_PREFIX)/lib ] || mkdir -p $(INSTALL_PREFIX)/lib\n\t@[ -d $(INSTALL_PREFIX)/bin ] || mkdir -p $(INSTALL_PREFIX)/bin\n\tinstall ./src/lzfse.h $(INSTALL_PREFIX)/include/lzfse.h\n\tinstall $(LZFSE_LIB) $(INSTALL_PREFIX)/lib/liblzfse.a\n\tinstall $(LZFSE_CMD) $(INSTALL_PREFIX)/bin/lzfse\n\n$(LZFSE_LIB): $(LIB_OBJS)\n\t@[ -d $(BIN_DIR) ] || mkdir -p $(BIN_DIR)\n\t$(LD) -r -o $(OBJ_DIR)/liblzfse_master.o $(LIB_OBJS)\n\tar rvs $@ $(OBJ_DIR)/liblzfse_master.o\n\n$(LZFSE_CMD): $(CMD_OBJS) $(LZFSE_LIB)\n\t@[ -d $(BIN_DIR) ] || mkdir -p $(BIN_DIR)\n\t$(CC) $(CFLAGS) -o $@ $(CMD_OBJS) $(LZFSE_LIB)\n\nclean:\n\t/bin/rm -rf $(BUILD_DIR)\n\n$(OBJ_DIR)/%.o: src/%.c\n\t@[ -d $(OBJ_DIR) ] || mkdir -p $(OBJ_DIR)\n\t$(CC) $(CFLAGS) -c $< -o $@\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.521484375,
          "content": "LZFSE\n=====\n\nThis is a reference C implementation of the LZFSE compressor introduced in the\n[Compression library](https://developer.apple.com/library/mac/documentation/Performance/Reference/Compression/index.html) with OS X 10.11 and iOS 9.\n\nLZFSE is a Lempel-Ziv style data compression algorithm using Finite State Entropy coding.\nIt targets similar compression rates at higher compression and decompression speed compared to deflate using zlib.\n\nFiles\n-----\n    README.md                             This file ;-)\n    Makefile                              Linux / macOS Makefile\n    lzfse.xcodeproj                       Xcode project\n\n    src/lzfse.h                           Main LZFSE header\n    src/lzfse_tunables.h                  LZFSE encoder configuration\n    src/lzfse_internal.h                  LZFSE internal header\n    src/lzfse_decode.c                    LZFSE decoder API entry point\n    src/lzfse_encode.c                    LZFSE encoder API entry point\n    src/lzfse_decode_base.c               LZFSE decoder internal functions\n    src/lzfse_encode_base.c               LZFSE encoder internal functions\n    src/lzfse_encode_tables.h             LZFSE encoder tables\n    \n    src/lzfse_fse.h                       FSE entropy encoder/decoder header\n    src/lzfse_fse.c                       FSE entropy encoder/decoder functions\n    \n    src/lzvn_decode_base.h                LZVN decoder\n    src/lzvn_decode_base.c\n    src/lzvn_encode_base.h                LZVN encoder\n    src/lzvn_encode_base.c\n    \n    src/lzfse_main.c                      Command line tool\n\nBuilding on OS X\n----------------\n\n    $ xcodebuild install DSTROOT=/tmp/lzfse.dst\n\nProduces the following files in `/tmp/lzfse.dst`:\n\n    usr/local/bin/lzfse                   command line tool\n    usr/local/include/lzfse.h             LZFSE library header\n    usr/local/lib/liblzfse.a              LZFSE library\n\nBuilding on Linux\n-----------------\n\nTested on Ubuntu 15.10 with gcc 5.2.1 and clang 3.6.2. Should work on any recent distribution.\n\n    $ make install INSTALL_PREFIX=/tmp/lzfse.dst/usr/local\n\nProduces the following files in `/tmp/lzfse.dst`:\n\n    usr/local/bin/lzfse                   command line tool\n    usr/local/include/lzfse.h             LZFSE library header\n    usr/local/lib/liblzfse.a              LZFSE library\n\nBuilding with cmake\n-------------------\n\n    $ mkdir build\n    $ cd build\n    $ cmake ..\n    $ make install\n\nInstalls the header, library, and command line tool in `/usr/local`.\n\nBindings\n--------\n\nPython: [dimkr/pylzfse](https://github.com/dimkr/pylzfse)\n\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.447265625,
          "content": "environment:\r\n  matrix:\r\n    - GENERATOR: Visual Studio 14 2015 Win64\r\n    - GENERATOR: Visual Studio 14 2015\r\n    - GENERATOR: Visual Studio 12 2013 Win64\r\n    - GENERATOR: Visual Studio 12 2013\r\n\r\nbefore_build:\r\n  - ps: |\r\n      mkdir build\r\n      cd build\r\n      cmake -G \"$env:GENERATOR\" ..\r\n\r\nbuild_script:\r\n  - ps: |\r\n      cmake --build . --config Debug\r\n\r\ntest_script:\r\n  - ps: |\r\n      ctest --output-on-failure --interactive-debug-mode 0 -C Debug\r\n"
        },
        {
          "name": "lzfse.xcodeproj",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}