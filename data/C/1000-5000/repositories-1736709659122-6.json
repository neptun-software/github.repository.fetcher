{
  "metadata": {
    "timestamp": 1736709659122,
    "page": 6,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tboox/tbox",
      "stars": 4931,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2607421875,
          "content": "*.a\n*.b\n*.o\n*.exe\n*.obj\n*.dll\n*.lib\n*.out\n*.suo\n*~\n*.swp\n*.swo\n*.bak\n*.orig\n*.pdb\n*.idb\n*.ilk\n*.gcov\n*.gcda\n*.gcno\n*.gch\n*.gch.d\n*.stackdump\n*.manifest\n.ccache\n.xmake\nbuild\n.svn\n.DS_Store\ncscope.*\ngmon.out\ntags\nDoxyfile\n.vscode\n.idea\nCMakeLists.txt\nMakefile\nmakefile\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 18.09375,
          "content": "# Changelog  ([中文](#中文))\n\n## master (unreleased)\n\n### New features\n\n* [#269](https://github.com/tboox/tbox/pull/269): Add buffer stream\n\n## v1.7.6\n\n### New features\n\n* Support cosmocc toolchain\n\n### Changes\n\n* Implement copy symlinks on windows\n\n## v1.7.5\n\n### Changes\n\n* Improve to check interfaces\n* Improve process to output same pipes\n\n## v1.7.4\n\n### New features\n\n* Add Haiku support\n* Add tb_file_fscase\n\n### Changes\n\n* Improve wasm support\n* Improve to kill processes\n* Improve xmake.sh\n\n### Bugs fixed\n\n* Fix setenv for msys/mingw\n* Fix compile error for mingw\n* Fix tb_buffer_memsetp\n\n## v1.7.3\n\n### Changes\n\n* Improve support for xp and mingw\n* Improve configure to support debian package better\n\n## v1.7.2\n\n### New features\n\n* [#201](https://github.com/tboox/tbox/pull/201): Add xmake.sh\n\n### Changes\n\n* Improve path for windows, support UNC and dos device path\n\n### Bugs Fixed\n\n* [#199](https://github.com/tboox/tbox/issues/199): Fix tb_strcmp\n\n## v1.7.1\n\n### New features\n\n* [#190](https://github.com/tboox/tbox/pull/190): Add fs watcher\n* Add `tb_file_touch` api\n\n### Changes\n\n* Support wasm\n* Support arm64 for windows\n* Improve tb_file_info to detect symlink\n* Improve tb_file_copy to support symlink\n* Improve tb_directory_copy to support symlink\n\n## v1.6.9\n\n### Changes\n\n* Improve bloom filter\n* Improve random for msvc\n\n### Bugs Fixed\n\n* [#187](https://github.com/tboox/tbox/issues/187): Fix sort and iterator bug\n\n## v1.6.8\n\n### Changes\n\n* Add riscv32/riscv64/sh4/sparc support\n* Improve path support\n* Add peer name for socket\n\n### Bugs Fixed\n\n* [#178](https://github.com/tboox/tbox/issues/178): Fix coroutine on windows/x86\n\n## v1.6.7\n\n### Changes\n\n* Support coroutine for mingw\n* Improve process poller to support to wait more processes on windows\n\n### Bugs Fixed\n\n* [#175](https://github.com/tboox/tbox/issues/175): Fix coroutine crash on windows\n* Fix some compilation errors\n\n## v1.6.6\n\n### New features\n\n* Support *BSD system, e.g. FreeBSD ..\n\n### Changes\n\n* Support to change the current directory for process\n* Support stdin for creating process\n* Fix some compilation errors for mingw\n\n## v1.6.5\n\n### New features\n\n* [#112](https://github.com/tboox/tbox/issues/112): Support unix socket，thanks [@Codehz](https://github.com/codehz)\n* Support to wait pipe, socket and process in coroutine and poller at same time\n\n### Changes\n\n* improve uuid and improve uuid v4\n* support msys/mingw and cygwin/gcc toolchains\n\n## v1.6.4\n\n### New features\n\n* [#70](https://github.com/tboox/tbox/issues/70): Add `tb_stream_init_from_sock_ref()` to open a given socket as stream\n* Add stdfile api to read/write stdin, stdout and stderr.\n* [#81](https://github.com/tboox/tbox/issues/81): Add set/get thread/process cpu affinity\n* Add filelock api\n* Add anonymous and named pipe\n\n### Changes\n\n* Optimize queue_buffer module\n* Improve stream interfaces\n* Improve charset encoding and add ANSI support\n* Improve atomic and add c11-like atomic apis\n* Improve spinlock\n* Support to redirect process output to pipe\n* Uses virtual memory for coroutine stack\n* Improve openssl/mbedtls for https\n\n## v1.6.3\n\n### New features\n\n* [#24](https://github.com/tboox/tbox/issues/24): Support IOCP for coroutine on windows\n\n### Changes\n\n* Move docs directory to tbox-docs repo\n* Support tinyc compiler\n* Remove deprecated module (asio), please use coroutine module\n* Improve memory for container\n* Help valgrind to understand coroutines\n\n### Bugs fixed\n\n* Fix the charset problem of envirnoment variables\n* Fix process exit bug\n* Fix setenv empty value crash\n* Fix coroutine.sleep bug\n* Fix windows root path bug\n* Fix thread local memory leak\n* Fix context bug for coroutine\n* Fix `tb_vsnprintf` overflow\n* [#43](https://github.com/tboox/tbox/issues/43): Fix read dns server and stream bug\n\n## v1.6.2\n\n### New features\n\n* Add ping demo for network\n\n### Changes\n\n* Modify license to Apache License 2.0\n* Rename `--smallest=y|n` option to `--small=y|n`\n* Support stat64\n* Improve copy speed and fix permissions for `tb_file_copy`\n* Improve path operation for posix platform\n* Improve socket interfaces and support icmp\n\n### Bugs fixed\n\n* Fix create file mode to 0644\n* Fix file and directory path bug\n* Fix remove directory with dead symbol link failed\n* Fix remove readonly file failed\n* [#34](https://github.com/tboox/tbox/issues/34): Fix cache time and coroutine sleep bug\n* [#35](https://github.com/tboox/tbox/issues/35): Fix epoll bug with the edge trigger mode\n\n## v1.6.1\n\n### New features\n\n* Support coroutine context switch for mips\n* Add `__tb_thread_local__` keyword macro\n* Add `--micro=y|n` option to compiling micro library (~64K) for the embed system\n* Add `tb_addrinfo_addr` and `tb_addrinfo_name` interfaces\n* Add stackless coroutine\n* Add semaphone and lock for the stackless coroutine\n\n### Changes\n\n* Optimize io scheduler for coroutine, cache events for poller\n* Add c11 `_Static_assert`\n* Remove some deprecated interfaces for hash and platform\n\n## v1.6.0\n\n### New features\n\n* Support make command and compile directly without xmake\n* Add switch context interfaces into platform module\n* Add coroutine module (supports i386, x86_64, arm, arm64, mips ..)\n* Add simple http server demo using coroutine\n* Add simple spider using coroutine\n* Add io poller interfaces(with epoll, poll, kqueue, select)\n* Support mbedtls ssl library\n* All io modules(stream, socket, http, ..) support coroutine mode\n* Provide lock, semaphone and channel for coroutine\n\n### Changes\n\n* Optimize and rewrite thread local store module\n* Modify thread interfaces\n* Mark the asio module as deprecated\n* Optimize exception interfaces\n\n### Bugs fixed\n\n* Fix some warning and errors for compiler\n* Fix some thread bugs\n* Fix parse bplist uid type\n\n## v1.5.3\n\n### New features\n\n* Add wait multi-processes interface\n* Add uuid generator\n* Add hash library module\n* Add `__tb_deprecated__` keyword and option\n\n### Changes\n\n* Move some utils interfaces to the hash module\n* Rewrite random generator\n\n### Bugs fixed\n\n* Fix stdout compatibility issue for vs2015\n* Fix process arguments length limit\n\n## v1.5.2\n\n### New features\n\n* Add smallest configure option\n* Add process operation interfaces\n\n### Changes\n\n* Improve envirnoment interfaces\n* Modify xmake.lua for supporting xmake v2.x\n\n### Bugs fixed\n\n* Fix ltimer bug\n* Fix asio memory leaks bug\n* Fix asio httpd response bug on linux\n* Fix path bug for windows\n\n## v1.5.1\n\n### New features\n\n* Add automaticlly check libc interfaces\n* Support custom allocator\n* Add trace for allocator in the debug mode\n* Add `static_pool` module\n* Add stream interfaces for reading all data to string\n* Add adler32 hash algorithm\n* Add `tb_memmem` interface\n* Add regex module with pcre, pcre2 or posix regex\n\n### Changes\n\n* Optimize stream and support read/write character device file\n* Modify `tb_init` api and support allocator arguments\n* Improve memory manager and use the allocator mode\n* Redefine `assert` and will abort for debug mode\n\n### Bugs fixed\n\n* Fix some bugs for android\n* Fix seek bug for stream\n\n<h1 id=\"中文\"></h1>\n\n# 更新日志\n\n## master (开发中)\n\n### 新特性\n\n* [#269](https://github.com/tboox/tbox/pull/269): 添加 buffer 流\n\n## v1.7.6\n\n### 新特性\n\n* 增加对 cosmocc 工具链支持\n\n### 改进\n\n* 改进 copyfile 支持，在 windows 实现对 symlinks 的复制\n\n## v1.7.5\n\n### 改进\n\n* 改进接口检测\n* 改进 windows 进程输出，支持同时输出到同一个管道\n\n## v1.7.4\n\n### 新特性\n\n* 添加 Haiku 支持\n* 添加 tb_file_fscase 接口判断文件大小写敏感\n\n### 改进\n\n* 改进 wasm 支持\n* 改进退出子进程\n* 改进 xmake.sh\n\n### Bugs 修复\n\n* 修复 msys/mingw 下 setenv 设置问题\n* 修复 mingw 编译错误\n* 修复 tb_buffer_memsetp\n\n## v1.7.3\n\n### 改进\n\n* 改进对 xp 和 mingw 的支持\n* 改进 configure 构建脚本，更好的支持 debian 打包\n\n## v1.7.2\n\n### 新特性\n\n* [#201](https://github.com/tboox/tbox/pull/201): 添加 xmake.sh\n\n### 改进\n\n* 改进 windows 下根路径处理，支持 UNC 和 dos 设备路径格式\n\n### Bugs 修复\n\n* [#199](https://github.com/tboox/tbox/issues/199): 修复 tb_strcmp\n\n## v1.7.1\n\n### 新特性\n\n* [#190](https://github.com/tboox/tbox/pull/190): 添加文件系统状态监视器\n* 添加 `tb_file_touch` 接口\n\n### 改进\n\n* 支持 wasm\n* 支持 arm64 windows\n* 改进 tb_file_info，支持判断符号链接\n* 改进 tb_file_copy 支持符号链接\n* 改进 tb_directory_copy 支持符号链接\n\n## v1.6.9\n\n### 改进\n\n* 改进 bloom filter\n* 改进 windows/msvc 下 random 实现\n\n### Bugs 修复\n\n* [#187](https://github.com/tboox/tbox/issues/187): 修复排序和迭代器问题\n\n## v1.6.8\n\n### 改进\n\n* 添加 riscv32/riscv64/sh4/sparc 架构支持\n* 改进路径支持\n* 为 socket 添加 peer name 接口\n\n### Bugs 修复\n\n* [#178](https://github.com/tboox/tbox/issues/178): 修复协程在 windows/x86 上栈溢出问题\n\n## v1.6.7\n\n### 改进\n\n* 改进协程，增加对 mingw 支持\n* 改进 process poller 支持在 windows 上等待更多进程\n\n### Bugs 修复\n\n* [#175](https://github.com/tboox/tbox/issues/175): 修复协程在 windows 上崩溃\n* 修复一些编译问题\n\n## v1.6.6\n\n### 新特性\n\n* 支持*BSD系统，例如：FreeBSD\n\n### 改进\n\n* 创建进程支持修改处理当前工作目录\n* 创建禁止支持 stdin 重定向输入\n* 修复一些 mingw 上的编译错误\n\n## v1.6.5\n\n### 新特性\n\n* [#112](https://github.com/tboox/tbox/issues/112): 新增unix socket支持，感谢[@Codehz](https://github.com/codehz)的贡献\n* 在协程和poller中支持同时等待和调度socket，pipe io和process\n\n### 改进\n\n* 改进uuid生成，实现uuid v4\n* 支持msys/mingw和cygwin/gcc上编译\n\n## v1.6.4\n\n### 新特性\n\n* [#70](https://github.com/tboox/tbox/issues/70): 添加`tb_stream_init_from_sock_ref()`接口去直接打开一个socket作为stream去读取数据。\n* 添加stdfile接口去读写stdin, stdout和stderr。\n* [#81](https://github.com/tboox/tbox/issues/81): 添加对进程和线程的cpu亲缘性设置和获取\n* 添加filelock文件锁跨平台api接口\n* 添加匿名管道，命名管道支持\n\n### 改进\n\n* 优化queue_buffer模块\n* 改进stream接口实现\n* 改进字符集编码转换，以及增加对ANSI编码的支持\n* 改进原子操作，并增加c11风格原子接口\n* 改进spinlock实现\n* 新增进程输出重定向到管道\n* 针对协程栈使用虚拟内存\n* 改进基于openssl/mbedtls的https访问\n\n## v1.6.3\n\n### 新特性\n\n* [#24](https://github.com/tboox/tbox/issues/24): 针对windows平台下的协程处理，增加IOCP支持\n\n### 改进\n\n* 移除docs目录，放置到独立tbox-docs仓库，减少tbox.zip包大小\n* 支持tinyc编译器\n* 移除被废弃的模块（asio模块，先用coroutine代替）\n* 精简优化容器库内存资源使用\n* 帮助valgrind更好的理解coroutine\n\n### Bugs修复\n\n* 修复windows环境变量的中文编码问题\n* 修复后台进程退出问题\n* 修复设置环境变量值为空时的崩溃问题\n* 修复协程sleep超时覆写数据的bug\n* 修复windows根路径问题\n* 修复tls线程存储内存泄露问题\n* 修复context切换问题\n* 修复`tb_vsnprintf`栈溢出问题\n* [#43](https://github.com/tboox/tbox/issues/43): 修复读取dns服务器以及stream读取bug\n\n## v1.6.2\n\n### 新特性\n\n* 增加ping测试程序\n\n### 改进\n\n* 修改license，使用更加宽松的Apache License 2.0\n* 重命名`--smallest=y|n`选项到`--small=y|n`\n* 使用`stat64`支持大文件信息获取\n* 改进`tb_file_copy`，更加快速的文件copy，并且修复copy后文件权限丢失问题\n* 改进posix平台下的路径操作\n* 改进socket初始化接口，支持icmp协议\n\n### Bugs修复\n\n* 修复创建文件权限不对问题\n* 修复文件和目录路径问题\n* 修复无法移除带有无效软链的目录问题\n* 修复无法移除只读文件问题\n* [#34](https://github.com/tboox/tbox/issues/34): 修复缓存时间和协程sleep不准问题\n* [#35](https://github.com/tboox/tbox/issues/35): 修复epoll边缘触发模式下，centos上检测连接关闭失效问题\n\n## v1.6.1\n\n### 新特性\n\n* 针对协程上下文切换，支持mips架构\n* 添加`__tb_thread_local__`关键字宏\n* 添加 `--micro=y|n` 选项，实现极小编译，针对嵌入式平台，编译tbox微内核(~64K)\n* 添加 `tb_addrinfo_addr` and `tb_addrinfo_name` 接口\n* 添加stackless协程，更加轻量的协程支持，每个协程只占用几十个bytes，同时支持io调度\n* 针对stackless协程，增加lock和semaphone支持\n\n### 改进\n\n* 为协程优化io调度器，缓存poller轮询等待，减少频繁重复调用epoll_ctl, kevent等系统接口\n* 添加对c11关键字`_Static_assert`的支持\n* 针对hash和platform模块，移除一些废弃的接口\n\n## v1.6.0\n\n### 新特性\n\n* 支持make进行直接编译（会去自动下载xmake进行构建）\n* 在平台库中，添加切换context上下文接口（参考boost.context实现原理进行重写，并对部分架构进行优化）\n* 新增跨平台协程模块（支持i386, x86_64, arm, arm64, mips），提供更加易用的高性能并发编程模式\n* 新增基于协程的各种服务器开发实例（包括：简单轻量的http服务器，爬虫。。）\n* 新增poller轮询器接口，实现对epoll, poll, kqueue, select的封装，逐步取代老的aiop接口\n* 新增mbedtls ssl库接口支持，目前已支持：openssl, polarssl, mbedtls\n* tbox所有stream, socket, http, dns, ssl 等io相关操作，原生支持协程模式，并且可以在线程和协程间随意切换\n* 为协程提供lock, semaphone, channel模块\n\n### 改进\n\n* 优化和重构线程局部存储TLS模块\n* 修改部分线程接口\n* asio模块被标记为废弃接口，下个版本将会被移除，逐步使用协程模式来实现异步io开发\n* 优化异常捕获接口\n\n### Bugs修复\n\n* 修复一些编译警告和错误\n* 修复一些线相关bug\n* 修复bplist中解析uid类型失败问题\n\n## v1.5.3\n\n### 新特性\n\n* 增加同时等待多个进程接口\n* 增加uuid生成器\n* 增加hash库模块\n* 添加`__tb_deprecated__`关键字以及配置选项\n\n### 改进\n\n* 移动部分utils接口到hash模块\n* 重写random生成器\n\n### Bugs修复\n\n* 修复stdout在vs2015以上版本的兼容性问题\n* 修复进程参数长度限制\n\n## v1.5.2\n\n### 新特性\n\n* 增加smallest参数配置选项，实现一键配置最小化编译，禁用所有扩展模块和依赖库\n* 增加进程创建和控制接口\n\n### 改进\n\n* 增强环境变量设置接口\n* 修改xmake.lua支持最新版xmake v2.x, 简化编译配置\n\n### Bugs修复\n\n* 修复ltimer定时器不准问题\n* 修复asio部分内存泄露问题\n* 修复asio/httpd在linux下keepalive模式，响应很慢问题\n* 修复windows下路径处理的一些bug\n\n## v1.5.1\n\n### 新特性\n\n* 自动检测所有系统libc接口，优先使用系统版本\n* 支持自定义内存分配器，并且能够在debug模式下，获取每次分配的代码位置信息，用于自定义追踪\n* 增加轻量级`static_pool`来维护整块buffer的内存分配，适合局部管理部分内存，pool虽然也能维护，但是底层基于`large_pool`，比较重量级，适合全局管理内存\n* 增加stream快速读取全部数据到string的接口\n* 增加adler32 hash算法\n* 增加`tb_memmem`接口\n* 采用pcre/pcre2/posix regex实现正则表达式库\n\n### 改进\n\n* 优化stream，支持对字符设备文件的读写\n* 修改`tb_init`接口，增加allocator自定义内存分配器参数，实现用户的侵入式内存管理\n* 重构内存管理，完全采用分配器allocator模式，可以灵活切换内存管理，支持原生系统内存、静态buffer内存、内存池等各种分配方式\n* 重定义assert，debug模式遇到assert直接abort执行\n\n### Bugs修复\n\n* 修复android下的一些bug\n* 修复stream的seek问题\n\n## v1.5.0\n\n### 新特性\n\n* 增加跨平台环境变量操作接口\n\n### 改进\n\n* 重建整个编译架构，采用xmake跨平台自动构建工具进行构建。。\n* 优化.pkg的依赖包机制，支持依赖库和接口的自动检测，针对libc、libm优先使用自动检测到的系统库接口实现，如果当前平台没有实现则使用tbox的自己实现版本，使得最大化性能和跨平台性。。\n* 完善和优化路径操作，增加相对路径、绝对路径的相互转换\n\n### Bugs修复\n\n* 修复strlcpy等一些libc接口的实现bug\n\n## v1.4.8\n\n### 新特性\n\n* 新增路径操作接口，支持相对路径、绝对路径相互转换\n\n### 改进\n\n* 重建整个makefile架构，采用`*.pkg`依赖包模式模块化对第三方库的依赖，降低耦合\n* 默认编译配置可以自动探测当前平台支持的依赖包，注：所有依赖包都是可选的，如果要最小化编译，可以完全禁用\n* 编译生成的所有库和头文件，也都安装成独立`*.pkg`格式，方便集成到其他开发平台，也方便copy\n* 增强object路径解析接口，支持json, xml宏路径解析，并增加实用json解析工具：jcat\n* 实现通用ipaddr结构，统一接口，全面支持ipv6/ipv4，stream/http的url也完全支持ipv6格式解析\n* 重命名hash为`hash_map`，并新增`hash_set`容器\n\n## v1.4.7\n\n### 改进\n\n* 增强fixed16定点类型的接口，优化部分接口性能，调试模式下增加更多的溢出检测\n* 优化整数平方根的实现，增加对64位整数平方根的快速计算\n\n### Bugs修复\n\n* 修复string空字符串bug\n* 修复windows下asio的一些bug\n* 修复一些编译问题\n\n## v1.4.7_rc1\n\n### 新特性\n\n* 增加asio模块，支持各种异步socket/file操作，支持异步dns、ssl（依赖polarssl/openssl）、http\n* 增加http cookie支持，完善http客户端协议\n* 增加sql数据库模块，依赖sqlite3/mysql\n* 增加object模块\n* 新增min/max heap容器，新增`list_entry`、`single_list_entry`等外置轻量链表实现，和`list`、`single_list`不同的是，不需要维护内部内存，而且更加灵活，新增bloom_filter\n* 新增remove、walk、count、for等常用算法支持\n* 新增线程池、定时器、信号量、自旋锁、atomic64等常用系统操作\n* 新增http服务器、http爬虫、http下载器等实用性demo\n\n### 改进\n\n* 重构stream模块，并新增`async_stream`、`async_transfer`、`transfer_pool`等新特性。\n* 优化和完善libc、libm的接口\n* 重构整个内存管理架构，完善内存检测的支持，优化内存使用和效率\n\n### Bugs修复\n\n* 修复和优化xml解析模块\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.7958984375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at [waruqi@gmail.com]. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\n# Contributor Covenant行为准则\n\n# 参与者公约\n\n## 我们的保证\n\n为了促进一个开放透明且友好的环境，我们作为贡献者和维护者保证：无论年龄、种族、民族、性别认同和表达（方式）、体型、身体健全与否、经验水平、国籍、个人表现、宗教或性别取向，参与者在我们项目和社区中都免于骚扰。\n\n## 我们的标准\n\n有助于创造正面环境的行为包括但不限于：\n\n* 使用友好和包容性语言\n* 尊重不同的观点和经历\n* 耐心地接受建设性批评\n* 关注对社区最有利的事情\n* 友善对待其他社区成员\n\n身为参与者不能接受的行为包括但不限于：\n\n* 使用与性有关的言语或是图像，以及不受欢迎的性骚扰\n* 捣乱/煽动/造谣的行为或进行侮辱/贬损的评论，人身攻击及政治攻击\n* 公开或私下的骚扰\n* 未经许可地发布他人的个人资料，例如住址或是电子地址\n* 其他可以被合理地认定为不恰当或者违反职业操守的行为\n\n## 我们的责任\n\n项目维护者有责任为「可接受的行为」标准做出诠释，以及对已发生的不被接受的行为采取恰当且公平的纠正措施。\n\n项目维护者有权利及责任去删除、编辑、拒绝与本行为标准有所违背的评论 (comments)、提交 (commits)、代码、wiki 编辑、问题 (issues) 和其他贡献，以及项目维护者可暂时或永久性的禁止任何他们认为有不适当、威胁、冒犯、有害行为的贡献者。\n\n## 使用范围\n\n当一个人代表该项目或是其社区时，本行为标准适用于其项目平台和公共平台。\n\n代表项目或是社区的情况，举例来说包括使用官方项目的电子邮件地址、通过官方的社区媒体账号发布或线上或线下事件中担任指定代表。\n\n该项目的呈现方式可由其项目维护者进行进一步的定义及解释。\n\n## 强制执行\n\n可以通过[waruqi@gmail.com]，来联系项目团队来举报滥用、骚扰或其他不被接受的行为。\n\n任何维护团队认为有必要且适合的所有投诉都将进行审查及调查，并做出相对应的回应。项目小组有对事件回报者有保密的义务。具体执行的方针近一步细节可能会单独公布。\n\n没有切实地遵守或是执行本行为标准的项目维护人员，可能会因项目领导人或是其他成员的决定，暂时或是永久地取消其参与资格。\n\n## 来源\n\n本行为标准改编自[贡献者公约][主页]，版本 1.4\n可在此观看https://www.contributor-covenant.org/zh-cn/version/1/4/code-of-conduct.html\n\n[主页]: https://www.contributor-covenant.org\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.28515625,
          "content": "# Contributing\n\nIf you discover issues, have ideas for improvements or new features, or\nwant to contribute a new module, please report them to the\n[issue tracker][1] of the repository or submit a pull request. Please,\ntry to follow these guidelines when you do so.\n\n## Issue reporting\n\n* Check that the issue has not already been reported.\n* Check that the issue has not already been fixed in the latest code\n  (a.k.a. `master`).\n* Be clear, concise and precise in your description of the problem.\n* Open an issue with a descriptive title and a summary in grammatically correct,\n  complete sentences.\n* Include any relevant code to the issue summary.\n\n## Pull requests\n\n* Use a topic branch to easily amend a pull request later, if necessary.\n* Write good commit messages.\n* Use the same coding conventions as the rest of the project.\n* Ensure your edited codes with four spaces instead of TAB.\n* Please commit code to `dev` branch and we will merge into `master` branch in feature\n* Before adding new features and new modules, please go to issues to submit the relevant feature description first\n\n# 贡献代码\n\n如果你发现一些问题，或者想新增或者改进某些新特性，或者想贡献一个新的模块\n那么你可以在[issues][1]上提交反馈，或者发起一个提交代码的请求(pull request).\n\n## 问题反馈\n\n* 确认这个问题没有被反馈过\n* 确认这个问题最近还没有被修复，请先检查下 `master` 的最新提交\n* 请清晰详细地描述你的问题\n* 如果发现某些代码存在问题，请在issue上引用相关代码\n\n## 提交代码\n\n* 请先更新你的本地分支到最新，再进行提交代码请求，确保没有合并冲突\n* 编写友好可读的提交信息\n* 请使用与工程代码相同的代码规范\n* 请提交代码到`dev`分支，如果通过，我们会在特定时间合并到`master`分支上\n* 为了规范化提交日志的格式，commit消息，不要用中文，请用英文描述\n* 增加新特性和新模块之前，请先到issues提交相关特性说明，经过讨论评估确认后，再进行相应的代码提交，避免做无用工作\n\n## 编码规范\n\n代码需要符合tbox的编码风格，保证整体风格一致，这样可读性会更好，也更容易维护，下面列举一些风格描述。\n\n* 空格缩进、填充，4字符宽度，不允许出现任意tab字符\n* 换行符'\\n'，不要用'\\r\\n'\n* 文件utf8编码，不允许其他编码格式，例如：gbk\n* 全英文注释，public接口注释采用doxygen风格\n* 类unix命名规范：小写 + 下划线，例如：`aaa_bb_cc`，不允许任何大写字符\n* 接口名、宏定义等必须带：`tb_`, `TB_`前缀\n* 需要使用tbox提供的基础类型，例如：`tb_size_t`\n* if, while, for等关键字之后，带一个空格，例如：`if ()`, `for (; ;)`\n* 如果if, for的body只有一行代码，不需要写大括号\n* {}块，换行对称\n* 局部变量定义不需要遵循c89风格，定义位置尽量靠近实际使用的地方\n* 函数取参，返回值处理，需要有assert检测\n* 宏定义大写，其他都小写\n* 除非必要，尽量使用`tb_size_t`, `tb_long_t`类型，而不是`tb_int_t`\n* 接口定义、接口实现、宏定义、全局变量、include等布局风格必须一致，风格可参考实际代码\n\n\n[1]: https://github.com/tboox/tbox/issues\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 14.1484375,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2009-present TBOOX Open Source Group\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n-------------------------------------------------------------------------------\n## SUBCOMPONENTS\n\nThe TBOX project contains subcomponents with separate copyright\nnotices and license terms. Your use of the source code for the these\nsubcomponents is subject to the terms and conditions of the following\nlicenses.\n\n#### Boost Software License\n\nBoost Software License - Version 1.0 - August 17th, 2003\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\nFor src/tbox/platform/arch/{arm,arm64,mips,x86,x64}/context.{S,asm}:\n\n```\n/*\n            Copyright Oliver Kowalke 2009.\n   Distributed under the Boost Software License, Version 1.0.\n      (See accompanying file LICENSE_1_0.txt or copy at\n            http://www.boost.org/LICENSE_1_0.txt)\n*/\n```\n\n\n#### ZLib License\n\nCopyright (C) 1995-2010 Jean-loup Gailly and Mark Adler\n\nThis software is provided 'as-is', without any express or implied\nwarranty.  In no event will the authors be held liable for any damages\narising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n\n1. The origin of this software must not be misrepresented; you must not\n   claim that you wrote the original software. If you use this software\n   in a product, an acknowledgment in the product documentation would be\n   appreciated but is not required.\n2. Altered source versions must be plainly marked as such, and must not be\n   misrepresented as being the original software.\n3. This notice may not be removed or altered from any source distribution.\n\nJean-loup Gailly\nMark Adler\n\nFor src/tbox/hash/adler32.c:\n\n```\n/* adler32.c -- compute the Adler-32 checksum of a data stream\n * Copyright (C) 1995-2011, 2016 Mark Adler\n * For conditions of distribution and use, see copyright notice in zlib.h\n */\n```\n"
        },
        {
          "name": "NOTICE.md",
          "type": "blob",
          "size": 2.1318359375,
          "content": "The Treasure Box Library\nCopyright 2009-present The TBOOX Open Source Group\n\nThis product includes software developed by The TBOOX Open Source Group (https://tboox.org/).\n\n-------------------------------------------------------------------------------\nThis product contains a modified portion of 'boost.context', a coroutine context\nimplementation for assembler code, which can be obtained at:\n\n  * LICENSE:\n    * http://www.boost.org/LICENSE_1_0.txt (Boost Software License 1.0)\n  * HOMEPAGE:\n    * http://www.boost.org\n\nThis product contains a modified portion of 'zlib.adler32', compute the Adler-32\nchecksum of a data stream, which can be obtained at:\n\n  * LICENSE:\n    * pkg/zlib.pkg/LICENSE.md (Zlib License)\n  * HOMEPAGE:\n    * http://zlib.net/\n\nThis product optionally depends on 'pcre', a library of functions to support regular\nexpressions, which can be obtained at:\n\n  * LICENSE:\n    * pkg/pcre.pkg/LICENSE.md (BSD License)\n  * HOMEPAGE:\n    * http://www.pcre.org/\n\nThis product optionally depends on 'pcre2', a library of functions to support regular\nexpressions, which can be obtained at:\n\n  * LICENSE:\n    * pkg/pcre2.pkg/LICENSE.md (BSD License)\n  * HOMEPAGE:\n    * http://www.pcre.org/\n\nThis product optionally depends on 'mbedtls', an open source, portable, easy to use,\nreadable and flexible SSL library, which can be obtained at:\n\n  * LICENSE:\n    * pkg/mbedtls.pkg/LICENSE.md (Apache License 2.0)\n  * HOMEPAGE:\n    * https://tls.mbed.org/\n\nThis product optionally depends on 'polarssl', an open source, portable, easy to use,\nreadable and flexible SSL library, which can be obtained at:\n\n  * LICENSE:\n    * pkg/polarssl.pkg/LICENSE.md (GPL 2.0)\n  * HOMEPAGE:\n    * https://tls.mbed.org/\n\nThis product optionally depends on 'openssl', a TLS/SSL and crypto library,\nwhich can be obtained at:\n\n  * LICENSE:\n    * pkg/openssl.pkg/LICENSE.md (OpenSSL License and SSLeay license)\n  * HOMEPAGE:\n    * https://www.openssl.org/\n\nThis product optionally depends on 'sqlite3', a self-contained, high-reliability, embedded,\nfull-featured, public-domain, SQL database engine, which can be obtained at:\n\n  * LICENSE:\n    * Public Domain\n  * HOMEPAGE:\n    * http://sqlite.org/\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.2705078125,
          "content": "<div align=\"center\">\n\n  <a href=\"https://docs.tboox.org\">\n    <img width=\"160\" heigth=\"160\" src=\"https://docs.tboox.org/assets/img/logo_text.png\">\n  </a>\n\n  <div>\n    <a href=\"https://github.com/tboox/tbox/actions?query=workflow%3AWindows\">\n      <img src=\"https://img.shields.io/github/actions/workflow/status/tboox/tbox/windows.yml?branch=dev&style=flat-square&logo=windows\" alt=\"github-ci\" />\n    </a>\n    <a href=\"https://github.com/tboox/tbox/actions?query=workflow%3ALinux\">\n      <img src=\"https://img.shields.io/github/actions/workflow/status/tboox/tbox/linux.yml?branch=dev&style=flat-square&logo=linux\" alt=\"github-ci\" />\n    </a>\n    <a href=\"https://github.com/tboox/tbox/actions?query=workflow%3AmacOS\">\n      <img src=\"https://img.shields.io/github/actions/workflow/status/tboox/tbox/macos.yml?branch=dev&style=flat-square&logo=apple\" alt=\"github-ci\" />\n    </a>\n    <a href=\"https://github.com/tboox/tbox/actions?query=workflow%3AAndroid\">\n      <img src=\"https://img.shields.io/github/actions/workflow/status/tboox/tbox/android.yml?branch=dev&style=flat-square&logo=android\" alt=\"github-ci\" />\n    </a>\n    <a href=\"https://github.com/tboox/tbox/releases\">\n      <img src=\"https://img.shields.io/github/release/tboox/tbox.svg?style=flat-square\" alt=\"Github All Releases\" />\n    </a>\n  </div>\n  <div>\n    <a href=\"https://github.com/tboox/tbox/blob/master/LICENSE.md\">\n      <img src=\"https://img.shields.io/github/license/tboox/tbox.svg?colorB=f48041&style=flat-square\" alt=\"license\" />\n    </a>\n    <a href=\"https://www.reddit.com/r/tboox/\">\n      <img src=\"https://img.shields.io/badge/chat-on%20reddit-ff3f34.svg?style=flat-square\" alt=\"Reddit\" />\n    </a>\n    <a href=\"https://gitter.im/tboox/tboox?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\">\n      <img src=\"https://img.shields.io/gitter/room/tboox/tboox.svg?style=flat-square&colorB=96c312\" alt=\"Gitter\" />\n    </a>\n    <a href=\"https://t.me/tbooxorg\">\n      <img src=\"https://img.shields.io/badge/chat-on%20telegram-blue.svg?style=flat-square\" alt=\"Telegram\" />\n    </a>\n    <a href=\"https://jq.qq.com/?_wv=1027&k=5hpwWFv\">\n      <img src=\"https://img.shields.io/badge/chat-on%20QQ-ff69b4.svg?style=flat-square\" alt=\"QQ\" />\n    </a>\n    <a href=\"https://tboox.org/donation/\">\n      <img src=\"https://img.shields.io/badge/donate-us-orange.svg?style=flat-square\" alt=\"Donate\" />\n    </a>\n  </div>\n\n  <p>A glib-like cross-platform C library</p>\n</div>\n\n## Supporting the project\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. 🙏 [[Become a sponsor](https://docs.tboox.org/#/about/sponsor)]\n\n<a href=\"https://opencollective.com/tbox#backers\" target=\"_blank\"><img src=\"https://opencollective.com/tbox/backers.svg?width=890\"></a>\n\n## Introduction ([中文](/README_zh.md))\n\nTBOX is a glib-like cross-platform C library that is simple to use yet powerful in nature.\n\nThe project focuses on making C development easier and provides many modules (.e.g stream, coroutine, regex, container, algorithm ...),\nso that any developer can quickly pick it up and enjoy the productivity boost when developing in C language.\n\nIt supports the following platforms: Windows, Macosx, Linux, Android, iOS, *BSD and etc.\n\nAnd it provides many compiling options using [xmake](https://github.com/xmake-io/xmake):\n\n* Release: Disable debug information, assertion, memory checking and enable optimization.\n* Debug: Enable debug information, assertion, memory checking and disable optimization.\n* Small: Disable all extensional modules and enable space optimization.\n* Micro: compiling micro library (~64K) for the embed system.\n\nIf you want to know more, please refer to: [Documents](https://docs.tboox.org/#/getting_started), [Github](https://github.com/tboox/tbox) and [Gitee](https://gitee.com/tboox/tbox)\n\n## Features\n\n#### The stream library\n\n- Supports file, data, http and socket source\n- Supports the stream filter for gzip, charset and...\n- Implements stream transfer\n- Implements the static buffer stream for parsing data\n- Supports coroutine and implements asynchronous operation\n\n#### The coroutine library\n\n- Provides high-performance coroutine switch\n- Supports arm, arm64, x86, x86_64 ..\n- Provides channel interfaces\n- Provides semaphore and lock interfaces\n- Supports io socket and stream operation in coroutine\n- Provides some io servers (http ..) using coroutine\n- Provides stackfull and stackless coroutines\n- Support epoll, kqueue, poll, select and IOCP\n- Support to wait pipe, socket and process in coroutine and poller at same time\n\n#### The database library\n\n- Supports mysql and sqlite3 database and enumerates data using the iterator mode\n\n#### The xml parser library\n\n- Supports DOM and SAX mode and Supports xpath\n\n#### The serialization and deserialization library\n\n- Supports xml, json, bplist, xplist, binary formats\n\n#### The memory library\n\n- Implements some memory pools for optimizing memory\n- Supports fast memory error detecting. it can detect the following types of bugs for the debug mode:\n  - out-of-bounds accesses to heap and globals\n  - use-after-free\n  - double-free, invalid free\n  - memory leaks\n\n#### The container library\n\n- Implements hash table, single list, double list, vector, stack, queue\n  and min/max heap. Supports iterator mode for algorithm\n\n#### The algorithm library\n\n- Uses the iterator mode\n- Implements find, binary find and reverse find algorithm\n- Implements sort, bubble sort, quick sort, heap sort and insert sort algorithm\n- Implements count, walk items, reverse walk items, for_all and rfor_all\n\n#### The network library\n\n- Implements dns(cached)\n- Implements ssl(openssl, polarssl, mbedtls)\n- Implements http\n- Implements cookies\n- Supports ipv4, ipv6\n- Supports coroutine\n\n#### The platform library\n\n- Implements timer, fast and low precision timer\n- Implements atomic and atomic64 operation\n- Implements spinlock, mutex, event, semaphore, thread and thread pool\n- Implements file, socket operation\n- Implements poller using epoll, poll, select, kqueue ...\n- Implements switch context interfaces for coroutine\n\n#### The charset library\n\n- Supports utf8, utf16, gbk, gb2312, uc2 and uc4\n- Supports big endian and little endian mode\n\n#### The zip library\n\n- Supports gzip, zlibraw, zlib formats using the zlib library if exists\n- Implements lzsw, lz77 and rlc algorithm\n\n#### The utils library\n\n- Implements base32, base64 encoder and decoder\n- Implements assert and trace output for the debug mode\n- Implements bits operation for parsing u8, u16, u32, u64 data\n\n#### The math library\n\n- Implements random generator\n- Implements fast fixed-point calculation, Supports 6-bits, 16-bits, 30-bits fixed-point number\n\n#### The libc library\n\n- Implements lightweight libc library interfaces, the interface name contains `tb_xxx` prefix for avoiding conflict\n- Implements strixxx strrxxx wcsixxx wcsrxxx interface extension\n- Optimizes some frequently-used interface, .e.g. memset, memcpy, strcpy ...\n- Implements `memset_u16`, `memset_u32`, `memset_u64` extension interfaces\n\n#### The libm library\n\n- Implements lightweight libm library interfaces, the interface name contains `tb_xxx` prefix for avoiding conflict\n- Supports float and double type\n\n#### The regex library\n\n- Supports match and replace\n- Supports global/multiline/caseless mode\n- Uses pcre, pcre2 and posix regex modules\n\n#### The hash library\n\n- Implements crc32, adler32, md5 and sha1 hash algorithm\n- Implements some string hash algorithms (.e.g bkdr, fnv32, fnv64, sdbm, djb2, rshash, aphash ...)\n- Implements uuid generator\n\n## Projects\n\nSome projects using tbox:\n\n* [gbox](https://github.com/tboox/gbox)\n* [vm86](https://github.com/tboox/vm86)\n* [xmake](http://www.xmake.io)\n* [itrace](https://github.com/tboox/itrace)\n* [more](https://github.com/tboox/tbox/wiki/tbox-projects)\n\n## Build (xmake)\n\nPlease install xmake first: [xmake](https://github.com/xmake-io/xmake)\n\n```console\n# build for the host platform\n$ cd ./tbox\n$ xmake\n\n# build for the mingw platform\n$ cd ./tbox\n$ xmake f -p mingw --sdk=/home/mingwsdk\n$ xmake\n\n# build for the iphoneos platform\n$ cd ./tbox\n$ xmake f -p iphoneos\n$ xmake\n\n# build for the android platform\n$ cd ./tbox\n$ xmake f -p android --ndk=xxxxx\n$ xmake\n\n# build for the linux cross-platform\n$ cd ./tbox\n$ xmake f -p linux --sdk=/home/sdk # --bin=/home/sdk/bin\n$ xmake\n```\n\n## Build (xmake.sh)\n\n```console\n$ ./configure\n$ make\n```\n\n## Example\n\n```c\n#include \"tbox/tbox.h\"\n\nint main(int argc, char** argv) {\n    if (!tb_init(tb_null, tb_null)) return 0;\n\n    tb_vector_ref_t vector = tb_vector_init(0, tb_element_str(tb_true));\n    if (vector) {\n        tb_vector_insert_tail(vector, \"hello\");\n        tb_vector_insert_tail(vector, \"tbox\");\n\n        tb_for_all (tb_char_t const*, cstr, vector) {\n            tb_trace_i(\"%s\", cstr);\n        }\n        tb_vector_exit(vector);\n    }\n    tb_exit();\n    return 0;\n}\n```\n\n## Technical Support\n\nYou can also consider sponsoring us to get technical support services, [[Become a sponsor](https://docs.tboox.org/#/about/sponsor)]\n\n## Contacts\n\n* Email：[waruqi@gmail.com](mailto:waruqi@gmail.com)\n* Homepage：[tboox.org](https://tboox.org)\n* Community：[/r/tboox on reddit](https://www.reddit.com/r/tboox/)\n* ChatRoom：[Chat on telegram](https://t.me/tbooxorg), [Chat on gitter](https://gitter.im/tboox/tboox?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n* QQ Group: 343118190(full), 662147501\n* Wechat Public: tboox-os\n\n"
        },
        {
          "name": "README_zh.md",
          "type": "blob",
          "size": 12.5576171875,
          "content": "<div align=\"center\">\n\n  <a href=\"https://docs.tboox.org\">\n    <img width=\"160\" heigth=\"160\" src=\"https://docs.tboox.org/assets/img/logo_text.png\">\n  </a>\n\n  <div>\n    <a href=\"https://github.com/tboox/tbox/actions?query=workflow%3AWindows\">\n      <img src=\"https://img.shields.io/github/actions/workflow/status/tboox/tbox/windows.yml?branch=dev&style=flat-square&logo=windows\" alt=\"github-ci\" />\n    </a>\n    <a href=\"https://github.com/tboox/tbox/actions?query=workflow%3ALinux\">\n      <img src=\"https://img.shields.io/github/actions/workflow/status/tboox/tbox/linux.yml?branch=dev&style=flat-square&logo=linux\" alt=\"github-ci\" />\n    </a>\n    <a href=\"https://github.com/tboox/tbox/actions?query=workflow%3AmacOS\">\n      <img src=\"https://img.shields.io/github/actions/workflow/status/tboox/tbox/macos.yml?branch=dev&style=flat-square&logo=apple\" alt=\"github-ci\" />\n    </a>\n    <a href=\"https://github.com/tboox/tbox/actions?query=workflow%3AAndroid\">\n      <img src=\"https://img.shields.io/github/actions/workflow/status/tboox/tbox/android.yml?branch=dev&style=flat-square&logo=android\" alt=\"github-ci\" />\n    </a>\n    <a href=\"https://github.com/tboox/tbox/releases\">\n      <img src=\"https://img.shields.io/github/release/tboox/tbox.svg?style=flat-square\" alt=\"Github All Releases\" />\n    </a>\n  </div>\n  <div>\n    <a href=\"https://github.com/tboox/tbox/blob/master/LICENSE.md\">\n      <img src=\"https://img.shields.io/github/license/tboox/tbox.svg?colorB=f48041&style=flat-square\" alt=\"license\" />\n    </a>\n    <a href=\"https://www.reddit.com/r/tboox/\">\n      <img src=\"https://img.shields.io/badge/chat-on%20reddit-ff3f34.svg?style=flat-square\" alt=\"Reddit\" />\n    </a>\n    <a href=\"https://gitter.im/tboox/tboox?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\">\n      <img src=\"https://img.shields.io/gitter/room/tboox/tboox.svg?style=flat-square&colorB=96c312\" alt=\"Gitter\" />\n    </a>\n    <a href=\"https://t.me/tbooxorg\">\n      <img src=\"https://img.shields.io/badge/chat-on%20telegram-blue.svg?style=flat-square\" alt=\"Telegram\" />\n    </a>\n    <a href=\"https://jq.qq.com/?_wv=1027&k=5hpwWFv\">\n      <img src=\"https://img.shields.io/badge/chat-on%20QQ-ff69b4.svg?style=flat-square\" alt=\"QQ\" />\n    </a>\n    <a href=\"https://tboox.org/donation/\">\n      <img src=\"https://img.shields.io/badge/donate-us-orange.svg?style=flat-square\" alt=\"Donate\" />\n    </a>\n  </div>\n\n  <p>一个用c语言实现的跨平台开发库</p>\n</div>\n\n## 项目支持\n\n通过成为赞助者来支持该项目。您的logo将显示在此处，并带有指向您网站的链接。🙏 [[成为赞助商](https://docs.tboox.org/#/zh-cn/about/sponsor)]\n\n<a href=\"https://opencollective.com/tbox#backers\" target=\"_blank\"><img src=\"https://opencollective.com/tbox/backers.svg?width=890\"></a>\n\n## 简介\n\nTBOX是一个用c语言实现的跨平台开发库。\n\n针对各个平台，封装了统一的接口，简化了各类开发过程中常用操作，使你在开发过程中，更加关注实际应用的开发，而不是把时间浪费在琐碎的接口兼容性上面，并且充分利用了各个平台独有的一些特性进行优化。\n\n这个项目的目的，是为了使C开发更加的简单高效。\n\n目前支持的平台有: Windows, Macosx, Linux, Android, iOS, *BSD等等。\n\n通过[xmake](https://github.com/xmake-io/xmake)支持各种编译模式：\n\n* Release: 正式版编译，禁用调试信息、断言，各种检测机制，启用编译器优化\n* Debug: 调试模式，默认启用详细调试信息、断言、内存越界检测、内存泄漏、锁竞争分析等检测机制\n* Small: 最小化编译，默认禁用所有扩展模块，启用编译器最小化优化\n* Micro: 针对嵌入式平台，仅仅编译tbox微内核，仅提供最基础的跨平台接口，生成库仅64K左右（内置轻量libc接口实现）\n\n如果你想了解更多，请参考：[在线文档](https://docs.tboox.org/#/zh-cn/getting_started), [Github](https://github.com/tboox/tbox)以及[Gitee](https://gitee.com/tboox/tbox)和[GitCode](https://gitcode.com/tboox/tbox)。\n\n## 特性\n\n#### 流库\n\n针对http、file、socket、data等流数据，实现统一接口进行读写，并且支持: 阻塞、非阻塞、异步 三种读写模式。\n支持中间增加多层filter流进行流过滤，实现边读取，内部边进行解压、编码转换、加密等操作，极大的减少了内存使用。\n\n主要提供以下模块：\n\n- `stream`：通用非阻塞流，用于一般的单独io处理，同时支持协程以实现异步传输。\n- `transfer`：流传输器，维护两路流的传输。\n- `static_stream`：针对静态数据buffer优化的静态流，用于轻量快速的数据解析。\n\n#### 协程库\n\n- 快速高效的协程切换支持\n- 提供跨平台支持，核心切换算法参考boost，并且对其进行重写和优化，目前支持架构：x86, x86_64, arm, arm64, mips32\n- 提供channel协程间数据通信支持，基于生产、消费者模型\n- 提供信号量、协程锁支持\n- socket、stream都模块原生支持协程，并且可在线程和协程间进行无缝切换\n- 提供http、file等基于协程的简单服务器实例，只需几百行代码，就可以从socket开始写个高性能io服务器，代码逻辑比异步回调模式更加清晰\n- 同时提供stackfull, stackless两种协程模式支持，stackless协程更加的轻量（每个协程只占用几十个bytes），切换更快（会牺牲部分易用性）\n- 支持epoll, kqueue, poll, select 和 IOCP\n- 在协程和poller中支持同时等待和调度socket，pipe io和process\n\n#### 数据库\n\n- 统一并简化数据库操作接口，适配各种数据源，通过统一的url来自动连接打开支持的数据库，数据的枚举采用迭代器模型。\n- 目前支持sqlite3以及mysql两种关系型数据库，也可自定义扩展使用其他关系型数据库。\n\n#### xml库\n\n- 针对xml提供DOM和SAX两种解析模式，SAX方式采用外部迭代模式，灵活性和性能更高，并且可以选择指定路径，进行解析。\n- 解析过程完全基于stream，所以是高度流化的，可以实现边下载、边解压、边转码、边解析一条龙服务，使用较低的内存也可以解析大规模数据。\n- 提供xml writer以支持对xml生成\n\n#### 内存库\n\n- 参考linux内核内存管理机制的实现，并对其进行各种改造和优化，所实现的TBOX独有的一整套内存池管理架构。\n- 调试模式下，可以轻松检测并定位内存泄露、内存越界溢出、内存重叠覆盖等常见内存问题，并对整体内存的使用进行了统计和简要分析。\n- 针对大块数据、小块数据、字符串数据进行了充分的利用，避免了大量外部碎片和内部碎片的产生。分配操作进行了各种优化，96%的情况下，效率都是在O(1)。\n\n#### 容器库\n\n- 提供哈希、链表、数组、队列、堆栈、最小最大堆等常用容器。\n- 支持各种常用成员类型，在原有的容器期初上，其成员类型还可以完全自定义扩展。\n- 所有容器都支持迭代器操作。\n- 大部分容器都可以支持基于stream的序列化和反序列化操作。\n\n#### 算法库\n\n- 提供各种排序算法：冒泡排序、堆排序、快速排序、插入排序。\n- 提供各种查找算法：线性遍历、二分法搜索。\n- 提供各种遍历、删除、统计算法。\n- 以迭代器为接口，实现算法和容器的分离，类似stl，但是c实现的，更加轻量。\n\n#### 网络库\n\n- 实现http客户端模块\n- 实现cookies\n- 实现dns解析与缓存\n- 实现ssl(支持openssl, polarssl, mbedtls)\n- 支持ipv4、ipv6\n- 支持通过协程实现异步模式\n\n#### 数学运算库\n\n- 提供各种精度的定点运算支持\n- 提供随机数生成器\n\n#### libc库\n\n- libc的一个轻量级实现，完全跨平台，并且针对不同架构进行了优化。\n- 支持大部分字符串、宽字符串操作。\n- 扩展字符串、宽字符串的各种大小写不敏感操作接口\n- 扩展`memset_u16`、`memset_u32`等接口，并对其进行高度优化，尤其适合图形渲染程序\n\n#### libm库\n\n- libm部分接口的一个轻量级实现，以及对常用系统接口的封装。（目前只实现了部分，之后有时间会完全实现掉）\n- 扩展部分常用接口，增加对sqrt、log2等常用函数的整数版本计算，进行高度优化，不涉及浮点运算，适合嵌入式环境使用。\n\n#### object库\n\n- 轻量级类apple的CoreFoundation库，支持object、dictionary、array、string、number、date、data等常用对象，并且可以方便扩展自定义对象的序列化。\n- 支持对xml、json、binary以及apple的plist(xplist/bplist)格式序列化和反序列化。\n并且实现自有的binary序列化格式， 针对明文进行了简单的加密，在不影响性能的前提下，序列化后的大小比bplist节省30%。\n\n#### 平台库\n\n- 提供file、directory、socket、thread、time等常用系统接口\n- 提供atomic、atomic64接口\n- 提供高精度、低精度定时器\n- 提供高性能的线程池操作\n- 提供event、mutex、semaphore、spinlock等事件、互斥、信号量、自旋锁操作\n- 提供获取函数堆栈信息的接口，方便调试和错误定位\n- 提供跨平台动态库加载接口（如果系统支持的话）\n- 提供io轮询器，针对epoll, poll, select, kqueue进行跨平台封装\n- 提供跨平台上下文切换接口，主要用于协程实现，切换效率非常高\n\n#### 压缩库\n\n- 支持zlib/zlibraw/gzip的压缩与解压（需要第三方zlib库支持）。\n\n#### 字符编码库\n\n- 支持utf8、utf16、gbk、gb2312、uc2、uc4 之间的互相转码，并且支持大小端格式。\n\n#### 实用工具库\n\n- 实现base64/32编解码\n- 实现crc32、adler32、md5、sha1等常用hash算法\n- 实现日志输出、断言等辅助调试工具\n- 实现url编解码\n- 实现位操作相关接口，支持各种数据格式的解析，可以对8bits、16bits、32bits、64bits、float、double以及任意bits的字段进行解析操作，并且同时支持大端、小端和本地端模式，并针对部分操作进行了优化，像static_stream、stream都有相关接口对其进行了封装，方便在流上进行快速数据解析。\n- 实现swap16、swap32、swap64等位交换操作，并针对各个平台进行了优化。\n- 实现一些高级的位处理接口，例如：位0的快速统计、前导0和前导1的快速位计数、后导01的快速位计数\n- 实现单例模块，可以对静态对象、实例对象进行快速的单例封装，实现全局线程安全\n- 实现option模块，对命令行参数进行解析，提供快速方便的命令行选项建立和解析操作，对于写终端程序还是很有帮助的\n\n#### 正则表达式库\n\n- 支持匹配和替换操作\n- 支持全局、多行、大小写不敏感等模式\n- 使用pcre, pcre2和posix正则库\n\n## 一些使用tbox的项目：\n\n* [gbox](https://github.com/tboox/gbox)\n* [vm86](https://github.com/tboox/vm86)\n* [xmake](http://www.xmake.io/cn)\n* [itrace](https://github.com/tboox/itrace)\n* [更多项目](https://github.com/tboox/tbox/wiki/%E4%BD%BF%E7%94%A8tbox%E7%9A%84%E5%BC%80%E6%BA%90%E5%BA%93)\n\n## 使用 Xmake 编译\n\n请先安装: [xmake](https://github.com/xmake-io/xmake)\n\n```console\n# 默认直接编译当前主机平台\n$ cd ./tbox\n$ xmake\n\n# 编译mingw平台\n$ cd ./tbox\n$ xmake f -p mingw --sdk=/home/mingwsdk\n$ xmake\n\n# 编译iphoneos平台\n$ cd ./tbox\n$ xmake f -p iphoneos\n$ xmake\n\n# 编译android平台\n$ cd ./tbox\n$ xmake f -p android --ndk=xxxxx\n$ xmake\n\n# 交叉编译\n$ cd ./tbox\n$ xmake f -p linux --sdk=/home/sdk #--bin=/home/sdk/bin\n$ xmake\n```\n\n## 使用 xmake.sh 编译\n\n```console\n$ ./configure\n$ make\n```\n\n## 例子\n\n```c\n#include \"tbox/tbox.h\"\n\nint main(int argc, char** argv) {\n    if (!tb_init(tb_null, tb_null)) return 0;\n\n    tb_vector_ref_t vector = tb_vector_init(0, tb_element_str(tb_true));\n    if (vector) {\n        tb_vector_insert_tail(vector, \"hello\");\n        tb_vector_insert_tail(vector, \"tbox\");\n\n        tb_for_all (tb_char_t const*, cstr, vector) {\n            tb_trace_i(\"%s\", cstr);\n        }\n        tb_vector_exit(vector);\n    }\n    tb_exit();\n    return 0;\n}\n```\n\n## 技术支持\n\n你可以考虑赞助我们也获取技术支持服务，[[成为赞助商](https://docs.tboox.org/#/zh-cn/about/sponsor)]\n\n## 联系方式\n\n* 邮箱：[waruqi@gmail.com](mailto:waruqi@gmail.com)\n* 主页：[TBOOX开源工程](https://tboox.org/cn)\n* 社区：[Reddit论坛](https://www.reddit.com/r/tboox/)\n* 聊天：[Telegram群组](https://t.me/tbooxorg), [Gitter聊天室](https://gitter.im/tboox/tboox?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n* QQ群：343118190(满), 662147501\n* 微信公众号：tboox-os\n\n"
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 140.60546875,
          "content": "#!/bin/sh\n# A script-only build utility like autotools\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http:##www.apache.org#licenses#LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# Copyright (C) 2022-present, TBOOX Open Source Group.\n#\n# @author      ruki\n# @homepage    https://github.com/xmake-io/xmake.sh\n#\n\n#-----------------------------------------------------------------------------\n# some constants\n#\nxmake_sh_projectdir=$(X= cd -- \"$(dirname -- \"$0\")\" && pwd -P)\nxmake_sh_buildir=\"build\"\nxmake_sh_version=\"1.0.5\"\nxmake_sh_verbose=false\nxmake_sh_diagnosis=false\nxmake_sh_copyright=\"Copyright (C) 2022-present Ruki Wang, tboox.org, xmake.io.\"\nxmake_sh_makefile=\"${xmake_sh_projectdir}/makefile\"\n\n#-----------------------------------------------------------------------------\n# some helper functions\n#\nraise() {\n    echo \"$@\" 1>&2 ; exit 1\n}\n\nvprint() {\n    if \"${xmake_sh_verbose}\"; then\n        echo \"$@\"\n    fi\n}\n\ndprint() {\n    if \"${xmake_sh_diagnosis}\"; then\n        echo \"$@\"\n    fi\n}\n\n# show and escape string instead of `echo -e`, because sh does not support it\nprint() {\n    printf \"${@}\\n\"\n}\n\nwprint() {\n    if \"${xmake_sh_verbose}\"; then\n        printf \"warning: ${@}\\n\"\n    fi\n}\n\n# test empty string\ntest_z() {\n    if test \"x${1}\" = \"x\"; then\n        return 0\n    fi\n    return 1\n}\n\n# test non-empty string\ntest_nz() {\n    if test \"x${1}\" != \"x\"; then\n        return 0\n    fi\n    return 1\n}\n\n# test string is equal\ntest_eq() {\n    if test \"x${1}\" = \"x${2}\"; then\n        return 0\n    fi\n    return 1\n}\n\n# test string is not equal\ntest_nq() {\n    if test \"x${1}\" != \"x${2}\"; then\n        return 0\n    fi\n    return 1\n}\n\nstring_toupper() {\n    _ret=$(echo \"$1\" | tr '[a-z]' '[A-Z]')\n}\n\nstring_tolower() {\n    _ret=$(echo \"$1\" | tr '[A-Z]' '[a-z]')\n}\n\nstring_replace() {\n    _ret=$(echo \"$1\" | sed \"s/${2}/${3}/g\")\n}\n\n# we avoid use `cut` command, because it's slow\nstring_split() {\n    local str=\"${1}\"\n    local sep=\"${2}\"\n    local idx=\"${3}\"\n    local oldifs=\"${IFS}\"\n    IFS=\"${sep}\"\n    set -- ${str}\n    if test_nz \"${idx}\"; then\n        case \"${idx}\" in\n            1) _ret=\"$1\";;\n            2) _ret=\"$2\";;\n            3) _ret=\"$3\";;\n            4) _ret=\"$4\";;\n            5) _ret=\"$5\";;\n            6) _ret=\"$6\";;\n        esac\n    else\n        _ret=\"$1\"\n        _ret2=\"$2\"\n        _ret3=\"$3\"\n        _ret4=\"$4\"\n        _ret5=\"$5\"\n        _ret6=\"$6\"\n    fi\n    IFS=\"${oldifs}\"\n}\n\n# does contain sub-string?\n# e.g.\n# str=\"src/*.cpp\"\n# string_contains \"$str\" \"src\"\nstring_contains() {\n    case \"${1}\" in\n        *${2}*) return 0;;\n        *) return 1;;\n    esac\n    return 1\n}\n\n# does contain \"*\"?\nstring_contains_star() {\n    case \"${1}\" in\n        *\\**) return 0;; # bash\n        *'*'*) return 0;; # csh\n        *) return 1;;\n    esac\n    return 1\n}\n\n# does contain \"**\"?\nstring_contains_star2() {\n    case \"${1}\" in\n        *\\*\\**) return 0;; # bash\n        *'**'*) return 0;; # csh\n        *) return 1;;\n    esac\n    return 1\n}\n\n# does startswith sub-string?\n# e.g.\n# str=\"src/*.cpp\"\n# string_startswith \"$str\" \"src\"\nstring_startswith() {\n    case \"${1}\" in\n        ${2}*) return 0;;\n        *) return 1;;\n    esac\n    return 1\n}\n\n# duplicate characters\n# e.g. string_dupch 10 \".\" => ...........\nstring_dupch() {\n    local count=${1}\n    local ch=${2}\n    printf %${count}s | tr \" \" \"${ch}\"\n}\n\n# replace file content\n_io_replace_file() {\n    local infile=\"${1}\"\n    local outfile=\"${2}\"\n    local patterns=\"${3}\"\n    sed \"/./ {${patterns}}\" \"${infile}\" > \"${outfile}\"\n}\n\n# try remove file or directory\n_os_tryrm() {\n    if test -f \"${1}\"; then\n        rm \"${1}\"\n    elif test -d \"${1}\"; then\n        rm -r \"${1}\"\n    fi\n}\n\n# get temporary file\n# https://github.com/xmake-io/xmake/issues/5464\n_os_tmpfile() {\n    _ret=$(mktemp \"${TMPDIR-/tmp}/tmp.XXXXXXXX\")\n}\n\n# try run program\n_os_runv() {\n    if ${xmake_sh_diagnosis}; then\n        ${@}\n    else\n        ${@} >/dev/null 2>&1\n    fi\n    local ok=$?\n    if test \"${ok}\" -ne \"0\"; then\n        return 1\n    fi\n    return 0\n}\n\n# try run program and get output\n_os_iorunv() {\n    _os_tmpfile\n    local tmpfile=\"${_ret}\"\n    ${@} >\"${tmpfile}\" 2>&1\n    local ok=$?\n    if test \"${ok}\" -ne \"0\"; then\n        _ret=\"\"\n    else\n        local result=$(cat \"${tmpfile}\")\n        _ret=\"${result}\"\n    fi\n    _os_tryrm \"${tmpfile}\"\n}\n\n# find file in the given directory\n# e.g. _os_find . xmake.sh\n_os_find() {\n    local dir=\"${1}\"\n    local name=\"${2}\"\n    local depth=\"${3}\"\n    if test_nz \"${depth}\"; then\n        _ret=$(find \"${dir}\" -maxdepth \"${depth}\" -mindepth \"${depth}\" -type f -name \"${name}\")\n    else\n        _ret=$(find \"${dir}\" -type f -name \"${name}\")\n    fi\n}\n\n# get date, \"%Y%m%d%H%M\" -> 202212072222\n# Use deterministic timestamp from SOURCE_DATE_EPOCH if available\n# https://reproducible-builds.org/docs/source-date-epoch/\n_os_date() {\n    if test_z \"${SOURCE_DATE_EPOCH}\"; then\n        _ret=$(date +\"${1}\")\n    else\n        # Use GNU date options first, then fallback to BSD's, and finally fallback to current time.\n        _ret=$(date -u -d \"@$SOURCE_DATE_EPOCH\" +\"${1}\" 2>/dev/null || date -u -r \"$SOURCE_DATE_EPOCH\" +\"${1}\" 2>/dev/null || date +\"${1}\")\n    fi\n}\n\n# we avoid use `basename`, because it's slow\npath_filename() {\n    local path=\"${1}\"\n    if test_eq \"${path}\" \"/\"; then\n        _ret=\"/\"\n    else\n        _ret=\"${path##*/}\"\n    fi\n}\n\npath_extension() {\n    path_filename \"${1}\"; local filename=\"${_ret}\"\n    _ret=\".${filename##*.}\"\n}\n\npath_basename() {\n    path_filename \"${1}\"; local filename=\"${_ret}\"\n    _ret=\"${filename%.*}\"\n}\n\n# we avoid use `dirname -- ${1}`, because it's too slow\npath_directory() {\n    local path=\"${1}\"\n    if test_z \"${path}\"; then\n        raise \"invalid empty path in path_directory().\"\n    fi\n    path=\"${path%/}\"\n    local dir=\"${path%/*}\"\n    if string_startswith \"${path}\" \"/\"; then\n        if test_z \"${dir}\"; then\n            dir=\"/\"\n        fi\n    else\n        dir=\"${dir#/}\"\n        if test_z \"${dir}\"; then\n            dir=\".\"\n        fi\n    fi\n    _ret=\"${dir}\"\n}\n\n# e.g. path_filename_fromdir \"/tmp/file\" \"/tmp\" -> \"file\"\npath_filename_fromdir() {\n    _ret=\"${1#${2}/}\"\n}\n\npath_is_absolute() {\n    if string_startswith \"${1}\" \"/\"; then\n        return 0\n    fi\n    return 1\n}\n\n# get relative path, e.g $(path_relative ${rootdir} ${absolute_path}`\npath_relative() {\n    local source=\"${1}\"\n    local target=\"${2}\"\n    if test_z \"${source}\" || test_z \"${target}\"; then\n        raise \"invalid empty path in path_relative()\"\n    fi\n\n    # patch missing \"./\"\n    source=${source#./}\n    source=${source#.}\n    target=${target#./}\n    target=${target#.}\n    if test_z \"${source}\"; then\n        _ret=\"${target}\"\n        return\n    fi\n\n    # find common path\n    local result=\"\"\n    local common_part=$source\n    while test_eq \"${target#$common_part}\" \"${target}\"; do\n        # no match, means that candidate common part is not correct\n        # go up one level (reduce common part)\n        path_directory \"${common_part}\"; common_part=\"${_ret}\"\n        # and record that we went back, with correct / handling\n        if test_z \"${result}\"; then\n            result=\"..\"\n        else\n            result=\"../${result}\"\n        fi\n    done\n\n    if test_eq \"${common_part}\" \"/\"; then\n        # special case for root (no common path)\n        result=\"${result}/\"\n    fi\n\n    # since we now have identified the common part,\n    # compute the non-common part\n    local forward_part=\"${target#$common_part}\"\n\n    # and now stick all parts together\n    if test_nz \"${result}\" && test_nz \"${forward_part}\"; then\n        result=\"${result}${forward_part}\"\n    elif test_nz \"${forward_part}\"; then\n        result=\"${forward_part#*/}\"\n    fi\n\n    # same directory?\n    if test_z \"${result}\" && test_eq \"${source}\" \"${target}\"; then\n        result=\".\"\n    fi\n\n    _ret=\"${result}\"\n}\n\npath_sourcekind() {\n    local sourcekind=\"\"\n    case \"${1}\" in\n        *.cpp) sourcekind=\"cxx\";;\n        *.cc) sourcekind=\"cxx\";;\n        *.c) sourcekind=\"cc\";;\n        *.ixx) sourcekind=\"cxx\";;\n        *.mm) sourcekind=\"mxx\";;\n        *.m) sourcekind=\"mm\";;\n        *.S) sourcekind=\"as\";;\n        *.s) sourcekind=\"as\";;\n        *.asm) sourcekind=\"as\";;\n        *) raise \"unknown sourcekind for ${1}\" ;;\n    esac\n    _ret=\"${sourcekind}\"\n}\n\npath_toolname() {\n    local toolname=\"\"\n    case \"${1}\" in\n        *-gcc) toolname=\"gcc\";;\n        */gcc) toolname=\"gcc\";;\n        gcc) toolname=\"gcc\";;\n        gcc-*) toolname=\"gcc\";;\n        */gcc-*) toolname=\"gcc\";;\n        *-g++) toolname=\"gxx\";;\n        */g++) toolname=\"gxx\";;\n        g++) toolname=\"gxx\";;\n        g++-*) toolname=\"gxx\";;\n        */g++-*) toolname=\"gxx\";;\n        xcrun*clang++) toolname=\"clangxx\";;\n        xcrun*clang) toolname=\"clang\";;\n        *-clang++) toolname=\"clangxx\";;\n        */clang++) toolname=\"clangxx\";;\n        clang++) toolname=\"clangxx\";;\n        clang++-*) toolname=\"clangxx\";;\n        */clang++-*) toolname=\"clangxx\";;\n        *-clang) toolname=\"clang\";;\n        */clang) toolname=\"clang\";;\n        clang) toolname=\"clang\";;\n        clang-*) toolname=\"clang\";;\n        */clang-*) toolname=\"clang\";;\n        */emcc) toolname=\"emcc\";;\n        emcc) toolname=\"emcc\";;\n        */em++) toolname=\"emxx\";;\n        em++) toolname=\"emxx\";;\n        */cosmocc) toolname=\"cosmocc\";;\n        cosmocc) toolname=\"cosmocc\";;\n        */cosmoc++) toolname=\"cosmocxx\";;\n        cosmoc++) toolname=\"cosmocxx\";;\n        *-ar) toolname=\"ar\";;\n        */ar) toolname=\"ar\";;\n        ar) toolname=\"ar\";;\n        */emar) toolname=\"emar\";;\n        emar) toolname=\"emar\";;\n        */cosmoar) toolname=\"cosmoar\";;\n        cosmoar) toolname=\"cosmoar\";;\n        cc) toolname=\"gcc\";;\n        */cc) toolname=\"gcc\";;\n        c++) toolname=\"gxx\";;\n        */c++) toolname=\"gxx\";;\n        tcc) toolname=\"tcc\";;\n        */tcc) toolname=\"tcc\";;\n        *) raise \"unknown tool ${1}\";;\n    esac\n    _ret=\"${toolname}\"\n}\n\n# get flag name from toolkind, e.g. cc => cflags, cxx => cxxflags\n_get_flagname() {\n    local toolkind=\"${1}\"\n    local flagname=\"\"\n    case \"${toolkind}\" in\n        cc) flagname=\"cflags\";;\n        cxx) flagname=\"cxxflags\";;\n        as) flagname=\"asflags\";;\n        mm) flagname=\"mflags\";;\n        mxx) flagname=\"mxxflags\";;\n        ar) flagname=\"arflags\";;\n        sh) flagname=\"shflags\";;\n        ld) flagname=\"ldflags\";;\n        *) raise \"unknown toolkind(${toolkind})!\" ;;\n    esac\n    _ret=\"${flagname}\"\n}\n\n# is enabled? true, yes, y\n_is_enabled() {\n    local value=${1}\n    if test_eq \"${value}\" \"true\"; then\n        return 0\n    elif test_eq \"${value}\" \"yes\"; then\n        return 0\n    elif test_eq \"${value}\" \"y\"; then\n        return 0\n    fi\n    return 1\n}\n\n# deduplicate string list\n# .e.g \"hello world hello how are you world\" -> hello world how are you\n_dedup() {\n    _ret=$(echo \"${1}\" | awk '{for (i = 1; i <= NF; ++i) if (!seen[$i]++) printf $i \" \"}')\n}\n\n# deduplicate string list from the reverse order\n# .e.g \"hello world hello how are you world\" -> hello how are you world\n_dedup_reverse() {\n    local result=\"\"\n    local list=\"\"\n    local item=\"\"\n    list=$(echo \"${1}\" | awk '{for (i = NF; i > 0; --i) if (!seen[$i]++) printf $i \" \"}')\n    for item in ${list}; do\n        result=\"${item} ${result}\"\n    done\n    _ret=\"${result}\"\n}\n\n#-----------------------------------------------------------------------------\n# map functions\n#\n\n# define map, @note we can not use bash/declare to define map, because sh does not support it.\n#\n# _map \"options\"\n# _map_set \"options\" \"key1\" \"value1\"\n# _map_set \"options\" \"key2\" \"value2\"\n# _map_set \"options\" \"key2\" \"value3\"\n# _map_set \"options\" \"key3\" \"value3\"\n# _map_set \"options\" \"key4\" \"__empty__\"\n# _map_set \"options\" \"key4\" \"__empty__\"\n# _map_count \"options\"; _count=\"${_ret}\"\n# _map_keys \"options\"; _keys=\"${_ret}\"\n# echo ${_count}\n# for key in ${_keys}; do\n#     _map_get \"options\" ${key}; value=\"{_ret}\"\n#     echo ${key} \"->\" ${value}\n# done\n#\n# echo \"------\"\n# _map_remove \"options\" \"key3\"\n# _map_count \"options\"; _count=\"${_ret}\"\n# _map_keys \"options\"; _keys=\"${_ret}\"\n# echo ${_count}\n# for key in ${_keys}; do\n#     _map_get \"options\" ${key}; value=\"{_ret}\"\n#     echo ${key} \"->\" ${value}\n# done\n#\n_map() {\n    local name=${1}\n#    eval _map_${name}_count=0\n#    eval _map_${name}_keys=\"\"\n}\n\n# because the shell is slow, we have to temporarily\n# disable some of the map features for performance.\n#\n#_map_count() {\n#    local name=${1}\n#    local count=$(eval echo \\$_map_${name}_count)\n#    _ret=\"${count}\"\n#}\n\n_map_get() {\n    local name=\"${1}\"\n    local key=\"${2}\"\n    _ret=$(eval echo \\$_map_${name}_value_${key})\n    if test_eq \"${_ret}\" \"__empty__\"; then\n        _ret=\"\"\n    fi\n}\n\n_map_has() {\n    local name=\"${1}\"\n    local key=\"${2}\"\n    local value=\"\"\n    value=$(eval echo \\$_map_${name}_value_${key})\n    if test_nz \"${value}\"; then\n        return 0\n    fi\n    return 1\n}\n\n_map_set() {\n    local name=\"${1}\"\n    local key=\"${2}\"\n    local value=\"${3}\"\n#    if ! _map_has ${name} ${key}; then\n#        _map_count \"options\"; local count=\"${_ret}\"\n#        eval _map_${name}_count=$((${count} + 1))\n#        local keys=$(eval echo \\$_map_${name}_keys)\n#        keys=\"${keys} ${key}\"\n#        eval _map_${name}_keys=\\${keys}\n#    fi\n    eval _map_${name}_value_${key}=\\${value}\n}\n\n#_map_remove() {\n#    local name=\"${1}\"\n#    local key=\"${2}\"\n#    if _map_has ${name} ${key}; then\n#        _map_count \"options\"; local count=\"${_ret}\"\n#        eval _map_${name}_count=$((${count} - 1))\n#        eval _map_${name}_value_${key}=\"\"\n#        local keys=$(eval echo \\$_map_${name}_keys)\n#        local keys_new=\"\"\n#        local k=\"\"\n#        for k in ${keys}; do\n#            if test_nq \"${k}\" \"${key}\"; then\n#                keys_new=\"${keys_new} ${k}\"\n#            fi\n#        done\n#        eval _map_${name}_keys=\\${keys_new}\n#    fi\n#}\n\n#_map_keys() {\n#    local name=\"${1}\"\n#    local keys=$(eval echo \\$_map_${name}_keys)\n#    _ret=\"${keys}\"\n#}\n\n#-----------------------------------------------------------------------------\n# detect default environments\n#\n\n# detect hosts\nos_host=`uname`\nstring_tolower ${os_host}; os_host=\"${_ret}\"\nif echo \"${os_host}\" | grep cygwin >/dev/null 2>&1; then\n    os_host=\"cygwin\"\nfi\nif echo \"${os_host}\" | grep msys >/dev/null 2>&1; then\n    os_host=\"msys\"\nfi\nif echo \"${os_host}\" | grep mingw >/dev/null 2>&1; then\n    os_host=\"msys\"\nfi\nif echo \"${os_host}\" | grep darwin >/dev/null 2>&1; then\n    os_host=\"macosx\"\nfi\nif echo \"${os_host}\" | grep linux >/dev/null 2>&1; then\n    os_host=\"linux\"\nfi\nif echo \"${os_host}\" | grep freebsd >/dev/null 2>&1; then\n    os_host=\"freebsd\"\nfi\nif echo \"${os_host}\" | grep bsd >/dev/null 2>&1; then\n    os_host=\"bsd\"\nfi\nif echo \"${os_host}\" | grep Haiku >/dev/null 2>&1; then\n    os_host=\"haiku\"\nfi\n\n# determining host\n# e.g.\n# if is_host \"linux\" \"macosx\"; then\n#     ...\n# fi\nis_host() {\n    local host=\"\"\n    for host in $@; do\n        if test_eq \"${os_host}\" \"${host}\"; then\n            return 0\n        fi\n    done\n    return 1\n}\n\n# detect host architecture\nos_arch=`uname -m | tr '[A-Z]' '[a-z]'`\nif test_eq \"${os_arch}\" \"i686\"; then\n    os_arch=\"i386\"\nelif test_eq \"${os_arch}\" \"aarch64\" || test_eq \"${os_arch}\" \"arm64\"; then\n    os_arch=\"arm64\"\nelif string_contains \"${os_arch}\" \"armv7\"; then\n    os_arch=\"armv7\"\nelif string_contains \"${os_arch}\" \"arm\"; then\n    os_arch=\"arm\"\nelif string_contains \"${os_arch}\" \"power macintosh\"; then\n    os_arch=\"ppc\"\nfi\n\n# set the default target platform\n_target_plat_default=${os_host}\nif is_host \"msys\"; then\n    _target_plat_default=\"mingw\"\nelif is_host \"freebsd\"; then\n    _target_plat_default=\"bsd\"\nelif test_nz \"${EMSDK}\"; then\n    _target_plat_default=\"wasm\"\nfi\n\n# set the default target architecture\n_target_arch_default=${os_arch}\nif is_host \"msys\" && test_nz \"${MSYSTEM_CARCH}\"; then\n    _target_arch_default=\"${MSYSTEM_CARCH}\"\nelif test_nz \"${TERMUX_ARCH}\"; then\n    _target_arch_default=\"${TERMUX_ARCH}\"\nelif test_nz \"${EMSDK}\"; then\n    _target_arch_default=\"wasm32\"\nfi\nif test_eq \"${_target_arch_default}\" \"i686\"; then\n    _target_arch_default=\"i386\"\nelif test_eq \"${_target_arch_default}\" \"aarch64\" || test_eq \"${_target_arch_default}\" \"arm64\"; then\n    _target_arch_default=\"arm64\"\nelif string_contains \"${_target_arch_default}\" \"armv7\"; then\n    _target_arch_default=\"armv7\"\nelif string_contains \"${_target_arch_default}\" \"arm\"; then\n    _target_arch_default=\"arm\"\nfi\n\n# set the default target mode\n_target_mode_default=\"release\"\n\n# set the default target kind\n_target_kind_default=\"static\"\n\n# set the default project generator and build program\nif is_host \"freebsd\" \"bsd\"; then\n    project_generator=\"gmake\"\n    _make_program_default=\"gmake\"\n    _ninja_program_default=\"ninja\"\nelif is_host \"msys\" \"cygwin\"; then\n    project_generator=\"gmake\"\n    _make_program_default=\"make.exe\"\n    _ninja_program_default=\"ninja.exe\"\nelse\n    project_generator=\"gmake\"\n    _make_program_default=\"make\"\n    _ninja_program_default=\"ninja\"\nfi\n\n# set the default directories\nif test -d \"/usr/local\"; then\n    _install_prefix_default=\"/usr/local\"\nelif test -d \"/usr\"; then\n    _install_prefix_default=\"/usr\"\nfi\n_install_bindir_default=\"\\${prefix}/bin\"\n_install_libdir_default=\"\\${prefix}/lib\"\n_install_includedir_default=\"\\${prefix}/include\"\n\n# determining target platform\n# e.g.\n# if is_plat \"linux\" \"macosx\"; then\n#     ...\n# fi\nis_plat() {\n    local plat=\"\"\n    for plat in $@; do\n        if test_eq \"${_target_plat}\" \"${plat}\"; then\n            return 0\n        fi\n    done\n    return 1\n}\n\n# determining target architecture\n# e.g.\n# if is_arch \"x86_64\" \"i386\"; then\n#     ...\n# fi\nis_arch() {\n    local arch=\"\"\n    for arch in $@; do\n        if test_eq \"${_target_arch}\" \"${arch}\"; then\n            return 0\n        fi\n    done\n    return 1\n}\n\n# determining target mode\n# e.g.\n# if is_mode \"release\"; then\n#     ...\n# fi\nis_mode() {\n    local mode=\"\"\n    for mode in $@; do\n        if test_eq \"${_target_mode}\" \"${mode}\"; then\n            return 0\n        fi\n    done\n    return 1\n}\n\n# determining target kind\n# e.g.\n# if is_kind \"release\"; then\n#     ...\n# fi\nis_kind() {\n    local kind=\"\"\n    for kind in $@; do\n        if test_eq \"${_target_kind}\" \"${kind}\"; then\n            return 0\n        fi\n    done\n    return 1\n}\n\n# determining target toolchain\n# e.g.\n# if is_toolchain \"clang\"; then\n#     ...\n# fi\nis_toolchain() {\n    local toolchain=\"\"\n    for toolchain in $@; do\n        if test_eq \"${_target_toolchain}\" \"${toolchain}\"; then\n            return 0\n        fi\n    done\n    return 1\n}\n\n#-----------------------------------------------------------------------------\n# project configuration apis\n#\n\n# set project name\nset_project() {\n    _xmake_sh_project_name=\"${1}\"\n}\n\n# include the given xmake.sh file or directory\n# e.g. includes \"src\" \"tests\"\nincludes() {\n    local path=\"\"\n    for path in $@; do\n        if test -f \"${path}\"; then\n            path_directory \"${path}\"; xmake_sh_scriptdir=\"${_ret}\"\n            . \"${path}\"\n        else\n            local xmake_sh_scriptdir_cur=${xmake_sh_scriptdir}\n            if test \"x${xmake_sh_scriptdir}\" != \"x\"; then\n                xmake_sh_scriptdir=\"${xmake_sh_scriptdir_cur}/${path}\"\n                . \"${xmake_sh_scriptdir}/xmake.sh\"\n            else\n                . \"${xmake_sh_projectdir}/${path}/xmake.sh\"\n            fi\n            xmake_sh_scriptdir=${xmake_sh_scriptdir_cur}\n        fi\n    done\n}\n\n#-----------------------------------------------------------------------------\n# some helper functions\n#\n\n# split flags\n_split_flags() {\n    string_replace \"${1}\" \":\" \" \"\n}\n\n# get abstract flag for gcc/clang\n_get_abstract_flag_for_gcc_clang() {\n    local toolkind=\"${1}\"\n    local toolname=\"${2}\"\n    local itemname=\"${3}\"\n    local value=\"${4}\"\n    local flag=\"\"\n    case \"${itemname}\" in\n        defines)\n            string_replace \"${value}\" '\"' '\\\\\\\"'; value=\"${_ret}\"\n            flag=\"-D${value}\"\n            ;;\n        undefines) flag=\"-U${value}\";;\n        includedirs) flag=\"-I${value}\";;\n        linkdirs) flag=\"-L${value}\";;\n        links) flag=\"-l${value}\";;\n        syslinks) flag=\"-l${value}\";;\n        frameworks) flag=\"-framework ${value}\";;\n        frameworkdirs) flag=\"-F${value}\";;\n        rpathdirs)\n            if is_plat \"macosx\"; then\n                string_replace \"${value}\" \"\\$ORIGIN\" \"@loader_path\"; value=\"${_ret}\"\n                flag=\"-Xlinker -rpath -Xlinker ${value}\"\n            else\n                # escape $ORIGIN in makefile, TODO we need also handle it for ninja\n                string_replace \"${value}\" \"@loader_path\" '$$ORIGIN'; value=\"${_ret}\"\n                if is_plat \"bsd\"; then\n                    flag=\"-Wl,-zorigin -Wl,-rpath='${value}'\"\n                else\n                    flag=\"-Wl,-rpath='${value}'\"\n                fi\n            fi\n            ;;\n        symbols)\n            if test_eq \"${value}\" \"debug\"; then\n                flag=\"-g\"\n            elif test_eq \"${value}\" \"hidden\"; then\n                flag=\"-fvisibility=hidden\"\n            fi\n            ;;\n        strip)\n            if test_eq \"${value}\" \"debug\"; then\n                flag=\"-Wl,-S\"\n            elif test_eq \"${value}\" \"all\"; then\n                if is_plat \"macosx\"; then\n                    flag=\"-Wl,-x -Wl,-dead_strip\"\n                else\n                    flag=\"-s\"\n                fi\n            fi\n            ;;\n        warnings)\n            if test_eq \"${value}\" \"all\" || test_eq \"${value}\" \"more\" || test_eq \"${value}\" \"less\"; then\n                flag=\"-Wall\"\n            elif test_eq \"${value}\" \"allextra\"; then\n                flag=\"-Wall -Wextra\"\n            elif test_eq \"${value}\" \"error\"; then\n                flag=\"-Werror\"\n            elif test_eq \"${value}\" \"everything\"; then\n                flag=\"-Wall -Wextra\"\n            elif test_eq \"${value}\" \"none\"; then\n                flag=\"-w\"\n            fi\n            ;;\n        optimizes)\n            if test_eq \"${value}\" \"fast\"; then\n                flag=\"-O1\"\n            elif test_eq \"${value}\" \"faster\"; then\n                flag=\"-O2\"\n            elif test_eq \"${value}\" \"fastest\"; then\n                flag=\"-O3\"\n            elif test_eq \"${value}\" \"smallest\"; then\n                if test_eq \"${toolname}\" \"clang\" || test_eq \"${toolname}\" \"clangxx\"; then\n                    flag=\"-Oz\"\n                else\n                    flag=\"-Os\"\n                fi\n            elif test_eq \"${value}\" \"aggressive\"; then\n                flag=\"-Ofast\"\n            elif test_eq \"${value}\" \"none\"; then\n                flag=\"-O0\"\n            fi\n            ;;\n        languages)\n            if test_eq \"${toolkind}\" \"cc\" || test_eq \"${toolkind}\" \"mm\"; then\n                case \"${value}\" in\n                    ansi) flag=\"-ansi\";;\n                    c89) flag=\"-std=c89\";;\n                    gnu89) flag=\"-std=gnu89\";;\n                    c99) flag=\"-std=c99\";;\n                    gnu99) flag=\"-std=gnu99\";;\n                    c11) flag=\"-std=c11\";;\n                    gnu11) flag=\"-std=gnu11\";;\n                    c17) flag=\"-std=c17\";;\n                    gnu17) flag=\"-std=gnu17\";;\n                esac\n            elif test_eq \"${toolkind}\" \"cxx\" || test_eq \"${toolkind}\" \"mxx\"; then\n                case \"${value}\" in\n                    cxx98) flag=\"-std=c++98\";;\n                    c++98) flag=\"-std=c++98\";;\n                    gnuxx98) flag=\"-std=gnu++98\";;\n                    gnu++98) flag=\"-std=gnu++98\";;\n\n                    cxx11) flag=\"-std=c++11\";;\n                    c++11) flag=\"-std=c++11\";;\n                    gnuxx11) flag=\"-std=gnu++11\";;\n                    gnu++11) flag=\"-std=gnu++11\";;\n\n                    cxx14) flag=\"-std=c++14\";;\n                    c++14) flag=\"-std=c++14\";;\n                    gnuxx14) flag=\"-std=gnu++14\";;\n                    gnu++14) flag=\"-std=gnu++14\";;\n\n                    cxx17) flag=\"-std=c++17\";;\n                    c++17) flag=\"-std=c++17\";;\n                    gnuxx17) flag=\"-std=gnu++17\";;\n                    gnu++17) flag=\"-std=gnu++17\";;\n\n                    cxx1z) flag=\"-std=c++1z\";;\n                    c++1z) flag=\"-std=c++1z\";;\n                    gnuxx1z) flag=\"-std=gnu++1z\";;\n                    gnu++1z) flag=\"-std=gnu++1z\";;\n\n                    cxx2a) flag=\"-std=c++2a\";;\n                    c++2a) flag=\"-std=c++2a\";;\n                    gnuxx2a) flag=\"-std=gnu++2a\";;\n                    gnu++2a) flag=\"-std=gnu++2a\";;\n\n                    cxx20) flag=\"-std=c++20\";;\n                    c++20) flag=\"-std=c++20\";;\n                    gnuxx20) flag=\"-std=gnu++20\";;\n                    gnu++20) flag=\"-std=gnu++20\";;\n                    cxx*) raise \"unknown language value(${value})!\" ;;\n                    c++*) raise \"unknown language value(${value})!\" ;;\n                esac\n            fi\n            ;;\n        *) raise \"unknown itemname(${itemname})!\" ;;\n    esac\n    _ret=\"${flag}\"\n}\n\n# get abstract flags\n_get_abstract_flags() {\n    local toolkind=\"${1}\"\n    local toolname=\"${2}\"\n    local itemname=\"${3}\"\n    local values=\"${4}\"\n    local flags=\"\"\n    local value=\"\"\n    for value in ${values}; do\n        local flag=\"\"\n        case \"${toolname}\" in\n            gcc) _get_abstract_flag_for_gcc_clang \"${toolkind}\" \"${toolname}\" \"${itemname}\" \"${value}\"; flag=\"${_ret}\";;\n            gxx) _get_abstract_flag_for_gcc_clang \"${toolkind}\" \"${toolname}\" \"${itemname}\" \"${value}\"; flag=\"${_ret}\";;\n            clang) _get_abstract_flag_for_gcc_clang \"${toolkind}\" \"${toolname}\" \"${itemname}\" \"${value}\"; flag=\"${_ret}\";;\n            clangxx) _get_abstract_flag_for_gcc_clang \"${toolkind}\" \"${toolname}\" \"${itemname}\" \"${value}\"; flag=\"${_ret}\";;\n            emcc) _get_abstract_flag_for_gcc_clang \"${toolkind}\" \"${toolname}\" \"${itemname}\" \"${value}\"; flag=\"${_ret}\";;\n            emxx) _get_abstract_flag_for_gcc_clang \"${toolkind}\" \"${toolname}\" \"${itemname}\" \"${value}\"; flag=\"${_ret}\";;\n            cosmocc) _get_abstract_flag_for_gcc_clang \"${toolkind}\" \"${toolname}\" \"${itemname}\" \"${value}\"; flag=\"${_ret}\";;\n            cosmocxx) _get_abstract_flag_for_gcc_clang \"${toolkind}\" \"${toolname}\" \"${itemname}\" \"${value}\"; flag=\"${_ret}\";;\n            tcc) _get_abstract_flag_for_gcc_clang \"${toolkind}\" \"${toolname}\" \"${itemname}\" \"${value}\"; flag=\"${_ret}\";;\n            *) raise \"unknown toolname(${toolname})!\" ;;\n        esac\n        if test_nz \"${flag}\"; then\n            flags=\"${flags} ${flag}\"\n        fi\n    done\n    _ret=\"${flags}\"\n}\n\n#-----------------------------------------------------------------------------\n# option configuration apis\n#\n\n# define option\noption() {\n    local name=\"${1}\"\n    local description=\"${2}\"\n    local default=${3}\n    _xmake_sh_option_current=\"${name}\"\n    if ! ${_loading_options}; then\n        if test_nz \"${description}\"; then\n            _xmake_sh_option_current=\"\"\n        fi\n        return\n    fi\n    if ! _map_has \"options\" \"${name}_name\"; then\n        _xmake_sh_options=\"${_xmake_sh_options} ${name}\"\n    fi\n    _map_set \"options\" \"${name}_name\" \"${name}\"\n    _map_set \"options\" \"${name}_description\" \"${description}\"\n    _map_set \"options\" \"${name}_default\" \"${default}\"\n    # we end option if it's just one line\n    if test_nz \"${description}\"; then\n        _xmake_sh_option_current=\"\"\n    fi\n    return 0\n}\noption_end() {\n    _xmake_sh_option_current=\"\"\n}\n_map \"options\"\n\n# has the given option?\n_has_option() {\n    local name=${1}\n    if _map_has \"options\" \"${name}_name\"; then\n        return 0\n    fi\n    return 1\n}\n\n# get the given option item\n_get_option_item() {\n    local name=${1}\n    local key=${2}\n    _map_get \"options\" \"${name}_${key}\"\n}\n\n# set the given option item\n_set_option_item() {\n    local name=${1}\n    local key=${2}\n    shift\n    shift\n    if test_nz \"${name}\"; then\n        _map_set \"options\" \"${name}_${key}\" \"${@}\"\n    else\n        raise \"please call set_${key}(${@}) in the option scope!\"\n    fi\n}\n\n# add values to the given option item\n_add_option_item() {\n    local name=${1}\n    local key=${2}\n    shift\n    shift\n    if test_nz \"${name}\"; then\n        _map_get \"options\" \"${name}_${key}\"; local values=\"${_ret}\"\n        values=\"${values} ${@}\"\n        _map_set \"options\" \"${name}_${key}\" \"${values}\"\n    else\n        raise \"please call add_${key}(${@}) in the option scope!\"\n    fi\n}\n\n# get the give option value\n_get_option_value() {\n    local name=${1}\n    _get_option_item \"${name}\" \"value\"\n    if test \"x${_ret}\" = \"x\"; then\n        _get_option_item \"${name}\" \"default\"\n    fi\n}\n\n# set the give option value\n_set_option_value() {\n    local name=${1}\n    local value=${2}\n    _set_option_item \"${name}\" \"value\" \"${value}\"\n}\n\n# this option need checking?\n_option_need_checking() {\n    local name=\"${1}\"\n    _get_option_item \"${name}\" \"default\"; local default=\"${_ret}\"\n    if test_nz \"${default}\"; then\n        return 1\n    fi\n    _get_option_item \"${name}\" \"cfuncs\"; local cfuncs=\"${_ret}\"\n    _get_option_item \"${name}\" \"cxxfuncs\"; local cxxfuncs=\"${_ret}\"\n    _get_option_item \"${name}\" \"cincludes\"; local cincludes=\"${_ret}\"\n    _get_option_item \"${name}\" \"cxxincludes\"; local cxxincludes=\"${_ret}\"\n    _get_option_item \"${name}\" \"ctypes\"; local ctypes=\"${_ret}\"\n    _get_option_item \"${name}\" \"cxxtypes\"; local cxxtypes=\"${_ret}\"\n    _get_option_item \"${name}\" \"csnippets\"; local csnippets=\"${_ret}\"\n    _get_option_item \"${name}\" \"cxxsnippets\"; local cxxsnippets=\"${_ret}\"\n    _get_option_item \"${name}\" \"links\"; local links=\"${_ret}\"\n    _get_option_item \"${name}\" \"syslinks\"; local syslinks=\"${_ret}\"\n    if test_nz \"${cfuncs}\" || test_nz \"${cxxfuncs}\" ||\n       test_nz \"${cincludes}\" || test_nz \"${cxxincludes}\" ||\n       test_nz \"${ctypes}\" || test_nz \"${cxxtypes}\" ||\n       test_nz \"${csnippets}\" || test_nz \"${cxxsnippets}\" ||\n       test_nz \"${links}\" || test_nz \"${syslinks}\"; then\n        return 0\n    fi\n    return 1\n}\n\n# get options for the help menu\n_get_options_for_menu() {\n    local options=\"\"\n    local name=\"\"\n    for name in ${_xmake_sh_options}; do\n        _get_option_item \"${name}\" \"showmenu\"; local showmenu=\"${_ret}\"\n        if _is_enabled \"${showmenu}\"; then\n            options=\"${options} ${name}\"\n        elif test_z \"${showmenu}\" && ! _option_need_checking \"${name}\"; then\n            options=\"${options} ${name}\"\n        fi\n    done\n    _ret=\"${options}\"\n}\n\n# get options for checking\n_get_options_for_checking() {\n    local options=\"\"\n    local name=\"\"\n    for name in ${_xmake_sh_options}; do\n        _get_option_item \"${name}\" \"showmenu\"; local showmenu=\"${_ret}\"\n        if test_z \"${showmenu}\" && _option_need_checking \"${name}\"; then\n            options=\"${options} ${name}\"\n        fi\n    done\n    _ret=\"${options}\"\n}\n\n# get abstract flags in option\n_get_option_abstract_flags() {\n    local name=\"${1}\"\n    local toolkind=\"${2}\"\n    local toolname=\"${3}\"\n    local itemname=\"${4}\"\n    local values=\"${5}\"\n    if test_z \"${values}\"; then\n        _get_option_item \"${name}\" \"${itemname}\"; values=\"${_ret}\"\n    fi\n    _get_abstract_flags \"${toolkind}\" \"${toolname}\" \"${itemname}\" \"${values}\"\n}\n\n# is config for option\nis_config() {\n    if ! ${_loading_targets}; then\n        return 1\n    fi\n    local name=${1}\n    local value=${2}\n    _get_option_value \"${name}\"; local value_cur=\"${_ret}\"\n    if test_eq \"${value_cur}\" \"${value}\"; then\n        return 0\n    fi\n    return 1\n}\n\n# has config for option\nhas_config() {\n    if ! ${_loading_targets}; then\n        return 1\n    fi\n    local name=${1}\n    _get_option_value \"${name}\"; local value_cur=\"${_ret}\"\n    if _is_enabled ${value_cur}; then\n        return 0\n    fi\n    return 1\n}\n\n# set config for option, we can use it to modify option status when loading targets\nset_config() {\n    local name=${1}\n    local value=${2}\n    _set_option_value \"${name}\" \"${value}\"\n}\n\n# set showmenu in option\nset_showmenu() {\n    if ! ${_loading_options}; then\n        return\n    fi\n    local show=\"${1}\"\n    _set_option_item \"${_xmake_sh_option_current}\" \"showmenu\" \"${show}\"\n}\n\n# set description in option\nset_description() {\n    if ! ${_loading_options}; then\n        return\n    fi\n    local description=\"${1}\"\n    _set_option_item \"${_xmake_sh_option_current}\" \"description\" \"${description}\"\n}\n\n# add cfuncs in option\nadd_cfuncs() {\n    if ! ${_loading_options}; then\n        return\n    fi\n    _add_option_item \"${_xmake_sh_option_current}\" \"cfuncs\" \"${@}\"\n}\n\n# add cxxfuncs in option\nadd_cxxfuncs() {\n    if ! ${_loading_options}; then\n        return\n    fi\n    _add_option_item \"${_xmake_sh_option_current}\" \"cxxfuncs\" \"${@}\"\n}\n\n# add cincludes in option\nadd_cincludes() {\n    if ! ${_loading_options}; then\n        return\n    fi\n    _add_option_item \"${_xmake_sh_option_current}\" \"cincludes\" \"${@}\"\n}\n\n# add cxxincludes in option\nadd_cxxincludes() {\n    if ! ${_loading_options}; then\n        return\n    fi\n    _add_option_item \"${_xmake_sh_option_current}\" \"cxxincludes\" \"${@}\"\n}\n\n# add ctypes in option\nadd_ctypes() {\n    if ! ${_loading_options}; then\n        return\n    fi\n    _add_option_item \"${_xmake_sh_option_current}\" \"ctypes\" \"${@}\"\n}\n\n# add cxxtypes in option\nadd_cxxtypes() {\n    if ! ${_loading_options}; then\n        return\n    fi\n    _add_option_item \"${_xmake_sh_option_current}\" \"cxxtypes\" \"${@}\"\n}\n\n# add csnippets in option\nadd_csnippets() {\n    if ! ${_loading_options}; then\n        return\n    fi\n    local csnippets=\"${1}\"\n    _add_option_item \"${_xmake_sh_option_current}\" \"csnippets\" \"${csnippets}\"\n}\n\n# add cxxsnippets in option\nadd_cxxsnippets() {\n    if ! ${_loading_options}; then\n        return\n    fi\n    local cxxsnippets=\"${1}\"\n    _add_option_item \"${_xmake_sh_option_current}\" \"cxxsnippets\" \"${cxxsnippets}\"\n}\n\n# before_check in option\nbefore_check() {\n    if ! ${_loading_options}; then\n        return\n    fi\n    local funcname=\"${1}\"\n    _add_option_item \"${_xmake_sh_option_current}\" \"before_check\" \"${funcname}\"\n}\n\n#-----------------------------------------------------------------------------\n# target configuration apis\n#\n\n# define target\ntarget() {\n    local name=\"${1}\"\n    _xmake_sh_target_current=\"${name}\"\n    if ! ${_loading_targets}; then\n        return\n    fi\n    if ! _map_has \"targets\" \"${name}_name\"; then\n        _xmake_sh_targets=\"${_xmake_sh_targets} ${name}\"\n    fi\n    _map_set \"targets\" \"${name}_name\" \"${name}\"\n    return 0\n}\ntarget_end() {\n    _xmake_sh_target_current=\"\"\n}\n_map \"targets\"\n\n# has the given target?\n_has_target() {\n    local name=${1}\n    if _map_has \"targets\" \"${name}_name\"; then\n        return 0\n    fi\n    return 1\n}\n\n# has the given target item\n_has_target_item() {\n    local name=${1}\n    local key=${2}\n    if _map_has \"targets\" \"${name}_${key}\"; then\n        return 0\n    elif _map_has \"targets\" \"__root_${key}\"; then\n        return 0\n    fi\n    return 1\n}\n\n# get the given target item\n_get_target_item() {\n    local name=${1}\n    local key=${2}\n    _map_get \"targets\" \"${name}_${key}\"\n    local values=\"${_ret}\"\n    if _map_has \"targets\" \"__root_${key}\"; then\n        _map_get \"targets\" \"__root_${key}\"; local root_values=\"${_ret}\"\n        if test_nz \"${values}\"; then\n            values=\"${root_values} ${values}\"\n        else\n            values=\"${root_values}\"\n        fi\n    fi\n    _ret=\"${values}\"\n}\n\n# set the given target item\n_set_target_item() {\n    local name=${1}\n    local key=${2}\n    shift\n    shift\n    if test_nz \"${name}\"; then\n        _map_set \"targets\" \"${name}_${key}\" \"${@}\"\n    else\n        _map_set \"targets\" \"__root_${key}\" \"${@}\"\n    fi\n}\n\n# add values to the given target item\n_add_target_item() {\n    local name=${1}\n    local key=${2}\n    shift\n    shift\n    if test_nz \"${name}\"; then\n        _map_get \"targets\" \"${name}_${key}\"; local values=\"${_ret}\"\n        values=\"${values} ${@}\"\n        _map_set \"targets\" \"${name}_${key}\" \"${values}\"\n    else\n        _map_get \"targets\" \"__root_${key}\"; local values=\"${_ret}\"\n        values=\"${values} ${@}\"\n        _map_set \"targets\" \"__root_${key}\" \"${values}\"\n    fi\n}\n\n# is default?\n_is_target_default() {\n    local name=\"${1}\"\n    if _has_target_item \"${name}\" \"default\"; then\n        _get_target_item \"${target}\" \"default\"; local default=\"${_ret}\"\n        if _is_enabled ${default}; then\n            return 0\n        fi\n        return 1\n    fi\n    return 0\n}\n\n# get target basename\n_get_target_basename() {\n    local name=\"${1}\"\n    _get_target_item \"${name}\" \"basename\"; local basename=\"${_ret}\"\n    if test_z \"${basename}\"; then\n        basename=\"${name}\"\n    fi\n    _ret=\"${basename}\"\n}\n\n# get target extension\n_get_target_extension() {\n    local name=\"${1}\"\n    local extension=\"\"\n    if _has_target_item \"${name}\" \"extension\"; then\n        _get_target_item \"${name}\" \"extension\"; extension=\"${_ret}\"\n    elif is_plat \"mingw\"; then\n        _get_target_item \"${name}\" \"kind\"; local kind=\"${_ret}\"\n        if test \"x${kind}\" = \"xbinary\"; then\n            extension=\".exe\"\n        elif test \"x${kind}\" = \"xstatic\"; then\n            extension=\".a\"\n        elif test \"x${kind}\" = \"xshared\"; then\n            extension=\".dll\"\n        fi\n    else\n        _get_target_item \"${name}\" \"kind\"; local kind=\"${_ret}\"\n        if test \"x${kind}\" = \"xstatic\"; then\n            extension=\".a\"\n        elif test \"x${kind}\" = \"xshared\"; then\n            if is_plat \"macosx\"; then\n                extension=\".dylib\"\n            else\n                extension=\".so\"\n            fi\n        fi\n    fi\n    _ret=\"${extension}\"\n}\n\n# get target prefixname\n_get_target_prefixname() {\n    local name=\"${1}\"\n    local prefixname=\"\"\n    if _has_target_item \"${name}\" \"prefixname\"; then\n        _get_target_item \"${name}\" \"prefixname\"; prefixname=\"${_ret}\"\n    elif is_plat \"mingw\"; then\n        _get_target_item \"${name}\" \"kind\"; local kind=\"${_ret}\"\n        if test \"x${kind}\" = \"xstatic\"; then\n            prefixname=\"lib\"\n        elif test \"x${kind}\" = \"xshared\"; then\n            prefixname=\"lib\"\n        fi\n    else\n        _get_target_item \"${name}\" \"kind\"; local kind=\"${_ret}\"\n        if test \"x${kind}\" = \"xstatic\"; then\n            prefixname=\"lib\"\n        elif test \"x${kind}\" = \"xshared\"; then\n            prefixname=\"lib\"\n        fi\n    fi\n    _ret=\"${prefixname}\"\n}\n\n# get target filename\n_get_target_filename() {\n    local name=\"${1}\"\n    _get_target_item \"${name}\" \"filename\"; local filename=\"${_ret}\"\n    if test_z \"${filename}\"; then\n        _get_target_basename \"${name}\"; local basename=\"${_ret}\"\n        _get_target_extension \"${name}\"; local extension=\"${_ret}\"\n        _get_target_prefixname \"${name}\"; local prefixname=\"${_ret}\"\n        filename=\"${prefixname}${basename}${extension}\"\n    fi\n    _ret=\"${filename}\"\n}\n\n# get target soname\n# @see https://github.com/tboox/tbox/issues/214\n#\n# set_version \"1.0.1\" \"\" \"1\" -> libfoo.so.1, libfoo.1.dylib\n# set_version \"1.0.1\" \"\" \"A\" -> libfoo.so.A, libfoo.A.dylib\n_get_target_soname() {\n    local soname=\"\"\n    local name=\"${1}\"\n    _get_target_item \"${name}\" \"kind\"; local targetkind=\"${_ret}\"\n    if test_eq \"${targetkind}\" \"shared\" && is_plat \"macosx\" \"linux\" \"bsd\"; then\n        _get_target_item \"${name}\" \"version\"; local version=\"${_ret}\"\n        _get_target_item \"${name}\" \"version_soname\"; local version_soname=\"${_ret}\"\n        if test_nz \"${version}\" && test_nz \"${version_soname}\"; then\n            _get_target_filename \"${name}\"; soname=\"${_ret}\"\n            _get_target_extension \"${name}\"; local extension=\"${_ret}\"\n            if test_eq \"${extension}\" \".dylib\"; then\n                path_basename \"${soname}\"; local basename=\"${_ret}\"\n                soname=\"${basename}.${version_soname}${extension}\"\n            else\n                soname=\"${soname}.${version_soname}\"\n            fi\n        fi\n    fi\n    _ret=\"${soname}\"\n}\n\n# get target directory\n_get_targetdir() {\n    local name=\"${1}\"\n    _get_target_item \"${name}\" \"targetdir\"; local targetdir=\"${_ret}\"\n    if test_z \"${targetdir}\"; then\n        targetdir=\"${xmake_sh_buildir}/${_target_plat}/${_target_arch}/${_target_mode}\"\n    fi\n    _ret=\"${targetdir}\"\n}\n\n# get target object directory\n_get_target_objectdir() {\n    local name=\"${1}\"\n    _get_target_item \"${name}\" \"objectdir\"; local objectdir=\"${_ret}\"\n    if test_z \"${objectdir}\"; then\n        objectdir=\"${xmake_sh_buildir}/.objs/${name}/${_target_plat}/${_target_arch}/${_target_mode}\"\n    fi\n    _ret=\"${objectdir}\"\n}\n\n# get target file path\n_get_target_file() {\n    local name=\"${1}\"\n    _get_target_filename \"${name}\"; local filename=\"${_ret}\"\n    _get_targetdir \"${name}\"; local targetdir=\"${_ret}\"\n    local targetfile=\"${targetdir}/${filename}\"\n    _ret=\"${targetfile}\"\n}\n\n# get target librarydeps\n_get_target_librarydeps_impl() {\n    local name=\"${1}\"\n    local librarydeps=\"\"\n    local dep=\"\"\n    _get_target_item \"${name}\" \"deps\"; local deps=\"${_ret}\"\n    for dep in ${deps}; do\n        _get_target_item \"${dep}\" \"kind\"; local dep_kind=\"${_ret}\"\n        if test_eq \"${dep_kind}\" \"static\" || test_eq \"${dep_kind}\" \"shared\"; then\n            librarydeps=\"${librarydeps} ${dep}\"\n            _get_target_librarydeps_impl \"${dep}\"; local dep_librarydeps=\"${_ret}\"\n            if test_nz \"${dep_librarydeps}\"; then\n                librarydeps=\"${librarydeps} ${dep_librarydeps}\"\n            fi\n        fi\n    done\n    _ret=\"${librarydeps}\"\n}\n\n_get_target_librarydeps() {\n    local name=\"${1}\"\n    _get_target_item \"${name}\" \"librarydeps\"; local librarydeps=\"${_ret}\"\n    if test_z \"${librarydeps}\" && test_nq \"${librarydeps}\" \"__none__\"; then\n        _get_target_librarydeps_impl \"${name}\"; librarydeps=\"${_ret}\"\n        if test_nz \"${librarydeps}\"; then\n            _dedup_reverse \"${librarydeps}\"; librarydeps=\"${_ret}\"\n            _set_target_item \"${name}\" \"librarydeps\" \"${librarydeps}\"\n        else\n            _set_target_item \"${name}\" \"librarydeps\" \"__none__\"\n        fi\n    fi\n    if test_eq \"${librarydeps}\" \"__none__\"; then\n        librarydeps=\"\"\n    fi\n    _ret=\"${librarydeps}\"\n}\n\n# get sourcefiles in target\n_get_target_sourcefiles() {\n    local name=\"${1}\"\n    _get_target_item \"${name}\" \"files\"\n}\n\n# get objectfile in target\n_get_target_objectfile() {\n    local name=\"${1}\"\n    local sourcefile=\"${2}\"\n    local extension=\".o\"\n    if is_plat \"mingw\"; then\n        extension=\".obj\"\n    fi\n    _get_target_objectdir \"${name}\"; local objectdir=\"${_ret}\"\n    local objectfile=\"${objectdir}/${sourcefile}${extension}\"\n    _ret=\"${objectfile}\"\n}\n\n# get objectfiles in target\n_get_target_objectfiles() {\n    local name=\"${1}\"\n    _get_target_sourcefiles \"${name}\"; local sourcefiles=\"${_ret}\"\n    local objectfiles=\"\"\n    local sourcefile=\"\"\n    for sourcefile in ${sourcefiles}; do\n        _get_target_objectfile \"${name}\" \"${sourcefile}\"; local objectfile=\"${_ret}\"\n        objectfiles=\"${objectfiles} ${objectfile}\"\n    done\n    _ret=\"${objectfiles}\"\n}\n\n# get abstract flags in target\n_get_target_abstract_flags() {\n    local name=\"${1}\"\n    local toolkind=\"${2}\"\n    local toolname=\"${3}\"\n    local itemname=\"${4}\"\n    local values=\"${5}\"\n    if test_z \"${values}\"; then\n\n        # get values from target\n        _get_target_item \"${name}\" \"${itemname}\"; values=\"${_ret}\"\n\n        # get values from target deps\n        _get_target_librarydeps \"${name}\"; local deps=\"${_ret}\"\n        local dep=\"\"\n        for dep in ${deps}; do\n            _get_target_item \"${dep}\" \"kind\"; local dep_kind=\"${_ret}\"\n            if test_eq \"${dep_kind}\" \"static\" || test_eq \"${dep_kind}\" \"shared\"; then\n                _get_target_item \"${dep}\" \"${itemname}_public\"; local depvalues=\"${_ret}\"\n                if test_nz \"${depvalues}\"; then\n                    values=\"${values} ${depvalues}\"\n                fi\n            fi\n        done\n    fi\n    if test_nz \"${values}\"; then\n        _get_abstract_flags \"${toolkind}\" \"${toolname}\" \"${itemname}\" \"${values}\"\n    else\n        _ret=\"\"\n    fi\n}\n\n# get toolchain flags for ar in target\n_get_target_toolchain_flags_for_ar() {\n    _ret=\"-cr\"\n}\n\n# get toolchain flags for gcc in target\n_get_target_toolchain_flags_for_gcc() {\n    local name=\"${1}\"\n    local toolkind=\"${2}\"\n    local flags=\"\"\n    if is_arch \"i386\"; then\n        flags=\"${flags} -m32\"\n    fi\n    _get_target_item \"${name}\" \"kind\"; local targetkind=\"${_ret}\"\n    if test_eq \"${targetkind}\" \"shared\"; then\n        if test_eq \"${toolkind}\" \"sh\"; then\n            flags=\"${flags} -shared -fPIC\"\n        elif test_eq \"${toolkind}\" \"cc\" || test_eq \"${toolkind}\" \"cxx\"; then\n            flags=\"${flags} -fPIC\"\n        fi\n        # @see https://github.com/tboox/tbox/issues/214\n        if test_eq \"${toolkind}\" \"sh\"; then\n            _get_target_soname \"${name}\"; local soname=\"${_ret}\"\n            if test_nz \"${soname}\"; then\n                if is_plat \"macosx\"; then\n                    flags=\"${flags} -Wl,-install_name,${soname}\"\n                else\n                    flags=\"${flags} -Wl,-soname,${soname}\"\n                fi\n            fi\n        fi\n    fi\n    _ret=\"${flags}\"\n}\n\n# get toolchain flags for clang in target\n_get_target_toolchain_flags_for_clang() {\n    local name=\"${1}\"\n    local toolkind=\"${2}\"\n    local flags=\"-Qunused-arguments\"\n    if is_arch \"i386\"; then\n        flags=\"${flags} -m32\"\n    fi\n    _get_target_item \"${name}\" \"kind\"; local targetkind=\"${_ret}\"\n    if test_eq \"${targetkind}\" \"shared\"; then\n        if test_eq \"${toolkind}\" \"sh\"; then\n            flags=\"${flags} -shared -fPIC\"\n        elif test_eq \"${toolkind}\" \"cc\" || test_eq \"${toolkind}\" \"cxx\"; then\n            flags=\"${flags} -fPIC\"\n        fi\n        # @see https://github.com/tboox/tbox/issues/214\n        if test_eq \"${toolkind}\" \"sh\"; then\n            _get_target_soname \"${name}\"; local soname=\"${_ret}\"\n            if test_nz \"${soname}\"; then\n                if is_plat \"macosx\"; then\n                    flags=\"${flags} -Wl,-install_name,${soname}\"\n                else\n                    flags=\"${flags} -Wl,-soname,${soname}\"\n                fi\n            fi\n        fi\n    fi\n    if is_plat \"macosx\"; then\n        _os_iorunv \"xcrun\" \"-sdk\" \"macosx\" \"--show-sdk-path\"; local sdkdir=\"${_ret}\"\n        if test_nz \"${sdkdir}\"; then\n            flags=\"${flags} -isysroot \\\"${sdkdir}\\\"\"\n        fi\n    fi\n    _ret=\"${flags}\"\n}\n\n# get toolchain flags for tcc in target\n_get_target_toolchain_flags_for_tcc() {\n    local name=\"${1}\"\n    local toolkind=\"${2}\"\n    local flags=\"\"\n    if is_arch \"i386\"; then\n        flags=\"${flags} -m32\"\n    fi\n    _get_target_item \"${name}\" \"kind\"; local targetkind=\"${_ret}\"\n    if test_eq \"${targetkind}\" \"shared\"; then\n        if test_eq \"${toolkind}\" \"sh\"; then\n            flags=\"${flags} -shared -fPIC\"\n        elif test_eq \"${toolkind}\" \"cc\" || test_eq \"${toolkind}\" \"cxx\"; then\n            flags=\"${flags} -fPIC\"\n        fi\n        # @see https://github.com/tboox/tbox/issues/214\n        if test_eq \"${toolkind}\" \"sh\"; then\n            _get_target_soname \"${name}\"; local soname=\"${_ret}\"\n            if test_nz \"${soname}\"; then\n                if is_plat \"macosx\"; then\n                    flags=\"${flags} -Wl,-install_name,${soname}\"\n                else\n                    flags=\"${flags} -Wl,-soname,${soname}\"\n                fi\n            fi\n        fi\n    fi\n    if is_plat \"macosx\"; then\n        _os_iorunv \"xcrun\" \"-sdk\" \"macosx\" \"--show-sdk-path\"; local sdkdir=\"${_ret}\"\n        if test_nz \"${sdkdir}\"; then\n            flags=\"${flags} -isysroot \\\"${sdkdir}\\\"\"\n        fi\n    fi\n    _ret=\"${flags}\"\n}\n\n# get toolchain flags in target\n_get_target_toolchain_flags() {\n    local name=\"${1}\"\n    local toolkind=\"${2}\"\n    local toolname=\"${3}\"\n    local flags=\"\"\n    case \"${toolname}\" in\n        gcc) _get_target_toolchain_flags_for_gcc \"${name}\" \"${toolkind}\"; flags=\"${_ret}\";;\n        gxx) _get_target_toolchain_flags_for_gcc \"${name}\" \"${toolkind}\"; flags=\"${_ret}\";;\n        clang) _get_target_toolchain_flags_for_clang \"${name}\" \"${toolkind}\"; flags=\"${_ret}\";;\n        clangxx) _get_target_toolchain_flags_for_clang \"${name}\" \"${toolkind}\"; flags=\"${_ret}\";;\n        emcc) _get_target_toolchain_flags_for_clang \"${name}\" \"${toolkind}\"; flags=\"${_ret}\";;\n        emxx) _get_target_toolchain_flags_for_clang \"${name}\" \"${toolkind}\"; flags=\"${_ret}\";;\n        cosmocc) _get_target_toolchain_flags_for_gcc \"${name}\" \"${toolkind}\"; flags=\"${_ret}\";;\n        cosmocxx) _get_target_toolchain_flags_for_gcc \"${name}\" \"${toolkind}\"; flags=\"${_ret}\";;\n        tcc) _get_target_toolchain_flags_for_tcc \"${name}\" \"${toolkind}\"; flags=\"${_ret}\";;\n        ar) _get_target_toolchain_flags_for_ar \"${name}\" \"${toolkind}\"; flags=\"${_ret}\";;\n        emar) _get_target_toolchain_flags_for_ar \"${name}\" \"${toolkind}\"; flags=\"${_ret}\";;\n        cosmoar) _get_target_toolchain_flags_for_ar \"${name}\" \"${toolkind}\"; flags=\"${_ret}\";;\n        *) raise \"unknown toolname(${toolname})!\" ;;\n    esac\n    _ret=\"${flags}\"\n}\n\n# get compiler flags in target\n_get_target_compiler_flags() {\n    local name=\"${1}\"\n    local toolkind=\"${2}\"\n    _get_toolchain_toolset \"${_target_toolchain}\" \"${toolkind}\"; local program=\"${_ret}\"\n    path_toolname \"${program}\"; local toolname=\"${_ret}\"\n    local result=\"\"\n\n    # get toolchain flags\n    _get_target_toolchain_flags \"${name}\" \"${toolkind}\" \"${toolname}\"; local toolchain_flags=\"${_ret}\"\n    if test_nz \"${toolchain_flags}\"; then\n        result=\"${result} ${toolchain_flags}\"\n    fi\n\n    # get abstract flags\n    local itemnames=\"symbols optimizes warnings languages defines undefines includedirs frameworkdirs frameworks\"\n    local itemname=\"\"\n    for itemname in ${itemnames}; do\n        _get_target_abstract_flags \"${name}\" \"${toolkind}\" \"${toolname}\" \"${itemname}\"; local flags=\"${_ret}\"\n        if test_nz \"${flags}\"; then\n            result=\"${result} ${flags}\"\n        fi\n    done\n\n    # get raw flags, e.g. add_cflags, add_cxxflags\n    _get_flagname \"${toolkind}\"; local flagname=\"${_ret}\"\n    _get_target_item \"${name}\" \"${flagname}\"; local flags=\"${_ret}\"\n    # get flags from target deps\n    _get_target_librarydeps \"${name}\"; local deps=\"${_ret}\"\n    local dep=\"\"\n    for dep in ${deps}; do\n        _get_target_item \"${dep}\" \"kind\"; local dep_kind=\"${_ret}\"\n        if test_eq \"${dep_kind}\" \"static\" || test_eq \"${dep_kind}\" \"shared\"; then\n            _get_target_item \"${dep}\" \"${flagname}_public\"; local depflags=\"${_ret}\"\n            if test_nz \"${depflags}\"; then\n                flags=\"${flags} ${depflags}\"\n            fi\n        fi\n    done\n    if test_nz \"${flags}\"; then\n        result=\"${result} ${flags}\"\n    fi\n    if test_eq \"${flagname}\" \"cflags\" || test_eq \"${flagname}\" \"cxxflags\"; then\n        _get_target_item \"${name}\" \"cxflags\"; flags=\"${_ret}\"\n        if test_nz \"${flags}\"; then\n            result=\"${result} ${flags}\"\n        fi\n    elif test_eq \"${flagname}\" \"mflags\" || test_eq \"${flagname}\" \"mxxflags\"; then\n        _get_target_item \"${name}\" \"mxflags\"; flags=\"${_ret}\"\n        if test_nz \"${flags}\"; then\n            result=\"${result} ${flags}\"\n        fi\n    fi\n\n    # get flags from environments, e.g. $CFLAGS, $CXXFLAGS\n    if test_nz \"${CPPFLAGS}\"; then\n        result=\"${result} ${CPPFLAGS}\"\n    fi\n    if test_eq \"${flagname}\" \"cflags\" && test_nz \"${CFLAGS}\"; then\n        result=\"${result} ${CFLAGS}\"\n    fi\n    if test_eq \"${flagname}\" \"cxxflags\" && test_nz \"${CXXFLAGS}\"; then\n        result=\"${result} ${CXXFLAGS}\"\n    fi\n    if test_eq \"${flagname}\" \"mflags\" && test_nz \"${MFLAGS}\"; then\n        result=\"${result} ${MFLAGS}\"\n    fi\n    if test_eq \"${flagname}\" \"mxxflags\" && test_nz \"${MXXFLAGS}\"; then\n        result=\"${result} ${MXXFLAGS}\"\n    fi\n    _ret=\"${result}\"\n}\n\n# get linker flags in target\n_get_target_linker_flags() {\n    local name=\"${1}\"\n    local toolkind=\"${2}\"\n    _get_toolchain_toolset \"${_target_toolchain}\" \"${toolkind}\"; local program=\"${_ret}\"\n    path_toolname \"${program}\"; local toolname=\"${_ret}\"\n    local result=\"\"\n\n    # get toolchain flags\n    _get_target_toolchain_flags \"${name}\" \"${toolkind}\" \"${toolname}\"; local toolchain_flags=\"${_ret}\"\n    if test_nz \"${toolchain_flags}\"; then\n        result=\"${result} ${toolchain_flags}\"\n    fi\n\n    # get flags from target deps\n    _get_target_librarydeps \"${name}\"; local deps=\"${_ret}\"\n    local dep=\"\"\n    for dep in ${deps}; do\n        _get_target_item \"${dep}\" \"kind\"; local dep_kind=\"${_ret}\"\n        if test_eq \"${dep_kind}\" \"static\" || test_eq \"${dep_kind}\" \"shared\"; then\n            _get_targetdir \"${dep}\"; local dep_targetdir=\"${_ret}\"\n            _get_target_basename \"${dep}\"; local dep_basename=\"${_ret}\"\n            _get_target_abstract_flags \"${dep}\" \"${toolkind}\" \"${toolname}\" \"linkdirs\" \"${dep_targetdir}\"; local linkdirs_flags=\"${_ret}\"\n            _get_target_abstract_flags \"${dep}\" \"${toolkind}\" \"${toolname}\" \"links\" \"${dep_basename}\"; local links_flags=\"${_ret}\"\n            if test_eq \"${dep_kind}\" \"shared\"; then\n                local rpathdir=\"@loader_path\"\n                _get_targetdir \"${name}\"; local targetdir=\"${_ret}\"\n                path_relative \"${targetdir}\" \"${dep_targetdir}\"; local subdir=\"${_ret}\"\n                if test_nz \"${subdir}\"; then\n                    rpathdir=\"${rpathdir}/${subdir}\"\n                fi\n                _get_target_abstract_flags \"${dep}\" \"${toolkind}\" \"${toolname}\" \"rpathdirs\" \"${rpathdir}\"; local rpathdirs_flags=\"${_ret}\"\n                result=\"${result} ${rpathdirs_flags}\"\n            fi\n            result=\"${result} ${linkdirs_flags} ${links_flags}\"\n        fi\n    done\n\n    # get abstract flags\n    local itemnames=\"strip frameworkdirs linkdirs links rpathdirs frameworks syslinks\"\n    local itemname=\"\"\n    for itemname in ${itemnames}; do\n        _get_target_abstract_flags \"${name}\" \"${toolkind}\" \"${toolname}\" \"${itemname}\"; local flags=\"${_ret}\"\n        if test_nz \"${flags}\"; then\n            result=\"${result} ${flags}\"\n        fi\n    done\n\n    # get raw flags, e.g. add_ldflags, add_shflags\n    _get_flagname \"${toolkind}\"; local flagname=\"${_ret}\"\n    _get_target_item \"${name}\" \"${flagname}\"; local flags=\"${_ret}\"\n    # get flags from target deps\n    for dep in ${deps}; do\n        _get_target_item \"${dep}\" \"kind\"; local dep_kind=\"${_ret}\"\n        if test_eq \"${dep_kind}\" \"static\" || test_eq \"${dep_kind}\" \"shared\"; then\n            _get_target_item \"${dep}\" \"${flagname}_public\"; local depflags=\"${_ret}\"\n            if test_nz \"${depflags}\"; then\n                flags=\"${flags} ${depflags}\"\n            fi\n        fi\n    done\n    if test_nz \"${flags}\"; then\n        result=\"${result} ${flags}\"\n    fi\n\n    # get flags from environments, e.g. $LDFLAGS\n    if test_eq \"${flagname}\" \"ldflags\" && test_nz \"${LDFLAGS}\"; then\n        result=\"${result} ${LDFLAGS}\"\n    fi\n    if test_eq \"${flagname}\" \"shflags\" && test_nz \"${LDFLAGS}\"; then\n        result=\"${result} ${LDFLAGS}\"\n    fi\n    _ret=\"${result}\"\n}\n\n# get archiver flags in target\n_get_target_archiver_flags() {\n    local name=\"${1}\"\n    local toolkind=\"${2}\"\n    _get_toolchain_toolset \"${_target_toolchain}\" \"${toolkind}\"; local program=\"${_ret}\"\n    path_toolname \"${program}\"; local toolname=\"${_ret}\"\n    local result=\"\"\n\n    # get toolchain flags\n    _get_target_toolchain_flags \"${name}\" \"${toolkind}\" \"${toolname}\"; local toolchain_flags=\"${_ret}\"\n    if test_nz \"${toolchain_flags}\"; then\n        result=\"${result} ${toolchain_flags}\"\n    fi\n\n    # get raw flags, e.g. add_arflags\n    _get_flagname \"${toolkind}\"; local flagname=\"${_ret}\"\n    _get_target_item \"${name}\" \"${flagname}\"; local flags=\"${_ret}\"\n    if test_nz \"${flags}\"; then\n        result=\"${result} ${flags}\"\n    fi\n\n    _ret=\"${result}\"\n}\n\n# get target flags\n_get_target_flags() {\n    local name=\"${1}\"\n    local toolkind=\"${2}\"\n    local flags=\"\"\n    if test_eq \"${toolkind}\" \"sh\"; then\n        _get_target_linker_flags \"${name}\" \"${toolkind}\"; flags=\"${_ret}\"\n    elif test_eq \"${toolkind}\" \"ld\"; then\n        _get_target_linker_flags \"${name}\" \"${toolkind}\"; flags=\"${_ret}\"\n    elif test_eq \"${toolkind}\" \"ar\"; then\n        _get_target_archiver_flags \"${name}\" \"${toolkind}\"; flags=\"${_ret}\"\n    else\n        _get_target_compiler_flags \"${name}\" \"${toolkind}\"; flags=\"${_ret}\"\n    fi\n    _ret=\"${flags}\"\n}\n\n# add file paths in target\n_add_target_filepaths() {\n    local key=\"$1\"\n    shift\n    # we need avoid escape `*` automatically in for-loop\n    local file=\"\"\n    string_replace \"${@}\" \"\\*\" \"?\"; local list=\"${_ret}\"\n    if test_eq \"${key}\" \"files\"; then\n        for file in ${list}; do\n            path_sourcekind \"${file}\"; local sourcekind=\"${_ret}\"\n            _targets_toolkinds=\"${_targets_toolkinds} ${sourcekind}\"\n        done\n    fi\n    for file in ${list}; do\n        string_replace \"${file}\" \"?\" \"*\"; file=\"${_ret}\"\n        if ! path_is_absolute \"${file}\"; then\n            file=\"${xmake_sh_scriptdir}/${file}\"\n        fi\n        local files=\"\"\n        if string_contains_star2 \"${file}\"; then\n            path_directory \"${file}\"; local dir=\"${_ret}\"\n            path_filename_fromdir \"${file}\" \"${dir}\"; local name=\"${_ret}\"\n            _os_find \"${dir}\" \"${name}\"; files=\"${_ret}\"\n        elif string_contains_star \"${file}\"; then\n            path_directory \"${file}\"; local dir=\"${_ret}\"\n            path_filename_fromdir \"${file}\" \"${dir}\"; local name=\"${_ret}\"\n            _os_find \"${dir}\" \"${name}\" 1; files=\"${_ret}\"\n        else\n            files=\"${file}\"\n        fi\n        for file in ${files}; do\n            path_relative \"${xmake_sh_projectdir}\" \"${file}\"; file=\"${_ret}\"\n            _add_target_item \"${_xmake_sh_target_current}\" \"${key}\" \"${file}\"\n        done\n    done\n}\n\n# add install paths in target\n_add_target_installpaths() {\n    local key=\"$1\"\n    local filepattern=\"${2}\"\n    local prefixdir=\"${3}\"\n    local filename=${4}\n\n    # get root directory, e.g. \"src/foo/(*.h)\" -> \"src/foo\"\n    local rootdir=\"\"\n    if string_contains \"${filepattern}\" \"(\"; then\n        string_split \"${filepattern}\" \"(\" 1; rootdir=\"${_ret}\"\n        rootdir=${rootdir%/}\n        if ! path_is_absolute \"${rootdir}\"; then\n            rootdir=\"${xmake_sh_scriptdir}/${rootdir}\"\n        fi\n        path_relative \"${xmake_sh_projectdir}\" \"${rootdir}\"; rootdir=\"${_ret}\"\n        rootdir=${rootdir%/}\n    fi\n\n    # remove (), e.g. \"src/(*.h)\" -> \"src/*.h\"\n    string_replace ${filepattern} \"(\" \"\"; filepattern=\"${_ret}\"\n    string_replace ${filepattern} \")\" \"\"; filepattern=\"${_ret}\"\n\n    # get real path\n    if ! path_is_absolute \"${filepattern}\"; then\n        filepattern=\"${xmake_sh_scriptdir}/${filepattern}\"\n    fi\n    local files=\"\"\n    if string_contains_star2 \"${filepattern}\"; then\n        path_directory \"${filepattern}\"; local dir=\"${_ret}\"\n        path_filename_fromdir \"${filepattern}\" \"${dir}\"; local name=\"${_ret}\"\n        _os_find \"${dir}\" \"${name}\"; files=\"${_ret}\"\n    elif string_contains_star \"${filepattern}\"; then\n        path_directory \"${filepattern}\"; local dir=\"${_ret}\"\n        path_filename_fromdir \"${filepattern}\" \"${dir}\"; local name=\"${_ret}\"\n        _os_find \"${dir}\" \"${name}\" 1; files=\"${_ret}\"\n    else\n        files=\"${filepattern}\"\n    fi\n    for file in ${files}; do\n        path_relative \"${xmake_sh_projectdir}\" \"${file}\"; file=\"${_ret}\"\n        _add_target_item \"${_xmake_sh_target_current}\" \"${key}\" \"${file}:${rootdir}:${prefixdir}:${filename}\"\n    done\n}\n\n# set target file path\n_set_target_filepath() {\n    local key=\"${1}\"\n    local path=\"${2}\"\n    if ! path_is_absolute \"${path}\"; then\n        path=\"${xmake_sh_scriptdir}/${path}\"\n    fi\n    path_relative ${xmake_sh_projectdir} \"${path}\"; path=\"${_ret}\"\n    _set_target_item \"${_xmake_sh_target_current}\" \"${key}\" \"${path}\"\n}\n\n# set kind in target\nset_kind() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    local kind=${1}\n    _set_target_item \"${_xmake_sh_target_current}\" \"kind\" \"${kind}\"\n    case \"${kind}\" in\n        binary) _targets_toolkinds=\"${_targets_toolkinds} ld\";;\n        static) _targets_toolkinds=\"${_targets_toolkinds} ar\";;\n        shared) _targets_toolkinds=\"${_targets_toolkinds} sh\";;\n        *) raise \"unknown target kind ${kind}\";;\n    esac\n}\n\n# set version in target\nset_version() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    local version=\"${1}\"\n    local version_build=\"${2}\"\n    local version_soname=\"${3}\"\n    _set_target_item \"${_xmake_sh_target_current}\" \"version\" \"${version}\"\n    _set_target_item \"${_xmake_sh_target_current}\" \"version_build\" \"${version_build}\"\n    _set_target_item \"${_xmake_sh_target_current}\" \"version_soname\" \"${version_soname}\"\n}\n\n# set default in target\nset_default() {\n    local default=${1}\n    if ${_loading_targets} && test_z \"${_xmake_sh_option_current}\"; then\n        _set_target_item \"${_xmake_sh_target_current}\" \"default\" \"${default}\"\n    elif ${_loading_options} && test_nz \"${_xmake_sh_option_current}\"; then\n        _set_option_item \"${_xmake_sh_option_current}\" \"default\" \"${default}\"\n    fi\n}\n\n# set configvar in target\nset_configvar() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    local name=\"${1}\"\n    local value=\"${2}\"\n    _set_target_item \"${_xmake_sh_target_current}\" \"configvar_${name}\" \"${value}\"\n    _add_target_item \"${_xmake_sh_target_current}\" \"configvars\" \"${name}\"\n}\n\n# set filename in target\nset_filename() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    local filename=\"${1}\"\n    _set_target_item \"${_xmake_sh_target_current}\" \"filename\" \"${filename}\"\n}\n\n# set basename in target\nset_basename() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    local basename=\"${1}\"\n    _set_target_item \"${_xmake_sh_target_current}\" \"basename\" \"${basename}\"\n}\n\n# set extension in target\nset_extension() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    local extension=${1}\n    _set_target_item \"${_xmake_sh_target_current}\" \"extension\" \"${extension}\"\n}\n\n# set prefixname in target\nset_prefixname() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    local prefixname=${1}\n    _set_target_item \"${_xmake_sh_target_current}\" \"prefixname\" \"${prefixname}\"\n}\n\n# set target directory\nset_targetdir() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    _set_target_filepath \"targetdir\" \"${1}\"\n}\n\n# set target object directory\nset_objectdir() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    _set_target_filepath \"objectdir\" \"${1}\"\n}\n\n# set target config directory\nset_configdir() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    _set_target_filepath \"configdir\" \"${1}\"\n}\n\n# set target install directory\nset_installdir() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    _set_target_filepath \"installdir\" \"${1}\"\n}\n\n# add deps in target\nadd_deps() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    _add_target_item \"${_xmake_sh_target_current}\" \"deps\" \"${@}\"\n}\n\n# add files in target\nadd_files() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    _add_target_filepaths \"files\" \"$@\"\n}\n\n# add install files in target\nadd_installfiles() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    _add_target_installpaths \"installfiles\" \"$@\"\n}\n\n# add header files in target\nadd_headerfiles() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    _add_target_installpaths \"headerfiles\" \"$@\"\n}\n\n# add config files in target\nadd_configfiles() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    _add_target_filepaths \"configfiles\" \"$@\"\n}\n\n# add defines in target\nadd_defines() {\n    local define=\"\"\n    if ${_loading_targets} && test_z \"${_xmake_sh_option_current}\"; then\n        local public=false\n        for define in $@; do\n            if test_nq \"${define}\" \"{public}\"; then\n                _add_target_item \"${_xmake_sh_target_current}\" \"defines\" \"${define}\"\n            else\n                public=true\n            fi\n        done\n        if ${public}; then\n            for define in $@; do\n                if test_nq \"${define}\" \"{public}\"; then\n                    _add_target_item \"${_xmake_sh_target_current}\" \"defines_public\" \"${define}\"\n                fi\n            done\n        fi\n    elif ${_loading_options} && test_nz \"${_xmake_sh_option_current}\"; then\n        _add_option_item \"${_xmake_sh_option_current}\" \"defines\" \"${@}\"\n    fi\n}\n\n# add undefines in target\nadd_undefines() {\n    local undefine=\"\"\n    if ${_loading_targets} && test_z \"${_xmake_sh_option_current}\"; then\n        local public=false\n        for undefine in $@; do\n            if test_nq \"${undefine}\" \"{public}\"; then\n                _add_target_item \"${_xmake_sh_target_current}\" \"undefines\" \"${undefine}\"\n            else\n                public=true\n            fi\n        done\n        if ${public}; then\n            for undefine in $@; do\n                if test_nq \"${undefine}\" \"{public}\"; then\n                    _add_target_item \"${_xmake_sh_target_current}\" \"undefines_public\" \"${undefine}\"\n                fi\n            done\n        fi\n    elif ${_loading_options} && test_nz \"${_xmake_sh_option_current}\"; then\n        _add_option_item \"${_xmake_sh_option_current}\" \"undefines\" \"${@}\"\n    fi\n}\n\n# add includedirs in target\nadd_includedirs() {\n    local public=false\n    local dir=\"\"\n    for dir in $@; do\n        if test_nq \"${dir}\" \"{public}\"; then\n            if ! path_is_absolute \"${dir}\"; then\n                dir=\"${xmake_sh_scriptdir}/${dir}\"\n            fi\n            if string_startswith \"${dir}\" \"${xmake_sh_projectdir}\"; then\n                path_relative ${xmake_sh_projectdir} \"${dir}\"; dir=\"${_ret}\"\n            fi\n            if ${_loading_targets} && test_z \"${_xmake_sh_option_current}\"; then\n                _add_target_item \"${_xmake_sh_target_current}\" \"includedirs\" \"${dir}\"\n            elif ${_loading_options} && test_nz \"${_xmake_sh_option_current}\"; then\n                _add_option_item \"${_xmake_sh_option_current}\" \"includedirs\" \"${dir}\"\n            fi\n        else\n            public=true\n        fi\n    done\n    if ${public}; then\n        for dir in $@; do\n            if test_nq \"${dir}\" \"{public}\"; then\n                if ! path_is_absolute \"${dir}\"; then\n                    dir=\"${xmake_sh_scriptdir}/${dir}\"\n                fi\n                if string_startswith \"${dir}\" \"${xmake_sh_projectdir}\"; then\n                    path_relative ${xmake_sh_projectdir} \"${dir}\"; dir=\"${_ret}\"\n                fi\n                if ${_loading_targets} && test_z \"${_xmake_sh_option_current}\"; then\n                    _add_target_item \"${_xmake_sh_target_current}\" \"includedirs_public\" \"${dir}\"\n                fi\n            fi\n        done\n    fi\n}\n\n# add links in target\nadd_links() {\n    local link=\"\"\n    if ${_loading_targets} && test_z \"${_xmake_sh_option_current}\"; then\n        local public=false\n        for link in $@; do\n            if test_nq \"${link}\" \"{public}\"; then\n                _add_target_item \"${_xmake_sh_target_current}\" \"links\" \"${link}\"\n            else\n                public=true\n            fi\n        done\n        if ${public}; then\n            for link in $@; do\n                if test_nq \"${link}\" \"{public}\"; then\n                    _add_target_item \"${_xmake_sh_target_current}\" \"links_public\" \"${link}\"\n                fi\n            done\n        fi\n    elif ${_loading_options} && test_nz \"${_xmake_sh_option_current}\"; then\n        _add_option_item \"${_xmake_sh_option_current}\" \"links\" \"${@}\"\n    fi\n}\n\n# add syslinks in target\nadd_syslinks() {\n    local syslink=\"\"\n    if ${_loading_targets} && test_z \"${_xmake_sh_option_current}\"; then\n        local public=false\n        for syslink in $@; do\n            if test_nq \"${syslink}\" \"{public}\"; then\n                _add_target_item \"${_xmake_sh_target_current}\" \"syslinks\" \"${syslink}\"\n            else\n                public=true\n            fi\n        done\n        if ${public}; then\n            for syslink in $@; do\n                if test_nq \"${syslink}\" \"{public}\"; then\n                    _add_target_item \"${_xmake_sh_target_current}\" \"syslinks_public\" \"${syslink}\"\n                fi\n            done\n        fi\n    elif ${_loading_options} && test_nz \"${_xmake_sh_option_current}\"; then\n        _add_option_item \"${_xmake_sh_option_current}\" \"syslinks\" \"${@}\"\n    fi\n}\n\n# add linkdirs in target\nadd_linkdirs() {\n    local dir=\"\"\n    local public=false\n    for dir in $@; do\n        if test_nq \"${dir}\" \"{public}\"; then\n            if ! path_is_absolute \"${dir}\"; then\n                dir=\"${xmake_sh_scriptdir}/${dir}\"\n            fi\n            if string_startswith \"${dir}\" \"${xmake_sh_projectdir}\"; then\n                path_relative ${xmake_sh_projectdir} \"${dir}\"; dir=\"${_ret}\"\n            fi\n            if ${_loading_targets} && test_z \"${_xmake_sh_option_current}\"; then\n                _add_target_item \"${_xmake_sh_target_current}\" \"linkdirs\" \"${dir}\"\n            elif ${_loading_options} && test_nz \"${_xmake_sh_option_current}\"; then\n                _add_option_item \"${_xmake_sh_option_current}\" \"linkdirs\" \"${dir}\"\n            fi\n        else\n            public=true\n        fi\n    done\n    if ${public}; then\n        for dir in $@; do\n            if test_nq \"${dir}\" \"{public}\"; then\n                if ! path_is_absolute \"${dir}\"; then\n                    dir=\"${xmake_sh_scriptdir}/${dir}\"\n                fi\n                if string_startswith \"${dir}\" \"${xmake_sh_projectdir}\"; then\n                    path_relative ${xmake_sh_projectdir} \"${dir}\"; dir=\"${_ret}\"\n                fi\n                if ${_loading_targets} && test_z \"${_xmake_sh_option_current}\"; then\n                    _add_target_item \"${_xmake_sh_target_current}\" \"linkdirs_public\" \"${dir}\"\n                fi\n            fi\n        done\n    fi\n}\n\n# add rpathdirs in target\nadd_rpathdirs() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    local dir=\"\"\n    for dir in $@; do\n        if ! path_is_absolute \"${dir}\"; then\n            dir=\"${xmake_sh_scriptdir}/${dir}\"\n        fi\n        path_relative ${xmake_sh_projectdir} \"${dir}\"; dir=\"${_ret}\"\n        _add_target_item \"${_xmake_sh_target_current}\" \"rpathdirs\" \"${dir}\"\n    done\n}\n\n# add frameworks in target\nadd_frameworks() {\n    local framework=\"\"\n    if ${_loading_targets} && test_z \"${_xmake_sh_option_current}\"; then\n        local public=false\n        for framework in $@; do\n            if test_nq \"${framework}\" \"{public}\"; then\n                _add_target_item \"${_xmake_sh_target_current}\" \"frameworks\" \"${framework}\"\n            else\n                public=true\n            fi\n        done\n        if ${public}; then\n            for framework in $@; do\n                if test_nq \"${framework}\" \"{public}\"; then\n                    _add_target_item \"${_xmake_sh_target_current}\" \"frameworks_public\" \"${framework}\"\n                fi\n            done\n        fi\n    elif ${_loading_options} && test_nz \"${_xmake_sh_option_current}\"; then\n        _add_option_item \"${_xmake_sh_option_current}\" \"frameworks\" \"${@}\"\n    fi\n}\n\n# add frameworkdirs in target\nadd_frameworkdirs() {\n    local dir=\"\"\n    for dir in $@; do\n        if ! path_is_absolute \"${dir}\"; then\n            dir=\"${xmake_sh_scriptdir}/${dir}\"\n        fi\n        path_relative ${xmake_sh_projectdir} \"${dir}\"; dir=\"${_ret}\"\n        if ${_loading_targets} && test_z \"${_xmake_sh_option_current}\"; then\n            _add_target_item \"${_xmake_sh_target_current}\" \"frameworkdirs\" \"${dir}\"\n        elif ${_loading_options} && test_nz \"${_xmake_sh_option_current}\"; then\n            _add_option_item \"${_xmake_sh_option_current}\" \"frameworkdirs\" \"${dir}\"\n        fi\n    done\n}\n\n# set strip in target\nset_strip() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    local strip=${1}\n    _set_target_item \"${_xmake_sh_target_current}\" \"strip\" \"${strip}\"\n}\n\n# set symbols in target\nset_symbols() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    local symbols=\"${1}\"\n    _set_target_item \"${_xmake_sh_target_current}\" \"symbols\" \"${symbols}\"\n}\n\n# set languages in target\nset_languages() {\n    if ${_loading_targets} && test_z \"${_xmake_sh_option_current}\"; then\n        _set_target_item \"${_xmake_sh_target_current}\" \"languages\" \"${@}\"\n    elif ${_loading_options} && test_nz \"${_xmake_sh_option_current}\"; then\n        _set_option_item \"${_xmake_sh_option_current}\" \"languages\" \"${@}\"\n    fi\n}\n\n# set warnings in target\nset_warnings() {\n    if ${_loading_targets} && test_z \"${_xmake_sh_option_current}\"; then\n        _set_target_item \"${_xmake_sh_target_current}\" \"warnings\" \"${@}\"\n    elif ${_loading_options} && test_nz \"${_xmake_sh_option_current}\"; then\n        _set_option_item \"${_xmake_sh_option_current}\" \"warnings\" \"${@}\"\n    fi\n}\n\n# set optimizes in target\nset_optimizes() {\n    if ${_loading_targets} && test_z \"${_xmake_sh_option_current}\"; then\n        _set_target_item \"${_xmake_sh_target_current}\" \"optimizes\" \"${@}\"\n    elif ${_loading_options} && test_nz \"${_xmake_sh_option_current}\"; then\n        _set_option_item \"${_xmake_sh_option_current}\" \"optimizes\" \"${@}\"\n    fi\n}\n\n# add cflags in target\nadd_cflags() {\n    if ${_loading_targets} && test_z \"${_xmake_sh_option_current}\"; then\n        _add_target_item \"${_xmake_sh_target_current}\" \"cflags\" \"${@}\"\n    elif ${_loading_options} && test_nz \"${_xmake_sh_option_current}\"; then\n        _add_option_item \"${_xmake_sh_option_current}\" \"cflags\" \"${@}\"\n    fi\n}\n\n# add cxflags in target\nadd_cxflags() {\n    if ${_loading_targets} && test_z \"${_xmake_sh_option_current}\"; then\n        _add_target_item \"${_xmake_sh_target_current}\" \"cxflags\" \"${@}\"\n    elif ${_loading_options} && test_nz \"${_xmake_sh_option_current}\"; then\n        _add_option_item \"${_xmake_sh_option_current}\" \"cxflags\" \"${@}\"\n    fi\n}\n\n# add cxxflags in target\nadd_cxxflags() {\n    if ${_loading_targets} && test_z \"${_xmake_sh_option_current}\"; then\n        _add_target_item \"${_xmake_sh_target_current}\" \"cxxflags\" \"${@}\"\n    elif ${_loading_options} && test_nz \"${_xmake_sh_option_current}\"; then\n        _add_option_item \"${_xmake_sh_option_current}\" \"cxxflags\" \"${@}\"\n    fi\n}\n\n# add asflags in target\nadd_asflags() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    _add_target_item \"${_xmake_sh_target_current}\" \"asflags\" \"${@}\"\n}\n\n# add mflags in target\nadd_mflags() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    _add_target_item \"${_xmake_sh_target_current}\" \"mflags\" \"${@}\"\n}\n\n# add mxflags in target\nadd_mxflags() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    _add_target_item \"${_xmake_sh_target_current}\" \"mxflags\" \"${@}\"\n}\n\n# add mxxflags in target\nadd_mxxflags() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    _add_target_item \"${_xmake_sh_target_current}\" \"mxxflags\" \"${@}\"\n}\n\n# add ldflags in target\nadd_ldflags() {\n    if ${_loading_targets} && test_z \"${_xmake_sh_option_current}\"; then\n        _add_target_item \"${_xmake_sh_target_current}\" \"ldflags\" \"${@}\"\n    elif ${_loading_options} && test_nz \"${_xmake_sh_option_current}\"; then\n        _add_option_item \"${_xmake_sh_option_current}\" \"ldflags\" \"${@}\"\n    fi\n}\n\n# add shflags in target\nadd_shflags() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    _add_target_item \"${_xmake_sh_target_current}\" \"shflags\" \"${@}\"\n}\n\n# add arflags in target\nadd_arflags() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    _add_target_item \"${_xmake_sh_target_current}\" \"arflags\" \"${@}\"\n}\n\n# add options in target\nadd_options() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    local name=\"\"\n    local public=false\n    for name in $@; do\n        if test_nq \"${name}\" \"{public}\"; then\n            public=true\n            break\n        fi\n    done\n    for name in $@; do\n        if has_config \"${name}\"; then\n            local itemname=\"\"\n            local itemnames=\"includedirs linkdirs links defines cflags cxflags cxxflags ldflags\"\n            for itemname in ${itemnames}; do\n                _get_option_item \"${name}\" \"${itemname}\"; local values=\"${_ret}\"\n                if test_nz \"${values}\"; then\n                    _add_target_item \"${_xmake_sh_target_current}\" \"${itemname}\" \"${values}\"\n                    if $public; then\n                        _add_target_item \"${_xmake_sh_target_current}\" \"${itemname}_public\" \"${values}\"\n                    fi\n                fi\n            done\n        fi\n    done\n}\n\n# before_install in target\nbefore_install() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    local funcname=\"${1}\"\n    _add_target_item \"${_xmake_sh_target_current}\" \"before_install\" \"${funcname}\"\n}\n\n# after_install in target\nafter_install() {\n    if ! ${_loading_targets}; then\n        return\n    fi\n    local funcname=\"${1}\"\n    _add_target_item \"${_xmake_sh_target_current}\" \"after_install\" \"${funcname}\"\n}\n\n#-----------------------------------------------------------------------------\n# toolchain configuration apis\n#\n\n# define toolchain\ntoolchain() {\n    local name=\"${1}\"\n    _xmake_sh_toolchain_current=\"${name}\"\n    if ! ${_loading_toolchains}; then\n        return\n    fi\n    _xmake_sh_toolchains=\"${_xmake_sh_toolchains} ${name}\"\n    _map_set \"toolchains\" \"${name}_name\" \"${name}\"\n    return 0\n}\ntoolchain_end() {\n    _xmake_sh_toolchain_current=\"\"\n}\n_map \"toolchains\"\n\n# has the given toolchain?\n_has_toolchain() {\n    local name=${1}\n    if _map_has \"toolchains\" \"${name}_name\"; then\n        return 0\n    fi\n    return 1\n}\n\n# get the given toolchain item\n_get_toolchain_item() {\n    local name=${1}\n    local key=${2}\n    _map_get \"toolchains\" \"${name}_${key}\"\n}\n\n# set the given toolchain item\n_set_toolchain_item() {\n    local name=${1}\n    local key=${2}\n    local value=\"${3}\"\n    if test_nz \"${name}\"; then\n        _map_set \"toolchains\" \"${name}_${key}\" \"${value}\"\n    else\n        raise \"please set toolchain in the toolchain scope!\"\n    fi\n}\n\n# get the give toolchain toolset\n_get_toolchain_toolset() {\n    local name=${1}\n    local kind=${2}\n    _get_toolchain_item \"${name}\" \"toolset_${kind}\"\n}\n\n# set the give toolchain toolset\n_set_toolchain_toolset() {\n    local name=${1}\n    local kind=${2}\n    local programs=\"${3}\"\n    _set_toolchain_item \"${name}\" \"toolset_${kind}\" \"${programs}\"\n}\n\n# add the give toolchain toolset\n_add_toolchain_toolset() {\n    local name=${1}\n    local kind=${2}\n    local program=\"${3}\"\n    _get_toolchain_item \"${name}\" \"toolset_${kind}\"; local programs=\"${_ret}\"\n    if test_nz \"${programs}\"; then\n        programs=\"${programs}:${program}\"\n    else\n        programs=\"${program}\"\n    fi\n    _set_toolchain_item \"${name}\" \"toolset_${kind}\" \"${programs}\"\n}\n\n# set toolset in toolchain\nset_toolset() {\n    if ! ${_loading_toolchains}; then\n        return\n    fi\n    local kind=${1}\n    shift\n    local idx=0\n    while test $# != 0; do\n        local program=\"${1}\"\n        local key=\"${kind}\"\n        if test_nq \"${idx}\" \"0\"; then\n            key=\"${key}_${idx}\"\n        fi\n        _set_toolchain_toolset \"${_xmake_sh_toolchain_current}\" \"${key}\" \"${program}\"\n        idx=$((idx+1))\n        shift\n    done\n}\n\n#-----------------------------------------------------------------------------\n# load options\n#\n\n# load options and toolchains\n_load_options_and_toolchains() {\n    _loading_options=true\n    _loading_toolchains=true\n    _loading_targets=false\n    local file=${xmake_sh_projectdir}/xmake.sh\n    if test -f \"${file}\"; then\n        includes \"${file}\"\n    else\n        # include all xmake.sh files in next sub-directories\n        local files=`find ${xmake_sh_projectdir} -maxdepth 2 -mindepth 2 -name \"xmake.sh\"`\n        for file in ${files}; do\n            includes \"${file}\"\n        done\n    fi\n}\n_load_options_and_toolchains\n\n# show option usage\n_show_options_usage() {\n    _get_options_for_menu; local options=\"${_ret}\"\n    for name in ${options}; do\n        _get_option_item \"${name}\" \"description\"; local description=\"${_ret}\"\n        _get_option_item \"${name}\" \"default\"; local default=\"${_ret}\"\n        string_toupper ${name}; local head=\"--${name}=\"${_ret}\"\"\n        local headsize=${#head}\n        local tail=\"${description}\"\n        if test \"x${default}\" != \"x\"; then\n            local defval=${default}\n            if test \"x${defval}\" = \"xtrue\"; then\n                defval=\"yes\"\n            elif test \"x${defval}\" = \"xfalse\"; then\n                defval=\"no\"\n            fi\n            tail=\"${tail} (default: ${defval})\"\n        fi\n        local width=24\n        local padding_width=$((${width} - ${headsize}))\n        local padding=$(string_dupch ${padding_width} \" \")\n        echo \"  ${head}${padding}${tail}\"\n    done\n}\n\n# show configure usage\n_show_usage() {\necho '\nUsage: '\"$0\"' [<options>...]\nOptions: [defaults in brackets after descriptions]\nCommon options:\n  --help                  Print this message.\n  --version               Only print version information.\n  --verbose               Display more information.\n  --diagnosis             Display lots of diagnosis information.\n\n  --generator=GENERATOR   Set the project generator. (default: '\"${project_generator}\"')\n                            - gmake\n                            - ninja\n  --make=MAKE             Set the make program. (default: '\"${_make_program_default}\"')\n  --ninja=NINJA           Set the Ninja program. (default: '\"${_ninja_program_default}\"')\n  --plat=PLAT             Compile for the given platform. (default: '\"${_target_plat_default}\"')\n                            - msys\n                            - cross\n                            - bsd\n                            - mingw\n                            - macosx\n                            - linux\n                            - wasm\n  --arch=ARCH             Compile for the given architecture. (default: '\"${_target_arch_default}\"')\n                            - msys: i386 x86_64\n                            - cross: i386 x86_64 arm arm64 mips mips64 riscv riscv64 loong64 s390x ppc ppc64 sh4\n                            - bsd: i386 x86_64\n                            - mingw: i386 x86_64 arm arm64\n                            - macosx: x86_64 arm64\n                            - linux: i386 x86_64 armv7 armv7s arm64-v8a mips mips64 mipsel mips64el\n  --mode=MODE             Set the given compilation mode. (default: '\"${_target_mode_default}\"')\n                            - release\n                            - debug\n  --kind=KIND             Set the given target kind. (default: '\"${_target_kind_default}\"')\n                            - static\n                            - shared\n                            - binary\n  --toolchain=TOOLCHAIN   Set toolchain name.\n                            - clang\n                            - gcc\n                            - emcc\n                            - tinycc\n                            - cosmocc\n  --buildir=DIR           Set build directory. (default: '\"${xmake_sh_buildir}\"')\n\nAutoconf options:\n  --build=BUILD           Configure for building on BUILD [guessed]\n  --host=HOST             Cross-compile to build programs to run on HOST [BUILD]\n  --prefix=PREFIX         Set install files directory in tree rooted at PREFIX. (default: '\"${_install_prefix_default}\"')\n  --bindir=DIR            Set install binaries directory in PREFIX/DIR. (default: '\"${_install_bindir_default}\"')\n  --libdir=DIR            Set install libraries directory in PREFIX/DIR. (default: '\"${_install_libdir_default}\"')\n  --includedir=DIR        Set install includes directory in PREFIX/DIR. (default: '\"${_install_includedir_default}\"')\n\nProject options:\n'\"$(_show_options_usage)\"'\n'\n    exit 1\n}\n\n# show xmake.sh version\n_show_version() {\n    echo \"xmake.sh v${xmake_sh_version}, A script-only build utility like autotools\"\n    echo \"${xmake_sh_copyright}\"\n    echo '                         _               _            '\n    echo \"    __  ___ __  __  __ _| | ______   ___| |__         \"\n    echo \"    \\ \\/ / |  \\/  |/ _  | |/ / __ \\ / __| '_  \\       \"\n    echo \"     >  <  | \\__/ | /_| |   <  ___/_\\__ \\ | | |       \"\n    echo \"    /_/\\_\\_|_|  |_|\\__ \\|_|\\_\\____(_)___/_| |_|       \"\n    echo '                                     by ruki, xmake.io'\n    echo '                                                      '\n    echo '   👉  Manual: https://xmake.io/#/getting_started     '\n    echo '   🙏  Donate: https://xmake.io/#/sponsor             '\n    echo '                                                      '\n    exit 2\n}\n\n# --foo=yes => foo\n_parse_argument_name() {\n    _ret=$(echo \"${1#*--}\" | sed \"s/${2-=[^=]*}$//\")\n    string_replace \"${_ret}\" \"-\" \"_\"\n}\n\n# --foo=yes => yes\n_parse_argument_value() {\n    _ret=$(echo \"$1\" | sed \"s/^${2-[^=]*=}//\")\n}\n\n# parse input arguments\n_handle_option() {\n    _parse_argument_name ${1}; local name=\"${_ret}\"\n    _parse_argument_value ${1}; local value=\"${_ret}\"\n    if test_eq \"${name}\" \"help\"; then\n        _show_usage\n        return 0\n    elif test_eq \"${name}\" \"version\"; then\n        _show_version\n        return 0\n    elif test_eq \"${name}\" \"verbose\"; then\n        xmake_sh_verbose=true\n        return 0\n    elif test_eq \"${name}\" \"diagnosis\"; then\n        xmake_sh_diagnosis=true\n        return 0\n    elif test_eq \"${name}\" \"plat\"; then\n        _target_plat=${value}\n        return 0\n    elif test_eq \"${name}\" \"arch\"; then\n        _target_arch=${value}\n        return 0\n    elif test_eq \"${name}\" \"mode\"; then\n        _target_mode=${value}\n        return 0\n    elif test_eq \"${name}\" \"kind\"; then\n        _target_kind=${value}\n        return 0\n    elif test_eq \"${name}\" \"toolchain\"; then\n        _target_toolchain=${value}\n        return 0\n    elif test_eq \"${name}\" \"generator\"; then\n        project_generator=${value}\n        return 0\n    elif test_eq \"${name}\" \"make\"; then\n        _make_program=${value}\n        return 0\n    elif test_eq \"${name}\" \"ninja\"; then\n        _ninja_program=${value}\n        return 0\n    elif test_eq \"${name}\" \"prefix\"; then\n        _install_prefix_default=\"${value}\"\n        return 0\n    elif test_eq \"${name}\" \"bindir\"; then\n        _install_bindir_default=\"${value}\"\n        return 0\n    elif test_eq \"${name}\" \"libdir\"; then\n        _install_libdir_default=\"${value}\"\n        return 0\n    elif test_eq \"${name}\" \"includedir\"; then\n        _install_includedir_default=\"${value}\"\n        return 0\n    elif test_eq \"${name}\" \"buildir\"; then\n        xmake_sh_buildir=\"${value}\"\n        return 0\n    elif test_eq \"${name}\" \"build\"; then\n        _autoconf_build_type=\"${value}\"\n        return 0\n    elif test_eq \"${name}\" \"host\"; then\n        _autoconf_host_type=\"${value}\"\n        return 0\n    elif _has_option \"${name}\"; then\n        _set_option_value \"${name}\" \"${value}\"\n        return 0\n    fi\n    return 1\n}\nwhile test $# != 0; do\n    if ! _handle_option ${1}; then\n        wprint \"unknown option: $1\"\n    fi\n    shift\ndone\n\n#-----------------------------------------------------------------------------\n# handle some autoconf configurations\n#\n\n# parse triplet\n# https://github.com/xmake-io/xmake/issues/3869\n# e.g. i686-linux-gnu, aarch64-apple-darwin, x86_64-w64-mingw32, i686-redhat-linux-gnu\n_parse_triplet() {\n    local triplet=\"${1}\"\n    string_split \"${triplet}\" \"-\"\n}\n\n_get_arch_from_cpu() {\n    local cpu=\"${1}\"\n    case \"${cpu}\" in\n        i686) _ret=\"i386\";;\n        i386) _ret=\"i386\";;\n        x86_64) _ret=\"x86_64\";;\n        aarch64) _ret=\"arm64\";;\n        arm64) _ret=\"arm64\";;\n        arm*) _ret=\"arm\";;\n        *) _ret=\"${cpu}\";;\n    esac\n}\n\n_get_plat_from_vendor_os() {\n    local vendor=\"${1}\"\n    local os=\"${2}\"\n    case \"${vendor}\" in\n        linux)\n            if string_contains \"${os}\" \"android\"; then\n                _ret=\"android\"\n            else\n                _ret=\"linux\"\n            fi\n            ;;\n        apple)\n            if test_eq \"${os}\" \"darwin\"; then\n                _ret=\"macosx\"\n            fi\n            ;;\n        w64) _ret=\"mingw\";;\n        *) _ret=\"${os}\";;\n    esac\n}\n\n_handle_autoconf_configs() {\n    if test_z \"${_autoconf_host_type}\"; then\n        _autoconf_host_type=\"${_autoconf_build_type}\"\n    fi\n\n    if test_nz \"${_autoconf_build_type}\"; then\n        _parse_triplet \"${_autoconf_build_type}\"; local cpu=\"${_ret}\"; local vendor=\"${_ret2}\"; local os=\"${_ret3}\"\n        _get_arch_from_cpu \"${cpu}\"\n        if test_nz \"${_ret}\"; then\n            os_arch=\"${_ret}\"\n        else\n            wprint \"unknown cpu: ${cpu} in --build=${value}\"\n        fi\n        _get_plat_from_vendor_os \"${vendor}\" \"${os}\"\n        if test_nz \"${_ret}\"; then\n            os_host=\"${_ret}\"\n        else\n            wprint \"unknown vendor-os: ${vendor}-${os} in --build=${value}\"\n        fi\n    fi\n\n    if test_nz \"${_autoconf_host_type}\"; then\n        _parse_triplet \"${_autoconf_host_type}\"; local cpu=\"${_ret}\"; local vendor=\"${_ret2}\"; local os=\"${_ret3}\"\n        _get_arch_from_cpu \"${cpu}\"\n        if test_nz \"${_ret}\"; then\n            _target_arch_default=\"${_ret}\"\n        else\n            wprint \"unknown cpu: ${cpu} in --host=${value}\"\n        fi\n        _get_plat_from_vendor_os \"${vendor}\" \"${os}\"\n        if test_nz \"${_ret}\"; then\n            _target_plat_default=\"${_ret}\"\n        else\n            wprint \"unknown vendor-os: ${vendor}-${os} in --build=${value}\"\n        fi\n    fi\n}\n_handle_autoconf_configs\n\n#-----------------------------------------------------------------------------\n# detect platform and toolchains\n#\n\n# envs toolchain\ntoolchain \"envs\"\n    set_toolset \"as\" \"$CC\" \"$CXX\" \"$AS\"\n    set_toolset \"cc\" \"$CC\"\n    set_toolset \"cxx\" \"$CC\" \"$CXX\"\n    set_toolset \"mm\" \"$CC\" \"$CXX\"\n    set_toolset \"mxx\" \"$CC\" \"$CXX\"\n    set_toolset \"ld\" \"$CXX\" \"$CC\" \"$LD\"\n    set_toolset \"sh\" \"$CXX\" \"$CC\" \"$LD\"\n    set_toolset \"ar\" \"$AR\" \"ar\"\ntoolchain_end\n\n# clang toolchain\ntoolchain \"clang\"\n    set_toolset \"as\" \"clang\"\n    set_toolset \"cc\" \"clang\"\n    set_toolset \"cxx\" \"clang\" \"clang++\"\n    set_toolset \"mm\" \"clang\"\n    set_toolset \"mxx\" \"clang\" \"clang++\"\n    set_toolset \"ld\" \"clang++\" \"clang\"\n    set_toolset \"sh\" \"clang++\" \"clang\"\n    set_toolset \"ar\" \"ar\"\ntoolchain_end\n\n# gcc toolchain\ntoolchain \"gcc\"\n    set_toolset \"as\" \"gcc\"\n    set_toolset \"cc\" \"gcc\"\n    set_toolset \"cxx\" \"gcc\" \"g++\"\n    set_toolset \"mm\" \"gcc\"\n    set_toolset \"mxx\" \"gcc\" \"g++\"\n    set_toolset \"ld\" \"g++\" \"gcc\"\n    set_toolset \"sh\" \"g++\" \"gcc\"\n    set_toolset \"ar\" \"ar\"\ntoolchain_end\n\n# mingw toolchain (x86_64)\ntoolchain \"x86_64_w64_mingw32\"\n    set_toolset \"as\" \"x86_64-w64-mingw32-gcc\"\n    set_toolset \"cc\" \"x86_64-w64-mingw32-gcc\"\n    set_toolset \"cxx\" \"x86_64-w64-mingw32-gcc\" \"x86_64-w64-mingw32-g++\"\n    set_toolset \"mm\" \"x86_64-w64-mingw32-gcc\"\n    set_toolset \"mxx\" \"x86_64-w64-mingw32-gcc\" \"x86_64-w64-mingw32-g++\"\n    set_toolset \"ld\" \"x86_64-w64-mingw32-g++\" \"x86_64-w64-mingw32-gcc\"\n    set_toolset \"sh\" \"x86_64-w64-mingw32-g++\" \"x86_64-w64-mingw32-gcc\"\n    set_toolset \"ar\" \"x86_64-w64-mingw32-ar\" \"ar\"\ntoolchain_end\n\n# mingw toolchain (i686)\ntoolchain \"i686_w64_mingw32\"\n    set_toolset \"as\" \"i686-w64-mingw32-gcc\"\n    set_toolset \"cc\" \"i686-w64-mingw32-gcc\"\n    set_toolset \"cxx\" \"i686-w64-mingw32-gcc\" \"i686-w64-mingw32-g++\"\n    set_toolset \"mm\" \"i686-w64-mingw32-gcc\"\n    set_toolset \"mxx\" \"i686-w64-mingw32-gcc\" \"i686-w64-mingw32-g++\"\n    set_toolset \"ld\" \"i686-w64-mingw32-g++\" \"i686-w64-mingw32-gcc\"\n    set_toolset \"sh\" \"i686-w64-mingw32-g++\" \"i686-w64-mingw32-gcc\"\n    set_toolset \"ar\" \"i686-w64-mingw32-ar\" \"ar\"\ntoolchain_end\n\n# aarch64 toolchain (aarch64)\ntoolchain \"aarch64_linux_gnu\"\n    set_toolset \"as\" \"aarch64-linux-gnu-gcc\"\n    set_toolset \"cc\" \"aarch64-linux-gnu-gcc\"\n    set_toolset \"cxx\" \"aarch64-linux-gnu-gcc\" \"aarch64-linux-gnu-g++\"\n    set_toolset \"mm\" \"aarch64-linux-gnu-gcc\"\n    set_toolset \"mxx\" \"aarch64-linux-gnu-gcc\" \"aarch64-linux-gnu-g++\"\n    set_toolset \"ld\" \"aarch64-linux-gnu-g++\" \"aarch64-linux-gnu-gcc\"\n    set_toolset \"sh\" \"aarch64-linux-gnu-g++\" \"aarch64-linux-gnu-gcc\"\n    set_toolset \"ar\" \"aarch64-linux-gnu-ar\" \"ar\"\ntoolchain_end\n\n# emcc toolchain (wasm32)\ntoolchain \"emcc\"\n    set_toolset \"as\" \"emcc\"\n    set_toolset \"cc\" \"emcc\"\n    set_toolset \"cxx\" \"emcc\" \"em++\"\n    set_toolset \"mm\" \"emcc\"\n    set_toolset \"mxx\" \"emcc\" \"em++\"\n    set_toolset \"ld\" \"em++\" \"emcc\"\n    set_toolset \"sh\" \"em++\" \"emcc\"\n    set_toolset \"ar\" \"emar\" \"ar\"\ntoolchain_end\n\n# cosmocc toolchain, e.g. ./configure --plat=linux --toolchain=cosmocc\ntoolchain \"cosmocc\"\n    set_toolset \"as\" \"cosmocc\"\n    set_toolset \"cc\" \"cosmocc\"\n    set_toolset \"cxx\" \"cosmocc\" \"cosmoc++\"\n    set_toolset \"mm\" \"cosmocc\"\n    set_toolset \"mxx\" \"cosmocc\" \"cosmoc++\"\n    set_toolset \"ld\" \"cosmoc++\" \"cosmocc\"\n    set_toolset \"sh\" \"cosmoc++\" \"cosmocc\"\n    set_toolset \"ar\" \"cosmoar\"\ntoolchain_end\n\n# tinycc toolchain\ntoolchain \"tinycc\"\n    set_toolset \"as\" \"tcc\" \"gcc\" \"clang\"\n    set_toolset \"cc\" \"tcc\"\n    set_toolset \"cxx\" \"gcc\" \"g++\" \"clang\" \"clang++\"\n    set_toolset \"mm\" \"gcc\" \"clang\"\n    set_toolset \"mxx\" \"gcc\" \"g++\" \"clang\" \"clang++\"\n    set_toolset \"ld\" \"tcc\"\n    set_toolset \"sh\" \"tcc\"\n    set_toolset \"ar\" \"tcc -ar\" \"ar\"\ntoolchain_end\n\n# check platform\n_check_platform() {\n    if test \"x${_target_plat}\" = \"x\"; then\n        _target_plat=${_target_plat_default}\n    fi\n    if test \"x${_target_arch}\" = \"x\"; then\n        _target_arch=${_target_arch_default}\n    fi\n    if test \"x${_target_mode}\" = \"x\"; then\n        _target_mode=${_target_mode_default}\n    fi\n    if test \"x${_target_kind}\" = \"x\"; then\n        _target_kind=${_target_kind_default}\n    fi\n    echo \"checking for platform ... ${_target_plat}\"\n    echo \"checking for architecture ... ${_target_arch}\"\n}\n\n# get toolchain compile command for gcc/clang\n_toolchain_compcmd_for_gcc_clang() {\n    local program=\"${1}\"\n    local objectfile=\"${2}\"\n    local sourcefile=\"${3}\"\n    local flags=\"${4}\"\n    _ret=\"${program} -c ${flags} -o ${objectfile} ${sourcefile}\"\n}\n\n# get toolchain link command for gcc/clang\n_toolchain_linkcmd_for_gcc_clang() {\n    local toolkind=\"${1}\"\n    local program=\"${2}\"\n    local binaryfile=\"${3}\"\n    local objectfiles=\"${4}\"\n    local flags=\"${5}\"\n    if test_eq \"${toolkind}\" \"sh\"; then\n        flags=\"-shared -fPIC ${flags}\"\n    fi\n    _ret=\"${program} -o ${binaryfile} ${objectfiles} ${flags}\"\n}\n\n# get toolchain link command for ar\n_toolchain_linkcmd_for_ar() {\n    local toolkind=\"${1}\"\n    local program=\"${2}\"\n    local binaryfile=\"${3}\"\n    local objectfiles=\"${4}\"\n    local flags=\"${5}\"\n    _ret=\"${program} ${flags} ${binaryfile} ${objectfiles}\"\n}\n\n# get toolchain compile command\n_toolchain_compcmd() {\n    local sourcekind=\"${1}\"\n    local objectfile=\"${2}\"\n    local sourcefile=\"${3}\"\n    local flags=\"${4}\"\n    _get_toolchain_toolset \"${_target_toolchain}\" \"${sourcekind}\"; local program=\"${_ret}\"\n    path_toolname \"${program}\"; local toolname=\"${_ret}\"\n    local compcmd=\"\"\n    case \"${toolname}\" in\n        gcc) _toolchain_compcmd_for_gcc_clang \"${program}\" \"${objectfile}\" \"${sourcefile}\" \"${flags}\"; compcmd=\"${_ret}\";;\n        gxx) _toolchain_compcmd_for_gcc_clang \"${program}\" \"${objectfile}\" \"${sourcefile}\" \"${flags}\"; compcmd=\"${_ret}\";;\n        clang) _toolchain_compcmd_for_gcc_clang \"${program}\" \"${objectfile}\" \"${sourcefile}\" \"${flags}\"; compcmd=\"${_ret}\";;\n        clangxx) _toolchain_compcmd_for_gcc_clang \"${program}\" \"${objectfile}\" \"${sourcefile}\" \"${flags}\"; compcmd=\"${_ret}\";;\n        emcc) _toolchain_compcmd_for_gcc_clang \"${program}\" \"${objectfile}\" \"${sourcefile}\" \"${flags}\"; compcmd=\"${_ret}\";;\n        emxx) _toolchain_compcmd_for_gcc_clang \"${program}\" \"${objectfile}\" \"${sourcefile}\" \"${flags}\"; compcmd=\"${_ret}\";;\n        cosmocc) _toolchain_compcmd_for_gcc_clang \"${program}\" \"${objectfile}\" \"${sourcefile}\" \"${flags}\"; compcmd=\"${_ret}\";;\n        cosmocxx) _toolchain_compcmd_for_gcc_clang \"${program}\" \"${objectfile}\" \"${sourcefile}\" \"${flags}\"; compcmd=\"${_ret}\";;\n        tcc) _toolchain_compcmd_for_gcc_clang \"${program}\" \"${objectfile}\" \"${sourcefile}\" \"${flags}\"; compcmd=\"${_ret}\";;\n        *) raise \"unknown toolname(${toolname})!\" ;;\n    esac\n    _ret=\"${compcmd}\"\n}\n\n# get toolchain link command\n_toolchain_linkcmd() {\n    local toolkind=\"${1}\"\n    local binaryfile=\"${2}\"\n    local objectfiles=\"${3}\"\n    local flags=\"${4}\"\n    _get_toolchain_toolset \"${_target_toolchain}\" \"${toolkind}\"; local program=\"${_ret}\"\n    path_toolname \"${program}\"; local toolname=\"${_ret}\"\n    case \"${toolname}\" in\n        gcc) _toolchain_linkcmd_for_gcc_clang \"${toolkind}\" \"${program}\" \"${binaryfile}\" \"${objectfiles}\" \"${flags}\"; linkcmd=\"${_ret}\";;\n        gxx) _toolchain_linkcmd_for_gcc_clang \"${toolkind}\" \"${program}\" \"${binaryfile}\" \"${objectfiles}\" \"${flags}\"; linkcmd=\"${_ret}\";;\n        clang) _toolchain_linkcmd_for_gcc_clang \"${toolkind}\" \"${program}\" \"${binaryfile}\" \"${objectfiles}\" \"${flags}\"; linkcmd=\"${_ret}\";;\n        clangxx) _toolchain_linkcmd_for_gcc_clang \"${toolkind}\" \"${program}\" \"${binaryfile}\" \"${objectfiles}\" \"${flags}\"; linkcmd=\"${_ret}\";;\n        emcc) _toolchain_linkcmd_for_gcc_clang \"${toolkind}\" \"${program}\" \"${binaryfile}\" \"${objectfiles}\" \"${flags}\"; linkcmd=\"${_ret}\";;\n        emxx) _toolchain_linkcmd_for_gcc_clang \"${toolkind}\" \"${program}\" \"${binaryfile}\" \"${objectfiles}\" \"${flags}\"; linkcmd=\"${_ret}\";;\n        cosmocc) _toolchain_linkcmd_for_gcc_clang \"${toolkind}\" \"${program}\" \"${binaryfile}\" \"${objectfiles}\" \"${flags}\"; linkcmd=\"${_ret}\";;\n        cosmocxx) _toolchain_linkcmd_for_gcc_clang \"${toolkind}\" \"${program}\" \"${binaryfile}\" \"${objectfiles}\" \"${flags}\"; linkcmd=\"${_ret}\";;\n        tcc) _toolchain_linkcmd_for_gcc_clang \"${toolkind}\" \"${program}\" \"${binaryfile}\" \"${objectfiles}\" \"${flags}\"; linkcmd=\"${_ret}\";;\n        ar) _toolchain_linkcmd_for_ar \"${toolkind}\" \"${program}\" \"${binaryfile}\" \"${objectfiles}\" \"${flags}\"; linkcmd=\"${_ret}\";;\n        emar) _toolchain_linkcmd_for_ar \"${toolkind}\" \"${program}\" \"${binaryfile}\" \"${objectfiles}\" \"${flags}\"; linkcmd=\"${_ret}\";;\n        cosmoar) _toolchain_linkcmd_for_ar \"${toolkind}\" \"${program}\" \"${binaryfile}\" \"${objectfiles}\" \"${flags}\"; linkcmd=\"${_ret}\";;\n        *) raise \"unknown toolname(${toolname})!\" ;;\n    esac\n    _ret=\"${linkcmd}\"\n}\n\n# try make\n_toolchain_try_make() {\n    local program=\"${1}\"\n    if _os_runv \"${program}\" \"--version\"; then\n        return 0\n    fi\n    return 1\n}\n\n# try ninja\n_toolchain_try_ninja() {\n    local program=\"${1}\"\n    if _os_runv \"${program}\" \"--version\"; then\n        return 0\n    fi\n    return 1\n}\n\n# try gcc\n_toolchain_try_gcc() {\n    if test \"x${_toolchain_try_gcc_result}\" = \"xok\"; then\n        return 0\n    elif test \"x${_toolchain_try_gcc_result}\" = \"xno\"; then\n        return 1\n    fi\n\n    local kind=\"${1}\"\n    local program=\"${2}\"\n    if _os_runv \"${program}\" \"--version\"; then\n        _toolchain_try_gcc_result=\"ok\"\n        return 0\n    fi\n    _toolchain_try_gcc_result=\"no\"\n    return 1\n}\n\n# try g++\n_toolchain_try_gxx() {\n    if test \"x${_toolchain_try_gxx_result}\" = \"xok\"; then\n        return 0\n    elif test \"x${_toolchain_try_gxx_result}\" = \"xno\"; then\n        return 1\n    fi\n\n    local kind=\"${1}\"\n    local program=\"${2}\"\n    if _os_runv \"${program}\" \"--version\"; then\n        _toolchain_try_gxx_result=\"ok\"\n        return 0\n    fi\n    _toolchain_try_gxx_result=\"no\"\n    return 1\n}\n\n# try clang\n_toolchain_try_clang() {\n    if test \"x${_toolchain_try_clang_result}\" = \"xok\"; then\n        return 0\n    elif test \"x${_toolchain_try_clang_result}\" = \"xno\"; then\n        return 1\n    fi\n\n    local kind=\"${1}\"\n    local program=\"${2}\"\n    if _os_runv \"${program}\" \"--version\"; then\n        _toolchain_try_clang_result=\"ok\"\n        return 0\n    fi\n    _toolchain_try_clang_result=\"no\"\n    return 1\n}\n\n# try clang++\n_toolchain_try_clangxx() {\n    if test \"x${_toolchain_try_clangxx_result}\" = \"xok\"; then\n        return 0\n    elif test \"x${_toolchain_try_clangxx_result}\" = \"xno\"; then\n        return 1\n    fi\n\n    local kind=\"${1}\"\n    local program=\"${2}\"\n    if _os_runv \"${program}\" \"--version\"; then\n        _toolchain_try_clangxx_result=\"ok\"\n        return 0\n    fi\n    _toolchain_try_clangxx_result=\"no\"\n    return 1\n}\n\n# try tcc\n_toolchain_try_tcc() {\n    if test \"x${_toolchain_try_tcc_result}\" = \"xok\"; then\n        return 0\n    elif test \"x${_toolchain_try_tcc_result}\" = \"xno\"; then\n        return 1\n    fi\n\n    local kind=\"${1}\"\n    local program=\"${2}\"\n    if _os_runv \"${program}\" \"-v\"; then\n        _toolchain_try_tcc_result=\"ok\"\n        return 0\n    fi\n    _toolchain_try_tcc_result=\"no\"\n    return 1\n}\n\n# try ar\n_toolchain_try_ar() {\n    local kind=\"${1}\"\n    local program=\"${2}\"\n\n    # generate the source file\n    _os_tmpfile\n    local tmpfile=\"${_ret}\"\n    local objectfile=\"${tmpfile}.o\"\n    local libraryfile=\"${tmpfile}.a\"\n    echo \"\" > \"${objectfile}\"\n\n    # try linking it\n    local ok=false\n    if _os_runv \"${program}\" \"-cr\" \"${libraryfile}\" \"${objectfile}\"; then\n        ok=true\n    fi\n\n    # remove files\n    _os_tryrm \"${objectfile}\"\n    _os_tryrm \"${libraryfile}\"\n    if ${ok}; then\n        return 0\n    fi\n    return 1\n}\n\n# try cosmoar\n_toolchain_try_cosmoar() {\n    if test \"x${_toolchain_try_cosmoar_result}\" = \"xok\"; then\n        return 0\n    elif test \"x${_toolchain_try_cosmoar_result}\" = \"xno\"; then\n        return 1\n    fi\n\n    local kind=\"${1}\"\n    local program=\"${2}\"\n    if _os_runv \"${program}\" \"--version\"; then\n        _toolchain_try_cosmoar_result=\"ok\"\n        return 0\n    fi\n    _toolchain_try_cosmoar_result=\"no\"\n    return 1\n}\n\n# try program\n_toolchain_try_program() {\n    local toolchain=\"${1}\"\n    local kind=\"${2}\"\n    local program=\"${3}\"\n    local ok=false\n    path_toolname \"${program}\"; local toolname=\"${_ret}\"\n    case \"${toolname}\" in\n        gcc) _toolchain_try_gcc \"${kind}\" \"${program}\" && ok=true;;\n        gxx) _toolchain_try_gxx \"${kind}\" \"${program}\" && ok=true;;\n        clang) _toolchain_try_clang \"${kind}\" \"${program}\" && ok=true;;\n        clangxx) _toolchain_try_clangxx \"${kind}\" \"${program}\" && ok=true;;\n        emcc) _toolchain_try_clang \"${kind}\" \"${program}\" && ok=true;;\n        emxx) _toolchain_try_clangxx \"${kind}\" \"${program}\" && ok=true;;\n        cosmocc) _toolchain_try_gcc \"${kind}\" \"${program}\" && ok=true;;\n        cosmocxx) _toolchain_try_gxx \"${kind}\" \"${program}\" && ok=true;;\n        tcc) _toolchain_try_tcc \"${kind}\" \"${program}\" && ok=true;;\n        ar) _toolchain_try_ar \"${kind}\" \"${program}\" && ok=true;;\n        emar) _toolchain_try_ar \"${kind}\" \"${program}\" && ok=true;;\n        cosmoar) _toolchain_try_cosmoar \"${kind}\" \"${program}\" && ok=true;;\n        *) raise \"unknown toolname(${toolname})!\" ;;\n    esac\n    if ${ok}; then\n        vprint \"checking for ${program} ... ok\"\n        return 0\n    fi\n    vprint \"checking for ${program} ... no\"\n    return 1\n}\n\n# try toolset\n_toolchain_try_toolset() {\n    local toolchain=${1}\n    local kind=${2}\n    local description=${3}\n    local indices=\"0 1 2 3 4 5\"\n    for idx in ${indices}; do\n        local key=\"${kind}\"\n        if test_nq \"${idx}\" \"0\"; then\n            key=\"${key}_${idx}\"\n        fi\n        _get_toolchain_toolset \"${toolchain}\" \"${key}\"; local program=\"${_ret}\"\n        if test_nz \"${program}\"; then\n            if _toolchain_try_program \"${toolchain}\" \"${kind}\" \"${program}\"; then\n                _set_toolchain_toolset \"${toolchain}\" \"${kind}\" \"${program}\"\n                echo \"checking for the ${description} (${kind}) ... ${program}\"\n                return 0\n            fi\n        fi\n    done\n    return 1\n}\n\n# try toolchain\n_toolchain_try() {\n    local toolchain=${1}\n    vprint \"checking for $toolchain toolchain ...\"\n    if _toolchain_try_toolset \"${toolchain}\" \"cc\" \"c compiler\" &&\n       _toolchain_try_toolset \"${toolchain}\" \"cxx\" \"c++ compiler\" &&\n       _toolchain_try_toolset \"${toolchain}\" \"as\" \"assembler\" &&\n       _toolchain_try_toolset \"${toolchain}\" \"mm\" \"objc compiler\" &&\n       _toolchain_try_toolset \"${toolchain}\" \"mxx\" \"objc++ compiler\" &&\n       _toolchain_try_toolset \"${toolchain}\" \"ld\" \"linker\" &&\n       _toolchain_try_toolset \"${toolchain}\" \"ar\" \"static library archiver\" &&\n       _toolchain_try_toolset \"${toolchain}\" \"sh\" \"shared library linker\"; then\n        return 0\n    fi\n    return 1\n}\n\n# detect make\n_toolchain_detect_make() {\n    if test \"x${_make_program}\" = \"x\"; then\n        _make_program=${_make_program_default}\n    fi\n    if _toolchain_try_make \"${_make_program}\"; then\n        echo \"checking for make ... ok\"\n    else\n        echo \"checking for make ... no\"\n        raise \"make not found!\"\n    fi\n}\n\n# detect ninja\n_toolchain_detect_ninja() {\n    if test \"x${_ninja_program}\" = \"x\"; then\n        _ninja_program=${_ninja_program_default}\n    fi\n    if _toolchain_try_ninja \"${_ninja_program}\"; then\n        echo \"checking for ninja ... ok\"\n    else\n        echo \"checking for ninja ... no\"\n        raise \"ninja not found!\"\n    fi\n}\n\n# detect build backend\n_toolchain_detect_backend() {\n    if test \"x${project_generator}\" = \"xgmake\"; then\n        _toolchain_detect_make\n    elif test \"x${project_generator}\" = \"xninja\"; then\n        _toolchain_detect_ninja\n    fi\n}\n\n# detect toolchain\n_toolchain_detect() {\n    # detect build backend\n    _toolchain_detect_backend\n\n    # detect toolchains\n    local toolchains=\"${1}\"\n    if test \"x${toolchains}\" = \"x\"; then\n        if is_plat \"macosx\"; then\n            toolchains=\"envs clang gcc\"\n        elif is_plat \"mingw\"; then\n            if is_arch \"i386\"; then\n                toolchains=\"i686_w64_mingw32\"\n            else\n                toolchains=\"x86_64_w64_mingw32\"\n            fi\n        elif is_plat \"wasm\"; then\n            toolchains=\"emcc\"\n        elif is_plat \"linux\" && ! is_arch \"${os_arch}\"; then\n            toolchains=\"envs\"\n            if is_arch \"arm64\"; then\n                toolchains=\"${toolchains} aarch64_linux_gnu\"\n            fi\n        else\n            toolchains=\"envs gcc clang\"\n        fi\n    fi\n    for toolchain in ${toolchains}; do\n        if _toolchain_try \"$toolchain\"; then\n            _target_toolchain=${toolchain}\n            break\n        fi\n    done\n}\n\n# check toolchain\n_check_toolchain() {\n    local toolchain=${_target_toolchain}\n    _target_toolchain=\"\"\n    _toolchain_detect ${toolchain}\n\n    if test \"x${_target_toolchain}\" != \"x\"; then\n        echo \"checking for toolchain ... ${_target_toolchain}\"\n    else\n        echo \"checking for toolchain ... no\"\n        raise \"toolchain not found!\"\n    fi\n}\n\n# get function code\n#\n# sigsetjmp\n# sigsetjmp((void*)0, 0)\n#\n_get_funccode() {\n    local func=\"${1}\"\n    local code=\"\"\n    if string_contains \"${func}\" \"(\"; then\n        code=\"${func}\"\n    else\n        code=\"typedef void (*func_t)(); volatile func_t p${func} = (func_t)${func}; while (p${func}) {break;};\"\n    fi\n    _ret=\"${code}\"\n}\n\n# generate cxsnippets source code\n_generate_cxsnippets_sourcecode() {\n    local funcs=\"${1}\"\n    local includes=\"${2}\"\n    local types=\"${3}\"\n    local snippets=\"${4}\"\n\n    local snippet_includes=\"\"\n    for include in $includes; do\n        snippet_includes=\"${snippet_includes}#include \\\"${include}\\\"\\n\"\n    done\n\n    local snippet_types=\"\"\n    for type in $types; do\n        string_replace \"${type}\" '[^a-zA-Z]' \"_\"; local typevar=\"${_ret}\"\n        snippet_types=\"${snippet_types}typedef ${type} __type_${typevar};\\n\"\n    done\n\n    local snippet_funcs=\"\"\n    for func in $funcs; do\n        _get_funccode \"${func}\"; func=\"${_ret}\"\n        snippet_funcs=\"${snippet_funcs}${func}\\n    \"\n    done\n\n    local snippets_code=\"\"\n    if test_nz \"${snippet_includes}\"; then\n        snippets_code=\"${snippets_code}${snippet_includes}\\n\"\n    fi\n    if test_nz \"${snippet_types}\"; then\n        snippets_code=\"${snippets_code}${snippet_types}\\n\"\n    fi\n    if test_nz \"${snippets}\"; then\n        snippets_code=\"${snippets_code}${snippets}\\n\"\n    fi\n\n    _ret='\n'\"${snippets_code}\"'int main(int argc, char** argv) {\n    '\"${snippet_funcs}\"'\n    return 0;\n}'\n}\n\n# check cxsnippets\n_check_cxsnippets() {\n    local name=\"${1}\"\n    local kind=\"${2}\"\n    _get_option_item \"${name}\" \"${kind}funcs\"; local funcs=\"${_ret}\"\n    _get_option_item \"${name}\" \"${kind}includes\"; local includes=\"${_ret}\"\n    _get_option_item \"${name}\" \"${kind}types\"; local types=\"${_ret}\"\n    _get_option_item \"${name}\" \"${kind}snippets\"; local snippets=\"${_ret}\"\n    if test_z \"${funcs}\" && test_z \"${includes}\" &&\n       test_z \"${types}\" && test_z \"${snippets}\"; then\n        return 0\n    fi\n\n    # get c/c++ extension\n    local extension=\".c\"\n    local sourcekind=\"cc\"\n    if test_eq \"${kind}\" \"cxx\"; then\n        extension=\".cpp\"\n        sourcekind=\"cxx\"\n    fi\n\n    # generate source code\n    _generate_cxsnippets_sourcecode \"${funcs}\" \"${includes}\" \"${types}\" \"${snippets}\"; local sourcecode=\"${_ret}\"\n    dprint \"${sourcecode}\"\n\n    # generate the source file\n    _os_tmpfile\n    local tmpfile=\"${_ret}\"\n    local sourcefile=\"${tmpfile}${extension}\"\n    local objectfile=\"${tmpfile}.o\"\n    local binaryfile=\"${tmpfile}.bin\"\n    print \"${sourcecode}\" > \"${sourcefile}\"\n\n    # try compiling it\n    local ok=false\n    if ! ${ok}; then\n        local compflags=\"\"\n        _get_toolchain_toolset \"${_target_toolchain}\" \"${sourcekind}\"; local program=\"${_ret}\"\n        path_toolname \"${program}\"; local toolname=\"${_ret}\"\n        local itemnames=\"languages warnings optimizes defines undefines includedirs\"\n        for itemname in ${itemnames}; do\n            _get_option_abstract_flags \"${name}\" \"${sourcekind}\" \"${toolname}\" \"${itemname}\"; local flags=\"${_ret}\"\n            if test_nz \"${flags}\"; then\n                _split_flags \"${flags}\"; flags=\"${_ret}\"\n                compflags=\"${compflags} ${flags}\"\n            fi\n        done\n        local flagnames=\"cxflags\"\n        if test_eq \"${sourcekind}\" \"cxx\"; then\n            flagnames=\"${flagnames} cxxflags\"\n        else\n            flagnames=\"${flagnames} cflags\"\n        fi\n        for flagname in $flagnames; do\n            _get_option_item \"${name}\" \"${flagname}\"; local flags=\"${_ret}\"\n            if test_nz \"${flags}\"; then\n                compflags=\"${compflags} ${flags}\"\n            fi\n        done\n        if test_eq \"${sourcekind}\" \"cxx\"; then\n            if test_nz \"${CXXFLAGS}\"; then\n                compflags=\"${compflags} ${CXXFLAGS}\"\n            fi\n        else\n            if test_nz \"${CFLAGS}\"; then\n                compflags=\"${compflags} ${CFLAGS}\"\n            fi\n        fi\n        if test_nz \"${CPPFLAGS}\"; then\n            compflags=\"${compflags} ${CPPFLAGS}\"\n        fi\n        _toolchain_compcmd \"${sourcekind}\" \"${objectfile}\" \"${sourcefile}\" \"${compflags}\"; local compcmd=\"${_ret}\"\n        if ${xmake_sh_diagnosis}; then\n            print \"> ${compcmd}\"\n        fi\n        if _os_runv ${compcmd}; then\n            ok=true\n        fi\n    fi\n\n    # try linking it\n    _get_option_item \"${name}\" \"links\"; local links=\"${_ret}\"\n    _get_option_item \"${name}\" \"syslinks\"; local syslinks=\"${_ret}\"\n    _get_option_item \"${name}\" \"ldflags\"; local ldflags=\"${_ret}\"\n    if test_nz \"${syslinks}\"; then\n        links=\"${links} ${syslinks}\"\n    fi\n    if ${ok} && (test_nz \"${links}\" || test_nz \"${ldflags}\"); then\n        local toolkind=\"ld\"\n        _get_toolchain_toolset \"${_target_toolchain}\" \"${toolkind}\"; local program=\"${_ret}\"\n        path_toolname \"${program}\"; local toolname=\"${_ret}\"\n        local itemnames=\"linkdirs links syslinks\"\n        local linkflags=\"\"\n        for itemname in ${itemnames}; do\n            _get_option_abstract_flags \"${name}\" \"${toolkind}\" \"${toolname}\" \"${itemname}\"; local flags=\"${_ret}\"\n            if test_nz \"${flags}\"; then\n                _split_flags \"${flags}\"; flags=\"${_ret}\"\n                linkflags=\"${linkflags} ${flags}\"\n            fi\n        done\n        _get_option_item \"${name}\" \"ldflags\"; local flags=\"${_ret}\"\n        if test_nz \"${flags}\"; then\n            linkflags=\"${linkflags} ${flags}\"\n        fi\n        if test_nz \"${LDFLAGS}\"; then\n            linkflags=\"${linkflags} ${LDFLAGS}\"\n        fi\n        _toolchain_linkcmd \"${toolkind}\" \"${binaryfile}\" \"${objectfile}\" \"${linkflags}\"; local linkcmd=\"${_ret}\"\n        if ${xmake_sh_diagnosis}; then\n            print \"> ${linkcmd}\"\n        fi\n        if _os_runv ${linkcmd}; then\n            ok=true\n        else\n            ok=false\n        fi\n    fi\n\n    # trace\n    if ${xmake_sh_verbose} || ${xmake_sh_diagnosis}; then\n        if test_nz \"${includes}\"; then\n            print \"> checking for ${kind} includes(${includes})\"\n        fi\n        if test_nz \"${types}\"; then\n            print \"> checking for ${kind} types(${types})\"\n        fi\n        if test_nz \"${funcs}\"; then\n            print \"> checking for ${kind} funcs(${funcs})\"\n        fi\n        if test_nz \"${links}\"; then\n            print \"> checking for ${kind} links(${links})\"\n        fi\n    fi\n\n    # remove files\n    _os_tryrm \"${sourcefile}\"\n    _os_tryrm \"${objectfile}\"\n    _os_tryrm \"${binaryfile}\"\n    if ${ok}; then\n        return 0\n    fi\n    return 1\n}\n\n# check csnippets\n_check_csnippets() {\n    local name=\"${1}\"\n    if _check_cxsnippets \"${name}\" \"c\"; then\n        return 0\n    fi\n    return 1\n}\n\n# check cxxsnippets\n_check_cxxsnippets() {\n    local name=\"${1}\"\n    if _check_cxsnippets \"${name}\" \"cxx\"; then\n        return 0\n    fi\n    return 1\n}\n\n# check option\n_check_option() {\n    local name=\"${1}\"\n    _get_option_value \"${name}\"; local value=\"${_ret}\"\n    _get_option_item \"${name}\" \"default\"; local default=\"${_ret}\"\n    if test_nz \"${value}\"; then\n        if _is_enabled \"${value}\"; then\n            return 0\n        else\n            return 1\n        fi\n    elif test_nz \"${default}\"; then\n        if _is_enabled \"${default}\"; then\n            return 0\n        else\n            return 1\n        fi\n    else\n        _get_option_item \"${name}\" \"before_check\"; local before_check=\"${_ret}\"\n        if test_nz \"${before_check}\"; then\n            eval ${before_check}\n        fi\n        if _check_csnippets \"${name}\" && _check_cxxsnippets \"${name}\"; then\n            return 0\n        fi\n    fi\n    return 1\n}\n\n# check options\n_check_options() {\n    _get_options_for_checking; local options=\"${_ret}\"\n    for name in $options; do\n        if _check_option \"$name\"; then\n            echo \"checking for ${name} .. ok\"\n            _set_option_value \"${name}\" true\n        else\n            echo \"checking for ${name} .. no\"\n            _set_option_value \"${name}\" false\n        fi\n    done\n}\n\n# check all\n_check_all() {\n    _check_platform\n    _check_toolchain\n    _check_options\n}\n_check_all\n\n#-----------------------------------------------------------------------------\n# init builtin variables, e.g. add_headerfiles \"${buildir}/config.h\"\n#\nprojectdir=\"${xmake_sh_projectdir}\"\nif path_is_absolute \"${xmake_sh_buildir}\"; then\n    buildir=\"${xmake_sh_buildir}\"\nelse\n    buildir=\"${xmake_sh_projectdir}/${xmake_sh_buildir}\"\nfi\nplat=\"${_target_plat}\"\narch=\"${_target_arch}\"\nmode=\"${_target_mode}\"\nkind=\"${_target_kind}\"\n\n#-----------------------------------------------------------------------------\n# load project targets\n#\n\n# load targets\n_load_targets() {\n    echo \"analyzing project configuration ..\"\n    _loading_options=false\n    _loading_toolchains=false\n    _loading_targets=true\n    _xmake_sh_option_current=\"\"\n    _xmake_sh_target_current=\"\"\n    _xmake_sh_toolchain_current=\"\"\n    local file=${xmake_sh_projectdir}/xmake.sh\n    if test -f \"${file}\"; then\n        includes \"${file}\"\n    else\n        # include all xmake.sh files in next sub-directories\n        _os_find \"${xmake_sh_projectdir}\" \"xmake.sh\" 2; local files=\"${_ret}\"\n        for file in ${files}; do\n            includes \"${file}\"\n        done\n    fi\n}\n_load_targets\n\n# get toolset kinds for all targets\n# e.g. cc cxx as mm mxx ld sh ar\n_get_targets_toolkinds() {\n    if test_z \"${_targets_toolkinds_dedup}\"; then\n        _dedup \"${_targets_toolkinds}\"; _targets_toolkinds_dedup=\"${_ret}\"\n    fi\n    _ret=\"${_targets_toolkinds_dedup}\"\n}\n\n#-----------------------------------------------------------------------------\n# generate configfiles\n#\n\n# vprint config variable in `${name}`\n_vprint_configvar_value() {\n    local name=\"${1}\"\n    local value=\"${2}\"\n    vprint \"  > replace ${name} -> ${value}\"\n}\n\n# vprint config variable in `${define name}`\n_vprint_configvar_define() {\n    local name=\"${1}\"\n    local value=\"${2}\"\n    if test_z \"${value}\"; then\n        vprint \"  > replace ${name} -> /* #undef ${name} */\"\n    elif test_eq \"${value}\" \"1\" || test_eq \"${value}\" \"true\"; then\n        vprint \"  > replace ${name} -> #define ${name} 1\"\n    elif test_eq \"${value}\" \"0\" || test_eq \"${value}\" \"false\"; then\n        vprint \"  > replace ${name} -> /*#define ${name} 0*/\"\n    else\n        vprint \"  > replace ${name} -> #define ${name} ${value}\"\n    fi\n}\n\n# replace config variable in `${define name}`\n_replace_configvar_define() {\n    local name=\"${1}\"\n    local value=\"${2}\"\n    if test_z \"${value}\"; then\n        _ret=\"s/\\${define ${name}}/\\/*#undef ${name}*\\//g\"\n    elif test_eq \"${value}\" \"1\" || test_eq \"${value}\" \"true\"; then\n        _ret=\"s/\\${define ${name}}/#define ${name} 1/g\"\n    elif test_eq \"${value}\" \"0\" || test_eq \"${value}\" \"false\"; then\n        _ret=\"s/\\${define ${name}}/\\/*#define ${name} 0*\\//g\"\n    else\n        _ret=\"s/\\${define ${name}}/#define ${name} ${value}/g\"\n    fi\n}\n\n# replace config variable in `${name}`\n_replace_configvar_value() {\n    local name=\"${1}\"\n    local value=\"${2}\"\n    _ret=\"s@\\${${name}}@${value}@g\"\n}\n\n# generate configfile for the given target\n_generate_configfile() {\n    local target=\"${1}\"\n    local configfile_in=\"${2}\"\n    _get_target_item \"${target}\" \"configdir\"; local configdir=\"${_ret}\"\n    if test_z \"${configdir}\"; then\n        path_directory configfile_in; configdir=\"${_ret}\"\n    fi\n    if ! test -d \"${configdir}\"; then\n        mkdir -p \"${configdir}\"\n    fi\n    path_basename \"${configfile_in}\"; local filename=\"${_ret}\"\n    local configfile=\"${configdir}/${filename}\"\n    echo \"generating ${configfile} ..\"\n\n    # replace builtin variables\n    local patterns=\"\"\n    local target_os=\"\"\n    if is_plat \"mingw\"; then\n        target_os=\"windows\"\n    else\n        target_os=\"${_target_plat}\"\n    fi\n    string_toupper ${target_os}; target_os=\"${_ret}\"\n    _vprint_configvar_value \"OS\" \"${target_os}\"\n    _replace_configvar_value \"OS\" \"${target_os}\"; patterns=\"${_ret};${patterns}\"\n\n    # replace version\n    _get_target_item \"${target}\" \"version\"; local version=\"${_ret}\"\n    _get_target_item \"${target}\" \"version_build\"; local version_build=\"${_ret}\"\n    string_split \"${version}\" \".\"\n    local version_major=\"${_ret}\"\n    local version_minor=\"${_ret2}\"\n    local version_alter=\"${_ret3}\"\n    if test_nz \"${version}\"; then\n        _vprint_configvar_value \"VERSION\" \"${version}\"\n        _replace_configvar_value \"VERSION\" \"${version}\"; patterns=\"${_ret};${patterns}\"\n    fi\n    if test_nz \"${version_major}\"; then\n        _vprint_configvar_value \"VERSION_MAJOR\" \"${version_major}\"\n        _replace_configvar_value \"VERSION_MAJOR\" \"${version_major}\"; patterns=\"${_ret};${patterns}\"\n    fi\n    if test_nz \"${version_minor}\"; then\n        _vprint_configvar_value \"VERSION_MINOR\" \"${version_minor}\"\n        _replace_configvar_value \"VERSION_MINOR\" \"${version_minor}\"; patterns=\"${_ret};${patterns}\"\n    fi\n    if test_nz \"${version_alter}\"; then\n        _vprint_configvar_value \"VERSION_ALTER\" \"${version_alter}\"\n        _replace_configvar_value \"VERSION_ALTER\" \"${version_alter}\"; patterns=\"${_ret};${patterns}\"\n    fi\n    if test_nz \"${version_build}\"; then\n        _os_date \"${version_build}\"; version_build=\"${_ret}\"\n        _vprint_configvar_value \"VERSION_BUILD\" \"${version_build}\"\n        _replace_configvar_value \"VERSION_BUILD\" \"${version_build}\"; patterns=\"${_ret};${patterns}\"\n    fi\n\n    # replace git variables\n    local content=\"\"\n    content=$(cat \"${configfile_in}\")\n    if string_contains \"${content}\" \"GIT_\"; then\n        _os_iorunv \"git\" \"describe\" \"--tags\"; local git_tag=\"${_ret}\"\n        _vprint_configvar_value \"GIT_TAG\" \"${git_tag}\"\n        _replace_configvar_value \"GIT_TAG\" \"${git_tag}\"; patterns=\"${_ret};${patterns}\"\n\n        _os_iorunv \"git\" \"describe\" \"--tags\" \"--long\"; local git_tag_long=\"${_ret}\"\n        _vprint_configvar_value \"GIT_TAG_LONG\" \"${git_tag_long}\"\n        _replace_configvar_value \"GIT_TAG_LONG\" \"${git_tag_long}\"; patterns=\"${_ret};${patterns}\"\n\n        _os_iorunv \"git\" \"rev-parse\" \"--abbrev-ref\" \"HEAD\"; local git_branch=\"${_ret}\"\n        _vprint_configvar_value \"GIT_BRANCH\" \"${git_branch}\"\n        _replace_configvar_value \"GIT_BRANCH\" \"${git_branch}\"; patterns=\"${_ret};${patterns}\"\n\n        _os_iorunv \"git\" \"rev-parse\" \"--short\" \"HEAD\"; local git_commit=\"${_ret}\"\n        _vprint_configvar_value \"GIT_COMMIT\" \"${git_commit}\"\n        _replace_configvar_value \"GIT_COMMIT\" \"${git_commit}\"; patterns=\"${_ret};${patterns}\"\n\n        _os_iorunv \"git\" \"rev-parse\" \"HEAD\"; local git_commit_long=\"${_ret}\"\n        _vprint_configvar_value \"GIT_COMMIT_LONG\" \"${git_commit_long}\"\n        _replace_configvar_value \"GIT_COMMIT_LONG\" \"${git_commit_long}\"; patterns=\"${_ret};${patterns}\"\n\n        _os_iorunv \"log\" \"-1\" \"--date=format:%Y%m%d%H%M%S\" \"--format=%ad\"; local git_commit_date=\"${_ret}\"\n        _vprint_configvar_value \"GIT_COMMIT_DATE\" \"${git_commit_date}\"\n        _replace_configvar_value \"GIT_COMMIT_DATE\" \"${git_commit_date}\"; patterns=\"${_ret};${patterns}\"\n    fi\n\n    # replace configvars in target\n    local count=0\n    local configfile_dst=\"${configfile}\"\n    _os_tmpfile; local tmpfile=\"${_ret}\"\n    cp \"${configfile_in}\" \"${tmpfile}\"\n    _get_target_item \"${target}\" \"configvars\"; local configvars=\"${_ret}\"\n    for name in ${configvars}; do\n        _get_target_item \"${target}\" \"configvar_${name}\"; local value=\"${_ret}\"\n        _vprint_configvar_define \"${name}\" \"${value}\"\n        _vprint_configvar_value \"${name}\" \"${value}\"\n        _replace_configvar_define \"${name}\" \"${value}\"; patterns=\"${_ret};${patterns}\"\n        _replace_configvar_value \"${name}\" \"${value}\"; patterns=\"${_ret};${patterns}\"\n        count=$((count + 1))\n\n        # do replace\n        if test_eq \"$count\" \"10\"; then\n            _io_replace_file \"${tmpfile}\" \"${configfile}\" \"${patterns}\"\n            local swapfile=\"${tmpfile}\"\n            tmpfile=\"${configfile}\"\n            configfile=\"${swapfile}\"\n            patterns=\"\"\n            count=0\n        fi\n    done\n\n    # do replace (left)\n    if test_nz \"${patterns}\"; then\n        _io_replace_file \"${tmpfile}\" \"${configfile}\" \"${patterns}\"\n        local swapfile=\"${tmpfile}\"\n        tmpfile=\"${configfile}\"\n        configfile=\"${swapfile}\"\n        patterns=\"\"\n        count=0\n    fi\n\n    # replace fallback\n    patterns='s/${define \\(.*\\)}/\\/*#undef \\1*\\//g;'\n    _io_replace_file \"${tmpfile}\" \"${configfile}\" \"${patterns}\"\n    if test_nq \"${configfile}\" \"${configfile_dst}\"; then\n        cp \"${configfile}\" \"${configfile_dst}\"\n    fi\n    echo \"${configfile_dst} is generated!\"\n}\n\n# generate configfiles\n_generate_configfiles() {\n    for target in ${_xmake_sh_targets}; do\n        _get_target_item \"${target}\" \"configfiles\"; local configfiles=\"${_ret}\"\n        for configfile in ${configfiles}; do\n            _generate_configfile \"${target}\" \"${configfile}\"\n        done\n    done\n}\n_generate_configfiles\n\n#-----------------------------------------------------------------------------\n# generate gmake file\n#\n\n_gmake_begin() {\n    echo \"generating makefile ..\"\n}\n\n_gmake_add_header() {\n    echo \"# this is the build file for this project\n# it is autogenerated by the xmake.sh build system.\n# do not edit by hand.\n\" > \"${xmake_sh_makefile}\"\n}\n\n_gmake_add_switches() {\n    echo \"ifneq (\\$(VERBOSE),1)\" >> \"${xmake_sh_makefile}\"\n    echo \"VV=@\" >> \"${xmake_sh_makefile}\"\n    echo \"endif\" >> \"${xmake_sh_makefile}\"\n    echo \"\" >> \"${xmake_sh_makefile}\"\n    echo \"ifeq (\\$(PREFIX),)\" >> \"${xmake_sh_makefile}\"\n    echo \"PREFIX=${_install_prefix_default}\" >> \"${xmake_sh_makefile}\"\n    echo \"endif\" >> \"${xmake_sh_makefile}\"\n    echo \"\" >> \"${xmake_sh_makefile}\"\n    echo \"INSTALLDIR:=\\$(DESTDIR)\" >> \"${xmake_sh_makefile}\"\n    echo \"ifneq (\\$(PREFIX),)\" >> \"${xmake_sh_makefile}\"\n    echo \"ifneq (\\$(INSTALLDIR),)\" >> \"${xmake_sh_makefile}\"\n    echo \"PREFIX_:=\\$(patsubst /%,%,\\$(PREFIX))\" >> \"${xmake_sh_makefile}\"\n    echo \"INSTALLDIR:=\\$(INSTALLDIR)/\\$(PREFIX_)\" >> \"${xmake_sh_makefile}\"\n    echo \"else\" >> \"${xmake_sh_makefile}\"\n    echo \"INSTALLDIR:=\\$(PREFIX)\" >> \"${xmake_sh_makefile}\"\n    echo \"endif\" >> \"${xmake_sh_makefile}\"\n    echo \"endif\" >> \"${xmake_sh_makefile}\"\n    echo \"\" >> \"${xmake_sh_makefile}\"\n}\n\n_gmake_add_flags() {\n    _get_targets_toolkinds; local kinds=\"${_ret}\"\n    for target in ${_xmake_sh_targets}; do\n        for kind in ${kinds}; do\n            _get_target_flags \"${target}\" \"${kind}\"; local flags=\"${_ret}\"\n            _get_flagname \"${kind}\"; local flagname=\"${_ret}\"\n            local key=\"${target}_${flagname}\"\n            echo \"${key}=${flags}\" >> \"${xmake_sh_makefile}\"\n        done\n        echo \"\" >> \"${xmake_sh_makefile}\"\n    done\n}\n\n_gmake_add_toolchains() {\n    _get_targets_toolkinds; local kinds=\"${_ret}\"\n    for kind in ${kinds}; do\n        _get_toolchain_toolset \"${_target_toolchain}\" \"${kind}\"; local program=\"${_ret}\"\n        local key=\"${kind}\"\n        echo \"${key}=${program}\" >> \"${xmake_sh_makefile}\"\n    done\n    echo \"\" >> \"${xmake_sh_makefile}\"\n}\n\n_gmake_add_build_object_for_gcc_clang() {\n    local kind=\"${1}\"\n    local sourcefile=\"${2}\"\n    local objectfile=\"${3}\"\n    local flagname=\"${4}\"\n    path_directory \"${objectfile}\"; local objectdir=\"${_ret}\"\n    print \"\\t@mkdir -p ${objectdir}\" >> \"${xmake_sh_makefile}\"\n    print \"\\t\\$(VV)\\$(${kind}) -c \\$(${flagname}) -o ${objectfile} ${sourcefile}\" >> \"${xmake_sh_makefile}\"\n}\n\n_gmake_add_build_object() {\n    local target=${1}\n    local sourcefile=\"${2}\"\n    local objectfile=\"${3}\"\n    path_sourcekind \"${sourcefile}\"; local sourcekind=\"${_ret}\"\n    _get_toolchain_toolset \"${_target_toolchain}\" \"${sourcekind}\"; local program=\"${_ret}\"\n    path_toolname \"${program}\"; local toolname=\"${_ret}\"\n    _get_flagname \"${sourcekind}\"; local flagname=\"${_ret}\"\n    flagname=\"${target}_${flagname}\"\n    echo \"${objectfile}: ${sourcefile}\" >> \"${xmake_sh_makefile}\"\n    print \"\\t@echo compiling.${_target_mode} ${sourcefile}\" >> \"${xmake_sh_makefile}\"\n    case \"${toolname}\" in\n        gcc) _gmake_add_build_object_for_gcc_clang \"${sourcekind}\" \"${sourcefile}\" \"${objectfile}\" \"${flagname}\";;\n        gxx) _gmake_add_build_object_for_gcc_clang \"${sourcekind}\" \"${sourcefile}\" \"${objectfile}\" \"${flagname}\";;\n        clang) _gmake_add_build_object_for_gcc_clang \"${sourcekind}\" \"${sourcefile}\" \"${objectfile}\" \"${flagname}\";;\n        clangxx) _gmake_add_build_object_for_gcc_clang \"${sourcekind}\" \"${sourcefile}\" \"${objectfile}\" \"${flagname}\";;\n        emcc) _gmake_add_build_object_for_gcc_clang \"${sourcekind}\" \"${sourcefile}\" \"${objectfile}\" \"${flagname}\";;\n        emxx) _gmake_add_build_object_for_gcc_clang \"${sourcekind}\" \"${sourcefile}\" \"${objectfile}\" \"${flagname}\";;\n        cosmocc) _gmake_add_build_object_for_gcc_clang \"${sourcekind}\" \"${sourcefile}\" \"${objectfile}\" \"${flagname}\";;\n        cosmocxx) _gmake_add_build_object_for_gcc_clang \"${sourcekind}\" \"${sourcefile}\" \"${objectfile}\" \"${flagname}\";;\n        tcc) _gmake_add_build_object_for_gcc_clang \"${sourcekind}\" \"${sourcefile}\" \"${objectfile}\" \"${flagname}\";;\n        *) raise \"unknown toolname(${toolname})!\" ;;\n    esac\n    echo \"\" >> \"${xmake_sh_makefile}\"\n}\n\n_gmake_add_build_objects() {\n    local target=${1}\n    _get_target_sourcefiles \"${target}\"; local sourcefiles=\"${_ret}\"\n    for sourcefile in ${sourcefiles}; do\n        _get_target_objectfile \"${target}\" \"${sourcefile}\"; local objectfile=\"${_ret}\"\n        _gmake_add_build_object \"${target}\" \"${sourcefile}\" \"${objectfile}\"\n    done\n}\n\n_gmake_add_build_target_for_gcc_clang() {\n    local kind=\"${1}\"\n    local targetfile=\"${2}\"\n    local objectfiles=\"${3}\"\n    local flagname=\"${4}\"\n    path_directory \"${targetfile}\"; local targetdir=\"${_ret}\"\n    print \"\\t@mkdir -p ${targetdir}\" >> \"${xmake_sh_makefile}\"\n    print \"\\t\\$(VV)\\$(${kind}) -o ${targetfile} ${objectfiles} \\$(${flagname})\" >> \"${xmake_sh_makefile}\"\n}\n\n_gmake_add_build_target_for_ar() {\n    local kind=\"${1}\"\n    local targetfile=\"${2}\"\n    local objectfiles=\"${3}\"\n    local flagname=\"${4}\"\n    path_directory \"${targetfile}\"; local targetdir=\"${_ret}\"\n    print \"\\t@mkdir -p ${targetdir}\" >> \"${xmake_sh_makefile}\"\n    print \"\\t\\$(VV)\\$(${kind}) \\$(${flagname}) ${flags} ${targetfile} ${objectfiles}\" >> \"${xmake_sh_makefile}\"\n}\n\n_gmake_add_build_target() {\n    local target=${1}\n    _get_targetdir \"${target}\"; local targetdir=\"${_ret}\"\n    _get_target_file \"${target}\"; local targetfile=\"${_ret}\"\n    _get_target_item \"${target}\" \"deps\"; local deps=\"${_ret}\"\n    _get_target_objectfiles \"${target}\"; local objectfiles=\"${_ret}\"\n\n    # get linker\n    _get_target_item \"${target}\" \"kind\"; local targetkind=\"${_ret}\"\n    local toolkind=\"\"\n    case \"${targetkind}\" in\n        binary) toolkind=\"ld\";;\n        static) toolkind=\"ar\";;\n        shared) toolkind=\"sh\";;\n        *) raise \"unknown targetkind(${targetkind})!\" ;;\n    esac\n    _get_toolchain_toolset \"${_target_toolchain}\" \"${toolkind}\"; local program=\"${_ret}\"\n    path_toolname \"${program}\"; local toolname=\"${_ret}\"\n\n    # get linker flags\n    _get_flagname \"${toolkind}\"; local flagname=\"${_ret}\"\n    flagname=\"${target}_${flagname}\"\n\n    # get depfiles\n    local dep=\"\"\n    local depfiles=\"\"\n    for dep in ${deps}; do\n        _get_target_file \"${dep}\"; local depfile=\"${_ret}\"\n        if test_nz \"${depfiles}\"; then\n            depfiles=\"${depfiles} ${depfile}\"\n        else\n            depfiles=\"${depfile}\"\n        fi\n    done\n\n    # link target\n    echo \"${target}: ${targetfile}\" >> \"${xmake_sh_makefile}\"\n    echo \"${targetfile}: ${depfiles}${objectfiles}\" >> \"${xmake_sh_makefile}\"\n    print \"\\t@echo linking.${_target_mode} ${targetfile}\" >> \"${xmake_sh_makefile}\"\n    case \"${toolname}\" in\n        gcc) _gmake_add_build_target_for_gcc_clang \"${toolkind}\" \"${targetfile}\" \"${objectfiles}\" \"${flagname}\";;\n        gxx) _gmake_add_build_target_for_gcc_clang \"${toolkind}\" \"${targetfile}\" \"${objectfiles}\" \"${flagname}\";;\n        clang) _gmake_add_build_target_for_gcc_clang \"${toolkind}\" \"${targetfile}\" \"${objectfiles}\" \"${flagname}\";;\n        clangxx) _gmake_add_build_target_for_gcc_clang \"${toolkind}\" \"${targetfile}\" \"${objectfiles}\" \"${flagname}\";;\n        emcc) _gmake_add_build_target_for_gcc_clang \"${toolkind}\" \"${targetfile}\" \"${objectfiles}\" \"${flagname}\";;\n        emxx) _gmake_add_build_target_for_gcc_clang \"${toolkind}\" \"${targetfile}\" \"${objectfiles}\" \"${flagname}\";;\n        cosmocc) _gmake_add_build_target_for_gcc_clang \"${toolkind}\" \"${targetfile}\" \"${objectfiles}\" \"${flagname}\";;\n        cosmocxx) _gmake_add_build_target_for_gcc_clang \"${toolkind}\" \"${targetfile}\" \"${objectfiles}\" \"${flagname}\";;\n        tcc) _gmake_add_build_target_for_gcc_clang \"${toolkind}\" \"${targetfile}\" \"${objectfiles}\" \"${flagname}\";;\n        ar) _gmake_add_build_target_for_ar \"${toolkind}\" \"${targetfile}\" \"${objectfiles}\" \"${flagname}\";;\n        emar) _gmake_add_build_target_for_ar \"${toolkind}\" \"${targetfile}\" \"${objectfiles}\" \"${flagname}\";;\n        cosmoar) _gmake_add_build_target_for_ar \"${toolkind}\" \"${targetfile}\" \"${objectfiles}\" \"${flagname}\";;\n        *) raise \"unknown toolname(${toolname})!\" ;;\n    esac\n\n    # @see https://github.com/tboox/tbox/issues/214\n    if test_eq \"${targetkind}\" \"shared\"; then\n        _get_target_item \"${target}\" \"version\"; local version=\"${_ret}\"\n        _get_target_soname \"${target}\"; local soname=\"${_ret}\"\n        if test_nz \"${soname}\" && test_nz \"${version}\"; then\n            _get_target_filename \"${target}\"; local filename=\"${_ret}\"\n            _get_target_extension \"${target}\"; local extension=\"${_ret}\"\n            local targetfile_with_version=\"${targetdir}/${filename}.${version}\"\n            if test_eq \"${extension}\" \".dylib\"; then\n                path_basename \"${filename}\"; local basename=\"${_ret}\"\n                targetfile_with_version=\"${targetdir}/${basename}.${version}${extension}\"\n            fi\n            local targetfile_with_soname=\"${targetdir}/${soname}\"\n            path_filename \"${targetfile_with_version}\"; local targetfilename_with_version=\"${_ret}\"\n            if test_nq \"${soname}\" \"${filename}\" && test_nq \"${soname}\" \"${targetfilename_with_version}\"; then\n                print \"\\t@cp -p ${targetfile} ${targetfile_with_version}\" >> \"${xmake_sh_makefile}\"\n                print \"\\t@cd ${targetdir} && ln -sf ${targetfilename_with_version} ${soname} && ln -sf ${soname} ${filename}\" >> \"${xmake_sh_makefile}\"\n            fi\n        fi\n    fi\n\n    # end\n    echo \"\" >> \"${xmake_sh_makefile}\"\n\n    # build objects\n    _gmake_add_build_objects \"${target}\"\n}\n\n_gmake_add_build_targets() {\n    local target=\"\"\n    local defaults=\"\"\n    for target in ${_xmake_sh_targets}; do\n        if _is_target_default \"${target}\"; then\n            defaults=\"${defaults} ${target}\"\n        fi\n    done\n    echo \"default:${defaults}\" >> \"${xmake_sh_makefile}\"\n    echo \"all:${_xmake_sh_targets}\" >> \"${xmake_sh_makefile}\"\n    echo \".PHONY: default all\" >> \"${xmake_sh_makefile}\"\n    echo \"\" >> \"${xmake_sh_makefile}\"\n    for target in ${_xmake_sh_targets}; do\n        _gmake_add_build_target \"${target}\"\n    done\n}\n\n_gmake_add_build() {\n    _gmake_add_build_targets\n}\n\n_gmake_add_run_target() {\n    local target=${1}\n    _get_targetdir \"${target}\"; local targetdir=\"${_ret}\"\n    _get_target_file \"${target}\"; local targetfile=\"${_ret}\"\n    if is_plat \"macosx\"; then\n        print \"\\t@DYLD_LIBRARY_PATH=${targetdir} ${targetfile}\" >> \"${xmake_sh_makefile}\"\n    elif is_plat \"linux\" \"bsd\"; then\n        print \"\\t@LD_LIBRARY_PATH=${targetdir} ${targetfile}\" >> \"${xmake_sh_makefile}\"\n    else\n        print \"\\t@${targetfile}\" >> \"${xmake_sh_makefile}\"\n    fi\n}\n\n_gmake_add_run_targets() {\n    local target=\"\"\n    local targets=\"\"\n    for target in ${_xmake_sh_targets}; do\n        _get_target_item \"${target}\" \"kind\"; local kind=\"${_ret}\"\n        if test \"x${kind}\" = \"xbinary\"; then\n            if _is_target_default \"${target}\"; then\n                targets=\"${targets} ${target}\"\n            fi\n        fi\n    done\n    echo \"run:${targets}\" >> \"${xmake_sh_makefile}\"\n    for target in ${targets}; do\n        _gmake_add_run_target \"${target}\"\n    done\n    echo \"\" >> \"${xmake_sh_makefile}\"\n}\n\n_gmake_add_run() {\n    _gmake_add_run_targets\n}\n\n_gmake_add_clean_target() {\n    local target=${1}\n    local objectfile=\"\"\n    _get_target_file \"${target}\"; local targetfile=\"${_ret}\"\n    _get_target_objectfiles \"${target}\"; local objectfiles=\"${_ret}\"\n    print \"\\t@rm ${targetfile}\" >> \"${xmake_sh_makefile}\"\n    for objectfile in ${objectfiles}; do\n        print \"\\t@rm ${objectfile}\" >> \"${xmake_sh_makefile}\"\n    done\n\n    # @see https://github.com/tboox/tbox/issues/214\n    _get_targetdir \"${target}\"; local targetdir=\"${_ret}\"\n    _get_target_item \"${target}\" \"kind\"; local targetkind=\"${_ret}\"\n    if test_eq \"${targetkind}\" \"shared\"; then\n        _get_target_item \"${target}\" \"version\"; local version=\"${_ret}\"\n        _get_target_soname \"${target}\"; local soname=\"${_ret}\"\n        if test_nz \"${soname}\" && test_nz \"${version}\"; then\n            _get_target_filename \"${target}\"; local filename=\"${_ret}\"\n            _get_target_extension \"${target}\"; local extension=\"${_ret}\"\n            local targetfile_with_version=\"${targetdir}/${filename}.${version}\"\n            if test_eq \"${extension}\" \".dylib\"; then\n                path_basename \"${filename}\"; local basename=\"${_ret}\"\n                targetfile_with_version=\"${targetdir}/${basename}.${version}${extension}\"\n            fi\n            local targetfile_with_soname=\"${targetdir}/${soname}\"\n            print \"\\t@if test -f ${targetfile_with_soname}; then rm ${targetfile_with_soname}; fi\" >> \"${xmake_sh_makefile}\"\n            print \"\\t@if test -f ${targetfile_with_version}; then rm ${targetfile_with_version}; fi\" >> \"${xmake_sh_makefile}\"\n        fi\n    fi\n}\n\n_gmake_add_clean_targets() {\n    local target=\"\"\n    local targets=\"\"\n    for target in ${_xmake_sh_targets}; do\n        if _is_target_default \"${target}\"; then\n            targets=\"${targets} ${target}\"\n        fi\n    done\n    echo \"clean:${targets}\" >> \"${xmake_sh_makefile}\"\n    for target in ${targets}; do\n        _gmake_add_clean_target \"${target}\"\n    done\n    echo \"\" >> \"${xmake_sh_makefile}\"\n}\n\n_gmake_add_clean() {\n    _gmake_add_clean_targets\n}\n\n_gmake_add_install_target() {\n    local target=${1}\n    _get_target_file \"${target}\"; local targetfile=\"${_ret}\"\n    path_filename \"${targetfile}\"; local filename=\"${_ret}\"\n    _get_target_item \"${target}\" \"installdir\"; local installdir=\"${_ret}\"\n    _get_target_item \"${target}\" \"kind\"; local targetkind=\"${_ret}\"\n    if test_z \"${installdir}\"; then\n        installdir=\"\\$(INSTALLDIR)\"\n    fi\n\n    # before install\n    _get_target_item \"${target}\" \"before_install\"; local before_install=\"${_ret}\"\n    if test_nz \"${before_install}\"; then\n        eval ${before_install} \"\\${target}\" \"\\${installdir}\"\n    fi\n\n    # @see https://github.com/tboox/tbox/issues/214\n    install_for_soname=false\n    if test_eq \"${targetkind}\" \"shared\"; then\n        _get_target_item \"${target}\" \"version\"; local version=\"${_ret}\"\n        _get_target_soname \"${target}\"; local soname=\"${_ret}\"\n        if test_nz \"${soname}\" && test_nz \"${version}\"; then\n            _get_target_extension \"${target}\"; local extension=\"${_ret}\"\n            string_replace \"${_install_libdir_default}\" \"\\${prefix}\" \"${installdir}\"; _install_libdir_default=\"${_ret}\"\n            local targetfile_with_version=\"${_install_libdir_default}/${filename}.${version}\"\n            if test_eq \"${extension}\" \".dylib\"; then\n                path_basename \"${filename}\"; local basename=\"${_ret}\"\n                targetfile_with_version=\"${_install_libdir_default}/${basename}.${version}${extension}\"\n            fi\n            local targetfile_with_soname=\"${_install_libdir_default}/${soname}\"\n            path_filename \"${targetfile_with_version}\"; local targetfilename_with_version=\"${_ret}\"\n            if test_nq \"${soname}\" \"${filename}\" && test_nq \"${soname}\" \"${targetfilename_with_version}\"; then\n                install_for_soname=true\n            fi\n        fi\n    fi\n\n    # install target file\n    if test_eq \"${targetkind}\" \"binary\"; then\n        string_replace \"${_install_bindir_default}\" \"\\${prefix}\" \"${installdir}\"; _install_bindir_default=\"${_ret}\"\n        print \"\\t@echo installing ${targetfile} to ${_install_bindir_default}\" >> \"${xmake_sh_makefile}\"\n        print \"\\t@mkdir -p ${_install_bindir_default}\" >> \"${xmake_sh_makefile}\"\n        print \"\\t@cp -p ${targetfile} ${_install_bindir_default}/${filename}\" >> \"${xmake_sh_makefile}\"\n    elif ${install_for_soname}; then\n        string_replace \"${_install_libdir_default}\" \"\\${prefix}\" \"${installdir}\"; _install_libdir_default=\"${_ret}\"\n        print \"\\t@echo installing ${targetfile} to ${_install_libdir_default}\" >> \"${xmake_sh_makefile}\"\n        print \"\\t@mkdir -p ${_install_libdir_default}\" >> \"${xmake_sh_makefile}\"\n        print \"\\t@cp -p ${targetfile} ${targetfile_with_version}\" >> \"${xmake_sh_makefile}\"\n        print \"\\t@cd ${_install_libdir_default} && ln -sf ${targetfilename_with_version} ${soname} && ln -sf ${soname} ${filename}\" >> \"${xmake_sh_makefile}\"\n    elif test_eq \"${targetkind}\" \"static\" || test_eq \"${targetkind}\" \"shared\"; then\n        string_replace \"${_install_libdir_default}\" \"\\${prefix}\" \"${installdir}\"; _install_libdir_default=\"${_ret}\"\n        print \"\\t@echo installing ${targetfile} to ${_install_libdir_default}\" >> \"${xmake_sh_makefile}\"\n        print \"\\t@mkdir -p ${_install_libdir_default}\" >> \"${xmake_sh_makefile}\"\n        print \"\\t@cp -p ${targetfile} ${_install_libdir_default}/${filename}\" >> \"${xmake_sh_makefile}\"\n    fi\n\n    # install header files\n    _get_target_item \"${target}\" \"headerfiles\"; local headerfiles=\"${_ret}\"\n    if test_nz \"${headerfiles}\"; then\n        string_replace \"${_install_includedir_default}\" \"\\${prefix}\" \"${installdir}\"; _install_includedir_default=\"${_ret}\"\n        local srcheaderfile=\"\"\n        local includedir=\"${_install_includedir_default}\"\n        for srcheaderfile in ${headerfiles}; do\n            string_split \"${srcheaderfile}\" \":\"\n            local srcheaderfile=\"${_ret}\"\n            local rootdir=\"${_ret2}\"\n            local prefixdir=\"${_ret3}\"\n            local filename=\"${_ret4}\"\n            if test_z \"${filename}\"; then\n                path_filename \"${srcheaderfile}\"; filename=\"${_ret}\"\n            fi\n            local dstheaderdir=\"${includedir}\"\n            if test_nz \"${prefixdir}\"; then\n                dstheaderdir=\"${dstheaderdir}/${prefixdir}\"\n            fi\n            local dstheaderfile=\"${dstheaderdir}/${filename}\"\n            if test_nz \"${rootdir}\"; then\n                path_relative \"${rootdir}\" \"${srcheaderfile}\"; local subfile=\"${_ret}\"\n                dstheaderfile=\"${dstheaderdir}/${subfile}\"\n            fi\n            path_directory \"${dstheaderfile}\"; dstheaderdir=\"${_ret}\"\n            print \"\\t@mkdir -p ${dstheaderdir}\" >> \"${xmake_sh_makefile}\"\n            print \"\\t@cp -p ${srcheaderfile} ${dstheaderfile}\" >> \"${xmake_sh_makefile}\"\n        done\n    fi\n\n    # install user files\n    _get_target_item \"${target}\" \"installfiles\"; local installfiles=\"${_ret}\"\n    if test_nz \"${installfiles}\"; then\n        local srcinstallfile=\"\"\n        for srcinstallfile in ${installfiles}; do\n            string_split \"${srcinstallfile}\" \":\"\n            local srcinstallfile=\"${_ret}\"\n            local rootdir=\"${_ret2}\"\n            local prefixdir=\"${_ret3}\"\n            local filename=\"${_ret4}\"\n            if test_z \"${filename}\"; then\n                path_filename \"${srcinstallfile}\"; filename=\"${_ret}\"\n            fi\n            local dstinstalldir=\"${installdir}\"\n            if test_nz \"${prefixdir}\"; then\n                dstinstalldir=\"${dstinstalldir}/${prefixdir}\"\n            fi\n            local dstinstallfile=\"${dstinstalldir}/${filename}\"\n            if test_nz \"${rootdir}\"; then\n                path_relative \"${rootdir}\" \"${srcinstallfile}\"; local subfile=\"${_ret}\"\n                dstinstallfile=\"${dstinstalldir}/${subfile}\"\n            fi\n            path_directory \"${dstinstallfile}\"; dstinstalldir=\"${_ret}\"\n            print \"\\t@mkdir -p ${dstinstalldir}\" >> \"${xmake_sh_makefile}\"\n            print \"\\t@cp -p ${srcinstallfile} ${dstinstallfile}\" >> \"${xmake_sh_makefile}\"\n        done\n    fi\n\n    # after install\n    _get_target_item \"${target}\" \"after_install\"; local after_install=\"${_ret}\"\n    if test_nz \"${after_install}\"; then\n        eval ${after_install} \"\\${target}\" \"\\${installdir}\"\n    fi\n}\n\n_gmake_add_install_targets() {\n    local target=\"\"\n    local targets=\"\"\n    for target in ${_xmake_sh_targets}; do\n        if _is_target_default \"${target}\"; then\n            targets=\"${targets} ${target}\"\n        fi\n    done\n    echo \"install:${targets}\" >> \"${xmake_sh_makefile}\"\n    for target in ${targets}; do\n        _gmake_add_install_target \"${target}\"\n    done\n    echo \"\" >> \"${xmake_sh_makefile}\"\n}\n\n_gmake_add_install() {\n    _gmake_add_install_targets\n}\n\n_gmake_done() {\n    echo \"makefile is generated!\"\n    if \"${xmake_sh_diagnosis}\"; then\n        cat \"${xmake_sh_makefile}\"\n    fi\n}\n\n# generate build file for gmake\n_generate_for_gmake() {\n    _gmake_begin\n    _gmake_add_header\n    _gmake_add_switches\n    _gmake_add_toolchains\n    _gmake_add_flags\n    _gmake_add_build\n    _gmake_add_clean\n    _gmake_add_install\n    _gmake_add_run\n    _gmake_done\n}\n\n#-----------------------------------------------------------------------------\n# generate ninja file\n#\n\n# generate build file for ninja\n_generate_for_ninja() {\n    raise \"Ninja generator has been not supported!\"\n}\n\n#-----------------------------------------------------------------------------\n# generate build file\n#\n\n_generate_build_file() {\n    if test_eq \"${project_generator}\" \"gmake\"; then\n        _generate_for_gmake\n    elif test_eq \"${project_generator}\" \"ninja\"; then\n        _generate_for_ninja\n    else\n        raise \"unknown generator: ${project_generator}\"\n    fi\n}\n_generate_build_file\n\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "xmake.lua",
          "type": "blob",
          "size": 2.978515625,
          "content": "-- project\nset_project(\"tbox\")\n\n-- set xmake minimum version\nset_xmakever(\"2.8.2\")\n\n-- set project version\nset_version(\"1.7.6\", {build = \"%Y%m%d\", soname = true})\n\n-- set warning all as error\nset_warnings(\"all\", \"error\")\n\n-- set language: c99\nstdc = \"c99\"\nset_languages(stdc)\n\n-- add defines to config.h\nset_configvar(\"_GNU_SOURCE\", 1)\nset_configvar(\"_REENTRANT\", 1)\n\n-- add module directories\nadd_moduledirs(\"xmake\")\n\n-- disable some compiler errors\nadd_cxflags(\"-Wno-error=deprecated-declarations\", \"-fno-strict-aliasing\", \"-Wno-error=expansion-to-defined\", \"-Wno-error=empty-body\")\nadd_mxflags(\"-Wno-error=deprecated-declarations\", \"-fno-strict-aliasing\", \"-Wno-error=expansion-to-defined\", \"-Wno-error=empty-body\")\nif has_config(\"coroutine\") then\n    -- https://github.com/tboox/tbox/issues/218\n    add_cxflags(\"gcc::-Wno-error=dangling-pointer\")\nend\n\n-- set wasm toolchain\nif is_plat(\"wasm\") then\n    add_requires(\"emscripten\")\n    set_toolchains(\"emcc@emscripten\")\nend\n\n-- set cosmocc toolchain, e.g. xmake f -p linux --cosmocc=y\nif has_config(\"cosmocc\") then\n    add_requires(\"cosmocc\")\n    set_toolchains(\"@cosmocc\")\n    set_policy(\"build.ccache\", false)\nend\n\n-- add build modes\nadd_rules(\"mode.release\", \"mode.debug\", \"mode.profile\", \"mode.coverage\", \"mode.valgrind\", \"mode.asan\", \"mode.tsan\", \"mode.ubsan\")\nif is_mode(\"debug\") then\n    add_defines(\"__tb_debug__\")\nend\nif is_mode(\"valgrind\") then\n    add_defines(\"__tb_valgrind__\")\nend\nif is_mode(\"asan\") then\n    add_defines(\"__tb_sanitize_address__\")\nend\nif is_mode(\"tsan\") then\n    add_defines(\"__tb_sanitize_thread__\")\nend\n\n-- small or micro?\nif has_config(\"small\", \"micro\") then\n    add_defines(\"__tb_small__\")\n    set_configvar(\"TB_CONFIG_SMALL\", 1)\n    if is_mode(\"release\", \"profile\") and\n        -- coroutine maybe crash if we enable lto on windows, we disable small mode.\n        -- TODO we should fix it in context code later\n        -- https://github.com/tboox/tbox/issues/175\n        not has_config(\"coroutine\") then\n        if is_plat(\"windows\") then\n            -- we cannot use smallest(/O1), it maybe generates incorrect code for msvc2022\n            -- @see https://github.com/tboox/tbox/issues/272\n            set_optimize(\"fastest\")\n        else\n            set_optimize(\"smallest\")\n        end\n    end\n    add_cxflags(\"-fno-stack-protector\")\nend\n\n-- for the windows platform (msvc)\nif is_plat(\"windows\") then\n    add_defines(\"NOCRYPT\", \"NOGDI\")\n    if is_mode(\"debug\") then\n        add_cxflags(\"-Gs\", \"-RTC1\")\n        set_runtimes(\"MTd\")\n    else\n        set_runtimes(\"MT\")\n    end\n    add_syslinks(\"ws2_32\", \"user32\")\nelseif is_plat(\"android\") then\n    add_syslinks(\"m\", \"c\")\nelseif is_plat(\"mingw\", \"msys\", \"cygwin\") then\n    add_syslinks(\"ws2_32\", \"user32\", \"pthread\", \"m\")\nelseif is_plat(\"haiku\") then\n    add_syslinks(\"pthread\", \"network\", \"m\", \"c\")\nelse\n    add_syslinks(\"pthread\", \"dl\", \"m\", \"c\")\nend\n\n-- enable backtrace symbols for linux\nif is_plat(\"linux\") and is_mode(\"debug\") then\n    add_ldflags(\"-rdynamic\")\nend\n\n-- include project sources\nincludes(\"src\")\n"
        },
        {
          "name": "xmake",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}