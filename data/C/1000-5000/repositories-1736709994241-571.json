{
  "metadata": {
    "timestamp": 1736709994241,
    "page": 571,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lloyd/yajl",
      "stars": 2160,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0263671875,
          "content": ".DS_Store\nMakefile\n/build/\n"
        },
        {
          "name": "BUILDING",
          "type": "blob",
          "size": 0.46875,
          "content": "Short story (If you already have ruby and cmake):\n\n./configure && make install\n\nWhen things go wrong:\n\nattain CMake (http://www.cmake.org) and ruby (http://ruby-lang.org) and\ntry again.\n\nOR, attain CMake and build by hand:\n\n1. mkdir build\n2. cd build\n3. cmake ..\n4. make \n5. build output left in yajl-X.Y.Z\n\nNOTE: for 64-bit systems where lib64 is used you can pass the cmake\n      variable LIB_SUFFIX to cause installation into the system's 'lib64'\n      directory.\n\nbest,\nlloyd\n"
        },
        {
          "name": "BUILDING.win32",
          "type": "blob",
          "size": 1.001953125,
          "content": "YAJL has been successfully built using Visual Studio 8.  CMake, a\nbuild file generator, is used to build the software.  CMake supports\nseveral different build environments, so you may either build YAJL\nusing the IDE via the following steps:\n\n1. acquire cmake (http://www.cmake.org)\n2. mkdir build\n3. cd build\n4. cmake ..\n5. devenv YetAnotherJSONParser.sln /project ALL_BUILD /build Release\n6. build output is left in build/yajl-X.Y.Z\n\nOr you can build from the command line using nmake:\n\n1. Click Start > Programs > Microsoft Visual Studio > Visual Studio\nTools > Visual Studio Command Prompt -- for your version of Visual\nStudio, which will open a command prompt.  You may verify that the\ncompiler is in your path by typing \"cl /?\" at the prompt.\n2. cd C:\\path\\to\\yajl\\source\\\n3. mkdir build\n4. cd build\n5. cmake -G\"NMake Makefiles\" -DCMAKE_BUILD_TYPE=Release ..\n6. nmake\n7. nmake install\n\nEarlier versions of visual studio and other build generators haven't\nbeen thoroughly tested, but should work without any major issues.\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 3.103515625,
          "content": "# Copyright (c) 2007-2014, Lloyd Hilaiel <me@lloyd.io>\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nCMAKE_MINIMUM_REQUIRED(VERSION 2.6)\n\nPROJECT(YetAnotherJSONParser C)\n\nSET (YAJL_MAJOR 2)\nSET (YAJL_MINOR 1)\nSET (YAJL_MICRO 1)\n\nSET (YAJL_DIST_NAME \"yajl-${YAJL_MAJOR}.${YAJL_MINOR}.${YAJL_MICRO}\")\n\nIF (NOT CMAKE_BUILD_TYPE)\n  SET(CMAKE_BUILD_TYPE \"Release\")\nENDIF (NOT CMAKE_BUILD_TYPE)\n\nSET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n\nIF (WIN32)\n  SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /W4\")\n  ADD_DEFINITIONS(-DWIN32)\n  SET(linkFlags \"/PDB:NONE /INCREMENTAL:NO /OPT:NOREF /OPT:NOICF\")\n  SET(CMAKE_EXE_LINKER_FLAGS    \"${linkFlags}\"\n      CACHE STRING \"YAJL linker flags\" FORCE)\n  SET(CMAKE_EXE_LINKER_FLAGS_DEBUG \"\"\n      CACHE STRING \"YAJL debug linker flags\" FORCE)\n  SET(CMAKE_EXE_LINKER_FLAGS_RELEASE\n      CACHE STRING \"YAJL release linker flags\" FORCE)\n  SET(CMAKE_SHARED_LINKER_FLAGS \"${linkFlags}\"\n      CACHE STRING \"YAJL shared linker flags\" FORCE)\n  SET(CMAKE_MODULE_LINKER_FLAGS \"${linkFlags}\"\n      CACHE STRING \"YAJL module linker flags\" FORCE)\n\n  SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /wd4996 /wd4255 /wd4130 /wd4100 /wd4711\")\n  SET(CMAKE_C_FLAGS_DEBUG \"/D DEBUG /Od /Z7\")\n  SET(CMAKE_C_FLAGS_RELEASE \"/D NDEBUG /O2\")\nELSE (WIN32)\n  SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wall\")\n  IF(CMAKE_COMPILER_IS_GNUCC)\n    INCLUDE(CheckCCompilerFlag)\n    CHECK_C_COMPILER_FLAG(-fvisibility=hidden HAVE_GCC_VISIBILITY)\n    IF(HAVE_GCC_VISIBILITY)\n      SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fvisibility=hidden\")\n    ENDIF(HAVE_GCC_VISIBILITY)\n  ENDIF(CMAKE_COMPILER_IS_GNUCC)\n  SET(CMAKE_C_FLAGS\n      \"${CMAKE_C_FLAGS} -std=c99 -pedantic -Wpointer-arith -Wno-format-y2k -Wstrict-prototypes -Wmissing-declarations -Wnested-externs -Wextra\t-Wundef -Wwrite-strings -Wold-style-definition -Wredundant-decls -Wno-unused-parameter -Wno-sign-compare -Wmissing-prototypes\")\n\n  SET(CMAKE_C_FLAGS_DEBUG \"-DDEBUG -g\")\n  SET(CMAKE_C_FLAGS_RELEASE \"-DNDEBUG -O2 -Wuninitialized\")\nENDIF (WIN32)\n\n\nADD_SUBDIRECTORY(src)\nADD_SUBDIRECTORY(test)\nADD_SUBDIRECTORY(reformatter)\nADD_SUBDIRECTORY(verify)\nADD_SUBDIRECTORY(example)\nADD_SUBDIRECTORY(perf)\n\nINCLUDE(YAJLDoc.cmake)\n\n# a test target\nADD_CUSTOM_TARGET(test\n                  ./run_tests.sh ${CMAKE_CURRENT_BINARY_DIR}/test/parsing/yajl_test\n                  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/test/parsing)\n\nADD_CUSTOM_TARGET(test-api ${CMAKE_CURRENT_SOURCE_DIR}/test/api/run_tests.sh\n                  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/test/api)\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 0.7333984375,
          "content": "Copyright (c) 2007-2014, Lloyd Hilaiel <me@lloyd.io>\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 7.482421875,
          "content": "2.1.0\n     * @nonodename, @patperry - fixed some compiler warnings\n     * @yep, @emaste - documentation improvements\n     * @sgravrock - build fix for NetBSD (and whenever sh != bash)\n     * @rotty, @brimstone3, @lloyd - allow client to reset generator\n     * @sgravrock - remove bash dependencies\n     * @lloyd - add api tests\n     * @rflynn - remove ruby dependency\n     * @cloderic - nmake install works on windows\n     * @shahbag - build fix for qnx\n     * @breese - debugging improvements\n     * @lloyd - json_verify supports -s flag for stream processing\n     * @lloyd - json_reformat supports -s flag for stream processing\n\n2.0.4\n     * @jcekstrom - additional checking in integer parsing\n     * @jcekstrom - fix a bug in yajl_tree that would cause valid json integersto fail to parse\n     * @plaguemorin - fix a memory leak in yajl_tree (error strings were being leaked)\n     * @7AC - reset errno\n     * @ConradIrwin - include flags to reformatter to allow toggling of escape solidus option\n\n2.0.3\n     * John Stamp generation of a pkgconfig file at build time.\n     * @robzuber bugfix in yajl_tree_get()\n     * @lloyd - fix for compilation on 64 bit windows\n\n2.0.2\n     * lth fix typos in yajl_tree.h macros YAJL_IS_INTEGER and YAJL_IS_DOUBLE,\n\tcontributed by Artem S Vybornov.\n     * lth add #ifdef __cplusplus wrappers to yajl_tree to allow proper\n\tusage from many populer C++ compilers.\n\n2.0.1\n     * lth generator flag to allow client to specify they want\n\tescaped solidi '/'.  issue #28\n     * lth crash fix when yajl_parse() is never called. issue #27\n\n2.0.0\n     * lth YAJL is now ISC licensed: http://en.wikipedia.org/wiki/ISC_license\n     * lth 20-35% (osx and linux respectively) parsing performance\n\timprovement attained by tweaking string scanning (idea: @michaelrhanson).\n     * Florian Forster & lth - yajl_tree interface introduced as a higher level\n\tinterface to the parser (eats JSON, poops a memory representation)\n     * lth require a C99 compiler\n     * lth integers are now represented with long long (64bit+) on all platforms.\n     * lth size_t now used throughout to represent buffer lengths, so you can\n\tsafely manage buffers greater than 4GB.\n     * gno semantic improvements to yajl's API regarding partial value parsing and\n\ttrailing garbage\n     * lth new configuration mechanism for yajl, see yajl_config() and\n\tyajl_gen_config()\n     * gno more allocation checking in more places\n     * gno remove usage of strtol, replace with custom implementation that cares\n\tnot about your locale.\n     * lth yajl_parse_complete renamed to yajl_complete_parse.\n     * lth add a switch to validate utf8 strings as they are generated.\n     * lth tests are a lot quieter in their output.\n     * lth addition of a little in tree performance benchmark, `perftest` in\n\tperf/perftest.c\n\n1.0.12\n     * Conrad Irwin - Parse null bytes correctly\n     * Mirek Rusin - fix LLVM warnings\n     * gno - Don't generate numbers for keys. closes #13\n     * lth - various win32 fixes, including build documentation improvements\n     * John Stamp - Don't export private symbols.\n     * John Stamp - Install yajl_version.h, not the template.\n     * John Stamp - Don't use -fPIC for static lib.  Cmake will automatically add it for the shared.\n     * lth 0 fix paths embedded in dylib upon installation on osx.  closes #11\n\n1.0.11\n     * lth remove -Wno-missing-field-initializers for greater gcc compat (3.4.6)\n\n1.0.10\n     * Brian Maher - yajl is now buildable without a c++ compiler present\n     * Brian Maher - fix header installation on OSX with cmake 2.8.0 installed\n     * lth & vitali - allow builder to specify alternate lib directory\n\tfor installation (i.e. lib64) \n     * Vitali Lovich - yajl version number now programatically accessible\n     * lth - prevent cmake from embedding rpaths in binaries.  Static linking\n\tmakes this unneccesary.\n\n1.0.9\n     * lth - fix inverted logic causing yajl_gen_double() to always fail on\n\twin32 (thanks to Fredrik Kihlander for the report) \n\n1.0.8\n     * Randall E. Barker - move dllexport defnitions so dlls with proper\n\texports can again be generated on windows \n     * lth - add yajl_get_bytes_consumed() which allows the client to\n\tdetermine the offset as an error, as well as determine how\n\tmany bytes of an input buffer were consumed.\n     * lth - fixes to keep \"error offset\" up to date (like when the\n\tclient callback returns 0)\n     * Brian Maher - allow client to specify a printing function in\n       generation\n\n1.0.7\n     * lth fix win32 build (isinf and isnan)\n\n1.0.6\n     * lth fix several compiler warnings\n     * lth fix generation of invalid json from yajl_gen_double\n\t(NaN is not JSON)\n     * jstamp support for combining short options in tools\n     * jstamp exit properly on errors from tools\n     * octo test success no longer depends on integer size\n     * max fix configure --prefix\n\n1.0.5\n     * lth several performance improvements related to function\n\tinlinin'\n\n1.0.4\n     * lth fix broken utf8 validation for three & four byte represenations.\n\tthanks to http://github.com/brianmario and\n\thttp://github.com/technoweenie\n\n1.0.3\n     * lth fix syntax error in cplusplus extern \"C\" statements for wider\n\tcompiler support\n\n1.0.2\n     * lth update doxygen documentation with new sample code, passing NULL\n\tfor allocation functions added in 1.0.0\n\n1.0.1\n     * lth resolve crash in json_reformatter due to incorrectly ordered\n\tparameters.\n\n1.0.0\n     * lth add 'make install' rules, thaks to Andrei Soroker for the\n\tcontribution.\n     * lth client may override allocation routines at generator or parser\n\tallocation time\n     * tjw add yajl_parse_complete routine to allow client to explicitly\n\tspecify end-of-input, solving the \"lonely number\" case, where\n\tjson text consists only of an element with no explicit syntactic\n\tend.\n     * tjw many new test cases\t\n     * tjw cleanup of code for symmetry and ease of reading\n     * lth integration of patches from Robert Varga which cleanup\n\tcompilation warnings on 64 bit linux\n\n0.4.0\n     * lth buffer overflow bug in yajl_gen_double s/%lf/%g/ - thanks to\n\tEric Bergstrome\n     * lth yajl_number callback to allow passthrough of arbitrary precision\n\tnumbers to client.  Thanks to Hatem Nassrat.\n     * lth yajl_integer now deals in long, instead of long long.  This\n\tcombined with yajl_number improves compiler compatibility while\n\tmaintaining precision.\n     * lth better ./configure && make experience (still requires cmake and\n\truby)\n     * lth fix handling of special characters hex 0F and 1F in yajl_encode\n\t(thanks to Robert Geiger)\n     * lth allow leading zeros in exponents (thanks to Hatem Nassrat)\n\n0.3.0\n     * lth doxygen documentation (html & man) generated as part of the\n\tbuild\n     * lth many documentation updates.\n     * lth fix to work with older versions of cmake (don't use LOOSE_LOOP\n\tconstructs)\n     * lth work around different behavior of freebsd 4 scanf.  initialize\n\tparameter to scanf to zero.\n     * lth all tests run 32x with ranging buffer sizes to stress stream\n        parsing\n     * lth yajl_test accepts -b option to allow read buffer size to be\n        set\n     * lth option to validate UTF8 added to parser (argument in\n        yajl_parser_cfg)\n     * lth fix buffer overrun when chunk ends inside \\u escaped text\n     * lth support client cancelation\n\n0.2.2\n     * lth on windows build debug with C7 symbols and no pdb files.\n\n0.2.1\n     * fix yajl_reformat and yajl_verify to work on arbitrarily sized\n        inputs.\n     * fix win32 build break, clean up all errors and warnings.\n     * fix optimized build flags.\n\n0.2.0\n     * optionally support comments in input text\n\n0.1.0\n     * Initial release\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 2.7353515625,
          "content": "**********************************************************************\n        This is YAJL 2.  For the legacy version of YAJL see\n              https://github.com/lloyd/yajl/tree/1.x\n**********************************************************************\n\nWelcome to Yet Another JSON Library (YAJL)\n\n## Why does the world need another C library for parsing JSON?  \n\nGood question.  In a review of current C JSON parsing libraries I was \nunable to find one that satisfies my requirements.  Those are, \n0. written in C\n1. portable\n2. robust -- as close to \"crash proof\" as possible\n3. data representation independent\n4. fast\n5. generates verbose, useful error messages including context of where\n   the error occurs in the input text.\n6. can parse JSON data off a stream, incrementally\n7. simple to use\n8. tiny\n\nNumbers 3, 5, 6, and 7 were particularly hard to find, and were what \ncaused me to ultimately create YAJL.  This document is a tour of some\nof the more important aspects of YAJL.\n\n## YAJL is Free.\n\nPermissive licensing means you can use it in open source and\ncommercial products alike without any fees.  My request beyond the\nlicensing is that if you find bugs drop me a email, or better yet,\nfork and fix.\n\nPorting YAJL should be trivial, the implementation is ANSI C.  If you\nport to new systems I'd love to hear of it and integrate your patches.\n\n## YAJL is data representation independent.\n\nBYODR!  Many JSON libraries impose a structure based data representation\non you.  This is a benefit in some cases and a drawback in others.\nYAJL uses callbacks to remain agnostic of the in-memory representation.\nSo if you wish to build up an in-memory representation, you may do so\nusing YAJL, but you must bring the code that defines and populates the\nin memory structure.\n\nThis also means that YAJL can be used by other (higher level) JSON\nlibraries if so desired.\n\n## YAJL supports stream parsing\n\nThis means you do not need to hold the whole JSON representation in\ntextual form in memory.  This makes YAJL ideal for filtering projects,\nwhere you're converting YAJL from one form to another (i.e. XML).  The\nincluded JSON pretty printer is an example of such a filter program.\n\n## YAJL is fast\n\nMinimal memory copying is performed.  YAJL, when possible, returns\npointers into the client provided text (i.e. for strings that have no\nembedded escape chars, hopefully the common case).  I've put a lot of\neffort into profiling and tuning performance, but I have ignored a\ncouple possible performance improvements to keep the interface clean,\nsmall, and flexible.  My hope is that YAJL will perform comparably to\nthe fastest JSON parser out there.\n\nYAJL should impose both minimal CPU and memory requirements on your\napplication.\n\n## YAJL is tiny.\n\nFat free.  No whip.\n\nenjoy,\nLloyd - July, 2007 \n"
        },
        {
          "name": "TODO",
          "type": "blob",
          "size": 0.32421875,
          "content": "* add a test for 0x1F bug\n* numeric overflow in integers and double\n* line and char offsets in the lexer and in error messages\n* testing:\n  a. the permuter\n  b. some performance comparison against json_checker.\n* investigate pull instead of push parsing\n* Handle memory allocation failures gracefully\n* cygwin/msys support on win32\n"
        },
        {
          "name": "YAJLDoc.cmake",
          "type": "blob",
          "size": 0.826171875,
          "content": "FIND_PROGRAM(doxygenPath doxygen)\n\nIF (doxygenPath)\n  SET (YAJL_VERSION ${YAJL_MAJOR}.${YAJL_MINOR}.${YAJL_MICRO})\n  SET(yajlDirName yajl-${YAJL_VERSION})\n  SET(docPath\n      \"${CMAKE_CURRENT_BINARY_DIR}/${yajlDirName}/share/doc/${yajlDirName}\")\n  MESSAGE(\"** using doxygen at: ${doxygenPath}\")\n  MESSAGE(\"** documentation output to: ${docPath}\")\n\n  CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/src/YAJL.dxy\n                 ${CMAKE_CURRENT_BINARY_DIR}/YAJL.dxy @ONLY)\n\n  FILE(MAKE_DIRECTORY \"${docPath}\")\n\n  ADD_CUSTOM_TARGET(doc\n                    ${doxygenPath} YAJL.dxy   \n                    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})\n\nELSE (doxygenPath)\n  MESSAGE(\"!! doxygen not found, not generating documentation\")     \n  ADD_CUSTOM_TARGET(\n    doc\n    echo doxygen not installed, not generating documentation\n  )\nENDIF (doxygenPath)\n"
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 2.076171875,
          "content": "#!/bin/sh\n#\n# Copyright (c) 2007-2014, Lloyd Hilaiel <me@lloyd.io>\n#\n# Permission to use, copy, modify, and/or distribute this software for any\n# purpose with or without fee is hereby granted, provided that the above\n# copyright notice and this permission notice appear in all copies.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nprefix=\"/usr/local\"\nusage=\"Usage: configure [options]\n    -p, --prefix PATH                Set installation prefix\n    -h, --help                       Output usage summary\"\nif [ \"$1\" = \"-h\" ] || [ \"$1\" = \"--help\" ]\nthen\n    echo \"$usage\"\n    exit 0\nfi\nif [ \"$1\" = \"-p\" ] || [ \"$1\" = \"--prefix\" ]\nthen\n    if [ \"$#\" != 2 ]; then\n        echo \"$usage\"\n        exit 1\n    fi\n    prefix=\"$2\"\nfi\n\necho \"== removing old build files\"\nrm -rf build\nrm -f Makefile\necho \"== running CMake in build directory\"\nmkdir build || exit 1\ncd build || exit 1\ncmake -DCMAKE_INSTALL_PREFIX=\"$prefix\" .. ||\n{\n    echo \"The \\\"cmake\\\" program is required to configure yajl.\"\n    echo \"It's available from most ports/packaging systems and http://cmake.org\"\n    exit 1\n}\ncd ..\n\necho \"== Generating Makefile\"\ncat > ./Makefile <<EOS\n.PHONY: all clean distclean install package test distro\nall: distro doc test test-api\n\ndistro:\n\t@cd build && make\n\ndoc:\n\t@cd build && make doc\n\ntest:\n\t@cd build && make test\n\ntest-api:\n\t@cd build && make test-api\n\nclean:\n\t@cd build && make clean\n\ndistclean:\n\t@rm -rf Makefile build\n\t@rm -f yajl-*.tgz\n\ninstall: distro doc\n\t@cd build && make install\n\npackage: all\n\t@echo \\\"compressing to $(basename build/yajl-*).tgz\\\"\n\t@cd build && tar czf ../$(basename yajl-*).tgz yajl-*\nEOS\n\necho \"== Configured with installation prefix: $prefix\"\n"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "perf",
          "type": "tree",
          "content": null
        },
        {
          "name": "reformatter",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "verify",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}