{
  "metadata": {
    "timestamp": 1736709897581,
    "page": 396,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "hanslub42/rlwrap",
      "stars": 2660,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.291015625,
          "content": "Makefile\nMakefile.in\naclocal.m4\nautom4te.cache/\nconfig.h\nconfig.h.in\nconfig.log\nconfig.status\nconfigure\ndoc/Makefile\ndoc/Makefile.in\ndoc/rlwrap.1\ndoc/rlwrap.man\nfilters/Makefile\nfilters/Makefile.in\nsrc/*.o\nsrc/.deps/\nsrc/Makefile\nsrc/Makefile.in\nsrc/rlwrap\nstamp-h1\ntools/\nfilters/RlwrapFilter.3pm\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.958984375,
          "content": "Chet Ramey <chet at po.cwru.edu>: author of the amazing readline \nlibrary, around which rlwrap is but a thin wrapper.\n\nHans Lub hanslub42@gmail.com: most of the rlwrap code, except for:\n\n- ptytty.c, wich was taken practically unchanged from rxvt\n  (currently maintained by Geoff C. Wing  <gcw@rxvt.org>),\n  together with the corresponding part of configure.ac\n\n- completion.c which contains the redblack tree implementation written\n  by Damian Ivereigh (with contributions by  Ben Woodard, Eric S. Raymond\n  and Matthias Andree)\n\nJon Olsson (jon at vexed.se) contributed patches to weed out unsafe\nstrcat and strcpy calls\n\nHisanobu Okuda ported the RlwrapFilter.pm perl module (and a number\nof example filters) to python, and contributed a new way of handling \nmulti-part filter messages.\n\nRobert Kroeger contributed code to keep track of the rlwrapped command's\nworking directory under OS X\n\nYuri d'Elia contributed the code for the rlwrap-direct-keypress\nbindable readline command"
        },
        {
          "name": "BUGS",
          "type": "blob",
          "size": 2.2978515625,
          "content": "Whenever you suspect a bug, if possible, please reconfigure with\n./configure --enable-debug and run rlwrap with a -d7 option. This will\ncreate a file /tmp/rlwrap.debug that will help you (or me) find the\nproblem.\n\nMany (most) bug reports, especially the really weird ones, stem from\n\"version skew\" on distributions (RedHat, Debian) that have separate\ndevelopment packages (e.g. readline and readline-dev). For some reason\nit can happen that the devel package is out of sync with the main\npackage, and then really strange things may happen. So: always update your \n{readline, ncurses}-devel packages before you complain to me!\n\n\n* Gotcha's\n\nIf rlwrap doesn't seem to do anything, chances are that the rlwrapped\nprogram already does its own line editing. Using the -a (--always-readline)\noption will make rlwrap use its own line editor.\n\nIf such programs do their own completion, it will be unusable under rlwrap\n\n\n* General inadequacy and weak spots\n\n\nThe more sophisticated the terminal handling of rlwrapped program (the\n\"client\") gets, the less rlwrap will be able to maintain its\ntransparency.  Of course, more sophisticated programs generally have\nless need for rlwrap.\n\n---\n\nrlwrap cannot handle prompts that contain control characters (except\nANSI colour), though you may not notice this until your cursor almost\nreaches end-of-line\n\n\n---\n\nolder QNX: If 'configure' complains \"Oops! Your 'rm' program seems unable to run\nwithout file operands specified\", export\nACCEPT_INFERIOR_RM_PROGRAM=yes before running 'configure'\n\n---\n\nThe -m option uses the system() (3) library function to call an\nexternal editor. I'm not quite sure how system() handles signals like\nTSTP an WINCH (and \"system\" is a difficult name to Google for...)\nRe-sizing the terminal may confuse the editor\n\n--\n\nThe code that determines whether a cooked prompt should be overwritten\n(when it turns out to not have been a prompt) is needlessly complex\nand not quite correct (e.g. substitute prompts may be left standing\nwhen they should be erased). \n\n--\n\nreadline < 8.2 doesn't account for the fact that rl_deprep_terminal()\noutputs a \"\\r\"   when enable-bracketed-paste is on.\nrlwrap < 0.46.1 compensated for that, but will therefore mis-print\naccepted user input when compiled with readline-8.2\nrlwrap-0.46.1 now *disables* bracketed paste when compiled with readline 8.1\nor earlier"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 17.5703125,
          "content": "\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.\n     59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Library General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\f\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\f\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\f\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\f\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\f\n\t    How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year  name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Library General\nPublic License instead of this License.\n"
        },
        {
          "name": "ChangeLog",
          "type": "blob",
          "size": 0.1025390625,
          "content": "rlwrap doesn't have a proper changelog (yet), look in NEWS to see what\nhas been changed in which version\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 4.0400390625,
          "content": "PREREQUISITES\n\nTo build rlwrap, you'll need an ANSI C compiler (gcc will certainly\ndo) and GNU readline 4.2 or later. rlwrap should compile on most\nunices and unix-like environments like linux, the BSDs, OS/X, solaris,\nHP/UX, QNX, AIX and cygwin (special thanks to PolarHome for their\n\"dinosaur zoo\" of ageing Unix systems!)\n\n\nINSTALLATION\n\nFirst, unzip the tarball or clone the git repository (git clone\nhttps://github.com/hanslub42/rlwrap.git). Then go to the rlwrap\ndirectory, and:\n\nautoreconf --install # only needed if there is no ./configure script\n\nthen:\n\n./configure\nmake\nsudo make install\n\n\nCONFIGURATION OPTIONS\n\nconfigure can be called with a number of options (e.g. if you want to\ninstall rlwrap in a non-standard place). Do\n\n./configure --help\n\nto see them all. Most of them are not specific to rlwrap, except the\nfollowing:\n\n--enable-spy-on-readline (default: YES) If we want to keep the display\n  tidy when re-sizing the terminal window or printing multi-line\n  prompts, we have to know whether or not readline is in\n  horizontal-scroll-mode (i.e. wheter long lines are scrolled or\n  wrapped). At present, this involves a look at a private readline\n  variable - if you feel guilty about that, disable this option.\n\n--enable-homegrown-redisplay (default: NO): some people report ddouble\n  echoing of user input. Enabling this option will cure the problem -\n  though the display will then flicker over slow connections\n  (cf. BUGS)\n\n--enable-debug: (default: NO) Adds a --debug option to rlwrap's\n  repertoire. This will make rlwrap write debug information to a file\n  /tmp/rlwrap.debug (cf. the output of rlwrap --help for more info)\n\n--enable-proc-mountpoint (default: /proc) mountpoint for Linux-style\n  procfs, used for determination of slave command's working directory.\n\n--enable-multibyte-aware (default: YES) Prevent rlwrap from seeing\n  multibyte characters as multiple  characters. \n\n\nUNINSTALLATION\n\nTo uninstall, do 'make uninstall'\n\nINSTALLING AS NON-ROOT\n\nIf you want to install rlwrap as non-root, you should call configure with\nthe --prefix option, like:\n\n./configure --prefix=$HOME\n\nafter which 'make install' will install rlwrap in $HOME/bin\n\nYou may have to install GNU readline (e.g using ./configure\n--prefix=$HOME in the readline source directory)\n\nrlwrap's configure script will not find this installation automatically, but\n\n./configure --prefix=$HOME CFLAGS=-I$HOME/include CPPFLAGS=-I$HOME/include LDFLAGS=-L$HOME/lib\n\nshould work. You can add '-static' to LDFLAGS if you want to build a statically linked rlwrap, \nlike so:\n\n./configure --prefix=$HOME CFLAGS=-I$HOME/include CPPFLAGS=-I$HOME/include LDFLAGS=-L$HOME/lib' -static'\n\n\n\nBUILD PROBLEMS\n\nIf configure complains about missing Xyz (where Xyz can be ncurses, or\nreadline) and you are sure that Xyz is installed on your system,\nconsider installing Xyz-devel\n\ncompletion.c is made from completion.rb by the program rbgen\n(https://github.com/hanslub42/libredblack), but both files are included in\nthe tarball and the repository; rbgen is only needed when you want to change\ncompletion.c. Sometimes, however, after a 'git pull', make will try to\nrecompile completion.rb and complain about not finding rbgen. A fresh\nclone, or simply 'touch completion.c' will solve this.\n\nIf the configure script is not found, you can recreate it, and all of\nthe other files it needs, by:\n\naclocal\nautoconf\nautoheader\nautomake --add-missing\n\nor, even shorter:\n\nautoreconf --install\n\nOn recent OS X sytems, libreadline is not the real thing, but a\nnon-GNU replacement. If the linker complains about missing\nsymbols, install GNU readline and try again (or, better, use\na tool like brew)\n\nEven though rlwrap now uses the excellent pseudo-terminal (pty)\nhandling code from rxvt, portable programming with ptys is something\nof a black art. The configure script tries to guess how ptys have to\nbe created and handled on your system, but it may guess wrong. To\nquote rxvt's configure script: \"if we don't guess right then it's up\nto the user\", which means that you have to manually edit config.h, and\nsave a copy of it somewhere, as configure will re-create config.h\n\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 2.0732421875,
          "content": "## Process this file with automake to produce Makefile.in\n\n\n\nEXTRA_DIST = BUGS COPYING INSTALL README.md  src/rlwrap.h src/redblack.h src/malloc_debug.h\\\n             src/completion.rb doc/rlwrap.man.in test/testclient test/testit\\\n             completions/testclient completions/coqtop\\\n             filters/README filters/RlwrapFilter.pm filters/RlwrapFilter.3pm filters/count_in_prompt filters/pipeto\\\n             filters/logger filters/null filters/unbackspace filters/pipeline filters/ftp_filter filters/handle_hotkeys filters/history_format\\\n             filters/simple_macro filters/template filters/scrub_prompt filters/paint_prompt filters/censor_passwords filters/listing\\\n             filters/paint_prompt.py filters/handle_hotkeys.py filters/logger.py filters/pipeto.py\\\n             filters/rlwrapfilter.py filters/null.py filters/censor_passwords.py filters/edit_history\\\n             filters/count_in_prompt.py filters/ftp_filter.py  filters/debug_null filters/handle_sigwinch filters/outfilter\\\n             filters/makefilter filters/dissect_prompt\n\n\n\nTESTS      = test/testit\nSUBDIRS    = doc src filters\n\nnobase_pkgdata_DATA  = completions/testclient completions/coqtop\\\n\t\t       filters/README filters/RlwrapFilter.pm filters/RlwrapFilter.3pm filters/count_in_prompt filters/pipeto\\\n                       filters/logger filters/null filters/unbackspace filters/pipeline filters/ftp_filter filters/handle_hotkeys filters/history_format\\\n                       filters/simple_macro filters/template filters/scrub_prompt filters/paint_prompt filters/censor_passwords filters/listing\\\n                       filters/paint_prompt.py filters/handle_hotkeys.py filters/logger.py filters/pipeto.py\\\n                       filters/rlwrapfilter.py filters/null.py filters/censor_passwords.py filters/edit_history\\\n                       filters/count_in_prompt.py filters/ftp_filter.py  filters/debug_null filters/handle_sigwinch filters/outfilter\\\n                       filters/makefilter filters/dissect_prompt\n\n\n\nclean-local: \n\trm -f *~ \n\n\ninstall-data-hook:\n\tchmod a+x $(DESTDIR)$(pkgdatadir)/filters/* \n \n"
        },
        {
          "name": "NEWS",
          "type": "blob",
          "size": 25.55078125,
          "content": "0.46.1  when compiled with readline-8.2, correctly handle echo'ed user\n      input when accepting a line. This will disable\n      bracketed-paste when compiled with readline-8.1 or earlier.\n\n0.46  rlwrapfilter.py would not find collections.Callable on\n      newer (>= 3.10) python\n\n      rlwrapfilter.py would choke on rlwrap version strings\n      (like 0.45.2) that cannot be converted by float()\n\n      rlwrap could segfault or garble prompts if they contain\n      a carriage return\n\n      configure.ac would complain about obsolete macros with\n      newest autoconf\n\n      Bind TAB to self-insert if no completions are specified on\n      the rlwrap command line \n\n\n0.45.2  rlwrap enables bracketed-paste when instructed to do so by\n      .inputrc, but would then never disable it at exit.\n\n      rlwrap -z (i.e. rlwrap when using a filter) would still open\n      /tmp/rlwrap.debug after forking the filter command, preventing\n      other users from running it afterwards\n\n      \n0.45.1 rlwrap would always open /tmp/rlwrap.debug after forking child\n      command, preventing other users from running it.\n\n      Fix args to setitimer() call to prevent EINVAL error on return\n\n      advise about --always-readline if in direct mode at first user\n      ENTER keystroke\n\n      check for I_SWROPT even if isastream() is present (compile would\n      fail on Oracle linux)\n\n\n0.45  rlwrap correctly handles bracketed paste\n\n      --only-cook '!<regexp>' enables \"confident mode\" where every\n      possible prompt that matches a regexp is cooked immediately\n      (so that even prompts that get printed when handling a large\n      paste are cooked)\n\n      --ansi-colour-aware (-A) didn't do anything at all. Now it\n      recognises colour codes as well as common control codes like\n      window titles.  --ansi-colour-aware=\"!\" will \"bleach\" the\n      prompt, i.e. remove all colour codes\n\n      --no-children (-N) now enables direct mode whenever the client\n      switches to the alternate screen. This makes editors and pagers\n      usable even when using --always-readline on non-linux systems\n      \n      when run inside an emacs shell buffer, rlwrap will execute the\n      client instead of wrapping it (just as when stdin is not a\n      terminal)\n\n      --always-echo echoes user input even when the client has\n      switched off ECHO.\n\n      filter \"makefilter\" to easily employ shell commands (like sed,\n      or grep) as rlwrap filters (extending/superseding \"outfilter\")\n\n      filters can change (some) bindable and internal readline\n      variables with a new RlwrapFilter method tweak_readline_oob()\n\n      On AIX, rlwrap would quit if client wrote 0 bytes\n      \n      a round of testing on Polarhome to weed out some\n      incompatibilities with older Unix systems\n\n0.44  rlwrap doesn't (yet) work with bracketed-paste. As this is\n      enabled by default from readline-8.1 onwards, rlwrap disables\n      it, even if specified in .inputrc. A multi-line paste will\n      therefore (still) behave as multiple 1-line pastes\n\n      rlwrap is aware of multi-byte characters and correctly\n      handles prompts (or things that look like prompts, e.g.\n      progress indicators) that contain them, according to your\n      locale.\n      \n      rlwrap filters can also filter signals (see\n      RlwrapFilter(3pm)), changing them, or providing extra input to\n      the rlwrapped command.\n\n      Key *sequences* can be bound to rlwrap-direct-keypress\n      (using a new readline command rlwrap-direct-prefix) (contributed\n      by Yuri d'Elia)\n\n      configure will correctly identify whether --mirror-arguments\n      will work, even on 1-processor systems\n\n      the handle_hotkey filter has a handler definition that enables\n      fuzzy history search using fzf\n\n      binding accept-line to a key would make that key mess up the\n      display\n\n      The debug log is more readable (e.g. by marking debug lines\n      with \"parent\", \"child\" or \"filter\")\n\n0.43  Added Hisanobu Okuda's rlwrapfilter.py python3 module\n      and example filters. Filters can now be written in python\n      as well as perl.\n\n      If a filter was used, rlwrap would pass all input, output,\n      history items, prompts, ... through the filter, even if it\n      wouldn't change them. Now, at startup, filters (even filter\n      pipelines) tell rlwrap which messages they handle, after which\n      rlwrap won't bother them with anything else.\n\n      Added bindable readline command rlwrap-direct-keypress\n      that bypasses readline editing and sends its keypress directly\n      to the rlwrapped command (like CTRL-G for the Erlang shell)\n      \n      Added bindable readline command rlwrap-hotkey that passes\n      the current input buffer and history to the filter (or\n      filter pipeline) specified with the '-z' option. This can\n      be used e.g. to insert the current selection at the cursor\n      position, or to edit (re-write) the history.\n\n       This uncovered quite a few bugs and inconsistencies:\n         - My ncurses' termcap emulation misses some codes (like\n           term_cursor_hpos) that its terminfo has. rlwrap now\n           always searches terminfo before termcap.\n         - rlwrap was confused about the role of history_offset,\n           resulting in muddled and unclear (although correct) code.\n         - rlwrap --history-size -0 would clobber the history file\n           (as per the manual - that has been updated as well)\n         - rlwrap's ad hoc way of sending lists of strings to filters\n           by interspersing them with TABS or spaces is becoming\n           unwieldy, it has been replaced by a standard encoding\n           <length1><string1><length2><string2>.... (where the\n           <lengths> are fixed length hexadecimal numbers (this is a\n           contribution by Hisanobu Okuda)\n      \n      Playing back a readline macro consisting of more than one line\n      would crash with SIGSEGV\n\n      rlwrap with negative --histsize would fail when there is no\n      history file yet.\n\n      An empty prompt would make $filter->{cumulative_output} miss\n      its last line \n\n      Pre-given (-P) input would only be put in input line after\n      cooking timeout (usually 40 msec)\n\n      One-shot (-o) rlwrap could accept more than one line when input\n      in quick succession.\n\n      rlwrap didn't delete the tempfiles used in a multi-line\n      edit\n\n      configure.ac now works even when cross-compiling (skipping some\n      tests, but providing sensible defaults)\n\n      --enable-pedantic-ansi is a new configure option separate from\n      --enable-debug (it used to be implied by --enable-debug)\n\n      --complete-filenames (-c) will now work on OS X and FreeBSD as well\n\n0.42  Added --mirror-arguments (-U) option \n\n      On SunOS tcgetattr(slave pty) failed with \"Invalid argument\" \n\n      If the completion list contained two words, one of which a\n      prefix of the other (e.g. \"sea\" and \"seagull\") the shorter one would\n      be skipped when displaying a list of completions\n\n      reading completion files (with the -f option, or from\n      $RLWRAP_HOME/<command>_completions) could fail with an incorrect\n      ENOENT (\"No such file or directory\")\n\n      rlwrap -z listing wouldn't list filters\n      \n      When both master and slave pty are unfit for sensing slave\n      commands terminal settings, rlwrap now bails out with an error\n      \"cannot determine terminal mode of slave command\"\n\n\n0.41  Slightly late SIGCHLD could cause an I/O error on master pty\n\n      Added -W (-polling) option to poll slave pty for changes in its \n      interrupt character and ISIG flag.\n\n      if $TERM is not found in termcap/terminfo database, use vt100\n\n0.40  configure will now find tgetent() in libtinfo \n\n      compiling with gcc -O2 made rlwrap hang after CTRL-D on empty line\n      \n      HP-UX 11 has weird tgetent() return values, confusing rlwrap \n\n      On Solaris, rlwrap would sometimes fail with \"TIOCSWINSZ failed on \n      slave pty\"\n   \n      Single quote ' is now word-breaking by default \n\n      multi-line edit would mangle upper ASCII and UTF-8 (and still does \n      that to UTF16 :( ) \n\n      added --extra-char-after-completion and -multi-line-ext options\n\n      rlwrap now recognises the 'rmcup' and 'rmkx' character sequences used by \n      programs that use an alternate screen (like editors and pagers) to return \n      from it.\n      \n      configure will now correctly determine pty type on SCO OpenServer\n\n      rlwrap --no-children would leak file descriptors to /proc/<command_pid>/wchan\n      \n      non-ASCII characters in multi-line input are no longer replaced\n      by spaces after calling an external editor\n  \n      running rlwrap within emacs would crash (division by zero). \n      rlwrap now bails out whenever terminal width == 0\n\n      added --enable-proc-mountpoint config option to use alternate linux-like \n      proc filesystems (like in FreeBSD) for finding <command>s working dir (-c option)\n      and kernel function in which <command> is sleeping (-N option)\n\n      added prototype for copy_without_ignore_markers, fixing a segfault on NetBSD/amd64\n      \n      commands final output before dying was lost on FreeBSD\n\n      Filters now get complete echo lines even if the echo comes back in chunks\n\n\n0.37  Commands that emit \"status lines\" using backspaces and carriage \n      returns could confuse rlwrap\n\n      removed test program kaboom.c that triggered an internal\n      gcc error on armel platforms.\n\n      rlwrap uses C strings internally, and thus cannot cope with\n      command output that contains zero bytes (padding). It used to\n      replace these with spaces, now the zero bytes are removed.\n\n      if the RLWRAP_HOME is set, but $RLWRAP_HOME doesn't exist, rlwrap\n      will create it\n\n      typo: SIGERR instead of SIG_ERR in signals.c\n      \n0.36  Entering a line from vi command mode would echo the input twice \n\n      Output from very busy commands would not always be printed on time\n\n      When rlwrap kills itself after a command crash it will not dump \n      core, in order to avoid clobbering command's much more interesting \n      core dump.\n\n      Premature filter death is now reported properly (it used to only \n      say: \"EOF reading from filter\" or \"Broken pipe writing to filter\") \n\n0.35  config.{guess,sub} have been updated to version 2009-12-13\n      \n      Corrected array bounds error in my_putstr(\"\") (which could make\n      rlwrap write an extra newline when exiting, but might even crash\n      on some systems)\n\n      Many small improvements and fixes for multi-line input: \n\n        Multi-line inputs are now written to the inferior command one\n        line at a time, so that command's response (e.g. a continuation\n        prompt) can be interleaved with the echo'ed (multi-line) input.\n      \n        Calling an external editor will no longer obliterate the prompt,\n        and line/column positions are now correct.\n\n        After a multi-line edit in vi-mode, the cursor will no longer\n        end up one line too high.\n      \n      CTRL-D on an empty line was handed directly to command, but also \n      (erroneously) put in readline's input buffer\n\n      Many small fixes and improvements in signal handling: \n        \n         SIGSEGV, and other \"error\" signals like SIGFPE, are now unblocked\n         all of the time, so that rlwrap can always clean up after a crash.\n\n         Since version 0.25 rlrwap's transparency extends to signals: if\n         the inferior command segfaults, rlwrap will kill itself with a\n         SIGSEGV. In order to get the bug reports where they belong,\n         rlwrap now reports explicitly that it has not crashed itself.\n\n         rlwrap's call to sigaction forgot to set the signal mask (!)\n\n         Continuing after CTRL-Z on QNX now wakes up command  \n\n      Added --one-shot (-o) and --only-cook (-O) options\n\n      debug log is now in a format that works well with emacs' grep-mode\n    \n      rlwrap's bindable readline function names (like rlwrap-call-editor) are\n      now in hyphen-style instead of underscore_style (use of the \n      old_style_names will now be flagged as an error)\n\n      Filters can now prevent a prompt from being cooked by \"rejecting\" it.\n      \n      Rlwrapfilter.pm would set $_ incorrectly in echo and output handlers.\n\n      RlwrapFilter.pm manpage is now created by newer (and less buggy) \n      version of pod2man\n\n      Added EXAMPLES section and -t option to rlwrap manpage\n\n0.34  Binding wide (e.g. utf-8) chars in .inputrc now works \n      \n      prefix arguments are now correctly reset (M-5 a b now \n      yields aaaaab instead of aaaaabbbbb)\n      \n\n0.33  rlwrap incorrectly fed terminfo-style capnames (\"dl1\") instead of\n      termcap codes (\"dl\") into tgetstr(). On newer Debian systems this\n      exposed a bug where random garbage would be printed by rlwrap\n\n      Hyphens in rlwrap manpage are now all properly escaped\n\n      RlwrapFilter.pm now only re-sets $filter->cumulative_output when an \n      INPUT message is received\n\n\n0.32  Major new feature: filtering. Filters sit between rlwrap and the\n      wrapped command, re-writing command output, input, prompts,\n      history, and completion word lists. \n\n      System-wide filters live in DATADIR/rlwrap/filters (where DATADIR = \n      /usr/local/share by default, installation-dependent) Because of this, \n      completions now live in DATADIR/rlwrap/completions (until now: \n      DATADIR/rlwrap)  \n\n      To make filter writing easy, a perl module RlwrapFilter.pm has\n      been added. It doesn't become part of your perl installation, but lives\n      in DATADIR/rlwrap/filters\n\n      rlwrap didn't properly check errno after reading from inferior pty. \n      This could lead to a spurious \"read error on master pty\"\n\n      Instead of using crusty old signal(), signal handlers are now set\n      by sigaction() without SA_RESTART (BSD semantics) Different\n      syscall-restarting behaviour among systems caused hard-to-trace\n      bugs\n     \n      Now copies inferior pty's c_oflags to stdout before\n      output. (some editors like joe would mess up the screen)\n   \n      prompt handling logic has been streamlined. Coloured prompt handling is \n      reliable now, even for long prompts.\n    \n      At program exit, rlwrap now outputs a newline only when the client \n      didn't.       \n\n      Added -g, -I, -N, -S, -w and -z options\n\n      Removed -F option (and added a filter to replace it)\n\n      -p option now takes colour names (-pYellow)\n\n      rlwrap (and readline) uses C strings internally, which could cause problems\n      with commands that output '\\0' bytes. In direct mode, such\n      characters are left untouched, but in readline mode they are\n      replaced by spaces.\n\n      the tools directory has been updated, so that configure will \n      feel at home even on newer systems\n\n      tested on SunOS, AIX, FreeBSD, HP/UX, QNX (thanks to polarhome.com), as \n      well as cygwin and linux\n\n0.30  rlwrap can now use putenv() on machines that don't have \n      setenv() (like some Solaris systems)\n\n      EOF on stdin (e.g. by pressing CTRL-D) would end prompt colouring.\n\n      added -q option \n\n0.29  added -A option to handle (ANSI-)coloured prompts\n\n      added -p option to colourise uncoloured prompts \n\n      added -t option to set terminal type for client command\n\n      rlwrap now copies its terminal settings from the client\n      even when this has put its terminal in single-keypress\n      (uncooked) mode. A rlwrapped emacs will now respond to CTRL-C \n      and CTRL-G as it should.\n\n      fixed a long-standing bug where long output lines with the -r option \n      would put mutilated words into the completion list. Drawback: \n      prompts are not put into the completion list anymore (bug or feature?).\n           \n      rlwrap now handles output to the client before input from the\n      client, and only handles keyboard input when all client I/O has\n      been handled. This will make rlwrap a little better behaved when\n      handling large chunks of (pasted) input, especially with colourised\n      prompts\n      \n      error messages and warnings now include the rlwrap version number \n      \n      rlwrap now prints a warning when started in vi mode when the \n      terminal is too dumb to support upwards cursor movement\n      \n      added a very simple custom malloc/free debugger for use with the \n      --debug option. Rather fragile and not well tested, use with care.\n\n      Whenever TERM is not set, rlwrap assumes vt100. Set TERM=dumb if\n      you really have a dumb terminal.\n\n      rlwrap now leaves the handling of multi-line prompts and edit\n      buffers to readline (except when in horizontal-scroll mode or when \n      configured with --enable-homegrown-redisplay).  \n\n      whenever --always-readline is set, SIGWINCH not passed to \n      client command immediately, but only *after* accepting a line.\n\n      multi-byte prompts and input no longer confuse rlwrap (provided \n      your readline lib supports multi-byte characters)\n\n      --spy-on-readline now enabled by default\n     \n      the configure script will now find term.h on cygwin\n\n      dropped the assumption that tgetent() and friends are only ever\n      declared in term.h; rlwrap now has proper terminal handling also\n      under SunOS.\n\t\n      the rlwrap source should again be fit for consumption by older\n      (C91 compliant) compilers\n      \n      \n0.28  fixed rlwrap bug that caused termcap problems on Fedora Core 6 \n      (thanks Tung Nguyen)\n\n0.27  when stdin is not a terminal, rlwrap will now exec() the\n      specified command instead of complaining\n\n      when stdout or stderr is not a terminal, rlwrap will re-open\n      it to /dev/tty (the users terminal) after forking off the\n      specified command (so \"rlwrap cat > file\" will work as a \n      quick and dirty line editor)\n\n      rlwrap now remembers inputs of length 1\n\n      -D option to tell rlwrap how agressively it should weed out \n      duplicate history entries \n\n      -H option added (history format string)\n\n      Added temporary fix for termcap weirdness on Fedora Core 6\n\n      new -t option for a quick check of terminal capabilities \n      (requires configuration with --enable-debug)\n\n      rlwrap -s 0 <command> will now zap <commands> history\n\n      fixed broken reporting of unrecognised options\n\n0.26  configure on FreeBSD 6.0 still didn't find libutil\n\n      some files were unnecessarily kept open (thanks Stephan Springl)\n\n      on each platform, rlwrap -h now accurately reflects whether\n      rlwrap can use long options or optional arguments\n\n0.25  rlwrap would print input twice when in vi-mode\n     \n      rlwrap under FreeBSD 6.0 now uses openpty() from libutil (config\n      script fixed)\n\n      -P option added (one-shot rlwrap with pre-given prompt)\n\n      Until now, whem the underlying command was killed by a signal,\n      rlwrap would just exit with exit code 0. Now rlwrap will\n      cleanup, reset its signal handlers and then send the same signal\n      to itself - so that rlwraps parent (usually a shell) doesn't see \n      the difference with an un-rlwrapped command\n\n0.24  rlwrap -r would mess up commands output (strtok() strikes again!)         \n \n      -i option added to make completion case-insensitive    \n\n      -m option added in order to handle multi-line input \n      \n      rlwrap now writes to underlying command using non-blocking writes \n      and select(). This prevents deadlocks which could occur with very \n      large inputs.\n\n      corrected some manpage clumsiness \n\n0.23  Completion word lists are now kept in red-black trees \n      (cf. http://libredblack.sourceforge.net/), dramatically speeding up \n      startup with large completion lists.\n     \n      rlwrap copies terminal settings from client, so that wrapping \n      programs that manipulate their terminal (like emacs and vim) \n      should be transparent.\n\n      rlwrap -C1 <command_without_arguments> is now accepted\n      \n0.22  Added key binding to enter a line while keeping it out of the \n      history list (Control+O by default)\n\n0.21  Added --history-filename option.\n\n      Negative history size now means: don't write or truncate history \n      \n      Updated helper scripts (like config.sub) in ./tools\n\n      multiple -f options again work correctly\n\n      --enable-homegrown-redisplay configuration option added \n      (kludge to circumvent display problems like sometimes \n      reported on Solaris)      \n      \n      All unsafe string handling functions (strcpy, sprintf,..) replaced \n      by their safe equivalents - using strlcat and consorts when available.\n\n      --enable-spy-on-readline configuration option to keep display tidy \n      when resizing terminal\n\n0.19  Fixed pty type finding code in configure.ac (newer FreeBSD's \n      were recognised as cygwin)\n\n      Helper scripts moved to separate ./tools directory\n\n0.18  rlwrap could hang when trying to run a non-existent command.\n\n0.17  EOF on stdin would send rlwrap into infinite loop.\n\n      Small bugfixes in testclient, which now works with perl 5.8 and\n      cygwin.\n\n0.16  ptys can be found and correctly opend on many more systems\n      (thanks to code taken from rxvt).\n      \n      Makefiles now generated by automake.\n\n      Much beter debugging, -d option now takes optional bitmask\n      to report only certain events.\n\n      System-wide completion files now in $datadir/rlwrap \n      (normally /usr/local/share/rlwrap).\n\n      -C and -n options added, -a option can take an argument (to \n      prevent password logging when using this option).\n\n      assert() macro used for run-time consistency checks.\n\n      CTRL-D on empty line now sends EOF to client even on SunOS.\n \n      manpage displays correctly even when using troff instead of groff.\n\n      Long options now in --dash-style instead of --underscore_style.\n\n0.15  Fixed a bug where rlwrap would segfault with -f option.\n\n0.14  Fixed a few portability problems.\n\n0.13  Duplicate history entries are avoided at all times, even across \n      invocations.\n\n      Tries to chdir into the slave command's working directory before\n      attempting filename completion (only on OS'es where this is found \n      under /proc/<pid>/cwd, like linux and SunOS).\n\n      Now honours 'set horizontal-scroll-mode off' in .inputrc.\n\n      Slave pty is never closed in parent (even after slave's death), \n      preventing long timeouts in OSes with streams-based pty IO.\n \n      Lots of small fixes to adapt to gcc 3.x's more finicky behaviour\n      (e.g. avoiding multi-line strings, not automaticaly including system \n      includes in Makefile.in). \n  \n      configure rewrites manpage to reflect rlwraps capabilities on each \n      platform.\n\n      history searching with CTRL-R (backwards-search-history) now works,\n      !-completion is cleaned up (could even segfault in previous versions).\n\n      SIGSEGV is now caught in order to reset terminal.\n\n0.12  When slave pty's ECHO flag is unset (e.g. when entering a password)\n      rlwrap now displays asterisks for every input character like this: \n      Password: ******\n\n      Better handling of very long prompts, or very narrow terminal windows.\n      If the prompt is wider than the current terminal, rlwrap assumes\n      that it has wrapped around and uses the last (wrapped) line of \n      it as the new prompt.\n\n      Slave pty is opened (and remains open) in parent, allowing slave side \n      to be monitored instead of master.\n\n      testclient (a perl script) has been added, uncovering quite a few \n      embarassing bugs.\n\n      system-wide completion word lists (in $sysconfdir/rlwrap) can be used.\n      \n\n0.11  If the tcgetattr() call to determine the pty's echo mode fails at\n      startup, rlwrap now sleeps for 1 second before trying again\n      once. (on FreeBSD, the first call will normally fail, but (most of \n      the time) not the second, due to a race condition that  \n      ought to be fixed by some form of synchronisation between parent \n      and child)\n\n      --libdir and --includedir for configure now work, as well as \n      LDFLAGS=xxxx ./configure. \n\n      Filename completion now works again (when -c option is set).\n\n      User input is now echoed correctly when the pty's echo mode cannot be \n      determined (in that case a warning is printed at startup that\n      passwords will be saved in the history file).\n      \n\n0.10: logging (-l option) implemented.\n\t\n      history_filename and completion_filename now live on the heap\n      instead of in fixed-length buffers.\n\n0.07: Readline mode is entered (by registering callback) with the \n      first keypress of a new line, not before. All command output before  that\n      will just be written to stdout unchanged (long lines could become garbled\n      in 0.06 and earlier).\n      \n      Signal handling (esp. SIGTSTP and SIGWINCH) is much improved.\n\n      The -a option forces rlwrap to use readline, which is useful if you\n      want to rlwrap a command that already uses readline.\n   \n      <TAB> is now bound to menu-complete by default: it will cylce through all\n      possible completions, instead of listing them all, as in 0.06.\n\n0.06: Transparent mode (immediately handing down keypresses) is now \n      automatic whenever the pty has its ICANON flag unset.\n      \n      readline  version 4.2 is now mandatory.\n\n      Cleanup of code, eliminating many bugs, possibly introducing\n      others (ugh!)\n\n      Application name (used by readline) is now set to command name.\n\n      Duplicate history entries are not remembered.\n\n      Manpage updated: environment variable RLWRAP_HOME is now documented.\n\n0.04: When started in transparent mode, now properly returns to it after \n      each readline edit.\n\n      Senses the pty's ECHO flag. When this is unset, rlwrap doesn't echo\n      user input. Neither is it put in the history list (which would contain \n      passwords etc. otherwise).\n \n0.03: Now uses .<command>_history and .<command>_completions\n      files (by default in $HOME).\n\n0.02: A couple of #ifdefs for portability (tested on BSDI and Digital Unix).\n\n0.01: Initial version.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.7666015625,
          "content": "rlwrap v 0.46 October 2022\n\n## WHAT IT IS:\n\n`rlwrap` is a 'readline wrapper', a small utility that uses the [GNU\nReadline](https://tiswww.case.edu/php/chet/readline/rltop.html)\nlibrary to allow the editing of keyboard input for any command.\n\nI couldn't find anything like it when I needed it, so I wrote this one\nback in 1999.  By now, there are (and, in hindsight, even then there\nwere) a number of good readline wrappers around, like `rlfe`,\ndistributed as part of the GNU readline library, and the amazing\n`socat`.\n\nYou should consider using `rlwrap` especially when you need\nuser-defined completion (by way of completion word lists) and\npersistent history, or if you want to program 'special effects' using\nthe filter mechanism.\n\nAs it is often used with older or even obsolete software, `rlwrap`\nstrives to compile and run on a fairly wide range of not necessarily\nrecent Unix-like systems (FreeBSD, OSX, HP-UX, AIX, Solaris, QNX,\ncygwin, linux and probably quite a few more) This would not have been\nwithout [Polarhome](http://polarhome.com)'s now retired 'dinosaur zoo'\nof ageing Unix systems\n\n## HOW TO USE IT:\n\nIf \n\n    $ <command> <args>\n\ndisplays the infamous `^[[D` when you press a left arrow key, or if\nyou just want decent input history and completion, try:\n\n    $ rlwrap [-options] <command> <args>\n\nYou should not notice any difference compared to directly calling `<command>\n<args>`, except that you now can edit `<command>`'s input and recall\nits entire input history using the arrow keys.\n\n\nInput history is remembered accross invocations, separately for\ndifferent `<command>`s. `CTRL-R` will search the input\nhistory, like in `bash`.  With the `-r` and `-f` options you can specify the list of\nwords which `rlwrap` will use as possible completions, taking them\nfrom a file (`-f` option) or from `<command>`'s past in/output (-r\noption).\n\n`rlwrap` continually monitors `<command>`'s terminal settings, so that\nit can do the right thing when it asks for single keypresses or\nfor a password.\n\nCommands that already use Readline, or a similar library, will always\nask for (and get) single keypresses, so that `rlwrap`ping them doesn't\nhave any noticeable effect. To overcome this, one can use rlwrap with the\n`--always-readline` (`-a`)  option; `rlwrap` will then use its own line\nediting and history. Unforunately, in that case, `rlwrap` cannot\ndetect whether `<command>` asks for a password. This can be remedied\nby giving the password prompt (excluding trailing space and possibly\nthe first few letters) as an argument to the -a option.\n \n## EXAMPLES:\nRun netcat with command-line editing:\n\n    rlwrap nc localhost 80\n\nRun lprolog and use its saved input history and lib.pl to build a\ncompletion word list:\n  \n    rlwrap -f lib.pl -f . lprolog\n\nRun smbclient (which already uses readline), add all input and output\nto the completion list, complete local filenames, avoid showing (and\nstoring) passwords:\n\n    rlwrap -cra -assword: smbclient '\\\\PEANUT\\C' \n\n## INSTALLATION:\nUsually just\n\n    ./configure;\n    make\n    sudo make install\n\nSee the INSTALL file for more information.\n\n## FILTERS\n\nFilters are `perl` or `python` plugins that enable complete (albeit\nsomewhat fragile) control over `rlwrap`'s input and output, echo,\nprompt, history and completion. They aren't used a lot, and remain\ntherefore somewhat untested. `rlwrap -z listing` lists the installed\nfilters, `rlwrap -z <somefilter>` displays a short help text for `<somefilter>`\n\n## AUTHORS\n\nThe GNU Readline library (written by Brian Fox and Chet Ramey) does\nall the hard work behind the scenes, the pty-handling code (written by\nGeoff C. Wing) was taken practically unchanged from rxvt, and\ncompletion word lists are managed by Damian Ivereigh's libredblack\nlibrary. The rest was written by Hans Lub (hanslub42@gmail.com).\n\n## HOMEPAGE\nhttps://github.com/hanslub42/rlwrap\n"
        },
        {
          "name": "completions",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 19.6572265625,
          "content": "dnl  configuration script for rlwrap\ndnl  Process this file with autoconf to produce configure.\ndnl\ndnl  Copyright (C) 2000-2017 Hans Lub hanslub42@gmail.com\ndnl\ndnl  This file is part of rlwrap\ndnl\ndnl  rlwrap is free software; you can redistribute it and/or modify it\ndnl  under the terms of the GNU General Public License as published by\ndnl  the Free Software Foundation; either version 2, or (at your\ndnl  option) any later version.\ndnl\ndnl  rlwrap is distributed in the hope that it will be useful, but\ndnl  WITHOUT ANY WARRANTY; without even the implied warranty of\ndnl  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\ndnl  General Public License for more details.\ndnl\ndnl  You should have received a copy of the GNU General Public License\ndnl  along with GUILE; see the file COPYING.  If not, write to the\ndnl  Free Software Foundation, Inc., 59 Temple Place - Suite 330,\ndnl  Boston, MA 02111-1307, USA.\n\n\n\n\nAC_INIT(rlwrap,0.46.1)\n\nAC_PREREQ(2.69)\n\n\nAC_CONFIG_AUX_DIR(tools)\nAC_CANONICAL_HOST\nAC_CONFIG_SRCDIR(src/main.c)\nAM_INIT_AUTOMAKE([foreign])\n\nAC_PROG_INSTALL\nAC_CONFIG_HEADERS([config.h])\nAC_PROG_MAKE_SET\nAM_SANITY_CHECK\n\n\n# option parsing for optional features\nopt_debug=no\nopt_homegrown_redisplay=no\nopt_spy_on_readline=yes\nopt_multibyte_aware=yes\nopt_proc_mountpoint=/proc\n\nAC_ARG_ENABLE(debug,\n    AS_HELP_STRING([--enable-debug], [enable debugging (default=NO)]),\n    opt_debug=$enableval)\n\nAC_ARG_ENABLE(pedantic-ansi,\n    AS_HELP_STRING([--enable-pedantic-ansi], [compile with -ansi and -pedantic (default=NO)]),\n    opt_pedantic_ansi=$enableval)\n\n\nAC_ARG_ENABLE(homegrown-redisplay,\n    AS_HELP_STRING([--enable-homegrown-redisplay], [try this only if rlwrap messes up the prompt (default=NO)]),\n    opt_homegrown_redisplay=$enableval)\n\n\n\nAC_ARG_ENABLE(multibyte-aware,\n    AS_HELP_STRING([--enable-multibyte-aware], [make rlwrap aware of multibyte characters (default=yes)]),\n    opt_multibyte_aware=$enableval)\n\n\nAC_ARG_ENABLE(spy-on-readline,\n    AS_HELP_STRING([--enable-spy-on-readline], [use private readline variable to keep screen tidy when resizing terminal (default=yes)]),\n    opt_spy_on_readline=$enableval)\n\nAC_ARG_ENABLE(proc-mountpoint,                                                                                                                    \n     AS_HELP_STRING([--enable-proc-mountpoint],                                                                                  \n       [specify mountpoint for Linux-style procfs (used for determination of command's PWD) (default=/proc)]), # '                               \n     opt_proc_mountpoint=$enableval) \n\n\nif test x$opt_debug = xyes ; then\n    AC_DEFINE(DEBUG,1 ,Define to 1 to get debugging info)\n    test -z \"$CFLAGS\" || AC_MSG_WARN([Because CFLAGS is set, configure will not add -g and -Wall to them - do it yourself if necessary])\n    test -z \"$CFLAGS\" && AC_SUBST(CFLAGS,\"-O0 -g -Wall\") # compile for debugging, and  give plenty of warnings\nfi\n\nif test x$opt_pedantic_ansi = xyes ; then\n    AC_SUBST(CFLAGS,\"$CFLAGS -ansi -Wimplicit-function-declaration -Wimplicit -pedantic -Wextra\")\nfi\n\n# wait with defining SPY_ON_READLINE until we know we can use _rl_horizontal_scroll_mode (cf below)\n\n\nAC_USE_SYSTEM_EXTENSIONS\n\ntest x$opt_homegrown_redisplay = xyes && AC_DEFINE(HOMEGROWN_REDISPLAY,1 ,[Define to 1 to use homegrown_redisplay()])\n\ntest x$opt_multibyte_aware  = xyes && AC_DEFINE(MULTIBYTE_AWARE,1 ,Define to 1 to be aware of  wide chars in prompts)\n\nAC_CONFIG_FILES([Makefile filters/Makefile doc/Makefile src/Makefile doc/rlwrap.man]) \n\n# Checks for programs.\n\n\nAC_PROG_CC\nAC_PROG_CPP\n\nAC_PATH_PROG(PERL,perl)\n\nAC_CHECK_PROG(STRIP,strip,strip,true)\n\n# Checks for header files.\nAC_HEADER_SYS_WAIT\nAC_CHECK_HEADERS([errno.h fcntl.h libgen.h libutil.h stdlib.h string.h sched.h sys/file.h sys/ioctl.h sys/wait.h sys/resource.h stddef.h ])\nAC_CHECK_HEADERS([termios.h unistd.h stdint.h time.h sys/time.h getopt.h regex.h curses.h stropts.h termcap.h util.h])\n\nAC_CHECK_HEADERS([ term.h  ncurses/term.h], , ,\n    [#ifdef HAVE_CURSES_H\n     #include <curses.h>\n     #endif])\n\n\nAC_CHECK_DECLS(PROC_PIDVNODEPATHINFO, , , [#include <libproc.h>])\n\nhave_freebsd_libprocstat=yes\nAC_CHECK_DECLS([procstat_open_sysctl, procstat_getprocs, procstat_getfiles, STAILQ_FOREACH] ,[] ,[have_freebsd_libprocstat=no],\n      [#include <sys/param.h>\n       #include <sys/queue.h>\n       #include <sys/socket.h>\n       #include <libprocstat.h>\n       #include <sys/sysctl.h>])\n\nif test x$have_freebsd_libprocstat = xyes ; then\n   AC_DEFINE(HAVE_FREEBSD_LIBPROCSTAT,1 ,[Define to 1 to use FREEBSD libprocstat])\n   PROCSTATLIB='-lprocstat'\nfi\n\n# Found this in configure.ac for 'top':\n# The third argument to tputs is a putc-like function that takes an\n# argument.  On most systems that argument is an int, but on some (you\n# know who you are, Solaris!) it is a char.  Determine which:\n\n_savedwerror_flag=$ac_c_werror_flag \nac_c_werror_flag=yes # make $CC fail after warning\nAC_MSG_CHECKING([argument type of tputs putc function])\nAC_COMPILE_IFELSE( [AC_LANG_PROGRAM(\n             [ #ifdef HAVE_CURSES_H\n               #  include <curses.h>\n               #  ifdef HAVE_TERM_H\n               #    include <term.h>\n               #  else \n               #    ifdef HAVE_NCURSES_TERM_H /* cygwin? AIX? */\n               #      include <ncurses/term.h>\n               #    endif\n               #  endif\n               #else\n               #  ifdef HAVE_TERMCAP_H\n               #     include <termcap.h>\n               #  endif\n               #endif\n               int f(char i) { }],\n             [tputs(\"a\", 1, f);])],\n             [ac_cv_type_tputs_putc=\"char\"],\n             [ac_cv_type_tputs_putc=\"int\"])\nAC_MSG_RESULT($ac_cv_type_tputs_putc)\nAC_DEFINE_UNQUOTED(TPUTS_PUTC_ARGTYPE, $ac_cv_type_tputs_putc,\n                   [Define as the type for the argument to the putc function of tputs ('int' or 'char')])\nac_c_werror_flag=$_savedwerror_flag       \n\n# Checks for typedefs, structures, and compiler characteristics.\nAC_C_CONST\nAC_TYPE_PID_T\n\n\n# Checks for library functions.\nAC_PROG_GCC_TRADITIONAL\n\n# Let groff -Tman know whether we have long options\n\n\n# Up to 0.45, rlwrap would test if getopt() understands option strings like \"a:b::c\" with double colons\n# I now tend to think that that only happens if (POSIX) getopt() is implemented using (GNU) getopt_long(), so this test\n# is actually superfluous. I leave GETOPT_GROKS_OPTIONAL_ARGS alone for the moment, in case some getopt_long() \n# implementation that doesnt grok double colons turns up:\n\n\nAC_CHECK_FUNC([getopt_long],\n  [AC_SUBST(HAVE_LONG_OPTS,[yes])\n   AC_DEFINE(GETOPT_GROKS_OPTIONAL_ARGS, 1, Define if your getopt() correctly understands double colons in the option string)\n   AC_SUBST(HAVE_OPTIONAL_ARGS,yes)],\n  [AC_SUBST(HAVE_LONG_OPTS,[no])]\n   AC_SUBST(HAVE_OPTIONAL_ARGS,no))\n\nAC_CHECK_FUNCS(basename dirname flock getopt_long isastream  mkstemps pselect putenv readlink sched_yield )\nAC_CHECK_FUNCS(setenv setitimer setsid setrlimit sigaction snprintf strlcpy strlcat strnlen system)\n\n# Try to determine the kind of pty support on this system\n# This is not so easy and may guess wrong; if this happens:\n#    - edit config.h by hand (and keep a copy of it somewhere as configure will overwrite it), and \n#    - *please* notify the author! (hanslub42@gmail.com) \n# Most of the code below is taken from rxvt-2.7.10 (Copyright (c) 1999-2001\n# Geoff Wing <gcw@pobox.com>)\n\n# In the newest FreeBSD, we need openpty, which exists in libutil\n# NB: The rxvt configure script warns against this. Why?\n\n\nAC_CHECK_LIB(util, openpty)\nAC_CHECK_FUNCS(openpty getpty grantpt unlockpt)\n\n\n\n# AC_CACHE_CHECK(for getpt, ptyttylib_cv_func_getpt,\n# [AC_TRY_LINK([#define _GNU_SOURCE\n# #ifdef HAVE_STDLIB_H\n# # include <stdlib.h>\n# #endif],\n#   [(void)getpt();],\n#   ptyttylib_cv_func_getpt=yes, ptyttylib_cv_func_getpt=no)])\n\n\n\nAC_CACHE_CHECK(for getpt, ptyttylib_cv_func_getpt,\n[AC_LINK_IFELSE(\n  [AC_LANG_PROGRAM([[\n  #define _GNU_SOURCE\n  #ifdef HAVE_STDLIB_H\n  # include <stdlib.h>\n  #endif\n  ]],\n  [[(void)getpt();]],\n  ptyttylib_cv_func_getpt=yes, ptyttylib_cv_func_getpt=no)])])\n\n\nif test x$ptyttylib_cv_func_getpt = xyes; then\n  AC_DEFINE(HAVE_GETPT, 1, Define if you have _GNU_SOURCE getpt() )\nfi\n\n\nAC_CACHE_CHECK(for pty/tty type, ptyttylib_cv_ptys,\n[if test x$ac_cv_func_openpty = xyes; then\n    ptyttylib_cv_ptys=OPENPTY\n    AC_CHECK_HEADERS([pty.h])    \n else if test x$ac_cv_func__getpty = xyes; then\n    ptyttylib_cv_ptys=SGI4\n else if test -c /dev/ttyp20 -a ! -c /dev/ptmx; then \n   ptyttylib_cv_ptys=SCO\n else if test -c /dev/ptym/clone; then\n    ptyttylib_cv_ptys=HPUX\n else if test x$ptyttylib_cv_func_getpt = xyes; then\n    ptyttylib_cv_ptys=GLIBC\n else if test -c /dev/ptc -a -c /dev/pts; then\n    ptyttylib_cv_ptys=PTC\n else if test -c /dev/ptc -a -d /dev/pts; then\n    ptyttylib_cv_ptys=PTC\n else if test -c /dev/ptmx -a -c /dev/pts/0; then\n    ptyttylib_cv_ptys=STREAMS\n else case \"$host_os\" in\n         *cygwin*) ptyttylib_cv_ptys=STREAMS ;;\n         *)        ptyttylib_cv_ptys=PREHISTORIC ;;\n      esac\nfi\nfi\nfi\nfi\nfi\nfi\nfi\nfi\n])\n\nif test x$ptyttylib_cv_ptys = xOPENPTY; then\n  AC_DEFINE(PTYS_ARE_OPENPTY, 1, Define for this pty type)\nfi\nif test x$ptyttylib_cv_ptys = xSCO; then\n  AC_DEFINE(PTYS_ARE_NUMERIC, 1, Define for this pty type)\nfi\nif test x$ptyttylib_cv_ptys = xSTREAMS; then\n  AC_DEFINE(PTYS_ARE_PTMX, 1, Define for this pty type)\nfi\nif test x$ptyttylib_cv_ptys = xPTC; then\n  AC_DEFINE(PTYS_ARE_PTC, 1, Define for this pty type)\nfi\nif test x$ptyttylib_cv_ptys = xSGI4; then\n  AC_DEFINE(PTYS_ARE__GETPTY, 1, Define for this pty type)\nfi\nif test x$ptyttylib_cv_ptys = xCONVEX; then\n  AC_DEFINE(PTYS_ARE_GETPTY, 1, Define for this pty type)\nfi\nif test x$ptyttylib_cv_ptys = xGLIBC; then\n  AC_DEFINE(PTYS_ARE_GETPT, 1, Define for this pty type)\nfi\nif test x$ptyttylib_cv_ptys = xHPUX; then\n  AC_DEFINE(PTYS_ARE_CLONE, 1, Define for this pty type)\nfi\nif test x$ptyttylib_cv_ptys = xPREHISTORIC -o x$ptyttylib_cv_ptys = xHPUX -o x$ptyttylib_cv_ptys = xGLIBC; then\n  AC_DEFINE(PTYS_ARE_SEARCHED, 1, Define for this pty type)\nfi\n\n\n\n\nAC_MSG_NOTICE(checking for pty ranges)\nptys=`echo /dev/pty??`\npch1=`echo $ptys | tr ' ' '\\012' | sed -e 's/^.*\\(.\\).$/\\1/g' | sort -u | tr -d '\\012'`\npch2=`echo $ptys | tr ' ' '\\012' | sed -e 's/^.*\\(.\\)$/\\1/g' | sort -u | tr -d '\\012'`\nif test x$pch1 != x; then\n  AC_DEFINE_UNQUOTED(PTYCHAR1, \"$pch1\", Define for first char in devptyXX)\nfi\nif test x$pch2 != x; then\n  AC_DEFINE_UNQUOTED(PTYCHAR2, \"$pch2\", Define for second char in devptyXX)\nfi\n\n\n\n# Checks whether readline needs additional libs.\n\n\nAC_CHECK_FUNC(tgetent,\n   [READLINE_SUPPLIB=],\n     [AC_CHECK_LIB(tinfo, tgetent,\n     [READLINE_SUPPLIB=-ltinfo],\n       [AC_CHECK_LIB(curses, tgetent,\n         [READLINE_SUPPLIB=-lcurses],\n         [AC_CHECK_LIB(ncurses, tgetent,\n            [READLINE_SUPPLIB=-lncurses],\n            [AC_CHECK_LIB(termcap, tgetent,\n               [READLINE_SUPPLIB=-ltermcap],\n               [AC_MSG_ERROR(No termcap nor curses library found)])\n            ])\n         ])\n      ])\n   ])\n\n\n\n\nAC_CHECK_LIB(readline,readline,[READLINELIB=-lreadline],\n\tAC_MSG_ERROR([\nYou need the GNU readline library(ftp://ftp.gnu.org/gnu/readline/ ) to build\nthis program!\n]), [$READLINE_SUPPLIB])\n\nLIBS=\"$LIBS $PROCSTATLIB $READLINELIB $READLINE_SUPPLIB\"\n\nAC_CHECK_FUNCS(tigetnum)\n\n\n\nAC_CHECK_HEADER([readline/readline.h],[],AC_MSG_ERROR([readline.h not found - you may need to install a readline development package]))\n\n# AC_EGREP_RL_HEADER_AND_CHECK_FUNC(function_or_variable, [code using function_or_variable],  HAVE_FUNCTION_OR_VARIABLE)\n# This macro looks for <function_or_variable>, both as a declaration in header.h, and as a symbol in $LIBS  \n# ------------------------------------------------------------------------------------------\n\n# @@ Haal hier TRY_LINK uit!\n# AC_DEFUN([AC_EGREP_RL_HEADER_AND_CHECK_FUNC],\n#          [ AC_MSG_CHECKING([whether your readline headers and library know about $1])\n#            AC_EGREP_HEADER($1, [readline/readline.h], in_header=1, in_header=0)\n#            AC_TRY_LINK([ #include <stdio.h>\n#                          #include \"readline/readline.h\" ],\n#                          [$2], in_lib=1, in_lib=0)\n#            if test x$in_lib = x1 -a x$in_header = x1 ; then\n#               AC_DEFINE($3, 1 ,[Define to 1 if your readline lib has $1])\n#               last_check=yes\n#            else\n#               last_check=no\n#            fi\n#            remark=\n#            if test x$in_lib = x0 -a x$in_header = x1 ; then\n#                remark=\" (only in headers, not in lib. Hmmmmm....)\"\n#            fi\n#            AC_MSG_RESULT([$last_check$remark])\n#            ])\n\n\n\nAC_DEFUN([AC_EGREP_RL_HEADER_AND_CHECK_FUNC],\n         [ AC_MSG_CHECKING([whether your readline headers and library know about $1])\n           AC_EGREP_HEADER($1, [readline/readline.h], in_header=1, in_header=0)\n\n           AC_LINK_IFELSE(\n              [AC_LANG_PROGRAM([[ #include <stdio.h>\n                                  #include \"readline/readline.h\"\n                               ]], [[$2]])], in_lib=1, in_lib=0)\n           if test x$in_lib = x1 -a x$in_header = x1 ; then\n              AC_DEFINE($3, 1 ,[Define to 1 if your readline lib has $1])\n              last_check=yes\n           else\n              last_check=no\n           fi\n           remark=\n           if test x$in_lib = x0 -a x$in_header = x1 ; then\n               remark=\" (only in headers, not in lib. Hmmmmm....)\"\n           fi\n           AC_MSG_RESULT([$last_check$remark])\n           ])\n\n\nAC_DEFUN([AC_MY_ERROR],\n[AC_MSG_ERROR([\n           \n********************************************************************************\n$1\n********************************************************************************\n])])\n\nAC_EGREP_RL_HEADER_AND_CHECK_FUNC([rl_set_screen_size], [rl_set_screen_size(25,80)], [HAVE_RL_SET_SCREEN_SIZE])\n\ntest $last_check = no && AC_MY_ERROR([You need a more recent version (at least 4.2) of the readline\nlibrary (ftp://ftp.gnu.org/gnu/readline/) to build this program!])\n\n\nAC_EGREP_RL_HEADER_AND_CHECK_FUNC([rl_basic_quote_characters], [printf(\"%s\", rl_basic_quote_characters)], [HAVE_RL_BASIC_QUOTE_CHARS]) \n\ntest $last_check = no && AC_MY_ERROR([[The readline library that I found is incomplete, probably just a wrapper\naround libedit (like on Mac OS X) Please install GNU Readline and re-configure\nwith the correct CFLAGS and LDFLAGS (cf. the instructions in INSTALL)]])\n\nAC_EGREP_RL_HEADER_AND_CHECK_FUNC([rl_variable_value], [rl_variable_value(\"blah\")], [HAVE_RL_VARIABLE_VALUE]) \n\nAC_EGREP_RL_HEADER_AND_CHECK_FUNC([rl_readline_version],[printf(\"%d\",rl_readline_version)], [HAVE_RL_READLINE_VERSION]) \n\nAC_EGREP_RL_HEADER_AND_CHECK_FUNC([rl_executing_keyseq],[printf(\"%s\", rl_executing_keyseq)], [HAVE_RL_EXECUTING_KEYSEQ]) \n\n# rlwrap tries to read a global (but private) readline variable _rl_horizontal_scroll_mode if the the option spy-on-realine is enabled\n# Depending on the linker (or linker options like gcc's -fvisibility=xxx) it may or may not be visible:\n\nAC_MSG_CHECKING([whether the private symbol _rl_horizontal_scroll_mode is visble in your readline libs])\n# AC_TRY_LINK([#include <stdio.h>\n#              extern int _rl_horizontal_scroll_mode;],\n#              [printf(\"%d\", _rl_horizontal_scroll_mode)],\n#              found_rl_horiz=yes, found_rl_horiz=no)\n\nAC_LINK_IFELSE(\n           [AC_LANG_PROGRAM( [[\n              #include <stdio.h>\n             extern int _rl_horizontal_scroll_mode;]],\n             [[printf(\"%d\", _rl_horizontal_scroll_mode)]])],\n             found_rl_horiz=yes, found_rl_horiz=no)\n\n\nAC_MSG_RESULT($found_rl_horiz)\n\nif test $opt_spy_on_readline = yes  -a $found_rl_horiz = no ; then\n  AC_MSG_WARN([I can't find _rl_horizontal_scroll_mode: disabling spy-on-readline now])\n  opt_spy_on_readline=no\nfi\n\ntest x$opt_spy_on_readline = xyes && AC_DEFINE(SPY_ON_READLINE,1 ,Define to 1 to use private _rl_horizontal_scroll_mode)\n\n\n\n# check for existence of myself under $opt_proc_mountpoint/$$/cwd If the user specified --disable-proc-mountpoint we'll still do these tests\n# but they wil fail unless /no is a procfs mountpoint ;-)\n\necho \"Will rlwrap find command's working directory under ${opt_proc_mountpoint}/<commands pid>/cwd? let's see...\"\nif test x$cross_compiling = xyes; then\n   AC_DEFINE(HAVE_PROC_PID_CWD, 0, [Define to 1 if <opt_proc_mountpoint>/<pid>/cwd is a link to working directory of process <pid>])\n   AC_SUBST(HAVE_PROC_PID_CWD,[no])\n   echo\n   AC_MSG_WARN([This test doesn't work when cross-compiling. Edit HAVE_PROC_PID_CWD in config.h by hand. Guessing: ])   \nelse \n   AC_CHECK_FILES($opt_proc_mountpoint/$$/cwd/configure.ac,                                                                                      \n              [AC_DEFINE(HAVE_PROC_PID_CWD, 1 ,[Define to 1 if <opt_proc_mountpoint>/<pid>/cwd is a link to working directory of process <pid>])]\n              ,[])\nfi\n#AC_MSG_RESULT([$HAVE_PROC_PID_CWD])\n\n\nAC_DEFINE_UNQUOTED(PROC_MOUNTPOINT, \"[$opt_proc_mountpoint]\", [Define to location of Linux-style procfs mountpoint if provided and valid])\n\n\nAC_MSG_CHECKING([whether we can find command line under <opt_proc_mountpoint>/<pid>/cmdline and mirror it by overwriting our own *argv (this may take a few secs)])\n# We won't exactly do that, but instead write a test program that writes a random string to *argv (making sure it is longer than argv[0])\n# and then verify that we can see the same string under <opt_proc_mountpoint>/<pid>/cmdline\n# If so, we enable the --mirror-args option\nrandom_nonsense1=\"fymaytskjqhjeeimtmjqvqbnrnfutgnkehkmqqealklsoswyepxugcckimqdwbwfqdhdsdxfxiagqbnm\"\nrandom_nonsense2=\"iraliuuklajcorjfunavdsytdiydjaoaeauiapidtoxogfplrxfmfcmajikwenafwcownmoodxjljhsv\"\n\nAC_DEFINE_UNQUOTED(RANDOM_NONSENSE2, \"$random_nonsense2\", nonsense arg to overwrite conftest argv with)\n\nif test $cross_compiling = \"yes\"; then\n   AC_DEFINE(ENABLE_MIRROR_ARGS, 0, [Define if overwriting argv changes args visible in ps (1)])\n   AC_MSG_WARN([This test doesn't work when cross-compiling. Edit ENABLE_MIRROR_ARGS  in config.h by hand. Guessing:])\n   result=\"no\"\nelse\n   AC_LANG_CONFTEST(\n        [AC_LANG_SOURCE([[#include <unistd.h>\n                          #include <string.h>\n                          int main(int argc, char **argv) {\n                                       memcpy(*argv, \"a\\0\" RANDOM_NONSENSE2, strlen(RANDOM_NONSENSE2) + 2);\n                                       return(sleep(10));\n                                   }\n                         ]])])\n\n  result=\"no\"\n  $CC -o conftest conftest.c  \n  ./conftest $random_nonsense1 >/dev/null 2>&1 &\n  CONFTEST_PID=$!\n  for N in  1 2 3 ; do # retry a few times because of a possible  race (on 1-processor systems) where ./conftest has been forked by the shell, ...\n                       # ... but not yet executed (which will make the following test fail)\n    if grep $random_nonsense2 $opt_proc_mountpoint/$CONFTEST_PID/cmdline >/dev/null 2>&1; then\n      AS_ECHO([\"#define ENABLE_MIRROR_ARGS 1\"]) >>confdefs.h\n      result=\"yes\"\n      break\n    fi\n    sleep 1 # shorter sleep is not portable\n  done\n  kill $CONFTEST_PID\nfi\nAC_MSG_RESULT($result)\n\nif test x$cross_compiling = xyes; then\n  cat <<EOF\n\n\n    **************************************************************************************\n    * This configure script runs a few handwritten scripts and ad-hoc programs in order  *\n    * to determine capabilities of the host (mostly around the /proc filesystem)         *\n    * When cross-compiling, this makes no sense, as you can see above.                   *\n    * Hence, after configuration, please set HAVE_PROC_PID_CWD,                          *\n    * GETOPT_GROKS_OPTIONAL_ARGS and ENABLE_MIRROR_ARGS by hand (in config.h)            *\n    **************************************************************************************\n\nEOF\nfi\n\n\necho\necho\n\n\nAC_OUTPUT\n\ncat <<EOF \n\nNow do:\n    make (or gmake)  to build rlwrap \n    make check       for instructions how to test it\n    make install     to install it\n \nEOF\n\n\n# Local Variables:\n# mode: autoconf\n# End:\n\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "filters",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}