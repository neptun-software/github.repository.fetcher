{
  "metadata": {
    "timestamp": 1736710069981,
    "page": 683,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bcrypt-ruby/bcrypt-ruby",
      "stars": 1934,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.072265625,
          "content": "doc\npkg\ntmp\n*.o\n*.bundle\n*.so\n*.jar\n.DS_Store\n.rbenv-gemsets\nGemfile.lock\n"
        },
        {
          "name": ".rspec",
          "type": "blob",
          "size": 0.0419921875,
          "content": "--color\n--backtrace\n--format documentation\n"
        },
        {
          "name": "CHANGELOG",
          "type": "blob",
          "size": 4.2880859375,
          "content": "3.1.20 Nov 17 2023\n  - Limit packaged files -- decrease gem filesize by ~28% [GH #272 by @pusewicz]\n\n3.1.19 June 22 2023\n  - Deprecate passing the third argument to `BCrypt::Engine.hash_secret` [GH #207 by @sergey-alekseev]\n  - Add GC guards so the C compiler won't optimize out references [GH #270]\n\n3.1.18 May 16 2022\n  - Unlock GVL when calculating hashes and salts [GH #260]\n  - Fix compilation warnings in `ext/mri/bcrypt_ext.c` [GH #261]\n\n3.1.17 Mar 14 2022\n- Fix regex in validators to use \\A and \\z instead of ^ and $ [GH #121]\n- Truncate secrets greater than 72 bytes in hash_secret [GH #255]\n- Assorted test and doc improvements\n\n3.1.16 Sep 3 2020\n  - Fix compilation on FreeBSD. [GH #234]\n\n3.1.15 July 21 2020\n  - Remove GVL optimization.  Apparently it breaks things [GH #230]\n\n3.1.14 July 21 2020\n  - Start calibration from the minimum cost supported by the algorithm [GH #206 by @sergey-alekseev]\n\n3.1.13 May 31 2019\n  - No longer include compiled binaries for Windows. See GH #173.\n  - Update C and Java implementations to latest versions [GH #182 by @fonica]\n  - Bump default cost to 12 [GH #181 by @bdewater]\n  - Remove explicit support for Rubies 1.8 and 1.9\n  - Define SKIP_GNU token when building extension (Fixes FreeBSD >= 12) [GH #189 by @adam12]\n\n3.1.12 May 16 2018\n  - Add support for Ruby 2.3, 2.4, and 2.5 in compiled Windows binaries\n  - Fix compatibility with libxcrypt - Fixes hash errors in Fedora 28 and Ubuntu 20 [GH #164 by @besser82]\n\n3.1.11 Mar 06 2016\n  - Add support for Ruby 2.2 in compiled Windows binaries\n\n3.1.10 Jan 28 2015\n  - Fix issue with dumping a BCrypt::Password instance to YAML in Ruby 2.2 [GH #107 by @mattwildig]\n\n3.1.9  Oct 23 2014\n  - Rebuild corrupt binaries\n\n3.1.8  Oct 23 2014\n  - Add support for Ruby 2.1 in compiled Windows binaries [GH #102]\n\n3.1.7  Feb 24 2014\n  - Rebuild corrupt Java binary version of gem [GH #90]\n  - The 2.1 support for Windows binaries alleged in 3.1.3 was a lie -- documentation removed\n\n3.1.6  Feb 21 2014\n  - Dummy version of \"bcrypt-ruby\" needed a couple version bumps to fix some\n    bugs. It felt wrong to have that at a higher version than the real gem, so\n    the real gem is getting bumped to 3.1.6.\n\n3.1.3  Feb 21 2014\n  - Add support for Ruby 2.1 in compiled Windows binaries\n  - Rename gem from \"bcrypt-ruby\" to just \"bcrypt\". [GH #86 by @sferik]\n\n3.1.2  Aug 26 2013\n  - Add support for Ruby 1.8 and 2.0 (in addition to 1.9) in compiled Windows binaries\n  - Add support for 64-bit Windows\n\n3.1.1  Jul 10 2013\n  - Remove support for Ruby 1.8 in compiled win32 binaries\n\n3.1.0  May 07 2013\n  - Add BCrypt::Password.valid_hash?(str) to check if a string is a valid bcrypt password hash\n  - BCrypt::Password cost should be set to DEFAULT_COST if nil\n  - Add BCrypt::Engine.cost attribute for getting/setting a default cost externally\n\n3.0.1  Sep 12 2011\n  - create raises an exception if the cost is higher than 31. GH #27\n\n3.0.0  Aug 24 2011\n  - Bcrypt C implementation replaced with a public domain implementation.\n  - License changed to MIT\n\n2.1.2  Sep 16 2009\n  - Fixed support for Solaris, OpenSolaris.\n\n2.1.1  Aug 14 2009\n  - JVM 1.4/1.5 compatibility [Hongli Lai]\n\n2.1.0  Aug 12 2009\n  - Improved code coverage, unit tests, and build chain. [Hongli Lai]\n  - Ruby 1.9 compatibility fixes. [Hongli Lai]\n  - JRuby support, using Damien Miller's jBCrypt. [Hongli Lai]\n  - Ruby 1.9 GIL releasing for high-cost hashes. [Hongli Lai]\n\n2.0.5  Mar 11 2009\n  - Fixed Ruby 1.8.5 compatibility. [Mike Pomraning]\n\n2.0.4  Mar 09 2009\n  - Added Ruby 1.9 compatibility. [Genki Takiuchi]\n  - Fixed segfaults on some different types of empty strings. [Mike Pomraning]\n\n2.0.3  May 07 2008\n - Made exception classes descend from StandardError, not Exception [Dan42]\n - Changed BCrypt::Engine.hash to BCrypt::Engine.hash_secret to avoid Merb\n   sorting issues. [Lee Pope]\n\n2.0.2  Jun 06 2007\n - Fixed example code in the README [Winson]\n - Fixed Solaris compatibility [Jeremy LaTrasse, Twitter crew]\n\n2.0.1  Mar 09 2007\n - Fixed load path issues\n - Fixed crashes when hashing weird values (e.g., false, etc.)\n\n2.0.0  Mar 07 2007\n - Removed BCrypt::Password#exactly_equals -- use BCrypt::Password#eql? instead.\n - Added BCrypt::Password#is_password?.\n - Refactored out BCrypt::Internals into more useful BCrypt::Engine.\n - Added validation of secrets -- nil is not healthy.\n\n1.0.0  Feb 27 2007\n - Initial release.\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.2255859375,
          "content": "(The MIT License)\n\nCopyright 2007-2011:\n\n* Coda Hale <coda.hale@gmail.com>\n\nC implementation of the BCrypt algorithm by Solar Designer and placed in the\npublic domain.\njBCrypt is Copyright (c) 2006 Damien Miller <djm@mindrot.org>.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Gemfile",
          "type": "blob",
          "size": 0.037109375,
          "content": "source 'https://rubygems.org'\ngemspec\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.0634765625,
          "content": "# bcrypt-ruby\n\nAn easy way to keep your users' passwords secure.\n\n* https://github.com/bcrypt-ruby/bcrypt-ruby/tree/master\n\n[![Github Actions Build Status](https://github.com/bcrypt-ruby/bcrypt-ruby/actions/workflows/ruby.yml/badge.svg?branch=master)](https://github.com/bcrypt-ruby/bcrypt-ruby/actions/workflows/ruby.yml)\n\n## Why you should use `bcrypt()`\n\nIf you store user passwords in the clear, then an attacker who steals a copy of your database has a giant list of emails\nand passwords. Some of your users will only have one password -- for their email account, for their banking account, for\nyour application. A simple hack could escalate into massive identity theft.\n\nIt's your responsibility as a web developer to make your web application secure -- blaming your users for not being\nsecurity experts is not a professional response to risk.\n\n`bcrypt()` allows you to easily harden your application against these kinds of attacks.\n\n*Note*: JRuby versions of the bcrypt gem `<= 2.1.3` had a [security\nvulnerability](https://www.mindrot.org/files/jBCrypt/internat.adv) that\nwas fixed in `>= 2.1.4`. If you used a vulnerable version to hash\npasswords with international characters in them, you will need to\nre-hash those passwords. This vulnerability only affected the JRuby gem.\n\n## How to install bcrypt\n\n    gem install bcrypt\n\nThe bcrypt gem is available on the following Ruby platforms:\n\n* JRuby\n* RubyInstaller builds on Windows with the DevKit\n* Any modern Ruby on a BSD/OS X/Linux system with a compiler\n\n## How to use `bcrypt()` in your Rails application\n\n*Note*: Rails versions >= 3 ship with `ActiveModel::SecurePassword` which uses bcrypt-ruby.\n`has_secure_password` [docs](https://api.rubyonrails.org/classes/ActiveModel/SecurePassword/ClassMethods.html#method-i-has_secure_password)\nimplements a similar authentication strategy to the code below.\n\n### The _User_ model\n```ruby\nrequire 'bcrypt'\n\nclass User < ActiveRecord::Base\n  # users.password_hash in the database is a :string\n  include BCrypt\n\n  def password\n    @password ||= Password.new(password_hash)\n  end\n\n  def password=(new_password)\n    @password = Password.create(new_password)\n    self.password_hash = @password\n  end\nend\n```\n### Creating an account\n```ruby\ndef create\n  @user = User.new(params[:user])\n  @user.password = params[:password]\n  @user.save!\nend\n```\n### Authenticating a user\n```ruby\ndef login\n  @user = User.find_by_email(params[:email])\n  if @user.password == params[:password]\n    give_token\n  else\n    redirect_to home_url\n  end\nend\n```\n## How to use bcrypt-ruby in general\n```ruby\nrequire 'bcrypt'\n\nmy_password = BCrypt::Password.create(\"my password\")\n#=> \"$2a$12$K0ByB.6YI2/OYrB4fQOYLe6Tv0datUVf6VZ/2Jzwm879BW5K1cHey\"\n\nmy_password.version              #=> \"2a\"\nmy_password.cost                 #=> 12\nmy_password == \"my password\"     #=> true\nmy_password == \"not my password\" #=> false\n\nmy_password = BCrypt::Password.new(\"$2a$12$K0ByB.6YI2/OYrB4fQOYLe6Tv0datUVf6VZ/2Jzwm879BW5K1cHey\")\nmy_password == \"my password\"     #=> true\nmy_password == \"not my password\" #=> false\n```\nCheck the rdocs for more details -- BCrypt, BCrypt::Password.\n\n## How `bcrypt()` works\n\n`bcrypt()` is a hashing algorithm designed by Niels Provos and David Mazières of the OpenBSD Project.\n\n### Background\n\nHash algorithms take a chunk of data (e.g., your user's password) and create a \"digital fingerprint,\" or hash, of it.\nBecause this process is not reversible, there's no way to go from the hash back to the password.\n\nIn other words:\n\n    hash(p) #=> <unique gibberish>\n\nYou can store the hash and check it against a hash made of a potentially valid password:\n\n    <unique gibberish> =? hash(just_entered_password)\n\n### Rainbow Tables\n\nBut even this has weaknesses -- attackers can just run lists of possible passwords through the same algorithm, store the\nresults in a big database, and then look up the passwords by their hash:\n\n    PrecomputedPassword.find_by_hash(<unique gibberish>).password #=> \"secret1\"\n\n### Salts\n\nThe solution to this is to add a small chunk of random data -- called a salt -- to the password before it's hashed:\n\n    hash(salt + p) #=> <really unique gibberish>\n\nThe salt is then stored along with the hash in the database, and used to check potentially valid passwords:\n\n    <really unique gibberish> =? hash(salt + just_entered_password)\n\nbcrypt-ruby automatically handles the storage and generation of these salts for you.\n\nAdding a salt means that an attacker has to have a gigantic database for each unique salt -- for a salt made of 4\nletters, that's 456,976 different databases. Pretty much no one has that much storage space, so attackers try a\ndifferent, slower method -- throw a list of potential passwords at each individual password:\n\n    hash(salt + \"aadvark\") =? <really unique gibberish>\n    hash(salt + \"abacus\")  =? <really unique gibberish>\n    etc.\n\nThis is much slower than the big database approach, but most hash algorithms are pretty quick -- and therein lies the\nproblem. Hash algorithms aren't usually designed to be slow, they're designed to turn gigabytes of data into secure\nfingerprints as quickly as possible. `bcrypt()`, though, is designed to be computationally expensive:\n\n    Ten thousand iterations:\n                 user     system      total        real\n    md5      0.070000   0.000000   0.070000 (  0.070415)\n    bcrypt  22.230000   0.080000  22.310000 ( 22.493822)\n\nIf an attacker was using Ruby to check each password, they could check ~140,000 passwords a second with MD5 but only\n~450 passwords a second with `bcrypt()`.\n\n### Cost Factors\n\nIn addition, `bcrypt()` allows you to increase the amount of work required to hash a password as computers get faster. Old\npasswords will still work fine, but new passwords can keep up with the times.\n\nThe default cost factor used by bcrypt-ruby is 12, which is fine for session-based authentication. If you are using a\nstateless authentication architecture (e.g., HTTP Basic Auth), you will want to lower the cost factor to reduce your\nserver load and keep your request times down. This will lower the security provided you, but there are few alternatives.\n\nTo change the default cost factor used by bcrypt-ruby, use `BCrypt::Engine.cost = new_value`:\n```ruby\nBCrypt::Password.create('secret').cost\n  #=> 12, the default provided by bcrypt-ruby\n\n# set a new default cost\nBCrypt::Engine.cost = 8\nBCrypt::Password.create('secret').cost\n  #=> 8\n```\nThe default cost can be overridden as needed by passing an options hash with a different cost:\n\n    BCrypt::Password.create('secret', :cost => 6).cost  #=> 6\n\n## More Information\n\n`bcrypt()` is currently used as the default password storage hash in OpenBSD, widely regarded as the most secure operating\nsystem available.\n\nFor a more technical explanation of the algorithm and its design criteria, please read Niels Provos and David Mazières'\nUsenix99 paper:\nhttps://www.usenix.org/events/usenix99/provos.html\n\nIf you'd like more down-to-earth advice regarding cryptography, I suggest reading <i>Practical Cryptography</i> by Niels\nFerguson and Bruce Schneier:\nhttps://www.schneier.com/book-practical.html\n\n# Etc\n\n* Author  :: Coda Hale <coda.hale@gmail.com>\n* Website :: https://codahale.com\n"
        },
        {
          "name": "Rakefile",
          "type": "blob",
          "size": 1.6689453125,
          "content": "require 'rspec/core/rake_task'\nrequire 'rubygems/package_task'\nrequire 'rake/extensiontask'\nrequire 'rake/javaextensiontask'\nrequire 'rake/clean'\nrequire 'rdoc/task'\nrequire 'benchmark'\n\nCLEAN.include(\n  \"tmp\",\n  \"lib/bcrypt_ext.jar\",\n  \"lib/bcrypt_ext.so\"\n)\nCLOBBER.include(\n  \"doc\",\n  \"pkg\"\n)\n\nGEMSPEC = Gem::Specification.load(\"bcrypt.gemspec\")\n\ntask :default => [:compile, :spec]\n\ndesc \"Run all specs\"\nRSpec::Core::RakeTask.new do |t|\n  t.pattern = 'spec/**/*_spec.rb'\n  t.ruby_opts = '-w'\nend\n\ndesc \"Run all specs, with coverage testing\"\nRSpec::Core::RakeTask.new(:rcov) do |t|\n  t.pattern = 'spec/**/*_spec.rb'\n  t.rcov = true\n  t.rcov_path = 'doc/coverage'\n  t.rcov_opts = ['--exclude', 'rspec,diff-lcs,rcov,_spec,_helper']\nend\n\ndesc 'Generate RDoc'\nRDoc::Task.new do |rdoc|\n  rdoc.rdoc_dir = 'doc/rdoc'\n  rdoc.options += GEMSPEC.rdoc_options\n  rdoc.template = ENV['TEMPLATE'] if ENV['TEMPLATE']\n  rdoc.rdoc_files.include(*GEMSPEC.extra_rdoc_files)\nend\n\nGem::PackageTask.new(GEMSPEC) do |pkg|\n  pkg.need_zip = true\n  pkg.need_tar = true\nend\n\nif RUBY_PLATFORM =~ /java/\n  Rake::JavaExtensionTask.new('bcrypt_ext', GEMSPEC) do |ext|\n    ext.ext_dir = 'ext/jruby'\n    ext.source_version = \"1.8\"\n    ext.target_version = \"1.8\"\n  end\nelse\n  Rake::ExtensionTask.new(\"bcrypt_ext\", GEMSPEC) do |ext|\n    ext.ext_dir = 'ext/mri'\n  end\nend\n\ndesc \"Run a set of benchmarks on the compiled extension.\"\ntask :benchmark do\n  TESTS = 100\n  TEST_PWD = \"this is a test\"\n  require File.expand_path(File.join(File.dirname(__FILE__), \"lib\", \"bcrypt\"))\n  Benchmark.bmbm do |results|\n    4.upto(10) do |n|\n      results.report(\"cost #{n}:\") { TESTS.times { BCrypt::Password.create(TEST_PWD, :cost => n) } }\n    end\n  end\nend\n"
        },
        {
          "name": "bcrypt.gemspec",
          "type": "blob",
          "size": 1.0048828125,
          "content": "Gem::Specification.new do |s|\n  s.name = 'bcrypt'\n  s.version = '3.1.20'\n\n  s.summary = \"OpenBSD's bcrypt() password hashing algorithm.\"\n  s.description = <<-EOF\n    bcrypt() is a sophisticated and secure hash algorithm designed by The OpenBSD project\n    for hashing passwords. The bcrypt Ruby gem provides a simple wrapper for safely handling\n    passwords.\n  EOF\n\n  s.files = Dir['CHANGELOG', 'COPYING', 'README.md', 'lib/**/*.rb', 'ext/**/*.*']\n  s.require_path = 'lib'\n\n  s.add_development_dependency 'rake-compiler', '~> 1.2.0'\n  s.add_development_dependency 'rspec', '>= 3'\n\n  s.rdoc_options += ['--title', 'bcrypt-ruby', '--line-numbers', '--inline-source', '--main', 'README.md']\n  s.extra_rdoc_files += ['README.md', 'COPYING', 'CHANGELOG', *Dir['lib/**/*.rb']]\n\n  s.extensions = 'ext/mri/extconf.rb'\n\n  s.authors = [\"Coda Hale\"]\n  s.email = \"coda.hale@gmail.com\"\n  s.homepage = \"https://github.com/bcrypt-ruby/bcrypt-ruby\"\n  s.license = \"MIT\"\n\n  s.metadata[\"changelog_uri\"] = s.homepage + \"/blob/master/CHANGELOG\"\nend\n"
        },
        {
          "name": "ext",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "spec",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}