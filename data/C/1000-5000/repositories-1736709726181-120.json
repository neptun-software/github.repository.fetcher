{
  "metadata": {
    "timestamp": 1736709726181,
    "page": 120,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "raspberrypi/pico-sdk",
      "stars": 3896,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".bazelignore",
          "type": "blob",
          "size": 0.1298828125,
          "content": "# Don't accidentally pick up external CMake deps with Bazel build files.\nbuild\n# Don't treat submodules as part of this project.\nlib\n"
        },
        {
          "name": ".bazelrc",
          "type": "blob",
          "size": 0.1962890625,
          "content": "# Silence all C/C++ warnings in external code.\ncommon --per_file_copt=external/.*@-w\ncommon --host_per_file_copt=external/.*@-w\n\n# Produce useful output when the build fails.\ncommon --verbose_failures\n"
        },
        {
          "name": ".bazelversion",
          "type": "blob",
          "size": 0.005859375,
          "content": "7.2.1\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1640625,
          "content": ".idea\n.vscode\ncmake-*\n.cache\n.DS_Store\nbuild\nbuild-*\n\nbazel-*\n\n# Ignore until https://github.com/bazelbuild/bazel/issues/20369 is fixed.\nMODULE.bazel.lock\n__pycache__/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.4658203125,
          "content": "[submodule \"tinyusb\"]\n\tpath = lib/tinyusb\n\turl = https://github.com/hathach/tinyusb.git\n[submodule \"lib/cyw43-driver\"]\n\tpath = lib/cyw43-driver\n\turl = https://github.com/georgerobotics/cyw43-driver.git\n[submodule \"lib/lwip\"]\n\tpath = lib/lwip\n\turl = https://github.com/lwip-tcpip/lwip.git\n[submodule \"lib/mbedtls\"]\n\tpath = lib/mbedtls\n\turl = https://github.com/Mbed-TLS/mbedtls.git\n[submodule \"lib/btstack\"]\n\tpath = lib/btstack\n\turl = https://github.com/bluekitchen/btstack.git\n"
        },
        {
          "name": "BUILD.bazel",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 2.6513671875,
          "content": "cmake_minimum_required(VERSION 3.13...3.27)\n\n# Note: this CMakeLists.txt can be used as a top-level CMakeLists.txt for the SDK itself. For all other uses\n# it is included as a subdirectory via the pico_sdk_init() method provided by pico_sdk_init.cmake\nif (NOT TARGET _pico_sdk_inclusion_marker)\n    add_library(_pico_sdk_inclusion_marker INTERFACE)\n    # This is a no-op unless we are the top-level CMakeLists.txt\n    include(pico_sdk_init.cmake)\n\n    project(pico_sdk C CXX ASM)\n\n    string(REGEX MATCH \"Clang\" PICO_C_COMPILER_IS_CLANG \"${CMAKE_C_COMPILER_ID}\")\n    string(REGEX MATCH \"GNU\" PICO_C_COMPILER_IS_GNU \"${CMAKE_C_COMPILER_ID}\")\n    string(REGEX MATCH \"IAR\" PICO_C_COMPILER_IS_IAR \"${CMAKE_C_COMPILER_ID}\")\n    pico_register_common_scope_var(PICO_C_COMPILER_IS_CLANG)\n    pico_register_common_scope_var(PICO_C_COMPILER_IS_GNU)\n    pico_register_common_scope_var(PICO_C_COMPILER_IS_IAR)\n    pico_register_common_scope_var(PICO_SDK_VERSION_MAJOR)\n    pico_register_common_scope_var(PICO_SDK_VERSION_MINOR)\n    pico_register_common_scope_var(PICO_SDK_VERSION_REVISION)\n    pico_register_common_scope_var(PICO_SDK_VERSION_PRE_RELEASE_ID)\n    pico_register_common_scope_var(PICO_SDK_VERSION_STRING)\n\n    message(\"Build type is ${CMAKE_BUILD_TYPE}\")\n    if (\"${CMAKE_BUILD_TYPE}\" STREQUAL \"Debug\")\n        if (PICO_DEOPTIMIZED_DEBUG)\n            message(\"Using fully de-optimized debug build (set PICO_DEOPTIMIZED_DEBUG=0 to optimize)\")\n        else()\n            message(\"Using regular optimized debug build (set PICO_DEOPTIMIZED_DEBUG=1 to de-optimize)\")\n        endif()\n    endif()\n\n    pico_is_top_level_project(PICO_SDK_TOP_LEVEL_PROJECT)\n\n    set(CMAKE_C_STANDARD 11)\n    set(CMAKE_CXX_STANDARD 11)\n\n    if (NOT PICO_SDK_TOP_LEVEL_PROJECT)\n        set(PICO_SDK 1 PARENT_SCOPE)\n    endif()\n\n    # allow customization\n    add_sub_list_dirs(PICO_SDK_PRE_LIST_DIRS)\n    add_sub_list_files(PICO_SDK_PRE_LIST_FILES)\n\n    # needed by certain functions\n    set(PICO_TOOLS_DIR \"${CMAKE_CURRENT_LIST_DIR}/tools\" CACHE INTERNAL \"\")\n\n    add_subdirectory(tools)\n    add_subdirectory(src)\n\n    # allow customization\n    add_sub_list_dirs(PICO_SDK_POST_LIST_DIRS)\n    add_sub_list_files(PICO_SDK_POST_LIST_FILES)\n\n    if (PICO_SDK_TOP_LEVEL_PROJECT AND NOT DEFINED PICO_SDK_TESTS_ENABLED)\n        set(PICO_SDK_TESTS_ENABLED 1)\n    endif()\n    if (PICO_SDK_TESTS_ENABLED)\n        add_subdirectory(test)\n    endif ()\n\n    set(PICO_SDK_TESTS_ENABLED \"${PICO_SDK_TESTS_ENABLED}\" CACHE INTERNAL \"Enable build of SDK tests\")\n\n    # add docs at the end, as we gather documentation dirs as we go\n    add_subdirectory(docs)\n\n    if (NOT PICO_SDK_TOP_LEVEL_PROJECT)\n        pico_promote_common_scope_vars()\n    endif()\nendif()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.2353515625,
          "content": "# Contributing to Raspberry Pi Pico C/C++ SDK\n\n## How to Report a Bug\n\nWe use GitHub to host code, track [issues](https://github.com/raspberrypi/pico-sdk/issues) and feature requests, and to accept [pull requests](https://github.com/raspberrypi/pico-sdk/pulls). If you find think you have found a bug in the SDK please report it by [opening a new issue](https://github.com/raspberrypi/pico-sdk/issues/new). Please include as much detail as possible, and ideally some code to reproduce the problem.\n\n## How to Contribute Code\n\nIn order to contribute new or updated code, you must first create a GitHub account and fork the original repository to your own account. You can make changes, save them in your repository, then [make a pull request](https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork) against this repository. The pull request will appear [in the repository](https://github.com/raspberrypi/pico-sdk/pulls) where it can be assessed by the maintainers, and if appropriate, merged with the official repository.\n\n**NOTE:** Development takes place on the `develop` branch in this repository. Please open your [pull request](https://github.com/raspberrypi/pico-sdk/pulls) (PR) against the [`develop`](https://github.com/raspberrypi/pico-sdk/tree/develop) branch, pull requests against the `master` branch will automatically CI fail checks and will not be accepted. You will be asked to rebase your PR against `develop` and if you do not do so, your PR will be closed.\n\nWhile we are happy to take contributions, big or small, changes in the SDK may have knock-on effects in other places so it is possible that apparently benign pull requests that make seemingly small changes could be refused. \n\n### Code Style\n\nIf you are contributing new or updated code please match the existing code style, particularly:\n\n* Use 4 spaces for indentation rather than tabs.\n* Braces are required for everything except single line `if` statements.\n* Opening braces should not be placed on a new line.\n\n### Licensing \n\nCode in this repository is licensed under the [BSD-3 License](LICENSE.TXT). By contributing content to this repository you are agreeing to place your contributions under this license.\n"
        },
        {
          "name": "LICENSE.TXT",
          "type": "blob",
          "size": 1.4541015625,
          "content": "Copyright 2020 (c) 2020 Raspberry Pi (Trading) Ltd.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the\nfollowing conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following\n   disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following\n   disclaimer in the documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products\n   derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\nINCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\nWHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "MODULE.bazel",
          "type": "blob",
          "size": 6.1640625,
          "content": "module(\n    name = \"pico-sdk\",\n    version = \"2.1.0\",\n)\n\nbazel_dep(name = \"platforms\", version = \"0.0.9\")\nbazel_dep(name = \"bazel_skylib\", version = \"1.6.1\")\nbazel_dep(name = \"rules_python\", version = \"0.36.0\")\nbazel_dep(name = \"picotool\", version = \"2.1.0\")\nbazel_dep(name = \"rules_cc\", version = \"0.0.10\")\n\nhttp_archive = use_repo_rule(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\n\nhttp_archive(\n    name = \"arm_gcc_linux-aarch64\",\n    build_file = \"//bazel/toolchain:gcc_arm_none_eabi.BUILD\",\n    sha256 = \"8fd8b4a0a8d44ab2e195ccfbeef42223dfb3ede29d80f14dcf2183c34b8d199a\",\n    strip_prefix = \"arm-gnu-toolchain-13.2.Rel1-aarch64-arm-none-eabi\",\n    url = \"https://developer.arm.com/-/media/Files/downloads/gnu/13.2.rel1/binrel/arm-gnu-toolchain-13.2.rel1-aarch64-arm-none-eabi.tar.xz\",\n)\n\nhttp_archive(\n    name = \"arm_gcc_linux-x86_64\",\n    build_file = \"//bazel/toolchain:gcc_arm_none_eabi.BUILD\",\n    sha256 = \"6cd1bbc1d9ae57312bcd169ae283153a9572bd6a8e4eeae2fedfbc33b115fdbb\",\n    strip_prefix = \"arm-gnu-toolchain-13.2.Rel1-x86_64-arm-none-eabi\",\n    url = \"https://developer.arm.com/-/media/Files/downloads/gnu/13.2.rel1/binrel/arm-gnu-toolchain-13.2.rel1-x86_64-arm-none-eabi.tar.xz\",\n)\n\nhttp_archive(\n    name = \"arm_gcc_win-x86_64\",\n    build_file = \"//bazel/toolchain:gcc_arm_none_eabi.BUILD\",\n    sha256 = \"51d933f00578aa28016c5e3c84f94403274ea7915539f8e56c13e2196437d18f\",\n    strip_prefix = \"arm-gnu-toolchain-13.2.Rel1-mingw-w64-i686-arm-none-eabi\",\n    url = \"https://developer.arm.com/-/media/Files/downloads/gnu/13.2.rel1/binrel/arm-gnu-toolchain-13.2.rel1-mingw-w64-i686-arm-none-eabi.zip\",\n)\n\nhttp_archive(\n    name = \"arm_gcc_mac-x86_64\",\n    build_file = \"//bazel/toolchain:gcc_arm_none_eabi.BUILD\",\n    sha256 = \"075faa4f3e8eb45e59144858202351a28706f54a6ec17eedd88c9fb9412372cc\",\n    strip_prefix = \"arm-gnu-toolchain-13.2.Rel1-darwin-x86_64-arm-none-eabi\",\n    url = \"https://developer.arm.com/-/media/Files/downloads/gnu/13.2.rel1/binrel/arm-gnu-toolchain-13.2.rel1-darwin-x86_64-arm-none-eabi.tar.xz\",\n)\n\nhttp_archive(\n    name = \"arm_gcc_mac-aarch64\",\n    build_file = \"//bazel/toolchain:gcc_arm_none_eabi.BUILD\",\n    sha256 = \"39c44f8af42695b7b871df42e346c09fee670ea8dfc11f17083e296ea2b0d279\",\n    strip_prefix = \"arm-gnu-toolchain-13.2.Rel1-darwin-arm64-arm-none-eabi\",\n    url = \"https://developer.arm.com/-/media/Files/downloads/gnu/13.2.rel1/binrel/arm-gnu-toolchain-13.2.rel1-darwin-arm64-arm-none-eabi.tar.xz\",\n)\n\nhttp_archive(\n    name = \"clang_linux-x86_64\",\n    build_file = \"//bazel/toolchain:clang.BUILD\",\n    sha256 = \"6c599d1aba568236064c340d7813324849896d5a4e2f3fd8225a8c31bfcbf884\",\n    type = \"zip\",\n    url = \"https://chrome-infra-packages.appspot.com/dl/fuchsia/third_party/clang/linux-amd64/+/git_revision:2b0a708f41dd6291ee744704d43febc975e3d026\",\n)\n\nhttp_archive(\n    name = \"clang_win-x86_64\",\n    build_file = \"//bazel/toolchain:clang.BUILD\",\n    sha256 = \"f49ba4123ee3958f2b47289d017a5b3f1ca01f82dd7a2168c45412c18101fd13\",\n    type = \"zip\",\n    # Windows doesn't like `:` in the produced filename, so replace it with `%3A`.\n    url = \"https://chrome-infra-packages.appspot.com/dl/fuchsia/third_party/clang/windows-amd64/+/git_revision:2b0a708f41dd6291ee744704d43febc975e3d026\".replace(\"git_revision:\", \"git_revision%3A\"),\n)\n\nhttp_archive(\n    name = \"clang_mac-x86_64\",\n    build_file = \"//bazel/toolchain:clang.BUILD\",\n    sha256 = \"d3516f2eb4c12d17ae77ee84c9226fbea581d4fb806910ceac4717d5adfcf748\",\n    type = \"zip\",\n    url = \"https://chrome-infra-packages.appspot.com/dl/fuchsia/third_party/clang/mac-amd64/+/git_revision:2b0a708f41dd6291ee744704d43febc975e3d026\",\n)\n\nhttp_archive(\n    name = \"clang_mac-aarch64\",\n    build_file = \"//bazel/toolchain:clang.BUILD\",\n    sha256 = \"68e551f41c7e9473063b09819f6ab8ec6e7e53677f4078189656cb14dc52984b\",\n    type = \"zip\",\n    url = \"https://chrome-infra-packages.appspot.com/dl/fuchsia/third_party/clang/mac-arm64/+/git_revision:2b0a708f41dd6291ee744704d43febc975e3d026\",\n)\n\nnew_git_repository = use_repo_rule(\"@bazel_tools//tools/build_defs/repo:git.bzl\", \"new_git_repository\")\n\n# TODO: Provide tinyusb as a proper Bazel module.\nnew_git_repository(\n    name = \"tinyusb\",\n    build_file = \"//src/rp2_common/tinyusb:tinyusb.BUILD\",\n    commit = \"5217cee5de4cd555018da90f9f1bcc87fb1c1d3a\",  # keep-in-sync-with-submodule: lib/tinyusb\n    remote = \"https://github.com/hathach/tinyusb.git\",\n)\n\n# TODO: Provide btstack as a proper Bazel module.\nnew_git_repository(\n    name = \"btstack\",\n    build_file = \"//src/rp2_common/pico_btstack:btstack.BUILD\",\n    commit = \"2b49e57bd1fae85ac32ac1f41cdb7c794de335f6\",  # keep-in-sync-with-submodule: lib/btstack\n    remote = \"https://github.com/bluekitchen/btstack.git\",\n)\n\n# TODO: Provide cyw43-driver as a proper Bazel module.\nnew_git_repository(\n    name = \"cyw43-driver\",\n    build_file = \"//src/rp2_common/pico_cyw43_driver:cyw43-driver.BUILD\",\n    commit = \"cf924bb04c8984675ca0fc2178f082e404e048c3\",  # keep-in-sync-with-submodule: lib/cyw43-driver\n    remote = \"https://github.com/georgerobotics/cyw43-driver.git\",\n)\n\n# TODO: Provide lwip as a proper Bazel module.\nnew_git_repository(\n    name = \"lwip\",\n    build_file = \"//src/rp2_common/pico_lwip:lwip.BUILD\",\n    commit = \"0a0452b2c39bdd91e252aef045c115f88f6ca773\",  # keep-in-sync-with-submodule: lib/lwip\n    remote = \"https://github.com/lwip-tcpip/lwip.git\",\n)\n\nregister_toolchains(\n    \"//bazel/toolchain:linux-aarch64-rp2040\",\n    \"//bazel/toolchain:linux-aarch64-rp2350\",\n    \"//bazel/toolchain:linux-x86_64-rp2040\",\n    \"//bazel/toolchain:linux-x86_64-rp2350\",\n    \"//bazel/toolchain:win-x86_64-rp2040\",\n    \"//bazel/toolchain:win-x86_64-rp2350\",\n    \"//bazel/toolchain:mac-x86_64-rp2040\",\n    \"//bazel/toolchain:mac-x86_64-rp2350\",\n    \"//bazel/toolchain:mac-aarch64-rp2040\",\n    \"//bazel/toolchain:mac-aarch64-rp2350\",\n    # Require users to opt-in to the Pico SDK's toolchains.\n    dev_dependency = True,\n)\n\npython = use_extension(\"@rules_python//python/extensions:python.bzl\", \"python\")\npython.toolchain(\n    configure_coverage_tool = True,\n    python_version = \"3.9\",\n)\n\nuse_repo(python, \"pythons_hub\")\nregister_toolchains(\n    \"@pythons_hub//:all\",\n    dev_dependency = True,\n)\nregister_toolchains(\n    \"@rules_python//python/runtime_env_toolchains:all\",\n    dev_dependency = True,\n)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.4501953125,
          "content": "# Raspberry Pi Pico SDK\n\nThe Raspberry Pi Pico SDK (henceforth the SDK) provides the headers, libraries and build system\nnecessary to write programs for the RP-series microcontroller-based devices such as the Raspberry Pi Pico or Raspberry Pi Pico 2\nin C, C++ or assembly language.\n\nThe SDK is designed to provide an API and programming environment that is familiar both to non-embedded C developers and embedded C developers alike.\nA single program runs on the device at a time and starts with a conventional `main()` method. Standard C/C++ libraries are supported along with\nC-level libraries/APIs for accessing all of the RP-series microcontroller's hardware including PIO (Programmable IO).\n\nAdditionally, the SDK provides higher level libraries for dealing with timers, synchronization, Wi-Fi and Bluetooth networking, USB and multicore programming. These libraries should be comprehensive enough that your application code rarely, if at all, needs to access hardware registers directly. However, if you do need or prefer to access the raw hardware registers, you will also find complete and fully-commented register definition headers in the SDK. There's no need to look up addresses in the datasheet.\n\nThe SDK can be used to build anything from simple applications, fully-fledged runtime environments such as MicroPython, to low level software\nsuch as the RP-series microcontroller's on-chip bootrom itself.\n\nThe design goal for entire SDK is to be simple but powerful.\n\nAdditional libraries/APIs that are not yet ready for inclusion in the SDK can be found in [pico-extras](https://github.com/raspberrypi/pico-extras).\n\n# Documentation\n\nSee [Getting Started with the Raspberry Pi Pico-Series](https://rptl.io/pico-get-started) for information on how to setup your\nhardware, IDE/environment and how to build and debug software for the Raspberry Pi Pico and other RP-series microcontroller based devices.\n\nSee [Connecting to the Internet with Raspberry Pi Pico W](https://rptl.io/picow-connect) to learn more about writing\napplications for your Raspberry Pi Pico W that connect to the internet.\n\nSee [Raspberry Pi Pico-Series C/C++ SDK](https://rptl.io/pico-c-sdk) to learn more about programming using the\nSDK, to explore more advanced features, and for complete PDF-based API documentation.\n\nSee [Online Raspberry Pi Pico SDK API docs](https://rptl.io/pico-doxygen) for HTML-based API documentation.\n\n# Example code\n\nSee [pico-examples](https://github.com/raspberrypi/pico-examples) for example code you can build.\n\n# Getting the latest SDK code\n\nThe [master](https://github.com/raspberrypi/pico-sdk/tree/master/) branch of `pico-sdk` on GitHub contains the \n_latest stable release_ of the SDK. If you need or want to test upcoming features, you can try the\n[develop](https://github.com/raspberrypi/pico-sdk/tree/develop/) branch instead.\n\n# Quick-start your own project\n\n## Using Visual Studio Code\n\nYou can install the [Raspberry Pi Pico Visual Studio Code extension](https://marketplace.visualstudio.com/items?itemName=raspberry-pi.raspberry-pi-pico) in VS Code.\n\n## Unix command line\n\nThese instructions are extremely terse, and Linux-based only. For detailed steps,\ninstructions for other platforms, and just in general, we recommend you see [Raspberry Pi Pico-Series C/C++ SDK](https://rptl.io/pico-c-sdk)\n\n1. Install CMake (at least version 3.13), python 3, a native compiler, and a GCC cross compiler\n   ```\n   sudo apt install cmake python3 build-essential gcc-arm-none-eabi libnewlib-arm-none-eabi libstdc++-arm-none-eabi-newlib\n   ```\n1. Set up your project to point to use the Raspberry Pi Pico SDK\n\n   * Either by cloning the SDK locally (most common) :\n      1. `git clone` this Raspberry Pi Pico SDK repository\n      1. Copy [pico_sdk_import.cmake](https://github.com/raspberrypi/pico-sdk/blob/master/external/pico_sdk_import.cmake)\n         from the SDK into your project directory\n      2. Set `PICO_SDK_PATH` to the SDK location in your environment, or pass it (`-DPICO_SDK_PATH=`) to cmake later.\n      3. Setup a `CMakeLists.txt` like:\n\n          ```cmake\n          cmake_minimum_required(VERSION 3.13...3.27)\n\n          # initialize the SDK based on PICO_SDK_PATH\n          # note: this must happen before project()\n          include(pico_sdk_import.cmake)\n\n          project(my_project)\n\n          # initialize the Raspberry Pi Pico SDK\n          pico_sdk_init()\n\n          # rest of your project\n\n          ```\n\n   * Or with the Raspberry Pi Pico SDK as a submodule :\n      1. Clone the SDK as a submodule called `pico-sdk`\n      1. Setup a `CMakeLists.txt` like:\n\n          ```cmake\n          cmake_minimum_required(VERSION 3.13...3.27)\n\n          # initialize pico-sdk from submodule\n          # note: this must happen before project()\n          include(pico-sdk/pico_sdk_init.cmake)\n\n          project(my_project)\n\n          # initialize the Raspberry Pi Pico SDK\n          pico_sdk_init()\n\n          # rest of your project\n\n          ```\n\n   * Or with automatic download from GitHub :\n      1. Copy [pico_sdk_import.cmake](https://github.com/raspberrypi/pico-sdk/blob/master/external/pico_sdk_import.cmake)\n         from the SDK into your project directory\n      1. Setup a `CMakeLists.txt` like:\n\n          ```cmake\n          cmake_minimum_required(VERSION 3.13)\n\n          # initialize pico-sdk from GIT\n          # (note this can come from environment, CMake cache etc)\n          set(PICO_SDK_FETCH_FROM_GIT on)\n\n          # pico_sdk_import.cmake is a single file copied from this SDK\n          # note: this must happen before project()\n          include(pico_sdk_import.cmake)\n\n          project(my_project)\n\n          # initialize the Raspberry Pi Pico SDK\n          pico_sdk_init()\n\n          # rest of your project\n\n          ```\n\n   * Or by cloning the SDK locally, but without copying `pico_sdk_import.cmake`:\n       1. `git clone` this Raspberry Pi Pico SDK repository\n       2. Setup a `CMakeLists.txt` like:\n\n           ```cmake\n           cmake_minimum_required(VERSION 3.13)\n \n           # initialize the SDK directly\n           include(/path/to/pico-sdk/pico_sdk_init.cmake)\n \n           project(my_project)\n \n           # initialize the Raspberry Pi Pico SDK\n           pico_sdk_init()\n \n           # rest of your project\n \n           ```\n1. Write your code (see [pico-examples](https://github.com/raspberrypi/pico-examples) or the [Raspberry Pi Pico-Series C/C++ SDK](https://rptl.io/pico-c-sdk) documentation for more information)\n\n   About the simplest you can do is a single source file (e.g. hello_world.c)\n\n   ```c\n   #include <stdio.h>\n   #include \"pico/stdlib.h\"\n\n   int main() {\n       stdio_init_all();\n       printf(\"Hello, world!\\n\");\n       return 0;\n   }\n   ```\n   And add the following to your `CMakeLists.txt`:\n\n   ```cmake\n   add_executable(hello_world\n       hello_world.c\n   )\n\n   # Add pico_stdlib library which aggregates commonly used features\n   target_link_libraries(hello_world pico_stdlib)\n\n   # create map/bin/hex/uf2 file in addition to ELF.\n   pico_add_extra_outputs(hello_world)\n   ```\n\n   Note this example uses the default UART for _stdout_;\n   if you want to use the default USB see the [hello-usb](https://github.com/raspberrypi/pico-examples/tree/master/hello_world/usb) example.\n\n1. Setup a CMake build directory.\n      For example, if not using an IDE:\n      ```\n      $ mkdir build\n      $ cd build\n      $ cmake ..\n      ```   \n   \n   When building for a board other than the Raspberry Pi Pico, you should pass `-DPICO_BOARD=board_name` to the `cmake` command above, e.g. `cmake -DPICO_BOARD=pico2 ..` or `cmake -DPICO_BOARD=pico_w ..` to configure the SDK and build options accordingly for that particular board.\n\n   Specifying `PICO_BOARD=<booardname>` sets up various compiler defines (e.g. default pin numbers for UART and other hardware) and in certain \n   cases also enables the use of additional libraries (e.g. wireless support when building for `PICO_BOARD=pico_w`) which cannot\n   be built without a board which provides the requisite hardware functionality.\n\n   For a list of boards defined in the SDK itself, look in [this directory](src/boards/include/boards) which has a \n   header for each named board.\n\n1. Make your target from the build directory you created.\n      ```sh\n      $ make hello_world\n      ```\n\n1. You now have `hello_world.elf` to load via a debugger, or `hello_world.uf2` that can be installed and run on your Raspberry Pi Pico-series device via drag and drop.\n\n# RISC-V support on RP2350\n\nSee [Raspberry Pi Pico-series C/C++ SDK](https://rptl.io/pico-c-sdk) for information on setting up a build environment for RISC-V on RP2350.\n"
        },
        {
          "name": "WORKSPACE",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "bazel",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "external",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pico_sdk_init.cmake",
          "type": "blob",
          "size": 3.2822265625,
          "content": "# Pre-initialize the Raspberry Pi Pico SDK, setting up the platform and toolchain and some CMake utility functions\n# This file must be included prior to the project() call\n\n# Note: this file is perhaps named badly, as it provides a method pico_sdk_init which\n# the enclosing project calls LATER to actually \"initialize\" the SDK (by including the CMakeLists.txt from this\n# same directory)\n\nif (NOT TARGET _pico_sdk_pre_init_marker)\n    add_library(_pico_sdk_pre_init_marker INTERFACE)\n\n    function(pico_is_top_level_project VAR)\n        string(TOLOWER ${CMAKE_CURRENT_LIST_DIR} __list_dir)\n        string(TOLOWER ${CMAKE_SOURCE_DIR} __source_dir)\n        if (__source_dir STREQUAL __list_dir)\n            set(${VAR} 1 PARENT_SCOPE)\n        else()\n            set(${VAR} 0 PARENT_SCOPE)\n        endif()\n    endfunction()\n\n    function(pico_message_debug MESSAGE)\n        # The log-level system was added in CMake 3.15.\n        if(${CMAKE_VERSION} VERSION_LESS \"3.15.0\")\n            message(${MESSAGE})\n        else()\n            message(DEBUG ${MESSAGE})\n        endif()\n    endfunction()\n\n    if (NOT PICO_SDK_PATH)\n        set(PICO_SDK_PATH ${CMAKE_CURRENT_LIST_DIR})\n    endif ()\n\n    get_filename_component(PICO_SDK_PATH \"${PICO_SDK_PATH}\" REALPATH BASE_DIR \"${CMAKE_BINARY_DIR}\")\n\n    set(PICO_SDK_PATH ${CMAKE_CURRENT_LIST_DIR} CACHE PATH \"Path to the Raspberry Pi Pico SDK\" FORCE)\n\n    list(APPEND CMAKE_MODULE_PATH ${PICO_SDK_PATH}/cmake)\n\n    include(${CMAKE_CURRENT_LIST_DIR}/pico_sdk_version.cmake)\n    include(pico_utils)\n\n    message(\"PICO_SDK_PATH is ${CMAKE_CURRENT_LIST_DIR}\")\n    macro(pico_sdk_init)\n        if (NOT CMAKE_PROJECT_NAME)\n            message(WARNING \"pico_sdk_init() should be called after the project is created (and languages added)\")\n        endif()\n        add_subdirectory(${PICO_SDK_PATH} pico-sdk)\n    endmacro()\n\n    macro(add_sub_list_dirs var)\n        foreach(LIST_DIR IN LISTS ${var})\n            get_filename_component(SHORT_NAME \"${LIST_DIR}\" NAME)\n            pico_message_debug(\"Including custom CMakeLists.txt ${SHORT_NAME}\")\n            add_subdirectory(${LIST_DIR} ${SHORT_NAME})\n        endforeach()\n    endmacro()\n\n    macro(add_sub_list_files var)\n        foreach(LIST_FILE IN LISTS ${var})\n            pico_message_debug(\"Including custom CMake file ${LIST_FILE}\")\n            include(${LIST_FILE})\n        endforeach()\n    endmacro()\n\n    macro(pico_register_common_scope_var NAME)\n        if (NOT ${NAME} IN_LIST PICO_PROMOTE_COMMON_SCOPE_VARS)\n            list(APPEND PICO_PROMOTE_COMMON_SCOPE_VARS ${NAME})\n        endif()\n    endmacro()\n\n    set(PICO_PROMOTE_COMMON_SCOPE_VARS\n            PICO_INCLUDE_DIRS\n            PICO_SDK_POST_LIST_DIRS\n            PICO_SDK_POST_LIST_FILES\n            PICO_CONFIG_HEADER_FILES\n            PICO_RP2040_CONFIG_HEADER_FILES\n            PICO_BOARD_CMAKE_OVERRIDES\n    )\n\n    macro(pico_promote_common_scope_vars)\n        set(PICO_PROMOTE_COMMON_SCOPE_VARS ${PICO_PROMOTE_COMMON_SCOPE_VARS} PARENT_SCOPE)\n        foreach(VAR IN LISTS PICO_PROMOTE_COMMON_SCOPE_VARS)\n            SET(${VAR} ${${VAR}} PARENT_SCOPE)\n        endforeach()\n    endmacro()\n\n    include(pico_pre_load_platform)\n\n    # We want to configure correct toolchain prior to project load\n    # todo perhaps this should be included by the platform instead?\n    include(pico_pre_load_toolchain)\nendif()\n"
        },
        {
          "name": "pico_sdk_version.cmake",
          "type": "blob",
          "size": 1.7392578125,
          "content": "# PICO_BUILD_DEFINE: PICO_SDK_VERSION_MAJOR, SDK major version number, type=int, default=Current SDK major version, group=pico_base\n# PICO_CMAKE_CONFIG: PICO_SDK_VERSION_MAJOR, SDK major version number, type=int, default=Current SDK major version, group=pico_base\nset(PICO_SDK_VERSION_MAJOR 2)\n# PICO_BUILD_DEFINE: PICO_SDK_VERSION_MINOR, SDK minor version number, type=int, default=Current SDK minor version, group=pico_base\n# PICO_CMAKE_CONFIG: PICO_SDK_VERSION_MINOR, SDK minor version number, type=int, default=Current SDK minor version, group=pico_base\nset(PICO_SDK_VERSION_MINOR 1)\n# PICO_BUILD_DEFINE: PICO_SDK_VERSION_REVISION, SDK version revision, type=int, default=Current SDK revision, group=pico_base\n# PICO_CMAKE_CONFIG: PICO_SDK_VERSION_REVISION, SDK version revision, type=int, default=Current SDK revision, group=pico_base\nset(PICO_SDK_VERSION_REVISION 0)\n# PICO_BUILD_DEFINE: PICO_SDK_VERSION_PRE_RELEASE_ID, Optional SDK pre-release version identifier, default=Current SDK pre-release identifier, type=string, group=pico_base\n# PICO_CMAKE_CONFIG: PICO_SDK_VERSION_PRE_RELEASE_ID, Optional SDK pre-release version identifier, default=Current SDK pre-release identifier, type=string, group=pico_base\n#set(PICO_SDK_VERSION_PRE_RELEASE_ID develop)\n\n# PICO_BUILD_DEFINE: PICO_SDK_VERSION_STRING, SDK version string, type=string, default=Current SDK version string, group=pico_base\n# PICO_CMAKE_CONFIG: PICO_SDK_VERSION_STRING, SDK version string, type=string, default=Current SDK version string, group=pico_base\nset(PICO_SDK_VERSION_STRING \"${PICO_SDK_VERSION_MAJOR}.${PICO_SDK_VERSION_MINOR}.${PICO_SDK_VERSION_REVISION}\")\n\nif (PICO_SDK_VERSION_PRE_RELEASE_ID)\n    set(PICO_SDK_VERSION_STRING \"${PICO_SDK_VERSION_STRING}-${PICO_SDK_VERSION_PRE_RELEASE_ID}\")\nendif()\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}