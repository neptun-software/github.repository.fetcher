{
  "metadata": {
    "timestamp": 1736710173347,
    "page": 855,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "mirror/busybox",
      "stars": 1688,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4677734375,
          "content": "#\n# Kbuild ignores\n#\n.*\n*.o\n*.o.*\n*.a\n*.s\nKbuild\nConfig.in\n\n#\n# Never ignore these\n#\n!.gitignore\n\n#\n# Normal output\n#\n/busybox\n/busybox_old\n/busybox_unstripped*\n\n#\n# Backups / patches\n#\n*~\n*.orig\n*.rej\n/*.patch\n\n#\n# debugging stuff\n#\ncore\n.gdb_history\n.gdbinit\n\n#\n# testing output\n#\n/busybox.links\n/runtest-tempdir-links\n/testsuite/echo-ne\n\n#\n# cscope output\n#\ncscope.files\ncscope.in.out\ncscope.out\ncscope.po.out\n\n#\n# ctags output\n#\ntags\nTAGS\n\n#\n# user-supplied scripts\n#\n/embed\n"
        },
        {
          "name": ".indent.pro",
          "type": "blob",
          "size": 0.8505859375,
          "content": "--blank-lines-after-declarations\n--blank-lines-after-procedures\n--break-before-boolean-operator\n--no-blank-lines-after-commas\n--braces-on-if-line\n--braces-on-struct-decl-line\n--comment-indentation25\n--declaration-comment-column25\n--no-comment-delimiters-on-blank-lines\n--cuddle-else\n--continuation-indentation4\n--case-indentation0\n--else-endif-column33\n--space-after-cast\n--line-comments-indentation0\n--declaration-indentation1\n--dont-format-first-column-comments\n--dont-format-comments\n--honour-newlines\n--indent-level4\n/* changed from 0 to 4 */\n--parameter-indentation4\n--line-length78 /* changed from 75 */\n--continue-at-parentheses\n--no-space-after-function-call-names\n--dont-break-procedure-type\n--dont-star-comments\n--leave-optional-blank-lines\n--dont-space-special-semicolon\n--tab-size4\n/* additions by Mark */\n--case-brace-indentation0\n--leave-preprocessor-space\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 5.259765625,
          "content": "List of the authors of code contained in BusyBox.\n\nIf you have code in BusyBox, you should be listed here.  If you should be\nlisted, or the description of what you have done needs more detail, or is\nincorrect, _please_ let me know.\n\n -Erik\n\n-----------\n\nPeter Willis <psyphreak@phreaker.net>\n    eject\n\nEmanuele Aina <emanuele.aina@tiscali.it>\n    run-parts\n\nErik Andersen <andersen@codepoet.org>\n    Tons of new stuff, major rewrite of most of the\n    core apps, tons of new apps as noted in header files.\n    Lots of tedious effort writing these boring docs that\n    nobody is going to actually read.\n\nLaurence Anderson <l.d.anderson@warwick.ac.uk>\n    rpm2cpio, unzip, get_header_cpio, read_gz interface, rpm\n\nJeff Angielski <jeff@theptrgroup.com>\n    ftpput, ftpget\n\nEnrik Berkhan <Enrik.Berkhan@inka.de>\n    setconsole\n\nJim Bauer <jfbauer@nfr.com>\n    modprobe shell dependency\n\nEdward Betts <edward@debian.org>\n    expr, hostid, logname, whoami\n\nJohn Beppu <beppu@codepoet.org>\n    du, nslookup, sort\n\nDavid Brownell <dbrownell@users.sourceforge.net>\n    zcip\n\nBrian Candler <B.Candler@pobox.com>\n    tiny-ls(ls)\n\nRandolph Chung <tausq@debian.org>\n    fbset, ping, hostname\n\nDave Cinege <dcinege@psychosis.com>\n    more(v2), makedevs, dutmp, modularization, auto links file,\n    various fixes, Linux Router Project maintenance\n\nJordan Crouse <jordan@cosmicpenguin.net>\n    ipcalc\n\nMagnus Damm <damm@opensource.se>\n    tftp client\n    insmod powerpc support\n\nLarry Doolittle <ldoolitt@recycle.lbl.gov>\n    pristine source directory compilation, lots of patches and fixes.\n\nGlenn Engel <glenne@engel.org>\n    httpd\n\nGennady Feldman <gfeldman@gena01.com>\n    Sysklogd (single threaded syslogd, IPC Circular buffer support,\n    logread), various fixes.\n\nRobert Griebl <sandman@handhelds.org>\n    modprobe, hwclock, suid/sgid handling, tinylogin integration\n    many bugfixes and enhancements\n\nKarl M. Hegbloom <karlheg@debian.org>\n    cp_mv.c, the test suite, various fixes to utility.c, &c.\n\nDaniel Jacobowitz <dan@debian.org>\n    mktemp.c\n\nMatt Kraai <kraai@alumni.cmu.edu>\n    documentation, bugfixes, test suite\n\nRob Landley <rob@landley.net>\n    Became busybox maintainer in 2006.\n\n    sed (major rewrite in 2003, and I now maintain the thing)\n    bunzip2 (complete from-scratch rewrite, then mjn3 optimized the result)\n    sort (more or less from scratch rewrite in 2004, I now maintain it)\n    mount (rewrite in 2005, I maintain the new one)\n\nStephan Linz <linz@li-pro.net>\n    ipcalc, Red Hat equivalence\n\nJohn Lombardo <john@deltanet.com>\n    tr\n\nGlenn McGrath <glenn.l.mcgrath@gmail.com>\n    Common unarchiving code and unarchiving applets, ifupdown, ftpgetput,\n    nameif, sed, patch, fold, install, uudecode.\n    Various bugfixes, review and apply numerous patches.\n\nManuel Novoa III <mjn3@codepoet.org>\n    cat, head, mkfifo, mknod, rmdir, sleep, tee, tty, uniq, usleep, wc, yes,\n    mesg, vconfig, nice, renice,\n    make_directory, parse_mode, dirname, mode_string,\n    get_last_path_component, simplify_path, and a number trivial libbb routines\n\n    also bug fixes, partial rewrites, and size optimizations in\n    ash, basename, cal, cmp, cp, df, du, echo, env, ln, logname, md5sum, mkdir,\n    mv, realpath, rm, sort, tail, touch, uname, watch, arith, human_readable,\n    interface, dutmp, ifconfig, route\n\nVladimir Oleynik <dzo@simtreas.ru>\n    cmdedit; bb_mkdep, xargs(current), httpd(current);\n    ports: ash, crond, fdisk (initial, unmaintained now), inetd, stty, traceroute,\n    top;\n    locale, various fixes\n    and irreconcilable critic of everything not perfect.\n\nBruce Perens <bruce@pixar.com>\n    Original author of BusyBox in 1995, 1996. Some of his code can\n    still be found hiding here and there...\n\nRodney Radford <rradford@mindspring.com>\n    ipcs, ipcrm\n\nTim Riker <Tim@Rikers.org>\n    bug fixes, member of fan club\n\nKent Robotti <robotti@metconnect.com>\n    reset, tons and tons of bug reports and patches.\n\nChip Rosenthal <chip@unicom.com>, <crosenth@covad.com>\n    wget - Contributed by permission of Covad Communications\n\nPavel Roskin <proski@gnu.org>\n    Lots of bugs fixes and patches.\n\nGyepi Sam <gyepi@praxis-sw.com>\n    Remote logging feature for syslogd\n\nRob Sullivan <cogito.ergo.cogito@gmail.com>\n    comm\n\nLinus Torvalds\n    mkswap, fsck.minix, mkfs.minix\n\nLinus Walleij\n    fbset and fbsplash config RGBA parsing\n    rewrite of mdev helper to create devices from /sys/dev\n\nMark Whitley <markw@codepoet.org>\n    grep, sed, cut, xargs(previous),\n    style-guide, new-applet-HOWTO, bug fixes, etc.\n\nCharles P. Wright <cpwright@villagenet.com>\n    gzip, mini-netcat(nc)\n\nEnrique Zanardi <ezanardi@ull.es>\n    tarcat (since removed), loadkmap, various fixes, Debian maintenance\n\nTito Ragusa <farmatito@tiscali.it>\n    devfsd and size optimizations in strings, openvt, chvt, deallocvt, hdparm,\n    fdformat, lsattr, chattr, id and eject.\n\nPaul Fox <pgf@foxharp.boston.ma.us>\n    vi editing mode for ash, various other patches/fixes\n\nRoberto A. Foglietta <me@roberto.foglietta.name>\n    port: dnsd\n\nBernhard Reutner-Fischer <rep.dot.nop@gmail.com>\n    misc\n\nMike Frysinger <vapier@gentoo.org>\n    initial e2fsprogs, printenv, setarch, sum, misc\n\nJie Zhang <jie.zhang@analog.com>\n    fixed two bugs in msh and hush (exitcode of killed processes)\n\nMaxime Coste <mawww@kakoune.org>\n    paste implementation\n\nRoger Knecht <rknecht@pm.me>\n    tree\n"
        },
        {
          "name": "Config.in",
          "type": "blob",
          "size": 23.17578125,
          "content": "#\n# For a description of the syntax of this configuration file,\n# see docs/Kconfig-language.txt.\n#\n\nmainmenu \"Configuration\"\n\nconfig HAVE_DOT_CONFIG\n\tbool\n\tdefault y\n\nmenu \"Settings\"\n\nconfig DESKTOP\n\tbool \"Enable compatibility for full-blown desktop systems (8kb)\"\n\tdefault y\n\thelp\n\tEnable applet options and features which are not essential.\n\tMany applet options have dedicated config options to (de)select them\n\tunder that applet; this options enables those options which have no\n\tindividual config item for them.\n\n\tSelect this if you plan to use busybox on full-blown desktop machine\n\twith common Linux distro, which needs higher level of command-line\n\tcompatibility.\n\n\tIf you are preparing your build to be used on an embedded box\n\twhere you have tighter control over the entire set of userspace\n\ttools, you can unselect this option for smaller code size.\n\nconfig EXTRA_COMPAT\n\tbool \"Provide compatible behavior for rare corner cases (bigger code)\"\n\tdefault n\n\thelp\n\tThis option makes grep, sed etc handle rare corner cases\n\t(embedded NUL bytes and such). This makes code bigger and uses\n\tsome GNU extensions in libc. You probably only need this option\n\tif you plan to run busybox on desktop.\n\nconfig FEDORA_COMPAT\n\tbool \"Building for Fedora distribution\"\n\tdefault n\n\thelp\n\tThis option makes some tools behave like they do on Fedora.\n\n\tAt the time of this writing (2017-08) this only affects uname:\n\tnormally, uname -p (processor) and uname -i (platform)\n\tare shown as \"unknown\", but with this option uname -p\n\tshows the same string as uname -m (machine type),\n\tand so does uname -i unless machine type is i486/i586/i686 -\n\tthen uname -i shows \"i386\".\n\nconfig INCLUDE_SUSv2\n\tbool \"Enable obsolete features removed before SUSv3\"\n\tdefault y\n\thelp\n\tThis option will enable backwards compatibility with SuSv2,\n\tspecifically, old-style numeric options ('command -1 <file>')\n\twill be supported in head, tail, and fold. (Note: should\n\taffect renice too.)\n\nconfig LONG_OPTS\n\tbool \"Support --long-options\"\n\tdefault y\n\thelp\n\tEnable this if you want busybox applets to use the gnu --long-option\n\tstyle, in addition to single character -a -b -c style options.\n\nconfig SHOW_USAGE\n\tbool \"Show applet usage messages\"\n\tdefault y\n\thelp\n\tEnabling this option, applets will show terse help messages\n\twhen invoked with wrong arguments.\n\tIf you do not want to show any (helpful) usage message when\n\tissuing wrong command syntax, you can say 'N' here,\n\tsaving approximately 7k.\n\nconfig FEATURE_VERBOSE_USAGE\n\tbool \"Show verbose applet usage messages\"\n\tdefault y\n\tdepends on SHOW_USAGE\n\thelp\n\tAll applets will show verbose help messages when invoked with --help.\n\tThis will add a lot of text to the binary.\n\nconfig FEATURE_COMPRESS_USAGE\n\tbool \"Store applet usage messages in compressed form\"\n\tdefault y\n\tdepends on SHOW_USAGE\n\thelp\n\tStore usage messages in .bz2 compressed form, uncompress them\n\ton-the-fly when \"APPLET --help\" is run.\n\n\tIf you have a really tiny busybox with few applets enabled (and\n\tbunzip2 isn't one of them), the overhead of the decompressor might\n\tbe noticeable. Also, if you run executables directly from ROM\n\tand have very little memory, this might not be a win. Otherwise,\n\tyou probably want this.\n\nconfig LFS\n\tbool \"Support files > 2 GB\"\n\tdefault y\n\thelp\n\tIf you need to work with large files, enable this option.\n\tThis will have no effect if your kernel or your C\n\tlibrary lacks large file support for large files. Some of the\n\tprograms that can benefit from large file support include dd, gzip,\n\tcp, mount, tar.\n\nconfig TIME64\n\tbool \"Support 64bit wide time types\"\n\tdefault y\n\tdepends on LFS\n\thelp\n\tMake times later than 2038 representable for several libc syscalls\n\t(stat, clk_gettime etc.). Note this switch is specific to glibc\n\tand has no effect on platforms that already use 64bit wide time types\n\t(i.e. all 64bit archs and some selected 32bit archs (currently riscv\n\tand x32)).\n\nconfig PAM\n\tbool \"Support PAM (Pluggable Authentication Modules)\"\n\tdefault n\n\thelp\n\tUse PAM in some applets (currently login and httpd) instead\n\tof direct access to password database.\n\nconfig FEATURE_DEVPTS\n\tbool \"Use the devpts filesystem for Unix98 PTYs\"\n\tdefault y\n\thelp\n\tEnable if you want to use Unix98 PTY support. If enabled,\n\tbusybox will use /dev/ptmx for the master side of the pseudoterminal\n\tand /dev/pts/<number> for the slave side. Otherwise, BSD style\n\t/dev/ttyp<number> will be used. To use this option, you should have\n\tdevpts mounted.\n\nconfig FEATURE_UTMP\n\tbool \"Support utmp file\"\n\tdefault y\n\thelp\n\tThe file /var/run/utmp is used to track who is currently logged in.\n\tWith this option on, certain applets (getty, login, telnetd etc)\n\twill create and delete entries there.\n\t\"who\" applet requires this option.\n\nconfig FEATURE_WTMP\n\tbool \"Support wtmp file\"\n\tdefault y\n\tdepends on FEATURE_UTMP\n\thelp\n\tThe file /var/run/wtmp is used to track when users have logged into\n\tand logged out of the system.\n\tWith this option on, certain applets (getty, login, telnetd etc)\n\twill append new entries there.\n\t\"last\" applet requires this option.\n\nconfig FEATURE_PIDFILE\n\tbool \"Support writing pidfiles\"\n\tdefault y\n\thelp\n\tThis option makes some applets (e.g. crond, syslogd, inetd) write\n\ta pidfile at the configured PID_FILE_PATH.  It has no effect\n\ton applets which require pidfiles to run.\n\nconfig PID_FILE_PATH\n\tstring \"Directory for pidfiles\"\n\tdefault \"/var/run\"\n\tdepends on FEATURE_PIDFILE || FEATURE_CROND_SPECIAL_TIMES\n\thelp\n\tThis is the default path where pidfiles are created.  Applets which\n\tallow you to set the pidfile path on the command line will override\n\tthis value.  The option has no effect on applets that require you to\n\tspecify a pidfile path.  When crond has the 'Support special times'\n\toption enabled, the 'crond.reboot' file is also stored here.\n\nconfig BUSYBOX\n\tbool \"Include busybox applet\"\n\tdefault y\n\thelp\n\tThe busybox applet provides general help message and allows\n\tthe included applets to be listed.  It also provides\n\toptional --install command to create applet links. If you unselect\n\tthis option, running busybox without any arguments will give\n\tjust a cryptic error message:\n\n\t$ busybox\n\tbusybox: applet not found\n\n\tRunning \"busybox APPLET [ARGS...]\" will still work, of course.\n\nconfig FEATURE_SHOW_SCRIPT\n\tbool \"Support --show SCRIPT\"\n\tdefault y\n\tdepends on BUSYBOX\n\nconfig FEATURE_INSTALLER\n\tbool \"Support --install [-s] to install applet links at runtime\"\n\tdefault y\n\tdepends on BUSYBOX\n\thelp\n\tEnable 'busybox --install [-s]' support. This will allow you to use\n\tbusybox at runtime to create hard links or symlinks for all the\n\tapplets that are compiled into busybox.\n\nconfig INSTALL_NO_USR\n\tbool \"Don't use /usr\"\n\tdefault n\n\thelp\n\tDisable use of /usr. \"busybox --install\" and \"make install\"\n\twill install applets only to /bin and /sbin,\n\tnever to /usr/bin or /usr/sbin.\n\nconfig FEATURE_SUID\n\tbool \"Drop SUID state for most applets\"\n\tdefault y\n\thelp\n\tWith this option you can install the busybox binary belonging\n\tto root with the suid bit set, enabling some applets to perform\n\troot-level operations even when run by ordinary users\n\t(for example, mounting of user mounts in fstab needs this).\n\n\tWith this option enabled, busybox drops privileges for applets\n\tthat don't need root access, before entering their main() function.\n\n\tIf you are really paranoid and don't want even initial busybox code\n\tto run under root for every applet, build two busybox binaries with\n\tdifferent applets in them (and the appropriate symlinks pointing\n\tto each binary), and only set the suid bit on the one that needs it.\n\n\tSome applets which require root rights (need suid bit on the binary\n\tor to be run by root) and will refuse to execute otherwise:\n\tcrontab, login, passwd, su, vlock, wall.\n\n\tThe applets which will use root rights if they have them\n\t(via suid bit, or because run by root), but would try to work\n\twithout root right nevertheless:\n\tfindfs, ping[6], traceroute[6], mount.\n\n\tNote that if you DO NOT select this option, but DO make busybox\n\tsuid root, ALL applets will run under root, which is a huge\n\tsecurity hole (think \"cp /some/file /etc/passwd\").\n\nconfig FEATURE_SUID_CONFIG\n\tbool \"Enable SUID configuration via /etc/busybox.conf\"\n\tdefault y\n\tdepends on FEATURE_SUID\n\thelp\n\tAllow the SUID/SGID state of an applet to be determined at runtime\n\tby checking /etc/busybox.conf. (This is sort of a poor man's sudo.)\n\tThe format of this file is as follows:\n\n\tAPPLET = [Ssx-][Ssx-][x-] [USER.GROUP]\n\n\ts: USER or GROUP is allowed to execute APPLET.\n\t   APPLET will run under USER or GROUP\n\t   (regardless of who's running it).\n\tS: USER or GROUP is NOT allowed to execute APPLET.\n\t   APPLET will run under USER or GROUP.\n\t   This option is not very sensical.\n\tx: USER/GROUP/others are allowed to execute APPLET.\n\t   No UID/GID change will be done when it is run.\n\t-: USER/GROUP/others are not allowed to execute APPLET.\n\n\tAn example might help:\n\n\t|[SUID]\n\t|su = ssx root.0 # applet su can be run by anyone and runs with\n\t|                # euid=0,egid=0\n\t|su = ssx        # exactly the same\n\t|\n\t|mount = sx- root.disk # applet mount can be run by root and members\n\t|                      # of group disk (but not anyone else)\n\t|                      # and runs with euid=0 (egid is not changed)\n\t|\n\t|cp = --- # disable applet cp for everyone\n\n\tThe file has to be owned by user root, group root and has to be\n\twriteable only by root:\n\t\t(chown 0.0 /etc/busybox.conf; chmod 600 /etc/busybox.conf)\n\tThe busybox executable has to be owned by user root, group\n\troot and has to be setuid root for this to work:\n\t\t(chown 0.0 /bin/busybox; chmod 4755 /bin/busybox)\n\n\tRobert 'sandman' Griebl has more information here:\n\t<url: http://www.softforge.de/bb/suid.html >.\n\nconfig FEATURE_SUID_CONFIG_QUIET\n\tbool \"Suppress warning message if /etc/busybox.conf is not readable\"\n\tdefault y\n\tdepends on FEATURE_SUID_CONFIG\n\thelp\n\t/etc/busybox.conf should be readable by the user needing the SUID,\n\tcheck this option to avoid users to be notified about missing\n\tpermissions.\n\nconfig FEATURE_PREFER_APPLETS\n\tbool \"exec prefers applets\"\n\tdefault n\n\thelp\n\tThis is an experimental option which directs applets about to\n\tcall 'exec' to try and find an applicable busybox applet before\n\tsearching the PATH. This is typically done by exec'ing\n\t/proc/self/exe.\n\n\tThis may affect shell, find -exec, xargs and similar applets.\n\tThey will use applets even if /bin/APPLET -> busybox link\n\tis missing (or is not a link to busybox). However, this causes\n\tproblems in chroot jails without mounted /proc and with ps/top\n\t(command name can be shown as 'exe' for applets started this way).\n\nconfig BUSYBOX_EXEC_PATH\n\tstring \"Path to busybox executable\"\n\tdefault \"/proc/self/exe\"\n\thelp\n\tWhen applets need to run other applets, busybox\n\tsometimes needs to exec() itself. When the /proc filesystem is\n\tmounted, /proc/self/exe always points to the currently running\n\texecutable. If you haven't got /proc, set this to wherever you\n\twant to run busybox from.\n\nconfig SELINUX\n\tbool \"Support NSA Security Enhanced Linux\"\n\tdefault n\n\thelp\n\tEnable support for SELinux in applets ls, ps, and id. Also provide\n\tthe option of compiling in SELinux applets.\n\n\tIf you do not have a complete SELinux userland installed, this stuff\n\twill not compile.  Specifially, libselinux 1.28 or better is\n\tdirectly required by busybox. If the installation is located in a\n\tnon-standard directory, provide it by invoking make as follows:\n\n\t\tCFLAGS=-I<libselinux-include-path> \\\n\t\tLDFLAGS=-L<libselinux-lib-path> \\\n\t\tmake\n\n\tMost people will leave this set to 'N'.\n\nconfig FEATURE_CLEAN_UP\n\tbool \"Clean up all memory before exiting (usually not needed)\"\n\tdefault n\n\thelp\n\tAs a size optimization, busybox normally exits without explicitly\n\tfreeing dynamically allocated memory or closing files. This saves\n\tspace since the OS will clean up for us, but it can confuse debuggers\n\tlike valgrind, which report tons of memory and resource leaks.\n\n\tDon't enable this unless you have a really good reason to clean\n\tthings up manually.\n\nconfig FEATURE_SYSLOG_INFO\n\tbool \"Support LOG_INFO level syslog messages\"\n\tdefault y\n\tdepends on FEATURE_SYSLOG\n\thelp\n\tApplets which send their output to syslog use either LOG_INFO or\n\tLOG_ERR log levels, but by disabling this option all messages will\n\tbe logged at the LOG_ERR level, saving just under 200 bytes.\n\n# These are auto-selected by other options\n\nconfig FEATURE_SYSLOG\n\tbool #No description makes it a hidden option\n\tdefault n\n\t#help\n\t#This option is auto-selected when you select any applet which may\n\t#send its output to syslog. You do not need to select it manually.\n\ncomment 'Build Options'\n\nconfig STATIC\n\tbool \"Build static binary (no shared libs)\"\n\tdefault n\n\thelp\n\tIf you want to build a static binary, which does not use\n\tor require any shared libraries, enable this option.\n\tStatic binaries are larger, but do not require functioning\n\tdynamic libraries to be present, which is important if used\n\tas a system rescue tool.\n\nconfig PIE\n\tbool \"Build position independent executable\"\n\tdefault n\n\tdepends on !STATIC\n\thelp\n\tHardened code option. PIE binaries are loaded at a different\n\taddress at each invocation. This has some overhead,\n\tparticularly on x86-32 which is short on registers.\n\n\tMost people will leave this set to 'N'.\n\nconfig NOMMU\n\tbool \"Force NOMMU build\"\n\tdefault n\n\thelp\n\tBusybox tries to detect whether architecture it is being\n\tbuilt against supports MMU or not. If this detection fails,\n\tor if you want to build NOMMU version of busybox for testing,\n\tyou may force NOMMU build here.\n\n\tMost people will leave this set to 'N'.\n\n# PIE can be made to work with BUILD_LIBBUSYBOX, but currently\n# build system does not support that\nconfig BUILD_LIBBUSYBOX\n\tbool \"Build shared libbusybox\"\n\tdefault n\n\tdepends on !FEATURE_PREFER_APPLETS && !PIE && !STATIC\n\thelp\n\tBuild a shared library libbusybox.so.N.N.N which contains all\n\tbusybox code.\n\n\tThis feature allows every applet to be built as a really tiny\n\tseparate executable linked against the library:\n\t|$ size 0_lib/l*\n\t|    text  data   bss     dec    hex filename\n\t|     939   212    28    1179    49b 0_lib/last\n\t|     939   212    28    1179    49b 0_lib/less\n\t|  919138  8328  1556  929022  e2cfe 0_lib/libbusybox.so.1.N.M\n\n\tThis is useful on NOMMU systems which are not capable\n\tof sharing executables, but are capable of sharing code\n\tin dynamic libraries.\n\nconfig FEATURE_LIBBUSYBOX_STATIC\n\tbool \"Pull in all external references into libbusybox\"\n\tdefault n\n\tdepends on BUILD_LIBBUSYBOX\n\thelp\n\tMake libbusybox library independent, not using or requiring\n\tany other shared libraries.\n\nconfig FEATURE_INDIVIDUAL\n\tbool \"Produce a binary for each applet, linked against libbusybox\"\n\tdefault y\n\tdepends on BUILD_LIBBUSYBOX\n\thelp\n\tIf your CPU architecture doesn't allow for sharing text/rodata\n\tsections of running binaries, but allows for runtime dynamic\n\tlibraries, this option will allow you to reduce memory footprint\n\twhen you have many different applets running at once.\n\n\tIf your CPU architecture allows for sharing text/rodata,\n\thaving single binary is more optimal.\n\n\tEach applet will be a tiny program, dynamically linked\n\tagainst libbusybox.so.N.N.N.\n\n\tYou need to have a working dynamic linker.\n\nconfig FEATURE_SHARED_BUSYBOX\n\tbool \"Produce additional busybox binary linked against libbusybox\"\n\tdefault y\n\tdepends on BUILD_LIBBUSYBOX\n\thelp\n\tBuild busybox, dynamically linked against libbusybox.so.N.N.N.\n\n\tYou need to have a working dynamic linker.\n\n### config BUILD_AT_ONCE\n###\tbool \"Compile all sources at once\"\n###\tdefault n\n###\thelp\n###\tNormally each source-file is compiled with one invocation of\n###\tthe compiler.\n###\tIf you set this option, all sources are compiled at once.\n###\tThis gives the compiler more opportunities to optimize which can\n###\tresult in smaller and/or faster binaries.\n###\n###\tSetting this option will consume alot of memory, e.g. if you\n###\tenable all applets with all features, gcc uses more than 300MB\n###\tRAM during compilation of busybox.\n###\n###\tThis option is most likely only beneficial for newer compilers\n###\tsuch as gcc-4.1 and above.\n###\n###\tSay 'N' unless you know what you are doing.\n\nconfig CROSS_COMPILER_PREFIX\n\tstring \"Cross compiler prefix\"\n\tdefault \"\"\n\thelp\n\tIf you want to build busybox with a cross compiler, then you\n\twill need to set this to the cross-compiler prefix, for example,\n\t\"i386-uclibc-\".\n\n\tNote that CROSS_COMPILE environment variable or\n\t\"make CROSS_COMPILE=xxx ...\" will override this selection.\n\n\tNative builds leave this empty.\n\nconfig SYSROOT\n\tstring \"Path to sysroot\"\n\tdefault \"\"\n\thelp\n\tIf you want to build busybox with a cross compiler, then you\n\tmight also need to specify where /usr/include and /usr/lib\n\twill be found.\n\n\tFor example, busybox can be built against an installed\n\tAndroid NDK, platform version 9, for ARM ABI with\n\n\tCONFIG_SYSROOT=/opt/android-ndk/platforms/android-9/arch-arm\n\n\tNative builds leave this empty.\n\nconfig EXTRA_CFLAGS\n\tstring \"Additional CFLAGS\"\n\tdefault \"\"\n\thelp\n\tAdditional CFLAGS to pass to the compiler verbatim.\n\nconfig EXTRA_LDFLAGS\n\tstring \"Additional LDFLAGS\"\n\tdefault \"\"\n\thelp\n\tAdditional LDFLAGS to pass to the linker verbatim.\n\nconfig EXTRA_LDLIBS\n\tstring \"Additional LDLIBS\"\n\tdefault \"\"\n\thelp\n\tAdditional LDLIBS to pass to the linker with -l.\n\nconfig USE_PORTABLE_CODE\n\tbool \"Avoid using GCC-specific code constructs\"\n\tdefault n\n\thelp\n\tUse this option if you are trying to compile busybox with\n\tcompiler other than gcc.\n\tIf you do use gcc, this option may needlessly increase code size.\n\nconfig STACK_OPTIMIZATION_386\n\tbool \"Use -mpreferred-stack-boundary=2 on i386 arch\"\n\tdefault y\n\thelp\n\tThis option makes for smaller code, but some libc versions\n\tdo not work with it (they use SSE instructions without\n\tensuring stack alignment).\n\nconfig STATIC_LIBGCC\n\tbool \"Use -static-libgcc\"\n\tdefault y\n\thelp\n\tThis option instructs gcc to link in a static version of its\n\tsupport library, libgcc. This means that the binary will require\n\tone fewer dynamic library at run time.\n\ncomment 'Installation Options (\"make install\" behavior)'\n\nchoice\n\tprompt \"What kind of applet links to install\"\n\tdefault INSTALL_APPLET_SYMLINKS\n\thelp\n\tChoose what kind of links to applets are created by \"make install\".\n\nconfig INSTALL_APPLET_SYMLINKS\n\tbool \"as soft-links\"\n\thelp\n\tInstall applets as soft-links to the busybox binary. This needs some\n\tfree inodes on the filesystem, but might help with filesystem\n\tgenerators that can't cope with hard-links.\n\nconfig INSTALL_APPLET_HARDLINKS\n\tbool \"as hard-links\"\n\thelp\n\tInstall applets as hard-links to the busybox binary. This might\n\tcount on a filesystem with few inodes.\n\nconfig INSTALL_APPLET_SCRIPT_WRAPPERS\n\tbool \"as script wrappers\"\n\thelp\n\tInstall applets as script wrappers that call the busybox binary.\n\nconfig INSTALL_APPLET_DONT\n\tbool \"not installed\"\n\thelp\n\tDo not install applet links. Useful when you plan to use\n\tbusybox --install for installing links, or plan to use\n\ta standalone shell and thus don't need applet links.\n\nendchoice\n\nchoice\n\tprompt \"/bin/sh applet link\"\n\tdefault INSTALL_SH_APPLET_SYMLINK\n\tdepends on INSTALL_APPLET_SCRIPT_WRAPPERS\n\thelp\n\tChoose how you install /bin/sh applet link.\n\nconfig INSTALL_SH_APPLET_SYMLINK\n\tbool \"as soft-link\"\n\thelp\n\tInstall /bin/sh applet as soft-link to the busybox binary.\n\nconfig INSTALL_SH_APPLET_HARDLINK\n\tbool \"as hard-link\"\n\thelp\n\tInstall /bin/sh applet as hard-link to the busybox binary.\n\nconfig INSTALL_SH_APPLET_SCRIPT_WRAPPER\n\tbool \"as script wrapper\"\n\thelp\n\tInstall /bin/sh applet as script wrapper that calls\n\tthe busybox binary.\n\nendchoice\n\nconfig PREFIX\n\tstring \"Destination path for 'make install'\"\n\tdefault \"./_install\"\n\thelp\n\tWhere \"make install\" should install busybox binary and links.\n\ncomment 'Debugging Options'\n\nconfig DEBUG\n\tbool \"Build with debug information\"\n\tdefault n\n\thelp\n\tSay Y here to compile with debug information.\n\tThis increases the size of the binary considerably, and\n\tshould only be used when doing development.\n\n\tThis adds -g option to gcc command line.\n\n\tMost people should answer N.\n\nconfig DEBUG_PESSIMIZE\n\tbool \"Disable compiler optimizations\"\n\tdefault n\n\tdepends on DEBUG\n\thelp\n\tThe compiler's optimization of source code can eliminate and reorder\n\tcode, resulting in an executable that's hard to understand when\n\tstepping through it with a debugger. This switches it off, resulting\n\tin a much bigger executable that more closely matches the source\n\tcode.\n\n\tThis replaces -Os/-O2 with -O0 in gcc command line.\n\nconfig DEBUG_SANITIZE\n\tbool \"Enable runtime sanitizers (ASAN/LSAN/USAN/etc...)\"\n\tdefault n\n\thelp\n\tSay Y here if you want to enable runtime sanitizers. These help\n\tcatch bad memory accesses (e.g. buffer overflows), but will make\n\tthe executable larger and slow down runtime a bit.\n\n\tThis adds -fsanitize=foo options to gcc command line.\n\n\tIf you aren't developing/testing busybox, say N here.\n\nconfig UNIT_TEST\n\tbool \"Build unit tests\"\n\tdefault n\n\thelp\n\tSay Y here if you want to build unit tests (both the framework and\n\ttest cases) as an applet. This results in bigger code, so you\n\tprobably don't want this option in production builds.\n\nconfig WERROR\n\tbool \"Abort compilation on any warning\"\n\tdefault n\n\thelp\n\tThis adds -Werror to gcc command line.\n\n\tMost people should answer N.\n\nconfig WARN_SIMPLE_MSG\n\tbool \"Warn about single parameter bb_xx_msg calls\"\n\tdefault n\n\thelp\n\tThis will cause warnings to be shown for any instances of\n\tbb_error_msg(), bb_error_msg_and_die(), bb_perror_msg(),\n\tbb_perror_msg_and_die(), bb_herror_msg() or bb_herror_msg_and_die()\n\tbeing called with a single parameter. In these cases the equivalent\n\tbb_simple_xx_msg function should be used instead.\n\tNote that use of STRERROR_FMT may give false positives.\n\n\tIf you aren't developing busybox, say N here.\n\nchoice\n\tprompt \"Additional debugging library\"\n\tdefault NO_DEBUG_LIB\n\thelp\n\tUsing an additional debugging library will make busybox become\n\tconsiderably larger and will cause it to run more slowly. You\n\tshould always leave this option disabled for production use.\n\n\tdmalloc support:\n\t----------------\n\tThis enables compiling with dmalloc ( http://dmalloc.com/ )\n\twhich is an excellent public domain mem leak and malloc problem\n\tdetector. To enable dmalloc, before running busybox you will\n\twant to properly set your environment, for example:\n\t\texport DMALLOC_OPTIONS=debug=0x34f47d83,inter=100,log=logfile\n\tThe 'debug=' value is generated using the following command\n\tdmalloc -p log-stats -p log-non-free -p log-bad-space \\\n\t\t-p log-elapsed-time -p check-fence -p check-heap \\\n\t\t-p check-lists -p check-blank -p check-funcs -p realloc-copy \\\n\t\t-p allow-free-null\n\n\tElectric-fence support:\n\t-----------------------\n\tThis enables compiling with Electric-fence support. Electric\n\tfence is another very useful malloc debugging library which uses\n\tyour computer's virtual memory hardware to detect illegal memory\n\taccesses. This support will make busybox be considerably larger\n\tand run slower, so you should leave this option disabled unless\n\tyou are hunting a hard to find memory problem.\n\n\nconfig NO_DEBUG_LIB\n\tbool \"None\"\n\nconfig DMALLOC\n\tbool \"Dmalloc\"\n\nconfig EFENCE\n\tbool \"Electric-fence\"\n\nendchoice\n\nsource libbb/Config.in\n\nendmenu\n\ncomment \"Applets\"\n\nsource archival/Config.in\nsource coreutils/Config.in\nsource console-tools/Config.in\nsource debianutils/Config.in\nsource klibc-utils/Config.in\nsource editors/Config.in\nsource findutils/Config.in\nsource init/Config.in\nsource loginutils/Config.in\nsource e2fsprogs/Config.in\nsource modutils/Config.in\nsource util-linux/Config.in\nsource miscutils/Config.in\nsource networking/Config.in\nsource printutils/Config.in\nsource mailutils/Config.in\nsource procps/Config.in\nsource runit/Config.in\nsource selinux/Config.in\nsource shell/Config.in\nsource sysklogd/Config.in\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 5.97265625,
          "content": "Building:\n=========\n\nThe BusyBox build process is similar to the Linux kernel build:\n\n  make menuconfig     # This creates a file called \".config\"\n  make                # This creates the \"busybox\" executable\n  make install        # or make CONFIG_PREFIX=/path/from/root install\n\nThe full list of configuration and install options is available by typing:\n\n  make help\n\nQuick Start:\n============\n\nThe easy way to try out BusyBox for the first time, without having to install\nit, is to enable all features and then use \"standalone shell\" mode with a\nblank command $PATH.\n\nTo enable all features, use \"make defconfig\", which produces the largest\ngeneral-purpose configuration.  It's allyesconfig minus debugging options,\noptional packaging choices, and a few special-purpose features requiring\nextra configuration to use.  Then enable \"standalone shell\" feature:\n\n  make defconfig\n  make menuconfig\n  # select Busybox Settings\n  #   then General Configuration\n  #     then exec prefers applets\n  #   exit back to top level menu\n  #   select Shells\n  #     then Standalone shell\n  #   exit back to top level menu\n  # exit and save new configuration\n  #   OR\n  # use these commands to modify .config directly:\n  sed -e 's/.*FEATURE_PREFER_APPLETS.*/CONFIG_FEATURE_PREFER_APPLETS=y/' -i .config\n  sed -e 's/.*FEATURE_SH_STANDALONE.*/CONFIG_FEATURE_SH_STANDALONE=y/' -i .config\n  make\n  PATH= ./busybox ash\n\nStandalone shell mode causes busybox's built-in command shell to run\nany built-in busybox applets directly, without looking for external\nprograms by that name.  Supplying an empty command path (as above) means\nthe only commands busybox can find are the built-in ones.\n\nNote that the standalone shell requires CONFIG_BUSYBOX_EXEC_PATH\nto be set appropriately, depending on whether or not /proc/self/exe is\navailable. If you do not have /proc, then point that config option\nto the location of your busybox binary, usually /bin/busybox.\nAnother solution is to patch the kernel (see\nexamples/linux-*_proc_self_exe.patch) to make exec(\"/proc/self/exe\")\nalways work.\n\nConfiguring Busybox:\n====================\n\nBusybox is optimized for size, but enabling the full set of functionality\nstill results in a fairly large executable -- more than 1 megabyte when\nstatically linked.  To save space, busybox can be configured with only the\nset of applets needed for each environment.  The minimal configuration, with\nall applets disabled, produces a 4k executable.  (It's useless, but very small.)\n\nThe manual configurator \"make menuconfig\" modifies the existing configuration.\n(For systems without ncurses, try \"make config\" instead.) The two most\ninteresting starting configurations are \"make allnoconfig\" (to start with\neverything disabled and add just what you need), and \"make defconfig\" (to\nstart with everything enabled and remove what you don't need).  If menuconfig\nis run without an existing configuration, make defconfig will run first to\ncreate a known starting point.\n\nOther starting configurations (mostly used for testing purposes) include\n\"make allbareconfig\" (enables all applets but disables all optional features),\n\"make allyesconfig\" (enables absolutely everything including debug features),\nand \"make randconfig\" (produce a random configuration).  The configs/ directory\ncontains a number of additional configuration files ending in _defconfig which\nare useful in specific cases.  \"make help\" will list them.\n\nConfiguring BusyBox produces a file \".config\", which can be saved for future\nuse.  Run \"make oldconfig\" to bring a .config file from an older version of\nbusybox up to date.\n\nInstalling Busybox:\n===================\n\nBusybox is a single executable that can behave like many different commands,\nand BusyBox uses the name it was invoked under to determine the desired\nbehavior.  (Try \"mv busybox ls\" and then \"./ls -l\".)\n\nInstalling busybox consists of creating symlinks (or hardlinks) to the busybox\nbinary for each applet enabled in busybox, and making sure these symlinks are\nin the shell's command $PATH.  Running \"make install\" creates these symlinks,\nor \"make install-hardlinks\" creates hardlinks instead (useful on systems with\na limited number of inodes).  This install process uses the file\n\"busybox.links\" (created by make), which contains the list of enabled applets\nand the path at which to install them.\n\nInstalling links to busybox is not always necessary.  The special applet name\n\"busybox\" (or with any optional suffix, such as \"busybox-static\") uses the\nfirst argument to determine which applet to behave as, for example\n\"./busybox cat LICENSE\".  (Running the busybox applet with no arguments gives\na list of all enabled applets.) The standalone shell can also call busybox\napplets without links to busybox under other names in the filesystem.  You can\nalso configure a standalone install capability into the busybox base applet,\nand then install such links at runtime with one of \"busybox --install\" (for\nhardlinks) or \"busybox --install -s\" (for symlinks).\n\nIf you enabled the busybox shared library feature (libbusybox.so) and want\nto run tests without installing, set your LD_LIBRARY_PATH accordingly when\nrunning the executable:\n\n  LD_LIBRARY_PATH=`pwd` ./busybox\n\nBuilding out-of-tree:\n=====================\n\nBy default, the BusyBox build puts its temporary files in the source tree.\nBuilding from a read-only source tree, or building multiple configurations from\nthe same source directory, requires the ability to put the temporary files\nsomewhere else.\n\nTo build out of tree, cd to an empty directory and configure busybox from there:\n\n  make KBUILD_SRC=/path/to/source -f /path/to/source/Makefile defconfig\n  make\n  make install\n\nAlternately, use the O=$BUILDPATH option (with an absolute path) during the\nconfiguration step, as in:\n\n  make O=/some/empty/directory allyesconfig\n  cd /some/empty/directory\n  make\n  make CONFIG_PREFIX=. install\n\nMore Information:\n=================\n\nSe also the busybox FAQ, under the questions \"How can I get started using\nBusyBox\" and \"How do I build a BusyBox-based system?\"  The BusyBox FAQ is\navailable from http://www.busybox.net/FAQ.html\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 17.91796875,
          "content": "--- A note on GPL versions\n\nBusyBox is distributed under version 2 of the General Public License (included\nin its entirety, below).  Version 2 is the only version of this license which\nthis version of BusyBox (or modified versions derived from this one) may be\ndistributed under.\n\n------------------------------------------------------------------------\n\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.\n     51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Library General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\f\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\f\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\f\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\f\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\f\n\t    How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year  name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Library General\nPublic License instead of this License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 42.0107421875,
          "content": "VERSION = 1\nPATCHLEVEL = 37\nSUBLEVEL = 0\nEXTRAVERSION = .git\nNAME = Unnamed\n\n# *DOCUMENTATION*\n# To see a list of typical targets execute \"make help\"\n# More info can be located in ./README\n# Comments in this file are targeted only to the developer, do not\n# expect to learn how to build the kernel reading this file.\n\n# Do not print \"Entering directory ...\"\nMAKEFLAGS += --no-print-directory\n\n# We are using a recursive build, so we need to do a little thinking\n# to get the ordering right.\n#\n# Most importantly: sub-Makefiles should only ever modify files in\n# their own directory. If in some directory we have a dependency on\n# a file in another dir (which doesn't happen often, but it's often\n# unavoidable when linking the built-in.o targets which finally\n# turn into busybox), we will call a sub make in that other dir, and\n# after that we are sure that everything which is in that other dir\n# is now up to date.\n#\n# The only cases where we need to modify files which have global\n# effects are thus separated out and done before the recursive\n# descending is started. They are now explicitly listed as the\n# prepare rule.\n\n# To put more focus on warnings, be less verbose as default\n# Use 'make V=1' to see the full commands\n\nifdef V\n  ifeq (\"$(origin V)\", \"command line\")\n    KBUILD_VERBOSE = $(V)\n  endif\nendif\nifndef KBUILD_VERBOSE\n  KBUILD_VERBOSE = 0\nendif\n\n# Call sparse as part of compilation of C files\n# Use 'make C=1' to enable sparse checking\n\nifdef C\n  ifeq (\"$(origin C)\", \"command line\")\n    KBUILD_CHECKSRC = $(C)\n  endif\nendif\nifndef KBUILD_CHECKSRC\n  KBUILD_CHECKSRC = 0\nendif\n\n# Use make M=dir to specify directory of external module to build\n# Old syntax make ... SUBDIRS=$PWD is still supported\n# Setting the environment variable KBUILD_EXTMOD take precedence\nifdef SUBDIRS\n  KBUILD_EXTMOD ?= $(SUBDIRS)\nendif\nifdef M\n  ifeq (\"$(origin M)\", \"command line\")\n    KBUILD_EXTMOD := $(M)\n  endif\nendif\n\n\n# kbuild supports saving output files in a separate directory.\n# To locate output files in a separate directory two syntaxes are supported.\n# In both cases the working directory must be the root of the kernel src.\n# 1) O=\n# Use \"make O=dir/to/store/output/files/\"\n#\n# 2) Set KBUILD_OUTPUT\n# Set the environment variable KBUILD_OUTPUT to point to the directory\n# where the output files shall be placed.\n# export KBUILD_OUTPUT=dir/to/store/output/files/\n# make\n#\n# The O= assignment takes precedence over the KBUILD_OUTPUT environment\n# variable.\n\n\n# KBUILD_SRC is set on invocation of make in OBJ directory\n# KBUILD_SRC is not intended to be used by the regular user (for now)\nifeq ($(KBUILD_SRC),)\n\n# OK, Make called in directory where kernel src resides\n# Do we want to locate output files in a separate directory?\nifdef O\n  ifeq (\"$(origin O)\", \"command line\")\n    KBUILD_OUTPUT := $(O)\n  endif\nendif\n\n# That's our default target when none is given on the command line\nPHONY := _all\n_all:\n\nifneq ($(KBUILD_OUTPUT),)\n# Invoke a second make in the output directory, passing relevant variables\n# check that the output directory actually exists\nsaved-output := $(KBUILD_OUTPUT)\nKBUILD_OUTPUT := $(shell cd $(KBUILD_OUTPUT) && /bin/pwd)\n$(if $(KBUILD_OUTPUT),, \\\n     $(error output directory \"$(saved-output)\" does not exist))\n\nPHONY += $(MAKECMDGOALS)\n\n$(filter-out _all,$(MAKECMDGOALS)) _all:\n\t$(if $(KBUILD_VERBOSE:1=),@)$(MAKE) -C $(KBUILD_OUTPUT) \\\n\tKBUILD_SRC=$(CURDIR) \\\n\tKBUILD_EXTMOD=\"$(KBUILD_EXTMOD)\" -f $(CURDIR)/Makefile $@\n\n# Leave processing to above invocation of make\nskip-makefile := 1\nendif # ifneq ($(KBUILD_OUTPUT),)\nendif # ifeq ($(KBUILD_SRC),)\n\n# We process the rest of the Makefile if this is the final invocation of make\nifeq ($(skip-makefile),)\n\n# If building an external module we do not care about the all: rule\n# but instead _all depend on modules\nPHONY += all\nifeq ($(KBUILD_EXTMOD),)\n_all: all\nelse\n_all: modules\nendif\n\nsrctree\t\t:= $(if $(KBUILD_SRC),$(KBUILD_SRC),$(CURDIR))\nTOPDIR\t\t:= $(srctree)\n# FIXME - TOPDIR is obsolete, use srctree/objtree\nobjtree\t\t:= $(CURDIR)\nsrc\t\t:= $(srctree)\nobj\t\t:= $(objtree)\n\nVPATH\t\t:= $(srctree)$(if $(KBUILD_EXTMOD),:$(KBUILD_EXTMOD))\n\nexport srctree objtree VPATH TOPDIR\n\n\n# Cross compiling and selecting different set of gcc/bin-utils\n# ---------------------------------------------------------------------------\n#\n# When performing cross compilation for other architectures ARCH shall be set\n# to the target architecture. (See arch/* for the possibilities).\n# ARCH can be set during invocation of make:\n# make ARCH=ia64\n# Another way is to have ARCH set in the environment.\n# The default ARCH is the host where make is executed.\n\n# CROSS_COMPILE specify the prefix used for all executables used\n# during compilation. Only gcc and related bin-utils executables\n# are prefixed with $(CROSS_COMPILE).\n# CROSS_COMPILE can be set on the command line\n# make CROSS_COMPILE=ia64-linux-\n# Alternatively CROSS_COMPILE can be set in the environment.\n# Default value for CROSS_COMPILE is not to prefix executables\n# Note: Some architectures assign CROSS_COMPILE in their arch/*/Makefile\n\nCROSS_COMPILE ?=\n# bbox: we may have CONFIG_CROSS_COMPILER_PREFIX in .config,\n# and it has not been included yet... thus using an awkward syntax.\nifeq ($(CROSS_COMPILE),)\nCROSS_COMPILE := $(shell grep ^CONFIG_CROSS_COMPILER_PREFIX .config 2>/dev/null)\nCROSS_COMPILE := $(subst CONFIG_CROSS_COMPILER_PREFIX=,,$(CROSS_COMPILE))\nCROSS_COMPILE := $(subst \",,$(CROSS_COMPILE))\n#\")\nendif\n\n# SUBARCH tells the usermode build what the underlying arch is.  That is set\n# first, and if a usermode build is happening, the \"ARCH=um\" on the command\n# line overrides the setting of ARCH below.  If a native build is happening,\n# then ARCH is assigned, getting whatever value it gets normally, and\n# SUBARCH is subsequently ignored.\n\nifneq ($(CROSS_COMPILE),)\nSUBARCH := $(shell echo $(CROSS_COMPILE) | cut -d- -f1 | sed 's:^.*/::g')\nelse\nSUBARCH := $(shell uname -m)\nendif\nSUBARCH := $(shell echo $(SUBARCH) | sed -e s/i.86/i386/ -e s/sun4u/sparc64/ \\\n\t\t\t\t\t -e s/arm.*/arm/ -e s/sa110/arm/ \\\n\t\t\t\t\t -e s/s390x/s390/ -e s/parisc64/parisc/ \\\n\t\t\t\t\t -e s/ppc.*/powerpc/ -e s/mips.*/mips/ )\n\nARCH ?= $(SUBARCH)\n\n# Architecture as present in compile.h\nUTS_MACHINE := $(ARCH)\n\n# SHELL used by kbuild\nCONFIG_SHELL := $(shell if [ -x \"$$BASH\" ]; then echo $$BASH; \\\n\t  else if [ -x /bin/bash ]; then echo /bin/bash; \\\n\t  else echo sh; fi ; fi)\n\n# \tDecide whether to build built-in, modular, or both.\n#\tNormally, just do built-in.\n\nKBUILD_MODULES :=\nKBUILD_BUILTIN := 1\n\n#\tIf we have only \"make modules\", don't compile built-in objects.\n#\tWhen we're building modules with modversions, we need to consider\n#\tthe built-in objects during the descend as well, in order to\n#\tmake sure the checksums are uptodate before we record them.\n\nifeq ($(MAKECMDGOALS),modules)\n  KBUILD_BUILTIN := $(if $(CONFIG_MODVERSIONS),1)\nendif\n\n#\tIf we have \"make <whatever> modules\", compile modules\n#\tin addition to whatever we do anyway.\n#\tJust \"make\" or \"make all\" shall build modules as well\n\nifneq ($(filter all _all modules,$(MAKECMDGOALS)),)\n  KBUILD_MODULES := 1\nendif\n\nifeq ($(MAKECMDGOALS),)\n  KBUILD_MODULES := 1\nendif\n\nexport KBUILD_MODULES KBUILD_BUILTIN\nexport KBUILD_CHECKSRC KBUILD_SRC KBUILD_EXTMOD\n\n# Beautify output\n# ---------------------------------------------------------------------------\n#\n# Normally, we echo the whole command before executing it. By making\n# that echo $($(quiet)$(cmd)), we now have the possibility to set\n# $(quiet) to choose other forms of output instead, e.g.\n#\n#         quiet_cmd_cc_o_c = Compiling $(RELDIR)/$@\n#         cmd_cc_o_c       = $(CC) $(c_flags) -c -o $@ $<\n#\n# If $(quiet) is empty, the whole command will be printed.\n# If it is set to \"quiet_\", only the short version will be printed.\n# If it is set to \"silent_\", nothing wil be printed at all, since\n# the variable $(silent_cmd_cc_o_c) doesn't exist.\n#\n# A simple variant is to prefix commands with $(Q) - that's useful\n# for commands that shall be hidden in non-verbose mode.\n#\n#\t$(Q)ln $@ :<\n#\n# If KBUILD_VERBOSE equals 0 then the above command will be hidden.\n# If KBUILD_VERBOSE equals 1 then the above command is displayed.\n\nifeq ($(KBUILD_VERBOSE),1)\n  quiet =\n  Q =\nelse\n  quiet=quiet_\n  Q = @\nendif\n\n# If the user is running make -s (silent mode), suppress echoing of\n# commands\n\nifneq ($(findstring s,$(MAKEFLAGS)),)\n  quiet=silent_\nendif\n\nexport quiet Q KBUILD_VERBOSE\n\n\n# Look for make include files relative to root of kernel src\nMAKEFLAGS += --include-dir=$(srctree)\n\nHOSTCC  \t= gcc\nHOSTCXX  \t= g++\nHOSTCFLAGS\t:=\nHOSTCXXFLAGS\t:=\n# We need some generic definitions\ninclude $(srctree)/scripts/Kbuild.include\n\nHOSTCFLAGS\t+= $(call hostcc-option,-Wall -Wstrict-prototypes -O2 -fomit-frame-pointer,)\nHOSTCXXFLAGS\t+= -O2\n\n# For maximum performance (+ possibly random breakage, uncomment\n# the following)\n\nMAKEFLAGS += -rR\n\n# Make variables (CC, etc...)\n\nAS\t\t= $(CROSS_COMPILE)as\nCC\t\t= $(CROSS_COMPILE)gcc\nLD\t\t= $(CC) -nostdlib\nCPP\t\t= $(CC) -E\nAR\t\t= $(CROSS_COMPILE)ar\nNM\t\t= $(CROSS_COMPILE)nm\nSTRIP\t\t= $(CROSS_COMPILE)strip\nOBJCOPY\t\t= $(CROSS_COMPILE)objcopy\nOBJDUMP\t\t= $(CROSS_COMPILE)objdump\nPKG_CONFIG\t?= $(CROSS_COMPILE)pkg-config\nAWK\t\t= awk\nGENKSYMS\t= scripts/genksyms/genksyms\nDEPMOD\t\t= /sbin/depmod\nKALLSYMS\t= scripts/kallsyms\nPERL\t\t= perl\nCHECK\t\t= sparse\n\nCHECKFLAGS     := -D__linux__ -Dlinux -D__STDC__ -Dunix -D__unix__ -Wbitwise $(CF)\nMODFLAGS\t= -DMODULE\nCFLAGS_MODULE   = $(MODFLAGS)\nAFLAGS_MODULE   = $(MODFLAGS)\nLDFLAGS_MODULE  = -r\nCFLAGS_KERNEL\t=\nAFLAGS_KERNEL\t=\n\n\n# Use LINUXINCLUDE when you must reference the include/ directory.\n# Needed to be compatible with the O= option\nCFLAGS\t\t:= $(CFLAGS)\n# Added only to final link stage of busybox binary\nCFLAGS_busybox\t:= $(CFLAGS_busybox)\nCPPFLAGS\t:= $(CPPFLAGS)\nAFLAGS\t\t:= $(AFLAGS)\nLDFLAGS\t\t:= $(LDFLAGS)\nLDLIBS\t\t:=\n\n# Read KERNELRELEASE from .kernelrelease (if it exists)\nKERNELRELEASE = $(shell cat .kernelrelease 2> /dev/null)\nKERNELVERSION = $(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)\n\nexport\tVERSION PATCHLEVEL SUBLEVEL KERNELRELEASE KERNELVERSION \\\n\tARCH CONFIG_SHELL HOSTCC HOSTCFLAGS CROSS_COMPILE AS LD CC \\\n\tCPP AR NM STRIP OBJCOPY OBJDUMP MAKE AWK GENKSYMS PERL UTS_MACHINE \\\n\tHOSTCXX HOSTCXXFLAGS LDFLAGS_MODULE CHECK CHECKFLAGS\n\nexport CPPFLAGS NOSTDINC_FLAGS LINUXINCLUDE OBJCOPYFLAGS LDFLAGS\nexport CFLAGS CFLAGS_KERNEL CFLAGS_MODULE\nexport AFLAGS AFLAGS_KERNEL AFLAGS_MODULE\nexport FLTFLAGS\n\n# When compiling out-of-tree modules, put MODVERDIR in the module\n# tree rather than in the kernel tree. The kernel tree might\n# even be read-only.\nexport MODVERDIR := $(if $(KBUILD_EXTMOD),$(firstword $(KBUILD_EXTMOD))/).tmp_versions\n\n# Files to ignore in find ... statements\n\nRCS_FIND_IGNORE := \\( -name SCCS -o -name BitKeeper -o -name .svn -o -name CVS -o -name .pc -o -name .hg -o -name .git \\) -prune -o\nexport RCS_TAR_IGNORE := --exclude SCCS --exclude BitKeeper --exclude .svn --exclude CVS --exclude .pc --exclude .hg --exclude .git\n\n# ===========================================================================\n# Rules shared between *config targets and build targets\n\n# Basic helpers built in scripts/\nPHONY += scripts_basic\nscripts_basic:\n\t$(Q)$(MAKE) $(build)=scripts/basic\n\n# To avoid any implicit rule to kick in, define an empty command.\nscripts/basic/%: scripts_basic ;\n\n# This target generates Kbuild's and Config.in's from *.c files\nPHONY += gen_build_files\ngen_build_files: $(wildcard $(srctree)/*/*.c) $(wildcard $(srctree)/*/*/*.c) $(wildcard $(srctree)/embed/*)\n\t$(Q)$(srctree)/scripts/gen_build_files.sh $(srctree) $(objtree)\n\n# bbox: we have helpers in applets/\n# we depend on scripts_basic, since scripts/basic/fixdep\n# must be built before any other host prog\nPHONY += applets_dir\napplets_dir: scripts_basic gen_build_files include/config/MARKER\n\t$(Q)$(MAKE) $(build)=applets\n\napplets/%: applets_dir ;\n\nPHONY += outputmakefile\n# outputmakefile generates a Makefile in the output directory, if using a\n# separate output directory. This allows convenient use of make in the\n# output directory.\noutputmakefile:\nifneq ($(KBUILD_SRC),)\n\t$(Q)$(CONFIG_SHELL) $(srctree)/scripts/mkmakefile \\\n\t    $(srctree) $(objtree) $(VERSION) $(PATCHLEVEL)\nendif\n\n# To make sure we do not include .config for any of the *config targets\n# catch them early, and hand them over to scripts/kconfig/Makefile\n# It is allowed to specify more targets when calling make, including\n# mixing *config targets and build targets.\n# For example 'make oldconfig all'.\n# Detect when mixed targets is specified, and make a second invocation\n# of make so .config is not included in this case either (for *config).\n\nno-dot-config-targets := clean mrproper distclean \\\n\t\t\t cscope TAGS tags help %docs\n#bbox# check% is removed from above\n\nconfig-targets := 0\nmixed-targets  := 0\ndot-config     := 1\n\nifneq ($(filter $(no-dot-config-targets), $(MAKECMDGOALS)),)\n\tifeq ($(filter-out $(no-dot-config-targets), $(MAKECMDGOALS)),)\n\t\tdot-config := 0\n\tendif\nendif\n\nifeq ($(KBUILD_EXTMOD),)\n        ifneq ($(filter config %config,$(MAKECMDGOALS)),)\n                config-targets := 1\n                ifneq ($(filter-out config %config,$(MAKECMDGOALS)),)\n                        mixed-targets := 1\n                endif\n        endif\nendif\n\nifeq ($(mixed-targets),1)\n# ===========================================================================\n# We're called with mixed targets (*config and build targets).\n# Handle them one by one.\n\n%:: FORCE\n\t$(Q)$(MAKE) -C $(srctree) KBUILD_SRC= $@\n\nelse\nifeq ($(config-targets),1)\n# ===========================================================================\n# *config targets only - make sure prerequisites are updated, and descend\n# in scripts/kconfig to make the *config target\n\n# Read arch specific Makefile to set KBUILD_DEFCONFIG as needed.\n# KBUILD_DEFCONFIG may point out an alternative default configuration\n# used for 'make defconfig'\n-include $(srctree)/arch/$(ARCH)/Makefile\nexport KBUILD_DEFCONFIG\n\nconfig: scripts_basic outputmakefile gen_build_files FORCE\n\t$(Q)mkdir -p include\n\t$(Q)$(MAKE) $(build)=scripts/kconfig $@\n\t$(Q)$(MAKE) -C $(srctree) KBUILD_SRC= .kernelrelease\n\n%config: scripts_basic outputmakefile gen_build_files FORCE\n\t$(Q)mkdir -p include\n\t$(Q)$(MAKE) $(build)=scripts/kconfig $@\n\t$(Q)$(MAKE) -C $(srctree) KBUILD_SRC= .kernelrelease\n\nelse\n# ===========================================================================\n# Build targets only - this includes busybox, arch specific targets, clean\n# targets and others. In general all targets except *config targets.\n\nifeq ($(KBUILD_EXTMOD),)\n# Additional helpers built in scripts/\n# Carefully list dependencies so we do not try to build scripts twice\n# in parallel\nPHONY += scripts\nscripts: gen_build_files scripts_basic include/config/MARKER\n\t$(Q)$(MAKE) $(build)=$(@)\n\nscripts_basic: include/autoconf.h\n\n# Objects we will link into busybox / subdirs we need to visit\ncore-y\t\t:= \\\n\t\tapplets/ \\\n\nlibs-y\t\t:= \\\n\t\tarchival/ \\\n\t\tarchival/libarchive/ \\\n\t\tconsole-tools/ \\\n\t\tcoreutils/ \\\n\t\tcoreutils/libcoreutils/ \\\n\t\tdebianutils/ \\\n\t\tklibc-utils/ \\\n\t\te2fsprogs/ \\\n\t\teditors/ \\\n\t\tfindutils/ \\\n\t\tinit/ \\\n\t\tlibbb/ \\\n\t\tlibpwdgrp/ \\\n\t\tloginutils/ \\\n\t\tmailutils/ \\\n\t\tmiscutils/ \\\n\t\tmodutils/ \\\n\t\tnetworking/ \\\n\t\tnetworking/libiproute/ \\\n\t\tnetworking/udhcp/ \\\n\t\tprintutils/ \\\n\t\tprocps/ \\\n\t\trunit/ \\\n\t\tselinux/ \\\n\t\tshell/ \\\n\t\tsysklogd/ \\\n\t\tutil-linux/ \\\n\t\tutil-linux/volume_id/ \\\n\nendif # KBUILD_EXTMOD\n\nifeq ($(dot-config),1)\n# In this section, we need .config\n\n# Read in dependencies to all Kconfig* files, make sure to run\n# oldconfig if changes are detected.\n-include .kconfig.d\n\n-include .config\n\n# If .config needs to be updated, it will be done via the dependency\n# that autoconf has on .config.\n# To avoid any implicit rule to kick in, define an empty command\n.config .kconfig.d: ;\n\n-include $(srctree)/arch/$(ARCH)/Makefile\n\n# Now we can define CFLAGS etc according to .config\ninclude $(srctree)/Makefile.flags\n\n# If .config is newer than include/autoconf.h, someone tinkered\n# with it and forgot to run make oldconfig.\n# If kconfig.d is missing then we are probarly in a cleaned tree so\n# we execute the config step to be sure to catch updated Kconfig files\ninclude/autoconf.h: .kconfig.d .config $(wildcard $(srctree)/*/*.c) $(wildcard $(srctree)/*/*/*.c) | gen_build_files\n\t$(Q)$(MAKE) -f $(srctree)/Makefile silentoldconfig\n\ninclude/usage.h: gen_build_files\n\nelse\n# Dummy target needed, because used as prerequisite\ninclude/autoconf.h: ;\nendif\n\n# The all: target is the default when no target is given on the\n# command line.\n# This allow a user to issue only 'make' to build a kernel including modules\n# Defaults busybox but it is usually overridden in the arch makefile\nall: busybox doc\n\n# arch Makefile may override CC so keep this after arch Makefile is included\n#bbox# NOSTDINC_FLAGS += -nostdinc -isystem $(shell $(CC) -print-file-name=include)\nCHECKFLAGS += $(NOSTDINC_FLAGS)\n\n# Default kernel image to build when no specific target is given.\n# KBUILD_IMAGE may be overruled on the commandline or\n# set in the environment\n# Also any assignments in arch/$(ARCH)/Makefile take precedence over\n# this default value\nexport KBUILD_IMAGE ?= busybox\n\n#\n# INSTALL_PATH specifies where to place the updated kernel and system map\n# images. Default is /boot, but you can set it to other values\nexport\tINSTALL_PATH ?= /boot\n\n#\n# INSTALL_MOD_PATH specifies a prefix to MODLIB for module directory\n# relocations required by build roots.  This is not defined in the\n# makefile but the argument can be passed to make if needed.\n#\n\nMODLIB\t= $(INSTALL_MOD_PATH)/lib/modules/$(KERNELRELEASE)\nexport MODLIB\n\n\nifeq ($(KBUILD_EXTMOD),)\nbusybox-dirs\t:= $(patsubst %/,%,$(filter %/, $(core-y) $(core-m) $(libs-y) $(libs-m)))\n\nbusybox-alldirs\t:= $(sort $(busybox-dirs) $(patsubst %/,%,$(filter %/, \\\n\t\t     $(core-n) $(core-) $(libs-n) $(libs-) \\\n\t\t)))\n\ncore-y\t\t:= $(patsubst %/, %/built-in.o, $(core-y))\nlibs-y1\t\t:= $(patsubst %/, %/lib.a, $(libs-y))\nlibs-y2\t\t:= $(patsubst %/, %/built-in.o, $(libs-y))\nlibs-y\t\t:= $(libs-y1) $(libs-y2)\n\n# Build busybox\n# ---------------------------------------------------------------------------\n# busybox is build from the objects selected by $(busybox-init) and\n# $(busybox-main). Most are built-in.o files from top-level directories\n# in the kernel tree, others are specified in arch/$(ARCH)Makefile.\n# Ordering when linking is important, and $(busybox-init) must be first.\n#\n# busybox\n#   ^\n#   |\n#   +-< $(busybox-init)\n#   |   +--< init/version.o + more\n#   |\n#   +--< $(busybox-main)\n#   |    +--< driver/built-in.o mm/built-in.o + more\n#   |\n#   +-< kallsyms.o (see description in CONFIG_KALLSYMS section)\n#\n# busybox version (uname -v) cannot be updated during normal\n# descending-into-subdirs phase since we do not yet know if we need to\n# update busybox.\n# Therefore this step is delayed until just before final link of busybox -\n# except in the kallsyms case where it is done just before adding the\n# symbols to the kernel.\n#\n# System.map is generated to document addresses of all kernel symbols\n\nbusybox-all  := $(core-y) $(libs-y)\n\n# Rule to link busybox - also used during CONFIG_KALLSYMS\n# May be overridden by arch/$(ARCH)/Makefile\nquiet_cmd_busybox__ ?= LINK    $@\n      cmd_busybox__ ?= $(srctree)/scripts/trylink \\\n      \"$@\" \\\n      \"$(CC)\" \\\n      \"$(CFLAGS) $(CFLAGS_busybox)\" \\\n      \"$(LDFLAGS) $(EXTRA_LDFLAGS)\" \\\n      \"$(core-y)\" \\\n      \"$(libs-y)\" \\\n      \"$(LDLIBS)\" \\\n      \"$(CONFIG_EXTRA_LDLIBS)\" \\\n      && $(srctree)/scripts/generate_BUFSIZ.sh --post include/common_bufsiz.h\n\n# Generate System.map\nquiet_cmd_sysmap = SYSMAP\n      cmd_sysmap = $(CONFIG_SHELL) $(srctree)/scripts/mksysmap\n\n# Link of busybox\n# If CONFIG_KALLSYMS is set .version is already updated\n# Generate System.map and verify that the content is consistent\n# Use + in front of the busybox_version rule to silent warning with make -j2\n# First command is ':' to allow us to use + in front of the rule\ndefine rule_busybox__\n\t:\n\t$(call cmd,busybox__)\n\t$(Q)echo 'cmd_$@ := $(cmd_busybox__)' > $(@D)/.$(@F).cmd\nendef\n\n\nifdef CONFIG_KALLSYMS\n# Generate section listing all symbols and add it into busybox $(kallsyms.o)\n# It's a three stage process:\n# o .tmp_busybox1 has all symbols and sections, but __kallsyms is\n#   empty\n#   Running kallsyms on that gives us .tmp_kallsyms1.o with\n#   the right size - busybox version (uname -v) is updated during this step\n# o .tmp_busybox2 now has a __kallsyms section of the right size,\n#   but due to the added section, some addresses have shifted.\n#   From here, we generate a correct .tmp_kallsyms2.o\n# o The correct .tmp_kallsyms2.o is linked into the final busybox.\n# o Verify that the System.map from busybox matches the map from\n#   .tmp_busybox2, just in case we did not generate kallsyms correctly.\n# o If CONFIG_KALLSYMS_EXTRA_PASS is set, do an extra pass using\n#   .tmp_busybox3 and .tmp_kallsyms3.o.  This is only meant as a\n#   temporary bypass to allow the kernel to be built while the\n#   maintainers work out what went wrong with kallsyms.\n\nifdef CONFIG_KALLSYMS_EXTRA_PASS\nlast_kallsyms := 3\nelse\nlast_kallsyms := 2\nendif\n\nkallsyms.o := .tmp_kallsyms$(last_kallsyms).o\n\ndefine verify_kallsyms\n\t$(Q)$(if $($(quiet)cmd_sysmap),                       \\\n\t  echo '  $($(quiet)cmd_sysmap) .tmp_System.map' &&)  \\\n\t  $(cmd_sysmap) .tmp_busybox$(last_kallsyms) .tmp_System.map\n\t$(Q)cmp -s System.map .tmp_System.map ||              \\\n\t\t(echo Inconsistent kallsyms data;             \\\n\t\t echo Try setting CONFIG_KALLSYMS_EXTRA_PASS; \\\n\t\t rm .tmp_kallsyms* ; /bin/false )\nendef\n\n# Update busybox version before link\n# Use + in front of this rule to silent warning about make -j1\n# First command is ':' to allow us to use + in front of this rule\ncmd_ksym_ld = $(cmd_busybox__)\ndefine rule_ksym_ld\n\t:\n\t+$(call cmd,busybox_version)\n\t$(call cmd,busybox__)\n\t$(Q)echo 'cmd_$@ := $(cmd_busybox__)' > $(@D)/.$(@F).cmd\nendef\n\n# Generate .S file with all kernel symbols\nquiet_cmd_kallsyms = KSYM    $@\n      cmd_kallsyms = $(NM) -n $< | $(KALLSYMS) \\\n                     $(if $(CONFIG_KALLSYMS_ALL),--all-symbols) > $@\n\n.tmp_kallsyms1.o .tmp_kallsyms2.o .tmp_kallsyms3.o: %.o: %.S scripts FORCE\n\t$(call if_changed_dep,as_o_S)\n\n.tmp_kallsyms%.S: .tmp_busybox% $(KALLSYMS)\n\t$(call cmd,kallsyms)\n\n# .tmp_busybox1 must be complete except kallsyms, so update busybox version\n.tmp_busybox1: $(busybox-lds) $(busybox-all) FORCE\n\t$(call if_changed_rule,ksym_ld)\n\n.tmp_busybox2: $(busybox-lds) $(busybox-all) .tmp_kallsyms1.o FORCE\n\t$(call if_changed,busybox__)\n\n.tmp_busybox3: $(busybox-lds) $(busybox-all) .tmp_kallsyms2.o FORCE\n\t$(call if_changed,busybox__)\n\n# Needs to visit scripts/ before $(KALLSYMS) can be used.\n$(KALLSYMS): scripts ;\n\n# Generate some data for debugging strange kallsyms problems\ndebug_kallsyms: .tmp_map$(last_kallsyms)\n\n.tmp_map%: .tmp_busybox% FORCE\n\t($(OBJDUMP) -h $< | $(AWK) '/^ +[0-9]/{print $$4 \" 0 \" $$2}'; $(NM) $<) | sort > $@\n\n.tmp_map3: .tmp_map2\n\n.tmp_map2: .tmp_map1\n\nendif # ifdef CONFIG_KALLSYMS\n\n# busybox image - including updated kernel symbols\nbusybox_unstripped: $(busybox-all) FORCE\n\t$(call if_changed_rule,busybox__)\n\t$(Q)rm -f .old_version\n\nbusybox: busybox_unstripped\nifeq ($(SKIP_STRIP),y)\n\t$(Q)cp $< $@\nelse\n\t$(Q)$(STRIP) -s --remove-section=.note --remove-section=.comment \\\n\t\tbusybox_unstripped -o $@\n# strip is confused by PIE executable and does not set exec bits\n\t$(Q)chmod a+x $@\nendif\n\n# The actual objects are generated when descending,\n# make sure no implicit rule kicks in\n$(sort $(busybox-all)): $(busybox-dirs) ;\n\n# Handle descending into subdirectories listed in $(busybox-dirs)\n# Preset locale variables to speed up the build process. Limit locale\n# tweaks to this spot to avoid wrong language settings when running\n# make menuconfig etc.\n# Error messages still appears in the original language\n\nPHONY += $(busybox-dirs)\n$(busybox-dirs): prepare scripts\n\t$(Q)$(MAKE) $(build)=$@\n\n# Build the kernel release string\n# The KERNELRELEASE is stored in a file named .kernelrelease\n# to be used when executing for example make install or make modules_install\n#\n# Take the contents of any files called localversion* and the config\n# variable CONFIG_LOCALVERSION and append them to KERNELRELEASE.\n# LOCALVERSION from the command line override all of this\n\nnullstring :=\nspace      := $(nullstring) # end of line\n\n___localver = $(objtree)/localversion* $(srctree)/localversion*\n__localver  = $(sort $(wildcard $(___localver)))\n# skip backup files (containing '~')\n_localver = $(foreach f, $(__localver), $(if $(findstring ~, $(f)),,$(f)))\n\nlocalver = $(subst $(space),, \\\n\t   $(shell cat /dev/null $(_localver)) \\\n\t   $(patsubst \"%\",%,$(CONFIG_LOCALVERSION)))\n\n# If CONFIG_LOCALVERSION_AUTO is set scripts/setlocalversion is called\n# and if the SCM is know a tag from the SCM is appended.\n# The appended tag is determinded by the SCM used.\n#\n# Currently, only git is supported.\n# Other SCMs can edit scripts/setlocalversion and add the appropriate\n# checks as needed.\nifdef _BB_DISABLED_CONFIG_LOCALVERSION_AUTO\n\t_localver-auto = $(shell $(CONFIG_SHELL) \\\n\t                  $(srctree)/scripts/setlocalversion $(srctree))\n\tlocalver-auto  = $(LOCALVERSION)$(_localver-auto)\nendif\n\nlocalver-full = $(localver)$(localver-auto)\n\n# Store (new) KERNELRELASE string in .kernelrelease\nkernelrelease = $(KERNELVERSION)$(localver-full)\n.kernelrelease: FORCE\n\t$(Q)rm -f $@\n\t$(Q)echo $(kernelrelease) > $@\n\n\n# Things we need to do before we recursively start building the kernel\n# or the modules are listed in \"prepare\".\n# A multi level approach is used. prepareN is processed before prepareN-1.\n# archprepare is used in arch Makefiles and when processed asm symlink,\n# version.h and scripts_basic is processed / created.\n\n# Listed in dependency order\nPHONY += prepare archprepare prepare0 prepare1 prepare2 prepare3\n\n# prepare-all is deprecated, use prepare as valid replacement\nPHONY += prepare-all\n\n# prepare3 is used to check if we are building in a separate output directory,\n# and if so do:\n# 1) Check that make has not been executed in the kernel src $(srctree)\n# 2) Create the include2 directory, used for the second asm symlink\nprepare3: .kernelrelease\nifneq ($(KBUILD_SRC),)\n\t@echo '  Using $(srctree) as source for busybox'\n\t$(Q)if [ -f $(srctree)/.config ]; then \\\n\t\techo \"  $(srctree) is not clean, please run 'make mrproper'\";\\\n\t\techo \"  in the '$(srctree)' directory.\";\\\n\t\t/bin/false; \\\n\tfi;\n\t$(Q)if [ ! -d include2 ]; then mkdir -p include2; fi;\n\t$(Q)ln -fsn $(srctree)/include/asm-$(ARCH) include2/asm\nendif\n\n# prepare2 creates a makefile if using a separate output directory\nprepare2: prepare3 outputmakefile\n\nprepare1: prepare2 include/config/MARKER\nifneq ($(KBUILD_MODULES),)\n\t$(Q)mkdir -p $(MODVERDIR)\n\t$(Q)rm -f $(MODVERDIR)/*\nendif\n\narchprepare: prepare1 scripts_basic applets_dir\n\nprepare0: archprepare FORCE\n\t$(Q)$(MAKE) $(build)=.\n\n# All the preparing..\nprepare prepare-all: prepare0\n\n#\tLeave this as default for preprocessing busybox.lds.S, which is now\n#\tdone in arch/$(ARCH)/kernel/Makefile\n\nexport CPPFLAGS_busybox.lds += -P -C -U$(ARCH)\n\n# \tFIXME: The asm symlink changes when $(ARCH) changes. That's\n#\thard to detect, but I suppose \"make mrproper\" is a good idea\n#\tbefore switching between archs anyway.\n\n#bbox# include/asm:\n#bbox# \t@echo '  SYMLINK $@ -> include/asm-$(ARCH)'\n#bbox# \t$(Q)if [ ! -d include ]; then mkdir -p include; fi;\n#bbox# \t@ln -fsn asm-$(ARCH) $@\n\n# \tSplit autoconf.h into include/linux/config/*\nquiet_cmd_gen_bbconfigopts = GEN     include/bbconfigopts.h\n      cmd_gen_bbconfigopts = $(srctree)/scripts/mkconfigs include/bbconfigopts.h include/bbconfigopts_bz2.h\nquiet_cmd_gen_common_bufsiz = GEN     include/common_bufsiz.h\n      cmd_gen_common_bufsiz = $(srctree)/scripts/generate_BUFSIZ.sh include/common_bufsiz.h\nquiet_cmd_split_autoconf   = SPLIT   include/autoconf.h -> include/config/*\n      cmd_split_autoconf   = scripts/basic/split-include include/autoconf.h include/config\nquiet_cmd_gen_embedded_scripts = GEN     include/embedded_scripts.h\n      cmd_gen_embedded_scripts = $(srctree)/scripts/embedded_scripts include/embedded_scripts.h $(srctree)/embed $(srctree)/applets_sh\n#bbox# piggybacked generation of few .h files\ninclude/config/MARKER: scripts/basic/split-include include/autoconf.h $(wildcard $(srctree)/embed/*) $(wildcard $(srctree)/applets_sh/*) $(srctree)/scripts/embedded_scripts\n\t$(call cmd,split_autoconf)\n\t$(call cmd,gen_bbconfigopts)\n\t$(call cmd,gen_common_bufsiz)\n\t$(call cmd,gen_embedded_scripts)\n\t@touch $@\n\n# Generate some files\n# ---------------------------------------------------------------------------\n\n# KERNELRELEASE can change from a few different places, meaning version.h\n# needs to be updated, so this check is forced on all builds\n\nuts_len := 64\n\ndefine filechk_version.h\n\tif [ `echo -n \"$(KERNELRELEASE)\" | wc -c ` -gt $(uts_len) ]; then \\\n\t  echo '\"$(KERNELRELEASE)\" exceeds $(uts_len) characters' >&2; \\\n\t  exit 1; \\\n\tfi; \\\n\t(echo \\#define UTS_RELEASE \\\"$(KERNELRELEASE)\\\"; \\\n\t  echo \\#define LINUX_VERSION_CODE `expr $(VERSION) \\\\* 65536 + $(PATCHLEVEL) \\\\* 256 + $(SUBLEVEL)`; \\\n\t echo '#define KERNEL_VERSION(a,b,c) (((a) << 16) + ((b) << 8) + (c))'; \\\n\t)\nendef\n\n# ---------------------------------------------------------------------------\n\nPHONY += depend dep\ndepend dep:\n\t@echo '*** Warning: make $@ is unnecessary now.'\n\n# ---------------------------------------------------------------------------\n# Modules\n\nifdef _BB_DISABLED_CONFIG_MODULES\n\n# \tBy default, build modules as well\n\nall: modules\n\n#\tBuild modules\n\nPHONY += modules\nmodules: $(busybox-dirs) $(if $(KBUILD_BUILTIN),busybox)\n\t@echo '  Building modules, stage 2.';\n\t$(Q)$(MAKE) -rR -f $(srctree)/scripts/Makefile.modpost\n\n\n# Target to prepare building external modules\nPHONY += modules_prepare\nmodules_prepare: prepare scripts\n\n# Target to install modules\nPHONY += modules_install\nmodules_install: _modinst_ _modinst_post\n\nPHONY += _modinst_\n_modinst_:\n\t@if [ -z \"`$(DEPMOD) -V 2>/dev/null | grep module-init-tools`\" ]; then \\\n\t\techo \"Warning: you may need to install module-init-tools\"; \\\n\t\techo \"See http://www.codemonkey.org.uk/docs/post-halloween-2.6.txt\";\\\n\t\tsleep 1; \\\n\tfi\n\t@rm -rf $(MODLIB)/kernel\n\t@rm -f $(MODLIB)/source\n\t@mkdir -p $(MODLIB)/kernel\n\t@ln -s $(srctree) $(MODLIB)/source\n\t@if [ ! $(objtree) -ef  $(MODLIB)/build ]; then \\\n\t\trm -f $(MODLIB)/build ; \\\n\t\tln -s $(objtree) $(MODLIB)/build ; \\\n\tfi\n\t$(Q)$(MAKE) -rR -f $(srctree)/scripts/Makefile.modinst\n\n# If System.map exists, run depmod.  This deliberately does not have a\n# dependency on System.map since that would run the dependency tree on\n# busybox.  This depmod is only for convenience to give the initial\n# boot a modules.dep even before / is mounted read-write.  However the\n# boot script depmod is the master version.\nifeq \"$(strip $(INSTALL_MOD_PATH))\" \"\"\ndepmod_opts\t:=\nelse\ndepmod_opts\t:= -b $(INSTALL_MOD_PATH) -r\nendif\nPHONY += _modinst_post\n_modinst_post: _modinst_\n\tif [ -r System.map -a -x $(DEPMOD) ]; then $(DEPMOD) -ae -F System.map $(depmod_opts) $(KERNELRELEASE); fi\n\nelse # CONFIG_MODULES\n\n# Modules not configured\n# ---------------------------------------------------------------------------\n\nmodules modules_install: FORCE\n\t@echo\n\t@echo \"The present busybox configuration has modules disabled.\"\n\t@echo \"Type 'make config' and enable loadable module support.\"\n\t@echo \"Then build a kernel with module support enabled.\"\n\t@echo\n\t@exit 1\n\nendif # CONFIG_MODULES\n\n###\n# Cleaning is done on three levels.\n# make clean     Delete most generated files\n#                Leave enough to build external modules\n# make mrproper  Delete the current configuration, and all generated files\n# make distclean Remove editor backup files, patch leftover files and the like\n\n# Directories & files removed with 'make clean'\nCLEAN_DIRS  += $(MODVERDIR) _install 0_lib\nCLEAN_FILES +=\tbusybox busybox_unstripped* busybox.links \\\n\t\tbusybox*.suid busybox*.nosuid \\\n                System.map .kernelrelease \\\n                .tmp_kallsyms* .tmp_version .tmp_busybox* .tmp_System.map\n\n# Directories & files removed with 'make mrproper'\nMRPROPER_DIRS  += include/config include2\nMRPROPER_FILES += .config .config.old include/asm .version .old_version \\\n\t\t  include/NUM_APPLETS.h \\\n\t\t  include/common_bufsiz.h \\\n\t\t  include/autoconf.h \\\n\t\t  include/bbconfigopts.h \\\n\t\t  include/bbconfigopts_bz2.h \\\n\t\t  include/embedded_scripts.h \\\n\t\t  include/usage_compressed.h \\\n\t\t  include/applet_tables.h \\\n\t\t  include/applets.h \\\n\t\t  include/usage.h \\\n\t\t  applets/usage \\\n\t\t  .kernelrelease Module.symvers tags TAGS cscope* \\\n\t\t  busybox_old\n\n# clean - Delete most, but leave enough to build external modules\n#\nclean: rm-dirs  := $(CLEAN_DIRS)\nclean: rm-files := $(CLEAN_FILES)\nclean-dirs      := $(addprefix _clean_,$(srctree) $(busybox-alldirs))\n\nPHONY += $(clean-dirs) clean archclean\n$(clean-dirs):\n\t$(Q)$(MAKE) $(clean)=$(patsubst _clean_%,%,$@)\n\nclean: archclean $(clean-dirs)\n\t$(call cmd,rmdirs)\n\t$(call cmd,rmfiles)\n\t@find . $(RCS_FIND_IGNORE) \\\n\t\t\\( -name '*.[oas]' -o -name '*.ko' -o -name '.*.cmd' \\\n\t\t-o -name '.*.d' -o -name '.*.tmp' -o -name '*.mod.c' \\) \\\n\t\t-type f -print | xargs rm -f\n\nPHONY += doc-clean\ndoc-clean: rm-files := docs/busybox.pod \\\n\t\t  docs/BusyBox.html docs/busybox.1 docs/BusyBox.txt\ndoc-clean:\n\t$(call cmd,rmfiles)\n\n# mrproper - Delete all generated files, including .config\n#\nmrproper: rm-dirs  := $(wildcard $(MRPROPER_DIRS))\nmrproper: rm-files := $(wildcard $(MRPROPER_FILES))\nmrproper-dirs      := $(addprefix _mrproper_,scripts)\n\nPHONY += $(mrproper-dirs) mrproper archmrproper\n$(mrproper-dirs):\n\t$(Q)$(MAKE) $(clean)=$(patsubst _mrproper_%,%,$@)\n\nmrproper: clean archmrproper $(mrproper-dirs)\n\t$(call cmd,rmdirs)\n\t$(call cmd,rmfiles)\n\t@find . -name Config.src | sed 's/.src$$/.in/' | xargs -r rm -f\n\t@find . -name Kbuild.src | sed 's/.src$$//' | xargs -r rm -f\n\n# distclean\n#\nPHONY += distclean\n\ndistclean: mrproper\n\t@find $(srctree) $(RCS_FIND_IGNORE) \\\n\t\t\\( -name '*.orig' -o -name '*.rej' -o -name '*~' \\\n\t\t-o -name '*.bak' -o -name '#*#' -o -name '.*.orig' \\\n\t\t-o -name '.*.rej' -o -name '*.tmp' -o -size 0 \\\n\t\t-o -name '*%' -o -name '.*.cmd' -o -name 'core' \\) \\\n\t\t-type f -print | xargs rm -f\n\n\n# Packaging of the kernel to various formats\n# ---------------------------------------------------------------------------\n# rpm target kept for backward compatibility\npackage-dir\t:= $(srctree)/scripts/package\n\n%pkg: FORCE\n\t$(Q)$(MAKE) $(build)=$(package-dir) $@\nrpm: FORCE\n\t$(Q)$(MAKE) $(build)=$(package-dir) $@\n\n\n# Brief documentation of the typical targets used\n# ---------------------------------------------------------------------------\n\nboards := $(wildcard $(srctree)/configs/*_defconfig)\nboards := $(notdir $(boards))\n\n-include $(srctree)/Makefile.help\n\n# Documentation targets\n# ---------------------------------------------------------------------------\n%docs: scripts_basic FORCE\n\t$(Q)$(MAKE) $(build)=Documentation/DocBook $@\n\nelse # KBUILD_EXTMOD\n\n###\n# External module support.\n# When building external modules the kernel used as basis is considered\n# read-only, and no consistency checks are made and the make\n# system is not used on the basis kernel. If updates are required\n# in the basis kernel ordinary make commands (without M=...) must\n# be used.\n#\n# The following are the only valid targets when building external\n# modules.\n# make M=dir clean     Delete all automatically generated files\n# make M=dir modules   Make all modules in specified dir\n# make M=dir\t       Same as 'make M=dir modules'\n# make M=dir modules_install\n#                      Install the modules build in the module directory\n#                      Assumes install directory is already created\n\n# We are always building modules\nKBUILD_MODULES := 1\nPHONY += crmodverdir\ncrmodverdir:\n\t$(Q)mkdir -p $(MODVERDIR)\n\t$(Q)rm -f $(MODVERDIR)/*\n\nPHONY += $(objtree)/Module.symvers\n$(objtree)/Module.symvers:\n\t@test -e $(objtree)/Module.symvers || ( \\\n\techo; \\\n\techo \"  WARNING: Symbol version dump $(objtree)/Module.symvers\"; \\\n\techo \"           is missing; modules will have no dependencies and modversions.\"; \\\n\techo )\n\nmodule-dirs := $(addprefix _module_,$(KBUILD_EXTMOD))\nPHONY += $(module-dirs) modules\n$(module-dirs): crmodverdir $(objtree)/Module.symvers\n\t$(Q)$(MAKE) $(build)=$(patsubst _module_%,%,$@)\n\nmodules: $(module-dirs)\n\t@echo '  Building modules, stage 2.';\n\t$(Q)$(MAKE) -rR -f $(srctree)/scripts/Makefile.modpost\n\nPHONY += modules_install\nmodules_install: _emodinst_ _emodinst_post\n\ninstall-dir := $(if $(INSTALL_MOD_DIR),$(INSTALL_MOD_DIR),extra)\nPHONY += _emodinst_\n_emodinst_:\n\t$(Q)mkdir -p $(MODLIB)/$(install-dir)\n\t$(Q)$(MAKE) -rR -f $(srctree)/scripts/Makefile.modinst\n\n# Run depmod only is we have System.map and depmod is executable\nquiet_cmd_depmod = DEPMOD  $(KERNELRELEASE)\n      cmd_depmod = if [ -r System.map -a -x $(DEPMOD) ]; then \\\n                      $(DEPMOD) -ae -F System.map             \\\n                      $(if $(strip $(INSTALL_MOD_PATH)),      \\\n\t\t      -b $(INSTALL_MOD_PATH) -r)              \\\n\t\t      $(KERNELRELEASE);                       \\\n                   fi\n\nPHONY += _emodinst_post\n_emodinst_post: _emodinst_\n\t$(call cmd,depmod)\n\nclean-dirs := $(addprefix _clean_,$(KBUILD_EXTMOD))\n\nPHONY += $(clean-dirs) clean\n$(clean-dirs):\n\t$(Q)$(MAKE) $(clean)=$(patsubst _clean_%,%,$@)\n\nclean:\trm-dirs := $(MODVERDIR)\nclean: $(clean-dirs)\n\t$(call cmd,rmdirs)\n\t@find $(KBUILD_EXTMOD) $(RCS_FIND_IGNORE) \\\n\t\t\\( -name '*.[oas]' -o -name '*.ko' -o -name '.*.cmd' \\\n\t\t-o -name '.*.d' -o -name '.*.tmp' -o -name '*.mod.c' \\) \\\n\t\t-type f -print | xargs rm -f\n\n# Dummies...\nPHONY += prepare scripts\nprepare: ;\nscripts: ;\nendif # KBUILD_EXTMOD\n\n# Generate tags for editors\n# ---------------------------------------------------------------------------\n\n#We want __srctree to totally vanish out when KBUILD_OUTPUT is not set\n#(which is the most common case IMHO) to avoid unneeded clutter in the big tags file.\n#Adding $(srctree) adds about 20M on i386 to the size of the output file!\n\nifeq ($(src),$(obj))\n__srctree =\nelse\n__srctree = $(srctree)/\nendif\n\nifeq ($(ALLSOURCE_ARCHS),)\nifeq ($(ARCH),um)\nALLINCLUDE_ARCHS := $(ARCH) $(SUBARCH)\nelse\nALLINCLUDE_ARCHS := $(ARCH)\nendif\nelse\n#Allow user to specify only ALLSOURCE_PATHS on the command line, keeping existing behaviour.\nALLINCLUDE_ARCHS := $(ALLSOURCE_ARCHS)\nendif\n\nALLSOURCE_ARCHS := $(ARCH)\n\ndefine all-sources\n\t( find -regex '.*\\.[ch]$$' )\nendef\n\nquiet_cmd_cscope-file = FILELST cscope.files\n      cmd_cscope-file = (echo \\-k; echo \\-q; $(all-sources)) > cscope.files\n\nquiet_cmd_cscope = MAKE    cscope.out\n      cmd_cscope = cscope -b\n\ncscope: FORCE\n\t$(call cmd,cscope-file)\n\t$(call cmd,cscope)\n\nquiet_cmd_TAGS = MAKE   $@\ndefine cmd_TAGS\n\trm -f $@; \\\n\tETAGSF=`etags --version | grep -i exuberant >/dev/null &&     \\\n                echo \"-I __initdata,__exitdata,__acquires,__releases  \\\n                      -I EXPORT_SYMBOL,EXPORT_SYMBOL_GPL              \\\n                      --extra=+f --c-kinds=+px\"`;                     \\\n                $(all-sources) | xargs etags $$ETAGSF -a\nendef\n\nTAGS: FORCE\n\t$(call cmd,TAGS)\n\n\nquiet_cmd_tags = MAKE   $@\ndefine cmd_tags\n\trm -f $@; \\\n\tCTAGSF=`ctags --version | grep -i exuberant >/dev/null &&     \\\n                echo \"-I __initdata,__exitdata,__acquires,__releases  \\\n                      -I EXPORT_SYMBOL,EXPORT_SYMBOL_GPL              \\\n                      --extra=+f --c-kinds=+px\"`;                     \\\n                $(all-sources) | xargs ctags $$CTAGSF -a\nendef\n\ntags: FORCE\n\t$(call cmd,tags)\n\n\n# Scripts to check various things for consistency\n# ---------------------------------------------------------------------------\n\nincludecheck:\n\tfind * $(RCS_FIND_IGNORE) \\\n\t\t-name '*.[hcS]' -type f -print | sort \\\n\t\t| xargs $(PERL) -w scripts/checkincludes.pl\n\nversioncheck:\n\tfind * $(RCS_FIND_IGNORE) \\\n\t\t-name '*.[hcS]' -type f -print | sort \\\n\t\t| xargs $(PERL) -w scripts/checkversion.pl\n\nnamespacecheck:\n\t$(PERL) $(srctree)/scripts/namespace.pl\n\nendif #ifeq ($(config-targets),1)\nendif #ifeq ($(mixed-targets),1)\n\nPHONY += checkstack\ncheckstack:\n\t$(OBJDUMP) -d busybox $$(find . -name '*.ko') | \\\n\t$(PERL) $(src)/scripts/checkstack.pl $(ARCH)\n\nkernelrelease:\n\t$(if $(wildcard .kernelrelease), $(Q)echo $(KERNELRELEASE), \\\n\t$(error kernelrelease not valid - run 'make *config' to update it))\nkernelversion:\n\t@echo $(KERNELVERSION)\n\n# Single targets\n# ---------------------------------------------------------------------------\n# Single targets are compatible with:\n# - build whith mixed source and output\n# - build with separate output dir 'make O=...'\n# - external modules\n#\n#  target-dir => where to store outputfile\n#  build-dir  => directory in kernel source tree to use\n\nifeq ($(KBUILD_EXTMOD),)\n        build-dir  = $(patsubst %/,%,$(dir $@))\n        target-dir = $(dir $@)\nelse\n        zap-slash=$(filter-out .,$(patsubst %/,%,$(dir $@)))\n        build-dir  = $(KBUILD_EXTMOD)$(if $(zap-slash),/$(zap-slash))\n        target-dir = $(if $(KBUILD_EXTMOD),$(dir $<),$(dir $@))\nendif\n\n%.s: %.c prepare scripts FORCE\n\t$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)\n%.i: %.c prepare scripts FORCE\n\t$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)\n%.o: %.c prepare scripts FORCE\n\t$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)\n%.lst: %.c prepare scripts FORCE\n\t$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)\n%.s: %.S prepare scripts FORCE\n\t$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)\n%.o: %.S prepare scripts FORCE\n\t$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)\n\n# Modules\n%/: prepare scripts FORCE\n\t$(Q)$(MAKE) KBUILD_MODULES=$(if $(CONFIG_MODULES),1) \\\n\t$(build)=$(build-dir)\n/: prepare scripts FORCE\n\t$(Q)$(MAKE) KBUILD_MODULES=$(if $(CONFIG_MODULES),1) \\\n\t$(build)=$(build-dir)\n\n%.ko: prepare scripts FORCE\n\t$(Q)$(MAKE) KBUILD_MODULES=$(if $(CONFIG_MODULES),1)   \\\n\t$(build)=$(build-dir) $(@:.ko=.o)\n\t$(Q)$(MAKE) -rR -f $(srctree)/scripts/Makefile.modpost\n\n# FIXME Should go into a make.lib or something\n# ===========================================================================\n\nquiet_cmd_rmdirs = $(if $(wildcard $(rm-dirs)),CLEAN   $(wildcard $(rm-dirs)))\n      cmd_rmdirs = rm -rf $(rm-dirs)\n\nquiet_cmd_rmfiles = $(if $(wildcard $(rm-files)),CLEAN   $(wildcard $(rm-files)))\n      cmd_rmfiles = rm -f $(rm-files)\n\n# read all saved command lines\n\ntargets := $(wildcard $(sort $(targets)))\ncmd_files := $(wildcard .*.cmd $(foreach f,$(targets),$(dir $(f)).$(notdir $(f)).cmd))\n\nifneq ($(cmd_files),)\n  $(cmd_files): ;\t# Do not try to update included dependency files\n  include $(cmd_files)\nendif\n\n# Shorthand for $(Q)$(MAKE) -f scripts/Makefile.clean obj=dir\n# Usage:\n# $(Q)$(MAKE) $(clean)=dir\nclean := -f $(if $(KBUILD_SRC),$(srctree)/)scripts/Makefile.clean obj\n\nendif\t# skip-makefile\n\nPHONY += FORCE\nFORCE:\n\n-include $(srctree)/Makefile.custom\n\n# Declare the contents of the .PHONY variable as phony.  We keep that\n# information in a variable se we can use it in if_changed and friends.\n.PHONY: $(PHONY)\n"
        },
        {
          "name": "Makefile.custom",
          "type": "blob",
          "size": 6.2314453125,
          "content": "# ==========================================================================\n# Build system\n# ==========================================================================\n\nbusybox.links: $(srctree)/applets/busybox.mkll $(objtree)/include/autoconf.h include/applets.h\n\t$(Q)-$(SHELL) $^ > $@\n\nbusybox.cfg.suid: $(srctree)/applets/busybox.mksuid $(objtree)/include/autoconf.h include/applets.h\n\t$(Q)-SUID=\"yes\" $(SHELL) $^ > $@\nbusybox.cfg.nosuid: $(srctree)/applets/busybox.mksuid $(objtree)/include/autoconf.h include/applets.h\n\t$(Q)-SUID=\"DROP\" $(SHELL) $^ > $@\n\n.PHONY: install\nifeq ($(CONFIG_INSTALL_APPLET_DONT),y)\nINSTALL_OPTS:= --none\nendif\nifeq ($(CONFIG_INSTALL_APPLET_SYMLINKS),y)\nINSTALL_OPTS:= --symlinks\nendif\nifeq ($(CONFIG_INSTALL_APPLET_HARDLINKS),y)\nINSTALL_OPTS:= --hardlinks\nendif\nifeq ($(CONFIG_INSTALL_APPLET_SCRIPT_WRAPPERS),y)\nifeq ($(CONFIG_INSTALL_SH_APPLET_SYMLINK),y)\nINSTALL_OPTS:= --sw-sh-sym\nendif\nifeq ($(CONFIG_INSTALL_SH_APPLET_HARDLINK),y)\nINSTALL_OPTS:= --sw-sh-hard\nendif\nifeq ($(CONFIG_INSTALL_SH_APPLET_SCRIPT_WRAPPER),y)\nINSTALL_OPTS:= --scriptwrapper\nendif\nendif\nifeq ($(CONFIG_FEATURE_INDIVIDUAL),y)\nINSTALL_OPTS:= --binaries\nLIBBUSYBOX_SONAME:= 0_lib/libbusybox.so.$(BB_VER)\nendif\ninstall: $(srctree)/applets/install.sh busybox busybox.links\n\t$(Q)DO_INSTALL_LIBS=\"$(strip $(LIBBUSYBOX_SONAME) $(DO_INSTALL_LIBS))\" \\\n\t\t$(SHELL) $< $(CONFIG_PREFIX) $(INSTALL_OPTS)\nifeq ($(strip $(CONFIG_FEATURE_SUID)),y)\n\t@echo\n\t@echo\n\t@echo --------------------------------------------------\n\t@echo You will probably need to make your busybox binary\n\t@echo setuid root to ensure all configured applets will\n\t@echo work properly.\n\t@echo --------------------------------------------------\n\t@echo\nendif\n\ninstall-noclobber: INSTALL_OPTS+=--noclobber\ninstall-noclobber: install\n\nuninstall: busybox.links\n\trm -f $(CONFIG_PREFIX)/bin/busybox\n\tfor i in `cat busybox.links` ; do rm -f $(CONFIG_PREFIX)$$i; done\nifneq ($(strip $(DO_INSTALL_LIBS)),n)\n\tfor i in $(LIBBUSYBOX_SONAME) $(DO_INSTALL_LIBS); do \\\n\t\trm -f $(CONFIG_PREFIX)$$i; \\\n\tdone\nendif\n\n# Not very elegant: copies testsuite to objdir...\n# (cp -pPR is POSIX-compliant (cp -dpR or cp -a would not be))\n.PHONY: check\n.PHONY: test\nifeq ($(CONFIG_UNIT_TEST),y)\nUNIT_CMD = ./busybox unit\nendif\ncheck test: busybox busybox.links\n\t$(UNIT_CMD)\n\ttest -d $(objtree)/testsuite || cp -pPR $(srctree)/testsuite $(objtree)\n\tbindir=$(objtree) srcdir=$(srctree)/testsuite \\\n\t$(SHELL) -c \"cd $(objtree)/testsuite && $(srctree)/testsuite/runtest $(if $(KBUILD_VERBOSE:0=),-v)\"\n\n.PHONY: release\nrelease: distclean\n\tcd ..; \\\n\trm -r -f busybox-$(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION); \\\n\tcp -pPR busybox busybox-$(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION) && { \\\n\tfind busybox-$(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)/ -type d \\\n\t\t-name .svn \\\n\t\t-print \\\n\t\t-exec rm -r -f {} \\; ; \\\n\tfind busybox-$(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)/ -type d \\\n\t\t-name .git \\\n\t\t-print \\\n\t\t-exec rm -r -f {} \\; ; \\\n\tfind busybox-$(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)/ -type f \\\n\t\t-name .gitignore \\\n\t\t-print \\\n\t\t-exec rm -f {} \\; ; \\\n\tfind busybox-$(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)/ -type f \\\n\t\t-name .\\#* \\\n\t\t-print \\\n\t\t-exec rm -f {} \\; ; \\\n\ttar -czf busybox-$(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION).tar.gz \\\n\t\tbusybox-$(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)/ ; }\n\n.PHONY: checkhelp\ncheckhelp:\n\t$(Q)$(srctree)/scripts/checkhelp.awk \\\n\t\t$(patsubst %,$(srctree)/%,$(wildcard $(patsubst %,%/Config.in,$(busybox-dirs) ./)))\n\n.PHONY: sizes\nsizes: busybox_unstripped\n\t$(NM) --size-sort $(<)\n\n.PHONY: bloatcheck\nbloatcheck: busybox_old busybox_unstripped\n\t@$(srctree)/scripts/bloat-o-meter busybox_old busybox_unstripped\n\t@$(CROSS_COMPILE)size busybox_old busybox_unstripped\n\n.PHONY: baseline\nbaseline: busybox_unstripped\n\t@mv busybox_unstripped busybox_old\n\n.PHONY: objsizes\nobjsizes: busybox_unstripped\n\t$(srctree)/scripts/objsizes\n\n.PHONY: stksizes\nstksizes: busybox_unstripped\n\t$(CROSS_COMPILE)objdump -d busybox_unstripped | $(srctree)/scripts/checkstack.pl $(ARCH) | uniq\n\n.PHONY: bigdata\nbigdata: busybox_unstripped\n\t$(CROSS_COMPILE)nm --size-sort busybox_unstripped | grep -vi ' [trw] '\n\n# Documentation Targets\n.PHONY: doc\ndoc: docs/busybox.pod docs/BusyBox.txt docs/busybox.1 docs/BusyBox.html\n\n# FIXME: Doesn't belong here\n       cmd_doc =\n quiet_cmd_doc = $(Q)echo \"  DOC     $(@F)\"\nsilent_cmd_doc =\ndisp_doc       = $($(quiet)cmd_doc)\n\n# sed adds newlines after \"Options:\" etc,\n# this is needed in order to get good BusyBox.{1,txt,html}\ndocs/busybox.pod: $(srctree)/docs/busybox_header.pod \\\n\t\tinclude/usage.h \\\n\t\t$(srctree)/docs/busybox_footer.pod \\\n\t\tapplets/usage_pod\n\t$(disp_doc)\n\t$(Q)-mkdir -p docs\n\t$(Q)-( \\\n\t    cat $(srctree)/docs/busybox_header.pod; \\\n\t    echo; \\\n\t    applets/usage_pod | sed 's/^[A-Za-z][A-Za-z ]*[a-z]:$$/&\\n/'; \\\n\t    cat $(srctree)/docs/busybox_footer.pod; \\\n\t    ) > docs/busybox.pod\n\ndocs/BusyBox.txt: docs/busybox.pod\n\t$(disp_doc)\n\t$(Q)-mkdir -p docs\n\t$(Q)-pod2text $< > $@\n\ndocs/busybox.1: docs/busybox.pod\n\t$(disp_doc)\n\t$(Q)-mkdir -p docs\n\t$(Q)-pod2man --center=busybox --release=\"version $(KERNELVERSION)\" $< > $@\n\ndocs/BusyBox.html: docs/busybox.net/BusyBox.html\n\t$(disp_doc)\n\t$(Q)-mkdir -p docs\n\t$(Q)-rm -f docs/BusyBox.html\n\t$(Q)-cp docs/busybox.net/BusyBox.html docs/BusyBox.html\n\ndocs/busybox.net/BusyBox.html: docs/busybox.pod\n\t$(Q)-mkdir -p docs/busybox.net\n\t$(Q)-pod2html --noindex $< > $@\n\t$(Q)-rm -f pod2htm*\n\n# documentation, cross-reference\n# Modern distributions already ship synopsis packages (e.g. debian)\n# If you have an old distribution go to http://synopsis.fresco.org/\nsyn_tgt = $(wildcard $(patsubst %,%/*.c,$(busybox-alldirs)))\nsyn     = $(patsubst %.c, %.syn, $(syn_tgt))\n\ncomma:= ,\nbrace_open:= (\nbrace_close:= )\n\nSYN_CPPFLAGS := $(strip $(CPPFLAGS) $(EXTRA_CPPFLAGS))\nSYN_CPPFLAGS := $(subst $(brace_open),\\$(brace_open),$(SYN_CPPFLAGS))\nSYN_CPPFLAGS := $(subst $(brace_close),\\$(brace_close),$(SYN_CPPFLAGS))\n#SYN_CPPFLAGS := $(subst \",\\\",$(SYN_CPPFLAGS))\n#\")\n#SYN_CPPFLAGS := [$(patsubst %,'%'$(comma),$(SYN_CPPFLAGS))'']\n\n%.syn: %.c\n\tsynopsis -p C -l Comments.SSDFilter,Comments.Previous -Wp,preprocess=True,cppflags=\"'$(SYN_CPPFLAGS)'\" -o $@ $<\n\n.PHONY: html\nhtml: $(syn)\n\tsynopsis -f HTML -Wf,title=\"'BusyBox Documentation'\" -o $@ $^\n\n-include $(srctree)/Makefile.local\n"
        },
        {
          "name": "Makefile.flags",
          "type": "blob",
          "size": 7.9814453125,
          "content": "# ==========================================================================\n# Build system\n# ==========================================================================\n\nBB_VER = $(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)\nexport BB_VER\nSKIP_STRIP ?= n\n\n# -std=gnu99 needed for [U]LLONG_MAX on some systems\nCPPFLAGS += $(call cc-option,-std=gnu99,)\n\nCPPFLAGS += \\\n\t-Iinclude -Ilibbb \\\n\t$(if $(KBUILD_SRC),-Iinclude2 -I$(srctree)/include -I$(srctree)/libbb) \\\n\t-include include/autoconf.h \\\n\t-D_GNU_SOURCE -DNDEBUG \\\n\t$(if $(CONFIG_LFS),-D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64) \\\n\t$(if $(CONFIG_TIME64),-D_TIME_BITS=64) \\\n\t-DBB_VER=$(squote)$(quote)$(BB_VER)$(quote)$(squote)\n\nCFLAGS += $(call cc-option,-Wall,)\nCFLAGS += $(call cc-option,-Wshadow,)\nCFLAGS += $(call cc-option,-Wwrite-strings,)\nCFLAGS += $(call cc-option,-Wundef,)\nCFLAGS += $(call cc-option,-Wstrict-prototypes,)\nCFLAGS += $(call cc-option,-Wunused -Wunused-parameter,)\nCFLAGS += $(call cc-option,-Wunused-function -Wunused-value,)\nCFLAGS += $(call cc-option,-Wmissing-prototypes -Wmissing-declarations,)\nCFLAGS += $(call cc-option,-Wno-format-security,)\n# warn about C99 declaration after statement\nCFLAGS += $(call cc-option,-Wdeclaration-after-statement,)\n# If you want to add more -Wsomething above, make sure that it is\n# still possible to build bbox without warnings.\n\nifeq ($(CONFIG_WERROR),y)\nCFLAGS += $(call cc-option,-Werror,)\n## TODO:\n## gcc version 4.4.0 20090506 (Red Hat 4.4.0-4) (GCC) is a PITA:\n## const char *ptr; ... off_t v = *(off_t*)ptr; -> BOOM\n## and no easy way to convince it to shut the hell up.\n## We have a lot of such things all over the place.\n## Classic *(off_t*)(void*)ptr does not work,\n## and I am unwilling to do crazy gcc specific ({ void *ppp = ...; })\n## stuff in macros. This would obfuscate the code too much.\n## Maybe try __attribute__((__may_alias__))?\n#CFLAGS += $(call cc-ifversion, -eq, 0404, -fno-strict-aliasing)\nendif\n# gcc 3.x emits bogus \"old style proto\" warning on find.c:alloc_action()\nCFLAGS += $(call cc-ifversion, -ge, 0400, -Wold-style-definition)\n\nifneq ($(lastword $(subst -, ,$(CC))),clang)\n# \"clang-9: warning: optimization flag '-finline-limit=0' is not supported\nCFLAGS += $(call cc-option,-finline-limit=0,)\nendif\n\nCFLAGS += $(call cc-option,-fno-builtin-strlen -fomit-frame-pointer -ffunction-sections -fdata-sections,)\n# -fno-guess-branch-probability: prohibit pseudo-random guessing\n# of branch probabilities (hopefully makes bloatcheck more stable):\nCFLAGS += $(call cc-option,-fno-guess-branch-probability,)\nCFLAGS += $(call cc-option,-funsigned-char,)\n\nifeq ($(CONFIG_STATIC_LIBGCC),y)\n# Disable it, for example, if you get\n# \"clang-9: warning: argument unused during compilation: '-static-libgcc'\"\nCFLAGS += $(call cc-option,-static-libgcc,)\nendif\n\nCFLAGS += $(call cc-option,-falign-functions=1,)\nifneq ($(lastword $(subst -, ,$(CC))),clang)\n# \"clang-9: warning: optimization flag '-falign-jumps=1' is not supported\" (and same for other two)\nCFLAGS += $(call cc-option,-falign-jumps=1 -falign-labels=1 -falign-loops=1,)\nendif\n\n# Defeat .eh_frame bloat (gcc 4.6.3 x86-32 defconfig: 20% smaller busybox binary):\nCFLAGS += $(call cc-option,-fno-unwind-tables,)\nCFLAGS += $(call cc-option,-fno-asynchronous-unwind-tables,)\n# No automatic printf->puts,putchar conversions\n# (try disabling this and comparing assembly, it's instructive)\nCFLAGS += $(call cc-option,-fno-builtin-printf,)\n\n# clang-9 does not like \"str\" + N and \"if (CONFIG_ITEM && cond)\" constructs\nifeq ($(lastword $(subst -, ,$(CC))),clang)\nCFLAGS += $(call cc-option,-Wno-string-plus-int -Wno-constant-logical-operand)\nendif\n\n# FIXME: These warnings are at least partially to be concerned about and should\n# be fixed..\n#CFLAGS += $(call cc-option,-Wconversion,)\n\nifneq ($(CONFIG_DEBUG),y)\nCFLAGS += $(call cc-option,-Oz,$(call cc-option,-Os,$(call cc-option,-O2,)))\nelse\nCFLAGS += $(call cc-option,-g,)\n#CFLAGS += \"-D_FORTIFY_SOURCE=2\"\nifeq ($(CONFIG_DEBUG_PESSIMIZE),y)\nCFLAGS += $(call cc-option,-O0,)\nelse\nCFLAGS += $(call cc-option,-Oz,$(call cc-option,-Os,$(call cc-option,-O2,)))\nendif\nendif\nifeq ($(CONFIG_DEBUG_SANITIZE),y)\nCFLAGS += $(call cc-option,-fsanitize=address,)\nCFLAGS += $(call cc-option,-fsanitize=leak,)\nCFLAGS += $(call cc-option,-fsanitize=undefined,)\nendif\n\n# If arch/$(ARCH)/Makefile did not override it (with, say, -fPIC)...\nARCH_FPIC ?= -fpic\nARCH_FPIE ?= -fpie\nARCH_PIE ?= -pie\n\n# Usage: $(eval $(call pkg_check_modules,VARIABLE-PREFIX,MODULES))\ndefine pkg_check_modules\n$(1)_CFLAGS := $(shell $(PKG_CONFIG) $(PKG_CONFIG_FLAGS) --cflags $(2))\n$(1)_LIBS := $(shell $(PKG_CONFIG) $(PKG_CONFIG_FLAGS) --libs $(2))\nendef\n\nifeq ($(CONFIG_BUILD_LIBBUSYBOX),y)\n# on i386: 14% smaller libbusybox.so\n# (code itself is 9% bigger, we save on relocs/PLT/GOT)\nCFLAGS += $(ARCH_FPIC)\n# and another 4% reduction of libbusybox.so:\n# (external entry points must be marked EXTERNALLY_VISIBLE)\nCFLAGS += $(call cc-option,-fvisibility=hidden)\nendif\n\nifeq ($(CONFIG_STATIC),y)\nCFLAGS_busybox += -static\nPKG_CONFIG_FLAGS += --static\nendif\n\nifeq ($(CONFIG_PIE),y)\nCFLAGS_busybox += $(ARCH_PIE)\nCFLAGS += $(ARCH_FPIE)\nendif\n\nifneq ($(CONFIG_EXTRA_CFLAGS),)\nCFLAGS += $(strip $(subst \",,$(CONFIG_EXTRA_CFLAGS)))\n#\"))\nendif\n\n# Note: both \"\" (string consisting of two quote chars) and empty string\n# are possible, and should be skipped below.\nifneq ($(subst \"\",,$(CONFIG_SYSROOT)),)\nCFLAGS += --sysroot=$(CONFIG_SYSROOT)\nexport SYSROOT=$(CONFIG_SYSROOT)\nendif\n\n# libm may be needed for dc, awk, ntpd\nLDLIBS += m\n# Android has no separate crypt library\n# gcc-4.2.1 fails if we try to feed C source on stdin:\n#  echo 'int main(void){return 0;}' | $(CC) $(CFLAGS) -lcrypt -o /dev/null -xc -\n# fall back to using a temp file:\nCRYPT_AVAILABLE := $(shell echo 'int main(void){return 0;}' >bb_libtest.c; $(CC) $(CFLAGS) $(CFLAGS_busybox) -lcrypt -o /dev/null bb_libtest.c >/dev/null 2>&1 && echo \"y\"; rm bb_libtest.c)\nRT_AVAILABLE    := $(shell echo 'int main(void){return 0;}' >bb_libtest.c; $(CC) $(CFLAGS) $(CFLAGS_busybox) -lrt    -o /dev/null bb_libtest.c >/dev/null 2>&1 && echo \"y\"; rm bb_libtest.c)\nifeq ($(CRYPT_AVAILABLE),y)\nLDLIBS += crypt\nendif\n# librt may be needed for clock_gettime()\nifeq ($(RT_AVAILABLE),y)\nLDLIBS += rt\nendif\n\n# libpam may use libpthread, libdl and/or libaudit.\n# On some platforms that requires an explicit -lpthread, -ldl, -laudit.\n# However, on *other platforms* it fails when some of those flags\n# given needlessly. On some systems, crypt needs pthread.\n#\n# I even had a system where a runtime test for pthread\n# (similar to CRYPT_AVAILABLE test above) was not reliable.\n#\n# Do not propagate this mess by adding libraries to CONFIG_PAM/CRYPT_AVAILABLE blocks.\n# Add libraries you need to CONFIG_EXTRA_LDLIBS instead.\n\nifeq ($(CONFIG_PAM),y)\nLDLIBS += pam pam_misc\nendif\n\nifeq ($(CONFIG_SELINUX),y)\nSELINUX_PC_MODULES = libselinux libsepol\n$(eval $(call pkg_check_modules,SELINUX,$(SELINUX_PC_MODULES)))\nCPPFLAGS += $(SELINUX_CFLAGS)\nLDLIBS += $(if $(SELINUX_LIBS),$(SELINUX_LIBS:-l%=%),$(SELINUX_PC_MODULES:lib%=%))\nendif\n\nifeq ($(CONFIG_FEATURE_NSLOOKUP_BIG),y)\nifneq (,$(findstring linux,$(shell $(CC) $(CFLAGS) -dumpmachine)))\nLDLIBS += resolv\nendif\nifneq (,$(findstring gnu,$(shell $(CC) $(CFLAGS) -dumpmachine)))\nLDLIBS += resolv\nendif\nendif\n\nifeq ($(CONFIG_EFENCE),y)\nLDLIBS += efence\nendif\n\nifeq ($(CONFIG_DMALLOC),y)\nLDLIBS += dmalloc\nendif\n\n# If a flat binary should be built, CFLAGS_busybox=\"-elf2flt\"\n# env var should be set for make invocation.\n# Here we check whether CFLAGS_busybox indeed contains that flag.\n# (For historical reasons, we also check LDFLAGS, which doesn't\n# seem to be entirely correct variable to put \"-elf2flt\" into).\nW_ELF2FLT = -elf2flt\nifneq (,$(findstring $(W_ELF2FLT),$(LDFLAGS) $(CFLAGS_busybox)))\nSKIP_STRIP = y\nendif\n\nifneq ($(CONFIG_EXTRA_LDFLAGS),)\nLDFLAGS += $(strip $(subst \",,$(CONFIG_EXTRA_LDFLAGS)))\n#\"))\nendif\n\n# Busybox is a stack-fatty so make sure we increase default size\n# TODO: use \"make stksizes\" to find & fix big stack users\n# (we stole scripts/checkstack.pl from the kernel... thanks guys!)\n# Reduced from 20k to 16k in 1.9.0.\nFLTFLAGS += -s 16000\n"
        },
        {
          "name": "Makefile.help",
          "type": "blob",
          "size": 1.8515625,
          "content": "# ==========================================================================\n# Build system\n# ==========================================================================\n\nhelp:\n\t@echo 'Cleaning:'\n\t@echo '  clean\t\t\t- delete temporary files created by build'\n\t@echo '  distclean\t\t- delete all non-source files (including .config)'\n\t@echo '  doc-clean\t\t- delete all generated documentation'\n\t@echo\n\t@echo 'Build:'\n\t@echo '  all\t\t\t- Executable and documentation'\n\t@echo '  busybox\t\t- the swiss-army executable'\n\t@echo '  doc\t\t\t- docs/BusyBox.{txt,html,1}'\n\t@echo '  html\t\t\t- create html-based cross-reference'\n\t@echo\n\t@echo 'Configuration:'\n\t@echo '  allnoconfig\t\t- disable all symbols in .config'\n\t@echo '  allyesconfig\t\t- enable all symbols in .config (see defconfig)'\n\t@echo '  config\t\t- text based configurator (of last resort)'\n\t@echo '  defconfig\t\t- set .config to largest generic configuration'\n\t@echo '  menuconfig\t\t- interactive curses-based configurator'\n\t@echo '  oldconfig\t\t- resolve any unresolved symbols in .config'\n\t@$(if $(boards), \\\n\t\t$(foreach b, $(boards), \\\n\t\tprintf \"  %-21s - Build for %s\\\\n\" $(b) $(subst _defconfig,,$(b));) \\\n\t\techo '')\n\t@echo\n\t@echo 'Installation:'\n\t@echo '  install\t\t- install busybox into CONFIG_PREFIX'\n\t@echo '  uninstall'\n\t@echo\n\t@echo 'Development:'\n\t@echo '  baseline\t\t- create busybox_old for bloatcheck.'\n\t@echo '  bloatcheck\t\t- show size difference between old and new versions'\n\t@echo '  check\t\t\t- run the test suite for all applets'\n\t@echo '  checkhelp\t\t- check for missing help-entries in Config.in'\n\t@echo '  randconfig\t\t- generate a random configuration'\n\t@echo '  release\t\t- create a distribution tarball'\n\t@echo '  sizes\t\t\t- show size of all enabled busybox symbols'\n\t@echo '  objsizes\t\t- show size of each .o object built'\n\t@echo '  bigdata\t\t- show data objects, biggest first'\n\t@echo '  stksizes\t\t- show stack users, biggest first'\n\t@echo\n"
        },
        {
          "name": "NOFORK_NOEXEC.lst",
          "type": "blob",
          "size": 13.693359375,
          "content": "Why an applet can't be NOFORK or NOEXEC?\n\nWhy can't be NOFORK:\ninteractive: may wait for user input, ^C has to work\nspawner: \"tool PROG ARGS\" which changes program state and execs - must fork\nchanges state: e.g. environment, signal handlers\nleaks: does not free allocated memory or opened fds\n\talloc+xfunc: xmalloc, then xfunc - leaks memory if xfunc dies\n\topen+xfunc: opens fd, then calls xfunc - fd is leaked if xfunc dies\ntalks to network/serial/etc: it's not known how long the delay can be,\n\tit's reasonable to expect it might be many seconds\n\t(even if usually it is not), so ^C has to work\nrunner: sometimes may run for long(ish) time, and/or works with network:\n\t^C has to work (cat BIGFILE, chmod -R, ftpget, nc)\n\n\"runners\" can become eligible after shell is taught ^C to interrupt NOFORKs,\nneed to be inspected that they do not fall into alloc+xfunc, open+xfunc,\nleak categories.\n\nWhy can't be NOEXEC:\nsuid: runs under different uid - must fork+exec\nif it's important that /proc/PID/cmdline and comm are correct.\n\t(\"pkill sh\" killing itself before it kills real \"sh\" is no fun)\n\nWhy shouldn't be NOFORK/NOEXEC:\nrare: not started often enough to bother optimizing (example: poweroff)\ndaemon: runs indefinitely; these are also always fit \"rare\" category\nlongterm: often runs for a long time (many seconds), execing makes\n\tmemory footprint smaller\ncomplex: no immediately obvious reason why NOFORK wouldn't work,\n\tbut does some non-obvoius operations (example: fuser, lsof, losetup);\n\tdetailed audit often turns out that it's a leaker\nhardware: performs unusual hardware ops which may take long,\n\tor even hang due to hardware or firmware bugs\n\nInteresting example of \"interactive\" applet which is nevertheless can be\n(and is) NOEXEC is \"rm\". Yes, \"rm -i\" is interactive - but it's not that typical\nfor users to keep it waiting for many minutes, whereas running \"rm\" in shell\nis very typical, and speeding up this common use via NOEXEC is useful.\nIOW: rm is \"interactive\", but not \"longterm\".\n\nInteresting example of an applet which can be NOFORK but if not,\nthen should not be NOEXEC, is \"usleep\". As NOFORK, it amount to simply\nnanosleep()ing in the calling program (usually shell). No memory wasted.\nBut if ran as NOEXEC, it would create a potentially long-term process,\nwhich would be taking more memory because it did not exec\nand did not free much of the copied memory of the parent\n(COW helps with this only as long as parent doesn't modify its memory).\n\n\n[ - NOFORK\n[[ - NOFORK\nacpid - daemon\nadd-shell - noexec. leaks: open+xfunc\naddgroup - noexec. leaks\nadduser - noexec. leaks\nadjtimex - NOFORK\nar - runner\narch - NOFORK\narp - talks to network: arp -n queries DNS\narping - longterm\nash - interactive, longterm\nawk - noexec. runner\nbase64 - runner\nbasename - NOFORK\nbeep - longterm: beep -r 999999999\nblkdiscard - noexec. leaks: open+xioctl\nblkid - noexec\nblockdev - noexec. leaks fd\nbootchartd - daemon\nbrctl - noexec\nbunzip2 - runner\nbzcat - runner\nbzip2 - runner\ncal - noexec. can be runner: cal -n9999\ncat - runner: cat HUGEFILE\nchat - longterm (when used as intended - talking to modem over stdin/out)\nchattr - noexec. runner\nchgrp - noexec. runner\nchmod - noexec. runner\nchown - noexec. runner\nchpasswd - longterm? (list of \"user:password\"s from stdin)\nchpst - noexec. spawner\nchroot - noexec. spawner\nchrt - noexec. spawner\nchvt - noexec. leaks: get_console_fd_or_die() may open a new fd, or return one of stdio fds\ncksum - noexec. runner\nclear - NOFORK\ncmp - runner\ncomm - runner\nconspy - interactive, longterm\ncp - noexec. sometimes runner\ncpio - runner\ncrond - daemon\ncrontab - longterm (runs $EDITOR), leaks: open+xasprintf\ncryptpw - noexec. changes state: with --password-fd=N, moves N to stdin\ncttyhack - noexec. spawner\ncut - noexec. runner\ndate - noexec. nofork candidate(needs to stop messing up env, free xasprintf result, not use xfuncs after xasprintf)\ndc - longterm (eats stdin if no params)\ndd - noexec. runner\ndeallocvt - noexec. leaks: get_console_fd_or_die() may open a new fd, or return one of stdio fds\ndelgroup - noexec. leaks\ndeluser - noexec. leaks\ndepmod - longterm(ish)\ndevmem - hardware (access to device memory may hang)\ndf - noexec. leaks: nested allocs\ndhcprelay - daemon\ndiff - runner\ndirname - NOFORK\ndmesg - runner\ndnsd - daemon\ndnsdomainname - noexec. talks to network (may query DNS)\ndos2unix - noexec. runner\ndpkg - runner\ndu - runner\ndumpkmap - noexec. leaks: get_console_fd_or_die() may open a new fd, or return one of stdio fds\ndumpleases - noexec. leaks: open+xread\necho - NOFORK\ned - interactive, longterm\negrep - longterm runner (\"CMD | egrep ...\"  may run indefinitely, better to exec to conserve memory)\neject - hardware, leaks: open+ioctl_or_perror_and_die, changes state (moves fds)\nenv - noexec. spawner, changes state (env)\nenvdir - noexec. spawner\nenvuidgid - noexec. spawner\nexpand - runner\nexpr - noexec. leaks: nested allocs\nfactor - longterm (eats stdin if no params)\nfakeidentd - daemon\nfalse - NOFORK\nfatattr - noexec. leaks: open+xioctl, complex\nfbset - hardware, leaks: open+xfunc\nfbsplash - runner, longterm\nfdflush - hardware, leaks: open+ioctl_or_perror_and_die\nfdformat - hardware, longterm\nfdisk - interactive, longterm\nfgconsole - noexec. leaks: get_console_fd_or_die() may open a new fd, or return one of stdio fds\nfgrep - longterm runner (\"CMD | fgrep ...\"  may run indefinitely, better to exec to conserve memory)\nfind - noexec. runner\nfindfs - suid\nflash_eraseall - hardware\nflash_lock - hardware\nflash_unlock - hardware\nflashcp - hardware\nflock - spawner, changes state (file locks), let's play safe and not be noexec\nfold - noexec. runner\nfree - NOFORK\nfreeramdisk - noexec. leaks: open+ioctl_or_perror_and_die\nfsck - interactive, longterm\nfsck.minix - needs ^C\nfsfreeze - noexec. leaks: open+xioctl\nfstrim - noexec. leaks: open+xioctl, find_block_device -> readdir+xstrdup\nfsync - NOFORK\nftpd - daemon\nftpget - runner\nftpput - runner\nfuser - complex\ngetopt - noexec. leaks: many allocs\ngetty - interactive, longterm\ngrep - longterm runner (\"CMD | grep ...\"  may run indefinitely, better to exec to conserve memory)\ngroups - noexec\ngunzip - runner\ngzip - runner\nhalt - rare\nhd - noexec. runner\nhdparm - hardware\nhead - noexec. runner\nhexdump - noexec. runner\nhexedit - interactive, longterm\nhostid - NOFORK\nhostname - noexec. talks to network (hostname -d may query DNS)\nhttpd - daemon\nhush - interactive, longterm\nhwclock - hardware (xioctl(RTC_RD_TIME))\ni2cdetect - hardware\ni2cdump - hardware\ni2cget - hardware\ni2cset - hardware\nid - noexec\nifconfig - hardware? (mem_start NN io_addr NN irq NN), leaks: xsocket+ioctl_or_perror_and_die\nifenslave - noexec. leaks: xsocket+bb_perror_msg_and_die\nifplugd - daemon\ninetd - daemon\ninit - daemon\ninotifyd - daemon\ninsmod - noexec\ninstall - runner\nionice - noexec. spawner\niostat - longterm: \"iostat 1\" runs indefinitely\nip - noexec\nipaddr - noexec\nipcalc - noexec. ipcalc -h talks to network\nipcrm - noexec\nipcs - noexec\niplink - noexec\nipneigh - noexec\niproute - noexec\niprule - noexec\niptunnel - noexec\nkbd_mode - noexec. leaks: xopen_nonblocking+xioctl\nkill - NOFORK\nkillall - NOFORK\nkillall5 - NOFORK\nklogd - daemon\nlast - runner (I've got 1300 lines of output when tried it)\nless - interactive, longterm\nlink - NOFORK\nlinux32 - noexec. spawner\nlinux64 - noexec. spawner\nlinuxrc - daemon\nln - noexec\nloadfont - noexec. leaks: config_open+bb_error_msg_and_die(\"map format\")\nloadkmap - noexec. leaks: get_console_fd_or_die() may open a new fd, or return one of stdio fds\nlogger - runner\nlogin - suid, interactive, longterm\nlogname - NOFORK\nlosetup - noexec. complex\nlpd - daemon\nlpq - runner\nlpr - runner\nls - noexec. runner\nlsattr - noexec. runner\nlsmod - noexec\nlsof - complex\nlspci - noexec. too rare to bother for nofork\nlsscsi - noexec. too rare to bother for nofork\nlsusb - noexec. too rare to bother for nofork\nlzcat - runner\nlzma - runner\nlzop - runner\nlzopcat - runner\nmakedevs - noexec\nmakemime - runner\nman - spawner, interactive, longterm\nmd5sum - noexec. runner\nmdev - daemon\nmesg - NOFORK\nmicrocom - interactive, longterm\nminips - noexec\nmkdir - NOFORK\nmkdosfs - needs ^C\nmke2fs - needs ^C\nmkfifo - noexec\nmkfs.ext2 - needs ^C\nmkfs.minix - needs ^C\nmkfs.vfat - needs ^C\nmknod - noexec\nmkpasswd - noexec. changes state: with --password-fd=N, moves N to stdin\nmkswap - needs ^C\nmktemp - noexec. leaks: xstrdup+concat_path_file\nmodinfo - noexec\nmodprobe - noexec\nmore - interactive, longterm\nmount - suid\nmountpoint - noexec. leaks: option -n \"print dev name\": find_block_device -> readdir+xstrdup\nmpstat - longterm: \"mpstat 1\" runs indefinitely\nmt - hardware\nmv - noexec. sometimes runner\nnameif - noexec. openlog(), leaks: config_open2+ioctl_or_perror_and_die\nnbd-client - noexec\nnc - runner\nnetstat - longterm with -c (continuous listing)\nnice - noexec. spawner\nnl - runner\nnmeter - longterm\nnohup - noexec. spawner\nnproc - NOFORK\nntpd - daemon\nnuke - noexec\nod - runner\nopenvt - longterm: spawns a child and waits for it\npartprobe - noexec. leaks: open+ioctl_or_perror_and_die(BLKRRPART)\npasswd - suid\npaste - noexec. runner\npatch - needs ^C\npgrep - must fork+exec to get correct /proc/PID/cmdline and comm field\npidof - must fork+exec to get correct /proc/PID/cmdline and comm field\nping - suid, longterm\nping6 - suid, longterm\npipe_progress - longterm\npivot_root - NOFORK\npkill - must fork+exec to get correct /proc/PID/cmdline and comm field\npmap - noexec candidate, leaks: open+xstrdup\npopmaildir - runner\npoweroff - rare\npowertop - interactive, longterm\nprintenv - NOFORK\nprintf - NOFORK\nps - noexec\npscan - talks to network\npstree - noexec\npwd - NOFORK\npwdx - NOFORK\nraidautorun - noexec. very simple. leaks: open+xioctl\nrdate - talks to network\nrdev - noexec. leaks: find_block_device -> readdir+xstrdup\nreadlink - NOFORK\nreadprofile - reads /boot/System.map and /proc/profile, better to free more memory by execing?\nrealpath - NOFORK\nreboot - rare\nreformime - runner\nremove-shell - noexec. leaks: open+xfunc\nrenice - noexec. nofork candidate(uses getpwnam, is that ok?)\nreset - noexec. spawner (execs \"stty\")\nresize - noexec. changes state (signal handlers)\nresume - noexec\nrev - runner\nrm - noexec. rm -i interactive\nrmdir - NOFORK\nrmmod - noexec\nroute - talks to network (may query DNS to convert IPs to names)\nrpm - runner\nrpm2cpio - runner\nrtcwake - longterm: puts system to sleep, optimizing this for speed is pointless\nrun-init - spawner, rare, changes state (oh yes), execing may be important to free binary's inode\nrun-parts - longterm\nrunlevel - noexec. can be nofork if \"endutxent()\" is called unconditionally, but too rare to bother?\nrunsv - daemon\nrunsvdir - daemon\nrx - runner\nscript - longterm: pumps script output from slave pty\nscriptreplay - longterm: plays back \"script\" saved output, sleeping as necessary.\nsed - runner\nsendmail - runner\nseq - noexec. runner\nsetarch - noexec. spawner\nsetconsole - noexec\nsetfattr - noexec\nsetfont - noexec. leaks a lot of stuff\nsetkeycodes - noexec\nsetlogcons - noexec\nsetpriv - spawner, changes state, let's play safe and not be noexec\nsetserial - noexec\nsetsid - spawner, uses fork_or_rexec() [not audited to work in noexec], let's play safe and not be noexec\nsetuidgid - noexec. spawner\nsha1sum - noexec. runner\nsha256sum - noexec. runner\nsha3sum - noexec. runner\nsha512sum - noexec. runner\nshowkey - interactive, longterm\nshred - runner\nshuf - noexec. runner\nslattach - longterm (may sleep forever), uses bb_common_bufsiz1\nsleep - longterm. Could be nofork, if not the problem of \"killall sleep\" not killing it.\nsmemcap - runner\nsoftlimit - noexec. spawner\nsort - noexec. runner\nsplit - runner\nssl_client - longterm\nstart-stop-daemon - not noexec: uses bb_common_bufsiz1\nstat - noexec. nofork candidate(needs fewer allocs)\nstrings - runner\nstty - noexec. nofork candidate: has no allocs or opens except xmove_fd(xopen(\"-F DEVICE\"),STDIN). tcsetattr(STDIN) is not a problem: it would work the same across processes sharing this fd\nsu - suid, spawner\nsulogin - noexec. spawner\nsum - runner\nsv - noexec. needs ^C (uses usleep(420000))\nsvc - noexec. needs ^C (uses usleep(420000))\nsvlogd - daemon\nswapoff - longterm: may cause memory pressure, execing is beneficial\nswapon - rare\nswitch_root - spawner, rare, changes state (oh yes), execing may be important to free binary's inode\nsync - NOFORK\nsysctl - noexec. leaks: xstrdup+xmalloc_read\nsyslogd - daemon\ntac - noexec. runner\ntail - runner\ntar - runner\ntaskset - noexec. spawner\ntcpsvd - daemon\ntee - runner\ntelnet - interactive, longterm\ntelnetd - daemon\ntest - NOFORK\ntftp - runner\ntftpd - daemon\ntime - spawner, longterm, changes state (signals)\ntimeout - spawner, longterm, changes state (signals)\ntop - interactive, longterm\ntouch - NOFORK\ntr - runner\ntraceroute - suid, longterm\ntraceroute6 - suid, longterm\ntrue - NOFORK\ntruncate - NOFORK\ntty - NOFORK\nttysize - NOFORK\ntunctl - noexec\ntune2fs - noexec. leaks: open+xfunc\nubiattach - hardware\nubidetach - hardware\nubimkvol - hardware\nubirename - hardware\nubirmvol - hardware\nubirsvol - hardware\nubiupdatevol - hardware\nudhcpc - daemon\nudhcpd - daemon\nudpsvd - daemon\nuevent - daemon\numount - noexec. leaks: nested xmalloc\nuname - NOFORK\nuncompress - runner\nunexpand - runner\nuniq - runner\nunix2dos - noexec. runner\nunlink - NOFORK\nunlzma - runner\nunlzop - runner\nunxz - runner\nunzip - runner\nuptime - noexec. nofork candidate(is getutxent ok?)\nusers - noexec. nofork candidate(is getutxent ok?)\nusleep - NOFORK. But what about \"killall usleep\"?\nuudecode - runner\nuuencode - runner\nvconfig - noexec. leaks: xsocket+ioctl_or_perror_and_die\nvi - interactive, longterm\nvlock - suid\nvolname - hardware (reads CDROM, this can take long-ish if need to spin up)\nw - noexec. nofork candidate(is getutxent ok?)\nwall - suid\nwatch - longterm\nwatchdog - daemon\nwc - runner\nwget - longterm\nwhich - NOFORK\nwho - noexec. nofork candidate(is getutxent ok?)\nwhoami - NOFORK\nwhois - talks to network\nxargs - noexec. spawner\nxxd - noexec. runner\nxz - runner\nxzcat - runner\nyes - noexec. runner\nzcat - runner\nzcip - daemon\n"
        },
        {
          "name": "NOFORK_NOEXEC.sh",
          "type": "blob",
          "size": 0.701171875,
          "content": "#!/bin/sh\n\nexec >NOFORK_NOEXEC.lst1\n\nfalse && grep -Fv 'NOFORK' NOFORK_NOEXEC.lst \\\n| grep -v 'noexec.' | grep -v 'noexec$' \\\n| grep -v ' suid' \\\n| grep -v ' daemon' \\\n| grep -v ' longterm' \\\n| grep rare\n\necho === nofork candidate\ngrep -F 'nofork candidate' NOFORK_NOEXEC.lst \\\n\necho === noexec candidate\ngrep -F 'noexec candidate' NOFORK_NOEXEC.lst \\\n\necho === ^C\ngrep -F '^C' NOFORK_NOEXEC.lst \\\n| grep -F ' - ' \\\n\necho === talks\ngrep -F 'talks' NOFORK_NOEXEC.lst \\\n| grep -F ' - ' \\\n\necho ===\ngrep -Fv 'NOFORK' NOFORK_NOEXEC.lst \\\n| grep '^[^ ][^ ]* - ' \\\n| grep -v 'noexec.' | grep -v ' - noexec$' \\\n| grep -v ' suid' \\\n| grep -v ' daemon' \\\n| grep -v 'longterm' \\\n| grep -v 'interactive' \\\n| grep -v 'hardware' \\\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 8.5498046875,
          "content": "Please see the LICENSE file for details on copying and usage.\nPlease refer to the INSTALL file for instructions on how to build.\n\nWhat is busybox:\n\n  BusyBox combines tiny versions of many common UNIX utilities into a single\n  small executable.  It provides minimalist replacements for most of the\n  utilities you usually find in bzip2, coreutils, dhcp, diffutils, e2fsprogs,\n  file, findutils, gawk, grep, inetutils, less, modutils, net-tools, procps,\n  sed, shadow, sysklogd, sysvinit, tar, util-linux, and vim.  The utilities\n  in BusyBox often have fewer options than their full-featured cousins;\n  however, the options that are included provide the expected functionality\n  and behave very much like their larger counterparts.\n\n  BusyBox has been written with size-optimization and limited resources in\n  mind, both to produce small binaries and to reduce run-time memory usage.\n  Busybox is also extremely modular so you can easily include or exclude\n  commands (or features) at compile time.  This makes it easy to customize\n  embedded systems; to create a working system, just add /dev, /etc, and a\n  Linux kernel.  Busybox (usually together with uClibc) has also been used as\n  a component of \"thin client\" desktop systems, live-CD distributions, rescue\n  disks, installers, and so on.\n\n  BusyBox provides a fairly complete POSIX environment for any small system,\n  both embedded environments and more full featured systems concerned about\n  space.  Busybox is slowly working towards implementing the full Single Unix\n  Specification V3 (http://www.opengroup.org/onlinepubs/009695399/), but isn't\n  there yet (and for size reasons will probably support at most UTF-8 for\n  internationalization).  We are also interested in passing the Linux Test\n  Project (http://ltp.sourceforge.net).\n\n----------------\n\nUsing busybox:\n\n  BusyBox is extremely configurable.  This allows you to include only the\n  components and options you need, thereby reducing binary size.  Run 'make\n  config' or 'make menuconfig' to select the functionality that you wish to\n  enable.  (See 'make help' for more commands.)\n\n  The behavior of busybox is determined by the name it's called under: as\n  \"cp\" it behaves like cp, as \"sed\" it behaves like sed, and so on.  Called\n  as \"busybox\" it takes the second argument as the name of the applet to\n  run (I.E. \"./busybox ls -l /proc\").\n\n  The \"standalone shell\" mode is an easy way to try out busybox; this is a\n  command shell that calls the built-in applets without needing them to be\n  installed in the path.  (Note that this requires /proc to be mounted, if\n  testing from a boot floppy or in a chroot environment.)\n\n  The build automatically generates a file \"busybox.links\", which is used by\n  'make install' to create symlinks to the BusyBox binary for all compiled in\n  commands.  This uses the CONFIG_PREFIX environment variable to specify\n  where to install, and installs hardlinks or symlinks depending\n  on the configuration preferences.  (You can also manually run\n  the install script at \"applets/install.sh\").\n\n----------------\n\nDownloading the current source code:\n\n  Source for the latest released version, as well as daily snapshots, can always\n  be downloaded from\n\n    http://busybox.net/downloads/\n\n  You can browse the up to the minute source code and change history online.\n\n    http://git.busybox.net/busybox/\n\n  Anonymous GIT access is available.  For instructions, check out:\n\n    http://www.busybox.net/source.html\n\n  For those that are actively contributing and would like to check files in,\n  see:\n\n    http://busybox.net/developer.html\n\n  The developers also have a bug and patch tracking system\n  (https://bugs.busybox.net) although posting a bug/patch to the mailing list\n  is generally a faster way of getting it fixed, and the complete archive of\n  what happened is the git changelog.\n\n  Note: if you want to compile busybox in a busybox environment you must\n  select CONFIG_DESKTOP.\n\n----------------\n\nGetting help:\n\n  when you find you need help, you can check out the busybox mailing list\n  archives at http://busybox.net/lists/busybox/ or even join\n  the mailing list if you are interested.\n\n----------------\n\nBugs:\n\n  if you find bugs, please submit a detailed bug report to the busybox mailing\n  list at busybox@busybox.net.  a well-written bug report should include a\n  transcript of a shell session that demonstrates the bad behavior and enables\n  anyone else to duplicate the bug on their own machine. the following is such\n  an example:\n\n    to: busybox@busybox.net\n    from: diligent@testing.linux.org\n    subject: /bin/date doesn't work\n\n    package: busybox\n    version: 1.00\n\n    when i execute busybox 'date' it produces unexpected results.\n    with gnu date i get the following output:\n\n\t$ date\n\tfri oct  8 14:19:41 mdt 2004\n\n    but when i use busybox date i get this instead:\n\n\t$ date\n\tillegal instruction\n\n    i am using debian unstable, kernel version 2.4.25-vrs2 on a netwinder,\n    and the latest uclibc from cvs.\n\n\t-diligent\n\n  note the careful description and use of examples showing not only what\n  busybox does, but also a counter example showing what an equivalent app\n  does (or pointing to the text of a relevant standard).  Bug reports lacking\n  such detail may never be fixed...  Thanks for understanding.\n\n----------------\n\nPortability:\n\n  Busybox is developed and tested on Linux 2.4 and 2.6 kernels, compiled\n  with gcc (the unit-at-a-time optimizations in version 3.4 and later are\n  worth upgrading to get, but older versions should work), and linked against\n  uClibc (0.9.27 or greater) or glibc (2.2 or greater).  In such an\n  environment, the full set of busybox features should work, and if\n  anything doesn't we want to know about it so we can fix it.\n\n  There are many other environments out there, in which busybox may build\n  and run just fine.  We just don't test them.  Since busybox consists of a\n  large number of more or less independent applets, portability is a question\n  of which features work where.  Some busybox applets (such as cat and rm) are\n  highly portable and likely to work just about anywhere, while others (such as\n  insmod and losetup) require recent Linux kernels with recent C libraries.\n\n  Earlier versions of Linux and glibc may or may not work, for any given\n  configuration.  Linux 2.2 or earlier should mostly work (there's still\n  some support code in things like mount.c) but this is no longer regularly\n  tested, and inherently won't support certain features (such as long files\n  and --bind mounts).  The same is true for glibc 2.0 and 2.1: expect a higher\n  testing and debugging burden using such old infrastructure.  (The busybox\n  developers are not very interested in supporting these older versions, but\n  will probably accept small self-contained patches to fix simple problems.)\n\n  Some environments are not recommended.  Early versions of uClibc were buggy\n  and missing many features: upgrade.  Linking against libc5 or dietlibc is\n  not supported and not interesting to the busybox developers.  (The first is\n  obsolete and has no known size or feature advantages over uClibc, the second\n  has known bugs that its developers have actively refused to fix.)  Ancient\n  Linux kernels (2.0.x and earlier) are similarly uninteresting.\n\n  In theory it's possible to use Busybox under other operating systems (such as\n  MacOS X, Solaris, Cygwin, or the BSD Fork Du Jour).  This generally involves\n  a different kernel and a different C library at the same time.  While it\n  should be possible to port the majority of the code to work in one of\n  these environments, don't be surprised if it doesn't work out of the box.  If\n  you're into that sort of thing, start small (selecting just a few applets)\n  and work your way up.\n\n  In 2005 Shaun Jackman has ported busybox to a combination of newlib\n  and libgloss, and some of his patches have been integrated.\n\nSupported hardware:\n\n  BusyBox in general will build on any architecture supported by gcc.  We\n  support both 32 and 64 bit platforms, and both big and little endian\n  systems.\n\n  Under 2.4 Linux kernels, kernel module loading was implemented in a\n  platform-specific manner.  Busybox's insmod utility has been reported to\n  work under ARM, CRIS, H8/300, x86, ia64, x86_64, m68k, MIPS, PowerPC, S390,\n  SH3/4/5, Sparc, and v850e.  Anything else probably won't work.\n\n  The module loading mechanism for the 2.6 kernel is much more generic, and\n  we believe 2.6.x kernel module loading support should work on all\n  architectures supported by the kernel.\n\n----------------\n\nPlease feed suggestions, bug reports, insults, and bribes back to the busybox\nmailing list:\n\n\tbusybox@busybox.net\n\nand/or maintainer:\n\n\tDenys Vlasenko\n\t<vda.linux@googlemail.com>\n"
        },
        {
          "name": "TODO",
          "type": "blob",
          "size": 11.15625,
          "content": "Busybox TODO\n\nHarvest patches from\nhttp://git.openembedded.org/cgit.cgi/openembedded/tree/recipes/busybox/\nhttps://dev.openwrt.org/browser/trunk/package/busybox/patches/\n\n\nStuff that needs to be done.  This is organized by who plans to get around to\ndoing it eventually, but that doesn't mean they \"own\" the item.  If you want to\ndo one of these bounce an email off the person it's listed under to see if they\nhave any suggestions how they plan to go about it, and to minimize conflicts\nbetween your work and theirs.  But otherwise, all of these are fair game.\n\nRob Landley suggested this:\n  Implement bb_realpath() that can handle NULL on non-glibc.\n\n  sh\n    The command shell situation is a mess.  We have two different\n    shells that don't really share any code, and the \"standalone shell\" doesn't\n    work all that well (especially not in a chroot environment), due to apps not\n    being reentrant.\n\n  Do a SUSv3 audit\n    Look at the full Single Unix Specification version 3 (available online at\n    \"http://www.opengroup.org/onlinepubs/009695399/nfindex.html\") and\n    figure out which of our apps are compliant, and what we're missing that\n    we might actually care about.\n\n    Even better would be some kind of automated compliance test harness that\n    exercises each command line option and the various corner cases.\n\n  Internationalization\n    How much internationalization should we do?\n\n    The low hanging fruit is UTF-8 character set support.  We should do this.\n    See TODO_unicode file.\n\n    We also have lots of hardwired english text messages.  Consolidating this\n    into some kind of message table not only makes translation easier, but\n    also allows us to consolidate redundant (or close) strings.\n\n    We probably don't want to be bloated with locale support.  (Not unless we\n    can cleanly export it from our underlying C library without having to\n    concern ourselves with it directly.  Perhaps a few specific things like a\n    config option for \"date\" are low hanging fruit here?)\n\n    What level should things happen at?  How much do we care about\n    internationalizing the text console when X11 and xterms are so much better\n    at it?  (There's some infrastructure here we don't implement: The\n    \"unicode_start\" and \"unicode_stop\" shell scripts need \"vt-is-UTF8\" and a\n    --unicode option to loadkeys.  That implies a real loadkeys/dumpkeys\n    implementation to replace loadkmap/dumpkmap.  Plus messing with console font\n    loading.  Is it worth it, or do we just say \"use X\"?)\n\n  Individual compilation of applets.\n    It would be nice if busybox had the option to compile to individual applets,\n    for people who want an alternate implementation less bloated than the gnu\n    utils (or simply with less political baggage), but without it being one big\n    executable.\n\n    Turning libbb into a real dll is another possibility, especially if libbb\n    could export some of the other library interfaces we've already more or less\n    got the code for (like zlib).\n\n  buildroot - Make a \"dogfood\" option\n    Busybox 1.1 will be capable of replacing most gnu packages for real world\n    use, such as developing software or in a live CD.  It needs wider testing.\n\n    Busybox should now be able to replace bzip2, coreutils, e2fsprogs, file,\n    findutils, gawk, grep, inetutils, less, modutils, net-tools, patch, procps,\n    sed, shadow, sysklogd, sysvinit, tar, util-linux, and vim.  The resulting\n    system should be self-hosting (I.E. able to rebuild itself from source\n    code).  This means it would need (at least) binutils, gcc, and make, or\n    equivalents.\n\n    It would be a good \"eating our own dogfood\" test if buildroot had the option\n    of using a \"make allyesconfig\" busybox instead of the all of the above\n    packages.  Anything that's wrong with the resulting system, we can fix.  (It\n    would be nice to be able to upgrade busybox to be able to replace bash and\n    diffutils as well, but we're not there yet.)\n\n    One example of an existing system that does this already is Firmware Linux:\n      http://www.landley.net/code/firmware\n\n  initramfs\n    Busybox should have a sample initramfs build script.  This depends on\n    shell, mdev, and switch_root.\n\n  mkdep\n    Write a mkdep that doesn't segfault if there's a directory it doesn't\n    have permission to read, isn't based on manually editing the output of\n    lexx and yacc, doesn't make such a mess under include/config, etc.\n\n  Group globals into unions of structures.\n    Go through and turn all the global and static variables into structures,\n    and have all those structures be in a big union shared between processes,\n    so busybox uses less bss.  (This is a big win on nommu machines.)  See\n    sed.c and mdev.c for examples.\n\n  Go through bugs.busybox.net and close out all of that somehow.\n    This one's open to everybody, but I'll wind up doing it...\n\nBernhard Reutner-Fischer <busybox@busybox.net> suggests to look at these:\n  New debug options:\n    -Wlarger-than-127\n    Cleanup any big users\n  Collate BUFSIZ IOBUF_SIZE MY_BUF_SIZE PIPE_PROGRESS_SIZE BUFSIZE PIPESIZE\n    make bb_common_bufsiz1 configurable, size wise.\n    make pipesize configurable, size wise.\n    Use bb_common_bufsiz1 throughout applets!\n\nAs yet unclaimed:\n\n----\ndiff\n  Make sure we handle empty files properly:\n    From the patch man page:\n\n    you can remove a file by sending out a context diff that compares\n    the file to be deleted with an empty file dated the Epoch.  The\n    file will be removed unless patch is conforming to POSIX and the\n    -E or --remove-empty-files option is not given.\n---\npatch\n  Should have simple fuzz factor support to apply patches at an offset which\n  shouldn't take up too much space.\n\n  And while we're at it, a new patch filename quoting format is apparently\n  coming soon:  http://marc.theaimsgroup.com/?l=git&m=112927316408690&w=2\n\nArchitectural issues:\n\nbb_close() with fsync()\n  We should have a bb_close() in place of normal close, with a CONFIG_ option\n  to not just check the return value of close() for an error, but fsync().\n  Close can't reliably report anything useful because if write() accepted the\n  data then it either went out to the network or it's in cache or a pipe\n  buffer.  Either way, there's no guarantee it'll make it to its final\n  destination before close() gets called, so there's no guarantee that any\n  error will be reported.\n\n  You need to call fsync() if you care about errors that occur after write(),\n  but that can have a big performance impact.  So make it a config option.\n---\nUnify archivers\n  Lots of archivers have the same general infrastructure.  The directory\n  traversal code should be factored out, and the guts of each archiver could\n  be some setup code and a series of callbacks for \"add this file\",\n  \"add this directory\", \"add this symlink\" and so on.\n\n  This could clean up tar and zip, and make it cheaper to add cpio and ar\n  write support, and possibly even cheaply add things like mkisofs or\n  mksquashfs someday, if they become relevant.\n---\nText buffer support.\n  Several existing applets (sort, vi, less...) read\n  a whole file into memory and act on it.  Use open_read_close().\n---\nMemory Allocation\n  We have a CONFIG_BUFFER mechanism that lets us select whether to do memory\n  allocation on the stack or the heap.  Unfortunately, we're not using it much.\n  We need to audit our memory allocations and turn a lot of malloc/free calls\n  into RESERVE_CONFIG_BUFFER/RELEASE_CONFIG_BUFFER.\n  For a start, see e.g. make EXTRA_CFLAGS=-Wlarger-than-64\n\n  And while we're at it, many of the CONFIG_FEATURE_CLEAN_UP #ifdefs will be\n  optimized out by the compiler in the stack allocation case (since there's no\n  free for an alloca()), and this means that various cleanup loops that just\n  call free might also be optimized out by the compiler if written right, so\n  we can yank those #ifdefs too, and generally clean up the code.\n---\nFEATURE_CLEAN_UP\n  This is more an unresolved issue than a to-do item.  More thought is needed.\n\n  Normally we rely on exit() to free memory, close files and unmap segments\n  for us.  This makes most calls to free(), close(), and unmap() optional in\n  busybox applets that don't intend to run for very long, and optional stuff\n  can be omitted to save size.\n\n  The idea was raised that we could simulate fork/exit with setjmp/longjmp\n  for _really_ brainless embedded systems, or speed up the standalone shell\n  by not forking.  Doing so would require a reliable FEATURE_CLEAN_UP.\n  Unfortunately, this isn't as easy as it sounds.\n\n  The problem is, lots of things exit(), sometimes unexpectedly (xmalloc())\n  and sometimes reliably (bb_perror_msg_and_die() or show_usage()).  This\n  jumps out of the normal flow control and bypasses any cleanup code we\n  put at the end of our applets.\n\n  It's possible to add hooks to libbb functions like xmalloc() and xopen()\n  to add their entries to a linked list, which could be traversed and\n  freed/closed automatically.  (This would need to be able to free just the\n  entries after a checkpoint to be usable for a forkless standalone shell.\n  You don't want to free the shell's own resources.)\n\n  Right now, FEATURE_CLEAN_UP is more or less a debugging aid, to make things\n  like valgrind happy.  It's also documentation of _what_ we're trusting\n  exit() to clean up for us.  But new infrastructure to auto-free stuff would\n  render the existing FEATURE_CLEAN_UP code redundant.\n\n  For right now, exit() handles it just fine.\n\n\nMinor stuff:\n  watchdog.c could autodetect the timer duration via:\n    if(!ioctl (fd, WDIOC_GETTIMEOUT, &tmo)) timer_duration = 1 + (tmo / 2);\n  Unfortunately, that needs linux/watchdog.h and that contains unfiltered\n  kernel types on some distros, which breaks the build.\n---\n  use bb_error_msg where appropriate: See\n  egrep \"(printf.*\\([[:space:]]*(stderr|2)|[^_]write.*\\([[:space:]]*(stderr|2))\"\n---\n  use bb_perror_msg where appropriate: See\n  egrep \"[^_]perror\"\n---\n  possible code duplication ingroup() and is_a_group_member()\n---\n  Move __get_hz() to a better place and (re)use it in route.c, ash.c\n---\n  See grep -r strtod\n  Alot of duplication that wants cleanup.\n---\n  unify progress_meter. wget, flash_eraseall, pipe_progress, fbsplash, setfiles.\n---\n\n(TODO list after discussion 11.05.2009)\n\n* shrink tc/brctl/ip\n  tc/brctl seem like fairly large things to try and tackle in your timeframe,\n  and i think people have posted attempts in the past. Adding additional\n  options to ip though seems reasonable.\n\n* add tests for some applets\n\n* implement POSIX utilities and audit them for POSIX conformance. then\n  audit them for GNU conformance. then document all your findings in a new\n  doc/conformance.txt file while perhaps implementing some of the missing\n  features.\n  you can find the latest POSIX documentation (1003.1-2008) here:\n  http://www.opengroup.org/onlinepubs/9699919799/\n  and the complete list of all utilities that POSIX covers:\n  http://www.opengroup.org/onlinepubs/9699919799/idx/utilities.html\n  The first step would to generate a file/matrix what is already archived\n  (also IPV6)\n\n* implement 'at'\n\n* rpcbind (former portmap) or equivalent\n  so that we don't have to use -o nolock on nfs mounts\n\n* check IPV6 compliance\n\n* generate a mini example using kernel+busybox only (+libc) for example\n\n* more support for advanced linux 2.6.x features, see: iotop\n  most likely there is more\n"
        },
        {
          "name": "TODO_unicode",
          "type": "blob",
          "size": 0.7138671875,
          "content": "Already fixed applets:\ncal\nlsmod\ndf\ndumpleases\n\nApplets which may need unicode handling (more extensive than sanitizing\nof filenames in error messages):\n\nls - work in progress\nexpand, unexpand - uses unicode_strlen, not scrlen\nash, hush through lineedit - uses unicode_strlen, not scrlen\ntop - need to sanitize process args\nps - need to sanitize process args\nless\nmore\nvi\ned\ncut\nawk\nsed\ntr\ngrep egrep fgrep\nfold\nsort\nhead, tail\ncatv - \"display nonprinting chars\" - what this could mean for unicode?\nwc\nchat\ndumpkmap\nlast - just line up columns\nman\nmicrocom\nstrings\nwatch\n\nUnsure, may need fixing:\n\nhostname - do we really want to protect against bad chars in it?\npatch\naddgroup, adduser, delgroup, deluser\ntelnet\ntelnetd\nod\nprintf\n"
        },
        {
          "name": "applets",
          "type": "tree",
          "content": null
        },
        {
          "name": "applets_sh",
          "type": "tree",
          "content": null
        },
        {
          "name": "arch",
          "type": "tree",
          "content": null
        },
        {
          "name": "archival",
          "type": "tree",
          "content": null
        },
        {
          "name": "busybox_ldscript.README.txt",
          "type": "blob",
          "size": 2.05078125,
          "content": "/* Add SORT_BY_ALIGNMENT to linker script (found in busybox_unstripped.out):\n##  .rodata : { *(.rodata SORT_BY_ALIGNMENT(.rodata.*) .gnu.linkonce.r.*) }\n##  .data   : { *(.data SORT_BY_ALIGNMENT(.data.*) .gnu.linkonce.d.*) }\n##  .bss    : { *(.bss SORT_BY_ALIGNMENT(.bss.*) .gnu.linkonce.b.*) }\n## This will eliminate most of the padding (~3kb).\n## Hmm, \"ld --sort-section alignment\" should do it too.\n##\n## There is a ld hack which is meant to decrease disk usage\n## at the cost of more RAM usage (??!!) in standard ld script:\n##  . = ALIGN (0x1000) - ((0x1000 - .) & (0x1000 - 1)); . = DATA_SEGMENT_ALIGN (0x1000, 0x1000);\n## Replace it with:\n##  . = ALIGN (0x1000); . = DATA_SEGMENT_ALIGN (0x1000, 0x1000);\n## to unconditionally align .data to the next page boundary,\n## instead of \"next page, plus current offset in this page\"\n*/\n\n/* To reduce the number of VMAs each bbox process has,\n## move *(.bss SORT_BY_ALIGNMENT(.bss.*) ...)\n## part from .bss : {...} block to .data : { ... } block.\n## (This usually increases .data section by only one page).\n## Result:\n##\n##    text data  bss     dec    hex filename\n## 1050792  560 7580 1058932 102874 busybox.bss\n## 1050792 8149    0 1058941 10287d busybox.nobss\n##\n## $ exec busybox.bss pmap $$\n## 0000000008048000    1028K r-xp  /path/to/busybox.bss\n## 0000000008149000       8K rw-p  /path/to/busybox.bss\n## 000000000814b000       4K rw-p    [ anon ]  <---- this VMA is eliminated\n## 00000000085f5000       4K ---p  [heap]\n## 00000000085f6000       4K rw-p  [heap]\n## 00000000f7778000       8K rw-p    [ anon ]\n## 00000000f777a000      12K r--p  [vvar]\n## 00000000f777d000       8K r-xp  [vdso]\n## 00000000ff7e9000     132K rw-p  [stack]\n##\n## $ exec busybox.nobss pmap $$\n## 0000000008048000    1028K r-xp  /path/to/busybox.nobss\n## 0000000008149000      12K rw-p  /path/to/busybox.nobss\n## 00000000086f0000       4K ---p  [heap]\n## 00000000086f1000       4K rw-p  [heap]\n## 00000000f7783000       8K rw-p    [ anon ]\n## 00000000f7785000      12K r--p  [vvar]\n## 00000000f7788000       8K r-xp  [vdso]\n## 00000000ffac0000     132K rw-p  [stack]\n*/\n"
        },
        {
          "name": "configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "console-tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "coreutils",
          "type": "tree",
          "content": null
        },
        {
          "name": "debianutils",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "e2fsprogs",
          "type": "tree",
          "content": null
        },
        {
          "name": "editors",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "findutils",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "init",
          "type": "tree",
          "content": null
        },
        {
          "name": "klibc-utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "libbb",
          "type": "tree",
          "content": null
        },
        {
          "name": "libpwdgrp",
          "type": "tree",
          "content": null
        },
        {
          "name": "loginutils",
          "type": "tree",
          "content": null
        },
        {
          "name": "mailutils",
          "type": "tree",
          "content": null
        },
        {
          "name": "make_single_applets.sh",
          "type": "blob",
          "size": 3.3095703125,
          "content": "#!/bin/sh\n# This script expects that the tree was built with the desired .config:\n# in particular, it expects that include/applets.h is generated already.\n#\n# The script will try to rebuild each enabled applet in isolation.\n# All other options which chose general bbox config, applet features, etc,\n# are not modified for the builds.\n\nmakeopts=\"-j9\"\n\n# The list of all applet config symbols\ntest -f include/applets.h || { echo \"No include/applets.h file\"; exit 1; }\napps=\"`\ngrep ^IF_ include/applets.h \\\n| grep -v '^IF_FEATURE_' \\\n| sed 's/IF_\\([A-Z0-9._-]*\\)(.*/\\1/' \\\n| grep -v '^BUSYBOX$' \\\n| sort | uniq\n`\"\n\n# Take existing config\ntest -f .config || { echo \"No .config file\"; exit 1; }\ncfg=\"`cat .config`\"\n\n# Make a config with all applet symbols off\nallno=\"$cfg\"\nfor app in $apps; do\n\tallno=\"`echo \"$allno\" | sed \"s/^CONFIG_${app}=y\\$/# CONFIG_${app} is not set/\"`\"\ndone\n# remove \"busybox\" as well\nallno=\"`echo \"$allno\" | sed \"s/^CONFIG_BUSYBOX=y\\$/# CONFIG_BUSYBOX is not set/\"`\"\n# disable any CONFIG_script_DEPENDENCIES as well\nallno=\"`echo \"$allno\" | sed \"s/^\\(CONFIG_.*_DEPENDENCIES\\)=y\\$/# \\1 is not set/\"`\"\n#echo \"$allno\" >.config_allno\n\ntrap 'test -f .config.SV && mv .config.SV .config && touch .config' EXIT\n\n\n# Turn on each applet individually and build single-applet executable\n# (give config names on command line to build only those)\ntest $# = 0 && set -- $apps\nfail=0\nfor app; do\n\t# Only if it was indeed originally enabled...\n\t{ echo \"$cfg\" | grep -q \"^CONFIG_${app}=y\\$\"; } || continue\n\n\techo \"Making ${app}...\"\n\tmv .config .config.SV\n\techo \"CONFIG_${app}=y\" >.config\n\techo \"$allno\" | sed \"/^# CONFIG_${app} is not set\\$/d\" >>.config\n\n\tif test x\"${app}\" != x\"SH_IS_ASH\" && test x\"${app}\" != x\"SH_IS_HUSH\"; then\n\t\t# $allno has all choices for \"sh\" aliasing set to off.\n\t\t# \"sh\" aliasing defaults to \"ash\", not none.\n\t\t# without this fix, \"make oldconfig\" sets it wrong,\n\t\t# resulting in NUM_APPLETS = 2 (the second applet is \"sh\")\n\t\tsed '/CONFIG_SH_IS_NONE/d' -i .config\n\t\techo \"CONFIG_SH_IS_NONE=y\" >>.config\n\tfi\n\n\tif ! yes '' | make oldconfig >busybox_make_${app}.log 2>&1; then\n\t\tfail=$((fail+1))\n\t\techo \"Config error for ${app}\"\n\t\tmv .config busybox_config_${app}\n\telif ! make $makeopts >>busybox_make_${app}.log 2>&1; then\n\t\tfail=$((fail+1))\n\t\tgrep -i -e error: -e warning: busybox_make_${app}.log\n\t\techo \"Build error for ${app}\"\n\t\tmv .config busybox_config_${app}\n\telif ! grep -q '^#define NUM_APPLETS 1$' include/NUM_APPLETS.h; then\n\t\tgrep -i -e error: -e warning: busybox_make_${app}.log\n\t\tmv busybox busybox_${app}\n\t\tfail=$((fail+1))\n\t\techo \"NUM_APPLETS != 1 for ${app}: `cat include/NUM_APPLETS.h`\"\n\t\tmv .config busybox_config_${app}\n\telse\n\t\tif grep -q 'use larger COMMON_BUFSIZE' busybox_make_${app}.log; then\n\t\t\t# FEATURE_USE_BSS_TAIL=y is selected, and build system\n\t\t\t# recommends rebuilding. Do so, and print some\n\t\t\t# debug info to see whether it works right:\n\t\t\ttail -n1 busybox_make_${app}.log\n\t\t\tnm busybox_unstripped | grep ' _end'\n\t\t\tmake >/dev/null 2>&1\n\t\t\tnm busybox_unstripped | grep ' _end'\n\t\t\tgrep ^bb_common_bufsiz1 busybox_unstripped.map\n\t\tfi\n\t\tgrep -i -e error: -e warning: busybox_make_${app}.log \\\n\t\t|| rm busybox_make_${app}.log\n\t\tmv busybox busybox_${app}\n\t\t#mv .config busybox_config_${app}\n\tfi\n\tmv .config.SV .config\n\t#exit\ndone\ntouch .config # or else next \"make\" can be confused\necho \"Failures: $fail\"\ntest $fail = 0 # set exitcode\n"
        },
        {
          "name": "miscutils",
          "type": "tree",
          "content": null
        },
        {
          "name": "modutils",
          "type": "tree",
          "content": null
        },
        {
          "name": "networking",
          "type": "tree",
          "content": null
        },
        {
          "name": "printutils",
          "type": "tree",
          "content": null
        },
        {
          "name": "procps",
          "type": "tree",
          "content": null
        },
        {
          "name": "qemu_multiarch_testing",
          "type": "tree",
          "content": null
        },
        {
          "name": "runit",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "selinux",
          "type": "tree",
          "content": null
        },
        {
          "name": "shell",
          "type": "tree",
          "content": null
        },
        {
          "name": "size_single_applets.sh",
          "type": "blob",
          "size": 2.203125,
          "content": "#!/bin/bash\n# Which config to use when updating the sizes in \"official\"\n# source tree? I am using x86 glibc toolchain of some typical distro,\n# not-static build, 32-bit defconfig build:\n# # CONFIG_STATIC is not set\n# CONFIG_CROSS_COMPILER_PREFIX=\"\"\n# CONFIG_EXTRA_CFLAGS=\"-m32\"\n# CONFIG_EXTRA_LDFLAGS=\"-m32\"\n\n# The list of all applet config symbols\ntest -f include/applets.h || { echo \"No include/applets.h file\"; exit 1; }\napps=\"`\ngrep ^IF_ include/applets.h \\\n| grep -v ^IF_FEATURE_ \\\n| sed 's/IF_\\([A-Z0-9._-]*\\)(.*/\\1/' \\\n| sort | uniq\n`\"\n\ntest $# = 0 && set -- $apps\n\nmintext=999999999\nfor app; do\n\tb=\"busybox_${app}\"\n\ttest -f \"$b\" || continue\n\ttext=`size \"$b\" | tail -1 | sed -e's/\\t/ /g' -e's/^ *//' -e's/ .*//'`\n\t#echo \"text from $app: $text\"\n\ttest x\"${text//[0123456789]/}\" = x\"\" || {\n\t\techo \"Can't get: size $b\"\n\t\texit 1\n\t}\n\ttest $mintext -gt $text && {\n\t\tmintext=$text\n\t\techo \"# New mintext from $app: $mintext\"\n\t}\n\teval \"text_${app}=$text\"\ndone\n\nfor app; do\n\tb=\"busybox_${app}\"\n\ttest -f \"$b\" || continue\n\teval \"text=\\$text_${app}\"\n\techo \"# $app adds $((text-mintext))\"\ndone\n\ngrep ^IF_ include/applets.h \\\n| grep -v ^IF_FEATURE_ \\\n| sed 's/, .*//' \\\n| sed 's/\\t//g' \\\n| sed 's/ //g' \\\n| sed 's/(APPLET(/(/' \\\n| sed 's/(APPLET_[A-Z]*(/(/' \\\n| sed 's/(IF_[A-Z_]*(/(/' \\\n| sed 's/IF_\\([A-Z0-9._-]*\\)(\\(.*\\)/\\1 \\2/' \\\n| sort | uniq \\\n| while read app name; do\n\tb=\"busybox_${app}\"\n\ttest -f \"$b\" || continue\n\n\tfile=`grep -l \"bool \\\"$name[\\\" ]\" $(find -name '*.c') | xargs`\n\t# A few applets have their CONFIG items in Config.* files, not .c files:\n\ttest \"$file\" || file=`grep -l \"bool \\\"$name[\\\" ]\" $(find -name 'Config.*') | xargs`\n\ttest \"$file\" || continue\n\t#echo \"FILE:'$file'\"\n\n\teval \"text=\\$text_${app}\"\n\tsz=$((text-mintext))\n\tsz_kb=$((sz/1000))\n\tsz_frac=$(( (sz - sz_kb*1000) ))\n\tsz_f=$((sz_frac / 100))\n\n\techo -n \"sed 's/bool \\\"$name\"'[\" ](*[0-9tinykbytes .]*)*\"*$/'\n\tif test \"$sz_kb\" -ge 10; then\n\t\techo -n \"bool \\\"$name (${sz_kb} kb)\\\"\"\n\telif test \"$sz_kb\" -gt 0 -a \"$sz_f\" = 0; then\n\t\techo -n \"bool \\\"$name (${sz_kb} kb)\\\"\"\n\telif test \"$sz_kb\" -gt 0; then\n\t\techo -n \"bool \\\"$name ($sz_kb.${sz_f} kb)\\\"\"\n\telif test \"$sz\" -ge 200; then\n\t\techo -n \"bool \\\"$name ($sz bytes)\\\"\"\n\telse\n\t\techo -n \"bool \\\"$name (tiny)\\\"\"\n\tfi\n\techo \"/' -i $file\"\ndone\n"
        },
        {
          "name": "sysklogd",
          "type": "tree",
          "content": null
        },
        {
          "name": "testsuite",
          "type": "tree",
          "content": null
        },
        {
          "name": "util-linux",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}