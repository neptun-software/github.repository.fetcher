{
  "metadata": {
    "timestamp": 1736709889428,
    "page": 378,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "DynamoRIO/dynamorio",
      "stars": 2713,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.62890625,
          "content": "---\nBasedOnStyle: WebKit\nAlignTrailingComments: true\nAllowShortBlocksOnASingleLine: false\nAllowShortCaseLabelsOnASingleLine: true\nAllowShortFunctionsOnASingleLine: false\nAllowShortIfStatementsOnASingleLine: false\nAlwaysBreakAfterDefinitionReturnType: All\nAlwaysBreakAfterReturnType: All\nAlignAfterOpenBracket: Align\nAlignEscapedNewlines: Left\nBinPackArguments: true\nBinPackParameters: true\nBreakBeforeBinaryOperators: None\nColumnLimit: 90\nFixNamespaceComments: true\nNamespaceIndentation: None\nIndentWidth: 4\nIndentPPDirectives: AfterHash\nPointerAlignment: Right\nCommentPragmas: '^ clang-format: '\nSortIncludes: false\nMaxEmptyLinesToKeep: 1\n---\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1455078125,
          "content": "# macOS specific\n.DS_Store\n\n# IDE project files\n.cache\n.idea\n.vs\n.vscode\nbuild\nCMakeLists.txt.user\n# files generated by ctags/cscope\ntags\ncscope.out\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.322265625,
          "content": "[submodule \"third_party/libipt\"]\n    path = third_party/libipt\n    url = https://github.com/intel/libipt.git\n[submodule \"third_party/zlib\"]\n    path = third_party/zlib\n    url = https://github.com/madler/zlib.git\n[submodule \"third_party/elfutils\"]\n    path = third_party/elfutils\n    url = https://sourceware.org/git/elfutils.git\n"
        },
        {
          "name": "ACKNOWLEDGEMENTS",
          "type": "blob",
          "size": 2.8115234375,
          "content": "===========================================================================\nACKNOWLEDGEMENTS / AUTHORS OF DYNAMORIO\n\nThe following is a partial list of the people who have contributed to the\nDynamoRIO effort over the years, with each group in alphabetical\norder. Many others have provided invaluable insights, suggestions, and\nconstructive criticism.\n\nAs an open source project, 2009-present:\n\n  * Philippe Antoine\n  * Sotiris Apostolakis (Google)\n  * Nahome Bete (Google)\n  * Derek Bruening (Google)\n  * Hongyi Chen\n  * Branden Clark\n  * Brett Coon (Google)\n  * Enrico Deiana (Google)\n  * Shawn M. Denbow\n  * Connal de Souza (Google)\n  * Victor Derks\n  * Matthew Devereau (Arm)\n  * Pavel Durov\n  * Yuri Ershov\n  * Doug Evans (Google)\n  * Peter Feiner\n  * Vasilis Flouris\n  * John F.X. Galea\n  * Jack Gallagher (Arm)\n  * Peter Goodman (Google)\n  * Ryan Goulden\n  * Al Grant (Arm)\n  * Hendrik Greving (Google)\n  * Edmund Grimley Evans (Arm)\n  * Sahil Guptah (Google)\n  * Florian Hahn (Arm)\n  * Jivan Hakobyan\n  * Assad Hashmi (Arm)\n  * Byron Hawkins\n  * Yang Hu\n  * Kyle Huey\n  * Timur Iskhodzhanov (Google)\n  * Mateusz Kalinowski (Arm)\n  * Svilen Kanev (Google)\n  * Stanislaw Kardach\n  * Piyus Kedia\n  * Mazen Kharbutli (Google)\n  * Dhiru Kholia\n  * Yury Khrustalev\n  * Reid Kleckner (Google)\n  * Snehasish Kumar (Google)\n  * Daniel Kuts\n  * Hyoun Kyu Cho\n  * Ilya Leoshkevich\n  * Cheng Li\n  * Junxuan Liao\n  * Yang Liu\n  * Shuntian Liu\n  * Kaiyeung Luk (Google)\n  * Kevin Malachowski (Google)\n  * Cam Mannett (Arm)\n  * Felix Moessbauer\n  * Wenlong Mu\n  * Maks Naumov\n  * Adrian Negreanu\n  * Vadim Petrochenkov\n  * Toshi Piazza\n  * Phil Ramsey (Arm)\n  * Prasun Ratn\n  * Cullen Rhodes (Arm)\n  * Edward J. Schwartz\n  * Abhinav Anil Sharma (Google)\n  * Maxim Shudrak\n  * George Steed (Arm)\n  * Yang Tang (Google)\n  * Dimitrios Tatsis\n  * Mircea Trofin (Google)\n  * Nilay Vaish\n  * S.J.R. van Schaik\n  * Alexey Vishnyakov\n  * Dmitry Vyukov (Google)\n  * Joshua Warburton (Arm)\n  * Peter Wei\n  * William Woodruff\n  * Louis Ye (Google)\n  * Jerry Youxin\n  * Mingwei Zhang\n  * Qidong Zhao (Google)\n  * Qin Zhao (Google)\n  * Kevin Zhou (Arm)\n\nAt VMware, 2007-2009:\n\n  * Derek Bruening\n  * Bharath Chandramohan\n  * Timothy Garnett\n  * Vladimir Kiriansky\n  * Samuel Larsen\n\nAt Determina, 2003-2007:\n\n  * Sanjeev Banerji\n  * Jim Brink\n  * Derek Bruening\n  * Bharath Chandramohan\n  * Timothy Garnett\n  * Vladimir Kiriansky\n  * Samuel Larsen\n  * Charles Renert\n  * Srinivasan Sridharan\n\nAt MIT, 2001-2003:\n\n  * Saman Amarasinghe\n  * Iris Baron\n  * Derek Bruening\n  * Timothy Garnett\n  * Josh Jacobs\n  * Vladimir Kiriansky\n  * Chris Leger\n  * Greg Sullivan\n  * Qin Zhao\n\nAt Hewlett-Packard, 2000-2001:\n\n  * Vas Bala\n  * Derek Bruening\n  * Giuseppe Desoli\n  * Evelyn Duesterwald\n  * Kim Hazelwood Cettei\n  * Mike Smith\n\n===========================================================================\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 84.263671875,
          "content": "# **********************************************************\n# Copyright (c) 2010-2025 Google, Inc.    All rights reserved.\n# Copyright (c) 2009-2010 VMware, Inc.    All rights reserved.\n# Copyright (c) 2018 Arm Limited          All rights reserved.\n# **********************************************************\n\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# * Redistributions of source code must retain the above copyright notice,\n#   this list of conditions and the following disclaimer.\n#\n# * Redistributions in binary form must reproduce the above copyright notice,\n#   this list of conditions and the following disclaimer in the documentation\n#   and/or other materials provided with the distribution.\n#\n# * Neither the name of VMware, Inc. nor the names of its contributors may be\n#   used to endorse or promote products derived from this software without\n#   specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n# ARE DISCLAIMED. IN NO EVENT SHALL VMWARE, INC. OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH\n# DAMAGE.\n\n###########################################################################\n# Missing features:\n# i#77: make DRstats a subproject to support with different compiler from libutil\n# i#84: nmake adds space before 1st / in 1st arg to a command invoked with quotes\n# i#74: create source tarball via 'make package_source'\n# i#68: replace perl with cmake scripts and CTest\n# i#70: symbol store support in core/Makefile and tools/Makefile\n# i#72: RHEL3 linker script has no __executable_start\n# i#60: re-add libutil/ unit tests\n#\n# Not filed:\n# * move info like \"build core solely from DDK\" from make/compiler.mk into\n#   HowToBuild.wiki\n###########################################################################\n\n# Visual Studio 2017 requires 3.7.\ncmake_minimum_required(VERSION 3.7)\n\ninclude(make/policies.cmake NO_POLICY_SCOPE)\n\n# for non-makefile-based generators (i.e., Visual Studio) there is no\n# CMAKE_BUILD_TYPE and instead there are multiple configs.\n# note that we would love cmake to support multi-config for makefiles too,\n# but given that it doesn't, and that we don't have full control\n# over the output dir names (until cmake 2.8.4), I'm collapsing\n# the VS generator configs to a single choice to match the makefiles.\n# this must be done prior to the project() command and the var\n# must be set in the cache.\nif (\"${CMAKE_GENERATOR}\" MATCHES \"Visual Studio\")\n  # Workaround for https://gitlab.kitware.com/cmake/cmake/issues/17992\n  set(CMAKE_SYSTEM_VERSION_TEMP $ENV{WindowsSDKVersion})\n  string(REGEX REPLACE \"([0-9.]+).*\" \"\\\\1\" CMAKE_SYSTEM_VERSION_TEMP \"${CMAKE_SYSTEM_VERSION_TEMP}\")\n  if (CMAKE_SYSTEM_VERSION_TEMP)\n    set(CMAKE_SYSTEM_VERSION ${CMAKE_SYSTEM_VERSION_TEMP} CACHE INTERNAL \"\")\n  endif()\n  if (DEBUG)\n    set(CMAKE_CONFIGURATION_TYPES \"Debug\" CACHE STRING \"\" FORCE)\n  else (DEBUG)\n    set(CMAKE_CONFIGURATION_TYPES \"RelWithDebInfo\" CACHE STRING \"\" FORCE)\n  endif (DEBUG)\n  # we want to use the <VAR>_<config> variants of config-dependent properties\n  string(TOUPPER \"${CMAKE_CONFIGURATION_TYPES}\" upper)\n  set(location_suffix \"_${upper}\")\nelse (\"${CMAKE_GENERATOR}\" MATCHES \"Visual Studio\")\n  set(location_suffix \"\")\nendif (\"${CMAKE_GENERATOR}\" MATCHES \"Visual Studio\")\n\n# I want to override the default CMAKE_INSTALL_PREFIX, but allow it to\n# be set (as the same var name, so CPack and other standard tools\n# work) externally.  The best solution is to check whether defined BEFORE\n# the project() command.\n# If we didn't use standard tools we could set CMAKE_INSTALL_PREFIX\n# to be CACHE INTERNAL FORCE to INSTALL_PREFIX.\nif (NOT DEFINED CMAKE_INSTALL_PREFIX)\n  set(install_override ON)\nelse (NOT DEFINED CMAKE_INSTALL_PREFIX)\n  set(install_override OFF)\nendif (NOT DEFINED CMAKE_INSTALL_PREFIX)\n\n# Allow users to set -m32 in just CFLAGS and have it apply to CXXFLAGS as well.\n# CMake puts such flags in various variables early on and we'd have to go\n# manually add to CMAKE_SHARED_LIBRARY_CXX_FLAGS or something to fix later.\nif (NOT DEFINED ENV{CXXFLAGS})\n  set(ENV{CXXFLAGS} \"$ENV{CFLAGS}\")\nendif (NOT DEFINED ENV{CXXFLAGS})\n\n# Don't use the default-Debug build type set for the try-compiles\nset(specified_build_type \"${CMAKE_BUILD_TYPE}\")\nproject(DynamoRIO NONE)\nif (DEFINED GENERATE_PDBS AND NOT GENERATE_PDBS)\n  # i#310: support building over cygwin ssh where we cannot build pdbs.\n  # To prevent cmake's try-compile for its working compiler test and\n  # its ABI determination test we request a Release build config\n  # via a custom Plaform/Windows-cl.cmake in our make/ dir.\n  set(CMAKE_MODULE_PATH \"${PROJECT_SOURCE_DIR}/make\")\nendif ()\n# We have some Find*.cmake modules of our own\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${PROJECT_SOURCE_DIR}/make/modules\")\nenable_language(C)\nenable_language(CXX)\nif (\"${CMAKE_GENERATOR}\" MATCHES \"Ninja\")\n  # i#1040: Ninja sets the type to Debug if it's not in the cache\n  set(CMAKE_BUILD_TYPE \"${specified_build_type}\" CACHE STRING\n    \"Choose the type of build: Debug or Release\" FORCE)\nelse ()\n  set(CMAKE_BUILD_TYPE \"${specified_build_type}\")\nendif ()\n\ninclude(CheckCCompilerFlag)\ninclude(CheckCXXCompilerFlag)\ninclude(CheckIncludeFile)\n\n###########################################################################\n# utility functions\n\ninclude(make/utils.cmake)\n\nif (UNIX)\n  set(LIB_PFX \"lib\")\n  if (APPLE)\n    set(LIB_EXT \".dylib\")\n  else ()\n    set(LIB_EXT \".so\")\n  endif ()\nelse (UNIX)\n  set(LIB_PFX \"\")\n  set(LIB_EXT \".dll\")\nendif (UNIX)\n\n###########################################################################\n# configuration options\n\n# many are core-specific\n\n# whether this build of DynamoRIO is meant for distribution, in which case\n# glibc should not have any too-recent imports. See core/CMake_readelf.cmake\n# for more information. This is off by default, but gets set by\n# make/package.cmake.\noption(BUILD_PACKAGE \"build DynamoRIO for packaging purposes by performing glibc checks\" OFF)\n\n# configurations that also have defines\noption(DRSTATS_DEMO \"build DRstats without the no-longer-supported Run, etc. controls\" ON)\n\n# we honor CMAKE_BUILD_TYPE since many cmake users are used to it\nif (\"${CMAKE_BUILD_TYPE}\" MATCHES \"Debug\")\n  set(DEBUG_DEFAULT ON)\nelse ()\n  set(DEBUG_DEFAULT OFF)\nendif ()\nset(DEBUG_DESCR \"Build with asserts and logging enabled (also controlled by CMAKE_BUILD_TYPE=Debug)\")\noption(DEBUG ${DEBUG_DESCR} ${DEBUG_DEFAULT})\n# support later changes\nif (\"${CMAKE_BUILD_TYPE}\" MATCHES \"Debug\")\n  set(DEBUG ON CACHE BOOL ${DEBUG_DESCR} FORCE)\nelseif (NOT \"${CMAKE_BUILD_TYPE}\" STREQUAL \"\")\n  set(DEBUG OFF CACHE BOOL ${DEBUG_DESCR} FORCE)\nendif ()\n\n# INTERNAL option now matches DEBUG\nif (DEBUG)\n  set(INTERNAL_DEFAULT ON)\nelse (DEBUG)\n  set(INTERNAL_DEFAULT OFF)\nendif (DEBUG)\nset(INTERNAL \"\" CACHE STRING \"for developer use: ON or OFF overrides default\")\nif (\"${INTERNAL}\" STREQUAL \"\")\n  set(INTERNAL ${INTERNAL_DEFAULT})\nendif()\n\n# The target OS:\nif (APPLE)\n  set(MACOS 1)\n  # Ensure our binaries can run on older OSX but only as far back as is\n  # officially supported by Apple.\n  set(OLDEST_OSX_SUPPPORTED \"11.7\")\nelseif (UNIX)\n  set(LINUX 1)\nendif (APPLE)\nif (WIN32)\n  set(WINDOWS 1)\nendif (WIN32)\n\n# Assuming we cross compile on a Linux system and UNIX is set by CMake.\n# ANDROID is not mutually exclusive with LINUX or UNIX.\nif (CMAKE_SYSTEM_NAME MATCHES \"^Android\")\n  set(ANDROID 1)\n  # We prefix new options with DR_ to make it easier for containing projects including\n  # DR to avoid name conflicts and to separate options.\n  set(DR_DEVICE_BASEDIR \"/data/local/tmp\" CACHE STRING \"base dir for Android binaries\")\n  option(DR_COPY_TO_DEVICE \"copy cross-compiled binaries to DR_DEVICE_BASEDIR\" OFF)\n  if (DR_COPY_TO_DEVICE)\n    find_program(ADB adb DOC \"adb Android utility\")\n    if (NOT ADB)\n      message(FATAL_ERROR \"Unable to find adb for DR_COPY_TO_DEVICE\")\n    else ()\n      execute_process(COMMAND ${ADB} get-state\n        RESULT_VARIABLE adb_result\n        ERROR_VARIABLE adb_err\n        OUTPUT_VARIABLE adb_out OUTPUT_STRIP_TRAILING_WHITESPACE)\n      if (adb_result OR NOT adb_out STREQUAL \"device\")\n        message(FATAL_ERROR \"Android device not connected for DR_COPY_TO_DEVICE\")\n      endif ()\n    endif ()\n  endif ()\nendif ()\n\n# The target architecture.\n# For cross-compilation this should still work as you're supposed to set this var.\n# X64 mean 64-bit generically, whether AMD64 or AARCH64.\nset(TARGET_ARCH \"${CMAKE_SYSTEM_PROCESSOR}\" CACHE STRING \"Target architecture\")\nif (TARGET_ARCH MATCHES \"^arm64\" OR TARGET_ARCH MATCHES \"^aarch64\")\n  set(AARCH64 1)\n  set(X64 1)\n  message(STATUS \"Building for AArch64\")\n  if (ANDROID)\n    set(ANDROID64 1)\n  endif ()\nelseif (TARGET_ARCH MATCHES \"^arm\")\n  set(ARM 1) # This means AArch32.\n  set(X64 OFF)\n  message(STATUS \"Building for ARM\")\n  if (ANDROID)\n    set(ANDROID32 1)\n  endif ()\nelseif (TARGET_ARCH MATCHES \"^riscv64\")\n  set(RISCV64 1)\n  set(X64 1)\n  message(STATUS \"Building for riscv64\")\nelse ()\n  set(X86 1) # This means IA-32 or AMD64\n  message(STATUS \"Building for x86\")\n  # Whether 64-bit is expected to be selected by user setting up compiler\n  # prior to invoking CMake: it has to be that way for Windows, and for\n  # Linux the user should set CFLAGS to -m32 or -m64\n  # to override gcc's default.  To simplify matters we only look at\n  # CMAKE_C_SIZEOF_DATA_PTR, controlled by CFLAGS, so the user doesn't\n  # have to also set CXXFLAGS (CMAKE_SIZEOF_VOID_P happens\n  # to come from CXXFLAGS).  (CMAKE_C_SIZEOF_DATA_PTR can be relied on\n  # to be set in all CMake versions we support.)\n  # For target!=host, we still need the host compiler to match the target,\n  # so we do not support differing bitwidths.\n  if (CMAKE_C_SIZEOF_DATA_PTR EQUAL 8)\n    set(X64 ON)\n  else ()\n    set(X64 OFF)\n  endif ()\nendif ()\n\nif (X86)\n  set(ARCH_NAME x86)\nelseif (ARM)\n  set(ARCH_NAME arm)\nelseif (AARCH64)\n  set(ARCH_NAME aarch64)\nelseif (RISCV64)\n  set(ARCH_NAME riscv64)\nelse ()\n  message(FATAL_ERROR \"Unknown architecture target\")\nendif ()\n\nif (ARM OR AARCH64)\n  set(AARCHXX 1)\n  set(ARCH_NAME_SHARED aarchxx)\nelse ()\n  set(ARCH_NAME_SHARED ${ARCH_NAME})\nendif ()\n\n# The execution architecture, which might differ from the target for building\n# an AArch64 decoder to execute on x86 machines (i#1684).\nif (CMAKE_SYSTEM_PROCESSOR MATCHES \"^aarch64\" OR CMAKE_SYSTEM_PROCESSOR MATCHES \"^arm64\")\n  set(DR_HOST_AARCH64 1)\n  set(DR_HOST_ARCH_NAME \"aarch64\")\n  set(DR_HOST_AARCHXX 1)\n  set(DR_HOST_ARCH_NAME_SHARED aarchxx)\n  set(DR_HOST_X64 1)\nelseif (CMAKE_SYSTEM_PROCESSOR MATCHES \"^arm\")\n  set(DR_HOST_ARM 1)\n  set(DR_HOST_ARCH_NAME \"arm\")\n  set(DR_HOST_AARCHXX 1)\n  set(DR_HOST_ARCH_NAME_SHARED aarchxx)\nelseif (CMAKE_SYSTEM_PROCESSOR MATCHES \"^riscv64\")\n  set(DR_HOST_RISCV64 1)\n  set(DR_HOST_ARCH_NAME \"riscv64\")\n  set(DR_HOST_ARCH_NAME_SHARED ${DR_HOST_ARCH_NAME})\n  set(DR_HOST_X64 1)\nelseif (CMAKE_C_SIZEOF_DATA_PTR EQUAL 8)\n  set(DR_HOST_X86 1)\n  set(DR_HOST_ARCH_NAME \"x86\")\n  set(DR_HOST_ARCH_NAME_SHARED ${DR_HOST_ARCH_NAME})\n  set(DR_HOST_X64 1)\nelse ()\n  set(DR_HOST_X86 1)\n  set(DR_HOST_ARCH_NAME \"x86\")\n  set(DR_HOST_ARCH_NAME_SHARED ${DR_HOST_ARCH_NAME})\nendif ()\nif (NOT \"${TARGET_ARCH}\" STREQUAL \"${CMAKE_SYSTEM_PROCESSOR}\")\n  set(DR_HOST_NOT_TARGET 1)\n  if (WIN32)\n    # TODO i#1684: Fix Windows compiler warnings for AArch64 on x86.\n    message(FATAL_ERROR \"Host != target is not yet supported on Windows\")\n  endif ()\n  if ((DR_HOST_X64 AND NOT X64) OR (NOT DR_HOST_X64 AND X64))\n    # XXX i#1345: We need to resolve the hardcoded ELF bitwidth types.\n    # We likely also have general C type issues if the host is 32-bit.\n    message(FATAL_ERROR \"Different-bitwidth host-vs-target not supported: i#1345.\")\n  endif ()\n  if (ARM)\n    # TODO i#1684: We don't have full support for targeting arm in i386 yet.\n    message(FATAL_ERROR \"Targeting ARM on i386 is not yet supported: i#1684.\")\n  endif ()\n  if (RISCV64)\n    # TODO #1684: We don't have full support for targeting RISC-V in i386 yet.\n    message(FATAL_ERROR \"Targeting riscv64 on i386 is not yet supported.\")\n  endif ()\nendif ()\n\nget_processor_vendor(CPU_VENDOR)\nif (\"${CPU_VENDOR}\" STREQUAL \"GenuineIntel\")\n  set(CPU_INTEL ON)\nelseif (\"${CPU_VENDOR}\" STREQUAL \"AuthenticAMD\")\n  set(CPU_AMD ON)\nendif ()\n\n# Support for running cross-compiled tests under emulation.\nif (CMAKE_CROSSCOMPILING AND DEFINED CMAKE_FIND_ROOT_PATH)\n  find_program(QEMU_BINARY qemu-${CMAKE_SYSTEM_PROCESSOR} DOC \"QEMU emulation tool\")\n  if (NOT QEMU_BINARY)\n    message(STATUS \"Did not find qemu-${CMAKE_SYSTEM_PROCESSOR}: tests will not run\")\n  else ()\n    message(STATUS \"Found qemu-${CMAKE_SYSTEM_PROCESSOR} for tests under emulation\")\n  endif ()\nendif ()\n\noption(VMKERNEL \"target VMkernel (not officially supported yet)\")\n\n# We no longer support building without a client interface: it is always enabled.\n\n# TODO i#4819: Remove {DR_}APP_EXPORTS and replace with a runtime option.\n# We'll still need something to swap DR_APP_API from import to export and\n# set that for static DR, but the rest of the defines can go.\nset(APP_EXPORTS 1)\n\n# TODO: Consider removing these no-longer-maintained options:\n# - VMKERNEL\n# - PROGRAM_SHEPHERDING\n# - PROCESS_CONTROL\n# - GBOP\n\n# TODO: Revive HOT_PATCHING_INTERFACE and combine with PROBE.\noption(PROBE \"enable not-yet-supported Probe API\")\nmark_as_advanced(PROBE)\nif (PROBE)\n  set(HOT_PATCHING_INTERFACE 1)\nendif (PROBE)\n\noption(TEST_SUITE \"we are running a series of builds for official purposes\")\n\n# For developers\n# CMake note: never set option vars as it prevents override by cache var:\n# instead set default value in separate var and use that to initialize option.\n# For a dependent option, use a string var and only set it if the string is \"\"\n# (xref i#170 and see below).\nif (INTERNAL OR DEBUG)\n  set(KSTATS_DEFAULT ON)\nelse (INTERNAL OR DEBUG)\n  set(KSTATS_DEFAULT 0FF)\nendif (INTERNAL OR DEBUG)\n\n# no KSTATS for caller profiling: we want to be as close to release\n# build as we can, but w/o optimizations\nif (CALLPROF)\n  set(KSTATS_DEFAULT 0FF)\nendif (CALLPROF)\n\nset(KSTATS \"\" CACHE STRING \"internal kstat profiling: ON or OFF overrides default\")\n# FIXME i#170: once CMake 2.8 is released we can detect whether 2.8 is\n# in use, and if so use a value-enum to get drop-down of possible values, like so:\n#   set_property(CACHE KSTATS PROPERTY STRINGS \"\" \"ON\" \"OFF\")\nif (\"${KSTATS}\" STREQUAL \"\")\n    set(KSTATS ${KSTATS_DEFAULT})\nendif()\n\noption(CALLPROF \"internal caller profiling support\")\noption(PROFILE \"profiling build: disables FPO and tweaks other flags\" OFF)\n\nif (UNIX)\n  option(RECORD_MEMQUERY \"generate test cases for memquery_library_bounds_by_iterator\")\nendif ()\n\nif (X86)\n  set(ANNOTATIONS_DEFAULT ON)\nelse ()\n  # TODO i#1672: Add annotation support to AArchXX.\n  set(ANNOTATIONS_DEFAULT OFF)\nendif ()\n# TODO i#4819: Remove the define and replace with a runtime option.\noption(ANNOTATIONS \"annotations\" ${ANNOTATIONS_DEFAULT})\n\nif (WIN32)\n  # xref PR 192750 - runregression uses this to avoid over-ssh pdb issues\n  option(GENERATE_PDBS \"generate Windows debug information\" ON)\n  # instead of config files use registry like in the old days\n  # (i#85/PR 212034 and i#265/PR 486139 switched DR to config files)\n  option(PARAMS_IN_REGISTRY \"parameters from registry instead of config files\")\nendif (WIN32)\n\n# for users\noption(DISABLE_WARNINGS \"disable warnings\")\n\noption(SET_PREFERRED_BASE \"set a preferred library base address\")\nif (WIN32 AND DEBUG)\n  # apparently no numeric type so we use STRING\n  set(preferred_base \"0x15000000\" CACHE STRING \"Preferred library base address\")\nelseif (APPLE AND X64)\n  # Set to higher than _PAGEZERO which is [0..0x1'00000000).\n  set(preferred_base \"0x171000000\" CACHE STRING \"Preferred library base address\")\nelse ()\n  set(preferred_base \"0x71000000\" CACHE STRING \"Preferred library base address\")\nendif ()\n\n# for x64: PR 253624: we need our library to be next to our heap\n# for win32: not PIC so need a base\n# we studied existing exe + dll bases and tried to pick non-conflicting addresses\n# for 32-bit Linux: we put dynamorio at top of address space so little chance\n# of conflict with app for early injection.\n# there should be no noticeable perf hit from this (b/c no relocations for DR lib)\n# so it's ok to be on for non-early injection\nset(SET_PREFERRED_BASE 1)\n\nif (VMKERNEL)\n  # we end up with the default executable base (0x08*) so go back to 0 base\n  # (else we fail to load on esx)\n  set(SET_PREFERRED_BASE 1)\n  set(preferred_base \"0x00000000\")\nendif (VMKERNEL)\n\n# we do not support most users choosing these\nmark_as_advanced(\n  PROGRAM_SHEPHERDING\n  PROCESS_CONTROL\n  GBOP\n  VMKERNEL\n  KSTATS\n  CALLPROF\n  PROFILE\n  SET_PREFERRED_BASE\n  preferred_base\n  GENERATE_PDBS\n  DRSTATS_DEMO\n  )\n\n# we clear both base and build-type cflags and then use just base.\n# XXX: could use CMAKE_USER_MAKE_RULES_OVERRIDE to set these but not any cleaner\n#\n# i#919: Ninja generator does not leave CMAKE_BUILD_TYPE blank, and that affects\n# the exported target files, so we set it here.  This shouldn't hurt containing\n# tools as they should set our DEBUG to match the incoming CMAKE_BUILD_TYPE.\nif (\"${CMAKE_BUILD_TYPE}\" STREQUAL \"\")\n  if (DEBUG)\n    set(CMAKE_BUILD_TYPE \"Debug\")\n  else (DEBUG)\n    set(CMAKE_BUILD_TYPE \"RelWithDebInfo\")\n  endif (DEBUG)\nendif ()\nstring(TOUPPER \"${CMAKE_BUILD_TYPE}\" CMAKE_BUILD_TYPE_UPPER)\nforeach (config ${CMAKE_BUILD_TYPE} ${CMAKE_CONFIGURATION_TYPES})\n  string(TOUPPER \"${config}\" config_upper)\n  foreach (var\n      CMAKE_C_FLAGS_${config_upper};\n      CMAKE_CXX_FLAGS_${config_upper};\n      CMAKE_EXE_LINKER_FLAGS_${config_upper};\n      CMAKE_MODULE_LINKER_FLAGS_${config_upper};\n      CMAKE_SHARED_LINKER_FLAGS_${config_upper})\n    set(${var} \" \") # if \"\" defaults come back\n  endforeach ()\nendforeach ()\nforeach (var CMAKE_C_FLAGS;CMAKE_CXX_FLAGS)\n  set(${var} \" \") # if \"\" defaults come back\nendforeach ()\n\nif (APPLE)\n  # Enable @rpath for all shared library install names.\n  set(CMAKE_MACOSX_RPATH 1)\nendif ()\n\n##################################################\n# resources when packaging\n\n# We use a monotonically increasing integer that's larger than any bugfix\n# release version as the patchlevel ver# to distinguish\n# mid-release builds.\n# We used to use the svn revision (i#83) and we leave that code in place\n# (for now at least) for anyone building an old checkout.\n# For git, we follow i#1565 and use a date.\nset(VERSION_NUMBER_PATCHLEVEL 0)\n# for now using a hack of running svn or git to get the ver#,\n# rather than having it stored in the sources and auto-updated\nif (EXISTS \"${PROJECT_SOURCE_DIR}/.svn\")\n  find_program(SVN svn DOC \"subversion client\")\n  if (SVN)\n    execute_process(COMMAND ${SVN} info\n      WORKING_DIRECTORY \"${PROJECT_SOURCE_DIR}\"\n      RESULT_VARIABLE svn_result\n      ERROR_VARIABLE svn_err\n      OUTPUT_VARIABLE svn_out)\n    if (svn_result OR svn_err)\n      message(FATAL_ERROR \"*** ${SVN} info failed: ***\\n${svn_result} ${svn_err}\")\n    endif (svn_result OR svn_err)\n    string(REGEX MATCH \"Revision: [0-9]+\" svn_ver \"${svn_out}\")\n    string(REGEX REPLACE \"Revision: \" \"\" svn_ver \"${svn_ver}\")\n    if (\"${svn_ver}\" STREQUAL \"\")\n      # could be another language (xref i#401) so look just for number\n      # which will rule out URL and UUID fields\n      string(REGEX MATCH \": [0-9]+\\r?\\n\" svn_ver \"${svn_out}\")\n      string(REGEX REPLACE \": ([0-9]+)\\r?\\n\" \"\\\\1\" svn_ver \"${svn_ver}\")\n    endif (\"${svn_ver}\" STREQUAL \"\")\n    if (\"${svn_ver}\" STREQUAL \"\")\n      # indicate we failed w/ impossible ver#\n      message(STATUS \"WARNING: Unable to obtain actual revision number\")\n      set(VERSION_NUMBER_PATCHLEVEL \"42\")\n    else (\"${svn_ver}\" STREQUAL \"\")\n      set(VERSION_NUMBER_PATCHLEVEL \"${svn_ver}\")\n    endif (\"${svn_ver}\" STREQUAL \"\")\n  endif (SVN)\nelse (EXISTS \"${PROJECT_SOURCE_DIR}/.svn\")\n  if (EXISTS \"${PROJECT_SOURCE_DIR}/.git\")\n    find_program(GIT git DOC \"git client\")\n    if (GIT)\n      # We want the committer date (not author date) (xref i#1565).  We request UNIX\n      # timestamp format and then divide down to days to get a small enough number\n      # for the Windows resource limits.\n      execute_process(COMMAND ${GIT} log -n 1 --format=%ct\n        WORKING_DIRECTORY \"${PROJECT_SOURCE_DIR}\"\n        RESULT_VARIABLE git_result\n        ERROR_VARIABLE git_err\n        OUTPUT_VARIABLE git_out)\n      if (git_result OR git_err)\n        message(\"*** ${GIT} log failed: ***\\n${git_err}\")\n      else (git_result OR git_err)\n        math(EXPR daycount \"${git_out} / (60*60*24)\")\n      endif (git_result OR git_err)\n    endif (GIT)\n    if (NOT daycount)\n      # XXX i#1565: to support building when not in a git repo (e.g., from a source\n      # tarball) we use date to get current time for timestamp.\n      # This is not ideal as it confuses the build timestamp with the commit\n      # timestamp.  We should add support for a local file holding the version.\n      find_program(DATE date DOC \"system date\")\n      if (DATE)\n        execute_process(COMMAND ${DATE} +%s\n          RESULT_VARIABLE date_result\n          ERROR_VARIABLE date_err\n          OUTPUT_VARIABLE date_out)\n        if (date_result OR date_err)\n          message(\"*** ${DATE} failed: ***\\n${date_err}\")\n        else (date_result OR date_err)\n          math(EXPR daycount \"${date_out} / (60*60*24)\")\n        endif (date_result OR date_err)\n      endif (DATE)\n    endif (NOT daycount)\n    if (NOT daycount)\n      # set a much further date in the future to avoid confusing\n      # this fake date with the real date from git log\n      set(daycount 33333)\n    endif (NOT daycount)\n    set(VERSION_NUMBER_PATCHLEVEL \"${daycount}\")\n  endif (EXISTS \"${PROJECT_SOURCE_DIR}/.git\")\nendif (EXISTS \"${PROJECT_SOURCE_DIR}/.svn\")\n\n# N.B.: When updating this, update all the default versions in ci-package.yml\n# and ci-docs.yml.  We should find a way to share (xref i#1565).\nset(VERSION_NUMBER_DEFAULT \"11.3.${VERSION_NUMBER_PATCHLEVEL}\")\n# do not store the default VERSION_NUMBER in the cache to prevent a stale one\n# from preventing future version updates in a pre-existing build dir\nset(VERSION_NUMBER \"\" CACHE STRING \"Version number: leave empty for default\")\nif (\"${VERSION_NUMBER}\" STREQUAL \"\")\n  set(VERSION_NUMBER ${VERSION_NUMBER_DEFAULT})\nendif()\nstring(REGEX REPLACE \"\\\\.\" \",\" VERSION_COMMA_DELIMITED \"${VERSION_NUMBER}\")\nmessage(STATUS \"Version number: ${VERSION_NUMBER}\")\n\nset(BUILD_NUMBER \"0\" CACHE STRING \"Build number (must be <64K)\")\nset(UNIQUE_BUILD_NUMBER \"0\" CACHE STRING \"Unique build number\")\nset(CUSTOM_PRODUCT_NAME \"\" CACHE STRING \"Custom product name\")\nset(PACKAGE_PLATFORM \"\" CACHE STRING \"Platform for package name (should have trailing -)\")\nset(PACKAGE_SUBSYS \"\" CACHE STRING\n  \"Platform for sub-system name (should have leading -: e.g., -EABIHF\")\nmark_as_advanced(\n  VERSION_NUMBER\n  VERSION_COMMA_DELIMITED\n  BUILD_NUMBER\n  UNIQUE_BUILD_NUMBER\n  CUSTOM_PRODUCT_NAME\n  PACKAGE_PLATFORM\n  PACKAGE_SUBSYS\n  )\n# This is hardcoded in globals_shared.h: going to leave it that way, but\n# adding indirection within cmake files\nset(PRODUCT_NAME \"DynamoRIO\")\n\nif (install_override)\n  set(CMAKE_INSTALL_PREFIX \"${PROJECT_SOURCE_DIR}/exports\"\n    CACHE PATH \"install path\" FORCE)\nendif (install_override)\n# for historical reasons we have a separate mirror var\nset(INSTALL_PREFIX \"${CMAKE_INSTALL_PREFIX}\")\n\n###########################################################################\n# toolchain\n\n# Figure out avx flags before asm setup, which requires it.\nset(proc_supports_avx OFF)\nset(proc_supports_avx2 OFF)\nset(proc_supports_avx512 OFF)\nif (X86 AND UNIX)\n  set(CFLAGS_AVX \"-mavx\")\n  # BMI2 instructions are typically also supported on AVX2 processors.\n  set(CFLAGS_AVX2 \"-mavx2 -mbmi2\")\n  set(CFLAGS_AVX512 \"-mavx512f\")\n  check_avx_processor_and_compiler_support(proc_supports_avx)\n  check_avx2_processor_and_compiler_support(proc_supports_avx2)\n  check_avx512_processor_and_compiler_support(proc_supports_avx512)\nendif ()\n\nset(proc_supports_sve OFF)\nset(proc_supports_sve2 OFF)\nset(proc_supports_pauth OFF)\nif (AARCH64 AND UNIX)\n  set(CFLAGS_SVE \"-march=armv8-a+sve\")\n  set(CFLAGS_SVE2 \"-march=armv8-a+sve2\")\n  set(CFLAGS_PAUTH \"-march=armv8.3-a -mbranch-protection=standard\")\n  set(ASMFLAGS_SVE \"-march=armv8-a+sve\")\n  set(ASMFLAGS_SVE2 \"-march=armv8-a+sve2\")\n  check_sve_processor_and_compiler_support(proc_supports_sve proc_sve_vl)\n  check_sve2_processor_and_compiler_support(proc_supports_sve2)\n  check_pauth_processor_and_compiler_support(proc_supports_pauth)\nendif ()\n\n# Ensure that _AMD64_ or _X86_ are defined on Microsoft Windows, as otherwise\n# um/winnt.h provided since Windows 10.0.22000 will error.\nif (NOT UNIX)\n  if (X64)\n    add_definitions(-D_AMD64_)\n  else (X64)\n    add_definitions(-D_X86_)\n  endif (X64)\nendif (NOT UNIX)\nif (UNIX)\n  # Ensure we can export dr_stat_syscall() from drlibc and get everyone to agree\n  # that struct stat64 is the stat struct.\n  add_definitions(-D_LARGEFILE64_SOURCE)\nendif ()\n\n# Set up assembly support and CMAKE_CPP.\n# Note that in cmake < 2.6.4, I had to fix a bug in\n# /usr/share/cmake/Modules/CMakeASMInformation.cmake\n# where @VAR@ expansion was used, which only works for configure_file()\n#   now fixed in CMake/Modules/CMakeASMInformation.cmake:1.5\n# See top of top-level CMakeLists.txt for our workaround.\nif (NOT UNIX)\n  get_filename_component(cl_path ${CMAKE_C_COMPILER} PATH)\nendif (NOT UNIX)\n\nset(cpp2asm_newline_script_path \"${PROJECT_SOURCE_DIR}/make/CMake_asm.cmake\")\ninclude(make/cpp2asm_support.cmake)\nif (UNIX)\n  # We require gas >= 2.18.50 for --32, --64, and the new -msyntax=intel, etc.\n  if (NOT CMAKE_ASM_SUPPORTS_INTEL_SYNTAX)\n    message(FATAL_ERROR\n      \"${CMAKE_ASM_COMPILER} is too old and does not support -msyntax=intel\")\n  endif (NOT CMAKE_ASM_SUPPORTS_INTEL_SYNTAX)\nendif (UNIX)\n\nif (UNIX)\n  identify_clang(CMAKE_COMPILER_IS_CLANG)\n  if (CMAKE_COMPILER_IS_CLANG)\n    set(CLANG 1)\n  endif (CMAKE_COMPILER_IS_CLANG)\n\n  if (CYGWIN)\n    message(FATAL_ERROR \"building using gcc within cygwin is not supported\")\n  endif (CYGWIN)\n  if (NOT CMAKE_COMPILER_IS_GNUCC)\n    # we use gcc extensions\n    message(FATAL_ERROR \"gcc is required to build\")\n  endif (NOT CMAKE_COMPILER_IS_GNUCC)\n\n  check_if_linker_is_gnu_gold(LINKER_IS_GNU_GOLD)\n  check_if_linker_is_llvm_lld(LINKER_IS_LLVM_LLD)\n\n  # FIXME i#2949: static 32-bit release-build linking with gcc 7.3.1 fails when\n  # static C++ clients like drmemtrace or drmemtrace_raw2trace are linked in.\n  # For now we disable those builds.\n  if (UNIX AND NOT X64 AND NOT DEBUG AND NOT CLANG AND\n      \"${CMAKE_C_COMPILER_VERSION}\" VERSION_GREATER \"7.3\")\n    message(STATUS \"gcc 7.3+ non-debug 32-bit detected: disabling static C++ client \"\n      \"tests to work around i#2949\")\n    set(DISABLE_FOR_BUG_2949 ON)\n  else ()\n    set(DISABLE_FOR_BUG_2949 OFF)\n  endif ()\n\nelse (UNIX)\n\n  if (NOT ${COMPILER_BASE_NAME} STREQUAL \"cl\")\n    # we use cl pragmas and intrinsics\n    message(FATAL_ERROR \"cl (Microsoft C++ compiler) is required to build\")\n  endif (NOT ${COMPILER_BASE_NAME} STREQUAL \"cl\")\n\n  # cmake has CMAKE_RC_COMPILER, but no message compiler\n  if (\"${CMAKE_GENERATOR}\" MATCHES \"Visual Studio\")\n    # First checks for the Windows SDK through Windows Kits.\n    get_filename_component(kits_dir \"[HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows Kits\\\\Installed Roots;KitsRoot10]\" REALPATH)\n\n    if (EXISTS ${kits_dir})\n      if (X64)\n        set(sdk_bindir \"${kits_dir}/bin/${CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION}/x64\")\n      else (X64)\n        set(sdk_bindir \"${kits_dir}/bin/${CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION}/x86\")\n      endif (X64)\n    else (EXISTS ${kits_dir})\n      # this path is only present for 2008+, but we currently require PATH to\n      # be set up anyway\n      get_filename_component(sdk_dir \"[HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Microsoft SDKs\\\\Windows;CurrentInstallFolder]\" REALPATH)\n      if (X64)\n        set(sdk_bindir \"${sdk_dir}/bin/x64\")\n      else (X64)\n        set(sdk_bindir \"${sdk_dir}/bin\")\n      endif (X64)\n    endif (EXISTS ${kits_dir})\n  endif ()\n  if (NOT (\"${CMAKE_GENERATOR}\" MATCHES \"MSYS Makefiles\"))\n    # For MinGW (MSYS Makefiles) we do not have a message compiler.\n    # We build without it (which means we can't use the Windows event log).\n    find_program(CMAKE_MC_COMPILER mc.exe HINTS \"${sdk_bindir}\"\n      DOC \"path to message compiler\")\n    if (NOT CMAKE_MC_COMPILER)\n      message(FATAL_ERROR \"message compiler not found: required to build\")\n    endif (NOT CMAKE_MC_COMPILER)\n    message(STATUS \"Found message compiler: ${CMAKE_MC_COMPILER}\")\n    mark_as_advanced(CMAKE_MC_COMPILER)\n  endif ()\nendif (UNIX)\n\nfind_package(Perl)\nif (NOT PERL_FOUND)\n  message(FATAL_ERROR \"perl is required to build\")\nendif (NOT PERL_FOUND)\n\nif (UNIX) # unlikely to be an issue on Windows\n  # Check for uint, etc. typedef conflicts like on rhel3 (i#18)\n  # and set DR_DO_NOT_DEFINE_*\n  # Note that for later gcc uint and ushort seem to be \"soft typedefs\":\n  # defined, but overridable: ?!?\n  include(CheckTypeSize)\n  CHECK_TYPE_SIZE(uint DR_DO_NOT_DEFINE_uint)\n  CHECK_TYPE_SIZE(ushort DR_DO_NOT_DEFINE_ushort)\n  CHECK_TYPE_SIZE(bool DR_DO_NOT_DEFINE_bool)\n  CHECK_TYPE_SIZE(byte DR_DO_NOT_DEFINE_byte)\n  CHECK_TYPE_SIZE(sbyte DR_DO_NOT_DEFINE_sbyte)\n  CHECK_TYPE_SIZE(uint32 DR_DO_NOT_DEFINE_uint32)\n  CHECK_TYPE_SIZE(uint64 DR_DO_NOT_DEFINE_uint64)\n  CHECK_TYPE_SIZE(int32 DR_DO_NOT_DEFINE_int32)\n  CHECK_TYPE_SIZE(int64 DR_DO_NOT_DEFINE_int64)\n  # we could do CHECK_SYMBOL_EXISTS for MAX and MIN but they're not\n  # in standard headers so up to user to define if an issue\n  if (DR_DO_NOT_DEFINE_bool)\n    # i#488: ensure bool compatibility with C++\n    if (NOT ${DR_DO_NOT_DEFINE_bool} EQUAL 1)\n      message(FATAL_ERROR \"incompatible pre-defined \\\"bool\\\" type is larger than 1 byte\")\n    endif (NOT ${DR_DO_NOT_DEFINE_bool} EQUAL 1)\n  endif (DR_DO_NOT_DEFINE_bool)\n  CHECK_TYPE_SIZE(_Bool DR__Bool_EXISTS)\n  if (DR__Bool_EXISTS)\n    if (NOT ${DR__Bool_EXISTS} EQUAL 1)\n      message(FATAL_ERROR \"incompatible \\\"_Bool\\\" type is larger than 1 byte\")\n    endif (NOT ${DR__Bool_EXISTS} EQUAL 1)\n  endif (DR__Bool_EXISTS)\nendif (UNIX)\n\n###########################################################################\n# basic build rules and flags\n\n# i#1781: cmake 2.8.12+ fails to create static lib pdb by default\nmacro(add_static_lib_debug_info target dest_dir)\n  if (WIN32)\n    if (\"${CMAKE_VERSION}\" VERSION_EQUAL \"3.1\" OR\n        \"${CMAKE_VERSION}\" VERSION_GREATER \"3.1\")\n      append_property_string(TARGET ${target}\n        COMPILE_PDB_NAME${location_suffix} \"${target}\"\n        COMPILE_PDB_OUTPUT_DIRECTORY{location_suffix} \"${dest_dir}\")\n    else ()\n      # We just don't support it for < 3.1\n    endif ()\n  endif ()\nendmacro()\n\n# compiler flags\n# BASE_CFLAGS applies to both C and C++.\n# BASE_CONLY_FLAGS applies to just C.\n# BASE_CXXONLY_FLAGS applies to just C++.\nset(BASE_CFLAGS \"\")\nset(BASE_CONLY_FLAGS \"\")\nset(BASE_CXXONLY_FLAGS \"\")\nCHECK_CXX_COMPILER_FLAG(\"-std=c++17\" cxx17_available)\nif (UNIX)\n  set(BASE_CXXONLY_FLAGS \"${BASE_CXXONLY_FLAGS} -std=c++11\")\n  # -std=c99 doesn't quite work\n  # FIXME case 191480: we used to pass -pedantic just to cpp;\n  # now w/ no separate cpp step we should eliminate the\n  # warnings and pass -pedantic to main gcc\n  set(BASE_CONLY_FLAGS \"${BASE_CONLY_FLAGS} -std=gnu99\")\n  # disable strict aliasing opt in gcc 3.3.3 -- gives warnings and makes bad assumptions\n  set(BASE_CFLAGS \"${BASE_CFLAGS} -fno-strict-aliasing\")\n  # Ensure DR is interoperable with other toolchains: do not assume char is signed\n  # (see i#1034 where this caused problems in the past).\n  set(BASE_CFLAGS \"${BASE_CFLAGS} -funsigned-char\")\n  # Ubuntu defaults to -fstack-protector these days, which depends on app TLS.\n  CHECK_C_COMPILER_FLAG(\"-no-pie\" no_pie_avail)\n  CHECK_C_COMPILER_FLAG(\"-fno-stack-protector\" no_stack_protector_avail)\n  if (no_stack_protector_avail)\n    set(BASE_CFLAGS \"${BASE_CFLAGS} -fno-stack-protector\")\n  endif (no_stack_protector_avail)\n  # Prefer the new 'override' keyword.\n  CHECK_CXX_COMPILER_FLAG(\"-Wsuggest-override\" suggest_override_avail)\n  if (suggest_override_avail)\n    set(BASE_CXXONLY_FLAGS \"${BASE_CXXONLY_FLAGS} -Wsuggest-override\")\n  endif ()\n  # Try to support users setting -m32 in CMAKE_C_FLAGS rather than the\n  # CFLAGS env var.\n  if (X86)\n    if (X64)\n      set(BASE_CFLAGS \"-m64 ${BASE_CFLAGS}\")\n      set(LD_FLAGS \"-melf_x86_64\")\n    else (X64)\n      set(BASE_CFLAGS \"-m32 ${BASE_CFLAGS}\")\n      set(LD_FLAGS \"-melf_i386\")\n    endif (X64)\n  elseif (ARM)\n    # i#1551: add necessary flags for ARM build.\n    if (X64)\n    else (X64)\n      # On newer gcc versions such as 11.2 we need an explicit +fp to denote our\n      # gnueablihf hardware-fp-capabilities target.\n      CHECK_C_COMPILER_FLAG(\"-march=armv7-a+fp\" armv7_fp_available)\n      if (armv7_fp_available)\n        set(BASE_CFLAGS \"-mthumb -march=armv7-a+fp ${BASE_CFLAGS}\")\n      else ()\n        set(BASE_CFLAGS \"-mthumb -march=armv7-a ${BASE_CFLAGS}\")\n      endif ()\n      set(LD_FLAGS \"-marmelf_linux_eabi\")\n      if (ANDROID OR CMAKE_C_LIBRARY_ARCHITECTURE MATCHES \"gnueabi$\")\n        # We use eabihf by default for ARM build.\n        # According to https://developer.android.com/ndk/guides/abis.html#v7a,\n        # we need extra flags to use eabihf for Android build, i.e.,:\n        # TARGET_CFLAGS += -mhard-float -D_NDK_MATH_NO_SOFTFP=1\n        # TARGET_LDFLAGS += -Wl,--no-warn-mismatch -lm_hard\n        # so we use softfp for Android build instead.\n        # We also need to add softfp for the gnueabi target.\n        set(BASE_CFLAGS \"-mfloat-abi=softfp ${BASE_CFLAGS}\")\n      endif ()\n    endif (X64)\n  endif ()\n  if (APPLE AND CMAKE_COMPILER_IS_CLANG)\n    set(BASE_CFLAGS \"${BASE_CFLAGS} -mmacosx-version-min=${OLDEST_OSX_SUPPPORTED}\")\n  endif ()\n  if (APPLE)\n    set(ld_entry_flag \"-e\")\n  else ()\n    set(ld_entry_flag \"--entry\")\n  endif ()\n  # there's no cmake warning control so we hardcode it\n  set(WARN \"-Wall -Werror -Wwrite-strings -Wvla\")\n  CHECK_C_COMPILER_FLAG(\"-Wno-unused-but-set-variable\" nounused_avail)\n  if (nounused_avail)\n    set(WARN \"${WARN} -Wno-unused-but-set-variable\")\n  endif (nounused_avail)\n  if (NOT CMAKE_COMPILER_IS_CLANG)\n    # Old gcc's ignore unknown -W flags, but -Wall -Werror causes clang to\n    # complain that it doesn't recognize it.\n    # Actually this is not true: gcc 4.1.2 aborts on unknown -W so we check\n    # XXX i#3792: DynamoRIO manages '\\0' termination and error states itself in\n    # too many places. In order to activate this warning, this code needs to get\n    # re-factored for no good reason.\n    CHECK_C_COMPILER_FLAG(\"-Wstringop-truncation\" stringop_truncation_avail)\n    if (stringop_truncation_avail)\n      set(WARN \"${WARN} -Wno-stringop-truncation\")\n    endif (stringop_truncation_avail)\n    # XXX i#3792: see comment above.\n    CHECK_C_COMPILER_FLAG(\"-Wformat-truncation\" format_truncation_avail)\n    if (format_truncation_avail)\n      set(WARN \"${WARN} -Wno-format-truncation\")\n    endif (format_truncation_avail)\n    # XXX i#3792: see comment above.\n    CHECK_C_COMPILER_FLAG(\"-Wstringop-overflow\" stringop_overflow_avail)\n    if (stringop_overflow_avail)\n      set(WARN \"${WARN} -Wno-stringop-overflow\")\n    endif (stringop_overflow_avail)\n    CHECK_C_COMPILER_FLAG(\"-Wtype-limits\" HAVE_TYPELIMITS_CONTROL)\n    CHECK_C_COMPILER_FLAG(\"-Wdangling-pointer\" dangling_pointer_avail)\n    if (dangling_pointer_avail)\n      # XXX i#6337: It is difficult to rewrite the TRY macros to avoid this gcc\n      # warning, which is innocuous, so we disable.\n      set(WARN \"${WARN} -Wno-dangling-pointer\")\n    endif ()\n  else (NOT CMAKE_COMPILER_IS_CLANG)\n    # Clang emits this warning when a function is used without a defined\n    # prototype, however clang can't find function prototpes in #define macros.\n    # If function prototypes are moved out of #define macros then this warning\n    # can be re-enabled.\n    CHECK_C_COMPILER_FLAG(\"-Wno-deprecated-non-prototype\" nodeprecated_prototype_avail)\n    if (nodeprecated_prototype_avail)\n      set(WARN \"${WARN} -Wno-deprecated-non-prototype\")\n    endif (nodeprecated_prototype_avail)\n    # Clang emits this warning due to the assembly shared between arm and\n    # aarch64 in os.c not specifying register widths. If the shared code is\n    # split into arm and aarch64 versions, then this warning can be re-enabled.\n    CHECK_C_COMPILER_FLAG(\"-Wno-asm-operand-widths\" noasm_operand_widths)\n    if (noasm_operand_widths)\n      set(WARN \"${WARN} -Wno-asm-operand-widths\")\n    endif (noasm_operand_widths)\n    # clang turns off color when it's writing to a pipe, but the user may still\n    # wish to force color if it eventually goes to a terminal.\n    option(CLANG_COLOR_DIAGNOSTICS \"force colored clang diagnostics\" OFF)\n    set(clang_args \"\")\n    if (CLANG_COLOR_DIAGNOSTICS)\n      set(clang_args \"-fcolor-diagnostics ${clang_args}\")\n    endif (CLANG_COLOR_DIAGNOSTICS)\n    set(BASE_CFLAGS \"${clang_args} ${BASE_CFLAGS}\")\n  endif (NOT CMAKE_COMPILER_IS_CLANG)\n  set(DBG \"-g3\")\n  # gcc doesn't change its optimizations based on -g\n  set(OPT \"-O3 ${DBG}\")\n  if (PROFILE)\n    set(OPT \"${OPT} -fno-omit-frame-pointer\")\n  endif ()\n\n  # Omit unwind tables in optimized mode.\n  if (NOT DEBUG)\n    set(BASE_CONLY_FLAGS \"${BASE_CONLY_FLAGS} -fno-unwind-tables\")\n  endif ()\n\n  if (NOT APPLE AND NOT ANDROID) # no .gnu.hash support on Android\n    # Generate the .hash section in addition to .gnu.hash for every target, to\n    # avoid SIGFPE when running our binaries on old systems:\n    foreach (config ${CMAKE_BUILD_TYPE} ${CMAKE_CONFIGURATION_TYPES})\n      string(TOUPPER \"${config}\" config_upper)\n      foreach (var\n          CMAKE_EXE_LINKER_FLAGS_${config_upper};\n          CMAKE_MODULE_LINKER_FLAGS_${config_upper};\n          CMAKE_SHARED_LINKER_FLAGS_${config_upper})\n        set(${var} \"-Wl,--hash-style=both\")\n      endforeach ()\n    endforeach ()\n  endif ()\n\n  # XXX: core-specific: move to core/CMakeLists.txt?\n  #\n  # XXX: i#374: we used to use -O to avoid stack overflow in debug\n  # build (makes a huge difference by having locals/temps share stack\n  # slots) and had -fno-omit-frame-pointer to keep things more easily\n  # debuggable (though gcc claims only omits when debuggable), but\n  # even then many locals were optimized away, and utils.c's first\n  # statsx.h expansion took over a minute to compile with some\n  # versions of gcc, so removing the -O (can't repro the stack\n  # overflows now anyway).  If we hit the overflows again, we should\n  # use -O0 and optimize attributes on the few funcs that need higher\n  # opt.\n  set(DBG_OPT \"-fno-omit-frame-pointer\")\n  # We disable strcmp intrinsic to avoid stack overflow in\n  # set_dynamo_options(): case 7853.\n  if (NOT CMAKE_COMPILER_IS_CLANG)\n    set(DBG_OPT \"${DBG_OPT} -fno-builtin-strcmp\")\n  endif ()\n  set(LINK_EXTRA_FLAGS \"\")\nelse (UNIX)\n  # FIXME: why isn't ${CMAKE_CL_NOLOGO} set?\n  set(BASE_CFLAGS \"${BASE_CFLAGS} /nologo\")\n  # build in parallel, always.\n  # note that /MP is not officially supported on VS 2005 and others\n  # have seen occasional problems: we'll risk it.  we could check for\n  # \"MSVC10 OR MSVC90\".\n  set(BASE_CFLAGS \"${BASE_CFLAGS} /MP\")\n  # read-only string pooling\n  set(BASE_CFLAGS \"${BASE_CFLAGS} /GF\")\n  if (NOT CMAKE_C_COMPILER_VERSION VERSION_LESS 18.0)\n    # i#1376: VS2013 requires /FS w/ multiple cl.exe in parallel (which Ninja\n    # uses).  While /MP is supposed to enable it, it doesn't seem to.\n    # This is recommended after /Fd but it seems to work here.\n    set(BASE_CFLAGS \"${BASE_CFLAGS} /FS\")\n  endif()\n  # FIXME case 191729: we should try to enable this.\n  # Currently we get \"unresolved external symbol ___security_cookie\"\n  set(BASE_CFLAGS \"${BASE_CFLAGS} /GS-\")\n  # VS2010 has /MD as the default (and does declspec(dllimport) for\n  # libc routines) so make sure we explicitly request /MT\n  if (DEBUG)\n    set(BASE_CFLAGS \"${BASE_CFLAGS} /MTd\")\n  else ()\n    set(BASE_CFLAGS \"${BASE_CFLAGS} /MT\")\n  endif ()\n  set(WARN \"/W4 /WX\")\n  # Default from cmake has /W3 so remove to avoid warning about overriding\n  string(REGEX REPLACE \"/W[0-9]\" \"\" CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n  string(REGEX REPLACE \"/W[0-9]\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n  # Shrink binaries and pdbs (/Gy should already be there)\n  set(LINK_EXTRA_FLAGS \"/opt:ref /opt:icf /pdbcompress\")\n  if (GENERATE_PDBS)\n    set(DBG \"/Zi\")\n    set(LINK_EXTRA_FLAGS \"${LINK_EXTRA_FLAGS} /debug\")\n  else (GENERATE_PDBS)\n    # xref PR 192750 - runregression uses this to avoid over-ssh pdb issues\n    set(DBG \"\")\n    set(LINK_EXTRA_FLAGS \"\")\n    # Default from cmake in DEBUG and RELWITHDEBINFO has /debug\n    string(REGEX REPLACE \"/debug\" \"\" CMAKE_EXE_LINKER_FLAGS\n      \"${CMAKE_EXE_LINKER_FLAGS}\")\n    string(REGEX REPLACE \"/debug\" \"\" CMAKE_MODULE_LINKER_FLAGS\n      \"${CMAKE_MODULE_LINKER_FLAGS}\")\n    string(REGEX REPLACE \"/debug\" \"\" CMAKE_SHARED_LINKER_FLAGS\n      \"${CMAKE_SHARED_LINKER_FLAGS}\")\n  endif (GENERATE_PDBS)\n\n  # i#1424: target the oldest possible platform we can\n  if (X64)\n    set(os_target \"5.02\") # Win2003x64/WinXPx64\n  else (X64)\n    if (CMAKE_C_COMPILER_VERSION VERSION_LESS 17.0) # up to and including VS2010\n      set(os_target \"5.00\") # Win2K\n    else () # VS2012, VS2013\n      set(os_target \"5.01\") # WinXP\n    endif ()\n  endif (X64)\n  foreach (lflags CMAKE_EXE_LINKER_FLAGS\n      CMAKE_MODULE_LINKER_FLAGS\n      CMAKE_SHARED_LINKER_FLAGS)\n    set(${lflags} \"${${lflags}} /subsystem:console,${os_target}\")\n  endforeach()\n  message(STATUS \"Targeting subsystem ${os_target}\")\n\n  # w/ cl, using DBG here won't mess up the optimizations, debug line number info\n  # gets a little messed up, but is better than nothing\n  set(OPT \"/O2 ${DBG}\")\n  # do not use /O2 on windows, it messes up debug info!\n  # explicitly request /Od even though it's cl's default b/c VS has /O2 as default\n  # and cl 14.00 hangs compiling core/fragment.c with /Od and DEBUG.\n  set(DBG_OPT \"/Od\")\n  if (NOT \"${CMAKE_GENERATOR}\" MATCHES \"Visual Studio\")\n    # i#1821: cmake 3.3.1 (but not 2.8.12) somehow messes up this /nologo flag.\n    # We just avoid it for VS generators as a workaround.\n    if (CMAKE_RC_FLAGS)\n      set(CMAKE_RC_FLAGS \"${CMAKE_RC_FLAGS} /nologo\")\n    else ()\n      set(CMAKE_RC_FLAGS \"/nologo\")\n    endif ()\n  endif ()\nendif (UNIX)\n\nif (UNIX)\n  # Check for -fvisibility\n  # PR 262458: for gcc >= 3.4 we can use -fvisibility instead of a\n  # linker version script.  Note that we're still using a linker\n  # script to set our preferred base (PR 253624) and will need to\n  # for section ordering as well (PR 208267) but those are separate\n  # scripts.\n  # Only export functions so marked via attributes\n  # (For older gcc we use an ugly linker script and an auto-generated export list)\n  # Using \"internal\" instead of \"hidden\" b/c we don't need any indirect\n  # calls to our non-exported functions\n  CHECK_C_COMPILER_FLAG(\"-fvisibility=internal\" HAVE_FVISIBILITY_INTERNAL)\n  CHECK_C_COMPILER_FLAG(\"-fvisibility=hidden\" HAVE_FVISIBILITY_HIDDEN)\n\n  # XXX: on macos w/ gcc 4.2.1, the internal flag is accepted with just a\n  # warning, so the CHECK_C_COMPILER_FLAG passes above.  For now we just go to\n  # hidden for macos instead of a manual test for the warning.\n  if (HAVE_FVISIBILITY_INTERNAL AND NOT APPLE)\n    set(VISIBILITY \"internal\")\n  elseif (HAVE_FVISIBILITY_HIDDEN)\n    set(VISIBILITY \"hidden\")\n  else ()\n    message(\"${CMAKE_C_COMPILER} missing flag -fvisibility, using linker \"\n            \"script instead\")\n    set(VISIBILITY \" \")\n  endif ()\n\n  if (VISIBILITY)\n    set(BASE_CFLAGS \"${BASE_CFLAGS} -fvisibility=${VISIBILITY}\")\n    set(HAVE_FVISIBILITY ON)\n  endif (VISIBILITY)\n\n  # Check for -fno-sanitize=null\n  CHECK_C_COMPILER_FLAG(\"-fno-sanitize=null\" HAVE_FNOSANITIZE_NULL)\n\n  if (APPLE OR LINKER_IS_GNU_GOLD)\n    # XXX: for macos, currently assuming using xcode toolchain.\n    set(ld_script_option \"\")\n  else ()\n    # Better to use -dT when passing linker options through gcc, but ld\n    # prior to 2.18 only supports -T\n    # FIXME: should we duplicate this in DynamoRIOConfig.cmake?\n    execute_process(COMMAND\n      ${CMAKE_LINKER} --help\n      RESULT_VARIABLE ld_result\n      ERROR_VARIABLE ld_error\n      OUTPUT_VARIABLE ld_out)\n    if (ld_result OR ld_error)\n      message(FATAL_ERROR \"*** ${CMAKE_LINKER} failed: ***\\n${ld_error}\")\n    endif (ld_result OR ld_error)\n    string(REGEX MATCH \"dT\" flag_present \"${ld_out}\")\n    if (NOT flag_present)\n      message(\"${CMAKE_LINKER} missing flag -dT, using -T instead\")\n      set(ld_script_option \"-T\")\n    else (NOT flag_present)\n      set(ld_script_option \"-dT\")\n    endif (NOT flag_present)\n  endif ()\n\n  # In the past, there have been tools on Linux that don't know how to follow\n  # .gnu_debuglink.  While we aren't aware of any major tools with this bug\n  # today, it's useful to be able to turn this off while experimenting with new\n  # tools.\n  option(SPLIT_SYMBOLS \"whether to split debug symbols from binaries\" ON)\n  mark_as_advanced(SPLIT_SYMBOLS)\n\n  # We want separate .debug files for all shared libraries\n  if (SPLIT_SYMBOLS AND NOT DEFINED CMAKE_OBJCOPY)\n    find_package(BinUtils)\n  endif ()\n  if (SPLIT_SYMBOLS AND EXISTS ${CMAKE_OBJCOPY} AND EXISTS ${CMAKE_STRIP})\n    # Check for --only-keep-debug support: added ~2.15\n    execute_process(COMMAND\n      ${CMAKE_OBJCOPY} --help\n      RESULT_VARIABLE objcopy_result\n      ERROR_QUIET\n      OUTPUT_VARIABLE objcopy_out)\n    if (objcopy_result)\n      message(FATAL_ERROR \"*** ${CMAKE_OBJCOPY} failed to run ***\\n\")\n    endif (objcopy_result)\n    set(strip_local \"-x\")  # Strip local (non-exported) symbols from .symtab.\n    if (PROFILE)\n      # Keep .symtab for tools (objdump) that don't always handle split debug\n      # info gracefully.\n      set(strip_local \"\")\n    endif ()\n    string(REGEX MATCH \"only-keep-debug\" flag_present \"${objcopy_out}\")\n    if (NOT flag_present)\n      message(\"${CMAKE_OBJCOPY} missing flag --only-keep-debug: leaving debug info in .so files\")\n      if (APPLE)\n        # Incredibly, for both clang and g++, while a single compile-and-link\n        # invocation will create an executable.dSYM/ dir with debug info,\n        # with separate compilation the final link does NOT create the\n        # dSYM dir.\n        # The \"dsymutil\" program will create the dSYM dir for us.\n        # Strangely it takes in the executable and not the object\n        # files even though it's the latter that contain the debug info.\n        # Thus it will only work if the object files are still sitting around.\n        find_program(DSYMUTIL_PROGRAM dsymutil)\n        if (DSYMUTIL_PROGRAM)\n          set(CMAKE_C_LINK_EXECUTABLE\n            \"${CMAKE_C_LINK_EXECUTABLE}\"\n            \"${DSYMUTIL_PROGRAM} <TARGET>\")\n          set(CMAKE_C_CREATE_SHARED_LIBRARY\n            \"${CMAKE_C_CREATE_SHARED_LIBRARY}\"\n            \"${DSYMUTIL_PROGRAM} <TARGET>\")\n          set(CMAKE_CXX_LINK_EXECUTABLE\n            \"${CMAKE_CXX_LINK_EXECUTABLE}\"\n            \"${DSYMUTIL_PROGRAM} <TARGET>\")\n          set(CMAKE_CXX_CREATE_SHARED_LIBRARY\n            \"${CMAKE_CXX_CREATE_SHARED_LIBRARY}\"\n            \"${DSYMUTIL_PROGRAM} <TARGET>\")\n        endif ()\n      endif ()\n      if (ANDROID)\n        # For code simplicity (to avoid -fPIE rules here) we just don't support this\n        message(FATAL_ERROR \"${CMAKE_OBJCOPY} required flag --only-keep-debug missing\")\n      endif ()\n    else (NOT flag_present)\n      if (ANDROID)\n        # Android requires PIE\n        set(exe_link_extra \"-fPIE -pie\")\n      else ()\n        set(exe_link_extra \"\")\n      endif ()\n      set(CMAKE_C_CREATE_SHARED_LIBRARY\n        # standard rule\n        \"<CMAKE_C_COMPILER> <CMAKE_SHARED_LIBRARY_C_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_C_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>\"\n        # now create a .debug copy\n        \"${CMAKE_OBJCOPY} --only-keep-debug <TARGET> <TARGET>.debug\"\n        # link original to point at .debug copy\n        # directory components are removed, so \"../lib/\" is fine\n        \"${CMAKE_OBJCOPY} --add-gnu-debuglink=<TARGET>.debug <TARGET>\"\n        # We can't strip everything since a client's _USES_DR_VERSION_ will be\n        # removed, so we only strip debug (-g) and local (-x):\n        # i#572: We used to pass -p here, but that floors the mtime.\n        \"${CMAKE_STRIP} -g ${strip_local} <TARGET>\"\n        )\n      SET(CMAKE_C_LINK_EXECUTABLE\n        \"<CMAKE_C_COMPILER> <FLAGS> <CMAKE_C_LINK_FLAGS> <LINK_FLAGS> ${exe_link_extra} <OBJECTS>  -o <TARGET> <LINK_LIBRARIES>\"\n        \"${CMAKE_OBJCOPY} --only-keep-debug <TARGET> <TARGET>.debug\"\n        \"${CMAKE_OBJCOPY} --add-gnu-debuglink=<TARGET>.debug <TARGET>\"\n        \"${CMAKE_STRIP} -g ${strip_local} <TARGET>\"\n        )\n      set(CMAKE_CXX_CREATE_SHARED_LIBRARY\n        # standard rule\n        \"<CMAKE_CXX_COMPILER> <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <CMAKE_SHARED_LIBRARY_SONAME_CXX_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>\"\n        # now create a .debug copy\n        \"${CMAKE_OBJCOPY} --only-keep-debug <TARGET> <TARGET>.debug\"\n        # link original to point at .debug copy\n        # directory components are removed, so \"../lib/\" is fine\n        \"${CMAKE_OBJCOPY} --add-gnu-debuglink=<TARGET>.debug <TARGET>\"\n        # We can't strip everything since a client's _USES_DR_VERSION_ will be\n        # removed, so we only strip debug (-g) and local (-x):\n        # i#572: We used to pass -p here, but that floors the mtime.\n        \"${CMAKE_STRIP} -g ${strip_local} <TARGET>\"\n        )\n      SET(CMAKE_CXX_LINK_EXECUTABLE\n        \"<CMAKE_CXX_COMPILER> <FLAGS> <CMAKE_CXX_LINK_FLAGS> <LINK_FLAGS> ${exe_link_extra} <OBJECTS>  -o <TARGET> <LINK_LIBRARIES>\"\n        \"${CMAKE_OBJCOPY} --only-keep-debug <TARGET> <TARGET>.debug\"\n        \"${CMAKE_OBJCOPY} --add-gnu-debuglink=<TARGET>.debug <TARGET>\"\n        \"${CMAKE_STRIP} -g ${strip_local} <TARGET>\"\n        )\n    endif (NOT flag_present)\n  else (SPLIT_SYMBOLS AND EXISTS ${CMAKE_OBJCOPY} AND EXISTS ${CMAKE_STRIP})\n    if (ANDROID)\n      # For code simplicity (to avoid -fPIE rules here) we just don't support this\n      message(FATAL_ERROR \"SPLIT_SYMBOLS required for Android\")\n    endif ()\n  endif (SPLIT_SYMBOLS AND EXISTS ${CMAKE_OBJCOPY} AND EXISTS ${CMAKE_STRIP})\n\nendif (UNIX)\n\n# Should we be using fewer of these and using cmake's Debug vs Release?\n#   Release => -O3 -NDEBUG\n# Right now we only support gcc and cl but could change in future\nif (DEBUG)\n  set(CMAKE_C_FLAGS \"${BASE_CFLAGS} ${BASE_CONLY_FLAGS} ${DBG} ${DBG_OPT} $ENV{CFLAGS}\")\n  set(CMAKE_CXX_FLAGS \"${BASE_CFLAGS} ${BASE_CXXONLY_FLAGS} ${DBG} ${DBG_OPT} $ENV{CXXFLAGS}\")\nelse (DEBUG)\n  if (CALLPROF)\n    # no opts -- we need to avoid messing up call frame walking\n    # FIXME: just disable frame ptr elim opt: but /Oy- ran into some issues\n    set (OPT \"\")\n  endif (CALLPROF)\n  set(CMAKE_C_FLAGS \"${BASE_CFLAGS} ${BASE_CONLY_FLAGS} ${OPT} $ENV{CFLAGS}\")\n  set(CMAKE_CXX_FLAGS \"${BASE_CFLAGS} ${BASE_CXXONLY_FLAGS} ${OPT} $ENV{CXXFLAGS}\")\nendif (DEBUG)\nset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${LINK_EXTRA_FLAGS}\")\nset(CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} ${LINK_EXTRA_FLAGS}\")\nset(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} ${LINK_EXTRA_FLAGS}\")\nif (NOT DISABLE_WARNINGS)\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${WARN}\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${WARN}\")\nendif (NOT DISABLE_WARNINGS)\n\nif (LINUX)\n  CHECK_INCLUDE_FILE(\"linux/rseq.h\" HAVE_RSEQ)\n  CHECK_INCLUDE_FILE(\"libunwind.h\" HAVE_LIBUNWIND_H)\nelse ()\n  set(HAVE_RSEQ OFF)\n  set(HAVE_LIBUNWIND_H OFF)\nendif ()\n\n# Currently only AArch64 targets supported for half-precision FP.\nif (DR_HOST_AARCH64)\n  set(HAVE_HALF_FLOAT ON)\nelse ()\n  set(HAVE_HALF_FLOAT OFF)\nendif ()\n\nset(BUILD_PT_TRACER OFF)\nset(BUILD_PT_POST_PROCESSOR OFF)\nset(proc_supports_pt OFF)\n# Right now we only build PT related libraries on Linux x86_64.\nif (LINUX AND X86 AND X64)\n  # We will always build the PT tracer on Linux X86_64 no matter whether the system\n  # supports PT, because users may want to use the built binaries on a different system\n  # that does not support PT itself.\n  set(BUILD_PT_TRACER ON)\n  # Check if the building machine supports Intel PT. This function only checks if\n  # PT-related tests need to be built. PT-capable binaries can be built on any system.\n  check_intel_pt_support(proc_supports_pt)\n  # libdrpt2ir and drpt2trace depend on libipt. If the libipt submodule is not\n  # initialized, cmake will report a warning here.\n  if (EXISTS \"${PROJECT_SOURCE_DIR}/third_party/libipt/.git\" )\n    set(BUILD_PT_POST_PROCESSOR ON)\n  else ()\n    message(STATUS \"libipt submodule is not initialized. libdrpt2ir and drpt2trace will not be built.\")\n  endif ()\nelse (LINUX AND X86 AND X64)\n  message(STATUS \"PT related libraries only supported on Linux x86_64\")\nendif (LINUX AND X86 AND X64)\n\n###########################################################################\n\n# Issue 20: cross-arch execve depends on these being distinct and not\n# subsets of each other (e.g., not \"lib\" and \"lib64\") and on the\n# release package using these same names.\nset(INSTALL_LIB_X64 lib64)\nset(INSTALL_LIB_X86 lib32)\nif (X64)\n  set(INSTALL_LIB_BASE ${INSTALL_LIB_X64})\n  set(INSTALL_BIN bin64)\nelse (X64)\n  set(INSTALL_LIB_BASE ${INSTALL_LIB_X86})\n  set(INSTALL_BIN bin32)\nendif (X64)\nif (DEBUG)\n  set(INSTALL_LIB ${INSTALL_LIB_BASE}/debug)\nelse (DEBUG)\n  set(INSTALL_LIB ${INSTALL_LIB_BASE}/release)\nendif (DEBUG)\nset(INSTALL_INCLUDE include)\nset(INSTALL_DOCS docs)\nset(INSTALL_DOCS_EMBED docs_embed)\n# samples are installed via api/samples/ separate CMake project\nset(INSTALL_CMAKE cmake)\nset(BUILD_INCLUDE \"${PROJECT_BINARY_DIR}/${INSTALL_INCLUDE}\")\nset(BUILD_CMAKE \"${PROJECT_BINARY_DIR}/${INSTALL_CMAKE}\")\n\n# support DynamoRIO being included as a subdir inside a tool's project,\n# where the tool will likely want to suppress DR's install rules.\nif (NOT DEFINED DO_DR_INSTALL)\n  set(DO_DR_INSTALL ON)\nendif (NOT DEFINED DO_DR_INSTALL)\nmacro(DR_install)\n  if (DO_DR_INSTALL)\n    install(${ARGV})\n  endif (DO_DR_INSTALL)\nendmacro(DR_install)\n# To support an including project exporting its own targets we need\n# to export dynamorio, our extensions, and our exports file, but\n# we want the includer to be able to stick the actual binaries\n# in one place.  So we have both a bool DO_DR_INSTALL_TARGETS\n# and a path DR_INSTALL_TARGETS_DEST:\nif (DO_DR_INSTALL OR NOT DEFINED DO_DR_INSTALL_TARGETS)\n  set(DO_DR_INSTALL_TARGETS ON)\nendif ()\nmacro(DR_target_install)\n  if (DO_DR_INSTALL_TARGETS)\n    install(${ARGV})\n  endif (DO_DR_INSTALL_TARGETS)\nendmacro(DR_target_install)\nmacro(DR_target_install_dst dst)\n  if (DO_DR_INSTALL_TARGETS)\n    if (DEFINED DR_INSTALL_TARGETS_DEST)\n      set(inst_dst ${DR_INSTALL_TARGETS_DEST})\n    else ()\n      set(inst_dst ${dst})\n    endif ()\n    set(export_flag \"\")\n    foreach (n ${ARGN})\n      if (n MATCHES EXPORT)\n        set(export_flag \"EXPORT_LINK_INTERFACE_LIBRARIES\")\n      endif ()\n      break ()\n    endforeach ()\n    install(${ARGN} DESTINATION ${inst_dst} ${export_flag})\n  endif (DO_DR_INSTALL_TARGETS)\nendmacro(DR_target_install_dst)\nfunction (install_exported_target target dest)\n  if (DO_DR_INSTALL_TARGETS)\n    DR_target_install_dst(${dest} TARGETS ${target} EXPORT ${exported_targets_name}\n      ${ARGN})\n  endif (DO_DR_INSTALL_TARGETS)\nendfunction (install_exported_target)\nfunction (install_target target dest)\n  if (DO_DR_INSTALL_TARGETS)\n    DR_target_install_dst(${dest} TARGETS ${target} ${ARGN})\n  endif (DO_DR_INSTALL_TARGETS)\nendfunction (install_target)\n\n# mirror install path for easier use from build dir\n# most libs go in base; DR and preload go in {debug,release} subdir\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}/${INSTALL_LIB_BASE}\")\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_LIBRARY_OUTPUT_DIRECTORY}\")\nset(DR_LIBRARY_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}/${INSTALL_LIB}\")\nset(DR_LIBRARY_BASE_DIRECTORY \"${PROJECT_BINARY_DIR}/${INSTALL_LIB_BASE}\")\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}/${INSTALL_BIN}\")\n# if drinjectlib is built before any exe target this dir won't exist\n# and the \"cmake -E copy\" will fail (PR 549174)\nfile(MAKE_DIRECTORY \"${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\")\n\nfunction (set_per_config_ouput_to_match_single_config)\n  if (\"${CMAKE_GENERATOR}\" MATCHES \"Visual Studio\")\n    # we don't want to support the Debug and Release subdirs so\n    # we rely on cmake 2.8.2's control over their names\n    # (up above we require 2.8.2+ for VS generators)\n    foreach (config ${CMAKE_CONFIGURATION_TYPES})\n      string(TOUPPER \"${config}\" config_upper)\n      set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${config_upper}\n        \"${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\" PARENT_SCOPE)\n      set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${config_upper}\n        \"${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}\" PARENT_SCOPE)\n      set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${config_upper}\n        \"${CMAKE_LIBRARY_OUTPUT_DIRECTORY}\" PARENT_SCOPE)\n    endforeach ()\n  endif ()\nendfunction (set_per_config_ouput_to_match_single_config)\n\nset_per_config_ouput_to_match_single_config()\n\n# set var needed by configure.cmake.h\nstring(REGEX REPLACE\n  \"^([0-9]+)\\\\..*\" \"\\\\1\" VERSION_NUMBER_MAJOR \"${VERSION_NUMBER}\")\nstring(REGEX REPLACE\n  \"^[0-9]+\\\\.([0-9]+)\\\\..*\" \"\\\\1\" VERSION_NUMBER_MINOR \"${VERSION_NUMBER}\")\nmath(EXPR VERSION_NUMBER_INTEGER\n  \"${VERSION_NUMBER_MAJOR}*100 + ${VERSION_NUMBER_MINOR}\")\n\n# Every release since has had minor compat breakages: see api/docs/release.dox.\nset(OLDEST_COMPATIBLE_VERSION_DEFAULT \"1100\")\nset(OLDEST_COMPATIBLE_VERSION \"\" CACHE STRING\n  \"Oldest compatible version: leave empty for default\")\nif (\"${OLDEST_COMPATIBLE_VERSION}\" STREQUAL \"\")\n  set(OLDEST_COMPATIBLE_VERSION ${OLDEST_COMPATIBLE_VERSION_DEFAULT})\nendif()\n\n# i#955: a Windows version of ELF DT_RPATH where a local file stores lib paths\nset(DR_RPATH_SUFFIX \"drpath\")\n\n# This does a copy-if-different, so it won't trigger recompilation of\n# every single source file if no changes\nconfigure_file(\n  ${PROJECT_SOURCE_DIR}/make/configure.cmake.h\n  ${PROJECT_BINARY_DIR}/configure.h\n  )\n\n# We want a define that's set to all the options.\n# Something like cpp -dN but we need it on Windows and want only defines.\n# Strategy: add -D<define> token after each #define, and then run\n# cpp => left with just the -D<define> that are defined.\n# If we append this to configure.h we'll trigger recompilation of\n# everything, so we generate a separate header file.\nfile(READ ${PROJECT_BINARY_DIR}/configure.h configure_h)\nstring(REGEX REPLACE\n  \"(# *define *)([^_][^ \\r\\n]+)( *\\r?\\n)\"\n  \"\\\\1\\\\2\\\\3-D\\\\2\\n\" configure_h_mod \"${configure_h}\")\nset(defines_tmpfile ${PROJECT_BINARY_DIR}/configure_temp.h)\n# we do NOT add ${defines_tmpfile} to set_directory_properties\n# ADDITIONAL_MAKE_CLEAN_FILES b/c it's built at configure time:\n# would be part of \"make distclean\" but cmake does not have that.\nfile(WRITE ${defines_tmpfile} \"${configure_h_mod}\")\n# No way to get cmdline defines from cmake: but shouldn't be any, all\n# in configure.h, except the -Ddynamorio_EXPORTS that cmake defines.\n# Note: cpp w/ no 2nd filename prints to stdout (explicit \"-\" => pause at end)\nexecute_process(COMMAND\n  ${CMAKE_CPP} ${CMAKE_CPP_FLAGS} -E ${CPP_NO_LINENUM} ${defines_tmpfile}\n  RESULT_VARIABLE cpp_result\n  ERROR_VARIABLE cpp_err\n  OUTPUT_VARIABLE cpp_out\n  )\nif (WIN32)\n  # cl prints out name of file: no way to quiet it\n  get_filename_component(tmpfile_nm ${defines_tmpfile} NAME)\n  string(REGEX REPLACE \"${tmpfile_nm}[ \\r\\n]*\" \"\" cpp_err \"${cpp_err}\")\n  string(STRIP \"${cpp_err}\" cpp_err)\nendif (WIN32)\nif (cpp_result OR cpp_err)\n  message(FATAL_ERROR \"*** ${CMAKE_CPP} failed: ***\\n${cpp_err}\")\nendif (cpp_result OR cpp_err)\nstring(REGEX MATCHALL\n  \"-D[^ \\r\\n]+\" defines \"${cpp_out}\")\nstring(REGEX REPLACE\n  \";\"\n  \" \" defines \"${defines}\")\nset(defines_tofile\n  \"#ifndef _CONFIGDEFS_\\n#define _CONFIGDEFS_ 1\\n\\n#define DYNAMORIO_DEFINES \\\"${defines}\\\"\\n\\n#endif /* _CONFIGDEFS_ */\\n\")\n# Try to avoid triggering re-compilation if no changes\nset(defines_file ${PROJECT_BINARY_DIR}/configure_defines.h)\nif (EXISTS ${defines_file})\n  file(READ ${defines_file} defines_fromfile)\n  if (NOT \"${defines_fromfile}\" STREQUAL \"${defines_tofile}\")\n    file(WRITE ${defines_file} \"${defines_tofile}\")\n  endif (NOT \"${defines_fromfile}\" STREQUAL \"${defines_tofile}\")\nelse (EXISTS ${defines_file})\n  file(WRITE ${defines_file} \"${defines_tofile}\")\nendif (EXISTS ${defines_file})\n\ninclude_directories(BEFORE\n  ${PROJECT_BINARY_DIR} # for configure.h, configure_defines.h, events.h, and event_strings.h\n  )\n\n# Export targets for importing by clients.\n# We include DynamoRIO and all Extensions in the same file for simplicity,\n# since the Extensions depend on DynamoRIO and in some cases each other\n# and so need to be locatable as a group.\n# To support packaging both together we need different names.\n# Debug vs release is automatically added as a suffix.\nif (X64)\n  set(exported_targets_name \"DynamoRIOTarget64\")\n  set(exported_map_name \"DynamoRIOMap64\")\nelse (X64)\n  set(exported_targets_name \"DynamoRIOTarget32\")\n  set(exported_map_name \"DynamoRIOMap32\")\nendif (X64)\n\n# i#948: we need to map RelWithDebInfo and RelMinSize to Release so importing\n# projects don't end up with Debug instead, yet Release for static libs\n# set in DynamoRIOConfig.cmake.\n# We do this with the MAP_IMPORTED_CONFIG_<CONFIG> target property in a\n# special DynamoRIOMap file included by DynamoRIOConfig.cmake for build dirs, and\n# directly in the DynamoRIOTarget file for install dirs (where we can append easily).\n# For the Map file, we need to start empty:\nfile(WRITE ${PROJECT_BINARY_DIR}/cmake/${exported_map_name}.cmake \"\")\nset(exported_targets_append \"\")\nmacro(DR_export_target target)\n  export(TARGETS ${ARGV} APPEND FILE ${PROJECT_BINARY_DIR}/cmake/${exported_targets_name}.cmake\n    EXPORT_LINK_INTERFACE_LIBRARIES)\n  set(toadd \"\nSET_PROPERTY(TARGET ${ARGV} PROPERTY MAP_IMPORTED_CONFIG_RELEASE RelWithDebInfo)\nSET_PROPERTY(TARGET ${ARGV} PROPERTY MAP_IMPORTED_CONFIG_RELMINSIZE RelWithDebInfo)\n\")\n  if (NOT DEBUG)\n    file(APPEND ${PROJECT_BINARY_DIR}/cmake/${exported_map_name}.cmake ${toadd})\n  endif (NOT DEBUG)\n  # We append to the installed file even in debug build so the ordering of\n  # release vs debug doesn't matter in the final package.\n  set(exported_targets_append \"${exported_targets_append}${toadd}\")\n  set(exported_targets_append \"${exported_targets_append}\" PARENT_SCOPE)\nendmacro(DR_export_target)\n\nfile(MAKE_DIRECTORY ${BUILD_INCLUDE})\nmacro(DR_export_header src_path dst_fname)\n  # This is not COPYONLY nor @ONLY so this will expand ${} references, which\n  # we do have in dr_api.h.\n  configure_file(${src_path} ${BUILD_INCLUDE}/${dst_fname})\nendmacro()\n\n# We rely on dbghelp >= 6.0 for any use of drsyms: some sample clients and some\n# tests in our suite.\n# The system dbghelp pre-Vista is too old, so we copy one from VS.\n# We locate it here for use in both subdirs.\n# We just try all variants that we can to avoid the complexities of which\n# versions are in \"Program Files\" vs \"Program Files (x86)\".\nset(PROGFILES \"$ENV{PROGRAMW6432}\")\nset(PROGFILES32 \"$ENV{ProgramFiles\\(x86\\)}\")\nif (\"${PROGFILES}\" STREQUAL \"\")\n  set(PROGFILES \"$ENV{PROGRAMFILES}\")\nendif ()\nif (X64)\n  set(ARCH_SFX \"x64\")\nelse (X64)\n  set(ARCH_SFX \"x86\")\nendif (X64)\nset(dbghelp_paths\n  \"${PROGFILES32}/Microsoft Visual Studio/*/Professional/Common7/IDE/Remote Debugger/${ARCH_SFX}/dbghelp.dll\"\n  \"${PROGFILES}/Microsoft Visual Studio/*/Professional/Common7/IDE/Remote Debugger/${ARCH_SFX}/dbghelp.dll\"\n  \"${PROGFILES32}/Microsoft Visual Studio */Common7/IDE/Remote Debugger/${ARCH_SFX}/dbghelp.dll\"\n  \"${PROGFILES}/Microsoft Visual Studio */Common7/IDE/Remote Debugger/${ARCH_SFX}/dbghelp.dll\"\n  \"${PROGFILES32}/Microsoft Visual Studio */Common7/IDE/dbghelp.dll\"\n  \"${PROGFILES}/Microsoft Visual Studio */Common7/IDE/dbghelp.dll\"\n  \"${PROGFILES32}/Windows Kits/*/Debuggers/${ARCH_SFX}/dbghelp.dll\"\n  \"${PROGFILES}/Windows Kits/*/Debuggers/${ARCH_SFX}/dbghelp.dll\")\n# Older DTFW installed into its own dir:\nif (X64)\n  set(dbghelp_paths ${dbghelp_paths}\n    \"${PROGFILES}/Debugging Tools for Windows (x64)/dbghelp.dll\")\nelse ()\n  set(dbghelp_paths ${dbghelp_paths}\n  \"${PROGFILES}/Debugging Tools for Windows/dbghelp.dll\")\nendif ()\nfile(GLOB dbghelp_loc ${dbghelp_paths})\nmessage(STATUS \"For dbghelp, choosing among: ${dbghelp_loc}\")\nif (dbghelp_loc)\n  # i#1219: exclude VS2005 x64 dbghelp as it is buggy\n  list(LENGTH dbghelp_loc dbghelp_max)\n  math(EXPR dbghelp_max \"${dbghelp_max} - 1\")\n  set(dbghelp_index 0)\n  list(GET dbghelp_loc 0 dbghelp_path)\n  while (X64 AND dbghelp_path MATCHES \"Visual Studio 8\" AND\n         ${dbghelp_index} LESS ${dbghelp_max})\n    math(EXPR dbghelp_index \"${dbghelp_index} + 1\")\n    list(GET dbghelp_loc ${dbghelp_index} dbghelp_path)\n  endwhile()\n  if (X64 AND dbghelp_path MATCHES \"Visual Studio 8\")\n    # Not fatal: just nothing to put in package, and some tests may fail\n    message(STATUS \"Unable to find non-VS2005 dbghelp.dll\")\n    set(dbghelp_path dbghelp_path-NOTFOUND)\n  else ()\n    # DR_install requires all forward slashes\n    string(REPLACE \"\\\\\" \"/\" dbghelp_path ${dbghelp_path})\n    message(STATUS \"Found ${dbghelp_path}\")\n  endif ()\nelse ()\n  set(dbghelp_path dbghelp_path-NOTFOUND)\nendif ()\n\nif (APPLE)\n  # install_name_tool needs write access (i#1372)\n  set(owner_access OWNER_READ OWNER_WRITE)\nelse (APPLE)\n  set(owner_access OWNER_READ)\nendif (APPLE)\n\n###########################################################################\n\n# Let user pick which components to build.  This is especially\n# important b/c w/o 64-bit tools they must configure two different\n# build dirs for 64-bit windows: one for 64-bit core and one for\n# 32-bit tools.\nif (WIN32)\n  option(BUILD_CORE \"build core library and drinject tool\" ON)\nelse (WIN32)\n  option(BUILD_CORE \"build core library\" ON)\nendif (WIN32)\noption(BUILD_TOOLS \"build tools\" ON)\nif (WIN32)\n  option(BUILD_DRSTATS \"build DRstats viewer (requires MFC)\" ON)\nendif (WIN32)\n\noption(BUILD_EXT \"build Extension libraries\" ON)\n\n# should we disallow selecting samples when core is not built?\n# right now the samples build will just fail\noption(BUILD_SAMPLES \"build client samples\" ON)\n\noption(BUILD_CLIENTS \"build client tools\" ON)\n\nif (ANDROID)\n  # TODO i#1874: Android does not build drcachesim or drcpusim, which have\n  # references spread throughout the docs.\n  option(BUILD_DOCS \"build documentation\" OFF)\nelse ()\n  option(BUILD_DOCS \"build documentation\" ON)\nendif ()\n\n# We include all tests and build them at configure time if requested.\n# An alternative is to keep them in separate projects and only build\n# when we run them via --build-and-test.\noption(BUILD_TESTS \"build tests\" OFF)\n# This is to disable the default -msgbox_mask.\noption(AUTOMATED_TESTING \"build for automated testing\" OFF)\nif (BUILD_TESTS)\n  # Tests require tools\n  set(BUILD_TOOLS ON)\n  enable_testing()\n  # add Dashboard support\n  include(CTest)\nendif (BUILD_TESTS)\n\nif (BUILD_CORE)\n  add_subdirectory(core)\nendif (BUILD_CORE)\n\nif (BUILD_TOOLS OR BUILD_DRSTATS OR BUILD_CLIENTS)\n  add_subdirectory(libutil)\nendif (BUILD_TOOLS OR BUILD_DRSTATS OR BUILD_CLIENTS)\n\nif (BUILD_TOOLS)\n  add_subdirectory(tools)\nendif (BUILD_TOOLS)\n\nif (BUILD_DRSTATS)\n  # i#1376: we have our own variant of the standard FindMFC.cmake\n  # so we can pass -D_UNICODE, as MBCS MFC support is not part of VS2013.\n  # Update: To get things going with VS2017 I'm switching to the regular one\n  # to get some version of DRstats building.  We don't really use it much\n  # anymore; only if someone notices any unicode issues is it worth more time\n  # updating make/modules/FindMFCUnicode.cmake.\n  find_package(MFC)\n  if (NOT MFC_FOUND)\n    message(STATUS \"MFC not found: disabling DRstats\")\n    set(BUILD_DRSTATS OFF)\n  endif ()\n\n  if (BUILD_DRSTATS)\n    add_subdirectory(tools/DRstats)\n  endif ()\nendif (BUILD_DRSTATS)\n\n# create empty logs dir for running out of build dir\nfile(MAKE_DIRECTORY \"${PROJECT_BINARY_DIR}/logs\")\n# export visual studio lookup file just like full install, for using from build dir\n# with projects that include DR sources\nconfigure_file(${PROJECT_SOURCE_DIR}/suite/lookup_visualstudio.cmake\n  ${BUILD_CMAKE}/lookup_visualstudio.cmake COPYONLY)\n# export cpp2asm files just like full install, for using from build dir\n# with projects that include DR sources\nconfigure_file(${PROJECT_SOURCE_DIR}/make/cpp2asm_support.cmake\n  ${BUILD_CMAKE}/cpp2asm_support.cmake COPYONLY)\nconfigure_file(${PROJECT_SOURCE_DIR}/make/CMake_asm.cmake\n  ${BUILD_CMAKE}/cpp2asm_add_newlines.cmake COPYONLY)\n# we need to strip out the #include of configure.h\n# XXX: this should be a build-time rule as it depends on asm_defines.asm!\nfile(READ \"${PROJECT_SOURCE_DIR}/core/arch/asm_defines.asm\" str)\nstring(REPLACE \"#include \\\"configure.h\\\"\" \"\" str \"${str}\")\nfile(WRITE \"${BUILD_CMAKE}/cpp2asm_defines.h\" \"${str}\")\n\n# Export docs files just like full install, for using from build dir\n# with projects that include DR sources.  Do this even if not BUILD_DOCS,\n# for containing projects.\nconfigure_file(${PROJECT_SOURCE_DIR}/api/docs/CMake_rundoxygen.cmake\n  ${BUILD_CMAKE}/docs_rundoxygen.cmake COPYONLY)\nconfigure_file(${PROJECT_SOURCE_DIR}/api/docs/CMake_doxyutils.cmake\n  ${BUILD_CMAKE}/docs_doxyutils.cmake COPYONLY)\n\n###########################################################################\n\n# create CMake configuration files for clients and tests to use\n# we also create cmake/DynamoRIOTarget.cmake in core/CMakeLists.txt\nset(public_config_dir ${PROJECT_BINARY_DIR}/cmake)\nset(public_config_file ${public_config_dir}/DynamoRIOConfig.cmake)\nconfigure_file(\n  ${PROJECT_SOURCE_DIR}/make/DynamoRIOConfig.cmake.in\n  ${public_config_file}\n  @ONLY)\n\n# INCLUDEFILE feature\nfile(READ ${public_config_file} contents)\nstring(REGEX MATCHALL \"\\nINCLUDEFILE [^ \\r\\n]*\" includes \"${contents}\")\nforeach (inc ${includes})\n  string(REGEX REPLACE \"\\nINCLUDEFILE \" \"\" incfile \"${inc}\")\n  file(READ \"${incfile}\" subst)\n  # strip out copyright header, which we prefixed with \"##\"\n  string(REGEX REPLACE \"(^|\\n)##[^\\n]*\" \"\" subst \"${subst}\")\n  string(REGEX REPLACE \"${inc}\" \"\\n${subst}\" contents \"${contents}\")\nendforeach (inc)\nfile(WRITE ${public_config_file} \"${contents}\")\n\nconfigure_file(\n  ${PROJECT_SOURCE_DIR}/make/DynamoRIOConfigVersion.cmake.in\n  ${PROJECT_BINARY_DIR}/cmake/DynamoRIOConfigVersion.cmake\n  @ONLY)\nDR_install(FILES\n  ${public_config_file}\n  ${PROJECT_BINARY_DIR}/cmake/DynamoRIOConfigVersion.cmake\n  DESTINATION ${INSTALL_CMAKE}\n)\n# export suite scripts even if not building tests\nDR_install(FILES\n  ${PROJECT_SOURCE_DIR}/suite/runsuite_common_pre.cmake\n  ${PROJECT_SOURCE_DIR}/suite/runsuite_common_post.cmake\n  DESTINATION ${INSTALL_CMAKE}\n)\n# export visual studio lookup support\nDR_install(FILES ${PROJECT_SOURCE_DIR}/suite/lookup_visualstudio.cmake\n  DESTINATION ${INSTALL_CMAKE}\n)\n# export cpp2asm support, with consistent names\nDR_install(FILES ${PROJECT_SOURCE_DIR}/make/cpp2asm_support.cmake\n  DESTINATION ${INSTALL_CMAKE}\n)\nDR_install(FILES ${PROJECT_SOURCE_DIR}/make/CMake_asm.cmake\n  DESTINATION ${INSTALL_CMAKE} RENAME cpp2asm_add_newlines.cmake\n)\n# we need to strip out the #include of configure.h\nDR_install(FILES ${BUILD_CMAKE}/cpp2asm_defines.h DESTINATION ${INSTALL_CMAKE})\n\n# export docs support, with consistent names\nDR_install(FILES ${PROJECT_SOURCE_DIR}/api/docs/CMake_rundoxygen.cmake\n  DESTINATION ${INSTALL_CMAKE} RENAME docs_rundoxygen.cmake\n)\nDR_install(FILES ${PROJECT_SOURCE_DIR}/api/docs/CMake_doxyutils.cmake\n  DESTINATION ${INSTALL_CMAKE} RENAME docs_doxyutils.cmake\n)\n\n###########################################################################\n\n# clear tools file to avoid duplicates on re-configure\nif (X64)\n  set(TOOLS_LISTNAME \"list64\")\nelse ()\n  set(TOOLS_LISTNAME \"list32\")\nendif ()\nfile(WRITE ${PROJECT_BINARY_DIR}/tools/${TOOLS_LISTNAME} \"\")\nDR_install(FILES ${PROJECT_BINARY_DIR}/tools/${TOOLS_LISTNAME} DESTINATION tools)\n\nfunction (register_tool_file name)\n  file(APPEND ${PROJECT_BINARY_DIR}/tools/${TOOLS_LISTNAME} \"${name}\\n\")\nendfunction ()\n\n# Used by docs, samples, and tests, so here instead of in core/CMakeLists.txt.\n# Set VERSION_NUMBER_INTEGER in dr_api.h:\nDR_export_header(${PROJECT_SOURCE_DIR}/core/lib/dr_api.h dr_api.h)\nif (NOT ANNOTATIONS)\n  # Kind of a hack, in case the user explicitly disables annotations\n  file(READ ${BUILD_INCLUDE}/dr_api.h contents)\n  string(REGEX REPLACE \"\\n[^\\n]*nnotation[^\\n]*\" \"\" contents \"${contents}\")\n  file(WRITE ${BUILD_INCLUDE}/dr_api.h \"${contents}\")\nendif ()\nadd_custom_target(api_headers)\nif (AARCH64)\n  add_dependencies(api_headers gen_aarch64_codec gen_aarch64_opcodes)\nelseif(RISCV64)\n  add_dependencies(api_headers gen_riscv64_codec gen_riscv64_headers)\nendif()\n\nDR_export_header(${PROJECT_SOURCE_DIR}/core/lib/dr_app.h dr_app.h)\n\nDR_install(DIRECTORY ${BUILD_INCLUDE} DESTINATION .\n  REGEX \"annotations/valgrind.h|annotations/memcheck.h\" EXCLUDE)\n\n# Used by tests in multiple places, and by some drcachesim non-test binaries.\nif (UNIX)\n  if (ANDROID)\n    # pthreads is inside Bionic on Android, and for some reason find_library() can't\n    # locate libm or libdl within the Android toolchain: we just assume they're there.\n    set(libmath m)\n    set(libdl dl)\n    set(libpthread \"\")\n  else ()\n    # i#720: cmake fails to find 32-bit libraries in Ubuntu 11.10.\n    # This is because cmake uses CMAKE_LIBRARY_ARCHITECTURE to handle\n    # multi-arch compilation, whose value is x86_64-linux-gnu or i386-linux-gnu\n    # for 64/32-bit. However, in Ubuntu 11.10, some of the 32-bit libraries\n    # like libm.so, libdl.so, and libpthread.so are in /usr/lib32 or /lib32\n    # instead of /lib/i386-linux-gnu, so cmake cannot to find them.\n    # solution: add explicit paths for lookup.\n    find_library(libmath m)\n    if (NOT libmath AND NOT X64)\n      find_library(libmath m PATHS /usr/lib32 /lib32)\n    endif ()\n    find_library(libdl dl)\n    if (NOT libdl AND NOT X64)\n      find_library(libdl dl PATHS /usr/lib32 /lib32)\n    endif ()\n    find_library(libpthread pthread)\n    if (NOT libpthread AND NOT X64)\n      find_library(libpthread pthread PATHS /usr/lib32 /lib32)\n    endif ()\n    if (NOT libmath OR NOT libdl OR NOT libpthread)\n      message(FATAL_ERROR \"cannot find required libs m, dl, and/or pthread\")\n    endif ()\n  endif ()\nendif ()\n\nfunction (link_with_pthread target)\n  if (UNIX AND NOT ANDROID) # pthreads is inside Bionic on Android\n    target_link_libraries(${target} ${libpthread})\n  endif ()\nendfunction ()\n\nfunction (mac_add_inc_and_lib header lib)\n  # Locate include and lib directories on MacOS.\n  # TODO: Write proper package for snappy and lz4 lookup.\n  find_path(INCLUDE_DIR ${header} HINTS /usr/local/include /opt/homebrew/include)\n  if (INCLUDE_DIR)\n    include_directories(${INCLUDE_DIR})\n  else ()\n    message(WARNING \"Failed to locate header ${header}\")\n  endif ()\n  find_path(LIB_DIR ${lib} HINTS /usr/local/lib /opt/homebrew/lib)\n  if (LIB_DIR)\n    link_directories(${LIB_DIR})\n  else ()\n    message(WARNING \"Failed to locate lib ${lib}\")\n  endif ()\nendfunction ()\n\n# zlib, snappy, and lz4 are used for some clients/ and tests.\n# TODO i#5767: Install an explicit zlib package on our Windows GA CI images\n# (this find_package finds a strawberry perl zlib which causes 32-bit build\n# and 64-bit private loader issues).\noption(DISABLE_ZLIB \"Disable looking for and using zlib\" OFF)\nif (WIN32 AND NOT DISABLE_ZLIB)\n  set(ZLIB_FOUND OFF)\nelse ()\n  find_package(ZLIB)\n  # FindZLIB doesn't give us any library split so we manually\n  # convert to static.\n  set(ZLIB_STATIC_LIBRARIES \"\")\n  foreach (lib ${ZLIB_LIBRARIES})\n    string(REGEX REPLACE \"\\\\.so$\" \".a\" newlib \"${lib}\")\n    list(APPEND ZLIB_STATIC_LIBRARIES ${newlib})\n  endforeach ()\nendif ()\n# On Ubuntu 14.10, 32-bit builds fail to link with -lsnappy, just ignore.\nif (UNIX AND X64)\n  find_library(libsnappy snappy)\n  if (libsnappy)\n    message(STATUS \"Found snappy: ${libsnappy}\")\n    if (APPLE)\n      mac_add_inc_and_lib(snappy.h libsnappy.a)\n    endif ()\n  endif ()\n  find_library(liblz4 lz4)\n  if (liblz4)\n    message(STATUS \"Found liblz4: ${liblz4}\")\n    if (APPLE)\n      mac_add_inc_and_lib(lz4.h liblz4.a)\n    endif ()\n  endif ()\nendif ()\n\nif (BUILD_CLIENTS)\n  # Must be prior to api/docs\n  add_subdirectory(clients)\nendif (BUILD_CLIENTS)\n\nif (BUILD_DOCS)\n  find_package(Doxygen)\n  if (NOT DOXYGEN_FOUND)\n    # We require for any automated suite on Linux or Windows.\n    if (TEST_SUITE AND NOT APPLE)\n      message(FATAL_ERROR \"doxygen is required to build the documentation\")\n    else ()\n      # Non-fatal for a single, un-official build.\n      message(WARNING \"doxygen not found: documentation will NOT be built\")\n      set(BUILD_DOCS OFF)\n    endif ()\n  endif (NOT DOXYGEN_FOUND)\n\n  if (BUILD_DOCS)\n    add_subdirectory(api/docs)\n  else (BUILD_DOCS)\n    message(\"*** NOT building documentation *** (must re-enable BUILD_DOCS manually if fix up the component paths)\")\n    # Note the difference between cache vars and live vars in CMake.\n    # The cache var indicates \"would like to build docs\" and the live var\n    # \"capable of building docs.\"  The problem is that if we FORCE the\n    # cache var OFF as further confirmation of the warning message, the\n    # user must not only fix up the paths in the required component vars\n    # but also re-enable BUILD_DOCS before re-configuring due to our\n    # guard above.  An alternative is to add an option BUILD_DOCS_CAPABLE\n    # as an informational message that is peristent and right next to the\n    # real option, but I think forcing the user to re-enable BUILD_DOCS\n    # is actually simpler and reasonable.\n    set(BUILD_DOCS OFF CACHE BOOL \"build documentation\" FORCE)\n  endif (BUILD_DOCS)\nendif (BUILD_DOCS)\n\n###########################################################################\n# Style checks:\n\noption(VERA_ERROR \"Turn vera++ checks into error (default)\" ON)\n\nfind_package(vera++ QUIET)\nif (vera++_FOUND)\n  message(STATUS \"Using vera++ for code style checks\")\n  include(${VERA++_USE_FILE})\n  # We use our own modified copy in order to pass --error and for\n  # regex exclusions with vera++ 1.2.1.\n  include(third_party/vera++/use_vera++.cmake)\n  add_vera_targets_for_dynamorio(*.h *.c *.cpp\n    RECURSE\n    EXCLUSION \"${PROJECT_SOURCE_DIR}/make/style_checks/exclude\"\n    ROOT \"${PROJECT_SOURCE_DIR}/make/style_checks\")\nelse ()\n  message(STATUS \"WARNING: vera++ not found: disabling code style checks\")\nendif ()\n\n###########################################################################\n\nDR_install(FILES\n  ${PROJECT_SOURCE_DIR}/README\n  ${PROJECT_SOURCE_DIR}/License.txt\n  ${PROJECT_SOURCE_DIR}/ACKNOWLEDGEMENTS\n  DESTINATION .)\n\n# We put all our libs and exes in common dirs, making it easier\n# to copy our symbols.  It's a pain to construct the pdb name\n# counterparts for targets, so we use the DR_install(DIRECTORY) commands\n# where we can use wildcards.\n# Slightly ugly to have hardcoded names: long-term CMake should\n# support auto-installing pdb files.\nDR_install(DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/\n  DESTINATION ${INSTALL_LIB_BASE}\n  FILE_PERMISSIONS ${owner_access} OWNER_EXECUTE GROUP_READ GROUP_EXECUTE\n  WORLD_READ WORLD_EXECUTE\n  FILES_MATCHING\n  PATTERN \"*.debug\"\n  PATTERN \"*.pdb\"\n  REGEX \".*.dSYM/.*DWARF/.*\" # too painful to get right # of backslash for literal .\n  PATTERN \"dynamorio.pdb\" EXCLUDE # in ${INSTALL_LIB}\n  PATTERN \"libdynamorio.so.*debug\" EXCLUDE # in ${INSTALL_LIB}\n  PATTERN \"libdrpreload.so.debug\" EXCLUDE # in ${INSTALL_LIB}\n  PATTERN \"policy_static.pdb\" EXCLUDE\n  REGEX \".*dynamorio.*.dSYM/.*\" EXCLUDE\n  REGEX \"libdrpreload.*.dSYM/.*\" EXCLUDE\n  REGEX \"policy_static.*.dSYM/.*\" EXCLUDE\n  )\nDR_install(DIRECTORY ${DR_LIBRARY_OUTPUT_DIRECTORY}/\n  DESTINATION ${INSTALL_LIB}\n  FILE_PERMISSIONS ${owner_access} OWNER_EXECUTE GROUP_READ GROUP_EXECUTE\n  WORLD_READ WORLD_EXECUTE\n  FILES_MATCHING\n  PATTERN \"dynamorio.pdb\"\n  PATTERN \"libdynamorio.so.*debug\"\n  PATTERN \"libdrpreload.so.debug\"\n  REGEX \".*dynamorio.*.dSYM/.*DWARF/.*\"\n  REGEX \"libdrpreload.*.dSYM/.*DWARF/.*\"\n  )\nif (BUILD_TOOLS OR WIN32)\n  DR_install(DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/\n    DESTINATION ${INSTALL_BIN}\n    FILE_PERMISSIONS ${owner_access} OWNER_EXECUTE GROUP_READ GROUP_EXECUTE\n    WORLD_READ WORLD_EXECUTE\n    FILES_MATCHING\n    PATTERN \"*.debug\"\n    PATTERN \"*.pdb\"\n    REGEX \".*.dSYM/.*DWARF/.*\" # too painful to get right # of backslash for literal .\n    PATTERN \"runstats.debug\" EXCLUDE # since not installing tool\n    PATTERN \"run_in_bg.debug\" EXCLUDE # since not installing tool\n    PATTERN \"*_exe.debug\" EXCLUDE # since not installing tool\n    REGEX \"runstats.dSYM/.*\" EXCLUDE\n    REGEX \"run_in_bg.dSYM/.*\" EXCLUDE\n    REGEX \".*_exe.dSYM/.*\" EXCLUDE\n    )\nendif (BUILD_TOOLS OR WIN32)\n\nif (BUILD_DOCS)\n  file(WRITE ${PROJECT_BINARY_DIR}/docs/DynamoRIO.html \"<html>\\n<head>\\n<meta http-equiv=\\\"refresh\\\" content=\\\"0; URL=./html/index.html\\\">\\n</head><body></body>\")\n  DR_install(FILES ${PROJECT_BINARY_DIR}/docs/DynamoRIO.html DESTINATION docs)\nendif (BUILD_DOCS)\n\n# create empty logs dir for release package\n# CPack seems to ignore empty dirs so add a README file\nfile(WRITE ${PROJECT_BINARY_DIR}/logs/README \"Empty dir for debug-build log files.\\n\")\nDR_install(FILES ${PROJECT_BINARY_DIR}/logs/README DESTINATION logs)\n\n###########################################################################\n\n# Extensions (i#277/PR 540817)\nif (BUILD_EXT)\n  add_subdirectory(ext)\nendif (BUILD_EXT)\n\nif (BUILD_SAMPLES OR BUILD_TESTS OR BUILD_CLIENTS)\n  # api/samples is set up to function both as a separate project for\n  # building samples vs a DynamoRIO installation, and to allow\n  # building as a component of the whole source tree\n  set(DynamoRIO_INTERNAL ON) # do not import dynamorio lib target\n  set(DynamoRIO_DIR ${PROJECT_BINARY_DIR}/cmake)\nendif (BUILD_SAMPLES OR BUILD_TESTS OR BUILD_CLIENTS)\n\nif (BUILD_SAMPLES)\n  add_subdirectory(api/samples)\nendif (BUILD_SAMPLES)\n\n# This must be after samples and clients, as we use those targets in tests.\nif (BUILD_TESTS)\n  add_subdirectory(suite/tests)\nendif (BUILD_TESTS)\n\n# We must append to this file to avoid cmake_install.cmake's diff from thinking\n# the exports have changed and thus clobbering the other config's files.\n# This is what is copied to ${CMAKE_INSTALL_PREFIX}/${INSTALL_CMAKE}.\nDR_target_install(CODE \"file(APPEND \\\"${PROJECT_BINARY_DIR}/CMakeFiles/Export/cmake/${exported_targets_name}.cmake\\\" \\\"${exported_targets_append}\\\")\")\n# Create the exported targets file.  This will include all targets added\n# in subdirectories via DR_install(TARGETS ... EXPORT ${exported_targets_name}).\nDR_target_install_dst(${INSTALL_CMAKE} EXPORT ${exported_targets_name})\n\n###########################################################################\n# packaging\n\n# For building a full release package, we rely on an external script to\n# build multiple configurations ({release,debug}x{32-bit,64-bit}) with a\n# shared install tree.  In the final build, if an appropriate\n# CPACK_INSTALL_CMAKE_PROJECTS variable is set to point at all 4 builds,\n# \"make package\" will produce a package from all 4 installs.\n\n# TODO i#74: create source tarball via 'make package_source'\n# Just need to exclude exports/ (or move exports/ to ../?) and\n# other files inside source dir (or run on untouched source dir)\n# and update package.{sh,bat}.\n# Note that CPACK_SOURCE_IGNORE_FILES may be tricky to set from here\n# due to the escapes needed: may want to move to a configured file.\n\nif (UNIX)\n  # not bothering with TZ (5M!) or TBZ2 (3.0M vs 3.2M for TGZ)\n  set(CPACK_GENERATOR \"STGZ;TGZ\")\n  # not bothering with TZ or TBZ2\n  set(CPACK_SOURCE_GENERATOR \"TGZ\")\n  # We've already split out our separate .debug files and stripped the\n  # originals in our build rules\n  set(CPACK_STRIP_FILES OFF)\n  if (APPLE)\n    set(CPACK_SYSTEM_NAME \"MacOS\")\n  elseif (ANDROID)\n    set(CPACK_SYSTEM_NAME \"Android\")\n  else ()\n    set(CPACK_SYSTEM_NAME \"Linux\")\n  endif ()\nelse (UNIX)\n  set(CPACK_GENERATOR \"ZIP\")\n  set(CPACK_SOURCE_GENERATOR \"ZIP\")\n  set(CPACK_SYSTEM_NAME \"Windows\")\nendif (UNIX)\n\nset(CPACK_PACKAGE_NAME \"DynamoRIO\")\nset(CPACK_PACKAGE_VENDOR \"DynamoRIO community\")\nset(CPACK_PACKAGE_DESCRIPTION_FILE \"${PROJECT_SOURCE_DIR}/README\")\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"DynamoRIO Dynamic Instrumentation Tool Platform\")\nset(CPACK_RESOURCE_FILE_LICENSE \"${PROJECT_SOURCE_DIR}/License.txt\")\nset(CPACK_RESOURCE_FILE_README \"${PROJECT_SOURCE_DIR}/README\")\n\nset(CPACK_PACKAGE_VERSION \"${VERSION_NUMBER}\")\nset(CPACK_PACKAGE_VERSION_MAJOR \"${VERSION_NUMBER_MAJOR}\")\nset(CPACK_PACKAGE_VERSION_MINOR \"${VERSION_NUMBER_MINOR}\")\nstring(REGEX REPLACE\n  \"^[0-9]+\\\\.[0-9]+\\\\.([0-9]+)\" \"\\\\1\" CPACK_PACKAGE_VERSION_PATCH \"${VERSION_NUMBER}\")\n\n# CPack tarballs do not allow setting a different name for the base\n# directory and the file: I tried a ton of CPack variables for \"install\n# dir\" and looked at the source code.  Most of the variables are for the\n# other installers (rpm, nsis).  I can hack it via\n# CPACK_TEMPORARY_PACKAGE_FILE_NAME if I hardcode the extension: but maybe\n# having the full version in the base dir is a good thing, though I'm not\n# sure about the caps.\n# We omit the -NN suffix for the build number if it is zero.\nif (\"${BUILD_NUMBER}\" STREQUAL \"0\")\n  set(PACKAGE_SUFFIX \"\")\nelse ()\n  set(PACKAGE_SUFFIX \"-${BUILD_NUMBER}\")\nendif ()\nset(CPACK_PACKAGE_FILE_NAME\n  \"DynamoRIO-${PACKAGE_PLATFORM}${CPACK_SYSTEM_NAME}${PACKAGE_SUBSYS}-${CPACK_PACKAGE_VERSION}${PACKAGE_SUFFIX}\")\nset(CPACK_PACKAGE_INSTALL_DIRECTORY \"dynamorio\")\nset(CPACK_PACKAGE_INSTALL_REGISTRY_KEY \"DynamoRIO\")\nset(CPACK_PACKAGE_RELOCATABLE \"true\")\n\ninclude(CPack)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.0498046875,
          "content": "# Contributing to DynamoRIO\n\nWe welcome contributions to the DynamoRIO project.\n\nIf you would like to contribute code to DynamoRIO, we do not require a\nformal contributor license agreement.  Contributions are implicitly assumed\nto be offered under terms of [DynamoRIO's\nlicense](https://github.com/DynamoRIO/dynamorio/blob/master/License.txt).\n\nOur wiki contains further information on policies, how to check out the\ncode, and how to add new code:\n\n- [Contribution policies and suggestions](https://dynamorio.org/page_contributing.html)\n- [Git workflow](https://dynamorio.org/page_workflow.html)\n- [Code style guide](https://dynamorio.org/page_code_style.html)\n- [Code content guidelines](https://dynamorio.org/page_code_content.html)\n- [Code reviews](https://dynamorio.org/page_code_reviews.html)\n\n## Reporting issues\n\nDynamoRIO is a tool platform, with end-user tools built on top of it.  If\nyou encounter a crash in a tool provided by a third party, please locate\nthe issue tracker for the tool you are using and report the crash there.\n\nTo report issues in DynamoRIO itself, please follow the guidelines below.\n\nFor the Summary, please follow the [guidelines in our\nbug reporting page](https://dynamorio.org/issues) and use\none of the CRASH, APP CRASH, HANG, or ASSERT keywords.\n\nPlease fill in the body of the issue with this template:\n\n```\nWhat version of DynamoRIO are you using?\n\nDoes the latest build from\nhttps://github.com/DynamoRIO/dynamorio/releases solve the problem?\n\nWhat operating system version are you running on?\n\nWhat application are you running?\n\nIs your application 32-bit or 64-bit?\n\nHow are you running the application under DynamoRIO?\n\nWhat happens when you run without any client?\n\nWhat happens when you run with debug build (\"-debug\" flag to\ndrrun/drconfig/drinject)?\n\nWhat steps will reproduce the problem?\n1.\n2.\n3.\n\nWhat is the expected output? What do you see instead?  Is this an\napplication crash, a DynamoRIO crash, a DynamoRIO assert, or a hang (see\nhttps://dynamorio.org/issues and set the title\nappropriately)?\n\n\nPlease provide any additional information below.\n```\n\n### Including code in issues\n\nThe text in an issue is interpreted as Markdown.  To include any kind of\nraw output or code that contains Markdown symbols, place it between lines\nthat consist solely of three backtics:\n<pre>\n```\nput code here\n```\n</pre>\n\n### Attaching images or files to issues\n\nPlace the attachment on Google Drive or some other location and include a\nlink to it in the issue text.\n\n## Filing feature requests\n\nBefore filing a feature request, check the documentation to ensure it is\nnot already provided by the existing interface.\n\nPlease provide the following information in an issue filed as a feature\nrequest:\n\n```\nDescribe the desired functionality and its intended usage to give some\ncontext for how it would be used.\n\nIs there currently a method for implementing this functionality using the\nexisting API and this requested feature will add convenience?  Or is there\nno method for accomplishing the desired task using the current API?\n\nDo you have any implementation in mind for this feature?\n```\n"
        },
        {
          "name": "CTestConfig.cmake",
          "type": "blob",
          "size": 2.5087890625,
          "content": "# **********************************************************\n# Copyright (c) 2020 Google, Inc.    All rights reserved.\n# Copyright (c) 2009-2010 VMware, Inc.    All rights reserved.\n# **********************************************************\n\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# * Redistributions of source code must retain the above copyright notice,\n#   this list of conditions and the following disclaimer.\n#\n# * Redistributions in binary form must reproduce the above copyright notice,\n#   this list of conditions and the following disclaimer in the documentation\n#   and/or other materials provided with the distribution.\n#\n# * Neither the name of VMware, Inc. nor the names of its contributors may be\n#   used to endorse or promote products derived from this software without\n#   specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n# ARE DISCLAIMED. IN NO EVENT SHALL VMWARE, INC. OR CONTRIBUTORS BE LIABLE\n# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\n# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH\n# DAMAGE.\n\n# Where to submit CTest results\nset(CTEST_PROJECT_NAME \"DynamoRIO\")\n\nif (SUBMIT_LOCAL)\n  # There is no longer support for \"cp\" or \"scp methods in cmake 3.14+: there is no\n  # way to copy locally using ctest_submit().  We copy ourselves manually.\n  set(CTEST_SUBMIT_URL \"none\")\n  set(CTEST_DROP_METHOD \"none\")\n  set(CTEST_TRIGGER_SITE \"\")\n  set(CTEST_DROP_SITE_USER \"\")\n  if (NOT EXISTS \"${CTEST_DROP_SITE}:${CTEST_DROP_LOCATION}\")\n    message(FATAL_ERROR\n      \"must set ${CTEST_DROP_SITE}:${CTEST_DROP_LOCATION} to an existing directory\")\n  endif ()\nelse (SUBMIT_LOCAL)\n  # Nightly runs will use sources as of this time\n  set(CTEST_NIGHTLY_START_TIME \"04:00:00 EST\")\n  set(CTEST_DROP_METHOD \"http\")\n  set(CTEST_DROP_SITE \"dynamorio.org\")\n  set(CTEST_DROP_LOCATION \"/CDash/submit.php?project=DynamoRIO\")\n  set(CTEST_DROP_SITE_CDASH TRUE)\nendif (SUBMIT_LOCAL)\n"
        },
        {
          "name": "License.txt",
          "type": "blob",
          "size": 38.4716796875,
          "content": "===========================================================================\nPrimary DynamoRIO License: BSD\n\nAll of DynamoRIO except certain portions called out in subsequent sections\non this page is licensed under the following BSD license:\n\nCopyright (c) 2010-2024 Google, Inc. licensed under the terms of the BSD.  All other rights reserved.\n\nCopyright (c) 2000-2009 VMware, Inc. licensed under the terms of the BSD.  All other rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice,\n  this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of VMware, Inc. nor the names of its contributors may be\n  used to endorse or promote products derived from this software without\n  specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL VMWARE, INC. OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGE.\n\n===========================================================================\nlibelftc License\n\nThe drsyms Extension contains libelftc code\n(http://elftoolchain.sourceforge.net/) in binary form for obtaining file\nand line information from DWARF2 debug information on Linux and\nCygwin/MinGW.  That libelftc code has the following copyright and license:\n\nCopyright (c) 2006-2012 Kai Wang, Joseph Koshy, et al.\nCopyright (c) 1990-2005 The Regents of the University of California, et al.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n\n===========================================================================\nCertain Extensions are instead under the LGPL 2.1 License\n\nThe drwrap and drutil Extensions, along with Dr. Memory and all of its\nlibraries in the Dr. Memory Framework (if packaged with DynamoRIO), are\nlicensed under the LGPL 2.1 License and NOT the BSD license used for the\nrest of DynamoRIO.  These Extensions are provided as libraries distinct\nfrom the rest of DynamoRIO.  The details of this license are below:\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation;\nversion 2.1 of the License, and no later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\nLibrary General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\n\n                  GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 2.1, February 1999\n\n Copyright (C) 1991, 1999 Free Software Foundation, Inc.\n 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts\n as the successor of the GNU Library Public License, version 2, hence\n the version number 2.1.]\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicenses are intended to guarantee your freedom to share and change\nfree software--to make sure the software is free for all its users.\n\n  This license, the Lesser General Public License, applies to some\nspecially designated software packages--typically libraries--of the\nFree Software Foundation and other authors who decide to use it.  You\ncan use it too, but we suggest you first think carefully about whether\nthis license or the ordinary General Public License is the better\nstrategy to use in any particular case, based on the explanations below.\n\n  When we speak of free software, we are referring to freedom of use,\nnot price.  Our General Public Licenses are designed to make sure that\nyou have the freedom to distribute copies of free software (and charge\nfor this service if you wish); that you receive source code or can get\nit if you want it; that you can change the software and use pieces of\nit in new free programs; and that you are informed that you can do\nthese things.\n\n  To protect your rights, we need to make restrictions that forbid\ndistributors to deny you these rights or to ask you to surrender these\nrights.  These restrictions translate to certain responsibilities for\nyou if you distribute copies of the library or if you modify it.\n\n  For example, if you distribute copies of the library, whether gratis\nor for a fee, you must give the recipients all the rights that we gave\nyou.  You must make sure that they, too, receive or can get the source\ncode.  If you link other code with the library, you must provide\ncomplete object files to the recipients, so that they can relink them\nwith the library after making changes to the library and recompiling\nit.  And you must show them these terms so they know their rights.\n\n  We protect your rights with a two-step method: (1) we copyright the\nlibrary, and (2) we offer you this license, which gives you legal\npermission to copy, distribute and/or modify the library.\n\n  To protect each distributor, we want to make it very clear that\nthere is no warranty for the free library.  Also, if the library is\nmodified by someone else and passed on, the recipients should know\nthat what they have is not the original version, so that the original\nauthor's reputation will not be affected by problems that might be\nintroduced by others.\n\n  Finally, software patents pose a constant threat to the existence of\nany free program.  We wish to make sure that a company cannot\neffectively restrict the users of a free program by obtaining a\nrestrictive license from a patent holder.  Therefore, we insist that\nany patent license obtained for a version of the library must be\nconsistent with the full freedom of use specified in this license.\n\n  Most GNU software, including some libraries, is covered by the\nordinary GNU General Public License.  This license, the GNU Lesser\nGeneral Public License, applies to certain designated libraries, and\nis quite different from the ordinary General Public License.  We use\nthis license for certain libraries in order to permit linking those\nlibraries into non-free programs.\n\n  When a program is linked with a library, whether statically or using\na shared library, the combination of the two is legally speaking a\ncombined work, a derivative of the original library.  The ordinary\nGeneral Public License therefore permits such linking only if the\nentire combination fits its criteria of freedom.  The Lesser General\nPublic License permits more lax criteria for linking other code with\nthe library.\n\n  We call this license the \"Lesser\" General Public License because it\ndoes Less to protect the user's freedom than the ordinary General\nPublic License.  It also provides other free software developers Less\nof an advantage over competing non-free programs.  These disadvantages\nare the reason we use the ordinary General Public License for many\nlibraries.  However, the Lesser license provides advantages in certain\nspecial circumstances.\n\n  For example, on rare occasions, there may be a special need to\nencourage the widest possible use of a certain library, so that it becomes\na de-facto standard.  To achieve this, non-free programs must be\nallowed to use the library.  A more frequent case is that a free\nlibrary does the same job as widely used non-free libraries.  In this\ncase, there is little to gain by limiting the free library to free\nsoftware only, so we use the Lesser General Public License.\n\n  In other cases, permission to use a particular library in non-free\nprograms enables a greater number of people to use a large body of\nfree software.  For example, permission to use the GNU C Library in\nnon-free programs enables many more people to use the whole GNU\noperating system, as well as its variant, the GNU/Linux operating\nsystem.\n\n  Although the Lesser General Public License is Less protective of the\nusers' freedom, it does ensure that the user of a program that is\nlinked with the Library has the freedom and the wherewithal to run\nthat program using a modified version of the Library.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.  Pay close attention to the difference between a\n\"work based on the library\" and a \"work that uses the library\".  The\nformer contains code derived from the library, whereas the latter must\nbe combined with the library in order to run.\n\n                  GNU LESSER GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any software library or other\nprogram which contains a notice placed by the copyright holder or\nother authorized party saying it may be distributed under the terms of\nthis Lesser General Public License (also called \"this License\").\nEach licensee is addressed as \"you\".\n\n  A \"library\" means a collection of software functions and/or data\nprepared so as to be conveniently linked with application programs\n(which use some of those functions and data) to form executables.\n\n  The \"Library\", below, refers to any such software library or work\nwhich has been distributed under these terms.  A \"work based on the\nLibrary\" means either the Library or any derivative work under\ncopyright law: that is to say, a work containing the Library or a\nportion of it, either verbatim or with modifications and/or translated\nstraightforwardly into another language.  (Hereinafter, translation is\nincluded without limitation in the term \"modification\".)\n\n  \"Source code\" for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control compilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning a program using the Library is not restricted, and output from\nsuch a program is covered only if its contents constitute a work based\non the Library (independent of the use of the Library in a tool for\nwriting it).  Whether that is true depends on what the Library does\nand what the program that uses the Library does.\n\n  1. You may copy and distribute verbatim copies of the Library's\ncomplete source code as you receive it, in any medium, provided that\nyou conspicuously and appropriately publish on each copy an\nappropriate copyright notice and disclaimer of warranty; keep intact\nall the notices that refer to this License and to the absence of any\nwarranty; and distribute a copy of this License along with the\nLibrary.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\n  2. You may modify your copy or copies of the Library or any portion\nof it, thus forming a work based on the Library, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) The modified work must itself be a software library.\n\n    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n    table of data to be supplied by an application program that uses\n    the facility, other than as an argument passed when the facility\n    is invoked, then you must make a good faith effort to ensure that,\n    in the event an application does not supply such function or\n    table, the facility still operates, and performs whatever part of\n    its purpose remains meaningful.\n\n    (For example, a function in a library to compute square roots has\n    a purpose that is entirely well-defined independent of the\n    application.  Therefore, Subsection 2d requires that any\n    application-supplied function or table used by this function must\n    be optional: if the application does not supply it, the square\n    root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Library,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Library, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote\nit.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\nwith the Library (or with a work based on the Library) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may opt to apply the terms of the ordinary GNU General Public\nLicense instead of this License to a given copy of the Library.  To do\nthis, you must alter all the notices that refer to this License, so\nthat they refer to the ordinary GNU General Public License, version 2,\ninstead of to this License.  (If a newer version than version 2 of the\nordinary GNU General Public License has appeared, then you can specify\nthat version instead if you wish.)  Do not make any other change in\nthese notices.\n\n  Once this change is made in a given copy, it is irreversible for\nthat copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\nderivative of it, under Section 2) in object code or executable form\nunder the terms of Sections 1 and 2 above provided that you accompany\nit with the complete corresponding machine-readable source code, which\nmust be distributed under the terms of Sections 1 and 2 above on a\nmedium customarily used for software interchange.\n\n  If distribution of object code is made by offering access to copy\nfrom a designated place, then offering equivalent access to copy the\nsource code from the same place satisfies the requirement to\ndistribute the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  5. A program that contains no derivative of any portion of the\nLibrary, but is designed to work with the Library by being compiled or\nlinked with it, is called a \"work that uses the Library\".  Such a\nwork, in isolation, is not a derivative work of the Library, and\ntherefore falls outside the scope of this License.\n\n  However, linking a \"work that uses the Library\" with the Library\ncreates an executable that is a derivative of the Library (because it\ncontains portions of the Library), rather than a \"work that uses the\nlibrary\".  The executable is therefore covered by this License.\nSection 6 states terms for distribution of such executables.\n\n  When a \"work that uses the Library\" uses material from a header file\nthat is part of the Library, the object code for the work may be a\nderivative work of the Library even though the source code is not.\nWhether this is true is especially significant if the work can be\nlinked without the Library, or if the work is itself a library.  The\nthreshold for this to be true is not precisely defined by law.\n\n  If such an object file uses only numerical parameters, data\nstructure layouts and accessors, and small macros and small inline\nfunctions (ten lines or less in length), then the use of the object\nfile is unrestricted, regardless of whether it is legally a derivative\nwork.  (Executables containing this object code plus portions of the\nLibrary will still fall under Section 6.)\n\n  Otherwise, if the work is a derivative of the Library, you may\ndistribute the object code for the work under the terms of Section 6.\nAny executables containing that work also fall under Section 6,\nwhether or not they are linked directly with the Library itself.\n\n  6. As an exception to the Sections above, you may also combine or\nlink a \"work that uses the Library\" with the Library to produce a\nwork containing portions of the Library, and distribute that work\nunder terms of your choice, provided that the terms permit\nmodification of the work for the customer's own use and reverse\nengineering for debugging such modifications.\n\n  You must give prominent notice with each copy of the work that the\nLibrary is used in it and that the Library and its use are covered by\nthis License.  You must supply a copy of this License.  If the work\nduring execution displays copyright notices, you must include the\ncopyright notice for the Library among them, as well as a reference\ndirecting the user to the copy of this License.  Also, you must do one\nof these things:\n\n    a) Accompany the work with the complete corresponding\n    machine-readable source code for the Library including whatever\n    changes were used in the work (which must be distributed under\n    Sections 1 and 2 above); and, if the work is an executable linked\n    with the Library, with the complete machine-readable \"work that\n    uses the Library\", as object code and/or source code, so that the\n    user can modify the Library and then relink to produce a modified\n    executable containing the modified Library.  (It is understood\n    that the user who changes the contents of definitions files in the\n    Library will not necessarily be able to recompile the application\n    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n    the user installs one, as long as the modified version is\n    interface-compatible with the version that the work was made with.\n\n    c) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n    d) If distribution of the work is made by offering access to copy\n    from a designated place, offer equivalent access to copy the above\n    specified materials from the same place.\n\n    e) Verify that the user has already received a copy of these\n    materials or that you have already sent this user a copy.\n\n  For an executable, the required form of the \"work that uses the\nLibrary\" must include any data and utility programs needed for\nreproducing the executable from it.  However, as a special exception,\nthe materials to be distributed need not include anything that is\nnormally distributed (in either source or binary form) with the major\ncomponents (compiler, kernel, and so on) of the operating system on\nwhich the executable runs, unless that component itself accompanies\nthe executable.\n\n  It may happen that this requirement contradicts the license\nrestrictions of other proprietary libraries that do not normally\naccompany the operating system.  Such a contradiction means you cannot\nuse both them and the Library together in an executable that you\ndistribute.\n\n  7. You may place library facilities that are a work based on the\nLibrary side-by-side in a single library together with other library\nfacilities not covered by this License, and distribute such a combined\nlibrary, provided that the separate distribution of the work based on\nthe Library and of the other library facilities is otherwise\npermitted, and provided that you do these two things:\n\n    a) Accompany the combined library with a copy of the same work\n    based on the Library, uncombined with any other library\n    facilities.  This must be distributed under the terms of the\n    Sections above.\n\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\nattempt otherwise to copy, modify, sublicense, link with, or\ndistribute the Library is void, and will automatically terminate your\nrights under this License.  However, parties who have received copies,\nor rights, from you under this License will not have their licenses\nterminated so long as such parties remain in full compliance.\n\n  9. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Library or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Library (or any work based on the\nLibrary), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties with\nthis License.\n\n  11. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any\nparticular circumstance, the balance of the section is intended to apply,\nand the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  12. If the distribution and/or use of the Library is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Library under this License may add\nan explicit geographical distribution limitation excluding those countries,\nso that distribution is permitted only in or among countries not thus\nexcluded.  In such case, this License incorporates the limitation as if\nwritten in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Lesser General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Library\nspecifies a version number of this License which applies to it and\n\"any later version\", you have the option of following the terms and\nconditions either of that version or of any later version published by\nthe Free Software Foundation.  If the Library does not specify a\nlicense version number, you may choose any version ever published by\nthe Free Software Foundation.\n\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\nSoftware Foundation; we sometimes make exceptions for this.  Our\ndecision will be guided by the two goals of preserving the free status\nof all derivatives of our free software and of promoting the sharing\nand reuse of software generally.\n\n                            NO WARRANTY\n\n  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO\nWARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\nEXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\nOTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY\nKIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\nLIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\nTHE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\nWRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\nAND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU\nFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\nCONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\nLIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\nRENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\nSUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n===========================================================================\nThe drsyms Extension is linked with elfutils libraries under the LGPL 3 License\n\nThe drsyms Extension on Linux is linked with static libraries from the\nelfutils project.  The source code for elfutils is available at\ngit://sourceware.org/git/elfutils.git.  We choose the LGPL 3 license\n(elfutils offers that as a choice) for our use of these libraries.  The\ndrsyms Extension and the elfutils static libraries are provided as\nlibraries distinct from the rest of DynamoRIO.  The details of the LGPL 3\nlicense are below:\n\n                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n\n===========================================================================\nThe valgrind.h and memcheck.h files in third_party/valgrind/ are also BSD\nbut with 4 clauses:\n\n  Copyright (C) 2000-2013 Julian Seward.  All rights reserved.\n\n   Redistribution and use in source and binary forms, with or without\n   modification, are permitted provided that the following conditions\n   are met:\n\n   1. Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n\n   2. The origin of this software must not be misrepresented; you must\n      not claim that you wrote the original software.  If you use this\n      software in a product, an acknowledgment in the product\n      documentation would be appreciated but is not required.\n\n   3. Altered source versions must be plainly marked as such, and must\n      not be misrepresented as being the original software.\n\n   4. The name of the author may not be used to endorse or promote\n      products derived from this software without specific prior written\n      permission.\n\n   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS\n   OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n   ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY\n   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n===========================================================================\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 5.314453125,
          "content": "Copyright (c) 2010-2024 Google, Inc. licensed under the terms of the BSD.  All other rights reserved.\nCopyright (c) 2000-2010 VMware, Inc. licensed under the terms of the BSD.  All other rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice,\n  this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of VMware, Inc. nor the names of its contributors may be\n  used to endorse or promote products derived from this software without\n  specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL VMWARE, INC. OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGE.\n\n**********************************************************\nAbout DynamoRIO\n\nDynamoRIO is a runtime code manipulation system that supports code\ntransformations on any part of a program, while it executes. DynamoRIO\nexports an interface for building dynamic tools for a wide variety of uses:\nprogram analysis and understanding, profiling, instrumentation,\noptimization, translation, etc. Unlike many dynamic tool systems, DynamoRIO\nis not limited to insertion of callouts/trampolines and allows arbitrary\nmodifications to application instructions via a powerful IA-32/AMD64/ARM/AArch64\ninstruction manipulation library. DynamoRIO provides efficient,\ntransparent, and comprehensive manipulation of unmodified applications\nrunning on stock operating systems (Windows, Linux, or Android) and commodity\nIA-32, AMD64, ARM, and AArch64 hardware.\n\nThe DynamoRIO home page:\n\n  http://dynamorio.org/\n\n************************************************************\nQuickstart instructions for running DynamoRIO:\n\n--------------------------------------------------\nOn Linux:\n\nTo run the application with a DynamoRIO sample client:\n32-bit:\n  % bin32/drrun -c samples/bin32/libbbsize.so -- ls\n64-bit:\n  % bin64/drrun -c samples/bin64/libbbsize.so -- ls\n\nTo run the application with a DynamoRIO-based tool:\n32-bit:\n  % bin32/drrun -t drmemtrace -- ls\n64-bit\n  % bin64/drrun -t drmemtrace -- ls\n\nTo run the Dr. Memory tool which is included in release packages:\n  % bin32/drrun -t drmemory -- <my-32-bit-app> <args-to-app>\n\nFor additional options and to list available tools for -t:\n  % bin32/drrun -help\n\nFor full control over child processes use a two-step process:\nfirst configure with bin32/drconfig and then invoke the parent\nprocess with bin32/drinject.\n\n--------------------------------------------------\nOn Windows, with examples run from a cygwin shell (for cmd shell replace\nthe first slash with a backward slash: e.g., bin32\\drrun.exe):\n\nMethod 1: directly invoke an application:\nTo run the application with a DynamoRIO sample client:\n32-bit\n  % bin32/drrun.exe -c samples/bin32/bbsize.dll -- notepad\n64-bit\n  % bin64/drrun.exe -c samples/bin64/bbsize.dll -- notepad\n\nTo run the application with a DynamoRIO-based tool:\n32-bit\n  % bin32/drrun.exe -t drstrace -- notepad\n64-bit\n  % bin64/drrun.exe -t drstrace -- notepad\n\nTo run the Dr. Memory tool which is included in release packages:\n  % bin32/drrun.exe -t drmemory -- <my-32-bit-app> <args-to-app>\n\nFor additional options and to list available tools for -t:\n  % bin32/drrun.exe -help\n\nMethod 2: configure an application and launch it separately.\nThis requires administrative privileges:\n32-bit:\n  % bin32/drconfig.exe -reg notepad.exe -syswide_on -c samples/bin32/bbsize.dll\n64-bit:\n  % bin64/drconfig.exe -reg notepad.exe -syswide_on -c samples/bin64/bbsize.dll\nNow run the application however you normally would, with the mouse or from\nthe command line.  From a cygwin shell this will run 32-bit notepad:\n  % cmd /c start notepad\n\nNow close notepad and a messagebox should pop up produced by the bbsize client.\n\nNote that if you use cygwin unzip to extract files from the release package\n.zip file, you'll need to mark all the .dll and .exe files as ugo+rx in\norder to execute them.\n\n************************************************************\nInstructions for building:\n\nIf you are building from source, please see the DynamoRIO site for\ninformation on the required tools on both Windows and Linux:\n\nhttps://dynamorio.org/page_building.html\n\n************************************************************\nGetting help and reporting bugs:\n\nQuery the DynamoRIO users group mailing list/discussion forum:\n\n  http://groups.google.com/group/dynamorio-users\n\nUse the Issue Tracker:\n\n  http://dynamorio.org/issues\n\n************************************************************\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.04296875,
          "content": "# DynamoRIO\n\n![DynamoRIO logo](http://www.burningcutlery.com/images/dynamorio/drlogo.png?)\n\n## About DynamoRIO\n\nDynamoRIO is a runtime code manipulation system that supports code\ntransformations on any part of a program, while it executes. DynamoRIO\nexports an interface for building dynamic tools for a wide variety of uses:\nprogram analysis and understanding, profiling, instrumentation,\noptimization, translation, etc. Unlike many dynamic tool systems, DynamoRIO\nis not limited to insertion of callouts/trampolines and allows arbitrary\nmodifications to application instructions via a powerful IA-32/AMD64/ARM/AArch64\ninstruction manipulation library. DynamoRIO provides efficient,\ntransparent, and comprehensive manipulation of unmodified applications\nrunning on stock operating systems (Windows, Linux, or Android) and commodity\nIA-32, AMD64, ARM, and AArch64 hardware.  Mac OSX support is in progress.\n\n## Existing DynamoRIO-based tools\n\nDynamoRIO is the basis for some well-known external tools:\n- The [Arm Instruction Emulator (ArmIE)](https://developer.arm.com/Tools%20and%20Software/Arm%20Instruction%20Emulator)\n- [WinAFL](https://github.com/googleprojectzero/winafl), the Windows fuzzing tool, as an instrumentation and code coverage engine\n- The fine-grained profiler for ARM [DrCCTProf](https://xl10.github.io/blog/drcctprof.html)\n- The portable and efficient framework for fine-grained value profilers [VClinic](https://github.com/VClinic/VClinic)\n- The sampling-based sanitizer framework [GWPSan](https://github.com/google/gwpsan)\n\nTools built on DynamoRIO and available in the [release package](https://dynamorio.org/page_download) include:\n\n- The memory debugging tool [Dr. Memory](http://drmemory.org)\n- The tracing and analysis framework [drmemtrace](https://dynamorio.org/page_drcachesim.html) with multiple tools that operate on both online (with multi-process support) and offline instruction and memory address traces:\n  - The cache simulator [drcachesim](https://dynamorio.org/sec_drcachesim_tools.html#sec_tool_cache_sim)\n  - [TLB simulation](https://dynamorio.org/sec_drcachesim_tools.html#sec_tool_TLB_sim)\n  - [Reuse distance](https://dynamorio.org/sec_drcachesim_tools.html#sec_tool_reuse_distance)\n  - [Reuse time](https://dynamorio.org/sec_drcachesim_tools.html#sec_tool_reuse_time)\n  - [Opcode mix](https://dynamorio.org/sec_drcachesim_tools.html#sec_tool_opcode_mix)\n  - [Function call tracing](https://dynamorio.org/sec_drcachesim_tools.html#sec_tool_func_view)\n- The legacy processor emulator\n  [drcpusim](https://dynamorio.org/page_drcpusim.html)\n- The \"strace for Windows\" tool [drstrace](https://drmemory.org/page_drstrace.html)\n- The code coverage tool [drcov](https://dynamorio.org/page_drcov.html)\n- The library tracing tool [drltrace](http://dynamorio.org/page_drltrace.html)\n- The memory address tracing tool [memtrace](https://github.com/DynamoRIO/dynamorio/blob/master/api/samples/memtrace_x86.c) ([drmemtrace](https://dynamorio.org/page_drcachesim.html)'s offline traces are faster with more surrounding infrastructure, but this is a simpler starting point for customized memory address tracing)\n- The memory value tracing tool [memval](https://github.com/DynamoRIO/dynamorio/blob/master/api/samples/memval_simple.c)\n- The instruction tracing tool [instrace](https://github.com/DynamoRIO/dynamorio/blob/master/api/samples/instrace_x86.c) ([drmemtrace](https://dynamorio.org/page_drcachesim.html)'s offline traces are faster with more surrounding infrastructure, but this is a simpler starting point for customized instruction tracing)\n- The basic block tracing tool [bbbuf](https://github.com/DynamoRIO/dynamorio/blob/master/api/samples/bbbuf.c)\n- The instruction counting tool [inscount](https://github.com/DynamoRIO/dynamorio/blob/master/api/samples/inscount.cpp)\n- The dynamic fuzz testing tool [Dr. Fuzz](http://drmemory.org/page_drfuzz.html)\n- The disassembly tool [drdisas](https://dynamorio.org/page_drdisas.html)\n- And more, including opcode counts, branch instrumentation, etc.: see [API samples](https://dynamorio.org/API_samples.html)\n\n## Building your own custom tools\n\nDynamoRIO's powerful API abstracts away the details of the underlying\ninfrastructure and allows the tool builder to concentrate on analyzing or\nmodifying the application's runtime code stream.  API documentation is\nincluded in the release package and can also be [browsed\nonline](http://dynamorio.org/page_user_docs.html).  [Slides from our past tutorials are\nalso available](https://dynamorio.org/page_slides.html).\n\n## Downloading DynamoRIO\n\nDynamoRIO is available free of charge as a [binary package for both Windows\nand Linux](https://dynamorio.org/page_download.html).\nDynamoRIO's [source code is\navailable](https://github.com/DynamoRIO/dynamorio) primarily under a [BSD\nlicense](https://dynamorio.org/page_license.html).\n\n## Obtaining Help\n\nUse the [discussion list](http://groups.google.com/group/DynamoRIO-Users)\nto ask questions.\n\nTo report a bug, use the [issue\ntracker](https://github.com/DynamoRIO/dynamorio/issues).\n\nSee also [the DynamoRIO home page](http://dynamorio.org/): [http://dynamorio.org/](http://dynamorio.org/)\n"
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "clients",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "ext",
          "type": "tree",
          "content": null
        },
        {
          "name": "libutil",
          "type": "tree",
          "content": null
        },
        {
          "name": "make",
          "type": "tree",
          "content": null
        },
        {
          "name": "suite",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}