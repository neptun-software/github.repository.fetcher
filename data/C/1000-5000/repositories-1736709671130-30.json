{
  "metadata": {
    "timestamp": 1736709671130,
    "page": 30,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "arthenica/ffmpeg-kit",
      "stars": 4714,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0400390625,
          "content": "/.tmp/\n/*.log\n/prebuilt/\n.DS_Store\n.idea\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.1357421875,
          "content": "# Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make\nparticipation in our project and our community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance,\nrace, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take\nappropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits,\nissues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any\ncontributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the\nproject or its community. Examples of representing a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed representative at an online or\noffline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at\n`open-source@arthenica.com`. All complaints will be reviewed and investigated and will result in a response that is\ndeemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with\nregard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at\n[https://contributor-covenant.org/version/1/4][version].\n\n[homepage]: https://contributor-covenant.org\n[version]: https://contributor-covenant.org/version/1/4/"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.451171875,
          "content": "# How to contribute\n\nThanks for taking the time to contribute! :heart:\n\nThe following is a set of guidelines for contributing to `FFmpegKit`!\n\n## Project Resources\n\n* [Wiki](https://github.com/arthenica/ffmpeg-kit/wiki) includes most detailed documentation we have\n* [FFmpegKit Feature Roadmap](https://github.com/orgs/arthenica/projects/1) shows our long term plans for the project\n* [How To Get Help](https://github.com/arthenica/ffmpeg-kit/issues/215) details what you need to do if you need help\n* [Discussions](https://github.com/arthenica/ffmpeg-kit/discussions) is where we expect you to ask questions\n* [Issues](https://github.com/arthenica/ffmpeg-kit/issues) is for bugs and issues\n\n## Reporting Bugs\n\nBugs are tracked as [GitHub issues](https://github.com/arthenica/ffmpeg-kit/issues). We have a `Bug report` issue \ntemplate which includes all the fields we need to see to confirm a bug and work on it. Try to fill out all template\nfields, especially the logs field and steps to reproduce the bug. Reproducing a bug is crucial to be able to fix it.\n\n### FFmpeg Bugs\n\n`FFmpegKit` does not modify the original `FFmpeg` source code. Therefore, if an `FFmpeg` feature or component is not \nworking as expected, most probably that problem comes from `FFmpeg`. If you encounter those kind of errors, we expect \nyou to install the desktop version of `FFmpeg` and test that feature or component there. If it fails on desktop too \nthen it must be reported to [FFmpeg bug tracker](https://trac.ffmpeg.org/). If not, then it is an `FFmpegKit` bug. \nCreate an issue and state that this bug doesn't exist on the `desktop` version of the same `FFmpeg` version.\n\n## Feature Requests\n\nBefore creating a feature request, please check our long term plan for the project, which is visible under the\n[FFmpegKit Feature Roadmap](https://github.com/orgs/arthenica/projects/1). Then create an issue and fill out the\n`Feature request` issue template and provide as many details as possible.\n\n### External Library Requests\n\n`FFmpeg` supports a long list of `external` libraries. In `FFmpegKit` we did our best to support most of them. \nHowever, there are still many libraries that cannot be used within `FFmpegKit`.\n\nUnfortunately, cross compilation is a challenging process. Because of that, we don't take new external library \nrequests. Though, we are open to PRs. If someone wants to contribute we'll be happy to review their changes that\nenables another external library in `FFmpeg`. \n\n## Pull Requests\n\nAlthough it is not mandatory, our suggestion is to first discuss the change you wish to make via an issue or a \ndiscussion. `FFmpegKit` is a complex project. There are many things that must be considered when implementing a\nfeature.\n\n`FFmpegKit` has a unified API, which means we provide the same functionality on all platforms. Therefore, we expect\nthe same from the pull requests as well. A feature must be implemented for all platforms unless it is a platform specific\nfeature.\n\nEnsure that your changes rely on official documented methods and test your changes using the test applications we have\nunder the [ffmpeg-kit-test](https://github.com/arthenica/ffmpeg-kit-test) repository.\n\n`main` branch of `FFmpegKit` includes only the latest released source code. Therefore, please open your pull requests\nagainst the development branches (`development` for native platforms, `development-react-native` for\n`react-native`, `development-flutter` for `flutter`). \n\nNote that PRs about styling and cosmetic changes will not be accepted.\n\nThanks!"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 7.4716796875,
          "content": "                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.0634765625,
          "content": "# FFmpegKit ![GitHub release](https://img.shields.io/badge/release-v6.0-blue.svg) ![Maven Central](https://img.shields.io/maven-central/v/com.arthenica/ffmpeg-kit-min) ![CocoaPods](https://img.shields.io/cocoapods/v/ffmpeg-kit-ios-min) ![pub](https://img.shields.io/pub/v/ffmpeg_kit_flutter.svg) ![npm](https://img.shields.io/npm/v/ffmpeg-kit-react-native.svg)\n\n## Notice\nFFmpegKit has been officially retired. There will be no further `ffmpeg-kit` releases. \n\nAll previously released `ffmpeg-kit` binaries will be removed according to the following schedule.\n\n| FFmpegKit Version |  Available Until   |\n|:-----------------:|:------------------:|\n|   Less than 6.0   | February 1st, 2025 |\n|        6.0        |  April 1st, 2025   |\n\nThank you for your support and interest in this project.\n\n<img src=\"https://github.com/arthenica/ffmpeg-kit/blob/main/docs/assets/ffmpeg-kit-icon-v9.png\" width=\"240\">\n\n`FFmpegKit` is a collection of tools to use `FFmpeg`<sup>1</sup> in `Android`, `iOS`, `Linux`, `macOS`, `tvOS`, `Flutter` and `React Native` applications.\n\nIt includes scripts to build `FFmpeg` native libraries, a wrapper library to run `FFmpeg`/`FFprobe` commands in\n applications and 8 prebuilt binary packages available at [Github](https://github.com/arthenica/ffmpeg-kit/releases),\n [Maven Central](https://search.maven.org), [CocoaPods](https://cocoapods.org), [pub](https://pub.dev) and [npm](https://www.npmjs.com).\n\n### 1. Features\n- Scripts to build FFmpeg native libraries\n- `FFmpegKit` wrapper library to run `FFmpeg`/`FFprobe` commands in applications\n- Supports native platforms: Android, iOS, Linux, macOS and tvOS\n- Supports hybrid platforms: Flutter, React Native\n- Based on FFmpeg `v4.5-dev` or later with optional system and external libraries\n- 8 prebuilt binary packages available at [Github](https://github.com/arthenica/ffmpeg-kit/releases), [Maven Central](https://search.maven.org), [CocoaPods](https://cocoapods.org), [pub](https://pub.dev) and [npm](https://www.npmjs.com)\n- Licensed under `LGPL 3.0` by default, `GPL v3.0` if GPL licensed libraries are enabled\n\n### 2. Android\n\nSee [Android](android) to learn more about `FFmpegKit` for `Android`.\n\n### 3. iOS, macOS, tvOS\n\nSee [Apple](apple) to use `FFmpegKit` on `Apple` platforms (`iOS`, `macOS`, `tvOS`).\n\n### 4. Flutter\n\nSee [Flutter](flutter/flutter) to learn more about `FFmpegKit` for `Flutter`.\n\n### 5. Linux\n\nSee [Linux](linux) to learn more about `FFmpegKit` for `Linux`.\n\n### 6. React Native\n\nSee [React Native](react-native) to learn more about `FFmpegKit` for `React Native`.\n\n### 7. Build Scripts\n\nUse `android.sh`, `ios.sh`, `linux.sh`, `macos.sh` and `tvos.sh` to build `FFmpegKit` for each native platform.\n\nAll scripts support additional options to enable optional libraries and disable platform architectures. See\n[Building](https://github.com/arthenica/ffmpeg-kit/wiki/Building) wiki page for the details.\n\n### 8. FFmpegKit Library\n\n`FFmpegKit` is a wrapper library that allows you to easily run `FFmpeg`/`FFprobe` commands in applications. It \nprovides additional features on top of `FFmpeg` to enable platform specific resources, control how commands are \nexecuted and how the results are handled.\n\n`Android` library of `FFmpegKit` has a `Java` API, `Apple` libraries (`iOS`, `macOS`, `tvOS`) have an `Objective-C`\n API, `Flutter` library comes with a `Dart` API, `Linux` library has a `C++` API and `React Native` library provides\na `JavaScript` API with `Typescript` definitions, which are identical in terms of features and capabilities.\n\n### 9. Packages\n\nThere are eight different `ffmpeg-kit` packages distributed on \n[Github](https://github.com/arthenica/ffmpeg-kit/releases), \n[Maven Central](https://search.maven.org), [CocoaPods](https://cocoapods.org), [pub](https://pub.dev) and\n [npm](https://www.npmjs.com).\nBelow you can see which system libraries and external libraries are enabled in each one of them.\n\nPlease remember that some parts of `FFmpeg` are licensed under the `GPL` and only `GPL` licensed `ffmpeg-kit` packages \ninclude them.\n\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\"><sup>min</sup></th>\n<th align=\"center\"><sup>min-gpl</sup></th>\n<th align=\"center\"><sup>https</sup></th>\n<th align=\"center\"><sup>https-gpl</sup></th>\n<th align=\"center\"><sup>audio</sup></th>\n<th align=\"center\"><sup>video</sup></th>\n<th align=\"center\"><sup>full</sup></th>\n<th align=\"center\"><sup>full-gpl</sup></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><sup>external libraries</sup></td>\n<td align=\"center\">-</td>\n<td align=\"center\"><sup>vid.stab</sup><br><sup>x264</sup><br><sup>x265</sup><br><sup>xvidcore</sup></td>\n<td align=\"center\"><sup>gmp</sup><br><sup>gnutls</sup></td>\n<td align=\"center\"><sup>gmp</sup><br><sup>gnutls</sup><br><sup>vid.stab</sup><br><sup>x264</sup><br><sup>x265</sup><br><sup>xvidcore</sup></td>\n<td align=\"center\"><sup>lame</sup><br><sup>libilbc</sup><br><sup>libvorbis</sup><br><sup>opencore-amr</sup><br><sup>opus</sup><br><sup>shine</sup><br><sup>soxr</sup><br><sup>speex</sup><br><sup>twolame</sup><br><sup>vo-amrwbenc</sup></td>\n<td align=\"center\"><sup>dav1d</sup><br><sup>fontconfig</sup><br><sup>freetype</sup><br><sup>fribidi</sup><br><sup>kvazaar</sup><br><sup>libass</sup><br><sup>libiconv</sup><br><sup>libtheora</sup><br><sup>libvpx</sup><br><sup>libwebp</sup><br><sup>snappy</sup><br><sup>zimg</sup></td>\n<td align=\"center\"><sup>dav1d</sup><br><sup>fontconfig</sup><br><sup>freetype</sup><br><sup>fribidi</sup><br><sup>gmp</sup><br><sup>gnutls</sup><br><sup>kvazaar</sup><br><sup>lame</sup><br><sup>libass</sup><br><sup>libiconv</sup><br><sup>libilbc</sup><br><sup>libtheora</sup><br><sup>libvorbis</sup><br><sup>libvpx</sup><br><sup>libwebp</sup><br><sup>libxml2</sup><br><sup>opencore-amr</sup><br><sup>opus</sup><br><sup>shine</sup><br><sup>snappy</sup><br><sup>soxr</sup><br><sup>speex</sup><br><sup>twolame</sup><br><sup>vo-amrwbenc</sup><br><sup>zimg</sup></td>\n<td align=\"center\"><sup>dav1d</sup><br><sup>fontconfig</sup><br><sup>freetype</sup><br><sup>fribidi</sup><br><sup>gmp</sup><br><sup>gnutls</sup><br><sup>kvazaar</sup><br><sup>lame</sup><br><sup>libass</sup><br><sup>libiconv</sup><br><sup>libilbc</sup><br><sup>libtheora</sup><br><sup>libvorbis</sup><br><sup>libvpx</sup><br><sup>libwebp</sup><br><sup>libxml2</sup><br><sup>opencore-amr</sup><br><sup>opus</sup><br><sup>shine</sup><br><sup>snappy</sup><br><sup>soxr</sup><br><sup>speex</sup><br><sup>twolame</sup><br><sup>vid.stab</sup><br><sup>vo-amrwbenc</sup><br><sup>x264</sup><br><sup>x265</sup><br><sup>xvidcore</sup><br><sup>zimg</sup></td>\n</tr>\n<tr>\n<td align=\"center\"><sup>android system libraries</sup></td>\n<td align=\"center\" colspan=8><sup>zlib</sup><br><sup>MediaCodec</sup></td>\n</tr>\n<tr>\n<td align=\"center\"><sup>ios system libraries</sup></td>\n<td align=\"center\" colspan=8><sup>bzip2</sup><br><sup>AudioToolbox</sup><br><sup>AVFoundation</sup><br><sup>iconv</sup><br><sup>VideoToolbox</sup><br><sup>zlib</sup></td>\n</tr>\n<tr>\n<tr>\n<td align=\"center\"><sup>macos system libraries</sup></td>\n<td align=\"center\" colspan=8><sup>bzip2</sup><br><sup>AudioToolbox</sup><br><sup>AVFoundation</sup><br><sup>Core Image</sup><br><sup>iconv</sup><br><sup>OpenCL</sup><br><sup>OpenGL</sup><br><sup>VideoToolbox</sup><br><sup>zlib</sup></td>\n</tr>\n<tr>\n<td align=\"center\"><sup>tvos system libraries</sup></td>\n<td align=\"center\" colspan=8><sup>bzip2</sup><br><sup>AudioToolbox</sup><br><sup>iconv</sup><br><sup>VideoToolbox</sup><br><sup>zlib</sup></td>\n</tr>\n</tbody>\n</table>\n\n - `AVFoundation` is not available on `tvOS`\n - `VideoToolbox` is not available on LTS releases of `iOS` and `tvOS`\n - `zimg` is supported since `v4.5.1`\n\n### 10. Versions\n\n`FFmpegKit` binaries generated use the same major and minor version numbers as the upstream `FFmpeg` project. The\nthird and last number in the version string, if exists, is specific to `FFmpegKit`. It shows different releases from\nthe same `FFmpeg` release branch. \n\n`dev` part in the version string indicates that `FFmpeg` source code is cloned from the `FFmpeg` `master` branch and\nthe exact version number of `FFmpeg` is obtained using the `git describe --tags` command.\n\n|    Platforms     |                                 FFmpegKit Version                                 | FFmpeg Version | Release Date |\n|:----------------:|:---------------------------------------------------------------------------------:|:--------------:|:------------:|\n|     Flutter      |   [6.0.3](https://github.com/arthenica/ffmpeg-kit/releases/tag/flutter.v6.0.3)    |      6.0       | Sep 19, 2023 |\n|   React Native   | [6.0.2](https://github.com/arthenica/ffmpeg-kit/releases/tag/react.native.v6.0.2) |      6.0       | Sep 19, 2023 |\n|     Flutter      |   [6.0.2](https://github.com/arthenica/ffmpeg-kit/releases/tag/flutter.v6.0.2)    |      6.0       | Sep 03, 2023 |\n|   React Native   | [6.0.1](https://github.com/arthenica/ffmpeg-kit/releases/tag/react.native.v6.0.1) |      6.0       | Sep 03, 2023 |\n|     Flutter      |   [6.0.1](https://github.com/arthenica/ffmpeg-kit/releases/tag/flutter.v6.0.1)    |      6.0       | Sep 03, 2023 |\n|   React Native   | [6.0.0](https://github.com/arthenica/ffmpeg-kit/releases/tag/react.native.v6.0.0) |      6.0       | Aug 27, 2023 |\n|     Flutter      |   [6.0.0](https://github.com/arthenica/ffmpeg-kit/releases/tag/flutter.v6.0.0)    |      6.0       | Aug 27, 2023 |\n|      Android<br>Apple       |         [6.0](https://github.com/arthenica/ffmpeg-kit/releases/tag/v6.0)          |      6.0       | Aug 21, 2023 |\n|   React Native   | [5.1.0](https://github.com/arthenica/ffmpeg-kit/releases/tag/react.native.v5.1.0) |     5.1.2      | Oct 02, 2022 |\n|     Flutter      |   [5.1.0](https://github.com/arthenica/ffmpeg-kit/releases/tag/flutter.v5.1.0)    |     5.1.2      | Oct 02, 2022 |\n|     Android<br>Apple      |         [5.1](https://github.com/arthenica/ffmpeg-kit/releases/tag/v5.1)          |     5.1.2      | Sep 29, 2022 |\n|   React Native   | [4.5.2](https://github.com/arthenica/ffmpeg-kit/releases/tag/react.native.v4.5.2) |  4.5-dev-3393  | May 25, 2022 |\n|     Flutter      |   [4.5.1](https://github.com/arthenica/ffmpeg-kit/releases/tag/flutter.v4.5.1)    |  4.5-dev-3393  | Jan 02, 2022 |\n|   React Native   | [4.5.1](https://github.com/arthenica/ffmpeg-kit/releases/tag/react.native.v4.5.1) |  4.5-dev-3393  | Jan 02, 2022 |\n|     Android      |       [4.5.1](https://github.com/arthenica/ffmpeg-kit/releases/tag/v4.5.1)        |  4.5-dev-3393  | Jan 01, 2022 |\n|      Apple       |       [4.5.1](https://github.com/arthenica/ffmpeg-kit/releases/tag/v4.5.1)        |  4.5-dev-3393  | Dec 30, 2021 |\n|     Flutter      |   [4.5.0](https://github.com/arthenica/ffmpeg-kit/releases/tag/flutter.v4.5.0)    |  4.5-dev-2008  | Oct 05, 2021 |\n|   React Native   | [4.5.0](https://github.com/arthenica/ffmpeg-kit/releases/tag/react.native.v4.5.0) |  4.5-dev-2008  | Oct 01, 2021 |\n| Android<br>Apple |         [4.5](https://github.com/arthenica/ffmpeg-kit/releases/tag/v4.5)          |  4.5-dev-2008  | Sep 18, 2021 |\n| Android<br>Apple |         [4.4](https://github.com/arthenica/ffmpeg-kit/releases/tag/v4.4)          |  4.4-dev-3015  | Mar 03, 2021 |\n\n### 11. LTS Releases\n\n`FFmpegKit` binaries are published in two release variants: `Main Release` and `LTS Release`. \n\n- Main releases include complete functionality of the library and support the latest SDK/API features.\n\n- LTS releases are customized to support a wider range of devices. They are built using older API/SDK versions, so some features are not available on them.\n\nThis table shows the differences between two variants.\n\n|        | Main Release |                        LTS Release                        |\n| :----: | :----: |:---------------------------------------------------------:|\n| Android API Level | 24 |                            16                             | \n| Android Camera Access | Yes |                             -                             |\n| Android Architectures | arm-v7a-neon<br/>arm64-v8a<br/>x86<br/>x86-64 | arm-v7a<br/>arm-v7a-neon<br/>arm64-v8a<br/>x86<br/>x86-64 |\n| iOS Min SDK | 12.1 |                            10                             |\n| iOS VideoToolbox | Yes |                             -                             |\n| iOS AVFoundation | Yes |                             -                             |\n| iOS Architectures | arm64<br/>arm64-simulator<br/>arm64-mac-catalyst<br/>x86-64<br/>x86-64-mac-catalyst |            armv7<br/>arm64<br/>i386<br/>x86-64            |\n| iOS Bundle Format | XCFrameworks |                        Frameworks                         |\n| Mac Catalyst Min Version | 14.0 |                             -                             |\n| macOS Min SDK | 10.15 |                           10.12                           |\n| macOS AVFoundation | Yes |                             -                             |\n| macOS Architectures | arm64<br/>x86-64 |                          x86-64                           |\n| macOS Bundle Format | XCFrameworks |                        Frameworks                         |\n| tvOS Min SDK | 11.0 |                           10.0                            |\n| tvOS VideoToolbox | Yes |                             -                             |\n| tvOS Architectures | arm64<br/>x86-64<br/>arm64-simulator |                     arm64<br/>x86-64                      |\n| tvOS Bundle Format | XCFrameworks |                        Frameworks                         |\n\n### 12. Documentation\n\nA more detailed documentation is available under [Wiki](https://github.com/arthenica/ffmpeg-kit/wiki).\n\n### 13. Test Applications\n\nYou can see how `FFmpegKit` is used inside an application by running test applications created under \n[FFmpegKit Test](https://github.com/arthenica/ffmpeg-kit-test) project.\n\nAll applications are identical and supports command execution, video encoding, accessing https urls, encoding audio,\nburning subtitles, video stabilisation, pipe operations and concurrent command execution.\n\n### 14. License\n\n`FFmpegKit` library alone is licensed under the `LGPL v3.0`.\n\n`FFmpegKit` bundles (`.aar` archives, `frameworks`, `xcframeworks`), which include both  `FFmpegKit` and `FFmpeg`\nlibraries, are also licensed under the `LGPL v3.0`. However, if the source code is built using the optional\n`--enable-gpl` flag or prebuilt binaries with `-gpl` postfix are used, then `FFmpegKit` bundles become subject to the\n`GPL v3.0`. Because, `FFmpeg` is licensed under the `GPL v3.0` in those bundles. And that makes the whole bundle\neffectively subject to the `GPL v3.0`.\n\n`FFmpegKit` build scripts always configure `FFmpeg` with `--enable-version3` option. And never enable non-free\nlibraries. Thus, `FFmpeg` libraries created by `FFmpegKit` are licensed under the `LGPL v3.0` by default. Only when\n`--enable-gpl` is provided they become subject to `GPL v3.0`. That is how prebuilt binaries with `-gpl` postfix are\ncompiled.\n\nRefer to [Licenses](https://github.com/arthenica/ffmpeg-kit/wiki/Licenses) to see the licenses of all libraries.\n[Trademark](https://github.com/arthenica/ffmpeg-kit/wiki/Trademark) lists the trademarks used in the `FFmpegKit`\ndocumentation.\n\n### 15. Patents\n\nIt is not clearly explained in their documentation, but it is believed that `FFmpeg`, `kvazaar`, `x264` and `x265`\ninclude algorithms which are subject to software patents. If you live in a country where software algorithms are\npatentable then you'll probably need to pay royalty fees to patent holders. We are not lawyers though, so we recommend\nthat you seek legal advice first. See [FFmpeg Patent Mini-FAQ](https://ffmpeg.org/legal.html).\n\n`openh264` clearly states that it uses patented algorithms. Therefore, if you build `ffmpeg-kit` with `openh264` and\ndistribute that library, then you are subject to pay MPEG LA licensing fees. Refer to\n[OpenH264 FAQ](https://www.openh264.org/faq.html) page for the details.\n\n### 16. Trademarks\n\n<sup>1</sup> `FFmpeg` is a trademark of [Fabrice Bellard](http://www.bellard.org/). `FFmpegKit` is an independent project and not affiliated with the `FFmpeg` trademark holder.\n\n### 17. Contributing\n\nSee our [CONTRIBUTING](CONTRIBUTING.md) guide.\n\n### 18. See Also\n\n- [FFmpeg API Documentation](https://ffmpeg.org/doxygen/4.0/index.html)\n- [FFmpeg Wiki](https://trac.ffmpeg.org/wiki/WikiStart)\n- [FFmpeg External Library Licenses](https://www.ffmpeg.org/doxygen/4.0/md_LICENSE.html)\n"
        },
        {
          "name": "android.sh",
          "type": "blob",
          "size": 12.775390625,
          "content": "#!/bin/bash\n\nif [[ -z ${ANDROID_SDK_ROOT} ]]; then\n  echo -e \"\\n(*) ANDROID_SDK_ROOT not defined\\n\"\n  exit 1\nfi\n\nif [[ -z ${ANDROID_NDK_ROOT} ]]; then\n  echo -e \"\\n(*) ANDROID_NDK_ROOT not defined\\n\"\n  exit 1\nfi\n\n# LOAD INITIAL SETTINGS\nexport BASEDIR=\"$(pwd)\"\nexport FFMPEG_KIT_BUILD_TYPE=\"android\"\nsource \"${BASEDIR}\"/scripts/variable.sh\nsource \"${BASEDIR}\"/scripts/function-${FFMPEG_KIT_BUILD_TYPE}.sh\ndisabled_libraries=()\n\n# SET DEFAULTS SETTINGS\nenable_default_android_architectures\nenable_default_android_libraries\nenable_main_build\n\n# DETECT ANDROID NDK VERSION\nexport DETECTED_NDK_VERSION=$(grep -Eo \"Revision.*\" \"${ANDROID_NDK_ROOT}\"/source.properties | sed 's/Revision//g;s/=//g;s/ //g')\necho -e \"\\nINFO: Using Android NDK v${DETECTED_NDK_VERSION} provided at ${ANDROID_NDK_ROOT}\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\necho -e \"INFO: Build options: $*\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n# SET DEFAULT BUILD OPTIONS\nexport GPL_ENABLED=\"no\"\nDISPLAY_HELP=\"\"\nBUILD_FULL=\"\"\nBUILD_TYPE_ID=\"\"\nBUILD_VERSION=$(git describe --tags --always 2>>\"${BASEDIR}\"/build.log)\n\n# PROCESS LTS BUILD OPTION FIRST AND SET BUILD TYPE: MAIN OR LTS\nrm -f \"${BASEDIR}\"/android/ffmpeg-kit-android-lib/build.gradle 1>>\"${BASEDIR}\"/build.log 2>&1\ncp \"${BASEDIR}\"/tools/android/build.gradle \"${BASEDIR}\"/android/ffmpeg-kit-android-lib/build.gradle 1>>\"${BASEDIR}\"/build.log 2>&1\nfor argument in \"$@\"; do\n  if [[ \"$argument\" == \"-l\" ]] || [[ \"$argument\" == \"--lts\" ]]; then\n    enable_lts_build\n    BUILD_TYPE_ID+=\"LTS \"\n    rm -f \"${BASEDIR}\"/android/ffmpeg-kit-android-lib/build.gradle 1>>\"${BASEDIR}\"/build.log 2>&1\n    cp \"${BASEDIR}\"/tools/android/build.lts.gradle \"${BASEDIR}\"/android/ffmpeg-kit-android-lib/build.gradle 1>>\"${BASEDIR}\"/build.log 2>&1\n  fi\ndone\n\n# PROCESS BUILD OPTIONS\nwhile [ ! $# -eq 0 ]; do\n\n  case $1 in\n  -h | --help)\n    DISPLAY_HELP=\"1\"\n    ;;\n  -v | --version)\n    display_version\n    exit 0\n    ;;\n  --skip-*)\n    SKIP_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    skip_library \"${SKIP_LIBRARY}\"\n    ;;\n  --no-archive)\n    NO_ARCHIVE=\"1\"\n    ;;\n  --no-output-redirection)\n    no_output_redirection\n    ;;\n  --no-workspace-cleanup-*)\n    NO_WORKSPACE_CLEANUP_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-[A-Za-z]*-[A-Za-z]*-//g')\n\n    no_workspace_cleanup_library \"${NO_WORKSPACE_CLEANUP_LIBRARY}\"\n    ;;\n  --no-link-time-optimization)\n    no_link_time_optimization\n    ;;\n  -d | --debug)\n    enable_debug\n    ;;\n  -s | --speed)\n    optimize_for_speed\n    ;;\n  -l | --lts) ;;\n  -f | --force)\n    export BUILD_FORCE=\"1\"\n    ;;\n  --reconf-*)\n    CONF_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    reconf_library \"${CONF_LIBRARY}\"\n    ;;\n  --rebuild-*)\n    BUILD_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    rebuild_library \"${BUILD_LIBRARY}\"\n    ;;\n  --redownload-*)\n    DOWNLOAD_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    redownload_library \"${DOWNLOAD_LIBRARY}\"\n    ;;\n  --full)\n    BUILD_FULL=\"1\"\n    ;;\n  --enable-gpl)\n    export GPL_ENABLED=\"yes\"\n    ;;\n  --enable-custom-library-*)\n    CUSTOM_LIBRARY_OPTION_KEY=$(echo $1 | sed -e 's/^--enable-custom-//g;s/=.*$//g')\n    CUSTOM_LIBRARY_OPTION_VALUE=$(echo $1 | sed -e 's/^--enable-custom-.*=//g')\n\n    echo -e \"INFO: Custom library options detected: ${CUSTOM_LIBRARY_OPTION_KEY} ${CUSTOM_LIBRARY_OPTION_VALUE}\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n    generate_custom_library_environment_variables \"${CUSTOM_LIBRARY_OPTION_KEY}\" \"${CUSTOM_LIBRARY_OPTION_VALUE}\"\n    ;;\n  --enable-*)\n    ENABLED_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    enable_library \"${ENABLED_LIBRARY}\"\n    ;;\n  --disable-lib-*)\n    DISABLED_LIB=$(echo $1 | sed -e 's/^--[A-Za-z]*-[A-Za-z]*-//g')\n\n    disabled_libraries+=(\"${DISABLED_LIB}\")\n    ;;\n  --disable-*)\n    DISABLED_ARCH=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    disable_arch \"${DISABLED_ARCH}\"\n    ;;\n  --api-level=*)\n    API_LEVEL=$(echo $1 | sed -e 's/^--[A-Za-z]*-[A-Za-z]*=//g')\n\n    export API=${API_LEVEL}\n    ;;\n  --no-ffmpeg-kit-protocols)\n    export NO_FFMPEG_KIT_PROTOCOLS=\"1\"\n    ;;\n  *)\n    print_unknown_option \"$1\"\n    ;;\n  esac\n  shift\ndone\n\nif [[ -z ${BUILD_VERSION} ]]; then\n  echo -e \"\\n(*) error: Can not run git commands in this folder. See build.log.\\n\"\n  exit 1\nfi\n\n# PROCESS FULL OPTION AS LAST OPTION\nif [[ -n ${BUILD_FULL} ]]; then\n  for library in {0..61}; do\n    if [ ${GPL_ENABLED} == \"yes\" ]; then\n      enable_library \"$(get_library_name $library)\" 1\n    else\n      if [[ $(is_gpl_licensed $library) -eq 1 ]]; then\n        enable_library \"$(get_library_name $library)\" 1\n      fi\n    fi\n  done\nfi\n\n# DISABLE SPECIFIED LIBRARIES\nfor disabled_library in ${disabled_libraries[@]}; do\n  set_library \"${disabled_library}\" 0\ndone\n\n# IF HELP DISPLAYED EXIT\nif [[ -n ${DISPLAY_HELP} ]]; then\n  display_help\n  exit 0\nfi\n\n# SET API LEVEL IN build.gradle\n${SED_INLINE} \"s/minSdkVersion .*/minSdkVersion ${API}/g\" \"${BASEDIR}\"/android/ffmpeg-kit-android-lib/build.gradle 1>>\"${BASEDIR}\"/build.log 2>&1\n${SED_INLINE} \"s/versionCode ..0/versionCode ${API}0/g\" \"${BASEDIR}\"/android/ffmpeg-kit-android-lib/build.gradle 1>>\"${BASEDIR}\"/build.log 2>&1\n\necho -e \"\\nBuilding ffmpeg-kit ${BUILD_TYPE_ID}library for Android\\n\"\necho -e -n \"INFO: Building ffmpeg-kit ${BUILD_VERSION} ${BUILD_TYPE_ID}library for Android: \" 1>>\"${BASEDIR}\"/build.log 2>&1\necho -e \"$(date)\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n# PRINT BUILD SUMMARY\nprint_enabled_architectures\nprint_enabled_libraries\nprint_reconfigure_requested_libraries\nprint_rebuild_requested_libraries\nprint_redownload_requested_libraries\nprint_custom_libraries\n\n# VALIDATE GPL FLAGS\nfor gpl_library in {$LIBRARY_X264,$LIBRARY_XVIDCORE,$LIBRARY_X265,$LIBRARY_LIBVIDSTAB,$LIBRARY_RUBBERBAND}; do\n  if [[ ${ENABLED_LIBRARIES[$gpl_library]} -eq 1 ]]; then\n    library_name=$(get_library_name ${gpl_library})\n\n    if [ ${GPL_ENABLED} != \"yes\" ]; then\n      echo -e \"\\n(*) Invalid configuration detected. GPL library ${library_name} enabled without --enable-gpl flag.\\n\"\n      echo -e \"\\n(*) Invalid configuration detected. GPL library ${library_name} enabled without --enable-gpl flag.\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n      exit 1\n    fi\n  fi\ndone\n\necho -n -e \"\\nDownloading sources: \"\necho -e \"INFO: Downloading the source code of ffmpeg and external libraries.\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n# DOWNLOAD GNU CONFIG\ndownload_gnu_config\n\n# DOWNLOAD LIBRARY SOURCES\ndownloaded_library_sources \"${ENABLED_LIBRARIES[@]}\"\n\n# SAVE ORIGINAL API LEVEL = NECESSARY TO BUILD 64bit ARCHITECTURES\nexport ORIGINAL_API=${API}\n\n# BUILD ENABLED LIBRARIES ON ENABLED ARCHITECTURES\nfor run_arch in {0..12}; do\n  if [[ ${ENABLED_ARCHITECTURES[$run_arch]} -eq 1 ]]; then\n    if [[ (${run_arch} -eq ${ARCH_ARM64_V8A} || ${run_arch} -eq ${ARCH_X86_64}) && ${ORIGINAL_API} -lt 21 ]]; then\n\n      # 64 bit ABIs supported after API 21\n      export API=21\n    else\n      export API=${ORIGINAL_API}\n    fi\n\n    export ARCH=$(get_arch_name $run_arch)\n    export TOOLCHAIN=$(get_toolchain)\n    export TOOLCHAIN_ARCH=$(get_toolchain_arch)\n\n    # EXECUTE MAIN BUILD SCRIPT\n    . \"${BASEDIR}\"/scripts/main-android.sh \"${ENABLED_LIBRARIES[@]}\" || exit 1\n\n    # CLEAR FLAGS\n    for library in {0..61}; do\n      library_name=$(get_library_name ${library})\n      unset \"$(echo \"OK_${library_name}\" | sed \"s/\\-/\\_/g\")\"\n      unset \"$(echo \"DEPENDENCY_REBUILT_${library_name}\" | sed \"s/\\-/\\_/g\")\"\n    done\n  fi\ndone\n\n# GET BACK THE ORIGINAL API LEVEL\nexport API=${ORIGINAL_API}\n\n# SET ARCHITECTURES TO BUILD\nrm -f \"${BASEDIR}\"/android/build/.armv7 1>>\"${BASEDIR}\"/build.log 2>&1\nrm -f \"${BASEDIR}\"/android/build/.armv7neon 1>>\"${BASEDIR}\"/build.log 2>&1\nrm -f \"${BASEDIR}\"/android/build/.lts 1>>\"${BASEDIR}\"/build.log 2>&1\nANDROID_ARCHITECTURES=\"\"\nif [[ ${ENABLED_ARCHITECTURES[ARCH_ARM_V7A]} -eq 1 ]] || [[ ${ENABLED_ARCHITECTURES[ARCH_ARM_V7A_NEON]} -eq 1 ]]; then\n  ANDROID_ARCHITECTURES+=\"$(get_android_arch 0) \"\nfi\nif [[ ${ENABLED_ARCHITECTURES[ARCH_ARM_V7A]} -eq 1 ]]; then\n  mkdir -p \"${BASEDIR}\"/android/build 1>>\"${BASEDIR}\"/build.log 2>&1\n  create_file \"${BASEDIR}\"/android/build/.armv7\nfi\nif [[ ${ENABLED_ARCHITECTURES[ARCH_ARM_V7A_NEON]} -eq 1 ]]; then\n  mkdir -p \"${BASEDIR}\"/android/build 1>>\"${BASEDIR}\"/build.log 2>&1\n  create_file \"${BASEDIR}\"/android/build/.armv7neon\nfi\nif [[ ${ENABLED_ARCHITECTURES[ARCH_ARM64_V8A]} -eq 1 ]]; then\n  ANDROID_ARCHITECTURES+=\"$(get_android_arch 2) \"\nfi\nif [[ ${ENABLED_ARCHITECTURES[ARCH_X86]} -eq 1 ]]; then\n  ANDROID_ARCHITECTURES+=\"$(get_android_arch 3) \"\nfi\nif [[ ${ENABLED_ARCHITECTURES[ARCH_X86_64]} -eq 1 ]]; then\n  ANDROID_ARCHITECTURES+=\"$(get_android_arch 4) \"\nfi\nif [[ ! -z ${FFMPEG_KIT_LTS_BUILD} ]]; then\n  mkdir -p \"${BASEDIR}\"/android/build 1>>\"${BASEDIR}\"/build.log 2>&1\n  create_file \"${BASEDIR}\"/android/build/.lts\nfi\n\n# BUILD FFMPEG-KIT\nif [[ -n ${ANDROID_ARCHITECTURES} ]]; then\n\n  echo -n -e \"\\nffmpeg-kit: \"\n\n  # CREATE Application.mk FILE BEFORE STARTING THE NATIVE BUILD\n  build_application_mk\n\n  # CLEAR OLD NATIVE LIBRARIES\n  rm -rf \"${BASEDIR}\"/android/libs 1>>\"${BASEDIR}\"/build.log 2>&1\n  rm -rf \"${BASEDIR}\"/android/obj 1>>\"${BASEDIR}\"/build.log 2>&1\n\n  cd \"${BASEDIR}\"/android 1>>\"${BASEDIR}\"/build.log 2>&1 || exit 1\n\n  # COPY EXTERNAL LIBRARY LICENSES\n  LICENSE_BASEDIR=\"${BASEDIR}\"/android/ffmpeg-kit-android-lib/src/main/res/raw\n  rm -f \"${LICENSE_BASEDIR}\"/*.txt 1>>\"${BASEDIR}\"/build.log 2>&1 || exit 1\n  for library in {0..49}; do\n    if [[ ${ENABLED_LIBRARIES[$library]} -eq 1 ]]; then\n      ENABLED_LIBRARY=$(get_library_name ${library} | sed 's/-/_/g')\n      LICENSE_FILE=\"${LICENSE_BASEDIR}/license_${ENABLED_LIBRARY}.txt\"\n\n      RC=$(copy_external_library_license_file ${library} \"${LICENSE_FILE}\")\n\n      if [[ ${RC} -ne 0 ]]; then\n        echo -e \"DEBUG: Failed to copy the license file of ${ENABLED_LIBRARY}\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n        echo -e \"failed\\n\\nSee build.log for details\\n\"\n        exit 1\n      fi\n\n      echo -e \"DEBUG: Copied the license file of ${ENABLED_LIBRARY} successfully\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n    fi\n  done\n\n  # COPY CUSTOM LIBRARY LICENSES\n  for custom_library_index in \"${CUSTOM_LIBRARIES[@]}\"; do\n    library_name=\"CUSTOM_LIBRARY_${custom_library_index}_NAME\"\n    relative_license_path=\"CUSTOM_LIBRARY_${custom_library_index}_LICENSE_FILE\"\n\n    destination_license_path=\"${LICENSE_BASEDIR}/license_${!library_name}.txt\"\n\n    cp \"${BASEDIR}/src/${!library_name}/${!relative_license_path}\" \"${destination_license_path}\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n    RC=$?\n\n    if [[ ${RC} -ne 0 ]]; then\n      echo -e \"DEBUG: Failed to copy the license file of custom library ${!library_name}\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n      echo -e \"failed\\n\\nSee build.log for details\\n\"\n      exit 1\n    fi\n\n    echo -e \"DEBUG: Copied the license file of custom library ${!library_name} successfully\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n  done\n\n  # COPY LIBRARY LICENSES\n  if [[ ${GPL_ENABLED} == \"yes\" ]]; then\n    cp \"${BASEDIR}\"/tools/license/LICENSE.GPLv3 \"${LICENSE_BASEDIR}\"/license.txt 1>>\"${BASEDIR}\"/build.log 2>&1 || exit 1\n  else\n    cp \"${BASEDIR}\"/LICENSE \"${LICENSE_BASEDIR}\"/license.txt 1>>\"${BASEDIR}\"/build.log 2>&1 || exit 1\n  fi\n\n  echo -e \"DEBUG: Copied the ffmpeg-kit license successfully\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n  overwrite_file \"${BASEDIR}\"/tools/source/SOURCE \"${LICENSE_BASEDIR}\"/source.txt 1>>\"${BASEDIR}\"/build.log 2>&1 || exit 1\n\n  echo -e \"DEBUG: Copied source.txt successfully\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n  # BUILD NATIVE LIBRARY\n  if [[ ${SKIP_ffmpeg_kit} -ne 1 ]]; then\n    if [ \"$(is_darwin_arm64)\" == \"1\" ]; then\n       arch -x86_64 \"${ANDROID_NDK_ROOT}\"/ndk-build -B 1>>\"${BASEDIR}\"/build.log 2>&1\n    else\n      \"${ANDROID_NDK_ROOT}\"/ndk-build -B 1>>\"${BASEDIR}\"/build.log 2>&1\n    fi\n\n    if [ $? -eq 0 ]; then\n      echo \"ok\"\n    else\n      echo \"failed\"\n      exit 1\n    fi\n  else\n    echo \"skipped\"\n  fi\n\n  echo -e -n \"\\n\"\n\n  # DO NOT BUILD ANDROID ARCHIVE\n  if [[ ${NO_ARCHIVE} -ne 1 ]]; then\n\n    echo -e -n \"\\nCreating Android archive under prebuilt: \"\n\n    # BUILD ANDROID ARCHIVE\n    rm -f \"${BASEDIR}\"/android/ffmpeg-kit-android-lib/build/outputs/aar/ffmpeg-kit-release.aar 1>>\"${BASEDIR}\"/build.log 2>&1\n    ./gradlew ffmpeg-kit-android-lib:clean ffmpeg-kit-android-lib:assembleRelease ffmpeg-kit-android-lib:testReleaseUnitTest 1>>\"${BASEDIR}\"/build.log 2>&1\n    if [ $? -ne 0 ]; then\n      echo -e \"failed\\n\"\n      exit 1\n    fi\n\n    # COPY ANDROID ARCHIVE TO PREBUILT DIRECTORY\n    FFMPEG_KIT_AAR=\"${BASEDIR}/prebuilt/$(get_aar_directory)/ffmpeg-kit\"\n    rm -rf \"${FFMPEG_KIT_AAR}\" 1>>\"${BASEDIR}\"/build.log 2>&1\n    mkdir -p \"${FFMPEG_KIT_AAR}\" 1>>\"${BASEDIR}\"/build.log 2>&1\n    cp \"${BASEDIR}\"/android/ffmpeg-kit-android-lib/build/outputs/aar/ffmpeg-kit-release.aar \"${FFMPEG_KIT_AAR}\"/ffmpeg-kit.aar 1>>\"${BASEDIR}\"/build.log 2>&1\n    if [ $? -ne 0 ]; then\n      echo -e \"failed\\n\"\n      exit 1\n    fi\n\n    echo -e \"INFO: Created ffmpeg-kit Android archive successfully.\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n    echo -e \"ok\\n\"\n  else\n    echo -e \"INFO: Skipped creating Android archive.\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n  fi\nfi\n"
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "apple.sh",
          "type": "blob",
          "size": 7.94140625,
          "content": "#!/bin/bash\n\nenable_default_architecture_variants() {\n  ENABLED_ARCHITECTURE_VARIANTS[ARCH_VAR_IPHONEOS]=1\n  ENABLED_ARCHITECTURE_VARIANTS[ARCH_VAR_IPHONESIMULATOR]=1\n  ENABLED_ARCHITECTURE_VARIANTS[ARCH_VAR_MAC_CATALYST]=1\n  ENABLED_ARCHITECTURE_VARIANTS[ARCH_VAR_APPLETVOS]=1\n  ENABLED_ARCHITECTURE_VARIANTS[ARCH_VAR_APPLETVSIMULATOR]=1\n  ENABLED_ARCHITECTURE_VARIANTS[ARCH_VAR_MACOS]=1\n}\n\ndisplay_help() {\n  COMMAND=$(echo \"$0\" | sed -e 's/\\.\\///g')\n\n  echo -e \"\\n'$COMMAND' combines FFmpegKit frameworks created for Apple architecture variants in an xcframework. \\\nIt uses frameworks created under the prebuilt folder for iOS, tvOS and macOS architecture variants (iphoneos, \\\niphonesimulator, mac-catalyst, appletvos, appletvsimulator, macosx) as input and builds an umbrella xcframework under \\\nthe prebuilt folder.\\n\\nPlease note that this script is only responsible of packaging existing frameworks, created by \\\n'ios.sh', 'tvos.sh' and 'macos.sh'. Running it will not compile any of these libraries again. Top level build scripts \\\n('ios.sh', 'tvos.sh', 'macos.sh') must be used to build ffmpeg with support for a specific external library first. \\\nAfter that this script should be used to create an umbrella xcframework.\\n\"\n  echo -e \"Usage: ./$COMMAND [OPTION]...\\n\"\n  echo -e \"Specify environment variables as VARIABLE=VALUE to override default build options.\\n\"\n\n  echo -e \"Options:\"\n  echo -e \"  -h, --help\\t\\t\\tdisplay this help and exit\"\n  echo -e \"  -v, --version\\t\\t\\tdisplay version information and exit\"\n  echo -e \"  -f, --force\\t\\t\\tignore warnings\"\n  echo -e \"  -l, --lts\\t\\t\\tinclude lts packages to support iOS 10+, tvOS 10+, macOS 10.12+ devices\\n\"\n\n  echo -e \"Architectures:\"\n  echo -e \"  --disable-iphoneos\\t\\tdo not include iphoneos architecture variant [yes]\"\n  echo -e \"  --disable-iphonesimulator\\tdo not include iphonesimulator architecture variant [yes]\"\n  echo -e \"  --disable-mac-catalyst\\tdo not include ios mac-catalyst architecture variant [yes]\"\n  echo -e \"  --disable-appletvos\\t\\tdo not include appletvos architecture variant [yes]\"\n  echo -e \"  --disable-appletvsimulator\\tdo not include appletvsimulator architecture variant [yes]\"\n  echo -e \"  --disable-macosx\\t\\tdo not include macosx architecture variant [yes]\\n\"\n}\n\ninitialize_prebuilt_umbrella_xcframework_folders() {\n  echo -e \"DEBUG: Initializing umbrella xcframework directory at ${ROOT_UMBRELLA_XCFRAMEWORK_DIRECTORY}\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n  mkdir -p \"${ROOT_UMBRELLA_XCFRAMEWORK_DIRECTORY}\" 1>>\"${BASEDIR}\"/build.log 2>&1\n}\n\n#\n# 1. framework name\n#\ncreate_umbrella_xcframework() {\n  local FRAMEWORK_NAME=\"$1\"\n\n  local XCFRAMEWORK_PATH=\"${ROOT_UMBRELLA_XCFRAMEWORK_DIRECTORY}/${FRAMEWORK_NAME}.xcframework\"\n\n  initialize_folder \"${XCFRAMEWORK_PATH}\"\n\n  local BUILD_COMMAND=\"xcodebuild -create-xcframework \"\n\n  for ARCHITECTURE_VARIANT_INDEX in \"${TARGET_ARCHITECTURE_VARIANT_INDEX_ARRAY[@]}\"; do\n    local FRAMEWORK_PATH=\"${BASEDIR}\"/prebuilt/$(get_framework_directory \"${ARCHITECTURE_VARIANT_INDEX}\")/${FRAMEWORK_NAME}.framework\n    BUILD_COMMAND+=\" -framework \\\"${FRAMEWORK_PATH}\\\"\"\n  done\n\n  BUILD_COMMAND+=\" -output \\\"${XCFRAMEWORK_PATH}\\\"\"\n\n  # EXECUTE CREATE FRAMEWORK COMMAND\n  COMMAND_OUTPUT=$(eval ${BUILD_COMMAND} 2>&1)\n  RC=$?\n  echo -e \"DEBUG: ${COMMAND_OUTPUT}\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n  if [[ ${RC} -ne 0 ]]; then\n    echo -e \"INFO: Building ${FRAMEWORK_NAME} umbrella xcframework failed\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n    echo -e \"failed\\n\\nSee build.log for details\\n\"\n    exit 1\n  fi\n\n  # DO NOT ALLOW EMPTY FRAMEWORKS\n  if [[ ${COMMAND_OUTPUT} == *\"is empty in library\"* ]]; then\n    echo -e \"INFO: Building ${FRAMEWORK_NAME} umbrella xcframework failed\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n    echo -e \"failed\\n\\nSee build.log for details\\n\"\n    exit 1\n  fi\n}\n\ndisable_arch_variant() {\n  case $1 in\n  iphoneos)\n    ENABLED_ARCHITECTURE_VARIANTS[ARCH_VAR_IPHONEOS]=0\n    ;;\n  iphonesimulator)\n    ENABLED_ARCHITECTURE_VARIANTS[ARCH_VAR_IPHONESIMULATOR]=0\n    ;;\n  mac-catalyst)\n    ENABLED_ARCHITECTURE_VARIANTS[ARCH_VAR_MAC_CATALYST]=0\n    ;;\n  appletvos)\n    ENABLED_ARCHITECTURE_VARIANTS[ARCH_VAR_APPLETVOS]=0\n    ;;\n  appletvsimulator)\n    ENABLED_ARCHITECTURE_VARIANTS[ARCH_VAR_APPLETVSIMULATOR]=0\n    ;;\n  macosx)\n    ENABLED_ARCHITECTURE_VARIANTS[ARCH_VAR_MACOS]=0\n    ;;\n  *)\n    print_unknown_arch_variant \"$1\"\n    ;;\n  esac\n}\n\n# CHECK IF XCODE IS INSTALLED\nif [ ! -x \"$(command -v xcrun)\" ]; then\n  echo -e \"\\n(*) xcrun command not found. Please check your Xcode installation\\n\"\n  exit 1\nfi\n\nif [ ! -x \"$(command -v xcodebuild)\" ]; then\n  echo -e \"\\n(*) xcodebuild command not found. Please check your Xcode installation\\n\"\n  exit 1\nfi\n\n# LOAD INITIAL SETTINGS\nexport BASEDIR=\"$(pwd)\"\nsource \"${BASEDIR}\"/scripts/variable.sh\nexport FFMPEG_KIT_BUILD_TYPE=\"apple\"\nsource \"${BASEDIR}\"/scripts/function-${FFMPEG_KIT_BUILD_TYPE}.sh\n\n# SET DEFAULTS SETTINGS\nenable_default_architecture_variants\n\n# SELECT XCODE VERSION USED FOR BUILDING\nXCODE_FOR_FFMPEG_KIT=$(ls ~/.xcode.for.ffmpeg.kit.sh)\nif [[ -f ${XCODE_FOR_FFMPEG_KIT} ]]; then\n  source \"${XCODE_FOR_FFMPEG_KIT}\" 1>>\"${BASEDIR}\"/build.log 2>&1\nfi\n\n# DETECT SDK VERSIONS\nDETECTED_IOS_SDK_VERSION=\"$(xcrun --sdk iphoneos --show-sdk-version 2>>\"${BASEDIR}\"/build.log)\"\nDETECTED_TVOS_SDK_VERSION=\"$(xcrun --sdk appletvos --show-sdk-version 2>>\"${BASEDIR}\"/build.log)\"\nDETECTED_MACOS_SDK_VERSION=\"$(xcrun --sdk macosx --show-sdk-version 2>>\"${BASEDIR}\"/build.log)\"\necho -e \"INFO: Using iOS SDK: ${DETECTED_IOS_SDK_VERSION}, tvOS SDK: ${DETECTED_TVOS_SDK_VERSION}, macOS SDK: ${DETECTED_MACOS_SDK_VERSION} by Xcode provided at $(xcode-select -p)\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\necho -e \"INFO: Build options: $*\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n# SET DEFAULT BUILD OPTIONS\nDISPLAY_HELP=\"\"\nBUILD_TYPE_ID=\"\"\nBUILD_FULL=\"\"\nFFMPEG_KIT_XCF_BUILD=\"\"\nBUILD_FORCE=\"\"\nBUILD_VERSION=$(git describe --tags --always 2>>\"${BASEDIR}\"/build.log)\nif [[ -z ${BUILD_VERSION} ]]; then\n  echo -e \"\\n(*): Can not run git commands in this folder. See build.log.\\n\"\n  exit 1\nfi\n\n# PROCESS LTS BUILD OPTION FIRST AND SET BUILD TYPE: MAIN OR LTS\nfor argument in \"$@\"; do\n  if [[ \"$argument\" == \"-l\" ]] || [[ \"$argument\" == \"--lts\" ]]; then\n    export FFMPEG_KIT_LTS_BUILD=\"1\"\n    BUILD_TYPE_ID+=\"LTS \"\n  fi\ndone\n\n# PROCESS BUILD OPTIONS\nwhile [ ! $# -eq 0 ]; do\n  case $1 in\n  -h | --help)\n    DISPLAY_HELP=\"1\"\n    ;;\n  -v | --version)\n    display_version\n    exit 0\n    ;;\n  -l | --lts) ;;\n  -f | --force)\n    export BUILD_FORCE=\"1\"\n    ;;\n  --disable-*)\n    DISABLED_ARCH_VARIANT=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    disable_arch_variant \"${DISABLED_ARCH_VARIANT}\"\n    ;;\n  *)\n    print_unknown_option \"$1\"\n    ;;\n  esac\n  shift\ndone\n\n# IF HELP DISPLAYED EXIT\nif [[ -n ${DISPLAY_HELP} ]]; then\n  display_help\n  exit 0\nfi\n\necho -e \"\\nBuilding ffmpeg-kit ${BUILD_TYPE_ID}umbrella xcframework\\n\"\necho -e -n \"INFO: Building ffmpeg-kit ${BUILD_VERSION} ${BUILD_TYPE_ID}umbrella xcframework: \" 1>>\"${BASEDIR}\"/build.log 2>&1\necho -e \"$(date)\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n# PRINT BUILD SUMMARY\nprint_enabled_architecture_variants\nprint_enabled_xcframeworks\n\necho \"\"\n\n# THIS WILL SAVE ARCHITECTURE VARIANTS TO BE INCLUDED\nTARGET_ARCHITECTURE_VARIANT_INDEX_ARRAY=()\n\n# SAVE ARCHITECTURE VARIANTS\nfor run_arch_variant in {1..8}; do\n  if [[ ${ENABLED_ARCHITECTURE_VARIANTS[$run_arch_variant]} -eq 1 ]]; then\n    case \"$run_arch_variant\" in\n    1 | 5) ;;\n    *)\n      TARGET_ARCHITECTURE_VARIANT_INDEX_ARRAY+=(\"${run_arch_variant}\")\n      ;;\n    esac\n  fi\ndone\n\n# BUILD XCFRAMEWORKS\nif [[ -n ${TARGET_ARCHITECTURE_VARIANT_INDEX_ARRAY[0]} ]]; then\n\n  ROOT_UMBRELLA_XCFRAMEWORK_DIRECTORY=${BASEDIR}/prebuilt/$(get_umbrella_xcframework_directory)\n\n  echo -e -n \"Creating umbrella xcframeworks under prebuilt: \"\n\n  # INITIALIZE TARGET FOLDERS\n  initialize_prebuilt_umbrella_xcframework_folders\n\n  for FFMPEG_LIB in \"${FFMPEG_LIBS[@]}\"; do\n    create_umbrella_xcframework \"${FFMPEG_LIB}\"\n  done\n\n  create_umbrella_xcframework \"ffmpegkit\"\n\n  echo -e -n \"INFO: Umbrella xcframeworks created successfully\\n\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n  echo -e \"ok\\n\"\nfi\n"
        },
        {
          "name": "apple",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "flutter",
          "type": "tree",
          "content": null
        },
        {
          "name": "ios.sh",
          "type": "blob",
          "size": 9.3291015625,
          "content": "#!/bin/bash\n\n# CHECK IF XCODE IS INSTALLED\nif [ ! -x \"$(command -v xcrun)\" ]; then\n  echo -e \"\\n(*) xcrun command not found. Please check your Xcode installation\\n\"\n  exit 1\nfi\n\nif [ ! -x \"$(command -v xcodebuild)\" ]; then\n  echo -e \"\\n(*) xcodebuild command not found. Please check your Xcode installation\\n\"\n  exit 1\nfi\n\n# LOAD INITIAL SETTINGS\nexport BASEDIR=\"$(pwd)\"\nexport FFMPEG_KIT_BUILD_TYPE=\"ios\"\nsource \"${BASEDIR}\"/scripts/variable.sh\nsource \"${BASEDIR}\"/scripts/function-${FFMPEG_KIT_BUILD_TYPE}.sh\ndisabled_libraries=()\n\n# SET DEFAULTS SETTINGS\nenable_default_ios_architectures\n\n# SELECT XCODE VERSION USED FOR BUILDING\nXCODE_FOR_FFMPEG_KIT=$(ls ~/.xcode.for.ffmpeg.kit.sh 2>>\"${BASEDIR}\"/build.log)\nif [[ -f ${XCODE_FOR_FFMPEG_KIT} ]]; then\n  source \"${XCODE_FOR_FFMPEG_KIT}\" 1>>\"${BASEDIR}\"/build.log 2>&1\nfi\n\n# DETECT IOS SDK VERSION\nexport DETECTED_IOS_SDK_VERSION=\"$(xcrun --sdk iphoneos --show-sdk-version 2>>${BASEDIR}/build.log)\"\necho -e \"\\nINFO: Using SDK ${DETECTED_IOS_SDK_VERSION} by Xcode provided at $(xcode-select -p)\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\necho -e \"INFO: Build options: $*\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n# SET DEFAULT BUILD OPTIONS\nexport GPL_ENABLED=\"no\"\nDISPLAY_HELP=\"\"\nBUILD_TYPE_ID=\"\"\nBUILD_FULL=\"\"\nFFMPEG_KIT_XCF_BUILD=\"\"\nBUILD_FORCE=\"\"\nBUILD_VERSION=$(git describe --tags --always 2>>\"${BASEDIR}\"/build.log)\nif [[ -z ${BUILD_VERSION} ]]; then\n  echo -e \"\\n(*): Can not run git commands in this folder. See build.log.\\n\"\n  exit 1\nfi\n\n# MAIN BUILDS ENABLED BY DEFAULT\nenable_main_build\n\n# PROCESS LTS BUILD OPTION FIRST AND SET BUILD TYPE: MAIN OR LTS\nfor argument in \"$@\"; do\n  if [[ \"$argument\" == \"-l\" ]] || [[ \"$argument\" == \"--lts\" ]]; then\n    enable_lts_build\n    BUILD_TYPE_ID+=\"LTS \"\n  fi\ndone\n\n# PROCESS BUILD OPTIONS\nwhile [ ! $# -eq 0 ]; do\n  case $1 in\n  -h | --help)\n    DISPLAY_HELP=\"1\"\n    ;;\n  -v | --version)\n    display_version\n    exit 0\n    ;;\n  --skip-*)\n    SKIP_LIBRARY=$(echo \"$1\" | sed -e 's/^--[A-Za-z]*-//g')\n\n    skip_library \"${SKIP_LIBRARY}\"\n    ;;\n  --no-bitcode)\n    export NO_BITCODE=\"1\"\n    ;;\n  --no-framework)\n    NO_FRAMEWORK=\"1\"\n    ;;\n  --no-output-redirection)\n    no_output_redirection\n    ;;\n  --no-workspace-cleanup-*)\n    NO_WORKSPACE_CLEANUP_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-[A-Za-z]*-[A-Za-z]*-//g')\n\n    no_workspace_cleanup_library \"${NO_WORKSPACE_CLEANUP_LIBRARY}\"\n    ;;\n  -d | --debug)\n    enable_debug\n    ;;\n  -s | --speed)\n    optimize_for_speed\n    ;;\n  -l | --lts) ;;\n  -x | --xcframework)\n    FFMPEG_KIT_XCF_BUILD=\"1\"\n    ;;\n  -f | --force)\n    export BUILD_FORCE=\"1\"\n    ;;\n  --reconf-*)\n    CONF_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    reconf_library \"${CONF_LIBRARY}\"\n    ;;\n  --rebuild-*)\n    BUILD_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    rebuild_library \"${BUILD_LIBRARY}\"\n    ;;\n  --redownload-*)\n    DOWNLOAD_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    redownload_library \"${DOWNLOAD_LIBRARY}\"\n    ;;\n  --full)\n    BUILD_FULL=\"1\"\n    ;;\n  --enable-gpl)\n    export GPL_ENABLED=\"yes\"\n    ;;\n  --enable-custom-library-*)\n    CUSTOM_LIBRARY_OPTION_KEY=$(echo $1 | sed -e 's/^--enable-custom-//g;s/=.*$//g')\n    CUSTOM_LIBRARY_OPTION_VALUE=$(echo $1 | sed -e 's/^--enable-custom-.*=//g')\n\n    echo -e \"INFO: Custom library options detected: ${CUSTOM_LIBRARY_OPTION_KEY} ${CUSTOM_LIBRARY_OPTION_VALUE}\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n    generate_custom_library_environment_variables \"${CUSTOM_LIBRARY_OPTION_KEY}\" \"${CUSTOM_LIBRARY_OPTION_VALUE}\"\n    ;;\n  --enable-*)\n    ENABLED_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    enable_library \"${ENABLED_LIBRARY}\"\n    ;;\n  --disable-lib-*)\n    DISABLED_LIB=$(echo $1 | sed -e 's/^--[A-Za-z]*-[A-Za-z]*-//g')\n\n    disabled_libraries+=(\"${DISABLED_LIB}\")\n    ;;\n  --disable-*)\n    DISABLED_ARCH=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    disable_arch \"${DISABLED_ARCH}\"\n    ;;\n  --target=*)\n    TARGET=$(echo $1 | sed -e 's/^--[A-Za-z]*=//g')\n\n    export IOS_MIN_VERSION=${TARGET}\n    ;;\n  --mac-catalyst-target=*)\n    TARGET=$(echo $1 | sed -e 's/^--[A-Za-z]*-[A-Za-z]*-[A-Za-z]*=//g')\n\n    export MAC_CATALYST_MIN_VERSION=${TARGET}\n    ;;\n  *)\n    print_unknown_option \"$1\"\n    ;;\n  esac\n  shift\ndone\n\n# PROCESS FULL OPTION AS LAST OPTION\nif [[ -n ${BUILD_FULL} ]]; then\n  for library in {0..61}; do\n    if [ ${GPL_ENABLED} == \"yes\" ]; then\n      enable_library \"$(get_library_name \"$library\")\" 1\n    else\n      if [[ $(is_gpl_licensed \"$library\") -eq 1 ]]; then\n        enable_library \"$(get_library_name \"$library\")\" 1\n      fi\n    fi\n  done\nfi\n\n# DISABLE SPECIFIED LIBRARIES\nfor disabled_library in ${disabled_libraries[@]}; do\n  set_library \"${disabled_library}\" 0\ndone\n\n# IF HELP DISPLAYED EXIT\nif [[ -n ${DISPLAY_HELP} ]]; then\n  display_help\n  exit 0\nfi\n\n# DISABLE NOT SUPPORTED ARCHITECTURES\ndisable_ios_architecture_not_supported_on_detected_sdk_version \"${ARCH_ARMV7}\"\ndisable_ios_architecture_not_supported_on_detected_sdk_version \"${ARCH_ARMV7S}\"\ndisable_ios_architecture_not_supported_on_detected_sdk_version \"${ARCH_I386}\"\ndisable_ios_architecture_not_supported_on_detected_sdk_version \"${ARCH_ARM64E}\"\ndisable_ios_architecture_not_supported_on_detected_sdk_version \"${ARCH_X86_64_MAC_CATALYST}\"\ndisable_ios_architecture_not_supported_on_detected_sdk_version \"${ARCH_ARM64_MAC_CATALYST}\"\ndisable_ios_architecture_not_supported_on_detected_sdk_version \"${ARCH_ARM64_SIMULATOR}\"\n\n# CHECK SOME RULES FOR .framework BUNDLES\n\n# 1. DISABLE arm64-mac-catalyst IN framework BUNDLES\nif [[ ${NO_FRAMEWORK} -ne 1 ]] && [[ -z ${FFMPEG_KIT_XCF_BUILD} ]] && [[ ${ENABLED_ARCHITECTURES[${ARCH_ARM64_MAC_CATALYST}]} -eq 1 ]]; then\n  echo -e \"INFO: Disabled arm64-mac-catalyst architecture which cannot exist in a framework bundle.\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n  disable_arch \"arm64-mac-catalyst\"\nfi\n\n# 2. DISABLE x86-64-mac-catalyst IN framework BUNDLES\nif [[ ${NO_FRAMEWORK} -ne 1 ]] && [[ -z ${FFMPEG_KIT_XCF_BUILD} ]] && [[ ${ENABLED_ARCHITECTURES[${ARCH_X86_64_MAC_CATALYST}]} -eq 1 ]]; then\n  echo -e \"INFO: Disabled x86-64-mac-catalyst architecture which cannot exist in a framework bundle.\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n  disable_arch \"x86-64-mac-catalyst\"\nfi\n\n# 3. DISABLE arm64-simulator WHEN arm64 IS ENABLED IN framework BUNDLES\nif [[ ${NO_FRAMEWORK} -ne 1 ]] && [[ -z ${FFMPEG_KIT_XCF_BUILD} ]] && [[ ${ENABLED_ARCHITECTURES[${ARCH_ARM64}]} -eq 1 ]] && [[ ${ENABLED_ARCHITECTURES[${ARCH_ARM64_SIMULATOR}]} -eq 1 ]]; then\n  echo -e \"INFO: Disabled arm64-simulator architecture which cannot co-exist with arm64 in the same framework bundle.\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n  disable_arch \"arm64-simulator\"\nfi\n\necho -e \"\\nBuilding ffmpeg-kit ${BUILD_TYPE_ID}shared library for iOS\\n\"\necho -e -n \"INFO: Building ffmpeg-kit ${BUILD_VERSION} ${BUILD_TYPE_ID}for iOS: \" 1>>\"${BASEDIR}\"/build.log 2>&1\necho -e \"$(date)\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n# PRINT BUILD SUMMARY\nprint_enabled_architectures\nprint_enabled_libraries\nprint_reconfigure_requested_libraries\nprint_rebuild_requested_libraries\nprint_redownload_requested_libraries\nprint_custom_libraries\n\n# VALIDATE GPL FLAGS\nfor gpl_library in {$LIBRARY_X264,$LIBRARY_XVIDCORE,$LIBRARY_X265,$LIBRARY_LIBVIDSTAB,$LIBRARY_RUBBERBAND}; do\n  if [[ ${ENABLED_LIBRARIES[$gpl_library]} -eq 1 ]]; then\n    library_name=$(get_library_name \"${gpl_library}\")\n\n    if [ ${GPL_ENABLED} != \"yes\" ]; then\n      echo -e \"\\n(*) Invalid configuration detected. GPL library ${library_name} enabled without --enable-gpl flag.\\n\"\n      echo -e \"\\n(*) Invalid configuration detected. GPL library ${library_name} enabled without --enable-gpl flag.\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n      exit 1\n    fi\n  fi\ndone\n\necho -n -e \"\\nDownloading sources: \"\necho -e \"INFO: Downloading the source code of ffmpeg and external libraries.\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n# DOWNLOAD GNU CONFIG\ndownload_gnu_config\n\n# DOWNLOAD LIBRARY SOURCES\ndownloaded_library_sources \"${ENABLED_LIBRARIES[@]}\"\n\n# THIS WILL SAVE ARCHITECTURES TO BUILD\nTARGET_ARCH_LIST=()\n\n# BUILD ENABLED LIBRARIES ON ENABLED ARCHITECTURES\nfor run_arch in {0..12}; do\n  if [[ ${ENABLED_ARCHITECTURES[$run_arch]} -eq 1 ]]; then\n    export ARCH=$(get_arch_name \"$run_arch\")\n    export FULL_ARCH=$(get_full_arch_name \"$run_arch\")\n    export SDK_PATH=$(get_sdk_path)\n    export SDK_NAME=$(get_sdk_name)\n\n    # EXECUTE MAIN BUILD SCRIPT\n    . \"${BASEDIR}\"/scripts/main-ios.sh \"${ENABLED_LIBRARIES[@]}\"\n\n    TARGET_ARCH_LIST+=(\"${FULL_ARCH}\")\n\n    # CLEAR FLAGS\n    for library in {0..61}; do\n      library_name=$(get_library_name \"${library}\")\n      unset \"$(echo \"OK_${library_name}\" | sed \"s/\\-/\\_/g\")\"\n      unset \"$(echo \"DEPENDENCY_REBUILT_${library_name}\" | sed \"s/\\-/\\_/g\")\"\n    done\n  fi\ndone\n\necho -e -n \"\\n\"\n\n# DO NOT BUILD FRAMEWORKS\nif [[ ${NO_FRAMEWORK} -ne 1 ]]; then\n\n  # BUILD FFMPEG-KIT\n  if [[ -n ${TARGET_ARCH_LIST[0]} ]]; then\n\n    # INITIALIZE TARGET FOLDERS\n    initialize_prebuilt_ios_folders\n\n    # PREPARE PLATFORM ARCHITECTURE STRINGS\n    build_apple_architecture_variant_strings\n\n    if [[ -n ${FFMPEG_KIT_XCF_BUILD} ]]; then\n      echo -e -n \"\\nCreating xcframeworks under prebuilt: \"\n\n      create_universal_libraries_for_ios_xcframeworks\n\n      create_frameworks_for_ios_xcframeworks\n\n      create_ios_xcframeworks\n    else\n      echo -e -n \"\\nCreating frameworks under prebuilt: \"\n\n      create_universal_libraries_for_ios_default_frameworks\n\n      create_ios_default_frameworks\n    fi\n\n    echo -e \"ok\\n\"\n  fi\n\nelse\n  echo -e \"INFO: Skipped creating iOS frameworks.\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\nfi\n"
        },
        {
          "name": "linux.sh",
          "type": "blob",
          "size": 5.7080078125,
          "content": "#!/bin/bash\n\n# LOAD INITIAL SETTINGS\nexport BASEDIR=\"$(pwd)\"\nexport FFMPEG_KIT_BUILD_TYPE=\"linux\"\nsource \"${BASEDIR}\"/scripts/variable.sh\nsource \"${BASEDIR}\"/scripts/function-${FFMPEG_KIT_BUILD_TYPE}.sh\ndisabled_libraries=()\n\n# SET DEFAULTS SETTINGS\nenable_default_linux_architectures\n\necho -e \"INFO: Build options: $*\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n# SET DEFAULT BUILD OPTIONS\nexport GPL_ENABLED=\"no\"\nDISPLAY_HELP=\"\"\nBUILD_FULL=\"\"\nBUILD_TYPE_ID=\"\"\nBUILD_VERSION=$(git describe --tags --always 2>>\"${BASEDIR}\"/build.log)\n\n# MAIN BUILDS ENABLED BY DEFAULT\nenable_main_build\n\n# PROCESS BUILD OPTIONS\nwhile [ ! $# -eq 0 ]; do\n\n  case $1 in\n  -h | --help)\n    DISPLAY_HELP=\"1\"\n    ;;\n  -v | --version)\n    display_version\n    exit 0\n    ;;\n  --skip-*)\n    SKIP_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    skip_library \"${SKIP_LIBRARY}\"\n    ;;\n  --no-output-redirection)\n    no_output_redirection\n    ;;\n  --no-workspace-cleanup-*)\n    NO_WORKSPACE_CLEANUP_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-[A-Za-z]*-[A-Za-z]*-//g')\n\n    no_workspace_cleanup_library \"${NO_WORKSPACE_CLEANUP_LIBRARY}\"\n    ;;\n  --no-link-time-optimization)\n    no_link_time_optimization\n    ;;\n  -d | --debug)\n    enable_debug\n    ;;\n  -s | --speed)\n    optimize_for_speed\n    ;;\n  -l | --lts) ;;\n  -f | --force)\n    export BUILD_FORCE=\"1\"\n    ;;\n  --reconf-*)\n    CONF_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    reconf_library \"${CONF_LIBRARY}\"\n    ;;\n  --rebuild-*)\n    BUILD_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    rebuild_library \"${BUILD_LIBRARY}\"\n    ;;\n  --redownload-*)\n    DOWNLOAD_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    redownload_library \"${DOWNLOAD_LIBRARY}\"\n    ;;\n  --full)\n    BUILD_FULL=\"1\"\n    ;;\n  --enable-gpl)\n    export GPL_ENABLED=\"yes\"\n    ;;\n  --enable-custom-library-*)\n    CUSTOM_LIBRARY_OPTION_KEY=$(echo $1 | sed -e 's/^--enable-custom-//g;s/=.*$//g')\n    CUSTOM_LIBRARY_OPTION_VALUE=$(echo $1 | sed -e 's/^--enable-custom-.*=//g')\n\n    echo -e \"INFO: Custom library options detected: ${CUSTOM_LIBRARY_OPTION_KEY} ${CUSTOM_LIBRARY_OPTION_VALUE}\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n    generate_custom_library_environment_variables \"${CUSTOM_LIBRARY_OPTION_KEY}\" \"${CUSTOM_LIBRARY_OPTION_VALUE}\"\n    ;;\n  --enable-*)\n    ENABLED_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    enable_library \"${ENABLED_LIBRARY}\"\n    ;;\n  --disable-lib-*)\n    DISABLED_LIB=$(echo $1 | sed -e 's/^--[A-Za-z]*-[A-Za-z]*-//g')\n\n    disabled_libraries+=(\"${DISABLED_LIB}\")\n    ;;\n  --disable-*)\n    DISABLED_ARCH=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    disable_arch \"${DISABLED_ARCH}\"\n    ;;\n  --api-level=*)\n    API_LEVEL=$(echo $1 | sed -e 's/^--[A-Za-z]*-[A-Za-z]*=//g')\n\n    export API=${API_LEVEL}\n    ;;\n  *)\n    print_unknown_option \"$1\"\n    ;;\n  esac\n  shift\ndone\n\nif [[ -z ${BUILD_VERSION} ]]; then\n  echo -e \"\\n(*) error: Can not run git commands in this folder. See build.log.\\n\"\n  exit 1\nfi\n\n# PROCESS FULL OPTION AS LAST OPTION\nif [[ -n ${BUILD_FULL} ]]; then\n  for library in {0..91}; do\n    if [ ${GPL_ENABLED} == \"yes\" ]; then\n      enable_library \"$(get_library_name $library)\" 1\n    else\n      if [[ $(is_gpl_licensed $library) -eq 1 ]]; then\n        enable_library \"$(get_library_name $library)\" 1\n      fi\n    fi\n  done\nfi\n\n# DISABLE SPECIFIED LIBRARIES\nfor disabled_library in ${disabled_libraries[@]}; do\n  set_library \"${disabled_library}\" 0\ndone\n\n# IF HELP DISPLAYED EXIT\nif [[ -n ${DISPLAY_HELP} ]]; then\n  display_help\n  exit 0\nfi\n\necho -e \"\\nBuilding ffmpeg-kit ${BUILD_TYPE_ID}library for Linux\\n\"\necho -e -n \"INFO: Building ffmpeg-kit ${BUILD_VERSION} ${BUILD_TYPE_ID}library for Linux: \" 1>>\"${BASEDIR}\"/build.log 2>&1\necho -e \"$(date)\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n# PRINT BUILD SUMMARY\nprint_enabled_architectures\nprint_enabled_libraries\nprint_reconfigure_requested_libraries\nprint_rebuild_requested_libraries\nprint_redownload_requested_libraries\nprint_custom_libraries\n\n# VALIDATE GPL FLAGS\nfor gpl_library in {$LIBRARY_X264,$LIBRARY_LINUX_XVIDCORE,$LIBRARY_LINUX_X265,$LIBRARY_LINUX_LIBVIDSTAB,$LIBRARY_LINUX_RUBBERBAND}; do\n  if [[ ${ENABLED_LIBRARIES[$gpl_library]} -eq 1 ]]; then\n    library_name=$(get_library_name ${gpl_library})\n\n    if [ ${GPL_ENABLED} != \"yes\" ]; then\n      echo -e \"\\n(*) Invalid configuration detected. GPL library ${library_name} enabled without --enable-gpl flag.\\n\"\n      echo -e \"\\n(*) Invalid configuration detected. GPL library ${library_name} enabled without --enable-gpl flag.\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n      exit 1\n    fi\n  fi\ndone\n\necho -n -e \"\\nDownloading sources: \"\necho -e \"INFO: Downloading the source code of ffmpeg and external libraries.\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n# DOWNLOAD GNU CONFIG\ndownload_gnu_config\n\n# DOWNLOAD LIBRARY SOURCES\ndownloaded_library_sources \"${ENABLED_LIBRARIES[@]}\"\n\n# THIS WILL SAVE ARCHITECTURES TO BUILD\nTARGET_ARCH_LIST=()\n\n# BUILD ENABLED LIBRARIES ON ENABLED ARCHITECTURES\nfor run_arch in {0..12}; do\n  if [[ ${ENABLED_ARCHITECTURES[$run_arch]} -eq 1 ]]; then\n    export ARCH=$(get_arch_name \"$run_arch\")\n    export FULL_ARCH=$(get_full_arch_name \"$run_arch\")\n\n    # EXECUTE MAIN BUILD SCRIPT\n    . \"${BASEDIR}\"/scripts/main-linux.sh \"${ENABLED_LIBRARIES[@]}\"\n\n    TARGET_ARCH_LIST+=(\"${FULL_ARCH}\")\n\n    # CLEAR FLAGS\n    for library in {0..91}; do\n      library_name=$(get_library_name \"${library}\")\n      unset \"$(echo \"OK_${library_name}\" | sed \"s/\\-/\\_/g\")\"\n      unset \"$(echo \"DEPENDENCY_REBUILT_${library_name}\" | sed \"s/\\-/\\_/g\")\"\n    done\n  fi\ndone\n\n# BUILD FFMPEG-KIT BUNDLE\nif [[ -n ${TARGET_ARCH_LIST[0]} ]]; then\n\n  echo -e -n \"\\nCreating the bundle under prebuilt: \"\n\n  echo -e \"DEBUG: Creating the bundle directory\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n  initialize_folder \"${BASEDIR}/prebuilt/$(get_bundle_directory)\"\n\n  create_linux_bundle\n\n  echo -e \"ok\\n\"\nfi\n"
        },
        {
          "name": "linux",
          "type": "tree",
          "content": null
        },
        {
          "name": "macos.sh",
          "type": "blob",
          "size": 7.45703125,
          "content": "#!/bin/bash\n\n# CHECK IF XCODE IS INSTALLED\nif [ ! -x \"$(command -v xcrun)\" ]; then\n  echo -e \"\\n(*) xcrun command not found. Please check your Xcode installation\\n\"\n  exit 1\nfi\n\nif [ ! -x \"$(command -v xcodebuild)\" ]; then\n  echo -e \"\\n(*) xcodebuild command not found. Please check your Xcode installation\\n\"\n  exit 1\nfi\n\n# LOAD INITIAL SETTINGS\nexport BASEDIR=\"$(pwd)\"\nexport FFMPEG_KIT_BUILD_TYPE=\"macos\"\nsource \"${BASEDIR}\"/scripts/variable.sh\nsource \"${BASEDIR}\"/scripts/function-${FFMPEG_KIT_BUILD_TYPE}.sh\ndisabled_libraries=()\n\n# SET DEFAULTS SETTINGS\nenable_default_macos_architectures\n\n# SELECT XCODE VERSION USED FOR BUILDING\nXCODE_FOR_FFMPEG_KIT=$(ls ~/.xcode.for.ffmpeg.kit.sh 2>>\"${BASEDIR}\"/build.log)\nif [[ -f ${XCODE_FOR_FFMPEG_KIT} ]]; then\n  source \"${XCODE_FOR_FFMPEG_KIT}\" 1>>\"${BASEDIR}\"/build.log 2>&1\nfi\n\n# DETECT MACOS SDK VERSION\nexport DETECTED_MACOS_SDK_VERSION=\"$(xcrun --sdk macosx --show-sdk-version 2>>${BASEDIR}/build.log)\"\necho -e \"\\nINFO: Using SDK ${DETECTED_MACOS_SDK_VERSION} by Xcode provided at $(xcode-select -p)\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\necho -e \"\\nINFO: Build options: $*\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n# SET DEFAULT BUILD OPTIONS\nexport GPL_ENABLED=\"no\"\nDISPLAY_HELP=\"\"\nBUILD_TYPE_ID=\"\"\nBUILD_FULL=\"\"\nFFMPEG_KIT_XCF_BUILD=\"\"\nBUILD_FORCE=\"\"\nBUILD_VERSION=$(git describe --tags --always 2>>\"${BASEDIR}\"/build.log)\nif [[ -z ${BUILD_VERSION} ]]; then\n  echo -e \"\\n(*): Can not run git commands in this folder. See build.log.\\n\"\n  exit 1\nfi\n\n# MAIN BUILDS ENABLED BY DEFAULT\nenable_main_build\n\n# PROCESS LTS BUILD OPTION FIRST AND SET BUILD TYPE: MAIN OR LTS\nfor argument in \"$@\"; do\n  if [[ \"$argument\" == \"-l\" ]] || [[ \"$argument\" == \"--lts\" ]]; then\n    enable_lts_build\n    BUILD_TYPE_ID+=\"LTS \"\n  fi\ndone\n\n# PROCESS BUILD OPTIONS\nwhile [ ! $# -eq 0 ]; do\n  case $1 in\n  -h | --help)\n    DISPLAY_HELP=\"1\"\n    ;;\n  -v | --version)\n    display_version\n    exit 0\n    ;;\n  --skip-*)\n    SKIP_LIBRARY=$(echo \"$1\" | sed -e 's/^--[A-Za-z]*-//g')\n\n    skip_library \"${SKIP_LIBRARY}\"\n    ;;\n  --no-framework)\n    NO_FRAMEWORK=\"1\"\n    ;;\n  --no-output-redirection)\n    no_output_redirection\n    ;;\n  --no-workspace-cleanup-*)\n    NO_WORKSPACE_CLEANUP_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-[A-Za-z]*-[A-Za-z]*-//g')\n\n    no_workspace_cleanup_library \"${NO_WORKSPACE_CLEANUP_LIBRARY}\"\n    ;;\n  -d | --debug)\n    enable_debug\n    ;;\n  -s | --speed)\n    optimize_for_speed\n    ;;\n  -l | --lts) ;;\n  -x | --xcframework)\n    FFMPEG_KIT_XCF_BUILD=\"1\"\n    ;;\n  -f | --force)\n    export BUILD_FORCE=\"1\"\n    ;;\n  --reconf-*)\n    CONF_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    reconf_library \"${CONF_LIBRARY}\"\n    ;;\n  --rebuild-*)\n    BUILD_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    rebuild_library \"${BUILD_LIBRARY}\"\n    ;;\n  --redownload-*)\n    DOWNLOAD_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    redownload_library \"${DOWNLOAD_LIBRARY}\"\n    ;;\n  --full)\n    BUILD_FULL=\"1\"\n    ;;\n  --enable-gpl)\n    export GPL_ENABLED=\"yes\"\n    ;;\n  --enable-custom-library-*)\n    CUSTOM_LIBRARY_OPTION_KEY=$(echo $1 | sed -e 's/^--enable-custom-//g;s/=.*$//g')\n    CUSTOM_LIBRARY_OPTION_VALUE=$(echo $1 | sed -e 's/^--enable-custom-.*=//g')\n\n    echo -e \"INFO: Custom library options detected: ${CUSTOM_LIBRARY_OPTION_KEY} ${CUSTOM_LIBRARY_OPTION_VALUE}\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n    generate_custom_library_environment_variables \"${CUSTOM_LIBRARY_OPTION_KEY}\" \"${CUSTOM_LIBRARY_OPTION_VALUE}\"\n    ;;\n  --enable-*)\n    ENABLED_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    enable_library \"${ENABLED_LIBRARY}\"\n    ;;\n  --disable-lib-*)\n    DISABLED_LIB=$(echo $1 | sed -e 's/^--[A-Za-z]*-[A-Za-z]*-//g')\n\n    disabled_libraries+=(\"${DISABLED_LIB}\")\n    ;;\n  --disable-*)\n    DISABLED_ARCH=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    disable_arch \"${DISABLED_ARCH}\"\n    ;;\n  --target=*)\n    TARGET=$(echo $1 | sed -e 's/^--[A-Za-z]*=//g')\n\n    export MACOS_MIN_VERSION=${TARGET}\n    ;;\n  *)\n    print_unknown_option \"$1\"\n    ;;\n  esac\n  shift\ndone\n\n# PROCESS FULL OPTION AS LAST OPTION\nif [[ -n ${BUILD_FULL} ]]; then\n  for library in {0..61}; do\n    if [ ${GPL_ENABLED} == \"yes\" ]; then\n      enable_library \"$(get_library_name \"$library\")\" 1\n    else\n      if [[ $(is_gpl_licensed \"$library\") -eq 1 ]]; then\n        enable_library \"$(get_library_name \"$library\")\" 1\n      fi\n    fi\n  done\nfi\n\n# DISABLE SPECIFIED LIBRARIES\nfor disabled_library in ${disabled_libraries[@]}; do\n  set_library \"${disabled_library}\" 0\ndone\n\n# IF HELP DISPLAYED EXIT\nif [[ -n ${DISPLAY_HELP} ]]; then\n  display_help\n  exit 0\nfi\n\n# DISABLE NOT SUPPORTED ARCHITECTURES\ndisable_macos_architecture_not_supported_on_detected_sdk_version \"${ARCH_ARM64}\"\n\necho -e \"\\nBuilding ffmpeg-kit ${BUILD_TYPE_ID}shared library for macOS\\n\"\necho -e -n \"INFO: Building ffmpeg-kit ${BUILD_VERSION} ${BUILD_TYPE_ID}for macOS: \" 1>>\"${BASEDIR}\"/build.log 2>&1\necho -e \"$(date)\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n# PRINT BUILD SUMMARY\nprint_enabled_architectures\nprint_enabled_libraries\nprint_reconfigure_requested_libraries\nprint_rebuild_requested_libraries\nprint_redownload_requested_libraries\nprint_custom_libraries\n\n# VALIDATE GPL FLAGS\nfor gpl_library in {$LIBRARY_X264,$LIBRARY_XVIDCORE,$LIBRARY_X265,$LIBRARY_LIBVIDSTAB,$LIBRARY_RUBBERBAND}; do\n  if [[ ${ENABLED_LIBRARIES[$gpl_library]} -eq 1 ]]; then\n    library_name=$(get_library_name \"${gpl_library}\")\n\n    if [ ${GPL_ENABLED} != \"yes\" ]; then\n      echo -e \"\\n(*) Invalid configuration detected. GPL library ${library_name} enabled without --enable-gpl flag.\\n\"\n      echo -e \"\\n(*) Invalid configuration detected. GPL library ${library_name} enabled without --enable-gpl flag.\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n      exit 1\n    fi\n  fi\ndone\n\necho -n -e \"\\nDownloading sources: \"\necho -e \"INFO: Downloading the source code of ffmpeg and external libraries.\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n# DOWNLOAD GNU CONFIG\ndownload_gnu_config\n\n# DOWNLOAD LIBRARY SOURCES\ndownloaded_library_sources \"${ENABLED_LIBRARIES[@]}\"\n\n# THIS WILL SAVE ARCHITECTURES TO BUILD\nTARGET_ARCH_LIST=()\n\n# BUILD ENABLED LIBRARIES ON ENABLED ARCHITECTURES\nfor run_arch in {0..12}; do\n  if [[ ${ENABLED_ARCHITECTURES[$run_arch]} -eq 1 ]]; then\n    export ARCH=$(get_arch_name \"$run_arch\")\n    export FULL_ARCH=$(get_full_arch_name \"$run_arch\")\n    export SDK_PATH=$(get_sdk_path)\n    export SDK_NAME=$(get_sdk_name)\n\n    # EXECUTE MAIN BUILD SCRIPT\n    . \"${BASEDIR}\"/scripts/main-macos.sh \"${ENABLED_LIBRARIES[@]}\"\n\n    TARGET_ARCH_LIST+=(\"${FULL_ARCH}\")\n\n    # CLEAR FLAGS\n    for library in {0..61}; do\n      library_name=$(get_library_name \"${library}\")\n      unset \"$(echo \"OK_${library_name}\" | sed \"s/\\-/\\_/g\")\"\n      unset \"$(echo \"DEPENDENCY_REBUILT_${library_name}\" | sed \"s/\\-/\\_/g\")\"\n    done\n  fi\ndone\n\necho -e -n \"\\n\"\n\n# DO NOT BUILD FRAMEWORKS\nif [[ ${NO_FRAMEWORK} -ne 1 ]]; then\n\n  # BUILD FFMPEG-KIT\n  if [[ -n ${TARGET_ARCH_LIST[0]} ]]; then\n\n    # INITIALIZE TARGET FOLDERS\n    initialize_prebuilt_macos_folders\n\n    # PREPARE PLATFORM ARCHITECTURE STRINGS\n    build_apple_architecture_variant_strings\n\n    if [[ -n ${FFMPEG_KIT_XCF_BUILD} ]]; then\n      echo -e -n \"\\nCreating xcframeworks under prebuilt: \"\n\n      create_universal_libraries_for_macos_xcframeworks\n\n      create_frameworks_for_macos_xcframeworks\n\n      create_macos_xcframeworks\n    else\n      echo -e -n \"\\nCreating frameworks under prebuilt: \"\n\n      create_universal_libraries_for_macos_default_frameworks\n\n      create_macos_default_frameworks\n    fi\n\n    echo -e \"ok\\n\"\n  fi\n\nelse\n  echo -e \"INFO: Skipped creating macOS frameworks.\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\nfi\n"
        },
        {
          "name": "react-native",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "tvos.sh",
          "type": "blob",
          "size": 8.0732421875,
          "content": "#!/bin/bash\n\n# CHECK IF XCODE IS INSTALLED\nif [ ! -x \"$(command -v xcrun)\" ]; then\n  echo -e \"\\n(*) xcrun command not found. Please check your Xcode installation\\n\"\n  exit 1\nfi\n\nif [ ! -x \"$(command -v xcodebuild)\" ]; then\n  echo -e \"\\n(*) xcodebuild command not found. Please check your Xcode installation\\n\"\n  exit 1\nfi\n\n# LOAD INITIAL SETTINGS\nexport BASEDIR=\"$(pwd)\"\nexport FFMPEG_KIT_BUILD_TYPE=\"tvos\"\nsource \"${BASEDIR}\"/scripts/variable.sh\nsource \"${BASEDIR}\"/scripts/function-${FFMPEG_KIT_BUILD_TYPE}.sh\ndisabled_libraries=()\n\n# SET DEFAULTS SETTINGS\nenable_default_tvos_architectures\n\n# SELECT XCODE VERSION USED FOR BUILDING\nXCODE_FOR_FFMPEG_KIT=$(ls ~/.xcode.for.ffmpeg.kit.sh 2>>\"${BASEDIR}\"/build.log)\nif [[ -f ${XCODE_FOR_FFMPEG_KIT} ]]; then\n  source \"${XCODE_FOR_FFMPEG_KIT}\" 1>>\"${BASEDIR}\"/build.log 2>&1\nfi\n\n# DETECT TVOS SDK VERSION\nexport DETECTED_TVOS_SDK_VERSION=\"$(xcrun --sdk appletvos --show-sdk-version 2>>${BASEDIR}/build.log)\"\necho -e \"\\nINFO: Using SDK ${DETECTED_TVOS_SDK_VERSION} by Xcode provided at $(xcode-select -p)\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\necho -e \"\\nINFO: Build options: $*\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n# SET DEFAULT BUILD OPTIONS\nexport GPL_ENABLED=\"no\"\nDISPLAY_HELP=\"\"\nBUILD_TYPE_ID=\"\"\nBUILD_FULL=\"\"\nFFMPEG_KIT_XCF_BUILD=\"\"\nBUILD_FORCE=\"\"\nBUILD_VERSION=$(git describe --tags --always 2>>\"${BASEDIR}\"/build.log)\nif [[ -z ${BUILD_VERSION} ]]; then\n  echo -e \"\\n(*): Can not run git commands in this folder. See build.log.\\n\"\n  exit 1\nfi\n\n# MAIN BUILDS ENABLED BY DEFAULT\nenable_main_build\n\n# PROCESS LTS BUILD OPTION FIRST AND SET BUILD TYPE: MAIN OR LTS\nfor argument in \"$@\"; do\n  if [[ \"$argument\" == \"-l\" ]] || [[ \"$argument\" == \"--lts\" ]]; then\n    enable_lts_build\n    BUILD_TYPE_ID+=\"LTS \"\n  fi\ndone\n\n# PROCESS BUILD OPTIONS\nwhile [ ! $# -eq 0 ]; do\n  case $1 in\n  -h | --help)\n    DISPLAY_HELP=\"1\"\n    ;;\n  -v | --version)\n    display_version\n    exit 0\n    ;;\n  --skip-*)\n    SKIP_LIBRARY=$(echo \"$1\" | sed -e 's/^--[A-Za-z]*-//g')\n\n    skip_library \"${SKIP_LIBRARY}\"\n    ;;\n  --no-bitcode)\n    export NO_BITCODE=\"1\"\n    ;;\n  --no-framework)\n    NO_FRAMEWORK=\"1\"\n    ;;\n  --no-output-redirection)\n    no_output_redirection\n    ;;\n  --no-workspace-cleanup-*)\n    NO_WORKSPACE_CLEANUP_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-[A-Za-z]*-[A-Za-z]*-//g')\n\n    no_workspace_cleanup_library \"${NO_WORKSPACE_CLEANUP_LIBRARY}\"\n    ;;\n  -d | --debug)\n    enable_debug\n    ;;\n  -s | --speed)\n    optimize_for_speed\n    ;;\n  -l | --lts) ;;\n  -x | --xcframework)\n    FFMPEG_KIT_XCF_BUILD=\"1\"\n    ;;\n  -f | --force)\n    export BUILD_FORCE=\"1\"\n    ;;\n  --reconf-*)\n    CONF_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    reconf_library \"${CONF_LIBRARY}\"\n    ;;\n  --rebuild-*)\n    BUILD_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    rebuild_library \"${BUILD_LIBRARY}\"\n    ;;\n  --redownload-*)\n    DOWNLOAD_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    redownload_library \"${DOWNLOAD_LIBRARY}\"\n    ;;\n  --full)\n    BUILD_FULL=\"1\"\n    ;;\n  --enable-gpl)\n    export GPL_ENABLED=\"yes\"\n    ;;\n  --enable-custom-library-*)\n    CUSTOM_LIBRARY_OPTION_KEY=$(echo $1 | sed -e 's/^--enable-custom-//g;s/=.*$//g')\n    CUSTOM_LIBRARY_OPTION_VALUE=$(echo $1 | sed -e 's/^--enable-custom-.*=//g')\n\n    echo -e \"INFO: Custom library options detected: ${CUSTOM_LIBRARY_OPTION_KEY} ${CUSTOM_LIBRARY_OPTION_VALUE}\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n    generate_custom_library_environment_variables \"${CUSTOM_LIBRARY_OPTION_KEY}\" \"${CUSTOM_LIBRARY_OPTION_VALUE}\"\n    ;;\n  --enable-*)\n    ENABLED_LIBRARY=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    enable_library \"${ENABLED_LIBRARY}\"\n    ;;\n  --disable-lib-*)\n    DISABLED_LIB=$(echo $1 | sed -e 's/^--[A-Za-z]*-[A-Za-z]*-//g')\n\n    disabled_libraries+=(\"${DISABLED_LIB}\")\n    ;;\n  --disable-*)\n    DISABLED_ARCH=$(echo $1 | sed -e 's/^--[A-Za-z]*-//g')\n\n    disable_arch \"${DISABLED_ARCH}\"\n    ;;\n  --target=*)\n    TARGET=$(echo $1 | sed -e 's/^--[A-Za-z]*=//g')\n\n    export TVOS_MIN_VERSION=${TARGET}\n    ;;\n  *)\n    print_unknown_option \"$1\"\n    ;;\n  esac\n  shift\ndone\n\n# PROCESS FULL OPTION AS LAST OPTION\nif [[ -n ${BUILD_FULL} ]]; then\n  for library in {0..61}; do\n    if [ ${GPL_ENABLED} == \"yes\" ]; then\n      enable_library \"$(get_library_name \"$library\")\" 1\n    else\n      if [[ $(is_gpl_licensed \"$library\") -eq 1 ]]; then\n        enable_library \"$(get_library_name \"$library\")\" 1\n      fi\n    fi\n  done\nfi\n\n# DISABLE SPECIFIED LIBRARIES\nfor disabled_library in ${disabled_libraries[@]}; do\n  set_library \"${disabled_library}\" 0\ndone\n\n# IF HELP DISPLAYED EXIT\nif [[ -n ${DISPLAY_HELP} ]]; then\n  display_help\n  exit 0\nfi\n\n# DISABLE NOT SUPPORTED ARCHITECTURES\ndisable_tvos_architecture_not_supported_on_detected_sdk_version \"${ARCH_ARM64_SIMULATOR}\"\n\n# DISABLE NOT SUPPORTED LIBRARIES\ndisable_tvos_videotoolbox_on_not_supported_sdk_version\n\n# CHECK SOME RULES FOR .framework BUNDLES\n\n# 1. DISABLE arm64-simulator WHEN arm64 IS ENABLED IN framework BUNDLES\nif [[ ${NO_FRAMEWORK} -ne 1 ]] && [[ -z ${FFMPEG_KIT_XCF_BUILD} ]] && [[ ${ENABLED_ARCHITECTURES[${ARCH_ARM64}]} -eq 1 ]] && [[ ${ENABLED_ARCHITECTURES[${ARCH_ARM64_SIMULATOR}]} -eq 1 ]]; then\n  echo -e \"INFO: Disabled arm64-simulator architecture which cannot co-exist with arm64 in the same framework bundle.\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n  disable_arch \"arm64-simulator\"\nfi\n\necho -e \"\\nBuilding ffmpeg-kit ${BUILD_TYPE_ID}shared library for tvOS\\n\"\necho -e -n \"INFO: Building ffmpeg-kit ${BUILD_VERSION} ${BUILD_TYPE_ID}for tvOS: \" 1>>\"${BASEDIR}\"/build.log 2>&1\necho -e \"$(date)\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n# PRINT BUILD SUMMARY\nprint_enabled_architectures\nprint_enabled_libraries\nprint_reconfigure_requested_libraries\nprint_rebuild_requested_libraries\nprint_redownload_requested_libraries\nprint_custom_libraries\n\n# VALIDATE GPL FLAGS\nfor gpl_library in {$LIBRARY_X264,$LIBRARY_XVIDCORE,$LIBRARY_X265,$LIBRARY_LIBVIDSTAB,$LIBRARY_RUBBERBAND}; do\n  if [[ ${ENABLED_LIBRARIES[$gpl_library]} -eq 1 ]]; then\n    library_name=$(get_library_name \"${gpl_library}\")\n\n    if [ ${GPL_ENABLED} != \"yes\" ]; then\n      echo -e \"\\n(*) Invalid configuration detected. GPL library ${library_name} enabled without --enable-gpl flag.\\n\"\n      echo -e \"\\n(*) Invalid configuration detected. GPL library ${library_name} enabled without --enable-gpl flag.\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n      exit 1\n    fi\n  fi\ndone\n\necho -n -e \"\\nDownloading sources: \"\necho -e \"INFO: Downloading the source code of ffmpeg and external libraries.\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\n\n# DOWNLOAD GNU CONFIG\ndownload_gnu_config\n\n# DOWNLOAD LIBRARY SOURCES\ndownloaded_library_sources \"${ENABLED_LIBRARIES[@]}\"\n\n# THIS WILL SAVE ARCHITECTURES TO BUILD\nTARGET_ARCH_LIST=()\n\n# BUILD ENABLED LIBRARIES ON ENABLED ARCHITECTURES\nfor run_arch in {0..12}; do\n  if [[ ${ENABLED_ARCHITECTURES[$run_arch]} -eq 1 ]]; then\n    export ARCH=$(get_arch_name \"$run_arch\")\n    export FULL_ARCH=$(get_full_arch_name \"$run_arch\")\n    export SDK_PATH=$(get_sdk_path)\n    export SDK_NAME=$(get_sdk_name)\n\n    # EXECUTE MAIN BUILD SCRIPT\n    . \"${BASEDIR}\"/scripts/main-tvos.sh \"${ENABLED_LIBRARIES[@]}\"\n\n    TARGET_ARCH_LIST+=(\"${FULL_ARCH}\")\n\n    # CLEAR FLAGS\n    for library in {0..61}; do\n      library_name=$(get_library_name \"${library}\")\n      unset \"$(echo \"OK_${library_name}\" | sed \"s/\\-/\\_/g\")\"\n      unset \"$(echo \"DEPENDENCY_REBUILT_${library_name}\" | sed \"s/\\-/\\_/g\")\"\n    done\n  fi\ndone\n\necho -e -n \"\\n\"\n\n# DO NOT BUILD FRAMEWORKS\nif [[ ${NO_FRAMEWORK} -ne 1 ]]; then\n\n  # BUILD FFMPEG-KIT\n  if [[ -n ${TARGET_ARCH_LIST[0]} ]]; then\n\n    # INITIALIZE TARGET FOLDERS\n    initialize_prebuilt_tvos_folders\n\n    # PREPARE PLATFORM ARCHITECTURE STRINGS\n    build_apple_architecture_variant_strings\n\n    if [[ -n ${FFMPEG_KIT_XCF_BUILD} ]]; then\n      echo -e -n \"\\nCreating xcframeworks under prebuilt: \"\n\n      create_universal_libraries_for_tvos_xcframeworks\n\n      create_frameworks_for_tvos_xcframeworks\n\n      create_tvos_xcframeworks\n    else\n      echo -e -n \"\\nCreating frameworks under prebuilt: \"\n\n      create_universal_libraries_for_tvos_default_frameworks\n\n      create_tvos_default_frameworks\n    fi\n\n    echo -e \"ok\\n\"\n  fi\nelse\n  echo -e \"INFO: Skipped creating tvOS frameworks.\\n\" 1>>\"${BASEDIR}\"/build.log 2>&1\nfi\n"
        }
      ]
    }
  ]
}