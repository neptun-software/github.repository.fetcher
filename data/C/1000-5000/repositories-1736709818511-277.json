{
  "metadata": {
    "timestamp": 1736709818511,
    "page": 277,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nmap/npcap",
      "stars": 3070,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.47265625,
          "content": "*~\n*.ncb\n*.suo\n*.sdf\n*.opensdf\n*.aps\n*.pdb\n*.exe\n*.msi\n*.zip\n*.ilk\n*.obj\n*.user\n*.cat\n*.sys\n*.dll\n*.ipch\n*.VC.db\nDebug/\nRelease/\nOEM Debug/\nOEM Release/\nWin7 Release SDV/\nsdv/\nbuild.err\nbuild.log\nmsbuild.log\nrunsdvui.cmd\nSDV-default.xml\nsdv-user.sdv\nsdv-map.h\nstaticdv.job\nStaticDVTrace.log\nnpcap.res\n/npcap-sdk/\n/dox/prj/\n*.VC.opendb\n.vs/\nWin* OEM RO Release/\nWin* OEM Release/\nWin* Release/\nWin* Debug/\nx64/\nARM64/\nARM64EC/\n/wpcap/build-win32/\n/wpcap/build-x64/\n/wpcap/build-ARM64/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.06640625,
          "content": "[submodule \"wpcap/libpcap\"]\n\tpath = wpcap/libpcap\n\turl = ../libpcap\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 80.7978515625,
          "content": "## Npcap 1.80 [2024-09-16]\n\n* On ARM64, Npcap now installs ARM64X pure-forwarder DLLs so that Npcap can be used by x86_64\n  processes running under emulation as well as x86 and ARM64 processes. Programmers do not need to\n  make any special changes to take advantage of this feature. Fixes [#585](http://issues.npcap.org/585).\n\n* Npcap now supports packet capture on SR-IOV virtual function adapters directly. Some\n  manufacturers, such as Intel, were already supported because they use a separate miniport driver\n  on top of the virtual function driver. Others that use a virtual function only, such as Broadcom,\n  are now supported. Fixes [#34](http://issues.npcap.org/34).\n\n* Due to Microsoft's deprecation of software publisher certificates with kernel-mode signing\n  capability, installations of Npcap on Windows 7, 8, and 8.1 will use the Npcap 1.79 driver by\n  default. The Npcap 1.80 driver can be chosen in the GUI and via the `/latest_driver=yes`\n  command-line option if driver signing is disabled in Windows. See [#751](http://issues.npcap.org/751).\n\n* Addressed faults found with Application Verifier: `WSACleanup()` was not being called in some\n  cases, and in other cases was called from the `DllMain()` function of `wpcap.dll`, which Microsoft\n  warns may cause deadlocks. Fixes [#742](http://issues.npcap.org/742).\n\n* Fixed a BSoD crash due to a race condition between `NPF_DetachAdapter` and\n  `NPF_Cleanup` when closing a capture handle. Fixes [#746](http://issues.npcap.org/746).\n\n* Upgraded build system to Visual Studio 2022. This version prevents building drivers for earlier\n  Windows versions, so the npcap.sys driver for Windows 7 through 8.1 is still built on Visual\n  Studio 2019. See [#629](http://issues.npcap.org/629).\n\n## Npcap 1.79 [2024-01-19]\n\n* Fixed a condition where disabling and re-enabling a network adapter while a\n  capture is active would prevent any packets from being received by the system\n  until the capture handle was closed. Fixes [#710](http://issues.npcap.org/710).\n\n* Introduced a workaround for a previously-unknown bug in Microsoft's bthpan.sys that was\n  causing BSoD crashes with `INVALID_MDL_RANGE` when Npcap or other drivers sent packets over\n  a Bluetooth-tethered connection. Microsoft intends to patch this Windows bug, but Npcap will\n  no longer trigger it regardless of patch status. Fixes [#708](http://issues.npcap.org/708).\n\n## Npcap 1.78 [2023-10-18]\n\n* Fixed a memory leak in Npcap 1.77 which occurs when the kernel buffer is\n  full. Fixes [#701](http://issues.npcap.org/701).\n\n* Correctly handle an allocation failure during out-of-memory condition,\n  avoiding a null pointer dereference. Fixes [#698](http://issues.npcap.org/698).\n\n## Npcap 1.77 [2023-09-29]\n\n* Fixed a memory leak in Npcap 1.76 only which occurs while capturing traffic\n  at high data rates. Fixes [#688](http://issues.npcap.org/688).\n\n* Fixed an issue in Npcap 1.76 where packets delivered to the driver by NDIS in\n  a single indication, having the same timestamp, would be placed in the packet\n  queue in reverse order. Fixes [#684](http://issues.npcap.org/684).\n\n* Fixed an issue with Npcap 1.75 and 1.76 where changing timestamp modes could\n  result in all packets being delivered with the same timestamp. Fixes [#695](http://issues.npcap.org/695).\n\n* Fixed an issue with the Npcap installer that caused it to install duplicate\n  certificates in the system's certificate store, which caused problems for\n  some software. The fixed installer will remove the duplicates. Fixes [#692](http://issues.npcap.org/692).\n\n## Npcap 1.76 [2023-07-19]\n\n* Our code signing key has been reissued to \"Nmap Software LLC\" replacing the\n  old \"Insecure.Com LLC\" subject name.\n\n* Improve performance of the driver by reducing lock contention and\n  consolidating data copy operations. This may help address\n  [#663](http://issues.npcap.org/663).\n\n* Additional fixes to locking discipline to potentially address a BSoD issue, [#679](http://issues.npcap.org/679).\n\n## Npcap 1.75 [2023-04-27]\n\n* Fix a critical regression in Npcap 1.74 which caused all captured packets to\n  have the same timestamp. Fixes [#668](http://issues.npcap.org/668).\n\n## Npcap 1.74 [2023-04-19]\n\n* Updated libpcap to 1.10.4.\n\n* Fixed an issue ([#667](http://issues.npcap.org/667)) that prevented capture\n  handles from receiving packets after a NDIS stack pause operation.\n\n* Fixed an issue that could cause inaccurate timestamps when multiple handles\n  were open and using different timestamp modes. Fixes [#666](http://issues.npcap.org/666).\n\n* Fixed an issue preventing raw WiFi frame capture since Npcap 1.60.\n\n* Fixed an issue causing \"failed to set hardware filter to promiscuous mode\"\n  errors with NetAdapterCx-based Windows 11 miniport drivers. Npcap was\n  interpreting the NDIS spec too strictly; we have [opened an issue with Microsoft](https://github.com/microsoft/Network-Adapter-Class-Extension/issues/14)\n  to address the fault in netadaptercx.sys. Fixes [#628](http://issues.npcap.org/628).\n\n* Addressed several code readability and portability fixes in Packet.dll\n  discovered using clang-tidy via Visual Studio Code Analysis.\n\n## Npcap 1.73 [2023-03-28]\n\n* Fixed an issue causing \"failed to set hardware filter to promiscuous mode\"\n  errors due to a new code path failing to return appropriate error codes. Fix\n  by Guy Harris in [PR #656](https://github.com/nmap/npcap/pull/656).\n  Fixes [#628](http://issues.npcap.org/628).\n\n* Fixed an issue with WlanHelper causing \"error 0x7b\" since Npcap 1.70.Fix by\n  Hauke Neitzel in [PR #652](https://github.com/nmap/npcap/pull/652).\n  Fixes [#649](http://issues.npcap.org/649).\n\n* Fixed an issue preventing capture handles from reattaching after NDIS stack\n  pause operations, resulting in persistent `ERROR_DEVICE_REMOVED` (1617)\n  errors. Fixes [#627](http://issues.npcap.org/627).\n\n* Restored original behavior of timestamps in the default case, \n  `PCAP_TSTAMP_HOST_HIPREC_UNSYNCED`/`TIMESTAMPMODE_SINGLE_SYNCHRONIZATION`.\n  Since Npcap 0.9994, the timestamp was resynchronized after NDIS stack pause\n  operations, which reduced timestamp drift from wall clock time but made it no\n  longer monotonic, making packet interval calculations inaccurate. This\n  restores the default behavior of WinPcap.\n\n* Fixed an issue that prevented Npcap 1.71 and 1.72 from being completely\n  removed on uninstall. A misconfigured npcap driver service had persisted.\n  Fixes [#657](http://issues.npcap.org/657).\n\n* Fixed an issue where applications using Npcap 1.20 or later DLLs with a Npcap\n  1.00 driver would crash due to a stack buffer overrun when the driver returned\n  too many bytes in response to a request for timestamp modes. Additionally,\n  changed NPFInstall.exe to attempt to uninstall the Npcap NetCfg component\n  prior to installation, in case an improperly-uninstalled component persists.\n\n* Updated libpcap to 1.10.3.\n\n## Npcap 1.72 [2022-12-14]\n\n* Fixed an issue where promiscuous mode or other hardware packet filters are ignored after a second\n  handle is opened on the same adapter, including handles opened in the process of listing adapters\n  with `pcap_findalldevs()`. Fixes [#647](http://issues.npcap.org/647).\n\n* Fixed an issue with validation of parameters to `PacketGetNetInfoEx()`. The `NEntries` parameter\n  was not being checked for values less than or equal to 0. Fixes [#625](http://issues.npcap.org/625).\nï»¿\n## Npcap 1.71 [2022-08-19]\n\n* Increase strictness in checking for and restoring adapter parameters modified during capture:\n  hardware packet filter and lookahead will only be modified if the original value can be\n  determined. This fixes issues with connectivity on certain adapter types (WWAN and some WiFi\n  adapters) after a capture is closed.\n\n* Modify NDIS binding parameters so that Npcap will bind both above and below a NIC teaming or\n  network bridge IM driver. This may improve capture options in related situations, like [#115](http://issues.npcap.org/115).\n\n* Updated build configurations to enable DEP and ASLR for npcap.sys, which were missing from the\n  original configs inherited from WinPcap. Additionally, enabled Control Flow Guard for Packet.dll\n  and all helper EXEs.\n\n* Fix a BSoD issue on Windows 8.1 due to registering a service without a name. Fixes [#565](http://issues.npcap.org/565).\n\n* The silent-install option (/S) in [Npcap OEM](https://npcap.com/oem/) is now case-insensitive so that /s works\n  as well.  All other Npcap installer options are already case-insensitive except for /D (destination directory)\n  which is handled by NSIS itself. Closes [#630](http://issues.npcap.org/630).\n\n* Fix an issue with admin-only mode where high-integrity processes (UAC not enforced) could not open\n  or list adapters. Fixes [#606](http://issues.npcap.org/606).\n\n* Restored an undocumented data member of the struct `ADAPTER` that is not used internally. Directly\n  accessing members of the `ADAPTER` struct from `Packet32.h` is highly discouraged, since the\n  API in `Packet32.h` is not intended for use apart from libpcap. Closes [#609](http://issues.npcap.org/609).\n\n* Extensive refactoring of driver code for performance and maintainability.\n\n## Npcap 1.70 [2022-06-24]\n\n* Major overhaul of Packet.dll to improve performance of `PacketGetAdapterNames()`, used by\n  `pcap_findalldevs()`, and `PacketOpenAdapter()`, used in all libpcap functions that return a\n  `pcap_t`. Reduced calls to `GetAdaptersAddresses()`, properly caching results for short periods.\n  Errors from lower functions are correctly propagated, making diagnosis of failures easier. Fixes\n  [#168](http://issues.npcap.org/168), [#61](http://issues.npcap.org/61), and [#586](http://issues.npcap.org/586).\n\n* PacketGetNetType() now always sets the LinkSpeed field to 0. Many adapters did not support the OID\n  that was being used to get the link speed, and libpcap (Npcap's published API) does not pass this\n  information through, so there should be no impact on the majority of software. Software that needs\n  link speed may use `pcap_oid_get_request()` or `GetAdaptersAddresses()` to get the information.\n\n* The undocumented `char PacketLibraryVersion[]` export has been removed. The `PacketGetVersion()`\n  function is the documented way to get the runtime version of the Packet.dll library.\n\n* Concurrently released the Npcap SDK Version 1.13 to reflect removal of PacketLibraryVersion and to\n  add SAL annotations to most function prototypes and several struct fields. See SDK changelog at\n  https://github.com/nmap/npcap/blob/master/SDK_CHANGELOG.md\n\n* Packet injection operations (`pcap_inject()`, `PacketSendPacket()`, `pcap_sendqueue_transmit()`,\n  and `PacketSendPackets()`) now properly pend the related Write IRP until the NBLs have\n  been returned by NDIS. This may make packet injection more efficient.\n\n* Packet injection operations are no longer limited to one at a time. Multiple threads can issue\n  multiple send operations concurrently on the same capture handle without issue, unless system\n  resource limits result in allocation failures. Additionally, WinPcap's limit of 256 concurrent\n  sends on each adapter has been removed. Each Write call is still synchronous, however.\n\n* Loopback packet capture and injection now uses fewer WFP filters and callbacks, avoids duplicate\n  packet processing, uses inspection rather than blocking filters, and persists callout driver\n  objects while still removing callout filters when captures are not using them. These and other\n  improvements increase loopback capture efficiency and reduce interference with other network\n  components.\n\n* Npcap is only supported on Windows 7 SP1 and later, and requires KB4474419 to support SHA-2\n  signature validation. The installer will now check these specific requirements, rather than\n  attempting an installation that will fail anyway.\n\n* Added timeouts to subprocess executions in the installer to prevent a hung installation.\n\n* Fixed a minor issue with Npcap OEM's silent installer: Npcap 1.55 and later ought to avoid\n  reinstalling the same version if the existing installation options match the requested options,\n  but `/winpcap_mode=no` would never match.\n\n* Packet sendqueue operations (`pcap_sendqueue_transmit()`, `PacketSendPackets()`)\n  with time synchronization (`sync` parameter) have been improved to use timed waits when\n  possible, only falling back to busy wait for inter-packet delays of less than 50\n  microseconds. Time difference calculations have been revised to avoid integer overflows\n  and loss of precision. Fixes [#580](http://issues.npcap.org/580).\n\n* Packet sendqueue operations now more strictly check timestamp order. If an out-of-order\n  timestamp is encountered, the packet will not be transmitted. `PacketSendPackets()` will\n  set the last error value to `ERROR_INVALID_TIME`. Since packets may be\n  reported slightly out-of-timestamp-order on multiprocessor machines due to\n  processing delays, only timestamps that are more than 1ms earlier than the\n  preceding timestamp will generate the error.\n\n* Npcap is now built with the Win11 SDK and WDK (10.0.22000). We look forward to\n  implementing support for the exciting new features of NDIS and WFP.\n\n* Improve capture handle state transitions within the Npcap driver. Fixes BSoD\n  [#601](http://issues.npcap.org/601) as well as\n  [#584](http://issues.npcap.org/584), where the wrong error code was reported\n  when the adapter was detached and reattached.\n\n* Fix an issue where raw WiFi capture handles (`/dot11_support` install option) would not\n  reattach after a network disconnect and reconnect. Normal handles got this ability in\n  Npcap 1.60, but raw WiFi frame captures (monitor mode) did not take advantage of it.\n  Fixes [#591](http://issues.npcap.org/591).\n\n* Npcap now avoids setting hardware packet filters (`OID_GEN_CURRENT_PACKET_FILTER`,\n  `PacketSetHwFilter()`) that the miniport does not declare support for. This may improve\n  compatibility with WWAN (e.g. 3G and LTE) and VPN connections.\n\n* Npcap now tracks the original lookahead value (`OID_GEN_CURRENT_LOOKAHEAD`,\n  `PacketSetMaxLookahead()`) before requesting the max value from the miniport, and restores it once\n  the capture handle is closed. The practice of setting the lookahead to max value was inherited\n  from WinPcap, and may be changed in the future subject to performance testing.\n\n## Npcap 1.60 [2021-12-06]\n\n* Npcap can now tolerate network disconnections or NDIS stack\n  modifications that previously resulted in programs like Wireshark\n  stopping with the error \"PacketReceivePacket error: The device has\n  been removed. (1617)\". This error may still be returned, but user\n  programs can consider it a transient error.  If the network is\n  reconnected, capture can resume on the same handle.  Fixes\n  [#506](http://issues.npcap.org/506).\n\n* Improved validation for IRP parameters, resolving potential BSoD\n  crashes that could be triggered by software interacting directly\n  with the driver's device interface. These bugs still affect the last\n  releases of WinPcap. Thanks to Ilja Van Sprundel from IOActive for\n  reporting them.\n\n* Fix an issue with NX pool compatibility that caused Npcap 1.50 and\n  1.55 to fail to run on some Windows 7 systems. Fixes\n  [#536](http://issues.npcap.org/536).\n\n* Fix how the installer handles `/option=enforced`, which was broken\n  in Npcap 1.55. Fixes [#556](http://issues.npcap.org/556).\n\n* Concurrently released the Npcap SDK Version 1.12, which fixes native\n  ARM compilation by including the ARM64 wpcap.lib, among other\n  changes.  The SDK now has its own change log at\n  https://github.com/nmap/npcap/blob/master/SDK_CHANGELOG.md.\n\n* Further driver source code hardening to catch more bugs\n  before they manifest in worse ways. This includes adding more SAL\n  annotations for code analysis, extra assertions, etc.\n\n* The `/prior_driver` installer option now selects the Npcap 1.30\n  driver, since Microsoft's cross-certificate expired 30 minutes\n  before we signed Version 1.31. See\n  [#536](http://issues.npcap.org/536).\n\n* Simplified the code base by removing a bunch of unused or\n  unneccessary code. This includes \"kernel dump mode\" (`MODE_DUMP`)\n  which was inherited from WinPcap 3.1 even though it had already been\n  deactivated there in 2005.  Also removed legacy WinPcap code which allowed\n  their (long discontinued) \"Pro\" version DLL to install the driver\n  itself. This is not allowed by modern operating systems.  We were\n  able to remove a bunch of code from NPFInstall.exe too.  Updated the\n  INF file to prevent npf_wifi service from being configured, since it\n  was never actually used.\n\n* Fix an issue causing `pcap_setmode()`/`PacketSetMode()` with a value\n  of `MODE_CAPT` to fail. `MODE_CAPT` is the default for new handles,\n  so this only affects software that uses `MODE_STAT` and then\n  switches to `MODE_CAPT`, or software that expects a call to\n  `pcap_setmode(MODE_CAPT)` on a handle already in `MODE_CAPT` to\n  succeed. Fixes [#558](http://issues.npcap.org/558).\n\n* When installing Npcap in WinPcap API-Compatible mode (the default),\n  the Npcap installer will perform the uninstallation of WinPcap\n  directly instead of running the WinPcap uninstaller. This prevents\n  the WinPcap uninstaller from rebooting the system and allows us to\n  clean up partial or broken installations.\n\n* Further deprecate the \"Legacy loopback support\" option: The\n  npcapwatchdog scheduled task will not check for the existence of the\n  Npcap Loopback Adapter.\n\n* Added the `PnpLockDown` directive to the npcap.sys INF file for\n  additional Windows file protection of the driver binary.\n\n* Replaced a feature of NPFInstall.exe and the SimpleSC.dll NSIS\n  plugin with Powershell commands to improve installer size and\n  compatibility.  May fix [#226](http://issues.npcap.org/226).\n\n* While you won't see it in the code itself, we dramatically improved\n  our automated build and testing proceses.  We now run automated\n  native-arch builds and testing of multiple programs (particularly\n  the SDK Examples) on all 3 architectures (x86, x64, and ARM). All\n  tests are run with the debug build of the driver (assertions on) and\n  Driver Verifier with at least standard settings, and only when that\n  passes is the release build run through the same tests, also with\n  Driver Verifier.  The tests are also run in x86 emulation on x64 and\n  ARM.\n\n## Npcap 1.55 [2021-09-03]\n\n* Npcap installer can now recognize NetCfg status codes indicating that a\n  reboot is required (0x0004a020, `NETCFG_S_REBOOT`), and will prompt the user\n  to reboot. In silent mode, the installer will return code 3010 (0x0bc2,\n  `ERROR_SUCCESS_REBOOT_REQUIRED`) to indicate this result. Fixes [#224](http://issues.npcap.org/224).\n\n* The silent installer (only available in Nmap OEM) now offers better\n  control over when to remove and reinstall an existing Npcap. You can\n  specify your Npcap version number or feature requirements with the\n  new `/require_version`, `/require_features`, and `/force`\n  options. Software with strict requirements might re-run at startup\n  to ensure that Npcap hasn't been uninstalled or changed. If Npcap\n  still exists and meets your requirements, the installer quits\n  immediately. These new options are documented at\n  https://npcap.com/guide/npcap-users-guide.html and Nmap OEM is\n  described at https://npcap.com/oem/ . Fixes\n  [#523](http://issues.npcap.org/523).\n\n* Fixed an installation failure (0xe0000247) on Windows 8.1/Server 2012 R2 and\n  earlier systems which have not updated root certificates. The root certificates\n  are now installed to the Roots trust store. Fixes [#233](http://issues.npcap.org/233).\n\n* Fixed an issue since Npcap 1.30 where broadcast and subnet masks for adapters\n  returned by `pcap_findalldevs()` were in host byte order, displaying values\n  like \"0.240.255.255\". Fixes [#525](http://issues.npcap.org/525).\n\n* Libpcap 1.10.1 has been updated to include some recent changes to the libpcap-1.10\n  release branch which extend support to adapters with the NdisMediumIP media type,\n  including Wireguard Wintun virtual adapters. Fixes [#173](http://issues.npcap.org/173).\n\n* Added specific bad-value checks for issues originating in other drivers which\n  may be incorrectly attributed to Npcap. These checks, in combination with\n  additional `const` qualifiers, should serve as assurance that Npcap is not\n  modifying traffic during capture and cannot be responsible for such crashes.\n\n* Powershell commands launched by the installer are now run with the\n  `-NoProfile` option. Fixes [#529](http://issues.npcap.org/529).\n\n* Npcap SDK 1.11 released. This includes upstream libpcap changes to allow building with older\n  Visual Studio versions, as well as minor changes to add const qualifiers to parameters to several\n  Packet.dll functions.  Fixes [#518](http://issues.npcap.org/518).\n\n* Npcap installer now uses Unicode internally. This may result in mixed-encoding install.log files.\n\n## Npcap 1.50 [2021-06-22]\n\n* Fixed [#513](http://issues.npcap.org/513) which prevented Npcap 1.40 from installing.\n\n* Npcap can now be installed on Windows 10 for ARM64 devices. Both ARM64 and\n  x86 DLLs will be installed, allowing existing x86 applications such as Nmap\n  or Wireshark to run without modification.\n\n* Npcap SDK 1.10 release coincides with this release, providing updated\n  documentation and libs for ARM64.\n\n* Npcap code now passes Microsoft's Static Driver Verifier for NDIS drivers and\n  Visual Studio's Code Analysis \"AllRules\" ruleset. A couple of minor and\n  extremely-improbable bugs were fixed in addition to general code cleanup and annotation.\n\n* On Windows 8 and 8.1, the Npcap driver has been updated to NDIS 6.30,\n  supporting network stack improvements like RSC and QoS. Windows 10 still uses\n  NDIS 6.50 and Windows 7 uses NDIS 6.20.\n\n* Npcap is no longer distributed with SHA-1 digital signatures. Windows 7 and\n  Server 2008 R2 will require KB4474419 in order to install Npcap. All other\n  platforms support SHA-2 digital signatures by default.\n\n* Streamlined loopback packet injection to avoid using Winsock Kernel (WSK)\n  sockets. This removes a significant amount of complexity and overhead.\n\n* Due to Microsoft's [deprecation of cross-signed root certificates for kernel-mode code signing](https://docs.microsoft.com/en-us/windows-hardware/drivers/install/deprecation-of-software-publisher-certificates-and-commercial-release-certificates),\n  Npcap 1.40 may not install correctly on Windows versions prior to Windows 10.\n  Our testing did not show any issues, but users who experience installation\n  failures may use the `/prior_driver=yes` installation option to install the\n  Npcap 1.31 driver instead, which has no such issues.\n\n* The \"npcapwatchdog\" scheduled task, which ensures the Npcap driver service is\n  configured to start at boot, is now installed with a description when\n  possible (Windows 7 does not support creating scheduled tasks via PowerShell).\n  Fixes [#498](http://issues.npcap.org/498).\n\n* All PowerShell scripts installed or used during installation are now digitally signed.\n\n* Fix an issue where installation under Citrix Remote Access or other\n  situations would fail with the message \"Installer runtime error 255 at\n  76539962, Could not load SimpleSC.dll\". Fixes [#226](http://issues.npcap.org/226).\n\n* Ensure driver signature can be validated on systems without Internet access\n  by installing the entire certificate chain, including the chain for the\n  timestamp counter-signature. This should address [#233](http://issues.npcap.org/233).\n\n* Fix an issue with comparing adapter names retrieved from the Registry. This\n  prevented Npcap 1.31 from being used for SendToRx and other less-used\n  features. Fixes [#311](http://issues.npcap.org/311).\n\n* Npcap driver no longer excludes adapters based on media type, which may allow\n  capture on some devices that were previously unavailable.\n\n## Npcap 1.40 [2021-06-21]\n\n* This release was retracted due to installer issues. See [#513](http://issues.npcap.org/513).\n\n## Npcap 1.31 [2021-04-21]\n\n* Fix a bug with the non-default legacy loopback capture support that caused\n  all requests to open a capture handle to open the loopback capture instead.\n  It is recommended to not select \"Legacy loopback support\" at installation\n  unless you know your application relies on it. Fixes [#302](http://issues.npcap.org/302).\n\n* For Windows 10 and Server 2016 and later, restore the ability to capture\n  traffic on VMware VMnet interfaces such as the host-only and NAT virtual\n  networks. This will be restored for other supported Windows versions in a\n  later release. Fixes [#304](http://issues.npcap.org/304).\n\n## Npcap 1.30 [2021-04-09]\n\n* Restore raw WiFi frame capture support, which had been broken in a few ways\n  since Npcap 0.9983. Additional improvements enable `PacketSetMonitorMode()`\n  for non-admin-privileged processes, allowing Wireshark to correctly enable\n  monitor mode via checkbox without requiring WlanHelper.exe.\n\n* Fixed WlanHelper.exe to correctly set modes and channels for adapters, if run\n  with Administrator privileges. Fixes [#122](http://issues.npcap.org/122).\n\n* Improved speed of `pcap_findalldevs()` by using fewer calls to\n  `GetAdaptersAddresses()` and avoiding direct Registry inspection. The new\n  method may result in more adapters being available for capture than\n  previously reported. See [#169](http://issues.npcap.org/169).\n\n* Updated Packet.dll to use modern `HeapAlloc()` allocation, faster than the\n  legacy `GlobalAlloc()` inherited from WinPcap.\n\n* Improve error reporting from `PacketGetAdapterNames()` and related functions.\n\n## Npcap 1.20 [2021-03-10]\n\n* Upgrade wpcap.dll to libpcap 1.10. This change enables software to use\n  `pcap_set_tstamp_type()` to set the packet capture time source and precision\n  per capture handle. The currently-supported types (see\n  [`pcap-tstamp`](https://npcap.com/guide/wpcap/pcap-tstamp.html)) are:\n  * `PCAP_TSTAMP_HOST_HIPREC_UNSYNCED` - default, maps to `TIMESTAMPMODE_SINGLE_SYNCHRONIZATION`\n  * `PCAP_TSTAMP_HOST_LOWPREC` - maps to `TIMESTAMPMODE_QUERYSYSTEMTIME`\n  * `PCAP_TSTAMP_HOST_HIPREC` - maps to `TIMESTAMPMODE_QUERYSYSTEMTIME_PRECISE`\n\n* Fix an issue preventing `WlanHelper.exe` from changing WiFi parameters for\n  adapters which caused the error message \"makeOIDRequest::My_PacketOpenAdapter\n  error\". Fixes [#122](http://issues.npcap.org/122) and several other reports\n  of the same issue.\n\n* Fixed an issue that prevented NDIS protocol drivers from reducing the\n  hardware packet filter, even if the removed bits/filters were only set by\n  that protocol driver initially. This caused network interruptions on VMware systems.\n  Fixes [#106](http://issues.npcap.org/106).\n\n* Fixed an issue with `pcap_sendqueue_transmit()` that caused it to busy-wait\n  in an attempt to synchronize packet sends with pcap timestamps, even when the\n  program did not request synchronization. Fixes [#113](http://issues.npcap.org/113).\n\n* The installer will now safely remove and replace broken installations due to\n  [#268](http://issues.npcap.org/268).\n\n* Upgraded installer to NSIS 3, which improves compatibility with modern Windows versions.\n\n* Added application manifests to several installer tools and removed Windows\n  Vista from the manifests of others, improving compatibility.\n\n## Npcap 1.10 [2020-12-11]\n\n* Fixed an issue where our upgrade uninstaller would trigger the\n  [#1924](https://issues.nmap.org/1924) BSoD crash when upgrading from Npcap 0.9988 or older to\n  version 0.9996 or greater. Fixes [#268](http://issues.npcap.org/268).\n\n* Improved handling of large packets when a very small user buffer size is specified, which could\n  lead to stalled captures and dropped packets.\n\n* Fix a packet corruption issue when one capture handle sets a snaplen of exactly 256 bytes and\n  another sets a snaplen of greater than 256 bytes and the packet size exceeds 256 bytes.\n\n* Fix accounting of free space in the kernel buffer so that bugs like the previous one do not cause\n  space to be permanently lost, leading to dropped packets. Instead, use assertions to catch this\n  condition in testing with the debug build.\n\n* Check that the npcap driver service is configured for `SYSTEM_START` in the `npcapwatchdog`\n  scheduled task and correct it if necessary. Windows feature updates can modify this value.\n\n## Npcap 1.00 [2020-09-25]\n\n* After more than 7 years of development and 170 previous public releases, the\n  Nmap Project is delighted to release Npcap version 1.00!\n\n* New Packet.dll function `PacketGetTimestampModes()` to retrieve supported\n  packet timestamping modes. These do not currently vary by adapter, but\n  `TIMESTAMPMODE_QUERYSYSTEMTIME_PRECISE` is not supported on Windows 7, for\n  example. Fixes [#174](http://issues.npcap.org/174).\n\n* Npcap driver is now only signed with SHA256 signatures on platforms other\n  than Windows 7, which may resolve signature validation issues on some\n  systems. The Windows 7 driver is signed with SHA-1 signatures only.\n\n## Npcap 0.9997 [2020-08-25]\n\n* Fix an integer underflow in the amount of free buffer space available leading\n  to excessive memory consumption. Fixes [#223](http://issues.npcap.org/223).\n\n* Significantly reduced per-packet memory overhead for packets in the kernel capture buffer.\n\n* Replaced object pool/slab allocator with Windows lookaside lists, improving\n  performance by avoiding spinlocks and allowing the system to adjust memory\n  consumption.\n\n## Npcap 0.9996 [2020-08-07]\n\n* Fix a runaway memory leak triggered by low-resources condition leading to\n  system hangs. Fixes [#213](http://issues.npcap.org/213).\n\n* Fix a BSoD crash in `NPF_Read` in some high-traffic cases. Fixes [#206](http://issues.npcap.org/206).\n\n* Fix a handle leak in Packet.dll when enumerating interfaces. Fixes [#26](http://issues.npcap.org/26).\n\n* Fix an inconsistency between return value and IRP completion status in\n  `NPF_Read` when an adapter is removed. Driver Verifier would cause a bugcheck\n  (BSoD) in this case, and pcap API functions would not detect an error.\n  Fixes [#217](http://issues.npcap.org/217)\n\n* Improved performance by reusing allocated packet data buffers and\n  implementing `DISPATCH_LEVEL` tracking throughout the driver to speed up lock\n  acquisition.\n\n* When upgrading from compatible recent versions (currently Npcap 0.9985 and\n  newer), the installer will unpack a new `Uninstall.exe` and `NPFInstall.exe`\n  prior to removing the existing installation. This resolves issues with the\n  uninstallation process such as were common in Npcap 0.9991 through 0.9994.\n\n* Upgraded build system to Visual Studio 2019 and WDK 10.0.18362.0\n\n## Npcap 0.9995 [2020-07-10]\n\n* Fix a BSoD crash in `NPF_Read` when NDIS filter module is detached from the\n  adapter. Fixes [#194](http://issues.npcap.org/194)\n\n* On Windows 10, the Npcap driver has been updated to NDIS 6.50 and Windows 10\n  WFP compatibility, supporting network stack improvements like RSC.\n  Fixes [#196](http://issues.npcap.org/196).\n\n* Correctly obey maximum frame size for an adapter by querying\n  `OID_GEN_MAXIMUM_TOTAL_SIZE` instead of using MTU, which does not include\n  space for the link layer header. Fixes [#186](http://issues.npcap.org/186).\n\n* Fix detection of processes using Npcap resources during uninstall or upgrade.\n  The fix for [#2015](http://issues.nmap.org/2015) had broken this so such\n  processes were not terminated, leading to failed installations.\n\n* Obey snaplen (`pcap_set_snaplen()`) even if a packet filter is not set. This\n  is a backported change from upstream libpcap that corrects a deficiency that\n  has been present in all previous versions of WinPcap and Npcap.\n  Fixes [#201](http://issues.npcap.org/201).\n\n* Improvements to object pool/slab allocator to allow nonpaged memory to be\n  freed when not in use.\n\n* When installing Npcap OEM in silent mode, avoid running `C:\\Uninstall.exe` if\n  no existing Npcap installation is present.\n\n## Npcap 0.9994 [2020-06-12]\n\n* Fix a BSoD crash in `NPF_ReleaseOpenInstanceResources` due to miscounting of\n  number of open Loopback capture instances. Fixes [#185](http://issues.npcap.org/185).\n\n* Fix corrupted and missing packets in Npcap 0.9992 and 0.9993 due to reusing a\n  data structure that already contained packet data.\n\n* Ensure our SHA-1 code signing certificate is also installed on systems which\n  may require it. This was preventing installation on older platforms since\n  Npcap 0.9991.\n\n* Fix a crash in `NPFInstall.exe` that happened when trying to rebind Npcap to\n  the network stack as part of some installations. Reported by Microsoft App\n  Assure ISV Outreach Team.\n\n* When multiple packets are indicated in a single `FilterReceiveNetBufferLists`\n  callback, only get a single timestamp for all of them. Avoids extra calls to\n  KeQueryPerformanceCounter or KeQuerySystemTimePrecise which only ended up\n  measuring Npcap processing delay, not actual packet arrival time.\n\n* Fix a potential NULL pointer deref issue in `Objpool.h` macros if an\n  allocation were to fail and return a NULL pointer.\n\n* Fix parsing of `pnputil.exe` output that resulted in Npcap drivers not being\n  cleared from the DriverStore before installing or upgrading. This led to\n  older drivers being preferred in some cases, such as installing an unsigned\n  driver in test mode.\n\n* Move all capture- and injection-related initialization code out of\n  `NPF_OpenAdapter`, improving efficiency of operations like listing adapters\n  or performing OID requests without starting a full capture.\n\n* Added SAL annotations to most driver functions to improve static analysis.\n  Found one issue related to using a NULL NDIS handle in an allocation\n  function, which is not supported on Windows 7.\n\n* Allow driver to load even if there is a problem initializing loopback capture\n  or injection functions. The loopback capture device will simply be\n  unavailable in that case.\n\n## Npcap 0.9993 [2020-06-05]\n\n* Fix a BSoD crash in `NPF_DoInternalRequest` triggered by suspending the\n  system while a capture is running. Added source annotations to allow static\n  analysis to catch bugs like this in the future. Fixes [#181](http://issues.npcap.org/181).\n\n* Fix a bug introduced in Npcap 0.9992 which caused loopback capture to fail if\n  any loopback capture had been previously started and finished.\n\n* Fix packet length calculation for loopback capture. The packet length was\n  being counted twice, leading to junk data being appended to captured packets.\n\n* If installation fails for any reason other than a failure to uninstall the\n  previous version of Npcap, the current version's uninstaller will be used to\n  clean up any partial installation. The only remaining files will be the\n  `install.log` and `NPFInstall.log` in the  Npcap installation directory.\n\n* Replaced ReadWriteLock mechanisms with improved `NDIS_RW_LOCK_EX` new in NDIS\n  6.20 for improved performance.\n\n* Moved object pool for captured packets from the filter module (adapter)\n  object to the open instance (pcap handle) to allow memory to be recovered\n  after a capture is closed.\n\n## Npcap 0.9992 [2020-06-03]\n\n* Npcap issues are now tracked on [their own Github Issues\n  page](http://issues.npcap.org), separate from Nmap issues. Many existing\n  issues have been migrated, and issue numbers may have changed.\n\n* Rewrote the kernel packet capture buffer code again to avoid requiring a\n  separate worker thread. Instead, captured packets are held directly in a\n  synchronized queue. The worker thread introduced in Npcap 0.9991 was unable\n  to keep up with the volume of packet requests, leading to buffer bloat and\n  reduced performance.\n\n* Avoid initializing loopback capture-related functions and processing packets\n  as soon as an adapter is opened. This will improve performance since adapters\n  are opened as part of listing adapters.\n\n* Fix a crash in NPFInstall.exe when terminating processes which are using\n  Npcap resources. This could lead to failed installations and message windows\n  about \"A LWF & WFP driver installation tool has stopped working.\"\n\n* Update Npcap from NDIS 6.10 to NDIS 6.20, which limits its compatibility to\n  Windows 7 and higher. Closes [#167](http://issues.npcap.org/167).\n\n* Fix a bug in Npcap 0.9991 which prevented packets from being captured until a\n  BPF filter had been set. Fixes [#168](http://issues.npcap.org/168) (migrated\n  from nmap/nmap#2037).\n\n* Allow capture statistics and captured packets remaining in the buffer to be\n  retrieved when an adapter is removed. Fixes [nmap/nmap#2036](https://issues.nmap.org/2036).\n\n* Use WMI instead of the Windows 10-only `Get-NetAdapter` Powershell cmdlet in\n  the DiagReport tool. Fixes [nmap/nmap#611](https://issues.nmap.org/611).\n\n## Npcap 0.9991 [2020-05-04]\n\n* Switched our code signing certificate back to DigiCert after some users found\n  older Windows versions could not validate the signature on our driver for\n  versions 0.9985 through 0.9990.  The driver is again dual-signed with SHA-1\n  and SHA-2 certificates. See [#2012](https://issues.nmap.org/2012).\n\n* Major changes to management of Npcap driver's circular packet buffer,\n  switching from per-CPU unshared segments to a single worker thread managing a\n  queue of work items. This improves buffer utilization, reduces the amount of\n  time spent processing in the network stack, and should reduce packet loss.\n  See [#1967](https://issues.nmap.org/1967).\n\n* Several performance-related improvements to the NDIS filter driver: Switched\n  from SpinLocks to ReadWriteLocks for several crucial shared data structures,\n  which will improve performance by reducing resource contention on\n  multiprocessor systems, and introduced an object-pool allocation pattern for\n  several frequently-used short-lifetime objects, improving performance by\n  reducing memory allocations.\n\n* Again restore \"unused\" NDIS filter callbacks which cause Windows 7 to lose\n  connectivity when they are removed. See [#1998](https://issues.nmap.org/1998).\n\n* Include debug symbols for `wpcap.dll` in our debug symbols zip file at\n  https://npcap.com/#download . Fixes [#1844](https://issues.nmap.org/1844).\n\n* Fixed [#1996](https://issues.nmap.org/1996): heap corruption in\n  `NPFInstall.exe` since Npcap 0.9989 leading to hung installs when the \"raw\n  802.11 traffic\" option was checked.\n\n* Fixed [#2014](https://issues.nmap.org/2014): Npcap OEM silent install\n  produced a dialog when installing over an existing installation of the same\n  version.\n\n* Uninstaller improvements related to removing the installation directory,\n  properly killing processes using Npcap DLLs, not leaving a partial\n  installation if a step fails. Fixes [#2013](https://issues.nmap.org/2013)\n  and [#2015](https://issues.nmap.org/2015).\n\n## Npcap 0.9990 [2020-04-04]\n\n* Improve compatibility with WinPcap's behavior regarding injected traffic.\n  WinPcap uses inefficient loopback to capture all outbound traffic, but allows\n  `PacketSetLoopbackBehavior()` to avoid this for injected traffic. Because of\n  Npcap's more efficient design, injected traffic was never looped back up to\n  protocol drivers, causing problems for some users who relied on this behavior.\n  Now, injected traffic follows the same path as with WinPcap, though ordinary\n  traffic is unaffected. For highest efficiency without loopback, use\n  `PacketSetLoopbackBehavior(NPF_DISABLE_LOOPBACK)`. Fixes [#1343](https://issues.nmap.org/1343),\n  [#1929](https://issues.nmap.org/1929), and [GNS3/gns3-gui#2936](https://github.com/GNS3/gns3-gui/issues/2936)\n\n* No longer honor `NDIS_PACKET_TYPE_ALL_LOCAL` set via `PacketSetHwFilter()`.\n  This packet filter causes all local traffic to be routed through an unoptimized\n  loopback path within NDIS, which was necessary to capture outgoing traffic in\n  WinPcap but is no longer needed in Npcap. Instead, this value will be treated as\n  `NDIS_PACKET_TYPE_DIRECTED | NDIS_PACKET_TYPE_MULTICAST | NDIS_PACKET_TYPE_BROADCAST`.\n\n* Fix a bug that caused `TIMESTAMPMODE_QUERYSYSTEMTIME_PRECISE` to fall back to\n  `TIMESTAMPMODE_QUERYSYSTEMTIME` even when `KeQuerySystemTimePrecise()` was\n  available. Fix by Mauro Levra in [PR#23](https://github.com/nmap/npcap/pull/24).\n\n* Installer will now install an intermediate CA cert that was missing from some\n  systems, which is needed to verify the driver's digital signature. Only\n  affects Windows versions prior to Windows 10.\n\n* Backport a fix from libpcap needed to properly support\n  `NdisMediumWirelessWan`. See [#1573](https://issues.nmap.org/1573).\n\n* Include experimental support for AirPcap cards if `airpcap.dll` (not\n  included) is installed.\n\n## Npcap 0.9989 [2020-03-19]\n\n* Fix a BSOD crash in `NPF_OpenAdapter` due to reading past the end of a\n  string. Fixes [#1924](https://issues.nmap.org/1924)\n\n* Fix a BSOD crash (NULL pointer dereference) in `NPF_Restart`.\n  Fixes [#1964](https://issues.nmap.org/1964).\n\n* Fix a memory leak in the Loopback WFP filter. Additionally, WFP callbacks\n  will be unregistered when all loopback captures are closed, reducing impact\n  of related code when not in use. Fixes [#1966](https://issues.nmap.org/1966).\n\n* New Packet.DLL function `PacketSetTimestampMode()` allows a user program to\n  set the method used to timestamp packets as they arrive. See [#1775](https://issues.nmap.org/1775).\n  Supported modes are:\n  * `TIMESTAMPMODE_SINGLE_SYNCHRONIZATION` - default monotonic timestamps based\n   on `KeQueryPerformanceCounter()`\n  * `TIMESTAMPMODE_QUERYSYSTEMTIME` - low-precision wall clock time based on\n   `KeQuerySystemTime()`\n  * `TIMESTAMPMODE_QUERYSYSTEMTIME_PRECISE` - high-precision wall clock time\n   based on `KeQuerySystemTimePrecise()`, new in this release and only\n   available on Windows 8 and newer. See [#1407](https://issues.nmap.org/1407).\n\n* Remove some problematic timestamp modes:\n  `TIMESTAMPMODE_SYNCHRONIZATION_ON_CPU_WITH_FIXUP` and\n  `TIMESTAMPMODE_SYNCHRONIZATION_ON_CPU_NO_FIXUP` were undocumented;\n  `TIMESTAMPMODE_RDTSC` was x86-only and not suitable for multi-processor\n  systems. See [#1829](https://issues.nmap.org/1829).\n\n* The Npcap SDK 1.05 will be released to include the new\n  `PacketSetTimestampMode()` function.\n\n## Npcap 0.9988 [2020-03-05]\n\n* If a capture is in progress when the system is suspended, it will continue\n  without interruption after the system is woken. This also prevents capture\n  interruptions when the OS makes certain network stack changes.\n  Fixes [#1903](http://issues.nmap.org/1903).\n\n* If the npcap driver is stopped, Packet.dll will attempt to start it\n  automatically. This feature requires Administrator privilege and had been\n  removed in Npcap 0.9983. Fixes [#1911](http://issues.nmap.org/1911). \n\n* Fix the check for fragmented packets in loopback capture.\n  Closes [PR #22](https://github.com/nmap/npcap/pull/22).\n\n* Eliminate clone/block/inject pattern from loopback capture except for packets\n  already injected by Npcap. Should fix [#1529](http://issues.nmap.org/1529)\n  and [#1789](http://issues.nmap.org/1789).\n\n* Fix an issue in the Npcap OEM installer where silent mode would not detect a\n  failure to install the npcap driver. Fixes [#1910](http://issues.nmap.org/1910).\n\n* Improve the installer to avoid broken installations and allow the installer\n  to continue if a broken installation is detected. Fixes [#1935](http://issues.nmap.org/1935).\n\n* Formally removed support for Windows Vista and Server 2008 r1, which\n  are no longer supported by Microsoft either. This allows us to support\n  newer Windows WFP and NDIS features for better performance and\n  compatibility. Folks who must still run these ancient Windows releases\n  should use Npcap version 0.9984 from\n  https://npcap.com/dist/?C=M;O=D. That was the last Npcap release\n  to support the old (and less secure) SHA-128 driver signatures\n  required by these Windows Vista/2008. Please note that Windows Server\n  2008 r2 and Windows 7 are still supported in this release even though\n  they have also passed their Microsoft end-of-life dates.\n\n## Npcap 0.9987 [2020-02-03]\n\n* Fix an issue where Npcap begins dropping large packets, then smaller ones\n  until finally all packets are dropped. Our fix changes the way remaining free\n  space in the kernel buffer is calculated, which ought to prevent the free\n  space accounting from drifting from reality. Fixes\n  [#1891](http://issues.nmap.org/1891).\n\n* Fix a potential race condition when opening the loopback capture adapter. If\n  two threads simultaneously determine that the WFP filters need to be\n  registered, each may open a handle to the WFP engine using the same global\n  pointer, leading to a double-free when the second one tries to close the\n  handle.\n\n* Allow Packet.dll and the npcap driver to skip loopback-related operations,\n  including WFP and WSK setup, if the `LoopbackSupport` Registry key is set\n  to 0. This configuration will not be supported by the installer, but may\n  serve as a workaround for problems that may be related to Npcap's loopback\n  traffic capture and injection capability.\n\n* Ensure open handles to the Service Control Manager are closed on error in\n  PacketGetFileVersion. Fixes [#1882](http://issues.nmap.org/1882).\n\n## Npcap 0.9986 [2019-12-17]\n\n* Fix a driver signing issue that made Npcap 0.9985 uninstallable on default\n  configurations of Windows 8.1 and older, as well as certain older Windows\n  Server releases. Fixes [#1856](http://issues.nmap.org/1856).\n\n## Npcap 0.9985 [2019-12-13]\n\n* The Nmap Project's (Insecure.Com LLC) code signing certificate has been\n  renewed, and no longer exists as a SHA-1 certificate. Windows Vista and\n  Server 2008 may therefore not recognize the digital signatures on the\n  filter driver so a warning may be presented upon install. Please note\n  that Microsoft is ending support for these operating systems in January 2020.\n\n* WinPcap API-compatible mode no longer installs a separate filter driver.\n  Packet.DLL will translate NPF device names so that they are all serviced by\n  the npcap.sys driver. The npf.sys driver has been removed. See\n  [#1812](http://issues.nmap.org/1812).\n\n* Improve the speed of `pcap_findalldevs` by reducing the number of calls to\n  `GetAdaptersAddresses`, removing a redundant function call, and improving\n  buffer reallocation. Patch by Tomasz MoÅ\n  ([#20](https://github.com/nmap/npcap/pull/20)).\n\n* Temporary DLLs unpacked during installation are now signed with our code\n  signing certificate. Certain strict application whitelisting systems were\n  complaining about unsigned DLL's loaded from a temporary directory.\n\n* Fixed a bug in the uninstaller preventing downgrades to prior versions of\n  Npcap. On 64-bit Windows, the driver file `npcap.sys` was not properly\n  removed, and Windows would not replace it with any older version. Fixes\n  [#1686](http://issues.nmap.org/1686).\n\n## Npcap 0.9984 [2019-10-30]\n\n* Update libpcap to 1.9.1. See [the libpcap CHANGES\n  file](https://github.com/the-tcpdump-group/libpcap/blob/libpcap-1.9.1/CHANGES)\n  for this release. This update addresses several CVE-identified vulnerabilities.\n\n* Address several code quality issues identified by Charles E. Smith of\n  Tangible Security using Coverity source code analysis.\n\n* Fixed processing of the \"enforced\" value for several command-line installer\n  options. Fixes [#1719](http://issues.nmap.org/1719).\n\n* The `DisplayName` value in the Uninstall registry key for Npcap no longer\n  includes the version number, which has always been available in the\n  `DisplayVersion` value. Instead, it will include the product name and\n  edition, e.g. \"Npcap\" or \"Npcap OEM\". This value will also be recorded in the\n  `Edition` value under the npcap service's Parameters registry key.\n\n* Fixed a couple of issues with the\n  [DiagReport tool](https://npcap.com/guide/npcap-users-guide.html#npcap-issues-diagreport)\n  used for bug report diagnostics: remove extraneous partial output lines\n  ([#1760](http://issues.nmap.org/1760)), and avoid relying on the Server\n  service to determine privilege level ([#1757](http://issues.nmap.org/1757)).\n\n## Npcap 0.9983 [2019-08-30]\n\n* Npcap can now detect newly-added network adapters without restarting the\n  driver. Fixes [#664](http://issues.nmap.org/664).\n\n* Loopback capture and injection no longer requires the Npcap Loopback Adapter\n  to be installed. This is a minor API change, so Nmap 7.80 and earlier will\n  still require the adapter to do localhost scans, but Wireshark and most other\n  software will not require changes. Loopback capture uses the device name\n  `NPF_Loopback` instead of `NPF_{GUID}`, where `GUID` has to be looked up in\n  the Registry. The Npcap Loopback Adapter can still be installed by selecting\n  \"Legacy loopback support\" in the installer or using the\n  `/loopback_support=yes` command-line option. The`LoopbackSupport` Registry\n  value will always be 0x00000001.\n\n* The `DltNull` Registry setting and the `/dlt_null` installer option are no\n  longer supported. Loopback capture will use the `DLT_NULL` link type as\n  described [in the tcpdump\n  documentation](https://www.tcpdump.org/linktypes.html). Loopback packet\n  injection will also use this link type instead of requiring a dummy Ethernet\n  header to be constructed. The `DltNull` Registry value will still be present\n  and set to `1` for software that consults this value.\n\n* Some operations like `pcap_stats()` can now be completed even after the\n  adapter that was in use is removed. See [#1650](http://issues.nmap.org/1650).\n\n* Fixed a crash that could happen when stopping the driver during a loopback\n  traffic capture. Fixes [#1678](http://issues.nmap.org/1678).\n\n## Npcap 0.9982 [2019-07-30]\n\n* Fix the packet statistics functionality used by `pcap_stats()`, which was\n  broken in 0.9981. Fixes [#1668](http://issues.nmap.org/1668).\n\n* Rework the flow of packets through the WFP callout driver that implements\n  loopback traffic capture. This should prevent clobbering of redirect context\n  data reported in [#1529](http://issues.nmap.org/1529).\n\n* Restore the `/dlt_null` installer option to default to \"yes\" since it has\n  been defaulting to \"no\" since Npcap 0.992. Using `DLT_NULL` for loopback\n  capture is slightly more efficient than creating a dummy Ethernet header,\n  which was the default before.\n\n## Npcap 0.9981 [2019-07-23]\n\n* When upgrading Npcap, do not uninstall the existing Npcap until the user\n  clicks the Install button. Previously, the existing Npcap was uninstalled\n  prior to the first options screen, so that canceling the upgrade left no\n  working Npcap on the system.\n\n* Redefine the I/O control codes used by Npcap using the `CTL_CODE` macro to\n  ensure proper access control and consistent parameter passing. This is not a\n  published API, but the change will require that Packet.DLL and the npcap\n  driver are the same version.\n\n* Fix a 1-byte overrun in NPFInstall.exe when killing processes with Npcap DLLs\n  in use.\n\n* In cases where PacketOpenAdapter is given an adapter name in UTF-16LE,\n  translate it to ASCII before doing string operations on it. See\n  [#1575](http://issues.nmap.org/1575).\n\n* Significant reorganization of internal data structures to reduce memory use\n  and initialization overhead.\n\n## Npcap 0.997 [N/A]\n\n* Internal testing build, no public release.\n\n## Npcap 0.996 [2019-06-15]\n\n* Fix a crash when stopping the npcap driver service, such as when upgrading\n  Npcap, `DRIVER_IRQL_NOT_LESS_OR_EQUAL` in `NPF_DetachAdapter`. Since Npcap\n  0.994 and 0.995 may crash when upgrading, the installer will offer to disable\n  the npcap driver service if it is running, allowing the user to reboot and\n  attempt the install again, avoiding a crash. Fixes [#1626](http://issues.nmap.org/1626).\n\n* Ensure the uninstaller for the previous version of Nmap is called when\n  upgrading. Npcap 0.95 through 0.995 erroneously skipped this step in simple\n  non-silent upgrades, which could cause multiple Npcap Loopback Adapters to be\n  installed.\n\n## Npcap 0.995 [2019-05-10]\n\n* Fix a crash reported via Microsoft crash telemetry,\n  `DRIVER_IRQL_NOT_LESS_OR_EQUAL` in `NPF_NetworkClassify` introduced in Npcap\n  0.994.  Fixes [#1591](http://issues.nmap.org/1591).\n\n## Npcap 0.994 [2019-05-07]\n\n* Fix the installer options screen, which would immediately proceed to\n  installation when you clicked on the \"Support loopback traffic\" option. Fixes\n  [#1577](http://issues.nmap.org/1577).\n\n* Use the `/F` option to `SCHTASKS.EXE` in the installer so that the\n  `npcapwatchdog` task can be successfully overwritten if it is present, though\n  newer uninstallers also remove the task. Fixes [#1580](http://issues.nmap.org/1580).\n\n* Fix the `CheckStatus.bat` script run by the `npcapwatchdog` scheduled task to\n  correctly match output of `reg.exe` on non-English systems. Fixes\n  [#1582](http://issues.nmap.org/1582).\n\n* Improve synchronization between WFP (Loopback) and NDIS (control) functions\n  within the driver, which ought to improve stability during system\n  sleep/suspend events, particularly an access violation in\n  `NPF_NetworkClassify` observed via Microsoft crash telemetry.\n\n## Npcap 0.993 [2019-04-27]\n\n* Complete the fix for [#1398](http://issues.nmap.org/1398) that was only\n  partially applied in Npcap 0.992. Due to this partial fix, the user-provided\n  buffer was double-freed, resulting in a `BAD_POOL_CALLER` BSoD. This issue\n  was separately reported as [#1568](http://issues.nmap.org/1568), and has been\n  issued the identifier CVE-2019-11490.\n\n* Fix output of `pcap_lib_version` to again report \"Npcap version 0.993, based\n  on libpcap version 1.9.0\" instead of \"libpcap version 1.9.0 (packet.dll\n  version 0.992)\". Npcap 0.992 was the only version affected. Fixes\n  [#1566](http://issues.nmap.org/1566).\n\n* Fix a regression in loopback capture that was causing the loopback adapter to\n  be missing from `pcap_findalldevs` until the driver was manually stopped and\n  restarted. Fixes [#1570](http://issues.nmap.org/1570).\n\n* Remove installer interface option \"Automatically start the Npcap driver at\n  boot time.\" Command-line and registry settings are still respected, but\n  automatic start will be the default for all new installations, since manual\n  start results in delays in network connectivity at boot. See\n  [#1502](http://issues.nmap.org/1502).\n\n* Avoid interpreting null or uninitialized memory as out-of-band media-specific\n  information for purposes of constructing the Radiotap header when capturing\n  in raw 802.11 monitor mode. Fixes [#1528](http://issues.nmap.org/1528).\n\n* Ensure the uninstaller removes the `npcapwatchdog` scheduled task.\n\n* Avoid an uninstaller failure if DLLs and executables are in use during\n  uninstall by causing them to be deleted at reboot. See\n  [#1555](http://issues.nmap.org/1555).\n\n## Npcap 0.992 [2019-03-24]\n\n* Update libpcap to 1.9.0. See [the libpcap CHANGES\n  file](https://github.com/the-tcpdump-group/libpcap/blob/libpcap-1.9.0/CHANGES)\n  for this release and [#1506](http://issues.nmap.org/1506).\n\n* Fix a bug in the fix for [#1406](http://issues.nmap.org/1406) that caused\n  capture filters to reject all packets when the packet header was offset from\n  the start of the kernel data structure.\n\n* Fix a bug in the fix for [#1398](http://issues.nmap.org/1398) that caused\n  BSoD (`BAD_POOL_CALLER`) due to mismatch in functions used to allocate and\n  free a data structure.\n\n* Remove installer interface option \"Use DLT_NULL as the loopback interface'\n  link layer protocol instead of DLT_EN10MB.\" Command-line and registry\n  settings are still respected, but `DLT_NULL` will be the default for all new\n  installations.\n\n* Remove installer interface option \"Support 802.1Q VLAN tag when capturing and\n  sending data,\" which was unsupported for three years. Support may be restored\n  in future releases, but the option has not had any effect in earlier\n  installers.\n\n## Npcap 0.991 [2019-03-14]\n\n* Fix a bug in the BPF packet filter engine that caused capture filters with\n  byte offsets to reject packets due to fragmentation within `NET_BUFFER`\n  structures. See [#1406](http://issues.nmap.org/1406) and\n  [#1438](http://issues.nmap.org/1438).\n\n* Fix a bug that caused several network device drivers to crash when using the\n  `pcap_sendqueue_transmit` function, due to queued network packets being\n  allocated from paged memory that paged out before the drivers accessed it.\n  See [#1398](http://issues.nmap.org/1398).\n\n* Fix a crash (`SYSTEM_EXCEPTION_NOT_HANDLED_M`) in `WSKCloseSocket` due to\n  double-free, reported via Microsoft crash telemetry.\n\n* Fix a BSOD inherited from WinPcap triggered when `PacketGetStats` is called\n  with low system resources. See [#1517](http://issues.nmap.org/1517).\n\n* Properly quote the path to the `CheckStatus.bat` script in the\n  `npcapwatchdog` scheduled task. See [#1513](http://issues.nmap.org/1513).\n\n* Fix errors when installing in WinPcap API-compatible mode over WinPcap when\n  Npcap install directory does not already exist. See\n  [#1456](http://issues.nmap.org/1456).\n\n## Npcap 0.99-r9 [2019-01-22]\n\n* Install a scheduled task at startup to check whether the Npcap Loopback\n  Adapter has been removed and restore it. Windows 10 feature updates remove\n  the Adapter. See [#1416](http://issues.nmap.org/1416).\n\n* Package the correct driver version. On some platforms, the Npcap 0.99-r8\n  installer would install the Npcap 0.99-r7 driver.\n\n* Fix a crash (`REFERENCE_BY_POINTER`) in `NPF_ReleaseOpenInstanceResources`\n  reported via Microsoft crash telemetry. See [#1419](http://issues.nmap.org/1419).\n\n## Npcap 0.99-r8 [2018-12-17]\n\n* Revert to using `SERVICE_SYSTEM_START` for the \"Automatically start Npcap at\n  boot\" option. The previous value, `SERVICE_AUTO_START` had been introduced as\n  a workaround for network interruption on Windows 7 that was finally solved in\n  Npcap 0.99-r7. See [#1208](http://issues.nmap.org/1208).\n\n* Removed extra Registry keywords from Npcap Loopback Adapter which were\n  causing it to not appear properly in Windows API calls.\n  Fixes [#1368](http://issues.nmap.org/1368).\n\n* Detect in-use WinPcap installations before attempting to overwrite DLLs.\n  Offer to terminate the processes just as we do for in-use Npcap.\n\n* [Improved documentation](https://npcap.com/guide/) based on WinPcap\n  documentation including updates for Npcap changes. Example code builds on\n  Visual Studio 2015 and works with Npcap. Npcap SDK 1.01 includes these changes.\n\n* Fix a crash in `NPF_RegisterCallouts` reported via Microsoft crash telemetry\n  caused by a failure when opening the Npcap Loopback Adapter for packet\n  capture.\n\n* On Windows 8 and Server 2012, Npcap will rebind to network adapters after\n  installation to ensure a more complete fix to\n  [#1031](http://issues.nmap.org/1031).\n\n## Npcap 0.99-r7 [2018-07-05]\n\n* Fixed the installer so that Npcap in WinPcap API-compatible mode can do\n  loopback capture. This capability is not guaranteed for future releases, but\n  was only missing from 0.99-r3 to 0.99-r6. Native-mode Npcap was unaffected.\n  Fixes [#1213](http://issues.nmap.org/1213)\n\n* Added a script, `FixInstall.bat`, to fix common problems with installations,\n  such as those caused by Windows 10 feature upgrades.\n  See [#1216](http://issues.nmap.org/1216)\n\n* Improved stability by restoring certain passthrough NDIS callbacks that are\n  not used, but appear to cause connectivity problems if omitted.\n  See [#1208](http://issues.nmap.org/1208).\n\n## Npcap 0.99-r6 [2018-06-12]\n\n* Fixed installation on Windows 8 and Server 2012 so that Npcap is able to\n  capture on adapters without requiring a reboot. Fixes\n  [#1031](http://issues.nmap.org/1031).\n\n* Fixed loss of networking on Windows 7 when Npcap was configured to start at\n  boot. Using `AUTO_START` instead of `SYSTEM_START` for the Npcap driver\n  service solves the problem. Fixes [#1208](http://issues.nmap.org/1208).\n\n* Fixed a crash reported via Microsoft crash telemetry,\n  `DRIVER_IRQL_NOT_LESS_OR_EQUAL` in `NPF_IOControl` when setting\n  `OID_GEN_CURRENT_LOOKAHEAD`. Fixes [#1194](http://issues.nmap.org/1194).\n\n* Fixed certain interactions between processes with open Npcap handles that\n  could allow one process to stop other running captures from receiving\n  packets. Fixes [#1035](http://issues.nmap.org/1035).\n\n## Npcap 0.99-r5 [2018-05-01]\n\n* Restored installer code to silently uninstall WinPcap if silent installation\n  in WinPcap API-compatible mode is needed (Npcap OEM only).\n\n* Removed several optional passthrough driver functions that can be handled\n  more efficiently by NDIS, since Npcap was not using them.\n\n* Added validation of IRP parameters for additional security.\n\n* Fixed a crash reported via Microsoft crash telemetry,\n  `DRIVER_IRQL_NOT_LESS_OR_EQUAL` in `NPF_SendCompleteExForEachOpen` when the\n  system is suspended. Fixes [#1193](http://issues.nmap.org/1193).\n\n* Bundle and install the correct public code signing certificate. The\n  certificate used to sign Npcap was updated for Npcap 0.99-r4, but the public\n  cert file included was not, leading to some unwanted publisher trust dialogs\n  during installation.\n\n## Npcap 0.99-r4 [2018-04-19]\n\n* On Windows 7, if Npcap driver installation fails due to maximum NDIS filters\n  installed, attempt to increase the limit. No such limit exists on other\n  Windows versions. Fixes [#1182](http://issues.nmap.org/1182).\n\n* Avoid some cmd.exe popup windows during installation. See\n  [#1188](http://issues.nmap.org/1188).\n\n* Improve the license to allow unlimited copies of Npcap to be used\n  (removes the 5 copy limitation) if the copies are solely used for\n  Nmap and/or Wireshark.\n\n## Npcap 0.99-r3 [2018-04-06]\n\n* Fix recording of the Npcap Loopback Adapter's name in the service registry\n  key. Loopback packet injection was broken in WinPcap API-compatible mode in\n  Npcap 0.99-r1 and 0.99-r2. Fixes [#1165](http://issues.nmap.org/1165).\n\n* Fix a double-close of a Registry key which could cause a crash in Packet.dll\n  when debugging. Fixes [#1163](http://issues.nmap.org/1163).\n\n## Npcap 0.99-r2 [2018-03-13]\n\n* Fix installer to work on 32-bit Windows.\n\n## Npcap 0.99-r1 [2018-03-05]\n\n* We now offer an Npcap OEM Edition internal-use license. This\n  provides all the advantages of Npcap OEM (such as the silent\n  installer) and removes the 5-copy limitation of the free Npcap,\n  while also providing for commercial support and updates.  It is\n  for companies who only want to use Nmap internally.  We also still\n  offer the Npcap OEM redistribution license for companies wanting to\n  redistribute Npcap with their software.  See\n  https://npcap.com/oem/.\n\n* Improved installation of the Npcap Loopback Adapter, ensuring it can be\n  correctly removed and reinstalled.\n\n* Packet.DLL now only looks in the driver service's `Parameters` Registry key\n  for installation options; in future releases, Npcap may stop writing these\n  options to the `HKLM:\\Software\\Npcap` registry key.\n\n* When NpcapHelper.exe is used for UAC elevation, the pipe it uses to\n  communicate with the calling process is now restricted to the user SID of the\n  calling process. Previously, any user could cause NpcapHelper to obtain\n  handles to other devices, though the handles were only valid for the calling\n  process.\n\n* Performed Visual Studio Code Analysis on Packet.DLL and cleaned up several\n  code health issues.\n\n* Improved debug logging, error checking, and diagnostics throughout.\n\n## Npcap 0.98 [2018-01-10]\n\n* Fix digital signatures for some files: OEM drivers were missing the Microsoft\n  Attestation signature required for Windows 10 1703, and the installer was\n  missing the SHA-1 signature required for Windows Vista.\n\n## Npcap 0.97 [2017-11-27]\n\n* Only include data rate and channel fields in the RadioTap header if they are\n  reported by the underlying WiFi card driver. See\n  [#1036](http://issues.nmap.org/1036).\n\n* When the Npcap installer detects that WinPcap is present, it will default to\n  installing in WinPcap API-compatible mode, replacing WinPcap. This can be\n  changed by the user in the interactive installer, or by setting the\n  `/winpcap_mode=no` command-line option.\n\n* The Silent installation feature of the Npcap installer is now limited to the\n  [Npcap OEM edition](https://npcap.com/oem/).\n\n## Npcap 0.96 [2017-10-31]\n\n* Set the `*IfType`, `*MediaType`, and `*PhysicalMediaType` registry values for\n  the Npcap Loopback Adapter. The values set should reduce the amount of\n  configuration that Windows attempts to do on the adapter, preventing it from\n  being labeled \"Unknown Network.\"\n\n* Record the ID of the Npcap Loopback Adapter in the registry when creating it,\n  instead of only in the installer. This allows users to remove and create the\n  adapter with NPFInstall directly, without requiring a reinstallation of Npcap.\n\n* Expand the Npcap public license to allow 5 installations rather than only 1.\n\n* Fix memory layout and accounting when writing Radiotap headers in raw 802.11\n  monitor mode. Fixes [#1001](http://issues.nmap.org/1001),\n  [#1028](http://issues.nmap.org/1028), and [#1036](http://issues.nmap.org/1036).\n\n## Npcap 0.95 [2017-10-19]\n\n* When upgrading, existing installation options will be retrieved from the\n  Registry. Command-line installer options will still override these.\n\n* The installer detects Win10pcap as distinct from WinPcap; since the installer\n  cannot uninstall Win10pcap, WinPcap API-compatible mode will be disabled in\n  the installer when it is present. Fixes [#999](http://issues.nmap.org/999).\n\n* The npcap.cat file is no longer dual-signed; since it was not a PE\n  executable, only one signature is supported. The invalid signature was\n  causing some installation failures. Fixes [#994](http://issues.nmap.org/994).\n\n* Silent installs will not downgrade the Npcap version unless the new\n  `/downgrade=yes` option is given. Any version of [Npcap OEM](https://npcap.com/oem/)\n   will be considered a \"newer version\" than any non-OEM version.\n\n## Npcap 0.94 [2017-08-29]\n\n* Npcap no longer prevents checksum offloading and Large Send Offloading on\n  adapters that support them. This may cause problems with sniffing outgoing\n  packets on those interfaces when those features are enabled, but users can\n  disable them through standard Windows configuration means. Fixes\n  [#989](http://issues.nmap.org/989)\n\n## Npcap 0.93 [2017-07-27]\n\n* Move the driver's Service Registry values from the\n  `HKLM:\\SYSTEM\\CurrentControlSet\\Services\\npcap` key to the `Parameters`\n  subkey. Applying Windows upgrades such as Windows 10 Creators Update deletes\n  nonstandard values from the service key; the Parameters subkey is where these\n  should be stored instead.\n\n* Prevent the installer/uninstaller from crashing when faced with an incomplete\n  Npcap installation, such as that created by applying a Windows version\n  upgrade. Safely distinguish between old WinPcap installations and broken\n  Npcap-in-WinPcap-API-mode installations. Fixes [#906](http://issues.nmap.org/906)\n\n## Npcap 0.92 [2017-06-12]\n\n* Force overwrite of files in installer, since uninstallers from versions\n  0.78r5 through 0.81 do not remove npcap.sys, leading to mismatched driver vs\n  DLL versions.\n\n* New installer commandline option to skip setting a restore point:\n  `/disable_restore_point=yes`\n\n## Npcap 0.91 [2017-06-06]\n\n* Fix WiFi interruption with certain hardware. This is a regression introduced\n  in Npcap 0.90, which had optimistically removed the fix from 0.10-r15.\n\n## Npcap 0.90 [2017-05-26]\n\n* Fix BSOD introduced in 0.85; Locking while being cleaned up is bad.\n\n* Fix WiFi interruption on Windows 7 in some circumstances, as demonstrated by\n  inability to connect when Kaspersky Internet Security is installed.\n\n## Npcap 0.86 [2017-04-12]\n\n* Fix BSOD introduced in 0.85; wrong driver build had been packaged. Fixes [#840](http://issues.nmap.org/840)\n\n## Npcap 0.85 [2017-04-10]\n\n* Fix BSOD by reverting to simpler pre-0.82 data structures but retaining the\n  spinlock improvement that was the core of that fix.\n\n## Npcap 0.84 [2017-03-28]\n\n* Fix a failure of 64-bit Npcap when installed in Admin-Only mode.\n  [#814](http://issues.nmap.org/814)\n\n## Npcap 0.83 [2017-03-04]\n\n* Fix a crash caused by recieving loopback traffic after Windows starts to\n  sleep. [#721](http://issues.nmap.org/721)\n\n* Don't override CLI installer options like `/wpcap_mode` when WinPcap is\n  found. [#717](http://issues.nmap.org/717)\n\n* Restore the uninstaller instruction that deletes the npcap driver files.\n\n## Npcap 0.82 [2017-02-23]\n\n* Fix a crash that happened when many concurrent processes were using Npcap.\n  If several of these quit during processing of a packet, the linked list of\n  processes could become corrupted. Solved this by using a fixed array with\n  copy-and-swap instead.\n\n## Npcap 0.81 [2017-02-16]\n\n* Moved distribution of executable installer to http://npcap.com/ from Github.\n\n* Write log files in UTF-8 encoding to preserve localized error messages.\n\n* Report human-readable error when LWF filter fails to be installed.\n\n* Add `*NdisDeviceType=1` key to registry for Loopback adapter. Fixes [#653](http://issues.nmap.org/653)\n\n## Npcap 0.80 [2017-01-09]\n\n* Signed the uninstaller executable.\n\n* Removed the legacy code supporting Windows XP and earlier.\n\n* Added this CHANGELOG\n\n* Fixed a few null pointer dereferences that may have led to Blue Screens under\n  some scenarios.\n\n* Restored changes from 0.78 r2 through 0.78 r4 that were accidentally omitted\n  from 0.78 r5.\n\n## Npcap 0.78 r5 [2016-12-15]\n\n* Microsoft Attestation-signed drivers for Windows 10, required in Win10 1607.\n  See [#492](http://issues.nmap.org/492)\n\n* Removed Windows XP support from the executable installer. XP users can use\n  WinPcap instead, as that is all that we were installing on that platform.\n\n## Npcap 0.78 r4 [2016-12-10]\n\n* Fixed the bug that \"Npcap Loopback Adapter\" can't be uninstalled.\n\n## Npcap 0.78 r3 [2016-12-10]\n\n* The uninstaller allows users to terminate processes that are using Npcap.\n\n## Npcap 0.78 r2 [2016-12-03]\n\n* The uninstaller lists the processes that are currently using Npcap,\n  preventing a clean uninstall.\n\n## Npcap 0.78 [2016-11-23]\n\n* The uninstaller warns when it is unable to delete DLLs that are in use by\n  applications.\n\n## Npcap 0.11 [2016-11-21]\n\n* Updated the WDK from 10.0.10586 to 10.0.14393.\n\n## Npcap 0.10 r18 [2016-11-08]\n\n* Improved the error message of invalid adapter name in WlanHelper.\n\n## Npcap 0.10 r17 [2016-11-07]\n\n* Built WlanHelper.exe in Unicode instead of Multi-Byte. This will fix the\n  wrong display of non-English characters.\n\n## Npcap 0.10 r16 [2016-11-07]\n\n* Fixed the bug that some functions of WlanHelper.exe doesn't work.\n\n## Npcap 0.10 r15 [2016-11-05]\n\n* Fixed the bug that using Npcap to capture at the first time causes limited\n  connectivity on Wi-Fi adapters.\n\n## Npcap 0.10 r14 [2016-11-03]\n\n* Fixed the bug that Npcap mode and WinPcap compatible mode can't use the\n  loopback interface at the same time.\n\n## Npcap 0.10 r13 [2016-11-01]\n\n* Added the `/sign_mode` option for installer to choose to install SHA1-signed or\n  SHA2-signed drivers.\n\n## Npcap 0.10 r12 [2016-10-25]\n\n* Fixed the issue that Nping shows both protocol unreachable and successful\n  replies for \"nping <Local IP>\".\n\n## Npcap 0.10 r11 [2016-10-24]\n\n* Fixed the issue that Nping shows both protocol unreachable and successful\n  replies for \"nping 127.0.0.1\".\n\n## Npcap 0.10 r10 [2016-10-23]\n\n* The uninstaller will not show the finish page if run with \"/Q\".\n\n## Npcap 0.10 r9 [2016-10-17]\n\n* Fixed the BSoD that happens when the OS sleeps after using Npcap Loopback\n  Adapter.\n\n## Npcap 0.10 r8 [2016-10-16]\n\n* Improved the error messages of WlanHelper.exe.\n\n## Npcap 0.10 r7 [2016-10-08]\n\n* Raw 802.11 capture is provided without re-installing the driver!\n\n## Npcap 0.10 r6 [2016-10-04]\n\n* Fixed the BSoD that `NPF_RemoveFromGroupOpenArray()` referenced the freed group\n  head.\n\n## Npcap 0.10 r5 [2016-10-03]\n\n* Fixed the \"PAGE FAULT IN NONPAGED AREA\" BSoD about the group adapter removal\n  reported by Pavel.\n\n## Npcap 0.10 r4 [2016-10-02]\n\n* Fixed some BSoDs that causes the system to halt.\n\n## Npcap 0.10 r3 [2016-10-02]\n\n* Now NPFInstall debug traces will be logged into\n  C:\\Program Files\\Npcap\\NPFInstall.log\n\n## Npcap 0.10 r2 [2016-09-21]\n\n* Fixed the BSoD that `NPF_TapEx()` accessed the CPU buffer of the `OPEN_INSTANCE`\n  that was released.\n\n## Npcap 0.10 [2016-09-20]\n\n* Fixed the bug that `PacketGetNetType()` doesn't return the correct `DLT_NULL`\n  value on Nmap.\n\n## Npcap 0.09-r9 []\n\n## Npcap 0.09-r8 []\n\n## Npcap 0.09-r7 []\n\n## Npcap 0.09-r6 []\n\n## Npcap 0.09-r5 []\n\n## Npcap 0.09-r4 []\n\n## Npcap 0.09-r3 []\n\n## Npcap 0.09-r2 []\n\n## Npcap 0.09-r13 []\n\n## Npcap 0.09-r12 []\n\n## Npcap 0.09-r11 []\n\n## Npcap 0.09-r10 []\n\n## Npcap 0.09 []\n\n## Npcap 0.08-r9 []\n\n## Npcap 0.08-r8 []\n\n## Npcap 0.08-r7 []\n\n## Npcap 0.08-r6 []\n\n## Npcap 0.08-r5 []\n\n## Npcap 0.08-r4 []\n\n## Npcap 0.08-r3 []\n\n## Npcap 0.08-r2 []\n\n## Npcap 0.08-r10 []\n\n## Npcap 0.08 []\n\n## Npcap 0.07-r9 []\n\n## Npcap 0.07-r8 []\n\n## Npcap 0.07-r7 []\n\n## Npcap 0.07-r6 []\n\n## Npcap 0.07-r5 []\n\n## Npcap 0.07-r4 []\n\n## Npcap 0.07-r3 []\n\n## Npcap 0.07-r2 []\n\n## Npcap 0.07-r17 []\n\n## Npcap 0.07-r16 []\n\n## Npcap 0.07-r15 []\n\n## Npcap 0.07-r14 []\n\n## Npcap 0.07-r13 []\n\n## Npcap 0.07-r12 []\n\n## Npcap 0.07-r11 []\n\n## Npcap 0.07-r10 []\n\n## Npcap 0.07 []\n\n## Npcap 0.06-r19 []\n\n## Npcap 0.06-r18 []\n\n## Npcap 0.06-r17 []\n\n## Npcap 0.06-r16 []\n\n## Npcap 0.06-r15 []\n\n## Npcap 0.06-r14 []\n\n## Npcap 0.06-r13 []\n\n## Npcap 0.06-r12 []\n\n## Npcap 0.06-r11 []\n\n## Npcap 0.06-r10 []\n\n## Npcap 0.06-r9 []\n\n## Npcap 0.06-r8 []\n\n## Npcap 0.06-r7 []\n\n## Npcap 0.06-r6 []\n\n## Npcap 0.06-r5 []\n\n## Npcap 0.06-r4 [2016-03-04]\n\n* The uninstallation window won't close itself now.\n\n* Fixed the problem that the uninstallation process won't end in the Task Manager.\n\n* System restore point will not be created in the uninstallation phase.\n\n* Improved the text display of the installer.\n\n## Npcap 0.06-r3 [2016-03-03]\n\n* Improved the creating system restore point support. Now Npcap installer will\n  create a Windows system restore point named Before Npcap %VERSION% installs\n  before actual installation process and create a point named Before Npcap\n  %VERSION% uninstalls before uninstallation.\n\n## Npcap 0.06-r2 [2016-03-01]\n\n* Made the loopback feature optional in the installer. This option is checked\n  by default.\n\n* Improved the creating system restore point logic by removing nested\n  creation. A modified SysRestore plug-in is used:\n  https://github.com/hsluoyz/SysRestore\n\n## Npcap 0.06 [2016-02-29]\n\n* Fixed the bug reported by yyjdelete that Npcap causes BSoD if the user tries to disable the adapter while sending packets.\n\n## Npcap 0.05-r16 [2016-02-29]\n\n* Added creating system restore point support. Now the installer has added an\n  option called Create a system restore point before installing Npcap. It this\n  option is checked, Npcap installer will create a Windows system restore\n  point named Before installing Npcap before actual installation\n  process. Returning back to this point will roll back all changes made by\n  Npcap. Note: this option is NOT checked by default.\n\n## Npcap 0.05-r15 [2016-02-28]\n\n* Added debug symbols support. Now Npcap will release new versions shipping\n  with the corresponding debug symbols. These PDB files will help debugging\n  BSoDs and user-mode crashes of Npcap binaries.  See\n  https://github.com/nmap/npcap/releases/tag/v0.05-r15.\n\n## Npcap 0.05-r14 [2016-02-25]\n\n* Fixed the driver signing error in Win7. We used the legacy SHA1 code signing\n  cert to sign the Npcap driver in Win7, so no need for Win7 users to install\n  KB3033929 patch any more.\n\n* This version Npcap is supposed to have fixed all signing errors, so it will\n  successfully install on all the platforms: Vista, Win7, Win8, Win8.1 and\n  Win10 without any prerequisites.\n\n## Npcap 0.05-r13 [2016-02-20]\n\n* Fixed a driver signing error in Vista. See\n  https://github.com/nmap/npcap/releases/tag/v0.05-r13.\n\n## Npcap 0.05-r12 [2016-02-16]\n\n* Signed the installer with better signing method\n\n## Npcap 0.05-r11 [2016-02-16]\n\n* Npcap 0.05 r11: Added firewall (Block-Rx) support. See\n  https://github.com/nmap/npcap/releases/tag/v0.05-r11.\n\n## Npcap 0.05-r10 [2016-02-04]\n\n* Added different Timestamp modes support like original WinPcap.  See https://github.com/nmap/npcap/releases/tag/v0.05-r10\n\n## Npcap 0.05-r9 [2016-02-04]\n\n* Updated wpcap.dll from VS2005 to VS2013 and Packet.dll, NPFInstall.exe and\n  NPcapHelper.exe from VS2010 to VS2013.\n\n* Additionally, I rolled back the driver signing improvement in 0.05\n  r8. Because it will show a Program Compatibility Assistant window said a\n  well signed driver is needed. However, it's not true because npcap driver\n  runs well by testing net start npf. To avoid this false message, I rolled\n  back to the original signing commands.\n\n## Npcap 0.05-r8 [2016-02-01]\n\n* Now Npcap driver will be signed in both SHA1 and SHA256 digest algorithms\n  and with timestamp. This improvement will help the driver installation on\n  Vista and Win7. This is an issue reported by Graham Bloice (see graham's\n  answer in\n  https://ask.wireshark.org/questions/46689/failed-to-create-npcap-service).\n\n## Npcap 0.05-r7 [2016-01-28]\n\n* Now send-to-Rx adapters can be multiple. The string specified in registry's SendToRx value should be semicolon-separated.\n\nAn example for one send-to-Rx adapter:\n'\\Device\\{754FC84C-EFBC-4443-B479-2EFAE01DC7BF}\n\nAn example for two send-to-Rx adapters:\n'\\Device\\{754FC84C-EFBC-4443-B479-2EFAE01DC7BF};\\Device\\{F5A00000-E19A-4D17-B6D9-A23FE1852573}\n\n## Npcap 0.05-r6 [2016-01-27]\n\n* Now Npcap can have a send-to-Rx adapter. The send-to-Rx adapter will inject\n  all its packets to \"Receive Path\" (Rx) instead of normal \"Send Path\"\n  (Tx). So that instead of sending traffic to the network, the adapter will\n  pretend to receive the injected traffic from the network in this way.\n\n* Currently only one send-to-Rx adapter is supported by specifying SendToRx\n  value in Npcap driver service's registry key (need to restart the driver to\n  take effect).\n\n* Npcap driver service's registry key is usually in:\n  HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\npf. In this key. You\n  need to manually create a REG_SZ value named SendToRx, the value is the name\n  of the adapter you want to be send-to-Rx adapter. The name is usually like\n  format of \\Device\\{F5A00000-E19A-4D17-B6D9-A23FE1852573}. You can query this\n  value using Nmap's nmap --iflist command, you will get a similar value like\n  \\Device\\NPF_{F5A00000-E19A-4D17-B6D9-A23FE1852573}, but they are NOT THE\n  SAME. You need to remove the NPF_ in this string and copy it to registry's\n  SendToRx value. Then reboot the driver by net stop npf and net start npf.\n\n## Npcap 0.05-r5 [2016-01-11]\n\n* Fixed the bug reported by Nuno Antonio Dias Ferreira that Npcap fails to\n  retrieve the adapter list using NPF registry way.\n\n## Npcap 0.05-r4 [2015-12-17]\n\n* Fixed the bug reported by Tenzin Rigden that Npcap installer fails to\n  install correct files in /S silent mode.\n\n## Npcap 0.05-r3 [2015-11-25]\n\n* Added Npcap's support for Vista, Npcap now will prepare separate binaries\n  for Vista.\n\n## Npcap 0.05-r2 [2015-11-05]\n\n* Fixed the bug reported by Amos Sheldon that Npcap causes BSoD:\n  ATTEMPTED_EXECUTE_OF_NOEXECUTE_MEMORY when using Wireshark on Win8, 10 x86.\n\n## Npcap 0.05 [2015-09-11]\n\n* Added the \"DON'T LOOPBACK\" feature, if software set\n  PacketSetLoopbackBehavior() by disable, self-sent packets will not be\n  received again.\n\n* Built the installer using NSIS with strlen_8192, so system \"PATH\" will be\n  updated normally in most cases (PATH is less than 8192).\n\n* Added 128 CPU core support for Npcap, or Npcap will cause BSoD when running\n  on 128-core system.\n\n* Improved the appearance and text of the installer.\n\n## Npcap 0.04-r9 [2015-08-31]\n\n* Fixed the bug that Npcap can't capture real loopback traffic after system is\n  resumed from standby.\n\n## Npcap 0.04-r8 [2015-08-25]\n\n* Now PCAP_IF_LOOPBACK flag in pcap_if_t struct will be set for \"Npcap\n  Loopback Adapter\" both for DLT_NULL mode and Fake Ethernet mode.\n\n## Npcap 0.04-r7 [2015-08-24]\n\n* PCAP_IF_LOOPBACK flag in pcap_if_t struct will be set for \"Npcap Loopback\n  Adapter\" now, only for DLT_NULL mode\n\n* Fixed the bug that DLT_NULL mode can't be disabled in the driver.\n\n## Npcap 0.04-r6 [2015-08-23]\n\n* Packet.dll will return NdisMediumNull for \"Npcap Loopback Adapter\" now.\n\n## Npcap 0.04-r5 [2015-08-21]\n\n* Finished the DLT_NULL protocol support. But there's a problem that Wireshark\n  didn't parse the loopback packets right, need fix.\n\n## Npcap 0.04-r4 [2015-08-21]\n\n* Npcap driver will return 65550 as \"Maximum Packet Size\" instead of default\n  1514 for \"Npcap Loopback Adapter\", which refers to Linux implementation.\n\n## Npcap 0.04-r3 [2015-08-18]\n\n* Fixed the bug reported by Pascal Quantin that WSK code fails to init if it\n  is run without Administrator right, the effect is Npcap loopback adapter\n  can't be opened.\n\n## Npcap 0.04-r2 [2015-08-16]\n\n* Modified wpcap.dll version to 0.04, and improved the error trace message for\n  Winsock Kernel socket operations.\n\n## Npcap 0.04 [2015-08-15]\n\n* Fixed the SYSTEM_SERVICE_EXCEPTION BSoD caused by NdisFOidRequest call, this\n  may help to fix the BAD_POOL_CALLER BSoD (I said \"may\" because this BSoD\n  can't be reproduced).\n\n* Modified Nmap and Nping to be able to send loopback packets on Windows OS,\n  here's a bug, Nmap still can't see reply packets. But the request and reply\n  packets can be seen in Wireshark.\n\n## Npcap 0.03-r6 [2015-08-06]\n\n* Changed to static linked.\n\n## Npcap 0.03-r5 [2015-08-06]\n\n* Npcap can send loopback packets now!\n\n## Npcap 0.03-r4 [2015-08-05]\n\n* WSKTest can send IPv4 and IPv6 loopback packets based on Ethernet header\n  now.\n\n* Added IPv6 send support for WSKTest.\n\n* WSKTest can send a self-constructed ICMPv4 request packet now\n\n* Fixed the INF file lacking section issue in WSKTest.\n\n* Updated WSKTest from VS 2013 to VS 2015.\n\n## Npcap 0.03-r3 [2015-08-03]\n\n## Npcap 0.03-r2 [2015-07-30]\n\n* Improved WSK send code, update code format\n\n## Npcap 0.03 [2015-07-27]\n\n## Npcap 0.02-r4 [2015-07-26]\n\n## Npcap 0.02-r3 [2015-07-24]\n\n## Npcap 0.02-r2 [2015-07-22]\n\n* Fixed the bug that \"Npcap Loopback Adaprer\" renaming fails in Win10 non-English editions.\n\n## Npcap 0.02 [2015-07-22]\n\n* Solve the \"system error 2\" issue\n\n## Npcap 0.01-r2 [2015-07-19]\n\n## Npcap 0.01 [2015-06-23]\n\n* Add option to restrict Npcap usage to Windows users with admin rights rather\n  than all users.\n\n## Npcap Birthday (First Public Code Checkin)! [2013-06-24]\n\n* Npcap's birthday! While Gordon \"Fyodor\" Lyon and Yang Luo had been working\n  on the idea for a couple of months, June 24, 2013 was the date that Yang\n  checked in the first actual code with the Npcap name!\n\n"
        },
        {
          "name": "Common",
          "type": "tree",
          "content": null
        },
        {
          "name": "Examples-pcap",
          "type": "tree",
          "content": null
        },
        {
          "name": "Examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.2763671875,
          "content": "\nNPCAP COPYRIGHT / END USER LICENSE AGREEMENT\n\nNpcap (https://npcap.com) is a Windows packet sniffing driver and\nlibrary and is copyright (c) 2013-2023 by Nmap Software LLC (\"The Nmap\nProject\").  All rights reserved.\n\nEven though Npcap source code is publicly available for review, it is\nnot open source software and may not be redistributed or used in other\nsoftware without special permission from the Nmap Project.  The\nstandard (free) version is usually limited to installation on five\nsystems. We fund the Npcap project by selling two types of commercial\nlicenses to a special Npcap OEM edition:\n\n1) The Npcap OEM Redistribution License allows companies distribute\nNpcap OEM within their products. Licensees generally use the Npcap OEM\nsilent installer, ensuring a seamless experience for end\nusers. Licensees may choose between a perpetual unlimited license or\na quarterly term license, along with options for commercial support and\nupdates. Prices and details: https://npcap.com/oem/redist.html\n\n2) The Npcap OEM Internal-Use License is for organizations that wish\nto use Npcap OEM internally, without redistribution outside their\norganization. This allows them to bypass the 5-system usage cap of the\nNpcap free edition. It includes commercial support and update options,\nand provides the extra Npcap OEM features such as the silent installer\nfor automated deployment. Prices and details:\nhttps://npcap.com/oem/internal.html\n\nBoth of these licenses include updates and support as well as a\nwarranty. Npcap OEM also includes a silent installer for unattended\ninstallation. Further details about Npcap OEM are available from\nhttps://npcap.com/oem/, and you are also welcome to contact us at\nsales@nmap.com to ask any questions or set up a license for your\norganization.\n\nFree and open source software producers are also welcome to contact us\nfor redistribution requests. However, we normally recommend that such\nauthors instead ask your users to download and install Npcap\nthemselves. It will be free for them if they need 5 or fewer copies.\n\nIf the Nmap Project (directly or through one of our commercial\nlicensing customers) has granted you additional rights to Npcap or\nNpcap OEM, those additional rights take precedence where they conflict\nwith the terms of this license agreement.\n\nSince the Npcap source code is available for download and review,\nusers sometimes contribute code patches to fix bugs or add new\nfeatures.  By sending these changes to the Nmap Project (including\nthrough direct email or our mailing lists or submitting pull requests\nthrough our source code repository), it is understood unless you\nspecify otherwise that you are offering the Nmap Project the\nunlimited, non-exclusive right to reuse, modify, and relicense your\ncode contribution so that we may (but are not obligated to)\nincorporate it into Npcap.  If you wish to specify special license\nconditions or restrictions on your contributions, just say so when you\nsend them.\n\nThis copy of Npcap (the \"Software\") and accompanying documentation is\nlicensed and not sold. This Software is protected by copyright laws\nand treaties, as well as laws and treaties related to other forms of\nintellectual property. The Nmap Project owns intellectual property\nrights in the Software.  The Licensee's (\"you\" or \"your\") license to\ndownload, use, copy, or change the Software is subject to these rights\nand to all the terms and conditions of this End User License Agreement\n(\"Agreement\").\n\nACCEPTANCE\n\nBy accepting this agreement or by downloading, installing, using, or\ncopying the Software, or by clicking \"I Agree\", you agree to be bound\nby the terms of this EULA.  If you do not agree to the terms of this\nEULA, do not install, use, or copy the Software.\n\nLICENSE GRANT\n\nThis Agreement entitles you to install and use five (5) copies of the\nSoftware. In addition, you may make archival copies of the Software\nwhich may only be used for the reinstallation of the Software. This\nAgreement does not permit the installation or use of more than 5\ncopies of the Software, or the installation of the Software on more\nthan five computer at any given time, on a system that allows shared\nused of applications by more than five users, or on any configuration\nor system of computers that allows more than five users. A user may\nonly have one instance of this Agreement active at once.  For example,\ndownloading the software multiple times, downloading multiple versions\nof the software, and/or executing the software installer multiple\ntimes do not grant any additional rights such as using the software on\nmore machines.\n\nThe terms \"computer\" and \"machine\" in this license include any\ncomputing device, including software computing instances such as\nvirtual machines and Docker containers.\n\nCopies of Npcap do not count toward the five copy, five computer, or\nfive user limitations imposed by this section if they are installed\nand used solely in conjunction with any of the following software:\n\no The Nmap Security Scanner, as distributed from https://nmap.org\n\no The Wireshark network protocol analyzer, as distributed from\n  https://www.wireshark.org/\n  \no Microsoft Defender for Identity, as distributed from\n  https://www.microsoft.com/en-us/microsoft-365/security/identity-defender\n\nUsers wishing to redistribute Npcap or exceed the usage limits imposed\nby this free license or benefit from commercial support and features\nsuch as a silent installer should contact sales@nmap.com to obtain an\nappropriate commercial license agreement.  More details on our OEM\nedition is also available from https://npcap.com/oem/.\n\nDISCLAIMER OF WARRANTIES AND LIMITATION OF LIABILITY\n\nThis program is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\nRESTRICTIONS ON TRANSFER\n\nWithout first obtaining the express written consent of the Nmap\nProject, you may not assign your rights and obligations under this\nAgreement, or redistribute, encumber, sell, rent, lease, sublicense,\nor otherwise transfer your rights to the Software Product.\n\nRESTRICTIONS ON USE\n\nYou may not use, copy, or install the Software Product on more than\nfive computers, or permit the use, copying, or installation of the\nSoftware Product by more than five users or on more than five\ncomputers.\n\nRESTRICTIONS ON COPYING\n\nYou may not copy any part of the Software except to the extent that\nlicensed use inherently demands the creation of a temporary copy\nstored in computer memory and not permanently affixed on storage\nmedium. You may make archival copies as well.\n\nDISCLAIMER OF WARRANTIES AND LIMITATION OF LIABILITY\n\nUNLESS OTHERWISE EXPLICITLY AGREED TO IN WRITING BY THE NMAP PROJECT,\nTHE NMAP PROJECT MAKES NO OTHER WARRANTIES, EXPRESS OR IMPLIED, IN\nFACT OR IN LAW, INCLUDING, BUT NOT LIMITED TO, ANY IMPLIED WARRANTIES\nOF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OTHER THAN AS\nSET FORTH IN THIS AGREEMENT OR IN THE LIMITED WARRANTY DOCUMENTS\nPROVIDED WITH THE SOFTWARE.\n\nThe Nmap Project makes no warranty that the Software will meet your\nrequirements or operate under your specific conditions of use. The\nNmap Project makes no warranty that operation of the Software Product\nwill be secure, error free, or free from interruption. YOU MUST\nDETERMINE WHETHER THE SOFTWARE SUFFICIENTLY MEETS YOUR REQUIREMENTS\nFOR SECURITY AND UNINTERRUPTABILITY. YOU BEAR SOLE RESPONSIBILITY AND\nALL LIABILITY FOR ANY LOSS INCURRED DUE TO FAILURE OF THE SOFTWARE TO\nMEET YOUR REQUIREMENTS. THE NMAP PROJECT WILL NOT, UNDER ANY\nCIRCUMSTANCES, BE RESPONSIBLE OR LIABLE FOR THE LOSS OF DATA ON ANY\nCOMPUTER OR INFORMATION STORAGE DEVICE.\n\nUNDER NO CIRCUMSTANCES SHALL THE NMAP PROJECT, ITS DIRECTORS,\nOFFICERS, EMPLOYEES OR AGENTS BE LIABLE TO YOU OR ANY OTHER PARTY FOR\nINDIRECT, CONSEQUENTIAL, SPECIAL, INCIDENTAL, PUNITIVE, OR EXEMPLARY\nDAMAGES OF ANY KIND (INCLUDING LOST REVENUES OR PROFITS OR LOSS OF\nBUSINESS) RESULTING FROM THIS AGREEMENT, OR FROM THE FURNISHING,\nPERFORMANCE, INSTALLATION, OR USE OF THE SOFTWARE, WHETHER DUE TO A\nBREACH OF CONTRACT, BREACH OF WARRANTY, OR THE NEGLIGENCE OF THE NMAP\nPROJECT OR ANY OTHER PARTY, EVEN IF THE NMAP PROJECT IS ADVISED\nBEFOREHAND OF THE POSSIBILITY OF SUCH DAMAGES. TO THE EXTENT THAT THE\nAPPLICABLE JURISDICTION LIMITS THE NMAP PROJECT'S ABILITY TO DISCLAIM\nANY IMPLIED WARRANTIES, THIS DISCLAIMER SHALL BE EFFECTIVE TO THE\nMAXIMUM EXTENT PERMITTED.\n\nLIMITATIONS OF REMEDIES AND DAMAGES\n\nYour remedy for a breach of this Agreement or of any warranty included\nin this Agreement is the correction or replacement of the Software or\na refund of the purchase price of the Software, exclusive of any costs\nfor shipping and handling. Selection of whether to correct or replace\nor refund shall be solely at the discretion of the Nmap Project. The\nNmap Project reserves the right to substitute a functionally\nequivalent copy of the Software Product as a replacement.\n\nAny claim must be made within the applicable warranty period. All\nwarranties cover only defects arising under normal use and do not\ninclude malfunctions or failure resulting from misuse, abuse, neglect,\nalteration, problems with electrical power, acts of nature, unusual\ntemperatures or humidity, improper installation, or damage determined\nby the Nmap Project to have been caused by you. All limited warranties\non the Software Product are granted only to you and are\nnon-transferable.\n\nYou agree to indemnify and hold the Nmap Project harmless from all\nclaims, judgments, liabilities, expenses, or costs arising from your\nbreach of this Agreement and/or acts or omissions.\n\nGOVERNING LAW, JURISDICTION AND COSTS\n\nThis Agreement is governed by the laws of the United States of America\nand Deleware State, without regard to Delaware's conflict or choice of\nlaw provisions.\n\nSEVERABILITY\n\nIf any provision of this Agreement shall be held to be invalid or\nunenforceable, the remainder of this Agreement shall remain in full\nforce and effect. To the extent any express or implied restrictions\nare not permitted by applicable laws, these express or implied\nrestrictions shall remain in force and effect to the maximum extent\npermitted by such applicable laws.\n\nTHIRD PARTY SOFTWARE ATTRIBUTION\n\nNpcap uses several 3rd party open source software libraries:\n\n* The libpcap portable packet capturing library from https://tcpdump.org\n* The Winpcap packet capturing library. It has been abandoned, but is\n  currently still available from https://www.winpcap.org/.\n* The ieee80211_radiotap.h header file from David Young\n\nAll of these are open source with BSD-style licenses that allow for\nunlimited use and royalty-free redistribution within other software\n(including commercial/proprietary software). Some include a warranty\ndisclaimer (relating to the original authors) and require a small\namount of acknowledgment text be added somewhere in the documentation\nof any software which includes them (including indirect inclusion\nthrough Npcap).\n\nThe required acknowledgement text as well as full license text and\nsource details for these libraries is available from:\nhttps://npcap.com/src/docs/Npcap-Third-Party-Open-Source.pdf .\n\nSince Nmap Software LLC is not the author of this 3rd party code, we\ncan not waive or modify its software copyright or license.  Npcap\nusers and redistributors must comply with the relevant Npcap license\n(either the free/demo license or a commercial Npcap OEM license they\nmay have purchased) as well as the minimal requirements of this 3rd\nparty open source software.\n"
        },
        {
          "name": "Npcap_Guide.html",
          "type": "blob",
          "size": 0.541015625,
          "content": "<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n    <meta http-equiv=\"refresh\" content=\"0; url=./docs/index.html\">\r\n    <title>Npcap Guide</title>\r\n    <script type=\"text/javascript\">\r\nwindow.location.href='./docs/index.html';\r\n    </script>\r\n  </head>\r\n  <body>\r\n    <p>The Npcap Guide is located <a href=\"./docs/index.html\">in the \"docs\" directory</a>.\r\n    You can also find the latest version of the Guide <a href=\"https://npcap.com/guide/\">on Npcap.com</a>.\r\n    </p>\r\n  </body>\r\n</html>\r\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.666015625,
          "content": "Npcap\n==========\n\n[![Build status](https://ci.appveyor.com/api/projects/status/woero8l6qhgy4syx?svg=true)](https://ci.appveyor.com/project/dmiller-nmap/npcap)\n![Environment](https://img.shields.io/badge/Windows-7,%208,%208.1,%2010,%2011-brightgreen.svg)\n[![Release](https://img.shields.io/github/release/nmap/npcap.svg)](https://npcap.com/#download)\n[![Issues](https://img.shields.io/github/issues/nmap/npcap.svg)](https://github.com/nmap/npcap/issues)\n\n[**Npcap**](https://npcap.com) is a packet capture and injection library for\nWindows by the [**Nmap Project**](https://nmap.org). It is a complete update to\nthe unmaintained [**WinPcap**](http://www.winpcap.org/) project with improved\nspeed, reliability, and security.\n\n## Documentation\n\nThe complete documentation for Npcap is available in the [Npcap\nGuide](https://npcap.com/guide/) on [npcap.com](https://npcap.com/). There you\nwill find information about\n[installation](https://npcap.com/guide/npcap-users-guide.html#npcap-installation),\n[reporting\nbugs](https://npcap.com/guide/npcap-users-guide.html#npcap-issues),\n[developing software with\nNpcap](https://npcap.com/guide/npcap-devguide.html), and [Npcap\ninternals](https://npcap.com/guide/npcap-internals.html).\n\n## Downloads\n\nThe latest installer, Software Development Kit (SDK), source, and debug symbols\ncan be downloaded from https://npcap.com/#download\n\n## Bug report\n\nPlease report any bugs or issues about Npcap at: [Npcap issues on\nGitHub](https://github.com/nmap/npcap/issues). In your report, please provide\nyour\n[**DiagReport**](https://npcap.com/guide/npcap-users-guide.html#npcap-issues-diagreport)\noutput, user software version (e.g. Nmap, Wireshark), reproduce steps and other\ninformation you think necessary. Refer to [the Npcap Guide section on reporting\nbugs](https://npcap.com/guide/npcap-users-guide.html#npcap-issues) for more\ncomplete directions.\n\n## License\n\nThe [Npcap License](https://github.com/nmap/npcap/blob/master/LICENSE) allows\nend users to download, install, and use Npcap from our site for free on up to 5\nsystems (including commercial usage). Software providers (open source or\notherwise) which want to use Npcap functionality are welcome to point their\nusers to [npcap.com](https://npcap.com/) for those users to download and install.\n\nWe fund the Npcap project by selling [Npcap OEM](https://npcap.com/oem/). This\nspecial version of Npcap includes enterprise features such as the silent\ninstaller and commercial support as well as special license rights.\n\n\n## Contact\n\n* ``dev@nmap.org`` (Nmap development list, for technical issues and discussion)\n* ``sales@nmap.com`` (Sales address for commercial/licensing issues)\n* [Npcap Issues Tracker](https://github.com/nmap/npcap/issues/)\n"
        },
        {
          "name": "SDK_CHANGELOG.md",
          "type": "blob",
          "size": 2.0439453125,
          "content": "## Npcap SDK 1.13 [2022-06-21]\n\n* Added SAL annotations to most function prototypes and several struct fields\n  in `Packet32.h`\n\n* The undocumented `char PacketLibraryVersion[]` export has been removed from\n  Npcap 1.70 and later. The `PacketGetVersion()` function is the documented way\n  to get the runtime version of the Packet.dll library.\n\n* PacketGetNetType() now always sets the LinkSpeed field to 0. Many adapters\n  did not support the OID that was being used to get the link speed, and\n  libpcap (Npcap's published API) does not pass this information through, so\n  there should be no impact on the majority of software. Software that needs\n  link speed may use `pcap_oid_get_request()` or `GetAdaptersAddresses()` to\n  get the information.\n\n## Npcap SDK 1.12 [2021-12-06]\n\n* Added this changelog.\n\n* Included wpcap.lib for ARM64.\n\n* Updated `Examples-pcap/pcap_filter` to show modern API usage with\n  `pcap_create()` and `pcap_activate()`.\n\n* Removed documentation and examples for the \"kernel dump\" feature of WinPcap,\n  which has never been supported by Npcap and was disabled in WinPcap 3.1. The\n  `Packet32.h` functions which supported this mode have been marked as\n  deprecated.\n\n## Npcap SDK 1.11 [2021-09-03]\n\n* Fix an issue with libpcap header files which required VS 2015 or later. This\n  change was made to accommodate a few existing licensees. We strongly\n  recommend using a currently-supported compiler version to build software with Npcap.\n\n* Added `const` qualifiers to input parameters for several `Packet32.h` functions.\n\n## Npcap SDK 1.10 [2021-06-22]\n\n* ARM64 libs for Packet.dll added.\n\n* Updated documentation.\n\n## Npcap SDK 1.07 [2021-03-10]\n\n* Updated libpcap headers to 1.10.1 from 1.9.1. See [the libpcap CHANGES\n  file](https://github.com/the-tcpdump-group/libpcap/blob/libpcap-1.10/CHANGES)\n  and issue [#276](http://issues.npcap.org/276) for notable changes.\n\n* Added `Packet32.h` functions to set per-handle time source and precision.\n  This supports libpcap function `pcap_set_tstamp_type()` on Npcap 1.20 and\n  later.\n\n\n----\nEarlier changes not tracked.\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.4873046875,
          "content": "# Notes:\n#   - Minimal appveyor.yml file is an empty file. All sections are optional.\n#   - Indent each level of configuration with 2 spaces. Do not use tabs!\n#   - All section names are case-sensitive.\n#   - Section names should be unique on each level.\n\n#---------------------------------#\n#      general configuration      #\n#---------------------------------#\n\n# version format\nversion: 0.10.{build}\n\n# branches to build\nbranches:\n  # blacklist\n  except:\n    - gh-pages\n\n# Do not build on tags (GitHub only)\nskip_tags: true\n\n#---------------------------------#\n#    environment configuration    #\n#---------------------------------#\n\nimage: Visual Studio 2022\n\n# clone directory\nclone_folder: C:\\Npcap\nclone_depth: 10\n\n# environment variables\nenvironment:\n  SignTool: C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64\n\n# scripts that run after cloning repository\ninstall:\n  # clone the submodules\n  - cmd: git submodule update --init --recursive\n  # install Win-Flex-Bison\n  - cmd: cinst winflexbison -y\n\n#---------------------------------#\n#       build configuration       #\n#---------------------------------#\n\n# scripts to run before build\n# before_build:\n\n# scripts to run *after* solution is built and *before* automatic packaging occurs (web apps, NuGet packages, Azure Cloud Services)\n# before_package:\n\n# scripts to run after build\n# after_build:\n\n# to run your custom scripts instead of automatic MSBuild\nbuild_script:\n  - cmd: cd installer\n  - cmd: echo .| Build.bat\n\n# to disable automatic builds\n# build: off\n"
        },
        {
          "name": "build_sdk.bat",
          "type": "blob",
          "size": 0.8916015625,
          "content": "@echo off\r\nfor /F tokens^=3^,4^ delims^=^\"^\t^  %%A in (version.h) do if \"%%A\" == \"NPCAP_SDK_VERSION\" set SDK_VER=%%B\r\nif \"%SDK_VER%\" == \"\" goto :fail\r\nset SDKFILENAME=npcap-sdk-%SDK_VER%.zip\r\n\r\nif \"%2\"== \"\" ( rd /s/q ./npcap-sdk 2>nul >nul) else ( rd /s /q \"%2\" 2>nul >nul)\r\n\r\nSET TOPSRCDIR=%cd%\r\n\r\nrem Must build Npcap in order to have the lib files available (and to ensure it builds correctly!)\r\ncd installer\r\ncall Build.bat\r\ncd %TOPSRCDIR%\r\n\r\nrem Requires Cygwin to provide make.exe\r\ncall create_include.bat %1 %2\r\n\r\ncall create_lib.bat %1 %2 || goto :fail\r\n\r\ncall create_examples.bat %1 %2\r\n\r\nrem Requires xsltproc and Docbook XSL stylesheets\r\ncall create_docs.bat %1 %2\r\n\r\ndel %SDKFILENAME%\r\ncopy SDK_README.md .\\npcap-sdk\\SDK_README.md\r\nxcopy /v /Y \"SDK_README.md\" .\\npcap-sdk\\\r\ncd .\\npcap-sdk\r\n\"C:\\Program Files\\7-Zip\\7z.exe\" a ..\\%SDKFILENAME% .\r\nPAUSE\r\n\r\nexit /b\r\n:fail\r\necho Failed!\r\npause\r\nexit /b 1\r\n"
        },
        {
          "name": "build_sdk.txt",
          "type": "blob",
          "size": 0.814453125,
          "content": "In order to build the developers' pack, you need to compile the various DLLs and then call build_sdk.bat\r\nThis batch file, in turn, calls the four batches\r\n- create_includes.bat\tcreates the include folder\r\n- create_lib.bat\t\tcreates the lib folder\r\n- create_examples.bat\tcopies the examples folder to the developers' pack. The examples can be compiled only under the developers' pack folder.\r\n- create_docs.bat\t\tcreates the documentation (via Docbook XSL and Roffit), and then copies the generated files under the developers' pack folder.\r\n\r\nThe syntax for the various scripts is\r\n\r\n<script.bat> winpcap_folder developer_folder\r\n\r\nwinpcap_folder\t\tThe winpcap sources folder. It is defaulted to .\\\r\ndeveloper_folder\tThe developers' pack folder. It is defaulted to .\\npcap-sdk.\r\n\r\nHINT: just call build_sdk.bat without any parameter!\r\n\r\n"
        },
        {
          "name": "build_test.bat",
          "type": "blob",
          "size": 1.384765625,
          "content": "SET MODE=\"Release\"\r\nSET TOPSRCDIR=%cd%\r\nSET VERB=Build\r\nif NOT \"%1\" == \"\" SET VERB=\"%1\"\r\n\r\nrem call build_sdk.bat || goto :error\r\ncd %TOPSRCDIR%\r\n\r\nCall :BUILD_TEST x86 || goto :error\r\nCall :BUILD_TEST x64 || goto :error\r\nCall :BUILD_TEST ARM64 || goto :error\r\nexit /b\r\n\r\n:BUILD_TEST\r\nset TOOLSET=%1\r\nif \"%1\" == \"ARM64\" set TOOLSET=amd64_arm64\r\nfor /f \"usebackq delims=#\" %%a in (`\"%ProgramFiles(x86)%\\Microsoft Visual Studio\\Installer\\vswhere\" -version 17 -property installationPath`) do call \"%%a\\VC\\Auxiliary\\Build\\vcvarsall.bat\" %TOOLSET%\r\nif %ERRORLEVEL% NEQ 0 goto :error\r\n\r\nmsbuild /p:ForceImportBeforeCppTargets=\"%CD%\\test\\static.props\" \".\\Examples-pcap\\MakeAll.sln\" /m /t:%VERB% /p:Configuration=%MODE% /p:Platform=\"%1\" || goto :error\r\nmsbuild /p:ForceImportBeforeCppTargets=\"%CD%\\test\\static.props\" \".\\Examples\\sendcap\\sendcap.vcxproj\" /m /t:%VERB% /p:Configuration=%MODE% /p:Platform=\"%1\" || goto :error\r\nif NOT \"%VERB%\" == \"Build\" goto :EOF\r\n\r\nset BINDIR=%1\\\r\nif \"%1\" == \"x86\" set BINDIR=\"\"\r\n\r\nmkdir test\\%1\\\r\ncopy /b \".\\Examples-pcap\\%BINDIR%%MODE%\\iflist.exe\" test\\%1\\\r\ncopy /b \".\\Examples-pcap\\%BINDIR%%MODE%\\pcap_filter.exe\" test\\%1\\\r\ncopy /b \".\\Examples-pcap\\%BINDIR%%MODE%\\sendpack.exe\" test\\%1\\\r\ncopy /b \".\\Examples-pcap\\%BINDIR%%MODE%\\readfile.exe\" test\\%1\\\r\n\r\ncopy /b \".\\Examples\\sendcap\\%BINDIR%%MODE%\\sendcap.exe\" test\\%1\\\r\n\r\ngoto :EOF\r\n\r\n:error\r\necho Something failed: %ERRORLEVEL%\r\nexit /b 1\r\n"
        },
        {
          "name": "create_docs.bat",
          "type": "blob",
          "size": 1.509765625,
          "content": "@echo off\r\n\r\nrem Ensure trailing slash\r\nIF \"%2\"==\"\" (set WPDPACKDESTDIR=.\\npcap-sdk\\) ELSE (set WPDPACKDESTDIR=%~dp2)\r\nrem Remove last character (trailing slash)\r\nset WPDPACKDESTDIR=%WPDPACKDESTDIR:~0,-1%\r\n\r\nrem Ensure trailing slash\r\nIF \"\"==\"%1\" (set WINPCAPSOURCEDIR=.\\) ELSE (set WINPCAPSOURCEDIR=%~dp1) \r\nrem Remove last character (trailing slash)\r\nset WINPCAPSOURCEDIR=%WINPCAPSOURCEDIR:~0,-1%\r\n\r\nset DOCBOOKXSL=C:\\xslt\\docbook-xsl-1.79.2\r\nset XSLTPROC=C:\\xslt\\bin\\xsltproc.exe\r\nset ROFFIT=%WINPCAPSOURCEDIR%\\..\\roffit\\roffit\r\n\r\necho Creating \\docs folder\r\nmkdir %WPDPACKDESTDIR% >nul 2>nul\r\nmkdir %WPDPACKDESTDIR%\\docs >nul 2>nul\r\n\r\necho - Deleting existing WinPcap documentation\r\ndel /q /S %WPDPACKDESTDIR%\\docs\\*.* 2> nul > nul\r\necho - Creating new documentation\r\nxcopy /v /Y \"%WINPCAPSOURCEDIR%\\Npcap_Guide.html\" %WPDPACKDESTDIR%\\\r\nmkdir %WPDPACKDESTDIR%\\docs\\wpcap >nul 2>nul\r\n%XSLTPROC% --path %DOCBOOKXSL% --nonet --stringparam media.type html --stringparam base.dir %WPDPACKDESTDIR%/docs/ --stringparam use.id.as.filename 1 %DOCBOOKXSL%\\html\\chunk.xsl %WINPCAPSOURCEDIR%\\docs\\npcap-guide-wrapper.xml\r\n\r\nfor %%i in (%WINPCAPSOURCEDIR%) do set FULLPATHSOURCE=%%~fi\r\nfor %%i in (%WPDPACKDESTDIR%) do set FULLPATHDEST=%%~fi\r\nC:\\cygwin\\bin\\bash.exe --login -c \"cd $(cygpath '%FULLPATHSOURCE%'); make -f create_docs.make LIBPCAPDIR=$(cygpath '%FULLPATHSOURCE%/wpcap/libpcap') DOCDIR=$(cygpath '%FULLPATHDEST%/docs') ROFFIT=perl\\ $(cygpath '%ROFFIT%')\"\r\n\r\necho Folder \\docs created successfully\r\nset WPDPACKDESTDIR=\r\nset WINPCAPSOURCEDIR=\r\n"
        },
        {
          "name": "create_docs.make",
          "type": "blob",
          "size": 1.41796875,
          "content": "ROFFIT = roffit\r\nLIBPCAPDIR = ./wpcap/libpcap\r\nDOCDIR = ./npcap-sdk/docs\r\n\r\nPCT = %\r\n\r\n%.3pcap: %.3pcap.in\r\n\tsed -e 's/@MAN_MISC_INFO@/7/g' -e 's/@MAN_FILE_FORMATS@/5/g' -e 's/@MAN_ADMIN_COMMANDS@/8/g' $< > $@\r\n%.7: %.manmisc.in\r\n\tsed -e 's/@MAN_MISC_INFO@/7/g' -e 's/@MAN_FILE_FORMATS@/5/g' -e 's/@MAN_ADMIN_COMMANDS@/8/g' $< > $@\r\n%.5: %.manfile.in\r\n\tsed -e 's/@MAN_MISC_INFO@/7/g' -e 's/@MAN_FILE_FORMATS@/5/g' -e 's/@MAN_ADMIN_COMMANDS@/8/g' $< > $@\r\n\r\n${DOCDIR}/wpcap/pcap.html: $(LIBPCAPDIR)/pcap.3pcap $(LIBPCAPDIR)/pcap.3pcap $(LIBPCAPDIR)/pcap_compile.3pcap $(LIBPCAPDIR)/pcap_datalink.3pcap $(LIBPCAPDIR)/pcap_dump_open.3pcap $(LIBPCAPDIR)/pcap_get_tstamp_precision.3pcap $(LIBPCAPDIR)/pcap_list_datalinks.3pcap $(LIBPCAPDIR)/pcap_list_tstamp_types.3pcap $(LIBPCAPDIR)/pcap_open_dead.3pcap $(LIBPCAPDIR)/pcap_open_offline.3pcap $(LIBPCAPDIR)/pcap_set_tstamp_precision.3pcap $(LIBPCAPDIR)/pcap_set_tstamp_type.3pcap $(LIBPCAPDIR)/pcap-savefile.5 $(LIBPCAPDIR)/pcap-filter.7 $(LIBPCAPDIR)/pcap-linktype.7 $(LIBPCAPDIR)/pcap-tstamp.7\r\n\tmkdir -p ${DOCDIR}/wpcap/ build/wpcap/\r\n\trm -f ${DOCDIR}/wpcap/*.html build/wpcap/*.html\r\n# Generate the contents\r\n\tfind \"$(LIBPCAPDIR)\" -maxdepth 1 \\( -name '*.3pcap' -o -name '*.7' -o -name '*.5' \\) | while read m; do \\\r\n\t\tp=$${m$(PCT).3pcap} ; \\\r\n\t\tp=$${p$(PCT).7} ; \\\r\n\t\tp=$${p$(PCT).5} ; \\\r\n\t\tp=$${p##*/} ; \\\r\n\t\t$(ROFFIT) --mandir=\"$(LIBPCAPDIR)\" --hrefdir=. \"$$m\" > ${DOCDIR}/wpcap/$$p.html ; \\\r\n\tdone\r\n"
        },
        {
          "name": "create_examples.bat",
          "type": "blob",
          "size": 1.5888671875,
          "content": "@echo off\r\n\r\nIF \"%2\"==\"\" (set WPDPACKDESTDIR=npcap-sdk) ELSE (set WPDPACKDESTDIR=%2)\r\n\r\nIF \"\"==\"%1\" (set WINPCAPSOURCEDIR=.\\) ELSE (set WINPCAPSOURCEDIR=%1) \r\n\r\necho Creating \\Examples folder\r\nmkdir %WPDPACKDESTDIR% >nul 2>nul\r\nrd /S /Q %WPDPACKDESTDIR%\\Examples-pcap >nul 2>nul\r\nmkdir %WPDPACKDESTDIR%\\Examples-pcap >nul 2>nul\r\nrd /S /Q %WPDPACKDESTDIR%\\Examples-remote >nul 2>nul\r\nmkdir %WPDPACKDESTDIR%\\Examples-remote >nul 2>nul\r\n\r\nrem Can't pipe stdout to stdin of tar; claims \"Damaged archive\"\r\ngit archive --prefix=\"%WPDPACKDESTDIR%/Examples-remote/\" HEAD:Examples -o Examples-remote.tar\r\ntar xf Examples-remote.tar\r\ndel Examples-remote.tar\r\n\r\ngit archive --prefix=\"%WPDPACKDESTDIR%/Examples-pcap/\" HEAD:Examples-pcap -o Examples-pcap.tar\r\ntar xf Examples-pcap.tar\r\ndel Examples-pcap.tar\r\n\r\nrem *** Delete Netmeter since it's no more part of the Developer's pack *** \r\nrd /S /Q %WPDPACKDESTDIR%\\Examples-remote\\NetMeter\\\r\n\r\nrem *** Delete WinPcapStress, since it's not a real example ***\r\nrd /S /Q %WPDPACKDESTDIR%\\Examples-pcap\\winpcap_stress\r\n\r\nrem *** Delete stats, since it's not a real example ***\r\nrd /S /Q %WPDPACKDESTDIR%\\Examples-pcap\\stats\r\n\r\n\r\necho Folder \\Examples created successfully\r\nset WPDPACKDESTDIR=\r\nset WINPCAPSOURCEDIR=\r\n\r\necho ********************************************************************\r\necho *                                                                  *\r\necho * Now you can build the examples from the developers' pack folder! *\r\necho *                                                                  *\r\necho ********************************************************************\r\n"
        },
        {
          "name": "create_include.bat",
          "type": "blob",
          "size": 0.9033203125,
          "content": "@echo off\r\n\r\nIF \"%2\"==\"\" (set WPDPACKDESTDIR=.\\npcap-sdk\\) ELSE (set WPDPACKDESTDIR=%2)\r\n\r\nIF \"\"==\"%1\" (set WINPCAPSOURCEDIR=.\\) ELSE (set WINPCAPSOURCEDIR=%1) \r\n\r\necho Creating \\Include folder\r\nmkdir %WPDPACKDESTDIR%  \t\t2>nul >nul\r\nmkdir %WPDPACKDESTDIR%\\Include  \t2>nul >nul\r\nmkdir %WPDPACKDESTDIR%\\Include\\pcap  \t2>nul >nul\r\n\r\n\r\nrem xcopy /v /Y %WINPCAPSOURCEDIR%\\wpcap\\libpcap\\pcap\\*.h\t\t \t\t%WPDPACKDESTDIR%\\Include\\pcap\\\t>nul\r\n\r\nSETLOCAL ENABLEEXTENSIONS\r\n\r\nfor /F \"usebackq tokens=2* delims==\" %%i in (`C:\\cygwin\\bin\\make.exe -p -q -f Makefile.in -C \"%WINPCAPSOURCEDIR%\\wpcap\\libpcap\" ^| findstr /b \"PUBHDR\"`) do set PUBHDR=%%i\r\n\r\nfor %%i in (%PUBHDR:/=\\%) do copy /v /Y \"%WINPCAPSOURCEDIR%\\wpcap\\libpcap\\%%i\" \"%WPDPACKDESTDIR%\\Include\\%%i\"\r\n\r\n\r\nxcopy /v /Y %WINPCAPSOURCEDIR%\\Common\\Packet32.h\t\t\t \t%WPDPACKDESTDIR%\\Include\\\t>nul\r\n\r\necho Folder \\Include created successfully\r\nset WPDPACKDESTDIR=\r\nset WINPCAPSOURCEDIR=\r\n"
        },
        {
          "name": "create_lib.bat",
          "type": "blob",
          "size": 1.5068359375,
          "content": "@echo off\r\n\r\nIF \"%2\"==\"\" (set WPDPACKDESTDIR=.\\npcap-sdk\\) ELSE (set WPDPACKDESTDIR=%2)\r\n\r\nIF \"\"==\"%1\" (set WINPCAPSOURCEDIR=.\\) ELSE (set WINPCAPSOURCEDIR=%1) \r\n\r\necho Checking for wpcap build dirs\r\nset WPCAPBUILDDIR32=%WINPCAPSOURCEDIR%\\wpcap\\build-win32\r\nif not exist \"%WPCAPBUILDDIR32%\" goto :fail\r\nset WPCAPBUILDDIR64=%WINPCAPSOURCEDIR%\\wpcap\\build-x64\r\nif not exist \"%WPCAPBUILDDIR64%\" goto :fail\r\nset WPCAPBUILDDIRARM=%WINPCAPSOURCEDIR%\\wpcap\\build-ARM64\r\nif not exist \"%WPCAPBUILDDIRARM%\" goto :fail\r\n\r\necho Checking for Packet build dir\r\nset PACKETBUILDDIR=%WINPCAPSOURCEDIR%\\packetWin7\\vs14\r\nif not exist \"%PACKETBUILDDIR%\" goto :fail\r\n\r\necho Creating \\Lib folder\r\nmkdir %WPDPACKDESTDIR% \t\t>nul 2>nul\r\nmkdir %WPDPACKDESTDIR%\\Lib \t>nul 2>nul\r\nmkdir %WPDPACKDESTDIR%\\Lib\\x64\t>nul 2>nul\r\nmkdir %WPDPACKDESTDIR%\\Lib\\ARM64\t>nul 2>nul\r\n\r\nxcopy /v /Y \"%WPCAPBUILDDIR32%\\Release\\wpcap.lib\" %WPDPACKDESTDIR%\\Lib\\ || goto :fail\r\nxcopy /v /Y \"%WPCAPBUILDDIR64%\\Release\\wpcap.lib\" %WPDPACKDESTDIR%\\Lib\\x64 || goto :fail\r\nxcopy /v /Y \"%WPCAPBUILDDIRARM%\\Release\\wpcap.lib\" %WPDPACKDESTDIR%\\Lib\\ARM64 || goto :fail\r\nxcopy /v /Y \"%PACKETBUILDDIR%\\Release\\packet.lib\" %WPDPACKDESTDIR%\\Lib\\ || goto :fail\r\nxcopy /v /Y \"%PACKETBUILDDIR%\\x64\\Release\\packet.lib\" %WPDPACKDESTDIR%\\Lib\\x64 || goto :fail\r\nxcopy /v /Y \"%PACKETBUILDDIR%\\ARM64\\Release No AirPcap\\packet.lib\" %WPDPACKDESTDIR%\\Lib\\ARM64 || goto :fail\r\n\r\necho Folder \\Lib created successfully\r\n\r\nset WPDPACKDESTDIR=\r\nset WINPCAPSOURCEDIR=\r\n\r\nexit /b\r\n\r\n:fail\r\necho Failed.\r\npause\r\nexit /b 1\r\n\r\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "installer",
          "type": "tree",
          "content": null
        },
        {
          "name": "packetWin7",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.h",
          "type": "blob",
          "size": 6.6513671875,
          "content": "/***********************IMPORTANT NPCAP LICENSE TERMS***********************\r\n *\r\n * Npcap (https://npcap.com) is a Windows packet sniffing driver and library and\r\n * is copyright (c) 2013-2023 by Nmap Software LLC (\"The Nmap Project\").  All\r\n * rights reserved.\r\n *\r\n * Even though Npcap source code is publicly available for review, it is not\r\n * open source software and may not be redistributed or used in other software\r\n * without special permission from the Nmap Project. The standard (free) version\r\n * is usually limited to installation on five systems. For more details, see the\r\n * LICENSE file included with Npcap and also available at\r\n * https://github.com/nmap/npcap/blob/master/LICENSE. This header file\r\n * summarizes a few important aspects of the Npcap license, but is not a\r\n * substitute for that full Npcap license agreement.\r\n *\r\n * We fund the Npcap project by selling two types of commercial licenses to a\r\n * special Npcap OEM edition:\r\n *\r\n * 1) The Npcap OEM Redistribution License allows companies distribute Npcap OEM\r\n * within their products. Licensees generally use the Npcap OEM silent\r\n * installer, ensuring a seamless experience for end users. Licensees may choose\r\n * between a perpetual unlimited license or a quarterly term license, along with\r\n * options for commercial support and updates. Prices and details:\r\n * https://npcap.com/oem/redist.html\r\n *\r\n * 2) The Npcap OEM Internal-Use License is for organizations that wish to use\r\n * Npcap OEM internally, without redistribution outside their organization. This\r\n * allows them to bypass the 5-system usage cap of the Npcap free edition. It\r\n * includes commercial support and update options, and provides the extra Npcap\r\n * OEM features such as the silent installer for automated deployment. Prices\r\n * and details: https://npcap.com/oem/internal.html\r\n *\r\n * Both of these licenses include updates and support as well as a warranty.\r\n * Npcap OEM also includes a silent installer for unattended installation.\r\n * Further details about Npcap OEM are available from https://npcap.com/oem/,\r\n * and you are also welcome to contact us at sales@nmap.com to ask any questions\r\n * or set up a license for your organization.\r\n *\r\n * Free and open source software producers are also welcome to contact us for\r\n * redistribution requests. However, we normally recommend that such authors\r\n * instead ask your users to download and install Npcap themselves. It will be\r\n * free for them if they need 5 or fewer copies.\r\n *\r\n * If the Nmap Project (directly or through one of our commercial licensing\r\n * customers) has granted you additional rights to Npcap or Npcap OEM, those\r\n * additional rights take precedence where they conflict with the terms of the\r\n * license agreement.\r\n *\r\n * Since the Npcap source code is available for download and review, users\r\n * sometimes contribute code patches to fix bugs or add new features. By sending\r\n * these changes to the Nmap Project (including through direct email or our\r\n * mailing lists or submitting pull requests through our source code\r\n * repository), it is understood unless you specify otherwise that you are\r\n * offering the Nmap Project the unlimited, non-exclusive right to reuse,\r\n * modify, and relicense your code contribution so that we may (but are not\r\n * obligated to) incorporate it into Npcap. If you wish to specify special\r\n * license conditions or restrictions on your contributions, just say so when\r\n * you send them.\r\n *\r\n * This software is distributed in the hope that it will be useful, but WITHOUT\r\n * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\r\n * FOR A PARTICULAR PURPOSE. Warranty rights and commercial support are\r\n * available for the OEM Edition described above.\r\n *\r\n * Other copyright notices and attribution may appear below this license header.\r\n * We have kept those for attribution purposes, but any license terms granted by\r\n * those notices apply only to their original work, and not to any changes made\r\n * by the Nmap Project or to this entire file.\r\n *\r\n ***************************************************************************/\r\n/*{{NO_DEPENDENCIES}}\r\n * Microsoft Developer Studio generated include file.\r\n *\r\n *\r\n * 3.1.0.24   -->  WinPcap  3.1 beta4\r\n * 3.1.0.27   -->  WinPcap  3.1 RTM\r\n * 3.2.0.29\t  -->  WinPcap  3.2 alpha1\r\n * 4.0.0.374  -->  WinPcap  4.0 alpha1\r\n * 4.0.0.592  -->  WinPcap  4.0 beta1\r\n * 4.0.0.655  -->  WinPcap  4.0 beta2\r\n * 4.0.0.703  -->  WinPcap  4.0 beta3\r\n * 4.0.0.755  -->  WinPcap  4.0 RTM\r\n * 4.1.0.902  -->  WinPcap  4.1 beta\r\n * 4.1.0.1048 -->  WinPcap  4.1 beta2\r\n * 4.1.0.1124 -->  WinPcap  4.1 beta3\r\n * 4.1.0.1237 -->  WinPcap  4.1 beta4\r\n * 4.1.0.1452 -->  WinPcap  4.1 beta5\r\n * 4.1.0.1752 -->  WinPcap  4.1 RTM\r\n * 4.1.0.1753 -->  WinPcap  4.1.1 RTM\r\n * 4.1.0.2001 -->  WinPcap  4.1.2 RTM\r\n * 4.1.0.2980 -->  WinPcap  4.1.3 RTM\r\n * 4.1.0.3001 -->  WinPcap  4.1.3 RTM (NDIS6)\r\n * 0.1.0.710  -->  Npcap  0.01 beta (NDIS6)\r\n * 0.2.0.718  -->  Npcap  0.02 beta\r\n * 0.3.0.727  -->  Npcap  0.03 beta\r\n * 0.4.0.815  -->  Npcap  0.04 beta\r\n * 0.5.0.912  -->  Npcap  0.05 beta\r\n * 0.6.0.301  -->  Npcap  0.06 beta\r\n * 0.7.0.424  -->  Npcap  0.07 beta\r\n * 0.8.0.724  -->  Npcap  0.08 beta\r\n * 0.9.0.831  -->  Npcap  0.09 beta\r\n * 0.10.0.921 -->  Npcap  0.10 beta\r\n * 0.11.0.1121-->  Npcap  0.11 beta\r\n * 0.78.0.1123-->  Npcap  0.78 beta\r\n */\r\n\r\n#define /*\r\n !define /**/ WINPCAP_MAJOR\t\t\t\t5\r\n#define /*\r\n !define /**/ WINPCAP_MINOR\t\t\t\t1\r\n/* WINPCAP_REV should be less than 256 to fit in UCHAR */\r\n#define /*\r\n !define /**/ WINPCAP_REV\t\t\t\t80\r\n#define /*\r\n !define /**/ WINPCAP_BUILD\t\t\t\t821\r\n#define /*\r\n !define /**/ WINPCAP_VER_STRING\t\t\"1.80\"\r\n#define /*\r\n !define /**/ NPCAP_SDK_VERSION \"1.14\"\r\n\r\n#define WINPCAP_COMPANY_NAME \t\t\t\"Insecure.Com LLC.\"\r\n\r\n#ifdef RC_INVOKED\r\n/* NPFInstall.exe uses the VersionInfo.ProductName to identify Npcap DLLs, so\r\n * we can't put OEM name in there unless we change that. */\r\n#define WINPCAP_PRODUCT_NAME \"Npcap\"\r\n#else\r\n\r\n#ifdef /*\r\n !ifdef /**/ NPCAP_OEM\r\n#ifdef /*\r\n !ifdef /**/ NPCAP_READ_ONLY\r\n#define /*\r\n !define /**/ WINPCAP_PRODUCT_NAME \t\t\t\"Npcap OEM RO\"\r\n#else /*\r\n !else /**/\r\n#define /*\r\n !define /**/ WINPCAP_PRODUCT_NAME \t\t\t\"Npcap OEM\"\r\n#endif /*\r\n !endif /**/\r\n#else /*\r\n !else /**/\r\n#define /*\r\n !define /**/ WINPCAP_PRODUCT_NAME \t\t\t\"Npcap\"\r\n#endif /*\r\n !endif /**/\r\n\r\n#endif /* RC_INVOKED */\r\n\r\n#define WINPCAP_COPYRIGHT_STRING \t\t\"Copyright (c) 2023, Insecure.Com LLC.  All rights reserved.\"\r\n#define /*\r\n !define /**/ WINPCAP_INSTALLERHELPER_COPYRIGHT_STRING \"Copyright (c) 2023, Insecure.Com LLC.  All rights reserved.\"\r\n#define WINPCAP_RPCAPD_COPYRIGHT_STRING \"Copyright (c) 2023, Insecure.Com LLC.  All rights reserved.\"\r\n\r\n#define WINPCAP_BUILD_DESCRIPTION \t\t\"\"\r\n#define WINPCAP_PRIVATE_BUILD\t\t\t\"\"\r\n"
        },
        {
          "name": "wpcap",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}