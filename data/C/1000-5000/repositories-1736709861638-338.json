{
  "metadata": {
    "timestamp": 1736709861638,
    "page": 338,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rxi/log.c",
      "stars": 2866,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0224609375,
          "content": "Copyright (c) 2020 rxi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.6796875,
          "content": "# log.c\nA simple logging library implemented in C99\n\n![screenshot](https://cloud.githubusercontent.com/assets/3920290/23831970/a2415e96-0723-11e7-9886-f8f5d2de60fe.png)\n\n\n## Usage\n**[log.c](src/log.c?raw=1)** and **[log.h](src/log.h?raw=1)** should be dropped\ninto an existing project and compiled along with it. The library provides 6\nfunction-like macros for logging:\n\n```c\nlog_trace(const char *fmt, ...);\nlog_debug(const char *fmt, ...);\nlog_info(const char *fmt, ...);\nlog_warn(const char *fmt, ...);\nlog_error(const char *fmt, ...);\nlog_fatal(const char *fmt, ...);\n```\n\nEach function takes a printf format string followed by additional arguments:\n\n```c\nlog_trace(\"Hello %s\", \"world\")\n```\n\nResulting in a line with the given format printed to stderr:\n\n```\n20:18:26 TRACE src/main.c:11: Hello world\n```\n\n\n#### log_set_quiet(bool enable)\nQuiet-mode can be enabled by passing `true` to the `log_set_quiet()` function.\nWhile this mode is enabled the library will not output anything to `stderr`, but\nwill continue to write to files and callbacks if any are set.\n\n\n#### log_set_level(int level)\nThe current logging level can be set by using the `log_set_level()` function.\nAll logs below the given level will not be written to `stderr`. By default the\nlevel is `LOG_TRACE`, such that nothing is ignored.\n\n\n#### log_add_fp(FILE *fp, int level)\nOne or more file pointers where the log will be written can be provided to the\nlibrary by using the `log_add_fp()` function. The data written to the file\noutput is of the following format:\n\n```\n2047-03-11 20:18:26 TRACE src/main.c:11: Hello world\n```\n\nAny messages below the given `level` are ignored. If the library failed to add a\nfile pointer a value less-than-zero is returned.\n\n\n#### log_add_callback(log_LogFn fn, void *udata, int level)\nOne or more callback functions which are called with the log data can be\nprovided to the library by using the `log_add_callback()` function. A callback\nfunction is passed a `log_Event` structure containing the `line` number,\n`filename`, `fmt` string, `va` printf va\\_list, `level` and the given `udata`.\n\n\n#### log_set_lock(log_LockFn fn, void *udata)\nIf the log will be written to from multiple threads a lock function can be set.\nThe function is passed the boolean `true` if the lock should be acquired or\n`false` if the lock should be released and the given `udata` value.\n\n\n#### const char* log_level_string(int level)\nReturns the name of the given log level as a string.\n\n\n#### LOG_USE_COLOR\nIf the library is compiled with `-DLOG_USE_COLOR` ANSI color escape codes will\nbe used when printing.\n\n\n## License\nThis library is free software; you can redistribute it and/or modify it under\nthe terms of the MIT license. See [LICENSE](LICENSE) for details.\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}