{
  "metadata": {
    "timestamp": 1736709967908,
    "page": 521,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "SRombauts/SQLiteCpp",
      "stars": 2292,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cproject",
          "type": "blob",
          "size": 30.642578125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<?fileVersion 4.0.0?><cproject storage_type_id=\"org.eclipse.cdt.core.XmlProjectDescriptionStorage\">\n\t<storageModule moduleId=\"org.eclipse.cdt.core.settings\">\n\t\t<cconfiguration id=\"cdt.managedbuild.config.gnu.exe.debug.1034724773\">\n\t\t\t<storageModule buildSystemId=\"org.eclipse.cdt.managedbuilder.core.configurationDataProvider\" id=\"cdt.managedbuild.config.gnu.exe.debug.1034724773\" moduleId=\"org.eclipse.cdt.core.settings\" name=\"Debug\">\n\t\t\t\t<externalSettings/>\n\t\t\t\t<extensions>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.ELF\" point=\"org.eclipse.cdt.core.BinaryParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.GCCErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.GASErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.GLDErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.GmakeErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.CWDLocator\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t</extensions>\n\t\t\t</storageModule>\n\t\t\t<storageModule moduleId=\"cdtBuildSystem\" version=\"4.0.0\">\n\t\t\t\t<configuration artifactName=\"${ProjName}\" buildArtefactType=\"org.eclipse.cdt.build.core.buildArtefactType.exe\" buildProperties=\"org.eclipse.cdt.build.core.buildType=org.eclipse.cdt.build.core.buildType.debug,org.eclipse.cdt.build.core.buildArtefactType=org.eclipse.cdt.build.core.buildArtefactType.exe\" cleanCommand=\"rm -rf\" description=\"\" id=\"cdt.managedbuild.config.gnu.exe.debug.1034724773\" name=\"Debug\" parent=\"cdt.managedbuild.config.gnu.exe.debug\">\n\t\t\t\t\t<folderInfo id=\"cdt.managedbuild.config.gnu.exe.debug.1034724773.\" name=\"/\" resourcePath=\"\">\n\t\t\t\t\t\t<toolChain id=\"cdt.managedbuild.toolchain.gnu.exe.debug.898681687\" name=\"Linux GCC\" nonInternalBuilderId=\"cdt.managedbuild.target.gnu.builder.exe.debug\" superClass=\"cdt.managedbuild.toolchain.gnu.exe.debug\">\n\t\t\t\t\t\t\t<targetPlatform id=\"cdt.managedbuild.target.gnu.platform.exe.debug.25715897\" name=\"Debug Platform\" superClass=\"cdt.managedbuild.target.gnu.platform.exe.debug\"/>\n\t\t\t\t\t\t\t<builder buildPath=\"${ProjDirPath}/build\" id=\"cdt.managedbuild.target.gnu.builder.exe.debug.1103730408\" keepEnvironmentInBuildfile=\"false\" managedBuildOn=\"false\" name=\"Gnu Make Builder\" parallelBuildOn=\"true\" parallelizationNumber=\"optimal\" superClass=\"cdt.managedbuild.target.gnu.builder.exe.debug\"/>\n\t\t\t\t\t\t\t<tool id=\"cdt.managedbuild.tool.gnu.archiver.base.836634439\" name=\"GCC Archiver\" superClass=\"cdt.managedbuild.tool.gnu.archiver.base\"/>\n\t\t\t\t\t\t\t<tool command=\"g++\" id=\"cdt.managedbuild.tool.gnu.cpp.compiler.exe.debug.1817615032\" name=\"GCC C++ Compiler\" superClass=\"cdt.managedbuild.tool.gnu.cpp.compiler.exe.debug\">\n\t\t\t\t\t\t\t\t<option id=\"gnu.cpp.compiler.exe.debug.option.optimization.level.750523151\" name=\"Optimization Level\" superClass=\"gnu.cpp.compiler.exe.debug.option.optimization.level\" value=\"gnu.cpp.compiler.optimization.level.none\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<option id=\"gnu.cpp.compiler.exe.debug.option.debugging.level.1248186067\" name=\"Debug Level\" superClass=\"gnu.cpp.compiler.exe.debug.option.debugging.level\" value=\"gnu.cpp.compiler.debugging.level.max\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<inputType id=\"cdt.managedbuild.tool.gnu.cpp.compiler.input.1310903331\" superClass=\"cdt.managedbuild.tool.gnu.cpp.compiler.input\"/>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t\t<tool id=\"cdt.managedbuild.tool.gnu.c.compiler.exe.debug.796464367\" name=\"GCC C Compiler\" superClass=\"cdt.managedbuild.tool.gnu.c.compiler.exe.debug\">\n\t\t\t\t\t\t\t\t<option defaultValue=\"gnu.c.optimization.level.none\" id=\"gnu.c.compiler.exe.debug.option.optimization.level.1202477623\" name=\"Optimization Level\" superClass=\"gnu.c.compiler.exe.debug.option.optimization.level\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<option id=\"gnu.c.compiler.exe.debug.option.debugging.level.280470620\" name=\"Debug Level\" superClass=\"gnu.c.compiler.exe.debug.option.debugging.level\" value=\"gnu.c.debugging.level.max\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<inputType id=\"cdt.managedbuild.tool.gnu.c.compiler.input.1655653012\" superClass=\"cdt.managedbuild.tool.gnu.c.compiler.input\"/>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t\t<tool id=\"cdt.managedbuild.tool.gnu.c.linker.exe.debug.1058275134\" name=\"GCC C Linker\" superClass=\"cdt.managedbuild.tool.gnu.c.linker.exe.debug\"/>\n\t\t\t\t\t\t\t<tool id=\"cdt.managedbuild.tool.gnu.cpp.linker.exe.debug.1061662206\" name=\"GCC C++ Linker\" superClass=\"cdt.managedbuild.tool.gnu.cpp.linker.exe.debug\">\n\t\t\t\t\t\t\t\t<option id=\"gnu.cpp.link.option.libs.1966761747\" name=\"Libraries (-l)\" superClass=\"gnu.cpp.link.option.libs\" valueType=\"libs\">\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"pthread\"/>\n\t\t\t\t\t\t\t\t\t<listOptionValue builtIn=\"false\" value=\"dl\"/>\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t<inputType id=\"cdt.managedbuild.tool.gnu.cpp.linker.input.1636986986\" superClass=\"cdt.managedbuild.tool.gnu.cpp.linker.input\">\n\t\t\t\t\t\t\t\t\t<additionalInput kind=\"additionalinputdependency\" paths=\"$(USER_OBJS)\"/>\n\t\t\t\t\t\t\t\t\t<additionalInput kind=\"additionalinput\" paths=\"$(LIBS)\"/>\n\t\t\t\t\t\t\t\t</inputType>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t\t<tool id=\"cdt.managedbuild.tool.gnu.assembler.exe.debug.258570404\" name=\"GCC Assembler\" superClass=\"cdt.managedbuild.tool.gnu.assembler.exe.debug\">\n\t\t\t\t\t\t\t\t<inputType id=\"cdt.managedbuild.tool.gnu.assembler.input.1571334436\" superClass=\"cdt.managedbuild.tool.gnu.assembler.input\"/>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t</toolChain>\n\t\t\t\t\t</folderInfo>\n\t\t\t\t</configuration>\n\t\t\t</storageModule>\n\t\t\t<storageModule moduleId=\"org.eclipse.cdt.core.externalSettings\"/>\n\t\t\t<storageModule moduleId=\"org.eclipse.cdt.core.language.mapping\"/>\n\t\t\t<storageModule moduleId=\"org.eclipse.cdt.internal.ui.text.commentOwnerProjectMappings\">\n\t\t\t\t<doc-comment-owner id=\"org.eclipse.cdt.ui.doxygen\">\n\t\t\t\t\t<path value=\"\"/>\n\t\t\t\t</doc-comment-owner>\n\t\t\t</storageModule>\n\t\t</cconfiguration>\n\t\t<cconfiguration id=\"cdt.managedbuild.config.gnu.exe.release.326780594\">\n\t\t\t<storageModule buildSystemId=\"org.eclipse.cdt.managedbuilder.core.configurationDataProvider\" id=\"cdt.managedbuild.config.gnu.exe.release.326780594\" moduleId=\"org.eclipse.cdt.core.settings\" name=\"Release\">\n\t\t\t\t<externalSettings/>\n\t\t\t\t<extensions>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.ELF\" point=\"org.eclipse.cdt.core.BinaryParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.GmakeErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.CWDLocator\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.GCCErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.GASErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t\t<extension id=\"org.eclipse.cdt.core.GLDErrorParser\" point=\"org.eclipse.cdt.core.ErrorParser\"/>\n\t\t\t\t</extensions>\n\t\t\t</storageModule>\n\t\t\t<storageModule moduleId=\"cdtBuildSystem\" version=\"4.0.0\">\n\t\t\t\t<configuration artifactName=\"${ProjName}\" buildArtefactType=\"org.eclipse.cdt.build.core.buildArtefactType.exe\" buildProperties=\"org.eclipse.cdt.build.core.buildType=org.eclipse.cdt.build.core.buildType.release,org.eclipse.cdt.build.core.buildArtefactType=org.eclipse.cdt.build.core.buildArtefactType.exe\" cleanCommand=\"rm -rf\" description=\"\" id=\"cdt.managedbuild.config.gnu.exe.release.326780594\" name=\"Release\" parent=\"cdt.managedbuild.config.gnu.exe.release\">\n\t\t\t\t\t<folderInfo id=\"cdt.managedbuild.config.gnu.exe.release.326780594.\" name=\"/\" resourcePath=\"\">\n\t\t\t\t\t\t<toolChain id=\"cdt.managedbuild.toolchain.gnu.exe.release.1521127462\" name=\"Linux GCC\" superClass=\"cdt.managedbuild.toolchain.gnu.exe.release\">\n\t\t\t\t\t\t\t<targetPlatform id=\"cdt.managedbuild.target.gnu.platform.exe.release.1294814790\" name=\"Debug Platform\" superClass=\"cdt.managedbuild.target.gnu.platform.exe.release\"/>\n\t\t\t\t\t\t\t<builder arguments=\"BUILD=Release\" buildPath=\"${ProjDirPath}\" command=\"make\" id=\"cdt.managedbuild.target.gnu.builder.exe.release.1733496537\" keepEnvironmentInBuildfile=\"false\" managedBuildOn=\"false\" name=\"Gnu Make Builder\" parallelBuildOn=\"true\" parallelizationNumber=\"optimal\" superClass=\"cdt.managedbuild.target.gnu.builder.exe.release\"/>\n\t\t\t\t\t\t\t<tool id=\"cdt.managedbuild.tool.gnu.archiver.base.446006787\" name=\"GCC Archiver\" superClass=\"cdt.managedbuild.tool.gnu.archiver.base\"/>\n\t\t\t\t\t\t\t<tool id=\"cdt.managedbuild.tool.gnu.cpp.compiler.exe.release.2105828055\" name=\"GCC C++ Compiler\" superClass=\"cdt.managedbuild.tool.gnu.cpp.compiler.exe.release\">\n\t\t\t\t\t\t\t\t<option id=\"gnu.cpp.compiler.exe.release.option.optimization.level.1921346334\" name=\"Optimization Level\" superClass=\"gnu.cpp.compiler.exe.release.option.optimization.level\" value=\"gnu.cpp.compiler.optimization.level.most\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<option id=\"gnu.cpp.compiler.exe.release.option.debugging.level.1660521780\" name=\"Debug Level\" superClass=\"gnu.cpp.compiler.exe.release.option.debugging.level\" value=\"gnu.cpp.compiler.debugging.level.none\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<inputType id=\"cdt.managedbuild.tool.gnu.cpp.compiler.input.1064866729\" superClass=\"cdt.managedbuild.tool.gnu.cpp.compiler.input\"/>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t\t<tool id=\"cdt.managedbuild.tool.gnu.c.compiler.exe.release.1329805514\" name=\"GCC C Compiler\" superClass=\"cdt.managedbuild.tool.gnu.c.compiler.exe.release\">\n\t\t\t\t\t\t\t\t<option defaultValue=\"gnu.c.optimization.level.most\" id=\"gnu.c.compiler.exe.release.option.optimization.level.2130170048\" name=\"Optimization Level\" superClass=\"gnu.c.compiler.exe.release.option.optimization.level\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<option id=\"gnu.c.compiler.exe.release.option.debugging.level.1028604453\" name=\"Debug Level\" superClass=\"gnu.c.compiler.exe.release.option.debugging.level\" value=\"gnu.c.debugging.level.none\" valueType=\"enumerated\"/>\n\t\t\t\t\t\t\t\t<inputType id=\"cdt.managedbuild.tool.gnu.c.compiler.input.1173224902\" superClass=\"cdt.managedbuild.tool.gnu.c.compiler.input\"/>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t\t<tool id=\"cdt.managedbuild.tool.gnu.c.linker.exe.release.1484631410\" name=\"GCC C Linker\" superClass=\"cdt.managedbuild.tool.gnu.c.linker.exe.release\"/>\n\t\t\t\t\t\t\t<tool id=\"cdt.managedbuild.tool.gnu.cpp.linker.exe.release.1493084285\" name=\"GCC C++ Linker\" superClass=\"cdt.managedbuild.tool.gnu.cpp.linker.exe.release\">\n\t\t\t\t\t\t\t\t<inputType id=\"cdt.managedbuild.tool.gnu.cpp.linker.input.1398815353\" superClass=\"cdt.managedbuild.tool.gnu.cpp.linker.input\">\n\t\t\t\t\t\t\t\t\t<additionalInput kind=\"additionalinputdependency\" paths=\"$(USER_OBJS)\"/>\n\t\t\t\t\t\t\t\t\t<additionalInput kind=\"additionalinput\" paths=\"$(LIBS)\"/>\n\t\t\t\t\t\t\t\t</inputType>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t\t<tool id=\"cdt.managedbuild.tool.gnu.assembler.exe.release.1362356526\" name=\"GCC Assembler\" superClass=\"cdt.managedbuild.tool.gnu.assembler.exe.release\">\n\t\t\t\t\t\t\t\t<inputType id=\"cdt.managedbuild.tool.gnu.assembler.input.831278578\" superClass=\"cdt.managedbuild.tool.gnu.assembler.input\"/>\n\t\t\t\t\t\t\t</tool>\n\t\t\t\t\t\t</toolChain>\n\t\t\t\t\t</folderInfo>\n\t\t\t\t</configuration>\n\t\t\t</storageModule>\n\t\t\t<storageModule moduleId=\"org.eclipse.cdt.core.language.mapping\"/>\n\t\t\t<storageModule moduleId=\"org.eclipse.cdt.core.externalSettings\"/>\n\t\t\t<storageModule moduleId=\"org.eclipse.cdt.internal.ui.text.commentOwnerProjectMappings\">\n\t\t\t\t<doc-comment-owner id=\"org.eclipse.cdt.ui.doxygen\">\n\t\t\t\t\t<path value=\"\"/>\n\t\t\t\t</doc-comment-owner>\n\t\t\t</storageModule>\n\t\t</cconfiguration>\n\t</storageModule>\n\t<storageModule moduleId=\"cdtBuildSystem\" version=\"4.0.0\">\n\t\t<project id=\"SQLiteC++.cdt.managedbuild.target.gnu.exe.2007535171\" name=\"Executable\" projectType=\"cdt.managedbuild.target.gnu.exe\"/>\n\t</storageModule>\n\t<storageModule moduleId=\"refreshScope\" versionNumber=\"2\">\n\t\t<configuration configurationName=\"Release\">\n\t\t\t<resource resourceType=\"PROJECT\" workspacePath=\"/SQLiteCpp\"/>\n\t\t</configuration>\n\t\t<configuration configurationName=\"Debug\">\n\t\t\t<resource resourceType=\"PROJECT\" workspacePath=\"/SQLiteCpp\"/>\n\t\t</configuration>\n\t</storageModule>\n\t<storageModule moduleId=\"scannerConfiguration\">\n\t\t<autodiscovery enabled=\"true\" problemReportingEnabled=\"true\" selectedProfileId=\"\"/>\n\t\t<profile id=\"org.eclipse.cdt.make.core.GCCStandardMakePerProjectProfile\">\n\t\t\t<buildOutputProvider>\n\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t</buildOutputProvider>\n\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t<runAction arguments=\"-E -P -v -dD ${plugin_state_location}/${specs_file}\" command=\"gcc\" useDefault=\"true\"/>\n\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t</scannerInfoProvider>\n\t\t</profile>\n\t\t<profile id=\"org.eclipse.cdt.make.core.GCCStandardMakePerFileProfile\">\n\t\t\t<buildOutputProvider>\n\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t</buildOutputProvider>\n\t\t\t<scannerInfoProvider id=\"makefileGenerator\">\n\t\t\t\t<runAction arguments=\"-E -P -v -dD\" command=\"\" useDefault=\"true\"/>\n\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t</scannerInfoProvider>\n\t\t</profile>\n\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfile\">\n\t\t\t<buildOutputProvider>\n\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t</buildOutputProvider>\n\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t<runAction arguments=\"-E -P -v -dD ${plugin_state_location}/${specs_file}\" command=\"gcc\" useDefault=\"true\"/>\n\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t</scannerInfoProvider>\n\t\t</profile>\n\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileCPP\">\n\t\t\t<buildOutputProvider>\n\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t</buildOutputProvider>\n\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t<runAction arguments=\"-E -P -v -dD ${plugin_state_location}/specs.cpp\" command=\"g++\" useDefault=\"true\"/>\n\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t</scannerInfoProvider>\n\t\t</profile>\n\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileC\">\n\t\t\t<buildOutputProvider>\n\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t</buildOutputProvider>\n\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t<runAction arguments=\"-E -P -v -dD ${plugin_state_location}/specs.c\" command=\"gcc\" useDefault=\"true\"/>\n\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t</scannerInfoProvider>\n\t\t</profile>\n\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCWinManagedMakePerProjectProfile\">\n\t\t\t<buildOutputProvider>\n\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t</buildOutputProvider>\n\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t<runAction arguments=\"-c 'gcc -E -P -v -dD &quot;${plugin_state_location}/${specs_file}&quot;'\" command=\"sh\" useDefault=\"true\"/>\n\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t</scannerInfoProvider>\n\t\t</profile>\n\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCWinManagedMakePerProjectProfileCPP\">\n\t\t\t<buildOutputProvider>\n\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t</buildOutputProvider>\n\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t<runAction arguments=\"-c 'g++ -E -P -v -dD &quot;${plugin_state_location}/specs.cpp&quot;'\" command=\"sh\" useDefault=\"true\"/>\n\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t</scannerInfoProvider>\n\t\t</profile>\n\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCWinManagedMakePerProjectProfileC\">\n\t\t\t<buildOutputProvider>\n\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t</buildOutputProvider>\n\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t<runAction arguments=\"-c 'gcc -E -P -v -dD &quot;${plugin_state_location}/specs.c&quot;'\" command=\"sh\" useDefault=\"true\"/>\n\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t</scannerInfoProvider>\n\t\t</profile>\n\t\t<scannerConfigBuildInfo instanceId=\"cdt.managedbuild.config.gnu.exe.release.326780594;cdt.managedbuild.config.gnu.exe.release.326780594.;cdt.managedbuild.tool.gnu.c.compiler.exe.release.1329805514;cdt.managedbuild.tool.gnu.c.compiler.input.1173224902\">\n\t\t\t<autodiscovery enabled=\"true\" problemReportingEnabled=\"true\" selectedProfileId=\"org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileC\"/>\n\t\t\t<profile id=\"org.eclipse.cdt.make.core.GCCStandardMakePerProjectProfile\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-E -P -v -dD ${plugin_state_location}/${specs_file}\" command=\"gcc\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.make.core.GCCStandardMakePerFileProfile\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"makefileGenerator\">\n\t\t\t\t\t<runAction arguments=\"-E -P -v -dD\" command=\"\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfile\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-E -P -v -dD ${plugin_state_location}/${specs_file}\" command=\"gcc\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileCPP\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-E -P -v -dD ${plugin_state_location}/specs.cpp\" command=\"g++\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileC\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-E -P -v -dD ${plugin_state_location}/specs.c\" command=\"gcc\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCWinManagedMakePerProjectProfile\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-c 'gcc -E -P -v -dD &quot;${plugin_state_location}/${specs_file}&quot;'\" command=\"sh\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCWinManagedMakePerProjectProfileCPP\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-c 'g++ -E -P -v -dD &quot;${plugin_state_location}/specs.cpp&quot;'\" command=\"sh\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCWinManagedMakePerProjectProfileC\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-c 'gcc -E -P -v -dD &quot;${plugin_state_location}/specs.c&quot;'\" command=\"sh\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t</scannerConfigBuildInfo>\n\t\t<scannerConfigBuildInfo instanceId=\"cdt.managedbuild.config.gnu.exe.debug.1034724773;cdt.managedbuild.config.gnu.exe.debug.1034724773.;cdt.managedbuild.tool.gnu.cpp.compiler.exe.debug.1817615032;cdt.managedbuild.tool.gnu.cpp.compiler.input.1310903331\">\n\t\t\t<autodiscovery enabled=\"true\" problemReportingEnabled=\"true\" selectedProfileId=\"org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileCPP\"/>\n\t\t\t<profile id=\"org.eclipse.cdt.make.core.GCCStandardMakePerProjectProfile\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-E -P -v -dD ${plugin_state_location}/${specs_file}\" command=\"gcc\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.make.core.GCCStandardMakePerFileProfile\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"makefileGenerator\">\n\t\t\t\t\t<runAction arguments=\"-E -P -v -dD\" command=\"\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfile\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-E -P -v -dD ${plugin_state_location}/${specs_file}\" command=\"gcc\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileCPP\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-E -P -v -dD ${plugin_state_location}/specs.cpp\" command=\"g++\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileC\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-E -P -v -dD ${plugin_state_location}/specs.c\" command=\"gcc\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCWinManagedMakePerProjectProfile\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-c 'gcc -E -P -v -dD &quot;${plugin_state_location}/${specs_file}&quot;'\" command=\"sh\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCWinManagedMakePerProjectProfileCPP\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-c 'g++ -E -P -v -dD &quot;${plugin_state_location}/specs.cpp&quot;'\" command=\"sh\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCWinManagedMakePerProjectProfileC\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-c 'gcc -E -P -v -dD &quot;${plugin_state_location}/specs.c&quot;'\" command=\"sh\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t</scannerConfigBuildInfo>\n\t\t<scannerConfigBuildInfo instanceId=\"cdt.managedbuild.config.gnu.exe.release.326780594;cdt.managedbuild.config.gnu.exe.release.326780594.;cdt.managedbuild.tool.gnu.cpp.compiler.exe.release.2105828055;cdt.managedbuild.tool.gnu.cpp.compiler.input.1064866729\">\n\t\t\t<autodiscovery enabled=\"true\" problemReportingEnabled=\"true\" selectedProfileId=\"org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileCPP\"/>\n\t\t\t<profile id=\"org.eclipse.cdt.make.core.GCCStandardMakePerProjectProfile\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-E -P -v -dD ${plugin_state_location}/${specs_file}\" command=\"gcc\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.make.core.GCCStandardMakePerFileProfile\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"makefileGenerator\">\n\t\t\t\t\t<runAction arguments=\"-E -P -v -dD\" command=\"\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfile\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-E -P -v -dD ${plugin_state_location}/${specs_file}\" command=\"gcc\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileCPP\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-E -P -v -dD ${plugin_state_location}/specs.cpp\" command=\"g++\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileC\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-E -P -v -dD ${plugin_state_location}/specs.c\" command=\"gcc\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCWinManagedMakePerProjectProfile\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-c 'gcc -E -P -v -dD &quot;${plugin_state_location}/${specs_file}&quot;'\" command=\"sh\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCWinManagedMakePerProjectProfileCPP\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-c 'g++ -E -P -v -dD &quot;${plugin_state_location}/specs.cpp&quot;'\" command=\"sh\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCWinManagedMakePerProjectProfileC\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-c 'gcc -E -P -v -dD &quot;${plugin_state_location}/specs.c&quot;'\" command=\"sh\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t</scannerConfigBuildInfo>\n\t\t<scannerConfigBuildInfo instanceId=\"cdt.managedbuild.config.gnu.exe.debug.1034724773;cdt.managedbuild.config.gnu.exe.debug.1034724773.;cdt.managedbuild.tool.gnu.c.compiler.exe.debug.796464367;cdt.managedbuild.tool.gnu.c.compiler.input.1655653012\">\n\t\t\t<autodiscovery enabled=\"true\" problemReportingEnabled=\"true\" selectedProfileId=\"org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileC\"/>\n\t\t\t<profile id=\"org.eclipse.cdt.make.core.GCCStandardMakePerProjectProfile\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-E -P -v -dD ${plugin_state_location}/${specs_file}\" command=\"gcc\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.make.core.GCCStandardMakePerFileProfile\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"makefileGenerator\">\n\t\t\t\t\t<runAction arguments=\"-E -P -v -dD\" command=\"\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfile\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-E -P -v -dD ${plugin_state_location}/${specs_file}\" command=\"gcc\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileCPP\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-E -P -v -dD ${plugin_state_location}/specs.cpp\" command=\"g++\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCManagedMakePerProjectProfileC\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-E -P -v -dD ${plugin_state_location}/specs.c\" command=\"gcc\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCWinManagedMakePerProjectProfile\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-c 'gcc -E -P -v -dD &quot;${plugin_state_location}/${specs_file}&quot;'\" command=\"sh\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCWinManagedMakePerProjectProfileCPP\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-c 'g++ -E -P -v -dD &quot;${plugin_state_location}/specs.cpp&quot;'\" command=\"sh\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t\t<profile id=\"org.eclipse.cdt.managedbuilder.core.GCCWinManagedMakePerProjectProfileC\">\n\t\t\t\t<buildOutputProvider>\n\t\t\t\t\t<openAction enabled=\"true\" filePath=\"\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</buildOutputProvider>\n\t\t\t\t<scannerInfoProvider id=\"specsFile\">\n\t\t\t\t\t<runAction arguments=\"-c 'gcc -E -P -v -dD &quot;${plugin_state_location}/specs.c&quot;'\" command=\"sh\" useDefault=\"true\"/>\n\t\t\t\t\t<parser enabled=\"true\"/>\n\t\t\t\t</scannerInfoProvider>\n\t\t\t</profile>\n\t\t</scannerConfigBuildInfo>\n\t</storageModule>\n\t<storageModule moduleId=\"org.eclipse.cdt.core.LanguageSettingsProviders\"/>\n</cproject>\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.220703125,
          "content": "root = true\n\n# 4 space indentation\n[*]\ncharset = utf-8\nindent_style = space\nindent_size = 4\ninsert_final_newline = true\nend_of_line = lf\n\n# 2 space indentation for CI configuration\n[*.yml]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitbugtraq",
          "type": "blob",
          "size": 0.3447265625,
          "content": "# .gitbugtraq for Git GUIs (SmartGit/TortoiseGit) to show links to the Github issue tracker.\n# Instead of the repository root directory, it could be added as an additional section to $GIT_DIR/config.\n# (note that '\\' need to be escaped).\n[bugtraq]\n  url = https://github.com/SRombauts/SQLiteCpp/issues/%BUGID%\n  loglinkregex = \"#\\\\d+\"\n  logregex = \\\\d+\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3134765625,
          "content": "Debug\nRelease\nbuild\n*.a\n\n# ignore clangd cache directory\n.cache\n.vs/\n.vscode/\n.vsconfig\n*.sln\n*.ncb\n*.suo\n*.user\n*sdf\n*.vc*\n*~\ndoc\ncore\n*ipch\n.settings/\n\n# do not track Visual Studio CMake settings\nCMakeSettings.json\nCMakeCache.txt\nCMakeFiles\n*.dir\nTesting\nWin32\n\nSQLiteCpp_example1\nSQLiteCpp_tests\n\n!FindSQLiteCpp.cmake\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.08984375,
          "content": "[submodule \"googletest\"]\n\tpath = googletest\n\turl = https://github.com/google/googletest.git\n"
        },
        {
          "name": ".project",
          "type": "blob",
          "size": 2.4404296875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<projectDescription>\n\t<name>SQLiteC++</name>\n\t<comment></comment>\n\t<projects>\n\t</projects>\n\t<buildSpec>\n\t\t<buildCommand>\n\t\t\t<name>org.python.pydev.PyDevBuilder</name>\n\t\t\t<arguments>\n\t\t\t</arguments>\n\t\t</buildCommand>\n\t\t<buildCommand>\n\t\t\t<name>org.eclipse.cdt.managedbuilder.core.genmakebuilder</name>\n\t\t\t<triggers>clean,full,incremental,</triggers>\n\t\t\t<arguments>\n\t\t\t\t<dictionary>\n\t\t\t\t\t<key>?name?</key>\n\t\t\t\t\t<value></value>\n\t\t\t\t</dictionary>\n\t\t\t\t<dictionary>\n\t\t\t\t\t<key>org.eclipse.cdt.make.core.append_environment</key>\n\t\t\t\t\t<value>true</value>\n\t\t\t\t</dictionary>\n\t\t\t\t<dictionary>\n\t\t\t\t\t<key>org.eclipse.cdt.make.core.autoBuildTarget</key>\n\t\t\t\t\t<value>all</value>\n\t\t\t\t</dictionary>\n\t\t\t\t<dictionary>\n\t\t\t\t\t<key>org.eclipse.cdt.make.core.buildArguments</key>\n\t\t\t\t\t<value>-j</value>\n\t\t\t\t</dictionary>\n\t\t\t\t<dictionary>\n\t\t\t\t\t<key>org.eclipse.cdt.make.core.buildCommand</key>\n\t\t\t\t\t<value>make</value>\n\t\t\t\t</dictionary>\n\t\t\t\t<dictionary>\n\t\t\t\t\t<key>org.eclipse.cdt.make.core.cleanBuildTarget</key>\n\t\t\t\t\t<value>clean</value>\n\t\t\t\t</dictionary>\n\t\t\t\t<dictionary>\n\t\t\t\t\t<key>org.eclipse.cdt.make.core.contents</key>\n\t\t\t\t\t<value>org.eclipse.cdt.make.core.activeConfigSettings</value>\n\t\t\t\t</dictionary>\n\t\t\t\t<dictionary>\n\t\t\t\t\t<key>org.eclipse.cdt.make.core.enableAutoBuild</key>\n\t\t\t\t\t<value>false</value>\n\t\t\t\t</dictionary>\n\t\t\t\t<dictionary>\n\t\t\t\t\t<key>org.eclipse.cdt.make.core.enableCleanBuild</key>\n\t\t\t\t\t<value>true</value>\n\t\t\t\t</dictionary>\n\t\t\t\t<dictionary>\n\t\t\t\t\t<key>org.eclipse.cdt.make.core.enableFullBuild</key>\n\t\t\t\t\t<value>true</value>\n\t\t\t\t</dictionary>\n\t\t\t\t<dictionary>\n\t\t\t\t\t<key>org.eclipse.cdt.make.core.fullBuildTarget</key>\n\t\t\t\t\t<value>all</value>\n\t\t\t\t</dictionary>\n\t\t\t\t<dictionary>\n\t\t\t\t\t<key>org.eclipse.cdt.make.core.stopOnError</key>\n\t\t\t\t\t<value>true</value>\n\t\t\t\t</dictionary>\n\t\t\t\t<dictionary>\n\t\t\t\t\t<key>org.eclipse.cdt.make.core.useDefaultBuildCmd</key>\n\t\t\t\t\t<value>true</value>\n\t\t\t\t</dictionary>\n\t\t\t</arguments>\n\t\t</buildCommand>\n\t\t<buildCommand>\n\t\t\t<name>org.eclipse.cdt.managedbuilder.core.ScannerConfigBuilder</name>\n\t\t\t<triggers>full,incremental,</triggers>\n\t\t\t<arguments>\n\t\t\t</arguments>\n\t\t</buildCommand>\n\t</buildSpec>\n\t<natures>\n\t\t<nature>org.eclipse.cdt.core.cnature</nature>\n\t\t<nature>org.eclipse.cdt.core.ccnature</nature>\n\t\t<nature>org.eclipse.cdt.managedbuilder.core.managedBuildNature</nature>\n\t\t<nature>org.eclipse.cdt.managedbuilder.core.ScannerConfigNature</nature>\n\t\t<nature>org.python.pydev.pythonNature</nature>\n\t</natures>\n</projectDescription>\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 5.4375,
          "content": "# Copyright (c) 2012-2023 Sebastien Rombauts (sebastien.rombauts@gmail.com)\n\nlanguage: cpp\n\n# Use Linux unless specified otherwise\nos: linux\n\ncache:\n  apt: true\n\nenv:\n  global:\n    - BUILD_TYPE=Debug\n    - ASAN=ON\n    - INTERNAL_SQLITE=ON\n    - VALGRIND=OFF\n    - TESTS=ON\n    - SHARED_LIBS=OFF\n\n# Build variants (should test a reasonable number of combination of CMake options)\njobs:\n  include:\n\n    ##########################################################################\n    # GCC on Linux\n    ##########################################################################\n\n    # GCC 11.2.0 (Ubuntu Jammy 22.04)\n    - dist: jammy\n      env:\n        - cc=gcc cxx=g++\n\n    # Clang 9.3.0 (Ubuntu Focal 20.04)\n    - dist: focal\n      env:\n        - cc=gcc cxx=g++\n\n    # Coverity static code analysis (Ubuntu Bionic 18.04)\n    - dist: bionic\n      env:\n        - COVERITY_SCAN_PROJECT_NAME=SRombauts/SQLiteCpp\n        - COVERITY_SCAN_BRANCH_PATTERN=master\n        - COVERITY_SCAN_NOTIFICATION_EMAIL=sebastien.rombauts@gmail.com\n        - COVERITY_SCAN_BUILD_COMMAND_PREPEND=\"cmake .\"\n        - COVERITY_SCAN_BUILD_COMMAND=\"make -j8\"\n        # Encrypted COVERITY_SCAN_TOKEN, created via the \"travis encrypt\" command using the project repo's public key\n        - secure: \"Qm4d8NEDPBtYZCYav46uPEvDCtaRsjLXlkVS+C+WCJAPcwXCGkrr96wEi7RWcq2xD86QCh0XiqaPT+xdUmlohOYIovRhaaBmZ1lwIJ4GsG/ZR6xoFr3DYsZ3o4GyXk2vNXNxEl82AC+Xs6e6gkLOV9XRkBcjpVIvoIXgNlKWeGY=\"\n\n    # GCC 7.4.0 Debug build with GCov for coverage build (Ubuntu Bionic 18.04)\n    - dist: bionic\n      env:\n        - cc=gcc cxx=g++\n        - GCOV=ON\n        - COVERALLS=ON\n\n    # GCC 7.4.0 Debug build with Valgrind instead of Address Sanitizer (Ubuntu Bionic 18.04)\n    - dist: bionic\n      env:\n        - cc=gcc cxx=g++\n        - ASAN=OFF\n        - VALGRIND=ON\n\n    # GCC 7.4.0 Release build (Ubuntu Bionic 18.04)\n    - dist: bionic\n      env:\n        - cc=gcc cxx=g++\n        - BUILD_TYPE=Release\n\n    # GCC 7.4.0 Shared Libs (Ubuntu Bionic 18.04)\n    - dist: bionic\n      env:\n        - cc=gcc cxx=g++\n        - SHARED_LIBS=ON\n\n    # GCC 7.4.0 test linking with libsqlite3-dev package (Ubuntu Bionic 18.04)\n    - dist: bionic\n      env:\n        - cc=gcc cxx=g++\n        - INTERNAL_SQLITE=OFF\n\n    # GCC 5.4.0 (Ubuntu Xenial 16.04)\n    - dist: xenial # Default\n      env:\n        - cc=gcc cxx=g++\n\n    # GCC 4.8.4 (Ubuntu Trusty 14.04)\n    - dist: trusty\n      env:\n        - cc=gcc cxx=g++\n        - TESTS=OFF\n\n    ##########################################################################\n    # Clang on Linux\n    ##########################################################################\n\n    # Clang 7.0.0 (Ubuntu Jammy 22.04)\n    - dist: jammy\n      env:\n        - cc=clang cxx=clang++\n\n    # Clang 7.0.0 (Ubuntu Focal 20.04)\n    - dist: focal\n      env:\n        - cc=clang cxx=clang++\n\n    # Clang 7.0.0 (Ubuntu Bionic 18.04)\n    - dist: bionic\n      env:\n        - cc=clang cxx=clang++\n\n    # Clang 7.0.0 (Ubuntu Xenial 16.04) \n    - dist: xenial # Default\n      env:\n        - cc=clang cxx=clang++\n\n    # Clang 5.0.0 (Ubuntu Trusty 14.04)\n    - dist: trusty\n      env:\n        - cc=clang cxx=clang++\n        - TESTS=OFF\n\n    ##########################################################################\n    # Clang on OSX\n    ##########################################################################\n\n    # XCode 14.2 - Apple clang 14.0.0 - macOS 12.6\n    - os: osx\n      osx_image: xcode14.2\n      env:\n        - cc=clang cxx=clang++\n\n    # Default XCode - Apple clang 9.1.0 - macOS 10.13\n    - os: osx\n      osx_image: xcode9.4 # Default\n      env:\n        - cc=clang cxx=clang++\n\n    # XCode 8.3 - Applec lang 8.1.0 - macOS 10.12\n    - os: osx\n      osx_image: xcode8.3\n      env:\n        - cc=clang cxx=clang++\n        - TESTS=OFF\n\nbefore_install:\n  # Coverity: don't use addons.coverity_scan since it run on every job of the build matrix, which waste resources and exhausts quotas\n  # Note: the job dedicated to Coverity need to only run the shell script and then exit (to not try to build and run unit tests etc.)\n  - if [[ -n \"$COVERITY_SCAN_PROJECT_NAME\" ]] ; then curl -s https://scan.coverity.com/scripts/travisci_build_coverity_scan.sh | bash ; exit 0 ; fi\n\n  - if [[ \"$INTERNAL_SQLITE\" == \"OFF\" ]]; then sudo apt-get install libsqlite3-dev ; fi\n  - if [[ \"$VALGRIND\" == \"ON\" ]]; then sudo apt-get install valgrind ; fi\n  - if [[ \"$COVERALLS\" == \"ON\" ]]; then pip install --user cpp-coveralls ; fi\n\n    # Set the compiler environment variables properly\n  - export CC=${cc}\n  - export CXX=${cxx}\n\n# scripts to run before build\nbefore_script:\n  - mkdir build\n  - cd build\n  - cmake -DCMAKE_VERBOSE_MAKEFILE=ON -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_SHARED_LIBS=$SHARED_LIBS -DSQLITECPP_INTERNAL_SQLITE=$INTERNAL_SQLITE -DSQLITECPP_USE_ASAN=$ASAN -DSQLITECPP_USE_GCOV=$GCOV -DSQLITECPP_BUILD_EXAMPLES=$TESTS -DSQLITECPP_BUILD_TESTS=$TESTS ..\n\n# build examples, and run tests (ie make & make test)\nscript:\n  - cmake --build .\n  - export ASAN_OPTIONS=verbosity=1:debug=1\n  - if [[ \"$TESTS\" == \"ON\" ]]; then ctest --verbose --output-on-failure ; fi\n  - if [[ \"$VALGRIND\" == \"ON\" ]]; then valgrind --leak-check=full --error-exitcode=1 bin/SQLiteCpp_example1 ; fi\n  - if [[ \"$VALGRIND\" == \"ON\" ]]; then valgrind --leak-check=full --error-exitcode=1 bin/SQLiteCpp_tests ; fi\n\n# generate and publish GCov coveralls results\nafter_success:\n  - if [[ \"$COVERALLS\" == \"ON\" ]]; then coveralls --root .. -e examples -e googletest -e sqlite3 -e tests -E \".*feature_tests.*\" -E \".*CompilerId.*\" --gcov-options '\\-lp' ; fi\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 13.5361328125,
          "content": "2012 Mar 30\n- Start of a new thin C++ SQLite wrapper\n\n2012 Apr 2\n- The wrapper is functional\n- Added documentation and examples\n- Publication on GitHub\n\nVersion 0.1.0 - 2012 Apr 4\n- Added a Database::exec() method to execute simple SQL statement\n- Added a version number like in sqlite3.h, starting with 0.1.0\n\nVersion 0.2.0 - 2012 Apr 11\n- Added getLastInsertId() and setBusyTimout()\n- Added bind() by name methods\n\nVersion 0.3.0 - 2012 Apr 16\n- Added an easy wrapper Database::execAngGet()\n\nVersion 0.4.0 - 2012 Apr 23\n- Added a Database::tableExists() easy to use function\n\nDec 10 2012\n- Added a Statement::exec() method to execute a one-step query with no expected result\n\nVersion 0.5.0 - 2013 March 9\n- Added assert() on errors on destructors\n- Added getBytes()\n- Added getBlob(), getType() and isInteger/isFloat/isText/isBlob/isNull\n- Added bind() for binary blob data\n\nVersion 0.5.1 - 2013 April 7\n- Added Column::getName()\n\nVersion 0.6.0 - 2013 November 22\n- Renamed Column::getName() to Column::getOriginName()\n- Added Column::getName()\n\nVersion 0.7.0 - 2014 January 9\n- Added Database::createFunction()\n- Added std::string version of existing APIs\n- Improved CMake with more build options and Doxygen auto-detection\n\nVersion 0.8.0 - 2014 February 26\n- Database constructor support opening a database with a custom VFS (default to NULL)\n- Changed Column::getText() to return empty string \"\" by default instead of NULL pointer (to handle std::string conversion)\n\nVersion 1.0.0 - 2015 May 3\n- Public headers file moved to include/ dir\n- Added support to biicode in CMakeLists.txt\n- Added Unit Tests\n- Added aBusyTimeoutMs parameter to Database() constructors\n- Added Database::getTotalChanges()\n- Added Database::getErrorCode()\n- Added Statement::clearBindings()\n- Added Statement::getColumn(aName)\n- Added Statement::getErrorCode()\n- Added Statement::getColumnName(aIndex)\n- Added Statement::getColumnOriginName(aIndex)\n\nVersion 1.1.0 - 2015 May 18\n- Fixed valgrind error on Database destructor\n- Added Database::loadExtension\n\nVersion 1.2.0 - 2015 September 9\n- Fixed build with GCC 5.1.0\n- Fixed MSVC release build warning\n- Fixed CppDepends warnings\n- Updated documentation on installation\n- Added Database::getHandle()\n\nVersion 1.3.0 - 2015 November 1\n- Fixed build with Visual Studio 2015\n- Further improvements to README\n- Added Backup class\n\nVersion 1.3.1 - 2016 February 10\n- Switch Linux/Mac build to the provided SQLite3 C library\n- Update SQLite3 from 3.8.8.3 to latest 3.10.2 (2016-01-20)\n- Remove warnings\n- Remove biicode support (defunct service, servers will shutdown the 16th of February 2016)\n\nVersion 2.0.0 - 2016 July 25\n- Update SQLite3 from 3.10.2 to latest 3.13 (2016-05-18)\n- Move #include <sqlite3.h> from headers to .cpp files only using forward declarations\n- Add Database::VERSION to reach SQLITE_VERSION without including sqlite3.h in application code\n- Add getLibVersion() and getLibVersionNumber() to get runtime version of the library\n- Better exception messages when Statements fail PR #84\n- Variadic templates for bind() (C++14) PR #85\n- Add Statement::bindNoCopy() methods for strings, using SQLITE_STATIC to avoid internal copy by SQLite3 PR #86\n- Add Statement::bind() overload for uint32_t, and Column::getUint() and cast operator to uint32_t PR #86\n- Use the new SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION from SQLite 3.13 for security reason\n- Rename Backup::remainingPageCount()/totalPageCount() to Backup::getRemainingPageCount()/getTotalPageCount()\n- Remove Column::errmsg() method : use Database or Statement equivalents\n- More unit tests, with code coverage status on the GitHub page\n- Do not force MSVC to use static runtime if unit-tests are not build\n\nVersion 2.1.0 - 2017 July 18\n- Update SQLite3 from 3.13 to latest 3.19.3 (2017-06-08)\n- Fixed Incompatibility in 3.19.0 (to use older SQLite version set the CMake variable SQLITE_USE_LEGACY_STRUCT) #125\n- Fixed link error (inline in cpp) and compiler warnings (unused variable...) #96\n- Added ability to open encrypted databases (using SQLCipher, eg. libsqlcipher-dev) #107\n- Added convenience functions for constructing objects from a row #114\n- Added CMake install step #118\n- Fix warnings #119\n- Make cpplint.py Python-3 compatible #120\n- Link libssp when targeted #100\n- Removed redundant const #102\n\nVersion 2.2.0 - 2017 Sept 19\n- Update SQLite3 from 3.19.3 to latest 3.20.1 (2017-08-24) #143\n- Added tryExecuteStep and tryReset #142\n- Removed virtual keywords from destructors #140\n- Removed misplaced noexcept keyword #139\n- Improved Exception class C++ conformance #138\n- Fix warnings #134\n- Deprecated Statement::isOk() to Statement::hasRow()\n\nVersion 2.3.0 - 2019 March 3\n- Update SQLite3 from 3.20.1 to latest 3.27.2 (2019-02-25) #183 #187\n- Add Statement binding for long int values #147\n- Allows long int for bind when used with name #148\n- More cmake instructions for Linux #151\n- Add comparison with sqlite_orm #141\n- Fix Statement::bind truncates long integer to 32 bits on x86_64 Linux #155\n- Add a move constructor to Database #157\n- Added tests for all MSVC compilers available on AppVeyor (2013, 2015, 2017) #169\n- Update VariadicBind.h #172\n- Better CMake compatibility #170\n- Add implicit cast operator to char and short types #179 #180\n\nVersion 2.4.0 - 2019 August 25\n- Update SQLite3 from 3.27.2 to 3.29.0 (2019-07-10) #217\n- #191 CMake Warning line 299\n- #190 Implement move constructors\n- #192 Add wrapper for bind parameter count\n- #197 Add tuple_bind and execute_many (requested by #24)\n- #199 Fix #156 misleading error message in exception from Statement::exec\n- #201 Add Statement::getExpandedSQL() to get the SQL text of prepared statement with bound parameters expanded\n- #211 Implement Database::backup()\n- #215 Disable implicit fallthrough warning when building internal sqlite3\n- #216 Set PROJECT_VERSION to fix CMP0048 Policy warnings\n\nVersion 2.5.0 - 2019 December 31\n- Update SQLite3 from 3.29.0 to 3.30.1 (2019-10-10)\n- 100% Unit Test coverage\n- #212 fix sqlite3 compile properties (jzt)\n- #219 Disable cast-function-type warning when building internal sqlite (zxey)\n- #230 Fixed installation on other than Ubuntu GNU/Linux distributions (xvitaly)\n- #228 use transitive compile definitions via cmake (BioDataAnalysis/emmenlau)\n- #232 Added support of packaged GTest for running unit tests (xvitaly)\n- #231 Added SOVERSION field for shared library (xvitaly)\n- #229 Explicitly find and link against system sqlite library (xvitaly)\n- #235 Added support for cmake dependencies and version information (BioDataAnalysis/emmenlau)\n- #249 Added SQLite header parsing functionality and associated tests (patrick--)\n\n- #251 Added example for getHeaderInfo()\n\nVersion 3.0.0 - 2020 January 31\n- C++11 is now required\n- CMake 3.1 minimum\n- Visual Studio 2015 minimum\n- Update Googletest to latest release 1.10\n- Add Github Actions continuous integration solution\n- Add Valgrind memcheck tool to Travis CI\n- Remove Statement::isOk() deprecated in 2.2.0 when renamed to Statement::hasRow()\n- Replace Database::backup() \"C\" implementation by calling the Backup class\n- #252 Run Valgrind memcheck on Travis CI\n- #253 Keep inline functions for GCov code coverage\n- #254 Re-enable Coverity static analysis\n- #256 Fix linking with system library (libsqlite3)\n- #242 Added a `getIndex` method and used it (KOLANICH)\n- #257 Improve Statement unit tests coverage (bind by name with a std::string)\n- #234 support for external sqlite3 (BioDataAnalysis/emmenlau)\n- #243 adding a pure attribute to getIndex() (KOLANICH)\n\nVersion 3.1.0 - 2020 August 11\n- Update SQLite3 from 3.30.1 to 3.32.3 (2020-06-18)\n- #274 Install both cmake files into same lib directory from tcraigtyler\n- #275 Add a method on Statement to get the declared type of a column. from daniel-schmidt\n- #284 Add SQLITE_OPEN_FULLMUTEX flag from rwrx\n- #286 Add CMake option to toggle stack protection from chrisdalke\n- #287 Fixed installation on other than Ubuntu distributions from xvitaly\n- #288 Allow building of sqlite JSON1 extension when building internal sqlite library from zxey\n\nVersion 3.1.1 - 2020 August 19\n- #292 Fix compilation if using SQLITE_HAS_CODEC from sum01\n- #293 Remove FindSQLiteCpp.cmake from sum01\n\nVersion 3.2.0 - 2022 Septembre 18\n- #300 #316 #362 #368 Updated SQLite3 from 3.32.3 to 3.39.3 (2022-09-05)\n- #236 Disable explicit setting of MSVC runtime from BioDataAnalysis/emmenlau\n- #308 Fix build warning due to string truncation from stauffer-garmin\n- #311 Add Database::tryExec() from kcowolf\n- #313 [CMake] Add SQLITECPP_INCLUDE_SCRIPT option from past-due\n- #314 Add Database constructor for filesystem::path (#296) from ptrks\n- #295 Compile internal SQLite library with -ffunction-sections from smichaku\n- #299 Added Savepoint support from catalogm\n- #333 Added Database and Statement getChanges()\n- #305 Add other constants that work with sqlite3_open_v2 from LuAPi/more-flags\n- #333 Added Database and Statement method getChanges() from SRombauts/get-changes\n- #334 fix link for HAS_CODEC from linux-fan-dave/master\n- #338 fix load extension from paulo-coutinho/fix-load-extension\n- #335 from jagerman/older-macos-avoid-std-filesystem\n- #337 Add catkin configuration from ardabbour/master\n- #339 Allow specifying transaction behaviors DEFERRED, IMMEDIATE, and EXCLUSIVE from jjenkins278/transaction_behavior\n- #340 add HTML keywords and properly link up the links in docs/README.md from phoebe-leong/patch-1\n- #341 Install the package.xml file from ardabbour/patch-1\n- #352 add basic meson support from ninjaoflight/meson-support\n- #349 Refactoring of Statement and Column classes from Kacperos155/refactoring-Statement&Column\n- #359 Fix compilation issues earlier than iOS 13\n- #354 Windows improved support (meson) from ninjaoflight/windows-migration\n- #361 Fix Statement unit test using long from SRombauts/fix-statement-unit-tests-long-long-type\n- #346 Add compatible definition for std::experimental::filesystem from guoh27/master\n- #364 Removal of remaining long APIs from SRombauts/convert-remaining-long-types\n- #366 Add vcpkg installation instructions from FrankXie05/vcpkg-instructions\n- #360 Small improvements and code cleaning from Kacperos155/small_improvements\n\nVersions 3.2.1 - 2022 Decembre 12\n- #383 Update SQLite from 3.39.3 to 3.40.0 (2022-11-16) from SRombauts/update-sqlite-340\n- #370 Don't link anymore with Visual Studio's static runtime by default from SRombauts/dont-enforce-static-linking\n- #371 from SRombauts/appveyor-vs-2022\n- #277 from cuberite/cmake-scoping\n- #374 Update googletest from vuhailongkl97/master\n- #377 Some documentation fixes from cbielow/fix_doc\n- #380 [Meson] fixes for meson project from ninjaoflight/windows-support\n- #387 Ensure that TEXT column is UTF-8 encoded before using sqlite3_column_blob() from dougnazar\n- #385 disable SQLITECPP_USE_STACK_PROTECTION when on MinGW from SRombauts/mingw-disable-stack-protection\n- #386 [meson] Update SQLite from 3.39.3 to 3.40.0 from ninjaoflight/sqlite-meson-update\n- #389 [meson] add missing compile options from ninjaoflight/meson-fixes\n\nVersion 3.3.0 - 2023 May 24\n- #393 Fix preprocessor issues from jowr/fix_preprocessor_issues\n- #394 check if SQLITE_OPEN_NOFOLLOW is defined from ninjaoflight/macos-11-fix\n- #391 meson project changes based on wrap submission review from ninjaoflight/meson-macos-fix\n- #390 fix incorrect work of savepoint from spoyler/save_point\tSébastien Rombauts\t12/15/2022 01:12 PM\n- #396 Rename Savepoint RollbackTo() and fix class comments and formatting from SRombauts/rename-savepoint-rollback-to\n- #384 Add Mingw GitHub actions from SRombauts/mingw-github-actions\n- #397 Add a Transaction::rollback() method from SRombauts/add-transaction-rollback\n- #395 add meson usage guide from ninjaoflight/meson-readme-guide\n- #401 Fix meson installation from dougnazar/fix_meson_install\n- #400 CMakr/meson Lint corrections from ninjaoflight/lint-corrections\n- #404 Add documentation for prepared statements in transactions from ewarchul/query_transactions_example\n- #399 add disable option for sqlite3_expanded_sql from ninjaoflight/optional-sqlite3_expanded_sql\n- #408 correct executable name in meson from ninjaoflight/patch-2\n- #407 Create Meson CI from ninjaoflight/patch-1\n- #409 Update package.xml from poshul/patch-1\n- #410 use checkout@v3 in CMake CI from ninjaoflight/fix-nodejs-warnings\n- #406 DLL export/import using BUILD_SHARED_LIBS from pierre-aimi/dllexport_import\n- #415 Remove mismatched else condition in CMakeLists.txt from Timmmm/patch-1\n- #413 Fix compiler warnings from ninjaoflight/fix-visibility-warning\n- #423 Update SQLite from 3.40.0 to 3.42.0 (2023-05-16) from SRombauts/update-sqlite\n\nVersion 3.3.1 - 2023 Aug 27\n\n- #428 Add CMake option SQLITE_ENABLE_DBSTAT_VTAB and SQLITE_ENABLE_RTREE from SRombauts/cmake-sqlite-enable-dbstat-vtab\n- #434 Define SQLITECPP_COMPILE_DLL as PUBLIC from calumr/fix-dll-import\n- #439 Update CMake minimum version to 3.5 to get rid of a new deprecation warning with CMake 3.27 from SRombauts/cmake-update-minimum-version\n- #441 Cleanup of the Github \"build\" workflow from SRombauts/github-actions-improvements\n- Update usage of SQLITECPP_USE_STATIC_RUNTIME (#438)\n- Don't build the googlemock subproject, only the main googletest library\n- Declare BUILD_SHARED_LIBS option for discoverability (#440)\n- Set -DBUILD_SHARED_LIBS=ON by default on scripts and CI/CD (#442)\n- Update SQLite from 3.42.0 to 3.43.0 (2023-08-24) (#443)\n- Rename the original build.yml to cmake.yml vs meson.yml (#444)\n\nVersion 3.3.2 - 2024 Aug 16\n\n- Fix and update Travis CI workflow (#450)\n- Update Googletest to v1.15.2 (#451) and (#478)\n- [Meson] update meson dependencies (#448)\n- Macos ci fix (#476)\n- Update meson dependencies [Meson only] (#475)\n- Update SQLite from 3.43.0 to 3.46.1 (2024-08-13) (#461) and (#477)\n- Explicitly =delete; Statement::bindNoCopy(..., std::string&&) (#469)\n\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 22.6474609375,
          "content": "# Main CMake file for compiling the library itself, examples and tests.\n#\n# Copyright (c) 2012-2024 Sebastien Rombauts (sebastien.rombauts@gmail.com)\n#\n# Distributed under the MIT License (MIT) (See accompanying file LICENSE.txt\n# or copy at http://opensource.org/licenses/MIT)\ncmake_minimum_required(VERSION 3.5)\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake\") # custom CMake modules like FindSQLiteCpp\nproject(SQLiteCpp VERSION 3.3.2)\n\n# SQLiteC++ 3.x requires C++11 features\nif (NOT CMAKE_CXX_STANDARD)\n    set(CMAKE_CXX_STANDARD 11)\nelseif (CMAKE_CXX_STANDARD LESS 11)\n    message(WARNING \"CMAKE_CXX_STANDARD has been set to '${CMAKE_CXX_STANDARD}' which is lower than the minimum required standard (c++11).\")\nendif ()\nmessage(STATUS \"Using c++ standard c++${CMAKE_CXX_STANDARD}\")\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nmessage (STATUS \"CMake version: ${CMAKE_VERSION}\")\nmessage (STATUS \"Project version: ${PROJECT_VERSION}\")\n\noption(SQLITECPP_BUILD_TESTS \"Build and run tests.\" OFF)\n\n# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to make it prominent\noption(BUILD_SHARED_LIBS \"Build shared libraries (DLLs).\" OFF)\n\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\n\n# Define useful variables to handle OS differences:\nif (WIN32)\n    set(DEV_NULL                \"NUL\")\nelse (WIN32) # UNIX\n    set(DEV_NULL                \"/dev/null\")\nendif (WIN32)\n\n# then Compiler/IDE differences:\nif (MSVC)\n    set(CPPLINT_ARG_OUTPUT      \"--output=vs7\")\n    set(CPPCHECK_ARG_TEMPLATE   \"--template=vs\")\n    # disable Visual Studio warnings for fopen() used in the example\n    add_definitions(-D_CRT_SECURE_NO_WARNINGS)\n    # Flags for linking with multithread static C++ runtime, required by internal googletest\n    option(SQLITECPP_USE_STATIC_RUNTIME \"Use MSVC static runtime (default for internal googletest).\" FALSE)\n    if (SQLITECPP_USE_STATIC_RUNTIME)\n        message(STATUS \"Linking against multithread static C++ runtime\")\n        # inspired from Zlib licensed glfw https://github.com/glfw/glfw/blob/master/CMakeLists.txt\n        foreach (flag CMAKE_C_FLAGS\n                      CMAKE_C_FLAGS_DEBUG\n                      CMAKE_C_FLAGS_RELEASE\n                      CMAKE_C_FLAGS_MINSIZEREL\n                      CMAKE_C_FLAGS_RELWITHDEBINFO\n                      CMAKE_CXX_FLAGS\n                      CMAKE_CXX_FLAGS_DEBUG\n                      CMAKE_CXX_FLAGS_RELEASE\n                      CMAKE_CXX_FLAGS_MINSIZEREL\n                      CMAKE_CXX_FLAGS_RELWITHDEBINFO)\n\n            string(REGEX REPLACE \"/MDd\" \"/MTd\" ${flag} \"${${flag}}\")\n            string(REGEX REPLACE \"/MD\" \"/MT\" ${flag} \"${${flag}}\")\n\n        endforeach()\n    else (SQLITECPP_USE_STATIC_RUNTIME)\n        if (SQLITECPP_BUILD_TESTS)\n            message(STATUS \"Force googletest to link against dynamic C++ runtime\")\n            set(gtest_force_shared_crt ON CACHE BOOL \"Use shared (DLL) run-time lib even when Google Test is built as static lib.\")\n        endif (SQLITECPP_BUILD_TESTS)\n    endif (SQLITECPP_USE_STATIC_RUNTIME)\n    # MSVC versions prior to 2015 are not supported anymore by SQLiteC++ 3.x\n    if (MSVC_VERSION LESS 1900) # OR MSVC_TOOLSET_VERSION LESS 140)\n      message(ERROR \"Visual Studio prior to 2015 is not supported anymore.\")\n    endif (MSVC_VERSION LESS 1900)\nelse (MSVC) # Unix/macOS/MinGW\n    set(CPPLINT_ARG_OUTPUT      \"--output=eclipse\")\n    set(CPPCHECK_ARG_TEMPLATE   \"--template=gcc\")\n    # Useful compile flags and extra warnings\n    if (NOT MINGW)\n        # Stack protection is not supported on MinGW-W64 on Windows.\n        # Allow this flag to be turned off.\n        option(SQLITECPP_USE_STACK_PROTECTION \"USE Stack Protection hardening.\" ON)\n        if (SQLITECPP_USE_STACK_PROTECTION)\n            message (STATUS \"Using Stack Protection hardening\")\n            add_compile_options(-fstack-protector)\n        endif (SQLITECPP_USE_STACK_PROTECTION)\n    endif (NOT MINGW)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wextra -Wpedantic -Wswitch-enum -Wshadow -Wno-long-long\") # C++ only, don't bother with sqlite3\n    if (CMAKE_COMPILER_IS_GNUCXX)\n        # GCC flags\n        option(SQLITECPP_USE_GCOV \"USE GCov instrumentation.\" OFF)\n        if (SQLITECPP_USE_GCOV)\n            message (STATUS \"Using GCov instrumentation\")\n            add_compile_options (-coverage)\n            set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -coverage\")\n        endif ()\n    endif (CMAKE_COMPILER_IS_GNUCXX)\nendif (MSVC)\n# and then common variables\nset(CPPLINT_ARG_VERBOSE \"--verbose=3\")\nset(CPPLINT_ARG_LINELENGTH \"--linelength=120\")\n\n# Print CXX compiler information\nmessage (STATUS \"CMAKE_CXX_COMPILER '${CMAKE_CXX_COMPILER}' '${CMAKE_CXX_COMPILER_ID}' '${CMAKE_CXX_COMPILER_VERSION}'\")\n\n# Print CXX FLAGS\nmessage (STATUS \"CMAKE_CXX_FLAGS                '${CMAKE_CXX_FLAGS}'\")\nif (MSVC)\n    message (STATUS \"CMAKE_CXX_FLAGS_DEBUG          '${CMAKE_CXX_FLAGS_DEBUG}'\")\n    message (STATUS \"CMAKE_CXX_FLAGS_RELEASE        '${CMAKE_CXX_FLAGS_RELEASE}'\")\n    message (STATUS \"CMAKE_CXX_FLAGS_RELWITHDEBINFO '${CMAKE_CXX_FLAGS_RELWITHDEBINFO}'\")\n    message (STATUS \"CMAKE_CXX_FLAGS_MINSIZEREL     '${CMAKE_CXX_FLAGS_MINSIZEREL}'\")\nelse ()\n    if     (CMAKE_BUILD_TYPE STREQUAL Debug)\n        message (STATUS \"CMAKE_CXX_FLAGS_DEBUG          '${CMAKE_CXX_FLAGS_DEBUG}'\")\n    elseif (CMAKE_BUILD_TYPE STREQUAL RelWithDebInfo)\n        message (STATUS \"CMAKE_CXX_FLAGS_RELWITHDEBINFO '${CMAKE_CXX_FLAGS_RELWITHDEBINFO}'\")\n    elseif (CMAKE_BUILD_TYPE STREQUAL MinSizeRel)\n        message (STATUS \"CMAKE_CXX_FLAGS_MINSIZEREL     '${CMAKE_CXX_FLAGS_MINSIZEREL}'\")\n    else ()\n        message (STATUS \"CMAKE_CXX_FLAGS_RELEASE        '${CMAKE_CXX_FLAGS_RELEASE}'\")\n    endif ()\nendif ()\n\n## Build the C++ Wrapper ##\n\n# adding a new file require explicitly modifying the CMakeLists.txt\n# so that CMake knows that it should rebuild the project (it is best practice)\n\n# list of sources files of the library\nset(SQLITECPP_SRC\n ${PROJECT_SOURCE_DIR}/src/Backup.cpp\n ${PROJECT_SOURCE_DIR}/src/Column.cpp\n ${PROJECT_SOURCE_DIR}/src/Database.cpp\n ${PROJECT_SOURCE_DIR}/src/Exception.cpp\n ${PROJECT_SOURCE_DIR}/src/Savepoint.cpp\n ${PROJECT_SOURCE_DIR}/src/Statement.cpp\n ${PROJECT_SOURCE_DIR}/src/Transaction.cpp\n)\nsource_group(src FILES ${SQLITECPP_SRC})\n\n# list of header files of the library\nset(SQLITECPP_INC\n ${PROJECT_SOURCE_DIR}/include/SQLiteCpp/SQLiteCpp.h\n ${PROJECT_SOURCE_DIR}/include/SQLiteCpp/Assertion.h\n ${PROJECT_SOURCE_DIR}/include/SQLiteCpp/Backup.h\n ${PROJECT_SOURCE_DIR}/include/SQLiteCpp/Column.h\n ${PROJECT_SOURCE_DIR}/include/SQLiteCpp/Database.h\n ${PROJECT_SOURCE_DIR}/include/SQLiteCpp/Exception.h\n ${PROJECT_SOURCE_DIR}/include/SQLiteCpp/Savepoint.h\n ${PROJECT_SOURCE_DIR}/include/SQLiteCpp/Statement.h\n ${PROJECT_SOURCE_DIR}/include/SQLiteCpp/Transaction.h\n ${PROJECT_SOURCE_DIR}/include/SQLiteCpp/VariadicBind.h\n ${PROJECT_SOURCE_DIR}/include/SQLiteCpp/ExecuteMany.h\n)\nsource_group(include FILES ${SQLITECPP_INC})\n\n# list of test files of the library\nset(SQLITECPP_TESTS\n tests/Column_test.cpp\n tests/Database_test.cpp\n tests/Savepoint_test.cpp\n tests/Statement_test.cpp\n tests/Backup_test.cpp\n tests/Transaction_test.cpp\n tests/VariadicBind_test.cpp\n tests/Exception_test.cpp\n tests/ExecuteMany_test.cpp\n)\nsource_group(tests FILES ${SQLITECPP_TESTS})\n\n# list of example files of the library\nset(SQLITECPP_EXAMPLES\n examples/example1/main.cpp\n)\nsource_group(example1 FILES ${SQLITECPP_EXAMPLES})\n\n# list of doc files of the library\nset(SQLITECPP_DOC\n README.md\n LICENSE.txt\n CHANGELOG.md\n TODO.txt\n)\nsource_group(doc FILES ${SQLITECPP_DOC})\n\noption(SQLITECPP_INCLUDE_SCRIPT \"Include config & script files.\" ON)\nif (SQLITECPP_INCLUDE_SCRIPT)\n    # list of config & script files of the library\n    set(SQLITECPP_SCRIPT\n     .editorconfig\n     .gitbugtraq\n     .github/dependabot.yml\n     .github/workflows/cmake.yml\n     .github/workflows/cmake_builtin_lib.yml\n     .github/workflows/cmake_subdir_example.yml\n     .github/workflows/meson.yml\n     .gitignore\n     .gitmodules\n     .travis.yml\n     appveyor.yml\n     build.bat\n     build.sh\n     cmake/FindSQLite3.cmake\n     cmake/SQLiteCppConfig.cmake.in\n     cpplint.py\n     Doxyfile\n     meson.build\n     meson_options.txt\n     package.xml\n    )\n    source_group(scripts FILES ${SQLITECPP_SCRIPT})\nendif()\n\n# add sources of the wrapper as a \"SQLiteCpp\" static library\nadd_library(SQLiteCpp ${SQLITECPP_SRC} ${SQLITECPP_INC} ${SQLITECPP_DOC} ${SQLITECPP_SCRIPT})\n\n# Options relative to SQLite and SQLiteC++ functions\n\noption(SQLITE_ENABLE_COLUMN_METADATA \"Enable Column::getColumnOriginName(). Require support from sqlite3 library.\" ON)\nif (SQLITE_ENABLE_COLUMN_METADATA)\n    # Enable the use of SQLite column metadata and Column::getColumnOriginName() method,\n    # Require that the sqlite3 library is also compiled with this flag (default under Debian/Ubuntu, but not on Mac OS X).\n    target_compile_definitions(SQLiteCpp PUBLIC SQLITE_ENABLE_COLUMN_METADATA)\nendif (SQLITE_ENABLE_COLUMN_METADATA)\n\noption(SQLITE_ENABLE_ASSERT_HANDLER \"Enable the user definition of a assertion_failed() handler.\" OFF)\nif (SQLITE_ENABLE_ASSERT_HANDLER)\n    # Enable the user definition of a assertion_failed() handler (default to false, easier to handler for beginners).\n    target_compile_definitions(SQLiteCpp PUBLIC SQLITECPP_ENABLE_ASSERT_HANDLER)\nendif (SQLITE_ENABLE_ASSERT_HANDLER)\n\noption(SQLITE_HAS_CODEC \"Enable database encryption API. Not available in the public release of SQLite.\" OFF)\nif (SQLITE_HAS_CODEC)\n    # Enable database encryption API. Requires implementations of sqlite3_key & sqlite3_key_v2.\n    # Eg. SQLCipher (libsqlcipher-dev) is an SQLite extension that provides 256 bit AES encryption of database files. \n    target_compile_definitions(SQLiteCpp PUBLIC SQLITE_HAS_CODEC)\nendif (SQLITE_HAS_CODEC)\n\noption(SQLITE_USE_LEGACY_STRUCT \"Fallback to forward declaration of legacy struct sqlite3_value (pre SQLite 3.19)\" OFF)\nif (SQLITE_USE_LEGACY_STRUCT)\n    # Force forward declaration of legacy struct sqlite3_value (pre SQLite 3.19)\n    target_compile_definitions(SQLiteCpp PUBLIC SQLITE_USE_LEGACY_STRUCT)\nendif (SQLITE_USE_LEGACY_STRUCT)\n\nif (BUILD_SHARED_LIBS)\n    if (WIN32)\n        message(STATUS \"Build shared libraries (DLLs).\")\n        target_compile_definitions(SQLiteCpp PUBLIC \"SQLITECPP_COMPILE_DLL\")\n        target_compile_definitions(SQLiteCpp PRIVATE \"SQLITECPP_DLL_EXPORT\")\n    endif()\nendif()\n\noption(SQLITE_OMIT_LOAD_EXTENSION \"Enable omit load extension\" OFF)\nif (SQLITE_OMIT_LOAD_EXTENSION)\n    # Enable the user definition of load_extension().\n    target_compile_definitions(SQLiteCpp PUBLIC SQLITE_OMIT_LOAD_EXTENSION)\nendif (SQLITE_OMIT_LOAD_EXTENSION)\n\nif (UNIX AND (CMAKE_COMPILER_IS_GNUCXX OR ${CMAKE_CXX_COMPILER_ID} STREQUAL \"Clang\"))\n    set_target_properties(SQLiteCpp PROPERTIES COMPILE_FLAGS \"-fPIC\")\nendif (UNIX AND (CMAKE_COMPILER_IS_GNUCXX OR ${CMAKE_CXX_COMPILER_ID} STREQUAL \"Clang\"))\n\noption(SQLITECPP_USE_ASAN \"Use Address Sanitizer.\" OFF)\nif (SQLITECPP_USE_ASAN)\n    if ((CMAKE_CXX_COMPILER_VERSION GREATER_EQUAL 6) OR (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"Clang\"))\n        message (STATUS \"Using Address Sanitizer\")\n        set_target_properties(SQLiteCpp PROPERTIES COMPILE_FLAGS \"-fsanitize=address -fno-omit-frame-pointer\")\n        set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address\")\n        if (CMAKE_COMPILER_IS_GNUCXX)\n            set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=gold\")\n        endif ()\n    endif ()\nendif (SQLITECPP_USE_ASAN)\n\nif (SQLITECPP_USE_GCOV)\n    # Prevent the compiler from removing the unused inline functions so that they get tracked as \"non-covered\"\n    set_target_properties(SQLiteCpp PROPERTIES COMPILE_FLAGS \"-fkeep-inline-functions -fkeep-static-functions\")\nendif ()\n\n## Build provided copy of SQLite3 C library ##\n\noption(SQLITECPP_INTERNAL_SQLITE \"Add the internal SQLite3 source to the project.\" ON)\nif (SQLITECPP_INTERNAL_SQLITE)\n    message(STATUS \"Compile sqlite3 from source in subdirectory\")\n    option(SQLITE_ENABLE_RTREE \"Enable RTree extension when building internal sqlite3 library.\" OFF)\n    option(SQLITE_ENABLE_DBSTAT_VTAB \"Enable DBSTAT read-only eponymous virtual table extension when building internal sqlite3 library.\" OFF)\n    # build the SQLite3 C library (for ease of use/compatibility) versus Linux sqlite3-dev package\n    add_subdirectory(sqlite3)\n    target_link_libraries(SQLiteCpp PUBLIC SQLite::SQLite3)\nelse (SQLITECPP_INTERNAL_SQLITE)\n    # When using the SQLite codec, we need to link against the sqlcipher lib & include <sqlcipher/sqlite3.h>\n    # So this gets the lib & header, and links/includes everything\n    if(SQLITE_HAS_CODEC)\n        # Make PkgConfig optional since Windows doesn't usually have it installed.\n        find_package(PkgConfig QUIET)\n        if(PKG_CONFIG_FOUND)\n            # IMPORTED_TARGET was added in 3.6.3\n            if(CMAKE_VERSION VERSION_LESS 3.6.3)\n                pkg_check_modules(sqlcipher REQUIRED sqlcipher)\n                # Only used in Database.cpp so PRIVATE to hide from end-user\n                # Since we can't use IMPORTED_TARGET on this older Cmake version, manually link libs & includes\n                target_link_libraries(SQLiteCpp PRIVATE ${sqlcipher_LIBRARIES})\n                target_include_directories(SQLiteCpp PRIVATE ${sqlcipher_INCLUDE_DIRS})\n            else()\n                pkg_check_modules(sqlcipher REQUIRED IMPORTED_TARGET sqlcipher)\n                # Only used in Database.cpp so PRIVATE to hide from end-user\n                target_link_libraries(SQLiteCpp PRIVATE PkgConfig::sqlcipher)\n            endif()\n        else()\n            # Since we aren't using pkgconf here, find it manually\n            find_library(sqlcipher_LIBRARY \"sqlcipher\")\n            find_path(sqlcipher_INCLUDE_DIR \"sqlcipher/sqlite3.h\"\n                PATH_SUFFIXES\n                    \"include\"\n                    \"includes\"\n            )\n            # Hides it from the GUI\n            mark_as_advanced(sqlcipher_LIBRARY sqlcipher_INCLUDE_DIR)\n            if(NOT sqlcipher_INCLUDE_DIR)\n                message(FATAL_ERROR \"${PROJECT_NAME} requires the \\\"<sqlcipher/sqlite3.h>\\\" header to use the codec functionality but it wasn't found.\")\n            elseif(NOT sqlcipher_LIBRARY)\n                message(FATAL_ERROR \"${PROJECT_NAME} requires the sqlcipher library to use the codec functionality but it wasn't found.\")\n            endif()\n            # Only used in Database.cpp so PRIVATE to hide from end-user\n            target_include_directories(SQLiteCpp PRIVATE \"${sqlcipher_INCLUDE_DIR}/sqlcipher\")\n            target_link_libraries(SQLiteCpp PRIVATE ${sqlcipher_LIBRARY})\n        endif()\n    else()\n        find_package (SQLite3 REQUIRED)\n        message(STATUS \"Link to sqlite3 system library ${SQLite3_VERSION}\")\n        target_link_libraries(SQLiteCpp PUBLIC SQLite::SQLite3)\n        if(SQLite3_VERSION VERSION_LESS \"3.19\")\n            set_target_properties(SQLiteCpp PROPERTIES COMPILE_FLAGS \"-DSQLITECPP_HAS_MEM_STRUCT\")\n        endif()\n    endif()\nendif (SQLITECPP_INTERNAL_SQLITE)\n\n## disable the optional support for std::filesystem (C++17)\noption(SQLITECPP_DISABLE_STD_FILESYSTEM \"Disable the use of std::filesystem in SQLiteCpp.\" OFF)\nif (SQLITECPP_DISABLE_STD_FILESYSTEM)\n    message (STATUS \"Disabling std::filesystem support\")\n    target_compile_definitions(SQLiteCpp PUBLIC SQLITECPP_DISABLE_STD_FILESYSTEM)\nendif (SQLITECPP_DISABLE_STD_FILESYSTEM)\n\n## disable the optional support for sqlite3_expanded_sql (from sqlite3 3.14.0)\noption(SQLITECPP_DISABLE_EXPANDED_SQL \"Disable the use of sqlite3_expanded_sql in SQLiteCpp.\" OFF)\nif (SQLITECPP_DISABLE_EXPANDED_SQL)\n    message (STATUS \"Disabling sqlite3_expanded_sql support\")\n    target_compile_definitions(SQLiteCpp PUBLIC SQLITECPP_DISABLE_EXPANDED_SQL)\nendif (SQLITECPP_DISABLE_EXPANDED_SQL)\n\n# Link target with pthread and dl for Unix\nif (UNIX)\n    set(THREADS_PREFER_PTHREAD_FLAG ON)\n    find_package(Threads REQUIRED)\n    target_link_libraries(SQLiteCpp PUBLIC Threads::Threads ${CMAKE_DL_LIBS})\nendif (UNIX)\n\n# Set includes for target and transitive downstream targets\n\ntarget_include_directories(SQLiteCpp\n  PUBLIC\n    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n    $<INSTALL_INTERFACE:include/>)\n\n# Allow the library to be installed via \"make install\" and found with \"find_package\"\n\ninclude(GNUInstallDirs)\ninstall(TARGETS SQLiteCpp\n    EXPORT ${PROJECT_NAME}Targets\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}\n    COMPONENT libraries)\ninstall(DIRECTORY include/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT headers FILES_MATCHING REGEX \".*\\\\.(hpp|h)$\")\ninstall(EXPORT ${PROJECT_NAME}Targets DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})\ninstall(FILES ${PROJECT_SOURCE_DIR}/package.xml DESTINATION ${CMAKE_INSTALL_DATADIR}/${PROJECT_NAME})\n\ninclude(CMakePackageConfigHelpers)\nwrite_basic_package_version_file(\n    cmake/${PROJECT_NAME}ConfigVersion.cmake\n    VERSION ${PROJECT_VERSION}\n    COMPATIBILITY AnyNewerVersion)\nconfigure_package_config_file(\n    cmake/${PROJECT_NAME}Config.cmake.in\n    cmake/${PROJECT_NAME}Config.cmake\n    INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})\ninstall(FILES\n    ${CMAKE_CURRENT_BINARY_DIR}/cmake/${PROJECT_NAME}Config.cmake\n    ${CMAKE_CURRENT_BINARY_DIR}/cmake/${PROJECT_NAME}ConfigVersion.cmake\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME})\n\n# Optional additional targets:\n\noption(SQLITECPP_RUN_CPPLINT \"Run cpplint.py tool for Google C++ StyleGuide.\" ON)\nif (SQLITECPP_RUN_CPPLINT)\n    # The minimum version of CMAKE is 3.5, but as of 3.12 the PythonInterp package is deprecated.\n    if(${CMAKE_VERSION} VERSION_LESS \"3.12.0\") \n        find_package(PythonInterp)\n        if (PYTHONINTERP_FOUND)\n            # add a cpplint target to the \"all\" target\n            add_custom_target(SQLiteCpp_cpplint\n            ALL\n            COMMAND ${PYTHON_EXECUTABLE} ${PROJECT_SOURCE_DIR}/cpplint.py ${CPPLINT_ARG_OUTPUT} ${CPPLINT_ARG_VERBOSE} ${CPPLINT_ARG_LINELENGTH} ${SQLITECPP_SRC} ${SQLITECPP_INC}\n            )\n        endif (PYTHONINTERP_FOUND)\n    else()\n        find_package(Python)\n        if (PYTHON_INTERPRETER_FOUND)\n            # add a cpplint target to the \"all\" target\n            add_custom_target(SQLiteCpp_cpplint\n            ALL\n            COMMAND ${PYTHON_EXECUTABLE} ${PROJECT_SOURCE_DIR}/cpplint.py ${CPPLINT_ARG_OUTPUT} ${CPPLINT_ARG_VERBOSE} ${CPPLINT_ARG_LINELENGTH} ${SQLITECPP_SRC} ${SQLITECPP_INC}\n            )\n        endif (PYTHON_INTERPRETER_FOUND)\n    endif()\nelse (SQLITECPP_RUN_CPPLINT)\n    message(STATUS \"SQLITECPP_RUN_CPPLINT OFF\")\nendif (SQLITECPP_RUN_CPPLINT)\n\noption(SQLITECPP_RUN_CPPCHECK \"Run cppcheck C++ static analysis tool.\" ON)\nif (SQLITECPP_RUN_CPPCHECK)\n    find_program(CPPCHECK_EXECUTABLE NAMES cppcheck)\n    if (CPPCHECK_EXECUTABLE)\n        # add a cppcheck target to the \"all\" target\n        add_custom_target(SQLiteCpp_cppcheck\n         ALL\n         COMMAND ${CPPCHECK_EXECUTABLE} -j 8 cppcheck --enable=style --quiet ${CPPCHECK_ARG_TEMPLATE} ${PROJECT_SOURCE_DIR}/src\n        )\n        execute_process(COMMAND \"${CPPCHECK_EXECUTABLE}\" --version OUTPUT_VARIABLE CPPCHECK_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE)\n        message(STATUS \"Found Cppcheck: ${CPPCHECK_EXECUTABLE} ${CPPCHECK_VERSION}\")\n    else (CPPCHECK_EXECUTABLE)\n        message(STATUS \"Could NOT find cppcheck\")\n    endif (CPPCHECK_EXECUTABLE)\nelse (SQLITECPP_RUN_CPPCHECK)\n    message(STATUS \"SQLITECPP_RUN_CPPCHECK OFF\")\nendif (SQLITECPP_RUN_CPPCHECK)\n\noption(SQLITECPP_RUN_DOXYGEN \"Run Doxygen C++ documentation tool.\" OFF)\nif (SQLITECPP_RUN_DOXYGEN)\n    find_package(Doxygen)\n    if (DOXYGEN_FOUND)\n        # add a Doxygen target to the \"all\" target\n        add_custom_target(SQLiteCpp_doxygen\n         ALL\n         COMMAND doxygen Doxyfile > ${DEV_NULL}\n         WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n        )\n    endif (DOXYGEN_FOUND)\nelse (SQLITECPP_RUN_DOXYGEN)\n    message(STATUS \"SQLITECPP_RUN_DOXYGEN OFF\")\nendif (SQLITECPP_RUN_DOXYGEN)\n\noption(SQLITECPP_BUILD_EXAMPLES \"Build examples.\" OFF)\nif (SQLITECPP_BUILD_EXAMPLES)\n\n    # add the basic example executable\n    add_executable(SQLiteCpp_example1 ${SQLITECPP_EXAMPLES})\n    \n    target_link_libraries(SQLiteCpp_example1 SQLiteCpp)\n    if (MSYS OR MINGW)\n        target_link_libraries(SQLiteCpp_example1 ssp)\n    endif ()\nelse (SQLITECPP_BUILD_EXAMPLES)\n    message(STATUS \"SQLITECPP_BUILD_EXAMPLES OFF\")\nendif (SQLITECPP_BUILD_EXAMPLES)\n\nif (SQLITECPP_BUILD_TESTS)\n    # add the unit test executable\n    add_executable(SQLiteCpp_tests ${SQLITECPP_TESTS})\n    target_link_libraries(SQLiteCpp_tests SQLiteCpp)\n\n    find_package(GTest)\n    if (GTEST_FOUND)\n        message(STATUS \"Link to GTest system library\")\n        target_link_libraries(SQLiteCpp_tests GTest::GTest GTest::Main)\n    else (GTEST_FOUND)\n        message(STATUS \"Compile googletest from source in submodule\")\n        # deactivate some warnings for compiling the googletest library\n        if (NOT MSVC)\n            add_compile_options(-Wno-switch-enum)\n        endif (NOT MSVC)\n\n        # add the subdirectory containing the CMakeLists.txt for the googletest library\n        if (NOT EXISTS \"${PROJECT_SOURCE_DIR}/googletest/CMakeLists.txt\")\n            message(FATAL_ERROR \"Missing 'googletest' submodule! Either use 'git submodule init' and 'git submodule update' to get googletest according to the README, or deactivate unit tests with -DSQLITECPP_BUILD_TESTS=OFF\")\n        endif ()\n        # don't build the googlemock subproject, only the main googletest library\n        set(BUILD_GMOCK OFF CACHE BOOL \"Builds the googlemock subproject\")\n        add_subdirectory(googletest)\n        include_directories(\"${PROJECT_SOURCE_DIR}/googletest/googletest/include\")\n\n        # Add definitions to keep googletest from making the compilation fail\n        if (MSVC)\n            if (MSVC_VERSION GREATER_EQUAL 1910 AND MSVC_VERSION LESS_EQUAL 1919) # OR MSVC_TOOLSET_VERSION EQUAL 141)\n                target_compile_definitions(gtest PUBLIC _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING)\n                target_compile_definitions(gtest_main PUBLIC _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING)\n                target_compile_definitions(gmock PUBLIC _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING)\n                target_compile_definitions(gmock_main PUBLIC _SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING)\n            endif (MSVC_VERSION GREATER_EQUAL 1910 AND MSVC_VERSION LESS_EQUAL 1919)\n        endif (MSVC)\n\n        target_link_libraries(SQLiteCpp_tests gtest_main)\n    endif (GTEST_FOUND)\n\n    # add a \"test\" target:\n    enable_testing()\n\n    # does the tests pass?\n    add_test(UnitTests bin/SQLiteCpp_tests)\n\n    if (SQLITECPP_BUILD_EXAMPLES)\n        # does the example1 runs successfully?\n        add_test(Example1Run bin/SQLiteCpp_example1)\n    endif (SQLITECPP_BUILD_EXAMPLES)\nelse (SQLITECPP_BUILD_TESTS)\n    message(STATUS \"SQLITECPP_BUILD_TESTS OFF\")\nendif (SQLITECPP_BUILD_TESTS)\n\n# API version for SQLiteCpp shared library.\nset_property(TARGET SQLiteCpp PROPERTY SOVERSION 0)\n"
        },
        {
          "name": "Doxyfile",
          "type": "blob",
          "size": 108.1083984375,
          "content": "# Doxyfile 1.8.16\n\n# This file describes the settings to be used by the documentation system\n# doxygen (www.doxygen.org) for a project.\n#\n# All text after a double hash (##) is considered a comment and is placed in\n# front of the TAG it is preceding.\n#\n# All text after a single hash (#) is considered a comment and will be ignored.\n# The format is:\n# TAG = value [value, ...]\n# For lists, items can also be appended using:\n# TAG += value [value, ...]\n# Values that contain spaces should be placed between quotes (\\\" \\\").\n\n#---------------------------------------------------------------------------\n# Project related configuration options\n#---------------------------------------------------------------------------\n\n# This tag specifies the encoding used for all characters in the configuration\n# file that follow. The default is UTF-8 which is also the encoding used for all\n# text before the first occurrence of this tag. Doxygen uses libiconv (or the\n# iconv built into libc) for the transcoding. See\n# https://www.gnu.org/software/libiconv/ for the list of possible encodings.\n# The default value is: UTF-8.\n\nDOXYFILE_ENCODING      = UTF-8\n\n# The PROJECT_NAME tag is a single word (or a sequence of words surrounded by\n# double-quotes, unless you are using Doxywizard) that should identify the\n# project for which the documentation is generated. This name is used in the\n# title of most generated pages and in a few other places.\n# The default value is: My Project.\n\nPROJECT_NAME           = SQLiteC++\n\n# The PROJECT_NUMBER tag can be used to enter a project or revision number. This\n# could be handy for archiving the generated documentation or if some version\n# control system is used.\n\nPROJECT_NUMBER         = 3.3.2\n\n# Using the PROJECT_BRIEF tag one can provide an optional one line description\n# for a project that appears at the top of each page and should give viewer a\n# quick idea about the purpose of the project. Keep the description short.\n\nPROJECT_BRIEF          = \"SQLiteC++ is a smart and easy to use C++ SQLite3 wrapper.\"\n\n# With the PROJECT_LOGO tag one can specify a logo or an icon that is included\n# in the documentation. The maximum height of the logo should not exceed 55\n# pixels and the maximum width should not exceed 200 pixels. Doxygen will copy\n# the logo to the output directory.\n\nPROJECT_LOGO           =\n\n# The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute) path\n# into which the generated documentation will be written. If a relative path is\n# entered, it will be relative to the location where doxygen was started. If\n# left blank the current directory will be used.\n\nOUTPUT_DIRECTORY       = doc\n\n# If the CREATE_SUBDIRS tag is set to YES then doxygen will create 4096 sub-\n# directories (in 2 levels) under the output directory of each output format and\n# will distribute the generated files over these directories. Enabling this\n# option can be useful when feeding doxygen a huge amount of source files, where\n# putting all generated files in the same directory would otherwise causes\n# performance problems for the file system.\n# The default value is: NO.\n\nCREATE_SUBDIRS         = NO\n\n# If the ALLOW_UNICODE_NAMES tag is set to YES, doxygen will allow non-ASCII\n# characters to appear in the names of generated files. If set to NO, non-ASCII\n# characters will be escaped, for example _xE3_x81_x84 will be used for Unicode\n# U+3044.\n# The default value is: NO.\n\nALLOW_UNICODE_NAMES    = NO\n\n# The OUTPUT_LANGUAGE tag is used to specify the language in which all\n# documentation generated by doxygen is written. Doxygen will use this\n# information to generate all constant output in the proper language.\n# Possible values are: Afrikaans, Arabic, Armenian, Brazilian, Catalan, Chinese,\n# Chinese-Traditional, Croatian, Czech, Danish, Dutch, English (United States),\n# Esperanto, Farsi (Persian), Finnish, French, German, Greek, Hungarian,\n# Indonesian, Italian, Japanese, Japanese-en (Japanese with English messages),\n# Korean, Korean-en (Korean with English messages), Latvian, Lithuanian,\n# Macedonian, Norwegian, Persian (Farsi), Polish, Portuguese, Romanian, Russian,\n# Serbian, Serbian-Cyrillic, Slovak, Slovene, Spanish, Swedish, Turkish,\n# Ukrainian and Vietnamese.\n# The default value is: English.\n\nOUTPUT_LANGUAGE        = English\n\n# The OUTPUT_TEXT_DIRECTION tag is used to specify the direction in which all\n# documentation generated by doxygen is written. Doxygen will use this\n# information to generate all generated output in the proper direction.\n# Possible values are: None, LTR, RTL and Context.\n# The default value is: None.\n\nOUTPUT_TEXT_DIRECTION  = None\n\n# If the BRIEF_MEMBER_DESC tag is set to YES, doxygen will include brief member\n# descriptions after the members that are listed in the file and class\n# documentation (similar to Javadoc). Set to NO to disable this.\n# The default value is: YES.\n\nBRIEF_MEMBER_DESC      = YES\n\n# If the REPEAT_BRIEF tag is set to YES, doxygen will prepend the brief\n# description of a member or function before the detailed description\n#\n# Note: If both HIDE_UNDOC_MEMBERS and BRIEF_MEMBER_DESC are set to NO, the\n# brief descriptions will be completely suppressed.\n# The default value is: YES.\n\nREPEAT_BRIEF           = YES\n\n# This tag implements a quasi-intelligent brief description abbreviator that is\n# used to form the text in various listings. Each string in this list, if found\n# as the leading text of the brief description, will be stripped from the text\n# and the result, after processing the whole list, is used as the annotated\n# text. Otherwise, the brief description is used as-is. If left blank, the\n# following values are used ($name is automatically replaced with the name of\n# the entity):The $name class, The $name widget, The $name file, is, provides,\n# specifies, contains, represents, a, an and the.\n\nABBREVIATE_BRIEF       = \"The $name class\" \\\n                         \"The $name widget\" \\\n                         \"The $name file\" \\\n                         is \\\n                         provides \\\n                         specifies \\\n                         contains \\\n                         represents \\\n                         a \\\n                         an \\\n                         the\n\n# If the ALWAYS_DETAILED_SEC and REPEAT_BRIEF tags are both set to YES then\n# doxygen will generate a detailed section even if there is only a brief\n# description.\n# The default value is: NO.\n\nALWAYS_DETAILED_SEC    = NO\n\n# If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all\n# inherited members of a class in the documentation of that class as if those\n# members were ordinary class members. Constructors, destructors and assignment\n# operators of the base classes will not be shown.\n# The default value is: NO.\n\nINLINE_INHERITED_MEMB  = NO\n\n# If the FULL_PATH_NAMES tag is set to YES, doxygen will prepend the full path\n# before files name in the file list and in the header files. If set to NO the\n# shortest path that makes the file name unique will be used\n# The default value is: YES.\n\nFULL_PATH_NAMES        = YES\n\n# The STRIP_FROM_PATH tag can be used to strip a user-defined part of the path.\n# Stripping is only done if one of the specified strings matches the left-hand\n# part of the path. The tag can be used to show relative paths in the file list.\n# If left blank the directory from which doxygen is run is used as the path to\n# strip.\n#\n# Note that you can specify absolute paths here, but also relative paths, which\n# will be relative from the directory where doxygen is started.\n# This tag requires that the tag FULL_PATH_NAMES is set to YES.\n\nSTRIP_FROM_PATH        =\n\n# The STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of the\n# path mentioned in the documentation of a class, which tells the reader which\n# header file to include in order to use a class. If left blank only the name of\n# the header file containing the class definition is used. Otherwise one should\n# specify the list of include paths that are normally passed to the compiler\n# using the -I flag.\n\nSTRIP_FROM_INC_PATH    =\n\n# If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter (but\n# less readable) file names. This can be useful is your file systems doesn't\n# support long names like on DOS, Mac, or CD-ROM.\n# The default value is: NO.\n\nSHORT_NAMES            = NO\n\n# If the JAVADOC_AUTOBRIEF tag is set to YES then doxygen will interpret the\n# first line (until the first dot) of a Javadoc-style comment as the brief\n# description. If set to NO, the Javadoc-style will behave just like regular Qt-\n# style comments (thus requiring an explicit @brief command for a brief\n# description.)\n# The default value is: NO.\n\nJAVADOC_AUTOBRIEF      = NO\n\n# If the JAVADOC_BANNER tag is set to YES then doxygen will interpret a line\n# such as\n# /***************\n# as being the beginning of a Javadoc-style comment \"banner\". If set to NO, the\n# Javadoc-style will behave just like regular comments and it will not be\n# interpreted by doxygen.\n# The default value is: NO.\n\nJAVADOC_BANNER         = NO\n\n# If the QT_AUTOBRIEF tag is set to YES then doxygen will interpret the first\n# line (until the first dot) of a Qt-style comment as the brief description. If\n# set to NO, the Qt-style will behave just like regular Qt-style comments (thus\n# requiring an explicit \\brief command for a brief description.)\n# The default value is: NO.\n\nQT_AUTOBRIEF           = NO\n\n# The MULTILINE_CPP_IS_BRIEF tag can be set to YES to make doxygen treat a\n# multi-line C++ special comment block (i.e. a block of //! or /// comments) as\n# a brief description. This used to be the default behavior. The new default is\n# to treat a multi-line C++ comment block as a detailed description. Set this\n# tag to YES if you prefer the old behavior instead.\n#\n# Note that setting this tag to YES also means that rational rose comments are\n# not recognized any more.\n# The default value is: NO.\n\nMULTILINE_CPP_IS_BRIEF = NO\n\n# If the INHERIT_DOCS tag is set to YES then an undocumented member inherits the\n# documentation from any documented member that it re-implements.\n# The default value is: YES.\n\nINHERIT_DOCS           = YES\n\n# If the SEPARATE_MEMBER_PAGES tag is set to YES then doxygen will produce a new\n# page for each member. If set to NO, the documentation of a member will be part\n# of the file/class/namespace that contains it.\n# The default value is: NO.\n\nSEPARATE_MEMBER_PAGES  = NO\n\n# The TAB_SIZE tag can be used to set the number of spaces in a tab. Doxygen\n# uses this value to replace tabs by spaces in code fragments.\n# Minimum value: 1, maximum value: 16, default value: 4.\n\nTAB_SIZE               = 7\n\n# This tag can be used to specify a number of aliases that act as commands in\n# the documentation. An alias has the form:\n# name=value\n# For example adding\n# \"sideeffect=@par Side Effects:\\n\"\n# will allow you to put the command \\sideeffect (or @sideeffect) in the\n# documentation, which will result in a user-defined paragraph with heading\n# \"Side Effects:\". You can put \\n's in the value part of an alias to insert\n# newlines (in the resulting output). You can put ^^ in the value part of an\n# alias to insert a newline as if a physical newline was in the original file.\n# When you need a literal { or } or , in the value part of an alias you have to\n# escape them by means of a backslash (\\), this can lead to conflicts with the\n# commands \\{ and \\} for these it is advised to use the version @{ and @} or use\n# a double escape (\\\\{ and \\\\})\n\nALIASES                =\n\n# This tag can be used to specify a number of word-keyword mappings (TCL only).\n# A mapping has the form \"name=value\". For example adding \"class=itcl::class\"\n# will allow you to use the command class in the itcl::class meaning.\n\nTCL_SUBST              =\n\n# Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C sources\n# only. Doxygen will then generate output that is more tailored for C. For\n# instance, some of the names that are used will be different. The list of all\n# members will be omitted, etc.\n# The default value is: NO.\n\nOPTIMIZE_OUTPUT_FOR_C  = NO\n\n# Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of Java or\n# Python sources only. Doxygen will then generate output that is more tailored\n# for that language. For instance, namespaces will be presented as packages,\n# qualified scopes will look different, etc.\n# The default value is: NO.\n\nOPTIMIZE_OUTPUT_JAVA   = NO\n\n# Set the OPTIMIZE_FOR_FORTRAN tag to YES if your project consists of Fortran\n# sources. Doxygen will then generate output that is tailored for Fortran.\n# The default value is: NO.\n\nOPTIMIZE_FOR_FORTRAN   = NO\n\n# Set the OPTIMIZE_OUTPUT_VHDL tag to YES if your project consists of VHDL\n# sources. Doxygen will then generate output that is tailored for VHDL.\n# The default value is: NO.\n\nOPTIMIZE_OUTPUT_VHDL   = NO\n\n# Set the OPTIMIZE_OUTPUT_SLICE tag to YES if your project consists of Slice\n# sources only. Doxygen will then generate output that is more tailored for that\n# language. For instance, namespaces will be presented as modules, types will be\n# separated into more groups, etc.\n# The default value is: NO.\n\nOPTIMIZE_OUTPUT_SLICE  = NO\n\n# Doxygen selects the parser to use depending on the extension of the files it\n# parses. With this tag you can assign which parser to use for a given\n# extension. Doxygen has a built-in mapping, but you can override or extend it\n# using this tag. The format is ext=language, where ext is a file extension, and\n# language is one of the parsers supported by doxygen: IDL, Java, Javascript,\n# Csharp (C#), C, C++, D, PHP, md (Markdown), Objective-C, Python, Slice,\n# Fortran (fixed format Fortran: FortranFixed, free formatted Fortran:\n# FortranFree, unknown formatted Fortran: Fortran. In the later case the parser\n# tries to guess whether the code is fixed or free formatted code, this is the\n# default for Fortran type files), VHDL, tcl. For instance to make doxygen treat\n# .inc files as Fortran files (default is PHP), and .f files as C (default is\n# Fortran), use: inc=Fortran f=C.\n#\n# Note: For files without extension you can use no_extension as a placeholder.\n#\n# Note that for custom extensions you also need to set FILE_PATTERNS otherwise\n# the files are not read by doxygen.\n\nEXTENSION_MAPPING      =\n\n# If the MARKDOWN_SUPPORT tag is enabled then doxygen pre-processes all comments\n# according to the Markdown format, which allows for more readable\n# documentation. See https://daringfireball.net/projects/markdown/ for details.\n# The output of markdown processing is further processed by doxygen, so you can\n# mix doxygen, HTML, and XML commands with Markdown formatting. Disable only in\n# case of backward compatibilities issues.\n# The default value is: YES.\n\nMARKDOWN_SUPPORT       = YES\n\n# When the TOC_INCLUDE_HEADINGS tag is set to a non-zero value, all headings up\n# to that level are automatically included in the table of contents, even if\n# they do not have an id attribute.\n# Note: This feature currently applies only to Markdown headings.\n# Minimum value: 0, maximum value: 99, default value: 5.\n# This tag requires that the tag MARKDOWN_SUPPORT is set to YES.\n\nTOC_INCLUDE_HEADINGS   = 5\n\n# When enabled doxygen tries to link words that correspond to documented\n# classes, or namespaces to their corresponding documentation. Such a link can\n# be prevented in individual cases by putting a % sign in front of the word or\n# globally by setting AUTOLINK_SUPPORT to NO.\n# The default value is: YES.\n\nAUTOLINK_SUPPORT       = YES\n\n# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want\n# to include (a tag file for) the STL sources as input, then you should set this\n# tag to YES in order to let doxygen match functions declarations and\n# definitions whose arguments contain STL classes (e.g. func(std::string);\n# versus func(std::string) {}). This also make the inheritance and collaboration\n# diagrams that involve STL classes more complete and accurate.\n# The default value is: NO.\n\nBUILTIN_STL_SUPPORT    = NO\n\n# If you use Microsoft's C++/CLI language, you should set this option to YES to\n# enable parsing support.\n# The default value is: NO.\n\nCPP_CLI_SUPPORT        = NO\n\n# Set the SIP_SUPPORT tag to YES if your project consists of sip (see:\n# https://www.riverbankcomputing.com/software/sip/intro) sources only. Doxygen\n# will parse them like normal C++ but will assume all classes use public instead\n# of private inheritance when no explicit protection keyword is present.\n# The default value is: NO.\n\nSIP_SUPPORT            = NO\n\n# For Microsoft's IDL there are propget and propput attributes to indicate\n# getter and setter methods for a property. Setting this option to YES will make\n# doxygen to replace the get and set methods by a property in the documentation.\n# This will only work if the methods are indeed getting or setting a simple\n# type. If this is not the case, or you want to show the methods anyway, you\n# should set this option to NO.\n# The default value is: YES.\n\nIDL_PROPERTY_SUPPORT   = YES\n\n# If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC\n# tag is set to YES then doxygen will reuse the documentation of the first\n# member in the group (if any) for the other members of the group. By default\n# all members of a group must be documented explicitly.\n# The default value is: NO.\n\nDISTRIBUTE_GROUP_DOC   = NO\n\n# If one adds a struct or class to a group and this option is enabled, then also\n# any nested class or struct is added to the same group. By default this option\n# is disabled and one has to add nested compounds explicitly via \\ingroup.\n# The default value is: NO.\n\nGROUP_NESTED_COMPOUNDS = NO\n\n# Set the SUBGROUPING tag to YES to allow class member groups of the same type\n# (for instance a group of public functions) to be put as a subgroup of that\n# type (e.g. under the Public Functions section). Set it to NO to prevent\n# subgrouping. Alternatively, this can be done per class using the\n# \\nosubgrouping command.\n# The default value is: YES.\n\nSUBGROUPING            = YES\n\n# When the INLINE_GROUPED_CLASSES tag is set to YES, classes, structs and unions\n# are shown inside the group in which they are included (e.g. using \\ingroup)\n# instead of on a separate page (for HTML and Man pages) or section (for LaTeX\n# and RTF).\n#\n# Note that this feature does not work in combination with\n# SEPARATE_MEMBER_PAGES.\n# The default value is: NO.\n\nINLINE_GROUPED_CLASSES = NO\n\n# When the INLINE_SIMPLE_STRUCTS tag is set to YES, structs, classes, and unions\n# with only public data fields or simple typedef fields will be shown inline in\n# the documentation of the scope in which they are defined (i.e. file,\n# namespace, or group documentation), provided this scope is documented. If set\n# to NO, structs, classes, and unions are shown on a separate page (for HTML and\n# Man pages) or section (for LaTeX and RTF).\n# The default value is: NO.\n\nINLINE_SIMPLE_STRUCTS  = NO\n\n# When TYPEDEF_HIDES_STRUCT tag is enabled, a typedef of a struct, union, or\n# enum is documented as struct, union, or enum with the name of the typedef. So\n# typedef struct TypeS {} TypeT, will appear in the documentation as a struct\n# with name TypeT. When disabled the typedef will appear as a member of a file,\n# namespace, or class. And the struct will be named TypeS. This can typically be\n# useful for C code in case the coding convention dictates that all compound\n# types are typedef'ed and only the typedef is referenced, never the tag name.\n# The default value is: NO.\n\nTYPEDEF_HIDES_STRUCT   = NO\n\n# The size of the symbol lookup cache can be set using LOOKUP_CACHE_SIZE. This\n# cache is used to resolve symbols given their name and scope. Since this can be\n# an expensive process and often the same symbol appears multiple times in the\n# code, doxygen keeps a cache of pre-resolved symbols. If the cache is too small\n# doxygen will become slower. If the cache is too large, memory is wasted. The\n# cache size is given by this formula: 2^(16+LOOKUP_CACHE_SIZE). The valid range\n# is 0..9, the default is 0, corresponding to a cache size of 2^16=65536\n# symbols. At the end of a run doxygen will report the cache usage and suggest\n# the optimal cache size from a speed point of view.\n# Minimum value: 0, maximum value: 9, default value: 0.\n\nLOOKUP_CACHE_SIZE      = 0\n\n#---------------------------------------------------------------------------\n# Build related configuration options\n#---------------------------------------------------------------------------\n\n# If the EXTRACT_ALL tag is set to YES, doxygen will assume all entities in\n# documentation are documented, even if no documentation was available. Private\n# class members and static file members will be hidden unless the\n# EXTRACT_PRIVATE respectively EXTRACT_STATIC tags are set to YES.\n# Note: This will also disable the warnings about undocumented members that are\n# normally produced when WARNINGS is set to YES.\n# The default value is: NO.\n\nEXTRACT_ALL            = YES\n\n# If the EXTRACT_PRIVATE tag is set to YES, all private members of a class will\n# be included in the documentation.\n# The default value is: NO.\n\nEXTRACT_PRIVATE        = NO\n\n# If the EXTRACT_PRIV_VIRTUAL tag is set to YES, documented private virtual\n# methods of a class will be included in the documentation.\n# The default value is: NO.\n\nEXTRACT_PRIV_VIRTUAL   = NO\n\n# If the EXTRACT_PACKAGE tag is set to YES, all members with package or internal\n# scope will be included in the documentation.\n# The default value is: NO.\n\nEXTRACT_PACKAGE        = NO\n\n# If the EXTRACT_STATIC tag is set to YES, all static members of a file will be\n# included in the documentation.\n# The default value is: NO.\n\nEXTRACT_STATIC         = NO\n\n# If the EXTRACT_LOCAL_CLASSES tag is set to YES, classes (and structs) defined\n# locally in source files will be included in the documentation. If set to NO,\n# only classes defined in header files are included. Does not have any effect\n# for Java sources.\n# The default value is: YES.\n\nEXTRACT_LOCAL_CLASSES  = YES\n\n# This flag is only useful for Objective-C code. If set to YES, local methods,\n# which are defined in the implementation section but not in the interface are\n# included in the documentation. If set to NO, only methods in the interface are\n# included.\n# The default value is: NO.\n\nEXTRACT_LOCAL_METHODS  = NO\n\n# If this flag is set to YES, the members of anonymous namespaces will be\n# extracted and appear in the documentation as a namespace called\n# 'anonymous_namespace{file}', where file will be replaced with the base name of\n# the file that contains the anonymous namespace. By default anonymous namespace\n# are hidden.\n# The default value is: NO.\n\nEXTRACT_ANON_NSPACES   = NO\n\n# If the HIDE_UNDOC_MEMBERS tag is set to YES, doxygen will hide all\n# undocumented members inside documented classes or files. If set to NO these\n# members will be included in the various overviews, but no documentation\n# section is generated. This option has no effect if EXTRACT_ALL is enabled.\n# The default value is: NO.\n\nHIDE_UNDOC_MEMBERS     = NO\n\n# If the HIDE_UNDOC_CLASSES tag is set to YES, doxygen will hide all\n# undocumented classes that are normally visible in the class hierarchy. If set\n# to NO, these classes will be included in the various overviews. This option\n# has no effect if EXTRACT_ALL is enabled.\n# The default value is: NO.\n\nHIDE_UNDOC_CLASSES     = NO\n\n# If the HIDE_FRIEND_COMPOUNDS tag is set to YES, doxygen will hide all friend\n# (class|struct|union) declarations. If set to NO, these declarations will be\n# included in the documentation.\n# The default value is: NO.\n\nHIDE_FRIEND_COMPOUNDS  = NO\n\n# If the HIDE_IN_BODY_DOCS tag is set to YES, doxygen will hide any\n# documentation blocks found inside the body of a function. If set to NO, these\n# blocks will be appended to the function's detailed documentation block.\n# The default value is: NO.\n\nHIDE_IN_BODY_DOCS      = NO\n\n# The INTERNAL_DOCS tag determines if documentation that is typed after a\n# \\internal command is included. If the tag is set to NO then the documentation\n# will be excluded. Set it to YES to include the internal documentation.\n# The default value is: NO.\n\nINTERNAL_DOCS          = NO\n\n# If the CASE_SENSE_NAMES tag is set to NO then doxygen will only generate file\n# names in lower-case letters. If set to YES, upper-case letters are also\n# allowed. This is useful if you have classes or files whose names only differ\n# in case and if your file system supports case sensitive file names. Windows\n# (including Cygwin) ands Mac users are advised to set this option to NO.\n# The default value is: system dependent.\n\nCASE_SENSE_NAMES       = NO\n\n# If the HIDE_SCOPE_NAMES tag is set to NO then doxygen will show members with\n# their full class and namespace scopes in the documentation. If set to YES, the\n# scope will be hidden.\n# The default value is: NO.\n\nHIDE_SCOPE_NAMES       = NO\n\n# If the HIDE_COMPOUND_REFERENCE tag is set to NO (default) then doxygen will\n# append additional text to a page's title, such as Class Reference. If set to\n# YES the compound reference will be hidden.\n# The default value is: NO.\n\nHIDE_COMPOUND_REFERENCE= NO\n\n# If the SHOW_INCLUDE_FILES tag is set to YES then doxygen will put a list of\n# the files that are included by a file in the documentation of that file.\n# The default value is: YES.\n\nSHOW_INCLUDE_FILES     = YES\n\n# If the SHOW_GROUPED_MEMB_INC tag is set to YES then Doxygen will add for each\n# grouped member an include statement to the documentation, telling the reader\n# which file to include in order to use the member.\n# The default value is: NO.\n\nSHOW_GROUPED_MEMB_INC  = NO\n\n# If the FORCE_LOCAL_INCLUDES tag is set to YES then doxygen will list include\n# files with double quotes in the documentation rather than with sharp brackets.\n# The default value is: NO.\n\nFORCE_LOCAL_INCLUDES   = NO\n\n# If the INLINE_INFO tag is set to YES then a tag [inline] is inserted in the\n# documentation for inline members.\n# The default value is: YES.\n\nINLINE_INFO            = YES\n\n# If the SORT_MEMBER_DOCS tag is set to YES then doxygen will sort the\n# (detailed) documentation of file and class members alphabetically by member\n# name. If set to NO, the members will appear in declaration order.\n# The default value is: YES.\n\nSORT_MEMBER_DOCS       = YES\n\n# If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the brief\n# descriptions of file, namespace and class members alphabetically by member\n# name. If set to NO, the members will appear in declaration order. Note that\n# this will also influence the order of the classes in the class list.\n# The default value is: NO.\n\nSORT_BRIEF_DOCS        = NO\n\n# If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen will sort the\n# (brief and detailed) documentation of class members so that constructors and\n# destructors are listed first. If set to NO the constructors will appear in the\n# respective orders defined by SORT_BRIEF_DOCS and SORT_MEMBER_DOCS.\n# Note: If SORT_BRIEF_DOCS is set to NO this option is ignored for sorting brief\n# member documentation.\n# Note: If SORT_MEMBER_DOCS is set to NO this option is ignored for sorting\n# detailed member documentation.\n# The default value is: NO.\n\nSORT_MEMBERS_CTORS_1ST = NO\n\n# If the SORT_GROUP_NAMES tag is set to YES then doxygen will sort the hierarchy\n# of group names into alphabetical order. If set to NO the group names will\n# appear in their defined order.\n# The default value is: NO.\n\nSORT_GROUP_NAMES       = NO\n\n# If the SORT_BY_SCOPE_NAME tag is set to YES, the class list will be sorted by\n# fully-qualified names, including namespaces. If set to NO, the class list will\n# be sorted only by class name, not including the namespace part.\n# Note: This option is not very useful if HIDE_SCOPE_NAMES is set to YES.\n# Note: This option applies only to the class list, not to the alphabetical\n# list.\n# The default value is: NO.\n\nSORT_BY_SCOPE_NAME     = NO\n\n# If the STRICT_PROTO_MATCHING option is enabled and doxygen fails to do proper\n# type resolution of all parameters of a function it will reject a match between\n# the prototype and the implementation of a member function even if there is\n# only one candidate or it is obvious which candidate to choose by doing a\n# simple string match. By disabling STRICT_PROTO_MATCHING doxygen will still\n# accept a match between prototype and implementation in such cases.\n# The default value is: NO.\n\nSTRICT_PROTO_MATCHING  = NO\n\n# The GENERATE_TODOLIST tag can be used to enable (YES) or disable (NO) the todo\n# list. This list is created by putting \\todo commands in the documentation.\n# The default value is: YES.\n\nGENERATE_TODOLIST      = YES\n\n# The GENERATE_TESTLIST tag can be used to enable (YES) or disable (NO) the test\n# list. This list is created by putting \\test commands in the documentation.\n# The default value is: YES.\n\nGENERATE_TESTLIST      = YES\n\n# The GENERATE_BUGLIST tag can be used to enable (YES) or disable (NO) the bug\n# list. This list is created by putting \\bug commands in the documentation.\n# The default value is: YES.\n\nGENERATE_BUGLIST       = YES\n\n# The GENERATE_DEPRECATEDLIST tag can be used to enable (YES) or disable (NO)\n# the deprecated list. This list is created by putting \\deprecated commands in\n# the documentation.\n# The default value is: YES.\n\nGENERATE_DEPRECATEDLIST= YES\n\n# The ENABLED_SECTIONS tag can be used to enable conditional documentation\n# sections, marked by \\if <section_label> ... \\endif and \\cond <section_label>\n# ... \\endcond blocks.\n\nENABLED_SECTIONS       =\n\n# The MAX_INITIALIZER_LINES tag determines the maximum number of lines that the\n# initial value of a variable or macro / define can have for it to appear in the\n# documentation. If the initializer consists of more lines than specified here\n# it will be hidden. Use a value of 0 to hide initializers completely. The\n# appearance of the value of individual variables and macros / defines can be\n# controlled using \\showinitializer or \\hideinitializer command in the\n# documentation regardless of this setting.\n# Minimum value: 0, maximum value: 10000, default value: 30.\n\nMAX_INITIALIZER_LINES  = 30\n\n# Set the SHOW_USED_FILES tag to NO to disable the list of files generated at\n# the bottom of the documentation of classes and structs. If set to YES, the\n# list will mention the files that were used to generate the documentation.\n# The default value is: YES.\n\nSHOW_USED_FILES        = YES\n\n# Set the SHOW_FILES tag to NO to disable the generation of the Files page. This\n# will remove the Files entry from the Quick Index and from the Folder Tree View\n# (if specified).\n# The default value is: YES.\n\nSHOW_FILES             = YES\n\n# Set the SHOW_NAMESPACES tag to NO to disable the generation of the Namespaces\n# page. This will remove the Namespaces entry from the Quick Index and from the\n# Folder Tree View (if specified).\n# The default value is: YES.\n\nSHOW_NAMESPACES        = NO\n\n# The FILE_VERSION_FILTER tag can be used to specify a program or script that\n# doxygen should invoke to get the current version for each file (typically from\n# the version control system). Doxygen will invoke the program by executing (via\n# popen()) the command command input-file, where command is the value of the\n# FILE_VERSION_FILTER tag, and input-file is the name of an input file provided\n# by doxygen. Whatever the program writes to standard output is used as the file\n# version. For an example see the documentation.\n\nFILE_VERSION_FILTER    =\n\n# The LAYOUT_FILE tag can be used to specify a layout file which will be parsed\n# by doxygen. The layout file controls the global structure of the generated\n# output files in an output format independent way. To create the layout file\n# that represents doxygen's defaults, run doxygen with the -l option. You can\n# optionally specify a file name after the option, if omitted DoxygenLayout.xml\n# will be used as the name of the layout file.\n#\n# Note that if you run doxygen from a directory containing a file called\n# DoxygenLayout.xml, doxygen will parse it automatically even if the LAYOUT_FILE\n# tag is left empty.\n\nLAYOUT_FILE            =\n\n# The CITE_BIB_FILES tag can be used to specify one or more bib files containing\n# the reference definitions. This must be a list of .bib files. The .bib\n# extension is automatically appended if omitted. This requires the bibtex tool\n# to be installed. See also https://en.wikipedia.org/wiki/BibTeX for more info.\n# For LaTeX the style of the bibliography can be controlled using\n# LATEX_BIB_STYLE. To use this feature you need bibtex and perl available in the\n# search path. See also \\cite for info how to create references.\n\nCITE_BIB_FILES         =\n\n#---------------------------------------------------------------------------\n# Configuration options related to warning and progress messages\n#---------------------------------------------------------------------------\n\n# The QUIET tag can be used to turn on/off the messages that are generated to\n# standard output by doxygen. If QUIET is set to YES this implies that the\n# messages are off.\n# The default value is: NO.\n\nQUIET                  = NO\n\n# The WARNINGS tag can be used to turn on/off the warning messages that are\n# generated to standard error (stderr) by doxygen. If WARNINGS is set to YES\n# this implies that the warnings are on.\n#\n# Tip: Turn warnings on while writing the documentation.\n# The default value is: YES.\n\nWARNINGS               = YES\n\n# If the WARN_IF_UNDOCUMENTED tag is set to YES then doxygen will generate\n# warnings for undocumented members. If EXTRACT_ALL is set to YES then this flag\n# will automatically be disabled.\n# The default value is: YES.\n\nWARN_IF_UNDOCUMENTED   = YES\n\n# If the WARN_IF_DOC_ERROR tag is set to YES, doxygen will generate warnings for\n# potential errors in the documentation, such as not documenting some parameters\n# in a documented function, or documenting parameters that don't exist or using\n# markup commands wrongly.\n# The default value is: YES.\n\nWARN_IF_DOC_ERROR      = YES\n\n# This WARN_NO_PARAMDOC option can be enabled to get warnings for functions that\n# are documented, but have no documentation for their parameters or return\n# value. If set to NO, doxygen will only warn about wrong or incomplete\n# parameter documentation, but not about the absence of documentation. If\n# EXTRACT_ALL is set to YES then this flag will automatically be disabled.\n# The default value is: NO.\n\nWARN_NO_PARAMDOC       = YES\n\n# If the WARN_AS_ERROR tag is set to YES then doxygen will immediately stop when\n# a warning is encountered.\n# The default value is: NO.\n\nWARN_AS_ERROR          = NO\n\n# The WARN_FORMAT tag determines the format of the warning messages that doxygen\n# can produce. The string should contain the $file, $line, and $text tags, which\n# will be replaced by the file and line number from which the warning originated\n# and the warning text. Optionally the format may contain $version, which will\n# be replaced by the version of the file (if it could be obtained via\n# FILE_VERSION_FILTER)\n# The default value is: $file:$line: $text.\n\nWARN_FORMAT            = \"$file($line): $text\"\n\n# The WARN_LOGFILE tag can be used to specify a file to which warning and error\n# messages should be written. If left blank the output is written to standard\n# error (stderr).\n\nWARN_LOGFILE           =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the input files\n#---------------------------------------------------------------------------\n\n# The INPUT tag is used to specify the files and/or directories that contain\n# documented source files. You may enter file names like myfile.cpp or\n# directories like /usr/src/myproject. Separate the files or directories with\n# spaces. See also FILE_PATTERNS and EXTENSION_MAPPING\n# Note: If this tag is empty the current directory is searched.\n\nINPUT                  = src \\\n                         include\n\n# This tag can be used to specify the character encoding of the source files\n# that doxygen parses. Internally doxygen uses the UTF-8 encoding. Doxygen uses\n# libiconv (or the iconv built into libc) for the transcoding. See the libiconv\n# documentation (see: https://www.gnu.org/software/libiconv/) for the list of\n# possible encodings.\n# The default value is: UTF-8.\n\nINPUT_ENCODING         = UTF-8\n\n# If the value of the INPUT tag contains directories, you can use the\n# FILE_PATTERNS tag to specify one or more wildcard patterns (like *.cpp and\n# *.h) to filter out the source-files in the directories.\n#\n# Note that for custom extensions or not directly supported extensions you also\n# need to set EXTENSION_MAPPING for the extension otherwise the files are not\n# read by doxygen.\n#\n# If left blank the following patterns are tested:*.c, *.cc, *.cxx, *.cpp,\n# *.c++, *.java, *.ii, *.ixx, *.ipp, *.i++, *.inl, *.idl, *.ddl, *.odl, *.h,\n# *.hh, *.hxx, *.hpp, *.h++, *.cs, *.d, *.php, *.php4, *.php5, *.phtml, *.inc,\n# *.m, *.markdown, *.md, *.mm, *.dox, *.py, *.pyw, *.f90, *.f95, *.f03, *.f08,\n# *.f, *.for, *.tcl, *.vhd, *.vhdl, *.ucf, *.qsf and *.ice.\n\nFILE_PATTERNS          = *.cpp \\\n                         *.h\n\n# The RECURSIVE tag can be used to specify whether or not subdirectories should\n# be searched for input files as well.\n# The default value is: NO.\n\nRECURSIVE              = YES\n\n# The EXCLUDE tag can be used to specify files and/or directories that should be\n# excluded from the INPUT source files. This way you can easily exclude a\n# subdirectory from a directory tree whose root is specified with the INPUT tag.\n#\n# Note that relative paths are relative to the directory from which doxygen is\n# run.\n\nEXCLUDE                =\n\n# The EXCLUDE_SYMLINKS tag can be used to select whether or not files or\n# directories that are symbolic links (a Unix file system feature) are excluded\n# from the input.\n# The default value is: NO.\n\nEXCLUDE_SYMLINKS       = NO\n\n# If the value of the INPUT tag contains directories, you can use the\n# EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude\n# certain files from those directories.\n#\n# Note that the wildcards are matched against the file with absolute path, so to\n# exclude all test directories for example use the pattern */test/*\n\nEXCLUDE_PATTERNS       =\n\n# The EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names\n# (namespaces, classes, functions, etc.) that should be excluded from the\n# output. The symbol name can be a fully qualified name, a word, or if the\n# wildcard * is used, a substring. Examples: ANamespace, AClass,\n# AClass::ANamespace, ANamespace::*Test\n#\n# Note that the wildcards are matched against the file with absolute path, so to\n# exclude all test directories use the pattern */test/*\n\nEXCLUDE_SYMBOLS        =\n\n# The EXAMPLE_PATH tag can be used to specify one or more files or directories\n# that contain example code fragments that are included (see the \\include\n# command).\n\nEXAMPLE_PATH           =\n\n# If the value of the EXAMPLE_PATH tag contains directories, you can use the\n# EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp and\n# *.h) to filter out the source-files in the directories. If left blank all\n# files are included.\n\nEXAMPLE_PATTERNS       = *\n\n# If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be\n# searched for input files to be used with the \\include or \\dontinclude commands\n# irrespective of the value of the RECURSIVE tag.\n# The default value is: NO.\n\nEXAMPLE_RECURSIVE      = NO\n\n# The IMAGE_PATH tag can be used to specify one or more files or directories\n# that contain images that are to be included in the documentation (see the\n# \\image command).\n\nIMAGE_PATH             =\n\n# The INPUT_FILTER tag can be used to specify a program that doxygen should\n# invoke to filter for each input file. Doxygen will invoke the filter program\n# by executing (via popen()) the command:\n#\n# <filter> <input-file>\n#\n# where <filter> is the value of the INPUT_FILTER tag, and <input-file> is the\n# name of an input file. Doxygen will then use the output that the filter\n# program writes to standard output. If FILTER_PATTERNS is specified, this tag\n# will be ignored.\n#\n# Note that the filter must not add or remove lines; it is applied before the\n# code is scanned, but not when the output code is generated. If lines are added\n# or removed, the anchors will not be placed correctly.\n#\n# Note that for custom extensions or not directly supported extensions you also\n# need to set EXTENSION_MAPPING for the extension otherwise the files are not\n# properly processed by doxygen.\n\nINPUT_FILTER           =\n\n# The FILTER_PATTERNS tag can be used to specify filters on a per file pattern\n# basis. Doxygen will compare the file name with each pattern and apply the\n# filter if there is a match. The filters are a list of the form: pattern=filter\n# (like *.cpp=my_cpp_filter). See INPUT_FILTER for further information on how\n# filters are used. If the FILTER_PATTERNS tag is empty or if none of the\n# patterns match the file name, INPUT_FILTER is applied.\n#\n# Note that for custom extensions or not directly supported extensions you also\n# need to set EXTENSION_MAPPING for the extension otherwise the files are not\n# properly processed by doxygen.\n\nFILTER_PATTERNS        =\n\n# If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using\n# INPUT_FILTER) will also be used to filter the input files that are used for\n# producing the source files to browse (i.e. when SOURCE_BROWSER is set to YES).\n# The default value is: NO.\n\nFILTER_SOURCE_FILES    = NO\n\n# The FILTER_SOURCE_PATTERNS tag can be used to specify source filters per file\n# pattern. A pattern will override the setting for FILTER_PATTERN (if any) and\n# it is also possible to disable source filtering for a specific pattern using\n# *.ext= (so without naming a filter).\n# This tag requires that the tag FILTER_SOURCE_FILES is set to YES.\n\nFILTER_SOURCE_PATTERNS =\n\n# If the USE_MDFILE_AS_MAINPAGE tag refers to the name of a markdown file that\n# is part of the input, its contents will be placed on the main page\n# (index.html). This can be useful if you have a project on for instance GitHub\n# and want to reuse the introduction page also for the doxygen output.\n\nUSE_MDFILE_AS_MAINPAGE =\n\n#---------------------------------------------------------------------------\n# Configuration options related to source browsing\n#---------------------------------------------------------------------------\n\n# If the SOURCE_BROWSER tag is set to YES then a list of source files will be\n# generated. Documented entities will be cross-referenced with these sources.\n#\n# Note: To get rid of all source code in the generated output, make sure that\n# also VERBATIM_HEADERS is set to NO.\n# The default value is: NO.\n\nSOURCE_BROWSER         = YES\n\n# Setting the INLINE_SOURCES tag to YES will include the body of functions,\n# classes and enums directly into the documentation.\n# The default value is: NO.\n\nINLINE_SOURCES         = NO\n\n# Setting the STRIP_CODE_COMMENTS tag to YES will instruct doxygen to hide any\n# special comment blocks from generated source code fragments. Normal C, C++ and\n# Fortran comments will always remain visible.\n# The default value is: YES.\n\nSTRIP_CODE_COMMENTS    = NO\n\n# If the REFERENCED_BY_RELATION tag is set to YES then for each documented\n# entity all documented functions referencing it will be listed.\n# The default value is: NO.\n\nREFERENCED_BY_RELATION = NO\n\n# If the REFERENCES_RELATION tag is set to YES then for each documented function\n# all documented entities called/used by that function will be listed.\n# The default value is: NO.\n\nREFERENCES_RELATION    = NO\n\n# If the REFERENCES_LINK_SOURCE tag is set to YES and SOURCE_BROWSER tag is set\n# to YES then the hyperlinks from functions in REFERENCES_RELATION and\n# REFERENCED_BY_RELATION lists will link to the source code. Otherwise they will\n# link to the documentation.\n# The default value is: YES.\n\nREFERENCES_LINK_SOURCE = YES\n\n# If SOURCE_TOOLTIPS is enabled (the default) then hovering a hyperlink in the\n# source code will show a tooltip with additional information such as prototype,\n# brief description and links to the definition and documentation. Since this\n# will make the HTML file larger and loading of large files a bit slower, you\n# can opt to disable this feature.\n# The default value is: YES.\n# This tag requires that the tag SOURCE_BROWSER is set to YES.\n\nSOURCE_TOOLTIPS        = YES\n\n# If the USE_HTAGS tag is set to YES then the references to source code will\n# point to the HTML generated by the htags(1) tool instead of doxygen built-in\n# source browser. The htags tool is part of GNU's global source tagging system\n# (see https://www.gnu.org/software/global/global.html). You will need version\n# 4.8.6 or higher.\n#\n# To use it do the following:\n# - Install the latest version of global\n# - Enable SOURCE_BROWSER and USE_HTAGS in the configuration file\n# - Make sure the INPUT points to the root of the source tree\n# - Run doxygen as normal\n#\n# Doxygen will invoke htags (and that will in turn invoke gtags), so these\n# tools must be available from the command line (i.e. in the search path).\n#\n# The result: instead of the source browser generated by doxygen, the links to\n# source code will now point to the output of htags.\n# The default value is: NO.\n# This tag requires that the tag SOURCE_BROWSER is set to YES.\n\nUSE_HTAGS              = NO\n\n# If the VERBATIM_HEADERS tag is set the YES then doxygen will generate a\n# verbatim copy of the header file for each class for which an include is\n# specified. Set to NO to disable this.\n# See also: Section \\class.\n# The default value is: YES.\n\nVERBATIM_HEADERS       = YES\n\n# If the CLANG_ASSISTED_PARSING tag is set to YES then doxygen will use the\n# clang parser (see: http://clang.llvm.org/) for more accurate parsing at the\n# cost of reduced performance. This can be particularly helpful with template\n# rich C++ code for which doxygen's built-in parser lacks the necessary type\n# information.\n# Note: The availability of this option depends on whether or not doxygen was\n# generated with the -Duse_libclang=ON option for CMake.\n# The default value is: NO.\n\nCLANG_ASSISTED_PARSING = NO\n\n# If clang assisted parsing is enabled you can provide the compiler with command\n# line options that you would normally use when invoking the compiler. Note that\n# the include paths will already be set by doxygen for the files and directories\n# specified with INPUT and INCLUDE_PATH.\n# This tag requires that the tag CLANG_ASSISTED_PARSING is set to YES.\n\nCLANG_OPTIONS          =\n\n# If clang assisted parsing is enabled you can provide the clang parser with the\n# path to the compilation database (see:\n# http://clang.llvm.org/docs/HowToSetupToolingForLLVM.html) used when the files\n# were built. This is equivalent to specifying the \"-p\" option to a clang tool,\n# such as clang-check. These options will then be passed to the parser.\n# Note: The availability of this option depends on whether or not doxygen was\n# generated with the -Duse_libclang=ON option for CMake.\n\nCLANG_DATABASE_PATH    =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the alphabetical class index\n#---------------------------------------------------------------------------\n\n# If the ALPHABETICAL_INDEX tag is set to YES, an alphabetical index of all\n# compounds will be generated. Enable this if the project contains a lot of\n# classes, structs, unions or interfaces.\n# The default value is: YES.\n\nALPHABETICAL_INDEX     = YES\n\n# The COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns in\n# which the alphabetical index list will be split.\n# Minimum value: 1, maximum value: 20, default value: 5.\n# This tag requires that the tag ALPHABETICAL_INDEX is set to YES.\n\nCOLS_IN_ALPHA_INDEX    = 5\n\n# In case all classes in a project start with a common prefix, all classes will\n# be put under the same header in the alphabetical index. The IGNORE_PREFIX tag\n# can be used to specify a prefix (or a list of prefixes) that should be ignored\n# while generating the index headers.\n# This tag requires that the tag ALPHABETICAL_INDEX is set to YES.\n\nIGNORE_PREFIX          =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the HTML output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_HTML tag is set to YES, doxygen will generate HTML output\n# The default value is: YES.\n\nGENERATE_HTML          = YES\n\n# The HTML_OUTPUT tag is used to specify where the HTML docs will be put. If a\n# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of\n# it.\n# The default directory is: html.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_OUTPUT            = html\n\n# The HTML_FILE_EXTENSION tag can be used to specify the file extension for each\n# generated HTML page (for example: .htm, .php, .asp).\n# The default value is: .html.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_FILE_EXTENSION    = .html\n\n# The HTML_HEADER tag can be used to specify a user-defined HTML header file for\n# each generated HTML page. If the tag is left blank doxygen will generate a\n# standard header.\n#\n# To get valid HTML the header file that includes any scripts and style sheets\n# that doxygen needs, which is dependent on the configuration options used (e.g.\n# the setting GENERATE_TREEVIEW). It is highly recommended to start with a\n# default header using\n# doxygen -w html new_header.html new_footer.html new_stylesheet.css\n# YourConfigFile\n# and then modify the file new_header.html. See also section \"Doxygen usage\"\n# for information on how to generate the default header that doxygen normally\n# uses.\n# Note: The header is subject to change so you typically have to regenerate the\n# default header when upgrading to a newer version of doxygen. For a description\n# of the possible markers and block names see the documentation.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_HEADER            =\n\n# The HTML_FOOTER tag can be used to specify a user-defined HTML footer for each\n# generated HTML page. If the tag is left blank doxygen will generate a standard\n# footer. See HTML_HEADER for more information on how to generate a default\n# footer and what special commands can be used inside the footer. See also\n# section \"Doxygen usage\" for information on how to generate the default footer\n# that doxygen normally uses.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_FOOTER            =\n\n# The HTML_STYLESHEET tag can be used to specify a user-defined cascading style\n# sheet that is used by each HTML page. It can be used to fine-tune the look of\n# the HTML output. If left blank doxygen will generate a default style sheet.\n# See also section \"Doxygen usage\" for information on how to generate the style\n# sheet that doxygen normally uses.\n# Note: It is recommended to use HTML_EXTRA_STYLESHEET instead of this tag, as\n# it is more robust and this tag (HTML_STYLESHEET) will in the future become\n# obsolete.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_STYLESHEET        =\n\n# The HTML_EXTRA_STYLESHEET tag can be used to specify additional user-defined\n# cascading style sheets that are included after the standard style sheets\n# created by doxygen. Using this option one can overrule certain style aspects.\n# This is preferred over using HTML_STYLESHEET since it does not replace the\n# standard style sheet and is therefore more robust against future updates.\n# Doxygen will copy the style sheet files to the output directory.\n# Note: The order of the extra style sheet files is of importance (e.g. the last\n# style sheet in the list overrules the setting of the previous ones in the\n# list). For an example see the documentation.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_EXTRA_STYLESHEET  =\n\n# The HTML_EXTRA_FILES tag can be used to specify one or more extra images or\n# other source files which should be copied to the HTML output directory. Note\n# that these files will be copied to the base HTML output directory. Use the\n# $relpath^ marker in the HTML_HEADER and/or HTML_FOOTER files to load these\n# files. In the HTML_STYLESHEET file, use the file name only. Also note that the\n# files will be copied as-is; there are no commands or markers available.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_EXTRA_FILES       =\n\n# The HTML_COLORSTYLE_HUE tag controls the color of the HTML output. Doxygen\n# will adjust the colors in the style sheet and background images according to\n# this color. Hue is specified as an angle on a colorwheel, see\n# https://en.wikipedia.org/wiki/Hue for more information. For instance the value\n# 0 represents red, 60 is yellow, 120 is green, 180 is cyan, 240 is blue, 300\n# purple, and 360 is red again.\n# Minimum value: 0, maximum value: 359, default value: 220.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_COLORSTYLE_HUE    = 220\n\n# The HTML_COLORSTYLE_SAT tag controls the purity (or saturation) of the colors\n# in the HTML output. For a value of 0 the output will use grayscales only. A\n# value of 255 will produce the most vivid colors.\n# Minimum value: 0, maximum value: 255, default value: 100.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_COLORSTYLE_SAT    = 100\n\n# The HTML_COLORSTYLE_GAMMA tag controls the gamma correction applied to the\n# luminance component of the colors in the HTML output. Values below 100\n# gradually make the output lighter, whereas values above 100 make the output\n# darker. The value divided by 100 is the actual gamma applied, so 80 represents\n# a gamma of 0.8, The value 220 represents a gamma of 2.2, and 100 does not\n# change the gamma.\n# Minimum value: 40, maximum value: 240, default value: 80.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_COLORSTYLE_GAMMA  = 80\n\n# If the HTML_TIMESTAMP tag is set to YES then the footer of each generated HTML\n# page will contain the date and time when the page was generated. Setting this\n# to YES can help to show when doxygen was last run and thus if the\n# documentation is up to date.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_TIMESTAMP         = NO\n\n# If the HTML_DYNAMIC_MENUS tag is set to YES then the generated HTML\n# documentation will contain a main index with vertical navigation menus that\n# are dynamically created via Javascript. If disabled, the navigation index will\n# consists of multiple levels of tabs that are statically embedded in every HTML\n# page. Disable this option to support browsers that do not have Javascript,\n# like the Qt help browser.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_DYNAMIC_MENUS     = YES\n\n# If the HTML_DYNAMIC_SECTIONS tag is set to YES then the generated HTML\n# documentation will contain sections that can be hidden and shown after the\n# page has loaded.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_DYNAMIC_SECTIONS  = NO\n\n# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of entries\n# shown in the various tree structured indices initially; the user can expand\n# and collapse entries dynamically later on. Doxygen will expand the tree to\n# such a level that at most the specified number of entries are visible (unless\n# a fully collapsed tree already exceeds this amount). So setting the number of\n# entries 1 will produce a full collapsed tree by default. 0 is a special value\n# representing an infinite number of entries and will result in a full expanded\n# tree by default.\n# Minimum value: 0, maximum value: 9999, default value: 100.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nHTML_INDEX_NUM_ENTRIES = 100\n\n# If the GENERATE_DOCSET tag is set to YES, additional index files will be\n# generated that can be used as input for Apple's Xcode 3 integrated development\n# environment (see: https://developer.apple.com/xcode/), introduced with OSX\n# 10.5 (Leopard). To create a documentation set, doxygen will generate a\n# Makefile in the HTML output directory. Running make will produce the docset in\n# that directory and running make install will install the docset in\n# ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find it at\n# startup. See https://developer.apple.com/library/archive/featuredarticles/Doxy\n# genXcode/_index.html for more information.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nGENERATE_DOCSET        = NO\n\n# This tag determines the name of the docset feed. A documentation feed provides\n# an umbrella under which multiple documentation sets from a single provider\n# (such as a company or product suite) can be grouped.\n# The default value is: Doxygen generated docs.\n# This tag requires that the tag GENERATE_DOCSET is set to YES.\n\nDOCSET_FEEDNAME        = \"Doxygen generated docs\"\n\n# This tag specifies a string that should uniquely identify the documentation\n# set bundle. This should be a reverse domain-name style string, e.g.\n# com.mycompany.MyDocSet. Doxygen will append .docset to the name.\n# The default value is: org.doxygen.Project.\n# This tag requires that the tag GENERATE_DOCSET is set to YES.\n\nDOCSET_BUNDLE_ID       = org.doxygen.Project\n\n# The DOCSET_PUBLISHER_ID tag specifies a string that should uniquely identify\n# the documentation publisher. This should be a reverse domain-name style\n# string, e.g. com.mycompany.MyDocSet.documentation.\n# The default value is: org.doxygen.Publisher.\n# This tag requires that the tag GENERATE_DOCSET is set to YES.\n\nDOCSET_PUBLISHER_ID    = org.doxygen.Publisher\n\n# The DOCSET_PUBLISHER_NAME tag identifies the documentation publisher.\n# The default value is: Publisher.\n# This tag requires that the tag GENERATE_DOCSET is set to YES.\n\nDOCSET_PUBLISHER_NAME  = Publisher\n\n# If the GENERATE_HTMLHELP tag is set to YES then doxygen generates three\n# additional HTML index files: index.hhp, index.hhc, and index.hhk. The\n# index.hhp is a project file that can be read by Microsoft's HTML Help Workshop\n# (see: https://www.microsoft.com/en-us/download/details.aspx?id=21138) on\n# Windows.\n#\n# The HTML Help Workshop contains a compiler that can convert all HTML output\n# generated by doxygen into a single compiled HTML file (.chm). Compiled HTML\n# files are now used as the Windows 98 help format, and will replace the old\n# Windows help format (.hlp) on all Windows platforms in the future. Compressed\n# HTML files also contain an index, a table of contents, and you can search for\n# words in the documentation. The HTML workshop also contains a viewer for\n# compressed HTML files.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nGENERATE_HTMLHELP      = NO\n\n# The CHM_FILE tag can be used to specify the file name of the resulting .chm\n# file. You can add a path in front of the file if the result should not be\n# written to the html output directory.\n# This tag requires that the tag GENERATE_HTMLHELP is set to YES.\n\nCHM_FILE               =\n\n# The HHC_LOCATION tag can be used to specify the location (absolute path\n# including file name) of the HTML help compiler (hhc.exe). If non-empty,\n# doxygen will try to run the HTML help compiler on the generated index.hhp.\n# The file has to be specified with full path.\n# This tag requires that the tag GENERATE_HTMLHELP is set to YES.\n\nHHC_LOCATION           =\n\n# The GENERATE_CHI flag controls if a separate .chi index file is generated\n# (YES) or that it should be included in the master .chm file (NO).\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTMLHELP is set to YES.\n\nGENERATE_CHI           = NO\n\n# The CHM_INDEX_ENCODING is used to encode HtmlHelp index (hhk), content (hhc)\n# and project file content.\n# This tag requires that the tag GENERATE_HTMLHELP is set to YES.\n\nCHM_INDEX_ENCODING     =\n\n# The BINARY_TOC flag controls whether a binary table of contents is generated\n# (YES) or a normal table of contents (NO) in the .chm file. Furthermore it\n# enables the Previous and Next buttons.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTMLHELP is set to YES.\n\nBINARY_TOC             = NO\n\n# The TOC_EXPAND flag can be set to YES to add extra items for group members to\n# the table of contents of the HTML help documentation and to the tree view.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTMLHELP is set to YES.\n\nTOC_EXPAND             = NO\n\n# If the GENERATE_QHP tag is set to YES and both QHP_NAMESPACE and\n# QHP_VIRTUAL_FOLDER are set, an additional index file will be generated that\n# can be used as input for Qt's qhelpgenerator to generate a Qt Compressed Help\n# (.qch) of the generated HTML documentation.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nGENERATE_QHP           = NO\n\n# If the QHG_LOCATION tag is specified, the QCH_FILE tag can be used to specify\n# the file name of the resulting .qch file. The path specified is relative to\n# the HTML output folder.\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQCH_FILE               =\n\n# The QHP_NAMESPACE tag specifies the namespace to use when generating Qt Help\n# Project output. For more information please see Qt Help Project / Namespace\n# (see: https://doc.qt.io/archives/qt-4.8/qthelpproject.html#namespace).\n# The default value is: org.doxygen.Project.\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQHP_NAMESPACE          = org.doxygen.Project\n\n# The QHP_VIRTUAL_FOLDER tag specifies the namespace to use when generating Qt\n# Help Project output. For more information please see Qt Help Project / Virtual\n# Folders (see: https://doc.qt.io/archives/qt-4.8/qthelpproject.html#virtual-\n# folders).\n# The default value is: doc.\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQHP_VIRTUAL_FOLDER     = doc\n\n# If the QHP_CUST_FILTER_NAME tag is set, it specifies the name of a custom\n# filter to add. For more information please see Qt Help Project / Custom\n# Filters (see: https://doc.qt.io/archives/qt-4.8/qthelpproject.html#custom-\n# filters).\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQHP_CUST_FILTER_NAME   =\n\n# The QHP_CUST_FILTER_ATTRS tag specifies the list of the attributes of the\n# custom filter to add. For more information please see Qt Help Project / Custom\n# Filters (see: https://doc.qt.io/archives/qt-4.8/qthelpproject.html#custom-\n# filters).\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQHP_CUST_FILTER_ATTRS  =\n\n# The QHP_SECT_FILTER_ATTRS tag specifies the list of the attributes this\n# project's filter section matches. Qt Help Project / Filter Attributes (see:\n# https://doc.qt.io/archives/qt-4.8/qthelpproject.html#filter-attributes).\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQHP_SECT_FILTER_ATTRS  =\n\n# The QHG_LOCATION tag can be used to specify the location of Qt's\n# qhelpgenerator. If non-empty doxygen will try to run qhelpgenerator on the\n# generated .qhp file.\n# This tag requires that the tag GENERATE_QHP is set to YES.\n\nQHG_LOCATION           =\n\n# If the GENERATE_ECLIPSEHELP tag is set to YES, additional index files will be\n# generated, together with the HTML files, they form an Eclipse help plugin. To\n# install this plugin and make it available under the help contents menu in\n# Eclipse, the contents of the directory containing the HTML and XML files needs\n# to be copied into the plugins directory of eclipse. The name of the directory\n# within the plugins directory should be the same as the ECLIPSE_DOC_ID value.\n# After copying Eclipse needs to be restarted before the help appears.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nGENERATE_ECLIPSEHELP   = NO\n\n# A unique identifier for the Eclipse help plugin. When installing the plugin\n# the directory name containing the HTML and XML files should also have this\n# name. Each documentation set should have its own identifier.\n# The default value is: org.doxygen.Project.\n# This tag requires that the tag GENERATE_ECLIPSEHELP is set to YES.\n\nECLIPSE_DOC_ID         = org.doxygen.Project\n\n# If you want full control over the layout of the generated HTML pages it might\n# be necessary to disable the index and replace it with your own. The\n# DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs) at top\n# of each HTML page. A value of NO enables the index and the value YES disables\n# it. Since the tabs in the index contain the same information as the navigation\n# tree, you can set this option to YES if you also set GENERATE_TREEVIEW to YES.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nDISABLE_INDEX          = NO\n\n# The GENERATE_TREEVIEW tag is used to specify whether a tree-like index\n# structure should be generated to display hierarchical information. If the tag\n# value is set to YES, a side panel will be generated containing a tree-like\n# index structure (just like the one that is generated for HTML Help). For this\n# to work a browser that supports JavaScript, DHTML, CSS and frames is required\n# (i.e. any modern browser). Windows users are probably better off using the\n# HTML help feature. Via custom style sheets (see HTML_EXTRA_STYLESHEET) one can\n# further fine-tune the look of the index. As an example, the default style\n# sheet generated by doxygen has an example that shows how to put an image at\n# the root of the tree instead of the PROJECT_NAME. Since the tree basically has\n# the same information as the tab index, you could consider setting\n# DISABLE_INDEX to YES when enabling this option.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nGENERATE_TREEVIEW      = YES\n\n# The ENUM_VALUES_PER_LINE tag can be used to set the number of enum values that\n# doxygen will group on one line in the generated HTML documentation.\n#\n# Note that a value of 0 will completely suppress the enum values from appearing\n# in the overview section.\n# Minimum value: 0, maximum value: 20, default value: 4.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nENUM_VALUES_PER_LINE   = 4\n\n# If the treeview is enabled (see GENERATE_TREEVIEW) then this tag can be used\n# to set the initial width (in pixels) of the frame in which the tree is shown.\n# Minimum value: 0, maximum value: 1500, default value: 250.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nTREEVIEW_WIDTH         = 250\n\n# If the EXT_LINKS_IN_WINDOW option is set to YES, doxygen will open links to\n# external symbols imported via tag files in a separate window.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nEXT_LINKS_IN_WINDOW    = NO\n\n# Use this tag to change the font size of LaTeX formulas included as images in\n# the HTML documentation. When you change the font size after a successful\n# doxygen run you need to manually remove any form_*.png images from the HTML\n# output directory to force them to be regenerated.\n# Minimum value: 8, maximum value: 50, default value: 10.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nFORMULA_FONTSIZE       = 10\n\n# Use the FORMULA_TRANSPARENT tag to determine whether or not the images\n# generated for formulas are transparent PNGs. Transparent PNGs are not\n# supported properly for IE 6.0, but are supported on all modern browsers.\n#\n# Note that when changing this option you need to delete any form_*.png files in\n# the HTML output directory before the changes have effect.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nFORMULA_TRANSPARENT    = YES\n\n# Enable the USE_MATHJAX option to render LaTeX formulas using MathJax (see\n# https://www.mathjax.org) which uses client side Javascript for the rendering\n# instead of using pre-rendered bitmaps. Use this if you do not have LaTeX\n# installed or if you want to formulas look prettier in the HTML output. When\n# enabled you may also need to install MathJax separately and configure the path\n# to it using the MATHJAX_RELPATH option.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nUSE_MATHJAX            = NO\n\n# When MathJax is enabled you can set the default output format to be used for\n# the MathJax output. See the MathJax site (see:\n# http://docs.mathjax.org/en/latest/output.html) for more details.\n# Possible values are: HTML-CSS (which is slower, but has the best\n# compatibility), NativeMML (i.e. MathML) and SVG.\n# The default value is: HTML-CSS.\n# This tag requires that the tag USE_MATHJAX is set to YES.\n\nMATHJAX_FORMAT         = HTML-CSS\n\n# When MathJax is enabled you need to specify the location relative to the HTML\n# output directory using the MATHJAX_RELPATH option. The destination directory\n# should contain the MathJax.js script. For instance, if the mathjax directory\n# is located at the same level as the HTML output directory, then\n# MATHJAX_RELPATH should be ../mathjax. The default value points to the MathJax\n# Content Delivery Network so you can quickly see the result without installing\n# MathJax. However, it is strongly recommended to install a local copy of\n# MathJax from https://www.mathjax.org before deployment.\n# The default value is: https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/.\n# This tag requires that the tag USE_MATHJAX is set to YES.\n\nMATHJAX_RELPATH        = http://www.mathjax.org/mathjax\n\n# The MATHJAX_EXTENSIONS tag can be used to specify one or more MathJax\n# extension names that should be enabled during MathJax rendering. For example\n# MATHJAX_EXTENSIONS = TeX/AMSmath TeX/AMSsymbols\n# This tag requires that the tag USE_MATHJAX is set to YES.\n\nMATHJAX_EXTENSIONS     =\n\n# The MATHJAX_CODEFILE tag can be used to specify a file with javascript pieces\n# of code that will be used on startup of the MathJax code. See the MathJax site\n# (see: http://docs.mathjax.org/en/latest/output.html) for more details. For an\n# example see the documentation.\n# This tag requires that the tag USE_MATHJAX is set to YES.\n\nMATHJAX_CODEFILE       =\n\n# When the SEARCHENGINE tag is enabled doxygen will generate a search box for\n# the HTML output. The underlying search engine uses javascript and DHTML and\n# should work on any modern browser. Note that when using HTML help\n# (GENERATE_HTMLHELP), Qt help (GENERATE_QHP), or docsets (GENERATE_DOCSET)\n# there is already a search function so this one should typically be disabled.\n# For large projects the javascript based search engine can be slow, then\n# enabling SERVER_BASED_SEARCH may provide a better solution. It is possible to\n# search using the keyboard; to jump to the search box use <access key> + S\n# (what the <access key> is depends on the OS and browser, but it is typically\n# <CTRL>, <ALT>/<option>, or both). Inside the search box use the <cursor down\n# key> to jump into the search results window, the results can be navigated\n# using the <cursor keys>. Press <Enter> to select an item or <escape> to cancel\n# the search. The filter options can be selected when the cursor is inside the\n# search box by pressing <Shift>+<cursor down>. Also here use the <cursor keys>\n# to select a filter and <Enter> or <escape> to activate or cancel the filter\n# option.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_HTML is set to YES.\n\nSEARCHENGINE           = YES\n\n# When the SERVER_BASED_SEARCH tag is enabled the search engine will be\n# implemented using a web server instead of a web client using Javascript. There\n# are two flavors of web server based searching depending on the EXTERNAL_SEARCH\n# setting. When disabled, doxygen will generate a PHP script for searching and\n# an index file used by the script. When EXTERNAL_SEARCH is enabled the indexing\n# and searching needs to be provided by external tools. See the section\n# \"External Indexing and Searching\" for details.\n# The default value is: NO.\n# This tag requires that the tag SEARCHENGINE is set to YES.\n\nSERVER_BASED_SEARCH    = NO\n\n# When EXTERNAL_SEARCH tag is enabled doxygen will no longer generate the PHP\n# script for searching. Instead the search results are written to an XML file\n# which needs to be processed by an external indexer. Doxygen will invoke an\n# external search engine pointed to by the SEARCHENGINE_URL option to obtain the\n# search results.\n#\n# Doxygen ships with an example indexer (doxyindexer) and search engine\n# (doxysearch.cgi) which are based on the open source search engine library\n# Xapian (see: https://xapian.org/).\n#\n# See the section \"External Indexing and Searching\" for details.\n# The default value is: NO.\n# This tag requires that the tag SEARCHENGINE is set to YES.\n\nEXTERNAL_SEARCH        = NO\n\n# The SEARCHENGINE_URL should point to a search engine hosted by a web server\n# which will return the search results when EXTERNAL_SEARCH is enabled.\n#\n# Doxygen ships with an example indexer (doxyindexer) and search engine\n# (doxysearch.cgi) which are based on the open source search engine library\n# Xapian (see: https://xapian.org/). See the section \"External Indexing and\n# Searching\" for details.\n# This tag requires that the tag SEARCHENGINE is set to YES.\n\nSEARCHENGINE_URL       =\n\n# When SERVER_BASED_SEARCH and EXTERNAL_SEARCH are both enabled the unindexed\n# search data is written to a file for indexing by an external tool. With the\n# SEARCHDATA_FILE tag the name of this file can be specified.\n# The default file is: searchdata.xml.\n# This tag requires that the tag SEARCHENGINE is set to YES.\n\nSEARCHDATA_FILE        = searchdata.xml\n\n# When SERVER_BASED_SEARCH and EXTERNAL_SEARCH are both enabled the\n# EXTERNAL_SEARCH_ID tag can be used as an identifier for the project. This is\n# useful in combination with EXTRA_SEARCH_MAPPINGS to search through multiple\n# projects and redirect the results back to the right project.\n# This tag requires that the tag SEARCHENGINE is set to YES.\n\nEXTERNAL_SEARCH_ID     =\n\n# The EXTRA_SEARCH_MAPPINGS tag can be used to enable searching through doxygen\n# projects other than the one defined by this configuration file, but that are\n# all added to the same external search index. Each project needs to have a\n# unique id set via EXTERNAL_SEARCH_ID. The search mapping then maps the id of\n# to a relative location where the documentation can be found. The format is:\n# EXTRA_SEARCH_MAPPINGS = tagname1=loc1 tagname2=loc2 ...\n# This tag requires that the tag SEARCHENGINE is set to YES.\n\nEXTRA_SEARCH_MAPPINGS  =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the LaTeX output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_LATEX tag is set to YES, doxygen will generate LaTeX output.\n# The default value is: YES.\n\nGENERATE_LATEX         = NO\n\n# The LATEX_OUTPUT tag is used to specify where the LaTeX docs will be put. If a\n# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of\n# it.\n# The default directory is: latex.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_OUTPUT           = latex\n\n# The LATEX_CMD_NAME tag can be used to specify the LaTeX command name to be\n# invoked.\n#\n# Note that when not enabling USE_PDFLATEX the default is latex when enabling\n# USE_PDFLATEX the default is pdflatex and when in the later case latex is\n# chosen this is overwritten by pdflatex. For specific output languages the\n# default can have been set differently, this depends on the implementation of\n# the output language.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_CMD_NAME         = latex\n\n# The MAKEINDEX_CMD_NAME tag can be used to specify the command name to generate\n# index for LaTeX.\n# Note: This tag is used in the Makefile / make.bat.\n# See also: LATEX_MAKEINDEX_CMD for the part in the generated output file\n# (.tex).\n# The default file is: makeindex.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nMAKEINDEX_CMD_NAME     = makeindex\n\n# The LATEX_MAKEINDEX_CMD tag can be used to specify the command name to\n# generate index for LaTeX. In case there is no backslash (\\) as first character\n# it will be automatically added in the LaTeX code.\n# Note: This tag is used in the generated output file (.tex).\n# See also: MAKEINDEX_CMD_NAME for the part in the Makefile / make.bat.\n# The default value is: makeindex.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_MAKEINDEX_CMD    = makeindex\n\n# If the COMPACT_LATEX tag is set to YES, doxygen generates more compact LaTeX\n# documents. This may be useful for small projects and may help to save some\n# trees in general.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nCOMPACT_LATEX          = NO\n\n# The PAPER_TYPE tag can be used to set the paper type that is used by the\n# printer.\n# Possible values are: a4 (210 x 297 mm), letter (8.5 x 11 inches), legal (8.5 x\n# 14 inches) and executive (7.25 x 10.5 inches).\n# The default value is: a4.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nPAPER_TYPE             = a4\n\n# The EXTRA_PACKAGES tag can be used to specify one or more LaTeX package names\n# that should be included in the LaTeX output. The package can be specified just\n# by its name or with the correct syntax as to be used with the LaTeX\n# \\usepackage command. To get the times font for instance you can specify :\n# EXTRA_PACKAGES=times or EXTRA_PACKAGES={times}\n# To use the option intlimits with the amsmath package you can specify:\n# EXTRA_PACKAGES=[intlimits]{amsmath}\n# If left blank no extra packages will be included.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nEXTRA_PACKAGES         =\n\n# The LATEX_HEADER tag can be used to specify a personal LaTeX header for the\n# generated LaTeX document. The header should contain everything until the first\n# chapter. If it is left blank doxygen will generate a standard header. See\n# section \"Doxygen usage\" for information on how to let doxygen write the\n# default header to a separate file.\n#\n# Note: Only use a user-defined header if you know what you are doing! The\n# following commands have a special meaning inside the header: $title,\n# $datetime, $date, $doxygenversion, $projectname, $projectnumber,\n# $projectbrief, $projectlogo. Doxygen will replace $title with the empty\n# string, for the replacement values of the other commands the user is referred\n# to HTML_HEADER.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_HEADER           =\n\n# The LATEX_FOOTER tag can be used to specify a personal LaTeX footer for the\n# generated LaTeX document. The footer should contain everything after the last\n# chapter. If it is left blank doxygen will generate a standard footer. See\n# LATEX_HEADER for more information on how to generate a default footer and what\n# special commands can be used inside the footer.\n#\n# Note: Only use a user-defined footer if you know what you are doing!\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_FOOTER           =\n\n# The LATEX_EXTRA_STYLESHEET tag can be used to specify additional user-defined\n# LaTeX style sheets that are included after the standard style sheets created\n# by doxygen. Using this option one can overrule certain style aspects. Doxygen\n# will copy the style sheet files to the output directory.\n# Note: The order of the extra style sheet files is of importance (e.g. the last\n# style sheet in the list overrules the setting of the previous ones in the\n# list).\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_EXTRA_STYLESHEET =\n\n# The LATEX_EXTRA_FILES tag can be used to specify one or more extra images or\n# other source files which should be copied to the LATEX_OUTPUT output\n# directory. Note that the files will be copied as-is; there are no commands or\n# markers available.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_EXTRA_FILES      =\n\n# If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated is\n# prepared for conversion to PDF (using ps2pdf or pdflatex). The PDF file will\n# contain links (just like the HTML output) instead of page references. This\n# makes the output suitable for online browsing using a PDF viewer.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nPDF_HYPERLINKS         = YES\n\n# If the USE_PDFLATEX tag is set to YES, doxygen will use pdflatex to generate\n# the PDF file directly from the LaTeX files. Set this option to YES, to get a\n# higher quality PDF documentation.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nUSE_PDFLATEX           = YES\n\n# If the LATEX_BATCHMODE tag is set to YES, doxygen will add the \\batchmode\n# command to the generated LaTeX files. This will instruct LaTeX to keep running\n# if errors occur, instead of asking the user for help. This option is also used\n# when generating formulas in HTML.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_BATCHMODE        = NO\n\n# If the LATEX_HIDE_INDICES tag is set to YES then doxygen will not include the\n# index chapters (such as File Index, Compound Index, etc.) in the output.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_HIDE_INDICES     = NO\n\n# If the LATEX_SOURCE_CODE tag is set to YES then doxygen will include source\n# code with syntax highlighting in the LaTeX output.\n#\n# Note that which sources are shown also depends on other settings such as\n# SOURCE_BROWSER.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_SOURCE_CODE      = NO\n\n# The LATEX_BIB_STYLE tag can be used to specify the style to use for the\n# bibliography, e.g. plainnat, or ieeetr. See\n# https://en.wikipedia.org/wiki/BibTeX and \\cite for more info.\n# The default value is: plain.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_BIB_STYLE        = plain\n\n# If the LATEX_TIMESTAMP tag is set to YES then the footer of each generated\n# page will contain the date and time when the page was generated. Setting this\n# to NO can help when comparing the output of multiple runs.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_TIMESTAMP        = NO\n\n# The LATEX_EMOJI_DIRECTORY tag is used to specify the (relative or absolute)\n# path from which the emoji images will be read. If a relative path is entered,\n# it will be relative to the LATEX_OUTPUT directory. If left blank the\n# LATEX_OUTPUT directory will be used.\n# This tag requires that the tag GENERATE_LATEX is set to YES.\n\nLATEX_EMOJI_DIRECTORY  =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the RTF output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_RTF tag is set to YES, doxygen will generate RTF output. The\n# RTF output is optimized for Word 97 and may not look too pretty with other RTF\n# readers/editors.\n# The default value is: NO.\n\nGENERATE_RTF           = NO\n\n# The RTF_OUTPUT tag is used to specify where the RTF docs will be put. If a\n# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of\n# it.\n# The default directory is: rtf.\n# This tag requires that the tag GENERATE_RTF is set to YES.\n\nRTF_OUTPUT             = rtf\n\n# If the COMPACT_RTF tag is set to YES, doxygen generates more compact RTF\n# documents. This may be useful for small projects and may help to save some\n# trees in general.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_RTF is set to YES.\n\nCOMPACT_RTF            = NO\n\n# If the RTF_HYPERLINKS tag is set to YES, the RTF that is generated will\n# contain hyperlink fields. The RTF file will contain links (just like the HTML\n# output) instead of page references. This makes the output suitable for online\n# browsing using Word or some other Word compatible readers that support those\n# fields.\n#\n# Note: WordPad (write) and others do not support links.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_RTF is set to YES.\n\nRTF_HYPERLINKS         = NO\n\n# Load stylesheet definitions from file. Syntax is similar to doxygen's\n# configuration file, i.e. a series of assignments. You only have to provide\n# replacements, missing definitions are set to their default value.\n#\n# See also section \"Doxygen usage\" for information on how to generate the\n# default style sheet that doxygen normally uses.\n# This tag requires that the tag GENERATE_RTF is set to YES.\n\nRTF_STYLESHEET_FILE    =\n\n# Set optional variables used in the generation of an RTF document. Syntax is\n# similar to doxygen's configuration file. A template extensions file can be\n# generated using doxygen -e rtf extensionFile.\n# This tag requires that the tag GENERATE_RTF is set to YES.\n\nRTF_EXTENSIONS_FILE    =\n\n# If the RTF_SOURCE_CODE tag is set to YES then doxygen will include source code\n# with syntax highlighting in the RTF output.\n#\n# Note that which sources are shown also depends on other settings such as\n# SOURCE_BROWSER.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_RTF is set to YES.\n\nRTF_SOURCE_CODE        = NO\n\n#---------------------------------------------------------------------------\n# Configuration options related to the man page output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_MAN tag is set to YES, doxygen will generate man pages for\n# classes and files.\n# The default value is: NO.\n\nGENERATE_MAN           = NO\n\n# The MAN_OUTPUT tag is used to specify where the man pages will be put. If a\n# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of\n# it. A directory man3 will be created inside the directory specified by\n# MAN_OUTPUT.\n# The default directory is: man.\n# This tag requires that the tag GENERATE_MAN is set to YES.\n\nMAN_OUTPUT             = man\n\n# The MAN_EXTENSION tag determines the extension that is added to the generated\n# man pages. In case the manual section does not start with a number, the number\n# 3 is prepended. The dot (.) at the beginning of the MAN_EXTENSION tag is\n# optional.\n# The default value is: .3.\n# This tag requires that the tag GENERATE_MAN is set to YES.\n\nMAN_EXTENSION          = .3\n\n# The MAN_SUBDIR tag determines the name of the directory created within\n# MAN_OUTPUT in which the man pages are placed. If defaults to man followed by\n# MAN_EXTENSION with the initial . removed.\n# This tag requires that the tag GENERATE_MAN is set to YES.\n\nMAN_SUBDIR             =\n\n# If the MAN_LINKS tag is set to YES and doxygen generates man output, then it\n# will generate one additional man file for each entity documented in the real\n# man page(s). These additional files only source the real man page, but without\n# them the man command would be unable to find the correct page.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_MAN is set to YES.\n\nMAN_LINKS              = NO\n\n#---------------------------------------------------------------------------\n# Configuration options related to the XML output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_XML tag is set to YES, doxygen will generate an XML file that\n# captures the structure of the code including all documentation.\n# The default value is: NO.\n\nGENERATE_XML           = NO\n\n# The XML_OUTPUT tag is used to specify where the XML pages will be put. If a\n# relative path is entered the value of OUTPUT_DIRECTORY will be put in front of\n# it.\n# The default directory is: xml.\n# This tag requires that the tag GENERATE_XML is set to YES.\n\nXML_OUTPUT             = xml\n\n# If the XML_PROGRAMLISTING tag is set to YES, doxygen will dump the program\n# listings (including syntax highlighting and cross-referencing information) to\n# the XML output. Note that enabling this will significantly increase the size\n# of the XML output.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_XML is set to YES.\n\nXML_PROGRAMLISTING     = YES\n\n# If the XML_NS_MEMB_FILE_SCOPE tag is set to YES, doxygen will include\n# namespace members in file scope as well, matching the HTML output.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_XML is set to YES.\n\nXML_NS_MEMB_FILE_SCOPE = NO\n\n#---------------------------------------------------------------------------\n# Configuration options related to the DOCBOOK output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_DOCBOOK tag is set to YES, doxygen will generate Docbook files\n# that can be used to generate PDF.\n# The default value is: NO.\n\nGENERATE_DOCBOOK       = NO\n\n# The DOCBOOK_OUTPUT tag is used to specify where the Docbook pages will be put.\n# If a relative path is entered the value of OUTPUT_DIRECTORY will be put in\n# front of it.\n# The default directory is: docbook.\n# This tag requires that the tag GENERATE_DOCBOOK is set to YES.\n\nDOCBOOK_OUTPUT         = docbook\n\n# If the DOCBOOK_PROGRAMLISTING tag is set to YES, doxygen will include the\n# program listings (including syntax highlighting and cross-referencing\n# information) to the DOCBOOK output. Note that enabling this will significantly\n# increase the size of the DOCBOOK output.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_DOCBOOK is set to YES.\n\nDOCBOOK_PROGRAMLISTING = NO\n\n#---------------------------------------------------------------------------\n# Configuration options for the AutoGen Definitions output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_AUTOGEN_DEF tag is set to YES, doxygen will generate an\n# AutoGen Definitions (see http://autogen.sourceforge.net/) file that captures\n# the structure of the code including all documentation. Note that this feature\n# is still experimental and incomplete at the moment.\n# The default value is: NO.\n\nGENERATE_AUTOGEN_DEF   = NO\n\n#---------------------------------------------------------------------------\n# Configuration options related to the Perl module output\n#---------------------------------------------------------------------------\n\n# If the GENERATE_PERLMOD tag is set to YES, doxygen will generate a Perl module\n# file that captures the structure of the code including all documentation.\n#\n# Note that this feature is still experimental and incomplete at the moment.\n# The default value is: NO.\n\nGENERATE_PERLMOD       = NO\n\n# If the PERLMOD_LATEX tag is set to YES, doxygen will generate the necessary\n# Makefile rules, Perl scripts and LaTeX code to be able to generate PDF and DVI\n# output from the Perl module output.\n# The default value is: NO.\n# This tag requires that the tag GENERATE_PERLMOD is set to YES.\n\nPERLMOD_LATEX          = NO\n\n# If the PERLMOD_PRETTY tag is set to YES, the Perl module output will be nicely\n# formatted so it can be parsed by a human reader. This is useful if you want to\n# understand what is going on. On the other hand, if this tag is set to NO, the\n# size of the Perl module output will be much smaller and Perl will parse it\n# just the same.\n# The default value is: YES.\n# This tag requires that the tag GENERATE_PERLMOD is set to YES.\n\nPERLMOD_PRETTY         = YES\n\n# The names of the make variables in the generated doxyrules.make file are\n# prefixed with the string contained in PERLMOD_MAKEVAR_PREFIX. This is useful\n# so different doxyrules.make files included by the same Makefile don't\n# overwrite each other's variables.\n# This tag requires that the tag GENERATE_PERLMOD is set to YES.\n\nPERLMOD_MAKEVAR_PREFIX =\n\n#---------------------------------------------------------------------------\n# Configuration options related to the preprocessor\n#---------------------------------------------------------------------------\n\n# If the ENABLE_PREPROCESSING tag is set to YES, doxygen will evaluate all\n# C-preprocessor directives found in the sources and include files.\n# The default value is: YES.\n\nENABLE_PREPROCESSING   = YES\n\n# If the MACRO_EXPANSION tag is set to YES, doxygen will expand all macro names\n# in the source code. If set to NO, only conditional compilation will be\n# performed. Macro expansion can be done in a controlled way by setting\n# EXPAND_ONLY_PREDEF to YES.\n# The default value is: NO.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nMACRO_EXPANSION        = NO\n\n# If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES then\n# the macro expansion is limited to the macros specified with the PREDEFINED and\n# EXPAND_AS_DEFINED tags.\n# The default value is: NO.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nEXPAND_ONLY_PREDEF     = NO\n\n# If the SEARCH_INCLUDES tag is set to YES, the include files in the\n# INCLUDE_PATH will be searched if a #include is found.\n# The default value is: YES.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nSEARCH_INCLUDES        = YES\n\n# The INCLUDE_PATH tag can be used to specify one or more directories that\n# contain include files that are not input files but should be processed by the\n# preprocessor.\n# This tag requires that the tag SEARCH_INCLUDES is set to YES.\n\nINCLUDE_PATH           =\n\n# You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard\n# patterns (like *.h and *.hpp) to filter out the header-files in the\n# directories. If left blank, the patterns specified with FILE_PATTERNS will be\n# used.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nINCLUDE_FILE_PATTERNS  =\n\n# The PREDEFINED tag can be used to specify one or more macro names that are\n# defined before the preprocessor is started (similar to the -D option of e.g.\n# gcc). The argument of the tag is a list of macros of the form: name or\n# name=definition (no spaces). If the definition and the \"=\" are omitted, \"=1\"\n# is assumed. To prevent a macro definition from being undefined via #undef or\n# recursively expanded use the := operator instead of the = operator.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nPREDEFINED             = __cplusplus=201402L\n\n# If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then this\n# tag can be used to specify a list of macro names that should be expanded. The\n# macro definition that is found in the sources will be used. Use the PREDEFINED\n# tag if you want to use a different macro definition that overrules the\n# definition found in the source code.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nEXPAND_AS_DEFINED      =\n\n# If the SKIP_FUNCTION_MACROS tag is set to YES then doxygen's preprocessor will\n# remove all references to function-like macros that are alone on a line, have\n# an all uppercase name, and do not end with a semicolon. Such function macros\n# are typically used for boiler-plate code, and will confuse the parser if not\n# removed.\n# The default value is: YES.\n# This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n\nSKIP_FUNCTION_MACROS   = YES\n\n#---------------------------------------------------------------------------\n# Configuration options related to external references\n#---------------------------------------------------------------------------\n\n# The TAGFILES tag can be used to specify one or more tag files. For each tag\n# file the location of the external documentation should be added. The format of\n# a tag file without this location is as follows:\n# TAGFILES = file1 file2 ...\n# Adding location for the tag files is done as follows:\n# TAGFILES = file1=loc1 \"file2 = loc2\" ...\n# where loc1 and loc2 can be relative or absolute paths or URLs. See the\n# section \"Linking to external documentation\" for more information about the use\n# of tag files.\n# Note: Each tag file must have a unique name (where the name does NOT include\n# the path). If a tag file is not located in the directory in which doxygen is\n# run, you must also specify the path to the tagfile here.\n\nTAGFILES               =\n\n# When a file name is specified after GENERATE_TAGFILE, doxygen will create a\n# tag file that is based on the input files it reads. See section \"Linking to\n# external documentation\" for more information about the usage of tag files.\n\nGENERATE_TAGFILE       =\n\n# If the ALLEXTERNALS tag is set to YES, all external class will be listed in\n# the class index. If set to NO, only the inherited external classes will be\n# listed.\n# The default value is: NO.\n\nALLEXTERNALS           = NO\n\n# If the EXTERNAL_GROUPS tag is set to YES, all external groups will be listed\n# in the modules index. If set to NO, only the current project's groups will be\n# listed.\n# The default value is: YES.\n\nEXTERNAL_GROUPS        = YES\n\n# If the EXTERNAL_PAGES tag is set to YES, all external pages will be listed in\n# the related pages index. If set to NO, only the current project's pages will\n# be listed.\n# The default value is: YES.\n\nEXTERNAL_PAGES         = YES\n\n#---------------------------------------------------------------------------\n# Configuration options related to the dot tool\n#---------------------------------------------------------------------------\n\n# If the CLASS_DIAGRAMS tag is set to YES, doxygen will generate a class diagram\n# (in HTML and LaTeX) for classes with base or super classes. Setting the tag to\n# NO turns the diagrams off. Note that this option also works with HAVE_DOT\n# disabled, but it is recommended to install and use dot, since it yields more\n# powerful graphs.\n# The default value is: YES.\n\nCLASS_DIAGRAMS         = YES\n\n# You can include diagrams made with dia in doxygen documentation. Doxygen will\n# then run dia to produce the diagram and insert it in the documentation. The\n# DIA_PATH tag allows you to specify the directory where the dia binary resides.\n# If left empty dia is assumed to be found in the default search path.\n\nDIA_PATH               =\n\n# If set to YES the inheritance and collaboration graphs will hide inheritance\n# and usage relations if the target is undocumented or is not a class.\n# The default value is: YES.\n\nHIDE_UNDOC_RELATIONS   = YES\n\n# If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is\n# available from the path. This tool is part of Graphviz (see:\n# http://www.graphviz.org/), a graph visualization toolkit from AT&T and Lucent\n# Bell Labs. The other options in this section have no effect if this option is\n# set to NO\n# The default value is: NO.\n\nHAVE_DOT               = NO\n\n# The DOT_NUM_THREADS specifies the number of dot invocations doxygen is allowed\n# to run in parallel. When set to 0 doxygen will base this on the number of\n# processors available in the system. You can set it explicitly to a value\n# larger than 0 to get control over the balance between CPU load and processing\n# speed.\n# Minimum value: 0, maximum value: 32, default value: 0.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_NUM_THREADS        = 0\n\n# When you want a differently looking font in the dot files that doxygen\n# generates you can specify the font name using DOT_FONTNAME. You need to make\n# sure dot is able to find the font, which can be done by putting it in a\n# standard location or by setting the DOTFONTPATH environment variable or by\n# setting DOT_FONTPATH to the directory containing the font.\n# The default value is: Helvetica.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_FONTNAME           = Helvetica\n\n# The DOT_FONTSIZE tag can be used to set the size (in points) of the font of\n# dot graphs.\n# Minimum value: 4, maximum value: 24, default value: 10.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_FONTSIZE           = 10\n\n# By default doxygen will tell dot to use the default font as specified with\n# DOT_FONTNAME. If you specify a different font using DOT_FONTNAME you can set\n# the path where dot can find it using this tag.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_FONTPATH           =\n\n# If the CLASS_GRAPH tag is set to YES then doxygen will generate a graph for\n# each documented class showing the direct and indirect inheritance relations.\n# Setting this tag to YES will force the CLASS_DIAGRAMS tag to NO.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nCLASS_GRAPH            = YES\n\n# If the COLLABORATION_GRAPH tag is set to YES then doxygen will generate a\n# graph for each documented class showing the direct and indirect implementation\n# dependencies (inheritance, containment, and class references variables) of the\n# class with other documented classes.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nCOLLABORATION_GRAPH    = YES\n\n# If the GROUP_GRAPHS tag is set to YES then doxygen will generate a graph for\n# groups, showing the direct groups dependencies.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nGROUP_GRAPHS           = YES\n\n# If the UML_LOOK tag is set to YES, doxygen will generate inheritance and\n# collaboration diagrams in a style similar to the OMG's Unified Modeling\n# Language.\n# The default value is: NO.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nUML_LOOK               = NO\n\n# If the UML_LOOK tag is enabled, the fields and methods are shown inside the\n# class node. If there are many fields or methods and many nodes the graph may\n# become too big to be useful. The UML_LIMIT_NUM_FIELDS threshold limits the\n# number of items for each type to make the size more manageable. Set this to 0\n# for no limit. Note that the threshold may be exceeded by 50% before the limit\n# is enforced. So when you set the threshold to 10, up to 15 fields may appear,\n# but if the number exceeds 15, the total amount of fields shown is limited to\n# 10.\n# Minimum value: 0, maximum value: 100, default value: 10.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nUML_LIMIT_NUM_FIELDS   = 10\n\n# If the TEMPLATE_RELATIONS tag is set to YES then the inheritance and\n# collaboration graphs will show the relations between templates and their\n# instances.\n# The default value is: NO.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nTEMPLATE_RELATIONS     = NO\n\n# If the INCLUDE_GRAPH, ENABLE_PREPROCESSING and SEARCH_INCLUDES tags are set to\n# YES then doxygen will generate a graph for each documented file showing the\n# direct and indirect include dependencies of the file with other documented\n# files.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nINCLUDE_GRAPH          = YES\n\n# If the INCLUDED_BY_GRAPH, ENABLE_PREPROCESSING and SEARCH_INCLUDES tags are\n# set to YES then doxygen will generate a graph for each documented file showing\n# the direct and indirect include dependencies of the file with other documented\n# files.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nINCLUDED_BY_GRAPH      = YES\n\n# If the CALL_GRAPH tag is set to YES then doxygen will generate a call\n# dependency graph for every global function or class method.\n#\n# Note that enabling this option will significantly increase the time of a run.\n# So in most cases it will be better to enable call graphs for selected\n# functions only using the \\callgraph command. Disabling a call graph can be\n# accomplished by means of the command \\hidecallgraph.\n# The default value is: NO.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nCALL_GRAPH             = YES\n\n# If the CALLER_GRAPH tag is set to YES then doxygen will generate a caller\n# dependency graph for every global function or class method.\n#\n# Note that enabling this option will significantly increase the time of a run.\n# So in most cases it will be better to enable caller graphs for selected\n# functions only using the \\callergraph command. Disabling a caller graph can be\n# accomplished by means of the command \\hidecallergraph.\n# The default value is: NO.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nCALLER_GRAPH           = YES\n\n# If the GRAPHICAL_HIERARCHY tag is set to YES then doxygen will graphical\n# hierarchy of all classes instead of a textual one.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nGRAPHICAL_HIERARCHY    = YES\n\n# If the DIRECTORY_GRAPH tag is set to YES then doxygen will show the\n# dependencies a directory has on other directories in a graphical way. The\n# dependency relations are determined by the #include relations between the\n# files in the directories.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDIRECTORY_GRAPH        = YES\n\n# The DOT_IMAGE_FORMAT tag can be used to set the image format of the images\n# generated by dot. For an explanation of the image formats see the section\n# output formats in the documentation of the dot tool (Graphviz (see:\n# http://www.graphviz.org/)).\n# Note: If you choose svg you need to set HTML_FILE_EXTENSION to xhtml in order\n# to make the SVG files visible in IE 9+ (other browsers do not have this\n# requirement).\n# Possible values are: png, jpg, gif, svg, png:gd, png:gd:gd, png:cairo,\n# png:cairo:gd, png:cairo:cairo, png:cairo:gdiplus, png:gdiplus and\n# png:gdiplus:gdiplus.\n# The default value is: png.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_IMAGE_FORMAT       = png\n\n# If DOT_IMAGE_FORMAT is set to svg, then this option can be set to YES to\n# enable generation of interactive SVG images that allow zooming and panning.\n#\n# Note that this requires a modern browser other than Internet Explorer. Tested\n# and working are Firefox, Chrome, Safari, and Opera.\n# Note: For IE 9+ you need to set HTML_FILE_EXTENSION to xhtml in order to make\n# the SVG files visible. Older versions of IE do not have SVG support.\n# The default value is: NO.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nINTERACTIVE_SVG        = NO\n\n# The DOT_PATH tag can be used to specify the path where the dot tool can be\n# found. If left blank, it is assumed the dot tool can be found in the path.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_PATH               =\n\n# The DOTFILE_DIRS tag can be used to specify one or more directories that\n# contain dot files that are included in the documentation (see the \\dotfile\n# command).\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOTFILE_DIRS           =\n\n# The MSCFILE_DIRS tag can be used to specify one or more directories that\n# contain msc files that are included in the documentation (see the \\mscfile\n# command).\n\nMSCFILE_DIRS           =\n\n# The DIAFILE_DIRS tag can be used to specify one or more directories that\n# contain dia files that are included in the documentation (see the \\diafile\n# command).\n\nDIAFILE_DIRS           =\n\n# When using plantuml, the PLANTUML_JAR_PATH tag should be used to specify the\n# path where java can find the plantuml.jar file. If left blank, it is assumed\n# PlantUML is not used or called during a preprocessing step. Doxygen will\n# generate a warning when it encounters a \\startuml command in this case and\n# will not generate output for the diagram.\n\nPLANTUML_JAR_PATH      =\n\n# When using plantuml, the PLANTUML_CFG_FILE tag can be used to specify a\n# configuration file for plantuml.\n\nPLANTUML_CFG_FILE      =\n\n# When using plantuml, the specified paths are searched for files specified by\n# the !include statement in a plantuml block.\n\nPLANTUML_INCLUDE_PATH  =\n\n# The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of nodes\n# that will be shown in the graph. If the number of nodes in a graph becomes\n# larger than this value, doxygen will truncate the graph, which is visualized\n# by representing a node as a red box. Note that doxygen if the number of direct\n# children of the root node in a graph is already larger than\n# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note that\n# the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.\n# Minimum value: 0, maximum value: 10000, default value: 50.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_GRAPH_MAX_NODES    = 50\n\n# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the graphs\n# generated by dot. A depth value of 3 means that only nodes reachable from the\n# root by following a path via at most 3 edges will be shown. Nodes that lay\n# further from the root node will be omitted. Note that setting this option to 1\n# or 2 may greatly reduce the computation time needed for large code bases. Also\n# note that the size of a graph can be further restricted by\n# DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.\n# Minimum value: 0, maximum value: 1000, default value: 0.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nMAX_DOT_GRAPH_DEPTH    = 0\n\n# Set the DOT_TRANSPARENT tag to YES to generate images with a transparent\n# background. This is disabled by default, because dot on Windows does not seem\n# to support this out of the box.\n#\n# Warning: Depending on the platform used, enabling this option may lead to\n# badly anti-aliased labels on the edges of a graph (i.e. they become hard to\n# read).\n# The default value is: NO.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_TRANSPARENT        = NO\n\n# Set the DOT_MULTI_TARGETS tag to YES to allow dot to generate multiple output\n# files in one run (i.e. multiple -o and -T options on the command line). This\n# makes dot run faster, but since only newer versions of dot (>1.8.10) support\n# this, this feature is disabled by default.\n# The default value is: NO.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_MULTI_TARGETS      = NO\n\n# If the GENERATE_LEGEND tag is set to YES doxygen will generate a legend page\n# explaining the meaning of the various boxes and arrows in the dot generated\n# graphs.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nGENERATE_LEGEND        = YES\n\n# If the DOT_CLEANUP tag is set to YES, doxygen will remove the intermediate dot\n# files that are used to generate the various graphs.\n# The default value is: YES.\n# This tag requires that the tag HAVE_DOT is set to YES.\n\nDOT_CLEANUP            = YES\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.1142578125,
          "content": "The MIT License (MIT)\r\n\r\nCopyright (c) 2012-2024 Sebastien Rombauts (sebastien.rombauts@gmail.com)\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is furnished\r\nto do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\r\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.466796875,
          "content": "SQLiteC++\r\n---------\r\n\r\n[![release](https://img.shields.io/github/release/SRombauts/SQLiteCpp.svg)](https://github.com/SRombauts/SQLiteCpp/releases)\r\n[![license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/SRombauts/SQLiteCpp/blob/master/LICENSE.txt)\r\n[![Travis CI Linux Build Status](https://travis-ci.org/SRombauts/SQLiteCpp.svg?branch=master)](https://travis-ci.org/SRombauts/SQLiteCpp \"Travis CI Linux Build Status\")\r\n[![AppVeyor Windows Build status](https://ci.appveyor.com/api/projects/status/github/SRombauts/SQLiteCpp?svg=true)](https://ci.appveyor.com/project/SbastienRombauts/SQLiteCpp \"AppVeyor Windows Build status\")\r\n[![GitHub Actions Build status](https://github.com/SRombauts/SQLiteCpp/workflows/build/badge.svg)](https://github.com/SRombauts/SQLiteCpp/actions \"GitHhub Actions Build status\")\r\n[![Coveralls](https://img.shields.io/coveralls/SRombauts/SQLiteCpp.svg)](https://coveralls.io/github/SRombauts/SQLiteCpp \"Coveralls test coverage\")\r\n[![Coverity](https://img.shields.io/coverity/scan/14508.svg)](https://scan.coverity.com/projects/srombauts-sqlitecpp \"Coverity Scan Build Status\")\r\n[![Join the chat at https://gitter.im/SRombauts/SQLiteCpp](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/SRombauts/SQLiteCpp?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\nSQLiteC++ (SQLiteCpp) is a lean and easy to use C++ SQLite3 wrapper.\r\n\r\n<!--Keywords: sqlite, sqlite3, C, library, wrapper C++-->\r\n<meta name=\"keywords\" content=\"sqlite, sqlite3, C, library, wrapper C++\">\r\n\r\n## About SQLiteC++:\r\n\r\nSQLiteC++ offers an encapsulation around the native C APIs of SQLite,\r\nwith a few intuitive and well documented C++ classes.\r\n\r\n### License:\r\n\r\nCopyright (c) 2012-2024 Sébastien Rombauts (sebastien.rombauts@gmail.com)\r\n<a href=\"https://www.paypal.me/SRombauts\" title=\"Pay Me a Beer! Donate with PayPal :)\"><img src=\"https://www.paypalobjects.com/webstatic/paypalme/images/pp_logo_small.png\" width=\"118\"></a>\r\n\r\nDistributed under the MIT License (MIT) (See accompanying file LICENSE.txt\r\nor copy at http://opensource.org/licenses/MIT)\r\n\r\n#### Note on redistribution of SQLite source files\r\n\r\nAs stated by the MIT License, you are welcome to reuse, modify, and redistribute the SQLiteCpp source code\r\nthe way you want it to, be it a git submodule, a subdirectory, or a selection of some source files.\r\n\r\nI would love a mention in your README, a web link to the SQLite repository, and a mention of the author,\r\nbut none of those are mandatory.\r\n\r\n### About SQLite underlying library:\r\n\r\nSQLite is a library that implements a serverless transactional SQL database engine.\r\nIt is the most widely deployed SQL database engine in the world.\r\nAll of the code and documentation in SQLite has been dedicated to the public domain by the authors.\r\n[http://www.sqlite.org/about.html](http://www.sqlite.org/about.html)\r\n\r\n### The goals of SQLiteC++ are:\r\n\r\n- to offer the best of the existing simple C++ SQLite wrappers\r\n- to be elegantly written with good C++11 design, STL, exceptions and RAII idiom\r\n- to keep dependencies to a minimum (C++11 STL and SQLite3)\r\n- to be portable\r\n- to be light and fast\r\n- to be thread-safe only as much as SQLite \"Multi-thread\" mode (see below)\r\n- to have a good unit test coverage\r\n- to use API names sticking with those of the SQLite library\r\n- to be well documented with Doxygen tags, and with some good examples\r\n- to be well maintained\r\n- to use a permissive MIT license, similar to BSD or Boost, for proprietary/commercial usage\r\n\r\nIt is designed using the Resource Acquisition Is Initialization (RAII) idiom\r\n(see [http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization](http://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization)),\r\nand throwing exceptions in case of SQLite errors (except in destructors,\r\nwhere assert() are used instead).\r\nEach SQLiteC++ object must be constructed with a valid SQLite database connection,\r\nand then is always valid until destroyed.\r\n\r\n### Supported platforms:\r\n\r\nNow requires a C++11 compiler. Use branch [sqlitecpp-2.x](https://github.com/SRombauts/SQLiteCpp/tree/sqlitecpp-2.x) for latest pre-C++11 developments.\r\n\r\nDevelopments and tests are done under the following OSs:\r\n- Ubuntu 14.04, 16.04 and 18.04 (Travis CI and Github Actions)\r\n- Windows 10, and Windows Server 2012 R2, Windows Server 2016, Windows Server 2022 (AppVeyor and Github Actions)\r\n- MacOS 10.11 and 11.7 (Travis CI and Github Actions)\r\n- Valgrind memcheck tool\r\n\r\nAnd the following IDEs/Compilers\r\n- GCC 4.8.4, 5.3.0, 7.1.1 and latest eg 9.4 (C++11, C++14, C++17)\r\n- Clang 5 and 7 (Travis CI)\r\n- AppleClang 8, 9 and 13 (Travis CI and Github Actions)\r\n- Xcode 8 & 9 (Travis CI)\r\n- Visual Studio Community/Entreprise 2022, 2019, 2017, and 2015 (AppVeyor and Github Actions)\r\n\r\n### Dependencies\r\n\r\n- a modern C++11 STL implementation with GCC, Clang, or Visual Studio 2015\r\n- exception support (the class Exception inherits from std::runtime_error)\r\n- the SQLite library (3.7.15 minimum from 2012-12-12) either by linking to it dynamically or statically (install the libsqlite3-dev package under Debian/Ubuntu/Mint Linux),\r\n  or by adding its source file in your project code base (source code provided in src/sqlite3 for Windows),\r\n  with the `SQLITE_ENABLE_COLUMN_METADATA` macro defined (see http://www.sqlite.org/compile.html#enable_column_metadata).\r\n\r\n## Getting started\r\n### Installation\r\n\r\nTo use this wrapper, you need to add the SQLiteC++ source files from the src/ directory\r\nin your project code base, and compile/link against the sqlite library.\r\n\r\nThe easiest way to do this is to add the wrapper as a library.\r\nThe \"CMakeLists.txt\" file defining the static library is provided in the root directory,\r\nso you simply have to add_subdirectory(SQLiteCpp) to you main CMakeLists.txt\r\nand link to the \"SQLiteCpp\" wrapper library.\r\n\r\nExample for Linux: \r\n```cmake\r\nadd_subdirectory(${CMAKE_CURRENT_LIST_DIR}/thirdparty/SQLiteCpp)\r\n\r\nadd_executable(main src/main.cpp)\r\ntarget_link_libraries(main\r\n  SQLiteCpp\r\n  sqlite3\r\n  pthread\r\n  dl\r\n  )\r\n``` \r\nThus this SQLiteCpp repository can be directly used as a Git submodule.\r\nSee the [SQLiteCpp_Example](https://github.com/SRombauts/SQLiteCpp_Example) side repository for a standalone \"from scratch\" example.\r\n\r\nUnder Debian/Ubuntu/Mint Linux, you can install the libsqlite3-dev package if you don't want to use the embedded sqlite3 library.\r\n\r\n### Building example and unit-tests:\r\n\r\nUse git to clone the repository. Then init and update submodule \"googletest\".\r\n\r\n```Shell\r\ngit clone https://github.com/SRombauts/SQLiteCpp.git\r\ncd SQLiteCpp\r\ngit submodule init\r\ngit submodule update\r\n```\r\n\r\n### Installing SQLiteCpp (vcpkg)\r\n\r\nAlternatively, you can build and install SQLiteCpp using [vcpkg](https://github.com/Microsoft/vcpkg/) dependency manager:\r\n\r\n```bash or powershell\r\ngit clone https://github.com/Microsoft/vcpkg.git\r\ncd vcpkg\r\n./bootstrap-vcpkg.sh\r\n./vcpkg integrate install\r\n./vcpkg install sqlitecpp\r\n```\r\n\r\nThe SQLiteCpp port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\r\n\r\n\r\n#### Using SQLiteCpp on a system-wide installation\r\n\r\nIf you installed this package to your system, a `SQLiteCppConfig.cmake` file will be generated & installed to your system.  \r\nThis file lets you link against the SQLiteCpp library for use in your Cmake project.\r\n\r\nHere's an example of using this in your CMakeLists.txt\r\n```cmake\r\n# You can optionally define a minimum version in this call\r\nfind_package(SQLiteCpp REQUIRED)\r\n# For this example, lets say you created an target with add_executable (or add_library) called \"my_target\"\r\n# You can optionally declare PUBLIC or PRIVATE linkage here, depending on your needs.\r\ntarget_link_libraries(my_target PRIVATE SQLiteCpp)\r\n```\r\n\r\n#### CMake and tests\r\nA CMake configuration file is also provided for multi-platform support and testing.\r\n\r\nTypical generic build for MS Visual Studio under Windows (from [build.bat](build.bat)):\r\n\r\n```Batchfile\r\nmkdir build\r\ncd build\r\n\r\ncmake ..        # cmake .. -G \"Visual Studio 16 2019\"    # for Visual Studio 2019\r\n@REM Generate a Visual Studio solution for latest version found\r\ncmake -DSQLITECPP_BUILD_EXAMPLES=ON -DSQLITECPP_BUILD_TESTS=ON ..\r\n\r\n@REM Build default configuration (ie 'Debug')\r\ncmake --build .\r\n\r\n@REM Build and run tests\r\nctest --output-on-failure\r\n```\r\n\r\nGenerating the Linux Makefile, building in Debug and executing the tests (from [build.sh](build.sh)):\r\n\r\n```Shell\r\nmkdir Debug\r\ncd Debug\r\n\r\n# Generate a Makefile for GCC (or Clang, depanding on CC/CXX envvar)\r\ncmake -DSQLITECPP_BUILD_EXAMPLES=ON -DSQLITECPP_BUILD_TESTS=ON ..\r\n\r\n# Build (ie 'make')\r\ncmake --build .\r\n\r\n# Build and run unit-tests (ie 'make test')\r\nctest --output-on-failure\r\n```\r\n\r\n#### Building with meson\r\n\r\nYou can build SQLiteCpp with [meson](https://mesonbuild.com/) using the provided meson project.\r\n\r\nyou can install meson using pip: `pip install meson` however you may need to install ninja and other dependencies depending on your platform as an compiler toolchain\r\n\r\nArch Linux:\r\n\r\n```sh\r\n# install clang (compiler toolchain) and ninja (recommended build system)\r\nsudo pacman -Syu clang ninja\r\n# install python and pip (required for meson)\r\nsudo pacman -Syu python python-pip\r\n# install meson \r\npip install meson\r\n```\r\n\r\nUbuntu:\r\n\r\n```sh\r\n# install gcc(compiler toolchain) and ninja (recommended build system)\r\nsudo apt install build-essential ninja-build\r\n# install python and pip (required for meson)\r\nsudo apt install python3 python3-pip\r\n# install meson\r\npip install meson\r\n```\r\n\r\nfor example you can build the library using the default options with:\r\n\r\n```sh\r\n# setup the build directory\r\nmeson setup builddir \r\n# build sqlitecpp\r\nmeson compile -C builddir\r\n```\r\n\r\nor if you wish to build with tests and examples:\r\n\r\n```sh\r\n# setup the build directory with tests and examples enabled\r\nmeson setup builddir -DSQLITECPP_BUILD_TESTS=true -DSQLITECPP_BUILD_EXAMPLES=true\r\n# build sqlitecpp\r\nmeson compile -C builddir\r\n```\r\n\r\n#### Using SQLiteCpp as subproject in meson\r\n\r\nplease check the examples in the examples folder for usage of SQLiteCpp as a subproject in meson, as for the wrap file you can use the one provided in the subprojects folder called `SQLiteCpp.wrap`\r\n\r\n> keep in mind that even that this wrap should be up to date, it is recommended to check the latest version of SQLiteCpp and update the wrap file accordingly\r\n\r\n#### System SQLiteCpp support under meson\r\n\r\nadditionally meson can detect and use the bundled sqlitecpp library included on your system if available, for example with vcpkg you would need to set the `PKG_CONFIG_PATH` environment variable to the vcpkg directory before running meson setup, and if applies the corresponding `PKG-CONFIG` executable to the path.\r\n\r\n#### Building the Doxygen/html documentation\r\n\r\nMake sure you have Dogygen installed and configure CMake using the `SQLITECPP_RUN_DOXYGEN=ON` flag:\r\n\r\n```\r\ncmake -DSQLITECPP_RUN_DOXYGEN=ON   <MORE ARGUMENTS_HERE>\r\n```\r\n\r\nand then execute the `SQLiteCpp_doxygen` target (or build all targets, see above).\r\nThe documentation will be generated in the 'doc' subfolder of the source tree.\r\n\r\n#### CMake options\r\n\r\n  * For more options on customizing the build, see the [CMakeLists.txt](https://github.com/SRombauts/SQLiteCpp/blob/master/CMakeLists.txt) file.\r\n\r\n#### Troubleshooting\r\n\r\nUnder Linux, if you get multiple linker errors like \"undefined reference to sqlite3_xxx\",\r\nit's that you lack the \"sqlite3\" library: install the libsqlite3-dev package.\r\n\r\nIf you get a single linker error \"Column.cpp: undefined reference to sqlite3_column_origin_name\",\r\nit's that your \"sqlite3\" library was not compiled with\r\nthe `SQLITE_ENABLE_COLUMN_METADATA` macro defined (see [http://www.sqlite.org/compile.html#enable_column_metadata](http://www.sqlite.org/compile.html#enable_column_metadata)).\r\nYou can:\r\n - either recompile the sqlite3 library provided by your distribution yourself (seek help online)\r\n - or turn off the `option(SQLITE_ENABLE_COLUMN_METADATA \"Enable Column::getColumnOriginName(). Require support from sqlite3 library.\" ON)` in [CMakeFiles.txt](CMakeFiles.txt) (or other build system scripts)\r\n - or turn on the `option(SQLITECPP_INTERNAL_SQLITE \"Add the internal SQLite3 source to the project.\" ON)` in [CMakeFiles.txt](CMakeFiles.txt)\r\n\r\n### Continuous Integration\r\n\r\nThis project is continuously tested under Ubuntu Linux with the gcc and clang compilers\r\nusing the Travis CI community service with the above CMake building and testing procedure.\r\nIt is also tested in the same way under Windows Server 2012 R2 with Visual Studio 2013 compiler\r\nusing the AppVeyor continuous integration service.\r\n\r\nDetailed results can be seen online:\r\n - [https://travis-ci.org/SRombauts/SQLiteCpp](https://travis-ci.org/SRombauts/SQLiteCpp)\r\n - [https://ci.appveyor.com/project/SbastienRombauts/SQLiteCpp](https://ci.appveyor.com/project/SbastienRombauts/SQLiteCpp)\r\n\r\n### Thread-safety\r\n\r\nSQLite supports three modes of thread safety, as describe in \"SQLite And Multiple Threads\":\r\nsee [http://www.sqlite.org/threadsafe.html](http://www.sqlite.org/threadsafe.html)\r\n\r\nThis SQLiteC++ wrapper does no add any locks (no mutexes) nor any other thread-safety mechanism\r\nabove the SQLite library itself, by design, for lightness and speed.\r\n\r\nThus, SQLiteC++ naturally supports the \"Multi Thread\" mode of SQLite:\r\n\"In this mode, SQLite can be safely used by multiple threads\r\nprovided that no single database connection is used simultaneously in two or more threads.\"\r\n\r\nBut SQLiteC++ does not support the fully thread-safe \"Serialized\" mode of SQLite,\r\nbecause of the way it shares the underlying SQLite precompiled statement\r\nin a custom shared pointer (See the inner class \"Statement::Ptr\").\r\n\r\n### Valgrind memcheck\r\n\r\nRun valgrind to search for memory leaks in your application, the SQLiteCpp wrapper, or the sqlite3 library.\r\nExecute the following command under Unix like OS (Linux, MacOS or WSL2/Ubuntu under Windows Subsystem for Linux):\r\n\r\n```Shell\r\nvalgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose build/SQLiteCpp_example1\r\n```\r\n\r\nor uncoment the line at the end of [build.sh](build.sh)\r\n\r\n## Examples\r\n### The first sample demonstrates how to query a database and get results: \r\n\r\n```C++\r\ntry\r\n{\r\n    // Open a database file\r\n    SQLite::Database    db(\"example.db3\");\r\n    \r\n    // Compile a SQL query, containing one parameter (index 1)\r\n    SQLite::Statement   query(db, \"SELECT * FROM test WHERE size > ?\");\r\n    \r\n    // Bind the integer value 6 to the first parameter of the SQL query\r\n    query.bind(1, 6);\r\n    \r\n    // Loop to execute the query step by step, to get rows of result\r\n    while (query.executeStep())\r\n    {\r\n        // Demonstrate how to get some typed column value\r\n        int         id      = query.getColumn(0);\r\n        const char* value   = query.getColumn(1);\r\n        int         size    = query.getColumn(2);\r\n        \r\n        std::cout << \"row: \" << id << \", \" << value << \", \" << size << std::endl;\r\n    }\r\n}\r\ncatch (std::exception& e)\r\n{\r\n    std::cout << \"exception: \" << e.what() << std::endl;\r\n}\r\n```\r\n\r\n### The second sample shows how to manage a transaction:\r\n\r\n```C++\r\ntry\r\n{\r\n    SQLite::Database    db(\"transaction.db3\", SQLite::OPEN_READWRITE|SQLite::OPEN_CREATE);\r\n\r\n    db.exec(\"DROP TABLE IF EXISTS test\");\r\n\r\n    // Begin transaction\r\n    SQLite::Transaction transaction(db);\r\n\r\n    db.exec(\"CREATE TABLE test (id INTEGER PRIMARY KEY, value TEXT)\");\r\n\r\n    int nb = db.exec(\"INSERT INTO test VALUES (NULL, \\\"test\\\")\");\r\n    std::cout << \"INSERT INTO test VALUES (NULL, \\\"test\\\")\\\", returned \" << nb << std::endl;\r\n\r\n    // Commit transaction\r\n    transaction.commit();\r\n}\r\ncatch (std::exception& e)\r\n{\r\n    std::cout << \"exception: \" << e.what() << std::endl;\r\n}\r\n```\r\n\r\n### The third sample shows how to manage a prepared statement with a transaction:\r\n\r\n```C++\r\ntry \r\n{ \r\n    SQLite::Database    db(\"test.db3\", SQLite::OPEN_READWRITE|SQLite::OPEN_CREATE);\r\n\r\n    db.exec(\"DROP TABLE IF EXISTS test\");\r\n\r\n    db.exec(\"CREATE TABLE test (value INTEGER)\");\r\n\r\n    // Begin transaction\r\n    SQLite::Transaction transaction(db);\r\n\r\n    // Prepare query\r\n    SQLite::Statement query {db, \"INSERT INTO test (value) VALUES (?)\"};\r\n\r\n    // Collection to save in database\r\n    std::vector<int> values{1, 2, 3};\r\n\r\n    for (const auto& v: values)\r\n    {\r\n      query.bind(1, v);\r\n      query.exec();\r\n      query.reset();\r\n    }\r\n\r\n    // Commit transaction\r\n    transaction.commit();\r\n}\r\ncatch (std::exception& e)\r\n{\r\n  std::cout << \"exception: \" << e.what() << std::endl;\r\n}\r\n```\r\n\r\n### How to handle assertion in SQLiteC++:\r\nExceptions shall not be used in destructors, so SQLiteC++ uses SQLITECPP_ASSERT() to check for errors in destructors.\r\nIf you don't want assert() to be called, you have to enable and define an assert handler as shown below,\r\nand by setting the flag SQLITECPP_ENABLE_ASSERT_HANDLER when compiling the lib.\r\n\r\n```C++\r\n#ifdef SQLITECPP_ENABLE_ASSERT_HANDLER\r\nnamespace SQLite\r\n{\r\n/// definition of the assertion handler enabled when SQLITECPP_ENABLE_ASSERT_HANDLER is defined in the project (CMakeList.txt)\r\nvoid assertion_failed(const char* apFile, const long apLine, const char* apFunc, const char* apExpr, const char* apMsg)\r\n{\r\n    // Print a message to the standard error output stream, and abort the program.\r\n    std::cerr << apFile << \":\" << apLine << \":\" << \" error: assertion failed (\" << apExpr << \") in \" << apFunc << \"() with message \\\"\" << apMsg << \"\\\"\\n\";\r\n    std::abort();\r\n}\r\n}\r\n#endif\r\n```\r\n\r\n## How to contribute\r\n### GitHub website\r\nThe most efficient way to help and contribute to this wrapper project is to\r\nuse the tools provided by GitHub:\r\n- please fill bug reports and feature requests here: [https://github.com/SRombauts/SQLiteCpp/issues](https://github.com/SRombauts/SQLiteCpp/issues)\r\n- fork the repository, make some small changes and submit them with pull-request\r\n\r\n### Contact\r\nYou can also email me directly, I will try to answer questions and requests whenever I get the time for it.\r\n\r\n### Coding Style Guidelines\r\nThe source code use the CamelCase naming style variant where:\r\n- type names (class, struct, typedef, enums...) begin with a capital letter\r\n- files (.cpp/.h) are named like the class they contain\r\n- function and variable names begin with a lower case letter\r\n- member variables begin with a 'm', function arguments begin with a 'a', booleans with a 'b', pointers with a 'p'\r\n- each file, class, method and member variable is documented using Doxygen tags\r\n- braces on their own line\r\nSee also [http://www.appinf.com/download/CppCodingStyleGuide.pdf](http://www.appinf.com/download/CppCodingStyleGuide.pdf) for good guidelines\r\n\r\n## See also - Some other simple C++ SQLite wrappers:\r\n\r\nSee bellow a short comparison of other wrappers done at the time of writing:\r\n - [sqdbcpp](http://code.google.com/p/sqdbcpp/): RAII design, simple, no dependencies, UTF-8/UTF-16, new BSD license\r\n - [sqlite3cc](http://ed.am/dev/sqlite3cc): uses boost, modern design, LPGPL\r\n - [sqlite3pp](https://github.com/iwongu/sqlite3pp): modern design inspired by boost, MIT License\r\n - [SQLite++](http://sqlitepp.berlios.de/): uses boost build system, Boost License 1.0 \r\n - [CppSQLite](http://www.codeproject.com/Articles/6343/CppSQLite-C-Wrapper-for-SQLite/): famous Code Project but old design, BSD License \r\n - [easySQLite](http://code.google.com/p/easysqlite/): manages table as structured objects, complex \r\n - [sqlite_modern_cpp](https://github.com/keramer/sqlite_modern_cpp): modern C++11, all in one file, MIT license\r\n - [sqlite_orm](https://github.com/fnc12/sqlite_orm): modern C++14, header only all in one file, no raw string queries, BSD-3 license\r\n"
        },
        {
          "name": "TODO.txt",
          "type": "blob",
          "size": 0.958984375,
          "content": "Add a Tutorial for SQLite newbies\nAdd a real example in the form of a small interactive console application\n\nImprove Github Wiki pages with the FAQ: Installation, Examples, Tutorial, How to contribute\nPublish the Doxygen Documentation in the Github Pages (gh-pages branch)\n\nMissing features in v2.0.0:\n- #34: Better type for getColumn\n\nMissing documentation in v2.0.0:\n- explain the non-copyable property for RAII design\n- comment on returning error code instead of exception that shall not be thrown when expected (!?)\n\nMissing unit tests in v2.0.0:\n- Load Extension (not practicable, and easy to verify by code review)\n\nAdvanced missing features:\n- Add optional usage of experimental sqlite3_trace() function to enable statistics\n- Aggregate ?\n\n- support for different transaction mode ? NO: too specific\n- operator<< binding ? NO: redundant with bind()\n- ATTACH Database ? NO: can already be done by \"ATTACH\" Statement\n\nPost an article to CodeProject: Is there a license issue ?\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.0244140625,
          "content": "theme: jekyll-theme-slate"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 1.5224609375,
          "content": "# Copyright (c) 2012-2024 Sebastien Rombauts (sebastien.rombauts@gmail.com)\n\n# build format\nversion: \"{build}\"\n\n# scripts that run after cloning repository\ninstall:\n  - git submodule update --init --recursive\n \nimage:\n# Note: reduced the number of images to test on AppVeyor, to speed up the build\n  - Visual Studio 2022\n#  - Visual Studio 2019\n#  - Visual Studio 2017\n  - Visual Studio 2015\n  \n# configurations to add to build matrix\nconfiguration:\n  - Debug\n  - Release\n\nenvironment:\n  matrix:\n  - arch: Win32\n  - arch: x64\n\ninit:\n  - echo %APPVEYOR_BUILD_WORKER_IMAGE% - %configuration% - %arch%\n  - if \"%APPVEYOR_BUILD_WORKER_IMAGE%\"==\"Visual Studio 2017\" (set vs=Visual Studio 15 2017)\n  - if \"%APPVEYOR_BUILD_WORKER_IMAGE%\"==\"Visual Studio 2015\" (set vs=Visual Studio 14 2015)\n  - if \"%arch%\"==\"x64\" (set generator=\"%vs% Win64\") else (set generator=\"%vs%\")\n  # CMake uses a different grammar for Visual Studio 2019, with -A to specify architecture:\n  - if \"%APPVEYOR_BUILD_WORKER_IMAGE%\"==\"Visual Studio 2019\" (set generator=\"Visual Studio 16 2019\" -A %arch%)\n  - if \"%APPVEYOR_BUILD_WORKER_IMAGE%\"==\"Visual Studio 2022\" (set generator=\"Visual Studio 17 2022\" -A %arch%)\n  - echo %generator%\n \n# scripts to run before build\nbefore_build:\n  - mkdir build\n  - cd build\n  - cmake -DCMAKE_VERBOSE_MAKEFILE=ON -DSQLITECPP_BUILD_EXAMPLES=ON -DSQLITECPP_BUILD_TESTS=ON -DSQLITECPP_RUN_CPPCHECK=OFF .. -G %generator%\n\n# build examples, and run tests (ie make & make test)\nbuild_script:\n  - cmake --build . --config %configuration%\n  - ctest --output-on-failure\n"
        },
        {
          "name": "build.bat",
          "type": "blob",
          "size": 0.7822265625,
          "content": "@REM Copyright (c) 2012-2024 Sebastien Rombauts (sebastien.rombauts@gmail.com)\n@REM\n@REM Distributed under the MIT License (MIT) (See accompanying file LICENSE.txt\n@REM or copy at http://opensource.org/licenses/MIT)\nmkdir build\ncd build\n\n@REM Generate a Visual Studio solution for latest version found\nREM -DPYTHON_EXECUTABLE=D:\\workspace\\Corvus\\UnrealEngine\\Engine\\Binaries\\ThirdParty\\Python\\Win64\\python.exe\ncmake -DBUILD_SHARED_LIBS=ON -DSQLITECPP_BUILD_TESTS=ON -DSQLITECPP_BUILD_EXAMPLES=ON -DSQLITECPP_RUN_CPPLINT=OFF ..\n@if ERRORLEVEL 1 goto onError\n\n@REM Build default configuration (ie 'Debug')\ncmake --build .\n@if ERRORLEVEL 1 goto onError\n\n@REM Build and run tests\nctest --output-on-failure\n@if ERRORLEVEL 1 goto onError\n\n@goto onSuccess\n\n:onError\n@echo An error occured!\n:onSuccess\n@cd ..\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 0.8759765625,
          "content": "#!/bin/sh\n# Copyright (c) 2012-2024 Sébastien Rombauts (sebastien.rombauts@gmail.com)\n#\n# Distributed under the MIT License (MIT) (See accompanying file LICENSE.txt\n# or copy at http://opensource.org/licenses/MIT)\n\n# exit on first error\nset -e\n\nmkdir -p build\ncd build\n\n# Generate a Makefile for GCC (or Clang, depending on CC/CXX envvar)\ncmake -DCMAKE_BUILD_TYPE=Debug -DSQLITECPP_USE_ASAN=ON -DSQLITECPP_USE_GCOV=OFF -DBUILD_SHARED_LIBS=ON -DSQLITECPP_BUILD_TESTS=ON -DSQLITECPP_BUILD_EXAMPLES=ON ..\n\n# Build (ie 'make')\ncmake --build .\n\n# Build and run unit-tests (ie 'make test')\nctest --output-on-failure\n\n# And with Valgrind\necho \"Note: uncomment to run valgrind memcheck\"\n#valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --error-exitcode=1 ./SQLiteCpp_example1\n#valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --error-exitcode=1 ./SQLiteCpp_tests\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "cpplint.py",
          "type": "blob",
          "size": 180.736328125,
          "content": "#!/usr/bin/python\n#\n# Copyright (c) 2009 Google Inc. All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are\n# met:\n#\n#    * Redistributions of source code must retain the above copyright\n# notice, this list of conditions and the following disclaimer.\n#    * Redistributions in binary form must reproduce the above\n# copyright notice, this list of conditions and the following disclaimer\n# in the documentation and/or other materials provided with the\n# distribution.\n#    * Neither the name of Google Inc. nor the names of its\n# contributors may be used to endorse or promote products derived from\n# this software without specific prior written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\"\"\"Does google-lint on c++ files.\n\nThe goal of this script is to identify places in the code that *may*\nbe in non-compliance with google style.  It does not attempt to fix\nup these problems -- the point is to educate.  It does also not\nattempt to find all problems, or to ensure that everything it does\nfind is legitimately a problem.\n\nIn particular, we can get very confused by /* and // inside strings!\nWe do a small hack, which is to ignore //'s with \"'s after them on the\nsame line, but it is far from perfect (in either direction).\n\"\"\"\n\nimport codecs\nimport copy\nimport getopt\nimport math  # for log\nimport os\nimport re\nimport sre_compile\nimport string\nimport sys\nimport unicodedata\n\n\ntry:\n    xrange(0,1)\n    PY3 = False\nexcept NameError:\n    PY3 = True      # Python 3\n    xrange = range\n    unicode = str\n\n\n_USAGE = \"\"\"\nSyntax: cpplint.py [--verbose=#] [--output=vs7] [--filter=-x,+y,...]\n                   [--counting=total|toplevel|detailed] [--root=subdir]\n                   [--linelength=digits]\n        <file> [file] ...\n\n  The style guidelines this tries to follow are those in\n    http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml\n\n  Every problem is given a confidence score from 1-5, with 5 meaning we are\n  certain of the problem, and 1 meaning it could be a legitimate construct.\n  This will miss some errors, and is not a substitute for a code review.\n\n  To suppress false-positive errors of a certain category, add a\n  'NOLINT(category)' comment to the line.  NOLINT or NOLINT(*)\n  suppresses errors of all categories on that line.\n\n  The files passed in will be linted; at least one file must be provided.\n  Linted extensions are .cc, .cpp, and .h.  Other file types will be ignored.\n\n  Flags:\n\n    output=vs7\n      By default, the output is formatted to ease emacs parsing.  Visual Studio\n      compatible output (vs7) may also be used.  Other formats are unsupported.\n\n    verbose=#\n      Specify a number 0-5 to restrict errors to certain verbosity levels.\n\n    filter=-x,+y,...\n      Specify a comma-separated list of category-filters to apply: only\n      error messages whose category names pass the filters will be printed.\n      (Category names are printed with the message and look like\n      \"[whitespace/indent]\".)  Filters are evaluated left to right.\n      \"-FOO\" and \"FOO\" means \"do not print categories that start with FOO\".\n      \"+FOO\" means \"do print categories that start with FOO\".\n\n      Examples: --filter=-whitespace,+whitespace/braces\n                --filter=whitespace,runtime/printf,+runtime/printf_format\n                --filter=-,+build/include_what_you_use\n\n      To see a list of all the categories used in cpplint, pass no arg:\n         --filter=\n\n    counting=total|toplevel|detailed\n      The total number of errors found is always printed. If\n      'toplevel' is provided, then the count of errors in each of\n      the top-level categories like 'build' and 'whitespace' will\n      also be printed. If 'detailed' is provided, then a count\n      is provided for each category like 'build/class'.\n\n    root=subdir\n      The root directory used for deriving header guard CPP variable.\n      By default, the header guard CPP variable is calculated as the relative\n      path to the directory that contains .git, .hg, or .svn.  When this flag\n      is specified, the relative path is calculated from the specified\n      directory. If the specified directory does not exist, this flag is\n      ignored.\n\n      Examples:\n        Assuing that src/.git exists, the header guard CPP variables for\n        src/chrome/browser/ui/browser.h are:\n\n        No flag => CHROME_BROWSER_UI_BROWSER_H_\n        --root=chrome => BROWSER_UI_BROWSER_H_\n        --root=chrome/browser => UI_BROWSER_H_\n\n    linelength=digits\n      This is the allowed line length for the project. The default value is\n      80 characters.\n\n      Examples:\n        --linelength=120\n\"\"\"\n\n# We categorize each error message we print.  Here are the categories.\n# We want an explicit list so we can list them all in cpplint --filter=.\n# If you add a new error message with a new category, add it to the list\n# here!  cpplint_unittest.py should tell you if you forget to do this.\n_ERROR_CATEGORIES = [\n  'build/class',\n  'build/deprecated',\n  'build/endif_comment',\n  'build/explicit_make_pair',\n  'build/forward_decl',\n  'build/header_guard',\n  'build/include',\n  'build/include_alpha',\n  'build/include_order',\n  'build/include_what_you_use',\n  'build/namespaces',\n  'build/printf_format',\n  'build/storage_class',\n  'legal/copyright',\n  'readability/filename',\n  'readability/alt_tokens',\n  'readability/braces',\n  'readability/casting',\n  'readability/check',\n  'readability/constructors',\n  'readability/fn_size',\n  'readability/function',\n  'readability/multiline_comment',\n  'readability/multiline_string',\n  'readability/namespace',\n  'readability/nolint',\n  'readability/nul',\n  'readability/streams',\n  'readability/todo',\n  'readability/utf8',\n  'runtime/arrays',\n  'runtime/casting',\n  'runtime/explicit',\n  'runtime/int',\n  'runtime/init',\n  'runtime/preincrement',\n  'runtime/invalid_increment',\n  'runtime/member_string_references',\n  'runtime/memset',\n  'runtime/operator',\n  'runtime/printf',\n  'runtime/printf_format',\n  'runtime/references',\n  'runtime/string',\n  'runtime/threadsafe_fn',\n  'runtime/vlog',\n  'whitespace/blank_line',\n  'whitespace/braces',\n  'whitespace/comma',\n  'whitespace/comments',\n  'whitespace/empty_conditional_body',\n  'whitespace/empty_loop_body',\n  'whitespace/end_of_line',\n  'whitespace/ending_newline',\n  'whitespace/forcolon',\n  'whitespace/indent',\n  'whitespace/line_length',\n  'whitespace/newline',\n  'whitespace/operators',\n  'whitespace/parens',\n  'whitespace/semicolon',\n  'whitespace/tab',\n  'whitespace/todo'\n  ]\n\n# The default state of the category filter. This is overrided by the --filter=\n# flag. By default all errors are on, so only add here categories that should be\n# off by default (i.e., categories that must be enabled by the --filter= flags).\n# All entries here should start with a '-' or '+', as in the --filter= flag.\n_DEFAULT_FILTERS = ['-build/include_alpha']\n\n# We used to check for high-bit characters, but after much discussion we\n# decided those were OK, as long as they were in UTF-8 and didn't represent\n# hard-coded international strings, which belong in a separate i18n file.\n\n\n# C++ headers\n_CPP_HEADERS = frozenset([\n    # Legacy\n    'algobase.h',\n    'algo.h',\n    'alloc.h',\n    'builtinbuf.h',\n    'bvector.h',\n    'complex.h',\n    'defalloc.h',\n    'deque.h',\n    'editbuf.h',\n    'fstream.h',\n    'function.h',\n    'hash_map',\n    'hash_map.h',\n    'hash_set',\n    'hash_set.h',\n    'hashtable.h',\n    'heap.h',\n    'indstream.h',\n    'iomanip.h',\n    'iostream.h',\n    'istream.h',\n    'iterator.h',\n    'list.h',\n    'map.h',\n    'multimap.h',\n    'multiset.h',\n    'ostream.h',\n    'pair.h',\n    'parsestream.h',\n    'pfstream.h',\n    'procbuf.h',\n    'pthread_alloc',\n    'pthread_alloc.h',\n    'rope',\n    'rope.h',\n    'ropeimpl.h',\n    'set.h',\n    'slist',\n    'slist.h',\n    'stack.h',\n    'stdiostream.h',\n    'stl_alloc.h',\n    'stl_relops.h',\n    'streambuf.h',\n    'stream.h',\n    'strfile.h',\n    'strstream.h',\n    'tempbuf.h',\n    'tree.h',\n    'type_traits.h',\n    'vector.h',\n    # 17.6.1.2 C++ library headers\n    'algorithm',\n    'array',\n    'atomic',\n    'bitset',\n    'chrono',\n    'codecvt',\n    'complex',\n    'condition_variable',\n    'deque',\n    'exception',\n    'forward_list',\n    'fstream',\n    'functional',\n    'future',\n    'initializer_list',\n    'iomanip',\n    'ios',\n    'iosfwd',\n    'iostream',\n    'istream',\n    'iterator',\n    'limits',\n    'list',\n    'locale',\n    'map',\n    'memory',\n    'mutex',\n    'new',\n    'numeric',\n    'ostream',\n    'queue',\n    'random',\n    'ratio',\n    'regex',\n    'set',\n    'sstream',\n    'stack',\n    'stdexcept',\n    'streambuf',\n    'string',\n    'strstream',\n    'system_error',\n    'thread',\n    'tuple',\n    'typeindex',\n    'typeinfo',\n    'type_traits',\n    'unordered_map',\n    'unordered_set',\n    'utility',\n    'valarray',\n    'vector',\n    # 17.6.1.2 C++ headers for C library facilities\n    'cassert',\n    'ccomplex',\n    'cctype',\n    'cerrno',\n    'cfenv',\n    'cfloat',\n    'cinttypes',\n    'ciso646',\n    'climits',\n    'clocale',\n    'cmath',\n    'csetjmp',\n    'csignal',\n    'cstdalign',\n    'cstdarg',\n    'cstdbool',\n    'cstddef',\n    'cstdint',\n    'cstdio',\n    'cstdlib',\n    'cstring',\n    'ctgmath',\n    'ctime',\n    'cuchar',\n    'cwchar',\n    'cwctype',\n    ])\n\n# Assertion macros.  These are defined in base/logging.h and\n# testing/base/gunit.h.  Note that the _M versions need to come first\n# for substring matching to work.\n_CHECK_MACROS = [\n    'DCHECK', 'CHECK',\n    'EXPECT_TRUE_M', 'EXPECT_TRUE',\n    'ASSERT_TRUE_M', 'ASSERT_TRUE',\n    'EXPECT_FALSE_M', 'EXPECT_FALSE',\n    'ASSERT_FALSE_M', 'ASSERT_FALSE',\n    ]\n\n# Replacement macros for CHECK/DCHECK/EXPECT_TRUE/EXPECT_FALSE\n_CHECK_REPLACEMENT = dict([(m, {}) for m in _CHECK_MACROS])\n\nfor op, replacement in [('==', 'EQ'), ('!=', 'NE'),\n                        ('>=', 'GE'), ('>', 'GT'),\n                        ('<=', 'LE'), ('<', 'LT')]:\n  _CHECK_REPLACEMENT['DCHECK'][op] = 'DCHECK_%s' % replacement\n  _CHECK_REPLACEMENT['CHECK'][op] = 'CHECK_%s' % replacement\n  _CHECK_REPLACEMENT['EXPECT_TRUE'][op] = 'EXPECT_%s' % replacement\n  _CHECK_REPLACEMENT['ASSERT_TRUE'][op] = 'ASSERT_%s' % replacement\n  _CHECK_REPLACEMENT['EXPECT_TRUE_M'][op] = 'EXPECT_%s_M' % replacement\n  _CHECK_REPLACEMENT['ASSERT_TRUE_M'][op] = 'ASSERT_%s_M' % replacement\n\nfor op, inv_replacement in [('==', 'NE'), ('!=', 'EQ'),\n                            ('>=', 'LT'), ('>', 'LE'),\n                            ('<=', 'GT'), ('<', 'GE')]:\n  _CHECK_REPLACEMENT['EXPECT_FALSE'][op] = 'EXPECT_%s' % inv_replacement\n  _CHECK_REPLACEMENT['ASSERT_FALSE'][op] = 'ASSERT_%s' % inv_replacement\n  _CHECK_REPLACEMENT['EXPECT_FALSE_M'][op] = 'EXPECT_%s_M' % inv_replacement\n  _CHECK_REPLACEMENT['ASSERT_FALSE_M'][op] = 'ASSERT_%s_M' % inv_replacement\n\n# Alternative tokens and their replacements.  For full list, see section 2.5\n# Alternative tokens [lex.digraph] in the C++ standard.\n#\n# Digraphs (such as '%:') are not included here since it's a mess to\n# match those on a word boundary.\n_ALT_TOKEN_REPLACEMENT = {\n    'and': '&&',\n    'bitor': '|',\n    'or': '||',\n    'xor': '^',\n    'compl': '~',\n    'bitand': '&',\n    'and_eq': '&=',\n    'or_eq': '|=',\n    'xor_eq': '^=',\n    'not': '!',\n    'not_eq': '!='\n    }\n\n# Compile regular expression that matches all the above keywords.  The \"[ =()]\"\n# bit is meant to avoid matching these keywords outside of boolean expressions.\n#\n# False positives include C-style multi-line comments and multi-line strings\n# but those have always been troublesome for cpplint.\n_ALT_TOKEN_REPLACEMENT_PATTERN = re.compile(\n    r'[ =()](' + ('|'.join(_ALT_TOKEN_REPLACEMENT.keys())) + r')(?=[ (]|$)')\n\n\n# These constants define types of headers for use with\n# _IncludeState.CheckNextIncludeOrder().\n_C_SYS_HEADER = 1\n_CPP_SYS_HEADER = 2\n_LIKELY_MY_HEADER = 3\n_POSSIBLE_MY_HEADER = 4\n_OTHER_HEADER = 5\n\n# These constants define the current inline assembly state\n_NO_ASM = 0       # Outside of inline assembly block\n_INSIDE_ASM = 1   # Inside inline assembly block\n_END_ASM = 2      # Last line of inline assembly block\n_BLOCK_ASM = 3    # The whole block is an inline assembly block\n\n# Match start of assembly blocks\n_MATCH_ASM = re.compile(r'^\\s*(?:asm|_asm|__asm|__asm__)'\n                        r'(?:\\s+(volatile|__volatile__))?'\n                        r'\\s*[{(]')\n\n\n_regexp_compile_cache = {}\n\n# Finds occurrences of NOLINT or NOLINT(...).\n_RE_SUPPRESSION = re.compile(r'\\bNOLINT\\b(\\([^)]*\\))?')\n\n# {str, set(int)}: a map from error categories to sets of linenumbers\n# on which those errors are expected and should be suppressed.\n_error_suppressions = {}\n\n# The root directory used for deriving header guard CPP variable.\n# This is set by --root flag.\n_root = None\n\n# The allowed line length of files.\n# This is set by --linelength flag.\n_line_length = 80\n\ndef ParseNolintSuppressions(filename, raw_line, linenum, error):\n  \"\"\"Updates the global list of error-suppressions.\n\n  Parses any NOLINT comments on the current line, updating the global\n  error_suppressions store.  Reports an error if the NOLINT comment\n  was malformed.\n\n  Args:\n    filename: str, the name of the input file.\n    raw_line: str, the line of input text, with comments.\n    linenum: int, the number of the current line.\n    error: function, an error handler.\n  \"\"\"\n  # FIXME(adonovan): \"NOLINT(\" is misparsed as NOLINT(*).\n  matched = _RE_SUPPRESSION.search(raw_line)\n  if matched:\n    category = matched.group(1)\n    if category in (None, '(*)'):  # => \"suppress all\"\n      _error_suppressions.setdefault(None, set()).add(linenum)\n    else:\n      if category.startswith('(') and category.endswith(')'):\n        category = category[1:-1]\n        if category in _ERROR_CATEGORIES:\n          _error_suppressions.setdefault(category, set()).add(linenum)\n        else:\n          error(filename, linenum, 'readability/nolint', 5,\n                'Unknown NOLINT error category: %s' % category)\n\n\ndef ResetNolintSuppressions():\n  \"Resets the set of NOLINT suppressions to empty.\"\n  _error_suppressions.clear()\n\n\ndef IsErrorSuppressedByNolint(category, linenum):\n  \"\"\"Returns true if the specified error category is suppressed on this line.\n\n  Consults the global error_suppressions map populated by\n  ParseNolintSuppressions/ResetNolintSuppressions.\n\n  Args:\n    category: str, the category of the error.\n    linenum: int, the current line number.\n  Returns:\n    bool, True iff the error should be suppressed due to a NOLINT comment.\n  \"\"\"\n  return (linenum in _error_suppressions.get(category, set()) or\n          linenum in _error_suppressions.get(None, set()))\n\ndef Match(pattern, s):\n  \"\"\"Matches the string with the pattern, caching the compiled regexp.\"\"\"\n  # The regexp compilation caching is inlined in both Match and Search for\n  # performance reasons; factoring it out into a separate function turns out\n  # to be noticeably expensive.\n  if pattern not in _regexp_compile_cache:\n    _regexp_compile_cache[pattern] = sre_compile.compile(pattern)\n  return _regexp_compile_cache[pattern].match(s)\n\n\ndef ReplaceAll(pattern, rep, s):\n  \"\"\"Replaces instances of pattern in a string with a replacement.\n\n  The compiled regex is kept in a cache shared by Match and Search.\n\n  Args:\n    pattern: regex pattern\n    rep: replacement text\n    s: search string\n\n  Returns:\n    string with replacements made (or original string if no replacements)\n  \"\"\"\n  if pattern not in _regexp_compile_cache:\n    _regexp_compile_cache[pattern] = sre_compile.compile(pattern)\n  return _regexp_compile_cache[pattern].sub(rep, s)\n\n\ndef Search(pattern, s):\n  \"\"\"Searches the string for the pattern, caching the compiled regexp.\"\"\"\n  if pattern not in _regexp_compile_cache:\n    _regexp_compile_cache[pattern] = sre_compile.compile(pattern)\n  return _regexp_compile_cache[pattern].search(s)\n\n\nclass _IncludeState(dict):\n  \"\"\"Tracks line numbers for includes, and the order in which includes appear.\n\n  As a dict, an _IncludeState object serves as a mapping between include\n  filename and line number on which that file was included.\n\n  Call CheckNextIncludeOrder() once for each header in the file, passing\n  in the type constants defined above. Calls in an illegal order will\n  raise an _IncludeError with an appropriate error message.\n\n  \"\"\"\n  # self._section will move monotonically through this set. If it ever\n  # needs to move backwards, CheckNextIncludeOrder will raise an error.\n  _INITIAL_SECTION = 0\n  _MY_H_SECTION = 1\n  _C_SECTION = 2\n  _CPP_SECTION = 3\n  _OTHER_H_SECTION = 4\n\n  _TYPE_NAMES = {\n      _C_SYS_HEADER: 'C system header',\n      _CPP_SYS_HEADER: 'C++ system header',\n      _LIKELY_MY_HEADER: 'header this file implements',\n      _POSSIBLE_MY_HEADER: 'header this file may implement',\n      _OTHER_HEADER: 'other header',\n      }\n  _SECTION_NAMES = {\n      _INITIAL_SECTION: \"... nothing. (This can't be an error.)\",\n      _MY_H_SECTION: 'a header this file implements',\n      _C_SECTION: 'C system header',\n      _CPP_SECTION: 'C++ system header',\n      _OTHER_H_SECTION: 'other header',\n      }\n\n  def __init__(self):\n    dict.__init__(self)\n    self.ResetSection()\n\n  def ResetSection(self):\n    # The name of the current section.\n    self._section = self._INITIAL_SECTION\n    # The path of last found header.\n    self._last_header = ''\n\n  def SetLastHeader(self, header_path):\n    self._last_header = header_path\n\n  def CanonicalizeAlphabeticalOrder(self, header_path):\n    \"\"\"Returns a path canonicalized for alphabetical comparison.\n\n    - replaces \"-\" with \"_\" so they both cmp the same.\n    - removes '-inl' since we don't require them to be after the main header.\n    - lowercase everything, just in case.\n\n    Args:\n      header_path: Path to be canonicalized.\n\n    Returns:\n      Canonicalized path.\n    \"\"\"\n    return header_path.replace('-inl.h', '.h').replace('-', '_').lower()\n\n  def IsInAlphabeticalOrder(self, clean_lines, linenum, header_path):\n    \"\"\"Check if a header is in alphabetical order with the previous header.\n\n    Args:\n      clean_lines: A CleansedLines instance containing the file.\n      linenum: The number of the line to check.\n      header_path: Canonicalized header to be checked.\n\n    Returns:\n      Returns true if the header is in alphabetical order.\n    \"\"\"\n    # If previous section is different from current section, _last_header will\n    # be reset to empty string, so it's always less than current header.\n    #\n    # If previous line was a blank line, assume that the headers are\n    # intentionally sorted the way they are.\n    if (self._last_header > header_path and\n        not Match(r'^\\s*$', clean_lines.elided[linenum - 1])):\n      return False\n    return True\n\n  def CheckNextIncludeOrder(self, header_type):\n    \"\"\"Returns a non-empty error message if the next header is out of order.\n\n    This function also updates the internal state to be ready to check\n    the next include.\n\n    Args:\n      header_type: One of the _XXX_HEADER constants defined above.\n\n    Returns:\n      The empty string if the header is in the right order, or an\n      error message describing what's wrong.\n\n    \"\"\"\n    error_message = ('Found %s after %s' %\n                     (self._TYPE_NAMES[header_type],\n                      self._SECTION_NAMES[self._section]))\n\n    last_section = self._section\n\n    if header_type == _C_SYS_HEADER:\n      if self._section <= self._C_SECTION:\n        self._section = self._C_SECTION\n      else:\n        self._last_header = ''\n        return error_message\n    elif header_type == _CPP_SYS_HEADER:\n      if self._section <= self._CPP_SECTION:\n        self._section = self._CPP_SECTION\n      else:\n        self._last_header = ''\n        return error_message\n    elif header_type == _LIKELY_MY_HEADER:\n      if self._section <= self._MY_H_SECTION:\n        self._section = self._MY_H_SECTION\n      else:\n        self._section = self._OTHER_H_SECTION\n    elif header_type == _POSSIBLE_MY_HEADER:\n      if self._section <= self._MY_H_SECTION:\n        self._section = self._MY_H_SECTION\n      else:\n        # This will always be the fallback because we're not sure\n        # enough that the header is associated with this file.\n        self._section = self._OTHER_H_SECTION\n    else:\n      assert header_type == _OTHER_HEADER\n      self._section = self._OTHER_H_SECTION\n\n    if last_section != self._section:\n      self._last_header = ''\n\n    return ''\n\n\nclass _CppLintState(object):\n  \"\"\"Maintains module-wide state..\"\"\"\n\n  def __init__(self):\n    self.verbose_level = 1  # global setting.\n    self.error_count = 0    # global count of reported errors\n    # filters to apply when emitting error messages\n    self.filters = _DEFAULT_FILTERS[:]\n    self.counting = 'total'  # In what way are we counting errors?\n    self.errors_by_category = {}  # string to int dict storing error counts\n\n    # output format:\n    # \"emacs\" - format that emacs can parse (default)\n    # \"vs7\" - format that Microsoft Visual Studio 7 can parse\n    self.output_format = 'emacs'\n\n  def SetOutputFormat(self, output_format):\n    \"\"\"Sets the output format for errors.\"\"\"\n    self.output_format = output_format\n\n  def SetVerboseLevel(self, level):\n    \"\"\"Sets the module's verbosity, and returns the previous setting.\"\"\"\n    last_verbose_level = self.verbose_level\n    self.verbose_level = level\n    return last_verbose_level\n\n  def SetCountingStyle(self, counting_style):\n    \"\"\"Sets the module's counting options.\"\"\"\n    self.counting = counting_style\n\n  def SetFilters(self, filters):\n    \"\"\"Sets the error-message filters.\n\n    These filters are applied when deciding whether to emit a given\n    error message.\n\n    Args:\n      filters: A string of comma-separated filters (eg \"+whitespace/indent\").\n               Each filter should start with + or -; else we die.\n\n    Raises:\n      ValueError: The comma-separated filters did not all start with '+' or '-'.\n                  E.g. \"-,+whitespace,-whitespace/indent,whitespace/badfilter\"\n    \"\"\"\n    # Default filters always have less priority than the flag ones.\n    self.filters = _DEFAULT_FILTERS[:]\n    for filt in filters.split(','):\n      clean_filt = filt.strip()\n      if clean_filt:\n        self.filters.append(clean_filt)\n    for filt in self.filters:\n      if not (filt.startswith('+') or filt.startswith('-')):\n        raise ValueError('Every filter in --filters must start with + or -'\n                         ' (%s does not)' % filt)\n\n  def ResetErrorCounts(self):\n    \"\"\"Sets the module's error statistic back to zero.\"\"\"\n    self.error_count = 0\n    self.errors_by_category = {}\n\n  def IncrementErrorCount(self, category):\n    \"\"\"Bumps the module's error statistic.\"\"\"\n    self.error_count += 1\n    if self.counting in ('toplevel', 'detailed'):\n      if self.counting != 'detailed':\n        category = category.split('/')[0]\n      if category not in self.errors_by_category:\n        self.errors_by_category[category] = 0\n      self.errors_by_category[category] += 1\n\n  def PrintErrorCounts(self):\n    \"\"\"Print a summary of errors by category, and the total.\"\"\"\n    # SRombauts: \"cpplint:\" prefix\n    for category, count in self.errors_by_category.items():\n      sys.stderr.write('cpplint: Category \\'%s\\' errors found: %d\\n' %\n                       (category, count))\n    # SRombauts: \"cpplint:\" prefix and error message only when appropriate\n    if 0 < self.error_count:\n      sys.stderr.write('cpplint: Total errors found: %d\\n' % self.error_count)\n\n_cpplint_state = _CppLintState()\n\n\ndef _OutputFormat():\n  \"\"\"Gets the module's output format.\"\"\"\n  return _cpplint_state.output_format\n\n\ndef _SetOutputFormat(output_format):\n  \"\"\"Sets the module's output format.\"\"\"\n  _cpplint_state.SetOutputFormat(output_format)\n\n\ndef _VerboseLevel():\n  \"\"\"Returns the module's verbosity setting.\"\"\"\n  return _cpplint_state.verbose_level\n\n\ndef _SetVerboseLevel(level):\n  \"\"\"Sets the module's verbosity, and returns the previous setting.\"\"\"\n  return _cpplint_state.SetVerboseLevel(level)\n\n\ndef _SetCountingStyle(level):\n  \"\"\"Sets the module's counting options.\"\"\"\n  _cpplint_state.SetCountingStyle(level)\n\n\ndef _Filters():\n  \"\"\"Returns the module's list of output filters, as a list.\"\"\"\n  return _cpplint_state.filters\n\n\ndef _SetFilters(filters):\n  \"\"\"Sets the module's error-message filters.\n\n  These filters are applied when deciding whether to emit a given\n  error message.\n\n  Args:\n    filters: A string of comma-separated filters (eg \"whitespace/indent\").\n             Each filter should start with + or -; else we die.\n  \"\"\"\n  _cpplint_state.SetFilters(filters)\n\n\nclass _FunctionState(object):\n  \"\"\"Tracks current function name and the number of lines in its body.\"\"\"\n\n  _NORMAL_TRIGGER = 250  # for --v=0, 500 for --v=1, etc.\n  _TEST_TRIGGER = 400    # about 50% more than _NORMAL_TRIGGER.\n\n  def __init__(self):\n    self.in_a_function = False\n    self.lines_in_function = 0\n    self.current_function = ''\n\n  def Begin(self, function_name):\n    \"\"\"Start analyzing function body.\n\n    Args:\n      function_name: The name of the function being tracked.\n    \"\"\"\n    self.in_a_function = True\n    self.lines_in_function = 0\n    self.current_function = function_name\n\n  def Count(self):\n    \"\"\"Count line in current function body.\"\"\"\n    if self.in_a_function:\n      self.lines_in_function += 1\n\n  def Check(self, error, filename, linenum):\n    \"\"\"Report if too many lines in function body.\n\n    Args:\n      error: The function to call with any errors found.\n      filename: The name of the current file.\n      linenum: The number of the line to check.\n    \"\"\"\n    if Match(r'T(EST|est)', self.current_function):\n      base_trigger = self._TEST_TRIGGER\n    else:\n      base_trigger = self._NORMAL_TRIGGER\n    trigger = base_trigger * 2**_VerboseLevel()\n\n    if self.lines_in_function > trigger:\n      error_level = int(math.log(self.lines_in_function / base_trigger, 2))\n      # 50 => 0, 100 => 1, 200 => 2, 400 => 3, 800 => 4, 1600 => 5, ...\n      if error_level > 5:\n        error_level = 5\n      error(filename, linenum, 'readability/fn_size', error_level,\n            'Small and focused functions are preferred:'\n            ' %s has %d non-comment lines'\n            ' (error triggered by exceeding %d lines).'  % (\n                self.current_function, self.lines_in_function, trigger))\n\n  def End(self):\n    \"\"\"Stop analyzing function body.\"\"\"\n    self.in_a_function = False\n\n\nclass _IncludeError(Exception):\n  \"\"\"Indicates a problem with the include order in a file.\"\"\"\n  pass\n\n\nclass FileInfo:\n  \"\"\"Provides utility functions for filenames.\n\n  FileInfo provides easy access to the components of a file's path\n  relative to the project root.\n  \"\"\"\n\n  def __init__(self, filename):\n    self._filename = filename\n\n  def FullName(self):\n    \"\"\"Make Windows paths like Unix.\"\"\"\n    return os.path.abspath(self._filename).replace('\\\\', '/')\n\n  def RepositoryName(self):\n    \"\"\"FullName after removing the local path to the repository.\n\n    If we have a real absolute path name here we can try to do something smart:\n    detecting the root of the checkout and truncating /path/to/checkout from\n    the name so that we get header guards that don't include things like\n    \"C:\\Documents and Settings\\...\" or \"/home/username/...\" in them and thus\n    people on different computers who have checked the source out to different\n    locations won't see bogus errors.\n    \"\"\"\n    fullname = self.FullName()\n\n    if os.path.exists(fullname):\n      project_dir = os.path.dirname(fullname)\n\n      if os.path.exists(os.path.join(project_dir, \".svn\")):\n        # If there's a .svn file in the current directory, we recursively look\n        # up the directory tree for the top of the SVN checkout\n        root_dir = project_dir\n        one_up_dir = os.path.dirname(root_dir)\n        while os.path.exists(os.path.join(one_up_dir, \".svn\")):\n          root_dir = os.path.dirname(root_dir)\n          one_up_dir = os.path.dirname(one_up_dir)\n\n        prefix = os.path.commonprefix([root_dir, project_dir])\n        return fullname[len(prefix) + 1:]\n\n      # Not SVN <= 1.6? Try to find a git, hg, or svn top level directory by\n      # searching up from the current path.\n      root_dir = os.path.dirname(fullname)\n      while (root_dir != os.path.dirname(root_dir) and\n             not os.path.exists(os.path.join(root_dir, \".git\")) and\n             not os.path.exists(os.path.join(root_dir, \".hg\")) and\n             not os.path.exists(os.path.join(root_dir, \".svn\"))):\n        root_dir = os.path.dirname(root_dir)\n\n      if (os.path.exists(os.path.join(root_dir, \".git\")) or\n          os.path.exists(os.path.join(root_dir, \".hg\")) or\n          os.path.exists(os.path.join(root_dir, \".svn\"))):\n        prefix = os.path.commonprefix([root_dir, project_dir])\n        return fullname[len(prefix) + 1:]\n\n    # Don't know what to do; header guard warnings may be wrong...\n    return fullname\n\n  def Split(self):\n    \"\"\"Splits the file into the directory, basename, and extension.\n\n    For 'chrome/browser/browser.cc', Split() would\n    return ('chrome/browser', 'browser', '.cc')\n\n    Returns:\n      A tuple of (directory, basename, extension).\n    \"\"\"\n\n    googlename = self.RepositoryName()\n    project, rest = os.path.split(googlename)\n    return (project,) + os.path.splitext(rest)\n\n  def BaseName(self):\n    \"\"\"File base name - text after the final slash, before the final period.\"\"\"\n    return self.Split()[1]\n\n  def Extension(self):\n    \"\"\"File extension - text following the final period.\"\"\"\n    return self.Split()[2]\n\n  def NoExtension(self):\n    \"\"\"File has no source file extension.\"\"\"\n    return '/'.join(self.Split()[0:2])\n\n  def IsSource(self):\n    \"\"\"File has a source file extension.\"\"\"\n    return self.Extension()[1:] in ('c', 'cc', 'cpp', 'cxx')\n\n\ndef _ShouldPrintError(category, confidence, linenum):\n  \"\"\"If confidence >= verbose, category passes filter and is not suppressed.\"\"\"\n\n  # There are three ways we might decide not to print an error message:\n  # a \"NOLINT(category)\" comment appears in the source,\n  # the verbosity level isn't high enough, or the filters filter it out.\n  if IsErrorSuppressedByNolint(category, linenum):\n    return False\n  if confidence < _cpplint_state.verbose_level:\n    return False\n\n  is_filtered = False\n  for one_filter in _Filters():\n    if one_filter.startswith('-'):\n      if category.startswith(one_filter[1:]):\n        is_filtered = True\n    elif one_filter.startswith('+'):\n      if category.startswith(one_filter[1:]):\n        is_filtered = False\n    else:\n      assert False  # should have been checked for in SetFilter.\n  if is_filtered:\n    return False\n\n  return True\n\n\ndef Error(filename, linenum, category, confidence, message):\n  \"\"\"Logs the fact we've found a lint error.\n\n  We log where the error was found, and also our confidence in the error,\n  that is, how certain we are this is a legitimate style regression, and\n  not a misidentification or a use that's sometimes justified.\n\n  False positives can be suppressed by the use of\n  \"cpplint(category)\"  comments on the offending line.  These are\n  parsed into _error_suppressions.\n\n  Args:\n    filename: The name of the file containing the error.\n    linenum: The number of the line containing the error.\n    category: A string used to describe the \"category\" this bug\n      falls under: \"whitespace\", say, or \"runtime\".  Categories\n      may have a hierarchy separated by slashes: \"whitespace/indent\".\n    confidence: A number from 1-5 representing a confidence score for\n      the error, with 5 meaning that we are certain of the problem,\n      and 1 meaning that it could be a legitimate construct.\n    message: The error message.\n  \"\"\"\n  if _ShouldPrintError(category, confidence, linenum):\n    _cpplint_state.IncrementErrorCount(category)\n    if _cpplint_state.output_format == 'vs7':\n      # SRombauts:\n      if confidence == 5:\n        sys.stderr.write('%s(%s): error: %s  [%s] [%d]\\n' % (\n           filename, linenum, message, category, confidence))\n      else: # confidence == [0-4]\n        sys.stderr.write('%s(%s): warning: %s  [%s] [%d]\\n' % (\n            filename, linenum, message, category, confidence))\n    elif _cpplint_state.output_format == 'eclipse':\n      # SRombauts:\n      if confidence == 5:\n        sys.stderr.write('%s:%s: error: %s  [%s] [%d]\\n' % (\n            filename, linenum, message, category, confidence))\n      elif confidence == 4:\n        sys.stderr.write('%s:%s: warning: %s  [%s] [%d]\\n' % (\n            filename, linenum, message, category, confidence))\n      else: # confidence == [0-3]\n        sys.stderr.write('%s:%s: note: %s  [%s] [%d]\\n' % (\n            filename, linenum, message, category, confidence))\n    else:\n      sys.stderr.write('%s:%s:  %s  [%s] [%d]\\n' % (\n          filename, linenum, message, category, confidence))\n\n\n# Matches standard C++ escape sequences per 2.13.2.3 of the C++ standard.\n_RE_PATTERN_CLEANSE_LINE_ESCAPES = re.compile(\n    r'\\\\([abfnrtv?\"\\\\\\']|\\d+|x[0-9a-fA-F]+)')\n# Matches strings.  Escape codes should already be removed by ESCAPES.\n_RE_PATTERN_CLEANSE_LINE_DOUBLE_QUOTES = re.compile(r'\"[^\"]*\"')\n# Matches characters.  Escape codes should already be removed by ESCAPES.\n_RE_PATTERN_CLEANSE_LINE_SINGLE_QUOTES = re.compile(r\"'.'\")\n# Matches multi-line C++ comments.\n# This RE is a little bit more complicated than one might expect, because we\n# have to take care of space removals tools so we can handle comments inside\n# statements better.\n# The current rule is: We only clear spaces from both sides when we're at the\n# end of the line. Otherwise, we try to remove spaces from the right side,\n# if this doesn't work we try on left side but only if there's a non-character\n# on the right.\n_RE_PATTERN_CLEANSE_LINE_C_COMMENTS = re.compile(\n    r\"\"\"(\\s*/\\*.*\\*/\\s*$|\n            /\\*.*\\*/\\s+|\n         \\s+/\\*.*\\*/(?=\\W)|\n            /\\*.*\\*/)\"\"\", re.VERBOSE)\n\n\ndef IsCppString(line):\n  \"\"\"Does line terminate so, that the next symbol is in string constant.\n\n  This function does not consider single-line nor multi-line comments.\n\n  Args:\n    line: is a partial line of code starting from the 0..n.\n\n  Returns:\n    True, if next character appended to 'line' is inside a\n    string constant.\n  \"\"\"\n\n  line = line.replace(r'\\\\', 'XX')  # after this, \\\\\" does not match to \\\"\n  return ((line.count('\"') - line.count(r'\\\"') - line.count(\"'\\\"'\")) & 1) == 1\n\n\ndef CleanseRawStrings(raw_lines):\n  \"\"\"Removes C++11 raw strings from lines.\n\n    Before:\n      static const char kData[] = R\"(\n          multi-line string\n          )\";\n\n    After:\n      static const char kData[] = \"\"\n          (replaced by blank line)\n          \"\";\n\n  Args:\n    raw_lines: list of raw lines.\n\n  Returns:\n    list of lines with C++11 raw strings replaced by empty strings.\n  \"\"\"\n\n  delimiter = None\n  lines_without_raw_strings = []\n  for line in raw_lines:\n    if delimiter:\n      # Inside a raw string, look for the end\n      end = line.find(delimiter)\n      if end >= 0:\n        # Found the end of the string, match leading space for this\n        # line and resume copying the original lines, and also insert\n        # a \"\" on the last line.\n        leading_space = Match(r'^(\\s*)\\S', line)\n        line = leading_space.group(1) + '\"\"' + line[end + len(delimiter):]\n        delimiter = None\n      else:\n        # Haven't found the end yet, append a blank line.\n        line = ''\n\n    else:\n      # Look for beginning of a raw string.\n      # See 2.14.15 [lex.string] for syntax.\n      matched = Match(r'^(.*)\\b(?:R|u8R|uR|UR|LR)\"([^\\s\\\\()]*)\\((.*)$', line)\n      if matched:\n        delimiter = ')' + matched.group(2) + '\"'\n\n        end = matched.group(3).find(delimiter)\n        if end >= 0:\n          # Raw string ended on same line\n          line = (matched.group(1) + '\"\"' +\n                  matched.group(3)[end + len(delimiter):])\n          delimiter = None\n        else:\n          # Start of a multi-line raw string\n          line = matched.group(1) + '\"\"'\n\n    lines_without_raw_strings.append(line)\n\n  # TODO(unknown): if delimiter is not None here, we might want to\n  # emit a warning for unterminated string.\n  return lines_without_raw_strings\n\n\ndef FindNextMultiLineCommentStart(lines, lineix):\n  \"\"\"Find the beginning marker for a multiline comment.\"\"\"\n  while lineix < len(lines):\n    if lines[lineix].strip().startswith('/*'):\n      # Only return this marker if the comment goes beyond this line\n      if lines[lineix].strip().find('*/', 2) < 0:\n        return lineix\n    lineix += 1\n  return len(lines)\n\n\ndef FindNextMultiLineCommentEnd(lines, lineix):\n  \"\"\"We are inside a comment, find the end marker.\"\"\"\n  while lineix < len(lines):\n    if lines[lineix].strip().endswith('*/'):\n      return lineix\n    lineix += 1\n  return len(lines)\n\n\ndef RemoveMultiLineCommentsFromRange(lines, begin, end):\n  \"\"\"Clears a range of lines for multi-line comments.\"\"\"\n  # Having // dummy comments makes the lines non-empty, so we will not get\n  # unnecessary blank line warnings later in the code.\n  for i in range(begin, end):\n    lines[i] = '// dummy'\n\n\ndef RemoveMultiLineComments(filename, lines, error):\n  \"\"\"Removes multiline (c-style) comments from lines.\"\"\"\n  lineix = 0\n  while lineix < len(lines):\n    lineix_begin = FindNextMultiLineCommentStart(lines, lineix)\n    if lineix_begin >= len(lines):\n      return\n    lineix_end = FindNextMultiLineCommentEnd(lines, lineix_begin)\n    if lineix_end >= len(lines):\n      error(filename, lineix_begin + 1, 'readability/multiline_comment', 5,\n            'Could not find end of multi-line comment')\n      return\n    RemoveMultiLineCommentsFromRange(lines, lineix_begin, lineix_end + 1)\n    lineix = lineix_end + 1\n\n\ndef CleanseComments(line):\n  \"\"\"Removes //-comments and single-line C-style /* */ comments.\n\n  Args:\n    line: A line of C++ source.\n\n  Returns:\n    The line with single-line comments removed.\n  \"\"\"\n  commentpos = line.find('//')\n  if commentpos != -1 and not IsCppString(line[:commentpos]):\n    line = line[:commentpos].rstrip()\n  # get rid of /* ... */\n  return _RE_PATTERN_CLEANSE_LINE_C_COMMENTS.sub('', line)\n\n\nclass CleansedLines(object):\n  \"\"\"Holds 3 copies of all lines with different preprocessing applied to them.\n\n  1) elided member contains lines without strings and comments,\n  2) lines member contains lines without comments, and\n  3) raw_lines member contains all the lines without processing.\n  All these three members are of <type 'list'>, and of the same length.\n  \"\"\"\n\n  def __init__(self, lines):\n    self.elided = []\n    self.lines = []\n    self.raw_lines = lines\n    self.num_lines = len(lines)\n    self.lines_without_raw_strings = CleanseRawStrings(lines)\n    for linenum in range(len(self.lines_without_raw_strings)):\n      self.lines.append(CleanseComments(\n          self.lines_without_raw_strings[linenum]))\n      elided = self._CollapseStrings(self.lines_without_raw_strings[linenum])\n      self.elided.append(CleanseComments(elided))\n\n  def NumLines(self):\n    \"\"\"Returns the number of lines represented.\"\"\"\n    return self.num_lines\n\n  @staticmethod\n  def _CollapseStrings(elided):\n    \"\"\"Collapses strings and chars on a line to simple \"\" or '' blocks.\n\n    We nix strings first so we're not fooled by text like '\"http://\"'\n\n    Args:\n      elided: The line being processed.\n\n    Returns:\n      The line with collapsed strings.\n    \"\"\"\n    if not _RE_PATTERN_INCLUDE.match(elided):\n      # Remove escaped characters first to make quote/single quote collapsing\n      # basic.  Things that look like escaped characters shouldn't occur\n      # outside of strings and chars.\n      elided = _RE_PATTERN_CLEANSE_LINE_ESCAPES.sub('', elided)\n      elided = _RE_PATTERN_CLEANSE_LINE_SINGLE_QUOTES.sub(\"''\", elided)\n      elided = _RE_PATTERN_CLEANSE_LINE_DOUBLE_QUOTES.sub('\"\"', elided)\n    return elided\n\n\ndef FindEndOfExpressionInLine(line, startpos, depth, startchar, endchar):\n  \"\"\"Find the position just after the matching endchar.\n\n  Args:\n    line: a CleansedLines line.\n    startpos: start searching at this position.\n    depth: nesting level at startpos.\n    startchar: expression opening character.\n    endchar: expression closing character.\n\n  Returns:\n    On finding matching endchar: (index just after matching endchar, 0)\n    Otherwise: (-1, new depth at end of this line)\n  \"\"\"\n  for i in xrange(startpos, len(line)):\n    if line[i] == startchar:\n      depth += 1\n    elif line[i] == endchar:\n      depth -= 1\n      if depth == 0:\n        return (i + 1, 0)\n  return (-1, depth)\n\n\ndef CloseExpression(clean_lines, linenum, pos):\n  \"\"\"If input points to ( or { or [ or <, finds the position that closes it.\n\n  If lines[linenum][pos] points to a '(' or '{' or '[' or '<', finds the\n  linenum/pos that correspond to the closing of the expression.\n\n  Args:\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    pos: A position on the line.\n\n  Returns:\n    A tuple (line, linenum, pos) pointer *past* the closing brace, or\n    (line, len(lines), -1) if we never find a close.  Note we ignore\n    strings and comments when matching; and the line we return is the\n    'cleansed' line at linenum.\n  \"\"\"\n\n  line = clean_lines.elided[linenum]\n  startchar = line[pos]\n  if startchar not in '({[<':\n    return (line, clean_lines.NumLines(), -1)\n  if startchar == '(': endchar = ')'\n  if startchar == '[': endchar = ']'\n  if startchar == '{': endchar = '}'\n  if startchar == '<': endchar = '>'\n\n  # Check first line\n  (end_pos, num_open) = FindEndOfExpressionInLine(\n      line, pos, 0, startchar, endchar)\n  if end_pos > -1:\n    return (line, linenum, end_pos)\n\n  # Continue scanning forward\n  while linenum < clean_lines.NumLines() - 1:\n    linenum += 1\n    line = clean_lines.elided[linenum]\n    (end_pos, num_open) = FindEndOfExpressionInLine(\n        line, 0, num_open, startchar, endchar)\n    if end_pos > -1:\n      return (line, linenum, end_pos)\n\n  # Did not find endchar before end of file, give up\n  return (line, clean_lines.NumLines(), -1)\n\n\ndef FindStartOfExpressionInLine(line, endpos, depth, startchar, endchar):\n  \"\"\"Find position at the matching startchar.\n\n  This is almost the reverse of FindEndOfExpressionInLine, but note\n  that the input position and returned position differs by 1.\n\n  Args:\n    line: a CleansedLines line.\n    endpos: start searching at this position.\n    depth: nesting level at endpos.\n    startchar: expression opening character.\n    endchar: expression closing character.\n\n  Returns:\n    On finding matching startchar: (index at matching startchar, 0)\n    Otherwise: (-1, new depth at beginning of this line)\n  \"\"\"\n  for i in xrange(endpos, -1, -1):\n    if line[i] == endchar:\n      depth += 1\n    elif line[i] == startchar:\n      depth -= 1\n      if depth == 0:\n        return (i, 0)\n  return (-1, depth)\n\n\ndef ReverseCloseExpression(clean_lines, linenum, pos):\n  \"\"\"If input points to ) or } or ] or >, finds the position that opens it.\n\n  If lines[linenum][pos] points to a ')' or '}' or ']' or '>', finds the\n  linenum/pos that correspond to the opening of the expression.\n\n  Args:\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    pos: A position on the line.\n\n  Returns:\n    A tuple (line, linenum, pos) pointer *at* the opening brace, or\n    (line, 0, -1) if we never find the matching opening brace.  Note\n    we ignore strings and comments when matching; and the line we\n    return is the 'cleansed' line at linenum.\n  \"\"\"\n  line = clean_lines.elided[linenum]\n  endchar = line[pos]\n  if endchar not in ')}]>':\n    return (line, 0, -1)\n  if endchar == ')': startchar = '('\n  if endchar == ']': startchar = '['\n  if endchar == '}': startchar = '{'\n  if endchar == '>': startchar = '<'\n\n  # Check last line\n  (start_pos, num_open) = FindStartOfExpressionInLine(\n      line, pos, 0, startchar, endchar)\n  if start_pos > -1:\n    return (line, linenum, start_pos)\n\n  # Continue scanning backward\n  while linenum > 0:\n    linenum -= 1\n    line = clean_lines.elided[linenum]\n    (start_pos, num_open) = FindStartOfExpressionInLine(\n        line, len(line) - 1, num_open, startchar, endchar)\n    if start_pos > -1:\n      return (line, linenum, start_pos)\n\n  # Did not find startchar before beginning of file, give up\n  return (line, 0, -1)\n\n\ndef CheckForCopyright(filename, lines, error):\n  \"\"\"Logs an error if no Copyright message appears at the top of the file.\"\"\"\n\n  # We'll say it should occur by line 10. Don't forget there's a\n  # dummy line at the front.\n  for line in xrange(1, min(len(lines), 11)):\n    if re.search(r'Copyright', lines[line], re.I): break\n  else:                       # means no copyright line was found\n    error(filename, 0, 'legal/copyright', 5,\n          'No copyright message found.  '\n          'You should have a line: \"Copyright [year] <Copyright Owner>\"')\n\n# SRombauts:\ndef CheckForFilename(filename, lines, error):\n  \"\"\"Logs an error if the Filename does not appear at the top of the file.\"\"\"\n\n  basename = os.path.basename(filename)\n\n  # We'll say it should occur by line 10.\n  for linenum in xrange(1, min(len(lines), 11)):\n    if Search(r'NOLINT\\(begin\\)', lines[linenum]):\n      return\n    match_file = Match(r'^.*@file\\s+(.*)$', lines[linenum])\n    if match_file:\n      filename_found = match_file.group(1)\n      if filename_found.endswith(basename):\n        break\n      else: \n        error(filename, linenum, 'readability/filename', 5,\n              'Doxygen header \"@file %s\" does not match \"%s\" real file name.' % (filename_found, basename) )\n        break\n  else: # means no @file tag was found\n    error(filename, 0, 'doxygen/filename', 5,\n          'Doxygen header \"@file %s\" not found.' % basename)\n\n\ndef GetHeaderGuardCPPVariable(filename):\n  \"\"\"Returns the CPP variable that should be used as a header guard.\n\n  Args:\n    filename: The name of a C++ header file.\n\n  Returns:\n    The CPP variable that should be used as a header guard in the\n    named file.\n\n  \"\"\"\n\n  # Restores original filename in case that cpplint is invoked from Emacs's\n  # flymake.\n  filename = re.sub(r'_flymake\\.h$', '.h', filename)\n  filename = re.sub(r'/\\.flymake/([^/]*)$', r'/\\1', filename)\n\n  fileinfo = FileInfo(filename)\n  file_path_from_root = fileinfo.RepositoryName()\n  if _root:\n    file_path_from_root = re.sub('^' + _root + os.sep, '', file_path_from_root)\n  return re.sub(r'[-./\\s]', '_', file_path_from_root).upper() + '_'\n\n\n# TODO(SRombauts) search instead for \"#pragma once\"\ndef CheckForHeaderGuard(filename, lines, error):\n  \"\"\"Checks that the file contains a header guard.\n\n  Logs an error if no #ifndef header guard is present.  For other\n  headers, checks that the full pathname is used.\n\n  Args:\n    filename: The name of the C++ header file.\n    lines: An array of strings, each representing a line of the file.\n    error: The function to call with any errors found.\n  \"\"\"\n\n  cppvar = GetHeaderGuardCPPVariable(filename)\n\n  ifndef = None\n  ifndef_linenum = 0\n  define = None\n  endif = None\n  endif_linenum = 0\n  for linenum, line in enumerate(lines):\n    linesplit = line.split()\n    if len(linesplit) >= 2:\n      # find the first occurrence of #ifndef and #define, save arg\n      if not ifndef and linesplit[0] == '#ifndef':\n        # set ifndef to the header guard presented on the #ifndef line.\n        ifndef = linesplit[1]\n        ifndef_linenum = linenum\n      if not define and linesplit[0] == '#define':\n        define = linesplit[1]\n    # find the last occurrence of #endif, save entire line\n    if line.startswith('#endif'):\n      endif = line\n      endif_linenum = linenum\n\n  if not ifndef:\n    error(filename, 0, 'build/header_guard', 2,\n          'No #ifndef header guard found, suggested CPP variable is: %s' %\n          cppvar)\n    return\n\n  if not define:\n    error(filename, 0, 'build/header_guard', 2,\n          'No #define header guard found, suggested CPP variable is: %s' %\n          cppvar)\n    return\n\n  # The guard should be PATH_FILE_H_, but we also allow PATH_FILE_H__\n  # for backward compatibility.\n  if ifndef != cppvar:\n    error_level = 0\n    if ifndef != cppvar + '_':\n      error_level = 2\n\n    ParseNolintSuppressions(filename, lines[ifndef_linenum], ifndef_linenum,\n                            error)\n    error(filename, ifndef_linenum, 'build/header_guard', error_level,\n          '#ifndef header guard has wrong style, please use: %s' % cppvar)\n\n  if define != ifndef:\n    error(filename, 0, 'build/header_guard', 2,\n          '#ifndef and #define don\\'t match, suggested CPP variable is: %s' %\n          cppvar)\n    return\n\n  if endif != ('#endif  // %s' % cppvar):\n    error_level = 0\n    if endif != ('#endif  // %s' % (cppvar + '_')):\n      error_level = 2\n\n    ParseNolintSuppressions(filename, lines[endif_linenum], endif_linenum,\n                            error)\n    error(filename, endif_linenum, 'build/header_guard', error_level,\n          '#endif line should be \"#endif  // %s\"' % cppvar)\n\n\ndef CheckForBadCharacters(filename, lines, error):\n  \"\"\"Logs an error for each line containing bad characters.\n\n  Two kinds of bad characters:\n\n  1. Unicode replacement characters: These indicate that either the file\n  contained invalid UTF-8 (likely) or Unicode replacement characters (which\n  it shouldn't).  Note that it's possible for this to throw off line\n  numbering if the invalid UTF-8 occurred adjacent to a newline.\n\n  2. NUL bytes.  These are problematic for some tools.\n\n  Args:\n    filename: The name of the current file.\n    lines: An array of strings, each representing a line of the file.\n    error: The function to call with any errors found.\n  \"\"\"\n  for linenum, line in enumerate(lines):\n    if u'\\ufffd' in line:\n      error(filename, linenum, 'readability/utf8', 5,\n            'Line contains invalid UTF-8 (or Unicode replacement character).')\n    if '\\0' in line:\n      error(filename, linenum, 'readability/nul', 5, 'Line contains NUL byte.')\n\n\ndef CheckForNewlineAtEOF(filename, lines, error):\n  \"\"\"Logs an error if there is no newline char at the end of the file.\n\n  Args:\n    filename: The name of the current file.\n    lines: An array of strings, each representing a line of the file.\n    error: The function to call with any errors found.\n  \"\"\"\n\n  # The array lines() was created by adding two newlines to the\n  # original file (go figure), then splitting on \\n.\n  # To verify that the file ends in \\n, we just have to make sure the\n  # last-but-two element of lines() exists and is empty.\n  if len(lines) < 3 or lines[-2]:\n    error(filename, len(lines) - 2, 'whitespace/ending_newline', 5,\n          'Could not find a newline character at the end of the file.')\n\n\ndef CheckForMultilineCommentsAndStrings(filename, clean_lines, linenum, error):\n  \"\"\"Logs an error if we see /* ... */ or \"...\" that extend past one line.\n\n  /* ... */ comments are legit inside macros, for one line.\n  Otherwise, we prefer // comments, so it's ok to warn about the\n  other.  Likewise, it's ok for strings to extend across multiple\n  lines, as long as a line continuation character (backslash)\n  terminates each line. Although not currently prohibited by the C++\n  style guide, it's ugly and unnecessary. We don't do well with either\n  in this lint program, so we warn about both.\n\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n  line = clean_lines.elided[linenum]\n\n  # Remove all \\\\ (escaped backslashes) from the line. They are OK, and the\n  # second (escaped) slash may trigger later \\\" detection erroneously.\n  line = line.replace('\\\\\\\\', '')\n\n  if line.count('/*') > line.count('*/'):\n    error(filename, linenum, 'readability/multiline_comment', 5,\n          'Complex multi-line /*...*/-style comment found. '\n          'Lint may give bogus warnings.  '\n          'Consider replacing these with //-style comments, '\n          'with #if 0...#endif, '\n          'or with more clearly structured multi-line comments.')\n\n  if (line.count('\"') - line.count('\\\\\"')) % 2:\n    error(filename, linenum, 'readability/multiline_string', 5,\n          'Multi-line string (\"...\") found.  This lint script doesn\\'t '\n          'do well with such strings, and may give bogus warnings.  '\n          'Use C++11 raw strings or concatenation instead.')\n\n\nthreading_list = (\n    ('asctime(', 'asctime_r('),\n    ('ctime(', 'ctime_r('),\n    ('getgrgid(', 'getgrgid_r('),\n    ('getgrnam(', 'getgrnam_r('),\n    ('getlogin(', 'getlogin_r('),\n    ('getpwnam(', 'getpwnam_r('),\n    ('getpwuid(', 'getpwuid_r('),\n    ('gmtime(', 'gmtime_r('),\n    ('localtime(', 'localtime_r('),\n    ('rand(', 'rand_r('),\n    ('strtok(', 'strtok_r('),\n    ('ttyname(', 'ttyname_r('),\n    )\n\n\ndef CheckPosixThreading(filename, clean_lines, linenum, error):\n  \"\"\"Checks for calls to thread-unsafe functions.\n\n  Much code has been originally written without consideration of\n  multi-threading. Also, engineers are relying on their old experience;\n  they have learned posix before threading extensions were added. These\n  tests guide the engineers to use thread-safe functions (when using\n  posix directly).\n\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n  line = clean_lines.elided[linenum]\n  for single_thread_function, multithread_safe_function in threading_list:\n    ix = line.find(single_thread_function)\n    # Comparisons made explicit for clarity -- pylint: disable=g-explicit-bool-comparison\n    if ix >= 0 and (ix == 0 or (not line[ix - 1].isalnum() and\n                                line[ix - 1] not in ('_', '.', '>'))):\n      error(filename, linenum, 'runtime/threadsafe_fn', 2,\n            'Consider using ' + multithread_safe_function +\n            '...) instead of ' + single_thread_function +\n            '...) for improved thread safety.')\n\n\ndef CheckVlogArguments(filename, clean_lines, linenum, error):\n  \"\"\"Checks that VLOG() is only used for defining a logging level.\n\n  For example, VLOG(2) is correct. VLOG(INFO), VLOG(WARNING), VLOG(ERROR), and\n  VLOG(FATAL) are not.\n\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n  line = clean_lines.elided[linenum]\n  if Search(r'\\bVLOG\\((INFO|ERROR|WARNING|DFATAL|FATAL)\\)', line):\n    error(filename, linenum, 'runtime/vlog', 5,\n          'VLOG() should be used with numeric verbosity level.  '\n          'Use LOG() if you want symbolic severity levels.')\n\n\n# Matches invalid increment: *count++, which moves pointer instead of\n# incrementing a value.\n_RE_PATTERN_INVALID_INCREMENT = re.compile(\n    r'^\\s*\\*\\w+(\\+\\+|--);')\n\n\ndef CheckInvalidIncrement(filename, clean_lines, linenum, error):\n  \"\"\"Checks for invalid increment *count++.\n\n  For example following function:\n  void increment_counter(int* count) {\n    *count++;\n  }\n  is invalid, because it effectively does count++, moving pointer, and should\n  be replaced with ++*count, (*count)++ or *count += 1.\n\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n  line = clean_lines.elided[linenum]\n  if _RE_PATTERN_INVALID_INCREMENT.match(line):\n    error(filename, linenum, 'runtime/invalid_increment', 5,\n          'Changing pointer instead of value (or unused value of operator*).')\n\n\nclass _BlockInfo(object):\n  \"\"\"Stores information about a generic block of code.\"\"\"\n\n  def __init__(self, seen_open_brace):\n    self.seen_open_brace = seen_open_brace\n    self.open_parentheses = 0\n    self.inline_asm = _NO_ASM\n\n  def CheckBegin(self, filename, clean_lines, linenum, error):\n    \"\"\"Run checks that applies to text up to the opening brace.\n\n    This is mostly for checking the text after the class identifier\n    and the \"{\", usually where the base class is specified.  For other\n    blocks, there isn't much to check, so we always pass.\n\n    Args:\n      filename: The name of the current file.\n      clean_lines: A CleansedLines instance containing the file.\n      linenum: The number of the line to check.\n      error: The function to call with any errors found.\n    \"\"\"\n    pass\n\n  def CheckEnd(self, filename, clean_lines, linenum, error):\n    \"\"\"Run checks that applies to text after the closing brace.\n\n    This is mostly used for checking end of namespace comments.\n\n    Args:\n      filename: The name of the current file.\n      clean_lines: A CleansedLines instance containing the file.\n      linenum: The number of the line to check.\n      error: The function to call with any errors found.\n    \"\"\"\n    pass\n\n\nclass _ClassInfo(_BlockInfo):\n  \"\"\"Stores information about a class.\"\"\"\n\n  def __init__(self, name, class_or_struct, clean_lines, linenum):\n    _BlockInfo.__init__(self, False)\n    self.name = name\n    self.starting_linenum = linenum\n    self.is_derived = False\n    if class_or_struct == 'struct':\n      self.access = 'public'\n      self.is_struct = True\n    else:\n      self.access = 'private'\n      self.is_struct = False\n\n    # Remember initial indentation level for this class.  Using raw_lines here\n    # instead of elided to account for leading comments.\n    initial_indent = Match(r'^( *)\\S', clean_lines.raw_lines[linenum])\n    if initial_indent:\n      self.class_indent = len(initial_indent.group(1))\n    else:\n      self.class_indent = 0\n\n    # Try to find the end of the class.  This will be confused by things like:\n    #   class A {\n    #   } *x = { ...\n    #\n    # But it's still good enough for CheckSectionSpacing.\n    self.last_line = 0\n    depth = 0\n    for i in range(linenum, clean_lines.NumLines()):\n      line = clean_lines.elided[i]\n      depth += line.count('{') - line.count('}')\n      if not depth:\n        self.last_line = i\n        break\n\n  def CheckBegin(self, filename, clean_lines, linenum, error):\n    # Look for a bare ':'\n    if Search('(^|[^:]):($|[^:])', clean_lines.elided[linenum]):\n      self.is_derived = True\n\n  def CheckEnd(self, filename, clean_lines, linenum, error):\n    # Check that closing brace is aligned with beginning of the class.\n    # Only do this if the closing brace is indented by only whitespaces.\n    # This means we will not check single-line class definitions.\n    indent = Match(r'^( *)\\}', clean_lines.elided[linenum])\n    if indent and len(indent.group(1)) != self.class_indent:\n      if self.is_struct:\n        parent = 'struct ' + self.name\n      else:\n        parent = 'class ' + self.name\n      error(filename, linenum, 'whitespace/indent', 3,\n            'Closing brace should be aligned with beginning of %s' % parent)\n\n\nclass _NamespaceInfo(_BlockInfo):\n  \"\"\"Stores information about a namespace.\"\"\"\n\n  def __init__(self, name, linenum):\n    _BlockInfo.__init__(self, False)\n    self.name = name or ''\n    self.starting_linenum = linenum\n\n  def CheckEnd(self, filename, clean_lines, linenum, error):\n    \"\"\"Check end of namespace comments.\"\"\"\n    line = clean_lines.raw_lines[linenum]\n\n    # Check how many lines is enclosed in this namespace.  Don't issue\n    # warning for missing namespace comments if there aren't enough\n    # lines.  However, do apply checks if there is already an end of\n    # namespace comment and it's incorrect.\n    #\n    # TODO(unknown): We always want to check end of namespace comments\n    # if a namespace is large, but sometimes we also want to apply the\n    # check if a short namespace contained nontrivial things (something\n    # other than forward declarations).  There is currently no logic on\n    # deciding what these nontrivial things are, so this check is\n    # triggered by namespace size only, which works most of the time.\n    if (linenum - self.starting_linenum < 10\n        and not Match(r'};*\\s*(//|/\\*).*\\bnamespace\\b', line)):\n      return\n\n    # Look for matching comment at end of namespace.\n    #\n    # Note that we accept C style \"/* */\" comments for terminating\n    # namespaces, so that code that terminate namespaces inside\n    # preprocessor macros can be cpplint clean.\n    #\n    # We also accept stuff like \"// end of namespace <name>.\" with the\n    # period at the end.\n    #\n    # Besides these, we don't accept anything else, otherwise we might\n    # get false negatives when existing comment is a substring of the\n    # expected namespace.\n    if self.name:\n      # Named namespace\n      if not Match((r'};*\\s*(//|/\\*).*\\bnamespace\\s+' + re.escape(self.name) +\n                    r'[\\*/\\.\\\\\\s]*$'),\n                   line):\n        error(filename, linenum, 'readability/namespace', 5,\n              'Namespace should be terminated with \"// namespace %s\"' %\n              self.name)\n    else:\n      # Anonymous namespace\n      if not Match(r'};*\\s*(//|/\\*).*\\bnamespace[\\*/\\.\\\\\\s]*$', line):\n        error(filename, linenum, 'readability/namespace', 5,\n              'Namespace should be terminated with \"// namespace\"')\n\n\nclass _PreprocessorInfo(object):\n  \"\"\"Stores checkpoints of nesting stacks when #if/#else is seen.\"\"\"\n\n  def __init__(self, stack_before_if):\n    # The entire nesting stack before #if\n    self.stack_before_if = stack_before_if\n\n    # The entire nesting stack up to #else\n    self.stack_before_else = []\n\n    # Whether we have already seen #else or #elif\n    self.seen_else = False\n\n\nclass _NestingState(object):\n  \"\"\"Holds states related to parsing braces.\"\"\"\n\n  def __init__(self):\n    # Stack for tracking all braces.  An object is pushed whenever we\n    # see a \"{\", and popped when we see a \"}\".  Only 3 types of\n    # objects are possible:\n    # - _ClassInfo: a class or struct.\n    # - _NamespaceInfo: a namespace.\n    # - _BlockInfo: some other type of block.\n    self.stack = []\n\n    # Stack of _PreprocessorInfo objects.\n    self.pp_stack = []\n\n  def SeenOpenBrace(self):\n    \"\"\"Check if we have seen the opening brace for the innermost block.\n\n    Returns:\n      True if we have seen the opening brace, False if the innermost\n      block is still expecting an opening brace.\n    \"\"\"\n    return (not self.stack) or self.stack[-1].seen_open_brace\n\n  def InNamespaceBody(self):\n    \"\"\"Check if we are currently one level inside a namespace body.\n\n    Returns:\n      True if top of the stack is a namespace block, False otherwise.\n    \"\"\"\n    return self.stack and isinstance(self.stack[-1], _NamespaceInfo)\n\n  def UpdatePreprocessor(self, line):\n    \"\"\"Update preprocessor stack.\n\n    We need to handle preprocessors due to classes like this:\n      #ifdef SWIG\n      struct ResultDetailsPageElementExtensionPoint {\n      #else\n      struct ResultDetailsPageElementExtensionPoint : public Extension {\n      #endif\n\n    We make the following assumptions (good enough for most files):\n    - Preprocessor condition evaluates to true from #if up to first\n      #else/#elif/#endif.\n\n    - Preprocessor condition evaluates to false from #else/#elif up\n      to #endif.  We still perform lint checks on these lines, but\n      these do not affect nesting stack.\n\n    Args:\n      line: current line to check.\n    \"\"\"\n    if Match(r'^\\s*#\\s*(if|ifdef|ifndef)\\b', line):\n      # Beginning of #if block, save the nesting stack here.  The saved\n      # stack will allow us to restore the parsing state in the #else case.\n      self.pp_stack.append(_PreprocessorInfo(copy.deepcopy(self.stack)))\n    elif Match(r'^\\s*#\\s*(else|elif)\\b', line):\n      # Beginning of #else block\n      if self.pp_stack:\n        if not self.pp_stack[-1].seen_else:\n          # This is the first #else or #elif block.  Remember the\n          # whole nesting stack up to this point.  This is what we\n          # keep after the #endif.\n          self.pp_stack[-1].seen_else = True\n          self.pp_stack[-1].stack_before_else = copy.deepcopy(self.stack)\n\n        # Restore the stack to how it was before the #if\n        self.stack = copy.deepcopy(self.pp_stack[-1].stack_before_if)\n      else:\n        # TODO(unknown): unexpected #else, issue warning?\n        pass\n    elif Match(r'^\\s*#\\s*endif\\b', line):\n      # End of #if or #else blocks.\n      if self.pp_stack:\n        # If we saw an #else, we will need to restore the nesting\n        # stack to its former state before the #else, otherwise we\n        # will just continue from where we left off.\n        if self.pp_stack[-1].seen_else:\n          # Here we can just use a shallow copy since we are the last\n          # reference to it.\n          self.stack = self.pp_stack[-1].stack_before_else\n        # Drop the corresponding #if\n        self.pp_stack.pop()\n      else:\n        # TODO(unknown): unexpected #endif, issue warning?\n        pass\n\n  def Update(self, filename, clean_lines, linenum, error):\n    \"\"\"Update nesting state with current line.\n\n    Args:\n      filename: The name of the current file.\n      clean_lines: A CleansedLines instance containing the file.\n      linenum: The number of the line to check.\n      error: The function to call with any errors found.\n    \"\"\"\n    line = clean_lines.elided[linenum]\n\n    # Update pp_stack first\n    self.UpdatePreprocessor(line)\n\n    # Count parentheses.  This is to avoid adding struct arguments to\n    # the nesting stack.\n    if self.stack:\n      inner_block = self.stack[-1]\n      depth_change = line.count('(') - line.count(')')\n      inner_block.open_parentheses += depth_change\n\n      # Also check if we are starting or ending an inline assembly block.\n      if inner_block.inline_asm in (_NO_ASM, _END_ASM):\n        if (depth_change != 0 and\n            inner_block.open_parentheses == 1 and\n            _MATCH_ASM.match(line)):\n          # Enter assembly block\n          inner_block.inline_asm = _INSIDE_ASM\n        else:\n          # Not entering assembly block.  If previous line was _END_ASM,\n          # we will now shift to _NO_ASM state.\n          inner_block.inline_asm = _NO_ASM\n      elif (inner_block.inline_asm == _INSIDE_ASM and\n            inner_block.open_parentheses == 0):\n        # Exit assembly block\n        inner_block.inline_asm = _END_ASM\n\n    # Consume namespace declaration at the beginning of the line.  Do\n    # this in a loop so that we catch same line declarations like this:\n    #   namespace proto2 { namespace bridge { class MessageSet; } }\n    while True:\n      # Match start of namespace.  The \"\\b\\s*\" below catches namespace\n      # declarations even if it weren't followed by a whitespace, this\n      # is so that we don't confuse our namespace checker.  The\n      # missing spaces will be flagged by CheckSpacing.\n      namespace_decl_match = Match(r'^\\s*namespace\\b\\s*([:\\w]+)?(.*)$', line)\n      if not namespace_decl_match:\n        break\n\n      new_namespace = _NamespaceInfo(namespace_decl_match.group(1), linenum)\n      self.stack.append(new_namespace)\n\n      line = namespace_decl_match.group(2)\n      if line.find('{') != -1:\n        new_namespace.seen_open_brace = True\n        line = line[line.find('{') + 1:]\n\n    # Look for a class declaration in whatever is left of the line\n    # after parsing namespaces.  The regexp accounts for decorated classes\n    # such as in:\n    #   class LOCKABLE API Object {\n    #   };\n    #\n    # Templates with class arguments may confuse the parser, for example:\n    #   template <class T\n    #             class Comparator = less<T>,\n    #             class Vector = vector<T> >\n    #   class HeapQueue {\n    #\n    # Because this parser has no nesting state about templates, by the\n    # time it saw \"class Comparator\", it may think that it's a new class.\n    # Nested templates have a similar problem:\n    #   template <\n    #       typename ExportedType,\n    #       typename TupleType,\n    #       template <typename, typename> class ImplTemplate>\n    #\n    # To avoid these cases, we ignore classes that are followed by '=' or '>'\n    class_decl_match = Match(\n        r'\\s*(template\\s*<[\\w\\s<>,:]*>\\s*)?'\n        r'(class|struct)\\s+([A-Z_]+\\s+)*(\\w+(?:::\\w+)*)'\n        r'(([^=>]|<[^<>]*>|<[^<>]*<[^<>]*>\\s*>)*)$', line)\n    if (class_decl_match and\n        (not self.stack or self.stack[-1].open_parentheses == 0)):\n      self.stack.append(_ClassInfo(\n          class_decl_match.group(4), class_decl_match.group(2),\n          clean_lines, linenum))\n      line = class_decl_match.group(5)\n\n    # If we have not yet seen the opening brace for the innermost block,\n    # run checks here.\n    if not self.SeenOpenBrace():\n      self.stack[-1].CheckBegin(filename, clean_lines, linenum, error)\n\n    # Update access control if we are inside a class/struct\n    if self.stack and isinstance(self.stack[-1], _ClassInfo):\n      classinfo = self.stack[-1]\n      access_match = Match(\n          r'^(.*)\\b(public|private|protected|signals)(\\s+(?:slots\\s*)?)?'\n          r':(?:[^:]|$)',\n          line)\n      if access_match:\n        classinfo.access = access_match.group(2)\n\n        # Check that access keywords are indented +1 space.  Skip this\n        # check if the keywords are not preceded by whitespaces.\n        indent = access_match.group(1)\n        # SRombauts: the above exception was no working '^\\s*$' => '^\\s+$'\n        if (len(indent) != classinfo.class_indent + 1 and\n            Match(r'^\\s+$', indent)):\n          if classinfo.is_struct:\n            parent = 'struct ' + classinfo.name\n          else:\n            parent = 'class ' + classinfo.name\n          slots = ''\n          if access_match.group(3):\n            slots = access_match.group(3)\n          error(filename, linenum, 'whitespace/indent', 0,\n                '%s%s: should be indented +1 space inside %s' % (\n                    access_match.group(2), slots, parent))\n\n    # Consume braces or semicolons from what's left of the line\n    while True:\n      # Match first brace, semicolon, or closed parenthesis.\n      matched = Match(r'^[^{;)}]*([{;)}])(.*)$', line)\n      if not matched:\n        break\n\n      token = matched.group(1)\n      if token == '{':\n        # If namespace or class hasn't seen a opening brace yet, mark\n        # namespace/class head as complete.  Push a new block onto the\n        # stack otherwise.\n        if not self.SeenOpenBrace():\n          self.stack[-1].seen_open_brace = True\n        else:\n          self.stack.append(_BlockInfo(True))\n          if _MATCH_ASM.match(line):\n            self.stack[-1].inline_asm = _BLOCK_ASM\n      elif token == ';' or token == ')':\n        # If we haven't seen an opening brace yet, but we already saw\n        # a semicolon, this is probably a forward declaration.  Pop\n        # the stack for these.\n        #\n        # Similarly, if we haven't seen an opening brace yet, but we\n        # already saw a closing parenthesis, then these are probably\n        # function arguments with extra \"class\" or \"struct\" keywords.\n        # Also pop these stack for these.\n        if not self.SeenOpenBrace():\n          self.stack.pop()\n      else:  # token == '}'\n        # Perform end of block checks and pop the stack.\n        if self.stack:\n          self.stack[-1].CheckEnd(filename, clean_lines, linenum, error)\n          self.stack.pop()\n      line = matched.group(2)\n\n  def InnermostClass(self):\n    \"\"\"Get class info on the top of the stack.\n\n    Returns:\n      A _ClassInfo object if we are inside a class, or None otherwise.\n    \"\"\"\n    for i in range(len(self.stack), 0, -1):\n      classinfo = self.stack[i - 1]\n      if isinstance(classinfo, _ClassInfo):\n        return classinfo\n    return None\n\n  def CheckCompletedBlocks(self, filename, error):\n    \"\"\"Checks that all classes and namespaces have been completely parsed.\n\n    Call this when all lines in a file have been processed.\n    Args:\n      filename: The name of the current file.\n      error: The function to call with any errors found.\n    \"\"\"\n    # Note: This test can result in false positives if #ifdef constructs\n    # get in the way of brace matching. See the testBuildClass test in\n    # cpplint_unittest.py for an example of this.\n    for obj in self.stack:\n      if isinstance(obj, _ClassInfo):\n        error(filename, obj.starting_linenum, 'build/class', 5,\n              'Failed to find complete declaration of class %s' %\n              obj.name)\n      elif isinstance(obj, _NamespaceInfo):\n        error(filename, obj.starting_linenum, 'build/namespaces', 5,\n              'Failed to find complete declaration of namespace %s' %\n              obj.name)\n\n\ndef CheckForNonStandardConstructs(filename, clean_lines, linenum,\n                                  nesting_state, error):\n  r\"\"\"Logs an error if we see certain non-ANSI constructs ignored by gcc-2.\n\n  Complain about several constructs which gcc-2 accepts, but which are\n  not standard C++.  Warning about these in lint is one way to ease the\n  transition to new compilers.\n  - put storage class first (e.g. \"static const\" instead of \"const static\").\n  - \"%lld\" instead of %qd\" in printf-type functions.\n  - \"%1$d\" is non-standard in printf-type functions.\n  - \"\\%\" is an undefined character escape sequence.\n  - text after #endif is not allowed.\n  - invalid inner-style forward declaration.\n  - >? and <? operators, and their >?= and <?= cousins.\n\n  Additionally, check for constructor/destructor style violations and reference\n  members, as it is very convenient to do so while checking for\n  gcc-2 compliance.\n\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    nesting_state: A _NestingState instance which maintains information about\n                   the current stack of nested blocks being parsed.\n    error: A callable to which errors are reported, which takes 4 arguments:\n           filename, line number, error level, and message\n  \"\"\"\n\n  # Remove comments from the line, but leave in strings for now.\n  line = clean_lines.lines[linenum]\n\n  if Search(r'printf\\s*\\(.*\".*%[-+ ]?\\d*q', line):\n    error(filename, linenum, 'runtime/printf_format', 3,\n          '%q in format strings is deprecated.  Use %ll instead.')\n\n  if Search(r'printf\\s*\\(.*\".*%\\d+\\$', line):\n    error(filename, linenum, 'runtime/printf_format', 2,\n          '%N$ formats are unconventional.  Try rewriting to avoid them.')\n\n  # Remove escaped backslashes before looking for undefined escapes.\n  line = line.replace('\\\\\\\\', '')\n\n  if Search(r'(\"|\\').*\\\\(%|\\[|\\(|{)', line):\n    error(filename, linenum, 'build/printf_format', 3,\n          '%, [, (, and { are undefined character escapes.  Unescape them.')\n\n  # For the rest, work with both comments and strings removed.\n  line = clean_lines.elided[linenum]\n\n  if Search(r'\\b(const|volatile|void|char|short|int|long'\n            r'|float|double|signed|unsigned'\n            r'|schar|u?int8|u?int16|u?int32|u?int64)'\n            r'\\s+(register|static|extern|typedef)\\b',\n            line):\n    error(filename, linenum, 'build/storage_class', 5,\n          'Storage class (static, extern, typedef, etc) should be first.')\n\n  if Match(r'\\s*#\\s*endif\\s*[^/\\s]+', line):\n    error(filename, linenum, 'build/endif_comment', 5,\n          'Uncommented text after #endif is non-standard.  Use a comment.')\n\n  if Match(r'\\s*class\\s+(\\w+\\s*::\\s*)+\\w+\\s*;', line):\n    error(filename, linenum, 'build/forward_decl', 5,\n          'Inner-style forward declarations are invalid.  Remove this line.')\n\n  if Search(r'(\\w+|[+-]?\\d+(\\.\\d*)?)\\s*(<|>)\\?=?\\s*(\\w+|[+-]?\\d+)(\\.\\d*)?',\n            line):\n    error(filename, linenum, 'build/deprecated', 3,\n          '>? and <? (max and min) operators are non-standard and deprecated.')\n\n  if Search(r'^\\s*const\\s*string\\s*&\\s*\\w+\\s*;', line):\n    # TODO(unknown): Could it be expanded safely to arbitrary references,\n    # without triggering too many false positives? The first\n    # attempt triggered 5 warnings for mostly benign code in the regtest, hence\n    # the restriction.\n    # Here's the original regexp, for the reference:\n    # type_name = r'\\w+((\\s*::\\s*\\w+)|(\\s*<\\s*\\w+?\\s*>))?'\n    # r'\\s*const\\s*' + type_name + '\\s*&\\s*\\w+\\s*;'\n    error(filename, linenum, 'runtime/member_string_references', 2,\n          'const string& members are dangerous. It is much better to use '\n          'alternatives, such as pointers or simple constants.')\n\n  # Everything else in this function operates on class declarations.\n  # Return early if the top of the nesting stack is not a class, or if\n  # the class head is not completed yet.\n  classinfo = nesting_state.InnermostClass()\n  if not classinfo or not classinfo.seen_open_brace:\n    return\n\n  # The class may have been declared with namespace or classname qualifiers.\n  # The constructor and destructor will not have those qualifiers.\n  base_classname = classinfo.name.split('::')[-1]\n\n  # Look for single-argument constructors that aren't marked explicit.\n  # Technically a valid construct, but against style.\n  args = Match(r'\\s+(?:inline\\s+)?%s\\s*\\(([^,()]+)\\)'\n               % re.escape(base_classname),\n               line)\n  if (args and\n      args.group(1) != 'void' and\n      not Match(r'(const\\s+)?%s(\\s+const)?\\s*(?:<\\w+>\\s*)?&'\n                % re.escape(base_classname), args.group(1).strip())):\n    error(filename, linenum, 'runtime/explicit', 5,\n          'Single-argument constructors should be marked explicit.')\n\n\ndef CheckSpacingForFunctionCall(filename, line, linenum, error):\n  \"\"\"Checks for the correctness of various spacing around function calls.\n\n  Args:\n    filename: The name of the current file.\n    line: The text of the line to check.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n\n  # Since function calls often occur inside if/for/while/switch\n  # expressions - which have their own, more liberal conventions - we\n  # first see if we should be looking inside such an expression for a\n  # function call, to which we can apply more strict standards.\n  fncall = line    # if there's no control flow construct, look at whole line\n  for pattern in (r'\\bif\\s*\\((.*)\\)\\s*{',\n                  r'\\bfor\\s*\\((.*)\\)\\s*{',\n                  r'\\bwhile\\s*\\((.*)\\)\\s*[{;]',\n                  r'\\bswitch\\s*\\((.*)\\)\\s*{'):\n    match = Search(pattern, line)\n    if match:\n      fncall = match.group(1)    # look inside the parens for function calls\n      break\n\n  # Except in if/for/while/switch, there should never be space\n  # immediately inside parens (eg \"f( 3, 4 )\").  We make an exception\n  # for nested parens ( (a+b) + c ).  Likewise, there should never be\n  # a space before a ( when it's a function argument.  I assume it's a\n  # function argument when the char before the whitespace is legal in\n  # a function name (alnum + _) and we're not starting a macro. Also ignore\n  # pointers and references to arrays and functions coz they're too tricky:\n  # we use a very simple way to recognize these:\n  # \" (something)(maybe-something)\" or\n  # \" (something)(maybe-something,\" or\n  # \" (something)[something]\"\n  # Note that we assume the contents of [] to be short enough that\n  # they'll never need to wrap.\n  if (  # Ignore control structures.\n      not Search(r'\\b(if|for|while|switch|return|new|delete|catch|sizeof)\\b',\n                 fncall) and\n      # Ignore pointers/references to functions.\n      not Search(r' \\([^)]+\\)\\([^)]*(\\)|,$)', fncall) and\n      # Ignore pointers/references to arrays.\n      not Search(r' \\([^)]+\\)\\[[^\\]]+\\]', fncall)):\n    if Search(r'\\w\\s*\\(\\s(?!\\s*\\\\$)', fncall):      # a ( used for a fn call\n      error(filename, linenum, 'whitespace/parens', 4,\n            'Extra space after ( in function call')\n    elif Search(r'\\(\\s+(?!(\\s*\\\\)|\\()', fncall):\n      error(filename, linenum, 'whitespace/parens', 2,\n            'Extra space after (')\n    if (Search(r'\\w\\s+\\(', fncall) and\n        not Search(r'#\\s*define|typedef', fncall) and\n        not Search(r'\\w\\s+\\((\\w+::)*\\*\\w+\\)\\(', fncall)):\n      error(filename, linenum, 'whitespace/parens', 4,\n            'Extra space before ( in function call')\n    # If the ) is followed only by a newline or a { + newline, assume it's\n    # part of a control statement (if/while/etc), and don't complain\n    if Search(r'[^)]\\s+\\)\\s*[^{\\s]', fncall):\n      # If the closing parenthesis is preceded by only whitespaces,\n      # try to give a more descriptive error message.\n      if Search(r'^\\s+\\)', fncall):\n        error(filename, linenum, 'whitespace/parens', 2,\n              'Closing ) should be moved to the previous line')\n      else:\n        error(filename, linenum, 'whitespace/parens', 2,\n              'Extra space before )')\n\n\ndef IsBlankLine(line):\n  \"\"\"Returns true if the given line is blank.\n\n  We consider a line to be blank if the line is empty or consists of\n  only white spaces.\n\n  Args:\n    line: A line of a string.\n\n  Returns:\n    True, if the given line is blank.\n  \"\"\"\n  return not line or line.isspace()\n\n\ndef CheckForFunctionLengths(filename, clean_lines, linenum,\n                            function_state, error):\n  \"\"\"Reports for long function bodies.\n\n  For an overview why this is done, see:\n  http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#Write_Short_Functions\n\n  Uses a simplistic algorithm assuming other style guidelines\n  (especially spacing) are followed.\n  Only checks unindented functions, so class members are unchecked.\n  Trivial bodies are unchecked, so constructors with huge initializer lists\n  may be missed.\n  Blank/comment lines are not counted so as to avoid encouraging the removal\n  of vertical space and comments just to get through a lint check.\n  NOLINT *on the last line of a function* disables this check.\n\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    function_state: Current function name and lines in body so far.\n    error: The function to call with any errors found.\n  \"\"\"\n  lines = clean_lines.lines\n  line = lines[linenum]\n  raw = clean_lines.raw_lines\n  raw_line = raw[linenum]\n  joined_line = ''\n\n  starting_func = False\n  regexp = r'(\\w(\\w|::|\\*|\\&|\\s)*)\\('  # decls * & space::name( ...\n  match_result = Match(regexp, line)\n  if match_result:\n    # If the name is all caps and underscores, figure it's a macro and\n    # ignore it, unless it's TEST or TEST_F.\n    function_name = match_result.group(1).split()[-1]\n    if function_name == 'TEST' or function_name == 'TEST_F' or (\n        not Match(r'[A-Z_]+$', function_name)):\n      starting_func = True\n\n  if starting_func:\n    body_found = False\n    for start_linenum in xrange(linenum, clean_lines.NumLines()):\n      start_line = lines[start_linenum]\n      joined_line += ' ' + start_line.lstrip()\n      if Search(r'(;|})', start_line):  # Declarations and trivial functions\n        body_found = True\n        break                              # ... ignore\n      elif Search(r'{', start_line):\n        body_found = True\n        function = Search(r'((\\w|:)*)\\(', line).group(1)\n        if Match(r'TEST', function):    # Handle TEST... macros\n          parameter_regexp = Search(r'(\\(.*\\))', joined_line)\n          if parameter_regexp:             # Ignore bad syntax\n            function += parameter_regexp.group(1)\n        else:\n          function += '()'\n        function_state.Begin(function)\n        break\n    if not body_found:\n      # No body for the function (or evidence of a non-function) was found.\n      error(filename, linenum, 'readability/fn_size', 5,\n            'Lint failed to find start of function body.')\n  elif Match(r'^\\}\\s*$', line):  # function end\n    function_state.Check(error, filename, linenum)\n    function_state.End()\n  elif not Match(r'^\\s*$', line):\n    function_state.Count()  # Count non-blank/non-comment lines.\n\n\n_RE_PATTERN_TODO = re.compile(r'^//(\\s*)TODO(\\(.+?\\))?:?(\\s|$)?')\n\n\ndef CheckComment(comment, filename, linenum, error):\n  \"\"\"Checks for common mistakes in TODO comments.\n\n  Args:\n    comment: The text of the comment from the line in question.\n    filename: The name of the current file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n  match = _RE_PATTERN_TODO.match(comment)\n  if match:\n    # One whitespace is correct; zero whitespace is handled elsewhere.\n    leading_whitespace = match.group(1)\n    if len(leading_whitespace) > 1:\n      error(filename, linenum, 'whitespace/todo', 2,\n            'Too many spaces before TODO')\n\n    username = match.group(2)\n    if not username:\n      error(filename, linenum, 'readability/todo', 2,\n            'Missing username in TODO; it should look like '\n            '\"// TODO(my_username): Stuff.\"')\n\n    middle_whitespace = match.group(3)\n    # Comparisons made explicit for correctness -- pylint: disable=g-explicit-bool-comparison\n    if middle_whitespace != ' ' and middle_whitespace != '':\n      error(filename, linenum, 'whitespace/todo', 2,\n            'TODO(my_username) should be followed by a space')\n\ndef CheckAccess(filename, clean_lines, linenum, nesting_state, error):\n  \"\"\"Checks for improper use of DISALLOW* macros.\n\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    nesting_state: A _NestingState instance which maintains information about\n                   the current stack of nested blocks being parsed.\n    error: The function to call with any errors found.\n  \"\"\"\n  line = clean_lines.elided[linenum]  # get rid of comments and strings\n\n  matched = Match((r'\\s*(DISALLOW_COPY_AND_ASSIGN|'\n                   r'DISALLOW_EVIL_CONSTRUCTORS|'\n                   r'DISALLOW_IMPLICIT_CONSTRUCTORS)'), line)\n  if not matched:\n    return\n  if nesting_state.stack and isinstance(nesting_state.stack[-1], _ClassInfo):\n    if nesting_state.stack[-1].access != 'private':\n      error(filename, linenum, 'readability/constructors', 3,\n            '%s must be in the private: section' % matched.group(1))\n\n  else:\n    # Found DISALLOW* macro outside a class declaration, or perhaps it\n    # was used inside a function when it should have been part of the\n    # class declaration.  We could issue a warning here, but it\n    # probably resulted in a compiler error already.\n    pass\n\n\ndef FindNextMatchingAngleBracket(clean_lines, linenum, init_suffix):\n  \"\"\"Find the corresponding > to close a template.\n\n  Args:\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: Current line number.\n    init_suffix: Remainder of the current line after the initial <.\n\n  Returns:\n    True if a matching bracket exists.\n  \"\"\"\n  line = init_suffix\n  nesting_stack = ['<']\n  while True:\n    # Find the next operator that can tell us whether < is used as an\n    # opening bracket or as a less-than operator.  We only want to\n    # warn on the latter case.\n    #\n    # We could also check all other operators and terminate the search\n    # early, e.g. if we got something like this \"a<b+c\", the \"<\" is\n    # most likely a less-than operator, but then we will get false\n    # positives for default arguments and other template expressions.\n    match = Search(r'^[^<>(),;\\[\\]]*([<>(),;\\[\\]])(.*)$', line)\n    if match:\n      # Found an operator, update nesting stack\n      operator = match.group(1)\n      line = match.group(2)\n\n      if nesting_stack[-1] == '<':\n        # Expecting closing angle bracket\n        if operator in ('<', '(', '['):\n          nesting_stack.append(operator)\n        elif operator == '>':\n          nesting_stack.pop()\n          if not nesting_stack:\n            # Found matching angle bracket\n            return True\n        elif operator == ',':\n          # Got a comma after a bracket, this is most likely a template\n          # argument.  We have not seen a closing angle bracket yet, but\n          # it's probably a few lines later if we look for it, so just\n          # return early here.\n          return True\n        else:\n          # Got some other operator.\n          return False\n\n      else:\n        # Expecting closing parenthesis or closing bracket\n        if operator in ('<', '(', '['):\n          nesting_stack.append(operator)\n        elif operator in (')', ']'):\n          # We don't bother checking for matching () or [].  If we got\n          # something like (] or [), it would have been a syntax error.\n          nesting_stack.pop()\n\n    else:\n      # Scan the next line\n      linenum += 1\n      if linenum >= len(clean_lines.elided):\n        break\n      line = clean_lines.elided[linenum]\n\n  # Exhausted all remaining lines and still no matching angle bracket.\n  # Most likely the input was incomplete, otherwise we should have\n  # seen a semicolon and returned early.\n  return True\n\n\ndef FindPreviousMatchingAngleBracket(clean_lines, linenum, init_prefix):\n  \"\"\"Find the corresponding < that started a template.\n\n  Args:\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: Current line number.\n    init_prefix: Part of the current line before the initial >.\n\n  Returns:\n    True if a matching bracket exists.\n  \"\"\"\n  line = init_prefix\n  nesting_stack = ['>']\n  while True:\n    # Find the previous operator\n    match = Search(r'^(.*)([<>(),;\\[\\]])[^<>(),;\\[\\]]*$', line)\n    if match:\n      # Found an operator, update nesting stack\n      operator = match.group(2)\n      line = match.group(1)\n\n      if nesting_stack[-1] == '>':\n        # Expecting opening angle bracket\n        if operator in ('>', ')', ']'):\n          nesting_stack.append(operator)\n        elif operator == '<':\n          nesting_stack.pop()\n          if not nesting_stack:\n            # Found matching angle bracket\n            return True\n        elif operator == ',':\n          # Got a comma before a bracket, this is most likely a\n          # template argument.  The opening angle bracket is probably\n          # there if we look for it, so just return early here.\n          return True\n        else:\n          # Got some other operator.\n          return False\n\n      else:\n        # Expecting opening parenthesis or opening bracket\n        if operator in ('>', ')', ']'):\n          nesting_stack.append(operator)\n        elif operator in ('(', '['):\n          nesting_stack.pop()\n\n    else:\n      # Scan the previous line\n      linenum -= 1\n      if linenum < 0:\n        break\n      line = clean_lines.elided[linenum]\n\n  # Exhausted all earlier lines and still no matching angle bracket.\n  return False\n\n\ndef CheckSpacing(filename, clean_lines, linenum, nesting_state, error):\n  \"\"\"Checks for the correctness of various spacing issues in the code.\n\n  Things we check for: spaces around operators, spaces after\n  if/for/while/switch, no spaces around parens in function calls, two\n  spaces between code and comment, don't start a block with a blank\n  line, don't end a function with a blank line, don't add a blank line\n  after public/protected/private, don't have too many blank lines in a row.\n\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    nesting_state: A _NestingState instance which maintains information about\n                   the current stack of nested blocks being parsed.\n    error: The function to call with any errors found.\n  \"\"\"\n\n  # Don't use \"elided\" lines here, otherwise we can't check commented lines.\n  # Don't want to use \"raw\" either, because we don't want to check inside C++11\n  # raw strings,\n  raw = clean_lines.lines_without_raw_strings\n  line = raw[linenum]\n\n  # Before nixing comments, check if the line is blank for no good\n  # reason.  This includes the first line after a block is opened, and\n  # blank lines at the end of a function (ie, right before a line like '}'\n  #\n  # Skip all the blank line checks if we are immediately inside a\n  # namespace body.  In other words, don't issue blank line warnings\n  # for this block:\n  #   namespace {\n  #\n  #   }\n  #\n  # A warning about missing end of namespace comments will be issued instead.\n  if IsBlankLine(line) and not nesting_state.InNamespaceBody():\n    elided = clean_lines.elided\n    prev_line = elided[linenum - 1]\n    prevbrace = prev_line.rfind('{')\n    # TODO(unknown): Don't complain if line before blank line, and line after,\n    #                both start with alnums and are indented the same amount.\n    #                This ignores whitespace at the start of a namespace block\n    #                because those are not usually indented.\n    if prevbrace != -1 and prev_line[prevbrace:].find('}') == -1:\n      # OK, we have a blank line at the start of a code block.  Before we\n      # complain, we check if it is an exception to the rule: The previous\n      # non-empty line has the parameters of a function header that are indented\n      # 4 spaces (because they did not fit in a 80 column line when placed on\n      # the same line as the function name).  We also check for the case where\n      # the previous line is indented 6 spaces, which may happen when the\n      # initializers of a constructor do not fit into a 80 column line.\n      exception = False\n      if Match(r' {6}\\w', prev_line):  # Initializer list?\n        # We are looking for the opening column of initializer list, which\n        # should be indented 4 spaces to cause 6 space indentation afterwards.\n        search_position = linenum-2\n        while (search_position >= 0\n               and Match(r' {6}\\w', elided[search_position])):\n          search_position -= 1\n        exception = (search_position >= 0\n                     and elided[search_position][:5] == '    :')\n      else:\n        # Search for the function arguments or an initializer list.  We use a\n        # simple heuristic here: If the line is indented 4 spaces; and we have a\n        # closing paren, without the opening paren, followed by an opening brace\n        # or colon (for initializer lists) we assume that it is the last line of\n        # a function header.  If we have a colon indented 4 spaces, it is an\n        # initializer list.\n        exception = (Match(r' {4}\\w[^\\(]*\\)\\s*(const\\s*)?(\\{\\s*$|:)',\n                           prev_line)\n                     or Match(r' {4}:', prev_line))\n\n      if not exception:\n        error(filename, linenum, 'whitespace/blank_line', 2,\n              'Redundant blank line at the start of a code block '\n              'should be deleted.')\n    # Ignore blank lines at the end of a block in a long if-else\n    # chain, like this:\n    #   if (condition1) {\n    #     // Something followed by a blank line\n    #\n    #   } else if (condition2) {\n    #     // Something else\n    #   }\n    if linenum + 1 < clean_lines.NumLines():\n      next_line = raw[linenum + 1]\n      if (next_line\n          and Match(r'\\s*}', next_line)\n          and next_line.find('} else ') == -1):\n        error(filename, linenum, 'whitespace/blank_line', 3,\n              'Redundant blank line at the end of a code block '\n              'should be deleted.')\n\n    matched = Match(r'\\s*(public|protected|private):', prev_line)\n    if matched:\n      error(filename, linenum, 'whitespace/blank_line', 3,\n            'Do not leave a blank line after \"%s:\"' % matched.group(1))\n\n  # Next, we complain if there's a comment too near the text\n  commentpos = line.find('//')\n  if commentpos != -1:\n    # Check if the // may be in quotes.  If so, ignore it\n    # Comparisons made explicit for clarity -- pylint: disable=g-explicit-bool-comparison\n    if (line.count('\"', 0, commentpos) -\n        line.count('\\\\\"', 0, commentpos)) % 2 == 0:   # not in quotes\n      # SRombauts: one space is enough\n      if (not Match(r'^\\s*{ //', line) and\n          (commentpos >= 1 and\n           line[commentpos-1] not in string.whitespace)):\n        error(filename, linenum, 'whitespace/comments', 3,\n              'At least one space is best between code and comments')\n      # There should always be a space between the // and the comment\n      commentend = commentpos + 2\n      if commentend < len(line) and not line[commentend] == ' ':\n        # but some lines are exceptions -- e.g. if they're big\n        # comment delimiters like:\n        # //----------------------------------------------------------\n        # or are an empty C++ style Doxygen comment, like:\n        # ///\n        # or C++ style Doxygen comments placed after the variable:\n        # ///<  Header comment\n        # //!<  Header comment\n        # or they begin with multiple slashes followed by a space:\n        # //////// Header comment\n        match = (Search(r'[=/-]{4,}\\s*$', line[commentend:]) or\n                 Search(r'^/$', line[commentend:]) or\n                 Search(r'^!< ', line[commentend:]) or\n                 Search(r'^/< ', line[commentend:]) or\n                 Search(r'^/+ ', line[commentend:]))\n        if not match:\n          error(filename, linenum, 'whitespace/comments', 4,\n                'Should have a space between // and comment')\n      CheckComment(line[commentpos:], filename, linenum, error)\n\n  line = clean_lines.elided[linenum]  # get rid of comments and strings\n\n  # Don't try to do spacing checks for operator methods\n  line = re.sub(r'operator(==|!=|<|<<|<=|>=|>>|>)\\(', 'operator\\(', line)\n\n  # We allow no-spaces around = within an if: \"if ( (a=Foo()) == 0 )\".\n  # Otherwise not.  Note we only check for non-spaces on *both* sides;\n  # sometimes people put non-spaces on one side when aligning ='s among\n  # many lines (not that this is behavior that I approve of...)\n  if Search(r'[\\w.]=[\\w.]', line) and not Search(r'\\b(if|while) ', line):\n    error(filename, linenum, 'whitespace/operators', 4,\n          'Missing spaces around =')\n\n  # It's ok not to have spaces around binary operators like + - * /, but if\n  # there's too little whitespace, we get concerned.  It's hard to tell,\n  # though, so we punt on this one for now.  TODO.\n\n  # You should always have whitespace around binary operators.\n  #\n  # Check <= and >= first to avoid false positives with < and >, then\n  # check non-include lines for spacing around < and >.\n  match = Search(r'[^<>=!\\s](==|!=|<=|>=)[^<>=!\\s]', line)\n  if match:\n    error(filename, linenum, 'whitespace/operators', 3,\n          'Missing spaces around %s' % match.group(1))\n  # We allow no-spaces around << when used like this: 10<<20, but\n  # not otherwise (particularly, not when used as streams)\n  # Also ignore using ns::operator<<;\n  match = Search(r'(operator|\\S)(?:L|UL|ULL|l|ul|ull)?<<(\\S)', line)\n  if (match and\n      not (match.group(1).isdigit() and match.group(2).isdigit()) and\n      not (match.group(1) == 'operator' and match.group(2) == ';')):\n    error(filename, linenum, 'whitespace/operators', 3,\n          'Missing spaces around <<')\n  elif not Match(r'#.*include', line):\n    # Avoid false positives on ->\n    reduced_line = line.replace('->', '')\n\n    # Look for < that is not surrounded by spaces.  This is only\n    # triggered if both sides are missing spaces, even though\n    # technically should should flag if at least one side is missing a\n    # space.  This is done to avoid some false positives with shifts.\n    match = Search(r'[^\\s<]<([^\\s=<].*)', reduced_line)\n    if (match and\n        not FindNextMatchingAngleBracket(clean_lines, linenum, match.group(1))):\n      error(filename, linenum, 'whitespace/operators', 3,\n            'Missing spaces around <')\n\n    # Look for > that is not surrounded by spaces.  Similar to the\n    # above, we only trigger if both sides are missing spaces to avoid\n    # false positives with shifts.\n    match = Search(r'^(.*[^\\s>])>[^\\s=>]', reduced_line)\n    if (match and\n        not FindPreviousMatchingAngleBracket(clean_lines, linenum,\n                                             match.group(1))):\n      error(filename, linenum, 'whitespace/operators', 3,\n            'Missing spaces around >')\n\n  # We allow no-spaces around >> for almost anything.  This is because\n  # C++11 allows \">>\" to close nested templates, which accounts for\n  # most cases when \">>\" is not followed by a space.\n  #\n  # We still warn on \">>\" followed by alpha character, because that is\n  # likely due to \">>\" being used for right shifts, e.g.:\n  #   value >> alpha\n  #\n  # When \">>\" is used to close templates, the alphanumeric letter that\n  # follows would be part of an identifier, and there should still be\n  # a space separating the template type and the identifier.\n  #   type<type<type>> alpha\n  match = Search(r'>>[a-zA-Z_]', line)\n  if match:\n    error(filename, linenum, 'whitespace/operators', 3,\n          'Missing spaces around >>')\n\n  # There shouldn't be space around unary operators\n  match = Search(r'(!\\s|~\\s|[\\s]--[\\s;]|[\\s]\\+\\+[\\s;])', line)\n  if match:\n    error(filename, linenum, 'whitespace/operators', 4,\n          'Extra space for operator %s' % match.group(1))\n\n  # A pet peeve of mine: no spaces after an if, while, switch, or for\n  match = Search(r' (if\\(|for\\(|while\\(|switch\\()', line)\n  if match:\n    error(filename, linenum, 'whitespace/parens', 5,\n          'Missing space before ( in %s' % match.group(1))\n\n  # For if/for/while/switch, the left and right parens should be\n  # consistent about how many spaces are inside the parens, and\n  # there should either be zero or one spaces inside the parens.\n  # We don't want: \"if ( foo)\" or \"if ( foo   )\".\n  # Exception: \"for ( ; foo; bar)\" and \"for (foo; bar; )\" are allowed.\n  match = Search(r'\\b(if|for|while|switch)\\s*'\n                 r'\\(([ ]*)(.).*[^ ]+([ ]*)\\)\\s*{\\s*$',\n                 line)\n  if match:\n    if len(match.group(2)) != len(match.group(4)):\n      if not (match.group(3) == ';' and\n              len(match.group(2)) == 1 + len(match.group(4)) or\n              not match.group(2) and Search(r'\\bfor\\s*\\(.*; \\)', line)):\n        error(filename, linenum, 'whitespace/parens', 5,\n              'Mismatching spaces inside () in %s' % match.group(1))\n    if len(match.group(2)) not in [0, 1]:\n      error(filename, linenum, 'whitespace/parens', 5,\n            'Should have zero or one spaces inside ( and ) in %s' %\n            match.group(1))\n\n  # You should always have a space after a comma (either as fn arg or operator)\n  #\n  # This does not apply when the non-space character following the\n  # comma is another comma, since the only time when that happens is\n  # for empty macro arguments.\n  #\n  # We run this check in two passes: first pass on elided lines to\n  # verify that lines contain missing whitespaces, second pass on raw\n  # lines to confirm that those missing whitespaces are not due to\n  # elided comments.\n  if Search(r',[^,\\s]', line) and Search(r',[^,\\s]', raw[linenum]):\n    error(filename, linenum, 'whitespace/comma', 3,\n          'Missing space after ,')\n\n  # You should always have a space after a semicolon\n  # except for few corner cases\n  # TODO(unknown): clarify if 'if (1) { return 1;}' is requires one more\n  # space after ;\n  if Search(r';[^\\s};\\\\)/]', line):\n    error(filename, linenum, 'whitespace/semicolon', 3,\n          'Missing space after ;')\n\n  # Next we will look for issues with function calls.\n  CheckSpacingForFunctionCall(filename, line, linenum, error)\n\n  # Except after an opening paren, or after another opening brace (in case of\n  # an initializer list, for instance), you should have spaces before your\n  # braces. And since you should never have braces at the beginning of a line,\n  # this is an easy test.\n  match = Match(r'^(.*[^ ({]){', line)\n  if match:\n    # Try a bit harder to check for brace initialization.  This\n    # happens in one of the following forms:\n    #   Constructor() : initializer_list_{} { ... }\n    #   Constructor{}.MemberFunction()\n    #   Type variable{};\n    #   FunctionCall(type{}, ...);\n    #   LastArgument(..., type{});\n    #   LOG(INFO) << type{} << \" ...\";\n    #   map_of_type[{...}] = ...;\n    #\n    # We check for the character following the closing brace, and\n    # silence the warning if it's one of those listed above, i.e.\n    # \"{.;,)<]\".\n    #\n    # To account for nested initializer list, we allow any number of\n    # closing braces up to \"{;,)<\".  We can't simply silence the\n    # warning on first sight of closing brace, because that would\n    # cause false negatives for things that are not initializer lists.\n    #   Silence this:         But not this:\n    #     Outer{                if (...) {\n    #       Inner{...}            if (...){  // Missing space before {\n    #     };                    }\n    #\n    # There is a false negative with this approach if people inserted\n    # spurious semicolons, e.g. \"if (cond){};\", but we will catch the\n    # spurious semicolon with a separate check.\n    (endline, endlinenum, endpos) = CloseExpression(\n        clean_lines, linenum, len(match.group(1)))\n    trailing_text = ''\n    if endpos > -1:\n      trailing_text = endline[endpos:]\n    for offset in xrange(endlinenum + 1,\n                         min(endlinenum + 3, clean_lines.NumLines() - 1)):\n      trailing_text += clean_lines.elided[offset]\n    if not Match(r'^[\\s}]*[{.;,)<\\]]', trailing_text):\n      error(filename, linenum, 'whitespace/braces', 5,\n            'Missing space before {')\n\n  # Make sure '} else {' has spaces.\n  if Search(r'}else', line):\n    error(filename, linenum, 'whitespace/braces', 5,\n          'Missing space before else')\n\n  # You shouldn't have spaces before your brackets, except maybe after\n  # 'delete []' or 'new char * []'.\n  if Search(r'\\w\\s+\\[', line) and not Search(r'delete\\s+\\[', line):\n    error(filename, linenum, 'whitespace/braces', 5,\n          'Extra space before [')\n\n  # You shouldn't have a space before a semicolon at the end of the line.\n  # There's a special case for \"for\" since the style guide allows space before\n  # the semicolon there.\n  if Search(r':\\s*;\\s*$', line):\n    error(filename, linenum, 'whitespace/semicolon', 5,\n          'Semicolon defining empty statement. Use {} instead.')\n  elif Search(r'^\\s*;\\s*$', line):\n    error(filename, linenum, 'whitespace/semicolon', 5,\n          'Line contains only semicolon. If this should be an empty statement, '\n          'use {} instead.')\n  elif (Search(r'\\s+;\\s*$', line) and\n        not Search(r'\\bfor\\b', line)):\n    error(filename, linenum, 'whitespace/semicolon', 5,\n          'Extra space before last semicolon. If this should be an empty '\n          'statement, use {} instead.')\n\n  # In range-based for, we wanted spaces before and after the colon, but\n  # not around \"::\" tokens that might appear.\n  if (Search('for *\\(.*[^:]:[^: ]', line) or\n      Search('for *\\(.*[^: ]:[^:]', line)):\n    error(filename, linenum, 'whitespace/forcolon', 2,\n          'Missing space around colon in range-based for loop')\n\n\ndef CheckSectionSpacing(filename, clean_lines, class_info, linenum, error):\n  \"\"\"Checks for additional blank line issues related to sections.\n\n  Currently the only thing checked here is blank line before protected/private.\n\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    class_info: A _ClassInfo objects.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n  # Skip checks if the class is small, where small means 25 lines or less.\n  # 25 lines seems like a good cutoff since that's the usual height of\n  # terminals, and any class that can't fit in one screen can't really\n  # be considered \"small\".\n  #\n  # Also skip checks if we are on the first line.  This accounts for\n  # classes that look like\n  #   class Foo { public: ... };\n  #\n  # If we didn't find the end of the class, last_line would be zero,\n  # and the check will be skipped by the first condition.\n  if (class_info.last_line - class_info.starting_linenum <= 24 or\n      linenum <= class_info.starting_linenum):\n    return\n\n  matched = Match(r'\\s*(public|protected|private):', clean_lines.lines[linenum])\n  if matched:\n    # Issue warning if the line before public/protected/private was\n    # not a blank line, but don't do this if the previous line contains\n    # \"class\" or \"struct\".  This can happen two ways:\n    #  - We are at the beginning of the class.\n    #  - We are forward-declaring an inner class that is semantically\n    #    private, but needed to be public for implementation reasons.\n    # Also ignores cases where the previous line ends with a backslash as can be\n    # common when defining classes in C macros.\n    prev_line = clean_lines.lines[linenum - 1]\n    if (not IsBlankLine(prev_line) and\n        not Search(r'\\b(class|struct)\\b', prev_line) and\n        not Search(r'\\\\$', prev_line)):\n      # Try a bit harder to find the beginning of the class.  This is to\n      # account for multi-line base-specifier lists, e.g.:\n      #   class Derived\n      #       : public Base {\n      end_class_head = class_info.starting_linenum\n      for i in range(class_info.starting_linenum, linenum):\n        if Search(r'\\{\\s*$', clean_lines.lines[i]):\n          end_class_head = i\n          break\n      if end_class_head < linenum - 1:\n        error(filename, linenum, 'whitespace/blank_line', 3,\n              '\"%s:\" should be preceded by a blank line' % matched.group(1))\n\n\ndef GetPreviousNonBlankLine(clean_lines, linenum):\n  \"\"\"Return the most recent non-blank line and its line number.\n\n  Args:\n    clean_lines: A CleansedLines instance containing the file contents.\n    linenum: The number of the line to check.\n\n  Returns:\n    A tuple with two elements.  The first element is the contents of the last\n    non-blank line before the current line, or the empty string if this is the\n    first non-blank line.  The second is the line number of that line, or -1\n    if this is the first non-blank line.\n  \"\"\"\n\n  prevlinenum = linenum - 1\n  while prevlinenum >= 0:\n    prevline = clean_lines.elided[prevlinenum]\n    if not IsBlankLine(prevline):     # if not a blank line...\n      return (prevline, prevlinenum)\n    prevlinenum -= 1\n  return ('', -1)\n\n# TODO(SRombauts) detects if/else/for/while without an opening brace on the same line\ndef CheckBraces(filename, clean_lines, linenum, error):\n  \"\"\"Looks for misplaced braces (e.g. at the end of line).\n\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n\n  line = clean_lines.elided[linenum]        # get rid of comments and strings\n\n  if Match(r'\\s*{\\s*$', line):\n    # We allow an open brace to start a line in the case where someone is using\n    # braces in a block to explicitly create a new scope, which is commonly used\n    # to control the lifetime of stack-allocated variables.  Braces are also\n    # used for brace initializers inside function calls.  We don't detect this\n    # perfectly: we just don't complain if the last non-whitespace character on\n    # the previous non-blank line is ',', ';', ':', '(', '{', or '}', or if the\n    # previous line starts a preprocessor block.\n    prevline = GetPreviousNonBlankLine(clean_lines, linenum)[0]\n    if (not Search(r'[,;:}{(]\\s*$', prevline) and\n        not Match(r'\\s*#', prevline)):\n      error(filename, linenum, 'whitespace/braces', 0,\n            '{ should almost always be at the end of the previous line')\n\n  # An else clause should be on the same line as the preceding closing brace.\n  if Match(r'\\s*else\\s*', line):\n    prevline = GetPreviousNonBlankLine(clean_lines, linenum)[0]\n    if Match(r'\\s*}\\s*$', prevline):\n      error(filename, linenum, 'whitespace/newline', 0,\n            'An else should appear on the same line as the preceding }')\n\n  # If braces come on one side of an else, they should be on both.\n  # However, we have to worry about \"else if\" that spans multiple lines!\n  if Search(r'}\\s*else[^{]*$', line) or Match(r'[^}]*else\\s*{', line):\n    if Search(r'}\\s*else if([^{]*)$', line):       # could be multi-line if\n      # find the ( after the if\n      pos = line.find('else if')\n      pos = line.find('(', pos)\n      if pos > 0:\n        (endline, _, endpos) = CloseExpression(clean_lines, linenum, pos)\n        if endline[endpos:].find('{') == -1:    # must be brace after if\n          error(filename, linenum, 'readability/braces', 5,\n                'If an else has a brace on one side, it should have it on both')\n    else:            # common case: else not followed by a multi-line if\n      error(filename, linenum, 'readability/braces', 5,\n            'If an else has a brace on one side, it should have it on both')\n\n  # Likewise, an else should never have the else clause on the same line\n  if Search(r'\\belse [^\\s{]', line) and not Search(r'\\belse if\\b', line):\n    error(filename, linenum, 'whitespace/newline', 4,\n          'Else clause should never be on same line as else (use 2 lines)')\n\n  # In the same way, a do/while should never be on one line\n  if Match(r'\\s*do [^\\s{]', line):\n    error(filename, linenum, 'whitespace/newline', 4,\n          'do/while clauses should not be on a single line')\n\n  # Block bodies should not be followed by a semicolon.  Due to C++11\n  # brace initialization, there are more places where semicolons are\n  # required than not, so we use a whitelist approach to check these\n  # rather than a blacklist.  These are the places where \"};\" should\n  # be replaced by just \"}\":\n  # 1. Some flavor of block following closing parenthesis:\n  #    for (;;) {};\n  #    while (...) {};\n  #    switch (...) {};\n  #    Function(...) {};\n  #    if (...) {};\n  #    if (...) else if (...) {};\n  #\n  # 2. else block:\n  #    if (...) else {};\n  #\n  # 3. const member function:\n  #    Function(...) const {};\n  #\n  # 4. Block following some statement:\n  #    x = 42;\n  #    {};\n  #\n  # 5. Block at the beginning of a function:\n  #    Function(...) {\n  #      {};\n  #    }\n  #\n  #    Note that naively checking for the preceding \"{\" will also match\n  #    braces inside multi-dimensional arrays, but this is fine since\n  #    that expression will not contain semicolons.\n  #\n  # 6. Block following another block:\n  #    while (true) {}\n  #    {};\n  #\n  # 7. End of namespaces:\n  #    namespace {};\n  #\n  #    These semicolons seems far more common than other kinds of\n  #    redundant semicolons, possibly due to people converting classes\n  #    to namespaces.  For now we do not warn for this case.\n  #\n  # Try matching case 1 first.\n  match = Match(r'^(.*\\)\\s*)\\{', line)\n  if match:\n    # Matched closing parenthesis (case 1).  Check the token before the\n    # matching opening parenthesis, and don't warn if it looks like a\n    # macro.  This avoids these false positives:\n    #  - macro that defines a base class\n    #  - multi-line macro that defines a base class\n    #  - macro that defines the whole class-head\n    #\n    # But we still issue warnings for macros that we know are safe to\n    # warn, specifically:\n    #  - TEST, TEST_F, TEST_P, MATCHER, MATCHER_P\n    #  - TYPED_TEST\n    #  - INTERFACE_DEF\n    #  - EXCLUSIVE_LOCKS_REQUIRED, SHARED_LOCKS_REQUIRED, LOCKS_EXCLUDED:\n    #\n    # We implement a whitelist of safe macros instead of a blacklist of\n    # unsafe macros, even though the latter appears less frequently in\n    # google code and would have been easier to implement.  This is because\n    # the downside for getting the whitelist wrong means some extra\n    # semicolons, while the downside for getting the blacklist wrong\n    # would result in compile errors.\n    #\n    # In addition to macros, we also don't want to warn on compound\n    # literals.\n    closing_brace_pos = match.group(1).rfind(')')\n    opening_parenthesis = ReverseCloseExpression(\n        clean_lines, linenum, closing_brace_pos)\n    if opening_parenthesis[2] > -1:\n      line_prefix = opening_parenthesis[0][0:opening_parenthesis[2]]\n      macro = Search(r'\\b([A-Z_]+)\\s*$', line_prefix)\n      if ((macro and\n           macro.group(1) not in (\n               'TEST', 'TEST_F', 'MATCHER', 'MATCHER_P', 'TYPED_TEST',\n               'EXCLUSIVE_LOCKS_REQUIRED', 'SHARED_LOCKS_REQUIRED',\n               'LOCKS_EXCLUDED', 'INTERFACE_DEF')) or\n          Search(r'\\s+=\\s*$', line_prefix)):\n        match = None\n\n  else:\n    # Try matching cases 2-3.\n    match = Match(r'^(.*(?:else|\\)\\s*const)\\s*)\\{', line)\n    if not match:\n      # Try matching cases 4-6.  These are always matched on separate lines.\n      #\n      # Note that we can't simply concatenate the previous line to the\n      # current line and do a single match, otherwise we may output\n      # duplicate warnings for the blank line case:\n      #   if (cond) {\n      #     // blank line\n      #   }\n      prevline = GetPreviousNonBlankLine(clean_lines, linenum)[0]\n      if prevline and Search(r'[;{}]\\s*$', prevline):\n        match = Match(r'^(\\s*)\\{', line)\n\n  # Check matching closing brace\n  if match:\n    (endline, endlinenum, endpos) = CloseExpression(\n        clean_lines, linenum, len(match.group(1)))\n    if endpos > -1 and Match(r'^\\s*;', endline[endpos:]):\n      # Current {} pair is eligible for semicolon check, and we have found\n      # the redundant semicolon, output warning here.\n      #\n      # Note: because we are scanning forward for opening braces, and\n      # outputting warnings for the matching closing brace, if there are\n      # nested blocks with trailing semicolons, we will get the error\n      # messages in reversed order.\n      error(filename, endlinenum, 'readability/braces', 4,\n            \"You don't need a ; after a }\")\n\n\ndef CheckEmptyBlockBody(filename, clean_lines, linenum, error):\n  \"\"\"Look for empty loop/conditional body with only a single semicolon.\n\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n\n  # Search for loop keywords at the beginning of the line.  Because only\n  # whitespaces are allowed before the keywords, this will also ignore most\n  # do-while-loops, since those lines should start with closing brace.\n  #\n  # We also check \"if\" blocks here, since an empty conditional block\n  # is likely an error.\n  line = clean_lines.elided[linenum]\n  matched = Match(r'\\s*(for|while|if)\\s*\\(', line)\n  if matched:\n    # Find the end of the conditional expression\n    (end_line, end_linenum, end_pos) = CloseExpression(\n        clean_lines, linenum, line.find('('))\n\n    # Output warning if what follows the condition expression is a semicolon.\n    # No warning for all other cases, including whitespace or newline, since we\n    # have a separate check for semicolons preceded by whitespace.\n    if end_pos >= 0 and Match(r';', end_line[end_pos:]):\n      if matched.group(1) == 'if':\n        error(filename, end_linenum, 'whitespace/empty_conditional_body', 5,\n              'Empty conditional bodies should use {}')\n      else:\n        error(filename, end_linenum, 'whitespace/empty_loop_body', 5,\n              'Empty loop bodies should use {} or continue')\n\n\ndef CheckCheck(filename, clean_lines, linenum, error):\n  \"\"\"Checks the use of CHECK and EXPECT macros.\n\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n\n  # Decide the set of replacement macros that should be suggested\n  lines = clean_lines.elided\n  check_macro = None\n  start_pos = -1\n  for macro in _CHECK_MACROS:\n    i = lines[linenum].find(macro)\n    if i >= 0:\n      check_macro = macro\n\n      # Find opening parenthesis.  Do a regular expression match here\n      # to make sure that we are matching the expected CHECK macro, as\n      # opposed to some other macro that happens to contain the CHECK\n      # substring.\n      matched = Match(r'^(.*\\b' + check_macro + r'\\s*)\\(', lines[linenum])\n      if not matched:\n        continue\n      start_pos = len(matched.group(1))\n      break\n  if not check_macro or start_pos < 0:\n    # Don't waste time here if line doesn't contain 'CHECK' or 'EXPECT'\n    return\n\n  # Find end of the boolean expression by matching parentheses\n  (last_line, end_line, end_pos) = CloseExpression(\n      clean_lines, linenum, start_pos)\n  if end_pos < 0:\n    return\n  if linenum == end_line:\n    expression = lines[linenum][start_pos + 1:end_pos - 1]\n  else:\n    expression = lines[linenum][start_pos + 1:]\n    for i in xrange(linenum + 1, end_line):\n      expression += lines[i]\n    expression += last_line[0:end_pos - 1]\n\n  # Parse expression so that we can take parentheses into account.\n  # This avoids false positives for inputs like \"CHECK((a < 4) == b)\",\n  # which is not replaceable by CHECK_LE.\n  lhs = ''\n  rhs = ''\n  operator = None\n  while expression:\n    matched = Match(r'^\\s*(<<|<<=|>>|>>=|->\\*|->|&&|\\|\\||'\n                    r'==|!=|>=|>|<=|<|\\()(.*)$', expression)\n    if matched:\n      token = matched.group(1)\n      if token == '(':\n        # Parenthesized operand\n        expression = matched.group(2)\n        (end, _) = FindEndOfExpressionInLine(expression, 0, 1, '(', ')')\n        if end < 0:\n          return  # Unmatched parenthesis\n        lhs += '(' + expression[0:end]\n        expression = expression[end:]\n      elif token in ('&&', '||'):\n        # Logical and/or operators.  This means the expression\n        # contains more than one term, for example:\n        #   CHECK(42 < a && a < b);\n        #\n        # These are not replaceable with CHECK_LE, so bail out early.\n        return\n      elif token in ('<<', '<<=', '>>', '>>=', '->*', '->'):\n        # Non-relational operator\n        lhs += token\n        expression = matched.group(2)\n      else:\n        # Relational operator\n        operator = token\n        rhs = matched.group(2)\n        break\n    else:\n      # Unparenthesized operand.  Instead of appending to lhs one character\n      # at a time, we do another regular expression match to consume several\n      # characters at once if possible.  Trivial benchmark shows that this\n      # is more efficient when the operands are longer than a single\n      # character, which is generally the case.\n      matched = Match(r'^([^-=!<>()&|]+)(.*)$', expression)\n      if not matched:\n        matched = Match(r'^(\\s*\\S)(.*)$', expression)\n        if not matched:\n          break\n      lhs += matched.group(1)\n      expression = matched.group(2)\n\n  # Only apply checks if we got all parts of the boolean expression\n  if not (lhs and operator and rhs):\n    return\n\n  # Check that rhs do not contain logical operators.  We already know\n  # that lhs is fine since the loop above parses out && and ||.\n  if rhs.find('&&') > -1 or rhs.find('||') > -1:\n    return\n\n  # At least one of the operands must be a constant literal.  This is\n  # to avoid suggesting replacements for unprintable things like\n  # CHECK(variable != iterator)\n  #\n  # The following pattern matches decimal, hex integers, strings, and\n  # characters (in that order).\n  lhs = lhs.strip()\n  rhs = rhs.strip()\n  match_constant = r'^([-+]?(\\d+|0[xX][0-9a-fA-F]+)[lLuU]{0,3}|\".*\"|\\'.*\\')$'\n  if Match(match_constant, lhs) or Match(match_constant, rhs):\n    # Note: since we know both lhs and rhs, we can provide a more\n    # descriptive error message like:\n    #   Consider using CHECK_EQ(x, 42) instead of CHECK(x == 42)\n    # Instead of:\n    #   Consider using CHECK_EQ instead of CHECK(a == b)\n    #\n    # We are still keeping the less descriptive message because if lhs\n    # or rhs gets long, the error message might become unreadable.\n    error(filename, linenum, 'readability/check', 2,\n          'Consider using %s instead of %s(a %s b)' % (\n              _CHECK_REPLACEMENT[check_macro][operator],\n              check_macro, operator))\n\n\ndef CheckAltTokens(filename, clean_lines, linenum, error):\n  \"\"\"Check alternative keywords being used in boolean expressions.\n\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n  line = clean_lines.elided[linenum]\n\n  # Avoid preprocessor lines\n  if Match(r'^\\s*#', line):\n    return\n\n  # Last ditch effort to avoid multi-line comments.  This will not help\n  # if the comment started before the current line or ended after the\n  # current line, but it catches most of the false positives.  At least,\n  # it provides a way to workaround this warning for people who use\n  # multi-line comments in preprocessor macros.\n  #\n  # TODO(unknown): remove this once cpplint has better support for\n  # multi-line comments.\n  if line.find('/*') >= 0 or line.find('*/') >= 0:\n    return\n\n  for match in _ALT_TOKEN_REPLACEMENT_PATTERN.finditer(line):\n    error(filename, linenum, 'readability/alt_tokens', 2,\n          'Use operator %s instead of %s' % (\n              _ALT_TOKEN_REPLACEMENT[match.group(1)], match.group(1)))\n\n\ndef GetLineWidth(line):\n  \"\"\"Determines the width of the line in column positions.\n\n  Args:\n    line: A string, which may be a Unicode string.\n\n  Returns:\n    The width of the line in column positions, accounting for Unicode\n    combining characters and wide characters.\n  \"\"\"\n  if isinstance(line, unicode):\n    width = 0\n    for uc in unicodedata.normalize('NFC', line):\n      if unicodedata.east_asian_width(uc) in ('W', 'F'):\n        width += 2\n      elif not unicodedata.combining(uc):\n        width += 1\n    return width\n  else:\n    return len(line)\n\n\ndef CheckStyle(filename, clean_lines, linenum, file_extension, nesting_state,\n               error):\n  \"\"\"Checks rules from the 'C++ style rules' section of cppguide.html.\n\n  Most of these rules are hard to test (naming, comment style), but we\n  do what we can.  In particular we check for 2-space indents, line lengths,\n  tab usage, spaces inside code, etc.\n\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    file_extension: The extension (without the dot) of the filename.\n    nesting_state: A _NestingState instance which maintains information about\n                   the current stack of nested blocks being parsed.\n    error: The function to call with any errors found.\n  \"\"\"\n\n  # Don't use \"elided\" lines here, otherwise we can't check commented lines.\n  # Don't want to use \"raw\" either, because we don't want to check inside C++11\n  # raw strings,\n  raw_lines = clean_lines.lines_without_raw_strings\n  line = raw_lines[linenum]\n\n  if line.find('\\t') != -1:\n    # SRombauts:\n    error(filename, linenum, 'whitespace/tab', 5,\n          'Tab found; use spaces indents only')\n\n  # One or three blank spaces at the beginning of the line is weird; it's\n  # hard to reconcile that with 2-space indents.\n  # NOTE: here are the conditions rob pike used for his tests.  Mine aren't\n  # as sophisticated, but it may be worth becoming so:  RLENGTH==initial_spaces\n  # if(RLENGTH > 20) complain = 0;\n  # if(match($0, \" +(error|private|public|protected):\")) complain = 0;\n  # if(match(prev, \"&& *$\")) complain = 0;\n  # if(match(prev, \"\\\\|\\\\| *$\")) complain = 0;\n  # if(match(prev, \"[\\\",=><] *$\")) complain = 0;\n  # if(match($0, \" <<\")) complain = 0;\n  # if(match(prev, \" +for \\\\(\")) complain = 0;\n  # if(prevodd && match(prevprev, \" +for \\\\(\")) complain = 0;\n  initial_spaces = 0\n  cleansed_line = clean_lines.elided[linenum]\n  while initial_spaces < len(line) and line[initial_spaces] == ' ':\n    initial_spaces += 1\n  if line and line[-1].isspace():\n    error(filename, linenum, 'whitespace/end_of_line', 4,\n          'Line ends in whitespace.  Consider deleting these extra spaces.')\n  # There are certain situations we allow one space, notably for labels\n  # SRombauts:\n  elif ((initial_spaces in (1,2,3,5,6,7)) and\n        not Match(r'\\s*\\w+\\s*:\\s*$', cleansed_line)):\n    error(filename, linenum, 'whitespace/indent', 3,\n          'Weird number of spaces at line-start.  '\n          'Are you using a 4-space indent?')\n\n  # Check if the line is a header guard.\n  is_header_guard = False\n  if file_extension == 'h':\n    cppvar = GetHeaderGuardCPPVariable(filename)\n    if (line.startswith('#ifndef %s' % cppvar) or\n        line.startswith('#define %s' % cppvar) or\n        line.startswith('#endif  // %s' % cppvar)):\n      is_header_guard = True\n  # #include lines and header guards can be long, since there's no clean way to\n  # split them.\n  #\n  # URLs can be long too.  It's possible to split these, but it makes them\n  # harder to cut&paste.\n  #\n  # The \"$Id:...$\" comment may also get very long without it being the\n  # developers fault.\n  if (not line.startswith('#include') and not is_header_guard and\n      not Match(r'^\\s*//.*http(s?)://\\S*$', line) and\n      not Match(r'^// \\$Id:.*#[0-9]+ \\$$', line)):\n    line_width = GetLineWidth(line)\n    extended_length = int((_line_length * 1.25))\n    if line_width > extended_length:\n      error(filename, linenum, 'whitespace/line_length', 4,\n            'Lines should very rarely be longer than %i characters' %\n            extended_length)\n    elif line_width > _line_length:\n      error(filename, linenum, 'whitespace/line_length', 3,\n            'Lines should be <= %i characters long' % _line_length)\n\n  if (cleansed_line.count(';') > 1 and\n      # for loops are allowed two ;'s (and may run over two lines).\n      cleansed_line.find('for') == -1 and\n      (GetPreviousNonBlankLine(clean_lines, linenum)[0].find('for') == -1 or\n       GetPreviousNonBlankLine(clean_lines, linenum)[0].find(';') != -1) and\n      # It's ok to have many commands in a switch case that fits in 1 line\n      not ((cleansed_line.find('case ') != -1 or\n            cleansed_line.find('default:') != -1) and\n           cleansed_line.find('break;') != -1)):\n    error(filename, linenum, 'whitespace/newline', 0,\n          'More than one command on the same line')\n\n  # Some more style checks\n  CheckBraces(filename, clean_lines, linenum, error)\n  CheckEmptyBlockBody(filename, clean_lines, linenum, error)\n  CheckAccess(filename, clean_lines, linenum, nesting_state, error)\n  CheckSpacing(filename, clean_lines, linenum, nesting_state, error)\n  CheckCheck(filename, clean_lines, linenum, error)\n  CheckAltTokens(filename, clean_lines, linenum, error)\n  classinfo = nesting_state.InnermostClass()\n  if classinfo:\n    CheckSectionSpacing(filename, clean_lines, classinfo, linenum, error)\n\n\n_RE_PATTERN_INCLUDE_NEW_STYLE = re.compile(r'#include +\"[^/]+\\.h\"')\n_RE_PATTERN_INCLUDE = re.compile(r'^\\s*#\\s*include\\s*([<\"])([^>\"]*)[>\"].*$')\n# Matches the first component of a filename delimited by -s and _s. That is:\n#  _RE_FIRST_COMPONENT.match('foo').group(0) == 'foo'\n#  _RE_FIRST_COMPONENT.match('foo.cc').group(0) == 'foo'\n#  _RE_FIRST_COMPONENT.match('foo-bar_baz.cc').group(0) == 'foo'\n#  _RE_FIRST_COMPONENT.match('foo_bar-baz.cc').group(0) == 'foo'\n_RE_FIRST_COMPONENT = re.compile(r'^[^-_.]+')\n\n\ndef _DropCommonSuffixes(filename):\n  \"\"\"Drops common suffixes like _test.cc or -inl.h from filename.\n\n  For example:\n    >>> _DropCommonSuffixes('foo/foo-inl.h')\n    'foo/foo'\n    >>> _DropCommonSuffixes('foo/bar/foo.cc')\n    'foo/bar/foo'\n    >>> _DropCommonSuffixes('foo/foo_internal.h')\n    'foo/foo'\n    >>> _DropCommonSuffixes('foo/foo_unusualinternal.h')\n    'foo/foo_unusualinternal'\n\n  Args:\n    filename: The input filename.\n\n  Returns:\n    The filename with the common suffix removed.\n  \"\"\"\n  for suffix in ('test.cc', 'regtest.cc', 'unittest.cc',\n                 'inl.h', 'impl.h', 'internal.h'):\n    if (filename.endswith(suffix) and len(filename) > len(suffix) and\n        filename[-len(suffix) - 1] in ('-', '_')):\n      return filename[:-len(suffix) - 1]\n  return os.path.splitext(filename)[0]\n\n\ndef _IsTestFilename(filename):\n  \"\"\"Determines if the given filename has a suffix that identifies it as a test.\n\n  Args:\n    filename: The input filename.\n\n  Returns:\n    True if 'filename' looks like a test, False otherwise.\n  \"\"\"\n  if (filename.endswith('_test.cc') or\n      filename.endswith('_unittest.cc') or\n      filename.endswith('_regtest.cc')):\n    return True\n  else:\n    return False\n\n\ndef _ClassifyInclude(fileinfo, include, is_system):\n  \"\"\"Figures out what kind of header 'include' is.\n\n  Args:\n    fileinfo: The current file cpplint is running over. A FileInfo instance.\n    include: The path to a #included file.\n    is_system: True if the #include used <> rather than \"\".\n\n  Returns:\n    One of the _XXX_HEADER constants.\n\n  For example:\n    >>> _ClassifyInclude(FileInfo('foo/foo.cc'), 'stdio.h', True)\n    _C_SYS_HEADER\n    >>> _ClassifyInclude(FileInfo('foo/foo.cc'), 'string', True)\n    _CPP_SYS_HEADER\n    >>> _ClassifyInclude(FileInfo('foo/foo.cc'), 'foo/foo.h', False)\n    _LIKELY_MY_HEADER\n    >>> _ClassifyInclude(FileInfo('foo/foo_unknown_extension.cc'),\n    ...                  'bar/foo_other_ext.h', False)\n    _POSSIBLE_MY_HEADER\n    >>> _ClassifyInclude(FileInfo('foo/foo.cc'), 'foo/bar.h', False)\n    _OTHER_HEADER\n  \"\"\"\n  # This is a list of all standard c++ header files, except\n  # those already checked for above.\n  is_cpp_h = include in _CPP_HEADERS\n\n  if is_system:\n    if is_cpp_h:\n      return _CPP_SYS_HEADER\n    else:\n      return _C_SYS_HEADER\n\n  # If the target file and the include we're checking share a\n  # basename when we drop common extensions, and the include\n  # lives in . , then it's likely to be owned by the target file.\n  target_dir, target_base = (\n      os.path.split(_DropCommonSuffixes(fileinfo.RepositoryName())))\n  include_dir, include_base = os.path.split(_DropCommonSuffixes(include))\n  if target_base == include_base and (\n      include_dir == target_dir or\n      include_dir == os.path.normpath(target_dir + '/../public')):\n    return _LIKELY_MY_HEADER\n\n  # If the target and include share some initial basename\n  # component, it's possible the target is implementing the\n  # include, so it's allowed to be first, but we'll never\n  # complain if it's not there.\n  target_first_component = _RE_FIRST_COMPONENT.match(target_base)\n  include_first_component = _RE_FIRST_COMPONENT.match(include_base)\n  if (target_first_component and include_first_component and\n      target_first_component.group(0) ==\n      include_first_component.group(0)):\n    return _POSSIBLE_MY_HEADER\n\n  return _OTHER_HEADER\n\n\n\ndef CheckIncludeLine(filename, clean_lines, linenum, include_state, error):\n  \"\"\"Check rules that are applicable to #include lines.\n\n  Strings on #include lines are NOT removed from elided line, to make\n  certain tasks easier. However, to prevent false positives, checks\n  applicable to #include lines in CheckLanguage must be put here.\n\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    include_state: An _IncludeState instance in which the headers are inserted.\n    error: The function to call with any errors found.\n  \"\"\"\n  fileinfo = FileInfo(filename)\n\n  line = clean_lines.lines[linenum]\n\n  # \"include\" should use the new style \"foo/bar.h\" instead of just \"bar.h\"\n  if _RE_PATTERN_INCLUDE_NEW_STYLE.search(line):\n    error(filename, linenum, 'build/include', 3,\n          'Include the directory when naming .h files')\n\n  # we shouldn't include a file more than once. actually, there are a\n  # handful of instances where doing so is okay, but in general it's\n  # not.\n  match = _RE_PATTERN_INCLUDE.search(line)\n  if match:\n    include = match.group(2)\n    is_system = (match.group(1) == '<')\n    if include in include_state:\n      error(filename, linenum, 'build/include', 5,\n            '\"%s\" already included at %s:%s' %\n            (include, filename, include_state[include]))\n    else:\n      include_state[include] = linenum\n\n      # We want to ensure that headers appear in the right order:\n      # 1) for foo.cc, foo.h  (preferred location)\n      # 2) c system files\n      # 3) cpp system files\n      # 4) for foo.cc, foo.h  (deprecated location)\n      # 5) other google headers\n      #\n      # We classify each include statement as one of those 5 types\n      # using a number of techniques. The include_state object keeps\n      # track of the highest type seen, and complains if we see a\n      # lower type after that.\n      error_message = include_state.CheckNextIncludeOrder(\n          _ClassifyInclude(fileinfo, include, is_system))\n      if error_message:\n        error(filename, linenum, 'build/include_order', 2,\n              '%s. Should be: %s.h, c system, c++ system, other.' %\n              (error_message, fileinfo.BaseName()))\n      canonical_include = include_state.CanonicalizeAlphabeticalOrder(include)\n      if not include_state.IsInAlphabeticalOrder(\n          clean_lines, linenum, canonical_include):\n        error(filename, linenum, 'build/include_alpha', 3,\n              'Include \"%s\" not in alphabetical order' % include)\n      include_state.SetLastHeader(canonical_include)\n\n  # Look for any of the stream classes that are part of standard C++.\n  match = _RE_PATTERN_INCLUDE.match(line)\n  if match:\n    include = match.group(2)\n    if Match(r'(f|ind|io|i|o|parse|pf|stdio|str|)?stream$', include):\n      # Many unit tests use cout, so we exempt them.\n      if not _IsTestFilename(filename):\n        error(filename, linenum, 'readability/streams', 0,\n              'Streams are highly discouraged.')\n\n\ndef _GetTextInside(text, start_pattern):\n  r\"\"\"Retrieves all the text between matching open and close parentheses.\n\n  Given a string of lines and a regular expression string, retrieve all the text\n  following the expression and between opening punctuation symbols like\n  (, [, or {, and the matching close-punctuation symbol. This properly nested\n  occurrences of the punctuations, so for the text like\n    printf(a(), b(c()));\n  a call to _GetTextInside(text, r'printf\\(') will return 'a(), b(c())'.\n  start_pattern must match string having an open punctuation symbol at the end.\n\n  Args:\n    text: The lines to extract text. Its comments and strings must be elided.\n           It can be single line and can span multiple lines.\n    start_pattern: The regexp string indicating where to start extracting\n                   the text.\n  Returns:\n    The extracted text.\n    None if either the opening string or ending punctuation could not be found.\n  \"\"\"\n  # TODO(sugawarayu): Audit cpplint.py to see what places could be profitably\n  # rewritten to use _GetTextInside (and use inferior regexp matching today).\n\n  # Give opening punctuations to get the matching close-punctuations.\n  matching_punctuation = {'(': ')', '{': '}', '[': ']'}\n  closing_punctuation = set(matching_punctuation.values())\n\n  # Find the position to start extracting text.\n  match = re.search(start_pattern, text, re.M)\n  if not match:  # start_pattern not found in text.\n    return None\n  start_position = match.end(0)\n\n  assert start_position > 0, (\n      'start_pattern must ends with an opening punctuation.')\n  assert text[start_position - 1] in matching_punctuation, (\n      'start_pattern must ends with an opening punctuation.')\n  # Stack of closing punctuations we expect to have in text after position.\n  punctuation_stack = [matching_punctuation[text[start_position - 1]]]\n  position = start_position\n  while punctuation_stack and position < len(text):\n    if text[position] == punctuation_stack[-1]:\n      punctuation_stack.pop()\n    elif text[position] in closing_punctuation:\n      # A closing punctuation without matching opening punctuations.\n      return None\n    elif text[position] in matching_punctuation:\n      punctuation_stack.append(matching_punctuation[text[position]])\n    position += 1\n  if punctuation_stack:\n    # Opening punctuations left without matching close-punctuations.\n    return None\n  # punctuations match.\n  return text[start_position:position - 1]\n\n\n# Patterns for matching call-by-reference parameters.\n#\n# Supports nested templates up to 2 levels deep using this messy pattern:\n#   < (?: < (?: < [^<>]*\n#               >\n#           |   [^<>] )*\n#         >\n#     |   [^<>] )*\n#   >\n_RE_PATTERN_IDENT = r'[_a-zA-Z]\\w*'  # =~ [[:alpha:]][[:alnum:]]*\n_RE_PATTERN_TYPE = (\n    r'(?:const\\s+)?(?:typename\\s+|class\\s+|struct\\s+|union\\s+|enum\\s+)?'\n    r'(?:\\w|'\n    r'\\s*<(?:<(?:<[^<>]*>|[^<>])*>|[^<>])*>|'\n    r'::)+')\n# A call-by-reference parameter ends with '& identifier'.\n_RE_PATTERN_REF_PARAM = re.compile(\n    r'(' + _RE_PATTERN_TYPE + r'(?:\\s*(?:\\bconst\\b|[*]))*\\s*'\n    r'&\\s*' + _RE_PATTERN_IDENT + r')\\s*(?:=[^,()]+)?[,)]')\n# A call-by-const-reference parameter either ends with 'const& identifier'\n# or looks like 'const type& identifier' when 'type' is atomic.\n_RE_PATTERN_CONST_REF_PARAM = (\n    r'(?:.*\\s*\\bconst\\s*&\\s*' + _RE_PATTERN_IDENT +\n    r'|const\\s+' + _RE_PATTERN_TYPE + r'\\s*&\\s*' + _RE_PATTERN_IDENT + r')')\n\n\ndef CheckLanguage(filename, clean_lines, linenum, file_extension,\n                  include_state, nesting_state, error):\n  \"\"\"Checks rules from the 'C++ language rules' section of cppguide.html.\n\n  Some of these rules are hard to test (function overloading, using\n  uint32 inappropriately), but we do the best we can.\n\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    file_extension: The extension (without the dot) of the filename.\n    include_state: An _IncludeState instance in which the headers are inserted.\n    nesting_state: A _NestingState instance which maintains information about\n                   the current stack of nested blocks being parsed.\n    error: The function to call with any errors found.\n  \"\"\"\n  # If the line is empty or consists of entirely a comment, no need to\n  # check it.\n  line = clean_lines.elided[linenum]\n  if not line:\n    return\n\n  match = _RE_PATTERN_INCLUDE.search(line)\n  if match:\n    CheckIncludeLine(filename, clean_lines, linenum, include_state, error)\n    return\n\n  # Reset include state across preprocessor directives.  This is meant\n  # to silence warnings for conditional includes.\n  if Match(r'^\\s*#\\s*(?:ifdef|elif|else|endif)\\b', line):\n    include_state.ResetSection()\n\n  # Make Windows paths like Unix.\n  fullname = os.path.abspath(filename).replace('\\\\', '/')\n\n  # TODO(unknown): figure out if they're using default arguments in fn proto.\n\n  # Check to see if they're using an conversion function cast.\n  # I just try to capture the most common basic types, though there are more.\n  # Parameterless conversion functions, such as bool(), are allowed as they are\n  # probably a member operator declaration or default constructor.\n  match = Search(\n      r'(\\bnew\\s+)?\\b'  # Grab 'new' operator, if it's there\n      r'(int|short|long|float|double|bool|char|const char*|int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t)'\n      r'(\\([^)].*)', line)\n  if match:\n    matched_new = match.group(1)\n    matched_type = match.group(2)\n    matched_funcptr = match.group(3)\n\n    # gMock methods are defined using some variant of MOCK_METHODx(name, type)\n    # where type may be float(), int(string), etc.  Without context they are\n    # virtually indistinguishable from int(x) casts. Likewise, gMock's\n    # MockCallback takes a template parameter of the form return_type(arg_type),\n    # which looks much like the cast we're trying to detect.\n    #\n    # std::function<> wrapper has a similar problem.\n    #\n    # Return types for function pointers also look like casts if they\n    # don't have an extra space.\n    if (matched_new is None and  # If new operator, then this isn't a cast\n        not (Match(r'^\\s*MOCK_(CONST_)?METHOD\\d+(_T)?\\(', line) or\n             Search(r'\\bMockCallback<.*>', line) or\n             Search(r'\\bstd::function<.*>', line)) and\n        not (matched_funcptr and\n             Match(r'\\((?:[^() ]+::\\s*\\*\\s*)?[^() ]+\\)\\s*\\(',\n                   matched_funcptr))):\n      # Try a bit harder to catch gmock lines: the only place where\n      # something looks like an old-style cast is where we declare the\n      # return type of the mocked method, and the only time when we\n      # are missing context is if MOCK_METHOD was split across\n      # multiple lines.  The missing MOCK_METHOD is usually one or two\n      # lines back, so scan back one or two lines.\n      #\n      # It's not possible for gmock macros to appear in the first 2\n      # lines, since the class head + section name takes up 2 lines.\n      if (linenum < 2 or\n          not (Match(r'^\\s*MOCK_(?:CONST_)?METHOD\\d+(?:_T)?\\((?:\\S+,)?\\s*$',\n                     clean_lines.elided[linenum - 1]) or\n               Match(r'^\\s*MOCK_(?:CONST_)?METHOD\\d+(?:_T)?\\(\\s*$',\n                     clean_lines.elided[linenum - 2]))):\n        error(filename, linenum, 'readability/casting', 4,\n              'Using deprecated casting style.  '\n              'Use static_cast<%s>(...) instead' %\n              matched_type)\n\n  # SRombauts: adding many builtin type\n  CheckCStyleCast(filename, linenum, line, clean_lines.raw_lines[linenum],\n                  'static_cast',\n                  r'\\((int|float|double|bool|long|short|char|unsigned long|unsigned int|unsigned short|unsigned char|size_t|time_t|u?int(16|32|64))\\)', error)\n\n  # This doesn't catch all cases. Consider (const char * const)\"hello\".\n  #\n  # (char *) \"foo\" should always be a const_cast (reinterpret_cast won't\n  # compile).\n  if CheckCStyleCast(filename, linenum, line, clean_lines.raw_lines[linenum],\n                     'const_cast', r'\\((char\\s?\\*+\\s?)\\)\\s*\"', error):\n    pass\n  else:\n    # Check pointer casts for other than string constants\n    CheckCStyleCast(filename, linenum, line, clean_lines.raw_lines[linenum],\n                    'reinterpret_cast', r'\\((\\w+\\s?\\*+\\s?)\\)', error)\n\n  # In addition, we look for people taking the address of a cast.  This\n  # is dangerous -- casts can assign to temporaries, so the pointer doesn't\n  # point where you think.\n  match = Search(\n      r'(?:&\\(([^)]+)\\)[\\w(])|'\n      r'(?:&(static|dynamic|down|reinterpret)_cast\\b)', line)\n  if match and match.group(1) != '*':\n    error(filename, linenum, 'runtime/casting', 4,\n          ('Are you taking an address of a cast?  '\n           'This is dangerous: could be a temp var.  '\n           'Take the address before doing the cast, rather than after'))\n\n  # Create an extended_line, which is the concatenation of the current and\n  # next lines, for more effective checking of code that may span more than one\n  # line.\n  if linenum + 1 < clean_lines.NumLines():\n    extended_line = line + clean_lines.elided[linenum + 1]\n  else:\n    extended_line = line\n\n  # Check for people declaring static/global STL strings at the top level.\n  # This is dangerous because the C++ language does not guarantee that\n  # globals with constructors are initialized before the first access.\n  match = Match(\n      r'((?:|static +)(?:|const +))string +([a-zA-Z0-9_:]+)\\b(.*)',\n      line)\n  # Make sure it's not a function.\n  # Function template specialization looks like: \"string foo<Type>(...\".\n  # Class template definitions look like: \"string Foo<Type>::Method(...\".\n  #\n  # Also ignore things that look like operators.  These are matched separately\n  # because operator names cross non-word boundaries.  If we change the pattern\n  # above, we would decrease the accuracy of matching identifiers.\n  if (match and\n      not Search(r'\\boperator\\W', line) and\n      not Match(r'\\s*(<.*>)?(::[a-zA-Z0-9_]+)?\\s*\\(([^\"]|$)', match.group(3))):\n    error(filename, linenum, 'runtime/string', 4,\n          'For a static/global string constant, use a C style string instead: '\n          '\"%schar %s[]\".' %\n          (match.group(1), match.group(2)))\n\n  if Search(r'\\b([A-Za-z0-9_]*_)\\(\\1\\)', line):\n    error(filename, linenum, 'runtime/init', 4,\n          'You seem to be initializing a member variable with itself.')\n\n  if file_extension == 'h':\n    # TODO(unknown): check that 1-arg constructors are explicit.\n    #                How to tell it's a constructor?\n    #                (handled in CheckForNonStandardConstructs for now)\n    # TODO(unknown): check that classes have DISALLOW_EVIL_CONSTRUCTORS\n    #                (level 1 error)\n    pass\n\n  # Check if people are using the verboten C basic types.  The only exception\n  # we regularly allow is \"unsigned short port\" for port.\n  if Search(r'\\bshort port\\b', line):\n    if not Search(r'\\bunsigned short port\\b', line):\n      error(filename, linenum, 'runtime/int', 4,\n            'Use \"unsigned short\" for ports, not \"short\"')\n  else:\n    match = Search(r'\\b(short|long(?! +double)|long long)\\b', line)\n    if match:\n      error(filename, linenum, 'runtime/int', 2,\n            'Use int16/int64/etc, rather than the C type %s' % match.group(1))\n\n  # When snprintf is used, the second argument shouldn't be a literal.\n  match = Search(r'snprintf\\s*\\(([^,]*),\\s*([0-9]*)\\s*,', line)\n  if match and match.group(2) != '0':\n    # If 2nd arg is zero, snprintf is used to calculate size.\n    error(filename, linenum, 'runtime/printf', 3,\n          'If you can, use sizeof(%s) instead of %s as the 2nd arg '\n          'to snprintf.' % (match.group(1), match.group(2)))\n\n  # Check if some verboten C functions are being used.\n  if Search(r'\\bsprintf\\b', line):\n    error(filename, linenum, 'runtime/printf', 5,\n          'Never use sprintf.  Use snprintf instead.')\n  match = Search(r'\\b(strcpy|strcat)\\b', line)\n  if match:\n    error(filename, linenum, 'runtime/printf', 4,\n          'Almost always, snprintf is better than %s' % match.group(1))\n\n  # Check if some verboten operator overloading is going on\n  # TODO(unknown): catch out-of-line unary operator&:\n  #   class X {};\n  #   int operator&(const X& x) { return 42; }  // unary operator&\n  # The trick is it's hard to tell apart from binary operator&:\n  #   class Y { int operator&(const Y& x) { return 23; } }; // binary operator&\n  if Search(r'\\boperator\\s*&\\s*\\(\\s*\\)', line):\n    error(filename, linenum, 'runtime/operator', 4,\n          'Unary operator& is dangerous.  Do not use it.')\n\n  # Check for suspicious usage of \"if\" like\n  # } if (a == b) {\n  if Search(r'\\}\\s*if\\s*\\(', line):\n    error(filename, linenum, 'readability/braces', 4,\n          'Did you mean \"else if\"? If not, start a new line for \"if\".')\n\n  # Check for potential format string bugs like printf(foo).\n  # We constrain the pattern not to pick things like DocidForPrintf(foo).\n  # Not perfect but it can catch printf(foo.c_str()) and printf(foo->c_str())\n  # TODO(sugawarayu): Catch the following case. Need to change the calling\n  # convention of the whole function to process multiple line to handle it.\n  #   printf(\n  #       boy_this_is_a_really_long_variable_that_cannot_fit_on_the_prev_line);\n  printf_args = _GetTextInside(line, r'(?i)\\b(string)?printf\\s*\\(')\n  if printf_args:\n    match = Match(r'([\\w.\\->()]+)$', printf_args)\n    if match and match.group(1) != '__VA_ARGS__':\n      function_name = re.search(r'\\b((?:string)?printf)\\s*\\(',\n                                line, re.I).group(1)\n      error(filename, linenum, 'runtime/printf', 4,\n            'Potential format string bug. Do %s(\"%%s\", %s) instead.'\n            % (function_name, match.group(1)))\n\n  # Check for potential memset bugs like memset(buf, sizeof(buf), 0).\n  match = Search(r'memset\\s*\\(([^,]*),\\s*([^,]*),\\s*0\\s*\\)', line)\n  if match and not Match(r\"^''|-?[0-9]+|0x[0-9A-Fa-f]$\", match.group(2)):\n    error(filename, linenum, 'runtime/memset', 4,\n          'Did you mean \"memset(%s, 0, %s)\"?'\n          % (match.group(1), match.group(2)))\n\n  if Search(r'\\busing namespace\\b', line):\n    error(filename, linenum, 'build/namespaces', 5,\n          'Do not use namespace using-directives.  '\n          'Use using-declarations instead.')\n\n  # Detect variable-length arrays.\n  match = Match(r'\\s*(.+::)?(\\w+) [a-z]\\w*\\[(.+)];', line)\n  if (match and match.group(2) != 'return' and match.group(2) != 'delete' and\n      match.group(3).find(']') == -1):\n    # Split the size using space and arithmetic operators as delimiters.\n    # If any of the resulting tokens are not compile time constants then\n    # report the error.\n    tokens = re.split(r'\\s|\\+|\\-|\\*|\\/|<<|>>]', match.group(3))\n    is_const = True\n    skip_next = False\n    for tok in tokens:\n      if skip_next:\n        skip_next = False\n        continue\n\n      if Search(r'sizeof\\(.+\\)', tok): continue\n      if Search(r'arraysize\\(\\w+\\)', tok): continue\n\n      tok = tok.lstrip('(')\n      tok = tok.rstrip(')')\n      if not tok: continue\n      if Match(r'\\d+', tok): continue\n      if Match(r'0[xX][0-9a-fA-F]+', tok): continue\n      if Match(r'k[A-Z0-9]\\w*', tok): continue\n      if Match(r'(.+::)?k[A-Z0-9]\\w*', tok): continue\n      if Match(r'(.+::)?[A-Z][A-Z0-9_]*', tok): continue\n      # A catch all for tricky sizeof cases, including 'sizeof expression',\n      # 'sizeof(*type)', 'sizeof(const type)', 'sizeof(struct StructName)'\n      # requires skipping the next token because we split on ' ' and '*'.\n      if tok.startswith('sizeof'):\n        skip_next = True\n        continue\n      is_const = False\n      break\n    if not is_const:\n      error(filename, linenum, 'runtime/arrays', 1,\n            'Do not use variable-length arrays.  Use an appropriately named '\n            \"('k' followed by CamelCase) compile-time constant for the size.\")\n\n  # If DISALLOW_EVIL_CONSTRUCTORS, DISALLOW_COPY_AND_ASSIGN, or\n  # DISALLOW_IMPLICIT_CONSTRUCTORS is present, then it should be the last thing\n  # in the class declaration.\n  match = Match(\n      (r'\\s*'\n       r'(DISALLOW_(EVIL_CONSTRUCTORS|COPY_AND_ASSIGN|IMPLICIT_CONSTRUCTORS))'\n       r'\\(.*\\);$'),\n      line)\n  if match and linenum + 1 < clean_lines.NumLines():\n    next_line = clean_lines.elided[linenum + 1]\n    # We allow some, but not all, declarations of variables to be present\n    # in the statement that defines the class.  The [\\w\\*,\\s]* fragment of\n    # the regular expression below allows users to declare instances of\n    # the class or pointers to instances, but not less common types such\n    # as function pointers or arrays.  It's a tradeoff between allowing\n    # reasonable code and avoiding trying to parse more C++ using regexps.\n    if not Search(r'^\\s*}[\\w\\*,\\s]*;', next_line):\n      error(filename, linenum, 'readability/constructors', 3,\n            match.group(1) + ' should be the last thing in the class')\n\n  # Check for use of unnamed namespaces in header files.  Registration\n  # macros are typically OK, so we allow use of \"namespace {\" on lines\n  # that end with backslashes.\n  if (file_extension == 'h'\n      and Search(r'\\bnamespace\\s*{', line)\n      and line[-1] != '\\\\'):\n    error(filename, linenum, 'build/namespaces', 4,\n          'Do not use unnamed namespaces in header files.  See '\n          'http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#Namespaces'\n          ' for more information.')\n\n  # SRombauts: Detects post increment/decrement: sugests preincrement/predecrement instead\n  match = Search(r'(\\w+)(\\+\\+|--)', line)\n  if match:\n    error(filename, linenum, 'runtime/preincrement', 4,\n          'Considere using \"%s%s\". '\n          '\"%s%s\" does a copy of \"%s\" which can be expensive for non simple scalar type.'\n          % (match.group(2), match.group(1), match.group(1), match.group(2), match.group(1)) )\n\n\ndef CheckForNonConstReference(filename, clean_lines, linenum,\n                              nesting_state, error):\n  \"\"\"Check for non-const references.\n\n  Separate from CheckLanguage since it scans backwards from current\n  line, instead of scanning forward.\n\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    nesting_state: A _NestingState instance which maintains information about\n                   the current stack of nested blocks being parsed.\n    error: The function to call with any errors found.\n  \"\"\"\n  # Do nothing if there is no '&' on current line.\n  line = clean_lines.elided[linenum]\n  if '&' not in line:\n    return\n\n  # Long type names may be broken across multiple lines, usually in one\n  # of these forms:\n  #   LongType\n  #       ::LongTypeContinued &identifier\n  #   LongType::\n  #       LongTypeContinued &identifier\n  #   LongType<\n  #       ...>::LongTypeContinued &identifier\n  #\n  # If we detected a type split across two lines, join the previous\n  # line to current line so that we can match const references\n  # accordingly.\n  #\n  # Note that this only scans back one line, since scanning back\n  # arbitrary number of lines would be expensive.  If you have a type\n  # that spans more than 2 lines, please use a typedef.\n  if linenum > 1:\n    previous = None\n    if Match(r'\\s*::(?:[\\w<>]|::)+\\s*&\\s*\\S', line):\n      # previous_line\\n + ::current_line\n      previous = Search(r'\\b((?:const\\s*)?(?:[\\w<>]|::)+[\\w<>])\\s*$',\n                        clean_lines.elided[linenum - 1])\n    elif Match(r'\\s*[a-zA-Z_]([\\w<>]|::)+\\s*&\\s*\\S', line):\n      # previous_line::\\n + current_line\n      previous = Search(r'\\b((?:const\\s*)?(?:[\\w<>]|::)+::)\\s*$',\n                        clean_lines.elided[linenum - 1])\n    if previous:\n      line = previous.group(1) + line.lstrip()\n    else:\n      # Check for templated parameter that is split across multiple lines\n      endpos = line.rfind('>')\n      if endpos > -1:\n        (_, startline, startpos) = ReverseCloseExpression(\n            clean_lines, linenum, endpos)\n        if startpos > -1 and startline < linenum:\n          # Found the matching < on an earlier line, collect all\n          # pieces up to current line.\n          line = ''\n          for i in xrange(startline, linenum + 1):\n            line += clean_lines.elided[i].strip()\n\n  # Check for non-const references in function parameters.  A single '&' may\n  # found in the following places:\n  #   inside expression: binary & for bitwise AND\n  #   inside expression: unary & for taking the address of something\n  #   inside declarators: reference parameter\n  # We will exclude the first two cases by checking that we are not inside a\n  # function body, including one that was just introduced by a trailing '{'.\n  # TODO(unknwon): Doesn't account for preprocessor directives.\n  # TODO(unknown): Doesn't account for 'catch(Exception& e)' [rare].\n  check_params = False\n  if not nesting_state.stack:\n    check_params = True  # top level\n  elif (isinstance(nesting_state.stack[-1], _ClassInfo) or\n        isinstance(nesting_state.stack[-1], _NamespaceInfo)):\n    check_params = True  # within class or namespace\n  elif Match(r'.*{\\s*$', line):\n    if (len(nesting_state.stack) == 1 or\n        isinstance(nesting_state.stack[-2], _ClassInfo) or\n        isinstance(nesting_state.stack[-2], _NamespaceInfo)):\n      check_params = True  # just opened global/class/namespace block\n  # We allow non-const references in a few standard places, like functions\n  # called \"swap()\" or iostream operators like \"<<\" or \">>\".  Do not check\n  # those function parameters.\n  #\n  # We also accept & in static_assert, which looks like a function but\n  # it's actually a declaration expression.\n  whitelisted_functions = (r'(?:[sS]wap(?:<\\w:+>)?|'\n                           r'operator\\s*[<>][<>]|'\n                           r'static_assert|COMPILE_ASSERT'\n                           r')\\s*\\(')\n  if Search(whitelisted_functions, line):\n    check_params = False\n  elif not Search(r'\\S+\\([^)]*$', line):\n    # Don't see a whitelisted function on this line.  Actually we\n    # didn't see any function name on this line, so this is likely a\n    # multi-line parameter list.  Try a bit harder to catch this case.\n    for i in xrange(2):\n      if (linenum > i and\n          Search(whitelisted_functions, clean_lines.elided[linenum - i - 1])):\n        check_params = False\n        break\n\n  if check_params:\n    decls = ReplaceAll(r'{[^}]*}', ' ', line)  # exclude function body\n    for parameter in re.findall(_RE_PATTERN_REF_PARAM, decls):\n      if not Match(_RE_PATTERN_CONST_REF_PARAM, parameter):\n        error(filename, linenum, 'runtime/references', 2,\n              'Is this a non-const reference? '\n              'If so, make const or use a pointer: ' +\n              ReplaceAll(' *<', '<', parameter))\n\n\ndef CheckCStyleCast(filename, linenum, line, raw_line, cast_type, pattern,\n                    error):\n  \"\"\"Checks for a C-style cast by looking for the pattern.\n\n  Args:\n    filename: The name of the current file.\n    linenum: The number of the line to check.\n    line: The line of code to check.\n    raw_line: The raw line of code to check, with comments.\n    cast_type: The string for the C++ cast to recommend.  This is either\n      reinterpret_cast, static_cast, or const_cast, depending.\n    pattern: The regular expression used to find C-style casts.\n    error: The function to call with any errors found.\n\n  Returns:\n    True if an error was emitted.\n    False otherwise.\n  \"\"\"\n  match = Search(pattern, line)\n  if not match:\n    return False\n\n  # Exclude lines with sizeof, since sizeof looks like a cast.\n  sizeof_match = Match(r'.*sizeof\\s*$', line[0:match.start(1) - 1])\n  if sizeof_match:\n    return False\n\n  # operator++(int) and operator--(int)\n  if (line[0:match.start(1) - 1].endswith(' operator++') or\n      line[0:match.start(1) - 1].endswith(' operator--')):\n    return False\n\n  # A single unnamed argument for a function tends to look like old\n  # style cast.  If we see those, don't issue warnings for deprecated\n  # casts, instead issue warnings for unnamed arguments where\n  # appropriate.\n  #\n  # These are things that we want warnings for, since the style guide\n  # explicitly require all parameters to be named:\n  #   Function(int);\n  #   Function(int) {\n  #   ConstMember(int) const;\n  #   ConstMember(int) const {\n  #   ExceptionMember(int) throw (...);\n  #   ExceptionMember(int) throw (...) {\n  #   PureVirtual(int) = 0;\n  #\n  # These are functions of some sort, where the compiler would be fine\n  # if they had named parameters, but people often omit those\n  # identifiers to reduce clutter:\n  #   (FunctionPointer)(int);\n  #   (FunctionPointer)(int) = value;\n  #   Function((function_pointer_arg)(int))\n  #   <TemplateArgument(int)>;\n  #   <(FunctionPointerTemplateArgument)(int)>;\n  remainder = line[match.end(0):]\n  if Match(r'^\\s*(?:;|const\\b|throw\\b|=|>|\\{|\\))', remainder):\n    # Looks like an unnamed parameter.\n\n    # Don't warn on any kind of template arguments.\n    if Match(r'^\\s*>', remainder):\n      return False\n\n    # Don't warn on assignments to function pointers, but keep warnings for\n    # unnamed parameters to pure virtual functions.  Note that this pattern\n    # will also pass on assignments of \"0\" to function pointers, but the\n    # preferred values for those would be \"nullptr\" or \"NULL\".\n    matched_zero = Match(r'^\\s=\\s*(\\S+)\\s*;', remainder)\n    if matched_zero and matched_zero.group(1) != '0':\n      return False\n\n    # Don't warn on function pointer declarations.  For this we need\n    # to check what came before the \"(type)\" string.\n    if Match(r'.*\\)\\s*$', line[0:match.start(0)]):\n      return False\n\n    # Don't warn if the parameter is named with block comments, e.g.:\n    #  Function(int /*unused_param*/);\n    if '/*' in raw_line:\n      return False\n\n    # Passed all filters, issue warning here.\n    error(filename, linenum, 'readability/function', 3,\n          'All parameters should be named in a function')\n    return True\n\n  # At this point, all that should be left is actual casts.\n  error(filename, linenum, 'readability/casting', 4,\n        'Using C-style cast.  Use %s<%s>(...) instead' %\n        (cast_type, match.group(1)))\n\n  return True\n\n\n_HEADERS_CONTAINING_TEMPLATES = (\n    ('<deque>', ('deque',)),\n    ('<functional>', ('unary_function', 'binary_function',\n                      'plus', 'minus', 'multiplies', 'divides', 'modulus',\n                      'negate',\n                      'equal_to', 'not_equal_to', 'greater', 'less',\n                      'greater_equal', 'less_equal',\n                      'logical_and', 'logical_or', 'logical_not',\n                      'unary_negate', 'not1', 'binary_negate', 'not2',\n                      'bind1st', 'bind2nd',\n                      'pointer_to_unary_function',\n                      'pointer_to_binary_function',\n                      'ptr_fun',\n                      'mem_fun_t', 'mem_fun', 'mem_fun1_t', 'mem_fun1_ref_t',\n                      'mem_fun_ref_t',\n                      'const_mem_fun_t', 'const_mem_fun1_t',\n                      'const_mem_fun_ref_t', 'const_mem_fun1_ref_t',\n                      'mem_fun_ref',\n                     )),\n    ('<limits>', ('numeric_limits',)),\n    ('<list>', ('list',)),\n    ('<map>', ('map', 'multimap',)),\n    ('<memory>', ('allocator',)),\n    ('<queue>', ('queue', 'priority_queue',)),\n    ('<set>', ('set', 'multiset',)),\n    ('<stack>', ('stack',)),\n    ('<string>', ('char_traits', 'basic_string',)),\n    ('<utility>', ('pair',)),\n    ('<vector>', ('vector',)),\n\n    # gcc extensions.\n    # Note: std::hash is their hash, ::hash is our hash\n    ('<hash_map>', ('hash_map', 'hash_multimap',)),\n    ('<hash_set>', ('hash_set', 'hash_multiset',)),\n    ('<slist>', ('slist',)),\n    )\n\n_RE_PATTERN_STRING = re.compile(r'\\bstring\\b')\n\n_re_pattern_algorithm_header = []\nfor _template in ('copy', 'max', 'min', 'min_element', 'sort', 'swap',\n                  'transform'):\n  # Match max<type>(..., ...), max(..., ...), but not foo->max, foo.max or\n  # type::max().\n  _re_pattern_algorithm_header.append(\n      (re.compile(r'[^>.]\\b' + _template + r'(<.*?>)?\\([^\\)]'),\n       _template,\n       '<algorithm>'))\n\n_re_pattern_templates = []\nfor _header, _templates in _HEADERS_CONTAINING_TEMPLATES:\n  for _template in _templates:\n    _re_pattern_templates.append(\n        (re.compile(r'(\\<|\\b)' + _template + r'\\s*\\<'),\n         _template + '<>',\n         _header))\n\n\ndef FilesBelongToSameModule(filename_cc, filename_h):\n  \"\"\"Check if these two filenames belong to the same module.\n\n  The concept of a 'module' here is a as follows:\n  foo.h, foo-inl.h, foo.cc, foo_test.cc and foo_unittest.cc belong to the\n  same 'module' if they are in the same directory.\n  some/path/public/xyzzy and some/path/internal/xyzzy are also considered\n  to belong to the same module here.\n\n  If the filename_cc contains a longer path than the filename_h, for example,\n  '/absolute/path/to/base/sysinfo.cc', and this file would include\n  'base/sysinfo.h', this function also produces the prefix needed to open the\n  header. This is used by the caller of this function to more robustly open the\n  header file. We don't have access to the real include paths in this context,\n  so we need this guesswork here.\n\n  Known bugs: tools/base/bar.cc and base/bar.h belong to the same module\n  according to this implementation. Because of this, this function gives\n  some false positives. This should be sufficiently rare in practice.\n\n  Args:\n    filename_cc: is the path for the .cc file\n    filename_h: is the path for the header path\n\n  Returns:\n    Tuple with a bool and a string:\n    bool: True if filename_cc and filename_h belong to the same module.\n    string: the additional prefix needed to open the header file.\n  \"\"\"\n\n  if not filename_cc.endswith('.cc'):\n    return (False, '')\n  filename_cc = filename_cc[:-len('.cc')]\n  if filename_cc.endswith('_unittest'):\n    filename_cc = filename_cc[:-len('_unittest')]\n  elif filename_cc.endswith('_test'):\n    filename_cc = filename_cc[:-len('_test')]\n  filename_cc = filename_cc.replace('/public/', '/')\n  filename_cc = filename_cc.replace('/internal/', '/')\n\n  if not filename_h.endswith('.h'):\n    return (False, '')\n  filename_h = filename_h[:-len('.h')]\n  if filename_h.endswith('-inl'):\n    filename_h = filename_h[:-len('-inl')]\n  filename_h = filename_h.replace('/public/', '/')\n  filename_h = filename_h.replace('/internal/', '/')\n\n  files_belong_to_same_module = filename_cc.endswith(filename_h)\n  common_path = ''\n  if files_belong_to_same_module:\n    common_path = filename_cc[:-len(filename_h)]\n  return files_belong_to_same_module, common_path\n\n\ndef UpdateIncludeState(filename, include_state, io=codecs):\n  \"\"\"Fill up the include_state with new includes found from the file.\n\n  Args:\n    filename: the name of the header to read.\n    include_state: an _IncludeState instance in which the headers are inserted.\n    io: The io factory to use to read the file. Provided for testability.\n\n  Returns:\n    True if a header was succesfully added. False otherwise.\n  \"\"\"\n  headerfile = None\n  try:\n    headerfile = io.open(filename, 'r', 'utf8', 'replace')\n  except IOError:\n    return False\n  linenum = 0\n  for line in headerfile:\n    linenum += 1\n    clean_line = CleanseComments(line)\n    match = _RE_PATTERN_INCLUDE.search(clean_line)\n    if match:\n      include = match.group(2)\n      # The value formatting is cute, but not really used right now.\n      # What matters here is that the key is in include_state.\n      include_state.setdefault(include, '%s:%d' % (filename, linenum))\n  return True\n\n\ndef CheckForIncludeWhatYouUse(filename, clean_lines, include_state, error,\n                              io=codecs):\n  \"\"\"Reports for missing stl includes.\n\n  This function will output warnings to make sure you are including the headers\n  necessary for the stl containers and functions that you use. We only give one\n  reason to include a header. For example, if you use both equal_to<> and\n  less<> in a .h file, only one (the latter in the file) of these will be\n  reported as a reason to include the <functional>.\n\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    include_state: An _IncludeState instance.\n    error: The function to call with any errors found.\n    io: The IO factory to use to read the header file. Provided for unittest\n        injection.\n  \"\"\"\n  required = {}  # A map of header name to linenumber and the template entity.\n                 # Example of required: { '<functional>': (1219, 'less<>') }\n\n  for linenum in xrange(clean_lines.NumLines()):\n    line = clean_lines.elided[linenum]\n    if not line or line[0] == '#':\n      continue\n\n    # String is special -- it is a non-templatized type in STL.\n    matched = _RE_PATTERN_STRING.search(line)\n    if matched:\n      # Don't warn about strings in non-STL namespaces:\n      # (We check only the first match per line; good enough.)\n      prefix = line[:matched.start()]\n      if prefix.endswith('std::') or not prefix.endswith('::'):\n        required['<string>'] = (linenum, 'string')\n\n    for pattern, template, header in _re_pattern_algorithm_header:\n      if pattern.search(line):\n        required[header] = (linenum, template)\n\n    # The following function is just a speed up, no semantics are changed.\n    if not '<' in line:  # Reduces the cpu time usage by skipping lines.\n      continue\n\n    for pattern, template, header in _re_pattern_templates:\n      if pattern.search(line):\n        required[header] = (linenum, template)\n\n  # The policy is that if you #include something in foo.h you don't need to\n  # include it again in foo.cc. Here, we will look at possible includes.\n  # Let's copy the include_state so it is only messed up within this function.\n  include_state = include_state.copy()\n\n  # Did we find the header for this file (if any) and succesfully load it?\n  header_found = False\n\n  # Use the absolute path so that matching works properly.\n  abs_filename = FileInfo(filename).FullName()\n\n  # For Emacs's flymake.\n  # If cpplint is invoked from Emacs's flymake, a temporary file is generated\n  # by flymake and that file name might end with '_flymake.cc'. In that case,\n  # restore original file name here so that the corresponding header file can be\n  # found.\n  # e.g. If the file name is 'foo_flymake.cc', we should search for 'foo.h'\n  # instead of 'foo_flymake.h'\n  abs_filename = re.sub(r'_flymake\\.cc$', '.cc', abs_filename)\n\n  # include_state is modified during iteration, so we iterate over a copy of\n  # the keys.\n  header_keys = include_state.keys()\n  for header in header_keys:\n    (same_module, common_path) = FilesBelongToSameModule(abs_filename, header)\n    fullpath = common_path + header\n    if same_module and UpdateIncludeState(fullpath, include_state, io):\n      header_found = True\n\n  # If we can't find the header file for a .cc, assume it's because we don't\n  # know where to look. In that case we'll give up as we're not sure they\n  # didn't include it in the .h file.\n  # TODO(unknown): Do a better job of finding .h files so we are confident that\n  # not having the .h file means there isn't one.\n  if filename.endswith('.cc') and not header_found:\n    return\n\n  # All the lines have been processed, report the errors found.\n  for required_header_unstripped in required:\n    template = required[required_header_unstripped][1]\n    if required_header_unstripped.strip('<>\"') not in include_state:\n      error(filename, required[required_header_unstripped][0],\n            'build/include_what_you_use', 2,\n            'Add #include ' + required_header_unstripped + ' for ' + template)\n\n\n_RE_PATTERN_EXPLICIT_MAKEPAIR = re.compile(r'\\bmake_pair\\s*<')\n\n\ndef CheckMakePairUsesDeduction(filename, clean_lines, linenum, error):\n  \"\"\"Check that make_pair's template arguments are deduced.\n\n  G++ 4.6 in C++0x mode fails badly if make_pair's template arguments are\n  specified explicitly, and such use isn't intended in any case.\n\n  Args:\n    filename: The name of the current file.\n    clean_lines: A CleansedLines instance containing the file.\n    linenum: The number of the line to check.\n    error: The function to call with any errors found.\n  \"\"\"\n  line = clean_lines.elided[linenum]\n  match = _RE_PATTERN_EXPLICIT_MAKEPAIR.search(line)\n  if match:\n    error(filename, linenum, 'build/explicit_make_pair',\n          4,  # 4 = high confidence\n          'For C++11-compatibility, omit template arguments from make_pair'\n          ' OR use pair directly OR if appropriate, construct a pair directly')\n\n\ndef ProcessLine(filename, file_extension, clean_lines, line,\n                include_state, function_state, nesting_state, error,\n                extra_check_functions=[]):\n  \"\"\"Processes a single line in the file.\n\n  Args:\n    filename: Filename of the file that is being processed.\n    file_extension: The extension (dot not included) of the file.\n    clean_lines: An array of strings, each representing a line of the file,\n                 with comments stripped.\n    line: Number of line being processed.\n    include_state: An _IncludeState instance in which the headers are inserted.\n    function_state: A _FunctionState instance which counts function lines, etc.\n    nesting_state: A _NestingState instance which maintains information about\n                   the current stack of nested blocks being parsed.\n    error: A callable to which errors are reported, which takes 4 arguments:\n           filename, line number, error level, and message\n    extra_check_functions: An array of additional check functions that will be\n                           run on each source line. Each function takes 4\n                           arguments: filename, clean_lines, line, error\n  \"\"\"\n  raw_lines = clean_lines.raw_lines\n  ParseNolintSuppressions(filename, raw_lines[line], line, error)\n  nesting_state.Update(filename, clean_lines, line, error)\n  if nesting_state.stack and nesting_state.stack[-1].inline_asm != _NO_ASM:\n    return\n  CheckForFunctionLengths(filename, clean_lines, line, function_state, error)\n  CheckForMultilineCommentsAndStrings(filename, clean_lines, line, error)\n  CheckStyle(filename, clean_lines, line, file_extension, nesting_state, error)\n  CheckLanguage(filename, clean_lines, line, file_extension, include_state,\n                nesting_state, error)\n  # SRombauts: I use references for out parameters\n  #CheckForNonConstReference(filename, clean_lines, line, nesting_state, error)\n  CheckForNonStandardConstructs(filename, clean_lines, line,\n                                nesting_state, error)\n  CheckVlogArguments(filename, clean_lines, line, error)\n  CheckPosixThreading(filename, clean_lines, line, error)\n  CheckInvalidIncrement(filename, clean_lines, line, error)\n  CheckMakePairUsesDeduction(filename, clean_lines, line, error)\n  for check_fn in extra_check_functions:\n    check_fn(filename, clean_lines, line, error)\n\ndef ProcessFileData(filename, file_extension, lines, error,\n                    extra_check_functions=[]):\n  \"\"\"Performs lint checks and reports any errors to the given error function.\n\n  Args:\n    filename: Filename of the file that is being processed.\n    file_extension: The extension (dot not included) of the file.\n    lines: An array of strings, each representing a line of the file, with the\n           last element being empty if the file is terminated with a newline.\n    error: A callable to which errors are reported, which takes 4 arguments:\n           filename, line number, error level, and message\n    extra_check_functions: An array of additional check functions that will be\n                           run on each source line. Each function takes 4\n                           arguments: filename, clean_lines, line, error\n  \"\"\"\n  lines = (['// marker so line numbers and indices both start at 1'] + lines +\n           ['// marker so line numbers end in a known way'])\n\n  include_state = _IncludeState()\n  function_state = _FunctionState()\n  nesting_state = _NestingState()\n\n  ResetNolintSuppressions()\n\n  # SRombauts: file scope rules (header, includes...)\n  CheckForFilename(filename, lines, error)\n  CheckForCopyright(filename, lines, error)\n\n  if file_extension == 'h':\n    CheckForHeaderGuard(filename, lines, error)\n\n  RemoveMultiLineComments(filename, lines, error)\n  clean_lines = CleansedLines(lines)\n  for line in xrange(clean_lines.NumLines()):\n    ProcessLine(filename, file_extension, clean_lines, line,\n                include_state, function_state, nesting_state, error,\n                extra_check_functions)\n  nesting_state.CheckCompletedBlocks(filename, error)\n\n  CheckForIncludeWhatYouUse(filename, clean_lines, include_state, error)\n\n  # We check here rather than inside ProcessLine so that we see raw\n  # lines rather than \"cleaned\" lines.\n  CheckForBadCharacters(filename, lines, error)\n\n  CheckForNewlineAtEOF(filename, lines, error)\n\ndef ProcessFile(filename, vlevel, extra_check_functions=[]):\n  \"\"\"Does google-lint on a single file.\n\n  Args:\n    filename: The name of the file to parse.\n\n    vlevel: The level of errors to report.  Every error of confidence\n    >= verbose_level will be reported.  0 is a good default.\n\n    extra_check_functions: An array of additional check functions that will be\n                           run on each source line. Each function takes 4\n                           arguments: filename, clean_lines, line, error\n  \"\"\"\n\n  _SetVerboseLevel(vlevel)\n\n  try:\n    # Support the UNIX convention of using \"-\" for stdin.  Note that\n    # we are not opening the file with universal newline support\n    # (which codecs doesn't support anyway), so the resulting lines do\n    # contain trailing '\\r' characters if we are reading a file that\n    # has CRLF endings.\n    # If after the split a trailing '\\r' is present, it is removed\n    # below. If it is not expected to be present (i.e. os.linesep !=\n    # '\\r\\n' as in Windows), a warning is issued below if this file\n    # is processed.\n\n    if filename == '-':\n      lines = codecs.StreamReaderWriter(sys.stdin,\n                                        codecs.getreader('utf8'),\n                                        codecs.getwriter('utf8'),\n                                        'replace').read().split('\\n')\n    else:\n      lines = codecs.open(filename, 'r', 'utf8', 'replace').read().split('\\n')\n\n    carriage_return_found = False\n    # Remove trailing '\\r'.\n    for linenum in range(len(lines)):\n      if lines[linenum].endswith('\\r'):\n        lines[linenum] = lines[linenum].rstrip('\\r')\n        carriage_return_found = True\n\n  except IOError:\n    # SRombauts: do not complain for directory in the file list\n    #sys.stderr.write(\n    #    \"Skipping input '%s': Can't open for reading\\n\" % filename)\n    return\n\n  # Note, if no dot is found, this will give the entire filename as the ext.\n  file_extension = filename[filename.rfind('.') + 1:]\n\n  # When reading from stdin, the extension is unknown, so no cpplint tests\n  # should rely on the extension.\n  valid_extensions = ['cc', 'h', 'cpp', 'cu', 'cuh']\n  if filename != '-' and file_extension not in valid_extensions:\n    # SRombauts: do not complain for non C++ files\n    #sys.stderr.write('cpplint:0: Ignoring %s; not a .cc or .h file\\n' % filename)\n    None\n  else:\n    ProcessFileData(filename, file_extension, lines, Error,\n                    extra_check_functions)\n    if carriage_return_found:\n      # SRombauts: never use Windows endline\n      # Outputting only one error for potentially\n      # several lines.\n      Error(filename, 0, 'whitespace/newline', 5,\n            'One or more carriage-return \\\\r (^M) (Windows endline) found; '\n            'Use only UNIX endline \\\\n')\n\n  # SRombauts: do not show progress\n  #sys.stderr.write('cpplint:0: Done processing %s\\n' % filename)\n\n\ndef PrintUsage(message):\n  \"\"\"Prints a brief usage string and exits, optionally with an error message.\n\n  Args:\n    message: The optional error message.\n  \"\"\"\n  sys.stderr.write(_USAGE)\n  if message:\n    sys.exit('\\nFATAL ERROR: ' + message)\n  else:\n    sys.exit(1)\n\n\ndef PrintCategories():\n  \"\"\"Prints a list of all the error-categories used by error messages.\n\n  These are the categories used to filter messages via --filter.\n  \"\"\"\n  sys.stderr.write(''.join('  %s\\n' % cat for cat in _ERROR_CATEGORIES))\n  sys.exit(0)\n\n\ndef ParseArguments(args):\n  \"\"\"Parses the command line arguments.\n\n  This may set the output format and verbosity level as side-effects.\n\n  Args:\n    args: The command line arguments:\n\n  Returns:\n    The list of filenames to lint.\n  \"\"\"\n  try:\n    (opts, filenames) = getopt.getopt(args, '', ['help', 'output=', 'verbose=',\n                                                 'counting=',\n                                                 'filter=',\n                                                 'root=',\n                                                 'linelength='])\n  except getopt.GetoptError:\n    PrintUsage('Invalid arguments.')\n\n  verbosity = _VerboseLevel()\n  output_format = _OutputFormat()\n  filters = ''\n  counting_style = ''\n\n  for (opt, val) in opts:\n    if opt == '--help':\n      PrintUsage(None)\n    elif opt == '--output':\n      if val not in ('emacs', 'vs7', 'eclipse'):\n        PrintUsage('The only allowed output formats are emacs, vs7 and eclipse.')\n      output_format = val\n    elif opt == '--verbose':\n      verbosity = int(val)\n    elif opt == '--filter':\n      filters = val\n      if not filters:\n        PrintCategories()\n    elif opt == '--counting':\n      if val not in ('total', 'toplevel', 'detailed'):\n        PrintUsage('Valid counting options are total, toplevel, and detailed')\n      counting_style = val\n    elif opt == '--root':\n      global _root\n      _root = val\n    elif opt == '--linelength':\n      global _line_length\n      try:\n          _line_length = int(val)\n      except ValueError:\n          PrintUsage('Line length must be digits.')\n\n  if not filenames:\n    PrintUsage('No files were specified.')\n\n  _SetOutputFormat(output_format)\n  _SetVerboseLevel(verbosity)\n  _SetFilters(filters)\n  _SetCountingStyle(counting_style)\n\n  return filenames\n\n\ndef main():\n  filenames = ParseArguments(sys.argv[1:])\n\n  # Change stderr to write with replacement characters so we don't die\n  # if we try to print something containing non-ASCII characters.\n  if not PY3:\n    sys.stderr = codecs.StreamReaderWriter(sys.stderr,\n                                           codecs.getreader('utf8'),\n                                           codecs.getwriter('utf8'),\n                                           'replace')\n\n  _cpplint_state.ResetErrorCounts()\n  for filename in filenames:\n    ProcessFile(filename, _cpplint_state.verbose_level)\n  _cpplint_state.PrintErrorCounts()\n\n  # SRombauts: do not break build for cpplint style warnings\n  #sys.exit(_cpplint_state.error_count > 0)\n\n\nif __name__ == '__main__':\n  main()\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "googletest",
          "type": "commit",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "meson.build",
          "type": "blob",
          "size": 9.59375,
          "content": "project(\n    'SQLiteCpp', 'cpp',\n    # SQLiteCpp supports C++11\n    # however newer versions of gtest requires C++14\n    default_options: ['cpp_std=c++14', 'warning_level=3'],\n    license: 'MIT',\n    version: '3.3.2',\n)\n\ncxx = meson.get_compiler('cpp')\n\n## at best we might try to test if this code compiles\n## testing for compilers or platforms is not reliable enough\n## example: native clang on windows or mingw in windows\nunix_like_code = '''\n    #if defined(unix) || defined(__unix__) || defined(__unix)\n    // do nothing\n    #else\n    # error \"Non Unix-like OS\"\n    #endif\n'''\nunix_like = cxx.compiles(unix_like_code, name : 'unix like environment')\n\nmingw_64_env_code = '''\n    #if defined(__MINGW64__)\n    // do nothing\n    #else\n    # error \"Non MinGW-W64 environment\"\n    #endif\n'''\nmingw_64_env = cxx.compiles(mingw_64_env_code, name : 'MinGW-W64 environment')\n\nthread_dep = dependency('threads')\n# sqlite3 support\nsqlite3_dep = dependency(\n                'sqlite3',\n                fallback: ['sqlite3', 'sqlite3_dep']\n)\n\nsqlitecpp_incl = [ \n    include_directories('include')\n]\nsqlitecpp_srcs = files(\n    'src/Backup.cpp',\n    'src/Column.cpp',\n    'src/Database.cpp',\n    'src/Exception.cpp',\n    'src/Savepoint.cpp',\n    'src/Statement.cpp',\n    'src/Transaction.cpp',\n)\nsqlitecpp_args = cxx.get_supported_arguments(\n    # included in meson by default\n    # -Wall\n    # included when warning_level=3\n    #'-Wextra',\n    #'-Wpedantic',\n    '-Wswitch-enum',\n    '-Wshadow',\n    '-Wno-long-long',\n    '-Wno-attributes',\n)\nsqlitecpp_link = []\nsqlitecpp_deps = [\n    sqlite3_dep,\n    thread_dep,\n]\n## used to override the default sqlitecpp options like cpp standard\nsqlitecpp_opts = []\n\n## used to set required macros when using sqlitecpp\nsqlitecpp_dep_args = []\n\n## tests\n\nsqlitecpp_test_srcs = files(\n    'tests/Column_test.cpp',\n    'tests/Database_test.cpp',\n    'tests/Savepoint_test.cpp',\n    'tests/Statement_test.cpp',\n    'tests/Backup_test.cpp',\n    'tests/Transaction_test.cpp',\n    'tests/VariadicBind_test.cpp',\n    'tests/Exception_test.cpp',\n    'tests/ExecuteMany_test.cpp',\n)\nsqlitecpp_test_args = []\n\n\n## using MSVC headers requires c++14, if not will show an error on xstddef as: \n## 'auto' return without trailing return type; deduced return types are a C++14 extension\nif host_machine.system() == 'windows'\n    ## check if the std version is less than c++14\n    if get_option('cpp_std').endswith('11')\n        message('[WINDOWS] using c++14 standard')\n        message('[WINDOWS] you can disable this warning by setting cpp_std to c++14 or newer')\n        sqlitecpp_opts += [\n            'cpp_std=c++14',\n        ]\n    endif\nendif\n# Options relative to SQLite and SQLiteC++ functions\n\nif get_option('SQLITE_ENABLE_COLUMN_METADATA')\n    sqlitecpp_args += [\n        '-DSQLITE_ENABLE_COLUMN_METADATA',\n    ]\nendif\n\nif get_option('SQLITE_ENABLE_ASSERT_HANDLER')\n    sqlitecpp_args += [\n        '-DSQLITE_ENABLE_ASSERT_HANDLER',\n    ]\nendif\n\nif get_option('SQLITE_HAS_CODEC')\n    sqlitecpp_args += [\n        '-DSQLITE_HAS_CODEC',\n    ]\nendif\n\nif get_option('SQLITE_USE_LEGACY_STRUCT')\n    sqlitecpp_args += [\n        '-DSQLITE_USE_LEGACY_STRUCT',\n    ] \nendif\n\n## C++17 disable the support for std::filesystem (by default off)\nif get_option('SQLITECPP_DISABLE_STD_FILESYSTEM')\n    sqlitecpp_cxx_flags += ['-DSQLITECPP_DISABLE_STD_FILESYSTEM']\nendif\n\n## get the user option for the SQLITECPP_DISABLE_SQLITE3_EXPANDED_SQL\ndisable_sqlitecpp_expanded_sql = get_option('SQLITECPP_DISABLE_SQLITE3_EXPANDED_SQL')\n\n## Disable the use of sqlite3_expanded_sql (from sqlite3 3.14.0)\nif disable_sqlitecpp_expanded_sql\n    sqlitecpp_args += ['-DSQLITECPP_DISABLE_SQLITE3_EXPANDED_SQL']\nendif\n\n## stack protection hardening\nif get_option('SQLITECPP_USE_STACK_PROTECTION')\n    ## if is on MinGW-W64 give a warning that is not supported\n    if mingw_64_env\n        message('warning: SQLiteCpp does not support stack protection on MinGW-W64')\n        message('warning: this could lead to a crash on the application')\n        message('warning: you can disable this warning by setting SQLITECPP_USE_STACK_PROTECTOR to false')\n    ## check if it is supported by the compiler\n    elif cxx.has_argument('-fstack-protector')\n        sqlitecpp_args += ['-fstack-protector']\n    ## if not supported give a warning\n    else\n        message('warning: SQLiteCpp does not have stack protection support in this compiler')\n        message('warning: this argument will be ignored')\n        message('warning: you can disable this warning by setting SQLITECPP_USE_STACK_PROTECTOR to false')\n    endif\nendif\n\n## enable ommit load extension\nif get_option('SQLITE_OMIT_LOAD_EXTENSION')\n    sqlitecpp_args += ['-DSQLITE_OMIT_LOAD_EXTENSION']\n## check if running on OSX\nelif host_machine.system() == 'darwin' and sqlite3_dep.found()\n    ## check if sqlite3 is the one bundled with OSX\n    if sqlite3_dep.type_name() != 'internal'\n        message('warning: Detected non-internal SQLite3 in OSX, check if it supports load extension')\n        sqlite3_load_extension_support = cxx.links(\n            '''\n                #include <sqlite3.h>\n                int main() {\n                    sqlite3_enable_load_extension(0, 0);\n                    return 0;\n                }\n            ''', \n            name: 'sqlite3_load_extension',\n            dependencies: [sqlite3_dep])\n        if not sqlite3_load_extension_support\n            message('warning: Detected bundled SQLite3 in OSX, but it does not support load extension')\n            message('warning: SQLiteCpp will be built without load extension support')\n            message('warning: You can disable this warning by setting SQLITE_OMIT_LOAD_EXTENSION to false')\n            sqlitecpp_args += ['-DSQLITE_OMIT_LOAD_EXTENSION']\n        endif\n    endif\nendif\n\n\n\nif unix_like\n    sqlitecpp_args += [\n        # -fPIC is included by default in meson\n        # 'fPIC',\n    ]\n    # add dl dependency\n    libdl_dep = cxx.find_library('dl')\n    sqlitecpp_deps += [\n        libdl_dep,\n    ]\nendif\n\nif get_option('b_coverage')\n    # Prevent the compiler from removing the unused inline functions so that they get tracked as \"non-covered\"\n    sqlitecpp_args += [\n        '-fkeep-inline-functions',\n        '-fkeep-static-functions',\n    ]\nendif\n\nsqlitecpp_static_args = sqlitecpp_args\nsqlitecpp_static_dep_args = sqlitecpp_dep_args\n\n# if windows and shared library\nif host_machine.system() == 'windows' and get_option('default_library') == 'shared'\n    # compile with SQLITECPP_COMPILE_DLL and SQLITECPP_DLL_EXPORT=1\n    sqlitecpp_args += [\n        '-DSQLITECPP_COMPILE_DLL',\n        '-DSQLITECPP_DLL_EXPORT',\n    ]\n    sqlitecpp_dep_args += [\n        # we just need to define SQLITECPP_COMPILE_DLL\n        '-DSQLITECPP_COMPILE_DLL',\n    ]\nendif\n\n\nlibsqlitecpp = library(\n    'sqlitecpp',\n    sqlitecpp_srcs,\n    include_directories: sqlitecpp_incl,\n    cpp_args: sqlitecpp_args,\n    dependencies: sqlitecpp_deps,\n    # override the default options\n    override_options: sqlitecpp_opts,\n    install: true,\n    # API version for SQLiteCpp shared library.\n    version: '0',)\n\n\n\nif get_option('SQLITECPP_BUILD_TESTS')\n    # for the unit tests we need to link against a static version of SQLiteCpp\n    if get_option('default_library') == 'static'\n        # we do not need to recomplile the library\n        libsqlitecpp_static = libsqlitecpp\n    else\n        libsqlitecpp_static = static_library(\n            'sqlitecpp_static',\n            sqlitecpp_srcs,\n            include_directories: sqlitecpp_incl,\n            cpp_args: sqlitecpp_static_args,\n            dependencies: sqlitecpp_deps,\n            # override the default options\n            override_options: sqlitecpp_opts,)\n    endif\nendif\n\ninstall_subdir(\n    'include/SQLiteCpp',\n    install_dir: get_option('includedir'))\n\nsqlitecpp_dep = declare_dependency(\n    include_directories: sqlitecpp_incl,\n    link_with: libsqlitecpp,\n    compile_args: sqlitecpp_dep_args,\n)\nif get_option('SQLITECPP_BUILD_TESTS')\n    ## make the dependency static so the unit tests can link against it\n    ## (mainly for windows as the symbols are not exported by default)\n    sqlitecpp_static_dep = declare_dependency(\n        include_directories: sqlitecpp_incl,\n        link_with: libsqlitecpp_static,\n        compile_args: sqlitecpp_static_dep_args,\n    )\nendif\n\nif get_option('SQLITECPP_BUILD_TESTS')\n    gtest_dep = dependency(\n                'gtest',\n                main : true,\n                fallback: ['gtest', 'gtest_main_dep'])\n    # check if Gtest is newer than 1.14.0\n    # if so set the minimum standard to c++14\n    if gtest_dep.found() and gtest_dep.version().version_compare('>=1.14.0')\n        ## check if the std version is less than c++14\n        if get_option('cpp_std').version_compare('<c++14')\n            message('warning: current Gtest version requires c++14, setting the minimum standard to c++14')\n            message('warning: you can disable this warning by setting cpp_std to c++14 or newer')\n\n            sqlitecpp_test_args += [\n                'cpp_std=c++14',\n            ]\n        endif\n    endif\n\n\n    sqlitecpp_test_dependencies = [\n        gtest_dep,\n        sqlitecpp_dep,\n        sqlite3_dep,\n    ]\n\n    testexe = executable('testexe', sqlitecpp_test_srcs,\n                     dependencies: sqlitecpp_test_dependencies,\n                     cpp_args: sqlitecpp_test_args,\n                     # override the default options\n                     override_options: sqlitecpp_opts,)\n\n    test_args = []\n\n    test('sqlitecpp unit tests', testexe, args: test_args)\nendif\nif get_option('SQLITECPP_BUILD_EXAMPLES')\n    subdir('examples')\nendif\n\npkgconfig = import('pkgconfig')\npkgconfig.generate(\n    libsqlitecpp,\n    description: 'a smart and easy to use C++ SQLite3 wrapper.',\n    version: meson.project_version(),\n)\n"
        },
        {
          "name": "meson_options.txt",
          "type": "blob",
          "size": 2.330078125,
          "content": "# Options relative to SQLite and SQLiteC++ functions\r\n## Enable the use of SQLite column metadata and Column::getColumnOriginName() method,\r\n## Require that the sqlite3 library is also compiled with this flag (default under Debian/Ubuntu, but not on Mac OS X).\r\noption('SQLITE_ENABLE_COLUMN_METADATA', type: 'boolean', value: false, description: 'Enable Column::getColumnOriginName(). Require support from sqlite3 library.')\r\n## Enable the user definition of a assertion_failed() handler (default to false, easier to handler for beginners).\r\noption('SQLITE_ENABLE_ASSERT_HANDLER', type: 'boolean', value: false, description: 'Enable the user definition of a assertion_failed() handler.')\r\n## Enable database encryption API. Requires implementations of sqlite3_key & sqlite3_key_v2.\r\n## Eg. SQLCipher (libsqlcipher-dev) is an SQLite extension that provides 256 bit AES encryption of database files. \r\noption('SQLITE_HAS_CODEC', type: 'boolean', value: false, description: 'Enable database encryption API. Not available in the public release of SQLite.')\r\n## Force forward declaration of legacy struct sqlite3_value (pre SQLite 3.19)\r\noption('SQLITE_USE_LEGACY_STRUCT', type: 'boolean', value: false, description: 'Fallback to forward declaration of legacy struct sqlite3_value (pre SQLite 3.19)')\r\n## Enable ommit load extension\r\noption('SQLITE_OMIT_LOAD_EXTENSION', type: 'boolean', value: false, description: 'Enable ommit load extension.')\r\n## Disable the support for std::filesystem (C++17)\r\noption('SQLITECPP_DISABLE_STD_FILESYSTEM', type: 'boolean', value: false, description: 'Disable the support for std::filesystem (C++17)')\r\n## Disable the support for sqlite3_expanded_sql (since SQLite 3.14.0)\r\noption('SQLITECPP_DISABLE_SQLITE3_EXPANDED_SQL', type: 'boolean', value: false, description: 'Disable the support for sqlite3_expanded_sql (since SQLite 3.14.0)')\r\n## Stack protection is not supported on MinGW-W64 on Windows, allow this flag to be turned off.\r\noption('SQLITECPP_USE_STACK_PROTECTION', type: 'boolean', value: true, description: 'Enable stack protection for MySQL.')\r\n## Enable build for the tests of SQLiteC++\r\noption('SQLITECPP_BUILD_TESTS', type: 'boolean', value: false, description: 'Build SQLiteC++ unit tests.')\r\n## Build the examples of SQLiteC++\r\noption('SQLITECPP_BUILD_EXAMPLES', type: 'boolean', value: false, description: 'Build SQLiteC++ examples.')\r\n"
        },
        {
          "name": "package.xml",
          "type": "blob",
          "size": 0.5927734375,
          "content": "<?xml-model href=\"http://download.ros.org/schema/package_format3.xsd\" schematypens=\"http://www.w3.org/2001/XMLSchema\"?>\n<package format=\"3\">\n  <name>SQLiteCpp</name>\n  <version>3.3.2</version>\n  <description>A smart and easy to use C++ SQLite3 wrapper.</description>\n\n  <maintainer email=\"sebastien.rombauts@gmail.com\">Sébastien Rombauts</maintainer>\n\n  <license>MIT</license>\n\n  <author email=\"sebastien.rombauts@gmail.com\">Sébastien Rombauts</author>\n\n  <buildtool_depend>cmake</buildtool_depend>\n\n  <depend>libsqlite3-dev</depend>\n\n  <export>\n    <build_type>cmake</build_type>\n  </export>\n\n</package>\n"
        },
        {
          "name": "sqlite3",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "subprojects",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}