{
  "metadata": {
    "timestamp": 1736709812018,
    "page": 268,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "libarchive/libarchive",
      "stars": 3097,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 1.158203125,
          "content": "env:\n  CIRRUS_CLONE_DEPTH: 1\n  ARCH: amd64\n\nFreeBSD_task:\n  matrix:\n    env:\n      BS: autotools\n    env:\n      BS: cmake\n  matrix:\n    freebsd_instance:\n      image_family: freebsd-14-1\n    freebsd_instance:\n      image_family: freebsd-13-4\n  prepare_script:\n  - ./build/ci/cirrus_ci/ci.sh prepare\n  configure_script:\n  - env CFLAGS=-I/usr/local/include LDFLAGS=-L/usr/local/lib ./build/ci/build.sh -a autogen\n  - env CFLAGS=-I/usr/local/include LDFLAGS=-L/usr/local/lib ./build/ci/build.sh -a configure\n  build_script:\n  - env MAKE_ARGS=\"-j 2\" ./build/ci/build.sh -a build\n  test_script:\n  - env SKIP_TEST_RESTORE_ATIME=1 MAKE_ARGS=\"-j 2\" ./build/ci/build.sh -a test\n  - ./build/ci/cirrus_ci/ci.sh test\n  install_script:\n  - env MAKE_ARGS=\"-j 2\" ./build/ci/build.sh -a install\n\nWindows_Cygwin_task:\n  windows_container:\n    image: cirrusci/windowsservercore:2019\n    os_version: 2019\n  env:\n    BE: cygwin-gcc\n  prepare_script:\n  - build\\ci\\cirrus_ci\\ci.cmd prepare\n  configure_script:\n  - build\\ci\\cirrus_ci\\ci.cmd configure\n  build_script:\n  - build\\ci\\cirrus_ci\\ci.cmd build\n  test_script:\n  - build\\ci\\cirrus_ci\\ci.cmd test\n  install_script:\n  - build\\ci\\cirrus_ci\\ci.cmd install\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2958984375,
          "content": "# To use this config on you editor, follow the instructions at:\n# http://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nindent_style = tab\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.sh]\nindent_style = space\nindent_size = 4\n\n[CMakeLists.txt]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0859375,
          "content": ".git*            export-ignore\n\n*.sh             crlf=input\nconfig.rpath     crlf=input\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.2998046875,
          "content": "*~\n*.o\n*.obj\n*.exe\n*.exp\n*.ilk\n*.la\n*.lib\n*.lo\n*.recipe\n*.sln\n*.tlog\n*.cmake\n*.vcxproj\n*.vcxproj.filters\n!build/cmake/*.cmake\n.deps/\n.libs/\nbin/\nout/\n.dirstamp\nMakefile\nMakefile.in\naclocal.m4\nautom4te.cache/\nbsdcat\nbsdcpio\nbsdtar\nbsdunzip\nbuild/autoconf/compile\nbuild/autoconf/config.guess\nbuild/autoconf/config.sub\nbuild/autoconf/depcomp\nbuild/autoconf/install-sh\nbuild/autoconf/libtool.m4\nbuild/autoconf/ltmain.sh\nbuild/autoconf/ltoptions.m4\nbuild/autoconf/ltsugar.m4\nbuild/autoconf/ltversion.m4\nbuild/autoconf/lt~obsolete.m4\nbuild/autoconf/missing\nbuild/build/pkgconfig/libarchive.pc\nbuild/cat/test/list.h\nbuild/cpio/test/list.h\nbuild/libarchive/test/list.h\nbuild/pkgconfig/libarchive.pc\nbuild/tar/test/list.h\nbuild/unzip/test/list.h\ncat/test/list.h\nconfig.cache\nconfig.h\nconfig.h.in\nconfig.log\nconfig.status\nconfigure\ncpio/test/list.h\nlibarchive/test/list.h\nlibtool\nstamp-h1\ntar/test/list.h\nunzip/test/list.h\nCMakeCache.txt\nCMakeFiles/\nDartConfiguration.tcl\ncmake.tmp/\ncmake-*/\n.vs/\n.vscode/\n.idea/\n\ndoc/html/*.html\ndoc/man/*.1\ndoc/man/*.3\ndoc/man/*.5\ndoc/pdf/*.pdf\ndoc/text/*.txt\ndoc/wiki/*.wiki\n\nlibarchive-*.tar.gz\nlibarchive-*.zip\n\nTesting/\nlibarchive/libarchive.a\nlibarchive/libarchive.so\nlibarchive/libarchive.so.*\n\n.DS_Store\n\n/*_test\n/*_test.log\n/*_test.trs\nbuild/autoconf/test-driver\ntest-suite.log\n\n.sw?\n.*.sw?\n\n*.pdb\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 85.0810546875,
          "content": "#\nCMAKE_MINIMUM_REQUIRED(VERSION 2.8.12 FATAL_ERROR)\nif(APPLE AND CMAKE_VERSION VERSION_LESS \"3.17.0\")\n  message(WARNING \"CMake>=3.17.0 required to make the generated shared library have the same Mach-O headers as autotools\")\nendif()\n\nif(POLICY CMP0065)\n  cmake_policy(SET CMP0065 NEW) #3.4 don't use `-rdynamic` with executables\nendif()\nif(POLICY CMP0074)\n  cmake_policy(SET CMP0074 NEW) #3.12.0 `find_package()`` uses ``<PackageName>_ROOT`` variables.\nendif()\nif(POLICY CMP0075)\n  cmake_policy(SET CMP0075 NEW) #3.12.0 `check_include_file()`` and friends use ``CMAKE_REQUIRED_LIBRARIES``.\nendif()\n#\nPROJECT(libarchive C)\n#\nSET(CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/build/cmake\")\nif(NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)\n  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${libarchive_BINARY_DIR}/bin)\nendif()\n#\n# Set the Build type for make based generators.\n# You can choose following types:\n#   Debug          : Debug build\n#   Release        : Release build\n#   RelWithDebInfo : Release build with Debug Info\n#   MinSizeRel     : Release Min Size build\n#   None           : No build type\nIF(NOT CMAKE_BUILD_TYPE)\n  SET(CMAKE_BUILD_TYPE \"Debug\" CACHE STRING \"Build Type\" FORCE)\nENDIF(NOT CMAKE_BUILD_TYPE)\n# Set a value type to properly display CMAKE_BUILD_TYPE on GUI if the\n# value type is \"UNINITIALIZED\".\nGET_PROPERTY(cached_type CACHE CMAKE_BUILD_TYPE PROPERTY TYPE)\nIF(\"${cached_type}\" STREQUAL \"UNINITIALIZED\")\n  SET(CMAKE_BUILD_TYPE \"${CMAKE_BUILD_TYPE}\" CACHE STRING \"Build Type\" FORCE)\nENDIF(\"${cached_type}\" STREQUAL \"UNINITIALIZED\")\n# Check the Build Type.\n# Convert the CMAKE_BUILD_TYPE to uppercase to perform a case-insensitive comparison.\nstring(TOUPPER \"${CMAKE_BUILD_TYPE}\" CMAKE_BUILD_TYPE_UPPER)\nIF(NOT \"${CMAKE_BUILD_TYPE_UPPER}\"\n       MATCHES \"^(DEBUG|RELEASE|RELWITHDEBINFO|MINSIZEREL|NONE)\\$\")\n  MESSAGE(FATAL_ERROR\n          \"Unknown keyword for CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}\\n\"\n          \"Acceptable keywords: Debug, Release, RelWithDebInfo, MinSizeRel, None\")\nENDIF(NOT \"${CMAKE_BUILD_TYPE_UPPER}\"\n       MATCHES \"^(DEBUG|RELEASE|RELWITHDEBINFO|MINSIZEREL|NONE)\\$\")\n\n# On MacOS, prefer MacPorts libraries to system libraries.\n# I haven't come up with a compelling argument for this to be conditional.\nlist(APPEND CMAKE_PREFIX_PATH /opt/local)\n# Enable @rpath in the install name.\n# detail in \"cmake  --help-policy CMP0042\"\nSET(CMAKE_MACOSX_RPATH ON)\n\n#\n# Version - read from 'version' file.\n#\nFILE(STRINGS ${CMAKE_CURRENT_SOURCE_DIR}/build/version _version)\nSTRING(REGEX REPLACE\n \"^([0-9])[0-9][0-9][0-9][0-9][0-9][0-9][a-z]*$\" \"\\\\1\" _major ${_version})\nSTRING(REGEX REPLACE\n \"^[0-9]([0-9][0-9][0-9])[0-9][0-9][0-9][a-z]*$\" \"\\\\1\" _minor ${_version})\nSTRING(REGEX REPLACE\n \"^[0-9][0-9][0-9][0-9]([0-9][0-9][0-9])[a-z]*$\" \"\\\\1\" _revision ${_version})\nSTRING(REGEX REPLACE\n \"^[0-9][0-9][0-9][0-9][0-9][0-9][0-9]([a-z]*)$\" \"\\\\1\" _quality ${_version})\nSET(_version_number ${_major}${_minor}${_revision})\nSTRING(REGEX REPLACE \"[0]*([^0]*[0-9])$\" \"\\\\1\" _trimmed_minor ${_minor})\nSTRING(REGEX REPLACE \"[0]*([^0]*[0-9])$\" \"\\\\1\" _trimmed_revision ${_revision})\n#\nSET(VERSION                    \"${_major}.${_trimmed_minor}.${_trimmed_revision}${_quality}\")\nSET(BSDCPIO_VERSION_STRING     \"${VERSION}\")\nSET(BSDTAR_VERSION_STRING      \"${VERSION}\")\nSET(BSDCAT_VERSION_STRING      \"${VERSION}\")\nSET(BSDUNZIP_VERSION_STRING    \"${VERSION}\")\nSET(LIBARCHIVE_VERSION_NUMBER  \"${_version_number}\")\nSET(LIBARCHIVE_VERSION_STRING  \"${VERSION}\")\n\n# INTERFACE_VERSION increments with every release\n# libarchive 2.7 == interface version 9 = 2 + 7\n# libarchive 2.8 == interface version 10 = 2 + 8\n# libarchive 2.9 == interface version 11 = 2 + 9\n# libarchive 3.0 == interface version 12\n# libarchive 3.1 == interface version 13\nmath(EXPR INTERFACE_VERSION  \"13 + ${_minor}\")\n\n# Set SOVERSION so it matches libtool's conventions\n# libtool accepts a string \"current:revision:age\"; in libarchive, that's set to\n# - current: ${INTERFACE_VERSION} = 13 + ${_minor}\n# - revision: ${_revision}\n# - age: ${_minor}\n# Since libtool computes SOVERSION as \"current - age\", it's just '13' again\nmath(EXPR SOVERSION \"${INTERFACE_VERSION} - ${_minor}\")\nset(SOVERSION_FULL \"${SOVERSION}.${_trimmed_minor}.${_trimmed_revision}\")\n\n# Override CMake's default shared library versioning scheme, which uses SOVERSION and VERSION,\n# to match libtool's conventions (see https://github.com/mesonbuild/meson/issues/1451)\n# - compatibility version: current + 1 = ${INTERFACE_VERSION} + 1\n# - current version: ${current + 1}.${revision}\nmath(EXPR MACHO_COMPATIBILITY_VERSION \"${INTERFACE_VERSION} + 1\")\nset(MACHO_CURRENT_VERSION \"${MACHO_COMPATIBILITY_VERSION}.${_revision}\")\n\n# Enable CMAKE_PUSH_CHECK_STATE() and CMAKE_POP_CHECK_STATE() macros\n# saving and restoring the state of the variables.\nINCLUDE(CMakePushCheckState)\n\n# Initialize the state of the variables. This initialization is not\n# necessary but this shows you what value the variables initially have.\nSET(CMAKE_REQUIRED_DEFINITIONS)\nSET(CMAKE_REQUIRED_INCLUDES)\nSET(CMAKE_REQUIRED_LIBRARIES)\nSET(CMAKE_REQUIRED_FLAGS)\nif (CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n  OPTION(ENABLE_WERROR \"Treat warnings as errors - default is ON for Debug, OFF otherwise.\" ON)\nelse ()\n  OPTION(ENABLE_WERROR \"Treat warnings as errors - default is ON for Debug, OFF otherwise.\" OFF)\nendif ()\n\n# Especially for early development, we want to be a little\n# aggressive about diagnosing build problems; this can get\n# relaxed somewhat in final shipping versions.\nIF (CMAKE_C_COMPILER_ID MATCHES \"^GNU$\" OR\n    CMAKE_C_COMPILER_ID MATCHES \"^Clang$\" AND NOT MSVC)\n  SET(CMAKE_REQUIRED_FLAGS \"-Wall -Wformat -Wformat-security\")\n  #################################################################\n  # Set compile flags for all build types.\n  SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Wall -Wformat -Wformat-security\")\n  if (ENABLE_WERROR)\n    SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Werror\")\n  endif ()\n  #################################################################\n  # Set compile flags for debug build.\n  # This is added into CMAKE_C_FLAGS when CMAKE_BUILD_TYPE is \"Debug\"\n  SET(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -g\")\n  SET(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -Wextra\")\n  SET(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -Wunused\")\n  SET(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -Wshadow\")\n  SET(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -Wmissing-prototypes\")\n  SET(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -Wcast-qual\")\n  # Ideally this will be a compile/link time check, yet there's no obvious way\n  # how considering how old our minimum required cmake version is. The official\n  # cmake.org side does not host the manual pages even. Normally we can use\n  # either of the following two, yet neither is supported as of 3.0.2\n  # - check_linker_flag - does not exist\n  # - try_compile - does not support linker flags\n  IF(NOT CMAKE_SYSTEM_NAME MATCHES \"Darwin\")\n    # Place the functions and data into separate sections, allowing the linker\n    # to garbage collect the unused ones.\n    SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -ffunction-sections -fdata-sections\")\n    SET(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Wl,--gc-sections\")\n    SET(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -Wl,--gc-sections\")\n    # Printing the discarded section is \"too much\", so enable on demand.\n    #SET(CMAKE_EXE_LINKER_FLAGS_DEBUG \"${CMAKE_EXE_LINKER_FLAGS_DEBUG} -Wl,--print-gc-sections\")\n    #SET(CMAKE_SHARED_LINKER_FLAGS_DEBUG \"${CMAKE_SHARED_LINKER_FLAGS_DEBUG} -Wl,--print-gc-sections\")\n  ELSE()\n    SET(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Wl,-dead_strip\")\n    SET(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -Wl,-dead_strip\")\n  ENDIF(NOT CMAKE_SYSTEM_NAME MATCHES \"Darwin\")\nENDIF (CMAKE_C_COMPILER_ID MATCHES \"^GNU$\" OR\n       CMAKE_C_COMPILER_ID MATCHES \"^Clang$\" AND NOT MSVC)\nIF (CMAKE_C_COMPILER_ID MATCHES \"^XL$\")\n  SET(CMAKE_C_COMPILER \"xlc_r\")\n  SET(CMAKE_REQUIRED_FLAGS \"-qflag=e:e -qformat=sec\")\n  #################################################################\n  # Set compile flags for all build types.\n  SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -qflag=e:e -qformat=sec\")\n  if (ENABLE_WERROR)\n    SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -qhalt=w\")\n  endif ()\n  #################################################################\n  # Set compile flags for debug build.\n  # This is added into CMAKE_C_FLAGS when CMAKE_BUILD_TYPE is \"Debug\"\n  SET(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -g\")\n  SET(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -qflag=w:w\")\n  SET(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} -qinfo=pro:use\")\nENDIF(CMAKE_C_COMPILER_ID MATCHES \"^XL$\")\nIF (MSVC)\n  if (ENABLE_WERROR)\n    # /WX option is the same as gcc's -Werror option.\n    SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /WX\")\n  endif ()\n  #################################################################\n  # Set compile flags for debug build.\n  # This is added into CMAKE_C_FLAGS when CMAKE_BUILD_TYPE is \"Debug\"\n  # Enable level 4 C4062: The enumerate has no associated handler in a switch\n  #                       statement and there is no default that can catch it.\n  SET(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} /w14062\")\n  # Enable level 4 C4254: A larger bit field was assigned to a smaller bit\n  #                       field.\n  SET(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} /w14254\")\n  # Enable level 4 C4295: An array was initialized but the last character in\n  #                       the array is not a null; accessing the array may\n  #                       produce unexpected results.\n  SET(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} /w14295\")\n  # Enable level 4 C4296: An unsigned variable was used in a comparison\n  #                       operation with zero.\n  SET(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} /w14296\")\n  # Enable level 4 C4389: An operation involved signed and unsigned variables.\n  #                       This could result in a loss of data.\n  SET(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} /w14389\")\n  # Enable level 4 C4505: The given function is local and not referenced in\n  #                       the body of the module; therefore, the function is\n  #                       dead code.\n  SET(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} /w14505\")\n  # Enable level 4 C4514: The optimizer removed an inline function that is not\n  #                       called.\n  SET(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} /w14514\")\n  # Enable level 4 C4702: Unreachable code.\n  SET(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} /w14702\")\n  # Enable level 4 C4706: The test value in a conditional expression was the\n  #                       result of an assignment.\n  SET(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} /w14706\")\n  # /Oi option enables built-in functions.\n  SET(CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG} /Oi\")\n  #################################################################\n  # Set compile flags for release build.\n  SET(CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE} /Oi\")\nENDIF (MSVC)\n\n# Enable CTest/CDash support\ninclude(CTest)\n\noption(BUILD_SHARED_LIBS \"Build shared libraries\" ON)\n\nOPTION(ENABLE_MBEDTLS \"Enable use of mbed TLS\" OFF)\nOPTION(ENABLE_NETTLE \"Enable use of Nettle\" OFF)\nOPTION(ENABLE_OPENSSL \"Enable use of OpenSSL\" ON)\nOPTION(ENABLE_LIBB2 \"Enable the use of the system LIBB2 library if found\" ON)\nOPTION(ENABLE_LZ4 \"Enable the use of the system LZ4 library if found\" ON)\nOPTION(ENABLE_LZO \"Enable the use of the system LZO library if found\" OFF)\nOPTION(ENABLE_LZMA \"Enable the use of the system LZMA library if found\" ON)\nOPTION(ENABLE_ZSTD \"Enable the use of the system zstd library if found\" ON)\n\nOPTION(ENABLE_ZLIB \"Enable the use of the system ZLIB library if found\" ON)\nOPTION(ENABLE_BZip2 \"Enable the use of the system BZip2 library if found\" ON)\nOPTION(ENABLE_LIBXML2 \"Enable the use of the system libxml2 library if found\" ON)\nOPTION(ENABLE_EXPAT \"Enable the use of the system EXPAT library if found\" ON)\nOPTION(ENABLE_PCREPOSIX \"Enable the use of the system PCREPOSIX library if found\" ON)\nOPTION(ENABLE_PCRE2POSIX \"Enable the use of the system PCRE2POSIX library if found\" ON)\nOPTION(ENABLE_LIBGCC \"Enable the use of the system LibGCC library if found\" ON)\n# CNG is used for encrypt/decrypt Zip archives on Windows.\nOPTION(ENABLE_CNG \"Enable the use of CNG(Crypto Next Generation)\" ON)\n\nOPTION(ENABLE_TAR \"Enable tar building\" ON)\nOPTION(ENABLE_TAR_SHARED \"Enable dynamic build of tar\" FALSE)\nOPTION(ENABLE_CPIO \"Enable cpio building\" ON)\nOPTION(ENABLE_CPIO_SHARED \"Enable dynamic build of cpio\" FALSE)\nOPTION(ENABLE_CAT \"Enable cat building\" ON)\nOPTION(ENABLE_CAT_SHARED \"Enable dynamic build of cat\" FALSE)\nIF(WIN32 AND NOT CYGWIN)\n\tSET(ENABLE_UNZIP FALSE)\n\tSET(ENABLE_UNZIP_SHARED FALSE)\nELSE()\n\tOPTION(ENABLE_UNZIP \"Enable unzip building\" ON)\n\tOPTION(ENABLE_UNZIP_SHARED \"Enable dynamic build of unzip\" FALSE)\nENDIF()\nOPTION(ENABLE_XATTR \"Enable extended attribute support\" ON)\nOPTION(ENABLE_ACL \"Enable ACL support\" ON)\nOPTION(ENABLE_ICONV \"Enable iconv support\" ON)\nOPTION(ENABLE_TEST \"Enable unit and regression tests\" ON)\nOPTION(ENABLE_COVERAGE \"Enable code coverage (GCC only, automatically sets ENABLE_TEST to ON)\" FALSE)\nOPTION(ENABLE_INSTALL \"Enable installing of libraries\" ON)\n\nSET(POSIX_REGEX_LIB \"AUTO\" CACHE STRING \"Choose what library should provide POSIX regular expression support\")\nSET(ENABLE_SAFESEH \"AUTO\" CACHE STRING \"Enable use of /SAFESEH linker flag (MSVC only)\")\nSET(WINDOWS_VERSION \"WIN10\" CACHE STRING \"Set Windows version to use (Windows only)\")\n\nIF(ENABLE_COVERAGE)\n\tinclude(LibarchiveCodeCoverage)\nENDIF(ENABLE_COVERAGE)\n\nIF(ENABLE_TEST)\n\tENABLE_TESTING()\nENDIF(ENABLE_TEST)\n\nIF(WIN32)\n  IF(WINDOWS_VERSION STREQUAL \"WIN10\")\n    SET(NTDDI_VERSION 0x0A000000)\n    SET(_WIN32_WINNT 0x0A00)\n    SET(WINVER 0x0A00)\n  ELSEIF(WINDOWS_VERSION STREQUAL \"WIN8\")\n    SET(NTDDI_VERSION 0x06020000)\n    SET(_WIN32_WINNT 0x0602)\n    SET(WINVER 0x0602)\n  ELSEIF(WINDOWS_VERSION STREQUAL \"WIN7\")\n    SET(NTDDI_VERSION 0x06010000)\n    SET(_WIN32_WINNT 0x0601)\n    SET(WINVER 0x0601)\n  ELSEIF(WINDOWS_VERSION STREQUAL \"WS08\")\n    SET(NTDDI_VERSION 0x06000100)\n    SET(_WIN32_WINNT 0x0600)\n    SET(WINVER 0x0600)\n  ELSEIF(WINDOWS_VERSION STREQUAL \"VISTA\")\n    SET(NTDDI_VERSION 0x06000000)\n    SET(_WIN32_WINNT 0x0600)\n    SET(WINVER 0x0600)\n  ELSEIF(WINDOWS_VERSION STREQUAL \"WS03\")\n    SET(NTDDI_VERSION 0x05020000)\n    SET(_WIN32_WINNT 0x0502)\n    SET(WINVER 0x0502)\n  ELSEIF(WINDOWS_VERSION STREQUAL \"WINXP\")\n    SET(NTDDI_VERSION 0x05010000)\n    SET(_WIN32_WINNT 0x0501)\n    SET(WINVER 0x0501)\n  ELSE(WINDOWS_VERSION STREQUAL \"WIN10\")\n    # Default to Windows Server 2003 API if we don't recognize the specifier\n    SET(NTDDI_VERSION 0x05020000)\n    SET(_WIN32_WINNT 0x0502)\n    SET(WINVER 0x0502)\n  ENDIF(WINDOWS_VERSION STREQUAL \"WIN10\")\nENDIF(WIN32)\n\nIF(MSVC)\n  IF(ENABLE_SAFESEH STREQUAL \"YES\")\n    SET(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /SAFESEH\")\n    SET(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} /SAFESEH\")\n    SET(CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} /SAFESEH\")\n    SET(ENV{LDFLAGS} \"$ENV{LDFLAGS} /SAFESEH\")\n  ELSEIF(ENABLE_SAFESEH STREQUAL \"NO\")\n    SET(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /SAFESEH:NO\")\n    SET(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} /SAFESEH:NO\")\n    SET(CMAKE_MODULE_LINKER_FLAGS \"${CMAKE_MODULE_LINKER_FLAGS} /SAFESEH:NO\")\n    SET(ENV{LDFLAGS} \"$ENV{LDFLAGS} /SAFESEH:NO\")\n  ENDIF(ENABLE_SAFESEH STREQUAL \"YES\")\nENDIF(MSVC)\n\nIF(\"${CMAKE_C_PLATFORM_ID}\" MATCHES \"^(HP-UX)$\")\n  ADD_DEFINITIONS(-D_XOPEN_SOURCE=500) # Ask wchar.h for mbstate_t\nENDIF()\n\nIF(MINGW)\n  ADD_DEFINITIONS(-D__USE_MINGW_ANSI_STDIO)\n  ADD_DEFINITIONS(-D__MINGW_USE_VC2005_COMPAT)\nENDIF()\n\n#\nINCLUDE(CheckCSourceCompiles)\nINCLUDE(CheckCSourceRuns)\nINCLUDE(CheckFileOffsetBits)\nINCLUDE(CheckFuncs)\nINCLUDE(CheckHeaderDirent)\nINCLUDE(CheckIncludeFile)\nINCLUDE(CheckIncludeFiles)\nINCLUDE(CheckLibraryExists)\nINCLUDE(CheckStructHasMember)\nINCLUDE(CheckSymbolExists)\nINCLUDE(CheckTypeExists)\nINCLUDE(CheckTypeSize)\n\n#\n# Generate list.h\n#\nMACRO (GENERATE_LIST_H _listfile _cmlist __list_sources)\n  SET(_argv ${ARGV})\n  # Remove _listfile and _cmlist from _argv\n  LIST(REMOVE_AT _argv 0 1)\n  IF (NOT EXISTS \"${_listfile}\" OR\n     ${_cmlist} IS_NEWER_THAN \"${_listfile}\")\n\n    MESSAGE(STATUS \"Generating ${_listfile}\")\n    FILE(WRITE ${_listfile} \"\")\n    FOREACH (testfile ${_argv})\n      IF (testfile MATCHES \"^test_[^/]+[.]c$\")\n        FILE(STRINGS ${testfile} testvar REGEX \"^DEFINE_TEST\")\n        FOREACH (deftest ${testvar})\n          FILE(APPEND ${_listfile} \"${deftest}\\n\")\n        ENDFOREACH (deftest)\n      ENDIF (testfile MATCHES \"^test_[^/]+[.]c$\")\n    ENDFOREACH (testfile)\n\n  ENDIF (NOT EXISTS \"${_listfile}\" OR\n     ${_cmlist} IS_NEWER_THAN \"${_listfile}\")\nENDMACRO (GENERATE_LIST_H)\n#\n# Generate installation rules for man pages.\n#\nMACRO (INSTALL_MAN __mans)\n  IF(ENABLE_INSTALL)\n    FOREACH (_man ${ARGV})\n      STRING(REGEX REPLACE \"^.+[.]([1-9])\" \"\\\\1\" _mansect ${_man})\n      INSTALL(FILES ${_man} DESTINATION \"share/man/man${_mansect}\")\n    ENDFOREACH (_man)\n  ENDIF(ENABLE_INSTALL)\nENDMACRO (INSTALL_MAN __mans)\n#\n# Find out what macro is needed to use libraries on Windows.\n#\nMACRO (TRY_MACRO_FOR_LIBRARY INCLUDES LIBRARIES\n       TRY_TYPE SAMPLE_SOURCE MACRO_LIST)\n  IF(WIN32 AND NOT CYGWIN)\n    CMAKE_PUSH_CHECK_STATE()\t# Save the state of the variables\n    SET(CMAKE_REQUIRED_INCLUDES ${INCLUDES})\n    SET(CMAKE_REQUIRED_LIBRARIES ${LIBRARIES})\n    FOREACH(VAR ${MACRO_LIST})\n      # Clear ${VAR} from CACHE If the libraries which ${VAR} was\n      # checked with are changed.\n      SET(VAR_WITH_LIB \"${VAR}_WITH_LIB\")\n      GET_PROPERTY(PREV_VAR_WITH_LIB VARIABLE PROPERTY ${VAR_WITH_LIB})\n      IF(NOT \"${PREV_VAR_WITH_LIB}\" STREQUAL \"${LIBRARIES}\")\n        UNSET(${VAR} CACHE)\n      ENDIF(NOT \"${PREV_VAR_WITH_LIB}\" STREQUAL \"${LIBRARIES}\")\n      # Check if the library can be used with the macro.\n      IF(\"${TRY_TYPE}\" MATCHES \"COMPILES\")\n        CHECK_C_SOURCE_COMPILES(\"${SAMPLE_SOURCE}\" ${VAR})\n      ELSEIF(\"${TRY_TYPE}\" MATCHES \"RUNS\")\n        IF(CMAKE_CROSSCOMPILING)\n          MESSAGE(WARNING \"Cannot test run \\\"${VAR}\\\" when cross-compiling\")\n        ELSE(CMAKE_CROSSCOMPILING)\n          CHECK_C_SOURCE_RUNS(\"${SAMPLE_SOURCE}\" ${VAR})\n        ENDIF(CMAKE_CROSSCOMPILING)\n      ELSE(\"${TRY_TYPE}\" MATCHES \"COMPILES\")\n        MESSAGE(FATAL_ERROR \"UNKNOWN KEYWORD \\\"${TRY_TYPE}\\\" FOR TRY_TYPE\")\n      ENDIF(\"${TRY_TYPE}\" MATCHES \"COMPILES\")\n      # Save the libraries which ${VAR} is checked with.\n      SET(${VAR_WITH_LIB} \"${LIBRARIES}\" CACHE INTERNAL\n          \"Macro ${VAR} is checked with\")\n    ENDFOREACH(VAR)\n    CMAKE_POP_CHECK_STATE()\t# Restore the state of the variables\n  ENDIF(WIN32 AND NOT CYGWIN)\nENDMACRO (TRY_MACRO_FOR_LIBRARY)\n#\n# Check compress/decompress libraries\n#\nIF(WIN32 AND NOT CMAKE_CL_64 AND NOT CYGWIN)\n  # GnuWin32 is only for Win32, not Win64.\n  SET(__GNUWIN32PATH \"C:/Program Files/GnuWin32\")\nENDIF(WIN32 AND NOT CMAKE_CL_64 AND NOT CYGWIN)\nIF(DEFINED __GNUWIN32PATH AND EXISTS \"${__GNUWIN32PATH}\")\n  # You have to add a path available DLL file into PATH environment variable.\n  # Maybe DLL path is \"C:/Program Files/GnuWin32/bin\".\n  # The zlib and the bzip2 Setup program have installed programs and DLLs into\n  # \"C:/Program Files/GnuWin32\" by default.\n  # This is convenience setting for Windows.\n  SET(CMAKE_PREFIX_PATH ${__GNUWIN32PATH} $(CMAKE_PREFIX_PATH))\n  #\n  # If you didn't use Setup program or installed into nonstandard path,\n  # cmake cannot find out your zlib or bzip2 libraries and include files,\n  # you should execute cmake with  -DCMAKE_PREFIX_PATH option.\n  #   e.g.\n  #     cmake -DCMAKE_PREFIX_PATH=<your-GnuWin32-path> <path-to-source>\n  #\n  # If compiling error occurred in zconf.h, You may need patch to zconf.h.\n  #--- zconf.h.orig\t2005-07-21 00:40:26.000000000\n  #+++ zconf.h\t2009-01-19 11:39:10.093750000\n  #@@ -286,7 +286,7 @@\n  #\n  # #if 1           /* HAVE_UNISTD_H -- this line is updated by ./configure */\n  # #  include <sys/types.h> /* for off_t */\n  #-#  include <unistd.h>    /* for SEEK_* and off_t */\n  #+#  include <stdio.h>    /* for SEEK_* and off_t */\n  # #  ifdef VMS\n  # #    include <unixio.h>   /* for off_t */\n  # #  endif\nENDIF(DEFINED __GNUWIN32PATH AND EXISTS \"${__GNUWIN32PATH}\")\n\nSET(ADDITIONAL_LIBS \"\")\n#\n# Find ZLIB\n#\nIF(ENABLE_ZLIB)\n  # Require zlib >= 1.2.1, see: https://github.com/libarchive/libarchive/issues/615\n  # zlib 1.2.0 should also work, but it is difficult to test for. Let's require\n  # zlib >= 1.2.1 for consistency with the autoconf build.\n  FIND_PACKAGE(ZLIB 1.2.1)\nELSE()\n  SET(ZLIB_FOUND FALSE) # Override cached value\nENDIF()\nIF(ZLIB_FOUND)\n  SET(HAVE_LIBZ 1)\n  SET(HAVE_ZLIB_H 1)\n  INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIR})\n  LIST(APPEND ADDITIONAL_LIBS ${ZLIB_LIBRARIES})\n  IF(WIN32 AND NOT CYGWIN)\n    #\n    # Test if ZLIB_WINAPI macro is needed to use.\n    #\n    TRY_MACRO_FOR_LIBRARY(\n      \"${ZLIB_INCLUDE_DIR}\" \"${ZLIB_LIBRARIES}\"\n      RUNS\n      \"#include <zlib.h>\\nint main() {uLong f = zlibCompileFlags(); return (f&(1U<<10))?0:-1; }\"\n      ZLIB_WINAPI)\n    IF(ZLIB_WINAPI)\n      ADD_DEFINITIONS(-DZLIB_WINAPI)\n    ELSE(ZLIB_WINAPI)\n      # Test if a macro is needed for the library.\n      TRY_MACRO_FOR_LIBRARY(\n        \"${ZLIB_INCLUDE_DIR}\" \"${ZLIB_LIBRARIES}\"\n        COMPILES\n        \"#include <zlib.h>\\nint main() {return zlibVersion()?1:0; }\"\n        \"ZLIB_DLL;WITHOUT_ZLIB_DLL\")\n      IF(ZLIB_DLL)\n        ADD_DEFINITIONS(-DZLIB_DLL)\n      ENDIF(ZLIB_DLL)\n    ENDIF(ZLIB_WINAPI)\n  ENDIF(WIN32 AND NOT CYGWIN)\nENDIF(ZLIB_FOUND)\nMARK_AS_ADVANCED(CLEAR ZLIB_INCLUDE_DIR)\nMARK_AS_ADVANCED(CLEAR ZLIB_LIBRARY)\n#\n# Find BZip2\n#\nIF(ENABLE_BZip2)\n  FIND_PACKAGE(BZip2)\nELSE()\n  SET(BZIP2_FOUND FALSE) # Override cached value\nENDIF()\nIF(BZIP2_FOUND)\n  SET(HAVE_LIBBZ2 1)\n  SET(HAVE_BZLIB_H 1)\n  INCLUDE_DIRECTORIES(${BZIP2_INCLUDE_DIR})\n  LIST(APPEND ADDITIONAL_LIBS ${BZIP2_LIBRARIES})\n  # Test if a macro is needed for the library.\n  TRY_MACRO_FOR_LIBRARY(\n    \"${BZIP2_INCLUDE_DIR}\" \"${BZIP2_LIBRARIES}\"\n    COMPILES\n    \"#include <bzlib.h>\\nint main() {return BZ2_bzlibVersion()?1:0; }\"\n    \"USE_BZIP2_DLL;USE_BZIP2_STATIC\")\n  IF(USE_BZIP2_DLL)\n    ADD_DEFINITIONS(-DUSE_BZIP2_DLL)\n  ELSEIF(USE_BZIP2_STATIC)\n    ADD_DEFINITIONS(-DUSE_BZIP2_STATIC)\n  ENDIF(USE_BZIP2_DLL)\nENDIF(BZIP2_FOUND)\nMARK_AS_ADVANCED(CLEAR BZIP2_INCLUDE_DIR)\nMARK_AS_ADVANCED(CLEAR BZIP2_LIBRARIES)\n\n\n#\n# Find LZMA\n#\nIF(ENABLE_LZMA)\n  FIND_PACKAGE(LibLZMA)\nELSE()\n  SET(LIBLZMA_FOUND FALSE) # Override cached value\nENDIF()\n\nIF(LIBLZMA_FOUND)\n  SET(HAVE_LIBLZMA 1)\n  SET(HAVE_LZMA_H 1)\n  CMAKE_PUSH_CHECK_STATE()\n  SET(CMAKE_REQUIRED_INCLUDES ${LIBLZMA_INCLUDE_DIR})\n  SET(CMAKE_REQUIRED_LIBRARIES ${LIBLZMA_LIBRARIES})\n  INCLUDE_DIRECTORIES(${LIBLZMA_INCLUDE_DIRS})\n  LIST(APPEND ADDITIONAL_LIBS ${LIBLZMA_LIBRARIES})\n  # Test if a macro is needed for the library.\n  TRY_MACRO_FOR_LIBRARY(\n    \"${LIBLZMA_INCLUDE_DIRS}\" \"${LIBLZMA_LIBRARIES}\"\n    COMPILES\n    \"#include <lzma.h>\\nint main() {return (int)lzma_version_number(); }\"\n    \"WITHOUT_LZMA_API_STATIC;LZMA_API_STATIC\")\n  CHECK_C_SOURCE_COMPILES(\n    \"#include <lzma.h>\\n#if LZMA_VERSION < 50020000\\n#error unsupported\\n#endif\\nint main(void){int ignored __attribute__((unused)); ignored = lzma_stream_encoder_mt(0, 0); return 0;}\"\n    HAVE_LZMA_STREAM_ENCODER_MT)\n  IF(NOT WITHOUT_LZMA_API_STATIC AND LZMA_API_STATIC)\n    ADD_DEFINITIONS(-DLZMA_API_STATIC)\n  ENDIF(NOT WITHOUT_LZMA_API_STATIC AND LZMA_API_STATIC)\n  CMAKE_POP_CHECK_STATE()\nELSE(LIBLZMA_FOUND)\n# LZMA not found and will not be used.\n  SET(HAVE_LZMA_STREAM_ENCODER_MT 0)\nENDIF(LIBLZMA_FOUND)\nMARK_AS_ADVANCED(CLEAR LIBLZMA_INCLUDE_DIR)\nMARK_AS_ADVANCED(CLEAR LIBLZMA_LIBRARY)\n\n#\n# Find LZO2\n#\nIF(ENABLE_LZO)\n  IF (LZO2_INCLUDE_DIR)\n    # Already in cache, be silent\n    SET(LZO2_FIND_QUIETLY TRUE)\n  ENDIF (LZO2_INCLUDE_DIR)\n\n  FIND_PATH(LZO2_INCLUDE_DIR lzo/lzoconf.h)\n  FIND_LIBRARY(LZO2_LIBRARY NAMES lzo2 liblzo2)\n  INCLUDE(FindPackageHandleStandardArgs)\n  FIND_PACKAGE_HANDLE_STANDARD_ARGS(LZO2 DEFAULT_MSG LZO2_LIBRARY LZO2_INCLUDE_DIR)\nELSE(ENABLE_LZO)\n  SET(LZO2_FOUND FALSE) # Override cached value\nENDIF(ENABLE_LZO)\nIF(LZO2_FOUND)\n  SET(HAVE_LIBLZO2 1)\n  SET(HAVE_LZO_LZOCONF_H 1)\n  SET(HAVE_LZO_LZO1X_H 1)\n  INCLUDE_DIRECTORIES(${LZO2_INCLUDE_DIR})\n  LIST(APPEND ADDITIONAL_LIBS ${LZO2_LIBRARY})\n  #\n  # TODO: test for static library.\n  #\nENDIF(LZO2_FOUND)\nMARK_AS_ADVANCED(CLEAR LZO2_INCLUDE_DIR)\nMARK_AS_ADVANCED(CLEAR LZO2_LIBRARY)\n#\n# Find libb2\n#\nIF(ENABLE_LIBB2)\n  IF (LIBB2_INCLUDE_DIR)\n    # Already in cache, be silent\n    SET(LIBB2_FIND_QUIETLY TRUE)\n  ENDIF (LIBB2_INCLUDE_DIR)\n\n  FIND_PATH(LIBB2_INCLUDE_DIR blake2.h)\n  FIND_LIBRARY(LIBB2_LIBRARY NAMES b2 libb2)\n  INCLUDE(FindPackageHandleStandardArgs)\n  FIND_PACKAGE_HANDLE_STANDARD_ARGS(LIBB2 DEFAULT_MSG LIBB2_LIBRARY LIBB2_INCLUDE_DIR)\nELSE(ENABLE_LIBB2)\n  SET(LIBB2_FOUND FALSE) # Override cached value\nENDIF(ENABLE_LIBB2)\nIF(LIBB2_FOUND)\n  SET(HAVE_LIBB2 1)\n  SET(HAVE_BLAKE2_H 1)\n  SET(ARCHIVE_BLAKE2 FALSE)\n  LIST(APPEND ADDITIONAL_LIBS ${LIBB2_LIBRARY})\n  INCLUDE_DIRECTORIES(${LIBB2_INCLUDE_DIR})\n  CMAKE_PUSH_CHECK_STATE()\n  SET(CMAKE_REQUIRED_LIBRARIES ${LIBB2_LIBRARY})\n  SET(CMAKE_REQUIRED_INCLUDES ${LIBB2_INCLUDE_DIR})\n  CHECK_FUNCTION_EXISTS(blake2sp_init HAVE_LIBB2)\n  CMAKE_POP_CHECK_STATE()\nELSE(LIBB2_FOUND)\n  SET(ARCHIVE_BLAKE2 TRUE)\nENDIF(LIBB2_FOUND)\n#\n# Find LZ4\n#\nIF(ENABLE_LZ4)\n  IF (LZ4_INCLUDE_DIR)\n    # Already in cache, be silent\n    SET(LZ4_FIND_QUIETLY TRUE)\n  ENDIF (LZ4_INCLUDE_DIR)\n\n  FIND_PATH(LZ4_INCLUDE_DIR lz4.h)\n  FIND_LIBRARY(LZ4_LIBRARY NAMES lz4 liblz4)\n  INCLUDE(FindPackageHandleStandardArgs)\n  FIND_PACKAGE_HANDLE_STANDARD_ARGS(LZ4 DEFAULT_MSG LZ4_LIBRARY LZ4_INCLUDE_DIR)\nELSE(ENABLE_LZ4)\n  SET(LZ4_FOUND FALSE) # Override cached value\nENDIF(ENABLE_LZ4)\nIF(LZ4_FOUND)\n  SET(HAVE_LIBLZ4 1)\n  SET(HAVE_LZ4_H 1)\n  CMAKE_PUSH_CHECK_STATE()\t# Save the state of the variables\n  SET(CMAKE_REQUIRED_INCLUDES ${LZ4_INCLUDE_DIR})\n  CHECK_INCLUDE_FILES(\"lz4hc.h\" HAVE_LZ4HC_H)\n  CMAKE_POP_CHECK_STATE()\t# Restore the state of the variables\n  INCLUDE_DIRECTORIES(${LZ4_INCLUDE_DIR})\n  LIST(APPEND ADDITIONAL_LIBS ${LZ4_LIBRARY})\n  #\n  # TODO: test for static library.\n  #\nENDIF(LZ4_FOUND)\nMARK_AS_ADVANCED(CLEAR LZ4_INCLUDE_DIR)\nMARK_AS_ADVANCED(CLEAR LZ4_LIBRARY)\n#\n# Find Zstd\n#\nIF(ENABLE_ZSTD)\n  IF (ZSTD_INCLUDE_DIR)\n    # Already in cache, be silent\n    SET(ZSTD_FIND_QUIETLY TRUE)\n  ENDIF (ZSTD_INCLUDE_DIR)\n\n  IF(UNIX)\n    FIND_PACKAGE(PkgConfig QUIET)\n    PKG_SEARCH_MODULE(PC_ZSTD libzstd)\n  ENDIF()\n\n  FIND_PATH(ZSTD_INCLUDE_DIR zstd.h HINTS ${PC_ZSTD_INCLUDEDIR} ${PC_ZSTD_INCLUDE_DIRS})\n  FIND_LIBRARY(ZSTD_LIBRARY NAMES zstd libzstd HINTS ${PC_ZSTD_LIBDIR} ${PC_ZSTD_LIBRARY_DIRS})\n  INCLUDE(FindPackageHandleStandardArgs)\n  FIND_PACKAGE_HANDLE_STANDARD_ARGS(ZSTD DEFAULT_MSG ZSTD_LIBRARY ZSTD_INCLUDE_DIR)\nELSE(ENABLE_ZSTD)\n  SET(ZSTD_FOUND FALSE) # Override cached value\nENDIF(ENABLE_ZSTD)\nIF(ZSTD_FOUND)\n  SET(HAVE_ZSTD_H 1)\n  INCLUDE_DIRECTORIES(${ZSTD_INCLUDE_DIR})\n  LIST(APPEND ADDITIONAL_LIBS ${ZSTD_LIBRARY})\n  CMAKE_PUSH_CHECK_STATE()\n  SET(CMAKE_REQUIRED_LIBRARIES ${ZSTD_LIBRARY})\n  SET(CMAKE_REQUIRED_INCLUDES ${ZSTD_INCLUDE_DIR})\n  CHECK_FUNCTION_EXISTS(ZSTD_decompressStream HAVE_LIBZSTD)\n  CHECK_FUNCTION_EXISTS(ZSTD_compressStream HAVE_ZSTD_compressStream)\n  CHECK_FUNCTION_EXISTS(ZSTD_minCLevel HAVE_ZSTD_minCLevel)\n  #\n  # TODO: test for static library.\n  #\n  CMAKE_POP_CHECK_STATE()\nENDIF(ZSTD_FOUND)\nMARK_AS_ADVANCED(CLEAR ZSTD_INCLUDE_DIR)\nMARK_AS_ADVANCED(CLEAR ZSTD_LIBRARY)\n\n\n#\n# Check headers\n#\nCHECK_HEADER_DIRENT()\n\nSET(INCLUDES \"\")\nMACRO (LA_CHECK_INCLUDE_FILE header var)\n      CHECK_INCLUDE_FILES(\"${INCLUDES};${header}\" ${var})\n      IF (${var})\n      \t SET(INCLUDES ${INCLUDES} ${header})\n      ENDIF (${var})\nENDMACRO (LA_CHECK_INCLUDE_FILE)\n\n# Some FreeBSD headers assume sys/types.h was already included.\nLA_CHECK_INCLUDE_FILE(\"sys/types.h\" HAVE_SYS_TYPES_H)\n\n# Alphabetize the rest unless there's a compelling reason\nLA_CHECK_INCLUDE_FILE(\"acl/libacl.h\" HAVE_ACL_LIBACL_H)\nLA_CHECK_INCLUDE_FILE(\"attr/xattr.h\" HAVE_ATTR_XATTR_H)\nLA_CHECK_INCLUDE_FILE(\"ctype.h\" HAVE_CTYPE_H)\nLA_CHECK_INCLUDE_FILE(\"copyfile.h\" HAVE_COPYFILE_H)\nLA_CHECK_INCLUDE_FILE(\"direct.h\" HAVE_DIRECT_H)\nLA_CHECK_INCLUDE_FILE(\"dlfcn.h\" HAVE_DLFCN_H)\nLA_CHECK_INCLUDE_FILE(\"errno.h\" HAVE_ERRNO_H)\nLA_CHECK_INCLUDE_FILE(\"ext2fs/ext2_fs.h\" HAVE_EXT2FS_EXT2_FS_H)\n\nCHECK_C_SOURCE_COMPILES(\"#include <sys/ioctl.h>\n#include <ext2fs/ext2_fs.h>\nint main(void) { return EXT2_IOC_GETFLAGS; }\" HAVE_WORKING_EXT2_IOC_GETFLAGS)\n\nLA_CHECK_INCLUDE_FILE(\"fcntl.h\" HAVE_FCNTL_H)\nLA_CHECK_INCLUDE_FILE(\"fnmatch.h\" HAVE_FNMATCH_H)\nLA_CHECK_INCLUDE_FILE(\"grp.h\" HAVE_GRP_H)\nLA_CHECK_INCLUDE_FILE(\"inttypes.h\" HAVE_INTTYPES_H)\nLA_CHECK_INCLUDE_FILE(\"io.h\" HAVE_IO_H)\nLA_CHECK_INCLUDE_FILE(\"langinfo.h\" HAVE_LANGINFO_H)\nLA_CHECK_INCLUDE_FILE(\"limits.h\" HAVE_LIMITS_H)\nLA_CHECK_INCLUDE_FILE(\"linux/types.h\" HAVE_LINUX_TYPES_H)\nLA_CHECK_INCLUDE_FILE(\"linux/fiemap.h\" HAVE_LINUX_FIEMAP_H)\nLA_CHECK_INCLUDE_FILE(\"linux/fs.h\" HAVE_LINUX_FS_H)\n\nCHECK_C_SOURCE_COMPILES(\"#include <sys/ioctl.h>\n#include <linux/fs.h>\nint main(void) { return FS_IOC_GETFLAGS; }\" HAVE_WORKING_FS_IOC_GETFLAGS)\n\nLA_CHECK_INCLUDE_FILE(\"linux/magic.h\" HAVE_LINUX_MAGIC_H)\nLA_CHECK_INCLUDE_FILE(\"locale.h\" HAVE_LOCALE_H)\nLA_CHECK_INCLUDE_FILE(\"membership.h\" HAVE_MEMBERSHIP_H)\nLA_CHECK_INCLUDE_FILE(\"memory.h\" HAVE_MEMORY_H)\nLA_CHECK_INCLUDE_FILE(\"paths.h\" HAVE_PATHS_H)\nLA_CHECK_INCLUDE_FILE(\"poll.h\" HAVE_POLL_H)\nLA_CHECK_INCLUDE_FILE(\"process.h\" HAVE_PROCESS_H)\nLA_CHECK_INCLUDE_FILE(\"pthread.h\" HAVE_PTHREAD_H)\nLA_CHECK_INCLUDE_FILE(\"pwd.h\" HAVE_PWD_H)\nLA_CHECK_INCLUDE_FILE(\"readpassphrase.h\" HAVE_READPASSPHRASE_H)\nLA_CHECK_INCLUDE_FILE(\"regex.h\" HAVE_REGEX_H)\nLA_CHECK_INCLUDE_FILE(\"signal.h\" HAVE_SIGNAL_H)\nLA_CHECK_INCLUDE_FILE(\"spawn.h\" HAVE_SPAWN_H)\nLA_CHECK_INCLUDE_FILE(\"stdarg.h\" HAVE_STDARG_H)\nLA_CHECK_INCLUDE_FILE(\"stdint.h\" HAVE_STDINT_H)\nLA_CHECK_INCLUDE_FILE(\"stdlib.h\" HAVE_STDLIB_H)\nLA_CHECK_INCLUDE_FILE(\"string.h\" HAVE_STRING_H)\nLA_CHECK_INCLUDE_FILE(\"strings.h\" HAVE_STRINGS_H)\nLA_CHECK_INCLUDE_FILE(\"sys/acl.h\" HAVE_SYS_ACL_H)\nLA_CHECK_INCLUDE_FILE(\"sys/cdefs.h\" HAVE_SYS_CDEFS_H)\nLA_CHECK_INCLUDE_FILE(\"sys/extattr.h\" HAVE_SYS_EXTATTR_H)\nLA_CHECK_INCLUDE_FILE(\"sys/ioctl.h\" HAVE_SYS_IOCTL_H)\nLA_CHECK_INCLUDE_FILE(\"sys/mkdev.h\" HAVE_SYS_MKDEV_H)\nLA_CHECK_INCLUDE_FILE(\"sys/mount.h\" HAVE_SYS_MOUNT_H)\nLA_CHECK_INCLUDE_FILE(\"sys/param.h\" HAVE_SYS_PARAM_H)\nLA_CHECK_INCLUDE_FILE(\"sys/poll.h\" HAVE_SYS_POLL_H)\nLA_CHECK_INCLUDE_FILE(\"sys/richacl.h\" HAVE_SYS_RICHACL_H)\nLA_CHECK_INCLUDE_FILE(\"sys/select.h\" HAVE_SYS_SELECT_H)\nLA_CHECK_INCLUDE_FILE(\"sys/stat.h\" HAVE_SYS_STAT_H)\nLA_CHECK_INCLUDE_FILE(\"sys/statfs.h\" HAVE_SYS_STATFS_H)\nLA_CHECK_INCLUDE_FILE(\"sys/statvfs.h\" HAVE_SYS_STATVFS_H)\nLA_CHECK_INCLUDE_FILE(\"sys/sysmacros.h\" HAVE_SYS_SYSMACROS_H)\nLA_CHECK_INCLUDE_FILE(\"sys/time.h\" HAVE_SYS_TIME_H)\nLA_CHECK_INCLUDE_FILE(\"sys/utime.h\" HAVE_SYS_UTIME_H)\nLA_CHECK_INCLUDE_FILE(\"sys/utsname.h\" HAVE_SYS_UTSNAME_H)\nLA_CHECK_INCLUDE_FILE(\"sys/vfs.h\" HAVE_SYS_VFS_H)\nLA_CHECK_INCLUDE_FILE(\"sys/wait.h\" HAVE_SYS_WAIT_H)\nLA_CHECK_INCLUDE_FILE(\"sys/xattr.h\" HAVE_SYS_XATTR_H)\nLA_CHECK_INCLUDE_FILE(\"time.h\" HAVE_TIME_H)\nLA_CHECK_INCLUDE_FILE(\"unistd.h\" HAVE_UNISTD_H)\nLA_CHECK_INCLUDE_FILE(\"utime.h\" HAVE_UTIME_H)\nLA_CHECK_INCLUDE_FILE(\"wchar.h\" HAVE_WCHAR_H)\nLA_CHECK_INCLUDE_FILE(\"wctype.h\" HAVE_WCTYPE_H)\nLA_CHECK_INCLUDE_FILE(\"windows.h\" HAVE_WINDOWS_H)\nIF(ENABLE_CNG)\n  LA_CHECK_INCLUDE_FILE(\"bcrypt.h\" HAVE_BCRYPT_H)\n  IF(HAVE_BCRYPT_H)\n    LIST(APPEND ADDITIONAL_LIBS \"bcrypt\")\n  ENDIF(HAVE_BCRYPT_H)\nELSE(ENABLE_CNG)\n  UNSET(HAVE_BCRYPT_H CACHE)\nENDIF(ENABLE_CNG)\n# Following files need windows.h, so we should test it after windows.h test.\nLA_CHECK_INCLUDE_FILE(\"wincrypt.h\" HAVE_WINCRYPT_H)\nLA_CHECK_INCLUDE_FILE(\"winioctl.h\" HAVE_WINIOCTL_H)\n\n#\n# Check whether use of __EXTENSIONS__ is safe.\n# We need some macro such as _GNU_SOURCE to use extension functions.\n#\nSET(_INCLUDE_FILES)\nFOREACH (it ${_HEADER})\n   SET(_INCLUDE_FILES \"${_INCLUDE_FILES}#include <${it}>\\n\")\nENDFOREACH (it)\n\nCHECK_C_SOURCE_COMPILES(\n  \"#define __EXTENSIONS__ 1\n   ${_INCLUDE_FILES}\n   int main() { return 0;}\"\n SAFE_TO_DEFINE_EXTENSIONS)\n\n#\n# Find mbed TLS\n#\nIF(ENABLE_MBEDTLS)\n  FIND_PACKAGE(MbedTLS)\n  IF(MBEDTLS_FOUND)\n    SET(HAVE_LIBMBEDCRYPTO 1)\n    LIST(APPEND ADDITIONAL_LIBS ${MBEDCRYPTO_LIBRARY})\n    INCLUDE_DIRECTORIES(${MBEDTLS_INCLUDE_DIRS})\n\n    LIST(APPEND CMAKE_REQUIRED_INCLUDES ${MBEDTLS_INCLUDE_DIRS})\n    LA_CHECK_INCLUDE_FILE(\"mbedtls/aes.h\" HAVE_MBEDTLS_AES_H)\n    LA_CHECK_INCLUDE_FILE(\"mbedtls/md.h\" HAVE_MBEDTLS_MD_H)\n    LA_CHECK_INCLUDE_FILE(\"mbedtls/pkcs5.h\" HAVE_MBEDTLS_PKCS5_H)\n\n  ENDIF(MBEDTLS_FOUND)\n  MARK_AS_ADVANCED(CLEAR MBEDTLS_INCLUDE_DIRS)\n  MARK_AS_ADVANCED(CLEAR MBEDCRYPTO_LIBRARY)\nENDIF(ENABLE_MBEDTLS)\n\n#\n# Find Nettle\n#\nIF(ENABLE_NETTLE)\n  FIND_PACKAGE(Nettle)\n  IF(NETTLE_FOUND)\n    SET(HAVE_LIBNETTLE 1)\n    LIST(APPEND ADDITIONAL_LIBS ${NETTLE_LIBRARIES})\n    INCLUDE_DIRECTORIES(${NETTLE_INCLUDE_DIR})\n\n    LIST(APPEND CMAKE_REQUIRED_INCLUDES ${NETTLE_INCLUDE_DIR})\n    LA_CHECK_INCLUDE_FILE(\"nettle/aes.h\" HAVE_NETTLE_AES_H)\n    LA_CHECK_INCLUDE_FILE(\"nettle/hmac.h\" HAVE_NETTLE_HMAC_H)\n    LA_CHECK_INCLUDE_FILE(\"nettle/md5.h\" HAVE_NETTLE_MD5_H)\n    LA_CHECK_INCLUDE_FILE(\"nettle/pbkdf2.h\" HAVE_NETTLE_PBKDF2_H)\n    LA_CHECK_INCLUDE_FILE(\"nettle/ripemd160.h\" HAVE_NETTLE_RIPEMD160_H)\n    LA_CHECK_INCLUDE_FILE(\"nettle/sha.h\" HAVE_NETTLE_SHA_H)\n\n  ENDIF(NETTLE_FOUND)\n  MARK_AS_ADVANCED(CLEAR NETTLE_INCLUDE_DIR)\n  MARK_AS_ADVANCED(CLEAR NETTLE_LIBRARIES)\nENDIF(ENABLE_NETTLE)\n\n#\n# Find OpenSSL\n# (Except on Mac, where OpenSSL is deprecated.)\n#\nIF(ENABLE_OPENSSL AND NOT CMAKE_SYSTEM_NAME MATCHES \"Darwin\")\n  FIND_PACKAGE(OpenSSL)\n  IF(OPENSSL_FOUND)\n    SET(HAVE_LIBCRYPTO 1)\n    INCLUDE_DIRECTORIES(${OPENSSL_INCLUDE_DIR})\n    LIST(APPEND ADDITIONAL_LIBS ${OPENSSL_CRYPTO_LIBRARY})\n    SET(CMAKE_REQUIRED_LIBRARIES ${OPENSSL_CRYPTO_LIBRARY})\n    SET(CMAKE_REQUIRED_INCLUDES ${OPENSSL_INCLUDE_DIR})\n    LA_CHECK_INCLUDE_FILE(\"openssl/evp.h\" HAVE_OPENSSL_EVP_H)\n    CHECK_FUNCTION_EXISTS(PKCS5_PBKDF2_HMAC_SHA1 HAVE_PKCS5_PBKDF2_HMAC_SHA1)\n  ENDIF(OPENSSL_FOUND)\nELSE()\n  SET(OPENSSL_FOUND FALSE) # Override cached value\nENDIF()\n\n# FreeBSD libmd\nIF(NOT OPENSSL_FOUND)\n  CHECK_LIBRARY_EXISTS(md \"MD5Init\" \"\" LIBMD_FOUND)\n  IF(LIBMD_FOUND)\n    CMAKE_PUSH_CHECK_STATE()\t# Save the state of the variables\n    SET(CMAKE_REQUIRED_LIBRARIES \"md\")\n    FIND_LIBRARY(LIBMD_LIBRARY NAMES md)\n    LIST(APPEND ADDITIONAL_LIBS ${LIBMD_LIBRARY})\n    CMAKE_POP_CHECK_STATE()\t# Restore the state of the variables\n  ENDIF(LIBMD_FOUND)\nENDIF(NOT OPENSSL_FOUND)\n\n# libbsd for readpassphrase on Haiku\nIF(\"${CMAKE_SYSTEM_NAME}\" MATCHES \"Haiku\")\n  MESSAGE(STATUS \"Adding libbsd for Haiku\")\n  SET(CMAKE_REQUIRED_LIBRARIES \"bsd\")\n  FIND_LIBRARY(LIBBSD_LIBRARY NAMES bsd)\n  LIST(APPEND ADDITIONAL_LIBS ${LIBBSD_LIBRARY})\nENDIF(\"${CMAKE_SYSTEM_NAME}\" MATCHES \"Haiku\")\n\n#\n# How to prove that CRYPTO functions, which have several names on various\n# platforms, just see if archive_digest.c can compile and link against\n# required libraries.\n#\nMACRO(CHECK_CRYPTO ALGORITHMS IMPLEMENTATION)\n    FOREACH(ALGORITHM ${ALGORITHMS})\n      IF(NOT ARCHIVE_CRYPTO_${ALGORITHM})\n      STRING(TOLOWER \"${ALGORITHM}\" lower_algorithm)\n      STRING(TOUPPER \"${ALGORITHM}\" algorithm)\n      IF (\"${IMPLEMENTATION}\" MATCHES \"^OPENSSL$\" AND NOT OPENSSL_FOUND)\n        SET(ARCHIVE_CRYPTO_${ALGORITHM}_${IMPLEMENTATION} FALSE)\n      ELSEIF(\"${IMPLEMENTATION}\" MATCHES \"^MBEDTLS$\" AND NOT MBEDTLS_FOUND)\n        SET(ARCHIVE_CRYPTO_${ALGORITHM}_${IMPLEMENTATION} FALSE)\n      ELSEIF(\"${IMPLEMENTATION}\" MATCHES \"^NETTLE$\" AND NOT NETTLE_FOUND)\n        SET(ARCHIVE_CRYPTO_${ALGORITHM}_${IMPLEMENTATION} FALSE)\n      ENDIF(\"${IMPLEMENTATION}\" MATCHES \"^OPENSSL$\" AND NOT OPENSSL_FOUND)\n\n      IF(NOT DEFINED ARCHIVE_CRYPTO_${ALGORITHM}_${IMPLEMENTATION})\n        # Probe the local implementation for whether this\n\t# crypto implementation is available on this platform.\n\tSET(TRY_CRYPTO_REQUIRED_INCLUDES\n\t  \"-DINCLUDE_DIRECTORIES:STRING=${CMAKE_BINARY_DIR};${CMAKE_CURRENT_SOURCE_DIR}/libarchive;${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp\")\n\tSET(TRY_CRYPTO_REQUIRED_LIBS)\n\tIF (\"${IMPLEMENTATION}\" MATCHES \"^OPENSSL$\" AND OPENSSL_FOUND)\n\t    SET(TRY_CRYPTO_REQUIRED_INCLUDES\n\t      \"${TRY_CRYPTO_REQUIRED_INCLUDES};${OPENSSL_INCLUDE_DIR}\")\n\t    SET(TRY_CRYPTO_REQUIRED_LIBS\n\t        \"-DLINK_LIBRARIES:STRING=${OPENSSL_LIBRARIES}\")\n\tELSEIF(\"${IMPLEMENTATION}\" MATCHES \"^MBEDTLS$\" AND MBEDTLS_FOUND)\n\t    SET(TRY_CRYPTO_REQUIRED_INCLUDES\n\t      \"${TRY_CRYPTO_REQUIRED_INCLUDES};${MBEDTLS_INCLUDE_DIRS}\")\n\t    SET(TRY_CRYPTO_REQUIRED_LIBS\n\t      \"-DLINK_LIBRARIES:STRING=${MBEDCRYPTO_LIBRARY}\")\n\tELSEIF(\"${IMPLEMENTATION}\" MATCHES \"^NETTLE$\" AND NETTLE_FOUND)\n\t    SET(TRY_CRYPTO_REQUIRED_INCLUDES\n\t      \"${TRY_CRYPTO_REQUIRED_INCLUDES};${NETTLE_INCLUDE_DIR}\")\n\t    SET(TRY_CRYPTO_REQUIRED_LIBS\n\t        \"-DLINK_LIBRARIES:STRING=${NETTLE_LIBRARY}\")\n\tELSEIF(\"${IMPLEMENTATION}\" MATCHES \"^LIBMD$\" AND LIBMD_FOUND)\n\t    SET(TRY_CRYPTO_REQUIRED_LIBS\n\t        \"-DLINK_LIBRARIES:STRING=${LIBMD_LIBRARY}\")\n\tENDIF(\"${IMPLEMENTATION}\" MATCHES \"^OPENSSL$\" AND OPENSSL_FOUND)\n\n    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/build/cmake/config.h.in\n      ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/confdefs.h)\n\tFILE(READ \"${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/confdefs.h\"\n\t     CONFDEFS_H)\n\tFILE(READ \"${CMAKE_CURRENT_SOURCE_DIR}/libarchive/archive_digest.c\"\n\t     ARCHIVE_CRYPTO_C)\n\n\tSET(SOURCE \"${CONFDEFS_H}\n\n#define ARCHIVE_${algorithm}_COMPILE_TEST\n#define ARCHIVE_CRYPTO_${algorithm}_${IMPLEMENTATION}\n#define PLATFORM_CONFIG_H \\\"check_crypto_md.h\\\"\n\n${ARCHIVE_CRYPTO_C}\n\nint\nmain(int argc, char **argv)\n{\n  archive_${lower_algorithm}_ctx ctx;\n  archive_${lower_algorithm}_init(&ctx);\n  archive_${lower_algorithm}_update(&ctx, *argv, argc);\n  archive_${lower_algorithm}_final(&ctx, NULL);\n  return 0;\n}\n\")\n\n  FILE(WRITE \"${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/check_crypto_md.h\" \"\")\n\tFILE(WRITE \"${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/check_crypto_md.c\" \"${SOURCE}\")\n\tMESSAGE(STATUS \"Checking support for ARCHIVE_CRYPTO_${ALGORITHM}_${IMPLEMENTATION}\")\n\n\tTRY_COMPILE(ARCHIVE_CRYPTO_${ALGORITHM}_${IMPLEMENTATION}\n\t  ${CMAKE_BINARY_DIR}\n\t  ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/check_crypto_md.c\n\t  CMAKE_FLAGS\n\t   \"${TRY_CRYPTO_REQUIRED_LIBS}\"\n\t   \"${TRY_CRYPTO_REQUIRED_INCLUDES}\"\n\t  OUTPUT_VARIABLE OUTPUT)\n\n\t# Inform user whether or not we found it; if not, log why we didn't.\n        IF (ARCHIVE_CRYPTO_${ALGORITHM}_${IMPLEMENTATION})\n          MESSAGE(STATUS \"Checking support for ARCHIVE_CRYPTO_${ALGORITHM}_${IMPLEMENTATION} -- found\")\n\t\t  SET(ARCHIVE_CRYPTO_${ALGORITHM} 1)\n        ELSE (ARCHIVE_CRYPTO_${ALGORITHM}_${IMPLEMENTATION})\n          MESSAGE(STATUS \"Checking support for ARCHIVE_CRYPTO_${ALGORITHM}_${IMPLEMENTATION} -- not found\")\n          FILE(APPEND ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeOutput.log\n    \t    \"Checking support for ARCHIVE_CRYPTO_${ALGORITHM}_${IMPLEMENTATION} failed with the following output:\\n\"\n    \t    \"${OUTPUT}\\n\"\n    \t    \"Source file was:\\n${SOURCE}\\n\")\n        ENDIF (ARCHIVE_CRYPTO_${ALGORITHM}_${IMPLEMENTATION})\n      ENDIF(NOT DEFINED ARCHIVE_CRYPTO_${ALGORITHM}_${IMPLEMENTATION})\n\n      # Add appropriate libs/includes depending on whether the implementation\n      # was found on this platform.\n      IF (ARCHIVE_CRYPTO_${ALGORITHM}_${IMPLEMENTATION})\n        IF (\"${IMPLEMENTATION}\" MATCHES \"^OPENSSL$\" AND OPENSSL_FOUND)\n          INCLUDE_DIRECTORIES(${OPENSSL_INCLUDE_DIR})\n\t  LIST(APPEND ADDITIONAL_LIBS ${OPENSSL_LIBRARIES})\n\t   LIST(REMOVE_DUPLICATES ADDITIONAL_LIBS)\n        ENDIF (\"${IMPLEMENTATION}\" MATCHES \"^OPENSSL$\" AND OPENSSL_FOUND)\n      ENDIF (ARCHIVE_CRYPTO_${ALGORITHM}_${IMPLEMENTATION})\n      ENDIF(NOT ARCHIVE_CRYPTO_${ALGORITHM})\n    ENDFOREACH(ALGORITHM ${ALGORITHMS})\nENDMACRO(CHECK_CRYPTO ALGORITHMS IMPLEMENTATION)\n\n#\n# CRYPTO functions on Windows is defined at archive_windows.c, thus we do not\n# need the test what the functions can be mapped to archive_{crypto name}_init,\n# archive_{crypto name}_update and archive_{crypto name}_final.\n# The functions on Windows use CALG_{crypto name} macro to create a crypt object\n# and then we need to know what CALG_{crypto name} macros is available to show\n# ARCHIVE_CRYPTO_{crypto name}_WIN macros because Windows 2000 and earlier version\n# of Windows XP do not support SHA256, SHA384 and SHA512.\n#\nMACRO(CHECK_CRYPTO_WIN CRYPTO_LIST)\n  IF(WIN32 AND NOT CYGWIN)\n    FOREACH(CRYPTO ${CRYPTO_LIST})\n      IF(NOT ARCHIVE_CRYPTO_${CRYPTO})\n      IF(NOT DEFINED ARCHIVE_CRYPTO_${CRYPTO}_WIN)\n\tSTRING(TOUPPER \"${CRYPTO}\" crypto)\n\tSET(ALGID \"\")\n\tIF (\"${CRYPTO}\" MATCHES \"^MD5$\")\n\t    SET(ALGID \"CALG_MD5\")\n\tENDIF (\"${CRYPTO}\" MATCHES \"^MD5$\")\n\tIF (\"${CRYPTO}\" MATCHES \"^SHA1$\")\n\t    SET(ALGID \"CALG_SHA1\")\n\tENDIF (\"${CRYPTO}\" MATCHES \"^SHA1$\")\n\tIF (\"${CRYPTO}\" MATCHES \"^SHA256$\")\n\t    SET(ALGID \"CALG_SHA_256\")\n\tENDIF (\"${CRYPTO}\" MATCHES \"^SHA256$\")\n\tIF (\"${CRYPTO}\" MATCHES \"^SHA384$\")\n\t    SET(ALGID \"CALG_SHA_384\")\n\tENDIF (\"${CRYPTO}\" MATCHES \"^SHA384$\")\n\tIF (\"${CRYPTO}\" MATCHES \"^SHA512$\")\n\t    SET(ALGID \"CALG_SHA_512\")\n\tENDIF (\"${CRYPTO}\" MATCHES \"^SHA512$\")\n\n    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/build/cmake/config.h.in\n      ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/confdefs.h)\n\tFILE(READ \"${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/confdefs.h\"\n\t     CONFDEFS_H)\n\n\tSET(SOURCE \"${CONFDEFS_H}\n\n#define ${crypto}_COMPILE_TEST\n#include <windows.h>\n#include <wincrypt.h>\n\nint\nmain(int argc, char **argv)\n{\n\treturn ${ALGID};\n}\n\")\n\tSET(SOURCE_FILE \"${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/check_crypto_win.c\")\n\n\tFILE(WRITE \"${SOURCE_FILE}\" \"${SOURCE}\")\n\tMESSAGE(STATUS \"Checking support for ARCHIVE_CRYPTO_${CRYPTO}_WIN\")\n\n\tTRY_COMPILE(ARCHIVE_CRYPTO_${CRYPTO}_WIN\n\t  ${CMAKE_BINARY_DIR}\n\t  ${SOURCE_FILE}\n\t  CMAKE_FLAGS \"-DINCLUDE_DIRECTORIES:STRING=${CMAKE_BINARY_DIR};${CMAKE_CURRENT_SOURCE_DIR}/libarchive\"\n\t  OUTPUT_VARIABLE OUTPUT)\n\n\tIF (ARCHIVE_CRYPTO_${CRYPTO}_WIN)\n\t    MESSAGE(STATUS\n\t        \"Checking support for ARCHIVE_CRYPTO_${CRYPTO}_WIN -- found\")\n\t\tSET(ARCHIVE_CRYPTO_${CRYPTO} 1)\n\tELSE (ARCHIVE_CRYPTO_${CRYPTO}_WIN)\n\t    MESSAGE(STATUS\n\t         \"Checking support for ARCHIVE_CRYPTO_${CRYPTO}_WIN -- not found\")\n    \t    FILE(APPEND\n\t        ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeOutput.log\n                \"Checking support for ARCHIVE_CRYPTO_${CRYPTO}_WIN failed with the following output:\\n\"\n        \t\"${OUTPUT}\\n\"\n        \t\"Source file was:\\n${SOURCE}\\n\")\n\tENDIF (ARCHIVE_CRYPTO_${CRYPTO}_WIN)\n\n      ENDIF(NOT DEFINED ARCHIVE_CRYPTO_${CRYPTO}_WIN)\n      ENDIF(NOT ARCHIVE_CRYPTO_${CRYPTO})\n    ENDFOREACH(CRYPTO)\n  ENDIF(WIN32 AND NOT CYGWIN)\nENDMACRO(CHECK_CRYPTO_WIN CRYPTO_LIST)\n\n#\n# Find iconv\n# POSIX defines the second arg as const char **\n# and requires it to be in libc.  But we can accept\n# a non-const argument here and can support iconv()\n# being in libiconv.\n#\nMACRO(CHECK_ICONV LIB TRY_ICONV_CONST)\n  IF(NOT HAVE_ICONV)\n    CMAKE_PUSH_CHECK_STATE()\t# Save the state of the variables\n    IF (CMAKE_C_COMPILER_ID MATCHES \"^GNU$\" OR\n        CMAKE_C_COMPILER_ID MATCHES \"^Clang$\")\n      #\n      # During checking iconv proto type, we should use -Werror to avoid the\n      # success of iconv detection with a warning which success is a miss\n      # detection. So this needs for all build mode(even it's a release mode).\n      #\n      SET(CMAKE_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS} -Werror\")\n    ENDIF (CMAKE_C_COMPILER_ID MATCHES \"^GNU$\" OR\n           CMAKE_C_COMPILER_ID MATCHES \"^Clang$\")\n    IF (CMAKE_C_COMPILER_ID MATCHES \"^XL$\")\n      SET(CMAKE_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS} -qhalt=w -qflag=w:w\")\n    ENDIF (CMAKE_C_COMPILER_ID MATCHES \"^XL$\")\n    IF (MSVC)\n      # NOTE: /WX option is the same as gcc's -Werror option.\n      SET(CMAKE_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS} /WX\")\n    ENDIF (MSVC)\n    #\n    CHECK_C_SOURCE_COMPILES(\n      \"#include <stdlib.h>\n       #include <iconv.h>\n       int main() {\n          ${TRY_ICONV_CONST} char *ccp;\n          iconv_t cd = iconv_open(\\\"\\\", \\\"\\\");\n          iconv(cd, &ccp, (size_t *)0, (char **)0, (size_t *)0);\n          iconv_close(cd);\n          return 0;\n       }\"\n     HAVE_ICONV_${LIB}_${TRY_ICONV_CONST})\n    IF(HAVE_ICONV_${LIB}_${TRY_ICONV_CONST})\n      SET(HAVE_ICONV true)\n      SET(ICONV_CONST ${TRY_ICONV_CONST})\n    ENDIF(HAVE_ICONV_${LIB}_${TRY_ICONV_CONST})\n    CMAKE_POP_CHECK_STATE()\t# Restore the state of the variables\n  ENDIF(NOT HAVE_ICONV)\nENDMACRO(CHECK_ICONV TRY_ICONV_CONST)\n\nIF(ENABLE_ICONV)\n  CMAKE_PUSH_CHECK_STATE()\t# Save the state of the variables\n  FIND_PATH(ICONV_INCLUDE_DIR iconv.h)\n  IF(ICONV_INCLUDE_DIR)\n    #SET(INCLUDES ${INCLUDES} \"iconv.h\")\n    SET(HAVE_ICONV_H 1)\n    INCLUDE_DIRECTORIES(${ICONV_INCLUDE_DIR})\n    SET(CMAKE_REQUIRED_INCLUDES ${ICONV_INCLUDE_DIR})\n    CHECK_ICONV(\"libc\" \"const\")\n    CHECK_ICONV(\"libc\" \"\")\n\n    # If iconv isn't in libc and we have a libiconv, try that.\n    FIND_LIBRARY(LIBICONV_PATH NAMES iconv libiconv)\n    IF(NOT HAVE_ICONV AND LIBICONV_PATH)\n      LIST(APPEND CMAKE_REQUIRED_LIBRARIES ${LIBICONV_PATH})\n      # Test if a macro is needed for the library.\n      TRY_MACRO_FOR_LIBRARY(\n        \"${ICONV_INCLUDE_DIR}\" \"${LIBICONV_PATH}\"\n        COMPILES\n        \"#include <iconv.h>\\nint main() {return iconv_close((iconv_t)0);}\"\n        \"WITHOUT_LIBICONV_STATIC;LIBICONV_STATIC\")\n      IF(NOT WITHOUT_LIBICONV_STATIC AND LIBICONV_STATIC)\n        ADD_DEFINITIONS(-DLIBICONV_STATIC)\n      ENDIF(NOT WITHOUT_LIBICONV_STATIC AND LIBICONV_STATIC)\n      #\n      # Set up CMAKE_REQUIRED_* for CHECK_ICONV\n      #\n      SET(CMAKE_REQUIRED_INCLUDES ${ICONV_INCLUDE_DIR})\n      SET(CMAKE_REQUIRED_LIBRARIES ${LIBICONV_PATH})\n      IF(LIBICONV_STATIC)\n        # LIBICONV_STATIC is necessary for the success of CHECK_ICONV\n        # on Windows.\n        SET(CMAKE_REQUIRED_DEFINITIONS \"-DLIBICONV_STATIC\")\n      ELSE(LIBICONV_STATIC)\n        SET(CMAKE_REQUIRED_DEFINITIONS)\n      ENDIF(LIBICONV_STATIC)\n      CHECK_ICONV(\"libiconv\" \"const\")\n      CHECK_ICONV(\"libiconv\" \"\")\n      IF (HAVE_ICONV)\n        LIST(APPEND ADDITIONAL_LIBS ${LIBICONV_PATH})\n      ENDIF(HAVE_ICONV)\n    ENDIF(NOT HAVE_ICONV AND LIBICONV_PATH)\n  ENDIF(ICONV_INCLUDE_DIR)\n  #\n  # Find locale_charset() for libiconv.\n  #\n  IF(LIBICONV_PATH)\n    SET(CMAKE_REQUIRED_DEFINITIONS)\n    SET(CMAKE_REQUIRED_INCLUDES ${ICONV_INCLUDE_DIR})\n    SET(CMAKE_REQUIRED_LIBRARIES)\n    CHECK_INCLUDE_FILES(\"localcharset.h\" HAVE_LOCALCHARSET_H)\n    FIND_LIBRARY(LIBCHARSET_PATH NAMES charset libcharset)\n    IF(LIBCHARSET_PATH)\n      SET(CMAKE_REQUIRED_LIBRARIES ${LIBCHARSET_PATH})\n      IF(WIN32 AND NOT CYGWIN)\n        # Test if a macro is needed for the library.\n        TRY_MACRO_FOR_LIBRARY(\n          \"${ICONV_INCLUDE_DIR}\" \"${LIBCHARSET_PATH}\"\n          COMPILES\n          \"#include <localcharset.h>\\nint main() {return locale_charset()?1:0;}\"\n          \"WITHOUT_LIBCHARSET_STATIC;LIBCHARSET_STATIC\")\n        IF(NOT WITHOUT_LIBCHARSET_STATIC AND LIBCHARSET_STATIC)\n          ADD_DEFINITIONS(-DLIBCHARSET_STATIC)\n        ENDIF(NOT WITHOUT_LIBCHARSET_STATIC AND LIBCHARSET_STATIC)\n        IF(WITHOUT_LIBCHARSET_STATIC OR LIBCHARSET_STATIC)\n          SET(HAVE_LOCALE_CHARSET ON CACHE INTERNAL\n              \"Have function locale_charset\")\n        ENDIF(WITHOUT_LIBCHARSET_STATIC OR LIBCHARSET_STATIC)\n      ELSE(WIN32 AND NOT CYGWIN)\n        CHECK_FUNCTION_EXISTS_GLIBC(locale_charset HAVE_LOCALE_CHARSET)\n      ENDIF(WIN32 AND NOT CYGWIN)\n      IF(HAVE_LOCALE_CHARSET)\n        LIST(APPEND ADDITIONAL_LIBS ${LIBCHARSET_PATH})\n      ENDIF(HAVE_LOCALE_CHARSET)\n    ENDIF(LIBCHARSET_PATH)\n  ENDIF(LIBICONV_PATH)\n  CMAKE_POP_CHECK_STATE()\t# Restore the state of the variables\nELSE(ENABLE_ICONV)\n  # Make sure ICONV variables are not in CACHE after ENABLE_ICONV disabled\n  # (once enabled).\n  UNSET(HAVE_LOCALE_CHARSET CACHE)\n  UNSET(HAVE_ICONV CACHE)\n  UNSET(HAVE_ICONV_libc_ CACHE)\n  UNSET(HAVE_ICONV_libc_const CACHE)\n  UNSET(HAVE_ICONV_libiconv_ CACHE)\n  UNSET(HAVE_ICONV_libiconv_const CACHE)\n  UNSET(ICONV_INCLUDE_DIR CACHE)\n  UNSET(LIBICONV_PATH CACHE)\n  UNSET(LIBICONV_DLL CACHE)\n  UNSET(LIBICONV_STATIC CACHE)\n  UNSET(LIBCHARSET_DLL CACHE)\n  UNSET(LIBCHARSET_STATIC CACHE)\nENDIF(ENABLE_ICONV)\n\n#\n# Find Libxml2\n#\nIF(ENABLE_LIBXML2 AND HAVE_ICONV)\n  FIND_PACKAGE(LibXml2)\nELSE()\n  SET(LIBXML2_FOUND FALSE)\nENDIF()\nIF(LIBXML2_FOUND)\n  CMAKE_PUSH_CHECK_STATE()\t# Save the state of the variables\n  INCLUDE_DIRECTORIES(${LIBXML2_INCLUDE_DIR})\n  LIST(APPEND ADDITIONAL_LIBS ${LIBXML2_LIBRARIES})\n  SET(HAVE_LIBXML2 1)\n  # libxml2's include files use iconv.h\n  SET(CMAKE_REQUIRED_INCLUDES ${ICONV_INCLUDE_DIR} ${LIBXML2_INCLUDE_DIR})\n  CHECK_INCLUDE_FILES(\"libxml/xmlreader.h\" HAVE_LIBXML_XMLREADER_H)\n  CHECK_INCLUDE_FILES(\"libxml/xmlwriter.h\" HAVE_LIBXML_XMLWRITER_H)\n  # Test if a macro is needed for the library.\n  TRY_MACRO_FOR_LIBRARY(\n    \"${ICONV_INCLUDE_DIR};${LIBXML2_INCLUDE_DIR}\"\n    \"ws2_32.lib;${ZLIB_LIBRARIES};${LIBICONV_PATH};${LIBXML2_LIBRARIES}\"\n    COMPILES\n    \"#include <stddef.h>\\n#include <libxml/xmlreader.h>\\nint main() {return xmlTextReaderRead((xmlTextReaderPtr)(void *)0);}\"\n    \"WITHOUT_LIBXML_STATIC;LIBXML_STATIC\")\n  IF(NOT WITHOUT_LIBXML_STATIC AND LIBXML_STATIC)\n    ADD_DEFINITIONS(-DLIBXML_STATIC)\n  ENDIF(NOT WITHOUT_LIBXML_STATIC AND LIBXML_STATIC)\n  CMAKE_POP_CHECK_STATE()\t# Restore the state of the variables\nELSE(LIBXML2_FOUND)\n  #\n  # Find Expat\n  #\n  IF(ENABLE_EXPAT)\n    FIND_PACKAGE(EXPAT)\n  ELSE()\n    SET(EXPAT_FOUND FALSE)\n  ENDIF()\n  IF(EXPAT_FOUND)\n    CMAKE_PUSH_CHECK_STATE()\t# Save the state of the variables\n    INCLUDE_DIRECTORIES(${EXPAT_INCLUDE_DIR})\n    LIST(APPEND ADDITIONAL_LIBS ${EXPAT_LIBRARIES})\n    SET(HAVE_LIBEXPAT 1)\n    LA_CHECK_INCLUDE_FILE(\"expat.h\" HAVE_EXPAT_H)\n    CMAKE_POP_CHECK_STATE()\t# Restore the state of the variables\n  ENDIF(EXPAT_FOUND)\nENDIF(LIBXML2_FOUND)\nMARK_AS_ADVANCED(CLEAR LIBXML2_INCLUDE_DIR)\nMARK_AS_ADVANCED(CLEAR LIBXML2_LIBRARIES)\n\n#\n# POSIX Regular Expression support\n#\nIF(POSIX_REGEX_LIB MATCHES \"^(AUTO|LIBC|LIBREGEX)$\")\n  #\n  # If PCREPOSIX is not found or not requested, try using regex\n  # from libc or libregex\n  #\n  FIND_PATH(REGEX_INCLUDE_DIR regex.h)\n  IF(REGEX_INCLUDE_DIR)\n    CHECK_FUNCTION_EXISTS_GLIBC(regcomp HAVE_REGCOMP_LIBC)\n    #\n    # If libc does not provide regex, find libregex.\n    #\n    IF(NOT HAVE_REGCOMP_LIBC)\n      CMAKE_PUSH_CHECK_STATE()\t# Save the state of the variables\n      FIND_LIBRARY(REGEX_LIBRARY regex)\n      IF(REGEX_LIBRARY)\n        SET(CMAKE_REQUIRED_LIBRARIES ${REGEX_LIBRARY})\n        CHECK_FUNCTION_EXISTS_GLIBC(regcomp HAVE_REGCOMP_LIBREGEX)\n        IF(HAVE_REGCOMP_LIBREGEX)\n          LIST(APPEND ADDITIONAL_LIBS ${REGEX_LIBRARY})\n          #\n          # If regex.h is not found, retry looking for regex.h at\n          # REGEX_INCLUDE_DIR\n          #\n          IF(NOT HAVE_REGEX_H)\n            UNSET(HAVE_REGEX_H CACHE)\n            INCLUDE_DIRECTORIES(${REGEX_INCLUDE_DIR})\n            SET(CMAKE_REQUIRED_INCLUDES ${REGEX_INCLUDE_DIR})\n            LA_CHECK_INCLUDE_FILE(\"regex.h\" HAVE_REGEX_H)\n          ENDIF(NOT HAVE_REGEX_H)\n          # Test if a macro is needed for the library.\n          TRY_MACRO_FOR_LIBRARY(\n            \"${REGEX_INCLUDE_DIR}\" \"${REGEX_LIBRARY}\"\n            COMPILES\n            \"#include <stddef.h>\\n#include <regex.h>\\nint main() {regex_t r;return regcomp(&r, \\\"\\\", 0);}\"\n            \"USE_REGEX_DLL;USE_REGEX_STATIC\")\n          IF(USE_REGEX_DLL)\n            ADD_DEFINITIONS(-DUSE_REGEX_DLL)\n          ELSEIF(USE_REGEX_STATIC)\n            ADD_DEFINITIONS(-DUSE_REGEX_STATIC)\n          ENDIF(USE_REGEX_DLL)\n        ENDIF(HAVE_REGCOMP_LIBREGEX)\n      ENDIF(REGEX_LIBRARY)\n      CMAKE_POP_CHECK_STATE()\t# Restore the state of the variables\n    ENDIF(NOT HAVE_REGCOMP_LIBC)\n  ENDIF(REGEX_INCLUDE_DIR)\n  IF(HAVE_REGCOMP_LIBC OR HAVE_REGCOMP_LIBREGEX)\n    SET(FOUND_POSIX_REGEX_LIB 1)\n  ENDIF(HAVE_REGCOMP_LIBC OR HAVE_REGCOMP_LIBREGEX)\nENDIF(POSIX_REGEX_LIB MATCHES \"^(AUTO|LIBC|LIBREGEX)$\")\n\nIF(NOT FOUND_POSIX_REGEX_LIB AND POSIX_REGEX_LIB MATCHES \"^(AUTO|LIBPCREPOSIX)$\")\n  #\n  # If requested, try finding library for PCREPOSIX\n  #\n  IF(ENABLE_LIBGCC)\n    FIND_PACKAGE(LIBGCC)\n  ELSE()\n    MESSAGE(FATAL_ERROR \"libgcc not found.\")\n    SET(LIBGCC_FOUND FALSE) # Override cached value\n  ENDIF()\n  IF(ENABLE_PCREPOSIX)\n    FIND_PACKAGE(PCREPOSIX)\n  ELSE()\n    SET(PCREPOSIX_FOUND FALSE) # Override cached value\n  ENDIF()\n  IF(PCREPOSIX_FOUND)\n    INCLUDE_DIRECTORIES(${PCRE_INCLUDE_DIR})\n    LIST(APPEND ADDITIONAL_LIBS ${PCREPOSIX_LIBRARIES})\n    # Test if a macro is needed for the library.\n    TRY_MACRO_FOR_LIBRARY(\n      \"${PCRE_INCLUDE_DIR}\" \"${PCREPOSIX_LIBRARIES}\"\n      COMPILES\n      \"#include <pcreposix.h>\\nint main() {regex_t r;return regcomp(&r, \\\"\\\", 0);}\"\n      \"WITHOUT_PCRE_STATIC;PCRE_STATIC\")\n    IF(NOT WITHOUT_PCRE_STATIC AND PCRE_STATIC)\n      ADD_DEFINITIONS(-DPCRE_STATIC)\n\tELSEIF(NOT WITHOUT_PCRE_STATIC AND NOT PCRE_STATIC AND PCRE_FOUND)\n\t  # Determine if pcre static libraries are to be used.\n      LIST(APPEND ADDITIONAL_LIBS ${PCRE_LIBRARIES})\n      SET(TMP_LIBRARIES ${PCREPOSIX_LIBRARIES} ${PCRE_LIBRARIES})\n      MESSAGE(STATUS \"trying again with -lpcre included\")\n      TRY_MACRO_FOR_LIBRARY(\n        \"${PCRE_INCLUDE_DIR}\" \"${TMP_LIBRARIES}\"\n        COMPILES\n        \"#include <pcreposix.h>\\nint main() {regex_t r;return regcomp(&r, \\\"\\\", 0);}\"\n        \"WITHOUT_PCRE_STATIC;PCRE_STATIC\")\n      IF(NOT WITHOUT_PCRE_STATIC AND PCRE_STATIC)\n        ADD_DEFINITIONS(-DPCRE_STATIC)\n      ELSEIF(NOT WITHOUT_PCRE_STATIC AND NOT PCRE_STATIC AND MSVC AND LIBGCC_FOUND)\n        # When doing a Visual Studio build using pcre static libraries\n        # built using the mingw toolchain, -lgcc is needed to resolve\n        # ___chkstk_ms.\n        MESSAGE(STATUS \"Visual Studio build detected, trying again with -lgcc included\")\n        LIST(APPEND ADDITIONAL_LIBS ${LIBGCC_LIBRARIES})\n        SET(TMP_LIBRARIES ${PCREPOSIX_LIBRARIES} ${PCRE_LIBRARIES} ${LIBGCC_LIBRARIES})\n          TRY_MACRO_FOR_LIBRARY(\n            \"${PCRE_INCLUDE_DIR}\" \"${TMP_LIBRARIES}\"\n            COMPILES\n            \"#include <pcreposix.h>\\nint main() {regex_t r;return regcomp(&r, \\\"\\\", 0);}\"\n            \"WITHOUT_PCRE_STATIC;PCRE_STATIC\")\n          IF(NOT WITHOUT_PCRE_STATIC AND PCRE_STATIC)\n            ADD_DEFINITIONS(-DPCRE_STATIC)\n          ENDIF(NOT WITHOUT_PCRE_STATIC AND PCRE_STATIC)\n      ENDIF(NOT WITHOUT_PCRE_STATIC AND PCRE_STATIC)\n    ENDIF(NOT WITHOUT_PCRE_STATIC AND PCRE_STATIC)\n  ENDIF(PCREPOSIX_FOUND)\n  MARK_AS_ADVANCED(CLEAR PCRE_INCLUDE_DIR)\n  MARK_AS_ADVANCED(CLEAR PCREPOSIX_LIBRARIES)\n  MARK_AS_ADVANCED(CLEAR PCRE_LIBRARIES)\n  MARK_AS_ADVANCED(CLEAR LIBGCC_LIBRARIES)\nENDIF(NOT FOUND_POSIX_REGEX_LIB AND POSIX_REGEX_LIB MATCHES \"^(AUTO|LIBPCREPOSIX)$\")\n\nIF(NOT FOUND_POSIX_REGEX_LIB AND POSIX_REGEX_LIB MATCHES \"^(AUTO|LIBPCRE2POSIX)$\")\n  #\n  # If requested, try finding library for PCRE2POSIX\n  #\n  IF(ENABLE_LIBGCC)\n    FIND_PACKAGE(LIBGCC)\n  ELSE()\n    MESSAGE(FATAL_ERROR \"libgcc not found.\")\n    SET(LIBGCC_FOUND FALSE) # Override cached value\n  ENDIF()\n  IF(ENABLE_PCRE2POSIX)\n    FIND_PACKAGE(PCRE2POSIX)\n  ELSE()\n    SET(PCRE2POSIX_FOUND FALSE) # Override cached value\n  ENDIF()\n  IF(PCRE2POSIX_FOUND)\n    INCLUDE_DIRECTORIES(${PCRE2_INCLUDE_DIR})\n    LIST(APPEND ADDITIONAL_LIBS ${PCRE2POSIX_LIBRARIES})\n    # Test if a macro is needed for the library.\n    TRY_MACRO_FOR_LIBRARY(\n      \"${PCRE2_INCLUDE_DIR}\" \"${PCRE2POSIX_LIBRARIES}\"\n      COMPILES\n      \"#include <pcre2posix.h>\\nint main() {regex_t r;return pcre2_regcomp(&r, \\\"\\\", 0);}\"\n      \"WITHOUT_PCRE2_STATIC;PCRE2_STATIC\")\n    IF(NOT WITHOUT_PCRE2_STATIC AND PCRE2_STATIC)\n      ADD_DEFINITIONS(-DPCRE2_STATIC)\n\tELSEIF(NOT WITHOUT_PCRE2_STATIC AND NOT PCRE2_STATIC AND PCRE2_FOUND)\n\t  # Determine if pcre2 static libraries are to be used.\n      LIST(APPEND ADDITIONAL_LIBS ${PCRE2_LIBRARIES})\n      SET(TMP_LIBRARIES ${PCRE2POSIX_LIBRARIES} ${PCRE2_LIBRARIES})\n      MESSAGE(STATUS \"trying again with -lpcre2-8 included\")\n      TRY_MACRO_FOR_LIBRARY(\n        \"${PCRE2_INCLUDE_DIR}\" \"${TMP_LIBRARIES}\"\n        COMPILES\n        \"#include <pcre2posix.h>\\nint main() {regex_t r;return pcre2_regcomp(&r, \\\"\\\", 0);}\"\n        \"WITHOUT_PCRE2_STATIC;PCRE2_STATIC\")\n      IF(NOT WITHOUT_PCRE2_STATIC AND PCRE2_STATIC)\n        ADD_DEFINITIONS(-DPCRE2_STATIC)\n      ELSEIF(NOT WITHOUT_PCRE2_STATIC AND NOT PCRE2_STATIC AND MSVC AND LIBGCC_FOUND)\n        # When doing a Visual Studio build using pcre2 static libraries\n        # built using the mingw toolchain, -lgcc is needed to resolve\n        # ___chkstk_ms.\n        MESSAGE(STATUS \"Visual Studio build detected, trying again with -lgcc included\")\n        LIST(APPEND ADDITIONAL_LIBS ${LIBGCC_LIBRARIES})\n        SET(TMP_LIBRARIES ${PCRE2POSIX_LIBRARIES} ${PCRE2_LIBRARIES} ${LIBGCC_LIBRARIES})\n          TRY_MACRO_FOR_LIBRARY(\n            \"${PCRE2_INCLUDE_DIR}\" \"${TMP_LIBRARIES}\"\n            COMPILES\n            \"#include <pcre2posix.h>\\nint main() {regex_t r;return pcre2_regcomp(&r, \\\"\\\", 0);}\"\n            \"WITHOUT_PCRE2_STATIC;PCRE2_STATIC\")\n          IF(NOT WITHOUT_PCRE2_STATIC AND PCRE2_STATIC)\n            ADD_DEFINITIONS(-DPCRE2_STATIC)\n          ENDIF(NOT WITHOUT_PCRE2_STATIC AND PCRE2_STATIC)\n      ENDIF(NOT WITHOUT_PCRE2_STATIC AND PCRE2_STATIC)\n    ENDIF(NOT WITHOUT_PCRE2_STATIC AND PCRE2_STATIC)\n  ENDIF(PCRE2POSIX_FOUND)\n  MARK_AS_ADVANCED(CLEAR PCRE2_INCLUDE_DIR)\n  MARK_AS_ADVANCED(CLEAR PCRE2POSIX_LIBRARIES)\n  MARK_AS_ADVANCED(CLEAR PCRE2_LIBRARIES)\n  MARK_AS_ADVANCED(CLEAR LIBGCC_LIBRARIES)\nENDIF(NOT FOUND_POSIX_REGEX_LIB AND POSIX_REGEX_LIB MATCHES \"^(AUTO|LIBPCRE2POSIX)$\")\n\n#\n# Check functions\n#\nCMAKE_PUSH_CHECK_STATE()\t# Save the state of the variables\nIF (CMAKE_C_COMPILER_ID MATCHES \"^GNU$\" OR\n    CMAKE_C_COMPILER_ID MATCHES \"^Clang$\")\n  #\n  # During checking functions, we should use -fno-builtin to avoid the\n  # failure of function detection which failure is an error \"conflicting\n  # types for built-in function\" caused by using -Werror option.\n  #\n  SET(CMAKE_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS} -fno-builtin\")\nENDIF (CMAKE_C_COMPILER_ID MATCHES \"^GNU$\" OR\n       CMAKE_C_COMPILER_ID MATCHES \"^Clang$\")\nCHECK_SYMBOL_EXISTS(_CrtSetReportMode \"crtdbg.h\" HAVE__CrtSetReportMode)\nCHECK_FUNCTION_EXISTS_GLIBC(arc4random_buf HAVE_ARC4RANDOM_BUF)\nCHECK_FUNCTION_EXISTS_GLIBC(chflags HAVE_CHFLAGS)\nCHECK_FUNCTION_EXISTS_GLIBC(chown HAVE_CHOWN)\nCHECK_FUNCTION_EXISTS_GLIBC(chroot HAVE_CHROOT)\nCHECK_FUNCTION_EXISTS_GLIBC(ctime_r HAVE_CTIME_R)\nCHECK_FUNCTION_EXISTS_GLIBC(fchdir HAVE_FCHDIR)\nCHECK_FUNCTION_EXISTS_GLIBC(fchflags HAVE_FCHFLAGS)\nCHECK_FUNCTION_EXISTS_GLIBC(fchmod HAVE_FCHMOD)\nCHECK_FUNCTION_EXISTS_GLIBC(fchown HAVE_FCHOWN)\nCHECK_FUNCTION_EXISTS_GLIBC(fcntl HAVE_FCNTL)\nCHECK_FUNCTION_EXISTS_GLIBC(fdopendir HAVE_FDOPENDIR)\nCHECK_FUNCTION_EXISTS_GLIBC(fnmatch HAVE_FNMATCH)\nCHECK_FUNCTION_EXISTS_GLIBC(fork HAVE_FORK)\nCHECK_FUNCTION_EXISTS_GLIBC(fstat HAVE_FSTAT)\nCHECK_FUNCTION_EXISTS_GLIBC(fstatat HAVE_FSTATAT)\nCHECK_FUNCTION_EXISTS_GLIBC(fstatfs HAVE_FSTATFS)\nCHECK_FUNCTION_EXISTS_GLIBC(fstatvfs HAVE_FSTATVFS)\nCHECK_FUNCTION_EXISTS_GLIBC(ftruncate HAVE_FTRUNCATE)\nCHECK_FUNCTION_EXISTS_GLIBC(futimens HAVE_FUTIMENS)\nCHECK_FUNCTION_EXISTS_GLIBC(futimes HAVE_FUTIMES)\nCHECK_FUNCTION_EXISTS_GLIBC(futimesat HAVE_FUTIMESAT)\nCHECK_FUNCTION_EXISTS_GLIBC(geteuid HAVE_GETEUID)\nCHECK_FUNCTION_EXISTS_GLIBC(getgrgid_r HAVE_GETGRGID_R)\nCHECK_FUNCTION_EXISTS_GLIBC(getgrnam_r HAVE_GETGRNAM_R)\nCHECK_FUNCTION_EXISTS_GLIBC(getline HAVE_GETLINE)\nCHECK_FUNCTION_EXISTS_GLIBC(getpwnam_r HAVE_GETPWNAM_R)\nCHECK_FUNCTION_EXISTS_GLIBC(getpwuid_r HAVE_GETPWUID_R)\nCHECK_FUNCTION_EXISTS_GLIBC(getpid HAVE_GETPID)\nCHECK_FUNCTION_EXISTS_GLIBC(getvfsbyname HAVE_GETVFSBYNAME)\nCHECK_FUNCTION_EXISTS_GLIBC(gmtime_r HAVE_GMTIME_R)\nCHECK_FUNCTION_EXISTS_GLIBC(lchflags HAVE_LCHFLAGS)\nCHECK_FUNCTION_EXISTS_GLIBC(lchmod HAVE_LCHMOD)\nCHECK_FUNCTION_EXISTS_GLIBC(lchown HAVE_LCHOWN)\nCHECK_FUNCTION_EXISTS_GLIBC(link HAVE_LINK)\nCHECK_FUNCTION_EXISTS_GLIBC(linkat HAVE_LINKAT)\nCHECK_FUNCTION_EXISTS_GLIBC(localtime_r HAVE_LOCALTIME_R)\nCHECK_FUNCTION_EXISTS_GLIBC(lstat HAVE_LSTAT)\nCHECK_FUNCTION_EXISTS_GLIBC(lutimes HAVE_LUTIMES)\nCHECK_FUNCTION_EXISTS_GLIBC(mbrtowc HAVE_MBRTOWC)\nCHECK_FUNCTION_EXISTS_GLIBC(memmove HAVE_MEMMOVE)\nCHECK_FUNCTION_EXISTS_GLIBC(mkdir HAVE_MKDIR)\nCHECK_FUNCTION_EXISTS_GLIBC(mkfifo HAVE_MKFIFO)\nCHECK_FUNCTION_EXISTS_GLIBC(mknod HAVE_MKNOD)\nCHECK_FUNCTION_EXISTS_GLIBC(mkstemp HAVE_MKSTEMP)\nCHECK_FUNCTION_EXISTS_GLIBC(nl_langinfo HAVE_NL_LANGINFO)\nCHECK_FUNCTION_EXISTS_GLIBC(openat HAVE_OPENAT)\nCHECK_FUNCTION_EXISTS_GLIBC(pipe HAVE_PIPE)\nCHECK_FUNCTION_EXISTS_GLIBC(poll HAVE_POLL)\nCHECK_FUNCTION_EXISTS_GLIBC(posix_spawnp HAVE_POSIX_SPAWNP)\nCHECK_FUNCTION_EXISTS_GLIBC(readlink HAVE_READLINK)\nCHECK_FUNCTION_EXISTS_GLIBC(readpassphrase HAVE_READPASSPHRASE)\nCHECK_FUNCTION_EXISTS_GLIBC(select HAVE_SELECT)\nCHECK_FUNCTION_EXISTS_GLIBC(setenv HAVE_SETENV)\nCHECK_FUNCTION_EXISTS_GLIBC(setlocale HAVE_SETLOCALE)\nCHECK_FUNCTION_EXISTS_GLIBC(sigaction HAVE_SIGACTION)\nCHECK_FUNCTION_EXISTS_GLIBC(statfs HAVE_STATFS)\nCHECK_FUNCTION_EXISTS_GLIBC(statvfs HAVE_STATVFS)\nCHECK_FUNCTION_EXISTS_GLIBC(strchr HAVE_STRCHR)\nCHECK_FUNCTION_EXISTS_GLIBC(strdup HAVE_STRDUP)\nCHECK_FUNCTION_EXISTS_GLIBC(strerror HAVE_STRERROR)\nCHECK_FUNCTION_EXISTS_GLIBC(strncpy_s HAVE_STRNCPY_S)\nCHECK_FUNCTION_EXISTS_GLIBC(strnlen HAVE_STRNLEN)\nCHECK_FUNCTION_EXISTS_GLIBC(strrchr HAVE_STRRCHR)\nCHECK_FUNCTION_EXISTS_GLIBC(symlink HAVE_SYMLINK)\nCHECK_FUNCTION_EXISTS_GLIBC(sysconf HAVE_SYSCONF)\nCHECK_FUNCTION_EXISTS_GLIBC(tcgetattr HAVE_TCGETATTR)\nCHECK_FUNCTION_EXISTS_GLIBC(tcsetattr HAVE_TCSETATTR)\nCHECK_FUNCTION_EXISTS_GLIBC(timegm HAVE_TIMEGM)\nCHECK_FUNCTION_EXISTS_GLIBC(tzset HAVE_TZSET)\nCHECK_FUNCTION_EXISTS_GLIBC(unlinkat HAVE_UNLINKAT)\nCHECK_FUNCTION_EXISTS_GLIBC(unsetenv HAVE_UNSETENV)\nCHECK_FUNCTION_EXISTS_GLIBC(utime HAVE_UTIME)\nCHECK_FUNCTION_EXISTS_GLIBC(utimes HAVE_UTIMES)\nCHECK_FUNCTION_EXISTS_GLIBC(utimensat HAVE_UTIMENSAT)\nCHECK_FUNCTION_EXISTS_GLIBC(vfork HAVE_VFORK)\nCHECK_FUNCTION_EXISTS_GLIBC(wcrtomb HAVE_WCRTOMB)\nCHECK_FUNCTION_EXISTS_GLIBC(wcscmp HAVE_WCSCMP)\nCHECK_FUNCTION_EXISTS_GLIBC(wcscpy HAVE_WCSCPY)\nCHECK_FUNCTION_EXISTS_GLIBC(wcslen HAVE_WCSLEN)\nCHECK_FUNCTION_EXISTS_GLIBC(wctomb HAVE_WCTOMB)\nCHECK_FUNCTION_EXISTS_GLIBC(_fseeki64 HAVE__FSEEKI64)\nCHECK_FUNCTION_EXISTS_GLIBC(_get_timezone HAVE__GET_TIMEZONE)\nCHECK_SYMBOL_EXISTS(ctime_s \"time.h\" HAVE_CTIME_S)\nCHECK_SYMBOL_EXISTS(gmtime_s \"time.h\" HAVE_GMTIME_S)\nCHECK_SYMBOL_EXISTS(localtime_s \"time.h\" HAVE_LOCALTIME_S)\nCHECK_SYMBOL_EXISTS(_mkgmtime \"time.h\" HAVE__MKGMTIME)\n\nSET(CMAKE_REQUIRED_LIBRARIES \"\")\nCHECK_FUNCTION_EXISTS(cygwin_conv_path HAVE_CYGWIN_CONV_PATH)\nCHECK_FUNCTION_EXISTS(fseeko HAVE_FSEEKO)\nCHECK_FUNCTION_EXISTS(strerror_r HAVE_STRERROR_R)\nCHECK_FUNCTION_EXISTS(strftime HAVE_STRFTIME)\nCHECK_FUNCTION_EXISTS(vprintf HAVE_VPRINTF)\nCHECK_FUNCTION_EXISTS(wmemcmp HAVE_WMEMCMP)\nCHECK_FUNCTION_EXISTS(wmemcpy HAVE_WMEMCPY)\nCHECK_FUNCTION_EXISTS(wmemmove HAVE_WMEMMOVE)\n\nCMAKE_POP_CHECK_STATE()\t# Restore the state of the variables\n\nCHECK_C_SOURCE_COMPILES(\n  \"#include <sys/types.h>\\n#include <sys/mount.h>\\nint main(void) { struct vfsconf v; return sizeof(v);}\"\n  HAVE_STRUCT_VFSCONF)\n\nCHECK_C_SOURCE_COMPILES(\n  \"#include <sys/types.h>\\n#include <sys/mount.h>\\nint main(void) { struct xvfsconf v; return sizeof(v);}\"\n  HAVE_STRUCT_XVFSCONF)\n\nCHECK_C_SOURCE_COMPILES(\n  \"#include <sys/types.h>\\n#include <sys/mount.h>\\nint main(void) { struct statfs s; return sizeof(s);}\"\n  HAVE_STRUCT_STATFS)\n\n# Make sure we have the POSIX version of readdir_r, not the\n# older 2-argument version.\nCHECK_C_SOURCE_COMPILES(\n  \"#include <dirent.h>\\nint main() {DIR *d = opendir(\\\".\\\"); struct dirent e,*r; return readdir_r(d,&e,&r);}\"\n  HAVE_READDIR_R)\n\n# dirfd can be either a function or a macro.\nCHECK_C_SOURCE_COMPILES(\n  \"#include <dirent.h>\\nint main() {DIR *d = opendir(\\\".\\\"); return dirfd(d);}\"\n  HAVE_DIRFD)\n\n# Only detect readlinkat() if we also have AT_FDCWD in unistd.h.\n# NOTE: linux requires fcntl.h for AT_FDCWD.\nCHECK_C_SOURCE_COMPILES(\n  \"#include <fcntl.h>\\n#include <unistd.h>\\nint main() {char buf[10]; return readlinkat(AT_FDCWD, \\\"\\\", buf, 0);}\"\n  HAVE_READLINKAT)\n\n# To verify major(), we need to both include the header\n# of interest and verify that the result can be linked.\n# CHECK_FUNCTION_EXISTS doesn't accept a header argument,\n# CHECK_SYMBOL_EXISTS doesn't test linkage.\nCHECK_C_SOURCE_COMPILES(\n  \"#include <sys/mkdev.h>\\nint main() { return major(256); }\"\n  MAJOR_IN_MKDEV)\nCHECK_C_SOURCE_COMPILES(\n  \"#include <sys/sysmacros.h>\\nint main() { return major(256); }\"\n  MAJOR_IN_SYSMACROS)\n\nIF(HAVE_STRERROR_R)\n  SET(HAVE_DECL_STRERROR_R 1)\nENDIF(HAVE_STRERROR_R)\n\n#\n# Check defines\n#\nSET(headers \"limits.h\")\nIF(HAVE_STDINT_H)\n  LIST(APPEND headers \"stdint.h\")\nENDIF(HAVE_STDINT_H)\nIF(HAVE_INTTYPES_H)\n  LIST(APPEND headers \"inttypes.h\")\nENDIF(HAVE_INTTYPES_H)\nCHECK_SYMBOL_EXISTS(EFTYPE           \"errno.h\"    HAVE_EFTYPE)\nCHECK_SYMBOL_EXISTS(EILSEQ           \"errno.h\"    HAVE_EILSEQ)\nCHECK_SYMBOL_EXISTS(D_MD_ORDER       \"langinfo.h\" HAVE_D_MD_ORDER)\nCHECK_SYMBOL_EXISTS(INT32_MAX        \"${headers}\" HAVE_DECL_INT32_MAX)\nCHECK_SYMBOL_EXISTS(INT32_MIN        \"${headers}\" HAVE_DECL_INT32_MIN)\nCHECK_SYMBOL_EXISTS(INT64_MAX        \"${headers}\" HAVE_DECL_INT64_MAX)\nCHECK_SYMBOL_EXISTS(INT64_MIN        \"${headers}\" HAVE_DECL_INT64_MIN)\nCHECK_SYMBOL_EXISTS(INTMAX_MAX       \"${headers}\" HAVE_DECL_INTMAX_MAX)\nCHECK_SYMBOL_EXISTS(INTMAX_MIN       \"${headers}\" HAVE_DECL_INTMAX_MIN)\nCHECK_SYMBOL_EXISTS(UINT32_MAX       \"${headers}\" HAVE_DECL_UINT32_MAX)\nCHECK_SYMBOL_EXISTS(UINT64_MAX       \"${headers}\" HAVE_DECL_UINT64_MAX)\nCHECK_SYMBOL_EXISTS(UINTMAX_MAX      \"${headers}\" HAVE_DECL_UINTMAX_MAX)\nCHECK_SYMBOL_EXISTS(SIZE_MAX         \"${headers}\" HAVE_DECL_SIZE_MAX)\nCHECK_SYMBOL_EXISTS(SSIZE_MAX        \"limits.h\"   HAVE_DECL_SSIZE_MAX)\n\n#\n# Check struct members\n#\n# Check for tm_gmtoff in struct tm\nCHECK_STRUCT_HAS_MEMBER(\"struct tm\" tm_gmtoff\n    \"time.h\" HAVE_STRUCT_TM_TM_GMTOFF)\nCHECK_STRUCT_HAS_MEMBER(\"struct tm\" __tm_gmtoff\n    \"time.h\" HAVE_STRUCT_TM___TM_GMTOFF)\n\nIF(HAVE_STRUCT_STATFS)\n# Check for f_namemax in struct statfs\nCHECK_STRUCT_HAS_MEMBER(\"struct statfs\" f_namemax\n    \"sys/param.h;sys/mount.h\" HAVE_STRUCT_STATFS_F_NAMEMAX)\n# Check for f_iosize in struct statfs\nCHECK_STRUCT_HAS_MEMBER(\"struct statfs\" f_iosize\n    \"sys/param.h;sys/mount.h\" HAVE_STRUCT_STATFS_F_IOSIZE)\nENDIF(HAVE_STRUCT_STATFS)\n\n# Check for birthtime in struct stat\nCHECK_STRUCT_HAS_MEMBER(\"struct stat\" st_birthtime\n    \"sys/types.h;sys/stat.h\" HAVE_STRUCT_STAT_ST_BIRTHTIME)\n\n# Check for high-resolution timestamps in struct stat\nCHECK_STRUCT_HAS_MEMBER(\"struct stat\" st_birthtimespec.tv_nsec\n    \"sys/types.h;sys/stat.h\" HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC)\nCHECK_STRUCT_HAS_MEMBER(\"struct stat\" st_mtimespec.tv_nsec\n    \"sys/types.h;sys/stat.h\" HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC)\nCHECK_STRUCT_HAS_MEMBER(\"struct stat\" st_mtim.tv_nsec\n    \"sys/types.h;sys/stat.h\" HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC)\nCHECK_STRUCT_HAS_MEMBER(\"struct stat\" st_mtime_n\n    \"sys/types.h;sys/stat.h\" HAVE_STRUCT_STAT_ST_MTIME_N)\nCHECK_STRUCT_HAS_MEMBER(\"struct stat\" st_umtime\n    \"sys/types.h;sys/stat.h\" HAVE_STRUCT_STAT_ST_UMTIME)\nCHECK_STRUCT_HAS_MEMBER(\"struct stat\" st_mtime_usec\n    \"sys/types.h;sys/stat.h\" HAVE_STRUCT_STAT_ST_MTIME_USEC)\n# Check for block size support in struct stat\nCHECK_STRUCT_HAS_MEMBER(\"struct stat\" st_blksize\n    \"sys/types.h;sys/stat.h\" HAVE_STRUCT_STAT_ST_BLKSIZE)\n# Check for st_flags in struct stat (BSD fflags)\nCHECK_STRUCT_HAS_MEMBER(\"struct stat\" st_flags\n    \"sys/types.h;sys/stat.h\" HAVE_STRUCT_STAT_ST_FLAGS)\n\nIF(HAVE_SYS_STATVFS_H)\n  CHECK_STRUCT_HAS_MEMBER(\"struct statvfs\" f_iosize\n    \"sys/types.h;sys/statvfs.h\" HAVE_STRUCT_STATVFS_F_IOSIZE)\nENDIF()\n\n#\n#\nCHECK_STRUCT_HAS_MEMBER(\"struct tm\" tm_sec\n    \"sys/types.h;sys/time.h;time.h\" HAVE_SYS_TIME_H)\n\n#\n# Check for integer types\n#\n#\nCHECK_TYPE_SIZE(\"short\" SIZEOF_SHORT)\nCHECK_TYPE_SIZE(\"int\" SIZEOF_INT)\nCHECK_TYPE_SIZE(\"long\" SIZEOF_LONG)\nCHECK_TYPE_SIZE(\"long long\"     SIZEOF_LONG_LONG)\n\nCHECK_TYPE_SIZE(\"unsigned short\" SIZEOF_UNSIGNED_SHORT)\nCHECK_TYPE_SIZE(\"unsigned\" SIZEOF_UNSIGNED)\nCHECK_TYPE_SIZE(\"unsigned long\" SIZEOF_UNSIGNED_LONG)\nCHECK_TYPE_SIZE(\"unsigned long long\" SIZEOF_UNSIGNED_LONG_LONG)\n\nCHECK_TYPE_SIZE(\"__int64\" __INT64)\nCHECK_TYPE_SIZE(\"unsigned __int64\" UNSIGNED___INT64)\n\nCHECK_TYPE_SIZE(int16_t INT16_T)\nCHECK_TYPE_SIZE(int32_t INT32_T)\nCHECK_TYPE_SIZE(int64_t INT64_T)\nCHECK_TYPE_SIZE(intmax_t INTMAX_T)\nCHECK_TYPE_SIZE(uint8_t UINT8_T)\nCHECK_TYPE_SIZE(uint16_t UINT16_T)\nCHECK_TYPE_SIZE(uint32_t UINT32_T)\nCHECK_TYPE_SIZE(uint64_t UINT64_T)\nCHECK_TYPE_SIZE(uintmax_t UINTMAX_T)\n\nCHECK_TYPE_SIZE(dev_t       DEV_T)\nIF(NOT HAVE_DEV_T)\n  IF(MSVC)\n    SET(dev_t \"unsigned int\")\n  ENDIF(MSVC)\nENDIF(NOT HAVE_DEV_T)\n#\nCHECK_TYPE_SIZE(gid_t       GID_T)\nIF(NOT HAVE_GID_T)\n  IF(WIN32)\n    SET(gid_t \"short\")\n  ELSE(WIN32)\n    SET(gid_t \"unsigned int\")\n  ENDIF(WIN32)\nENDIF(NOT HAVE_GID_T)\n#\nCHECK_TYPE_SIZE(id_t        ID_T)\nIF(NOT HAVE_ID_T)\n  IF(WIN32)\n    SET(id_t \"short\")\n  ELSE(WIN32)\n    SET(id_t \"unsigned int\")\n  ENDIF(WIN32)\nENDIF(NOT HAVE_ID_T)\n#\nCHECK_TYPE_SIZE(mode_t      MODE_T)\nIF(NOT HAVE_MODE_T)\n  IF(WIN32)\n    SET(mode_t \"unsigned short\")\n  ELSE(WIN32)\n    SET(mode_t \"int\")\n  ENDIF(WIN32)\nENDIF(NOT HAVE_MODE_T)\n#\nCHECK_TYPE_SIZE(off_t       OFF_T)\nIF(NOT HAVE_OFF_T)\n  SET(off_t \"__int64\")\nENDIF(NOT HAVE_OFF_T)\n#\nCHECK_TYPE_SIZE(size_t      SIZE_T)\nIF(NOT HAVE_SIZE_T)\n  IF(\"${CMAKE_SIZEOF_VOID_P}\" EQUAL 8)\n    SET(size_t \"uint64_t\")\n  ELSE(\"${CMAKE_SIZEOF_VOID_P}\" EQUAL 8)\n    SET(size_t   \"uint32_t\")\n  ENDIF(\"${CMAKE_SIZEOF_VOID_P}\" EQUAL 8)\nENDIF(NOT HAVE_SIZE_T)\n#\nCHECK_TYPE_SIZE(ssize_t     SSIZE_T)\nIF(NOT HAVE_SSIZE_T)\n  IF(\"${CMAKE_SIZEOF_VOID_P}\" EQUAL 8)\n    SET(ssize_t \"int64_t\")\n  ELSE(\"${CMAKE_SIZEOF_VOID_P}\" EQUAL 8)\n    SET(ssize_t \"long\")\n  ENDIF(\"${CMAKE_SIZEOF_VOID_P}\" EQUAL 8)\nENDIF(NOT HAVE_SSIZE_T)\n#\nCHECK_TYPE_SIZE(uid_t       UID_T)\nIF(NOT HAVE_UID_T)\n  IF(WIN32)\n    SET(uid_t \"short\")\n  ELSE(WIN32)\n    SET(uid_t \"unsigned int\")\n  ENDIF(WIN32)\nENDIF(NOT HAVE_UID_T)\n#\nCHECK_TYPE_SIZE(pid_t       PID_T)\nIF(NOT HAVE_PID_T)\n  IF(WIN32)\n    SET(pid_t \"int\")\n  ELSE(WIN32)\n    MESSAGE(FATAL_ERROR \"pid_t doesn't exist on this platform?\")\n  ENDIF(WIN32)\nENDIF(NOT HAVE_PID_T)\n#\nCHECK_TYPE_SIZE(intptr_t   INTPTR_T)\nIF(NOT HAVE_INTPTR_T)\n  IF(\"${CMAKE_SIZEOF_VOID_P}\" EQUAL 8)\n    SET(intptr_t \"int64_t\")\n  ELSE()\n    SET(intptr_t \"int32_t\")\n  ENDIF()\nENDIF(NOT HAVE_INTPTR_T)\n#\nCHECK_TYPE_SIZE(uintptr_t   UINTPTR_T)\nIF(NOT HAVE_UINTPTR_T)\n  IF(\"${CMAKE_SIZEOF_VOID_P}\" EQUAL 8)\n    SET(uintptr_t \"uint64_t\")\n  ELSE()\n    SET(uintptr_t \"uint32_t\")\n  ENDIF()\nENDIF(NOT HAVE_UINTPTR_T)\n#\nCHECK_TYPE_SIZE(wchar_t     SIZEOF_WCHAR_T)\nIF(HAVE_SIZEOF_WCHAR_T)\n  SET(HAVE_WCHAR_T 1)\nENDIF(HAVE_SIZEOF_WCHAR_T)\n#\n# Check if _FILE_OFFSET_BITS macro needed for large files\n#\nCHECK_FILE_OFFSET_BITS()\n\n#\n# Check for Extended Attribute libraries, headers, and functions\n#\nIF(ENABLE_XATTR)\n  CHECK_LIBRARY_EXISTS(attr \"setxattr\" \"\" HAVE_LIBATTR)\n  IF(HAVE_LIBATTR)\n    SET(CMAKE_REQUIRED_LIBRARIES \"attr\")\n  ELSE()\n    CHECK_LIBRARY_EXISTS(gnu \"setxattr\" \"\" HAVE_LIBATTR_GNU)\n    IF(HAVE_LIBATTR_GNU)\n      SET(CMAKE_REQUIRED_LIBRARIES \"gnu\")\n    ENDIF()\n  ENDIF(HAVE_LIBATTR)\n  CHECK_SYMBOL_EXISTS(EXTATTR_NAMESPACE_USER \"sys/types.h;sys/extattr.h\" HAVE_DECL_EXTATTR_NAMESPACE_USER)\n  CHECK_SYMBOL_EXISTS(XATTR_NOFOLLOW \"sys/xattr.h\" HAVE_DECL_XATTR_NOFOLLOW)\n  IF(HAVE_SYS_XATTR_H AND HAVE_DECL_XATTR_NOFOLLOW)\n    CHECK_FUNCTION_EXISTS(fgetxattr HAVE_FGETXATTR)\n    CHECK_FUNCTION_EXISTS(flistxattr HAVE_FLISTXATTR)\n    CHECK_FUNCTION_EXISTS(fsetxattr HAVE_FSETXATTR)\n    CHECK_FUNCTION_EXISTS(getxattr HAVE_GETXATTR)\n    CHECK_FUNCTION_EXISTS(listxattr HAVE_LISTXATTR)\n    CHECK_FUNCTION_EXISTS(setxattr HAVE_SETXATTR)\n    IF(HAVE_FGETXATTR AND\n       HAVE_FLISTXATTR AND\n       HAVE_FSETXATTR AND\n       HAVE_GETXATTR AND\n       HAVE_LISTXATTR AND\n       HAVE_SETXATTR)\n      SET(ARCHIVE_XATTR_DARWIN TRUE)\n    ENDIF()\n  ELSEIF(HAVE_SYS_EXTATTR_H AND HAVE_DECL_EXTATTR_NAMESPACE_USER)\n    # FreeBSD xattr support\n    CHECK_FUNCTION_EXISTS(extattr_get_fd HAVE_EXTATTR_GET_FD)\n    CHECK_FUNCTION_EXISTS(extattr_get_file HAVE_EXTATTR_GET_FILE)\n    CHECK_FUNCTION_EXISTS(extattr_get_link HAVE_EXTATTR_GET_LINK)\n    CHECK_FUNCTION_EXISTS(extattr_list_fd HAVE_EXTATTR_LIST_FD)\n    CHECK_FUNCTION_EXISTS(extattr_list_file HAVE_EXTATTR_LIST_FILE)\n    CHECK_FUNCTION_EXISTS(extattr_list_link HAVE_EXTATTR_LIST_LINK)\n    CHECK_FUNCTION_EXISTS(extattr_set_fd HAVE_EXTATTR_SET_FD)\n    CHECK_FUNCTION_EXISTS(extattr_set_link HAVE_EXTATTR_SET_LINK)\n    IF(HAVE_EXTATTR_GET_FD AND\n       HAVE_EXTATTR_GET_FILE AND\n       HAVE_EXTATTR_GET_LINK AND\n       HAVE_EXTATTR_LIST_FD AND\n       HAVE_EXTATTR_LIST_FILE AND\n       HAVE_EXTATTR_LIST_LINK AND\n       HAVE_EXTATTR_SET_FD AND\n       HAVE_EXTATTR_SET_LINK)\n      SET(ARCHIVE_XATTR_FREEBSD TRUE)\n    ENDIF()\n  ELSEIF(HAVE_SYS_XATTR_H OR HAVE_ATTR_XATTR_H)\n    # Linux xattr support\n    CHECK_FUNCTION_EXISTS_GLIBC(fgetxattr HAVE_FGETXATTR)\n    CHECK_FUNCTION_EXISTS_GLIBC(flistxattr HAVE_FLISTXATTR)\n    CHECK_FUNCTION_EXISTS_GLIBC(fsetxattr HAVE_FSETXATTR)\n    CHECK_FUNCTION_EXISTS_GLIBC(getxattr HAVE_GETXATTR)\n    CHECK_FUNCTION_EXISTS_GLIBC(lgetxattr HAVE_LGETXATTR)\n    CHECK_FUNCTION_EXISTS_GLIBC(listxattr HAVE_LISTXATTR)\n    CHECK_FUNCTION_EXISTS_GLIBC(llistxattr HAVE_LLISTXATTR)\n    CHECK_FUNCTION_EXISTS_GLIBC(lsetxattr HAVE_LSETXATTR)\n    IF(HAVE_FGETXATTR AND\n       HAVE_FLISTXATTR AND\n       HAVE_FSETXATTR AND\n       HAVE_GETXATTR AND\n       HAVE_LGETXATTR AND\n       HAVE_LISTXATTR AND\n       HAVE_LLISTXATTR AND\n       HAVE_LSETXATTR)\n      SET(ARCHIVE_XATTR_LINUX TRUE)\n    ENDIF()\n  ELSEIF(HAVE_SYS_EA_H)\n    # AIX xattr support\n    CHECK_FUNCTION_EXISTS(fgetea HAVE_FGETEA)\n    CHECK_FUNCTION_EXISTS(flistea HAVE_FLISTEA)\n    CHECK_FUNCTION_EXISTS(fsetea HAVE_FSETEA)\n    CHECK_FUNCTION_EXISTS(getea HAVE_GETEA)\n    CHECK_FUNCTION_EXISTS(lgetea HAVE_LGETEA)\n    CHECK_FUNCTION_EXISTS(listea HAVE_LISTEA)\n    CHECK_FUNCTION_EXISTS(llistea HAVE_LLISTEA)\n    CHECK_FUNCTION_EXISTS(lsetea HAVE_LSETEA)\n    IF(HAVE_FGETEA AND\n       HAVE_FLISTEA AND\n       HAVE_FSETEA AND\n       HAVE_GETEA AND\n       HAVE_LGETEA AND\n       HAVE_LISTEA AND\n       HAVE_LLISTEA AND\n       HAVE_LSETEA)\n      SET(ARCHIVE_XATTR_AIX TRUE)\n    ENDIF()\n  ENDIF()\n\n  IF(ARCHIVE_XATTR_DARWIN)\n    MESSAGE(STATUS \"Extended attributes support: Darwin\")\n  ELSEIF(ARCHIVE_XATTR_FREEBSD)\n    MESSAGE(STATUS \"Extended attributes support: FreeBSD\")\n  ELSEIF(ARCHIVE_XATTR_LINUX)\n    MESSAGE(STATUS \"Extended attributes support: Linux\")\n  ELSEIF(ARCHIVE_XATTR_AIX)\n    MESSAGE(STATUS \"Extended attributes support: AIX\")\n  ELSE()\n    MESSAGE(STATUS \"Extended attributes support: none\")\n  ENDIF()\nELSE(ENABLE_XATTR)\n  SET(ARCHIVE_XATTR_DARWIN FALSE)\n  SET(ARCHIVE_XATTR_FREEBSD FALSE)\n  SET(ARCHIVE_XATTR_LINUX FALSE)\n  SET(ARCHIVE_XATTR_AIX FALSE)\nENDIF(ENABLE_XATTR)\n\n#\n# Check for ACL libraries, headers, and functions\n#\n# The ACL support in libarchive is written against the POSIX1e draft,\n# which was never officially approved and varies quite a bit across\n# platforms.  Worse, some systems have completely non-POSIX acl functions,\n# which makes the following checks rather more complex than I would like.\n#\nIF(ENABLE_ACL)\n  # Solaris and derivates ACLs\n  CHECK_FUNCTION_EXISTS(acl HAVE_ACL)\n  CHECK_FUNCTION_EXISTS(facl HAVE_FACL)\n\n  # Libacl\n  CHECK_LIBRARY_EXISTS(acl \"acl_get_file\" \"\" HAVE_LIBACL)\n  IF(HAVE_LIBACL)\n    SET(CMAKE_REQUIRED_LIBRARIES \"acl\")\n    FIND_LIBRARY(ACL_LIBRARY NAMES acl)\n    LIST(APPEND ADDITIONAL_LIBS ${ACL_LIBRARY})\n  ENDIF(HAVE_LIBACL)\n\n  CHECK_TYPE_EXISTS(acl_t \"sys/types.h;sys/acl.h\" HAVE_ACL_T)\n  CHECK_TYPE_EXISTS(acl_entry_t \"sys/types.h;sys/acl.h\" HAVE_ACL_ENTRY_T)\n  CHECK_TYPE_EXISTS(acl_permset_t \"sys/types.h;sys/acl.h\" HAVE_ACL_PERMSET_T)\n  CHECK_TYPE_EXISTS(acl_tag_t \"sys/types.h;sys/acl.h\" HAVE_ACL_TAG_T)\n\n  IF(HAVE_ACL AND HAVE_FACL)\n    CHECK_TYPE_EXISTS(aclent_t \"sys/acl.h\" HAVE_ACLENT_T)\n    IF(HAVE_ACLENT_T)\n      CHECK_SYMBOL_EXISTS(GETACL \"sys/acl.h\" HAVE_DECL_GETACL)\n      CHECK_SYMBOL_EXISTS(GETACLCNT \"sys/acl.h\" HAVE_DECL_GETACLCNT)\n      CHECK_SYMBOL_EXISTS(SETACL \"sys/acl.h\" HAVE_DECL_SETACL)\n      IF(HAVE_DECL_GETACL AND\n         HAVE_DECL_GETACLCNT AND\n         HAVE_DECL_SETACL)\n        SET(ARCHIVE_ACL_SUNOS TRUE)\n      ENDIF()\n      CHECK_TYPE_EXISTS(ace_t \"sys/acl.h\" HAVE_ACE_T)\n      IF(HAVE_ACE_T)\n        CHECK_SYMBOL_EXISTS(ACE_GETACL \"sys/acl.h\" HAVE_DECL_ACE_GETACL)\n        CHECK_SYMBOL_EXISTS(ACE_GETACLCNT \"sys/acl.h\" HAVE_DECL_ACE_GETACLCNT)\n        CHECK_SYMBOL_EXISTS(ACE_SETACL \"sys/acl.h\" HAVE_DECL_ACE_SETACL)\n        IF(HAVE_DECL_ACE_GETACL AND\n           HAVE_DECL_ACE_GETACLCNT AND\n           HAVE_DECL_ACE_SETACL)\n          SET(ARCHIVE_ACL_SUNOS_NFS4 TRUE)\n        ENDIF()\n      ENDIF(HAVE_ACE_T)\n    ENDIF(HAVE_ACLENT_T)\n  ENDIF(HAVE_ACL AND HAVE_FACL)\n\n  IF(HAVE_ACL_T AND HAVE_ACL_ENTRY_T AND HAVE_ACL_PERMSET_T AND HAVE_ACL_TAG_T)\n    CHECK_FUNCTION_EXISTS_GLIBC(acl_add_perm HAVE_ACL_ADD_PERM)\n    CHECK_FUNCTION_EXISTS_GLIBC(acl_clear_perms HAVE_ACL_CLEAR_PERMS)\n    CHECK_FUNCTION_EXISTS_GLIBC(acl_create_entry HAVE_ACL_CREATE_ENTRY)\n    CHECK_FUNCTION_EXISTS_GLIBC(acl_delete_def_file HAVE_ACL_DELETE_DEF_FILE)\n    CHECK_FUNCTION_EXISTS_GLIBC(acl_free HAVE_ACL_FREE)\n    CHECK_FUNCTION_EXISTS_GLIBC(acl_get_entry HAVE_ACL_GET_ENTRY)\n    CHECK_FUNCTION_EXISTS_GLIBC(acl_get_fd HAVE_ACL_GET_FD)\n    CHECK_FUNCTION_EXISTS_GLIBC(acl_get_file HAVE_ACL_GET_FILE)\n    CHECK_FUNCTION_EXISTS_GLIBC(acl_get_permset HAVE_ACL_GET_PERMSET)\n    CHECK_FUNCTION_EXISTS_GLIBC(acl_get_qualifier HAVE_ACL_GET_QUALIFIER)\n    CHECK_FUNCTION_EXISTS_GLIBC(acl_get_tag_type HAVE_ACL_GET_TAG_TYPE)\n    CHECK_FUNCTION_EXISTS_GLIBC(acl_init HAVE_ACL_INIT)\n    CHECK_FUNCTION_EXISTS_GLIBC(acl_set_fd HAVE_ACL_SET_FD)\n    CHECK_FUNCTION_EXISTS_GLIBC(acl_set_file HAVE_ACL_SET_FILE)\n    CHECK_FUNCTION_EXISTS_GLIBC(acl_set_qualifier HAVE_ACL_SET_QUALIFIER)\n    CHECK_FUNCTION_EXISTS_GLIBC(acl_set_tag_type HAVE_ACL_SET_TAG_TYPE)\n    IF(HAVE_ACL_ADD_PERM AND\n       HAVE_ACL_CLEAR_PERMS AND\n       HAVE_ACL_CREATE_ENTRY AND\n       HAVE_ACL_DELETE_DEF_FILE AND\n       HAVE_ACL_FREE AND\n       HAVE_ACL_GET_ENTRY AND\n       HAVE_ACL_GET_FD AND\n       HAVE_ACL_GET_FILE AND\n       HAVE_ACL_GET_PERMSET AND\n       HAVE_ACL_GET_QUALIFIER AND\n       HAVE_ACL_GET_TAG_TYPE AND\n       HAVE_ACL_INIT AND\n       HAVE_ACL_SET_FD AND\n       HAVE_ACL_SET_FILE AND\n       HAVE_ACL_SET_QUALIFIER AND\n       HAVE_ACL_SET_TAG_TYPE)\n         SET(HAVE_POSIX_ACL_FUNCS 1)\n    ENDIF()\n\n    CHECK_FUNCTION_EXISTS_GLIBC(acl_get_perm HAVE_ACL_GET_PERM)\n\n    IF(HAVE_POSIX_ACL_FUNCS AND HAVE_ACL_LIBACL_H AND HAVE_LIBACL AND\n       HAVE_ACL_GET_PERM)\n      SET(ARCHIVE_ACL_LIBACL TRUE)\n    ELSE()\n      CHECK_FUNCTION_EXISTS(acl_add_flag_np HAVE_ACL_ADD_FLAG_NP)\n      CHECK_FUNCTION_EXISTS(acl_clear_flags_np HAVE_ACL_CLEAR_FLAGS_NP)\n      CHECK_FUNCTION_EXISTS(acl_get_brand_np HAVE_ACL_GET_BRAND_NP)\n      CHECK_FUNCTION_EXISTS(acl_get_entry_type_np HAVE_ACL_GET_ENTRY_TYPE_NP)\n      CHECK_FUNCTION_EXISTS(acl_get_flag_np HAVE_ACL_GET_FLAG_NP)\n      CHECK_FUNCTION_EXISTS(acl_get_flagset_np HAVE_ACL_GET_FLAGSET_NP)\n      CHECK_FUNCTION_EXISTS(acl_get_fd_np HAVE_ACL_GET_FD_NP)\n      CHECK_FUNCTION_EXISTS(acl_get_link_np HAVE_ACL_GET_LINK_NP)\n      CHECK_FUNCTION_EXISTS(acl_get_perm_np HAVE_ACL_GET_PERM_NP)\n      CHECK_FUNCTION_EXISTS(acl_is_trivial_np HAVE_ACL_IS_TRIVIAL_NP)\n      CHECK_FUNCTION_EXISTS(acl_set_entry_type_np HAVE_ACL_SET_ENTRY_TYPE_NP)\n      CHECK_FUNCTION_EXISTS(acl_set_fd_np HAVE_ACL_SET_FD_NP)\n      CHECK_FUNCTION_EXISTS(acl_set_link_np HAVE_ACL_SET_LINK_NP)\n      CHECK_FUNCTION_EXISTS(mbr_gid_to_uuid HAVE_MBR_GID_TO_UUID)\n      CHECK_FUNCTION_EXISTS(mbr_uid_to_uuid HAVE_MBR_UID_TO_UUID)\n      CHECK_FUNCTION_EXISTS(mbr_uuid_to_id HAVE_MBR_UUID_TO_ID)\n\n      CHECK_C_SOURCE_COMPILES(\"#include <sys/types.h>\n#include <sys/acl.h>\nint main(void) { return ACL_TYPE_EXTENDED; }\" HAVE_DECL_ACL_TYPE_EXTENDED)\n      CHECK_C_SOURCE_COMPILES(\"#include <sys/types.h>\n#include <sys/acl.h>\nint main(void) { return ACL_SYNCHRONIZE; }\" HAVE_DECL_ACL_SYNCHRONIZE)\n      CHECK_SYMBOL_EXISTS(ACL_TYPE_NFS4 \"sys/acl.h\" HAVE_DECL_ACL_TYPE_NFS4)\n      CHECK_SYMBOL_EXISTS(ACL_USER \"sys/acl.h\" HAVE_DECL_ACL_USER)\n\n      IF(HAVE_POSIX_ACL_FUNCS AND\n         HAVE_ACL_GET_FD_NP AND\n         HAVE_ACL_GET_PERM_NP AND\n         NOT HAVE_ACL_GET_PERM AND\n         HAVE_ACL_SET_FD_NP)\n        IF(HAVE_DECL_ACL_USER)\n          SET(ARCHIVE_ACL_FREEBSD TRUE)\n          IF(HAVE_DECL_ACL_TYPE_NFS4 AND\n             HAVE_ACL_ADD_FLAG_NP AND\n             HAVE_ACL_CLEAR_FLAGS_NP AND\n             HAVE_ACL_GET_BRAND_NP AND\n             HAVE_ACL_GET_ENTRY_TYPE_NP AND\n             HAVE_ACL_GET_FLAGSET_NP AND\n             HAVE_ACL_SET_ENTRY_TYPE_NP)\n            SET(ARCHIVE_ACL_FREEBSD_NFS4 TRUE)\n          ENDIF()\n        ELSEIF(HAVE_DECL_ACL_TYPE_EXTENDED AND\n               HAVE_MEMBERSHIP_H AND\n               HAVE_ACL_ADD_FLAG_NP AND\n               HAVE_ACL_CLEAR_FLAGS_NP AND\n               HAVE_ACL_GET_FLAGSET_NP AND\n               HAVE_ACL_GET_LINK_NP AND\n               HAVE_ACL_SET_LINK_NP AND\n               HAVE_MBR_UID_TO_UUID AND\n               HAVE_MBR_GID_TO_UUID AND\n               HAVE_MBR_UUID_TO_ID)\n          SET(ARCHIVE_ACL_DARWIN TRUE)\n        ENDIF()\n      ENDIF()\n    ENDIF()\n  ENDIF(HAVE_ACL_T AND HAVE_ACL_ENTRY_T AND HAVE_ACL_PERMSET_T AND\n        HAVE_ACL_TAG_T)\n\n  # Richacl\n  CHECK_LIBRARY_EXISTS(richacl \"richacl_get_file\" \"\" HAVE_LIBRICHACL)\n  IF(HAVE_LIBRICHACL)\n    SET(CMAKE_REQUIRED_LIBRARIES \"richacl\")\n    FIND_LIBRARY(RICHACL_LIBRARY NAMES richacl)\n    LIST(APPEND ADDITIONAL_LIBS ${RICHACL_LIBRARY})\n  ENDIF(HAVE_LIBRICHACL)\n\n  CHECK_STRUCT_HAS_MEMBER(\"struct richace\" e_type \"sys/richacl.h\"\n    HAVE_STRUCT_RICHACE)\n  CHECK_STRUCT_HAS_MEMBER(\"struct richacl\" a_flags \"sys/richacl.h\"\n    HAVE_STRUCT_RICHACL)\n\n  IF(HAVE_LIBRICHACL AND HAVE_STRUCT_RICHACL AND HAVE_STRUCT_RICHACE)\n    CHECK_FUNCTION_EXISTS_GLIBC(richacl_alloc HAVE_RICHACL_ALLOC)\n    CHECK_FUNCTION_EXISTS_GLIBC(richacl_equiv_mode HAVE_RICHACL_EQUIV_MODE)\n    CHECK_FUNCTION_EXISTS_GLIBC(richacl_free HAVE_RICHACL_FREE)\n    CHECK_FUNCTION_EXISTS_GLIBC(richacl_get_fd HAVE_RICHACL_GET_FD)\n    CHECK_FUNCTION_EXISTS_GLIBC(richacl_get_file HAVE_RICHACL_GET_FILE)\n    CHECK_FUNCTION_EXISTS_GLIBC(richacl_set_fd HAVE_RICHACL_SET_FD)\n    CHECK_FUNCTION_EXISTS_GLIBC(richacl_set_file HAVE_RICHACL_SET_FILE)\n    IF(HAVE_RICHACL_ALLOC AND\n       HAVE_RICHACL_EQUIV_MODE AND\n       HAVE_RICHACL_FREE AND\n       HAVE_RICHACL_GET_FD AND\n       HAVE_RICHACL_GET_FILE AND\n       HAVE_RICHACL_SET_FD AND\n       HAVE_RICHACL_SET_FILE)\n      SET(ARCHIVE_ACL_LIBRICHACL TRUE)\n    ENDIF()\n  ENDIF(HAVE_LIBRICHACL AND HAVE_STRUCT_RICHACL AND HAVE_STRUCT_RICHACE)\n\n  IF(ARCHIVE_ACL_DARWIN)\n    MESSAGE(STATUS \"ACL support: Darwin (limited NFSv4)\")\n  ELSEIF(ARCHIVE_ACL_FREEBSD_NFS4)\n    MESSAGE(STATUS \"ACL support: FreeBSD (POSIX.1e and NFSv4)\")\n  ELSEIF(ARCHIVE_ACL_FREEBSD)\n    MESSAGE(STATUS \"ACL support: FreeBSD (POSIX.1e)\")\n  ELSEIF(ARCHIVE_ACL_LIBACL OR ARCHIVE_ACL_LIBRICHACL)\n    IF(ARCHIVE_ACL_LIBACL AND ARCHIVE_ACL_LIBRICHACL)\n      MESSAGE(STATUS \"ACL support: libacl (POSIX.1e) + librichacl (NFSv4)\")\n    ELSEIF(ARCHIVE_ACL_LIBRICHACL)\n      MESSAGE(STATUS \"ACL support: librichacl (NFSv4)\")\n    ELSE()\n      MESSAGE(STATUS \"ACL support: libacl (POSIX.1e)\")\n    ENDIF()\n  ELSEIF(ARCHIVE_ACL_SUNOS_NFS4)\n    MESSAGE(STATUS \"ACL support: Solaris (POSIX.1e and NFSv4)\")\n  ELSEIF(ARCHIVE_ACL_SUNOS)\n    MESSAGE(STATUS \"ACL support: Solaris (POSIX.1e)\")\n  ELSE()\n    MESSAGE(STATUS \"ACL support: none\")\n  ENDIF()\n\nELSE(ENABLE_ACL)\n  # If someone runs cmake, then disables ACL support, we need\n  # to forcibly override the cached values for these.\n  SET(ARCHIVE_ACL_DARWIN FALSE)\n  SET(ARCHIVE_ACL_FREEBSD FALSE)\n  SET(ARCHIVE_ACL_FREEBSD_NFS4 FALSE)\n  SET(ARCHIVE_ACL_LIBACL FALSE)\n  SET(ARCHIVE_ACL_SUNOS FALSE)\n  SET(ARCHIVE_ACL_SUNOS_NFS4 FALSE)\nENDIF(ENABLE_ACL)\n\n#\n# Check MD5/RMD160/SHA support\n# NOTE: Crypto checks must be run last before generating config.h\n#\nCHECK_CRYPTO(\"MD5;RMD160;SHA1;SHA256;SHA384;SHA512\" LIBC)\nCHECK_CRYPTO(\"SHA256;SHA384;SHA512\" LIBC2)\nCHECK_CRYPTO(\"SHA256;SHA384;SHA512\" LIBC3)\nCHECK_CRYPTO(\"MD5;SHA1;SHA256;SHA384;SHA512\" LIBSYSTEM)\nCHECK_CRYPTO(\"MD5;RMD160;SHA1;SHA256;SHA384;SHA512\" MBEDTLS)\nCHECK_CRYPTO(\"MD5;RMD160;SHA1;SHA256;SHA384;SHA512\" NETTLE)\nCHECK_CRYPTO(\"MD5;RMD160;SHA1;SHA256;SHA384;SHA512\" OPENSSL)\n\n# Libmd has to be probed after OpenSSL.\nCHECK_CRYPTO(\"MD5;RMD160;SHA1;SHA256;SHA512\" LIBMD)\n\nCHECK_CRYPTO_WIN(\"MD5;SHA1;SHA256;SHA384;SHA512\")\n\n# Check visibility annotations\nSET(OLD_CMAKE_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS}\")\nSET(CMAKE_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS} -fvisibility=hidden -Werror\")\nCHECK_C_SOURCE_COMPILES(\"void __attribute__((visibility(\\\"default\\\"))) foo(void);\nint main() { return 0; }\" HAVE_VISIBILITY_ATTR)\nIF (HAVE_VISIBILITY_ATTR)\n  SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fvisibility=hidden\")\n  ADD_DEFINITIONS(-D__LIBARCHIVE_ENABLE_VISIBILITY)\nENDIF(HAVE_VISIBILITY_ATTR)\nSET(CMAKE_REQUIRED_FLAGS \"${OLD_CMAKE_REQUIRED_FLAGS}\")\n\n# Generate \"config.h\" from \"build/cmake/config.h.in\"\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/build/cmake/config.h.in\n\t${CMAKE_CURRENT_BINARY_DIR}/config.h)\nINCLUDE_DIRECTORIES(BEFORE ${CMAKE_CURRENT_BINARY_DIR})\nADD_DEFINITIONS(-DHAVE_CONFIG_H)\n\n# Handle generation of the libarchive.pc file for pkg-config\nINCLUDE(CreatePkgConfigFile)\n\n#\n# Register installation of PDF documents.\n#\nIF(WIN32 AND NOT CYGWIN AND ENABLE_INSTALL)\n  #\n  # On Windows platform, It's better that we install PDF documents\n  # on one's computer.\n  # These PDF documents are available in the release package.\n  #\n  IF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/doc/pdf)\n    INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/doc/pdf\n            DESTINATION share/man\n            FILES_MATCHING PATTERN \"*.pdf\"\n    )\n  ENDIF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/doc/pdf)\nENDIF(WIN32 AND NOT CYGWIN AND ENABLE_INSTALL)\n#\n#\n#\nINCLUDE_DIRECTORIES(BEFORE ${CMAKE_CURRENT_SOURCE_DIR}/libarchive)\n#\nIF(MSVC)\n  ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE)\nENDIF(MSVC)\n\nOPTION(DONT_FAIL_ON_CRC_ERROR \"Ignore CRC errors during parsing (For fuzzing)\" OFF)\nIF(DONT_FAIL_ON_CRC_ERROR)\n  ADD_DEFINITIONS(-DDONT_FAIL_ON_CRC_ERROR=1)\nENDIF(DONT_FAIL_ON_CRC_ERROR)\n\nIF(ENABLE_TEST)\n  ADD_CUSTOM_TARGET(run_all_tests)\nENDIF(ENABLE_TEST)\n\nadd_subdirectory(libarchive)\nadd_subdirectory(cat)\nadd_subdirectory(tar)\nadd_subdirectory(cpio)\nadd_subdirectory(unzip)\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.5947265625,
          "content": "Thank you for helping us improve libarchive.\nThe following guidelines will help ensure your contribution gets prompt attention.\n\n# Bugs and other Issues\n\nIf you encounter any problems with libarchive,\n[please file an issue on our issue tracker](https://github.com/libarchive/libarchive/issues).\n\nAll bug reports should include the following information.  You can copy the text below directly into the issue tracker to get started:\n\n```\nBasic Information\n  Version of libarchive:\n  How you obtained it:  (build from source, pre-packaged binary, etc)\n  Operating system and version:\n  What compiler and/or IDE you are using (include version):\n\nIf you are using a pre-packaged binary\n  Exact package name and version:\n  Repository you obtained it from:\n\nDescription of the problem you are seeing:\n  What did you do?\n  What did you expect to happen?\n  What actually happened?\n  What log files or error messages were produced?\n\nHow the libarchive developers can reproduce your problem:\n  What other software was involved?\n  What other files were involved?\n  How can we obtain any of the above?\n```\n\nDepending on the specific type of issue, other information will be helpful:\n\n## Test Failures\n\nIf you see any test failures, please include the information above and also:\n\n* Names of the tests that failed.\n\n* Look for the .log files in the /tmp/libarchive_test_*date-and-time* directories.  (On Mac OS, look in $TMPDIR which is different than /tmp.)\n\nPlease paste the .log files you will find there directly into your report.\n\n\n## Problems using libarchive in a program\n\nIf you are trying to write a program using libarchive, please include the information above and also:\n\n* It will help us if we can actually run the program.  This is easiest if you can provide source to a short program that illustrates your problem.\n\n* If you have a sufficiently short program that shows the problem, you can either paste it into the report or [put it into a gist](https://gist.github.com).\n\n\n## Libarchive produced incorrect output\n\nPlease tell us what program you ran, any command-line arguments you provided, and details of the input files (`ls -l` output is helpful here).  If the problem involved a command-line program, please copy the full terminal text into the report, including the command line and any error messages.\n\nPlease try to make the output file available to us.  Unless it is very large, you can upload it into a fresh github repository and provide a link in your issue report.\n\n\n## Libarchive could not read a particular input file\n\nNote: If you can provide a **very small** input file that reproduces the problem, we can add that to our test suite.  This will ensure that the bug does not reappear in the future.\n\nA link to the relevant file is usually sufficient.\n\nIf you cannot provide the input file or a link to the file, please let us know if there is some other way to obtain it.\n\n\n## Documentation improvements\n\nWe are always interested in improving the libarchive documentation.  Please tell us about any errors you find, including:\n\n* Typos or errors in the manpages provided with libarchive source.\n\n* Mistakes in the [libarchive Wiki](https://github.com/libarchive/libarchive/wiki)\n\n* Problems with the PDF or Wiki files that are automatically generated from the manpages.\n\n\n# Code Submissions\n\nWe welcome all code submissions.  But of course, some code submissions are easier for us to respond to than others. The best code submissions:\n\n* Address a single issue.  There have been many cases where a simple fix to an obvious problem did not get handled for months because the patch that was provided also included an unrelated change affecting an especially complex area of the code.\n\n* Follow existing libarchive code style and conventions.  Libarchive generally follows [BSD KNF](https://www.freebsd.org/cgi/man.cgi?query=style&sektion=9) for formatting code.\n\n* Do not make unnecessary changes to existing whitespace, capitalization, or spelling.\n\n* Include detailed instructions for reproducing the problem you're fixing.  We do try to verify that a submission actually fixes a real problem.  If we can't reproduce the problem, it will take us longer to evaluate the fix.  For this reason, we encourage you to file an issue report first with details on reproducing the problem, then refer to that issue in your pull request.\n\n* Includes a test case.  The libarchive Wiki has [detailed documentation for adding new test cases](https://github.com/libarchive/libarchive/wiki/LibarchiveAddingTest).\n\n* Are provided via Github pull requests.  We welcome patches in almost any format, but github's pull request management makes it significantly easier for us to evaluate and test changes.\n\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 3.013671875,
          "content": "The libarchive distribution as a whole is Copyright by Tim Kientzle\nand is subject to the copyright notice reproduced at the bottom of\nthis file.\n\nEach individual file in this distribution should have a clear\ncopyright/licensing statement at the beginning of the file.  If any do\nnot, please let me know and I will rectify it.  The following is\nintended to summarize the copyright status of the individual files;\nthe actual statements in the files are controlling.\n\n* Except as listed below, all C sources (including .c and .h files)\n  and documentation files are subject to the copyright notice reproduced\n  at the bottom of this file.\n\n* The following source files are also subject in whole or in part to\n  a 3-clause UC Regents copyright; please read the individual source\n  files for details:\n   libarchive/archive_read_support_filter_compress.c\n   libarchive/archive_write_add_filter_compress.c\n   libarchive/mtree.5\n\n* The following source files are in the public domain:\n   libarchive/archive_getdate.c\n\n* The following source files are triple-licensed with the ability to choose\n  from CC0 1.0 Universal, OpenSSL or Apache 2.0 licenses:\n   libarchive/archive_blake2.h\n   libarchive/archive_blake2_impl.h\n   libarchive/archive_blake2s_ref.c\n   libarchive/archive_blake2sp_ref.c\n\n* The build files---including Makefiles, configure scripts,\n  and auxiliary scripts used as part of the compile process---have\n  widely varying licensing terms.  Please check individual files before\n  distributing them to see if those restrictions apply to you.\n\nI intend for all new source code to use the license below and hope over\ntime to replace code with other licenses with new implementations that\ndo use the license below.  The varying licensing of the build scripts\nseems to be an unavoidable mess.\n\n\nCopyright (c) 2003-2018 <author(s)>\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer\n   in this position and unchanged.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\nOF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\nIN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\nNOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "CTestConfig.cmake",
          "type": "blob",
          "size": 0.390625,
          "content": "# TODO: This file should be moved into the build/cmake directory...\n\n# The libarchive CDash page appears at\n#   http://my.cdash.org/index.php?project=libarchive\nset(CTEST_PROJECT_NAME \"libarchive\")\nset(CTEST_NIGHTLY_START_TIME \"01:00:00 UTC\")\n\nset(CTEST_DROP_METHOD \"http\")\nset(CTEST_DROP_SITE \"my.cdash.org\")\nset(CTEST_DROP_LOCATION \"/submit.php?project=libarchive\")\nset(CTEST_DROP_SITE_CDASH TRUE)\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 1.4306640625,
          "content": "More complete build documentation is available on the libarchive\nWiki:  https://github.com/libarchive/libarchive/wiki\n\nOn most Unix-like systems, you should be able to install libarchive,\nbsdtar, and bsdcpio using the following common steps:\n    ./configure\n    make\n    make install\n\nIf you need to customize the target directories or otherwise adjust\nthe build setting, use\n    ./configure --help\nto list the configure options.\n\nIf you are developing libarchive and need to update the\nconfigure script and other build files:\n    /bin/sh build/autogen.sh\n\nTo create a distribution, please use the 'distcheck' target:\n    /bin/sh build/autogen.sh && ./configure && make distcheck\n\nOn Unix-like and non-Unix-like systems, use the \"cmake\" utility (available from\nhttp://cmake.org/) to generate suitable build files for your platform.\nCmake requires the name of the directory containing CmakeLists.txt and\nthe \"generator\" to use for your build environment.  For example, to\nbuild with Xcode on Mac OS, you can use the following command:\n    cmake -G \"Xcode\" ~/libarchive-download-dir/\nThe result will be appropriate makefiles, solution files, or project\nfiles that can be used with the corresponding development tool.\nThe default on Unix-like systems is to generate Makefiles, so you\ncan also use cmake instead of the configure script:\n    cmake ~/libarchive-download-dir/\n    make\n    make install\nSee the libarchive Wiki or the cmake site for further documentation.\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 61.69921875,
          "content": "## Process this file with automake to produce Makefile.in\n\nAUTOMAKE_OPTIONS= foreign subdir-objects\nACLOCAL_AMFLAGS = -I build/autoconf\n\n#\n# What to build and install\n#\nlib_LTLIBRARIES=\tlibarchive.la\nnoinst_LTLIBRARIES=\tlibarchive_fe.la\nbin_PROGRAMS=\t$(bsdtar_programs) $(bsdcpio_programs) $(bsdcat_programs) $(bsdunzip_programs)\nman_MANS= $(libarchive_man_MANS) $(bsdtar_man_MANS) $(bsdcpio_man_MANS) $(bsdcat_man_MANS) $(bsdunzip_man_MANS)\nBUILT_SOURCES= libarchive/test/list.h tar/test/list.h cpio/test/list.h cat/test/list.h unzip/test/list.h\n\n#\n# What to test: We always test libarchive, test bsdtar and bsdcpio only\n# if we built them.\n#\ncheck_PROGRAMS= libarchive_test $(bsdtar_test_programs) $(bsdcpio_test_programs) $(bsdcat_test_programs) $(bsdunzip_test_programs)\nTESTS= libarchive_test $(bsdtar_test_programs) $(bsdcpio_test_programs) $(bsdcat_test_programs) $(bsdunzip_test_programs)\nTESTS_ENVIRONMENT= $(libarchive_TESTS_ENVIRONMENT) $(bsdtar_TESTS_ENVIRONMENT) $(bsdcpio_TESTS_ENVIRONMENT) $(bsdcat_TESTS_ENVIRONMENT) $(bsdunzip_TESTS_ENVIRONMENT)\n# Always build and test both bsdtar and bsdcpio as part of 'distcheck'\nDISTCHECK_CONFIGURE_FLAGS = --enable-bsdtar --enable-bsdcpio\n# The next line is commented out by default in shipping libarchive releases.\n# It is uncommented by default in trunk.\n# DEV_CFLAGS=-Werror -Wextra -Wunused -Wshadow -Wmissing-prototypes -Wcast-qual -g\nAM_CFLAGS=$(DEV_CFLAGS)\nPLATFORMCPPFLAGS = @PLATFORMCPPFLAGS@\nAM_CPPFLAGS=$(PLATFORMCPPFLAGS)\n\n#\n# What to include in the distribution\n#\nEXTRA_DIST= \\\n\tCMakeLists.txt \\\n\tREADME.md \\\n\tbuild/autogen.sh \\\n\tbuild/bump-version.sh \\\n\tbuild/clean.sh \\\n\tbuild/cmake \\\n\tbuild/version \\\n\tcontrib \\\n\tdoc \\\n\texamples \\\n\t$(libarchive_EXTRA_DIST) \\\n\t$(libarchive_test_EXTRA_DIST) \\\n\t$(bsdtar_EXTRA_DIST) \\\n\t$(bsdtar_test_EXTRA_DIST) \\\n\t$(bsdcpio_EXTRA_DIST) \\\n\t$(bsdcpio_test_EXTRA_DIST) \\\n\t$(bsdcat_EXTRA_DIST) \\\n\t$(bsdcat_test_EXTRA_DIST) \\\n\t$(bsdunzip_EXTRA_DIST) \\\n\t$(bsdunzip_test_EXTRA_DIST)\n\n# a) Clean out some unneeded files and directories\n# b) Collect all documentation and format it for distribution.\ndist-hook:\n\trm -rf `find $(distdir) -name CVS -type d`\n\trm -rf `find $(distdir) -name .svn -type d`\n\trm -f `find $(distdir) -name '*~'`\n\trm -f `find $(distdir) -name '*.out'`\n\trm -f `find $(distdir) -name '*.core'`\n\t-rm -f $(distdir)/*/Makefile $(distdir)/*/*/Makefile\n\tcd $(distdir)/doc && /bin/sh update.sh\n\n#\n# Extra rules for cleanup\n#\nDISTCLEANFILES= \\\n\tlibarchive/test/list.h \\\n\ttar/test/list.h \\\n\tcpio/test/list.h \\\n\tcat/test/list.h \\\n\tunzip/test/list.h\n\ndistclean-local:\n\t-rm -rf .ref\n\t-rm -rf autom4te.cache/\n\t-rm -f *~\n\t-[ -f libarchive/Makefile ] && cd libarchive && make clean\n\t-[ -f libarchive/test/Makefile ] && cd libarchive/test && make clean\n\t-[ -f tar/Makefile ] && cd tar && make clean\n\t-[ -f tar/test/Makefile ] && cd tar/test && make clean\n\t-[ -f cpio/Makefile ] && cd cpio && make clean\n\t-[ -f cpio/test/Makefile ] && cd cpio/test && make clean\n\t-[ -f cat/Makefile ] && cd cat && make clean\n\t-[ -f cat/test/Makefile ] && cd cat/test && make clean\n\t-[ -f unzip/Makefile ] && cd unzip && make clean\n\t-[ -f unzip/test/Makefile ] && cd unzip/test && make clean\n\n#\n# Libarchive headers, source, etc.\n#\n#\n\ninclude_HEADERS= libarchive/archive.h libarchive/archive_entry.h\n\nlibarchive_la_SOURCES= \\\n\tlibarchive/archive_acl.c \\\n\tlibarchive/archive_acl_private.h \\\n\tlibarchive/archive_check_magic.c \\\n\tlibarchive/archive_cmdline.c \\\n\tlibarchive/archive_cmdline_private.h \\\n\tlibarchive/archive_crc32.h \\\n\tlibarchive/archive_cryptor.c \\\n\tlibarchive/archive_cryptor_private.h \\\n\tlibarchive/archive_digest.c \\\n\tlibarchive/archive_digest_private.h \\\n\tlibarchive/archive_endian.h \\\n\tlibarchive/archive_entry.c \\\n\tlibarchive/archive_entry.h \\\n\tlibarchive/archive_entry_copy_stat.c \\\n\tlibarchive/archive_entry_link_resolver.c \\\n\tlibarchive/archive_entry_locale.h \\\n\tlibarchive/archive_entry_private.h \\\n\tlibarchive/archive_entry_sparse.c \\\n\tlibarchive/archive_entry_stat.c \\\n\tlibarchive/archive_entry_strmode.c \\\n\tlibarchive/archive_entry_xattr.c \\\n\tlibarchive/archive_getdate.c \\\n\tlibarchive/archive_getdate.h \\\n\tlibarchive/archive_hmac.c \\\n\tlibarchive/archive_hmac_private.h \\\n\tlibarchive/archive_match.c \\\n\tlibarchive/archive_openssl_evp_private.h \\\n\tlibarchive/archive_openssl_hmac_private.h \\\n\tlibarchive/archive_options.c \\\n\tlibarchive/archive_options_private.h \\\n\tlibarchive/archive_pack_dev.h \\\n\tlibarchive/archive_pack_dev.c \\\n\tlibarchive/archive_pathmatch.c \\\n\tlibarchive/archive_pathmatch.h \\\n\tlibarchive/archive_platform.h \\\n\tlibarchive/archive_platform_acl.h \\\n\tlibarchive/archive_platform_xattr.h \\\n\tlibarchive/archive_ppmd_private.h \\\n\tlibarchive/archive_ppmd7.c \\\n\tlibarchive/archive_ppmd7_private.h \\\n\tlibarchive/archive_ppmd8.c \\\n\tlibarchive/archive_ppmd8_private.h \\\n\tlibarchive/archive_private.h \\\n\tlibarchive/archive_random.c \\\n\tlibarchive/archive_random_private.h \\\n\tlibarchive/archive_rb.c \\\n\tlibarchive/archive_rb.h \\\n\tlibarchive/archive_read.c \\\n\tlibarchive/archive_read_add_passphrase.c \\\n\tlibarchive/archive_read_append_filter.c \\\n\tlibarchive/archive_read_data_into_fd.c \\\n\tlibarchive/archive_read_disk_entry_from_file.c \\\n\tlibarchive/archive_read_disk_posix.c \\\n\tlibarchive/archive_read_disk_private.h \\\n\tlibarchive/archive_read_disk_set_standard_lookup.c \\\n\tlibarchive/archive_read_extract.c \\\n\tlibarchive/archive_read_extract2.c \\\n\tlibarchive/archive_read_open_fd.c \\\n\tlibarchive/archive_read_open_file.c \\\n\tlibarchive/archive_read_open_filename.c \\\n\tlibarchive/archive_read_open_memory.c \\\n\tlibarchive/archive_read_private.h \\\n\tlibarchive/archive_read_set_format.c \\\n\tlibarchive/archive_read_set_options.c \\\n\tlibarchive/archive_read_support_filter_all.c \\\n\tlibarchive/archive_read_support_filter_bzip2.c \\\n\tlibarchive/archive_read_support_filter_by_code.c \\\n\tlibarchive/archive_read_support_filter_compress.c \\\n\tlibarchive/archive_read_support_filter_grzip.c \\\n\tlibarchive/archive_read_support_filter_gzip.c \\\n\tlibarchive/archive_read_support_filter_lrzip.c \\\n\tlibarchive/archive_read_support_filter_lz4.c \\\n\tlibarchive/archive_read_support_filter_lzop.c \\\n\tlibarchive/archive_read_support_filter_none.c \\\n\tlibarchive/archive_read_support_filter_program.c \\\n\tlibarchive/archive_read_support_filter_rpm.c \\\n\tlibarchive/archive_read_support_filter_uu.c \\\n\tlibarchive/archive_read_support_filter_xz.c \\\n\tlibarchive/archive_read_support_filter_zstd.c \\\n\tlibarchive/archive_read_support_format_7zip.c \\\n\tlibarchive/archive_read_support_format_all.c \\\n\tlibarchive/archive_read_support_format_ar.c \\\n\tlibarchive/archive_read_support_format_by_code.c \\\n\tlibarchive/archive_read_support_format_cab.c \\\n\tlibarchive/archive_read_support_format_cpio.c \\\n\tlibarchive/archive_read_support_format_empty.c \\\n\tlibarchive/archive_read_support_format_iso9660.c \\\n\tlibarchive/archive_read_support_format_lha.c \\\n\tlibarchive/archive_read_support_format_mtree.c \\\n\tlibarchive/archive_read_support_format_rar.c \\\n\tlibarchive/archive_read_support_format_rar5.c \\\n\tlibarchive/archive_read_support_format_raw.c \\\n\tlibarchive/archive_read_support_format_tar.c \\\n\tlibarchive/archive_read_support_format_warc.c \\\n\tlibarchive/archive_read_support_format_xar.c \\\n\tlibarchive/archive_read_support_format_zip.c \\\n\tlibarchive/archive_string.c \\\n\tlibarchive/archive_string.h \\\n\tlibarchive/archive_string_composition.h \\\n\tlibarchive/archive_string_sprintf.c \\\n\tlibarchive/archive_util.c \\\n\tlibarchive/archive_version_details.c \\\n\tlibarchive/archive_virtual.c \\\n\tlibarchive/archive_write.c \\\n\tlibarchive/archive_write_disk_posix.c \\\n\tlibarchive/archive_write_disk_private.h \\\n\tlibarchive/archive_write_disk_set_standard_lookup.c \\\n\tlibarchive/archive_write_open_fd.c \\\n\tlibarchive/archive_write_open_file.c \\\n\tlibarchive/archive_write_open_filename.c \\\n\tlibarchive/archive_write_open_memory.c \\\n\tlibarchive/archive_write_private.h \\\n\tlibarchive/archive_write_add_filter.c \\\n\tlibarchive/archive_write_add_filter_b64encode.c \\\n\tlibarchive/archive_write_add_filter_by_name.c \\\n\tlibarchive/archive_write_add_filter_bzip2.c \\\n\tlibarchive/archive_write_add_filter_compress.c \\\n\tlibarchive/archive_write_add_filter_grzip.c \\\n\tlibarchive/archive_write_add_filter_gzip.c \\\n\tlibarchive/archive_write_add_filter_lrzip.c \\\n\tlibarchive/archive_write_add_filter_lz4.c \\\n\tlibarchive/archive_write_add_filter_lzop.c \\\n\tlibarchive/archive_write_add_filter_none.c \\\n\tlibarchive/archive_write_add_filter_program.c \\\n\tlibarchive/archive_write_add_filter_uuencode.c \\\n\tlibarchive/archive_write_add_filter_xz.c \\\n\tlibarchive/archive_write_add_filter_zstd.c \\\n\tlibarchive/archive_write_set_format.c \\\n\tlibarchive/archive_write_set_format_7zip.c \\\n\tlibarchive/archive_write_set_format_ar.c \\\n\tlibarchive/archive_write_set_format_by_name.c \\\n\tlibarchive/archive_write_set_format_cpio.c \\\n\tlibarchive/archive_write_set_format_cpio_binary.c \\\n\tlibarchive/archive_write_set_format_cpio_newc.c \\\n\tlibarchive/archive_write_set_format_cpio_odc.c \\\n\tlibarchive/archive_write_set_format_filter_by_ext.c \\\n\tlibarchive/archive_write_set_format_iso9660.c \\\n\tlibarchive/archive_write_set_format_mtree.c \\\n\tlibarchive/archive_write_set_format_pax.c \\\n\tlibarchive/archive_write_set_format_private.h \\\n\tlibarchive/archive_write_set_format_raw.c \\\n\tlibarchive/archive_write_set_format_shar.c \\\n\tlibarchive/archive_write_set_format_ustar.c \\\n\tlibarchive/archive_write_set_format_v7tar.c \\\n\tlibarchive/archive_write_set_format_gnutar.c \\\n\tlibarchive/archive_write_set_format_warc.c \\\n\tlibarchive/archive_write_set_format_xar.c \\\n\tlibarchive/archive_write_set_format_zip.c \\\n\tlibarchive/archive_write_set_options.c \\\n\tlibarchive/archive_write_set_passphrase.c \\\n\tlibarchive/archive_xxhash.h \\\n\tlibarchive/config_freebsd.h \\\n\tlibarchive/filter_fork_posix.c \\\n\tlibarchive/filter_fork.h \\\n\tlibarchive/xxhash.c\n\nif INC_WINDOWS_FILES\nlibarchive_la_SOURCES+= \\\n\tlibarchive/archive_entry_copy_bhfi.c \\\n\tlibarchive/archive_read_disk_windows.c \\\n\tlibarchive/archive_windows.h \\\n\tlibarchive/archive_windows.c \\\n\tlibarchive/archive_write_disk_windows.c \\\n\tlibarchive/filter_fork_windows.c\nendif\n\nif INC_BLAKE2\nlibarchive_la_SOURCES+= \\\n\tlibarchive/archive_blake2.h \\\n\tlibarchive/archive_blake2_impl.h \\\n\tlibarchive/archive_blake2s_ref.c \\\n\tlibarchive/archive_blake2sp_ref.c\nendif\n\nif INC_LINUX_ACL\nlibarchive_la_SOURCES+= libarchive/archive_disk_acl_linux.c\nelse\nif INC_SUNOS_ACL\nlibarchive_la_SOURCES+= libarchive/archive_disk_acl_sunos.c\nelse\nif INC_DARWIN_ACL\nlibarchive_la_SOURCES+= libarchive/archive_disk_acl_darwin.c\nelse\nif INC_FREEBSD_ACL\nlibarchive_la_SOURCES+= libarchive/archive_disk_acl_freebsd.c\nendif\nendif\nendif\nendif\n\n# -no-undefined marks that libarchive doesn't rely on symbols\n# defined in the application.  This is mandatory for cygwin.\nlibarchive_la_LDFLAGS= -no-undefined -version-info $(ARCHIVE_LIBTOOL_VERSION) $(DEAD_CODE_REMOVAL)\nlibarchive_la_LIBADD= $(LTLIBICONV)\n\n# Manpages to install\nlibarchive_man_MANS= \\\n\tlibarchive/archive_entry.3 \\\n\tlibarchive/archive_entry_acl.3 \\\n\tlibarchive/archive_entry_linkify.3 \\\n\tlibarchive/archive_entry_misc.3 \\\n\tlibarchive/archive_entry_paths.3 \\\n\tlibarchive/archive_entry_perms.3 \\\n\tlibarchive/archive_entry_stat.3 \\\n\tlibarchive/archive_entry_time.3 \\\n\tlibarchive/archive_read.3 \\\n\tlibarchive/archive_read_add_passphrase.3 \\\n\tlibarchive/archive_read_data.3 \\\n\tlibarchive/archive_read_disk.3 \\\n\tlibarchive/archive_read_extract.3 \\\n\tlibarchive/archive_read_filter.3 \\\n\tlibarchive/archive_read_format.3 \\\n\tlibarchive/archive_read_free.3 \\\n\tlibarchive/archive_read_header.3 \\\n\tlibarchive/archive_read_new.3 \\\n\tlibarchive/archive_read_open.3 \\\n\tlibarchive/archive_read_set_options.3 \\\n\tlibarchive/archive_util.3 \\\n\tlibarchive/archive_write.3 \\\n\tlibarchive/archive_write_blocksize.3 \\\n\tlibarchive/archive_write_data.3 \\\n\tlibarchive/archive_write_disk.3 \\\n\tlibarchive/archive_write_filter.3 \\\n\tlibarchive/archive_write_finish_entry.3 \\\n\tlibarchive/archive_write_format.3 \\\n\tlibarchive/archive_write_free.3 \\\n\tlibarchive/archive_write_header.3 \\\n\tlibarchive/archive_write_new.3 \\\n\tlibarchive/archive_write_open.3 \\\n\tlibarchive/archive_write_set_options.3 \\\n\tlibarchive/archive_write_set_passphrase.3 \\\n\tlibarchive/cpio.5 \\\n\tlibarchive/libarchive.3 \\\n\tlibarchive/libarchive_changes.3 \\\n\tlibarchive/libarchive_internals.3 \\\n\tlibarchive/libarchive-formats.5 \\\n\tlibarchive/mtree.5 \\\n\tlibarchive/tar.5\n\n# Additional libarchive files to include in the distribution\nlibarchive_EXTRA_DIST= \\\n\tlibarchive/archive_windows.c \\\n\tlibarchive/archive_windows.h \\\n\tlibarchive/filter_fork_windows.c \\\n\tlibarchive/CMakeLists.txt \\\n\t$(libarchive_man_MANS)\n\n# pkgconfig\npkgconfigdir = $(libdir)/pkgconfig\npkgconfig_DATA = build/pkgconfig/libarchive.pc\n\n# Sources needed by all test programs\ntest_utils_SOURCES= \\\n\ttest_utils/test_utils.c \\\n\ttest_utils/test_utils.h \\\n\ttest_utils/test_main.c \\\n\ttest_utils/test_common.h\n\n#\n#\n# libarchive_test program\n#\n#\nlibarchive_test_SOURCES= \\\n\t$(libarchive_la_SOURCES) \\\n\t$(test_utils_SOURCES) \\\n\tlibarchive/test/read_open_memory.c \\\n\tlibarchive/test/test.h \\\n\tlibarchive/test/test_7zip_filename_encoding.c \\\n\tlibarchive/test/test_acl_nfs4.c \\\n\tlibarchive/test/test_acl_pax.c \\\n\tlibarchive/test/test_acl_platform_nfs4.c \\\n\tlibarchive/test/test_acl_platform_posix1e.c \\\n\tlibarchive/test/test_acl_posix1e.c \\\n\tlibarchive/test/test_acl_text.c \\\n\tlibarchive/test/test_ar_mode.c \\\n\tlibarchive/test/test_archive_api_feature.c \\\n\tlibarchive/test/test_archive_clear_error.c \\\n\tlibarchive/test/test_archive_cmdline.c \\\n\tlibarchive/test/test_archive_digest.c \\\n\tlibarchive/test/test_archive_getdate.c \\\n\tlibarchive/test/test_archive_match_owner.c \\\n\tlibarchive/test/test_archive_match_path.c \\\n\tlibarchive/test/test_archive_match_time.c \\\n\tlibarchive/test/test_archive_pathmatch.c \\\n\tlibarchive/test/test_archive_read.c \\\n\tlibarchive/test/test_archive_read_add_passphrase.c \\\n\tlibarchive/test/test_archive_read_close_twice.c \\\n\tlibarchive/test/test_archive_read_close_twice_open_fd.c \\\n\tlibarchive/test/test_archive_read_close_twice_open_filename.c \\\n\tlibarchive/test/test_archive_read_multiple_data_objects.c \\\n\tlibarchive/test/test_archive_read_next_header_empty.c \\\n\tlibarchive/test/test_archive_read_next_header_raw.c \\\n\tlibarchive/test/test_archive_read_open2.c \\\n\tlibarchive/test/test_archive_read_set_filter_option.c \\\n\tlibarchive/test/test_archive_read_set_format_option.c \\\n\tlibarchive/test/test_archive_read_set_option.c \\\n\tlibarchive/test/test_archive_read_set_options.c \\\n\tlibarchive/test/test_archive_read_support.c \\\n\tlibarchive/test/test_archive_set_error.c \\\n\tlibarchive/test/test_archive_string.c \\\n\tlibarchive/test/test_archive_string_conversion.c \\\n\tlibarchive/test/test_archive_write_add_filter_by_name.c \\\n\tlibarchive/test/test_archive_write_set_filter_option.c \\\n\tlibarchive/test/test_archive_write_set_format_by_name.c \\\n\tlibarchive/test/test_archive_write_set_format_filter_by_ext.c \\\n\tlibarchive/test/test_archive_write_set_format_option.c \\\n\tlibarchive/test/test_archive_write_set_option.c \\\n\tlibarchive/test/test_archive_write_set_options.c \\\n\tlibarchive/test/test_archive_write_set_passphrase.c \\\n\tlibarchive/test/test_bad_fd.c \\\n\tlibarchive/test/test_compat_bzip2.c \\\n\tlibarchive/test/test_compat_cpio.c \\\n\tlibarchive/test/test_compat_gtar.c \\\n\tlibarchive/test/test_compat_gtar_large.c \\\n\tlibarchive/test/test_compat_gzip.c \\\n\tlibarchive/test/test_compat_lz4.c \\\n\tlibarchive/test/test_compat_lzip.c \\\n\tlibarchive/test/test_compat_lzma.c \\\n\tlibarchive/test/test_compat_lzop.c \\\n\tlibarchive/test/test_compat_mac.c \\\n\tlibarchive/test/test_compat_perl_archive_tar.c \\\n\tlibarchive/test/test_compat_plexus_archiver_tar.c \\\n\tlibarchive/test/test_compat_solaris_tar_acl.c \\\n\tlibarchive/test/test_compat_solaris_pax_sparse.c \\\n\tlibarchive/test/test_compat_star_acl.c \\\n\tlibarchive/test/test_compat_tar_directory.c \\\n\tlibarchive/test/test_compat_tar_hardlink.c \\\n\tlibarchive/test/test_compat_uudecode.c \\\n\tlibarchive/test/test_compat_uudecode_large.c \\\n\tlibarchive/test/test_compat_xz.c \\\n\tlibarchive/test/test_compat_zip.c \\\n\tlibarchive/test/test_compat_zstd.c \\\n\tlibarchive/test/test_empty_write.c \\\n\tlibarchive/test/test_entry.c \\\n\tlibarchive/test/test_entry_strmode.c \\\n\tlibarchive/test/test_extattr_freebsd.c \\\n\tlibarchive/test/test_filter_count.c \\\n\tlibarchive/test/test_fuzz.c \\\n\tlibarchive/test/test_gnutar_filename_encoding.c \\\n\tlibarchive/test/test_link_resolver.c \\\n\tlibarchive/test/test_open_failure.c \\\n\tlibarchive/test/test_open_fd.c \\\n\tlibarchive/test/test_open_file.c \\\n\tlibarchive/test/test_open_filename.c \\\n\tlibarchive/test/test_pax_filename_encoding.c \\\n\tlibarchive/test/test_pax_xattr_header.c \\\n\tlibarchive/test/test_read_data_large.c \\\n\tlibarchive/test/test_read_disk.c \\\n\tlibarchive/test/test_read_disk_directory_traversals.c \\\n\tlibarchive/test/test_read_disk_entry_from_file.c \\\n\tlibarchive/test/test_read_extract.c \\\n\tlibarchive/test/test_read_file_nonexistent.c \\\n\tlibarchive/test/test_read_filter_compress.c \\\n\tlibarchive/test/test_read_filter_grzip.c \\\n\tlibarchive/test/test_read_filter_gzip_recursive.c \\\n\tlibarchive/test/test_read_filter_lrzip.c \\\n\tlibarchive/test/test_read_filter_lzop.c \\\n\tlibarchive/test/test_read_filter_lzop_multiple_parts.c \\\n\tlibarchive/test/test_read_filter_program.c \\\n\tlibarchive/test/test_read_filter_program_signature.c \\\n\tlibarchive/test/test_read_filter_uudecode.c \\\n\tlibarchive/test/test_read_filter_uudecode_raw.c \\\n\tlibarchive/test/test_read_format_7zip.c \\\n\tlibarchive/test/test_read_format_7zip_encryption_data.c \\\n\tlibarchive/test/test_read_format_7zip_encryption_partially.c \\\n\tlibarchive/test/test_read_format_7zip_encryption_header.c \\\n\tlibarchive/test/test_read_format_7zip_malformed.c \\\n\tlibarchive/test/test_read_format_7zip_packinfo_digests.c \\\n\tlibarchive/test/test_read_format_ar.c \\\n\tlibarchive/test/test_read_format_cab.c \\\n\tlibarchive/test/test_read_format_cab_filename.c \\\n\tlibarchive/test/test_read_format_cpio_afio.c \\\n\tlibarchive/test/test_read_format_cpio_bin.c \\\n\tlibarchive/test/test_read_format_cpio_bin_Z.c \\\n\tlibarchive/test/test_read_format_cpio_bin_be.c \\\n\tlibarchive/test/test_read_format_cpio_bin_bz2.c \\\n\tlibarchive/test/test_read_format_cpio_bin_gz.c \\\n\tlibarchive/test/test_read_format_cpio_bin_le.c \\\n\tlibarchive/test/test_read_format_cpio_bin_lzip.c \\\n\tlibarchive/test/test_read_format_cpio_bin_lzma.c \\\n\tlibarchive/test/test_read_format_cpio_bin_xz.c \\\n\tlibarchive/test/test_read_format_cpio_filename.c \\\n\tlibarchive/test/test_read_format_cpio_odc.c \\\n\tlibarchive/test/test_read_format_cpio_svr4_bzip2_rpm.c \\\n\tlibarchive/test/test_read_format_cpio_svr4_gzip.c \\\n\tlibarchive/test/test_read_format_cpio_svr4_gzip_rpm.c \\\n\tlibarchive/test/test_read_format_cpio_svr4c_Z.c \\\n\tlibarchive/test/test_read_format_empty.c \\\n\tlibarchive/test/test_read_format_gtar_filename.c \\\n\tlibarchive/test/test_read_format_gtar_gz.c \\\n\tlibarchive/test/test_read_format_gtar_lzma.c \\\n\tlibarchive/test/test_read_format_gtar_sparse.c \\\n\tlibarchive/test/test_read_format_gtar_sparse_skip_entry.c \\\n\tlibarchive/test/test_read_format_huge_rpm.c \\\n\tlibarchive/test/test_read_format_iso_Z.c \\\n\tlibarchive/test/test_read_format_iso_multi_extent.c \\\n\tlibarchive/test/test_read_format_iso_xorriso.c \\\n\tlibarchive/test/test_read_format_isojoliet_bz2.c \\\n\tlibarchive/test/test_read_format_isojoliet_long.c \\\n\tlibarchive/test/test_read_format_isojoliet_rr.c \\\n\tlibarchive/test/test_read_format_isojoliet_versioned.c \\\n\tlibarchive/test/test_read_format_isorr_bz2.c \\\n\tlibarchive/test/test_read_format_isorr_ce.c \\\n\tlibarchive/test/test_read_format_isorr_new_bz2.c \\\n\tlibarchive/test/test_read_format_isorr_rr_moved.c \\\n\tlibarchive/test/test_read_format_isozisofs_bz2.c \\\n\tlibarchive/test/test_read_format_lha.c \\\n\tlibarchive/test/test_read_format_lha_bugfix_0.c \\\n\tlibarchive/test/test_read_format_lha_filename.c \\\n\tlibarchive/test/test_read_format_lha_filename_utf16.c \\\n\tlibarchive/test/test_read_format_mtree.c \\\n\tlibarchive/test/test_read_format_mtree_crash747.c \\\n\tlibarchive/test/test_read_format_pax_bz2.c \\\n\tlibarchive/test/test_read_format_rar.c \\\n\tlibarchive/test/test_read_format_rar_encryption.c \\\n\tlibarchive/test/test_read_format_rar_encryption_data.c \\\n\tlibarchive/test/test_read_format_rar_encryption_partially.c \\\n\tlibarchive/test/test_read_format_rar_encryption_header.c \\\n\tlibarchive/test/test_read_format_rar_filter.c \\\n\tlibarchive/test/test_read_format_rar_invalid1.c \\\n\tlibarchive/test/test_read_format_rar5.c \\\n\tlibarchive/test/test_read_format_raw.c \\\n\tlibarchive/test/test_read_format_tar.c \\\n\tlibarchive/test/test_read_format_tar_concatenated.c \\\n\tlibarchive/test/test_read_format_tar_empty_pax.c \\\n\tlibarchive/test/test_read_format_tar_empty_filename.c \\\n\tlibarchive/test/test_read_format_tar_empty_with_gnulabel.c \\\n\tlibarchive/test/test_read_format_tar_filename.c \\\n\tlibarchive/test/test_read_format_tar_invalid_pax_size.c \\\n\tlibarchive/test/test_read_format_tar_pax_large_attr.c \\\n\tlibarchive/test/test_read_format_tbz.c \\\n\tlibarchive/test/test_read_format_tgz.c \\\n\tlibarchive/test/test_read_format_tlz.c \\\n\tlibarchive/test/test_read_format_txz.c \\\n\tlibarchive/test/test_read_format_tz.c \\\n\tlibarchive/test/test_read_format_ustar_filename.c \\\n\tlibarchive/test/test_read_format_warc.c \\\n\tlibarchive/test/test_read_format_xar.c \\\n\tlibarchive/test/test_read_format_xar_doublelink.c \\\n\tlibarchive/test/test_read_format_zip.c \\\n\tlibarchive/test/test_read_format_zip_7075_utf8_paths.c \\\n\tlibarchive/test/test_read_format_zip_comment_stored.c \\\n\tlibarchive/test/test_read_format_zip_encryption_data.c \\\n\tlibarchive/test/test_read_format_zip_encryption_partially.c \\\n\tlibarchive/test/test_read_format_zip_encryption_header.c \\\n\tlibarchive/test/test_read_format_zip_extra_padding.c \\\n\tlibarchive/test/test_read_format_zip_filename.c \\\n\tlibarchive/test/test_read_format_zip_high_compression.c \\\n\tlibarchive/test/test_read_format_zip_jar.c \\\n\tlibarchive/test/test_read_format_zip_mac_metadata.c \\\n\tlibarchive/test/test_read_format_zip_malformed.c \\\n\tlibarchive/test/test_read_format_zip_msdos.c \\\n\tlibarchive/test/test_read_format_zip_nested.c \\\n\tlibarchive/test/test_read_format_zip_nofiletype.c \\\n\tlibarchive/test/test_read_format_zip_padded.c \\\n\tlibarchive/test/test_read_format_zip_sfx.c \\\n\tlibarchive/test/test_read_format_zip_traditional_encryption_data.c \\\n\tlibarchive/test/test_read_format_zip_winzip_aes.c \\\n\tlibarchive/test/test_read_format_zip_winzip_aes_large.c \\\n\tlibarchive/test/test_read_format_zip_zip64.c \\\n\tlibarchive/test/test_read_format_zip_with_invalid_traditional_eocd.c \\\n\tlibarchive/test/test_read_large.c \\\n\tlibarchive/test/test_read_pax_xattr_rht_security_selinux.c \\\n\tlibarchive/test/test_read_pax_xattr_schily.c \\\n\tlibarchive/test/test_read_pax_truncated.c \\\n\tlibarchive/test/test_read_position.c \\\n\tlibarchive/test/test_read_set_format.c \\\n\tlibarchive/test/test_read_too_many_filters.c \\\n\tlibarchive/test/test_read_truncated.c \\\n\tlibarchive/test/test_read_truncated_filter.c \\\n\tlibarchive/test/test_short_writes.c \\\n\tlibarchive/test/test_sparse_basic.c \\\n\tlibarchive/test/test_tar_filenames.c \\\n\tlibarchive/test/test_tar_large.c \\\n\tlibarchive/test/test_ustar_filenames.c \\\n\tlibarchive/test/test_ustar_filename_encoding.c \\\n\tlibarchive/test/test_warn_missing_hardlink_target.c \\\n\tlibarchive/test/test_write_disk.c \\\n\tlibarchive/test/test_write_disk_appledouble.c \\\n\tlibarchive/test/test_write_disk_failures.c \\\n\tlibarchive/test/test_write_disk_fixup.c \\\n\tlibarchive/test/test_write_disk_hardlink.c \\\n\tlibarchive/test/test_write_disk_hfs_compression.c \\\n\tlibarchive/test/test_write_disk_lookup.c \\\n\tlibarchive/test/test_write_disk_mac_metadata.c \\\n\tlibarchive/test/test_write_disk_no_hfs_compression.c \\\n\tlibarchive/test/test_write_disk_perms.c \\\n\tlibarchive/test/test_write_disk_secure.c \\\n\tlibarchive/test/test_write_disk_secure_noabsolutepaths.c \\\n\tlibarchive/test/test_write_disk_secure744.c \\\n\tlibarchive/test/test_write_disk_secure745.c \\\n\tlibarchive/test/test_write_disk_secure746.c \\\n\tlibarchive/test/test_write_disk_sparse.c \\\n\tlibarchive/test/test_write_disk_symlink.c \\\n\tlibarchive/test/test_write_disk_times.c \\\n\tlibarchive/test/test_write_filter_b64encode.c \\\n\tlibarchive/test/test_write_filter_bzip2.c \\\n\tlibarchive/test/test_write_filter_compress.c \\\n\tlibarchive/test/test_write_filter_gzip.c \\\n\tlibarchive/test/test_write_filter_gzip_timestamp.c \\\n\tlibarchive/test/test_write_filter_lrzip.c \\\n\tlibarchive/test/test_write_filter_lz4.c \\\n\tlibarchive/test/test_write_filter_lzip.c \\\n\tlibarchive/test/test_write_filter_lzma.c \\\n\tlibarchive/test/test_write_filter_lzop.c \\\n\tlibarchive/test/test_write_filter_program.c \\\n\tlibarchive/test/test_write_filter_uuencode.c \\\n\tlibarchive/test/test_write_filter_xz.c \\\n\tlibarchive/test/test_write_filter_zstd.c \\\n\tlibarchive/test/test_write_format_7zip.c \\\n\tlibarchive/test/test_write_format_7zip_empty.c \\\n\tlibarchive/test/test_write_format_7zip_large.c \\\n\tlibarchive/test/test_write_format_ar.c \\\n\tlibarchive/test/test_write_format_cpio.c \\\n\tlibarchive/test/test_write_format_cpio_empty.c \\\n\tlibarchive/test/test_write_format_cpio_newc.c \\\n\tlibarchive/test/test_write_format_cpio_odc.c \\\n\tlibarchive/test/test_write_format_gnutar.c \\\n\tlibarchive/test/test_write_format_gnutar_filenames.c \\\n\tlibarchive/test/test_write_format_iso9660.c \\\n\tlibarchive/test/test_write_format_iso9660_boot.c \\\n\tlibarchive/test/test_write_format_iso9660_empty.c \\\n\tlibarchive/test/test_write_format_iso9660_filename.c \\\n\tlibarchive/test/test_write_format_iso9660_zisofs.c \\\n\tlibarchive/test/test_write_format_mtree.c \\\n\tlibarchive/test/test_write_format_mtree_absolute_path.c \\\n\tlibarchive/test/test_write_format_mtree_classic.c \\\n\tlibarchive/test/test_write_format_mtree_classic_indent.c\\\n\tlibarchive/test/test_write_format_mtree_fflags.c \\\n\tlibarchive/test/test_write_format_mtree_no_separator.c \\\n\tlibarchive/test/test_write_format_mtree_quoted_filename.c\\\n\tlibarchive/test/test_write_format_pax.c \\\n\tlibarchive/test/test_write_format_raw.c \\\n\tlibarchive/test/test_write_format_raw_b64.c \\\n\tlibarchive/test/test_write_format_shar_empty.c \\\n\tlibarchive/test/test_write_format_tar.c \\\n\tlibarchive/test/test_write_format_tar_empty.c \\\n\tlibarchive/test/test_write_format_tar_sparse.c \\\n\tlibarchive/test/test_write_format_tar_ustar.c \\\n\tlibarchive/test/test_write_format_tar_v7tar.c \\\n\tlibarchive/test/test_write_format_warc.c \\\n\tlibarchive/test/test_write_format_warc_empty.c \\\n\tlibarchive/test/test_write_format_xar.c \\\n\tlibarchive/test/test_write_format_xar_empty.c \\\n\tlibarchive/test/test_write_format_zip.c \\\n\tlibarchive/test/test_write_format_zip64_stream.c \\\n\tlibarchive/test/test_write_format_zip_compression_store.c \\\n\tlibarchive/test/test_write_format_zip_compression_zstd.c \\\n\tlibarchive/test/test_write_format_zip_compression_bzip2.c \\\n\tlibarchive/test/test_write_format_zip_compression_lzmaxz.c \\\n\tlibarchive/test/test_write_format_zip_empty.c \\\n\tlibarchive/test/test_write_format_zip_empty_zip64.c \\\n\tlibarchive/test/test_write_format_zip_entry_size_unset.c \\\n\tlibarchive/test/test_write_format_zip_file.c \\\n\tlibarchive/test/test_write_format_zip_file_zip64.c \\\n\tlibarchive/test/test_write_format_zip_large.c \\\n\tlibarchive/test/test_write_format_zip_stream.c \\\n\tlibarchive/test/test_write_format_zip_windows_path.c \\\n\tlibarchive/test/test_write_format_zip_zip64.c \\\n\tlibarchive/test/test_write_open_memory.c \\\n\tlibarchive/test/test_write_read_format_zip.c \\\n\tlibarchive/test/test_xattr_platform.c \\\n\tlibarchive/test/test_zip_filename_encoding.c\n\nlibarchive_test_CPPFLAGS= \\\n\t-I$(top_srcdir)/libarchive \\\n\t-I$(top_srcdir)/libarchive/test \\\n\t-I$(top_srcdir)/test_utils \\\n\t-I$(top_builddir)/libarchive/test \\\n\t-DLIBARCHIVE_STATIC $(PLATFORMCPPFLAGS)\n\nlibarchive_test_LDADD= $(LTLIBICONV)\n\n# The \"list.h\" file just lists all of the tests defined in all of the sources.\n# Building it automatically provides a sanity-check on libarchive_test_SOURCES\n# above.\nlibarchive/test/list.h: Makefile\n\t$(MKDIR_P) libarchive/test\n\tcat $(top_srcdir)/libarchive/test/test_*.c | grep '^DEFINE_TEST' > libarchive/test/list.h\n\nlibarchive_TESTS_ENVIRONMENT= LIBARCHIVE_TEST_FILES=`cd $(top_srcdir);/bin/pwd`/libarchive/test LRZIP=NOCONFIG\n\nlibarchive_test_EXTRA_DIST=\\\n\tlibarchive/test/list.h \\\n\tlibarchive/test/test_acl_pax_posix1e.tar.uu \\\n\tlibarchive/test/test_acl_pax_nfs4.tar.uu \\\n\tlibarchive/test/test_archive_string_conversion.txt.Z.uu \\\n\tlibarchive/test/test_compat_bzip2_1.tbz.uu \\\n\tlibarchive/test/test_compat_bzip2_2.tbz.uu \\\n\tlibarchive/test/test_compat_cpio_1.cpio.uu \\\n\tlibarchive/test/test_compat_gtar_1.tar.uu \\\n\tlibarchive/test/test_compat_gtar_2.tar.uu \\\n\tlibarchive/test/test_compat_gzip_1.tgz.uu \\\n\tlibarchive/test/test_compat_gzip_2.tgz.uu \\\n\tlibarchive/test/test_compat_lz4_1.tar.lz4.uu \\\n\tlibarchive/test/test_compat_lz4_2.tar.lz4.uu \\\n\tlibarchive/test/test_compat_lz4_3.tar.lz4.uu \\\n\tlibarchive/test/test_compat_lz4_B4.tar.lz4.uu \\\n\tlibarchive/test/test_compat_lz4_B4BD.tar.lz4.uu \\\n\tlibarchive/test/test_compat_lz4_B4BDBX.tar.lz4.uu \\\n\tlibarchive/test/test_compat_lz4_B5.tar.lz4.uu \\\n\tlibarchive/test/test_compat_lz4_B5BD.tar.lz4.uu \\\n\tlibarchive/test/test_compat_lz4_B6.tar.lz4.uu \\\n\tlibarchive/test/test_compat_lz4_B6BD.tar.lz4.uu \\\n\tlibarchive/test/test_compat_lz4_B7.tar.lz4.uu \\\n\tlibarchive/test/test_compat_lz4_B7BD.tar.lz4.uu \\\n\tlibarchive/test/test_compat_lzip_1.tlz.uu \\\n\tlibarchive/test/test_compat_lzip_2.tlz.uu \\\n\tlibarchive/test/test_compat_lzip_3.lz.uu \\\n\tlibarchive/test/test_compat_lzip_4.tlz.uu \\\n\tlibarchive/test/test_compat_lzma_1.tlz.uu \\\n\tlibarchive/test/test_compat_lzma_2.tlz.uu \\\n\tlibarchive/test/test_compat_lzma_3.tlz.uu \\\n\tlibarchive/test/test_compat_lzop_1.tar.lzo.uu \\\n\tlibarchive/test/test_compat_lzop_2.tar.lzo.uu \\\n\tlibarchive/test/test_compat_lzop_3.tar.lzo.uu \\\n\tlibarchive/test/test_compat_mac-1.tar.Z.uu \\\n\tlibarchive/test/test_compat_mac-2.tar.Z.uu \\\n\tlibarchive/test/test_compat_perl_archive_tar.tar.uu \\\n\tlibarchive/test/test_compat_plexus_archiver_tar.tar.uu \\\n\tlibarchive/test/test_compat_solaris_pax_sparse_1.pax.Z.uu \\\n\tlibarchive/test/test_compat_solaris_pax_sparse_2.pax.Z.uu \\\n\tlibarchive/test/test_compat_solaris_tar_acl.tar.uu \\\n\tlibarchive/test/test_compat_star_acl_nfs4.tar.uu \\\n\tlibarchive/test/test_compat_star_acl_posix1e.tar.uu \\\n\tlibarchive/test/test_compat_tar_directory_1.tar.uu \\\n\tlibarchive/test/test_compat_tar_hardlink_1.tar.uu \\\n\tlibarchive/test/test_compat_uudecode_large.tar.Z.uu \\\n\tlibarchive/test/test_compat_xz_1.txz.uu \\\n\tlibarchive/test/test_compat_zip_1.zip.uu \\\n\tlibarchive/test/test_compat_zip_2.zip.uu \\\n\tlibarchive/test/test_compat_zip_3.zip.uu \\\n\tlibarchive/test/test_compat_zip_4.zip.uu \\\n\tlibarchive/test/test_compat_zip_5.zip.uu \\\n\tlibarchive/test/test_compat_zip_6.zip.uu \\\n\tlibarchive/test/test_compat_zip_7.xps.uu \\\n\tlibarchive/test/test_compat_zip_8.zip.uu \\\n\tlibarchive/test/test_compat_zstd_1.tar.zst.uu \\\n\tlibarchive/test/test_compat_zstd_2.tar.zst.uu \\\n\tlibarchive/test/test_fuzz.cab.uu \\\n\tlibarchive/test/test_fuzz.lzh.uu \\\n\tlibarchive/test/test_fuzz_1.iso.Z.uu \\\n\tlibarchive/test/test_pax_filename_encoding.tar.uu \\\n\tlibarchive/test/test_pax_xattr_header_all.tar.uu \\\n\tlibarchive/test/test_pax_xattr_header_libarchive.tar.uu \\\n\tlibarchive/test/test_pax_xattr_header_schily.tar.uu \\\n\tlibarchive/test/test_rar_multivolume_multiple_files.part1.rar.uu \\\n\tlibarchive/test/test_rar_multivolume_multiple_files.part2.rar.uu \\\n\tlibarchive/test/test_rar_multivolume_multiple_files.part3.rar.uu \\\n\tlibarchive/test/test_rar_multivolume_multiple_files.part4.rar.uu \\\n\tlibarchive/test/test_rar_multivolume_multiple_files.part5.rar.uu \\\n\tlibarchive/test/test_rar_multivolume_multiple_files.part6.rar.uu \\\n\tlibarchive/test/test_rar_multivolume_single_file.part1.rar.uu \\\n\tlibarchive/test/test_rar_multivolume_single_file.part2.rar.uu \\\n\tlibarchive/test/test_rar_multivolume_single_file.part3.rar.uu \\\n\tlibarchive/test/test_rar_multivolume_uncompressed_files.part01.rar.uu \\\n\tlibarchive/test/test_rar_multivolume_uncompressed_files.part02.rar.uu \\\n\tlibarchive/test/test_rar_multivolume_uncompressed_files.part03.rar.uu \\\n\tlibarchive/test/test_rar_multivolume_uncompressed_files.part04.rar.uu \\\n\tlibarchive/test/test_rar_multivolume_uncompressed_files.part05.rar.uu \\\n\tlibarchive/test/test_rar_multivolume_uncompressed_files.part06.rar.uu \\\n\tlibarchive/test/test_rar_multivolume_uncompressed_files.part07.rar.uu \\\n\tlibarchive/test/test_rar_multivolume_uncompressed_files.part08.rar.uu \\\n\tlibarchive/test/test_rar_multivolume_uncompressed_files.part09.rar.uu \\\n\tlibarchive/test/test_rar_multivolume_uncompressed_files.part10.rar.uu \\\n\tlibarchive/test/test_read_filter_grzip.tar.grz.uu \\\n\tlibarchive/test/test_read_filter_gzip_recursive.gz.uu \\\n\tlibarchive/test/test_read_filter_lrzip.tar.lrz.uu \\\n\tlibarchive/test/test_read_filter_lzop.tar.lzo.uu \\\n\tlibarchive/test/test_read_filter_lzop_multiple_parts.tar.lzo.uu \\\n\tlibarchive/test/test_read_filter_uudecode_raw.uu \\\n\tlibarchive/test/test_read_filter_uudecode_base64_raw.uu \\\n\tlibarchive/test/test_read_format_mtree_crash747.mtree.bz2.uu \\\n\tlibarchive/test/test_read_format_mtree_noprint.mtree.uu \\\n\tlibarchive/test/test_read_format_7zip_bcj2_bzip2.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_bcj2_copy_1.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_bcj2_copy_2.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_bcj2_copy_lzma.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_bcj2_deflate.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_bcj2_lzma1_1.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_bcj2_lzma1_2.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_bcj2_lzma2_1.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_bcj2_lzma2_2.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_bcj_bzip2.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_bcj_copy.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_bcj_deflate.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_bcj_lzma1.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_bcj_lzma2.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_bzip2.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_copy.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_copy_2.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_deflate.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_deflate_arm64.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_deflate_powerpc.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_delta_lzma1.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_delta4_lzma1.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_delta_lzma2.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_delta4_lzma2.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_empty_archive.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_empty_file.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_encryption.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_encryption_header.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_encryption_partially.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_extract_second.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_lzma1.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_lzma1_2.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_lzma1_lzma2.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_lzma2.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_lzma2_arm64.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_lzma2_arm.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_lzma2_riscv.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_lzma2_sparc.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_malformed.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_malformed2.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_packinfo_digests.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_ppmd.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_solid_zstd.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_symbolic_name.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_win_attrib.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_zstd_arm.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_zstd_bcj.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_zstd_nobcj.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_zstd_sparc.7z.uu \\\n\tlibarchive/test/test_read_format_7zip_zstd.7z.uu \\\n\tlibarchive/test/test_read_format_ar.ar.uu \\\n\tlibarchive/test/test_read_format_cab_1.cab.uu \\\n\tlibarchive/test/test_read_format_cab_2.cab.uu \\\n\tlibarchive/test/test_read_format_cab_3.cab.uu \\\n\tlibarchive/test/test_read_format_cab_filename_cp932.cab.uu \\\n\tlibarchive/test/test_read_format_cpio_bin_be.cpio.uu \\\n\tlibarchive/test/test_read_format_cpio_bin_le.cpio.uu \\\n\tlibarchive/test/test_read_format_cpio_filename_cp866.cpio.uu \\\n\tlibarchive/test/test_read_format_cpio_filename_eucjp.cpio.uu \\\n\tlibarchive/test/test_read_format_cpio_filename_koi8r.cpio.uu \\\n\tlibarchive/test/test_read_format_cpio_filename_utf8_jp.cpio.uu \\\n\tlibarchive/test/test_read_format_cpio_filename_utf8_ru.cpio.uu \\\n\tlibarchive/test/test_read_format_cpio_svr4_bzip2_rpm.rpm.uu \\\n\tlibarchive/test/test_read_format_cpio_svr4_gzip_rpm.rpm.uu \\\n\tlibarchive/test/test_read_format_gtar_filename_cp866.tar.Z.uu \\\n\tlibarchive/test/test_read_format_gtar_filename_eucjp.tar.Z.uu \\\n\tlibarchive/test/test_read_format_gtar_filename_koi8r.tar.Z.uu \\\n\tlibarchive/test/test_read_format_gtar_sparse_1_13.tar.uu \\\n\tlibarchive/test/test_read_format_gtar_sparse_1_17.tar.uu \\\n\tlibarchive/test/test_read_format_gtar_sparse_1_17_posix00.tar.uu \\\n\tlibarchive/test/test_read_format_gtar_sparse_1_17_posix01.tar.uu \\\n\tlibarchive/test/test_read_format_gtar_sparse_1_17_posix10.tar.uu \\\n\tlibarchive/test/test_read_format_gtar_sparse_1_17_posix10_modified.tar.uu \\\n\tlibarchive/test/test_read_format_gtar_sparse_skip_entry.tar.Z.uu \\\n\tlibarchive/test/test_read_format_huge_rpm.rpm.uu \\\n\tlibarchive/test/test_read_format_iso.iso.Z.uu \\\n\tlibarchive/test/test_read_format_iso_2.iso.Z.uu \\\n\tlibarchive/test/test_read_format_iso_3.iso.Z.uu \\\n\tlibarchive/test/test_read_format_iso_joliet.iso.Z.uu \\\n\tlibarchive/test/test_read_format_iso_joliet_by_nero.iso.Z.uu \\\n\tlibarchive/test/test_read_format_iso_joliet_long.iso.Z.uu \\\n\tlibarchive/test/test_read_format_iso_joliet_rockridge.iso.Z.uu \\\n\tlibarchive/test/test_read_format_iso_multi_extent.iso.Z.uu \\\n\tlibarchive/test/test_read_format_iso_rockridge.iso.Z.uu \\\n\tlibarchive/test/test_read_format_iso_rockridge_ce.iso.Z.uu \\\n\tlibarchive/test/test_read_format_iso_rockridge_new.iso.Z.uu \\\n\tlibarchive/test/test_read_format_iso_rockridge_rr_moved.iso.Z.uu \\\n\tlibarchive/test/test_read_format_iso_xorriso.iso.Z.uu \\\n\tlibarchive/test/test_read_format_iso_zisofs.iso.Z.uu \\\n\tlibarchive/test/test_read_format_lha_bugfix_0.lzh.uu \\\n\tlibarchive/test/test_read_format_lha_filename_cp932.lzh.uu \\\n\tlibarchive/test/test_read_format_lha_filename_utf16.lzh.uu \\\n\tlibarchive/test/test_read_format_lha_header0.lzh.uu \\\n\tlibarchive/test/test_read_format_lha_header1.lzh.uu \\\n\tlibarchive/test/test_read_format_lha_header2.lzh.uu \\\n\tlibarchive/test/test_read_format_lha_header3.lzh.uu \\\n\tlibarchive/test/test_read_format_lha_lh0.lzh.uu \\\n\tlibarchive/test/test_read_format_lha_lh6.lzh.uu \\\n\tlibarchive/test/test_read_format_lha_lh7.lzh.uu \\\n\tlibarchive/test/test_read_format_lha_withjunk.lzh.uu \\\n\tlibarchive/test/test_read_format_mtree.mtree.uu \\\n\tlibarchive/test/test_read_format_mtree_nomagic.mtree.uu \\\n\tlibarchive/test/test_read_format_mtree_nomagic2.mtree.uu \\\n\tlibarchive/test/test_read_format_mtree_nomagic3.mtree.uu \\\n\tlibarchive/test/test_read_format_rar.rar.uu \\\n\tlibarchive/test/test_read_format_rar_binary_data.rar.uu \\\n\tlibarchive/test/test_read_format_rar_compress_best.rar.uu \\\n\tlibarchive/test/test_read_format_rar_compress_normal.rar.uu \\\n\tlibarchive/test/test_read_format_rar_encryption_data.rar.uu \\\n\tlibarchive/test/test_read_format_rar_encryption_header.rar.uu \\\n\tlibarchive/test/test_read_format_rar_encryption_partially.rar.uu \\\n\tlibarchive/test/test_read_format_rar_filter.rar.uu \\\n\tlibarchive/test/test_read_format_rar_invalid1.rar.uu \\\n\tlibarchive/test/test_read_format_rar_multi_lzss_blocks.rar.uu \\\n\tlibarchive/test/test_read_format_rar_multivolume.part0001.rar.uu \\\n\tlibarchive/test/test_read_format_rar_multivolume.part0002.rar.uu \\\n\tlibarchive/test/test_read_format_rar_multivolume.part0003.rar.uu \\\n\tlibarchive/test/test_read_format_rar_multivolume.part0004.rar.uu \\\n\tlibarchive/test/test_read_format_rar_noeof.rar.uu \\\n\tlibarchive/test/test_read_format_rar_ppmd_lzss_conversion.rar.uu \\\n\tlibarchive/test/test_read_format_rar_ppmd_use_after_free.rar.uu \\\n\tlibarchive/test/test_read_format_rar_ppmd_use_after_free2.rar.uu \\\n\tlibarchive/test/test_read_format_rar_sfx.exe.uu \\\n\tlibarchive/test/test_read_format_rar_subblock.rar.uu \\\n\tlibarchive/test/test_read_format_rar_unicode.rar.uu \\\n\tlibarchive/test/test_read_format_rar_windows.rar.uu \\\n\tlibarchive/test/test_read_format_rar4_encrypted.rar.uu \\\n\tlibarchive/test/test_read_format_rar4_encrypted_filenames.rar.uu \\\n\tlibarchive/test/test_read_format_rar4_solid_encrypted.rar.uu \\\n\tlibarchive/test/test_read_format_rar4_solid_encrypted_filenames.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_encrypted.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_encrypted_filenames.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_solid_encrypted.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_solid_encrypted_filenames.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_arm.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_blake2.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_compressed.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_different_window_size.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_different_solid_window_size.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_distance_overflow.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_extra_field_version.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_fileattr.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_hardlink.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_invalid_dict_reference.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_leftshift1.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_leftshift2.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_multiarchive.part01.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_multiarchive.part02.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_multiarchive.part03.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_multiarchive.part04.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_multiarchive.part05.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_multiarchive.part06.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_multiarchive.part07.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_multiarchive.part08.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_multiarchive_solid.part01.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_multiarchive_solid.part02.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_multiarchive_solid.part03.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_multiarchive_solid.part04.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_multiple_files.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_multiple_files_solid.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_nonempty_dir_stream.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_owner.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_readtables_overflow.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_sfx.exe.uu \\\n\tlibarchive/test/test_read_format_rar5_solid.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_stored.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_stored_manyfiles.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_symlink.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_truncated_huff.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_win32.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_arm_filter_on_window_boundary.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_different_winsize_on_merge.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_block_size_is_too_small.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_decode_number_out_of_bounds_read.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_window_buf_and_size_desync.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_bad_window_sz_in_mltarc_file.rar.uu \\\n\tlibarchive/test/test_read_format_rar5_data_ready_pointer_leak.rar.uu \\\n\tlibarchive/test/test_read_format_raw.bufr.uu \\\n\tlibarchive/test/test_read_format_raw.data.gz.uu \\\n\tlibarchive/test/test_read_format_raw.data.Z.uu \\\n\tlibarchive/test/test_read_format_raw.data.uu \\\n\tlibarchive/test/test_read_format_tar_concatenated.tar.uu \\\n\tlibarchive/test/test_read_format_tar_empty_filename.tar.uu \\\n\tlibarchive/test/test_read_format_tar_empty_with_gnulabel.tar.uu \\\n\tlibarchive/test/test_read_format_tar_empty_pax.tar.Z.uu \\\n\tlibarchive/test/test_read_format_tar_filename_koi8r.tar.Z.uu \\\n\tlibarchive/test/test_read_format_tar_invalid_pax_size.tar.uu \\\n\tlibarchive/test/test_read_format_tar_pax_large_attr.tar.Z.uu \\\n\tlibarchive/test/test_read_format_ustar_filename_cp866.tar.Z.uu \\\n\tlibarchive/test/test_read_format_ustar_filename_eucjp.tar.Z.uu \\\n\tlibarchive/test/test_read_format_ustar_filename_koi8r.tar.Z.uu \\\n\tlibarchive/test/test_read_format_warc.warc.uu \\\n\tlibarchive/test/test_read_format_xar_doublelink.xar.uu \\\n\tlibarchive/test/test_read_format_xar_duplicate_filename_node.xar.uu \\\n\tlibarchive/test/test_read_format_zip.zip.uu \\\n\tlibarchive/test/test_read_format_zip_7075_utf8_paths.zip.uu \\\n\tlibarchive/test/test_read_format_zip_7z_deflate.zip.uu \\\n\tlibarchive/test/test_read_format_zip_7z_lzma.zip.uu \\\n\tlibarchive/test/test_read_format_zip_bz2_hang.zip.uu \\\n\tlibarchive/test/test_read_format_zip_bzip2.zipx.uu \\\n\tlibarchive/test/test_read_format_zip_bzip2_multi.zipx.uu \\\n\tlibarchive/test/test_read_format_zip_comment_stored_1.zip.uu \\\n\tlibarchive/test/test_read_format_zip_comment_stored_2.zip.uu \\\n\tlibarchive/test/test_read_format_zip_encryption_data.zip.uu \\\n\tlibarchive/test/test_read_format_zip_encryption_header.zip.uu \\\n\tlibarchive/test/test_read_format_zip_encryption_partially.zip.uu \\\n\tlibarchive/test/test_read_format_zip_extra_padding.zip.uu \\\n\tlibarchive/test/test_read_format_zip_filename_cp866.zip.uu \\\n\tlibarchive/test/test_read_format_zip_filename_cp932.zip.uu \\\n\tlibarchive/test/test_read_format_zip_filename_koi8r.zip.uu \\\n\tlibarchive/test/test_read_format_zip_filename_utf8_jp.zip.uu \\\n\tlibarchive/test/test_read_format_zip_filename_utf8_ru.zip.uu \\\n\tlibarchive/test/test_read_format_zip_filename_utf8_ru2.zip.uu \\\n\tlibarchive/test/test_read_format_zip_high_compression.zip.uu \\\n\tlibarchive/test/test_read_format_zip_length_at_end.zip.uu \\\n\tlibarchive/test/test_read_format_zip_lzma.zipx.uu \\\n\tlibarchive/test/test_read_format_zip_lzma_alone_leak.zipx.uu \\\n\tlibarchive/test/test_read_format_zip_lzma_multi.zipx.uu \\\n\tlibarchive/test/test_read_format_zip_lzma_stream_end.zipx.uu \\\n\tlibarchive/test/test_read_format_zip_jar.jar.uu \\\n\tlibarchive/test/test_read_format_zip_mac_metadata.zip.uu \\\n\tlibarchive/test/test_read_format_zip_malformed1.zip.uu \\\n\tlibarchive/test/test_read_format_zip_msdos.zip.uu \\\n\tlibarchive/test/test_read_format_zip_nested.zip.uu \\\n\tlibarchive/test/test_read_format_zip_nofiletype.zip.uu \\\n\tlibarchive/test/test_read_format_zip_padded1.zip.uu \\\n\tlibarchive/test/test_read_format_zip_padded2.zip.uu \\\n\tlibarchive/test/test_read_format_zip_padded3.zip.uu \\\n\tlibarchive/test/test_read_format_zip_ppmd8.zipx.uu \\\n\tlibarchive/test/test_read_format_zip_ppmd8_crash_1.zipx.uu \\\n\tlibarchive/test/test_read_format_zip_ppmd8_crash_2.zipx.uu \\\n\tlibarchive/test/test_read_format_zip_ppmd8_multi.zipx.uu \\\n\tlibarchive/test/test_read_format_zip_sfx.uu \\\n\tlibarchive/test/test_read_format_zip_symlink.zip.uu \\\n\tlibarchive/test/test_read_format_zip_traditional_encryption_data.zip.uu \\\n\tlibarchive/test/test_read_format_zip_ux.zip.uu \\\n\tlibarchive/test/test_read_format_zip_winzip_aes128.zip.uu \\\n\tlibarchive/test/test_read_format_zip_winzip_aes256.zip.uu \\\n\tlibarchive/test/test_read_format_zip_winzip_aes256_large.zip.uu \\\n\tlibarchive/test/test_read_format_zip_winzip_aes256_stored.zip.uu \\\n\tlibarchive/test/test_read_format_zip_with_invalid_traditional_eocd.zip.uu \\\n\tlibarchive/test/test_read_format_zip_xz_multi.zipx.uu \\\n\tlibarchive/test/test_read_format_zip_zip64a.zip.uu \\\n\tlibarchive/test/test_read_format_zip_zip64b.zip.uu \\\n\tlibarchive/test/test_read_format_zip_zstd.zipx.uu \\\n\tlibarchive/test/test_read_format_zip_zstd_multi.zipx.uu \\\n\tlibarchive/test/test_read_large_splitted_rar_aa.uu \\\n\tlibarchive/test/test_read_large_splitted_rar_ab.uu \\\n\tlibarchive/test/test_read_large_splitted_rar_ac.uu \\\n\tlibarchive/test/test_read_large_splitted_rar_ad.uu \\\n\tlibarchive/test/test_read_large_splitted_rar_ae.uu \\\n\tlibarchive/test/test_read_pax_xattr_rht_security_selinux.tar.uu \\\n\tlibarchive/test/test_read_pax_xattr_schily.tar.uu \\\n\tlibarchive/test/test_read_splitted_rar_aa.uu \\\n\tlibarchive/test/test_read_splitted_rar_ab.uu \\\n\tlibarchive/test/test_read_splitted_rar_ac.uu \\\n\tlibarchive/test/test_read_splitted_rar_ad.uu \\\n\tlibarchive/test/test_read_too_many_filters.gz.uu \\\n\tlibarchive/test/test_splitted_rar_seek_support_aa.uu \\\n\tlibarchive/test/test_splitted_rar_seek_support_ab.uu \\\n\tlibarchive/test/test_splitted_rar_seek_support_ac.uu \\\n\tlibarchive/test/test_write_disk_appledouble.cpio.gz.uu \\\n\tlibarchive/test/test_write_disk_hfs_compression.tgz.uu \\\n\tlibarchive/test/test_write_disk_mac_metadata.tar.gz.uu \\\n\tlibarchive/test/test_write_disk_no_hfs_compression.tgz.uu \\\n\tlibarchive/test/CMakeLists.txt \\\n\tlibarchive/test/README\n\n#\n# Common code for libarchive frontends (cpio, tar)\n#\nlibarchive_fe_la_SOURCES= \\\n\tlibarchive_fe/err.c \\\n\tlibarchive_fe/err.h \\\n\tlibarchive_fe/lafe_platform.h \\\n\tlibarchive_fe/line_reader.c \\\n\tlibarchive_fe/line_reader.h \\\n\tlibarchive_fe/passphrase.c \\\n\tlibarchive_fe/passphrase.h\n\nlibarchive_fe_la_CPPFLAGS= -I$(top_srcdir)/libarchive\n#\n#\n# bsdtar source, docs, etc.\n#\n#\n\nbsdtar_SOURCES= \\\n\t\ttar/bsdtar.c \\\n\t\ttar/bsdtar.h \\\n\t\ttar/bsdtar_platform.h \\\n\t\ttar/cmdline.c \\\n\t\ttar/creation_set.c \\\n\t\ttar/read.c \\\n\t\ttar/subst.c \\\n\t\ttar/util.c \\\n\t\ttar/write.c\n\nif INC_WINDOWS_FILES\nbsdtar_SOURCES+= \\\n\t\ttar/bsdtar_windows.h \\\n\t\ttar/bsdtar_windows.c\nendif\n\nbsdtar_DEPENDENCIES= libarchive.la libarchive_fe.la\n\nif STATIC_BSDTAR\nbsdtar_ldstatic= -static\nbsdtar_ccstatic= -DLIBARCHIVE_STATIC\nelse\nbsdtar_ldstatic=\nbsdtar_ccstatic=\nendif\n\nbsdtar_LDADD= libarchive.la libarchive_fe.la $(LTLIBICONV)\nbsdtar_CPPFLAGS= -I$(top_srcdir)/libarchive -I$(top_srcdir)/libarchive_fe $(bsdtar_ccstatic) $(PLATFORMCPPFLAGS)\nbsdtar_LDFLAGS= $(bsdtar_ldstatic) $(DEAD_CODE_REMOVAL)\n\nbsdtar_EXTRA_DIST= \\\n\ttar/bsdtar.1 \\\n\ttar/bsdtar_windows.h \\\n\ttar/bsdtar_windows.c \\\n\ttar/CMakeLists.txt \\\n\ttar/config_freebsd.h\n\n\nif BUILD_BSDTAR\nbsdtar_man_MANS= tar/bsdtar.1\nbsdtar_programs= bsdtar\nelse\nbsdtar_man_MANS=\nbsdtar_programs=\nendif\n\n#\n# bsdtar_test\n#\n\nbsdtar_test_SOURCES= \\\n\t$(test_utils_SOURCES) \\\n\ttar/test/test.h \\\n\ttar/test/test_0.c \\\n\ttar/test/test_basic.c \\\n\ttar/test/test_copy.c \\\n\ttar/test/test_empty_mtree.c \\\n\ttar/test/test_extract_tar_Z.c \\\n\ttar/test/test_extract_tar_bz2.c \\\n\ttar/test/test_extract_tar_grz.c \\\n\ttar/test/test_extract_tar_gz.c \\\n\ttar/test/test_extract_tar_lrz.c \\\n\ttar/test/test_extract_tar_lz.c \\\n\ttar/test/test_extract_tar_lz4.c \\\n\ttar/test/test_extract_tar_lzma.c \\\n\ttar/test/test_extract_tar_lzo.c \\\n\ttar/test/test_extract_tar_xz.c \\\n\ttar/test/test_extract_tar_zstd.c \\\n\ttar/test/test_format_newc.c \\\n\ttar/test/test_help.c \\\n\ttar/test/test_leading_slash.c \\\n\ttar/test/test_list_item.c \\\n\ttar/test/test_missing_file.c \\\n\ttar/test/test_option_C_mtree.c \\\n\ttar/test/test_option_C_upper.c \\\n\ttar/test/test_option_H_upper.c \\\n\ttar/test/test_option_L_upper.c \\\n\ttar/test/test_option_O_upper.c \\\n\ttar/test/test_option_P_upper.c \\\n\ttar/test/test_option_T_upper.c \\\n\ttar/test/test_option_U_upper.c \\\n\ttar/test/test_option_X_upper.c \\\n\ttar/test/test_option_acls.c \\\n\ttar/test/test_option_a.c \\\n\ttar/test/test_option_b.c \\\n\ttar/test/test_option_b64encode.c \\\n\ttar/test/test_option_exclude.c \\\n\ttar/test/test_option_exclude_vcs.c \\\n\ttar/test/test_option_fflags.c \\\n\ttar/test/test_option_gid_gname.c \\\n\ttar/test/test_option_group.c \\\n\ttar/test/test_option_grzip.c \\\n\ttar/test/test_option_ignore_zeros.c \\\n\ttar/test/test_option_j.c \\\n\ttar/test/test_option_k.c \\\n\ttar/test/test_option_keep_newer_files.c \\\n\ttar/test/test_option_lrzip.c \\\n\ttar/test/test_option_lz4.c \\\n\ttar/test/test_option_lzma.c \\\n\ttar/test/test_option_lzop.c \\\n\ttar/test/test_option_n.c \\\n\ttar/test/test_option_newer_than.c \\\n\ttar/test/test_option_nodump.c \\\n\ttar/test/test_option_older_than.c \\\n\ttar/test/test_option_owner.c \\\n\ttar/test/test_option_passphrase.c \\\n\ttar/test/test_option_q.c \\\n\ttar/test/test_option_r.c \\\n\ttar/test/test_option_s.c \\\n\ttar/test/test_option_safe_writes.c \\\n\ttar/test/test_option_uid_uname.c \\\n\ttar/test/test_option_uuencode.c \\\n\ttar/test/test_option_xattrs.c \\\n\ttar/test/test_option_xz.c \\\n\ttar/test/test_option_z.c \\\n\ttar/test/test_option_zstd.c \\\n\ttar/test/test_patterns.c \\\n\ttar/test/test_print_longpath.c \\\n\ttar/test/test_stdio.c \\\n\ttar/test/test_strip_components.c \\\n\ttar/test/test_symlink_dir.c \\\n\ttar/test/test_version.c \\\n\ttar/test/test_windows.c\n\nbsdtar_test_CPPFLAGS=\\\n\t-I$(top_srcdir)/libarchive -I$(top_srcdir)/libarchive_fe \\\n\t-I$(top_srcdir)/test_utils \\\n\t-I$(top_srcdir)/tar -I$(top_srcdir)/tar/test \\\n\t-I$(top_builddir)/tar/test \\\n\t$(PLATFORMCPPFLAGS)\n\ntar/test/list.h: Makefile\n\t$(MKDIR_P) tar/test\n\tcat $(top_srcdir)/tar/test/test_*.c | grep '^DEFINE_TEST' > tar/test/list.h\n\nif BUILD_BSDTAR\nbsdtar_test_programs= bsdtar_test\nbsdtar_TESTS_ENVIRONMENT= BSDTAR=`cd $(top_builddir);/bin/pwd`/bsdtar$(EXEEXT) BSDTAR_TEST_FILES=`cd $(top_srcdir);/bin/pwd`/tar/test\nelse\nbsdtar_test_programs=\nbsdtar_TESTS_ENVIRONMENT=\nendif\n\nbsdtar_test_EXTRA_DIST= \\\n\ttar/test/list.h \\\n\ttar/test/test_extract.tar.Z.uu \\\n\ttar/test/test_extract.tar.bz2.uu \\\n\ttar/test/test_extract.tar.grz.uu \\\n\ttar/test/test_extract.tar.gz.uu \\\n\ttar/test/test_extract.tar.lrz.uu \\\n\ttar/test/test_extract.tar.lz.uu \\\n\ttar/test/test_extract.tar.lz4.uu \\\n\ttar/test/test_extract.tar.zst.uu \\\n\ttar/test/test_extract.tar.lzma.uu \\\n\ttar/test/test_extract.tar.lzo.uu \\\n\ttar/test/test_extract.tar.xz.uu \\\n\ttar/test/test_leading_slash.tar.uu \\\n\ttar/test/test_list_item.tar.uu \\\n\ttar/test/test_option_keep_newer_files.tar.Z.uu \\\n\ttar/test/test_option_passphrase.zip.uu \\\n\ttar/test/test_option_s.tar.Z.uu \\\n\ttar/test/test_patterns_2.tar.uu \\\n\ttar/test/test_patterns_3.tar.uu \\\n\ttar/test/test_patterns_4.tar.uu \\\n\ttar/test/test_print_longpath.tar.Z.uu \\\n\ttar/test/CMakeLists.txt\n\n\n#\n#\n# bsdcpio source, docs, etc.\n#\n#\n\nbsdcpio_SOURCES= \\\n\t\tcpio/cmdline.c \\\n\t\tcpio/cpio.c \\\n\t\tcpio/cpio.h \\\n\t\tcpio/cpio_platform.h\n\nif INC_WINDOWS_FILES\nbsdcpio_SOURCES+= \\\n\t\tcpio/cpio_windows.h \\\n\t\tcpio/cpio_windows.c\nendif\n\nbsdcpio_DEPENDENCIES = libarchive.la libarchive_fe.la\n\n\nif STATIC_BSDCPIO\nbsdcpio_ldstatic= -static\nbsdcpio_ccstatic= -DLIBARCHIVE_STATIC\nelse\nbsdcpio_ldstatic=\nbsdcpio_ccstatic=\nendif\n\nbsdcpio_LDADD= libarchive_fe.la libarchive.la $(LTLIBICONV)\nbsdcpio_CPPFLAGS= -I$(top_srcdir)/libarchive -I$(top_srcdir)/libarchive_fe $(bsdcpio_ccstatic) $(PLATFORMCPPFLAGS)\nbsdcpio_LDFLAGS= $(bsdcpio_ldstatic) $(DEAD_CODE_REMOVAL)\n\nbsdcpio_EXTRA_DIST= \\\n\tcpio/bsdcpio.1 \\\n\tcpio/cpio_windows.h \\\n\tcpio/cpio_windows.c \\\n\tcpio/CMakeLists.txt \\\n\tcpio/config_freebsd.h\n\n\nif BUILD_BSDCPIO\n# Manpages to install\nbsdcpio_man_MANS= cpio/bsdcpio.1\nbsdcpio_programs= bsdcpio\nelse\nbsdcpio_man_MANS=\nbsdcpio_programs=\nendif\n\n#\n# bsdcpio_test\n#\n\nbsdcpio_test_SOURCES= \\\n\t$(test_utils_SOURCES) \\\n\tcpio/cmdline.c \\\n\tcpio/test/test.h \\\n\tcpio/test/test_0.c \\\n\tcpio/test/test_basic.c \\\n\tcpio/test/test_cmdline.c \\\n\tcpio/test/test_extract_cpio_Z.c \\\n\tcpio/test/test_extract_cpio_absolute_paths.c \\\n\tcpio/test/test_extract_cpio_bz2.c \\\n\tcpio/test/test_extract_cpio_grz.c \\\n\tcpio/test/test_extract_cpio_gz.c \\\n\tcpio/test/test_extract_cpio_lrz.c \\\n\tcpio/test/test_extract_cpio_lz.c \\\n\tcpio/test/test_extract_cpio_lz4.c \\\n\tcpio/test/test_extract_cpio_lzma.c \\\n\tcpio/test/test_extract_cpio_lzo.c \\\n\tcpio/test/test_extract_cpio_xz.c \\\n\tcpio/test/test_extract_cpio_zstd.c \\\n\tcpio/test/test_format_newc.c \\\n\tcpio/test/test_gcpio_compat.c \\\n\tcpio/test/test_missing_file.c \\\n\tcpio/test/test_option_0.c \\\n\tcpio/test/test_option_B_upper.c \\\n\tcpio/test/test_option_C_upper.c \\\n\tcpio/test/test_option_J_upper.c \\\n\tcpio/test/test_option_L_upper.c \\\n\tcpio/test/test_option_Z_upper.c \\\n\tcpio/test/test_option_a.c \\\n\tcpio/test/test_option_b64encode.c \\\n\tcpio/test/test_option_c.c \\\n\tcpio/test/test_option_d.c \\\n\tcpio/test/test_option_f.c \\\n\tcpio/test/test_option_grzip.c \\\n\tcpio/test/test_option_help.c \\\n\tcpio/test/test_option_l.c \\\n\tcpio/test/test_option_lrzip.c \\\n\tcpio/test/test_option_lz4.c \\\n\tcpio/test/test_option_lzma.c \\\n\tcpio/test/test_option_lzop.c \\\n\tcpio/test/test_option_m.c \\\n\tcpio/test/test_option_passphrase.c \\\n\tcpio/test/test_option_t.c \\\n\tcpio/test/test_option_u.c \\\n\tcpio/test/test_option_uuencode.c \\\n\tcpio/test/test_option_version.c \\\n\tcpio/test/test_option_xz.c \\\n\tcpio/test/test_option_y.c \\\n\tcpio/test/test_option_z.c \\\n\tcpio/test/test_option_zstd.c \\\n\tcpio/test/test_owner_parse.c \\\n\tcpio/test/test_passthrough_dotdot.c \\\n\tcpio/test/test_passthrough_reverse.c\n\nbsdcpio_test_CPPFLAGS= \\\n\t-I$(top_srcdir)/libarchive -I$(top_srcdir)/libarchive_fe \\\n\t-I$(top_srcdir)/test_utils \\\n\t-I$(top_srcdir)/cpio -I$(top_srcdir)/cpio/test \\\n\t-I$(top_builddir)/cpio/test \\\n\t$(PLATFORMCPPFLAGS)\nbsdcpio_test_LDADD=libarchive_fe.la\n\ncpio/test/list.h: Makefile\n\t$(MKDIR_P) cpio/test\n\tcat $(top_srcdir)/cpio/test/test_*.c | grep '^DEFINE_TEST' > cpio/test/list.h\n\nif BUILD_BSDCPIO\nbsdcpio_test_programs= bsdcpio_test\nbsdcpio_TESTS_ENVIRONMENT= BSDCPIO=`cd $(top_builddir);/bin/pwd`/bsdcpio$(EXEEXT) BSDCPIO_TEST_FILES=`cd $(top_srcdir);/bin/pwd`/cpio/test\nelse\nbsdcpio_test_programs=\nbsdcpio_TESTS_ENVIRONMENT=\nendif\n\nbsdcpio_test_EXTRA_DIST= \\\n\tcpio/test/list.h \\\n\tcpio/test/test_extract.cpio.Z.uu \\\n\tcpio/test/test_extract.cpio.bz2.uu \\\n\tcpio/test/test_extract.cpio.grz.uu \\\n\tcpio/test/test_extract.cpio.gz.uu \\\n\tcpio/test/test_extract.cpio.lrz.uu \\\n\tcpio/test/test_extract.cpio.lz.uu \\\n\tcpio/test/test_extract.cpio.lz4.uu \\\n\tcpio/test/test_extract.cpio.zst.uu \\\n\tcpio/test/test_extract.cpio.lzma.uu \\\n\tcpio/test/test_extract.cpio.lzo.uu \\\n\tcpio/test/test_extract.cpio.xz.uu \\\n\tcpio/test/test_gcpio_compat_ref.bin.uu \\\n\tcpio/test/test_gcpio_compat_ref.crc.uu \\\n\tcpio/test/test_gcpio_compat_ref.newc.uu \\\n\tcpio/test/test_gcpio_compat_ref.ustar.uu \\\n\tcpio/test/test_gcpio_compat_ref_nosym.bin.uu \\\n\tcpio/test/test_gcpio_compat_ref_nosym.crc.uu \\\n\tcpio/test/test_gcpio_compat_ref_nosym.newc.uu \\\n\tcpio/test/test_gcpio_compat_ref_nosym.ustar.uu \\\n\tcpio/test/test_option_f.cpio.uu \\\n\tcpio/test/test_option_m.cpio.uu \\\n\tcpio/test/test_option_passphrase.zip.uu \\\n\tcpio/test/test_option_t.cpio.uu \\\n\tcpio/test/test_option_t.stdout.uu \\\n\tcpio/test/test_option_tv.stdout.uu \\\n\tcpio/test/CMakeLists.txt\n\n#\n#\n# bsdcat source, docs, etc.\n#\n#\n\nbsdcat_SOURCES= \\\n\t\tcat/bsdcat.c \\\n\t\tcat/bsdcat.h \\\n\t\tcat/bsdcat_platform.h \\\n\t\tcat/cmdline.c\n\nif INC_WINDOWS_FILES\nbsdcat_SOURCES+=\nendif\n\nbsdcat_DEPENDENCIES = libarchive.la libarchive_fe.la\n\n\nif STATIC_BSDCAT\nbsdcat_ldstatic= -static\nbsdcat_ccstatic= -DLIBARCHIVE_STATIC\nelse\nbsdcat_ldstatic=\nbsdcat_ccstatic=\nendif\n\nbsdcat_LDADD= libarchive_fe.la libarchive.la $(LTLIBICONV)\nbsdcat_CPPFLAGS= -I$(top_srcdir)/libarchive -I$(top_srcdir)/libarchive_fe $(bsdcat_ccstatic) $(PLATFORMCPPFLAGS)\nbsdcat_LDFLAGS= $(bsdcat_ldstatic) $(DEAD_CODE_REMOVAL)\n\nbsdcat_EXTRA_DIST= \\\n\tcat/bsdcat.1 \\\n\tcat/CMakeLists.txt\n\n\nif BUILD_BSDCAT\n# Manpages to install\nbsdcat_man_MANS= cat/bsdcat.1\nbsdcat_programs= bsdcat\nelse\nbsdcat_man_MANS=\nbsdcat_programs=\nendif\n\n#\n# bsdcat_test\n#\n\nbsdcat_test_SOURCES= \\\n\t$(test_utils_SOURCES) \\\n\tcat/test/test.h \\\n\tcat/test/test_0.c \\\n\tcat/test/test_empty_gz.c \\\n\tcat/test/test_empty_lz4.c \\\n\tcat/test/test_empty_xz.c \\\n\tcat/test/test_empty_zstd.c \\\n\tcat/test/test_error.c \\\n\tcat/test/test_error_mixed.c \\\n\tcat/test/test_expand_Z.c \\\n\tcat/test/test_expand_bz2.c \\\n\tcat/test/test_expand_gz.c \\\n\tcat/test/test_expand_lz4.c \\\n\tcat/test/test_expand_mixed.c \\\n\tcat/test/test_expand_plain.c \\\n\tcat/test/test_expand_xz.c \\\n\tcat/test/test_expand_zstd.c \\\n\tcat/test/test_help.c \\\n\tcat/test/test_stdin.c \\\n\tcat/test/test_version.c\n\nbsdcat_test_CPPFLAGS= \\\n\t-I$(top_srcdir)/libarchive -I$(top_srcdir)/libarchive_fe \\\n\t-I$(top_srcdir)/test_utils \\\n\t-I$(top_srcdir)/cat -I$(top_srcdir)/cat/test \\\n\t-I$(top_builddir)/cat/test \\\n\t$(PLATFORMCPPFLAGS)\nbsdcat_test_LDADD=libarchive_fe.la\n\ncat/test/list.h: Makefile\n\t$(MKDIR_P) cat/test\n\tcat $(top_srcdir)/cat/test/test_*.c | grep '^DEFINE_TEST' > cat/test/list.h\n\nif BUILD_BSDCAT\nbsdcat_test_programs= bsdcat_test\nbsdcat_TESTS_ENVIRONMENT= BSDCAT=`cd $(top_builddir);/bin/pwd`/bsdcat$(EXEEXT) BSDCAT_TEST_FILES=`cd $(top_srcdir);/bin/pwd`/cat/test\nelse\nbsdcat_test_programs=\nbsdcat_TESTS_ENVIRONMENT=\nendif\n\nbsdcat_test_EXTRA_DIST= \\\n\tcat/test/list.h \\\n\tcat/test/test_empty.gz.uu \\\n\tcat/test/test_empty.lz4.uu \\\n\tcat/test/test_empty.zst.uu \\\n\tcat/test/test_empty.xz.uu \\\n\tcat/test/test_expand.Z.uu \\\n\tcat/test/test_expand.bz2.uu \\\n\tcat/test/test_expand.gz.uu \\\n\tcat/test/test_expand.lz4.uu \\\n\tcat/test/test_expand.zst.uu \\\n\tcat/test/test_expand.plain.uu \\\n\tcat/test/test_expand.xz.uu \\\n\tcat/test/CMakeLists.txt\n\n#\n#\n# bsdunzip source, docs, etc.\n#\n#\n\nbsdunzip_SOURCES= \\\n\t\tunzip/bsdunzip.c \\\n\t\tunzip/bsdunzip.h \\\n\t\tunzip/bsdunzip_platform.h \\\n\t\tunzip/cmdline.c \\\n\t\tunzip/la_getline.c \\\n\t\tunzip/la_getline.h \\\n\t\tunzip/la_queue.h\n\nif INC_WINDOWS_FILES\nbsdunzip_SOURCES+=\nendif\n\nbsdunzip_DEPENDENCIES = libarchive.la libarchive_fe.la\n\n\nif STATIC_BSDUNZIP\nbsdunzip_ldstatic= -static\nbsdunzip_ccstatic= -DLIBARCHIVE_STATIC\nelse\nbsdunzip_ldstatic=\nbsdunzip_ccstatic=\nendif\n\nbsdunzip_LDADD= libarchive_fe.la libarchive.la $(LTLIBICONV)\nbsdunzip_CPPFLAGS= -I$(top_srcdir)/libarchive -I$(top_srcdir)/libarchive_fe $(bsdunzip_ccstatic) $(PLATFORMCPPFLAGS)\nbsdunzip_LDFLAGS= $(bsdunzip_ldstatic) $(DEAD_CODE_REMOVAL)\n\nbsdunzip_EXTRA_DIST= \\\n\tunzip/bsdunzip.1 \\\n\tunzip/CMakeLists.txt\n\n\nif BUILD_BSDUNZIP\n# Manpages to install\nbsdunzip_man_MANS= unzip/bsdunzip.1\nbsdunzip_programs= bsdunzip\nelse\nbsdunzip_man_MANS=\nbsdunzip_programs=\nendif\n\n#\n# bsdunzip_test\n#\n\nbsdunzip_test_SOURCES= \\\n\t$(test_utils_SOURCES) \\\n\tunzip/test/test.h \\\n\tunzip/test/test_0.c \\\n\tunzip/test/test_basic.c \\\n\tunzip/test/test_doubledash.c \\\n\tunzip/test/test_glob.c \\\n\tunzip/test/test_not_exist.c \\\n\tunzip/test/test_singlefile.c \\\n\tunzip/test/test_C.c \\\n\tunzip/test/test_p.c \\\n\tunzip/test/test_d.c \\\n\tunzip/test/test_j.c \\\n\tunzip/test/test_L.c \\\n\tunzip/test/test_n.c \\\n\tunzip/test/test_o.c \\\n\tunzip/test/test_q.c \\\n\tunzip/test/test_t.c \\\n\tunzip/test/test_t_bad.c \\\n\tunzip/test/test_version.c \\\n\tunzip/test/test_x.c \\\n\tunzip/test/test_Z1.c \\\n\tunzip/test/test_P_encryption.c \\\n\tunzip/test/test_I.c\n\nbsdunzip_test_CPPFLAGS= \\\n\t-I$(top_srcdir)/libarchive -I$(top_srcdir)/libarchive_fe \\\n\t-I$(top_srcdir)/test_utils \\\n\t-I$(top_srcdir)/unzip -I$(top_srcdir)/unzip/test \\\n\t-I$(top_builddir)/unzip/test \\\n\t$(PLATFORMCPPFLAGS)\nbsdunzip_test_LDADD=libarchive_fe.la\n\nunzip/test/list.h: Makefile\n\t$(MKDIR_P) unzip/test\n\tcat $(top_srcdir)/unzip/test/test_*.c | grep '^DEFINE_TEST' > unzip/test/list.h\n\nif BUILD_BSDUNZIP\nbsdunzip_test_programs= bsdunzip_test\nbsdunzip_TESTS_ENVIRONMENT= BSDUNZIP=`cd $(top_builddir);/bin/pwd`/bsdunzip$(EXEEXT) BSDUNZIP_TEST_FILES=`cd $(top_srcdir);/bin/pwd`/unzip/test\nelse\nbsdunzip_test_programs=\nbsdunzip_TESTS_ENVIRONMENT=\nendif\n\nbsdunzip_test_EXTRA_DIST= \\\n\tunzip/test/list.h \\\n\tunzip/test/test_basic.zip.uu \\\n\tunzip/test/test_encrypted.zip.uu \\\n\tunzip/test/test_singlefile.zip.uu \\\n\tunzip/test/test_t_bad.zip.uu \\\n\tunzip/test/test_I.zip.uu \\\n\tunzip/test/CMakeLists.txt\n"
        },
        {
          "name": "NEWS",
          "type": "blob",
          "size": 32.2333984375,
          "content": "Sep 13, 2024: libarchive 3.7.5 released\n\nApr 26, 2024: libarchive 3.7.4 released\n\nApr 08, 2024: libarchive 3.7.3 released\n\nSep 12, 2023: libarchive 3.7.2 released\n\nJul 29, 2023: libarchive 3.7.1 released\n\nJul 18, 2023: libarchive 3.7.0 released\n\nJul 14, 2023: bsdunzip port from FreeBSD\n\nDec 07, 2022: libarchive 3.6.2 released\n\nApr 08, 2022: libarchive 3.6.1 released\n\nFeb 09, 2022: libarchive 3.6.0 released\n\nFeb 08, 2022: libarchive 3.5.3 released\n\nAug 22, 2021: libarchive 3.5.2 released\n\nDec 26, 2020: libarchive 3.5.1 released\n\nDec 01, 2020: libarchive 3.5.0 released\n\nOct 14, 2020: Support for system extended attributes\n\nMay 20, 2020: libarchive 3.4.3 released\n\nApr 30, 2020: Support for pzstd compressed files\n\nApr 16, 2020: Support for RHT.security.selinux tar extended attribute\n\nFeb 11, 2020: libarchive 3.4.2 released\n\nJan 23, 2020: Important fixes for writing XAR archives\n\nJan 20, 2020: New tar option: --safe-writes (atomical file extraction)\n\nJan 03, 2020: Support mbed TLS (PolarSSL) as optional crypto provider\n\nDec 30, 2019: libarchive 3.4.1 released\n\nDec 11, 2019: New pax write option \"xattrhdr\"\n\nNov 17, 2019: Unicode filename support for reading lha/lzh archives\n\nJun 11, 2019: libarchive 3.4.0 released\n\nMay 18, 2019: Fixes for reading Android APK and JAR archives\n\nApr 16, 2019: Support for non-recursive list and extract\n\nApr 14, 2019: New tar option: --exclude-vcs\n\nMar 27, 2019: Support for file and directory symlinks on Windows\n\nMar 12, 2019: Important fixes for storing file attributes and flags\n\nJan 20, 2019: Support for xz, lzma, ppmd8 and bzip2 decompression in ZIP files\n\nOct 06, 2018: RAR 5.0 reader\n\nSep 03, 2018: libarchive 3.3.3 released\n\nJul 19, 2018: Avoid super-linear slowdown on malformed mtree files\n\nJan 27, 2018: Many fixes for building with Visual Studio\n\nOct 19, 2017: NO_OVERWRITE doesn't change existing directory attributes\n\nAug 12, 2017: New support for Zstandard read and write filters\n\nJul 09, 2017: libarchive 3.3.2 released\n\nMar 16, 2017: NFSv4 ACL support for Linux (librichacl)\n\nFeb 26, 2017: libarchive 3.3.1 released\n    Security & Feature release\n\nFeb 19, 2017: libarchive 3.3.0 released\n    Security & Feature release\n\nJan 29, 2017: Limited NFSv4 ACL support for Mac OS (Darwin)\n\nJan 10, 2017: POSIX.1e and NFSv4 ACL support for Solaris and derivates\n\nDec 27, 2016: NFSv4 ACL read and write support for pax\n    Deprecated functions: archive_entry_acl_text(), archive_entry_acl_text_w()\n\nNov, 2016: libarchive is now being tested by the OSS-Fuzz project\n\nOct 26, 2016: Remove liblzmadec support\n\nOct 23, 2016: libarchive 3.2.2 released\n    Security release\n\nJun 20, 2016: libarchive 3.2.1 released\n    This fixes a handful of security and other critical issues with 3.2.0\n\nMay 01, 2016: libarchive 3.2.0 released\n\nApr 09, 2016: libarchive 3.1.901a released\n    Another test release in preparation for 3.2.0\n\nFeb 13, 2016: libarchive 3.1.900a released\n    This is a test release in preparation for 3.2.0\n\nOct 21, 2015: Preliminary port to OSF\n\nApr 11, 2015: libarchive's issue tracker is now hosted at GitHub.\n    https://github.com/libarchive/libarchive/issues\n\nEarly 2015:  Many fixes to crash and overflow bugs thanks to Hanno Boeck\n\nOct 13, 2014: Zip encryption and decryption support\n\nAug 13, 2014: Add support for lz4 compression.\n\nJun 10, 2014: Add warc format support\n\nMay  3, 2014: Add experimental Zip streaming extension\n\nApr  6, 2014: Add bsdcat command-line tool\n\nJan 12, 2014: Add Zip64 support\n\nDec  1, 2013: Rewrite Zip write logic\n\nJul  1, 2013: Add ability to detect encrypted entries for many formats\n     (This does not add the ability to *decrypt* those entries, however)\n\nFeb 23, 2013: \"raw\" write support added\n\nFeb 09, 2013: libarchive 3.1.2 released\n\nJan 28, 2013: libarchive's new website moved to http://www.libarchive.org.\n\nJan 13, 2013: libarchive 3.1.1 released\n\nJan 13, 2013: libarchive 3.1.0 released\n\nDec 07, 2012: Implement functions to manually set the format and filters used.\n    \nNov 11, 2012: Add support for __MACOSX directory in Zip archives, which resource\n    forks are stored in.\n\nOct 20, 2012: Add support for writing v7 tar format.\n\nOct 09, 2012: Add support for grzip compression.\n\nOct 07, 2012: Introduce b64encode filter.    \nOct 07, 2012: Introduce uuencode filter.\n\nOct 06, 2012: Add support for lzop.\n    \nSep 27, 2012: Implement function used to seek within data blocks.\n    (Currently only supported for uncompressed RAR archives).\n    \nApr 22, 2012: Add basic archive read and write filter support for lrzip.\n\nMar 27, 2012: libarchive 3.0.4 released\n\nFeb 05, 2012: libarchive development now hosted at GitHub.\n    http://libarchive.github.com/\nFeb 05, 2012: libarchive's issue tracker remains at Google Code.\n    http://code.google.com/p/libarchive/issues/list\nFeb 05, 2012: libarchive's mailing lists remain at Google Groups.\n\nDec 24, 2011: libarchive 3.0.2 released\nDec 23, 2011: Various fixes merged from FreeBSD\nDec 23, 2011: Symlink support in Zip reader and writer\nDec 23, 2011: Robustness fixes to 7Zip reader\n\nNov 27, 2011: libarchive 3.0.1b released\n\nNov 26, 2011: 7Zip reader\nNov 26, 2011: Small fixes to ISO and Zip to improve robustness with corrupted input\nNov 24, 2011: Improve streaming Zip reader's support for uncompressed entries\nNov 20, 2011: New seeking Zip reader supports SFX Zip archives\nNov 20, 2011: Build fixes on Windows\n\nNov 13, 2011: libarchive 3.0.0a released\n\nNov 06, 2011: Update shared-library version calculations for libarchive 3.x\nSep 04, 2011: Fix tar -s; follow GNU tar for controlling hardlink/symlink substitutions\nAug 18, 2011: Fix reading ISO images built by NetBSD's mkisofs\nAug 15, 2011: Old archive_read_support_compression_XXX functions are deprecated and\n   will disappear in libarchive 4.0.\nJun 26, 2011: RAR reader\nJun 16, 2011: Add tar:compat-2x option to emulate broken libarchive 2.x\n   handling of pax UTF-8 headers\nApr 25, 2011: Refactor read_open() into a collection of single-item setters;\n   support the old interfaces as wrappers\nApr 12, 2011: Split disk writer into separate POSIX and Windows implementations\nApr 10, 2011: Improvements to character translations on Windows.\nMar 30, 2011: More work to return errors instead of calling abort()\nMar 23, 2011: Add charset option to many writers to control MBCS filenames\nMar 17, 2011: Overhauled support for per-format extension options\nMar 17, 2011: Track character set used for mbcs strings, support\n   translating to/from user-specified locale\nMar 09, 2011: Recognize mtree files without requiring a signature\nMar 06, 2011: Use iconv to convert to/from Unicode instead of making bad\n   assumptions about the C90 character set translation functions\nFeb 17, 2011: Fixes for AIX, TRU64, and other platforms\nDec 22, 2010: CAB reader\nDec 20, 2010: LHA/LZH reader\nJul 03, 2010: minitar example demonstrates archive_read_disk directory traversal\nJun 29, 2010: Many improvements to ISO reader compatibility\nJun 26, 2010: Use larger buffers when copy files into an archive\nJun 18, 2010: Reimplement Mac OS extensions in libarchive\nJun 09, 2010: archive_read_disk now supports traversals\nMay 28, 2010: XAR writer\nMay 16, 2010: Fix ^T handling; don't exit on interrupted reads and writes\nMay 09, 2010: Improved detection of platform-specific crypto support\nMay 04, 2010: lzip read and write filters\nMay 01, 2010: New options: tar --gid --gname --uid --uname\nApr 28, 2010: Use Red-black tree for ISO reader/writer to improve performance\nApr 17, 2010: Minimal writer for legacy GNU tar format\nMar 12, 2010: Don't dereference symlinks on Linux when reading ACLs.\nMar 06, 2010: Fix build when an older libarchive is already installed\nFeb 28, 2010: Relax handling of state failures; misuse by clients now generally\n      results in a sticky ARCHIVE_FATAL rather than a visit to abort()\nFeb 25, 2010: ISO writer\nFeb 21, 2010: Split many man pages into smaller chunks.\nFeb 21, 2010: Performance: Cheat on block sizes when reading archives from disk.\nFeb 21, 2010: Use int64_t instead of off_t, dev_t, ino_t, uid_t, and gid_t\nFeb 20, 2010: Document new ACL functions.\nFeb 19, 2010: Support multiple write filters\nFeb 07, 2010: Remove some legacy libarchive 1.x APIs\nFeb 04, 2010: Read afio headers\nFeb 02, 2010: Archive sparse files compatibly with GNU tar\nFeb 01, 2010: Integrate Apple extensions for Mac OS extended attributes into bsdtar\nJan 31, 2010: Support cpio -V\n\nFeb 04, 2010: libarchive 2.8.0 released\nJan 17, 2010: Fix error handling for 'echo nonexistent | cpio -o'\nJan 17, 2010: Don't use futimes() on Cygwin\n\nJan 02, 2010: libarchive 2.7.902a released (test release for 2.8)\nJan 02, 2010: Fix tar/test/test_windows on MinGW\nJan 02, 2010: Fix memory leaks in libarchive tests\nJan 01, 2010: Fix memory leak when filter startup fails\n\nDec 27, 2009: libarchive 2.7.901a released (test release for 2.8)\n\nAug 04, 2009: libarchive 2.7.1 released\nJul 20, 2009: Suppress bogus warning about unxz\nJul 19, 2009: Support Cygwin 1.7\nJun 11, 2009: Support lzma/xz files compressed with larger buffer sizes.\nMay 24, 2009: Handle gzip files signed with OpenBSD \"gzsig\" program.\nMay 07, 2009: Avoid false failures when reading from pipe.\n\nApr 16, 2009: libarchive 2.7.0 released\n\nApr 10, 2009: libarchive 2.6.992a released\nApr 09, 2009: Fix SIGPIPE issue building with MSVC.\nApr 09, 2009: Fix several minor memory leaks in libarchive and libarchive_test\n\nApr 08, 2009: libarchive 2.6.991a released\nApr 07, 2009: Additional tests added to bsdcpio_test\n\nApr 01, 2009: libarchive 2.6.990a released\nApr 01, 2009: Use command-line gunzip, bunzip2, unxz, unlzma for\n\tdecompression if the library is built without suitable\n\tlibraries.  The setup functions return ARCHIVE_WARN\n\tin this case so clients can adapt if necessary.\nApr 01, 2009: Use getpw*_r and getgr*_r functions for thread-safety.\nMar 24, 2009: Add archive_read_next_header2(), which is up to 25%\n\tmore efficient for some clients; from Brian Harring.\nMar 22, 2009: PDF versions of manpages are now included in the distribution.\nMar, 2009: Major work to improve Cygwin build by Charles Wilson.\nFeb/Mar, 2009: Major work on cmake build support, mostly by Michihiro NAKAJIMA.\nFeb/Mar, 2009: Major work on Visual Studio support by Michihiro NAKAJIMA.\n\tAll tests now pass.\nFeb 25, 2009: Fix Debian Bug #516577\nFeb 21, 2009: Yacc is no longer needed to build; date parser rewritten in C.\nJan/Feb, 2009: Mtree work by Michihiro.\nFeb, 2009: Joliet support by Andreas Henriksson.\nJan/Feb, 2009: New options framework by Michihiro.\nFeb, 2009: High-res timestamps on Tru64, AIX, and GNU Hurd, by Björn Jacke.\nJan 18, 2009: Extended attributes work on FreeBSD and Linux now\twith pax format.\nJan 07, 2009: New archive_read_disk_entry_from_file() knows about ACLs,\n\textended attributes, etc so that bsdtar and bsdcpio don't require\n\tsuch system-specific knowledge.\nJan 03, 2009: Read filter system extensively refactored.  In particular,\n\tread filter pipelines are now built out automatically and individual\n\tfilters should be much easier to implement.  Documentation on the\n\tGooglecode Wiki explains how to implement new filters.\nDec 28, 2008: Many Windows/Visual Studio fixes from Michihiro NAKAJIMA.\n\nDec 28, 2008: Main libarchive development moved from FreeBSD Perforce\n\tserver to Google Code.  This should make it easier for more\n\tpeople to participate in libarchive development.\n\nDec 28, 2008: libarchive 2.6.0 released\nDec 25, 2008: libarchive 2.5.905a released\nDec 10, 2008: libarchive 2.5.904a released\nDec 04, 2008: libarchive 2.5.903a released\nNov 09, 2008: libarchive 2.5.902a released\nNov 08, 2008: libarchive 2.5.901a released\nNov 08, 2008: Start of pre-release testing for libarchive 2.6\n\nNov 07, 2008: Read filter refactor: The decompression routines just\n\tconsume and produce arbitrarily-sized blocks.  The reblocking\n\tfrom read_support_compression_none() has been pulled into the\n\tread core.  Also, the decompression bid now makes multiple\n\tpasses and stacks read filters.\nOct 21, 2008: bsdcpio: New command-line parser.\nOct 19, 2008: Internal read_ahead change: short reads are now an error\nOct 06, 2008: bsdtar: option parser no longer uses getopt_long(),\n\tgives consistent option parsing on all platforms.\nSep 19, 2008: Jaakko Heinonen: shar utility built on libarchive\nSep 17, 2008: Pedro Giffuni: birthtime support\nSep 17, 2008: Miklos Vajna: lzma reader and test.  Note:  I still have\n\tsome concerns about the auto-detection (LZMA file format\n\tdoesn't support auto-detection well), so this is not yet\n\tenabled under archive_read_support_compression_all().  For\n\tnow, you must call archive_read_support_compression_lzma() if\n\tyou want LZMA read support.\nSep 11, 2008: Ivailo Petrov: Many fixes to Windows build, new solution files\nJul 26, 2008: archive_entry now tracks which values have not been set.\n\tThis helps zip extraction (file size is often \"unknown\") and\n\ttime restores (tar usually doesn't know atime).\nJul 26, 2008: Joerg Sonnenberger: Performance improvements to shar writer\nJul 25, 2008: Joerg Sonnenberger: mtree write support\n\nJul 02, 2008: libarchive 2.5.5 released\n\nJul 02, 2008: libarchive 2.5.5b released\nJul 01, 2008: bsdcpio is being used by enough people, we can call it 1.0.0 now\nJun 20, 2008: bsdcpio: If a -l link fails with EXDEV, copy the file instead\nJun 19, 2008: bsdcpio: additional long options for better GNU cpio compat\nJun 15, 2008: Many small portability and bugfixes since 2.5.4b.\n\nMay 25, 2008: libarchive 2.5.4b released\nMay 21, 2008: Joerg Sonnenberger: fix bsdtar hardlink handling for newc format\n\nMay 21, 2008: More progress on Windows building.  Thanks to \"Scott\"\n        for the Windows makefiles, thanks to Kees Zeelenberg for\n        code contributions.\n\nMay 21, 2008: Fix a number of non-exploitable integer and buffer overflows,\n        thanks to David Remahl at Apple for pointing these out.\n\nMay 21, 2008: Colin Percival: SIGINFO or SIGUSR1 to bsdtar prints progress info\n\nMay 16, 2008: bsdtar's test harness no longer depends on file ordering.\n        This was causing spurious test failures on a lot of systems.\n        Thanks to Bernhard R. Link for the diagnosis.\n\nMay 14, 2008: Joerg Sonnenberger: -s substitution support for bsdtar\n\nMay 13, 2008: Joerg Sonnenberger: Many mtree improvements\n\nMay 11, 2008: Joerg Sonnenberger: fix hardlink extraction when\n\thardlinks have different permissions from original file\n\nApril 30, 2008: Primary libarchive work has been moved into the FreeBSD\n\tproject's Perforce repository: \thttp://perforce.freebsd.org/\n\tThe libarchive project can be browsed at\n        //depot/user/kientzle/libarchive-portable\n        Direct link: http://preview.tinyurl.com/46mdgr\n\nMay 04, 2008: libarchive 2.5.3b released\n\t* libarchive: Several fixes to link resolver to address bsdcpio crashes\n\t* bsdcpio: -p hardlink handling fixes\n\t* tar/pax: Ensure ustar dirnames end in '/'; be more careful about\n\t  measuring filenames when deciding what pathname fields to use\n\t* libarchive: Mark which entry strings are set; be accurate about\n\t  distinguishing empty strings (\"\") from unset ones (NULL)\n\t* tar: Don't crash reading entries with empty filenames\n\t* libarchive_test, bsdtar_test, bsdcpio_test:  Better defaults:\n\t  run all tests, delete temp dirs, summarize repeated failures\n\t* -no-undefined to libtool for Cygwin\n\t* libarchive_test: Skip large file tests on systems with 32-bit off_t\n\t* iso9660: Don't bother trying to find the body of an empty file;\n\t  this works around strange behavior from some ISO9660 writers\n\t* tar: allow -r -T to be used together\n\t* tar: allow --format with -r or -u\n\t* libarchive: Don't build archive.h\n\nMay 04, 2008: Simplified building: archive.h is no longer constructed\n\tThis may require additional #if conditionals on some platforms.\n\nMar 30, 2008: libarchive 2.5.1b released\n\nMar 15, 2008: libarchive 2.5.0b released\nMar 15, 2008: bsdcpio now seems to correctly write hardlinks into newc,\n\tustar, and old cpio archives.  Just a little more testing before\n\tbsdcpio 1.0 becomes a reality.\nMar 15, 2008: I think the new linkify() interface is finally handling\n\tall known hardlink strategies.\nMar 15, 2008: Mtree read fixes from Joerg Sonnenberger.\nMar 15, 2008: Many new bsdtar and bsdcpio options from Joerg Sonnenberger.\nMar 15, 2008: test harnesses no longer require uudecode; they\n\tnow have built-in decoding logic that decodes the reference\n\tfiles as they are needed.\n\nMar 14, 2008: libarchive 2.4.14 released; identical to 2.4.13 except for\n\ta point fix for gname/uname mixup in pax format that was introduced\n\twith the UTF-8 fixes.\n\nFeb 26, 2008: libarchive 2.4.13 released\nFeb 25, 2008: Handle path, linkname, gname, or uname that can't be converted\n\tto/from UTF-8.  Implement \"hdrcharset\" attribute from SUS-2008.\nFeb 25, 2008: Fix name clash on NetBSD.\nFeb 18, 2008: Fix writing empty 'ar' archives, per Kai Wang\nFeb 18, 2008: [bsdtar] Permit appending on block devices.\nFeb 09, 2008: New \"linkify\" resolver to help with newc hardlink writing;\n\tbsdcpio still needs to be converted to use this.\nFeb 02, 2008: Windows compatibility fixes from Ivailo Petrov, Kees Zeelenberg\nJan 30, 2008: Ignore hardlink size for non-POSIX tar archives.\n\nJan 22, 2008: libarchive 2.4.12 released\nJan 22, 2008: Fix bad padding when writing symlinks to newc cpio archives.\nJan 22, 2008: Verify bsdcpio_test by getting it to work against GNU cpio 2.9.\n\tbsdcpio_test complains about missing options (-y and -z), format\n\tof informational messages (--version, --help), and a minor formatting\n\tissue in odc format output.  After this update, bsdcpio_test uncovered\n\tseveral more cosmetic issues in bsdcpio, all now fixed.\nJan 22, 2008: Experimental support for self-extracting Zip archives.\nJan 22, 2008: Extend hardlink restore strategy to work correctly with\n\thardlinks extracted from newc cpio files.  (Which store the body\n\tonly with the last occurrence of a link.)\n\nDec 30, 2007: libarchive 2.4.11 released\nDec 30, 2007: Fixed a compile error in bsdcpio on some systems.\n\nDec 29, 2007: libarchive 2.4.10 released\nDec 29, 2007: bsdcpio 0.9.0 is ready for wider use.\nDec 29, 2007: Completed initial test harness for bsdcpio.\n\nDec 22, 2007: libarchive 2.4.9 released\nDec 22, 2007: Implement the remaining options for bsdcpio:  -a, -q, -L, -f,\n\tpattern selection for -i and -it.\n\nDec 13, 2007: libarchive 2.4.8 released\nDec 13, 2007: gzip and bzip2 compression now handle zero-byte writes correctly,\n\tThanks to Damien Golding for bringing this to my attention.\n\nDec 12, 2007: libarchive 2.4.7 released\n\nDec 10, 2007: libarchive 2.4.6 released\nDec 09, 2007: tar/test/test_copy.c verifies \"tar -c | tar -x\" copy pipeline\nDec 07, 2007: Fix a couple of minor memory leaks.\n\nDec 04, 2007: libarchive 2.4.5 released\nDec 04, 2007: Fix cpio/test/test_write_odc by setting the umask first.\n\nDec 03, 2007: libarchive 2.4.4 released\nDec 03, 2007: New configure options --disable-xattr and --disable-acl,\n\tthanks to Samuli Suominen.\n\nDec 03, 2007: libarchive 2.4.3 released\nDec 03, 2007: Thanks to Lapo Luchini for sending me a ZIP file that\n\tlibarchive couldn't handle.  Fixed a bug in handling of\n\t\"length at end\" flags in ZIP files.\nDec 03, 2007: Fixed bsdcpio -help, bsdtar -help tests.\nDec 02, 2007: First cut at real bsdtar test harness.\n\nDec 02, 2007: libarchive 2.4.2 released\n\nDec 02, 2007: libarchive 2.4.1 released\nDec 02, 2007: Minor fixes, rough cut of mdoc-to-man conversion for\n\tman pages.\n\nOct 30, 2007: libarchive 2.4.0 released\nOct 30, 2007: Minor compile fix thanks to Joerg Schilling.\nOct 30, 2007: Only run the format auction once at the beginning of the\n\tarchive.  This is simpler and supports better error recovery.\nOct 29, 2007: Test support for very large entries in tar archives:\n\tlibarchive_test now exercises entries from 2GB up to 1TB.\n\nOct 27, 2007: libarchive 2.3.5 released\nOct 27, 2007: Correct some unnecessary internal data copying in the\n\t\"compression none\" reader and writer; this reduces user time\n\tby up to 2/3 in some tests.  (Thanks to Jan Psota for\n\tpublishing his performance test results to GNU tar's bug-tar\n\tmailing list; those results pointed me towards this problem.)\nOct 27, 2007: Fix for skipping archive entries that are exactly\n\ta multiple of 4G on 32-bit platforms.\nOct 25, 2007: Fix for reading very large (>8G) tar archives; this was\n\tbroken when I put in support for new GNU tar sparse formats.\nOct 20, 2007: Initial work on new pattern-matching code for cpio; I\n\thope this eventually replaces the code currently in bsdtar.\n\nOct 08, 2007: libarchive 2.3.4 released\nOct 05, 2007: Continuing work on bsdcpio test suite.\nOct 05, 2007: New cpio.5 manpage, updates to \"History\" of bsdcpio.1 and\n\tbsdtar.1 manpages.\nOct 05, 2007: Fix zip reader to immediately return EOF if you try\n\tto read body of non-regular file.  In particular, this fixes\n\tbsdtar extraction of zip archives.\n\nSep 30, 2007: libarchive 2.3.3 released\nSep 26, 2007: Rework Makefile.am so that the enable/disable options\n\tactually do the right things.\nSep 26, 2007: cpio-odc and cpio-newc archives no longer write bodies\n\tfor non-regular files.\nSep 26, 2007: Test harness for bsdcpio is in place, needs more tests written.\n\tThis is much nicer than the ragtag collection of test scripts\n\tthat bsdtar has.\n\nSep 20, 2007: libarchive 2.3.2 released\nSep 20, 2007: libarchive 2.3.1 broke bsdtar because the archive_write_data()\n\tfix was implemented incorrectly.\n\nSep 16, 2007: libarchive 2.3.1 released\nSep 16, 2007: Many fixes to bsdcpio 0.3:  handle hardlinks with -p, recognize\n\tblock size on writing, fix a couple of segfaults.\nSep 16, 2007: Fixed return value from archive_write_data() when used\n\twith archive_write_disk() to match the documentation and other\n\tinstances of this same function.\nSep 15, 2007: Add archive_entry_link_resolver, archive_entry_strmode\n\nSep 11, 2007: libarchive 2.2.8 released\nSep 09, 2007: bsdcpio 0.2 supports most (not yet all) of the old POSIX spec.\n\nSep 01, 2007: libarchive 2.2.7 released\nAug 31, 2007: Support for reading mtree files, including an mtree.5 manpage\n\t(A little experimental still.)\nAug 18, 2007: Read gtar 1.17 --posix --sparse entries.\nAug 13, 2007: Refined suid/sgid restore handling; it is no longer\n\tan error if suid/sgid bits are dropped when you request\n\tperm restore but don't request owner restore.\nAug 06, 2007: Use --enable-bsdcpio if you want to try bsdcpio\n\nAug 05, 2007: libarchive 2.2.6 released\nAug 05, 2007: New configure option --disable-bsdtar, thanks to Joerg\n\tSonnenberger.\nAug 05, 2007: Several bug fixes from FreeBSD CVS repo.\n\nJul 13, 2007: libarchive 2.2.5 released\n\nJul 12, 2007: libarchive 2.2.4 released\nJul 12, 2007: Thanks to Colin Percival's help in diagnosing and\n\tfixing several critical security bugs.  Details available at\n\thttp://security.freebsd.org/advisories/FreeBSD-SA-07:05.libarchive.asc\n\nMay 26, 2007: libarchive 2.2.3 released\nMay 26, 2007: Fix memory leaks in ZIP reader and shar writer, add some\n\tmissing system headers to archive_entry.h, dead code cleanup\n\tfrom Colin Percival, more tests for gzip/bzip2, fix an\n\tEOF anomaly in bzip2 decompression.\n\nMay 12, 2007: libarchive 2.2.2 released\nMay 12, 2007: Fix archive_write_disk permission restore by cloning\n\tentry passed into write_header so that permission info is\n\tstill available at finish_entry time.  (archive_read_extract()\n\tworked okay because it held onto the passed-in entry, but\n\tdirect consumers of archive_write_disk would break).  This\n\trequired fixing archive_entry_clone(), which now works and has\n\ta reasonably complete test case.\nMay 10, 2007: Skeletal cpio implementation.\n\nMay 06, 2007: libarchive 2.2.1 released\nMay 06, 2007: Flesh out a lot more of test_entry.c so as to catch\n\tproblems such as the device node breakage before releasing <sigh>.\nMay 05, 2007: Fix a bad bug introduced in 2.1.9 that broke device\n\tnode entries in tar archives.\nMay 03, 2007: Move 'struct stat' out of archive_entry core as well.\n\tThis removes some portability headaches and fixes a bunch\n\tof corner cases that arise when manipulating archives on\n\tdissimilar systems.\n\nApr 30, 2007: libarchive 2.1.10 released\nApr 31, 2007: Minor code cleanup.\n\nApr 24, 2007: libarchive 2.1.9 released\nApr 24, 2007: Fix some recently-introduced problems with libraries\n\t(Just let automake handle it and it all works much better.)\n\tFinish isolating major()/minor()/makedev() in archive_entry.c.\n\nApr 23, 2007: libarchive 2.1.8 released\nApr 23, 2007: Minor fixes found from building on MacOS X\n\nApr 22, 2007: libarchive 2.1.7 released\nApr 22, 2007: Eliminated all uses of 'struct stat' from the\n\tformat readers/writers.  This should improve portability;\n\t'struct stat' is now only used in archive_entry and in\n\tcode that actually touches the disk.\n\nApr 17, 2007: libarchive 2.1.6 released\n\tLibarchive now compiles and passes all tests on Interix.\n\nApr 16, 2007: libarchive 2.1.5 released\n\nApr 15, 2007: libarchive 2.1b2 released\nApr 15, 2007: New libarchive_internals.3 documentation of internal APIs.\n\tNot complete, but should prove helpful.\nApr 15, 2007: Experimental \"read_compress_program\" and \"write_compress_program\"\n\tfor using libarchive with external compression.  Not yet\n\twell tested, and likely has portability issues.  Feedback\n\tappreciated.\n\nApr 14, 2007: libarchive 2.0.31 released\nApr 14, 2007: More fixes for Interix, more 'ar' work\n\nApr 14, 2007: libarchive 2.0.30 released\nApr 13, 2007: libarchive now enforces trailing '/' on dirs\n\twritten to tar archives\n\nApr 11, 2007: libarchive 2.0.29 released\nApr 11, 2007: Make it easier to statically configure for different platforms.\nApr 11, 2007: Updated config.guess, config.sub, libtool\n\nApr 06, 2007: libarchive 2.0.28 released\nApr 06, 2007: 'ar' format read/write support thanks to Kai Wang.\n\nApr 01, 2007: libarchive 2.0.27 released\nMar 31, 2007: Several minor fixes from Colin Percival and Joerg Sonnenberger.\n\nMar 12, 2007: libarchive 2.0.25 released\nMar 12, 2007: Fix broken --unlink flag.\n\nMar 11, 2007: libarchive 2.0.24 released\nMar 10, 2007: Correct an ACL blunder that causes any ACL with an entry\n    that refers to a non-existent user or group to not be restored correctly.\n    The fix both makes the parser more tolerant (so that archives created\n    with the buggy ACLs can be read now) and corrects the ACL formatter.\nMar 10, 2007: More work on test portability to Linux.\n\nMar 10, 2007: libarchive 2.0.22 released\nMar 10, 2007: Header cleanups; added linux/fs.h, removed\n    some unnecessary headers, added #include guards in bsdtar.\n    If you see any obvious compile failures from this, let me know.\nMar 10, 2007: Work on bsdtar test scripts: not yet robust enough\n    to enable as part of \"make check\", but getting better.\nMar 10, 2007: libarchive now returns ARCHIVE_FAILED when\n    a header write fails in a way that only affects this item.\n    Less bad than ARCHIVE_FATAL, but worse than ARCHIVE_WARN.\n\nMar 07, 2007: libarchive 2.0.21 released\nMar 07, 2007: Add some ACL tests (only for the system-independent\n    portion of the ACL support for now).\nMar 07, 2007: tar's ability to read ACLs off disk got\n    turned off for FreeBSD; re-enable it.  (ACL restores and\n    libarchive support for storing/reading ACLs from pax\n    archives was unaffected.)\n\nMar 02, 2007: libarchive 2.0.20 released\nMar 2, 2007:  It's not perfect, but it's pretty good.\n    Libarchive 2.0 is officially out of beta.\n\nFeb 28, 2007: libarchive 2.0b17 released\nFeb 27, 2007: Make the GID restore checks more robust by checking\n    whether the current user has too few or too many privileges.\n\nFeb 26, 2007: libarchive 2.0b15 released\nFeb 26, 2007: Don't lose symlinks when extracting from ISOs.\n    Thanks to Diego \"Flameeyes\" Pettenò for telling me about the\n    broken testcase on Gentoo that (finally!) led me to the cause\n    of this long-standing bug.\n\nFeb 26, 2007: libarchive 2.0b14 released\nFeb 26, 2007: Fix a broken test on platforms that lack lchmod().\n\nFeb 25, 2007: libarchive 2.0b13 released\nFeb 25, 2007: Empty archives were being written as empty files,\n    without a proper end-of-archive marker.  Fixed.\n\nFeb 23, 2007: libarchive 2.0b12 released\nFeb 22, 2007: Basic security checks added: _EXTRACT_SECURE_NODOTDOT\n    and _EXTRACT_SECURE_SYMLINK.  These checks used to be in bsdtar,\n    but they belong down in libarchive where they can be used by\n    other tools and where they can be better optimized.\n\nFeb 11, 2007: libarchive 2.0b11 released\nFeb 10, 2007: Fixed a bunch of errors in libarchive's handling\n    of EXTRACT_PERM and EXTRACT_OWNER, especially relating\n    to SUID and SGID bits.\n\nJan 31, 2007: libarchive 2.0b9 released\nJan 31, 2007: Added read support for \"empty\" archives as a\n    distinct archive format.  Bsdtar uses this to handle, e.g.,\n    \"touch foo.tar; tar -rf foo.tar\"\n\nJan 22, 2007: libarchive 2.0b6 released\nJan 22, 2007: archive_write_disk API is now in place.  It provides\n    a finer-grained interface than archive_read_extract.  In particular,\n    you can use it to create objects on disk without having an archive\n    around (just feed it archive_entry objects describing what you\n    want to create), you can override the uname/gname-to-uid/gid lookups\n    (minitar uses this to avoid getpwXXX() and getgrXXX() bloat).\n\nJan 09, 2007: libarchive 2.0a3 released\nJan 9, 2007: archive_extract is now much better; it handles the\n    most common cases with a minimal number of system calls.\n    Some features still need a lot of testing, especially corner\n    cases involving objects that already exist on disk.   I expect\n    the next round of API overhaul will simplify building test cases.\nJan 9, 2007: a number of fixes thanks to Colin Percival, especially\n    corrections to the skip() framework and handling of large files.\nJan 9, 2007: Fixes for large ISOs.  The code should correctly handle\n    very large ISOs with entries up to 4G.   Thanks to Robert Sciuk\n    for pointing out these issues.\n\nSep 05, 2006: libarchive 1.3.1 released\nSep 5, 2006: Bump version to 1.3 for new I/O wrappers.\nSep 4, 2006: New memory and FILE read/write wrappers.\nSep 4, 2006: libarchive test harness is now minimally functional;\n    it's located a few minor bugs in error-handling logic\n\nAug 17, 2006: libarchive 1.2.54 released\nAug 17, 2006: Outline ABI changes for libarchive 2.0; these\n   are protected behind #ifdef's until I think I've found everything\n   that needs to change.\nAug 17, 2006: Fix error-handling in archive_read/write_close()\n   They weren't returning any errors before.\nAug 17, 2006: Fix recursive-add logic to not trigger if it's not set\n   Fixes a bug adding files when writing archive to pipe or when\n   using archive_write_open() directly.\nJul 2006: New \"skip\" handling improves performance extracting\n   single files from large uncompressed archives.\n\nMar 21, 2006: 1.2.52 released\nMar 21, 2006: Fix -p on platforms that don't have platform-specific\n   extended attribute code.\nMar 20, 2006: Add NEWS file; fill in some older history from other\n   files.  I'll try to keep this file up-to-date from now on.\n\nOLDER NEWS SUMMARIES\n\nMar 19, 2006: libarchive 1.2.51 released\nMar 18, 2006: Many fixes to extended attribute support, including a redesign\n   of the storage format to simplify debugging.\nMar 12, 2006: Remove 'tp' support; it was a fun idea, but not worth\n   spending much time on.\nMar 11, 2006: Incorporated Jaakko Heinonen's still-experimental support\n   for extended attributes (Currently Linux-only.).\nMar 11, 2006: Reorganized distribution package: There is now one tar.gz\n   file that builds both libarchive and bsdtar.\nFeb 13, 2006: Minor bug fixes: correctly read cpio device entries, write\n   Pax attribute entry names.\nNov 7, 2005: Experimental 'tp' format support in libarchive.  Feedback\n   appreciated; this is not enabled by archive_read_support_format_all()\n   yet as I'm not quite content with the format detection heuristics.\nNov 7, 2005: Some more portability improvements thanks to Darin Broady,\n   minor bugfixes.\nOct 12, 2005: Use GNU libtool to build shared libraries on many systems.\nAug 9, 2005: Correctly detect that MacOS X does not have POSIX ACLs.\nApr 17, 2005: Kees Zeelenberg has ported libarchive and bsdtar to Windows:\n   http://gnuwin32.sourceforge.net/\nApr 11, 2005: Extended Zip/Zip64 support thanks to Dan Nelson.  -L/-h\n   fix from Jaakko Heinonen.\nMar 12, 2005: archive_read_extract can now handle very long\n   pathnames (I've tested with pathnames up to 1MB).\nMar 12, 2005: Marcus Geiger has written an article about libarchive\n   http://xsnil.antbear.org/2005/02/05/archive-mit-libarchive-verarbeiten/\n   including examples of using it from Objective-C.  His MoinX\n   http://moinx.antbear.org/ desktop Wiki uses\n   libarchive for archiving and restoring Wiki pages.\nJan 22, 2005: Preliminary ZIP extraction support,\n    new directory-walking code for bsdtar.\nJan 16, 2005: ISO9660 extraction code added; manpage corrections.\nMay 22, 2004: Many gtar-compatible long options have been added; almost\n    all FreeBSD ports extract correctly with bsdtar.\nMay 18, 2004: bsdtar can read Solaris, HP-UX, Unixware, star, gtar,\n    and pdtar archives.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.7119140625,
          "content": "# Welcome to libarchive!\n\nThe libarchive project develops a portable, efficient C library that\ncan read and write streaming archives in a variety of formats.  It\nalso includes implementations of the common `tar`, `cpio`, and `zcat`\ncommand-line tools that use the libarchive library.\n\n## Questions?  Issues?\n\n* https://www.libarchive.org is the home for ongoing\n  libarchive development, including documentation,\n  and links to the libarchive mailing lists.\n* To report an issue, use the issue tracker at\n  https://github.com/libarchive/libarchive/issues\n* To submit an enhancement to libarchive, please\n  submit a pull request via GitHub: https://github.com/libarchive/libarchive/pulls\n\n## Contents of the Distribution\n\nThis distribution bundle includes the following major components:\n\n* **libarchive**: a library for reading and writing streaming archives\n* **tar**: the 'bsdtar' program is a full-featured 'tar' implementation built on libarchive\n* **cpio**: the 'bsdcpio' program is a different interface to essentially the same functionality\n* **cat**: the 'bsdcat' program is a simple replacement tool for zcat, bzcat, xzcat, and such\n* **unzip**: the 'bsdunzip' program is a simple replacement tool for Info-ZIP's unzip\n* **examples**: Some small example programs that you may find useful.\n* **examples/minitar**: a compact sample demonstrating use of libarchive.\n* **contrib**:  Various items sent to me by third parties; please contact the authors with any questions.\n\nThe top-level directory contains the following information files:\n\n* **NEWS** - highlights of recent changes\n* **COPYING** - what you can do with this\n* **INSTALL** - installation instructions\n* **README** - this file\n* **CMakeLists.txt** - input for \"cmake\" build tool, see INSTALL\n* **configure** - configuration script, see INSTALL for details.  If your copy of the source lacks a `configure` script, you can try to construct it by running the script in `build/autogen.sh` (or use `cmake`).\n\nThe following files in the top-level directory are used by the 'configure' script:\n\n* `Makefile.am`, `aclocal.m4`, `configure.ac` - used to build this distribution, only needed by maintainers\n* `Makefile.in`, `config.h.in` - templates used by configure script\n\n## Documentation\n\nIn addition to the informational articles and documentation\nin the online [libarchive Wiki](https://github.com/libarchive/libarchive/wiki),\nthe distribution also includes a number of manual pages:\n\n * bsdtar.1 explains the use of the bsdtar program\n * bsdcpio.1 explains the use of the bsdcpio program\n * bsdcat.1 explains the use of the bsdcat program\n * libarchive.3 gives an overview of the library as a whole\n * archive_read.3, archive_write.3, archive_write_disk.3, and\n   archive_read_disk.3 provide detailed calling sequences for the read\n   and write APIs\n * archive_entry.3 details the \"struct archive_entry\" utility class\n * archive_internals.3 provides some insight into libarchive's\n   internal structure and operation.\n * libarchive-formats.5 documents the file formats supported by the library\n * cpio.5, mtree.5, and tar.5 provide detailed information about these\n   popular archive formats, including hard-to-find details about\n   modern cpio and tar variants.\n\nThe manual pages above are provided in the 'doc' directory in\na number of different formats.\n\nYou should also read the copious comments in `archive.h` and the\nsource code for the sample programs for more details.  Please let us\nknow about any errors or omissions you find.\n\n## Supported Formats\n\nCurrently, the library automatically detects and reads the following formats:\n\n  * Old V7 tar archives\n  * POSIX ustar\n  * GNU tar format (including GNU long filenames, long link names, and sparse files)\n  * Solaris 9 extended tar format (including ACLs)\n  * POSIX pax interchange format\n  * POSIX octet-oriented cpio\n  * SVR4 ASCII cpio\n  * Binary cpio (big-endian or little-endian)\n  * PWB binary cpio\n  * ISO9660 CD-ROM images (with optional Rockridge or Joliet extensions)\n  * ZIP archives (with uncompressed or \"deflate\" compressed entries, including support for encrypted Zip archives)\n  * ZIPX archives (with support for bzip2, ppmd8, lzma and xz compressed entries)\n  * GNU and BSD 'ar' archives\n  * 'mtree' format\n  * 7-Zip archives (including archives that use zstandard compression)\n  * Microsoft CAB format\n  * LHA and LZH archives\n  * RAR and RAR 5.0 archives (with some limitations due to RAR's proprietary status)\n  * XAR archives\n\nThe library also detects and handles any of the following before evaluating the archive:\n\n  * uuencoded files\n  * files with RPM wrapper\n  * gzip compression\n  * bzip2 compression\n  * compress/LZW compression\n  * lzma, lzip, and xz compression\n  * lz4 compression\n  * lzop compression\n  * zstandard compression\n\nThe library can create archives in any of the following formats:\n\n  * POSIX ustar\n  * POSIX pax interchange format\n  * \"restricted\" pax format, which will create ustar archives except for\n    entries that require pax extensions (for long filenames, ACLs, etc).\n  * Old GNU tar format\n  * Old V7 tar format\n  * POSIX octet-oriented cpio\n  * SVR4 \"newc\" cpio\n  * Binary cpio (little-endian)\n  * PWB binary cpio\n  * shar archives\n  * ZIP archives (with uncompressed or \"deflate\" compressed entries)\n  * ZIPX archives (with bzip2, zstd, lzma or xz compressed entries)\n  * GNU and BSD 'ar' archives\n  * 'mtree' format\n  * ISO9660 format\n  * 7-Zip archives (including archives that use zstandard compression)\n  * XAR archives\n\nWhen creating archives, the result can be filtered with any of the following:\n\n  * uuencode\n  * gzip compression\n  * bzip2 compression\n  * compress/LZW compression\n  * lzma, lzip, and xz compression\n  * lz4 compression\n  * lzop compression\n  * zstandard compression\n\n## Notes about the Library Design\n\nThe following notes address many of the most common\nquestions we are asked about libarchive:\n\n* This is a heavily stream-oriented system.  That means that\n  it is optimized to read or write the archive in a single\n  pass from beginning to end.  For example, this allows\n  libarchive to process archives too large to store on disk\n  by processing them on-the-fly as they are read from or\n  written to a network or tape drive.  This also makes\n  libarchive useful for tools that need to produce\n  archives on-the-fly (such as webservers that provide\n  archived contents of a users account).\n\n* In-place modification and random access to the contents\n  of an archive are not directly supported.  For some formats,\n  this is not an issue: For example, tar.gz archives are not\n  designed for random access.  In some other cases, libarchive\n  can re-open an archive and scan it from the beginning quickly\n  enough to provide the needed abilities even without true\n  random access.  Of course, some applications do require true\n  random access; those applications should consider alternatives\n  to libarchive.\n\n* The library is designed to be extended with new compression and\n  archive formats.  The only requirement is that the format be\n  readable or writable as a stream and that each archive entry be\n  independent.  There are articles on the libarchive Wiki explaining\n  how to extend libarchive.\n\n* On read, compression and format are always detected automatically.\n\n* The same API is used for all formats; it should be very\n  easy for software using libarchive to transparently handle\n  any of libarchive's archiving formats.\n\n* Libarchive's automatic support for decompression can be used\n  without archiving by explicitly selecting the \"raw\" and \"empty\"\n  formats.\n\n* I've attempted to minimize static link pollution.  If you don't\n  explicitly invoke a particular feature (such as support for a\n  particular compression or format), it won't get pulled in to\n  statically-linked programs.  In particular, if you don't explicitly\n  enable a particular compression or decompression support, you won't\n  need to link against the corresponding compression or decompression\n  libraries.  This also reduces the size of statically-linked\n  binaries in environments where that matters.\n\n* The library is generally _thread safe_ depending on the platform:\n  it does not define any global variables of its own.  However, some\n  platforms do not provide fully thread-safe versions of key C library\n  functions.  On those platforms, libarchive will use the non-thread-safe\n  functions.  Patches to improve this are of great interest to us.\n\n* The function `archive_write_disk_header()` is _not_ thread safe on\n  POSIX machines and could lead to security issue resulting in world\n  writeable directories.  Thus it must be mutexed by the calling code.\n  This is due to calling `umask(oldumask = umask(0))`, which sets the\n  umask for the whole process to 0 for a short time frame.\n  In case other thread calls the same function in parallel, it might\n  get interrupted by it and cause the executable to use umask=0 for the\n  remaining execution.\n  This will then lead to implicitly created directories to have 777\n  permissions without sticky bit.\n\n* In particular, libarchive's modules to read or write a directory\n  tree do use `chdir()` to optimize the directory traversals.  This\n  can cause problems for programs that expect to do disk access from\n  multiple threads.  Of course, those modules are completely\n  optional and you can use the rest of libarchive without them.\n\n* The library is _not_ thread aware, however.  It does no locking\n  or thread management of any kind.  If you create a libarchive\n  object and need to access it from multiple threads, you will\n  need to provide your own locking.\n\n* On read, the library accepts whatever blocks you hand it.\n  Your read callback is free to pass the library a byte at a time\n  or mmap the entire archive and give it to the library at once.\n  On write, the library always produces correctly-blocked output.\n\n* The object-style approach allows you to have multiple archive streams\n  open at once.  bsdtar uses this in its \"@archive\" extension.\n\n* The archive itself is read/written using callback functions.\n  You can read an archive directly from an in-memory buffer or\n  write it to a socket, if you wish.  There are some utility\n  functions to provide easy-to-use \"open file,\" etc, capabilities.\n\n* The read/write APIs are designed to allow individual entries\n  to be read or written to any data source:  You can create\n  a block of data in memory and add it to a tar archive without\n  first writing a temporary file.  You can also read an entry from\n  an archive and write the data directly to a socket.  If you want\n  to read/write entries to disk, there are convenience functions to\n  make this especially easy.\n\n* Note: The \"pax interchange format\" is a POSIX standard extended tar\n  format that should be used when the older _ustar_ format is not\n  appropriate.  It has many advantages over other tar formats\n  (including the legacy GNU tar format) and is widely supported by\n  current tar implementations."
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.7939453125,
          "content": "# Security Policy\n\nIf you have discovered a security vulnerability in this project, please report it\nprivately. **Do not disclose it as a public issue.** This gives us time to work with you\nto fix the issue before public exposure, reducing the chance that the exploit will be\nused before a patch is released.\n\nYou may submit the report in the following ways:\n\n- send an email to security@libarchive.de; and/or\n- send us a [private vulnerability report](https://github.com/libarchive/libarchive/security/advisories/new)\n\nPlease provide the following information in your report:\n\n- A description of the vulnerability and its impact\n- How to reproduce the issue\n\nThis project is maintained by volunteers on a reasonable-effort basis. As such, we ask\nthat you give me 90 days to work on a fix before public exposure.\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "cat",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 44.830078125,
          "content": "dnl Process this file with autoconf to produce a configure script.\n\ndnl First, define all of the version numbers up front.\ndnl In particular, this allows the version macro to be used in AC_INIT\n\ndnl These first two version numbers are updated automatically on each release.\nm4_define([LIBARCHIVE_VERSION_S],[3.8.0dev])\nm4_define([LIBARCHIVE_VERSION_N],[3008000])\n\ndnl bsdtar and bsdcpio versioning tracks libarchive\nm4_define([BSDTAR_VERSION_S],LIBARCHIVE_VERSION_S())\nm4_define([BSDCPIO_VERSION_S],LIBARCHIVE_VERSION_S())\nm4_define([BSDCAT_VERSION_S],LIBARCHIVE_VERSION_S())\nm4_define([BSDUNZIP_VERSION_S],LIBARCHIVE_VERSION_S())\n\nAC_PREREQ([2.71])\n\n#\n# Now starts the \"real\" configure script.\n#\n\nAC_INIT([libarchive],[LIBARCHIVE_VERSION_S()],[libarchive-discuss@googlegroups.com])\n# Make sure the srcdir contains \"libarchive\" directory\nAC_CONFIG_SRCDIR([libarchive])\n# Use auxiliary subscripts from this subdirectory (cleans up root)\nAC_CONFIG_AUX_DIR([build/autoconf])\n# M4 scripts\nAC_CONFIG_MACRO_DIR([build/autoconf])\n# Must follow AC_CONFIG macros above...\nAM_INIT_AUTOMAKE([1.11 dist-xz dist-zip])\nAM_MAINTAINER_MODE([enable])\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n\n# Libtool's \"interface version\" can be computed from the libarchive version.\n\n# Libtool interface version bumps on any API change, so increments\n# whenever libarchive minor version does.\nARCHIVE_MINOR=$(( (LIBARCHIVE_VERSION_N() / 1000) % 1000 ))\n# Libarchive 2.7 == libtool interface 9 = 2 + 7\n# Libarchive 2.8 == libtool interface 10 = 2 + 8\n# Libarchive 2.9 == libtool interface 11 = 2 + 8\n# Libarchive 3.0 == libtool interface 12\n# Libarchive 3.1 == libtool interface 13\nARCHIVE_INTERFACE=`echo $((13 + ${ARCHIVE_MINOR}))`\n# Libarchive revision is bumped on any source change === libtool revision\nARCHIVE_REVISION=$(( LIBARCHIVE_VERSION_N() % 1000 ))\n# Libarchive minor is bumped on any interface addition === libtool age\nARCHIVE_LIBTOOL_VERSION=$ARCHIVE_INTERFACE:$ARCHIVE_REVISION:$ARCHIVE_MINOR\n\n# Stick the version numbers into config.h\nAC_DEFINE([__LIBARCHIVE_CONFIG_H_INCLUDED], [1],\n\t[Internal macro for sanity checks])\nAC_DEFINE([LIBARCHIVE_VERSION_STRING],\"LIBARCHIVE_VERSION_S()\",\n\t[Version number of libarchive])\nAC_DEFINE_UNQUOTED([LIBARCHIVE_VERSION_NUMBER],\"LIBARCHIVE_VERSION_N()\",\n\t[Version number of libarchive as a single integer])\nAC_DEFINE([BSDCPIO_VERSION_STRING],\"BSDCPIO_VERSION_S()\",\n\t[Version number of bsdcpio])\nAC_DEFINE([BSDTAR_VERSION_STRING],\"BSDTAR_VERSION_S()\",\n\t[Version number of bsdtar])\nAC_DEFINE([BSDCAT_VERSION_STRING],\"BSDTAR_VERSION_S()\",\n\t[Version number of bsdcat])\nAC_DEFINE([BSDUNZIP_VERSION_STRING],\"BSDUNZIP_VERSION_S()\",\n\t[Version number of bsdunzip])\n\n# The shell variables here must be the same as the AC_SUBST() variables\n# below, but the shell variable names apparently cannot be the same as\n# the m4 macro names above.  Why?  Ask autoconf.\nBSDCPIO_VERSION_STRING=BSDCPIO_VERSION_S()\nBSDTAR_VERSION_STRING=BSDTAR_VERSION_S()\nBSDCAT_VERSION_STRING=BSDCAT_VERSION_S()\nBSDUNZIP_VERSION_STRING=BSDUNZIP_VERSION_S()\nLIBARCHIVE_VERSION_STRING=LIBARCHIVE_VERSION_S()\nLIBARCHIVE_VERSION_NUMBER=LIBARCHIVE_VERSION_N()\n\n# Substitute the above version numbers into the various files below.\n# Yes, I believe this is the fourth time we define what are essentially\n# the same symbols.  Why? Ask autoconf.\nAC_SUBST(ARCHIVE_LIBTOOL_VERSION)\nAC_SUBST(BSDCPIO_VERSION_STRING)\nAC_SUBST(BSDTAR_VERSION_STRING)\nAC_SUBST(BSDCAT_VERSION_STRING)\nAC_SUBST(BSDUNZIP_VERSION_STRING)\nAC_SUBST(LIBARCHIVE_VERSION_STRING)\nAC_SUBST(LIBARCHIVE_VERSION_NUMBER)\n\nAC_CONFIG_HEADERS([config.h])\nAC_CONFIG_FILES([Makefile])\nAC_CONFIG_FILES([build/pkgconfig/libarchive.pc])\n\n# Check for host type\nAC_CANONICAL_HOST\n\ndnl Compilation on mingw and Cygwin needs special Makefile rules\ninc_windows_files=no\ninc_cygwin_files=no\ncase \"$host_os\" in\n  *mingw* ) inc_windows_files=yes ;;\n  *cygwin* | *msys*) inc_cygwin_files=yes ;;\nesac\nAM_CONDITIONAL([INC_WINDOWS_FILES], [test $inc_windows_files = yes])\nAM_CONDITIONAL([INC_CYGWIN_FILES], [test $inc_cygwin_files = yes])\n\ndnl Defines that are required for specific platforms (e.g. -D_POSIX_SOURCE, etc)\nPLATFORMCPPFLAGS=\ncase \"$host_os\" in\n  *mingw* ) PLATFORMCPPFLAGS=-D__USE_MINGW_ANSI_STDIO -D__MINGW_USE_VC2005_COMPAT ;;\nesac\nAC_SUBST(PLATFORMCPPFLAGS)\n\ndnl Linking on Haiku needs libbsd because of readpassphrase\ncase \"$host_os\" in\n  haiku*) LIBS=\"-lbsd $LIBS\" ;;\nesac\n\n# Checks for programs.\nAC_PROG_CC\nAM_PROG_CC_C_O\nAC_PROG_CPP\nAC_USE_SYSTEM_EXTENSIONS\n\nLT_INIT([win32-dll])\nAC_CHECK_TOOL([STRIP],[strip])\nAC_PROG_MKDIR_P\n\n#\n# Options for building bsdtar.\n#\n# Default is to build bsdtar, but allow people to override that.\n#\nAC_ARG_ENABLE([bsdtar],\n\t[AS_HELP_STRING([--enable-bsdtar], [enable build of bsdtar (default)])\n\tAS_HELP_STRING([--enable-bsdtar=static], [force static build of bsdtar])\n\tAS_HELP_STRING([--enable-bsdtar=shared], [force dynamic build of bsdtar])\nAS_HELP_STRING([--disable-bsdtar], [disable build of bsdtar])],\n\t[], [enable_bsdtar=yes])\n\ncase \"$enable_bsdtar\" in\nyes)\n\tif test \"$enable_static\" = \"no\"; then\n\t\tstatic_bsdtar=no\n\telse\n\t\tstatic_bsdtar=yes\n\tfi\n\tbuild_bsdtar=yes\n\t;;\ndynamic|shared)\n\tif test \"$enable_shared\" = \"no\"; then\n\t\tAC_MSG_FAILURE([Shared linking of bsdtar requires shared libarchive])\n\tfi\n\tbuild_bsdtar=yes\n\tstatic_bsdtar=no\n\t;;\nstatic)\n\tbuild_bsdtar=yes\n\tstatic_bsdtar=yes\n\t;;\nno)\n\tbuild_bsdtar=no\n\tstatic_bsdtar=no\n\t;;\n*)\n\tAC_MSG_FAILURE([Unsupported value for --enable-bsdtar])\n\t;;\nesac\n\nAM_CONDITIONAL([BUILD_BSDTAR], [ test \"$build_bsdtar\" = yes ])\nAM_CONDITIONAL([STATIC_BSDTAR], [ test \"$static_bsdtar\" = yes ])\n\n#\n# Options for building bsdcat.\n#\n# Default is to build bsdcat, but allow people to override that.\n#\nAC_ARG_ENABLE([bsdcat],\n\t[AS_HELP_STRING([--enable-bsdcat], [enable build of bsdcat (default)])\n\tAS_HELP_STRING([--enable-bsdcat=static], [force static build of bsdcat])\n\tAS_HELP_STRING([--enable-bsdcat=shared], [force dynamic build of bsdcat])\nAS_HELP_STRING([--disable-bsdcat], [disable build of bsdcat])],\n\t[], [enable_bsdcat=yes])\n\ncase \"$enable_bsdcat\" in\nyes)\n\tif test \"$enable_static\" = \"no\"; then\n\t\tstatic_bsdcat=no\n\telse\n\t\tstatic_bsdcat=yes\n\tfi\n\tbuild_bsdcat=yes\n\t;;\ndynamic|shared)\n\tif test \"$enable_shared\" = \"no\"; then\n\t\tAC_MSG_FAILURE([Shared linking of bsdcat requires shared libarchive])\n\tfi\n\tbuild_bsdcat=yes\n\tstatic_bsdcat=no\n\t;;\nstatic)\n\tbuild_bsdcat=yes\n\tstatic_bsdcat=yes\n\t;;\nno)\n\tbuild_bsdcat=no\n\tstatic_bsdcat=no\n\t;;\n*)\n\tAC_MSG_FAILURE([Unsupported value for --enable-bsdcat])\n\t;;\nesac\n\nAM_CONDITIONAL([BUILD_BSDCAT], [ test \"$build_bsdcat\" = yes ])\nAM_CONDITIONAL([STATIC_BSDCAT], [ test \"$static_bsdcat\" = yes ])\n\n#\n# Options for building bsdcpio.\n#\n# Default is not to build bsdcpio, but that can be overridden.\n#\nAC_ARG_ENABLE([bsdcpio],\n\t[AS_HELP_STRING([--enable-bsdcpio], [enable build of bsdcpio (default)])\n\tAS_HELP_STRING([--enable-bsdcpio=static], [static build of bsdcpio])\n\tAS_HELP_STRING([--enable-bsdcpio=shared], [dynamic build of bsdcpio])\nAS_HELP_STRING([--disable-bsdcpio], [disable build of bsdcpio])],\n\t[], [enable_bsdcpio=yes])\n\ncase \"$enable_bsdcpio\" in\nyes)\n\tif test \"$enable_static\" = \"no\"; then\n\t   static_bsdcpio=no\n\telse\n\t   static_bsdcpio=yes\n        fi\n\tbuild_bsdcpio=yes\n\t;;\ndynamic|shared)\n\tif test \"$enabled_shared\" = \"no\"; then\n\t   AC_MSG_FAILURE([Shared linking of bsdcpio requires shared libarchive])\n\tfi\n\tbuild_bsdcpio=yes\n\t;;\nstatic)\n\tbuild_bsdcpio=yes\n\tstatic_bsdcpio=yes\n\t;;\nno)\n\tbuild_bsdcpio=no\n\tstatic_bsdcpio=no\n\t;;\n*)\n\tAC_MSG_FAILURE([Unsupported value for --enable-bsdcpio])\n\t;;\nesac\n\nAM_CONDITIONAL([BUILD_BSDCPIO], [ test \"$build_bsdcpio\" = yes ])\nAM_CONDITIONAL([STATIC_BSDCPIO], [ test \"$static_bsdcpio\" = yes ])\n\n# Set up defines needed before including any headers\ncase $host in\n  *mingw* | *cygwin* | *msys*  )\n  AC_PREPROC_IFELSE([AC_LANG_PROGRAM(\n    [[#ifdef _WIN32_WINNT\n     # error _WIN32_WINNT already defined\n     #endif\n    ]],[[;]])\n  ],[\n    AC_DEFINE([_WIN32_WINNT], 0x0502, [Define to '0x0502' for Windows Server 2003 APIs.])\n    AC_DEFINE([NTDDI_VERSION], 0x05020000, [Define to '0x05020000' for Windows Server 2003 APIs.])\n  ])\n  AC_PREPROC_IFELSE([AC_LANG_PROGRAM(\n    [[#ifdef WINVER\n     # error WINVER already defined\n     #endif\n    ]],[[;]])\n  ],[\n    AC_DEFINE([WINVER], 0x0502, [Define to '0x0502' for Windows Server 2003 APIs.])\n  ])\n  ;;\nesac\n\n#\n# Options for building bsdunzip.\n#\n# Default is to build bsdunzip, but allow people to override that.\n# Bsdunzip has not yet been ported for Windows\n#\ncase \"$host_os\" in\n  *mingw* | *msys*)\n\tenable_bsdunzip=no\n\t;;\n  *)\n\tAC_ARG_ENABLE([bsdunzip],\n\t  [AS_HELP_STRING([--enable-bsdunzip], [enable build of bsdunzip (default)])\n\t  AS_HELP_STRING([--enable-bsdunzip=static], [force static build of bsdunzip])\n\t  AS_HELP_STRING([--enable-bsdunzip=shared], [force dynamic build of bsdunzip])\n\t  AS_HELP_STRING([--disable-bsdunzip], [disable build of bsdunzip])],\n\t  [], [enable_bsdunzip=yes])\n\t;;\nesac\n\ncase \"$enable_bsdunzip\" in\nyes)\n\tif test \"$enable_static\" = \"no\"; then\n\t\tstatic_bsdunzip=no\n\telse\n\t\tstatic_bsdunzip=yes\n\tfi\n\tbuild_bsdunzip=yes\n\t;;\ndynamic|shared)\n\tif test \"$enable_shared\" = \"no\"; then\n\t\tAC_MSG_FAILURE([Shared linking of bsdunzip requires shared libarchive])\n\tfi\n\tbuild_bsdunzip=yes\n\tstatic_bsdunzip=no\n\t;;\nstatic)\n\tbuild_bsdunzip=yes\n\tstatic_bsdunzip=yes\n\t;;\nno)\n\tbuild_bsdunzip=no\n\tstatic_bsdunzip=no\n\t;;\n*)\n\tAC_MSG_FAILURE([Unsupported value for --enable-bsdunzip])\n\t;;\nesac\n\nAM_CONDITIONAL([BUILD_BSDUNZIP], [ test \"$build_bsdunzip\" = yes ])\nAM_CONDITIONAL([STATIC_BSDUNZIP], [ test \"$static_bsdunzip\" = yes ])\n\n# Checks for header files.\nAC_HEADER_DIRENT\nAC_HEADER_SYS_WAIT\nAC_CHECK_HEADERS([acl/libacl.h attr/xattr.h])\nAC_CHECK_HEADERS([copyfile.h ctype.h])\nAC_CHECK_HEADERS([errno.h ext2fs/ext2_fs.h fcntl.h fnmatch.h grp.h])\n\nAC_CACHE_CHECK([whether EXT2_IOC_GETFLAGS is usable],\n    [ac_cv_have_decl_EXT2_IOC_GETFLAGS],\n    [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([@%:@include <sys/ioctl.h>\n@%:@include <ext2fs/ext2_fs.h>],\n                                   [int x = EXT2_IOC_GETFLAGS])],\n                  [AS_VAR_SET([ac_cv_have_decl_EXT2_IOC_GETFLAGS], [yes])],\n                  [AS_VAR_SET([ac_cv_have_decl_EXT2_IOC_GETFLAGS], [no])])])\n\nAS_VAR_IF([ac_cv_have_decl_EXT2_IOC_GETFLAGS], [yes],\n    [AC_DEFINE_UNQUOTED([HAVE_WORKING_EXT2_IOC_GETFLAGS], [1],\n                    [Define to 1 if you have a working EXT2_IOC_GETFLAGS])])\n\nAC_CHECK_HEADERS([inttypes.h io.h langinfo.h limits.h])\nAC_CHECK_HEADERS([linux/fiemap.h linux/fs.h linux/magic.h linux/types.h])\n\nAC_CACHE_CHECK([whether FS_IOC_GETFLAGS is usable],\n    [ac_cv_have_decl_FS_IOC_GETFLAGS],\n    [AC_COMPILE_IFELSE([AC_LANG_PROGRAM([@%:@include <sys/ioctl.h>\n@%:@include <linux/fs.h>],\n                                   [int x = FS_IOC_GETFLAGS])],\n                  [AS_VAR_SET([ac_cv_have_decl_FS_IOC_GETFLAGS], [yes])],\n                  [AS_VAR_SET([ac_cv_have_decl_FS_IOC_GETFLAGS], [no])])])\n\nAS_VAR_IF([ac_cv_have_decl_FS_IOC_GETFLAGS], [yes],\n    [AC_DEFINE_UNQUOTED([HAVE_WORKING_FS_IOC_GETFLAGS], [1],\n                    [Define to 1 if you have a working FS_IOC_GETFLAGS])])\n\nAC_CHECK_HEADERS([locale.h membership.h paths.h poll.h pthread.h pwd.h])\nAC_CHECK_HEADERS([readpassphrase.h signal.h spawn.h])\nAC_CHECK_HEADERS([stdarg.h stdint.h stdlib.h string.h])\nAC_CHECK_HEADERS([sys/acl.h sys/cdefs.h sys/ea.h sys/extattr.h])\nAC_CHECK_HEADERS([sys/ioctl.h sys/mkdev.h sys/mount.h])\nAC_CHECK_HEADERS([sys/param.h sys/poll.h sys/richacl.h])\nAC_CHECK_HEADERS([sys/select.h sys/statfs.h sys/statvfs.h sys/sysmacros.h])\nAC_CHECK_HEADERS([sys/time.h sys/utime.h sys/utsname.h sys/vfs.h sys/xattr.h])\nAC_CHECK_HEADERS([time.h unistd.h utime.h wchar.h wctype.h])\nAC_CHECK_TYPE([suseconds_t])\nAC_CHECK_HEADERS([windows.h])\n# check windows.h first; the other headers require it.\nAC_CHECK_HEADERS([wincrypt.h winioctl.h],[],[],\n[[#ifdef HAVE_WINDOWS_H\n# include <windows.h>\n#endif\n]])\n\n# Checks for libraries.\nAC_ARG_WITH([zlib],\n  AS_HELP_STRING([--without-zlib], [Don't build support for gzip through zlib]))\n\nif test \"x$with_zlib\" != \"xno\"; then\n  old_LIBS=\"$LIBS\"\n  LIBS=\"$LIBS -lz\"\n  AC_LINK_IFELSE([AC_LANG_SOURCE([[\n      #include <zlib.h>\n      #if !defined(ZLIB_VERNUM)\n      // zlib 1.2.0 should work too, but it's difficult to test for.\n      // zlib 1.2.1 onwards have ZLIB_VERNUM, which is easy to check.\n      #error zlib >= 1.2.1 is required.\n      #endif\n      // Check that there's an inflate function.\n      int main(int argc, char **argv) { inflate(NULL, 0); return 0; }\n    ]])],\n    [AC_DEFINE([HAVE_ZLIB_H], [1], [Define to 1 if you have zlib >= 1.2.1])\n      AC_MSG_RESULT([found a suitable version of zlib (>= 1.2.1)])\n    ],\n    [AC_MSG_RESULT([could not find a suitable version of zlib (>= 1.2.1)])\n      LIBS=\"$old_LIBS\"])\nfi\n\nAC_ARG_WITH([bz2lib],\n  AS_HELP_STRING([--without-bz2lib], [Don't build support for bzip2 through bz2lib]))\n\nif test \"x$with_bz2lib\" != \"xno\"; then\n  AC_CHECK_HEADERS([bzlib.h])\n  case \"$host_os\" in\n    *mingw* | *cygwin* | *msys*)\n      dnl AC_CHECK_LIB cannot be used on the Windows port of libbz2, therefore\n\t  dnl use AC_LINK_IFELSE.\n\t  AC_MSG_CHECKING([for BZ2_bzDecompressInit in -lbz2])\n      old_LIBS=\"$LIBS\"\n      LIBS=\"-lbz2 $LIBS\"\n      AC_LINK_IFELSE(\n        [AC_LANG_SOURCE(#include <bzlib.h>\n          int main() { return BZ2_bzDecompressInit(NULL, 0, 0); })],\n        [ac_cv_lib_bz2_BZ2_bzDecompressInit=yes],\n        [ac_cv_lib_bz2_BZ2_bzDecompressInit=no])\n      LIBS=\"$old_LIBS\"\n\t  AC_MSG_RESULT($ac_cv_lib_bz2_BZ2_bzDecompressInit)\n      if test \"x$ac_cv_lib_bz2_BZ2_bzDecompressInit\" = xyes; then\n        AC_DEFINE([HAVE_LIBBZ2], [1], [Define to 1 if you have the `bz2' library (-lbz2).])\n        LIBS=\"-lbz2 $LIBS\"\n      fi\n    ;;\n    *)\n      AC_CHECK_LIB(bz2,BZ2_bzDecompressInit)\n    ;;\n  esac\nfi\n\nAC_ARG_WITH([libb2],\n  AS_HELP_STRING([--without-libb2], [Don't build support for BLAKE2 through libb2]))\n\nif test \"x$with_libb2\" != \"xno\"; then\n  AC_CHECK_HEADERS([blake2.h])\n  AC_CHECK_LIB(b2,blake2sp_init)\nfi\n\nAM_CONDITIONAL([INC_BLAKE2], [test \"x$ac_cv_lib_b2_blake2sp_init\" != \"xyes\"])\n\nAC_ARG_WITH([iconv],\n  AS_HELP_STRING([--without-iconv], [Don't try to link against iconv]))\n\nif test \"x$with_iconv\" != \"xno\"; then\n  AM_ICONV\n  AC_CHECK_HEADERS([iconv.h],[],[],[#include <stdlib.h>])\n  if test \"x$am_cv_func_iconv\" = \"xyes\"; then\n    AC_CHECK_HEADERS([localcharset.h])\n    am_save_LIBS=\"$LIBS\"\n    LIBS=\"${LIBS} ${LIBICONV}\"\n    if test -n \"$LIBICONV\"; then\n      LIBSREQUIRED=\"$LIBSREQUIRED${LIBSREQUIRED:+ }iconv\"\n    fi\n    AC_CHECK_FUNCS([locale_charset])\n    LIBS=\"${am_save_LIBS}\"\n    if test \"x$ac_cv_func_locale_charset\" != \"xyes\"; then\n      # If locale_charset() is not in libiconv, we have to find libcharset.\n      AC_CHECK_LIB(charset,locale_charset)\n    fi\n  fi\nfi\n\nAC_ARG_WITH([lz4],\n  AS_HELP_STRING([--without-lz4], [Don't build support for lz4 through liblz4]))\n\nif test \"x$with_lz4\" != \"xno\"; then\n  AC_CHECK_HEADERS([lz4.h lz4hc.h])\n  AC_CHECK_LIB(lz4,LZ4_decompress_safe)\nfi\n\nAC_ARG_WITH([zstd],\n  AS_HELP_STRING([--without-zstd], [Don't build support for zstd through libzstd]))\n\nif test \"x$with_zstd\" != \"xno\"; then\n  AC_CHECK_HEADERS([zstd.h])\n  AC_CHECK_LIB(zstd,ZSTD_decompressStream)\n  AC_CHECK_LIB(zstd,ZSTD_compressStream,\n    AC_DEFINE([HAVE_ZSTD_compressStream], [1], [Define to 1 if you have the `zstd' library (-lzstd) with compression support.]))\n  AC_CHECK_LIB(zstd,ZSTD_minCLevel,\n    AC_DEFINE([HAVE_ZSTD_minCLevel], [1], [Define to 1 if you have a `zstd' library version with ZSTD_minCLevel().]))\nfi\n\nAC_ARG_WITH([lzma],\n  AS_HELP_STRING([--without-lzma], [Don't build support for xz through lzma]))\n\nif test \"x$with_lzma\" != \"xno\"; then\n  PKG_PROG_PKG_CONFIG\n  PKG_CHECK_MODULES(LZMA_PC, [liblzma], [\n    CPPFLAGS=\"${CPPFLAGS} ${LZMA_PC_CFLAGS}\"\n    LIBS=\"${LIBS} ${LZMA_PC_LIBS}\"\n    AC_DEFINE(HAVE_LIBLZMA, [1], [Define to 1 if you have the `lzma' library.])\n  ], [\n    AC_CHECK_LIB(lzma,lzma_stream_decoder)\n  ])\n  AC_CHECK_HEADERS([lzma.h])\n\n  # Some pre-release (but widely distributed) versions of liblzma\n  # included a disabled version of lzma_stream_encoder_mt that\n  # fools a naive AC_CHECK_LIB or AC_CHECK_FUNC, so we need\n  # to do something more complex here:\n  AC_CACHE_CHECK(\n    [whether we have multithread support in lzma],\n    ac_cv_lzma_has_mt,\n    [AC_LINK_IFELSE([\n      AC_LANG_PROGRAM([[#include <lzma.h>]\n                       [#if LZMA_VERSION < 50020000]\n                       [#error unsupported]\n                       [#endif]],\n                      [[int ignored __attribute__((unused)); ignored = lzma_stream_encoder_mt(0, 0);]])],\n      [ac_cv_lzma_has_mt=yes], [ac_cv_lzma_has_mt=no])])\n  if test \"x$ac_cv_lzma_has_mt\" != xno; then\n\t  AC_DEFINE([HAVE_LZMA_STREAM_ENCODER_MT], [1], [Define to 1 if you have the `lzma_stream_encoder_mt' function.])\n  fi\nfi\n\nAC_ARG_WITH([lzo2],\n  AS_HELP_STRING([--with-lzo2], [Build with LZO support from liblzo2]))\n\nif test \"x$with_lzo2\" = \"xyes\"; then\n  AC_CHECK_HEADERS([lzo/lzoconf.h lzo/lzo1x.h])\n  AC_CHECK_LIB(lzo2,lzo1x_decompress_safe)\nfi\n\nAC_ARG_WITH([cng],\n  AS_HELP_STRING([--without-cng], [Don't build support of CNG(Crypto Next Generation)]))\n\nAC_ARG_WITH([mbedtls],\n  AS_HELP_STRING([--with-mbedtls], [Build with crypto support from mbed TLS]))\nAC_ARG_WITH([nettle],\n  AS_HELP_STRING([--with-nettle], [Build with crypto support from Nettle]))\nAC_ARG_WITH([openssl],\n  AS_HELP_STRING([--without-openssl], [Don't build support for mtree and xar hashes through openssl]))\ncase \"$host_os\" in\n  *darwin* ) with_openssl=no ;;\nesac\n\nAC_ARG_WITH([xml2],\n  AS_HELP_STRING([--without-xml2], [Don't build support for xar through libxml2]))\nAC_ARG_WITH([expat],\n  AS_HELP_STRING([--without-expat], [Don't build support for xar through expat]))\n\nif test \"x$with_xml2\" != \"xno\"; then\n  PKG_PROG_PKG_CONFIG\n  PKG_CHECK_MODULES(LIBXML2_PC, [libxml-2.0], [\n    CPPFLAGS=\"${CPPFLAGS} ${LIBXML2_PC_CFLAGS}\"\n    LIBS=\"${LIBS} ${LIBXML2_PC_LIBS}\"\n    AC_CHECK_LIB(xml2,xmlInitParser,[true],AC_MSG_FAILURE(Missing xml2 library))\n  ], [\n    AC_CHECK_LIB(xml2,xmlInitParser)\n  ])\n  AC_CHECK_HEADERS([libxml/xmlreader.h libxml/xmlwriter.h])\nfi\nif test \"x$ac_cv_header_libxml_xmlreader_h\" != \"xyes\"; then\n  if test \"x$with_expat\" != \"xno\"; then\n    AC_CHECK_HEADERS([expat.h])\n    AC_CHECK_LIB(expat,XML_ParserCreate)\n  fi\nfi\n\nAC_ARG_ENABLE([posix-regex-lib],\n  [AS_HELP_STRING([--enable-posix-regex-lib],\n    [choose what library to use for POSIX regular expression support (default: auto)])\n  AS_HELP_STRING([--enable-posix-regex-lib=libc], [use libc POSIX regular expression support])\n  AS_HELP_STRING([--enable-posix-regex-lib=libregex], [use libregex POSIX regular expression support])\n  AS_HELP_STRING([--enable-posix-regex-lib=libpcreposix], [use libpcreposix POSIX regular expression support])\n  AS_HELP_STRING([--enable-posix-regex-lib=libpcre2posix], [use libpcre2-posix POSIX regular expression support])\n  AS_HELP_STRING([--disable-posix-regex-lib], [don't enable POSIX regular expression support])],\n  [], [enable_posix_regex_lib=auto])\n\nposix_regex_lib_found=\nif test \"$enable_posix_regex_lib\" = \"auto\" || test \"$enable_posix_regex_lib\" = \"libc\" || test \"$enable_posix_regex_lib\" = \"libregex\"; then\n  AC_CHECK_HEADERS([regex.h])\n  if test \"x$ac_cv_header_regex_h\" != \"xno\"; then\n    AC_CHECK_FUNC(regcomp)\n    if test \"x$ac_cv_func_regcomp\" = xyes; then\n      posix_regex_lib_found=1\n    else\n      AC_CHECK_LIB(regex,regcomp)\n      if test \"x$ac_cv_lib_regex_regcomp\" = xyes; then\n        posix_regex_lib_found=1\n      fi\n    fi\n  fi\nfi\nif test -z $posix_regex_lib_found && (test \"$enable_posix_regex_lib\" = \"auto\" || test \"$enable_posix_regex_lib\" = \"libpcreposix\"); then\n  AC_CHECK_HEADERS([pcreposix.h])\n  AC_CHECK_LIB(pcreposix,regcomp)\n  if test \"x$ac_cv_lib_pcreposix_regcomp\" != xyes; then\n    AC_MSG_NOTICE(trying libpcreposix check again with libpcre)\n\tunset ac_cv_lib_pcreposix_regcomp\n\tAC_CHECK_LIB(pcre,pcre_exec)\n    AC_CHECK_LIB(pcreposix,regcomp)\n    if test \"x$ac_cv_lib_pcre_pcre_exec\" = xyes && test \"x$ac_cv_lib_pcreposix_regcomp\" = xyes; then\n      AC_MSG_CHECKING(if PCRE_STATIC needs to be defined)\n      AC_LINK_IFELSE(\n        [AC_LANG_SOURCE(#include <pcreposix.h>\n          int main() { return regcomp(NULL, NULL, 0); })],\n        [without_pcre_static=yes],\n        [without_pcre_static=no])\n      AC_LINK_IFELSE(\n        [AC_LANG_SOURCE(#define PCRE_STATIC\n          #include <pcreposix.h>\n          int main() { return regcomp(NULL, NULL, 0); })],\n        [with_pcre_static=yes],\n        [with_pcre_static=no])\n      if test \"x$without_pcre_static\" != xyes && test \"x$with_pcre_static\" = xyes; then\n        AC_MSG_RESULT(yes)\n        AC_DEFINE([PCRE_STATIC], [1], [Define to 1 if PCRE_STATIC needs to be defined.])\n      elif test \"x$without_pcre_static\" = xyes || test \"x$with_pcre_static\" = xyes; then\n        AC_MSG_RESULT(no)\n      fi\n      posix_regex_lib_found=1\n    fi\n  else\n    posix_regex_lib_found=1\n  fi\nfi\nif test -z $posix_regex_lib_found && (test \"$enable_posix_regex_lib\" = \"auto\" || test \"$enable_posix_regex_lib\" = \"libpcre2posix\"); then\n  AC_CHECK_HEADERS([pcre2posix.h])\n  AC_CHECK_LIB(pcre2-posix,regcomp)\n  if test \"x$ac_cv_lib_pcre2posix_regcomp\" != xyes; then\n    AC_MSG_NOTICE(trying libpcre2posix check again with libpcre2-8)\n\tunset ac_cv_lib_pcre2posix_regcomp\n\tAC_CHECK_LIB(pcre2,pcre2_regexec)\n    AC_CHECK_LIB(pcre2-posix,pcre2_regcomp)\n    if test \"x$ac_cv_lib_pcre2_pcre_exec\" = xyes && test \"x$ac_cv_lib_pcre2posix_regcomp\" = xyes; then\n      AC_MSG_CHECKING(if PCRE2_STATIC needs to be defined)\n      AC_LINK_IFELSE(\n        [AC_LANG_SOURCE(#include <pcre2posix.h>\n          int main() { return pcre2_regcomp(NULL, NULL, 0); })],\n        [without_pcre2_static=yes],\n        [without_pcre2_static=no])\n      AC_LINK_IFELSE(\n        [AC_LANG_SOURCE(#define PCRE2_STATIC\n          #include <pcre2posix.h>\n          int main() { return pcre2_regcomp(NULL, NULL, 0); })],\n        [with_pcre2_static=yes],\n        [with_pcre2_static=no])\n      if test \"x$without_pcre2_static\" != xyes && test \"x$with_pcre2_static\" = xyes; then\n        AC_MSG_RESULT(yes)\n        AC_DEFINE([PCRE2_STATIC], [1], [Define to 1 if PCRE2_STATIC needs to be defined.])\n      elif test \"x$without_pcre2_static\" = xyes || test \"x$with_pcre2_static\" = xyes; then\n        AC_MSG_RESULT(no)\n      fi\n      posix_regex_lib_found=1\n    fi\n  else\n    posix_regex_lib_found=1\n  fi\nfi\n\n# TODO: Give the user the option of using a pre-existing system\n# libarchive.  This will define HAVE_LIBARCHIVE which will cause\n# bsdtar_platform.h to use #include <...> for the libarchive headers.\n# Need to include Makefile.am magic to link against system\n# -larchive in that case.\n#AC_CHECK_LIB(archive,archive_version)\n\n# Checks for supported compiler flags\nAX_APPEND_COMPILE_FLAGS([-Wall -Wformat -Wformat-security])\n\n# Place the functions and data into separate sections, allowing GNU style\n# linkers to garbage collect the unused ones.\nsave_LDFLAGS=$LDFLAGS\nLDFLAGS=\"$LDFLAGS -Wl,--gc-sections\"\nAC_MSG_CHECKING([whether ld supports --gc-sections])\nAC_LINK_IFELSE(\n    [AC_LANG_SOURCE([static char UnusedFunc() { return 5; } int main() { return 0;}])],\n    [AC_MSG_RESULT([yes])\n        DEAD_CODE_REMOVAL=\"-Wl,--gc-sections\";\n        AX_APPEND_COMPILE_FLAGS([-ffunction-sections -fdata-sections])],\n    [AC_MSG_RESULT([no])\n        DEAD_CODE_REMOVAL=\"\";])\nLDFLAGS=$save_LDFLAGS\n\nif test \"$DEAD_CODE_REMOVAL\" = \"\"; then\n    # Macos linkers have a -dead_strip flag, which is similar to --gc-sections.\n    save_LDFLAGS=$LDFLAGS\n    LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"\n    AC_MSG_CHECKING([whether ld supports -dead_strip])\n    AC_LINK_IFELSE(\n        [AC_LANG_SOURCE([static char UnusedFunc() { return 5; } int main() { return 0;}])],\n        [AC_MSG_RESULT([yes])\n            DEAD_CODE_REMOVAL=\"-Wl,-dead_strip\";],\n        [AC_MSG_RESULT([no])\n            DEAD_CODE_REMOVAL=\"\";])\n    LDFLAGS=$save_LDFLAGS\nfi\n\nAC_SUBST(DEAD_CODE_REMOVAL)\n\n# Checks for typedefs, structures, and compiler characteristics.\nAC_C_CONST\n# la_TYPE_UID_T defaults to \"int\", which is incorrect for MinGW\n# and MSVC. Use a customized version.\nla_TYPE_UID_T\nAC_TYPE_MODE_T\n# AC_TYPE_OFF_T defaults to \"long\", which limits us to 4GB files on\n# most systems... default to \"long long\" instead.\nAC_CHECK_TYPE(off_t, [long long])\nAC_TYPE_SIZE_T\nAC_CHECK_TYPE(id_t, [unsigned long])\nAC_CHECK_TYPE(uintptr_t, [unsigned int])\n\n# Check for tm_gmtoff in struct tm\nAC_CHECK_MEMBERS([struct tm.tm_gmtoff, struct tm.__tm_gmtoff],,,\n[\n#include <time.h>\n])\n\n# Check for f_namemax in struct statfs\nAC_CHECK_MEMBERS([struct statfs.f_namemax],,,\n[\n#include <sys/param.h>\n#include <sys/mount.h>\n])\n\n# Check for f_iosize in struct statfs\nAC_CHECK_MEMBERS([struct statfs.f_iosize],,,\n[\n#include <sys/param.h>\n#include <sys/mount.h>\n])\n\n# Check for f_iosize in struct statvfs\nAC_CHECK_MEMBERS([struct statvfs.f_iosize],,,\n[\n#include <sys/statvfs.h>\n])\n\n# Check for birthtime in struct stat\nAC_CHECK_MEMBERS([struct stat.st_birthtime])\n\n# Check for high-resolution timestamps in struct stat\nAC_CHECK_MEMBERS([struct stat.st_birthtimespec.tv_nsec])\nAC_CHECK_MEMBERS([struct stat.st_mtimespec.tv_nsec])\nAC_CHECK_MEMBERS([struct stat.st_mtim.tv_nsec])\nAC_CHECK_MEMBERS([struct stat.st_mtime_n]) # AIX\nAC_CHECK_MEMBERS([struct stat.st_umtime]) # Tru64\nAC_CHECK_MEMBERS([struct stat.st_mtime_usec]) # Hurd\n# Check for block size support in struct stat\nAC_CHECK_MEMBERS([struct stat.st_blksize])\n# Check for st_flags in struct stat (BSD fflags)\nAC_CHECK_MEMBERS([struct stat.st_flags])\n\n# If you have uintmax_t, we assume printf supports %ju\n# If you have unsigned long long, we assume printf supports %llu\n# TODO: Check for %ju and %llu support directly.\nAC_CHECK_TYPES([uintmax_t, unsigned long long])\n\n# We use C99-style integer types\n# Declare them if the local platform doesn't already do so.\nAC_TYPE_INTMAX_T\nAC_TYPE_UINTMAX_T\nAC_TYPE_INT64_T\nAC_TYPE_UINT64_T\nAC_TYPE_INT32_T\nAC_TYPE_UINT32_T\nAC_TYPE_INT16_T\nAC_TYPE_UINT16_T\nAC_TYPE_UINT8_T\n\nAC_CHECK_DECLS([SIZE_MAX, INT32_MAX, INT32_MIN])\nAC_CHECK_DECLS([INT64_MAX, INT64_MIN, UINT64_MAX, UINT32_MAX])\nAC_CHECK_DECLS([INTMAX_MAX, INTMAX_MIN, UINTMAX_MAX])\n\nAC_CHECK_DECL([SSIZE_MAX],\n\t\t[AC_DEFINE(HAVE_DECL_SSIZE_MAX, 1, [Define to 1 if you have the declaration of `SSIZE_MAX', and to 0 if you don't.])],\n\t\t[],\n\t\t[#include <limits.h>])\n\nAC_CHECK_DECL([EFTYPE],\n\t\t[AC_DEFINE(HAVE_EFTYPE, 1, [A possible errno value for invalid file format errors])],\n\t\t[],\n\t\t[#include <errno.h>])\nAC_CHECK_DECL([EILSEQ],\n\t\t[AC_DEFINE(HAVE_EILSEQ, 1, [A possible errno value for invalid file format errors])],\n\t\t[],\n\t\t[#include <errno.h>])\nAC_CHECK_TYPE([wchar_t],\n\t        [AC_DEFINE_UNQUOTED(AS_TR_CPP(HAVE_[]wchar_t), 1, [Define to 1 if the system has the type `wchar_t'.])dnl\n\t\tAC_CHECK_SIZEOF([wchar_t])],\n\t\t[])\n\nAX_COMPILE_CHECK_SIZEOF(int)\nAX_COMPILE_CHECK_SIZEOF(long)\n\nAC_CHECK_HEADERS_ONCE([sys/time.h])\n\n# Checks for library functions.\nAC_HEADER_MAJOR\nAC_FUNC_FSEEKO\nAC_FUNC_MEMCMP\nAC_FUNC_LSTAT\nAC_FUNC_STAT\nAC_FUNC_STRERROR_R\nAC_FUNC_STRFTIME\nAC_FUNC_VPRINTF\n# check for:\n#   CreateHardLinkA(LPCSTR, LPCSTR, LPSECURITY_ATTRIBUTES)\n# To avoid necessity for including windows.h or special forward declaration\n# workarounds, we use 'void *' for 'struct SECURITY_ATTRIBUTES *'\nAC_CHECK_STDCALL_FUNC([CreateHardLinkA],[const char *, const char *, void *])\nAC_CHECK_FUNCS([arc4random_buf chflags chown chroot ctime_r])\nAC_CHECK_FUNCS([fchdir fchflags fchmod fchown fcntl fdopendir fnmatch fork])\nAC_CHECK_FUNCS([fstat fstatat fstatfs fstatvfs ftruncate])\nAC_CHECK_FUNCS([futimens futimes futimesat])\nAC_CHECK_FUNCS([geteuid getline getpid getgrgid_r getgrnam_r])\nAC_CHECK_FUNCS([getpwnam_r getpwuid_r getvfsbyname gmtime_r])\nAC_CHECK_FUNCS([lchflags lchmod lchown link linkat localtime_r lstat lutimes])\nAC_CHECK_FUNCS([mbrtowc memmove memset])\nAC_CHECK_FUNCS([mkdir mkfifo mknod mkstemp])\nAC_CHECK_FUNCS([nl_langinfo openat pipe poll posix_spawnp readlink readlinkat])\nAC_CHECK_FUNCS([readpassphrase])\nAC_CHECK_FUNCS([select setenv setlocale sigaction statfs statvfs])\nAC_CHECK_FUNCS([strchr strdup strerror strncpy_s strnlen strrchr symlink])\nAC_CHECK_FUNCS([sysconf])\nAC_CHECK_FUNCS([tcgetattr tcsetattr])\nAC_CHECK_FUNCS([timegm tzset unlinkat unsetenv utime utimensat utimes vfork])\nAC_CHECK_FUNCS([wcrtomb wcscmp wcscpy wcslen wctomb wmemcmp wmemcpy wmemmove])\nAC_CHECK_FUNCS([_fseeki64 _get_timezone])\nAC_CHECK_DECL([cmtime_s],\n\t\t[AC_DEFINE(HAVE_CMTIME_S, 1, [cmtime_s function])],\n\t\t[],\n\t\t[#include <time.h>])\nAC_CHECK_DECL([gmtime_s],\n\t\t[AC_DEFINE(HAVE_GMTIME_S, 1, [gmtime_s function])],\n\t\t[],\n\t\t[#include <time.h>])\nAC_CHECK_TYPE([localtime_s],\n\t\t[AC_DEFINE(HAVE_LOCALTIME_S, 1, [localtime_s function])],\n\t\t[],\n\t\t[#include <time.h>])\nAC_CHECK_DECL([_mkgmtime],\n\t\t[AC_DEFINE(HAVE__MKGMTIME, 1, [_mkgmtime function])],\n\t\t[],\n\t\t[#include <time.h>])\n\n# detects cygwin-1.7, as opposed to older versions\nAC_CHECK_FUNCS([cygwin_conv_path])\n\n# DragonFly uses vfsconf, FreeBSD xvfsconf.\nAC_CHECK_TYPES(struct vfsconf,,,\n\t[#if HAVE_SYS_TYPES_H\n\t#include <sys/types.h>\n\t#endif\n\t#include <sys/mount.h>\n\t])\n\nAC_CHECK_TYPES(struct xvfsconf,,,\n\t[#if HAVE_SYS_TYPES_H\n\t#include <sys/types.h>\n\t#endif\n\t#include <sys/mount.h>\n\t])\n\nAC_CHECK_TYPES(struct statfs,,,\n\t[#if HAVE_SYS_TYPES_H\n\t#include <sys/types.h>\n\t#endif\n\t#include <sys/mount.h>\n\t])\n\n# There are several variants of readdir_r around; we only\n# accept the POSIX-compliant version.\nAC_LINK_IFELSE(\n [AC_LANG_PROGRAM([[#include <dirent.h>]],\n                  [[DIR *dir; struct dirent e, *r;\n\t\t    return(readdir_r(dir, &e, &r));]])],\n [AC_DEFINE(HAVE_READDIR_R,1,[Define to 1 if you have a POSIX compatible readdir_r])]\n)\n# dirfd can be either a function or a macro.\nAC_LINK_IFELSE(\n [AC_LANG_PROGRAM([[#include <dirent.h>\n                    DIR *dir;]],\n                  [[return(dirfd(dir));]])],\n [AC_DEFINE(HAVE_DIRFD,1,[Define to 1 if you have a dirfd function or macro])]\n)\n\n# FreeBSD's nl_langinfo supports an option to specify whether the\n# current locale uses month/day or day/month ordering.  It makes the\n# output a little prettier...\nAC_CHECK_DECL([D_MD_ORDER],\n[AC_DEFINE(HAVE_D_MD_ORDER, 1, [Define to 1 if nl_langinfo supports D_MD_ORDER])],\n[],\n[#if HAVE_LANGINFO_H\n#include <langinfo.h>\n#endif\n])\n\n# Check for dirent.d_namlen field explicitly\n# (This is a bit more straightforward than, if not quite as portable as,\n# the recipe given by the autoconf maintainers.)\nAC_CHECK_MEMBER(struct dirent.d_namlen,,,\n[#if HAVE_DIRENT_H\n#include <dirent.h>\n#endif\n])\n\n# Check for Extended Attributes support\nAC_ARG_ENABLE([xattr],\n\t\tAS_HELP_STRING([--disable-xattr],\n\t\t[Disable Extended Attributes support (default: check)]))\n\nif test \"x$enable_xattr\" != \"xno\"; then\n    AC_SEARCH_LIBS([setxattr], [attr gnu])\n    AC_CHECK_DECLS([EXTATTR_NAMESPACE_USER], [], [], [#include <sys/types.h>\n#include <sys/extattr.h>\n])\n    AC_CHECK_DECLS([XATTR_NOFOLLOW], [], [], [#include <sys/xattr.h>\n])\n    if test \"x$ac_cv_header_sys_xattr_h\" = \"xyes\" \\\n\t -a \"x$ac_cv_have_decl_XATTR_NOFOLLOW\" = \"xyes\"; then\n\t# Darwin extended attributes support\n\tAC_CACHE_VAL([ac_cv_archive_xattr_darwin],\n\t  [AC_CHECK_FUNCS(fgetxattr \\\n\t\t\t  flistxattr \\\n\t\t\t  fsetxattr \\\n\t\t\t  getxattr \\\n\t\t\t  listxattr \\\n\t\t\t  setxattr,\n\t  [ac_cv_archive_xattr_darwin=yes],\n\t  [ac_cv_archive_xattr_darwin=no])\n\t]\n      )\n    elif test \"x$ac_cv_header_sys_extattr_h\" = \"xyes\" \\\n           -a \"x$ac_cv_have_decl_EXTATTR_NAMESPACE_USER\" = \"xyes\"; then\n\t# FreeBSD extended attributes support\n\tAC_CACHE_VAL([ac_cv_archive_xattr_freebsd],\n\t  [AC_CHECK_FUNCS(extattr_get_fd \\\n\t\t\t  extattr_get_file \\\n\t\t\t  extattr_get_link \\\n\t\t\t  extattr_list_fd \\\n\t\t\t  extattr_list_file \\\n\t\t\t  extattr_list_link \\\n\t\t\t  extattr_set_fd \\\n\t\t\t  extattr_set_link,\n\t  [ac_cv_archive_xattr_freebsd=yes],\n\t  [ac_cv_archive_xattr_freebsd=no])\n\t  ]\n\t)\n    elif test \"x$ac_cv_header_sys_xattr_h\" = \"xyes\" \\\n\t   -o \"x$ac_cv_header_attr_xattr_h\" = \"xyes\"; then\n\t# Linux extended attributes support\n\tAC_CACHE_VAL([ac_cv_archive_xattr_linux],\n\t  [AC_CHECK_FUNCS(fgetxattr \\\n\t\t\t  flistxattr \\\n\t\t\t  fsetxattr \\\n\t\t\t  getxattr \\\n\t\t\t  lgetxattr \\\n\t\t\t  listxattr \\\n\t\t\t  llistxattr \\\n\t\t\t  lsetxattr,\n\t  [ac_cv_archive_xattr_linux=yes],\n\t  [ac_cv_archive_xattr_linux=no])\n\t]\n      )\n    elif test \"x$ac_cv_header_sys_ea_h\" = \"xyes\"; then\n\t# AIX extended attributes support\n\tAC_CACHE_VAL([ac_cv_archive_xattr_aix],\n\t  [AC_CHECK_FUNCS(fgetea \\\n\t\t\t  flistea \\\n\t\t\t  fsetea \\\n\t\t\t  getea \\\n\t\t\t  lgetea \\\n\t\t\t  listea \\\n\t\t\t  llistea \\\n\t\t\t  lsetea,\n\t  [ac_cv_archive_xattr_aix=yes],\n\t  [ac_cv_archive_xattr_aix=no])\n\t  ]\n\t)\n    fi\n\n    AC_MSG_CHECKING([for extended attributes support])\n    if test \"x$ac_cv_archive_xattr_linux\" = \"xyes\"; then\n\tAC_DEFINE([ARCHIVE_XATTR_LINUX], [1], [Linux xattr support])\n\tAC_MSG_RESULT([Linux])\n    elif test \"x$ac_cv_archive_xattr_darwin\" = \"xyes\"; then\n\tAC_DEFINE([ARCHIVE_XATTR_DARWIN], [1], [Darwin xattr support])\n\tAC_MSG_RESULT([Darwin])\n    elif test \"x$ac_cv_archive_xattr_freebsd\" = \"xyes\"; then\n\tAC_DEFINE([ARCHIVE_XATTR_FREEBSD], [1], [FreeBSD xattr support])\n\tAC_MSG_RESULT([FreeBSD])\n    elif test \"x$ac_cv_archive_xattr_aix\" = \"xyes\"; then\n\tAC_DEFINE([ARCHIVE_XATTR_AIX], [1], [AIX xattr support])\n\tAC_MSG_RESULT([AIX])\n    else\n\tAC_MSG_RESULT([none])\n    fi\nfi\n\n# Check for ACL support\n#\n# The ACL support in libarchive is written against the POSIX1e draft,\n# which was never officially approved and varies quite a bit across\n# platforms.  Worse, some systems have completely non-POSIX acl functions,\n# which makes the following checks rather more complex than I would like.\n#\nAC_ARG_ENABLE([acl],\n\t\tAS_HELP_STRING([--disable-acl],\n\t\t[Disable ACL support (default: check)]))\n\nif test \"x$enable_acl\" != \"xno\"; then\n    # Libacl\n    AC_CHECK_LIB([acl], [acl_get_file])\n\n    AC_CHECK_TYPES([acl_t, acl_entry_t, acl_permset_t, acl_tag_t], [], [], [\n      #if HAVE_SYS_TYPES_H\n      #include <sys/types.h>\n      #endif\n      #if HAVE_SYS_ACL_H\n      #include <sys/acl.h>\n      #endif\n    ])\n\n    AC_CHECK_LIB([richacl], [richacl_get_file])\n\n    AC_CHECK_TYPES([[struct richace], [struct richacl]], [], [], [\n      #if HAVE_SYS_RICHACL_H\n      #include <sys/richacl.h>\n      #endif\n    ])\n\n    # Solaris and derivates ACLs\n    AC_CHECK_FUNCS(acl facl)\n\n    if test \"x$ac_cv_lib_richacl_richacl_get_file\" = \"xyes\" \\\n\t -a \"x$ac_cv_type_struct_richace\" = \"xyes\" \\\n\t -a \"x$ac_cv_type_struct_richacl\" = \"xyes\"; then\n\tAC_CACHE_VAL([ac_cv_archive_acl_librichacl],\n\t  [AC_CHECK_FUNCS(richacl_alloc \\\n\t\t\t  richacl_equiv_mode \\\n\t\t\t  richacl_free \\\n\t\t\t  richacl_get_fd \\\n\t\t\t  richacl_get_file \\\n\t\t\t  richacl_set_fd \\\n\t\t\t  richacl_set_file,\n\t  [ac_cv_archive_acl_librichacl=yes], [ac_cv_archive_acl_librichacl=no])])\n    fi\n\n    if test \"x$ac_cv_func_acl\" = \"xyes\" \\\n\t -a \"x$ac_cv_func_facl\" = \"xyes\"; then\n\tAC_CHECK_TYPES([aclent_t], [], [], [[#include <sys/acl.h>]])\n\tif test \"x$ac_cv_type_aclent_t\" = \"xyes\"; then\n\t    AC_CACHE_VAL([ac_cv_archive_acl_sunos],\n\t      [AC_CHECK_DECLS([GETACL, SETACL, GETACLCNT],\n\t      [ac_cv_archive_acl_sunos=yes], [ac_cv_archive_acl_sunos=no],\n\t      [#include <sys/acl.h>])])\n\t    AC_CHECK_TYPES([ace_t], [], [], [[#include <sys/acl.h>]])\n\t    if test \"x$ac_cv_type_ace_t\" = \"xyes\"; then\n\t\tAC_CACHE_VAL([ac_cv_archive_acl_sunos_nfs4],\n\t\t  [AC_CHECK_DECLS([ACE_GETACL, ACE_SETACL, ACE_GETACLCNT],\n\t\t  [ac_cv_archive_acl_sunos_nfs4=yes],\n\t\t  [ac_cv_archive_acl_sonos_nfs4=no],\n\t\t  [#include <sys/acl.h>])])\n\t    fi\n\tfi\n    elif test \"x$ac_cv_type_acl_t\" = \"xyes\" \\\n\t -a \"x$ac_cv_type_acl_entry_t\" = \"xyes\" \\\n\t -a \"x$ac_cv_type_acl_permset_t\" = \"xyes\" \\\n\t -a \"x$ac_cv_type_acl_tag_t\" = \"xyes\"; then\n\t# POSIX.1e ACL functions\n\tAC_CACHE_VAL([ac_cv_posix_acl_funcs],\n\t  [AC_CHECK_FUNCS(acl_add_perm \\\n\t\t\t  acl_clear_perms \\\n\t\t\t  acl_create_entry \\\n\t\t\t  acl_delete_def_file \\\n\t\t\t  acl_free \\\n\t\t\t  acl_get_entry \\\n\t\t\t  acl_get_fd \\\n\t\t\t  acl_get_file \\\n\t\t\t  acl_get_permset \\\n\t\t\t  acl_get_qualifier \\\n\t\t\t  acl_get_tag_type \\\n\t\t\t  acl_init \\\n\t\t\t  acl_set_fd \\\n\t\t\t  acl_set_file \\\n\t\t\t  acl_set_qualifier \\\n\t\t\t  acl_set_tag_type,\n\t  [ac_cv_posix_acl_funcs=yes], [ac_cv_posix_acl_funcs=no])\n\t])\n\n\tAC_CHECK_FUNCS(acl_get_perm)\n\n\tif test \"x$ac_cv_posix_acl_funcs\" = \"xyes\" \\\n\t     -a \"x$ac_cv_header_acl_libacl_h\" = \"xyes\" \\\n\t     -a \"x$ac_cv_lib_acl_acl_get_file\" = \"xyes\" \\\n\t     -a \"x$ac_cv_func_acl_get_perm\"; then\n\t    AC_CACHE_VAL([ac_cv_archive_acl_libacl],\n\t      [ac_cv_archive_acl_libacl=yes])\n\t    AC_DEFINE([ARCHIVE_ACL_LIBACL], [1],\n\t      [POSIX.1e ACL support via libacl])\n\telse\n\t     # FreeBSD/Darwin\n\t     AC_CHECK_FUNCS(acl_add_flag_np \\\n\t\t\t    acl_clear_flags_np \\\n\t\t\t    acl_get_brand_np \\\n\t\t\t    acl_get_entry_type_np \\\n\t\t\t    acl_get_flag_np \\\n\t\t\t    acl_get_flagset_np \\\n\t\t\t    acl_get_fd_np \\\n\t\t\t    acl_get_link_np \\\n\t\t\t    acl_get_perm_np \\\n\t\t\t    acl_is_trivial_np \\\n\t\t\t    acl_set_entry_type_np \\\n\t\t\t    acl_set_fd_np \\\n\t\t\t    acl_set_link_np)\n\n\t    AC_CHECK_FUNCS(mbr_uid_to_uuid \\\n\t\t\t   mbr_uuid_to_id \\\n\t\t\t   mbr_gid_to_uuid)\n\n\t    AC_CHECK_DECLS([ACL_TYPE_EXTENDED, ACL_TYPE_NFS4, ACL_USER,\n\t      ACL_SYNCHRONIZE], [], [],\n\t      [#include <sys/types.h>\n\t       #include <sys/acl.h>])\n\t    if test \"x$ac_cv_posix_acl_funcs\" = \"xyes\" \\\n\t         -a \"x$ac_cv_func_acl_get_fd_np\" = \"xyes\" \\\n                 -a \"x$ac_cv_func_acl_get_perm\" != \"xyes\" \\\n\t         -a \"x$ac_cv_func_acl_get_perm_np\" = \"xyes\" \\\n\t         -a \"x$ac_cv_func_acl_set_fd_np\" = \"xyes\"; then\n\t\tif test \"x$ac_cv_have_decl_ACL_USER\" = \"xyes\"; then\n\t\t    AC_CACHE_VAL([ac_cv_archive_acl_freebsd],\n\t\t      [ac_cv_archive_acl_freebsd=yes])\n\t\t    if test \"x$ac_cv_have_decl_ACL_TYPE_NFS4\" = \"xyes\" \\\n\t\t         -a \"x$ac_cv_func_acl_add_flag_np\" = \"xyes\" \\\n\t\t         -a \"x$ac_cv_func_acl_get_brand_np\" = \"xyes\" \\\n\t\t         -a \"x$ac_cv_func_acl_get_entry_type_np\" = \"xyes\" \\\n\t\t         -a \"x$ac_cv_func_acl_get_flagset_np\" = \"xyes\" \\\n\t\t         -a \"x$ac_cv_func_acl_set_entry_type_np\" = \"xyes\"; then\n\t\t\tAC_CACHE_VAL([ac_cv_archive_acl_freebsd_nfs4],\n\t\t\t  [ac_cv_archive_acl_freebsd_nfs4=yes])\n\t\t    fi\n\t        elif test \"x$ac_cv_have_decl_ACL_TYPE_EXTENDED\" = \"xyes\" \\\n\t\t       -a \"x$ac_cv_func_acl_add_flag_np\" = \"xyes\" \\\n\t\t       -a \"x$ac_cv_func_acl_get_flagset_np\" = \"xyes\" \\\n\t\t       -a \"x$ac_cv_func_acl_get_link_np\" = \"xyes\" \\\n\t\t       -a \"x$ac_cv_func_acl_set_link_np\" = \"xyes\" \\\n\t\t       -a \"x$ac_cv_func_mbr_uid_to_uuid\" = \"xyes\" \\\n\t\t       -a \"x$ac_cv_func_mbr_uuid_to_id\" = \"xyes\" \\\n\t\t       -a \"x$ac_cv_func_mbr_gid_to_uuid\" = \"xyes\"; then\n\t\t    AC_CACHE_VAL([ac_cv_archive_acl_darwin],\n\t\t      [ac_cv_archive_acl_darwin=yes])\n\t        fi\n\t    fi\n\tfi\n    fi\n    AC_MSG_CHECKING([for ACL support])\n    if test \"x$ac_cv_archive_acl_libacl\" = \"xyes\" \\\n\t -a \"x$ac_cv_archive_acl_librichacl\" = \"xyes\"; then\n\tAC_MSG_RESULT([libacl (POSIX.1e) + librichacl (NFSv4)])\n\tAC_DEFINE([ARCHIVE_ACL_LIBACL], [1],\n\t  [Linux POSIX.1e ACL support via libacl])\n\tAC_DEFINE([ARCHIVE_ACL_LIBRICHACL], [1],\n\t  [Linux NFSv4 ACL support via librichacl])\n    elif test \"x$ac_cv_archive_acl_libacl\" = \"xyes\"; then\n\tAC_MSG_RESULT([libacl (POSIX.1e)])\n\tAC_DEFINE([ARCHIVE_ACL_LIBACL], [1],\n\t  [Linux POSIX.1e ACL support via libacl])\n    elif test \"x$ac_cv_archive_acl_librichacl\" = \"xyes\"; then\n\tAC_MSG_RESULT([librichacl (NFSv4)])\n\tAC_DEFINE([ARCHIVE_ACL_LIBRICHACL], [1],\n\t  [Linux NFSv4 ACL support via librichacl])\n    elif test \"x$ac_cv_archive_acl_darwin\" = \"xyes\"; then\n\tAC_DEFINE([ARCHIVE_ACL_DARWIN], [1], [Darwin ACL support])\n\tAC_MSG_RESULT([Darwin (limited NFSv4)])\n    elif test \"x$ac_cv_archive_acl_sunos\" = \"xyes\"; then\n\tAC_DEFINE([ARCHIVE_ACL_SUNOS], [1], [Solaris ACL support])\n\tif test \"x$ac_cv_archive_acl_sunos_nfs4\" = \"xyes\"; then\n\t    AC_DEFINE([ARCHIVE_ACL_SUNOS_NFS4], [1],\n\t      [Solaris NFSv4 ACL support])\n\t    AC_MSG_RESULT([Solaris (POSIX.1e and NFSv4)])\n\telse\n\t    AC_MSG_RESULT([Solaris (POSIX.1e)])\n\tfi\n    elif test \"x$ac_cv_archive_acl_freebsd\" = \"xyes\"; then\n\tAC_DEFINE([ARCHIVE_ACL_FREEBSD], [1], [FreeBSD ACL support])\n\tif test \"x$ac_cv_archive_acl_freebsd_nfs4\" = \"xyes\"; then\n\t    AC_DEFINE([ARCHIVE_ACL_FREEBSD_NFS4], [1],\n\t      [FreeBSD NFSv4 ACL support])\n\t    AC_MSG_RESULT([FreeBSD (POSIX.1e and NFSv4)])\n\telse\n\t    AC_MSG_RESULT([FreeBSD (POSIX.1e)])\n\tfi\n    else\n\tAC_MSG_RESULT([none])\n    fi\nfi\n\n\nAM_CONDITIONAL([INC_LINUX_ACL],\n  [test \"x$ac_cv_archive_acl_libacl\" = \"xyes\" \\\n     -o \"x$ac_cv_archive_acl_librichacl\" = \"xyes\"])\nAM_CONDITIONAL([INC_SUNOS_ACL], [test \"x$ac_cv_archive_acl_sunos\" = \"xyes\"])\nAM_CONDITIONAL([INC_DARWIN_ACL],\n\t  [test \"x$ac_cv_archive_acl_darwin\" = \"xyes\"])\nAM_CONDITIONAL([INC_FREEBSD_ACL],\n\t  [test \"x$ac_cv_archive_acl_freebsd\" = \"xyes\"])\n\n# Additional requirements\nAC_SYS_LARGEFILE\n\ndnl NOTE: Crypto checks must run last.\nAC_DEFUN([CRYPTO_CHECK], [\n  if test \"$found_$1\" != yes; then\n    saved_CPPFLAGS=\"$CPPFLAGS\"\n    CPPFLAGS=\"$CPPFLAGS -I. -I$srcdir -I$srcdir/libarchive\"\n    touch \"check_crypto_md.h\"\n    AC_MSG_CHECKING([support for ARCHIVE_CRYPTO_$1_$2])\n    AC_LINK_IFELSE([AC_LANG_SOURCE([\n#define ARCHIVE_$1_COMPILE_TEST\n#define ARCHIVE_CRYPTO_$1_$2\n#define PLATFORM_CONFIG_H \"check_crypto_md.h\"\n\n$(cat \"$srcdir/libarchive/archive_digest.c\")\n\nint\nmain(int argc, char **argv)\n{\n  archive_$3_ctx ctx;\n  archive_$3_init(&ctx);\n  archive_$3_update(&ctx, *argv, argc);\n  archive_$3_final(&ctx, NULL);\n  return 0;\n}\n])],\n    [ AC_MSG_RESULT([yes])\n      found_$1=yes\n      found_$2=yes\n      AC_DEFINE(ARCHIVE_CRYPTO_$1_$2, 1, [ $1 via ARCHIVE_CRYPTO_$1_$2 supported.])\n    ],\n    [ AC_MSG_RESULT([no])])\n    CPPFLAGS=\"$saved_CPPFLAGS\"\n    rm \"check_crypto_md.h\"\n  fi\n])\n\nAC_DEFUN([CRYPTO_CHECK_WIN], [\n  if test \"$found_$1\" != yes; then\n    AC_MSG_CHECKING([support for ARCHIVE_CRYPTO_$1_WIN])\n    AC_LINK_IFELSE([AC_LANG_SOURCE([\n#define ARCHIVE_$1_COMPILE_TEST\n#include <windows.h>\n#include <wincrypt.h>\n\nint\nmain(int argc, char **argv)\n{\n\t(void)argc;\n\t(void)argv;\n\n\treturn ($2);\n}\n])],\n    [ AC_MSG_RESULT([yes])\n      found_$1=yes\n      found_WIN=yes\n      AC_DEFINE(ARCHIVE_CRYPTO_$1_WIN, 1, [ $1 via ARCHIVE_CRYPTO_$1_WIN supported.])\n    ],\n    [ AC_MSG_RESULT([no])])\n  fi\n])\n\ncase \"$host_os\" in\n  *mingw* | *cygwin* | *msys*)\n\t;;\n  *)\n\tCRYPTO_CHECK(MD5, LIBC, md5)\n\tCRYPTO_CHECK(MD5, LIBSYSTEM, md5)\n\tCRYPTO_CHECK(RMD160, LIBC, rmd160)\n\tCRYPTO_CHECK(SHA1, LIBC, sha1)\n\tCRYPTO_CHECK(SHA1, LIBSYSTEM, sha1)\n\tCRYPTO_CHECK(SHA256, LIBC, sha256)\n\tCRYPTO_CHECK(SHA256, LIBC2, sha256)\n\tCRYPTO_CHECK(SHA256, LIBC3, sha256)\n\tCRYPTO_CHECK(SHA256, LIBSYSTEM, sha256)\n\tCRYPTO_CHECK(SHA384, LIBC, sha384)\n\tCRYPTO_CHECK(SHA384, LIBC2, sha384)\n\tCRYPTO_CHECK(SHA384, LIBC3, sha384)\n\tCRYPTO_CHECK(SHA384, LIBSYSTEM, sha384)\n\tCRYPTO_CHECK(SHA512, LIBC, sha512)\n\tCRYPTO_CHECK(SHA512, LIBC2, sha512)\n\tCRYPTO_CHECK(SHA512, LIBC3, sha512)\n\tCRYPTO_CHECK(SHA512, LIBSYSTEM, sha512)\n\t;;\nesac\n\nif test \"x$with_cng\" != \"xno\"; then\n    AC_CHECK_HEADERS([bcrypt.h],[\n        LIBS=\"$LIBS -lbcrypt\"\n    ],[],\n    [[#ifdef HAVE_WINDOWS_H\n    # include <windows.h>\n    #endif\n    ]])\nfi\n\nif test \"x$with_mbedtls\" = \"xyes\"; then\n    AC_CHECK_HEADERS([mbedtls/aes.h mbedtls/md.h mbedtls/pkcs5.h])\n    saved_LIBS=$LIBS\n    AC_CHECK_LIB(mbedcrypto,mbedtls_sha1_init)\n    CRYPTO_CHECK(MD5, MBEDTLS, md5)\n    CRYPTO_CHECK(RMD160, MBEDTLS, rmd160)\n    CRYPTO_CHECK(SHA1, MBEDTLS, sha1)\n    CRYPTO_CHECK(SHA256, MBEDTLS, sha256)\n    CRYPTO_CHECK(SHA384, MBEDTLS, sha384)\n    CRYPTO_CHECK(SHA512, MBEDTLS, sha512)\n    if test \"x$found_MBEDTLS\" != \"xyes\"; then\n      LIBS=$saved_LIBS\n    fi\nfi\n\nif test \"x$with_nettle\" = \"xyes\"; then\n    AC_CHECK_HEADERS([nettle/md5.h nettle/ripemd160.h nettle/sha.h])\n    AC_CHECK_HEADERS([nettle/pbkdf2.h nettle/aes.h nettle/hmac.h])\n    saved_LIBS=$LIBS\n    AC_CHECK_LIB(nettle,nettle_sha1_init)\n    CRYPTO_CHECK(MD5, NETTLE, md5)\n    CRYPTO_CHECK(RMD160, NETTLE, rmd160)\n    CRYPTO_CHECK(SHA1, NETTLE, sha1)\n    CRYPTO_CHECK(SHA256, NETTLE, sha256)\n    CRYPTO_CHECK(SHA384, NETTLE, sha384)\n    CRYPTO_CHECK(SHA512, NETTLE, sha512)\n    if test \"x$found_NETTLE\" != \"xyes\"; then\n      LIBS=$saved_LIBS\n    fi\nfi\n\nif test \"x$with_openssl\" != \"xno\"; then\n    AC_CHECK_HEADERS([openssl/evp.h])\n    saved_LIBS=$LIBS\n    LIBSREQUIRED=\"$LIBSREQUIRED${LIBSREQUIRED:+ }libcrypto\"\n    AC_CHECK_LIB(crypto,OPENSSL_config)\n    CRYPTO_CHECK(MD5, OPENSSL, md5)\n    CRYPTO_CHECK(RMD160, OPENSSL, rmd160)\n    CRYPTO_CHECK(SHA1, OPENSSL, sha1)\n    CRYPTO_CHECK(SHA256, OPENSSL, sha256)\n    CRYPTO_CHECK(SHA384, OPENSSL, sha384)\n    CRYPTO_CHECK(SHA512, OPENSSL, sha512)\n    AC_CHECK_FUNCS([PKCS5_PBKDF2_HMAC_SHA1])\nfi\n\nAC_SUBST(LIBSREQUIRED)\n\n# Probe libmd AFTER OpenSSL/libcrypto.\n# The two are incompatible and OpenSSL is more complete.\nAC_CHECK_HEADERS([md5.h ripemd.h sha.h sha256.h sha512.h])\nsaved_LIBS=$LIBS\nAC_CHECK_LIB(md,MD5Init)\nCRYPTO_CHECK(MD5, LIBMD, md5)\nCRYPTO_CHECK(RMD160, LIBMD, rmd160)\nCRYPTO_CHECK(SHA1, LIBMD, sha1)\nCRYPTO_CHECK(SHA256, LIBMD, sha256)\nCRYPTO_CHECK(SHA512, LIBMD, sha512)\nif test \"x$found_LIBMD\" != \"xyes\"; then\n  LIBS=$saved_LIBS\nfi\n\ncase \"$host_os\" in\n  *mingw* | *cygwin* | *msys*)\n\tCRYPTO_CHECK_WIN(MD5, CALG_MD5)\n\tCRYPTO_CHECK_WIN(SHA1, CALG_SHA1)\n\tCRYPTO_CHECK_WIN(SHA256, CALG_SHA_256)\n\tCRYPTO_CHECK_WIN(SHA384, CALG_SHA_384)\n\tCRYPTO_CHECK_WIN(SHA512, CALG_SHA_512)\n\t;;\nesac\n\ndnl Visibility annotations...\nsaved_CFLAGS=\"$CFLAGS\"\nCFLAGS=\"$CFLAGS -fvisibility=hidden -Werror\"\nAC_MSG_CHECKING(whether compiler supports visibility annotations)\nAC_LINK_IFELSE([AC_LANG_PROGRAM([\n                 int foo( void ) __attribute__((visibility(\"default\")));\n               ])],\n               [CFLAGS=\"$saved_CFLAGS -fvisibility=hidden -D__LIBARCHIVE_ENABLE_VISIBILITY\";\n                AC_MSG_RESULT(yes)],\n               [CFLAGS=\"$saved_CFLAGS\"\n                AC_MSG_RESULT(no)])\n\n# Ensure test directories are present if building out-of-tree\nAC_CONFIG_COMMANDS([mkdirs],\n\t\t   [mkdir -p libarchive/test tar/test cat/test cpio/test])\n\nAC_OUTPUT\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "cpio",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "libarchive",
          "type": "tree",
          "content": null
        },
        {
          "name": "libarchive_fe",
          "type": "tree",
          "content": null
        },
        {
          "name": "tar",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "unzip",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}