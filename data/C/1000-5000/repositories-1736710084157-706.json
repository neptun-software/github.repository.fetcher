{
  "metadata": {
    "timestamp": 1736710084157,
    "page": 706,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "c-ares/c-ares",
      "stars": 1902,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 4.7587890625,
          "content": "# Copyright (C) The c-ares project and its contributors\n# SPDX-License-Identifier: MIT\n\nenv:\n  CIRRUS_CLONE_DEPTH: 1\n  CMAKE_FLAGS: \"-DCMAKE_BUILD_TYPE=DEBUG -DCARES_STATIC=ON -DCARES_STATIC_PIC=ON -G Ninja\"\n  CMAKE_TEST_FLAGS: \"-DCARES_BUILD_TESTS=ON\"\n\ntask:\n  matrix:\n    - name: \"Debian arm64\"\n      env:\n        DIST: \"DEBIAN-ARM\"\n        LC_ALL: \"C\"\n        SCAN_BUILD: \"scan-build\"\n        MAKE: \"make\"\n# For whatever reason, ASAN and UBSAN are likely to result in compiler\n# termination on debian arm64.  I can't tell if this is really a crash\n# or something like the OOM killer:\n#    /usr/bin/c++ -DHAVE_CONFIG_H=1 -D_GNU_SOURCE -D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=700 -I/tmp/cirrus-ci-build/cmakebld/test -I/tmp/cirrus-ci-build/cmakebld -I/tmp/cirrus-ci-build/cmakebld/src/lib -I/tmp/cirrus-ci-build -I/tmp/cirrus-ci-build/src/lib -I/tmp/cirrus-ci-build/include -fsanitize=address -Wall -Wextra -Wcast-align -Wformat-security -Wmissing-declarations -Wmissing-format-attribute -Wpacked-bitfield-compat -Wredundant-decls -Wvla -Wno-unused-parameter -Wconversion -Wfloat-equal -Wsign-conversion -fdiagnostics-color=always -g -fno-omit-frame-pointer -O0 -DGTEST_HAS_PTHREAD=1 -std=c++14 -MD -MT test/CMakeFiles/arestest.dir/ares-test-parse-a.cc.o -MF test/CMakeFiles/arestest.dir/ares-test-parse-a.cc.o.d -o test/CMakeFiles/arestest.dir/ares-test-parse-a.cc.o -c /tmp/cirrus-ci-build/test/ares-test-parse-a.cc\n#    c++: fatal error: Killed signal terminated program cc1plus\n# Skip for now on arm.\n        BUILD_ASAN: \"no\"\n        BUILD_UBSAN: \"no\"\n        BUILD_ANALYZE: \"yes\"\n        TEST_DEBUGGER: \"gdb\"\n      arm_container:\n        image: debian:latest\n    - name: \"FreeBSD amd64\"\n      env:\n        DIST: \"FREEBSD\"\n        SCAN_BUILD: \"scan-build\"\n        TEST_DEBUGGER: \"lldb\"\n        MAKE: \"gmake\"\n        BUILD_ANALYZE: \"yes\"\n        TEST_SYMBOL_VISIBILITY: \"yes\"\n      freebsd_instance:\n        image_family: freebsd-14-1\n  matrix:\n    - name: \"CMAKE\"\n      env:\n        BUILD_TYPE: \"cmake\"\n    - name: \"AUTOTOOLS\"\n      env:\n        BUILD_TYPE: \"autotools\"\n    - name: \"ASAN\"\n      # ASAN on Linux automatically includes Leak Sanitizer\n      # FreeBSD just hangs trying to run tests, think it may be trying to run leak sanitizer\n      only_if: $BUILD_ASAN == 'yes'\n      env:\n        BUILD_TYPE: \"asan\"\n        CC: \"clang\"\n        TEST_DEBUGGER: \"none\"\n        CONFIG_OPTS: \"--enable-debug\"\n        CFLAGS: \"-fsanitize=address\"\n        CXXFLAGS: \"-fsanitize=address\"\n        LDFLAGS: \"-fsanitize=address\"\n    - name: \"UBSAN\"\n      # FreeBSD just hangs trying to run tests, think it may be trying to run leak sanitizer\n      only_if: $BUILD_UBSAN == 'yes'\n      env:\n        BUILD_TYPE: \"ubsan\"\n        CC: \"clang\"\n        TEST_DEBUGGER: \"none\"\n        CONFIG_OPTS: \"--enable-debug\"\n        CFLAGS: \"-fsanitize=undefined -fno-sanitize-recover\"\n        CXXFLAGS: \"-fsanitize=undefined -fno-sanitize-recover\"\n        LDFLAGS: \"-fsanitize=undefined\"\n    - name: \"ANALYZE\"\n      only_if: $BUILD_ANALYZE == 'yes'\n      env:\n        BUILD_TYPE: \"analyze\"\n        CC: \"clang\"\n        TEST_DEBUGGER: \"lldb\"\n        SCAN_WRAP: \"${SCAN_BUILD} -v --status-bugs\"\n        CONFIG_OPTS: \"--enable-debug --disable-tests\"\n        CMAKE_TEST_FLAGS: \"-DCARES_BUILD_TESTS=OFF\"\n    - name: \"VALGRIND\"\n      # FreeBSD just hangs trying to run tests, think it may be trying to run leak sanitizer\n      only_if: $BUILD_VALGRIND == 'yes'\n      env:\n        BUILD_TYPE: \"valgrind\"\n        TEST_WRAP: \"valgrind --leak-check=full\"\n        TEST_FILTER: \"-4 --gtest_filter=-*Container*:-*LiveSearchANY*\"\n\n  install_script:\n    - |\n      case \"${DIST}\" in\n        UBUNTU|DEBIAN*)\n          export DEBIAN_FRONTEND=noninteractive && \\\n          apt-get update && \\\n          apt-get install -y cmake ninja-build autoconf automake libtool g++ libgmock-dev pkg-config\n          case \"${BUILD_TYPE}\" in\n            asan|lsan|ubsan)\n              apt-get install -yq clang lldb\n              ;;\n            analyze)\n              apt-get install -yq clang clang-tools lldb\n              ;;\n            valgrind)\n              apt-get install -yq valgrind\n              ;;\n            *)\n              apt-get install -yq gdb\n              ;;\n          esac\n          ;;\n        FREEBSD)\n          # pkg upgrade -y && \\\n          pkg install -y bash cmake ninja googletest pkgconf llvm gmake\n          ln -sf /usr/local/bin/bash /bin/bash\n          # Enable TCP FastOpen\n          sysctl net.inet.tcp.fastopen.server_enable=1\n          sysctl net.inet.tcp.fastopen.client_enable=1\n          case \"${BUILD_TYPE}\" in\n            autotools)\n              pkg install -y autoconf automake libtool\n              ;;\n          esac\n          ;;\n      esac\n\n  script:\n    - ./ci/build.sh\n    - ./ci/test.sh\n    - if [ \"$BUILD_TYPE\" = \"autotools\" -a \"$DIST\" = \"DEBIAN\" ]; then ./ci/distcheck.sh ; fi\n\n"
        },
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 2.5361328125,
          "content": "# Copyright (C) The c-ares project and its contributors\n# SPDX-License-Identifier: MIT\n---\nLanguage: Cpp\n\n# -------\n# These are the most likely ones you might want to edit\nColumnLimit: 80\nBracedInitializerIndentWidth: 2\nContinuationIndentWidth: 2\nConstructorInitializerIndentWidth: 2\nPPIndentWidth: 2\nIndentWidth: 2\nMaxEmptyLinesToKeep: 2\nTabWidth: 2\nUseTab: Never\n# --------\n\nBasedOnStyle: LLVM\nAlignAfterOpenBracket: Align\nAlignArrayOfStructures: Left\nAlignConsecutiveAssignments:\n  Enabled: true\n  AcrossEmptyLines: false\n  AcrossComments: false\n  AlignCompound: true\n  PadOperators: true\nAlignConsecutiveBitFields: Consecutive\nAlignConsecutiveDeclarations: AcrossEmptyLinesAndComments\nAlignConsecutiveMacros: Consecutive\nAlignEscapedNewlines: Left\nAlignOperands: Align\nAlignTrailingComments:\n  Kind: Always\n  OverEmptyLines: 1\nAllowAllArgumentsOnNextLine: false\nAllowAllParametersOfDeclarationOnNextLine: false\nAllowShortBlocksOnASingleLine: Never\nAllowShortCaseLabelsOnASingleLine: false\nAllowShortEnumsOnASingleLine: false\nAllowShortFunctionsOnASingleLine: None\nAllowShortIfStatementsOnASingleLine: Never\nAllowShortLoopsOnASingleLine: false\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nBinPackArguments: true\nBinPackParameters: true\nBitFieldColonSpacing: Both\nBreakBeforeBraces: Custom\nBraceWrapping:\n  AfterCaseLabel: true\n  AfterControlStatement: Never\n  AfterEnum: false\n  AfterFunction: true\n  AfterStruct: false\n  AfterUnion: false\n  AfterExternBlock: false\n  BeforeElse: false\n  BeforeWhile: false\n  SplitEmptyFunction: true\nBreakBeforeBinaryOperators: None\nBreakBeforeTernaryOperators: true\nBreakStringLiterals: true\nCpp11BracedListStyle: false\nIncludeBlocks: Preserve\nIndentCaseBlocks: true\nIndentCaseLabels: true\nIndentGotoLabels: false\nIndentPPDirectives: AfterHash\nIndentWrappedFunctionNames: true\nInsertBraces: true\nInsertNewlineAtEOF: true\nInsertTrailingCommas: None\nKeepEmptyLinesAtEOF: false\nKeepEmptyLinesAtTheStartOfBlocks: false\nLineEnding: LF\nPackConstructorInitializers: BinPack\nPointerAlignment: Right\nQualifierAlignment: Leave\nReferenceAlignment: Pointer\nReflowComments: true\nRemoveBracesLLVM: false\nRemoveParentheses: Leave\nRemoveSemicolon: true\nSeparateDefinitionBlocks: Always\nSortIncludes: Never\nSpaceAfterCStyleCast: false\nSpaceAroundPointerQualifiers: Before\nSpaceBeforeAssignmentOperators: true\nSpaceBeforeCaseColon: false\nSpaceBeforeParens: ControlStatements\nSpaceBeforeSquareBrackets: false\nSpaceInEmptyBlock: false\nSpaceInEmptyParentheses: false\nSpacesBeforeTrailingComments: 2\nSpacesInParens: Never\nSpacesInSquareBrackets: false\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.025390625,
          "content": "test/** linguist-vendored\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.755859375,
          "content": ".deps\n.libs\n*.lib\n*.pdb\n*.dll\n*.exe\n*.obj\n*.map\n.*.swp\nDebug\nRelease\n*.exp\nMakefile\nMakefile.in\naclocal.m4\nautom4te.cache\nconfig.guess\nconfig.log\nconfig.status\nconfig.sub\nconfigure\ndepcomp\nlibtool\nltmain.sh\ncompile\nlibcares.pc\nmissing\ntest-driver\nc-ares-*.tar.gz\nINSTALL\ninstall-sh\n*.a\n*.o\n*.lo\n*.la\n*.gcno\n*.gcda\n*.gcov\nc-ares---coverage.info\nc-ares---coverage\nmkinstalldirs\ntags\nTAGS\n*~\naclocal.m4.bak\nacountry\nadig\nahost\nares_build.h\nares_config.h\nares_config.h.in\nstamp-h1\nstamp-h2\nares_*pdf\nCHANGES.dist\nc-ares-*.tar.gz.asc\nares_parse_mx_reply.pdf\n/[0-9]*.patch\nbuild\nbin/\nCMakeFiles/\nCMakeCache.txt\nCPackConfig.cmake\nCPackSourceConfig.cmake\nc-ares-config.cmake\nc-ares-config-version.cmake\nMakefile.inc.cmake\ncmake_install.cmake\naminclude_static.am\nsrc/lib/*/.dirstamp\n"
        },
        {
          "name": ".reuse",
          "type": "tree",
          "content": null
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 1.228515625,
          "content": "c-ares is based on ares, and these are the people that have worked on it since\nthe fork was made:\n\nAlbert Chin\nAlex Loukissas\nAlexander Klauer\nAlexander Lazic\nAlexey Simak\nAndreas Rieke\nAndrew Andkjar\nAndrew Ayer\nAndrew C. Morrow\nAshish Sharma\nBen Greear\nBen Noordhuis\nBogDan Vatra\nBrad House\nBrad Spencer\nBram Matthys\nChris Araman\nDan Fandrich\nDaniel Johnson\nDaniel Stenberg\nDavid Drysdale\nDavid Stuart\nDenis Bilenko\nDima Tisnek\nDirk Manske\nDominick Meglio\nDoug Goldstein\nDoug Kwan\nDuncan Wilcox\nEino Tuominen\nErik Kline\nFedor Indutny\nFrederic Germain\nGeert Uytterhoeven\nGeorge Neill\nGisle Vanem\nGoogle LLC\nGregor Jasny\nGuenter Knauf\nGuilherme Balena Versiani\nGunter Knauf\nHenrik Stoerner\nJakub Hrozek\nJames Bursa\nJérémy Lal\nJohn Schember\nKeith Shaw\nLei Shi\nMarko Kreen\nMichael Wallner\nMike Crowe\nNick Alcock\nNick Mathewson\nNicolas \"Pixel\" Noble\nNing Dong\nOleg Pudeyev\nPatrick Valsecchi\nPatrik Thunstrom\nPaul Saab\nPeter Pentchev\nPhil Blundell\nPoul Thomas Lomholt\nRavi Pratap\nRobin Cornelius\nSaúl Ibarra Corretgé\nSebastian at basti79.de\nShmulik Regev\nStefan Bühler\nSteinar H. Gunderson\nSvante Karlsson\nTofu Linden\nTom Hughes\nTor Arntsen\nViktor Szakats\nVlad Dinulescu\nWilliam Ahern\nYang Tse\nhpopescu at ixiacom.com\nliren at vivisimo.com\nnordsturm\nsaghul\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 37.7138671875,
          "content": "# Copyright (C) The c-ares project and its contributors\n# SPDX-License-Identifier: MIT\nCMAKE_MINIMUM_REQUIRED (VERSION 3.5.0...3.10.0)\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/\")\n\nINCLUDE (CheckIncludeFiles)\nINCLUDE (CheckTypeSize)\nINCLUDE (CheckFunctionExists)\nINCLUDE (CheckSymbolExists)\nINCLUDE (CheckCSourceCompiles)\nINCLUDE (CheckStructHasMember)\nINCLUDE (CheckLibraryExists)\n\nPROJECT (c-ares LANGUAGES C VERSION \"1.34.4\" )\n\n# Set this version before release\nSET (CARES_VERSION \"${PROJECT_VERSION}\")\n\nINCLUDE (GNUInstallDirs) # include this *AFTER* PROJECT(), otherwise paths are wrong.\n\n# This is for libtool compatibility, and specified in a form that is easily\n# translatable from libtool (even if the actual form doesn't make sense).\n# For instance, in an autotools project, in Makefile.am there is a line that\n# contains something like:\n#     -version-info 4:0:2\n# This breaks down into sections of current:revision:age\n# This then generates a version of  \"(current-age).age.revision\"  with an\n# interface version of \"(current-age)\"\n# For example, a version of 4:0:2 would generate output such as:\n#    libname.so   -> libname.so.2\n#    libname.so.2 -> libname.so.2.2.0\nSET (CARES_LIB_VERSIONINFO \"21:3:19\")\n\n\nOPTION (CARES_STATIC        \"Build as a static library\"                                             OFF)\nOPTION (CARES_SHARED        \"Build as a shared library\"                                             ON)\nOPTION (CARES_INSTALL       \"Create installation targets (chain builders may want to disable this)\" ON)\nOPTION (CARES_STATIC_PIC    \"Build the static library as PIC (position independent)\"                OFF)\nOPTION (CARES_BUILD_TESTS   \"Build and run tests\"                                                   OFF)\nOPTION (CARES_BUILD_CONTAINER_TESTS \"Build and run container tests (implies CARES_BUILD_TESTS, Linux only)\" OFF)\nOPTION (CARES_BUILD_TOOLS   \"Build tools\"                                                           ON)\nOPTION (CARES_SYMBOL_HIDING \"Hide private symbols in shared libraries\"                              OFF)\nOPTION (CARES_THREADS       \"Build with thread-safety support\"                                      ON)\nOPTION (CARES_COVERAGE      \"Build for code coverage\"                                               OFF)\nSET    (CARES_RANDOM_FILE \"/dev/urandom\" CACHE STRING \"Suitable File / Device Path for entropy, such as /dev/urandom\")\n\n\n# Tests require a C++14 compiler\nIF (CARES_BUILD_TESTS OR CARES_BUILD_CONTAINER_TESTS)\n\tset(CMAKE_CXX_STANDARD 14)\n\tset(CMAKE_CXX_STANDARD_REQUIRED TRUE)\n\tset(CMAKE_CXX_EXTENSIONS FALSE)\n\tenable_language(CXX)\nENDIF ()\n\n# Tests require static to be enabled on Windows to be able to access otherwise hidden symbols\nIF ((CARES_BUILD_TESTS OR CARES_BUILD_CONTAINER_TESTS) AND (NOT CARES_STATIC) AND WIN32)\n\tSET (CARES_STATIC ON)\n\tSET (CARES_STATIC_PIC ON)\n\tMESSAGE (WARNING \"Static building was requested be disabled, but re-enabled to support tests\")\nENDIF ()\n\nINCLUDE (EnableWarnings)\n\nIF (MSVC)\n\t# allow linking against the static runtime library in msvc\n\tOPTION (CARES_MSVC_STATIC_RUNTIME \"Link against the static runtime library\" OFF)\n\tIF (CARES_MSVC_STATIC_RUNTIME)\n\t\t# CMAKE_CONFIGURATION_TYPES is empty on non-IDE generators (Ninja, NMake)\n\t\t# and that's why we also use CMAKE_BUILD_TYPE to cover for those generators.\n\t\t# For IDE generators, CMAKE_BUILD_TYPE is usually empty\n\t\tFOREACH (config_type ${CMAKE_CONFIGURATION_TYPES} ${CMAKE_BUILD_TYPE})\n\t\t\tSTRING (TOUPPER ${config_type} upper_config_type)\n\t\t\tSET (flag_var \"CMAKE_C_FLAGS_${upper_config_type}\")\n\t\t\tIF (${flag_var} MATCHES \"/MD\")\n\t\t\t\tSTRING (REGEX REPLACE \"/MD\" \"/MT\" ${flag_var} \"${${flag_var}}\")\n\t\t\tENDIF ()\n\t\tENDFOREACH ()\n\n\t\t# clean up\n\t\tSET (upper_config_type)\n\t\tSET (config_type)\n\t\tSET (flag_var)\n\tENDIF ()\nENDIF ()\n\nIF (CARES_SYMBOL_HIDING)\n\tIF (CMAKE_VERSION VERSION_LESS 3.12)\n\t\tMESSAGE (FATAL_ERROR \"Hiding symbols requires CMake 3.12\")\n\tENDIF ()\n\tCMAKE_POLICY (SET CMP0063 NEW)\nENDIF ()\n\n# Keep build organized, but only if it is the top-level project.\n# CMake 3.21 or later has PROJECT_IS_TOP_LEVEL, but we aren't yet depending on\n# that version.\nIF (CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)\n\tSET (CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}\")\n\tSET (CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}\")\n\tSET (CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}\")\n\tSET (CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY \"${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\")\nENDIF ()\n\n# Destinations for installing different kinds of targets (pass to install command).\nSET (TARGETS_INST_DEST\n\tRUNTIME DESTINATION  ${CMAKE_INSTALL_BINDIR}\n\tBUNDLE DESTINATION   ${CMAKE_INSTALL_BINDIR}\n\tLIBRARY DESTINATION  ${CMAKE_INSTALL_LIBDIR}\n\tARCHIVE DESTINATION  ${CMAKE_INSTALL_LIBDIR}\n)\n\n# Function in Library\n# CHECK_LIBRARY_EXISTS can't be used as it will return true if the function\n# is found in a different required/dependent library.\nMACRO (CARES_FUNCTION_IN_LIBRARY func lib var)\n\tSET (_ORIG_FIL_CMAKE_REQUIRED_LIBRARIES \"${CMAKE_REQUIRED_LIBRARIES}\")\n\tSET (CMAKE_REQUIRED_LIBRARIES )\n\tCHECK_FUNCTION_EXISTS (\"${func}\" \"_CARES_FUNC_IN_LIB_GLOBAL_${func}\")\n\tSET (CMAKE_REQUIRED_LIBRARIES \"${_ORIG_FIL_CMAKE_REQUIRED_LIBRARIES}\")\n\n\tIF (\"${_CARES_FUNC_IN_LIB_GLOBAL_${func}}\")\n\t\tSET (${var} FALSE)\n\tELSE ()\n\t\tCHECK_LIBRARY_EXISTS (\"${lib}\" \"${func}\" \"\" ${var})\n\tENDIF ()\nENDMACRO ()\n\n# Look for dependent/required libraries\nCARES_FUNCTION_IN_LIBRARY (res_servicename resolv HAVE_RES_SERVICENAME_IN_LIBRESOLV)\nIF (HAVE_RES_SERVICENAME_IN_LIBRESOLV)\n\tSET (HAVE_LIBRESOLV 1)\nENDIF ()\n\nIF (APPLE)\n\tCHECK_C_SOURCE_COMPILES (\"\n\t#include <stdio.h>\n\t#include <TargetConditionals.h>\n\tint main() {\n#if TARGET_OS_IPHONE == 0\n#error Not an iPhone target\n#endif\nreturn 0;\n\t}\n\t\"\n\tIOS)\n\n\tCHECK_C_SOURCE_COMPILES (\"\n#include <stdio.h>\n#include <TargetConditionals.h>\n\tint main() {\n#if TARGET_OS_IPHONE == 0 || __IPHONE_OS_VERSION_MIN_REQUIRED < 100000\n#  error Not iOS v10\n#endif\nreturn 0;\n\t}\n\t\"\n\tIOS_V10)\n\n\tCHECK_C_SOURCE_COMPILES (\"\n#include <stdio.h>\n#include <AvailabilityMacros.h>\n#ifndef MAC_OS_X_VERSION_10_12\n#  define MAC_OS_X_VERSION_10_12 101200\n#endif\n\tint main() {\n#if MAC_OS_X_VERSION_MIN_REQUIRED < MAC_OS_X_VERSION_10_12\n#  error Not MacOSX 10.12 or higher\n#endif\nreturn 0;\n\t}\n\t\"\n\tMACOS_V1012)\nENDIF ()\n\nIF (ZOS AND HAVE_LIBRESOLV)\n\tSET (CARES_USE_LIBRESOLV 1)\nENDIF()\n\n\nCARES_FUNCTION_IN_LIBRARY (gethostbyname nsl HAVE_LIBNSL)\nCARES_FUNCTION_IN_LIBRARY (gethostbyname socket HAVE_GHBN_LIBSOCKET)\nCARES_FUNCTION_IN_LIBRARY (gethostbyname network HAVE_LIBNETWORK)\nCARES_FUNCTION_IN_LIBRARY (socket socket HAVE_SOCKET_LIBSOCKET)\nIF (HAVE_GHBN_LIBSOCKET OR HAVE_SOCKET_LIBSOCKET)\n\tSET(HAVE_LIBSOCKET TRUE)\nENDIF ()\nCARES_FUNCTION_IN_LIBRARY (socket network HAVE_LIBNETWORK)\nCARES_FUNCTION_IN_LIBRARY (clock_gettime rt HAVE_LIBRT)\n\n\n# Look for necessary includes\nCHECK_INCLUDE_FILES (AvailabilityMacros.h  HAVE_AVAILABILITYMACROS_H)\nCHECK_INCLUDE_FILES (sys/types.h           HAVE_SYS_TYPES_H)\nCHECK_INCLUDE_FILES (sys/random.h          HAVE_SYS_RANDOM_H)\nCHECK_INCLUDE_FILES (sys/socket.h          HAVE_SYS_SOCKET_H)\nCHECK_INCLUDE_FILES (sys/sockio.h          HAVE_SYS_SOCKIO_H)\nCHECK_INCLUDE_FILES (arpa/inet.h           HAVE_ARPA_INET_H)\nCHECK_INCLUDE_FILES (arpa/nameser_compat.h HAVE_ARPA_NAMESER_COMPAT_H)\nCHECK_INCLUDE_FILES (arpa/nameser.h        HAVE_ARPA_NAMESER_H)\nCHECK_INCLUDE_FILES (assert.h              HAVE_ASSERT_H)\nCHECK_INCLUDE_FILES (errno.h               HAVE_ERRNO_H)\nCHECK_INCLUDE_FILES (fcntl.h               HAVE_FCNTL_H)\nCHECK_INCLUDE_FILES (inttypes.h            HAVE_INTTYPES_H)\nCHECK_INCLUDE_FILES (limits.h              HAVE_LIMITS_H)\nCHECK_INCLUDE_FILES (malloc.h              HAVE_MALLOC_H)\nCHECK_INCLUDE_FILES (memory.h              HAVE_MEMORY_H)\nCHECK_INCLUDE_FILES (netdb.h               HAVE_NETDB_H)\nCHECK_INCLUDE_FILES (netinet/in.h          HAVE_NETINET_IN_H)\nCHECK_INCLUDE_FILES (netinet6/in6.h        HAVE_NETINET6_IN6_H)\n# On old MacOS SDK versions, you must include sys/socket.h before net/if.h\nIF (HAVE_SYS_SOCKET_H)\n  CHECK_INCLUDE_FILES (\"sys/socket.h;net/if.h\"  HAVE_NET_IF_H)\nELSE ()\n  CHECK_INCLUDE_FILES (net/if.h                 HAVE_NET_IF_H)\nENDIF ()\nCHECK_INCLUDE_FILES (signal.h              HAVE_SIGNAL_H)\nCHECK_INCLUDE_FILES (socket.h              HAVE_SOCKET_H)\nCHECK_INCLUDE_FILES (stdbool.h             HAVE_STDBOOL_H)\nCHECK_INCLUDE_FILES (stdint.h              HAVE_STDINT_H)\nCHECK_INCLUDE_FILES (stdlib.h              HAVE_STDLIB_H)\nCHECK_INCLUDE_FILES (strings.h             HAVE_STRINGS_H)\nCHECK_INCLUDE_FILES (string.h              HAVE_STRING_H)\nCHECK_INCLUDE_FILES (stropts.h             HAVE_STROPTS_H)\nCHECK_INCLUDE_FILES (sys/ioctl.h           HAVE_SYS_IOCTL_H)\nCHECK_INCLUDE_FILES (sys/param.h           HAVE_SYS_PARAM_H)\nCHECK_INCLUDE_FILES (sys/select.h          HAVE_SYS_SELECT_H)\nCHECK_INCLUDE_FILES (sys/stat.h            HAVE_SYS_STAT_H)\nCHECK_INCLUDE_FILES (sys/time.h            HAVE_SYS_TIME_H)\nCHECK_INCLUDE_FILES (sys/uio.h             HAVE_SYS_UIO_H)\nCHECK_INCLUDE_FILES (sys/event.h           HAVE_SYS_EVENT_H)\nCHECK_INCLUDE_FILES (sys/epoll.h           HAVE_SYS_EPOLL_H)\nCHECK_INCLUDE_FILES (ifaddrs.h             HAVE_IFADDRS_H)\nCHECK_INCLUDE_FILES (time.h                HAVE_TIME_H)\nCHECK_INCLUDE_FILES (poll.h                HAVE_POLL_H)\nCHECK_INCLUDE_FILES (dlfcn.h               HAVE_DLFCN_H)\nCHECK_INCLUDE_FILES (unistd.h              HAVE_UNISTD_H)\n# On OpenBSD, you must include sys/types.h before netinet/tcp.h\nIF (HAVE_SYS_TYPES_H)\n  CHECK_INCLUDE_FILES (\"sys/types.h;netinet/tcp.h\"         HAVE_NETINET_TCP_H)\nELSE ()\n  CHECK_INCLUDE_FILES (netinet/tcp.h                       HAVE_NETINET_TCP_H)\nENDIF ()\n\n# Include order matters for these windows files.\n# As cygwin environment has both socket.h and winsock2.h\n# headers check WIN32 not to include the later one here\nIF (WIN32)\nCHECK_INCLUDE_FILES (\"winsock2.h;windows.h\"            HAVE_WINSOCK2_H)\nCHECK_INCLUDE_FILES (\"winsock2.h;ws2tcpip.h;windows.h\" HAVE_WS2TCPIP_H)\nCHECK_INCLUDE_FILES (\"winsock2.h;iphlpapi.h;windows.h\" HAVE_IPHLPAPI_H)\nCHECK_INCLUDE_FILES (\"winsock2.h;netioapi.h;windows.h\" HAVE_NETIOAPI_H)\nCHECK_INCLUDE_FILES (\"winsock2.h;mswsock.h;windows.h\"  HAVE_MSWSOCK_H)\nCHECK_INCLUDE_FILES (\"winsock.h;windows.h\"             HAVE_WINSOCK_H)\nCHECK_INCLUDE_FILES (windows.h                         HAVE_WINDOWS_H)\nCHECK_INCLUDE_FILES (\"windows.h;winternl.h\"            HAVE_WINTERNL_H)\nCHECK_INCLUDE_FILES (\"windows.h;ntdef.h\"               HAVE_NTDEF_H)\nCHECK_INCLUDE_FILES (\"windows.h;ntdef.h;ntstatus.h\"    HAVE_NTSTATUS_H)\n\n\nENDIF ()\n\n# Set system-specific compiler flags\nIF (CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n\tLIST (APPEND SYSFLAGS -D_DARWIN_C_SOURCE)\nELSEIF (CMAKE_SYSTEM_NAME STREQUAL \"Linux\" OR CMAKE_SYSTEM_NAME STREQUAL \"Android\")\n\tLIST (APPEND SYSFLAGS -D_GNU_SOURCE -D_POSIX_C_SOURCE=200809L -D_XOPEN_SOURCE=700)\nELSEIF (CMAKE_SYSTEM_NAME STREQUAL \"SunOS\")\n\tLIST (APPEND SYSFLAGS -D__EXTENSIONS__ -D_REENTRANT -D_XOPEN_SOURCE=600)\nELSEIF (CMAKE_SYSTEM_NAME STREQUAL \"AIX\")\n\tLIST (APPEND SYSFLAGS -D_ALL_SOURCE -D_XOPEN_SOURCE=700 -D_USE_IRS)\nELSEIF (CMAKE_SYSTEM_NAME STREQUAL \"FreeBSD\")\n\t# Don't define _XOPEN_SOURCE on FreeBSD, it actually reduces visibility instead of increasing it\nELSEIF (CMAKE_SYSTEM_NAME STREQUAL \"QNX\")\n\tLIST (APPEND SYSFLAGS -D_QNX_SOURCE)\nELSEIF (WIN32)\n\tLIST (APPEND SYSFLAGS -DWIN32_LEAN_AND_MEAN -D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE)\n\tIF (NOT CMAKE_C_FLAGS MATCHES \".*-D_WIN32_WINNT=.*\")\n\t\tLIST (APPEND SYSFLAGS -D_WIN32_WINNT=0x0602)\n\tENDIF ()\nENDIF ()\nADD_DEFINITIONS(${SYSFLAGS})\n\n\n# Tell C-Ares about libraries to depend on\nIF (HAVE_LIBRESOLV)\n\tLIST (APPEND CARES_DEPENDENT_LIBS resolv)\nENDIF ()\nIF (HAVE_LIBNSL)\n\tLIST (APPEND CARES_DEPENDENT_LIBS nsl)\nENDIF ()\nIF (HAVE_LIBSOCKET)\n\tLIST (APPEND CARES_DEPENDENT_LIBS socket)\nENDIF ()\nIF (HAVE_LIBNETWORK)\n\tLIST (APPEND CARES_DEPENDENT_LIBS network)\nENDIF ()\nIF (HAVE_LIBRT)\n\tLIST (APPEND CARES_DEPENDENT_LIBS rt)\nENDIF ()\nIF (WIN32)\n\tLIST (APPEND CARES_DEPENDENT_LIBS ws2_32 advapi32 iphlpapi)\nENDIF ()\n\n\n# When checking for symbols, we need to make sure we set the proper\n# headers, libraries, and definitions for the detection to work properly\n# CMAKE_REQUIRED_DEFINITIONS, CMAKE_REQUIRED_LIBRARIES, and\n# CMAKE_EXTRA_INCLUDE_FILES.  When we're done with the detection, we'll\n# restore them to their original values (otherwise a parent project\n# that tries to set these won't be maintained, see Issue #729)\nSET (ORIG_CMAKE_REQUIRED_DEFINITIONS ${CMAKE_REQUIRED_DEEFINITIONS})\nSET (ORIG_CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES})\nSET (ORIG_CMAKE_EXTRA_INCLUDE_FILES ${CMAKE_EXTRA_INCLUDE_FILES})\n\nSET (CMAKE_REQUIRED_DEFINITIONS ${SYSFLAGS})\nLIST (APPEND CMAKE_REQUIRED_LIBRARIES ${CARES_DEPENDENT_LIBS})\n\nMACRO (CARES_EXTRAINCLUDE_IFSET var include)\n\tIF (${var})\n\t\tLIST (APPEND CMAKE_EXTRA_INCLUDE_FILES ${include})\n\tENDIF ()\nENDMACRO ()\n\nCARES_EXTRAINCLUDE_IFSET (HAVE_AVAILABILITYMACROS_H AvailabilityMacros.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_STDBOOL_H      stdbool.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_SYS_TYPES_H    sys/types.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_ARPA_INET_H    arpa/inet.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_ARPA_NAMESER_H arpa/nameser.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_NETDB_H        netdb.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_NET_IF_H       net/if.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_IFADDRS_H      ifaddrs.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_NETINET_IN_H   netinet/in.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_NETINET6_IN6_H netinet6/in6.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_NETINET_TCP_H  netinet/tcp.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_SIGNAL_H       signal.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_STDLIB_H       stdlib.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_STRING_H       string.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_STRINGS_H      strings.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_SYS_IOCTL_H    sys/ioctl.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_SYS_RANDOM_H   sys/random.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_SYS_SELECT_H   sys/select.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_SYS_SOCKET_H   sys/socket.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_SYS_SOCKIO_H\tsys/sockio.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_SYS_TIME_H     sys/time.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_SYS_STAT_H     sys/stat.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_SYS_UIO_H      sys/uio.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_SYS_EVENT_H    sys/event.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_SYS_EPOLL_H    sys/epoll.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_TIME_H         time.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_POLL_H         poll.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_FCNTL_H        fcntl.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_UNISTD_H       unistd.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_WINSOCK2_H     winsock2.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_WS2TCPIP_H     ws2tcpip.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_IPHLPAPI_H     iphlpapi.h)\nCARES_EXTRAINCLUDE_IFSET (HAVE_WINDOWS_H      windows.h)\n\n# Check Types\n# CHECK_TYPE_SIZE can't be used to see if a type exists because on Apple when\n# building multi-arch, it will throw an error.  So we need to wrap\n# CHECK_C_SOURCE_COMPILES for our tests.\nMACRO (CARES_TYPE_EXISTS type var)\n\tSET(_CARES_C_SOURCE \"\n\t\t#include <stdio.h>\n\t\t#include <stdlib.h>\n\t\")\n\tFOREACH(_C_HEADER ${CMAKE_EXTRA_INCLUDE_FILES})\n\t\tSET(_CARES_C_SOURCE \"${_CARES_C_SOURCE}\n\t\t#include <${_C_HEADER}>\")\n\tENDFOREACH(_C_HEADER)\n\n\tSET(_CARES_C_SOURCE \"${_CARES_C_SOURCE}\n\t\tint main() {\n\t\t\t${type} var_exists;\n\t\t\t(void)var_exists;\n\t\t\treturn 0;\n\t\t}\n\t\")\n\tCHECK_C_SOURCE_COMPILES (\"${_CARES_C_SOURCE}\" ${var})\nENDMACRO ()\n\nCARES_TYPE_EXISTS (socklen_t                 HAVE_SOCKLEN_T)\nCARES_TYPE_EXISTS (SOCKET                    HAVE_TYPE_SOCKET)\nCARES_TYPE_EXISTS (ssize_t                   HAVE_SSIZE_T)\nCARES_TYPE_EXISTS (\"long long\"               HAVE_LONGLONG)\nCARES_TYPE_EXISTS (\"struct addrinfo\"         HAVE_STRUCT_ADDRINFO)\nCARES_TYPE_EXISTS (\"struct in6_addr\"         HAVE_STRUCT_IN6_ADDR)\nCARES_TYPE_EXISTS (\"struct sockaddr_in6\"     HAVE_STRUCT_SOCKADDR_IN6)\nCARES_TYPE_EXISTS (\"struct sockaddr_storage\" HAVE_STRUCT_SOCKADDR_STORAGE)\nCARES_TYPE_EXISTS (\"struct timeval\"          HAVE_STRUCT_TIMEVAL)\n\n\n# Check for preprocessor defines\nCHECK_SYMBOL_EXISTS (AF_INET6        \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_AF_INET6)\nCHECK_SYMBOL_EXISTS (O_NONBLOCK      \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_O_NONBLOCK)\nCHECK_SYMBOL_EXISTS (FIONBIO         \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_FIONBIO)\nCHECK_SYMBOL_EXISTS (SIOCGIFADDR     \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_IOCTL_SIOCGIFADDR)\nCHECK_SYMBOL_EXISTS (MSG_NOSIGNAL    \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_MSG_NOSIGNAL)\nCHECK_SYMBOL_EXISTS (PF_INET6        \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_PF_INET6)\nCHECK_SYMBOL_EXISTS (SO_NONBLOCK     \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_SO_NONBLOCK)\n\n# XCode v8 bug: iOS when targeting less than v10, or MacOS when targeting less than v10.12 will\n# say clock_gettime exists, it is a weak symbol that only exists in iOS10/MacOS10.12 and will\n# cause a crash at runtime when running on older versions.  Skip finding CLOCK_MONOTONIC on older\n# OS's.\nIF ((NOT APPLE) OR IOS_V10 OR MACOS_V1012)\n\tCHECK_SYMBOL_EXISTS (CLOCK_MONOTONIC \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_CLOCK_GETTIME_MONOTONIC)\nENDIF ()\n\nCHECK_STRUCT_HAS_MEMBER(\"struct sockaddr_in6\" sin6_scope_id \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_STRUCT_SOCKADDR_IN6_SIN6_SCOPE_ID LANGUAGE C)\n\nCHECK_SYMBOL_EXISTS (strnlen         \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_STRNLEN)\nCHECK_SYMBOL_EXISTS (memmem          \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_MEMMEM)\nCHECK_SYMBOL_EXISTS (closesocket     \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_CLOSESOCKET)\nCHECK_SYMBOL_EXISTS (CloseSocket     \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_CLOSESOCKET_CAMEL)\nCHECK_SYMBOL_EXISTS (connect         \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_CONNECT)\nCHECK_SYMBOL_EXISTS (connectx        \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_CONNECTX)\nCHECK_SYMBOL_EXISTS (fcntl           \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_FCNTL)\nCHECK_SYMBOL_EXISTS (freeaddrinfo    \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_FREEADDRINFO)\nCHECK_SYMBOL_EXISTS (getaddrinfo     \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_GETADDRINFO)\nCHECK_SYMBOL_EXISTS (getenv          \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_GETENV)\nCHECK_SYMBOL_EXISTS (gethostname     \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_GETHOSTNAME)\nCHECK_SYMBOL_EXISTS (getnameinfo     \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_GETNAMEINFO)\nCHECK_SYMBOL_EXISTS (getrandom       \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_GETRANDOM)\nCHECK_SYMBOL_EXISTS (getservbyport_r \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_GETSERVBYPORT_R)\nCHECK_SYMBOL_EXISTS (getservbyname_r \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_GETSERVBYNAME_R)\nCHECK_SYMBOL_EXISTS (gettimeofday    \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_GETTIMEOFDAY)\nCHECK_SYMBOL_EXISTS (if_indextoname  \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_IF_INDEXTONAME)\nCHECK_SYMBOL_EXISTS (if_nametoindex  \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_IF_NAMETOINDEX)\nCHECK_SYMBOL_EXISTS (GetBestRoute2   \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_GETBESTROUTE2)\nCHECK_SYMBOL_EXISTS (ConvertInterfaceIndexToLuid  \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_CONVERTINTERFACEINDEXTOLUID)\nCHECK_SYMBOL_EXISTS (ConvertInterfaceLuidToNameA  \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_CONVERTINTERFACELUIDTONAMEA)\nCHECK_SYMBOL_EXISTS (NotifyIpInterfaceChange      \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_NOTIFYIPINTERFACECHANGE)\nCHECK_SYMBOL_EXISTS (RegisterWaitForSingleObject  \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_REGISTERWAITFORSINGLEOBJECT)\n\n\nCHECK_SYMBOL_EXISTS (inet_net_pton   \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_INET_NET_PTON)\nIF (NOT WIN32)\n\t# Disabled on Windows, because these functions are only really supported on Windows\n\t# Vista or newer (_WIN32_WINNT >= 0x0600). Older versions of Windows may provide\n\t# them as experimental non-working features, so we have to disable them manually.\n\tCHECK_SYMBOL_EXISTS (inet_ntop       \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_INET_NTOP)\n\tCHECK_SYMBOL_EXISTS (inet_pton       \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_INET_PTON)\nENDIF ()\nCHECK_SYMBOL_EXISTS (ioctl           \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_IOCTL)\nCHECK_SYMBOL_EXISTS (ioctlsocket     \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_IOCTLSOCKET)\nCHECK_SYMBOL_EXISTS (IoctlSocket     \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_IOCTLSOCKET_CAMEL)\nCHECK_SYMBOL_EXISTS (recv            \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_RECV)\nCHECK_SYMBOL_EXISTS (recvfrom        \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_RECVFROM)\nCHECK_SYMBOL_EXISTS (send            \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_SEND)\nCHECK_SYMBOL_EXISTS (sendto          \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_SENDTO)\nCHECK_SYMBOL_EXISTS (setsockopt      \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_SETSOCKOPT)\nCHECK_SYMBOL_EXISTS (socket          \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_SOCKET)\nCHECK_SYMBOL_EXISTS (strcasecmp      \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_STRCASECMP)\nCHECK_SYMBOL_EXISTS (strcmpi         \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_STRCMPI)\nCHECK_SYMBOL_EXISTS (strdup          \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_STRDUP)\nCHECK_SYMBOL_EXISTS (stricmp         \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_STRICMP)\nCHECK_SYMBOL_EXISTS (strncasecmp     \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_STRNCASECMP)\nCHECK_SYMBOL_EXISTS (strncmpi        \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_STRNCMPI)\nCHECK_SYMBOL_EXISTS (strnicmp        \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_STRNICMP)\nCHECK_SYMBOL_EXISTS (writev          \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_WRITEV)\nCHECK_SYMBOL_EXISTS (arc4random_buf  \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_ARC4RANDOM_BUF)\nCHECK_SYMBOL_EXISTS (stat            \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_STAT)\nCHECK_SYMBOL_EXISTS (getifaddrs      \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_GETIFADDRS)\nCHECK_SYMBOL_EXISTS (poll            \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_POLL)\nCHECK_SYMBOL_EXISTS (pipe            \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_PIPE)\nCHECK_SYMBOL_EXISTS (pipe2           \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_PIPE2)\nCHECK_SYMBOL_EXISTS (kqueue          \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_KQUEUE)\nCHECK_SYMBOL_EXISTS (epoll_create1   \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_EPOLL)\n\n\n# On Android, the system headers may define __system_property_get(), but excluded\n# from libc.  We need to perform a link test instead of a header/symbol test.\nCHECK_FUNCTION_EXISTS (__system_property_get HAVE___SYSTEM_PROPERTY_GET)\n\n# Restore original values (as per Issue #729)\nSET (CMAKE_REQUIRED_DEFINITIONS ${ORIG_CMAKE_REQUIRED_DEEFINITIONS})\nSET (CMAKE_REQUIRED_LIBRARIES ${ORIG_CMAKE_REQUIRED_LIBRARIES})\nSET (CMAKE_EXTRA_INCLUDE_FILES ${ORIG_CMAKE_EXTRA_INCLUDE_FILES})\n\n\n################################################################################\n# Threading Support\n#\nIF (CARES_THREADS)\n\tIF (WIN32)\n\t\t# Do nothing, always has threads\n\tELSE ()\n\t\t# Need to prefer pthreads on platforms that may have more threading choices\n\t\t# (e.g. Solaris)\n\t\tSET (CMAKE_THREAD_PREFER_PTHREAD TRUE)\n\t\tFIND_PACKAGE (Threads)\n\n\t\tIF (Threads_FOUND)\n\t\t\t# Fix solaris9 bug due to libc having pthread_create() stubs that always fail.  CMake\n\t\t\t# doesn't realize that the real pthread functions aren't in libc, so sets the pthread\n\t\t\t# library CAKE_THREAD_LIBS_INIT variable to blank instead of to the correct \"-lpthread\".\n\t\t\tIF (CMAKE_SYSTEM_NAME STREQUAL \"SunOS\" AND NOT CMAKE_THREAD_LIBS_INIT)\n\t\t\t\tSET (CMAKE_THREAD_LIBS_INIT \"-lpthread\")\n\t\t\tENDIF ()\n\n\t\t\t# PThread functions.\n\t\t\tCHECK_INCLUDE_FILES (pthread.h                                 HAVE_PTHREAD_H)\n\t\t\tCHECK_INCLUDE_FILES (pthread_np.h                              HAVE_PTHREAD_NP_H)\n\t\t\tCARES_EXTRAINCLUDE_IFSET (HAVE_PTHREAD_H                       pthread.h)\n\t\t\tCARES_EXTRAINCLUDE_IFSET (HAVE_PTHREAD_NP_H                    pthread_np.h)\n\t\t\tCHECK_SYMBOL_EXISTS (pthread_init  \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_PTHREAD_INIT)\n\t\t\t# Make sure libcares.pc.cmake knows about thread libraries on static builds\n\t\t\t# The variable set by FIND_PACKAGE(Threads) has a -l prefix on it, we need\n\t\t\t# to strip that first since CARES_DEPENDENT_LIBS doesn't expect that.\n\t\t\tSTRING (REPLACE \"-l\" \"\" CARES_THREAD_LIBRARY \"${CMAKE_THREAD_LIBS_INIT}\")\n\t\t\tLIST (APPEND CARES_DEPENDENT_LIBS ${CARES_THREAD_LIBRARY})\n\t\tELSE ()\n\t\t\tMESSAGE (WARNING \"Threading support not found, disabling...\")\n\t\t\tSET (CARES_THREADS OFF)\n\t\tENDIF ()\n\tENDIF ()\nENDIF ()\n\n\n\n################################################################################\n# recv, recvfrom, send, getnameinfo, gethostname\n# ARGUMENTS AND RETURN VALUES\n#\n# The AutoTools build tries to be really thorough here.  So much so that it\n# takes forever.  We really don't want to do that.  Lets make some educated\n# guesses based on datatypes we have available, and for others, use some 'sane'\n# defaults.  This should be much quicker and nearly as accurate ... and even\n# if not, it probably won't matter in the least.\n\nIF (HAVE_SSIZE_T AND HAVE_SOCKLEN_T AND NOT WIN32)\n\t# If we have ssize_t and socklen_t, the API is usually sane and uses ssize_t and size_t for lengths\n\tSET (RECVFROM_TYPE_RETV ssize_t)\n\tSET (RECVFROM_TYPE_ARG3 size_t)\nELSE ()\n\tSET (RECVFROM_TYPE_RETV int)\n\tSET (RECVFROM_TYPE_ARG3 int)\nENDIF ()\n\nIF (HAVE_TYPE_SOCKET)\n\t# If the SOCKET type is defined, it uses socket ... should be windows only\n\tSET (RECVFROM_TYPE_ARG1 SOCKET)\nELSE ()\n\tSET (RECVFROM_TYPE_ARG1 int)\nENDIF()\n\nIF (HAVE_SOCKLEN_T)\n\t# If we have socklen_t the APIs pretty much always actually use it\n\tSET (RECVFROM_TYPE_ARG6 \"socklen_t *\")\n\tSET (GETNAMEINFO_TYPE_ARG2 socklen_t)\n\tSET (GETNAMEINFO_TYPE_ARG46 socklen_t)\nELSE ()\n\tSET (RECVFROM_TYPE_ARG6 \"int *\")\n\tSET (GETNAMEINFO_TYPE_ARG2 int)\n\tSET (GETNAMEINFO_TYPE_ARG46 int)\nENDIF ()\n\nIF (WIN32)\n\tSET (RECV_TYPE_ARG2 \"char *\")\nELSE ()\n\tSET (RECV_TYPE_ARG2 \"void *\")\nENDIF ()\n\n# Functions are typically consistent so the equivalent fields map ... equivalently\nSET (RECV_TYPE_RETV ${RECVFROM_TYPE_RETV})\nSET (SEND_TYPE_RETV ${RECVFROM_TYPE_RETV})\nSET (RECV_TYPE_ARG1 ${RECVFROM_TYPE_ARG1})\nSET (RECVFROM_TYPE_ARG2 ${RECV_TYPE_ARG2})\nSET (SEND_TYPE_ARG1 ${RECVFROM_TYPE_ARG1})\nSET (RECV_TYPE_ARG3 ${RECVFROM_TYPE_ARG3})\nSET (SEND_TYPE_ARG3 ${RECVFROM_TYPE_ARG3})\nSET (GETHOSTNAME_TYPE_ARG2 ${RECVFROM_TYPE_ARG3})\n\n# These should always be \"sane\" values to use always\nSET (RECVFROM_QUAL_ARG5 )\nSET (RECVFROM_TYPE_ARG4 int)\nSET (RECVFROM_TYPE_ARG5 \"struct sockaddr *\")\nSET (RECV_TYPE_ARG4 int)\nSET (GETNAMEINFO_TYPE_ARG1 \"struct sockaddr *\")\nSET (GETNAMEINFO_TYPE_ARG7 int)\nSET (SEND_TYPE_ARG2 \"const void *\")\nSET (SEND_TYPE_ARG4 int)\n################################################################################\n\n\n# HAVE_CXX11  ??\n# HAVE_SIG_ATOMIC_T_VOLATILE  ??\n\n\n# Set a few variables by hand that C-Ares wants, logically, based on detection\n# data.\n\nIF (HAVE_SOCKLEN_T)\n\tSet (CARES_TYPEOF_ARES_SOCKLEN_T \"socklen_t\")\nELSE ()\n\tSet (CARES_TYPEOF_ARES_SOCKLEN_T \"int\")\nENDIF ()\n\nIF (HAVE_SSIZE_T)\n\tSet (CARES_TYPEOF_ARES_SSIZE_T \"ssize_t\")\nELSE ()\n\tIF (WIN32)\n\t\tIF (\"${CMAKE_SIZEOF_VOID_P}\" EQUAL \"8\")\n\t\t\tSet (CARES_TYPEOF_ARES_SSIZE_T \"__int64\")\n\t\tELSE ()\n\t\t\tSet (CARES_TYPEOF_ARES_SSIZE_T \"int\")\n\t\tENDIF ()\n\tELSE ()\n\t\tSet (CARES_TYPEOF_ARES_SSIZE_T \"long\")\n\tENDIF ()\nENDIF ()\n\nIF (HAVE_FCNTL AND HAVE_O_NONBLOCK)\n\tSET (HAVE_FCNTL_O_NONBLOCK 1)\nENDIF ()\n\nIF (HAVE_IOCTL AND HAVE_FIONBIO)\n\tSET (HAVE_IOCTL_FIONBIO 1)\nENDIF ()\n\nIF (HAVE_IOCTLSOCKET AND HAVE_FIONBIO)\n\tSET (HAVE_IOCTLSOCKET_FIONBIO 1)\nENDIF ()\n\nIF (HAVE_IOCTLSOCKET_CAMEL AND HAVE_FIONBIO)\n\tSET (HAVE_IOCTLSOCKET_CAMEL_FIONBIO 1)\nENDIF ()\n\nIF (HAVE_GETADDRINFO)\n\tIF (CMAKE_SYSTEM_NAME STREQUAL \"Darwin\" OR\n\t\tCMAKE_SYSTEM_NAME STREQUAL \"HPUX\" OR\n\t\tCMAKE_SYSTEM_NAME STREQUAL \"NetBSD\" OR\n\t\tCMAKE_SYSTEM_NAME STREQUAL \"SunOS\" OR\n\t\tCMAKE_SYSTEM_NAME STREQUAL \"FreeBSD\" OR\n\t\tCMAKE_SYSTEM_NAME STREQUAL \"AIX\" OR\n\t\tWIN32)\n\t\t\tSET (HAVE_GETADDRINFO_THREADSAFE 1)\n\tENDIF ()\nENDIF ()\n\nIF (HAVE_TIME_H AND HAVE_SYS_TIME_H)\n\tSET (TIME_WITH_SYS_TIME 1)\nENDIF ()\n\nIF (HAVE_GETSERVBYPORT_R)\n\t# TODO : Should probably autodetect\n\tIF (CMAKE_SYSTEM_NAME STREQUAL \"SunOS\")\n\t\tSET (GETSERVBYPORT_R_ARGS 5)\n\tELSEIF (CMAKE_SYSTEM_NAME STREQUAL \"AIX\" OR\n\t\tCMAKE_SYSTEM_NAME STREQUAL \"OpenBSD\" OR\n\t\tHAIKU)\n\t\tSET (GETSERVBYPORT_R_ARGS 4)\n\tELSE ()\n\t\t# Probably linux\n\t\tSET (GETSERVBYPORT_R_ARGS 6)\n\tENDIF ()\nENDIF ()\n\nIF (HAVE_GETSERVBYNAME_R)\n\t# TODO : Should probably autodetect\n\tIF (CMAKE_SYSTEM_NAME STREQUAL \"SunOS\")\n\t\tSET (GETSERVBYNAME_R_ARGS 5)\n\tELSEIF (CMAKE_SYSTEM_NAME STREQUAL \"AIX\" OR\n\t\tCMAKE_SYSTEM_NAME STREQUAL \"OpenBSD\" OR\n\t\tHAIKU)\n\t\tSET (GETSERVBYNAME_R_ARGS 4)\n\tELSE ()\n\t\t# Probably linux\n\t\tSET (GETSERVBYNAME_R_ARGS 6)\n\tENDIF ()\nENDIF ()\n\n# Set some aliases used for ares_build.h\nIF (HAVE_SYS_TYPES_H)\n\tSET (CARES_HAVE_SYS_TYPES_H 1)\nENDIF ()\nIF (HAVE_SYS_SOCKET_H)\n\tSET (CARES_HAVE_SYS_SOCKET_H 1)\nENDIF()\nIF (HAVE_SYS_SELECT_H)\n\tSET (CARES_HAVE_SYS_SELECT_H 1)\nENDIF()\nIF (HAVE_WS2TCPIP_H)\n\tSET (CARES_HAVE_WS2TCPIP_H 1)\nENDIF()\nIF (HAVE_WINSOCK2_H)\n\tSET (CARES_HAVE_WINSOCK2_H 1)\nENDIF()\nIF (HAVE_WINDOWS_H)\n\tSET (CARES_HAVE_WINDOWS_H 1)\nENDIF()\nIF (HAVE_ARPA_NAMESER_H)\n\tSET (CARES_HAVE_ARPA_NAMESER_H 1)\nENDIF()\nIF (HAVE_ARPA_NAMESER_COMPAT_H)\n\tSET (CARES_HAVE_ARPA_NAMESER_COMPAT_H 1)\nENDIF()\n\n# Coverage\nIF (CARES_COVERAGE)\n\t# set compiler flags\n\tSET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -ftest-coverage -fprofile-arcs\")\n\tSET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -ftest-coverage -fprofile-arcs\")\n\n\t# find required tools\n\tFIND_PROGRAM(LCOV lcov REQUIRED)\n\tFIND_PROGRAM(GENHTML genhtml REQUIRED)\n\n\t# add coverage target\n\tADD_CUSTOM_TARGET(coverage\n\t\t# gather data\n\t\tCOMMAND ${LCOV} --directory . --capture --output-file coverage.info\n\t\t# generate report\n\t\tCOMMAND ${GENHTML} --demangle-cpp -o coverage coverage.info\n\t\tWORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n\t)\nENDIF()\n\n# TRANSFORM_MAKEFILE_INC\n#\n# This function consumes the \"Makefile.inc\" autotools file, and converts it into\n#  \"Makefile.inc.cmake\", a cmake include file; transforming this:\n#\n# CSOURCES = ares__close_sockets.c\t\\\n#   ares__get_hostent.c\t\t\t\\\n#   ares__read_line.c\t\t\t\\\n#   ...\n#\n#   into this:\n#\n# SET (CSOURCES\n# \tares__close_sockets.c\n# \tares__get_hostent.c\n# \tares__read_line.c\n#\t...\nfunction(TRANSFORM_MAKEFILE_INC INPUT_FILE OUTPUT_FILE)\n\tfile(READ ${INPUT_FILE} MAKEFILE_INC_TEXT)\n\tstring(REPLACE \"$(top_srcdir)\"   \"\\${PROJECT_SOURCE_DIR}\" MAKEFILE_INC_TEXT ${MAKEFILE_INC_TEXT})\n\tstring(REPLACE \"$(top_builddir)\" \"\\${PROJECT_BINARY_DIR}\" MAKEFILE_INC_TEXT ${MAKEFILE_INC_TEXT})\n\n\tstring(REGEX REPLACE \"\\\\\\\\\\n\" \"ß!ß\" MAKEFILE_INC_TEXT ${MAKEFILE_INC_TEXT})\n\tstring(REGEX REPLACE \"([a-zA-Z_][a-zA-Z0-9_]*)[\\t ]*=[\\t ]*([^\\n]*)\" \"SET(\\\\1 \\\\2)\" MAKEFILE_INC_TEXT ${MAKEFILE_INC_TEXT})\n\tstring(REPLACE \"ß!ß\" \"\\n\" MAKEFILE_INC_TEXT ${MAKEFILE_INC_TEXT})\n\n\tstring(REGEX REPLACE \"\\\\$\\\\(([a-zA-Z_][a-zA-Z0-9_]*)\\\\)\" \"\\${\\\\1}\" MAKEFILE_INC_TEXT ${MAKEFILE_INC_TEXT})    # Replace $() with ${}\n\tstring(REGEX REPLACE \"@([a-zA-Z_][a-zA-Z0-9_]*)@\" \"\\${\\\\1}\" MAKEFILE_INC_TEXT ${MAKEFILE_INC_TEXT})    # Replace @@ with ${}, even if that may not be read by CMake scripts.\n\tfile(WRITE ${OUTPUT_FILE} ${MAKEFILE_INC_TEXT})\nendfunction()\n\n# Directory for includes\nADD_SUBDIRECTORY (include)\n\n# Directory for lib and tools\nADD_SUBDIRECTORY (src)\n\n# Docs\nADD_SUBDIRECTORY (docs)\n\n# Tests\nIF (CARES_BUILD_TESTS OR CARES_BUILD_CONTAINER_TESTS)\n\tENABLE_TESTING ()\n\tADD_SUBDIRECTORY (test)\nENDIF ()\n\n# Export targets\nIF (CARES_INSTALL)\n\tSET (CMAKECONFIG_INSTALL_DIR \"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}\")\n\tINCLUDE (CMakePackageConfigHelpers)\n\tCONFIGURE_PACKAGE_CONFIG_FILE (${PROJECT_NAME}-config.cmake.in ${PROJECT_NAME}-config.cmake\n\t\tINSTALL_DESTINATION ${CMAKECONFIG_INSTALL_DIR}\n\t\tPATH_VARS CMAKE_INSTALL_INCLUDEDIR\n\t\tNO_CHECK_REQUIRED_COMPONENTS_MACRO\n\t)\n\n\tWRITE_BASIC_PACKAGE_VERSION_FILE(${PROJECT_NAME}-config-version.cmake VERSION \"${CARES_VERSION}\" COMPATIBILITY SameMajorVersion)\n\tINSTALL (EXPORT ${PROJECT_NAME}-targets COMPONENT Devel DESTINATION ${CMAKECONFIG_INSTALL_DIR} NAMESPACE ${PROJECT_NAME}::)\n\tINSTALL (FILES \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake\" \"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake\" COMPONENT Devel DESTINATION ${CMAKECONFIG_INSTALL_DIR})\n\n\t# pkgconfig support for static builds\n\tFOREACH (LIB ${CARES_DEPENDENT_LIBS})\n\t\tSET (CARES_PRIVATE_LIBS \"${CARES_PRIVATE_LIBS} -l${LIB}\")\n\tENDFOREACH ()\n\n\tCONFIGURE_FILE(\"libcares.pc.cmake\" \"libcares.pc\" @ONLY)\n\tINSTALL (FILES \"${CMAKE_CURRENT_BINARY_DIR}/libcares.pc\" COMPONENT Devel DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\nENDIF ()\n\n# Legacy chain-building variables (provided for compatibility with old code).\n# Don't use these, external code should be updated to refer to the aliases directly (e.g., Cares::cares).\nSET (CARES_FOUND 1 CACHE INTERNAL \"CARES LIBRARY FOUND\")\nSET (CARES_LIBRARIES ${PROJECT_NAME}::cares CACHE INTERNAL \"CARES LIBRARIES\")\n\n\nIF (CARES_INSTALL)\n    # Package creation\n    set( CPACK_PACKAGE_NAME ${PROJECT_NAME} )\n    set( CPACK_PACKAGE_VENDOR \"Daniel Stenberg\" ) # Github project owner\n    set( CPACK_PACKAGE_DESCRIPTION_SUMMARY \"A C library for asynchronous DNS requests\" )\n    set( CPACK_PACKAGE_HOMEPAGE_URL \"https://c-ares.org/\" )\n    set( CPACK_PACKAGE_CONTACT      \"https://c-ares.org/\" )\n    set( CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR} )\n    set( CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR} )\n    set( CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_PATCH} )\n    set( CPACK_PACKAGE_VERSION ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH} )\n    set( CPACK_PACKAGE_INSTALL_DIRECTORY ${PROJECT_NAME} )\n    set( CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/LICENSE.md\" )\n    set( CPACK_RESOURCE_FILE_README \"${CMAKE_CURRENT_SOURCE_DIR}/README.md\" )\n\n    set( CPACK_COMPONENT_Library_DISPLAY_NAME \"c-ares Library\" )\n    set( CPACK_COMPONENT_Library_DESCRIPTION \"The c-ares binary library.\" )\n    set( CPACK_COMPONENT_Library_REQUIRED 1 )\n    set( CPACK_COMPONENT_Devel_DISPLAY_NAME \"c-ares Development Files\" )\n    set( CPACK_COMPONENT_Devel_DESCRIPTION \"Development files for compiling against c-ares.\" )\n    set( CPACK_COMPONENT_Devel_REQUIRED 0 )\n    IF (CARES_BUILD_TOOLS)\n        set( CPACK_COMPONENT_Tools_DISPLAY_NAME \"c-ares Tools\" )\n        set( CPACK_COMPONENT_Tools_DESCRIPTION \"Tools for using c-ares.\" )\n        set( CPACK_COMPONENT_Tools_REQUIRED 0 )\n    ENDIF ()\n\n    if( ${CMAKE_SYSTEM_NAME} STREQUAL \"Linux\" )\n\n        if ( \"${CPACK_PACKAGE_ARCHITECTURE}\" STREQUAL \"\" )\n            set( CPACK_PACKAGE_ARCHITECTURE \"${CMAKE_SYSTEM_PROCESSOR}\" )\n        endif()\n        if ( \"${CPACK_PACKAGE_ARCHITECTURE}\" STREQUAL \"\" )\n            if ( \"${CMAKE_HOST_SYSTEM_NAME}\" STREQUAL \"Windows\" )\n                message( FATAL_ERROR \"Failed to determine CPACK_PACKAGE_ARCHITECTURE. Is CMAKE_SYSTEM_PROCESSOR set?\" )\n            endif()\n            # Note: the architecture should default to the local architecture, but it\n            # in fact comes up empty.  We call `uname -m` to ask the kernel instead.\n            EXECUTE_PROCESS( COMMAND uname -m COMMAND tr -d '\\n' OUTPUT_VARIABLE CPACK_PACKAGE_ARCHITECTURE )\n        endif()\n\n        set( CPACK_INCLUDE_TOPLEVEL_DIRECTORY 1 )\n        set( CPACK_PACKAGE_RELEASE 1 )\n\n\n        # RPM - https://cmake.org/cmake/help/latest/cpack_gen/rpm.html\n        set( CPACK_RPM_PACKAGE_RELEASE ${CPACK_PACKAGE_RELEASE} )\n        set( CPACK_RPM_PACKAGE_ARCHITECTURE ${CPACK_PACKAGE_ARCHITECTURE} )\n        set( CPACK_RPM_PACKAGE_DESCRIPTION ${CPACK_PACKAGE_DESCRIPTION_SUMMARY} )\n        set( CPACK_RPM_PACKAGE_URL ${CPACK_PACKAGE_HOMEPAGE_URL} )\n        set( CPACK_RPM_PACKAGE_LICENSE \"MIT\" )\n        set( CPACK_RPM_COMPONENT_INSTALL 1 )\n        set( CPACK_RPM_COMPRESSION_TYPE \"xz\" )\n        set( CPACK_RPM_PACKAGE_AUTOPROV 1 )\n\n        set( CPACK_RPM_Library_PACKAGE_SUMMARY ${CPACK_COMPONENT_Library_DESCRIPTION} )\n        set( CPACK_RPM_Library_PACKAGE_ARCHITECTURE ${CPACK_RPM_PACKAGE_ARCHITECTURE} )\n        set( CPACK_RPM_Library_PACKAGE_NAME \"libcares${CARES_LIB_VERSION_MAJOR}\" )\n        set( CPACK_RPM_Library_FILE_NAME \"RPM-DEFAULT\" )\n\n        set( CPACK_RPM_Devel_PACKAGE_REQUIRES \"cmake >= ${CMAKE_MINIMUM_REQUIRED_VERSION}, ${CPACK_RPM_Library_PACKAGE_NAME} >= ${CPACK_PACKAGE_VERSION}\" )\n        set( CPACK_RPM_Devel_PACKAGE_SUMMARY ${CPACK_COMPONENT_Devel_DESCRIPTION} )\n        set( CPACK_RPM_Devel_PACKAGE_ARCHITECTURE ${CPACK_RPM_PACKAGE_ARCHITECTURE} )\n        set( CPACK_RPM_Devel_PACKAGE_NAME \"${CPACK_PACKAGE_NAME}-devel\" )\n        set( CPACK_RPM_Devel_FILE_NAME \"RPM-DEFAULT\" )\n\n        IF (CARES_BUILD_TOOLS)\n            set( CPACK_RPM_Tools_PACKAGE_REQUIRES \"${CPACK_RPM_Library_PACKAGE_NAME} >= ${CPACK_PACKAGE_VERSION}\" )\n            set( CPACK_RPM_Tools_PACKAGE_SUMMARY ${CPACK_COMPONENT_Tools_DESCRIPTION} )\n            set( CPACK_RPM_Tools_PACKAGE_ARCHITECTURE ${CPACK_RPM_PACKAGE_ARCHITECTURE} )\n            set( CPACK_RPM_Tools_PACKAGE_NAME \"${CPACK_PACKAGE_NAME}-tools\" )\n            set( CPACK_RPM_Tools_FILE_NAME \"RPM-DEFAULT\" )\n        ENDIF ()\n\n\n        # DEB - https://cmake.org/cmake/help/latest/cpack_gen/deb.html\n        set( CPACK_DEBIAN_PACKAGE_RELEASE ${CPACK_PACKAGE_RELEASE} )\n        set( CPACK_DEBIAN_PACKAGE_HOMEPAGE ${CPACK_PACKAGE_HOMEPAGE_URL} )\n        set( CPACK_DEB_COMPONENT_INSTALL 1 )\n        set( CPACK_DEBIAN_COMPRESSION_TYPE \"xz\")\n        set( CPACK_DEBIAN_PACKAGE_SHLIBDEPS 1 )\n\n        if ( ${CPACK_PACKAGE_ARCHITECTURE} STREQUAL \"x86_64\" )\n            set( CPACK_DEBIAN_PACKAGE_ARCHITECTURE \"amd64\" )  # DEB doesn't always use the kernel's arch name\n        else()\n            set( CPACK_DEBIAN_PACKAGE_ARCHITECTURE ${CPACK_PACKAGE_ARCHITECTURE} )\n        endif()\n\n        set( CPACK_DEBIAN_FILE_NAME \"DEB-DEFAULT\" ) # Use default naming scheme\n\n        set( CPACK_DEBIAN_LIBRARY_PACKAGE_NAME ${CPACK_RPM_Library_PACKAGE_NAME} )\n\n        set( CPACK_DEBIAN_DEVEL_PACKAGE_DEPENDS \"cmake (>= ${CMAKE_MINIMUM_REQUIRED_VERSION}), ${CPACK_DEBIAN_LIBRARY_PACKAGE_NAME} (>= ${CPACK_PACKAGE_VERSION})\" )\n        set( CPACK_DEBIAN_DEVEL_PACKAGE_NAME \"${CPACK_PACKAGE_NAME}-dev\" )\n\n        IF (CARES_BUILD_TOOLS)\n            set( CPACK_DEBIAN_TOOLS_PACKAGE_NAME \"${CPACK_PACKAGE_NAME}-tools\" )\n            set( CPACK_DEBIAN_TOOLS_PACKAGE_SHLIBDEPS OFF ) # dpkg-shlibdeps can't find the libs we built\n            set( CPACK_DEBIAN_TOOLS_PACKAGE_DEPENDS \"${CPACK_DEBIAN_LIBRARY_PACKAGE_NAME} (>= ${CPACK_PACKAGE_VERSION})\" )\n        ENDIF ()\n\n    elseif( ${CMAKE_HOST_WIN32} )\n        set( CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL ON )\n        set( CPACK_NSIS_DISPLAY_NAME ${PROJECT_NAME} )\n        set( CPACK_NSIS_PACKAGE_NAME ${PROJECT_NAME} )\n        set( CPACK_NSIS_URL_INFO_ABOUT ${CPACK_PACKAGE_HOMEPAGE_URL} )\n    endif()\n\n    # This must always be last!\n    include( CPack )\nENDIF ()\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.3603515625,
          "content": "Contributing to c-ares\n======================\n\nTo contribute patches to c-ares, please generate a GitHub pull request\nand follow these guidelines:\n\n - Check that the CI/CD builds are green for your pull request.\n - Please update the test suite to add a test case for any new functionality.\n - Build the library on your own machine and ensure there are no new warnings.\n"
        },
        {
          "name": "DEVELOPER-NOTES.md",
          "type": "blob",
          "size": 2.5693359375,
          "content": "Developer Notes\n===============\n\n* The distributed `ares_build.h` in the official release tarballs is only\n  intended to be used on systems which can also not run the also distributed\n  `configure` or `CMake` scripts.  It is generated as a copy of\n  `ares_build.h.dist` as can be seen in the code repository.\n\n* If you check out from git on a non-`configure` or `CMake` platform, you must run\n  the appropriate `buildconf*` script to set up `ares_build.h` and other local\n  files before being able to compile the library.  There are pre-made makefiles\n  for a subset of such systems such as Watcom, NMake, and MinGW Makefiles. \n\n* On systems capable of running the `configure` or `CMake` scripts, the process\n  will overwrite the distributed `ares_build.h` file with one that is suitable\n  and specific to the library being configured and built, this new file is\n  generated from the `ares_build.h.in` and `ares_build.h.cmake` template files.\n\n* If you intend to distribute an already compiled c-ares library you **MUST**\n  also distribute along with it the generated `ares_build.h` which has been\n  used to compile it. Otherwise, the library will be of no use for the users of\n  the library that you have built. It is **your** responsibility to provide this\n  file. No one at the c-ares project can know how you have built the library.\n  The generated file includes platform and configuration dependent info,\n  and must not be modified by anyone.\n\n* We support both the AutoTools `configure` based build system as well as the\n  `CMake` build system.  Any new code changes must work with both.\n\n* The files that get compiled and are present in the distribution are referenced\n  in the `Makefile.inc` in the current directory.  This file gets included in\n  every build system supported by c-ares so that the list of files doesn't need\n  to be maintained per build system.  Don't forget to reference new header files\n  otherwise they won't be included in the official release tarballs.\n\n* We cannot assume anything else but very basic C89 compiler features being\n  present. The lone exception is the requirement for 64bit integers which is\n  not a requirement for C89 compilers to support. Please do not use any extended\n  features released by later standards.\n\n* Newlines must remain unix-style for older compilers' sake.\n\n* Comments must be written in the old-style `/* unnested C-fashion */`\n\n* Try to keep line lengths below 80 columns and formatted as the existing code.\n  There is a `.clang-format` in the repository that can be used to run the\n  automated code formatter as such: `clang-format -i */*.c */*.h */*/*.c */*/*.h`\n"
        },
        {
          "name": "FEATURES.md",
          "type": "blob",
          "size": 11.6220703125,
          "content": "# Features\n\n- [Dynamic Server Timeout Calculation](#dynamic-server-timeout-calculation)\n- [Failed Server Isolation](#failed-server-isolation)\n- [Query Cache](#query-cache)\n- [DNS 0x20 Query Name Case Randomization](#dns-0x20-query-name-case-randomization)\n- [DNS Cookies](#dns-cookies)\n- [TCP FastOpen (0-RTT)](#tcp-fastopen-0-rtt)\n- [Event Thread](#event-thread)\n- [System Configuration Change Monitoring](#system-configuration-change-monitoring)\n\n\n## Dynamic Server Timeout Calculation\n\nMetrics are stored for every server in time series buckets for both the current\ntime span and prior time span in 1 minute, 15 minute, 1 hour, and 1 day\nintervals, plus a single since-inception bucket (of the server in the c-ares\nchannel).\n\nThese metrics are then used to calculate the average latency for queries on\neach server, which automatically adjusts to network conditions.  This average\nis then multiplied by 5 to come up with a timeout to use for the query before\nre-queuing it.  If there is not sufficient data yet to calculate a timeout\n(need at least 3 prior queries), then the default of 2000ms is used (or an \nadministrator-set `ARES_OPT_TIMEOUTMS`).\n\nThe timeout is then adjusted to a minimum bound of 250ms which is the\napproximate RTT of network traffic half-way around the world, to account for the\nupstream server needing to recurse to a DNS server far away.  It is also\nbounded on the upper end to 5000ms (or an administrator-set \n`ARES_OPT_MAXTIMEOUTMS`).\n\nIf a server does not reply within the given calculated timeout, the next time\nthe query is re-queued to the same server, the timeout will approximately\ndouble thus leading to adjustments in timeouts automatically when a successful\nreply is recorded.\n\nIn order to calculate the optimal timeout, it is highly recommended to ensure\n`ARES_OPT_QUERY_CACHE` is enabled with a non-zero `qcache_max_ttl` (which it\nis enabled by default with a 3600s default max ttl).  The goal is to record\nthe recursion time as part of query latency as the upstream server will also\ncache results.\n\nThis feature requires the c-ares channel to persist for the lifetime of the\napplication.\n\n\n## Failed Server Isolation\n\nEach server is tracked for failures relating to consecutive connectivity issues\nor unrecoverable response codes.  Servers are sorted in priority order based\non this metric.  Downed servers will be brought back online either when the\ncurrent highest priority server has failed, or has been determined to be online\nwhen a query is randomly selected to probe a downed server.\n\nBy default a downed server won't be retried for 5 seconds, and queries will\nhave a 10% chance of being chosen after this timeframe to test a downed server.\nWhen a downed server is selected to be probed, the query will be duplicated\nand sent to the downed server independent of the original query itself.  This\nmeans that probing a downed server will always use an intended legitimate\nquery, but not have a negative impact of a delayed response in case that server\nis still down.\n\nAdministrators may customize these settings via `ARES_OPT_SERVER_FAILOVER`.\n\nAdditionally, when using `ARES_OPT_ROTATE` or a system configuration option of\n`rotate`, c-ares will randomly select a server from the list of highest priority\nservers based on failures.  Any servers in any lower priority bracket will be\nomitted from the random selection.\n\nThis feature requires the c-ares channel to persist for the lifetime of the\napplication.\n\n\n## Query Cache\n\nEvery successful query response, as well as `NXDOMAIN` responses containing\nan `SOA` record are cached using the `TTL` returned or the SOA Minimum as\nappropriate.  This timeout is bounded by the `ARES_OPT_QUERY_CACHE`\n`qcache_max_ttl`, which defaults to 1hr.\n\nThe query is cached at the lowest possible layer, meaning a call into\n`ares_search_dnsrec()` or `ares_getaddrinfo()` may spawn multiple queries\nin order to complete its lookup, each individual backend query result will\nbe cached.\n\nAny server list change will automatically invalidate the cache in order to\npurge any possible stale data.  For example, if `NXDOMAIN` is cached but system\nconfiguration has changed due to a VPN connection, the same query might now\nresult in a valid response.\n\nThis feature is not expected to cause any issues that wouldn't already be\npresent due to the upstream DNS server having substantially similar caching\nalready.  However if desired it can be disabled by setting `qcache_max_ttl` to\n`0`.\n\nThis feature requires the c-ares channel to persist for the lifetime of the\napplication.\n\n\n## DNS 0x20 Query Name Case Randomization\n\nDNS 0x20 is the name of the feature which automatically randomizes the case\nof the characters in a UDP query as defined in\n[draft-vixie-dnsext-dns0x20-00](https://datatracker.ietf.org/doc/html/draft-vixie-dnsext-dns0x20-00).\n\nFor example, if name resolution is performed for `www.example.com`, the actual\nquery sent to the upstream name server may be `Www.eXaMPlE.cOM`.\n\nThe reason to randomize case characters is to provide additional entropy in the\nquery to be able to detect off-path cache poisoning attacks for UDP.  This is\nnot used for TCP connections which are not known to be vulnerable to such\nattacks due to their stateful nature.\n\nMuch research has been performed by\n[Google](https://groups.google.com/g/public-dns-discuss/c/KxIDPOydA5M)\non case randomization and in general have found it to be effective and widely\nsupported.\n\nThis feature is disabled by default and can be enabled via `ARES_FLAG_DNS0x20`.\nThere are some instances where servers do not properly facilitate this feature\nand unlike in a recursive resolver where it may be possible to determine an\nauthoritative server is incapable, its much harder to come to any reliable\nconclusion as a stub resolver as to where in the path the issue resides.  Due to\nthe recent wide deployment of DNS 0x20 in large public DNS servers, it is\nexpected compatibility will improve rapidly where this feature, in time, may be\nable to be enabled by default.\n\nAnother feature which can be used to prevent off-path cache poisoning attacks\nis [DNS Cookies](#dns-cookies).\n\n\n## DNS Cookies\n\nDNS Cookies are are a method of learned mutual authentication between a server\nand a client as defined in\n[RFC7873](https://datatracker.ietf.org/doc/html/rfc7873)\nand [RFC9018](https://datatracker.ietf.org/doc/html/rfc9018).\n\nThis mutual authentication ensures clients are protected from off-path cache\npoisoning attacks, and protects servers from being used as DNS amplification\nattack sources.  Many servers will disable query throttling limits when DNS\nCookies are in use. It only applies to UDP connections.\n\nSince DNS Cookies are optional and learned dynamically, this is an always-on\nfeature and will automatically adjust based on the upstream server state.  The\nonly potential issue is if a server has once supported DNS Cookies then stops\nsupporting them, it must clear a regression timeout of 2 minutes before it can\naccept responses without cookies.  Such a scenario would be exceedingly rare.\n\nInterestingly, the large public recursive DNS servers such as provided by\n[Google](https://developers.google.com/speed/public-dns/docs/using),\n[CloudFlare](https://one.one.one.one/), and\n[OpenDNS](https://opendns.com) do not have this feature enabled.  That said,\nmost DNS products like [BIND](https://www.isc.org/bind/) enable DNS Cookies\nby default.\n\nThis feature requires the c-ares channel to persist for the lifetime of the\napplication.\n\n\n## TCP FastOpen (0-RTT)\n\nTCP Fast Open is defined in [RFC7413](https://datatracker.ietf.org/doc/html/rfc7413)\nand enables data to be sent with the TCP SYN packet when establishing the\nconnection, thus rivaling the performance of UDP.  A previous connection must\nhave already have been established in order to obtain the client cookie to\nallow the server to trust the data sent in the first packet and know it was not\nan off-path attack.\n\nTCP FastOpen can only be used with idempotent requests since in timeout\nconditions the SYN packet with data may be re-sent which may cause the server\nto process the packet more than once.  Luckily DNS requests are idempotent by\nnature.\n\nTCP FastOpen is supported on Linux, MacOS, and FreeBSD. Most other systems do\nnot support this feature, or like on Windows require use of completion\nnotifications to use it whereas c-ares relies on readiness notifications.\n\nSupported systems also need to be configured appropriately on both the client\nand server systems.\n\n### Linux TFO\nIn linux a single sysctl value is used with flags to set the desired fastopen\nbehavior.\n\nIt is recommended to make any changes permanent by creating a file in\n`/etc/sysctl.d/` with the appropriate key and value.  Legacy Linux systems\nmight need to update `/etc/sysctl.conf` directly.  After modifying the\nconfiguration, it can be loaded via `sysctl -p`.\n\n`net.ipv4.tcp_fastopen`:\n   - `1` = client only (typically default)\n   - `2` = server only\n   - `3` = client and server\n\n### MacOS TFO\nIn MacOS, TCP FastOpen is enabled by default for clients and servers.  You can\nverify via the `net.inet.tcp.fastopen` sysctl.\n\nIf any change is needed, you should make it persistent as per this guidance:\n[Persistent Sysctl Settings](https://discussions.apple.com/thread/253840320?)\n\n`net.inet.tcp.fastopen`\n   - `1` = client only\n   - `2` = server only\n   - `3` = client and server (typically default)\n\n### FreeBSD TFO\nIn FreeBSD, server mode TCP FastOpen is typically enabled by default but\nclient mode is disabled.  It is recommended to edit `/etc/sysctl.conf` and\nplace in the values you wish to persist to enable or disable TCP Fast Open.\nOnce the file is modified, it can be loaded via `sysctl -f /etc/sysctl.conf`.\n\n- `net.inet.tcp.fastopen.server_enable` (boolean) - enable/disable server\n- `net.inet.tcp.fastopen.client_enable` (boolean) - enable/disable client\n\n\n## Event Thread\n\nHistoric c-ares integrations required integrators to have their own event loop\nwhich would be required to notify c-ares of read and write events for each\nsocket.  It was also required to notify c-ares at the appropriate timeout if\nno events had occurred.  This could be difficult to do correctly and could\nlead to stalls or other issues.\n\nThe Event Thread is currently supported on all systems except DOS which does\nnot natively support threading (however it could in theory be possible to\nenable with something like [FSUpthreads](https://arcb.csc.ncsu.edu/~mueller/pthreads/)).\n\nc-ares is built by default with threading support enabled, however it may\ndisabled at compile time.  The event thread must also be specifically enabled\nvia `ARES_OPT_EVENT_THREAD`.\n\nUsing the Event Thread feature also facilitates some other features like\n[System Configuration Change Monitoring](#system-configuration-change-monitoring),\nand automatically enables the `ares_set_pending_write_cb()` feature to optimize\nmulti-query writing.\n\n\n## System Configuration Change Monitoring\n\nThe system configuration is automatically monitored for changes to the network\nand DNS settings.  When a change is detected a thread is spawned to read the\nnew configuration then apply it to the current c-ares configuration.\n\nThis feature requires the [Event Thread](#event-thread) to be enabled via\n`ARES_OPT_EVENT_THREAD`.  Otherwise it is up to the integrator to do their own\nconfiguration monitoring and call `ares_reinit()` to reload the system\nconfiguration.\n\nIt is supported on Windows, MacOS, iOS and any system configuration that uses\n`/etc/resolv.conf` and similar files such as Linux and FreeBSD.  Specifically\nexcluded are DOS and Android due to missing mechanisms to support such a\nfeature.  On linux file monitoring will result in immediate change detection,\nhowever on other unix-like systems a polling mechanism is used that checks every\n30s for changes.\n\nThis feature requires the c-ares channel to persist for the lifetime of the\napplication.\n"
        },
        {
          "name": "FUZZING.md",
          "type": "blob",
          "size": 2.9375,
          "content": "# Fuzzing Hints\n\n## LibFuzzer\n\n1. Set compiler that supports fuzzing, this is an example on MacOS using\n   a homebrew-installed clang/llvm:\n```\nexport CC=\"/opt/homebrew/Cellar/llvm/18.1.8/bin/clang\"\nexport CXX=\"/opt/homebrew/Cellar/llvm/18.1.8/bin/clang++\"\n```\n\n2. Compile c-ares with both ASAN and fuzzing support.  We want an optimized\n   debug build so we will use `RelWithDebInfo`:\n```\nexport CFLAGS=\"-fsanitize=address,fuzzer-no-link -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION\"\nexport CXXFLAGS=\"-fsanitize=address,fuzzer-no-link -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION\"\nexport LDFLAGS=\"-fsanitize=address,fuzzer-no-link\"\nmkdir buildfuzz\ncd buildfuzz\ncmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -G Ninja ..\nninja\n```\n\n3. Build the fuzz test itself linked against our fuzzing-enabled build:\n```\n${CC} -W -Wall -Og -fsanitize=address,fuzzer -I../include -I../src/lib -I. -o ares-test-fuzz ../test/ares-test-fuzz.c -L./lib -Wl,-rpath ./lib -lcares\n${CC} -W -Wall -Og -fsanitize=address,fuzzer -I../include -I../src/lib -I. -o ares-test-fuzz-name ../test/ares-test-fuzz-name.c -L./lib -Wl,-rpath ./lib -lcares\n```\n\n4. Run the fuzzer, its better if you can provide seed input but it does pretty\n   well on its own since it uses coverage data to determine how to proceed.\n   You can play with other flags etc, like `-jobs=XX` for parallelism.  See\n   https://llvm.org/docs/LibFuzzer.html\n```\nmkdir corpus\ncp ../test/fuzzinput/* corpus\n./ares-test-fuzz -max_len=65535 corpus\n```\nor\n```\nmkdir corpus\ncp ../test/fuzznames/* corpus\n./ares-test-fuzz-name -max_len=1024 corpus\n```\n\n\n## AFL\n\nTo fuzz using AFL, follow the\n[AFL quick start guide](http://lcamtuf.coredump.cx/afl/QuickStartGuide.txt):\n\n - Download and build AFL.\n - Configure the c-ares library and test tool to use AFL's compiler wrappers:\n\n   ```console\n   % export CC=$AFLDIR/afl-gcc\n   % ./configure --disable-shared && make\n   % cd test && ./configure && make aresfuzz aresfuzzname\n   ```\n\n - Run the AFL fuzzer against the starting corpus:\n\n   ```console\n   % mkdir fuzzoutput\n   % $AFLDIR/afl-fuzz -i fuzzinput -o fuzzoutput -- ./aresfuzz  # OR\n   % $AFLDIR/afl-fuzz -i fuzznames -o fuzzoutput -- ./aresfuzzname\n   ```\n\n## AFL Persistent Mode\n\nIf a recent version of Clang is available, AFL can use its built-in compiler\ninstrumentation; this configuration also allows the use of a (much) faster\npersistent mode, where multiple fuzz inputs are run for each process invocation.\n\n - Download and build a recent AFL, and run `make` in the `llvm_mode`\n   subdirectory to ensure that `afl-clang-fast` gets built.\n - Configure the c-ares library and test tool to use AFL's clang wrappers that\n   use compiler instrumentation:\n\n   ```console\n   % export CC=$AFLDIR/afl-clang-fast\n   % ./configure --disable-shared && make\n   % cd test && ./configure && make aresfuzz\n   ```\n\n - Run the AFL fuzzer (in persistent mode) against the starting corpus:\n\n   ```console\n   % mkdir fuzzoutput\n   % $AFLDIR/afl-fuzz -i fuzzinput -o fuzzoutput -- ./aresfuzz\n   ```\n"
        },
        {
          "name": "GIT-INFO",
          "type": "blob",
          "size": 0.3388671875,
          "content": "\nGIT-INFO\n\nThis file is only present in git - never in release archives. It is used as a\nsentinel file in buildconf.bat in order to differentiate a git checkout from\nrelease and daily snapshot archives.\n\nOn *nix-like systems, run the ./buildconf script first to generate a fresh\nconfigure script.  This requires autotools to be installed locally.\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 15.0048828125,
          "content": "```\n                          ___       __ _ _ __ ___  ___\n                         / __| ___ / _` | '__/ _ \\/ __|\n                        | (_  |___| (_| | | |  __/\\__ \\\n                         \\___|     \\__,_|_|  \\___||___/\n\n                                How To Compile\n```\n\nInstalling Binary Packages\n==========================\n\nLots of people download binary distributions of c-ares. This document\ndoes not describe how to install c-ares using such a binary package.\nThis document describes how to compile, build and install c-ares from\nsource code.\n\nBuilding from Git\n=================\n\nIf you get your code off a Git repository rather than an official\nrelease tarball, see the [GIT-INFO](GIT-INFO) file in the root directory\nfor specific instructions on how to proceed.\n\nIn particular, if not using CMake you will need to run `./buildconf` (Unix) or\n`buildconf.bat` (Windows) to generate build files, and for the former\nyou will need a local installation of Autotools.  If using CMake the steps are\nthe same for both Git and official release tarballs.\n\nAutoTools Build\n===============\n\n### General Information, works on most Unix Platforms (Linux, FreeBSD, etc.)\n\nA normal Unix installation is made in three or four steps (after you've\nunpacked the source archive):\n\n    ./configure\n    make\n    make install\n\nYou probably need to be root when doing the last command.\n\nIf you have checked out the sources from the git repository, read the\n[GIT-INFO](GIT-INFO) on how to proceed.\n\nGet a full listing of all available configure options by invoking it like:\n\n    ./configure --help\n\nIf you want to install c-ares in a different file hierarchy than /usr/local,\nyou need to specify that already when running configure:\n\n    ./configure --prefix=/path/to/c-ares/tree\n\nIf you happen to have write permission in that directory, you can do `make\ninstall` without being root. An example of this would be to make a local\ninstallation in your own home directory:\n\n    ./configure --prefix=$HOME\n    make\n    make install\n\n### More Options\n\nTo force configure to use the standard cc compiler if both cc and gcc are\npresent, run configure like\n\n    CC=cc ./configure\n    # or\n    env CC=cc ./configure\n\nTo force a static library compile, disable the shared library creation\nby running configure like:\n\n    ./configure --disable-shared\n\nIf you're a c-ares developer and use gcc, you might want to enable more\ndebug options with the `--enable-debug` option.\n\n### Special Cases\n\nSome versions of uClibc require configuring with `CPPFLAGS=-D_GNU_SOURCE=1`\nto get correct large file support.\n\nThe Open Watcom C compiler on Linux requires configuring with the variables:\n\n    ./configure CC=owcc AR=\"$WATCOM/binl/wlib\" AR_FLAGS=-q \\\n        RANLIB=/bin/true STRIP=\"$WATCOM/binl/wstrip\" CFLAGS=-Wextra\n\n\n### CROSS COMPILE\n\n(This section was graciously brought to us by Jim Duey, with additions by\nDan Fandrich)\n\nDownload and unpack the c-ares package.\n\n`cd` to the new directory. (e.g. `cd c-ares-1.7.6`)\n\nSet environment variables to point to the cross-compile toolchain and call\nconfigure with any options you need.  Be sure and specify the `--host` and\n`--build` parameters at configuration time.  The following script is an\nexample of cross-compiling for the IBM 405GP PowerPC processor using the\ntoolchain from MonteVista for Hardhat Linux.\n\n```sh\n#! /bin/sh\n\nexport PATH=$PATH:/opt/hardhat/devkit/ppc/405/bin\nexport CPPFLAGS=\"-I/opt/hardhat/devkit/ppc/405/target/usr/include\"\nexport AR=ppc_405-ar\nexport AS=ppc_405-as\nexport LD=ppc_405-ld\nexport RANLIB=ppc_405-ranlib\nexport CC=ppc_405-gcc\nexport NM=ppc_405-nm\n\n./configure --target=powerpc-hardhat-linux \\\n     --host=powerpc-hardhat-linux \\\n     --build=i586-pc-linux-gnu \\\n     --prefix=/opt/hardhat/devkit/ppc/405/target/usr/local \\\n     --exec-prefix=/usr/local\n```\n\nYou may also need to provide a parameter like `--with-random=/dev/urandom`\nto configure as it cannot detect the presence of a random number\ngenerating device for a target system.  The `--prefix` parameter\nspecifies where c-ares will be installed.  If `configure` completes\nsuccessfully, do `make` and `make install` as usual.\n\nIn some cases, you may be able to simplify the above commands to as\nlittle as:\n\n    ./configure --host=ARCH-OS\n\n\n### Cygwin (Windows)\n\nAlmost identical to the unix installation. Run the configure script in the\nc-ares root with `sh configure`. Make sure you have the sh executable in\n`/bin/` or you'll see the configure fail toward the end.\n\nRun `make`\n\n\n### QNX\n\n(This section was graciously brought to us by David Bentham)\n\nAs QNX is targeted for resource constrained environments, the QNX headers\nset conservative limits. This includes the `FD_SETSIZE` macro, set by default\nto 32. Socket descriptors returned within the c-ares library may exceed this,\nresulting in memory faults/SIGSEGV crashes when passed into `select(..)`\ncalls using `fd_set` macros.\n\nA good all-round solution to this is to override the default when building\nc-ares, by overriding `CFLAGS` during configure, example:\n\n    # configure CFLAGS='-DFD_SETSIZE=64 -g -O2'\n\n\n### RISC OS\n\nThe library can be cross-compiled using gccsdk as follows:\n\n    CC=riscos-gcc AR=riscos-ar RANLIB='riscos-ar -s' ./configure \\\n         --host=arm-riscos-aof --without-random --disable-shared\n    make\n\nwhere `riscos-gcc` and `riscos-ar` are links to the gccsdk tools.\nYou can then link your program with `c-ares/lib/.libs/libcares.a`.\n\n\n### Android\n\nMethod using a configure cross-compile (tested with Android NDK r7b):\n\n  - prepare the toolchain of the Android NDK for standalone use; this can\n    be done by invoking the script:\n\n        ./tools/make-standalone-toolchain.sh\n\n    which creates a usual cross-compile toolchain. Let's assume that you put\n    this toolchain below `/opt` then invoke configure with something\n    like:\n\n    ```\n        export PATH=/opt/arm-linux-androideabi-4.4.3/bin:$PATH\n       ./configure --host=arm-linux-androideabi [more configure options]\n        make\n    ```\n  - if you want to compile directly from our GIT repo you might run into\n    this issue with older automake stuff:\n\n    ```\n        checking host system type...\n        Invalid configuration `arm-linux-androideabi':\n        system `androideabi' not recognized\n        configure: error: /bin/sh ./config.sub arm-linux-androideabi failed\n    ```\n    this issue can be fixed with using more recent versions of `config.sub`\n    and `config.guess` which can be obtained here:\n    http://git.savannah.gnu.org/gitweb/?p=config.git;a=tree\n    you need to replace your system-own versions which usually can be\n    found in your automake folder:\n    `find /usr -name config.sub`\n\n\nCMake builds\n============\n\nCurrent releases of c-ares introduce a CMake v3+ build system that has been\ntested on most platforms including Windows, Linux, FreeBSD, macOS, AIX and\nSolaris.\n\nIn the most basic form, building with CMake might look like:\n\n```sh\ncd /path/to/cmake/source\nmkdir build\ncd build\ncmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/cares ..\nmake\nsudo make install\n```\n\nOptions\n-------\n\nOptions to CMake are passed on the command line using \"-D${OPTION}=${VALUE}\".\nThe values defined are all boolean and take values like On, Off, True, False.\n\n| Option Name                 | Description                                                           | Default Value  |\n|-----------------------------|-----------------------------------------------------------------------|----------------|\n| CARES_STATIC                | Build the static library                                              | Off            |\n| CARES_SHARED                | Build the shared library                                              | On             |\n| CARES_INSTALL               | Hook in installation, useful to disable if chain building             | On             |\n| CARES_STATIC_PIC            | Build the static library as position-independent                      | Off            |\n| CARES_BUILD_TESTS           | Build and run tests                                                   | Off            |\n| CARES_BUILD_CONTAINER_TESTS | Build and run container tests (implies CARES_BUILD_TESTS, Linux only) | Off            |\n| CARES_BUILD_TOOLS           | Build tools                                                           | On             |\n| CARES_SYMBOL_HIDING         | Hide private symbols in shared libraries                              | Off            |\n| CARES_THREADS               | Build with thread-safety support                                      | On             |\n\nNinja\n-----\n\nNinja is the next-generation build system meant for generators like CMake that\nheavily parallelize builds.  Its use is very similar to the normal build:\n\n```sh\ncd /path/to/cmake/source\nmkdir build\ncd build\ncmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/cares -G \"Ninja\" ..\nninja\nsudo ninja install\n```\n\nWindows MSVC Command Line\n-------------------------\n\n```\ncd \\path\\to\\cmake\\source\nmkdir build\ncd build\ncmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=C:\\cares -G \"NMake Makefiles\" ..\nnmake\nnmake install\n```\n\nWindows MinGW-w64 Command Line via MSYS\n---------------------------------------\n```\ncd \\path\\to\\cmake\\source\nmkdir build\ncd build\ncmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=C:\\cares -G \"MSYS Makefiles\" ..\nmake\nmake install\n```\n\n\nPlatform-specific build systems\n===============================\n\nWin32\n-----\n\n### Building Windows DLLs and C run-time (CRT) linkage issues\n\nAs a general rule, building a DLL with static CRT linkage is highly\ndiscouraged, and intermixing CRTs in the same app is something to\navoid at any cost.\n\nReading and comprehension of the following Microsoft Learn article\nis a must for any Windows developer. Especially\nimportant is full understanding if you are not going to follow the\nadvice given above.\n\n - [Use the C Run-Time](https://learn.microsoft.com/en-us/troubleshoot/developer/visualstudio/cpp/libraries/use-c-run-time)\n\nIf your app is misbehaving in some strange way, or it is suffering\nfrom memory corruption, before asking for further help, please try\nfirst to rebuild every single library your app uses as well as your\napp using the debug multithreaded dynamic C runtime.\n\n\n### MSYS\n\nBuilding is supported for native windows via both AutoTools and CMake.  When\nbuilding with autotools, you can only build either a shared version or a static\nversion (use `--disable-shared` or `--disable-static`).  CMake can build both\nsimultaneously.\n\nAll of the MSYS environments are supported: `MINGW32`, `MINGW64`, `UCRT64`,\n`CLANG32`, `CLANG64`, `CLANGARM64`.\n\n### MingW32\n\nMake sure that MinGW32's bin dir is in the search path, for example:\n\n    set PATH=c:\\mingw32\\bin;%PATH%\n\nthen run 'make -f Makefile.m32' in the root dir.\n\n\n### MSVC 6 caveats\n\nIf you use MSVC 6 it is required that you use the February 2003 edition PSDK:\nhttp://www.microsoft.com/msdownload/platformsdk/sdkupdate/psdk-full.htm\n\n\n### MSVC from command line\n\nRun the `vcvars32.bat` file to get a proper environment. The\n`vcvars32.bat` file is part of the Microsoft development environment and\nyou may find it in `C:\\Program Files\\Microsoft Visual Studio\\vc98\\bin`\nprovided that you installed Visual C/C++ 6 in the default directory.\n\nFurther details in [README.msvc](README.msvc)\n\n\n### Important static c-ares usage note\n\nWhen building an application that uses the static c-ares library, you must\nadd `-DCARES_STATICLIB` to your `CFLAGS`.  Otherwise the linker will look for\ndynamic import symbols.\n\n\nDOS\n---\n\nc-ares supports building as a 32bit protected mode application via\n[DJGPP](https://www.delorie.com/djgpp/).  It is recommended to use a DJGPP\ncross compiler from [Andrew Wu](https://github.com/andrewwutw/build-djgpp)\nas building directly in a DOS environment can be difficult.\n\nIt is required to also have [Watt-32](https://www.watt-32.net/) available\nbuilt using the same compiler.  It is recommended to build the latest `master`\nbranch from [GitHub](https://github.com/sezero/watt32/tree/master).\n\nFinally, the `DJ_PREFIX` and `WATT_ROOT` environment variables must be set\nappropriately before calling `make Makefile.dj` to build c-ares.\n\nPlease refer to our CI\n[GitHub Actions Workflow](https://github.com/c-ares/c-ares/blob/main/.github/workflows/djgpp.yml)\nfor a full build example, including building the latest Watt-32 release.\n\n\nIBM OS/2\n--------\n\nBuilding under OS/2 is not much different from building under unix.\nYou need:\n\n  - emx 0.9d\n  - GNU make\n  - GNU patch\n  - ksh\n  - GNU bison\n  - GNU file utilities\n  - GNU sed\n  - autoconf 2.13\n\nIf during the linking you get an error about `_errno` being an undefined\nsymbol referenced from the text segment, you need to add `-D__ST_MT_ERRNO__`\nin your definitions.\n\nIf you're getting huge binaries, probably your makefiles have the `-g` in\n`CFLAGS`.\n\n\nNetWare\n-------\n\nTo compile `libcares.a` / `libcares.lib` you need:\n\n - either any gcc / nlmconv, or CodeWarrior 7 PDK 4 or later.\n - gnu make and awk running on the platform you compile on;\n   native Win32 versions can be downloaded from:\n   http://www.gknw.net/development/prgtools/\n - recent Novell LibC SDK available from:\n   http://developer.novell.com/ndk/libc.htm\n - or recent Novell CLib SDK available from:\n   http://developer.novell.com/ndk/clib.htm\n\nSet a search path to your compiler, linker and tools; on Linux make\nsure that the var `OSTYPE` contains the string 'linux'; set the var\n`NDKBASE` to point to the base of your Novell NDK; and then type\n`make -f Makefile.netware` from the top source directory;\n\nVCPKG\n=====\n\nYou can build and install c-ares using [vcpkg](https://github.com/Microsoft/vcpkg/) dependency manager:\n\n```sh or powershell\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    ./vcpkg integrate install\n    ./vcpkg install c-ares\n```\n\nThe c-ares port in vcpkg is kept up to date by Microsoft team members and community contributors. If the version is out of date, please [create an issue or pull request](https://github.com/Microsoft/vcpkg) on the vcpkg repository.\n\nWATCOM\n=====\n\nTo build c-ares with OpenWatcom, you need to have at least version 1.9 of OpenWatcom. You can get the latest version from [http://openwatcom.org/ftp/install/](http://openwatcom.org/ftp/install/). Install the version that corresponds to your current host platform.\n\nAfter installing OpenWatcom, open a new command prompt and execute the following commands:\n\n```\n  cd \\path\\to\\cmake\\source\n  buildconf.bat\n  wmake -u -f Makefile.Watcom\n```\n\nAfter running wmake, you should get adig.exe, ahost.exe, and the static and dynamic versions of libcares.\n\nPORTS\n=====\n\nThis is a probably incomplete list of known hardware and operating systems\nthat c-ares has been compiled for. If you know a system c-ares compiles and\nruns on, that isn't listed, please let us know!\n\n     - Linux (i686, x86_64, AARCH64, and more)\n     - MacOS 10.4+\n     - iOS\n     - Windows 8+ (i686, x86_64)\n     - Android (ARM, AARCH64, x86_64)\n     - FreeBSD\n     - NetBSD\n     - OpenBSD\n     - Solaris (SPARC, x86_64)\n     - AIX (POWER)\n     - Tru64 (Alpha)\n     - IRIX (MIPS)\n     - Novell NetWare (i386)\n\n\nUseful URLs\n===========\n\n - c-ares: https://c-ares.org/\n - MinGW-w64: http://mingw-w64.sourceforge.net/\n - MSYS2: https://msys2.org\n - OpenWatcom: http://www.openwatcom.org/\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.1826171875,
          "content": "MIT License\n\nCopyright (c) 1998 Massachusetts Institute of Technology  \nCopyright (c) 2007 - 2023 Daniel Stenberg with many contributors, see AUTHORS\nfile.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice (including the next\nparagraph) shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "LICENSES",
          "type": "tree",
          "content": null
        },
        {
          "name": "Makefile.Watcom",
          "type": "blob",
          "size": 5.7587890625,
          "content": "# Copyright (C) The c-ares project and its contributors\n# SPDX-License-Identifier: MIT\n#\n#  Watcom / OpenWatcom / Win32 makefile for cares.\n#  Quick hack by Guenter; comments to: /dev/nul\n#  Updated by Douglas R. Reno, comments to: renodr2002@gmail.com. 2023\n#\n\n!ifndef %watcom\n!error WATCOM environment variable not set!\n!else\nSYS_INCL = -I$(%watcom)\\h\\nt -I$(%watcom)\\h\nSYS_LIBS = $(%watcom)\\lib386\\nt;$(%watcom)\\lib386\n!endif\n\n!ifdef %libname\nLIBNAME = $(%libname)\n!else\nLIBNAME\t= cares\n!endif\nTARGETS = $(LIBNAME).dll $(LIBNAME)_imp.lib $(LIBNAME).lib\nDEMOS   = adig.exe ahost.exe\n\nCC = wcc386\nLD = wlink\nAR = wlib\nRC = wrc\n\n!ifdef __LOADDLL__\n!  loaddll wcc386  wccd386\n!  loaddll wpp386  wppd386\n!  loaddll wlib    wlibd\n!endif\n\n!if $(__VERSION__) < 1250\nRM = del /q /f 2>NUL\n!else\nRM = rm -f\n!endif\nMD = mkdir\nRD = rmdir /q /s 2>NUL\nCP = copy\n\nCFLAGS = -3r -mf -hc -zff -zgf -zq -zm -zc -s -fr=con -w2 -fpi -oilrtfm -aa   &\n         -wcd=201 -bt=nt -d+ -dCARES_BUILDING_LIBRARY &\n         -dNTDDI_VERSION=0x06020000 -I. -I.\\include -I.\\src\\lib -I.\\src\\lib\\include &\n         $(SYS_INCL)\n\nLFLAGS = option quiet, map, caseexact, eliminate\n\n!ifdef %debug\nDEBUG  = -dDEBUG=1 -dDEBUGBUILD\nCFLAGS += -d3 $(DEBUG)\nLFLAGS += debug all\n!else\nCFLAGS += -d0\n!endif\n\nCFLAGS += -d_WIN32_WINNT=0x0602\n\n#\n# Change to suite.\n#\n!ifdef %use_watt32\nCFLAGS += -dWATT32 -I$(%watt_root)\\inc\n!endif\n\nOBJ_BASE = WC_Win32.obj\nLINK_ARG = $(OBJ_BASE)\\dyn\\wlink.arg\nLIB_ARG  = $(OBJ_BASE)\\stat\\wlib.arg\n\n# In order to process Makefile.inc wmake must be called with -u switch!\n!ifneq __MAKEOPTS__ -u\n!error You MUST call wmake with the -u switch!\n!else\n!include src\\lib\\Makefile.inc\n!endif\n\nOBJS = $(CSOURCES:.c=.obj)\nOBJS = $OBJ_DIR\\$(OBJS: = $OBJ_DIR\\)\n\n#\n# Use $(OBJS) as a template to generate $(OBJS_STAT) and $(OBJS_DYN).\n#\nOBJ_DIR    = $(OBJ_BASE)\\stat\nOBJS_STAT  = $+ $(OBJS) $-\n\nOBJ_DIR    = $(OBJ_BASE)\\dyn\nOBJS_DYN   += $(OBJS) $-\n\nARESBUILDH = ares_build.h\nRESOURCE   = $(OBJ_BASE)\\dyn\\cares.res\nARESBUILDH = include\\ares_build.h\n\nall: $(ARESBUILDH) $(OBJ_BASE) $(TARGETS) $(DEMOS) .SYMBOLIC\n\t@echo Welcome to cares\n\n$(OBJ_BASE):\n\t-$(MD) $^@\n\t-$(MD) $^@\\stat\n\t-$(MD) $^@\\stat\\dsa\n\t-$(MD) $^@\\stat\\event\n\t-$(MD) $^@\\stat\\legacy\n\t-$(MD) $^@\\stat\\record\n\t-$(MD) $^@\\stat\\str\n\t-$(MD) $^@\\stat\\util\n\t-$(MD) $^@\\dyn\n\t-$(MD) $^@\\dyn\\dsa\n\t-$(MD) $^@\\dyn\\event\n\t-$(MD) $^@\\dyn\\legacy\n\t-$(MD) $^@\\dyn\\record\n\t-$(MD) $^@\\dyn\\str\n\t-$(MD) $^@\\dyn\\util\n\t-$(MD) $^@\\tools\n\n$(ARESBUILDH): .EXISTSONLY\n\t@echo Make sure to run buildconf.bat!\n\n$(LIBNAME).dll: $(OBJS_DYN) $(RESOURCE) $(LINK_ARG)\n\t$(LD) name $^@ @$]@\n\n$(LIBNAME).lib: $(OBJS_STAT) $(LIB_ARG)\n\t$(AR) -q -b -c $^@ @$]@\n\n$(OBJ_BASE)\\tools\\ares_getopt.obj:\n\t$(CC) $(CFLAGS) -DCARES_STATICLIB .\\src\\tools\\ares_getopt.c -fo=$^@\n\nadig.exe: $(LIBNAME).lib\n\t$(CC) $(CFLAGS) src\\tools\\adig.c -fo=$(OBJ_BASE)\\tools\\adig.obj\n\t$(LD) name $^@ system nt $(LFLAGS) file { $(OBJ_BASE)\\tools\\adig.obj $[@ } library $]@, ws2_32.lib, iphlpapi.lib\n\nahost.exe: $(OBJ_BASE)\\tools\\ares_getopt.obj $(LIBNAME).lib\n\t$(CC) $(CFLAGS) src\\tools\\ahost.c -fo=$(OBJ_BASE)\\tools\\ahost.obj\n\t$(LD) name $^@ system nt $(LFLAGS) file { $(OBJ_BASE)\\tools\\ahost.obj $[@ } library $]@, ws2_32.lib, iphlpapi.lib\n\nclean: .SYMBOLIC\n\t-$(RM) $(OBJS_STAT)\n\t-$(RM) $(OBJS_DYN)\n\t-$(RM) $(RESOURCE) $(LINK_ARG) $(LIB_ARG)\n\nvclean realclean: clean .SYMBOLIC\n\t-$(RM) $(TARGETS) $(LIBNAME).map\n\t-$(RM) $(DEMOS) $(DEMOS:.exe=.map)\n\t-$(RD) $(OBJ_BASE)\\stat\n\t-$(RD) $(OBJ_BASE)\\stat\\dsa\n\t-$(RD) $(OBJ_BASE)\\stat\\event\n\t-$(RD) $(OBJ_BASE)\\stat\\legacy\n\t-$(RD) $(OBJ_BASE)\\stat\\record\n\t-$(RD) $(OBJ_BASE)\\stat\\str\n\t-$(RD) $(OBJ_BASE)\\stat\\util\n\t-$(RD) $(OBJ_BASE)\\dyn\n\t-$(RD) $(OBJ_BASE)\\dyn\\dsa\n\t-$(RD) $(OBJ_BASE)\\dyn\\event\n\t-$(RD) $(OBJ_BASE)\\dyn\\legacy\n\t-$(RD) $(OBJ_BASE)\\dyn\\record\n\t-$(RD) $(OBJ_BASE)\\dyn\\str\n\t-$(RD) $(OBJ_BASE)\\dyn\\util\n\t-$(RD) $(OBJ_BASE)\\tools\n\t-$(RD) $(OBJ_BASE)\n\n.ERASE\n.c: .\\src\\lib\n\n.ERASE\n$(RESOURCE): src\\lib\\cares.rc .AUTODEPEND\n\t$(RC) $(DEBUG) -q -r -zm -I..\\include $(SYS_INCL) $[@ -fo=$^@\n\n.ERASE\n.c{$(OBJ_BASE)\\dyn}.obj:\n\t$(CC) $(CFLAGS) -bd .\\src\\lib\\$^& -fo=$^@\n\n.ERASE\n{dsa}.c{$(OBJ_BASE)\\dyn\\dsa}.obj:\n\t$(CC) $(CFLAGS) -bd .\\src\\lib\\dsa\\$^& -fo=$^@\n\n.ERASE\n{event}.c{$(OBJ_BASE)\\dyn\\event}.obj:\n\t$(CC) $(CFLAGS) -bd .\\src\\lib\\event\\$^& -fo=$^@\n\n.ERASE\n{legacy}.c{$(OBJ_BASE)\\dyn\\legacy}.obj:\n\t$(CC) $(CFLAGS) -bd .\\src\\lib\\legacy\\$^& -fo=$^@\n\n.ERASE\n{record}.c{$(OBJ_BASE)\\dyn\\record}.obj:\n\t$(CC) $(CFLAGS) -bd .\\src\\lib\\record\\$^& -fo=$^@\n\n.ERASE\n{str}.c{$(OBJ_BASE)\\dyn\\str}.obj:\n\t$(CC) $(CFLAGS) -bd .\\src\\lib\\str\\$^& -fo=$^@\n\n.ERASE\n{util}.c{$(OBJ_BASE)\\dyn\\util}.obj:\n\t$(CC) $(CFLAGS) -bd .\\src\\lib\\util\\$^& -fo=$^@\n\n.ERASE\n.c{$(OBJ_BASE)\\stat}.obj:\n\t$(CC) $(CFLAGS) -DCARES_STATICLIB .\\src\\lib\\$^& -fo=$^@\n\n.ERASE\n{dsa}.c{$(OBJ_BASE)\\stat\\dsa}.obj:\n\t$(CC) $(CFLAGS) -DCARES_STATICLIB .\\src\\lib\\dsa\\$^& -fo=$^@\n\n.ERASE\n{event}.c{$(OBJ_BASE)\\stat\\event}.obj:\n\t$(CC) $(CFLAGS) -DCARES_STATICLIB .\\src\\lib\\event\\$^& -fo=$^@\n\n.ERASE\n{legacy}.c{$(OBJ_BASE)\\stat\\legacy}.obj:\n\t$(CC) $(CFLAGS) -DCARES_STATICLIB .\\src\\lib\\legacy\\$^& -fo=$^@\n\n.ERASE\n{record}.c{$(OBJ_BASE)\\stat\\record}.obj:\n\t$(CC) $(CFLAGS) -DCARES_STATICLIB .\\src\\lib\\record\\$^& -fo=$^@\n\n.ERASE\n{str}.c{$(OBJ_BASE)\\stat\\str}.obj:\n\t$(CC) $(CFLAGS) -DCARES_STATICLIB .\\src\\lib\\str\\$^& -fo=$^@\n\n.ERASE\n{util}.c{$(OBJ_BASE)\\stat\\util}.obj:\n\t$(CC) $(CFLAGS) -DCARES_STATICLIB .\\src\\lib\\util\\$^& -fo=$^@\n\n$(LINK_ARG): $(__MAKEFILES__)\n\t%create $^@\n\t@%append $^@ system nt dll\n\t@%append $^@ file { $(OBJS_DYN) }\n\t@%append $^@ option res=$(RESOURCE), implib=$(LIBNAME)_imp.lib \n\t@%append $^@ $(LFLAGS)\n\t@%append $^@ libpath $(SYS_LIBS)\n#\t@%append $^@ library clib3r.lib\n!ifdef %use_watt32\n\t@%append $^@ library $(%watt_root)\\lib\\wattcpw_imp.lib\n!else\n\t@%append $^@ library ws2_32.lib\n\t@%append $^@ library iphlpapi.lib\n!endif\n\n$(LIB_ARG): $(__MAKEFILES__)\n\t%create $^@\n\t@for %f in ($(OBJS_STAT)) do @%append $^@ +- %f\n\n\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 2.423828125,
          "content": "#############################################################\n#\n# Copyright (C) the Massachusetts Institute of Technology.\n# Copyright (C) Daniel Stenberg\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice (including the next\n# paragraph) shall be included in all copies or substantial portions of the\n# Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n#\n# SPDX-License-Identifier: MIT\n#\n#############################################################\n\nAUTOMAKE_OPTIONS = foreign nostdinc 1.9.6\nACLOCAL_AMFLAGS = -I m4 --install\n\nMSVCFILES = buildconf.bat\n\n# adig and ahost are just sample programs and thus not mentioned with the\n# regular sources and headers\nEXTRA_DIST = AUTHORS $(man_MANS) RELEASE-NOTES.md\t\\\n c-ares-config.cmake.in libcares.pc.cmake libcares.pc.in buildconf \\\n README.msvc $(MSVCFILES) INSTALL.md README.md LICENSE.md \\\n CMakeLists.txt Makefile.dj Makefile.m32 Makefile.netware Makefile.msvc \\\n Makefile.Watcom CONTRIBUTING.md SECURITY.md DEVELOPER-NOTES.md \\\n cmake/EnableWarnings.cmake\n\nCLEANFILES = $(PDFPAGES) $(HTMLPAGES)\n\nDISTCLEANFILES = include/ares_build.h\n\nDIST_SUBDIRS = include src test docs\n\nSUBDIRS = @BUILD_SUBDIRS@\n\npkgconfigdir = $(libdir)/pkgconfig\npkgconfig_DATA = libcares.pc\n\n# where to install the c-ares headers\nlibcares_ladir = $(includedir)\n\n\n# Make files named *.dist replace the file without .dist extension\ndist-hook:\n\tfind $(distdir) -name \"*.dist\" -exec rm {} \\;\n\t(distit=`find $(srcdir) -name \"*.dist\"`; \\\n\tfor file in $$distit; do \\\n\t  strip=`echo $$file | sed -e s/^$(srcdir)// -e s/\\.dist//`; \\\n\t  cp $$file $(distdir)$$strip; \\\n\tdone)\n"
        },
        {
          "name": "Makefile.dj",
          "type": "blob",
          "size": 3.4970703125,
          "content": "#\n# c-ares Makefile for djgpp/gcc/Watt-32.\n# Copyright (C) Gisle Vanem <gvanem@yahoo.no>\n# SPDX-License-Identifier: MIT\n#\ninclude src/lib/Makefile.inc\n\nOBJ_DIR = djgpp\nOBJECTS = $(addprefix $(OBJ_DIR)/, \\\n            $(CSOURCES:.c=.o))\n\nCSRC = $(addprefix src/lib/, $(CSOURCES))\n#CSRC := $(filter-out src/lib/windows_port.c, $(CSOURCES))\n\nOBJ_SUBDIRS = $(OBJ_DIR)/dsa $(OBJ_DIR)/event $(OBJ_DIR)/legacy $(OBJ_DIR)/record $(OBJ_DIR)/str $(OBJ_DIR)/util\n\nVPATH = src/lib src/tools\n\n#\n# Root directory for Waterloo tcp/ip.\n# WATT_ROOT should be set during Watt-32 install.\n#\nWATT32_ROOT = $(realpath $(WATT_ROOT))\nWATT32_LIB  = $(WATT32_ROOT)/lib/libwatt.a\n\nCFLAGS = -g -O2 -I./include -I./src/lib -I./src/lib/include \\\n         -I$(WATT32_ROOT)/inc \\\n         -Wall \\\n         -Wextra \\\n         -Waggregate-return \\\n         -Wcast-align \\\n         -Wcast-qual \\\n         -Wconversion \\\n         -Wdeclaration-after-statement \\\n         -Wdouble-promotion \\\n         -Wfloat-equal \\\n         -Winit-self \\\n         -Wjump-misses-init \\\n         -Wlogical-op \\\n         -Wmissing-braces \\\n         -Wmissing-declarations \\\n         -Wmissing-format-attribute \\\n         -Wmissing-include-dirs \\\n         -Wmissing-prototypes \\\n         -Wnested-externs \\\n         -Wno-coverage-mismatch \\\n         -Wold-style-definition \\\n         -Wpacked \\\n         -Wpointer-arith \\\n         -Wshadow \\\n         -Wsign-conversion \\\n         -Wstrict-overflow \\\n         -Wstrict-prototypes \\\n         -Wtrampolines \\\n         -Wundef \\\n         -Wunreachable-code \\\n         -Wunused \\\n         -Wvariadic-macros \\\n         -Wvla \\\n         -Wwrite-strings \\\n         -Werror=implicit-int \\\n         -Werror=implicit-function-declaration \\\n         -Wno-long-long \\\n         -DWATT32 -DHAVE_CONFIG_H   \\\n         -D_REENTRANT \\\n         -DCARES_NO_DEPRECATED \\\n         -Dselect=select_s\n\n# Can't enable -Wredundant-decls due to WATT32 issues\n\n\nLDFLAGS = -s\n\nifeq ($(OS),Windows_NT)\n  #\n  # Windows hosted djgpp cross compiler. Get it from:\n  #   https://github.com/andrewwutw/build-djgpp/releases\n  #\n  DJ_PREFIX ?= c:/some-path/djgpp/bin/i586-pc-msdosdjgpp-\n  CC = $(DJ_PREFIX)gcc\n\nelse\n  #\n  # The normal djgpp 'gcc' for MSDOS.\n  #\n  CC = gcc\nendif\n\nGENERATED = src/lib/ares_config.h \\\n            include/ares_build.h\n\nTARGETS = libcares.a adig.exe ahost.exe\n\n.SECONDARY: $(OBJ_DIR)/ares_getopt.o\n\nall: $(OBJ_DIR) $(OBJ_SUBDIRS) $(GENERATED) $(TARGETS)\n\t@echo Welcome to c-ares.\n\nlibcares.a: $(OBJECTS)\n\tar rs $@ $(OBJECTS)\n\nsrc/lib/ares_config.h: src/lib/config-dos.h\n\tcp --update $< $@\n\ninclude/ares_build.h: include/ares_build.h.dist\n\tcp --update $< $@\n\n%.exe: src/tools/%.c $(OBJ_DIR)/ares_getopt.o libcares.a\n\t$(call compile_and_link, $@, $^ $(WATT32_LIB))\n\n# Clean generated files and objects.\n#\nclean:\n\t- rm -f depend.dj $(GENERATED) $(OBJ_DIR)/*.o\n\t- rmdir $(OBJ_SUBDIRS)\n\n# Clean everything\n#\nrealclean vclean: clean\n\t- rm -f $(TARGETS) $(TARGETS:.exe=.map)\n\n.PHONY: obj_subdirs $(OBJ_SUBDIRS)\n\nobj_subdirs: $(OBJ_SUBDIRS)\n\n$(OBJ_SUBDIRS):\n\tmkdir $@\n\n$(OBJ_DIR)/%.o: %.c\n\t$(CC) $(CFLAGS) -o $@ -c $<\n\t@echo\n\ndefine compile_and_link\n  $(CC) -o $(1) $(CFLAGS) $(LDFLAGS) -Wl,--print-map,--sort-common $(2) > $(1:.exe=.map)\n  @echo\nendef\n\nDEP_REPLACE = sed -e 's@\\(.*\\)\\.o: @\\n$$(OBJ_DIR)\\/\\1.o: @' \\\n                  -e 's@$(WATT32_ROOT)@$$(WATT32_ROOT)@g'\n\n#\n# One may have to do 'make -f Makefile.dj clean' first in case\n# a foreign 'curl_config.h' is making trouble.\n#\ndepend: $(GENERATED) Makefile.dj\n\t$(CC) -MM $(CFLAGS) $(CSRC) | $(DEP_REPLACE) > depend.dj\n\n-include depend.dj\n\n"
        },
        {
          "name": "Makefile.m32",
          "type": "blob",
          "size": 2.2353515625,
          "content": "#############################################################\n#\n# Makefile for building libcares.a with MingW32 (GCC-3.2)\n# Use: make -f Makefile.m32 [demos]\n#\n# Quick hack by Guenter; comments to: /dev/nul\n#\n# Copyright (C) The c-ares project and its contributors\n# SPDX-License-Identifier: MIT\n########################################################\n## Nothing more to do below this line!\n\nLIB\t= src/lib/libcares.a\n\nAR\t= $(CROSSPREFIX)ar\nCC\t= $(CROSSPREFIX)gcc\nLD\t= $(CROSSPREFIX)gcc\nRANLIB\t= $(CROSSPREFIX)ranlib\n#RM\t= rm -f\nCP\t= cp -afv\n\nWIN32_WINNT ?= 0x0602\n\nCFLAGS\t= $(CARES_CFLAG_EXTRAS) -O2 -Wall -I./include -I./src/lib -I./src/lib/include -D_WIN32_WINNT=$(WIN32_WINNT)\nCFLAGS\t+= -DCARES_STATICLIB\nLDFLAGS\t= $(CARES_LDFLAG_EXTRAS) -s\nLIBS\t= -lws2_32 -liphlpapi\n\n# Makefile.inc provides the CSOURCES and HHEADERS defines\ninclude src/lib/Makefile.inc\n\nOBJLIB\t:= $(patsubst %.c,src/lib/%.o,$(strip $(CSOURCES)))\n\n\n$(LIB): $(OBJLIB)\n\t$(AR) cru $@ $^\n\t$(RANLIB) $@\n\nall: $(LIB) demos\n\ndemos: src/tools/adig.exe src/tools/ahost.exe\n\ntags:\n\tetags *.[ch]\n\n%.exe: %.o src/tools/ares_getopt.o $(LIB)\n\t$(LD) $(LDFLAGS) -o $@ $^ $(LIBS)\n\n$(OBJLIB): include/ares.h include/ares_dns.h include/ares_build.h\n\n.c.o:\n\t$(CC) $(CFLAGS) -o $@ -c $<\n\ninclude/ares_build.h:\n\t$(CP) include/ares_build.h.dist include/ares_build.h\n\ncheck:\n\ninstall:\n\t${top_srcdir}/mkinstalldirs ${DESTDIR}${libdir}\n\t${top_srcdir}/mkinstalldirs ${DESTDIR}${includedir}\n\t${top_srcdir}/mkinstalldirs ${DESTDIR}${mandir}/man3\n\t${INSTALL} -m 644 $(LIB) ${DESTDIR}${libdir}\n\t${RANLIB} ${DESTDIR}${libdir}/$(LIB)\n\tchmod u-w ${DESTDIR}${libdir}/$(LIB)\n\t${INSTALL} -m 444 ${srcdir}/include/ares.h ${DESTDIR}${includedir}\n\t${INSTALL} -m 444 ${srcdir}/include/ares_build.h ${DESTDIR}${includedir}\n\t${INSTALL} -m 444 ${srcdir}/include/ares_dns_record.h ${DESTDIR}${includedir}\n\t${INSTALL} -m 444 ${srcdir}/include/ares_version.h ${DESTDIR}${includedir}\n\t(for man in $(MANPAGES); do \\\n\t   ${INSTALL} -m 444 ${srcdir}/$${man} ${DESTDIR}${mandir}/man3; \\\n\tdone)\n\nclean:\n\t$(RM) src/tools/ares_getopt.o $(OBJLIB) $(LIB) src/tools/adig.exe src/tools/ahost.exe\n\ndistclean: clean\n\t$(RM) config.cache config.log config.status Makefile\nifeq \"$(wildcard include/ares_build.h.dist)\" \"include/ares_build.h.dist\"\n\t$(RM) include/ares_build.h\nendif\n"
        },
        {
          "name": "Makefile.msvc",
          "type": "blob",
          "size": 16.0439453125,
          "content": "\n# Copyright (C) 2009-2013 by Daniel Stenberg\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice (including the next\n# paragraph) shall be included in all copies or substantial portions of the\n# Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n#\n# SPDX-License-Identifier: MIT\n\n# ------------------------------------------------------------------------------\n#\n# Makefile for building c-ares libraries and sample programs with MSVC.\n#\n# Usage: nmake /f makefile.msvc CFG=<config> <target>\n#\n# <config> must be one of: [ lib-release | lib-debug | dll-release | dll-debug }\n# <target> must be one of: [ ALL | c-ares | adig | ahost | clean }\n#\n# If a <target> other than ALL or clean is given, <config> becomes mandatory.\n#\n# If neither <config> nor <target> are specified this results in\n# all targets being built for all <config> c-ares library types.\n#\n# This makefile must be processed from the subdir where it is located.\n#\n# All results are generated below a subdirectory named msvcXXX.\n#\n# ------------------------------------------------------------------------------\n\nNAME = cares\n\n# ------------------------------------------------\n# c-ares static and dynamic libraries common base\n# file names for release and debug configurations\n# ------------------------------------------------\n\nSTA_LIB_REL = lib$(NAME)\nDYN_LIB_REL = $(NAME)\nSTA_LIB_DBG = $(STA_LIB_REL)d\nDYN_LIB_DBG = $(DYN_LIB_REL)d\n\n# -------------------------------------------\n# Base names for c-ares DLL import libraries\n# -------------------------------------------\n\nIMP_LIB_REL = $(DYN_LIB_REL)\nIMP_LIB_DBG = $(DYN_LIB_DBG)\n\n# --------------------------\n# Runtime library selection\n# --------------------------\n\nRTLIB  = /MD\nRTLIBD = /MDd\n\n!IF \"$(RTLIBCFG)\" == \"static\"\nRTLIB  = /MT\nRTLIBD = /MTd\n!ENDIF\n\n# --------------------------------------------------------\n# Define USE_WATT32 to 1 to use the Watt-32 tcp/ip stack,\n# otherwise Winsock tcp/ip stack will be used as default.\n# --------------------------------------------------------\n\n!IFNDEF USE_WATT32\nUSE_WATT32 = 0\n!ENDIF\n\n# ----------------------------------------------------\n# Verify that current subdir is the c-ares source one\n# ----------------------------------------------------\n\n!IF ! EXIST(.\\src\\lib\\ares_init.c)\n!  MESSAGE Can not process Makefile.msvc from outside of c-ares source subdirectory.\n!  MESSAGE Change to the subdirectory where Makefile.msvc is found, and try again.\n!  ERROR   See previous message.\n!ENDIF\n\n# ------------------------------------------------------------------\n# Base subdir is the common root from which other subdirs will hang.\n# ------------------------------------------------------------------\n\nBASE_DIR = .\\msvc\n\n# ----------------------------------------\n# Subdir holding sources for all projects\n# ----------------------------------------\n\nSRCDIR = .\n\n# -----------------------------\n# Default installation subdirs\n# -----------------------------\n\n!IFNDEF INSTALL_DIR\nINSTALL_DIR = .\n!ENDIF\n\n!IFNDEF INSTALL_DIR_LIB\nINSTALL_DIR_LIB = $(INSTALL_DIR)\\lib\n!ENDIF\n\n!IFNDEF INSTALL_DIR_INC\nINSTALL_DIR_INC = $(INSTALL_DIR)\\include\n!ENDIF\n\n# -------------------------\n# Configuration validation\n# -------------------------\n\nVALID_CFGSET = FALSE\n!IF \"$(CFG)\" == \"lib-release\" || \"$(CFG)\" == \"lib-debug\" || \\\n    \"$(CFG)\" == \"dll-release\" || \"$(CFG)\" == \"dll-debug\"\nVALID_CFGSET = TRUE\n!ENDIF\n\n!IF \"$(VALID_CFGSET)\" == \"FALSE\" && \"$(CFG)\" != \"\"\n!  MESSAGE MSVC c-ares makefile\n!  MESSAGE\n!  MESSAGE Usage: nmake /f makefile.msvc CFG=<config> <target>\n!  MESSAGE\n!  MESSAGE <config> must be one of: [ lib-release | lib-debug | dll-release | dll-debug }\n!  MESSAGE <target> must be one of: [ ALL | c-ares | adig | ahost | clean }\n!  MESSAGE\n!  MESSAGE If a <target> other than ALL or clean is given, <config> becomes mandatory.\n!  MESSAGE\n!  MESSAGE If neither <config> nor <target> are specified this results in\n!  MESSAGE all targets being built for all <config> c-ares library types.\n!  MESSAGE\n!  ERROR Choose a valid configuration.\n!ENDIF\n\n# --------------------------------------------------------\n# Project subdirs independent of configuration being used\n# --------------------------------------------------------\n\nCARES_DIR = $(BASE_DIR)\\cares\nPROG2_DIR = $(BASE_DIR)\\adig\nPROG3_DIR = $(BASE_DIR)\\ahost\n\n# ---------------------------------------------------\n# Subdirs which are configuration dependent are only\n# defined when a valid configuration has been given.\n# ---------------------------------------------------\n\n!IF \"$(VALID_CFGSET)\" == \"TRUE\"\nCARES_OUTDIR = $(CARES_DIR)\\$(CFG)\nPROG2_OUTDIR = $(PROG2_DIR)\\$(CFG)\nPROG3_OUTDIR = $(PROG3_DIR)\\$(CFG)\nCARES_OBJDIR = $(CARES_OUTDIR)\\obj\nPROG2_OBJDIR = $(PROG2_OUTDIR)\\obj\nPROG3_OBJDIR = $(PROG3_OUTDIR)\\obj\n!ELSE\n!UNDEF CARES_OUTDIR\n!UNDEF PROG2_OUTDIR\n!UNDEF PROG3_OUTDIR\n!UNDEF CARES_OBJDIR\n!UNDEF PROG2_OBJDIR\n!UNDEF PROG3_OBJDIR\n!ENDIF\n\n# -------------------------------------\n# Settings that depend on tcp/ip stack\n# -------------------------------------\n\n!IF \"$(USE_WATT32)\" == \"1\"\nCFLAGS  = /D_WIN32_WINNT=0x0602 /DWATT32 /I$(WATT_ROOT)\\inc\n!  IFNDEF PLATFORM\nPLATFORM = x86\n!  ENDIF\nEX_LIBS_REL = $(WATT_ROOT)\\lib\\$(PLATFORM)\\wattcpvc_imp.lib advapi32.lib\nEX_LIBS_DBG = $(WATT_ROOT)\\lib\\$(PLATFORM)\\wattcpvc_imp_d.lib advapi32.lib\n!ELSE\nCFLAGS  = /D_WIN32_WINNT=0x0602\nEX_LIBS_REL = ws2_32.lib advapi32.lib kernel32.lib iphlpapi.lib\nEX_LIBS_DBG = ws2_32.lib advapi32.lib kernel32.lib iphlpapi.lib\n!ENDIF\n\n\n# ----------------------------\n# Assorted commands and flags\n# ----------------------------\n\nCC_CMD_REL = cl.exe /nologo $(RTLIB) /DNDEBUG /O2\nCC_CMD_DBG = cl.exe /nologo $(RTLIBD) /D_DEBUG /Od /Zi /RTCsu\nCC_CFLAGS  = $(CFLAGS) /D_REENTRANT /I.\\src\\lib /I.\\include /I.\\src\\lib\\include /W3 /EHsc /FD\n\nRC_CMD_REL = rc.exe /l 0x409 /d \"NDEBUG\"\nRC_CMD_DBG = rc.exe /l 0x409 /d \"_DEBUG\"\n\nLINK_CMD_LIB = link.exe /lib /nologo\nLINK_CMD_DLL = link.exe /dll /nologo /incremental:no /fixed:no\nLINK_CMD_EXE = link.exe /nologo /incremental:no /fixed:no /subsystem:console\n\nLINK_CMD_EXE_REL = $(LINK_CMD_EXE) /release\nLINK_CMD_EXE_DBG = $(LINK_CMD_EXE) /debug\n\n# ---------------------------------\n# Configuration dependent settings\n# ---------------------------------\n\n!IF \"$(CFG)\" == \"lib-release\"\nCARES_TARGET = $(STA_LIB_REL).lib\nCARES_CFLAGS = /DCARES_BUILDING_LIBRARY /DCARES_STATICLIB\nCARES_LFLAGS =\nSPROG_CFLAGS = /DCARES_STATICLIB /DCARES_NO_DEPRECATED\nSPROG_LFLAGS = /libpath:$(CARES_OUTDIR) $(EX_LIBS_REL) $(STA_LIB_REL).lib\nCARES_LINK   = $(LINK_CMD_LIB)\nSPROG_LINK   = $(LINK_CMD_EXE_REL)\nCC_CMD       = $(CC_CMD_REL)\n!ENDIF\n\n!IF \"$(CFG)\" == \"lib-debug\"\nCARES_TARGET = $(STA_LIB_DBG).lib\nCARES_CFLAGS = /DCARES_BUILDING_LIBRARY /DCARES_STATICLIB /DDEBUGBUILD\nCARES_LFLAGS =\nSPROG_CFLAGS = /DCARES_STATICLIB /DCARES_NO_DEPRECATED\nSPROG_LFLAGS = /libpath:$(CARES_OUTDIR) $(EX_LIBS_DBG) $(STA_LIB_DBG).lib\nCARES_LINK   = $(LINK_CMD_LIB)\nSPROG_LINK   = $(LINK_CMD_EXE_DBG)\nCC_CMD       = $(CC_CMD_DBG)\n!ENDIF\n\n!IF \"$(CFG)\" == \"dll-release\"\nCARES_TARGET = $(DYN_LIB_REL).dll\nCARES_CFLAGS = /DCARES_BUILDING_LIBRARY\nCARES_LFLAGS = /release $(EX_LIBS_REL) /implib:$(CARES_OUTDIR)\\$(IMP_LIB_REL).lib\nSPROG_CFLAGS = /DCARES_NO_DEPRECATED\nSPROG_LFLAGS = /libpath:$(CARES_OUTDIR) $(EX_LIBS_REL) $(IMP_LIB_REL).lib\nCARES_LINK   = $(LINK_CMD_DLL)\nSPROG_LINK   = $(LINK_CMD_EXE_REL)\nCC_CMD       = $(CC_CMD_REL)\nUSE_RES_FILE = TRUE\nRC_CMD       = $(RC_CMD_REL)\n!ENDIF\n\n!IF \"$(CFG)\" == \"dll-debug\"\nCARES_TARGET = $(DYN_LIB_DBG).dll\nCARES_CFLAGS = /DCARES_BUILDING_LIBRARY /DDEBUGBUILD\nCARES_LFLAGS = /debug $(EX_LIBS_DBG) /implib:$(CARES_OUTDIR)\\$(IMP_LIB_DBG).lib /pdb:$(CARES_OUTDIR)\\$(DYN_LIB_DBG).pdb\nSPROG_CFLAGS = /DCARES_NO_DEPRECATED\nSPROG_LFLAGS = /libpath:$(CARES_OUTDIR) $(EX_LIBS_DBG) $(IMP_LIB_DBG).lib\nCARES_LINK   = $(LINK_CMD_DLL)\nSPROG_LINK   = $(LINK_CMD_EXE_DBG)\nCC_CMD       = $(CC_CMD_DBG)\nUSE_RES_FILE = TRUE\nRC_CMD       = $(RC_CMD_DBG)\n!ENDIF\n\n# --------------------------------------------\n# Makefile.inc provides lists of source files\n# --------------------------------------------\n\n!INCLUDE .\\src\\lib\\Makefile.inc\n!INCLUDE .\\src\\tools\\Makefile.inc\n\n# ----------------------------\n# Build lists of object files\n# ----------------------------\n\n!IF \"$(VALID_CFGSET)\" == \"TRUE\"\n\n!IF [ECHO CARES_OBJS=^$(CARES_OBJDIR)\\$(CSOURCES: = $(CARES_OBJDIR^)\\) > .\\cares_objs.inc] == 0\n!INCLUDE .\\cares_objs.inc\n!IF [DEL .\\cares_objs.inc]\n!ENDIF\n!ELSE\n!ERROR Problem generating CARES_OBJS list.\n!ENDIF\nCARES_OBJS = $(CARES_OBJS:.c=.obj)\nCARES_OBJS = $(CARES_OBJS:/=\\)\n!IF \"$(USE_RES_FILE)\" == \"TRUE\"\nCARES_OBJS = $(CARES_OBJS) $(CARES_OBJDIR)\\cares.res\n!ENDIF\n\n!IF [ECHO PROG2_OBJS=^$(PROG2_OBJDIR)\\$(SAMPLESOURCES: = $(PROG2_OBJDIR^)\\) > .\\prog2_objs.inc] == 0\n!INCLUDE .\\prog2_objs.inc\n!IF [DEL .\\prog2_objs.inc]\n!ENDIF\n!ELSE\n!ERROR Problem generating PROG2_OBJS list.\n!ENDIF\nPROG2_OBJS = $(PROG2_OBJS:.c=.obj)\nPROG2_OBJS = $(PROG2_OBJS:/=\\)\nPROG2_OBJS = $(PROG2_OBJS) $(PROG2_OBJDIR)\\adig.obj\n\n!IF [ECHO PROG3_OBJS=^$(PROG3_OBJDIR)\\$(SAMPLESOURCES: = $(PROG3_OBJDIR^)\\) > .\\prog3_objs.inc] == 0\n!INCLUDE .\\prog3_objs.inc\n!IF [DEL .\\prog3_objs.inc]\n!ENDIF\n!ELSE\n!ERROR Problem generating PROG3_OBJS list.\n!ENDIF\nPROG3_OBJS = $(PROG3_OBJS:.c=.obj)\nPROG3_OBJS = $(PROG3_OBJS:/=\\)\nPROG3_OBJS = $(PROG3_OBJS) $(PROG3_OBJDIR)\\ahost.obj\n\n!ENDIF\n\n\n# --------------------------------\n# Only our custom inference rules\n# --------------------------------\n\n.SUFFIXES:\n.SUFFIXES: .c .rc\n\n{$(SRCDIR)\\src\\lib}.rc{$(CARES_OBJDIR)}.res:\n    $(RC_CMD) /Fo $@ $<\n\n{$(SRCDIR)\\src\\lib}.c{$(CARES_OBJDIR)}.obj:\n    $(CC_CMD) $(CC_CFLAGS) $(CARES_CFLAGS) /Fo$@ /Fd$(@D)\\ /c $<\n\n{$(SRCDIR)\\src\\lib\\dsa}.c{$(CARES_OBJDIR)\\dsa}.obj:\n    $(CC_CMD) $(CC_CFLAGS) $(CARES_CFLAGS) /Fo$@ /Fd$(@D)\\ /c $<\n\n{$(SRCDIR)\\src\\lib\\event}.c{$(CARES_OBJDIR)\\event}.obj:\n    $(CC_CMD) $(CC_CFLAGS) $(CARES_CFLAGS) /Fo$@ /Fd$(@D)\\ /c $<\n\n{$(SRCDIR)\\src\\lib\\legacy}.c{$(CARES_OBJDIR)\\legacy}.obj:\n    $(CC_CMD) $(CC_CFLAGS) $(CARES_CFLAGS) /Fo$@ /Fd$(@D)\\ /c $<\n\n{$(SRCDIR)\\src\\lib\\record}.c{$(CARES_OBJDIR)\\record}.obj:\n    $(CC_CMD) $(CC_CFLAGS) $(CARES_CFLAGS) /Fo$@ /Fd$(@D)\\ /c $<\n\n{$(SRCDIR)\\src\\lib\\str}.c{$(CARES_OBJDIR)\\str}.obj:\n    $(CC_CMD) $(CC_CFLAGS) $(CARES_CFLAGS) /Fo$@ /Fd$(@D)\\ /c $<\n\n{$(SRCDIR)\\src\\lib\\util}.c{$(CARES_OBJDIR)\\util}.obj:\n    $(CC_CMD) $(CC_CFLAGS) $(CARES_CFLAGS) /Fo$@ /Fd$(@D)\\ /c $<\n\n{$(SRCDIR)\\src\\tools}.c{$(PROG2_OBJDIR)}.obj:\n    $(CC_CMD) $(CC_CFLAGS) $(SPROG_CFLAGS) /Fo$@ /Fd$(PROG2_OBJDIR)\\ /c $<\n\n{$(SRCDIR)\\src\\tools}.c{$(PROG3_OBJDIR)}.obj:\n    $(CC_CMD) $(CC_CFLAGS) $(SPROG_CFLAGS) /Fo$@ /Fd$(PROG3_OBJDIR)\\ /c $<\n\n# ------------------------------------------------------------- #\n# ------------------------------------------------------------- #\n# Default target when no CFG library type has been specified,   #\n# results in building target ALL for all c-ares library types.  #\n# ------------------------------------------------------------- #\n# ------------------------------------------------------------- #\n\n!IF \"$(VALID_CFGSET)\" == \"FALSE\"\n\nALL:\n    $(MAKE) /NOLOGO /f .\\Makefile.msvc  CFG=lib-release  ALL\n    $(MAKE) /NOLOGO /f .\\Makefile.msvc  CFG=lib-debug    ALL\n    $(MAKE) /NOLOGO /f .\\Makefile.msvc  CFG=dll-release  ALL\n    $(MAKE) /NOLOGO /f .\\Makefile.msvc  CFG=dll-debug    ALL\n\nclean:\n    @-RMDIR /S /Q $(BASE_DIR) >NUL 2>&1\n\ninstall:\n    @$(MAKE) /nologo /f .\\Makefile.msvc  CFG=lib-release  install\n    @$(MAKE) /nologo /f .\\Makefile.msvc  CFG=lib-debug    install\n    @$(MAKE) /nologo /f .\\Makefile.msvc  CFG=dll-release  install\n    @$(MAKE) /nologo /f .\\Makefile.msvc  CFG=dll-debug    install\n\n!ENDIF\n\n# ---------------------------------------------------------------------\n# Targets only available when a proper CFG library type has been given\n# ---------------------------------------------------------------------\n\n!IF \"$(VALID_CFGSET)\" == \"TRUE\"\n\nALL: c-ares adig ahost\n    @\n\n# $(HHEADERS) $(CSOURCES)\nc-ares: $(CARES_OBJDIR) $(CARES_OBJS) $(CARES_OUTDIR)\n    $(CARES_LINK) $(CARES_LFLAGS) /out:$(CARES_OUTDIR)\\$(CARES_TARGET) $(CARES_OBJS)\n!   IF \"$(USE_RES_FILE)\" == \"TRUE\"\n    @if exist $(CARES_OUTDIR)\\$(CARES_TARGET).manifest mt -nologo -manifest $(CARES_OUTDIR)\\$(CARES_TARGET).manifest -outputresource:$(CARES_OUTDIR)\\$(CARES_TARGET);2\n!   ENDIF\n\n# adig.c $(SAMPLESOURCES) $(SAMPLEHEADERS)\nadig: c-ares  $(PROG2_OBJDIR) $(PROG2_OBJS) $(PROG2_OUTDIR)\n    $(SPROG_LINK) $(SPROG_LFLAGS) /out:$(PROG2_OUTDIR)\\adig.exe $(PROG2_OBJS:..\\lib=)\n    @if exist $(PROG2_OUTDIR)\\adig.exe.manifest mt -nologo -manifest $(PROG2_OUTDIR)\\adig.exe.manifest -outputresource:$(PROG2_OUTDIR)\\adig.exe;1\n\n# ahost.c $(SAMPLESOURCES) $(SAMPLEHEADERS)\nahost: c-ares $(PROG3_OBJDIR) $(PROG3_OBJS) $(PROG3_OUTDIR)\n    $(SPROG_LINK) $(SPROG_LFLAGS) /out:$(PROG3_OUTDIR)\\ahost.exe $(PROG3_OBJS:..\\lib=)\n    @if exist $(PROG3_OUTDIR)\\ahost.exe.manifest mt -nologo -manifest $(PROG3_OUTDIR)\\ahost.exe.manifest -outputresource:$(PROG3_OUTDIR)\\ahost.exe;1\n\n$(CARES_OUTDIR): $(CARES_DIR)\n    @if not exist $(CARES_OUTDIR) mkdir $(CARES_OUTDIR)\n\n$(PROG2_OUTDIR): $(PROG2_DIR)\n    @if not exist $(PROG2_OUTDIR) mkdir $(PROG2_OUTDIR)\n\n$(PROG3_OUTDIR): $(PROG3_DIR)\n    @if not exist $(PROG3_OUTDIR) mkdir $(PROG3_OUTDIR)\n\n$(CARES_OBJDIR): $(CARES_OUTDIR)\n    @if not exist $(CARES_OBJDIR) mkdir $(CARES_OBJDIR)\n    @if not exist $(CARES_OBJDIR)\\dsa mkdir $(CARES_OBJDIR)\\dsa\n    @if not exist $(CARES_OBJDIR)\\event mkdir $(CARES_OBJDIR)\\event\n    @if not exist $(CARES_OBJDIR)\\legacy mkdir $(CARES_OBJDIR)\\legacy\n    @if not exist $(CARES_OBJDIR)\\record mkdir $(CARES_OBJDIR)\\record\n    @if not exist $(CARES_OBJDIR)\\str mkdir $(CARES_OBJDIR)\\str\n    @if not exist $(CARES_OBJDIR)\\util mkdir $(CARES_OBJDIR)\\util\n\n$(PROG2_OBJDIR): $(PROG2_OUTDIR)\n    @if not exist $(PROG2_OBJDIR) mkdir $(PROG2_OBJDIR)\n    @if not exist $(PROG2_OBJDIR)\\str mkdir $(PROG2_OBJDIR)\\str\n\n$(PROG3_OBJDIR): $(PROG3_OUTDIR)\n    @if not exist $(PROG3_OBJDIR) mkdir $(PROG3_OBJDIR)\n    @if not exist $(PROG3_OBJDIR)\\str mkdir $(PROG3_OBJDIR)\\str\n\nclean:\n    @-RMDIR /S /Q $(CARES_OBJDIR)\\dsa >NUL 2>&1\n    @-RMDIR /S /Q $(CARES_OBJDIR)\\event >NUL 2>&1\n    @-RMDIR /S /Q $(CARES_OBJDIR)\\legacy >NUL 2>&1\n    @-RMDIR /S /Q $(CARES_OBJDIR)\\record >NUL 2>&1\n    @-RMDIR /S /Q $(CARES_OBJDIR)\\str >NUL 2>&1\n    @-RMDIR /S /Q $(CARES_OBJDIR)\\util >NUL 2>&1\n    @-RMDIR /S /Q $(CARES_OUTDIR) >NUL 2>&1\n    @-RMDIR /S /Q $(PROG2_OBJDIR)\\str >NUL 2>&1\n    @-RMDIR /S /Q $(PROG2_OUTDIR) >NUL 2>&1\n    @-RMDIR /S /Q $(PROG3_OBJDIR)\\str >NUL 2>&1\n    @-RMDIR /S /Q $(PROG3_OUTDIR) >NUL 2>&1\n\ninstall:\n    @if not exist $(CARES_OUTDIR)\\$(CARES_TARGET) \\\n        $(MAKE) /f .\\Makefile.msvc CFG=$(CFG) c-ares\n    @if not exist \"$(INSTALL_DIR)\"     mkdir \"$(INSTALL_DIR)\"\n    @if not exist \"$(INSTALL_DIR_LIB)\" mkdir \"$(INSTALL_DIR_LIB)\"\n    @if not exist \"$(INSTALL_DIR_INC)\" mkdir \"$(INSTALL_DIR_INC)\"\n    @copy /y $(CARES_OUTDIR)\\*.*              \"$(INSTALL_DIR_LIB)\" >NUL\n    @copy /y $(SRCDIR)\\include\\ares.h         \"$(INSTALL_DIR_INC)\" >NUL\n    @copy /y $(SRCDIR)\\include\\ares_build.h   \"$(INSTALL_DIR_INC)\" >NUL\n    @copy /y $(SRCDIR)\\include\\ares_version.h \"$(INSTALL_DIR_INC)\" >NUL\n    @copy /y $(SRCDIR)\\include\\ares_dns_record.h \"$(INSTALL_DIR_INC)\" >NUL\n    @echo Installed c-ares $(CFG)\n\n!ENDIF\n\n$(BASE_DIR):\n    @if not exist $(BASE_DIR) mkdir $(BASE_DIR)\n\n$(CARES_DIR): $(BASE_DIR)\n    @if not exist $(CARES_DIR) mkdir $(CARES_DIR)\n\n$(PROG2_DIR): $(BASE_DIR)\n    @if not exist $(PROG2_DIR) mkdir $(PROG2_DIR)\n\n$(PROG3_DIR): $(BASE_DIR)\n    @if not exist $(PROG3_DIR) mkdir $(PROG3_DIR)\n\n# End of Makefile.msvc\n"
        },
        {
          "name": "Makefile.netware",
          "type": "blob",
          "size": 14.0185546875,
          "content": "#################################################################\n#\n# Makefile for building libcares (NetWare version - gnu make)\n# Use: make -f Makefile.netware\n#\n# Copyright (C) Guenter Knauf\n# SPDX-License-Identifier: MIT\n#\n#################################################################\n\n# Edit the path below to point to the base of your Novell NDK.\nifndef NDKBASE\nNDKBASE\t= c:/novell\nendif\n\nifndef INSTDIR\nINSTDIR\t= ../ares-$(LIBCARES_VERSION_STR)-bin-nw\nendif\n\n# Edit the vars below to change NLM target settings.\nTARGETS = adig.nlm ahost.nlm\nLTARGET = libcares.$(LIBEXT)\nVERSION\t= $(LIBCARES_VERSION)\nCOPYR\t= $(LIBCARES_COPYRIGHT_STR)\nDESCR\t= cURL $(subst .def,,$(notdir $@)) $(LIBCARES_VERSION_STR) - http://curl.haxx.se\nMTSAFE\t= YES\nSTACK\t= 64000\nSCREEN\t= none\n#EXPORTS\t=\n# Comment the line below if you dont want to load protected automatically.\n#LDRING\t= 3\n\n# Edit the var below to point to your lib architecture.\nifndef LIBARCH\nLIBARCH = LIBC\nendif\n\n# must be equal to NDEBUG or DEBUG\nifndef DB\nDB\t= NDEBUG\nendif\n# Optimization: -O<n> or debugging: -g\nifeq ($(DB),NDEBUG)\n\tOPT\t= -O2\n\tOBJDIR\t= release\nelse\n\tOPT\t= -g\n\tOBJDIR\t= debug\nendif\n\n# Include the version info retrieved from curlver.h\n-include $(OBJDIR)/version.inc\n\n# The following lines defines your compiler.\nifdef CWFolder\n\tMETROWERKS = $(CWFolder)\nendif\nifdef METROWERKS\n\t# MWCW_PATH = $(subst \\,/,$(METROWERKS))/Novell Support\n\tMWCW_PATH = $(subst \\,/,$(METROWERKS))/Novell Support/Metrowerks Support\n\tCC = mwccnlm\nelse\n\tCC = gcc\nendif\n# a native win32 awk can be downloaded from here:\n# http://www.gknw.net/development/prgtools/awk-20070501.zip\nAWK\t= awk\nYACC\t= bison -y\nCP\t= cp -afv\nMKDIR\t= mkdir\n# RM\t= rm -f\n# if you want to mark the target as MTSAFE you will need a tool for\n# generating the xdc data for the linker; here's a minimal tool:\n# http://www.gknw.net/development/prgtools/mkxdc.zip\nMPKXDC\t= mkxdc\n\n# Global flags for all compilers\nCFLAGS\t+= $(OPT) -D$(DB) -DNETWARE -DHAVE_CONFIG_H -nostdinc\n\nifeq ($(CC),mwccnlm)\nLD\t= mwldnlm\nLDFLAGS\t= -nostdlib $(PRELUDE) $(OBJEXE) $(<:.def=.o) -o $@ -commandfile\nAR\t= mwldnlm\nARFLAGS\t= -nostdlib -type library -o\nLIBEXT\t= lib\n#RANLIB\t=\nCFLAGS\t+= -msgstyle gcc -gccinc -inline off -opt nointrinsics -proc 586\nCFLAGS\t+= -relax_pointers\n#CFLAGS\t+= -w on\nifeq ($(LIBARCH),LIBC)\n\tPRELUDE = $(SDK_LIBC)/imports/libcpre.o\n\tCFLAGS += -align 4\nelse\n\t# PRELUDE = $(SDK_CLIB)/imports/clibpre.o\n\t# to avoid the __init_* / __deinit_* whose dont use prelude from NDK\n\tPRELUDE = \"$(MWCW_PATH)/libraries/runtime/prelude.obj\"\n\t# CFLAGS += -include \"$(MWCW_PATH)/headers/nlm_clib_prefix.h\"\n\tCFLAGS += -align 1\nendif\nelse\nLD\t= nlmconv\nLDFLAGS\t= -T\nAR\t= ar\nARFLAGS\t= -cq\nLIBEXT\t= a\nRANLIB\t= ranlib\nCFLAGS  += -m32\nCFLAGS  += -fno-builtin -fno-strict-aliasing\nifeq ($(findstring gcc,$(CC)),gcc)\nCFLAGS  += -fpcc-struct-return\nendif\nCFLAGS  += -Wall # -pedantic\nifeq ($(LIBARCH),LIBC)\n\tPRELUDE = $(SDK_LIBC)/imports/libcpre.gcc.o\nelse\n\t# PRELUDE = $(SDK_CLIB)/imports/clibpre.gcc.o\n\t# to avoid the __init_* / __deinit_* whose dont use prelude from NDK\n\t# http://www.gknw.net/development/mk_nlm/gcc_pre.zip\n\tPRELUDE = $(NDK_ROOT)/pre/prelude.o\n\tCFLAGS += -include $(NDKBASE)/nlmconv/genlm.h\nendif\nendif\n\nNDK_ROOT = $(NDKBASE)/ndk\nSDK_CLIB = $(NDK_ROOT)/nwsdk\nSDK_LIBC = $(NDK_ROOT)/libc\n\nifeq ($(LIBARCH),LIBC)\n\tINCLUDES += -I$(SDK_LIBC)/include\n\t# INCLUDES += -I$(SDK_LIBC)/include/nks\n\t# INCLUDES += -I$(SDK_LIBC)/include/winsock\n\tCFLAGS += -D_POSIX_SOURCE\nelse\n\tINCLUDES += -I$(SDK_CLIB)/include/nlm\n\t# INCLUDES += -I$(SDK_CLIB)/include/nlm/obsolete\n\t# INCLUDES += -I$(SDK_CLIB)/include\nendif\n\nCFLAGS\t+= -I. $(INCLUDES)\n\nifeq ($(MTSAFE),YES)\n\tXDCOPT = -n\nendif\nifeq ($(MTSAFE),NO)\n\tXDCOPT = -u\nendif\n\nifeq ($(findstring /sh,$(SHELL)),/sh)\nDL\t= '\n#-include $(NDKBASE)/nlmconv/ncpfs.inc\nendif\n\n# Makefile.inc provides the CSOURCES and HHEADERS defines\ninclude Makefile.inc\n\nOBJLIB\t:= $(patsubst %.c,$(OBJDIR)/%.o,$(strip $(CSOURCES)))\nOBJEXE\t= $(OBJLIB) $(OBJDIR)/ares_getopt.o\n\n.PHONY: lib nlm prebuild dist install clean\n\nlib: prebuild $(LTARGET)\n\nnlm: prebuild $(TARGETS)\n\nprebuild: $(OBJDIR) ares_build.h $(OBJDIR)/version.inc ares_config.h\n\ninstall: $(INSTDIR) all\n\t@$(CP) *.nlm $(INSTDIR)\n\t@$(CP) ../CHANGES $(INSTDIR)\n\t@$(CP) ../COPYING $(INSTDIR)\n\t@$(CP) ../README $(INSTDIR)\n\t@$(CP) ../RELEASE-NOTES $(INSTDIR)\n\nclean:\n\t-$(RM) $(LTARGET) $(TARGETS) ares_config.h\n\t-$(RM) -r $(OBJDIR)\n\t-$(RM) -r arpa\n\n%.$(LIBEXT): $(OBJLIB)\n\t@echo Creating $@\n\t@-$(RM) $@\n\t@$(AR) $(ARFLAGS) $@ $^\nifdef RANLIB\n\t@$(RANLIB) $@\nendif\n\n%.nlm: $(OBJDIR)/%.def $(OBJDIR)/%.o $(OBJDIR)/%.xdc $(OBJEXE)\n\t@echo Linking $@\n\t@-$(RM) $@\n\t@$(LD) $(LDFLAGS) $<\n\n$(OBJDIR) $(INSTDIR):\n\t@$(MKDIR) $@\n\n$(OBJDIR)/%.o: %.c\n#\t@echo Compiling $<\n\t$(CC) $(CFLAGS) -c $< -o $@\n\n$(OBJDIR)/version.inc: ares_version.h $(OBJDIR)\n\t@echo Creating $@\n\t@$(AWK) -f get_ver.awk $< > $@\n\n$(OBJDIR)/%.xdc: Makefile.netware\n\t@echo Creating $@\n\t@$(MPKXDC) $(XDCOPT) $@\n\n$(OBJDIR)/%.def: Makefile.netware\n\t@echo Creating $@\n\t@echo $(DL)# DEF file for linking with $(LD)$(DL) > $@\n\t@echo $(DL)# Do not edit this file - it is created by make!$(DL) >> $@\n\t@echo $(DL)# All your changes will be lost!!$(DL) >> $@\n\t@echo $(DL)#$(DL) >> $@\n\t@echo $(DL)copyright \"$(COPYR)\"$(DL) >> $@\n\t@echo $(DL)description \"$(DESCR)\"$(DL) >> $@\n\t@echo $(DL)version $(VERSION)$(DL) >> $@\nifdef NLMTYPE\n\t@echo $(DL)type $(NLMTYPE)$(DL) >> $@\nendif\nifdef STACK\n\t@echo $(DL)stack $(STACK)$(DL) >> $@\nendif\nifdef SCREEN\n\t@echo $(DL)screenname \"$(SCREEN)\"$(DL) >> $@\nelse\n\t@echo $(DL)screenname \"DEFAULT\"$(DL) >> $@\nendif\nifeq ($(DB),DEBUG)\n\t@echo $(DL)debug$(DL) >> $@\nendif\n\t@echo $(DL)threadname \"$^\"$(DL) >> $@\nifdef XDCOPT\n\t@echo $(DL)xdcdata $(@:.def=.xdc)$(DL) >> $@\nendif\nifeq ($(LDRING),0)\n\t@echo $(DL)flag_on 16$(DL) >> $@\nendif\nifeq ($(LDRING),3)\n\t@echo $(DL)flag_on 512$(DL) >> $@\nendif\nifeq ($(LIBARCH),CLIB)\n\t@echo $(DL)start _Prelude$(DL) >> $@\n\t@echo $(DL)exit _Stop$(DL) >> $@\n\t@echo $(DL)import @$(SDK_CLIB)/imports/clib.imp$(DL) >> $@\n\t@echo $(DL)import @$(SDK_CLIB)/imports/threads.imp$(DL) >> $@\n\t@echo $(DL)import @$(SDK_CLIB)/imports/nlmlib.imp$(DL) >> $@\n\t@echo $(DL)import @$(SDK_CLIB)/imports/socklib.imp$(DL) >> $@\n\t@echo $(DL)module clib$(DL) >> $@\nelse\n\t@echo $(DL)flag_on 64$(DL) >> $@\n\t@echo $(DL)pseudopreemption$(DL) >> $@\n\t@echo $(DL)start _LibCPrelude$(DL) >> $@\n\t@echo $(DL)exit _LibCPostlude$(DL) >> $@\n\t@echo $(DL)check _LibCCheckUnload$(DL) >> $@\n\t@echo $(DL)import @$(SDK_LIBC)/imports/libc.imp$(DL) >> $@\n\t@echo $(DL)import @$(SDK_LIBC)/imports/netware.imp$(DL) >> $@\n\t@echo $(DL)module libc$(DL) >> $@\nendif\nifdef MODULES\n\t@echo $(DL)module $(MODULES)$(DL) >> $@\nendif\nifdef EXPORTS\n\t@echo $(DL)export $(EXPORTS)$(DL) >> $@\nendif\nifdef IMPORTS\n\t@echo $(DL)import $(IMPORTS)$(DL) >> $@\nendif\nifeq ($(LD),nlmconv)\n\t@echo $(DL)input $(PRELUDE)$(DL) >> $@\n\t@echo $(DL)input $(OBJEXE)$(DL) >> $@\n\t@echo $(DL)input $(@:.def=.o)$(DL) >> $@\n\t@echo $(DL)output $(notdir $(@:.def=.nlm))$(DL) >> $@\nendif\n\nares_config.h: Makefile.netware\n\t@echo Creating $@\n\t@echo $(DL)/* $@ for NetWare target.$(DL) > $@\n\t@echo $(DL)** Do not edit this file - it is created by make!$(DL) >> $@\n\t@echo $(DL)** All your changes will be lost!!$(DL) >> $@\n\t@echo $(DL)*/$(DL) >> $@\n\t@echo $(DL)#ifndef NETWARE$(DL) >> $@\n\t@echo $(DL)#error This $(notdir $@) is created for NetWare platform!$(DL) >> $@\n\t@echo $(DL)#endif$(DL) >> $@\n\t@echo $(DL)#define VERSION \"$(LIBCARES_VERSION_STR)\"$(DL) >> $@\n\t@echo $(DL)#define PACKAGE_BUGREPORT \"a suitable curl mailing list => http://curl.haxx.se/mail/\"$(DL) >> $@\nifeq ($(LIBARCH),CLIB)\n\t@echo $(DL)#define OS \"i586-pc-clib-NetWare\"$(DL) >> $@\n\t@echo $(DL)#define HAVE_STRICMP 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_STRNICMP 1$(DL) >> $@\n\t@echo $(DL)#define NETDB_USE_INTERNET 1$(DL) >> $@\n\t@echo $(DL)#define RECV_TYPE_ARG1 int$(DL) >> $@\n\t@echo $(DL)#define RECV_TYPE_ARG2 char *$(DL) >> $@\n\t@echo $(DL)#define RECV_TYPE_ARG3 int$(DL) >> $@\n\t@echo $(DL)#define RECV_TYPE_ARG4 int$(DL) >> $@\n\t@echo $(DL)#define RECV_TYPE_RETV int$(DL) >> $@\n\t@echo $(DL)#define RECVFROM_TYPE_ARG1 int$(DL) >> $@\n\t@echo $(DL)#define RECVFROM_TYPE_ARG2 char$(DL) >> $@\n\t@echo $(DL)#define RECVFROM_TYPE_ARG3 int$(DL) >> $@\n\t@echo $(DL)#define RECVFROM_TYPE_ARG4 int$(DL) >> $@\n\t@echo $(DL)#define RECVFROM_TYPE_ARG5 struct sockaddr$(DL) >> $@\n\t@echo $(DL)#define RECVFROM_TYPE_ARG6 int$(DL) >> $@\n\t@echo $(DL)#define RECVFROM_TYPE_RETV int$(DL) >> $@\n\t@echo $(DL)#define SEND_TYPE_ARG1 int$(DL) >> $@\n\t@echo $(DL)#define SEND_TYPE_ARG2 const char *$(DL) >> $@\n\t@echo $(DL)#define SEND_TYPE_ARG3 int$(DL) >> $@\n\t@echo $(DL)#define SEND_TYPE_ARG4 int$(DL) >> $@\n\t@echo $(DL)#define SEND_TYPE_RETV int$(DL) >> $@\nelse\n\t@echo $(DL)#define OS \"i586-pc-libc-NetWare\"$(DL) >> $@\n\t@echo $(DL)#define HAVE_DLFCN_H 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_DLOPEN 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_FTRUNCATE 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_GETTIMEOFDAY 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_INTTYPES_H 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_LONGLONG 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_STDINT_H 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_STRCASECMP 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_STRLCAT 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_STRLCPY 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_STRTOLL 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_SYS_PARAM_H 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_SYS_SELECT_H 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_TERMIOS_H 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_AF_INET6 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_PF_INET6 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_FREEADDRINFO 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_GETADDRINFO 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_SOCKADDR_IN6_SIN6_SCOPE_ID 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_STRUCT_IN6_ADDR 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_STRUCT_SOCKADDR_IN6 1$(DL) >> $@\n\t@echo $(DL)#define RECV_TYPE_ARG1 int$(DL) >> $@\n\t@echo $(DL)#define RECV_TYPE_ARG2 void *$(DL) >> $@\n\t@echo $(DL)#define RECV_TYPE_ARG3 size_t$(DL) >> $@\n\t@echo $(DL)#define RECV_TYPE_ARG4 int$(DL) >> $@\n\t@echo $(DL)#define RECV_TYPE_RETV ssize_t$(DL) >> $@\n\t@echo $(DL)#define RECVFROM_TYPE_ARG1 int$(DL) >> $@\n\t@echo $(DL)#define RECVFROM_TYPE_ARG2 void$(DL) >> $@\n\t@echo $(DL)#define RECVFROM_TYPE_ARG3 size_t$(DL) >> $@\n\t@echo $(DL)#define RECVFROM_TYPE_ARG4 int$(DL) >> $@\n\t@echo $(DL)#define RECVFROM_TYPE_ARG5 struct sockaddr$(DL) >> $@\n\t@echo $(DL)#define RECVFROM_TYPE_ARG6 size_t$(DL) >> $@\n\t@echo $(DL)#define RECVFROM_TYPE_RETV ssize_t$(DL) >> $@\n\t@echo $(DL)#define RECVFROM_TYPE_ARG2_IS_VOID 1$(DL) >> $@\n\t@echo $(DL)#define SEND_QUAL_ARG2$(DL) >> $@\n\t@echo $(DL)#define SEND_TYPE_ARG1 int$(DL) >> $@\n\t@echo $(DL)#define SEND_TYPE_ARG2 void *$(DL) >> $@\n\t@echo $(DL)#define SEND_TYPE_ARG3 size_t$(DL) >> $@\n\t@echo $(DL)#define SEND_TYPE_ARG4 int$(DL) >> $@\n\t@echo $(DL)#define SEND_TYPE_RETV ssize_t$(DL) >> $@\nendif\n\t@echo $(DL)#define HAVE_ARPA_INET_H 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_ASSERT_H 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_ERRNO_H 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_ERR_H 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_FCNTL_H 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_GETENV 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_GETHOSTBYADDR 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_GETHOSTBYNAME 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_GETHOSTNAME 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_GETPROTOBYNAME 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_GMTIME_R 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_INET_ADDR 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_IOCTL 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_IOCTL_FIONBIO 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_LIMITS_H 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_LL 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_LOCALTIME_R 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_MALLOC_H 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_NETINET_IN_H 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_RECV 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_RECVFROM 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_SELECT 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_SEND 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_SETJMP_H 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_SIGNAL 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_SIGNAL_H 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_SIG_ATOMIC_T 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_SOCKET 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_STDLIB_H 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_STRDUP 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_STRFTIME 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_STRING_H 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_STRSTR 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_STRUCT_ADDRINFO 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_STRUCT_TIMEVAL 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_SYS_IOCTL_H 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_SYS_STAT_H 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_SYS_TIME_H 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_TIME_H 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_UNAME 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_UNISTD_H 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_UTIME 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_UTIME_H 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_WRITEV 1$(DL) >> $@\n\t@echo $(DL)#define RETSIGTYPE void$(DL) >> $@\n\t@echo $(DL)#define STDC_HEADERS 1$(DL) >> $@\n\t@echo $(DL)#define TIME_WITH_SYS_TIME 1$(DL) >> $@\nifdef NW_WINSOCK\n\t@echo $(DL)#define HAVE_CLOSESOCKET 1$(DL) >> $@\nelse\n\t@echo $(DL)#define HAVE_SYS_TYPES_H 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_SYS_SOCKET_H 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_SYS_SOCKIO_H 1$(DL) >> $@\n\t@echo $(DL)#define HAVE_NETDB_H 1$(DL) >> $@\nendif\n\t@echo $(DL)#ifdef __GNUC__$(DL) >> $@\n\t@echo $(DL)#define HAVE_VARIADIC_MACROS_GCC 1$(DL) >> $@\n\t@echo $(DL)#else$(DL) >> $@\n\t@echo $(DL)#define HAVE_VARIADIC_MACROS_C99 1$(DL) >> $@\n\t@echo $(DL)#endif$(DL) >> $@\n\nFORCE: ;\n\nares_build.h: Makefile.netware FORCE\n\t@echo Creating $@\n\t@echo $(DL)/* $@ intended for NetWare target.$(DL) > $@\n\t@echo $(DL)** Do not edit this file - it is created by make!$(DL) >> $@\n\t@echo $(DL)** All your changes will be lost!!$(DL) >> $@\n\t@echo $(DL)*/$(DL) >> $@\n\t@echo $(DL)#ifndef NETWARE$(DL) >> $@\n\t@echo $(DL)#error This $(notdir $@) is created for NetWare platform!$(DL) >> $@\n\t@echo $(DL)#endif$(DL) >> $@\n\t@echo $(DL)#ifndef __CARES_BUILD_H$(DL) >> $@\n\t@echo $(DL)#define __CARES_BUILD_H$(DL) >> $@\nifeq ($(LIBARCH),CLIB)\n\t@echo $(DL)#define CARES_TYPEOF_ARES_SOCKLEN_T int$(DL) >> $@\nelse\n\t@echo $(DL)#define CARES_TYPEOF_ARES_SOCKLEN_T unsigned int$(DL) >> $@\nendif\n\t@echo $(DL)typedef CARES_TYPEOF_ARES_SOCKLEN_T ares_socklen_t;$(DL) >> $@\n\t@echo $(DL)#endif /* __CARES_BUILD_H */$(DL) >> $@\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.9453125,
          "content": "# [![c-ares logo](https://c-ares.org/art/c-ares-logo.svg)](https://c-ares.org/)\n\n[![Build Status](https://api.cirrus-ci.com/github/c-ares/c-ares.svg?branch=main)](https://cirrus-ci.com/github/c-ares/c-ares)\n[![Windows Build Status](https://ci.appveyor.com/api/projects/status/aevgc5914tm72pvs/branch/main?svg=true)](https://ci.appveyor.com/project/c-ares/c-ares/branch/main)\n[![Coverage Status](https://coveralls.io/repos/github/c-ares/c-ares/badge.svg?branch=main)](https://coveralls.io/github/c-ares/c-ares?branch=main)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/291/badge)](https://bestpractices.coreinfrastructure.org/projects/291)\n[![Fuzzing Status](https://oss-fuzz-build-logs.storage.googleapis.com/badges/c-ares.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:c-ares)\n[![Bugs](https://sonarcloud.io/api/project_badges/measure?project=c-ares_c-ares&metric=bugs)](https://sonarcloud.io/summary/new_code?id=c-ares_c-ares)\n[![Coverity Scan Status](https://scan.coverity.com/projects/c-ares/badge.svg)](https://scan.coverity.com/projects/c-ares)\n\n- [Overview](#overview)\n- [Code](#code)\n- [Communication](#communication)\n- [Release Keys](#release-keys)\n  - [Verifying signatures](#verifying-signatures)\n- [Features](#features)\n  - [RFCs and Proposals](#supported-rfcs-and-proposals)\n\n## Overview\n[c-ares](https://c-ares.org) is a modern DNS (stub) resolver library, written in\nC. It provides interfaces for asynchronous queries while trying to abstract the\nintricacies of the underlying DNS protocol.  It was originally intended for\napplications which need to perform DNS queries without blocking, or need to\nperform multiple DNS queries in parallel.\n\nOne of the goals of c-ares is to be a better DNS resolver than is provided by\nyour system, regardless of which system you use.  We recommend using\nthe c-ares library in all network applications even if the initial goal of\nasynchronous resolution is not necessary to your application.\n\nc-ares will build with any C89 compiler and is [MIT licensed](LICENSE.md),\nwhich makes it suitable for both free and commercial software. c-ares runs on\nLinux, FreeBSD, OpenBSD, MacOS, Solaris, AIX, Windows, Android, iOS and many\nmore operating systems.\n\nc-ares has a strong focus on security, implementing safe parsers and data\nbuilders used throughout the code, thus avoiding many of the common pitfalls\nof other C libraries.  Through automated testing with our extensive testing\nframework, c-ares is constantly validated with a range of static and dynamic\nanalyzers, as well as being constantly fuzzed by [OSS Fuzz](https://github.com/google/oss-fuzz).\n\nWhile c-ares has been around for over 20 years, it has been actively maintained\nboth in regards to the latest DNS RFCs as well as updated to follow the latest\nbest practices in regards to C coding standards.\n\n## Code\n\nThe full source code and revision history is available in our\n[GitHub  repository](https://github.com/c-ares/c-ares).  Our signed releases\nare available in the [release archives](https://c-ares.org/download/).\n\n\nSee the [INSTALL.md](INSTALL.md) file for build information.\n\n## Communication\n\n**Issues** and **Feature Requests** should be reported to our\n[GitHub Issues](https://github.com/c-ares/c-ares/issues) page.\n\n**Discussions** around c-ares and its use, are held on\n[GitHub Discussions](https://github.com/c-ares/c-ares/discussions/categories/q-a)\nor the [Mailing List](https://lists.haxx.se/mailman/listinfo/c-ares).  Mailing\nList archive [here](https://lists.haxx.se/pipermail/c-ares/).\nPlease, do not mail volunteers privately about c-ares.\n\n**Security vulnerabilities** are treated according to our\n[Security Procedure](SECURITY.md), please email c-ares-security at\n haxx.se if you suspect one.\n\n\n## Release keys\n\nPrimary GPG keys for c-ares Releasers (some Releasers sign with subkeys):\n\n* **Daniel Stenberg** <<daniel@haxx.se>>\n  `27EDEAF22F3ABCEB50DB9A125CC908FDB71E12C2`\n* **Brad House** <<brad@brad-house.com>>\n  `DA7D64E4C82C6294CB73A20E22E3D13B5411B7CA`\n\nTo import the full set of trusted release keys (including subkeys possibly used\nto sign releases):\n\n```bash\ngpg --keyserver hkps://keyserver.ubuntu.com --recv-keys 27EDEAF22F3ABCEB50DB9A125CC908FDB71E12C2 # Daniel Stenberg\ngpg --keyserver hkps://keyserver.ubuntu.com --recv-keys DA7D64E4C82C6294CB73A20E22E3D13B5411B7CA # Brad House\n```\n\n### Verifying signatures\n\nFor each release `c-ares-X.Y.Z.tar.gz` there is a corresponding\n`c-ares-X.Y.Z.tar.gz.asc` file which contains the detached signature for the\nrelease.\n\nAfter fetching all of the possible valid signing keys and loading into your\nkeychain as per the prior section, you can simply run the command below on\nthe downloaded package and detached signature:\n\n```bash\n% gpg -v --verify c-ares-1.29.0.tar.gz.asc c-ares-1.29.0.tar.gz\ngpg: enabled compatibility flags:\ngpg: Signature made Fri May 24 02:50:38 2024 EDT\ngpg:                using RSA key 27EDEAF22F3ABCEB50DB9A125CC908FDB71E12C2\ngpg: using pgp trust model\ngpg: Good signature from \"Daniel Stenberg <daniel@haxx.se>\" [unknown]\ngpg: WARNING: This key is not certified with a trusted signature!\ngpg:          There is no indication that the signature belongs to the owner.\nPrimary key fingerprint: 27ED EAF2 2F3A BCEB 50DB  9A12 5CC9 08FD B71E 12C2\ngpg: binary signature, digest algorithm SHA512, key algorithm rsa2048\n```\n\n## SLSA Provenance\nThis project generates [SLSA](https://slsa.dev/) provenance for its releases! This enables you to\nverify the integrity of the downloaded artifacts and ensure that the release was\ngenerated from the intended repository.\n\nTo verify the provenance of the release, please follow the instructions [here](https://github.com/slsa-framework/slsa-github-generator#verify-provenance).\n\nExample:\n```\n$ curl -sO https://github.com/c-ares/c-ares/releases/download/v1.34.3/c-ares-1.34.3.intoto.jsonl\n$ curl -sO https://github.com/c-ares/c-ares/releases/download/v1.34.3/c-ares-1.34.3.tar.gz\n$ slsa-verifier verify-artifact c-ares-1.34.3.tar.gz \\\n    --provenance-path c-ares-1.34.3.intoto.jsonl \\\n    --source-uri github.com/c-ares/c-ares \\\n    --source-tag v1.34.3\nVerified signature against tlog entry index 147812470 at URL: https://rekor.sigstore.dev/api/v1/log/entries/108e9186e8c5677a9bfd5bc5181d05ada688a805f9a59cfd082dec27cb6d6567f85b7382eea39dc5\nVerified build using builder \"https://github.com/slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@refs/tags/v2.0.0\" at commit c29e75d54c3743783d51a609980495cf553b4bca\nVerifying artifact c-ares-1.34.3.tar.gz: PASSED\n\nPASSED: SLSA verification passed\n```\n\n## Features\n\nSee [Features](FEATURES.md)\n\n### Supported RFCs and Proposals\n- [RFC1035](https://datatracker.ietf.org/doc/html/rfc1035).\n  Initial/Base DNS RFC\n- [RFC2671](https://datatracker.ietf.org/doc/html/rfc2671),\n  [RFC6891](https://datatracker.ietf.org/doc/html/rfc6891).\n  EDNS0 option (meta-RR)\n- [RFC3596](https://datatracker.ietf.org/doc/html/rfc3596).\n  IPv6 Address. `AAAA` Record.\n- [RFC2782](https://datatracker.ietf.org/doc/html/rfc2782).\n  Server Selection. `SRV` Record.\n- [RFC3403](https://datatracker.ietf.org/doc/html/rfc3403).\n  Naming Authority Pointer. `NAPTR` Record.\n- [RFC6698](https://datatracker.ietf.org/doc/html/rfc6698).\n  DNS-Based Authentication of Named Entities (DANE) Transport Layer Security (TLS) Protocol.\n  `TLSA` Record.\n- [RFC9460](https://datatracker.ietf.org/doc/html/rfc9460).\n  General Purpose Service Binding, Service Binding type for use with HTTPS.\n  `SVCB` and `HTTPS` Records.\n- [RFC7553](https://datatracker.ietf.org/doc/html/rfc7553).\n  Uniform Resource Identifier. `URI` Record.\n- [RFC6844](https://datatracker.ietf.org/doc/html/rfc6844).\n  Certification Authority Authorization. `CAA` Record.\n- [RFC2535](https://datatracker.ietf.org/doc/html/rfc2535),\n  [RFC2931](https://datatracker.ietf.org/doc/html/rfc2931).\n  `SIG0` Record. Only basic parser, not full implementation.\n- [RFC7873](https://datatracker.ietf.org/doc/html/rfc7873),\n  [RFC9018](https://datatracker.ietf.org/doc/html/rfc9018).\n  DNS Cookie off-path dns poisoning and amplification mitigation.\n- [draft-vixie-dnsext-dns0x20-00](https://datatracker.ietf.org/doc/html/draft-vixie-dnsext-dns0x20-00).\n  DNS 0x20 query name case randomization to prevent cache poisioning attacks.\n- [RFC7686](https://datatracker.ietf.org/doc/html/rfc7686).\n  Reject queries for `.onion` domain names with `NXDOMAIN`.\n- [RFC2606](https://datatracker.ietf.org/doc/html/rfc2606),\n  [RFC6761](https://datatracker.ietf.org/doc/html/rfc6761).\n  Special case treatment for `localhost`/`.localhost`.\n- [RFC2308](https://datatracker.ietf.org/doc/html/rfc2308),\n  [RFC9520](https://datatracker.ietf.org/doc/html/rfc9520).\n  Negative Caching of DNS Resolution Failures.\n- [RFC6724](https://datatracker.ietf.org/doc/html/rfc6724).\n  IPv6 address sorting as used by `ares_getaddrinfo()`.\n- [RFC7413](https://datatracker.ietf.org/doc/html/rfc7413).\n  TCP FastOpen (TFO) for 0-RTT TCP Connection Resumption.\n- [RFC3986](https://datatracker.ietf.org/doc/html/rfc3986).\n  Uniform Resource Identifier (URI). Used for server configuration.\n"
        },
        {
          "name": "README.msvc",
          "type": "blob",
          "size": 3.6064453125,
          "content": "\n\n                          ___       __ _ _ __ ___  ___\n                         / __| ___ / _` | '__/ _ \\/ __|\n                        | (_  |___| (_| | | |  __/\\__ \\\n                         \\___|     \\__,_|_|  \\___||___/\n\n\n                How to build c-ares using MSVC or Visual Studio\n               =================================================\n\n\n\n  How to build using MSVC from the command line\n  ---------------------------------------------\n\n  Open a command prompt window and ensure that the environment is properly\n  set up in order to use MSVC or Visual Studio compiler tools.\n\n  Change to c-ares source folder where Makefile.msvc file is located and run:\n\n  > nmake -f Makefile.msvc\n\n  This will build all c-ares libraries as well as three sample programs.\n\n  Once the above command has finished a new folder named MSVCXX will exist\n  below the folder where makefile.msvc is found. The name of the folder\n  depends on the MSVC compiler version being used to build c-ares.\n\n  Below the MSVCXX folder there will exist four folders named 'cares',\n  'ahost', and 'adig'. The 'cares' folder is the one that\n  holds the c-ares libraries you have just generated, the other three\n  hold sample programs that use the libraries.\n\n  The above command builds four versions of the c-ares library, dynamic\n  and static versions and each one in release and debug flavours. Each\n  of these is found in folders named dll-release, dll-debug, lib-release,\n  and lib-debug, which hang from the 'cares' folder mentioned above. Each\n  sample program also has folders with the same names to reflect which\n  library version it is using.\n\n\n  How to install using MSVC from the command line\n  -----------------------------------------------\n\n  In order to allow easy usage of c-ares libraries it may be convenient to\n  install c-ares libraries and header files to a common subdirectory tree.\n\n  Once that c-ares libraries have been built using procedure described above,\n  use same command prompt window to define environment variable INSTALL_DIR\n  to designate the top subdirectory where installation of c-ares libraries and\n  header files will be done.\n\n  > set INSTALL_DIR=c:\\c-ares\n\n  Afterwards, run following command to actually perform the installation:\n\n  > nmake -f Makefile.msvc install\n\n  Installation procedure will copy c-ares libraries to subdirectory 'lib' and\n  c-ares header files to subdirectory 'include' below the INSTALL_DIR subdir.\n\n  When environment variable INSTALL_DIR is not defined, installation is done\n  to c-ares source folder where Makefile.msvc file is located.\n\n\n\n  Relationship between c-ares library file names and versions\n  -----------------------------------------------------------\n\n  c-ares static release library version files:\n\n      libcares.lib -> static release library\n\n  c-ares static debug library version files:\n\n      libcaresd.lib -> static debug library\n\n  c-ares dynamic release library version files:\n\n      cares.dll -> dynamic release library\n      cares.lib -> import library for the dynamic release library\n      cares.exp -> export file for the dynamic release library\n\n  c-ares dynamic debug library version files:\n\n      caresd.dll -> dynamic debug library\n      caresd.lib -> import library for the dynamic debug library\n      caresd.exp -> export file for the dynamic debug library\n      caresd.pdb -> debug symbol file for the dynamic debug library\n\n\n  How to use c-ares static libraries\n  ----------------------------------\n\n  When using the c-ares static library in your program, you will have to\n  define preprocessor symbol CARES_STATICLIB while building your program,\n  otherwise you will get errors at linkage stage.\n\n\nHave Fun!\n\n"
        },
        {
          "name": "RELEASE-NOTES.md",
          "type": "blob",
          "size": 1.494140625,
          "content": "## c-ares version 1.34.4 - December 14 2024\n\nThis is a bugfix release.\n\nChanges:\n* QNX Port: Port to QNX 8, add primary config reading support, add CI build. [PR #934](https://github.com/c-ares/c-ares/pull/934), [PR #937](https://github.com/c-ares/c-ares/pull/937), [PR #938](https://github.com/c-ares/c-ares/pull/938)\n\nBugfixes:\n* Empty TXT records were not being preserved. [PR #922](https://github.com/c-ares/c-ares/pull/922)\n* docs: update deprecation notices for `ares_create_query()` and `ares_mkquery()`. [PR #910](https://github.com/c-ares/c-ares/pull/910)\n* license: some files weren't properly updated. [PR #920](https://github.com/c-ares/c-ares/pull/920)\n* Fix bind local device regression from 1.34.0. [PR #929](https://github.com/c-ares/c-ares/pull/929), [PR #931](https://github.com/c-ares/c-ares/pull/931), [PR #935](https://github.com/c-ares/c-ares/pull/935)\n* CMake: set policy version to prevent deprecation warnings. [PR #932](https://github.com/c-ares/c-ares/pull/932)\n* CMake: shared and static library names should be the same on unix platforms like autotools uses. [PR #933](https://github.com/c-ares/c-ares/pull/933)\n* Update to latest autoconf archive macros for enhanced system compatibility. [PR #936](https://github.com/c-ares/c-ares/pull/936)\n\nThanks go to these friendly people for their efforts and contributions for this\nrelease:\n\n* Brad House (@bradh352)\n* Daniel Stenberg (@bagder)\n* Gregor Jasny (@gjasny)\n* @marcovsz\n* Nikolaos Chatzikonstantinou (@createyourpersonalaccount)\n* @vlasovsoft1979\n"
        },
        {
          "name": "RELEASE-PROCEDURE.md",
          "type": "blob",
          "size": 2.8583984375,
          "content": "c-ares release procedure - how to do a release\n==============================================\n\nin the source code repo\n-----------------------\n\n- edit `RELEASE-NOTES.md` to be accurate\n- edit `configure.ac`'s `CARES_VERSION_INFO`, and `CMakeLists.txt`'s\n  `CARES_LIB_VERSIONINFO` set to the same value to denote the current shared\n  object versioning.\n- edit `include/ares_version.h` and set `ARES_VERSION_*` definitions to reflect\n  the current version.\n- All release tags need to be made off a release branch named `vX.Y`, where `X`\n  is the Major version number, and `Y` is the minor version number. We also\n  want to create an empty commit in the branch with a message, this ensures\n  when we tag a release from the branch, it gets tied to the branch itself and\n  not a commit which may be shared across this branch and `main`. Create the\n  branch like:\n```\nBRANCH=1.35\ngit pull && \\\ngit checkout main && \\\ngit checkout -b v${BRANCH} main && \\\ngit commit --allow-empty -m \"Created release branch v${BRANCH}\" && \\\ngit push -u origin v${BRANCH}\n```\n- make sure all relevant changes are committed on the release branch\n- Create a signed tag for the release using a name of `vX.Y.Z` where `X` is the\n  Major version number, `Y` is the minor version number, and `Z` is the release.\n  This tag needs to be created from the release branch, for example:\n```\nBRANCH=1.35\nRELEASE=1.35.0\ngit checkout v${BRANCH} && \\\ngit pull && \\\ngit tag -s v${RELEASE} -m 'c-ares release v${RELEASE}' v${BRANCH} && \\\ngit push origin --tags\n```\n- When a tag is created, it will spawn off a github action to generate a new\n  draft release based on this workflow: [package.yml](https://github.com/c-ares/c-ares/blob/main/.github/workflows/package.yml).\n  Wait for this workflow to complete then fetch the generated source tarball:\n```\nwget https://github.com/c-ares/c-ares/releases/download/v${RELEASE}/c-ares-${RELEASE}.tar.gz\n```\n- GPG sign the release with a detached signature. Valid signing keys are currently:\n  - Daniel Stenberg <daniel@haxx.se> - 27EDEAF22F3ABCEB50DB9A125CC908FDB71E12C2\n  - Brad House <brad@brad-house.com> - DA7D64E4C82C6294CB73A20E22E3D13B5411B7CA\n```\ngpg -ab c-ares-${RELEASE}.tar.gz\n```\n- Upload the generated `c-ares-${RELEASE}.tar.gz.asc` signature as a release\n  asset, then unmark the release as being a draft.\n\nin the c-ares-www repo\n----------------------\n\n- edit `index.md`, change version and date in frontmatter\n- edit `changelog.md`, copy `RELEASE-NOTES.md` content\n- edit `download.md`, add new version and date in frontmatter\n- commit all local changes\n- push the git commits\n\ninform\n------\n\n- send an email to the c-ares mailing list. Insert the RELEASE-NOTES.md into the\n  mail.\n- Create an announcement in the GitHub Discussions Announcements section:\n  https://github.com/c-ares/c-ares/discussions/categories/announcements\n\ncelebrate\n---------\n\n- suitable beverage intake is encouraged for the festivities\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 7.380859375,
          "content": "# c-ares Security Reporting Policy\n\n- [Publishing](#publishing)\n- [Reporting Vulnerabilities](#reporting-vulnerabilities)\n  - [Reporting Requirements](#reporting-requirements)\n- [Vulnerability Handling](#vulnerability-handling)\n- [Joining the Security Team](#joining-the-security-team)\n\nThis document is intended to provide guidance on how security vulnerabilities\nshould be handled in the c-ares project.\n\n## Publishing\n\nAll known and public c-ares vulnerabilities will be listed on [the c-ares web\nsite](https://c-ares.org/vulns.html).\n\nSecurity vulnerabilities should not be entered in the project's public bug\ntracker unless the necessary configuration is in place to limit access to the\nissue to only the reporter and the project's security team.\n\n## Reporting Vulnerabilities\n\n- The person discovering the issue, the reporter, reports the vulnerability\n  privately to [c-ares-security@haxx.se](mailto:c-ares-security@haxx.se). That's\n  an email alias that reaches a handful of selected and trusted people.\n\n- Messages that do not relate to the reporting or managing of an undisclosed\n  security vulnerability in c-ares are ignored and no further action is\n  required.\n\n### Reporting Requirements\n\n1. The reporter should take great care in ensuring the security vulnerability\n   report is valid and accurate.  The reporter must understand reviewing\n   security vulnerability reports is a time consuming process and the c-ares\n   security team are volunteers.  A vast majority of vulnerability reports\n   we receive are invalid.  Please don't waste their time.\n2. The report must have a detailed description of the issue or issues.\n3. The report must contain the c-ares version that was tested.  If from an\n   unreleased version (e.g. from git main), please provide the branch name and\n   git hash tested.\n4. The report should have a valid minimal test case to reproduce the issue.\n   1. Any code in a test case that isn't relevant to reproducing the issue\n      ***must*** be removed.\n   2. The test case ***must*** compile cleanly with warnings enabled, for\n      clang/gcc at a minimum, `-Wall -W`, or `/W3` for MSVC.\n   3. The reporter ***must*** validate the API being called is being used in an\n      appropriate manner, in accordance with common C best practices and\n      requirements. e.g.:\n      1. If an API takes a C string, that means the input must be a valid C\n         string (e.g. NULL terminated).\n      2. Must not cast incompatible data types to silence compiler warnings\n         as this will cause undefined behavior.  Use the right data types. (e.g.\n         `struct ares_txt_reply *` can't be cast to `ares_dns_record_t *`, they\n         are different types).\n      3. Make sure to free/destroy any c-ares generated objects using the\n         correct function as documented in the man page of the function that\n         generated the object (e.g. use `ares_free_hostent()` to free\n         a `struct hostent *` created by `ares_parse_ptr_reply()`, not\n         `ares_free_data()`).\n5. The report should include a stacktrace/backtrace of the issue if possible.\n6. Include the below acknowledgement statement in the email containing the\n   vulnerability report.  Evaluation of the vulnerabilities will not occur\n   without this statement.  The team will simply respond redirecting you to this\n   document on reporting requirements if the statement is not included.\n   Acknowledgement statement:\n   ```\n   I acknowledge I have read and complied with the security reporting\n   requirements as described in https://c-ares.org/security.html\n   ```\n\n## Vulnerability Handling\n\nThe typical process for handling a new security vulnerability is as follows.\n\nNo information should be made public about a vulnerability until it is\nformally announced at the end of this process. That means, for example that a\nbug tracker entry must NOT be created to track the issue since that will make\nthe issue public and it should not be discussed on the project's public\nmailing list. Also messages associated with any commits should not make any\nreference to the security nature of the commit if done prior to the public\nannouncement.\n\n- A vulnerability report is sent as per [Reporting Vulnerabilities](#reporting-vulnerabilities).\n\n- A person in the security team sends an e-mail to the original reporter to\n  acknowledge the report.\n\n- The security team investigates the report and either rejects it or accepts\n  it.\n\n- If the report is rejected, the team writes to the reporter to explain why.\n\n- If the report is accepted, the team writes to the reporter to let them\n  know it is accepted and that they are working on a fix.\n\n- The release of the information should be \"as soon as possible\" and is most\n  often synced with an upcoming release that contains the fix. If the\n  reporter, or anyone else, thinks the next planned release is too far away\n  then a separate earlier release for security reasons should be considered.\n\n- Write a security advisory draft about the problem that explains what the\n  problem is, its impact, which versions it affects, solutions or\n  workarounds, when the release is out and make sure to credit all\n  contributors properly.\n\n- Request a CVE number from GitHub by drafting a security advisory via\n  [GitHub Security](https://github.com/c-ares/c-ares/security), then requesting\n  a CVE be assigned.\n\n- The security team discusses the problem, works out a fix, considers the\n  impact of the problem and suggests a release schedule. This discussion\n  should involve the reporter as much as possible.\n\n- The security team commits the fix in a private branch automatically generated\n  by the GitHub security advisory creation process. The commit message\n  should ideally contain the CVE number. This fix is usually also distributed\n  to the 'distros' mailing list to allow them to use the fix prior to the\n  public announcement.\n\n- Send the advisory draft to [distros@openwall](http://oss-security.openwall.org/wiki/mailing-lists/distros)\n  to prepare them for the upcoming public security vulnerability announcement.\n  For high-severity fixes, a patch should also be attached so it can be\n  integrated prior to the official release. Note that 'distros' won't accept an\n  embargo longer than 19 days.\n\n- At the day of the next release, the private branch is merged into the master\n  branch and pushed, the GitHub advisory is made public.  Once pushed, the\n  information is accessible to the public and the actual release should follow\n  suit immediately afterwards.\n\n- The project team creates a release that includes the fix.\n\n- The project team announces the release and the vulnerability to the world in\n  the same manner we always announce releases. It gets sent to the c-ares\n  mailing list and the oss-security mailing list.\n\n- The security web page on the web site should get the new vulnerability\n  mentioned.\n\n\n## Joining the Security Team\n\nWho is on the security team receiving notices via [c-ares-security@haxx.se](mailto:c-ares-security@haxx.se)?\n\nThere are a couple of criteria you must meet, and then we might ask you to join\nthe list or you can ask to join it. It really isn't very formal. We basically\nonly require that you have a long-term presence in the c-ares project and you\nhave shown an understanding for the project and its way of working. You must've\nbeen around for a good while and you should have no plans in vanishing in the\nnear future.\n\nWe do not make the list of partipants public mostly because it tends to vary\nsomewhat over time and a list somewhere will only risk getting outdated.\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 7.8759765625,
          "content": "# Copyright (C) The c-ares project and its contributors\n# SPDX-License-Identifier: MIT\n\nimage: Previous Visual Studio 2022\n\n# Github/Bitbucket only: get source code for one particular commit as zip archive, instead of git clone'ing.\nshallow_clone: true\n\n# Github/Bitbucket only: per-file commit filtering\nskip_commits:\n  files:\n    - .gitignore\n    - '**/*.md'\n    - .travis.yml\n    - .cirrus.yml\n    - '.github/**'\n\n# List of build configurations to test.\nconfiguration:\n  - DEBUG\n\n# Note: You can set extra cmake args for a particular matrix entry with CMAKE_EXTRA_OPTIONS. For example:\n#     CMAKE_EXTRA_OPTIONS: -DOPENSSL_ROOT_DIR=C:/OpenSSL-Win32\nenvironment:\n  matrix:\n    # MSVC 2022, 32-bit x86 (cmake, WindowsXP)\n    - COMPILER: MSVC\n      CONFTOOL: CMAKE\n      SYSTEM: CONSOLE\n      SKIP_TESTS: no\n      MSVC_SETUP_ARG: x86\n      MSVC_SETUP_PATH: C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvars32.bat\n      CMAKE_EXTRA_OPTIONS: -GNinja -DCARES_BUILD_TESTS=ON -DGTEST_ROOT=C:\\projects\\googletest -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreadedDebugDLL -DCARES_THREADS=OFF -DCMAKE_C_FLAGS=\"-D_WIN32_WINNT=0x0501\" -DCMAKE_CXX_FLAGS=\"-D_WIN32_WINNT=0x0501\"\n      TOOLSDIR: ./build/bin\n      TESTDIR: ./build/bin\n      BUILD_GOOGLETEST: yes\n\n    # MSVC 2022, 64-bit x64 (cmake)\n    - COMPILER: MSVC\n      CONFTOOL: CMAKE\n      SYSTEM: CONSOLE\n      SKIP_TESTS: no\n      MSVC_SETUP_ARG: x64\n      MSVC_SETUP_PATH: C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat\n      TOOLSDIR: ./build/bin\n      TESTDIR: ./build/bin\n      CMAKE_EXTRA_OPTIONS: -GNinja -DCARES_BUILD_TESTS=ON -DGTEST_ROOT=C:\\projects\\googletest -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreadedDebugDLL\n      BUILD_GOOGLETEST: yes\n\n    # MSVC 2022, 64-bit x86 (nmake)\n    - COMPILER: MSVC\n      CONFTOOL: NMAKE\n      SYSTEM: CONSOLE\n      SKIP_TESTS: no\n      MSVC_SETUP_ARG: x64\n      MSVC_SETUP_PATH: C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat\n      BUILD_GOOGLETEST: yes\n\n    # MSVC 2022, 32-bit x86 (nmake)\n    - COMPILER: MSVC\n      CONFTOOL: NMAKE\n      SYSTEM: CONSOLE\n      SKIP_TESTS: no\n      MSVC_SETUP_ARG: x86\n      MSVC_SETUP_PATH: C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvars32.bat\n      BUILD_GOOGLETEST: yes\n\n    # MinGW, 32-bit x86 (makefiles, Windows XP)\n    - COMPILER: MINGW\n      CONFTOOL: MAKE\n      SYSTEM: CONSOLE\n      SKIP_TESTS: no\n      PATH: C:\\mingw-w64\\i686-8.1.0-posix-dwarf-rt_v6-rev0\\mingw32\\bin;%PATH%\n      BUILD_GOOGLETEST: yes\n      MAKE_FLAGS: WIN32_WINNT=0x0501\n\n    # MinGW, 32-bit x86 (cmake static only, Windows XP)\n    - COMPILER: MINGW\n      CONFTOOL: CMAKE\n      SYSTEM: CONSOLE\n      SKIP_TESTS: no\n      TOOLSDIR: ./build/bin\n      TESTDIR: ./build/bin\n      PATH: C:\\mingw-w64\\i686-8.1.0-posix-dwarf-rt_v6-rev0\\mingw32\\bin;%PATH%\n      CMAKE_EXTRA_OPTIONS: -DCARES_SHARED=OFF -GNinja -DCARES_BUILD_TESTS=ON -DGTEST_ROOT=C:\\projects\\googletest -DCARES_THREADS=OFF -DCMAKE_C_FLAGS=\"-D_WIN32_WINNT=0x0501\" -DCMAKE_CXX_FLAGS=\"-D_WIN32_WINNT=0x0501\"\n      BUILD_GOOGLETEST: yes\n\n# Disabled until AppVeyor updates their Visual Studio with this patch:\n# https://developercommunity.visualstudio.com/t/clexe-compiler-error-C1007-when-compili/10486219\n#    # MSVC 2022, UWP (cmake)\n#    - COMPILER: MSVC\n#      CONFTOOL: CMAKE\n#      SYSTEM: CONSOLE\n#      SKIP_TESTS: yes\n#      MSVC_SETUP_ARG: x64 store\n#      MSVC_SETUP_PATH: C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat\n#      CMAKE_EXTRA_OPTIONS: -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=10.0 -A x64\n\n\ninstall:\n  - if \"%COMPILER%\" == \"MINGW\" rename \"C:\\Program Files\\Git\\usr\\bin\\sh.exe\" \"sh2.exe\"\n\nbefore_build:\n  # Setup build environment for the selected compiler (not all compilers need to do anything here).\n  #  -- Visual Studio --\n  - if \"%COMPILER%\" == \"MSVC\" call \"%MSVC_SETUP_PATH%\" %MSVC_SETUP_ARG%\n  - if \"%BUILD_GOOGLETEST%\" == \"yes\" git clone --depth=1 https://github.com/google/googletest googletest\n  - if \"%BUILD_GOOGLETEST%\" == \"yes\" cd googletest\n  - if \"%BUILD_GOOGLETEST%\" == \"yes\" cmake -DCMAKE_INSTALL_PREFIX=C:\\projects\\googletest -DCMAKE_POLICY_DEFAULT_CMP0091:STRING=NEW -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreadedDebugDLL -GNinja -Bbuild\n  - if \"%BUILD_GOOGLETEST%\" == \"yes\" cmake --build build --config Debug\n  - if \"%BUILD_GOOGLETEST%\" == \"yes\" cmake --install build --config Debug\n  - if \"%BUILD_GOOGLETEST%\" == \"yes\" cd ..\n\nbuild_script:\n  - if \"%SYSTEM%\" == \"CONSOLE\" if \"%CONFTOOL%\" == \"NMAKE\"     copy .\\include\\ares_build.h.dist .\\include\\ares_build.h\n  - if \"%SYSTEM%\" == \"CONSOLE\" if \"%CONFTOOL%\" == \"NMAKE\"     nmake /NOLOGO /f .\\Makefile.msvc\n  - if \"%SYSTEM%\" == \"CONSOLE\" if \"%CONFTOOL%\" == \"CMAKE\"     cmake -DCMAKE_BUILD_TYPE=%configuration% -DCMAKE_INSTALL_PREFIX=C:\\projects\\build-cares\\test_install -DCARES_STATIC=ON -DCARES_STATIC_PIC=ON %CMAKE_EXTRA_OPTIONS% -Bbuild\n  - if \"%SYSTEM%\" == \"CONSOLE\" if \"%CONFTOOL%\" == \"CMAKE\"     cmake --build build --config Debug\n  - if \"%SYSTEM%\" == \"CONSOLE\" if \"%CONFTOOL%\" == \"CMAKE\"     cmake --install build --config Debug\n  - if \"%SYSTEM%\" == \"CONSOLE\" if \"%CONFTOOL%\" == \"MAKE\"      copy .\\include\\ares_build.h.dist .\\include\\ares_build.h\n  - if \"%SYSTEM%\" == \"CONSOLE\" if \"%CONFTOOL%\" == \"MAKE\"      mingw32-make.exe -f Makefile.m32 demos %MAKE_FLAGS%\n\ntest_script:\n  # We can't use powershell for tests due to treating stderr as an error\n  - if \"%SYSTEM%\" == \"CONSOLE\" if \"%CONFTOOL%\" == \"NMAKE\" if not \"%SKIP_TESTS%\" == \"yes\" cd test\n  - if \"%SYSTEM%\" == \"CONSOLE\" if \"%CONFTOOL%\" == \"NMAKE\" if not \"%SKIP_TESTS%\" == \"yes\" nmake GTEST_ROOT=C:\\projects\\googletest /NOLOGO /f .\\Makefile.msvc vtest\n  - if \"%SYSTEM%\" == \"CONSOLE\" if \"%CONFTOOL%\" == \"NMAKE\" if not \"%SKIP_TESTS%\" == \"yes\" nmake GTEST_ROOT=C:\\projects\\googletest /NOLOGO /f .\\Makefile.msvc aresfuzz aresfuzzname dnsdump\n  - if \"%SYSTEM%\" == \"CONSOLE\" if \"%CONFTOOL%\" == \"NMAKE\" if not \"%SKIP_TESTS%\" == \"yes\" .\\msvc\\arestest\\lib-debug\\dnsdump.exe fuzzinput\\answer_a fuzzinput\\answer_aaaa\n  - if \"%SYSTEM%\" == \"CONSOLE\" if \"%CONFTOOL%\" == \"MAKE\"  if not \"%SKIP_TESTS%\" == \"yes\" cd test\n  - if \"%SYSTEM%\" == \"CONSOLE\" if \"%CONFTOOL%\" == \"MAKE\"  if not \"%SKIP_TESTS%\" == \"yes\" mingw32-make.exe GTEST_ROOT=C:\\projects\\googletest -f Makefile.m32 vtest %MAKE_FLAGS%\n  - if \"%SYSTEM%\" == \"CONSOLE\" if \"%CONFTOOL%\" == \"MAKE\"  if not \"%SKIP_TESTS%\" == \"yes\" mingw32-make.exe GTEST_ROOT=C:\\projects\\googletest -f Makefile.m32 aresfuzz.exe aresfuzzname.exe dnsdump.exe %MAKE_FLAGS%\n  - if \"%SYSTEM%\" == \"CONSOLE\" if \"%CONFTOOL%\" == \"MAKE\"  if not \"%SKIP_TESTS%\" == \"yes\" .\\dnsdump.exe fuzzinput\\answer_a fuzzinput\\answer_aaaa\n  - if \"%SYSTEM%\" == \"CONSOLE\" if \"%CONFTOOL%\" == \"CMAKE\" if not \"%SKIP_TESTS%\" == \"yes\" cd %TESTDIR%\n  - if \"%SYSTEM%\" == \"CONSOLE\" if \"%CONFTOOL%\" == \"CMAKE\" if not \"%SKIP_TESTS%\" == \"yes\" .\\adig.exe www.google.com\n  - if \"%SYSTEM%\" == \"CONSOLE\" if \"%CONFTOOL%\" == \"CMAKE\" if not \"%SKIP_TESTS%\" == \"yes\" .\\ahost.exe www.google.com\n  - if \"%SYSTEM%\" == \"CONSOLE\" if \"%CONFTOOL%\" == \"CMAKE\" if not \"%SKIP_TESTS%\" == \"yes\" .\\arestest.exe --gtest_filter=-*LiveSearchTXT*:*LiveSearchANY*:*LiveGetLocalhostByAddr*\n  - if \"%SYSTEM%\" == \"CONSOLE\" if \"%CONFTOOL%\" == \"CMAKE\" if not \"%SKIP_TESTS%\" == \"yes\" .\\dnsdump.exe \"%APPVEYOR_BUILD_FOLDER%\\test\\fuzzinput\\answer_a\" \"%APPVEYOR_BUILD_FOLDER%\\test\\fuzzinput\\answer_aaaa\"\n\n#on_finish:\n#  - cd C:\\projects\\build-cares\\test\n#  - dir /B *.log > list.txt\n#  - cmake -E tar cfv all_tests.zip --format=zip --files-from=list.txt\n#  - appveyor PushArtifact all_tests.zip\n#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))\n# Force build worker to stay open after build is done, so we can RDP into it.\n\n# Enable RDP connections into build worker.\n#init:\n#  - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))\n"
        },
        {
          "name": "buildconf",
          "type": "blob",
          "size": 0.2060546875,
          "content": "#!/bin/sh\n# Copyright (C) The c-ares project and its contributors\n# SPDX-License-Identifier: MIT\n\necho \"*** Do not use buildconf. Instead, just use: autoreconf -fi\" >&2\nexec ${AUTORECONF:-autoreconf} -fi \"${@}\"\n"
        },
        {
          "name": "buildconf.bat",
          "type": "blob",
          "size": 0.630859375,
          "content": "@echo off\nREM\nREM\nREM This batch file must be used to set up a git tree to build on\nREM systems where there is no autotools support (i.e. Microsoft).\nREM\nREM This file is not included nor needed for c-ares' release\nREM archives, neither for c-ares' daily snapshot archives.\nREM\nREM Copyright (C) The c-ares project and its contributors\nREM SPDX-License-Identifier: MIT\n\nif exist GIT-INFO goto start_doing\nECHO ERROR: This file shall only be used with a c-ares git checkout.\ngoto end_all\n:start_doing\n\nif not exist include\\ares_build.h.dist goto end_ares_build_h\ncopy /Y include\\ares_build.h.dist include\\ares_build.h\n:end_ares_build_h\n\n:end_all\n\n"
        },
        {
          "name": "c-ares-config.cmake.in",
          "type": "blob",
          "size": 0.865234375,
          "content": "# Copyright (C) The c-ares project and its contributors\n# SPDX-License-Identifier: MIT\n\n@PACKAGE_INIT@\n\nset_and_check(c-ares_INCLUDE_DIR \"@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@\")\n\ninclude(\"${CMAKE_CURRENT_LIST_DIR}/c-ares-config-version.cmake\")\ninclude(\"${CMAKE_CURRENT_LIST_DIR}/c-ares-targets.cmake\")\n\nset(c-ares_LIBRARY c-ares::cares)\n\nif(@CARES_SHARED@)\n\tif(NOT TARGET c-ares::cares_shared)\n\t\tadd_library(c-ares::cares_shared INTERFACE IMPORTED)\n\t\tset_target_properties(c-ares::cares_shared PROPERTIES INTERFACE_LINK_LIBRARIES \"c-ares::cares\")\n\tendif()\n\tset(c-ares_SHARED_LIBRARY c-ares::cares_shared)\nendif()\n\nif(@CARES_STATIC@)\n\tif(NOT TARGET c-ares::cares_static)\n\t\tadd_library(c-ares::cares_static INTERFACE IMPORTED)\n\t\tset_target_properties(c-ares::cares_static PROPERTIES INTERFACE_LINK_LIBRARIES \"c-ares::cares\")\n\tendif()\n\tset(c-ares_STATIC_LIBRARY c-ares::cares_static)\nendif()\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 33.8828125,
          "content": "dnl Copyright (C) The c-ares project and its contributors\ndnl SPDX-License-Identifier: MIT\nAC_PREREQ([2.69])\n\nAC_INIT([c-ares], [1.34.4],\n  [c-ares mailing list: http://lists.haxx.se/listinfo/c-ares])\n\nCARES_VERSION_INFO=\"21:3:19\"\ndnl This flag accepts an argument of the form current[:revision[:age]]. So,\ndnl passing -version-info 3:12:1 sets current to 3, revision to 12, and age to\ndnl 1.\ndnl\ndnl If either revision or age are omitted, they default to 0. Also note that age\ndnl must be less than or equal to the current interface number.\ndnl\ndnl Here are a set of rules to help you update your library version information:\ndnl\ndnl 1.Start with version information of 0:0:0 for each libtool library.\ndnl\ndnl 2.Update the version information only immediately before a public release of\ndnl your software. More frequent updates are unnecessary, and only guarantee\ndnl that the current interface number gets larger faster.\ndnl\ndnl 3.If the library source code has changed at all since the last update, then\ndnl increment revision (c:r+1:a)\ndnl\ndnl 4.If any interfaces have been added, removed, or changed since the last\ndnl update, increment current, and set revision to 0. (c+1:r=0:a)\ndnl\ndnl 5.If any interfaces have been added since the last public release, then\ndnl increment age. (c:r:a+1)\ndnl\ndnl 6.If any interfaces have been removed since the last public release, then\ndnl set age to 0. (c:r:a=0)\ndnl\nAC_SUBST([CARES_VERSION_INFO])\n\nAC_CONFIG_SRCDIR([src/lib/ares_ipv6.h])\nAC_CONFIG_HEADERS([src/lib/ares_config.h include/ares_build.h])\nAC_CONFIG_AUX_DIR(config)\nAC_CONFIG_MACRO_DIR([m4])\nAC_USE_SYSTEM_EXTENSIONS\nAX_CXX_COMPILE_STDCXX_14([noext],[optional])\nAM_INIT_AUTOMAKE([foreign subdir-objects 1.9.6])\nLT_INIT([win32-dll,pic,disable-fast-install,aix-soname=svr4])\nAC_LANG([C])\nAC_PROG_CC\nAM_PROG_CC_C_O\nAC_PROG_EGREP\nAC_PROG_INSTALL\nAC_CANONICAL_HOST\nAX_COMPILER_VENDOR\n\nAC_MSG_CHECKING([whether this is native windows])\nac_cv_native_windows=no\nac_cv_windows=no\ncase $host_os in\n  mingw*)\n    ac_cv_native_windows=yes\n    ac_cv_windows=yes\n    ;;\n  cygwin*)\n    ac_cv_windows=yes\n    ;;\nesac\nif test \"$ax_cv_c_compiler_vendor\" = \"microsoft\" ; then\n  ac_cv_native_windows=yes\n  ac_cv_windows=yes\nfi\nAC_MSG_RESULT($ac_cv_native_windows)\n\n\nAC_ENABLE_SHARED\n\ndnl Disable static builds by default on Windows unless overwritten since Windows\ndnl can't simultaneously build shared and static with autotools.\nAS_IF([test \"x$ac_cv_windows\" = \"xyes\"], [AC_DISABLE_STATIC], [AC_ENABLE_STATIC])\n\nAC_ARG_ENABLE(warnings,\n  AS_HELP_STRING([--disable-warnings],[Disable strict compiler warnings]),\n  [ enable_warnings=${enableval} ],\n  [ enable_warnings=yes ])\n\nAC_ARG_ENABLE(symbol-hiding,\n  AS_HELP_STRING([--disable-symbol-hiding], [Disable symbol hiding. Enabled by default if the compiler supports it.]),\n  [\n    symbol_hiding=\"$enableval\"\n    if test \"$symbol_hiding\" = \"no\" -a \"x$enable_shared\" = \"xyes\" ; then\n      case $host_os in\n        cygwin* | mingw* | pw32* | cegcc*)\n          AC_MSG_ERROR([Cannot disable symbol hiding on windows])\n        ;;\n      esac\n    fi\n  ],\n  [\n    if test \"x$enable_shared\" = \"xyes\" ; then\n      symbol_hiding=\"maybe\"\n    else\n      symbol_hiding=\"no\"\n    fi\n  ]\n)\n\nAC_ARG_ENABLE(tests,\n  AS_HELP_STRING([--disable-tests], [disable building of test suite. Built by default if GoogleTest is found.]),\n  [ build_tests=\"$enableval\" ],\n  [ if test \"x$HAVE_CXX14\" = \"x1\" && test \"x$cross_compiling\" = \"xno\" ; then\n      build_tests=\"maybe\"\n    else\n      build_tests=\"no\"\n    fi\n  ]\n)\n\nAC_ARG_ENABLE(cares-threads,\n  AS_HELP_STRING([--disable-cares-threads], [Disable building of thread safety support]),\n  [ CARES_THREADS=${enableval} ],\n  [ CARES_THREADS=yes ])\n\nAC_ARG_WITH(random,\n  AS_HELP_STRING([--with-random=FILE],\n                 [read randomness from FILE (default=/dev/urandom)]),\n  [ CARES_RANDOM_FILE=\"$withval\" ],\n  [ CARES_RANDOM_FILE=\"/dev/urandom\" ]\n)\nif test -n \"$CARES_RANDOM_FILE\" && test X\"$CARES_RANDOM_FILE\" != Xno ; then\n  AC_SUBST(CARES_RANDOM_FILE)\n  AC_DEFINE_UNQUOTED(CARES_RANDOM_FILE, \"$CARES_RANDOM_FILE\", [a suitable file/device to read random data from])\nfi\n\nAM_MAINTAINER_MODE\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n\n\ndnl CARES_DEFINE_UNQUOTED (VARIABLE, [VALUE])\ndnl -------------------------------------------------\ndnl Like AC_DEFINE_UNQUOTED this macro will define a C preprocessor\ndnl symbol that can be further used in custom template configuration\ndnl files. This macro, unlike AC_DEFINE_UNQUOTED, does not use a third\ndnl argument for the description. Symbol definitions done with this\ndnl macro are intended to be exclusively used in handcrafted *.h.in\ndnl template files. Contrary to what AC_DEFINE_UNQUOTED does, this one\ndnl prevents autoheader generation and insertion of symbol template\ndnl stub and definition into the first configuration header file. Do\ndnl not use this macro as a replacement for AC_DEFINE_UNQUOTED, each\ndnl one serves different functional needs.\n\nAC_DEFUN([CARES_DEFINE_UNQUOTED], [\ncat >>confdefs.h <<_EOF\n[@%:@define] $1 ifelse($#, 2, [$2], 1)\n_EOF\n])\n\nAX_CODE_COVERAGE\nAC_SYS_LARGEFILE\n\ncase $host_os in\n  solaris*)\n    AC_DEFINE(ETC_INET, 1, [if a /etc/inet dir is being used])\n    ;;\nesac\n\ndnl solaris needed flag\ncase $host_os in\n  solaris2*)\n    if test \"x$GCC\" = 'xyes'; then\n      AX_APPEND_LINK_FLAGS([-mimpure-text])\n    fi\n    ;;\n  *)\n    ;;\nesac\n\ndnl -no-undefined libtool (not linker) flag for windows\ncares_use_no_undefined=no\ncase $host_os in\n  cygwin* | mingw* | pw32* | cegcc* | os2* | aix*)\n    cares_use_no_undefined=yes\n    ;;\n  *)\n    ;;\nesac\nAM_CONDITIONAL([CARES_USE_NO_UNDEFINED], [test \"$cares_use_no_undefined\" = 'yes'])\n\n\nif test \"$ac_cv_native_windows\" = \"yes\" ; then\n  AM_CPPFLAGS=\"$AM_CPPFLAGS -D_WIN32_WINNT=0x0602 -DWIN32_LEAN_AND_MEAN\"\nfi\n\ndnl Windows can only build shared or static, not both at the same time\nif test \"$ac_cv_native_windows\" = \"yes\" -a \"x$enable_shared\" = \"xyes\" -a \"x$enable_static\" = \"xyes\" ; then\n  AC_MSG_ERROR([Windows cannot build both static and shared simultaneously, specify --disable-shared or --disable-static])\nfi\n\ndnl Only windows requires CARES_STATICLIB definition\nif test \"x$enable_shared\" = \"xno\" -a \"x$enable_static\" = \"xyes\" ; then\n  AC_MSG_CHECKING([whether we need CARES_STATICLIB definition])\n  if test \"$ac_cv_native_windows\" = \"yes\" ; then\n    AX_APPEND_FLAG([-DCARES_STATICLIB], [AM_CPPFLAGS])\n    PKGCONFIG_CFLAGS=\"-DCARES_STATICLIB\"\n    AC_MSG_RESULT([yes])\n  else\n    AC_MSG_RESULT([no])\n  fi\nfi\n\ndnl Test for symbol hiding\nCARES_SYMBOL_HIDING_CFLAG=\"\"\nif test \"$symbol_hiding\" != \"no\" ; then\n  compiler_supports_symbol_hiding=\"no\"\n  if test \"$ac_cv_windows\" = \"yes\" ; then\n    compiler_supports_symbol_hiding=\"yes\"\n  else\n    case \"$ax_cv_c_compiler_vendor\" in\n      clang|gnu|intel)\n        AX_APPEND_COMPILE_FLAGS([-fvisibility=hidden], [CARES_SYMBOL_HIDING_CFLAG])\n        if test \"x$CARES_SYMBOL_HIDING_CFLAG\" != \"x\" ; then\n          compiler_supports_symbol_hiding=\"yes\"\n        fi\n        ;;\n      sun)\n        AX_APPEND_COMPILE_FLAGS([-xldscope=hidden], [CARES_SYMBOL_HIDING_CFLAG])\n        if test \"x$CARES_SYMBOL_HIDING_CFLAG\" != \"x\" ; then\n          compiler_supports_symbol_hiding=\"yes\"\n        fi\n        ;;\n    esac\n  fi\n  if test \"$compiler_supports_symbol_hiding\" = \"no\" ; then\n    if test \"$symbol_hiding\" = \"yes\" ; then\n      AC_MSG_ERROR([Compiler does not support symbol hiding])\n    else\n      symbol_hiding=\"no\"\n    fi\n  else\n    AC_DEFINE([CARES_SYMBOL_HIDING], [ 1 ], [Set to 1 if non-pubilc shared library symbols are hidden])\n    symbol_hiding=\"yes\"\n  fi\nfi\nAM_CONDITIONAL(CARES_SYMBOL_HIDING, test \"x$symbol_hiding\" = \"xyes\")\nAC_SUBST(CARES_SYMBOL_HIDING_CFLAG)\n\n\nif test \"$enable_warnings\" = \"yes\"; then\n  AX_APPEND_COMPILE_FLAGS([-Wall -Wextra -Waggregate-return -Wcast-align -Wcast-qual -Wconversion -Wdeclaration-after-statement -Wdouble-promotion -Wfloat-equal -Wformat-security -Winit-self -Wjump-misses-init -Wlogical-op -Wmissing-braces -Wmissing-declarations -Wmissing-format-attribute -Wmissing-include-dirs -Wmissing-prototypes -Wnested-externs -Wno-coverage-mismatch -Wold-style-definition -Wpacked -Wpedantic -Wpointer-arith -Wredundant-decls -Wshadow -Wsign-conversion -Wstrict-overflow -Wstrict-prototypes -Wtrampolines -Wundef -Wunreachable-code -Wunused -Wvariadic-macros -Wvla -Wwrite-strings -Werror=implicit-int -Werror=implicit-function-declaration -Werror=partial-availability -Wno-long-long ],\n    [AM_CFLAGS], [-Werror])\nfi\n\ndnl Android and QNX require c99, all others should use c90\ncase $host_os in\n  *qnx*|*android*)\n    AX_APPEND_COMPILE_FLAGS([-std=c99], [AM_CFLAGS], [-Werror])\n    ;;\n  *)\n    AX_APPEND_COMPILE_FLAGS([-std=c90], [AM_CFLAGS], [-Werror])\n    ;;\nesac\n\ndnl QNX needs -D_QNX_SOURCE\ncase $host_os in\n  *qnx*)\n    AX_APPEND_COMPILE_FLAGS([-D_QNX_SOURCE], [AM_CPPFLAGS], [-Werror])\n  ;;\nesac\n\nif test \"$ax_cv_c_compiler_vendor\" = \"intel\"; then\n  AX_APPEND_COMPILE_FLAGS([-shared-intel], [AM_CFLAGS])\nfi\n\nif test \"$ac_cv_native_windows\" = \"yes\" ; then\n  dnl we use [ - ] in the 4th argument to tell AC_CHECK_HEADERS to simply\n  dnl check for existence of the headers, not usability.  This is because\n  dnl on windows, header order matters, and you need to include headers *after*\n  dnl other headers, AC_CHECK_HEADERS only allows you to specify headers that\n  dnl must be included *before* the header being checked.\n\n  AC_CHECK_HEADERS([windows.h winsock2.h ws2tcpip.h iphlpapi.h netioapi.h ws2ipdef.h winternl.h ntdef.h ntstatus.h mswsock.h ],\n    [], [], [-])\n\n  dnl Windows builds require linking to iphlpapi\n  if test \"$ac_cv_header_winsock2_h\" = \"yes\"; then\n    LIBS=\"$LIBS -lws2_32 -liphlpapi\"\n  fi\nfi\n\ndnl **********************************************************************\ndnl Checks for libraries.\ndnl **********************************************************************\n\ndnl see if libnsl or libsocket are required\nAC_SEARCH_LIBS([getservbyport], [nsl socket resolv])\n\nAC_MSG_CHECKING([if libxnet is required])\nneed_xnet=no\ncase $host_os in\n  hpux*)\n    XNET_LIBS=\"\"\n    AX_APPEND_LINK_FLAGS([-lxnet], [XNET_LIBS])\n    if test \"x$XNET_LIBS\" != \"x\" ; then\n      LIBS=\"$LIBS $XNET_LIBS\"\n      need_xnet=yes\n    fi\n    ;;\nesac\nAC_MSG_RESULT($need_xnet)\n\ndnl resolv lib for z/OS\nAS_IF([test \"x$host_vendor\" = \"xibm\" -a \"x$host_os\" = \"xopenedition\" ], [\n  AC_SEARCH_LIBS([res_init], [resolv], [\n    AC_DEFINE([CARES_USE_LIBRESOLV], [1], [Use resolver library to configure cares])\n  ], [\n    AC_MSG_ERROR([Unable to find libresolv which is required for z/OS])\n  ])\n])\n\n\ndnl iOS 10?\nAS_IF([test \"x$host_vendor\" = \"xapple\"], [\n  AC_MSG_CHECKING([for iOS minimum version 10 or later])\n  AC_COMPILE_IFELSE([\n    AC_LANG_PROGRAM([[\n#include <stdio.h>\n#include <AvailabilityMacros.h>\n#include <TargetConditionals.h>\n    ]], [[\n#if TARGET_OS_IPHONE == 0 || __IPHONE_OS_VERSION_MIN_REQUIRED < 100000\n#error Not iOS 10 or later\n#endif\nreturn 0;\n   ]])\n  ],[\n    AC_MSG_RESULT([yes])\n    ac_cv_ios_10=\"yes\"\n  ],[\n    AC_MSG_RESULT([no])\n  ])\n])\n\ndnl macOS 10.12?\nAS_IF([test \"x$host_vendor\" = \"xapple\"], [\n  AC_MSG_CHECKING([for macOS minimum version 10.12 or later])\n  AC_COMPILE_IFELSE([\n    AC_LANG_PROGRAM([[\n#include <stdio.h>\n#include <AvailabilityMacros.h>\n#include <TargetConditionals.h>\n    ]], [[\n#ifndef MAC_OS_X_VERSION_10_12\n#  define MAC_OS_X_VERSION_10_12 101200\n#endif\n#if MAC_OS_X_VERSION_MIN_REQUIRED < MAC_OS_X_VERSION_10_12\n#error Not macOS 10.12 or later\n#endif\nreturn 0;\n   ]])\n  ],[\n    AC_MSG_RESULT([yes])\n    ac_cv_macos_10_12=\"yes\"\n  ],[\n    AC_MSG_RESULT([no])\n  ])\n])\n\nAC_MSG_CHECKING([whether to use libgcc])\nAC_ARG_ENABLE(libgcc,\nAS_HELP_STRING([--enable-libgcc],[use libgcc when linking]),\n[ case \"$enableval\" in\n  yes)\n    LIBS=\"$LIBS -lgcc\"\n    AC_MSG_RESULT(yes)\n    ;;\n  *)\n    AC_MSG_RESULT(no)\n    ;;\n  esac ],\n       AC_MSG_RESULT(no)\n)\n\ndnl check for a few basic system headers we need.  It would be nice if we could\ndnl split these on separate lines, but for some reason autotools on Windows doesn't\ndnl allow this, even tried ending lines with a backslash.\nAC_CHECK_HEADERS([malloc.h memory.h AvailabilityMacros.h sys/types.h sys/time.h sys/select.h sys/socket.h sys/filio.h sys/ioctl.h sys/param.h sys/uio.h sys/random.h sys/event.h sys/epoll.h assert.h iphlpapi.h netioapi.h netdb.h netinet/in.h netinet6/in6.h netinet/tcp.h net/if.h ifaddrs.h fcntl.h errno.h socket.h strings.h stdbool.h time.h poll.h limits.h arpa/nameser.h arpa/nameser_compat.h arpa/inet.h sys/system_properties.h ],\ndnl to do if not found\n[],\ndnl to do if found\n[],\ndnl default includes\n[\n#ifdef HAVE_SYS_TYPES_H\n#include <sys/types.h>\n#endif\n#ifdef HAVE_SYS_TIME_H\n#include <sys/time.h>\n#endif\ndnl We do this default-include simply to make sure that the nameser_compat.h\ndnl header *REALLY* can be include after the new nameser.h. It seems AIX 5.1\ndnl (and others?) is not designed to allow this.\n#ifdef HAVE_ARPA_NAMESER_H\n#include <arpa/nameser.h>\n#endif\n\ndnl *Sigh* these are needed in order for net/if.h to get properly detected.\n#ifdef HAVE_SYS_SOCKET_H\n#include <sys/socket.h>\n#endif\n#ifdef HAVE_NETINET_IN_H\n#include <netinet/in.h>\n#endif\n]\n)\n\n\ncares_all_includes=\"\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef HAVE_AVAILABILITYMACROS_H\n#  include <AvailabilityMacros.h>\n#endif\n#ifdef HAVE_SYS_UIO_H\n#  include <sys/uio.h>\n#endif\n#ifdef HAVE_NETINET_IN_H\n#  include <netinet/in.h>\n#endif\n#ifdef HAVE_TCP_H\n#  include <tcp.h>\n#endif\n#ifdef HAVE_SYS_FILIO_H\n#  include <sys/filio.h>\n#endif\n#ifdef HAVE_SYS_IOCTL_H\n#  include <sys/ioctl.h>\n#endif\n#ifdef HAVE_UNISTD_H\n#  include <unistd.h>\n#endif\n#ifdef HAVE_STRING_H\n#  include <string.h>\n#endif\n#ifdef HAVE_STRINGS_H\n#  include <strings.h>\n#endif\n#ifdef HAVE_TIME_H\n#  include <time.h>\n#endif\n#ifdef HAVE_SYS_TIME_H\n#  include <sys/time.h>\n#endif\n#ifdef HAVE_SYS_TYPES_H\n#  include <sys/types.h>\n#endif\n#ifdef HAVE_SYS_STAT_H\n#  include <sys/stat.h>\n#endif\n#ifdef HAVE_SYS_RANDOM_H\n#  include <sys/random.h>\n#endif\n#ifdef HAVE_SYS_EVENT_H\n#  include <sys/event.h>\n#endif\n#ifdef HAVE_SYS_EPOLL_H\n#  include <sys/epoll.h>\n#endif\n#ifdef HAVE_SYS_SOCKET_H\n#  include <sys/socket.h>\n#endif\n#ifdef HAVE_SYS_PARAM_H\n#  include <sys/param.h>\n#endif\n#ifdef HAVE_FCNTL_H\n#  include <fcntl.h>\n#endif\n#ifdef HAVE_POLL_H\n#  include <poll.h>\n#endif\n#ifdef HAVE_NET_IF_H\n#  include <net/if.h>\n#endif\n#ifdef HAVE_IFADDRS_H\n#  include <ifaddrs.h>\n#endif\n#ifdef HAVE_NETINET_IN_H\n#  include <netinet/in.h>\n#endif\n#ifdef HAVE_NETINET_TCP_H\n#  include <netinet/tcp.h>\n#endif\n#ifdef HAVE_NETDB_H\n#  include <netdb.h>\n#endif\n#ifdef HAVE_ARPA_INET_H\n#  include <arpa/inet.h>\n#endif\n#ifdef HAVE_RESOLV_H\n#  include <resolv.h>\n#endif\n#ifdef HAVE_SYS_SYSTEM_PROPERTIES_H\n#  include <sys/system_properties.h>\n#endif\n#ifdef HAVE_IPHLPAPI_H\n#  include <iphlpapi.h>\n#endif\n#ifdef HAVE_NETIOAPI_H\n#  include <netioapi.h>\n#endif\n#ifdef HAVE_WINSOCK2_H\n#  include <winsock2.h>\n#endif\n#ifdef HAVE_WS2IPDEF_H\n#  include <ws2ipdef.h>\n#endif\n#ifdef HAVE_WS2TCPIP_H\n#  include <ws2tcpip.h>\n#endif\n#ifdef HAVE_WINDOWS_H\n#  include <windows.h>\n#endif\n\"\n\nAC_CHECK_DECL([HAVE_ARPA_NAMESER_H],[CARES_DEFINE_UNQUOTED([CARES_HAVE_ARPA_NAMESER_H])], [])\nAC_CHECK_DECL([HAVE_ARPA_NAMESER_COMPAT_H],[CARES_DEFINE_UNQUOTED([CARES_HAVE_ARPA_NAMESER_COMPAT_H])],[])\nAC_CHECK_TYPE(long long, [AC_DEFINE(HAVE_LONGLONG, 1, [Define to 1 if the compiler supports the 'long long' data type.])])\nAC_CHECK_TYPE(ssize_t, [ CARES_TYPEOF_ARES_SSIZE_T=ssize_t ], [ CARES_TYPEOF_ARES_SSIZE_T=int ])\nAC_DEFINE_UNQUOTED([CARES_TYPEOF_ARES_SSIZE_T], ${CARES_TYPEOF_ARES_SSIZE_T}, [the signed version of size_t])\n\nAC_CHECK_TYPE(socklen_t,\n  [\n    AC_DEFINE(HAVE_SOCKLEN_T, [], [socklen_t])\n    CARES_DEFINE_UNQUOTED([CARES_TYPEOF_ARES_SOCKLEN_T], [socklen_t])\n  ],\n  [ CARES_DEFINE_UNQUOTED([CARES_TYPEOF_ARES_SOCKLEN_T], [int]) ],\n  $cares_all_includes\n )\n\nAC_CHECK_TYPE(SOCKET, [], [], $cares_all_includes)\n\ndnl ###############################################################################\n\ndnl clock_gettime might require an external library\nAC_SEARCH_LIBS([clock_gettime], [rt posix4])\n\ndnl Use AC_CHECK_DECL not AC_CHECK_FUNCS, while this doesn't do a linkage test,\ndnl it just makes sure the headers define it, this is the only thing without\ndnl a complex workaround on Windows that will do what we need. See:\ndnl https://github.com/msys2/msys2/wiki/Porting/f87a222118b1008ebc166ad237f04edb759c8f4c#calling-conventions-stdcall-and-autotools\ndnl https://lists.gnu.org/archive/html/autoconf/2013-05/msg00085.html\ndnl and for a more complex workaround, we'd need to use AC_LINK_IFELSE like:\ndnl https://mailman.videolan.org/pipermail/vlc-devel/2015-March/101802.html\ndnl which would require we check each individually and provide function arguments\ndnl for the test.\n\nAC_CHECK_DECL(strnlen,         [AC_DEFINE([HAVE_STRNLEN],           1, [Define to 1 if you have `strnlen`]        )], [], $cares_all_includes)\nAC_CHECK_DECL(memmem,          [AC_DEFINE([HAVE_MEMMEM],            1, [Define to 1 if you have `memmem`]         )], [], $cares_all_includes)\nAC_CHECK_DECL(recv,            [AC_DEFINE([HAVE_RECV],              1, [Define to 1 if you have `recv`]           )], [], $cares_all_includes)\nAC_CHECK_DECL(recvfrom,        [AC_DEFINE([HAVE_RECVFROM],          1, [Define to 1 if you have `recvfrom`]       )], [], $cares_all_includes)\nAC_CHECK_DECL(send,            [AC_DEFINE([HAVE_SEND],              1, [Define to 1 if you have `send`]           )], [], $cares_all_includes)\nAC_CHECK_DECL(sendto,          [AC_DEFINE([HAVE_SENDTO],            1, [Define to 1 if you have `sendto`]         )], [], $cares_all_includes)\nAC_CHECK_DECL(getnameinfo,     [AC_DEFINE([HAVE_GETNAMEINFO],       1, [Define to 1 if you have `getnameinfo`]    )], [], $cares_all_includes)\nAC_CHECK_DECL(gethostname,     [AC_DEFINE([HAVE_GETHOSTNAME],       1, [Define to 1 if you have `gethostname`]    )], [], $cares_all_includes)\nAC_CHECK_DECL(connect,         [AC_DEFINE([HAVE_CONNECT],           1, [Define to 1 if you have `connect`]        )], [], $cares_all_includes)\nAC_CHECK_DECL(connectx,        [AC_DEFINE([HAVE_CONNECTX],          1, [Define to 1 if you have `connectx`]       )], [], $cares_all_includes)\nAC_CHECK_DECL(closesocket,     [AC_DEFINE([HAVE_CLOSESOCKET],       1, [Define to 1 if you have `closesocket`]    )], [], $cares_all_includes)\nAC_CHECK_DECL(CloseSocket,     [AC_DEFINE([HAVE_CLOSESOCKET_CAMEL], 1, [Define to 1 if you have `CloseSocket`]    )], [], $cares_all_includes)\nAC_CHECK_DECL(fcntl,           [AC_DEFINE([HAVE_FCNTL],             1, [Define to 1 if you have `fcntl`]          )], [], $cares_all_includes)\nAC_CHECK_DECL(getenv,          [AC_DEFINE([HAVE_GETENV],            1, [Define to 1 if you have `getenv`]         )], [], $cares_all_includes)\nAC_CHECK_DECL(gethostname,     [AC_DEFINE([HAVE_GETHOSTNAME],       1, [Define to 1 if you have `gethostname`]    )], [], $cares_all_includes)\nAC_CHECK_DECL(getrandom,       [AC_DEFINE([HAVE_GETRANDOM],         1, [Define to 1 if you have `getrandom`]      )], [], $cares_all_includes)\nAC_CHECK_DECL(getservbyport_r, [AC_DEFINE([HAVE_GETSERVBYPORT_R],   1, [Define to 1 if you have `getservbyport_r`])], [], $cares_all_includes)\nAC_CHECK_DECL(inet_net_pton,   [AC_DEFINE([HAVE_INET_NET_PTON],     1, [Define to 1 if you have `inet_net_pton`]  )], [], $cares_all_includes)\nAC_CHECK_DECL(inet_ntop,       [AC_DEFINE([HAVE_INET_NTOP],         1, [Define to 1 if you have `inet_ntop`]      )], [], $cares_all_includes)\nAC_CHECK_DECL(inet_pton,       [AC_DEFINE([HAVE_INET_PTON],         1, [Define to 1 if you have `inet_pton`]      )], [], $cares_all_includes)\nAC_CHECK_DECL(ioctl,           [AC_DEFINE([HAVE_IOCTL],             1, [Define to 1 if you have `ioctl`]          )], [], $cares_all_includes)\nAC_CHECK_DECL(ioctlsocket,     [AC_DEFINE([HAVE_IOCTLSOCKET],       1, [Define to 1 if you have `ioctlsocket`]    )], [], $cares_all_includes)\nAC_CHECK_DECL(IoctlSocket,     [AC_DEFINE([HAVE_IOCTLSOCKET_CAMEL], 1, [Define to 1 if you have `IoctlSocket`]    )], [], $cares_all_includes)\nAC_CHECK_DECL(setsockopt,      [AC_DEFINE([HAVE_SETSOCKOPT],        1, [Define to 1 if you have `setsockopt`]     )], [], $cares_all_includes)\nAC_CHECK_DECL(socket,          [AC_DEFINE([HAVE_SOCKET],            1, [Define to 1 if you have `socket`]         )], [], $cares_all_includes)\nAC_CHECK_DECL(strcasecmp,      [AC_DEFINE([HAVE_STRCASECMP],        1, [Define to 1 if you have `strcasecmp`]     )], [], $cares_all_includes)\nAC_CHECK_DECL(strdup,          [AC_DEFINE([HAVE_STRDUP],            1, [Define to 1 if you have `strdup`]         )], [], $cares_all_includes)\nAC_CHECK_DECL(stricmp,         [AC_DEFINE([HAVE_STRICMP],           1, [Define to 1 if you have `stricmp`]        )], [], $cares_all_includes)\nAC_CHECK_DECL(strncasecmp,     [AC_DEFINE([HAVE_STRNCASECMP],       1, [Define to 1 if you have `strncasecmp`]    )], [], $cares_all_includes)\nAC_CHECK_DECL(strncmpi,        [AC_DEFINE([HAVE_STRNCMPI],          1, [Define to 1 if you have `strncmpi`]       )], [], $cares_all_includes)\nAC_CHECK_DECL(strnicmp,        [AC_DEFINE([HAVE_STRNICMP],          1, [Define to 1 if you have `strnicmp`]       )], [], $cares_all_includes)\nAC_CHECK_DECL(writev,          [AC_DEFINE([HAVE_WRITEV],            1, [Define to 1 if you have `writev`]         )], [], $cares_all_includes)\nAC_CHECK_DECL(arc4random_buf,  [AC_DEFINE([HAVE_ARC4RANDOM_BUF],    1, [Define to 1 if you have `arc4random_buf`] )], [], $cares_all_includes)\nAC_CHECK_DECL(stat,            [AC_DEFINE([HAVE_STAT],              1, [Define to 1 if you have `stat`]           )], [], $cares_all_includes)\nAC_CHECK_DECL(gettimeofday,    [AC_DEFINE([HAVE_GETTIMEOFDAY],      1, [Define to 1 if you have `gettimeofday`]   )], [], $cares_all_includes)\nAC_CHECK_DECL(clock_gettime,   [AC_DEFINE([HAVE_CLOCK_GETTIME],     1, [Define to 1 if you have `clock_gettime`]  )], [], $cares_all_includes)\nAC_CHECK_DECL(if_indextoname,  [AC_DEFINE([HAVE_IF_INDEXTONAME],    1, [Define to 1 if you have `if_indextoname`] )], [], $cares_all_includes)\nAC_CHECK_DECL(if_nametoindex,  [AC_DEFINE([HAVE_IF_NAMETOINDEX],    1, [Define to 1 if you have `if_nametoindex`] )], [], $cares_all_includes)\nAC_CHECK_DECL(getifaddrs,      [AC_DEFINE([HAVE_GETIFADDRS],        1, [Define to 1 if you have `getifaddrs`]     )], [], $cares_all_includes)\nAC_CHECK_DECL(poll,            [AC_DEFINE([HAVE_POLL],              1, [Define to 1 if you have `poll`]           )], [], $cares_all_includes)\nAC_CHECK_DECL(pipe,            [AC_DEFINE([HAVE_PIPE],              1, [Define to 1 if you have `pipe`]           )], [], $cares_all_includes)\nAC_CHECK_DECL(pipe2,           [AC_DEFINE([HAVE_PIPE2],             1, [Define to 1 if you have `pipe2`]          )], [], $cares_all_includes)\nAC_CHECK_DECL(kqueue,          [AC_DEFINE([HAVE_KQUEUE],            1, [Define to 1 if you have `kqueue`]         )], [], $cares_all_includes)\nAC_CHECK_DECL(epoll_create1,   [AC_DEFINE([HAVE_EPOLL],             1, [Define to 1 if you have `epoll_{create1,ctl,wait}`])], [], $cares_all_includes)\nAC_CHECK_DECL(GetBestRoute2,   [AC_DEFINE([HAVE_GETBESTROUTE2],     1, [Define to 1 if you have `GetBestRoute2`]  )], [], $cares_all_includes)\nAC_CHECK_DECL(ConvertInterfaceIndexToLuid, [AC_DEFINE([HAVE_CONVERTINTERFACEINDEXTOLUID], 1, [Define to 1 if you have `ConvertInterfaceIndexToLuid`])], [], $cares_all_includes)\nAC_CHECK_DECL(ConvertInterfaceLuidToNameA, [AC_DEFINE([HAVE_CONVERTINTERFACELUIDTONAMEA], 1, [Define to 1 if you have `ConvertInterfaceLuidToNameA`])], [], $cares_all_includes)\nAC_CHECK_DECL(NotifyIpInterfaceChange,     [AC_DEFINE([HAVE_NOTIFYIPINTERFACECHANGE],     1, [Define to 1 if you have `NotifyIpInterfaceChange`]    )], [], $cares_all_includes)\nAC_CHECK_DECL(RegisterWaitForSingleObject, [AC_DEFINE([HAVE_REGISTERWAITFORSINGLEOBJECT], 1, [Define to 1 if you have `RegisterWaitForSingleObject`])], [], $cares_all_includes)\nAC_CHECK_DECL(__system_property_get,       [AC_DEFINE([HAVE___SYSTEM_PROPERTY_GET],       1, [Define to 1 if you have `__system_property_get`]      )], [], $cares_all_includes)\n\n\ndnl ###############################################################################\ndnl recv, recvfrom, send, getnameinfo, gethostname\ndnl ARGUMENTS AND RETURN VALUES\n\nif test \"x$ac_cv_type_ssize_t\" = \"xyes\" -a \"x$ac_cv_type_socklen_t\" = \"xyes\" -a \"x$ac_cv_native_windows\" != \"xyes\" ; then\n  recvfrom_type_retv=\"ssize_t\"\n  recvfrom_type_arg3=\"size_t\"\nelse\n  recvfrom_type_retv=\"int\"\n  recvfrom_type_arg3=\"int\"\nfi\n\nif test \"x$ac_cv_type_SOCKET\" = \"xyes\" ; then\n  dnl If the SOCKET type is defined, it uses socket ... should be windows only\n  recvfrom_type_arg1=\"SOCKET\"\nelse\n  recvfrom_type_arg1=\"int\"\nfi\n\nif test \"x$ac_cv_type_socklen_t\" = \"xyes\" ; then\n  recvfrom_type_arg6=\"socklen_t *\"\n  getnameinfo_type_arg2=\"socklen_t\"\n  getnameinfo_type_arg46=\"socklen_t\"\nelse\n  recvfrom_type_arg6=\"int *\"\n  getnameinfo_type_arg2=\"int\"\n  getnameinfo_type_arg46=\"int\"\nfi\n\nif test \"x$ac_cv_native_windows\" = \"xyes\" ; then\n  recv_type_arg2=\"char *\"\nelse\n  recv_type_arg2=\"void *\"\nfi\n\ndnl Functions are typically consistent so the equivalent fields map ... equivalently\nrecv_type_retv=${recvfrom_type_retv}\nsend_type_retv=${recvfrom_type_retv}\nrecv_type_arg1=${recvfrom_type_arg1}\nrecvfrom_type_arg2=${recv_type_arg2}\nsend_type_arg1=${recvfrom_type_arg1}\nrecv_type_arg3=${recvfrom_type_arg3}\nsend_type_arg3=${recvfrom_type_arg3}\ngethostname_type_arg2=${recvfrom_type_arg3}\n\ndnl These should always be \"sane\" values to use always\nrecvfrom_qual_arg5=\nrecvfrom_type_arg4=int\nrecvfrom_type_arg5=\"struct sockaddr *\"\nrecv_type_arg4=int\ngetnameinfo_type_arg1=\"struct sockaddr *\"\ngetnameinfo_type_arg7=int\nsend_type_arg2=\"const void *\"\nsend_type_arg4=int\n\nAC_DEFINE_UNQUOTED([RECVFROM_TYPE_RETV],     [ ${recvfrom_type_retv} ],     [ recvfrom() return value ])\nAC_DEFINE_UNQUOTED([RECVFROM_TYPE_ARG1],     [ ${recvfrom_type_arg1} ],     [ recvfrom() arg1 type ])\nAC_DEFINE_UNQUOTED([RECVFROM_TYPE_ARG2],     [ ${recvfrom_type_arg2} ],     [ recvfrom() arg2 type ])\nAC_DEFINE_UNQUOTED([RECVFROM_TYPE_ARG3],     [ ${recvfrom_type_arg3} ],     [ recvfrom() arg3 type ])\nAC_DEFINE_UNQUOTED([RECVFROM_TYPE_ARG4],     [ ${recvfrom_type_arg4} ],     [ recvfrom() arg4 type ])\nAC_DEFINE_UNQUOTED([RECVFROM_TYPE_ARG5],     [ ${recvfrom_type_arg5} ],     [ recvfrom() arg5 type ])\nAC_DEFINE_UNQUOTED([RECVFROM_QUAL_ARG5],     [ ${recvfrom_qual_arg5}],      [ recvfrom() arg5 qualifier])\n\nAC_DEFINE_UNQUOTED([RECV_TYPE_RETV],         [ ${recv_type_retv} ],         [ recv() return value ])\nAC_DEFINE_UNQUOTED([RECV_TYPE_ARG1],         [ ${recv_type_arg1} ],         [ recv() arg1 type ])\nAC_DEFINE_UNQUOTED([RECV_TYPE_ARG2],         [ ${recv_type_arg2} ],         [ recv() arg2 type ])\nAC_DEFINE_UNQUOTED([RECV_TYPE_ARG3],         [ ${recv_type_arg3} ],         [ recv() arg3 type ])\nAC_DEFINE_UNQUOTED([RECV_TYPE_ARG4],         [ ${recv_type_arg4} ],         [ recv() arg4 type ])\n\nAC_DEFINE_UNQUOTED([SEND_TYPE_RETV],         [ ${send_type_retv} ],         [ send() return value ])\nAC_DEFINE_UNQUOTED([SEND_TYPE_ARG1],         [ ${send_type_arg1} ],         [ send() arg1 type ])\nAC_DEFINE_UNQUOTED([SEND_TYPE_ARG2],         [ ${send_type_arg2} ],         [ send() arg2 type ])\nAC_DEFINE_UNQUOTED([SEND_TYPE_ARG3],         [ ${send_type_arg3} ],         [ send() arg3 type ])\nAC_DEFINE_UNQUOTED([SEND_TYPE_ARG4],         [ ${send_type_arg4} ],         [ send() arg4 type ])\n\nAC_DEFINE_UNQUOTED([GETNAMEINFO_TYPE_ARG1],  [ ${getnameinfo_type_arg1} ],  [ getnameinfo() arg1 type ])\nAC_DEFINE_UNQUOTED([GETNAMEINFO_TYPE_ARG2],  [ ${getnameinfo_type_arg2} ],  [ getnameinfo() arg2 type ])\nAC_DEFINE_UNQUOTED([GETNAMEINFO_TYPE_ARG7],  [ ${getnameinfo_type_arg7} ],  [ getnameinfo() arg7 type ])\nAC_DEFINE_UNQUOTED([GETNAMEINFO_TYPE_ARG46], [ ${getnameinfo_type_arg46} ], [ getnameinfo() arg4 and 6 type ])\n\nAC_DEFINE_UNQUOTED([GETHOSTNAME_TYPE_ARG2],  [ ${gethostname_type_arg2} ],  [ gethostname() arg2 type ])\ndnl ###############################################################################\n\n\nif test \"$ac_cv_have_decl_getservbyport_r\" = \"yes\" ; then\n  AC_MSG_CHECKING([number of arguments for getservbyport_r()])\n  getservbyport_r_args=6\n  case $host_os in\n    solaris*)\n      getservbyport_r_args=5\n    ;;\n    aix*|openbsd*)\n      getservbyport_r_args=4\n    ;;\n  esac\n  AC_MSG_RESULT([$getservbyport_r_args])\n  AC_DEFINE_UNQUOTED([GETSERVBYPORT_R_ARGS], [ $getservbyport_r_args ], [ number of arguments for getservbyport_r() ])\nfi\n\nif test \"$ac_cv_have_decl_getservbyname_r\" = \"yes\" ; then\n  AC_MSG_CHECKING([number of arguments for getservbyname_r()])\n  getservbyname_r_args=6\n  case $host_os in\n    solaris*)\n      getservbyname_r_args=5\n    ;;\n    aix*|openbsd*)\n      getservbyname_r_args=4\n    ;;\n  esac\n  AC_DEFINE_UNQUOTED([GETSERVBYNAME_R_ARGS], [ $getservbyname_r_args ], [ number of arguments for getservbyname_r() ])\n  AC_MSG_RESULT([$getservbyname_r_args])\nfi\n\nAC_TYPE_SIZE_T\nAC_CHECK_DECL(AF_INET6, [AC_DEFINE([HAVE_AF_INET6],1,[Define to 1 if you have AF_INET6])], [], $cares_all_includes)\nAC_CHECK_DECL(PF_INET6, [AC_DEFINE([HAVE_PF_INET6],1,[Define to 1 if you have PF_INET6])], [], $cares_all_includes)\nAC_CHECK_TYPES(struct in6_addr, [], [], $cares_all_includes)\nAC_CHECK_TYPES(struct sockaddr_in6, [], [], $cares_all_includes)\nAC_CHECK_TYPES(struct sockaddr_storage, [], [], $cares_all_includes)\nAC_CHECK_TYPES(struct addrinfo, [], [], $cares_all_includes)\nAC_CHECK_TYPES(struct timeval, [], [], $cares_all_includes)\nAC_CHECK_MEMBERS(struct sockaddr_in6.sin6_scope_id, [], [], $cares_all_includes)\nAC_CHECK_MEMBERS(struct addrinfo.ai_flags, [], [], $cares_all_includes)\nAC_CHECK_DECL(FIONBIO, [], [], $cares_all_includes)\nAC_CHECK_DECL(O_NONBLOCK, [], [], $cares_all_includes)\nAC_CHECK_DECL(SO_NONBLOCK, [], [], $cares_all_includes)\nAC_CHECK_DECL(MSG_NOSIGNAL, [], [], $cares_all_includes)\nAC_CHECK_DECL(CLOCK_MONOTONIC, [], [], $cares_all_includes)\n\nif test \"$ac_cv_have_decl_CLOCK_MONOTONIC\" = \"yes\" -a \"$ac_cv_have_decl_clock_gettime\" = \"yes\" ; then\n  AC_DEFINE([HAVE_CLOCK_GETTIME_MONOTONIC], [ 1 ], [ clock_gettime() with CLOCK_MONOTONIC support ])\nfi\n\nif test \"$ac_cv_have_decl_FIONBIO\" = \"yes\" -a \"$ac_cv_have_decl_ioctl\" = \"yes\" ; then\n  AC_DEFINE([HAVE_IOCTL_FIONBIO], [ 1 ], [ ioctl() with FIONBIO support ])\nfi\nif test \"$ac_cv_have_decl_FIONBIO\" = \"yes\" -a \"$ac_cv_have_decl_ioctlsocket\" = \"yes\" ; then\n  AC_DEFINE([HAVE_IOCTLSOCKET_FIONBIO], [ 1 ], [ ioctlsocket() with FIONBIO support ])\nfi\nif test \"$ac_cv_have_decl_SO_NONBLOCK\" = \"yes\" -a \"$ac_cv_have_decl_setsockopt\" = \"yes\" ; then\n  AC_DEFINE([HAVE_SETSOCKOPT_SO_NONBLOCK], [ 1 ], [ setsockopt() with SO_NONBLOCK support ])\nfi\nif test \"$ac_cv_have_decl_O_NONBLOCK\" = \"yes\" -a \"$ac_cv_have_decl_fcntl\" = \"yes\" ; then\n  AC_DEFINE([HAVE_FCNTL_O_NONBLOCK], [ 1 ], [ fcntl() with O_NONBLOCK support ])\nfi\n\ndnl ares_build.h.in specific defines\nif test \"x$ac_cv_header_sys_types_h\" = \"xyes\" ; then\n  CARES_DEFINE_UNQUOTED([CARES_HAVE_SYS_TYPES_H],[1])\nfi\nif test \"x$ac_cv_header_sys_socket_h\" = \"xyes\" ; then\n  CARES_DEFINE_UNQUOTED([CARES_HAVE_SYS_SOCKET_H],[1])\nfi\nif test \"x$ac_cv_header_sys_select_h\" = \"xyes\" ; then\n  CARES_DEFINE_UNQUOTED([CARES_HAVE_SYS_SELECT_H],[1])\nfi\nif test \"x$ac_cv_header_ws2tcpip_h\" = \"xyes\" ; then\n  CARES_DEFINE_UNQUOTED([CARES_HAVE_WS2TCPIP_H],[1])\nfi\nif test \"x$ac_cv_header_winsock2_h\" = \"xyes\" ; then\n  CARES_DEFINE_UNQUOTED([CARES_HAVE_WINSOCK2_H],[1])\nfi\nif test \"x$ac_cv_header_windows_h\" = \"xyes\" ; then\n  CARES_DEFINE_UNQUOTED([CARES_HAVE_WINDOWS_H],[1])\nfi\nif test \"x$ac_cv_header_arpa_nameser_h\" = \"xyes\" ; then\n  CARES_DEFINE_UNQUOTED([CARES_HAVE_ARPA_NAMESER_H],[1])\nfi\nif test \"x$ac_cv_header_arpa_nameser_compa_h\" = \"xyes\" ; then\n  CARES_DEFINE_UNQUOTED([CARES_HAVE_ARPA_NAMESER_COMPA_H],[1])\nfi\n\n\ndnl ------------ THREADING --------------\n\ndnl windows always supports threads, only check non-windows systems.\nif test \"${CARES_THREADS}\" = \"yes\" -a \"x${ac_cv_native_windows}\" != \"xyes\" ; then\n  AX_PTHREAD([ ], [\n    AC_MSG_WARN([threads requested but not supported])\n    CARES_THREADS=no\n  ])\n\n  if test \"${CARES_THREADS}\" = \"yes\" ; then\n    AC_CHECK_HEADERS([pthread.h pthread_np.h])\n    LIBS=\"$PTHREAD_LIBS $LIBS\"\n    AM_CFLAGS=\"$AM_CFLAGS $PTHREAD_CFLAGS\"\n    CC=\"$PTHREAD_CC\"\n    CXX=\"$PTHREAD_CXX\"\n  fi\nfi\n\nif test \"${CARES_THREADS}\" = \"yes\" ; then\n  AC_DEFINE([CARES_THREADS], [ 1 ], [Threading enabled])\nfi\n\nCARES_PRIVATE_LIBS=\"$LIBS\"\nAC_SUBST(CARES_PRIVATE_LIBS)\n\nBUILD_SUBDIRS=\"include src docs\"\n\n\ndnl ******** TESTS *******\n\nif test \"x$build_tests\" != \"xno\" -a \"x$HAVE_CXX14\" = \"0\" ; then\n  if test \"x$build_tests\" = \"xmaybe\" ; then\n    AC_MSG_WARN([cannot build tests without a CXX14 compiler])\n    build_tests=no\n  else\n    AC_MSG_ERROR([*** Building tests requires a CXX14 compiler])\n  fi\nfi\nif test \"x$build_tests\" != \"xno\" -a \"x$cross_compiling\" = \"xyes\" ; then\n  if test \"x$build_tests\" = \"xmaybe\" ; then\n    AC_MSG_WARN([cannot build tests when cross compiling])\n    build_tests=no\n  else\n    AC_MSG_ERROR([*** Tests not supported when cross compiling])\n  fi\nfi\n\ndnl Forces compiling of tests even when cross-compiling.\nAC_ARG_ENABLE(tests-crossbuild,\n  AS_HELP_STRING([--enable-tests-crossbuild], [Enable test building even when cross building]),\n  [build_tests=\"$enableval\"]\n)\n\nif test \"x$build_tests\" != \"xno\" ; then\n  PKG_CHECK_MODULES([GMOCK], [gmock], [ have_gmock=yes ], [ have_gmock=no ])\n  if test \"x$have_gmock\" = \"xno\" ; then\n    if test \"x$build_tests\" = \"xmaybe\" ; then\n      AC_MSG_WARN([gmock could not be found, not building tests])\n      build_tests=no\n    else\n      AC_MSG_ERROR([tests require gmock])\n    fi\n  else\n    PKG_CHECK_MODULES([GMOCK112], [gmock >= 1.12.0], [ have_gmock_v112=yes ], [ have_gmock_v112=no ])\n    if test \"x$have_gmock_v112\" = \"xyes\" ; then\n      ARES_CHECK_USER_NAMESPACE\n      ARES_CHECK_UTS_NAMESPACE\n    fi\n  fi\nfi\nif test \"x$build_tests\" != \"xno\" ; then\n  build_tests=yes\n\n  AX_CXX_COMPILE_STDCXX_14([noext],[mandatory])\n  if test \"$ac_cv_native_windows\" != \"yes\" ; then\n    AX_PTHREAD([ CARES_TEST_PTHREADS=\"yes\" ], [ AC_MSG_ERROR([threading required for tests]) ])\n  fi\n\n  BUILD_SUBDIRS=\"${BUILD_SUBDIRS} test\"\nfi\nAC_MSG_CHECKING([whether to build tests])\nAC_MSG_RESULT([$build_tests])\n\nAM_CONDITIONAL(BUILD_TESTS, test \"x$build_tests\" = \"xyes\")\n\nAC_SUBST(AM_CFLAGS)\nAC_SUBST(AM_CPPFLAGS)\nAC_SUBST(PKGCONFIG_CFLAGS)\nAC_SUBST(BUILD_SUBDIRS)\n\nAC_CONFIG_FILES([Makefile\n                 include/Makefile\n                 src/Makefile\n                 src/lib/Makefile\n                 src/tools/Makefile\n                 docs/Makefile\n                 libcares.pc ])\nAM_COND_IF([BUILD_TESTS],\n           [AC_CONFIG_FILES([test/Makefile])])\n\nAC_OUTPUT\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "libcares.pc.cmake",
          "type": "blob",
          "size": 0.7568359375,
          "content": "#***************************************************************************\n# Project        ___       __ _ _ __ ___  ___ \n#               / __|____ / _` | '__/ _ \\/ __|\n#              | (_|_____| (_| | | |  __/\\__ \\\n#               \\___|     \\__,_|_|  \\___||___/\n#\n# Copyright (C) The c-ares project and its contributors\n# SPDX-License-Identifier: MIT\nprefix=@CMAKE_INSTALL_PREFIX@\nexec_prefix=${prefix}/@CMAKE_INSTALL_BINDIR@\nlibdir=${prefix}/@CMAKE_INSTALL_LIBDIR@\nincludedir=${prefix}/@CMAKE_INSTALL_INCLUDEDIR@\n\nName: c-ares\nURL: https://c-ares.org/\nDescription: asynchronous DNS lookup library\nVersion: @CARES_VERSION@\nRequires: \nRequires.private: \nCflags: -I${includedir}\nCflags.private: -DCARES_STATICLIB\nLibs: -L${libdir} -lcares\nLibs.private: @CARES_PRIVATE_LIBS@\n"
        },
        {
          "name": "libcares.pc.in",
          "type": "blob",
          "size": 0.65625,
          "content": "#***************************************************************************\n# Project        ___       __ _ _ __ ___  ___ \n#               / __|____ / _` | '__/ _ \\/ __|\n#              | (_|_____| (_| | | |  __/\\__ \\\n#               \\___|     \\__,_|_|  \\___||___/\n#\n# Copyright (C) The c-ares project and its contributors\n# SPDX-License-Identifier: MIT\nprefix=@prefix@\nexec_prefix=@exec_prefix@\nlibdir=@libdir@\nincludedir=@includedir@\n\nName: c-ares\nURL: http://c-ares.org/\nDescription: asynchronous DNS lookup library\nVersion: @VERSION@\nRequires: \nRequires.private: \nCflags: -I${includedir} @PKGCONFIG_CFLAGS@\nLibs: -L${libdir} -lcares\nLibs.private: @CARES_PRIVATE_LIBS@\n"
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "sonar-project.properties",
          "type": "blob",
          "size": 1.2001953125,
          "content": "# Copyright (C) The c-ares project and its contributors\n# SPDX-License-Identifier: MIT\nsonar.projectKey=c-ares_c-ares\nsonar.organization=c-ares\n\n# This is the name and version displayed in the SonarCloud UI.\nsonar.projectName=c-ares\nsonar.projectVersion=1.0\n\n# Path is relative to the sonar-project.properties file. Replace \"\\\" by \"/\" on Windows.\nsonar.sources=src/lib, src/tools\nsonar.tests=test/\nsonar.exclusions=test/\n\n# Encoding of the source code. Default is default system encoding\nsonar.sourceEncoding=UTF-8\n\n\nsonar.issue.ignore.multicriteria=m1,m2,m3\n# c:S5955 Loop variables should be declared in the minimal possible scope\n# Not possible in C89\nsonar.issue.ignore.multicriteria.m1.ruleKey=c:S5955\nsonar.issue.ignore.multicriteria.m1.resourceKey=**/*\n\n# c:S924 Reduce the number of nested \"goto\" statements from 2 to 1 authorized.\n# This is a common practice in error handling, don't understand this recommendation.\nsonar.issue.ignore.multicriteria.m2.ruleKey=c:S924\nsonar.issue.ignore.multicriteria.m2.resourceKey=**/*\n\n# php:S105 Tabulation characters should not be used\n# Required for MSVC Makefiles\nsonar.issue.ignore.multicriteria.m3.ruleKey=php:S105\nsonar.issue.ignore.multicriteria.m3.resourceKey=**/Makefile.inc\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}