{
  "metadata": {
    "timestamp": 1736709998259,
    "page": 579,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bitcoin-core/secp256k1",
      "stars": 2144,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".cirrus.yml",
          "type": "blob",
          "size": 2.5341796875,
          "content": "env:\n  ### cirrus config\n  CIRRUS_CLONE_DEPTH: 1\n  ### compiler options\n  HOST:\n  WRAPPER_CMD:\n  # Specific warnings can be disabled with -Wno-error=foo.\n  # -pedantic-errors is not equivalent to -Werror=pedantic and thus not implied by -Werror according to the GCC manual.\n  WERROR_CFLAGS: -Werror -pedantic-errors\n  MAKEFLAGS: -j4\n  BUILD: check\n  ### secp256k1 config\n  ECMULTWINDOW: 15\n  ECMULTGENKB: 22\n  ASM: no\n  WIDEMUL: auto\n  WITH_VALGRIND: yes\n  EXTRAFLAGS:\n  ### secp256k1 modules\n  EXPERIMENTAL: no\n  ECDH: no\n  RECOVERY: no\n  EXTRAKEYS: no\n  SCHNORRSIG: no\n  MUSIG: no\n  ELLSWIFT: no\n  ### test options\n  SECP256K1_TEST_ITERS: 64\n  BENCH: yes\n  SECP256K1_BENCH_ITERS: 2\n  CTIMETESTS: yes\n  # Compile and run the tests\n  EXAMPLES: yes\n\ncat_logs_snippet: &CAT_LOGS\n  always:\n    cat_tests_log_script:\n      - cat tests.log || true\n    cat_noverify_tests_log_script:\n      - cat noverify_tests.log || true\n    cat_exhaustive_tests_log_script:\n      - cat exhaustive_tests.log || true\n    cat_ctime_tests_log_script:\n      - cat ctime_tests.log || true\n    cat_bench_log_script:\n      - cat bench.log || true\n    cat_config_log_script:\n      - cat config.log || true\n    cat_test_env_script:\n      - cat test_env.log || true\n    cat_ci_env_script:\n      - env\n\nlinux_arm64_container_snippet: &LINUX_ARM64_CONTAINER\n  env_script:\n    - env | tee /tmp/env\n  build_script:\n    - DOCKER_BUILDKIT=1 docker build --file \"ci/linux-debian.Dockerfile\" --tag=\"ci_secp256k1_arm\"\n    - docker image prune --force  # Cleanup stale layers\n  test_script:\n    - docker run --rm --mount \"type=bind,src=./,dst=/ci_secp256k1\" --env-file /tmp/env --replace --name \"ci_secp256k1_arm\" \"ci_secp256k1_arm\" bash -c \"cd /ci_secp256k1/ && ./ci/ci.sh\"\n\ntask:\n  name: \"ARM64: Linux (Debian stable)\"\n  persistent_worker:\n    labels:\n      type: arm64\n  env:\n    ECDH: yes\n    RECOVERY: yes\n    EXTRAKEYS: yes\n    SCHNORRSIG: yes\n    MUSIG: yes\n    ELLSWIFT: yes\n  matrix:\n     # Currently only gcc-snapshot, the other compilers are tested on GHA with QEMU\n     - env: { CC: 'gcc-snapshot' }\n  << : *LINUX_ARM64_CONTAINER\n  << : *CAT_LOGS\n\ntask:\n  name: \"ARM64: Linux (Debian stable), Valgrind\"\n  persistent_worker:\n    labels:\n      type: arm64\n  env:\n    ECDH: yes\n    RECOVERY: yes\n    EXTRAKEYS: yes\n    SCHNORRSIG: yes\n    MUSIG: yes\n    ELLSWIFT: yes\n    WRAPPER_CMD: 'valgrind --error-exitcode=42'\n    SECP256K1_TEST_ITERS: 2\n  matrix:\n     - env: { CC: 'gcc' }\n     - env: { CC: 'clang' }\n     - env: { CC: 'gcc-snapshot' }\n     - env: { CC: 'clang-snapshot' }\n  << : *LINUX_ARM64_CONTAINER\n  << : *CAT_LOGS\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.08984375,
          "content": "src/precomputed_ecmult.c linguist-generated\nsrc/precomputed_ecmult_gen.c linguist-generated\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.83203125,
          "content": "bench\nbench_ecmult\nbench_internal\nnoverify_tests\ntests\nexhaustive_tests\nprecompute_ecmult_gen\nprecompute_ecmult\nctime_tests\necdh_example\necdsa_example\nschnorr_example\nellswift_example\nmusig_example\n*.exe\n*.so\n*.a\n*.csv\n*.log\n*.trs\n*.sage.py\n\nMakefile\nconfigure\n.libs/\nMakefile.in\naclocal.m4\nautom4te.cache/\nconfig.log\nconfig.status\nconftest*\n*.tar.gz\n*.la\nlibtool\n.deps/\n.dirstamp\n*.lo\n*.o\n*~\n\ncoverage/\ncoverage.html\ncoverage.*.html\n*.gcda\n*.gcno\n*.gcov\n\nbuild-aux/ar-lib\nbuild-aux/config.guess\nbuild-aux/config.sub\nbuild-aux/depcomp\nbuild-aux/install-sh\nbuild-aux/ltmain.sh\nbuild-aux/m4/libtool.m4\nbuild-aux/m4/lt~obsolete.m4\nbuild-aux/m4/ltoptions.m4\nbuild-aux/m4/ltsugar.m4\nbuild-aux/m4/ltversion.m4\nbuild-aux/missing\nbuild-aux/compile\nbuild-aux/test-driver\nlibsecp256k1.pc\n\n### CMake\n/CMakeUserPresets.json\n# Default CMake build directory.\n/build\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 11.8193359375,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n## [0.6.0] - 2024-11-04\n\n#### Added\n - New module `musig` implements the MuSig2 multisignature scheme according to the [BIP 327 specification](https://github.com/bitcoin/bips/blob/master/bip-0327.mediawiki). See:\n   - Header file `include/secp256k1_musig.h` which defines the new API.\n   - Document `doc/musig.md` for further notes on API usage.\n   - Usage example `examples/musig.c`.\n - New CMake variable `SECP256K1_APPEND_LDFLAGS` for appending linker flags to the build command.\n\n#### Changed\n - API functions now use a significantly more robust method to clear secrets from the stack before returning. However, secret clearing remains a best-effort security measure and cannot guarantee complete removal.\n - Any type `secp256k1_foo` can now be forward-declared using `typedef struct secp256k1_foo secp256k1_foo;` (or also `struct secp256k1_foo;` in C++).\n - Organized CMake build artifacts into dedicated directories (`bin/` for executables, `lib/` for libraries) to improve build output structure and Windows shared library compatibility.\n\n#### Removed\n - Removed the `secp256k1_scratch_space` struct and its associated functions `secp256k1_scratch_space_create` and `secp256k1_scratch_space_destroy` because the scratch space was unused in the API.\n\n#### ABI Compatibility\nThe symbols `secp256k1_scratch_space_create` and `secp256k1_scratch_space_destroy` were removed.\nOtherwise, the library maintains backward compatibility with versions 0.3.x through 0.5.x.\n\n## [0.5.1] - 2024-08-01\n\n#### Added\n - Added usage example for an ElligatorSwift key exchange.\n\n#### Changed\n - The default size of the precomputed table for signing was changed from 22 KiB to 86 KiB. The size can be changed with the configure option `--ecmult-gen-kb` (`SECP256K1_ECMULT_GEN_KB` for CMake).\n - \"auto\" is no longer an accepted value for the `--with-ecmult-window` and `--with-ecmult-gen-kb` configure options (this also applies to  `SECP256K1_ECMULT_WINDOW_SIZE` and `SECP256K1_ECMULT_GEN_KB` in CMake). To achieve the same configuration as previously provided by the \"auto\" value, omit setting the configure option explicitly.\n\n#### Fixed\n - Fixed compilation when the extrakeys module is disabled.\n\n#### ABI Compatibility\nThe ABI is backward compatible with versions 0.5.0, 0.4.x and 0.3.x.\n\n## [0.5.0] - 2024-05-06\n\n#### Added\n - New function `secp256k1_ec_pubkey_sort` that sorts public keys using lexicographic (of compressed serialization) order.\n\n#### Changed\n - The implementation of the point multiplication algorithm used for signing and public key generation was changed, resulting in improved performance for those operations.\n   - The related configure option `--ecmult-gen-precision` was replaced with `--ecmult-gen-kb` (`SECP256K1_ECMULT_GEN_KB` for CMake).\n   - This changes the supported precomputed table sizes for these operations. The new supported sizes are 2 KiB, 22 KiB, or 86 KiB (while the old supported sizes were 32 KiB, 64 KiB, or 512 KiB).\n\n#### ABI Compatibility\nThe ABI is backward compatible with versions 0.4.x and 0.3.x.\n\n## [0.4.1] - 2023-12-21\n\n#### Changed\n - The point multiplication algorithm used for ECDH operations (module `ecdh`) was replaced with a slightly faster one.\n - Optional handwritten x86_64 assembly for field operations was removed because modern C compilers are able to output more efficient assembly. This change results in a significant speedup of some library functions when handwritten x86_64 assembly is enabled (`--with-asm=x86_64` in GNU Autotools, `-DSECP256K1_ASM=x86_64` in CMake), which is the default on x86_64. Benchmarks with GCC 10.5.0 show a 10% speedup for `secp256k1_ecdsa_verify` and `secp256k1_schnorrsig_verify`.\n\n#### ABI Compatibility\nThe ABI is backward compatible with versions 0.4.0 and 0.3.x.\n\n## [0.4.0] - 2023-09-04\n\n#### Added\n - New module `ellswift` implements ElligatorSwift encoding for public keys and x-only Diffie-Hellman key exchange for them.\n   ElligatorSwift permits representing secp256k1 public keys as 64-byte arrays which cannot be distinguished from uniformly random. See:\n   - Header file `include/secp256k1_ellswift.h` which defines the new API.\n   - Document `doc/ellswift.md` which explains the mathematical background of the scheme.\n   - The [paper](https://eprint.iacr.org/2022/759) on which the scheme is based.\n - We now test the library with unreleased development snapshots of GCC and Clang. This gives us an early chance to catch miscompilations and constant-time issues introduced by the compiler (such as those that led to the previous two releases).\n\n#### Fixed\n - Fixed symbol visibility in Windows DLL builds, where three internal library symbols were wrongly exported.\n\n#### Changed\n - When consuming libsecp256k1 as a static library on Windows, the user must now define the `SECP256K1_STATIC` macro before including `secp256k1.h`.\n\n#### ABI Compatibility\nThis release is backward compatible with the ABI of 0.3.0, 0.3.1, and 0.3.2. Symbol visibility is now believed to be handled properly on supported platforms and is now considered to be part of the ABI. Please report any improperly exported symbols as a bug.\n\n## [0.3.2] - 2023-05-13\nWe strongly recommend updating to 0.3.2 if you use or plan to use GCC >=13 to compile libsecp256k1. When in doubt, check the GCC version using `gcc -v`.\n\n#### Security\n - Module `ecdh`: Fix \"constant-timeness\" issue with GCC 13.1 (and potentially future versions of GCC) that could leave applications using libsecp256k1's ECDH module vulnerable to a timing side-channel attack. The fix avoids secret-dependent control flow during ECDH computations when libsecp256k1 is compiled with GCC 13.1.\n\n#### Fixed\n - Fixed an old bug that permitted compilers to potentially output bad assembly code on x86_64. In theory, it could lead to a crash or a read of unrelated memory, but this has never been observed on any compilers so far.\n\n#### Changed\n - Various improvements and changes to CMake builds. CMake builds remain experimental.\n   - Made API versioning consistent with GNU Autotools builds.\n   - Switched to `BUILD_SHARED_LIBS` variable for controlling whether to build a static or a shared library.\n   - Added `SECP256K1_INSTALL` variable for the controlling whether to install the build artefacts.\n - Renamed asm build option `arm` to `arm32`. Use `--with-asm=arm32` instead of `--with-asm=arm` (GNU Autotools), and `-DSECP256K1_ASM=arm32` instead of `-DSECP256K1_ASM=arm` (CMake).\n\n#### ABI Compatibility\nThe ABI is compatible with versions 0.3.0 and 0.3.1.\n\n## [0.3.1] - 2023-04-10\nWe strongly recommend updating to 0.3.1 if you use or plan to use Clang >=14 to compile libsecp256k1, e.g., Xcode >=14 on macOS has Clang >=14. When in doubt, check the Clang version using `clang -v`.\n\n#### Security\n - Fix \"constant-timeness\" issue with Clang >=14 that could leave applications using libsecp256k1 vulnerable to a timing side-channel attack. The fix avoids secret-dependent control flow and secret-dependent memory accesses in conditional moves of memory objects when libsecp256k1 is compiled with Clang >=14.\n\n#### Added\n  - Added tests against [Project Wycheproof's](https://github.com/google/wycheproof/) set of ECDSA test vectors (Bitcoin \"low-S\" variant), a fixed set of test cases designed to trigger various edge cases.\n\n#### Changed\n - Increased minimum required CMake version to 3.13. CMake builds remain experimental.\n\n#### ABI Compatibility\nThe ABI is compatible with version 0.3.0.\n\n## [0.3.0] - 2023-03-08\n\n#### Added\n - Added experimental support for CMake builds. Traditional GNU Autotools builds (`./configure` and `make`) remain fully supported.\n - Usage examples: Added a recommended method for securely clearing sensitive data, e.g., secret keys, from memory.\n - Tests: Added a new test binary `noverify_tests`. This binary runs the tests without some additional checks present in the ordinary `tests` binary and is thereby closer to production binaries. The `noverify_tests` binary is automatically run as part of the `make check` target.\n\n#### Fixed\n - Fixed declarations of API variables for MSVC (`__declspec(dllimport)`). This fixes MSVC builds of programs which link against a libsecp256k1 DLL dynamically and use API variables (and not only API functions). Unfortunately, the MSVC linker now will emit warning `LNK4217` when trying to link against libsecp256k1 statically. Pass `/ignore:4217` to the linker to suppress this warning.\n\n#### Changed\n - Forbade cloning or destroying `secp256k1_context_static`. Create a new context instead of cloning the static context. (If this change breaks your code, your code is probably wrong.)\n - Forbade randomizing (copies of) `secp256k1_context_static`. Randomizing a copy of `secp256k1_context_static` did not have any effect and did not provide defense-in-depth protection against side-channel attacks. Create a new context if you want to benefit from randomization.\n\n#### Removed\n - Removed the configuration header `src/libsecp256k1-config.h`. We recommend passing flags to `./configure` or `cmake` to set configuration options (see `./configure --help` or `cmake -LH`). If you cannot or do not want to use one of the supported build systems, pass configuration flags such as `-DSECP256K1_ENABLE_MODULE_SCHNORRSIG` manually to the compiler (see the file `configure.ac` for supported flags).\n\n#### ABI Compatibility\nDue to changes in the API regarding `secp256k1_context_static` described above, the ABI is *not* compatible with previous versions.\n\n## [0.2.0] - 2022-12-12\n\n#### Added\n - Added usage examples for common use cases in a new `examples/` directory.\n - Added `secp256k1_selftest`, to be used in conjunction with `secp256k1_context_static`.\n - Added support for 128-bit wide multiplication on MSVC for x86_64 and arm64, giving roughly a 20% speedup on those platforms.\n\n#### Changed\n - Enabled modules `schnorrsig`, `extrakeys` and `ecdh` by default in `./configure`.\n - The `secp256k1_nonce_function_rfc6979` nonce function, used by default by `secp256k1_ecdsa_sign`, now reduces the message hash modulo the group order to match the specification. This only affects improper use of ECDSA signing API.\n\n#### Deprecated\n - Deprecated context flags `SECP256K1_CONTEXT_VERIFY` and `SECP256K1_CONTEXT_SIGN`. Use `SECP256K1_CONTEXT_NONE` instead.\n - Renamed `secp256k1_context_no_precomp` to `secp256k1_context_static`.\n - Module `schnorrsig`: renamed `secp256k1_schnorrsig_sign` to `secp256k1_schnorrsig_sign32`.\n\n#### ABI Compatibility\nSince this is the first release, we do not compare application binary interfaces.\nHowever, there are earlier unreleased versions of libsecp256k1 that are *not* ABI compatible with this version.\n\n## [0.1.0] - 2013-03-05 to 2021-12-25\n\nThis version was in fact never released.\nThe number was given by the build system since the introduction of autotools in Jan 2014 (ea0fe5a5bf0c04f9cc955b2966b614f5f378c6f6).\nTherefore, this version number does not uniquely identify a set of source files.\n\n[unreleased]: https://github.com/bitcoin-core/secp256k1/compare/v0.6.0...HEAD\n[0.6.0]: https://github.com/bitcoin-core/secp256k1/compare/v0.5.1...v0.6.0\n[0.5.1]: https://github.com/bitcoin-core/secp256k1/compare/v0.5.0...v0.5.1\n[0.5.0]: https://github.com/bitcoin-core/secp256k1/compare/v0.4.1...v0.5.0\n[0.4.1]: https://github.com/bitcoin-core/secp256k1/compare/v0.4.0...v0.4.1\n[0.4.0]: https://github.com/bitcoin-core/secp256k1/compare/v0.3.2...v0.4.0\n[0.3.2]: https://github.com/bitcoin-core/secp256k1/compare/v0.3.1...v0.3.2\n[0.3.1]: https://github.com/bitcoin-core/secp256k1/compare/v0.3.0...v0.3.1\n[0.3.0]: https://github.com/bitcoin-core/secp256k1/compare/v0.2.0...v0.3.0\n[0.2.0]: https://github.com/bitcoin-core/secp256k1/compare/423b6d19d373f1224fd671a982584d7e7900bc93..v0.2.0\n[0.1.0]: https://github.com/bitcoin-core/secp256k1/commit/423b6d19d373f1224fd671a982584d7e7900bc93\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 18.19921875,
          "content": "cmake_minimum_required(VERSION 3.16)\n\n#=============================\n# Project / Package metadata\n#=============================\nproject(libsecp256k1\n  # The package (a.k.a. release) version is based on semantic versioning 2.0.0 of\n  # the API. All changes in experimental modules are treated as\n  # backwards-compatible and therefore at most increase the minor version.\n  VERSION 0.6.1\n  DESCRIPTION \"Optimized C library for ECDSA signatures and secret/public key operations on curve secp256k1.\"\n  HOMEPAGE_URL \"https://github.com/bitcoin-core/secp256k1\"\n  LANGUAGES C\n)\nenable_testing()\nlist(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)\n\nif(CMAKE_VERSION VERSION_LESS 3.21)\n  # Emulates CMake 3.21+ behavior.\n  if(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)\n    set(PROJECT_IS_TOP_LEVEL ON)\n    set(${PROJECT_NAME}_IS_TOP_LEVEL ON)\n  else()\n    set(PROJECT_IS_TOP_LEVEL OFF)\n    set(${PROJECT_NAME}_IS_TOP_LEVEL OFF)\n  endif()\nendif()\n\n# The library version is based on libtool versioning of the ABI. The set of\n# rules for updating the version can be found here:\n# https://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html\n# All changes in experimental modules are treated as if they don't affect the\n# interface and therefore only increase the revision.\nset(${PROJECT_NAME}_LIB_VERSION_CURRENT 5)\nset(${PROJECT_NAME}_LIB_VERSION_REVISION 1)\nset(${PROJECT_NAME}_LIB_VERSION_AGE 0)\n\n#=============================\n# Language setup\n#=============================\nset(CMAKE_C_STANDARD 90)\nset(CMAKE_C_EXTENSIONS OFF)\n\n#=============================\n# Configurable options\n#=============================\noption(BUILD_SHARED_LIBS \"Build shared libraries.\" ON)\noption(SECP256K1_DISABLE_SHARED \"Disable shared library. Overrides BUILD_SHARED_LIBS.\" OFF)\nif(SECP256K1_DISABLE_SHARED)\n  set(BUILD_SHARED_LIBS OFF)\nendif()\n\noption(SECP256K1_INSTALL \"Enable installation.\" ${PROJECT_IS_TOP_LEVEL})\n\n## Modules\n\n# We declare all options before processing them, to make sure we can express\n# dependencies while processing.\noption(SECP256K1_ENABLE_MODULE_ECDH \"Enable ECDH module.\" ON)\noption(SECP256K1_ENABLE_MODULE_RECOVERY \"Enable ECDSA pubkey recovery module.\" OFF)\noption(SECP256K1_ENABLE_MODULE_EXTRAKEYS \"Enable extrakeys module.\" ON)\noption(SECP256K1_ENABLE_MODULE_SCHNORRSIG \"Enable schnorrsig module.\" ON)\noption(SECP256K1_ENABLE_MODULE_MUSIG \"Enable musig module.\" ON)\noption(SECP256K1_ENABLE_MODULE_ELLSWIFT \"Enable ElligatorSwift module.\" ON)\n\n# Processing must be done in a topological sorting of the dependency graph\n# (dependent module first).\nif(SECP256K1_ENABLE_MODULE_ELLSWIFT)\n  add_compile_definitions(ENABLE_MODULE_ELLSWIFT=1)\nendif()\n\nif(SECP256K1_ENABLE_MODULE_MUSIG)\n  if(DEFINED SECP256K1_ENABLE_MODULE_SCHNORRSIG AND NOT SECP256K1_ENABLE_MODULE_SCHNORRSIG)\n    message(FATAL_ERROR \"Module dependency error: You have disabled the schnorrsig module explicitly, but it is required by the musig module.\")\n  endif()\n  set(SECP256K1_ENABLE_MODULE_SCHNORRSIG ON)\n  add_compile_definitions(ENABLE_MODULE_MUSIG=1)\nendif()\n\nif(SECP256K1_ENABLE_MODULE_SCHNORRSIG)\n  if(DEFINED SECP256K1_ENABLE_MODULE_EXTRAKEYS AND NOT SECP256K1_ENABLE_MODULE_EXTRAKEYS)\n    message(FATAL_ERROR \"Module dependency error: You have disabled the extrakeys module explicitly, but it is required by the schnorrsig module.\")\n  endif()\n  set(SECP256K1_ENABLE_MODULE_EXTRAKEYS ON)\n  add_compile_definitions(ENABLE_MODULE_SCHNORRSIG=1)\nendif()\n\nif(SECP256K1_ENABLE_MODULE_EXTRAKEYS)\n  add_compile_definitions(ENABLE_MODULE_EXTRAKEYS=1)\nendif()\n\nif(SECP256K1_ENABLE_MODULE_RECOVERY)\n  add_compile_definitions(ENABLE_MODULE_RECOVERY=1)\nendif()\n\nif(SECP256K1_ENABLE_MODULE_ECDH)\n  add_compile_definitions(ENABLE_MODULE_ECDH=1)\nendif()\n\noption(SECP256K1_USE_EXTERNAL_DEFAULT_CALLBACKS \"Enable external default callback functions.\" OFF)\nif(SECP256K1_USE_EXTERNAL_DEFAULT_CALLBACKS)\n  add_compile_definitions(USE_EXTERNAL_DEFAULT_CALLBACKS=1)\nendif()\n\nset(SECP256K1_ECMULT_WINDOW_SIZE 15 CACHE STRING \"Window size for ecmult precomputation for verification, specified as integer in range [2..24]. The default value is a reasonable setting for desktop machines (currently 15). [default=15]\")\nset_property(CACHE SECP256K1_ECMULT_WINDOW_SIZE PROPERTY STRINGS 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24)\ninclude(CheckStringOptionValue)\ncheck_string_option_value(SECP256K1_ECMULT_WINDOW_SIZE)\nadd_compile_definitions(ECMULT_WINDOW_SIZE=${SECP256K1_ECMULT_WINDOW_SIZE})\n\nset(SECP256K1_ECMULT_GEN_KB 86 CACHE STRING \"The size of the precomputed table for signing in multiples of 1024 bytes (on typical platforms). Larger values result in possibly better signing or key generation performance at the cost of a larger table. Valid choices are 2, 22, 86. The default value is a reasonable setting for desktop machines (currently 86). [default=86]\")\nset_property(CACHE SECP256K1_ECMULT_GEN_KB PROPERTY STRINGS 2 22 86)\ncheck_string_option_value(SECP256K1_ECMULT_GEN_KB)\nif(SECP256K1_ECMULT_GEN_KB EQUAL 2)\n  add_compile_definitions(COMB_BLOCKS=2)\n  add_compile_definitions(COMB_TEETH=5)\nelseif(SECP256K1_ECMULT_GEN_KB EQUAL 22)\n  add_compile_definitions(COMB_BLOCKS=11)\n  add_compile_definitions(COMB_TEETH=6)\nelseif(SECP256K1_ECMULT_GEN_KB EQUAL 86)\n  add_compile_definitions(COMB_BLOCKS=43)\n  add_compile_definitions(COMB_TEETH=6)\nendif()\n\nset(SECP256K1_TEST_OVERRIDE_WIDE_MULTIPLY \"OFF\" CACHE STRING \"Test-only override of the (autodetected by the C code) \\\"widemul\\\" setting. Legal values are: \\\"OFF\\\", \\\"int128_struct\\\", \\\"int128\\\" or \\\"int64\\\". [default=OFF]\")\nset_property(CACHE SECP256K1_TEST_OVERRIDE_WIDE_MULTIPLY PROPERTY STRINGS \"OFF\" \"int128_struct\" \"int128\" \"int64\")\ncheck_string_option_value(SECP256K1_TEST_OVERRIDE_WIDE_MULTIPLY)\nif(SECP256K1_TEST_OVERRIDE_WIDE_MULTIPLY)\n  string(TOUPPER \"${SECP256K1_TEST_OVERRIDE_WIDE_MULTIPLY}\" widemul_upper_value)\n  add_compile_definitions(USE_FORCE_WIDEMUL_${widemul_upper_value}=1)\nendif()\nmark_as_advanced(FORCE SECP256K1_TEST_OVERRIDE_WIDE_MULTIPLY)\n\nset(SECP256K1_ASM \"AUTO\" CACHE STRING \"Assembly to use: \\\"AUTO\\\", \\\"OFF\\\", \\\"x86_64\\\" or \\\"arm32\\\" (experimental). [default=AUTO]\")\nset_property(CACHE SECP256K1_ASM PROPERTY STRINGS \"AUTO\" \"OFF\" \"x86_64\" \"arm32\")\ncheck_string_option_value(SECP256K1_ASM)\nif(SECP256K1_ASM STREQUAL \"arm32\")\n  enable_language(ASM)\n  include(CheckArm32Assembly)\n  check_arm32_assembly()\n  if(HAVE_ARM32_ASM)\n    add_compile_definitions(USE_EXTERNAL_ASM=1)\n  else()\n    message(FATAL_ERROR \"ARM32 assembly requested but not available.\")\n  endif()\nelseif(SECP256K1_ASM)\n  include(CheckX86_64Assembly)\n  check_x86_64_assembly()\n  if(HAVE_X86_64_ASM)\n    set(SECP256K1_ASM \"x86_64\")\n    add_compile_definitions(USE_ASM_X86_64=1)\n  elseif(SECP256K1_ASM STREQUAL \"AUTO\")\n    set(SECP256K1_ASM \"OFF\")\n  else()\n    message(FATAL_ERROR \"x86_64 assembly requested but not available.\")\n  endif()\nendif()\n\noption(SECP256K1_EXPERIMENTAL \"Allow experimental configuration options.\" OFF)\nif(NOT SECP256K1_EXPERIMENTAL)\n  if(SECP256K1_ASM STREQUAL \"arm32\")\n    message(FATAL_ERROR \"ARM32 assembly is experimental. Use -DSECP256K1_EXPERIMENTAL=ON to allow.\")\n  endif()\nendif()\n\nset(SECP256K1_VALGRIND \"AUTO\" CACHE STRING \"Build with extra checks for running inside Valgrind. [default=AUTO]\")\nset_property(CACHE SECP256K1_VALGRIND PROPERTY STRINGS \"AUTO\" \"OFF\" \"ON\")\ncheck_string_option_value(SECP256K1_VALGRIND)\nif(SECP256K1_VALGRIND)\n  find_package(Valgrind MODULE)\n  if(Valgrind_FOUND)\n    set(SECP256K1_VALGRIND ON)\n    include_directories(${Valgrind_INCLUDE_DIR})\n    add_compile_definitions(VALGRIND)\n  elseif(SECP256K1_VALGRIND STREQUAL \"AUTO\")\n    set(SECP256K1_VALGRIND OFF)\n  else()\n    message(FATAL_ERROR \"Valgrind support requested but valgrind/memcheck.h header not available.\")\n  endif()\nendif()\n\noption(SECP256K1_BUILD_BENCHMARK \"Build benchmarks.\" ON)\noption(SECP256K1_BUILD_TESTS \"Build tests.\" ON)\noption(SECP256K1_BUILD_EXHAUSTIVE_TESTS \"Build exhaustive tests.\" ON)\noption(SECP256K1_BUILD_CTIME_TESTS \"Build constant-time tests.\" ${SECP256K1_VALGRIND})\noption(SECP256K1_BUILD_EXAMPLES \"Build examples.\" OFF)\n\n# Redefine configuration flags.\n# We leave assertions on, because they are only used in the examples, and we want them always on there.\nif(MSVC)\n  string(REGEX REPLACE \"/DNDEBUG[ \\t\\r\\n]*\" \"\" CMAKE_C_FLAGS_RELWITHDEBINFO \"${CMAKE_C_FLAGS_RELWITHDEBINFO}\")\n  string(REGEX REPLACE \"/DNDEBUG[ \\t\\r\\n]*\" \"\" CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE}\")\n  string(REGEX REPLACE \"/DNDEBUG[ \\t\\r\\n]*\" \"\" CMAKE_C_FLAGS_MINSIZEREL \"${CMAKE_C_FLAGS_MINSIZEREL}\")\nelse()\n  string(REGEX REPLACE \"-DNDEBUG[ \\t\\r\\n]*\" \"\" CMAKE_C_FLAGS_RELWITHDEBINFO \"${CMAKE_C_FLAGS_RELWITHDEBINFO}\")\n  string(REGEX REPLACE \"-DNDEBUG[ \\t\\r\\n]*\" \"\" CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE}\")\n  string(REGEX REPLACE \"-DNDEBUG[ \\t\\r\\n]*\" \"\" CMAKE_C_FLAGS_MINSIZEREL \"${CMAKE_C_FLAGS_MINSIZEREL}\")\n  # Prefer -O2 optimization level. (-O3 is CMake's default for Release for many compilers.)\n  string(REGEX REPLACE \"-O3( |$)\" \"-O2\\\\1\" CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE}\")\nendif()\n\n# Define custom \"Coverage\" build type.\nset(CMAKE_C_FLAGS_COVERAGE \"${CMAKE_C_FLAGS_RELWITHDEBINFO} -O0 -DCOVERAGE=1 --coverage\" CACHE STRING\n  \"Flags used by the C compiler during \\\"Coverage\\\" builds.\"\n  FORCE\n)\nset(CMAKE_EXE_LINKER_FLAGS_COVERAGE \"${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO} --coverage\" CACHE STRING\n  \"Flags used for linking binaries during \\\"Coverage\\\" builds.\"\n  FORCE\n)\nset(CMAKE_SHARED_LINKER_FLAGS_COVERAGE \"${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO} --coverage\" CACHE STRING\n  \"Flags used by the shared libraries linker during \\\"Coverage\\\" builds.\"\n  FORCE\n)\nmark_as_advanced(\n  CMAKE_C_FLAGS_COVERAGE\n  CMAKE_EXE_LINKER_FLAGS_COVERAGE\n  CMAKE_SHARED_LINKER_FLAGS_COVERAGE\n)\n\nif(PROJECT_IS_TOP_LEVEL)\n  get_property(is_multi_config GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\n  set(default_build_type \"RelWithDebInfo\")\n  if(is_multi_config)\n    set(CMAKE_CONFIGURATION_TYPES \"${default_build_type}\" \"Release\" \"Debug\" \"MinSizeRel\" \"Coverage\" CACHE STRING\n      \"Supported configuration types.\"\n      FORCE\n    )\n  else()\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY\n      STRINGS \"${default_build_type}\" \"Release\" \"Debug\" \"MinSizeRel\" \"Coverage\"\n    )\n    if(NOT CMAKE_BUILD_TYPE)\n      message(STATUS \"Setting build type to \\\"${default_build_type}\\\" as none was specified\")\n      set(CMAKE_BUILD_TYPE \"${default_build_type}\" CACHE STRING\n        \"Choose the type of build.\"\n        FORCE\n      )\n    endif()\n  endif()\nendif()\n\ninclude(TryAppendCFlags)\nif(MSVC)\n  # Keep the following commands ordered lexicographically.\n  try_append_c_flags(/W3) # Production quality warning level.\n  try_append_c_flags(/wd4146) # Disable warning C4146 \"unary minus operator applied to unsigned type, result still unsigned\".\n  try_append_c_flags(/wd4244) # Disable warning C4244 \"'conversion' conversion from 'type1' to 'type2', possible loss of data\".\n  try_append_c_flags(/wd4267) # Disable warning C4267 \"'var' : conversion from 'size_t' to 'type', possible loss of data\".\n  # Eliminate deprecation warnings for the older, less secure functions.\n  add_compile_definitions(_CRT_SECURE_NO_WARNINGS)\nelse()\n  # Keep the following commands ordered lexicographically.\n  try_append_c_flags(-pedantic)\n  try_append_c_flags(-Wall) # GCC >= 2.95 and probably many other compilers.\n  try_append_c_flags(-Wcast-align) # GCC >= 2.95.\n  try_append_c_flags(-Wcast-align=strict) # GCC >= 8.0.\n  try_append_c_flags(-Wconditional-uninitialized) # Clang >= 3.0 only.\n  try_append_c_flags(-Wextra) # GCC >= 3.4, this is the newer name of -W, which we don't use because older GCCs will warn about unused functions.\n  try_append_c_flags(-Wnested-externs)\n  try_append_c_flags(-Wno-long-long) # GCC >= 3.0, -Wlong-long is implied by -pedantic.\n  try_append_c_flags(-Wno-overlength-strings) # GCC >= 4.2, -Woverlength-strings is implied by -pedantic.\n  try_append_c_flags(-Wno-unused-function) # GCC >= 3.0, -Wunused-function is implied by -Wall.\n  try_append_c_flags(-Wreserved-identifier) # Clang >= 13.0 only.\n  try_append_c_flags(-Wshadow)\n  try_append_c_flags(-Wstrict-prototypes)\n  try_append_c_flags(-Wundef)\nendif()\n\nset(CMAKE_C_VISIBILITY_PRESET hidden)\n\nset(print_msan_notice)\nif(SECP256K1_BUILD_CTIME_TESTS)\n  include(CheckMemorySanitizer)\n  check_memory_sanitizer(msan_enabled)\n  if(msan_enabled)\n    try_append_c_flags(-fno-sanitize-memory-param-retval)\n    set(print_msan_notice YES)\n  endif()\n  unset(msan_enabled)\nendif()\n\nset(SECP256K1_APPEND_CFLAGS \"\" CACHE STRING \"Compiler flags that are appended to the command line after all other flags added by the build system. This variable is intended for debugging and special builds.\")\nif(SECP256K1_APPEND_CFLAGS)\n  # Appending to this low-level rule variable is the only way to\n  # guarantee that the flags appear at the end of the command line.\n  string(APPEND CMAKE_C_COMPILE_OBJECT \" ${SECP256K1_APPEND_CFLAGS}\")\nendif()\n\nset(SECP256K1_APPEND_LDFLAGS \"\" CACHE STRING \"Linker flags that are appended to the command line after all other flags added by the build system. This variable is intended for debugging and special builds.\")\nif(SECP256K1_APPEND_LDFLAGS)\n  # Appending to this low-level rule variable is the only way to\n  # guarantee that the flags appear at the end of the command line.\n  string(APPEND CMAKE_C_CREATE_SHARED_LIBRARY \" ${SECP256K1_APPEND_LDFLAGS}\")\n  string(APPEND CMAKE_C_LINK_EXECUTABLE \" ${SECP256K1_APPEND_LDFLAGS}\")\nendif()\n\nif(NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)\n  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)\nendif()\nif(NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY)\n  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)\nendif()\nif(NOT CMAKE_ARCHIVE_OUTPUT_DIRECTORY)\n  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)\nendif()\nadd_subdirectory(src)\nif(SECP256K1_BUILD_EXAMPLES)\n  add_subdirectory(examples)\nendif()\n\nmessage(\"\\n\")\nmessage(\"secp256k1 configure summary\")\nmessage(\"===========================\")\nmessage(\"Build artifacts:\")\nif(BUILD_SHARED_LIBS)\n  set(library_type \"Shared\")\nelse()\n  set(library_type \"Static\")\nendif()\n\nmessage(\"  library type ........................ ${library_type}\")\nmessage(\"Optional modules:\")\nmessage(\"  ECDH ................................ ${SECP256K1_ENABLE_MODULE_ECDH}\")\nmessage(\"  ECDSA pubkey recovery ............... ${SECP256K1_ENABLE_MODULE_RECOVERY}\")\nmessage(\"  extrakeys ........................... ${SECP256K1_ENABLE_MODULE_EXTRAKEYS}\")\nmessage(\"  schnorrsig .......................... ${SECP256K1_ENABLE_MODULE_SCHNORRSIG}\")\nmessage(\"  musig ............................... ${SECP256K1_ENABLE_MODULE_MUSIG}\")\nmessage(\"  ElligatorSwift ...................... ${SECP256K1_ENABLE_MODULE_ELLSWIFT}\")\nmessage(\"Parameters:\")\nmessage(\"  ecmult window size .................. ${SECP256K1_ECMULT_WINDOW_SIZE}\")\nmessage(\"  ecmult gen table size ............... ${SECP256K1_ECMULT_GEN_KB} KiB\")\nmessage(\"Optional features:\")\nmessage(\"  assembly ............................ ${SECP256K1_ASM}\")\nmessage(\"  external callbacks .................. ${SECP256K1_USE_EXTERNAL_DEFAULT_CALLBACKS}\")\nif(SECP256K1_TEST_OVERRIDE_WIDE_MULTIPLY)\n  message(\"  wide multiplication (test-only) ..... ${SECP256K1_TEST_OVERRIDE_WIDE_MULTIPLY}\")\nendif()\nmessage(\"Optional binaries:\")\nmessage(\"  benchmark ........................... ${SECP256K1_BUILD_BENCHMARK}\")\nmessage(\"  noverify_tests ...................... ${SECP256K1_BUILD_TESTS}\")\nset(tests_status \"${SECP256K1_BUILD_TESTS}\")\nif(CMAKE_BUILD_TYPE STREQUAL \"Coverage\")\n  set(tests_status OFF)\nendif()\nmessage(\"  tests ............................... ${tests_status}\")\nmessage(\"  exhaustive tests .................... ${SECP256K1_BUILD_EXHAUSTIVE_TESTS}\")\nmessage(\"  ctime_tests ......................... ${SECP256K1_BUILD_CTIME_TESTS}\")\nmessage(\"  examples ............................ ${SECP256K1_BUILD_EXAMPLES}\")\nmessage(\"\")\nif(CMAKE_CROSSCOMPILING)\n  set(cross_status \"TRUE, for ${CMAKE_SYSTEM_NAME}, ${CMAKE_SYSTEM_PROCESSOR}\")\nelse()\n  set(cross_status \"FALSE\")\nendif()\nmessage(\"Cross compiling ....................... ${cross_status}\")\nmessage(\"Valgrind .............................. ${SECP256K1_VALGRIND}\")\nget_directory_property(definitions COMPILE_DEFINITIONS)\nstring(REPLACE \";\" \" \" definitions \"${definitions}\")\nmessage(\"Preprocessor defined macros ........... ${definitions}\")\nmessage(\"C compiler ............................ ${CMAKE_C_COMPILER_ID} ${CMAKE_C_COMPILER_VERSION}, ${CMAKE_C_COMPILER}\")\nmessage(\"CFLAGS ................................ ${CMAKE_C_FLAGS}\")\nget_directory_property(compile_options COMPILE_OPTIONS)\nstring(REPLACE \";\" \" \" compile_options \"${compile_options}\")\nmessage(\"Compile options ....................... \" ${compile_options})\nif(NOT is_multi_config)\n  message(\"Build type:\")\n  message(\" - CMAKE_BUILD_TYPE ................... ${CMAKE_BUILD_TYPE}\")\n  string(TOUPPER \"${CMAKE_BUILD_TYPE}\" build_type)\n  message(\" - CFLAGS ............................. ${CMAKE_C_FLAGS_${build_type}}\")\n  message(\" - LDFLAGS for executables ............ ${CMAKE_EXE_LINKER_FLAGS_${build_type}}\")\n  message(\" - LDFLAGS for shared libraries ....... ${CMAKE_SHARED_LINKER_FLAGS_${build_type}}\")\nelse()\n  message(\"Supported configurations .............. ${CMAKE_CONFIGURATION_TYPES}\")\n  message(\"RelWithDebInfo configuration:\")\n  message(\" - CFLAGS ............................. ${CMAKE_C_FLAGS_RELWITHDEBINFO}\")\n  message(\" - LDFLAGS for executables ............ ${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO}\")\n  message(\" - LDFLAGS for shared libraries ....... ${CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO}\")\n  message(\"Debug configuration:\")\n  message(\" - CFLAGS ............................. ${CMAKE_C_FLAGS_DEBUG}\")\n  message(\" - LDFLAGS for executables ............ ${CMAKE_EXE_LINKER_FLAGS_DEBUG}\")\n  message(\" - LDFLAGS for shared libraries ....... ${CMAKE_SHARED_LINKER_FLAGS_DEBUG}\")\nendif()\nif(SECP256K1_APPEND_CFLAGS)\n  message(\"SECP256K1_APPEND_CFLAGS ............... ${SECP256K1_APPEND_CFLAGS}\")\nendif()\nif(SECP256K1_APPEND_LDFLAGS)\n  message(\"SECP256K1_APPEND_LDFLAGS .............. ${SECP256K1_APPEND_LDFLAGS}\")\nendif()\nmessage(\"\")\nif(print_msan_notice)\n  message(\n    \"Note:\\n\"\n    \"  MemorySanitizer detected, tried to add -fno-sanitize-memory-param-retval to compile options\\n\"\n    \"  to avoid false positives in ctime_tests. Pass -DSECP256K1_BUILD_CTIME_TESTS=OFF to avoid this.\\n\"\n  )\nendif()\nif(SECP256K1_EXPERIMENTAL)\n  message(\n    \"  ******\\n\"\n    \"  WARNING: experimental build\\n\"\n    \"  Experimental features do not have stable APIs or properties, and may not be safe for production use.\\n\"\n    \"  ******\\n\"\n  )\nendif()\n"
        },
        {
          "name": "CMakePresets.json",
          "type": "blob",
          "size": 0.47265625,
          "content": "{\n  \"cmakeMinimumRequired\": {\"major\": 3, \"minor\": 21, \"patch\": 0}, \n  \"version\": 3,\n  \"configurePresets\": [\n    {\n      \"name\": \"dev-mode\",\n      \"displayName\": \"Development mode (intended only for developers of the library)\",\n      \"cacheVariables\": {\n        \"SECP256K1_EXPERIMENTAL\": \"ON\",\n        \"SECP256K1_ENABLE_MODULE_RECOVERY\": \"ON\",\n        \"SECP256K1_BUILD_EXAMPLES\": \"ON\"\n      },\n      \"warnings\": {\n        \"dev\": true,\n        \"uninitialized\": true\n      }\n    }\n  ]\n}\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.2421875,
          "content": "# Contributing to libsecp256k1\n\n## Scope\n\nlibsecp256k1 is a library for elliptic curve cryptography on the curve secp256k1, not a general-purpose cryptography library.\nThe library primarily serves the needs of the Bitcoin Core project but provides additional functionality for the benefit of the wider Bitcoin ecosystem.\n\n## Adding new functionality or modules\n\nThe libsecp256k1 project welcomes contributions in the form of new functionality or modules, provided they are within the project's scope.\n\nIt is the responsibility of the contributors to convince the maintainers that the proposed functionality is within the project's scope, high-quality and maintainable.\nContributors are recommended to provide the following in addition to the new code:\n\n* **Specification:**\n    A specification can help significantly in reviewing the new code as it provides documentation and context.\n    It may justify various design decisions, give a motivation and outline security goals.\n    If the specification contains pseudocode, a reference implementation or test vectors, these can be used to compare with the proposed libsecp256k1 code.\n* **Security Arguments:**\n    In addition to a defining the security goals, it should be argued that the new functionality meets these goals.\n    Depending on the nature of the new functionality, a wide range of security arguments are acceptable, ranging from being \"obviously secure\" to rigorous proofs of security.\n* **Relevance Arguments:**\n    The relevance of the new functionality for the Bitcoin ecosystem should be argued by outlining clear use cases.\n\nThese are not the only factors taken into account when considering to add new functionality.\nThe proposed new libsecp256k1 code must be of high quality, including API documentation and tests, as well as featuring a misuse-resistant API design.\n\nWe recommend reaching out to other contributors (see [Communication Channels](#communication-channels)) and get feedback before implementing new functionality.\n\n## Communication channels\n\nMost communication about libsecp256k1 occurs on the GitHub repository: in issues, pull request or on the discussion board.\n\nAdditionally, there is an IRC channel dedicated to libsecp256k1, with biweekly meetings (see channel topic).\nThe channel is `#secp256k1` on Libera Chat.\nThe easiest way to participate on IRC is with the web client, [web.libera.chat](https://web.libera.chat/#secp256k1).\nChat history logs can be found at https://gnusha.org/secp256k1/.\n\n## Contributor workflow & peer review\n\nThe Contributor Workflow & Peer Review in libsecp256k1 are similar to Bitcoin Core's workflow and review processes described in its [CONTRIBUTING.md](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md).\n\n### Coding conventions\n\nIn addition, libsecp256k1 tries to maintain the following coding conventions:\n\n* No runtime heap allocation (e.g., no `malloc`) unless explicitly requested by the caller (via `secp256k1_context_create` or `secp256k1_scratch_space_create`, for example). Moreover, it should be possible to use the library without any heap allocations.\n* The tests should cover all lines and branches of the library (see [Test coverage](#coverage)).\n* Operations involving secret data should be tested for being constant time with respect to the secrets (see [src/ctime_tests.c](src/ctime_tests.c)).\n* Local variables containing secret data should be cleared explicitly to try to delete secrets from memory.\n* Use `secp256k1_memcmp_var` instead of `memcmp` (see [#823](https://github.com/bitcoin-core/secp256k1/issues/823)).\n* As a rule of thumb, the default values for configuration options should target standard desktop machines and align with Bitcoin Core's defaults, and the tests should mostly exercise the default configuration (see [#1549](https://github.com/bitcoin-core/secp256k1/issues/1549#issuecomment-2200559257)).\n\n#### Style conventions\n\n* Commits should be atomic and diffs should be easy to read. For this reason, do not mix any formatting fixes or code moves with actual code changes. Make sure each individual commit is hygienic: that it builds successfully on its own without warnings, errors, regressions, or test failures.\n* New code should adhere to the style of existing, in particular surrounding, code. Other than that, we do not enforce strict rules for code formatting.\n* The code conforms to C89. Most notably, that means that only `/* ... */` comments are allowed (no `//` line comments). Moreover, any declarations in a `{ ... }` block (e.g., a function) must appear at the beginning of the block before any statements. When you would like to declare a variable in the middle of a block, you can open a new block:\n    ```C\n    void secp256k_foo(void) {\n        unsigned int x;              /* declaration */\n        int y = 2*x;                 /* declaration */\n        x = 17;                      /* statement */\n        {\n            int a, b;                /* declaration */\n            a = x + y;               /* statement */\n            secp256k_bar(x, &b);     /* statement */\n        }\n    }\n    ```\n* Use `unsigned int` instead of just `unsigned`.\n* Use `void *ptr` instead of `void* ptr`.\n* Arguments of the publicly-facing API must have a specific order defined in [include/secp256k1.h](include/secp256k1.h).\n* User-facing comment lines in headers should be limited to 80 chars if possible.\n* All identifiers in file scope should start with `secp256k1_`.\n* Avoid trailing whitespace.\n\n### Tests\n\n#### Coverage\n\nThis library aims to have full coverage of reachable lines and branches.\n\nTo create a test coverage report, configure with `--enable-coverage` (use of GCC is necessary):\n\n    $ ./configure --enable-coverage\n\nRun the tests:\n\n    $ make check\n\nTo create a report, `gcovr` is recommended, as it includes branch coverage reporting:\n\n    $ gcovr --exclude 'src/bench*' --print-summary\n\nTo create a HTML report with coloured and annotated source code:\n\n    $ mkdir -p coverage\n    $ gcovr --exclude 'src/bench*' --html --html-details -o coverage/coverage.html\n\n#### Exhaustive tests\n\nThere are tests of several functions in which a small group replaces secp256k1.\nThese tests are *exhaustive* since they provide all elements and scalars of the small group as input arguments (see [src/tests_exhaustive.c](src/tests_exhaustive.c)).\n\n### Benchmarks\n\nSee `src/bench*.c` for examples of benchmarks.\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 1.0322265625,
          "content": "Copyright (c) 2013 Pieter Wuille\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 9.8623046875,
          "content": "ACLOCAL_AMFLAGS = -I build-aux/m4\n\n# AM_CFLAGS will be automatically prepended to CFLAGS by Automake when compiling some foo\n# which does not have an explicit foo_CFLAGS variable set.\nAM_CFLAGS = $(SECP_CFLAGS)\n\nlib_LTLIBRARIES = libsecp256k1.la\ninclude_HEADERS = include/secp256k1.h\ninclude_HEADERS += include/secp256k1_preallocated.h\nnoinst_HEADERS =\nnoinst_HEADERS += src/scalar.h\nnoinst_HEADERS += src/scalar_4x64.h\nnoinst_HEADERS += src/scalar_8x32.h\nnoinst_HEADERS += src/scalar_low.h\nnoinst_HEADERS += src/scalar_impl.h\nnoinst_HEADERS += src/scalar_4x64_impl.h\nnoinst_HEADERS += src/scalar_8x32_impl.h\nnoinst_HEADERS += src/scalar_low_impl.h\nnoinst_HEADERS += src/group.h\nnoinst_HEADERS += src/group_impl.h\nnoinst_HEADERS += src/ecdsa.h\nnoinst_HEADERS += src/ecdsa_impl.h\nnoinst_HEADERS += src/eckey.h\nnoinst_HEADERS += src/eckey_impl.h\nnoinst_HEADERS += src/ecmult.h\nnoinst_HEADERS += src/ecmult_impl.h\nnoinst_HEADERS += src/ecmult_compute_table.h\nnoinst_HEADERS += src/ecmult_compute_table_impl.h\nnoinst_HEADERS += src/ecmult_const.h\nnoinst_HEADERS += src/ecmult_const_impl.h\nnoinst_HEADERS += src/ecmult_gen.h\nnoinst_HEADERS += src/ecmult_gen_impl.h\nnoinst_HEADERS += src/ecmult_gen_compute_table.h\nnoinst_HEADERS += src/ecmult_gen_compute_table_impl.h\nnoinst_HEADERS += src/field_10x26.h\nnoinst_HEADERS += src/field_10x26_impl.h\nnoinst_HEADERS += src/field_5x52.h\nnoinst_HEADERS += src/field_5x52_impl.h\nnoinst_HEADERS += src/field_5x52_int128_impl.h\nnoinst_HEADERS += src/modinv32.h\nnoinst_HEADERS += src/modinv32_impl.h\nnoinst_HEADERS += src/modinv64.h\nnoinst_HEADERS += src/modinv64_impl.h\nnoinst_HEADERS += src/precomputed_ecmult.h\nnoinst_HEADERS += src/precomputed_ecmult_gen.h\nnoinst_HEADERS += src/assumptions.h\nnoinst_HEADERS += src/checkmem.h\nnoinst_HEADERS += src/testutil.h\nnoinst_HEADERS += src/util.h\nnoinst_HEADERS += src/int128.h\nnoinst_HEADERS += src/int128_impl.h\nnoinst_HEADERS += src/int128_native.h\nnoinst_HEADERS += src/int128_native_impl.h\nnoinst_HEADERS += src/int128_struct.h\nnoinst_HEADERS += src/int128_struct_impl.h\nnoinst_HEADERS += src/scratch.h\nnoinst_HEADERS += src/scratch_impl.h\nnoinst_HEADERS += src/selftest.h\nnoinst_HEADERS += src/testrand.h\nnoinst_HEADERS += src/testrand_impl.h\nnoinst_HEADERS += src/hash.h\nnoinst_HEADERS += src/hash_impl.h\nnoinst_HEADERS += src/field.h\nnoinst_HEADERS += src/field_impl.h\nnoinst_HEADERS += src/bench.h\nnoinst_HEADERS += src/wycheproof/ecdsa_secp256k1_sha256_bitcoin_test.h\nnoinst_HEADERS += src/hsort.h\nnoinst_HEADERS += src/hsort_impl.h\nnoinst_HEADERS += contrib/lax_der_parsing.h\nnoinst_HEADERS += contrib/lax_der_parsing.c\nnoinst_HEADERS += contrib/lax_der_privatekey_parsing.h\nnoinst_HEADERS += contrib/lax_der_privatekey_parsing.c\nnoinst_HEADERS += examples/examples_util.h\n\nPRECOMPUTED_LIB = libsecp256k1_precomputed.la\nnoinst_LTLIBRARIES = $(PRECOMPUTED_LIB)\nlibsecp256k1_precomputed_la_SOURCES =  src/precomputed_ecmult.c src/precomputed_ecmult_gen.c\n# We need `-I$(top_srcdir)/src` in VPATH builds if libsecp256k1_precomputed_la_SOURCES have been recreated in the build tree.\n# This helps users and packagers who insist on recreating the precomputed files (e.g., Gentoo).\nlibsecp256k1_precomputed_la_CPPFLAGS = -I$(top_srcdir)/src $(SECP_CONFIG_DEFINES)\n\nif USE_EXTERNAL_ASM\nCOMMON_LIB = libsecp256k1_common.la\nelse\nCOMMON_LIB =\nendif\nnoinst_LTLIBRARIES += $(COMMON_LIB)\n\npkgconfigdir = $(libdir)/pkgconfig\npkgconfig_DATA = libsecp256k1.pc\n\nif USE_EXTERNAL_ASM\nif USE_ASM_ARM\nlibsecp256k1_common_la_SOURCES = src/asm/field_10x26_arm.s\nendif\nendif\n\nlibsecp256k1_la_SOURCES = src/secp256k1.c\nlibsecp256k1_la_CPPFLAGS = $(SECP_CONFIG_DEFINES)\nlibsecp256k1_la_LIBADD = $(COMMON_LIB) $(PRECOMPUTED_LIB)\nlibsecp256k1_la_LDFLAGS = -no-undefined -version-info $(LIB_VERSION_CURRENT):$(LIB_VERSION_REVISION):$(LIB_VERSION_AGE)\n\nnoinst_PROGRAMS =\nif USE_BENCHMARK\nnoinst_PROGRAMS += bench bench_internal bench_ecmult\nbench_SOURCES = src/bench.c\nbench_LDADD = libsecp256k1.la\nbench_CPPFLAGS = $(SECP_CONFIG_DEFINES)\nbench_internal_SOURCES = src/bench_internal.c\nbench_internal_LDADD = $(COMMON_LIB) $(PRECOMPUTED_LIB)\nbench_internal_CPPFLAGS = $(SECP_CONFIG_DEFINES)\nbench_ecmult_SOURCES = src/bench_ecmult.c\nbench_ecmult_LDADD = $(COMMON_LIB) $(PRECOMPUTED_LIB)\nbench_ecmult_CPPFLAGS = $(SECP_CONFIG_DEFINES)\nendif\n\nTESTS =\nif USE_TESTS\nTESTS += noverify_tests\nnoinst_PROGRAMS += noverify_tests\nnoverify_tests_SOURCES = src/tests.c\nnoverify_tests_CPPFLAGS = $(SECP_CONFIG_DEFINES)\nnoverify_tests_LDADD = $(COMMON_LIB) $(PRECOMPUTED_LIB)\nnoverify_tests_LDFLAGS = -static\nif !ENABLE_COVERAGE\nTESTS += tests\nnoinst_PROGRAMS += tests\ntests_SOURCES  = $(noverify_tests_SOURCES)\ntests_CPPFLAGS = $(noverify_tests_CPPFLAGS) -DVERIFY\ntests_LDADD    = $(noverify_tests_LDADD)\ntests_LDFLAGS  = $(noverify_tests_LDFLAGS)\nendif\nendif\n\nif USE_CTIME_TESTS\nnoinst_PROGRAMS += ctime_tests\nctime_tests_SOURCES = src/ctime_tests.c\nctime_tests_LDADD = libsecp256k1.la\nctime_tests_CPPFLAGS = $(SECP_CONFIG_DEFINES)\nendif\n\nif USE_EXHAUSTIVE_TESTS\nnoinst_PROGRAMS += exhaustive_tests\nexhaustive_tests_SOURCES = src/tests_exhaustive.c\nexhaustive_tests_CPPFLAGS = $(SECP_CONFIG_DEFINES)\nif !ENABLE_COVERAGE\nexhaustive_tests_CPPFLAGS += -DVERIFY\nendif\n# Note: do not include $(PRECOMPUTED_LIB) in exhaustive_tests (it uses runtime-generated tables).\nexhaustive_tests_LDADD = $(COMMON_LIB)\nexhaustive_tests_LDFLAGS = -static\nTESTS += exhaustive_tests\nendif\n\nif USE_EXAMPLES\nnoinst_PROGRAMS += ecdsa_example\necdsa_example_SOURCES = examples/ecdsa.c\necdsa_example_CPPFLAGS = -I$(top_srcdir)/include -DSECP256K1_STATIC\necdsa_example_LDADD = libsecp256k1.la\necdsa_example_LDFLAGS = -static\nif BUILD_WINDOWS\necdsa_example_LDFLAGS += -lbcrypt\nendif\nTESTS += ecdsa_example\nif ENABLE_MODULE_ECDH\nnoinst_PROGRAMS += ecdh_example\necdh_example_SOURCES = examples/ecdh.c\necdh_example_CPPFLAGS = -I$(top_srcdir)/include -DSECP256K1_STATIC\necdh_example_LDADD = libsecp256k1.la\necdh_example_LDFLAGS = -static\nif BUILD_WINDOWS\necdh_example_LDFLAGS += -lbcrypt\nendif\nTESTS += ecdh_example\nendif\nif ENABLE_MODULE_SCHNORRSIG\nnoinst_PROGRAMS += schnorr_example\nschnorr_example_SOURCES = examples/schnorr.c\nschnorr_example_CPPFLAGS = -I$(top_srcdir)/include -DSECP256K1_STATIC\nschnorr_example_LDADD = libsecp256k1.la\nschnorr_example_LDFLAGS = -static\nif BUILD_WINDOWS\nschnorr_example_LDFLAGS += -lbcrypt\nendif\nTESTS += schnorr_example\nendif\nif ENABLE_MODULE_ELLSWIFT\nnoinst_PROGRAMS += ellswift_example\nellswift_example_SOURCES = examples/ellswift.c\nellswift_example_CPPFLAGS = -I$(top_srcdir)/include -DSECP256K1_STATIC\nellswift_example_LDADD = libsecp256k1.la\nellswift_example_LDFLAGS = -static\nif BUILD_WINDOWS\nellswift_example_LDFLAGS += -lbcrypt\nendif\nTESTS += ellswift_example\nendif\nif ENABLE_MODULE_MUSIG\nnoinst_PROGRAMS += musig_example\nmusig_example_SOURCES = examples/musig.c\nmusig_example_CPPFLAGS = -I$(top_srcdir)/include -DSECP256K1_STATIC\nmusig_example_LDADD = libsecp256k1.la\nmusig_example_LDFLAGS = -static\nif BUILD_WINDOWS\nmusig_example_LDFLAGS += -lbcrypt\nendif\nTESTS += musig_example\nendif\nendif\n\n### Precomputed tables\nEXTRA_PROGRAMS = precompute_ecmult precompute_ecmult_gen\nCLEANFILES = $(EXTRA_PROGRAMS)\n\nprecompute_ecmult_SOURCES = src/precompute_ecmult.c\nprecompute_ecmult_CPPFLAGS = $(SECP_CONFIG_DEFINES) -DVERIFY\nprecompute_ecmult_LDADD = $(COMMON_LIB)\n\nprecompute_ecmult_gen_SOURCES = src/precompute_ecmult_gen.c\nprecompute_ecmult_gen_CPPFLAGS = $(SECP_CONFIG_DEFINES) -DVERIFY\nprecompute_ecmult_gen_LDADD = $(COMMON_LIB)\n\n# See Automake manual, Section \"Errors with distclean\".\n# We don't list any dependencies for the prebuilt files here because\n# otherwise make's decision whether to rebuild them (even in the first\n# build by a normal user) depends on mtimes, and thus is very fragile.\n# This means that rebuilds of the prebuilt files always need to be\n# forced by deleting them.\nsrc/precomputed_ecmult.c:\n\t$(MAKE) $(AM_MAKEFLAGS) precompute_ecmult$(EXEEXT)\n\t./precompute_ecmult$(EXEEXT)\nsrc/precomputed_ecmult_gen.c:\n\t$(MAKE) $(AM_MAKEFLAGS) precompute_ecmult_gen$(EXEEXT)\n\t./precompute_ecmult_gen$(EXEEXT)\n\nPRECOMP = src/precomputed_ecmult_gen.c src/precomputed_ecmult.c\nprecomp: $(PRECOMP)\n\n# Ensure the prebuilt files will be build first (only if they don't exist,\n# e.g., after `make maintainer-clean`).\nBUILT_SOURCES = $(PRECOMP)\n\n.PHONY: clean-precomp\nclean-precomp:\n\trm -f $(PRECOMP)\nmaintainer-clean-local: clean-precomp\n\n### Pregenerated test vectors\n### (see the comments in the previous section for detailed rationale)\nTESTVECTORS = src/wycheproof/ecdsa_secp256k1_sha256_bitcoin_test.h\n\nsrc/wycheproof/ecdsa_secp256k1_sha256_bitcoin_test.h:\n\tmkdir -p $(@D)\n\tpython3 $(top_srcdir)/tools/tests_wycheproof_generate.py $(top_srcdir)/src/wycheproof/ecdsa_secp256k1_sha256_bitcoin_test.json > $@\n\ntestvectors: $(TESTVECTORS)\n\nBUILT_SOURCES += $(TESTVECTORS)\n\n.PHONY: clean-testvectors\nclean-testvectors:\n\trm -f $(TESTVECTORS)\nmaintainer-clean-local: clean-testvectors\n\n### Additional files to distribute\nEXTRA_DIST = autogen.sh CHANGELOG.md SECURITY.md\nEXTRA_DIST += doc/release-process.md doc/safegcd_implementation.md\nEXTRA_DIST += doc/ellswift.md doc/musig.md\nEXTRA_DIST += examples/EXAMPLES_COPYING\nEXTRA_DIST += sage/gen_exhaustive_groups.sage\nEXTRA_DIST += sage/gen_split_lambda_constants.sage\nEXTRA_DIST += sage/group_prover.sage\nEXTRA_DIST += sage/prove_group_implementations.sage\nEXTRA_DIST += sage/secp256k1_params.sage\nEXTRA_DIST += sage/weierstrass_prover.sage\nEXTRA_DIST += src/wycheproof/WYCHEPROOF_COPYING\nEXTRA_DIST += src/wycheproof/ecdsa_secp256k1_sha256_bitcoin_test.json\nEXTRA_DIST += tools/tests_wycheproof_generate.py\n\nif ENABLE_MODULE_ECDH\ninclude src/modules/ecdh/Makefile.am.include\nendif\n\nif ENABLE_MODULE_RECOVERY\ninclude src/modules/recovery/Makefile.am.include\nendif\n\nif ENABLE_MODULE_EXTRAKEYS\ninclude src/modules/extrakeys/Makefile.am.include\nendif\n\nif ENABLE_MODULE_SCHNORRSIG\ninclude src/modules/schnorrsig/Makefile.am.include\nendif\n\nif ENABLE_MODULE_MUSIG\ninclude src/modules/musig/Makefile.am.include\nendif\n\nif ENABLE_MODULE_ELLSWIFT\ninclude src/modules/ellswift/Makefile.am.include\nendif\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.7197265625,
          "content": "libsecp256k1\n============\n\n![Dependencies: None](https://img.shields.io/badge/dependencies-none-success)\n[![irc.libera.chat #secp256k1](https://img.shields.io/badge/irc.libera.chat-%23secp256k1-success)](https://web.libera.chat/#secp256k1)\n\nHigh-performance high-assurance C library for digital signatures and other cryptographic primitives on the secp256k1 elliptic curve.\n\nThis library is intended to be the highest quality publicly available library for cryptography on the secp256k1 curve. However, the primary focus of its development has been for usage in the Bitcoin system and usage unlike Bitcoin's may be less well tested, verified, or suffer from a less well thought out interface. Correct usage requires some care and consideration that the library is fit for your application's purpose.\n\nFeatures:\n* secp256k1 ECDSA signing/verification and key generation.\n* Additive and multiplicative tweaking of secret/public keys.\n* Serialization/parsing of secret keys, public keys, signatures.\n* Constant time, constant memory access signing and public key generation.\n* Derandomized ECDSA (via RFC6979 or with a caller provided function.)\n* Very efficient implementation.\n* Suitable for embedded systems.\n* No runtime dependencies.\n* Optional module for public key recovery.\n* Optional module for ECDH key exchange.\n* Optional module for Schnorr signatures according to [BIP-340](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki).\n* Optional module for ElligatorSwift key exchange according to [BIP-324](https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki).\n* Optional module for MuSig2 Schnorr multi-signatures according to [BIP-327](https://github.com/bitcoin/bips/blob/master/bip-0327.mediawiki).\n\nImplementation details\n----------------------\n\n* General\n  * No runtime heap allocation.\n  * Extensive testing infrastructure.\n  * Structured to facilitate review and analysis.\n  * Intended to be portable to any system with a C89 compiler and uint64_t support.\n  * No use of floating types.\n  * Expose only higher level interfaces to minimize the API surface and improve application security. (\"Be difficult to use insecurely.\")\n* Field operations\n  * Optimized implementation of arithmetic modulo the curve's field size (2^256 - 0x1000003D1).\n    * Using 5 52-bit limbs\n    * Using 10 26-bit limbs (including hand-optimized assembly for 32-bit ARM, by Wladimir J. van der Laan).\n      * This is an experimental feature that has not received enough scrutiny to satisfy the standard of quality of this library but is made available for testing and review by the community.\n* Scalar operations\n  * Optimized implementation without data-dependent branches of arithmetic modulo the curve's order.\n    * Using 4 64-bit limbs (relying on __int128 support in the compiler).\n    * Using 8 32-bit limbs.\n* Modular inverses (both field elements and scalars) based on [safegcd](https://gcd.cr.yp.to/index.html) with some modifications, and a variable-time variant (by Peter Dettman).\n* Group operations\n  * Point addition formula specifically simplified for the curve equation (y^2 = x^3 + 7).\n  * Use addition between points in Jacobian and affine coordinates where possible.\n  * Use a unified addition/doubling formula where necessary to avoid data-dependent branches.\n  * Point/x comparison without a field inversion by comparison in the Jacobian coordinate space.\n* Point multiplication for verification (a*P + b*G).\n  * Use wNAF notation for point multiplicands.\n  * Use a much larger window for multiples of G, using precomputed multiples.\n  * Use Shamir's trick to do the multiplication with the public key and the generator simultaneously.\n  * Use secp256k1's efficiently-computable endomorphism to split the P multiplicand into 2 half-sized ones.\n* Point multiplication for signing\n  * Use a precomputed table of multiples of powers of 16 multiplied with the generator, so general multiplication becomes a series of additions.\n  * Intended to be completely free of timing sidechannels for secret-key operations (on reasonable hardware/toolchains)\n    * Access the table with branch-free conditional moves so memory access is uniform.\n    * No data-dependent branches\n  * Optional runtime blinding which attempts to frustrate differential power analysis.\n  * The precomputed tables add and eventually subtract points for which no known scalar (secret key) is known, preventing even an attacker with control over the secret key used to control the data internally.\n\nBuilding with Autotools\n-----------------------\n\n    $ ./autogen.sh       # Generate a ./configure script\n    $ ./configure        # Generate a build system\n    $ make               # Run the actual build process\n    $ make check         # Run the test suite\n    $ sudo make install  # Install the library into the system (optional)\n\nTo compile optional modules (such as Schnorr signatures), you need to run `./configure` with additional flags (such as `--enable-module-schnorrsig`). Run `./configure --help` to see the full list of available flags.\n\nBuilding with CMake (experimental)\n----------------------------------\n\nTo maintain a pristine source tree, CMake encourages to perform an out-of-source build by using a separate dedicated build tree.\n\n### Building on POSIX systems\n\n    $ cmake -B build              # Generate a build system in subdirectory \"build\"\n    $ cmake --build build         # Run the actual build process\n    $ ctest --test-dir build      # Run the test suite\n    $ sudo cmake --install build  # Install the library into the system (optional)\n\nTo compile optional modules (such as Schnorr signatures), you need to run `cmake` with additional flags (such as `-DSECP256K1_ENABLE_MODULE_SCHNORRSIG=ON`). Run `cmake -B build -LH` or `ccmake -B build` to see the full list of available flags.\n\n### Cross compiling\n\nTo alleviate issues with cross compiling, preconfigured toolchain files are available in the `cmake` directory.\nFor example, to cross compile for Windows:\n\n    $ cmake -B build -DCMAKE_TOOLCHAIN_FILE=cmake/x86_64-w64-mingw32.toolchain.cmake\n\nTo cross compile for Android with [NDK](https://developer.android.com/ndk/guides/cmake) (using NDK's toolchain file, and assuming the `ANDROID_NDK_ROOT` environment variable has been set):\n\n    $ cmake -B build -DCMAKE_TOOLCHAIN_FILE=\"${ANDROID_NDK_ROOT}/build/cmake/android.toolchain.cmake\" -DANDROID_ABI=arm64-v8a -DANDROID_PLATFORM=28\n\n### Building on Windows\n\nTo build on Windows with Visual Studio, a proper [generator](https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html#visual-studio-generators) must be specified for a new build tree.\n\nThe following example assumes using of Visual Studio 2022 and CMake v3.21+.\n\nIn \"Developer Command Prompt for VS 2022\":\n\n    >cmake -G \"Visual Studio 17 2022\" -A x64 -B build\n    >cmake --build build --config RelWithDebInfo\n\nUsage examples\n-----------\nUsage examples can be found in the [examples](examples) directory. To compile them you need to configure with `--enable-examples`.\n  * [ECDSA example](examples/ecdsa.c)\n  * [Schnorr signatures example](examples/schnorr.c)\n  * [Deriving a shared secret (ECDH) example](examples/ecdh.c)\n  * [ElligatorSwift key exchange example](examples/ellswift.c)\n\nTo compile the Schnorr signature and ECDH examples, you also need to configure with `--enable-module-schnorrsig` and `--enable-module-ecdh`.\n\nBenchmark\n------------\nIf configured with `--enable-benchmark` (which is the default), binaries for benchmarking the libsecp256k1 functions will be present in the root directory after the build.\n\nTo print the benchmark result to the command line:\n\n    $ ./bench_name\n\nTo create a CSV file for the benchmark result :\n\n    $ ./bench_name | sed '2d;s/ \\{1,\\}//g' > bench_name.csv\n\nReporting a vulnerability\n------------\n\nSee [SECURITY.md](SECURITY.md)\n\nContributing to libsecp256k1\n------------\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.697265625,
          "content": "# Security Policy\n\n## Reporting a Vulnerability\n\nTo report security issues send an email to secp256k1-security@bitcoincore.org (not for support).\n\nThe following keys may be used to communicate sensitive information to developers:\n\n| Name | Fingerprint |\n|------|-------------|\n| Pieter Wuille | 133E AC17 9436 F14A 5CF1  B794 860F EB80 4E66 9320 |\n| Jonas Nick | 36C7 1A37 C9D9 88BD E825  08D9 B1A7 0E4F 8DCD 0366 |\n| Tim Ruffing | 09E0 3F87 1092 E40E 106E  902B 33BC 86AB 80FF 5516 |\n\nYou can import a key by running the following command with that individual’s fingerprint: `gpg --keyserver hkps://keys.openpgp.org --recv-keys \"<fingerprint>\"` Ensure that you put quotes around fingerprints containing spaces.\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 0.0458984375,
          "content": "#!/bin/sh\nset -e\nautoreconf -if --warnings=all\n"
        },
        {
          "name": "build-aux",
          "type": "tree",
          "content": null
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 20.4658203125,
          "content": "AC_PREREQ([2.60])\n\n# The package (a.k.a. release) version is based on semantic versioning 2.0.0 of\n# the API. All changes in experimental modules are treated as\n# backwards-compatible and therefore at most increase the minor version.\ndefine(_PKG_VERSION_MAJOR, 0)\ndefine(_PKG_VERSION_MINOR, 6)\ndefine(_PKG_VERSION_PATCH, 1)\ndefine(_PKG_VERSION_IS_RELEASE, false)\n\n# The library version is based on libtool versioning of the ABI. The set of\n# rules for updating the version can be found here:\n# https://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html\n# All changes in experimental modules are treated as if they don't affect the\n# interface and therefore only increase the revision.\ndefine(_LIB_VERSION_CURRENT, 5)\ndefine(_LIB_VERSION_REVISION, 1)\ndefine(_LIB_VERSION_AGE, 0)\n\nAC_INIT([libsecp256k1],m4_join([.], _PKG_VERSION_MAJOR, _PKG_VERSION_MINOR, _PKG_VERSION_PATCH)m4_if(_PKG_VERSION_IS_RELEASE, [true], [], [-dev]),[https://github.com/bitcoin-core/secp256k1/issues],[libsecp256k1],[https://github.com/bitcoin-core/secp256k1])\n\nAC_CONFIG_AUX_DIR([build-aux])\nAC_CONFIG_MACRO_DIR([build-aux/m4])\nAC_CANONICAL_HOST\n\n# Require Automake 1.11.2 for AM_PROG_AR\nAM_INIT_AUTOMAKE([1.11.2 foreign subdir-objects])\n\n# Make the compilation flags quiet unless V=1 is used.\nm4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n\nif test \"${CFLAGS+set}\" = \"set\"; then\n  CFLAGS_overridden=yes\nelse\n  CFLAGS_overridden=no\nfi\nAC_PROG_CC\nAM_PROG_AS\nAM_PROG_AR\n\n# Clear some cache variables as a workaround for a bug that appears due to a bad\n# interaction between AM_PROG_AR and LT_INIT when combining MSVC's archiver lib.exe.\n# https://debbugs.gnu.org/cgi/bugreport.cgi?bug=54421\nAS_UNSET(ac_cv_prog_AR)\nAS_UNSET(ac_cv_prog_ac_ct_AR)\nLT_INIT([win32-dll])\n\nbuild_windows=no\n\ncase $host_os in\n  *darwin*)\n     if  test x$cross_compiling != xyes; then\n       AC_CHECK_PROG([BREW], brew, brew)\n       if test x$BREW = xbrew; then\n         # These Homebrew packages may be keg-only, meaning that they won't be found\n         # in expected paths because they may conflict with system files. Ask\n         # Homebrew where each one is located, then adjust paths accordingly.\n         if $BREW list --versions valgrind >/dev/null; then\n           valgrind_prefix=$($BREW --prefix valgrind 2>/dev/null)\n           VALGRIND_CPPFLAGS=\"-I$valgrind_prefix/include\"\n         fi\n       else\n         AC_CHECK_PROG([PORT], port, port)\n         # If homebrew isn't installed and macports is, add the macports default paths\n         # as a last resort.\n         if test x$PORT = xport; then\n           CPPFLAGS=\"$CPPFLAGS -isystem /opt/local/include\"\n           LDFLAGS=\"$LDFLAGS -L/opt/local/lib\"\n         fi\n       fi\n     fi\n   ;;\n   cygwin*|mingw*)\n     build_windows=yes\n   ;;\nesac\n\n# Try if some desirable compiler flags are supported and append them to SECP_CFLAGS.\n#\n# These are our own flags, so we append them to our own SECP_CFLAGS variable (instead of CFLAGS) as\n# recommended in the automake manual (Section \"Flag Variables Ordering\"). CFLAGS belongs to the user\n# and we are not supposed to touch it. In the Makefile, we will need to ensure that SECP_CFLAGS\n# is prepended to CFLAGS when invoking the compiler so that the user always has the last word (flag).\n#\n# Another advantage of not touching CFLAGS is that the contents of CFLAGS will be picked up by\n# libtool for compiling helper executables. For example, when compiling for Windows, libtool will\n# generate entire wrapper executables (instead of simple wrapper scripts as on Unix) to ensure\n# proper operation of uninstalled programs linked by libtool against the uninstalled shared library.\n# These executables are compiled from C source file for which our flags may not be appropriate,\n# e.g., -std=c89 flag has lead to undesirable warnings in the past.\n#\n# TODO We should analogously not touch CPPFLAGS and LDFLAGS but currently there are no issues.\nAC_DEFUN([SECP_TRY_APPEND_DEFAULT_CFLAGS], [\n    # GCC and compatible (incl. clang)\n    if test \"x$GCC\" = \"xyes\"; then\n      # Try to append -Werror to CFLAGS temporarily. Otherwise checks for some unsupported\n      # flags will succeed.\n      # Note that failure to append -Werror does not necessarily mean that -Werror is not\n      # supported. The compiler may already be warning about something unrelated, for example\n      # about some path issue. If that is the case, -Werror cannot be used because all\n      # of those warnings would be turned into errors.\n      SECP_TRY_APPEND_DEFAULT_CFLAGS_saved_CFLAGS=\"$CFLAGS\"\n      SECP_TRY_APPEND_CFLAGS([-Werror], CFLAGS)\n\n      SECP_TRY_APPEND_CFLAGS([-std=c89 -pedantic -Wno-long-long -Wnested-externs -Wshadow -Wstrict-prototypes -Wundef], $1) # GCC >= 3.0, -Wlong-long is implied by -pedantic.\n      SECP_TRY_APPEND_CFLAGS([-Wno-overlength-strings], $1) # GCC >= 4.2, -Woverlength-strings is implied by -pedantic.\n      SECP_TRY_APPEND_CFLAGS([-Wall], $1) # GCC >= 2.95 and probably many other compilers\n      SECP_TRY_APPEND_CFLAGS([-Wno-unused-function], $1) # GCC >= 3.0, -Wunused-function is implied by -Wall.\n      SECP_TRY_APPEND_CFLAGS([-Wextra], $1) # GCC >= 3.4, this is the newer name of -W, which we don't use because older GCCs will warn about unused functions.\n      SECP_TRY_APPEND_CFLAGS([-Wcast-align], $1) # GCC >= 2.95\n      SECP_TRY_APPEND_CFLAGS([-Wcast-align=strict], $1) # GCC >= 8.0\n      SECP_TRY_APPEND_CFLAGS([-Wconditional-uninitialized], $1) # Clang >= 3.0 only\n      SECP_TRY_APPEND_CFLAGS([-Wreserved-identifier], $1) # Clang >= 13.0 only\n      SECP_TRY_APPEND_CFLAGS([-fvisibility=hidden], $1) # GCC >= 4.0\n\n      CFLAGS=\"$SECP_TRY_APPEND_DEFAULT_CFLAGS_saved_CFLAGS\"\n    fi\n\n    # MSVC\n    # Assume MSVC if we're building for Windows but not with GCC or compatible;\n    # libtool makes the same assumption internally.\n    # Note that \"/opt\" and \"-opt\" are equivalent for MSVC; we use \"-opt\" because \"/opt\" looks like a path.\n    if test x\"$GCC\" != x\"yes\" && test x\"$build_windows\" = x\"yes\"; then\n      SECP_TRY_APPEND_CFLAGS([-W3], $1) # Production quality warning level.\n      SECP_TRY_APPEND_CFLAGS([-wd4146], $1) # Disable warning C4146 \"unary minus operator applied to unsigned type, result still unsigned\".\n      SECP_TRY_APPEND_CFLAGS([-wd4244], $1) # Disable warning C4244 \"'conversion' conversion from 'type1' to 'type2', possible loss of data\".\n      SECP_TRY_APPEND_CFLAGS([-wd4267], $1) # Disable warning C4267 \"'var' : conversion from 'size_t' to 'type', possible loss of data\".\n      # Eliminate deprecation warnings for the older, less secure functions.\n      CPPFLAGS=\"-D_CRT_SECURE_NO_WARNINGS $CPPFLAGS\"\n    fi\n])\nSECP_TRY_APPEND_DEFAULT_CFLAGS(SECP_CFLAGS)\n\n###\n### Define config arguments\n###\n\n# In dev mode, we enable all binaries and modules by default but individual options can still be overridden explicitly.\n# Check for dev mode first because SECP_SET_DEFAULT needs enable_dev_mode set.\nAC_ARG_ENABLE(dev_mode, [], [],\n    [enable_dev_mode=no])\n\nAC_ARG_ENABLE(benchmark,\n    AS_HELP_STRING([--enable-benchmark],[compile benchmark [default=yes]]), [],\n    [SECP_SET_DEFAULT([enable_benchmark], [yes], [yes])])\n\nAC_ARG_ENABLE(coverage,\n    AS_HELP_STRING([--enable-coverage],[enable compiler flags to support kcov coverage analysis [default=no]]), [],\n    [SECP_SET_DEFAULT([enable_coverage], [no], [no])])\n\nAC_ARG_ENABLE(tests,\n    AS_HELP_STRING([--enable-tests],[compile tests [default=yes]]), [],\n    [SECP_SET_DEFAULT([enable_tests], [yes], [yes])])\n\nAC_ARG_ENABLE(ctime_tests,\n    AS_HELP_STRING([--enable-ctime-tests],[compile constant-time tests [default=yes if valgrind enabled]]), [],\n    [SECP_SET_DEFAULT([enable_ctime_tests], [auto], [auto])])\n\nAC_ARG_ENABLE(experimental,\n    AS_HELP_STRING([--enable-experimental],[allow experimental configure options [default=no]]), [],\n    [SECP_SET_DEFAULT([enable_experimental], [no], [yes])])\n\nAC_ARG_ENABLE(exhaustive_tests,\n    AS_HELP_STRING([--enable-exhaustive-tests],[compile exhaustive tests [default=yes]]), [],\n    [SECP_SET_DEFAULT([enable_exhaustive_tests], [yes], [yes])])\n\nAC_ARG_ENABLE(examples,\n    AS_HELP_STRING([--enable-examples],[compile the examples [default=no]]), [],\n    [SECP_SET_DEFAULT([enable_examples], [no], [yes])])\n\nAC_ARG_ENABLE(module_ecdh,\n    AS_HELP_STRING([--enable-module-ecdh],[enable ECDH module [default=yes]]), [],\n    [SECP_SET_DEFAULT([enable_module_ecdh], [yes], [yes])])\n\nAC_ARG_ENABLE(module_recovery,\n    AS_HELP_STRING([--enable-module-recovery],[enable ECDSA pubkey recovery module [default=no]]), [],\n    [SECP_SET_DEFAULT([enable_module_recovery], [no], [yes])])\n\nAC_ARG_ENABLE(module_extrakeys,\n    AS_HELP_STRING([--enable-module-extrakeys],[enable extrakeys module [default=yes]]), [],\n    [SECP_SET_DEFAULT([enable_module_extrakeys], [yes], [yes])])\n\nAC_ARG_ENABLE(module_schnorrsig,\n    AS_HELP_STRING([--enable-module-schnorrsig],[enable schnorrsig module [default=yes]]), [],\n    [SECP_SET_DEFAULT([enable_module_schnorrsig], [yes], [yes])])\n\nAC_ARG_ENABLE(module_musig,\n    AS_HELP_STRING([--enable-module-musig],[enable MuSig2 module [default=yes]]), [],\n    [SECP_SET_DEFAULT([enable_module_musig], [yes], [yes])])\n\nAC_ARG_ENABLE(module_ellswift,\n    AS_HELP_STRING([--enable-module-ellswift],[enable ElligatorSwift module [default=yes]]), [],\n    [SECP_SET_DEFAULT([enable_module_ellswift], [yes], [yes])])\n\nAC_ARG_ENABLE(external_default_callbacks,\n    AS_HELP_STRING([--enable-external-default-callbacks],[enable external default callback functions [default=no]]), [],\n    [SECP_SET_DEFAULT([enable_external_default_callbacks], [no], [no])])\n\n# Test-only override of the (autodetected by the C code) \"widemul\" setting.\n# Legal values are:\n#  * int64 (for [u]int64_t),\n#  * int128 (for [unsigned] __int128),\n#  * int128_struct (for int128 implemented as a structure),\n#  *  and auto (the default).\nAC_ARG_WITH([test-override-wide-multiply], [] ,[set_widemul=$withval], [set_widemul=auto])\n\nAC_ARG_WITH([asm], [AS_HELP_STRING([--with-asm=x86_64|arm32|no|auto],\n[assembly to use (experimental: arm32) [default=auto]])],[req_asm=$withval], [req_asm=auto])\n\nAC_ARG_WITH([ecmult-window], [AS_HELP_STRING([--with-ecmult-window=SIZE],\n[window size for ecmult precomputation for verification, specified as integer in range [2..24].]\n[Larger values result in possibly better performance at the cost of an exponentially larger precomputed table.]\n[The table will store 2^(SIZE-1) * 64 bytes of data but can be larger in memory due to platform-specific padding and alignment.]\n[A window size larger than 15 will require you delete the prebuilt precomputed_ecmult.c file so that it can be rebuilt.]\n[For very large window sizes, use \"make -j 1\" to reduce memory use during compilation.]\n[The default value is a reasonable setting for desktop machines (currently 15). [default=15]]\n)],\n[set_ecmult_window=$withval], [set_ecmult_window=15])\n\nAC_ARG_WITH([ecmult-gen-kb], [AS_HELP_STRING([--with-ecmult-gen-kb=2|22|86],\n[The size of the precomputed table for signing in multiples of 1024 bytes (on typical platforms).]\n[Larger values result in possibly better signing/keygeneration performance at the cost of a larger table.]\n[The default value is a reasonable setting for desktop machines (currently 86). [default=86]]\n)],\n[set_ecmult_gen_kb=$withval], [set_ecmult_gen_kb=86])\n\nAC_ARG_WITH([valgrind], [AS_HELP_STRING([--with-valgrind=yes|no|auto],\n[Build with extra checks for running inside Valgrind [default=auto]]\n)],\n[req_valgrind=$withval], [req_valgrind=auto])\n\n###\n### Handle config options (except for modules)\n###\n\nif test x\"$req_valgrind\" = x\"no\"; then\n  enable_valgrind=no\nelse\n  SECP_VALGRIND_CHECK\n  if test x\"$has_valgrind\" != x\"yes\"; then\n    if test x\"$req_valgrind\" = x\"yes\"; then\n      AC_MSG_ERROR([Valgrind support explicitly requested but valgrind/memcheck.h header not available])\n    fi\n    enable_valgrind=no\n  else\n    enable_valgrind=yes\n  fi\nfi\n\nif test x\"$enable_ctime_tests\" = x\"auto\"; then\n    enable_ctime_tests=$enable_valgrind\nfi\n\nprint_msan_notice=no\nif test x\"$enable_ctime_tests\" = x\"yes\"; then\n  SECP_MSAN_CHECK\n  # MSan on Clang >=16 reports uninitialized memory in function parameters and return values, even if\n  # the uninitialized variable is never actually \"used\". This is called \"eager\" checking, and it's\n  # sounds like good idea for normal use of MSan. However, it yields many false positives in the\n  # ctime_tests because many return values depend on secret (i.e., \"uninitialized\") values, and\n  # we're only interested in detecting branches (which count as \"uses\") on secret data.\n  if test x\"$msan_enabled\" = x\"yes\"; then\n    SECP_TRY_APPEND_CFLAGS([-fno-sanitize-memory-param-retval], SECP_CFLAGS)\n    print_msan_notice=yes\n  fi\nfi\n\nif test x\"$enable_coverage\" = x\"yes\"; then\n    SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DCOVERAGE=1\"\n    SECP_CFLAGS=\"-O0 --coverage $SECP_CFLAGS\"\n    # If coverage is enabled, and the user has not overridden CFLAGS,\n    # override Autoconf's value \"-g -O2\" with \"-g\". Otherwise we'd end up\n    # with \"-O0 --coverage -g -O2\".\n    if test \"$CFLAGS_overridden\" = \"no\"; then\n      CFLAGS=\"-g\"\n    fi\n    LDFLAGS=\"--coverage $LDFLAGS\"\nelse\n    # Most likely the CFLAGS already contain -O2 because that is autoconf's default.\n    # We still add it here because passing it twice is not an issue, and handling\n    # this case would just add unnecessary complexity (see #896).\n    SECP_CFLAGS=\"-O2 $SECP_CFLAGS\"\nfi\n\nif test x\"$req_asm\" = x\"auto\"; then\n  SECP_X86_64_ASM_CHECK\n  if test x\"$has_x86_64_asm\" = x\"yes\"; then\n    set_asm=x86_64\n  fi\n  if test x\"$set_asm\" = x; then\n    set_asm=no\n  fi\nelse\n  set_asm=$req_asm\n  case $set_asm in\n  x86_64)\n    SECP_X86_64_ASM_CHECK\n    if test x\"$has_x86_64_asm\" != x\"yes\"; then\n      AC_MSG_ERROR([x86_64 assembly requested but not available])\n    fi\n    ;;\n  arm32)\n    SECP_ARM32_ASM_CHECK\n    if test x\"$has_arm32_asm\" != x\"yes\"; then\n      AC_MSG_ERROR([ARM32 assembly requested but not available])\n    fi\n    ;;\n  no)\n    ;;\n  *)\n    AC_MSG_ERROR([invalid assembly selection])\n    ;;\n  esac\nfi\n\n# Select assembly\nenable_external_asm=no\n\ncase $set_asm in\nx86_64)\n  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DUSE_ASM_X86_64=1\"\n  ;;\narm32)\n  enable_external_asm=yes\n  ;;\nno)\n  ;;\n*)\n  AC_MSG_ERROR([invalid assembly selection])\n  ;;\nesac\n\nif test x\"$enable_external_asm\" = x\"yes\"; then\n  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DUSE_EXTERNAL_ASM=1\"\nfi\n\n\n# Select wide multiplication implementation\ncase $set_widemul in\nint128_struct)\n  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DUSE_FORCE_WIDEMUL_INT128_STRUCT=1\"\n  ;;\nint128)\n  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DUSE_FORCE_WIDEMUL_INT128=1\"\n  ;;\nint64)\n  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DUSE_FORCE_WIDEMUL_INT64=1\"\n  ;;\nauto)\n  ;;\n*)\n  AC_MSG_ERROR([invalid wide multiplication implementation])\n  ;;\nesac\n\nerror_window_size=['window size for ecmult precomputation not an integer in range [2..24]']\ncase $set_ecmult_window in\n''|*[[!0-9]]*)\n  # no valid integer\n  AC_MSG_ERROR($error_window_size)\n  ;;\n*)\n  if test \"$set_ecmult_window\" -lt 2 -o \"$set_ecmult_window\" -gt 24 ; then\n    # not in range\n    AC_MSG_ERROR($error_window_size)\n  fi\n  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DECMULT_WINDOW_SIZE=$set_ecmult_window\"\n  ;;\nesac\n\ncase $set_ecmult_gen_kb in\n2)\n  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DCOMB_BLOCKS=2 -DCOMB_TEETH=5\"\n  ;;\n22)\n  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DCOMB_BLOCKS=11 -DCOMB_TEETH=6\"\n  ;;\n86)\n  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DCOMB_BLOCKS=43 -DCOMB_TEETH=6\"\n  ;;\n*)\n  AC_MSG_ERROR(['ecmult gen table size not 2, 22 or 86'])\n  ;;\nesac\n\nif test x\"$enable_valgrind\" = x\"yes\"; then\n  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES $VALGRIND_CPPFLAGS -DVALGRIND\"\nfi\n\n# Add -Werror and similar flags passed from the outside (for testing, e.g., in CI).\n# We don't want to set the user variable CFLAGS in CI because this would disable\n# autoconf's logic for setting default CFLAGS, which we would like to test in CI.\nSECP_CFLAGS=\"$SECP_CFLAGS $WERROR_CFLAGS\"\n\n###\n### Handle module options\n###\n\n# Processing must be done in a reverse topological sorting of the dependency graph\n# (dependent module first).\nif test x\"$enable_module_ellswift\" = x\"yes\"; then\n  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DENABLE_MODULE_ELLSWIFT=1\"\nfi\n\nif test x\"$enable_module_musig\" = x\"yes\"; then\n  if test x\"$enable_module_schnorrsig\" = x\"no\"; then\n    AC_MSG_ERROR([Module dependency error: You have disabled the schnorrsig module explicitly, but it is required by the musig module.])\n  fi\n  enable_module_schnorrsig=yes\n  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DENABLE_MODULE_MUSIG=1\"\nfi\n\nif test x\"$enable_module_schnorrsig\" = x\"yes\"; then\n  if test x\"$enable_module_extrakeys\" = x\"no\"; then\n    AC_MSG_ERROR([Module dependency error: You have disabled the extrakeys module explicitly, but it is required by the schnorrsig module.])\n  fi\n  enable_module_extrakeys=yes\n  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DENABLE_MODULE_SCHNORRSIG=1\"\nfi\n\nif test x\"$enable_module_extrakeys\" = x\"yes\"; then\n  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DENABLE_MODULE_EXTRAKEYS=1\"\nfi\n\nif test x\"$enable_module_recovery\" = x\"yes\"; then\n  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DENABLE_MODULE_RECOVERY=1\"\nfi\n\nif test x\"$enable_module_ecdh\" = x\"yes\"; then\n  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DENABLE_MODULE_ECDH=1\"\nfi\n\nif test x\"$enable_external_default_callbacks\" = x\"yes\"; then\n  SECP_CONFIG_DEFINES=\"$SECP_CONFIG_DEFINES -DUSE_EXTERNAL_DEFAULT_CALLBACKS=1\"\nfi\n\n###\n### Check for --enable-experimental if necessary\n###\n\nif test x\"$enable_experimental\" = x\"no\"; then\n  if test x\"$set_asm\" = x\"arm32\"; then\n    AC_MSG_ERROR([ARM32 assembly is experimental. Use --enable-experimental to allow.])\n  fi\nfi\n\n###\n### Generate output\n###\n\nAC_CONFIG_FILES([Makefile libsecp256k1.pc])\nAC_SUBST(SECP_CFLAGS)\nAC_SUBST(SECP_CONFIG_DEFINES)\nAM_CONDITIONAL([ENABLE_COVERAGE], [test x\"$enable_coverage\" = x\"yes\"])\nAM_CONDITIONAL([USE_TESTS], [test x\"$enable_tests\" != x\"no\"])\nAM_CONDITIONAL([USE_CTIME_TESTS], [test x\"$enable_ctime_tests\" = x\"yes\"])\nAM_CONDITIONAL([USE_EXHAUSTIVE_TESTS], [test x\"$enable_exhaustive_tests\" != x\"no\"])\nAM_CONDITIONAL([USE_EXAMPLES], [test x\"$enable_examples\" != x\"no\"])\nAM_CONDITIONAL([USE_BENCHMARK], [test x\"$enable_benchmark\" = x\"yes\"])\nAM_CONDITIONAL([ENABLE_MODULE_ECDH], [test x\"$enable_module_ecdh\" = x\"yes\"])\nAM_CONDITIONAL([ENABLE_MODULE_RECOVERY], [test x\"$enable_module_recovery\" = x\"yes\"])\nAM_CONDITIONAL([ENABLE_MODULE_EXTRAKEYS], [test x\"$enable_module_extrakeys\" = x\"yes\"])\nAM_CONDITIONAL([ENABLE_MODULE_SCHNORRSIG], [test x\"$enable_module_schnorrsig\" = x\"yes\"])\nAM_CONDITIONAL([ENABLE_MODULE_MUSIG], [test x\"$enable_module_musig\" = x\"yes\"])\nAM_CONDITIONAL([ENABLE_MODULE_ELLSWIFT], [test x\"$enable_module_ellswift\" = x\"yes\"])\nAM_CONDITIONAL([USE_EXTERNAL_ASM], [test x\"$enable_external_asm\" = x\"yes\"])\nAM_CONDITIONAL([USE_ASM_ARM], [test x\"$set_asm\" = x\"arm32\"])\nAM_CONDITIONAL([BUILD_WINDOWS], [test \"$build_windows\" = \"yes\"])\nAC_SUBST(LIB_VERSION_CURRENT, _LIB_VERSION_CURRENT)\nAC_SUBST(LIB_VERSION_REVISION, _LIB_VERSION_REVISION)\nAC_SUBST(LIB_VERSION_AGE, _LIB_VERSION_AGE)\n\nAC_OUTPUT\n\necho\necho \"Build Options:\"\necho \"  with external callbacks = $enable_external_default_callbacks\"\necho \"  with benchmarks         = $enable_benchmark\"\necho \"  with tests              = $enable_tests\"\necho \"  with ctime tests        = $enable_ctime_tests\"\necho \"  with coverage           = $enable_coverage\"\necho \"  with examples           = $enable_examples\"\necho \"  module ecdh             = $enable_module_ecdh\"\necho \"  module recovery         = $enable_module_recovery\"\necho \"  module extrakeys        = $enable_module_extrakeys\"\necho \"  module schnorrsig       = $enable_module_schnorrsig\"\necho \"  module musig            = $enable_module_musig\"\necho \"  module ellswift         = $enable_module_ellswift\"\necho\necho \"  asm                     = $set_asm\"\necho \"  ecmult window size      = $set_ecmult_window\"\necho \"  ecmult gen table size   = $set_ecmult_gen_kb KiB\"\n# Hide test-only options unless they're used.\nif test x\"$set_widemul\" != xauto; then\necho \"  wide multiplication     = $set_widemul\"\nfi\necho\necho \"  valgrind                = $enable_valgrind\"\necho \"  CC                      = $CC\"\necho \"  CPPFLAGS                = $CPPFLAGS\"\necho \"  SECP_CFLAGS             = $SECP_CFLAGS\"\necho \"  CFLAGS                  = $CFLAGS\"\necho \"  LDFLAGS                 = $LDFLAGS\"\n\nif test x\"$print_msan_notice\" = x\"yes\"; then\n  echo\n  echo \"Note:\"\n  echo \"  MemorySanitizer detected, tried to add -fno-sanitize-memory-param-retval to SECP_CFLAGS\"\n  echo \"  to avoid false positives in ctime_tests. Pass --disable-ctime-tests to avoid this.\"\nfi\n\nif test x\"$enable_experimental\" = x\"yes\"; then\n  echo\n  echo \"WARNING: Experimental build\"\n  echo \"  Experimental features do not have stable APIs or properties, and may not be safe for\"\n  echo \"  production use.\"\nfi\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "libsecp256k1.pc.in",
          "type": "blob",
          "size": 0.2939453125,
          "content": "prefix=@prefix@\nexec_prefix=@exec_prefix@\nlibdir=@libdir@\nincludedir=@includedir@\n\nName: libsecp256k1\nDescription: Optimized C library for EC operations on curve secp256k1\nURL: https://github.com/bitcoin-core/secp256k1\nVersion: @PACKAGE_VERSION@\nCflags: -I${includedir}\nLibs: -L${libdir} -lsecp256k1\n\n"
        },
        {
          "name": "sage",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}