{
  "metadata": {
    "timestamp": 1736710213422,
    "page": 928,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "IanHarvey/bluepy",
      "stars": 1613,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.228515625,
          "content": ".DS_Store\n*.pyc\n__pycache__\nbluepy/*.o\n#bluepy/bluepy-helper\n# eclipse project related files\n.settings/\n.cproject\n.project\n# cygwin modified files\nbluez-5.4/src/bluetoothd\nbluez-5.4/attrib/gatttool\n*.swp\n/build\n/bluepy.egg-info\n/dist\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 0.294921875,
          "content": "This project uses code from the bluez project, which is made available under\nVersion 2 of the GNU Public License. File COPYING in the bluez-x.xx/ directory\ncontains the full text of this license.\n\nCode outside the bluez-x.xx/ directory is placed into the public domain. Note that\nthere is NO WARRANTY.\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 0.3408203125,
          "content": "bluepy README\n=============\n\nBluepy is a Python package to allow Bluetooth Low Energy (a.k.a Bluetooth\nSmart) peripherals to be controlled from Python. Installation instructions\nand release notes are in the file README.md.\n\nSource code and further documentation is at:\n  https://github.com/IanHarvey/bluepy\n  http://ianharvey.github.io/bluepy-doc/\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.328125,
          "content": "bluepy\n======\n\nPython interface to Bluetooth LE on Linux\n\nThis is a project to provide an API to allow access to Bluetooth Low Energy devices\nfrom Python. At present it runs on Linux only; I've mostly developed it using a\nRaspberry Pi, but it will also run on x86 Debian Linux.\n\nThe code is tested on Python 2.7 and 3.4; it should also work on 3.3.\n\nThere is also code which uses this to talk to a TI SensorTag (www.ti.com/sensortag).\n\nAn example to interface the Nordic Semiconductor ASA IoT Sensor Kit, Thingy:52 is available \nin thingy52.py (https://www.nordicsemi.com/eng/Products/Nordic-Thingy-52).\n\nInstallation\n------------\n\nThe code needs an executable `bluepy-helper` to be compiled from C source. This is done\nautomatically if you use the recommended pip installation method (see below). Otherwise,\nyou can rebuild it using the Makefile in the `bluepy` directory.\n\nTo install the current released version, on most Debian-based systems:\n\n    $ sudo apt-get install python-pip libglib2.0-dev\n    $ sudo pip install bluepy\n\nOn Fedora do:\n\n    $ sudo dnf install python-pip glib2-devel\n\nFor Python 3, you may need to use `pip3`:\n\n    $ sudo apt-get install python3-pip libglib2.0-dev\n    $ sudo pip3 install bluepy\n\n*If this fails* you should install from source.\n\n    $ sudo apt-get install git build-essential libglib2.0-dev\n    $ git clone https://github.com/IanHarvey/bluepy.git\n    $ cd bluepy\n    $ python setup.py build\n    $ sudo python setup.py install\n\nI would recommend having command-line tools from BlueZ available for debugging. There\nare instructions for building BlueZ on the Raspberry Pi at http://www.elinux.org/RPi_Bluetooth_LE.\n\nDocumentation\n-------------\n\nDocumentation can be built from the sources in the docs/ directory using Sphinx.\n\nAn online version of this is currently available at: http://ianharvey.github.io/bluepy-doc/\n\nLicense\n-------\n\nThis project uses code from the bluez project, which is available under the Version 2\nof the GNU Public License.\n\nThe Python files are released into the public domain by their author, Ian Harvey.\n\nRelease Notes\n-------------\n\nRelease 1.3.0\n\n- New getState() method for Peripheral class\n- New exception structure / error reporting (#311, #317, #326)\n  BTLEException now has subclasses BLTEDisconnectError, BTLEManagementError, etc.\n  which report an error code and error message passed up from the lower layers, where\n  appropriate.\n- Partial merge #311: aids to debugging; bluepy-helper reports version; fix crash\n- Partial merge #311 and #302: pair() and unpair() now supported\n- Fix #169: 0-byte characteristic writes are now supported\n- Merge #302: OOB data now supported\n- Merge #312: better comments on sample code in docs, better scanner example\n- Fix #292: Unicode string decoding errors in scan data\n- Merge #308: don't ignore sensitivity option during discovery\n- Merge #301: fix Peripheral documentation\n- Fix #286: return list of services from Scan entry\n\n\nRelease 1.2.0\n- Merge #245: Update underlying Bluez version to 5.47\n- Merge #284: Readme updated with Fedora install instructions\n- Merge #283: Fixes for passive scan interruption\n- Merge #275, fix #259: non-ASCII device names now don't break decoding\n- Fix #263, #278: return UUID in scan results\n- Merge #262: Return correct address type in passive scan\n \n\nRelease 1.1.4:\n- Further attempts to fix #158. setup.py rewritten.\n\n*There was no release 1.1.3 made*\n\nRelease 1.1.2: *now deleted*\n- Re #158: Try to make PyPI installation more robust\n- Merge #214: add passive scan support\n- Merge #213: Add Thingy:52 support\n\nRelease 1.1.1\n- Workaround #200: remove -Werror from Makefile\n- Fix #191: generate BTLEException not ValueError, if helper is killed\n- Fix #189: error calling getCharacteristics() when Service has no characteristics\n- Workaround #192: Use make -j1 explicitly\n\nRelease 1.1.0\n- Merge #180: Peripheral.connect() can now take ScanEntry object (like constructor)\n- Merge #162: Add build_ext builder to setup.py\n- Merge #166: Fix crash in getServiceByUUID()\n- Fix #148: Add UUIDs for declarations (e.g. 0x2800 = Primary Service Declaration)\n- Fix #28: Sensortag accelerometer values now scaled properly\n- Merge #89: Add support for descriptors\n- Fix #157: make 'services' a property\n- Fix #111: make parameter names match documentation\n- Fix #128: Characteristic.write() was missing a return value\n- Read battery level on Sensortag\n- Formatting/style fixes (#170 and others)\n\nRelease 1.0.5\n- Fix issue #123: Scanner documentation updated\n- Fix #125: setup.py error reporting on Python 3 if compilation fails\n- Fix for issue #127: setup.py fails to rebuild bluepy-helper \n\nRelease 1.0.4\n- Scanner now available as bluepy.blescan module and 'blescan' command\n- Fix example scanner code in documentation\n- Python 3 installation fixes\n- Fix issues #69, #112, #115, #119\n\nRelease 1.0.3\n- Now available on PyPI as `bluepy`. Installs via pip.\n\nRelease 0.9.12\n- Support for CC2650 sensortag\n- Documentation fixes\n- Bug fix: DefaultDelegate has a handleDiscovery method\n- Bug fix: keypress now works with both V1.4 and V1.5 firmware \n\n\nRelease 0.9.11\n\n- Minor consistency improvements & bug fixes\n- Scanner now has getDevices() call\n- Docs updated\n\nRelease 0.9.10\n\n- Now with Scan functionality\n\nRelease 0.9.9\n\n- Now based on Bluez r5.29\n- UUIDs held in separate JSON file, script added to update from Web\n- Added setup.py and __init__.py for use with setuptools\n- Allows indications as well as notifications\n- Bug fixes (see pull requests #46, #48, #35)\n\nRelease 0.9.0\n- Support for Notifications\n- SensorTag code now supports keypress service\n- Bug fix for SetSecurityLevel\n- Support for Random address type\n- More characteristic and service UUIDs added\n\nRelease 0.2.0\n\n- Sphinx-based documentation\n- SensorTag optimisations \n- Improved command line interface to sensortag.py\n- Added .gitignore file (github issue #17)\n\nRelease 0.1.0\n- this has received limited testing and bug fixes on Python 3.4.1\n- fix for exceptions thrown if peripheral sends notifications\n\nRelease dated 2-Jul-2014\n\n- expand AssignedNumbers class definitions\n- add getCommonName() to UUID type, returns human-friendly string\n\nRelease dated 14-Apr-2014:\n\n- make btle.py useful from the command line\n- add AssignedNumbers class\n\nRelease dated 12-Mar-2014\n- add exceptions, and clean up better on failure\n\nInitial release 19-Oct-2013:\n\nTO DO list\n----------\n\nThe following are still missing from the current release:\n- Unit test \n- Peripheral role support\n\n\n\n"
        },
        {
          "name": "__init__.py",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "bluepy",
          "type": "tree",
          "content": null
        },
        {
          "name": "bluez-5.47",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup.cfg",
          "type": "blob",
          "size": 0.0390625,
          "content": "[metadata]\ndescription-file = README.md\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 2.3916015625,
          "content": "\"\"\"Python setup script for bluepy\"\"\"\n\nfrom setuptools.command.build_py import build_py\nfrom setuptools import setup\nimport subprocess\nimport shlex\nimport sys\nimport os\n\nVERSION='1.3.0'\n\ndef pre_install():\n    \"\"\"Do the custom compiling of the bluepy-helper executable from the makefile\"\"\"\n    try:\n        print(\"Working dir is \" + os.getcwd())\n        with open(\"bluepy/version.h\",\"w\") as verfile:\n            verfile.write('#define VERSION_STRING \"%s\"\\n' % VERSION)\n        for cmd in [ \"make -C ./bluepy clean\", \"make -C bluepy -j1\" ]:\n            print(\"execute \" + cmd)\n            msgs = subprocess.check_output(shlex.split(cmd), stderr=subprocess.STDOUT)\n    except subprocess.CalledProcessError as e:\n        print(\"Failed to compile bluepy-helper. Exiting install.\")\n        print(\"Command was \" + repr(cmd) + \" in \" + os.getcwd())\n        print(\"Return code was %d\" % e.returncode)\n        print(\"Output was:\\n%s\" % e.output)\n        sys.exit(1)\n\nclass my_build_py(build_py):\n    def run(self):\n        pre_install()\n        build_py.run(self)\n\nsetup_cmdclass = {\n    'build_py' : my_build_py,\n}\n\n# Force package to be *not* pure Python\n# Discusssed at issue #158\n\ntry:\n    from wheel.bdist_wheel import bdist_wheel\n\n    class BluepyBdistWheel(bdist_wheel):\n        def finalize_options(self):\n            bdist_wheel.finalize_options(self)\n            self.root_is_pure = False\n\n    setup_cmdclass['bdist_wheel'] = BluepyBdistWheel\nexcept ImportError:\n    pass\n\n\nsetup (\n    name='bluepy',\n    version=VERSION,\n    description='Python module for interfacing with BLE devices through Bluez',\n    author='Ian Harvey',\n    author_email='website-contact@fenditton.org',\n    url='https://github.com/IanHarvey/bluepy',\n    download_url='https://github.com/IanHarvey/bluepy/tarball/v/%s' % VERSION,\n    keywords=[ 'Bluetooth', 'Bluetooth Smart', 'BLE', 'Bluetooth Low Energy' ],\n    classifiers=[\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3.3',\n        'Programming Language :: Python :: 3.4',\n    ],\n    packages=['bluepy'],\n    \n    package_data={\n        'bluepy': ['bluepy-helper', '*.json', 'bluez-src.tgz', 'bluepy-helper.c', 'version.h', 'Makefile']\n    },\n    cmdclass=setup_cmdclass,\n    entry_points={\n        'console_scripts': [\n            'thingy52=bluepy.thingy52:main',\n            'sensortag=bluepy.sensortag:main',\n            'blescan=bluepy.blescan:main',\n        ]\n    }\n)\n\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}